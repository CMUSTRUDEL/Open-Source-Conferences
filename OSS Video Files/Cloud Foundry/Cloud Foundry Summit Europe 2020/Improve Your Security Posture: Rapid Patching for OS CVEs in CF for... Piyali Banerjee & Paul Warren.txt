Title: Improve Your Security Posture: Rapid Patching for OS CVEs in CF for... Piyali Banerjee & Paul Warren
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	Improve Your Security Posture: Rapid Patching for OS CVEs in CF for K8s - Piyali Banerjee & Paul Warren, VMware

In CF for K8s, the responsibility of keeping the stack (root filesystem/OS) for applications up-to-date when a security vulnerability has been patched has moved from Diego to the CF API. With this new feature, you will be able to purposefully and selectively trigger stack updates. In this Lightning Talk, Piyali and Paul will show how you can upgrade the stacks of running apps in cf-for-k8s without incurring downtime.
Captions: 
	00:00:00,080 --> 00:00:04,000
hello folks um good afternoon uh welcome

00:00:03,280 --> 00:00:05,759
to our talk

00:00:04,000 --> 00:00:07,200
uh on improving your security posture

00:00:05,759 --> 00:00:09,840
with cfocates

00:00:07,200 --> 00:00:11,440
my name is paul warren i'm the product

00:00:09,840 --> 00:00:14,000
manager of release integration

00:00:11,440 --> 00:00:16,000
and i'm joined by hello everyone i'm

00:00:14,000 --> 00:00:18,240
piali banerjee and i'm an engineer on

00:00:16,000 --> 00:00:20,400
the capyon kate's team

00:00:18,240 --> 00:00:21,279
great so what we're going to talk to you

00:00:20,400 --> 00:00:23,439
today

00:00:21,279 --> 00:00:25,279
about is patching your running

00:00:23,439 --> 00:00:26,720
applications

00:00:25,279 --> 00:00:29,119
as i'm sure you're aware there's a

00:00:26,720 --> 00:00:31,519
feature in cf deployment today

00:00:29,119 --> 00:00:33,360
that allows you to do exactly this patch

00:00:31,519 --> 00:00:34,800
all of your running applications with a

00:00:33,360 --> 00:00:38,559
single command

00:00:34,800 --> 00:00:40,960
and the way that works is we issue a new

00:00:38,559 --> 00:00:42,239
boss release for the cf linux fs3

00:00:40,960 --> 00:00:44,559
release

00:00:42,239 --> 00:00:47,200
and our operator would take that um and

00:00:44,559 --> 00:00:50,079
do a cf deployment or a bosch deploy

00:00:47,200 --> 00:00:52,239
um and diego recognizes that this boss

00:00:50,079 --> 00:00:52,960
release has changed and it will go ahead

00:00:52,239 --> 00:00:55,920
and

00:00:52,960 --> 00:00:57,039
patch all of the running applications

00:00:55,920 --> 00:01:00,480
that are out there

00:00:57,039 --> 00:01:02,160
thereby affecting a patch with a single

00:01:00,480 --> 00:01:03,920
command

00:01:02,160 --> 00:01:05,360
but in this new world where cf is

00:01:03,920 --> 00:01:08,720
running on kubernetes

00:01:05,360 --> 00:01:10,320
how do we achieve that same effect piali

00:01:08,720 --> 00:01:13,840
is going to explain how this works

00:01:10,320 --> 00:01:13,840
and take you through a demo

00:01:15,840 --> 00:01:20,799
thank you for the great introduction

00:01:17,680 --> 00:01:21,520
paul um so yeah i will first walk

00:01:20,799 --> 00:01:23,840
through

00:01:21,520 --> 00:01:26,479
how the stack updates actually happen in

00:01:23,840 --> 00:01:29,600
cf4k it's before diving into the demo

00:01:26,479 --> 00:01:31,439
and stack updates can be split into two

00:01:29,600 --> 00:01:34,320
phases the first phase which is that

00:01:31,439 --> 00:01:36,159
kpac rebases the app automatically

00:01:34,320 --> 00:01:37,360
and this happens after the platform

00:01:36,159 --> 00:01:39,920
operator would use

00:01:37,360 --> 00:01:40,400
cubecontrol to update the cluster stack

00:01:39,920 --> 00:01:42,479
and

00:01:40,400 --> 00:01:44,560
kpac would automatically rebase all the

00:01:42,479 --> 00:01:45,439
app images that are using that cluster

00:01:44,560 --> 00:01:48,799
stack

00:01:45,439 --> 00:01:50,640
and will generate new oci images

00:01:48,799 --> 00:01:52,799
in the configured app image registry as

00:01:50,640 --> 00:01:55,200
a result kpac will also

00:01:52,799 --> 00:01:56,560
update the corresponding image with this

00:01:55,200 --> 00:01:58,799
new image reference

00:01:56,560 --> 00:02:00,719
as well as a latest build reason which

00:01:58,799 --> 00:02:02,159
is stack and this will be critical for

00:02:00,719 --> 00:02:05,439
phase two

00:02:02,159 --> 00:02:06,799
phase two is that the cf api controllers

00:02:05,439 --> 00:02:09,520
which is a new component

00:02:06,799 --> 00:02:11,440
that our team made which includes

00:02:09,520 --> 00:02:12,959
various controllers such as the image

00:02:11,440 --> 00:02:15,840
controller that watches

00:02:12,959 --> 00:02:18,000
the corresponding kpak resources and

00:02:15,840 --> 00:02:18,959
performs certain actions depending on

00:02:18,000 --> 00:02:21,040
the events

00:02:18,959 --> 00:02:22,720
that are happening to these resources so

00:02:21,040 --> 00:02:23,920
for example the image controller in this

00:02:22,720 --> 00:02:26,160
case watches for

00:02:23,920 --> 00:02:28,000
events on the image resource and sees

00:02:26,160 --> 00:02:28,560
that there is a latest build reason of

00:02:28,000 --> 00:02:31,040
stack

00:02:28,560 --> 00:02:33,120
on this custom resource and a latest

00:02:31,040 --> 00:02:34,720
image which is this new image reference

00:02:33,120 --> 00:02:37,360
for the rebased image

00:02:34,720 --> 00:02:38,879
image controller will then take this new

00:02:37,360 --> 00:02:41,120
image reference and update the

00:02:38,879 --> 00:02:43,760
corresponding app stateful set

00:02:41,120 --> 00:02:46,160
with this new reference and using the

00:02:43,760 --> 00:02:48,160
stateful set's rolling update strategy

00:02:46,160 --> 00:02:50,080
each of the pods which represents the

00:02:48,160 --> 00:02:53,599
app instances for the apps

00:02:50,080 --> 00:02:55,599
will one at a time be um have this new

00:02:53,599 --> 00:02:57,760
image reference deployed in them

00:02:55,599 --> 00:02:59,840
and this is how we're optimizing the

00:02:57,760 --> 00:03:01,680
kubernetes native technology of this

00:02:59,840 --> 00:03:03,360
rolling update strategy for example to

00:03:01,680 --> 00:03:05,360
make this happen in a very automatic and

00:03:03,360 --> 00:03:06,879
seamless manner

00:03:05,360 --> 00:03:09,440
and finally the image controller will

00:03:06,879 --> 00:03:10,959
update the corresponding apps droplet in

00:03:09,440 --> 00:03:13,680
cctv so that in

00:03:10,959 --> 00:03:14,720
following pushes of the app the app will

00:03:13,680 --> 00:03:18,000
automatically have

00:03:14,720 --> 00:03:20,159
this new stack on it so now

00:03:18,000 --> 00:03:21,760
i will show the demo of this happening

00:03:20,159 --> 00:03:27,200
in real time

00:03:21,760 --> 00:03:27,200
so here we have if i do cf

00:03:30,840 --> 00:03:35,680
apps

00:03:33,760 --> 00:03:37,360
we have two apps a demo go app and a

00:03:35,680 --> 00:03:40,560
demo ruby app each has

00:03:37,360 --> 00:03:41,200
five app instances in them and i'm an

00:03:40,560 --> 00:03:44,560
operator

00:03:41,200 --> 00:03:47,519
and i have a cluster stack over here

00:03:44,560 --> 00:03:50,080
that as you can see by the run image has

00:03:47,519 --> 00:03:52,159
version 0.0.98

00:03:50,080 --> 00:03:53,680
as the run image but if i know that

00:03:52,159 --> 00:03:56,080
there is an upgrade and there's a

00:03:53,680 --> 00:03:57,820
version 99 that came out

00:03:56,080 --> 00:03:59,360
i would use cubecontrol

00:03:57,820 --> 00:04:02,480
[Music]

00:03:59,360 --> 00:04:05,540
to patch this cluster stack

00:04:02,480 --> 00:04:08,639
and update it to be version 99 instead

00:04:05,540 --> 00:04:08,639
[Music]

00:04:09,200 --> 00:04:13,120
and after this cluster stack has been

00:04:11,840 --> 00:04:15,599
patched

00:04:13,120 --> 00:04:16,479
as you can see on the bottom left window

00:04:15,599 --> 00:04:18,079
the images

00:04:16,479 --> 00:04:19,759
are both going to be automatically

00:04:18,079 --> 00:04:22,320
updated by kpack with

00:04:19,759 --> 00:04:24,000
new image references that refer to the

00:04:22,320 --> 00:04:25,520
rebased image

00:04:24,000 --> 00:04:28,880
so let's look at one of these images as

00:04:25,520 --> 00:04:30,720
an example

00:04:28,880 --> 00:04:32,400
as you can see in the status the latest

00:04:30,720 --> 00:04:35,440
build reason is stack

00:04:32,400 --> 00:04:38,479
and the latest image over here

00:04:35,440 --> 00:04:43,440
has this particular sha if we go to the

00:04:38,479 --> 00:04:45,680
corresponding stateful set

00:04:43,440 --> 00:04:46,960
we'll see that both of these apps uh

00:04:45,680 --> 00:04:48,479
both of these stateful sets are already

00:04:46,960 --> 00:04:50,400
hard at work with their rolling update

00:04:48,479 --> 00:04:52,240
strategy to roll out these pots with the

00:04:50,400 --> 00:04:53,759
new image reference so this is a very

00:04:52,240 --> 00:04:55,919
fast process

00:04:53,759 --> 00:04:57,440
and very cool but i wanted to show the

00:04:55,919 --> 00:05:01,199
staple set

00:04:57,440 --> 00:05:02,000
of one of them to show how the cf api

00:05:01,199 --> 00:05:04,560
controllers

00:05:02,000 --> 00:05:06,000
has updated the stateful set with this

00:05:04,560 --> 00:05:09,280
new image reference

00:05:06,000 --> 00:05:12,160
so as you can see by this opi

00:05:09,280 --> 00:05:12,800
image over here hopefully i got the

00:05:12,160 --> 00:05:16,240
right

00:05:12,800 --> 00:05:19,199
staple set here yeah so this image

00:05:16,240 --> 00:05:20,080
reference matches the image reference

00:05:19,199 --> 00:05:24,320
that

00:05:20,080 --> 00:05:26,720
uh kpac returned in the rebased image

00:05:24,320 --> 00:05:28,880
and the api controllers is responsible

00:05:26,720 --> 00:05:30,880
for this stateful set patching

00:05:28,880 --> 00:05:32,639
the api controllers make sure that the

00:05:30,880 --> 00:05:34,160
corresponding apps that are using this

00:05:32,639 --> 00:05:37,280
new cluster stack

00:05:34,160 --> 00:05:38,800
will reflect the new rebased image

00:05:37,280 --> 00:05:42,800
reference that kpak

00:05:38,800 --> 00:05:44,400
produced and i think the other nice

00:05:42,800 --> 00:05:44,960
feature about this piano sorry to

00:05:44,400 --> 00:05:47,680
interrupt

00:05:44,960 --> 00:05:48,000
is is that um unlike the old world where

00:05:47,680 --> 00:05:50,240
the

00:05:48,000 --> 00:05:52,000
operator had to wait for a new uh

00:05:50,240 --> 00:05:55,120
release in this new world as soon

00:05:52,000 --> 00:05:57,199
as this uh new run image is available on

00:05:55,120 --> 00:05:59,120
the cloud native bill packs website you

00:05:57,199 --> 00:06:01,280
you're good to patch your cf for kate's

00:05:59,120 --> 00:06:03,840
deployment

00:06:01,280 --> 00:06:05,440
exactly and it's very fast and it's very

00:06:03,840 --> 00:06:06,960
easy all you have to do or all the

00:06:05,440 --> 00:06:09,360
operator will have to do is this

00:06:06,960 --> 00:06:11,280
one line command and everything will

00:06:09,360 --> 00:06:14,560
happen automatically

00:06:11,280 --> 00:06:16,479
so cool and we definitely so canines is

00:06:14,560 --> 00:06:17,840
a really great tool for observability in

00:06:16,479 --> 00:06:19,759
general and as you can see it's very

00:06:17,840 --> 00:06:20,080
easy to see what the progress is for all

00:06:19,759 --> 00:06:23,600
of your

00:06:20,080 --> 00:06:24,880
apps but our team is also going to be

00:06:23,600 --> 00:06:27,039
working on other ways

00:06:24,880 --> 00:06:29,280
of making the observability of stack

00:06:27,039 --> 00:06:31,280
updates much better experience for the

00:06:29,280 --> 00:06:34,160
operators so look out for some more cool

00:06:31,280 --> 00:06:36,319
features related to this coming up soon

00:06:34,160 --> 00:06:38,400
and we're also planning on updating the

00:06:36,319 --> 00:06:40,639
related cappy stack endpoints

00:06:38,400 --> 00:06:42,880
with this information as well so you can

00:06:40,639 --> 00:06:43,600
with with some very fast cf commands for

00:06:42,880 --> 00:06:46,479
example

00:06:43,600 --> 00:06:48,319
you can see what uh stack version your

00:06:46,479 --> 00:06:50,319
apps are using so

00:06:48,319 --> 00:06:53,840
yeah we have a lot of exciting work

00:06:50,319 --> 00:06:53,840
coming ahead for this as well

00:06:53,919 --> 00:06:58,160
and with that the stack update is

00:06:55,919 --> 00:07:00,240
complete and all five of the instances

00:06:58,160 --> 00:07:03,840
for each of the apps are ready

00:07:00,240 --> 00:07:03,840
with the new rebase stack

00:07:04,720 --> 00:07:12,319
yeah it's very fast now going back

00:07:08,400 --> 00:07:15,199
to the presentation i wanted to share

00:07:12,319 --> 00:07:15,520
some uh ways that you can reach out to

00:07:15,199 --> 00:07:18,800
us

00:07:15,520 --> 00:07:19,440
with questions and feedback and here for

00:07:18,800 --> 00:07:22,639
both

00:07:19,440 --> 00:07:24,000
for both paul and my team the cf api on

00:07:22,639 --> 00:07:25,199
kubernetes team as well as the release

00:07:24,000 --> 00:07:27,599
integration team

00:07:25,199 --> 00:07:29,360
here are this relative the relevant

00:07:27,599 --> 00:07:31,360
slack channels as well as the github

00:07:29,360 --> 00:07:32,720
pages in case you run into any issues or

00:07:31,360 --> 00:07:33,360
anything feel free to reach out and

00:07:32,720 --> 00:07:38,400
we'll

00:07:33,360 --> 00:07:42,560
try our best to help you out absolutely

00:07:38,400 --> 00:07:42,560
thank you so much thank you very much

00:07:42,840 --> 00:07:47,199
bye

00:07:44,319 --> 00:07:49,680
hello everyone um so yeah please post

00:07:47,199 --> 00:07:52,160
any questions that you have on the demo

00:07:49,680 --> 00:07:53,199
uh or anything about stack updates in

00:07:52,160 --> 00:07:59,840
the q a tab

00:07:53,199 --> 00:07:59,840
and i'll get to it shortly

00:08:25,840 --> 00:08:27,919
you

00:08:43,039 --> 00:08:46,080
okay so your question has come in from

00:08:45,440 --> 00:08:48,000
joe chen

00:08:46,080 --> 00:08:51,040
how do you ensure that all apps are

00:08:48,000 --> 00:08:54,480
compatible with the new stack version

00:08:51,040 --> 00:08:56,959
so this is something that

00:08:54,480 --> 00:08:58,080
is up to the platform operators or to

00:08:56,959 --> 00:09:01,519
the app devs

00:08:58,080 --> 00:09:03,680
and currently for the new stack version

00:09:01,519 --> 00:09:04,880
the updates usually include security

00:09:03,680 --> 00:09:07,120
patches

00:09:04,880 --> 00:09:08,080
which are normally not breaking changes

00:09:07,120 --> 00:09:10,320
writing so

00:09:08,080 --> 00:09:11,120
usually you can safely upgrade to a new

00:09:10,320 --> 00:09:12,959
stack version

00:09:11,120 --> 00:09:15,440
because it's purely to address security

00:09:12,959 --> 00:09:15,440
concerns

00:09:18,399 --> 00:09:23,839
um and to expand further on that we do

00:09:21,680 --> 00:09:26,240
have some stack observability

00:09:23,839 --> 00:09:26,959
and stack update progress observability

00:09:26,240 --> 00:09:30,080
plans

00:09:26,959 --> 00:09:32,959
in our roadmap and that way the

00:09:30,080 --> 00:09:35,040
operator would be able to see if any of

00:09:32,959 --> 00:09:38,160
their apps for some reason have failed

00:09:35,040 --> 00:09:40,640
in rebasing to the new stack or

00:09:38,160 --> 00:09:41,200
and in that case some more debugging can

00:09:40,640 --> 00:09:51,839
be done

00:09:41,200 --> 00:09:51,839
to diagnose what the actual problem is

00:10:45,839 --> 00:10:47,920
you

00:11:13,839 --> 00:11:15,920
you

00:11:46,800 --> 00:11:53,120
we have a few more minutes left for this

00:11:49,839 --> 00:11:54,079
q a session so if you have any questions

00:11:53,120 --> 00:11:57,519
please

00:11:54,079 --> 00:11:59,279
feel free to put in the q a tab and

00:11:57,519 --> 00:12:01,279
if you come up with questions later on

00:11:59,279 --> 00:12:04,959
you can always reach out to

00:12:01,279 --> 00:12:07,839
us on the capycades release channel um

00:12:04,959 --> 00:12:11,839
in the cf slack or you could reach out

00:12:07,839 --> 00:12:11,839
in the cf4case channel as well

00:12:50,839 --> 00:12:53,839
okay

00:14:01,760 --> 00:14:03,839
you

00:14:57,920 --> 00:15:02,639
great looks like there is there are no

00:15:00,639 --> 00:15:04,560
further questions for now but

00:15:02,639 --> 00:15:06,079
again please feel free to reach out to

00:15:04,560 --> 00:15:09,639
us on slack

00:15:06,079 --> 00:15:12,639
and have a great rest of your summit bye

00:15:09,639 --> 00:15:12,639

YouTube URL: https://www.youtube.com/watch?v=QuY4vjXTLms


