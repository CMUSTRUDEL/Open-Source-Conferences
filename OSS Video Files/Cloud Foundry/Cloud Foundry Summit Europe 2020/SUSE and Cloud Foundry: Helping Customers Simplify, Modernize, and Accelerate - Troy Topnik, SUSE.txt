Title: SUSE and Cloud Foundry: Helping Customers Simplify, Modernize, and Accelerate - Troy Topnik, SUSE
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	SUSE and Cloud Foundry: Helping Customers Simplify, Modernize, and Accelerate - Troy Topnik, SUSE

SUSE has been at the forefront of adopting Kubernetes as a platform for running Cloud Foundry. As part of our mission to help our customers adopt cloud-native technologies, we've learned that the path to successful utilization of Kubernetes can be difficult - for end user software developers, for platform operators, and even for Cloud Foundry itself. This session will summarize how KubeCF, Quarks, and Stratos are building a bridge for platform operators from current BOSH-based releases to the next generation of Cloud Foundry components currently under development.
Captions: 
	00:00:00,160 --> 00:00:03,120
hi welcome to this cloud foundry summit

00:00:02,480 --> 00:00:05,920
session

00:00:03,120 --> 00:00:06,799
souza in cloud foundry helping customers

00:00:05,920 --> 00:00:09,599
simplify

00:00:06,799 --> 00:00:10,880
modernize and accelerate i'm troy

00:00:09,599 --> 00:00:12,960
topnick

00:00:10,880 --> 00:00:14,799
i'm a product manager at souza and i'm

00:00:12,960 --> 00:00:17,520
responsible for a product called

00:00:14,799 --> 00:00:19,199
souza cloud application platform it's

00:00:17,520 --> 00:00:21,119
our distribution of cloud foundry

00:00:19,199 --> 00:00:22,320
it's our application platform with

00:00:21,119 --> 00:00:24,400
services

00:00:22,320 --> 00:00:25,599
and some excellent features that i'll

00:00:24,400 --> 00:00:28,480
talk you a little bit

00:00:25,599 --> 00:00:30,320
about later i've been working with cloud

00:00:28,480 --> 00:00:32,640
foundry since about uh

00:00:30,320 --> 00:00:34,079
since it first came out in 2011 so i'll

00:00:32,640 --> 00:00:35,520
talk a little bit about

00:00:34,079 --> 00:00:37,600
where i've seen it come from and where i

00:00:35,520 --> 00:00:40,079
see where i see it going

00:00:37,600 --> 00:00:41,040
three things we talk a lot about at

00:00:40,079 --> 00:00:42,840
souza

00:00:41,040 --> 00:00:45,120
it's become a bit of a mantra is

00:00:42,840 --> 00:00:48,559
simplify modernize

00:00:45,120 --> 00:00:50,480
accelerate i'm going to divide up this

00:00:48,559 --> 00:00:52,239
little talk into these sections and

00:00:50,480 --> 00:00:55,199
discuss first of all

00:00:52,239 --> 00:00:57,360
essential complexity versus accidental

00:00:55,199 --> 00:01:02,399
complexity and how we can

00:00:57,360 --> 00:01:05,840
minimize these and how we can simplify

00:01:02,399 --> 00:01:07,520
both the complexity in our processes and

00:01:05,840 --> 00:01:10,400
in our software

00:01:07,520 --> 00:01:11,200
we're going to talk about how we exhort

00:01:10,400 --> 00:01:14,080
our customers

00:01:11,200 --> 00:01:14,479
to modernize but we ourselves also have

00:01:14,080 --> 00:01:17,520
to

00:01:14,479 --> 00:01:19,759
modernize moving cloud foundry onto

00:01:17,520 --> 00:01:22,320
kubernetes has forced us to rethink

00:01:19,759 --> 00:01:23,759
cloud foundry and customers often go

00:01:22,320 --> 00:01:24,720
through the same transformations when

00:01:23,759 --> 00:01:27,680
they adopt

00:01:24,720 --> 00:01:28,720
cloud native technologies and of course

00:01:27,680 --> 00:01:29,840
we're going to talk about how to

00:01:28,720 --> 00:01:32,320
accelerate

00:01:29,840 --> 00:01:33,200
how to get software delivery going

00:01:32,320 --> 00:01:35,280
faster

00:01:33,200 --> 00:01:37,360
cloud foundry itself moves extremely

00:01:35,280 --> 00:01:39,600
fast and we can help

00:01:37,360 --> 00:01:40,880
take the knowledge we've gained in

00:01:39,600 --> 00:01:42,560
developing cloud foundry

00:01:40,880 --> 00:01:43,920
and allow our customers to do the same

00:01:42,560 --> 00:01:47,119
to also accelerate

00:01:43,920 --> 00:01:50,960
so let's take an example here this uh

00:01:47,119 --> 00:01:53,759
is one view a fairly simplified view

00:01:50,960 --> 00:01:54,799
of a cloud foundry application runtime

00:01:53,759 --> 00:01:57,840
showing cappy

00:01:54,799 --> 00:01:58,799
showing the connections of the cloud

00:01:57,840 --> 00:02:02,000
controller

00:01:58,799 --> 00:02:04,399
to the the adjacent parts of the system

00:02:02,000 --> 00:02:06,159
all of these roles are are fairly well

00:02:04,399 --> 00:02:06,719
understood by the developers of cloud

00:02:06,159 --> 00:02:08,879
foundry

00:02:06,719 --> 00:02:10,080
fairly well understood actually by most

00:02:08,879 --> 00:02:13,680
operators of

00:02:10,080 --> 00:02:14,480
cloud foundry platforms and uh we can

00:02:13,680 --> 00:02:16,560
describe how

00:02:14,480 --> 00:02:18,640
most of these things work this is a

00:02:16,560 --> 00:02:20,400
manageable level of complexity

00:02:18,640 --> 00:02:22,160
but it is not the whole story because we

00:02:20,400 --> 00:02:24,000
can go a little deeper

00:02:22,160 --> 00:02:26,080
and when we go a level deeper especially

00:02:24,000 --> 00:02:28,879
with

00:02:26,080 --> 00:02:30,319
the scheduler diego we see a tremendous

00:02:28,879 --> 00:02:30,879
amount of complexity because it's doing

00:02:30,319 --> 00:02:32,879
a very

00:02:30,879 --> 00:02:35,440
difficult job it's doing a lot of stuff

00:02:32,879 --> 00:02:37,680
behind the scenes

00:02:35,440 --> 00:02:39,440
but maybe the accidental complexity is

00:02:37,680 --> 00:02:41,760
starting to creep in at this level

00:02:39,440 --> 00:02:42,640
maybe it's doing things more than it has

00:02:41,760 --> 00:02:46,239
to do

00:02:42,640 --> 00:02:47,920
now i mean the the obvious thing to ask

00:02:46,239 --> 00:02:50,319
at this point is

00:02:47,920 --> 00:02:51,760
do we have to as cloud foundry or as

00:02:50,319 --> 00:02:54,239
cloud foundry vendors or as cloud

00:02:51,760 --> 00:02:57,360
foundry developers have to

00:02:54,239 --> 00:03:00,480
be responsible for this complexity

00:02:57,360 --> 00:03:03,920
we're going to come back to that idea uh

00:03:00,480 --> 00:03:05,680
one of the things that uh we've seen

00:03:03,920 --> 00:03:07,920
with the proliferation of projects

00:03:05,680 --> 00:03:10,080
within cncf this is the cncf

00:03:07,920 --> 00:03:12,080
landscape diagram that shows all the

00:03:10,080 --> 00:03:14,480
projects and products and companies that

00:03:12,080 --> 00:03:16,080
make up that ecosystem

00:03:14,480 --> 00:03:18,159
there's a tremendous amount of stuff out

00:03:16,080 --> 00:03:21,599
there and we don't we probably

00:03:18,159 --> 00:03:24,640
don't want to include this many projects

00:03:21,599 --> 00:03:26,879
or this kind of uh profusion

00:03:24,640 --> 00:03:30,080
of different competing technologies

00:03:26,879 --> 00:03:30,080
within cloud foundry

00:03:30,239 --> 00:03:34,480
but we can take from it we can actually

00:03:32,799 --> 00:03:37,599
choose things

00:03:34,480 --> 00:03:39,680
from this ecosystem uh that are

00:03:37,599 --> 00:03:41,519
best suited to tasks that need to be

00:03:39,680 --> 00:03:43,680
solved in cloud foundry

00:03:41,519 --> 00:03:44,799
so that we can share the complexity with

00:03:43,680 --> 00:03:45,519
other people we can inherit the

00:03:44,799 --> 00:03:47,040
complexity

00:03:45,519 --> 00:03:49,200
but the responsibility is going to be

00:03:47,040 --> 00:03:49,920
shared not only with a larger community

00:03:49,200 --> 00:03:52,159
but with

00:03:49,920 --> 00:03:53,439
sometimes specialists in the particular

00:03:52,159 --> 00:03:55,040
area

00:03:53,439 --> 00:03:56,799
where we're adopting the technology

00:03:55,040 --> 00:03:58,640
prometheus developers would be very good

00:03:56,799 --> 00:04:00,319
at time series databases kubernetes

00:03:58,640 --> 00:04:01,360
obviously is all about scheduling

00:04:00,319 --> 00:04:05,040
containers

00:04:01,360 --> 00:04:06,480
etc so um enterprise customers

00:04:05,040 --> 00:04:09,040
face this same problem when they're

00:04:06,480 --> 00:04:10,720
confronted with this landscape diagram

00:04:09,040 --> 00:04:14,080
and all of these new technologies

00:04:10,720 --> 00:04:17,280
from cncf

00:04:14,080 --> 00:04:17,680
cloud foundry can be a curated subset of

00:04:17,280 --> 00:04:20,959
these

00:04:17,680 --> 00:04:21,840
uh of these services and and features

00:04:20,959 --> 00:04:23,280
and projects

00:04:21,840 --> 00:04:26,320
uh so that we can provide a good

00:04:23,280 --> 00:04:26,320
developer experience

00:04:27,680 --> 00:04:34,160
so uh let's talk about monetizing

00:04:30,720 --> 00:04:36,000
uh modernizing uh the enterprises that

00:04:34,160 --> 00:04:38,320
we deal with that we consult with

00:04:36,000 --> 00:04:39,360
uh that we're making products for but

00:04:38,320 --> 00:04:40,720
also

00:04:39,360 --> 00:04:42,720
let's talk about the history of

00:04:40,720 --> 00:04:45,919
modernizing cloud foundry

00:04:42,720 --> 00:04:48,080
it's uh what's what's happened to it

00:04:45,919 --> 00:04:49,040
recently to make it a more modern a more

00:04:48,080 --> 00:04:53,040
cloud-native

00:04:49,040 --> 00:04:56,160
platform itself so

00:04:53,040 --> 00:04:58,720
uh susan wanted to

00:04:56,160 --> 00:05:01,120
modernize cloud foundry souza wanted to

00:04:58,720 --> 00:05:03,440
produce a cloud foundry distribution

00:05:01,120 --> 00:05:04,800
built on the expertise of a team that i

00:05:03,440 --> 00:05:06,240
was part of

00:05:04,800 --> 00:05:08,160
that were really good at turning cloud

00:05:06,240 --> 00:05:11,360
foundry itself into containers and

00:05:08,160 --> 00:05:13,199
uh we wanted to take

00:05:11,360 --> 00:05:14,880
upstream cloud foundry right from cf

00:05:13,199 --> 00:05:17,199
deployment and create

00:05:14,880 --> 00:05:18,720
cloud foundry application runtime on

00:05:17,199 --> 00:05:22,240
kubernetes

00:05:18,720 --> 00:05:25,600
so when we propose this uh to

00:05:22,240 --> 00:05:29,039
the community we proposed the idea of an

00:05:25,600 --> 00:05:29,680
operator now it was originally intended

00:05:29,039 --> 00:05:32,000
to be

00:05:29,680 --> 00:05:34,400
simply a kubernetes operator for cloud

00:05:32,000 --> 00:05:36,479
foundry application runtime

00:05:34,400 --> 00:05:38,000
taking care of the lifecycle management

00:05:36,479 --> 00:05:40,160
of that

00:05:38,000 --> 00:05:41,840
but undergoing this process of taking

00:05:40,160 --> 00:05:44,560
the bosch releases from upstream we've

00:05:41,840 --> 00:05:46,240
quickly realized that we had to

00:05:44,560 --> 00:05:48,080
basically solve the problem of how to

00:05:46,240 --> 00:05:51,120
convert bosch releases into

00:05:48,080 --> 00:05:53,759
kubernetes artifacts at runtime

00:05:51,120 --> 00:05:57,120
and so we did we turned it into an

00:05:53,759 --> 00:05:59,280
operator for any and every bosch release

00:05:57,120 --> 00:06:00,800
and to do that that was implementing

00:05:59,280 --> 00:06:02,000
bosch director functionality within

00:06:00,800 --> 00:06:04,240
kubernetes which is

00:06:02,000 --> 00:06:06,240
awesome because then we have these

00:06:04,240 --> 00:06:08,639
useful crds

00:06:06,240 --> 00:06:09,680
um uh custom resource definitions in

00:06:08,639 --> 00:06:12,319
kubernetes

00:06:09,680 --> 00:06:13,120
that can do uh bosch-like things clark

00:06:12,319 --> 00:06:15,120
secret

00:06:13,120 --> 00:06:17,440
park's job quark stateful set parks

00:06:15,120 --> 00:06:19,199
restart that emulates behavior that you

00:06:17,440 --> 00:06:23,520
can get from bosch director

00:06:19,199 --> 00:06:26,639
cube cf is cf deployment for kubernetes

00:06:23,520 --> 00:06:28,240
it uses the cf deployment it sources

00:06:26,639 --> 00:06:32,400
all of the code from cf deployment

00:06:28,240 --> 00:06:34,639
releases and you can it actually uses

00:06:32,400 --> 00:06:37,199
all the manifests and ops files to make

00:06:34,639 --> 00:06:40,880
uh cloud foundry work on kubernetes

00:06:37,199 --> 00:06:42,560
now uh this uh this release

00:06:40,880 --> 00:06:44,400
is a lighter weight release than we'd

00:06:42,560 --> 00:06:47,039
done before because we had

00:06:44,400 --> 00:06:48,560
the operator on hand to handle some of

00:06:47,039 --> 00:06:51,520
the the management of

00:06:48,560 --> 00:06:52,400
deployment and and and so forth and and

00:06:51,520 --> 00:06:55,280
managing these

00:06:52,400 --> 00:06:56,400
these templates um and we are able to

00:06:55,280 --> 00:06:57,520
reach a little deeper into the

00:06:56,400 --> 00:06:59,280
configuration

00:06:57,520 --> 00:07:01,599
and make arbitrary changes that you

00:06:59,280 --> 00:07:04,960
would in a bosch like release

00:07:01,599 --> 00:07:06,560
in via helm

00:07:04,960 --> 00:07:08,160
but in the process of doing this we were

00:07:06,560 --> 00:07:10,720
able to

00:07:08,160 --> 00:07:12,319
change souza cloud foundry scf into

00:07:10,720 --> 00:07:16,000
something that was a lot closer

00:07:12,319 --> 00:07:18,880
to the upstream cf deployment now

00:07:16,000 --> 00:07:19,840
one of the big uh pieces of reducing

00:07:18,880 --> 00:07:21,280
complexity

00:07:19,840 --> 00:07:24,160
and something that we've been waiting to

00:07:21,280 --> 00:07:27,759
do for a long time was to replace diego

00:07:24,160 --> 00:07:30,960
with uh the kubernetes scheduler itself

00:07:27,759 --> 00:07:33,199
so irini is a

00:07:30,960 --> 00:07:35,840
plug-in for the cloud controller or it's

00:07:33,199 --> 00:07:38,400
a it's a mechanism by which

00:07:35,840 --> 00:07:40,000
cloud foundry can delegate the

00:07:38,400 --> 00:07:42,000
scheduling of applications

00:07:40,000 --> 00:07:43,520
user applications in cloud foundry to

00:07:42,000 --> 00:07:46,000
kubernetes

00:07:43,520 --> 00:07:47,039
this shifts a lot of the complexity of

00:07:46,000 --> 00:07:50,720
scheduling of

00:07:47,039 --> 00:07:52,319
those applications to kubernetes and

00:07:50,720 --> 00:07:54,160
though kubernetes has to solve that

00:07:52,319 --> 00:07:54,720
problem as well at least that's being

00:07:54,160 --> 00:07:56,639
solved

00:07:54,720 --> 00:07:58,000
by someone else kubernetes is there

00:07:56,639 --> 00:07:59,520
already it's actually running

00:07:58,000 --> 00:08:00,800
our platform now it can run the

00:07:59,520 --> 00:08:03,520
applications that are running on

00:08:00,800 --> 00:08:03,520
platform as well

00:08:03,599 --> 00:08:08,400
it also opens the door for us to use a

00:08:06,720 --> 00:08:11,280
lot of features in kubernetes

00:08:08,400 --> 00:08:13,120
or tools in the kubernetes community

00:08:11,280 --> 00:08:15,120
that are really really useful that

00:08:13,120 --> 00:08:16,960
may allow us to do new things and add

00:08:15,120 --> 00:08:17,919
new functionality to cloud foundry

00:08:16,960 --> 00:08:19,680
easily

00:08:17,919 --> 00:08:21,039
because the the base functionality is

00:08:19,680 --> 00:08:24,400
there in the

00:08:21,039 --> 00:08:27,680
the platform another uh

00:08:24,400 --> 00:08:30,319
project that souza has led is

00:08:27,680 --> 00:08:31,919
stratos stratus is the web ui for cloud

00:08:30,319 --> 00:08:34,719
foundry

00:08:31,919 --> 00:08:36,800
it uh has a back-end proxy that allows

00:08:34,719 --> 00:08:39,279
you to connect multiple endpoints and

00:08:36,800 --> 00:08:41,039
multiple different kinds of apis to this

00:08:39,279 --> 00:08:44,080
proxy and expose them

00:08:41,039 --> 00:08:45,040
in easy to understand web interface now

00:08:44,080 --> 00:08:47,040
this is solving

00:08:45,040 --> 00:08:48,560
complexity in a different way this is

00:08:47,040 --> 00:08:53,200
using good

00:08:48,560 --> 00:08:56,320
ui design principles in order to

00:08:53,200 --> 00:08:58,560
expose cloud foundry features

00:08:56,320 --> 00:08:59,920
in a logical way so that someone can

00:08:58,560 --> 00:09:02,080
just look at the interface and

00:08:59,920 --> 00:09:03,839
understand how to use cloud foundry and

00:09:02,080 --> 00:09:05,920
understand the benefit

00:09:03,839 --> 00:09:08,000
of deploying applications to a platform

00:09:05,920 --> 00:09:11,360
as a service

00:09:08,000 --> 00:09:14,720
how are we going to uh

00:09:11,360 --> 00:09:18,160
simplify in order to accelerate

00:09:14,720 --> 00:09:21,760
now that we've worked so very hard

00:09:18,160 --> 00:09:24,160
to get cloud foundry where it is get it

00:09:21,760 --> 00:09:27,519
working on kubernetes

00:09:24,160 --> 00:09:28,880
get uh the integration of new next

00:09:27,519 --> 00:09:30,320
generation components

00:09:28,880 --> 00:09:32,160
it'd be really great if we could catch

00:09:30,320 --> 00:09:34,839
that wave

00:09:32,160 --> 00:09:36,560
and use our momentum to gain even more

00:09:34,839 --> 00:09:38,080
speed

00:09:36,560 --> 00:09:40,080
so we've demonstrated that we can do

00:09:38,080 --> 00:09:42,720
this cube cf

00:09:40,080 --> 00:09:44,080
together with the quarkx operator can

00:09:42,720 --> 00:09:47,200
turn cf deployment

00:09:44,080 --> 00:09:50,560
releases into helm charts and

00:09:47,200 --> 00:09:54,240
manage them on kubernetes that's

00:09:50,560 --> 00:09:54,959
that's been demonstrated kubernetes

00:09:54,240 --> 00:09:57,040
admins

00:09:54,959 --> 00:09:58,880
can understand this quite easily they

00:09:57,040 --> 00:10:00,959
can deploy it quite easily

00:09:58,880 --> 00:10:03,360
easily to kubernetes but we do have

00:10:00,959 --> 00:10:06,320
something else we need to do

00:10:03,360 --> 00:10:06,959
we have to do this next we have to take

00:10:06,320 --> 00:10:10,240
uh

00:10:06,959 --> 00:10:12,320
different types of deployment artifacts

00:10:10,240 --> 00:10:15,440
and combine them into a release

00:10:12,320 --> 00:10:16,800
for kubernetes whether they come from a

00:10:15,440 --> 00:10:20,320
bosch release

00:10:16,800 --> 00:10:22,720
helm chart raw kubernetes yaml

00:10:20,320 --> 00:10:24,480
with container images or some other

00:10:22,720 --> 00:10:25,680
package format that we don't even know

00:10:24,480 --> 00:10:29,120
about yet

00:10:25,680 --> 00:10:30,720
we need to take this next generation of

00:10:29,120 --> 00:10:32,160
kubernetes native or kubernetes

00:10:30,720 --> 00:10:33,760
idiomatic components

00:10:32,160 --> 00:10:35,680
and combine them and we have a plan to

00:10:33,760 --> 00:10:37,040
do this

00:10:35,680 --> 00:10:40,399
let's talk about these next generation

00:10:37,040 --> 00:10:40,399
components so

00:10:41,760 --> 00:10:47,040
more recently than 2017

00:10:45,279 --> 00:10:48,959
it's become clear to everyone in the

00:10:47,040 --> 00:10:51,279
cloud foundry community that kubernetes

00:10:48,959 --> 00:10:53,120
is the next platform for cloud foundry

00:10:51,279 --> 00:10:55,760
it is a natural fit

00:10:53,120 --> 00:10:56,640
and so all of the upstream teams now are

00:10:55,760 --> 00:11:00,079
on board

00:10:56,640 --> 00:11:02,079
with creating uh kubernetes

00:11:00,079 --> 00:11:03,600
native cloud foundry components right

00:11:02,079 --> 00:11:07,200
from the get-go

00:11:03,600 --> 00:11:07,760
and you'll find this um this repository

00:11:07,200 --> 00:11:10,880
on

00:11:07,760 --> 00:11:12,880
in the cloud foundry org called cf4k8s

00:11:10,880 --> 00:11:14,000
now this is the place where all of the

00:11:12,880 --> 00:11:16,399
next generation

00:11:14,000 --> 00:11:17,839
cloud foundry components come together

00:11:16,399 --> 00:11:20,320
for integration testing

00:11:17,839 --> 00:11:21,200
and it is itself a release as well

00:11:20,320 --> 00:11:22,959
you'll see

00:11:21,200 --> 00:11:24,800
it's using only the next-gen components

00:11:22,959 --> 00:11:27,839
like irini which i mentioned earlier

00:11:24,800 --> 00:11:29,519
k-pac for staging pacquiao build packs

00:11:27,839 --> 00:11:30,079
which are cloud native build packs that

00:11:29,519 --> 00:11:33,279
are uh

00:11:30,079 --> 00:11:36,640
maintained by the cloud foundry uh

00:11:33,279 --> 00:11:37,279
team and istio and many other things as

00:11:36,640 --> 00:11:40,399
well

00:11:37,279 --> 00:11:42,959
using the latest technologies in uh

00:11:40,399 --> 00:11:44,480
to preserve the cloud foundry experience

00:11:42,959 --> 00:11:44,959
but leveraging all these great things

00:11:44,480 --> 00:11:48,480
from

00:11:44,959 --> 00:11:49,120
cncf and elsewhere it does not use bosch

00:11:48,480 --> 00:11:53,200
releases

00:11:49,120 --> 00:11:53,839
so the the um the things that come

00:11:53,200 --> 00:11:56,959
together

00:11:53,839 --> 00:11:58,079
in cf4k8s do not come from bosch

00:11:56,959 --> 00:12:00,720
releases

00:11:58,079 --> 00:12:01,600
which means uh there are far fewer

00:12:00,720 --> 00:12:05,040
constraints

00:12:01,600 --> 00:12:07,200
and far less inherited complexity so

00:12:05,040 --> 00:12:09,040
using these kubernetes native components

00:12:07,200 --> 00:12:12,800
means you don't have to

00:12:09,040 --> 00:12:13,279
emulate um bosch director you don't have

00:12:12,800 --> 00:12:15,970
to

00:12:13,279 --> 00:12:18,079
to do all this work to um

00:12:15,970 --> 00:12:20,240
[Music]

00:12:18,079 --> 00:12:22,560
run bosch releases on kubernetes you can

00:12:20,240 --> 00:12:24,800
just design it from the start

00:12:22,560 --> 00:12:27,360
to to run on kubernetes and that was the

00:12:24,800 --> 00:12:28,399
forcing function that cf4k8 brought to

00:12:27,360 --> 00:12:31,200
cloud foundry

00:12:28,399 --> 00:12:33,120
it made all of the developers of the

00:12:31,200 --> 00:12:36,560
maintainers of cloud foundry

00:12:33,120 --> 00:12:36,560
think about how they could use

00:12:36,839 --> 00:12:40,560
kubernetes

00:12:38,079 --> 00:12:41,839
brings us to the question if we've got

00:12:40,560 --> 00:12:44,320
cube cf

00:12:41,839 --> 00:12:46,639
which is a way to bring bosch releases

00:12:44,320 --> 00:12:47,040
to kubernetes and we've got cf for k8s

00:12:46,639 --> 00:12:49,440
that's

00:12:47,040 --> 00:12:51,200
that's integrating uh next generation

00:12:49,440 --> 00:12:55,120
components directly from the upstream

00:12:51,200 --> 00:12:56,320
teams to make a new kubernetes release

00:12:55,120 --> 00:12:58,720
what are we going to do these are two

00:12:56,320 --> 00:13:00,000
separate projects well they did start

00:12:58,720 --> 00:13:01,839
out that way

00:13:00,000 --> 00:13:03,519
but there's a level of communication

00:13:01,839 --> 00:13:04,880
that i think you would only ever find in

00:13:03,519 --> 00:13:06,079
the cloud foundry community these

00:13:04,880 --> 00:13:07,519
projects are converging

00:13:06,079 --> 00:13:09,519
and there's a great deal of interaction

00:13:07,519 --> 00:13:11,040
between the teams so

00:13:09,519 --> 00:13:13,040
just to explain the difference in case

00:13:11,040 --> 00:13:16,000
anyone gets confused with this

00:13:13,040 --> 00:13:17,760
cubecf provides everything now so it

00:13:16,000 --> 00:13:19,360
passes the acceptance tests

00:13:17,760 --> 00:13:22,480
there are commercial releases that are

00:13:19,360 --> 00:13:25,680
based on it and

00:13:22,480 --> 00:13:26,079
you can use it right now it is analogous

00:13:25,680 --> 00:13:28,720
to

00:13:26,079 --> 00:13:30,560
it it draws from cf deployment releases

00:13:28,720 --> 00:13:33,200
that that you're familiar with

00:13:30,560 --> 00:13:35,760
cf for k-8s is the proving ground for

00:13:33,200 --> 00:13:38,240
the next generation components

00:13:35,760 --> 00:13:39,440
now over time we hope that these

00:13:38,240 --> 00:13:40,480
projects will con

00:13:39,440 --> 00:13:42,639
converge we're going to make them

00:13:40,480 --> 00:13:45,680
converge

00:13:42,639 --> 00:13:46,160
because in cube cf we have ways to bring

00:13:45,680 --> 00:13:49,040
in

00:13:46,160 --> 00:13:50,480
kubernetes native components directly so

00:13:49,040 --> 00:13:52,880
um

00:13:50,480 --> 00:13:54,160
one by one as these uh upstream

00:13:52,880 --> 00:13:57,440
components become ready

00:13:54,160 --> 00:13:58,480
we can replace the bosch releases within

00:13:57,440 --> 00:14:00,839
cube cf

00:13:58,480 --> 00:14:02,000
with kubernetes native or kubernetes

00:14:00,839 --> 00:14:05,279
idiomatic

00:14:02,000 --> 00:14:06,959
releases so it may be that they never

00:14:05,279 --> 00:14:08,959
converge completely we'll

00:14:06,959 --> 00:14:10,720
likely have different packaging but

00:14:08,959 --> 00:14:11,199
within that packaging we will have the

00:14:10,720 --> 00:14:13,519
same

00:14:11,199 --> 00:14:17,839
cloud foundry in the same cloud foundry

00:14:13,519 --> 00:14:19,519
experience for the end users

00:14:17,839 --> 00:14:21,600
so i've put together some resources and

00:14:19,519 --> 00:14:23,360
links here uh you can get the slides

00:14:21,600 --> 00:14:26,959
later

00:14:23,360 --> 00:14:28,720
the repositories for all of the

00:14:26,959 --> 00:14:30,160
projects that i mentioned or a few of

00:14:28,720 --> 00:14:33,279
the projects i mentioned

00:14:30,160 --> 00:14:35,360
and of course we welcome conversations

00:14:33,279 --> 00:14:39,120
with people who are interested

00:14:35,360 --> 00:14:39,120
on the cloud foundry slack

00:14:39,920 --> 00:14:46,480
and this is all by way of uh introducing

00:14:43,600 --> 00:14:48,079
uh the next generation of susa cloud

00:14:46,480 --> 00:14:50,160
application platform which is being

00:14:48,079 --> 00:14:53,040
launched at cf summit

00:14:50,160 --> 00:14:53,839
again we're designing this in order to

00:14:53,040 --> 00:14:56,800
simplify

00:14:53,839 --> 00:14:57,600
modernize and accelerate cloud foundry

00:14:56,800 --> 00:15:01,600
but also

00:14:57,600 --> 00:15:01,600
to do the same for our customers

00:15:02,480 --> 00:15:15,040
thanks very much

00:15:12,000 --> 00:15:15,360
okay sorry everyone this was me talking

00:15:15,040 --> 00:15:17,519
to

00:15:15,360 --> 00:15:17,519
uh

00:15:19,120 --> 00:15:25,279
to nobody yeah sorry richard uh i uh

00:15:22,399 --> 00:15:27,279
i misunderstood i thought i'd been

00:15:25,279 --> 00:15:30,000
answering andy hunt's

00:15:27,279 --> 00:15:32,880
question for the last two minutes or so

00:15:30,000 --> 00:15:35,519
but in fact i had not been broadcasting

00:15:32,880 --> 00:15:36,959
i confessed getting confused by this

00:15:35,519 --> 00:15:39,199
interface early in the morning

00:15:36,959 --> 00:15:40,800
andy hunt asks is the plan for cubes you

00:15:39,199 --> 00:15:41,920
have to always stay based on bosch

00:15:40,800 --> 00:15:43,839
releases

00:15:41,920 --> 00:15:46,720
and cf deployment or will it eventually

00:15:43,839 --> 00:15:48,240
look more and more like cf4k8s what does

00:15:46,720 --> 00:15:51,600
convergence for the two projects

00:15:48,240 --> 00:15:53,120
look like in the long run i touched on

00:15:51,600 --> 00:15:55,600
this briefly in the talk

00:15:53,120 --> 00:15:57,680
uh we will eventually move off of uh

00:15:55,600 --> 00:15:59,920
bosch releases and be pulling in

00:15:57,680 --> 00:16:02,399
components from cf4k8s

00:15:59,920 --> 00:16:04,639
so it will look more and more like uh

00:16:02,399 --> 00:16:06,160
cf4k8s the cloud foundry experience

00:16:04,639 --> 00:16:08,800
should stay the same because that's what

00:16:06,160 --> 00:16:12,000
we're trying to preserve here

00:16:08,800 --> 00:16:12,880
it might be that we always package it

00:16:12,000 --> 00:16:16,079
differently

00:16:12,880 --> 00:16:18,720
we're fond of qcf being a helm chart and

00:16:16,079 --> 00:16:20,639
we would like to keep it that way

00:16:18,720 --> 00:16:22,000
so we are going to be combining more and

00:16:20,639 --> 00:16:24,480
more of the new

00:16:22,000 --> 00:16:25,519
ingredients into the helm chart that is

00:16:24,480 --> 00:16:29,440
qcf

00:16:25,519 --> 00:16:32,480
over over time we expect the reliance on

00:16:29,440 --> 00:16:34,160
cf operator to to be less but there are

00:16:32,480 --> 00:16:35,759
still some very useful things for life

00:16:34,160 --> 00:16:38,000
cycle management

00:16:35,759 --> 00:16:39,600
in quarks that that actually the cf4k8

00:16:38,000 --> 00:16:41,839
project is using as well

00:16:39,600 --> 00:16:42,800
which we will continue to use i hope

00:16:41,839 --> 00:16:50,480
that answers

00:16:42,800 --> 00:16:52,800
the question

00:16:50,480 --> 00:16:53,680
sorry for the delay finding this uh this

00:16:52,800 --> 00:16:56,800
meeting and then

00:16:53,680 --> 00:16:58,480
getting it actually started uh

00:16:56,800 --> 00:16:59,839
any more questions please pop them in

00:16:58,480 --> 00:17:01,920
the q a tab

00:16:59,839 --> 00:17:03,440
or feel free to ask them in the chat i

00:17:01,920 --> 00:17:06,959
also take banter

00:17:03,440 --> 00:17:06,959
and gentle ribbing

00:17:14,079 --> 00:17:19,760
i'm just glad that that my my head isn't

00:17:16,319 --> 00:17:21,760
cut off like it was for so much of the

00:17:19,760 --> 00:17:24,000
recording which i didn't realize at the

00:17:21,760 --> 00:17:24,000
time

00:17:30,640 --> 00:17:33,840
as a sponsor session i should probably

00:17:32,160 --> 00:17:36,799
plug that where uh we have

00:17:33,840 --> 00:17:37,440
uh suse cloud application platform 2.1

00:17:36,799 --> 00:17:40,960
out

00:17:37,440 --> 00:17:41,679
as of today it's a it's a great release

00:17:40,960 --> 00:17:46,400
based on

00:17:41,679 --> 00:17:49,520
uh cube cf uh 2.5.8.

00:17:46,400 --> 00:17:52,400
with some great supporting services like

00:17:49,520 --> 00:17:54,480
the latest release of the mini broker

00:17:52,400 --> 00:17:55,679
the latest release of stratos which is a

00:17:54,480 --> 00:17:59,280
fantastic thing

00:17:55,679 --> 00:18:01,280
to behold with all of the

00:17:59,280 --> 00:18:02,720
kubernetes functionality from the the

00:18:01,280 --> 00:18:05,919
souza branch

00:18:02,720 --> 00:18:15,840
or the souza fork being contributed

00:18:05,919 --> 00:18:15,840
upstream so everyone can enjoy it

00:18:26,320 --> 00:18:30,080
if there's no other questions uh

00:18:28,240 --> 00:18:32,000
comments from the peanut gallery i was

00:18:30,080 --> 00:18:33,520
seriously expecting jeff hobbs to give

00:18:32,000 --> 00:18:37,600
me more grief uh in this

00:18:33,520 --> 00:18:41,120
session but uh as that's not the case

00:18:37,600 --> 00:18:42,799
sorry sorry to to stagger and late here

00:18:41,120 --> 00:18:44,720
but thanks very much for attending the

00:18:42,799 --> 00:18:46,000
session and we hope you visit us at the

00:18:44,720 --> 00:18:48,400
souza booth

00:18:46,000 --> 00:18:48,400
as well

00:18:50,240 --> 00:18:53,840

YouTube URL: https://www.youtube.com/watch?v=sjKofzFSG7A


