Title: KubeCF - A Platform for Innovation - Vlad Iovanov, SUSE
Publication date: 2020-10-26
Playlist: Cloud Foundry Summit Europe 2020
Description: 
	KubeCF - A Platform for Innovation - Vlad Iovanov, SUSE

KubeCF is an extensible Helm release providing a Kubernetes-ready Cloud Foundry distribution now, and a path forwards to next-generation components and features. We'll talk about how to adapt it to add your own stacks, buildpacks and other components, or implement completely new features using Kubernetes and EiriniX.This session also covers what's new in the latest release, including production-ready Eirini, multi-cluster support, and Container-to-Container networking.
Captions: 
	00:00:00,080 --> 00:00:04,240
hello everyone and thank you for joining

00:00:01,599 --> 00:00:04,720
this session we'll be talking about cube

00:00:04,240 --> 00:00:06,000
cf

00:00:04,720 --> 00:00:09,359
and why we think it's an amazing

00:00:06,000 --> 00:00:09,359
platform for innovation

00:00:09,599 --> 00:00:13,280
first let's discuss what makes cube cf

00:00:12,080 --> 00:00:15,440
special

00:00:13,280 --> 00:00:17,840
at the top of that list we could find

00:00:15,440 --> 00:00:19,359
helm helm is the package manager for

00:00:17,840 --> 00:00:21,840
kubernetes

00:00:19,359 --> 00:00:23,359
and it's been graduated from incubation

00:00:21,840 --> 00:00:25,920
into the cloud native computing

00:00:23,359 --> 00:00:28,400
foundation earlier this year

00:00:25,920 --> 00:00:29,279
helm makes it easy for our users to

00:00:28,400 --> 00:00:31,359
install

00:00:29,279 --> 00:00:33,680
on kubernetes and to manage their

00:00:31,359 --> 00:00:36,640
deployments

00:00:33,680 --> 00:00:38,559
another thing that makes cubecf special

00:00:36,640 --> 00:00:41,680
is the fact that you can deploy

00:00:38,559 --> 00:00:43,440
either with irini or diego diego is the

00:00:41,680 --> 00:00:45,840
old container scheduler

00:00:43,440 --> 00:00:46,640
that came built into cloud foundry and

00:00:45,840 --> 00:00:48,399
irene

00:00:46,640 --> 00:00:50,800
is the new component that bridges the

00:00:48,399 --> 00:00:53,039
gap between cloud foundry and kubernetes

00:00:50,800 --> 00:00:53,840
and allows you to deploy applications

00:00:53,039 --> 00:00:57,680
directly

00:00:53,840 --> 00:00:59,280
on kubernetes as you can imagine

00:00:57,680 --> 00:01:01,280
giving you the opportunity to deploy

00:00:59,280 --> 00:01:04,000
with either irene or diego

00:01:01,280 --> 00:01:05,600
adds quite a bit of complexity to cubecf

00:01:04,000 --> 00:01:07,439
but one of our top goals

00:01:05,600 --> 00:01:09,760
is to make sure that configuration is

00:01:07,439 --> 00:01:12,400
super simple for the user

00:01:09,760 --> 00:01:13,040
as you'll see choosing between irene and

00:01:12,400 --> 00:01:14,640
diego

00:01:13,040 --> 00:01:17,759
is just a matter of setting one

00:01:14,640 --> 00:01:20,159
configuration value

00:01:17,759 --> 00:01:21,759
in fact this is one of the main reasons

00:01:20,159 --> 00:01:24,799
that we've chosen helm

00:01:21,759 --> 00:01:26,000
as our deployment mechanism helm is easy

00:01:24,799 --> 00:01:28,400
to work with

00:01:26,000 --> 00:01:30,720
and all of your configuration goes into

00:01:28,400 --> 00:01:33,680
one file the values yaml file

00:01:30,720 --> 00:01:33,680
which everyone knows

00:01:34,400 --> 00:01:38,240
so even though our system is so

00:01:36,960 --> 00:01:40,159
configurable

00:01:38,240 --> 00:01:41,360
we still want to make it easy for users

00:01:40,159 --> 00:01:42,799
to get started

00:01:41,360 --> 00:01:44,479
that means that you want to have

00:01:42,799 --> 00:01:46,960
sensible defaults

00:01:44,479 --> 00:01:47,600
and when you want to install it should

00:01:46,960 --> 00:01:50,560
be

00:01:47,600 --> 00:01:52,320
easy and you shouldn't have a lot of

00:01:50,560 --> 00:01:54,799
configuration values to set

00:01:52,320 --> 00:01:55,360
that's why we only require one you have

00:01:54,799 --> 00:01:57,600
to

00:01:55,360 --> 00:01:59,119
tell helm what is your system domain

00:01:57,600 --> 00:02:03,040
going to be so where will

00:01:59,119 --> 00:02:03,040
you find your cluster after you install

00:02:03,600 --> 00:02:08,560
then you have to be able to choose

00:02:06,719 --> 00:02:10,399
what you want to install what is the

00:02:08,560 --> 00:02:12,560
feature set that you need

00:02:10,399 --> 00:02:13,599
do you want irini do you want diego do

00:02:12,560 --> 00:02:15,599
you want to deploy

00:02:13,599 --> 00:02:17,520
across multiple clusters do you want the

00:02:15,599 --> 00:02:19,800
auto scaler or not

00:02:17,520 --> 00:02:21,680
everything is configurable in this

00:02:19,800 --> 00:02:24,640
values.yaml file

00:02:21,680 --> 00:02:25,040
it's all documented and commented so

00:02:24,640 --> 00:02:28,959
it's

00:02:25,040 --> 00:02:28,959
easy to read and easy to grasp

00:02:29,200 --> 00:02:33,280
furthermore it can help you size your

00:02:31,599 --> 00:02:35,680
cluster as well

00:02:33,280 --> 00:02:38,000
again in the same values values.yaml

00:02:35,680 --> 00:02:39,519
file you can add information about

00:02:38,000 --> 00:02:41,280
how much resources you want to give to

00:02:39,519 --> 00:02:44,400
your components

00:02:41,280 --> 00:02:47,040
how you want to deploy them set affinity

00:02:44,400 --> 00:02:47,040
and so on

00:02:49,040 --> 00:02:55,680
furthermore we have complex topologies

00:02:52,319 --> 00:02:58,319
that you can choose from you can either

00:02:55,680 --> 00:03:00,640
deploy across multiple clusters set up

00:02:58,319 --> 00:03:04,000
your control plane for diego

00:03:00,640 --> 00:03:06,239
on one kubernetes cluster and worker

00:03:04,000 --> 00:03:07,440
clusters on other kubernetes

00:03:06,239 --> 00:03:09,840
installations

00:03:07,440 --> 00:03:10,480
you can choose to how to have an ingress

00:03:09,840 --> 00:03:12,560
or not

00:03:10,480 --> 00:03:13,519
you can set up services with load

00:03:12,560 --> 00:03:17,440
balancing

00:03:13,519 --> 00:03:18,000
or not so we have a lot of capabilities

00:03:17,440 --> 00:03:20,159
when it comes

00:03:18,000 --> 00:03:21,519
to topology again everything is

00:03:20,159 --> 00:03:24,879
documented well

00:03:21,519 --> 00:03:26,480
you can you can check out the values

00:03:24,879 --> 00:03:29,680
yaml file to find out

00:03:26,480 --> 00:03:29,680
what values you can set

00:03:31,440 --> 00:03:37,840
of course this is not enough just

00:03:34,720 --> 00:03:38,480
modifying your topology or your instance

00:03:37,840 --> 00:03:40,159
counts

00:03:38,480 --> 00:03:42,080
is is not enough you might want to

00:03:40,159 --> 00:03:43,040
change the behavior of cloud foundry

00:03:42,080 --> 00:03:45,680
itself

00:03:43,040 --> 00:03:47,440
for that again we have fine grained

00:03:45,680 --> 00:03:49,840
mechanisms that allow you to

00:03:47,440 --> 00:03:51,680
change any bosch property inside of

00:03:49,840 --> 00:03:53,920
cloud foundry

00:03:51,680 --> 00:03:55,599
it allows you to also set any credential

00:03:53,920 --> 00:03:57,599
that you want in the system so

00:03:55,599 --> 00:03:58,879
you can either have all of the

00:03:57,599 --> 00:04:01,920
certificates and

00:03:58,879 --> 00:04:05,599
passwords auto generated or

00:04:01,920 --> 00:04:05,599
you can set them up yourself

00:04:05,920 --> 00:04:09,760
and if you're deploying components that

00:04:08,560 --> 00:04:13,040
are not bosch based

00:04:09,760 --> 00:04:15,599
of course helm is great at providing you

00:04:13,040 --> 00:04:19,519
with an interface where you can

00:04:15,599 --> 00:04:22,479
easily configure your components

00:04:19,519 --> 00:04:22,800
and finally sourcing you can modify

00:04:22,479 --> 00:04:25,600
where

00:04:22,800 --> 00:04:27,520
the component images get downloaded from

00:04:25,600 --> 00:04:29,840
what tags you use and all of that

00:04:27,520 --> 00:04:32,720
this makes it easy to deploy in

00:04:29,840 --> 00:04:35,120
air-gapped environments for example

00:04:32,720 --> 00:04:36,320
but as we've seen it's all very

00:04:35,120 --> 00:04:39,520
configurable

00:04:36,320 --> 00:04:41,680
and it's also very easy to use i think

00:04:39,520 --> 00:04:46,479
that's a hard combination to achieve

00:04:41,680 --> 00:04:46,479
but cubecf is is getting there

00:04:46,800 --> 00:04:53,120
so now now that we know how

00:04:50,000 --> 00:04:56,320
cubecf works and how you

00:04:53,120 --> 00:04:58,479
install it let's talk a bit about where

00:04:56,320 --> 00:04:59,759
your ideas could could come in why is it

00:04:58,479 --> 00:05:02,320
a great platform for

00:04:59,759 --> 00:05:03,199
innovation whenever you see this

00:05:02,320 --> 00:05:05,680
question mark

00:05:03,199 --> 00:05:07,600
on on the slides imagine that your

00:05:05,680 --> 00:05:08,400
component your extensions could live

00:05:07,600 --> 00:05:11,360
there

00:05:08,400 --> 00:05:12,720
and we provide mechanisms for you to add

00:05:11,360 --> 00:05:16,560
your components to

00:05:12,720 --> 00:05:19,280
to qcf first let's talk about diego

00:05:16,560 --> 00:05:20,479
as you can probably tell diego is most

00:05:19,280 --> 00:05:22,880
mostly bosch based

00:05:20,479 --> 00:05:24,080
at the moment that means we have bosch

00:05:22,880 --> 00:05:25,919
releases that we convert

00:05:24,080 --> 00:05:27,919
into docker images they still get

00:05:25,919 --> 00:05:30,000
deployed on kubernetes

00:05:27,919 --> 00:05:31,440
but they need extra tooling to run

00:05:30,000 --> 00:05:33,520
properly

00:05:31,440 --> 00:05:35,039
but even if you deploy with jager you

00:05:33,520 --> 00:05:37,039
still have some components that are

00:05:35,039 --> 00:05:39,440
kubernetes based

00:05:37,039 --> 00:05:41,039
the components that we've built in in

00:05:39,440 --> 00:05:43,520
the quarkx operator

00:05:41,039 --> 00:05:44,639
allow bosch releases to talk to cube

00:05:43,520 --> 00:05:46,639
native components

00:05:44,639 --> 00:05:48,240
easily they can share configuration they

00:05:46,639 --> 00:05:51,120
can share links

00:05:48,240 --> 00:05:52,000
um it's pretty easy to set up so whether

00:05:51,120 --> 00:05:54,240
you want to

00:05:52,000 --> 00:05:55,120
extend cube cf and add another bosch

00:05:54,240 --> 00:05:58,479
release to it

00:05:55,120 --> 00:06:00,960
or add kubernetes components

00:05:58,479 --> 00:06:04,080
that are helpful to you both are easy to

00:06:00,960 --> 00:06:04,080
do in cubecf

00:06:04,560 --> 00:06:07,840
another thing that you can do to extend

00:06:06,639 --> 00:06:11,600
cube cf

00:06:07,840 --> 00:06:14,160
uh are to add stacks or build packs or

00:06:11,600 --> 00:06:16,160
change the ones that we currently have

00:06:14,160 --> 00:06:18,479
we have mechanisms that allow the user

00:06:16,160 --> 00:06:20,960
to easily select which stacks are

00:06:18,479 --> 00:06:24,800
installed when qcf deploys

00:06:20,960 --> 00:06:24,800
and the same thing for build packs

00:06:26,319 --> 00:06:30,960
in the irini world kubernetes will be

00:06:29,199 --> 00:06:32,720
mostly native

00:06:30,960 --> 00:06:34,160
we are trying to dial down the amount of

00:06:32,720 --> 00:06:36,319
bosch releases that we

00:06:34,160 --> 00:06:39,280
that we use when you deploy with with

00:06:36,319 --> 00:06:41,360
the irene feature enabled

00:06:39,280 --> 00:06:42,400
as you can imagine helm is really good

00:06:41,360 --> 00:06:45,680
at deploying

00:06:42,400 --> 00:06:47,919
kubernetes native components and adding

00:06:45,680 --> 00:06:50,479
more features to that more components is

00:06:47,919 --> 00:06:50,479
really easy

00:06:51,280 --> 00:06:55,199
one thing that i really want to talk

00:06:52,720 --> 00:06:57,680
about though is irene x

00:06:55,199 --> 00:06:59,199
the extensions part in the middle of the

00:06:57,680 --> 00:07:01,120
slide here

00:06:59,199 --> 00:07:02,720
through irene x you have a mechanism

00:07:01,120 --> 00:07:04,000
that allows you to extend cloud

00:07:02,720 --> 00:07:06,639
foundry's capabilities

00:07:04,000 --> 00:07:09,039
on kubernetes we've built a bunch of

00:07:06,639 --> 00:07:09,680
these extensions that allow irene apps

00:07:09,039 --> 00:07:13,039
to have

00:07:09,680 --> 00:07:15,360
ssh support to have persistent support

00:07:13,039 --> 00:07:16,319
and and other great things and you can

00:07:15,360 --> 00:07:18,720
build your own

00:07:16,319 --> 00:07:20,960
it's a really simple mechanism and it

00:07:18,720 --> 00:07:24,240
allows you to feed in your ideas

00:07:20,960 --> 00:07:27,919
directly into cloud foundry

00:07:24,240 --> 00:07:31,199
so in the diego world uh the scheduler

00:07:27,919 --> 00:07:33,440
diego itself was a pretty closed box

00:07:31,199 --> 00:07:35,759
you couldn't really interfere with the

00:07:33,440 --> 00:07:38,479
process of deploying an app

00:07:35,759 --> 00:07:39,520
with irini and irene x you gain full

00:07:38,479 --> 00:07:43,120
control

00:07:39,520 --> 00:07:45,039
you have access to the entire

00:07:43,120 --> 00:07:47,520
cycle of the app at the lowest level

00:07:45,039 --> 00:07:47,520
possible

00:07:48,319 --> 00:07:52,240
of course on the right hand side the

00:07:50,479 --> 00:07:54,160
apps

00:07:52,240 --> 00:07:56,400
all the capabilities that we have in the

00:07:54,160 --> 00:07:57,360
diego world like stacks and build packs

00:07:56,400 --> 00:08:00,240
are still here

00:07:57,360 --> 00:08:00,560
you can still add stacks and build backs

00:08:00,240 --> 00:08:03,199
to

00:08:00,560 --> 00:08:03,199
cubecf

00:08:03,759 --> 00:08:06,879
finally i'd like to talk a bit about

00:08:05,360 --> 00:08:09,120
quarks

00:08:06,879 --> 00:08:10,879
quarkx is responsible with getting us

00:08:09,120 --> 00:08:13,919
some higher level kubernetes

00:08:10,879 --> 00:08:17,120
functionality that allows us to deploy

00:08:13,919 --> 00:08:19,280
a complicated system like cloud foundry

00:08:17,120 --> 00:08:21,680
it can help us with generating secrets

00:08:19,280 --> 00:08:24,080
copying them across namespaces

00:08:21,680 --> 00:08:26,720
it can template configurations for us it

00:08:24,080 --> 00:08:29,360
can do secret rotation

00:08:26,720 --> 00:08:31,039
it also helps with workload lifecycle we

00:08:29,360 --> 00:08:34,320
know that upgrades are hard

00:08:31,039 --> 00:08:37,039
even on top of kubernetes so uh

00:08:34,320 --> 00:08:38,800
it it adds auto reload on configuration

00:08:37,039 --> 00:08:41,440
change

00:08:38,800 --> 00:08:42,959
it it has the capability to run errands

00:08:41,440 --> 00:08:46,080
it can do cannery support

00:08:42,959 --> 00:08:49,200
for uh for stateful sets and

00:08:46,080 --> 00:08:51,760
much more of course

00:08:49,200 --> 00:08:52,399
this is a much lower level component but

00:08:51,760 --> 00:08:55,200
if you feel

00:08:52,399 --> 00:08:56,959
like there are features missing from

00:08:55,200 --> 00:08:59,279
kubernetes

00:08:56,959 --> 00:09:00,480
then this is the place to start we have

00:08:59,279 --> 00:09:03,200
a project that's

00:09:00,480 --> 00:09:04,240
easily extensible so you can add

00:09:03,200 --> 00:09:09,120
features to

00:09:04,240 --> 00:09:12,560
these components if if you need them

00:09:09,120 --> 00:09:15,440
finally please find us um on slack

00:09:12,560 --> 00:09:16,399
on the cube cf dev or quarkxdev channel

00:09:15,440 --> 00:09:18,240
of course you can

00:09:16,399 --> 00:09:21,120
download the source code or the latest

00:09:18,240 --> 00:09:23,440
release and start building your platform

00:09:21,120 --> 00:09:24,320
i've added here some information about

00:09:23,440 --> 00:09:26,640
other talks

00:09:24,320 --> 00:09:28,880
and hands-on labs some of these have

00:09:26,640 --> 00:09:31,440
probably happened yet already

00:09:28,880 --> 00:09:32,399
but i encourage you to watch their

00:09:31,440 --> 00:09:36,000
recordings when

00:09:32,399 --> 00:09:37,279
when they come out thank you and with

00:09:36,000 --> 00:09:42,000
that i'm going to

00:09:37,279 --> 00:09:46,880
open it to qa hi everyone

00:09:42,000 --> 00:09:50,240
um this is the q a session for the

00:09:46,880 --> 00:09:54,480
uh for the talk that just ended

00:09:50,240 --> 00:09:54,480
for qcf platform for innovation

00:09:55,040 --> 00:09:58,720
um is there any questions

00:09:59,200 --> 00:10:08,160
please let me know hey sorna

00:10:05,600 --> 00:10:08,160
and mario

00:10:11,440 --> 00:10:13,680
okay

00:10:15,839 --> 00:10:20,079
i wasn't sure if i had to follow another

00:10:17,680 --> 00:10:33,839
link to to get to this session but

00:10:20,079 --> 00:10:33,839
uh looks like it

00:10:50,079 --> 00:10:55,600
not seeing any questions yet

00:10:53,600 --> 00:10:57,120
i also don't know if anyone else can

00:10:55,600 --> 00:11:01,839
join the the call

00:10:57,120 --> 00:11:01,839
if you want to talk about something

00:11:18,800 --> 00:11:24,720
yeah it is strange so you can't join the

00:11:21,440 --> 00:11:24,720
broadcast it seems right

00:11:26,880 --> 00:11:29,839
that's funny

00:11:40,839 --> 00:11:45,360
interesting

00:11:43,040 --> 00:11:46,880
yeah please um if you want me to talk

00:11:45,360 --> 00:11:50,079
about uh

00:11:46,880 --> 00:11:54,079
anything just write it down in chat or

00:11:50,079 --> 00:11:58,160
ask a question otherwise it's just gonna

00:11:54,079 --> 00:11:58,160
be me looking at my screen for a while

00:12:12,639 --> 00:12:19,200
okay we have a question uh what has been

00:12:16,320 --> 00:12:23,440
implemented so far with irony x

00:12:19,200 --> 00:12:27,440
so we have a few extensions one for

00:12:23,440 --> 00:12:30,800
ssh support so the cf-ssh command

00:12:27,440 --> 00:12:33,040
is not usually available with irene

00:12:30,800 --> 00:12:34,320
we implemented that using an ironyx

00:12:33,040 --> 00:12:37,440
extension

00:12:34,320 --> 00:12:41,120
that mutates the pod

00:12:37,440 --> 00:12:42,959
and runs the sshd daemon

00:12:41,120 --> 00:12:45,839
and allows you to connect to your app

00:12:42,959 --> 00:12:50,000
using cfssh

00:12:45,839 --> 00:12:54,320
then we also have percy support

00:12:50,000 --> 00:12:56,959
so we use kubernetes storage classes to

00:12:54,320 --> 00:12:58,480
uh connect persistent storage to your

00:12:56,959 --> 00:13:01,200
application

00:12:58,480 --> 00:13:04,560
it's sort of a one-size-fits-all so you

00:13:01,200 --> 00:13:04,560
have a percy broker that

00:13:05,440 --> 00:13:10,480
that serves any storage class you have

00:13:07,920 --> 00:13:14,959
connected to kubernetes

00:13:10,480 --> 00:13:18,720
we also have um

00:13:14,959 --> 00:13:21,120
logging if you look at cfo arcades

00:13:18,720 --> 00:13:23,760
it has a logging solution that involves

00:13:21,120 --> 00:13:23,760
fluency

00:13:23,920 --> 00:13:30,720
that particular approach hasn't worked

00:13:26,959 --> 00:13:33,120
for us in all cases so we decided to

00:13:30,720 --> 00:13:34,959
to implement another solution that

00:13:33,120 --> 00:13:37,519
simply uses

00:13:34,959 --> 00:13:38,399
kubernetes logging streams that over to

00:13:37,519 --> 00:13:41,920
the old

00:13:38,399 --> 00:13:44,560
logger gator and that's also an iranian

00:13:41,920 --> 00:13:44,560
x component

00:13:45,680 --> 00:13:52,639
dimitris is also asking

00:13:49,760 --> 00:13:53,680
uh can i have routing with irene x no go

00:13:52,639 --> 00:13:56,959
router

00:13:53,680 --> 00:14:00,160
so i thought i think he's here um

00:13:56,959 --> 00:14:04,000
he had a sort of a hack

00:14:00,160 --> 00:14:07,120
project spike where he tried to

00:14:04,000 --> 00:14:08,399
create ingresses using an irony x

00:14:07,120 --> 00:14:10,720
extension

00:14:08,399 --> 00:14:11,519
and i think that worked so i think the

00:14:10,720 --> 00:14:13,920
question is

00:14:11,519 --> 00:14:15,680
is yes you could have routing with with

00:14:13,920 --> 00:14:17,279
irene x

00:14:15,680 --> 00:14:20,160
should be very interesting and

00:14:17,279 --> 00:14:20,160
lightweight as well

00:14:21,360 --> 00:14:24,800
another question i tried deploying cube

00:14:23,600 --> 00:14:27,199
cf the errors which

00:14:24,800 --> 00:14:28,000
i got are related to privileged

00:14:27,199 --> 00:14:29,839
containers

00:14:28,000 --> 00:14:32,160
is having privileged containers enabled

00:14:29,839 --> 00:14:35,440
for cluster mandatory

00:14:32,160 --> 00:14:38,480
um not if you use irene

00:14:35,440 --> 00:14:42,399
so by default when you install cube cf

00:14:38,480 --> 00:14:46,000
we install diego and diego

00:14:42,399 --> 00:14:48,880
requires privileged containers because

00:14:46,000 --> 00:14:50,639
uh you know you have to run garden if

00:14:48,880 --> 00:14:52,320
you use irini there should be no

00:14:50,639 --> 00:14:55,440
privileged containers

00:14:52,320 --> 00:14:58,720
so you can either

00:14:55,440 --> 00:15:00,079
ask in the qcf channel on slack or you

00:14:58,720 --> 00:15:03,600
could look at docs

00:15:00,079 --> 00:15:07,279
now you can find docs at

00:15:03,600 --> 00:15:10,880
cubecf one second

00:15:07,279 --> 00:15:12,880
qcf dot io should be i just want to

00:15:10,880 --> 00:15:14,560
check that i'm not

00:15:12,880 --> 00:15:16,160
listening they act it's just cube cf

00:15:14,560 --> 00:15:18,480
that i own

00:15:16,160 --> 00:15:18,480
um

00:15:20,560 --> 00:15:23,839
you can find docs there on how to enable

00:15:22,720 --> 00:15:27,839
irene instead of

00:15:23,839 --> 00:15:27,839
instead of diego

00:15:28,079 --> 00:15:31,120
pierre asks is there any tooling to

00:15:30,480 --> 00:15:33,279
convert

00:15:31,120 --> 00:15:36,800
existing cf deployment plus bosch ops

00:15:33,279 --> 00:15:40,000
file to helm charts values.yaml

00:15:36,800 --> 00:15:42,560
so yes i'm not sure you would call

00:15:40,000 --> 00:15:44,480
it tooling but we have an operator the

00:15:42,560 --> 00:15:46,880
corks operator

00:15:44,480 --> 00:15:49,199
and what you do is you create a bosch

00:15:46,880 --> 00:15:53,199
deployment crd

00:15:49,199 --> 00:15:56,399
you give it a bosch deployment manifest

00:15:53,199 --> 00:15:59,120
ops files and it'll

00:15:56,399 --> 00:15:59,920
try to run that for you on kubernetes of

00:15:59,120 --> 00:16:03,040
course

00:15:59,920 --> 00:16:04,160
before you do this there's a tool called

00:16:03,040 --> 00:16:06,000
fissile

00:16:04,160 --> 00:16:08,480
which will turn your bosch releases into

00:16:06,000 --> 00:16:09,519
docker images so it's kind of a two-step

00:16:08,480 --> 00:16:12,360
process

00:16:09,519 --> 00:16:14,320
you use fissile to um to

00:16:12,360 --> 00:16:16,320
[Music]

00:16:14,320 --> 00:16:17,839
to to generate the docker images and

00:16:16,320 --> 00:16:20,000
then you use your bosch deployment

00:16:17,839 --> 00:16:23,680
manifest plus ops files

00:16:20,000 --> 00:16:26,639
give them to the corks operator and

00:16:23,680 --> 00:16:28,160
it'll try to deploy the bosch bosch

00:16:26,639 --> 00:16:30,800
deployment for you

00:16:28,160 --> 00:16:34,560
you can learn more about quarks in the

00:16:30,800 --> 00:16:34,560
following link i'm going to paste it in

00:16:34,839 --> 00:16:37,839
chat

00:16:45,440 --> 00:16:51,839
hopefully that that answers it

00:17:02,399 --> 00:17:06,319
and of course there's also the quarks

00:17:04,400 --> 00:17:09,439
dev channel on slack so

00:17:06,319 --> 00:17:13,039
if you want to try out quarks with

00:17:09,439 --> 00:17:15,199
a bosch deployment that's not cube cf

00:17:13,039 --> 00:17:16,839
just find us there and and we'll help

00:17:15,199 --> 00:17:20,400
you out

00:17:16,839 --> 00:17:23,839
um we have two

00:17:20,400 --> 00:17:27,280
i think two or three um uh

00:17:23,839 --> 00:17:28,799
kind of stem cell images for uh

00:17:27,280 --> 00:17:30,480
for building the bosch releases into

00:17:28,799 --> 00:17:35,120
darker images uh

00:17:30,480 --> 00:17:37,840
sousa based ubuntu based and i think um

00:17:35,120 --> 00:17:39,360
there's another one that's red hat based

00:17:37,840 --> 00:17:43,200
so you can start over there

00:17:39,360 --> 00:17:46,320
and start building out your images and

00:17:43,200 --> 00:17:49,760
yeah afterwards just try to deploy that

00:17:46,320 --> 00:17:49,760
thing on kubernetes

00:17:58,880 --> 00:18:03,520
dimitris asks what is the project's

00:18:01,840 --> 00:18:05,039
highest priority for the next major

00:18:03,520 --> 00:18:08,400
release

00:18:05,039 --> 00:18:11,360
so we want to go further with

00:18:08,400 --> 00:18:12,160
more native components on the irene side

00:18:11,360 --> 00:18:15,120
so

00:18:12,160 --> 00:18:17,440
on the bosch side we kind of have things

00:18:15,120 --> 00:18:20,880
let's say figured out

00:18:17,440 --> 00:18:22,799
we're just going to maintain maintain

00:18:20,880 --> 00:18:25,440
those components as they are

00:18:22,799 --> 00:18:27,840
but on the irini side we want to add

00:18:25,440 --> 00:18:31,679
more native components we want to

00:18:27,840 --> 00:18:35,200
use capec and paquetto instead of

00:18:31,679 --> 00:18:35,760
the old staging we also want to replace

00:18:35,200 --> 00:18:37,360
the

00:18:35,760 --> 00:18:39,360
the cloud controller bosch release the

00:18:37,360 --> 00:18:43,679
cappy bosch release with

00:18:39,360 --> 00:18:47,200
its native docker image and same for uaa

00:18:43,679 --> 00:18:49,600
so just more darker images instead of

00:18:47,200 --> 00:18:52,799
bosch releases for the irony

00:18:49,600 --> 00:18:52,799
irony side of things

00:18:53,039 --> 00:18:56,160
another high priority item that we have

00:18:55,200 --> 00:18:57,840
is to

00:18:56,160 --> 00:19:01,200
[Music]

00:18:57,840 --> 00:19:02,080
use more github actions our cube cf

00:19:01,200 --> 00:19:05,280
release process

00:19:02,080 --> 00:19:05,280
has been long because

00:19:05,600 --> 00:19:11,360
our our ci is slowing us down a bit

00:19:08,880 --> 00:19:13,760
we have to maintain uh the concourse

00:19:11,360 --> 00:19:15,760
pipelines and it's uh

00:19:13,760 --> 00:19:17,840
it's not something that has worked out

00:19:15,760 --> 00:19:20,559
very well so far

00:19:17,840 --> 00:19:22,480
but our experience seems to be better

00:19:20,559 --> 00:19:24,559
with uh with github actions so we're

00:19:22,480 --> 00:19:27,679
looking at

00:19:24,559 --> 00:19:30,320
investing more time there if you're

00:19:27,679 --> 00:19:34,960
curious about

00:19:30,320 --> 00:19:38,480
our work and how we structure our work

00:19:34,960 --> 00:19:41,440
on the cube cf github project

00:19:38,480 --> 00:19:42,480
you can go to the projects tab and find

00:19:41,440 --> 00:19:45,120
all of our

00:19:42,480 --> 00:19:46,720
boards there you can see what stories we

00:19:45,120 --> 00:19:48,880
have planned

00:19:46,720 --> 00:19:51,679
which are in progress and so on and of

00:19:48,880 --> 00:19:53,760
course if you have any questions

00:19:51,679 --> 00:19:57,679
please let us know in the channel and

00:19:53,760 --> 00:19:57,679
you can even join planning if you want

00:19:58,080 --> 00:20:07,840
our our ceremonies are open for everyone

00:20:01,039 --> 00:20:07,840
to join

00:20:09,840 --> 00:20:13,679
thanks mario for the for the link there

00:20:19,600 --> 00:20:25,360
okay i think uh this is it for our time

00:20:23,039 --> 00:20:27,360
uh we are one minute passed we had 10

00:20:25,360 --> 00:20:30,799
minutes for q a

00:20:27,360 --> 00:20:33,760
um yeah please find us either on the

00:20:30,799 --> 00:20:35,200
quarks or qcf dev channels

00:20:33,760 --> 00:20:38,159
we'll see you there and thank you for

00:20:35,200 --> 00:20:38,159
joining these sessions

00:20:39,200 --> 00:20:44,480

YouTube URL: https://www.youtube.com/watch?v=yL_a1CKIbGA


