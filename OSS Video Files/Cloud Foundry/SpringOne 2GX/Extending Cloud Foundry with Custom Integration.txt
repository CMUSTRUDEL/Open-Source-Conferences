Title: Extending Cloud Foundry with Custom Integration
Publication date: 2014-05-06
Playlist: SpringOne 2GX
Description: 
	Recorded at SpringOne2GX 2013 in Santa Clara, CA.
Speakers: Cornelia Davis, Scott Frederick
As you find it in the open-source codebase, Cloud Foundry includes a set of prepackaged services (Postgres, MySQL, Redis, MongoDB and RabbitMQ) and a number of application runtimes (Java, Ruby and Node.js). In addition, CloudFoundry.com integrates with a number of external service providers through a services gateway. When you are deploying your own Cloud Foundry you can extend the existing open-source features by adding additional services and runtime support. In fact, you can bring your own runtime to any Cloud Foundry (including CloudFoundry.com) via buildpacks. In this session we will show you how to build and deploy, or broker custom services. We will also introduce you to buildpacks, show you how to create your own, and how to get your apps to use them.

Learn more about using CloudFoundry at:
http://www.cloudfoundry.com/use
Captions: 
	00:00:14,190 --> 00:00:23,099
okay so hello everyone for those of you

00:00:19,860 --> 00:00:25,919
who maybe weren't at the platform event

00:00:23,099 --> 00:00:29,580
over the weekend I will introduce myself

00:00:25,919 --> 00:00:31,260
my name is Cornelia Davis I am a

00:00:29,580 --> 00:00:34,019
community engineer within the cloud

00:00:31,260 --> 00:00:37,019
foundry group that's a relatively new

00:00:34,019 --> 00:00:38,550
gig for me I came to pivotal through EMC

00:00:37,019 --> 00:00:41,850
where I worked at the corporate at the

00:00:38,550 --> 00:00:43,739
corporate CTO office level been working

00:00:41,850 --> 00:00:45,629
with Cloud Foundry kind of part-time on

00:00:43,739 --> 00:00:47,579
the side for about a year and fall in

00:00:45,629 --> 00:00:49,890
love with it so much that recently made

00:00:47,579 --> 00:00:52,440
the big jump over to work in the cloud

00:00:49,890 --> 00:00:55,410
foundry group itself I really want to be

00:00:52,440 --> 00:00:59,969
part of making this product insanely

00:00:55,410 --> 00:01:00,930
successful and you want to introduce

00:00:59,969 --> 00:01:03,210
yourself real quick

00:01:00,930 --> 00:01:05,100
rather than disrupting in the middle yep

00:01:03,210 --> 00:01:06,899
that's fine I'm Scott Frederick and I'm

00:01:05,100 --> 00:01:09,180
also a community engineer on the cloud

00:01:06,899 --> 00:01:12,300
foundry team I've been doing this for

00:01:09,180 --> 00:01:14,070
about nine months now so like Cornelia I

00:01:12,300 --> 00:01:16,800
have one foot in the engineering team

00:01:14,070 --> 00:01:18,420
one foot out with customers also deal a

00:01:16,800 --> 00:01:22,410
lot with partner integration into cloud

00:01:18,420 --> 00:01:24,149
foundry okay awesome and so what we're

00:01:22,410 --> 00:01:25,890
going to talk about today is you can see

00:01:24,149 --> 00:01:28,410
the titles around extending cloud

00:01:25,890 --> 00:01:30,090
foundry so we're going to talk about a

00:01:28,410 --> 00:01:33,119
couple of different areas I'm gonna go

00:01:30,090 --> 00:01:35,520
to this slide as the first slide some of

00:01:33,119 --> 00:01:37,200
you may have seen this slide but when we

00:01:35,520 --> 00:01:39,119
talk about cloud foundry there's really

00:01:37,200 --> 00:01:41,099
kind of two camps that we need to talk

00:01:39,119 --> 00:01:42,599
about two different groups of

00:01:41,099 --> 00:01:44,640
individuals that are doing things with

00:01:42,599 --> 00:01:47,280
cloud foundry and I'll try to get a feel

00:01:44,640 --> 00:01:48,989
from you in just a moment on what can't

00:01:47,280 --> 00:01:51,690
be full into but let me explain what the

00:01:48,989 --> 00:01:53,310
camps are first when it comes to cloud

00:01:51,690 --> 00:01:54,810
foundry there's there are the

00:01:53,310 --> 00:01:56,819
individuals that are going to operate

00:01:54,810 --> 00:01:59,220
the cloud those are the individuals that

00:01:56,819 --> 00:02:01,289
are going to install cloud foundry that

00:01:59,220 --> 00:02:02,670
are going to keep it up and running that

00:02:01,289 --> 00:02:05,670
are gonna make sure that there's enough

00:02:02,670 --> 00:02:08,069
capacity in the cloud for people to push

00:02:05,670 --> 00:02:10,649
apps into the cloud and then there's

00:02:08,069 --> 00:02:12,420
another set of users who are the people

00:02:10,649 --> 00:02:15,360
who are going to be building apps and

00:02:12,420 --> 00:02:17,220
pushing those apps into the cloud so

00:02:15,360 --> 00:02:18,780
there's really those two camps and we

00:02:17,220 --> 00:02:20,910
refer to them on this slide as the

00:02:18,780 --> 00:02:23,610
operator of the cloud and the developer

00:02:20,910 --> 00:02:25,500
who's going to be using the cloud so by

00:02:23,610 --> 00:02:27,540
a show of hands how many people would

00:02:25,500 --> 00:02:29,870
consider themselves over in the operator

00:02:27,540 --> 00:02:29,870
can

00:02:29,990 --> 00:02:37,230
okay and how about the developer okay

00:02:34,190 --> 00:02:38,970
interesting so and I think that I saw

00:02:37,230 --> 00:02:41,640
that a lot of people raise their hand

00:02:38,970 --> 00:02:43,020
for both and the reality is that cloud

00:02:41,640 --> 00:02:45,870
foundry is still a relatively new

00:02:43,020 --> 00:02:48,630
product and we probably all fall into

00:02:45,870 --> 00:02:50,790
that category of being in both camps we

00:02:48,630 --> 00:02:52,230
have to stand it up we almost also know

00:02:50,790 --> 00:02:56,280
that we're going to be pushing apps to

00:02:52,230 --> 00:02:58,320
it ultimately those roles will diverge

00:02:56,280 --> 00:03:00,030
and I'm working with customers for

00:02:58,320 --> 00:03:02,720
example GE if you were there yesterday

00:03:00,030 --> 00:03:06,060
for the panel you saw that GE is

00:03:02,720 --> 00:03:08,370
deploying cloud foundry internally as an

00:03:06,060 --> 00:03:10,590
internal path their customers are all

00:03:08,370 --> 00:03:13,740
the different units within GE GE power

00:03:10,590 --> 00:03:15,990
GE GE avionics all of those types of

00:03:13,740 --> 00:03:17,850
guys so ultimately they are going to

00:03:15,990 --> 00:03:22,110
have developers that are just using the

00:03:17,850 --> 00:03:24,510
platform for development but in the

00:03:22,110 --> 00:03:25,980
meantime right now as we're standing up

00:03:24,510 --> 00:03:27,480
that cloud and figuring out how those

00:03:25,980 --> 00:03:29,220
applications are going to be built and

00:03:27,480 --> 00:03:32,370
deployed and all of that stuff we wear

00:03:29,220 --> 00:03:35,100
both hats the reason that I brought this

00:03:32,370 --> 00:03:37,890
up is that we are going to talk today

00:03:35,100 --> 00:03:39,720
about two different places that you're

00:03:37,890 --> 00:03:41,220
going to do extensions two different

00:03:39,720 --> 00:03:43,740
places that you're gonna extend cloud

00:03:41,220 --> 00:03:45,990
foundry capabilities one of them falls

00:03:43,740 --> 00:03:49,260
more in the operator camp and that is

00:03:45,990 --> 00:03:51,330
extending cloud foundry with custom

00:03:49,260 --> 00:03:53,520
services so how many people here have

00:03:51,330 --> 00:03:57,000
pushed an app even if it's just a hello

00:03:53,520 --> 00:03:58,860
world app outstanding most of you that

00:03:57,000 --> 00:04:01,320
that's great so you guys know about

00:03:58,860 --> 00:04:03,510
pushing an app you know that what we

00:04:01,320 --> 00:04:04,920
call services are really kind of the

00:04:03,510 --> 00:04:07,620
persistence they're generally the

00:04:04,920 --> 00:04:08,940
databases at the backend that's one

00:04:07,620 --> 00:04:10,230
thing that we're going to talk about and

00:04:08,940 --> 00:04:12,780
that's the part that I'm going to talk

00:04:10,230 --> 00:04:13,760
about is how you build custom services

00:04:12,780 --> 00:04:15,930
and I'm going to tell you about

00:04:13,760 --> 00:04:17,970
different ways that you can extend

00:04:15,930 --> 00:04:19,470
services in different scenarios and I'm

00:04:17,970 --> 00:04:22,440
actually going to go into the details of

00:04:19,470 --> 00:04:24,840
the api's and then Scott is going to

00:04:22,440 --> 00:04:27,180
talk about the other side which is the

00:04:24,840 --> 00:04:29,430
cool thing it's is if you are familiar

00:04:27,180 --> 00:04:33,920
how many people were you doing Cloud

00:04:29,430 --> 00:04:36,479
Foundry with v1 okay so you recall

00:04:33,920 --> 00:04:39,060
staging so when you staged an

00:04:36,479 --> 00:04:41,010
application we provided support for a

00:04:39,060 --> 00:04:41,630
lot of different languages and if you

00:04:41,010 --> 00:04:43,370
wanted to

00:04:41,630 --> 00:04:45,380
extend the list of languages that you

00:04:43,370 --> 00:04:47,780
that you wanted support it in your cloud

00:04:45,380 --> 00:04:49,550
you had to go into this directory and

00:04:47,780 --> 00:04:51,170
modify this file and you had to go into

00:04:49,550 --> 00:04:52,760
this directory and drop another thing

00:04:51,170 --> 00:04:55,640
over here and you had to do this and it

00:04:52,760 --> 00:04:59,480
was all operator side all totally

00:04:55,640 --> 00:05:00,980
operator side now with build packs we're

00:04:59,480 --> 00:05:02,720
actually putting that control that

00:05:00,980 --> 00:05:04,760
dizzying power in the hands of the

00:05:02,720 --> 00:05:06,290
developers themselves and that's the

00:05:04,760 --> 00:05:07,970
part that Scott's going to talk about is

00:05:06,290 --> 00:05:10,670
he's gonna go into the details of build

00:05:07,970 --> 00:05:13,280
packs so I'm gonna go ahead and jump

00:05:10,670 --> 00:05:14,840
into services and the first thing that

00:05:13,280 --> 00:05:17,870
I'm gonna do is I'm gonna start off with

00:05:14,840 --> 00:05:19,910
the demo this is spring one and so I'm

00:05:17,870 --> 00:05:21,590
gonna try to do as much demo as possible

00:05:19,910 --> 00:05:22,940
although I do have a ton of well

00:05:21,590 --> 00:05:25,610
not a ton of slides I only have about

00:05:22,940 --> 00:05:27,890
sixteen slides that each have about 25

00:05:25,610 --> 00:05:31,160
builds on them but I promise they're all

00:05:27,890 --> 00:05:34,360
pictures so so we'll go from there so

00:05:31,160 --> 00:05:40,910
let's see if I can get over to my demo

00:05:34,360 --> 00:05:43,760
where is my okay I'm looking for my

00:05:40,910 --> 00:05:46,840
terminal window and is it oh it's

00:05:43,760 --> 00:05:51,410
probably over there there we go

00:05:46,840 --> 00:05:54,650
all right so this is not ideal but I

00:05:51,410 --> 00:05:57,740
will do my best to Kirk my neck in this

00:05:54,650 --> 00:05:59,510
direction the other thing that I can

00:05:57,740 --> 00:06:03,320
well no we won't worry about that okay

00:05:59,510 --> 00:06:06,380
we'll go from here and the first thing

00:06:03,320 --> 00:06:10,520
that I want to do is very simply push an

00:06:06,380 --> 00:06:15,190
app if you guys will bear with me I am

00:06:10,520 --> 00:06:17,570
gonna go ahead and I can't do it

00:06:15,190 --> 00:06:19,310
yep I'm in a mirror the displace I was

00:06:17,570 --> 00:06:23,570
not marrying them because it's easier in

00:06:19,310 --> 00:06:25,250
keynote but I'm gonna do this so Andy

00:06:23,570 --> 00:06:27,440
and others of you guys can help keep me

00:06:25,250 --> 00:06:29,150
on time that was one of the reasons I

00:06:27,440 --> 00:06:31,010
married keynote okay

00:06:29,150 --> 00:06:33,200
this is good now I can see what I'm

00:06:31,010 --> 00:06:35,030
doing okay so the first thing that I

00:06:33,200 --> 00:06:36,530
want to do is I'm gonna push an app so

00:06:35,030 --> 00:06:38,870
let me make sure first of all that I'm

00:06:36,530 --> 00:06:48,940
targeting the right cloud and I want to

00:06:38,870 --> 00:06:48,940
target run dot pivotal dot IO CF target

00:06:55,040 --> 00:07:00,440
cool beams and let me make that a little

00:06:58,140 --> 00:07:06,330
bit bigger so it's not wrapping to start

00:07:00,440 --> 00:07:08,430
okay and CF apps will see what apps I

00:07:06,330 --> 00:07:10,290
have up running there I want to make

00:07:08,430 --> 00:07:11,640
sure yep my hello I've got a number of

00:07:10,290 --> 00:07:13,350
other things I was at the Intel

00:07:11,640 --> 00:07:16,800
Developer Forum this morning helping

00:07:13,350 --> 00:07:18,600
push some apps up there but what I want

00:07:16,800 --> 00:07:21,060
to do is push a new app in there and I'm

00:07:18,600 --> 00:07:23,250
gonna push a simple Ruby app so I'm just

00:07:21,060 --> 00:07:25,230
gonna do a CF push but this time I'm

00:07:23,250 --> 00:07:28,190
gonna do it with a trace turned on

00:07:25,230 --> 00:07:31,410
because I want to show you something so

00:07:28,190 --> 00:07:35,310
see if push with the trace flag and

00:07:31,410 --> 00:07:37,650
that's the minus T and it's gonna ask me

00:07:35,310 --> 00:07:40,080
for the name I'm gonna do hello and

00:07:37,650 --> 00:07:42,300
notice that it's doing round trips it's

00:07:40,080 --> 00:07:44,490
making rest calls so if you haven't

00:07:42,300 --> 00:07:46,350
gotten this far to understanding what

00:07:44,490 --> 00:07:48,240
the CLI does with the cloud controller

00:07:46,350 --> 00:07:49,950
is it's basically firing a bunch of rest

00:07:48,240 --> 00:07:51,360
requests and everything that you do

00:07:49,950 --> 00:07:53,580
through the CLI goes to the cloud

00:07:51,360 --> 00:07:55,860
controller now it's asking me for the

00:07:53,580 --> 00:07:58,560
number of instances and some attributes

00:07:55,860 --> 00:08:01,170
about the size now it's asking me for a

00:07:58,560 --> 00:08:02,580
name it goes and it does a rest request

00:08:01,170 --> 00:08:05,730
to make sure that that name isn't

00:08:02,580 --> 00:08:07,290
already taken asks for a domain now it's

00:08:05,730 --> 00:08:09,930
checking to see ah

00:08:07,290 --> 00:08:10,620
the host is taken so my mistake I must

00:08:09,930 --> 00:08:13,980
have forgotten

00:08:10,620 --> 00:08:15,420
let's do hello to it did that rest

00:08:13,980 --> 00:08:18,840
request and it found that there was

00:08:15,420 --> 00:08:23,070
already a hello so I will pick hello to

00:08:18,840 --> 00:08:24,720
and oh of course that is a hello to is

00:08:23,070 --> 00:08:27,930
going to be taken as well I'm at run dot

00:08:24,720 --> 00:08:32,840
pivotal i/o let's do hello

00:08:27,930 --> 00:08:35,190
Cornelia that one maybe won't be taken

00:08:32,840 --> 00:08:37,020
shouldn't be taken unless I've already

00:08:35,190 --> 00:08:39,600
pushed something all right we're good

00:08:37,020 --> 00:08:41,310
there and now it's asking me do you want

00:08:39,600 --> 00:08:43,620
to create any services for the

00:08:41,310 --> 00:08:45,180
application so remember those HTTP

00:08:43,620 --> 00:08:47,550
requests so this is the first time that

00:08:45,180 --> 00:08:50,660
we're touching services so I'm gonna say

00:08:47,550 --> 00:08:54,000
yes I want to create a service for the

00:08:50,660 --> 00:08:56,370
application and it did it HTTP requests

00:08:54,000 --> 00:08:57,720
there that's what's up here and I won't

00:08:56,370 --> 00:08:59,610
go through the details of it I just

00:08:57,720 --> 00:09:02,340
wanted to show you that it went and it

00:08:59,610 --> 00:09:03,330
did an HTTP request to find out what

00:09:02,340 --> 00:09:06,630
services are are they

00:09:03,330 --> 00:09:09,620
to bind to my application so I'm gonna

00:09:06,630 --> 00:09:13,260
go ahead and grab a let's say and

00:09:09,620 --> 00:09:15,149
I'll take the default name and then it

00:09:13,260 --> 00:09:17,700
asks me which plan I'm gonna take the

00:09:15,149 --> 00:09:22,170
sandbox plan and now it's going off and

00:09:17,700 --> 00:09:23,790
creating the service and so you can see

00:09:22,170 --> 00:09:26,790
that it's creating the service and if we

00:09:23,790 --> 00:09:28,980
scroll up a little bit it did more than

00:09:26,790 --> 00:09:29,700
that it actually bound the service as

00:09:28,980 --> 00:09:31,740
well

00:09:29,700 --> 00:09:35,040
so you see how it's doing a post here

00:09:31,740 --> 00:09:37,649
for service bindings it did two

00:09:35,040 --> 00:09:39,029
different HTTP requests and I'm pointing

00:09:37,649 --> 00:09:40,769
that out now because I'll show you some

00:09:39,029 --> 00:09:46,440
pictures in just a moment that shows the

00:09:40,769 --> 00:09:48,329
entire flow of how that works so we

00:09:46,440 --> 00:09:49,920
don't want to do any other services I'm

00:09:48,329 --> 00:09:51,480
not going to bind any other services

00:09:49,920 --> 00:09:53,790
we'll do some of that later and I'm not

00:09:51,480 --> 00:09:55,829
going to save the configuration and now

00:09:53,790 --> 00:10:01,260
it's gonna push the app up in there and

00:09:55,829 --> 00:10:04,800
I'll be able to bring that app up so let

00:10:01,260 --> 00:10:06,630
me go ahead and find that and let help

00:10:04,800 --> 00:10:11,790
me remember what did I call it I called

00:10:06,630 --> 00:10:13,860
it hello Cornell yeah right and let's

00:10:11,790 --> 00:10:17,220
see if it is done yet

00:10:13,860 --> 00:10:20,040
should be done in just a moment and this

00:10:17,220 --> 00:10:21,990
Ruby app by the way is if you go into

00:10:20,040 --> 00:10:24,240
our github repository under Cloud

00:10:21,990 --> 00:10:25,740
Foundry you will find a repository that

00:10:24,240 --> 00:10:27,660
is called so there you can see that the

00:10:25,740 --> 00:10:29,130
push was successful you'll find a

00:10:27,660 --> 00:10:31,230
repository that's called something like

00:10:29,130 --> 00:10:33,390
test assets or something like that we're

00:10:31,230 --> 00:10:34,920
all TDD test-driven development at

00:10:33,390 --> 00:10:37,500
pivotal labs which is where cloud

00:10:34,920 --> 00:10:39,089
foundry is developed a whole ton of apps

00:10:37,500 --> 00:10:42,120
in there so this is an app that I just

00:10:39,089 --> 00:10:44,160
took out of that sample apps area so

00:10:42,120 --> 00:10:46,620
I'll show you what that fancy app does

00:10:44,160 --> 00:10:49,740
it basically throws out a bunch of stuff

00:10:46,620 --> 00:10:53,670
onto the screen it does provide an

00:10:49,740 --> 00:10:55,740
endpoint for services so you can see

00:10:53,670 --> 00:10:58,680
here is the list of services that I've

00:10:55,740 --> 00:11:01,320
bound to my application so you can see

00:10:58,680 --> 00:11:03,480
that the vendor is lab and here's

00:11:01,320 --> 00:11:05,339
the name of my instance this is just

00:11:03,480 --> 00:11:08,910
what's showing and I can show you the

00:11:05,339 --> 00:11:13,470
code in fact I think I've got the code

00:11:08,910 --> 00:11:13,829
here so let me do a cat on I think it's

00:11:13,470 --> 00:11:16,560
called

00:11:13,829 --> 00:11:19,890
app you know let's see

00:11:16,560 --> 00:11:22,800
envy test Ruby so you can see here that

00:11:19,890 --> 00:11:25,500
under services what it's doing is its

00:11:22,800 --> 00:11:28,230
grabbing a value out of an environmental

00:11:25,500 --> 00:11:30,300
variable the cap services and that's

00:11:28,230 --> 00:11:31,950
where all the V cap services information

00:11:30,300 --> 00:11:33,540
is that's all the information of the

00:11:31,950 --> 00:11:36,029
services that are bound to this

00:11:33,540 --> 00:11:38,279
particular application and we'll look at

00:11:36,029 --> 00:11:40,770
that in more detail as we go through the

00:11:38,279 --> 00:11:42,570
the presentation and what we've done

00:11:40,770 --> 00:11:44,779
here is we're just pulling out two

00:11:42,570 --> 00:11:47,790
fields so that V cap services

00:11:44,779 --> 00:11:49,950
environmental variable is a JSON payload

00:11:47,790 --> 00:11:53,100
that has a whole bunch of information in

00:11:49,950 --> 00:11:54,810
it the service plans so you saw the

00:11:53,100 --> 00:11:56,880
sandbox that I chose all that

00:11:54,810 --> 00:11:59,130
informations in there we've just pulled

00:11:56,880 --> 00:12:00,779
in our app code here out the vendor in

00:11:59,130 --> 00:12:05,160
the name and displayed that in the

00:12:00,779 --> 00:12:10,770
browser so with that context I wanted

00:12:05,160 --> 00:12:12,660
you to be able to see and now I'm not

00:12:10,770 --> 00:12:14,940
happy with the screen resolution but

00:12:12,660 --> 00:12:17,490
we'll make it now what I want to do is

00:12:14,940 --> 00:12:19,410
build number one I want to step through

00:12:17,490 --> 00:12:21,870
that I wanted you to see the context of

00:12:19,410 --> 00:12:25,400
those two separate calls with respect to

00:12:21,870 --> 00:12:27,960
services so now when I do that push

00:12:25,400 --> 00:12:30,240
remember that there were two I talked

00:12:27,960 --> 00:12:32,850
about the two different HTTP requests

00:12:30,240 --> 00:12:35,310
one to create the service we call that

00:12:32,850 --> 00:12:37,740
provisioning of the service it's an HTTP

00:12:35,310 --> 00:12:39,450
request that goes across and then the

00:12:37,740 --> 00:12:42,450
second one we'll go through is the bind

00:12:39,450 --> 00:12:46,680
operation at that point the cloud

00:12:42,450 --> 00:12:49,770
controller sends an HTTP request over to

00:12:46,680 --> 00:12:52,800
the service broker for the service that

00:12:49,770 --> 00:12:57,030
you have selected so it sends it to the

00:12:52,800 --> 00:12:59,490
service broker for Labs and I'll

00:12:57,030 --> 00:13:01,320
show you exactly what happened on the

00:12:59,490 --> 00:13:03,780
pivotal site I'm sorry on the run dot

00:13:01,320 --> 00:13:05,490
pivotal dot IO site in just a moment how

00:13:03,780 --> 00:13:08,820
many people here call them service

00:13:05,490 --> 00:13:11,160
gateways in the past please do not call

00:13:08,820 --> 00:13:12,930
them service Gateway's anymore they are

00:13:11,160 --> 00:13:15,600
service we're calling them service

00:13:12,930 --> 00:13:17,040
brokers because and you'll see why at

00:13:15,600 --> 00:13:19,410
the end of the screen so I'll come back

00:13:17,040 --> 00:13:21,900
to that emphasizing that point we call

00:13:19,410 --> 00:13:24,570
that the service broker it fulfills the

00:13:21,900 --> 00:13:25,110
same purpose that the v1 service gateway

00:13:24,570 --> 00:13:27,500
did

00:13:25,110 --> 00:13:30,300
we've just named it more appropriately

00:13:27,500 --> 00:13:32,460
okay so now that service broke

00:13:30,300 --> 00:13:34,530
has to do the work to provision that

00:13:32,460 --> 00:13:38,040
service to provision that Labs

00:13:34,530 --> 00:13:42,300
database and you'll notice here that

00:13:38,040 --> 00:13:45,150
I've labeled that arrow up to you now

00:13:42,300 --> 00:13:52,560
how many people built service gateways

00:13:45,150 --> 00:13:54,060
for v1 nobody I did wasn't easy but what

00:13:52,560 --> 00:13:56,370
you did back then was you took a whole

00:13:54,060 --> 00:13:58,770
bunch of ruby base classes and you

00:13:56,370 --> 00:14:00,630
subclass those and it did a whole bunch

00:13:58,770 --> 00:14:02,730
of stuff for you and I'll show you what

00:14:00,630 --> 00:14:05,700
some of those internal things were and

00:14:02,730 --> 00:14:08,040
the kind of API for services was the

00:14:05,700 --> 00:14:10,170
Ruby code there really wasn't a crisp

00:14:08,040 --> 00:14:12,510
lead articulated there was a crisply

00:14:10,170 --> 00:14:14,460
defined API but we didn't really crisply

00:14:12,510 --> 00:14:17,340
articulate it and you can kind of

00:14:14,460 --> 00:14:19,890
reverse engineer it out what we're doing

00:14:17,340 --> 00:14:22,560
with version 2 and services Cloud

00:14:19,890 --> 00:14:26,940
Foundry version 2 and services is that

00:14:22,560 --> 00:14:30,900
we are crisply defining the API for the

00:14:26,940 --> 00:14:35,430
service broker everything behind the

00:14:30,900 --> 00:14:37,710
service broker is up to you you can

00:14:35,430 --> 00:14:40,200
decide how you want to implement that

00:14:37,710 --> 00:14:42,420
service broker you can decide whether

00:14:40,200 --> 00:14:44,580
you want to borrow some of our ruby base

00:14:42,420 --> 00:14:47,550
and use those Ruby classes as base

00:14:44,580 --> 00:14:50,490
classes or you can decide to program in

00:14:47,550 --> 00:14:53,040
something other than Ruby because we are

00:14:50,490 --> 00:14:55,290
giving you the API it's an HTTP based

00:14:53,040 --> 00:14:57,180
API and that's all you need to do and

00:14:55,290 --> 00:14:59,880
I'm gonna go through that API in detail

00:14:57,180 --> 00:15:02,040
with you here today so you're gonna go

00:14:59,880 --> 00:15:04,680
ahead and the service broker is gonna do

00:15:02,040 --> 00:15:07,950
its work and then it's gonna respond

00:15:04,680 --> 00:15:09,840
back to the Cloud Controller HTTP

00:15:07,950 --> 00:15:12,750
request/response I'll come back to that

00:15:09,840 --> 00:15:14,190
in a moment as well you'll notice that

00:15:12,750 --> 00:15:16,500
after it returned to the cloud

00:15:14,190 --> 00:15:18,480
controller the cloud controller wrote

00:15:16,500 --> 00:15:20,100
something into its little database there

00:15:18,480 --> 00:15:22,230
so the cloud controller has its own

00:15:20,100 --> 00:15:24,840
record of everything that's going on in

00:15:22,230 --> 00:15:27,270
the cloud so it wrote down what it got

00:15:24,840 --> 00:15:29,970
back from the service broker and stored

00:15:27,270 --> 00:15:33,060
it in its database and now it responds

00:15:29,970 --> 00:15:35,250
to the CLI the CLI if you remember then

00:15:33,060 --> 00:15:38,430
did a bind as well so the bind comes

00:15:35,250 --> 00:15:40,860
across as an HTTP request same thing

00:15:38,430 --> 00:15:42,540
over here you're going to do that Cloud

00:15:40,860 --> 00:15:44,100
Controller is going to send an HTTP

00:15:42,540 --> 00:15:47,000
request to yours

00:15:44,100 --> 00:15:49,980
service broker implementation up to you

00:15:47,000 --> 00:15:51,509
what you're gonna do on that bind and

00:15:49,980 --> 00:15:54,209
again I'll talk about that in more

00:15:51,509 --> 00:15:58,139
detail and then it returns to the cloud

00:15:54,209 --> 00:16:01,649
controller oh and it writes more things

00:15:58,139 --> 00:16:03,329
into the database after the bind one of

00:16:01,649 --> 00:16:06,029
the important things that it probably

00:16:03,329 --> 00:16:08,120
does is it probably writes credentials

00:16:06,029 --> 00:16:11,209
into that cloud controller database

00:16:08,120 --> 00:16:15,209
credentials for access to that service

00:16:11,209 --> 00:16:16,529
ok so after the bind comes back then if

00:16:15,209 --> 00:16:18,199
you remember there was a whole bunch of

00:16:16,529 --> 00:16:21,449
other stuff that happened which was

00:16:18,199 --> 00:16:23,790
staging the application so that's what

00:16:21,449 --> 00:16:25,860
this dot dot dot is and then it goes

00:16:23,790 --> 00:16:27,540
ahead and it does the deploy and it does

00:16:25,860 --> 00:16:30,810
all of that staging and use all of that

00:16:27,540 --> 00:16:32,940
stuff scrolling on this screen at the

00:16:30,810 --> 00:16:35,730
time that it's doing the staging and

00:16:32,940 --> 00:16:38,009
this is where Scott is going to talk a

00:16:35,730 --> 00:16:39,630
lot more about the staging in the build

00:16:38,009 --> 00:16:42,540
that's where the build packs come in

00:16:39,630 --> 00:16:43,980
what the outcome of that staging process

00:16:42,540 --> 00:16:46,170
so there's a whole bunch of work that

00:16:43,980 --> 00:16:48,180
happens there the staging is that you

00:16:46,170 --> 00:16:51,269
get a droplet that's deployed into the

00:16:48,180 --> 00:16:55,170
DEA notice that that droplet has the

00:16:51,269 --> 00:16:56,040
credentials in it okay where are those

00:16:55,170 --> 00:16:58,319
credentials

00:16:56,040 --> 00:17:00,569
remember that environmental variable

00:16:58,319 --> 00:17:03,000
that I showed you that's where the

00:17:00,569 --> 00:17:06,199
credentials are the credentials are made

00:17:03,000 --> 00:17:09,240
available to your application as

00:17:06,199 --> 00:17:12,959
environmental variables and we access

00:17:09,240 --> 00:17:14,490
them from the code okay now when Scott

00:17:12,959 --> 00:17:16,709
talks about it he'll talk about some

00:17:14,490 --> 00:17:18,360
other other things that happen

00:17:16,709 --> 00:17:19,949
you don't necessarily in your

00:17:18,360 --> 00:17:21,720
application have to look up that

00:17:19,949 --> 00:17:23,429
environmental variable there is a little

00:17:21,720 --> 00:17:26,100
bit of magic that's not really magic

00:17:23,429 --> 00:17:27,600
looks like magic that will make that job

00:17:26,100 --> 00:17:31,590
a little bit easier for you in certain

00:17:27,600 --> 00:17:33,780
instances now here's why we don't call

00:17:31,590 --> 00:17:36,000
them gateways when the browser then goes

00:17:33,780 --> 00:17:39,090
to access that application which is

00:17:36,000 --> 00:17:42,030
running in the DEA it goes straight from

00:17:39,090 --> 00:17:46,350
your application to the service it's not

00:17:42,030 --> 00:17:48,510
a gateway it is not in the the control

00:17:46,350 --> 00:17:50,730
plane at the time that you're running

00:17:48,510 --> 00:17:51,630
the application the broker is just there

00:17:50,730 --> 00:17:53,429
to broker

00:17:51,630 --> 00:17:57,090
connections as you're doing that

00:17:53,429 --> 00:18:00,910
deployment okay does that make sense

00:17:57,090 --> 00:18:02,530
cool alright so the next thing that I

00:18:00,910 --> 00:18:04,330
was gonna do so that's what those notes

00:18:02,530 --> 00:18:07,000
are and the brokers only use during

00:18:04,330 --> 00:18:08,560
provision and unproven the demo I was

00:18:07,000 --> 00:18:09,760
gonna do here was I was gonna pull you

00:18:08,560 --> 00:18:11,530
over and show you where that

00:18:09,760 --> 00:18:13,480
environmental variable was but I've

00:18:11,530 --> 00:18:16,540
already done that so I'll go ahead and

00:18:13,480 --> 00:18:17,920
charge forward so I'm what ten fifteen

00:18:16,540 --> 00:18:19,930
minutes in and now I'm gonna tell you

00:18:17,920 --> 00:18:21,520
what my agenda is that's kind of my mo I

00:18:19,930 --> 00:18:22,600
always start off with something and then

00:18:21,520 --> 00:18:24,790
I talk about what I'm going to talk

00:18:22,600 --> 00:18:26,350
about the rest of the time when it comes

00:18:24,790 --> 00:18:29,290
to services I want to explain to you

00:18:26,350 --> 00:18:30,910
three different things I want to talk

00:18:29,290 --> 00:18:34,480
about service offerings that are

00:18:30,910 --> 00:18:36,160
available on run pivotal do and I want

00:18:34,480 --> 00:18:38,560
to talk about the implementation there

00:18:36,160 --> 00:18:41,560
the second thing I want to do is talk

00:18:38,560 --> 00:18:44,920
about building your own services so for

00:18:41,560 --> 00:18:47,260
example my colleague Gary who is from

00:18:44,920 --> 00:18:49,330
EMC he's working in a group where

00:18:47,260 --> 00:18:52,150
they've created their own service for a

00:18:49,330 --> 00:18:54,520
an EMC product called X DB an XML

00:18:52,150 --> 00:18:56,740
database they also built as a custom

00:18:54,520 --> 00:18:58,420
service for Cassandra okay so they've

00:18:56,740 --> 00:19:00,100
built custom services so I'm going to

00:18:58,420 --> 00:19:01,840
talk about what that looks like now and

00:19:00,100 --> 00:19:03,640
then finally I'm going to talk about a

00:19:01,840 --> 00:19:06,160
third thing that we call user provided

00:19:03,640 --> 00:19:08,610
service instances and I'll explain what

00:19:06,160 --> 00:19:11,650
that is when we get there in the slides

00:19:08,610 --> 00:19:14,320
okay so this is a really simple simple

00:19:11,650 --> 00:19:19,150
picture that shows what's going on how

00:19:14,320 --> 00:19:21,790
many services is pivotal it so this is a

00:19:19,150 --> 00:19:25,120
good question and it's not a trick

00:19:21,790 --> 00:19:29,880
question but how many services are is

00:19:25,120 --> 00:19:29,880
pivotal providing on run pivotal do

00:19:30,810 --> 00:19:37,270
goose egg not a one we don't have any

00:19:35,170 --> 00:19:39,310
services that we have built that are

00:19:37,270 --> 00:19:40,930
running on run dot pivotal dot IO and

00:19:39,310 --> 00:19:43,420
here's why and those of you who have the

00:19:40,930 --> 00:19:45,820
legacy with version one we provided five

00:19:43,420 --> 00:19:47,710
different services remember why did we

00:19:45,820 --> 00:19:48,790
get rid of those well we're not really

00:19:47,710 --> 00:19:50,740
good at that

00:19:48,790 --> 00:19:53,560
the first question that we got was

00:19:50,740 --> 00:19:55,600
always oh you've got these databases so

00:19:53,560 --> 00:19:59,530
what do you do about replication and we

00:19:55,600 --> 00:20:00,640
said well we don't do anything Oh what

00:19:59,530 --> 00:20:05,800
do you do about high-ability

00:20:00,640 --> 00:20:09,280
and I'm sorry and so there's there's all

00:20:05,800 --> 00:20:10,240
of these companies yep so there's all of

00:20:09,280 --> 00:20:14,400
these companies

00:20:10,240 --> 00:20:18,280
that are in the business of producing

00:20:14,400 --> 00:20:20,230
services reliable services with those

00:20:18,280 --> 00:20:23,650
different service levels with those

00:20:20,230 --> 00:20:25,480
plans so the you can choose one that

00:20:23,650 --> 00:20:27,670
doesn't have a replication maybe it's a

00:20:25,480 --> 00:20:29,800
free plan or you can ask them to do the

00:20:27,670 --> 00:20:31,809
backup in a recovery for you or the

00:20:29,800 --> 00:20:34,780
replication or you know the high

00:20:31,809 --> 00:20:36,580
availability so we made the decision for

00:20:34,780 --> 00:20:39,160
Rhonda pivotal diode to create a

00:20:36,580 --> 00:20:41,350
marketplace and we have a marketplace of

00:20:39,160 --> 00:20:43,750
services so when you do select a service

00:20:41,350 --> 00:20:46,360
when I selected MongoDB it was going to

00:20:43,750 --> 00:20:49,320
mongolab it wasn't happening in our

00:20:46,360 --> 00:21:03,690
cloud at all it was happening externally

00:20:49,320 --> 00:21:03,690
yes yes absolutely I believe we do yes

00:21:24,680 --> 00:21:29,320
yep great thank you Andy yes

00:21:33,110 --> 00:21:38,490
that is probably a business question and

00:21:36,150 --> 00:21:42,059
I am not prepared to answer that

00:21:38,490 --> 00:21:44,010
question now we do we use we use Amazon

00:21:42,059 --> 00:21:46,320
services internally so when you saw that

00:21:44,010 --> 00:21:48,690
cloud controller database we're using

00:21:46,320 --> 00:21:49,919
internal services I'm not sure actually

00:21:48,690 --> 00:21:52,770
for the cloud controller database

00:21:49,919 --> 00:21:55,590
whether we are yes RDS we're using RDS

00:21:52,770 --> 00:21:56,789
for that yep but that's a business

00:21:55,590 --> 00:21:59,010
question I'm sure it's a partnership

00:21:56,789 --> 00:22:02,210
thing and I'm not prepared to answer

00:21:59,010 --> 00:22:05,880
that question I'm a propellerhead so

00:22:02,210 --> 00:22:07,770
okay so the way that we do that is we

00:22:05,880 --> 00:22:09,960
did not write all the brokering to each

00:22:07,770 --> 00:22:12,000
one of those services we engaged with AB

00:22:09,960 --> 00:22:14,120
direct AB direct they're in the business

00:22:12,000 --> 00:22:17,309
of brokering to all of those different

00:22:14,120 --> 00:22:18,960
third parties on the outside so let me

00:22:17,309 --> 00:22:21,270
just show you oh and if you are a

00:22:18,960 --> 00:22:22,860
partner if you come from one of these

00:22:21,270 --> 00:22:25,409
companies that can provide a service

00:22:22,860 --> 00:22:27,809
like this into our marketplace this is

00:22:25,409 --> 00:22:29,340
the person that you need to contact you

00:22:27,809 --> 00:22:31,710
need to contact Nima he's our business

00:22:29,340 --> 00:22:33,240
development guy and he's the one you can

00:22:31,710 --> 00:22:34,710
talk to about hey I've got this really

00:22:33,240 --> 00:22:37,020
nifty service that I want to make sure

00:22:34,710 --> 00:22:40,140
is in the marketplace on run dot pivotal

00:22:37,020 --> 00:22:43,080
dot IO now let me show you just very

00:22:40,140 --> 00:22:44,730
briefly what happens on the inside you

00:22:43,080 --> 00:22:47,039
saw that picture so you're gonna see

00:22:44,730 --> 00:22:49,649
that picture over and over again got the

00:22:47,039 --> 00:22:52,200
cloud controller we have a broker

00:22:49,649 --> 00:22:55,610
we built did build that broker together

00:22:52,200 --> 00:22:58,380
with AB direct so when we do a push

00:22:55,610 --> 00:23:00,419
what's happening there is that there's

00:22:58,380 --> 00:23:01,980
all that logic in the app direct service

00:23:00,419 --> 00:23:04,500
broker that communicates with the AB

00:23:01,980 --> 00:23:06,320
direct application or service and that

00:23:04,500 --> 00:23:08,580
communicates with these third parties

00:23:06,320 --> 00:23:10,679
apparently including billing information

00:23:08,580 --> 00:23:13,620
metering information all of that stuff

00:23:10,679 --> 00:23:15,510
is happening there as well one of the

00:23:13,620 --> 00:23:17,399
things that you'll notice here is on the

00:23:15,510 --> 00:23:21,390
next click you'll notice how does the

00:23:17,399 --> 00:23:24,840
browser access those services accesses

00:23:21,390 --> 00:23:26,130
the services directly it may I don't

00:23:24,840 --> 00:23:29,580
think it actually goes it doesn't go

00:23:26,130 --> 00:23:31,260
through app direct there either I am Not

00:23:29,580 --> 00:23:33,270
sure of that but it definitely doesn't

00:23:31,260 --> 00:23:35,340
go through the broker okay so you're

00:23:33,270 --> 00:23:36,990
gonna see this theme over and over and

00:23:35,340 --> 00:23:39,240
over again that once the droplet is

00:23:36,990 --> 00:23:40,919
staged its accessing the services

00:23:39,240 --> 00:23:43,730
directly it's not going through any

00:23:40,919 --> 00:23:45,779
internal Cloud Foundry things anymore

00:23:43,730 --> 00:23:48,719
all right

00:23:45,779 --> 00:23:53,609
so let me show that to you and let me in

00:23:48,719 --> 00:23:56,009
fact see where I am on time is that

00:23:53,609 --> 00:23:59,159
already five minutes until five okay so

00:23:56,009 --> 00:24:01,080
I'm gonna skip that demo because the

00:23:59,159 --> 00:24:02,820
real good stuff is coming up what I was

00:24:01,080 --> 00:24:04,499
gonna show you was I was gonna go into

00:24:02,820 --> 00:24:06,389
the console I was going to create one of

00:24:04,499 --> 00:24:11,570
those apps but you already saw my

00:24:06,389 --> 00:24:11,570
MongoDB where I created that question I

00:24:12,830 --> 00:24:16,979
am sort of around and I'll answer that

00:24:15,539 --> 00:24:18,299
question at the end but that's a really

00:24:16,979 --> 00:24:20,339
good question I'm around this evening

00:24:18,299 --> 00:24:22,469
for sure so I'm happy to show you more

00:24:20,339 --> 00:24:23,759
demos but there's a better demo that I

00:24:22,469 --> 00:24:25,859
want to show you at the end that's a

00:24:23,759 --> 00:24:27,869
little bit more interesting so Cloud

00:24:25,859 --> 00:24:29,879
Foundry so that now I'm on to number two

00:24:27,869 --> 00:24:34,919
you you building your own Cloud Foundry

00:24:29,879 --> 00:24:37,320
services so I said there's zero on run

00:24:34,919 --> 00:24:38,580
that pivotal dot IO when you take a look

00:24:37,320 --> 00:24:42,269
at what we're doing in the open source

00:24:38,580 --> 00:24:44,429
repositories we now have one we decided

00:24:42,269 --> 00:24:46,649
after yanking the five that we really

00:24:44,429 --> 00:24:49,139
did need to understand everything about

00:24:46,649 --> 00:24:52,619
building one service one really high

00:24:49,139 --> 00:24:54,389
quality service with failover with data

00:24:52,619 --> 00:24:56,339
replication that we needed to understand

00:24:54,389 --> 00:24:58,080
that ourselves to be able to provide the

00:24:56,339 --> 00:25:00,899
right infrastructure around it and that

00:24:58,080 --> 00:25:02,789
is the my sequel service so we are

00:25:00,899 --> 00:25:05,249
building out a service broker and we're

00:25:02,789 --> 00:25:07,429
building out a service capability for my

00:25:05,249 --> 00:25:09,419
sequel and so I'll point you to that

00:25:07,429 --> 00:25:12,029
repository there it's in Cloud Foundry

00:25:09,419 --> 00:25:14,669
CF services release that's where you'll

00:25:12,029 --> 00:25:16,229
find my sequel now you could count

00:25:14,669 --> 00:25:19,919
depending on how you count there might

00:25:16,229 --> 00:25:21,960
be many many more and that is but we've

00:25:19,919 --> 00:25:24,359
pushed those into a different repository

00:25:21,960 --> 00:25:28,019
now they're in the CF services can trim

00:25:24,359 --> 00:25:30,570
and there you'll find not only the five

00:25:28,019 --> 00:25:33,419
that we built before but a whole bunch

00:25:30,570 --> 00:25:35,369
of others that had been built before and

00:25:33,419 --> 00:25:38,039
so those are those are ones that have

00:25:35,369 --> 00:25:41,129
been contributed by the community a lot

00:25:38,039 --> 00:25:44,009
of those have been kind of shimmied from

00:25:41,129 --> 00:25:46,979
v1 to v2 so they're not not necessarily

00:25:44,009 --> 00:25:48,719
fully up to the v2 standards but it's

00:25:46,979 --> 00:25:52,559
also a good resource to take a look at

00:25:48,719 --> 00:25:54,299
the code so how we build them I already

00:25:52,559 --> 00:25:56,940
mentioned that we used to subclass a

00:25:54,299 --> 00:25:59,100
bunch of ruby base classes and now it's

00:25:56,940 --> 00:26:01,559
in v2 it's a restful protocol

00:25:59,100 --> 00:26:03,330
and that protocol is evolving and I'll

00:26:01,559 --> 00:26:05,490
tell you where some of those evolution

00:26:03,330 --> 00:26:07,289
points are the good news is that it's

00:26:05,490 --> 00:26:10,139
evolving to make it even easier for you

00:26:07,289 --> 00:26:11,730
so if you're writing to our current

00:26:10,139 --> 00:26:14,159
restful interface which is what I'm

00:26:11,730 --> 00:26:16,590
going to show you today the good news is

00:26:14,159 --> 00:26:18,720
that in two or three months when we come

00:26:16,590 --> 00:26:20,100
up with the next version you're just

00:26:18,720 --> 00:26:22,679
going to get to throw away some of the

00:26:20,100 --> 00:26:24,090
code that you wrote now it's it's gonna

00:26:22,679 --> 00:26:25,980
get easier we're taking on

00:26:24,090 --> 00:26:28,919
responsibility for some of what you have

00:26:25,980 --> 00:26:31,049
to do right now and I'll go over that in

00:26:28,919 --> 00:26:33,389
a little bit more detail there's three

00:26:31,049 --> 00:26:36,450
parts to the protocol and I'm gonna go

00:26:33,389 --> 00:26:38,759
over each one of those the first thing

00:26:36,450 --> 00:26:41,639
is number one first part of that

00:26:38,759 --> 00:26:44,190
protocol is that the broker when a

00:26:41,639 --> 00:26:46,980
broker comes online okay and Cloud

00:26:44,190 --> 00:26:49,740
Foundry the is built so that the the

00:26:46,980 --> 00:26:51,330
components can come up and down and you

00:26:49,740 --> 00:26:52,590
don't have to bring all of Cloud Foundry

00:26:51,330 --> 00:26:54,809
up or down if you want to add a

00:26:52,590 --> 00:26:57,450
component let's say I want to add a new

00:26:54,809 --> 00:26:59,730
service broker in and I deploy that into

00:26:57,450 --> 00:27:01,950
my Cloud Foundry when the service broker

00:26:59,730 --> 00:27:03,960
comes in the service broker has to let

00:27:01,950 --> 00:27:07,019
the cloud controller know here's what

00:27:03,960 --> 00:27:10,139
I'm offering so this is the first part

00:27:07,019 --> 00:27:12,929
of the protocol that you need to build

00:27:10,139 --> 00:27:14,580
so you'll notice it's very faint but

00:27:12,929 --> 00:27:16,529
there's a light yellow around the

00:27:14,580 --> 00:27:18,210
service broker everything that you're

00:27:16,529 --> 00:27:20,759
building is what you're building in the

00:27:18,210 --> 00:27:24,120
service broker in some cases you're

00:27:20,759 --> 00:27:26,519
building a rest client and in some cases

00:27:24,120 --> 00:27:27,870
you're building a rest service and I'm

00:27:26,519 --> 00:27:30,840
hopefully gonna make that really clear

00:27:27,870 --> 00:27:32,970
to you here on this stage today so

00:27:30,840 --> 00:27:36,149
service broker has to tell the cloud

00:27:32,970 --> 00:27:37,860
controller what its offerings are in

00:27:36,149 --> 00:27:39,960
order to do that it has to authenticate

00:27:37,860 --> 00:27:41,309
to the cloud controller so the first

00:27:39,960 --> 00:27:43,019
thing that you need to do is you need to

00:27:41,309 --> 00:27:45,840
have an account that authenticates to

00:27:43,019 --> 00:27:47,580
the UA a ok so it's the first thing that

00:27:45,840 --> 00:27:51,029
you're gonna do in your code and you're

00:27:47,580 --> 00:27:53,190
gonna get back a token then you're gonna

00:27:51,029 --> 00:27:57,210
issue an HTTP request to the cloud

00:27:53,190 --> 00:28:00,750
controller with that token ok I'm sorry

00:27:57,210 --> 00:28:04,110
in the HTTP request is in fact a query

00:28:00,750 --> 00:28:06,389
for what the current catalog is it's my

00:28:04,110 --> 00:28:09,090
responsibility as a broker to say oh

00:28:06,389 --> 00:28:11,730
because maybe that broker came online

00:28:09,090 --> 00:28:12,320
because it was down and it just came

00:28:11,730 --> 00:28:14,029
back

00:28:12,320 --> 00:28:16,370
line and maybe there's already an

00:28:14,029 --> 00:28:19,669
offering in the catalog so it's up to

00:28:16,370 --> 00:28:22,070
the service broker to get that catalog

00:28:19,669 --> 00:28:24,200
and say oh I've got something new I need

00:28:22,070 --> 00:28:26,750
to offer this back so it goes ahead and

00:28:24,200 --> 00:28:30,350
it gets that service catalog in an HTTP

00:28:26,750 --> 00:28:32,630
request with that token and then it's

00:28:30,350 --> 00:28:35,000
going to issue HTTP request to update

00:28:32,630 --> 00:28:38,210
the catalog and the HTTP requests are

00:28:35,000 --> 00:28:42,500
things like post for new put for update

00:28:38,210 --> 00:28:44,870
and delete for get rid of it okay all

00:28:42,500 --> 00:28:46,429
right that's the first part so you have

00:28:44,870 --> 00:28:49,129
to implement that as a part of your

00:28:46,429 --> 00:28:50,120
custom service the second thing that

00:28:49,129 --> 00:28:52,519
you're gonna do is you're gonna

00:28:50,120 --> 00:28:54,139
implement that restful service that's

00:28:52,519 --> 00:28:56,360
going to support the bind and unbind

00:28:54,139 --> 00:28:57,950
remember the bind and unbind that came

00:28:56,360 --> 00:29:00,019
from the cloud controller to the service

00:28:57,950 --> 00:29:04,009
broker you need to implement those

00:29:00,019 --> 00:29:06,230
endpoints okay so but before you

00:29:04,009 --> 00:29:09,049
implement those endpoints the cloud

00:29:06,230 --> 00:29:10,909
controller is going to be at is going to

00:29:09,049 --> 00:29:13,370
be sending an HTTP request to the

00:29:10,909 --> 00:29:16,399
service broker that needs to be secured

00:29:13,370 --> 00:29:19,009
so how does that security work well

00:29:16,399 --> 00:29:20,570
there's a shared secret over here in the

00:29:19,009 --> 00:29:22,580
service broker and I'll talk a little

00:29:20,570 --> 00:29:24,559
bit about how we can orchestrate this a

00:29:22,580 --> 00:29:26,600
little bit better in just a moment but

00:29:24,559 --> 00:29:28,309
there's a shared secret and it's up to

00:29:26,600 --> 00:29:31,730
the cloud controller when it makes

00:29:28,309 --> 00:29:35,149
requests to deliver that shared secret

00:29:31,730 --> 00:29:37,309
to the service broker so you need to as

00:29:35,149 --> 00:29:39,740
an operator remember you're the operator

00:29:37,309 --> 00:29:41,600
as an operator you need to provide that

00:29:39,740 --> 00:29:44,149
shared secret to the cloud controller

00:29:41,600 --> 00:29:46,009
this is kind of out-of-band it's not

00:29:44,149 --> 00:29:48,110
part of the provisioning process that's

00:29:46,009 --> 00:29:49,519
out-of-band it's gonna get better and

00:29:48,110 --> 00:29:52,340
I'll talk about that when I talk about

00:29:49,519 --> 00:29:54,409
bosh in just a little bit and so you

00:29:52,340 --> 00:29:57,200
make an HTTP request there's support in

00:29:54,409 --> 00:30:00,230
the CLI for this so you there's a CLI

00:29:57,200 --> 00:30:02,059
that allows you to supply the shared

00:30:00,230 --> 00:30:04,399
secret to the cloud controller for your

00:30:02,059 --> 00:30:07,309
particular service broker so that's the

00:30:04,399 --> 00:30:09,950
prerequisite but then when the provision

00:30:07,309 --> 00:30:10,850
in the bind requests come that's what's

00:30:09,950 --> 00:30:15,769
happening here

00:30:10,850 --> 00:30:18,889
so the CLI asks for a service so a

00:30:15,769 --> 00:30:21,529
provision or a none provision up to you

00:30:18,889 --> 00:30:24,250
what you do with it up to you are you

00:30:21,529 --> 00:30:26,390
going to create a new database instance

00:30:24,250 --> 00:30:28,159
spawn off a new process

00:30:26,390 --> 00:30:30,230
are you going to take an existing

00:30:28,159 --> 00:30:32,679
process and create a new database within

00:30:30,230 --> 00:30:35,659
it are you going to provision a new user

00:30:32,679 --> 00:30:38,330
entirely up to you what you do with that

00:30:35,659 --> 00:30:41,960
and then of course it's going to respond

00:30:38,330 --> 00:30:44,029
same thing on unbind or unbind or unbind

00:30:41,960 --> 00:30:47,120
it's up to you what you do there and

00:30:44,029 --> 00:30:51,620
it's gonna respond so the key here is

00:30:47,120 --> 00:30:53,000
you are implementing the HTTP endpoints

00:30:51,620 --> 00:30:54,860
that are on the left-hand side of the

00:30:53,000 --> 00:30:56,960
service broker and doing whatever

00:30:54,860 --> 00:31:00,140
business logic you need at the back end

00:30:56,960 --> 00:31:03,140
okay now what's going to come up next on

00:31:00,140 --> 00:31:06,590
my screen how do I access it from the

00:31:03,140 --> 00:31:08,809
broker doesn't go from that from the

00:31:06,590 --> 00:31:11,600
browser doesn't go through the broker

00:31:08,809 --> 00:31:13,360
goes straight there so the droplet has

00:31:11,600 --> 00:31:16,929
those gets those credentials and

00:31:13,360 --> 00:31:19,370
accesses the service directly alright

00:31:16,929 --> 00:31:21,590
finally the third thing that you need to

00:31:19,370 --> 00:31:24,230
implement in your protocol is what we

00:31:21,590 --> 00:31:28,220
call orphan management and basically

00:31:24,230 --> 00:31:31,370
this says hey if the cloud controller

00:31:28,220 --> 00:31:34,100
always knows what what the environments

00:31:31,370 --> 00:31:37,700
supposed to look like and if for some

00:31:34,100 --> 00:31:40,070
reason a service broker a rogue service

00:31:37,700 --> 00:31:43,370
broker is out there and it's not

00:31:40,070 --> 00:31:45,770
supposed to be anymore it's not showing

00:31:43,370 --> 00:31:48,260
up in the catalog but it's still out

00:31:45,770 --> 00:31:50,299
there imagine what would happen remember

00:31:48,260 --> 00:31:52,970
when it comes up it's gonna go and ask

00:31:50,299 --> 00:31:54,890
the service broker for I'm sorry the

00:31:52,970 --> 00:31:56,720
cloud controller for the catalog and do

00:31:54,890 --> 00:31:58,880
all of that stuff so you could end up

00:31:56,720 --> 00:32:00,860
with it bringing itself up again and

00:31:58,880 --> 00:32:02,570
there could be all sorts of confusion so

00:32:00,860 --> 00:32:04,880
there has to be an orphan management

00:32:02,570 --> 00:32:06,799
process and so in this particular case

00:32:04,880 --> 00:32:09,860
you need to implement inside of your

00:32:06,799 --> 00:32:12,529
service broker the cleanup the eventual

00:32:09,860 --> 00:32:14,210
consistency so I talked a little bit

00:32:12,529 --> 00:32:16,520
about this at the beginning with the

00:32:14,210 --> 00:32:17,840
service broker coming online but it's

00:32:16,520 --> 00:32:19,309
the same thing here if the service

00:32:17,840 --> 00:32:20,570
broker comes online but it's not

00:32:19,309 --> 00:32:22,460
supposed to anymore

00:32:20,570 --> 00:32:25,279
the first thing your service broker is

00:32:22,460 --> 00:32:27,649
going to do of course is authenticate to

00:32:25,279 --> 00:32:29,779
you a a that's the same as before this

00:32:27,649 --> 00:32:32,539
isn't necessarily a separate piece of

00:32:29,779 --> 00:32:33,830
code in your broker it's just a separate

00:32:32,539 --> 00:32:35,960
thing that you need to think about

00:32:33,830 --> 00:32:37,789
implementing you're gonna make that

00:32:35,960 --> 00:32:39,419
request to the cloud controller to get

00:32:37,789 --> 00:32:41,239
the catalog and

00:32:39,419 --> 00:32:44,129
you're gonna need to clean yourself up

00:32:41,239 --> 00:32:45,629
okay so there you might in fact want to

00:32:44,129 --> 00:32:51,419
clean things up in the database at the

00:32:45,629 --> 00:32:54,149
backend as well okay all right so that

00:32:51,419 --> 00:32:55,919
is the current API that's what you need

00:32:54,149 --> 00:33:01,139
to implement if you're doing services

00:32:55,919 --> 00:33:05,669
today now just to be confusing that's

00:33:01,139 --> 00:33:08,820
kind of cloud controller v2 services v1

00:33:05,669 --> 00:33:11,309
of services in cloud controller v2 or in

00:33:08,820 --> 00:33:14,309
Cloud Foundry v2 there is a new version

00:33:11,309 --> 00:33:16,259
we might call it v3 hopefully will will

00:33:14,309 --> 00:33:18,959
in some way make it clear but their

00:33:16,259 --> 00:33:19,379
evolution on this API that I just showed

00:33:18,959 --> 00:33:22,499
you

00:33:19,379 --> 00:33:24,419
is that you know if you remember I said

00:33:22,499 --> 00:33:29,759
sometimes it's a client sometimes it's

00:33:24,419 --> 00:33:32,369
server the next evolution it's only

00:33:29,759 --> 00:33:34,769
going to be unidirectional you are not

00:33:32,369 --> 00:33:36,539
going to have to act as a rest client

00:33:34,769 --> 00:33:38,940
and make calls to the cloud controller

00:33:36,539 --> 00:33:40,739
all of that goes away the cloud

00:33:38,940 --> 00:33:43,649
controller is taking on that burden

00:33:40,739 --> 00:33:46,229
itself so all you need to do is

00:33:43,649 --> 00:33:48,539
implement that bind and unbind and the

00:33:46,229 --> 00:33:49,820
provision in the unproven you don't need

00:33:48,539 --> 00:33:52,559
to worry about that you AAA

00:33:49,820 --> 00:33:55,229
authentication anymore you don't need to

00:33:52,559 --> 00:33:57,209
worry about doing the the orphan

00:33:55,229 --> 00:33:59,009
management all of that stuff is gonna be

00:33:57,209 --> 00:34:03,809
taken care of by the cloud controller

00:33:59,009 --> 00:34:07,799
yes Mike right yes no that is really

00:34:03,809 --> 00:34:11,099
really really good and so going on the

00:34:07,799 --> 00:34:12,869
bottom there but in order to be able to

00:34:11,099 --> 00:34:15,000
keep things eventually consistent the

00:34:12,869 --> 00:34:18,419
cloud controller is taking care of that

00:34:15,000 --> 00:34:20,639
now but we need to be able to allow the

00:34:18,419 --> 00:34:22,619
cloud controller to find out now from

00:34:20,639 --> 00:34:24,450
your service broker what's going on with

00:34:22,619 --> 00:34:26,849
the service broker so you have to

00:34:24,450 --> 00:34:28,470
replace all of that stuff that you were

00:34:26,849 --> 00:34:30,720
doing in the direction from the broker

00:34:28,470 --> 00:34:32,819
to the cloud controller you need to

00:34:30,720 --> 00:34:34,980
replace that with one more endpoint that

00:34:32,819 --> 00:34:37,980
basically says here's here's what I got

00:34:34,980 --> 00:34:40,980
so that the cloud controller can do all

00:34:37,980 --> 00:34:42,419
of the reconciliation ok and then you

00:34:40,980 --> 00:34:44,839
could remove the orphan management

00:34:42,419 --> 00:34:44,839
question

00:34:45,900 --> 00:34:57,690
I don't know I we can I'll take that

00:34:55,890 --> 00:35:01,140
offline and I can try to get you an

00:34:57,690 --> 00:35:03,270
answer absolutely there's another cool

00:35:01,140 --> 00:35:06,710
thing that's happening is I'm surprised

00:35:03,270 --> 00:35:08,730
that nobody said HTTP request/response

00:35:06,710 --> 00:35:09,990
we're in the world of distributed

00:35:08,730 --> 00:35:13,650
computing here we do things

00:35:09,990 --> 00:35:15,030
asynchronously those are blocking and we

00:35:13,650 --> 00:35:16,950
are moving toward an asynchronous

00:35:15,030 --> 00:35:19,590
synchronous provisioning model so you

00:35:16,950 --> 00:35:21,690
will be able to we're putting the wiring

00:35:19,590 --> 00:35:23,130
it in there we I'm currently working

00:35:21,690 --> 00:35:24,840
with a customer who's saying gosh I

00:35:23,130 --> 00:35:26,670
really need this now and our only

00:35:24,840 --> 00:35:29,160
solution is well make the time out

00:35:26,670 --> 00:35:30,960
really really really long but we were

00:35:29,160 --> 00:35:33,420
are working on the asynchronous nature

00:35:30,960 --> 00:35:35,670
of it so there will be a way for you to

00:35:33,420 --> 00:35:36,750
basically fire off and say hey provision

00:35:35,670 --> 00:35:39,060
this thing and let me know when you're

00:35:36,750 --> 00:35:40,770
done so that I can keep going on ok so

00:35:39,060 --> 00:35:51,930
we are gonna be adding some asynchronous

00:35:40,770 --> 00:35:53,880
stuff uh-huh so logically what's

00:35:51,930 --> 00:35:56,790
happening is it's just doing those HTTP

00:35:53,880 --> 00:35:58,200
requests it's entirely up to you what

00:35:56,790 --> 00:36:04,770
you want to do behind your service

00:35:58,200 --> 00:36:06,930
broker ah in the case of my sequel I'm

00:36:04,770 --> 00:36:08,220
gonna get to that and I'm gonna try to

00:36:06,930 --> 00:36:09,630
go through this very quickly because I'm

00:36:08,220 --> 00:36:11,580
already starting I'm very close to

00:36:09,630 --> 00:36:13,080
eating in the Scott's time here so I

00:36:11,580 --> 00:36:14,910
wanted to give you a little bit of

00:36:13,080 --> 00:36:17,400
insight so I did not pay him for this

00:36:14,910 --> 00:36:20,220
question but the next three slides are

00:36:17,400 --> 00:36:22,290
all about the some suggestions on what

00:36:20,220 --> 00:36:26,220
you might want to do in that it's up to

00:36:22,290 --> 00:36:28,590
you part now in version 1 of Cloud

00:36:26,220 --> 00:36:31,050
Foundry we built all of our services

00:36:28,590 --> 00:36:33,180
with this pattern you had what we were

00:36:31,050 --> 00:36:35,850
calling a gateway it's labeled here a

00:36:33,180 --> 00:36:37,950
broker when the request came from came

00:36:35,850 --> 00:36:40,860
to the broker what we did and there was

00:36:37,950 --> 00:36:43,830
usually only a single broker there what

00:36:40,860 --> 00:36:45,570
we did was the broker fired off a

00:36:43,830 --> 00:36:49,170
message and dropped it on our internal

00:36:45,570 --> 00:36:50,820
message bus that that message and notice

00:36:49,170 --> 00:36:53,310
by the way that all of the service

00:36:50,820 --> 00:36:55,680
instances are already started some the

00:36:53,310 --> 00:36:59,610
my sequel processes were already started

00:36:55,680 --> 00:37:01,200
and when one of those nodes and

00:36:59,610 --> 00:37:03,270
nodes are where all of the database

00:37:01,200 --> 00:37:05,730
instances are running one of those would

00:37:03,270 --> 00:37:08,220
pick up that request and it would go

00:37:05,730 --> 00:37:11,670
ahead and create a new database inside

00:37:08,220 --> 00:37:13,770
of the existing database so the database

00:37:11,670 --> 00:37:16,320
was already running but it did a sequel

00:37:13,770 --> 00:37:18,960
query to create a new database or a new

00:37:16,320 --> 00:37:21,660
database table inside of inside of that

00:37:18,960 --> 00:37:25,740
it responded back with those credentials

00:37:21,660 --> 00:37:27,540
and eventually went out okay and the way

00:37:25,740 --> 00:37:29,340
that we started up all those processes

00:37:27,540 --> 00:37:31,580
well that was part of Bosh and I won't

00:37:29,340 --> 00:37:35,760
talk about Bosh except for just a moment

00:37:31,580 --> 00:37:37,140
now we're moving this is to answer your

00:37:35,760 --> 00:37:39,450
question of what's happening with my

00:37:37,140 --> 00:37:42,420
sequel my sequel is moving in this

00:37:39,450 --> 00:37:44,340
direction same sort of pattern here the

00:37:42,420 --> 00:37:47,730
provisional request comes in we fire off

00:37:44,340 --> 00:37:50,400
something to Nats one of the nodes picks

00:37:47,730 --> 00:37:52,950
it up and what it does now is it is

00:37:50,400 --> 00:37:56,910
going to create a new my sequel process

00:37:52,950 --> 00:37:58,380
inside of a warden container so warden

00:37:56,910 --> 00:38:01,440
containers are not just for app

00:37:58,380 --> 00:38:04,410
isolation on the DEA you can use warden

00:38:01,440 --> 00:38:06,780
containers for service isolation on your

00:38:04,410 --> 00:38:08,250
service nodes as well and this is the

00:38:06,780 --> 00:38:11,550
pattern that we're following in the my

00:38:08,250 --> 00:38:13,470
sequel so when somebody asks for a new

00:38:11,550 --> 00:38:17,220
database we provision a me warden

00:38:13,470 --> 00:38:18,600
container put all the my sequel bits

00:38:17,220 --> 00:38:22,260
inside of that warden container and

00:38:18,600 --> 00:38:24,330
start a my sequel process on the bind we

00:38:22,260 --> 00:38:29,100
create a new database instance with new

00:38:24,330 --> 00:38:32,730
user credentials and send those back ok

00:38:29,100 --> 00:38:34,590
and so then we do the respond and then

00:38:32,730 --> 00:38:36,360
another pattern that you might want to

00:38:34,590 --> 00:38:38,400
do and I mentioned that Gary and his

00:38:36,360 --> 00:38:40,800
team had done some Cassandra work is

00:38:38,400 --> 00:38:43,320
check out this pattern we fire off a

00:38:40,800 --> 00:38:45,870
message to Nats and now what we want to

00:38:43,320 --> 00:38:47,580
do is stand up a cluster so a bunch of

00:38:45,870 --> 00:38:50,820
nodes pick up that message that's on

00:38:47,580 --> 00:38:52,230
Nats these are just suggestions okay you

00:38:50,820 --> 00:38:53,730
can do them this isn't the way that we

00:38:52,230 --> 00:38:56,010
implemented the Cassandra stuff but you

00:38:53,730 --> 00:38:58,820
could do this and now each one of those

00:38:56,010 --> 00:39:01,800
nodes is responsible for starting up

00:38:58,820 --> 00:39:04,470
individual nodes that are all forming

00:39:01,800 --> 00:39:07,350
forming a cluster so that's another

00:39:04,470 --> 00:39:10,680
option that you could do okay and then

00:39:07,350 --> 00:39:13,080
it responds and goes back I'm not going

00:39:10,680 --> 00:39:15,210
to go through the Boche stuff in detail

00:39:13,080 --> 00:39:16,530
because I'm out of time but notice at

00:39:15,210 --> 00:39:18,690
the bottom of the little comment that

00:39:16,530 --> 00:39:21,210
says you can use Bosch to configure in

00:39:18,690 --> 00:39:22,770
that shared secret thing and oh by the

00:39:21,210 --> 00:39:24,600
way if you remember the unidirectional

00:39:22,770 --> 00:39:29,760
thing that whole shared secret business

00:39:24,600 --> 00:39:32,880
is going away ok finally on to the third

00:39:29,760 --> 00:39:35,460
type of service what about so I've got

00:39:32,880 --> 00:39:38,070
my run dot pivotable io my mark

00:39:35,460 --> 00:39:40,110
Marketplace there I've got my service

00:39:38,070 --> 00:39:41,910
broker stuff that I'm building on the

00:39:40,110 --> 00:39:45,840
other side what about these guys in the

00:39:41,910 --> 00:39:47,340
middle there services that are there

00:39:45,840 --> 00:39:49,290
databases for example that are already

00:39:47,340 --> 00:39:51,210
stood up in your enterprise my ERP

00:39:49,290 --> 00:39:52,560
system my Oracle system I don't want to

00:39:51,210 --> 00:39:54,450
bring those into Cloud Foundry but I

00:39:52,560 --> 00:39:57,180
want my apps to be able to access those

00:39:54,450 --> 00:39:59,660
what do I do with those and that's what

00:39:57,180 --> 00:40:02,750
we're now calling user provided service

00:39:59,660 --> 00:40:06,690
instances and here's the way it works

00:40:02,750 --> 00:40:08,730
when the CLI comes in it makes it so

00:40:06,690 --> 00:40:13,200
when you want to make one of these

00:40:08,730 --> 00:40:15,150
services available to the user available

00:40:13,200 --> 00:40:18,870
to your Cloud Foundry users you make an

00:40:15,150 --> 00:40:21,000
a CLI request that basically puts the

00:40:18,870 --> 00:40:23,190
metadata in remember those credentials

00:40:21,000 --> 00:40:25,350
that are shown there you put the

00:40:23,190 --> 00:40:29,460
credentials into the Cloud Controller

00:40:25,350 --> 00:40:32,010
database yourself and that's it that's

00:40:29,460 --> 00:40:35,370
all you do you put those credentials in

00:40:32,010 --> 00:40:37,410
there now when somebody does it bind or

00:40:35,370 --> 00:40:39,720
an unbind they're not doing a provision

00:40:37,410 --> 00:40:42,120
or unproven only bind or unbind ur

00:40:39,720 --> 00:40:44,730
supported here you do a binder unbind

00:40:42,120 --> 00:40:47,100
you're going to access those credentials

00:40:44,730 --> 00:40:48,870
and those become part of the droplet

00:40:47,100 --> 00:40:52,170
that's deployed so that when your

00:40:48,870 --> 00:40:55,110
browser accesses it goes to the droplet

00:40:52,170 --> 00:40:56,880
and connects to the databases here ok I

00:40:55,110 --> 00:40:58,800
have a live demo where I can show you

00:40:56,880 --> 00:41:01,550
actually doing this I'm not gonna do it

00:40:58,800 --> 00:41:05,640
now because I am completely out of time

00:41:01,550 --> 00:41:07,140
and this is what I told you so that's it

00:41:05,640 --> 00:41:08,610
on services I don't want to take any

00:41:07,140 --> 00:41:10,080
more time so let's hold any other

00:41:08,610 --> 00:41:11,880
questions that you have on services for

00:41:10,080 --> 00:41:13,560
the end I'll stick around as long as you

00:41:11,880 --> 00:41:14,910
guys want and I'll show you demos if you

00:41:13,560 --> 00:41:17,510
want at the end of the session but I

00:41:14,910 --> 00:41:20,070
want to hand it over to Scott now ok

00:41:17,510 --> 00:41:22,230
sorry Scott please forgive me oh you're

00:41:20,070 --> 00:41:23,670
right on time ok we're into my clock in

00:41:22,230 --> 00:41:25,650
fact I think you gave me an extra three

00:41:23,670 --> 00:41:27,810
minutes so excellent

00:41:25,650 --> 00:41:30,000
so get his place right do the demo yeah

00:41:27,810 --> 00:41:31,320
I want to do the demo for life I only

00:41:30,000 --> 00:41:33,900
had three I bet I still have three

00:41:31,320 --> 00:41:36,960
minutes four I'll do the demo then okay

00:41:33,900 --> 00:41:40,350
let me come back over here and go into a

00:41:36,960 --> 00:41:43,440
different window and I'm gonna change my

00:41:40,350 --> 00:41:46,560
target over to a local instance that I

00:41:43,440 --> 00:41:48,750
have running okay so here's my local

00:41:46,560 --> 00:41:53,880
instance that I have running care of the

00:41:48,750 --> 00:41:56,460
CF Nisei installer and that's because I

00:41:53,880 --> 00:41:58,800
have a service that I have deployed on

00:41:56,460 --> 00:42:01,500
this machine so I have a Cloud Foundry

00:41:58,800 --> 00:42:03,930
instance running I also have a gem fire

00:42:01,500 --> 00:42:07,890
instance running so any who's familiar

00:42:03,930 --> 00:42:11,040
with gem fire okay it's great super in

00:42:07,890 --> 00:42:12,900
memory database clustered so that last

00:42:11,040 --> 00:42:14,370
picture that I showed you lots and lots

00:42:12,900 --> 00:42:16,530
of nodes out there of course I'm running

00:42:14,370 --> 00:42:17,970
all of the nodes on my one machine but

00:42:16,530 --> 00:42:20,310
that that doesn't matter in this

00:42:17,970 --> 00:42:22,620
particular case so I'm running and

00:42:20,310 --> 00:42:25,110
that's running externally so that's not

00:42:22,620 --> 00:42:27,150
a service that's in Cloud Foundry so

00:42:25,110 --> 00:42:28,980
what I need to do if you remember is

00:42:27,150 --> 00:42:33,720
that I need to provide those credentials

00:42:28,980 --> 00:42:36,270
in so I'm gonna do a CF create service

00:42:33,720 --> 00:42:38,880
so this is where I'm providing that

00:42:36,270 --> 00:42:39,990
metadata those credentials and they're

00:42:38,880 --> 00:42:42,900
gonna be written into the cloud

00:42:39,990 --> 00:42:45,990
controller database so i'm gonna do a CF

00:42:42,900 --> 00:42:46,710
create service and i think if i remember

00:42:45,990 --> 00:42:50,010
correctly

00:42:46,710 --> 00:42:53,130
yep no other arguments at this point so

00:42:50,010 --> 00:42:55,110
user provided service okay user provided

00:42:53,130 --> 00:43:00,540
service instance and i'm gonna call it

00:42:55,110 --> 00:43:02,880
gem fire okay now it's asking me okay

00:43:00,540 --> 00:43:05,010
what metadata do you are you gonna need

00:43:02,880 --> 00:43:08,060
to provide it doesn't assume these are

00:43:05,010 --> 00:43:11,220
just suggestions eg hostname port

00:43:08,060 --> 00:43:13,140
password and I am going to make sure

00:43:11,220 --> 00:43:15,210
that I don't completely screw up I'm

00:43:13,140 --> 00:43:16,970
gonna look at my code to see because I

00:43:15,210 --> 00:43:22,950
did this earlier and I used the wrong

00:43:16,970 --> 00:43:24,840
field name it is called where is it

00:43:22,950 --> 00:43:28,350
notice that I'm going down into my V cap

00:43:24,840 --> 00:43:31,380
services here locator IP in port okay a

00:43:28,350 --> 00:43:36,420
locator is something in gem fire so

00:43:31,380 --> 00:43:38,550
locator IP and port and then I need to

00:43:36,420 --> 00:43:39,060
provide the values for those so it's

00:43:38,550 --> 00:43:40,920
asking me

00:43:39,060 --> 00:44:01,490
first four schema and then four values

00:43:40,920 --> 00:44:05,130
so 172.16.0.0 one and i hit return and

00:44:01,490 --> 00:44:08,670
it failed oh because it already because

00:44:05,130 --> 00:44:11,310
i forgot to delete one so i already did

00:44:08,670 --> 00:44:13,110
this earlier and I forgot to clear it so

00:44:11,310 --> 00:44:16,320
it's complaining that that gem fire

00:44:13,110 --> 00:44:17,820
already exists so this is the output but

00:44:16,320 --> 00:44:18,990
it's actually exists with the wrong

00:44:17,820 --> 00:44:23,460
things so I'm gonna give it a different

00:44:18,990 --> 00:44:33,270
name user provided I'll do gf this time

00:44:23,460 --> 00:44:38,790
and locator IP import again and the IP

00:44:33,270 --> 00:44:41,010
address sometimes I think I do type

00:44:38,790 --> 00:44:44,100
faster than I can cut and paste by five

00:44:41,010 --> 00:44:46,950
two to one this time it should work G

00:44:44,100 --> 00:44:48,600
yep great and now when I do a push of an

00:44:46,950 --> 00:44:54,140
app and you can see here that I have a

00:44:48,600 --> 00:44:54,140
gem fire client app and I do a CF push

00:44:54,620 --> 00:45:00,750
it's gonna ask me for the name of that

00:44:57,030 --> 00:45:03,120
so I'll call it gem fire client I'm

00:45:00,750 --> 00:45:05,460
gonna have one instance the default

00:45:03,120 --> 00:45:08,970
memory is fine I'm gonna use that as the

00:45:05,460 --> 00:45:10,830
name that's my domain now the important

00:45:08,970 --> 00:45:14,340
thing is do I want to create services

00:45:10,830 --> 00:45:16,650
for this application yes or no no I'm

00:45:14,340 --> 00:45:17,880
only binding an existing one next

00:45:16,650 --> 00:45:21,870
question is do you want to bind other

00:45:17,880 --> 00:45:23,550
ones the answer is yes and there is the

00:45:21,870 --> 00:45:25,110
the gem fire one was the which was the

00:45:23,550 --> 00:45:28,860
original old one where I used the wrong

00:45:25,110 --> 00:45:32,880
schema I select to find another service

00:45:28,860 --> 00:45:35,040
no save the configuration and that's and

00:45:32,880 --> 00:45:36,990
that's it deploying and I could show you

00:45:35,040 --> 00:45:39,030
the app and you would know very clearly

00:45:36,990 --> 00:45:41,280
that pivotal does not pay me to be a web

00:45:39,030 --> 00:45:42,990
developer it's really horribly ugly so I

00:45:41,280 --> 00:45:44,460
will spare you those details if you want

00:45:42,990 --> 00:45:45,930
to if you don't believe me and you want

00:45:44,460 --> 00:45:48,000
to see it running afterward please come

00:45:45,930 --> 00:45:50,130
out afterward now I'm two minutes over

00:45:48,000 --> 00:45:53,540
so that's a good strategy because I got

00:45:50,130 --> 00:45:53,540
called out for being a bad web does

00:45:59,430 --> 00:46:09,040
kino okay thanks everybody for sticking

00:46:07,420 --> 00:46:11,200
it in today I think most of you have

00:46:09,040 --> 00:46:12,520
been in this room all day long which is

00:46:11,200 --> 00:46:14,079
a good thing I was kind of counting on

00:46:12,520 --> 00:46:15,940
that because I didn't want to give too

00:46:14,079 --> 00:46:18,460
much Cloud Foundry overview in my part

00:46:15,940 --> 00:46:20,260
of the presentation so we're gonna use a

00:46:18,460 --> 00:46:22,780
lot of terminology that you've heard a

00:46:20,260 --> 00:46:24,280
lot of times already today the goal of

00:46:22,780 --> 00:46:26,799
this part of the talk is just to take it

00:46:24,280 --> 00:46:29,020
a level deeper and get deeper into how

00:46:26,799 --> 00:46:31,930
DEA staging works and what build packs

00:46:29,020 --> 00:46:33,250
it do exactly so to start with we're

00:46:31,930 --> 00:46:34,839
gonna spend a few minutes on this slide

00:46:33,250 --> 00:46:36,400
just to talk about what happens when you

00:46:34,839 --> 00:46:39,790
do this CF push that you've seen

00:46:36,400 --> 00:46:43,180
probably 50 times already today the CF

00:46:39,790 --> 00:46:44,559
command line or any other tool that

00:46:43,180 --> 00:46:45,970
you're using to push applications to

00:46:44,559 --> 00:46:47,710
cloud foundry they all do the same thing

00:46:45,970 --> 00:46:49,299
we have a Java wrapper library that you

00:46:47,710 --> 00:46:51,160
can write your own Java code to push

00:46:49,299 --> 00:46:52,510
apps to Cloud Foundry it would do

00:46:51,160 --> 00:46:54,250
exactly the same thing

00:46:52,510 --> 00:46:56,290
there's actually three steps that happen

00:46:54,250 --> 00:46:57,819
when you say I want to push an app the

00:46:56,290 --> 00:46:59,410
first thing we do is create a bunch of

00:46:57,819 --> 00:47:01,210
metadata for the app the name the number

00:46:59,410 --> 00:47:02,980
of instances the amount of memory any

00:47:01,210 --> 00:47:04,930
environment variables you want to add to

00:47:02,980 --> 00:47:06,400
the app the names of all the services

00:47:04,930 --> 00:47:08,440
you want to buy and all that is just a

00:47:06,400 --> 00:47:09,700
data structure that gets pushed up to

00:47:08,440 --> 00:47:11,559
cloud controller and then Cloud

00:47:09,700 --> 00:47:14,079
Controller stoller stores all of that in

00:47:11,559 --> 00:47:15,910
its database and then the second step is

00:47:14,079 --> 00:47:18,000
to actually take the application files

00:47:15,910 --> 00:47:20,410
and upload those into Cloud Controller

00:47:18,000 --> 00:47:23,109
cloud controller then takes those files

00:47:20,410 --> 00:47:25,589
and stores them into the blob store just

00:47:23,109 --> 00:47:28,240
as a raw set of application bits and

00:47:25,589 --> 00:47:30,670
then we get to this step number six of

00:47:28,240 --> 00:47:33,069
start the application and that next

00:47:30,670 --> 00:47:34,809
arrow says stage the app and that arrow

00:47:33,069 --> 00:47:36,010
looks like it's the same size as all the

00:47:34,809 --> 00:47:38,200
rest of them but that's where all the

00:47:36,010 --> 00:47:40,240
action is in that line that says stage

00:47:38,200 --> 00:47:41,799
of the app and the rest of this talk is

00:47:40,240 --> 00:47:44,980
going to be going into basically what

00:47:41,799 --> 00:47:47,319
happens on line 7 there but the DEA is

00:47:44,980 --> 00:47:49,930
staging process kicks in and once that

00:47:47,319 --> 00:47:51,670
DEA staging process has done which what

00:47:49,930 --> 00:47:53,589
we're going to talk about then it takes

00:47:51,670 --> 00:47:55,990
this thing called the droplet and stores

00:47:53,589 --> 00:47:57,609
that into the blob store and then every

00:47:55,990 --> 00:47:59,950
other instance of that application that

00:47:57,609 --> 00:48:02,140
started is just taking that droplet out

00:47:59,950 --> 00:48:03,819
of the blob store dropping in and into

00:48:02,140 --> 00:48:04,910
new word and container and starting it

00:48:03,819 --> 00:48:06,950
up

00:48:04,910 --> 00:48:09,019
so now we'll get into everything that

00:48:06,950 --> 00:48:11,450
happens in that number seven stage di

00:48:09,019 --> 00:48:13,849
pero so this term droplet you've heard

00:48:11,450 --> 00:48:16,789
many many times today let's define that

00:48:13,849 --> 00:48:19,369
a little bit more clearly now when an

00:48:16,789 --> 00:48:21,349
application gets started staging the

00:48:19,369 --> 00:48:23,779
first thing DEA does is create a warden

00:48:21,349 --> 00:48:25,339
container that warden container has an

00:48:23,779 --> 00:48:28,160
operating system sitting in it and

00:48:25,339 --> 00:48:29,779
that's it it's just a bear operating

00:48:28,160 --> 00:48:31,009
system it does have Ruby on it and we'll

00:48:29,779 --> 00:48:34,099
talk about why that's important in a

00:48:31,009 --> 00:48:35,809
minute but it's got no java runtime

00:48:34,099 --> 00:48:37,279
environment it's got no Python

00:48:35,809 --> 00:48:39,140
interpreter it's got none of that kind

00:48:37,279 --> 00:48:42,440
of stuff that your app might need it's

00:48:39,140 --> 00:48:44,440
just a bear operating system and then it

00:48:42,440 --> 00:48:47,390
puts the application bits on to that

00:48:44,440 --> 00:48:49,999
Whorton container then it's up to a

00:48:47,390 --> 00:48:51,499
build pack to decide what else needs to

00:48:49,999 --> 00:48:53,779
be in that warden container for an

00:48:51,499 --> 00:48:56,420
application to run if it's a job app

00:48:53,779 --> 00:48:58,670
you're pushing you need a JDK or a JRE

00:48:56,420 --> 00:49:00,019
if it's a ruby app you're pushing you

00:48:58,670 --> 00:49:01,789
need a ruby interpreter if it's a

00:49:00,019 --> 00:49:04,670
JavaScript app you're pushing you need a

00:49:01,789 --> 00:49:05,930
node.js runtime Python needs a Python

00:49:04,670 --> 00:49:09,170
interpreter that's what we mean by

00:49:05,930 --> 00:49:10,700
runtime in this case is whatever it

00:49:09,170 --> 00:49:12,950
takes to actually run your application

00:49:10,700 --> 00:49:15,200
you may also need a container if you're

00:49:12,950 --> 00:49:17,839
pushing a war file you need a servlet

00:49:15,200 --> 00:49:20,210
container like Tomcat if you're pushing

00:49:17,839 --> 00:49:22,640
an OSGi bundle you're going to need an

00:49:20,210 --> 00:49:24,230
OSGi container so not everything needs a

00:49:22,640 --> 00:49:25,549
container but most of the types of apps

00:49:24,230 --> 00:49:27,470
that you push are gonna need some

00:49:25,549 --> 00:49:29,119
container to run in and then you have

00:49:27,470 --> 00:49:31,249
libraries that may be a part of your

00:49:29,119 --> 00:49:33,950
application as well if you're pushing a

00:49:31,249 --> 00:49:35,660
java war file then you know that the war

00:49:33,950 --> 00:49:37,489
file that you push already has all the

00:49:35,660 --> 00:49:39,859
jars that you need already bundled up

00:49:37,489 --> 00:49:41,869
into that so in the case of Java the

00:49:39,859 --> 00:49:44,480
build pack doesn't typically need to add

00:49:41,869 --> 00:49:46,910
libraries to the droplet but if you're

00:49:44,480 --> 00:49:48,680
doing Ruby the way it works in Ruby is

00:49:46,910 --> 00:49:50,569
you have a file that describes all of

00:49:48,680 --> 00:49:52,249
your libraries you depend on so it's the

00:49:50,569 --> 00:49:53,839
build packs responsibility to go fetch

00:49:52,249 --> 00:49:56,720
those from Ruby gems and put them on

00:49:53,839 --> 00:49:58,700
there no it has a no packaging manager

00:49:56,720 --> 00:50:00,859
or it describes the dependencies for a

00:49:58,700 --> 00:50:02,930
node app the build pack can also go get

00:50:00,859 --> 00:50:05,650
those no dependencies out of no package

00:50:02,930 --> 00:50:08,029
managers repository and pull them down

00:50:05,650 --> 00:50:09,859
so all of that is happening inside of

00:50:08,029 --> 00:50:11,779
this worgen container the build pack

00:50:09,859 --> 00:50:14,329
downloads and adds all these files to

00:50:11,779 --> 00:50:15,260
the organ container and once that's all

00:50:14,329 --> 00:50:17,900
done

00:50:15,260 --> 00:50:20,299
the DEA takes this directory that all

00:50:17,900 --> 00:50:22,210
that was put in and bundles that up and

00:50:20,299 --> 00:50:24,410
calls out a droplet and stores it away

00:50:22,210 --> 00:50:26,119
every other time the application has

00:50:24,410 --> 00:50:27,829
started it's taking that droplet

00:50:26,119 --> 00:50:29,839
creating a brand new word and container

00:50:27,829 --> 00:50:35,329
putting all that back in the container

00:50:29,839 --> 00:50:38,089
and then starting it up this build

00:50:35,329 --> 00:50:40,730
packed concept we knew that we needed a

00:50:38,089 --> 00:50:43,280
way to provide extensibility of how apps

00:50:40,730 --> 00:50:44,450
are run and we started looking around to

00:50:43,280 --> 00:50:46,970
see what was already out there and

00:50:44,450 --> 00:50:49,400
Heroku had invented this concept of

00:50:46,970 --> 00:50:51,170
build packs and it works really really

00:50:49,400 --> 00:50:52,730
nicely there was really no reason for us

00:50:51,170 --> 00:50:54,829
to go off and invent something else so

00:50:52,730 --> 00:50:57,190
we took this design that Heroku had done

00:50:54,829 --> 00:51:00,829
and adopted it inside of cloud foundry

00:50:57,190 --> 00:51:02,210
so we say that cloud foundry and Heroku

00:51:00,829 --> 00:51:03,680
build packs are compatible it is

00:51:02,210 --> 00:51:05,599
possible to take and build pack that was

00:51:03,680 --> 00:51:07,760
built for Heroku and run it on foundry

00:51:05,599 --> 00:51:09,740
it's also possible for people to write

00:51:07,760 --> 00:51:11,720
build packs on Heroku that don't work on

00:51:09,740 --> 00:51:13,339
Cloud Foundry so if you're writing a

00:51:11,720 --> 00:51:16,040
build pack and you want it to be

00:51:13,339 --> 00:51:17,930
compatible with different platforms as a

00:51:16,040 --> 00:51:19,760
service you need to make sure that

00:51:17,930 --> 00:51:22,069
you're doing things that aren't real

00:51:19,760 --> 00:51:23,540
crazy in there and that you're testing

00:51:22,069 --> 00:51:25,400
it out all those because you can do

00:51:23,540 --> 00:51:26,540
things that make them incompatible but

00:51:25,400 --> 00:51:29,329
it isn't very hard to make them

00:51:26,540 --> 00:51:31,309
compatible as well so cloud foundry and

00:51:29,329 --> 00:51:33,410
Heroku both shared this Bill pack design

00:51:31,309 --> 00:51:36,140
now we think that's going to be an

00:51:33,410 --> 00:51:38,059
emerging convention that other past

00:51:36,140 --> 00:51:40,280
providers will also adopt because it is

00:51:38,059 --> 00:51:45,740
just so flexible and it's very easy to

00:51:40,280 --> 00:51:48,319
use so we also in cloud foundry there's

00:51:45,740 --> 00:51:51,079
this concept of built in build packs or

00:51:48,319 --> 00:51:52,790
bringing your own build pack so if you

00:51:51,079 --> 00:51:56,540
just do the CF push without providing

00:51:52,790 --> 00:51:58,099
any other options there's gonna be a set

00:51:56,540 --> 00:51:59,900
of build packs that Cloud Foundry knows

00:51:58,099 --> 00:52:01,490
about and it's going to test your

00:51:59,900 --> 00:52:03,920
application bits about each of those

00:52:01,490 --> 00:52:05,750
build packs that it knows about and if

00:52:03,920 --> 00:52:07,609
one of them says yes I know what this

00:52:05,750 --> 00:52:09,220
application is and that build pack gets

00:52:07,609 --> 00:52:12,079
to take over and do the rest of the work

00:52:09,220 --> 00:52:13,579
if no build packs say I know what this

00:52:12,079 --> 00:52:16,730
application is then you get an error

00:52:13,579 --> 00:52:17,990
from the CF push that says we don't know

00:52:16,730 --> 00:52:20,660
what you're trying to do here with this

00:52:17,990 --> 00:52:23,150
application then you have this ability

00:52:20,660 --> 00:52:24,890
to specify a build pack URL when you

00:52:23,150 --> 00:52:26,359
push an application for your telling

00:52:24,890 --> 00:52:27,279
Cloud Foundry I want you to use this

00:52:26,359 --> 00:52:30,039
build pack

00:52:27,279 --> 00:52:32,109
it has to be a get URL and then what the

00:52:30,039 --> 00:52:35,319
DEA does is it goes and clones that

00:52:32,109 --> 00:52:38,319
build pack into the DEA and then

00:52:35,319 --> 00:52:40,390
launches it all of the build packs that

00:52:38,319 --> 00:52:42,219
we've seen so far are all on github but

00:52:40,390 --> 00:52:43,989
that's not a cloud 400 requirement it

00:52:42,219 --> 00:52:45,489
just needs to be a git URL they could be

00:52:43,989 --> 00:52:48,729
on bitbucket they could be in google

00:52:45,489 --> 00:52:51,219
code they could be anywhere that hosts a

00:52:48,729 --> 00:52:55,029
git repository if you're running a

00:52:51,219 --> 00:52:56,589
public cloud like pivotal hosted CF then

00:52:55,029 --> 00:52:59,769
those bits need to be up on some

00:52:56,589 --> 00:53:01,390
publicly hosted github repository if

00:52:59,769 --> 00:53:03,130
you're deploying Cloud Foundry

00:53:01,390 --> 00:53:04,509
internally in your own enterprise you

00:53:03,130 --> 00:53:07,659
could write build packs and storing them

00:53:04,509 --> 00:53:09,369
in and internal get repository as long

00:53:07,659 --> 00:53:14,199
as it's visible to the network the DEA

00:53:09,369 --> 00:53:16,059
is running on what does it mean for a

00:53:14,199 --> 00:53:18,519
build pack to be built into Cloud

00:53:16,059 --> 00:53:20,469
Foundry it really doesn't mean very much

00:53:18,519 --> 00:53:22,239
if you look on github at the DEA source

00:53:20,469 --> 00:53:24,669
code you'll see this directory here

00:53:22,239 --> 00:53:26,949
called build pack slice vendor and

00:53:24,669 --> 00:53:29,259
you'll see that there's three things in

00:53:26,949 --> 00:53:32,380
that directory called Java nodejs and

00:53:29,259 --> 00:53:33,489
Ruby those are get sub modules which if

00:53:32,380 --> 00:53:35,019
you're not familiar with git it's

00:53:33,489 --> 00:53:37,419
basically gets implementation of

00:53:35,019 --> 00:53:39,309
symbolic links so each of these

00:53:37,419 --> 00:53:41,289
directories in build packs of endor is a

00:53:39,309 --> 00:53:43,869
symbolic link to another github

00:53:41,289 --> 00:53:46,239
repository somewhere so you can see

00:53:43,869 --> 00:53:48,429
where these three link to in the case of

00:53:46,239 --> 00:53:50,949
Java we have a repository called Java

00:53:48,429 --> 00:53:52,989
build pack that is a from scratch

00:53:50,949 --> 00:53:56,169
build pack just for Cloud Foundry and

00:53:52,989 --> 00:54:00,189
then the nodejs and the Ruby build packs

00:53:56,169 --> 00:54:01,329
our forks of Heroku build packs so if

00:54:00,189 --> 00:54:03,640
you're deploying your own Cloud Foundry

00:54:01,329 --> 00:54:06,219
and you want other build packs to be

00:54:03,640 --> 00:54:08,619
built in all you would do is fork the da

00:54:06,219 --> 00:54:10,329
repository add additional sub modules

00:54:08,619 --> 00:54:13,449
delete these if that's what you want to

00:54:10,329 --> 00:54:16,599
do and that's what decides which build

00:54:13,449 --> 00:54:18,969
packs are built in this is the state of

00:54:16,599 --> 00:54:20,699
the world today for build packs there

00:54:18,969 --> 00:54:23,709
are some efforts underway right now to

00:54:20,699 --> 00:54:25,659
enhance this some more so that you could

00:54:23,709 --> 00:54:27,789
have a concept of uploading a build pack

00:54:25,659 --> 00:54:29,949
into a running Cloud Foundry instance as

00:54:27,789 --> 00:54:31,630
a as an additional mechanism to adding

00:54:29,949 --> 00:54:34,359
more symbolic links to this directory

00:54:31,630 --> 00:54:37,269
you would be able to provide a git URL

00:54:34,359 --> 00:54:38,589
and say I want this now to be a built in

00:54:37,269 --> 00:54:39,969
build pack in this

00:54:38,589 --> 00:54:41,950
Foundry environment you can't do that

00:54:39,969 --> 00:54:44,019
today but probably in a couple of months

00:54:41,950 --> 00:54:45,430
we'll have something like that that

00:54:44,019 --> 00:54:46,809
you'll be able to do that's not actually

00:54:45,430 --> 00:54:48,249
being driven by pivotal that's being

00:54:46,809 --> 00:54:50,289
driven by other people in the community

00:54:48,249 --> 00:54:50,769
like IBM that have a strong interest in

00:54:50,289 --> 00:54:52,390
doing that

00:54:50,769 --> 00:54:54,640
so I think this is going to be a real

00:54:52,390 --> 00:54:59,859
good example of some community driven

00:54:54,640 --> 00:55:01,539
features that end up in Cloud Foundry so

00:54:59,859 --> 00:55:04,319
aside from those three built-in build

00:55:01,539 --> 00:55:06,460
packs that are in the open source code

00:55:04,319 --> 00:55:08,979
there are a number of them that people

00:55:06,460 --> 00:55:11,349
have either built from scratch or test

00:55:08,979 --> 00:55:13,809
it on Cloud Foundry in this URL that you

00:55:11,349 --> 00:55:16,029
see at the top is a little wiki page on

00:55:13,809 --> 00:55:18,039
github that's just a community driven

00:55:16,029 --> 00:55:20,079
list of things people have tested and

00:55:18,039 --> 00:55:21,759
that they know work these aren't tested

00:55:20,079 --> 00:55:23,410
by pivotal necessarily we don't

00:55:21,759 --> 00:55:24,849
guarantee that these work we don't have

00:55:23,410 --> 00:55:26,440
any automated tests that make sure they

00:55:24,849 --> 00:55:28,869
continue to work so it is possible for

00:55:26,440 --> 00:55:31,779
these to be broken this Python build

00:55:28,869 --> 00:55:34,059
pack is one that people had used the

00:55:31,779 --> 00:55:35,349
default Heroku one on Cloud Foundry and

00:55:34,059 --> 00:55:37,089
it worked fine so it got added to this

00:55:35,349 --> 00:55:39,309
list and then somebody changed that hope

00:55:37,089 --> 00:55:42,279
that Heroku Python build pack and it

00:55:39,309 --> 00:55:45,219
broke so that sort of thing can't happen

00:55:42,279 --> 00:55:47,319
with these but we do have this community

00:55:45,219 --> 00:55:49,569
driven list of things that people have

00:55:47,319 --> 00:55:53,140
tested and that we have some somebody

00:55:49,569 --> 00:55:55,210
saying that it worked at one point since

00:55:53,140 --> 00:55:58,479
I made this slide on Sunday IBM

00:55:55,210 --> 00:56:01,180
announced their WebSphere Liberty

00:55:58,479 --> 00:56:03,190
profile build pack that would be in this

00:56:01,180 --> 00:56:05,019
left-hand column as well as yet another

00:56:03,190 --> 00:56:09,099
community contributed build pack that

00:56:05,019 --> 00:56:11,109
you can use excuse me

00:56:09,099 --> 00:56:13,989
so what does a build pack actually look

00:56:11,109 --> 00:56:16,960
like there is a very very small

00:56:13,989 --> 00:56:18,670
footprint API for a build pack and it

00:56:16,960 --> 00:56:20,650
consists of three scripts these scripts

00:56:18,670 --> 00:56:23,079
can be written in either bash shell or

00:56:20,650 --> 00:56:24,309
more commonly in Ruby if you look to

00:56:23,079 --> 00:56:26,499
some of those build packs on the last

00:56:24,309 --> 00:56:29,079
slide some of those would be written in

00:56:26,499 --> 00:56:31,960
pure bash shell script and they tend to

00:56:29,079 --> 00:56:34,089
be pretty small any build pack that's

00:56:31,960 --> 00:56:36,130
more elaborate tends to bring in Ruby

00:56:34,089 --> 00:56:38,219
code because it ends on making the code

00:56:36,130 --> 00:56:41,019
much smaller and much easier to maintain

00:56:38,219 --> 00:56:42,369
so each of these three scripts when they

00:56:41,019 --> 00:56:44,079
get called at the right time they will

00:56:42,369 --> 00:56:46,299
be passed this application directory

00:56:44,079 --> 00:56:48,309
which is the place where the DEA is

00:56:46,299 --> 00:56:49,090
downloaded the bits for your application

00:56:48,309 --> 00:56:51,520
into this org

00:56:49,090 --> 00:56:53,110
container so anything else you want to

00:56:51,520 --> 00:56:54,580
do inside the worden container that's

00:56:53,110 --> 00:56:58,450
the directory that you would do those

00:56:54,580 --> 00:57:00,160
things in the compiled script in

00:56:58,450 --> 00:57:01,690
addition gets a cache directory which

00:57:00,160 --> 00:57:03,730
we'll talk about what that actually is

00:57:01,690 --> 00:57:05,580
it's just a way for you to save some

00:57:03,730 --> 00:57:07,930
download time

00:57:05,580 --> 00:57:10,000
so let's we're now going to go into each

00:57:07,930 --> 00:57:13,420
one of these scripts in detail and tell

00:57:10,000 --> 00:57:17,650
you exactly what they do if my voice

00:57:13,420 --> 00:57:19,840
holds up thank you

00:57:17,650 --> 00:57:22,420
so the bin detect script its job is to

00:57:19,840 --> 00:57:26,860
look at the application bits and decide

00:57:22,420 --> 00:57:28,720
if it knows what this application is so

00:57:26,860 --> 00:57:30,700
examples are these aren't necessarily

00:57:28,720 --> 00:57:32,290
exactly the code that's in each of these

00:57:30,700 --> 00:57:33,550
build packs these are just examples of

00:57:32,290 --> 00:57:35,860
the sorts of things that a build pack

00:57:33,550 --> 00:57:37,480
can do so if a ruby application are made

00:57:35,860 --> 00:57:41,170
just look and see if there's a gem file

00:57:37,480 --> 00:57:44,230
as a part of the bundled bits for nodejs

00:57:41,170 --> 00:57:45,880
app you need a package.json file so that

00:57:44,230 --> 00:57:47,440
you can see what the dependencies are

00:57:45,880 --> 00:57:49,960
the application are so a build pack can

00:57:47,440 --> 00:57:51,190
see if there's a package.json file then

00:57:49,960 --> 00:57:53,650
it's got to be a node app it really

00:57:51,190 --> 00:57:55,180
couldn't be anything else I don't have

00:57:53,650 --> 00:57:56,970
Java on this list because we're gonna go

00:57:55,180 --> 00:58:02,260
into a lot more detail on exactly what

00:57:56,970 --> 00:58:06,400
is detected in a java application thank

00:58:02,260 --> 00:58:09,340
you so what this script is needs to do

00:58:06,400 --> 00:58:10,990
to match this API is if it detects the

00:58:09,340 --> 00:58:12,700
right files in there and says that it

00:58:10,990 --> 00:58:14,860
knows how to handle this application it

00:58:12,700 --> 00:58:16,180
should return in exit code zero it

00:58:14,860 --> 00:58:18,310
should also write to standard out a

00:58:16,180 --> 00:58:20,050
string that is really completely

00:58:18,310 --> 00:58:22,570
arbitrary that somehow describes what

00:58:20,050 --> 00:58:24,640
that build pack is so for the Ruby build

00:58:22,570 --> 00:58:26,530
pack it merely writes out the word Ruby

00:58:24,640 --> 00:58:28,870
for note I believe it does the same

00:58:26,530 --> 00:58:30,310
thing for the Java build pack it writes

00:58:28,870 --> 00:58:32,650
out a lot more information that you

00:58:30,310 --> 00:58:34,840
could look at and use but it's really at

00:58:32,650 --> 00:58:36,220
this point only service to be human

00:58:34,840 --> 00:58:38,050
readable it doesn't really give you

00:58:36,220 --> 00:58:39,220
enough information for most build packs

00:58:38,050 --> 00:58:42,310
to be able to do anything with it

00:58:39,220 --> 00:58:44,110
programmatically so your turn exit exit

00:58:42,310 --> 00:58:45,640
code 0 from your detect script if you

00:58:44,110 --> 00:58:50,050
know how to handle the application if

00:58:45,640 --> 00:58:52,000
you don't you return exit code 1 so what

00:58:50,050 --> 00:58:53,680
the DA does this is back to built in

00:58:52,000 --> 00:58:56,770
build packs versus pushing your own

00:58:53,680 --> 00:58:59,050
build pack what the DA does is it

00:58:56,770 --> 00:59:00,730
iterates over the list of the build

00:58:59,050 --> 00:59:02,580
packs it knows about and calls these

00:59:00,730 --> 00:59:05,040
detects scripts one by one and

00:59:02,580 --> 00:59:06,480
one of them returns at exit code zero

00:59:05,040 --> 00:59:09,420
the first one to return index killed

00:59:06,480 --> 00:59:12,590
zero wins and it's now the bill pack

00:59:09,420 --> 00:59:12,590
that's in effect for this application

00:59:12,800 --> 00:59:18,180
right now if you push with the build

00:59:15,840 --> 00:59:19,590
pack option DEA doesn't bother calling

00:59:18,180 --> 00:59:22,380
that detects script because you've told

00:59:19,590 --> 00:59:23,760
it I want to use this build pack I could

00:59:22,380 --> 00:59:26,190
change in the future because there are

00:59:23,760 --> 00:59:28,590
some cases where it would be nice to get

00:59:26,190 --> 00:59:30,420
that string back that been detect will

00:59:28,590 --> 00:59:33,210
write out and be able to see what

00:59:30,420 --> 00:59:35,130
happened there so that may change in the

00:59:33,210 --> 00:59:38,880
future that DEA may decide to call the

00:59:35,130 --> 00:59:41,070
bin detect but today it does not so

00:59:38,880 --> 00:59:42,390
compile is where all the action is and

00:59:41,070 --> 00:59:45,570
compile is actually a little bit of a

00:59:42,390 --> 00:59:47,190
misnomer on Cloud Foundry it's gotten

00:59:45,570 --> 00:59:49,770
this name from Heroku because when you

00:59:47,190 --> 00:59:51,180
push even a job app to Heroku Heroku

00:59:49,770 --> 00:59:53,550
actually gets the source code and

00:59:51,180 --> 00:59:55,680
compiles the Java code into class files

00:59:53,550 --> 00:59:56,880
Cloud Foundry doesn't do that so the

00:59:55,680 --> 00:59:59,520
name compiled is a little bit of a

00:59:56,880 --> 01:00:02,580
misnomer it's really more of a packaging

00:59:59,520 --> 01:00:03,900
process on Cloud Foundry but the been

01:00:02,580 --> 01:00:06,990
compiled script is responsible for

01:00:03,900 --> 01:00:08,700
downloading any necessary things that

01:00:06,990 --> 01:00:10,860
the application needs to run so in the

01:00:08,700 --> 01:00:12,210
case of Java you're downloading the JRE

01:00:10,860 --> 01:00:14,730
and the cursor Ruby you're downloading

01:00:12,210 --> 01:00:16,830
the interpreter it's also responsible

01:00:14,730 --> 01:00:18,330
for downloading a container so Tomcat if

01:00:16,830 --> 01:00:21,450
that's what your build pact is trying to

01:00:18,330 --> 01:00:23,760
support I'm an OS GI container and this

01:00:21,450 --> 01:00:26,040
is where our Ruby build pack would look

01:00:23,760 --> 01:00:28,110
at the gym file and run bundler to pull

01:00:26,040 --> 01:00:30,150
in any dependencies a Noah build pack

01:00:28,110 --> 01:00:32,850
would look at package JSON and pull

01:00:30,150 --> 01:00:34,470
anything down from a repository so

01:00:32,850 --> 01:00:37,950
compiled is really where all the action

01:00:34,470 --> 01:00:39,870
is the compiled script may also do some

01:00:37,950 --> 01:00:43,170
transformations on the application bits

01:00:39,870 --> 01:00:46,410
if it needs to in the case of a Java

01:00:43,170 --> 01:00:48,510
build path with Tomcat those application

01:00:46,410 --> 01:00:52,890
bits need to be in a tomcat directory

01:00:48,510 --> 01:00:54,840
and Tomcat web apps directory so our

01:00:52,890 --> 01:00:57,030
Java build pack actually just symlinks

01:00:54,840 --> 01:00:58,290
the build files the the app files into

01:00:57,030 --> 01:01:00,780
that directory that it could choose to

01:00:58,290 --> 01:01:02,280
move them copy them do anything else

01:01:00,780 --> 01:01:06,360
that might need to do to the application

01:01:02,280 --> 01:01:08,220
bits and we saw on the slide earlier

01:01:06,360 --> 01:01:09,720
that compiled script has passed the

01:01:08,220 --> 01:01:10,460
application directory and a cache

01:01:09,720 --> 01:01:12,600
directory

01:01:10,460 --> 01:01:14,250
since mostly what you're doing in build

01:01:12,600 --> 01:01:15,480
packs is downloading things and then

01:01:14,250 --> 01:01:16,680
installing them you know

01:01:15,480 --> 01:01:18,270
be going out and downloading those

01:01:16,680 --> 01:01:19,080
things from external sources anymore

01:01:18,270 --> 01:01:22,590
than you have to

01:01:19,080 --> 01:01:24,330
so what compiled scripts can do is when

01:01:22,590 --> 01:01:26,940
they determine they need to have access

01:01:24,330 --> 01:01:29,250
to a JRE or a Tomcat or whatever it is

01:01:26,940 --> 01:01:31,020
they can check that caching directory

01:01:29,250 --> 01:01:32,880
and see if that artifact is already

01:01:31,020 --> 01:01:34,560
there if it is just use it otherwise

01:01:32,880 --> 01:01:36,570
download it and put it in that cache

01:01:34,560 --> 01:01:39,210
directory it's completely up to the

01:01:36,570 --> 01:01:40,980
build pack what it puts in there and how

01:01:39,210 --> 01:01:42,480
it checks for it but it gives you a way

01:01:40,980 --> 01:01:45,240
to cache those things so you're not

01:01:42,480 --> 01:01:46,920
going out to a public mirror or a public

01:01:45,240 --> 01:01:52,950
repository and downloading them every

01:01:46,920 --> 01:01:55,470
single time and then the third script is

01:01:52,950 --> 01:01:57,000
release and this one does is actually

01:01:55,470 --> 01:01:59,460
the least amount of work of all three

01:01:57,000 --> 01:02:01,680
all it does is return a llamó formatted

01:01:59,460 --> 01:02:03,450
hash with these three keys in it and

01:02:01,680 --> 01:02:06,000
Cloud Foundry actually only pays

01:02:03,450 --> 01:02:08,280
attention to one of these three keys so

01:02:06,000 --> 01:02:10,619
the DEA is completely stupid it doesn't

01:02:08,280 --> 01:02:12,180
know what this application is or how to

01:02:10,619 --> 01:02:13,680
run at the build pack along with

01:02:12,180 --> 01:02:16,020
downloading all these things and

01:02:13,680 --> 01:02:17,400
installing them has to tell the DEA now

01:02:16,020 --> 01:02:19,320
here's the start command for this

01:02:17,400 --> 01:02:21,359
application and the way that it does

01:02:19,320 --> 01:02:23,880
that is by writing this one line out to

01:02:21,359 --> 01:02:27,300
this yamo output that it returns and

01:02:23,880 --> 01:02:30,720
it's just a command that DEA is going to

01:02:27,300 --> 01:02:33,300
run as a shell command to start the

01:02:30,720 --> 01:02:34,650
application up now if you do care about

01:02:33,300 --> 01:02:36,750
writing your build packs for

01:02:34,650 --> 01:02:37,710
compatibility with other platforms then

01:02:36,750 --> 01:02:39,660
you need to check with those other

01:02:37,710 --> 01:02:41,220
platforms and see how they may use these

01:02:39,660 --> 01:02:43,680
other values but Cloud Foundry is only

01:02:41,220 --> 01:02:45,600
gonna use this one the add-ons one in

01:02:43,680 --> 01:02:47,540
particular is for Heroku and you can

01:02:45,600 --> 01:02:50,100
write values into that array that our

01:02:47,540 --> 01:02:54,380
Heroku add-ons that Heroku will somehow

01:02:50,100 --> 01:02:54,380
take and add to there as well yes

01:03:01,560 --> 01:03:07,390
that's possible yes if the build pack

01:03:04,120 --> 01:03:08,800
wants to do that yeah so the sort of

01:03:07,390 --> 01:03:11,620
things you could do if you're writing

01:03:08,800 --> 01:03:14,230
your own build pack is you could define

01:03:11,620 --> 01:03:15,910
some configuration file format and have

01:03:14,230 --> 01:03:17,740
that configuration file pushed with the

01:03:15,910 --> 01:03:19,420
app and then the build pack could look

01:03:17,740 --> 01:03:21,760
at that configuration file and make

01:03:19,420 --> 01:03:23,110
decisions based on that if that's the

01:03:21,760 --> 01:03:25,570
sort of thing you decide you wanted to

01:03:23,110 --> 01:03:27,970
do and when we given the Java build pack

01:03:25,570 --> 01:03:29,980
we'll see how the job of help pack

01:03:27,970 --> 01:03:34,020
chooses not to do that sort of thing but

01:03:29,980 --> 01:03:34,020
you certainly can it's not a question

01:03:56,760 --> 01:04:00,940
the way that I've seen that type of

01:03:58,930 --> 01:04:03,190
thing done in other build packs is they

01:04:00,940 --> 01:04:04,870
just set that environment variable at

01:04:03,190 --> 01:04:05,950
the beginning of the command before the

01:04:04,870 --> 01:04:09,610
command actually runs

01:04:05,950 --> 01:04:11,890
so you'll see path equals and then some

01:04:09,610 --> 01:04:23,140
path statement and then the actual start

01:04:11,890 --> 01:04:24,280
command after that yes yeah okay let's

01:04:23,140 --> 01:04:27,790
stop there for a second

01:04:24,280 --> 01:04:29,410
this is the section on you want to write

01:04:27,790 --> 01:04:30,760
your own Bill pack from scratch here's

01:04:29,410 --> 01:04:33,250
what you have to know about how build

01:04:30,760 --> 01:04:34,630
packs work the best way to do this

01:04:33,250 --> 01:04:36,370
actually is to go out to one of those

01:04:34,630 --> 01:04:38,200
existing build packs and just see what

01:04:36,370 --> 01:04:40,900
they're doing and read them and maybe

01:04:38,200 --> 01:04:41,920
even take one and modify it so let's

01:04:40,900 --> 01:04:43,570
stop here and see if there's any more

01:04:41,920 --> 01:04:45,010
questions about writing your own build

01:04:43,570 --> 01:04:46,600
pack from scratch before we give it a

01:04:45,010 --> 01:04:49,920
little more a bit more specifically into

01:04:46,600 --> 01:04:49,920
a build pack yes

01:05:19,140 --> 01:05:24,640
yes and you'll also see in the next few

01:05:22,119 --> 01:05:26,109
weeks I think probably even in the next

01:05:24,640 --> 01:05:27,670
week another partner of ours is

01:05:26,109 --> 01:05:29,380
releasing another build pack

01:05:27,670 --> 01:05:31,420
specifically that they've built towards

01:05:29,380 --> 01:05:32,410
Cloud Foundry and I can't say anything

01:05:31,420 --> 01:05:34,480
more about that because I don't know

01:05:32,410 --> 01:05:37,540
exactly what their big plans are to

01:05:34,480 --> 01:05:39,700
splash that but we are seeing now

01:05:37,540 --> 01:05:42,460
several companies who are building build

01:05:39,700 --> 01:05:44,410
packs because they want their runtimes

01:05:42,460 --> 01:05:46,920
to be available specifically on Cloud

01:05:44,410 --> 01:05:49,920
Foundry which is pretty exciting for us

01:05:46,920 --> 01:05:49,920
yep

01:06:01,150 --> 01:06:05,630
well my guidance in terms of that is to

01:06:04,310 --> 01:06:08,630
keep your build pack as simple as

01:06:05,630 --> 01:06:11,780
possible and what most build packs do is

01:06:08,630 --> 01:06:13,760
just download some zip file like the

01:06:11,780 --> 01:06:15,410
Ruby interpreter the note interpreter

01:06:13,760 --> 01:06:17,120
most Python interpreters they're just

01:06:15,410 --> 01:06:19,310
zip files that you're downloading and

01:06:17,120 --> 01:06:22,090
unzipping and that's really all you need

01:06:19,310 --> 01:06:24,440
to do so if you start to get more

01:06:22,090 --> 01:06:25,670
elaborate than that in build packs then

01:06:24,440 --> 01:06:27,740
you're gonna be more sensitive to that

01:06:25,670 --> 01:06:30,740
sort of thing so keep it simple download

01:06:27,740 --> 01:06:32,570
stuff unzip stuff maybe you know Bill

01:06:30,740 --> 01:06:35,180
pack is free to go in and touch

01:06:32,570 --> 01:06:38,570
configuration files but just keep it to

01:06:35,180 --> 01:06:40,190
that sort of thing and try not to go and

01:06:38,570 --> 01:06:45,380
manipulate the whole operating system

01:06:40,190 --> 01:06:47,560
kind of environment yeah go ahead you go

01:06:45,380 --> 01:06:47,560
first

01:07:00,109 --> 01:07:04,009
yeah I'll show you one piece of that in

01:07:02,670 --> 01:07:06,539
a minute

01:07:04,009 --> 01:07:10,589
but the answer is a little bit uneven

01:07:06,539 --> 01:07:12,509
right now if you push an application

01:07:10,589 --> 01:07:15,420
using one of the built-in build packs

01:07:12,509 --> 01:07:17,099
then that detect string ends up being

01:07:15,420 --> 01:07:19,650
written out to a file that you can

01:07:17,099 --> 01:07:22,739
actually see that's a part of the

01:07:19,650 --> 01:07:24,960
droplet that the DEA adds there so using

01:07:22,739 --> 01:07:27,349
the CF files command you can go look at

01:07:24,960 --> 01:07:30,900
that file and see what's in it if you

01:07:27,349 --> 01:07:32,339
specify the build pack then the DEA

01:07:30,900 --> 01:07:34,950
currently doesn't call that detects

01:07:32,339 --> 01:07:36,660
scripts so it can't get that string it

01:07:34,950 --> 01:07:39,720
does write to the application metadata

01:07:36,660 --> 01:07:41,220
in a different field the URL for that

01:07:39,720 --> 01:07:43,229
build pack so right now it's a little

01:07:41,220 --> 01:07:45,380
uneven whether you let it use a built in

01:07:43,229 --> 01:07:47,460
one or whether you specify your own

01:07:45,380 --> 01:07:48,989
different information gets written to

01:07:47,460 --> 01:07:50,339
different fields in the app metadata

01:07:48,989 --> 01:07:52,200
which is something I think we need to

01:07:50,339 --> 01:07:53,910
adjust a little bit but I'll show you

01:07:52,200 --> 01:07:55,950
here in a minute where you can see the

01:07:53,910 --> 01:07:58,529
output from the detect script if we're

01:07:55,950 --> 01:08:01,140
using a built in one I think it would be

01:07:58,529 --> 01:08:03,269
better if DEA still called the detect

01:08:01,140 --> 01:08:04,829
script for one that you specify yourself

01:08:03,269 --> 01:08:06,210
just so we can write that same

01:08:04,829 --> 01:08:09,319
information out and give you a little

01:08:06,210 --> 01:08:09,319
bit more information there

01:08:19,359 --> 01:08:30,710
for example

01:08:22,560 --> 01:08:30,710
I want to use this chain environment

01:08:48,540 --> 01:09:07,330
you mean the location where the

01:08:50,920 --> 01:09:08,890
container gets downloaded from yeah I'm

01:09:07,330 --> 01:09:10,420
not clear when you say container are you

01:09:08,890 --> 01:09:12,310
talking about like our worden container

01:09:10,420 --> 01:09:18,600
or like a tomcat kind of container

01:09:12,310 --> 01:09:18,600
that's where I'm confused right yep

01:09:19,860 --> 01:09:31,750
right yes there's not a way for that to

01:09:29,350 --> 01:09:33,820
happen outside of Cloud Foundry what

01:09:31,750 --> 01:09:35,740
I've been sort of playing with and I

01:09:33,820 --> 01:09:38,830
hope to write up and have a blog entry

01:09:35,740 --> 01:09:41,020
on soon is Cornelia was actually doing

01:09:38,830 --> 01:09:44,380
some of her testing in a small local

01:09:41,020 --> 01:09:47,290
cloud foundry installation you should be

01:09:44,380 --> 01:09:49,060
able to bring up a single VM on a laptop

01:09:47,290 --> 01:09:50,770
that contains all of cloud foundry and

01:09:49,060 --> 01:09:53,350
runs a real small micro instance of

01:09:50,770 --> 01:09:55,330
cloud foundry and then you get a lot

01:09:53,350 --> 01:09:56,800
more control over what's going on and

01:09:55,330 --> 01:10:00,280
Cornelia actually already has a blog

01:09:56,800 --> 01:10:02,110
entry that shows how to stage an app

01:10:00,280 --> 01:10:04,390
into that small micro instance and then

01:10:02,110 --> 01:10:05,830
go into DEA and go into Ward and start

01:10:04,390 --> 01:10:07,780
poking around at the files and

01:10:05,830 --> 01:10:10,530
everything so that's a really good way

01:10:07,780 --> 01:10:12,880
to develop build packs I think because

01:10:10,530 --> 01:10:14,380
it can be difficult when you're writing

01:10:12,880 --> 01:10:16,090
a build pack and something's not working

01:10:14,380 --> 01:10:18,850
right you got to push your app your

01:10:16,090 --> 01:10:20,230
build pack gets invoked the app doesn't

01:10:18,850 --> 01:10:22,660
start for whatever reason

01:10:20,230 --> 01:10:24,310
DEA throws the working container way and

01:10:22,660 --> 01:10:26,350
you can't go look at the file system and

01:10:24,310 --> 01:10:28,630
see what happened using the technique

01:10:26,350 --> 01:10:31,360
that Cornelia I guess that's a an

01:10:28,630 --> 01:10:33,400
upcoming blog post right yeah yeah and

01:10:31,360 --> 01:10:35,530
those techniques are things like there

01:10:33,400 --> 01:10:39,160
is an ability to actually do what's

01:10:35,530 --> 01:10:40,990
called wsh which is a warden shell so

01:10:39,160 --> 01:10:42,880
you can actually warden shell into the

01:10:40,990 --> 01:10:44,920
shell and you can start mucking around

01:10:42,880 --> 01:10:47,360
in there so for example I've done this a

01:10:44,920 --> 01:10:50,210
fair bit

01:10:47,360 --> 01:10:53,120
I deploy something it's not working

01:10:50,210 --> 01:10:55,610
right aw Sh in there I look at the logs

01:10:53,120 --> 01:10:58,250
you can do it all from CF from the

01:10:55,610 --> 01:11:01,100
command line but that's a little bit

01:10:58,250 --> 01:11:02,810
burdensome because you're uploading and

01:11:01,100 --> 01:11:05,000
you know downloading files and looking

01:11:02,810 --> 01:11:07,640
at those files and I can go in there and

01:11:05,000 --> 01:11:10,010
just say oh I see what the error was

01:11:07,640 --> 01:11:12,020
here let me change my environmental

01:11:10,010 --> 01:11:14,239
variable or let me actually go into my

01:11:12,020 --> 01:11:16,460
code and make a slight change in the

01:11:14,239 --> 01:11:18,080
code and see if it works and restart

01:11:16,460 --> 01:11:20,570
that process inside of the warden

01:11:18,080 --> 01:11:23,090
container so you're asking a really

01:11:20,570 --> 01:11:25,130
great question which I'll generalize as

01:11:23,090 --> 01:11:26,690
a how do I do

01:11:25,130 --> 01:11:29,450
how do I have a development environment

01:11:26,690 --> 01:11:31,400
to help me using some of these things

01:11:29,450 --> 01:11:34,370
and we will have lots and lots more

01:11:31,400 --> 01:11:36,380
information and tooling to help off line

01:11:34,370 --> 01:11:40,040
disconnected yep you get it we'll have

01:11:36,380 --> 01:11:42,530
more stuff coming that's what we're

01:11:40,040 --> 01:11:44,150
talking about yeah there's the there's a

01:11:42,530 --> 01:11:48,110
CF vagrant installer and then there's

01:11:44,150 --> 01:11:50,570
the CF niche yes dollar so if you use

01:11:48,110 --> 01:11:52,580
either one of those to get a micro sized

01:11:50,570 --> 01:11:54,739
Cloud Foundry deployment in a VM on your

01:11:52,580 --> 01:11:56,180
laptop then you can do all sorts of

01:11:54,739 --> 01:12:00,260
things in there that you can't do one

01:11:56,180 --> 01:12:02,690
run dot pivotal al so yeah it does it

01:12:00,260 --> 01:12:04,610
works great yeah

01:12:02,690 --> 01:12:06,469
those installers were great the

01:12:04,610 --> 01:12:07,700
information we need to share Cornelia

01:12:06,469 --> 01:12:09,800
has done a lot of work here and I want

01:12:07,700 --> 01:12:11,480
to build on that is now that you've got

01:12:09,800 --> 01:12:13,730
that how do you get in there and really

01:12:11,480 --> 01:12:15,200
get up to your elbows in the DEA code

01:12:13,730 --> 01:12:16,969
and the worgen containers and all that

01:12:15,200 --> 01:12:25,850
so you can really see what's going on in

01:12:16,969 --> 01:12:29,150
there let's get to yes that's the same

01:12:25,850 --> 01:12:31,250
thing yeah so that second directory they

01:12:29,150 --> 01:12:33,950
get passed to the compiled script is

01:12:31,250 --> 01:12:35,960
just a directory on the file system as

01:12:33,950 --> 01:12:37,190
far as the bill pack is concerned but

01:12:35,960 --> 01:12:38,480
that's the build pack cash

01:12:37,190 --> 01:12:40,910
so anything that the build pack

01:12:38,480 --> 01:12:42,620
downloads it can feel free to put into

01:12:40,910 --> 01:12:46,460
that directory and that is the build Pat

01:12:42,620 --> 01:12:49,660
cash no there's not a way to

01:12:46,460 --> 01:12:49,660
pre-populate that right now

01:12:59,320 --> 01:13:05,300
no that's the DEA doing that purely so

01:13:02,720 --> 01:13:07,400
when this start command gets called the

01:13:05,300 --> 01:13:10,580
DEA monitors the process ID that comes

01:13:07,400 --> 01:13:13,130
back from that and so the DEA needs to

01:13:10,580 --> 01:13:14,930
know what that pit is and then the DEA

01:13:13,130 --> 01:13:17,060
and the health manager will watch that

01:13:14,930 --> 01:13:19,430
pit and see if that process stays

01:13:17,060 --> 01:13:21,170
running or not if that process dies then

01:13:19,430 --> 01:13:24,170
that's how the DEA knows that the app is

01:13:21,170 --> 01:13:25,910
flapping the DEA also knows whether a

01:13:24,170 --> 01:13:27,890
URL is bound to that application or not

01:13:25,910 --> 01:13:33,290
and it will hit that URL and see if it

01:13:27,890 --> 01:13:33,980
gets a 404 or something else yes that's

01:13:33,290 --> 01:13:35,300
it

01:13:33,980 --> 01:13:36,320
and that's a good point that's something

01:13:35,300 --> 01:13:38,600
I wanted to mention here that I forgot

01:13:36,320 --> 01:13:40,820
so I'm glad you mentioned that this

01:13:38,600 --> 01:13:43,100
start command that you put here has to

01:13:40,820 --> 01:13:44,450
be a long-running process we have had

01:13:43,100 --> 01:13:46,370
cases where we've helped people get

01:13:44,450 --> 01:13:48,890
build packs going and what they've put

01:13:46,370 --> 01:13:50,210
into the start command is a script that

01:13:48,890 --> 01:13:53,090
starts something else in the background

01:13:50,210 --> 01:13:55,910
and then that script exits and the

01:13:53,090 --> 01:13:57,590
process ID that DEA sees is the process

01:13:55,910 --> 01:13:59,900
ID for that initial script that started

01:13:57,590 --> 01:14:02,210
a background thread and exited so DEA

01:13:59,900 --> 01:14:04,460
thinks the application died so this

01:14:02,210 --> 01:14:06,320
command that you passed here has to be a

01:14:04,460 --> 01:14:08,600
long-running process where the DEA will

01:14:06,320 --> 01:14:11,390
not recognize that that application is

01:14:08,600 --> 01:14:14,740
running that's really important we spent

01:14:11,390 --> 01:14:14,740
probably a good day debugging that

01:14:20,090 --> 01:14:25,260
that depends on the build pack and how

01:14:23,010 --> 01:14:26,970
it's written and we're going to get into

01:14:25,260 --> 01:14:28,770
the Java build pack next and we'll go

01:14:26,970 --> 01:14:31,380
into some detail on how you can control

01:14:28,770 --> 01:14:32,760
that with that Java build pack if

01:14:31,380 --> 01:14:34,410
somebody else writes a different Java

01:14:32,760 --> 01:14:36,060
build pack they may have some completely

01:14:34,410 --> 01:14:38,340
different mechanism for how you control

01:14:36,060 --> 01:14:41,640
that there's been some desire expressed

01:14:38,340 --> 01:14:43,230
with people looking at build packs to do

01:14:41,640 --> 01:14:44,640
what I was saying earlier which is I

01:14:43,230 --> 01:14:46,350
want to build a configuration file that

01:14:44,640 --> 01:14:47,850
I push with my application on that

01:14:46,350 --> 01:14:49,680
configuration files are gonna say what

01:14:47,850 --> 01:14:51,630
JRE you want to use what Tomcat version

01:14:49,680 --> 01:14:53,970
I want to use all of that and I expect

01:14:51,630 --> 01:14:55,710
the build pack to honor that we chose

01:14:53,970 --> 01:14:57,000
not to do that in our Java Bill pack and

01:14:55,710 --> 01:14:59,790
we'll talk about what we chose to do

01:14:57,000 --> 01:15:01,110
instead but the real answer is if you

01:14:59,790 --> 01:15:02,400
don't like the way ours is doing a go

01:15:01,110 --> 01:15:04,380
write your own build pack and do your

01:15:02,400 --> 01:15:11,010
own thing and invent whatever mechanism

01:15:04,380 --> 01:15:14,370
you want for it ok ok 15 minutes really

01:15:11,010 --> 01:15:16,320
this is going fast ok so now we're gonna

01:15:14,370 --> 01:15:18,030
talk specifically about the Java build

01:15:16,320 --> 01:15:21,120
pack that pivitol has written from

01:15:18,030 --> 01:15:23,040
scratch and the way it works and the

01:15:21,120 --> 01:15:25,320
reason we started ours from scratch is

01:15:23,040 --> 01:15:26,790
we wanted to support a lot of different

01:15:25,320 --> 01:15:30,060
things really naturally and really

01:15:26,790 --> 01:15:32,640
easily in one build pack so this build

01:15:30,060 --> 01:15:34,020
pack supports Java groovy Scala really

01:15:32,640 --> 01:15:36,270
anything that can be compiled down to

01:15:34,020 --> 01:15:37,650
the JVM it knows about springing apps

01:15:36,270 --> 01:15:39,570
and knows about Grails apps and knows

01:15:37,650 --> 01:15:41,250
about play and it knows about Tomcat and

01:15:39,570 --> 01:15:44,520
we'll go into a little bit more about

01:15:41,250 --> 01:15:46,500
all the things that knows but the goal

01:15:44,520 --> 01:15:48,780
with it is you build your application

01:15:46,500 --> 01:15:50,550
however you want you push it this build

01:15:48,780 --> 01:15:53,750
pack will figure out exactly what it is

01:15:50,550 --> 01:15:56,550
you're asking it to do and just do it

01:15:53,750 --> 01:15:59,970
so there are three concepts concepts

01:15:56,550 --> 01:16:02,690
contained within the Java build pack and

01:15:59,970 --> 01:16:05,790
that's Gerry's containers and frameworks

01:16:02,690 --> 01:16:07,530
so you only ever have one JRE and that's

01:16:05,790 --> 01:16:09,810
the Java runtime that's going to run

01:16:07,530 --> 01:16:11,880
your application and your application

01:16:09,810 --> 01:16:13,470
can only have one container which really

01:16:11,880 --> 01:16:16,170
says how an application is run so

01:16:13,470 --> 01:16:17,370
Tomcats an example of container I know

01:16:16,170 --> 01:16:19,620
it's the I container it would be an

01:16:17,370 --> 01:16:21,150
example of a container and then we have

01:16:19,620 --> 01:16:23,460
this concept of frameworks which would

01:16:21,150 --> 01:16:26,490
be spring play Grails

01:16:23,460 --> 01:16:27,840
things like that so these are the

01:16:26,490 --> 01:16:29,409
examples of the things that are built

01:16:27,840 --> 01:16:31,419
into the Java build pack today

01:16:29,409 --> 01:16:33,489
these lists will continue to grow over

01:16:31,419 --> 01:16:35,769
time as we find more interesting things

01:16:33,489 --> 01:16:38,429
that we can detect and handle for

01:16:35,769 --> 01:16:40,989
application developers but in the

01:16:38,429 --> 01:16:44,110
container section you'll see there a

01:16:40,989 --> 01:16:46,539
line this is Java main this is just you

01:16:44,110 --> 01:16:48,400
push a jar file and in that jar file you

01:16:46,539 --> 01:16:49,570
have a manifest and the manifest says

01:16:48,400 --> 01:16:52,599
here's the main class from my

01:16:49,570 --> 01:16:54,219
application will detect that and we'll

01:16:52,599 --> 01:16:57,400
just call that main class and run it

01:16:54,219 --> 01:16:59,289
just as a bear jar file Tomcat will

01:16:57,400 --> 01:17:01,659
detect that it's a servlet application

01:16:59,289 --> 01:17:03,729
that it has a web bin Factory and will

01:17:01,659 --> 01:17:06,309
instantiate Tomcat download and install

01:17:03,729 --> 01:17:08,139
it and run this within their the groovy

01:17:06,309 --> 01:17:09,789
container is really just detecting that

01:17:08,139 --> 01:17:11,380
everything that you've pushed is just

01:17:09,789 --> 01:17:14,380
groovy files and we just need to run

01:17:11,380 --> 01:17:16,239
those I'm using the groovy interpreter

01:17:14,380 --> 01:17:17,439
and we'll get more into what each of

01:17:16,239 --> 01:17:20,369
these things is but I just want to give

01:17:17,439 --> 01:17:23,110
you a flavor of the things they support

01:17:20,369 --> 01:17:25,239
so this is that additional detail don't

01:17:23,110 --> 01:17:27,369
take this slide as the specification

01:17:25,239 --> 01:17:28,840
this job of ill pack is really well

01:17:27,369 --> 01:17:30,639
documented and if you go to the github

01:17:28,840 --> 01:17:33,159
page for this you'll see the exact

01:17:30,639 --> 01:17:34,599
specification of what the build pack is

01:17:33,159 --> 01:17:36,699
doing to detect each of these I really

01:17:34,599 --> 01:17:38,320
just wanted to give you a flavor of the

01:17:36,699 --> 01:17:40,539
sorts of things that build pack looks

01:17:38,320 --> 01:17:41,919
for to decide what it's going to do so

01:17:40,539 --> 01:17:44,110
we talked about Java main if you have a

01:17:41,919 --> 01:17:47,530
manifest file and you name the main

01:17:44,110 --> 01:17:49,599
class then it just does Java - jar in

01:17:47,530 --> 01:17:52,929
the jar file that's what this container

01:17:49,599 --> 01:17:55,449
does Tomcat looks for a web inspector e

01:17:52,929 --> 01:17:58,630
the criteria for groovy is a little bit

01:17:55,449 --> 01:18:00,189
more complex because we need to make

01:17:58,630 --> 01:18:02,229
sure that it's really just a plain

01:18:00,189 --> 01:18:05,050
groovy script more or less as what

01:18:02,229 --> 01:18:06,820
you're trying to run so if there's a

01:18:05,050 --> 01:18:08,979
groovy file that has a main will go run

01:18:06,820 --> 01:18:10,900
that main as a groovy file or if there

01:18:08,979 --> 01:18:12,579
are no classes which really means it's a

01:18:10,900 --> 01:18:13,869
groovy script or at least the entry

01:18:12,579 --> 01:18:16,119
point to your applications a groovy

01:18:13,869 --> 01:18:19,389
script then we'll run that as a groovy

01:18:16,119 --> 01:18:21,519
script spring brute CLI is a really

01:18:19,389 --> 01:18:23,559
really neat one you've heard about

01:18:21,519 --> 01:18:25,900
spring boot already in the keynote last

01:18:23,559 --> 01:18:28,809
night it's what you can do with spring

01:18:25,900 --> 01:18:32,010
boot is write groovy files that are just

01:18:28,809 --> 01:18:34,419
your web application controllers and

01:18:32,010 --> 01:18:36,669
then just run those with a command line

01:18:34,419 --> 01:18:39,519
tool so this Java build pack will detect

01:18:36,669 --> 01:18:41,019
that that there are groovy files that

01:18:39,519 --> 01:18:41,870
they have no main method and that it's

01:18:41,019 --> 01:18:43,250
not a web

01:18:41,870 --> 01:18:45,410
in which case we'd wanna run it in

01:18:43,250 --> 01:18:48,020
Tomcat and it'll invoke the spring boot

01:18:45,410 --> 01:18:49,520
command-line interpreter and just run

01:18:48,020 --> 01:18:51,380
those groovy files that is really neat

01:18:49,520 --> 01:18:56,330
and then you can see what it does for

01:18:51,380 --> 01:18:58,160
play and the last line there is the

01:18:56,330 --> 01:18:59,960
build pack is going to look to see which

01:18:58,160 --> 01:19:01,490
of these containers things that knows

01:18:59,960 --> 01:19:03,020
how to run this application if more than

01:19:01,490 --> 01:19:04,160
one says it knows how to run it it's

01:19:03,020 --> 01:19:06,440
going to give an error because you can

01:19:04,160 --> 01:19:07,850
only have one container and if none of

01:19:06,440 --> 01:19:08,990
them say I know how to run it then

01:19:07,850 --> 01:19:10,700
you're gonna get an error saying the

01:19:08,990 --> 01:19:13,010
build pack doesn't know how to run it or

01:19:10,700 --> 01:19:14,390
technically what will happen if we run

01:19:13,010 --> 01:19:15,740
through all these containers and none of

01:19:14,390 --> 01:19:17,120
them say they know how to run it then

01:19:15,740 --> 01:19:18,680
the entire build pack is gonna return

01:19:17,120 --> 01:19:21,020
negative code one out of its detect

01:19:18,680 --> 01:19:23,570
script so it won't be a candidate for

01:19:21,020 --> 01:19:25,010
running this so these are the frameworks

01:19:23,570 --> 01:19:28,490
that the build pack currently supports

01:19:25,010 --> 01:19:30,620
as well so if we see any spring core jar

01:19:28,490 --> 01:19:32,120
file then we'll know it's a spring app

01:19:30,620 --> 01:19:35,120
and we can do some special things with

01:19:32,120 --> 01:19:36,740
that play if it's a play application at

01:19:35,120 --> 01:19:39,950
all then we know we can invoke some

01:19:36,740 --> 01:19:42,410
special play configuration same with JPA

01:19:39,950 --> 01:19:43,880
and New Relic is a really interesting

01:19:42,410 --> 01:19:46,130
one and it's the newest thing that we've

01:19:43,880 --> 01:19:47,870
added to this build pack and the thing

01:19:46,130 --> 01:19:49,910
that's most interesting about it is the

01:19:47,870 --> 01:19:51,260
build pack looks at the application

01:19:49,910 --> 01:19:53,270
environment to see if there's a new

01:19:51,260 --> 01:19:55,550
relic service bound to the application

01:19:53,270 --> 01:19:57,760
and then does special stuff based on

01:19:55,550 --> 01:20:00,560
that so most of the detection criteria

01:19:57,760 --> 01:20:02,930
looks at the application bits to see

01:20:00,560 --> 01:20:04,070
what's in the application this one

01:20:02,930 --> 01:20:05,930
actually looks at the Cloud Foundry

01:20:04,070 --> 01:20:08,270
environment for the application and

01:20:05,930 --> 01:20:10,430
makes a decision based on that and what

01:20:08,270 --> 01:20:12,200
the new relic framework does in that

01:20:10,430 --> 01:20:15,230
case is it goes out and downloads the

01:20:12,200 --> 01:20:17,570
new relic agent adds that to the Java

01:20:15,230 --> 01:20:20,240
run command line goes and gets the

01:20:17,570 --> 01:20:22,460
license for this new relic instance out

01:20:20,240 --> 01:20:23,840
of the services and adds that to the

01:20:22,460 --> 01:20:26,210
command line and this is what enables

01:20:23,840 --> 01:20:28,430
the zero-touch new relic configuration

01:20:26,210 --> 01:20:30,740
you bind a new relic service to your

01:20:28,430 --> 01:20:32,330
application on push and you get a new

01:20:30,740 --> 01:20:33,860
relic without doing anything else and

01:20:32,330 --> 01:20:36,650
it's because of this build pack support

01:20:33,860 --> 01:20:38,540
that that works and as we run through

01:20:36,650 --> 01:20:41,360
this list of frameworks inside the build

01:20:38,540 --> 01:20:43,370
pack seeing which one's apply any of

01:20:41,360 --> 01:20:46,090
them that we get a hit on get applied to

01:20:43,370 --> 01:20:46,090
that application

01:20:50,390 --> 01:20:55,260
in the case of spring what happens is

01:20:53,120 --> 01:21:00,120
there's a spring auto-configuration

01:20:55,260 --> 01:21:02,250
mechanism which is a jar file that when

01:21:00,120 --> 01:21:04,320
that jar files in the classpath it looks

01:21:02,250 --> 01:21:06,090
to see if there's spring data beans in

01:21:04,320 --> 01:21:09,630
your application and will auto wire them

01:21:06,090 --> 01:21:12,480
up to applications or services you have

01:21:09,630 --> 01:21:14,120
bound to your application so that's

01:21:12,480 --> 01:21:15,990
getting a little bit into the

01:21:14,120 --> 01:21:18,750
functionality of spring Auto

01:21:15,990 --> 01:21:20,700
configuration in cloud foundry but in

01:21:18,750 --> 01:21:22,710
terms of what this build pack is doing

01:21:20,700 --> 01:21:24,300
it's just downloading a jar file and

01:21:22,710 --> 01:21:26,610
making some tweaks to the Tomcat

01:21:24,300 --> 01:21:27,930
configuration and then the rest of the

01:21:26,610 --> 01:21:32,610
magic is in the spring auto

01:21:27,930 --> 01:21:33,960
configuration jar file no I hadn't

01:21:32,610 --> 01:21:41,820
planned about talking about

01:21:33,960 --> 01:21:44,490
configuration yeah okay real very very

01:21:41,820 --> 01:21:46,290
quickly in 15 seconds so remember when I

01:21:44,490 --> 01:21:47,820
said you don't necessarily need to read

01:21:46,290 --> 01:21:50,190
things in your application from the

01:21:47,820 --> 01:21:52,020
environmental variables there's some of

01:21:50,190 --> 01:21:54,690
that magic it's that auto configuration

01:21:52,020 --> 01:21:56,520
that might just take care of that for

01:21:54,690 --> 01:21:58,710
you if you're doing something like Scott

01:21:56,520 --> 01:22:00,810
just said if you're using spring data

01:21:58,710 --> 01:22:03,990
beans if it finds those then it might

01:22:00,810 --> 01:22:05,850
auto wire those backends in for you yeah

01:22:03,990 --> 01:22:07,260
but again in terms of what this build

01:22:05,850 --> 01:22:09,270
pack is doing this build pack isn't

01:22:07,260 --> 01:22:12,720
making any of that happen other than the

01:22:09,270 --> 01:22:14,250
fact that it's getting another jar file

01:22:12,720 --> 01:22:15,840
adding it to the class path for your

01:22:14,250 --> 01:22:18,060
application and making some small tweaks

01:22:15,840 --> 01:22:21,180
to Tomcat everything else that happens

01:22:18,060 --> 01:22:23,070
is just the spring audit configuration

01:22:21,180 --> 01:22:24,750
support so we can certainly talk more

01:22:23,070 --> 01:22:28,050
about spring auto configuration support

01:22:24,750 --> 01:22:30,000
after this so you've seen the staging

01:22:28,050 --> 01:22:32,160
output several times when you do CF push

01:22:30,000 --> 01:22:34,110
this is some of what goes streaming by I

01:22:32,160 --> 01:22:36,110
just wanted to kind of connect to that

01:22:34,110 --> 01:22:38,310
output to what we're talking about now

01:22:36,110 --> 01:22:41,010
so that very first line you see

01:22:38,310 --> 01:22:42,780
downloaded app package that's the DEA

01:22:41,010 --> 01:22:44,220
taking the app bits out of the blob

01:22:42,780 --> 01:22:46,530
store and putting them into the worden

01:22:44,220 --> 01:22:49,320
container all the next set of lines that

01:22:46,530 --> 01:22:51,120
are in bold are things that the build

01:22:49,320 --> 01:22:53,700
pack is writing to standard out in the

01:22:51,120 --> 01:22:55,790
in the course of its processing so

01:22:53,700 --> 01:22:58,170
you'll see it's downloading the open JDK

01:22:55,790 --> 01:22:59,970
it's downloading this spring Auto

01:22:58,170 --> 01:23:01,230
reconfiguration jar which is the thing

01:22:59,970 --> 01:23:03,360
we were just talking about

01:23:01,230 --> 01:23:05,130
and then it's downloading Tomcat and it

01:23:03,360 --> 01:23:07,560
actually shows you the directory that is

01:23:05,130 --> 01:23:09,270
downloading each of those into and then

01:23:07,560 --> 01:23:11,850
once the build pack is completely done

01:23:09,270 --> 01:23:13,739
then it's back under DEA control and the

01:23:11,850 --> 01:23:15,510
DEA is then gonna take a sip of

01:23:13,739 --> 01:23:21,260
everything that just happened to that

01:23:15,510 --> 01:23:24,540
worden container and store it away and

01:23:21,260 --> 01:23:26,100
once that apps been pushed it's kind of

01:23:24,540 --> 01:23:28,020
fun to go in and do this see a files

01:23:26,100 --> 01:23:29,610
command and actually see what's in that

01:23:28,020 --> 01:23:32,040
droplet you can only do this after the

01:23:29,610 --> 01:23:34,140
application has actually started and

01:23:32,040 --> 01:23:35,940
this is just illustrating again what the

01:23:34,140 --> 01:23:38,250
build pack is doing this dot java this

01:23:35,940 --> 01:23:40,380
dot live-in Tomcat directories our

01:23:38,250 --> 01:23:41,820
directories that the build pack created

01:23:40,380 --> 01:23:44,160
to put the things that it was

01:23:41,820 --> 01:23:45,720
downloading and installing the fact that

01:23:44,160 --> 01:23:47,360
those things are named that is purely

01:23:45,720 --> 01:23:50,730
decisions that that built pack mates

01:23:47,360 --> 01:23:51,900
cloth wanderer DEA don't compute and

01:23:50,730 --> 01:23:53,760
don't care what those things are called

01:23:51,900 --> 01:23:57,060
or where they are as long as they are in

01:23:53,760 --> 01:23:59,130
this directory and then the other things

01:23:57,060 --> 01:24:01,830
are part of the application that the DEA

01:23:59,130 --> 01:24:03,750
downloaded and then this is going to

01:24:01,830 --> 01:24:05,940
help with an earlier question another

01:24:03,750 --> 01:24:08,850
fun thing to do is do the CF files and

01:24:05,940 --> 01:24:10,980
look at this staging info dot yml that's

01:24:08,850 --> 01:24:14,820
at the top of the directory anytime you

01:24:10,980 --> 01:24:16,890
do CF files and this detective build

01:24:14,820 --> 01:24:20,070
pack string is exactly what was returned

01:24:16,890 --> 01:24:22,470
from the detect script so if you specify

01:24:20,070 --> 01:24:24,420
the build pack on push you that the

01:24:22,470 --> 01:24:27,000
string will actually be empty if you

01:24:24,420 --> 01:24:28,290
don't specify a build pack on push and

01:24:27,000 --> 01:24:29,670
let Cloud Foundry run through them all

01:24:28,290 --> 01:24:31,739
whichever one it takes is going to get

01:24:29,670 --> 01:24:33,360
written out there and then everything

01:24:31,739 --> 01:24:36,270
after start command is what the build

01:24:33,360 --> 01:24:38,450
pack put into that web field of that

01:24:36,270 --> 01:24:40,680
string that's returned from release

01:24:38,450 --> 01:24:42,840
that's just a little bit of highlighting

01:24:40,680 --> 01:24:44,580
to see what's in there so Matt was

01:24:42,840 --> 01:24:46,470
asking about the path this is a

01:24:44,580 --> 01:24:48,000
technique that this build pack used to

01:24:46,470 --> 01:24:50,010
set up the Java home and Java office

01:24:48,000 --> 01:24:51,930
environment variables before it actually

01:24:50,010 --> 01:24:53,310
sets up this script to run so I could I

01:24:51,930 --> 01:24:59,580
just seem you could do the similar thing

01:24:53,310 --> 01:25:01,860
with path ok we'll try to get through

01:24:59,580 --> 01:25:03,300
this customization part so if you want

01:25:01,860 --> 01:25:05,400
the Java build pack to do something

01:25:03,300 --> 01:25:07,230
differently than it does today there are

01:25:05,400 --> 01:25:08,940
two ways you can do that one is just to

01:25:07,230 --> 01:25:10,830
configure by changing configuration

01:25:08,940 --> 01:25:13,290
files that are a part of the build pack

01:25:10,830 --> 01:25:13,909
and the other is to write new Ruby code

01:25:13,290 --> 01:25:15,800
and

01:25:13,909 --> 01:25:18,050
Ruby code to the bill pack to make it do

01:25:15,800 --> 01:25:19,820
something different in both of these

01:25:18,050 --> 01:25:21,969
cases the way you make those changes is

01:25:19,820 --> 01:25:24,709
you fork our Java bill pack on github

01:25:21,969 --> 01:25:26,329
make your changes commit that back to

01:25:24,709 --> 01:25:28,459
your own github repository and then

01:25:26,329 --> 01:25:31,550
specify that build pack when you push

01:25:28,459 --> 01:25:33,349
the application so the forking is the

01:25:31,550 --> 01:25:35,959
method of customizing for this build

01:25:33,349 --> 01:25:37,669
pack so if you just want to do

01:25:35,959 --> 01:25:39,469
configuration these are the sort of

01:25:37,669 --> 01:25:40,039
configuration files that she'd be

01:25:39,469 --> 01:25:41,929
changing

01:25:40,039 --> 01:25:44,689
so let's actually start with the bottom

01:25:41,929 --> 01:25:47,300
one so this is a Yambol file everything

01:25:44,689 --> 01:25:48,590
in Cloud Foundry is a yam will file so

01:25:47,300 --> 01:25:49,969
if you can see that at the bottom you'll

01:25:48,590 --> 01:25:52,189
see that it's got a version string in

01:25:49,969 --> 01:25:54,289
there so this configuration file is

01:25:52,189 --> 01:25:56,030
specifying what version the JRE is gonna

01:25:54,289 --> 01:26:00,769
get downloaded for a Java app in this

01:25:56,030 --> 01:26:02,689
case it's saying version 1.7 0.4 take

01:26:00,769 --> 01:26:05,539
the latest one of any of the one seven o

01:26:02,689 --> 01:26:08,239
flavors and then you also have the URL

01:26:05,539 --> 01:26:10,699
that it's gonna go download any of those

01:26:08,239 --> 01:26:13,280
artifacts from so the Java build pack

01:26:10,699 --> 01:26:16,340
takes this repository root looks for a

01:26:13,280 --> 01:26:17,989
file called index is at the end of that

01:26:16,340 --> 01:26:19,610
and then goes and looks for a line in

01:26:17,989 --> 01:26:22,699
that file that matches the version and

01:26:19,610 --> 01:26:24,199
its gonna take the version the biggest

01:26:22,699 --> 01:26:27,169
version number that matches that string

01:26:24,199 --> 01:26:29,419
in there so if all you wanted to do was

01:26:27,169 --> 01:26:31,039
use a different version of the JRE you

01:26:29,419 --> 01:26:32,809
just go into this one configuration file

01:26:31,039 --> 01:26:34,309
change that one seven o string to

01:26:32,809 --> 01:26:35,630
whatever other version you want it as

01:26:34,309 --> 01:26:37,099
long as it was one of these it was in

01:26:35,630 --> 01:26:40,789
this list and that's the version you'd

01:26:37,099 --> 01:26:43,909
be using so another interesting example

01:26:40,789 --> 01:26:46,489
is you want to customize the Tomcat

01:26:43,909 --> 01:26:49,070
configuration or the Tomcat distribution

01:26:46,489 --> 01:26:50,749
I should say and this example goes a

01:26:49,070 --> 01:26:53,539
little bit further because you'll see

01:26:50,749 --> 01:26:55,939
these URLs are files dot example.com so

01:26:53,539 --> 01:26:57,439
if you're gonna deploy your own private

01:26:55,939 --> 01:27:00,800
cloud foundry and you want to have your

01:26:57,439 --> 01:27:03,289
own repository of these tar files that

01:27:00,800 --> 01:27:05,150
have Tomcat in them then you would need

01:27:03,289 --> 01:27:07,459
to change this base URL and it can just

01:27:05,150 --> 01:27:08,809
be Apache serving up files via HTTP

01:27:07,459 --> 01:27:11,989
there's nothing special about where

01:27:08,809 --> 01:27:13,880
those files come from and then you can

01:27:11,989 --> 01:27:17,209
upload your own versions of Tomcat and

01:27:13,880 --> 01:27:19,400
set whatever versions you want for

01:27:17,209 --> 01:27:21,949
Tomcat specifically I just learned about

01:27:19,400 --> 01:27:24,110
this last week so I thought I'd add that

01:27:21,949 --> 01:27:27,390
to this presentation as well it's very

01:27:24,110 --> 01:27:29,820
common if you're running in Tomcat

01:27:27,390 --> 01:27:31,920
to be able to customize bits and pieces

01:27:29,820 --> 01:27:34,530
of the Tomcat configuration in context

01:27:31,920 --> 01:27:38,100
XML and server.xml so this build pack

01:27:34,530 --> 01:27:40,140
when it downloads in unpacks Tomcat it

01:27:38,100 --> 01:27:42,030
then goes and gets these two files and

01:27:40,140 --> 01:27:44,250
drops them into the Tomcat configuration

01:27:42,030 --> 01:27:47,310
so if you want her to change context XML

01:27:44,250 --> 01:27:48,930
server.xml to enable Tomcat clustering

01:27:47,310 --> 01:27:51,000
or something like that you would just

01:27:48,930 --> 01:27:53,910
fork the build pack edit these two files

01:27:51,000 --> 01:27:58,500
and then there's no code to actually

01:27:53,910 --> 01:28:00,150
change to make any of that happen okay

01:27:58,500 --> 01:28:01,830
and then if you want to extend then

01:28:00,150 --> 01:28:03,630
you're in a situation where you're

01:28:01,830 --> 01:28:05,220
writing new Ruby code and you're gonna

01:28:03,630 --> 01:28:07,830
be writing new Ruby code that's either a

01:28:05,220 --> 01:28:10,440
new JRE or a new container or a new

01:28:07,830 --> 01:28:11,820
framework so these are actually

01:28:10,440 --> 01:28:13,980
directories in the Java build pack

01:28:11,820 --> 01:28:15,660
source code and if you go to github and

01:28:13,980 --> 01:28:16,950
look at the repository you'll see these

01:28:15,660 --> 01:28:19,680
three directories and in the container

01:28:16,950 --> 01:28:21,870
directory you would see Tomcat RB Spring

01:28:19,680 --> 01:28:24,360
Butare be groovy dot RB all those things

01:28:21,870 --> 01:28:27,120
that we talked about and the interface

01:28:24,360 --> 01:28:28,530
to one of these components that do it

01:28:27,120 --> 01:28:31,860
out of the Bill pack looks very much

01:28:28,530 --> 01:28:34,100
like the top-level build pack API it's

01:28:31,860 --> 01:28:36,600
got this additional initialize method

01:28:34,100 --> 01:28:38,640
but then you have a detect compile and

01:28:36,600 --> 01:28:41,130
release method so this is sort of

01:28:38,640 --> 01:28:44,250
another level underneath the bin compile

01:28:41,130 --> 01:28:46,230
bin detective bin release when you get

01:28:44,250 --> 01:28:48,120
into the Java build pack it's going to

01:28:46,230 --> 01:28:50,100
call each of these containers and call a

01:28:48,120 --> 01:28:51,540
detect compile release script inside of

01:28:50,100 --> 01:28:53,970
there so when we talked about the

01:28:51,540 --> 01:28:56,430
criteria for a container it's this

01:28:53,970 --> 01:28:58,440
detect script here that's implementing

01:28:56,430 --> 01:29:02,940
those rules for what a container would

01:28:58,440 --> 01:29:04,920
detect and again the best way to start

01:29:02,940 --> 01:29:06,270
with this extension is to go look at one

01:29:04,920 --> 01:29:08,190
of those containers it's already in the

01:29:06,270 --> 01:29:11,040
Java build pack copy the source code

01:29:08,190 --> 01:29:13,980
start modifying it away and Andy's

01:29:11,040 --> 01:29:15,690
telling the amount of time and then the

01:29:13,980 --> 01:29:17,400
only other thing you do is you go into

01:29:15,690 --> 01:29:19,140
this one configuration file and just

01:29:17,400 --> 01:29:19,920
tell it there's another class that it

01:29:19,140 --> 01:29:21,930
needs to know about

01:29:19,920 --> 01:29:26,010
that's another container or another

01:29:21,930 --> 01:29:28,080
framework or another JRE and we can go

01:29:26,010 --> 01:29:30,090
in a lot more detail about this part of

01:29:28,080 --> 01:29:31,290
the Java build pack after this Ben Hales

01:29:30,090 --> 01:29:32,670
in the back of the room he actually

01:29:31,290 --> 01:29:34,740
wrote this I'm sure he'd be happy to

01:29:32,670 --> 01:29:36,710
answer questions as well so he knew I

01:29:34,740 --> 01:29:39,000
was going to mention him at some point

01:29:36,710 --> 01:29:39,700
so we can certainly stick around and

01:29:39,000 --> 01:29:42,490
answer more

01:29:39,700 --> 01:29:44,560
it's about it and the github repository

01:29:42,490 --> 01:29:46,870
for the Java build pack has a lot of

01:29:44,560 --> 01:29:48,790
really really good documentation Ben and

01:29:46,870 --> 01:29:50,560
Glen really spend a lot of time making

01:29:48,790 --> 01:29:51,940
sure this was really well documented so

01:29:50,560 --> 01:29:55,540
go out there and read that if that's

01:29:51,940 --> 01:29:57,190
something you're interested in doing and

01:29:55,540 --> 01:30:00,270
that's it we'll be up here for a few

01:29:57,190 --> 01:30:00,270
more minutes to answer questions

01:30:11,400 --> 01:30:13,460

YouTube URL: https://www.youtube.com/watch?v=sOvQE8BrX-E


