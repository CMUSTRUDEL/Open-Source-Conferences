Title: Automotive Cloud Development Paradigms - Diving into Connecting IoT... Matthias Hub & Daniel Bryła
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Automotive Cloud Development Paradigms - Diving into Connecting IoT, CloudFoundry, Kubernetes and Porsche - Matthias Hub, Porsche & Daniel Bryła, Grape Up 

Latest trends make connecting vehicles with the cloud a necessity to attract customers. The difficulty comes not only from rising customer expectations but also from technological complexity. Handling connection losses, inactive cars, and a huge amount of data are standard fares in this business. To reduce complexity and boost development process, Porsche decided to explore an IoT platform approach. During this talk, Matthias and Daniel will show how Porsche and Grape Up are building an automotive IoT platform on top of Cloud Foundry and Kubernetes. They will focus on developer experience of this R&D project and will show how infrastructure abstraction helps in rapidly changing environment. Moreover, the speech will cover multiple architecture patterns (e.g. digital twin) which combined with the CF ecosystem helps to deal with a massive load, keeps the system clean and open for extensions 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:06,270
maybe yes great things the automotive

00:00:03,540 --> 00:00:08,880
industry is changing there are multiple

00:00:06,270 --> 00:00:13,920
levels of disruptions all happening at

00:00:08,880 --> 00:00:16,590
the same time usage patterns like for

00:00:13,920 --> 00:00:20,760
example ownership are changing towards a

00:00:16,590 --> 00:00:23,880
more shared approach cars with

00:00:20,760 --> 00:00:26,640
combustion engines are replaced by a lot

00:00:23,880 --> 00:00:29,279
of new electric car models autonomous

00:00:26,640 --> 00:00:33,829
vehicles are driving already on at least

00:00:29,279 --> 00:00:36,450
some streets and consumers customers are

00:00:33,829 --> 00:00:39,000
expecting that detailed service within a

00:00:36,450 --> 00:00:43,530
vehicle work as convenient as they are

00:00:39,000 --> 00:00:46,140
used to from their mobile phones these

00:00:43,530 --> 00:00:49,590
are a lot of challenges and a lot of

00:00:46,140 --> 00:00:51,930
challenges which all require changes in

00:00:49,590 --> 00:00:55,219
services especially in the customer

00:00:51,930 --> 00:00:57,930
facing services they will be rebuilt

00:00:55,219 --> 00:01:00,530
restructures recreated and they all have

00:00:57,930 --> 00:01:02,219
a very strong dependency on

00:01:00,530 --> 00:01:04,290
infrastructure connectivity

00:01:02,219 --> 00:01:06,840
infrastructure vehicle car

00:01:04,290 --> 00:01:10,680
infrastructure IT infrastructure in the

00:01:06,840 --> 00:01:13,500
cloud a lot of things a lot of

00:01:10,680 --> 00:01:15,900
challenges are ahead of us welcome to

00:01:13,500 --> 00:01:17,549
our talk about software development in

00:01:15,900 --> 00:01:20,580
the automotive industry my name is

00:01:17,549 --> 00:01:26,270
Matthias I'm here joined by Daniel funk

00:01:20,580 --> 00:01:29,430
rev up and we are we will explain how

00:01:26,270 --> 00:01:34,170
automotive software development looks

00:01:29,430 --> 00:01:36,530
like in the current times Porsche itself

00:01:34,170 --> 00:01:55,259
is also in the midst of a transformation

00:01:36,530 --> 00:01:58,259
it is their should pour ourselves in the

00:01:55,259 --> 00:02:00,689
midst of the transformation it is

00:01:58,259 --> 00:02:04,770
transforming from a sports car

00:02:00,689 --> 00:02:08,179
manufacturers which produces very

00:02:04,770 --> 00:02:11,489
beautiful cars to a mobility provider

00:02:08,179 --> 00:02:13,200
mobility provider of exclusive and

00:02:11,489 --> 00:02:14,940
sportive mobility

00:02:13,200 --> 00:02:17,370
and actually that's a very big

00:02:14,940 --> 00:02:24,239
difference sports car manufacturers

00:02:17,370 --> 00:02:27,030
versus mobility provider to create very

00:02:24,239 --> 00:02:29,670
seamless integrated mobility solution

00:02:27,030 --> 00:02:33,660
the cars need to be equipped with a lot

00:02:29,670 --> 00:02:36,330
of connected car services and also with

00:02:33,660 --> 00:02:38,760
a lot of connectivity and so on which is

00:02:36,330 --> 00:02:43,410
very different than driving and 911 on

00:02:38,760 --> 00:02:48,480
on the racetrack so there are a lot of

00:02:43,410 --> 00:02:54,150
challenges and of course cloud is needed

00:02:48,480 --> 00:02:56,760
to solve these challenges we you are

00:02:54,150 --> 00:03:00,269
using nowadays the term automotive cloud

00:02:56,760 --> 00:03:03,720
a term which was coined by our V

00:03:00,269 --> 00:03:07,290
Volkswagen group colleagues and how that

00:03:03,720 --> 00:03:11,400
looks like this automotive cloud and how

00:03:07,290 --> 00:03:13,110
we develop and deploy software using

00:03:11,400 --> 00:03:16,140
cloud foundry and that comes into play

00:03:13,110 --> 00:03:18,510
we will show and explain during the talk

00:03:16,140 --> 00:03:21,900
but let me give you a little bit more of

00:03:18,510 --> 00:03:25,049
a context first so what we are seeing is

00:03:21,900 --> 00:03:29,010
the trend that computing power is moving

00:03:25,049 --> 00:03:32,940
from data centers towards devices small

00:03:29,010 --> 00:03:35,609
devices at at the edge small devices

00:03:32,940 --> 00:03:37,620
like for example smart robots which are

00:03:35,609 --> 00:03:39,510
orchestrated in a factory which is an

00:03:37,620 --> 00:03:42,150
example from the industrial Internet of

00:03:39,510 --> 00:03:45,690
Things or another example would be a

00:03:42,150 --> 00:03:48,420
SmartWatch which can already Bri process

00:03:45,690 --> 00:03:53,700
a lot of data before sending it out to

00:03:48,420 --> 00:03:57,930
the cloud at all edge computing is for

00:03:53,700 --> 00:04:00,980
me concerned with processing data at a

00:03:57,930 --> 00:04:06,209
location where the data is originated or

00:04:00,980 --> 00:04:10,230
where it is needed but actually there is

00:04:06,209 --> 00:04:12,720
not just one level of computing notes

00:04:10,230 --> 00:04:15,810
and devices we see actually there are

00:04:12,720 --> 00:04:18,329
multiple levels and that is what for

00:04:15,810 --> 00:04:21,840
computing adds to the definition for me

00:04:18,329 --> 00:04:23,880
to adds computing there are is of course

00:04:21,840 --> 00:04:25,979
the computing power in the data center

00:04:23,880 --> 00:04:27,010
but then they are also intelligent base

00:04:25,979 --> 00:04:29,730
stations

00:04:27,010 --> 00:04:33,280
intelligent hardware network hardware

00:04:29,730 --> 00:04:40,150
intelligent gateways and smart devices

00:04:33,280 --> 00:04:42,370
and sensors and actors but this is just

00:04:40,150 --> 00:04:45,460
one trend we are seeing another third

00:04:42,370 --> 00:04:47,770
trend is within the vehicle itself a lot

00:04:45,460 --> 00:04:49,630
is changing about the electronics

00:04:47,770 --> 00:04:52,780
architecture in the vehicle country we

00:04:49,630 --> 00:04:54,970
have an architecture called distributed

00:04:52,780 --> 00:04:59,260
electronics architecture which is

00:04:54,970 --> 00:05:03,340
comprised of maybe 70 80 90 100 plus

00:04:59,260 --> 00:05:05,200
control units and this each of these

00:05:03,340 --> 00:05:07,600
control ins with a very specific

00:05:05,200 --> 00:05:09,910
software version and each of the control

00:05:07,600 --> 00:05:12,880
units have the need to communicate with

00:05:09,910 --> 00:05:15,490
each other and a lot of them also have

00:05:12,880 --> 00:05:18,250
real-time requirements this is a very

00:05:15,490 --> 00:05:22,360
complex task to manage and system to

00:05:18,250 --> 00:05:26,950
manage for the automotive manufacturers

00:05:22,360 --> 00:05:29,860
so the first idea is to combine and

00:05:26,950 --> 00:05:34,030
bundle functionality based on domains or

00:05:29,860 --> 00:05:36,730
maybe even cross domains on a few more

00:05:34,030 --> 00:05:40,690
powerful Hardware within the vehicle and

00:05:36,730 --> 00:05:43,840
this just meaning bundling functionality

00:05:40,690 --> 00:05:46,390
from the existing is used and putting it

00:05:43,840 --> 00:05:50,470
on somewhat decent hardware and even one

00:05:46,390 --> 00:05:53,610
more step forward is that we couldn't

00:05:50,470 --> 00:05:56,650
think of a hybrid approach in the future

00:05:53,610 --> 00:05:59,200
critical software of course needs to be

00:05:56,650 --> 00:06:01,480
in the way vehicle safety relevant and

00:05:59,200 --> 00:06:03,370
all the other critical arms of the

00:06:01,480 --> 00:06:05,920
button maybe there could be found some

00:06:03,370 --> 00:06:07,480
functionality outside the vehicle which

00:06:05,920 --> 00:06:10,270
could be on deployed and some edge

00:06:07,480 --> 00:06:14,650
components like base stations or even

00:06:10,270 --> 00:06:17,230
maybe in the cloud to summarize Porsche

00:06:14,650 --> 00:06:20,070
is transforming from a sports car

00:06:17,230 --> 00:06:22,870
manufacturers to a mobility provider

00:06:20,070 --> 00:06:25,030
computing power is moving more towards

00:06:22,870 --> 00:06:28,720
the edge and is now available there for

00:06:25,030 --> 00:06:31,390
in our case at the vehicle also in the

00:06:28,720 --> 00:06:35,260
vehicle the electronics architecture is

00:06:31,390 --> 00:06:38,350
changing this all compare combined with

00:06:35,260 --> 00:06:40,630
the need and expectation of customer to

00:06:38,350 --> 00:06:43,480
use digital services as

00:06:40,630 --> 00:06:46,780
convened as they used to this creates

00:06:43,480 --> 00:06:48,580
the need to use new approach different

00:06:46,780 --> 00:06:51,040
as approach to create software

00:06:48,580 --> 00:06:53,320
especially distributed software in

00:06:51,040 --> 00:06:57,720
component with components inside the

00:06:53,320 --> 00:07:00,730
vehicle and also on on the cloud

00:06:57,720 --> 00:07:03,310
to summarize the expectation that I have

00:07:00,730 --> 00:07:07,330
created a small haiku I call it the

00:07:03,310 --> 00:07:09,250
automotive edge or also at computing CF

00:07:07,330 --> 00:07:11,890
push haiku which is of course based on

00:07:09,250 --> 00:07:16,350
on since uber is famous if push icon and

00:07:11,890 --> 00:07:20,710
it reads like this here's my source code

00:07:16,350 --> 00:07:23,170
run it on the action cloud I do not care

00:07:20,710 --> 00:07:26,260
how so my source code of course means

00:07:23,170 --> 00:07:28,750
software components which can run in the

00:07:26,260 --> 00:07:31,000
vehicle work also in the cloud action

00:07:28,750 --> 00:07:33,610
cloud shows the distributed nature of

00:07:31,000 --> 00:07:36,070
the automotive cloud I do not care how

00:07:33,610 --> 00:07:40,360
but of course it must be fast reliable

00:07:36,070 --> 00:07:42,160
and auditable and secure and so on a lot

00:07:40,360 --> 00:07:45,340
of functional non-functional

00:07:42,160 --> 00:07:46,990
requirements them just read it again

00:07:45,340 --> 00:07:50,380
here's my source code run it on the

00:07:46,990 --> 00:07:53,440
urgent cloud I do not care how to bring

00:07:50,380 --> 00:07:56,020
the automotive cloud and the idea of it

00:07:53,440 --> 00:08:01,060
really into existence we started a few

00:07:56,020 --> 00:08:06,820
years back and small research project to

00:08:01,060 --> 00:08:10,300
actually try it out and we wanted to see

00:08:06,820 --> 00:08:12,970
what things we need to cover to actually

00:08:10,300 --> 00:08:15,070
do it and three validations point we

00:08:12,970 --> 00:08:18,160
defined the first was a digital twin

00:08:15,070 --> 00:08:20,140
which we wanted to embrace from the edge

00:08:18,160 --> 00:08:22,630
computing paradigm the second one was a

00:08:20,140 --> 00:08:25,300
powerful license concept we were

00:08:22,630 --> 00:08:29,800
thinking of and the third one was about

00:08:25,300 --> 00:08:32,130
what requirements are needed and should

00:08:29,800 --> 00:08:35,890
be posed on underlying platform to

00:08:32,130 --> 00:08:40,030
develop future mobility services Daniel

00:08:35,890 --> 00:08:42,910
as you were with some colleagues from

00:08:40,030 --> 00:08:46,330
rev up in the project in the research

00:08:42,910 --> 00:08:49,000
project how did we actually validate the

00:08:46,330 --> 00:08:51,550
digital twin concept I guess first you

00:08:49,000 --> 00:08:54,640
should know what digital twin is you may

00:08:51,550 --> 00:08:56,920
say it's a virtual model of a process

00:08:54,640 --> 00:08:59,710
or a service and also the bridge between

00:08:56,920 --> 00:09:01,960
the physical and digital world in our

00:08:59,710 --> 00:09:04,149
ocean we've implemented a component

00:09:01,960 --> 00:09:06,460
called pico shadow which was the

00:09:04,149 --> 00:09:08,950
services possible for communication as

00:09:06,460 --> 00:09:11,080
well as state synchronization of every

00:09:08,950 --> 00:09:14,080
single week registered in the platform

00:09:11,080 --> 00:09:17,649
our design was based on a current and

00:09:14,080 --> 00:09:19,540
desired state idea so the vehicle was

00:09:17,649 --> 00:09:21,850
reporting its currency to the platform

00:09:19,540 --> 00:09:24,570
and on the other hand platform strength

00:09:21,850 --> 00:09:26,709
dubbed a vehicle state to desired value

00:09:24,570 --> 00:09:29,080
because of that we are able to build

00:09:26,709 --> 00:09:30,640
such coronal cases as getting the

00:09:29,080 --> 00:09:33,510
correct vehicle eight after it went

00:09:30,640 --> 00:09:36,370
offline and then back online

00:09:33,510 --> 00:09:38,860
this face successfully showed us that

00:09:36,370 --> 00:09:42,040
this pattern works very well for

00:09:38,860 --> 00:09:44,020
automotive use case yes actually it

00:09:42,040 --> 00:09:47,110
worked out very well and we see later in

00:09:44,020 --> 00:09:49,839
the show team you know how we decorated

00:09:47,110 --> 00:09:52,930
the tool twin concept regarding licenses

00:09:49,839 --> 00:09:55,540
we were thinking about a concept which

00:09:52,930 --> 00:09:58,600
supports a sophisticated sales concept

00:09:55,540 --> 00:10:02,110
for example a user could buy a service

00:09:58,600 --> 00:10:05,230
which is only valid for in a specific

00:10:02,110 --> 00:10:06,940
region or in a specific city or a

00:10:05,230 --> 00:10:11,020
service which is just available

00:10:06,940 --> 00:10:13,839
throughout a few months each year or it

00:10:11,020 --> 00:10:19,000
could be that user buys a service and

00:10:13,839 --> 00:10:22,300
wants to use it in multiple cars so how

00:10:19,000 --> 00:10:25,089
did that work out this very generic

00:10:22,300 --> 00:10:28,060
license concept in complex license so

00:10:25,089 --> 00:10:31,779
just like you mentioned we approached

00:10:28,060 --> 00:10:35,410
this idea and decided to keep this

00:10:31,779 --> 00:10:40,570
design as generic as possible what our

00:10:35,410 --> 00:10:43,120
implemented system licensing allowed us

00:10:40,570 --> 00:10:44,980
to fast and easy license creation using

00:10:43,120 --> 00:10:46,570
two predefined constraints like

00:10:44,980 --> 00:10:50,110
geolocation or limited number of

00:10:46,570 --> 00:10:51,610
visitors and the ability of automatic

00:10:50,110 --> 00:10:53,770
synchronization between the car and the

00:10:51,610 --> 00:10:58,209
cloud and sure that voices are

00:10:53,770 --> 00:11:00,370
propagated in real-time right right as I

00:10:58,209 --> 00:11:02,589
was working before with Cloud Foundry

00:11:00,370 --> 00:11:05,709
I wanted to bring over the developer

00:11:02,589 --> 00:11:07,690
experience and the ease to create these

00:11:05,709 --> 00:11:11,620
kind of services in the application

00:11:07,690 --> 00:11:14,500
also to this project as we were using

00:11:11,620 --> 00:11:17,710
cloud 20 what did we find out when using

00:11:14,500 --> 00:11:19,840
this for our project so as you all know

00:11:17,710 --> 00:11:22,240
when you use crowdfunder it may focus on

00:11:19,840 --> 00:11:24,550
writing software as underlying buffer we

00:11:22,240 --> 00:11:27,550
will do the rest for you and furthermore

00:11:24,550 --> 00:11:30,370
and even driven IOT socially required to

00:11:27,550 --> 00:11:32,260
have resilient platform underneath the

00:11:30,370 --> 00:11:34,870
deployment to crowdfunding is extremely

00:11:32,260 --> 00:11:37,960
developer friendly because of CF portion

00:11:34,870 --> 00:11:39,670
right and deployment of server the

00:11:37,960 --> 00:11:41,260
capital micro services the cloud was

00:11:39,670 --> 00:11:44,770
much easier than running them on my own

00:11:41,260 --> 00:11:46,750
machine also called funded availed from

00:11:44,770 --> 00:11:50,260
services provided via our marketplace

00:11:46,750 --> 00:11:53,320
for example for data storage right and

00:11:50,260 --> 00:11:55,810
so how was the project set up maybe you

00:11:53,320 --> 00:11:58,300
can tell the bit about that we worked in

00:11:55,810 --> 00:12:00,700
small agile cross-functional team with

00:11:58,300 --> 00:12:02,140
one week iterations we tackled each use

00:12:00,700 --> 00:12:04,960
case with brainstorming and

00:12:02,140 --> 00:12:06,670
architectural session and before we

00:12:04,960 --> 00:12:09,340
started coding we had to consider every

00:12:06,670 --> 00:12:12,340
corner case let's take an example of

00:12:09,340 --> 00:12:14,110
remotely opening the doors so when you

00:12:12,340 --> 00:12:16,900
want to open the doors remotely you want

00:12:14,110 --> 00:12:18,850
to do it immediately or not at all as

00:12:16,900 --> 00:12:22,330
some of the comments have specific time

00:12:18,850 --> 00:12:24,550
to leave yes with a very skilled team

00:12:22,330 --> 00:12:26,890
from creo but we could easily validate

00:12:24,550 --> 00:12:28,720
these points maybe you can tell us a

00:12:26,890 --> 00:12:30,790
little bit more about the technical

00:12:28,720 --> 00:12:33,490
details of the project so to develop

00:12:30,790 --> 00:12:35,500
such complex solution we need to use

00:12:33,490 --> 00:12:37,750
several technologies so the state

00:12:35,500 --> 00:12:40,720
synchronization was created on top of

00:12:37,750 --> 00:12:44,140
encrypted protocol and state storage

00:12:40,720 --> 00:12:46,000
using no seeker MongoDB database our

00:12:44,140 --> 00:12:48,970
vehicle was mocked using docker

00:12:46,000 --> 00:12:50,830
container and within that container we

00:12:48,970 --> 00:12:52,690
had multiple microservices

00:12:50,830 --> 00:12:55,060
which were representing vehicle

00:12:52,690 --> 00:12:57,580
functionalities and they were based on

00:12:55,060 --> 00:12:58,210
DV particle VB is Vosburgh an

00:12:57,580 --> 00:13:00,460
infotainment

00:12:58,210 --> 00:13:03,100
web interface and it is World Wide Web

00:13:00,460 --> 00:13:06,100
Consortium standard on how to use rest

00:13:03,100 --> 00:13:09,010
within the infotainment additionally we

00:13:06,100 --> 00:13:11,140
also implemented remote calls with plain

00:13:09,010 --> 00:13:13,480
rest and with the assumptions that

00:13:11,140 --> 00:13:16,630
future vehicles will be using IP version

00:13:13,480 --> 00:13:19,780
6 right there were a lot of assumptions

00:13:16,630 --> 00:13:21,020
we had to make for future beings right

00:13:19,780 --> 00:13:23,140
so what will

00:13:21,020 --> 00:13:26,840
summarize the major findings on that

00:13:23,140 --> 00:13:28,580
this project showed us that crowdfunders

00:13:26,840 --> 00:13:32,150
prototyping platform worked out very

00:13:28,580 --> 00:13:36,920
well especially in terms of its services

00:13:32,150 --> 00:13:38,810
and additionally we saw that future of

00:13:36,920 --> 00:13:42,230
automotive industry needs to have a

00:13:38,810 --> 00:13:48,950
reliable IOT platform sadly there was no

00:13:42,230 --> 00:13:51,110
platform available out of the box here I

00:13:48,950 --> 00:13:54,350
would like to show you the result of the

00:13:51,110 --> 00:13:57,170
incubator project so in the right right

00:13:54,350 --> 00:13:59,810
side we may see CLI simulator running

00:13:57,170 --> 00:14:02,720
inside a vehicle in this case is not

00:13:59,810 --> 00:14:05,150
really Porsche but docker container

00:14:02,720 --> 00:14:07,310
running from cloud foundry on the left

00:14:05,150 --> 00:14:11,840
side we see a demo application showing

00:14:07,310 --> 00:14:13,340
current vehicle location where which

00:14:11,840 --> 00:14:15,680
also is deployed to the crowdfunder

00:14:13,340 --> 00:14:18,280
under that we see a postman which

00:14:15,680 --> 00:14:22,940
despite the current vehicle state from

00:14:18,280 --> 00:14:24,350
digital twin and under the simulator we

00:14:22,940 --> 00:14:26,840
see em get the client listening to

00:14:24,350 --> 00:14:28,940
readings topics where you may notice a

00:14:26,840 --> 00:14:30,830
bleats coming from the vehicle our

00:14:28,940 --> 00:14:34,160
scenario is licensed based on

00:14:30,830 --> 00:14:36,200
geolocation which is enabled only in re

00:14:34,160 --> 00:14:39,370
initiative dot and you may see that

00:14:36,200 --> 00:14:42,520
license is enabled when the value is on

00:14:39,370 --> 00:14:45,310
so let's go through our scenario

00:14:42,520 --> 00:14:48,830
first we are starting the simulator

00:14:45,310 --> 00:14:51,560
routing the route and picking one from

00:14:48,830 --> 00:14:53,510
Stuttgart to Frankfurt for simplicity of

00:14:51,560 --> 00:14:57,470
demonstration the route isn't following

00:14:53,510 --> 00:14:59,060
any road and as we may notice as the

00:14:57,470 --> 00:15:01,070
heck is moving away from Stuttgart

00:14:59,060 --> 00:15:04,370
you will notice here that the value will

00:15:01,070 --> 00:15:07,670
change to off and yeah it is

00:15:04,370 --> 00:15:11,020
and when our vehicle will be moving back

00:15:07,670 --> 00:15:16,100
to Stuttgart it will be enabled again

00:15:11,020 --> 00:15:19,210
yeah right with that impressive result

00:15:16,100 --> 00:15:22,370
using digital tween implementing

00:15:19,210 --> 00:15:25,040
sophisticated license concept shorter

00:15:22,370 --> 00:15:27,470
the management we decide to continue the

00:15:25,040 --> 00:15:30,530
project into a prototyping phase and

00:15:27,470 --> 00:15:32,780
actually bringing it on some real

00:15:30,530 --> 00:15:34,380
hardware's this was all just simulated

00:15:32,780 --> 00:15:37,800
as we just heard

00:15:34,380 --> 00:15:40,770
so how was the project set up in in that

00:15:37,800 --> 00:15:43,050
second phase in this iteration we have

00:15:40,770 --> 00:15:44,490
separate functional teams first one

00:15:43,050 --> 00:15:46,830
focused on the hippie software

00:15:44,490 --> 00:15:50,700
development and second one on code

00:15:46,830 --> 00:15:53,910
development but this time our project

00:15:50,700 --> 00:15:56,040
team was part of bigger HIV strain where

00:15:53,910 --> 00:15:58,710
every team prepared its own contribution

00:15:56,040 --> 00:16:01,290
to product increment and together we're

00:15:58,710 --> 00:16:04,050
creating a future of automotive industry

00:16:01,290 --> 00:16:06,720
working with so many teams on so many

00:16:04,050 --> 00:16:11,100
levels was an amazing experience both

00:16:06,720 --> 00:16:13,710
for us developers yes it was scaled up a

00:16:11,100 --> 00:16:16,170
lot can you tell us a little bit on what

00:16:13,710 --> 00:16:17,460
could be taken from the earlier

00:16:16,170 --> 00:16:20,190
incubator project

00:16:17,460 --> 00:16:22,350
so assuming earth digital twin once

00:16:20,190 --> 00:16:23,970
again we paid a lot of attention to this

00:16:22,350 --> 00:16:26,250
pattern as it seems to be an idea

00:16:23,970 --> 00:16:29,370
approach in IOT ecosystem it's

00:16:26,250 --> 00:16:31,500
extensible we are able to integrate with

00:16:29,370 --> 00:16:34,380
many vehicle subsystems without any

00:16:31,500 --> 00:16:37,740
changes and additionally on top of it we

00:16:34,380 --> 00:16:40,250
implemented our own query language right

00:16:37,740 --> 00:16:44,040
well what does subscription means here

00:16:40,250 --> 00:16:47,000
so subscription here is a process of

00:16:44,040 --> 00:16:49,350
gathering big data where cloud is

00:16:47,000 --> 00:16:51,840
subscribing for the events coming from

00:16:49,350 --> 00:16:53,790
the vehicle and based on those events we

00:16:51,840 --> 00:16:56,940
may create new vehicle functionalities

00:16:53,790 --> 00:17:00,660
like for example service which will help

00:16:56,940 --> 00:17:03,090
driver to avoid obstacles on a road it's

00:17:00,660 --> 00:17:05,040
worth mentioning that insight very there

00:17:03,090 --> 00:17:07,380
are dozens of VB micro services and

00:17:05,040 --> 00:17:09,150
because of our solution service

00:17:07,380 --> 00:17:11,640
developers are able to subscribe to them

00:17:09,150 --> 00:17:15,089
transparently yes

00:17:11,640 --> 00:17:21,089
were there any automotive implications

00:17:15,089 --> 00:17:23,310
on on the project so development of

00:17:21,089 --> 00:17:25,860
technologies before automotive industry

00:17:23,310 --> 00:17:28,650
creates a great challenge in testing as

00:17:25,860 --> 00:17:31,880
an interesting question arises how to

00:17:28,650 --> 00:17:34,920
the software running inside vehicle I

00:17:31,880 --> 00:17:38,370
can give you a tip containerization is

00:17:34,920 --> 00:17:41,120
the key in this phase we were focused on

00:17:38,370 --> 00:17:43,770
real hardware applied to the vehicle and

00:17:41,120 --> 00:17:45,720
from the start we need to have tested

00:17:43,770 --> 00:17:47,940
software to have stable version during

00:17:45,720 --> 00:17:50,430
integration window on target hardware

00:17:47,940 --> 00:17:52,860
for that we decided to deploy our car to

00:17:50,430 --> 00:17:55,200
the cloud and to have an automated and

00:17:52,860 --> 00:17:58,410
to end tests and for that we picked

00:17:55,200 --> 00:18:01,140
kubernetes as our platform right you

00:17:58,410 --> 00:18:03,660
just mentioned kubernetes so how did

00:18:01,140 --> 00:18:05,850
cloud foundry cloud foundry marketplace

00:18:03,660 --> 00:18:08,970
and Kuban a display together in our

00:18:05,850 --> 00:18:10,230
project so our solution was utilizing

00:18:08,970 --> 00:18:12,660
cloud foundry and kubernetes

00:18:10,230 --> 00:18:14,490
side-by-side as both of them may be used

00:18:12,660 --> 00:18:16,950
for different use cases for example

00:18:14,490 --> 00:18:18,690
crowdfund is great application runtime

00:18:16,950 --> 00:18:21,060
and super external services provided by

00:18:18,690 --> 00:18:23,150
our marketplace and on the other hand

00:18:21,060 --> 00:18:28,950
kubernetes has native containers and

00:18:23,150 --> 00:18:30,750
political support also one of our first

00:18:28,950 --> 00:18:33,510
requirements was to have containerized

00:18:30,750 --> 00:18:35,610
software for a vehicle and because of

00:18:33,510 --> 00:18:37,470
that it was much easier to create CI a

00:18:35,610 --> 00:18:40,530
CD pipelines with conkers on top of

00:18:37,470 --> 00:18:43,500
crowdfunder and kubernetes there was

00:18:40,530 --> 00:18:45,260
wagon cold panel installation was also

00:18:43,500 --> 00:18:48,480
very useful in terms of its services

00:18:45,260 --> 00:18:54,540
provided we use it we use such services

00:18:48,480 --> 00:18:56,610
like RabbitMQ MongoDB or s3 yes right we

00:18:54,540 --> 00:18:59,760
could use a lot of services from the

00:18:56,610 --> 00:19:03,030
marketplace that right one other point

00:18:59,760 --> 00:19:05,190
was very important and a core idea that

00:19:03,030 --> 00:19:08,700
our platform the automotive cloud

00:19:05,190 --> 00:19:10,530
platform should be somehow independent

00:19:08,700 --> 00:19:12,900
from the underlying communication

00:19:10,530 --> 00:19:15,300
platform and so can you tell us a little

00:19:12,900 --> 00:19:17,370
bit about the integration into different

00:19:15,300 --> 00:19:21,510
communication platform it can differ

00:19:17,370 --> 00:19:23,070
from maybe each region of course oh yeah

00:19:21,510 --> 00:19:26,580
that was one of the most challenging

00:19:23,070 --> 00:19:29,190
part to verify different communication

00:19:26,580 --> 00:19:30,660
platforms as they have different

00:19:29,190 --> 00:19:33,030
communication protocols different

00:19:30,660 --> 00:19:36,060
requirements and I said developer I can

00:19:33,030 --> 00:19:38,820
say we have met with a lot of obstacles

00:19:36,060 --> 00:19:41,520
on our journey to achieve one unified

00:19:38,820 --> 00:19:43,920
architecture for that but in the end

00:19:41,520 --> 00:19:50,220
were able to provide one is a platform

00:19:43,920 --> 00:19:53,910
to rule them all here is an example of

00:19:50,220 --> 00:19:55,440
how we utilize our solution on the left

00:19:53,910 --> 00:19:58,980
side you may see a demo application

00:19:55,440 --> 00:20:00,960
which allows to check the current

00:19:58,980 --> 00:20:04,169
battery state of the car

00:20:00,960 --> 00:20:07,980
and on the right side you may see a

00:20:04,169 --> 00:20:10,980
diagram which shows how our unified

00:20:07,980 --> 00:20:13,529
architecture was applied here you may

00:20:10,980 --> 00:20:15,870
notice the same recive sources on a

00:20:13,529 --> 00:20:19,110
connector gateway and an LG service

00:20:15,870 --> 00:20:21,270
level it's our unified API and it's

00:20:19,110 --> 00:20:23,779
white across all communication platforms

00:20:21,270 --> 00:20:26,549
without any changes in source code

00:20:23,779 --> 00:20:28,919
additionally our social provides

00:20:26,549 --> 00:20:31,770
seamless customer experience even if the

00:20:28,919 --> 00:20:33,809
car is in underground garage and on the

00:20:31,770 --> 00:20:36,480
other hand we also help service

00:20:33,809 --> 00:20:39,149
developers with providing them fallback

00:20:36,480 --> 00:20:41,580
paths by getting the last reading from

00:20:39,149 --> 00:20:47,039
vehicle shadow or by letting them update

00:20:41,580 --> 00:20:48,720
vehicle a synchronously our solution the

00:20:47,039 --> 00:20:51,539
automotive cloud consists of several

00:20:48,720 --> 00:20:53,820
layers starting from the right side you

00:20:51,539 --> 00:20:56,190
may see cloud platform where service

00:20:53,820 --> 00:20:59,309
developers may add the new features and

00:20:56,190 --> 00:21:01,260
integrate them with very good and for

00:20:59,309 --> 00:21:03,950
them it's also seamless experience as

00:21:01,260 --> 00:21:07,760
service to service communication

00:21:03,950 --> 00:21:10,200
collector gateway creates unified API

00:21:07,760 --> 00:21:12,510
for communication with the vehicle and

00:21:10,200 --> 00:21:14,880
all the details how to connect the

00:21:12,510 --> 00:21:16,440
vehicle what protocol to use that's the

00:21:14,880 --> 00:21:20,669
responsibility of communication platform

00:21:16,440 --> 00:21:25,679
here and the IOT device about which we

00:21:20,669 --> 00:21:28,020
talking about here is our car so here

00:21:25,679 --> 00:21:29,789
you may notice the IOT agent and the IOT

00:21:28,020 --> 00:21:30,090
gateway which communicate with each

00:21:29,789 --> 00:21:32,640
other

00:21:30,090 --> 00:21:35,070
this implements the gateway in the agent

00:21:32,640 --> 00:21:37,409
paradigm in IOT world which allows to

00:21:35,070 --> 00:21:39,929
have horizontal escapes ocean up to

00:21:37,409 --> 00:21:42,570
million of devices you may notice here

00:21:39,929 --> 00:21:44,970
resource based communication as well as

00:21:42,570 --> 00:21:48,210
agent initiated communication based on

00:21:44,970 --> 00:21:51,330
messaging of course digital tween is

00:21:48,210 --> 00:21:53,669
very important here because it helped us

00:21:51,330 --> 00:21:54,029
with vehicle state serialization as well

00:21:53,669 --> 00:21:56,370
as

00:21:54,029 --> 00:21:59,220
simplifies feature integration by its

00:21:56,370 --> 00:22:02,100
abstraction and query language our

00:21:59,220 --> 00:22:03,960
social is extensible we may add new

00:22:02,100 --> 00:22:05,789
features to the cloud and there will be

00:22:03,960 --> 00:22:08,669
as well Institute of the hikmah support

00:22:05,789 --> 00:22:10,470
and on the other hand our social is also

00:22:08,669 --> 00:22:12,870
accessible in terms of geographic area

00:22:10,470 --> 00:22:14,630
where you want to drive a car if one

00:22:12,870 --> 00:22:16,280
communication platform is not available

00:22:14,630 --> 00:22:19,880
we may use another one without any

00:22:16,280 --> 00:22:22,850
changes in a source code on top of that

00:22:19,880 --> 00:22:24,950
we decided to create C ICD pipelines and

00:22:22,850 --> 00:22:28,700
test framework to ensure quality and

00:22:24,950 --> 00:22:31,220
durability of our solution in such

00:22:28,700 --> 00:22:33,169
challenging industry as automotive it's

00:22:31,220 --> 00:22:36,440
very important to have end-to-end tests

00:22:33,169 --> 00:22:40,010
and one that what does end-to-end tests

00:22:36,440 --> 00:22:43,610
means here so I will show you on example

00:22:40,010 --> 00:22:45,830
we have our test scenario which will get

00:22:43,610 --> 00:22:48,409
the battery state so it communicates

00:22:45,830 --> 00:22:50,600
with an LD service and then this service

00:22:48,409 --> 00:22:52,820
sends a request to our connector gateway

00:22:50,600 --> 00:22:55,460
which is responsible for sending the

00:22:52,820 --> 00:22:58,070
request to the correct vehicle and then

00:22:55,460 --> 00:22:59,809
agent inside the vehicle is sending the

00:22:58,070 --> 00:23:02,299
request to test instrumented

00:22:59,809 --> 00:23:04,730
instrumented software which is possible

00:23:02,299 --> 00:23:06,890
for pushing the response for this

00:23:04,730 --> 00:23:10,390
request to our test storage which is

00:23:06,890 --> 00:23:12,620
then validated for expected value

00:23:10,390 --> 00:23:15,710
because of that we are able to deploy

00:23:12,620 --> 00:23:17,809
car to the cloud and test it before

00:23:15,710 --> 00:23:23,260
installing the software on a river he

00:23:17,809 --> 00:23:25,909
could write as we talked about the

00:23:23,260 --> 00:23:28,010
marketplace before and the services we

00:23:25,909 --> 00:23:31,100
are using I just wanted to highlight

00:23:28,010 --> 00:23:33,950
that in cloud foundry we found it very

00:23:31,100 --> 00:23:36,409
elegant to use the services from the

00:23:33,950 --> 00:23:38,659
marketplace and here in the marketplace

00:23:36,409 --> 00:23:41,360
colleagues from Volkswagen Porsche and

00:23:38,659 --> 00:23:43,730
Audi contributed different kind of

00:23:41,360 --> 00:23:45,940
services ranging from database storage

00:23:43,730 --> 00:23:48,350
services legal services as well a

00:23:45,940 --> 00:23:52,490
development tooling service and one

00:23:48,350 --> 00:23:55,070
example in Daniel which show now is

00:23:52,490 --> 00:23:57,049
about continuous integration service

00:23:55,070 --> 00:23:59,179
yeah so we have used conkers as a

00:23:57,049 --> 00:24:01,309
service from Volkswagen marketplace and

00:23:59,179 --> 00:24:03,679
here you may notice how we push the

00:24:01,309 --> 00:24:05,090
latest changes onboard so with every

00:24:03,679 --> 00:24:08,059
coming to the master branch our

00:24:05,090 --> 00:24:09,909
concourse bins docker image and here is

00:24:08,059 --> 00:24:12,710
worth measuring that it may even use

00:24:09,909 --> 00:24:15,080
specialized docker images which are able

00:24:12,710 --> 00:24:17,840
to run on electronic computing unit

00:24:15,080 --> 00:24:19,730
inside the vehicle and those images

00:24:17,840 --> 00:24:22,370
differ a lot from regular Alpine or

00:24:19,730 --> 00:24:25,669
Ubuntu image then our image is pushed to

00:24:22,370 --> 00:24:27,970
the registry and Python is creating

00:24:25,669 --> 00:24:30,640
device in microsoft azure IOT

00:24:27,970 --> 00:24:33,910
when device is registered the IOT a

00:24:30,640 --> 00:24:39,480
trunk on it runs the pulls the latest

00:24:33,910 --> 00:24:43,810
image and runs it right - to summarize

00:24:39,480 --> 00:24:48,340
we found in the project it very valuable

00:24:43,810 --> 00:24:52,660
to use Cloud Foundry especially in terms

00:24:48,340 --> 00:24:56,590
of speed and reliability also we found

00:24:52,660 --> 00:24:58,860
it very important to use the marketplace

00:24:56,590 --> 00:25:03,310
this really showed the power of the

00:24:58,860 --> 00:25:06,880
ecosystem to use easily use external

00:25:03,310 --> 00:25:11,670
services in our solution especially in

00:25:06,880 --> 00:25:15,910
such quickly developing industrious IT

00:25:11,670 --> 00:25:18,220
there is hard to choose which platform

00:25:15,910 --> 00:25:19,750
to pick but the good news is that you

00:25:18,220 --> 00:25:22,750
don't need to pick just one

00:25:19,750 --> 00:25:25,810
as called panda and Cuba needs combined

00:25:22,750 --> 00:25:28,900
are superior and they let us developers

00:25:25,810 --> 00:25:31,900
with way on thinking here is my source

00:25:28,900 --> 00:25:37,360
code run it on the edge in crowd I do

00:25:31,900 --> 00:25:39,850
not care how and last but not least for

00:25:37,360 --> 00:25:42,610
us developers is very important to focus

00:25:39,850 --> 00:25:45,370
on CI CD from the beginning as the most

00:25:42,610 --> 00:25:48,360
valuable product is one running called

00:25:45,370 --> 00:25:51,970
clients device in this case in a car

00:25:48,360 --> 00:25:54,640
right so that concludes our short talk

00:25:51,970 --> 00:25:56,940
about software development and

00:25:54,640 --> 00:25:59,290
deployment in the automotive industry

00:25:56,940 --> 00:26:01,780
using the approach of an automotive

00:25:59,290 --> 00:26:03,880
cloud thank you very much for your

00:26:01,780 --> 00:26:05,890
attention and don't forget here's my

00:26:03,880 --> 00:26:08,170
source code run it on the urgent cloud I

00:26:05,890 --> 00:26:10,930
do not care how if there are any

00:26:08,170 --> 00:26:11,740
questions just yeah feel free I think we

00:26:10,930 --> 00:26:13,890
have two minutes left

00:26:11,740 --> 00:26:21,029
Thanks

00:26:13,890 --> 00:26:21,029
[Applause]

00:26:34,009 --> 00:26:39,720
so I'm creating protocol was only used

00:26:37,259 --> 00:26:42,570
in the first phase which was incubator

00:26:39,720 --> 00:26:45,269
project and our vehicle was mocked so we

00:26:42,570 --> 00:26:47,970
never actually connected with real

00:26:45,269 --> 00:26:50,100
vehicle so all the connection was made

00:26:47,970 --> 00:26:53,730
inside the crowdfunding and we haven't

00:26:50,100 --> 00:26:55,559
seen any problems with latency right in

00:26:53,730 --> 00:26:59,519
the second part of the project we were

00:26:55,559 --> 00:27:03,840
using the Microsoft Azure abstraction

00:26:59,519 --> 00:27:06,840
which also is using mqtt the interesting

00:27:03,840 --> 00:27:09,269
cases in the automotive world is more

00:27:06,840 --> 00:27:11,490
regarding the wake up of the system

00:27:09,269 --> 00:27:14,909
right when it actually gets on line when

00:27:11,490 --> 00:27:17,850
it needs to be how always-on can it be

00:27:14,909 --> 00:27:22,320
in the automotive world which is

00:27:17,850 --> 00:27:24,210
interesting talks between electrical and

00:27:22,320 --> 00:27:26,129
combustion engine vehicles it also

00:27:24,210 --> 00:27:29,490
differs and there are some trade-off and

00:27:26,129 --> 00:27:33,720
risks and to make right how always-on it

00:27:29,490 --> 00:27:37,080
can be but after that latency turned out

00:27:33,720 --> 00:27:42,869
in our smaller tests to be ok I would

00:27:37,080 --> 00:27:45,499
say ok and if it appeared it the network

00:27:42,869 --> 00:27:49,159
infrastructure is of course the most

00:27:45,499 --> 00:27:53,190
important factor of that right if it's

00:27:49,159 --> 00:27:55,289
what she or what what happened during

00:27:53,190 --> 00:27:56,639
the network infrastructure and and so of

00:27:55,289 --> 00:28:00,629
course the network infrastructure

00:27:56,639 --> 00:28:08,480
connectivity is some challenge we always

00:28:00,629 --> 00:28:11,999
we always have at least until 5 G's yeah

00:28:08,480 --> 00:28:12,509
any other or you can also approach us

00:28:11,999 --> 00:28:15,440
later

00:28:12,509 --> 00:28:15,440
thank you thank you

00:28:15,520 --> 00:28:21,089

YouTube URL: https://www.youtube.com/watch?v=15tX51WnYFE


