Title: Bringing Buildpacks to Kubernetes - Dr. Nic Williams, Stark & Wayne
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Bringing Buildpacks to Kubernetes - Dr. Nic Williams, Stark & Wayne 

One of the most valuable features of Cloud Foundry has been “turn my source into a running, secure application”, powered by Cloud Foundry Buildpacks. You can now bring buildpacks with you if you’re migrating some workloads to Kubernetes.  In this session, we’ll consider some options for using Buildpacks with Kubernetes. We will cover the new Cloud Native Buildpacks, and possibilities for the Knative Build subsystem. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:05,490
presenting excellent all right thanks

00:00:03,389 --> 00:00:08,460
guys for asked me to to talk about this

00:00:05,490 --> 00:00:09,960
topic if I was to take the thing about

00:00:08,460 --> 00:00:14,160
Cloud Foundry I picked up Cloud Foundry

00:00:09,960 --> 00:00:16,020
picked up Heroku 2007 2008 I was in love

00:00:14,160 --> 00:00:19,560
with Ruby on Rails couldn't deploy it

00:00:16,020 --> 00:00:21,900
for and Heroku was both cheap slash

00:00:19,560 --> 00:00:23,730
free and and made deploying Ruby on

00:00:21,900 --> 00:00:25,140
Rails application is really easy shortly

00:00:23,730 --> 00:00:26,910
after that they they came out with a

00:00:25,140 --> 00:00:29,550
thing called build packs which meant

00:00:26,910 --> 00:00:30,090
that Heroku could now deploy arbitrary

00:00:29,550 --> 00:00:32,489
things

00:00:30,090 --> 00:00:34,410
so not just Ruby on Rails but Java and

00:00:32,489 --> 00:00:37,290
Python or all sorts of different things

00:00:34,410 --> 00:00:39,899
when Cloud Foundry first came out it did

00:00:37,290 --> 00:00:41,190
not have build packs when pivotal took

00:00:39,899 --> 00:00:43,200
over the Cloud Foundry project one of

00:00:41,190 --> 00:00:46,829
the first innovations they they declared

00:00:43,200 --> 00:00:48,420
was a must have was to to bring in the

00:00:46,829 --> 00:00:52,350
plug-and-play aspect of cloud foundry

00:00:48,420 --> 00:00:54,510
I love bill packs now I'm not going to

00:00:52,350 --> 00:00:57,930
spend a lot of time about what is a

00:00:54,510 --> 00:00:59,609
build pack I think we stayed fortunately

00:00:57,930 --> 00:01:02,280
I get to give another talk tomorrow on

00:00:59,609 --> 00:01:04,890
how to build one many people certainly

00:01:02,280 --> 00:01:06,180
this you're going to enjoy them other

00:01:04,890 --> 00:01:08,400
people will build the bill packs and

00:01:06,180 --> 00:01:09,720
that's part of why they're good is that

00:01:08,400 --> 00:01:12,720
you don't need to know what's in them

00:01:09,720 --> 00:01:14,580
except the value they bring and at

00:01:12,720 --> 00:01:15,570
eleven o'clock tomorrow is as office

00:01:14,580 --> 00:01:17,310
hours so if you want to talk to the

00:01:15,570 --> 00:01:20,060
build packs team or as members of them

00:01:17,310 --> 00:01:23,430
do I have any bill pack core team here

00:01:20,060 --> 00:01:25,259
excellent that's one that's it's almost

00:01:23,430 --> 00:01:27,270
enough that I can't talk about them

00:01:25,259 --> 00:01:29,220
negative way but you know not enough to

00:01:27,270 --> 00:01:31,439
feel like they're know if I say anything

00:01:29,220 --> 00:01:34,560
you want to clarify correct I appreciate

00:01:31,439 --> 00:01:36,060
if you chip in all right but I do want

00:01:34,560 --> 00:01:38,670
to get back to the problem with now this

00:01:36,060 --> 00:01:40,860
is for kubernetes but really and this is

00:01:38,670 --> 00:01:42,930
also for the future of cloud foundry the

00:01:40,860 --> 00:01:46,619
v3 build packs that I'm going to talk

00:01:42,930 --> 00:01:48,180
about but when kubernetes came along it

00:01:46,619 --> 00:01:50,399
kind of glossed over all the problems

00:01:48,180 --> 00:01:51,240
that people had living with docker and

00:01:50,399 --> 00:01:54,210
said hey let's just talk about

00:01:51,240 --> 00:01:55,950
scheduling that's new and we're still

00:01:54,210 --> 00:01:57,840
stuck with all the challenges of living

00:01:55,950 --> 00:02:01,020
with with or the packaging of docker and

00:01:57,840 --> 00:02:03,780
so therefore in the thrill of getting or

00:02:01,020 --> 00:02:05,850
at running at all I don't think we set

00:02:03,780 --> 00:02:08,069
ourselves up for success with the next

00:02:05,850 --> 00:02:12,390
ten years otherwise known as the day two

00:02:08,069 --> 00:02:13,420
problem bit like the sort of you know in

00:02:12,390 --> 00:02:15,340
Genesis

00:02:13,420 --> 00:02:17,980
day 1 day 2 day 3 doesn't missing mean

00:02:15,340 --> 00:02:21,040
days day 2 is 10 years or longer and

00:02:17,980 --> 00:02:23,680
it's all these problems that exist in

00:02:21,040 --> 00:02:25,480
the lifecycle of your app now in an

00:02:23,680 --> 00:02:27,310
ideal world you might get to separate

00:02:25,480 --> 00:02:28,630
them out by concerns to different

00:02:27,310 --> 00:02:30,640
organizations who might care about

00:02:28,630 --> 00:02:32,890
things so you might be building a Java

00:02:30,640 --> 00:02:34,810
spring app that doesn't mean you want to

00:02:32,890 --> 00:02:39,100
care about what's the best way to run a

00:02:34,810 --> 00:02:41,709
Java spring app or rails app etc but if

00:02:39,100 --> 00:02:44,200
you build a docker file then you've just

00:02:41,709 --> 00:02:45,819
given yourself that problem and it might

00:02:44,200 --> 00:02:47,230
not be obvious to organization that

00:02:45,819 --> 00:02:50,489
you've created yourself that problem or

00:02:47,230 --> 00:02:52,690
how to separate it out on platform

00:02:50,489 --> 00:02:54,040
different meaning perhaps when you use

00:02:52,690 --> 00:02:56,590
Koopa News hopefully that becomes more

00:02:54,040 --> 00:02:59,200
clear of a time this might be an ideal

00:02:56,590 --> 00:03:00,549
surprise room maybe more practically

00:02:59,200 --> 00:03:02,049
speaking you might be able to split them

00:03:00,549 --> 00:03:04,090
out like this and what I've changed in

00:03:02,049 --> 00:03:05,950
this case is to say that if not really

00:03:04,090 --> 00:03:08,140
if you've picked Ruby as your

00:03:05,950 --> 00:03:10,510
programming language you really can't

00:03:08,140 --> 00:03:14,230
separate out dependencies of all the

00:03:10,510 --> 00:03:16,840
gems you know that you pick or node the

00:03:14,230 --> 00:03:20,230
NPM packages you can't so say yeah we'd

00:03:16,840 --> 00:03:21,700
like to use XPO Express j/s but we'll

00:03:20,230 --> 00:03:23,440
let some other team figure out what

00:03:21,700 --> 00:03:25,329
version is the right version and will

00:03:23,440 --> 00:03:27,700
this build features it's a bit messier

00:03:25,329 --> 00:03:29,230
than that through the nature of

00:03:27,700 --> 00:03:30,760
packaging so you're going to have some

00:03:29,230 --> 00:03:32,320
and and what version of know do I need

00:03:30,760 --> 00:03:33,970
to use what version of Java can I use

00:03:32,320 --> 00:03:36,880
what version of Ruby you can't just let

00:03:33,970 --> 00:03:39,250
some other team pick that probably so

00:03:36,880 --> 00:03:40,660
it's a little Messier but nonetheless

00:03:39,250 --> 00:03:43,260
you do want to start thinking this

00:03:40,660 --> 00:03:46,329
through otherwise the dev team

00:03:43,260 --> 00:03:47,620
disappears here's the problem that best

00:03:46,329 --> 00:03:49,570
put I don't think I've got a

00:03:47,620 --> 00:03:51,640
chronological but whilst the Apple is

00:03:49,570 --> 00:03:53,320
for 10 years the dev team lives for a

00:03:51,640 --> 00:03:56,530
year and then they go off and build

00:03:53,320 --> 00:04:01,060
another app now who's looking after your

00:03:56,530 --> 00:04:04,359
thing and so what actually happens is

00:04:01,060 --> 00:04:06,130
this sort of nonsense is the dev team

00:04:04,359 --> 00:04:08,109
turns up and says this is going to be

00:04:06,130 --> 00:04:10,480
great it's going to be a ruby app look

00:04:08,109 --> 00:04:11,680
I've got Ruby in there apologize if the

00:04:10,480 --> 00:04:15,280
font isn't big enough for you at the

00:04:11,680 --> 00:04:16,989
back I cannot fix that now the nature of

00:04:15,280 --> 00:04:19,359
a screen shot I did try to make the

00:04:16,989 --> 00:04:21,160
smallest possible one that worked so you

00:04:19,359 --> 00:04:22,630
know I've over stated like you need

00:04:21,160 --> 00:04:24,220
those but you really you know for the

00:04:22,630 --> 00:04:25,690
sake of demo code skipped it but anyway

00:04:24,220 --> 00:04:29,110
you know so but look at the

00:04:25,690 --> 00:04:31,690
from a bun to well done yeah very

00:04:29,110 --> 00:04:33,340
badging reading that going well I have

00:04:31,690 --> 00:04:35,710
no idea what version of Bunty you use

00:04:33,340 --> 00:04:37,360
when you did this well like literally

00:04:35,710 --> 00:04:41,680
what was on your laptop at the time you

00:04:37,360 --> 00:04:43,390
did docker build and update gets that

00:04:41,680 --> 00:04:46,480
really what you end up with depends on

00:04:43,390 --> 00:04:49,000
the day that you did it get install Ruby

00:04:46,480 --> 00:04:50,860
who knows it comes back to the first

00:04:49,000 --> 00:04:53,200
line I have no idea what version Ruby

00:04:50,860 --> 00:04:54,880
you have right now and I have a strong

00:04:53,200 --> 00:04:57,100
belief that friends don't let friends

00:04:54,880 --> 00:04:59,500
use programming languages from upstream

00:04:57,100 --> 00:05:02,980
dependency packaging systems it's not

00:04:59,500 --> 00:05:05,500
snappy but it's true all right to do not

00:05:02,980 --> 00:05:07,210
store Ruby that way and then we're going

00:05:05,500 --> 00:05:10,150
to get yo get that the packaging that's

00:05:07,210 --> 00:05:11,830
that's you know our apps and then you

00:05:10,150 --> 00:05:13,570
know else bespoke interesting way of

00:05:11,830 --> 00:05:14,980
running our app this is just a recipe

00:05:13,570 --> 00:05:16,960
for never knowing what's actually

00:05:14,980 --> 00:05:21,130
running a production or hey you might

00:05:16,960 --> 00:05:22,420
reproduce it with a small change and but

00:05:21,130 --> 00:05:24,790
nonetheless if you've gone in the

00:05:22,420 --> 00:05:26,590
Kootenays world you've just assumed this

00:05:24,790 --> 00:05:28,420
you probably don't have a better way of

00:05:26,590 --> 00:05:30,850
living than throwing together docker

00:05:28,420 --> 00:05:34,030
file the sort of most of which you've

00:05:30,850 --> 00:05:35,500
copied from stack overflow now some of

00:05:34,030 --> 00:05:37,450
your going i would never under store

00:05:35,500 --> 00:05:39,550
Ruby that way yeah I know you've got

00:05:37,450 --> 00:05:42,190
this five line long thing that includes

00:05:39,550 --> 00:05:44,320
curling it from upstream unpacking it

00:05:42,190 --> 00:05:46,120
probably got the sha-256 in it because

00:05:44,320 --> 00:05:47,140
Shira clever man unpacks that stole

00:05:46,120 --> 00:05:48,669
something from source and you're feeling

00:05:47,140 --> 00:05:51,220
very special with itself and while I

00:05:48,669 --> 00:05:53,140
agree that that is better than this how

00:05:51,220 --> 00:05:54,190
you can update it what what is the

00:05:53,140 --> 00:05:56,650
automated system and whose

00:05:54,190 --> 00:05:58,360
responsibility is how is the

00:05:56,650 --> 00:05:59,470
organization even know what version of

00:05:58,360 --> 00:06:01,750
Ruby you've got and whether it's

00:05:59,470 --> 00:06:03,910
updating so doesn't make you a bad

00:06:01,750 --> 00:06:06,400
person it's just this is the scope that

00:06:03,910 --> 00:06:08,800
I wished you to think about and why I

00:06:06,400 --> 00:06:10,720
think Bill packs so this is the Etsy

00:06:08,800 --> 00:06:13,960
website modified for how I feel about

00:06:10,720 --> 00:06:16,030
docker hub this is what dock hub looks

00:06:13,960 --> 00:06:19,240
like to me in my mind it's just

00:06:16,030 --> 00:06:20,980
thousands of home sponge bespoke docker

00:06:19,240 --> 00:06:22,690
things that who knows what's in them

00:06:20,980 --> 00:06:24,490
best of luck even if they gave you the

00:06:22,690 --> 00:06:27,430
recipe the dockerfile best of luck

00:06:24,490 --> 00:06:29,560
making the same thing they made every

00:06:27,430 --> 00:06:31,150
docker image like if docker files were

00:06:29,560 --> 00:06:35,020
such a great idea there'd be one Redis

00:06:31,150 --> 00:06:39,610
image I know there are so many that is

00:06:35,020 --> 00:06:41,680
not funny so iiii say all that because

00:06:39,610 --> 00:06:43,090
obviously I wouldn't complain about

00:06:41,680 --> 00:06:44,729
something and just walk off that would

00:06:43,090 --> 00:06:46,780
be rude

00:06:44,729 --> 00:06:48,460
proposal is that we're going to switch

00:06:46,780 --> 00:06:51,009
to using build packs to generate docker

00:06:48,460 --> 00:06:52,750
images or OC eyes and you're going to be

00:06:51,009 --> 00:06:57,789
happy about that for the rest of your

00:06:52,750 --> 00:06:59,740
life so now you might not know but about

00:06:57,789 --> 00:07:01,810
a year or so ago we started talking

00:06:59,740 --> 00:07:06,610
about cloud native bill packs which the

00:07:01,810 --> 00:07:08,349
history of this is that whilst Cloud

00:07:06,610 --> 00:07:12,699
Foundry started with Heroku bill packs

00:07:08,349 --> 00:07:15,069
we did fork them and Heroku forked their

00:07:12,699 --> 00:07:17,650
own API the original API is very simple

00:07:15,069 --> 00:07:18,909
set of scripts and because in you know

00:07:17,650 --> 00:07:20,439
cloud fan if we started having supply

00:07:18,909 --> 00:07:21,969
build packs or we had a couple of

00:07:20,439 --> 00:07:24,219
different ideas Cloud Foundry build

00:07:21,969 --> 00:07:26,409
packs have something that Heroku doesn't

00:07:24,219 --> 00:07:28,479
care about as much which is offline bill

00:07:26,409 --> 00:07:31,210
packs our bill packs could be taken into

00:07:28,479 --> 00:07:35,379
a dark data centers whether you work for

00:07:31,210 --> 00:07:37,270
the CIA or some other acronym that's

00:07:35,379 --> 00:07:39,069
just the same letters in Reverse I don't

00:07:37,270 --> 00:07:40,900
know but you have your own reason for

00:07:39,069 --> 00:07:42,159
not having access to the Internet then

00:07:40,900 --> 00:07:43,810
you still need bill packs and they can't

00:07:42,159 --> 00:07:45,669
just be going pulling resources off the

00:07:43,810 --> 00:07:47,589
internet so that is one of the

00:07:45,669 --> 00:07:49,750
attributes but when they Heroku and

00:07:47,589 --> 00:07:51,039
Cloud Foundry finally and I say Cloud

00:07:49,750 --> 00:07:52,659
Foundry yeah I really mean pivotal in

00:07:51,039 --> 00:07:55,150
this case people people who've been

00:07:52,659 --> 00:07:57,960
spending and you know so much money on

00:07:55,150 --> 00:07:59,919
bill packs for last a half a decade

00:07:57,960 --> 00:08:01,360
started catching up with Heroku people

00:07:59,919 --> 00:08:02,860
they came to the side you know we've got

00:08:01,360 --> 00:08:05,949
some real challenges and we'd like to

00:08:02,860 --> 00:08:08,580
have another stab at bill packs and it

00:08:05,949 --> 00:08:11,529
is a CNC F slash you know Kuban ease

00:08:08,580 --> 00:08:12,699
incubator project and it is looking

00:08:11,529 --> 00:08:14,979
really good so I wanted to take the

00:08:12,699 --> 00:08:17,860
opportunity to spend my time sharing

00:08:14,979 --> 00:08:19,960
about this and how you bring it both to

00:08:17,860 --> 00:08:21,279
kubernetes and by inference this is the

00:08:19,960 --> 00:08:24,819
future of Cloud Foundry is Bill pack

00:08:21,279 --> 00:08:28,089
system there was a lot of content from

00:08:24,819 --> 00:08:31,180
both Roku and or pivotal that you can go

00:08:28,089 --> 00:08:33,159
watch after this talk but the gist of it

00:08:31,180 --> 00:08:36,490
is that we are trying to build this

00:08:33,159 --> 00:08:38,440
thing on the on the Left which is to say

00:08:36,490 --> 00:08:39,849
that we're going to have our app and

00:08:38,440 --> 00:08:43,060
there's going to be a base run image

00:08:39,849 --> 00:08:44,470
probably some form of bun to or Alpine

00:08:43,060 --> 00:08:46,870
or something something tiny or something

00:08:44,470 --> 00:08:48,839
being depending on dependencies and then

00:08:46,870 --> 00:08:51,040
these layers that are more Gretz

00:08:48,839 --> 00:08:54,010
specifically provided by an upstream

00:08:51,040 --> 00:09:00,250
team who cares about that

00:08:54,010 --> 00:09:03,040
Ruby java.net Pro dependencies or bunch

00:09:00,250 --> 00:09:05,890
of dependencies you want to bring in one

00:09:03,040 --> 00:09:10,320
and then a set of server lifecycle of

00:09:05,890 --> 00:09:13,779
tools that that bring these together one

00:09:10,320 --> 00:09:15,670
aspect of this is you get free and

00:09:13,779 --> 00:09:17,710
that's the ability to rebase but if you

00:09:15,670 --> 00:09:19,750
go back to that docker file I said from

00:09:17,710 --> 00:09:21,400
the bun to with a big shrug of the

00:09:19,750 --> 00:09:23,080
shoulders one of the things that we got

00:09:21,400 --> 00:09:24,520
for free in cloud foundry where we sort

00:09:23,080 --> 00:09:25,779
of had it if you don't if you've ever

00:09:24,520 --> 00:09:29,650
thought about what we have in cloud

00:09:25,779 --> 00:09:32,140
foundry it's a two layer image right

00:09:29,650 --> 00:09:35,770
there's the droplet which is everything

00:09:32,140 --> 00:09:37,930
the staging did on top of a base OS

00:09:35,770 --> 00:09:40,510
which we call the stack put together as

00:09:37,930 --> 00:09:42,550
your container and that very simple two

00:09:40,510 --> 00:09:45,070
layer image means that we could rip out

00:09:42,550 --> 00:09:48,130
the base and upgrade it without your app

00:09:45,070 --> 00:09:49,029
ever needing to restate and it's been

00:09:48,130 --> 00:09:50,770
going on for years

00:09:49,029 --> 00:09:53,050
if you've ever deployed an app and never

00:09:50,770 --> 00:09:54,190
be staged it doesn't matter the base OS

00:09:53,050 --> 00:09:56,320
has always been updated

00:09:54,190 --> 00:09:58,209
they just restart your container your

00:09:56,320 --> 00:09:59,860
app restarts on top of the base and so

00:09:58,209 --> 00:10:02,200
they wanted to keep that that ability

00:09:59,860 --> 00:10:03,790
and rebase all the things you did the

00:10:02,200 --> 00:10:06,310
last time you staged the last time you

00:10:03,790 --> 00:10:09,220
build your image but you get that the

00:10:06,310 --> 00:10:13,330
platform team gets to continuously

00:10:09,220 --> 00:10:15,459
update the base run image so any CVS

00:10:13,330 --> 00:10:17,529
that happen in a bun to assuming about

00:10:15,459 --> 00:10:19,060
you know base is a bun to get rolled out

00:10:17,529 --> 00:10:21,910
without you ever having to without them

00:10:19,060 --> 00:10:24,130
ever having to find you for every taka

00:10:21,910 --> 00:10:26,410
file there's a project that needs to be

00:10:24,130 --> 00:10:28,450
found and you can't just find the git

00:10:26,410 --> 00:10:30,220
repo with the docker file in it like was

00:10:28,450 --> 00:10:31,750
it this is the Jenkins pipeline it is

00:10:30,220 --> 00:10:34,540
that was it deployed manually is it a

00:10:31,750 --> 00:10:36,580
concourse like where is the the build

00:10:34,540 --> 00:10:37,839
how do you even push this stuff out so

00:10:36,580 --> 00:10:40,600
one of the features of cloud native bill

00:10:37,839 --> 00:10:42,550
packs is the ability to never know that

00:10:40,600 --> 00:10:46,420
but still be able to update the base OS

00:10:42,550 --> 00:10:48,339
when CVS get rolled out continuously so

00:10:46,420 --> 00:10:50,350
you get there for free now everything

00:10:48,339 --> 00:10:51,730
else is still kind of in the domain of

00:10:50,350 --> 00:10:53,650
the developers and their pipeline

00:10:51,730 --> 00:10:54,670
pushing out the app but super

00:10:53,650 --> 00:10:57,490
interesting so we're going to talk about

00:10:54,670 --> 00:10:59,140
two tools and whilst there will be more

00:10:57,490 --> 00:11:01,000
tools there is more ways to use cloud

00:10:59,140 --> 00:11:03,040
native build packs because it is the set

00:11:01,000 --> 00:11:04,959
of components but I ain't going to

00:11:03,040 --> 00:11:06,980
specifically talk about the ones the

00:11:04,959 --> 00:11:08,930
first one the pack CLI is

00:11:06,980 --> 00:11:12,500
of the cloud no bill pack team project

00:11:08,930 --> 00:11:15,139
the K PAC project serve kicked off by

00:11:12,500 --> 00:11:17,180
pivotal towards them thinking about what

00:11:15,139 --> 00:11:20,510
might be how we bring coordinated bill

00:11:17,180 --> 00:11:23,180
packs into cf+ for their own product

00:11:20,510 --> 00:11:25,040
suite and for their own kubernetes users

00:11:23,180 --> 00:11:26,810
so we're gonna talk about that but other

00:11:25,040 --> 00:11:28,639
solutions to use cloud node bill packs

00:11:26,810 --> 00:11:32,240
would be the K native build or their

00:11:28,639 --> 00:11:34,630
Tecton project but if we get the gist of

00:11:32,240 --> 00:11:38,449
it then you be able to take these ideas

00:11:34,630 --> 00:11:40,940
with you so we're going to do live demos

00:11:38,449 --> 00:11:42,440
with the with the 18 minutes we have

00:11:40,940 --> 00:11:44,029
left but essentially it's this we're

00:11:42,440 --> 00:11:45,500
gonna take an OGS app because they're

00:11:44,029 --> 00:11:47,269
gonna take the long turn to build we're

00:11:45,500 --> 00:11:48,500
going to build it you're gonna sneak all

00:11:47,269 --> 00:11:49,670
to make detection the automatic

00:11:48,500 --> 00:11:51,139
detection you know the love from Cloud

00:11:49,670 --> 00:11:53,110
Foundry you're going to see it happen

00:11:51,139 --> 00:11:55,130
you're gonna see it build a docker image

00:11:53,110 --> 00:11:57,709
note where the lis built without a

00:11:55,130 --> 00:11:59,510
docker file and know whether lis

00:11:57,709 --> 00:12:00,889
rebuildable over and over again from

00:11:59,510 --> 00:12:02,180
case layers and we're going to run it

00:12:00,889 --> 00:12:04,339
they were gonna run it as a Cuba needs

00:12:02,180 --> 00:12:07,130
deployment not a pod and that'll be

00:12:04,339 --> 00:12:10,220
happy times then we're going to move on

00:12:07,130 --> 00:12:12,050
to write to capex so if the slides will

00:12:10,220 --> 00:12:14,329
go up an internet have everything I'm

00:12:12,050 --> 00:12:16,579
about to do but a very very dull for me

00:12:14,329 --> 00:12:18,620
to show you slides of communitarian but

00:12:16,579 --> 00:12:21,410
it is a back-up plan but now we're gonna

00:12:18,620 --> 00:12:27,290
leave all right this is where it gets

00:12:21,410 --> 00:12:29,660
exciting so essentially the PAC CLI is a

00:12:27,290 --> 00:12:31,730
seal a that comes with the whole cloud

00:12:29,660 --> 00:12:34,100
fair cloud native Bill pack tool chain

00:12:31,730 --> 00:12:35,480
but it is a local developer tool it's a

00:12:34,100 --> 00:12:37,880
bit like running docker build yourself

00:12:35,480 --> 00:12:40,790
locally where as que nadie as whereas

00:12:37,880 --> 00:12:42,529
the kpac project is perhaps more akin to

00:12:40,790 --> 00:12:45,470
having a CI pipeline automatically

00:12:42,529 --> 00:12:47,060
detects changes in a git repo running

00:12:45,470 --> 00:12:49,550
the same lifecycle that you're about to

00:12:47,060 --> 00:12:51,519
see and publishing a docker image

00:12:49,550 --> 00:12:54,079
without it ever happening on your laptop

00:12:51,519 --> 00:12:57,079
so and we're going to be running

00:12:54,079 --> 00:13:00,139
primarily the build command to build our

00:12:57,079 --> 00:13:03,079
app now I have here a node app and here

00:13:00,139 --> 00:13:08,870
I have a Java app and we go to go pack

00:13:03,079 --> 00:13:10,399
build and I'm gonna give it a name I

00:13:08,870 --> 00:13:12,620
might as well start to tag it because I

00:13:10,399 --> 00:13:14,269
will want to take this and put it in and

00:13:12,620 --> 00:13:16,010
be able to change my deployment my

00:13:14,269 --> 00:13:20,280
kubernetes deployment so different tag

00:13:16,010 --> 00:13:22,080
shard 25 256 so the build that

00:13:20,280 --> 00:13:25,290
by default it assumes that we're doing

00:13:22,080 --> 00:13:27,660
it on the look on the current folder and

00:13:25,290 --> 00:13:29,490
it is using docker

00:13:27,660 --> 00:13:33,210
so I'm using docker for Mac or whatever

00:13:29,490 --> 00:13:34,410
we call this now dock a desktop so the

00:13:33,210 --> 00:13:37,230
first thing it does is it goes through

00:13:34,410 --> 00:13:38,370
and if you've ever done a CF push if you

00:13:37,230 --> 00:13:39,870
haven't we're in the wrong room

00:13:38,370 --> 00:13:41,730
if you ever don't see if push you'll see

00:13:39,870 --> 00:13:43,650
the automatic detection as it goes

00:13:41,730 --> 00:13:45,930
through and says hey Bill plaques you

00:13:43,650 --> 00:13:48,960
figure it out what's going on here what

00:13:45,930 --> 00:13:50,520
is this app now well this is we'll get

00:13:48,960 --> 00:13:52,680
to the Java one in a second but this is

00:13:50,520 --> 00:13:54,720
all the one of the parts of the cloud

00:13:52,680 --> 00:13:56,150
native Bill pack project is the idea of

00:13:54,720 --> 00:13:58,710
breaking them up into smaller components

00:13:56,150 --> 00:14:01,200
that then come together so instead of

00:13:58,710 --> 00:14:03,420
having one massive Java Bill pack we

00:14:01,200 --> 00:14:04,620
have lots of little ones and they figure

00:14:03,420 --> 00:14:06,780
out for themselves how they how they

00:14:04,620 --> 00:14:13,620
come together so when we go and do pack

00:14:06,780 --> 00:14:16,230
build on the Java app you'll see the

00:14:13,620 --> 00:14:22,440
same sequence we'll find out whether

00:14:16,230 --> 00:14:24,870
it's a Java or Bill pack first so this

00:14:22,440 --> 00:14:27,089
time it was successful in deciding that

00:14:24,870 --> 00:14:29,220
it was a Java one I say it doesn't

00:14:27,089 --> 00:14:30,300
really say success it was Java you can

00:14:29,220 --> 00:14:33,030
sort of just see that it was this

00:14:30,300 --> 00:14:34,200
collection of this group and make that

00:14:33,030 --> 00:14:35,610
word up this is the cloud native build

00:14:34,200 --> 00:14:38,130
pack terminology it's a group of build

00:14:35,610 --> 00:14:40,890
packs that as a group said yes we will

00:14:38,130 --> 00:14:43,770
tackle this this app for a node app it

00:14:40,890 --> 00:14:47,070
was not that group it was instead a

00:14:43,770 --> 00:14:50,580
group that included the node engine and

00:14:47,070 --> 00:14:52,350
the yarn bill packs that said we'll

00:14:50,580 --> 00:14:55,050
tackle this and there is another group

00:14:52,350 --> 00:14:57,720
which is node an NPM so depending on

00:14:55,050 --> 00:14:59,760
which package the NPM package managing

00:14:57,720 --> 00:15:05,520
tool you use well as how they've decided

00:14:59,760 --> 00:15:07,470
so now it's reusing the cache so it's a

00:15:05,520 --> 00:15:08,970
bit dull I will apologize now those

00:15:07,470 --> 00:15:11,820
colors are those colors okay at the back

00:15:08,970 --> 00:15:14,640
I hesitate to ask because you might say

00:15:11,820 --> 00:15:16,560
no then I would not know well it's going

00:15:14,640 --> 00:15:19,740
to do about that they look great on my

00:15:16,560 --> 00:15:21,360
laptop and I use them every day so the

00:15:19,740 --> 00:15:24,540
idea is here that so we reusing these

00:15:21,360 --> 00:15:26,910
layers I and and we go through so first

00:15:24,540 --> 00:15:28,680
the node bill pack basically all it does

00:15:26,910 --> 00:15:30,800
is brings node it says here's node I

00:15:28,680 --> 00:15:32,350
don't know what you want to use it for

00:15:30,800 --> 00:15:34,210
but the

00:15:32,350 --> 00:15:36,190
this is what this build pack does it

00:15:34,210 --> 00:15:38,800
doesn't know how to run a node app the

00:15:36,190 --> 00:15:41,530
node engine build pack just puts node on

00:15:38,800 --> 00:15:44,140
there and then moves on where else might

00:15:41,530 --> 00:15:46,960
you use the node engine build pack Ruby

00:15:44,140 --> 00:15:48,940
apps Ruby on Rails apps like to use it

00:15:46,960 --> 00:15:51,070
as part of the build sequence for

00:15:48,940 --> 00:15:52,750
running has set pipelines static file

00:15:51,070 --> 00:15:54,520
apps might like to use it for doing

00:15:52,750 --> 00:15:56,800
builds build you know taking the tool

00:15:54,520 --> 00:15:58,720
chain of building our static apps it

00:15:56,800 --> 00:16:01,030
turns out currently the yarn build pack

00:15:58,720 --> 00:16:03,760
has a responsibility to deciding on how

00:16:01,030 --> 00:16:06,550
an app will get run and it delegates to

00:16:03,760 --> 00:16:08,050
the yarn start command and this might

00:16:06,550 --> 00:16:10,060
change between now and the next time you

00:16:08,050 --> 00:16:14,920
use it as they restructure these these

00:16:10,060 --> 00:16:20,440
bill packs in the end it pumps out a in

00:16:14,920 --> 00:16:24,220
egde and and then off we go down here

00:16:20,440 --> 00:16:25,480
where I have not previously succeeded

00:16:24,220 --> 00:16:28,480
because I can never be bothered waiting

00:16:25,480 --> 00:16:30,160
for a dated open dedicated download you

00:16:28,480 --> 00:16:31,930
can see that it's never successfully

00:16:30,160 --> 00:16:34,200
cache this labor before so it's now

00:16:31,930 --> 00:16:36,430
downloading open JDK for the first time

00:16:34,200 --> 00:16:38,830
another way they could have done this is

00:16:36,430 --> 00:16:42,040
had all these up there internet-based

00:16:38,830 --> 00:16:46,270
assets put inside a big jar docker

00:16:42,040 --> 00:16:48,940
images called the Builder and when we

00:16:46,270 --> 00:16:50,140
probably when we do the next talk

00:16:48,940 --> 00:16:51,190
tomorrow we talk about building where

00:16:50,140 --> 00:16:52,960
these build packs might talk more about

00:16:51,190 --> 00:16:55,360
these are these the sequence of events

00:16:52,960 --> 00:16:57,490
but you can sort of see that first we do

00:16:55,360 --> 00:17:00,040
detection which group of build packs

00:16:57,490 --> 00:17:01,240
will be applied and your organization

00:17:00,040 --> 00:17:02,770
might be different from your

00:17:01,240 --> 00:17:04,870
organization on what group of build

00:17:02,770 --> 00:17:07,270
packs are going to be applied maybe you

00:17:04,870 --> 00:17:09,550
include some EPM build packs so that

00:17:07,270 --> 00:17:13,060
every app has some process monitoring in

00:17:09,550 --> 00:17:15,220
it and maybe yours doesn't and so you

00:17:13,060 --> 00:17:17,140
can evolve over different collections a

00:17:15,220 --> 00:17:19,540
bit like in Cloud Foundry the platform

00:17:17,140 --> 00:17:22,089
organ can open the platform team can do

00:17:19,540 --> 00:17:24,490
CF create build pack and curate that

00:17:22,089 --> 00:17:27,550
list of build packs this is going to

00:17:24,490 --> 00:17:32,050
allow us to have more granular access to

00:17:27,550 --> 00:17:36,790
to how we procure at gulp X all right so

00:17:32,050 --> 00:17:40,000
here they said we had an image docker

00:17:36,790 --> 00:17:42,990
inspect that image I don't want to see

00:17:40,000 --> 00:17:42,990
this anymore you can go away

00:17:43,030 --> 00:17:47,650
no you don't need to okay too much

00:17:44,860 --> 00:17:49,030
deciced to say that because it was built

00:17:47,650 --> 00:17:50,410
with the PAC tool even though it is a

00:17:49,030 --> 00:17:51,640
docker image just like you would have

00:17:50,410 --> 00:17:54,040
built you could have built this dakka

00:17:51,640 --> 00:17:56,410
dakka dakka file we get a lot of

00:17:54,040 --> 00:17:58,470
metadata that it means that a platform

00:17:56,410 --> 00:18:03,960
team can now look at all the images and

00:17:58,470 --> 00:18:07,720
inspect what's in there and learn things

00:18:03,960 --> 00:18:11,850
alright now we can run it docker run -

00:18:07,720 --> 00:18:16,540
t- p it's gonna listen

00:18:11,850 --> 00:18:18,760
and there are running Zach Earll alright

00:18:16,540 --> 00:18:21,910
that is the Internet running on my

00:18:18,760 --> 00:18:23,650
laptop and so so much nicer I mean again

00:18:21,910 --> 00:18:26,350
just because I talked you might have

00:18:23,650 --> 00:18:27,760
missed it because I made it made it take

00:18:26,350 --> 00:18:29,800
longer than it should have but instead

00:18:27,760 --> 00:18:31,990
of writing my own bespoke docker file

00:18:29,800 --> 00:18:34,870
built from 17 different stack overflow

00:18:31,990 --> 00:18:36,730
pages and seven three or three or four

00:18:34,870 --> 00:18:37,390
other projects from before never quite

00:18:36,730 --> 00:18:39,510
the same

00:18:37,390 --> 00:18:41,950
or is slightly better than the last one

00:18:39,510 --> 00:18:43,570
which is just a terrible way of saying

00:18:41,950 --> 00:18:44,860
that every other docker file is wrong

00:18:43,570 --> 00:18:46,840
now

00:18:44,860 --> 00:18:49,360
we now have one way to build docker

00:18:46,840 --> 00:18:51,360
images which is pack build or the

00:18:49,360 --> 00:18:54,460
lifecycle tool in the build packs

00:18:51,360 --> 00:18:58,870
alright so now let's let's do the

00:18:54,460 --> 00:19:01,030
kubernetes part of this so there is just

00:18:58,870 --> 00:19:02,710
the example with some color of some of

00:19:01,030 --> 00:19:05,170
the based on the app that was uploaded

00:19:02,710 --> 00:19:06,820
some of the Java bill packs were used in

00:19:05,170 --> 00:19:09,580
others were not they can sort of see

00:19:06,820 --> 00:19:16,090
that Tomcat was selected Springbrook was

00:19:09,580 --> 00:19:17,650
selected JDBC was not used and now in

00:19:16,090 --> 00:19:19,870
order to do the commune's my kubernetes

00:19:17,650 --> 00:19:21,490
is running in the internet so it's not

00:19:19,870 --> 00:19:26,230
in my laptop so I do need to publish

00:19:21,490 --> 00:19:29,050
that that image I could either push like

00:19:26,230 --> 00:19:32,890
that or our pack build command does have

00:19:29,050 --> 00:19:35,500
a published flag

00:19:32,890 --> 00:19:41,020
I have already published one so we will

00:19:35,500 --> 00:19:42,970
move on and look at our deployment it's

00:19:41,020 --> 00:19:45,580
a very simple deployment is made up of a

00:19:42,970 --> 00:19:50,050
pod and a service so that we can access

00:19:45,580 --> 00:19:51,720
the thing and here is our image so the

00:19:50,050 --> 00:19:55,480
vo1

00:19:51,720 --> 00:19:56,440
it's got some replicas it's just some

00:19:55,480 --> 00:19:59,320
good old fat

00:19:56,440 --> 00:20:01,990
and kubernetes lots of Yamma but not so

00:19:59,320 --> 00:20:02,920
much that you'd think it's posh but just

00:20:01,990 --> 00:20:05,830
enough that you don't know what it says

00:20:02,920 --> 00:20:10,180
it's in that happy place of why we get

00:20:05,830 --> 00:20:12,420
paid so much and and so you know the

00:20:10,180 --> 00:20:17,590
real part is this part long as it runs

00:20:12,420 --> 00:20:20,470
and then the service will you know route

00:20:17,590 --> 00:20:25,450
traffic from port 80 to port 8080 on the

00:20:20,470 --> 00:20:32,610
pod and life is good all we need to do

00:20:25,450 --> 00:20:32,610
is Cuba try apply so close employment

00:20:36,900 --> 00:20:44,260
get pods watch them come up there's no

00:20:42,370 --> 00:20:50,440
reason for them still be there that was

00:20:44,260 --> 00:20:51,820
terrible look it wasn't very good you

00:20:50,440 --> 00:20:52,960
know when you prepare for a talk and you

00:20:51,820 --> 00:20:54,130
go through it one more time before you

00:20:52,960 --> 00:20:56,050
go up and you think yourself the last

00:20:54,130 --> 00:20:57,400
thing I need to do a frog on stage is to

00:20:56,050 --> 00:20:59,680
delete everything I just did

00:20:57,400 --> 00:21:03,100
I didn't delete everything I just did so

00:20:59,680 --> 00:21:05,760
let's start that again apply pod no plug

00:21:03,100 --> 00:21:08,380
deployment so as we said in them in our

00:21:05,760 --> 00:21:15,670
you know yam will file we're gonna have

00:21:08,380 --> 00:21:16,810
a deployment and a service all right

00:21:15,670 --> 00:21:17,950
they're running free cuz the image

00:21:16,810 --> 00:21:19,240
that's right because I didn't build a

00:21:17,950 --> 00:21:20,620
new image it didn't take very long for

00:21:19,240 --> 00:21:22,150
it to download the image but normally

00:21:20,620 --> 00:21:23,440
would say creating container and you're

00:21:22,150 --> 00:21:25,510
wondering what the hell is going on and

00:21:23,440 --> 00:21:27,910
what it's doing is sucking down a huge

00:21:25,510 --> 00:21:29,650
docker image but it gives you no

00:21:27,910 --> 00:21:31,600
progress information whatsoever and

00:21:29,650 --> 00:21:32,740
there's a ticket on that and they won't

00:21:31,600 --> 00:21:34,600
do anything about it and I find it quite

00:21:32,740 --> 00:21:40,930
tedious nonetheless that's why it was

00:21:34,600 --> 00:21:42,580
really quick okay service so now this is

00:21:40,930 --> 00:21:44,170
where we're just waiting for right in my

00:21:42,580 --> 00:21:50,020
case it's a Google cloud waiting for it

00:21:44,170 --> 00:21:51,850
to give me a low bouncer you're here for

00:21:50,020 --> 00:21:54,490
a kuba nice talk this is some kubernetes

00:21:51,850 --> 00:21:56,020
love it up sure if let's see if push it

00:21:54,490 --> 00:21:57,460
be done by now we can all go home but

00:21:56,020 --> 00:22:02,620
there's Cuban Hays this is what you came

00:21:57,460 --> 00:22:05,610
to see I don't want to judge you I'll

00:22:02,620 --> 00:22:05,610
just use a mocking tone

00:22:08,720 --> 00:22:17,430
come on Google to be fair I am still

00:22:14,910 --> 00:22:22,130
referring to my cluster that's based in

00:22:17,430 --> 00:22:22,130
Australia but it doesn't change anything

00:22:22,730 --> 00:22:32,430
bouncer stupid all right while we wait

00:22:30,750 --> 00:22:33,960
for that low bouncer let's move on the

00:22:32,430 --> 00:22:35,820
next thing we will curl it and it will

00:22:33,960 --> 00:22:37,440
come out say hello world and you'll all

00:22:35,820 --> 00:22:40,800
feel special so next thing we're going

00:22:37,440 --> 00:22:43,050
to do is change it in preparation so

00:22:40,800 --> 00:22:46,950
that you can see that it builds a second

00:22:43,050 --> 00:22:48,300
time what will we do we'll do pack oh

00:22:46,950 --> 00:22:49,460
I've got to change the app to do

00:22:48,300 --> 00:22:53,280
something different so we'll say hello

00:22:49,460 --> 00:22:57,510
CF summit yes that's very spoken

00:22:53,280 --> 00:23:03,960
interesting and we'll give it a thing

00:22:57,510 --> 00:23:06,560
and we'll do publish again suspicious

00:23:03,960 --> 00:23:06,560
that something's wrong

00:23:16,210 --> 00:23:21,030
I mean if it works that'd be great if it

00:23:18,070 --> 00:23:21,030
doesn't work it's less good

00:23:28,060 --> 00:23:32,870
all right so we have our so we're still

00:23:30,680 --> 00:23:37,670
that the deployment is still just the v1

00:23:32,870 --> 00:23:39,590
I should say hello world excellent look

00:23:37,670 --> 00:23:43,310
at us so now we've we built and we

00:23:39,590 --> 00:23:48,860
published version 200 - so let's let's

00:23:43,310 --> 00:23:50,390
do a bit of a watch command all right so

00:23:48,860 --> 00:23:52,250
it's now just hitting that that service

00:23:50,390 --> 00:23:54,830
over and over again asking for it to go

00:23:52,250 --> 00:23:58,250
to one of the pods but now we have

00:23:54,830 --> 00:24:02,380
shipped version - let us go to the

00:23:58,250 --> 00:24:02,380
deployments and deploy version two and

00:24:06,970 --> 00:24:11,980
then to watch no do I get pods

00:24:13,000 --> 00:24:20,300
all right so shutting down it's running

00:24:15,410 --> 00:24:23,450
the new ones there we go hello CEO

00:24:20,300 --> 00:24:24,710
summit so the internet works lovely and

00:24:23,450 --> 00:24:26,270
by the way that's all coming from

00:24:24,710 --> 00:24:29,120
Australia consits just a great place to

00:24:26,270 --> 00:24:30,890
put code I don't know what the status of

00:24:29,120 --> 00:24:34,850
prex it is so I'm just going to use a

00:24:30,890 --> 00:24:36,700
different continent entirely Garin to be

00:24:34,850 --> 00:24:42,320
Australian cuz we're all you know

00:24:36,700 --> 00:24:43,970
monolingual over there alright and again

00:24:42,320 --> 00:24:45,860
at no point that we dock a file we just

00:24:43,970 --> 00:24:48,170
took our node app and said here you run

00:24:45,860 --> 00:24:50,930
it why do I care and we could do that

00:24:48,170 --> 00:24:52,520
for the next ten years somewhere else is

00:24:50,930 --> 00:24:54,620
curating those those it's a nice

00:24:52,520 --> 00:24:56,480
separation of concerns some other

00:24:54,620 --> 00:24:58,130
organization in this case an entirely

00:24:56,480 --> 00:24:59,900
different company in the planet is

00:24:58,130 --> 00:25:01,190
looking after those bill packs or

00:24:59,900 --> 00:25:02,980
another part of your organization you'll

00:25:01,190 --> 00:25:05,150
be looking out for the bill packs

00:25:02,980 --> 00:25:06,740
someone else can be running looking out

00:25:05,150 --> 00:25:08,540
for the base OS someone else can be

00:25:06,740 --> 00:25:10,070
looking after the the node bill packs of

00:25:08,540 --> 00:25:12,920
Java bill packs rooted bill packs and

00:25:10,070 --> 00:25:15,770
your dev teams as they come and go can

00:25:12,920 --> 00:25:17,630
just worry about the code aspect I

00:25:15,770 --> 00:25:21,320
mentioned that there is both a yard bill

00:25:17,630 --> 00:25:22,490
pack and an NPM bill pack sure could

00:25:21,320 --> 00:25:24,710
have been put together into one bill

00:25:22,490 --> 00:25:26,090
pack but it's nice example of separating

00:25:24,710 --> 00:25:29,180
just in two different functional

00:25:26,090 --> 00:25:29,980
components of how you want to do the

00:25:29,180 --> 00:25:32,750
running

00:25:29,980 --> 00:25:35,120
all right Kay pack we have four minutes

00:25:32,750 --> 00:25:37,940
I tell you that just so that you know

00:25:35,120 --> 00:25:39,050
that I care about time which I generally

00:25:37,940 --> 00:25:41,240
don't

00:25:39,050 --> 00:25:42,470
those system we're all trying something

00:25:41,240 --> 00:25:46,730
new

00:25:42,470 --> 00:25:49,330
Capac is so previously I ran pack it was

00:25:46,730 --> 00:25:53,450
on my laptop now there is a concourse

00:25:49,330 --> 00:25:56,150
resource wraps up pack but it's kind of

00:25:53,450 --> 00:25:57,860
ugly in the sense that you've got you're

00:25:56,150 --> 00:25:59,510
already inside a container and then

00:25:57,860 --> 00:26:00,740
you're running Cape air are you running

00:25:59,510 --> 00:26:02,840
the pack you man which needs to talk to

00:26:00,740 --> 00:26:04,820
docker so you're on another dr. Damon

00:26:02,840 --> 00:26:07,750
inside your container and generate more

00:26:04,820 --> 00:26:10,130
containers inside containers with

00:26:07,750 --> 00:26:13,520
escalated privileges it's a little bit

00:26:10,130 --> 00:26:16,160
ugly but it works I'll be it doesn't get

00:26:13,520 --> 00:26:17,300
cashing Capac is an attempt to have a

00:26:16,160 --> 00:26:19,820
running service that sits there

00:26:17,300 --> 00:26:22,130
automatically building images whether

00:26:19,820 --> 00:26:25,040
you choose to use them or not is left to

00:26:22,130 --> 00:26:26,930
your CI pipeline or your process so it's

00:26:25,040 --> 00:26:28,070
just got to publish them images it's

00:26:26,930 --> 00:26:30,590
then up to you to figure out whether you

00:26:28,070 --> 00:26:33,290
want to wear what app they're going to

00:26:30,590 --> 00:26:36,170
be deployed out to staging possibly

00:26:33,290 --> 00:26:38,660
production ok and it runs in kubernetes

00:26:36,170 --> 00:26:43,460
so that's obviously a good thing for

00:26:38,660 --> 00:26:45,590
talk on kubernetes it does so later on

00:26:43,460 --> 00:26:47,870
when we start to bring capac to CF it

00:26:45,590 --> 00:26:50,630
suggests that it will come in alignment

00:26:47,870 --> 00:26:52,580
with either they'll do it without

00:26:50,630 --> 00:26:55,010
communities it is just bits and pieces I

00:26:52,580 --> 00:26:56,840
don't think it's necessarily a Cuban use

00:26:55,010 --> 00:27:01,730
thing it's just they took the lifecycle

00:26:56,840 --> 00:27:05,240
components detect build image caching

00:27:01,730 --> 00:27:08,480
and and package them up as a company's

00:27:05,240 --> 00:27:10,160
controller so either they might assume

00:27:08,480 --> 00:27:11,870
that by the time they bring it to Cloud

00:27:10,160 --> 00:27:13,160
Foundry we've got a Rini and it's issued

00:27:11,870 --> 00:27:15,100
that no one's using Boston you've always

00:27:13,160 --> 00:27:17,750
got kubernetes or they might have to

00:27:15,100 --> 00:27:21,980
unpack it from Cuba knees and and run it

00:27:17,750 --> 00:27:23,090
as a posh thing it's in the future but

00:27:21,980 --> 00:27:25,490
we're going to do this now and it's

00:27:23,090 --> 00:27:30,800
going to be awesome so first things

00:27:25,490 --> 00:27:33,080
first what is kpac look like we could do

00:27:30,800 --> 00:27:35,360
a PR resources so I've already installed

00:27:33,080 --> 00:27:37,670
it on my cluster it's just a release

00:27:35,360 --> 00:27:40,430
file that you install and it gives you

00:27:37,670 --> 00:27:45,950
about five or six there's a four of them

00:27:40,430 --> 00:27:48,410
resources and the key ones maybe images

00:27:45,950 --> 00:27:51,530
that's basically saying there is a

00:27:48,410 --> 00:27:52,730
source and I want to build an image any

00:27:51,530 --> 00:27:56,360
time the source changes building

00:27:52,730 --> 00:27:59,210
their image every time that happens it

00:27:56,360 --> 00:28:00,770
creates a new build and that's just the

00:27:59,210 --> 00:28:02,630
record of all the times it's attempted

00:28:00,770 --> 00:28:04,370
to build something and we can watch the

00:28:02,630 --> 00:28:06,200
logs and it's lovely so that's what

00:28:04,370 --> 00:28:07,640
we're going to do now for for your

00:28:06,200 --> 00:28:11,809
convenience and mine I've already built

00:28:07,640 --> 00:28:14,960
a resource or a Hamel file that's going

00:28:11,809 --> 00:28:18,919
to do this for it so this is the github

00:28:14,960 --> 00:28:20,840
repo that this project is at I will for

00:28:18,919 --> 00:28:22,340
your benefit make a commit and change it

00:28:20,840 --> 00:28:24,470
and watch it rebuild but we'll start

00:28:22,340 --> 00:28:26,510
with whatever's on there we're going to

00:28:24,470 --> 00:28:30,080
move on from using version tags to dis

00:28:26,510 --> 00:28:32,000
using the showers and another thing of

00:28:30,080 --> 00:28:35,600
note perhaps is the caching so I've got

00:28:32,000 --> 00:28:36,950
caching on there we've got the same

00:28:35,600 --> 00:28:42,020
thing I was not looking at your signs at

00:28:36,950 --> 00:28:45,620
all completely not don't care anymore

00:28:42,020 --> 00:28:54,650
I'd rather just do the demo so you get

00:28:45,620 --> 00:29:01,940
the benefit of caching sorry it is so

00:28:54,650 --> 00:29:04,669
now here Kubb get builds and images so

00:29:01,940 --> 00:29:06,860
the Gamal said that it wanted an image

00:29:04,669 --> 00:29:09,770
so we created an image so the image came

00:29:06,860 --> 00:29:11,660
from the Gamal but the build came from

00:29:09,770 --> 00:29:15,020
the first time it went fetched whatever

00:29:11,660 --> 00:29:17,299
is on the git repo the kpac project

00:29:15,020 --> 00:29:21,260
comes at the moment with a CLI called

00:29:17,299 --> 00:29:24,140
logs which is how you get to watch the

00:29:21,260 --> 00:29:30,770
build process either live or

00:29:24,140 --> 00:29:32,419
historically to the lack of time just

00:29:30,770 --> 00:29:34,360
that one of us about to come out is the

00:29:32,419 --> 00:29:38,120
same as what it comes from pack build

00:29:34,360 --> 00:29:40,309
with less color don't know if there's a

00:29:38,120 --> 00:29:41,419
way to get color I do like the color if

00:29:40,309 --> 00:29:42,530
I could have a color back that'd be

00:29:41,419 --> 00:29:47,590
great

00:29:42,530 --> 00:29:49,940
and then I will will let that finish

00:29:47,590 --> 00:29:54,080
where we're going to do this I can get

00:29:49,940 --> 00:29:56,150
that later what do we got here so now

00:29:54,080 --> 00:29:57,980
that we've changed so locally we changed

00:29:56,150 --> 00:30:00,200
it to say holo CF summit now I'm going

00:29:57,980 --> 00:30:01,760
to commit that so the first image is

00:30:00,200 --> 00:30:05,130
going to be based on the hello world

00:30:01,760 --> 00:30:17,419
contents I'm going to commit this

00:30:05,130 --> 00:30:17,419
hello CF and what we should see is that

00:30:18,890 --> 00:30:25,289
had one build and it will resolve so

00:30:24,179 --> 00:30:26,910
this keep saying that it's the first

00:30:25,289 --> 00:30:29,280
build because it keeps updating with the

00:30:26,910 --> 00:30:33,020
new logs and eventually we'll find then

00:30:29,280 --> 00:30:33,020
you commit and we'll get a second build

00:30:37,159 --> 00:30:40,650
I'm not sure what I want to watch it's

00:30:39,210 --> 00:30:43,679
all very exciting so many things to

00:30:40,650 --> 00:30:45,960
watch no didn't mean to I've done a

00:30:43,679 --> 00:30:47,610
terrible else the wrong thing that was

00:30:45,960 --> 00:30:50,960
the worst command ever I just killed the

00:30:47,610 --> 00:30:50,960
whole window like an idiot

00:30:53,130 --> 00:30:59,610
I want my or my curl command no it was

00:30:57,390 --> 00:31:01,580
watched that way yeah look at that

00:30:59,610 --> 00:31:04,679
that's because it's the other one

00:31:01,580 --> 00:31:06,570
alright just forget it

00:31:04,679 --> 00:31:07,799
we'll go finish up so our K pack is

00:31:06,570 --> 00:31:09,409
basically doing the same thing as the

00:31:07,799 --> 00:31:12,720
pack command has taken that life cycle

00:31:09,409 --> 00:31:17,900
pulling down commits and rebuilding you

00:31:12,720 --> 00:31:20,220
would then watch the Kubb get images and

00:31:17,900 --> 00:31:22,620
you can see the first build is finished

00:31:20,220 --> 00:31:24,510
and we can take that full of that full

00:31:22,620 --> 00:31:35,760
year awry and give that to our

00:31:24,510 --> 00:31:38,330
deployment and do Kubb supply because

00:31:35,760 --> 00:31:38,330
I'm in the wrong folder

00:31:42,640 --> 00:31:47,020
pretty desperate just to do the finish

00:31:44,440 --> 00:31:48,700
this and that would deploy out so

00:31:47,020 --> 00:31:50,710
essentially kpac will keep building

00:31:48,700 --> 00:31:52,390
images its then your responsibility

00:31:50,710 --> 00:31:54,190
because you love community so you don't

00:31:52,390 --> 00:31:55,840
want anything to be done for you to then

00:31:54,190 --> 00:31:57,040
take that shot put it in your next

00:31:55,840 --> 00:31:59,680
deployment and push it out wherever it

00:31:57,040 --> 00:32:01,690
needs to go okay so that's the future of

00:31:59,680 --> 00:32:03,670
that's a bits and pieces we have in the

00:32:01,690 --> 00:32:06,670
future so we've got a full ecosystem of

00:32:03,670 --> 00:32:08,620
bill packs pivotal doing huge amount of

00:32:06,670 --> 00:32:10,210
work in this obviously you might want to

00:32:08,620 --> 00:32:13,570
build your own bill packs and then

00:32:10,210 --> 00:32:15,400
there's tool chain and really I'd hope

00:32:13,570 --> 00:32:17,080
80 to 90% of your apps can now be used

00:32:15,400 --> 00:32:20,070
with bill packs rather than the spoke

00:32:17,080 --> 00:32:23,960
doghouse so thank you very much

00:32:20,070 --> 00:32:23,960

YouTube URL: https://www.youtube.com/watch?v=kIJ0xBldhYY


