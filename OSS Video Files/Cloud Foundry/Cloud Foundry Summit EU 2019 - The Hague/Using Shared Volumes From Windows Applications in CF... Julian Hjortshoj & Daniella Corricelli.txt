Title: Using Shared Volumes From Windows Applications in CF... Julian Hjortshoj & Daniella Corricelli
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Using Shared Volumes From Windows Applications in Cloud Foundry - Julian Hjortshoj, Dell EMC & Daniella Corricelli, Pivotal 

Access to persistent volumes allows a much broader range of applications to run on Cloud Foundry. Windows applications, in particular, are often written to assume access to a file store, and often wonâ€™t work without one. But in past releases, Volume Services have only been available for Unix applications, and Windows workloads needed to be rewritten before they could be successfully cf pushed.  We worked to close this gap and build volume services for Windows, but the operating model was a poor fit, and left us with serious limitations. Then we found a better way forward - support for SMB volume connections from within Windows containers.  In this talk, we will cover options for mounting file shares into your Windows Cloud Foundry applications. We will then demo a couple of best-practices approaches using the Secure Credentials Broker, PowerShell scripts, and Steeltoe. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:07,500
welcome and thanks for turning up and I

00:00:04,190 --> 00:00:11,840
know this is the last talk between you

00:00:07,500 --> 00:00:11,840
and beer so we'll try and stay on time

00:00:24,350 --> 00:00:28,920
sometimes when you plug it in seems like

00:00:26,789 --> 00:00:33,870
the network gets a hichy this is off of

00:00:28,920 --> 00:00:36,570
Google slides though optimistically i'm

00:00:33,870 --> 00:00:39,360
juliÃ¡n your toy I work for Dell EMC out

00:00:36,570 --> 00:00:41,370
of the CEOs office but I'm also the

00:00:39,360 --> 00:00:46,829
product manager for the Cloud Foundry of

00:00:41,370 --> 00:00:49,050
Home Services team hi i'm daniela

00:00:46,829 --> 00:00:51,000
Porcelli a product manager with pivotal

00:00:49,050 --> 00:01:07,229
and my team's focused on the.net

00:00:51,000 --> 00:01:09,630
developer experience so far so every

00:01:07,229 --> 00:01:12,930
good story you've seen like you know

00:01:09,630 --> 00:01:14,790
Star Wars and The Odyssey and all of all

00:01:12,930 --> 00:01:17,040
of those all sort of follow the same

00:01:14,790 --> 00:01:19,950
dramatic art it's referred to as the

00:01:17,040 --> 00:01:22,229
hero's journey in which your hero starts

00:01:19,950 --> 00:01:23,369
off in a nice cozy home like place and

00:01:22,229 --> 00:01:26,810
then goes wanders out into the

00:01:23,369 --> 00:01:28,710
wilderness and it's obstacles ultimately

00:01:26,810 --> 00:01:31,170
successful in surmounting those

00:01:28,710 --> 00:01:34,409
obstacles and then comes back home again

00:01:31,170 --> 00:01:37,770
at the end so we're gonna tell you a

00:01:34,409 --> 00:01:41,720
similar story about starting in the nice

00:01:37,770 --> 00:01:44,700
cozy world of Linux development and then

00:01:41,720 --> 00:01:46,740
wandering into the nasty hinterlands of

00:01:44,700 --> 00:01:50,460
Windows development and running into

00:01:46,740 --> 00:01:53,670
problems and ultimately solving those

00:01:50,460 --> 00:02:04,770
problems and bringing home their the

00:01:53,670 --> 00:02:07,700
solution so let's get started I've gone

00:02:04,770 --> 00:02:11,670
too far again spacebar is not my friend

00:02:07,700 --> 00:02:12,819
so home for at least as far as we were

00:02:11,670 --> 00:02:14,680
concerned on the volume so

00:02:12,819 --> 00:02:20,019
this team looks like the Linux workflow

00:02:14,680 --> 00:02:23,680
and that for us is creating a service

00:02:20,019 --> 00:02:26,560
which represents some remote amount of

00:02:23,680 --> 00:02:31,500
file system and then binding that

00:02:26,560 --> 00:02:34,959
service to your app and that in turn

00:02:31,500 --> 00:02:37,599
causes that mount to become available to

00:02:34,959 --> 00:02:40,419
your container and so what that kind of

00:02:37,599 --> 00:02:53,620
looks like let's see if we can make this

00:02:40,419 --> 00:02:55,389
go experience when I can this demo so

00:02:53,620 --> 00:02:59,680
what does that look like that looks like

00:02:55,389 --> 00:03:01,329
CF push this is a little demo app it's

00:02:59,680 --> 00:03:03,969
like a little hello world app that when

00:03:01,329 --> 00:03:06,669
you hit the right endpoint writes a

00:03:03,969 --> 00:03:08,409
little message into a file reads it back

00:03:06,669 --> 00:03:13,750
out again and then puts it on the screen

00:03:08,409 --> 00:03:15,400
so for us we're pushing this app and now

00:03:13,750 --> 00:03:20,709
it's doing all the build packy things

00:03:15,400 --> 00:03:23,049
and it's making the droplet run and off

00:03:20,709 --> 00:03:25,989
we go so now we've got it running and

00:03:23,049 --> 00:03:28,599
we're gonna create a service the maps to

00:03:25,989 --> 00:03:32,290
an SMB mount so you can give it to us

00:03:28,599 --> 00:03:38,409
UNC name and then we're gonna bind that

00:03:32,290 --> 00:03:41,319
service to our app and we're gonna

00:03:38,409 --> 00:03:45,970
restart it and on restart it'll go do

00:03:41,319 --> 00:03:49,479
the Mountie thing and now once this

00:03:45,970 --> 00:03:51,879
thing starts now we can curl the right

00:03:49,479 --> 00:03:55,840
endpoint on that new app I just pushed

00:03:51,879 --> 00:04:01,419
and it comes back with a nice hello

00:03:55,840 --> 00:04:06,579
persistent world message so how do the

00:04:01,419 --> 00:04:09,419
covers what's that doing that's on the

00:04:06,579 --> 00:04:14,049
app binding that's inserting a little

00:04:09,419 --> 00:04:17,079
volume mount message into the what we

00:04:14,049 --> 00:04:19,919
call the desired lrp of the app and then

00:04:17,079 --> 00:04:25,029
once that happens placed on a Diego cell

00:04:19,919 --> 00:04:25,960
we send that binding to docker volume

00:04:25,029 --> 00:04:29,770
plugin

00:04:25,960 --> 00:04:32,229
that creates a mount on the Diego cell

00:04:29,770 --> 00:04:36,370
of that remote thing using just a kernel

00:04:32,229 --> 00:04:39,520
mount and then from there when we start

00:04:36,370 --> 00:04:41,020
the application up we add that mount the

00:04:39,520 --> 00:04:42,610
list of things that ought to get vine

00:04:41,020 --> 00:04:45,580
mounted into the application container

00:04:42,610 --> 00:04:51,120
and hey presto your application has

00:04:45,580 --> 00:04:55,870
access to the mountain and off you go

00:04:51,120 --> 00:04:58,060
so theoretically we're thinking to

00:04:55,870 --> 00:04:59,860
ourselves like yeah Windows will just do

00:04:58,060 --> 00:05:02,740
the same thing we did in Linux right

00:04:59,860 --> 00:05:05,380
it'll be no problem we'll just mount it

00:05:02,740 --> 00:05:07,150
onto the Windows cell and we'll somehow

00:05:05,380 --> 00:05:11,169
stuff it into the container when we

00:05:07,150 --> 00:05:12,940
start the Windows container right what

00:05:11,169 --> 00:05:19,060
could what could possibly go wrong it'll

00:05:12,940 --> 00:05:23,470
be great yeah it was this was a total

00:05:19,060 --> 00:05:27,460
bust for a couple reasons on the first

00:05:23,470 --> 00:05:31,539
attempt net use in Windows or new SMB

00:05:27,460 --> 00:05:35,500
mapping really only works for the user

00:05:31,539 --> 00:05:37,180
context that you do it in so we got the

00:05:35,500 --> 00:05:39,010
thing mounted but then you couldn't get

00:05:37,180 --> 00:05:40,599
it into the application container like

00:05:39,010 --> 00:05:43,810
it wasn't available to that other user

00:05:40,599 --> 00:05:46,630
context so that was not working and then

00:05:43,810 --> 00:05:49,060
Windows to try to make that problem

00:05:46,630 --> 00:05:52,150
better came up with this new SMB global

00:05:49,060 --> 00:05:55,419
mapping idea which would theoretically

00:05:52,150 --> 00:05:58,590
make mount Sun on Windows sort of like

00:05:55,419 --> 00:06:01,930
Linux but that thing was like too global

00:05:58,590 --> 00:06:03,940
in the sense that if you mounted a

00:06:01,930 --> 00:06:05,409
remote share with a set of options then

00:06:03,940 --> 00:06:06,789
that was the only thing you could do

00:06:05,409 --> 00:06:10,659
with that remote share and the second

00:06:06,789 --> 00:06:13,030
one maybe with a different user or some

00:06:10,659 --> 00:06:14,650
other mount option we just failed

00:06:13,030 --> 00:06:16,810
because that remote share is already

00:06:14,650 --> 00:06:19,539
mounted and then even if we got that

00:06:16,810 --> 00:06:21,190
worked around you needed to associate a

00:06:19,539 --> 00:06:27,130
drive letter meaning like you could only

00:06:21,190 --> 00:06:28,900
have 20 odd mounts per Diego cell so it

00:06:27,130 --> 00:06:33,220
was just awkward and we've thought about

00:06:28,900 --> 00:06:35,050
like oh well we could kind of codify all

00:06:33,220 --> 00:06:38,770
these limitations into a service broker

00:06:35,050 --> 00:06:39,340
that would enforce only one app gets to

00:06:38,770 --> 00:06:43,330
use

00:06:39,340 --> 00:06:44,590
a remote down but that would have been

00:06:43,330 --> 00:06:50,590
kind of rubbish

00:06:44,590 --> 00:06:53,860
so so we thought yeah this is really a

00:06:50,590 --> 00:06:56,800
square peg in a round hole and it really

00:06:53,860 --> 00:07:00,630
make sense to keep going so we we kind

00:06:56,800 --> 00:07:05,290
of gave up on volume Services team side

00:07:00,630 --> 00:07:07,810
unfortunately the net team had this use

00:07:05,290 --> 00:07:10,510
case on their radar I'll turn over to

00:07:07,810 --> 00:07:13,600
Daniela talk about that yeah let's talk

00:07:10,510 --> 00:07:16,030
about the window side first I'm gonna

00:07:13,600 --> 00:07:17,919
take a step back if you're a.net

00:07:16,030 --> 00:07:20,919
developer then you're probably familiar

00:07:17,919 --> 00:07:24,160
with the concept of domain joining so

00:07:20,919 --> 00:07:26,320
this outside of PCF or outside of Cloud

00:07:24,160 --> 00:07:29,110
Foundry you would connect to your

00:07:26,320 --> 00:07:31,240
enterprise SMB share and Yorick and

00:07:29,110 --> 00:07:33,790
admins would set the configurations for

00:07:31,240 --> 00:07:36,190
you in Cloud Foundry we do not have

00:07:33,790 --> 00:07:37,690
domain joining so for that reason and

00:07:36,190 --> 00:07:39,190
some of the reasons let Julian outlined

00:07:37,690 --> 00:07:41,350
we thought we might have been out of

00:07:39,190 --> 00:07:46,630
luck connecting to you SMB from within

00:07:41,350 --> 00:07:50,770
Cloud Foundry fortunately in Windows

00:07:46,630 --> 00:07:53,470
Server 1803 Microsoft did release a way

00:07:50,770 --> 00:07:58,090
to enable SMB shares allowing dotnet to

00:07:53,470 --> 00:07:59,830
be used from container processes so as

00:07:58,090 --> 00:08:01,990
Julien mentioned under the hood on the

00:07:59,830 --> 00:08:04,000
Linux side when you're using CF create

00:08:01,990 --> 00:08:06,220
service and bind service commands we're

00:08:04,000 --> 00:08:08,740
connecting from the network volume to

00:08:06,220 --> 00:08:10,720
your app and Cloud Foundry so it's the

00:08:08,740 --> 00:08:12,130
cell that initiates this from the

00:08:10,720 --> 00:08:15,280
service broker reaches out to the

00:08:12,130 --> 00:08:16,930
network share and makes the mount from

00:08:15,280 --> 00:08:23,640
the volume service broker which injects

00:08:16,930 --> 00:08:26,260
it into the container on the window side

00:08:23,640 --> 00:08:28,419
we set our storage credentials at the

00:08:26,260 --> 00:08:30,820
container level using the net use

00:08:28,419 --> 00:08:32,349
command we can call it from a container

00:08:30,820 --> 00:08:38,710
processes and connect to the network

00:08:32,349 --> 00:08:41,140
volume so why didn't we use the same

00:08:38,710 --> 00:08:42,880
binding workflow in Linux historically

00:08:41,140 --> 00:08:45,280
Windows has had more of an opinion about

00:08:42,880 --> 00:08:47,380
virtual file systems and I mentioned

00:08:45,280 --> 00:08:49,480
before that I am on the.net experience

00:08:47,380 --> 00:08:51,730
team so introducing a new command that

00:08:49,480 --> 00:08:52,750
uses CF we didn't think would be the

00:08:51,730 --> 00:08:55,330
best user flow

00:08:52,750 --> 00:08:57,190
so we let them use that use and it also

00:08:55,330 --> 00:09:02,140
has better security limiting one share

00:08:57,190 --> 00:09:04,960
per user a security note about that

00:09:02,140 --> 00:09:07,390
you're probably familiar with SSA Qing

00:09:04,960 --> 00:09:09,160
into your container and it's great you

00:09:07,390 --> 00:09:11,440
can go in as the vcap user you can check

00:09:09,160 --> 00:09:13,210
out what you need to check out but I

00:09:11,440 --> 00:09:15,370
should mention that you cannot view the

00:09:13,210 --> 00:09:18,040
mounted drive using that same format

00:09:15,370 --> 00:09:20,050
it's because the vcap user is using a

00:09:18,040 --> 00:09:21,820
different security context so it's just

00:09:20,050 --> 00:09:27,100
going to be blocked and that's a good

00:09:21,820 --> 00:09:29,260
thing the windows workflow so there are

00:09:27,100 --> 00:09:32,860
a few ways to mount your SMB share from

00:09:29,260 --> 00:09:35,590
your.net app the recommended way would

00:09:32,860 --> 00:09:36,970
be by leveraging steel-toe if you're not

00:09:35,590 --> 00:09:38,500
familiar with steel-toe it's an open

00:09:36,970 --> 00:09:39,280
source library built specifically for

00:09:38,500 --> 00:09:41,560
dotnet Korn

00:09:39,280 --> 00:09:42,910
dotnet framework micro services and if

00:09:41,560 --> 00:09:44,590
you're already using it you know it's

00:09:42,910 --> 00:09:46,810
great you can use it for config server

00:09:44,590 --> 00:09:49,600
for sticker breakers and you can install

00:09:46,810 --> 00:09:53,920
a via and you get package but steel-toed

00:09:49,600 --> 00:09:55,660
does require additional app code for

00:09:53,920 --> 00:09:57,790
your storage account credentials I

00:09:55,660 --> 00:09:59,890
definitely recommend cred hub it's great

00:09:57,790 --> 00:10:04,930
for centralized credential management in

00:09:59,890 --> 00:10:07,300
Cloud Foundry so for today or for your

00:10:04,930 --> 00:10:09,220
first time setting up your SMB we're

00:10:07,300 --> 00:10:13,510
going to use a very simple batch file

00:10:09,220 --> 00:10:15,460
approach so we would add a single flat

00:10:13,510 --> 00:10:19,839
file with one line of deployment code

00:10:15,460 --> 00:10:22,720
call it profile dot bat and we'll be

00:10:19,839 --> 00:10:27,370
using the CF set end command to set our

00:10:22,720 --> 00:10:31,650
environment variables and I'll show you

00:10:27,370 --> 00:10:31,650
a quick demo of how to do that today

00:10:39,699 --> 00:10:45,939
Oh so for this demo I'm using Azure so

00:10:44,259 --> 00:10:47,739
I'm in the azure portal this is where

00:10:45,939 --> 00:10:51,160
I'm keeping my storage account and my

00:10:47,739 --> 00:10:54,699
SMB share my share is called demo share

00:10:51,160 --> 00:10:56,679
and it's empty right now and I'm gonna

00:10:54,699 --> 00:11:02,350
grab the net use come in from the

00:10:56,679 --> 00:11:06,850
connect link and copy that and jump into

00:11:02,350 --> 00:11:09,669
visual studio so here I have a dotnet

00:11:06,850 --> 00:11:11,739
framework MVC app and I just added one

00:11:09,669 --> 00:11:16,269
function so that when I hit the final

00:11:11,739 --> 00:11:21,549
URL it will plop a file right in my SMB

00:11:16,269 --> 00:11:23,259
share and I'm adding the single file

00:11:21,549 --> 00:11:29,949
that I mentioned before a batch file

00:11:23,259 --> 00:11:31,239
profile dot batch and pasting in the one

00:11:29,949 --> 00:11:33,910
that used to come in and I'm going to

00:11:31,239 --> 00:11:38,709
use environment variables for my SMB

00:11:33,910 --> 00:11:40,660
path and credentials in PowerShell I'm

00:11:38,709 --> 00:11:42,129
already logged in to Cloud Foundry and

00:11:40,660 --> 00:11:44,699
I'm going to push my app with the new

00:11:42,129 --> 00:11:44,699
start command

00:11:50,540 --> 00:11:56,020
and since this have done net framework

00:11:52,400 --> 00:11:56,020
out we're going to use the HWC built our

00:11:58,090 --> 00:12:03,590
cool and it pushed up without running

00:12:01,190 --> 00:12:04,670
which is what I wanted it to do so now

00:12:03,590 --> 00:12:07,940
I'm going to set my environment

00:12:04,670 --> 00:12:12,070
variables so I'm setting the SMB path

00:12:07,940 --> 00:12:12,070
and SMB username and password

00:12:28,630 --> 00:12:34,019
right now that the environment variables

00:12:30,579 --> 00:12:34,019
are set up I'm going to run the app

00:12:42,070 --> 00:12:46,630
I'm gonna grab the URL and I mentioned

00:12:44,200 --> 00:12:48,790
before this moment I hit that URL it's

00:12:46,630 --> 00:12:51,070
gonna put a file right in my file oh

00:12:48,790 --> 00:12:58,570
sure it's empty right now I'm gonna go

00:12:51,070 --> 00:13:01,960
to the index route great hit

00:12:58,570 --> 00:13:05,290
successfully and refresh my storage and

00:13:01,960 --> 00:13:07,840
there it is so that is the quick and

00:13:05,290 --> 00:13:10,450
dirty way of setting up your SMB storage

00:13:07,840 --> 00:13:21,960
and I'm gonna hand it over to Julian to

00:13:10,450 --> 00:13:24,640
show a more secure way of doing that so

00:13:21,960 --> 00:13:31,300
I promised that we were gonna bring this

00:13:24,640 --> 00:13:34,660
home to make it work like Linux so what

00:13:31,300 --> 00:13:37,480
if you were really hoping for something

00:13:34,660 --> 00:13:39,250
like that that Linux workflow where you

00:13:37,480 --> 00:13:40,870
wanted to put your your credentials into

00:13:39,250 --> 00:13:45,460
a service instance you want to bind it

00:13:40,870 --> 00:13:47,380
to your app we had somebody ask us for

00:13:45,460 --> 00:13:51,820
this which was part of what put the seed

00:13:47,380 --> 00:13:52,960
for this talk into my head so the first

00:13:51,820 --> 00:13:57,520
thing the first thing we'll look at is

00:13:52,960 --> 00:14:00,730
is a create user provided service

00:13:57,520 --> 00:14:03,040
workflow so using CF cups to essentially

00:14:00,730 --> 00:14:05,740
encode all of those environment

00:14:03,040 --> 00:14:07,780
variables and then using a simple script

00:14:05,740 --> 00:14:12,790
to peel them back out and perform them

00:14:07,780 --> 00:14:14,680
now in this approach we're essentially

00:14:12,790 --> 00:14:17,590
allowing you to leave your app binary as

00:14:14,680 --> 00:14:22,300
it was you just drop a little bit of

00:14:17,590 --> 00:14:25,540
PowerShell script into your app and it

00:14:22,300 --> 00:14:27,370
handles the consumption of the user

00:14:25,540 --> 00:14:30,670
providing service for you who does mount

00:14:27,370 --> 00:14:33,760
and then puts the location of the mount

00:14:30,670 --> 00:14:35,260
back into vcap services so that your app

00:14:33,760 --> 00:14:39,700
can find it in the same way they would

00:14:35,260 --> 00:14:42,310
in in the Linux flow so this is that top

00:14:39,700 --> 00:14:45,160
bit it's basically just using JQ to

00:14:42,310 --> 00:14:49,960
parse the jQuery and we had to do this

00:14:45,160 --> 00:14:52,750
in PowerShell not bad because the

00:14:49,960 --> 00:14:54,050
windows batch files basically choke on

00:14:52,750 --> 00:14:57,769
environment variables

00:14:54,050 --> 00:15:00,290
more than one lying so PowerShell

00:14:57,769 --> 00:15:01,399
handles them and kneecap services is if

00:15:00,290 --> 00:15:10,010
you've ever looked at it it's quite

00:15:01,399 --> 00:15:12,079
sprawling so as it is so we're just

00:15:10,010 --> 00:15:15,680
doing the new SMB mapping that's

00:15:12,079 --> 00:15:19,480
essentially net use in powershell

00:15:15,680 --> 00:15:29,000
parlance so what does this look like

00:15:19,480 --> 00:15:30,709
practice actually we've already got the

00:15:29,000 --> 00:15:33,290
app pushed in this case we've got a

00:15:30,709 --> 00:15:36,800
poorer windows which which is that same

00:15:33,290 --> 00:15:39,050
app as we saw before but pushed with a

00:15:36,800 --> 00:15:42,529
manifest that specifies you know the

00:15:39,050 --> 00:15:46,820
windows build pack and really fast

00:15:42,529 --> 00:15:48,290
and you see when we curled it it it

00:15:46,820 --> 00:15:51,140
failed because it didn't have storage

00:15:48,290 --> 00:15:54,380
associated with it so we're gonna call

00:15:51,140 --> 00:15:56,630
sea of cups with a share a user and a

00:15:54,380 --> 00:15:58,790
password these are for a test server

00:15:56,630 --> 00:16:05,600
that's co deployed and then we're gonna

00:15:58,790 --> 00:16:07,790
bind that to our app when we restart and

00:16:05,600 --> 00:16:14,410
once again it'll restart with the new

00:16:07,790 --> 00:16:16,940
environment come up and it should have a

00:16:14,410 --> 00:16:19,540
file store and then that same right

00:16:16,940 --> 00:16:19,540
endpoint

00:16:22,880 --> 00:16:35,360
we're just curling the right endpoint

00:16:25,370 --> 00:16:39,250
and hey it works so ok so this worked

00:16:35,360 --> 00:16:41,329
right but it actually isn't very secure

00:16:39,250 --> 00:16:44,350
assuming that you care at all about the

00:16:41,329 --> 00:16:47,660
credentials that you've put into CF cups

00:16:44,350 --> 00:16:49,339
just running CFN on someone else's app

00:16:47,660 --> 00:16:51,589
will tell you the credentials that

00:16:49,339 --> 00:16:54,920
they've bound to their out which isn't

00:16:51,589 --> 00:16:59,600
very nice so if we want to make it

00:16:54,920 --> 00:17:01,790
secure then we need to use the secure

00:16:59,600 --> 00:17:02,959
credentials broker and listen effect we

00:17:01,790 --> 00:17:05,959
use this credit app on the backend

00:17:02,959 --> 00:17:09,589
shirley's door style similar to what we

00:17:05,959 --> 00:17:11,569
do in our Linux volume services so their

00:17:09,589 --> 00:17:15,020
secrets against stored securely incredib

00:17:11,569 --> 00:17:18,260
and then they get resolved at the last

00:17:15,020 --> 00:17:19,669
moment by the Cloud Foundry app

00:17:18,260 --> 00:17:21,620
lifecycle it essentially takes this

00:17:19,669 --> 00:17:23,959
reference to cred hub out of the

00:17:21,620 --> 00:17:27,949
environment and uses embedded

00:17:23,959 --> 00:17:34,280
credentials in the app to go resolve it

00:17:27,949 --> 00:17:37,280
before your app starts so it's slightly

00:17:34,280 --> 00:17:39,289
more script here this is the version of

00:17:37,280 --> 00:17:44,299
the script that can pull credentials out

00:17:39,289 --> 00:17:46,549
of CF cups the secure credentials broker

00:17:44,299 --> 00:17:48,710
or if you're in pivotal proprietary land

00:17:46,549 --> 00:17:51,559
the cred hub which is basically a

00:17:48,710 --> 00:17:55,429
proprietary version it's got a little

00:17:51,559 --> 00:17:59,000
bit more failure handling so for the

00:17:55,429 --> 00:18:00,890
case where you want to run your app and

00:17:59,000 --> 00:18:08,390
you don't have a volume service at all

00:18:00,890 --> 00:18:11,230
it'll skip the mounting step so we run

00:18:08,390 --> 00:18:11,230
through that flow

00:18:12,350 --> 00:18:19,740
if we look at me in the marketplace for

00:18:15,480 --> 00:18:24,140
this CF deployment you can see we

00:18:19,740 --> 00:18:28,140
already have a secure credentials broker

00:18:24,140 --> 00:18:34,620
installed and made available in this

00:18:28,140 --> 00:18:36,690
space so we can create a new service

00:18:34,620 --> 00:18:39,330
incidents and instead of CF cups we're

00:18:36,690 --> 00:18:42,679
gonna create a service which means we

00:18:39,330 --> 00:18:45,390
have to just fiddle this a little bit

00:18:42,679 --> 00:18:49,650
this is our same command from before

00:18:45,390 --> 00:18:52,650
with that's creating a service instance

00:18:49,650 --> 00:18:54,900
instead of a user provided service we're

00:18:52,650 --> 00:19:00,540
gonna call it secured service or

00:18:54,900 --> 00:19:03,679
something and create service takes a -

00:19:00,540 --> 00:19:06,660
seen through the - P for your metadata

00:19:03,679 --> 00:19:12,720
and I'll forego got a new service

00:19:06,660 --> 00:19:17,550
instance and unbind the old ones because

00:19:12,720 --> 00:19:21,500
we didn't want it anymore and bind our

00:19:17,550 --> 00:19:21,500
new service instance instead

00:19:35,190 --> 00:19:43,800
and then restart once again should see

00:19:41,370 --> 00:19:49,560
we get the same exact behavior we got

00:19:43,800 --> 00:19:52,520
before probably makes this kind of an

00:19:49,560 --> 00:19:52,520
exciting demo

00:20:00,880 --> 00:20:10,420
so here again curling the right hand

00:20:03,310 --> 00:20:13,510
point and same message so good so this

00:20:10,420 --> 00:20:16,540
is effectively a couple of different

00:20:13,510 --> 00:20:20,860
ways that script that we've added is

00:20:16,540 --> 00:20:24,880
fairly a packed Gnostic gives us a way

00:20:20,860 --> 00:20:27,070
of it's not quite the same is the Linux

00:20:24,880 --> 00:20:29,200
workflow because you do have to inject

00:20:27,070 --> 00:20:33,550
this little script into your app and

00:20:29,200 --> 00:20:38,230
also a JQ executable because that seemed

00:20:33,550 --> 00:20:40,450
to be available in standard pack but it

00:20:38,230 --> 00:20:44,320
gives you a short path to just drop a

00:20:40,450 --> 00:20:47,380
script in maybe edit it slightly and

00:20:44,320 --> 00:20:50,640
then your app can consume volumes in

00:20:47,380 --> 00:20:53,230
much the same way with the clinic's

00:20:50,640 --> 00:20:56,590
surely so if you're interested in trying

00:20:53,230 --> 00:20:59,530
this out there are some references here

00:20:56,590 --> 00:21:01,750
the secure credentials brokers course

00:20:59,530 --> 00:21:07,030
just available on github open source

00:21:01,750 --> 00:21:11,250
project there's a powershell example and

00:21:07,030 --> 00:21:16,810
steel-toe example for the approach that

00:21:11,250 --> 00:21:24,580
Daniela was talking about and it's a

00:21:16,810 --> 00:21:28,510
documentation I don't think the I don't

00:21:24,580 --> 00:21:31,390
believe I've added a link to the script

00:21:28,510 --> 00:21:33,460
that we had up on the screen but these

00:21:31,390 --> 00:21:34,840
slides are up to date so you can crib it

00:21:33,460 --> 00:21:36,880
out of there and also I will update

00:21:34,840 --> 00:21:41,310
slide deck with the github repo that has

00:21:36,880 --> 00:21:41,310
that for a Windows example in it

00:21:44,440 --> 00:21:54,160
the slide actually so thank you all for

00:21:48,250 --> 00:21:56,920
attending and if there's any questions I

00:21:54,160 --> 00:21:59,430
believe we have plenty of time where the

00:21:56,920 --> 00:21:59,430
beer starts

00:22:16,039 --> 00:22:22,269
there certainly could be it it's

00:22:19,059 --> 00:22:26,210
something that you know it doesn't

00:22:22,269 --> 00:22:28,130
differ hugely in kind from like the app

00:22:26,210 --> 00:22:31,519
lifecycle stuff the resolve cred to have

00:22:28,130 --> 00:22:34,549
credentials wouldn't hear a lot of

00:22:31,519 --> 00:22:38,390
signal from customers that that was

00:22:34,549 --> 00:22:40,370
important to them so I think where we

00:22:38,390 --> 00:22:49,220
are is you're kind of resting on on this

00:22:40,370 --> 00:22:50,779
and we'll see what people say sure right

00:22:49,220 --> 00:22:54,260
but then it becomes a question of like

00:22:50,779 --> 00:22:55,880
well sure it's a small thing to add a

00:22:54,260 --> 00:22:57,889
build backs also a small thing to drop a

00:22:55,880 --> 00:23:02,330
script and like we wanted to really make

00:22:57,889 --> 00:23:05,630
it right we ought to detect that it's

00:23:02,330 --> 00:23:07,639
required right detect the existence of a

00:23:05,630 --> 00:23:09,760
volume mount and then do it

00:23:07,639 --> 00:23:11,779
automatically the user doesn't have to

00:23:09,760 --> 00:23:15,529
concern themselves with it provide a

00:23:11,779 --> 00:23:17,240
service broker here that doesn't so we

00:23:15,529 --> 00:23:19,669
we thought about that we started

00:23:17,240 --> 00:23:21,620
thinking about like well do we want to

00:23:19,669 --> 00:23:25,130
go put plumbing in and we spent some

00:23:21,620 --> 00:23:27,049
time investigating what that would mean

00:23:25,130 --> 00:23:29,419
we thought well while we're at it we

00:23:27,049 --> 00:23:31,610
probably ought to take a look at how and

00:23:29,419 --> 00:23:34,130
if a thought of work because we didn't

00:23:31,610 --> 00:23:41,360
want to like go down the path of a

00:23:34,130 --> 00:23:42,799
strictly SMB plumbing and then burnt a

00:23:41,360 --> 00:23:46,639
little time on that and kind of came to

00:23:42,799 --> 00:23:48,230
the conclusion that that was more

00:23:46,639 --> 00:23:53,750
investigation than we wanted to do just

00:23:48,230 --> 00:23:57,110
then so so yeah so this is kind of where

00:23:53,750 --> 00:23:58,850
we are but definitely if you feel

00:23:57,110 --> 00:24:00,740
friction around this or feel pain around

00:23:58,850 --> 00:24:03,700
this let us know and we can think about

00:24:00,740 --> 00:24:03,700
prioritizing it

00:24:09,390 --> 00:24:18,750
all right thanks everyone

00:24:13,790 --> 00:24:18,750

YouTube URL: https://www.youtube.com/watch?v=SmU1Iyj52As


