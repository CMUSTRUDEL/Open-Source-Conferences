Title: BUCC - Getting Started with Single Tenant Cloud Foundry - Ruben Koster, Stark & Wayne
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	BUCC - Getting Started with Single Tenant Cloud Foundry - Ruben Koster, Stark & Wayne 

The benefits of using BUCC (BOSH, UAA, Credhub, and Concourse) will be demonstrated, by creating a real-world concourse pipeline to deploy a production Cloud Foundry, using the cf-deployment repository.   Topics which will be discussed include cloud-config, config-server, credhub, Concourse Credhub integration, variables in deployment manifests.

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:08,189
yeah so this talk is about buck and

00:00:05,509 --> 00:00:11,820
getting started with single tenant Cloud

00:00:08,189 --> 00:00:16,020
Foundry and I'm Ruben coaster

00:00:11,820 --> 00:00:17,010
so yeah I work for Stark and Wayne as a

00:00:16,020 --> 00:00:23,580
cloud architect

00:00:17,010 --> 00:00:25,490
I think stock of Wayne is a what do we

00:00:23,580 --> 00:00:29,820
do

00:00:25,490 --> 00:00:31,890
Cloud Foundry cloud native consultancy

00:00:29,820 --> 00:00:33,750
firm that's what we're doing so we've

00:00:31,890 --> 00:00:36,570
been in the Cloud Foundry ecosystem for

00:00:33,750 --> 00:00:38,340
a long time we are experts on washing

00:00:36,570 --> 00:00:41,579
cloud foundry and we have a lot of open

00:00:38,340 --> 00:00:45,329
source projects that enhance or augment

00:00:41,579 --> 00:00:48,239
Cloud Foundry this talk was also made

00:00:45,329 --> 00:00:52,469
possible by packets back a bare-metal

00:00:48,239 --> 00:00:55,890
clouds so you can use an API to get a

00:00:52,469 --> 00:01:01,170
bare-metal server I will explain more

00:00:55,890 --> 00:01:03,300
about why that's relevant later so yeah

00:01:01,170 --> 00:01:04,409
let's start out with the first part of

00:01:03,300 --> 00:01:06,570
the title buck

00:01:04,409 --> 00:01:10,200
so what's buck buck is an open source

00:01:06,570 --> 00:01:13,380
project stock Alain slash get up dark no

00:01:10,200 --> 00:01:16,290
get up / start going left buck that's

00:01:13,380 --> 00:01:18,330
where you can find it we have actually

00:01:16,290 --> 00:01:20,759
quite a lot of commits most of that is

00:01:18,330 --> 00:01:24,090
our CI pipeline that continuously

00:01:20,759 --> 00:01:26,939
integrates and tests the different

00:01:24,090 --> 00:01:28,650
components of book the components of

00:01:26,939 --> 00:01:30,720
buck what are those

00:01:28,650 --> 00:01:34,409
so bark is actually an opinionated

00:01:30,720 --> 00:01:38,250
wrapper around wash create em so you can

00:01:34,409 --> 00:01:41,909
use the buck CLI to do a backup which

00:01:38,250 --> 00:01:45,030
cause wash create em which will create a

00:01:41,909 --> 00:01:48,479
buck a capital buck which is an acronym

00:01:45,030 --> 00:01:51,060
for wash you a a credible Concourse

00:01:48,479 --> 00:01:51,720
these technologies work really well

00:01:51,060 --> 00:01:53,729
together

00:01:51,720 --> 00:01:54,930
we have integrate so they have a lot of

00:01:53,729 --> 00:01:57,240
integration points and we have

00:01:54,930 --> 00:01:59,369
integrated those in the best possible

00:01:57,240 --> 00:02:01,680
way or in an opinionated way like the

00:01:59,369 --> 00:02:07,399
way we think it's best to integrate

00:02:01,680 --> 00:02:11,009
those and that's actually a great

00:02:07,399 --> 00:02:12,060
starting point to start deploying a

00:02:11,009 --> 00:02:15,330
cloud foundry right

00:02:12,060 --> 00:02:21,420
we get a buck and then we go from there

00:02:15,330 --> 00:02:27,390
basically oh and now I need to go back

00:02:21,420 --> 00:02:30,930
oh wait the arrow works yeah okay

00:02:27,390 --> 00:02:34,349
single tenant Cloud Foundry yeah what do

00:02:30,930 --> 00:02:36,560
we mean with that so to me a single

00:02:34,349 --> 00:02:39,980
Clannad single tenant Cloud Foundry is

00:02:36,560 --> 00:02:43,560
Cloud Foundry used by a single company

00:02:39,980 --> 00:02:45,569
the users are trustworthy you know who

00:02:43,560 --> 00:02:47,250
they are you can go to their desk and

00:02:45,569 --> 00:02:51,900
complain about the stuff they did on

00:02:47,250 --> 00:02:54,840
your platform I don't know this is a bit

00:02:51,900 --> 00:02:57,900
random but it's in the single digit

00:02:54,840 --> 00:02:59,880
terabyte range so it's not those big

00:02:57,900 --> 00:03:04,709
service provider clouds we're talking

00:02:59,880 --> 00:03:07,349
about here it's yeah smaller Cloud

00:03:04,709 --> 00:03:11,220
Foundry deployments why that's relevant

00:03:07,349 --> 00:03:14,099
is because at this scale it doesn't you

00:03:11,220 --> 00:03:15,750
don't want too much overheads for your

00:03:14,099 --> 00:03:18,090
management plane right you don't want

00:03:15,750 --> 00:03:19,799
all sorts of different VMs just to have

00:03:18,090 --> 00:03:21,570
your infrastructure to start deploying

00:03:19,799 --> 00:03:26,280
Cloud Foundry so it's better to have

00:03:21,570 --> 00:03:28,590
that integrate right so yeah let's look

00:03:26,280 --> 00:03:30,810
at some options this is actually also a

00:03:28,590 --> 00:03:33,480
bit of a history lesson in the about

00:03:30,810 --> 00:03:34,920
buck and how we started and these

00:03:33,480 --> 00:03:37,680
features are still supported and in

00:03:34,920 --> 00:03:41,970
there but we have evolved the project to

00:03:37,680 --> 00:03:47,850
have more scope and with our latest and

00:03:41,970 --> 00:03:51,859
greatest yeah research basically so yeah

00:03:47,850 --> 00:03:53,850
backup you specify a CPI it's all

00:03:51,859 --> 00:03:56,400
basically built on top of Bosch

00:03:53,850 --> 00:03:59,700
deployments we consumed as the ops was

00:03:56,400 --> 00:04:03,239
there and we take those files together

00:03:59,700 --> 00:04:05,010
and inject it in or feed it to Bosch

00:04:03,239 --> 00:04:08,400
create and which does the magic of

00:04:05,010 --> 00:04:11,389
creating a VM from nothing so you will

00:04:08,400 --> 00:04:13,889
end up with one VM on your

00:04:11,389 --> 00:04:19,010
infrastructure of choice and then you

00:04:13,889 --> 00:04:19,010
can start deploying your Cloud Foundry

00:04:19,019 --> 00:04:25,139
but if you know Bosch a bit you need a

00:04:22,830 --> 00:04:29,370
cloud config to describe your networks

00:04:25,139 --> 00:04:32,870
and different types of VMs like what

00:04:29,370 --> 00:04:35,610
sizes they are and network yeah

00:04:32,870 --> 00:04:37,770
extensions around like load balancers

00:04:35,610 --> 00:04:39,360
ingress networks so all that stuff is

00:04:37,770 --> 00:04:41,520
not taken care of right so you start to

00:04:39,360 --> 00:04:42,690
think about that so that makes it harder

00:04:41,520 --> 00:04:44,250
to get started with Cloud Foundry

00:04:42,690 --> 00:04:48,389
because you have to think about boring

00:04:44,250 --> 00:04:51,360
stuff so yeah we can do better that's a

00:04:48,389 --> 00:04:52,560
project called borscht boot loader it's

00:04:51,360 --> 00:05:02,430
pronounced bubble

00:04:52,560 --> 00:05:05,240
bbl bubble has it's a wrapper around

00:05:02,430 --> 00:05:09,090
terraform so it has opinionated ways of

00:05:05,240 --> 00:05:10,669
setting up there's just pieces that

00:05:09,090 --> 00:05:14,150
borscht doesn't manage right so

00:05:10,669 --> 00:05:18,150
bootstrapping your load balancers and

00:05:14,150 --> 00:05:20,940
your networks and those things so it if

00:05:18,150 --> 00:05:23,759
you would use a bubble up we have

00:05:20,940 --> 00:05:25,469
actually support in buck for bubble but

00:05:23,759 --> 00:05:27,719
then you would call bubble which would

00:05:25,469 --> 00:05:31,560
call terraform apply which creates all

00:05:27,719 --> 00:05:35,310
the infrastructure then it will call

00:05:31,560 --> 00:05:38,190
bosch create n to create a jump box then

00:05:35,310 --> 00:05:41,370
it will call buck up with the CPI of

00:05:38,190 --> 00:05:44,719
your choice and then it will create the

00:05:41,370 --> 00:05:47,039
buck as we can see on the right side and

00:05:44,719 --> 00:05:48,870
a nice feature of bubble is that it will

00:05:47,039 --> 00:05:51,090
also update your cloud convict right so

00:05:48,870 --> 00:05:52,680
you at this point you can directly start

00:05:51,090 --> 00:05:54,539
deploying your Cloud Foundry because

00:05:52,680 --> 00:05:57,409
everything all the boss has all the

00:05:54,539 --> 00:06:03,810
information it needs so that's nice

00:05:57,409 --> 00:06:05,639
actually but what about we want to

00:06:03,810 --> 00:06:09,419
optimize for cost right because we it's

00:06:05,639 --> 00:06:13,729
a smaller deployment and this is

00:06:09,419 --> 00:06:16,490
creating actually quite a lot of VMs and

00:06:13,729 --> 00:06:19,469
there's a lot of buzz nowadays about

00:06:16,490 --> 00:06:23,159
containerized everything so we need

00:06:19,469 --> 00:06:23,370
containers right yeah just we do need

00:06:23,159 --> 00:06:26,490
that

00:06:23,370 --> 00:06:29,820
so yeah hmm there's an option for that

00:06:26,490 --> 00:06:31,949
we can do backup and then specify dash

00:06:29,820 --> 00:06:33,450
dash lights which will use the garden

00:06:31,949 --> 00:06:36,390
CPI

00:06:33,450 --> 00:06:38,310
the garden CPI so garden is the

00:06:36,390 --> 00:06:42,720
containerization technology of Cloud

00:06:38,310 --> 00:06:45,450
Foundry and a CPI is a cloud provider

00:06:42,720 --> 00:06:47,370
interface that's a feature of Bosch so

00:06:45,450 --> 00:06:49,710
the the way Bosch talks to different

00:06:47,370 --> 00:06:55,590
types of clouds is by having this cloud

00:06:49,710 --> 00:06:57,960
provider interface abstraction what this

00:06:55,590 --> 00:07:01,080
does is instead of creating VMs it

00:06:57,960 --> 00:07:04,890
creates containers so you end up with

00:07:01,080 --> 00:07:07,860
one big block VM with a Cloud Foundry

00:07:04,890 --> 00:07:09,300
inside there that's nice for development

00:07:07,860 --> 00:07:13,260
purposes you can have a cloud foundry

00:07:09,300 --> 00:07:15,630
running in a single VM but it doesn't

00:07:13,260 --> 00:07:18,450
really scale right you need some sort of

00:07:15,630 --> 00:07:23,490
way of going multi node spread your

00:07:18,450 --> 00:07:27,240
containers across multiple notes and

00:07:23,490 --> 00:07:32,130
that's why you need a scheduler or so

00:07:27,240 --> 00:07:34,200
okay let's see we can do bubble up plan

00:07:32,130 --> 00:07:36,960
to terraform apply and the whole thing

00:07:34,200 --> 00:07:38,640
then we can use bars to deploy Kubo

00:07:36,960 --> 00:07:42,090
which is a distribution of kubernetes

00:07:38,640 --> 00:07:45,060
using borsch and we can use how helm

00:07:42,090 --> 00:07:46,560
with the CF operator to install a

00:07:45,060 --> 00:07:49,200
containerized cloud foundry inside of

00:07:46,560 --> 00:07:53,310
Cuba but then your I don't know it's

00:07:49,200 --> 00:07:57,450
becoming quite complex but it's do

00:07:53,310 --> 00:07:59,760
probably do whoa I think it's lots of

00:07:57,450 --> 00:08:01,830
layers right and you could say we can go

00:07:59,760 --> 00:08:04,230
for a man is kubernetes yeah you can do

00:08:01,830 --> 00:08:06,660
that problem is there's complexity

00:08:04,230 --> 00:08:08,930
there's still complexity and by making

00:08:06,660 --> 00:08:11,280
complexity someone else's problem is not

00:08:08,930 --> 00:08:13,350
getting rid of the complexity right it's

00:08:11,280 --> 00:08:15,360
just making someone else problem and

00:08:13,350 --> 00:08:19,760
instead pay them for dealing with that

00:08:15,360 --> 00:08:22,770
complexity so yeah I was thinking can we

00:08:19,760 --> 00:08:25,620
actually do something else what what

00:08:22,770 --> 00:08:29,340
would a minimal Viable Product look like

00:08:25,620 --> 00:08:32,880
right what do we actually need we we

00:08:29,340 --> 00:08:36,260
want CF in containers right but the

00:08:32,880 --> 00:08:39,690
darker CPI actually does that quite well

00:08:36,260 --> 00:08:41,550
we need some way for these different

00:08:39,690 --> 00:08:45,030
containers running on different hosts to

00:08:41,550 --> 00:08:46,700
connect to each other and that's

00:08:45,030 --> 00:08:49,529
actually something

00:08:46,700 --> 00:08:53,250
in kubernetes they use flannel a lot for

00:08:49,529 --> 00:08:55,710
that just an overlay network we don't

00:08:53,250 --> 00:08:57,210
need any management of IP addresses and

00:08:55,710 --> 00:08:58,830
stuff borscht can do that fine it just

00:08:57,210 --> 00:09:02,910
needs to have that connectivity across

00:08:58,830 --> 00:09:04,860
the notes so that makes it simple yeah

00:09:02,910 --> 00:09:07,380
container placement I'm calling it

00:09:04,860 --> 00:09:09,529
placement not scheduling because we just

00:09:07,380 --> 00:09:14,520
want to deal with the lifecycle on

00:09:09,529 --> 00:09:16,440
different hosts of containers and we

00:09:14,520 --> 00:09:20,220
want to be able to update update those

00:09:16,440 --> 00:09:22,140
and take action if they are gone for

00:09:20,220 --> 00:09:24,410
that we can actually use blush multi CPI

00:09:22,140 --> 00:09:26,970
in which we can have different

00:09:24,410 --> 00:09:32,040
availability zones map to a different

00:09:26,970 --> 00:09:34,950
instance of the cloud provider and then

00:09:32,040 --> 00:09:37,110
for service discovery that's built in in

00:09:34,950 --> 00:09:39,029
borscht nowadays we have Bosh DNS so

00:09:37,110 --> 00:09:41,790
everything can find each other and for

00:09:39,029 --> 00:09:45,000
ingress actually darker port forwarding

00:09:41,790 --> 00:09:53,070
works just fine we can map it to an IP

00:09:45,000 --> 00:09:55,740
address and a port and yeah so with this

00:09:53,070 --> 00:09:58,680
in mind we actually came up with this

00:09:55,740 --> 00:10:00,990
thing for this we are actually using

00:09:58,680 --> 00:10:04,800
packets but this can work on any bare

00:10:00,990 --> 00:10:07,530
metal insulation bare metal or packet

00:10:04,800 --> 00:10:09,510
just the bare metal as a surface so it

00:10:07,530 --> 00:10:11,060
was easier for us to test we can use

00:10:09,510 --> 00:10:17,550
terraform to set this all up

00:10:11,060 --> 00:10:19,380
and in here we use in core OS core OS

00:10:17,550 --> 00:10:20,880
the reason we are using Korres is

00:10:19,380 --> 00:10:25,160
because it has three things we need

00:10:20,880 --> 00:10:27,510
which is docker and it has flannel and

00:10:25,160 --> 00:10:30,150
flannel needs at CD right so we need a

00:10:27,510 --> 00:10:32,130
net CD cluster so we just have an a CD

00:10:30,150 --> 00:10:34,260
cluster but it's not really keeping

00:10:32,130 --> 00:10:35,910
state it's just some configuration

00:10:34,260 --> 00:10:38,190
distributed configuration we are not

00:10:35,910 --> 00:10:41,190
using it like to keep state so it's not

00:10:38,190 --> 00:10:44,400
that we don't have to care about it that

00:10:41,190 --> 00:10:51,480
much and for flannel we actually did a

00:10:44,400 --> 00:10:53,310
thing where we made subnets static so we

00:10:51,480 --> 00:10:56,070
are not letting flannel hand out subnets

00:10:53,310 --> 00:10:59,220
we are defining them upfront so that we

00:10:56,070 --> 00:10:59,820
can let Bosch deal with allocating the

00:10:59,220 --> 00:11:04,140
IP address

00:10:59,820 --> 00:11:07,950
and on there we deploy containerized

00:11:04,140 --> 00:11:10,500
back and then we can deploy a container

00:11:07,950 --> 00:11:14,700
as cloud foundry in docker and that's

00:11:10,500 --> 00:11:17,370
the theory behind all of this and now

00:11:14,700 --> 00:11:19,950
I'm gonna go over the getting started

00:11:17,370 --> 00:11:23,040
part of the talk this was all I guess in

00:11:19,950 --> 00:11:25,500
the context right it's because it's all

00:11:23,040 --> 00:11:27,270
about getting to a point where it's easy

00:11:25,500 --> 00:11:29,430
to start deploying the cloud foundry and

00:11:27,270 --> 00:11:30,900
where you want to and the cloud foundry

00:11:29,430 --> 00:11:34,290
is the thing that's gonna change a lot

00:11:30,900 --> 00:11:35,970
right we have weekly releases almost and

00:11:34,290 --> 00:11:37,440
if you want to do open source cloud

00:11:35,970 --> 00:11:39,690
foundry you need to be able to have a

00:11:37,440 --> 00:11:43,250
pipeline you actually need a pipeline to

00:11:39,690 --> 00:11:47,310
apply those updates so we will use this

00:11:43,250 --> 00:11:50,610
foundation layer basically as the basis

00:11:47,310 --> 00:11:52,800
on which we will deploy cloud authorized

00:11:50,610 --> 00:12:06,420
version of our containerized version of

00:11:52,800 --> 00:12:10,020
cloud foundry yes yes okay please ask

00:12:06,420 --> 00:12:15,840
questions I've done this stuff a lot so

00:12:10,020 --> 00:12:22,560
if I go too quickly please say so let me

00:12:15,840 --> 00:12:25,350
first go out of here so so we have this

00:12:22,560 --> 00:12:28,590
bare metal cluster running of three big

00:12:25,350 --> 00:12:31,170
notes it's actually late today there's a

00:12:28,590 --> 00:12:32,880
hands-on lab session and tomorrow also

00:12:31,170 --> 00:12:35,370
where we will actually be using this

00:12:32,880 --> 00:12:39,870
bare metal cluster it's three nodes and

00:12:35,370 --> 00:12:44,120
the total memory of what it's 1,100 gigs

00:12:39,870 --> 00:12:49,170
of ram so it's quite a big cluster and

00:12:44,120 --> 00:12:51,960
on the first node it we have configured

00:12:49,170 --> 00:12:54,270
core OS to automatically on boot ups

00:12:51,960 --> 00:12:56,010
deploy a buck right so after the

00:12:54,270 --> 00:12:59,750
terraform apply we actually already have

00:12:56,010 --> 00:13:03,540
a buck and we can just do a buck shell

00:12:59,750 --> 00:13:06,210
command which will start a docker

00:13:03,540 --> 00:13:08,640
container with the buck configuration

00:13:06,210 --> 00:13:10,449
because buck has generated secrets to

00:13:08,640 --> 00:13:15,639
for your

00:13:10,449 --> 00:13:17,110
borsch password for your boss borscht

00:13:15,639 --> 00:13:18,850
and your credit up and all those things

00:13:17,110 --> 00:13:21,550
and buck actually has all sorts of

00:13:18,850 --> 00:13:25,449
rapper or helper functions that you can

00:13:21,550 --> 00:13:28,480
use to easily configure your CL eyes so

00:13:25,449 --> 00:13:31,290
for example I can do buck trade hub and

00:13:28,480 --> 00:13:34,209
then we'll install the credible CLI and

00:13:31,290 --> 00:13:38,230
authenticate it with this Giffen buck

00:13:34,209 --> 00:13:43,350
and I can do an out things like trade

00:13:38,230 --> 00:13:47,410
hub find and then name the name is

00:13:43,350 --> 00:13:48,880
concourse main and the reason why I'm

00:13:47,410 --> 00:13:51,069
looking at concourse main is because

00:13:48,880 --> 00:13:54,550
this is another feature of concourse

00:13:51,069 --> 00:13:57,069
concourse is able to look up variables

00:13:54,550 --> 00:13:59,079
in a given credential or secret store

00:13:57,069 --> 00:14:02,440
and we have configured it to look up

00:13:59,079 --> 00:14:04,779
things in cred up and so on the back up

00:14:02,440 --> 00:14:07,389
it will actually populate we import

00:14:04,779 --> 00:14:10,540
credentials on boot into credible so

00:14:07,389 --> 00:14:13,329
that we can directly start pipelining by

00:14:10,540 --> 00:14:15,220
just using for example the bar see a

00:14:13,329 --> 00:14:18,910
search right that variable we can

00:14:15,220 --> 00:14:21,970
directly use that in a pipeline we don't

00:14:18,910 --> 00:14:28,240
have to deal yeah it's secure by default

00:14:21,970 --> 00:14:35,199
basically so there's another command

00:14:28,240 --> 00:14:38,290
which is buck info which gives you the

00:14:35,199 --> 00:14:43,810
credit that's gonna work or do you have

00:14:38,290 --> 00:14:50,139
to control click it right click control

00:14:43,810 --> 00:14:52,000
click yes first I think it's a

00:14:50,139 --> 00:14:54,040
self-signed so concourse is running with

00:14:52,000 --> 00:14:56,170
a self-signed certificates at I that's

00:14:54,040 --> 00:14:59,620
why I have to do this I have to take all

00:14:56,170 --> 00:15:06,430
the responsibility for their risks but I

00:14:59,620 --> 00:15:08,470
know what I'm doing I think I need to

00:15:06,430 --> 00:15:12,560
switch back to the terminal get the

00:15:08,470 --> 00:15:16,500
passwords yes

00:15:12,560 --> 00:15:18,389
yeah so this is not my laptop and I

00:15:16,500 --> 00:15:26,850
usually use a Mac and I'm now on the bun

00:15:18,389 --> 00:15:29,910
- but my okay thanks this is awkward

00:15:26,850 --> 00:15:39,839
that will double tap okay and then I can

00:15:29,910 --> 00:15:42,060
just control fee to finger tap right

00:15:39,839 --> 00:15:43,920
click copy we're gonna do it this way

00:15:42,060 --> 00:15:44,990
right now everybody knows what we're

00:15:43,920 --> 00:15:50,240
doing

00:15:44,990 --> 00:15:50,240
paste huh right that works

00:15:50,490 --> 00:15:54,509
yeah actually for the handful left we're

00:15:52,560 --> 00:15:56,040
gonna deploy a lot of cloud foundries on

00:15:54,509 --> 00:16:00,000
this bare metal thing because bare metal

00:15:56,040 --> 00:16:02,579
is actually crazy fast so we're just

00:16:00,000 --> 00:16:04,430
gonna deploy a whole bunch I will delete

00:16:02,579 --> 00:16:07,649
all this before the lab but I was I

00:16:04,430 --> 00:16:12,839
don't know was working on getting this

00:16:07,649 --> 00:16:17,160
all working yeah but yeah so what we can

00:16:12,839 --> 00:16:21,930
do here so we have a pipeline here and

00:16:17,160 --> 00:16:24,350
that pipeline so we can just use buck

00:16:21,930 --> 00:16:24,350
fly

00:16:28,230 --> 00:16:38,950
buck fly so fly is the CLI of concourse

00:16:32,200 --> 00:16:39,580
right so with the fly CLI let me get

00:16:38,950 --> 00:16:42,850
that

00:16:39,580 --> 00:16:45,640
yeah mo file from the hands-on labs so

00:16:42,850 --> 00:16:48,250
this is actually the pipeline so in

00:16:45,640 --> 00:16:50,560
concourse you need a manifest to defy

00:16:48,250 --> 00:16:54,340
amble manifest which defines your whole

00:16:50,560 --> 00:17:16,709
pipeline so let me quickly get us from

00:16:54,340 --> 00:17:21,550
get up okay okay let's not go into that

00:17:16,709 --> 00:17:30,210
so this works copy paste and then yes to

00:17:21,550 --> 00:17:33,850
a file line yeah so I can just do a fly

00:17:30,210 --> 00:17:36,220
- T buck the target is buck it says so

00:17:33,850 --> 00:17:41,200
in the example out or in the output and

00:17:36,220 --> 00:17:58,930
then ech new set pipeline - P pipeline

00:17:41,200 --> 00:18:03,000
name CF yeah demo it's fine you have

00:17:58,930 --> 00:18:07,600
thank you I have such helpful colleagues

00:18:03,000 --> 00:18:13,570
yes go speakers yeah and I think I need

00:18:07,600 --> 00:18:16,770
to provide a variable but wait now I'm I

00:18:13,570 --> 00:18:16,770
can try it this way

00:18:21,640 --> 00:18:25,940
why doesn't that exist oh it's called

00:18:24,500 --> 00:18:32,240
pipeline Thanks

00:18:25,940 --> 00:18:34,610
yes sorry that was what and now yeah so

00:18:32,240 --> 00:18:37,010
we're missing this prefix so there are

00:18:34,610 --> 00:18:41,450
variables in there but I also need a

00:18:37,010 --> 00:18:49,190
prefix to supply that so let me do this

00:18:41,450 --> 00:18:52,340
and then fly I know something right I

00:18:49,190 --> 00:18:58,910
like this because help and then you can

00:18:52,340 --> 00:19:01,100
just do sets pipeline help I mean this

00:18:58,910 --> 00:19:02,630
is how I usually work I don't know all

00:19:01,100 --> 00:19:05,210
this stuff so I just

00:19:02,630 --> 00:19:07,760
or don't remember it right but it's

00:19:05,210 --> 00:19:13,000
actually useful to see right so we can

00:19:07,760 --> 00:19:16,400
supply so the syntax with a double

00:19:13,000 --> 00:19:18,470
bracket that's a variable in and that

00:19:16,400 --> 00:19:21,500
will be interpolated so if you don't

00:19:18,470 --> 00:19:24,020
provide it it will try to look it up and

00:19:21,500 --> 00:19:26,510
read up but I know the prefix is not set

00:19:24,020 --> 00:19:28,490
there so I have to provide it now when I

00:19:26,510 --> 00:19:34,780
do the set pipeline and I can do that

00:19:28,490 --> 00:19:44,960
with a variable here so I can do - - 4

00:19:34,780 --> 00:19:47,300
equals prefix equals CF so now we can

00:19:44,960 --> 00:19:49,760
see that it's changed the system domain

00:19:47,300 --> 00:19:54,710
right so that's where it's interpolated

00:19:49,760 --> 00:19:59,450
now it's a German keyboard

00:19:54,710 --> 00:20:01,670
I think it's yes that's the one okay so

00:19:59,450 --> 00:20:04,730
now we have updated this pipeline

00:20:01,670 --> 00:20:14,390
definition and it actually provides us

00:20:04,730 --> 00:20:19,190
with a nice link right click control

00:20:14,390 --> 00:20:23,180
click yes control click so by default

00:20:19,190 --> 00:20:25,010
it's paused right so it's blue okay we

00:20:23,180 --> 00:20:28,670
have twice now so I can start it and

00:20:25,010 --> 00:20:31,130
then I can kick off the pipeline here

00:20:28,670 --> 00:20:33,720
and this will go start deploying

00:20:31,130 --> 00:20:36,390
everything

00:20:33,720 --> 00:20:38,370
so now I will actually go over the

00:20:36,390 --> 00:20:39,960
pipeline definition because we all

00:20:38,370 --> 00:20:44,640
believe that it's gonna deploy something

00:20:39,960 --> 00:20:47,100
but yeah because I think an important

00:20:44,640 --> 00:20:48,480
aspect of deploying cloud fathering and

00:20:47,100 --> 00:20:50,310
getting started with Cloud Foundry is

00:20:48,480 --> 00:20:52,590
understanding your Concourse pipeline

00:20:50,310 --> 00:20:55,470
because that's actually where this whole

00:20:52,590 --> 00:20:57,810
pipeline is self-contained and it's it's

00:20:55,470 --> 00:21:00,660
not that big so if you understand this

00:20:57,810 --> 00:21:04,200
pipeline you you know how to operate a

00:21:00,660 --> 00:21:06,030
Cloud Foundry more or less right until

00:21:04,200 --> 00:21:08,970
stuff doesn't work and you have to go

00:21:06,030 --> 00:21:11,880
dive in and understand borsch and go

00:21:08,970 --> 00:21:14,040
into VMs and debug or pm's in this case

00:21:11,880 --> 00:21:20,820
it will be containers I can show that

00:21:14,040 --> 00:21:22,890
later so yeah one big actually what we

00:21:20,820 --> 00:21:26,280
are using here is an important piece

00:21:22,890 --> 00:21:29,100
that's right right at the bottom that's

00:21:26,280 --> 00:21:32,400
the boss deployment resource which

00:21:29,100 --> 00:21:34,470
there's a link to here so there's a

00:21:32,400 --> 00:21:36,510
built-in boss deployment resource in

00:21:34,470 --> 00:21:41,220
concourse but this is the the new one

00:21:36,510 --> 00:21:44,100
that supports ops files of files it's a

00:21:41,220 --> 00:21:46,200
way of having extensions on borsch

00:21:44,100 --> 00:21:49,860
manifest so you you have a base manifest

00:21:46,200 --> 00:21:52,430
for CF deployment let me actually open

00:21:49,860 --> 00:21:52,430
it up

00:21:56,980 --> 00:22:02,080
so Cloud Foundry and then there are CF

00:21:59,230 --> 00:22:03,880
deployments this is the main repo we're

00:22:02,080 --> 00:22:06,520
like the open-source Cloud Foundry is

00:22:03,880 --> 00:22:08,860
integrated so the release engineering

00:22:06,520 --> 00:22:11,050
team will publish new releases new

00:22:08,860 --> 00:22:12,880
versions here and what does that mean it

00:22:11,050 --> 00:22:14,710
means that we have new versions of this

00:22:12,880 --> 00:22:18,160
CF deployment file this is the really

00:22:14,710 --> 00:22:22,300
important Bosch manifest of how to

00:22:18,160 --> 00:22:24,250
deploy a canonical Cloud Foundry and we

00:22:22,300 --> 00:22:26,440
don't go over that now but just know

00:22:24,250 --> 00:22:29,950
that it exists and ops files are

00:22:26,440 --> 00:22:34,720
basically feature flags or something so

00:22:29,950 --> 00:22:37,120
it's a way it's a way of may knowing how

00:22:34,720 --> 00:22:39,850
or defining how to make changes to a

00:22:37,120 --> 00:22:40,300
certain manifest to enable a certain new

00:22:39,850 --> 00:22:44,320
feature

00:22:40,300 --> 00:22:46,870
so there's workarounds but also things

00:22:44,320 --> 00:22:48,970
like yeah OpenStack

00:22:46,870 --> 00:22:51,430
skills to 1az that's for example

00:22:48,970 --> 00:22:53,440
something we're using here but also

00:22:51,430 --> 00:22:56,020
experimental stuff so like features that

00:22:53,440 --> 00:22:58,060
are not there or that are being worked

00:22:56,020 --> 00:22:59,770
on but can be tested but are not

00:22:58,060 --> 00:23:07,030
production ready you can find an

00:22:59,770 --> 00:23:10,780
experimental and all that is combined

00:23:07,030 --> 00:23:14,140
actually here right so what we do we say

00:23:10,780 --> 00:23:16,720
which manifest to use so get CF

00:23:14,140 --> 00:23:18,700
deployment is just I get pool basically

00:23:16,720 --> 00:23:20,560
we use it get resource to get the CF

00:23:18,700 --> 00:23:24,580
deployment repo and we make sure that's

00:23:20,560 --> 00:23:26,560
a stable one by using tag filters we get

00:23:24,580 --> 00:23:28,990
the stem cell and this ops file but that

00:23:26,560 --> 00:23:32,020
I will go for that later that's our own

00:23:28,990 --> 00:23:35,110
changes that we make to this but yes so

00:23:32,020 --> 00:23:38,230
we're just specifying UCF deployment and

00:23:35,110 --> 00:23:42,010
use all these types of ops files to make

00:23:38,230 --> 00:23:44,080
changes to his babes manifest so for

00:23:42,010 --> 00:23:46,570
example use compiled releases compile

00:23:44,080 --> 00:23:48,220
relays is a way of in borscht

00:23:46,570 --> 00:23:52,660
you have the compilation phase where it

00:23:48,220 --> 00:23:55,900
tries to compile the source code into a

00:23:52,660 --> 00:23:58,270
binary but we have compiled releases

00:23:55,900 --> 00:24:00,490
which are published by the CI of the

00:23:58,270 --> 00:24:02,350
release engineering team which will skip

00:24:00,490 --> 00:24:04,030
that face so it's for a certain stem

00:24:02,350 --> 00:24:06,160
cell version they publish a compiled

00:24:04,030 --> 00:24:09,910
release which allows you to speed up

00:24:06,160 --> 00:24:12,250
your deployment yeah and you

00:24:09,910 --> 00:24:13,870
Postgres skill two one is he a bunch of

00:24:12,250 --> 00:24:16,030
things we do here in this particular

00:24:13,870 --> 00:24:21,850
instance to make it like really fast and

00:24:16,030 --> 00:24:25,710
look fancy and then there's wash right

00:24:21,850 --> 00:24:27,880
this is variables again so we here

00:24:25,710 --> 00:24:29,560
because we are deploying multiple

00:24:27,880 --> 00:24:31,240
instances of cloud family we have to

00:24:29,560 --> 00:24:33,100
change the deployment name normally you

00:24:31,240 --> 00:24:35,320
would only have to supply a system

00:24:33,100 --> 00:24:37,150
domain so that's the one variable you

00:24:35,320 --> 00:24:40,300
actually need to supply so that's the

00:24:37,150 --> 00:24:43,240
system domain DNS name where your the

00:24:40,300 --> 00:24:46,090
wild-card DNS record where your instance

00:24:43,240 --> 00:24:47,740
will be running or reachable so you have

00:24:46,090 --> 00:24:51,220
to configure the DNS yourself Porsche is

00:24:47,740 --> 00:24:58,270
not doing that but routes will be

00:24:51,220 --> 00:25:01,240
announced on that domain yeah so that's

00:24:58,270 --> 00:25:04,390
actually all there is to deploying a

00:25:01,240 --> 00:25:06,280
Cloud Foundry from CF deployment this is

00:25:04,390 --> 00:25:09,340
just defining where to get the CF

00:25:06,280 --> 00:25:13,540
deployment form from and this ops file

00:25:09,340 --> 00:25:15,010
is we use a file resource to have an

00:25:13,540 --> 00:25:17,200
inline ops file so that this whole

00:25:15,010 --> 00:25:19,510
pipeline is self-contained but we needed

00:25:17,200 --> 00:25:21,820
to make some changes to make it run on

00:25:19,510 --> 00:25:25,660
docker write that so this is just

00:25:21,820 --> 00:25:28,720
hackery that you maybe we could like

00:25:25,660 --> 00:25:30,700
even upstream this and get this into CF

00:25:28,720 --> 00:25:32,920
deployment into a proper office file but

00:25:30,700 --> 00:25:34,780
for us to fast to be able to iterate

00:25:32,920 --> 00:25:38,410
fast we were doing it inline in this

00:25:34,780 --> 00:25:40,780
pipeline and this here is where we

00:25:38,410 --> 00:25:44,430
define what this boss deployment thing

00:25:40,780 --> 00:25:47,530
is right here we say or just deploy task

00:25:44,430 --> 00:25:50,890
resource here we define the deployment

00:25:47,530 --> 00:25:54,250
name and we look up the credentials for

00:25:50,890 --> 00:25:56,170
the boss right that's what I showed

00:25:54,250 --> 00:25:59,110
earlier we did the credit find and then

00:25:56,170 --> 00:26:02,320
we saw the other credentials that were

00:25:59,110 --> 00:26:05,530
injected into credit hub by Bach during

00:26:02,320 --> 00:26:07,120
the bush create an and here this is why

00:26:05,530 --> 00:26:09,490
we do that because this gives us a

00:26:07,120 --> 00:26:11,440
simple way of looking up those

00:26:09,490 --> 00:26:14,020
credentials it will by default we'll

00:26:11,440 --> 00:26:16,990
look in concourse main because main is

00:26:14,020 --> 00:26:18,730
the default team in concourse so that's

00:26:16,990 --> 00:26:21,360
the part where it expects these fibrils

00:26:18,730 --> 00:26:21,360
to exist

00:26:23,179 --> 00:26:29,309
yeah that's it

00:26:25,169 --> 00:26:36,960
the deployment succeeded it took nine

00:26:29,309 --> 00:26:40,020
minutes okay yeah that's it we can yeah

00:26:36,960 --> 00:26:42,539
I can do a bush instances so we have in

00:26:40,020 --> 00:26:47,390
this box shall we have also the Boxee

00:26:42,539 --> 00:26:52,620
alive which we can use to do instance

00:26:47,390 --> 00:27:01,409
deep dash D for deployment and that was

00:26:52,620 --> 00:27:06,620
C F dash zero one was it hmm maybe I

00:27:01,409 --> 00:27:09,620
called no I think I I don't know

00:27:06,620 --> 00:27:09,620
deployments

00:27:13,010 --> 00:27:23,160
that's not that readable we can pipe it

00:27:16,320 --> 00:27:25,650
into less so they're cf0 too so here we

00:27:23,160 --> 00:27:28,440
can actually see all the releases that

00:27:25,650 --> 00:27:30,570
were used so the releases that boss uses

00:27:28,440 --> 00:27:32,400
are defined in the brush manifest so

00:27:30,570 --> 00:27:34,650
when they publish a new version of the

00:27:32,400 --> 00:27:35,850
CF deployment there will be new versions

00:27:34,650 --> 00:27:37,560
and here you can actually see which

00:27:35,850 --> 00:27:40,500
versions of every component you are

00:27:37,560 --> 00:27:44,040
running so that's quite nice and which

00:27:40,500 --> 00:27:50,010
stem-cell to use or you are using which

00:27:44,040 --> 00:27:52,460
is also defined in the manifest we just

00:27:50,010 --> 00:27:52,460
go to one

00:28:00,240 --> 00:28:03,240
yeah

00:28:07,310 --> 00:28:16,130
yeah I think that's it

00:28:12,470 --> 00:28:19,230
how much time do I have left

00:28:16,130 --> 00:28:24,990
none right or two minutes so that's

00:28:19,230 --> 00:28:26,490
actually good questions oh I think I've

00:28:24,990 --> 00:28:29,160
slides for that ah yeah

00:28:26,490 --> 00:28:31,710
want to learn more we have buck we have

00:28:29,160 --> 00:28:35,250
oh yeah molten core we're gonna open

00:28:31,710 --> 00:28:38,400
source this this project around setting

00:28:35,250 --> 00:28:40,560
up a core OS cluster to do these types

00:28:38,400 --> 00:28:42,480
of things we're gonna open source it we

00:28:40,560 --> 00:28:44,220
came up with a name we're thinking of

00:28:42,480 --> 00:28:46,200
calling it molten core

00:28:44,220 --> 00:28:49,860
what's your blog for announcements

00:28:46,200 --> 00:28:52,380
around that and bare metal serve bare

00:28:49,860 --> 00:28:54,840
metal as a service go to packing.com and

00:28:52,380 --> 00:29:03,330
you can use the desk discount code to

00:28:54,840 --> 00:29:06,240
get $100 credit which is actually quite

00:29:03,330 --> 00:29:12,630
much because these servers you pay like

00:29:06,240 --> 00:29:16,200
I think for the 30 gig model you pay $40

00:29:12,630 --> 00:29:17,850
cents per hour so you can actually do

00:29:16,200 --> 00:29:28,910
quite a bit of bit of experimentation

00:29:17,850 --> 00:29:28,910
for this morning yeah question yes

00:29:31,590 --> 00:29:40,989
I'm not better in the recording in good

00:29:37,559 --> 00:29:43,139
since this is a 101 session I have a

00:29:40,989 --> 00:29:47,229
couple of very elementary question yes

00:29:43,139 --> 00:29:49,330
is is buck required or is it optional

00:29:47,229 --> 00:29:51,669
for deploying Cloud Foundry deploying

00:29:49,330 --> 00:29:55,749
cloud yeah so you only need the Bosch

00:29:51,669 --> 00:29:58,090
aspects of cloud foundry or of buck so

00:29:55,749 --> 00:30:01,719
Bosch is the thing that deploys cloud

00:29:58,090 --> 00:30:04,239
foundry Bosch nowadays is usually

00:30:01,719 --> 00:30:07,269
configured with QA a authentication so

00:30:04,239 --> 00:30:12,219
it often is deployed alongside UA is not

00:30:07,269 --> 00:30:15,549
strictly needed and then cred up is also

00:30:12,219 --> 00:30:17,289
quite useful to have nowadays because if

00:30:15,549 --> 00:30:18,759
you're not using trade up where are you

00:30:17,289 --> 00:30:23,679
gonna store your credentials right

00:30:18,759 --> 00:30:25,960
because a lot of so we have variable

00:30:23,679 --> 00:30:29,700
definitions in a Bosch deployment

00:30:25,960 --> 00:30:32,529
manifest where this it's defined how the

00:30:29,700 --> 00:30:34,059
certificates are generated which domain

00:30:32,529 --> 00:30:38,440
names to use and stuff like that and

00:30:34,059 --> 00:30:40,269
those are generated on deploy and they

00:30:38,440 --> 00:30:42,159
are stored in cred up for example if you

00:30:40,269 --> 00:30:43,839
configure borscht to do that you can

00:30:42,159 --> 00:30:45,489
also store that in a yellow file but

00:30:43,839 --> 00:30:47,019
that's then you have to deal with a demo

00:30:45,489 --> 00:30:49,599
file so it's better to use the secret

00:30:47,019 --> 00:30:52,599
manager for that and then concourse yeah

00:30:49,599 --> 00:30:54,369
you can do without it but we really like

00:30:52,599 --> 00:30:57,309
the pipeline aspect right because you

00:30:54,369 --> 00:30:59,109
want to keep watching for new C it's not

00:30:57,309 --> 00:31:02,739
a one-time thing right it's basically a

00:30:59,109 --> 00:31:06,609
weekly thing it's so so I probably

00:31:02,739 --> 00:31:10,450
misunderstood so buck itself is not an

00:31:06,609 --> 00:31:14,259
entity no variation for four different

00:31:10,450 --> 00:31:16,210
pieces of Cloud Foundry yeah of the

00:31:14,259 --> 00:31:17,710
management plane of one of the

00:31:16,210 --> 00:31:20,499
management planes I have to say that

00:31:17,710 --> 00:31:22,479
because we're when you look into the

00:31:20,499 --> 00:31:25,029
whole deploy things on kubernetes story

00:31:22,479 --> 00:31:30,129
the core project quartz that's not using

00:31:25,029 --> 00:31:33,669
Bosh right so up until recently yes you

00:31:30,129 --> 00:31:35,409
need all these pieces now we there's

00:31:33,669 --> 00:31:37,179
also the native could be Nettie story

00:31:35,409 --> 00:31:40,659
that's being explored but this is

00:31:37,179 --> 00:31:43,960
actually using the native the yeah not

00:31:40,659 --> 00:31:45,880
in it the prior pieces

00:31:43,960 --> 00:31:47,470
and using that to do a containerized

00:31:45,880 --> 00:31:49,450
cloud foundry as well right so this is

00:31:47,470 --> 00:31:53,500
containerized cloud foundry we without

00:31:49,450 --> 00:31:56,049
using any of the kubernetes stuff right

00:31:53,500 --> 00:31:59,049
so it's just using components that we

00:31:56,049 --> 00:32:02,919
already have and reusing them in a

00:31:59,049 --> 00:32:05,230
different way and also that part is this

00:32:02,919 --> 00:32:08,470
bug thing will also work just as well on

00:32:05,230 --> 00:32:11,890
a GCP environment with VMs right this

00:32:08,470 --> 00:32:16,080
was when you say this bug thing that

00:32:11,890 --> 00:32:16,080
yeah what does that refer to

00:32:26,730 --> 00:32:33,580
no but it's for the recording it's for

00:32:29,380 --> 00:32:35,529
the recording so so yeah what we what we

00:32:33,580 --> 00:32:37,929
did was with buck you could just easily

00:32:35,529 --> 00:32:40,570
deploy a Bosch so from there on you can

00:32:37,929 --> 00:32:43,690
deploy a cloud foundry or or anything

00:32:40,570 --> 00:32:44,320
you want there are a lot of choices you

00:32:43,690 --> 00:32:46,149
can make

00:32:44,320 --> 00:32:48,669
in this process to getting to that

00:32:46,149 --> 00:32:50,740
initial point right so we wanted to make

00:32:48,669 --> 00:32:52,179
an opinion have an opinionated way of do

00:32:50,740 --> 00:32:53,950
these things and so that we don't have

00:32:52,179 --> 00:32:57,070
to think about this every time we go

00:32:53,950 --> 00:33:00,880
deploy this and this is we actually this

00:32:57,070 --> 00:33:02,320
is actually that's why I set a single

00:33:00,880 --> 00:33:04,360
time that cloud foundry thing right we

00:33:02,320 --> 00:33:06,730
made choices that make sense for smaller

00:33:04,360 --> 00:33:09,010
scale deployments we at Stark and Wayne

00:33:06,730 --> 00:33:11,020
also have the hold we have another

00:33:09,010 --> 00:33:14,980
project called Genesis and that's more

00:33:11,020 --> 00:33:17,230
for geared towards the like big service

00:33:14,980 --> 00:33:18,940
provider clouds where you have like

00:33:17,230 --> 00:33:21,039
multiple cloud boundaries and you want

00:33:18,940 --> 00:33:23,740
like whole processes of when to update

00:33:21,039 --> 00:33:25,450
when or a pipeline where you first

00:33:23,740 --> 00:33:31,779
update this Cloud Foundry then that one

00:33:25,450 --> 00:33:33,820
data so a QA def not that order the

00:33:31,779 --> 00:33:35,679
other way around first after them QA and

00:33:33,820 --> 00:33:36,970
production right if you have those types

00:33:35,679 --> 00:33:40,210
of pipelines we have a product for that

00:33:36,970 --> 00:33:41,529
as well this is more smaller scale

00:33:40,210 --> 00:33:43,929
deployments you don't have all that

00:33:41,529 --> 00:33:45,970
overhead then it makes sense we have a

00:33:43,929 --> 00:33:47,890
single unit where your home management

00:33:45,970 --> 00:33:51,360
plane is basically in one single units

00:33:47,890 --> 00:33:51,360
which is well integrate

00:33:53,000 --> 00:33:59,610
no let's talk later

00:33:56,100 --> 00:33:59,610
[Laughter]

00:34:04,299 --> 00:34:10,220
no no applause

00:34:06,530 --> 00:34:10,220

YouTube URL: https://www.youtube.com/watch?v=eKoSgHcUT-4


