Title: Intro to Development of Java Spring Microservices with Cloud Foundry - Jan Svoboda, Pivotal
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Intro to Development of Java Spring Microservices with Cloud Foundry - Jan Svoboda, Pivotal 

This session will introduce basic principles how to develop microservices with Java Spring Boot and Cloud Foundry. It's targeted for developers who are interested in learning new cloud native development practices and understand how could the new technology stack improve their current work. 
  At the beginning I will explain which technologies I have selected for developing microservices and what are their benefits. Then I will introduce simple demo application which will allow us to demonstrate microservice development principles such as application debugging and monitoring, application deployment, communication to other microservices, or database connections. 
  Demo application code will be available to all participants. So everyone would be able to test the introduced patterns in their development environments and fully understand the cloud native development with Java Spring Boot."

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,120 --> 00:00:04,980
good morning everybody so my name is Jan

00:00:03,780 --> 00:00:07,200
I'm from Kabuto

00:00:04,980 --> 00:00:09,690
first of all I would like to thank you

00:00:07,200 --> 00:00:13,230
for coming to the session the session is

00:00:09,690 --> 00:00:15,240
actually aimed to be for beginners so if

00:00:13,230 --> 00:00:17,660
you are not beginner it's okay you can

00:00:15,240 --> 00:00:21,390
stay here but don't ask any questions

00:00:17,660 --> 00:00:23,699
now I'm just joking so thank you for

00:00:21,390 --> 00:00:26,789
coming here welcome everybody and I

00:00:23,699 --> 00:00:29,369
would like also to thanks there the

00:00:26,789 --> 00:00:31,890
committee who accepted my proposal here

00:00:29,369 --> 00:00:36,180
so super happy to talk to you today

00:00:31,890 --> 00:00:40,800
about developing and running java spring

00:00:36,180 --> 00:00:42,719
applications in Cloud Foundry so what I

00:00:40,800 --> 00:00:44,610
will tell you about is I'll tell you a

00:00:42,719 --> 00:00:47,610
little bit what is the motivation why

00:00:44,610 --> 00:00:50,670
you should run java spring applications

00:00:47,610 --> 00:00:52,770
in Cloud Foundry and then I will tell

00:00:50,670 --> 00:00:55,020
you a little bit from the beginner

00:00:52,770 --> 00:00:56,910
spective how to run their Java

00:00:55,020 --> 00:00:58,980
applications in cold foundry how to

00:00:56,910 --> 00:01:01,050
connect to the database how to connect

00:00:58,980 --> 00:01:04,049
to other micro services and then how to

00:01:01,050 --> 00:01:06,840
monitor your applications this will not

00:01:04,049 --> 00:01:09,900
be just a slides presentation I've

00:01:06,840 --> 00:01:12,960
prepared a little demo so my idea is to

00:01:09,900 --> 00:01:16,380
show you everything life to demonstrate

00:01:12,960 --> 00:01:18,840
you how easy it is so if you have any

00:01:16,380 --> 00:01:21,900
questions please save the question for

00:01:18,840 --> 00:01:25,259
the end and then we will have time to

00:01:21,900 --> 00:01:27,570
answer all the questions so a little bit

00:01:25,259 --> 00:01:30,420
about me so about four pivotal for last

00:01:27,570 --> 00:01:33,030
years I'm a platform architect I live in

00:01:30,420 --> 00:01:37,130
Munich in Germany and before people to

00:01:33,030 --> 00:01:42,810
live work for IBM and HP for some time

00:01:37,130 --> 00:01:44,880
so let's jump to it so what I would like

00:01:42,810 --> 00:01:47,310
to you know discuss the motivation why

00:01:44,880 --> 00:01:49,380
do I believe that the Cal fund is the

00:01:47,310 --> 00:01:51,720
best place to run the Java Springwood

00:01:49,380 --> 00:01:53,970
applications and I would like to start

00:01:51,720 --> 00:01:57,390
with the haiku that was created by an

00:01:53,970 --> 00:01:59,820
see the the VP of engineering from

00:01:57,390 --> 00:02:02,670
pivotal who once said here is my code

00:01:59,820 --> 00:02:06,299
run it on a cloud I don't care how and I

00:02:02,670 --> 00:02:08,970
believe that this is the main idea and

00:02:06,299 --> 00:02:12,810
main motivation you know behind the call

00:02:08,970 --> 00:02:14,020
foundry that you know why it should be

00:02:12,810 --> 00:02:16,420
used by developers to

00:02:14,020 --> 00:02:18,460
the job applications because we believe

00:02:16,420 --> 00:02:20,980
that the Cloud Foundry should be the

00:02:18,460 --> 00:02:24,450
platform that should help the developers

00:02:20,980 --> 00:02:26,710
to really simplify the way they work and

00:02:24,450 --> 00:02:28,840
you know you know it if you are

00:02:26,710 --> 00:02:29,920
developing you have applications you

00:02:28,840 --> 00:02:33,010
know you know it from your own

00:02:29,920 --> 00:02:34,600
experience that you are usually you know

00:02:33,010 --> 00:02:37,330
developing applications on your laptop

00:02:34,600 --> 00:02:40,000
and that's pretty easy and then when you

00:02:37,330 --> 00:02:42,190
need to deploy the applications to some

00:02:40,000 --> 00:02:44,470
production environments you know this is

00:02:42,190 --> 00:02:47,860
a much different problem and this is

00:02:44,470 --> 00:02:49,270
exactly the main motivation for the

00:02:47,860 --> 00:02:51,730
developers you know why to use a

00:02:49,270 --> 00:02:55,150
platform such as called foundry because

00:02:51,730 --> 00:02:57,850
it will simplify the way how you run the

00:02:55,150 --> 00:03:02,050
applications and the goal of cloud

00:02:57,850 --> 00:03:04,540
foundry is to provide you easy way that

00:03:02,050 --> 00:03:06,790
to deploy your applications that you

00:03:04,540 --> 00:03:09,730
develop on your local environment to run

00:03:06,790 --> 00:03:11,860
them on some large cloud environment or

00:03:09,730 --> 00:03:14,290
your enterprise environment certainly

00:03:11,860 --> 00:03:16,600
has to resolve any problems so from from

00:03:14,290 --> 00:03:18,940
your from developers perspective this is

00:03:16,600 --> 00:03:21,120
the the biggest motivation and the

00:03:18,940 --> 00:03:24,520
biggest idea behind the cloud fund and

00:03:21,120 --> 00:03:27,610
in the demo I would now like to show you

00:03:24,520 --> 00:03:31,060
you know how easy is it is actually to

00:03:27,610 --> 00:03:33,550
develop Java spring applications in with

00:03:31,060 --> 00:03:37,570
the with the with the called found

00:03:33,550 --> 00:03:40,780
report form so now let's look at some

00:03:37,570 --> 00:03:43,120
common development techniques and let's

00:03:40,780 --> 00:03:46,000
start with the basics and that's it

00:03:43,120 --> 00:03:48,430
running the java application in cloud

00:03:46,000 --> 00:03:51,430
foundry so what I did I have a prepared

00:03:48,430 --> 00:03:56,200
a little demo application it's actually

00:03:51,430 --> 00:04:00,100
a bookmarks manager and I will switch to

00:03:56,200 --> 00:04:02,050
my IDE environment and what we will have

00:04:00,100 --> 00:04:05,500
we will have a one Java Springwood

00:04:02,050 --> 00:04:09,550
application that has a rest control that

00:04:05,500 --> 00:04:11,290
is using in-memory database h2 and what

00:04:09,550 --> 00:04:13,810
we will do we will deploy this

00:04:11,290 --> 00:04:15,430
application to Cloud Foundry you will be

00:04:13,810 --> 00:04:18,430
able to access it using the rest

00:04:15,430 --> 00:04:23,320
interface and we will be able to scale

00:04:18,430 --> 00:04:26,050
it so let's just do the demo so now I

00:04:23,320 --> 00:04:32,270
switch to my

00:04:26,050 --> 00:04:37,610
environment should I switch to okay so

00:04:32,270 --> 00:04:42,500
and this is my second okay so this is my

00:04:37,610 --> 00:04:42,949
application the application has a it's a

00:04:42,500 --> 00:04:45,949
Java

00:04:42,949 --> 00:04:47,990
Springwood application it has a couple

00:04:45,949 --> 00:04:50,570
classes that are interesting I'm gonna

00:04:47,990 --> 00:04:52,699
to introduce the first is the the bean

00:04:50,570 --> 00:04:54,020
called bookmark this is the bean for

00:04:52,699 --> 00:04:57,680
storing the information about the

00:04:54,020 --> 00:05:00,830
bookmark like a name date and an URL of

00:04:57,680 --> 00:05:03,650
the bookmark and as you can see this is

00:05:00,830 --> 00:05:06,560
a entity in a database using the entity

00:05:03,650 --> 00:05:08,690
annotation the second interesting class

00:05:06,560 --> 00:05:11,780
I have here is actually a controller

00:05:08,690 --> 00:05:14,199
class and this is a rest controller that

00:05:11,780 --> 00:05:19,120
will allow you to access your

00:05:14,199 --> 00:05:24,919
application using browser or some rest

00:05:19,120 --> 00:05:26,780
any any any other rest client and then

00:05:24,919 --> 00:05:32,599
the last thing I wanted to point you to

00:05:26,780 --> 00:05:35,510
is is the interface here that I have and

00:05:32,599 --> 00:05:39,919
this is actually interface to your

00:05:35,510 --> 00:05:42,380
database and using this simple

00:05:39,919 --> 00:05:46,820
repository annotation it will basically

00:05:42,380 --> 00:05:49,610
use the database that will be found on a

00:05:46,820 --> 00:05:51,830
java class pass so it's just you know

00:05:49,610 --> 00:05:54,289
this two class is an interface I have a

00:05:51,830 --> 00:05:56,150
simple application and now what I want

00:05:54,289 --> 00:06:00,199
to do I want to deploy this application

00:05:56,150 --> 00:06:02,599
to Cloud Foundry so what I will do I

00:06:00,199 --> 00:06:05,320
will now log into the cloud foundry

00:06:02,599 --> 00:06:05,320
platform

00:06:13,650 --> 00:06:19,200
okay looks good password

00:06:21,370 --> 00:06:27,330
looks good and now my myspace

00:06:37,020 --> 00:06:46,410
so now I should be should be logged into

00:06:42,360 --> 00:06:50,820
the platform taking more time than

00:06:46,410 --> 00:06:53,160
usually so this is a live demo so

00:06:50,820 --> 00:06:59,750
hopefully this will work out work out

00:06:53,160 --> 00:07:02,750
well okay

00:06:59,750 --> 00:07:02,750
see

00:07:04,620 --> 00:07:07,760
something is happening

00:07:12,050 --> 00:07:14,889
okay

00:07:16,669 --> 00:07:21,639
is the internet connection so slow

00:07:31,900 --> 00:07:35,040
let's try it one more time

00:08:04,850 --> 00:08:14,600
so I just tried a couple of minutes ago

00:08:06,710 --> 00:08:16,010
and it was working okay no no it's not

00:08:14,600 --> 00:08:22,480
it's not done because it's able to

00:08:16,010 --> 00:08:22,480
access the butt

00:08:34,910 --> 00:08:37,840
okay

00:08:40,620 --> 00:08:47,029
we should ask for my arm from my space

00:08:56,720 --> 00:09:00,520
yeah I should have introduced

00:10:00,560 --> 00:10:09,100
stuck in the same point okay now so

00:10:04,930 --> 00:10:11,810
finally I'm login super so I have no

00:10:09,100 --> 00:10:14,899
applications running I'm using the CF

00:10:11,810 --> 00:10:17,089
command-line client super ok so this

00:10:14,899 --> 00:10:21,860
finally work out so now we can push the

00:10:17,089 --> 00:10:25,850
application so you have seen the CF push

00:10:21,860 --> 00:10:28,879
many times before and what you can see

00:10:25,850 --> 00:10:30,589
is happening that first I'm actually

00:10:28,879 --> 00:10:32,899
creating the application in the cloud

00:10:30,589 --> 00:10:35,749
foundry I'm creating their out in the

00:10:32,899 --> 00:10:38,569
cloud foundry and then I'm uploading the

00:10:35,749 --> 00:10:43,100
jar file the compiled application to the

00:10:38,569 --> 00:10:46,220
cloud foundry to the platform so this is

00:10:43,100 --> 00:10:48,949
just one point three megabytes so this

00:10:46,220 --> 00:10:53,449
should be okay now what is happening

00:10:48,949 --> 00:10:56,959
that Cloud Foundry actually will build

00:10:53,449 --> 00:11:02,420
what's called droplet and then it will

00:10:56,959 --> 00:11:04,879
this is like small container and then it

00:11:02,420 --> 00:11:06,559
will schedule the container on some

00:11:04,879 --> 00:11:09,100
house that will be able to run the

00:11:06,559 --> 00:11:12,170
container so now what is happening it's

00:11:09,100 --> 00:11:15,199
downloading the all the bell text that's

00:11:12,170 --> 00:11:16,939
in the platform is supporting and the

00:11:15,199 --> 00:11:20,209
build tags are actually providing the

00:11:16,939 --> 00:11:23,240
runtime for the application because we

00:11:20,209 --> 00:11:24,860
didn't specify which built tag we will

00:11:23,240 --> 00:11:28,300
use it will download all of them and

00:11:24,860 --> 00:11:33,589
then it will detect what application

00:11:28,300 --> 00:11:37,009
what application packages I need so it

00:11:33,589 --> 00:11:39,559
will detect that I'm using Java now it

00:11:37,009 --> 00:11:41,689
will detect like all the Java libraries

00:11:39,559 --> 00:11:44,420
I need it will download them it will

00:11:41,689 --> 00:11:48,170
build the droplet and now it's actually

00:11:44,420 --> 00:11:50,240
scheduling the droplet in in some cells

00:11:48,170 --> 00:11:55,639
so the cells are the host how to how to

00:11:50,240 --> 00:11:58,910
run the application so now this should

00:11:55,639 --> 00:12:00,889
actually give me back the URL where my

00:11:58,910 --> 00:12:03,620
application is running where the service

00:12:00,889 --> 00:12:09,649
was started so hopefully this will work

00:12:03,620 --> 00:12:11,209
out yep so now this is this is now

00:12:09,649 --> 00:12:13,529
finished and what we see here that we

00:12:11,209 --> 00:12:15,660
have one instance of

00:12:13,529 --> 00:12:22,199
my application was started and this is

00:12:15,660 --> 00:12:27,959
the URL so let me just copy the URL and

00:12:22,199 --> 00:12:30,600
I go to the Firefox and if I just do

00:12:27,959 --> 00:12:34,920
basic HTTP GET I see my service is

00:12:30,600 --> 00:12:41,059
running super and then I will do slash

00:12:34,920 --> 00:12:44,339
bookmarks and now this will give me back

00:12:41,059 --> 00:12:48,230
some basic bookmarks that I have in my

00:12:44,339 --> 00:12:50,790
in-memory database so you can see that

00:12:48,230 --> 00:12:52,889
Cole found actually build the URL and

00:12:50,790 --> 00:12:55,290
it's giving me the access to my

00:12:52,889 --> 00:12:57,809
application and the application has the

00:12:55,290 --> 00:13:00,029
rest controllers one of them is this

00:12:57,809 --> 00:13:03,089
bookmarks control and it's give me the

00:13:00,029 --> 00:13:08,910
list of the bookmarks so what I wanted

00:13:03,089 --> 00:13:20,939
to show you next is actually that I am

00:13:08,910 --> 00:13:25,370
able to scale the application so what I

00:13:20,939 --> 00:13:28,370
will do now I will just do CF scale

00:13:25,370 --> 00:13:28,370
bookmarks

00:13:34,820 --> 00:13:45,110
means I and to and this will scale my

00:13:40,250 --> 00:13:56,120
application to two instances so if I

00:13:45,110 --> 00:13:58,220
look at the details I can see now that I

00:13:56,120 --> 00:14:04,100
have one instance of my application

00:13:58,220 --> 00:14:09,140
running another one is starting so now

00:14:04,100 --> 00:14:13,580
when I switch back to the the you are

00:14:09,140 --> 00:14:18,320
the browser you can see that I'm still

00:14:13,580 --> 00:14:20,870
able to it's giving me back the list of

00:14:18,320 --> 00:14:24,020
my bookmarks what I now want to show you

00:14:20,870 --> 00:14:28,430
is actually I want to delete one of the

00:14:24,020 --> 00:14:30,980
bookmarks so let's do the 101 focus so I

00:14:28,430 --> 00:14:37,760
have some rest client here and now I

00:14:30,980 --> 00:14:42,530
will delete I will do HTTP delete on the

00:14:37,760 --> 00:14:43,700
101 so okay and now if I go back to my

00:14:42,530 --> 00:14:46,940
list

00:14:43,700 --> 00:14:49,010
the focus should disappear so you see

00:14:46,940 --> 00:14:50,870
it's not there but if i refresh it a

00:14:49,010 --> 00:14:52,850
couple times now it appears again and

00:14:50,870 --> 00:14:55,130
now it will disappear and now it appears

00:14:52,850 --> 00:14:57,950
again and the reason is because I have

00:14:55,130 --> 00:15:02,600
two instances and I'm using the inn in

00:14:57,950 --> 00:15:04,790
memory database and I just delete this

00:15:02,600 --> 00:15:07,100
in my in memory database so it just

00:15:04,790 --> 00:15:08,900
deleted in in one instance but in a

00:15:07,100 --> 00:15:11,360
second instance it's still running

00:15:08,900 --> 00:15:13,910
so what I want to demonstrate now that I

00:15:11,360 --> 00:15:19,160
want to connect my service to actually

00:15:13,910 --> 00:15:21,650
to real database so I don't have I don't

00:15:19,160 --> 00:15:23,720
have this connected to the in memory

00:15:21,650 --> 00:15:26,090
database but I will have my application

00:15:23,720 --> 00:15:28,160
connected to the Postgres database so

00:15:26,090 --> 00:15:30,190
this is what I want to demonstrate that

00:15:28,160 --> 00:15:32,740
I have two application instances

00:15:30,190 --> 00:15:35,360
connected to the real Postgres database

00:15:32,740 --> 00:15:38,020
so how I will do it I will connect my

00:15:35,360 --> 00:15:43,190
application and the application

00:15:38,020 --> 00:15:45,140
instances will automatically get the

00:15:43,190 --> 00:15:49,430
data from from the Postgres database

00:15:45,140 --> 00:15:52,430
so the way how I will do it I will look

00:15:49,430 --> 00:15:53,149
at the services that are running on the

00:15:52,430 --> 00:15:55,970
platform

00:15:53,149 --> 00:16:00,019
I do CF service commands and it will

00:15:55,970 --> 00:16:01,370
show me that I have I've asked you a

00:16:00,019 --> 00:16:03,589
service running here and I have a

00:16:01,370 --> 00:16:08,930
service registry and I have outer scale

00:16:03,589 --> 00:16:14,510
so let's look at the CF service let's

00:16:08,930 --> 00:16:16,910
look at the database service and now if

00:16:14,510 --> 00:16:19,370
I do CF service command it will give me

00:16:16,910 --> 00:16:22,610
back the information that I have the

00:16:19,370 --> 00:16:25,040
Postgres service that I am able to use

00:16:22,610 --> 00:16:27,079
from application so what I need to do

00:16:25,040 --> 00:16:35,930
now I need to bind it to my application

00:16:27,079 --> 00:16:45,230
so I will do CF bind service and now the

00:16:35,930 --> 00:16:48,920
name of my application and the name of

00:16:45,230 --> 00:16:50,269
the service for CMDB so now what what

00:16:48,920 --> 00:16:55,310
will happen it will connect my

00:16:50,269 --> 00:16:57,680
application to this database service it

00:16:55,310 --> 00:17:01,970
should be fairly quick okay binding

00:16:57,680 --> 00:17:03,769
Yun's db2 bookmark service what I need

00:17:01,970 --> 00:17:10,699
to do now I need to basically receive

00:17:03,769 --> 00:17:13,040
this so restaging this means that it

00:17:10,699 --> 00:17:14,990
will actually rebuild the container and

00:17:13,040 --> 00:17:18,309
why I need Tribble the container is

00:17:14,990 --> 00:17:20,510
because I need to have the the Java

00:17:18,309 --> 00:17:23,449
libraries that will be able to connect

00:17:20,510 --> 00:17:25,850
to Postgres so if you look closely now

00:17:23,449 --> 00:17:28,610
it's here it's downloading the post

00:17:25,850 --> 00:17:31,580
currency DBC client so now my

00:17:28,610 --> 00:17:35,929
application will be connects to the to

00:17:31,580 --> 00:17:38,480
this podcast database so now it's

00:17:35,929 --> 00:17:40,760
rebuilding the container then it will

00:17:38,480 --> 00:17:46,880
schedule the container and run it on a

00:17:40,760 --> 00:17:48,800
platform so waiting for a start should

00:17:46,880 --> 00:17:54,090
be fairly quick

00:17:48,800 --> 00:17:57,330
and if this succeeds we should be able

00:17:54,090 --> 00:18:00,210
how my application is now providing not

00:17:57,330 --> 00:18:02,610
the data from the in-memory database but

00:18:00,210 --> 00:18:06,630
the data actually from the from the

00:18:02,610 --> 00:18:11,370
Postgres database so waiting for

00:18:06,630 --> 00:18:17,160
application to start okay

00:18:11,370 --> 00:18:19,830
looks good so both instances are

00:18:17,160 --> 00:18:25,230
starting so now let's switch to the back

00:18:19,830 --> 00:18:27,270
to the browser and if I hit this you can

00:18:25,230 --> 00:18:29,970
see that I'm getting now completely

00:18:27,270 --> 00:18:32,130
different data I'm getting actually now

00:18:29,970 --> 00:18:35,790
the Dutch newspapers and the Dutch means

00:18:32,130 --> 00:18:40,470
papers are coming from the from the

00:18:35,790 --> 00:18:42,660
Postgres database and so now if I so for

00:18:40,470 --> 00:18:46,320
example as did in Dutch news this was

00:18:42,660 --> 00:18:52,620
number 7 so I will do now HTTP delete on

00:18:46,320 --> 00:18:56,180
number 7 send request okay so now the

00:18:52,620 --> 00:18:58,590
number 7 Action News should not be there

00:18:56,180 --> 00:19:02,070
okay so you see it was deleted from the

00:18:58,590 --> 00:19:04,110
database and because now my both

00:19:02,070 --> 00:19:06,270
instances are connected to the same

00:19:04,110 --> 00:19:10,590
database it it will you know show

00:19:06,270 --> 00:19:12,990
correctly that it's both instances are

00:19:10,590 --> 00:19:15,270
doesn't have the number 7 anymore

00:19:12,990 --> 00:19:17,640
so this was a this was a basic example

00:19:15,270 --> 00:19:20,130
how I switch very fast from the

00:19:17,640 --> 00:19:25,350
in-memory database to the to the

00:19:20,130 --> 00:19:32,130
Postgres database ok so the next example

00:19:25,350 --> 00:19:34,290
I want to show you actually is when you

00:19:32,130 --> 00:19:38,000
want to connect to different

00:19:34,290 --> 00:19:40,440
microservices so right now we have a

00:19:38,000 --> 00:19:43,440
application connecting to the database

00:19:40,440 --> 00:19:46,290
but what I will do now I will deploy UI

00:19:43,440 --> 00:19:48,420
I will deploy another micro service and

00:19:46,290 --> 00:19:51,060
I will connect this mic this user

00:19:48,420 --> 00:19:54,330
interface to my original service that

00:19:51,060 --> 00:19:56,820
you have seen and now we need to somehow

00:19:54,330 --> 00:19:59,660
make sure that these two pieces 2 micro

00:19:56,820 --> 00:20:02,370
services will communicate together so

00:19:59,660 --> 00:20:04,580
there is lot of ways how you can do it

00:20:02,370 --> 00:20:08,370
what I have decided to do I'm using

00:20:04,580 --> 00:20:11,430
restclient called Fame and this

00:20:08,370 --> 00:20:13,980
restclient and the UI service will talk

00:20:11,430 --> 00:20:18,240
to the rest controller in the

00:20:13,980 --> 00:20:20,070
application service and so using the

00:20:18,240 --> 00:20:22,560
rest client first thing the second thing

00:20:20,070 --> 00:20:25,320
I need to really discover it so I can

00:20:22,560 --> 00:20:27,660
enter at the URL directly but it's not

00:20:25,320 --> 00:20:29,310
nice because the URL can be changing so

00:20:27,660 --> 00:20:33,330
what I will do I will use the service

00:20:29,310 --> 00:20:35,250
registry called Eureka so in the service

00:20:33,330 --> 00:20:38,280
registry it's like a phone book of micro

00:20:35,250 --> 00:20:43,590
services so what I will do now I will

00:20:38,280 --> 00:20:47,370
push this new UI service the new UI

00:20:43,590 --> 00:20:50,400
service register in in Eureka in the

00:20:47,370 --> 00:20:53,520
service registry and will be also able

00:20:50,400 --> 00:20:56,550
to find the another service and and

00:20:53,520 --> 00:20:59,940
connect to it so let's just show you

00:20:56,550 --> 00:21:04,010
live demo how this works so I have the

00:20:59,940 --> 00:21:07,440
second service yeah mark schwandt

00:21:04,010 --> 00:21:12,780
okay so let's clear this so what I will

00:21:07,440 --> 00:21:16,470
do now a little bit so it it has the

00:21:12,780 --> 00:21:19,920
bean as well it has the controller to

00:21:16,470 --> 00:21:23,310
return the HTML pages and here it has

00:21:19,920 --> 00:21:25,710
the the proxy and this is the rest

00:21:23,310 --> 00:21:27,840
client proxy and it will be able to

00:21:25,710 --> 00:21:33,420
communicate with the bookmarks service

00:21:27,840 --> 00:21:34,370
so very simple code as well let's push

00:21:33,420 --> 00:21:45,330
it

00:21:34,370 --> 00:21:54,020
CF push and what we can do meanwhile we

00:21:45,330 --> 00:21:54,020
can look at the Eureka in the registry

00:21:54,230 --> 00:22:02,730
so we have this service here that is

00:22:00,510 --> 00:22:06,810
actually the service registry for

00:22:02,730 --> 00:22:13,460
sprinkle applications if I copy this URL

00:22:06,810 --> 00:22:13,460
I will be able to show you the

00:22:14,840 --> 00:22:26,059
the dashboard so what I'm doing now I

00:22:18,860 --> 00:22:28,400
will if this works correctly yeah so now

00:22:26,059 --> 00:22:31,720
what you will see is actually the

00:22:28,400 --> 00:22:34,700
dashboard of eureka service registry and

00:22:31,720 --> 00:22:36,830
you you see that i have already one

00:22:34,700 --> 00:22:38,750
application registered there and this is

00:22:36,830 --> 00:22:40,640
my original bookmark service that we

00:22:38,750 --> 00:22:43,610
pushed couple minutes ago and you can

00:22:40,640 --> 00:22:45,410
see it's running in two instances so

00:22:43,610 --> 00:22:48,470
this is the little number two here and

00:22:45,410 --> 00:22:51,230
it gives me back the it shows me the URL

00:22:48,470 --> 00:22:54,470
that is actually my bookmark service

00:22:51,230 --> 00:22:56,419
running and we need to wait a little bit

00:22:54,470 --> 00:22:58,309
when the push will finish now you see

00:22:56,419 --> 00:23:00,260
the push of the bookmarks client

00:22:58,309 --> 00:23:03,830
actually finished and you can see it

00:23:00,260 --> 00:23:06,260
already appeared here and now the

00:23:03,830 --> 00:23:09,080
bookmarks client will be able to talk to

00:23:06,260 --> 00:23:15,380
the bookmarks service so this is what I

00:23:09,080 --> 00:23:19,460
want to demonstrate so let's see what is

00:23:15,380 --> 00:23:23,150
the URL so this CF push finished here we

00:23:19,460 --> 00:23:31,100
have the this is the URL application is

00:23:23,150 --> 00:23:34,429
running so now you can see the the UI

00:23:31,100 --> 00:23:39,280
service is running and now I just need

00:23:34,429 --> 00:23:39,280
to enter the correct

00:23:43,690 --> 00:23:50,210
okay so now you can see my nice UI

00:23:47,960 --> 00:23:57,049
service there is actually able to

00:23:50,210 --> 00:23:59,990
connect to the using the REST API to the

00:23:57,049 --> 00:24:03,010
original bookmark service so what I can

00:23:59,990 --> 00:24:06,880
do here I can add something new

00:24:03,010 --> 00:24:11,299
okay so let's add Google as a bookmark

00:24:06,880 --> 00:24:12,950
from the UI I hit submit it should be

00:24:11,299 --> 00:24:15,169
added to the list you can see it here in

00:24:12,950 --> 00:24:19,040
the list if I go back to my bookmark

00:24:15,169 --> 00:24:21,140
service and refresh the page you can see

00:24:19,040 --> 00:24:28,250
the Google is here edit on the list as

00:24:21,140 --> 00:24:33,200
well so and this this communication

00:24:28,250 --> 00:24:35,960
happens as I said using the the rest

00:24:33,200 --> 00:24:39,559
client so that the UI service is able to

00:24:35,960 --> 00:24:44,600
talk to the my other service using the

00:24:39,559 --> 00:24:46,610
define rest client and the discovery

00:24:44,600 --> 00:24:51,590
actual is happening using the the

00:24:46,610 --> 00:24:55,910
service registry and you know if now if

00:24:51,590 --> 00:24:57,620
I would scale the bookmarks client it

00:24:55,910 --> 00:24:59,360
will actually scale up here and register

00:24:57,620 --> 00:25:02,179
automatically in the in the service

00:24:59,360 --> 00:25:04,730
registry so this is a nice basic example

00:25:02,179 --> 00:25:10,070
how the two services can talk to each

00:25:04,730 --> 00:25:13,429
other I think what I wanted to show you

00:25:10,070 --> 00:25:15,919
is actually you know how to gather logs

00:25:13,429 --> 00:25:20,000
and some matrixes from your micro

00:25:15,919 --> 00:25:23,270
services so what we will do so we still

00:25:20,000 --> 00:25:25,070
have my AB service running my our

00:25:23,270 --> 00:25:26,750
service running connecting to the

00:25:25,070 --> 00:25:29,000
Postgres database using the service

00:25:26,750 --> 00:25:31,340
registry for discovery and now I want to

00:25:29,000 --> 00:25:36,350
look at the in some logs and I want to

00:25:31,340 --> 00:25:41,450
look at some messages so it's actually

00:25:36,350 --> 00:25:42,400
the command is you know CF CF locks and

00:25:41,450 --> 00:25:45,459
this will show you

00:25:42,400 --> 00:25:45,459
[Music]

00:25:49,410 --> 00:25:55,390
servus

00:25:51,870 --> 00:25:58,230
so now it's actually nothing is

00:25:55,390 --> 00:26:01,210
happening because it's it's waiting for

00:25:58,230 --> 00:26:09,670
styling the the application and now if I

00:26:01,210 --> 00:26:12,850
access it it will show you that i i just

00:26:09,670 --> 00:26:14,820
access it from and you will see that the

00:26:12,850 --> 00:26:19,840
log from the application or anything

00:26:14,820 --> 00:26:22,480
there is so this is like the the very

00:26:19,840 --> 00:26:24,190
basic way how to get the locks what's a

00:26:22,480 --> 00:26:27,280
little bit more interesting what i'm

00:26:24,190 --> 00:26:29,770
going to show you is that you can see a

00:26:27,280 --> 00:26:30,820
lot of interesting information if you

00:26:29,770 --> 00:26:37,960
are using

00:26:30,820 --> 00:26:43,870
Springwood actuators so if I type

00:26:37,960 --> 00:26:46,000
actuator here now it's giving me using

00:26:43,870 --> 00:26:48,280
the spring boot is showing me actually

00:26:46,000 --> 00:26:50,740
all the actuators all the matrixes I can

00:26:48,280 --> 00:26:52,990
find on my application so what's for

00:26:50,740 --> 00:26:55,720
example is interesting here it will give

00:26:52,990 --> 00:26:58,090
me the list of environment variables

00:26:55,720 --> 00:27:01,500
that my application is using so for

00:26:58,090 --> 00:27:05,680
example you can see here that my

00:27:01,500 --> 00:27:13,050
application here using these variables

00:27:05,680 --> 00:27:16,990
has here stored actually the URL to my

00:27:13,050 --> 00:27:18,670
to my service registry or it will show

00:27:16,990 --> 00:27:22,180
you the connection to the databases and

00:27:18,670 --> 00:27:25,510
so on so that that's one of the

00:27:22,180 --> 00:27:28,870
interesting actuators another one is

00:27:25,510 --> 00:27:30,550
matrix where you will be able to find a

00:27:28,870 --> 00:27:32,590
lot of interesting information about

00:27:30,550 --> 00:27:35,530
your application performance and of

00:27:32,590 --> 00:27:37,210
course you can stream this the matrix is

00:27:35,530 --> 00:27:39,490
to some other tools and there is you

00:27:37,210 --> 00:27:42,520
know a lot of lot of tools that will be

00:27:39,490 --> 00:27:44,680
able to analyze this so this is a you

00:27:42,520 --> 00:27:46,870
know pretty easy way how you can get the

00:27:44,680 --> 00:27:51,250
logs also get some information about

00:27:46,870 --> 00:27:54,660
your about your application and this

00:27:51,250 --> 00:27:54,660
concludes my demo and

00:27:55,240 --> 00:28:00,549
you know in a in a summary what you have

00:27:57,730 --> 00:28:02,590
seen is you have seen that how easy it

00:28:00,549 --> 00:28:04,870
is to actually to run the application in

00:28:02,590 --> 00:28:07,000
the cloud foundry you have seen how I

00:28:04,870 --> 00:28:10,090
was able to connect to the database the

00:28:07,000 --> 00:28:12,580
in-memory or external and then you have

00:28:10,090 --> 00:28:17,620
seen how easy it was you know to

00:28:12,580 --> 00:28:22,450
integrate to two services together there

00:28:17,620 --> 00:28:24,940
is a actually github repo that that's

00:28:22,450 --> 00:28:26,320
there is a link on my presentation so if

00:28:24,940 --> 00:28:27,640
you're interested you can look at the

00:28:26,320 --> 00:28:30,640
application you can play with this

00:28:27,640 --> 00:28:32,890
yourself and the goal of this

00:28:30,640 --> 00:28:36,309
presentation is actually to show you how

00:28:32,890 --> 00:28:38,289
easy it is to use the Cloud Foundry for

00:28:36,309 --> 00:28:40,149
you of from the perspective of the Java

00:28:38,289 --> 00:28:44,230
developer because the Cloud Foundry

00:28:40,149 --> 00:28:46,539
helps you with a lot of other things how

00:28:44,230 --> 00:28:48,640
to run your java spring application in a

00:28:46,539 --> 00:28:52,179
production so you can really concentrate

00:28:48,640 --> 00:28:53,080
on the coding so this concludes my

00:28:52,179 --> 00:28:56,500
presentation

00:28:53,080 --> 00:29:00,359
thanks a lot for for watching and

00:28:56,500 --> 00:29:00,359

YouTube URL: https://www.youtube.com/watch?v=9moTgBiEauE


