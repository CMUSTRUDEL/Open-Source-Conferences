Title: Cutting-edge Continuous Delivery: Automated Canary Analysis on CF using Spinnaker - Andreas Evers
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Cutting-edge Continuous Delivery: Automated Canary Analysis on Cloud Foundry using Spinnaker - Andreas Evers, Pivotal 

Using Cloud Foundry, we’ve learned best practices about how to deploy software at velocity — things like automated releases, immutable infrastructure, gradual rollouts, and fast rollbacks.  One of the most sophisticated techniques of going to production quickly, with confidence, is called automated canary analysis. While canary deployments themselves are becoming a commodity, having an autonomous judge at your disposal, makes all the difference. The judge analyses metrics of both baseline and canary deployments and automatically rolls forwards or backward.  Meet Spinnaker, an open-source multi-cloud continuous delivery platform which embodies these core principles of safe, frequent and reliable releases with contributions from Netflix, Google, Microsoft, Oracle, and Pivotal. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:04,080
welcome am I talking about contagious

00:00:01,920 --> 00:00:05,609
delivery I'll be talking about automated

00:00:04,080 --> 00:00:07,529
canary analysis 3 use of the tool called

00:00:05,609 --> 00:00:10,290
spinnaker but first let me introduce

00:00:07,529 --> 00:00:12,150
myself I'm andreas eavers I'm from

00:00:10,290 --> 00:00:15,089
Belgium a solution architect at pivotal

00:00:12,150 --> 00:00:17,789
I work in the application transformation

00:00:15,089 --> 00:00:19,439
practice for amia and when I'm all our

00:00:17,789 --> 00:00:21,480
customers I'm active in pivotal

00:00:19,439 --> 00:00:24,449
spinnaker team which is a collaboration

00:00:21,480 --> 00:00:26,250
between the spring team and foundry RG

00:00:24,449 --> 00:00:28,160
or pivotal R&D and you can reach me on

00:00:26,250 --> 00:00:31,349
Twitter with my handle andreas eavers

00:00:28,160 --> 00:00:32,960
also after this this conference if you

00:00:31,349 --> 00:00:35,219
have any questions let me know

00:00:32,960 --> 00:00:36,270
all right so let me talk about context

00:00:35,219 --> 00:00:37,950
delivery and when we talk about

00:00:36,270 --> 00:00:40,050
continues delivery the ultimate goal

00:00:37,950 --> 00:00:41,879
that we want to reach is to deploy

00:00:40,050 --> 00:00:44,399
software quickly and automatically and

00:00:41,879 --> 00:00:47,370
we can't really do that if we're not

00:00:44,399 --> 00:00:49,410
able to push code without fear so this

00:00:47,370 --> 00:00:52,469
highlights the the eternal struggle

00:00:49,410 --> 00:00:54,239
between two opposing forces in software

00:00:52,469 --> 00:00:55,860
development where on the one hand you've

00:00:54,239 --> 00:00:58,320
got speed and only our hands we've got

00:00:55,860 --> 00:01:01,940
confidence and somehow they don't seem

00:00:58,320 --> 00:01:03,660
to like to work together often so

00:01:01,940 --> 00:01:04,439
especially with micro service

00:01:03,660 --> 00:01:07,290
development because we are now doing

00:01:04,439 --> 00:01:09,630
Microsoft surveillance it's gets really

00:01:07,290 --> 00:01:11,549
hard to to make sure you have confidence

00:01:09,630 --> 00:01:13,080
when going to production because micro

00:01:11,549 --> 00:01:14,490
services move that faster production

00:01:13,080 --> 00:01:15,869
it's very hard if you have an acceptance

00:01:14,490 --> 00:01:17,670
of runs to make sure whatever you're

00:01:15,869 --> 00:01:19,770
testing it's not a moving target and

00:01:17,670 --> 00:01:22,500
it's not already changed on production

00:01:19,770 --> 00:01:24,780
so we got to start looking at our

00:01:22,500 --> 00:01:26,729
alternatives other ways of testing and

00:01:24,780 --> 00:01:29,729
one of the ways that we can start

00:01:26,729 --> 00:01:31,680
adopting is to test in production and it

00:01:29,729 --> 00:01:33,600
sounds a bit crazy but if you use things

00:01:31,680 --> 00:01:36,060
like automated canary analysis it can

00:01:33,600 --> 00:01:39,659
actually be very very beneficial and

00:01:36,060 --> 00:01:41,340
once you I can do that is spinnaker so

00:01:39,659 --> 00:01:43,409
let's take a look at spinnaker what is

00:01:41,340 --> 00:01:45,960
spinnaker spinnaker is a multi cloud

00:01:43,409 --> 00:01:47,939
multi-region deployment tool built by

00:01:45,960 --> 00:01:48,630
Netflix that supports multiple

00:01:47,939 --> 00:01:50,939
abstractions

00:01:48,630 --> 00:01:55,170
it supports kubernetes but also Cloud

00:01:50,939 --> 00:01:56,729
Foundry and also VMs or bi-metal so all

00:01:55,170 --> 00:01:59,939
the major cloud providers are supported

00:01:56,729 --> 00:02:02,909
and they've all contributed integrations

00:01:59,939 --> 00:02:06,810
for them especially Google they've I

00:02:02,909 --> 00:02:09,090
think with 14 after es a team of 14

00:02:06,810 --> 00:02:10,770
people on this project so it's their

00:02:09,090 --> 00:02:12,960
main containers delivery

00:02:10,770 --> 00:02:15,960
approach which is really powerful so

00:02:12,960 --> 00:02:17,850
kubernetes is well supported and pivotal

00:02:15,960 --> 00:02:19,640
has supported splat foundering so we'll

00:02:17,850 --> 00:02:22,440
see how that works in our demo as well

00:02:19,640 --> 00:02:24,060
netflix of course have supported or have

00:02:22,440 --> 00:02:27,060
integrated Amazon Web Services because

00:02:24,060 --> 00:02:29,160
they run everything only AWS and you can

00:02:27,060 --> 00:02:32,250
run an openstack compute engine App

00:02:29,160 --> 00:02:36,330
Engine or to cloud this us even Alibaba

00:02:32,250 --> 00:02:37,710
cloud is coming up so as you can see

00:02:36,330 --> 00:02:39,840
there's a whole ecosystem around

00:02:37,710 --> 00:02:41,130
spinnaker of course there's cloud

00:02:39,840 --> 00:02:43,200
providers that have already mentioned

00:02:41,130 --> 00:02:45,030
there's also CI systems like Jenkins

00:02:43,200 --> 00:02:46,950
Travis worker concourse and more coming

00:02:45,030 --> 00:02:49,650
up that will integrate really well with

00:02:46,950 --> 00:02:50,820
spinnaker for mortaring because if

00:02:49,650 --> 00:02:52,470
you're going to be doing automated

00:02:50,820 --> 00:02:55,440
canary analysis will be using monitoring

00:02:52,470 --> 00:02:58,290
we can use data dark prometheus

00:02:55,440 --> 00:03:00,570
single effects effects it's tag driver

00:02:58,290 --> 00:03:02,460
Atlas and there's many many more coming

00:03:00,570 --> 00:03:03,960
up the only important thing here is that

00:03:02,460 --> 00:03:06,480
it supports multi-dimensional time

00:03:03,960 --> 00:03:08,250
series so whatever solution you want to

00:03:06,480 --> 00:03:10,970
integrate if it has that and it's fine

00:03:08,250 --> 00:03:13,560
and in our demo we'll be using data log

00:03:10,970 --> 00:03:15,360
you can use of course notifications and

00:03:13,560 --> 00:03:17,250
artifact support artifacts our

00:03:15,360 --> 00:03:19,050
deliverables could be like binaries

00:03:17,250 --> 00:03:20,220
things are you're going to deploy and

00:03:19,050 --> 00:03:21,930
that could be a docker image it could be

00:03:20,220 --> 00:03:24,950
coming from Google Cloud storage and

00:03:21,930 --> 00:03:28,290
could be github and it should be called

00:03:24,950 --> 00:03:29,959
s3 we will be using s3 Amazon AWS s3

00:03:28,290 --> 00:03:32,760
will be using for artifacts and

00:03:29,959 --> 00:03:34,760
artifactory and our installation so

00:03:32,760 --> 00:03:38,520
spinnaker itself will be running on pts

00:03:34,760 --> 00:03:41,120
and we'll be using cloud foundry on two

00:03:38,520 --> 00:03:43,680
different on two different foundations

00:03:41,120 --> 00:03:45,390
so as you can see this in many different

00:03:43,680 --> 00:03:46,860
clouds that we'll be combining here and

00:03:45,390 --> 00:03:48,540
because that's kind of the nature of

00:03:46,860 --> 00:03:50,459
spinnaker that works with all these

00:03:48,540 --> 00:03:52,170
different clouds under the same concepts

00:03:50,459 --> 00:03:55,620
the same abstraction model which is

00:03:52,170 --> 00:03:57,690
pretty powerful so ah one thing I

00:03:55,620 --> 00:03:59,270
shouldn't forget there CI systems there

00:03:57,690 --> 00:04:01,860
so you might wonder

00:03:59,270 --> 00:04:03,810
isn't this the same as Jenkins isn't

00:04:01,860 --> 00:04:07,739
this just another CI cd2

00:04:03,810 --> 00:04:08,880
and actually it's only CD it doesn't try

00:04:07,739 --> 00:04:10,890
to do CI

00:04:08,880 --> 00:04:12,930
it doesn't try to build your

00:04:10,890 --> 00:04:16,890
applications sure it could build it

00:04:12,930 --> 00:04:20,609
could bake a VM like Amazon like Netflix

00:04:16,890 --> 00:04:22,530
does that but but it kind of delegates

00:04:20,609 --> 00:04:24,600
the work to these CI systems that have a

00:04:22,530 --> 00:04:26,990
lot more integration as possible

00:04:24,600 --> 00:04:29,730
so you don't have to you don't have to

00:04:26,990 --> 00:04:33,390
do Java builds or anything like that in

00:04:29,730 --> 00:04:36,180
spinnaker and sure you could ask well I

00:04:33,390 --> 00:04:38,300
could deploy to my cloud environments

00:04:36,180 --> 00:04:41,430
with Jenkins as well why would I need

00:04:38,300 --> 00:04:43,590
spinnaker and and the difference lies in

00:04:41,430 --> 00:04:46,290
state management's Jenkins doesn't

00:04:43,590 --> 00:04:48,450
contain any states of your applications

00:04:46,290 --> 00:04:50,130
and where they're deployed it doesn't

00:04:48,450 --> 00:04:52,020
know that it has to make calls and

00:04:50,130 --> 00:04:54,780
figure that out but if you have multiple

00:04:52,020 --> 00:04:57,240
clouds or just one and on premise

00:04:54,780 --> 00:04:58,590
perhaps and you have multiple regions

00:04:57,240 --> 00:05:00,810
multiple availability zones multiple

00:04:58,590 --> 00:05:02,550
accounts multiple environments it gets

00:05:00,810 --> 00:05:05,580
really tricky and especially if you have

00:05:02,550 --> 00:05:08,670
multiple versions live on production and

00:05:05,580 --> 00:05:10,530
so things like rollback sophisticated

00:05:08,670 --> 00:05:12,090
roll backs depend are dependent on which

00:05:10,530 --> 00:05:14,610
version is currently running at which

00:05:12,090 --> 00:05:16,260
version what is actually which version

00:05:14,610 --> 00:05:18,600
is actually correlated to which commit

00:05:16,260 --> 00:05:21,330
and that gets really hard some systems

00:05:18,600 --> 00:05:24,870
do that by tagging and get but that only

00:05:21,330 --> 00:05:26,490
supports a certain flexibility and

00:05:24,870 --> 00:05:28,140
especially if you have multiple versions

00:05:26,490 --> 00:05:30,180
running in production that can get

00:05:28,140 --> 00:05:33,090
really tricky so spinnaker

00:05:30,180 --> 00:05:35,850
differentiates it here by by having this

00:05:33,090 --> 00:05:37,800
inventory where it keeps a keeps track

00:05:35,850 --> 00:05:39,870
of what's currently in production of

00:05:37,800 --> 00:05:41,490
your application and use that

00:05:39,870 --> 00:05:43,590
information uses that information to

00:05:41,490 --> 00:05:46,410
drive pipelines in more sophisticated

00:05:43,590 --> 00:05:47,580
ways if you're just doing a CF push sure

00:05:46,410 --> 00:05:49,440
you can do that in Jenkins but if you

00:05:47,580 --> 00:05:51,870
want to go further and have more safety

00:05:49,440 --> 00:05:53,790
built into your pipelines and when

00:05:51,870 --> 00:05:58,290
you're going to production then this is

00:05:53,790 --> 00:06:00,480
crucial to have so let's take a look

00:05:58,290 --> 00:06:02,940
when we go to the cloud and when we

00:06:00,480 --> 00:06:06,240
deploy and we do many more deployments

00:06:02,940 --> 00:06:07,890
than just a simple CF push what actually

00:06:06,240 --> 00:06:10,920
is important to have and it continues

00:06:07,890 --> 00:06:13,500
that every tool and the first thing

00:06:10,920 --> 00:06:15,090
we'll realize when we do scale this out

00:06:13,500 --> 00:06:17,250
is that cloud deployments can become

00:06:15,090 --> 00:06:18,720
really complex and especially if you

00:06:17,250 --> 00:06:21,330
work with communities you'll know that

00:06:18,720 --> 00:06:22,620
this is actually not easy and so and if

00:06:21,330 --> 00:06:24,960
you have multiple people and multiple

00:06:22,620 --> 00:06:26,190
different teams making multiple

00:06:24,960 --> 00:06:28,500
different changes to multiple different

00:06:26,190 --> 00:06:30,090
services that gets tricky if it's

00:06:28,500 --> 00:06:31,980
especially if it's across multiple

00:06:30,090 --> 00:06:34,040
different cloud providers multiple

00:06:31,980 --> 00:06:36,900
different availability zones regions

00:06:34,040 --> 00:06:38,130
environments accounts that gets really

00:06:36,900 --> 00:06:40,260
really complex

00:06:38,130 --> 00:06:42,510
especially because these providers they

00:06:40,260 --> 00:06:44,190
have different terminology different

00:06:42,510 --> 00:06:46,200
concepts different abstractions you'll

00:06:44,190 --> 00:06:48,600
have to kind of match all that together

00:06:46,200 --> 00:06:51,150
in your pipelines and sure you could say

00:06:48,600 --> 00:06:53,250
well we only have Amazon or we only have

00:06:51,150 --> 00:06:56,670
Google or only Azure or whatever right

00:06:53,250 --> 00:06:58,680
we have just settled on one sure but you

00:06:56,670 --> 00:07:00,240
also still have on premise probably

00:06:58,680 --> 00:07:02,850
right there's not that many companies

00:07:00,240 --> 00:07:04,230
that completely migrated so having the

00:07:02,850 --> 00:07:06,060
view across all your different

00:07:04,230 --> 00:07:10,050
environments including on-premise that's

00:07:06,060 --> 00:07:13,230
an important part and for for Cloud

00:07:10,050 --> 00:07:14,370
Foundry that becomes really useful it

00:07:13,230 --> 00:07:16,650
becomes really useful to have a

00:07:14,370 --> 00:07:18,600
composite overview like there's an

00:07:16,650 --> 00:07:20,370
spinnaker a multi foundation view so you

00:07:18,600 --> 00:07:22,080
have your application it's deployed to

00:07:20,370 --> 00:07:24,540
in that environment testing environment

00:07:22,080 --> 00:07:27,300
staging production you can see all that

00:07:24,540 --> 00:07:29,280
together in one dashboard in spinnaker

00:07:27,300 --> 00:07:30,990
across your foundation so you don't have

00:07:29,280 --> 00:07:32,610
to go login into each foundation to

00:07:30,990 --> 00:07:35,250
check where which version is deployed

00:07:32,610 --> 00:07:36,990
where or just through the CLI is just

00:07:35,250 --> 00:07:39,360
have to switch between your foundations

00:07:36,990 --> 00:07:40,890
that's not it's not really great and

00:07:39,360 --> 00:07:43,980
here you can use that information to

00:07:40,890 --> 00:07:46,710
drive your pipelines and when you're

00:07:43,980 --> 00:07:49,770
creating these pipelines it's sometimes

00:07:46,710 --> 00:07:51,450
hard for new teams to onboard with fun

00:07:49,770 --> 00:07:54,330
with glad family it becomes easier if

00:07:51,450 --> 00:07:55,500
you use kubernetes it's still hard but

00:07:54,330 --> 00:07:57,870
in general if you want to have

00:07:55,500 --> 00:08:00,480
sophisticated pipelines that use metrics

00:07:57,870 --> 00:08:03,120
then then having guardrails in place

00:08:00,480 --> 00:08:05,810
like template a paved road it's really

00:08:03,120 --> 00:08:08,280
useful to have them an easy onboarding

00:08:05,810 --> 00:08:10,110
and spinnaker offers that through use of

00:08:08,280 --> 00:08:12,960
split of templates where you can simply

00:08:10,110 --> 00:08:14,870
have a pipeline predefined and just you

00:08:12,960 --> 00:08:18,150
can just push safely to production so

00:08:14,870 --> 00:08:19,980
that's one of the key features and when

00:08:18,150 --> 00:08:22,980
you're in production things can go wrong

00:08:19,980 --> 00:08:26,040
it happens so having the ability to

00:08:22,980 --> 00:08:28,020
easily roll back it's important and

00:08:26,040 --> 00:08:29,640
having just this button you can press or

00:08:28,020 --> 00:08:31,740
you can have an automated rollback

00:08:29,640 --> 00:08:33,180
that's really useful to have because

00:08:31,740 --> 00:08:34,740
when we have row backs is when we were

00:08:33,180 --> 00:08:37,680
under duress when we have stress and

00:08:34,740 --> 00:08:40,469
then we don't we think clearly I mean at

00:08:37,680 --> 00:08:42,120
least I don't so having something like

00:08:40,469 --> 00:08:43,650
this available where you can clearly see

00:08:42,120 --> 00:08:46,170
which steps are going to be undertaken

00:08:43,650 --> 00:08:47,550
and in in an automated fashion not

00:08:46,170 --> 00:08:50,390
something that you have to do manually

00:08:47,550 --> 00:08:52,790
and think about when you're under stress

00:08:50,390 --> 00:08:55,010
it kind of helps to get things back to

00:08:52,790 --> 00:09:00,640
normal and helps to take the next step

00:08:55,010 --> 00:09:03,800
for it has anyone seen this image before

00:09:00,640 --> 00:09:05,930
it's quite a lot of people sadly where's

00:09:03,800 --> 00:09:07,730
it from github yeah

00:09:05,930 --> 00:09:10,160
when kid ups down they show this picture

00:09:07,730 --> 00:09:12,790
I think they want to say that it never

00:09:10,160 --> 00:09:15,589
happens because unicorns don't exist but

00:09:12,790 --> 00:09:18,320
unfortunately it does and they really

00:09:15,589 --> 00:09:20,180
try to make with this picture they try

00:09:18,320 --> 00:09:22,790
to make it clear that you need to make

00:09:20,180 --> 00:09:25,850
sure that whenever you go down that as

00:09:22,790 --> 00:09:27,709
as least amount of people are impacted

00:09:25,850 --> 00:09:29,839
so you got to make sure your blast

00:09:27,709 --> 00:09:32,690
radius of your changes is as small as

00:09:29,839 --> 00:09:34,850
possible and you can do that by things

00:09:32,690 --> 00:09:36,440
like deployment windows where you can

00:09:34,850 --> 00:09:38,600
look at your traffic of your application

00:09:36,440 --> 00:09:40,070
and then correlate that with the time

00:09:38,600 --> 00:09:42,709
frame in which you want to deploy of

00:09:40,070 --> 00:09:44,360
course added with the idea of mine or

00:09:42,709 --> 00:09:45,920
people in the office because if you do

00:09:44,360 --> 00:09:47,120
that at night of course then it's harder

00:09:45,920 --> 00:09:50,000
to troubleshoot and something does go

00:09:47,120 --> 00:09:52,250
wrong so having that availability or

00:09:50,000 --> 00:09:54,560
that that that feature available in your

00:09:52,250 --> 00:09:56,420
in your spinnaker installation is is

00:09:54,560 --> 00:09:58,430
really cool because you can use that as

00:09:56,420 --> 00:09:59,899
part of your pipeline you can say let's

00:09:58,430 --> 00:10:01,850
just let's prepare everything upfront

00:09:59,899 --> 00:10:03,170
let's make sure make sure everything's

00:10:01,850 --> 00:10:05,060
automated on my pipeline and at the

00:10:03,170 --> 00:10:07,160
moment that I want to deploy to

00:10:05,060 --> 00:10:09,620
production or the moment when I even

00:10:07,160 --> 00:10:10,910
want to switch traffic that very last

00:10:09,620 --> 00:10:12,800
point we are not gonna make that

00:10:10,910 --> 00:10:14,779
decision I'm gonna wait and wait until

00:10:12,800 --> 00:10:17,089
deployment windows there so that's

00:10:14,779 --> 00:10:19,490
pretty handy too to make sure a blast

00:10:17,089 --> 00:10:20,959
radius is as small as possible and when

00:10:19,490 --> 00:10:22,820
you're creating a deployment when you're

00:10:20,959 --> 00:10:25,720
going to production then having

00:10:22,820 --> 00:10:27,920
strategies is a key feature and

00:10:25,720 --> 00:10:29,540
blue/green I think everybody knows about

00:10:27,920 --> 00:10:32,089
Bluegreen we've got plugins in cloud

00:10:29,540 --> 00:10:33,890
foundry that do look real um that's

00:10:32,089 --> 00:10:35,839
pretty straightforward you just pull up

00:10:33,890 --> 00:10:37,760
a new version next to the existing one

00:10:35,839 --> 00:10:40,279
so do you have two server groups and you

00:10:37,760 --> 00:10:42,230
just just switch the load balancer the

00:10:40,279 --> 00:10:43,579
advantage there is that if things go

00:10:42,230 --> 00:10:45,860
wrong with the new version you can

00:10:43,579 --> 00:10:48,500
switch back to the old version no

00:10:45,860 --> 00:10:50,420
worries but the downside is that

00:10:48,500 --> 00:10:52,490
everybody's exposed to the new version

00:10:50,420 --> 00:10:54,320
because you switch everyone over so

00:10:52,490 --> 00:10:56,420
rolling blue-green is the next step it's

00:10:54,320 --> 00:10:59,180
an incremental fashion where you will be

00:10:56,420 --> 00:11:01,490
taking one instance at a time offline

00:10:59,180 --> 00:11:03,770
and a new version online so that's an

00:11:01,490 --> 00:11:06,860
incremental cut over

00:11:03,770 --> 00:11:08,330
now when we do these steps we can have a

00:11:06,860 --> 00:11:08,870
manual verification whether it's going

00:11:08,330 --> 00:11:11,750
fine

00:11:08,870 --> 00:11:13,430
and we can automate that with smoke

00:11:11,750 --> 00:11:16,220
tests for instance that's all from what

00:11:13,430 --> 00:11:18,710
we're doing um but it doesn't come it

00:11:16,220 --> 00:11:20,570
doesn't go as far as canary testing so

00:11:18,710 --> 00:11:23,930
we all do canary releasing and in a way

00:11:20,570 --> 00:11:26,090
rolling Bluegreen is at the first

00:11:23,930 --> 00:11:27,920
instance a canary you're deploying a

00:11:26,090 --> 00:11:29,720
canary as a new version two small set of

00:11:27,920 --> 00:11:31,520
users so in a way you're doing canary

00:11:29,720 --> 00:11:33,650
releasing but it doesn't mean that

00:11:31,520 --> 00:11:35,870
you're doing real canary testing in the

00:11:33,650 --> 00:11:38,990
full possibilities that it offers and

00:11:35,870 --> 00:11:41,840
canary releasing how spinnaker sees it

00:11:38,990 --> 00:11:45,320
is much more sophisticated it will it

00:11:41,840 --> 00:11:47,570
will do an incremental increase of of

00:11:45,320 --> 00:11:49,820
traffic towards your Canaries but

00:11:47,570 --> 00:11:52,580
whenever there is an increment is going

00:11:49,820 --> 00:11:54,680
to check whether the metrics of the new

00:11:52,580 --> 00:11:58,640
version compared to the metrics of the

00:11:54,680 --> 00:12:00,890
old version is a positive change or a

00:11:58,640 --> 00:12:02,720
negative change and based on that it

00:12:00,890 --> 00:12:05,030
will automatically roll forward or roll

00:12:02,720 --> 00:12:07,100
back which is pretty powerful and it's

00:12:05,030 --> 00:12:09,230
going to do that with what both seed in

00:12:07,100 --> 00:12:12,080
the demo how it's working and it's

00:12:09,230 --> 00:12:13,700
pretty cool actually and of course these

00:12:12,080 --> 00:12:15,260
pipelines when you built them you can

00:12:13,700 --> 00:12:16,820
just script all that and groovy scripts

00:12:15,260 --> 00:12:18,110
and Jenkins or you can write your own

00:12:16,820 --> 00:12:20,510
course scripts or whatever you want to

00:12:18,110 --> 00:12:24,200
do you can do that right it's possible

00:12:20,510 --> 00:12:26,240
but I bet that 80% of the scripts that

00:12:24,200 --> 00:12:28,430
we write is always the same script and

00:12:26,240 --> 00:12:30,530
we always want to do some kind of blue

00:12:28,430 --> 00:12:31,670
green or something like that um and some

00:12:30,530 --> 00:12:33,680
smoke tests and it's always the same

00:12:31,670 --> 00:12:35,540
thing we're writing and now why don't we

00:12:33,680 --> 00:12:37,370
have that built into some kind of

00:12:35,540 --> 00:12:40,370
framework or some kind of tool like

00:12:37,370 --> 00:12:41,930
spinnaker spinnaker offers this um where

00:12:40,370 --> 00:12:45,160
you can just define your pipeline with a

00:12:41,930 --> 00:12:48,200
set of stages and each stage will have

00:12:45,160 --> 00:12:50,390
like this I set a set of steps and each

00:12:48,200 --> 00:12:52,670
step will have a set of tasks and each

00:12:50,390 --> 00:12:54,500
tasks will translate into low-level

00:12:52,670 --> 00:12:55,850
operations and these things are

00:12:54,500 --> 00:12:58,340
contributed by the cloud providers

00:12:55,850 --> 00:12:59,240
themselves so they're definitely tested

00:12:58,340 --> 00:13:01,760
and they're definitely going to work

00:12:59,240 --> 00:13:04,960
with us with the specifics of each cloud

00:13:01,760 --> 00:13:10,010
so you can do this by applying with

00:13:04,960 --> 00:13:12,380
Amazon with Google with with Azure with

00:13:10,010 --> 00:13:14,540
with Oracle whatever you want in one

00:13:12,380 --> 00:13:16,670
pipeline and it's just going to look the

00:13:14,540 --> 00:13:17,750
same so it's very powerful you don't

00:13:16,670 --> 00:13:19,610
have to worry about all these

00:13:17,750 --> 00:13:22,700
fermentation details and you don't have

00:13:19,610 --> 00:13:24,050
to you know just in a trial and error to

00:13:22,700 --> 00:13:26,660
try an error approach where you're just

00:13:24,050 --> 00:13:29,420
gonna test it by running it and this is

00:13:26,660 --> 00:13:31,820
definitely baked into the system it's an

00:13:29,420 --> 00:13:34,160
important thing to have now

00:13:31,820 --> 00:13:38,450
who's we can be looking at canary bird

00:13:34,160 --> 00:13:40,580
sir who's who is a bird lover here okay

00:13:38,450 --> 00:13:42,800
we've got four people so for you I've

00:13:40,580 --> 00:13:45,020
got special slide in here the Latsis

00:13:42,800 --> 00:13:46,370
appreciates birds and especially canary

00:13:45,020 --> 00:13:48,440
birds because we're going to be killing

00:13:46,370 --> 00:13:49,190
a lot of them so let's take a look how

00:13:48,440 --> 00:13:51,290
cute they are

00:13:49,190 --> 00:13:53,390
I mean look at the cuteness it's amazing

00:13:51,290 --> 00:13:55,670
right I mean this one is the same as the

00:13:53,390 --> 00:13:57,110
first first one but come on but we're

00:13:55,670 --> 00:13:59,930
going to be killing them so enough of

00:13:57,110 --> 00:14:02,120
that and actually how we're going to do

00:13:59,930 --> 00:14:04,280
that is through the use of a score we're

00:14:02,120 --> 00:14:06,980
going to give this canary bird a score

00:14:04,280 --> 00:14:09,470
of how trustworthy it is how reliant

00:14:06,980 --> 00:14:10,760
reliable it is and then we're going to

00:14:09,470 --> 00:14:12,860
move forwards or backwards based on

00:14:10,760 --> 00:14:15,050
metrics now this is just a screenshot

00:14:12,860 --> 00:14:17,120
we'll be seeing it in real life in just

00:14:15,050 --> 00:14:20,570
a minute now we also have chaos monkey

00:14:17,120 --> 00:14:22,910
integrations so this tool is coming from

00:14:20,570 --> 00:14:24,650
Netflix they build it originally so they

00:14:22,910 --> 00:14:26,900
of course have deep integration with

00:14:24,650 --> 00:14:28,040
their simian army that they've built of

00:14:26,900 --> 00:14:32,900
chaos monkeys so you can also integrate

00:14:28,040 --> 00:14:35,270
that pretty easily so to conclude we can

00:14:32,900 --> 00:14:36,980
go faster with safety and there's a

00:14:35,270 --> 00:14:38,930
number of features that spinnaker offers

00:14:36,980 --> 00:14:41,570
and specifically the deployment phase

00:14:38,930 --> 00:14:43,130
where it lets you have more safety while

00:14:41,570 --> 00:14:45,410
still being able to go faster production

00:14:43,130 --> 00:14:47,180
and so that we've seen automated

00:14:45,410 --> 00:14:49,100
rollbacks deployment windows chaos

00:14:47,180 --> 00:14:51,470
monkeys deployment strategies in an

00:14:49,100 --> 00:14:53,900
automated way and automates canary

00:14:51,470 --> 00:14:55,250
analysis which will demo as well and but

00:14:53,900 --> 00:14:56,870
there's more there's close to rock in

00:14:55,250 --> 00:14:59,060
traffic guards manual the manual

00:14:56,870 --> 00:15:00,830
judgements conditional pipeline and

00:14:59,060 --> 00:15:02,870
staged executions and notifications and

00:15:00,830 --> 00:15:04,850
these first two I might have to say a

00:15:02,870 --> 00:15:07,760
little thing about it so cluster locking

00:15:04,850 --> 00:15:09,410
is really about when most Popeye plans

00:15:07,760 --> 00:15:11,450
are acting on the same cluster which is

00:15:09,410 --> 00:15:14,930
kind of a server group in in the

00:15:11,450 --> 00:15:16,700
terminology of spinnaker then it could

00:15:14,930 --> 00:15:19,280
be that you're having side effects or

00:15:16,700 --> 00:15:21,320
you're having certain combination of

00:15:19,280 --> 00:15:23,240
factors at play where you don't really

00:15:21,320 --> 00:15:24,740
have a predictable situation so cluster

00:15:23,240 --> 00:15:27,050
locking allows you to lock a certain

00:15:24,740 --> 00:15:28,700
cluster when you have a certain when you

00:15:27,050 --> 00:15:31,310
have one operation acting on it and

00:15:28,700 --> 00:15:32,810
traffic guards make sure that whatever

00:15:31,310 --> 00:15:35,029
strange combination of sophisticated

00:15:32,810 --> 00:15:37,579
pipelines are running at the same time

00:15:35,029 --> 00:15:39,589
you will never delete the lost server

00:15:37,579 --> 00:15:42,079
group in production just to make sure

00:15:39,589 --> 00:15:43,310
right because you know there could be

00:15:42,079 --> 00:15:45,199
the strange combination of factors that

00:15:43,310 --> 00:15:46,759
does delete the last one and then you

00:15:45,199 --> 00:15:48,199
have downtime so you can have more of

00:15:46,759 --> 00:15:51,439
these features in there that allow you

00:15:48,199 --> 00:15:53,930
to protect yourself so let's go to the

00:15:51,439 --> 00:15:56,569
demo right that was always more

00:15:53,930 --> 00:15:59,600
interesting so for this demo I've got a

00:15:56,569 --> 00:16:02,749
little scenario that kind of helps us to

00:15:59,600 --> 00:16:04,970
to understand what's going on and I'd

00:16:02,749 --> 00:16:06,230
like to use Rick and Morty who's who is

00:16:04,970 --> 00:16:09,639
familiar with big amore

00:16:06,230 --> 00:16:12,290
oh wait who's not familiar Rebecca Mori

00:16:09,639 --> 00:16:14,959
okay this is so quite a few so Rick and

00:16:12,290 --> 00:16:17,529
Morty is a cartoon it's kind of crazy

00:16:14,959 --> 00:16:20,389
it's about interstellar

00:16:17,529 --> 00:16:22,910
multi-dimensional time travel stuff and

00:16:20,389 --> 00:16:24,829
you've got this this crazy engineer here

00:16:22,910 --> 00:16:27,199
on the right and this little kid that's

00:16:24,829 --> 00:16:28,160
always taken along for adventures and

00:16:27,199 --> 00:16:29,959
there's two adventures that we'd be

00:16:28,160 --> 00:16:31,279
talking about today and they're gonna be

00:16:29,959 --> 00:16:34,160
defining our blue and our Korean

00:16:31,279 --> 00:16:35,569
versions so on the one hand we've got

00:16:34,160 --> 00:16:37,699
our green version which is pickle Rick

00:16:35,569 --> 00:16:39,589
now in this series pickle Rick um

00:16:37,699 --> 00:16:41,149
actually it's just Rick who turns

00:16:39,589 --> 00:16:42,860
himself into a pickle because it doesn't

00:16:41,149 --> 00:16:45,290
want to go to family therapy he just

00:16:42,860 --> 00:16:47,149
hates it so well actually because he's a

00:16:45,290 --> 00:16:48,920
pickle he starts to roll and he rolls

00:16:47,149 --> 00:16:51,500
into the sewer and has to start fighting

00:16:48,920 --> 00:16:53,120
rats and cockroaches which is not great

00:16:51,500 --> 00:16:56,000
um but eventually comes out victorious

00:16:53,120 --> 00:16:58,339
so that's amazing he's very strong he's

00:16:56,000 --> 00:16:59,540
predictable he's a stable green version

00:16:58,339 --> 00:17:01,160
so we want to keep that in production

00:16:59,540 --> 00:17:04,069
because he's on our side

00:17:01,160 --> 00:17:06,260
now for our greet our blue version we've

00:17:04,069 --> 00:17:09,049
got the blue antagonist which is mr.

00:17:06,260 --> 00:17:12,049
meeseeks and he's a gene in the box who

00:17:09,049 --> 00:17:12,949
only exists to solve a task at hand so

00:17:12,049 --> 00:17:14,539
it sounds great

00:17:12,949 --> 00:17:15,649
because he'll help you out but the

00:17:14,539 --> 00:17:17,929
problem is if he can't help you out

00:17:15,649 --> 00:17:20,110
because the task is just unsolvable then

00:17:17,929 --> 00:17:22,789
he become aggressive he'll become

00:17:20,110 --> 00:17:25,399
dangerous for us he's a chaotic version

00:17:22,789 --> 00:17:26,780
and we want to roll him back so the blue

00:17:25,399 --> 00:17:29,390
version is something that we don't want

00:17:26,780 --> 00:17:32,000
to keep in production um so the

00:17:29,390 --> 00:17:35,570
backstory I if you haven't heard about

00:17:32,000 --> 00:17:37,760
it so we missing mystics is being

00:17:35,570 --> 00:17:39,740
spawned to solve the task of getting

00:17:37,760 --> 00:17:42,320
this guy to golf better but he just

00:17:39,740 --> 00:17:43,669
can't play golf so he spawns an army six

00:17:42,320 --> 00:17:44,780
the music spawns an auto mistakes and

00:17:43,669 --> 00:17:46,430
they spawn other mystics

00:17:44,780 --> 00:17:49,340
to help them out but you know this guy

00:17:46,430 --> 00:17:50,870
just can't pick up so it's pretty bad so

00:17:49,340 --> 00:17:53,480
they start to get aggressive start to

00:17:50,870 --> 00:17:55,820
take people hostage and eventually we

00:17:53,480 --> 00:17:58,160
gotta roll this back right and it gets

00:17:55,820 --> 00:18:00,710
really bad so let's take a look at our

00:17:58,160 --> 00:18:02,600
demo you can serve to this specific end

00:18:00,710 --> 00:18:04,280
points this is production and you can

00:18:02,600 --> 00:18:07,730
take a look at what's currently in

00:18:04,280 --> 00:18:10,400
production so you can also take like a

00:18:07,730 --> 00:18:11,660
QR codes screenshot and to see what's

00:18:10,400 --> 00:18:13,670
going on in production

00:18:11,660 --> 00:18:16,130
I just really hope this is set up

00:18:13,670 --> 00:18:17,840
correctly because sometimes I test this

00:18:16,130 --> 00:18:22,820
out and forget to roll back but nobody

00:18:17,840 --> 00:18:26,690
is fine it's pretty simple

00:18:22,820 --> 00:18:28,640
Big Dawg do /tf summit all right it's

00:18:26,690 --> 00:18:30,230
green all right the green version is

00:18:28,640 --> 00:18:33,680
currently applicable is currently in

00:18:30,230 --> 00:18:39,200
production amazing and so let's go to -

00:18:33,680 --> 00:18:40,790
to - lets go - well we all know it's now

00:18:39,200 --> 00:18:42,920
currently green crates let's look at our

00:18:40,790 --> 00:18:45,500
application what's actually driving this

00:18:42,920 --> 00:18:47,600
green page um now I've got a spring

00:18:45,500 --> 00:18:51,800
booth page a spring which sites or

00:18:47,600 --> 00:18:54,980
spring good web application whoops it's

00:18:51,800 --> 00:18:57,680
really simple it has five classes and

00:18:54,980 --> 00:18:59,570
only one of them is important and that's

00:18:57,680 --> 00:19:01,760
the controller so the idea is that it

00:18:59,570 --> 00:19:03,920
takes a call and it then returns view

00:19:01,760 --> 00:19:05,300
super simple and the view that's

00:19:03,920 --> 00:19:10,100
currently being returned is that this

00:19:05,300 --> 00:19:11,870
visible in the back great it's going to

00:19:10,100 --> 00:19:13,160
pick a brick as you can see here all

00:19:11,870 --> 00:19:16,160
right pick a records the green one

00:19:13,160 --> 00:19:19,280
alright so that's that's great and we've

00:19:16,160 --> 00:19:22,430
got some random sleep at at the moment

00:19:19,280 --> 00:19:24,770
which is between zero and 100 and the

00:19:22,430 --> 00:19:26,060
chaos is zero so that means it's from

00:19:24,770 --> 00:19:27,740
zero to a hundred that we're going to

00:19:26,060 --> 00:19:29,270
sleep and then we're going to return so

00:19:27,740 --> 00:19:31,640
if you refresh the page you'll have

00:19:29,270 --> 00:19:33,410
between 0 and 100 milliseconds of sleep

00:19:31,640 --> 00:19:34,640
before you receive the page you're not

00:19:33,410 --> 00:19:36,830
going to notice that because it's it's

00:19:34,640 --> 00:19:38,450
not that much um but we're going to

00:19:36,830 --> 00:19:40,220
change that we're going to introduce our

00:19:38,450 --> 00:19:42,560
second character which is mr. meeseeks

00:19:40,220 --> 00:19:44,900
so I'm gonna change this application of

00:19:42,560 --> 00:19:48,590
course in github because that's what

00:19:44,900 --> 00:19:51,200
great developers do and me seeks there

00:19:48,590 --> 00:19:54,770
we go and our me6 application is going

00:19:51,200 --> 00:19:56,150
to act a little bit more erratic and the

00:19:54,770 --> 00:19:58,130
way we're going to simulate that is by

00:19:56,150 --> 00:19:58,570
increasing the time it takes to load the

00:19:58,130 --> 00:20:03,009
page

00:19:58,570 --> 00:20:05,289
by about 50 so our chaos will be 50 now

00:20:03,009 --> 00:20:07,480
that's 50 milliseconds just remember

00:20:05,289 --> 00:20:10,029
that our initial pickle Rick already

00:20:07,480 --> 00:20:13,120
slept for between 0 and 100 milliseconds

00:20:10,029 --> 00:20:14,649
so it could be that if you look at the

00:20:13,120 --> 00:20:16,299
matrix that you think you are you're

00:20:14,649 --> 00:20:19,000
dealing with the music's but actually

00:20:16,299 --> 00:20:22,059
you might not so just to make this a bit

00:20:19,000 --> 00:20:23,950
more unpredictable but then we're gonna

00:20:22,059 --> 00:20:25,389
be looking at trends right so that's

00:20:23,950 --> 00:20:27,220
going to be interesting so now we're

00:20:25,389 --> 00:20:31,350
going to increase the trends to always

00:20:27,220 --> 00:20:34,570
add 15 milliseconds so let's switch to

00:20:31,350 --> 00:20:35,980
meeseeks all right there we go so I'm

00:20:34,570 --> 00:20:39,850
gonna commit this what's going to happen

00:20:35,980 --> 00:20:42,509
is it's gonna be built by Travis here

00:20:39,850 --> 00:20:45,490
which is for free so I'm using that one

00:20:42,509 --> 00:20:48,700
and it's gonna build my application that

00:20:45,490 --> 00:20:50,590
will now be a music application once

00:20:48,700 --> 00:20:53,200
it's done that it's going to trigger a

00:20:50,590 --> 00:20:55,509
pipeline in spinnaker so let's take a

00:20:53,200 --> 00:20:57,039
look at spinnaker first of all we can go

00:20:55,509 --> 00:20:58,269
to infrastructure where we will see our

00:20:57,039 --> 00:21:00,549
application and how it's currently

00:20:58,269 --> 00:21:03,370
deployed in all our environments across

00:21:00,549 --> 00:21:06,429
all our different foundations and here

00:21:03,370 --> 00:21:06,789
you can see if i zoom in a bit there we

00:21:06,429 --> 00:21:10,000
go

00:21:06,789 --> 00:21:12,789
that we have a Sonoma foundation that's

00:21:10,000 --> 00:21:14,289
the name of the PCF foundation and that

00:21:12,789 --> 00:21:14,830
we have running make left-hand

00:21:14,289 --> 00:21:17,919
refoundation

00:21:14,830 --> 00:21:21,220
and sir a quick answer a quick is used

00:21:17,919 --> 00:21:23,110
for dev and tsunamis used for prop and

00:21:21,220 --> 00:21:24,610
in production currently four instances

00:21:23,110 --> 00:21:27,220
are running on Version three

00:21:24,610 --> 00:21:28,539
I have version two just there to roll

00:21:27,220 --> 00:21:30,909
back to but I don't want to do that

00:21:28,539 --> 00:21:33,580
because four and three is acting great

00:21:30,909 --> 00:21:37,620
it's our green version on dev we have

00:21:33,580 --> 00:21:40,450
version 22 and it's currently working

00:21:37,620 --> 00:21:43,269
it's currently green I can go there if I

00:21:40,450 --> 00:21:46,389
go to my load balancers if I go here

00:21:43,269 --> 00:21:48,490
it's just sort of quick and I go to this

00:21:46,389 --> 00:21:50,110
application it's also green so my

00:21:48,490 --> 00:21:53,529
development version at the moment is

00:21:50,110 --> 00:21:55,840
also green great so now if I built is

00:21:53,529 --> 00:21:58,600
actually working it's triggered it's now

00:21:55,840 --> 00:22:00,100
building then it should deploy something

00:21:58,600 --> 00:22:02,080
to death let's take a look at how that

00:22:00,100 --> 00:22:04,029
happens so we have here delivery

00:22:02,080 --> 00:22:06,039
pipelines so you can take a look at what

00:22:04,029 --> 00:22:07,629
my pipelines are so I can configure the

00:22:06,039 --> 00:22:09,730
deploy to dev pipeline which is gonna

00:22:07,629 --> 00:22:11,529
act on sir Creek our deployment our dev

00:22:09,730 --> 00:22:12,549
deployment environment so let me take a

00:22:11,529 --> 00:22:14,770
look how that's the

00:22:12,549 --> 00:22:17,559
so the configuration here is actually

00:22:14,770 --> 00:22:19,690
looking at a web hook and the web hook

00:22:17,559 --> 00:22:21,820
is going to be triggered by Travis

00:22:19,690 --> 00:22:23,710
if the builds were successful so let's

00:22:21,820 --> 00:22:26,110
verify whether that's working in a

00:22:23,710 --> 00:22:27,820
second now if I look at what's what's

00:22:26,110 --> 00:22:30,130
going to happen once this web hook is

00:22:27,820 --> 00:22:32,200
triggered it's going to look at an

00:22:30,130 --> 00:22:33,400
artifact from an artifact repository and

00:22:32,200 --> 00:22:35,340
there can be many of them it can be

00:22:33,400 --> 00:22:38,020
Jenkins could be art factory it could be

00:22:35,340 --> 00:22:41,080
as a tree could be custom artifacts

00:22:38,020 --> 00:22:42,850
could even be github or Google Cloud

00:22:41,080 --> 00:22:44,309
storage or whatever you wanna use so

00:22:42,850 --> 00:22:46,720
these are all these artifacts

00:22:44,309 --> 00:22:49,470
repositories so I'm going to look at an

00:22:46,720 --> 00:22:52,000
s3 bucket on Amazon where I'm going to

00:22:49,470 --> 00:22:53,590
take my built out artifact I'm going to

00:22:52,000 --> 00:22:55,570
deploy it to death and the way I'm going

00:22:53,590 --> 00:22:57,370
to do that is through using a strategy

00:22:55,570 --> 00:22:58,720
called Highlander now is anyone does

00:22:57,370 --> 00:23:01,210
anyone know what Highlander strategy

00:22:58,720 --> 00:23:04,929
could be what could put the Highlander

00:23:01,210 --> 00:23:06,820
strategy me exactly there can be only

00:23:04,929 --> 00:23:08,679
one so the strategy is gonna take it's

00:23:06,820 --> 00:23:11,020
sort it's gonna cut off the heads of all

00:23:08,679 --> 00:23:13,539
the existing existing instances I mean

00:23:11,020 --> 00:23:15,220
that's kind of what it means so it's

00:23:13,539 --> 00:23:16,990
great because on that we don't need to

00:23:15,220 --> 00:23:18,760
be had available or fault-tolerant or

00:23:16,990 --> 00:23:21,429
whatever we just want to see that one

00:23:18,760 --> 00:23:23,890
instance working so that's gonna happen

00:23:21,429 --> 00:23:25,780
and it's going to deploy that with Java

00:23:23,890 --> 00:23:27,490
build pack so this is kind of what

00:23:25,780 --> 00:23:29,440
you're put in the manifest you could

00:23:27,490 --> 00:23:31,120
have a manifest also from an artifact

00:23:29,440 --> 00:23:32,590
repository from wherever you want to get

00:23:31,120 --> 00:23:35,530
it or you could define it through a form

00:23:32,590 --> 00:23:37,179
and I opted that for I opted for the

00:23:35,530 --> 00:23:38,470
form the route is going to be the same

00:23:37,179 --> 00:23:40,179
route for sort of creeks or the dev

00:23:38,470 --> 00:23:41,799
environment and here you can see all my

00:23:40,179 --> 00:23:44,140
keys which I'll be changing after this

00:23:41,799 --> 00:23:47,890
presentation of course and you have

00:23:44,140 --> 00:23:49,179
developed deployment type here which is

00:23:47,890 --> 00:23:51,700
going to say this is just the

00:23:49,179 --> 00:23:55,000
development instance you don't have to

00:23:51,700 --> 00:23:56,860
look at this for my further stages so if

00:23:55,000 --> 00:23:58,600
I look at the pipeline it's been

00:23:56,860 --> 00:24:01,090
triggered and let's take a look at

00:23:58,600 --> 00:24:04,150
infrastructure as you can see now

00:24:01,090 --> 00:24:06,760
version 23 is now coming online I don't

00:24:04,150 --> 00:24:08,950
have to go to my CLI to figure out

00:24:06,760 --> 00:24:10,799
what's going on on on that foundation on

00:24:08,950 --> 00:24:14,049
cloud foundry I don't have to go to the

00:24:10,799 --> 00:24:16,360
to the interface or anything like that

00:24:14,049 --> 00:24:19,559
so that's great so it's deploying that

00:24:16,360 --> 00:24:21,880
and it's going to remove version 22 so

00:24:19,559 --> 00:24:23,950
the points you brought that's the next

00:24:21,880 --> 00:24:26,140
step let's say we're going to go ahead

00:24:23,950 --> 00:24:27,490
with this we'll see once the deployment

00:24:26,140 --> 00:24:29,190
finish because it still has to tear down

00:24:27,490 --> 00:24:32,620
the old version with the strategy of

00:24:29,190 --> 00:24:34,960
Highlander diploma to prod is now going

00:24:32,620 --> 00:24:36,549
to do more sophisticated stuff let's see

00:24:34,960 --> 00:24:38,110
so it's first going to deploy a baseline

00:24:36,549 --> 00:24:40,510
and then it going to do and at the same

00:24:38,110 --> 00:24:44,980
time it's going to deploy a canary these

00:24:40,510 --> 00:24:46,660
two things are going to be are our two

00:24:44,980 --> 00:24:48,760
instances actually for cuz I'll be

00:24:46,660 --> 00:24:50,380
deploying two of each and where we going

00:24:48,760 --> 00:24:53,500
to do our automated canary analysis on

00:24:50,380 --> 00:24:55,570
and why do we deploy a baseline because

00:24:53,500 --> 00:24:57,070
we already have production running why

00:24:55,570 --> 00:24:59,260
don't you just use production and the

00:24:57,070 --> 00:25:01,690
canary is because when you have a

00:24:59,260 --> 00:25:04,360
long-running application it could be

00:25:01,690 --> 00:25:05,890
running for months already then you

00:25:04,360 --> 00:25:09,070
could have memory leaks that are build

00:25:05,890 --> 00:25:11,410
up or it could be that when we start the

00:25:09,070 --> 00:25:13,540
canary that we have certain spikes and

00:25:11,410 --> 00:25:15,880
CPU and memory you could be warming up

00:25:13,540 --> 00:25:17,080
caches so those things we don't want to

00:25:15,880 --> 00:25:19,090
compare it to a version that's already

00:25:17,080 --> 00:25:20,530
running for a very long time so we also

00:25:19,090 --> 00:25:22,570
want to have this level playing field

00:25:20,530 --> 00:25:25,179
for the for the baseline for production

00:25:22,570 --> 00:25:27,040
and we want to spin up baselines as well

00:25:25,179 --> 00:25:28,660
and then these two are going to run next

00:25:27,040 --> 00:25:30,280
to each other so the baselines just

00:25:28,660 --> 00:25:32,950
gonna clone from production that's

00:25:30,280 --> 00:25:34,960
simple and the canary is going to take

00:25:32,950 --> 00:25:36,970
the same version as as it is on

00:25:34,960 --> 00:25:40,630
development so this is going to be

00:25:36,970 --> 00:25:42,549
hopefully our musics then we do canary

00:25:40,630 --> 00:25:43,990
analysis and with the canary analysis

00:25:42,549 --> 00:25:45,400
we're going to be using a configuration

00:25:43,990 --> 00:25:47,620
which we'll take a look at in a minute

00:25:45,400 --> 00:25:50,440
and we're going to run for six minutes

00:25:47,620 --> 00:25:52,090
and we're gonna have a delay of one

00:25:50,440 --> 00:25:53,260
minute before starting the analysis

00:25:52,090 --> 00:25:55,390
because we really want to get rid of

00:25:53,260 --> 00:25:57,160
these first this first minute of startup

00:25:55,390 --> 00:25:58,660
because the Mavericks there are a very

00:25:57,160 --> 00:26:00,640
difference than what you normally have

00:25:58,660 --> 00:26:02,679
when you run the application so we were

00:26:00,640 --> 00:26:04,570
just going to ignore that part and then

00:26:02,679 --> 00:26:07,179
every minute we're going to have an

00:26:04,570 --> 00:26:09,490
analysis we are going to check is this

00:26:07,179 --> 00:26:11,350
actually good or not and then based on

00:26:09,490 --> 00:26:13,770
our results of this analysis we're going

00:26:11,350 --> 00:26:17,020
going to add a roll back or roll forward

00:26:13,770 --> 00:26:18,100
every step every 10 10 seconds we're

00:26:17,020 --> 00:26:20,380
going to have a step where we're going

00:26:18,100 --> 00:26:22,480
to receive metrics from data log because

00:26:20,380 --> 00:26:24,970
we will we'll have metrics in data talk

00:26:22,480 --> 00:26:28,900
so let's take a look at what's currently

00:26:24,970 --> 00:26:30,850
going on so it's almost finished here

00:26:28,900 --> 00:26:32,190
it's gonna be taking over 10 seconds I

00:26:30,850 --> 00:26:34,510
guess and then it's gonna kick this off

00:26:32,190 --> 00:26:37,300
so let's take a look at our config for

00:26:34,510 --> 00:26:39,340
canary so it's this relief okay so this

00:26:37,300 --> 00:26:40,080
is shrinking the cluster right now so

00:26:39,340 --> 00:26:41,669
our canary calm

00:26:40,080 --> 00:26:44,640
that we're referencing in our canary

00:26:41,669 --> 00:26:46,980
analysis phase looks like this so here

00:26:44,640 --> 00:26:48,840
we've got two different groups we've got

00:26:46,980 --> 00:26:50,549
the Rick and Morty metrics and we've got

00:26:48,840 --> 00:26:52,409
system metrics for Rick and Morty

00:26:50,549 --> 00:26:54,149
metrics we've got the rendering time

00:26:52,409 --> 00:26:56,010
average and the rendering time maximum

00:26:54,149 --> 00:26:59,070
and so this is going to look at how long

00:26:56,010 --> 00:27:00,690
it takes to render a page and if the

00:26:59,070 --> 00:27:03,899
tool is successful it should look at

00:27:00,690 --> 00:27:05,789
trending trending between metrics coming

00:27:03,899 --> 00:27:07,140
from the first version and coming from

00:27:05,789 --> 00:27:09,390
the second version and compare these

00:27:07,140 --> 00:27:12,600
trends and not just freak out if there's

00:27:09,390 --> 00:27:14,220
something something wrong with the with

00:27:12,600 --> 00:27:15,570
the initial metrics that you get so it

00:27:14,220 --> 00:27:19,139
should really be looking at some

00:27:15,570 --> 00:27:21,809
statistics and persistent metrics we've

00:27:19,139 --> 00:27:24,289
got CPU for the CPU usage for the system

00:27:21,809 --> 00:27:26,760
for the process some memory usage and

00:27:24,289 --> 00:27:28,380
also looking at log back events anything

00:27:26,760 --> 00:27:29,519
in the logs if there's errors being

00:27:28,380 --> 00:27:32,519
generated if you want to roll that back

00:27:29,519 --> 00:27:34,950
as well okay so these are basically are

00:27:32,519 --> 00:27:37,850
the different metrics that we are going

00:27:34,950 --> 00:27:39,690
to track and we're going to then analyze

00:27:37,850 --> 00:27:42,090
whether we want to go forward or

00:27:39,690 --> 00:27:44,820
backwards the metric group wait we're

00:27:42,090 --> 00:27:47,850
going to assign more importance or more

00:27:44,820 --> 00:27:50,549
weight to recomm or D because that's our

00:27:47,850 --> 00:27:52,950
business metric in a way that's the

00:27:50,549 --> 00:27:56,070
metric we define ourselves while system

00:27:52,950 --> 00:27:57,990
metrics well also important of course

00:27:56,070 --> 00:28:01,110
but for our demo here we were only

00:27:57,990 --> 00:28:03,630
attaching 30 weights on that right so

00:28:01,110 --> 00:28:06,720
this is this is kind of triggered now

00:28:03,630 --> 00:28:08,610
yes great so now baseline and canary are

00:28:06,720 --> 00:28:11,429
being deployed now I'm gonna have to ask

00:28:08,610 --> 00:28:13,019
all of you to refresh your page once

00:28:11,429 --> 00:28:15,269
this the first men in the form of is

00:28:13,019 --> 00:28:16,679
finished I'll tell you one because we

00:28:15,269 --> 00:28:18,630
need a lot of metrics we need some data

00:28:16,679 --> 00:28:20,070
from production if nobody is visiting

00:28:18,630 --> 00:28:22,019
our website you don't have used it we

00:28:20,070 --> 00:28:24,269
don't have metrics for our rendering

00:28:22,019 --> 00:28:26,730
time and to help all of you out I'm

00:28:24,269 --> 00:28:28,350
gonna be also generating some random

00:28:26,730 --> 00:28:30,539
loads so that we actually have a nice

00:28:28,350 --> 00:28:33,690
graph of nice metrics no money on

00:28:30,539 --> 00:28:37,139
production you have some metrics so here

00:28:33,690 --> 00:28:38,850
you can see already if you refresh you

00:28:37,139 --> 00:28:41,340
can sometimes see the music's page and

00:28:38,850 --> 00:28:43,350
sometimes the picker rec page so I'm

00:28:41,340 --> 00:28:45,870
also going to do that I'm going to

00:28:43,350 --> 00:28:47,279
production so production load balancer

00:28:45,870 --> 00:28:49,049
and as you can see here on the

00:28:47,279 --> 00:28:51,179
production we now have four instances of

00:28:49,049 --> 00:28:53,520
the production environment two instances

00:28:51,179 --> 00:28:58,380
of canary and two instances of baseline

00:28:53,520 --> 00:28:59,550
if I go here well then I now have the

00:28:58,380 --> 00:29:02,940
green version great that was already

00:28:59,550 --> 00:29:06,510
there the far refresh enough because of

00:29:02,940 --> 00:29:08,220
course it's 2 out of 8 then we will have

00:29:06,510 --> 00:29:11,040
mr. musics this is mr. music site the

00:29:08,220 --> 00:29:15,770
blue version um and this version should

00:29:11,040 --> 00:29:19,620
normally generate some bad load or some

00:29:15,770 --> 00:29:21,300
average really higher rendering times as

00:29:19,620 --> 00:29:24,780
you can see here dated August receiving

00:29:21,300 --> 00:29:28,050
metrics from the applications awesome so

00:29:24,780 --> 00:29:29,760
if I'm looking at my pipeline ok the

00:29:28,050 --> 00:29:32,070
deployment of the baseline is still

00:29:29,760 --> 00:29:34,530
ongoing it should be finished right away

00:29:32,070 --> 00:29:36,930
there you go so now the canary analysis

00:29:34,530 --> 00:29:38,910
kicked off which is pretty cool I got a

00:29:36,930 --> 00:29:40,380
have to make it a little bit smaller

00:29:38,910 --> 00:29:43,290
because otherwise it's not really

00:29:40,380 --> 00:29:45,900
showing it nicely so here you can see we

00:29:43,290 --> 00:29:48,810
have six minutes so there's gonna be six

00:29:45,900 --> 00:29:51,810
six times and analysis and analysis now

00:29:48,810 --> 00:29:53,610
of course if the first analysis already

00:29:51,810 --> 00:29:56,610
shows that this application is not

00:29:53,610 --> 00:29:59,940
actually working at all or these these

00:29:56,610 --> 00:30:02,100
rendering times are clearly higher then

00:29:59,940 --> 00:30:04,680
it's just gonna abort because we don't

00:30:02,100 --> 00:30:08,100
want to increase this the blast radius

00:30:04,680 --> 00:30:09,780
remember so this is this is happening we

00:30:08,100 --> 00:30:12,450
are it's what is actually going on now

00:30:09,780 --> 00:30:14,430
is the warm-up wait so we there are 40

00:30:12,450 --> 00:30:15,960
minutes into the first minute of warm-up

00:30:14,430 --> 00:30:19,230
wait we're just going to wait until this

00:30:15,960 --> 00:30:21,510
application is becoming healthy then

00:30:19,230 --> 00:30:24,630
we're gonna wait for one minute to

00:30:21,510 --> 00:30:28,200
receive metrics so in seven seconds you

00:30:24,630 --> 00:30:30,470
can start refreshing we can do it an

00:30:28,200 --> 00:30:32,640
hour already already if you want alright

00:30:30,470 --> 00:30:35,460
right so now the metrics that you're

00:30:32,640 --> 00:30:37,770
going to start generating are actually

00:30:35,460 --> 00:30:39,960
going to be part of the analysis so this

00:30:37,770 --> 00:30:41,940
is pretty cool so let's take a look at

00:30:39,960 --> 00:30:43,140
the other thing that we're seeing here

00:30:41,940 --> 00:30:45,960
this orange one

00:30:43,140 --> 00:30:48,300
this is a manual judgment it's actually

00:30:45,960 --> 00:30:50,490
just a big red button to press if you

00:30:48,300 --> 00:30:51,780
want to continue or not now this is the

00:30:50,490 --> 00:30:55,350
difference between continuous delivery

00:30:51,780 --> 00:30:57,990
and continuous deployment all right so

00:30:55,350 --> 00:31:02,070
the more cool thing I suppose is to be

00:30:57,990 --> 00:31:04,140
completely automatic true but you can't

00:31:02,070 --> 00:31:05,700
underestimate the value of manual

00:31:04,140 --> 00:31:08,010
judgments

00:31:05,700 --> 00:31:10,230
like if you have human interacting with

00:31:08,010 --> 00:31:12,060
the pipeline the benefit is that this

00:31:10,230 --> 00:31:13,710
human has a gut feeling and computer

00:31:12,060 --> 00:31:16,260
doesn't have a good feeling so it could

00:31:13,710 --> 00:31:18,270
be that the human senses that there

00:31:16,260 --> 00:31:19,710
could be something wrong maybe they

00:31:18,270 --> 00:31:20,850
maybe he heard something from a

00:31:19,710 --> 00:31:23,400
colleague that there might be some

00:31:20,850 --> 00:31:24,840
firewall changes coming up just during

00:31:23,400 --> 00:31:26,460
this timeframe it might be possible that

00:31:24,840 --> 00:31:28,290
is just right now and it might impact

00:31:26,460 --> 00:31:30,930
especially if you're changing your

00:31:28,290 --> 00:31:32,370
version so you could say like okay the

00:31:30,930 --> 00:31:33,720
canary analysis turned out to be

00:31:32,370 --> 00:31:35,790
successful or my application isn't

00:31:33,720 --> 00:31:37,890
working but actually I don't want to go

00:31:35,790 --> 00:31:42,300
ahead and or it could be that you want

00:31:37,890 --> 00:31:43,560
to have marketing maybe align this with

00:31:42,300 --> 00:31:45,930
some kind of email app campaign or

00:31:43,560 --> 00:31:48,690
anything like that so then you can say

00:31:45,930 --> 00:31:50,040
okay I want to go ahead or not oh so

00:31:48,690 --> 00:31:51,600
let's see our canary analysis has

00:31:50,040 --> 00:31:54,330
already reported that something's wrong

00:31:51,600 --> 00:31:57,510
so let's take a look the canary has run

00:31:54,330 --> 00:32:00,210
the interval was one minute and let's

00:31:57,510 --> 00:32:01,980
take a look at what this generates so

00:32:00,210 --> 00:32:04,560
now we go to our canary reports and our

00:32:01,980 --> 00:32:06,570
canary reports here show me a number of

00:32:04,560 --> 00:32:07,890
different metrics so of course this is

00:32:06,570 --> 00:32:10,110
all the same ones that I've created in

00:32:07,890 --> 00:32:12,570
my config you've got JVM memory usage

00:32:10,110 --> 00:32:14,400
which is almost exactly the same family

00:32:12,570 --> 00:32:16,590
but if you just look at a certain moment

00:32:14,400 --> 00:32:19,290
in time if you just compare this

00:32:16,590 --> 00:32:21,540
manually the canary with the with the

00:32:19,290 --> 00:32:22,890
the version on production then you might

00:32:21,540 --> 00:32:26,880
see what this is completely different

00:32:22,890 --> 00:32:29,040
shara but the trend over time indicates

00:32:26,880 --> 00:32:30,690
that actually this is very similar and

00:32:29,040 --> 00:32:32,820
due to garbage collection you can't

00:32:30,690 --> 00:32:35,040
predict when things are going to be

00:32:32,820 --> 00:32:37,320
similar or not it's just a trending

00:32:35,040 --> 00:32:38,790
that's very important so the engine here

00:32:37,320 --> 00:32:41,040
that's going to judge whether this is

00:32:38,790 --> 00:32:43,440
successful or not actually takes into

00:32:41,040 --> 00:32:46,350
consideration trending of your metrics

00:32:43,440 --> 00:32:48,180
and log back events and there's no no

00:32:46,350 --> 00:32:50,570
events on another side no errors

00:32:48,180 --> 00:32:54,270
application is working amazingly well

00:32:50,570 --> 00:32:56,010
then for CPU usage also there you can

00:32:54,270 --> 00:32:58,440
have spikes but eventually if you look

00:32:56,010 --> 00:33:00,480
at the the differences it's pretty

00:32:58,440 --> 00:33:02,640
pretty similar and we can also look at

00:33:00,480 --> 00:33:04,020
the bee swarms block box plot and you

00:33:02,640 --> 00:33:06,390
can see that the standard deviation is

00:33:04,020 --> 00:33:09,420
kind of similar and of course you've got

00:33:06,390 --> 00:33:11,490
outliers as you can see here the CPU

00:33:09,420 --> 00:33:12,420
sometimes can spike but we don't care

00:33:11,490 --> 00:33:15,060
about that because the standard

00:33:12,420 --> 00:33:17,460
deviation is similar then for the run

00:33:15,060 --> 00:33:18,520
wrong time well I think this is pretty

00:33:17,460 --> 00:33:21,730
clear

00:33:18,520 --> 00:33:23,560
now and then looks like this this huge

00:33:21,730 --> 00:33:25,750
difference because of course you could

00:33:23,560 --> 00:33:29,110
have with your baseline from 0 to 100

00:33:25,750 --> 00:33:30,430
milliseconds and your canary let's say

00:33:29,110 --> 00:33:32,320
you have a hundred milliseconds where

00:33:30,430 --> 00:33:35,470
you have to wait and your canary is just

00:33:32,320 --> 00:33:37,930
by a chance always ending up on 50

00:33:35,470 --> 00:33:39,880
milliseconds so 0 plus 50 then you might

00:33:37,930 --> 00:33:41,500
think your baseline is acting worse than

00:33:39,880 --> 00:33:43,990
your canary well it's actually the other

00:33:41,500 --> 00:33:47,050
way around now here of course our

00:33:43,990 --> 00:33:49,150
metrics are are smart enough or our

00:33:47,050 --> 00:33:51,730
system is smart enough to to judge the

00:33:49,150 --> 00:33:53,200
metrics correcting so now of course it's

00:33:51,730 --> 00:33:54,670
going to roll that back I think it's

00:33:53,200 --> 00:33:56,340
already done that if you refresh your

00:33:54,670 --> 00:33:58,990
page to door only be pickled right now

00:33:56,340 --> 00:34:01,090
yeah it's so like two minutes ago it

00:33:58,990 --> 00:34:03,040
throw down all the other stuff so if I

00:34:01,090 --> 00:34:06,130
look at my my infrastructure now

00:34:03,040 --> 00:34:09,400
everything is gone again super simple

00:34:06,130 --> 00:34:11,530
automatic the blast radius as small as

00:34:09,400 --> 00:34:14,130
possible alright so that's the end of

00:34:11,530 --> 00:34:16,120
the demo let's go back to the slides so

00:34:14,130 --> 00:34:18,010
as you can see here automatic

00:34:16,120 --> 00:34:19,690
marinelle's can really help you to start

00:34:18,010 --> 00:34:23,080
testing on production and not having to

00:34:19,690 --> 00:34:24,340
have lengthy release cycles with a lot

00:34:23,080 --> 00:34:26,770
of different tests you want to run an

00:34:24,340 --> 00:34:29,590
acceptance environment and this kind of

00:34:26,770 --> 00:34:31,000
indicates this this struggle between

00:34:29,590 --> 00:34:33,610
speed and confidence that you can

00:34:31,000 --> 00:34:35,350
combine them and it's using a spin

00:34:33,610 --> 00:34:37,240
through like spinnaker office you a lot

00:34:35,350 --> 00:34:39,340
of different features to get to

00:34:37,240 --> 00:34:42,280
production fast or making sure you still

00:34:39,340 --> 00:34:44,350
have confidence if you want to know more

00:34:42,280 --> 00:34:46,630
about this then I advise you to read

00:34:44,350 --> 00:34:48,730
this book it's available on spinnaker

00:34:46,630 --> 00:34:51,040
lay your website for free it's about 75

00:34:48,730 --> 00:34:52,090
pages it's a really quick read and but

00:34:51,040 --> 00:34:54,280
it goes more in detail about all

00:34:52,090 --> 00:34:56,380
everything I've talked about today and

00:34:54,280 --> 00:34:57,280
also about the concepts behind it so if

00:34:56,380 --> 00:34:58,780
you don't want to use spinnaker you

00:34:57,280 --> 00:35:00,760
could use an order tool as well but just

00:34:58,780 --> 00:35:02,850
the concept of making sure you can

00:35:00,760 --> 00:35:05,650
actually have safety while going fast

00:35:02,850 --> 00:35:07,330
alright and if you want to see the

00:35:05,650 --> 00:35:08,530
slides they're on speaker deck you can

00:35:07,330 --> 00:35:09,940
reach me on twitter if you have any

00:35:08,530 --> 00:35:11,850
questions for the whole sprinter

00:35:09,940 --> 00:35:14,520
community you can reach us on slack

00:35:11,850 --> 00:35:16,300
stackoverflow just attack spinnaker and

00:35:14,520 --> 00:35:18,670
there's a lot of documentation on

00:35:16,300 --> 00:35:21,070
spinnaker name so if there's any more

00:35:18,670 --> 00:35:22,750
questions I suppose we're out of time

00:35:21,070 --> 00:35:25,980
but I'll be around so you can definitely

00:35:22,750 --> 00:35:25,980
ask and thanks for coming over

00:35:26,940 --> 00:35:29,360

YouTube URL: https://www.youtube.com/watch?v=LZIKzjLQBFo


