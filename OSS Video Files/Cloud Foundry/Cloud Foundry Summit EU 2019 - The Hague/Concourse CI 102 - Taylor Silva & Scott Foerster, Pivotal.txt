Title: Concourse CI 102 - Taylor Silva & Scott Foerster, Pivotal
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Concourse CI 102 - Taylor Silva & Scott Foerster, Pivotal 

Concourse CI is a general-purpose workflow automation tool. This talk, a “102” level, is for Concourse users who want to understand more about the inner workings of Concourse. Taylor and Scott will provide an overview of how Concourse components work under the hood, from the worker scheduling logic, to volume and container management on each worker, and what metrics are emitted from Concourse. They will close out with a brief overview of what improvements the Concourse core team is currently working on. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:03,720
so I just wanted to thank everyone for

00:00:02,040 --> 00:00:05,580
taking time out of your schedule today

00:00:03,720 --> 00:00:08,040
to hang out with us for thirty minutes

00:00:05,580 --> 00:00:10,469
I'm Scott Forster product manager on the

00:00:08,040 --> 00:00:12,420
pivotal concourse team and I'm Taylor

00:00:10,469 --> 00:00:14,250
I'm an engineer on the pivotal concourse

00:00:12,420 --> 00:00:16,650
team so we've called their talk

00:00:14,250 --> 00:00:18,420
concourse 102 the aim of this talk today

00:00:16,650 --> 00:00:19,980
is to perform a deeper dive in the

00:00:18,420 --> 00:00:22,080
underlining mechanics of how Congress

00:00:19,980 --> 00:00:23,670
works peek under the hood if you will

00:00:22,080 --> 00:00:25,080
it's our assumption that you know what

00:00:23,670 --> 00:00:28,019
concourse is already you can probably

00:00:25,080 --> 00:00:29,550
create pipelines of the fly CLI you've

00:00:28,019 --> 00:00:31,500
interacted and are familiar with the web

00:00:29,550 --> 00:00:32,790
UI you've probably been stuck in

00:00:31,500 --> 00:00:34,829
situations where you've needed to scale

00:00:32,790 --> 00:00:36,899
your workers or even submitted issues or

00:00:34,829 --> 00:00:38,160
PRS the concourse repo and if not well

00:00:36,899 --> 00:00:39,960
you're stuck with us for 30 minutes

00:00:38,160 --> 00:00:41,550
today but it'd be great

00:00:39,960 --> 00:00:43,200
well we hope this talk is informative

00:00:41,550 --> 00:00:45,149
for everyone what we're gonna discuss

00:00:43,200 --> 00:00:47,460
today will probably resonate most with

00:00:45,149 --> 00:00:49,230
engineers using or operating con courses

00:00:47,460 --> 00:00:50,850
that are planning on to use concourse

00:00:49,230 --> 00:00:52,140
and scale and will find themselves in

00:00:50,850 --> 00:00:55,789
situations where understanding the

00:00:52,140 --> 00:00:55,789
mechanics behind concourse are essential

00:00:58,219 --> 00:01:01,969
so before we get going we just wanted to

00:01:00,530 --> 00:01:04,009
do a quick agenda before we dive into

00:01:01,969 --> 00:01:06,290
things we're gonna start by giving a

00:01:04,009 --> 00:01:07,340
brief overview of what concours is then

00:01:06,290 --> 00:01:09,470
we're gonna spend the bulk of our time

00:01:07,340 --> 00:01:11,720
performing a comprehensive overview of

00:01:09,470 --> 00:01:13,909
the two main components of concours the

00:01:11,720 --> 00:01:15,200
web and the worker finally we'll give

00:01:13,909 --> 00:01:17,180
some tips and best practices around

00:01:15,200 --> 00:01:19,310
monitoring concours and I put a question

00:01:17,180 --> 00:01:21,500
mark under questions we hope there's

00:01:19,310 --> 00:01:22,490
time for questions but probably not so

00:01:21,500 --> 00:01:23,960
we're gonna Lloyd or in the hallway

00:01:22,490 --> 00:01:25,460
after this if anyone wants to talk to us

00:01:23,960 --> 00:01:27,380
happy to chat for a little bit

00:01:25,460 --> 00:01:30,130
so with that housekeeping out of the way

00:01:27,380 --> 00:01:30,130
let's dive into things

00:01:33,740 --> 00:01:37,560
okay so we'd like to preface this talk

00:01:36,120 --> 00:01:39,180
by letting you know that we don't have

00:01:37,560 --> 00:01:41,490
enough time to talk about everything

00:01:39,180 --> 00:01:42,690
everything plenty of details here have

00:01:41,490 --> 00:01:44,580
been left out for the sake of time and

00:01:42,690 --> 00:01:45,780
to keep things simple everything is

00:01:44,580 --> 00:01:48,090
important but you know we had to

00:01:45,780 --> 00:01:49,260
prioritize at this time I'd also like to

00:01:48,090 --> 00:01:50,820
mention that although a lot of the

00:01:49,260 --> 00:01:52,290
concepts we're talking about today can

00:01:50,820 --> 00:01:54,270
be applied to earlier versions of

00:01:52,290 --> 00:01:55,950
concours our talk is going to be based

00:01:54,270 --> 00:01:58,820
around the latest OSS version a version

00:01:55,950 --> 00:01:58,820
5.5 Oh

00:02:00,990 --> 00:02:04,430
so

00:02:02,590 --> 00:02:06,860
what is concours

00:02:04,430 --> 00:02:08,540
if you go to conquer CI homepage you'll

00:02:06,860 --> 00:02:10,369
probably see concourse described as an

00:02:08,540 --> 00:02:11,960
open-source continuous thing doer

00:02:10,369 --> 00:02:13,790
well this description is completely

00:02:11,960 --> 00:02:16,040
valid it may be a wee bit of an

00:02:13,790 --> 00:02:17,630
oversimplification to most users

00:02:16,040 --> 00:02:20,330
concourse looks a lot like the image on

00:02:17,630 --> 00:02:22,310
the screen a series of resources tasks

00:02:20,330 --> 00:02:23,540
and jobs created via llamó files that

00:02:22,310 --> 00:02:26,240
are sequence together to create

00:02:23,540 --> 00:02:27,440
pipelines for automation the components

00:02:26,240 --> 00:02:29,000
that make up pipelines are configured

00:02:27,440 --> 00:02:31,520
through the fly CLI and visualized to

00:02:29,000 --> 00:02:33,050
the web UI is seen above well because of

00:02:31,520 --> 00:02:35,030
the age of this talk we won't be getting

00:02:33,050 --> 00:02:36,260
into what resources tasks and jobs are

00:02:35,030 --> 00:02:37,850
we assume you know what those are

00:02:36,260 --> 00:02:39,640
already it is important to emphasize

00:02:37,850 --> 00:02:41,840
that concourse is container first

00:02:39,640 --> 00:02:43,100
everything in concourse runs in

00:02:41,840 --> 00:02:46,030
containers ensuring a clean environment

00:02:43,100 --> 00:02:46,030
on every run

00:02:46,999 --> 00:02:49,930
concur

00:02:47,860 --> 00:02:51,610
sis of three main components the web

00:02:49,930 --> 00:02:52,240
node the worker and the Postgres

00:02:51,610 --> 00:02:54,280
database

00:02:52,240 --> 00:02:56,110
given that Concours is stateless in

00:02:54,280 --> 00:02:57,940
nature you can spin up as many web nodes

00:02:56,110 --> 00:03:00,100
and workers as you want because state is

00:02:57,940 --> 00:03:01,390
kept within the database as I mentioned

00:03:00,100 --> 00:03:03,070
before this talk is not going to be

00:03:01,390 --> 00:03:04,930
focused on why are my TAS failing and

00:03:03,070 --> 00:03:06,400
why are my pipelines read those are

00:03:04,930 --> 00:03:07,900
issues specific to your pipeline and

00:03:06,400 --> 00:03:09,910
today we want to talk about how your

00:03:07,900 --> 00:03:11,500
pipeline is being run by Concourse and

00:03:09,910 --> 00:03:12,640
these components you'll need to under

00:03:11,500 --> 00:03:15,720
these are the components you'll need to

00:03:12,640 --> 00:03:15,720
know to understand how this works

00:03:15,750 --> 00:03:19,980
so before we begin I wanted to take a

00:03:18,240 --> 00:03:21,330
quick bird's-eye view into the web node

00:03:19,980 --> 00:03:23,790
and the worker since they will take up

00:03:21,330 --> 00:03:25,500
the the meat of this talk today the web

00:03:23,790 --> 00:03:26,850
node is the brain of Concours and it

00:03:25,500 --> 00:03:29,690
consists of everything you see here in

00:03:26,850 --> 00:03:31,920
the diagram above as well as the TSA

00:03:29,690 --> 00:03:33,930
we'll be diving further into all these

00:03:31,920 --> 00:03:35,040
concepts from the coming slides but I

00:03:33,930 --> 00:03:37,320
just wanted to give a quick bird's-eye

00:03:35,040 --> 00:03:38,490
view first the web node is the thing

00:03:37,320 --> 00:03:40,410
that ensures all your pipelines are

00:03:38,490 --> 00:03:42,060
running and cleans up the workers well

00:03:40,410 --> 00:03:44,340
know it also serves the web UI and the

00:03:42,060 --> 00:03:46,590
API I'd also like to draw special

00:03:44,340 --> 00:03:48,120
attention to the TSA the TSA essentially

00:03:46,590 --> 00:03:49,080
controls communication between the web

00:03:48,120 --> 00:03:52,090
node and the worker

00:03:49,080 --> 00:03:54,610
using SSH simple

00:03:52,090 --> 00:03:56,410
let's also do a brief overview of what

00:03:54,610 --> 00:03:58,780
the worker is the worker consists of

00:03:56,410 --> 00:04:00,940
garden baggage claim beacon and a volume

00:03:58,780 --> 00:04:02,410
and container sweeper at the highest

00:04:00,940 --> 00:04:05,050
level the workers wear container

00:04:02,410 --> 00:04:06,250
orchestration is managed so with all of

00:04:05,050 --> 00:04:07,660
that out of the way and this preamble

00:04:06,250 --> 00:04:09,459
being finished I'm gonna hand things

00:04:07,660 --> 00:04:11,290
over to Taylor to give a more detailed

00:04:09,459 --> 00:04:12,360
walkthrough of these concepts thanks

00:04:11,290 --> 00:04:15,190
Scott

00:04:12,360 --> 00:04:19,030
alright so we're gonna take a walk

00:04:15,190 --> 00:04:20,739
through a pipeline and so to help

00:04:19,030 --> 00:04:22,750
explain some parts of concourse we're

00:04:20,739 --> 00:04:25,510
going to use the first part of this

00:04:22,750 --> 00:04:27,550
pipeline here specifically we're going

00:04:25,510 --> 00:04:29,889
to take a look at the first job in

00:04:27,550 --> 00:04:32,889
detail to help explain certain parts of

00:04:29,889 --> 00:04:34,590
concourse we're also going to think a

00:04:32,889 --> 00:04:36,520
little bit about the resources and

00:04:34,590 --> 00:04:38,080
eventually we'll move on from this

00:04:36,520 --> 00:04:40,450
pipeline to discuss some of the other

00:04:38,080 --> 00:04:41,950
remaining components that we will not

00:04:40,450 --> 00:04:45,639
that we're not able to explain just by

00:04:41,950 --> 00:04:48,250
looking at this pipeline so the first

00:04:45,639 --> 00:04:50,770
question we'd like to answer is what

00:04:48,250 --> 00:04:53,320
happens when you set a pipeline you're

00:04:50,770 --> 00:04:56,110
in your terminal you do fly Dashti your

00:04:53,320 --> 00:04:58,960
targets set pipeline and what starts

00:04:56,110 --> 00:05:01,120
happening on concourse well when you

00:04:58,960 --> 00:05:04,240
first create your pipeline it's actually

00:05:01,120 --> 00:05:06,250
paused so at this point concourse isn't

00:05:04,240 --> 00:05:08,710
going to commit any resources to your

00:05:06,250 --> 00:05:10,930
pipeline no containers get created no

00:05:08,710 --> 00:05:13,120
volumes are created and once the

00:05:10,930 --> 00:05:14,260
pipeline is actually unpause this will

00:05:13,120 --> 00:05:16,200
never be the case again there will

00:05:14,260 --> 00:05:18,910
always be some artifacts lying around

00:05:16,200 --> 00:05:20,710
but for now you've just create your

00:05:18,910 --> 00:05:24,910
pipeline setup for the first time it's

00:05:20,710 --> 00:05:27,870
pause so let's unpause it and ask what

00:05:24,910 --> 00:05:31,360
happens when you unpause your pipeline

00:05:27,870 --> 00:05:33,820
so once your pipeline is on pause this

00:05:31,360 --> 00:05:36,039
routine called the pipeline sinker will

00:05:33,820 --> 00:05:37,810
actually notice your pipeline and it's

00:05:36,039 --> 00:05:40,330
going to create another web routine and

00:05:37,810 --> 00:05:42,400
this is happening in the web node so the

00:05:40,330 --> 00:05:44,650
pipeline thinker Caesar pipeline sees us

00:05:42,400 --> 00:05:46,310
on paused and it creates a pipeline

00:05:44,650 --> 00:05:48,620
routine

00:05:46,310 --> 00:05:51,110
and there's always one pipeline routine

00:05:48,620 --> 00:05:54,650
for each pipeline that exists in your

00:05:51,110 --> 00:05:56,810
concourse so if your concourse has ten

00:05:54,650 --> 00:05:59,350
pipelines then there are ten pipeline

00:05:56,810 --> 00:06:02,090
routines running on your web note and

00:05:59,350 --> 00:06:05,090
the pipeline routine is made up of two

00:06:02,090 --> 00:06:07,190
sub routines radar and scheduler it's

00:06:05,090 --> 00:06:09,340
essentially the job of the pipeline

00:06:07,190 --> 00:06:12,530
routine to manage these two sub routines

00:06:09,340 --> 00:06:14,690
so we'll talk about radar first because

00:06:12,530 --> 00:06:17,260
nothing happens in your pipeline if

00:06:14,690 --> 00:06:20,500
radar never runs

00:06:17,260 --> 00:06:22,750
so radars job is to check for new

00:06:20,500 --> 00:06:27,250
versions of every resource in your

00:06:22,750 --> 00:06:30,940
pipeline and it does this by creating a

00:06:27,250 --> 00:06:32,920
scanner routine and increase the scanner

00:06:30,940 --> 00:06:35,830
routine for each resource configuration

00:06:32,920 --> 00:06:37,900
in your pipeline so one resource

00:06:35,830 --> 00:06:41,760
configuration in your pipeline is equal

00:06:37,900 --> 00:06:41,760
to one scanner that radar

00:06:41,980 --> 00:06:47,800
so how many resource configurations do

00:06:44,800 --> 00:06:50,920
we have in that sample pipeline that we

00:06:47,800 --> 00:06:52,780
showed earlier so here's the

00:06:50,920 --> 00:06:55,840
configuration of it you don't need to

00:06:52,780 --> 00:06:57,040
try and read it but just looking at this

00:06:55,840 --> 00:06:59,650
we can figure out how many resource

00:06:57,040 --> 00:07:01,480
configurations there are so a resource

00:06:59,650 --> 00:07:04,320
configuration is anything that falls

00:07:01,480 --> 00:07:07,780
under the resources and resource types

00:07:04,320 --> 00:07:10,660
sections in your pipeline configuration

00:07:07,780 --> 00:07:14,290
so we can see here that we have four

00:07:10,660 --> 00:07:17,470
items under resources and a fifth item

00:07:14,290 --> 00:07:20,650
under resource types so our pipeline has

00:07:17,470 --> 00:07:23,560
five resource configurations

00:07:20,650 --> 00:07:26,500
so therefore radar is going to start 5

00:07:23,560 --> 00:07:29,580
scanner routines 1 scanner routine for

00:07:26,500 --> 00:07:29,580
each resource configuration

00:07:29,880 --> 00:07:33,099
now

00:07:31,569 --> 00:07:35,080
the scanner doing we have a bunch of

00:07:33,099 --> 00:07:38,229
scanner routine started what are they

00:07:35,080 --> 00:07:42,110
going to do so the scanner is going to

00:07:38,229 --> 00:07:44,479
create a check container on each worker

00:07:42,110 --> 00:07:45,940
so how are these check containers made

00:07:44,479 --> 00:07:50,050
now

00:07:45,940 --> 00:07:51,280
so the scanner is going to create a

00:07:50,050 --> 00:07:55,450
check container by first creating

00:07:51,280 --> 00:07:58,430
volumes these scanner the scan routine

00:07:55,450 --> 00:08:01,550
does this by talking to baggage claim

00:07:58,430 --> 00:08:03,770
and each check container is going to

00:08:01,550 --> 00:08:06,620
consist of one resource hype volume and

00:08:03,770 --> 00:08:08,479
one container volume so we have two

00:08:06,620 --> 00:08:12,039
volumes right now one resource type

00:08:08,479 --> 00:08:12,039
volume and one container volume

00:08:12,320 --> 00:08:16,590
now where did these volumes come from

00:08:14,880 --> 00:08:18,060
because they don't just magically appear

00:08:16,590 --> 00:08:20,540
on our worker or work rats to get them

00:08:18,060 --> 00:08:20,540
from somewhere

00:08:22,800 --> 00:08:28,509
the 10 volumes come from the workers

00:08:25,930 --> 00:08:31,360
file system so container volumes come

00:08:28,509 --> 00:08:33,130
based on the workers file system so that

00:08:31,360 --> 00:08:35,140
those will contain files like the CA

00:08:33,130 --> 00:08:38,080
certificates that's what's going to be

00:08:35,140 --> 00:08:40,180
in these container volume and the

00:08:38,080 --> 00:08:42,459
resource type volumes come from two

00:08:40,180 --> 00:08:46,510
places some come bundled with the

00:08:42,459 --> 00:08:47,980
concourse binary so these are volumes

00:08:46,510 --> 00:08:50,620
based off of the base resource types

00:08:47,980 --> 00:08:53,080
that come with concourse and then others

00:08:50,620 --> 00:08:55,660
are downloaded either from docker hub or

00:08:53,080 --> 00:08:58,450
from an external image registry these

00:08:55,660 --> 00:09:01,070
are typically the volumes that would

00:08:58,450 --> 00:09:02,959
come from the resource type section

00:09:01,070 --> 00:09:05,000
all right now back to our check

00:09:02,959 --> 00:09:06,769
containers so we have those two wrongs

00:09:05,000 --> 00:09:10,509
made we know with where they came from

00:09:06,769 --> 00:09:12,829
and now scanner can tell garden to

00:09:10,509 --> 00:09:15,410
create a container based off those two

00:09:12,829 --> 00:09:17,930
volumes that we that we have or start

00:09:15,410 --> 00:09:23,329
three now actually because we have two

00:09:17,930 --> 00:09:24,769
containers one resource so scanner toss

00:09:23,329 --> 00:09:28,540
garden tells it to create that container

00:09:24,769 --> 00:09:32,000
and we create that one check container

00:09:28,540 --> 00:09:34,430
so now scanner is going to repeat this

00:09:32,000 --> 00:09:38,420
process until we have a bunch of volumes

00:09:34,430 --> 00:09:40,880
and containers so remember if we had 5

00:09:38,420 --> 00:09:42,920
scanner routines running therefore we

00:09:40,880 --> 00:09:45,709
end up with 5 check containers and

00:09:42,920 --> 00:09:48,190
Isildur multiple volumes for each of

00:09:45,709 --> 00:09:48,190
those containers

00:09:48,760 --> 00:09:55,670
now how long do our check containers

00:09:52,399 --> 00:09:59,510
exist for so check containers exist for

00:09:55,670 --> 00:10:04,610
one hour and after one hour they're then

00:09:59,510 --> 00:10:07,130
deleted and recreated so why do you

00:10:04,610 --> 00:10:09,200
check can just exist for one hour so

00:10:07,130 --> 00:10:12,140
there are two reasons that they stay

00:10:09,200 --> 00:10:14,120
around for only one hour or why Conquest

00:10:12,140 --> 00:10:18,380
doesn't delete them right away after

00:10:14,120 --> 00:10:21,290
creating them and using them the first

00:10:18,380 --> 00:10:24,860
reason is that resources are by default

00:10:21,290 --> 00:10:27,529
checked every minute so Concours doesn't

00:10:24,860 --> 00:10:29,540
want to waste time every minute having

00:10:27,529 --> 00:10:32,360
to go through this container creation

00:10:29,540 --> 00:10:35,600
process so Concours will create the

00:10:32,360 --> 00:10:37,550
check container once and it'll leave it

00:10:35,600 --> 00:10:40,070
around for an hour so that way you can

00:10:37,550 --> 00:10:41,490
just continue to read reuse it over the

00:10:40,070 --> 00:10:44,940
hour

00:10:41,490 --> 00:10:48,270
and the second reason that a check

00:10:44,940 --> 00:10:50,339
container lasts only one hour is so one

00:10:48,270 --> 00:10:51,990
worker doesn't get overloaded with

00:10:50,339 --> 00:10:55,800
having all these check containers

00:10:51,990 --> 00:10:58,200
persisted on it for forever so the one

00:10:55,800 --> 00:11:00,570
hour lifetime gives Concours a chance to

00:10:58,200 --> 00:11:02,820
every so often rebalance the check

00:11:00,570 --> 00:11:06,440
containers across the workers based on

00:11:02,820 --> 00:11:08,720
whatever their current states may be and

00:11:06,440 --> 00:11:11,010
one last thing about check containers

00:11:08,720 --> 00:11:12,930
that's important to note is that check

00:11:11,010 --> 00:11:15,029
containers are essentially your minimum

00:11:12,930 --> 00:11:17,010
workloads so when you have your

00:11:15,029 --> 00:11:18,990
pipelines all on paused and even if no

00:11:17,010 --> 00:11:20,940
job is running the check containers

00:11:18,990 --> 00:11:22,770
themselves are always always running

00:11:20,940 --> 00:11:27,410
so check containers become your minimum

00:11:22,770 --> 00:11:31,789
workload across your Concours cluster

00:11:27,410 --> 00:11:35,179
all right back to our sample pipeline so

00:11:31,789 --> 00:11:38,149
our check containers are created they

00:11:35,179 --> 00:11:41,599
ran and we found some new versions from

00:11:38,149 --> 00:11:44,720
these so what happens next

00:11:41,599 --> 00:11:47,720
now that we have these new versions so

00:11:44,720 --> 00:11:49,579
the scheduler starts up the scheduler

00:11:47,720 --> 00:11:51,649
was actually always running and the

00:11:49,579 --> 00:11:55,309
scheduler again is another routine

00:11:51,649 --> 00:11:56,479
that's running in the web node and but

00:11:55,309 --> 00:11:59,059
the scheduler had nothing to do

00:11:56,479 --> 00:12:00,589
previously when there are no virgins so

00:11:59,059 --> 00:12:03,939
it only has stuff to do once there are

00:12:00,589 --> 00:12:07,099
new versions that have been discovered

00:12:03,939 --> 00:12:09,259
so let's say that a new version was

00:12:07,099 --> 00:12:11,089
found by our app resource and our app

00:12:09,259 --> 00:12:13,129
resource is just checking a github repo

00:12:11,089 --> 00:12:15,229
looking for new commits and every time

00:12:13,129 --> 00:12:19,399
there's a new commit that becomes a new

00:12:15,229 --> 00:12:21,589
version in Concourse so the family new

00:12:19,399 --> 00:12:24,679
version and that means scheduler can now

00:12:21,589 --> 00:12:27,379
queue up a job for two of a build for

00:12:24,679 --> 00:12:29,659
our first test job there since now

00:12:27,379 --> 00:12:32,209
there's a ballot input for it and the

00:12:29,659 --> 00:12:34,729
scheduler does this by starting a build

00:12:32,209 --> 00:12:37,369
routine and again this is a builder team

00:12:34,729 --> 00:12:39,589
just on the web node so a build routine

00:12:37,369 --> 00:12:43,159
is what actually runs your job it looks

00:12:39,589 --> 00:12:46,699
at your job plan and it execute each

00:12:43,159 --> 00:12:49,669
step in your job plan and it does this

00:12:46,699 --> 00:12:53,659
by creating containers and volumes

00:12:49,669 --> 00:12:55,939
similar to the scanner and the building

00:12:53,659 --> 00:12:58,189
routine is what's monitoring the entire

00:12:55,939 --> 00:13:00,289
run of whatever builds it was told to

00:12:58,189 --> 00:13:02,569
run and it's long and all that output

00:13:00,289 --> 00:13:05,299
that the job is generating and putting

00:13:02,569 --> 00:13:07,110
that into the database so that's its

00:13:05,299 --> 00:13:10,510
main job

00:13:07,110 --> 00:13:14,800
so let's find out how a build routine

00:13:10,510 --> 00:13:17,500
executes a job so the bill routine will

00:13:14,800 --> 00:13:19,630
see that our job has two steps and up

00:13:17,500 --> 00:13:22,240
here on the screen we just have the

00:13:19,630 --> 00:13:25,990
basic job plan that the build routine

00:13:22,240 --> 00:13:28,930
would have loaded into memory so we can

00:13:25,990 --> 00:13:30,610
see that we have a get step and we have

00:13:28,930 --> 00:13:35,740
a task step so these are the two steps

00:13:30,610 --> 00:13:38,320
in our build plan here and the build

00:13:35,740 --> 00:13:40,980
routine will start the job by of course

00:13:38,320 --> 00:13:44,020
running the get step first

00:13:40,980 --> 00:13:45,670
so the Builder team similar to scanner

00:13:44,020 --> 00:13:49,090
it's going to talk to baggage claim

00:13:45,670 --> 00:13:50,950
first and have you create a resource

00:13:49,090 --> 00:13:54,460
following you the resource volume is

00:13:50,950 --> 00:13:56,350
gonna be where some of the data from

00:13:54,460 --> 00:13:58,600
this get step is going to be output it

00:13:56,350 --> 00:14:02,500
so it creates basically an empty

00:13:58,600 --> 00:14:06,180
resource volume to start and then the

00:14:02,500 --> 00:14:09,370
Builder routine will talk to garden and

00:14:06,180 --> 00:14:11,830
it will happen create a container with

00:14:09,370 --> 00:14:13,660
that empty resource volume and it's

00:14:11,830 --> 00:14:16,840
going to reuse one of the resource type

00:14:13,660 --> 00:14:19,590
volumes that was used previously by

00:14:16,840 --> 00:14:23,020
scanner and the check containers and

00:14:19,590 --> 00:14:27,850
then a script will be executed inside

00:14:23,020 --> 00:14:29,770
this get container and the output will

00:14:27,850 --> 00:14:32,140
be saved in that empty resource volume

00:14:29,770 --> 00:14:33,250
which is now no longer empty and that's

00:14:32,140 --> 00:14:36,640
pretty much how they get step is

00:14:33,250 --> 00:14:41,920
executed so the outputs of this specific

00:14:36,640 --> 00:14:45,190
get step is just a get clone of the repo

00:14:41,920 --> 00:14:47,260
that was in that resource so all of our

00:14:45,190 --> 00:14:50,970
source code and our tasks from this git

00:14:47,260 --> 00:14:50,970
repo are now in this resource volume

00:14:51,330 --> 00:14:55,320
alright and with that we're almost done

00:14:54,029 --> 00:14:57,230
ran the job halfway there

00:14:55,320 --> 00:15:01,500
there's only two steps in this job and

00:14:57,230 --> 00:15:04,529
the last step is the task step so how is

00:15:01,500 --> 00:15:06,930
the task type executed so every task tip

00:15:04,529 --> 00:15:09,630
has its own configuration so this is the

00:15:06,930 --> 00:15:11,459
configuration for our task step so of

00:15:09,630 --> 00:15:13,380
course the build routine is going to

00:15:11,459 --> 00:15:16,529
have to go through this task

00:15:13,380 --> 00:15:19,649
configuration to know how to run it

00:15:16,529 --> 00:15:22,799
so the goal of this specific task is to

00:15:19,649 --> 00:15:25,530
just run go test so run some unit tests

00:15:22,799 --> 00:15:28,050
that we have inside our source code

00:15:25,530 --> 00:15:30,300
and the first thing the build routine is

00:15:28,050 --> 00:15:33,360
going to do is figure out what type of

00:15:30,300 --> 00:15:35,550
worker platform does this task need to

00:15:33,360 --> 00:15:38,160
run on whether it's Linux Windows Darwin

00:15:35,550 --> 00:15:42,510
it'll find that worker and then it'll

00:15:38,160 --> 00:15:46,170
continue going to the task plan here so

00:15:42,510 --> 00:15:48,570
next the building routine will check

00:15:46,170 --> 00:15:51,000
what's container the - we run it because

00:15:48,570 --> 00:15:53,580
you can tell Concours run my task in

00:15:51,000 --> 00:15:56,190
this specific container so here we're

00:15:53,580 --> 00:15:58,200
just using the Galang container image

00:15:56,190 --> 00:16:01,910
and again by default this will be

00:15:58,200 --> 00:16:01,910
downloaded from docker up

00:16:02,830 --> 00:16:07,280
so yeah it will be down low from crib or

00:16:05,750 --> 00:16:11,570
it can be downloaded from an external

00:16:07,280 --> 00:16:13,760
some other image registry as well point

00:16:11,570 --> 00:16:15,680
thing to also note here is it's

00:16:13,760 --> 00:16:17,930
generally in your interest to try and

00:16:15,680 --> 00:16:20,030
keep these container images as small as

00:16:17,930 --> 00:16:22,400
possible we have seen people make really

00:16:20,030 --> 00:16:24,800
large five gigabyte docker images and

00:16:22,400 --> 00:16:26,780
every time concourse has to go and

00:16:24,800 --> 00:16:28,670
download this docker image it does cache

00:16:26,780 --> 00:16:30,530
it of course but that means it's taking

00:16:28,670 --> 00:16:32,930
it up disk space on your worker and

00:16:30,530 --> 00:16:36,170
every so often the cache will expire or

00:16:32,930 --> 00:16:37,910
there will be a new image to download

00:16:36,170 --> 00:16:40,430
and every time that happens means you

00:16:37,910 --> 00:16:42,290
have to download some large a large

00:16:40,430 --> 00:16:44,600
docker image and save on your workers so

00:16:42,290 --> 00:16:46,610
to keep things speedy and lean it's

00:16:44,600 --> 00:16:50,480
generally in your interest try and keep

00:16:46,610 --> 00:16:52,100
those docker images small alright so

00:16:50,480 --> 00:16:54,560
what does that look like worker look

00:16:52,100 --> 00:16:58,940
like now after fetching that docker

00:16:54,560 --> 00:17:02,690
image for this task so after downloading

00:16:58,940 --> 00:17:06,949
damage from darker up there the worker

00:17:02,690 --> 00:17:08,780
will now have to resource files so it

00:17:06,949 --> 00:17:11,449
just made a second one based off of that

00:17:08,780 --> 00:17:15,070
docker image so docker images just

00:17:11,449 --> 00:17:18,260
become resource volumes on your worker

00:17:15,070 --> 00:17:21,500
so now our tasks step has that container

00:17:18,260 --> 00:17:24,070
image and the last thing it needs is its

00:17:21,500 --> 00:17:26,990
input volumes so these are volumes that

00:17:24,070 --> 00:17:28,940
existed from previous steps in your job

00:17:26,990 --> 00:17:31,400
so typically these are satisfied by get

00:17:28,940 --> 00:17:33,500
steps and they can be satisfied from the

00:17:31,400 --> 00:17:36,230
output of other tasks as well but in

00:17:33,500 --> 00:17:38,060
this case the only input azar is the app

00:17:36,230 --> 00:17:41,830
volume that we want and that came from

00:17:38,060 --> 00:17:41,830
the previous get step

00:17:42,530 --> 00:17:48,920
so on our work there that means that the

00:17:45,900 --> 00:17:51,900
Builder team can now talk to garden and

00:17:48,920 --> 00:17:54,240
have a created container using the

00:17:51,900 --> 00:17:56,730
docker image volume and the app volume

00:17:54,240 --> 00:17:58,200
that our source code contains so it's

00:17:56,730 --> 00:18:00,930
going to use the to resource volumes

00:17:58,200 --> 00:18:02,820
that we have on that worker here that

00:18:00,930 --> 00:18:05,730
first one contains the app source code

00:18:02,820 --> 00:18:08,700
and the second one is the file system of

00:18:05,730 --> 00:18:13,410
the docker image that came from docker

00:18:08,700 --> 00:18:15,590
hub so if the container created the

00:18:13,410 --> 00:18:18,750
build routine can then run go test

00:18:15,590 --> 00:18:20,490
inside your container and the build

00:18:18,750 --> 00:18:23,780
routine will simply capture the output

00:18:20,490 --> 00:18:23,780
of whatever that was

00:18:24,620 --> 00:18:29,120
with that the Builder Tina has finished

00:18:26,210 --> 00:18:32,240
running the entire job plan so that's

00:18:29,120 --> 00:18:34,460
the entire job now if your job was

00:18:32,240 --> 00:18:36,470
successful then of course the pipeline

00:18:34,460 --> 00:18:38,630
will continue running this process of

00:18:36,470 --> 00:18:40,790
scheduler checking what needs to be run

00:18:38,630 --> 00:18:42,860
creating build routines simply continues

00:18:40,790 --> 00:18:48,650
and keeps going over and over again as

00:18:42,860 --> 00:18:50,240
your entire pipeline runs and another

00:18:48,650 --> 00:18:53,270
another thing to note about successful

00:18:50,240 --> 00:18:57,020
jobs is that garbage collection will

00:18:53,270 --> 00:18:59,140
actually eventually delete the get and

00:18:57,020 --> 00:19:01,429
task containers that were created during

00:18:59,140 --> 00:19:03,440
entering this job they don't get

00:19:01,429 --> 00:19:06,200
immediately deleted they get deleted a

00:19:03,440 --> 00:19:08,840
little shortly after depends how garbage

00:19:06,200 --> 00:19:10,100
collector is is configured but we'll get

00:19:08,840 --> 00:19:14,059
into that a little bit more later on

00:19:10,100 --> 00:19:16,700
when we talk about garbage collector all

00:19:14,059 --> 00:19:18,530
right and so in general if your jobs are

00:19:16,700 --> 00:19:20,630
passing you should see something like

00:19:18,530 --> 00:19:22,700
like this if you're tracking metrics on

00:19:20,630 --> 00:19:25,160
your cluster you'll see as you upstart

00:19:22,700 --> 00:19:29,090
that you'll see the number of containers

00:19:25,160 --> 00:19:30,830
and volumes slowly increasing on on your

00:19:29,090 --> 00:19:32,240
workers and then it will probably peak

00:19:30,830 --> 00:19:34,370
for some time as those jobs running

00:19:32,240 --> 00:19:37,010
depending on how long the containers

00:19:34,370 --> 00:19:39,140
need to be around for until the task is

00:19:37,010 --> 00:19:40,429
complete and then as they get garbage

00:19:39,140 --> 00:19:43,490
collected you should see them going back

00:19:40,429 --> 00:19:46,960
down so overall this is a sign of a

00:19:43,490 --> 00:19:46,960
healthy concourse cluster

00:19:47,270 --> 00:19:53,550
now what if your job fails so four

00:19:51,270 --> 00:19:56,640
failed jobs concours keeps the

00:19:53,550 --> 00:19:59,840
containers and volumes around it does

00:19:56,640 --> 00:20:02,430
not delete them so if your job fails the

00:19:59,840 --> 00:20:06,030
containers and volumes from that from

00:20:02,430 --> 00:20:09,350
that job will still be there so why does

00:20:06,030 --> 00:20:11,730
concours keep the containers and volumes

00:20:09,350 --> 00:20:14,370
so Congress keeps the containers and

00:20:11,730 --> 00:20:17,210
volumes because Congress doesn't know

00:20:14,370 --> 00:20:19,380
when people will be able to debug them

00:20:17,210 --> 00:20:23,340
this could have happened on a Friday

00:20:19,380 --> 00:20:25,320
night or Saturday morning and you're

00:20:23,340 --> 00:20:27,840
probably not gonna be checking your your

00:20:25,320 --> 00:20:29,960
jobs or your pipelines on the weekend at

00:20:27,840 --> 00:20:32,700
least we hope that you're not so

00:20:29,960 --> 00:20:34,170
Congress will just leave them around so

00:20:32,700 --> 00:20:37,320
that way a Monday morning you can come

00:20:34,170 --> 00:20:40,710
in and you can check and see what

00:20:37,320 --> 00:20:43,830
happened why your wire jobs failed so

00:20:40,710 --> 00:20:45,960
that's the main reason why Congress will

00:20:43,830 --> 00:20:47,430
keep your containers and volumes around

00:20:45,960 --> 00:20:49,230
we don't want there to be any rush to

00:20:47,430 --> 00:20:51,300
have to look at your pipelines figure

00:20:49,230 --> 00:20:53,010
out why they failed before containers

00:20:51,300 --> 00:20:54,540
start disappearing on you the containers

00:20:53,010 --> 00:20:58,980
should never disappear if your job

00:20:54,540 --> 00:21:02,010
failed alright so with this we're going

00:20:58,980 --> 00:21:03,510
to leave our example pipeline here with

00:21:02,010 --> 00:21:05,100
the one job passed and we're going to

00:21:03,510 --> 00:21:07,830
talk about some of the remaining

00:21:05,100 --> 00:21:09,210
components in the web note and those

00:21:07,830 --> 00:21:12,540
last few components are at the bill

00:21:09,210 --> 00:21:15,240
tracker the build reaper and the garbage

00:21:12,540 --> 00:21:17,540
collector so first up is the bill

00:21:15,240 --> 00:21:17,540
tracker

00:21:22,080 --> 00:21:28,750
so what does the bill tracker do so the

00:21:26,950 --> 00:21:34,090
bill tracker just starts build routines

00:21:28,750 --> 00:21:35,770
just like the scheduler so why do we

00:21:34,090 --> 00:21:39,309
need to build tracker then if it's doing

00:21:35,770 --> 00:21:41,170
exactly what the scheduler does so the

00:21:39,309 --> 00:21:43,510
scheduler is already at creating

00:21:41,170 --> 00:21:44,740
routines and the reason we have to build

00:21:43,510 --> 00:21:48,880
trap the build

00:21:44,740 --> 00:21:53,290
tracker is so it can save any orphan

00:21:48,880 --> 00:21:54,910
bills now what's an orphan bill so let's

00:21:53,290 --> 00:21:57,190
say scheduler started at Build routine

00:21:54,910 --> 00:21:59,830
as it normally does and it's running our

00:21:57,190 --> 00:22:02,230
test job so you can see there but then

00:21:59,830 --> 00:22:05,190
something happens like there's a

00:22:02,230 --> 00:22:08,890
networking issue or the entire web note

00:22:05,190 --> 00:22:12,040
goes down the underlying VM is just gone

00:22:08,890 --> 00:22:13,570
for some reason so basically if

00:22:12,040 --> 00:22:16,120
something happens where the build

00:22:13,570 --> 00:22:18,750
routine that was tracking that tests job

00:22:16,120 --> 00:22:21,670
if it loses connection with that worker

00:22:18,750 --> 00:22:23,650
this results in an orphan built

00:22:21,670 --> 00:22:25,570
essentially because I've at this point

00:22:23,650 --> 00:22:30,820
the build routine that was running would

00:22:25,570 --> 00:22:32,950
exit so yeah now we have a job running

00:22:30,820 --> 00:22:36,250
on a worker and there's no build routine

00:22:32,950 --> 00:22:37,780
attached to it so this is where the

00:22:36,250 --> 00:22:40,059
build tracker now comes in

00:22:37,780 --> 00:22:42,670
so once whatever issue was resolved well

00:22:40,059 --> 00:22:44,950
there was networking or the web no came

00:22:42,670 --> 00:22:46,900
down and it finally comes back comes

00:22:44,950 --> 00:22:50,020
back up the build tracker is able to

00:22:46,900 --> 00:22:51,970
start a new build routine and it does

00:22:50,020 --> 00:22:54,010
this by looking the database for any

00:22:51,970 --> 00:22:56,620
orphan builds because again concourse

00:22:54,010 --> 00:22:58,150
saves all stayed in the database so the

00:22:56,620 --> 00:23:00,340
build tracker will check the database

00:22:58,150 --> 00:23:02,950
for any old friend builds and when it

00:23:00,340 --> 00:23:05,559
finds one it'll simply start a new build

00:23:02,950 --> 00:23:07,210
routine for that job and just like the

00:23:05,559 --> 00:23:09,190
build tractor the build routine can just

00:23:07,210 --> 00:23:12,070
look in the database to find out where

00:23:09,190 --> 00:23:14,710
the job was left off and then everything

00:23:12,070 --> 00:23:16,120
just continues as normal so that's

00:23:14,710 --> 00:23:17,650
pretty much it for the built build

00:23:16,120 --> 00:23:21,429
tracker it just starts building routines

00:23:17,650 --> 00:23:23,429
that way you never lose whatever was

00:23:21,429 --> 00:23:26,219
happening on your workers

00:23:23,429 --> 00:23:29,760
so the next module that we'll talk about

00:23:26,219 --> 00:23:33,340
is the build reaper

00:23:29,760 --> 00:23:36,580
so the building Reapers job is to delete

00:23:33,340 --> 00:23:38,050
logs that come from builds and by

00:23:36,580 --> 00:23:40,600
default conquerors actually doesn't

00:23:38,050 --> 00:23:42,160
delete any builds so yeah we don't want

00:23:40,600 --> 00:23:45,220
to delete something that you might want

00:23:42,160 --> 00:23:46,870
to keep around so though Reaper does

00:23:45,220 --> 00:23:49,540
nothing and if you want to do something

00:23:46,870 --> 00:23:51,880
you have to set a build log retention

00:23:49,540 --> 00:23:53,680
policy this can be set at the web node

00:23:51,880 --> 00:23:56,740
level so when you're deploying honkers

00:23:53,680 --> 00:23:59,200
you can say globally reap all my logs

00:23:56,740 --> 00:24:02,500
that are X days old or after X number

00:23:59,200 --> 00:24:05,680
builds across all all pipelines so that

00:24:02,500 --> 00:24:07,300
can be said the web node level users can

00:24:05,680 --> 00:24:09,220
also have control over their build

00:24:07,300 --> 00:24:10,930
retention policy so they can set it in

00:24:09,220 --> 00:24:15,040
their tasks and configuration when they

00:24:10,930 --> 00:24:17,980
create their pipelines now when should

00:24:15,040 --> 00:24:19,240
you set a build log retention policy so

00:24:17,980 --> 00:24:21,840
if you have a job that runs frequently

00:24:19,240 --> 00:24:24,970
that's typically a good candidate for

00:24:21,840 --> 00:24:27,910
something that you'll want to have it's

00:24:24,970 --> 00:24:29,770
build logs roof every so often for

00:24:27,910 --> 00:24:31,210
example we have a pipeline or one

00:24:29,770 --> 00:24:34,390
specific job in a pipeline that

00:24:31,210 --> 00:24:36,340
generates about 600 megabytes of log

00:24:34,390 --> 00:24:38,620
output and then that all gets saved on

00:24:36,340 --> 00:24:40,630
the Concours database so that's a lot of

00:24:38,620 --> 00:24:43,750
data to just be saving in the Concours

00:24:40,630 --> 00:24:45,850
database itself because it'll take a

00:24:43,750 --> 00:24:48,130
blog disk space on there so that's what

00:24:45,850 --> 00:24:50,620
one job where we actually only want to

00:24:48,130 --> 00:24:53,050
keep the most most recent bills so

00:24:50,620 --> 00:24:55,390
anything that either generates a lot of

00:24:53,050 --> 00:24:56,770
output frequently or even just whatever

00:24:55,390 --> 00:24:59,800
you want to run at once

00:24:56,770 --> 00:25:02,440
it generates a lot of data in that one

00:24:59,800 --> 00:25:04,030
shot those are both very good reasons

00:25:02,440 --> 00:25:06,600
for why you'd want to set builds log

00:25:04,030 --> 00:25:09,880
retention policy

00:25:06,600 --> 00:25:12,910
but what if you want to keep all your

00:25:09,880 --> 00:25:14,320
logs but you know that the Concours

00:25:12,910 --> 00:25:18,040
database is probably not the best place

00:25:14,320 --> 00:25:19,690
to keep those what do you do so you can

00:25:18,040 --> 00:25:22,750
configure your concourse to output all

00:25:19,690 --> 00:25:26,260
its logs to any syslog endpoint that you

00:25:22,750 --> 00:25:28,210
can point it to so if you don't want to

00:25:26,260 --> 00:25:32,080
save all these like six hundred megabyte

00:25:28,210 --> 00:25:34,630
logs in your concourse database you can

00:25:32,080 --> 00:25:36,640
instead have conquests just straight

00:25:34,630 --> 00:25:39,010
Alice logs to some syslog endpoint and

00:25:36,640 --> 00:25:40,809
you can save it in in some other

00:25:39,010 --> 00:25:42,190
persistent data location

00:25:40,809 --> 00:25:43,830
that'll make much more sense for your

00:25:42,190 --> 00:25:46,809
logs

00:25:43,830 --> 00:25:48,759
and of course when Bill Reaper is

00:25:46,809 --> 00:25:50,559
deliver logs this is what she'll end up

00:25:48,759 --> 00:25:53,080
seeing if you go to a really old build

00:25:50,559 --> 00:25:55,539
that you don't the logs for so here this

00:25:53,080 --> 00:25:57,249
is one of the jobs that I was talking

00:25:55,539 --> 00:25:58,869
about that runs really frequently you

00:25:57,249 --> 00:26:01,119
can see it's in like the two hundred

00:25:58,869 --> 00:26:02,859
thousandth Bill's already and we haven't

00:26:01,119 --> 00:26:04,809
even had it for that long and I went and

00:26:02,859 --> 00:26:06,219
looked up the first one and it was it

00:26:04,809 --> 00:26:10,259
was reached so this is what she end up

00:26:06,219 --> 00:26:10,259
seeing when your logs have been reached

00:26:10,290 --> 00:26:15,850
all right and the last component that

00:26:13,750 --> 00:26:18,130
were will talk about is the garbage

00:26:15,850 --> 00:26:21,430
collector and the garbage collector is a

00:26:18,130 --> 00:26:25,030
two-step process the first part happens

00:26:21,430 --> 00:26:27,640
on the web node so the web node the web

00:26:25,030 --> 00:26:30,100
nose job in this process it is to figure

00:26:27,640 --> 00:26:32,440
out what containers and volumes can be

00:26:30,100 --> 00:26:34,750
deleted and it does this based on this

00:26:32,440 --> 00:26:39,340
concept of ownership so every container

00:26:34,750 --> 00:26:41,260
and volume has owners and who are these

00:26:39,340 --> 00:26:44,470
owners who can own a container and

00:26:41,260 --> 00:26:48,100
volume so ownership can come from

00:26:44,470 --> 00:26:50,800
running builds failed jobs resource

00:26:48,100 --> 00:26:52,530
caches and check containers those are

00:26:50,800 --> 00:26:55,270
essentially the main the main sources of

00:26:52,530 --> 00:26:58,480
ownership for containers and volumes and

00:26:55,270 --> 00:27:00,250
as generally as things finish so if your

00:26:58,480 --> 00:27:02,110
bills are successful that's when

00:27:00,250 --> 00:27:03,880
ownership will be released on any

00:27:02,110 --> 00:27:06,400
containers and volumes that that build

00:27:03,880 --> 00:27:08,350
rat if a job fails it retains that

00:27:06,400 --> 00:27:09,930
ownership and same thing with check

00:27:08,350 --> 00:27:13,170
containers check containers have that

00:27:09,930 --> 00:27:15,910
default one hour minimum lifetime and

00:27:13,170 --> 00:27:18,910
once that one hour is up that's simply a

00:27:15,910 --> 00:27:21,280
release of ownership and that's how the

00:27:18,910 --> 00:27:25,600
web node knows to list those containers

00:27:21,280 --> 00:27:27,900
as ready to be deleted the second part

00:27:25,600 --> 00:27:31,210
of the garbage collection process

00:27:27,900 --> 00:27:33,250
happens on the worker so the worker is

00:27:31,210 --> 00:27:36,580
the one that's responsible for actually

00:27:33,250 --> 00:27:38,890
deleting what the web node finds out to

00:27:36,580 --> 00:27:40,450
delete so the worker will be given a

00:27:38,890 --> 00:27:42,910
list of containers and volumes to delete

00:27:40,450 --> 00:27:49,020
and based on that the web note tells it

00:27:42,910 --> 00:27:52,559
to delete it so what does this look like

00:27:49,020 --> 00:27:56,309
the garbage collection process simply

00:27:52,559 --> 00:27:58,260
reaches out to the TSA server on the web

00:27:56,309 --> 00:28:00,120
node TSA is what's used to communicate

00:27:58,260 --> 00:28:02,190
and it reports what volumes and

00:28:00,120 --> 00:28:05,280
containers it currently has to the web

00:28:02,190 --> 00:28:07,830
node this information gets saved in the

00:28:05,280 --> 00:28:09,510
database and is then used by garbage

00:28:07,830 --> 00:28:13,140
collector to figure out what can be

00:28:09,510 --> 00:28:14,640
deleted and then the garbage collector

00:28:13,140 --> 00:28:16,470
on the web node will save the list of

00:28:14,640 --> 00:28:19,500
containers of volumes to delete back

00:28:16,470 --> 00:28:23,400
from the database and as a response to

00:28:19,500 --> 00:28:24,660
that initial request from the worker the

00:28:23,400 --> 00:28:26,309
work will then delete the containers of

00:28:24,660 --> 00:28:27,030
volumes and that's the garbage

00:28:26,309 --> 00:28:28,920
collection process

00:28:27,030 --> 00:28:31,590
I'm going to end it back to Scott now

00:28:28,920 --> 00:28:33,660
who will wrap things up episode before

00:28:31,590 --> 00:28:35,670
we got out of here I just wanted to

00:28:33,660 --> 00:28:38,070
briefly touch on monitoring your

00:28:35,670 --> 00:28:39,750
concourse as it's very important so we

00:28:38,070 --> 00:28:40,950
strongly suggest setting up monitoring

00:28:39,750 --> 00:28:43,170
around your concourse deployments

00:28:40,950 --> 00:28:44,730
especially as you scale and our

00:28:43,170 --> 00:28:46,350
experienced troubleshooting an operating

00:28:44,730 --> 00:28:48,330
large concourse deployments we've seen

00:28:46,350 --> 00:28:50,309
that as your concourse grows and you

00:28:48,330 --> 00:28:53,610
begin to add multiple teams workers

00:28:50,309 --> 00:28:56,160
ATC's etc it's no longer good enough to

00:28:53,610 --> 00:28:57,480
do to basically judge your KPIs as to

00:28:56,160 --> 00:29:00,150
whether your pipeline is red or green

00:28:57,480 --> 00:29:02,100
for overall concourse health selfishly

00:29:00,150 --> 00:29:03,750
it also helps us to assist users and

00:29:02,100 --> 00:29:06,090
customers in troubleshooting when they

00:29:03,750 --> 00:29:07,590
have relevant metrics present within

00:29:06,090 --> 00:29:09,360
pivotal we managed to large scale

00:29:07,590 --> 00:29:11,280
conquests as a service deployments for

00:29:09,360 --> 00:29:13,110
internal pivots the deployments are

00:29:11,280 --> 00:29:14,670
called wings in hush house we have

00:29:13,110 --> 00:29:16,260
monitoring set up on both deployments

00:29:14,670 --> 00:29:17,910
now we're not saying what we currently

00:29:16,260 --> 00:29:19,500
measure is perfect but it should give a

00:29:17,910 --> 00:29:21,870
pretty good overview about what you

00:29:19,500 --> 00:29:24,450
could set up for monitoring for wings

00:29:21,870 --> 00:29:26,670
metrics are consumed via influx DB and

00:29:24,450 --> 00:29:28,380
displayed on a graph an adored brush

00:29:26,670 --> 00:29:29,760
house metrics are consumed via

00:29:28,380 --> 00:29:31,920
Prometheus and displayed on a graph and

00:29:29,760 --> 00:29:33,330
a dashboard and we have SL eyes an SLO

00:29:31,920 --> 00:29:35,040
is displayed on monitors through data

00:29:33,330 --> 00:29:36,690
dog we also have alerts that

00:29:35,040 --> 00:29:37,980
notifications set up to send where slack

00:29:36,690 --> 00:29:40,140
with certain thresholds or crossed

00:29:37,980 --> 00:29:41,940
there's no particular reason why we use

00:29:40,140 --> 00:29:43,500
influx in one deployment in Prometheus

00:29:41,940 --> 00:29:44,910
and the other we just think it gives us

00:29:43,500 --> 00:29:46,740
good insight into the most common ways

00:29:44,910 --> 00:29:48,660
users and customers or emitting metrics

00:29:46,740 --> 00:29:50,580
our metrics dashboard is actually

00:29:48,660 --> 00:29:52,410
currently available publicly and when

00:29:50,580 --> 00:29:54,750
you get the links lot of slides the

00:29:52,410 --> 00:29:55,920
links you'll be able to access it there

00:29:54,750 --> 00:29:57,929
or the links the slides I should say

00:29:55,920 --> 00:29:59,700
should be able to access it lots of

00:29:57,929 --> 00:30:00,790
potential disasters can be preemptively

00:29:59,700 --> 00:30:02,560
solved by having an

00:30:00,790 --> 00:30:03,760
priyad metrics approach this is

00:30:02,560 --> 00:30:05,290
something the Concours team highly

00:30:03,760 --> 00:30:07,270
suggest investing in as you scale and

00:30:05,290 --> 00:30:08,290
begin to understand more of you under

00:30:07,270 --> 00:30:11,500
the hood mechanics that we've mentioned

00:30:08,290 --> 00:30:13,180
here today so just to close up thanks so

00:30:11,500 --> 00:30:15,280
much for coming out there's a few

00:30:13,180 --> 00:30:16,930
methods to stay in touch with us you

00:30:15,280 --> 00:30:19,480
could check out the concourse CI website

00:30:16,930 --> 00:30:21,190
follow our github repo post then or

00:30:19,480 --> 00:30:23,410
discuss message board or travel the son

00:30:21,190 --> 00:30:24,400
discord once again the links this links

00:30:23,410 --> 00:30:27,810
these will be available in the slides

00:30:24,400 --> 00:30:27,810

YouTube URL: https://www.youtube.com/watch?v=H-4pvC7t2AI


