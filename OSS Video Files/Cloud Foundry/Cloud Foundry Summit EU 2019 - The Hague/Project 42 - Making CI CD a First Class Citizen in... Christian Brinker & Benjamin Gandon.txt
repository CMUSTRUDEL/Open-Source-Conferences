Title: Project 42 - Making CI CD a First Class Citizen in... Christian Brinker & Benjamin Gandon
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Project 42 - Making CI/CD a First Class Citizen in Cloud Foundry - Christian Brinker, evoila & Benjamin Gandon, Gstack 

Cloud Foundry's most significant achievement is the 'cf push'-experience which simplifies the developers life in so many ways. But at day two this experience gets lost because it gets well hidden in some CI/CD pipeline. Writing CI/CD pipelines can be hard and cumbersome.  Wouldn't it be nice to have the same experience of 'cf push' with CI/CD? But is that possible? But every CI/CD pipeline is different.&nbsp;  With buildpacks we solved the same problem for application runtimes to get 'cf push'. So why do not do the same thing with CI/CD and fully integrate it in Cloud Foundry?  In their talk Benjamin Gandon and Christian Brinker present their work on project 42, their Cloud Foundry North America Summit's hackathon winning approach, until now. They show how easily CI/CD can be made a first class citizen in Cloud Foundry and start to open the discussion around the project to the CF community. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,269 --> 00:00:12,660
welcome to our talk on what we call that

00:00:04,799 --> 00:00:14,519
the project 42 so we we won the last

00:00:12,660 --> 00:00:19,160
hackathon in Philadelphia

00:00:14,519 --> 00:00:25,140
together with question and I am Benjamin

00:00:19,160 --> 00:00:26,430
so and then let's start what is this

00:00:25,140 --> 00:00:31,980
thing

00:00:26,430 --> 00:00:34,590
project 42 so the idea behind project 42

00:00:31,980 --> 00:00:37,110
is that what's a cool about Cloud

00:00:34,590 --> 00:00:40,079
Foundry really honest it's it's about

00:00:37,110 --> 00:00:43,590
that you as a developer has your source

00:00:40,079 --> 00:00:45,870
code run it on the cloud and don't care

00:00:43,590 --> 00:00:49,079
how so the whole thing is about this CF

00:00:45,870 --> 00:00:52,770
push experience so you don't have to

00:00:49,079 --> 00:00:55,500
mingle with things like routing DNS and

00:00:52,770 --> 00:00:59,820
such stuff you only have your code push

00:00:55,500 --> 00:01:02,550
it there and be happy but on day 2 you

00:00:59,820 --> 00:01:05,189
what's left of that it's that yours as a

00:01:02,550 --> 00:01:07,590
developer pushed you don't push your

00:01:05,189 --> 00:01:09,780
code anymore it's done by the CI CD

00:01:07,590 --> 00:01:14,159
pipeline and maintaining the CSD

00:01:09,780 --> 00:01:16,580
pipeline line can be a big mess we know

00:01:14,159 --> 00:01:19,229
that problem from before when we put up

00:01:16,580 --> 00:01:21,180
application runtimes applique putting up

00:01:19,229 --> 00:01:24,180
a replication runtime by hand is really

00:01:21,180 --> 00:01:26,850
a problem you have to think about things

00:01:24,180 --> 00:01:29,340
like oh my how to configure my a tomcat

00:01:26,850 --> 00:01:31,560
server or something and how did we solve

00:01:29,340 --> 00:01:34,530
that problem in cloud foundry we put our

00:01:31,560 --> 00:01:36,990
build packs and we say we invented CF

00:01:34,530 --> 00:01:38,939
push so what would be the really next

00:01:36,990 --> 00:01:41,579
step in improving the developer's

00:01:38,939 --> 00:01:44,520
experience around cloud fairies don't

00:01:41,579 --> 00:01:48,000
think about CI CD make it commodity and

00:01:44,520 --> 00:01:49,530
don't care about that so what do you

00:01:48,000 --> 00:01:53,280
what really want is a developer is

00:01:49,530 --> 00:01:58,530
here's my code repo deliver it on the

00:01:53,280 --> 00:02:00,600
cloud for me I do not care how that's

00:01:58,530 --> 00:02:02,610
what we did in the in the hackathon and

00:02:00,600 --> 00:02:05,460
the in the later on now we have to think

00:02:02,610 --> 00:02:08,039
about how to do that in a standardised

00:02:05,460 --> 00:02:12,270
and reasonable way so we don't have to

00:02:08,039 --> 00:02:13,440
mingle about oh that's my creepy CSE D

00:02:12,270 --> 00:02:15,480
pipeline it did in the first

00:02:13,440 --> 00:02:18,360
place so we get from here from the

00:02:15,480 --> 00:02:21,120
hackathon step point to some good way

00:02:18,360 --> 00:02:37,050
where we can have industry stable

00:02:21,120 --> 00:02:38,600
standards so how's it looking there we

00:02:37,050 --> 00:02:43,830
go

00:02:38,600 --> 00:02:49,250
so I fear my conquer server down here no

00:02:43,830 --> 00:02:53,160
pipelines in there and I'm here now

00:02:49,250 --> 00:02:55,590
introducing my CLI plugin for the

00:02:53,160 --> 00:02:59,940
careless delivery for project fully -

00:02:55,590 --> 00:03:02,910
into my CF CLI so I do something like go

00:02:59,940 --> 00:03:08,370
build and install my CLI plug-in in the

00:03:02,910 --> 00:03:10,500
cloud foundry CLI that's it and now I

00:03:08,370 --> 00:03:13,140
have my really cool spring music app

00:03:10,500 --> 00:03:15,390
most of you know about because it's

00:03:13,140 --> 00:03:19,020
really simple and doesn't the case for

00:03:15,390 --> 00:03:23,700
us and I want to make a CI CD pipeline

00:03:19,020 --> 00:03:31,860
around that thing so what you do there

00:03:23,700 --> 00:03:35,760
is some new news your CLI command for

00:03:31,860 --> 00:03:38,670
that which we have to look at okay it's

00:03:35,760 --> 00:03:41,250
Kellis delivery so that's cool I can

00:03:38,670 --> 00:03:44,610
shorten that CD that's easy and I have

00:03:41,250 --> 00:03:47,940
to bring some credentials for the CI CDE

00:03:44,610 --> 00:03:52,350
pipeline and okay the app name I can do

00:03:47,940 --> 00:03:54,650
that so first I push the f4 one time CF

00:03:52,350 --> 00:03:54,650
push

00:04:02,030 --> 00:04:07,560
so it's bring up the spring music app

00:04:05,070 --> 00:04:11,430
for the first time there was no F

00:04:07,560 --> 00:04:13,560
beforehand in that space standard Java

00:04:11,430 --> 00:04:19,890
build pack stuff who don't I don't know

00:04:13,560 --> 00:04:24,030
care about anything and if we can say

00:04:19,890 --> 00:04:29,880
some words about the workflow the idea

00:04:24,030 --> 00:04:33,600
we had was to say first I'm gonna try to

00:04:29,880 --> 00:04:36,570
make my app works and then I need to

00:04:33,600 --> 00:04:39,120
make a pipeline of it so yeah the first

00:04:36,570 --> 00:04:41,340
step you know I have a new app and my

00:04:39,120 --> 00:04:43,560
first MVP so I push it for the first

00:04:41,340 --> 00:04:45,570
time that's really normal and afterwards

00:04:43,560 --> 00:04:47,700
I'm thinking about okay now I need a CS

00:04:45,570 --> 00:04:50,750
each PE paradigm around that so that

00:04:47,700 --> 00:04:55,830
math project for you choose two jumps in

00:04:50,750 --> 00:04:58,950
and and we have a first step when we say

00:04:55,830 --> 00:05:01,380
yeah right it's quite well so the the

00:04:58,950 --> 00:05:06,890
app is now running so I want to

00:05:01,380 --> 00:05:06,890
carelessly deliver the spring music app

00:05:07,550 --> 00:05:13,140
so I leaned back and left me let a

00:05:10,880 --> 00:05:15,500
project foot you set up all the stuff

00:05:13,140 --> 00:05:15,500
for me

00:05:22,980 --> 00:05:32,880
created pipeline created I activated and

00:05:29,190 --> 00:05:34,470
let it trigger it for the first time so

00:05:32,880 --> 00:05:36,210
what is this pipeline and what has

00:05:34,470 --> 00:05:41,100
project for the Sudan in the background

00:05:36,210 --> 00:05:44,400
it accessed my git repository I've local

00:05:41,100 --> 00:05:48,000
here fetched original the the head of

00:05:44,400 --> 00:05:50,070
the repository catched that commit put

00:05:48,000 --> 00:05:52,920
that in a pipeline template which is

00:05:50,070 --> 00:05:55,950
grabbed from some remote server got

00:05:52,920 --> 00:05:59,490
there the configuration for the Concours

00:05:55,950 --> 00:06:02,130
pipeline filled in the configuration the

00:05:59,490 --> 00:06:06,330
git repository the remote of origin

00:06:02,130 --> 00:06:10,050
master where so it gets the the rim mode

00:06:06,330 --> 00:06:15,290
of my of my commit head puts that

00:06:10,050 --> 00:06:18,270
together puts in some the CL a VCF

00:06:15,290 --> 00:06:20,040
username and password I've butchered at

00:06:18,270 --> 00:06:25,230
the moment extracts from environment

00:06:20,040 --> 00:06:27,390
variables and then also puts into the CF

00:06:25,230 --> 00:06:31,560
orc and the CF space which is reps from

00:06:27,390 --> 00:06:33,800
CF from the CF tar CLI target also it

00:06:31,560 --> 00:06:36,720
extracts a dish the the manifest

00:06:33,800 --> 00:06:41,900
information from the app puts it in

00:06:36,720 --> 00:06:45,360
there and stuffs together a CLI a

00:06:41,900 --> 00:06:48,770
complete pipeline definition out of that

00:06:45,360 --> 00:06:51,540
and the standardized pipeline template

00:06:48,770 --> 00:06:53,730
so it takes a little bit of time now

00:06:51,540 --> 00:06:56,720
because we've spun up the the poplar for

00:06:53,730 --> 00:06:59,580
the first time and and conkers has to

00:06:56,720 --> 00:07:01,440
get here the the pattern the image

00:06:59,580 --> 00:07:05,760
docker images for the first time so it

00:07:01,440 --> 00:07:09,510
can run the pipeline tasks but what is

00:07:05,760 --> 00:07:11,880
doing the pipeline in this setup here is

00:07:09,510 --> 00:07:14,340
that is this destroys jobs because we

00:07:11,880 --> 00:07:16,830
wanted to start with a very simple wall

00:07:14,340 --> 00:07:18,380
pipeline template and then in the later

00:07:16,830 --> 00:07:21,920
on in discussion with the community

00:07:18,380 --> 00:07:24,870
extend that to a community standard

00:07:21,920 --> 00:07:26,730
first of all it not builds the code so

00:07:24,870 --> 00:07:28,410
with that what does it mean for the

00:07:26,730 --> 00:07:31,800
spring news you get it makes a great

00:07:28,410 --> 00:07:35,770
bill yeah not much less a little bit

00:07:31,800 --> 00:07:37,889
testing and stuff

00:07:35,770 --> 00:07:41,020
want to do have happening there and

00:07:37,889 --> 00:07:43,210
afterwards it fetches the manifest file

00:07:41,020 --> 00:07:45,430
of the pushed application because it

00:07:43,210 --> 00:07:47,770
needs some template to how to push that

00:07:45,430 --> 00:07:51,210
app in the long run and if the developer

00:07:47,770 --> 00:07:54,340
try something out how to do it that way

00:07:51,210 --> 00:07:56,979
if we rerun the pipeline it also extract

00:07:54,340 --> 00:07:59,139
the information of that changes which

00:07:56,979 --> 00:08:02,199
were done to the app in the chess bronze

00:07:59,139 --> 00:08:04,810
and insert it in the manifest used to be

00:08:02,199 --> 00:08:07,440
pushed there by the pipeline so it's all

00:08:04,810 --> 00:08:10,479
the pipeline is always in sync with

00:08:07,440 --> 00:08:12,819
tweaks done manually by the developers

00:08:10,479 --> 00:08:13,630
so the development stage is always up to

00:08:12,819 --> 00:08:17,169
date with that

00:08:13,630 --> 00:08:22,210
and afterwards easily pushes the app and

00:08:17,169 --> 00:08:26,889
one tweak text the info gets the the get

00:08:22,210 --> 00:08:29,380
ref which was successfully pushed we

00:08:26,889 --> 00:08:33,279
started get rev two that has

00:08:29,380 --> 00:08:36,039
successfully run well we assume it has

00:08:33,279 --> 00:08:40,180
successfully around and in order for

00:08:36,039 --> 00:08:42,250
later to deliver this promote this to

00:08:40,180 --> 00:08:47,940
production we will see that this that's

00:08:42,250 --> 00:08:51,630
the first step just a side note here our

00:08:47,940 --> 00:08:55,000
pipeline is targeted at Java technology

00:08:51,630 --> 00:09:00,089
we are detecting this from the build

00:08:55,000 --> 00:09:05,170
back I guess yeah right now and we have

00:09:00,089 --> 00:09:09,250
great deal of work ahead building our

00:09:05,170 --> 00:09:11,649
pipelines for other technologies because

00:09:09,250 --> 00:09:14,860
here we for for Gradle we have a bunch

00:09:11,649 --> 00:09:17,860
of shame into the pipeline to set a

00:09:14,860 --> 00:09:21,279
credit properly yeah the idea in the

00:09:17,860 --> 00:09:23,800
long run is like I don't want to specify

00:09:21,279 --> 00:09:25,600
my build pack but I want to have it also

00:09:23,800 --> 00:09:27,430
detected i also want to have L to detect

00:09:25,600 --> 00:09:30,790
at which CIC deep pipeline template I do

00:09:27,430 --> 00:09:33,339
not want to use the CID CD power plan

00:09:30,790 --> 00:09:35,829
template is then extracted from some

00:09:33,339 --> 00:09:43,199
remote repository either the default or

00:09:35,829 --> 00:09:47,020
something I directly specify ok the next

00:09:43,199 --> 00:09:48,180
thing I think we should spin up with the

00:09:47,020 --> 00:09:52,500
wither

00:09:48,180 --> 00:09:54,600
while we wait with the with the rest of

00:09:52,500 --> 00:09:58,260
the slides this you may come back to

00:09:54,600 --> 00:10:02,550
that later on its pretty long to pull

00:09:58,260 --> 00:10:04,530
yeah unfortunately so yeah we can say a

00:10:02,550 --> 00:10:08,790
words about some words about the project

00:10:04,530 --> 00:10:13,500
mindset right now this is let's be fair

00:10:08,790 --> 00:10:14,730
this is an experiment that we've been a

00:10:13,500 --> 00:10:16,980
little bit further

00:10:14,730 --> 00:10:22,580
since the hackathon we've been

00:10:16,980 --> 00:10:26,850
refactoring our rapper shell script into

00:10:22,580 --> 00:10:30,050
CLI plug-in for the CFS you know but

00:10:26,850 --> 00:10:35,760
there's a lot to come and we have some

00:10:30,050 --> 00:10:38,640
thought about where to how how to move

00:10:35,760 --> 00:10:43,440
forward that's the philosophy and DNA we

00:10:38,640 --> 00:10:46,190
want to put into this project we need we

00:10:43,440 --> 00:10:49,650
need to focus on some simple experience

00:10:46,190 --> 00:10:52,860
there are really many ways to build

00:10:49,650 --> 00:10:56,520
pipelines we just want one that just

00:10:52,860 --> 00:11:00,090
looks correct and that's the way we to

00:10:56,520 --> 00:11:01,950
standardize and just I mean we're

00:11:00,090 --> 00:11:04,440
starting up with a thing so we have to

00:11:01,950 --> 00:11:07,710
start at a low point and then put

00:11:04,440 --> 00:11:10,050
together features when they're raised by

00:11:07,710 --> 00:11:13,470
the community so we say okay we need

00:11:10,050 --> 00:11:15,210
this a deeper standard way to insert for

00:11:13,470 --> 00:11:17,130
example integration tests in that you

00:11:15,210 --> 00:11:19,350
have hooks for that so we have to come

00:11:17,130 --> 00:11:21,840
up with an which something which works

00:11:19,350 --> 00:11:24,600
for most of the guy people so you don't

00:11:21,840 --> 00:11:29,690
have to make your own template for

00:11:24,600 --> 00:11:33,780
editing integration test and so on so

00:11:29,690 --> 00:11:37,800
yeah we want to abstract from another in

00:11:33,780 --> 00:11:40,080
technology the the idea is to push the

00:11:37,800 --> 00:11:44,130
pipeline whatever it's running on

00:11:40,080 --> 00:11:47,670
whether Congress we that we would adopt

00:11:44,130 --> 00:11:49,730
in an mpeg-2 very first our switch to

00:11:47,670 --> 00:11:55,170
anything else if it makes sense later

00:11:49,730 --> 00:11:59,010
just like one time in class foundry so

00:11:55,170 --> 00:12:03,089
keep this in mind we're moving forward

00:11:59,010 --> 00:12:06,120
and yeah in the end focus of on

00:12:03,089 --> 00:12:12,329
developer productivity makes something

00:12:06,120 --> 00:12:16,310
stand out and this be effective so

00:12:12,329 --> 00:12:21,209
pipelines would come as a commodity and

00:12:16,310 --> 00:12:24,660
we can just stick to one way to pipe

00:12:21,209 --> 00:12:28,980
things in the first place then may be

00:12:24,660 --> 00:12:32,430
customized but we will see that later so

00:12:28,980 --> 00:12:35,540
opinion too opinionated first and then

00:12:32,430 --> 00:12:42,000
figure out extensions points there

00:12:35,540 --> 00:12:43,709
though we expect by applying the need

00:12:42,000 --> 00:12:46,529
for a bunch of pipeline templates

00:12:43,709 --> 00:12:49,260
because in in carpentry there are some

00:12:46,529 --> 00:12:52,050
parts that are opinionated and some

00:12:49,260 --> 00:12:54,120
parts that accept a broad range of range

00:12:52,050 --> 00:12:58,579
of possibilities which is the bill tax

00:12:54,120 --> 00:13:01,230
rate that's our encapsulating a large

00:12:58,579 --> 00:13:04,680
complexity with repository of

00:13:01,230 --> 00:13:08,269
dependencies and many many stuff and we

00:13:04,680 --> 00:13:12,810
expect there can be some tricky and

00:13:08,269 --> 00:13:16,139
larger code base so standout and

00:13:12,810 --> 00:13:20,149
reasonable other keywords and the let

00:13:16,139 --> 00:13:28,220
adopting the less surprise principle and

00:13:20,149 --> 00:13:32,060
get out 99 999 possible ways we also

00:13:28,220 --> 00:13:34,769
expect to at the center going to be

00:13:32,060 --> 00:13:40,980
opinionated about branch management in

00:13:34,769 --> 00:13:43,560
the git repository right now when the we

00:13:40,980 --> 00:13:48,120
promote from staging to production we

00:13:43,560 --> 00:13:51,180
take a get religion we we can see that

00:13:48,120 --> 00:13:53,579
when going back to the demo that's in

00:13:51,180 --> 00:13:55,709
the in the resulting pipeline for

00:13:53,579 --> 00:13:59,010
continuous delivery is actually pinned

00:13:55,709 --> 00:14:02,069
to this revision that's something we

00:13:59,010 --> 00:14:05,639
want to change because what would be

00:14:02,069 --> 00:14:08,579
reasonable with the the continuously be

00:14:05,639 --> 00:14:10,620
preparing to promote some golden version

00:14:08,579 --> 00:14:12,310
that would be tagged by a brand and

00:14:10,620 --> 00:14:17,470
pushing to a branch

00:14:12,310 --> 00:14:20,500
or something yeah so let's switch back

00:14:17,470 --> 00:14:25,540
and live where the pipeline is at the

00:14:20,500 --> 00:14:27,490
moment so we are now green so we can go

00:14:25,540 --> 00:14:30,160
to the next step now I have a working

00:14:27,490 --> 00:14:31,450
version staged in their stage okay I'm

00:14:30,160 --> 00:14:34,360
fine with it now I want to go to

00:14:31,450 --> 00:14:37,920
production so I need to have a way to to

00:14:34,360 --> 00:14:40,840
bring that pipeline that code that

00:14:37,920 --> 00:14:43,390
deployment to the next stage so I start

00:14:40,840 --> 00:14:46,840
and create a space can you can you show

00:14:43,390 --> 00:14:51,790
us to see the end yes I can show you the

00:14:46,840 --> 00:14:56,530
end it's illustrating just a CF and I

00:14:51,790 --> 00:14:59,290
hope you do that see if an is stretching

00:14:56,530 --> 00:15:03,370
what I just said the about this get

00:14:59,290 --> 00:15:06,220
religion yeah so the the pipeline has

00:15:03,370 --> 00:15:09,220
assumed that pushing that successfully

00:15:06,220 --> 00:15:12,340
there is a test phase also with credible

00:15:09,220 --> 00:15:15,280
tests assume that it's called induction

00:15:12,340 --> 00:15:18,040
this is good to go so we assumed it that

00:15:15,280 --> 00:15:20,490
the test coverage is very nice and it's

00:15:18,040 --> 00:15:24,310
a trial so this gets version is

00:15:20,490 --> 00:15:26,260
something that works yeah so we create a

00:15:24,310 --> 00:15:29,470
new space which you I can now call prot

00:15:26,260 --> 00:15:33,670
because I want to do stuff in production

00:15:29,470 --> 00:15:36,130
and now I want to spin up a pipeline

00:15:33,670 --> 00:15:39,190
which pushes this revision to production

00:15:36,130 --> 00:15:43,080
because now this revision works so what

00:15:39,190 --> 00:15:43,080
I do is I spin

00:15:45,000 --> 00:15:54,070
prod yeah we did that a little bit

00:15:49,050 --> 00:15:56,620
we're open to rename so it want to spin

00:15:54,070 --> 00:15:58,570
a prod I can say it deploy to another

00:15:56,620 --> 00:16:00,880
organization and other space with

00:15:58,570 --> 00:16:04,630
another route so we don't mingle with

00:16:00,880 --> 00:16:13,210
with stuff so I spin up route spring

00:16:04,630 --> 00:16:21,010
music - s prod - are for example Hello

00:16:13,210 --> 00:16:23,920
Kitty dot a system dot C F dodge down

00:16:21,010 --> 00:16:25,840
low is it slap so we have special domain

00:16:23,920 --> 00:16:31,900
for that for staff

00:16:25,840 --> 00:16:35,020
and run it what's happening in that way

00:16:31,900 --> 00:16:38,970
we try to find out the minimum settings

00:16:35,020 --> 00:16:40,930
we should specify when it comes to

00:16:38,970 --> 00:16:45,670
creating this continuous delivery

00:16:40,930 --> 00:16:57,600
pipeline from stage into product there

00:16:45,670 --> 00:17:01,630
it is and this has to be triggered yeah

00:16:57,600 --> 00:17:03,880
had a reloading problem so now I bring

00:17:01,630 --> 00:17:07,900
up the pipeline for the production stage

00:17:03,880 --> 00:17:11,560
now the say the commit used for bringing

00:17:07,900 --> 00:17:14,290
up the development is now used for the

00:17:11,560 --> 00:17:25,150
production stage so if I see if I see if

00:17:14,290 --> 00:17:28,840
and the spring music back we can see

00:17:25,150 --> 00:17:31,210
that this revision is exactly the same

00:17:28,840 --> 00:17:38,280
we have in the pipeline here so it's

00:17:31,210 --> 00:17:38,280
exactly like that and as a consequence

00:17:38,340 --> 00:17:43,420
this continuous delivery pipeline can

00:17:41,290 --> 00:17:46,630
right now only deliver that version

00:17:43,420 --> 00:17:48,220
because it's pinned into it yeah and if

00:17:46,630 --> 00:17:51,340
we want to update for example say we

00:17:48,220 --> 00:17:54,340
have no new version of my of my code of

00:17:51,340 --> 00:17:56,470
my app I want to spin that to production

00:17:54,340 --> 00:18:00,190
I only rerun spin up to production and

00:17:56,470 --> 00:18:02,410
gets updated to the new pin version so

00:18:00,190 --> 00:18:04,750
in that way I can always say ok I pinned

00:18:02,410 --> 00:18:07,120
that version I've developed that we know

00:18:04,750 --> 00:18:09,070
that's a little bit Hecky a better

00:18:07,120 --> 00:18:11,020
version for example would be using text

00:18:09,070 --> 00:18:13,330
or something on the git repository and

00:18:11,020 --> 00:18:15,970
that's some things we did in the

00:18:13,330 --> 00:18:17,740
hackathon we now say we have to come go

00:18:15,970 --> 00:18:20,500
away from that but we aren't there in

00:18:17,740 --> 00:18:23,530
the implementation part so if we go back

00:18:20,500 --> 00:18:25,690
to our slides

00:18:23,530 --> 00:18:30,400
the current status of the project is

00:18:25,690 --> 00:18:33,190
that the C the CF plugins still execute

00:18:30,400 --> 00:18:34,750
some bash code in it yeah we didn't get

00:18:33,190 --> 00:18:38,410
all the way the bash code we did in the

00:18:34,750 --> 00:18:39,010
hackathon until now we also have

00:18:38,410 --> 00:18:41,320
dependent

00:18:39,010 --> 00:18:44,440
on other say light use at the moment CF

00:18:41,320 --> 00:18:47,080
Gate fly especially flies a big problem

00:18:44,440 --> 00:18:49,990
because each come concours version needs

00:18:47,080 --> 00:18:53,320
another fly has a little bit changed API

00:18:49,990 --> 00:18:55,390
spec so you can't you have to be using

00:18:53,320 --> 00:18:57,910
the specific fly version of that conquer

00:18:55,390 --> 00:18:59,740
server and which would in our setup be

00:18:57,910 --> 00:19:02,320
passed some part of the platform so

00:18:59,740 --> 00:19:04,720
developers don't need to know about what

00:19:02,320 --> 00:19:06,970
you use but use the right CLI plug-in

00:19:04,720 --> 00:19:11,410
version for example and we have to look

00:19:06,970 --> 00:19:14,530
in that the spin up production command

00:19:11,410 --> 00:19:17,290
is some point ridiculous at the moment

00:19:14,530 --> 00:19:19,030
because it makes plot but in the real

00:19:17,290 --> 00:19:21,790
world you have would have several

00:19:19,030 --> 00:19:24,250
different stages of in your production

00:19:21,790 --> 00:19:27,160
cycle so we will have maybe something

00:19:24,250 --> 00:19:30,010
like an integration stage some pre prod

00:19:27,160 --> 00:19:33,010
stage or something and so we need some

00:19:30,010 --> 00:19:37,169
better way like spin up next stage and

00:19:33,010 --> 00:19:37,169
give a name to it or something and

00:19:37,410 --> 00:19:43,090
replace the the continuous delivery

00:19:40,929 --> 00:19:46,650
pipeline we have that moment because

00:19:43,090 --> 00:19:50,760
it's a little bit not working with a

00:19:46,650 --> 00:19:54,120
transactional model between stages and

00:19:50,760 --> 00:19:57,790
the pinning to this get revision there

00:19:54,120 --> 00:20:00,700
so also the environment variables is

00:19:57,790 --> 00:20:03,250
something we are not that found off to

00:20:00,700 --> 00:20:06,520
to have it in the long run we either put

00:20:03,250 --> 00:20:09,280
it away to some config file or have some

00:20:06,520 --> 00:20:12,040
another M command specifying these in

00:20:09,280 --> 00:20:14,230
the memory of the CLI like you have with

00:20:12,040 --> 00:20:16,900
the SIA blocking or something or even

00:20:14,230 --> 00:20:19,150
move these to some remotes thing like

00:20:16,900 --> 00:20:20,350
credible something so you don't have to

00:20:19,150 --> 00:20:24,059
to argue with that

00:20:20,350 --> 00:20:26,620
all along only specifying the the crap

00:20:24,059 --> 00:20:27,220
credentials the treta variables or

00:20:26,620 --> 00:20:31,030
something

00:20:27,220 --> 00:20:32,679
so uh as a sign of um we wanted to be

00:20:31,030 --> 00:20:36,100
very fair about the status of the

00:20:32,679 --> 00:20:40,270
project here and expose really what it

00:20:36,100 --> 00:20:42,790
is right now yeah and and also why it's

00:20:40,270 --> 00:20:45,340
interesting to jump in right now because

00:20:42,790 --> 00:20:48,850
also the aim of this talk yeah we're

00:20:45,340 --> 00:20:51,010
really only in the project stage so what

00:20:48,850 --> 00:20:52,270
are our immediate improvements we are

00:20:51,010 --> 00:20:55,390
planning on to do

00:20:52,270 --> 00:20:59,290
sporting the basket all along away so we

00:20:55,390 --> 00:21:01,240
are more platform-independent support

00:20:59,290 --> 00:21:02,830
private git repositories at the moment

00:21:01,240 --> 00:21:05,100
we are assuming that we can publicly

00:21:02,830 --> 00:21:06,429
pull the code of the github repository

00:21:05,100 --> 00:21:09,900
clone it

00:21:06,429 --> 00:21:13,390
if for conkers and that isn't the way

00:21:09,900 --> 00:21:14,940
stuff is done out there so we have to

00:21:13,390 --> 00:21:17,590
support that which means another

00:21:14,940 --> 00:21:22,480
credentials or SSH key or something

00:21:17,590 --> 00:21:24,220
which we it has to be added then improve

00:21:22,480 --> 00:21:27,280
the pipeline to impacts we call them now

00:21:24,220 --> 00:21:30,280
pipe x pipe x we're coming up with a

00:21:27,280 --> 00:21:33,550
name for that the actual one is really

00:21:30,280 --> 00:21:37,530
simple that's not what we are seeing as

00:21:33,550 --> 00:21:40,030
what what it has to be it's not not on a

00:21:37,530 --> 00:21:44,290
quality or you use you would like to

00:21:40,030 --> 00:21:47,380
have in a development team so it's an

00:21:44,290 --> 00:21:49,120
old version so also make some other

00:21:47,380 --> 00:21:51,179
examples for other languages so you

00:21:49,120 --> 00:21:55,300
don't have to be a Java developer to

00:21:51,179 --> 00:21:57,190
participate and the project team

00:21:55,300 --> 00:21:58,960
structuring is really early at the

00:21:57,190 --> 00:22:01,600
moment we're only - we need to document

00:21:58,960 --> 00:22:04,630
a it more we need to make contributor

00:22:01,600 --> 00:22:08,020
guide for you guys so you can jump in

00:22:04,630 --> 00:22:11,260
give feedback to us and so on so

00:22:08,020 --> 00:22:13,990
challenges with the project first of all

00:22:11,260 --> 00:22:16,390
get a read or configuration of the

00:22:13,990 --> 00:22:18,670
realized step or get it all away secret

00:22:16,390 --> 00:22:21,490
management switching from pinning

00:22:18,670 --> 00:22:23,620
specific get revisions and to promoting

00:22:21,490 --> 00:22:26,320
for later stages like using text or

00:22:23,620 --> 00:22:30,400
something there's a reasons though we

00:22:26,320 --> 00:22:32,080
why we pinned this we thought during the

00:22:30,400 --> 00:22:34,420
hackathon that we would not make any

00:22:32,080 --> 00:22:37,270
assumption about the get flow that the

00:22:34,420 --> 00:22:39,910
team is using so meaning taking gesture

00:22:37,270 --> 00:22:45,429
revision was the really minimum they

00:22:39,910 --> 00:22:47,140
find we could assume yeah but in the

00:22:45,429 --> 00:22:49,270
long run after the hackathon we came to

00:22:47,140 --> 00:22:51,970
the conclusion that using something like

00:22:49,270 --> 00:22:54,580
standards like a pipeline pack for get

00:22:51,970 --> 00:22:57,160
flow with Java would be a better way to

00:22:54,580 --> 00:23:00,220
use it so you say you pinpoint you I

00:22:57,160 --> 00:23:01,750
want to use get flow and then use the

00:23:00,220 --> 00:23:04,780
branching model of good flow using

00:23:01,750 --> 00:23:06,010
industry standards for that also then

00:23:04,780 --> 00:23:07,830
producing the stage

00:23:06,010 --> 00:23:11,260
you want to have in that kid flow stuff

00:23:07,830 --> 00:23:13,330
out of the pipelines and maybe even put

00:23:11,260 --> 00:23:15,910
it in one pipeline not and extending

00:23:13,330 --> 00:23:18,340
that if you say new stage the pipeline

00:23:15,910 --> 00:23:20,370
gets extended not adding a new pipeline

00:23:18,340 --> 00:23:24,540
for it because that can be really

00:23:20,370 --> 00:23:26,710
crowding you conquer scheme and

00:23:24,540 --> 00:23:29,980
formalizing the standard how these pipe

00:23:26,710 --> 00:23:32,950
X should look like at the moment it's

00:23:29,980 --> 00:23:34,900
there's one example but is that the way

00:23:32,950 --> 00:23:37,870
they should be is there a standard way

00:23:34,900 --> 00:23:41,370
so that the the seal I could work with

00:23:37,870 --> 00:23:43,930
it so we have some point of

00:23:41,370 --> 00:23:46,840
standardization in the connection to you

00:23:43,930 --> 00:23:50,080
to the CLI so it can run you can easily

00:23:46,840 --> 00:23:53,200
make your own pipe pack and contribute

00:23:50,080 --> 00:23:57,940
it so there has to be a form to standard

00:23:53,200 --> 00:24:00,490
around that and figure out how we want

00:23:57,940 --> 00:24:04,090
to integrate tests and such things into

00:24:00,490 --> 00:24:06,850
that so amazing tests or something for

00:24:04,090 --> 00:24:09,010
Java for sure that's easy to integrate

00:24:06,850 --> 00:24:11,560
in the build step but what about other

00:24:09,010 --> 00:24:13,510
technologies for example if for most

00:24:11,560 --> 00:24:16,060
sophisticated integration tests or

00:24:13,510 --> 00:24:17,530
something and that's not that easy so we

00:24:16,060 --> 00:24:19,300
have to have like maybe something like

00:24:17,530 --> 00:24:23,320
hooks and where you have in your kit

00:24:19,300 --> 00:24:26,170
repository a way to specify tests which

00:24:23,320 --> 00:24:29,230
then are grabbed by the pipe X so we

00:24:26,170 --> 00:24:32,590
have a the pipe has some some hooks in

00:24:29,230 --> 00:24:36,730
in it to to call them there are it's not

00:24:32,590 --> 00:24:38,740
just a matter of pipeline templates you

00:24:36,730 --> 00:24:42,430
might have to tweak a little bit more

00:24:38,740 --> 00:24:47,860
what command you exactly run to run your

00:24:42,430 --> 00:24:50,440
test properly yeah also we want to get

00:24:47,860 --> 00:24:52,900
the stuff to a point where we can

00:24:50,440 --> 00:24:54,670
promote it as a safe extension project

00:24:52,900 --> 00:24:57,160
we're not at the point with we're saying

00:24:54,670 --> 00:24:59,620
that's where we want to have it at at

00:24:57,160 --> 00:25:01,660
the start so see if extension project

00:24:59,620 --> 00:25:04,030
means something to us so we say we have

00:25:01,660 --> 00:25:06,640
want to have at least one at that point

00:25:04,030 --> 00:25:11,290
of quality in the code that we promote

00:25:06,640 --> 00:25:14,200
it but we're seeing well light ahead so

00:25:11,290 --> 00:25:16,570
that's a near future project it does an

00:25:14,200 --> 00:25:18,370
interesting after all it's the first is

00:25:16,570 --> 00:25:19,789
we don't know any other project that

00:25:18,370 --> 00:25:22,279
tries to say

00:25:19,789 --> 00:25:24,470
let's standardize an interface link

00:25:22,279 --> 00:25:27,950
between CF and concourse are any any

00:25:24,470 --> 00:25:29,989
system and integrate those in some and

00:25:27,950 --> 00:25:34,999
think about the user the developer

00:25:29,989 --> 00:25:38,989
experience around yeah maybe in the long

00:25:34,999 --> 00:25:41,929
run we don't use Travis or we we give CI

00:25:38,989 --> 00:25:44,509
of something because we hide that or we

00:25:41,929 --> 00:25:47,359
inspire from their configure ability for

00:25:44,509 --> 00:25:49,489
our pipelines that's it when we see that

00:25:47,359 --> 00:25:51,590
the testing the test command is

00:25:49,489 --> 00:25:55,879
especially something that would fit into

00:25:51,590 --> 00:25:57,830
this configuration file and the these

00:25:55,879 --> 00:26:00,739
technologies also have very interesting

00:25:57,830 --> 00:26:02,830
concept about encrypting the secrets so

00:26:00,739 --> 00:26:06,440
that you can get pushed the thing to

00:26:02,830 --> 00:26:08,210
anyway because it's it's encrypted we

00:26:06,440 --> 00:26:10,580
could draw a lot of inspiration from

00:26:08,210 --> 00:26:13,429
from those and maybe mimic something

00:26:10,580 --> 00:26:15,559
maybe be compatible yeah in for the

00:26:13,429 --> 00:26:16,759
configuration part with the username the

00:26:15,559 --> 00:26:20,389
password and so on

00:26:16,759 --> 00:26:22,429
that could be a possibility then figure

00:26:20,389 --> 00:26:24,379
out other meaningful extension points

00:26:22,429 --> 00:26:26,419
because if we can't figure out what all

00:26:24,379 --> 00:26:28,340
the things are which are needed be

00:26:26,419 --> 00:26:30,200
opinionated but at some point you need

00:26:28,340 --> 00:26:34,009
customization where that's took another

00:26:30,200 --> 00:26:35,809
question at the right place yeah based

00:26:34,009 --> 00:26:38,840
on user feedback so it's important that

00:26:35,809 --> 00:26:41,720
you come on contributors and the code is

00:26:38,840 --> 00:26:43,909
on github at the moment you can have we

00:26:41,720 --> 00:26:46,190
are happy if you provide code if you

00:26:43,909 --> 00:26:50,029
provide us github issue suggestions

00:26:46,190 --> 00:26:51,710
discussions documentation help we are

00:26:50,029 --> 00:26:53,299
happy with all the stuff you can promote

00:26:51,710 --> 00:26:57,590
because at the moment project volley to

00:26:53,299 --> 00:27:02,479
use to people not full-time so it's

00:26:57,590 --> 00:27:04,190
quite a way ahead for Rama for us we're

00:27:02,479 --> 00:27:07,580
happy for all of your contributions now

00:27:04,190 --> 00:27:10,940
at the moment and you may ask why

00:27:07,580 --> 00:27:13,580
project 42 it's just that we said

00:27:10,940 --> 00:27:16,729
alright we could push quite anything

00:27:13,580 --> 00:27:22,849
like that so it would be the answer to

00:27:16,729 --> 00:27:26,090
pushing containers our code or functions

00:27:22,849 --> 00:27:28,460
or anything so that's why it's the

00:27:26,090 --> 00:27:30,649
answer yeah we don't have just to stop

00:27:28,460 --> 00:27:33,580
at a cloud phone we could nearly push

00:27:30,649 --> 00:27:39,049
anything with that approach so

00:27:33,580 --> 00:27:43,059
but any questions at least thank you

00:27:39,049 --> 00:27:43,059
very much for listening so far

00:27:45,900 --> 00:27:50,549

YouTube URL: https://www.youtube.com/watch?v=-GVv-o6LLzc


