Title: Deploy your First Application to Cloud Foundry - Dr Nic Williams, Stark & Wayne
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Deploy your First Application to Cloud Foundry - Dr Nic Williams, Stark & Wayne 

You’ve heard the buzz about Cloud Foundry, but is it truly as easy for me to deploy my first application? Is it possible to run CF on my laptop? If I’m a student can I use Cloud Foundry? If I’m only new to software development can I use Cloud Foundry? If I’m shy and don’t like to ask questions can I use Cloud Foundry? You are asking good questions.  Let’s do this together, right now. Dr. Nic of Stark & Wayne walks you through the process of deploying your first app to Cloud Foundry.

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:03,480
well excellent thanks everyone for

00:00:01,620 --> 00:00:05,759
coming I firstly want to acknowledge

00:00:03,480 --> 00:00:08,010
that you've all relatively sat in the

00:00:05,759 --> 00:00:10,260
middle of the room I don't exactly know

00:00:08,010 --> 00:00:11,910
how it works sometimes you can have a

00:00:10,260 --> 00:00:14,389
group and if there's far more seats than

00:00:11,910 --> 00:00:16,830
necessary there's just a different vibe

00:00:14,389 --> 00:00:18,779
you'll get a person over there you'll

00:00:16,830 --> 00:00:19,980
get a person that corner and then I feel

00:00:18,779 --> 00:00:21,900
like I have to go and heard that Mike

00:00:19,980 --> 00:00:23,130
Katz come on you can move in you're

00:00:21,900 --> 00:00:26,070
awesome so I really appreciate that

00:00:23,130 --> 00:00:29,150
we're in the middle and I want to share

00:00:26,070 --> 00:00:34,430
something that I have benefited from

00:00:29,150 --> 00:00:39,059
since I started using Cloud Foundry 2012

00:00:34,430 --> 00:00:40,890
I started stuck away in 2012-2013 but

00:00:39,059 --> 00:00:44,250
really I before Cloud Foundry I was

00:00:40,890 --> 00:00:46,559
using Heroku and so I've benefited from

00:00:44,250 --> 00:00:52,590
things like build packs for over a

00:00:46,559 --> 00:00:54,629
decade and I think it's because Heroku

00:00:52,590 --> 00:00:57,780
and Cloud Foundry have always made sense

00:00:54,629 --> 00:01:00,690
to me I've never been very good or

00:00:57,780 --> 00:01:03,000
enthusiastic about evangelizing it what

00:01:00,690 --> 00:01:06,080
we're gonna talk about now because what

00:01:03,000 --> 00:01:08,189
to talk about it obviously makes sense

00:01:06,080 --> 00:01:10,409
you know let's talk about the hard stuff

00:01:08,189 --> 00:01:12,630
sorry I'm actually doing something I did

00:01:10,409 --> 00:01:14,700
a YouTube video earlier in the year

00:01:12,630 --> 00:01:15,689
which I think was still one of the first

00:01:14,700 --> 00:01:19,740
times they've ever really said all right

00:01:15,689 --> 00:01:21,570
let's play with Cloud Foundry because

00:01:19,740 --> 00:01:23,580
yeah I always just assumed someone else

00:01:21,570 --> 00:01:26,250
would do it but you know you're gonna

00:01:23,580 --> 00:01:29,960
have your turn so I'm used Cloud Foundry

00:01:26,250 --> 00:01:32,520
I'm a I see if push all the time and

00:01:29,960 --> 00:01:34,710
happy to share it so if this is your

00:01:32,520 --> 00:01:36,659
first time and then you're gonna need

00:01:34,710 --> 00:01:40,140
the CLI and I'm gonna do these commands

00:01:36,659 --> 00:01:41,579
for you this is not a hands-on lab but

00:01:40,140 --> 00:01:43,049
then you know there is the the CLI

00:01:41,579 --> 00:01:45,869
you're gonna need to install it there is

00:01:43,049 --> 00:01:47,490
a new one coming out and for anyone

00:01:45,869 --> 00:01:48,000
watching the video at some point the

00:01:47,490 --> 00:01:50,189
time

00:01:48,000 --> 00:01:52,259
see if seven might be that that's the

00:01:50,189 --> 00:01:54,000
one you get but the instructions and the

00:01:52,259 --> 00:01:59,329
commands I believe will keep working

00:01:54,000 --> 00:02:01,350
through CF v seven now we are going to

00:01:59,329 --> 00:02:03,299
talk to a cloud foundry

00:02:01,350 --> 00:02:05,329
so cloud foundry is fundamentally a

00:02:03,299 --> 00:02:08,429
running system running somewhere else

00:02:05,329 --> 00:02:09,629
whilst our inner you know we look at it

00:02:08,429 --> 00:02:11,879
through the patch the eyes of our

00:02:09,629 --> 00:02:13,560
command-line tool it is actually talking

00:02:11,879 --> 00:02:16,140
to a hosted service

00:02:13,560 --> 00:02:18,480
running somewhere and we're going to log

00:02:16,140 --> 00:02:20,370
into that now I will come back to this

00:02:18,480 --> 00:02:22,800
slide if you're looking for a Cloud

00:02:20,370 --> 00:02:24,720
Foundry here are six of these sort of

00:02:22,800 --> 00:02:29,280
certified cloud boundaries

00:02:24,720 --> 00:02:31,560
I guess clad dog of is probably just for

00:02:29,280 --> 00:02:33,240
government people but the others are all

00:02:31,560 --> 00:02:36,170
where you could get a you know a free

00:02:33,240 --> 00:02:38,610
account running and get started and

00:02:36,170 --> 00:02:40,590
we're going to use one of those and then

00:02:38,610 --> 00:02:42,360
there is of course as there is CF dev

00:02:40,590 --> 00:02:44,520
and see if dev is where you can get a

00:02:42,360 --> 00:02:48,210
whole version of Cloud Foundry running

00:02:44,520 --> 00:02:50,220
on a suitably sized laptop co-founder is

00:02:48,210 --> 00:02:53,100
not a small thing but it can run all in

00:02:50,220 --> 00:02:55,890
your laptop and that is super cool also

00:02:53,100 --> 00:02:57,930
it builds it and runs it the same way

00:02:55,890 --> 00:02:59,640
that many people run it in production

00:02:57,930 --> 00:03:01,980
which is using a tool called Bosh so

00:02:59,640 --> 00:03:04,170
later on if you become interested in how

00:03:01,980 --> 00:03:06,900
it works you can start playing with it

00:03:04,170 --> 00:03:08,400
all on your laptop which could be quite

00:03:06,900 --> 00:03:10,140
kind of interesting none of which we're

00:03:08,400 --> 00:03:13,080
going to do today today we are CF

00:03:10,140 --> 00:03:15,630
pushing like champions so back to login

00:03:13,080 --> 00:03:16,890
now I mentioned login because there are

00:03:15,630 --> 00:03:18,680
a few different ways to login and I do

00:03:16,890 --> 00:03:23,370
want to highlight the one that I use

00:03:18,680 --> 00:03:24,900
because I'm the speaker and we're not

00:03:23,370 --> 00:03:29,280
really running an opinion poll here so

00:03:24,900 --> 00:03:31,530
there is different ways so now I've just

00:03:29,280 --> 00:03:34,770
copied the output from from a few runs

00:03:31,530 --> 00:03:38,190
cf help but there are a bunch of flags

00:03:34,770 --> 00:03:42,290
and so if we I'm going to for today I'm

00:03:38,190 --> 00:03:45,600
going to use pivotal z' in part because

00:03:42,290 --> 00:03:47,600
it's been out the longest I've just used

00:03:45,600 --> 00:03:49,140
it the longest I you know I always

00:03:47,600 --> 00:03:50,760
sometimes I don't think enough people

00:03:49,140 --> 00:03:52,800
give enough respect to pivotal for all

00:03:50,760 --> 00:03:54,150
they're there the money they've spent on

00:03:52,800 --> 00:03:56,400
Cloud Foundry so today I'm going to use

00:03:54,150 --> 00:03:58,280
pivotal z' but everything we do should

00:03:56,400 --> 00:04:02,820
work very similarly and all the others

00:03:58,280 --> 00:04:05,850
all right so I'm going to have login

00:04:02,820 --> 00:04:09,450
know typically I have in my history this

00:04:05,850 --> 00:04:11,850
command or a version of it so it's got

00:04:09,450 --> 00:04:14,060
the - a flag which is going to point to

00:04:11,850 --> 00:04:17,370
which cloud foundry I'm going to talk to

00:04:14,060 --> 00:04:20,220
maybe I'll specify an organization there

00:04:17,370 --> 00:04:21,660
- oh flag my account happens to have a

00:04:20,220 --> 00:04:23,850
couple of different organizations so I'm

00:04:21,660 --> 00:04:25,410
just sort of short-circuiting and I

00:04:23,850 --> 00:04:27,009
already know what space I'm going to go

00:04:25,410 --> 00:04:29,439
into because I've done this

00:04:27,009 --> 00:04:32,650
and our before it turned up but the most

00:04:29,439 --> 00:04:35,139
interesting one here is the - SSO flag

00:04:32,650 --> 00:04:37,360
many people might never have even tried

00:04:35,139 --> 00:04:39,039
this flag and what this means is I'm not

00:04:37,360 --> 00:04:43,629
going to put my username password into

00:04:39,039 --> 00:04:46,300
my terminal so when I run this I get

00:04:43,629 --> 00:04:48,249
given this URL they'll just pop that up

00:04:46,300 --> 00:04:49,629
I've already logged in so I feel like I

00:04:48,249 --> 00:04:53,199
might have short-circuited something

00:04:49,629 --> 00:04:56,830
cheated you out of so normally you would

00:04:53,199 --> 00:04:57,759
need to login and pivitol 'he's got

00:04:56,830 --> 00:05:00,099
there you AAA

00:04:57,759 --> 00:05:01,569
configured this this way so I need to

00:05:00,099 --> 00:05:04,629
first just confirm that to the account

00:05:01,569 --> 00:05:07,360
and then and the reason I like that -

00:05:04,629 --> 00:05:08,710
SSO flag is I could use one password in

00:05:07,360 --> 00:05:10,900
my browser and I just feel a lot more

00:05:08,710 --> 00:05:14,680
secure about this process then having my

00:05:10,900 --> 00:05:17,349
password you know in my history I get

00:05:14,680 --> 00:05:19,629
this copy and paste that into there and

00:05:17,349 --> 00:05:21,819
now I'm logged in your two-factor

00:05:19,629 --> 00:05:24,669
authentication that's my process I like

00:05:21,819 --> 00:05:27,389
that it means I'm not sort of lured into

00:05:24,669 --> 00:05:30,969
putting my password in my terminal

00:05:27,389 --> 00:05:37,120
because it's fast and and we're logged

00:05:30,969 --> 00:05:40,839
in so the next thing we're gonna do is

00:05:37,120 --> 00:05:43,569
deploy an app which is the literal title

00:05:40,839 --> 00:05:45,819
of the talk so leave that till the end

00:05:43,569 --> 00:05:47,979
like it's a big surprise in order to

00:05:45,819 --> 00:05:49,149
deploy an app we need one now this is

00:05:47,979 --> 00:05:50,589
where everyone will have their own

00:05:49,149 --> 00:05:52,930
favorite language not many people

00:05:50,589 --> 00:05:56,529
probably doing multiple programming

00:05:52,930 --> 00:05:59,589
languages regularly so I will be wrong

00:05:56,529 --> 00:06:01,990
for 90% of people depending on what

00:05:59,589 --> 00:06:03,430
language I pick so I'm just going to

00:06:01,990 --> 00:06:05,649
live with it I'm gonna pick Ruby oh I

00:06:03,430 --> 00:06:07,839
like Ruby and it's small and it's easy

00:06:05,649 --> 00:06:09,189
to look at and you know there's not a

00:06:07,839 --> 00:06:11,379
lot of things and you'll go a different

00:06:09,189 --> 00:06:13,089
language just how cool because if you

00:06:11,379 --> 00:06:15,789
can deploy with if you're a Java person

00:06:13,089 --> 00:06:18,339
and you can push a Java app now that the

00:06:15,789 --> 00:06:20,349
deploying part is taken care of you can

00:06:18,339 --> 00:06:23,229
now start to dabble in other languages

00:06:20,349 --> 00:06:25,449
just because it's you know the

00:06:23,229 --> 00:06:26,620
deployment parts easy the only part

00:06:25,449 --> 00:06:28,180
you've got to figure out what does a

00:06:26,620 --> 00:06:29,740
ruby app look like what does a no doubt

00:06:28,180 --> 00:06:30,759
look like what does a little go-go lane

00:06:29,740 --> 00:06:33,879
app look like

00:06:30,759 --> 00:06:35,759
so I I've made a little app and I've put

00:06:33,879 --> 00:06:38,919
it at a handy URL so I could remember it

00:06:35,759 --> 00:06:40,600
it's just a gist that's all it is so you

00:06:38,919 --> 00:06:44,560
can supersede that's just

00:06:40,600 --> 00:06:46,900
just goes to a gift that I've pushed it

00:06:44,560 --> 00:06:49,120
is literally tiniest little app you

00:06:46,900 --> 00:06:52,630
could imagine I have a dependency

00:06:49,120 --> 00:06:55,510
gemfile is the Ruby equivalent of like

00:06:52,630 --> 00:06:59,290
package Jason for jar for JavaScript or

00:06:55,510 --> 00:07:04,600
nodejs palm or there's a list of

00:06:59,290 --> 00:07:06,790
dependencies and my app is in this

00:07:04,600 --> 00:07:09,730
config dot are you I'm super tiny little

00:07:06,790 --> 00:07:11,830
app I mean even if you don't know Ruby

00:07:09,730 --> 00:07:14,740
you can figure what this does and right

00:07:11,830 --> 00:07:16,900
here it's gonna say hello world that's

00:07:14,740 --> 00:07:19,570
what we're looking forward that's you

00:07:16,900 --> 00:07:20,980
know because the nap and it's every app

00:07:19,570 --> 00:07:26,820
should say hello world until you have a

00:07:20,980 --> 00:07:29,170
reason for not to so all right now

00:07:26,820 --> 00:07:31,930
ideally I should be able to run my app

00:07:29,170 --> 00:07:33,700
locally even though it's truly my belief

00:07:31,930 --> 00:07:34,840
that you want to get off your laptop as

00:07:33,700 --> 00:07:38,230
quickly as possible when you're starting

00:07:34,840 --> 00:07:39,910
your project there's there's nothing in

00:07:38,230 --> 00:07:41,890
our profession where it works on your

00:07:39,910 --> 00:07:43,420
laptop but doesn't in production there

00:07:41,890 --> 00:07:46,630
was a very funny Twitter message once

00:07:43,420 --> 00:07:48,130
that was a joke where the sysadmin has

00:07:46,630 --> 00:07:50,110
come to that to the developer and said

00:07:48,130 --> 00:07:52,060
doesn't work and the developer said

00:07:50,110 --> 00:07:53,350
works on my laptop and the sister had

00:07:52,060 --> 00:07:54,670
been said will they're back up your

00:07:53,350 --> 00:07:57,370
email because that's gone into

00:07:54,670 --> 00:07:59,950
production so we want to get off your

00:07:57,370 --> 00:08:01,810
laptop and want you just to live in in

00:07:59,950 --> 00:08:04,770
production but first and foremost you

00:08:01,810 --> 00:08:07,390
probably want to run on your laptop so

00:08:04,770 --> 00:08:09,490
let's show you some Ruby things that

00:08:07,390 --> 00:08:12,060
you'll never type again this is the

00:08:09,490 --> 00:08:15,700
equivalent of yarn install or you know

00:08:12,060 --> 00:08:18,280
Gradle just pulling down to penalties

00:08:15,700 --> 00:08:20,140
that created a little lock file

00:08:18,280 --> 00:08:27,010
describing all the dependencies that I

00:08:20,140 --> 00:08:29,170
want and then we're gonna run that this

00:08:27,010 --> 00:08:30,520
is just again all Ruby thinks you know

00:08:29,170 --> 00:08:33,669
that if I'm a ruby developer I know

00:08:30,520 --> 00:08:34,930
these things but you know and if you're

00:08:33,669 --> 00:08:36,340
on your language you know this is just

00:08:34,930 --> 00:08:38,169
your local stuff but what we're gonna

00:08:36,340 --> 00:08:41,370
look at soon as Cloud Foundry knows this

00:08:38,169 --> 00:08:43,870
stuff too without me even telling it

00:08:41,370 --> 00:08:47,110
okey-dokey so let's run my little local

00:08:43,870 --> 00:08:50,260
app what don't we're not 99 donno why

00:08:47,110 --> 00:08:52,730
did 1990 Fedders not useful but they're

00:08:50,260 --> 00:08:54,980
they're app working like a jiffy

00:08:52,730 --> 00:08:57,590
all right so I needed to know all that

00:08:54,980 --> 00:09:00,800
stuff I needed to know the Ruby way of

00:08:57,590 --> 00:09:02,510
running apps I needed to type it but as

00:09:00,800 --> 00:09:04,820
we move on to pushing an app we'll

00:09:02,510 --> 00:09:05,540
discover there's so we don't need to

00:09:04,820 --> 00:09:07,880
know this stuff

00:09:05,540 --> 00:09:10,070
Cloud Foundry and bill packs know this

00:09:07,880 --> 00:09:14,690
stuff for us

00:09:10,070 --> 00:09:17,420
so now CF push let's just make this look

00:09:14,690 --> 00:09:19,220
clean see if push tiny Ruby doesn't need

00:09:17,420 --> 00:09:22,400
to give it a name and this is a name

00:09:19,220 --> 00:09:23,660
that's specific to the space that we're

00:09:22,400 --> 00:09:25,640
in Cloud Foundry I'm not going to cover

00:09:23,660 --> 00:09:27,800
all the spaces but I do need just to

00:09:25,640 --> 00:09:30,320
give it a name and that will attempt to

00:09:27,800 --> 00:09:34,340
give it a route but you know let's just

00:09:30,320 --> 00:09:39,950
go with a random route there are many

00:09:34,340 --> 00:09:41,450
flags and we'll look at some of them so

00:09:39,950 --> 00:09:42,890
the first thing it's attempts to the

00:09:41,450 --> 00:09:45,920
first thing it does is serve generates a

00:09:42,890 --> 00:09:48,280
random route that is available it

00:09:45,920 --> 00:09:51,170
uploads my the code in this folder there

00:09:48,280 --> 00:09:53,540
are ways to ignore files so if you've

00:09:51,170 --> 00:09:55,610
got like a big logs folder or a node NPM

00:09:53,540 --> 00:09:57,590
no node modules and you don't want to

00:09:55,610 --> 00:10:00,590
upload those there is a dot C F in

00:09:57,590 --> 00:10:02,270
ignore file that you can use so you

00:10:00,590 --> 00:10:03,860
really don't want that to be a big thing

00:10:02,270 --> 00:10:05,750
one of the smallest possible things

00:10:03,860 --> 00:10:08,750
that's faster now look at this this is

00:10:05,750 --> 00:10:10,280
super interesting this is this is you

00:10:08,750 --> 00:10:12,710
know well Cloud Foundry does a lot of

00:10:10,280 --> 00:10:15,290
great stuff we're in day 2 onwards this

00:10:12,710 --> 00:10:17,780
is fantastic this business of you just

00:10:15,290 --> 00:10:20,030
give it some files and it goes to all

00:10:17,780 --> 00:10:23,020
these things called build packs and says

00:10:20,030 --> 00:10:25,930
hey which of you know what this is and

00:10:23,020 --> 00:10:30,860
so it asked the Ruby bill package net go

00:10:25,930 --> 00:10:31,310
PHP static file Java it asked all of

00:10:30,860 --> 00:10:33,140
them

00:10:31,310 --> 00:10:35,210
and the Ruby bill pack is the one that

00:10:33,140 --> 00:10:37,610
says I know what that is now

00:10:35,210 --> 00:10:39,950
specifically the Ruby build pack looks

00:10:37,610 --> 00:10:41,450
for a file called gem file and gem file

00:10:39,950 --> 00:10:43,790
dot lock and it says well if you've got

00:10:41,450 --> 00:10:47,300
those files I assume the rest of it is a

00:10:43,790 --> 00:10:49,490
ruby file a ruby app i've got that if it

00:10:47,300 --> 00:10:51,500
found a package dot jason it would say

00:10:49,490 --> 00:10:53,270
then the ruby app would probably ignore

00:10:51,500 --> 00:10:56,360
it a ruby build pack would ignore it and

00:10:53,270 --> 00:10:59,509
the node build pack would pick it up and

00:10:56,360 --> 00:11:01,250
so bill packs in this way of

00:10:59,509 --> 00:11:04,939
plug-and-play way of making Cloud

00:11:01,250 --> 00:11:06,439
Foundry is flexible as we need it so if

00:11:04,939 --> 00:11:08,509
your organization wants to start playing

00:11:06,439 --> 00:11:10,850
with rust and there's no rust build pack

00:11:08,509 --> 00:11:12,350
okay you can make a rust build pack

00:11:10,850 --> 00:11:14,709
there's probably three of them on the

00:11:12,350 --> 00:11:14,709
Internet

00:11:22,550 --> 00:11:26,600
that's a good question the question was

00:11:23,930 --> 00:11:29,480
what would happen if arguably to bill

00:11:26,600 --> 00:11:31,490
packs would match to that like a ruby

00:11:29,480 --> 00:11:33,470
app often a lot of apps will have some

00:11:31,490 --> 00:11:38,950
node for the for the style sheets and

00:11:33,470 --> 00:11:43,580
things and it all comes down to ordering

00:11:38,950 --> 00:11:44,810
this is in this cloud fairy the list of

00:11:43,580 --> 00:11:47,930
ordered so they're actually done in that

00:11:44,810 --> 00:11:50,540
order but if that order doesn't suit you

00:11:47,930 --> 00:11:52,040
you can actually be specific and you say

00:11:50,540 --> 00:11:57,649
this is the Bill pack and I will do that

00:11:52,040 --> 00:12:00,560
soon for you first one wins yep

00:11:57,649 --> 00:12:09,350
all right did we deploy her we did look

00:12:00,560 --> 00:12:10,790
at that go us so there is the URL and

00:12:09,350 --> 00:12:12,980
there's our holo world that's our holo

00:12:10,790 --> 00:12:16,370
world running on the internet somewhere

00:12:12,980 --> 00:12:18,110
don't care where you know the last thing

00:12:16,370 --> 00:12:19,310
I care right now is where it's running

00:12:18,110 --> 00:12:23,720
it works and there's this pretty

00:12:19,310 --> 00:12:25,700
fantastic you can see that it's there is

00:12:23,720 --> 00:12:31,010
the start command that it decided for us

00:12:25,700 --> 00:12:32,899
is going to work for us and interesting

00:12:31,010 --> 00:12:36,320
that it's allocated as one gig of ram

00:12:32,899 --> 00:12:40,190
and yet it says I only need 25 mega the

00:12:36,320 --> 00:12:45,410
stuff so perhaps we can we can look at

00:12:40,190 --> 00:12:47,990
optimizing that in a moment so when we

00:12:45,410 --> 00:12:51,529
push we can be we can give more

00:12:47,990 --> 00:12:54,920
suggestions as I said it by default it

00:12:51,529 --> 00:12:56,899
allocated a one gig container of ram and

00:12:54,920 --> 00:12:59,390
the reason that over allocates is

00:12:56,899 --> 00:13:03,290
because bad things happen when you run

00:12:59,390 --> 00:13:05,120
out of RAM it just things just die when

00:13:03,290 --> 00:13:08,270
you run out of RAM so Clara found you by

00:13:05,120 --> 00:13:10,010
default allocates a lot of RAM much more

00:13:08,270 --> 00:13:12,890
than nearly every app will ever need and

00:13:10,010 --> 00:13:14,930
it's left you to scale that back down to

00:13:12,890 --> 00:13:19,550
the size that your app will be happy

00:13:14,930 --> 00:13:21,709
with the ax minus B flag allows us to be

00:13:19,550 --> 00:13:25,279
specific about what Bill pack or Bill

00:13:21,709 --> 00:13:27,260
packs we want to use and and it's

00:13:25,279 --> 00:13:30,140
probably a good idea to start with with

00:13:27,260 --> 00:13:31,700
two instances now obviously that means

00:13:30,140 --> 00:13:33,980
you've got twice as much

00:13:31,700 --> 00:13:36,050
you've got cost something in some in

00:13:33,980 --> 00:13:38,240
some way you're paying for this but if

00:13:36,050 --> 00:13:39,860
you don't start with the idea that

00:13:38,240 --> 00:13:42,320
you've got two containers running and

00:13:39,860 --> 00:13:45,110
they don't share memory they don't share

00:13:42,320 --> 00:13:46,910
dis space if that way you'll be forced

00:13:45,110 --> 00:13:50,180
into that that realization that this is

00:13:46,910 --> 00:13:52,310
how things scale in in the cloud so

00:13:50,180 --> 00:13:54,200
starting with two means that you start

00:13:52,310 --> 00:13:57,350
with this idea that there's no shared

00:13:54,200 --> 00:13:58,250
memory no shared disk and don't pretend

00:13:57,350 --> 00:14:03,080
that that's the case

00:13:58,250 --> 00:14:07,130
so let's play with those flags so we had

00:14:03,080 --> 00:14:08,750
our CF push now we already have

00:14:07,130 --> 00:14:11,390
allocated or out so we can we can drop

00:14:08,750 --> 00:14:18,170
that now we can do - bill packs that was

00:14:11,390 --> 00:14:20,480
called the Ruby bill pack we want two

00:14:18,170 --> 00:14:29,600
instances we could pick any number and

00:14:20,480 --> 00:14:31,490
memory is 256 Meg is goody plenty and it

00:14:29,600 --> 00:14:32,780
would push that up again it'll give a

00:14:31,490 --> 00:14:35,600
visualization that we've changed

00:14:32,780 --> 00:14:36,110
something and we'll go through that

00:14:35,600 --> 00:14:39,830
process

00:14:36,110 --> 00:14:41,600
now when it does this a second time even

00:14:39,830 --> 00:14:44,510
though it's a tiny app and it did very

00:14:41,600 --> 00:14:47,990
little it doesn't even faster the second

00:14:44,510 --> 00:14:50,020
time because it starts to cache some of

00:14:47,990 --> 00:14:54,590
the decisions that made along the way

00:14:50,020 --> 00:14:58,070
because we did not change the

00:14:54,590 --> 00:15:00,650
dependencies you know a ruby person but

00:14:58,070 --> 00:15:02,480
we have a library called Sinatra I did

00:15:00,650 --> 00:15:04,580
not change what version of Sinatra I did

00:15:02,480 --> 00:15:06,050
not add any other versions so it does a

00:15:04,580 --> 00:15:08,440
really quick job of just saying you know

00:15:06,050 --> 00:15:12,560
I'm just going to use a caching layer

00:15:08,440 --> 00:15:13,910
and and drop those straight in which

00:15:12,560 --> 00:15:15,830
when you start to get lots and lots of

00:15:13,910 --> 00:15:17,240
dependencies not have to fetch them all

00:15:15,830 --> 00:15:22,340
from the internet a second time a third

00:15:17,240 --> 00:15:27,200
time is the super handy so now we can

00:15:22,340 --> 00:15:29,360
see we have two containers and and each

00:15:27,200 --> 00:15:34,580
of them uses only two and 56 mega RAM

00:15:29,360 --> 00:15:36,320
and and it no longer did that it only

00:15:34,580 --> 00:15:38,660
looked for the Ruby Bill pack which

00:15:36,320 --> 00:15:40,970
solved the problem of if they picked in

00:15:38,660 --> 00:15:45,060
the wrong order

00:15:40,970 --> 00:15:49,709
and of course we want to make sure it

00:15:45,060 --> 00:15:51,720
still works it is on that idea of

00:15:49,709 --> 00:15:53,639
multiple instances if you've got more

00:15:51,720 --> 00:15:57,420
than one instance the traffic is

00:15:53,639 --> 00:15:58,769
randomly allocated so should they each

00:15:57,420 --> 00:16:01,110
the containers behave differently in

00:15:58,769 --> 00:16:02,790
some way different traffic will go to

00:16:01,110 --> 00:16:04,290
each one and and sometimes people like

00:16:02,790 --> 00:16:07,230
to do little demos well they'll print in

00:16:04,290 --> 00:16:09,870
a number and approve something but just

00:16:07,230 --> 00:16:11,339
to be clear we've now got two they don't

00:16:09,870 --> 00:16:16,110
share memory they don't share disk

00:16:11,339 --> 00:16:18,569
please don't write to those things all

00:16:16,110 --> 00:16:21,990
right now even though the CF push

00:16:18,569 --> 00:16:25,889
command did all that magical stuff it

00:16:21,990 --> 00:16:27,779
gave us a large amount of RAM that we we

00:16:25,889 --> 00:16:29,970
then explicitly came down and said we

00:16:27,779 --> 00:16:32,009
want it less ram it only did one

00:16:29,970 --> 00:16:34,499
instance by default even though two or

00:16:32,009 --> 00:16:36,540
more is better and it didn't decide on

00:16:34,499 --> 00:16:39,209
any build packs up front it figured that

00:16:36,540 --> 00:16:41,220
out during staging there were flags for

00:16:39,209 --> 00:16:45,209
all of those things but I would ask you

00:16:41,220 --> 00:16:46,829
to then move on from flags and to create

00:16:45,209 --> 00:16:49,769
a gamble father describes these things

00:16:46,829 --> 00:16:51,269
it gives you some benefits later on that

00:16:49,769 --> 00:16:53,939
we're not going to get to but it is more

00:16:51,269 --> 00:16:55,259
explicit of what it is you want and it

00:16:53,939 --> 00:16:57,660
allows you to document

00:16:55,259 --> 00:17:00,000
perhaps what staging app looks like with

00:16:57,660 --> 00:17:01,620
it's URLs and perhaps what production

00:17:00,000 --> 00:17:04,439
app looks like when it's URLs and and

00:17:01,620 --> 00:17:06,209
and different environment variables so

00:17:04,439 --> 00:17:09,299
there is a command we could write the

00:17:06,209 --> 00:17:10,679
you know it's a Yambol file and since

00:17:09,299 --> 00:17:13,530
none of us know what the schemer that

00:17:10,679 --> 00:17:17,880
yellow file is they very helpfully made

00:17:13,530 --> 00:17:20,549
a little helpful app a little command so

00:17:17,880 --> 00:17:22,470
the create app manifest command takes

00:17:20,549 --> 00:17:25,890
the app that's already running and spits

00:17:22,470 --> 00:17:27,539
out the ml file and the we contribute

00:17:25,890 --> 00:17:34,020
that never happened so now everyone

00:17:27,539 --> 00:17:38,280
knows how we deployed this app so that's

00:17:34,020 --> 00:17:39,870
an example of a manifest and in there we

00:17:38,280 --> 00:17:42,210
can put environment variables so we

00:17:39,870 --> 00:17:45,809
could add build packs and we can make

00:17:42,210 --> 00:17:48,750
make changes so let's do that that's now

00:17:45,809 --> 00:17:52,020
also before I do that so now we don't

00:17:48,750 --> 00:17:53,930
need to if we look at CF health we'll

00:17:52,020 --> 00:17:59,100
see that

00:17:53,930 --> 00:18:00,780
whereas if - f path to manifest and it

00:17:59,100 --> 00:18:02,970
doesn't say the default but the default

00:18:00,780 --> 00:18:05,850
is what we have so now I don't need to

00:18:02,970 --> 00:18:08,280
do anything I can just do CF push it

00:18:05,850 --> 00:18:10,410
automatically finds the manifesto Yammer

00:18:08,280 --> 00:18:14,280
and automatically pulls in all those

00:18:10,410 --> 00:18:17,730
values and off it goes so let's make it

00:18:14,280 --> 00:18:22,610
change to that let's go five instances

00:18:17,730 --> 00:18:22,610
and let's add another route

00:18:37,100 --> 00:18:40,279
and that manifest doggie animals can be

00:18:38,899 --> 00:18:44,000
quite handy if you need to produce it

00:18:40,279 --> 00:18:46,789
during CI based on any inputs secrets

00:18:44,000 --> 00:18:49,519
inject secrets in there there are things

00:18:46,789 --> 00:18:53,330
you can do variables and lots of other

00:18:49,519 --> 00:18:56,929
little things that we would learn in

00:18:53,330 --> 00:18:58,159
subsequent talks but offer go so it's

00:18:56,929 --> 00:19:00,830
adding that new routes it's going to

00:18:58,159 --> 00:19:09,440
change to five instances and it will

00:19:00,830 --> 00:19:11,659
keep going until it finishes all right

00:19:09,440 --> 00:19:13,519
a really nice thing about given that

00:19:11,659 --> 00:19:15,559
it's a big multi-tenancy thing and and

00:19:13,519 --> 00:19:17,450
like this Cloud Foundry is not run by me

00:19:15,559 --> 00:19:19,820
it's run by someone else I can't just

00:19:17,450 --> 00:19:21,350
jump onto one of the servers rummage

00:19:19,820 --> 00:19:23,269
around looking for my container and

00:19:21,350 --> 00:19:24,679
start looking this locks Cloud Foundry

00:19:23,269 --> 00:19:27,440
is fundamentally a multi-tenant

00:19:24,679 --> 00:19:29,840
experience and so all the things you as

00:19:27,440 --> 00:19:32,960
a developer or an operator need to do it

00:19:29,840 --> 00:19:36,919
brings those to you it's in a safe and

00:19:32,960 --> 00:19:40,100
secure way logs being one of them so we

00:19:36,919 --> 00:19:42,350
have two ways to do logs not exactly

00:19:40,100 --> 00:19:46,129
sure why we have to have two of them but

00:19:42,350 --> 00:19:48,559
nonetheless see if logs tiny roomy so CF

00:19:46,129 --> 00:19:51,440
logs a name of the app and my and recent

00:19:48,559 --> 00:19:54,799
will give you a collection vlogs across

00:19:51,440 --> 00:19:58,610
all the app instances from some period

00:19:54,799 --> 00:20:00,620
of time that's got in this cache if you

00:19:58,610 --> 00:20:03,679
want like big history of logs that's

00:20:00,620 --> 00:20:06,710
where you would plug in third-party

00:20:03,679 --> 00:20:11,899
logging systems Splunk or some of the

00:20:06,710 --> 00:20:14,149
hosted ones and so you can sort of see

00:20:11,899 --> 00:20:16,519
that it's a we've got here container

00:20:14,149 --> 00:20:18,490
number for container number one can

00:20:16,519 --> 00:20:20,600
enter number two you know mat zero all

00:20:18,490 --> 00:20:23,179
starting up so they all look like this -

00:20:20,600 --> 00:20:24,919
it's in red but there's no error but

00:20:23,179 --> 00:20:28,669
they're all just starting up the other

00:20:24,919 --> 00:20:31,820
way we can do logs is we can tale the

00:20:28,669 --> 00:20:34,009
logs which but is the default command so

00:20:31,820 --> 00:20:36,830
all from now on any new request coming

00:20:34,009 --> 00:20:40,940
in any new logs that gets spat out from

00:20:36,830 --> 00:20:45,590
the application containers will show up

00:20:40,940 --> 00:20:47,840
there so you guys so we get to see the

00:20:45,590 --> 00:20:48,480
sort of a request metadata for that Rick

00:20:47,840 --> 00:20:52,260
for the

00:20:48,480 --> 00:20:55,350
request and any of the application logs

00:20:52,260 --> 00:20:59,580
noteworthy one of these is white one of

00:20:55,350 --> 00:21:03,840
these is red that is helpful unless you

00:20:59,580 --> 00:21:07,230
are a red white colorblind but it is the

00:21:03,840 --> 00:21:14,520
standard out and standard error so let's

00:21:07,230 --> 00:21:16,230
have a look-see at our little app so

00:21:14,520 --> 00:21:18,179
there we go so this is really way of

00:21:16,230 --> 00:21:19,740
saying printers standard out and this is

00:21:18,179 --> 00:21:21,450
the Ruby way of saying printers standard

00:21:19,740 --> 00:21:22,890
error and this is noteworthy because you

00:21:21,450 --> 00:21:24,110
might have previously written to log

00:21:22,890 --> 00:21:27,750
files

00:21:24,110 --> 00:21:29,190
so in Cloud Foundry log files will get

00:21:27,750 --> 00:21:30,990
written and they'll be seeing here on

00:21:29,190 --> 00:21:33,210
the file system but we don't have a nice

00:21:30,990 --> 00:21:34,980
way to get them back out the way we do

00:21:33,210 --> 00:21:37,260
logging in Cloud Foundry is you write to

00:21:34,980 --> 00:21:39,720
standard out the standard error and they

00:21:37,260 --> 00:21:42,750
will be consumed and and and fed back to

00:21:39,720 --> 00:21:45,690
the user or that or to the external log

00:21:42,750 --> 00:21:47,460
system sometimes it's just a matter of a

00:21:45,690 --> 00:21:49,260
configuration change you just write to

00:21:47,460 --> 00:21:50,610
your normal logging system but you just

00:21:49,260 --> 00:21:52,710
change that logging system to be

00:21:50,610 --> 00:21:58,850
standard out standard error rather than

00:21:52,710 --> 00:21:58,850
a file okey dokey

00:22:00,570 --> 00:22:06,910
now another really nice thing about the

00:22:03,250 --> 00:22:08,440
caf command-line tool is that so we saw

00:22:06,910 --> 00:22:09,910
that we could plug and play with build

00:22:08,440 --> 00:22:12,910
packs nother thing we can plug and play

00:22:09,910 --> 00:22:14,920
is with plugins plugins are a personal

00:22:12,910 --> 00:22:17,770
experience change Bill packs are shared

00:22:14,920 --> 00:22:25,290
by everyone plugins are just you locally

00:22:17,770 --> 00:22:25,290
and so if we go

00:22:31,420 --> 00:22:35,860
I've written one or two of these myself

00:22:33,060 --> 00:22:38,230
over time lots of different plugins

00:22:35,860 --> 00:22:40,090
sometimes they're for a point in time

00:22:38,230 --> 00:22:41,200
but we have some interesting ones around

00:22:40,090 --> 00:22:43,810
you know if you all the different bill

00:22:41,200 --> 00:22:45,850
packs being used helpful to figure out

00:22:43,810 --> 00:22:49,450
if anyone's using older plugins but bill

00:22:45,850 --> 00:22:50,740
packs we need to help them update doctor

00:22:49,450 --> 00:22:53,080
just look at the apps and see if there's

00:22:50,740 --> 00:22:54,760
any errors but the one I want to show

00:22:53,080 --> 00:22:58,890
you that might be one of the first ones

00:22:54,760 --> 00:23:01,960
you might want to load is called open

00:22:58,890 --> 00:23:05,620
the CF CLI does not have a nice way just

00:23:01,960 --> 00:23:10,180
to open an app into a browser plugins

00:23:05,620 --> 00:23:11,440
are a really simple way and you know we

00:23:10,180 --> 00:23:13,270
wrote a really service one of the first

00:23:11,440 --> 00:23:16,330
plugins ever written was like well we

00:23:13,270 --> 00:23:17,410
just want to open something but I

00:23:16,330 --> 00:23:21,670
thought it'd make a good good

00:23:17,410 --> 00:23:24,690
demonstration of barring slow internet

00:23:21,670 --> 00:23:24,690
would have made a great demonstration

00:23:24,990 --> 00:23:36,730
look it's already installed and and and

00:23:32,680 --> 00:23:38,890
this particular plug-in goes into the

00:23:36,730 --> 00:23:42,100
app finds out that it's got two routes

00:23:38,890 --> 00:23:44,980
I'm not sure why we chose to show them

00:23:42,100 --> 00:23:46,690
and pick one but you know pick one and

00:23:44,980 --> 00:23:49,450
then it will throw that up into the

00:23:46,690 --> 00:23:53,620
browser and so it's just it's it can be

00:23:49,450 --> 00:23:54,850
convenience helper okay now we will come

00:23:53,620 --> 00:23:58,330
back to that plug-in because it also

00:23:54,850 --> 00:23:59,410
helps bring up service dashboards but

00:23:58,330 --> 00:24:01,270
it's like there's lots of plugins

00:23:59,410 --> 00:24:04,480
there's 80 or so and they're pretty easy

00:24:01,270 --> 00:24:08,380
to write should you wish to extend your

00:24:04,480 --> 00:24:10,510
experience now applications we talked

00:24:08,380 --> 00:24:12,070
about that applications if you write to

00:24:10,510 --> 00:24:14,500
disk you will be sorely disappointed

00:24:12,070 --> 00:24:16,750
when later on the contents that you

00:24:14,500 --> 00:24:19,330
wrote to their disk aren't there because

00:24:16,750 --> 00:24:23,530
the life cycle of the container and it's

00:24:19,330 --> 00:24:25,270
disk is unknown the only card founder

00:24:23,530 --> 00:24:28,110
makes no promises of how long that

00:24:25,270 --> 00:24:31,720
container will last for personally I

00:24:28,110 --> 00:24:35,130
like if you've made no assumptions that

00:24:31,720 --> 00:24:35,130
container be there 24 hours later

00:24:35,980 --> 00:24:40,820
do not assume that your container will

00:24:38,420 --> 00:24:42,020
become more efficient over time with

00:24:40,820 --> 00:24:44,150
caching and things like that

00:24:42,020 --> 00:24:46,100
try to avoid that ending caching any

00:24:44,150 --> 00:24:48,170
disk any persistence you want to do

00:24:46,100 --> 00:24:49,700
outside of the container and the way

00:24:48,170 --> 00:24:51,620
that we do that or maybe make that

00:24:49,700 --> 00:24:54,230
convenient is with a marketplace of

00:24:51,620 --> 00:24:55,640
services and this is where everyone's

00:24:54,230 --> 00:24:58,820
Cloud Foundry starts to become a little

00:24:55,640 --> 00:25:01,730
different from each other because it

00:24:58,820 --> 00:25:05,630
depends on what your Cloud Foundry and

00:25:01,730 --> 00:25:08,510
your platform team want to offer things

00:25:05,630 --> 00:25:09,710
take time and money especially data you

00:25:08,510 --> 00:25:11,840
know the moment you start writing to a

00:25:09,710 --> 00:25:13,340
database you assume that someone's

00:25:11,840 --> 00:25:14,870
looking after it someone backing it up

00:25:13,340 --> 00:25:16,580
someone's going to provide services so

00:25:14,870 --> 00:25:19,430
they might not want to provide every

00:25:16,580 --> 00:25:21,110
database known to society they might

00:25:19,430 --> 00:25:24,590
just want one sequel database one

00:25:21,110 --> 00:25:29,000
message bus etc so the way we find out

00:25:24,590 --> 00:25:34,340
what we've got is with CF Marketplace

00:25:29,000 --> 00:25:35,960
and unfortunately the Cloud Foundry I'm

00:25:34,340 --> 00:25:39,530
talking to actually has a lot and that

00:25:35,960 --> 00:25:42,890
can take a little time to display that

00:25:39,530 --> 00:25:45,140
would come back to that but here is an

00:25:42,890 --> 00:25:47,540
example they have one called elephant

00:25:45,140 --> 00:25:50,840
sequel which happens to be Postgres

00:25:47,540 --> 00:25:53,690
there are so different plans turtle is

00:25:50,840 --> 00:25:55,760
free and I'm gonna be honest I'm a

00:25:53,690 --> 00:25:57,710
sucker for free things deep down there's

00:25:55,760 --> 00:25:59,330
a university student in me that still

00:25:57,710 --> 00:26:02,300
wants free stuff all the time and

00:25:59,330 --> 00:26:05,180
whether it's a sausage and bread or it's

00:26:02,300 --> 00:26:08,090
a free database I mean you know stickers

00:26:05,180 --> 00:26:09,590
whatever all right

00:26:08,090 --> 00:26:11,810
and not only do they have a lot of them

00:26:09,590 --> 00:26:14,150
they don't print very nicely

00:26:11,810 --> 00:26:17,570
there's lots but yours might only have a

00:26:14,150 --> 00:26:19,040
few so they have different names and and

00:26:17,570 --> 00:26:20,180
there's different vendors so there's

00:26:19,040 --> 00:26:21,920
lots of different people in the Cloud

00:26:20,180 --> 00:26:23,900
Foundry community who can provide your

00:26:21,920 --> 00:26:26,720
platform team with a database that you

00:26:23,900 --> 00:26:28,190
might want so it's a conversation this

00:26:26,720 --> 00:26:30,470
is where you go back to your platform

00:26:28,190 --> 00:26:32,150
operators say hey why don't we have

00:26:30,470 --> 00:26:35,930
Postgres Postgres is awesome

00:26:32,150 --> 00:26:37,580
and they say we like my sequel you know

00:26:35,930 --> 00:26:40,520
anyway they have a really adult

00:26:37,580 --> 00:26:45,560
conversation like that want it you can't

00:26:40,520 --> 00:26:46,860
have it like children anyway so let's

00:26:45,560 --> 00:26:48,780
create one

00:26:46,860 --> 00:26:52,560
let's make the font bigger again crate

00:26:48,780 --> 00:26:54,600
service so little command create service

00:26:52,560 --> 00:26:56,430
and let's give it a name DB it's a good

00:26:54,600 --> 00:26:58,530
name as any and what this is doing is

00:26:56,430 --> 00:27:01,350
it's the command line tool saying to

00:26:58,530 --> 00:27:03,840
Cloud Foundry I want this database Cloud

00:27:01,350 --> 00:27:05,370
Foundry it's plug and play again it goes

00:27:03,840 --> 00:27:07,200
off to what's called a service broker a

00:27:05,370 --> 00:27:09,360
bit of internal teacher something and

00:27:07,200 --> 00:27:11,940
the service broker is is has that

00:27:09,360 --> 00:27:14,310
abstracted understanding of what is this

00:27:11,940 --> 00:27:17,310
request so there is like an elephant's

00:27:14,310 --> 00:27:20,550
equal service broker or equivalent and

00:27:17,310 --> 00:27:21,690
it gets the request and says goddess let

00:27:20,550 --> 00:27:24,980
me go and create one of those for you

00:27:21,690 --> 00:27:28,260
whatever that thing is in this case a

00:27:24,980 --> 00:27:30,630
elephant's equal turtle plan is like a

00:27:28,260 --> 00:27:33,000
shared database on an existing Postgres

00:27:30,630 --> 00:27:34,350
cluster I think I didn't write it

00:27:33,000 --> 00:27:39,240
that's just my understanding of what

00:27:34,350 --> 00:27:41,190
they did so now it exists but we can't

00:27:39,240 --> 00:27:43,440
use it yet because we haven't got user

00:27:41,190 --> 00:27:47,460
name password so in Cloud Foundry that's

00:27:43,440 --> 00:27:48,930
called binding so we bind the service to

00:27:47,460 --> 00:27:53,670
our application Tony

00:27:48,930 --> 00:27:55,140
Rudy now the another request that goes

00:27:53,670 --> 00:27:56,940
from the command line tool to cloud

00:27:55,140 --> 00:27:58,590
foundry and Cloud Foundry fords it onto

00:27:56,940 --> 00:28:00,930
the service broker and the service

00:27:58,590 --> 00:28:01,410
broker takes it and says a binding I can

00:28:00,930 --> 00:28:04,080
do that

00:28:01,410 --> 00:28:06,930
in Postgres that means creating a user

00:28:04,080 --> 00:28:08,910
perhaps creating some roles and and

00:28:06,930 --> 00:28:11,070
generating passwords and then returning

00:28:08,910 --> 00:28:13,590
them back to the Cloud Foundry and then

00:28:11,070 --> 00:28:17,790
back to the user or to the application

00:28:13,590 --> 00:28:20,880
sorry and and now it exists so if I now

00:28:17,790 --> 00:28:22,590
restart my app you might think what

00:28:20,880 --> 00:28:24,510
exactly there's a hollow world app do

00:28:22,590 --> 00:28:26,400
with the database and that is an

00:28:24,510 --> 00:28:30,060
excellent question it does nothing with

00:28:26,400 --> 00:28:32,850
it nothing about what I just did makes

00:28:30,060 --> 00:28:34,740
an app know what Postgres is so your

00:28:32,850 --> 00:28:37,350
application still needs to know what

00:28:34,740 --> 00:28:41,790
Postgres is how to talk to Postgres what

00:28:37,350 --> 00:28:45,150
we have done so far is is create one and

00:28:41,790 --> 00:28:46,920
make it give it credentials and then

00:28:45,150 --> 00:28:49,250
we'd have to add Postgres support where

00:28:46,920 --> 00:28:49,250
happen

00:28:50,480 --> 00:28:55,710
good question

00:28:52,470 --> 00:28:57,840
I you would have noticed that up here

00:28:55,710 --> 00:29:02,070
when I did the bind command it said use

00:28:57,840 --> 00:29:05,669
CF free stage and then I didn't like a

00:29:02,070 --> 00:29:09,960
champion make my own path do what the

00:29:05,669 --> 00:29:12,029
command light tells me so which leads to

00:29:09,960 --> 00:29:13,379
the question the question was I was the

00:29:12,029 --> 00:29:15,619
difference between restage which had

00:29:13,379 --> 00:29:20,190
told me to run and restart which I ran

00:29:15,619 --> 00:29:22,320
so restart takes staging when we did

00:29:20,190 --> 00:29:24,509
push we did see if push that long

00:29:22,320 --> 00:29:26,970
process of discovering it was a ruby

00:29:24,509 --> 00:29:28,950
build pack pulling in a version of ruby

00:29:26,970 --> 00:29:30,690
pulling in version ruby gems falling all

00:29:28,950 --> 00:29:32,850
the gems and everything and making it

00:29:30,690 --> 00:29:35,220
what we call a droplet that's called

00:29:32,850 --> 00:29:38,330
staging and then we take that's like a

00:29:35,220 --> 00:29:42,749
docker image so it's our own internal

00:29:38,330 --> 00:29:45,149
interpretation because we exist longer

00:29:42,749 --> 00:29:48,059
than Daka does that's called a droplet

00:29:45,149 --> 00:29:49,409
and then when we start the app we

00:29:48,059 --> 00:29:52,649
basically just run copies of that

00:29:49,409 --> 00:29:54,389
droplet and so restart basically says

00:29:52,649 --> 00:29:57,659
just take the last drop it was good

00:29:54,389 --> 00:30:01,049
enough just started again but with new

00:29:57,659 --> 00:30:02,909
environment variables restage goes back

00:30:01,049 --> 00:30:05,549
and says take the source code we already

00:30:02,909 --> 00:30:08,039
had and just do that dual pack thing

00:30:05,549 --> 00:30:10,710
again and then restart and now the

00:30:08,039 --> 00:30:12,749
reason that it suggested restaging is

00:30:10,710 --> 00:30:15,749
because it's more likely that it will

00:30:12,749 --> 00:30:18,929
cover all edge cases but pretty much

00:30:15,749 --> 00:30:20,100
most apps don't need restaging just

00:30:18,929 --> 00:30:24,539
because some environment variables

00:30:20,100 --> 00:30:27,269
changed so it's like an old idea of Java

00:30:24,539 --> 00:30:29,970
apps needed to create config files and

00:30:27,269 --> 00:30:32,159
whatever I don't know how many use cases

00:30:29,970 --> 00:30:33,950
there are for restaging but thank you

00:30:32,159 --> 00:30:37,169
for the question

00:30:33,950 --> 00:30:38,519
so so my app is still a hollow world out

00:30:37,169 --> 00:30:40,980
but still doesn't know what Postgres is

00:30:38,519 --> 00:30:47,519
but we have given it Postgres which

00:30:40,980 --> 00:30:49,710
leads to the last thing which is SSH so

00:30:47,519 --> 00:30:51,299
we've got logs we've got databases and

00:30:49,710 --> 00:30:54,239
message buses and email and also

00:30:51,299 --> 00:30:55,919
different services we've got scaling and

00:30:54,239 --> 00:30:56,999
yes there are more commands you don't

00:30:55,919 --> 00:30:58,370
have to you see if push for all these

00:30:56,999 --> 00:31:00,410
things but we have to

00:30:58,370 --> 00:31:05,510
minutes and this is SSH the last thing I

00:31:00,410 --> 00:31:08,030
want to show you so I had five

00:31:05,510 --> 00:31:10,309
application instances running I'm not

00:31:08,030 --> 00:31:12,410
gonna reservation to all of them it's

00:31:10,309 --> 00:31:15,160
going to put me in one of them if you

00:31:12,410 --> 00:31:24,730
have a specific need to get into others

00:31:15,160 --> 00:31:28,970
you can do that alright so here we are

00:31:24,730 --> 00:31:30,860
now this is all gobbledygook and I'll

00:31:28,970 --> 00:31:32,210
come back to why that's gobbledygook is

00:31:30,860 --> 00:31:34,820
there this is nothing looks doesn't look

00:31:32,210 --> 00:31:36,940
anything like my app but what is useful

00:31:34,820 --> 00:31:39,350
right up front is the environment and

00:31:36,940 --> 00:31:42,429
this is all the different environment

00:31:39,350 --> 00:31:45,410
variables that were provided to our app

00:31:42,429 --> 00:31:48,650
you might like to use some of them note

00:31:45,410 --> 00:31:50,270
worthily is port that's the port that

00:31:48,650 --> 00:31:53,410
your application can buy it should bind

00:31:50,270 --> 00:31:56,420
to in order to receive HTTP traffic

00:31:53,410 --> 00:31:58,040
Cloud Foundry does do multiple ports and

00:31:56,420 --> 00:32:02,660
other things so they might be provide

00:31:58,040 --> 00:32:11,870
somewhere you can look up there's one

00:32:02,660 --> 00:32:13,730
called echo beak app application and it

00:32:11,870 --> 00:32:15,350
includes the URLs that were bound to

00:32:13,730 --> 00:32:16,460
your app so that can be useful because

00:32:15,350 --> 00:32:19,760
sometimes you might want to provide

00:32:16,460 --> 00:32:22,070
those back to users what what is my URL

00:32:19,760 --> 00:32:24,160
so you can dynamically look that up the

00:32:22,070 --> 00:32:30,710
one that we just looked at was services

00:32:24,160 --> 00:32:33,440
so how would we find what the their

00:32:30,710 --> 00:32:35,390
Postgres that world is given its

00:32:33,440 --> 00:32:38,510
provided through this vcap services

00:32:35,390 --> 00:32:42,140
environment variable which is this big

00:32:38,510 --> 00:32:44,240
JSON object and if you have multiple

00:32:42,140 --> 00:32:46,280
without an email and Postgres and an s3

00:32:44,240 --> 00:32:48,380
bucket it all be in there and it's your

00:32:46,280 --> 00:32:51,470
applications responsibility to look

00:32:48,380 --> 00:32:55,610
through this and find credentials which

00:32:51,470 --> 00:32:57,020
we can see here and yeah so anyway your

00:32:55,610 --> 00:32:59,630
application probably do this in memory

00:32:57,020 --> 00:33:02,450
but JQ is also on the filing system so

00:32:59,630 --> 00:33:04,760
you can sort of do that as well but your

00:33:02,450 --> 00:33:07,250
application and most languages have a

00:33:04,760 --> 00:33:08,290
Cloud Foundry library that's good at

00:33:07,250 --> 00:33:10,960
pausing this thing

00:33:08,290 --> 00:33:12,880
I think I can't think of a language that

00:33:10,960 --> 00:33:14,050
doesn't have one and if you have got a

00:33:12,880 --> 00:33:16,570
new language it doesn't have a nice

00:33:14,050 --> 00:33:17,800
library for pausing this let me know and

00:33:16,570 --> 00:33:22,870
that you can find it perhaps we can

00:33:17,800 --> 00:33:28,690
write one together this temp lifecycle

00:33:22,870 --> 00:33:30,760
she'll actually have it as a as a

00:33:28,690 --> 00:33:32,230
snippet and what that does is that now

00:33:30,760 --> 00:33:33,580
puts us in their application anyway

00:33:32,230 --> 00:33:34,890
there's blog post about this but that

00:33:33,580 --> 00:33:37,720
makes sure that you've got everything

00:33:34,890 --> 00:33:39,160
that your application expects but I feel

00:33:37,720 --> 00:33:42,250
like that needs more introduction so I

00:33:39,160 --> 00:33:45,610
wish I'd never do and and we talked

00:33:42,250 --> 00:33:48,100
about that I will just show one little

00:33:45,610 --> 00:33:50,320
example so we run ghost stock of Wayne

00:33:48,100 --> 00:33:52,840
we run ghost as our blog we run it on

00:33:50,320 --> 00:33:55,540
Cloud Foundry in order to set it up I

00:33:52,840 --> 00:33:57,880
needed to take the bindings that came in

00:33:55,540 --> 00:34:00,370
and create a JSON file that ghost would

00:33:57,880 --> 00:34:02,620
use to load it up so rather than fix it

00:34:00,370 --> 00:34:05,620
in JavaScript at runtime I just generate

00:34:02,620 --> 00:34:08,560
a big and so we actually pause this

00:34:05,620 --> 00:34:11,250
thing in at start time so there's a if

00:34:08,560 --> 00:34:13,990
your application has a dot profile file

00:34:11,250 --> 00:34:15,399
it is run before every container is

00:34:13,990 --> 00:34:18,909
wrong so it's a great way to generate

00:34:15,399 --> 00:34:21,429
config files anything at runtime so I

00:34:18,909 --> 00:34:24,040
mentioned it as an example I have had to

00:34:21,429 --> 00:34:26,379
look in this B cap services run up

00:34:24,040 --> 00:34:28,450
through Jake Jake you pull at values

00:34:26,379 --> 00:34:30,340
crate config flow there we are look at

00:34:28,450 --> 00:34:32,950
creating a big JSON file config father

00:34:30,340 --> 00:34:36,100
ghost once rather than go modify ghost

00:34:32,950 --> 00:34:38,470
just don't run in Cloud Foundry so the

00:34:36,100 --> 00:34:41,100
doc profiles is a great solution to how

00:34:38,470 --> 00:34:44,590
do i generate confit based on at runtime

00:34:41,100 --> 00:34:46,389
and that's that's it I hope if you don't

00:34:44,590 --> 00:34:50,050
have a cloud foundry already these were

00:34:46,389 --> 00:34:52,210
each of these Alice has a free plan or

00:34:50,050 --> 00:34:55,840
at least you can sign up possibly with

00:34:52,210 --> 00:34:57,940
the exception of cloud gov and there is

00:34:55,840 --> 00:35:01,210
not just my video but many other getting

00:34:57,940 --> 00:35:03,010
started videos and if you have any

00:35:01,210 --> 00:35:05,730
questions now or later please please ask

00:35:03,010 --> 00:35:05,730
thank you very much

00:35:11,420 --> 00:35:18,230
we had some lovely questions already if

00:35:13,800 --> 00:35:18,230
if anyone else has one you may ask

00:35:30,560 --> 00:35:35,750
yep

00:35:32,690 --> 00:35:38,690
staging that I appreciate that as they

00:35:35,750 --> 00:35:40,549
are to use of the word staging club

00:35:38,690 --> 00:35:44,180
foundry has not so I say staging a

00:35:40,549 --> 00:35:47,059
production okay good question so the

00:35:44,180 --> 00:35:50,240
question was I used the word staging

00:35:47,059 --> 00:35:52,250
twice once I said staging a production

00:35:50,240 --> 00:35:53,839
there's like a pipeline and later on I

00:35:52,250 --> 00:35:56,329
made reference to when we talked about

00:35:53,839 --> 00:35:58,339
restaging that the CF push does a

00:35:56,329 --> 00:36:00,380
staging process they are different uses

00:35:58,339 --> 00:36:04,760
of the word staging and for that I

00:36:00,380 --> 00:36:06,470
apologize and so once you start

00:36:04,760 --> 00:36:09,289
deploying apps once you realize how easy

00:36:06,470 --> 00:36:10,819
it is to point out once why wouldn't you

00:36:09,289 --> 00:36:12,589
just deployed a second time and say well

00:36:10,819 --> 00:36:14,750
the first ones out one that always

00:36:12,589 --> 00:36:16,549
deploy too and once we're happy we can

00:36:14,750 --> 00:36:17,750
deploy it again to production and

00:36:16,549 --> 00:36:19,849
perhaps you want to start deploying off

00:36:17,750 --> 00:36:21,380
branches and want you know that you can

00:36:19,849 --> 00:36:24,049
do anything you like it's so easy to

00:36:21,380 --> 00:36:26,750
deploy and create new routes and delete

00:36:24,049 --> 00:36:28,220
the CF delete and you delete an app so

00:36:26,750 --> 00:36:30,160
you becomes really easy to start

00:36:28,220 --> 00:36:33,349
imagining an entire pipeline of

00:36:30,160 --> 00:36:36,950
deployment and so I apologize I would

00:36:33,349 --> 00:36:39,289
say staging test whatever and then

00:36:36,950 --> 00:36:41,150
production is what I mean and that is

00:36:39,289 --> 00:36:43,760
not a concept that cloud foundry has

00:36:41,150 --> 00:36:46,069
formally you would make that up yourself

00:36:43,760 --> 00:36:48,049
this app is most edging out that one's

00:36:46,069 --> 00:36:50,150
production really is a function of what

00:36:48,049 --> 00:36:53,660
people use it for if no one knows about

00:36:50,150 --> 00:36:54,890
staging app that's the staging app the

00:36:53,660 --> 00:36:57,890
production app is the one people

00:36:54,890 --> 00:36:59,660
complained about when it goes down and

00:36:57,890 --> 00:37:03,079
yes then I use staging refer to the bill

00:36:59,660 --> 00:37:05,589
back process I apologize good pickup

00:37:03,079 --> 00:37:05,589
sorry about that

00:37:06,490 --> 00:37:13,239
cool well thank you very much

00:37:10,040 --> 00:37:13,239

YouTube URL: https://www.youtube.com/watch?v=GDdSdqXH6KQ


