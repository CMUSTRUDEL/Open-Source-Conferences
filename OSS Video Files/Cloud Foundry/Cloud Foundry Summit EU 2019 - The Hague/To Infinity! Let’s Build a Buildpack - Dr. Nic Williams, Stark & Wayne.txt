Title: To Infinity! Let’s Build a Buildpack - Dr. Nic Williams, Stark & Wayne
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	To Infinity! Let’s Build a Buildpack - Dr. Nic Williams, Stark & Wayne 

Cloud Foundry is now almost infinitely configurable thanks to user-provided buildpacks, multi-buildpacks, and new support for sidecars. It is important for developers, operators, and management to know of the full power of Cloud Foundry as a lifetime container management platform.
  
  In this session we bite off one small piece - a look at how to build your own buildpacks, how to bundle assets, how to change environment variables, create files, and to run sidecars.
  
  This session will introduce you to the Buildpack Core teams toolchain to allow you to rapidly create, test, and deploy your own buildpacks. I will review my own buildpacks, which use their tools, during this session."

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,060 --> 00:00:05,700
in order to have respect for time I will

00:00:03,470 --> 00:00:08,040
have some reference to time in front of

00:00:05,700 --> 00:00:12,059
me welcome everyone my name is dr. Nik

00:00:08,040 --> 00:00:15,690
Williams I like build packs I am I'm

00:00:12,059 --> 00:00:18,390
vaguely aware that in the we are in the

00:00:15,690 --> 00:00:22,980
101 introduction to all things audience

00:00:18,390 --> 00:00:23,640
and since I know what we're about to

00:00:22,980 --> 00:00:26,390
talk about

00:00:23,640 --> 00:00:30,650
I am vaguely aware that we might dip

00:00:26,390 --> 00:00:34,980
strongly away from 101 into maybe 102

00:00:30,650 --> 00:00:36,600
possibly 201 it's type references and if

00:00:34,980 --> 00:00:38,940
you've not been a university and don't

00:00:36,600 --> 00:00:43,680
know what those numbers mean they're

00:00:38,940 --> 00:00:45,059
very funny and so but we are going to

00:00:43,680 --> 00:00:48,210
talk about Bill backs and at the start

00:00:45,059 --> 00:00:51,239
we will introduce them having said that

00:00:48,210 --> 00:00:53,730
and one of the reasons I think that

00:00:51,239 --> 00:00:56,250
we're not a 101 talk is that everything

00:00:53,730 --> 00:00:58,410
I'm about to talk about now isn't really

00:00:56,250 --> 00:00:58,949
for Cloud Foundry today so that's

00:00:58,410 --> 00:01:01,410
awkward

00:00:58,949 --> 00:01:02,850
and because they're like many things

00:01:01,410 --> 00:01:05,640
where you know how something's built

00:01:02,850 --> 00:01:07,799
it's very enticing to want to talk about

00:01:05,640 --> 00:01:09,840
what's coming rather than what you can

00:01:07,799 --> 00:01:12,869
use right now so bill Pak says we have

00:01:09,840 --> 00:01:14,580
them right now are wonderful I'm gonna

00:01:12,869 --> 00:01:15,840
go demonstration of if you don't see if

00:01:14,580 --> 00:01:18,450
push should be so much torque yesterday

00:01:15,840 --> 00:01:20,310
you'll see bill packs live in action but

00:01:18,450 --> 00:01:21,869
when it comes to building new bill packs

00:01:20,310 --> 00:01:23,670
you're more than welcome to build bill

00:01:21,869 --> 00:01:26,280
packs for Cloud Foundry today we're

00:01:23,670 --> 00:01:29,520
going to call them v3 bill packs build

00:01:26,280 --> 00:01:31,290
v2 bill packs but what I want to talk

00:01:29,520 --> 00:01:32,759
about is v3 because it's more future

00:01:31,290 --> 00:01:34,200
proof and the things we're going to talk

00:01:32,759 --> 00:01:36,030
about are going to benefit you for the

00:01:34,200 --> 00:01:37,619
next five to ten years whether you with

00:01:36,030 --> 00:01:41,490
Cloud Foundry whether you need to put

00:01:37,619 --> 00:01:43,110
apps somewhere else but nonetheless what

00:01:41,490 --> 00:01:46,140
we're going to talk about here will not

00:01:43,110 --> 00:01:47,909
affect your users that's right

00:01:46,140 --> 00:01:49,920
if you're building bill packs you are no

00:01:47,909 --> 00:01:52,470
longer a user of Cloud Foundry you're

00:01:49,920 --> 00:01:55,979
helping users we are making things that

00:01:52,470 --> 00:01:57,420
make developers lives better and now you

00:01:55,979 --> 00:01:59,250
might be doing multiple roles in your

00:01:57,420 --> 00:02:01,259
life but I am talking about you as a

00:01:59,250 --> 00:02:03,750
person who is helping make developers

00:02:01,259 --> 00:02:06,810
lives better so whether we talk about v2

00:02:03,750 --> 00:02:08,879
or v3 it is all for the benefit of Cloud

00:02:06,810 --> 00:02:11,150
Foundry users so a little bit of a

00:02:08,879 --> 00:02:13,200
history of what I mean by v2 and v3

00:02:11,150 --> 00:02:16,470
because I certainly needed clarify

00:02:13,200 --> 00:02:17,730
occasion when I first discovered Cloud

00:02:16,470 --> 00:02:21,599
Foundry when it was first released in

00:02:17,730 --> 00:02:24,420
2011 it did not have bill packs but

00:02:21,599 --> 00:02:28,080
Heroku from where build packs came from

00:02:24,420 --> 00:02:29,550
which first came out in 2005 67 they

00:02:28,080 --> 00:02:31,170
came out with this concept of bill packs

00:02:29,550 --> 00:02:34,080
Heroku was originally just for deploying

00:02:31,170 --> 00:02:36,030
Ruby apps turns out there are other apps

00:02:34,080 --> 00:02:37,950
that need help deploying into the

00:02:36,030 --> 00:02:39,599
Internet and so they come up with this

00:02:37,950 --> 00:02:41,580
sort of plug-and-play method of saying

00:02:39,599 --> 00:02:43,950
well how about we don't just hide code

00:02:41,580 --> 00:02:46,049
the magic of taking a Java app and

00:02:43,950 --> 00:02:49,890
running it how about we put that in a

00:02:46,049 --> 00:02:51,840
public open source git repo so anyone

00:02:49,890 --> 00:02:53,400
can curate it on our behalf and make it

00:02:51,840 --> 00:02:55,590
better for all Heroku people and

00:02:53,400 --> 00:02:58,530
subsequently all Cloud Foundry people so

00:02:55,590 --> 00:03:00,840
Bill pack for one a way of allowing

00:02:58,530 --> 00:03:03,540
different types of applications source

00:03:00,840 --> 00:03:05,750
code or artifacts to be run but also a

00:03:03,540 --> 00:03:11,069
way of even though Heroku itself is

00:03:05,750 --> 00:03:12,840
proprietary build packs Republic and and

00:03:11,069 --> 00:03:14,640
also for a Cloud Foundry even though the

00:03:12,840 --> 00:03:17,970
Cloud Foundry your users might be using

00:03:14,640 --> 00:03:20,450
might be somewhat complex to use build

00:03:17,970 --> 00:03:23,549
packs are relatively understandable

00:03:20,450 --> 00:03:25,200
depending on how they're written so in

00:03:23,549 --> 00:03:27,000
the early days when pivotal took over

00:03:25,200 --> 00:03:28,639
Cloud Foundry one of the first things

00:03:27,000 --> 00:03:33,090
they wanted to do is add build packs

00:03:28,639 --> 00:03:36,180
2013 and then what immediately we just

00:03:33,090 --> 00:03:37,950
took all the Haruka's bill packs sounds

00:03:36,180 --> 00:03:40,410
good and then we started rewriting them

00:03:37,950 --> 00:03:43,769
we rewrote them primarily to add offline

00:03:40,410 --> 00:03:45,660
support so the bill packs could be fully

00:03:43,769 --> 00:03:47,100
enclosed your Cloud Foundry plus build

00:03:45,660 --> 00:03:48,870
packs could be put into a dark data

00:03:47,100 --> 00:03:52,170
center without any egress access to

00:03:48,870 --> 00:03:55,139
internet and keep working so that all

00:03:52,170 --> 00:03:57,720
the dependencies were local in the last

00:03:55,139 --> 00:03:59,670
couple of years the the API is that

00:03:57,720 --> 00:04:01,950
Heroku and Cloud Foundry support sort of

00:03:59,670 --> 00:04:03,540
evolved we know when started supporting

00:04:01,950 --> 00:04:06,870
what we call supply bill packs what a

00:04:03,540 --> 00:04:08,760
supply bill pack is it means that yes

00:04:06,870 --> 00:04:11,880
your application might be a Java wrap or

00:04:08,760 --> 00:04:15,569
a ruby app or an ode app but what if you

00:04:11,880 --> 00:04:18,720
also need some debian package or you

00:04:15,569 --> 00:04:21,599
also need node even though it's a ruby

00:04:18,720 --> 00:04:23,820
app can you add other dependencies into

00:04:21,599 --> 00:04:26,430
you know your application and supply

00:04:23,820 --> 00:04:27,060
bill packs allowed us another language

00:04:26,430 --> 00:04:29,460
for it might

00:04:27,060 --> 00:04:31,440
Multi pill pack we started to add a way

00:04:29,460 --> 00:04:33,120
to do multiple bill packs so the

00:04:31,440 --> 00:04:35,190
application could have one bill pack

00:04:33,120 --> 00:04:36,389
that ran the thing but then some other

00:04:35,190 --> 00:04:39,270
bill packs that added some extra

00:04:36,389 --> 00:04:41,310
dependencies and we now have you know

00:04:39,270 --> 00:04:43,260
there's one for imagemagick so even

00:04:41,310 --> 00:04:46,020
though there's a base image magic on the

00:04:43,260 --> 00:04:48,330
image magic six what if you want image

00:04:46,020 --> 00:04:50,040
magic 7 or there's an image magic 7 bill

00:04:48,330 --> 00:04:51,480
pack and you can just add it in there or

00:04:50,040 --> 00:04:53,570
be added to your droplet and your

00:04:51,480 --> 00:04:56,970
application will now get image magic 7

00:04:53,570 --> 00:05:00,120
free TDS is another one and there's lots

00:04:56,970 --> 00:05:01,650
of other community once sorry

00:05:00,120 --> 00:05:03,300
the heroic you people and the Cloud

00:05:01,650 --> 00:05:04,889
Foundry people specifically pivotal at

00:05:03,300 --> 00:05:07,110
this point pivotal is a primary

00:05:04,889 --> 00:05:09,690
contribution I think I have a shout out

00:05:07,110 --> 00:05:11,130
to them in a second they met the Heroku

00:05:09,690 --> 00:05:12,530
people of vice versa and decided you

00:05:11,130 --> 00:05:14,850
know what things are getting complicated

00:05:12,530 --> 00:05:16,260
we have all these sort of multi bill

00:05:14,850 --> 00:05:17,910
pack stories and you want to tell and

00:05:16,260 --> 00:05:20,160
really we're coming to the end of life

00:05:17,910 --> 00:05:23,400
of what we can do let's get together and

00:05:20,160 --> 00:05:26,430
discuss V 3 V 3 is not just for cloud

00:05:23,400 --> 00:05:29,970
foundry and Heroku it's for everyone so

00:05:26,430 --> 00:05:31,140
the ideas here and once the videos come

00:05:29,970 --> 00:05:33,240
out for the conference I gave a talk

00:05:31,140 --> 00:05:35,640
yesterday on bringing build packs to

00:05:33,240 --> 00:05:38,610
kubernetes and I focused entirely on

00:05:35,640 --> 00:05:40,590
these v3 build packs as well so the idea

00:05:38,610 --> 00:05:42,240
of these bill packs allow us a process

00:05:40,590 --> 00:05:44,370
of building docker images or OSI eyes

00:05:42,240 --> 00:05:45,840
that you could take anywhere once they

00:05:44,370 --> 00:05:48,210
come into Cloud Foundry that'll all be

00:05:45,840 --> 00:05:49,590
transparent I'll still just PCF push but

00:05:48,210 --> 00:05:52,200
you'll start to see these outputs

00:05:49,590 --> 00:05:54,030
turning up in Cloud Foundry if you can't

00:05:52,200 --> 00:05:55,680
wait then you can still you know take

00:05:54,030 --> 00:05:57,600
the docker image and deploy it but I

00:05:55,680 --> 00:06:02,520
want you to be building future-proof

00:05:57,600 --> 00:06:04,080
bill packs and then so and this whole

00:06:02,520 --> 00:06:05,639
new bill pack stuff the exciting part of

00:06:04,080 --> 00:06:07,590
it is also it's done outside of Cloud

00:06:05,639 --> 00:06:09,300
Foundry both in terms of code but also

00:06:07,590 --> 00:06:12,979
in terms of it's part of the C&C F

00:06:09,300 --> 00:06:14,940
rather than the CF foundation I

00:06:12,979 --> 00:06:16,440
personally need to ignore this pivotal

00:06:14,940 --> 00:06:19,380
someone spent a gazillion dollars

00:06:16,440 --> 00:06:21,780
looking after this bill packs and

00:06:19,380 --> 00:06:24,539
sometimes that money spent doesn't seem

00:06:21,780 --> 00:06:26,789
to gain appreciation you assume they

00:06:24,539 --> 00:06:28,500
work you assume someone will fix them

00:06:26,789 --> 00:06:29,910
you assume they'll be updated

00:06:28,500 --> 00:06:32,550
you know the moment the new version of

00:06:29,910 --> 00:06:34,919
Java comes out open JDK how quickly will

00:06:32,550 --> 00:06:38,340
that turn up in a build pack all that

00:06:34,919 --> 00:06:41,160
takes time and money and and pivotal has

00:06:38,340 --> 00:06:42,750
been doing that for five six years

00:06:41,160 --> 00:06:44,250
the new bill packs there's a lot of

00:06:42,750 --> 00:06:45,930
content now that I'm gonna show it to

00:06:44,250 --> 00:06:47,270
you you're gonna want to learn more you

00:06:45,930 --> 00:06:50,610
might need to explain to other people

00:06:47,270 --> 00:06:52,259
between Heroku and pivotal and lesser

00:06:50,610 --> 00:06:53,759
extent myself there's a lot of videos

00:06:52,259 --> 00:06:55,850
and content from the last year or so

00:06:53,759 --> 00:06:58,590
since they started sharing this stuff

00:06:55,850 --> 00:06:59,960
alright let's have a quick look at what

00:06:58,590 --> 00:07:02,660
the new bill PACs are going to look like

00:06:59,960 --> 00:07:04,830
since they're not in Cloud Foundry yet

00:07:02,660 --> 00:07:07,259
we do have a way to play with them

00:07:04,830 --> 00:07:14,910
that's very exciting but wee bit boring

00:07:07,259 --> 00:07:17,490
otherwise and so let's play with them so

00:07:14,910 --> 00:07:19,889
I have a node app and a Java app because

00:07:17,490 --> 00:07:22,800
I'll be dull if I just did one and all

00:07:19,889 --> 00:07:28,169
we need to do really is give it a name

00:07:22,800 --> 00:07:31,320
so we'll call it my my node and and this

00:07:28,169 --> 00:07:33,060
this is kind of like UCF push with just

00:07:31,320 --> 00:07:36,210
the staging process it's not gonna run

00:07:33,060 --> 00:07:39,389
it anywhere it will just build that that

00:07:36,210 --> 00:07:41,400
intermediate image that you would run

00:07:39,389 --> 00:07:45,690
which I will run we saw the afterwards

00:07:41,400 --> 00:07:47,550
so I have to get rid of why do I have

00:07:45,690 --> 00:07:50,310
notifications if I turned off go away

00:07:47,550 --> 00:07:55,560
computer it's near clock I don't need to

00:07:50,310 --> 00:07:58,010
be getting slack messengers so now some

00:07:55,560 --> 00:08:02,550
language has changed from from CF push

00:07:58,010 --> 00:08:04,169
to me v3 but the idea is the same and

00:08:02,550 --> 00:08:06,260
now just to compare since we're on the

00:08:04,169 --> 00:08:09,419
track there's the introduction check

00:08:06,260 --> 00:08:12,120
when we do CF push there's two parts one

00:08:09,419 --> 00:08:14,550
is we do staging that's what it spits

00:08:12,120 --> 00:08:17,490
out a lot of text and says it's a ruby

00:08:14,550 --> 00:08:20,159
app and then it spits out a lot of Ruby

00:08:17,490 --> 00:08:22,919
things or it figures out it's a Java app

00:08:20,159 --> 00:08:24,110
downloads all of the Internet no no that

00:08:22,919 --> 00:08:26,039
doesn't do that you've already done that

00:08:24,110 --> 00:08:27,330
because you've already got the jar

00:08:26,039 --> 00:08:30,630
you've got blow the jar Java is

00:08:27,330 --> 00:08:33,209
different and the second part is that

00:08:30,630 --> 00:08:34,919
runs it it's got that droplet and then

00:08:33,209 --> 00:08:37,140
it will run it to for having the

00:08:34,919 --> 00:08:39,300
instances so what we're doing here is

00:08:37,140 --> 00:08:40,770
just the staging the building of the of

00:08:39,300 --> 00:08:42,719
the artifact in this case we're building

00:08:40,770 --> 00:08:44,550
a docker image so we're going through

00:08:42,719 --> 00:08:46,890
and we're saying hey you've given me

00:08:44,550 --> 00:08:48,360
some source code allow me to figure out

00:08:46,890 --> 00:08:49,920
what it is this is one of the great

00:08:48,360 --> 00:08:53,400
things about pill packs is the automatic

00:08:49,920 --> 00:08:54,050
detection so now there's a lot of build

00:08:53,400 --> 00:08:57,090
packs

00:08:54,050 --> 00:08:59,550
one notable thing we've done as we go

00:08:57,090 --> 00:09:02,280
from V to current Cloud Foundry where we

00:08:59,550 --> 00:09:06,030
have one Java Bill pack we now have many

00:09:02,280 --> 00:09:08,310
Java bill packs and what this means is

00:09:06,030 --> 00:09:10,110
that there is that like an open JDK Bill

00:09:08,310 --> 00:09:12,720
pack but they could also be an Oracle

00:09:10,110 --> 00:09:14,010
JDK pew book bill back well whichever is

00:09:12,720 --> 00:09:16,800
your favorite you know whatever you're

00:09:14,010 --> 00:09:18,540
paying for in terms of JDK you could

00:09:16,800 --> 00:09:20,790
have a build pack that wraps up that

00:09:18,540 --> 00:09:23,970
build packs become more of a packaging

00:09:20,790 --> 00:09:26,190
system as much as anything else and then

00:09:23,970 --> 00:09:28,140
later on how we run our Java app will

00:09:26,190 --> 00:09:31,500
depend on what type of Java we've got so

00:09:28,140 --> 00:09:33,720
spring boot so the the the runtime and

00:09:31,500 --> 00:09:35,010
the JDK is different from how we run it

00:09:33,720 --> 00:09:38,100
and so lots of different build packs an

00:09:35,010 --> 00:09:40,770
important part of v3 my no doubt is not

00:09:38,100 --> 00:09:42,540
a java app so they all fail and and then

00:09:40,770 --> 00:09:46,350
it succeeds discovering that it's a node

00:09:42,540 --> 00:09:48,600
app to build packs for node node engine

00:09:46,350 --> 00:09:51,810
which is going to drop on nodejs and

00:09:48,600 --> 00:09:54,720
yarn which is the packaging system for

00:09:51,810 --> 00:09:57,900
finding NPM bundles there is another one

00:09:54,720 --> 00:10:00,150
for if you don't use yarn but use NPM

00:09:57,900 --> 00:10:01,860
there is no one for that and then off it

00:10:00,150 --> 00:10:04,950
goes now we move on to we've done

00:10:01,860 --> 00:10:07,080
discovery now we move on to building we

00:10:04,950 --> 00:10:09,780
in this case that's downloading things

00:10:07,080 --> 00:10:11,580
from the internet which is a valid place

00:10:09,780 --> 00:10:14,640
to pull things from so it's picked a

00:10:11,580 --> 00:10:16,110
version of node how its figured that out

00:10:14,640 --> 00:10:17,880
would be based on the node build pack

00:10:16,110 --> 00:10:19,800
PAP sell something and my package so

00:10:17,880 --> 00:10:23,810
Jason which suggested what version of

00:10:19,800 --> 00:10:26,010
node I'm ok with and then it moves on to

00:10:23,810 --> 00:10:28,350
setting up some environment variables

00:10:26,010 --> 00:10:31,290
that make it happy and then it moves on

00:10:28,350 --> 00:10:33,000
to the next Bill pack remember v3 Bill

00:10:31,290 --> 00:10:35,610
packs more than likely you're going to

00:10:33,000 --> 00:10:37,910
be accepting multiple bill packs so we

00:10:35,610 --> 00:10:42,030
don't just have one nodejs bill pack now

00:10:37,910 --> 00:10:45,960
we have in this case - not just one java

00:10:42,030 --> 00:10:47,940
bill pack but like five so reason for

00:10:45,960 --> 00:10:50,460
giving a talk and how to make bill packs

00:10:47,940 --> 00:10:52,800
is there are will be more reasons than

00:10:50,460 --> 00:10:55,020
before to make new bill packs there'll

00:10:52,800 --> 00:10:58,380
be more opportunities to slide them into

00:10:55,020 --> 00:11:00,810
your environments your users will be

00:10:58,380 --> 00:11:02,280
operating therefore I want you to know

00:11:00,810 --> 00:11:04,830
how to make them I want you to know that

00:11:02,280 --> 00:11:06,390
they can be very simple and I want you

00:11:04,830 --> 00:11:06,890
to know that because the cloud boundary

00:11:06,390 --> 00:11:10,220
ones

00:11:06,890 --> 00:11:12,710
I'm not simple now III want to protect

00:11:10,220 --> 00:11:13,070
you I want to love you I'm gonna protect

00:11:12,710 --> 00:11:14,720
you

00:11:13,070 --> 00:11:16,370
you're gonna think I should make a bill

00:11:14,720 --> 00:11:18,410
pact and I should go and look at the

00:11:16,370 --> 00:11:20,030
cloud country cloud native bill packs

00:11:18,410 --> 00:11:23,450
which are under the Cloud Foundry

00:11:20,030 --> 00:11:25,700
goetaborg and you might think this is

00:11:23,450 --> 00:11:28,490
gonna be easy peasy but they're all

00:11:25,700 --> 00:11:31,370
written in go and it can be quite

00:11:28,490 --> 00:11:32,780
complicated and whilst you might it

00:11:31,370 --> 00:11:35,090
might be more difficult than it should

00:11:32,780 --> 00:11:36,800
when you're first learning and I want to

00:11:35,090 --> 00:11:39,550
protect you from making terrible life

00:11:36,800 --> 00:11:41,510
choices and doing docker files instead

00:11:39,550 --> 00:11:43,940
all right if you're about to make a

00:11:41,510 --> 00:11:46,640
docker file I want you to call me on the

00:11:43,940 --> 00:11:50,780
hotline dr. NIC I'm about to make a

00:11:46,640 --> 00:11:51,950
docker file please stop me it's the

00:11:50,780 --> 00:11:54,200
equivalent of standing on a bridge

00:11:51,950 --> 00:11:56,440
looking over the abyss alright I will

00:11:54,200 --> 00:11:58,250
help you through this terrible time and

00:11:56,440 --> 00:12:00,160
so today I'm going to teach you about

00:11:58,250 --> 00:12:04,400
Bill packs and how simple they can be

00:12:00,160 --> 00:12:05,960
and eventually it does node yarn things

00:12:04,400 --> 00:12:08,300
of downloading packages is all happening

00:12:05,960 --> 00:12:10,310
side the build system not on my laptop

00:12:08,300 --> 00:12:14,060
and in this case inside docker and then

00:12:10,310 --> 00:12:16,280
it spits out an image now I asked it to

00:12:14,060 --> 00:12:20,450
be called my node app that by default

00:12:16,280 --> 00:12:23,870
means a docker IO hub URL and an offer

00:12:20,450 --> 00:12:26,060
Coase which means it is local I didn't

00:12:23,870 --> 00:12:29,720
publish it yet so I can I can run that

00:12:26,060 --> 00:12:31,730
now it is an app the pro very used to

00:12:29,720 --> 00:12:32,780
things you do and see if push being apps

00:12:31,730 --> 00:12:35,240
they supposed to be long-running

00:12:32,780 --> 00:12:37,820
processes that bind to things the demo

00:12:35,240 --> 00:12:39,800
I'm going to give you later on is is not

00:12:37,820 --> 00:12:41,960
that it's we're gonna solve the fizzbuzz

00:12:39,800 --> 00:12:45,050
problem with build packs which is so

00:12:41,960 --> 00:12:47,210
stupid that it still makes me laugh but

00:12:45,050 --> 00:12:50,360
in this case our I've no doubt is a is a

00:12:47,210 --> 00:12:53,200
is a process an HTTP app and we do need

00:12:50,360 --> 00:12:55,670
to let traffic in so let's do that now

00:12:53,200 --> 00:12:57,500
just to be clear about what we did we

00:12:55,670 --> 00:12:59,660
took some source code we spat out a

00:12:57,500 --> 00:13:01,430
docker image not just that has our

00:12:59,660 --> 00:13:04,880
source code in it but knows how to run

00:13:01,430 --> 00:13:06,680
itself well you know CF put us all bit

00:13:04,880 --> 00:13:07,760
to magical deep sometimes don't quite

00:13:06,680 --> 00:13:09,950
clear about what's going on

00:13:07,760 --> 00:13:12,080
I made a docker image without a build

00:13:09,950 --> 00:13:14,600
pack without a docker file I'll say it

00:13:12,080 --> 00:13:17,390
again I made a docker image without a

00:13:14,600 --> 00:13:19,010
docker file they converted source code

00:13:17,390 --> 00:13:19,720
into something that knows how to run

00:13:19,010 --> 00:13:22,030
itself

00:13:19,720 --> 00:13:23,980
wherever you know good docker images

00:13:22,030 --> 00:13:26,320
know how to run and you can see that

00:13:23,980 --> 00:13:28,390
it's running a port 8080 fortunately in

00:13:26,320 --> 00:13:30,520
my docker run command I let that run

00:13:28,390 --> 00:13:34,660
pass through to my local machine and so

00:13:30,520 --> 00:13:37,030
if I do curl on the right port good to

00:13:34,660 --> 00:13:44,470
go look at that I am you know having a

00:13:37,030 --> 00:13:55,240
good time okay so so so okay I didn't

00:13:44,470 --> 00:13:57,010
put minus TI excellent go team

00:13:55,240 --> 00:13:58,690
and there is the equivalent for the Java

00:13:57,010 --> 00:14:03,130
one which I didn't run and it takes

00:13:58,690 --> 00:14:04,540
forever so the Java one would look

00:14:03,130 --> 00:14:06,010
similar up spring it would figure out

00:14:04,540 --> 00:14:09,610
that it's a spring app we want to use

00:14:06,010 --> 00:14:11,080
Tomcat we don't want JDBC whatever and

00:14:09,610 --> 00:14:12,850
you might want to add additional bill

00:14:11,080 --> 00:14:14,740
package there bill packs in there that

00:14:12,850 --> 00:14:16,840
do some other testing put some other

00:14:14,740 --> 00:14:19,900
dependencies in perhaps make some config

00:14:16,840 --> 00:14:22,000
files perhaps whatever okay and if you

00:14:19,900 --> 00:14:23,800
know how to do it then you can add value

00:14:22,000 --> 00:14:28,870
to your entire organization not just you

00:14:23,800 --> 00:14:31,000
know your team all right now if you

00:14:28,870 --> 00:14:32,380
wanted to deploy now there's new bill

00:14:31,000 --> 00:14:33,760
bill packs and use them and see if you

00:14:32,380 --> 00:14:35,670
can't they just docker images Cloud

00:14:33,760 --> 00:14:39,730
Foundry for many users supported

00:14:35,670 --> 00:14:41,020
deploying docker apps which I get a

00:14:39,730 --> 00:14:43,630
little frustrated when I do the Cloud

00:14:41,020 --> 00:14:45,580
Foundry survey and it says what is your

00:14:43,630 --> 00:14:47,380
favorite orchestration system for

00:14:45,580 --> 00:14:51,280
running docker images and Cloud Foundry

00:14:47,380 --> 00:14:53,830
is not under the goddamn list I said god

00:14:51,280 --> 00:14:57,360
damn because we're in Netherlands we've

00:14:53,830 --> 00:15:03,280
been damming God for a long time here

00:14:57,360 --> 00:15:05,020
I'm not sure if that's true so so bill

00:15:03,280 --> 00:15:07,480
packs now we are talking about fee 3 if

00:15:05,020 --> 00:15:08,620
you've ever built a bit v2 one you'll

00:15:07,480 --> 00:15:11,260
see that it's slightly different than

00:15:08,620 --> 00:15:13,870
this but it's just two two commands so

00:15:11,260 --> 00:15:15,850
is it weird to talk about an API being

00:15:13,870 --> 00:15:19,060
commands that are run but this is how

00:15:15,850 --> 00:15:21,940
they work they are executables that are

00:15:19,060 --> 00:15:23,550
run and we call it the API there's an

00:15:21,940 --> 00:15:26,410
argument passed into them which will

00:15:23,550 --> 00:15:29,740
introduce some of them but essentially

00:15:26,410 --> 00:15:32,800
when we do the detect phase where we

00:15:29,740 --> 00:15:35,050
decided isn't a Java app is it a node

00:15:32,800 --> 00:15:37,660
is that a go app is it a fizzbuzz app

00:15:35,050 --> 00:15:41,950
because that's coming up that's right

00:15:37,660 --> 00:15:44,250
fizzbuzz you know we get to find out

00:15:41,950 --> 00:15:47,020
look at the source code or the artifact

00:15:44,250 --> 00:15:49,089
is it something that we can handle and

00:15:47,020 --> 00:15:51,640
then build is where we'll inject

00:15:49,089 --> 00:15:55,270
dependencies perhaps unpack Ruby unpack

00:15:51,640 --> 00:15:56,620
Java and optionally we might set up a

00:15:55,270 --> 00:16:02,800
process for how this thing would run

00:15:56,620 --> 00:16:04,180
itself okay now we will come back to

00:16:02,800 --> 00:16:07,149
build packs because that's what we're

00:16:04,180 --> 00:16:10,750
going to be building but when we do

00:16:07,149 --> 00:16:13,390
Cloud Foundry we we have CF push as an

00:16:10,750 --> 00:16:17,200
operator the way we mutate an update and

00:16:13,390 --> 00:16:19,510
collect our build packs is there is a CF

00:16:17,200 --> 00:16:21,700
create build pack command or CF update

00:16:19,510 --> 00:16:24,760
bill pack and there is a global ordered

00:16:21,700 --> 00:16:26,200
list of build packs so when see if push

00:16:24,760 --> 00:16:27,940
is done it'll go through that list in

00:16:26,200 --> 00:16:29,800
order and what I mean by that is you can

00:16:27,940 --> 00:16:32,589
actually go to your CF as an admin and

00:16:29,800 --> 00:16:34,300
change the order so that Ruby apps get

00:16:32,589 --> 00:16:39,339
detected first and Java wraps the last

00:16:34,300 --> 00:16:41,980
or whatever and so when we move away

00:16:39,339 --> 00:16:43,959
from that global system we introduce a

00:16:41,980 --> 00:16:47,050
new first class concept called the

00:16:43,959 --> 00:16:52,000
Builder and the Builder is essentially a

00:16:47,050 --> 00:16:53,500
collection of build packs in an order so

00:16:52,000 --> 00:16:54,940
builder is like our own little mini

00:16:53,500 --> 00:16:57,690
Cloud Foundry that just knows how to do

00:16:54,940 --> 00:17:00,640
staging the collection of build packs

00:16:57,690 --> 00:17:02,950
given a base OS than it knows how to

00:17:00,640 --> 00:17:05,860
work on and so there is a Cloud Foundry

00:17:02,950 --> 00:17:08,709
one full of the bill packs at the Cloud

00:17:05,860 --> 00:17:10,959
Foundry team a pivotal group in New York

00:17:08,709 --> 00:17:13,750
are working on and but what's cool is

00:17:10,959 --> 00:17:16,059
that you can both add to that or just

00:17:13,750 --> 00:17:18,730
make your own and we'll make our own

00:17:16,059 --> 00:17:21,660
because that's fun but I will run this

00:17:18,730 --> 00:17:21,660
command for your benefit

00:17:28,020 --> 00:17:33,640
this is like the fun bag this is like

00:17:30,340 --> 00:17:35,440
the the demonstrate how cool this is

00:17:33,640 --> 00:17:37,000
because it's got all the build packs in

00:17:35,440 --> 00:17:38,950
it this is the one I was demonstrating

00:17:37,000 --> 00:17:41,080
before when it was implicit when I did

00:17:38,950 --> 00:17:44,290
pack build I'd already set this as my

00:17:41,080 --> 00:17:45,820
default and it used this builder and you

00:17:44,290 --> 00:17:48,780
can see that it's got lots of build

00:17:45,820 --> 00:17:51,640
packs and this is the Java group and

00:17:48,780 --> 00:17:54,610
what it means is that is this group will

00:17:51,640 --> 00:17:58,660
be picked if all of the non optional

00:17:54,610 --> 00:18:01,420
ones succeed okay so if the open JDK

00:17:58,660 --> 00:18:03,250
detects succeeds and the Java JVM

00:18:01,420 --> 00:18:07,800
application build patter succeeds then

00:18:03,250 --> 00:18:11,200
this group will succeed all right so

00:18:07,800 --> 00:18:13,030
it's it's only vaguely interesting that

00:18:11,200 --> 00:18:14,590
you understand this right now back to

00:18:13,030 --> 00:18:19,960
what the bill pack looks like is far

00:18:14,590 --> 00:18:22,740
more important so I mentioned groups

00:18:19,960 --> 00:18:25,600
then there's actually two node groups

00:18:22,740 --> 00:18:26,830
both of them have node engine but one of

00:18:25,600 --> 00:18:28,930
them detects that it's a yarn

00:18:26,830 --> 00:18:33,100
application another one detects that

00:18:28,930 --> 00:18:35,500
it's a got a PAC package lock file so

00:18:33,100 --> 00:18:37,810
rather than take another programming

00:18:35,500 --> 00:18:41,110
language like that you know is is they

00:18:37,810 --> 00:18:42,280
wouldn't understand anyway well not

00:18:41,110 --> 00:18:44,590
everyone would understand I mean if I

00:18:42,280 --> 00:18:46,600
picked rust I wouldn't understand it

00:18:44,590 --> 00:18:48,670
so rather than rebuild an existing one

00:18:46,600 --> 00:18:51,490
like Ruby because there is already on

00:18:48,670 --> 00:18:53,380
the build packs IO website there is a

00:18:51,490 --> 00:18:54,550
walkthrough tutorial that you can go

00:18:53,380 --> 00:18:57,870
through I highly recommend it that

00:18:54,550 --> 00:19:00,630
builds a sort of a really build pack and

00:18:57,870 --> 00:19:02,920
so rather than just go through that

00:19:00,630 --> 00:19:04,270
which you can do yourself I came up with

00:19:02,920 --> 00:19:06,220
a brand new idea and that is we're going

00:19:04,270 --> 00:19:07,990
to solve the fizzbuzz problem using bill

00:19:06,220 --> 00:19:10,470
packs now this is obviously stupid

00:19:07,990 --> 00:19:12,370
I apologize for a simple stupidity

00:19:10,470 --> 00:19:13,840
because there's not really solving the

00:19:12,370 --> 00:19:16,030
fizzbuzz what we're going to do is we're

00:19:13,840 --> 00:19:21,910
going to take an application that has

00:19:16,030 --> 00:19:24,460
one file in it called count so this is

00:19:21,910 --> 00:19:27,190
my source code I'm gonna convert a count

00:19:24,460 --> 00:19:30,520
file into our docker image that runs and

00:19:27,190 --> 00:19:33,790
prints out a hard-coded value this is

00:19:30,520 --> 00:19:36,310
stupider than you can imagine it doesn't

00:19:33,790 --> 00:19:39,010
take a number right and spit out

00:19:36,310 --> 00:19:40,100
fizzbuzz based on that number no no it's

00:19:39,010 --> 00:19:44,750
worse than that

00:19:40,100 --> 00:19:46,640
it statically compiles a file and only

00:19:44,750 --> 00:19:48,080
ever prints out the value based on that

00:19:46,640 --> 00:19:49,400
file because it's a pill pack that's

00:19:48,080 --> 00:19:51,140
what it does so we're going to take

00:19:49,400 --> 00:19:56,210
depending on whether than that count

00:19:51,140 --> 00:19:59,450
file has a 1 3 5 9 15 will generate that

00:19:56,210 --> 00:20:00,830
fizzbuzz value forever I mean I could

00:19:59,450 --> 00:20:03,380
push this the internet and you can

00:20:00,830 --> 00:20:08,030
download to your docker and turn out the

00:20:03,380 --> 00:20:11,090
number because Doc's so cool so this is

00:20:08,030 --> 00:20:15,890
what our fizzbuzz will do and these are

00:20:11,090 --> 00:20:20,630
sort of pseudo commands but it's it's so

00:20:15,890 --> 00:20:27,250
dumb but what do we go build up all

00:20:20,630 --> 00:20:34,400
right so I got a I'll just do echo 15

00:20:27,250 --> 00:20:37,910
hell I can't do it the whole test app so

00:20:34,400 --> 00:20:41,270
blank folder is going to echo 15 into

00:20:37,910 --> 00:20:42,950
the file count so this is my app I'm

00:20:41,270 --> 00:20:44,570
gonna run a bill pack across this

00:20:42,950 --> 00:20:46,850
obviously if I gave this the Cloud

00:20:44,570 --> 00:20:47,480
Foundry bill pack builder they'd all

00:20:46,850 --> 00:20:50,690
failed

00:20:47,480 --> 00:20:52,250
none of them would succeed all right but

00:20:50,690 --> 00:20:59,750
we're gonna make a new one and what it

00:20:52,250 --> 00:21:01,010
will do is pack build alright and I've

00:20:59,750 --> 00:21:02,150
already done this work so I just want to

00:21:01,010 --> 00:21:03,260
show you the silliness of what we're

00:21:02,150 --> 00:21:05,390
gonna build and what this build pack

00:21:03,260 --> 00:21:07,940
looks like and but it teaches you the

00:21:05,390 --> 00:21:09,230
ideas of making a Bill pack without

00:21:07,940 --> 00:21:12,380
taking ourselves too seriously

00:21:09,230 --> 00:21:15,620
it resolved it detective my app says yes

00:21:12,380 --> 00:21:17,270
you have a count file I know what to do

00:21:15,620 --> 00:21:18,710
with that and then it goes on to a

00:21:17,270 --> 00:21:20,570
building and unfortunately I don't have

00:21:18,710 --> 00:21:24,470
any output and that wasn't very clever

00:21:20,570 --> 00:21:28,690
but it did spit out a docker file image

00:21:24,470 --> 00:21:32,240
called play time and it is runnable and

00:21:28,690 --> 00:21:33,920
it prints at fizzbuzz ok I can't believe

00:21:32,240 --> 00:21:38,360
I've spoken for total so long to cover

00:21:33,920 --> 00:21:40,880
so look I I do applaud so I'm going to

00:21:38,360 --> 00:21:43,400
show you these things and and I will

00:21:40,880 --> 00:21:46,010
produce there is this a git repo with a

00:21:43,400 --> 00:21:48,110
lot of this content and I will if you

00:21:46,010 --> 00:21:50,060
ask me nicely it will do YouTube videos

00:21:48,110 --> 00:21:51,350
if you don't ask you won't make them but

00:21:50,060 --> 00:21:53,330
if one person asks that's probably all

00:21:51,350 --> 00:21:53,810
it takes where I'll go through this in

00:21:53,330 --> 00:21:56,120
more linked

00:21:53,810 --> 00:21:58,040
given that the 20 minutes I spent

00:21:56,120 --> 00:22:01,400
introducing this problem doesn't allow

00:21:58,040 --> 00:22:04,430
for a lot of additional time but here is

00:22:01,400 --> 00:22:06,380
essentially the gist of of my build pack

00:22:04,430 --> 00:22:08,090
I said it was two files they're

00:22:06,380 --> 00:22:11,270
executables and I've written in the

00:22:08,090 --> 00:22:13,730
shell because that's a lot more readable

00:22:11,270 --> 00:22:19,220
so essentially the detect says or does

00:22:13,730 --> 00:22:21,680
it have a count file I feel like we

00:22:19,220 --> 00:22:23,480
should all fix things and and I don't

00:22:21,680 --> 00:22:28,160
need any of that but just need it to

00:22:23,480 --> 00:22:30,800
return but don't need to return zero if

00:22:28,160 --> 00:22:33,200
it succeeds or anything else if it fails

00:22:30,800 --> 00:22:36,140
so a little bit of bash testing is there

00:22:33,200 --> 00:22:37,580
a cap file and then the build one I the

00:22:36,140 --> 00:22:38,870
solution my problem is really just a

00:22:37,580 --> 00:22:41,030
bunch of static files which I'm going to

00:22:38,870 --> 00:22:43,370
show you that what the contents are but

00:22:41,030 --> 00:22:44,870
this is where you would unpack Ruby this

00:22:43,370 --> 00:22:46,790
is where you would unpack node this is

00:22:44,870 --> 00:22:50,300
where you would create configuration

00:22:46,790 --> 00:22:52,820
files in this build and this is what my

00:22:50,300 --> 00:22:56,410
files look like I will start with the

00:22:52,820 --> 00:22:59,660
one on the right which is my executable

00:22:56,410 --> 00:23:02,270
okay this is where I solve statically

00:22:59,660 --> 00:23:04,550
for my static count file it will look at

00:23:02,270 --> 00:23:08,300
that count file and convert it to fizz

00:23:04,550 --> 00:23:10,430
buzz since count never changes because

00:23:08,300 --> 00:23:12,140
it's static obvious the answer never

00:23:10,430 --> 00:23:15,320
changes but this is my interpretation of

00:23:12,140 --> 00:23:16,970
solving the problem in shell but what's

00:23:15,320 --> 00:23:19,820
important is that it's a runnable

00:23:16,970 --> 00:23:23,110
application I've taken the source and

00:23:19,820 --> 00:23:25,820
I've created a runnable application and

00:23:23,110 --> 00:23:27,680
so I'm basically creating that little

00:23:25,820 --> 00:23:30,710
file now this is again Ruby would be a

00:23:27,680 --> 00:23:32,210
or Java or jdk or whatever these are the

00:23:30,710 --> 00:23:34,040
runnable things that you might be adding

00:23:32,210 --> 00:23:36,910
with your Bill pack or you might be

00:23:34,040 --> 00:23:38,990
installing libraries system libraries or

00:23:36,910 --> 00:23:41,240
additional things than the file system

00:23:38,990 --> 00:23:44,570
in this case I'm installing an

00:23:41,240 --> 00:23:45,920
executable now my docker file my Belle

00:23:44,570 --> 00:23:49,580
pack is all-inclusive

00:23:45,920 --> 00:23:51,320
it not only installs software this is my

00:23:49,580 --> 00:23:55,490
excuse for a piece of software I

00:23:51,320 --> 00:23:57,500
installed this I'm very clever it

00:23:55,490 --> 00:23:59,090
assumes bashes on the system but I also

00:23:57,500 --> 00:24:02,810
want my docker image to know how to run

00:23:59,090 --> 00:24:07,400
itself and so the way we do that is we

00:24:02,810 --> 00:24:07,730
add a lor tamil file you know bill packs

00:24:07,400 --> 00:24:09,740
are

00:24:07,730 --> 00:24:12,230
because we're not using the amal or

00:24:09,740 --> 00:24:18,350
Jason we've moved on and we're using

00:24:12,230 --> 00:24:20,330
Tamil and for simple Tamil I can read it

00:24:18,350 --> 00:24:23,120
but my god it gets hard to read very

00:24:20,330 --> 00:24:27,169
quickly off the topic there is a little

00:24:23,120 --> 00:24:28,850
CLI called y YJ it's written by Steven

00:24:27,169 --> 00:24:31,100
Levine in the bill PAC team and it's

00:24:28,850 --> 00:24:34,190
awesome it doesn't end M of every

00:24:31,100 --> 00:24:36,590
different the Y amel to Tamil - Jason -

00:24:34,190 --> 00:24:39,590
you know so it's a super handy tool and

00:24:36,590 --> 00:24:41,330
often you convert Tamil into Jason and

00:24:39,590 --> 00:24:44,419
then put it in JQ and then you can

00:24:41,330 --> 00:24:46,370
understand what the hell it said so

00:24:44,419 --> 00:24:48,710
anyway this is Tamil so essentially a

00:24:46,370 --> 00:24:50,630
lot Tamil is where you say that there is

00:24:48,710 --> 00:24:53,120
a web process or other processes and

00:24:50,630 --> 00:24:54,590
that you might want to run or tasks and

00:24:53,120 --> 00:24:57,260
I'm saying that whenever this docker

00:24:54,590 --> 00:25:00,799
images run I want display count to be

00:24:57,260 --> 00:25:02,149
run and it's not a long-running process

00:25:00,799 --> 00:25:03,799
it's not like it starts a web app but

00:25:02,149 --> 00:25:06,039
just prints and answer and exits and

00:25:03,799 --> 00:25:08,769
that's okay that's why Mobile packed us

00:25:06,039 --> 00:25:11,480
we're not all about making web apps here

00:25:08,769 --> 00:25:14,570
you can do anything with build packs it

00:25:11,480 --> 00:25:17,539
doesn't have to be a web app compiled

00:25:14,570 --> 00:25:19,130
Java and put it in an output now and

00:25:17,539 --> 00:25:22,250
then a little bit of a nuance but then

00:25:19,130 --> 00:25:24,049
also we need to say this layer is going

00:25:22,250 --> 00:25:26,269
to go in the final docker image of and

00:25:24,049 --> 00:25:27,769
we won't cover any more of that yeah but

00:25:26,269 --> 00:25:32,110
that's essentially what's in my been my

00:25:27,769 --> 00:25:35,990
Bill pack and so you saw the output it

00:25:32,110 --> 00:25:38,389
resolves the yes this path has a count

00:25:35,990 --> 00:25:40,159
file in it and and then it would print

00:25:38,389 --> 00:25:41,630
out something my little demonstration

00:25:40,159 --> 00:25:43,419
really did not print it out but that's

00:25:41,630 --> 00:25:46,279
pretty good

00:25:43,419 --> 00:25:48,380
now there is a git repo that contains

00:25:46,279 --> 00:25:50,450
these examples and I've got a readme to

00:25:48,380 --> 00:25:52,220
it and it's very walkthrough Apple since

00:25:50,450 --> 00:25:53,870
that's more practical than me talking

00:25:52,220 --> 00:25:55,220
and you're doing nothing feel like I

00:25:53,870 --> 00:25:59,210
feel and tell me if I'm wrong but I feel

00:25:55,220 --> 00:26:01,220
like I'm doing all the work here so

00:25:59,210 --> 00:26:03,740
there is another example of another

00:26:01,220 --> 00:26:07,250
tiny little Bill pack which if there's a

00:26:03,740 --> 00:26:09,049
message file will detect it and when you

00:26:07,250 --> 00:26:11,630
run the final image it just prints it

00:26:09,049 --> 00:26:13,730
out similar but different but you can

00:26:11,630 --> 00:26:15,200
start to see how that detects work and

00:26:13,730 --> 00:26:18,110
you could put them together in a shared

00:26:15,200 --> 00:26:20,090
builder and give it either of those two

00:26:18,110 --> 00:26:20,950
types of source code and it will detect

00:26:20,090 --> 00:26:26,960
and print

00:26:20,950 --> 00:26:29,810
so here's an example of if we just gave

00:26:26,960 --> 00:26:33,140
it the fizzbuzz one then it would fail

00:26:29,810 --> 00:26:37,880
on our message no works that's a no

00:26:33,140 --> 00:26:41,600
contract so here I wish I gave myself

00:26:37,880 --> 00:26:43,940
more time I apologize but I do agree

00:26:41,600 --> 00:26:47,170
very clearly I have written a very long

00:26:43,940 --> 00:26:49,130
sort of tutorial that goes with this and

00:26:47,170 --> 00:26:50,840
if you go through it and have any

00:26:49,130 --> 00:26:53,540
troubles please let me know and I will

00:26:50,840 --> 00:26:56,600
explain anything there is a bill PACs

00:26:53,540 --> 00:26:58,370
slack account which is their result so

00:26:56,600 --> 00:27:00,190
there is the Cloud Foundry slack and

00:26:58,370 --> 00:27:02,900
there is a bill PACs channel in that

00:27:00,190 --> 00:27:05,390
primarily that is for the Cloud Foundry

00:27:02,900 --> 00:27:07,280
bill PACs for the cloud native bill PACs

00:27:05,390 --> 00:27:08,570
and just general discussion around what

00:27:07,280 --> 00:27:12,380
they look like and how you'd write one

00:27:08,570 --> 00:27:14,000
there is a bill PAC slack and and I'll

00:27:12,380 --> 00:27:16,910
hang out there too and we can talk about

00:27:14,000 --> 00:27:20,900
that but the same idea for building this

00:27:16,910 --> 00:27:22,940
one is we'll have the print message Tama

00:27:20,900 --> 00:27:24,740
which says hey I've got a way oh this is

00:27:22,940 --> 00:27:27,740
how I want to run my image if you ever

00:27:24,740 --> 00:27:29,900
run it and then that we install some

00:27:27,740 --> 00:27:34,580
software here I installed two levels

00:27:29,900 --> 00:27:36,200
command line tools and and a new idea is

00:27:34,580 --> 00:27:40,480
that you can inject environment

00:27:36,200 --> 00:27:42,710
variables your bill PAC can inject

00:27:40,480 --> 00:27:44,900
changes to the environment that will

00:27:42,710 --> 00:27:47,660
always be loaded up and that can be very

00:27:44,900 --> 00:27:48,920
helpful either to mutate environment

00:27:47,660 --> 00:27:50,660
variables they're coming in and change

00:27:48,920 --> 00:27:52,340
them or just to add new environment

00:27:50,660 --> 00:27:53,780
variables you can create configuration

00:27:52,340 --> 00:27:58,940
files there's a lot of things you can do

00:27:53,780 --> 00:28:00,770
with profile dot d and we run that and

00:27:58,940 --> 00:28:03,050
then finally there's this the idea of

00:28:00,770 --> 00:28:05,030
the builder this is where you get to

00:28:03,050 --> 00:28:07,130
create your own little Cloud Foundry so

00:28:05,030 --> 00:28:09,650
instead of Cloud Foundry CF bill packs

00:28:07,130 --> 00:28:11,600
with all the standard bill packs this is

00:28:09,650 --> 00:28:15,350
like all the things you care about in

00:28:11,600 --> 00:28:17,960
your company or your team and you can

00:28:15,350 --> 00:28:20,900
put that together what you'll probably

00:28:17,960 --> 00:28:22,490
find you're doing with with this is you

00:28:20,900 --> 00:28:25,520
will be taking the upstream Cloud

00:28:22,490 --> 00:28:28,610
Foundry builder and mutating it adding

00:28:25,520 --> 00:28:31,220
in the bill packs that you'll make bill

00:28:28,610 --> 00:28:33,059
packs are very simple as I said they

00:28:31,220 --> 00:28:36,539
just detect and

00:28:33,059 --> 00:28:38,669
and a build now

00:28:36,539 --> 00:28:44,760
I in these examples did not before I

00:28:38,669 --> 00:28:45,690
will finish I just want to show you on

00:28:44,760 --> 00:28:48,960
the flight over

00:28:45,690 --> 00:28:51,450
I built a bill pack for Redis which

00:28:48,960 --> 00:28:53,880
again is silly but the idea for the bill

00:28:51,450 --> 00:28:55,049
packers it will inject Reynes basically

00:28:53,880 --> 00:28:57,620
install Redis so that you've got the

00:28:55,049 --> 00:28:59,700
Redis CLI and a rate of server and

00:28:57,620 --> 00:29:01,260
what's interesting about that bill pack

00:28:59,700 --> 00:29:03,830
is it's an example of how you might

00:29:01,260 --> 00:29:08,760
bring in assets compiled or uncompelled

00:29:03,830 --> 00:29:11,429
and it's a useful to walk through none

00:29:08,760 --> 00:29:13,409
of that tamil is this fun to explain so

00:29:11,429 --> 00:29:16,409
the principle of builder is it's a

00:29:13,409 --> 00:29:19,230
collection of bill packs that you give

00:29:16,409 --> 00:29:20,970
to the developers and your applications

00:29:19,230 --> 00:29:23,669
will either pick one of the bill packs

00:29:20,970 --> 00:29:25,530
or the other Cloud Foundry team is

00:29:23,669 --> 00:29:27,900
building a builder god I hate that

00:29:25,530 --> 00:29:30,570
sentence the Cloud Foundry bill pack

00:29:27,900 --> 00:29:32,940
steam have a constantly curating a

00:29:30,570 --> 00:29:35,309
builder that includes all of our future

00:29:32,940 --> 00:29:37,710
bill packs and you can start to use them

00:29:35,309 --> 00:29:39,059
now and you can start to contribute to

00:29:37,710 --> 00:29:41,690
them or you can start to write

00:29:39,059 --> 00:29:47,760
additional bill packs that go with that

00:29:41,690 --> 00:29:49,289
your organization will want and and then

00:29:47,760 --> 00:29:50,400
you look at it so this is what our

00:29:49,289 --> 00:29:52,230
builder looks like that we would have

00:29:50,400 --> 00:29:54,780
made if I had two hours instead of 30

00:29:52,230 --> 00:29:57,450
minutes apparently it it looked a lot

00:29:54,780 --> 00:29:58,799
smaller when I wrote it down I honestly

00:29:57,450 --> 00:30:01,169
felt like that was a good amount of

00:29:58,799 --> 00:30:03,750
content to get through 30 minutes but

00:30:01,169 --> 00:30:05,970
here is this idea of is bars bill pack

00:30:03,750 --> 00:30:08,250
and our print message bill back to

00:30:05,970 --> 00:30:16,620
separate groups one will detect all the

00:30:08,250 --> 00:30:18,179
other and we have which and I mentioned

00:30:16,620 --> 00:30:20,159
groups before but when we did the yarn

00:30:18,179 --> 00:30:22,860
node example there were two bill packs

00:30:20,159 --> 00:30:24,030
in a group and they both detected so

00:30:22,860 --> 00:30:26,190
bill packs are coming they've been

00:30:24,030 --> 00:30:27,480
coming for a year the CF team is

00:30:26,190 --> 00:30:32,130
starting to figure out how they might

00:30:27,480 --> 00:30:34,409
work there is a bring them into Cloud

00:30:32,130 --> 00:30:36,659
Foundry but is definitely worth

00:30:34,409 --> 00:30:39,360
investigating how they look now how you

00:30:36,659 --> 00:30:42,570
what how you might use them how you

00:30:39,360 --> 00:30:43,679
might evolve what it is to build apps in

00:30:42,570 --> 00:30:45,050
your organization how you bring

00:30:43,679 --> 00:30:47,840
dependencies in

00:30:45,050 --> 00:30:49,160
and if you do want to build v2 and you

00:30:47,840 --> 00:30:50,360
felt over the last 30 minutes sushi I

00:30:49,160 --> 00:30:53,330
should have been talking about v2 bill

00:30:50,360 --> 00:30:56,180
packs I think you're wrong but I have

00:30:53,330 --> 00:30:58,460
done you're not wrong you're perfectly

00:30:56,180 --> 00:31:01,420
valid I've got a series of blog posts

00:30:58,460 --> 00:31:03,680
where we talk about making v2 bill packs

00:31:01,420 --> 00:31:05,510
based around sidecars because I thought

00:31:03,680 --> 00:31:07,030
that might be interested and if you want

00:31:05,510 --> 00:31:09,920
me to pointer to those just ping me on

00:31:07,030 --> 00:31:11,390
Twitter or or in slack and I'll find

00:31:09,920 --> 00:31:13,640
those for you

00:31:11,390 --> 00:31:16,640
there is the URLs these slides are

00:31:13,640 --> 00:31:19,190
already on the schedule so you can go to

00:31:16,640 --> 00:31:21,170
the talk and the slides are downloaded

00:31:19,190 --> 00:31:23,030
to get these URLs those fizzbuzz

00:31:21,170 --> 00:31:24,850
examples and the print message and a

00:31:23,030 --> 00:31:27,710
bunch of other examples are in that repo

00:31:24,850 --> 00:31:29,930
and finally I will quickly show you the

00:31:27,710 --> 00:31:40,150
thing that's not mentioned which is the

00:31:29,930 --> 00:31:44,660
Redis bill back same way so in same idea

00:31:40,150 --> 00:31:49,340
what's interesting perhaps is I started

00:31:44,660 --> 00:31:51,020
to explore dependencies so rehna sin

00:31:49,340 --> 00:31:53,720
this case before I was just making up

00:31:51,020 --> 00:31:55,160
executables and just but you know Redis

00:31:53,720 --> 00:31:57,470
we actually want Redis so here is the

00:31:55,160 --> 00:31:58,790
upstream versions of Redis here are some

00:31:57,470 --> 00:32:00,320
compiled versions I'm just playing

00:31:58,790 --> 00:32:07,910
around with it and the bill pack

00:32:00,320 --> 00:32:11,540
actually knows how to compile so this is

00:32:07,910 --> 00:32:13,820
this is my exploration of how we would

00:32:11,540 --> 00:32:17,060
download and store Redis into a layer

00:32:13,820 --> 00:32:19,160
that cache it so that it only ever gets

00:32:17,060 --> 00:32:21,560
compiled once so bill packs has caching

00:32:19,160 --> 00:32:24,110
gulp access processes the Nuvi pre-built

00:32:21,560 --> 00:32:26,990
packs are really interesting and have a

00:32:24,110 --> 00:32:29,000
play with them both through the example

00:32:26,990 --> 00:32:30,770
repos and if you want hang out on the

00:32:29,000 --> 00:32:34,360
slight channel we can talk about it

00:32:30,770 --> 00:32:34,360
there too so thank you very much

00:32:39,600 --> 00:32:43,330
and now we we are at 30 something minute

00:32:42,129 --> 00:32:45,490
so I apologize for those who have

00:32:43,330 --> 00:32:48,600
somewhere else to be but I happily take

00:32:45,490 --> 00:32:50,590
questions I could just keep talking I

00:32:48,600 --> 00:32:54,389
think this topics really interesting

00:32:50,590 --> 00:32:54,389
bill packs are there yes

00:33:04,180 --> 00:33:15,100
you're saying we're like with the

00:33:06,820 --> 00:33:22,090
reddest one come on you're referring to

00:33:15,100 --> 00:33:23,890
versions of software like this so so in

00:33:22,090 --> 00:33:25,540
your example you would like so I've

00:33:23,890 --> 00:33:27,040
written this example bill Packer so say

00:33:25,540 --> 00:33:29,800
you know you probably want either

00:33:27,040 --> 00:33:31,900
version 4 or version 5 of red us and you

00:33:29,800 --> 00:33:34,270
want the latest because you want to you

00:33:31,900 --> 00:33:36,550
know see V's and updates and thing like

00:33:34,270 --> 00:33:39,100
that if you specifically want an older

00:33:36,550 --> 00:33:41,350
version of Redis for some reason either

00:33:39,100 --> 00:33:44,530
don't use the new bill pack don't find

00:33:41,350 --> 00:33:46,720
the old bill pack over a previous Jim I

00:33:44,530 --> 00:33:49,690
will I would issue multiple versions of

00:33:46,720 --> 00:33:51,490
there's bill pack over time so I cut a

00:33:49,690 --> 00:33:54,490
version and if a new version of Redis

00:33:51,490 --> 00:33:56,650
comes out I would then update this tamil

00:33:54,490 --> 00:33:59,620
and then cut a new version of the bill

00:33:56,650 --> 00:34:02,950
pack you would use that or not or and

00:33:59,620 --> 00:34:05,290
that would go off into builders and so

00:34:02,950 --> 00:34:07,150
one way is just to get to change what

00:34:05,290 --> 00:34:10,090
version sorry how do I put it you know

00:34:07,150 --> 00:34:11,590
when you do apt-get install Redis it

00:34:10,090 --> 00:34:12,940
doesn't give you an option for seven

00:34:11,590 --> 00:34:14,320
different versions Redis it kind of

00:34:12,940 --> 00:34:17,430
gives you the version that's in the

00:34:14,320 --> 00:34:21,040
package so bill packs are kind of like

00:34:17,430 --> 00:34:22,990
Debian packages in a way they arguably

00:34:21,040 --> 00:34:25,450
maybe I shouldn't have two versions of

00:34:22,990 --> 00:34:27,790
Redis maybe I should have a redis for

00:34:25,450 --> 00:34:31,210
Bill pack and a Redis five pill pack and

00:34:27,790 --> 00:34:33,010
that could be another way to do it and

00:34:31,210 --> 00:34:34,180
you pick one I've gone with one bill

00:34:33,010 --> 00:34:35,890
pack that supports two different

00:34:34,180 --> 00:34:38,020
versions but another approach might be

00:34:35,890 --> 00:34:39,970
to build packs for two major versions

00:34:38,020 --> 00:34:43,740
and then you would have an entire tree

00:34:39,970 --> 00:34:43,740
of history versions

00:34:47,369 --> 00:34:51,550
right yeah and that is that is an

00:34:50,109 --> 00:34:54,190
interesting topic compatibility so the

00:34:51,550 --> 00:34:55,240
question was how do we do how do you

00:34:54,190 --> 00:34:58,060
know which build packs are compatible

00:34:55,240 --> 00:34:59,640
with each other they are all graddic ly

00:34:58,060 --> 00:35:02,650
they are all right to different folders

00:34:59,640 --> 00:35:04,450
so if you if you actually forced all

00:35:02,650 --> 00:35:07,450
bill packs to be installed they would

00:35:04,450 --> 00:35:09,490
all work the final image might not do

00:35:07,450 --> 00:35:11,770
anything but all the layers would be

00:35:09,490 --> 00:35:13,750
added they're all mutually exclusive

00:35:11,770 --> 00:35:16,180
they've given a folder called a layer -

00:35:13,750 --> 00:35:20,050
right - it's a call to layer and it also

00:35:16,180 --> 00:35:24,310
represents the image layer whether the

00:35:20,050 --> 00:35:25,810
resulting thing can use them all but

00:35:24,310 --> 00:35:29,290
they will all installs because they're

00:35:25,810 --> 00:35:31,150
all independent so you would be able to

00:35:29,290 --> 00:35:35,170
run this ad this bill back to any app

00:35:31,150 --> 00:35:40,180
and you'll get Redis if you use it or

00:35:35,170 --> 00:35:41,590
not all right if you have any more

00:35:40,180 --> 00:35:43,700
questions I'll meet you at the back but

00:35:41,590 --> 00:35:46,090
thank you very much

00:35:43,700 --> 00:35:46,090

YouTube URL: https://www.youtube.com/watch?v=10cNqn9biu8


