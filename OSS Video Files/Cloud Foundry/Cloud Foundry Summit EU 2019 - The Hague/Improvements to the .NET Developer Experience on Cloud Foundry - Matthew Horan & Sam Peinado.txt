Title: Improvements to the .NET Developer Experience on Cloud Foundry - Matthew Horan & Sam Peinado
Publication date: 2019-09-13
Playlist: Cloud Foundry Summit EU 2019 - The Hague
Description: 
	Improvements to the .NET Developer Experience on Cloud Foundry - Matthew Horan & Sam Peinado, Pivotal 

The old news: Cloud Foundry supports running applications in true Windows containers. This was a significant step for .NET developers, who can now use more platform features (compared to 2012 R2) and leverage improved isolation and resource management for their apps.  The Pivotal .NET / Windows Product Area has been working to ensure an improved .NET experience with Cloud Foundry. While Windows support for Cloud Foundry still best supports 12-factor apps, new developments from the .NET Developer Experience team have helped improve the situation for many other apps that may not have been a great fit for the platform in the past.  In this talk, we’ll share some of the new features (and new opinions!) we’ve come to in the past year. This includes support for SMB volume connections, multi-buildpack support and a new “stack” for Windows. 

For more info: https://www.cloudfoundry.org/
Captions: 
	00:00:00,030 --> 00:00:04,350
good morning everybody or it's afternoon

00:00:02,429 --> 00:00:06,180
now how hopefully everybody's here to

00:00:04,350 --> 00:00:08,610
learn something about dotnet and I'm

00:00:06,180 --> 00:00:13,429
Cloud Foundry if not doors are still

00:00:08,610 --> 00:00:13,429
open but I encourage you to stick around

00:00:16,609 --> 00:00:22,830
alright so I'm Matt Horne an engineering

00:00:20,100 --> 00:00:25,650
lead for the windows ecosystem at

00:00:22,830 --> 00:00:27,750
pivotal in New York I've been working

00:00:25,650 --> 00:00:29,369
with windows for a while now I got my

00:00:27,750 --> 00:00:32,309
career started as a Windows system and

00:00:29,369 --> 00:00:35,160
eventually I got into programming and

00:00:32,309 --> 00:00:37,440
then I found her oku like dr. Nick was

00:00:35,160 --> 00:00:38,550
talking about earlier I loved it and I

00:00:37,440 --> 00:00:40,500
wanted a way to combine all the

00:00:38,550 --> 00:00:45,420
interests into one so that's how I found

00:00:40,500 --> 00:00:46,800
I found her my name is Sam whoa

00:00:45,420 --> 00:00:49,590
I work in product design of pivotal

00:00:46,800 --> 00:00:51,180
working on the window stack for both CF

00:00:49,590 --> 00:00:53,969
application runtime and CF container

00:00:51,180 --> 00:00:56,129
runtime I'm the sort of designer spends

00:00:53,969 --> 00:00:58,680
more time in V s code than Visio so

00:00:56,129 --> 00:01:00,600
that's why I'm up here talking today and

00:00:58,680 --> 00:01:02,250
I love working on cloud stuff because I

00:01:00,600 --> 00:01:03,899
believe the tools can make you smarter

00:01:02,250 --> 00:01:05,280
and when you're building a tool for

00:01:03,899 --> 00:01:07,080
people who are already really smart like

00:01:05,280 --> 00:01:13,409
all of you well that's even more

00:01:07,080 --> 00:01:17,390
powerful cool so our goal as a team has

00:01:13,409 --> 00:01:21,119
been to make dotnet both for legacy and

00:01:17,390 --> 00:01:22,200
newer applications first-class for quad

00:01:21,119 --> 00:01:24,420
foundry so this has really been our

00:01:22,200 --> 00:01:26,520
focus over the past few years taking a

00:01:24,420 --> 00:01:29,460
lot of effort we started off with

00:01:26,520 --> 00:01:31,619
Windows 2012 r2 support with fake

00:01:29,460 --> 00:01:34,619
containers now we have real containers

00:01:31,619 --> 00:01:37,500
with Windows 2016 and onward we have

00:01:34,619 --> 00:01:42,810
dotnet core and build packs it's a lot

00:01:37,500 --> 00:01:45,450
of exciting stuff so what's new well we

00:01:42,810 --> 00:01:47,700
we have done net core support just miss

00:01:45,450 --> 00:01:49,649
talking about that we have a full linux

00:01:47,700 --> 00:01:52,350
build pack for dotnet core so you can

00:01:49,649 --> 00:01:54,360
just see if push here your linux space

00:01:52,350 --> 00:01:55,560
dotnet core applications and we'll just

00:01:54,360 --> 00:01:58,020
build them for you we'll figure out how

00:01:55,560 --> 00:02:00,060
to run them all that magical stuff we

00:01:58,020 --> 00:02:02,759
also have the hwc build pack that we had

00:02:00,060 --> 00:02:04,640
previously for dotnet framework

00:02:02,759 --> 00:02:08,280
applications running on the platform

00:02:04,640 --> 00:02:10,739
with dotnet core you can also push

00:02:08,280 --> 00:02:12,000
binary applications to Windows if you

00:02:10,739 --> 00:02:12,970
absolutely have to and then you can mix

00:02:12,000 --> 00:02:16,660
and match

00:02:12,970 --> 00:02:18,280
your application workloads run so you

00:02:16,660 --> 00:02:20,200
can get everything kind of hooked all

00:02:18,280 --> 00:02:22,180
together you can use steel-toe to help

00:02:20,200 --> 00:02:24,250
out with that which Sam will touch on a

00:02:22,180 --> 00:02:26,710
little bit we've also got a kubernetes

00:02:24,250 --> 00:02:29,020
based container runtime so for those

00:02:26,710 --> 00:02:31,120
workloads that maybe aren't the best fit

00:02:29,020 --> 00:02:33,640
for application runtime you can just

00:02:31,120 --> 00:02:35,620
push those containers dr. Nick was kind

00:02:33,640 --> 00:02:37,360
of trashing docker images a little bit

00:02:35,620 --> 00:02:39,820
earlier but for your Windows records

00:02:37,360 --> 00:02:42,310
that might be the right solution for

00:02:39,820 --> 00:02:43,930
certain workloads I mentioned those true

00:02:42,310 --> 00:02:47,260
containers that we got once Windows

00:02:43,930 --> 00:02:49,780
Server 2016 came out but we also have

00:02:47,260 --> 00:02:52,870
multi build PAC support so you can mix

00:02:49,780 --> 00:02:56,470
and match what what bits get into your

00:02:52,870 --> 00:02:58,840
container steel-toe for micro services

00:02:56,470 --> 00:03:04,540
and application and modernization and a

00:02:58,840 --> 00:03:06,820
fancy new stack name simply windows cool

00:03:04,540 --> 00:03:08,650
so Matt just mentioned steel-toe a

00:03:06,820 --> 00:03:10,180
little bit how many developers do we

00:03:08,650 --> 00:03:15,000
have in the audience today who get a

00:03:10,180 --> 00:03:18,580
show of hands awesome architects

00:03:15,000 --> 00:03:20,230
managers directors cool cool

00:03:18,580 --> 00:03:22,390
all right well this is relevant to all

00:03:20,230 --> 00:03:23,980
of you a quick plug for Steel Toe

00:03:22,390 --> 00:03:26,890
steel-toe brings the best of spring

00:03:23,980 --> 00:03:28,900
cloud to net it's really suitable for

00:03:26,890 --> 00:03:30,820
new apps and old it can help you

00:03:28,900 --> 00:03:32,380
modernize your dotnet framework apps so

00:03:30,820 --> 00:03:34,030
they run well in the cloud and it can

00:03:32,380 --> 00:03:36,340
also help you make really resilient and

00:03:34,030 --> 00:03:43,019
robust microservices in dotnet core as

00:03:36,340 --> 00:03:45,850
well now a few of its best features a

00:03:43,019 --> 00:03:47,920
lot of them come from Netflix now one of

00:03:45,850 --> 00:03:49,930
those is the Eureka service registry

00:03:47,920 --> 00:03:51,610
this allows all of your micro services

00:03:49,930 --> 00:03:53,410
to be tracked in one place so you don't

00:03:51,610 --> 00:03:55,000
have to hard code any IP addresses and

00:03:53,410 --> 00:03:58,000
nothing breaks when you scale up and

00:03:55,000 --> 00:04:00,370
down another awesome feature is the

00:03:58,000 --> 00:04:02,110
history service circuit breaker which

00:04:00,370 --> 00:04:04,000
allows your micro services detect and

00:04:02,110 --> 00:04:06,970
bypass a failed instance which helps you

00:04:04,000 --> 00:04:09,040
prevent downtime and then my personal

00:04:06,970 --> 00:04:10,660
favorite is the connection to the spring

00:04:09,040 --> 00:04:12,640
cloud config server which makes your app

00:04:10,660 --> 00:04:14,650
incredibly portable and easy to update

00:04:12,640 --> 00:04:16,090
by storing all your configuration for

00:04:14,650 --> 00:04:19,359
all your environments in a single place

00:04:16,090 --> 00:04:21,010
separate from your apps code and finally

00:04:19,359 --> 00:04:22,990
I also want to mention a special benefit

00:04:21,010 --> 00:04:24,640
for Cloud Foundry developers steel-toe

00:04:22,990 --> 00:04:26,320
connectors which make it super easy to

00:04:24,640 --> 00:04:26,770
connect to any of your backing services

00:04:26,320 --> 00:04:31,599
that are

00:04:26,770 --> 00:04:34,180
the Cloud Foundry platform so building

00:04:31,599 --> 00:04:35,560
apps in.net core is excited and all but

00:04:34,180 --> 00:04:37,509
let's be honest most of us here have a

00:04:35,560 --> 00:04:38,740
huge portfolio of existing apps that we

00:04:37,509 --> 00:04:39,460
need to migrate before we can get to the

00:04:38,740 --> 00:04:41,979
fun stuff

00:04:39,460 --> 00:04:43,960
so how do we do that well I'm sure

00:04:41,979 --> 00:04:46,300
you've heard of 12 factor before and if

00:04:43,960 --> 00:04:48,909
you haven't well go look it up here's

00:04:46,300 --> 00:04:50,740
the URL in the top corner so lots of

00:04:48,909 --> 00:04:52,389
people say that your app needs to be 12

00:04:50,740 --> 00:04:53,830
factor to run in the cloud but the

00:04:52,389 --> 00:04:55,780
reality is that it doesn't really need

00:04:53,830 --> 00:04:57,639
to comply with all 12 you'll definitely

00:04:55,780 --> 00:04:59,139
get benefits if it does but to run in

00:04:57,639 --> 00:05:01,180
Cloud Foundry you will just need four

00:04:59,139 --> 00:05:02,130
factors I'm gonna run through those

00:05:01,180 --> 00:05:04,810
right now

00:05:02,130 --> 00:05:07,750
the first is parity between environments

00:05:04,810 --> 00:05:08,949
you want your dev test QA and prod

00:05:07,750 --> 00:05:10,599
environments to be as similar as

00:05:08,949 --> 00:05:13,389
possible and have access to all the same

00:05:10,599 --> 00:05:14,889
services second you need to change your

00:05:13,389 --> 00:05:17,229
logs to go to the console instead of

00:05:14,889 --> 00:05:18,580
writing to disk this is huge because

00:05:17,229 --> 00:05:20,440
inevitably there will be errors in your

00:05:18,580 --> 00:05:22,240
migration process and if your app fails

00:05:20,440 --> 00:05:24,400
then the container your apps running and

00:05:22,240 --> 00:05:25,810
gets destroyed and replaced and then all

00:05:24,400 --> 00:05:27,960
your logs are gone so you won't be able

00:05:25,810 --> 00:05:31,150
to see what went wrong

00:05:27,960 --> 00:05:32,590
third detach your services you want

00:05:31,150 --> 00:05:33,940
everything to be loosely coupled so you

00:05:32,590 --> 00:05:35,440
can move between environments without

00:05:33,940 --> 00:05:36,880
changing your code and you can even

00:05:35,440 --> 00:05:40,240
switch your backing services if you need

00:05:36,880 --> 00:05:42,099
to finally use git repos to track

00:05:40,240 --> 00:05:43,960
everything at version control so that

00:05:42,099 --> 00:05:45,699
you can actually use cool features like

00:05:43,960 --> 00:05:47,469
green blue and canary deployments you

00:05:45,699 --> 00:05:50,319
really want to be able to rollback if

00:05:47,469 --> 00:05:51,490
there's a problem and since your

00:05:50,319 --> 00:05:53,830
portfolio of apps you're trying to

00:05:51,490 --> 00:05:55,180
migrate is probably heavily dotnet

00:05:53,830 --> 00:05:56,409
framework you should be aware that

00:05:55,180 --> 00:05:57,880
there's a couple common features of

00:05:56,409 --> 00:05:59,409
dotnet framework that don't play well

00:05:57,880 --> 00:06:02,560
with any cloud including Cloud Foundry

00:05:59,409 --> 00:06:03,610
and that's the GAC and the registry you

00:06:02,560 --> 00:06:04,930
need to assume that all your

00:06:03,610 --> 00:06:06,819
dependencies need to be brought in and

00:06:04,930 --> 00:06:08,199
the app code itself and all your

00:06:06,819 --> 00:06:11,080
settings should be an external config

00:06:08,199 --> 00:06:13,150
files okay fine that's not for factors

00:06:11,080 --> 00:06:15,940
let's call it four and a half but hey

00:06:13,150 --> 00:06:17,139
I'm a designer not a mathematician it

00:06:15,940 --> 00:06:18,580
may sound like a lot of work but it's

00:06:17,139 --> 00:06:19,870
not so bad and if you do it you'll get

00:06:18,580 --> 00:06:21,580
some pretty awesome benefits with your

00:06:19,870 --> 00:06:23,710
CF push you're going to public or out

00:06:21,580 --> 00:06:25,779
within seconds high availability to

00:06:23,710 --> 00:06:27,009
minimize downtime and auto scaling to

00:06:25,779 --> 00:06:29,529
deal with all the customers who want to

00:06:27,009 --> 00:06:30,729
use your awesome apps and services but

00:06:29,529 --> 00:06:32,529
this has been true for a while right

00:06:30,729 --> 00:06:35,069
what we've been working on to improve

00:06:32,529 --> 00:06:35,069
the platform

00:06:37,980 --> 00:06:42,060
all right yeah so those improvements

00:06:40,110 --> 00:06:45,450
what have we really been focusing on

00:06:42,060 --> 00:06:47,700
over the last year or so and we've put

00:06:45,450 --> 00:06:50,850
together a collection of some of the

00:06:47,700 --> 00:06:52,980
problems that we've heard our our users

00:06:50,850 --> 00:06:55,560
run into when moving applications on the

00:06:52,980 --> 00:06:59,160
cloud foundry and some common solutions

00:06:55,560 --> 00:07:00,840
that help with those all right so one of

00:06:59,160 --> 00:07:03,030
those first problems that you might run

00:07:00,840 --> 00:07:05,220
into yeah how do you deal with database

00:07:03,030 --> 00:07:07,650
creation how do you get credentials for

00:07:05,220 --> 00:07:09,600
those databases etc are there manual

00:07:07,650 --> 00:07:11,130
processes involved you send in a change

00:07:09,600 --> 00:07:13,140
request to part of your organization

00:07:11,130 --> 00:07:15,030
well if you're familiar with application

00:07:13,140 --> 00:07:16,800
run time that doesn't really work sure

00:07:15,030 --> 00:07:20,310
you can bring custom user provided

00:07:16,800 --> 00:07:23,760
services but things like hard credit DV

00:07:20,310 --> 00:07:25,470
credentials on on a cell maybe you can

00:07:23,760 --> 00:07:28,410
get away with that in Windows 2012 r2

00:07:25,470 --> 00:07:30,180
with some sort of crazy Bosch add-on but

00:07:28,410 --> 00:07:32,550
we're not we're not gonna let you get

00:07:30,180 --> 00:07:34,560
away with that any more so you know

00:07:32,550 --> 00:07:36,270
because these cells are ephemeral

00:07:34,560 --> 00:07:38,400
they're you know the thrown away we

00:07:36,270 --> 00:07:40,890
can't let you share those credentials or

00:07:38,400 --> 00:07:42,780
hard-code them to your application so

00:07:40,890 --> 00:07:46,140
you're gonna have to use something like

00:07:42,780 --> 00:07:49,050
Cloud Foundry services we also don't

00:07:46,140 --> 00:07:50,970
currently allow Windows cells to be

00:07:49,050 --> 00:07:52,020
domain joint so things like integrated

00:07:50,970 --> 00:07:54,390
windows off

00:07:52,020 --> 00:07:59,160
database credentials just simply won't

00:07:54,390 --> 00:08:02,430
work so still code steel-toe connectors

00:07:59,160 --> 00:08:05,130
are a way to help with the abstraction

00:08:02,430 --> 00:08:07,020
over Cloud Foundry services so

00:08:05,130 --> 00:08:09,840
application runtime when you bind the

00:08:07,020 --> 00:08:12,240
service to any application via Linux or

00:08:09,840 --> 00:08:14,910
Windows will expose the ephemeral

00:08:12,240 --> 00:08:18,060
Connect credentials for a database to

00:08:14,910 --> 00:08:20,160
that app via environment variables for

00:08:18,060 --> 00:08:22,700
the past few years those credentials

00:08:20,160 --> 00:08:25,830
will even be encrypted with cred hub and

00:08:22,700 --> 00:08:27,780
you could manually integrate your

00:08:25,830 --> 00:08:29,430
application into cred hub and into

00:08:27,780 --> 00:08:31,800
parsing those environment variables or

00:08:29,430 --> 00:08:34,200
you could use steel-toe connectors which

00:08:31,800 --> 00:08:37,260
just abstract this all away for you and

00:08:34,200 --> 00:08:39,570
with a couple lines of dotnet code you

00:08:37,260 --> 00:08:41,099
can just consume those environment

00:08:39,570 --> 00:08:42,900
variables get the credentials for your

00:08:41,099 --> 00:08:45,780
database so everything happens for you

00:08:42,900 --> 00:08:48,240
magically this is supported in both

00:08:45,780 --> 00:08:49,710
dotnet core and dotnet framework so it

00:08:48,240 --> 00:08:51,570
takes a little bit of effort in

00:08:49,710 --> 00:08:52,710
modernization for your application

00:08:51,570 --> 00:08:56,990
to take advantage of steel-toed

00:08:52,710 --> 00:08:56,990
characters but it's not too bad

00:08:58,070 --> 00:09:02,580
all right so next problem that people

00:09:00,720 --> 00:09:05,100
frequently have when migrating older

00:09:02,580 --> 00:09:07,260
apps the cloud accessing your existing

00:09:05,100 --> 00:09:08,730
database now the problem here is the

00:09:07,260 --> 00:09:10,290
connection itself but it's around

00:09:08,730 --> 00:09:11,970
installing the driver in the container

00:09:10,290 --> 00:09:14,730
that enables the database connection to

00:09:11,970 --> 00:09:15,840
take place in the on-premises world this

00:09:14,730 --> 00:09:17,940
is the sort of thing you could expect

00:09:15,840 --> 00:09:19,290
your system admin to do for you that the

00:09:17,940 --> 00:09:21,000
driver would already be installed in the

00:09:19,290 --> 00:09:22,710
VM but in the cloud you can't make that

00:09:21,000 --> 00:09:24,300
assumption you have to bring everything

00:09:22,710 --> 00:09:26,880
your app needs with it into the

00:09:24,300 --> 00:09:27,990
container now in years past as Matt

00:09:26,880 --> 00:09:29,940
mentioned there was a bit of a cheat for

00:09:27,990 --> 00:09:31,770
Windows apps on Cloud Foundry back in

00:09:29,940 --> 00:09:33,750
the 2012 r2 days that you can do

00:09:31,770 --> 00:09:35,610
something called a Bosch add-on and your

00:09:33,750 --> 00:09:37,080
system admin or platform engineers could

00:09:35,610 --> 00:09:38,880
use Bosch to install anything you needed

00:09:37,080 --> 00:09:42,420
on your VM which is a bit hacky but hey

00:09:38,880 --> 00:09:43,800
so are the containers we're using now

00:09:42,420 --> 00:09:47,460
that we've got true containers on

00:09:43,800 --> 00:09:48,990
Windows Server 1709 1803 and 2019 we're

00:09:47,460 --> 00:09:51,900
doing much better but there's no more

00:09:48,990 --> 00:09:54,030
Bosch add-on work around so how do we

00:09:51,900 --> 00:09:55,350
address that this is one of the ways

00:09:54,030 --> 00:09:56,910
that we're supporting the installation

00:09:55,350 --> 00:09:59,010
of database drivers in Windows

00:09:56,910 --> 00:10:02,070
containers through support for ODBC

00:09:59,010 --> 00:10:03,600
drivers how do we do this well normally

00:10:02,070 --> 00:10:05,130
the permissions to write to the registry

00:10:03,600 --> 00:10:07,260
in your container is locked down for the

00:10:05,130 --> 00:10:09,570
vcap user the user that the application

00:10:07,260 --> 00:10:10,980
runs as now we did that to stop people

00:10:09,570 --> 00:10:12,570
from storing their configuration there

00:10:10,980 --> 00:10:14,390
since it's not a cloud native pattern

00:10:12,570 --> 00:10:17,490
and to make the containers more secure

00:10:14,390 --> 00:10:20,160
but just for you extra special for you

00:10:17,490 --> 00:10:22,290
we loosened up the ODBC registration so

00:10:20,160 --> 00:10:26,160
you can more easily install ODBC drivers

00:10:22,290 --> 00:10:27,450
in the container ok next solution we

00:10:26,160 --> 00:10:29,550
have for you in terms of installing

00:10:27,450 --> 00:10:31,250
database drivers is that we've made some

00:10:29,550 --> 00:10:34,350
common visual c++ redistributable

00:10:31,250 --> 00:10:35,580
available in the container I know before

00:10:34,350 --> 00:10:37,020
when I mentioned that you had to bring

00:10:35,580 --> 00:10:38,700
everything your app needs with it into

00:10:37,020 --> 00:10:40,980
the container I probably made you pretty

00:10:38,700 --> 00:10:42,390
annoyed wow I guess Sam and his team

00:10:40,980 --> 00:10:44,310
don't care about windows developers huh

00:10:42,390 --> 00:10:46,740
well I'm gonna leave and go to the maze

00:10:44,310 --> 00:10:48,630
Oh skon furan s-- whoa whoa stop right

00:10:46,740 --> 00:10:50,880
there because look our team really cares

00:10:48,630 --> 00:10:53,460
about you and we care about your apps we

00:10:50,880 --> 00:10:57,360
care so much that we put visual c++

00:10:53,460 --> 00:10:59,490
redistributable x' 2019 2017 and 2010

00:10:57,360 --> 00:11:00,630
available in the container so you don't

00:10:59,490 --> 00:11:03,480
have to worry about bringing any of

00:11:00,630 --> 00:11:05,130
those in with you with your app and the

00:11:03,480 --> 00:11:05,490
best part is that those redistributable

00:11:05,130 --> 00:11:07,560
czar

00:11:05,490 --> 00:11:08,970
by all the containers in the cell so it

00:11:07,560 --> 00:11:12,380
shouldn't take away from your memory or

00:11:08,970 --> 00:11:14,760
container density on the cell in any way

00:11:12,380 --> 00:11:16,230
okay finally this one is less of a

00:11:14,760 --> 00:11:18,480
solution really more of a recommendation

00:11:16,230 --> 00:11:19,680
and exciting development I don't know

00:11:18,480 --> 00:11:21,839
how many of you all are familiar with

00:11:19,680 --> 00:11:25,050
gem fire anybody raise your hands

00:11:21,839 --> 00:11:26,459
cool cool so it's a really awesome tool

00:11:25,050 --> 00:11:28,050
based on Apache geode

00:11:26,459 --> 00:11:30,450
it's an in-memory data grid that serves

00:11:28,050 --> 00:11:31,350
up your data super super fast so if you

00:11:30,450 --> 00:11:33,000
want to take advantage of that

00:11:31,350 --> 00:11:34,770
functionality with your dotnet apps now

00:11:33,000 --> 00:11:36,209
you can because there's a dotnet Native

00:11:34,770 --> 00:11:38,459
Client which works great right out of

00:11:36,209 --> 00:11:40,170
the box and even better there's a steel

00:11:38,459 --> 00:11:41,700
co connector coming out soon which will

00:11:40,170 --> 00:11:49,470
make that connection even easier and

00:11:41,700 --> 00:11:51,420
more secure alright so another problem

00:11:49,470 --> 00:11:54,510
kind of similar to dealing with database

00:11:51,420 --> 00:11:57,209
credentials is implicit application

00:11:54,510 --> 00:11:59,310
authorization and this really ties back

00:11:57,209 --> 00:12:03,029
to that problem we mentioned around

00:11:59,310 --> 00:12:05,520
integrated windows so if our cells are

00:12:03,029 --> 00:12:08,730
not domain join we can't really support

00:12:05,520 --> 00:12:10,860
implicit application authorization so

00:12:08,730 --> 00:12:12,270
that means application developers have

00:12:10,860 --> 00:12:15,899
to modernize their apps and leverage

00:12:12,270 --> 00:12:17,910
something like oh and that's not free so

00:12:15,899 --> 00:12:21,899
what are we what are we going to do

00:12:17,910 --> 00:12:23,520
about that so we've been really kind of

00:12:21,899 --> 00:12:26,310
thinking about the class of applications

00:12:23,520 --> 00:12:29,250
that are a good fit for both application

00:12:26,310 --> 00:12:30,690
runtime and container runtime and some

00:12:29,250 --> 00:12:32,490
of those applications may be the ones

00:12:30,690 --> 00:12:34,410
that you're lifting and shifting and you

00:12:32,490 --> 00:12:37,220
know are really moving away from as an

00:12:34,410 --> 00:12:39,270
organization just you can't justify that

00:12:37,220 --> 00:12:41,610
investment in modernizing those

00:12:39,270 --> 00:12:42,990
applications to use OAuth or maybe there

00:12:41,610 --> 00:12:44,880
are third-party applications and you

00:12:42,990 --> 00:12:46,829
just have absolutely no control over

00:12:44,880 --> 00:12:50,220
that code and you can't rebuild it and

00:12:46,829 --> 00:12:53,100
and remove that dependency on an IWA so

00:12:50,220 --> 00:12:54,990
what if we were to support integrated

00:12:53,100 --> 00:12:58,050
windows authentication in container

00:12:54,990 --> 00:13:00,089
runtime now it's very early days but

00:12:58,050 --> 00:13:02,190
we've been doing some explorations

00:13:00,089 --> 00:13:05,160
around this and it's theoretically

00:13:02,190 --> 00:13:09,690
possible so we've actually domain joined

00:13:05,160 --> 00:13:12,779
a a container runtime cell and we've

00:13:09,690 --> 00:13:15,150
gotten the credentials working inside of

00:13:12,779 --> 00:13:16,740
the container this is made possible by a

00:13:15,150 --> 00:13:18,630
feature that Microsoft added to

00:13:16,740 --> 00:13:19,050
containers surely after they were

00:13:18,630 --> 00:13:21,570
initial

00:13:19,050 --> 00:13:23,370
release microsoft was not going to be

00:13:21,570 --> 00:13:26,130
supporting domain joined containers

00:13:23,370 --> 00:13:30,360
originally but they did introduce the

00:13:26,130 --> 00:13:33,269
ability to inject GMS azor group managed

00:13:30,360 --> 00:13:34,769
service accounts into a container the

00:13:33,269 --> 00:13:36,149
interface is a little bit clunky and so

00:13:34,769 --> 00:13:38,550
we're still working on what that looks

00:13:36,149 --> 00:13:41,010
like from the platform perspective and

00:13:38,550 --> 00:13:42,839
how operators will actually get those

00:13:41,010 --> 00:13:46,260
cells domain joining them the

00:13:42,839 --> 00:13:48,180
credentials into the container but in in

00:13:46,260 --> 00:13:50,730
a lab where we were able to control all

00:13:48,180 --> 00:13:53,490
the all the variables of this equation

00:13:50,730 --> 00:13:59,250
we did get things working so stay tuned

00:13:53,490 --> 00:14:00,870
for more for more news there alright so

00:13:59,250 --> 00:14:02,339
another challenge if people frequently

00:14:00,870 --> 00:14:03,959
run into when they're moving they're

00:14:02,339 --> 00:14:05,970
older apps into containers in the cloud

00:14:03,959 --> 00:14:08,640
is that they don't really know what all

00:14:05,970 --> 00:14:11,519
their dependencies are they think they

00:14:08,640 --> 00:14:12,779
know they tell their boss they know but

00:14:11,519 --> 00:14:14,100
then when it comes down to it the app

00:14:12,779 --> 00:14:16,079
development team isn't the only one

00:14:14,100 --> 00:14:17,490
touching the app right on the road to

00:14:16,079 --> 00:14:19,230
production there's probably some random

00:14:17,490 --> 00:14:22,320
dll's being installed in the system by

00:14:19,230 --> 00:14:23,910
somebody somehow like for example one

00:14:22,320 --> 00:14:25,770
story we've heard of is a security

00:14:23,910 --> 00:14:28,230
module that in production was somehow

00:14:25,770 --> 00:14:30,240
present on the host president even in

00:14:28,230 --> 00:14:31,500
the web.config but nobody on the app dev

00:14:30,240 --> 00:14:33,540
team knows where it came from

00:14:31,500 --> 00:14:35,310
turns out that that team found out a

00:14:33,540 --> 00:14:37,910
week later it was being injected by

00:14:35,310 --> 00:14:39,660
group policy by the security team

00:14:37,910 --> 00:14:43,470
injecting dependencies through group

00:14:39,660 --> 00:14:45,149
policy that's some DLL hell so the moral

00:14:43,470 --> 00:14:46,620
is if you want to move to the cloud

00:14:45,149 --> 00:14:48,510
you really do need to bring all your

00:14:46,620 --> 00:14:49,770
dependencies with you and in order to do

00:14:48,510 --> 00:14:51,630
that you need to be keeping track of

00:14:49,770 --> 00:14:54,360
your dependencies and any dependencies

00:14:51,630 --> 00:14:57,959
being added by anyone else probably more

00:14:54,360 --> 00:14:59,760
comprehensively than you do now so what

00:14:57,959 --> 00:15:01,230
to do how do we keep track of everything

00:14:59,760 --> 00:15:01,949
and make sure it's in the container with

00:15:01,230 --> 00:15:04,079
the right version

00:15:01,949 --> 00:15:05,730
well one recommendation is to use a

00:15:04,079 --> 00:15:07,680
dependency management system like nougat

00:15:05,730 --> 00:15:09,060
nougat will help you to make sure you're

00:15:07,680 --> 00:15:10,890
always using the right version of every

00:15:09,060 --> 00:15:13,380
package and the official distribution of

00:15:10,890 --> 00:15:15,360
that package now not every dependency

00:15:13,380 --> 00:15:17,160
has a new capacity package associated

00:15:15,360 --> 00:15:18,420
with it so in those situations we

00:15:17,160 --> 00:15:20,399
recommend that you've been deploy your

00:15:18,420 --> 00:15:22,529
dependencies which just means installing

00:15:20,399 --> 00:15:23,850
them into the bin folder now there's a

00:15:22,529 --> 00:15:26,279
small number of dependencies that don't

00:15:23,850 --> 00:15:29,370
support this I'm looking at you IBM db2

00:15:26,279 --> 00:15:32,160
driver so anyone using IBM db2 in their

00:15:29,370 --> 00:15:34,920
apps nobody great

00:15:32,160 --> 00:15:36,420
okay finally just want to say again

00:15:34,920 --> 00:15:37,920
because it's worth repeating that having

00:15:36,420 --> 00:15:39,360
your code and your dependencies in

00:15:37,920 --> 00:15:40,980
source control will really help you

00:15:39,360 --> 00:15:43,100
getting out of that DLL hell that I

00:15:40,980 --> 00:15:45,750
mentioned earlier

00:15:43,100 --> 00:15:48,120
now using a dependency management system

00:15:45,750 --> 00:15:49,470
applies to anyone on any cloud right but

00:15:48,120 --> 00:15:51,150
you're here because of how great Cloud

00:15:49,470 --> 00:15:53,580
Foundry is and how much we care about

00:15:51,150 --> 00:15:56,160
developers so of course Cloud Foundry

00:15:53,580 --> 00:15:57,660
has a special solution just for you that

00:15:56,160 --> 00:16:00,030
helps with dependency management and

00:15:57,660 --> 00:16:01,140
they're called extension bill packs now

00:16:00,030 --> 00:16:02,880
let me get a show of hands

00:16:01,140 --> 00:16:07,680
who knows what an extension bill pack is

00:16:02,880 --> 00:16:11,670
or who's heard of multi buildpack cool I

00:16:07,680 --> 00:16:14,970
know who's actually used one anybody

00:16:11,670 --> 00:16:17,070
actually written one Wow awesome gonna

00:16:14,970 --> 00:16:18,510
talk to you afterwards

00:16:17,070 --> 00:16:19,920
well this is a really cool way to

00:16:18,510 --> 00:16:21,600
improve your team's productivity and

00:16:19,920 --> 00:16:24,030
impress your boss whether you're a

00:16:21,600 --> 00:16:25,380
developer or a platform engineer so

00:16:24,030 --> 00:16:27,000
you're familiar with go to build pack is

00:16:25,380 --> 00:16:28,530
right that's what supplies the

00:16:27,000 --> 00:16:30,210
application runtime it starts your app

00:16:28,530 --> 00:16:31,770
there's also this concept of an

00:16:30,210 --> 00:16:33,330
extension build pack which is used in

00:16:31,770 --> 00:16:35,700
combination with the standard build pack

00:16:33,330 --> 00:16:38,040
in our case for net in combination with

00:16:35,700 --> 00:16:40,110
the HWC or the.net core build packs and

00:16:38,040 --> 00:16:41,670
that extension build pack will inject or

00:16:40,110 --> 00:16:43,590
install additional dependencies for you

00:16:41,670 --> 00:16:45,240
and if you're responsible for lots of

00:16:43,590 --> 00:16:46,770
apps this is a great way to make sure

00:16:45,240 --> 00:16:48,480
they're all getting a specific version

00:16:46,770 --> 00:16:50,160
of a dependency or to make sure that

00:16:48,480 --> 00:16:52,020
they're all upgraded and up-to-date at

00:16:50,160 --> 00:16:53,970
the same time and if your platform

00:16:52,020 --> 00:16:56,100
engineer you can also create build pack

00:16:53,970 --> 00:16:57,930
groups so that certain apps always get a

00:16:56,100 --> 00:17:01,110
specific extension build pack for

00:16:57,930 --> 00:17:03,270
example a security module pretty cool

00:17:01,110 --> 00:17:04,920
right now you don't have to worry about

00:17:03,270 --> 00:17:06,329
adding each and every dependency to your

00:17:04,920 --> 00:17:07,920
app code because you can count on an

00:17:06,329 --> 00:17:10,680
extension build pack to do that for you

00:17:07,920 --> 00:17:12,089
if you have them so what extension build

00:17:10,680 --> 00:17:14,370
packs are out there for you today for

00:17:12,089 --> 00:17:16,530
injecting dependencies well there's a

00:17:14,370 --> 00:17:19,260
handful provided by APM vendors like New

00:17:16,530 --> 00:17:21,030
Relic app dynamics and dynaTrace which

00:17:19,260 --> 00:17:22,650
you can use today but what's really

00:17:21,030 --> 00:17:24,750
useful is that as I mentioned you can

00:17:22,650 --> 00:17:26,880
write your own there's even an extension

00:17:24,750 --> 00:17:28,590
for the.net Steeleye that makes it easy

00:17:26,880 --> 00:17:31,140
to author new extension build packs in

00:17:28,590 --> 00:17:32,550
c-sharp bring an extension build pack

00:17:31,140 --> 00:17:34,230
for dependency is a little bit more work

00:17:32,550 --> 00:17:36,150
today but if you've got a lot of apps to

00:17:34,230 --> 00:17:37,710
move you'll thank yourself in the future

00:17:36,150 --> 00:17:39,510
when all your apps can get dependencies

00:17:37,710 --> 00:17:41,750
into their container with a simple CF

00:17:39,510 --> 00:17:41,750
push

00:17:44,150 --> 00:17:50,280
all right so Sam alluded to some of the

00:17:48,330 --> 00:17:53,460
other problems with the local file

00:17:50,280 --> 00:17:56,460
system in the registry earlier the the

00:17:53,460 --> 00:18:00,510
global application global assembly cache

00:17:56,460 --> 00:18:02,130
sorry you can't really use that in well

00:18:00,510 --> 00:18:04,470
we told you not to use it in 2012 our -

00:18:02,130 --> 00:18:07,050
so hopefully already not using it but

00:18:04,470 --> 00:18:09,360
using it in 2016 with real containers

00:18:07,050 --> 00:18:11,430
also doesn't make sense because all the

00:18:09,360 --> 00:18:13,950
hosts that are running your apps are

00:18:11,430 --> 00:18:16,110
ephemeral and so you can't really load

00:18:13,950 --> 00:18:19,410
stuff into that into that system very

00:18:16,110 --> 00:18:21,690
easily if you're trying to store user

00:18:19,410 --> 00:18:24,240
data somewhere you're gonna need to

00:18:21,690 --> 00:18:26,700
offload it to something like s3 store it

00:18:24,240 --> 00:18:28,590
up in a blob store and you know like

00:18:26,700 --> 00:18:31,020
like integrated windows authentication

00:18:28,590 --> 00:18:32,760
you might not want to be investing in

00:18:31,020 --> 00:18:36,540
certain applications to modernize them

00:18:32,760 --> 00:18:39,480
so this is really a challenge so we've

00:18:36,540 --> 00:18:42,050
introduced a few new support for file

00:18:39,480 --> 00:18:45,090
systems in Quad foundry on Windows

00:18:42,050 --> 00:18:47,490
specifically you can now mount SMB

00:18:45,090 --> 00:18:49,320
shares in application runtime containers

00:18:47,490 --> 00:18:50,850
so if you have an app that needs to

00:18:49,320 --> 00:18:53,490
store data somewhere maybe you don't

00:18:50,850 --> 00:18:55,830
want to store it on s3 you can now just

00:18:53,490 --> 00:18:58,620
mount an SMB share in your container and

00:18:55,830 --> 00:18:59,910
it's pretty it's pretty simple you don't

00:18:58,620 --> 00:19:01,650
need to use any sort of third-party

00:18:59,910 --> 00:19:05,280
library or anything like that just works

00:19:01,650 --> 00:19:06,690
natively in container run time we've

00:19:05,280 --> 00:19:09,570
been looking to bring dynamic volume

00:19:06,690 --> 00:19:11,340
support so this is pretty cool if you're

00:19:09,570 --> 00:19:13,440
familiar with bashed in the lower levels

00:19:11,340 --> 00:19:15,480
of cloud foundry deployment on Windows

00:19:13,440 --> 00:19:17,760
we do not support anything other than

00:19:15,480 --> 00:19:20,570
ephemeral disks so you can't really run

00:19:17,760 --> 00:19:22,920
persistent workloads on Windows but

00:19:20,570 --> 00:19:25,830
kubernetes dynamic volumes support

00:19:22,920 --> 00:19:27,990
uploads a lot of that complexity down to

00:19:25,830 --> 00:19:29,790
the infrastructure layer and so we can

00:19:27,990 --> 00:19:32,630
just bring support for mounting in

00:19:29,790 --> 00:19:35,250
external disks persistent disks into

00:19:32,630 --> 00:19:38,430
container runtime containers which is

00:19:35,250 --> 00:19:41,610
pretty sweet so now you know we have

00:19:38,430 --> 00:19:43,320
this support either for SMB or for

00:19:41,610 --> 00:19:44,960
dynamic volumes an SMB of course will

00:19:43,320 --> 00:19:47,940
work also in container runtime

00:19:44,960 --> 00:19:50,400
containers and so developers can choose

00:19:47,940 --> 00:19:53,220
which platform is right for the feature

00:19:50,400 --> 00:19:55,200
set they need and if you want to

00:19:53,220 --> 00:19:55,970
modernize or can justify modernizing an

00:19:55,200 --> 00:19:56,990
application

00:19:55,970 --> 00:20:00,080
it's gonna be a great fit for

00:19:56,990 --> 00:20:02,030
application run time otherwise maybe

00:20:00,080 --> 00:20:07,340
just leave that workload on container

00:20:02,030 --> 00:20:10,310
run time you might you might also want

00:20:07,340 --> 00:20:12,140
to or need to externalize that session

00:20:10,310 --> 00:20:14,810
state that your application has via

00:20:12,140 --> 00:20:17,150
service so this again comes down to that

00:20:14,810 --> 00:20:20,180
machine that's running your your

00:20:17,150 --> 00:20:23,270
instance of an app being ephemeral and

00:20:20,180 --> 00:20:25,610
so you can't really store that session

00:20:23,270 --> 00:20:28,490
state on the disk again it's gonna go

00:20:25,610 --> 00:20:29,780
away and your your application might not

00:20:28,490 --> 00:20:31,970
always get routed to the same

00:20:29,780 --> 00:20:33,980
application instance so there's really

00:20:31,970 --> 00:20:35,660
no way to know where where that apps

00:20:33,980 --> 00:20:38,810
going to be running when it actually

00:20:35,660 --> 00:20:40,160
picks up a client client request so

00:20:38,810 --> 00:20:42,710
you're going to need to externalize that

00:20:40,160 --> 00:20:44,690
session state somewhere and this is

00:20:42,710 --> 00:20:46,340
where they'll cat bill PACs come in

00:20:44,690 --> 00:20:48,470
really handy so we have a community

00:20:46,340 --> 00:20:51,140
build pack here that I read of session

00:20:48,470 --> 00:20:53,750
asp net build pack which makes it super

00:20:51,140 --> 00:20:56,810
easy to externalize that session state

00:20:53,750 --> 00:20:58,670
in a Redis database and so you just took

00:20:56,810 --> 00:21:00,860
up a cloud foundry write a service to

00:20:58,670 --> 00:21:03,620
your application you pull in this

00:21:00,860 --> 00:21:06,200
dependency you add it to your list of

00:21:03,620 --> 00:21:07,760
filters in your application and boom

00:21:06,200 --> 00:21:10,520
everything's all handled for you

00:21:07,760 --> 00:21:12,500
magically and the the great thing is

00:21:10,520 --> 00:21:13,970
that you can create more build packs

00:21:12,500 --> 00:21:15,800
like this you can hook them up to other

00:21:13,970 --> 00:21:22,430
databases wherever you want to back your

00:21:15,800 --> 00:21:24,260
session state it's it's possible and if

00:21:22,430 --> 00:21:26,000
you're interested in more on that

00:21:24,260 --> 00:21:27,050
persistent volume stuff there's going to

00:21:26,000 --> 00:21:29,450
be a talk at the end of the day tomorrow

00:21:27,050 --> 00:21:30,830
on it as well

00:21:29,450 --> 00:21:32,390
so another challenge that people

00:21:30,830 --> 00:21:34,070
frequently run into and moving their

00:21:32,390 --> 00:21:35,960
older apps into containers in the cloud

00:21:34,070 --> 00:21:37,910
is that their logging is not container

00:21:35,960 --> 00:21:39,500
friendly it's pretty normal for dotnet

00:21:37,910 --> 00:21:41,750
developers to use the Windows Event log

00:21:39,500 --> 00:21:43,460
for example but that can be a problem in

00:21:41,750 --> 00:21:45,740
a distributed system where you may not

00:21:43,460 --> 00:21:47,570
exactly always know which instance of an

00:21:45,740 --> 00:21:50,750
app or a service is causing a problem

00:21:47,570 --> 00:21:52,220
and where it's located so one of the

00:21:50,750 --> 00:21:54,170
solutions we have is that on Cloud

00:21:52,220 --> 00:21:56,120
Foundry you can see all your logs from

00:21:54,170 --> 00:21:59,270
all your apps instances using one simple

00:21:56,120 --> 00:22:04,210
command CF logs and all the logs are

00:21:59,270 --> 00:22:06,650
aggregated by wait for the logger Gator

00:22:04,210 --> 00:22:08,480
so how do you get your NIT logs to be

00:22:06,650 --> 00:22:09,890
picked up by the logger gator well it's

00:22:08,480 --> 00:22:11,270
very simple really you just

00:22:09,890 --> 00:22:13,070
them output to the console using

00:22:11,270 --> 00:22:14,390
standard out or standard error and then

00:22:13,070 --> 00:22:15,730
they'll all be right there when you need

00:22:14,390 --> 00:22:17,960
them

00:22:15,730 --> 00:22:20,540
another solution we have for debugging

00:22:17,960 --> 00:22:22,130
and distributed systems is a steel-toe

00:22:20,540 --> 00:22:24,140
component called distributed tracing

00:22:22,130 --> 00:22:25,640
this is a tool that will let you track

00:22:24,140 --> 00:22:27,140
the request as it bounces around your

00:22:25,640 --> 00:22:29,000
different services and their instances

00:22:27,140 --> 00:22:30,830
and will let you see exactly how long

00:22:29,000 --> 00:22:33,530
each step takes and where the requests

00:22:30,830 --> 00:22:34,940
got dropped if it got dropped I'm not

00:22:33,530 --> 00:22:36,950
saying any of the requests in your apps

00:22:34,940 --> 00:22:38,750
drop but maybe you know maybe one of

00:22:36,950 --> 00:22:41,240
your friends has an app that drops

00:22:38,750 --> 00:22:42,680
requests steel-toed attributed tracing

00:22:41,240 --> 00:22:44,420
could give them a handy dashboard

00:22:42,680 --> 00:22:46,040
that'll help you see what went wrong and

00:22:44,420 --> 00:22:49,090
what went and where it happened you know

00:22:46,040 --> 00:22:49,090
for a friend

00:22:49,660 --> 00:22:54,920
cool yeah and last year on the on the

00:22:52,610 --> 00:22:58,070
mainstage summit in Boston we gave a

00:22:54,920 --> 00:23:00,050
demo of hooking up a visual studio

00:22:58,070 --> 00:23:02,390
debugger to a live running application

00:23:00,050 --> 00:23:04,570
on Cloud Foundry so you know for a

00:23:02,390 --> 00:23:06,680
friend you can you can use that as well

00:23:04,570 --> 00:23:10,070
another challenge that we've heard

00:23:06,680 --> 00:23:12,290
people running into before is using or

00:23:10,070 --> 00:23:14,630
requiring IAS and specifically

00:23:12,290 --> 00:23:17,330
customized Appy filters for an

00:23:14,630 --> 00:23:21,170
application so in application runtime

00:23:17,330 --> 00:23:23,960
today we're using hosted web core now we

00:23:21,170 --> 00:23:26,390
have a program called HWC exe that runs

00:23:23,960 --> 00:23:28,670
in the container host of a web core is a

00:23:26,390 --> 00:23:32,360
lightweight is so it binds to the same

00:23:28,670 --> 00:23:35,030
dll as IAS but it's not IAS does not

00:23:32,360 --> 00:23:37,610
have the entire IAS feature set and you

00:23:35,030 --> 00:23:40,580
can't do things like run customized ABI

00:23:37,610 --> 00:23:43,400
filters in your container so this is a

00:23:40,580 --> 00:23:47,240
problem we've heard of from from users

00:23:43,400 --> 00:23:50,180
of cloud foundry in the past so it's not

00:23:47,240 --> 00:23:53,660
possible to push a full docker image to

00:23:50,180 --> 00:23:56,240
container runtime what this means is you

00:23:53,660 --> 00:23:59,660
can actually run an entire IAS in that

00:23:56,240 --> 00:24:01,160
container so imagine you say need to

00:23:59,660 --> 00:24:03,320
install a custom printer driver to

00:24:01,160 --> 00:24:06,170
generate PDFs for your customers maybe

00:24:03,320 --> 00:24:08,390
that's a thing you do you can now push a

00:24:06,170 --> 00:24:10,520
container running ice with that custom

00:24:08,390 --> 00:24:13,280
ice app you filter and you can finally

00:24:10,520 --> 00:24:15,920
print those PDFs for your customers

00:24:13,280 --> 00:24:16,370
they're probably easier ways to to do

00:24:15,920 --> 00:24:18,170
this

00:24:16,370 --> 00:24:20,900
maybe modernize the application of it

00:24:18,170 --> 00:24:22,910
but if you can't justify doing that

00:24:20,900 --> 00:24:23,370
modernization you have that application

00:24:22,910 --> 00:24:25,590
that you can

00:24:23,370 --> 00:24:28,380
modernize it's not possible to run that

00:24:25,590 --> 00:24:33,630
work on container run time with very

00:24:28,380 --> 00:24:36,120
minimal effort okay so the last

00:24:33,630 --> 00:24:37,950
challenge for moving older apps into

00:24:36,120 --> 00:24:39,450
containers in the cloud is how to deal

00:24:37,950 --> 00:24:41,550
with messy configuration in across

00:24:39,450 --> 00:24:43,470
environments so it's very common that

00:24:41,550 --> 00:24:44,850
the application configuration will be

00:24:43,470 --> 00:24:47,700
unique to the server that's running on

00:24:44,850 --> 00:24:48,930
now this is a big no-no for the cloud in

00:24:47,700 --> 00:24:51,000
the cloud we want parity across

00:24:48,930 --> 00:24:53,820
environments and one immutable artifact

00:24:51,000 --> 00:24:55,200
traveling between those environments how

00:24:53,820 --> 00:24:57,290
do I know if I'm living up to that 12

00:24:55,200 --> 00:24:59,820
factor goal or even just four and a half

00:24:57,290 --> 00:25:01,830
well you should ask yourself if my web

00:24:59,820 --> 00:25:03,780
server crashed tomorrow could I easily

00:25:01,830 --> 00:25:05,340
recreate it I'm not gonna embarrass

00:25:03,780 --> 00:25:07,080
anybody by asking anybody show hands on

00:25:05,340 --> 00:25:10,710
this one but you know you know who you

00:25:07,080 --> 00:25:12,510
are because in the cloud our servers

00:25:10,710 --> 00:25:14,010
don't have names they're not our friends

00:25:12,510 --> 00:25:16,800
you probably heard this before they're

00:25:14,010 --> 00:25:18,150
cattle not pets but thankfully getting

00:25:16,800 --> 00:25:20,309
your configuration under control is

00:25:18,150 --> 00:25:21,480
relatively easy to address first thing

00:25:20,309 --> 00:25:23,220
you need to do is make sure that you

00:25:21,480 --> 00:25:25,290
aren't using the machine key in your web

00:25:23,220 --> 00:25:27,900
config an example of this is if you're

00:25:25,290 --> 00:25:29,730
doing cross-sell encryption where you're

00:25:27,900 --> 00:25:32,059
you no need to use encrypted cookies

00:25:29,730 --> 00:25:33,840
across multiple instances for example

00:25:32,059 --> 00:25:35,429
well if you're doing something like that

00:25:33,840 --> 00:25:35,940
or using the machine key in any other

00:25:35,429 --> 00:25:37,860
way

00:25:35,940 --> 00:25:39,030
you want to replace it or override it

00:25:37,860 --> 00:25:40,350
because all the instance of your app

00:25:39,030 --> 00:25:44,130
aren't going to be running it on the

00:25:40,350 --> 00:25:45,929
same machine anymore now that's just one

00:25:44,130 --> 00:25:47,790
tiny example of how configuration can

00:25:45,929 --> 00:25:49,050
come back to bite you in the cloud the

00:25:47,790 --> 00:25:51,480
bigger thing that you want to address is

00:25:49,050 --> 00:25:53,130
to externalize your configuration this

00:25:51,480 --> 00:25:54,840
allows you to get rid of all your config

00:25:53,130 --> 00:25:56,400
transform files and keep your artifact

00:25:54,840 --> 00:25:57,900
the same between all your environments

00:25:56,400 --> 00:25:59,100
with your app settings and connection

00:25:57,900 --> 00:26:01,860
strings being injected by the

00:25:59,100 --> 00:26:04,590
environment itself so the best way to do

00:26:01,860 --> 00:26:06,420
that the most recommended way is to use

00:26:04,590 --> 00:26:08,730
the config server provided by steel-toe

00:26:06,420 --> 00:26:10,620
this is a backing service allows you to

00:26:08,730 --> 00:26:12,690
store all your configuration in a secure

00:26:10,620 --> 00:26:14,610
way and then inject them based on the

00:26:12,690 --> 00:26:16,710
environment you can also do some other

00:26:14,610 --> 00:26:18,179
cool stuff like rebuild all your apps if

00:26:16,710 --> 00:26:21,000
you make a configuration change for

00:26:18,179 --> 00:26:22,410
example now if you think all that sounds

00:26:21,000 --> 00:26:24,300
too fancy for you I don't blame you

00:26:22,410 --> 00:26:26,700
dinette apps aren't always used to so

00:26:24,300 --> 00:26:28,890
much excitement but you still need to

00:26:26,700 --> 00:26:30,330
externalize your configuration the

00:26:28,890 --> 00:26:31,770
simplest way to do this is to import

00:26:30,330 --> 00:26:33,780
your configuration as environment

00:26:31,770 --> 00:26:36,130
variables or to store them as part of a

00:26:33,780 --> 00:26:38,710
custom user-provided service or cups

00:26:36,130 --> 00:26:41,470
those are a couple ways to avoid snow

00:26:38,710 --> 00:26:43,330
flaky so that concludes the problems and

00:26:41,470 --> 00:26:45,280
solutions part of the talk we try to be

00:26:43,330 --> 00:26:47,650
comprehensive but like I said we really

00:26:45,280 --> 00:26:49,419
really care about app developers and app

00:26:47,650 --> 00:26:51,130
development teams so we want to hear

00:26:49,419 --> 00:26:53,049
from you what did we miss

00:26:51,130 --> 00:26:57,730
stick around for questions or come talk

00:26:53,049 --> 00:26:59,559
to us afterwards alright so just before

00:26:57,730 --> 00:27:02,590
we close it up I want to talk about the

00:26:59,559 --> 00:27:04,809
future so we've been focusing on making

00:27:02,590 --> 00:27:08,289
ireenie support Windows so every knee

00:27:04,809 --> 00:27:11,679
will be the kubernetes backed basically

00:27:08,289 --> 00:27:12,970
alternative to Diego the explorations

00:27:11,679 --> 00:27:14,440
have been going well we've learned a lot

00:27:12,970 --> 00:27:17,409
we've learned a lot about kubernetes

00:27:14,440 --> 00:27:20,020
we've learnt even more about Windows so

00:27:17,409 --> 00:27:21,280
it's pretty it's pretty exciting dr.

00:27:20,020 --> 00:27:23,500
Nick before this talked a little bit

00:27:21,280 --> 00:27:26,409
about KPAC so we've been working on

00:27:23,500 --> 00:27:30,429
bringing support to quad native fill

00:27:26,409 --> 00:27:32,380
packs and related services for Windows

00:27:30,429 --> 00:27:34,740
and so we'll hopefully be able to get

00:27:32,380 --> 00:27:37,510
KPAC working on Windows as well

00:27:34,740 --> 00:27:40,210
our team has also been working on

00:27:37,510 --> 00:27:43,990
porting envoy to Windows so envoy as a

00:27:40,210 --> 00:27:46,299
open source proxy server does not

00:27:43,990 --> 00:27:48,309
currently have Windows support but it

00:27:46,299 --> 00:27:49,809
has great Linux support so our team has

00:27:48,309 --> 00:27:51,610
been working on that port it's been

00:27:49,809 --> 00:27:52,780
going really well the reason we want

00:27:51,610 --> 00:27:55,270
this is we'd like to bring a

00:27:52,780 --> 00:27:58,630
full-service mesh support to Windows

00:27:55,270 --> 00:28:01,360
with something like its do and tomorrow

00:27:58,630 --> 00:28:05,590
we have a talk speaking with Sophie here

00:28:01,360 --> 00:28:07,960
at 2:40 p.m. about achieving pragmatic

00:28:05,590 --> 00:28:10,750
parity for Windows containers so please

00:28:07,960 --> 00:28:12,790
come and check that out for more and

00:28:10,750 --> 00:28:15,950
that's it

00:28:12,790 --> 00:28:15,950

YouTube URL: https://www.youtube.com/watch?v=RmeuKj4Pc28


