Title: Cloud Foundry Community Advisory Board [September 2017]
Publication date: 2017-09-23
Playlist: Community Advisory Board
Description: 
	Video from the monthly Cloud Foundry Community Advisory Board (CAB) meeting. Learn more at https://www.cloudfoundry.org/.

Agenda:
* Calendar and tooling
- Now every 3rd Wed of the month (see above)
- See Zoom info above ^^^ in and the #CAB Slack channel

CFF update
* About 650+ registration. Aiming above 1000. Please register and help spread the words and join us in Basel, Switzerland
* CF Hackathon part deux! Cool prizes and code. Join us.

Projects updates
* Runtime PMC
- Diego team has a test environment running sans Consul! All good so far.
* BOSH
- Pushing teams to test and try BOSH DNS
- Various CLI v2 clean ups
- Check out new “vendor-package” command. Docs and info soon
- BPM == BOSH Process Manager with goals to make it easier to manage lifecycle of jobs and allow them to be --containerized; also simplify process management (replaces CTL scripts with YAML). Still in beta
* Extensions
- New proposals: Service Fabrik and CF Local
- CF-Abacus v1.0 released and v2 inception planned. SAP and IBM proposing to move as Core project
- CF-Extensions bot running. Please tag (add topic) “cf-extensions” to your repos to be listed
- Clean up, process updates, inquiries, and CF-Summit office hours Thursday October 12th @ 11:15a
* Community projects and presentations
- SAP’s Service Fabrik’s proposal by Ashish Jain
- Pivotal’s OSS Scheduler by Scott L’Hommedieu
Captions: 
	00:00:00,030 --> 00:00:06,089
that's what I'm saying it's not very

00:00:01,589 --> 00:00:09,059
clear so if you can you can use the call

00:00:06,089 --> 00:00:11,059
numbers if that helps so that way your

00:00:09,059 --> 00:00:17,340
voice will I click will at least come

00:00:11,059 --> 00:00:19,949
clearly you might want to try that and

00:00:17,340 --> 00:00:25,380
then we can use your your data

00:00:19,949 --> 00:00:29,039
connection for sharing the screen ok I

00:00:25,380 --> 00:00:35,370
have 8 a.m. will give people a few more

00:00:29,039 --> 00:00:37,050
minutes to do it yeah I can hear you

00:00:35,370 --> 00:00:39,719
actually she's just that it's it's it's

00:00:37,050 --> 00:00:41,340
breaking so it's gonna be difficult if

00:00:39,719 --> 00:00:50,550
you're gonna be representing so try to

00:00:41,340 --> 00:00:53,660
use try to call the numbers it's the

00:00:50,550 --> 00:00:57,360
same so you should you should try to

00:00:53,660 --> 00:01:00,449
yeah you don't drop stay where you are

00:00:57,360 --> 00:01:03,210
and just disconnect your audio and then

00:01:00,449 --> 00:01:04,799
call on a phone line so that way your

00:01:03,210 --> 00:01:13,340
voice will go to the phone line which

00:01:04,799 --> 00:01:16,229
would be number oh you are using oh

00:01:13,340 --> 00:01:20,840
that's gonna be the best we can do all

00:01:16,229 --> 00:01:20,840
right I know you calling from bingo so

00:01:23,090 --> 00:01:32,820
do what we can thank you all right so a

00:01:29,369 --> 00:01:36,270
bunch of people are joining I see about

00:01:32,820 --> 00:01:38,670
12 right now will give people a few more

00:01:36,270 --> 00:01:45,000
minutes as I said and then we'll get

00:01:38,670 --> 00:01:46,829
started so as I always say what we will

00:01:45,000 --> 00:01:50,939
do it we are getting back in in a moment

00:01:46,829 --> 00:01:53,009
we use other number okay sounds good

00:01:50,939 --> 00:01:57,680
sounds good just let me know when you're

00:01:53,009 --> 00:01:57,680
there in an hour yeah we can see okay

00:01:58,159 --> 00:02:07,979
all right I'm guessing Wayne has started

00:02:02,399 --> 00:02:14,270
to recording alright excellent thank you

00:02:07,979 --> 00:02:14,270
and we have Eric from Diego coming

00:02:14,780 --> 00:02:20,819
so we'll still give people a few more

00:02:16,950 --> 00:02:24,540
minutes and just a reminder if you're a

00:02:20,819 --> 00:02:30,060
pivotal come join us in Scorpius

00:02:24,540 --> 00:02:33,269
downstairs football I have Danny and an

00:02:30,060 --> 00:02:36,360
Eric Whitney so we're feeling kind of

00:02:33,269 --> 00:02:46,410
low mate you easier but she's she's at

00:02:36,360 --> 00:02:47,819
our desk so we got about 15 a couple

00:02:46,410 --> 00:02:50,519
more minutes and then we'll get started

00:02:47,819 --> 00:02:53,250
DK just ping me he's gonna be calling

00:02:50,519 --> 00:02:55,650
before what we called it already all

00:02:53,250 --> 00:03:09,390
right so we got all the key people I

00:02:55,650 --> 00:03:10,980
don't know if dr. Mac you are back in

00:03:09,390 --> 00:03:14,220
can you hear it

00:03:10,980 --> 00:03:18,570
oh it's much better it's much better

00:03:14,220 --> 00:03:20,340
good yeah and then you still need to you

00:03:18,570 --> 00:03:21,480
still need to Dow with your data so you

00:03:20,340 --> 00:03:25,980
can share your screen at some point

00:03:21,480 --> 00:03:29,190
right okay and let me check what they

00:03:25,980 --> 00:03:31,530
have be happy right so we are already

00:03:29,190 --> 00:03:34,410
dialed in using blue meeting as well so

00:03:31,530 --> 00:03:36,209
we will share our yeah exon exon okay

00:03:34,410 --> 00:03:38,790
let me check to see if Scott wills here

00:03:36,209 --> 00:03:40,620
on pivotal this is gonna be the other

00:03:38,790 --> 00:03:46,479
presenter

00:03:40,620 --> 00:03:46,479
[Music]

00:03:47,329 --> 00:03:54,799
dude I love his name his French name for

00:03:51,510 --> 00:03:54,799
men and God

00:03:55,880 --> 00:04:02,690
alright Scott is not here yet that's

00:03:58,410 --> 00:04:06,510
okay he's the second presentation ah

00:04:02,690 --> 00:04:14,730
Scott is here which you'll um June how

00:04:06,510 --> 00:04:17,370
are you can you hear your Scott can you

00:04:14,730 --> 00:04:17,789
say something just to check had a mic

00:04:17,370 --> 00:04:20,579
check

00:04:17,789 --> 00:04:23,220
can you hear me yes excellent thank you

00:04:20,579 --> 00:04:25,050
Scott okay cool so I think we got

00:04:23,220 --> 00:04:27,990
everybody we have about twenty three

00:04:25,050 --> 00:04:30,840
parts events I said 8:05

00:04:27,990 --> 00:04:33,360
it's 804 in my clock but with ten

00:04:30,840 --> 00:04:39,170
seconds to go and I will get started is

00:04:33,360 --> 00:04:47,490
a chip here or anybody from CFF like

00:04:39,170 --> 00:04:50,820
Chris I don't see yeah I don't see

00:04:47,490 --> 00:04:52,950
anybody here okay all right so we get

00:04:50,820 --> 00:04:54,810
started I think we have two great

00:04:52,950 --> 00:04:57,090
presentations so let's try to give them

00:04:54,810 --> 00:04:58,800
as much time as possible so we'll go

00:04:57,090 --> 00:05:01,020
through the normal things which is the

00:04:58,800 --> 00:05:04,800
FF update and then kind of like the big

00:05:01,020 --> 00:05:06,480
pmc projects updates i think people

00:05:04,800 --> 00:05:07,590
usually take notes so if you can take

00:05:06,480 --> 00:05:08,100
notes that would be that would be

00:05:07,590 --> 00:05:10,710
helpful

00:05:08,100 --> 00:05:17,190
so for c FF let me ask again anybody

00:05:10,710 --> 00:05:19,080
from the foundation here no okay so I

00:05:17,190 --> 00:05:22,470
think you know I wasn't a call recently

00:05:19,080 --> 00:05:25,020
with I think some folks and we have some

00:05:22,470 --> 00:05:28,320
data so first thing I think I as I

00:05:25,020 --> 00:05:32,750
recalled this was on Tuesday they said

00:05:28,320 --> 00:05:35,610
they had about 650 or so

00:05:32,750 --> 00:05:37,500
registrations and that's pretty good

00:05:35,610 --> 00:05:40,590
because it's only about three more week

00:05:37,500 --> 00:05:44,970
well we're two more two three more weeks

00:05:40,590 --> 00:05:48,090
for the summit and usually a lot of

00:05:44,970 --> 00:05:49,560
these registrations happen again but

00:05:48,090 --> 00:05:51,660
still if you haven't registered you

00:05:49,560 --> 00:05:54,630
should register there is a cop code for

00:05:51,660 --> 00:05:58,560
people that contribute to Cloud Foundry

00:05:54,630 --> 00:06:01,950
and you're trying to reach a thousand so

00:05:58,560 --> 00:06:03,540
if you can help by pushing some

00:06:01,950 --> 00:06:08,880
advertisement to your channels that

00:06:03,540 --> 00:06:11,190
would be very helpful again if you go to

00:06:08,880 --> 00:06:13,380
the website you can see the agenda it's

00:06:11,190 --> 00:06:15,390
jam-packed tons of things happening

00:06:13,380 --> 00:06:20,300
including again there will be a

00:06:15,390 --> 00:06:22,620
hackathon if you were not in Santa Clara

00:06:20,300 --> 00:06:26,100
let me tell you it was really cool not

00:06:22,620 --> 00:06:28,670
just because I was healthy with it but

00:06:26,100 --> 00:06:32,940
also because of the what came out of it

00:06:28,670 --> 00:06:35,190
if you want we can discuss that vast

00:06:32,940 --> 00:06:37,050
lack but there were really really cool

00:06:35,190 --> 00:06:41,070
projects coming out of it including one

00:06:37,050 --> 00:06:45,120
between pivotal and I guess one

00:06:41,070 --> 00:06:47,760
of IBM Jules where they added service to

00:06:45,120 --> 00:06:50,220
CF in a really cool way they actually

00:06:47,760 --> 00:06:53,700
won and there were really cool stuff

00:06:50,220 --> 00:06:59,130
like for instance adding a repo for boss

00:06:53,700 --> 00:07:01,590
releases excellent projects and it was

00:06:59,130 --> 00:07:03,870
one day you're doing it again

00:07:01,590 --> 00:07:09,720
try to put it oh and by the way the

00:07:03,870 --> 00:07:14,450
prize everybody that run got a drone I

00:07:09,720 --> 00:07:17,250
think it was a DJI maverick I want one

00:07:14,450 --> 00:07:19,620
but if you want one you can put it I

00:07:17,250 --> 00:07:22,620
can't put it but but definitely there'll

00:07:19,620 --> 00:07:25,770
be something significant that you can

00:07:22,620 --> 00:07:27,870
take off all right I don't know you want

00:07:25,770 --> 00:07:30,900
to add anything to kind of like updates

00:07:27,870 --> 00:07:34,770
with GFF if you have I don't know

00:07:30,900 --> 00:07:36,810
anything else no I think that was a good

00:07:34,770 --> 00:07:41,220
capture of the things that were talked

00:07:36,810 --> 00:07:44,040
about in the last call oh cool so yes so

00:07:41,220 --> 00:07:46,020
register come join us and basil

00:07:44,040 --> 00:07:48,270
tons of people here I know at pivotal

00:07:46,020 --> 00:07:52,130
will be there starting from IBM as well

00:07:48,270 --> 00:07:55,170
and I am guessing every other company so

00:07:52,130 --> 00:07:59,460
come join us if anything for swiss

00:07:55,170 --> 00:08:02,700
chocolates pretty good all right

00:07:59,460 --> 00:08:08,660
so with that let me see if there any

00:08:02,700 --> 00:08:08,660
questions about summit or anything no

00:08:09,680 --> 00:08:16,950
okay cool so we'll do kind of project

00:08:13,800 --> 00:08:19,770
highlights we usually start with Yui for

00:08:16,950 --> 00:08:21,360
runtime if she can mention anything

00:08:19,770 --> 00:08:23,150
that's sort of interesting that people

00:08:21,360 --> 00:08:28,940
should pay attention to

00:08:23,150 --> 00:08:32,640
you're new so we in the runtime PMC

00:08:28,940 --> 00:08:35,840
there was a good amount of project

00:08:32,640 --> 00:08:39,830
lifecycle activity recently The

00:08:35,840 --> 00:08:42,690
Container networking team the the work

00:08:39,830 --> 00:08:47,970
went from incubation to active in the

00:08:42,690 --> 00:08:51,990
runtime PMC we also have created a new

00:08:47,970 --> 00:08:54,850
project services API team based in based

00:08:51,990 --> 00:08:57,370
in London um that will be where

00:08:54,850 --> 00:09:03,940
with the cap you team but with a focus

00:08:57,370 --> 00:09:05,860
on open-source broker API and helping

00:09:03,940 --> 00:09:09,699
with with services one of the first

00:09:05,860 --> 00:09:14,560
things they're taking on is persistent

00:09:09,699 --> 00:09:17,139
sharing which I did for them to take on

00:09:14,560 --> 00:09:20,670
it's been challenging and kind of scary

00:09:17,139 --> 00:09:25,019
whenever we think about it the

00:09:20,670 --> 00:09:27,610
additionally we also have another team

00:09:25,019 --> 00:09:31,000
incubating in the runtime PMC the CF

00:09:27,610 --> 00:09:38,319
permissions team and they're looking at

00:09:31,000 --> 00:09:40,990
how to first tackle identity provider

00:09:38,319 --> 00:09:46,290
group mappings for cloud controller

00:09:40,990 --> 00:09:48,699
roles and then at some point after that

00:09:46,290 --> 00:09:50,740
kind of custom roles fine-grained

00:09:48,699 --> 00:09:52,600
authorization for cloud controller and

00:09:50,740 --> 00:09:55,209
potentially other components in the

00:09:52,600 --> 00:09:58,870
Cloud Foundry ecosystem to you to make

00:09:55,209 --> 00:10:03,189
you safe so those are kind of the broad

00:09:58,870 --> 00:10:04,029
strokes for the runtime PMC excellent

00:10:03,189 --> 00:10:07,000
thank you

00:10:04,029 --> 00:10:11,439
Yui you want to add anything Eric for

00:10:07,000 --> 00:10:14,949
Segel yeah for Diego we're continuing

00:10:11,439 --> 00:10:16,630
with our decoupling from dependence on

00:10:14,949 --> 00:10:19,389
console in fact we have an environment

00:10:16,630 --> 00:10:22,360
in CI and it's totally console running

00:10:19,389 --> 00:10:24,040
mas DNS and doing any active console

00:10:22,360 --> 00:10:27,550
service registrations or locks anymore

00:10:24,040 --> 00:10:30,839
so that's really exciting and then one

00:10:27,550 --> 00:10:34,269
other thing we've been working with

00:10:30,839 --> 00:10:36,389
another team that's developing a new

00:10:34,269 --> 00:10:39,189
project called a Bosch process manager

00:10:36,389 --> 00:10:41,470
that's designed to containerize box jobs

00:10:39,189 --> 00:10:43,569
and so we just finished some opt-in

00:10:41,470 --> 00:10:45,939
integration with their release that

00:10:43,569 --> 00:10:50,110
allows you to run all the diego jobs in

00:10:45,939 --> 00:10:51,490
run three containers so just moving

00:10:50,110 --> 00:10:53,259
incrementally towards better security

00:10:51,490 --> 00:10:55,750
posture for box releases I know

00:10:53,259 --> 00:10:58,600
integration of that as an opt-in feature

00:10:55,750 --> 00:11:01,380
is also continuing across some of the

00:10:58,600 --> 00:11:01,380
other panelists

00:11:01,530 --> 00:11:09,660
thank you Eric very cool

00:11:04,660 --> 00:11:09,660
any questions for Eric for youi know

00:11:09,960 --> 00:11:14,620
[Music]

00:11:11,610 --> 00:11:18,430
people want to get to the clocks all

00:11:14,620 --> 00:11:20,440
right fair enough I guess if you have

00:11:18,430 --> 00:11:24,070
questions you know after the fact put it

00:11:20,440 --> 00:11:27,120
either an agenda or an the sack I'm

00:11:24,070 --> 00:11:34,950
monitoring that okay

00:11:27,120 --> 00:11:37,180
Dimitri this is your turn your need not

00:11:34,950 --> 00:11:42,220
not many new things have been happening

00:11:37,180 --> 00:11:46,420
in terms of any new tracks but we've

00:11:42,220 --> 00:11:48,250
been continuing to finish up all of the

00:11:46,420 --> 00:11:51,460
DNS related things as Eric just

00:11:48,250 --> 00:11:55,720
mentioned we've been trying to push

00:11:51,460 --> 00:11:58,510
other teams to use DNS in in their

00:11:55,720 --> 00:12:02,170
environments as well and trying to push

00:11:58,510 --> 00:12:07,560
PWAs to continue adopt some of those

00:12:02,170 --> 00:12:14,110
changes we've been recently implementing

00:12:07,560 --> 00:12:17,440
caching in our genus server and also

00:12:14,110 --> 00:12:20,380
trying to connect it up with all kinds

00:12:17,440 --> 00:12:22,930
of more customer healthiness information

00:12:20,380 --> 00:12:27,760
and whatnot to make it more viable to be

00:12:22,930 --> 00:12:30,070
used with software like MySQL so if

00:12:27,760 --> 00:12:33,220
anyone is interesting interested in more

00:12:30,070 --> 00:12:37,440
details about genus do drop by in slack

00:12:33,220 --> 00:12:41,580
and we can definitely chat more about I

00:12:37,440 --> 00:12:47,790
think aside from that we've been doing

00:12:41,580 --> 00:12:50,830
all kinds of different tiny eli v2

00:12:47,790 --> 00:12:55,060
cleanups over last month or so so some

00:12:50,830 --> 00:12:57,310
of the newer features should be quite

00:12:55,060 --> 00:13:01,890
interesting we recently added a command

00:12:57,310 --> 00:13:05,560
called vendor package that allows you to

00:13:01,890 --> 00:13:08,800
vendor the software from a different

00:13:05,560 --> 00:13:11,140
release without necessarily having to

00:13:08,800 --> 00:13:13,460
copy paste all the dependencies and try

00:13:11,140 --> 00:13:15,710
to figure out to manage that

00:13:13,460 --> 00:13:17,839
so this stuff is documented on borgia oh

00:13:15,710 --> 00:13:20,089
but I haven't had a chance to email out

00:13:17,839 --> 00:13:23,960
about this new command for to a large

00:13:20,089 --> 00:13:30,500
community so that's going to be an email

00:13:23,960 --> 00:13:35,300
up coming soon you know that's quite

00:13:30,500 --> 00:13:36,680
interesting I think actually Eric didn't

00:13:35,300 --> 00:13:40,540
mention yet another thing that's

00:13:36,680 --> 00:13:44,060
interesting BPM boards process manager

00:13:40,540 --> 00:13:49,700
so one of the you know one of the goals

00:13:44,060 --> 00:13:54,410
for this project was to make it easier

00:13:49,700 --> 00:13:58,310
to you know manage the lifecycle of the

00:13:54,410 --> 00:14:01,880
job starts top right and we've

00:13:58,310 --> 00:14:04,010
historically had people try to write

00:14:01,880 --> 00:14:08,320
some kind of a common utilities to to

00:14:04,010 --> 00:14:12,589
manage the pitfalls and what that so BPM

00:14:08,320 --> 00:14:14,330
aside from you know as an implementation

00:14:12,589 --> 00:14:16,520
detail trying to throw in your process

00:14:14,330 --> 00:14:19,490
into a run see container at the goal of

00:14:16,520 --> 00:14:22,520
BPM also was as well to simplify and

00:14:19,490 --> 00:14:24,529
hopefully improve the UX of you know

00:14:22,520 --> 00:14:29,089
starting and stopping and managing the

00:14:24,529 --> 00:14:31,610
process through to wash it still works

00:14:29,089 --> 00:14:33,800
with Monnett so the money isn't gone or

00:14:31,610 --> 00:14:36,320
anything like that but instead of

00:14:33,800 --> 00:14:40,220
writing a CTL script you just write a

00:14:36,320 --> 00:14:43,850
Yama file and hopefully that makes a

00:14:40,220 --> 00:14:45,890
makes it more easier to package in it's

00:14:43,850 --> 00:14:51,740
not quite done yet in just yesterday

00:14:45,890 --> 00:14:53,270
they had the first final release but we

00:14:51,740 --> 00:14:56,000
are definitely trying to incorporate it

00:14:53,270 --> 00:14:59,990
into a few other releases did he you

00:14:56,000 --> 00:15:01,860
know how it goes that's all I got for

00:14:59,990 --> 00:15:05,160
now

00:15:01,860 --> 00:15:09,209
whoo man that's pretty cool so this this

00:15:05,160 --> 00:15:12,110
I guess llamo language is it something

00:15:09,209 --> 00:15:17,100
that the boss team is creating or is it

00:15:12,110 --> 00:15:20,610
based on some other existing I guess I

00:15:17,100 --> 00:15:23,010
would call the language it's it's really

00:15:20,610 --> 00:15:26,010
just you know maybe five or so keys

00:15:23,010 --> 00:15:30,360
right they just specify how to start

00:15:26,010 --> 00:15:34,589
start the process it's based on what we

00:15:30,360 --> 00:15:37,589
did for Windows integration were quite

00:15:34,589 --> 00:15:39,839
similar at least so you know as the

00:15:37,589 --> 00:15:42,630
executable path arguments environment

00:15:39,839 --> 00:15:45,420
with labels and there's there's like two

00:15:42,630 --> 00:15:48,060
or three tiny other things but let's

00:15:45,420 --> 00:15:49,620
finish it just seemed the what was

00:15:48,060 --> 00:15:54,920
commonly already being asked in other

00:15:49,620 --> 00:15:57,570
places yeah okay cool I did a him

00:15:54,920 --> 00:16:00,930
haircuts when when I said thing with but

00:15:57,570 --> 00:16:02,970
one more thing is I guess it simplifies

00:16:00,930 --> 00:16:05,160
because now you're not writing directly

00:16:02,970 --> 00:16:06,300
form on it or depending on sort of the

00:16:05,160 --> 00:16:08,880
underlying and then you have a

00:16:06,300 --> 00:16:11,730
translation layer that takes that llamo

00:16:08,880 --> 00:16:14,610
and does the right thing is it is it

00:16:11,730 --> 00:16:18,209
also less things to worry about like

00:16:14,610 --> 00:16:22,370
it's it's the the resulting control

00:16:18,209 --> 00:16:24,870
scripts are tiny or smaller well so

00:16:22,370 --> 00:16:26,279
there is no more control script after

00:16:24,870 --> 00:16:31,170
this one right I mean unless you're

00:16:26,279 --> 00:16:33,510
packaging your software to you know to

00:16:31,170 --> 00:16:37,040
do maybe super fancy things you might

00:16:33,510 --> 00:16:41,250
have to have a more complex starting

00:16:37,040 --> 00:16:46,649
bash script or whatever but for 99% of

00:16:41,250 --> 00:16:49,709
cases you do end up without any CTL

00:16:46,649 --> 00:16:52,890
script I see so cool so you simplify

00:16:49,709 --> 00:16:56,670
basically your release with just a

00:16:52,890 --> 00:17:00,660
couple Yama files versus controls but

00:16:56,670 --> 00:17:02,430
correct all right Thank You DK I mean

00:17:00,660 --> 00:17:05,520
this isn't this is major I'm asking on

00:17:02,430 --> 00:17:07,410
purpose because I AK I know a Dmitry and

00:17:05,520 --> 00:17:10,589
I discussed this way back and he showed

00:17:07,410 --> 00:17:13,770
me some example of it I'm pretty amazed

00:17:10,589 --> 00:17:15,360
that this I mean this is gonna be super

00:17:13,770 --> 00:17:17,459
helpful to know

00:17:15,360 --> 00:17:20,120
borsch adoption but also to sort of

00:17:17,459 --> 00:17:22,199
simplify the current releases so people

00:17:20,120 --> 00:17:24,390
you should take a look at that I don't

00:17:22,199 --> 00:17:27,360
know if people have questions comments

00:17:24,390 --> 00:17:29,490
yeah so this is Ruben from Stark and

00:17:27,360 --> 00:17:32,220
Wayne I have a question so would it be

00:17:29,490 --> 00:17:34,260
something you vent I used a new Bosch

00:17:32,220 --> 00:17:37,530
fender functionality for so you vendor

00:17:34,260 --> 00:17:39,120
the release of BPM in your existing

00:17:37,530 --> 00:17:43,920
release to use this or how would you

00:17:39,120 --> 00:17:46,530
consume this one is to actually do

00:17:43,920 --> 00:17:52,200
something similar to what we do we're

00:17:46,530 --> 00:17:55,110
planning to do is bores DNS the one of

00:17:52,200 --> 00:17:56,610
the you know some time ago we will

00:17:55,110 --> 00:17:59,130
introduce the functionality to have

00:17:56,610 --> 00:18:00,660
multiple runtime configs that

00:17:59,130 --> 00:18:03,299
functionality in a Cell isn't baked

00:18:00,660 --> 00:18:05,490
right now because there's no way to list

00:18:03,299 --> 00:18:08,730
runtime configs and things like that so

00:18:05,490 --> 00:18:13,200
there's actually a work to address that

00:18:08,730 --> 00:18:17,610
that's happening right now but what's

00:18:13,200 --> 00:18:18,900
gonna happen is we expect that you know

00:18:17,610 --> 00:18:21,450
we're gonna end up with two runtime

00:18:18,900 --> 00:18:23,490
configs one let's say would be for DNS

00:18:21,450 --> 00:18:26,160
and I'll be saying Pooh genus everywhere

00:18:23,490 --> 00:18:28,830
and the other one would be put BPM

00:18:26,160 --> 00:18:32,010
everywhere and when you do put BPM

00:18:28,830 --> 00:18:35,400
everywhere your other jobs should be

00:18:32,010 --> 00:18:37,530
able to just say you know reference ppm

00:18:35,400 --> 00:18:40,799
binary at this location where we kept

00:18:37,530 --> 00:18:43,910
jobs BPM in DB n so the expectation is

00:18:40,799 --> 00:18:46,620
that this is actually just it's like a

00:18:43,910 --> 00:18:50,040
it's almost like dynamic linking versus

00:18:46,620 --> 00:18:52,799
static linking right because the one of

00:18:50,040 --> 00:18:55,650
the notions is that BPM as a very stable

00:18:52,799 --> 00:18:57,510
interface and you know even if it is

00:18:55,650 --> 00:18:58,770
changing it will have a version approach

00:18:57,510 --> 00:19:01,400
to it

00:18:58,770 --> 00:19:05,460
it is okay to actually depend on it

00:19:01,400 --> 00:19:07,140
without rendering it and given that we

00:19:05,460 --> 00:19:10,470
don't want everyone to be rendering in

00:19:07,140 --> 00:19:13,550
the same thing you know this is the kind

00:19:10,470 --> 00:19:17,540
of approach that were going after

00:19:13,550 --> 00:19:19,850
I should add Diego released opt-in does

00:19:17,540 --> 00:19:23,240
it justice seems that there's a BPM

00:19:19,850 --> 00:19:25,340
executable at a conventional location so

00:19:23,240 --> 00:19:27,650
that's the case if you manually deploy

00:19:25,340 --> 00:19:29,390
the BPM release and it happens to be at

00:19:27,650 --> 00:19:32,030
the expected location and Burma kept

00:19:29,390 --> 00:19:39,140
Travis ppm that would be the case if it

00:19:32,030 --> 00:19:41,600
arrives here runtime all right thank you

00:19:39,140 --> 00:19:43,520
Eric and Dimitri any other question

00:19:41,600 --> 00:19:46,070
Reuben or somebody else yeah

00:19:43,520 --> 00:19:48,230
one follow-up question you meant or to

00:19:46,070 --> 00:19:54,140
have mentioned that it also allows you

00:19:48,230 --> 00:19:58,250
to run stuff in garden run see how is

00:19:54,140 --> 00:20:00,860
that insulting not the garden part just

00:19:58,250 --> 00:20:03,950
runs oh oh just from sea all right

00:20:00,860 --> 00:20:07,430
that's also a dependency right I was at

00:20:03,950 --> 00:20:14,720
time version that that comes as a

00:20:07,430 --> 00:20:16,550
package from the BPM release thank you

00:20:14,720 --> 00:20:21,230
okay any other question and one last

00:20:16,550 --> 00:20:23,450
question all right sweet so let me go to

00:20:21,230 --> 00:20:26,870
extensions very quickly so we can give a

00:20:23,450 --> 00:20:29,360
Shi Shan Scott some time to present so

00:20:26,870 --> 00:20:31,550
we have two new proposal one of which

00:20:29,360 --> 00:20:34,130
will be discussed today service fabric

00:20:31,550 --> 00:20:39,800
the SSAT team will be discussing this

00:20:34,130 --> 00:20:42,740
next and then Stephen the line CF local

00:20:39,800 --> 00:20:44,030
which he presented last week I as I

00:20:42,740 --> 00:20:45,710
mentioned to people you should

00:20:44,030 --> 00:20:50,150
definitely check it out really really

00:20:45,710 --> 00:20:54,190
cool so one more thing is that abacus

00:20:50,150 --> 00:20:57,800
version 1.0 was released and I want to

00:20:54,190 --> 00:21:00,620
acknowledge sa peas contribution for

00:20:57,800 --> 00:21:04,790
making this happen in particular here

00:21:00,620 --> 00:21:08,000
still in his team android area they they

00:21:04,790 --> 00:21:12,980
are really you know doing a game game of

00:21:08,000 --> 00:21:14,480
job stacking up a lot of people and they

00:21:12,980 --> 00:21:17,650
also have a separate project called

00:21:14,480 --> 00:21:20,810
abacus poker so if you're looking to

00:21:17,650 --> 00:21:23,540
charge people for your CF insulation and

00:21:20,810 --> 00:21:27,110
you wanna track you know what people are

00:21:23,540 --> 00:21:29,870
using and you want to do it at scale

00:21:27,110 --> 00:21:32,809
you should take a look at abacus it's

00:21:29,870 --> 00:21:35,660
deployed right now in production in both

00:21:32,809 --> 00:21:38,690
PSAP cloud and of course the IBM cloud

00:21:35,660 --> 00:21:41,179
where it started and with that I want to

00:21:38,690 --> 00:21:44,090
mention that we are proposing to move it

00:21:41,179 --> 00:21:45,950
as a core project so I'm gonna start the

00:21:44,090 --> 00:21:50,240
process for that to happen and then

00:21:45,950 --> 00:21:52,340
hopefully was a bullet coming with Jeff

00:21:50,240 --> 00:21:54,770
summit coming up it probably will have

00:21:52,340 --> 00:21:57,230
will probably suggest a food after CF

00:21:54,770 --> 00:22:06,220
summit but just be aware that this is

00:21:57,230 --> 00:22:12,110
coming as an active project max yes yeah

00:22:06,220 --> 00:22:14,570
thank you yeah couple more things the

00:22:12,110 --> 00:22:17,510
bot that I discussed I think maybe last

00:22:14,570 --> 00:22:20,270
time it's running so if you tag your

00:22:17,510 --> 00:22:22,130
project with CF extensions it should

00:22:20,270 --> 00:22:25,040
find it if it doesn't find it ping me

00:22:22,130 --> 00:22:27,260
because I'm not looking at all repo all

00:22:25,040 --> 00:22:30,679
organizations that cloud foundry has

00:22:27,260 --> 00:22:32,660
repos on but it should find a major ones

00:22:30,679 --> 00:22:36,200
but if you don't if you tagged and

00:22:32,660 --> 00:22:40,000
you're not seeing anything ping me and

00:22:36,200 --> 00:22:43,880
then a few more things is that obviously

00:22:40,000 --> 00:22:45,559
you know so I'll give a shameless plug I

00:22:43,880 --> 00:22:49,429
guess and then I'll explain why I'm

00:22:45,559 --> 00:22:52,669
doing cleanup so at the summit I have a

00:22:49,429 --> 00:22:54,679
talk I guess sponsored by IBM so that's

00:22:52,669 --> 00:22:56,870
why I get it I get to talk but it's an

00:22:54,679 --> 00:22:59,419
interesting one because I it sort of

00:22:56,870 --> 00:23:02,150
explains the the philosophy behind

00:22:59,419 --> 00:23:04,850
extension which is let a thousand

00:23:02,150 --> 00:23:07,070
flowers bloom right so come to this talk

00:23:04,850 --> 00:23:10,580
if you can but the reason I'm mentioning

00:23:07,070 --> 00:23:13,250
it is because while we try to attract as

00:23:10,580 --> 00:23:15,620
many projects as we can into extensions

00:23:13,250 --> 00:23:17,390
because we believe in innovation so if

00:23:15,620 --> 00:23:19,610
you have your innovative ideas bring

00:23:17,390 --> 00:23:21,200
them on we also need to realize that

00:23:19,610 --> 00:23:25,610
some of those flowers will die

00:23:21,200 --> 00:23:27,559
so that means lean on so be aware that

00:23:25,610 --> 00:23:29,299
as you submit to extensions and as

00:23:27,559 --> 00:23:32,330
projects are building up we'll probably

00:23:29,299 --> 00:23:34,250
look at projects that are not having a

00:23:32,330 --> 00:23:36,020
lot of traction and start cleaning them

00:23:34,250 --> 00:23:38,419
up and I think in foundry typically that

00:23:36,020 --> 00:23:40,760
means moving them to attic or moving

00:23:38,419 --> 00:23:42,020
them out of whatever the PMC is

00:23:40,760 --> 00:23:43,760
so I'm looking at that including

00:23:42,020 --> 00:23:47,030
projects that I've submitted to

00:23:43,760 --> 00:23:49,370
essentially be cleaned up and then one

00:23:47,030 --> 00:23:51,710
more thing is that there's been a few

00:23:49,370 --> 00:23:54,260
inquiries so Windows come in out let you

00:23:51,710 --> 00:23:56,990
know and so we've got a nice pipeline

00:23:54,260 --> 00:23:58,940
building up if you're interested in

00:23:56,990 --> 00:24:01,490
detailed trusting me and then final

00:23:58,940 --> 00:24:03,890
thing is and the process update in the

00:24:01,490 --> 00:24:06,320
document which is two pages there is a

00:24:03,890 --> 00:24:08,360
update to the last part of the document

00:24:06,320 --> 00:24:11,030
mainly in terms of how does a project

00:24:08,360 --> 00:24:13,400
move from incubating to become an active

00:24:11,030 --> 00:24:15,170
project so I added a paragraph on this

00:24:13,400 --> 00:24:18,470
if you care about those kind of things

00:24:15,170 --> 00:24:20,360
take a look at it and make sure you give

00:24:18,470 --> 00:24:22,610
me any feedback otherwise by the end of

00:24:20,360 --> 00:24:24,350
the month I'll assume that nobody

00:24:22,610 --> 00:24:26,600
commented and then we'll move it to

00:24:24,350 --> 00:24:28,460
official as part of the process it's

00:24:26,600 --> 00:24:29,900
pretty straight forward it just says you

00:24:28,460 --> 00:24:32,420
know people can essentially after

00:24:29,900 --> 00:24:33,920
incubation ask for their project to

00:24:32,420 --> 00:24:36,500
become active as long as it's in

00:24:33,920 --> 00:24:41,050
production so that's that's all I have

00:24:36,500 --> 00:24:41,050
if you have any questions that you know

00:24:41,320 --> 00:24:47,930
okay so I have 825 fishes here and Scott

00:24:46,610 --> 00:24:49,970
is also here

00:24:47,930 --> 00:24:51,680
Ashish has a longer presentation so

00:24:49,970 --> 00:24:53,900
we'll start with him so we can get give

00:24:51,680 --> 00:24:56,180
him as much time as possible make sure

00:24:53,900 --> 00:24:58,670
she's part of the team and si fee that

00:24:56,180 --> 00:25:01,340
did service fabric is calling us all the

00:24:58,670 --> 00:25:03,080
way from India in Bengaluru so sheesh

00:25:01,340 --> 00:25:05,000
please share your screen all right thank

00:25:03,080 --> 00:25:10,730
you we see your screen so can you say

00:25:05,000 --> 00:25:13,010
something yeah all right thank you dr.

00:25:10,730 --> 00:25:15,590
banks for giving us an opportunity today

00:25:13,010 --> 00:25:19,790
to present the with fabric in this

00:25:15,590 --> 00:25:22,480
meeting today and I have time Ashish I'm

00:25:19,790 --> 00:25:25,520
the lead for Paris fabric and I have got

00:25:22,480 --> 00:25:34,840
Debbie who is one of the lead architect

00:25:25,520 --> 00:25:34,840
for Thomas happily all right okay

00:25:40,460 --> 00:25:45,840
all right so so what what is the rich

00:25:43,799 --> 00:25:48,630
fabric so service fabric is basically a

00:25:45,840 --> 00:25:50,630
Cloud Foundry broker and developed for

00:25:48,630 --> 00:25:51,809
provisioning and management of

00:25:50,630 --> 00:25:54,960
enterprise-grade

00:25:51,809 --> 00:25:57,480
backing services while we comply to open

00:25:54,960 --> 00:25:59,880
service broker if they specification we

00:25:57,480 --> 00:26:02,070
also provide additional capabilities for

00:25:59,880 --> 00:26:05,280
data operations such as backup restore

00:26:02,070 --> 00:26:07,590
and monitoring as of today service

00:26:05,280 --> 00:26:09,720
fabric provides couple of ways of the

00:26:07,590 --> 00:26:12,090
weekend services one is using docker

00:26:09,720 --> 00:26:15,870
swamp as our developer owning services

00:26:12,090 --> 00:26:20,210
and using Bosh efficient production rate

00:26:15,870 --> 00:26:20,210
services yeah we move to the next right

00:26:21,049 --> 00:26:33,990
all right so so our vision with respect

00:26:24,539 --> 00:26:36,090
to this project is our mission is

00:26:33,990 --> 00:26:39,539
basically to try the sewer with

00:26:36,090 --> 00:26:42,240
well-defined api's which can be utilized

00:26:39,539 --> 00:26:44,700
by service owners to develop

00:26:42,240 --> 00:26:47,880
enterprise-grade backing services and

00:26:44,700 --> 00:26:50,789
when it comes to day to operate we look

00:26:47,880 --> 00:26:52,980
forward to applicable framework which

00:26:50,789 --> 00:26:55,740
should provide the service owners to

00:26:52,980 --> 00:26:57,960
have the freedom to choose the bonnet

00:26:55,740 --> 00:26:59,909
and backing back up and restore some

00:26:57,960 --> 00:27:01,860
sense of their troy and of course

00:26:59,909 --> 00:27:03,480
finally they should be able to deploy

00:27:01,860 --> 00:27:10,080
their solution on a multi cloud

00:27:03,480 --> 00:27:13,559
infrastructure and then probably achieve

00:27:10,080 --> 00:27:15,900
this idea is to basically conform to

00:27:13,559 --> 00:27:18,600
open service broker a pH specification

00:27:15,900 --> 00:27:21,600
and then obviously to work closely with

00:27:18,600 --> 00:27:23,130
cloud foundry community to solve so any

00:27:21,600 --> 00:27:26,440
challenges which we see forward

00:27:23,130 --> 00:27:29,360
[Music]

00:27:26,440 --> 00:27:32,480
so what is SP is gonna bring to the

00:27:29,360 --> 00:27:35,030
table so we we bring a solid ten

00:27:32,480 --> 00:27:38,750
full-time engineers contributing to

00:27:35,030 --> 00:27:40,610
service fabric and also we have been

00:27:38,750 --> 00:27:43,610
running surface fabric in production

00:27:40,610 --> 00:27:46,160
since May this year where some of our

00:27:43,610 --> 00:27:49,190
services like both grace radius MongoDB

00:27:46,160 --> 00:27:51,890
and RabbitMQ utilize our service every

00:27:49,190 --> 00:27:54,860
framework and when it comes to day to

00:27:51,890 --> 00:27:56,570
operations we and then they are well

00:27:54,860 --> 00:27:59,120
supported by day to operations for

00:27:56,570 --> 00:28:01,610
backup and restore so we have expedite

00:27:59,120 --> 00:28:07,010
of managing and developing some of these

00:28:01,610 --> 00:28:10,370
services yeah going to the available

00:28:07,010 --> 00:28:12,710
features right so currently we provide

00:28:10,370 --> 00:28:15,169
two flavors of provisioning banking

00:28:12,710 --> 00:28:18,320
services one is using docker swarm for

00:28:15,169 --> 00:28:22,030
developer services and then again watch

00:28:18,320 --> 00:28:24,350
base services for log production-grade

00:28:22,030 --> 00:28:28,520
antonio impression trade Falconeri

00:28:24,350 --> 00:28:31,520
application and we also have open

00:28:28,520 --> 00:28:34,220
sourced generate backup and restore

00:28:31,520 --> 00:28:36,590
library which basically abstracts

00:28:34,220 --> 00:28:39,500
functionalities like volume creation and

00:28:36,590 --> 00:28:41,600
deletion attach detach which can be

00:28:39,500 --> 00:28:43,580
utilized by the service owners who

00:28:41,600 --> 00:28:46,179
implement their own backup and restore

00:28:43,580 --> 00:28:51,010
strategy as of today we support

00:28:46,179 --> 00:28:54,140
platforms like OpenStack AWS and mature

00:28:51,010 --> 00:28:56,299
while service fabric conforms to open

00:28:54,140 --> 00:28:58,160
service API open sorry proper APA

00:28:56,299 --> 00:29:01,070
reciprocation we also have provide

00:28:58,160 --> 00:29:03,590
extension API for backup and restore

00:29:01,070 --> 00:29:04,820
so these API scum with functionalities

00:29:03,590 --> 00:29:07,309
like start backup

00:29:04,820 --> 00:29:10,549
abort backup and similarly for your

00:29:07,309 --> 00:29:12,620
restore operation why this is important

00:29:10,549 --> 00:29:14,809
you also needs to have capability to

00:29:12,620 --> 00:29:17,000
list on all the various backups which

00:29:14,809 --> 00:29:19,910
are there in the link of this file so

00:29:17,000 --> 00:29:21,799
for that we provide API is variants you

00:29:19,910 --> 00:29:23,570
can retrieve all the factors which are

00:29:21,799 --> 00:29:26,510
there and according to your choice you

00:29:23,570 --> 00:29:28,429
can restore the backup and then we also

00:29:26,510 --> 00:29:30,500
provide a generic service instance

00:29:28,429 --> 00:29:32,510
dashboard which is created automatically

00:29:30,500 --> 00:29:34,440
for every service which is provision on

00:29:32,510 --> 00:29:36,990
the platform

00:29:34,440 --> 00:29:39,930
on a production rate system unique

00:29:36,990 --> 00:29:43,350
capabilities to basically automates the

00:29:39,930 --> 00:29:45,630
backup automate your backups backups

00:29:43,350 --> 00:29:47,700
right so for that we provide a scheduler

00:29:45,630 --> 00:29:50,340
scheduler API which enables you to take

00:29:47,700 --> 00:29:53,220
periodic backups you can we can define

00:29:50,340 --> 00:29:56,670
you can use ground-based expressions or

00:29:53,220 --> 00:29:59,450
human readable expressions to subscribe

00:29:56,670 --> 00:30:00,570
some of the 10 and also if you want to

00:29:59,450 --> 00:30:02,010
abort

00:30:00,570 --> 00:30:06,030
some of these strategies that is also a

00:30:02,010 --> 00:30:07,950
tional supported by the people we also

00:30:06,030 --> 00:30:10,620
have written our logical volume driver

00:30:07,950 --> 00:30:13,950
for dr. Cottle which is which is again

00:30:10,620 --> 00:30:17,790
as being opened publicly which provides

00:30:13,950 --> 00:30:19,620
capabilities tools you will use to

00:30:17,790 --> 00:30:22,680
create multiple logical volumes in

00:30:19,620 --> 00:30:24,510
anything and give a party and then when

00:30:22,680 --> 00:30:27,330
it comes to and then when it comes to

00:30:24,510 --> 00:30:31,070
monitoring we we generate lifecycle

00:30:27,330 --> 00:30:33,600
events like the bind and unbind and

00:30:31,070 --> 00:30:35,610
infer broker specific operations flying

00:30:33,600 --> 00:30:38,340
backup/restore so these are generated as

00:30:35,610 --> 00:30:40,890
women and using animal interpretation

00:30:38,340 --> 00:30:42,800
integrate and you can use women to

00:30:40,890 --> 00:30:45,000
listen to some of these events and then

00:30:42,800 --> 00:30:47,940
according to your dashboard strategy you

00:30:45,000 --> 00:30:51,990
can plug in like influx DB and then of

00:30:47,940 --> 00:30:53,720
all - so that's about the available

00:30:51,990 --> 00:30:56,280
features as of terrain service happy

00:30:53,720 --> 00:30:58,920
moving to the next slide on our road man

00:30:56,280 --> 00:31:01,980
lately we have seen lot of load on our

00:30:58,920 --> 00:31:03,930
wash when it comes to update so we are

00:31:01,980 --> 00:31:07,650
coming up with an implementation where

00:31:03,930 --> 00:31:10,910
we can define we can define an update

00:31:07,650 --> 00:31:14,220
window where the surface owners can

00:31:10,910 --> 00:31:17,010
schedule their updates as per they would

00:31:14,220 --> 00:31:20,280
strategies we also want to enable

00:31:17,010 --> 00:31:21,840
support of other backup and restore

00:31:20,280 --> 00:31:24,720
solution so currently we provide a

00:31:21,840 --> 00:31:26,160
python-based library and we look forward

00:31:24,720 --> 00:31:30,330
to providing some other functions as

00:31:26,160 --> 00:31:32,580
well as of today we provide events for

00:31:30,330 --> 00:31:34,020
women and we look forward to in creating

00:31:32,580 --> 00:31:38,870
some of other monitoring and logging

00:31:34,020 --> 00:31:38,870
solutions for example drama tears and

00:31:40,450 --> 00:31:45,890
when it comes to operations management

00:31:43,010 --> 00:31:48,320
it becomes important that we provide a

00:31:45,890 --> 00:31:51,410
UI based framework which can be used by

00:31:48,320 --> 00:31:53,720
operators to monitor some of the various

00:31:51,410 --> 00:31:56,140
service instances it becomes extremely

00:31:53,720 --> 00:31:59,390
difficult for operators who know about

00:31:56,140 --> 00:32:01,340
various PF command so something which is

00:31:59,390 --> 00:32:04,429
in a work plan and then we also look

00:32:01,340 --> 00:32:05,809
forward to the implementation of the new

00:32:04,429 --> 00:32:07,520
feature which has been introduced by

00:32:05,809 --> 00:32:11,480
Bosch who don't know something like

00:32:07,520 --> 00:32:13,130
route then some extra capabilities which

00:32:11,480 --> 00:32:14,630
we provide like backup and restore we

00:32:13,130 --> 00:32:22,010
look forward to providing the PFC

00:32:14,630 --> 00:32:25,340
alignment ok now I will hand it to these

00:32:22,010 --> 00:32:31,640
who will take us to explain the are key

00:32:25,340 --> 00:32:34,040
and then we followed by ugly Thanks this

00:32:31,640 --> 00:32:38,690
is the high level diagram of service

00:32:34,040 --> 00:32:40,970
fabrics vocals as you see as you see in

00:32:38,690 --> 00:32:42,590
the center of the component diagram in

00:32:40,970 --> 00:32:45,740
the service fabric broker it is a

00:32:42,590 --> 00:32:47,960
node.js implementation of the APA

00:32:45,740 --> 00:32:50,900
specification so the northbound

00:32:47,960 --> 00:32:55,179
interfaces are confirmed by the cloud

00:32:50,900 --> 00:32:59,510
coverage the UI and we and since in EPA

00:32:55,179 --> 00:33:05,390
consume 50 LX plugins as well as the

00:32:59,510 --> 00:33:08,059
normal and we service broker it talks to

00:33:05,390 --> 00:33:09,919
swarm manager for instantiating

00:33:08,059 --> 00:33:12,770
Java based service instances which is

00:33:09,919 --> 00:33:15,740
used purely for development purposes and

00:33:12,770 --> 00:33:21,110
it goes where the boss or deploying boss

00:33:15,740 --> 00:33:24,559
a solution this board can grade the back

00:33:21,110 --> 00:33:29,809
open up information we stored on a three

00:33:24,559 --> 00:33:33,470
and six toes and that is blocked or the

00:33:29,809 --> 00:33:35,840
news today with the high level diagram

00:33:33,470 --> 00:33:37,490
we can take a look at the deployment

00:33:35,840 --> 00:33:43,730
diagram as well for service fabric

00:33:37,490 --> 00:33:47,480
broker I will from the heart of it is

00:33:43,730 --> 00:33:51,570
the director the board directors starts

00:33:47,480 --> 00:33:56,850
the landscape diploma starts with

00:33:51,570 --> 00:33:59,729
ah deploy by the bot unit and the

00:33:56,850 --> 00:34:01,559
cloud quarter gets deployed and then we

00:33:59,729 --> 00:34:04,649
have the service fabric deployment which

00:34:01,559 --> 00:34:06,210
one which has two main parts of it so

00:34:04,649 --> 00:34:08,129
the semi-public

00:34:06,210 --> 00:34:11,010
deployment has the service local

00:34:08,129 --> 00:34:52,770
implementation wherein you have the

00:34:11,010 --> 00:35:16,799
service rabbit the Euler who's the

00:34:52,770 --> 00:35:44,400
moderator for this somebody has some can

00:35:16,799 --> 00:35:49,920
you please all right thank you go ahead

00:35:44,400 --> 00:35:52,740
go - ish okay so I was explaining the

00:35:49,920 --> 00:35:55,140
fabric deployment it contains two main

00:35:52,740 --> 00:35:58,410
parts one is the broker job which has

00:35:55,140 --> 00:36:00,420
the broker the swarm manager on the

00:35:58,410 --> 00:36:02,670
scheduler co-located on the same VM and

00:36:00,420 --> 00:36:04,799
then based on the number of order

00:36:02,670 --> 00:36:07,859
containers that we want to browse

00:36:04,799 --> 00:36:13,349
you can add the number of copper nodes

00:36:07,859 --> 00:36:15,630
and we also have on this fabric we also

00:36:13,349 --> 00:36:17,579
have a retainer MongoDB which is used to

00:36:15,630 --> 00:36:20,789
store the schedule information for the

00:36:17,579 --> 00:36:23,009
for the battles and other scheduled

00:36:20,789 --> 00:36:26,130
operations that get done via the service

00:36:23,009 --> 00:36:27,989
fabric process and each of the service

00:36:26,130 --> 00:36:31,559
instances themselves which are deployed

00:36:27,989 --> 00:36:35,459
by a service fabric broker they they can

00:36:31,559 --> 00:36:37,469
be where the fabric broker and the

00:36:35,459 --> 00:36:39,599
access to the service fabric broker for

00:36:37,469 --> 00:36:41,670
an admin can be via the jump-offs and

00:36:39,599 --> 00:36:44,039
there is a service fabric admin UI so

00:36:41,670 --> 00:36:47,430
this is a high-level deployment view of

00:36:44,039 --> 00:36:55,259
the service fabric so let's take a quick

00:36:47,430 --> 00:36:56,939
demo as well so as a service owner so if

00:36:55,259 --> 00:36:58,890
somebody is a service owner and they

00:36:56,939 --> 00:37:00,989
want to bring in a service on-boarded

00:36:58,890 --> 00:37:02,910
onto the service fabric so what are the

00:37:00,989 --> 00:37:04,949
things that is required so there are

00:37:02,910 --> 00:37:07,380
certain responsibilities that we expect

00:37:04,949 --> 00:37:08,910
from our service owner and then there

00:37:07,380 --> 00:37:12,059
are certain responsibilities that the

00:37:08,910 --> 00:37:14,099
service fabric does the service of steel

00:37:12,059 --> 00:37:17,130
they need to define their service

00:37:14,099 --> 00:37:20,069
catalog which which gets displayed on

00:37:17,130 --> 00:37:24,449
the marketplace in tier they need to

00:37:20,069 --> 00:37:27,959
also define a partial manifest with just

00:37:24,449 --> 00:37:30,059
a job definition so it is a minimal

00:37:27,959 --> 00:37:31,559
mannequin the minimal service manifest

00:37:30,059 --> 00:37:34,109
that we call which they need to define

00:37:31,559 --> 00:37:36,179
it just has the jobs information now

00:37:34,109 --> 00:37:39,359
what service fabric does is it takes

00:37:36,179 --> 00:37:41,609
that minimal service manifest and the

00:37:39,359 --> 00:37:43,559
service catalog and at real time they

00:37:41,609 --> 00:37:46,049
get part of the they become part of the

00:37:43,559 --> 00:37:46,679
service fabric configuration and at

00:37:46,049 --> 00:37:48,869
runtime

00:37:46,679 --> 00:37:50,849
service fabric generates the complete

00:37:48,869 --> 00:37:53,160
deployment manifest for the required

00:37:50,849 --> 00:37:56,279
service based on the service plans that

00:37:53,160 --> 00:37:58,739
is provided in the input and based on

00:37:56,279 --> 00:38:00,599
the service plan you put is a boss mr.

00:37:58,739 --> 00:38:02,640
Hispanic can generate the manifest and

00:38:00,599 --> 00:38:06,059
provides that manifest for wash to do

00:38:02,640 --> 00:38:12,209
the provisioning so let me just quickly

00:38:06,059 --> 00:38:14,699
go through the demo part of it so I have

00:38:12,209 --> 00:38:17,999
three tiles here so the bottom kind is I

00:38:14,699 --> 00:38:22,339
have logged into the jumbo

00:38:17,999 --> 00:38:26,729
and to quickly show you to start with

00:38:22,339 --> 00:38:30,779
one of the services this is an example

00:38:26,729 --> 00:38:32,789
service so this is our open source

00:38:30,779 --> 00:38:36,559
github ref also where we are giving some

00:38:32,789 --> 00:38:39,119
examples of what a service needs to do

00:38:36,559 --> 00:38:41,159
so I'm part of your onboarding they need

00:38:39,119 --> 00:38:45,419
to define the catalogue by defining

00:38:41,159 --> 00:38:47,879
their service plan there are certain

00:38:45,419 --> 00:38:49,709
information that are specific to us and

00:38:47,879 --> 00:38:53,759
we define the format of how it is

00:38:49,709 --> 00:38:56,309
supposed to be done and once they define

00:38:53,759 --> 00:38:58,619
the service plan they also need to

00:38:56,309 --> 00:39:03,209
provide a minimal manifest so the

00:38:58,619 --> 00:39:06,569
minimal manifest it's a template it's a

00:39:03,209 --> 00:39:08,759
template which is used by our the lodash

00:39:06,569 --> 00:39:11,219
template or to generate the actual

00:39:08,759 --> 00:39:13,259
manifest so you can see the actual

00:39:11,219 --> 00:39:16,199
manifest where the low - we use low -

00:39:13,259 --> 00:39:18,869
and they are supposed to provide the job

00:39:16,199 --> 00:39:20,369
definitions for the jobs and the

00:39:18,869 --> 00:39:24,059
properties that are required for the job

00:39:20,369 --> 00:39:25,769
status and all the other attributes like

00:39:24,059 --> 00:39:28,619
the network's definition the resourceful

00:39:25,769 --> 00:39:31,469
definition so this pool and the releases

00:39:28,619 --> 00:39:34,859
of all these are injected by service

00:39:31,469 --> 00:39:37,259
fabric that ran five so now assuming

00:39:34,859 --> 00:39:38,879
that some of the services have provided

00:39:37,259 --> 00:39:41,459
the catalog and we have our code it

00:39:38,879 --> 00:39:44,939
misses it once it's on board we can use

00:39:41,459 --> 00:39:48,379
them in the marketplace and this will

00:39:44,939 --> 00:39:51,250
take a sample example I will provision

00:39:48,379 --> 00:39:52,910
adopted service

00:39:51,250 --> 00:39:57,059
[Music]

00:39:52,910 --> 00:40:00,839
so I'm gonna provision a booster sequel

00:39:57,059 --> 00:40:03,119
server on a doctor base so the doctor

00:40:00,839 --> 00:40:06,509
will service creation follows the

00:40:03,119 --> 00:40:10,079
synchronous rate we're in the services

00:40:06,509 --> 00:40:15,470
created synchronously so now I am on the

00:40:10,079 --> 00:40:20,069
double post so I can see that there is

00:40:15,470 --> 00:40:23,549
container that is created by the basic

00:40:20,069 --> 00:40:34,500
service fabric broker now I could also

00:40:23,549 --> 00:40:37,500
create a boss based service plan so this

00:40:34,500 --> 00:40:48,569
is amazing closed operation so since

00:40:37,500 --> 00:40:49,859
it's the boss base as well and then so

00:40:48,569 --> 00:40:52,140
here you can see that this is a

00:40:49,859 --> 00:40:54,059
dashboard URL for a service and I can

00:40:52,140 --> 00:41:07,230
login to the dashboard URL and I can see

00:40:54,059 --> 00:41:10,890
the events as it is happening so right

00:41:07,230 --> 00:41:13,330
now it's creating the missing VM and I

00:41:10,890 --> 00:41:29,400
can see the same thing on the boss

00:41:13,330 --> 00:41:32,200
[Music]

00:41:29,400 --> 00:41:35,200
so now as you can see the deployment is

00:41:32,200 --> 00:41:38,650
getting created here and on the service

00:41:35,200 --> 00:41:41,230
instance dashboard you can as well

00:41:38,650 --> 00:41:45,780
monitor this here as and when the

00:41:41,230 --> 00:41:48,460
progress of the deployment is happening

00:41:45,780 --> 00:41:50,080
so the servicing class would use the

00:41:48,460 --> 00:41:52,960
basic information about the service and

00:41:50,080 --> 00:41:54,550
this is a generic - both that is loaded

00:41:52,960 --> 00:41:59,530
for all the onboard services by the

00:41:54,550 --> 00:42:02,320
service fabric automatically in the

00:41:59,530 --> 00:42:05,020
meantime by this by the time this gets

00:42:02,320 --> 00:42:06,850
provision I also have a sample

00:42:05,020 --> 00:42:11,050
application which I just want to show

00:42:06,850 --> 00:42:17,200
you so this is I just downloaded this

00:42:11,050 --> 00:42:24,880
app and open so this app is not bound to

00:42:17,200 --> 00:42:29,560
anything so it's right now not bound to

00:42:24,880 --> 00:42:31,720
anything and what I would do is for the

00:42:29,560 --> 00:42:34,540
sake of this demo I already had created

00:42:31,720 --> 00:42:39,160
a service instance called a demo test so

00:42:34,540 --> 00:42:47,770
I will just bind that to it and and this

00:42:39,160 --> 00:42:49,630
is the app URL so you can see on the top

00:42:47,770 --> 00:42:51,820
right hand corner it is not bound to any

00:42:49,630 --> 00:42:54,340
services and all the information from

00:42:51,820 --> 00:43:14,770
this is coming in from the in-memory

00:42:54,340 --> 00:43:19,830
database so I will bind this app the

00:43:14,770 --> 00:43:19,830
service and I will restart the app

00:43:34,160 --> 00:43:39,450
so by the time the applets restarted let

00:43:37,380 --> 00:43:44,370
me just show you the log so this is I am

00:43:39,450 --> 00:43:47,670
logging into the broker VM and I would

00:43:44,370 --> 00:43:58,380
just want show the deployment manifest

00:43:47,670 --> 00:44:14,400
back service fabric generates ok so yeah

00:43:58,380 --> 00:44:16,800
here is the deployment manifest yeah so

00:44:14,400 --> 00:44:20,610
here is the deployment manifest for the

00:44:16,800 --> 00:44:22,380
deployment that we just created and so

00:44:20,610 --> 00:44:26,700
which fabric automatically takes care of

00:44:22,380 --> 00:44:28,500
providing all the all the other aspects

00:44:26,700 --> 00:44:30,750
of our deployment manifest

00:44:28,500 --> 00:44:32,850
probably most of this I want to go into

00:44:30,750 --> 00:44:35,640
the cloud particles when we integrate it

00:44:32,850 --> 00:44:38,730
into the bottle oh but all of this right

00:44:35,640 --> 00:44:40,980
now is provided by service fabric the

00:44:38,730 --> 00:44:44,100
network definition and only the job

00:44:40,980 --> 00:44:47,280
definition part of it is something that

00:44:44,100 --> 00:44:50,700
the subsystem makes you define okay so

00:44:47,280 --> 00:44:53,700
now looks like the the app is up so we

00:44:50,700 --> 00:44:57,110
can go back to the app and the switch

00:44:53,700 --> 00:44:57,110
refers the browser

00:44:57,320 --> 00:45:05,390
and you can see that the app is bound to

00:44:59,990 --> 00:45:07,850
this person and I would also like to

00:45:05,390 --> 00:45:11,510
show you the extension EPA is that this

00:45:07,850 --> 00:45:14,810
fabric has implemented having and its

00:45:11,510 --> 00:45:17,180
extension et yeah let me do a quick time

00:45:14,810 --> 00:45:20,090
check we have about because we need to

00:45:17,180 --> 00:45:25,160
get to Scott so maybe if you can wrap up

00:45:20,090 --> 00:45:30,290
in about two or three minutes okay yeah

00:45:25,160 --> 00:45:32,510
sure yeah yeah okay sure we also have

00:45:30,290 --> 00:45:37,600
extension API which is integrated why

00:45:32,510 --> 00:45:40,910
are the CFC Li so one could just go and

00:45:37,600 --> 00:45:43,820
they can do a he'll start back up and

00:45:40,910 --> 00:45:49,370
then they can say demo tape so this was

00:45:43,820 --> 00:45:51,230
a service instance that was created some

00:45:49,370 --> 00:45:55,880
time back and it was bound to this app

00:45:51,230 --> 00:46:00,830
and one could monitor the status of this

00:45:55,880 --> 00:46:15,530
and then this is an asynchronous process

00:46:00,830 --> 00:46:17,480
and one can take a backup and yeah so

00:46:15,530 --> 00:46:19,100
what did you get or the state is

00:46:17,480 --> 00:46:28,700
currently something and then once it's

00:46:19,100 --> 00:46:30,350
done we can actually so we also have the

00:46:28,700 --> 00:46:33,200
provision for listing of the backups and

00:46:30,350 --> 00:46:36,170
similarly you can I mean in the interest

00:46:33,200 --> 00:46:39,110
of time users can also go back and

00:46:36,170 --> 00:46:41,750
restore to a particular snapshot where

00:46:39,110 --> 00:46:43,730
they mean where the backup something and

00:46:41,750 --> 00:46:47,860
these are scheduled so now let me go

00:46:43,730 --> 00:46:51,140
back to the demo and probably efficient

00:46:47,860 --> 00:46:53,720
alright so so this is a summary of ATP's

00:46:51,140 --> 00:47:00,200
contributions to various cloud foundry

00:46:53,720 --> 00:47:02,330
projects and so this is all we had to

00:47:00,200 --> 00:47:05,150
whatever questions yeah yeah

00:47:02,330 --> 00:47:07,040
excellent thank you really cool so we

00:47:05,150 --> 00:47:09,050
have about a minute for questions if

00:47:07,040 --> 00:47:10,260
people I don't see anything in the sack

00:47:09,050 --> 00:47:12,120
but if you have

00:47:10,260 --> 00:47:14,600
question you want to ask live maybe we

00:47:12,120 --> 00:47:18,720
can take a couple questions

00:47:14,600 --> 00:47:21,930
remember everybody literally you have to

00:47:18,720 --> 00:47:22,740
unmute yourself can I ask a question

00:47:21,930 --> 00:47:25,830
sure

00:47:22,740 --> 00:47:28,140
what sure so I thought in the footnote I

00:47:25,830 --> 00:47:30,660
should introduce myself I'm from pivotal

00:47:28,140 --> 00:47:33,660
and I'm the product manager for a Bosch

00:47:30,660 --> 00:47:34,590
backup and restore so thank you this

00:47:33,660 --> 00:47:37,530
looks really interesting

00:47:34,590 --> 00:47:39,330
I wondered if there's a footnote that

00:47:37,530 --> 00:47:46,320
says it integrates with it can integrate

00:47:39,330 --> 00:47:49,770
with VBR could you talk about that ok so

00:47:46,320 --> 00:47:54,210
I for this hoping that there could be

00:47:49,770 --> 00:47:56,580
some questions on this so who so the

00:47:54,210 --> 00:47:59,640
boss backup and restore and what show is

00:47:56,580 --> 00:48:03,080
fabric backup and restore data so boss

00:47:59,640 --> 00:48:05,690
backup and restore it is focused towards

00:48:03,080 --> 00:48:08,100
backup and restore of boss deployments

00:48:05,690 --> 00:48:12,500
weather service fabric backup and

00:48:08,100 --> 00:48:16,070
restore it is from a service perspective

00:48:12,500 --> 00:48:20,730
and also it's a scripting framework and

00:48:16,070 --> 00:48:25,850
so what we are looking at is that what

00:48:20,730 --> 00:48:29,490
we have as a what we have provided as a

00:48:25,850 --> 00:48:31,770
backup and restore library that could be

00:48:29,490 --> 00:48:35,670
plugged in as one of the into one of the

00:48:31,770 --> 00:48:38,310
hooks of the bbr framework so at this

00:48:35,670 --> 00:48:42,900
point in time one of the things that we

00:48:38,310 --> 00:48:44,880
see as a limitation or a challenge with

00:48:42,900 --> 00:48:50,930
regards to be beer which probably we can

00:48:44,880 --> 00:48:53,810
discuss is you know probably in how the

00:48:50,930 --> 00:48:57,210
backup artefacts flow back from the

00:48:53,810 --> 00:48:59,460
deployment itself so as part of the DVR

00:48:57,210 --> 00:49:02,940
the back of artifacts goes back into the

00:48:59,460 --> 00:49:04,680
VF whereas in case of service fabric the

00:49:02,940 --> 00:49:07,560
back of our artifacts directly gets

00:49:04,680 --> 00:49:11,490
uploaded from the deployment VM itself

00:49:07,560 --> 00:49:13,590
so that is one point where the point of

00:49:11,490 --> 00:49:16,740
contention and if that is a result

00:49:13,590 --> 00:49:18,610
probably VBS then we looked at for

00:49:16,740 --> 00:49:21,370
integration

00:49:18,610 --> 00:49:23,110
okay cool I think you guys are both are

00:49:21,370 --> 00:49:25,240
gonna be at the CF summit so maybe it's

00:49:23,110 --> 00:49:27,010
a good time to discuss this the res will

00:49:25,240 --> 00:49:29,050
be there she's in Europe and I think a

00:49:27,010 --> 00:49:31,060
shoe shoe coming right so hopefully you

00:49:29,050 --> 00:49:32,590
guys can chat about that yeah okay let's

00:49:31,060 --> 00:49:36,280
see if there's another great question

00:49:32,590 --> 00:49:40,690
otherwise we'll pass it to Scott any

00:49:36,280 --> 00:49:42,820
other burning question okay well thank

00:49:40,690 --> 00:49:44,890
you ash and I know it's 9 o'clock for

00:49:42,820 --> 00:49:49,320
you so thank you for staying late and

00:49:44,890 --> 00:49:52,450
we'll see you and I guess in Basel and

00:49:49,320 --> 00:49:54,310
we look forward to two people commenting

00:49:52,450 --> 00:49:56,620
on the proposal write the proposal is

00:49:54,310 --> 00:49:58,150
out so please comment so if she should

00:49:56,620 --> 00:50:03,040
have to unshare your screen so that's

00:49:58,150 --> 00:50:05,490
quite critical thank you very much yeah

00:50:03,040 --> 00:50:09,010
no ball so Scott you're new

00:50:05,490 --> 00:50:11,620
alright so take it over alright thanks

00:50:09,010 --> 00:50:15,010
for having me dr. max good morning good

00:50:11,620 --> 00:50:18,460
afternoon good evening I am p.m. a

00:50:15,010 --> 00:50:21,850
pivotal and I was asked to come today

00:50:18,460 --> 00:50:23,920
and talk to you about a product we were

00:50:21,850 --> 00:50:26,650
releasing into the market and we'd also

00:50:23,920 --> 00:50:28,900
like to get it out into the foundation

00:50:26,650 --> 00:50:32,170
so we want to get out in front of

00:50:28,900 --> 00:50:41,250
everyone today so I will start this

00:50:32,170 --> 00:50:41,250
presentation real quick demo so

00:50:42,810 --> 00:50:49,320
scheduler for CF we currently have this

00:50:45,790 --> 00:50:53,050
we're productizing this as order for PCF

00:50:49,320 --> 00:50:56,010
so regular disclaimers about anything I

00:50:53,050 --> 00:50:59,020
say here may or may not actually happen

00:50:56,010 --> 00:51:00,580
so I wanted to tell you a little bit

00:50:59,020 --> 00:51:03,520
about what we're doing and why we're

00:51:00,580 --> 00:51:06,430
doing it what our vision is for this now

00:51:03,520 --> 00:51:08,740
and in the future so we have noticed a

00:51:06,430 --> 00:51:13,090
lot of our customers we're asking us

00:51:08,740 --> 00:51:16,000
about the ability to execute workloads I

00:51:13,090 --> 00:51:17,770
should try to keep that term workloads

00:51:16,000 --> 00:51:20,770
as things they'd like to execute what

00:51:17,770 --> 00:51:24,010
whatever those things are in the context

00:51:20,770 --> 00:51:26,740
of cloud foundry and we kept coming up

00:51:24,010 --> 00:51:28,090
with answers of you should have an

00:51:26,740 --> 00:51:30,340
external schedule or you should have an

00:51:28,090 --> 00:51:31,660
external scheduler and we found lots of

00:51:30,340 --> 00:51:32,440
folks who are having difficulty

00:51:31,660 --> 00:51:35,560
integrate

00:51:32,440 --> 00:51:40,690
their legacy scheduling platforms with

00:51:35,560 --> 00:51:42,610
the constructs of foundry so we decided

00:51:40,690 --> 00:51:48,550
we wanted to put together this sort of

00:51:42,610 --> 00:51:52,050
ecosystem that would abstract jobs or

00:51:48,550 --> 00:51:55,690
tasks that could be executed here

00:51:52,050 --> 00:51:57,820
specifically on a schedule in a in a

00:51:55,690 --> 00:51:59,820
Cloud Foundry way right so that the

00:51:57,820 --> 00:52:05,020
primitives of cloud foundry would apply

00:51:59,820 --> 00:52:06,760
to schedule it and that was something we

00:52:05,020 --> 00:52:08,500
were really excited about helping our

00:52:06,760 --> 00:52:10,510
customers move

00:52:08,500 --> 00:52:11,980
legacy edge alene platforms and not

00:52:10,510 --> 00:52:15,370
because they're necessarily bad but

00:52:11,980 --> 00:52:17,590
because they haven't quite kept up with

00:52:15,370 --> 00:52:21,330
the move to cloud native and some of the

00:52:17,590 --> 00:52:23,020
mechanisms that we all ask folks to

00:52:21,330 --> 00:52:26,170
participating in terms of the

00:52:23,020 --> 00:52:28,480
development lifecycle so you might see a

00:52:26,170 --> 00:52:32,710
whole set of hardware and software

00:52:28,480 --> 00:52:35,440
deployed to support scheduled loads that

00:52:32,710 --> 00:52:40,210
existed right next to all of the apps

00:52:35,440 --> 00:52:43,270
and services that were on cloud foundry

00:52:40,210 --> 00:52:45,400
so we wanted to support our customers

00:52:43,270 --> 00:52:47,440
using those best practices in terms of

00:52:45,400 --> 00:52:50,200
cloud native micro service development

00:52:47,440 --> 00:52:53,560
life cycles in terms of CI CD and

00:52:50,200 --> 00:52:57,190
whatnot so that was our short-term goal

00:52:53,560 --> 00:53:00,010
pretty simply is to enable that longer

00:52:57,190 --> 00:53:04,540
term we have some things we'd like to

00:53:00,010 --> 00:53:08,350
target like right now the construct of

00:53:04,540 --> 00:53:13,030
this this workload is either a CF task

00:53:08,350 --> 00:53:16,260
or a HTTP call and we'd like to expand

00:53:13,030 --> 00:53:19,930
what those jobs can represent like

00:53:16,260 --> 00:53:22,210
executing scheduled service interactions

00:53:19,930 --> 00:53:26,500
binding or unbinding or backing up and

00:53:22,210 --> 00:53:30,580
restoring etc or things on the platform

00:53:26,500 --> 00:53:33,760
like adding removing routes blue-green

00:53:30,580 --> 00:53:36,040
deploys etc so that the platform itself

00:53:33,760 --> 00:53:37,960
has a scheduler as much as the app

00:53:36,040 --> 00:53:41,650
developer as a scheduler so those are

00:53:37,960 --> 00:53:46,060
our longer-term things we'd like to look

00:53:41,650 --> 00:53:48,730
at so in terms of what we've got right

00:53:46,060 --> 00:53:51,640
now we have a sort of productized

00:53:48,730 --> 00:53:56,980
offering scheduler for PCF we have a

00:53:51,640 --> 00:54:00,130
beta out available on pivot and we're

00:53:56,980 --> 00:54:02,740
working on a ga here very shortly which

00:54:00,130 --> 00:54:05,230
would support what does PCF 111 and 112

00:54:02,740 --> 00:54:08,410
which are close to the layer 112 is

00:54:05,230 --> 00:54:12,850
close to the latest of open source CF

00:54:08,410 --> 00:54:15,220
bits and why that's interesting and a

00:54:12,850 --> 00:54:18,070
note about this product specifically is

00:54:15,220 --> 00:54:19,330
that we're trying to abstract away some

00:54:18,070 --> 00:54:21,850
of the changes that may happen in the

00:54:19,330 --> 00:54:23,170
underlying Cloud Foundry so as you can

00:54:21,850 --> 00:54:25,150
see there we've mentioned 111 and 112

00:54:23,170 --> 00:54:26,290
specifically PCF those are very

00:54:25,150 --> 00:54:29,110
different versions of the cloud

00:54:26,290 --> 00:54:31,450
controller API and while they may not

00:54:29,110 --> 00:54:33,850
change as much in the future as the v3

00:54:31,450 --> 00:54:35,950
endpoints start to stabilize there's

00:54:33,850 --> 00:54:39,520
still a lot of work coming in the v3

00:54:35,950 --> 00:54:42,820
endpoints and the way you can work with

00:54:39,520 --> 00:54:44,500
builds and staged droplets and use

00:54:42,820 --> 00:54:48,610
different versions of those and whatnot

00:54:44,500 --> 00:54:50,950
and so to sort of cushion the user from

00:54:48,610 --> 00:54:53,740
those those types of changes in the API

00:54:50,950 --> 00:54:57,580
and specifically the way the API works

00:54:53,740 --> 00:55:00,550
at a deeper level we wanted to provide

00:54:57,580 --> 00:55:02,620
this abstraction of the job layer so we

00:55:00,550 --> 00:55:05,740
see people using this for things like

00:55:02,620 --> 00:55:08,770
database migrations sending emails or

00:55:05,740 --> 00:55:13,570
reports out or doing your standard batch

00:55:08,770 --> 00:55:14,950
job processing and again I think a big

00:55:13,570 --> 00:55:17,140
thing that we're trying to express to

00:55:14,950 --> 00:55:19,210
folks is that just because you've got

00:55:17,140 --> 00:55:21,910
scheduled workloads doesn't mean you

00:55:19,210 --> 00:55:23,830
can't run them on CF so that you have

00:55:21,910 --> 00:55:26,560
data that's in CF you're using these

00:55:23,830 --> 00:55:29,620
data services you've got your micro

00:55:26,560 --> 00:55:31,360
services went through testing a lot of

00:55:29,620 --> 00:55:34,420
times folks are following a wholly

00:55:31,360 --> 00:55:37,570
different lifecycle for doing scheduled

00:55:34,420 --> 00:55:40,300
workloads where they file IT tickets and

00:55:37,570 --> 00:55:43,740
attached jars to these tickets and then

00:55:40,300 --> 00:55:43,740
they have a whole separate team

00:55:51,040 --> 00:55:59,000
okay I think Scott is I hope he comes

00:55:56,570 --> 00:56:07,070
back because this is actually very very

00:55:59,000 --> 00:56:09,140
important project I guess if you guys

00:56:07,070 --> 00:56:12,640
are pivotal and you can ping him on a

00:56:09,140 --> 00:56:12,640
separate channel to tell them

00:56:14,490 --> 00:56:21,030
sure I'll try but it looks like he's

00:56:17,040 --> 00:56:24,150
working from home today yeah

00:56:21,030 --> 00:56:27,359
I guess I'll try to use some of this

00:56:24,150 --> 00:56:28,530
time to mention that you know so I went

00:56:27,359 --> 00:56:33,150
over this with Scott I mean obviously

00:56:28,530 --> 00:56:38,400
this is already part of PCF but this is

00:56:33,150 --> 00:56:45,839
really good I mean this is it is a it is

00:56:38,400 --> 00:56:49,080
kind of an interesting I wasn't but what

00:56:45,839 --> 00:56:52,440
like you know Sheen since his uh he's

00:56:49,080 --> 00:56:54,599
back for now you know imagine if you

00:56:52,440 --> 00:56:57,420
have a concourse right what else one

00:56:54,599 --> 00:56:59,940
right why would you want this okay

00:56:57,420 --> 00:57:01,980
interesting that's that's that's so

00:56:59,940 --> 00:57:03,690
Dimitri has a nice question for you but

00:57:01,980 --> 00:57:05,730
Scott since you're back try to finish

00:57:03,690 --> 00:57:08,450
and then let's see if we can address the

00:57:05,730 --> 00:57:12,480
case question you're one sec let me just

00:57:08,450 --> 00:57:14,070
finish this up okay so I think I caught

00:57:12,480 --> 00:57:17,430
the tail into that question so I'll try

00:57:14,070 --> 00:57:19,349
to get to that but so it's a service

00:57:17,430 --> 00:57:22,230
broker it's a service it has a service

00:57:19,349 --> 00:57:26,970
broker exposes the service in the

00:57:22,230 --> 00:57:30,930
marketplace and it also as a developer

00:57:26,970 --> 00:57:33,839
you have access through an API so it has

00:57:30,930 --> 00:57:37,470
a restful api and also a CLI which

00:57:33,839 --> 00:57:39,240
executes all the same functions we it

00:57:37,470 --> 00:57:41,760
enables you to schedule the execution of

00:57:39,240 --> 00:57:46,589
Diego tasks or Cloud Foundry tasks more

00:57:41,760 --> 00:57:49,020
specifically that are do tasks and it

00:57:46,589 --> 00:57:51,540
also just recently we're adding outbound

00:57:49,020 --> 00:57:54,150
HTTP calls this will allow for

00:57:51,540 --> 00:58:00,089
integration to other work let's sort of

00:57:54,150 --> 00:58:01,530
work load managers and it also helps to

00:58:00,089 --> 00:58:02,369
maintain status in history there's

00:58:01,530 --> 00:58:04,950
another thing that's a little bit

00:58:02,369 --> 00:58:07,650
difficult in terms of other tools that

00:58:04,950 --> 00:58:09,390
you might see deployed onto Cloud

00:58:07,650 --> 00:58:11,520
Foundry is that they a lot of times lack

00:58:09,390 --> 00:58:13,589
the ability to maintain the status of

00:58:11,520 --> 00:58:16,650
the executions and the history of the

00:58:13,589 --> 00:58:19,920
executions as they occur so the

00:58:16,650 --> 00:58:21,660
scheduler takes care of that and again

00:58:19,920 --> 00:58:23,790
is to move workload these schedule

00:58:21,660 --> 00:58:27,940
workloads on to CF and get you into CI

00:58:23,790 --> 00:58:31,359
DD best practices with your CF workloads

00:58:27,940 --> 00:58:33,849
so you can define a job or a call you

00:58:31,359 --> 00:58:37,539
can execute those jobs and calls as

00:58:33,849 --> 00:58:39,970
ad-hoc executions or you can schedule

00:58:37,539 --> 00:58:43,000
them the scheduled expression right now

00:58:39,970 --> 00:58:44,470
is a cron expression we fully expect

00:58:43,000 --> 00:58:46,869
that folks will want to use more natural

00:58:44,470 --> 00:58:49,359
language or another type of expression

00:58:46,869 --> 00:58:52,180
so we have left that extensible where

00:58:49,359 --> 00:58:54,339
you can define the expression type as

00:58:52,180 --> 00:58:57,010
well as the expression right now we only

00:58:54,339 --> 00:58:58,660
support cron expressions again I

00:58:57,010 --> 00:59:02,020
mentioned we retain the history of all

00:58:58,660 --> 00:59:06,010
those executions the nice thing about

00:59:02,020 --> 00:59:09,190
this is you get the full support of all

00:59:06,010 --> 00:59:11,260
of the CF functions of an app so you

00:59:09,190 --> 00:59:14,099
have all the bindings of services you

00:59:11,260 --> 00:59:16,089
have all the sort of geometry

00:59:14,099 --> 00:59:19,329
definitions of your app you get the

00:59:16,089 --> 00:59:22,809
build pack niceties and logging

00:59:19,329 --> 00:59:24,880
functionality and whatnot so that's a

00:59:22,809 --> 00:59:26,319
big bonus for these that you can use the

00:59:24,880 --> 00:59:28,299
same tooling that you do for your app

00:59:26,319 --> 00:59:30,760
and the same services you do for your

00:59:28,299 --> 00:59:32,470
app same build package of your app for

00:59:30,760 --> 00:59:34,990
your tasks so it streamlines the

00:59:32,470 --> 00:59:38,500
development lifecycle and process and

00:59:34,990 --> 00:59:40,210
again we have this sea lion API so it's

00:59:38,500 --> 00:59:44,140
on pivot we have a gia as a beta right

00:59:40,210 --> 00:59:46,299
now if gia coming it is separated in its

00:59:44,140 --> 00:59:50,190
repos into both a bas-reliefs and this

00:59:46,299 --> 00:59:54,309
tile that functions in a PCF ops man

00:59:50,190 --> 00:59:57,010
and then the CF CLI again is a separate

00:59:54,309 --> 00:59:59,260
component and the great news is that

00:59:57,010 --> 01:00:01,539
we're preparing the proposal to start

00:59:59,260 --> 01:00:03,819
incubating this in the cloud foundry

01:00:01,539 --> 01:00:07,869
foundation so that will be coming

01:00:03,819 --> 01:00:09,069
shortly so with that I don't know how

01:00:07,869 --> 01:00:12,039
much time we have left but I could run

01:00:09,069 --> 01:00:14,710
through a really brief demo I think I

01:00:12,039 --> 01:00:16,809
think Scott since it's already in PCF we

01:00:14,710 --> 01:00:18,430
trust you people can take a look let's

01:00:16,809 --> 01:00:19,420
take some questions because the meteor

01:00:18,430 --> 01:00:20,619
each question is actually quite

01:00:19,420 --> 01:00:22,000
interesting and people might have a

01:00:20,619 --> 01:00:24,369
question and we only have about two

01:00:22,000 --> 01:00:28,270
minutes so if you do remember

01:00:24,369 --> 01:00:32,529
dimitra's question I think it was

01:00:28,270 --> 01:00:34,690
related to why not just use Concours

01:00:32,529 --> 01:00:40,000
exactly pretty much that's a good

01:00:34,690 --> 01:00:43,230
summary yeah so while concourse has the

01:00:40,000 --> 01:00:43,230
ability obviously to

01:00:44,590 --> 01:00:50,820
schedule schedule work execute work on a

01:00:47,380 --> 01:00:53,700
timer we perceived that the

01:00:50,820 --> 01:00:58,270
implementation of concourse is sort of

01:00:53,700 --> 01:01:01,900
purpose-built for pipelines of executing

01:00:58,270 --> 01:01:07,950
these continuous integration and

01:01:01,900 --> 01:01:10,420
deployment and it wasn't as close to the

01:01:07,950 --> 01:01:16,450
those things I mentioned like services

01:01:10,420 --> 01:01:19,450
and cloud foundry specific primitives

01:01:16,450 --> 01:01:24,640
that we didn't want to have to force the

01:01:19,450 --> 01:01:26,710
I guess the concourse purpose into the

01:01:24,640 --> 01:01:28,359
scheduler purpose and the scheduler into

01:01:26,710 --> 01:01:31,780
the concourse purpose being one major

01:01:28,359 --> 01:01:33,340
thing the other is that we the future

01:01:31,780 --> 01:01:34,420
work we're really looking to do and one

01:01:33,340 --> 01:01:35,940
of the reasons why we're really excited

01:01:34,420 --> 01:01:38,380
to bring this to the foundation is that

01:01:35,940 --> 01:01:43,060
we see that this could be very tightly

01:01:38,380 --> 01:01:44,890
coupled to the Cloud Foundry primitives

01:01:43,060 --> 01:01:48,220
such that you can define these things in

01:01:44,890 --> 01:01:51,490
a manifest so that you just push with

01:01:48,220 --> 01:01:53,410
the the app manifest test and the tasks

01:01:51,490 --> 01:01:55,750
and schedules are defined all in one the

01:01:53,410 --> 01:01:58,150
services are understood in a Cloud

01:01:55,750 --> 01:01:59,859
Foundry way and so that was our main

01:01:58,150 --> 01:02:01,270
reason another reason we're bringing the

01:01:59,859 --> 01:02:05,020
foundation is to hear things like this

01:02:01,270 --> 01:02:07,260
and get that kind of really broad input

01:02:05,020 --> 01:02:08,770
into the direction of how this moves

01:02:07,260 --> 01:02:11,080
okay cool

01:02:08,770 --> 01:02:13,300
DK do you have a follow up or are you

01:02:11,080 --> 01:02:15,640
okay well I my internet broke off fully

01:02:13,300 --> 01:02:18,099
out before I thing I got I got the gist

01:02:15,640 --> 01:02:21,990
of it I'm still very much unconvinced

01:02:18,099 --> 01:02:26,380
that implementing any of that would

01:02:21,990 --> 01:02:28,030
would be operationally beneficial right

01:02:26,380 --> 01:02:29,589
because concourse provides you strong

01:02:28,030 --> 01:02:32,619
primitives for where are these things

01:02:29,589 --> 01:02:34,810
right and and of course you know when

01:02:32,619 --> 01:02:37,720
running in concourse you could all you

01:02:34,810 --> 01:02:40,720
know be kicking off you know CF run the

01:02:37,720 --> 01:02:43,390
task right at that time so it's not

01:02:40,720 --> 01:02:46,270
necessarily that you know I'm advocating

01:02:43,390 --> 01:02:48,490
for running the actual you know

01:02:46,270 --> 01:02:51,839
executing the actual bits in concourse

01:02:48,490 --> 01:02:55,240
but rather having concourse as a

01:02:51,839 --> 01:02:57,810
consolidated way of you know managing

01:02:55,240 --> 01:03:00,600
the history managing the

01:02:57,810 --> 01:03:03,920
change managing the the the trigger

01:03:00,600 --> 01:03:09,420
right and given that I guess one of the

01:03:03,920 --> 01:03:11,160
you know strong kind of a directions

01:03:09,420 --> 01:03:13,400
that always been pushing everyone at

01:03:11,160 --> 01:03:15,900
this point is to actually use concourse

01:03:13,400 --> 01:03:19,470
you know supposedly a customer is

01:03:15,900 --> 01:03:20,820
already all in in its right so but but

01:03:19,470 --> 01:03:22,620
on the other hand I mean you could agree

01:03:20,820 --> 01:03:24,600
you could agree with Scott right like if

01:03:22,620 --> 01:03:26,550
I'm an app developer I'm not trying to

01:03:24,600 --> 01:03:28,410
use a pipeline why can I have a

01:03:26,550 --> 01:03:29,880
scheduler so the the notion of a

01:03:28,410 --> 01:03:31,890
scheduler is actually quite useful

01:03:29,880 --> 01:03:35,340
I think Scott mentioned that and you

01:03:31,890 --> 01:03:37,710
guys are both pivot also got me Dmitry

01:03:35,340 --> 01:03:39,360
Dmitry meet Scott right you can chat

01:03:37,710 --> 01:03:40,980
about this let's see if anybody else has

01:03:39,360 --> 01:03:42,420
a question I'm not trying to say

01:03:40,980 --> 01:03:45,390
Dimitri's question is not good it's just

01:03:42,420 --> 01:03:47,930
we gotta see if other people in the

01:03:45,390 --> 01:03:47,930
other comments

01:03:49,010 --> 01:03:56,150
okay rerunning over I want to thank

01:03:53,359 --> 01:03:58,460
everybody for joining and for great

01:03:56,150 --> 01:03:59,930
questions and presentations Scott I

01:03:58,460 --> 01:04:03,520
think this is really cool

01:03:59,930 --> 01:04:08,560
so everybody see you in Basel

01:04:03,520 --> 01:04:16,090
Switzerland take care bye all right

01:04:08,560 --> 01:04:16,090

YouTube URL: https://www.youtube.com/watch?v=eNYFbtq3Fyg


