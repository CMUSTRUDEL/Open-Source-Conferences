Title: Community Advisory Board Call 5 16 2018
Publication date: 2018-05-17
Playlist: Community Advisory Board
Description: 
	Get the full agenda here: https://bit.ly/2k3g4l8
Captions: 
	00:00:00,620 --> 00:00:04,560
hopefully get started the recording is

00:00:03,449 --> 00:00:09,950
starting

00:00:04,560 --> 00:00:09,950
can I start that second way or do you

00:00:12,349 --> 00:00:18,420
alright so we were recording alright so

00:00:14,759 --> 00:00:21,810
this is the first call since I guess

00:00:18,420 --> 00:00:25,170
last time we were live so we go back to

00:00:21,810 --> 00:00:29,730
our typical agenda we have a pretty

00:00:25,170 --> 00:00:33,540
packed agenda we do updates and then we

00:00:29,730 --> 00:00:35,899
have three talks so we got bullion from

00:00:33,540 --> 00:00:40,530
IBM was gonna give us an update on

00:00:35,899 --> 00:00:42,270
autoscaler we have Jane from s AP who's

00:00:40,530 --> 00:00:44,789
gonna give us an update on the service

00:00:42,270 --> 00:00:48,329
fabric and then we have Dmitry hopefully

00:00:44,789 --> 00:00:51,030
at his desk he's actually maybe a few

00:00:48,329 --> 00:00:56,309
feet away from us here and he's gonna do

00:00:51,030 --> 00:00:59,239
a live presentation of the Bosch CDI for

00:00:56,309 --> 00:01:03,090
cube should be fun

00:00:59,239 --> 00:01:05,129
you know I have been doing it in Europe

00:01:03,090 --> 00:01:07,380
but we're gonna do it now and it's gonna

00:01:05,129 --> 00:01:11,040
be recorded so let's get started I think

00:01:07,380 --> 00:01:12,990
usually we do we give chip and swore an

00:01:11,040 --> 00:01:15,630
hour a chance to give us an update on

00:01:12,990 --> 00:01:18,600
the foundation there's a big summit

00:01:15,630 --> 00:01:21,030
coming up in Europe so maybe we can get

00:01:18,600 --> 00:01:24,270
some idea what's going on there that's

00:01:21,030 --> 00:01:26,700
what are you gonna yes what is typing so

00:01:24,270 --> 00:01:31,650
she asked me to that's for you to do it

00:01:26,700 --> 00:01:35,189
so yeah so so a couple of couple new

00:01:31,650 --> 00:01:37,890
products of course there is the summit

00:01:35,189 --> 00:01:41,100
coming up in Basel a reminder that June

00:01:37,890 --> 00:01:44,390
1st is the deadline for the CFP so

00:01:41,100 --> 00:01:48,180
you've got about half a month left also

00:01:44,390 --> 00:01:51,390
thanks for everybody that voted for the

00:01:48,180 --> 00:01:54,030
track chairs we really got a great

00:01:51,390 --> 00:01:56,000
response to the voting process and we'll

00:01:54,030 --> 00:01:59,159
be announcing who the winners are

00:01:56,000 --> 00:02:02,310
shortly we kind of collate the results

00:01:59,159 --> 00:02:05,729
and make sure that the same person isn't

00:02:02,310 --> 00:02:07,740
isn't in multiple tracks so that's all

00:02:05,729 --> 00:02:10,080
going really well and again get your you

00:02:07,740 --> 00:02:11,819
talk proposals in the other thing

00:02:10,080 --> 00:02:13,890
obviously you're gonna show where we're

00:02:11,819 --> 00:02:16,410
gonna see the

00:02:13,890 --> 00:02:18,959
see pi44 kubernetes which is awesome but

00:02:16,410 --> 00:02:21,540
there's also a lot of other amazing

00:02:18,959 --> 00:02:23,459
projects that are happening both inside

00:02:21,540 --> 00:02:25,770
our project teams as well as kind of out

00:02:23,459 --> 00:02:27,900
outside in you know the broader CF

00:02:25,770 --> 00:02:29,730
community reminded that we've been

00:02:27,900 --> 00:02:32,100
having a bi-weekly call to try to get

00:02:29,730 --> 00:02:35,520
through updates on on all these

00:02:32,100 --> 00:02:38,459
activities every other Wednesday

00:02:35,520 --> 00:02:41,400
it's it's happening next Wednesday I go

00:02:38,459 --> 00:02:43,020
to the mailing list to catch up on

00:02:41,400 --> 00:02:46,410
details so we're gonna switch to zoom as

00:02:43,020 --> 00:02:48,959
well for that effort or for that regular

00:02:46,410 --> 00:02:54,690
meeting and also you could go back to

00:02:48,959 --> 00:02:56,970
the North American event from Boston and

00:02:54,690 --> 00:02:59,489
if you take a look at the cleft Network

00:02:56,970 --> 00:03:02,640
site you can get to all of the videos

00:02:59,489 --> 00:03:05,910
cool pictures yes every every talk was

00:03:02,640 --> 00:03:08,610
recorded and there's a binge watching

00:03:05,910 --> 00:03:12,959
pleasure if you're interested for hours

00:03:08,610 --> 00:03:27,630
so those are the highlights adding the

00:03:12,959 --> 00:03:30,019
links to the videos awesome cool so

00:03:27,630 --> 00:03:30,019
that's it

00:03:34,390 --> 00:03:37,570
[Music]

00:03:54,050 --> 00:03:57,300
[Music]

00:04:11,510 --> 00:04:14,720
[Music]

00:04:31,140 --> 00:04:34,209
[Music]

00:04:47,280 --> 00:04:54,079
[Music]

00:04:59,190 --> 00:05:02,269
[Music]

00:05:07,280 --> 00:05:18,529
thank you I think so we have to shop

00:05:24,590 --> 00:06:07,710
quickly more broadly

00:06:06,120 --> 00:06:20,539
I know Kandi's been working on a bunch

00:06:07,710 --> 00:06:20,539
of interesting they haven't anything

00:07:36,450 --> 00:07:45,160
so let's let's do the extensions because

00:07:42,220 --> 00:07:53,500
I think the trees on his way and I don't

00:07:45,160 --> 00:07:55,510
see okay so for extensions I guess the

00:07:53,500 --> 00:08:02,410
two main highlights are that we did a

00:07:55,510 --> 00:08:06,280
vote we have accepted the two projects

00:08:02,410 --> 00:08:09,400
that were proposed this as you might

00:08:06,280 --> 00:08:16,200
have seen for my last email with respect

00:08:09,400 --> 00:08:19,990
to extensions was the Microsoft sequel

00:08:16,200 --> 00:08:23,890
worker so this is a work for Microsoft

00:08:19,990 --> 00:08:26,740
sequel server this is something that I

00:08:23,890 --> 00:08:28,270
think pivotal has work on but in

00:08:26,740 --> 00:08:30,900
conjunction with Microsoft and Microsoft

00:08:28,270 --> 00:08:34,060
will be you can go over that and

00:08:30,900 --> 00:08:37,720
supporting it so if you're a user or a

00:08:34,060 --> 00:08:41,500
fan of Microsoft sequel server

00:08:37,720 --> 00:08:43,960
then you should look at that it's gonna

00:08:41,500 --> 00:08:47,880
move into the foundation so sacrum

00:08:43,960 --> 00:08:51,280
contribute all has to get that effort

00:08:47,880 --> 00:08:54,850
the second one is is is very important

00:08:51,280 --> 00:08:58,150
in terms of the scope of it this is an

00:08:54,850 --> 00:09:02,290
effort by s AP the team from s AP legal

00:08:58,150 --> 00:09:03,940
is here and they're always eager to give

00:09:02,290 --> 00:09:06,760
us an update and talk about it but

00:09:03,940 --> 00:09:10,540
basically it's the multi apps so this is

00:09:06,760 --> 00:09:12,070
a way for you to deal with multiple apps

00:09:10,540 --> 00:09:15,970
and how to connect together and so on

00:09:12,070 --> 00:09:18,880
there's a whole set of presentation that

00:09:15,970 --> 00:09:20,770
we did before that had summit and also

00:09:18,880 --> 00:09:23,530
in the cat call I'd encourage you to

00:09:20,770 --> 00:09:26,190
take a look at that will transition that

00:09:23,530 --> 00:09:28,780
to the incubation and then hopefully

00:09:26,190 --> 00:09:30,280
nikolai on the team will discuss it and

00:09:28,780 --> 00:09:33,640
then we'll give them an opportunity in

00:09:30,280 --> 00:09:35,890
the future cap to come in and propose it

00:09:33,640 --> 00:09:38,290
so these were the two projects they are

00:09:35,890 --> 00:09:39,850
worth a highlight it's tons more going

00:09:38,290 --> 00:09:43,450
on in extensions but we can tell you

00:09:39,850 --> 00:09:45,040
that next time definitely pay attention

00:09:43,450 --> 00:09:49,210
to stick on the line against kinds of

00:09:45,040 --> 00:09:53,260
things going on thank you for arranging

00:09:49,210 --> 00:09:55,690
this say that again thank you max for

00:09:53,260 --> 00:09:59,470
arranging this very very well we are

00:09:55,690 --> 00:10:02,770
happy to have you again we you get a

00:09:59,470 --> 00:10:04,780
chance to present soon yeah on this so i

00:10:02,770 --> 00:10:07,630
don't know if anybody have any question

00:10:04,780 --> 00:10:11,140
for us extensions or any other projects

00:10:07,630 --> 00:10:14,410
there you feel the leads out here so if

00:10:11,140 --> 00:10:15,670
you have questions no we're going to get

00:10:14,410 --> 00:10:20,500
to the main event

00:10:15,670 --> 00:10:23,560
all right cool since Dimitri is gonna be

00:10:20,500 --> 00:10:28,000
doing the presentation for the Bosch

00:10:23,560 --> 00:10:30,640
cube city I don't see Danny here he

00:10:28,000 --> 00:10:33,730
usually attends but I told them that we

00:10:30,640 --> 00:10:35,740
would start the push stuff

00:10:33,730 --> 00:10:37,810
half past so maybe that's what's going

00:10:35,740 --> 00:10:40,240
on so they'll give us an update on Bosh

00:10:37,810 --> 00:10:43,720
you already already heard about the

00:10:40,240 --> 00:10:45,990
senior stem cell but they might so let's

00:10:43,720 --> 00:10:49,810
switch over to the two presentations

00:10:45,990 --> 00:10:50,400
we'll start first with boo boo is a

00:10:49,810 --> 00:10:52,650
member of

00:10:50,400 --> 00:10:56,610
team I guess Jules you and introduce

00:10:52,650 --> 00:10:57,800
ball I see that through I'm I'm sure but

00:10:56,610 --> 00:11:01,920
greater ease himself

00:10:57,800 --> 00:11:04,380
alright okay cool so Boo is is gonna

00:11:01,920 --> 00:11:08,150
give us an update on the app autoscaler

00:11:04,380 --> 00:11:10,920
and if you want to go ahead and maybe

00:11:08,150 --> 00:11:18,150
tip over you can share your screen if

00:11:10,920 --> 00:11:28,430
you want to show something yeah I just

00:11:18,150 --> 00:11:31,410
shared pears in this way okay so okay so

00:11:28,430 --> 00:11:32,070
as jr. said so let me introduce myself

00:11:31,410 --> 00:11:34,680
first

00:11:32,070 --> 00:11:37,620
so I'm one of the initiator of a

00:11:34,680 --> 00:11:41,520
particular project and the computer of

00:11:37,620 --> 00:11:42,920
this project and from IBM so let me

00:11:41,520 --> 00:11:47,070
first introduce what is uh

00:11:42,920 --> 00:11:50,990
autoscaler right so this is a actually a

00:11:47,070 --> 00:11:54,510
cloth under service which enables you to

00:11:50,990 --> 00:11:57,660
automatically adjust the number of the

00:11:54,510 --> 00:12:01,140
cloth hungry application instances based

00:11:57,660 --> 00:12:04,110
on the you know policy you defined so by

00:12:01,140 --> 00:12:06,180
using this of all the scaler you can you

00:12:04,110 --> 00:12:08,010
know maintain the availability and

00:12:06,180 --> 00:12:11,940
maintain the policy level of your

00:12:08,010 --> 00:12:13,560
vacation and okay and a little bit

00:12:11,940 --> 00:12:16,970
history of this project right so

00:12:13,560 --> 00:12:21,150
actually this program has been there for

00:12:16,970 --> 00:12:25,200
for two years we started this product in

00:12:21,150 --> 00:12:29,040
the middle of 2016

00:12:25,200 --> 00:12:33,720
and we have call contributors from IBM

00:12:29,040 --> 00:12:37,080
u.s. IBM China ICP India and Fujitsu in

00:12:33,720 --> 00:12:40,200
Australia so this is destroy actually

00:12:37,080 --> 00:12:43,890
it's a based on code donation from IBM

00:12:40,200 --> 00:12:46,110
cloud of the secular service and we can

00:12:43,890 --> 00:12:50,970
sum up the code

00:12:46,110 --> 00:12:53,220
firstly you know open sourced the that

00:12:50,970 --> 00:12:57,750
that part is actually for the way one is

00:12:53,220 --> 00:13:02,700
a based on you know Java and it's a

00:12:57,750 --> 00:13:04,470
pretty analytical implementation

00:13:02,700 --> 00:13:06,419
well we then

00:13:04,470 --> 00:13:08,519
we redesigned with the Microsoft's

00:13:06,419 --> 00:13:11,129
temperature and then we write that

00:13:08,519 --> 00:13:11,699
service in go language and new job note

00:13:11,129 --> 00:13:15,169
yes

00:13:11,699 --> 00:13:18,929
so there are several adoptions for these

00:13:15,169 --> 00:13:21,959
autoscaler service so actually from

00:13:18,929 --> 00:13:24,569
October last year ICT clock has deployed

00:13:21,959 --> 00:13:26,850
at on production so it has been running

00:13:24,569 --> 00:13:30,509
the error for quite a long time and it's

00:13:26,850 --> 00:13:32,459
demonstrate to be stable so we which

00:13:30,509 --> 00:13:36,359
gave us quite a few confidence that

00:13:32,459 --> 00:13:39,869
people can go and use it and from IBM

00:13:36,359 --> 00:13:42,539
start actually by including this at

00:13:39,869 --> 00:13:46,169
autoscaler as one of the extinction

00:13:42,539 --> 00:13:48,419
package of I mean color profit and now

00:13:46,169 --> 00:13:52,859
we are you know adding this service as

00:13:48,419 --> 00:13:54,899
part of you know IBM cloud from the

00:13:52,859 --> 00:13:57,809
Enterprise Edition which is a public

00:13:54,899 --> 00:14:03,449
isolated often enough to confirm the IBM

00:13:57,809 --> 00:14:06,679
cloud and eventually we replace the

00:14:03,449 --> 00:14:09,029
existing IBM cloud all secular studies

00:14:06,679 --> 00:14:11,999
which is a proprietary implementation

00:14:09,029 --> 00:14:15,239
with this open source edition if it will

00:14:11,999 --> 00:14:17,459
happen sometime and of this year or

00:14:15,239 --> 00:14:21,239
maybe only that's year for you know

00:14:17,459 --> 00:14:24,089
public cloud as well the other adoption

00:14:21,239 --> 00:14:26,970
is the Suzy has include is now including

00:14:24,089 --> 00:14:29,399
this service as part of these you know

00:14:26,970 --> 00:14:31,980
Suzy Cloud Foundry distribution and we

00:14:29,399 --> 00:14:33,529
also have taught to peel the web service

00:14:31,980 --> 00:14:35,999
because the web service also have

00:14:33,529 --> 00:14:38,999
obstacle ourselves near we are looking

00:14:35,999 --> 00:14:41,489
at the possibility to firstly open

00:14:38,999 --> 00:14:43,619
source of you know pivotal

00:14:41,489 --> 00:14:46,470
implementation and then convert this to

00:14:43,619 --> 00:14:50,029
program into one so that we have one you

00:14:46,470 --> 00:14:53,209
know single service in the community a

00:14:50,029 --> 00:14:53,209
little bit

00:14:53,329 --> 00:14:58,439
stuff on the components I don't want to

00:14:56,100 --> 00:15:01,319
drive deep into the components of the

00:14:58,439 --> 00:15:04,079
Aucilla but I want to burn out here is

00:15:01,319 --> 00:15:09,529
that actually quite a few the components

00:15:04,079 --> 00:15:13,889
are coming off so if we it's pretty easy

00:15:09,529 --> 00:15:14,429
to extend this also pillar to other

00:15:13,889 --> 00:15:17,560
domains

00:15:14,429 --> 00:15:21,400
besides Crofton ramification like

00:15:17,560 --> 00:15:23,650
we can customize a metric letter and the

00:15:21,400 --> 00:15:26,640
you know skilling engine so that we can

00:15:23,650 --> 00:15:30,460
all the skill cross-boundary platform

00:15:26,640 --> 00:15:33,580
components will also do that for skill

00:15:30,460 --> 00:15:35,250
out you know kubernetes several key

00:15:33,580 --> 00:15:38,830
features right

00:15:35,250 --> 00:15:41,380
now we support two type of service

00:15:38,830 --> 00:15:44,110
gaming a one is weaken a dynamic scaling

00:15:41,380 --> 00:15:46,510
which is based on you know province

00:15:44,110 --> 00:15:48,720
metrics now we have a building magical

00:15:46,510 --> 00:15:53,589
support for memory use the memory usage

00:15:48,720 --> 00:15:55,750
support and response time so this beauty

00:15:53,589 --> 00:15:58,210
mattress port will apply to all the

00:15:55,750 --> 00:16:00,190
craft on replications there is no

00:15:58,210 --> 00:16:03,580
collision injection your application we

00:16:00,190 --> 00:16:06,490
just you know acting these metrics from

00:16:03,580 --> 00:16:07,990
longer together so you get it when you

00:16:06,490 --> 00:16:10,360
push your application no matter what

00:16:07,990 --> 00:16:13,300
won't happen you're using right now the

00:16:10,360 --> 00:16:14,860
other type of scaling and we call Nate's

00:16:13,300 --> 00:16:18,760
a schedule skinny basically you can't

00:16:14,860 --> 00:16:22,330
define a template for your scheduling

00:16:18,760 --> 00:16:25,150
for example if you want to skill every

00:16:22,330 --> 00:16:27,070
Monday morning at nine o'clock to eleven

00:16:25,150 --> 00:16:29,470
o'clock with a number of the instances

00:16:27,070 --> 00:16:31,120
they work a due date for the scheduler

00:16:29,470 --> 00:16:34,120
scaling with support booster recurring

00:16:31,120 --> 00:16:36,310
schedule something like okay every week

00:16:34,120 --> 00:16:40,630
every Monday

00:16:36,310 --> 00:16:42,280
you never we cry and also every first

00:16:40,630 --> 00:16:46,240
day of that month Sampson at the back

00:16:42,280 --> 00:16:48,100
you can spy to verify you know specific

00:16:46,240 --> 00:16:48,730
schedule as well there is not a

00:16:48,100 --> 00:16:56,560
requirement

00:16:48,730 --> 00:16:59,040
um now we make the service broker to be

00:16:56,560 --> 00:17:02,530
fully compliant with open service broker

00:16:59,040 --> 00:17:07,410
specification and the service also have

00:17:02,530 --> 00:17:09,579
eight guys to manage the policies also

00:17:07,410 --> 00:17:11,589
you can use of the API it's a query

00:17:09,579 --> 00:17:13,810
metrics and the skilling histories for

00:17:11,589 --> 00:17:16,230
that there is a corresponding you know

00:17:13,810 --> 00:17:21,130
kamala interface now already in the

00:17:16,230 --> 00:17:23,350
committee you know Cloud Foundry talking

00:17:21,130 --> 00:17:26,860
so our plug-in repository so you can

00:17:23,350 --> 00:17:30,190
freely download that you set so like

00:17:26,860 --> 00:17:31,490
before I go into the next few slides are

00:17:30,190 --> 00:17:33,710
a lot to give you a short

00:17:31,490 --> 00:17:36,590
demonstration because it made you make

00:17:33,710 --> 00:17:41,809
tea time to skew our Scalia under Kenan

00:17:36,590 --> 00:17:44,929
so I just a record item let's do that

00:17:41,809 --> 00:17:47,390
I'm not going to show how to do that

00:17:44,929 --> 00:17:50,090
it's a bas-reliefs so basically what you

00:17:47,390 --> 00:17:53,170
deploy claw hungry you can you can

00:17:50,090 --> 00:17:57,050
deploy you know using the Bosh deploy a

00:17:53,170 --> 00:17:58,429
particular service right ah you know

00:17:57,050 --> 00:18:03,620
this demonstration I'm using the porch

00:17:58,429 --> 00:18:05,270
light Presley all right four minutes

00:18:03,620 --> 00:18:09,650
okay no problem

00:18:05,270 --> 00:18:12,700
ah let's say what are the deployments we

00:18:09,650 --> 00:18:15,530
have a CFD Pullman right and we have a

00:18:12,700 --> 00:18:17,900
autoscaler deployment there so before

00:18:15,530 --> 00:18:18,830
using that you have to register this

00:18:17,900 --> 00:18:22,550
service right

00:18:18,830 --> 00:18:27,890
using the CFC I you create the service

00:18:22,550 --> 00:18:30,530
broker and then you need your nibble the

00:18:27,890 --> 00:18:32,679
six poker access now you can see the

00:18:30,530 --> 00:18:36,050
exclusives in the safe the marketplace

00:18:32,679 --> 00:18:39,380
then let's use in store the Cloud

00:18:36,050 --> 00:18:51,080
Foundry c'mon on plugging for others

00:18:39,380 --> 00:18:53,570
gala yeah this or this it is here and

00:18:51,080 --> 00:18:55,340
let's do a demonstration of how to

00:18:53,570 --> 00:18:58,070
secure application firstly you have to

00:18:55,340 --> 00:19:01,790
bond the oculus create and bond also get

00:18:58,070 --> 00:19:07,940
a service or education let's push symbol

00:19:01,790 --> 00:19:11,090
up here and it's running right now and

00:19:07,940 --> 00:19:18,140
let's create a service and you can bind

00:19:11,090 --> 00:19:21,980
a series of policy now let's take a

00:19:18,140 --> 00:19:25,460
little bit look at the policy itself so

00:19:21,980 --> 00:19:26,900
basically the policy is I want to skill

00:19:25,460 --> 00:19:31,640
the application based on throughput

00:19:26,900 --> 00:19:34,250
right once it is less than three and IV

00:19:31,640 --> 00:19:36,590
just giving with one instance and if it

00:19:34,250 --> 00:19:40,540
is more than five ends go out with one

00:19:36,590 --> 00:19:40,540
instance but it's a pretty simple one

00:19:44,900 --> 00:19:50,310
let us see how this feels eating and

00:19:47,220 --> 00:19:51,690
skill hot right I'm in this window

00:19:50,310 --> 00:19:54,420
actually shows the benchmark tool we are

00:19:51,690 --> 00:19:57,120
using a be a batch of magnitude to drive

00:19:54,420 --> 00:20:00,660
load and there are several other windows

00:19:57,120 --> 00:20:03,480
here with this one is show the metric

00:20:00,660 --> 00:20:06,510
reserve that your adaptation are we

00:20:03,480 --> 00:20:11,070
retrieved and also the skilling history

00:20:06,510 --> 00:20:12,750
and we also show the app stats now I say

00:20:11,070 --> 00:20:17,040
what is going on let's strap it a load

00:20:12,750 --> 00:20:19,140
first and you may need needle wait some

00:20:17,040 --> 00:20:21,990
time to you know guided metrics

00:20:19,140 --> 00:20:24,450
retrieved and you can say there is you

00:20:21,990 --> 00:20:32,730
know us 0 we education there is a for

00:20:24,450 --> 00:20:36,360
real gossiper seconds and it goes to 10

00:20:32,730 --> 00:20:38,640
right it should be an evaluation that

00:20:36,360 --> 00:20:57,480
the literature need to skill out but it

00:20:38,640 --> 00:20:59,460
may need take some time you can see

00:20:57,480 --> 00:21:02,880
there is you know skimming issue here

00:20:59,460 --> 00:21:06,390
the useless number from 1 to 2 right and

00:21:02,880 --> 00:21:09,900
you have C 2 instances from the Upstate

00:21:06,390 --> 00:21:19,080
and then I queued the bottom up to and

00:21:09,900 --> 00:21:21,750
to say how it is going and there is so

00:21:19,080 --> 00:21:24,510
sir pod big hug 0 because our kids day

00:21:21,750 --> 00:21:27,080
you know the load actually there is no

00:21:24,510 --> 00:21:27,080
load right now

00:21:34,579 --> 00:21:38,669
so you're gonna wait for it to scale

00:21:36,599 --> 00:21:47,489
down right yeah it's just a bit down to

00:21:38,669 --> 00:21:52,259
one instance I guess we're watching the

00:21:47,489 --> 00:21:54,479
bottom right you can watching this one

00:21:52,259 --> 00:22:05,519
and this one that's giving history and

00:21:54,479 --> 00:22:08,219
also the app stats okay

00:22:05,519 --> 00:22:11,039
so there is an additional skill in

00:22:08,219 --> 00:22:14,429
history the unit number changed from two

00:22:11,039 --> 00:22:15,929
to one and then if you add to the status

00:22:14,429 --> 00:22:18,690
of the application there is only one

00:22:15,929 --> 00:22:22,019
instance of any so this is a very simple

00:22:18,690 --> 00:22:25,859
demo and what is you know what is coming

00:22:22,019 --> 00:22:29,039
in the near future so one of the things

00:22:25,859 --> 00:22:31,049
we got from the customer that they want

00:22:29,039 --> 00:22:33,149
customer metrics we are doing this for

00:22:31,049 --> 00:22:35,969
that and we are now working on the

00:22:33,149 --> 00:22:38,429
dashboard it is viewed only the remand

00:22:35,969 --> 00:22:41,789
openness or dashboard as well so that

00:22:38,429 --> 00:22:45,239
you can see the so therefore we you can

00:22:41,789 --> 00:22:47,149
configure policies since you know cut

00:22:45,239 --> 00:22:50,099
some of the school in case trees there

00:22:47,149 --> 00:22:53,249
here I show some of the screenshots here

00:22:50,099 --> 00:22:56,690
so the policy configuration the mattress

00:22:53,249 --> 00:22:59,489
dashboard and also skinning it's true

00:22:56,690 --> 00:23:02,369
there are other things like we are going

00:22:59,489 --> 00:23:05,639
to migrate to locker Gator v2 API or we

00:23:02,369 --> 00:23:09,239
are we use a lot of cash because it's

00:23:05,639 --> 00:23:11,519
quite nice features for mometrix hurry

00:23:09,239 --> 00:23:14,519
we haven't decided yet which way to go

00:23:11,519 --> 00:23:17,729
but but we will do that right no matter

00:23:14,519 --> 00:23:19,469
is we do it all on cash given that the

00:23:17,729 --> 00:23:23,099
logger gator we wanted here is going to

00:23:19,469 --> 00:23:24,899
deprecate it by the end of this year the

00:23:23,099 --> 00:23:26,669
other major things we want to do is a

00:23:24,899 --> 00:23:30,239
performance it about the increment our

00:23:26,669 --> 00:23:32,909
goal is to support you know 10,000

00:23:30,239 --> 00:23:35,009
applications as I said given that there

00:23:32,909 --> 00:23:37,919
is a small percentage of that bikini

00:23:35,009 --> 00:23:39,419
using out scalar so this piece I mean

00:23:37,919 --> 00:23:42,239
that we if we support

00:23:39,419 --> 00:23:43,730
10k applications it can serve the

00:23:42,239 --> 00:23:47,950
largest the form the right

00:23:43,730 --> 00:23:50,450
oh and the other concern is to extend

00:23:47,950 --> 00:23:52,690
this invitation to other skilled

00:23:50,450 --> 00:23:57,110
coordinating systems so this is so

00:23:52,690 --> 00:24:07,370
whether I have four for the screening

00:23:57,110 --> 00:24:13,220
today with links to there are some other

00:24:07,370 --> 00:24:15,889
yeah the links yeah three products there

00:24:13,220 --> 00:24:17,510
okay let's see if we have at least one

00:24:15,889 --> 00:24:20,600
question we could probably pick one

00:24:17,510 --> 00:24:21,880
question remember you are new so you

00:24:20,600 --> 00:24:24,950
probably have to unmute yourself

00:24:21,880 --> 00:24:27,260
otherwise Boyd you can just start on

00:24:24,950 --> 00:24:30,500
sharing so that way we can get a she she

00:24:27,260 --> 00:24:32,510
just ran yeah I stopped yeah thank you

00:24:30,500 --> 00:24:35,269
very much well thank you for this is

00:24:32,510 --> 00:24:37,700
great I mean I can see the progress and

00:24:35,269 --> 00:24:40,700
and thanks for the overview in a very

00:24:37,700 --> 00:24:41,000
short amount of time no problem thank

00:24:40,700 --> 00:24:47,000
you

00:24:41,000 --> 00:24:49,039
yes me all right so and also share your

00:24:47,000 --> 00:24:51,649
screen I can also see Demetri at his

00:24:49,039 --> 00:24:54,380
desk so he's gonna be doing the

00:24:51,649 --> 00:25:01,190
presentation so as you can give they

00:24:54,380 --> 00:25:08,419
don't service fabric yeah you can see my

00:25:01,190 --> 00:25:10,399
screen alright so thank you dr. max for

00:25:08,419 --> 00:25:12,950
giving us opportunity to present this in

00:25:10,399 --> 00:25:14,570
today's cab meeting so since we achieved

00:25:12,950 --> 00:25:16,730
incubation this is the first time I

00:25:14,570 --> 00:25:19,460
think service fabric is presenting in

00:25:16,730 --> 00:25:21,860
the cab meeting so so I've got couple of

00:25:19,460 --> 00:25:25,309
slides here the one the first one which

00:25:21,860 --> 00:25:27,649
talks about since incue bation till I

00:25:25,309 --> 00:25:29,299
would say the Boston submit what is that

00:25:27,649 --> 00:25:30,830
has been done as far of service fabric

00:25:29,299 --> 00:25:34,610
and in the next slide we will talk about

00:25:30,830 --> 00:25:35,960
what's a road map in place so I think

00:25:34,610 --> 00:25:37,399
these were for a few of the commitments

00:25:35,960 --> 00:25:40,580
also when we initially proposed for

00:25:37,399 --> 00:25:43,460
incue bation OSB compliance was thing

00:25:40,580 --> 00:25:45,019
where which was so I mean when we

00:25:43,460 --> 00:25:47,870
proposed incubation we were complying to

00:25:45,019 --> 00:25:50,600
2.9 version of always be API so now we

00:25:47,870 --> 00:25:54,610
can say that we are combined to 2.13

00:25:50,600 --> 00:25:57,230
version of OSB API and this was also a

00:25:54,610 --> 00:25:59,690
requirement from base

00:25:57,230 --> 00:26:01,490
to decouple some of our lifecycle

00:25:59,690 --> 00:26:04,490
operations from Cloud Foundry because as

00:26:01,490 --> 00:26:07,130
we move on we know there is an

00:26:04,490 --> 00:26:08,780
increasing adoption of basically the

00:26:07,130 --> 00:26:11,780
integration between CF and Cuban it is

00:26:08,780 --> 00:26:14,900
so as part of this we decouple our life

00:26:11,780 --> 00:26:16,730
cycle a Pia is from CF and now we can

00:26:14,900 --> 00:26:19,400
say we are a truly always be a compliant

00:26:16,730 --> 00:26:21,559
broker and then moving forward so

00:26:19,400 --> 00:26:24,230
service fabric also provides some of the

00:26:21,559 --> 00:26:27,980
extension API so which will be covered

00:26:24,230 --> 00:26:29,900
as the story which will talk about an

00:26:27,980 --> 00:26:32,660
option of Bosch to dotto this was an

00:26:29,900 --> 00:26:34,730
important story for us and was also a

00:26:32,660 --> 00:26:37,880
commitment from our side as part of our

00:26:34,730 --> 00:26:39,580
incubation proposal the major

00:26:37,880 --> 00:26:42,080
requirement basically was to make

00:26:39,580 --> 00:26:44,120
service fabric modular and support Bosch

00:26:42,080 --> 00:26:45,919
to go as far as Manifest and ops files

00:26:44,120 --> 00:26:48,470
and the various constructs which are

00:26:45,919 --> 00:26:51,830
provided by Polish roto and also make

00:26:48,470 --> 00:26:54,710
sure that the backing services basically

00:26:51,830 --> 00:26:58,160
which are deployed using service are

00:26:54,710 --> 00:27:03,919
bigger also are able to adhere to Bosch

00:26:58,160 --> 00:27:06,230
to dot wash tool auto matron and and

00:27:03,919 --> 00:27:08,720
then with respect to so there are lot of

00:27:06,230 --> 00:27:10,669
things which row brings to the plate X

00:27:08,720 --> 00:27:13,429
the face file system was is a major

00:27:10,669 --> 00:27:17,090
thing and then dynamic IP a location for

00:27:13,429 --> 00:27:22,010
use cases like sharding and then of

00:27:17,090 --> 00:27:26,059
course the adoption of the ops files and

00:27:22,010 --> 00:27:27,770
aspects then another one another next

00:27:26,059 --> 00:27:30,710
item is basically schedule update window

00:27:27,770 --> 00:27:34,309
for service instances so with respect to

00:27:30,710 --> 00:27:36,350
this the idea was that the various

00:27:34,309 --> 00:27:38,600
instances which are updated today if you

00:27:36,350 --> 00:27:40,250
know Surrey sibling also has a scheduler

00:27:38,600 --> 00:27:43,880
component in place which basically

00:27:40,250 --> 00:27:46,669
schedules updates as well as backups -

00:27:43,880 --> 00:27:49,429
so the idea about this particular story

00:27:46,669 --> 00:27:52,970
was that to basically spread the

00:27:49,429 --> 00:27:54,830
schedules across a window of say for

00:27:52,970 --> 00:27:57,559
example a user-defined window of a week

00:27:54,830 --> 00:28:01,370
or a few days or maybe a few hours

00:27:57,559 --> 00:28:02,690
within a day so that the end user knows

00:28:01,370 --> 00:28:06,110
when his instance is going to get

00:28:02,690 --> 00:28:07,760
updated and it gives the end user some

00:28:06,110 --> 00:28:10,520
transparency around their backing

00:28:07,760 --> 00:28:11,140
services instances cocl I plug in for

00:28:10,520 --> 00:28:14,320
backup and

00:28:11,140 --> 00:28:16,390
restore so so today as you know service

00:28:14,320 --> 00:28:18,730
fabric also has got extension API is for

00:28:16,390 --> 00:28:21,400
backup and restore and as part of this

00:28:18,730 --> 00:28:25,090
plug-in was developed and was open

00:28:21,400 --> 00:28:27,700
sourced as part of this story pre update

00:28:25,090 --> 00:28:31,360
API so this again has got many use cases

00:28:27,700 --> 00:28:33,960
so before triggering an update for a

00:28:31,360 --> 00:28:37,200
backing services the idea is that the

00:28:33,960 --> 00:28:39,550
users can write some of the scripts or

00:28:37,200 --> 00:28:41,260
provide some of the constructs using

00:28:39,550 --> 00:28:44,200
which they can basically do some

00:28:41,260 --> 00:28:46,990
operations for example they may want to

00:28:44,200 --> 00:28:49,000
maybe modify the manifest or inject some

00:28:46,990 --> 00:28:52,450
metadata within the newly generated

00:28:49,000 --> 00:28:55,480
manifest yeah so this is till I would

00:28:52,450 --> 00:28:59,200
say till the CF summit Boston this is

00:28:55,480 --> 00:29:01,600
what was delivered as far as moving to

00:28:59,200 --> 00:29:04,090
the road map so the road map is quite

00:29:01,600 --> 00:29:05,380
exciting for service fabric so there was

00:29:04,090 --> 00:29:06,370
a press of the first item is service

00:29:05,380 --> 00:29:08,320
fabric to dotto

00:29:06,370 --> 00:29:09,850
so we also made a presentation on

00:29:08,320 --> 00:29:13,060
service fabric to out ordering the

00:29:09,850 --> 00:29:19,000
Boston's from it so some of the items

00:29:13,060 --> 00:29:20,740
for example integrating the community

00:29:19,000 --> 00:29:23,440
projects like say for example be BR

00:29:20,740 --> 00:29:27,070
bringing be BR or maybe a shield or some

00:29:23,440 --> 00:29:29,200
of the other monitoring frameworks for

00:29:27,070 --> 00:29:31,060
example Prometheus or for example

00:29:29,200 --> 00:29:32,500
getting a new provision Iran voted on to

00:29:31,060 --> 00:29:36,250
service fabric platform so today we

00:29:32,500 --> 00:29:38,050
support Bosch base provisioning and dr.

00:29:36,250 --> 00:29:39,490
base prevailing so so for example to

00:29:38,050 --> 00:29:42,010
bring it a caters provisional today it

00:29:39,490 --> 00:29:44,470
is quite human less task considering the

00:29:42,010 --> 00:29:46,540
service fabric 1.2 architecture so the

00:29:44,470 --> 00:29:48,670
plan is to basically move to a much more

00:29:46,540 --> 00:29:51,390
modular a pluggable event-driven

00:29:48,670 --> 00:29:54,310
architecture where some of these

00:29:51,390 --> 00:29:55,750
shortcomings can be easily achieved so

00:29:54,310 --> 00:29:57,430
that's the plan which this will be

00:29:55,750 --> 00:30:00,700
subject to a presentation is also

00:29:57,430 --> 00:30:02,830
available can be looked upon service

00:30:00,700 --> 00:30:05,260
fabric h a ends ADM and multi is he

00:30:02,830 --> 00:30:08,110
right so today's service fabric is

00:30:05,260 --> 00:30:09,700
deployed on a single VM so it is a

00:30:08,110 --> 00:30:13,510
single point of failure so the plan is

00:30:09,700 --> 00:30:15,520
to basically make it basically highly

00:30:13,510 --> 00:30:17,110
available and make sure any updates or

00:30:15,520 --> 00:30:20,500
any town there is a very minimal

00:30:17,110 --> 00:30:23,380
downtime in place when the viens get

00:30:20,500 --> 00:30:24,970
updated and of course support multi AC

00:30:23,380 --> 00:30:26,650
on various yes

00:30:24,970 --> 00:30:28,540
so that work so there is some work which

00:30:26,650 --> 00:30:30,220
is ongoing on this at least on the AWS

00:30:28,540 --> 00:30:33,870
platform and we have been doing some

00:30:30,220 --> 00:30:37,210
tests and at least we can say that

00:30:33,870 --> 00:30:41,710
keeping multi Hz aside H a and n ZD m I

00:30:37,210 --> 00:30:44,410
think we can can basically achieve at

00:30:41,710 --> 00:30:45,670
least two to three seconds of is the

00:30:44,410 --> 00:30:49,030
time which is required today for a

00:30:45,670 --> 00:30:50,890
failover going for then and the idea is

00:30:49,030 --> 00:30:54,490
to basically support it on the various

00:30:50,890 --> 00:30:57,340
yes actually rate limiting right so this

00:30:54,490 --> 00:31:00,460
is again a very important story this the

00:30:57,340 --> 00:31:02,380
idea is that today when service fabric

00:31:00,460 --> 00:31:05,290
talks to Bosh or various components I

00:31:02,380 --> 00:31:08,050
would say CF there is no rate limiting

00:31:05,290 --> 00:31:11,140
in place they we just send the request

00:31:08,050 --> 00:31:13,360
and then and then we wait for the target

00:31:11,140 --> 00:31:16,390
platform closest respond back I mean at

00:31:13,360 --> 00:31:18,370
times we have seen that we have hit in

00:31:16,390 --> 00:31:20,710
our test that we have hit limits for on

00:31:18,370 --> 00:31:22,890
NES or on Bosh or even on the cloud

00:31:20,710 --> 00:31:25,450
controller so the plan is to basically

00:31:22,890 --> 00:31:29,170
applied some of the data meetings with

00:31:25,450 --> 00:31:31,660
within service fabric and moreover when

00:31:29,170 --> 00:31:33,520
it comes to some long-running processes

00:31:31,660 --> 00:31:36,190
for example long-running requests for

00:31:33,520 --> 00:31:37,900
example a major version upgrade for the

00:31:36,190 --> 00:31:39,700
backing services which may take a lot

00:31:37,900 --> 00:31:41,770
more time than a regular probably and

00:31:39,700 --> 00:31:45,370
stem-cell update or maybe a regular code

00:31:41,770 --> 00:31:47,410
update right so so that all the various

00:31:45,370 --> 00:31:49,390
for example if you consider a ball shop

00:31:47,410 --> 00:31:53,590
right it may end up using all the Bosh

00:31:49,390 --> 00:31:55,990
workers for all if a now for all the

00:31:53,590 --> 00:31:57,970
water filters can be occupied by suppose

00:31:55,990 --> 00:32:02,320
12 simultaneous updates considering that

00:31:57,970 --> 00:32:04,300
the 12 right so - so as to make sure

00:32:02,320 --> 00:32:06,310
that there is a fair share given to

00:32:04,300 --> 00:32:09,100
various requests so that's the idea

00:32:06,310 --> 00:32:11,200
behind this context based scheduling so

00:32:09,100 --> 00:32:12,910
everything I just discussed in the

00:32:11,200 --> 00:32:16,120
initial the previous slide that we have

00:32:12,910 --> 00:32:18,430
a schedule updates window in place but

00:32:16,120 --> 00:32:21,370
we see some limitations now with that

00:32:18,430 --> 00:32:23,860
approach where what happens is it is

00:32:21,370 --> 00:32:26,230
just a plain time based scheduling which

00:32:23,860 --> 00:32:28,990
is in place so the idea with this story

00:32:26,230 --> 00:32:30,640
is that we be more deterministic so

00:32:28,990 --> 00:32:32,560
today when you send an update we do know

00:32:30,640 --> 00:32:34,720
the target state of the system for

00:32:32,560 --> 00:32:37,060
example Bosh right so what's the lowdown

00:32:34,720 --> 00:32:39,269
Bosh or whether there are enough

00:32:37,060 --> 00:32:44,080
capacity available in Bosh are not so

00:32:39,269 --> 00:32:46,059
yeah so the idea is to basically be more

00:32:44,080 --> 00:32:47,759
deterministic and do an optimal utilize

00:32:46,059 --> 00:32:51,940
engine resources deployment hooks

00:32:47,759 --> 00:32:53,440
another very important story so the idea

00:32:51,940 --> 00:32:55,629
is that we provide some of the pre and

00:32:53,440 --> 00:32:58,330
the post hooks when it comes to the

00:32:55,629 --> 00:33:01,269
credence and then give users capability

00:32:58,330 --> 00:33:03,129
to have some operations in place for

00:33:01,269 --> 00:33:04,869
example if you want to inject

00:33:03,129 --> 00:33:05,980
credentials into a manifest you should

00:33:04,869 --> 00:33:09,820
be able to do it in a pre great

00:33:05,980 --> 00:33:11,169
operation and then moving forward the

00:33:09,820 --> 00:33:12,789
plan is to do some of the performance of

00:33:11,169 --> 00:33:15,399
benchmarking and stabilize the whole

00:33:12,789 --> 00:33:19,080
service fabric platform in exchange so

00:33:15,399 --> 00:33:22,809
so the performance by benchmarking

00:33:19,080 --> 00:34:04,570
it would be basically the interaction

00:33:22,809 --> 00:34:14,230
with or it could be so we're going to

00:34:04,570 --> 00:34:17,889
Remini bet yeah so this is a project

00:34:14,230 --> 00:34:28,899
that we've been working on we I think

00:34:17,889 --> 00:34:31,899
it's for those who don't know me I'm

00:34:28,899 --> 00:34:34,149
Dimitri and this thing does not work for

00:34:31,899 --> 00:34:40,290
some reason now where is the present

00:34:34,149 --> 00:34:43,149
button slide slide arrange tools present

00:34:40,290 --> 00:34:45,819
all right zoom I guess affects computers

00:34:43,149 --> 00:34:48,520
in all kinds of ways so for those who

00:34:45,819 --> 00:34:51,339
don't know p.m. Bosch I also happen to

00:34:48,520 --> 00:34:52,720
work with max all the time so this is

00:34:51,339 --> 00:34:55,810
the presentation that - gay

00:34:52,720 --> 00:34:58,260
first time at the cube corn in

00:34:55,810 --> 00:35:01,150
Copenhagen a couple of weeks ago I think

00:34:58,260 --> 00:35:02,440
so given that we have about 20 minutes

00:35:01,150 --> 00:35:05,079
we'll probably go a little bit faster or

00:35:02,440 --> 00:35:08,050
maybe skip certain things but feel free

00:35:05,079 --> 00:35:10,480
to interrupt at any time and you know

00:35:08,050 --> 00:35:16,810
it's it's make it as interactive as

00:35:10,480 --> 00:35:18,250
possible so washing cube you know some

00:35:16,810 --> 00:35:20,890
of you already know that there's been

00:35:18,250 --> 00:35:24,460
previous attempts and figure out how to

00:35:20,890 --> 00:35:25,900
integrate borscht with kubernetes you

00:35:24,460 --> 00:35:27,760
know whether it's a good thing whether

00:35:25,900 --> 00:35:29,380
it's bad thing you know different

00:35:27,760 --> 00:35:31,210
approaches and whatnot so this this

00:35:29,380 --> 00:35:33,910
presentation area explores one of the

00:35:31,210 --> 00:35:36,780
approaches we've taken and kind of a

00:35:33,910 --> 00:35:40,000
tries to put a particular framing around

00:35:36,780 --> 00:35:42,480
you know what's right what's right to do

00:35:40,000 --> 00:35:44,290
who's this guy well that's max is

00:35:42,480 --> 00:35:47,410
orchestrating this meeting he likes

00:35:44,290 --> 00:35:51,310
bicycles then he's slightly going away

00:35:47,410 --> 00:35:55,750
now boom right slacker here that's me

00:35:51,310 --> 00:35:57,700
I'm not slack over there what's cube

00:35:55,750 --> 00:36:02,050
well I think hopefully everyone knows

00:35:57,700 --> 00:36:04,119
what cube is at this point it's you know

00:36:02,050 --> 00:36:05,560
according to the github page production

00:36:04,119 --> 00:36:08,650
grade container scheduling and

00:36:05,560 --> 00:36:12,970
management different people kind of view

00:36:08,650 --> 00:36:14,950
it as a different level of platform some

00:36:12,970 --> 00:36:16,900
people use it as a path even though it's

00:36:14,950 --> 00:36:18,670
not necessarily designed that way some

00:36:16,900 --> 00:36:20,109
people use it as an eye as even though

00:36:18,670 --> 00:36:22,210
again it's not necessarily designed that

00:36:20,109 --> 00:36:24,550
way a lot of people view it as just a

00:36:22,210 --> 00:36:27,550
set of primitives that they can build

00:36:24,550 --> 00:36:30,250
something on top that's probably more

00:36:27,550 --> 00:36:34,300
closely to what people advertise cube to

00:36:30,250 --> 00:36:35,710
be we'll see what is Bosh well you

00:36:34,300 --> 00:36:37,839
probably all know ready wattage brushes

00:36:35,710 --> 00:36:40,300
we used to deploy a lot of production

00:36:37,839 --> 00:36:44,920
workloads it's actually also an

00:36:40,300 --> 00:36:46,930
Orchestrator it also provides a you know

00:36:44,920 --> 00:36:48,160
full-blown tool chain for release

00:36:46,930 --> 00:36:52,500
engineering employment lifecycle

00:36:48,160 --> 00:36:54,670
management and as so here says small oil

00:36:52,500 --> 00:36:58,960
large-scale software

00:36:54,670 --> 00:37:00,849
well mostly mostly medium sized but we

00:36:58,960 --> 00:37:02,950
definitely have users that go for

00:37:00,849 --> 00:37:04,670
smaller or larger all right cube

00:37:02,950 --> 00:37:08,360
operators

00:37:04,670 --> 00:37:10,460
not sure if everyone has heard but for

00:37:08,360 --> 00:37:12,410
those who haven't heard operators is a

00:37:10,460 --> 00:37:14,300
concept that's been popularized by

00:37:12,410 --> 00:37:16,520
chorus right why do we need it

00:37:14,300 --> 00:37:19,940
it's so cool as the way describes

00:37:16,520 --> 00:37:24,100
operators is as following right an

00:37:19,940 --> 00:37:27,230
author is something that you effectively

00:37:24,100 --> 00:37:28,970
use to help you manage different kind of

00:37:27,230 --> 00:37:32,150
stateful applications may be more

00:37:28,970 --> 00:37:35,960
complex stateless applications another

00:37:32,150 --> 00:37:38,900
kind of a quote that Korres uses to

00:37:35,960 --> 00:37:40,880
describe operators is something that you

00:37:38,900 --> 00:37:42,980
know how do we include some of the human

00:37:40,880 --> 00:37:44,630
knowledge at operating different

00:37:42,980 --> 00:37:46,220
software right now obviously the

00:37:44,630 --> 00:37:48,290
software is pretty easy to operate you

00:37:46,220 --> 00:37:51,020
probably don't need any additional stuff

00:37:48,290 --> 00:37:52,970
like operators or like other processes

00:37:51,020 --> 00:37:54,710
you just you know maybe use support

00:37:52,970 --> 00:37:57,070
directly maybe you see em directly maybe

00:37:54,710 --> 00:37:59,990
use cube directly but sometimes

00:37:57,070 --> 00:38:03,080
especially with the data services you do

00:37:59,990 --> 00:38:04,520
need that extra level of help from

00:38:03,080 --> 00:38:06,950
something all right

00:38:04,520 --> 00:38:09,140
well some open-source examples out there

00:38:06,950 --> 00:38:11,390
nowadays at CD operator Postgres

00:38:09,140 --> 00:38:17,360
operator so they respectfully manage at

00:38:11,390 --> 00:38:19,550
CD and Postgres kind of a clusters I'm

00:38:17,360 --> 00:38:31,310
not sure what this picture shows maybe

00:38:19,550 --> 00:38:33,530
max knows what this picture shows skip

00:38:31,310 --> 00:38:40,370
the slide since it's super super blue

00:38:33,530 --> 00:38:42,110
and confusing alright alright so the way

00:38:40,370 --> 00:38:43,460
we kind of were discussing with max what

00:38:42,110 --> 00:38:45,890
is the what is the kind of an

00:38:43,460 --> 00:38:49,730
interesting way to position borscht in

00:38:45,890 --> 00:38:52,190
regards to kubernetes is is there you

00:38:49,730 --> 00:38:56,090
know can someone provide the generic

00:38:52,190 --> 00:38:59,270
operator right and if we do so well yes

00:38:56,090 --> 00:39:02,540
we can and if we do so how useful is it

00:38:59,270 --> 00:39:06,680
right so we don't we don't quite know

00:39:02,540 --> 00:39:08,690
right I think this really goes from you

00:39:06,680 --> 00:39:10,610
know lots of experimentation we could

00:39:08,690 --> 00:39:12,410
potentially determine if it's something

00:39:10,610 --> 00:39:14,860
that's useful while operating kubernetes

00:39:12,410 --> 00:39:17,420
cluster and using maybe Bosch with it

00:39:14,860 --> 00:39:20,040
we'll see

00:39:17,420 --> 00:39:21,750
what if we could all right let's take a

00:39:20,040 --> 00:39:24,060
look at what if we could so it looks

00:39:21,750 --> 00:39:26,400
like there is some fancy things going on

00:39:24,060 --> 00:39:28,020
there so we have any software that we

00:39:26,400 --> 00:39:30,210
work is trading we have some kind of a

00:39:28,020 --> 00:39:32,160
generic q operator and then I guess this

00:39:30,210 --> 00:39:34,100
generic cube operator is actually

00:39:32,160 --> 00:39:36,960
creating all kinds of different

00:39:34,100 --> 00:39:39,420
kubernetes concepts I will go into

00:39:36,960 --> 00:39:41,610
detail on some of them whatnot but this

00:39:39,420 --> 00:39:44,520
is how I guess the typical layout would

00:39:41,610 --> 00:39:46,230
look like if if we're talking about the

00:39:44,520 --> 00:39:47,940
generic q operator now if you just

00:39:46,230 --> 00:39:50,220
replace this generic cube operator with

00:39:47,940 --> 00:39:51,930
that CD operator you know and replace

00:39:50,220 --> 00:39:53,430
like service one who is you know it's it

00:39:51,930 --> 00:39:55,320
you know it one it did you know to it's

00:39:53,430 --> 00:39:57,120
you know three and whatnot right you

00:39:55,320 --> 00:39:59,640
suddenly see it's being a little bit

00:39:57,120 --> 00:40:01,740
more specific right so the proposition

00:39:59,640 --> 00:40:05,180
of this presentation as well what if

00:40:01,740 --> 00:40:07,680
Bosh could be this generic cube operator

00:40:05,180 --> 00:40:10,260
and I guess any software that you can

00:40:07,680 --> 00:40:12,600
deploy would be packaged as Bosh and you

00:40:10,260 --> 00:40:14,820
know you you will you know leave the

00:40:12,600 --> 00:40:20,010
benefits of gosh that potentially you've

00:40:14,820 --> 00:40:22,290
learned or may be learning so far all

00:40:20,010 --> 00:40:27,150
right and I guess that was the the slide

00:40:22,290 --> 00:40:29,910
to kind of a cell the main point but you

00:40:27,150 --> 00:40:32,070
know Bosh has certain capabilities in

00:40:29,910 --> 00:40:35,210
how you install configure and update

00:40:32,070 --> 00:40:37,830
workloads right it's fairly

00:40:35,210 --> 00:40:41,340
well-established tool to manage

00:40:37,830 --> 00:40:43,350
production workloads it has its own you

00:40:41,340 --> 00:40:46,350
know benefits it also has of course its

00:40:43,350 --> 00:40:49,530
own disadvantages but there's at least

00:40:46,350 --> 00:40:52,080
an interesting experiment to do you know

00:40:49,530 --> 00:40:53,670
across the community what if we use bars

00:40:52,080 --> 00:40:59,690
to manage some of the workloads on top

00:40:53,670 --> 00:41:02,940
of queue now how do we do it well as

00:40:59,690 --> 00:41:06,420
most of you will probably know there is

00:41:02,940 --> 00:41:11,420
this interesting abstraction that we

00:41:06,420 --> 00:41:14,370
have in Bosh called CPI CPI is CPI

00:41:11,420 --> 00:41:16,490
extension point allows you to integrate

00:41:14,370 --> 00:41:20,250
what allows boards to integrate rather

00:41:16,490 --> 00:41:22,560
with different I as this container as a

00:41:20,250 --> 00:41:25,380
service systems maybe it's some kind of

00:41:22,560 --> 00:41:28,950
a bare-metal api's and whatnot right so

00:41:25,380 --> 00:41:30,760
given that Bosh's the way this I view

00:41:28,950 --> 00:41:34,660
borscht is more of a generic

00:41:30,760 --> 00:41:38,920
compute Orchestrator a CPI is a natural

00:41:34,660 --> 00:41:44,220
extension point to you know implement it

00:41:38,920 --> 00:41:46,660
is basic integration with kubernetes and

00:41:44,220 --> 00:41:49,240
you know to get into more details

00:41:46,660 --> 00:41:52,030
currently CPI is abstract away images

00:41:49,240 --> 00:41:53,950
compute storage and networking from the

00:41:52,030 --> 00:41:57,540
rest of the boss right mainly from boss

00:41:53,950 --> 00:42:00,880
director there of course leads for us

00:41:57,540 --> 00:42:02,680
for big advantage right where everything

00:42:00,880 --> 00:42:04,690
that sits on top of board director does

00:42:02,680 --> 00:42:06,250
not typically care about the aisles of

00:42:04,690 --> 00:42:08,320
course there's few other things that

00:42:06,250 --> 00:42:11,340
we're not really touching upon upon

00:42:08,320 --> 00:42:14,620
today at least like Loeb answers or not

00:42:11,340 --> 00:42:16,120
and who knows maybe in future CPI's do

00:42:14,620 --> 00:42:21,900
orchestrate some of this other sticking

00:42:16,120 --> 00:42:24,760
points all right so moving on you know

00:42:21,900 --> 00:42:27,070
specifically talking about kubernetes

00:42:24,760 --> 00:42:30,070
CPI you know what does it do right so

00:42:27,070 --> 00:42:32,260
given that kubernetes as I mentioned

00:42:30,070 --> 00:42:34,690
before provides lots of different

00:42:32,260 --> 00:42:38,620
primitives to be kind of a build upon

00:42:34,690 --> 00:42:40,630
right kubernetes CPI automatically you

00:42:38,620 --> 00:42:42,850
know uses those primitives to achieve

00:42:40,630 --> 00:42:48,670
you know its directive so for example

00:42:42,850 --> 00:42:51,280
you know create VM : CPI would create

00:42:48,670 --> 00:42:55,990
this call and the CPI will create you

00:42:51,280 --> 00:42:58,360
know persistent volume create VM will

00:42:55,990 --> 00:43:00,730
also as well create a few other concepts

00:42:58,360 --> 00:43:03,010
how those kind of a food should be

00:43:00,730 --> 00:43:04,450
arranged in a cluster if actually we're

00:43:03,010 --> 00:43:08,260
kind of trying to hide all of those

00:43:04,450 --> 00:43:10,450
boring primitives from you with even

00:43:08,260 --> 00:43:11,620
more boring things on top of it such

00:43:10,450 --> 00:43:16,210
that you don't have to worry about all

00:43:11,620 --> 00:43:19,090
the tiny little details and of course

00:43:16,210 --> 00:43:22,120
given that CPI's are something that the

00:43:19,090 --> 00:43:23,620
board director just calls itself and no

00:43:22,120 --> 00:43:24,970
one else has to know really about them

00:43:23,620 --> 00:43:26,290
whatever you deploy on top of course

00:43:24,970 --> 00:43:28,510
doesn't actually know that it's being

00:43:26,290 --> 00:43:30,130
deployed on top of it's just thinking

00:43:28,510 --> 00:43:32,050
deployed in some kind of computer

00:43:30,130 --> 00:43:34,680
environment it might have been AWS as

00:43:32,050 --> 00:43:38,110
well doesn't even matter

00:43:34,680 --> 00:43:38,830
demo one alrighty so install Kafka and

00:43:38,110 --> 00:43:40,750
zookeeper

00:43:38,830 --> 00:43:43,270
I think for the sake of time which is

00:43:40,750 --> 00:43:44,440
gonna do one quick thing which is really

00:43:43,270 --> 00:43:47,230
installed zookeeper

00:43:44,440 --> 00:43:50,950
so I have hopefully everyone can see

00:43:47,230 --> 00:43:53,440
this I have a boss already installed on

00:43:50,950 --> 00:43:57,040
top of kubernetes on gke this is one of

00:43:53,440 --> 00:43:59,650
the later gke versions I believe as we

00:43:57,040 --> 00:44:01,690
can see over here we'll have three nodes

00:43:59,650 --> 00:44:03,430
in this cluster so pretty tiny cluster

00:44:01,690 --> 00:44:04,870
it's been running for some time now

00:44:03,430 --> 00:44:08,260
since this is the same class that has

00:44:04,870 --> 00:44:10,630
been used to demo @q Quan so what we'll

00:44:08,260 --> 00:44:12,400
do is we'll take a look at boss releases

00:44:10,630 --> 00:44:15,160
real quick there is lots at releases

00:44:12,400 --> 00:44:16,800
here we'll get into detail why but the

00:44:15,160 --> 00:44:20,530
more important ones zookeeper over here

00:44:16,800 --> 00:44:22,000
we also have an existing CM deployment

00:44:20,530 --> 00:44:24,460
close your eyes we don't have to know

00:44:22,000 --> 00:44:26,320
about this for now but there is no

00:44:24,460 --> 00:44:29,350
zookeeper deployment already right so if

00:44:26,320 --> 00:44:31,150
we go ahead and oh and I guess one thing

00:44:29,350 --> 00:44:32,530
that we didn't look at its stem cells so

00:44:31,150 --> 00:44:35,080
we already have one stem cell over here

00:44:32,530 --> 00:44:36,910
it's a wooden stem cell the same stem so

00:44:35,080 --> 00:44:39,780
that people use on Bosch lights nothing

00:44:36,910 --> 00:44:42,850
like exactly the same bits all right so

00:44:39,780 --> 00:44:44,590
let's actually deploy a zookeeper so I

00:44:42,850 --> 00:44:49,840
already had a command over here figured

00:44:44,590 --> 00:44:51,790
out somewhere the only wrinkle over here

00:44:49,840 --> 00:44:53,470
it's not a wrinkle but rather something

00:44:51,790 --> 00:44:55,870
that it's not enabled by default

00:44:53,470 --> 00:44:57,700
today's my zookeeper list that I've

00:44:55,870 --> 00:44:59,680
maintained for testing purposes and

00:44:57,700 --> 00:45:01,360
whatnot doesn't use genus by default

00:44:59,680 --> 00:45:04,540
eventually it will but in this

00:45:01,360 --> 00:45:08,020
particular environment we'll do that and

00:45:04,540 --> 00:45:09,850
we'll kick that off all right so it will

00:45:08,020 --> 00:45:12,730
do a little bit of work there I will

00:45:09,850 --> 00:45:15,220
start creating a bunch of missing VMs

00:45:12,730 --> 00:45:18,370
now as I mentioned before this VMs are

00:45:15,220 --> 00:45:23,380
really pods right so if we control see

00:45:18,370 --> 00:45:26,410
this real quick and look at kubernetes

00:45:23,380 --> 00:45:31,690
inside over here we get pod will say

00:45:26,410 --> 00:45:34,000
show labels grep zookeeper will see that

00:45:31,690 --> 00:45:37,600
about 12 seconds ago so we actually

00:45:34,000 --> 00:45:39,640
requested five different pods to be

00:45:37,600 --> 00:45:42,970
created in kubernetes now the label in

00:45:39,640 --> 00:45:45,430
particular ways and that's how you find

00:45:42,970 --> 00:45:47,290
them but if we reconnect to the boards

00:45:45,430 --> 00:45:50,470
task let's see what it's doing all right

00:45:47,290 --> 00:45:52,300
so it's almost there you will know that

00:45:50,470 --> 00:45:55,270
it's also a little bit slower than a

00:45:52,300 --> 00:45:56,650
Bosch light now the reason why I suspect

00:45:55,270 --> 00:45:57,470
this because this cluster is a little

00:45:56,650 --> 00:46:00,740
there are

00:45:57,470 --> 00:46:02,300
provisioned so it might be choking up a

00:46:00,740 --> 00:46:04,580
little bit on spinning up some of these

00:46:02,300 --> 00:46:06,470
things and maybe the zookeeper Perseus

00:46:04,580 --> 00:46:07,940
may also take a little longer to start

00:46:06,470 --> 00:46:10,880
up since it's running already

00:46:07,940 --> 00:46:13,609
next to bunch of pods from a different

00:46:10,880 --> 00:46:15,369
deployment all right so the deploy as

00:46:13,609 --> 00:46:17,690
you see is exactly the same procedure

00:46:15,369 --> 00:46:21,640
will circle back to it will run some

00:46:17,690 --> 00:46:24,530
smoke test after it after it's done but

00:46:21,640 --> 00:46:29,300
at least in a preference of time let's

00:46:24,530 --> 00:46:31,460
see let's hope one to the demo one all

00:46:29,300 --> 00:46:34,630
right so install Kafka zookeeper great

00:46:31,460 --> 00:46:37,700
what do we see well we saw this step

00:46:34,630 --> 00:46:39,680
we'll see this step shortly we won't see

00:46:37,700 --> 00:46:41,480
the Kafka stuff but you're welcome to

00:46:39,680 --> 00:46:46,040
follow some of the instructions in the

00:46:41,480 --> 00:46:49,430
repo euro sure what do you see well we

00:46:46,040 --> 00:46:51,140
had Bosch on culinary's we kicked off

00:46:49,430 --> 00:46:52,550
some crafter stuff mostly right now

00:46:51,140 --> 00:46:54,200
we're concerned with the installation

00:46:52,550 --> 00:46:56,780
step but of course anything that you

00:46:54,200 --> 00:46:59,000
typically do with Kafka

00:46:56,780 --> 00:47:01,250
Mosley's you can do you know for example

00:46:59,000 --> 00:47:05,000
query it status maybe recreates your

00:47:01,250 --> 00:47:07,010
nodes do an update you know do rolling

00:47:05,000 --> 00:47:08,570
updates such that only one individual

00:47:07,010 --> 00:47:11,270
note you killed or whatnot the

00:47:08,570 --> 00:47:12,920
persistent disks are involved though we

00:47:11,270 --> 00:47:15,230
didn't cinnamon cube but we can all

00:47:12,920 --> 00:47:16,940
circle back and check them out and of

00:47:15,230 --> 00:47:20,359
course you can manage other software

00:47:16,940 --> 00:47:22,310
like this as you've been before all

00:47:20,359 --> 00:47:26,030
right so let's jump in into the CPI

00:47:22,310 --> 00:47:27,320
implementation details so they're kind

00:47:26,030 --> 00:47:30,500
of needs to be a mapping right between

00:47:27,320 --> 00:47:32,960
both concepts and kubernetes concentrate

00:47:30,500 --> 00:47:35,690
both concept are super generic so it was

00:47:32,960 --> 00:47:37,339
fairly easy to map the true and kind of

00:47:35,690 --> 00:47:40,430
a line the two together so Rama Bosch

00:47:37,339 --> 00:47:45,109
themself for stem cells easily translate

00:47:40,430 --> 00:47:48,440
to registry images the CPI itself when

00:47:45,109 --> 00:47:52,060
it called upload or I guess when the CPI

00:47:48,440 --> 00:47:54,410
is called to upload a stem cell into the

00:47:52,060 --> 00:47:56,780
you know into the system all it's doing

00:47:54,410 --> 00:47:58,369
is is just importing a docker image from

00:47:56,780 --> 00:48:01,310
the tarball the word and image

00:47:58,369 --> 00:48:03,589
themselves right so not nothing nothing

00:48:01,310 --> 00:48:05,510
revolutionary they're both computer unit

00:48:03,589 --> 00:48:08,750
I just call it computer unit over here

00:48:05,510 --> 00:48:11,270
for the sake of not necessarily call it

00:48:08,750 --> 00:48:13,390
VM you know put in parentheses

00:48:11,270 --> 00:48:16,190
as I was saying borscht is a genetic

00:48:13,390 --> 00:48:18,200
computer kiss trailer right so in this

00:48:16,190 --> 00:48:19,730
particular case it maps to put in other

00:48:18,200 --> 00:48:23,119
cases that may map to a physical machine

00:48:19,730 --> 00:48:26,270
or maybe container or maybe VM something

00:48:23,119 --> 00:48:33,350
else resistant disk

00:48:26,270 --> 00:48:35,750
well PD or PVC I guess it's again one to

00:48:33,350 --> 00:48:39,490
one alignment there is interesting kind

00:48:35,750 --> 00:48:42,619
of problems in kubernetes currently

00:48:39,490 --> 00:48:44,540
where you kind of have to align some of

00:48:42,619 --> 00:48:47,390
the availability zones and whatnot if

00:48:44,540 --> 00:48:49,850
you do kubernetes and one manually

00:48:47,390 --> 00:48:52,070
however in bosch because we do have a

00:48:49,850 --> 00:48:54,200
notion of availability zones the

00:48:52,070 --> 00:48:57,010
persistent disk fall into proper places

00:48:54,200 --> 00:48:59,150
automatically Morse networking

00:48:57,010 --> 00:49:00,800
kubernetes provides a single overlay

00:48:59,150 --> 00:49:03,860
network I guess really depends on your

00:49:00,800 --> 00:49:05,660
networking plugin for kubernetes but as

00:49:03,860 --> 00:49:08,680
a default that's what it is

00:49:05,660 --> 00:49:13,510
and then AZ well kubernetes

00:49:08,680 --> 00:49:16,520
automatically marks certain nodes from

00:49:13,510 --> 00:49:18,530
in a particular AZ with a particular

00:49:16,520 --> 00:49:21,290
label so you can specify that in your

00:49:18,530 --> 00:49:23,150
cloud config and then Bosh will you know

00:49:21,290 --> 00:49:25,310
make sure that when it's creating a port

00:49:23,150 --> 00:49:28,970
it will ask cube to put it in a

00:49:25,310 --> 00:49:32,720
particular easy what else web over here

00:49:28,970 --> 00:49:36,740
so some interesting tiny details in some

00:49:32,720 --> 00:49:38,750
of the pod creation logic are the

00:49:36,740 --> 00:49:39,950
following so we have untied finicky

00:49:38,750 --> 00:49:40,760
rules that are automatically applied

00:49:39,950 --> 00:49:44,660
right

00:49:40,760 --> 00:49:47,540
so for example having you're having your

00:49:44,660 --> 00:49:49,490
zookeeper node being zookeeper five node

00:49:47,540 --> 00:49:53,030
cluster being spread over multiple

00:49:49,490 --> 00:49:55,220
machines is you know very very nice

00:49:53,030 --> 00:49:58,040
right you don't even if it's losing a

00:49:55,220 --> 00:49:59,540
single AC let's say maybe you deploy a

00:49:58,040 --> 00:50:01,490
testing cluster maybe deploying

00:49:59,540 --> 00:50:03,950
something else ideally would spread

00:50:01,490 --> 00:50:05,840
around now if you're even across multi

00:50:03,950 --> 00:50:08,600
places and you have let's say more than

00:50:05,840 --> 00:50:09,890
three notes right maybe ever I don't

00:50:08,600 --> 00:50:12,350
know five nodes or something like that

00:50:09,890 --> 00:50:15,470
right or maybe nine nodes you may still

00:50:12,350 --> 00:50:18,410
may wanna spread it around to individual

00:50:15,470 --> 00:50:19,880
underlying VMs to reduce risk for

00:50:18,410 --> 00:50:22,310
failure

00:50:19,880 --> 00:50:24,140
automatically configure AC associations

00:50:22,310 --> 00:50:25,250
that's another freebie right as long as

00:50:24,140 --> 00:50:27,680
you can figure is easy

00:50:25,250 --> 00:50:29,450
Wow config then boss will take care of

00:50:27,680 --> 00:50:32,540
the rest of the spreading it around

00:50:29,450 --> 00:50:34,730
daisies and finally automatically

00:50:32,540 --> 00:50:36,920
creating code disruption budgets so who

00:50:34,730 --> 00:50:37,730
get into a little bit of detail why do

00:50:36,920 --> 00:50:40,010
we do that

00:50:37,730 --> 00:50:43,760
and what are the for disruption budgets

00:50:40,010 --> 00:50:46,280
but note they created automatically all

00:50:43,760 --> 00:50:47,900
right so what are the challenges so this

00:50:46,280 --> 00:50:49,730
section kind of talks about you know

00:50:47,900 --> 00:50:51,590
what what kind of plans do we you know

00:50:49,730 --> 00:50:55,700
previously maybe different attempts of

00:50:51,590 --> 00:50:57,980
for creating CPI by different teams run

00:50:55,700 --> 00:51:02,120
into and what we observe yourselves and

00:50:57,980 --> 00:51:05,750
how we solve them so first one kind of a

00:51:02,120 --> 00:51:07,400
easy one to identify hey kubernetes

00:51:05,750 --> 00:51:09,320
doesn't really allow you to do static

00:51:07,400 --> 00:51:12,650
eyepiece you know what can we do about

00:51:09,320 --> 00:51:15,410
it well based on our timing we were just

00:51:12,650 --> 00:51:17,900
able to enable board genus you know in

00:51:15,410 --> 00:51:19,640
this releases for example in zookeeper

00:51:17,900 --> 00:51:21,020
and it just works right so right now

00:51:19,640 --> 00:51:25,160
this zookeeper that were deploying

00:51:21,020 --> 00:51:27,710
actually does use DNS burstiness CF that

00:51:25,160 --> 00:51:29,600
we'll get to as well uses DNS now there

00:51:27,710 --> 00:51:32,060
is one kind of aesthetics to this thing

00:51:29,600 --> 00:51:34,340
is we did actually implement manual

00:51:32,060 --> 00:51:37,340
networking on top of kubernetes such

00:51:34,340 --> 00:51:40,100
that it does maintain a static IP s it

00:51:37,340 --> 00:51:42,020
is a little bit expensive because what

00:51:40,100 --> 00:51:46,220
it does it creates a service for each

00:51:42,020 --> 00:51:48,290
pod but it does work and if for example

00:51:46,220 --> 00:51:49,640
your service does not like DNS for

00:51:48,290 --> 00:51:52,580
whatever reasons you could technically

00:51:49,640 --> 00:51:54,620
run it on kubernetes with static IP but

00:51:52,580 --> 00:51:55,370
you probably don't want to since Venus

00:51:54,620 --> 00:51:58,700
is great

00:51:55,370 --> 00:52:00,500
alright what is the next challenge they

00:51:58,700 --> 00:52:03,020
will run into so maintain workload

00:52:00,500 --> 00:52:04,700
availability during the node upgrades

00:52:03,020 --> 00:52:06,470
when I say no top grade over here

00:52:04,700 --> 00:52:08,150
actually mean kubernetes node upgrade

00:52:06,470 --> 00:52:09,860
right so when you're actually upgrading

00:52:08,150 --> 00:52:11,960
your kubernetes cluster maybe from one

00:52:09,860 --> 00:52:13,730
seven two one eight how do you deal with

00:52:11,960 --> 00:52:15,080
some of the disruption maybe you noticed

00:52:13,730 --> 00:52:19,040
ailing or something like that how do you

00:52:15,080 --> 00:52:22,280
quickly bring things up so a little bit

00:52:19,040 --> 00:52:24,110
of note on what exactly is happening in

00:52:22,280 --> 00:52:26,000
node draining right so let's say as an

00:52:24,110 --> 00:52:27,710
example right you wanna upgrade from q1

00:52:26,000 --> 00:52:30,790
seven to one eight right you have this

00:52:27,710 --> 00:52:35,270
cluster of beautiful let's say ten VMs

00:52:30,790 --> 00:52:36,620
you wanna typically do it one node at a

00:52:35,270 --> 00:52:38,270
time right because you don't want to

00:52:36,620 --> 00:52:38,660
just take out your entire cluster and

00:52:38,270 --> 00:52:41,420
your screen

00:52:38,660 --> 00:52:44,960
if you can good for you but for

00:52:41,420 --> 00:52:49,430
production customers typically they are

00:52:44,960 --> 00:52:51,040
a little bit more cautious about just

00:52:49,430 --> 00:52:53,120
throwing away their clusters since

00:52:51,040 --> 00:52:54,650
typically they run some kind of workload

00:52:53,120 --> 00:52:56,270
and maybe it's not easy to move to

00:52:54,650 --> 00:52:59,810
somewhere else though if you can move it

00:52:56,270 --> 00:53:01,760
move away so as for example saying we're

00:52:59,810 --> 00:53:04,460
trying to upgrade a single node node is

00:53:01,760 --> 00:53:06,020
running with qubit 1 7 know this market

00:53:04,460 --> 00:53:06,920
is non-scheduled but at some point that

00:53:06,020 --> 00:53:09,560
way it's not going to accept a new

00:53:06,920 --> 00:53:11,270
workload then it's gonna get drained for

00:53:09,560 --> 00:53:13,130
some amount of time right so this is

00:53:11,270 --> 00:53:14,570
similar to how diego's cells drain apps

00:53:13,130 --> 00:53:15,950
right where they kind of try to move

00:53:14,570 --> 00:53:18,200
them off to a different place

00:53:15,950 --> 00:53:20,630
so in kubernetes know draining is really

00:53:18,200 --> 00:53:21,440
limited to hey let me just kill this

00:53:20,630 --> 00:53:25,190
container

00:53:21,440 --> 00:53:27,740
however the skilling of the container is

00:53:25,190 --> 00:53:30,140
a little bit more complicated and we'll

00:53:27,740 --> 00:53:31,910
get to that in a sec so eventually all

00:53:30,140 --> 00:53:33,920
the containers are gone node is removed

00:53:31,910 --> 00:53:36,560
then eventually node new node is created

00:53:33,920 --> 00:53:38,930
will start the new cubed version and

00:53:36,560 --> 00:53:41,600
then everything goes on now in this time

00:53:38,930 --> 00:53:44,360
when we're draining the when we're

00:53:41,600 --> 00:53:47,030
draining the node but what we want to

00:53:44,360 --> 00:53:48,530
happen is the one boss because borsch is

00:53:47,030 --> 00:53:51,560
the generic operator over here to

00:53:48,530 --> 00:53:53,660
actually bring the pods that the

00:53:51,560 --> 00:53:55,310
kubernetes is killing on this particular

00:53:53,660 --> 00:53:57,410
node we want to bring them up somewhere

00:53:55,310 --> 00:53:59,210
else right now why do we want to do that

00:53:57,410 --> 00:54:00,740
so for example for software like

00:53:59,210 --> 00:54:04,940
zookeeper right maybe you have to

00:54:00,740 --> 00:54:07,730
maintain a certain number of containers

00:54:04,940 --> 00:54:10,160
running right so here are five zookeeper

00:54:07,730 --> 00:54:11,540
containers you want typically three of

00:54:10,160 --> 00:54:12,800
them running right if you want if you

00:54:11,540 --> 00:54:14,630
have three of them you want two of them

00:54:12,800 --> 00:54:16,490
running at a time right so this is where

00:54:14,630 --> 00:54:18,830
the whole put disruption budgets come in

00:54:16,490 --> 00:54:21,950
that's what we're gonna jump in into a

00:54:18,830 --> 00:54:23,780
solution over here so what disruption

00:54:21,950 --> 00:54:25,910
budget is it effectively a constraint

00:54:23,780 --> 00:54:27,050
that you can put on kubernetes right and

00:54:25,910 --> 00:54:29,060
it's a privity of the kubernetes

00:54:27,050 --> 00:54:31,100
provides a net score you can say to

00:54:29,060 --> 00:54:33,670
kubernetes that hey that's not okay to

00:54:31,100 --> 00:54:36,490
delete this container when chill

00:54:33,670 --> 00:54:39,590
containers with a similar label are

00:54:36,490 --> 00:54:41,450
healthy enough to continue on right so

00:54:39,590 --> 00:54:44,240
for example the constraint for zookeeper

00:54:41,450 --> 00:54:46,880
maybe simply saying you can only kill

00:54:44,240 --> 00:54:49,580
one zookeeper at a time if any other

00:54:46,880 --> 00:54:51,320
zookeeper is dead already or maybe not

00:54:49,580 --> 00:54:52,580
healthy or something like that you

00:54:51,320 --> 00:54:54,560
cannot kill another

00:54:52,580 --> 00:54:56,000
no the zookeeper right so this is

00:54:54,560 --> 00:54:57,800
extremely important when you're draining

00:54:56,000 --> 00:54:59,510
the nose right because maybe I'm not

00:54:57,800 --> 00:55:01,790
supposed to keeper instances on the same

00:54:59,510 --> 00:55:04,250
note maybe for whatever reason you know

00:55:01,790 --> 00:55:06,800
there's just different services on that

00:55:04,250 --> 00:55:09,260
note that cannot be the whole kill that

00:55:06,800 --> 00:55:11,360
wants something right so the notion of

00:55:09,260 --> 00:55:13,160
pdbs is important right so what we've

00:55:11,360 --> 00:55:15,110
done is we have the kubernetes CPI

00:55:13,160 --> 00:55:17,480
automatically create for disruption

00:55:15,110 --> 00:55:19,670
budgets now it's fairly naive right now

00:55:17,480 --> 00:55:21,410
it's really creating a pdb with a

00:55:19,670 --> 00:55:23,810
configuration that you cannot kill more

00:55:21,410 --> 00:55:27,740
than one thing of course it could be

00:55:23,810 --> 00:55:29,750
configurable but the idea is that we're

00:55:27,740 --> 00:55:31,910
kind of slowing down kubernetes to

00:55:29,750 --> 00:55:33,650
actually kill off things at a particular

00:55:31,910 --> 00:55:36,350
rate such that it doesn't cause the

00:55:33,650 --> 00:55:40,670
unavailability if you don't use pdbs and

00:55:36,350 --> 00:55:42,770
if you do use kubernetes directly i

00:55:40,670 --> 00:55:44,720
would suggest looking into that because

00:55:42,770 --> 00:55:47,330
if you're running any kind of stateful

00:55:44,720 --> 00:55:51,710
software on it you should take a look at

00:55:47,330 --> 00:55:53,750
you know configure it alright well I

00:55:51,710 --> 00:55:55,670
guess I kind of went over this I forgot

00:55:53,750 --> 00:55:57,200
at this let's touch less but this is how

00:55:55,670 --> 00:56:00,800
you can take a look at pdbs inside

00:55:57,200 --> 00:56:02,630
inside the cluster yeah what else we got

00:56:00,800 --> 00:56:04,640
here so improve board directors the

00:56:02,630 --> 00:56:06,020
resurrection strategy for faster for the

00:56:04,640 --> 00:56:08,240
creation so this is important in terms

00:56:06,020 --> 00:56:10,640
of how to when you're draining right you

00:56:08,240 --> 00:56:13,370
want to quickly you know bring back

00:56:10,640 --> 00:56:15,650
those pods somewhere else right goal

00:56:13,370 --> 00:56:17,270
goal is to improve of course howdy

00:56:15,650 --> 00:56:19,430
rector is Rex ideally would be in

00:56:17,270 --> 00:56:21,830
parallel kerning doesn't there's some

00:56:19,430 --> 00:56:26,180
pending changes to do they're still

00:56:21,830 --> 00:56:28,340
working progress all right what about

00:56:26,180 --> 00:56:31,010
more complex workloads well as a demo

00:56:28,340 --> 00:56:33,440
tool we have a quandary installation on

00:56:31,010 --> 00:56:35,960
top of course on the application runtime

00:56:33,440 --> 00:56:38,630
sitting on top of kubernetes let's swap

00:56:35,960 --> 00:56:42,230
over real quick - it will see that our

00:56:38,630 --> 00:56:44,780
zookeeper is done we also see that our

00:56:42,230 --> 00:56:47,060
time is over for this presentation but

00:56:44,780 --> 00:56:49,520
just for the sake of it over here we'll

00:56:47,060 --> 00:56:51,200
say wash instances will see that it's

00:56:49,520 --> 00:56:53,930
going to look at two deployments over

00:56:51,200 --> 00:56:56,450
here one of them is cf here there's an H

00:56:53,930 --> 00:57:00,170
a mode except maybe a blob store is the

00:56:56,450 --> 00:57:02,030
zookeeper I also have this other example

00:57:00,170 --> 00:57:04,580
over here so we have a claw foundry app

00:57:02,030 --> 00:57:06,349
running on it this is the load bouncer

00:57:04,580 --> 00:57:09,410
ingress IP on kubernetes

00:57:06,349 --> 00:57:13,099
so if you click always max was trying to

00:57:09,410 --> 00:57:15,429
deploy an example app meanwhile sir it's

00:57:13,099 --> 00:57:18,049
running on kubernetes same exact

00:57:15,429 --> 00:57:22,039
installation instructions nothing fancy

00:57:18,049 --> 00:57:23,660
there is one ops file to enable one of

00:57:22,039 --> 00:57:26,449
the newer features in gardener and see

00:57:23,660 --> 00:57:28,609
to disable swap limiting but it should

00:57:26,449 --> 00:57:30,799
work as is it doesn't sound like I have

00:57:28,609 --> 00:57:35,059
time to run smoke test but trust me that

00:57:30,799 --> 00:57:39,109
they do work I'm not sure if there's

00:57:35,059 --> 00:57:41,569
anything particular here this should

00:57:39,109 --> 00:57:44,150
actually say do not come with swap space

00:57:41,569 --> 00:57:46,699
most local mistress do not come with

00:57:44,150 --> 00:57:48,589
swap space because kubernetes has been

00:57:46,699 --> 00:57:51,829
on the position of we should be using

00:57:48,589 --> 00:57:53,539
swap in the cloud environments hence we

00:57:51,829 --> 00:57:56,660
have to change garden run see a little

00:57:53,539 --> 00:57:58,549
bit but yeah one nuance here is we

00:57:56,660 --> 00:58:01,669
running multiple cm up containers within

00:57:58,549 --> 00:58:03,380
each quad it's something that you know

00:58:01,669 --> 00:58:05,419
that's the current design of Cheops

00:58:03,380 --> 00:58:07,699
maybe it will be adjusted in future

00:58:05,419 --> 00:58:11,209
maybe not we'll see here are some

00:58:07,699 --> 00:58:13,519
upcoming changes and I'll just jump

00:58:11,209 --> 00:58:16,519
directly to this resources over here is

00:58:13,519 --> 00:58:17,659
the main repo thank you for listening if

00:58:16,519 --> 00:58:21,079
you have any questions I'll stick around

00:58:17,659 --> 00:58:46,189
for a few more minutes and I yield my

00:58:21,079 --> 00:58:52,729
time when you break it is always on -

00:58:46,189 --> 00:58:58,880
you can ask some questions we you know

00:58:52,729 --> 00:59:00,319
you put us differently and then the ones

00:58:58,880 --> 00:59:02,589
that are mature we'll bring them on the

00:59:00,319 --> 00:59:06,909
comm all right thank you everybody

00:59:02,589 --> 00:59:06,909
thanks T yes

00:59:14,550 --> 00:59:18,150
you

00:59:14,960 --> 00:59:18,150
[Music]

00:59:21,720 --> 00:59:23,780

YouTube URL: https://www.youtube.com/watch?v=EIumnb-oPAA


