Title: Cloud Foundry Community Advisory Board [May 2019]
Publication date: 2019-05-21
Playlist: Community Advisory Board
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:08,099
thank you for the call for me we have

00:00:05,970 --> 00:00:12,210
not had one in a while because we did it

00:00:08,099 --> 00:00:15,509
live in Philadelphia so this is good we

00:00:12,210 --> 00:00:16,830
have a good set of speakers and a lot to

00:00:15,509 --> 00:00:19,650
talk about so let's get straight to it

00:00:16,830 --> 00:00:22,939
with Spooner from CFS she has a nice

00:00:19,650 --> 00:00:26,699
update form from them so maybe go ahead

00:00:22,939 --> 00:00:28,470
yeah yeah welcome to district 2 for

00:00:26,699 --> 00:00:30,119
becoming the brand new clarity

00:00:28,470 --> 00:00:31,590
Foundation member I'm gonna surprised

00:00:30,119 --> 00:00:34,230
that you're here and not on the member

00:00:31,590 --> 00:00:38,129
well you will hopefully join the member

00:00:34,230 --> 00:00:41,730
call in the next 30 minutes anyway quick

00:00:38,129 --> 00:00:43,739
updates and run through we are slowly

00:00:41,730 --> 00:00:47,129
starting off with the summit planning

00:00:43,739 --> 00:00:48,960
for the hunk the culprit vapors ends on

00:00:47,129 --> 00:00:51,120
May 31st so get get your speaking

00:00:48,960 --> 00:00:54,260
proposal skin I know most of you are

00:00:51,120 --> 00:00:56,610
also working on travel arrangements and

00:00:54,260 --> 00:00:58,170
everything so please make sure that you

00:00:56,610 --> 00:00:59,789
are there for the coach of your summit

00:00:58,170 --> 00:01:02,760
which is the Days event on September

00:00:59,789 --> 00:01:06,299
10th please don't miss that I know it's

00:01:02,760 --> 00:01:08,939
a bit of a hassle to get in they are a

00:01:06,299 --> 00:01:10,530
little ahead but it will be extremely

00:01:08,939 --> 00:01:12,420
useful for all the contributors use

00:01:10,530 --> 00:01:17,130
yourself in the rest of the contributors

00:01:12,420 --> 00:01:20,400
here there Chris spearheaded a major

00:01:17,130 --> 00:01:21,810
major initiative from our side so we

00:01:20,400 --> 00:01:24,000
started putting together this whole

00:01:21,810 --> 00:01:27,810
thing called quarterly release summary I

00:01:24,000 --> 00:01:30,060
think chip used to do that back in 2017

00:01:27,810 --> 00:01:34,110
or something as I heard from Altos books

00:01:30,060 --> 00:01:36,570
but we are restarting that starting this

00:01:34,110 --> 00:01:38,400
quarter in 2019 so every quarter we will

00:01:36,570 --> 00:01:40,560
release we will publish a release

00:01:38,400 --> 00:01:42,600
roll-up kind of an update so that folks

00:01:40,560 --> 00:01:45,000
within and outside of our community can

00:01:42,600 --> 00:01:48,720
kind of take a look at all the things

00:01:45,000 --> 00:01:50,939
that you all do in our community we also

00:01:48,720 --> 00:01:54,180
have a user survey that will close this

00:01:50,939 --> 00:01:56,850
17 this Friday and so if you are a user

00:01:54,180 --> 00:01:58,590
or if you'd know of a user or if you

00:01:56,850 --> 00:02:00,719
have a customer please let them know

00:01:58,590 --> 00:02:02,430
please give them a gentle touch I also

00:02:00,719 --> 00:02:04,350
posted the survey link here so if they

00:02:02,430 --> 00:02:06,840
don't have the link please do share the

00:02:04,350 --> 00:02:09,300
link with them we're trying to get as

00:02:06,840 --> 00:02:10,979
many folks to take the survey because

00:02:09,300 --> 00:02:13,020
that gives us a good sample size and

00:02:10,979 --> 00:02:16,260
good indication good

00:02:13,020 --> 00:02:19,080
Gator of the data I listed a couple of

00:02:16,260 --> 00:02:19,800
webinars and if you have a blog post or

00:02:19,080 --> 00:02:22,020
anything

00:02:19,800 --> 00:02:23,490
I reach out to Caitlin for publishing

00:02:22,020 --> 00:02:26,520
your content on the clock on your

00:02:23,490 --> 00:02:28,980
website and with that if there aren't

00:02:26,520 --> 00:02:32,450
any questions I will I'm here but if

00:02:28,980 --> 00:02:33,810
there aren't I'll have it back to max

00:02:32,450 --> 00:02:38,940
okay

00:02:33,810 --> 00:02:42,870
excellent Thank You Sona no other

00:02:38,940 --> 00:02:48,600
questions all right cool

00:02:42,870 --> 00:02:51,240
I guess the the the I don't know if you

00:02:48,600 --> 00:02:54,240
mentioned when people would know that

00:02:51,240 --> 00:03:00,300
their talk had accepted is there a plan

00:02:54,240 --> 00:03:04,470
that the CFP notifications yeah because

00:03:00,300 --> 00:03:07,500
I know it's it's Friday the deadline or

00:03:04,470 --> 00:03:16,980
at least it's coming up May 31st and

00:03:07,500 --> 00:03:19,320
then you get the notification going and

00:03:16,980 --> 00:03:24,360
also when do we know the people that are

00:03:19,320 --> 00:03:29,660
running the different I guess sections

00:03:24,360 --> 00:03:32,010
or the chair the track chair

00:03:29,660 --> 00:03:34,650
notifications I think about this week

00:03:32,010 --> 00:03:39,180
and I think they will be announced early

00:03:34,650 --> 00:03:41,430
next week the CFP notifications so June

00:03:39,180 --> 00:03:43,440
17th is currently the date listed here

00:03:41,430 --> 00:03:45,150
at least on the website as the date you

00:03:43,440 --> 00:03:49,080
will know if your talk are accepted or

00:03:45,150 --> 00:03:51,390
not because we plan to announce the

00:03:49,080 --> 00:03:53,750
schedule on the Thursday June 20th so

00:03:51,390 --> 00:03:58,280
before that we usually send out all the

00:03:53,750 --> 00:04:00,840
session notifications CFP notifications

00:03:58,280 --> 00:04:03,210
okay I don't see any questions I guess

00:04:00,840 --> 00:04:06,150
there's some people chatting but I don't

00:04:03,210 --> 00:04:08,810
know if it's a question you can also

00:04:06,150 --> 00:04:08,810
post it in the chat

00:04:08,900 --> 00:04:16,709
all right see if you could see anything

00:04:12,230 --> 00:04:18,209
okay well with that Eric doesn't want to

00:04:16,709 --> 00:04:18,600
be in the same room as me but he's right

00:04:18,209 --> 00:04:22,470
there

00:04:18,600 --> 00:04:26,820
I saw him hey Eric hey dr. max you know

00:04:22,470 --> 00:04:28,410
I'm just impatient yeah yeah I

00:04:26,820 --> 00:04:31,230
be happy to give some updates from the

00:04:28,410 --> 00:04:33,660
upfront time pmc we've had a couple of

00:04:31,230 --> 00:04:36,360
CF deployments major releases recently

00:04:33,660 --> 00:04:38,850
version eight removed support for CF

00:04:36,360 --> 00:04:40,830
Linux FS two and then we kind of rushed

00:04:38,850 --> 00:04:43,550
out to version nine because of some

00:04:40,830 --> 00:04:46,890
issues associated to a core adversity ve

00:04:43,550 --> 00:04:50,160
so those relate to how or whether or not

00:04:46,890 --> 00:04:52,650
it trust self-signed certificates so

00:04:50,160 --> 00:04:55,080
certainly be aware of those as you are

00:04:52,650 --> 00:04:56,210
updating your CE of deployment based app

00:04:55,080 --> 00:05:00,420
runtime clusters

00:04:56,210 --> 00:05:02,430
we've had some releases from some of the

00:05:00,420 --> 00:05:05,300
component teams as well the CLI most

00:05:02,430 --> 00:05:07,170
recently released version six dot 44.1

00:05:05,300 --> 00:05:08,910
in general they've been improving

00:05:07,170 --> 00:05:10,650
support for operations with client

00:05:08,910 --> 00:05:13,980
credentials I think they had a minor

00:05:10,650 --> 00:05:16,130
regression in dot o that's prompted them

00:05:13,980 --> 00:05:18,720
to release not one as a fast follow

00:05:16,130 --> 00:05:21,000
excitingly cloud controller and the capi

00:05:18,720 --> 00:05:23,130
team have released initial support for

00:05:21,000 --> 00:05:25,430
running side cards along your main

00:05:23,130 --> 00:05:28,740
applications so we'll see a demo from

00:05:25,430 --> 00:05:31,790
Tim Downey and Scott from the Cappy team

00:05:28,740 --> 00:05:34,620
later today but they're definitely see

00:05:31,790 --> 00:05:36,270
seeking feedback on that functionality

00:05:34,620 --> 00:05:38,880
and thinking about next steps in

00:05:36,270 --> 00:05:41,640
refinements some other things in my bed

00:05:38,880 --> 00:05:43,260
want to be aware of you a released a new

00:05:41,640 --> 00:05:45,600
version of their boss release that has

00:05:43,260 --> 00:05:46,380
some breaking changes regarding TLS

00:05:45,600 --> 00:05:48,420
configuration

00:05:46,380 --> 00:05:51,480
I think that's getting incorporated into

00:05:48,420 --> 00:05:53,700
CF deployment so there might be a little

00:05:51,480 --> 00:05:56,490
bit of complexity there that I'm sure

00:05:53,700 --> 00:05:57,570
see employment well we're new about but

00:05:56,490 --> 00:05:58,890
if you're consuming at via other means

00:05:57,570 --> 00:06:03,270
you might want to be aware of those as

00:05:58,890 --> 00:06:05,520
well the networking team is continuing

00:06:03,270 --> 00:06:07,470
work on dynamic egress as a more

00:06:05,520 --> 00:06:11,580
flexible replacement for app security

00:06:07,470 --> 00:06:13,620
groups and then down in the container

00:06:11,580 --> 00:06:16,890
depths of the app runtime

00:06:13,620 --> 00:06:18,570
I know garden has released initial

00:06:16,890 --> 00:06:21,240
support for kind of better metrics

00:06:18,570 --> 00:06:25,430
around CPU usage for containers and

00:06:21,240 --> 00:06:28,740
along with some CLI plug-in tooling that

00:06:25,430 --> 00:06:30,030
helps app developers and operators get

00:06:28,740 --> 00:06:32,990
more information about that so they're

00:06:30,030 --> 00:06:36,120
definitely looking for feedback on that

00:06:32,990 --> 00:06:39,660
excitingly garden windows has announced

00:06:36,120 --> 00:06:40,479
support compatibility for Diego cells

00:06:39,660 --> 00:06:42,999
that are based on

00:06:40,479 --> 00:06:44,979
windows 2019 which is the next long-term

00:06:42,999 --> 00:06:48,340
support version of Windows and that's

00:06:44,979 --> 00:06:51,370
gonna unblock some more refinements

00:06:48,340 --> 00:06:52,990
around the windows container operations

00:06:51,370 --> 00:06:56,499
so I think we'll finally be able to get

00:06:52,990 --> 00:06:58,300
decent controlled shutdown of app

00:06:56,499 --> 00:07:00,580
containers on Windows which has been a

00:06:58,300 --> 00:07:05,199
little bit of a feature gap compared to

00:07:00,580 --> 00:07:08,229
Linux one thing that the Diego team has

00:07:05,199 --> 00:07:10,259
worked on is some refinements around how

00:07:08,229 --> 00:07:13,599
the locket component consumes database

00:07:10,259 --> 00:07:15,550
connections so it along with some of the

00:07:13,599 --> 00:07:17,259
other CF components can be a little bit

00:07:15,550 --> 00:07:20,229
greedy about those database connections

00:07:17,259 --> 00:07:22,689
and so there's some improved tuning on

00:07:20,229 --> 00:07:25,060
those that should let them drop those

00:07:22,689 --> 00:07:27,550
especially if there's contention at the

00:07:25,060 --> 00:07:28,960
shared database and then I know that

00:07:27,550 --> 00:07:30,729
ireenie team has been working through

00:07:28,960 --> 00:07:31,990
some other milestones they've been

00:07:30,729 --> 00:07:33,699
making some improvements to their

00:07:31,990 --> 00:07:35,649
initial version of running staging tasks

00:07:33,699 --> 00:07:38,110
natively on the back in kubernetes

00:07:35,649 --> 00:07:40,529
cluster and they're also completing

00:07:38,110 --> 00:07:42,610
their transition towards CFM x FS 3

00:07:40,529 --> 00:07:44,080
that's again been a little bit

00:07:42,610 --> 00:07:49,149
complicated with how they run staging

00:07:44,080 --> 00:07:52,839
tasks excellent thank you Eric very nice

00:07:49,149 --> 00:07:55,029
one down any questions quickly except

00:07:52,839 --> 00:07:55,870
about the side cards because you're

00:07:55,029 --> 00:08:03,969
gonna see it later

00:07:55,870 --> 00:08:05,800
yeah any other questions - okay well we

00:08:03,969 --> 00:08:07,930
move on to Bach and actually it's a

00:08:05,800 --> 00:08:11,849
great pleasure to welcome Mukesh I'm

00:08:07,930 --> 00:08:11,849
hoping that bouncing the name correctly

00:08:11,999 --> 00:08:27,129
- yes sure

00:08:20,819 --> 00:08:31,029
yeah so I Mukesh I like dark mass I've

00:08:27,129 --> 00:08:33,909
been with for about two years I joined

00:08:31,029 --> 00:08:36,490
the watch team a few months ago and I

00:08:33,909 --> 00:08:38,409
join it at the time when we like the

00:08:36,490 --> 00:08:41,380
team into a tube

00:08:38,409 --> 00:08:44,800
one is watch detector and that's the

00:08:41,380 --> 00:08:47,290
team that Morgan piense and I'm hearing

00:08:44,800 --> 00:08:51,399
the bar systems team the bar assistance

00:08:47,290 --> 00:08:51,890
team looks at stem cells DNS and OS font

00:08:51,399 --> 00:08:54,100
release

00:08:51,890 --> 00:08:55,779
[Music]

00:08:54,100 --> 00:08:58,060
so Mario is actually not here so I'm

00:08:55,779 --> 00:09:05,259
gonna fill in for him and you know share

00:08:58,060 --> 00:09:09,940
is a place on the director side we

00:09:05,259 --> 00:09:12,759
release two six nine oh one that 269

00:09:09,940 --> 00:09:17,050
release itself has the major feature of

00:09:12,759 --> 00:09:20,279
a priest staff of priests top life cycle

00:09:17,050 --> 00:09:24,009
book that's actually aimed at improving

00:09:20,279 --> 00:09:25,569
you know how the drain happens so you

00:09:24,009 --> 00:09:28,600
know increase you all to take a look at

00:09:25,569 --> 00:09:33,130
it something that we worked on use

00:09:28,600 --> 00:09:35,709
oculus can take advantage you know other

00:09:33,130 --> 00:09:37,839
minor things we added a exported from

00:09:35,709 --> 00:09:40,269
section in the release manifest to be

00:09:37,839 --> 00:09:41,889
more explicit about the stem cell in the

00:09:40,269 --> 00:09:45,959
version that the release compiled

00:09:41,889 --> 00:09:48,779
against specifically modified news this

00:09:45,959 --> 00:09:51,940
the OpenStack CPR team added a

00:09:48,779 --> 00:09:55,509
resurrection functionality we are

00:09:51,940 --> 00:09:58,180
starting to the director team is

00:09:55,509 --> 00:10:00,730
starting to make improvements on how the

00:09:58,180 --> 00:10:05,019
marsh starts stop the kick commands work

00:10:00,730 --> 00:10:07,480
in a way that in past you know like

00:10:05,019 --> 00:10:10,689
wingless commands have often surprised

00:10:07,480 --> 00:10:15,040
the user it turns off how they act the

00:10:10,689 --> 00:10:16,720
impact that it makes so you know trying

00:10:15,040 --> 00:10:18,459
to you know step back and look at the

00:10:16,720 --> 00:10:21,939
user experience and make improvements on

00:10:18,459 --> 00:10:26,290
that part and then finally working under

00:10:21,939 --> 00:10:28,240
going to support for even manifest if

00:10:26,290 --> 00:10:31,230
you have any of if you have questions on

00:10:28,240 --> 00:10:34,480
the direction part I'd encourage you to

00:10:31,230 --> 00:10:37,209
March PMC meeting we started doing at

00:10:34,480 --> 00:10:39,850
about three months ago the next one is

00:10:37,209 --> 00:10:42,399
actually tomorrow at the idea that's the

00:10:39,850 --> 00:10:46,089
direction update the systems update the

00:10:42,399 --> 00:10:50,319
team that IPM we could have 111 DNS

00:10:46,089 --> 00:10:54,130
release it's been three weeks ago and it

00:10:50,319 --> 00:10:57,279
has a support for our job link elderness

00:10:54,130 --> 00:11:00,610
you can find the details on what exactly

00:10:57,279 --> 00:11:04,750
it means and how to use it in a link

00:11:00,610 --> 00:11:07,380
that I have it here which is a Tzadik

00:11:04,750 --> 00:11:09,939
see on what the solution looks like

00:11:07,380 --> 00:11:13,510
excitingly we also put a new xenial

00:11:09,939 --> 00:11:16,510
sense alliance even we just need it if

00:11:13,510 --> 00:11:23,050
you want to take advantage of the 269

00:11:16,510 --> 00:11:25,540
which has a restart lifecycle other two

00:11:23,050 --> 00:11:27,250
things that you know we're exploding one

00:11:25,540 --> 00:11:31,660
is the quality in progress is

00:11:27,250 --> 00:11:35,139
explanation bionic stem cell you know

00:11:31,660 --> 00:11:37,120
xenial is still supported I think you

00:11:35,139 --> 00:11:40,000
know at least couple years ago a couple

00:11:37,120 --> 00:11:43,600
years like 2021 but you know we're just

00:11:40,000 --> 00:11:46,199
being looking at supporting bionics

00:11:43,600 --> 00:11:51,579
since that's been out for almost a year

00:11:46,199 --> 00:11:54,279
and last one so we're trying to make the

00:11:51,579 --> 00:11:57,309
whole you know getting the clearance of

00:11:54,279 --> 00:11:59,019
VM and so one of the last fear that we

00:11:57,309 --> 00:12:02,079
actually haven't be invited lock stored

00:11:59,019 --> 00:12:05,920
credentials and you know our friends in

00:12:02,079 --> 00:12:07,720
Cappy did a similar explanation and now

00:12:05,920 --> 00:12:10,449
they actually have a three sign URL for

00:12:07,720 --> 00:12:15,370
lobsters which means that we'll need for

00:12:10,449 --> 00:12:17,649
threat for Asian or you know on the VM

00:12:15,370 --> 00:12:19,500
to access the lobster so that's

00:12:17,649 --> 00:12:24,699
something I'm getting actively explored

00:12:19,500 --> 00:12:26,290
and that's it for the update here I

00:12:24,699 --> 00:12:29,740
think there's a couple people that may

00:12:26,290 --> 00:12:30,370
want to go a nude pic more cool let me

00:12:29,740 --> 00:12:33,250
say it

00:12:30,370 --> 00:12:35,740
I just put my boom down and you're

00:12:33,250 --> 00:12:49,329
already trying to blame me ask my gosh a

00:12:35,740 --> 00:12:55,829
question I feel attacked I was also on

00:12:49,329 --> 00:12:59,319
my is a key yes this is the first time

00:12:55,829 --> 00:13:01,389
No No thank you thank you for joining is

00:12:59,319 --> 00:13:03,850
actually marriage where IBM

00:13:01,389 --> 00:13:06,759
I'm picking on into it's because I'm

00:13:03,850 --> 00:13:09,819
good and I could see that some people

00:13:06,759 --> 00:13:14,589
were not muted all right so I think it's

00:13:09,819 --> 00:13:17,150
better now thank you for can I just

00:13:14,589 --> 00:13:20,980
mention that we're excited to be working

00:13:17,150 --> 00:13:24,080
Mukesh pretty soon on Bionic stem cells

00:13:20,980 --> 00:13:27,040
whoa we are excited to get to OpenSSL

00:13:24,080 --> 00:13:30,350
1.2 or whatever it is

00:13:27,040 --> 00:13:32,270
11.1 yeah that thing that is better so

00:13:30,350 --> 00:13:33,710
just wanted to throw that in there

00:13:32,270 --> 00:13:35,060
because I think we might be the first

00:13:33,710 --> 00:13:38,510
ones to actually try something

00:13:35,060 --> 00:13:44,540
courageous and dangerous yesterday we're

00:13:38,510 --> 00:13:49,210
doing trusty okay excellent any question

00:13:44,540 --> 00:13:49,210
for Bosch or okay

00:13:51,250 --> 00:13:54,250
okay

00:13:55,930 --> 00:14:00,520
yeah it could have been coming from the

00:13:57,700 --> 00:14:04,000
speaker's mic sorry about that alright

00:14:00,520 --> 00:14:05,770
so I think the folks from serviceable

00:14:04,000 --> 00:14:07,900
for API and I'm not hearing anything

00:14:05,770 --> 00:14:09,220
back so at some point we'll have to

00:14:07,900 --> 00:14:12,940
figure out if you want to just remove

00:14:09,220 --> 00:14:16,180
them here or figure info fine who can

00:14:12,940 --> 00:14:17,589
give us an update on service because it

00:14:16,180 --> 00:14:20,040
certainly an important part of our

00:14:17,589 --> 00:14:25,420
foundry but we have not heard from them

00:14:20,040 --> 00:14:26,950
forever so it's a to do on me and maybe

00:14:25,420 --> 00:14:28,600
suona if you can help me on this that

00:14:26,950 --> 00:14:31,120
would be greatly appreciated just

00:14:28,600 --> 00:14:35,260
because I have limited reach in terms of

00:14:31,120 --> 00:14:37,810
who I can contact oh I know but I did

00:14:35,260 --> 00:14:40,779
ping Doug Davis for my the end I'll

00:14:37,810 --> 00:14:45,960
figure out who needs our IBM this will

00:14:40,779 --> 00:14:50,410
be replacing as well alright thank you

00:14:45,960 --> 00:14:54,400
for extensions there's a few updates so

00:14:50,410 --> 00:14:57,640
the apple is killer is now is Travis UI

00:14:54,400 --> 00:15:00,459
extension this fits into the

00:14:57,640 --> 00:15:02,230
stratosphere of having extension so you

00:15:00,459 --> 00:15:04,330
could add different tabs so if you

00:15:02,230 --> 00:15:06,580
haven't looked at the over and you may

00:15:04,330 --> 00:15:08,860
want to check it out and it also they

00:15:06,580 --> 00:15:11,560
added a bunch of different features like

00:15:08,860 --> 00:15:16,480
metrics and Prometheus health in points

00:15:11,560 --> 00:15:20,220
and so on Stratos itself is at version 2

00:15:16,480 --> 00:15:23,110
for 0 and you're looking for new updates

00:15:20,220 --> 00:15:26,290
you know kind of new features and I've

00:15:23,110 --> 00:15:28,660
been chatting with them so we'll I guess

00:15:26,290 --> 00:15:30,339
maybe hopefully next next week next time

00:15:28,660 --> 00:15:33,100
we can have an idea of what they're

00:15:30,339 --> 00:15:35,470
doing the abacus project is getting to

00:15:33,100 --> 00:15:37,900
some in of life and the team is working

00:15:35,470 --> 00:15:39,820
on a blog post on you know essentially

00:15:37,900 --> 00:15:41,650
you know if you want to take it forward

00:15:39,820 --> 00:15:45,070
or if you if you're still using it

00:15:41,650 --> 00:15:47,080
that's what you want to do it's a bit

00:15:45,070 --> 00:15:48,790
disappointing in terms of having that

00:15:47,080 --> 00:15:50,920
happen but the code is still there and

00:15:48,790 --> 00:15:52,810
there might be some people using it so

00:15:50,920 --> 00:15:55,870
we'll see if somebody else wants to take

00:15:52,810 --> 00:15:58,529
it over the SAV team plans to do they

00:15:55,870 --> 00:16:01,720
are essentially your proprietary version

00:15:58,529 --> 00:16:06,370
so this is a case of you know it didn't

00:16:01,720 --> 00:16:08,380
work out to have a public I guess

00:16:06,370 --> 00:16:11,830
project that

00:16:08,380 --> 00:16:15,730
metering cal-poly Rapids at this point

00:16:11,830 --> 00:16:17,950
maybe maybe all come up and in order

00:16:15,730 --> 00:16:21,160
than that the rest didn't have any

00:16:17,950 --> 00:16:23,230
updates that's that's where we are

00:16:21,160 --> 00:16:26,610
let's see if we have any questions on

00:16:23,230 --> 00:16:26,610
anything so far

00:16:27,680 --> 00:16:29,740
you

00:16:30,739 --> 00:16:36,720
okay somebody pick me for my parents dog

00:16:34,220 --> 00:16:40,379
telling me who I should think next time

00:16:36,720 --> 00:16:43,949
so and I know who he is so I will have

00:16:40,379 --> 00:16:47,689
somebody or next gavel bit for Chevy's

00:16:43,949 --> 00:16:51,419
Baba Yaga's okay so I don't see any any

00:16:47,689 --> 00:16:55,169
questions or comments so we're gonna

00:16:51,419 --> 00:16:58,350
pass it to the three talks since the

00:16:55,169 --> 00:17:00,329
Comcast team has to talk together let's

00:16:58,350 --> 00:17:02,579
put them towards the answer that way

00:17:00,329 --> 00:17:05,669
they can decide how you want to use the

00:17:02,579 --> 00:17:09,809
rest of the time so we'll pass it to Tim

00:17:05,669 --> 00:17:11,760
Downey and Scott see cell form pivotal

00:17:09,809 --> 00:17:14,039
who is gonna give us an update on

00:17:11,760 --> 00:17:16,789
sidecar its full-time Congress so very

00:17:14,039 --> 00:17:22,079
excited if you want to share your screen

00:17:16,789 --> 00:17:26,839
great yeah thanks dr. max hi I'm Scott

00:17:22,079 --> 00:17:30,240
sisal and the kepi p.m. from pivotal and

00:17:26,839 --> 00:17:31,380
I've been on the kepi for about since

00:17:30,240 --> 00:17:34,019
the beginning of the year before that I

00:17:31,380 --> 00:17:37,830
was working on build packs and CF dev

00:17:34,019 --> 00:17:40,559
and some some other local dev tools so

00:17:37,830 --> 00:17:44,850
yeah so we really sidecars a sidecar

00:17:40,559 --> 00:17:47,010
support for maybe about four to six

00:17:44,850 --> 00:17:50,220
weeks ago and it's an early alpha

00:17:47,010 --> 00:17:53,820
version of the feature and really with

00:17:50,220 --> 00:17:55,500
the the reusing we kind of focused on

00:17:53,820 --> 00:17:58,169
adding this this type of functionality

00:17:55,500 --> 00:18:02,639
to the platform is we had a lot of users

00:17:58,169 --> 00:18:05,549
asking us if they could be able if they

00:18:02,639 --> 00:18:07,620
were able to run a process alongside

00:18:05,549 --> 00:18:09,350
their main application but had the

00:18:07,620 --> 00:18:12,269
flexibility of deploying independently

00:18:09,350 --> 00:18:16,139
but also have the ability to communicate

00:18:12,269 --> 00:18:18,450
over on the same network namespace or

00:18:16,139 --> 00:18:19,710
share the same file system and it has

00:18:18,450 --> 00:18:21,269
something that's interdependent with the

00:18:19,710 --> 00:18:22,649
main web process that they're the main

00:18:21,269 --> 00:18:25,710
process that they're they're attaching

00:18:22,649 --> 00:18:27,149
to so this really kind of a fittin a

00:18:25,710 --> 00:18:29,730
sweet spot of sidecar support and we're

00:18:27,149 --> 00:18:31,950
actually had it some users who were

00:18:29,730 --> 00:18:34,409
switching off of the platform because we

00:18:31,950 --> 00:18:36,960
they were unable to to run their site

00:18:34,409 --> 00:18:39,299
car depend on on Cloud Foundry and since

00:18:36,960 --> 00:18:40,500
we've released this this feature we've

00:18:39,299 --> 00:18:41,879
been happy to see that people were

00:18:40,500 --> 00:18:43,110
coming back and moving those but those

00:18:41,879 --> 00:18:44,040
some of those workloads back under clear

00:18:43,110 --> 00:18:47,310
boundary which is always

00:18:44,040 --> 00:18:50,820
she's always good so this demo that I'm

00:18:47,310 --> 00:18:52,860
gonna go to show today is focuses on

00:18:50,820 --> 00:18:56,100
deploying a configuration server

00:18:52,860 --> 00:18:57,750
alongside your main web process and the

00:18:56,100 --> 00:18:59,610
script that I'm going through is already

00:18:57,750 --> 00:19:01,050
pushed it on the Cloud Foundry blog so

00:18:59,610 --> 00:19:04,200
if you want to either follow along or

00:19:01,050 --> 00:19:06,060
well or see this and run through this

00:19:04,200 --> 00:19:10,710
afterwards all that material will be

00:19:06,060 --> 00:19:15,540
located there alright so let me jump in

00:19:10,710 --> 00:19:19,140
here so so we'll start here what we'll

00:19:15,540 --> 00:19:22,530
do is actually just create an app for

00:19:19,140 --> 00:19:30,360
this github repo that I pulled in here

00:19:22,530 --> 00:19:33,800
so this is just a what my bad so if you

00:19:30,360 --> 00:19:37,830
go into here everyone see this alright

00:19:33,800 --> 00:19:40,920
we have a application here that's just a

00:19:37,830 --> 00:19:44,670
basic Ruby Sinatra app that calls out to

00:19:40,920 --> 00:19:48,990
a separate config server it's a go

00:19:44,670 --> 00:19:50,640
binary that is managed independently at

00:19:48,990 --> 00:19:53,730
the platform but then we we pull it into

00:19:50,640 --> 00:19:55,080
to this app as a compiled go binary that

00:19:53,730 --> 00:19:56,760
we can then include with our app and

00:19:55,080 --> 00:19:59,910
deploy it and it runs independently as a

00:19:56,760 --> 00:20:03,090
side as a sidecar so first step here is

00:19:59,910 --> 00:20:06,330
I'm going to go through and create my

00:20:03,090 --> 00:20:08,760
application using the v3 create app CLI

00:20:06,330 --> 00:20:13,620
command so just create kind of the

00:20:08,760 --> 00:20:15,780
application on Cloud Foundry and then as

00:20:13,620 --> 00:20:17,460
you can see here what we this in the

00:20:15,780 --> 00:20:20,310
current stage of this applicator or of

00:20:17,460 --> 00:20:22,980
this feature you are able to push the

00:20:20,310 --> 00:20:27,300
sidecar via the app manifest so let me

00:20:22,980 --> 00:20:33,620
show you the manifest here that we're

00:20:27,300 --> 00:20:36,150
going to use out so you can see here

00:20:33,620 --> 00:20:38,040
there's a subsection here called

00:20:36,150 --> 00:20:39,990
sidecars that allows you to name your

00:20:38,040 --> 00:20:43,500
sidecar provide the name for it and

00:20:39,990 --> 00:20:45,570
allows you to attach it to the diffic

00:20:43,500 --> 00:20:47,670
processes that you want to run the

00:20:45,570 --> 00:20:50,040
sidecar along and it has a start command

00:20:47,670 --> 00:20:52,830
for the sidecar itself for this instance

00:20:50,040 --> 00:20:55,440
we are communicating over localhost /

00:20:52,830 --> 00:20:57,480
port 8080 - from the main web process

00:20:55,440 --> 00:21:00,120
out to the sidecar so we have the

00:20:57,480 --> 00:21:01,440
that config are the config server port

00:21:00,120 --> 00:21:05,279
listed here as well as an environment

00:21:01,440 --> 00:21:12,049
variable so if I go and now apply this

00:21:05,279 --> 00:21:12,049
manifest to the app that I just created

00:21:12,350 --> 00:21:17,340
this will set up the sidecar and all the

00:21:15,539 --> 00:21:24,520
information that's defined in the app

00:21:17,340 --> 00:21:27,120
manifest and now I will push the sidecar

00:21:24,520 --> 00:21:27,120
up

00:21:27,300 --> 00:21:37,680
that's to my CF so mmm as I wait for

00:21:34,650 --> 00:21:39,330
this to push so we're also since this is

00:21:37,680 --> 00:21:42,330
the early alpha version of this we are

00:21:39,330 --> 00:21:45,060
starting to get some feedback from from

00:21:42,330 --> 00:21:46,650
users and also starting to look at what

00:21:45,060 --> 00:21:49,500
the next set of features will look like

00:21:46,650 --> 00:21:51,600
for this so if you're interested in

00:21:49,500 --> 00:21:53,940
providing feedback on our current

00:21:51,600 --> 00:21:56,010
version of sidecars or you have other

00:21:53,940 --> 00:21:57,990
use cases in the future this you we

00:21:56,010 --> 00:22:00,780
don't support now that you want us to

00:21:57,990 --> 00:22:03,390
support please reach out to me or i'm on

00:22:00,780 --> 00:22:06,720
the or just reach out to the CF or a

00:22:03,390 --> 00:22:08,460
Cappy slack channel on CF we're more

00:22:06,720 --> 00:22:09,660
than happy to talk with with users or

00:22:08,460 --> 00:22:11,490
people in the community on how they'd

00:22:09,660 --> 00:22:12,860
like to see this feature evolve but

00:22:11,490 --> 00:22:15,540
right now we're looking at things like

00:22:12,860 --> 00:22:17,210
independent resource management making

00:22:15,540 --> 00:22:19,140
this deployable via build pack

00:22:17,210 --> 00:22:24,420
potentially running this in a separate

00:22:19,140 --> 00:22:25,950
container right now it runs as a a a in

00:22:24,420 --> 00:22:30,660
the same container as the main process

00:22:25,950 --> 00:22:35,310
and also the we're also looking at some

00:22:30,660 --> 00:22:37,560
other functionality as well so cool so

00:22:35,310 --> 00:22:42,500
in that sense to start it up I can show

00:22:37,560 --> 00:22:45,179
you the sidecar running if i ssh into

00:22:42,500 --> 00:22:47,719
the

00:22:45,179 --> 00:22:47,719
container

00:22:49,410 --> 00:22:57,510
processes cool so now you can see the

00:22:52,830 --> 00:22:59,900
site car running and also the rupee app

00:22:57,510 --> 00:22:59,900
itself

00:23:00,080 --> 00:23:03,190
yeah it's

00:23:04,420 --> 00:23:11,030
there you go cool

00:23:07,910 --> 00:23:15,429
and you can also see that it is

00:23:11,030 --> 00:23:17,630
listening on a separate porch as well

00:23:15,429 --> 00:23:20,809
see the port that it's listening to and

00:23:17,630 --> 00:23:24,890
then the ruby app is listening on that

00:23:20,809 --> 00:23:30,190
as well and if yeah I run

00:23:24,890 --> 00:23:33,970
navigate to the app that I created I

00:23:30,190 --> 00:23:33,970
find the URL

00:23:35,470 --> 00:23:47,050
you can see this the main Ruby up here

00:23:44,080 --> 00:23:51,460
and then if I go for demo purposes we

00:23:47,050 --> 00:23:54,390
put a and then point to show the configs

00:23:51,460 --> 00:23:56,470
actually coming from the psycho process

00:23:54,390 --> 00:24:01,900
so you can see the configs that are

00:23:56,470 --> 00:24:05,010
coming over and now you can also see

00:24:01,900 --> 00:24:05,010
when I run

00:24:07,760 --> 00:24:14,679
CF law

00:24:09,590 --> 00:24:14,679
on this you can see when I

00:24:15,940 --> 00:24:21,090
you

00:24:17,889 --> 00:24:21,090
hit the app

00:24:22,380 --> 00:24:28,540
you can see the we have an out now for

00:24:26,230 --> 00:24:31,540
not only the side car that's being hit

00:24:28,540 --> 00:24:32,830
but then the web process itself so we

00:24:31,540 --> 00:24:34,510
were able to kind of tag things

00:24:32,830 --> 00:24:36,070
independently so you can actually see

00:24:34,510 --> 00:24:38,690
what traffic is going to the sidecar and

00:24:36,070 --> 00:24:41,539
what's going to the main web process

00:24:38,690 --> 00:24:47,299
and then additionally what we have here

00:24:41,539 --> 00:24:49,309
is we do allow with the sidecar feature

00:24:47,299 --> 00:24:52,519
when the main app with a sidecar app

00:24:49,309 --> 00:24:55,729
goes down Diego Auto restarts it so you

00:24:52,519 --> 00:24:58,190
are able to keep the apps healthy

00:24:55,729 --> 00:25:02,479
sidecar and main app self itself so if I

00:24:58,190 --> 00:25:04,999
run I kill the config server you can see

00:25:02,479 --> 00:25:07,690
it start run down and then automatically

00:25:04,999 --> 00:25:07,690
start back up

00:25:08,370 --> 00:25:15,630
cool awesome so that's

00:25:12,870 --> 00:25:18,450
I have four here are there any questions

00:25:15,630 --> 00:25:19,800
for me or for Tim Downey who's our

00:25:18,450 --> 00:25:22,640
anchor can probably handle some of the

00:25:19,800 --> 00:25:22,640
more technical questions

00:25:24,220 --> 00:25:29,460
yeah

00:25:26,160 --> 00:25:31,590
can can a sidecar application can it be

00:25:29,460 --> 00:25:36,470
a short-lived process or does it have to

00:25:31,590 --> 00:25:36,470
run you know be constantly running oh

00:25:36,860 --> 00:25:43,169
yeah with uh with what we have currently

00:25:40,220 --> 00:25:48,299
they have to be a long live long live

00:25:43,169 --> 00:25:51,690
processes so they they set up like a pit

00:25:48,299 --> 00:25:53,160
health check with Diego and if that pit

00:25:51,690 --> 00:25:55,919
ever goes down then Diego will

00:25:53,160 --> 00:26:00,059
reschedule the container but we we have

00:25:55,919 --> 00:26:01,070
gotten some feedback around like making

00:26:00,059 --> 00:26:03,360
a distinction between like

00:26:01,070 --> 00:26:14,690
initialization sidecars and these long

00:26:03,360 --> 00:26:18,390
long-lived ones awesome anything else I

00:26:14,690 --> 00:26:19,500
have a couple questions so one I'm not

00:26:18,390 --> 00:26:22,530
sure if you mentioned this you can have

00:26:19,500 --> 00:26:24,750
more than one cycle yeah so you can run

00:26:22,530 --> 00:26:28,380
as many side cars as as you would like

00:26:24,750 --> 00:26:29,970
you can attach them to multiple single

00:26:28,380 --> 00:26:31,559
side car to the multiple processes

00:26:29,970 --> 00:26:35,070
that'll be deploys a side car for each

00:26:31,559 --> 00:26:39,780
of those processes so you kind of showed

00:26:35,070 --> 00:26:41,460
and the app manifest for the processes

00:26:39,780 --> 00:26:43,770
that you list out that's just a comma

00:26:41,460 --> 00:26:45,390
delimited list so I could add it that

00:26:43,770 --> 00:26:46,919
multiple processes running I could just

00:26:45,390 --> 00:26:48,750
put all those processes that I wanted to

00:26:46,919 --> 00:26:50,610
attach it to or if I wanted to deploy

00:26:48,750 --> 00:26:53,159
multiple side cars I can just add more

00:26:50,610 --> 00:26:57,150
to that list and there yeah manifest

00:26:53,159 --> 00:27:00,059
cool and when you do a CF scale the

00:26:57,150 --> 00:27:03,210
scaling creates a new version of your

00:27:00,059 --> 00:27:05,220
application also a new sidecar right yes

00:27:03,210 --> 00:27:07,890
and right now they're not independently

00:27:05,220 --> 00:27:09,470
scalable they're they scale together but

00:27:07,890 --> 00:27:11,400
in the future we're looking at making

00:27:09,470 --> 00:27:14,720
resource resource constraints and

00:27:11,400 --> 00:27:16,460
scaling independent

00:27:14,720 --> 00:27:19,580
I see so you'd be able to increase

00:27:16,460 --> 00:27:22,190
memory for the sidecar by itself yeah

00:27:19,580 --> 00:27:24,799
we're currently validating if that's a

00:27:22,190 --> 00:27:26,960
big user paying for people I see but

00:27:24,799 --> 00:27:31,220
right now it would share whatever

00:27:26,960 --> 00:27:31,580
resource correct yeah cool one more

00:27:31,220 --> 00:27:34,580
question

00:27:31,580 --> 00:27:37,340
which and I guess this is more of a to

00:27:34,580 --> 00:27:39,860
give people ideas what what you use

00:27:37,340 --> 00:27:42,799
cases you guys have heard from the

00:27:39,860 --> 00:27:45,169
different current users that they could

00:27:42,799 --> 00:27:48,110
not do without this this new feature

00:27:45,169 --> 00:27:49,640
this I Club feature yeah so like this

00:27:48,110 --> 00:27:51,260
instance of like a config server is a

00:27:49,640 --> 00:27:53,740
pretty big one so being able to keep

00:27:51,260 --> 00:27:58,340
credentials independent of a main app

00:27:53,740 --> 00:28:00,620
and then also using kind of like as a

00:27:58,340 --> 00:28:02,110
kind of a proxy to intercept a request

00:28:00,620 --> 00:28:04,610
to an app and run some type of

00:28:02,110 --> 00:28:06,230
processing around that it's very similar

00:28:04,610 --> 00:28:08,240
to kind of the Envoy case as well but

00:28:06,230 --> 00:28:09,770
it's something that people would have a

00:28:08,240 --> 00:28:14,360
little bit more configuration over via

00:28:09,770 --> 00:28:15,890
the app experience and I think of some

00:28:14,360 --> 00:28:19,190
other things that we've heard another

00:28:15,890 --> 00:28:20,630
thing specifically like APM agents

00:28:19,190 --> 00:28:22,549
running alongside instead of having to

00:28:20,630 --> 00:28:24,140
be deployed and being dependent in your

00:28:22,549 --> 00:28:27,230
application itself be the build back it

00:28:24,140 --> 00:28:28,190
can be managed independently Tim are

00:28:27,230 --> 00:28:32,600
there any other ones that you can

00:28:28,190 --> 00:28:36,409
remember those are the three big ones

00:28:32,600 --> 00:28:39,950
that I was thinking of definitely the

00:28:36,409 --> 00:28:41,510
config server one where where folks

00:28:39,950 --> 00:28:43,820
would like not to have to make changes

00:28:41,510 --> 00:28:46,520
to their app code and just like slap on

00:28:43,820 --> 00:28:50,960
their their binary across all their apps

00:28:46,520 --> 00:28:53,360
that's a big excuse cool exercise I'm

00:28:50,960 --> 00:28:55,669
sure you'll go because that community of

00:28:53,360 --> 00:28:57,650
psych wards and kubernetes has been very

00:28:55,669 --> 00:29:00,500
vibrant and at least people using it

00:28:57,650 --> 00:29:01,669
right so that's good so having this in

00:29:00,500 --> 00:29:07,760
calendar is fantastic

00:29:01,669 --> 00:29:09,110
ok equation so on a on a memory

00:29:07,760 --> 00:29:11,419
management because it is running on the

00:29:09,110 --> 00:29:13,039
same container and you're saying just

00:29:11,419 --> 00:29:16,240
you know swap another another process

00:29:13,039 --> 00:29:20,480
there so they now compete for the same

00:29:16,240 --> 00:29:22,990
memory and if Java build path calculates

00:29:20,480 --> 00:29:27,110
memory for Java that might be a problem

00:29:22,990 --> 00:29:30,619
do you think about the future how to

00:29:27,110 --> 00:29:31,970
change that yeah we're looking at making

00:29:30,619 --> 00:29:34,100
this deploy poll potential in a

00:29:31,970 --> 00:29:35,960
standalone container for that Britain

00:29:34,100 --> 00:29:39,470
dependent scaling independent resource

00:29:35,960 --> 00:29:41,570
management and also security reasons as

00:29:39,470 --> 00:29:43,489
well yeah those people who want to have

00:29:41,570 --> 00:29:45,499
like constrict isolation from the main

00:29:43,489 --> 00:29:47,210
web process for things like this per

00:29:45,499 --> 00:29:48,919
credential management things like that

00:29:47,210 --> 00:29:51,169
so that's one of the ways we're looking

00:29:48,919 --> 00:29:55,610
at solving this yeah and also having

00:29:51,169 --> 00:29:56,059
different build parks is a Canadian all

00:29:55,610 --> 00:29:59,450
right cool

00:29:56,059 --> 00:30:01,730
Thanks excellent

00:29:59,450 --> 00:30:06,889
any other questions that's that's cool I

00:30:01,730 --> 00:30:07,999
guess okay well thank you Tim and Scott

00:30:06,889 --> 00:30:10,399
this was great

00:30:07,999 --> 00:30:13,820
short and sweet that beautiful thank you

00:30:10,399 --> 00:30:15,769
so much yeah just okay so I guess Sergei

00:30:13,820 --> 00:30:19,749
you want to introduce your team and the

00:30:15,769 --> 00:30:19,749
different projects that you talked about

00:30:19,989 --> 00:30:29,570
yep so Sergei Naryshkin from Comcast

00:30:24,950 --> 00:30:32,720
and we are big company we is a lot of

00:30:29,570 --> 00:30:36,679
cloud foundry foundations to be some

00:30:32,720 --> 00:30:41,600
gross pain that we came through and we

00:30:36,679 --> 00:30:43,369
are investing and in connecting in a

00:30:41,600 --> 00:30:45,080
creating an environment where people can

00:30:43,369 --> 00:30:49,309
deploy the application multiple

00:30:45,080 --> 00:30:52,039
foundations and you know have more

00:30:49,309 --> 00:30:55,999
enterprise rather than rather than run

00:30:52,039 --> 00:30:58,009
on a single one and we have a couple of

00:30:55,999 --> 00:31:01,399
projects that we wanted to present to

00:30:58,009 --> 00:31:03,320
you guys they are on a initial stage and

00:31:01,399 --> 00:31:05,509
so they are not really mature not ready

00:31:03,320 --> 00:31:07,879
for primetime production but you would

00:31:05,509 --> 00:31:12,039
like to introduce and maybe get feedback

00:31:07,879 --> 00:31:18,889
and any ideas on a collaboration and

00:31:12,039 --> 00:31:21,769
from this point and I want to pass to

00:31:18,889 --> 00:31:28,369
Adam and Adam will talk about the first

00:31:21,769 --> 00:31:31,249
project and then get to two to second

00:31:28,369 --> 00:31:33,680
one all right Adam can you take control

00:31:31,249 --> 00:31:35,240
sure Thank You Sergei

00:31:33,680 --> 00:31:36,920
okay so the first thing we're going to

00:31:35,240 --> 00:31:39,700
talk about I'm going to talk about is

00:31:36,920 --> 00:31:41,810
Cloud Foundry and secret management and

00:31:39,700 --> 00:31:42,200
we want to talk about it here with you

00:31:41,810 --> 00:31:44,720
all

00:31:42,200 --> 00:31:46,310
so that Cloud Foundry app developers in

00:31:44,720 --> 00:31:48,830
the future don't have to talk about it

00:31:46,310 --> 00:31:51,950
don't have to worry about it and so what

00:31:48,830 --> 00:31:53,600
do I mean by secret management that's so

00:31:51,950 --> 00:31:57,170
secret management is when you need to

00:31:53,600 --> 00:31:59,740
store access or distribute secrets a

00:31:57,170 --> 00:32:01,790
secret being a token a password

00:31:59,740 --> 00:32:04,850
credential anything that needs to be

00:32:01,790 --> 00:32:07,040
private so as an example of Cloud

00:32:04,850 --> 00:32:09,050
Foundry application that might need a

00:32:07,040 --> 00:32:12,200
password in order to access the database

00:32:09,050 --> 00:32:16,460
so the means by which that app gets that

00:32:12,200 --> 00:32:20,360
password is secret management and so our

00:32:16,460 --> 00:32:22,160
goal is is is we'd like to make secret

00:32:20,360 --> 00:32:25,010
management really really easy for Cloud

00:32:22,160 --> 00:32:27,250
Foundry applications by getting rid of a

00:32:25,010 --> 00:32:30,050
lot of the complexity that exists today

00:32:27,250 --> 00:32:32,840
and still but still maintain a high

00:32:30,050 --> 00:32:35,000
level of security so ideally a napkin

00:32:32,840 --> 00:32:38,720
care and know as little as possible

00:32:35,000 --> 00:32:40,280
about how it gets its secrets and it's

00:32:38,720 --> 00:32:42,650
worth mentioning that other platforms

00:32:40,280 --> 00:32:44,180
like kubernetes they've come up with

00:32:42,650 --> 00:32:45,920
some nice relations to this sort of

00:32:44,180 --> 00:32:49,970
problem and we'd like to replicate that

00:32:45,920 --> 00:32:52,090
in 500 so the good news is that a lot of

00:32:49,970 --> 00:32:54,620
the technologies already exists

00:32:52,090 --> 00:32:56,630
obviously Cloud Foundry is awesome and

00:32:54,620 --> 00:32:58,370
orts great and there's this other

00:32:56,630 --> 00:33:00,680
project called vaults that also is

00:32:58,370 --> 00:33:06,020
really great and we'd like to build upon

00:33:00,680 --> 00:33:07,630
those two technologies and so briefly in

00:33:06,020 --> 00:33:11,120
case you're not familiar with it fault

00:33:07,630 --> 00:33:13,070
it's an open source project and within

00:33:11,120 --> 00:33:15,080
your within your organization it can act

00:33:13,070 --> 00:33:17,810
as a central store for all of your

00:33:15,080 --> 00:33:20,120
secrets you can sort of think of it as a

00:33:17,810 --> 00:33:23,030
key value database but with a lot more

00:33:20,120 --> 00:33:24,740
tools and functionalities built around

00:33:23,030 --> 00:33:28,610
it that make it ideal for secret

00:33:24,740 --> 00:33:30,260
management there's also a lot of client

00:33:28,610 --> 00:33:33,080
libraries that already exist for a vault

00:33:30,260 --> 00:33:35,510
in many different languages and there's

00:33:33,080 --> 00:33:37,790
even frameworks like spring boot that

00:33:35,510 --> 00:33:39,890
are aware of fault

00:33:37,790 --> 00:33:42,530
so vault is great and it gets as close

00:33:39,890 --> 00:33:47,360
to this this goal of easy secret

00:33:42,530 --> 00:33:49,940
management so

00:33:47,360 --> 00:33:53,120
a Cloud Foundry app can use vault in a

00:33:49,940 --> 00:33:56,150
couple different ways one of the ways is

00:33:53,120 --> 00:33:58,760
to use the vault service broker so this

00:33:56,150 --> 00:34:01,940
already exists today and this can work

00:33:58,760 --> 00:34:03,289
depending on your use case but at least

00:34:01,940 --> 00:34:05,750
here in Comcast we've run into some

00:34:03,289 --> 00:34:07,429
serious limitations and issues which

00:34:05,750 --> 00:34:11,389
would prevent us from may be able to use

00:34:07,429 --> 00:34:13,520
it like we would like to the other way

00:34:11,389 --> 00:34:15,770
that you can use vaults from Cloud

00:34:13,520 --> 00:34:17,090
Foundry is just your have your Cloud

00:34:15,770 --> 00:34:19,010
Foundry use one of those client

00:34:17,090 --> 00:34:23,119
libraries and communicate directly with

00:34:19,010 --> 00:34:24,919
vaults and this is right because you're

00:34:23,119 --> 00:34:27,109
not restricted by this intermediate

00:34:24,919 --> 00:34:29,000
proxy layer you can you're communicating

00:34:27,109 --> 00:34:33,080
with all directly so you can use all of

00:34:29,000 --> 00:34:36,800
false full features so that's great what

00:34:33,080 --> 00:34:39,440
what is the drawback or what's the

00:34:36,800 --> 00:34:41,840
problem so the the main problem that

00:34:39,440 --> 00:34:43,669
we've run into is when it comes time for

00:34:41,840 --> 00:34:49,129
your application to authenticate with

00:34:43,669 --> 00:34:51,230
vaults and if you think about it when

00:34:49,129 --> 00:34:53,119
you need to authenticate with vault you

00:34:51,230 --> 00:34:55,639
need to give vault the password in order

00:34:53,119 --> 00:34:57,170
to authenticate but the whole point of

00:34:55,639 --> 00:35:00,140
authenticating with waltz and using

00:34:57,170 --> 00:35:01,490
vault is to get all your passwords so

00:35:00,140 --> 00:35:04,580
you can get into this sort of a chicken

00:35:01,490 --> 00:35:06,619
and egg same scenario right and there's

00:35:04,580 --> 00:35:08,660
ways around that you can you can have

00:35:06,619 --> 00:35:12,130
whatever is deploying your app maybe

00:35:08,660 --> 00:35:14,839
your CI CD system you can have it inject

00:35:12,130 --> 00:35:18,560
this initial token that it needs into

00:35:14,839 --> 00:35:19,940
your app and then your app tune I'd

00:35:18,560 --> 00:35:23,000
start up it can authenticate itself

00:35:19,940 --> 00:35:24,470
against vault but that's not great

00:35:23,000 --> 00:35:26,900
because you're sort of just shifting the

00:35:24,470 --> 00:35:28,369
problem downwards now whatever is

00:35:26,900 --> 00:35:32,450
deploying your application it needs to

00:35:28,369 --> 00:35:34,250
know about vault which isn't you know is

00:35:32,450 --> 00:35:37,369
an ideal because now it really knows

00:35:34,250 --> 00:35:39,589
more about the overall system than it

00:35:37,369 --> 00:35:41,270
should and you have to extend security

00:35:39,589 --> 00:35:44,030
down to that level as well right because

00:35:41,270 --> 00:35:48,770
if it has access to vaults it has a

00:35:44,030 --> 00:35:50,150
higher level of access and so ideally

00:35:48,770 --> 00:35:51,710
we'd like to use vault but we'd like to

00:35:50,150 --> 00:35:53,470
just get rid of this authentication

00:35:51,710 --> 00:35:56,990
problem and this is really what we're

00:35:53,470 --> 00:35:58,760
what we're trying to solve and it's like

00:35:56,990 --> 00:35:59,390
I mentioned before there's other

00:35:58,760 --> 00:36:01,190
platform

00:35:59,390 --> 00:36:04,250
have come up with some nice relations to

00:36:01,190 --> 00:36:07,160
this problem so let's take a look at the

00:36:04,250 --> 00:36:09,010
kubernetes example and so what they have

00:36:07,160 --> 00:36:11,059
is a is a kubernetes fault

00:36:09,010 --> 00:36:13,339
authentication method and this is

00:36:11,059 --> 00:36:15,619
something that's built into vaults and

00:36:13,339 --> 00:36:18,950
and at a high level the way that it

00:36:15,619 --> 00:36:20,779
works is that a trust relationship is

00:36:18,950 --> 00:36:23,630
established between the kubernetes

00:36:20,779 --> 00:36:26,900
platform and vault and this is a this is

00:36:23,630 --> 00:36:29,809
a one-time operation but once that trust

00:36:26,900 --> 00:36:31,609
relationship has been established then

00:36:29,809 --> 00:36:33,950
for an application running inside of

00:36:31,609 --> 00:36:36,829
that kubernetes cluster it's really easy

00:36:33,950 --> 00:36:39,529
to authenticate with vault they an

00:36:36,829 --> 00:36:40,789
application will take a GWT token let's

00:36:39,529 --> 00:36:43,250
give into it automatically like

00:36:40,789 --> 00:36:45,619
kubernetes and give that DeVault and

00:36:43,250 --> 00:36:46,700
fault since since this trust

00:36:45,619 --> 00:36:49,250
relationship has already been

00:36:46,700 --> 00:36:51,769
established vault can say okay I know I

00:36:49,250 --> 00:36:53,210
know that this JWT token is valid I know

00:36:51,769 --> 00:36:58,640
that it's coming from this kubernetes

00:36:53,210 --> 00:37:00,769
platform and and I also know I know some

00:36:58,640 --> 00:37:03,260
things about this application and so I

00:37:00,769 --> 00:37:04,910
can apply I can not only authenticate

00:37:03,260 --> 00:37:07,490
you but I can apply these certain

00:37:04,910 --> 00:37:11,210
policies based on this knowledge that I

00:37:07,490 --> 00:37:13,339
have about the application so that's the

00:37:11,210 --> 00:37:15,559
kubernetes example and what we're

00:37:13,339 --> 00:37:17,750
proposing and what we'd like to do and

00:37:15,559 --> 00:37:19,990
what we started doing is to replicate

00:37:17,750 --> 00:37:23,029
this but in in the Cloud Foundry world

00:37:19,990 --> 00:37:25,539
and so we're working on is a Cloud

00:37:23,029 --> 00:37:29,089
Foundry fault authentication plugin and

00:37:25,539 --> 00:37:32,089
and at our level it's going to work in a

00:37:29,089 --> 00:37:34,309
really similar way a trust relationship

00:37:32,089 --> 00:37:36,920
will be established between Cloud

00:37:34,309 --> 00:37:38,559
Foundry in vault that's that's a

00:37:36,920 --> 00:37:43,190
one-time thing that needs to get done

00:37:38,559 --> 00:37:46,279
and and once that's done my laundry

00:37:43,190 --> 00:37:48,019
applications can then use these

00:37:46,279 --> 00:37:50,210
certificates that that Cloud Foundry

00:37:48,019 --> 00:37:54,019
provides it it can use those

00:37:50,210 --> 00:37:56,000
certificates present a JWT token to

00:37:54,019 --> 00:37:58,880
vaults and then vaults having

00:37:56,000 --> 00:38:02,569
established this trust relationship can

00:37:58,880 --> 00:38:04,369
then Ascenta kate the application so

00:38:02,569 --> 00:38:06,680
from from an applications perspective

00:38:04,369 --> 00:38:09,859
this is great right this is almost a

00:38:06,680 --> 00:38:12,380
keyless keyless system it makes it easy

00:38:09,859 --> 00:38:18,589
and secure for applications to

00:38:12,380 --> 00:38:20,690
to use vaults so now I'm gonna exit out

00:38:18,589 --> 00:38:23,569
of this and we can take a look at this

00:38:20,690 --> 00:38:31,069
repository where we've started work on

00:38:23,569 --> 00:38:43,640
this project use me here while I switch

00:38:31,069 --> 00:38:45,109
screens girl okay okay so this is the

00:38:43,640 --> 00:38:47,509
repository that we were working out of

00:38:45,109 --> 00:38:49,819
everything we're doing is done in this

00:38:47,509 --> 00:38:51,739
repository like Sergey mentioned it's

00:38:49,819 --> 00:38:53,900
still work-in-progress but where we'd

00:38:51,739 --> 00:38:56,539
like feedback we'd like interaction so

00:38:53,900 --> 00:38:58,460
this is a place to do it

00:38:56,539 --> 00:39:01,009
Andray in a second is going to give a

00:38:58,460 --> 00:39:03,559
demo but before he does that I'll just

00:39:01,009 --> 00:39:06,339
describe at more of a lower level what

00:39:03,559 --> 00:39:09,220
the how this plug-in is going to work

00:39:06,339 --> 00:39:11,509
this this is the dike this is a diagram

00:39:09,220 --> 00:39:14,059
and in the upper right hand corner is

00:39:11,509 --> 00:39:16,489
vault and vault has this really nice

00:39:14,059 --> 00:39:18,049
plug-in architecture and so that's

00:39:16,489 --> 00:39:19,849
that's really what we're building is

00:39:18,049 --> 00:39:24,890
we're building this vault plugin for

00:39:19,849 --> 00:39:26,210
cloud foundry so the artifact or the

00:39:24,890 --> 00:39:28,119
binary that gets built from this

00:39:26,210 --> 00:39:32,180
repository will brought alongside vault

00:39:28,119 --> 00:39:35,150
and so down at the bottom is Cloud

00:39:32,180 --> 00:39:36,739
Foundry there's really not much

00:39:35,150 --> 00:39:39,049
described here because all we care about

00:39:36,739 --> 00:39:43,039
is Cloud Foundry use certificate

00:39:39,049 --> 00:39:45,469
authority and what happens is the it's a

00:39:43,039 --> 00:39:48,190
one time step that certificate authority

00:39:45,469 --> 00:39:50,420
is given to the vault plugin so that

00:39:48,190 --> 00:39:53,869
establishes the trust relationship and

00:39:50,420 --> 00:39:56,989
then from there Cloud Foundry using its

00:39:53,869 --> 00:39:59,390
instance identity mechanism it drops

00:39:56,989 --> 00:40:02,660
these certificate pairs on each Cloud

00:39:59,390 --> 00:40:03,680
Foundry applications file system and the

00:40:02,660 --> 00:40:05,690
interesting thing about these

00:40:03,680 --> 00:40:08,269
certificates is that they they have

00:40:05,690 --> 00:40:12,019
embedded in them the applications or

00:40:08,269 --> 00:40:14,150
space and app grids so we can you can we

00:40:12,019 --> 00:40:17,329
can use that information later on and

00:40:14,150 --> 00:40:19,190
then when they authenticate and from

00:40:17,329 --> 00:40:22,099
there it's up to the App Cloud Foundry

00:40:19,190 --> 00:40:25,009
application to create a JWT token using

00:40:22,099 --> 00:40:26,330
these certificate pairs and once it's

00:40:25,009 --> 00:40:28,700
got that token

00:40:26,330 --> 00:40:31,460
that token two vaults both in delegates

00:40:28,700 --> 00:40:33,940
that request to our plugin and then the

00:40:31,460 --> 00:40:37,880
plugin validates that that's a correct

00:40:33,940 --> 00:40:38,960
valid token that didn't bet a trust so

00:40:37,880 --> 00:40:41,870
then it can offend to get the

00:40:38,960 --> 00:40:43,850
application and then on top of that it

00:40:41,870 --> 00:40:47,120
looks at these certificate attributes

00:40:43,850 --> 00:40:49,670
and they can apply policies to to that

00:40:47,120 --> 00:40:52,040
application so it can prevent it or or

00:40:49,670 --> 00:40:56,630
grant it access to certain secrets with

00:40:52,040 --> 00:40:59,210
involved and now that I think about it

00:40:56,630 --> 00:41:01,880
this the creation of this JWT token that

00:40:59,210 --> 00:41:05,050
might be a good use case for a sidebar

00:41:01,880 --> 00:41:10,220
so to tie it back to the to the previous

00:41:05,050 --> 00:41:11,990
presentation okay so that's that's all I

00:41:10,220 --> 00:41:14,780
have I'm going to pass it over to Ray

00:41:11,990 --> 00:41:17,410
and Ray is going to do a quick demo of

00:41:14,780 --> 00:41:17,410
this in action

00:41:18,010 --> 00:41:21,220
Thank You Adam

00:41:22,780 --> 00:41:28,160
whether he is preparing so it is

00:41:25,130 --> 00:41:30,920
essentially how we can get it completely

00:41:28,160 --> 00:41:33,950
out of secrets and not have any secrets

00:41:30,920 --> 00:41:37,160
anywhere instead to rely on a trust

00:41:33,950 --> 00:41:39,140
relationship and policies so just

00:41:37,160 --> 00:41:44,990
completely replace to replace to get in

00:41:39,140 --> 00:41:46,180
there from developer scans thank Sergei

00:41:44,990 --> 00:41:48,309
so

00:41:46,180 --> 00:41:51,430
introduce myself a little bit I'm ray

00:41:48,309 --> 00:41:56,109
Harrison I am a part of enterprise

00:41:51,430 --> 00:41:59,339
architecture on one of Comcast's well

00:41:56,109 --> 00:42:03,250
Comcast's only data vertical so we're

00:41:59,339 --> 00:42:04,660
focus in a variety of spaces one of them

00:42:03,250 --> 00:42:07,569
is Cloud Foundry I'm actually pretty new

00:42:04,660 --> 00:42:09,460
to cloud boundaries to be honest but

00:42:07,569 --> 00:42:13,270
that makes it fun

00:42:09,460 --> 00:42:18,250
the the ecosystem that you know we work

00:42:13,270 --> 00:42:21,539
in as as users of Cloud Foundry is is

00:42:18,250 --> 00:42:23,890
pretty broad so we have Amazon

00:42:21,539 --> 00:42:26,260
footprints we have on-premise footprints

00:42:23,890 --> 00:42:29,680
we're big you know we're big data

00:42:26,260 --> 00:42:33,480
focused so we're we have a lot of Hadoop

00:42:29,680 --> 00:42:37,900
ecosystems we have a lot of you know

00:42:33,480 --> 00:42:39,789
machine learning components we do a lot

00:42:37,900 --> 00:42:41,760
of that work out on Amazon as well so

00:42:39,789 --> 00:42:45,400
we're straddling these environments and

00:42:41,760 --> 00:42:49,049
you know one of the the tie-ins here is

00:42:45,400 --> 00:42:53,020
that we have interesting security

00:42:49,049 --> 00:42:55,119
opportunities and challenges and you

00:42:53,020 --> 00:42:59,529
know already a lot of the teams are

00:42:55,119 --> 00:43:02,470
using JWT tokens to do work with with

00:42:59,529 --> 00:43:06,400
varying security frameworks that we've

00:43:02,470 --> 00:43:09,010
got here in comcast and this really lets

00:43:06,400 --> 00:43:11,109
us take it to the next level a little

00:43:09,010 --> 00:43:15,400
bit so we're able to use you know

00:43:11,109 --> 00:43:19,359
industry standard Jo BT tokens industry

00:43:15,400 --> 00:43:22,809
standard frameworks and environments

00:43:19,359 --> 00:43:26,349
like Cloud Foundry too and as Adam

00:43:22,809 --> 00:43:28,420
mentioned as well we can also use vault

00:43:26,349 --> 00:43:31,809
not only with Cloud Foundry but with our

00:43:28,420 --> 00:43:36,130
kubernetes ecosystem and and everything

00:43:31,809 --> 00:43:37,779
so we got a lot of challenges the the

00:43:36,130 --> 00:43:41,319
work that we're doing here really is is

00:43:37,779 --> 00:43:45,220
to to help make it less painful for us

00:43:41,319 --> 00:43:47,200
and we hope that this you know is

00:43:45,220 --> 00:43:50,829
helpful to others and we really really

00:43:47,200 --> 00:43:54,119
want feedback from folks you know we're

00:43:50,829 --> 00:43:57,160
you know we want the best brains and

00:43:54,119 --> 00:43:59,950
folks on the planet to come in and and

00:43:57,160 --> 00:44:03,550
help us out with this so we're out

00:43:59,950 --> 00:44:06,970
the same location that Adam was just

00:44:03,550 --> 00:44:10,620
pointing to out in github in a branch

00:44:06,970 --> 00:44:17,830
called POC it is very very early days

00:44:10,620 --> 00:44:20,260
the the demo itself is literally seconds

00:44:17,830 --> 00:44:22,180
which is great because that's you know

00:44:20,260 --> 00:44:26,140
that's how easy we want it to be right

00:44:22,180 --> 00:44:27,940
and so we want developers to not have to

00:44:26,140 --> 00:44:29,500
think too hard right they've got a lot

00:44:27,940 --> 00:44:31,690
of other things on their minds and on

00:44:29,500 --> 00:44:34,690
their plates so we want to make sure

00:44:31,690 --> 00:44:37,150
that what we're doing helps that right

00:44:34,690 --> 00:44:39,670
as you know we we want productive

00:44:37,150 --> 00:44:41,680
developers and we want very fast

00:44:39,670 --> 00:44:45,580
turnaround time on new features and

00:44:41,680 --> 00:44:48,880
things so that's the goal here and this

00:44:45,580 --> 00:44:51,760
is a slightly different readme here but

00:44:48,880 --> 00:44:54,160
I did want to walk through you know

00:44:51,760 --> 00:44:57,370
basically how things get set up it's

00:44:54,160 --> 00:44:59,140
pretty straightforward the you know on

00:44:57,370 --> 00:45:02,740
the bulk side of things you have to

00:44:59,140 --> 00:45:07,030
register the plugin with a couple of

00:45:02,740 --> 00:45:09,940
steps enable it and then and then do

00:45:07,030 --> 00:45:11,680
what Adam was talking about so start on

00:45:09,940 --> 00:45:14,850
the vault site establishing that trust

00:45:11,680 --> 00:45:17,560
relationship with with a certificate and

00:45:14,850 --> 00:45:22,200
you know once you've done that and once

00:45:17,560 --> 00:45:25,690
you've gotten a certificate authority

00:45:22,200 --> 00:45:27,910
certificate in place well then it's

00:45:25,690 --> 00:45:30,280
pretty straightforward to to begin

00:45:27,910 --> 00:45:34,630
setting things up you know and the

00:45:30,280 --> 00:45:37,680
examples here we have you know setting

00:45:34,630 --> 00:45:41,590
it up for organizations and for spaces

00:45:37,680 --> 00:45:43,030
and the you know in this example you

00:45:41,590 --> 00:45:47,380
know we'll have the names of the

00:45:43,030 --> 00:45:52,600
policies that we want to associate with

00:45:47,380 --> 00:45:54,609
the org and spaces and once you have

00:45:52,600 --> 00:45:56,349
that

00:45:54,609 --> 00:46:01,660
we've also included within this

00:45:56,349 --> 00:46:04,809
particular POC capability a essentially

00:46:01,660 --> 00:46:06,400
a jot token generator you can do a

00:46:04,809 --> 00:46:10,720
variety of things with it you can

00:46:06,400 --> 00:46:14,769
deliver it to a file specific location

00:46:10,720 --> 00:46:18,069
or you can spit it out to the command

00:46:14,769 --> 00:46:21,749
line and standard out so you have some

00:46:18,069 --> 00:46:24,190
flexibilities there you can put in

00:46:21,749 --> 00:46:26,230
string delimited policies because the

00:46:24,190 --> 00:46:29,410
jot token has a couple of things so it

00:46:26,230 --> 00:46:32,430
does have a certificate that the

00:46:29,410 --> 00:46:37,150
instance certificate that includes the

00:46:32,430 --> 00:46:41,650
organization and space and app you you

00:46:37,150 --> 00:46:43,779
IDs be also it includes in our

00:46:41,650 --> 00:46:47,349
particular example here it includes

00:46:43,779 --> 00:46:49,390
policies associated with those that we

00:46:47,349 --> 00:46:52,690
want to utilize for our particular

00:46:49,390 --> 00:46:55,869
application and then and then once you

00:46:52,690 --> 00:46:58,450
you do that you can and there are many

00:46:55,869 --> 00:47:00,519
ways to get this information from ball

00:46:58,450 --> 00:47:02,529
one of them is at the command line and

00:47:00,519 --> 00:47:05,349
that's going to be the focus of the demo

00:47:02,529 --> 00:47:07,119
today but once you do that you have you

00:47:05,349 --> 00:47:11,019
pass it the jot token and then you get

00:47:07,119 --> 00:47:13,390
back tokens from vault that applications

00:47:11,019 --> 00:47:15,670
now spring boot or other applications

00:47:13,390 --> 00:47:18,339
can jump right in and immediately start

00:47:15,670 --> 00:47:22,690
using the resources that are trying to

00:47:18,339 --> 00:47:25,029
access demo today just real quickly is

00:47:22,690 --> 00:47:29,259
based on kind of a local development of

00:47:25,029 --> 00:47:34,569
some internal logistics we're working

00:47:29,259 --> 00:47:37,150
through to get vault in and our

00:47:34,569 --> 00:47:38,799
development environment set up so we can

00:47:37,150 --> 00:47:41,259
you know do it directly from Cloud

00:47:38,799 --> 00:47:43,839
Foundry but nonetheless it's pretty

00:47:41,259 --> 00:47:46,779
straightforward you you build the you

00:47:43,839 --> 00:47:53,200
know everything's in go and you build

00:47:46,779 --> 00:47:55,059
out the the module you you know in this

00:47:53,200 --> 00:47:58,690
case this is local so we've started up a

00:47:55,059 --> 00:48:01,450
local vault ecosystem do the the

00:47:58,690 --> 00:48:04,549
registering like we showed above we

00:48:01,450 --> 00:48:06,890
enable it like we showed above

00:48:04,549 --> 00:48:11,269
to do it locally you get the instance

00:48:06,890 --> 00:48:14,959
Keys directly from you know for example

00:48:11,269 --> 00:48:20,119
uh this is just one example of how to do

00:48:14,959 --> 00:48:23,289
it and and of course with with your

00:48:20,119 --> 00:48:26,719
local environment you'll want to have

00:48:23,289 --> 00:48:30,140
you know equivalents of CF instance key

00:48:26,719 --> 00:48:32,929
and CF cert and censored as well once

00:48:30,140 --> 00:48:38,029
you do that you generate your jot token

00:48:32,929 --> 00:48:41,329
and and then you log in and as as I'm

00:48:38,029 --> 00:48:43,969
showing here you get back that the token

00:48:41,329 --> 00:48:47,929
that applications like spring boot for

00:48:43,969 --> 00:48:51,799
example can use and I'll do so this is

00:48:47,929 --> 00:48:53,479
literally I'll do two things well just

00:48:51,799 --> 00:48:56,499
you know most of this is pretty sunny

00:48:53,479 --> 00:48:56,499
date but

00:48:57,900 --> 00:49:17,640
but whoops all right little easier to

00:49:08,850 --> 00:49:20,040
see so this this was a jot just to show

00:49:17,640 --> 00:49:22,200
you sort of the failure path first this

00:49:20,040 --> 00:49:24,810
is a jot token that was created with

00:49:22,200 --> 00:49:29,400
policies that aren't actually connected

00:49:24,810 --> 00:49:32,670
to the the the AB the Oregon the space

00:49:29,400 --> 00:49:34,470
and so what it would return just as you

00:49:32,670 --> 00:49:37,070
know an error is that the policy that

00:49:34,470 --> 00:49:39,510
you're trying to associate isn't found

00:49:37,070 --> 00:49:42,120
but that's okay we've got one with the

00:49:39,510 --> 00:49:45,690
correct policies and then it comes back

00:49:42,120 --> 00:49:47,210
with the token and again you know in the

00:49:45,690 --> 00:49:49,860
real world this would be you know

00:49:47,210 --> 00:49:54,540
available from within a spring bid for

00:49:49,860 --> 00:49:57,390
example that and then both allows you

00:49:54,540 --> 00:50:00,830
know for example a REST API that can do

00:49:57,390 --> 00:50:05,370
the same call and bring it back in for

00:50:00,830 --> 00:50:08,610
going on your merry way and that

00:50:05,370 --> 00:50:11,070
is the demo again it's very very early

00:50:08,610 --> 00:50:12,330
days the code is out there you know

00:50:11,070 --> 00:50:17,070
please go out

00:50:12,330 --> 00:50:19,590
take a look you know interact with us

00:50:17,070 --> 00:50:22,680
you know we're we're fully engaged ready

00:50:19,590 --> 00:50:24,570
to help and we're we're we're ready for

00:50:22,680 --> 00:50:26,840
you to help us to you so thank you very

00:50:24,570 --> 00:50:26,840
much

00:50:28,040 --> 00:50:31,680
hey thanks ray I don't think we have too

00:50:30,510 --> 00:50:39,140
much time for question because there's

00:50:31,680 --> 00:50:44,130
another talk and this guy Sergei yes

00:50:39,140 --> 00:50:47,850
timewise we might we might do the second

00:50:44,130 --> 00:50:51,060
portion next cup because we sort of ran

00:50:47,850 --> 00:50:54,150
out of time you wanna do that instead

00:50:51,060 --> 00:50:56,460
try to I mean how come it we have seven

00:50:54,150 --> 00:50:59,400
minutes or six minutes yeah yeah if

00:50:56,460 --> 00:51:03,590
there are if there are questions on this

00:50:59,400 --> 00:51:04,890
portion let's let's better focus on this

00:51:03,590 --> 00:51:07,530
and

00:51:04,890 --> 00:51:10,970
any questions I had one question but

00:51:07,530 --> 00:51:10,970
let's see if what do people have

00:51:11,090 --> 00:51:17,440
no I think the main question is is

00:51:14,780 --> 00:51:19,580
whether or not you guys looked into the

00:51:17,440 --> 00:51:22,300
service Booker I think there's been a

00:51:19,580 --> 00:51:25,340
couple service Booker's or vault or

00:51:22,300 --> 00:51:28,100
foundry and I don't think it solved the

00:51:25,340 --> 00:51:31,340
same exact problem as you guys are

00:51:28,100 --> 00:51:33,560
trying to do with keyless entry but I

00:51:31,340 --> 00:51:35,750
know that stuck and Wayne and a few

00:51:33,560 --> 00:51:42,680
other people have you know discussed

00:51:35,750 --> 00:51:45,770
this problem yes so service broker is

00:51:42,680 --> 00:51:49,760
iam is the first thing that we start to

00:51:45,770 --> 00:51:52,160
look on and firstly we had a move out of

00:51:49,760 --> 00:51:55,820
that pass because sort of broke

00:51:52,160 --> 00:52:00,440
interface and has you know by intent

00:51:55,820 --> 00:52:02,660
unbind and calls and this are the only

00:52:00,440 --> 00:52:05,090
time when we can generate and pass

00:52:02,660 --> 00:52:07,700
credentials to the application right and

00:52:05,090 --> 00:52:09,860
bind and unbind usually happening when

00:52:07,700 --> 00:52:12,590
you first deployed application you bind

00:52:09,860 --> 00:52:15,440
it and D unbind when you give you the

00:52:12,590 --> 00:52:17,870
application so there is no there is no

00:52:15,440 --> 00:52:22,210
way in a service broker API to actually

00:52:17,870 --> 00:52:26,720
have key rotations right and also the

00:52:22,210 --> 00:52:28,190
the secrets are passed to applications

00:52:26,720 --> 00:52:31,880
through environment variables and again

00:52:28,190 --> 00:52:34,430
environment variables are static they

00:52:31,880 --> 00:52:37,730
cannot be modified they can be rotated

00:52:34,430 --> 00:52:39,410
so once process is started the process

00:52:37,730 --> 00:52:42,710
read that environment variables there is

00:52:39,410 --> 00:52:47,720
no way to update in the flight so this

00:52:42,710 --> 00:52:51,970
this are the security rotation is is one

00:52:47,720 --> 00:52:56,840
limitation and how cities are passed and

00:52:51,970 --> 00:52:58,820
so at the end somebody can can take that

00:52:56,840 --> 00:53:00,080
that secrets and to use it outside of

00:52:58,820 --> 00:53:05,630
class founded and that's what we don't

00:53:00,080 --> 00:53:07,970
want to have and the second is is how to

00:53:05,630 --> 00:53:10,220
manage policies we want to not just to

00:53:07,970 --> 00:53:12,110
have small sandbox for each application

00:53:10,220 --> 00:53:14,120
for recipients we want to have

00:53:12,110 --> 00:53:17,210
applications to be able to access all

00:53:14,120 --> 00:53:21,950
wall capabilities including including

00:53:17,210 --> 00:53:24,050
access to databases through world that

00:53:21,950 --> 00:53:24,890
also not something that can be easily

00:53:24,050 --> 00:53:28,310
addressed

00:53:24,890 --> 00:53:32,810
a service broker and we really wanted to

00:53:28,310 --> 00:53:35,480
do is completely password less secret

00:53:32,810 --> 00:53:38,510
less access to the environment and

00:53:35,480 --> 00:53:40,880
implement it all the way and the secret

00:53:38,510 --> 00:53:46,070
management like vote is a good place for

00:53:40,880 --> 00:53:48,710
it we just need ability to wire to to

00:53:46,070 --> 00:53:50,390
cause found a property and we just took

00:53:48,710 --> 00:53:52,070
an example from kubernetes because

00:53:50,390 --> 00:53:54,320
that's wiring to kubernetes already

00:53:52,070 --> 00:53:57,460
exists and it is awesome so we wanted to

00:53:54,320 --> 00:54:00,760
reproduce replicate the very same

00:53:57,460 --> 00:54:05,240
developers experience on cloud foundry

00:54:00,760 --> 00:54:07,280
and service broccoli is not exactly the

00:54:05,240 --> 00:54:10,100
same developer experience that's why we

00:54:07,280 --> 00:54:12,380
took a different path sure let's see if

00:54:10,100 --> 00:54:14,150
there's any other questions you may want

00:54:12,380 --> 00:54:18,880
to look into service keys because you

00:54:14,150 --> 00:54:22,280
can generate new keys to service workers

00:54:18,880 --> 00:54:24,320
I'm not trying to say this is we should

00:54:22,280 --> 00:54:26,390
look into service book or more but it's

00:54:24,320 --> 00:54:33,950
just that there is a way for you to

00:54:26,390 --> 00:54:37,160
generate new keys this is this is a good

00:54:33,950 --> 00:54:40,490
point and what we actually trying to do

00:54:37,160 --> 00:54:43,970
is to communicate also visit service

00:54:40,490 --> 00:54:45,680
brokers I team and see what kind of new

00:54:43,970 --> 00:54:48,470
features is good to have in a service

00:54:45,680 --> 00:54:53,240
broker still environment variables are

00:54:48,470 --> 00:54:55,310
static and as example is to help that

00:54:53,240 --> 00:54:57,410
secrets not environment environment keys

00:54:55,310 --> 00:54:59,720
but enough files that might be progress

00:54:57,410 --> 00:55:02,480
and when that files can be updated and

00:54:59,720 --> 00:55:04,580
rotated so that differently room for

00:55:02,480 --> 00:55:08,840
improvement and I'm not saying that

00:55:04,580 --> 00:55:12,710
service broker is not not the right

00:55:08,840 --> 00:55:15,520
thing to do it is in a longer run but it

00:55:12,710 --> 00:55:20,030
might require some additional

00:55:15,520 --> 00:55:21,620
enhancements ok yeah so we were only out

00:55:20,030 --> 00:55:24,170
of time I mean can you introduce the

00:55:21,620 --> 00:55:25,670
next talk so that way people know about

00:55:24,170 --> 00:55:28,850
it and then maybe I can get some

00:55:25,670 --> 00:55:32,210
feedback because we have kind of a tight

00:55:28,850 --> 00:55:34,370
schedule for the next one maybe yeah so

00:55:32,210 --> 00:55:37,340
so let's let's do the next up might be

00:55:34,370 --> 00:55:38,570
on max cardmaking and the next project

00:55:37,340 --> 00:55:44,060
was he

00:55:38,570 --> 00:55:45,650
is about DNS management specifically how

00:55:44,060 --> 00:55:48,040
to manage DNS across multiple

00:55:45,650 --> 00:55:51,440
foundations because Cloud Foundry has

00:55:48,040 --> 00:55:55,100
ability you can use wildcard in essence

00:55:51,440 --> 00:55:57,140
wildcard as a certificate points to a

00:55:55,100 --> 00:55:59,090
single foundation it works great but

00:55:57,140 --> 00:56:02,330
when organization is growing and there

00:55:59,090 --> 00:56:05,110
are four Cloud Foundry sites we want

00:56:02,330 --> 00:56:07,820
somehow more active - management to

00:56:05,110 --> 00:56:11,720
crandall application to make them more

00:56:07,820 --> 00:56:14,720
portable and second second project that

00:56:11,720 --> 00:56:20,510
we wanted to introduce the next time is

00:56:14,720 --> 00:56:26,270
about leveraging external DNS which is a

00:56:20,510 --> 00:56:30,350
kubernetes also incubator project - why

00:56:26,270 --> 00:56:32,480
it - cloud foundry and make closed

00:56:30,350 --> 00:56:36,500
foundry be also part of our part of that

00:56:32,480 --> 00:56:38,720
ecosystem okay Thank You Sergey we're

00:56:36,500 --> 00:56:40,610
out of time so we're looking forward to

00:56:38,720 --> 00:56:42,920
that next talk and then we'll try to

00:56:40,610 --> 00:56:45,170
manage the time this time and then of

00:56:42,920 --> 00:56:47,450
course if you anybody else have a talk

00:56:45,170 --> 00:56:49,400
pick me and then let's see if we can

00:56:47,450 --> 00:56:51,680
schedule it there's already a couple

00:56:49,400 --> 00:56:54,080
more talks coming but we'll figure it

00:56:51,680 --> 00:56:57,770
out paternity Sergei and cm thank you

00:56:54,080 --> 00:57:00,320
for that and Scott and Jim so thank you

00:56:57,770 --> 00:57:02,880
well to you guys next time

00:57:00,320 --> 00:57:04,940
Cheers bye everybody

00:57:02,880 --> 00:57:04,940
you

00:57:05,310 --> 00:57:09,290
you

00:57:07,230 --> 00:57:09,290
you

00:57:09,410 --> 00:57:11,470

YouTube URL: https://www.youtube.com/watch?v=nlDaGD3UKpc


