Title: Cloud Foundry Community Advisory Board Call [April 2021]
Publication date: 2021-04-22
Playlist: Community Advisory Board
Description: 
	
Captions: 
	00:00:00,160 --> 00:00:03,040
good to see you're here that's uh that's

00:00:02,240 --> 00:00:06,799
good

00:00:03,040 --> 00:00:10,480
um so welcome everybody

00:00:06,799 --> 00:00:14,799
uh april cab call um should be a fun one

00:00:10,480 --> 00:00:17,279
um we've got

00:00:14,799 --> 00:00:19,760
presentation a little bit later uh from

00:00:17,279 --> 00:00:21,520
emily casey on the current

00:00:19,760 --> 00:00:23,680
state of uh cloud native bill packs and

00:00:21,520 --> 00:00:26,560
vocato that's very cool

00:00:23,680 --> 00:00:27,680
um also uh shortly thereafter

00:00:26,560 --> 00:00:29,679
conveniently

00:00:27,680 --> 00:00:32,079
ram and shedrack are running a live

00:00:29,679 --> 00:00:35,280
stream this morning at 9 30 am

00:00:32,079 --> 00:00:37,280
pdt on cloud native ci cd pipelines on

00:00:35,280 --> 00:00:41,600
kubernetes with tecton and vaquetto

00:00:37,280 --> 00:00:43,840
so that's topically relevant

00:00:41,600 --> 00:00:44,960
aside from that cloud foundry foundation

00:00:43,840 --> 00:00:46,800
updates uh

00:00:44,960 --> 00:00:48,239
summit uh registration going quite well

00:00:46,800 --> 00:00:50,079
uh there's a couple hundred uh

00:00:48,239 --> 00:00:53,280
registrations already which is nice

00:00:50,079 --> 00:00:57,039
um the cfp closes

00:00:53,280 --> 00:00:59,280
in one month on may 21st uh so

00:00:57,039 --> 00:01:00,079
good time to if you haven't uh put

00:00:59,280 --> 00:01:01,359
together something

00:01:00,079 --> 00:01:04,559
uh good time to start thinking about

00:01:01,359 --> 00:01:07,760
that and uh voting for track co-chairs

00:01:04,559 --> 00:01:13,840
um that closes on monday um

00:01:07,760 --> 00:01:13,840
and let me put a put a link to the

00:01:14,320 --> 00:01:18,479
put a link in the chat here for everyone

00:01:16,799 --> 00:01:19,759
who has not voted for that yet that's

00:01:18,479 --> 00:01:23,119
just right to the survey

00:01:19,759 --> 00:01:24,960
monkey uh voting there um and i'll also

00:01:23,119 --> 00:01:28,880
put the

00:01:24,960 --> 00:01:32,479
link to the live stream at 9 30 today

00:01:28,880 --> 00:01:34,079
here it's a long link um

00:01:32,479 --> 00:01:36,079
yeah so that's all i've got uh from the

00:01:34,079 --> 00:01:38,799
foundation um

00:01:36,079 --> 00:01:40,320
so i guess we can move into pmc updates

00:01:38,799 --> 00:01:43,600
uh eric you gotta you wanna run down

00:01:40,320 --> 00:01:43,600
some app runtime off please

00:01:44,720 --> 00:01:49,200
uh yeah happy too chris thanks um yeah

00:01:47,520 --> 00:01:51,280
just a few highlights from

00:01:49,200 --> 00:01:52,320
uh the past month or so uh across the

00:01:51,280 --> 00:01:54,000
app runtime teams

00:01:52,320 --> 00:01:56,079
um continued updates from the

00:01:54,000 --> 00:01:58,560
integration teams i've had a

00:01:56,079 --> 00:01:59,280
minor update on cf deployment from

00:01:58,560 --> 00:02:02,320
relevant

00:01:59,280 --> 00:02:04,320
uh to 16.11.0 and then

00:02:02,320 --> 00:02:06,079
another major release of cf for gates i

00:02:04,320 --> 00:02:07,040
believe they had to add some certificate

00:02:06,079 --> 00:02:10,479
properties

00:02:07,040 --> 00:02:13,520
related to injecting the instance index

00:02:10,479 --> 00:02:15,440
into the application pods that required

00:02:13,520 --> 00:02:17,520
the major version bump

00:02:15,440 --> 00:02:19,520
and then qcf's been doing some work i

00:02:17,520 --> 00:02:23,280
know a little while ago they

00:02:19,520 --> 00:02:25,440
had removed the cc mode that updates the

00:02:23,280 --> 00:02:27,200
um app deployments but they're

00:02:25,440 --> 00:02:29,360
reintroducing that

00:02:27,200 --> 00:02:31,200
after understanding how it fits into

00:02:29,360 --> 00:02:32,640
that set of cc jobs

00:02:31,200 --> 00:02:34,080
uh then they're also doing some things

00:02:32,640 --> 00:02:34,959
that improve the operation of the log

00:02:34,080 --> 00:02:37,360
cache job

00:02:34,959 --> 00:02:38,640
to be within its memory limit inside the

00:02:37,360 --> 00:02:40,720
containers

00:02:38,640 --> 00:02:42,640
i think some of that is depending on

00:02:40,720 --> 00:02:46,560
some work in the go cigar library

00:02:42,640 --> 00:02:48,080
um uh kind of in the bosch realm there

00:02:46,560 --> 00:02:50,319
across some of the component teams no

00:02:48,080 --> 00:02:53,120
cappy's been doing some work on um

00:02:50,319 --> 00:02:54,560
uh app manifest diffs for um uh setting

00:02:53,120 --> 00:02:56,000
those app manifests server side and

00:02:54,560 --> 00:02:58,159
having them apply

00:02:56,000 --> 00:02:59,599
uh and then irene's been doing um some

00:02:58,159 --> 00:03:00,239
really interesting work uh they've been

00:02:59,599 --> 00:03:01,760
filling in

00:03:00,239 --> 00:03:03,599
uh some gaps that they've had between

00:03:01,760 --> 00:03:06,080
their crd representation

00:03:03,599 --> 00:03:06,879
of the their lrp resource and the rest

00:03:06,080 --> 00:03:09,200
apis

00:03:06,879 --> 00:03:10,319
that have manipulated those before and

00:03:09,200 --> 00:03:10,800
then they're planning on starting some

00:03:10,319 --> 00:03:12,720
work

00:03:10,800 --> 00:03:14,239
um to explore the consequences of

00:03:12,720 --> 00:03:15,360
running apps as deployments instead of

00:03:14,239 --> 00:03:17,519
stateful sets so

00:03:15,360 --> 00:03:18,800
see exactly what we might need to change

00:03:17,519 --> 00:03:21,680
to accommodate that mode

00:03:18,800 --> 00:03:22,640
of running apps they've also been doing

00:03:21,680 --> 00:03:25,680
some work to move

00:03:22,640 --> 00:03:27,280
their backlog and icebox into github

00:03:25,680 --> 00:03:30,319
projects from trackers so i dropped in a

00:03:27,280 --> 00:03:32,319
link to that if anyone's curious about

00:03:30,319 --> 00:03:33,360
how that's going or uh even what see

00:03:32,319 --> 00:03:35,680
things that they'd be interested in

00:03:33,360 --> 00:03:37,599
contributing to there

00:03:35,680 --> 00:03:39,760
then a couple other updates around

00:03:37,599 --> 00:03:41,920
networking um the networking team

00:03:39,760 --> 00:03:43,599
um uh i think we've mentioned in the

00:03:41,920 --> 00:03:46,319
past uh there's been some issues

00:03:43,599 --> 00:03:48,480
with um starting in go 115 are in a

00:03:46,319 --> 00:03:49,760
stricter validation of metadata in

00:03:48,480 --> 00:03:51,440
certificates

00:03:49,760 --> 00:03:53,040
um so they've been building the go

00:03:51,440 --> 00:03:54,959
router to

00:03:53,040 --> 00:03:57,120
operate in the more permissive mode

00:03:54,959 --> 00:03:59,680
where it doesn't need to

00:03:57,120 --> 00:04:00,959
have the hostname show up strictly in a

00:03:59,680 --> 00:04:03,200
dns san

00:04:00,959 --> 00:04:04,000
and a certificate uh that the co-writer

00:04:03,200 --> 00:04:07,040
is interacting with

00:04:04,000 --> 00:04:07,760
uh it's okay for it to be present in the

00:04:07,040 --> 00:04:09,840
common name

00:04:07,760 --> 00:04:11,680
uh but they're now uh turning that off

00:04:09,840 --> 00:04:13,519
and unfortunately it's a compile time

00:04:11,680 --> 00:04:15,519
thing not a runtime thing

00:04:13,519 --> 00:04:17,359
so there's not an option to switch back

00:04:15,519 --> 00:04:18,639
and forth um but you know we've

00:04:17,359 --> 00:04:20,720
we've been warning about this for a

00:04:18,639 --> 00:04:22,400
while so

00:04:20,720 --> 00:04:24,479
hopefully at this point all the

00:04:22,400 --> 00:04:26,560
certainly all the internal certificates

00:04:24,479 --> 00:04:28,400
um have been updated uh to have that

00:04:26,560 --> 00:04:29,919
metadata in the right place

00:04:28,400 --> 00:04:31,360
so this might just be an issue for any

00:04:29,919 --> 00:04:32,880
client certificates that are interacting

00:04:31,360 --> 00:04:34,160
directly with go router

00:04:32,880 --> 00:04:36,160
they've also been fixing some bugs

00:04:34,160 --> 00:04:39,280
around i think tcp

00:04:36,160 --> 00:04:42,000
router report allocations and then

00:04:39,280 --> 00:04:43,440
some cases where there's uh some issues

00:04:42,000 --> 00:04:45,759
with the policy server when it's running

00:04:43,440 --> 00:04:48,240
against a mysql database

00:04:45,759 --> 00:04:49,680
and then finally aj proxy has they've

00:04:48,240 --> 00:04:51,759
had another minor

00:04:49,680 --> 00:04:53,199
update in their bosch release i think

00:04:51,759 --> 00:04:54,160
doing some fixes primarily to

00:04:53,199 --> 00:04:55,759
accommodate

00:04:54,160 --> 00:04:58,320
running on the bionic stem cells where

00:04:55,759 --> 00:05:00,240
there's only python 3 available

00:04:58,320 --> 00:05:02,160
so anyway those are a few updates i'm

00:05:00,240 --> 00:05:11,840
happy to field any questions

00:05:02,160 --> 00:05:11,840
before we move on to the the main show

00:05:12,000 --> 00:05:17,440
all right um no questions forever

00:05:15,199 --> 00:05:19,360
um do we have anyone from the bosch team

00:05:17,440 --> 00:05:22,000
here today

00:05:19,360 --> 00:05:22,720
updates on that uh it doesn't look like

00:05:22,000 --> 00:05:25,039
it um

00:05:22,720 --> 00:05:26,639
okay um as far as extensions i don't

00:05:25,039 --> 00:05:30,080
have any significant updates

00:05:26,639 --> 00:05:31,759
um of course locato and bill pax

00:05:30,080 --> 00:05:33,520
being an extension will be kind of the

00:05:31,759 --> 00:05:36,320
main feature today um

00:05:33,520 --> 00:05:37,840
so we've got that going on um is there

00:05:36,320 --> 00:05:39,759
anything else anyone wants to bring up

00:05:37,840 --> 00:05:42,639
or talk about before we move on to

00:05:39,759 --> 00:05:43,440
pacquiao and build packs i have one

00:05:42,639 --> 00:05:46,639
question

00:05:43,440 --> 00:05:49,360
oh sorry it's uh stefan from from sap

00:05:46,639 --> 00:05:50,639
uh there's one project called uh cloud

00:05:49,360 --> 00:05:53,919
foundry community

00:05:50,639 --> 00:05:55,759
cf python client and we did some

00:05:53,919 --> 00:05:56,960
contributions in the past and also have

00:05:55,759 --> 00:06:00,880
some uh

00:05:56,960 --> 00:06:01,520
one pr open and the question in our team

00:06:00,880 --> 00:06:03,360
came up

00:06:01,520 --> 00:06:05,520
uh what is actually the contribution

00:06:03,360 --> 00:06:08,160
model for this

00:06:05,520 --> 00:06:09,039
cloud foundry community project is there

00:06:08,160 --> 00:06:11,199
any way

00:06:09,039 --> 00:06:12,639
we could let's say bring our

00:06:11,199 --> 00:06:14,319
contributions better in

00:06:12,639 --> 00:06:18,240
or we would be willing to invest here a

00:06:14,319 --> 00:06:18,240
bit with whom should i talk

00:06:19,199 --> 00:06:22,479
so the cloud foundry that's a i'm not

00:06:21,199 --> 00:06:24,000
familiar with that

00:06:22,479 --> 00:06:27,280
project but the cloud founder community

00:06:24,000 --> 00:06:27,280
it's in the that github org

00:06:28,880 --> 00:06:33,280
yeah it's yeah it's in the github cloud

00:06:31,280 --> 00:06:35,280
foundry community right okay yeah

00:06:33,280 --> 00:06:36,479
so that's kind of a loosely organized

00:06:35,280 --> 00:06:37,919
community i know that

00:06:36,479 --> 00:06:40,560
uh dr nick from stockholm wayne started

00:06:37,919 --> 00:06:44,400
that a long time ago um so as far as

00:06:40,560 --> 00:06:48,000
ah cool thanks see a python client

00:06:44,400 --> 00:06:50,560
i think it's the cf api client

00:06:48,000 --> 00:06:51,759
that is also yeah widely used and

00:06:50,560 --> 00:06:56,479
referenced for

00:06:51,759 --> 00:06:56,479
right right um

00:06:57,360 --> 00:07:00,639
yeah i don't know if there's there's

00:06:58,880 --> 00:07:03,280
there's uh

00:07:00,639 --> 00:07:04,880
any official um contribution guidelines

00:07:03,280 --> 00:07:07,520
for the cloud foundry community

00:07:04,880 --> 00:07:08,720
org um cff doesn't really manage that

00:07:07,520 --> 00:07:12,240
but um

00:07:08,720 --> 00:07:14,400
uh i norm or tyler

00:07:12,240 --> 00:07:16,080
do you all know what the best plan is

00:07:14,400 --> 00:07:18,319
for getting pull requests and attention

00:07:16,080 --> 00:07:18,319
on that

00:07:20,639 --> 00:07:26,560
i don't know that particular um just um

00:07:24,000 --> 00:07:28,400
stefan just let me know and i will make

00:07:26,560 --> 00:07:31,120
sure things get merged in

00:07:28,400 --> 00:07:32,319
it's usually what we see activity we try

00:07:31,120 --> 00:07:34,160
to

00:07:32,319 --> 00:07:36,080
do yeah we have one request that hurts

00:07:34,160 --> 00:07:39,039
us a bit uh regarding logging that's why

00:07:36,080 --> 00:07:39,280
i'm asking oh okay minor change nothing

00:07:39,039 --> 00:07:42,479
uh

00:07:39,280 --> 00:07:45,440
revolutionary but uh would help us in

00:07:42,479 --> 00:07:47,080
debugging i'll go ahead and get that

00:07:45,440 --> 00:07:50,240
merch in for you

00:07:47,080 --> 00:07:52,720
[Laughter]

00:07:50,240 --> 00:07:54,639
but again if it's possible let's say or

00:07:52,720 --> 00:07:57,520
if you're interested in a

00:07:54,639 --> 00:07:59,039
more deeper cooperation here or if you

00:07:57,520 --> 00:08:00,879
think another contributor would make

00:07:59,039 --> 00:08:02,720
sense uh et cetera then uh

00:08:00,879 --> 00:08:04,240
yeah we would would have an interest

00:08:02,720 --> 00:08:06,240
here also to

00:08:04,240 --> 00:08:07,440
let's say broaden the ev3 coverage and

00:08:06,240 --> 00:08:11,599
things like that so

00:08:07,440 --> 00:08:14,800
because um i'll i'll talk to dr nick

00:08:11,599 --> 00:08:16,080
and and uh a couple other people and

00:08:14,800 --> 00:08:18,479
we'll probably just add you as a

00:08:16,080 --> 00:08:19,120
contributor does that make it easier for

00:08:18,479 --> 00:08:22,479
you

00:08:19,120 --> 00:08:26,000
yeah cool thanks okay

00:08:22,479 --> 00:08:27,759
great thanks norm thanks steph

00:08:26,000 --> 00:08:30,000
oh and uh one one other thing i wanted

00:08:27,759 --> 00:08:34,080
to mention um a couple of weeks ago

00:08:30,000 --> 00:08:35,760
um uh some of us had a

00:08:34,080 --> 00:08:37,200
document around the vision for cf on

00:08:35,760 --> 00:08:39,680
kubernetes uh

00:08:37,200 --> 00:08:40,719
that we published on cf dev and we've

00:08:39,680 --> 00:08:43,039
been

00:08:40,719 --> 00:08:44,560
soliciting comments on for alignment um

00:08:43,039 --> 00:08:45,360
with uh you all and the broader

00:08:44,560 --> 00:08:46,480
community

00:08:45,360 --> 00:08:48,160
so i've been having some great

00:08:46,480 --> 00:08:48,959
discussion on the document itself and

00:08:48,160 --> 00:08:51,360
then we had

00:08:48,959 --> 00:08:52,240
also an asynchronous discussion uh

00:08:51,360 --> 00:08:54,800
yesterday

00:08:52,240 --> 00:08:55,600
um in the morning pacific time uh

00:08:54,800 --> 00:08:58,880
afternoon

00:08:55,600 --> 00:08:59,680
um in europe uh around some of the the

00:08:58,880 --> 00:09:01,680
comments on that

00:08:59,680 --> 00:09:03,120
so we're planning on continuing that at

00:09:01,680 --> 00:09:07,040
the uh next

00:09:03,120 --> 00:09:10,399
cf4k sig call uh in about two weeks um

00:09:07,040 --> 00:09:13,680
i believe that's on may 4th um

00:09:10,399 --> 00:09:15,120
but uh certainly if uh uh you wanna

00:09:13,680 --> 00:09:16,560
any of you are interested in commenting

00:09:15,120 --> 00:09:17,279
on that doc or participating in that

00:09:16,560 --> 00:09:20,160
discussion

00:09:17,279 --> 00:09:21,279
uh you're very welcome too i'll drop a

00:09:20,160 --> 00:09:24,320
link into that

00:09:21,279 --> 00:09:24,320
uh document as well

00:09:24,880 --> 00:09:28,959
yeah the cfragate's sig call yesterday

00:09:27,279 --> 00:09:31,440
was was really informative

00:09:28,959 --> 00:09:33,200
i don't think the uh video for that's

00:09:31,440 --> 00:09:34,880
been published yet but if you check

00:09:33,200 --> 00:09:36,399
probably later in the day uh cf for

00:09:34,880 --> 00:09:38,640
kate's uh slack channel

00:09:36,399 --> 00:09:40,240
will be a link to that video so if you

00:09:38,640 --> 00:09:42,640
want to catch up on that conversation

00:09:40,240 --> 00:09:42,640
you can

00:09:45,760 --> 00:09:51,839
all right uh any other last bits of

00:09:48,839 --> 00:09:51,839
business

00:09:52,560 --> 00:09:57,920
all right uh well um

00:09:55,920 --> 00:09:59,519
emily thank you so much for joining us

00:09:57,920 --> 00:10:02,640
um

00:09:59,519 --> 00:10:04,399
i'll give the floor to you

00:10:02,640 --> 00:10:07,200
thanks for inviting me i'm happy to be

00:10:04,399 --> 00:10:11,360
here um

00:10:07,200 --> 00:10:11,360
let me share my screen here

00:10:17,040 --> 00:10:25,200
okay everyone see the slide deck

00:10:21,760 --> 00:10:26,640
yeah great okay

00:10:25,200 --> 00:10:29,360
oh hopefully i want to go back to the

00:10:26,640 --> 00:10:32,480
beginning of it huh

00:10:29,360 --> 00:10:36,320
it's a usually good place to start

00:10:32,480 --> 00:10:38,240
okay so my name is emily casey and i'm

00:10:36,320 --> 00:10:40,560
here today to talk to you all about

00:10:38,240 --> 00:10:43,279
cloud-native build packs and pocketo

00:10:40,560 --> 00:10:44,560
sort of remind everyone of what our

00:10:43,279 --> 00:10:47,920
high-level goals are

00:10:44,560 --> 00:10:51,360
and tell you how we're progressing um

00:10:47,920 --> 00:10:54,240
towards meeting those goals so i work

00:10:51,360 --> 00:10:56,000
for vmware i'm a core team member on the

00:10:54,240 --> 00:10:58,800
cloud in a bill packs project

00:10:56,000 --> 00:11:00,399
and on the paquetto steering committee

00:10:58,800 --> 00:11:04,959
and i work with the build

00:11:00,399 --> 00:11:06,959
tools at vmware um

00:11:04,959 --> 00:11:08,880
so usually when i talk to people about

00:11:06,959 --> 00:11:10,320
cloud native build packs or bricketto we

00:11:08,880 --> 00:11:12,800
start off

00:11:10,320 --> 00:11:14,000
with a comparison to docker files uh

00:11:12,800 --> 00:11:17,360
because this is the

00:11:14,000 --> 00:11:19,200
common touch point across the ecosystem

00:11:17,360 --> 00:11:21,519
people associate container images with

00:11:19,200 --> 00:11:24,640
docker files

00:11:21,519 --> 00:11:25,440
and it's really hard to create a docker

00:11:24,640 --> 00:11:28,480
file

00:11:25,440 --> 00:11:32,240
well that builds your application

00:11:28,480 --> 00:11:36,000
in a robust way and keeps it up to date

00:11:32,240 --> 00:11:38,000
but i'm going to omit that whole

00:11:36,000 --> 00:11:39,360
segment of the typical bill packs

00:11:38,000 --> 00:11:41,279
presentation because

00:11:39,360 --> 00:11:42,880
you're all here on a cloud foundry call

00:11:41,279 --> 00:11:43,920
because you already know that but you're

00:11:42,880 --> 00:11:47,440
familiar

00:11:43,920 --> 00:11:50,959
with the day two benefits of a bill pack

00:11:47,440 --> 00:11:52,800
driven ecosystem so let's

00:11:50,959 --> 00:11:54,320
jump right into build pack history

00:11:52,800 --> 00:11:57,360
instead

00:11:54,320 --> 00:11:59,360
uh heroku originally

00:11:57,360 --> 00:12:00,880
invented the concept of bill packs at

00:11:59,360 --> 00:12:03,279
the time they weren't called v1 build

00:12:00,880 --> 00:12:05,680
packs they were just build packs

00:12:03,279 --> 00:12:06,720
uh at cloud foundry we thought that was

00:12:05,680 --> 00:12:10,000
a pretty good idea

00:12:06,720 --> 00:12:11,200
and we borrowed it um and the two specs

00:12:10,000 --> 00:12:13,519
from that point

00:12:11,200 --> 00:12:15,440
drifted such that there were heroku

00:12:13,519 --> 00:12:16,000
build packs and cloud foundry build

00:12:15,440 --> 00:12:18,639
packs

00:12:16,000 --> 00:12:20,639
and they were not interoperable with the

00:12:18,639 --> 00:12:23,600
between the systems

00:12:20,639 --> 00:12:24,720
so we came together a couple years ago a

00:12:23,600 --> 00:12:26,639
couple

00:12:24,720 --> 00:12:28,240
employees from pivotal and a couple

00:12:26,639 --> 00:12:30,639
folks from heroku

00:12:28,240 --> 00:12:31,920
we decided that the bill pack spec

00:12:30,639 --> 00:12:35,440
needed an update

00:12:31,920 --> 00:12:37,279
uh for the modern era and we founded the

00:12:35,440 --> 00:12:40,160
cloud native build packs project

00:12:37,279 --> 00:12:42,959
and started it as a sandbox project in

00:12:40,160 --> 00:12:42,959
the cncf

00:12:43,600 --> 00:12:48,480
so let's talk about build packs in cloud

00:12:46,399 --> 00:12:49,839
foundry

00:12:48,480 --> 00:12:52,399
these are going to be things you all are

00:12:49,839 --> 00:12:53,600
familiar with packs receive application

00:12:52,399 --> 00:12:55,600
source code or an

00:12:53,600 --> 00:12:57,519
artifact like in the java case usually a

00:12:55,600 --> 00:13:00,399
jar they generate

00:12:57,519 --> 00:13:02,320
a drop letter slug which is a tgz

00:13:00,399 --> 00:13:04,720
containing the application

00:13:02,320 --> 00:13:06,320
and its runtime dependencies and then

00:13:04,720 --> 00:13:07,839
it's the platform's job to create a

00:13:06,320 --> 00:13:10,480
container

00:13:07,839 --> 00:13:12,320
uh that runs this droplet so it creates

00:13:10,480 --> 00:13:15,279
a container from the base image or

00:13:12,320 --> 00:13:18,480
rudifest streams in the droplet and

00:13:15,279 --> 00:13:18,480
starts your application

00:13:18,560 --> 00:13:22,320
so there are a lot of really good things

00:13:21,760 --> 00:13:25,279
about

00:13:22,320 --> 00:13:26,639
build packs and cloud foundry they raise

00:13:25,279 --> 00:13:28,639
the value line so

00:13:26,639 --> 00:13:30,240
application developers can focus on

00:13:28,639 --> 00:13:32,399
writing their application code

00:13:30,240 --> 00:13:34,160
instead of spending a lot of time

00:13:32,399 --> 00:13:35,360
reinventing the wheel in the devops

00:13:34,160 --> 00:13:37,040
space

00:13:35,360 --> 00:13:39,279
they provide a lot of security

00:13:37,040 --> 00:13:41,839
guarantees so

00:13:39,279 --> 00:13:43,519
your dependencies are always up to date

00:13:41,839 --> 00:13:45,120
as long as you're installing the latest

00:13:43,519 --> 00:13:46,000
build packs the build packs will keep

00:13:45,120 --> 00:13:49,360
your

00:13:46,000 --> 00:13:51,279
runtime dependencies up to date um

00:13:49,360 --> 00:13:53,519
if you're installing the latest root ifs

00:13:51,279 --> 00:13:54,320
any cves and your operating system

00:13:53,519 --> 00:13:56,880
packages

00:13:54,320 --> 00:13:59,199
are rolled out automatically so things

00:13:56,880 --> 00:14:01,199
that were a big problem for the

00:13:59,199 --> 00:14:03,279
rest of the industry like heartblade for

00:14:01,199 --> 00:14:06,480
example

00:14:03,279 --> 00:14:08,560
to patch that for an entire cf

00:14:06,480 --> 00:14:09,839
instance all you have to do is upload a

00:14:08,560 --> 00:14:12,000
new root fest and

00:14:09,839 --> 00:14:14,079
every application is updated and rolled

00:14:12,000 --> 00:14:17,199
forward

00:14:14,079 --> 00:14:19,199
um they produce consistent results

00:14:17,199 --> 00:14:20,959
and they're very robust uh folks have

00:14:19,199 --> 00:14:24,160
been using these for a lot of years

00:14:20,959 --> 00:14:25,279
and we've run into every wall that a

00:14:24,160 --> 00:14:28,560
person could run into

00:14:25,279 --> 00:14:30,240
containerizing a lot of these typical

00:14:28,560 --> 00:14:31,920
applications and we've developed a lot

00:14:30,240 --> 00:14:32,560
of best practices that now folks can

00:14:31,920 --> 00:14:35,760
just

00:14:32,560 --> 00:14:37,360
consume instead of reinventing some of

00:14:35,760 --> 00:14:38,720
the cons which have been a bit more

00:14:37,360 --> 00:14:41,760
brief here because we're going to

00:14:38,720 --> 00:14:44,399
dive into them more in detail

00:14:41,760 --> 00:14:46,320
are platform portability so can you run

00:14:44,399 --> 00:14:49,839
the artifact that's generated

00:14:46,320 --> 00:14:53,600
somewhere else um the getting

00:14:49,839 --> 00:14:56,639
started on ramp experience the

00:14:53,600 --> 00:15:00,079
speed of developing in the inner loop so

00:14:56,639 --> 00:15:01,199
how can i iterate on changes modularity

00:15:00,079 --> 00:15:04,720
of build packs

00:15:01,199 --> 00:15:06,720
it can be a bit hard to because build

00:15:04,720 --> 00:15:09,920
packs were originally monolithic

00:15:06,720 --> 00:15:11,920
um it'd be hard to inject a small change

00:15:09,920 --> 00:15:14,079
or a small piece of logic or switch out

00:15:11,920 --> 00:15:15,440
a piece of logic

00:15:14,079 --> 00:15:17,600
visibility into what's going on in the

00:15:15,440 --> 00:15:20,000
build process

00:15:17,600 --> 00:15:22,000
there are some edges around performance

00:15:20,000 --> 00:15:25,199
that could probably be improved

00:15:22,000 --> 00:15:26,320
and finally ubiquity so folks in cf and

00:15:25,199 --> 00:15:28,240
heroku are

00:15:26,320 --> 00:15:30,000
familiar with build packs but there's an

00:15:28,240 --> 00:15:33,279
education burden when you're

00:15:30,000 --> 00:15:34,800
bringing folks onto the platform it's a

00:15:33,279 --> 00:15:37,199
new model that needs to be explained to

00:15:34,800 --> 00:15:37,199
people

00:15:38,079 --> 00:15:41,199
so the goal of cloud native build packs

00:15:40,320 --> 00:15:44,240
was to keep

00:15:41,199 --> 00:15:46,880
all the good stuff in v2 build packs

00:15:44,240 --> 00:15:48,240
because we couldn't imagine a world

00:15:46,880 --> 00:15:50,639
without it

00:15:48,240 --> 00:15:51,440
while addressing some of these drawbacks

00:15:50,639 --> 00:15:53,279
um

00:15:51,440 --> 00:15:55,519
you want to bring this to a wider

00:15:53,279 --> 00:15:57,519
audience and hopefully make it an

00:15:55,519 --> 00:15:59,680
industry standard so it's not just a

00:15:57,519 --> 00:16:02,959
piece of the cloud foundry platform it

00:15:59,680 --> 00:16:06,079
is a standard for builds

00:16:02,959 --> 00:16:09,199
that is familiar to folks

00:16:06,079 --> 00:16:12,000
across the industry that's our big

00:16:09,199 --> 00:16:12,000
high level goal

00:16:12,240 --> 00:16:19,040
so starting with platform portability

00:16:15,839 --> 00:16:20,320
in v2 build packs for cf uh bill packs

00:16:19,040 --> 00:16:22,560
generate a droplet

00:16:20,320 --> 00:16:23,759
so in order to run it you need a

00:16:22,560 --> 00:16:26,079
platform that knows

00:16:23,759 --> 00:16:26,880
what a droplet is and what a root fs is

00:16:26,079 --> 00:16:30,720
and therefore

00:16:26,880 --> 00:16:34,320
how to start things up the lingua franca

00:16:30,720 --> 00:16:37,279
of most platforms these days is the oci

00:16:34,320 --> 00:16:38,480
image so one of the first things we did

00:16:37,279 --> 00:16:40,079
in cognitive build packs

00:16:38,480 --> 00:16:42,320
we were certain that the output of the

00:16:40,079 --> 00:16:44,160
build had to be an oci image

00:16:42,320 --> 00:16:47,120
not a droplet so that it could be

00:16:44,160 --> 00:16:49,120
runnable by any container runtime

00:16:47,120 --> 00:16:50,560
and any container scheduler

00:16:49,120 --> 00:16:55,199
orchestrating that runtime

00:16:50,560 --> 00:16:59,199
so kate stalker diego container d

00:16:55,199 --> 00:17:00,639
nomad once you've moved from creating a

00:16:59,199 --> 00:17:04,079
droplet to creating an oci

00:17:00,639 --> 00:17:06,319
image then the world opens

00:17:04,079 --> 00:17:08,640
up for the possibilities of how you can

00:17:06,319 --> 00:17:12,640
use that output and how you could

00:17:08,640 --> 00:17:12,640
move it and promote it between systems

00:17:13,839 --> 00:17:23,120
the on-ramp for v2 build packs ncf

00:17:18,079 --> 00:17:25,520
can be a bit tricky as you all know

00:17:23,120 --> 00:17:26,640
deploying your first cf instance on day

00:17:25,520 --> 00:17:29,840
one isn't

00:17:26,640 --> 00:17:32,880
the easiest thing for new users

00:17:29,840 --> 00:17:33,520
and to really try out build packs you

00:17:32,880 --> 00:17:36,720
require an

00:17:33,520 --> 00:17:38,480
instance of cf to get started um

00:17:36,720 --> 00:17:39,840
or you can push to heroku but again

00:17:38,480 --> 00:17:42,799
they're using a slightly different

00:17:39,840 --> 00:17:44,960
specification and different build packs

00:17:42,799 --> 00:17:48,559
for a while pcf dev helped a bit with

00:17:44,960 --> 00:17:51,679
this but the startup time for pcf dev

00:17:48,559 --> 00:17:52,960
has gotten slower as cloud foundry has

00:17:51,679 --> 00:17:54,480
grown

00:17:52,960 --> 00:17:56,480
and the demands of running all of cloud

00:17:54,480 --> 00:18:00,880
foundry in a single vm

00:17:56,480 --> 00:18:02,880
uh are extensive at this point

00:18:00,880 --> 00:18:04,960
with cloud native build packs you can

00:18:02,880 --> 00:18:06,960
download a tool provided by the project

00:18:04,960 --> 00:18:09,200
called the pax cli

00:18:06,960 --> 00:18:10,080
use docker on your local workstation and

00:18:09,200 --> 00:18:12,080
this provides a really

00:18:10,080 --> 00:18:13,360
easy way for folks who are curious about

00:18:12,080 --> 00:18:15,440
the project to

00:18:13,360 --> 00:18:16,880
try it out and run a build without

00:18:15,440 --> 00:18:19,200
having to

00:18:16,880 --> 00:18:21,600
have previously committed to installing

00:18:19,200 --> 00:18:25,200
a larger platform or have to learn

00:18:21,600 --> 00:18:25,200
about a larger ecosystem

00:18:27,520 --> 00:18:33,600
looking into the inner loop um

00:18:30,640 --> 00:18:34,320
it can be hard to iterate on changes in

00:18:33,600 --> 00:18:36,240
your code

00:18:34,320 --> 00:18:38,000
as an application developer using built

00:18:36,240 --> 00:18:41,600
packs and cf and

00:18:38,000 --> 00:18:46,080
see them run in a product container

00:18:41,600 --> 00:18:46,559
so one of the promises of build packs is

00:18:46,080 --> 00:18:50,000
that you

00:18:46,559 --> 00:18:51,679
don't have to do the work of figuring

00:18:50,000 --> 00:18:53,039
out how to set up your environment to

00:18:51,679 --> 00:18:55,360
get your application to run

00:18:53,039 --> 00:18:56,320
like i push it and it just runs and that

00:18:55,360 --> 00:18:59,760
works well

00:18:56,320 --> 00:19:01,600
until i want a a

00:18:59,760 --> 00:19:03,600
tighter inner loop so i want to you know

00:19:01,600 --> 00:19:07,760
edit a couple lines of code and then

00:19:03,600 --> 00:19:11,360
see those changes live and test them out

00:19:07,760 --> 00:19:14,880
because you're waiting for an entire

00:19:11,360 --> 00:19:18,000
upload staging droplet creation run

00:19:14,880 --> 00:19:20,880
in cf that can be slow so you can either

00:19:18,000 --> 00:19:21,840
adapt to that and use it despite the

00:19:20,880 --> 00:19:25,120
fact that it's slow

00:19:21,840 --> 00:19:26,960
or sort of reinvent the steps that are

00:19:25,120 --> 00:19:28,799
necessary to do this locally without the

00:19:26,960 --> 00:19:30,320
help of the build packs which is then

00:19:28,799 --> 00:19:31,760
sort of going back on our promise that

00:19:30,320 --> 00:19:36,160
you don't need to worry about

00:19:31,760 --> 00:19:38,400
how it runs uh in cloudiness build packs

00:19:36,160 --> 00:19:39,840
this is still a work in progress so i've

00:19:38,400 --> 00:19:41,679
highlighted things including

00:19:39,840 --> 00:19:43,760
build packs that i think are areas that

00:19:41,679 --> 00:19:45,919
we still need to focus

00:19:43,760 --> 00:19:47,120
on improving in order to meet our future

00:19:45,919 --> 00:19:50,400
goals

00:19:47,120 --> 00:19:51,360
so the pack plus docker workflow makes

00:19:50,400 --> 00:19:54,640
this

00:19:51,360 --> 00:19:57,360
inner loop quick iteration a bit faster

00:19:54,640 --> 00:19:57,919
uh but we don't think it's fast enough

00:19:57,360 --> 00:20:00,000
so

00:19:57,919 --> 00:20:01,280
one of our goals for this year is to

00:20:00,000 --> 00:20:05,039
introduce a

00:20:01,280 --> 00:20:07,600
develop api that would allow

00:20:05,039 --> 00:20:08,080
users to update a running container with

00:20:07,600 --> 00:20:10,640
small

00:20:08,080 --> 00:20:12,240
diffs so we'll create a build system

00:20:10,640 --> 00:20:13,919
that

00:20:12,240 --> 00:20:16,960
looks for changes in the application

00:20:13,919 --> 00:20:19,440
code and reruns a portion of the build

00:20:16,960 --> 00:20:21,200
and then streams the changes in and

00:20:19,440 --> 00:20:24,320
restarts the container

00:20:21,200 --> 00:20:27,039
and we think that this will provide a

00:20:24,320 --> 00:20:27,520
better workflow for developers who want

00:20:27,039 --> 00:20:29,440
to

00:20:27,520 --> 00:20:30,880
we're trying to test out changes but

00:20:29,440 --> 00:20:32,480
want to see them running in a

00:20:30,880 --> 00:20:35,840
product container to ensure that they're

00:20:32,480 --> 00:20:35,840
working correctly

00:20:36,400 --> 00:20:41,440
um in terms of modularity

00:20:39,440 --> 00:20:42,480
the original cf build packs are pretty

00:20:41,440 --> 00:20:46,320
monolithic

00:20:42,480 --> 00:20:46,799
so i spent a couple months maintaining

00:20:46,320 --> 00:20:49,919
the

00:20:46,799 --> 00:20:53,360
java build packs and

00:20:49,919 --> 00:20:54,000
the way folks typically modify the java

00:20:53,360 --> 00:20:56,400
build pack

00:20:54,000 --> 00:20:58,480
is to create a fork of the entire build

00:20:56,400 --> 00:21:00,080
pack and modify the one or two things

00:20:58,480 --> 00:21:02,320
that they'd like to change

00:21:00,080 --> 00:21:04,000
and then keep that fork to date for a

00:21:02,320 --> 00:21:07,280
long time

00:21:04,000 --> 00:21:09,520
uh in cloud native bill pack land

00:21:07,280 --> 00:21:11,520
there are things called composite build

00:21:09,520 --> 00:21:14,640
packs that are made up of

00:21:11,520 --> 00:21:17,679
smaller component build packs

00:21:14,640 --> 00:21:20,240
and you can add remove or replace

00:21:17,679 --> 00:21:21,760
a component in this larger build pack

00:21:20,240 --> 00:21:26,720
system

00:21:21,760 --> 00:21:29,440
that allows for more modularity

00:21:26,720 --> 00:21:30,880
so build packs that used to be you know

00:21:29,440 --> 00:21:33,039
the java buildback are now

00:21:30,880 --> 00:21:35,200
broken down into smaller single

00:21:33,039 --> 00:21:38,400
responsibility build packs

00:21:35,200 --> 00:21:40,000
we feel really good about how build pack

00:21:38,400 --> 00:21:41,520
composition works and the things it

00:21:40,000 --> 00:21:42,960
enables uh

00:21:41,520 --> 00:21:45,120
the project right now i don't think we

00:21:42,960 --> 00:21:47,520
feel great about the ux

00:21:45,120 --> 00:21:49,679
for this like how people add remove and

00:21:47,520 --> 00:21:51,440
replace build packs we think the

00:21:49,679 --> 00:21:53,200
fundamentals of the architecture are in

00:21:51,440 --> 00:21:53,840
a good place but we need to do more work

00:21:53,200 --> 00:21:58,960
to make it

00:21:53,840 --> 00:22:00,960
easy to perform these operations so

00:21:58,960 --> 00:22:02,320
diving into the modularity a bit more

00:22:00,960 --> 00:22:06,000
because i think it can be helpful

00:22:02,320 --> 00:22:08,080
to see an example of modular build pack

00:22:06,000 --> 00:22:09,039
so if we take the paquetto java build

00:22:08,080 --> 00:22:11,520
pack

00:22:09,039 --> 00:22:12,880
in cloud foundry this would be it's the

00:22:11,520 --> 00:22:17,360
java build pack

00:22:12,880 --> 00:22:19,600
in paquetto it is composed of a series

00:22:17,360 --> 00:22:21,760
of component build packs

00:22:19,600 --> 00:22:23,120
so we have one build pack that installs

00:22:21,760 --> 00:22:25,280
ca starts

00:22:23,120 --> 00:22:26,400
with the bellsoft liberia build pack

00:22:25,280 --> 00:22:30,159
that can install

00:22:26,400 --> 00:22:31,840
jdks and jres we have a

00:22:30,159 --> 00:22:34,159
variety of builds this in the build

00:22:31,840 --> 00:22:35,760
packs so i put gradle here

00:22:34,159 --> 00:22:37,840
all of the build packs in here can't fit

00:22:35,760 --> 00:22:41,039
on the slides these are just examples

00:22:37,840 --> 00:22:44,000
but there's maven sbt line engine

00:22:41,039 --> 00:22:44,720
there's like a variety of build system

00:22:44,000 --> 00:22:47,760
build packs

00:22:44,720 --> 00:22:49,440
that you could that exist in our java

00:22:47,760 --> 00:22:52,400
build pack where you could compose into

00:22:49,440 --> 00:22:53,840
your own build pack

00:22:52,400 --> 00:22:56,400
there are build packs that know how to

00:22:53,840 --> 00:22:58,400
launch particular types of applications

00:22:56,400 --> 00:23:00,720
like a build pack that contributes a

00:22:58,400 --> 00:23:03,120
start command for an executable jar

00:23:00,720 --> 00:23:04,720
along with all of the tuning that goes

00:23:03,120 --> 00:23:07,760
along with launching it correctly

00:23:04,720 --> 00:23:12,159
we have patchy tomcat build pack

00:23:07,760 --> 00:23:12,159
we have build packs that

00:23:12,320 --> 00:23:16,000
know about specific types of

00:23:14,559 --> 00:23:18,159
applications

00:23:16,000 --> 00:23:19,440
like we have the spring boot build pack

00:23:18,159 --> 00:23:21,760
that will

00:23:19,440 --> 00:23:24,240
look at the version of spring boot

00:23:21,760 --> 00:23:26,320
that's in your application

00:23:24,240 --> 00:23:28,080
add some metadata to the outside of the

00:23:26,320 --> 00:23:29,919
image so you can inspect it

00:23:28,080 --> 00:23:31,919
maybe do a little bit of tuning on the

00:23:29,919 --> 00:23:32,640
application so it says oh i know this is

00:23:31,919 --> 00:23:34,400
a

00:23:32,640 --> 00:23:36,080
reactive app i'm going to reduce the

00:23:34,400 --> 00:23:39,200
number of threads so we have

00:23:36,080 --> 00:23:42,480
modular build packs like that that know

00:23:39,200 --> 00:23:44,640
how to tune and annotate

00:23:42,480 --> 00:23:46,799
an image when it's using a particular

00:23:44,640 --> 00:23:48,400
technology

00:23:46,799 --> 00:23:51,200
and then we have build packs that

00:23:48,400 --> 00:23:54,320
provide integrations for

00:23:51,200 --> 00:23:57,279
apm systems like google stackdriver

00:23:54,320 --> 00:23:58,000
azure application insights and build

00:23:57,279 --> 00:23:59,760
packs that do

00:23:58,000 --> 00:24:02,559
pretty generic things like we have an

00:23:59,760 --> 00:24:05,840
image labels build pack that would allow

00:24:02,559 --> 00:24:09,520
any user to apply any arbitrary image

00:24:05,840 --> 00:24:09,520
label to the outside of their image

00:24:09,840 --> 00:24:13,919
so thinking about how this architecture

00:24:12,640 --> 00:24:16,960
affects you

00:24:13,919 --> 00:24:18,080
as a user you can imagine that if you're

00:24:16,960 --> 00:24:20,559
a big

00:24:18,080 --> 00:24:21,120
azure user you might want to swap out

00:24:20,559 --> 00:24:24,799
the

00:24:21,120 --> 00:24:27,200
bells off liberica build pack with a

00:24:24,799 --> 00:24:29,840
azul zulu build pack so you get a

00:24:27,200 --> 00:24:31,679
different jdk and jre

00:24:29,840 --> 00:24:34,400
down here i've taken out the google

00:24:31,679 --> 00:24:37,039
stackdriver build pack because i know

00:24:34,400 --> 00:24:38,240
everyone using this wants to use azure

00:24:37,039 --> 00:24:40,559
application insights

00:24:38,240 --> 00:24:42,640
because this is an azure build pack so

00:24:40,559 --> 00:24:45,840
you can

00:24:42,640 --> 00:24:47,520
by adding removing replacing components

00:24:45,840 --> 00:24:49,840
you can

00:24:47,520 --> 00:24:52,240
compose your own vision of what the

00:24:49,840 --> 00:24:53,679
ideal java build pack would be

00:24:52,240 --> 00:24:55,679
this happens to be a build pack that

00:24:53,679 --> 00:24:57,520
paquetto provides

00:24:55,679 --> 00:24:59,360
we have an azure flavor of the java

00:24:57,520 --> 00:25:00,000
build pack where we've remixed our own

00:24:59,360 --> 00:25:02,960
components

00:25:00,000 --> 00:25:03,919
but as you can imagine you could do this

00:25:02,960 --> 00:25:06,960
yourself

00:25:03,919 --> 00:25:08,880
right so maybe you want the amazon

00:25:06,960 --> 00:25:09,200
coretto build pack you've written your

00:25:08,880 --> 00:25:10,960
own

00:25:09,200 --> 00:25:12,960
new relic integration that you'd like to

00:25:10,960 --> 00:25:14,080
stick at the end here you can see how

00:25:12,960 --> 00:25:17,760
this

00:25:14,080 --> 00:25:19,760
modularity allows folks to

00:25:17,760 --> 00:25:22,080
design a build system in a more

00:25:19,760 --> 00:25:24,080
intuitive way

00:25:22,080 --> 00:25:25,520
and then you can obviously take

00:25:24,080 --> 00:25:27,120
components of these and use them in a

00:25:25,520 --> 00:25:29,840
totally different context

00:25:27,120 --> 00:25:30,880
so the ca search build pack and the

00:25:29,840 --> 00:25:33,679
image labels

00:25:30,880 --> 00:25:34,960
build pack are not specific to java or

00:25:33,679 --> 00:25:38,159
paquetto at all really

00:25:34,960 --> 00:25:39,520
so you could have a totally different

00:25:38,159 --> 00:25:41,440
system that runs

00:25:39,520 --> 00:25:43,039
a build pack for running functions

00:25:41,440 --> 00:25:45,200
written in rust but maybe

00:25:43,039 --> 00:25:47,440
you know you want to stick these two

00:25:45,200 --> 00:25:51,360
components that paquetto creates

00:25:47,440 --> 00:25:51,360
in your build pack to get these features

00:25:53,440 --> 00:25:58,799
moving into another

00:25:56,880 --> 00:26:00,799
pain point that we have seen in our

00:25:58,799 --> 00:26:03,200
experience running build packs and cf

00:26:00,799 --> 00:26:05,279
that we would like to improve in the

00:26:03,200 --> 00:26:07,679
world of cloud native build packs

00:26:05,279 --> 00:26:09,200
is visibility into what's happening in

00:26:07,679 --> 00:26:11,039
the build

00:26:09,200 --> 00:26:13,679
folks sometimes talk about how build

00:26:11,039 --> 00:26:17,039
pecs are too magic

00:26:13,679 --> 00:26:19,039
and magic is a good word and a bad word

00:26:17,039 --> 00:26:20,640
to some extent people want magic they

00:26:19,039 --> 00:26:23,360
would like it to just work

00:26:20,640 --> 00:26:24,080
and they would like to not have to put a

00:26:23,360 --> 00:26:26,640
lot of effort

00:26:24,080 --> 00:26:29,360
into getting it to work right so magic

00:26:26,640 --> 00:26:32,880
can be really good

00:26:29,360 --> 00:26:33,919
uh but we found in our experience that

00:26:32,880 --> 00:26:38,559
it's not always

00:26:33,919 --> 00:26:41,840
true that people are okay you know

00:26:38,559 --> 00:26:43,760
the famous haiku here's my application

00:26:41,840 --> 00:26:45,520
just run it in the cloud for me i don't

00:26:43,760 --> 00:26:47,679
care how

00:26:45,520 --> 00:26:50,240
people don't want to be forced to care

00:26:47,679 --> 00:26:53,360
how but they want to be able to

00:26:50,240 --> 00:26:55,840
learn how or tweak how

00:26:53,360 --> 00:26:56,480
when they find a situation that they

00:26:55,840 --> 00:26:59,600
care

00:26:56,480 --> 00:27:01,679
about it um so

00:26:59,600 --> 00:27:03,840
we found that folks both want more

00:27:01,679 --> 00:27:05,520
visibility into what's happening

00:27:03,840 --> 00:27:08,799
in their build pack the build process

00:27:05,520 --> 00:27:10,400
itself and visibility into the output

00:27:08,799 --> 00:27:12,799
so they want to know exactly what we've

00:27:10,400 --> 00:27:14,720
installed in this image so they can

00:27:12,799 --> 00:27:16,799
make sure it meets their open source

00:27:14,720 --> 00:27:19,520
licensing requirements and

00:27:16,799 --> 00:27:22,159
audit requirements and figure out which

00:27:19,520 --> 00:27:24,000
images have cves in them

00:27:22,159 --> 00:27:25,840
so this is a problem we've taken really

00:27:24,000 --> 00:27:28,399
seriously when architecting coordinated

00:27:25,840 --> 00:27:28,399
build packs

00:27:28,559 --> 00:27:34,399
we have created a bill of materials

00:27:31,840 --> 00:27:37,039
which gets applied as an image label

00:27:34,399 --> 00:27:38,159
to every image created by cloud native

00:27:37,039 --> 00:27:40,640
build packs

00:27:38,159 --> 00:27:41,600
so as the build packs contribute things

00:27:40,640 --> 00:27:43,440
to the image

00:27:41,600 --> 00:27:45,279
they add descriptions of what they've

00:27:43,440 --> 00:27:46,960
contributed to the bill of materials

00:27:45,279 --> 00:27:48,880
and at the end you should get a build

00:27:46,960 --> 00:27:51,200
materials describing everything in your

00:27:48,880 --> 00:27:51,200
image

00:27:51,520 --> 00:27:56,000
we're still doing some work to improve

00:27:53,679 --> 00:27:58,000
that so we'd like to

00:27:56,000 --> 00:28:00,159
right now this works for build pack

00:27:58,000 --> 00:28:03,600
provided dependencies and there's a

00:28:00,159 --> 00:28:04,240
different form format where you can get

00:28:03,600 --> 00:28:06,320
the

00:28:04,240 --> 00:28:08,320
uh dependencies that came on the base

00:28:06,320 --> 00:28:11,520
image we're working on

00:28:08,320 --> 00:28:14,480
creating everything in one place

00:28:11,520 --> 00:28:16,080
that's totally comprehensive uh we're

00:28:14,480 --> 00:28:18,960
thinking a lot about the

00:28:16,080 --> 00:28:21,039
format of this bill of materials right

00:28:18,960 --> 00:28:22,320
now it's a custom format but do we want

00:28:21,039 --> 00:28:25,600
to moving to

00:28:22,320 --> 00:28:28,080
spdx or cyclone dx or something that can

00:28:25,600 --> 00:28:31,360
more easily integrate with other tools

00:28:28,080 --> 00:28:34,480
in the ecosystem

00:28:31,360 --> 00:28:35,360
and back to our topic of magic cutting

00:28:34,480 --> 00:28:39,120
and build packs

00:28:35,360 --> 00:28:41,840
are still a little magic

00:28:39,120 --> 00:28:44,159
the complaint that folks don't know

00:28:41,840 --> 00:28:47,279
exactly what the build system is doing

00:28:44,159 --> 00:28:49,360
is not a totally solved problem yet

00:28:47,279 --> 00:28:51,120
and we've just started looking into ways

00:28:49,360 --> 00:28:53,440
to improve this either by

00:28:51,120 --> 00:28:54,240
creating better visualizations of the

00:28:53,440 --> 00:28:56,240
build

00:28:54,240 --> 00:28:58,480
creating interactive builds where you

00:28:56,240 --> 00:29:00,240
could hijack a particular

00:28:58,480 --> 00:29:02,559
component build pack or run them one at

00:29:00,240 --> 00:29:05,600
a time so this is

00:29:02,559 --> 00:29:10,000
a goal that is in progress

00:29:05,600 --> 00:29:10,000
but we think we could do even better

00:29:10,840 --> 00:29:17,840
um in terms of performance there are

00:29:14,320 --> 00:29:21,120
a couple ways that v2 build packs for cf

00:29:17,840 --> 00:29:23,679
are slightly inefficient

00:29:21,120 --> 00:29:24,320
so they end up storing many copies of

00:29:23,679 --> 00:29:27,120
the same

00:29:24,320 --> 00:29:27,840
artifact and using a lot of storage so

00:29:27,120 --> 00:29:30,240
if you have

00:29:27,840 --> 00:29:32,960
thousands of java apps and each one of

00:29:30,240 --> 00:29:35,200
those java apps has a jre in it

00:29:32,960 --> 00:29:36,559
because of the way we handle droplets

00:29:35,200 --> 00:29:39,120
you're going to end up with

00:29:36,559 --> 00:29:39,840
thousands of copies of the same jre that

00:29:39,120 --> 00:29:43,360
you're

00:29:39,840 --> 00:29:47,600
paying rent on in your storage location

00:29:43,360 --> 00:29:50,240
and as you stream these droplets to

00:29:47,600 --> 00:29:51,520
the diego cells that run your apps

00:29:50,240 --> 00:29:54,559
you're going to end up with

00:29:51,520 --> 00:29:56,960
thousands of copies of the same jre

00:29:54,559 --> 00:29:58,399
on the cells and you're going to need to

00:29:56,960 --> 00:30:00,640
re-download

00:29:58,399 --> 00:30:02,320
the whole jre again every time you push

00:30:00,640 --> 00:30:04,559
a new application even if it's already

00:30:02,320 --> 00:30:04,559
there

00:30:06,399 --> 00:30:09,520
it's not terribly slow but it can be a

00:30:08,559 --> 00:30:12,000
little bit slow

00:30:09,520 --> 00:30:14,159
slower than it should be if nothing has

00:30:12,000 --> 00:30:17,200
changed

00:30:14,159 --> 00:30:20,799
in cognitive build packs land

00:30:17,200 --> 00:30:23,600
we've been trying to use the layers in

00:30:20,799 --> 00:30:27,120
the oci image and intelligent way

00:30:23,600 --> 00:30:30,159
to reduce duplication

00:30:27,120 --> 00:30:33,360
and unnecessary data transfer

00:30:30,159 --> 00:30:35,520
so if you're building an

00:30:33,360 --> 00:30:37,679
app with the paquetto drop a build pack

00:30:35,520 --> 00:30:40,080
and it has a certain jre in it

00:30:37,679 --> 00:30:41,200
that layer is going to look identical to

00:30:40,080 --> 00:30:43,520
any other app

00:30:41,200 --> 00:30:45,039
built with that build pack using the

00:30:43,520 --> 00:30:47,360
same jre so you only need

00:30:45,039 --> 00:30:49,679
one copy of it in the registry and you

00:30:47,360 --> 00:30:50,799
only need one copy of it on the worker

00:30:49,679 --> 00:30:55,039
note

00:30:50,799 --> 00:30:55,039
and this is a big deal in terms of

00:30:56,159 --> 00:31:02,640
data transfer and data storage

00:30:59,600 --> 00:31:03,519
also as the oci image is built by build

00:31:02,640 --> 00:31:05,919
packs

00:31:03,519 --> 00:31:07,279
only layers that change need to be

00:31:05,919 --> 00:31:09,360
rebuilt and transferred

00:31:07,279 --> 00:31:11,279
so build packs can opt in to using a

00:31:09,360 --> 00:31:15,519
layer that's already on the registry

00:31:11,279 --> 00:31:17,679
directly so this means that

00:31:15,519 --> 00:31:18,559
you only need to wait for the parts of

00:31:17,679 --> 00:31:20,880
your system

00:31:18,559 --> 00:31:22,880
that have changed to rebuild and upload

00:31:20,880 --> 00:31:25,519
you're never going to wait

00:31:22,880 --> 00:31:26,159
for the same jre to upload to storage

00:31:25,519 --> 00:31:28,399
again

00:31:26,159 --> 00:31:30,880
because you changed a single app file we

00:31:28,399 --> 00:31:33,840
can just reuse that jre layer

00:31:30,880 --> 00:31:34,480
and we've broken up your application

00:31:33,840 --> 00:31:36,880
into

00:31:34,480 --> 00:31:38,159
what we call slices which are layers

00:31:36,880 --> 00:31:39,679
where we group things that we think

00:31:38,159 --> 00:31:42,880
change and unison together

00:31:39,679 --> 00:31:45,360
so you're gonna get one tiny

00:31:42,880 --> 00:31:46,000
layer upload that contains your change

00:31:45,360 --> 00:31:48,320
instead of

00:31:46,000 --> 00:31:50,559
uh rebuild and re-upload of the whole

00:31:48,320 --> 00:31:52,000
system

00:31:50,559 --> 00:31:54,240
there are still areas where we could be

00:31:52,000 --> 00:31:54,799
improving performance uh cognitive bill

00:31:54,240 --> 00:31:57,919
packs is

00:31:54,799 --> 00:31:58,799
great on a rebuild but in the case where

00:31:57,919 --> 00:32:00,960
you're not using an

00:31:58,799 --> 00:32:02,399
offline version of a build pack we do

00:32:00,960 --> 00:32:05,200
have a bit of a performance

00:32:02,399 --> 00:32:06,320
problem on the first build where let's

00:32:05,200 --> 00:32:09,519
say i'm building

00:32:06,320 --> 00:32:11,279
10 different java apps it's still going

00:32:09,519 --> 00:32:14,159
to go ahead and download that

00:32:11,279 --> 00:32:14,559
jre 10 times once for the first build of

00:32:14,159 --> 00:32:17,679
each

00:32:14,559 --> 00:32:20,399
artifact and that feels

00:32:17,679 --> 00:32:22,399
like an unnecessary performance penalty

00:32:20,399 --> 00:32:22,960
to us or looking into better ways to

00:32:22,399 --> 00:32:25,679
handle

00:32:22,960 --> 00:32:27,120
asset caching so that even that first

00:32:25,679 --> 00:32:30,159
build can be really fast

00:32:27,120 --> 00:32:32,080
if you're if you're

00:32:30,159 --> 00:32:35,679
using components that you've used before

00:32:32,080 --> 00:32:35,679
and they they should be available to you

00:32:38,000 --> 00:32:44,880
ubiquity so we're all familiar with

00:32:42,159 --> 00:32:46,240
cf build packs uh cloud foundry and

00:32:44,880 --> 00:32:48,080
heroku users

00:32:46,240 --> 00:32:49,600
are very familiar with the concept of

00:32:48,080 --> 00:32:51,679
build packs but

00:32:49,600 --> 00:32:54,080
for folks who haven't used either one of

00:32:51,679 --> 00:32:56,480
these platforms

00:32:54,080 --> 00:32:57,360
most people are not deeply familiar with

00:32:56,480 --> 00:32:59,679
build packs

00:32:57,360 --> 00:33:00,799
and therefore if you want to get someone

00:32:59,679 --> 00:33:03,360
excited about

00:33:00,799 --> 00:33:04,559
cloud foundry you have the burden of

00:33:03,360 --> 00:33:07,039
education of

00:33:04,559 --> 00:33:07,840
teaching them about this whole new build

00:33:07,039 --> 00:33:10,960
system

00:33:07,840 --> 00:33:12,559
and you know walking them through

00:33:10,960 --> 00:33:15,760
concerns and

00:33:12,559 --> 00:33:18,080
talking about the potential upsides uh

00:33:15,760 --> 00:33:21,600
the fact that this technology is

00:33:18,080 --> 00:33:21,600
specific to a couple platforms

00:33:21,679 --> 00:33:27,200
makes it puts a burden

00:33:25,200 --> 00:33:28,480
on the providers of those platforms to

00:33:27,200 --> 00:33:30,960
do a lot of education about the

00:33:28,480 --> 00:33:30,960
technology

00:33:31,840 --> 00:33:35,360
our goal for cloud native build packs is

00:33:34,000 --> 00:33:39,279
to become

00:33:35,360 --> 00:33:41,120
a standard and be used more broadly

00:33:39,279 --> 00:33:42,880
to still be a core component of cloud

00:33:41,120 --> 00:33:47,200
foundry but to be a

00:33:42,880 --> 00:33:50,720
component of platforms and

00:33:47,200 --> 00:33:54,799
ci tools and a variety of integrations

00:33:50,720 --> 00:33:57,919
so that it's a familiar

00:33:54,799 --> 00:34:00,480
concept and the benefits

00:33:57,919 --> 00:34:02,960
and drawbacks of using build packs are

00:34:00,480 --> 00:34:05,679
more widely known

00:34:02,960 --> 00:34:06,480
and to that extent we've been pretty

00:34:05,679 --> 00:34:10,399
successful

00:34:06,480 --> 00:34:11,599
so far we are the project is now in the

00:34:10,399 --> 00:34:15,040
incubation stage

00:34:11,599 --> 00:34:18,960
in the cncf and has been

00:34:15,040 --> 00:34:20,879
adopted by a range of

00:34:18,960 --> 00:34:22,720
cloud providers that are building

00:34:20,879 --> 00:34:25,919
platforms

00:34:22,720 --> 00:34:28,960
by companies that are using it

00:34:25,919 --> 00:34:30,960
to build their own images as end users

00:34:28,960 --> 00:34:32,879
by folks that want to provide build

00:34:30,960 --> 00:34:34,639
packs

00:34:32,879 --> 00:34:36,079
we still have a ways to go we feel

00:34:34,639 --> 00:34:38,480
really good about

00:34:36,079 --> 00:34:40,639
the progress we've made so far but

00:34:38,480 --> 00:34:41,520
average developers are still unfamiliar

00:34:40,639 --> 00:34:45,280
with build packs

00:34:41,520 --> 00:34:45,280
so there's more work to do here

00:34:46,000 --> 00:34:52,240
so diving into this a bit deeper uh

00:34:49,200 --> 00:34:55,200
on the left you can see an

00:34:52,240 --> 00:34:56,320
incomplete list of platforms that have

00:34:55,200 --> 00:34:58,960
adopted

00:34:56,320 --> 00:35:00,160
build packs like incorporated a cloud

00:34:58,960 --> 00:35:03,599
native build pack

00:35:00,160 --> 00:35:07,040
build as a feature in their platform

00:35:03,599 --> 00:35:08,079
and sort of a a graphic that can help us

00:35:07,040 --> 00:35:11,599
understand more

00:35:08,079 --> 00:35:14,480
what incubating in the cncf means

00:35:11,599 --> 00:35:15,119
so we are past the stage where we're

00:35:14,480 --> 00:35:18,400
getting

00:35:15,119 --> 00:35:21,760
the early adopters and we're trying to

00:35:18,400 --> 00:35:23,040
we're moving into a phase where we would

00:35:21,760 --> 00:35:26,000
consider our users

00:35:23,040 --> 00:35:27,599
the early majority and hopefully we'll

00:35:26,000 --> 00:35:31,839
be

00:35:27,599 --> 00:35:31,839
continuing to grow from here

00:35:33,920 --> 00:35:37,440
so our big goal is not just to build a

00:35:36,640 --> 00:35:40,880
great tool

00:35:37,440 --> 00:35:43,359
it is to build an ecosystem

00:35:40,880 --> 00:35:45,119
and to understand how that shapes the

00:35:43,359 --> 00:35:47,680
project i'm going to dive into the

00:35:45,119 --> 00:35:50,880
architecture a little bit

00:35:47,680 --> 00:35:54,960
so the cloud native build packs project

00:35:50,880 --> 00:35:57,839
at its core is a specification project

00:35:54,960 --> 00:35:59,040
in that specification we've defined two

00:35:57,839 --> 00:36:03,359
apis

00:35:59,040 --> 00:36:06,560
a bill pack api and a platform api

00:36:03,359 --> 00:36:08,160
and we ship a component that's used by

00:36:06,560 --> 00:36:11,440
all of the adopters

00:36:08,160 --> 00:36:15,200
that understands both of those apis

00:36:11,440 --> 00:36:15,839
called the life cycle so the build pack

00:36:15,200 --> 00:36:18,480
api

00:36:15,839 --> 00:36:19,359
describes what contract a bill pack

00:36:18,480 --> 00:36:22,880
needs to meet

00:36:19,359 --> 00:36:26,000
in order to participate in the system

00:36:22,880 --> 00:36:29,040
and the life cycle exposes

00:36:26,000 --> 00:36:32,720
an api to platforms

00:36:29,040 --> 00:36:33,119
that then allow platforms more easily

00:36:32,720 --> 00:36:35,839
without

00:36:33,119 --> 00:36:37,280
understanding the details of how build

00:36:35,839 --> 00:36:40,160
packs run or how their

00:36:37,280 --> 00:36:42,560
output is transformed into an image to

00:36:40,160 --> 00:36:46,240
offer a

00:36:42,560 --> 00:36:47,200
cloud native build experience by driving

00:36:46,240 --> 00:36:50,400
the lifecycle

00:36:47,200 --> 00:36:53,040
with the platform api

00:36:50,400 --> 00:36:54,560
so lifecycle is a cloud native build

00:36:53,040 --> 00:36:56,800
packs

00:36:54,560 --> 00:36:58,320
component that we ship you could

00:36:56,800 --> 00:36:59,920
implement your own by implementing the

00:36:58,320 --> 00:37:01,359
specifications but that's generally not

00:36:59,920 --> 00:37:03,200
how it's done most people are just using

00:37:01,359 --> 00:37:05,359
our lifecycle

00:37:03,200 --> 00:37:07,280
but there are a variety of folks who

00:37:05,359 --> 00:37:10,000
have implemented

00:37:07,280 --> 00:37:10,960
either build packs or platforms to

00:37:10,000 --> 00:37:14,000
participate

00:37:10,960 --> 00:37:14,000
in this ecosystem

00:37:16,000 --> 00:37:19,359
so the first platform that folks usually

00:37:18,320 --> 00:37:22,400
are introduced to

00:37:19,359 --> 00:37:23,280
is the pax cli this platform is actually

00:37:22,400 --> 00:37:26,880
provided

00:37:23,280 --> 00:37:27,520
by the project itself we thought it was

00:37:26,880 --> 00:37:31,119
important

00:37:27,520 --> 00:37:32,560
to have a smooth local getting started

00:37:31,119 --> 00:37:34,839
experience where people could try out

00:37:32,560 --> 00:37:37,839
build packs and a cli tool is great for

00:37:34,839 --> 00:37:37,839
that

00:37:39,119 --> 00:37:44,320
but since then like

00:37:42,480 --> 00:37:46,560
interesting developments that we didn't

00:37:44,320 --> 00:37:47,599
foresee have allowed this technology to

00:37:46,560 --> 00:37:49,359
reach more users

00:37:47,599 --> 00:37:51,920
so the spring boot team was pretty

00:37:49,359 --> 00:37:54,880
excited about cloud native build packs

00:37:51,920 --> 00:37:56,320
um and also the teams that spring that

00:37:54,880 --> 00:37:58,560
are building native images

00:37:56,320 --> 00:38:00,720
like java native images where the build

00:37:58,560 --> 00:38:03,839
is a

00:38:00,720 --> 00:38:05,520
is a difficult process wanted to provide

00:38:03,839 --> 00:38:07,440
a more

00:38:05,520 --> 00:38:09,280
standard experience for how to get a

00:38:07,440 --> 00:38:10,960
container that implements all the best

00:38:09,280 --> 00:38:14,400
practices for running spring

00:38:10,960 --> 00:38:16,079
so they implemented a platform that

00:38:14,400 --> 00:38:17,520
drives the lifecycle using the platform

00:38:16,079 --> 00:38:21,040
api and it's a

00:38:17,520 --> 00:38:24,000
gradle and maven plugin so

00:38:21,040 --> 00:38:25,599
because we made these the specification

00:38:24,000 --> 00:38:27,760
the first class concept

00:38:25,599 --> 00:38:29,119
the spring boot team was able to solve a

00:38:27,760 --> 00:38:31,520
problem

00:38:29,119 --> 00:38:32,720
that their users had and at the same

00:38:31,520 --> 00:38:36,880
time

00:38:32,720 --> 00:38:39,760
create an experience that was really

00:38:36,880 --> 00:38:40,960
familiar and native and great for java

00:38:39,760 --> 00:38:43,280
java developers

00:38:40,960 --> 00:38:47,839
and has really expanded the ecosystem of

00:38:43,280 --> 00:38:47,839
folks using cloud native build packs

00:38:48,800 --> 00:38:55,680
another platform of note is kpac which

00:38:52,160 --> 00:38:59,520
runs cloud native build packs builds

00:38:55,680 --> 00:39:02,400
in kubernetes in a fully declarative way

00:38:59,520 --> 00:39:03,440
so whereas pac is a great platform for

00:39:02,400 --> 00:39:05,440
getting started

00:39:03,440 --> 00:39:07,920
k-pac is very intuitive for folks who

00:39:05,440 --> 00:39:11,839
are familiar with kate's

00:39:07,920 --> 00:39:14,480
and it is great for running images at

00:39:11,839 --> 00:39:15,839
building images at scale so because it's

00:39:14,480 --> 00:39:18,480
using the declarative

00:39:15,839 --> 00:39:20,480
engine and kates it will rebuild your

00:39:18,480 --> 00:39:22,160
image when a

00:39:20,480 --> 00:39:24,480
build pack has changed with new

00:39:22,160 --> 00:39:26,480
dependencies when a new base image comes

00:39:24,480 --> 00:39:28,079
out so you just sort of describe

00:39:26,480 --> 00:39:29,599
what you want your images to look like

00:39:28,079 --> 00:39:31,760
and it's constantly

00:39:29,599 --> 00:39:32,720
spitting out builds so we can look at a

00:39:31,760 --> 00:39:35,760
slightly

00:39:32,720 --> 00:39:38,320
outdated diagram here but you take your

00:39:35,760 --> 00:39:39,440
image you give it a builder which

00:39:38,320 --> 00:39:41,520
contains

00:39:39,440 --> 00:39:42,720
a list of build packs to build you give

00:39:41,520 --> 00:39:47,280
it some

00:39:42,720 --> 00:39:47,280
secrets and some source code and anytime

00:39:47,520 --> 00:39:51,040
the latest build is out of date either

00:39:50,320 --> 00:39:53,119
because

00:39:51,040 --> 00:39:54,800
you got a new base image or there's an

00:39:53,119 --> 00:39:56,400
update to your source code it spits out

00:39:54,800 --> 00:39:58,400
a new build which puts a new image in

00:39:56,400 --> 00:40:02,960
the container registry

00:39:58,400 --> 00:40:04,640
and you get this declarative engine for

00:40:02,960 --> 00:40:08,839
building images that

00:40:04,640 --> 00:40:11,280
are are always secure and always the

00:40:08,839 --> 00:40:14,400
latest

00:40:11,280 --> 00:40:15,920
and then you can compose even building

00:40:14,400 --> 00:40:18,400
on top of other platforms

00:40:15,920 --> 00:40:20,480
so cf for kate's is using kpac to create

00:40:18,400 --> 00:40:23,599
an entire paz experience

00:40:20,480 --> 00:40:27,040
so well kpac is a great kate's native

00:40:23,599 --> 00:40:30,079
build experience we all love the cf

00:40:27,040 --> 00:40:32,400
push experience so something like cf for

00:40:30,079 --> 00:40:33,520
kate's can use kpac as a build system to

00:40:32,400 --> 00:40:35,119
create an even

00:40:33,520 --> 00:40:38,960
higher level platform that meets the

00:40:35,119 --> 00:40:42,160
needs of different types of users

00:40:38,960 --> 00:40:43,359
and this works across the board so

00:40:42,160 --> 00:40:47,119
there's a circle ci

00:40:43,359 --> 00:40:49,440
orb that uses the pax cli so

00:40:47,119 --> 00:40:51,440
we're seeing this ecosystem of tools

00:40:49,440 --> 00:40:55,760
that build on tools start to emerge

00:40:51,440 --> 00:40:57,680
and that was our goal and it seems like

00:40:55,760 --> 00:41:00,880
that piece of how we saw the ecosystem

00:40:57,680 --> 00:41:00,880
evolving is on track

00:41:01,200 --> 00:41:07,760
on the other side here we have

00:41:04,640 --> 00:41:08,160
build pack implementers so pocketo is

00:41:07,760 --> 00:41:11,520
the

00:41:08,160 --> 00:41:13,119
cloud foundry foundation implementations

00:41:11,520 --> 00:41:15,359
of the

00:41:13,119 --> 00:41:16,960
cloud native build packs build pack api

00:41:15,359 --> 00:41:18,319
but we are not the only ones who've

00:41:16,960 --> 00:41:20,160
written bill packs

00:41:18,319 --> 00:41:22,480
google has built packs heroku has built

00:41:20,160 --> 00:41:25,599
packs there are vmware

00:41:22,480 --> 00:41:26,720
tons of build packs we know of end users

00:41:25,599 --> 00:41:28,720
who are

00:41:26,720 --> 00:41:30,640
doing some combination of all of these

00:41:28,720 --> 00:41:31,440
like using picato build packs but maybe

00:41:30,640 --> 00:41:33,440
they've written

00:41:31,440 --> 00:41:34,960
one for themselves we have folks who are

00:41:33,440 --> 00:41:38,480
looking into building

00:41:34,960 --> 00:41:40,319
build packs specifically for creating

00:41:38,480 --> 00:41:43,760
functions

00:41:40,319 --> 00:41:44,480
so this is another area where you can

00:41:43,760 --> 00:41:47,119
inject

00:41:44,480 --> 00:41:48,720
in and because of the specification

00:41:47,119 --> 00:41:50,240
everyone gets to worry about just the

00:41:48,720 --> 00:41:52,160
piece they want

00:41:50,240 --> 00:41:53,680
so implementing a build pack is a

00:41:52,160 --> 00:41:54,880
constrained problem and someone who

00:41:53,680 --> 00:41:56,800
wants to

00:41:54,880 --> 00:41:58,240
extend the build system only needs to

00:41:56,800 --> 00:42:02,240
worry about

00:41:58,240 --> 00:42:05,119
solving this problem someone who has a

00:42:02,240 --> 00:42:06,800
vision for a platform and that platform

00:42:05,119 --> 00:42:07,920
needs a build functionality

00:42:06,800 --> 00:42:09,680
only needs to worry about this end of

00:42:07,920 --> 00:42:11,760
the problem and they can just plug in

00:42:09,680 --> 00:42:13,760
the uh

00:42:11,760 --> 00:42:17,839
the cloud native build packs lifecycle

00:42:13,760 --> 00:42:17,839
and engine

00:42:18,720 --> 00:42:22,240
so to talk about paquetto a little bit

00:42:20,480 --> 00:42:24,800
more the goal of paquetto

00:42:22,240 --> 00:42:26,000
is to provide best-in-class build pack

00:42:24,800 --> 00:42:28,000
implementations

00:42:26,000 --> 00:42:30,319
that we hope will become the default for

00:42:28,000 --> 00:42:32,560
people who are looking to run cognitive

00:42:30,319 --> 00:42:36,319
build packs in whatever platform

00:42:32,560 --> 00:42:38,960
so we have implementations for all of

00:42:36,319 --> 00:42:40,400
the most commonly used major language

00:42:38,960 --> 00:42:43,760
groups

00:42:40,400 --> 00:42:47,040
using our experience in cf to predict

00:42:43,760 --> 00:42:51,040
what will be the most popular languages

00:42:47,040 --> 00:42:53,680
they're open source free to use um

00:42:51,040 --> 00:42:54,880
we're drawing from years of experience

00:42:53,680 --> 00:42:59,839
developing

00:42:54,880 --> 00:42:59,839
the v2 build packs for cloud foundry

00:43:00,319 --> 00:43:04,880
and trying to incorporate new learnings

00:43:03,520 --> 00:43:06,560
uh to create new features that are

00:43:04,880 --> 00:43:09,200
enabled by the cloud native build pack

00:43:06,560 --> 00:43:09,200
specification

00:43:09,359 --> 00:43:12,640
so just to dive deeper into one build

00:43:11,680 --> 00:43:14,640
pack i feel like the

00:43:12,640 --> 00:43:16,000
java build pack provides a good example

00:43:14,640 --> 00:43:17,520
of how we're combining

00:43:16,000 --> 00:43:20,560
sort of the best of what we've done on

00:43:17,520 --> 00:43:20,560
cf with

00:43:20,720 --> 00:43:24,640
new features enabled by the new

00:43:22,160 --> 00:43:27,839
specification so

00:43:24,640 --> 00:43:29,839
a lot of these runtime helpers uh

00:43:27,839 --> 00:43:30,960
things that link your application to the

00:43:29,839 --> 00:43:33,839
local dns

00:43:30,960 --> 00:43:34,960
the component that calculates memory

00:43:33,839 --> 00:43:38,319
stuff that loads

00:43:34,960 --> 00:43:40,000
the components that load the ca search

00:43:38,319 --> 00:43:43,119
from the system trust store

00:43:40,000 --> 00:43:43,839
into your jvm trust store a component

00:43:43,119 --> 00:43:46,240
that

00:43:43,839 --> 00:43:47,839
kills your jvm correctly when it's out

00:43:46,240 --> 00:43:49,520
of memory which is really important in a

00:43:47,839 --> 00:43:51,119
containerized ecosystem

00:43:49,520 --> 00:43:52,880
all of these were things we developed

00:43:51,119 --> 00:43:55,280
for cloud foundry that we've now

00:43:52,880 --> 00:43:56,240
ported over to the kettle world and this

00:43:55,280 --> 00:43:58,319
is why we think

00:43:56,240 --> 00:44:00,319
uh paquetto build packs a real chance of

00:43:58,319 --> 00:44:01,280
being the best build packs we have so

00:44:00,319 --> 00:44:04,560
much

00:44:01,280 --> 00:44:06,400
experience uh with all of these little

00:44:04,560 --> 00:44:07,200
nitty gritty details that you would need

00:44:06,400 --> 00:44:09,599
to

00:44:07,200 --> 00:44:12,160
have the best containerized java

00:44:09,599 --> 00:44:12,160
application

00:44:12,560 --> 00:44:15,839
we have robust command lines for

00:44:13,920 --> 00:44:17,440
multiple types of deployments

00:44:15,839 --> 00:44:19,280
again a lot of this is coming from our

00:44:17,440 --> 00:44:20,640
experience in cloud foundry

00:44:19,280 --> 00:44:23,040
and then we're taking advantage of some

00:44:20,640 --> 00:44:25,359
of these new features so we're adding

00:44:23,040 --> 00:44:29,200
the version of boot in an image label so

00:44:25,359 --> 00:44:29,200
you could do a query across your whole

00:44:29,280 --> 00:44:33,200
case or cf and figure out exactly what

00:44:31,520 --> 00:44:35,119
version of spring boot is in

00:44:33,200 --> 00:44:36,400
each application stuff like that and

00:44:35,119 --> 00:44:37,440
then of course the bill of materials

00:44:36,400 --> 00:44:39,280
we've talked about before

00:44:37,440 --> 00:44:40,480
we've put a lot of effort into making

00:44:39,280 --> 00:44:42,960
this really

00:44:40,480 --> 00:44:45,119
thorough in the java build pack so folks

00:44:42,960 --> 00:44:48,480
can do things like security audits

00:44:45,119 --> 00:44:52,720
or uh open source license gathering

00:44:48,480 --> 00:44:57,040
stuff like that um

00:44:52,720 --> 00:44:59,200
that is a broad overview

00:44:57,040 --> 00:45:01,119
of where i think we're at with cloud

00:44:59,200 --> 00:45:02,800
foundry and paquetto build packs and i

00:45:01,119 --> 00:45:04,000
wanted to

00:45:02,800 --> 00:45:05,760
leave quite as much time as i thought i

00:45:04,000 --> 00:45:06,720
was going to but i wanted to leave time

00:45:05,760 --> 00:45:10,160
for questions

00:45:06,720 --> 00:45:12,480
because i'm sure y'all have

00:45:10,160 --> 00:45:12,480
um

00:45:14,319 --> 00:45:20,480
burning thoughts desires things that you

00:45:16,960 --> 00:45:20,480
wished i had talked about that i didn't

00:45:31,760 --> 00:45:35,839
anybody questions comments can i start

00:45:34,880 --> 00:45:38,240
with one question

00:45:35,839 --> 00:45:39,440
um what are my options uh as a

00:45:38,240 --> 00:45:41,680
application developer

00:45:39,440 --> 00:45:44,160
running on a traditional cf deployment

00:45:41,680 --> 00:45:47,200
with the standard java build pack in v2

00:45:44,160 --> 00:45:49,280
and i'm curious whether

00:45:47,200 --> 00:45:50,240
my application would actually run also

00:45:49,280 --> 00:45:52,880
with

00:45:50,240 --> 00:45:55,440
the new type of build packs on my

00:45:52,880 --> 00:45:58,640
existing cloud foundry

00:45:55,440 --> 00:46:00,960
landscape i think the

00:45:58,640 --> 00:46:04,400
the lightest weight way to start testing

00:46:00,960 --> 00:46:07,359
that out is with the pax cli

00:46:04,400 --> 00:46:08,480
so one of the nice things the way the

00:46:07,359 --> 00:46:11,040
specification works

00:46:08,480 --> 00:46:12,079
is that it shouldn't matter what

00:46:11,040 --> 00:46:13,839
platform

00:46:12,079 --> 00:46:15,119
is orchestrating your build if you have

00:46:13,839 --> 00:46:16,960
the same build packs in the same

00:46:15,119 --> 00:46:21,200
application you should get a

00:46:16,960 --> 00:46:21,200
totally identical output so

00:46:22,160 --> 00:46:25,599
you can download the pax cli and pack

00:46:24,800 --> 00:46:28,400
build and

00:46:25,599 --> 00:46:29,280
pass it your application and the image

00:46:28,400 --> 00:46:31,440
regenerates

00:46:29,280 --> 00:46:32,480
is exactly should be the same image as

00:46:31,440 --> 00:46:36,400
what you would get

00:46:32,480 --> 00:46:40,160
in cf for kate's or

00:46:36,400 --> 00:46:43,599
ponzi build service or

00:46:40,160 --> 00:46:45,599
a shimmed v3 build pack if we

00:46:43,599 --> 00:46:48,000
in the future provide that onto cloud

00:46:45,599 --> 00:46:48,000
foundry

00:46:49,280 --> 00:46:52,480
okay and can you say what you mean by a

00:46:51,440 --> 00:46:56,160
shimmed v3

00:46:52,480 --> 00:46:58,160
build pack we've been thinking a lot

00:46:56,160 --> 00:47:02,240
about

00:46:58,160 --> 00:47:03,760
migration from v2 to v3 build packs

00:47:02,240 --> 00:47:07,440
and there's two ideas that have been

00:47:03,760 --> 00:47:09,040
floated i can't make promises about

00:47:07,440 --> 00:47:10,960
which of them will be implemented if

00:47:09,040 --> 00:47:11,520
they'll be implemented or in what order

00:47:10,960 --> 00:47:13,200
but

00:47:11,520 --> 00:47:14,560
folks are definitely interested in it

00:47:13,200 --> 00:47:17,680
and

00:47:14,560 --> 00:47:20,800
it would involve writing a sim or

00:47:17,680 --> 00:47:23,040
two shims one that would allow v2 bill

00:47:20,800 --> 00:47:27,119
packs to run in a v3 system

00:47:23,040 --> 00:47:28,800
so it would sit in front of the

00:47:27,119 --> 00:47:30,640
v2 build packs and make them look like

00:47:28,800 --> 00:47:32,319
v3 build packs so that any

00:47:30,640 --> 00:47:33,920
of these new platforms could run the old

00:47:32,319 --> 00:47:35,359
build packs and

00:47:33,920 --> 00:47:37,839
the other stream would work the other

00:47:35,359 --> 00:47:38,400
way so it would take our new build packs

00:47:37,839 --> 00:47:41,680
and

00:47:38,400 --> 00:47:53,839
make them implement the

00:47:41,680 --> 00:47:53,839
the v3 cloud foundry interface

00:47:57,280 --> 00:48:00,800
and and to stefan's question um so we

00:48:00,160 --> 00:48:02,880
would just

00:48:00,800 --> 00:48:04,240
treat the output from the current pac

00:48:02,880 --> 00:48:06,800
cli as just a

00:48:04,240 --> 00:48:10,319
docker image and run it in cf that way

00:48:06,800 --> 00:48:10,319
yeah you could see f docker push it

00:48:10,559 --> 00:48:13,440
yeah okay thanks

00:48:14,400 --> 00:48:16,880
i didn't mention this in the

00:48:15,599 --> 00:48:18,319
presentation because it's getting a bit

00:48:16,880 --> 00:48:20,319
into the nitty gritty

00:48:18,319 --> 00:48:21,920
but you might be aware that like a

00:48:20,319 --> 00:48:23,680
rudifest update

00:48:21,920 --> 00:48:25,839
wouldn't work for something cf docker

00:48:23,680 --> 00:48:29,280
pushed in to cf

00:48:25,839 --> 00:48:32,079
but we've sort of like

00:48:29,280 --> 00:48:32,960
reimagined what a routerfest looks like

00:48:32,079 --> 00:48:34,160
in

00:48:32,960 --> 00:48:36,800
cloud-native build packs with an

00:48:34,160 --> 00:48:38,640
operation called a rebase so you can

00:48:36,800 --> 00:48:41,119
swap out the base layers with new base

00:48:38,640 --> 00:48:43,520
layers using uh

00:48:41,119 --> 00:48:44,240
impact could be the pack rebase command

00:48:43,520 --> 00:48:47,359
but

00:48:44,240 --> 00:48:49,520
a platform like kpac would just do a

00:48:47,359 --> 00:48:52,559
rebase if it saw that your

00:48:49,520 --> 00:48:54,960
base image was out of date so if you're

00:48:52,559 --> 00:48:56,640
running these cf docker push images and

00:48:54,960 --> 00:48:58,319
you want to update the base image

00:48:56,640 --> 00:49:03,839
you could also do that with the pax cli

00:48:58,319 --> 00:49:03,839
and then re-push them

00:49:21,040 --> 00:49:25,520
anybody else i'll jump in with a with

00:49:24,559 --> 00:49:28,559
another question

00:49:25,520 --> 00:49:31,599
um how is your team making the

00:49:28,559 --> 00:49:35,200
product management decisions of

00:49:31,599 --> 00:49:37,359
which to prioritize um the v3 build

00:49:35,200 --> 00:49:38,240
packs from my perspective at cloud.gov

00:49:37,359 --> 00:49:40,000
with the

00:49:38,240 --> 00:49:41,920
potential compliance advantages it would

00:49:40,000 --> 00:49:44,880
bring and letting

00:49:41,920 --> 00:49:46,319
small teams identifying outdated

00:49:44,880 --> 00:49:50,160
dependencies and potentially

00:49:46,319 --> 00:49:51,920
rebase them would be huge so i'm kind of

00:49:50,160 --> 00:49:53,440
hoping you can go to

00:49:51,920 --> 00:49:55,440
get it running with the cf push

00:49:53,440 --> 00:49:57,040
experience sooner rather than later but

00:49:55,440 --> 00:49:59,359
i know there's other priorities involved

00:49:57,040 --> 00:50:01,680
too

00:49:59,359 --> 00:50:01,680
um

00:50:02,400 --> 00:50:08,079
there is a a crushing amount of

00:50:06,400 --> 00:50:10,240
priorities and asks in different

00:50:08,079 --> 00:50:12,720
directions from different people

00:50:10,240 --> 00:50:13,359
so i can't but there's there's a lot of

00:50:12,720 --> 00:50:16,079
interest

00:50:13,359 --> 00:50:16,400
in making the v3 build packs available

00:50:16,079 --> 00:50:20,160
to

00:50:16,400 --> 00:50:23,200
cloud foundry users without requiring

00:50:20,160 --> 00:50:25,040
cloud foundry to implement the new api

00:50:23,200 --> 00:50:26,480
so i think if we were going to build one

00:50:25,040 --> 00:50:30,319
of the two trims i talked about it would

00:50:26,480 --> 00:50:30,319
be a v3 to be e2 shim

00:50:38,839 --> 00:50:41,839
probably

00:50:48,400 --> 00:50:50,800
anybody

00:50:53,680 --> 00:50:58,160
i else want to thank you emily for your

00:50:55,839 --> 00:51:01,200
your talk was very good actually

00:50:58,160 --> 00:51:02,079
thank you i'm glad it was useful except

00:51:01,200 --> 00:51:03,680
the focus

00:51:02,079 --> 00:51:05,520
where you guys where the where the bill

00:51:03,680 --> 00:51:08,079
pack is going and uh

00:51:05,520 --> 00:51:09,680
my experience with the original locator

00:51:08,079 --> 00:51:10,480
was actually was very painful to build

00:51:09,680 --> 00:51:11,680
things

00:51:10,480 --> 00:51:13,119
because you had all these different

00:51:11,680 --> 00:51:14,880
layers and stuff like that you know how

00:51:13,119 --> 00:51:16,720
to use another community

00:51:14,880 --> 00:51:18,079
it was making it very difficult for

00:51:16,720 --> 00:51:18,880
stuff so hopefully this new stuff that

00:51:18,079 --> 00:51:22,240
you're coming up with

00:51:18,880 --> 00:51:23,839
with simplifying something we don't

00:51:22,240 --> 00:51:24,240
think we've solved all the problems we

00:51:23,839 --> 00:51:27,200
aimed

00:51:24,240 --> 00:51:28,800
to solve yet i think we do feel good

00:51:27,200 --> 00:51:30,559
about the fundamental

00:51:28,800 --> 00:51:32,559
architectural decisions we've made that

00:51:30,559 --> 00:51:36,000
they we are poised to be able to solve

00:51:32,559 --> 00:51:37,440
the problems we want to solve

00:51:36,000 --> 00:51:39,280
is is there anything going on with

00:51:37,440 --> 00:51:41,440
improving the documentation so it'd be

00:51:39,280 --> 00:51:42,559
easier for people to figure stuff out

00:51:41,440 --> 00:51:45,200
you're taking a while to figure out how

00:51:42,559 --> 00:51:47,040
to get python to work correctly and

00:51:45,200 --> 00:51:48,319
stuff like that yeah we've actually

00:51:47,040 --> 00:51:50,240
spent a lot of time recently talking

00:51:48,319 --> 00:51:53,359
about documentation

00:51:50,240 --> 00:51:53,359
and have brought in a

00:51:54,240 --> 00:51:57,520
look for help from a designer as well in

00:51:56,640 --> 00:52:00,160
that area

00:51:57,520 --> 00:52:01,839
because it turns out that uh you might

00:52:00,160 --> 00:52:04,880
be really good at building build packs

00:52:01,839 --> 00:52:06,800
but making a comprehensible website is

00:52:04,880 --> 00:52:08,319
comprehensible and beautiful website is

00:52:06,800 --> 00:52:10,240
something we are only okay at

00:52:08,319 --> 00:52:19,440
so we're trying to get some some help in

00:52:10,240 --> 00:52:21,359
that area as well

00:52:19,440 --> 00:52:23,520
awesome well thank you so much emily for

00:52:21,359 --> 00:52:25,359
that um very thorough informative

00:52:23,520 --> 00:52:28,559
presentation uh that was great

00:52:25,359 --> 00:52:30,160
and um i believe that's probably a wrap

00:52:28,559 --> 00:52:33,839
anyone else have any last minute things

00:52:30,160 --> 00:52:33,839
they want to bring up

00:52:34,960 --> 00:52:39,200
all right well thank you all very much

00:52:36,720 --> 00:52:41,440
um and thank you again emily

00:52:39,200 --> 00:52:42,720
and um yeah we'll see you next time

00:52:41,440 --> 00:52:44,880
thank you all for taking your time to

00:52:42,720 --> 00:52:47,839
listen and have a good day

00:52:44,880 --> 00:52:47,839
thank you everybody

00:52:48,400 --> 00:52:51,440

YouTube URL: https://www.youtube.com/watch?v=o6phcw6B9LM


