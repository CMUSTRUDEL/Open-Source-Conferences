Title: Cloud Foundry Community Advisory Board [Sept 2020]
Publication date: 2020-09-16
Playlist: Community Advisory Board
Description: 
	
Captions: 
	00:00:00,080 --> 00:00:06,160
good to go okay welcome

00:00:03,280 --> 00:00:08,000
everyone thank you for attending uh this

00:00:06,160 --> 00:00:08,639
cloud foundry community advisory board

00:00:08,000 --> 00:00:11,920
meeting

00:00:08,639 --> 00:00:15,679
for wednesday september 16th

00:00:11,920 --> 00:00:19,199
uh we'll go through the usual

00:00:15,679 --> 00:00:21,279
um starting uh with i'm hoping chip

00:00:19,199 --> 00:00:22,640
to give us some cloud foundry foundation

00:00:21,279 --> 00:00:25,359
highlights and updates

00:00:22,640 --> 00:00:26,800
including the cfu summit which is coming

00:00:25,359 --> 00:00:28,800
very soon

00:00:26,800 --> 00:00:30,640
yeah so real quick i mean this is sort

00:00:28,800 --> 00:00:31,519
of the usual thing right we've got a

00:00:30,640 --> 00:00:33,920
summit coming up

00:00:31,519 --> 00:00:35,280
it's going to be fun um october 21st and

00:00:33,920 --> 00:00:38,000
22nd

00:00:35,280 --> 00:00:39,920
the north american event was uh was was

00:00:38,000 --> 00:00:42,719
two days but kind of one track

00:00:39,920 --> 00:00:45,440
this is going to be two days and with

00:00:42,719 --> 00:00:46,320
two tracks plus a lot of side activities

00:00:45,440 --> 00:00:49,360
so

00:00:46,320 --> 00:00:51,920
um we're really excited about it um

00:00:49,360 --> 00:00:52,960
we think that we learned a lot from the

00:00:51,920 --> 00:00:54,719
first

00:00:52,960 --> 00:00:56,079
uh virtual summit that we held earlier

00:00:54,719 --> 00:00:57,360
in the year

00:00:56,079 --> 00:00:58,480
we've picked a slightly different

00:00:57,360 --> 00:00:59,680
platform that should be a little bit

00:00:58,480 --> 00:01:02,800
more modern

00:00:59,680 --> 00:01:05,119
um but the same basic thing applies the

00:01:02,800 --> 00:01:06,240
the word of the event is all about

00:01:05,119 --> 00:01:09,119
collaboration

00:01:06,240 --> 00:01:10,560
so we're trying to find ways to help um

00:01:09,119 --> 00:01:12,159
the the amazing people who have

00:01:10,560 --> 00:01:15,680
volunteered to be

00:01:12,159 --> 00:01:18,799
the track chairs look through

00:01:15,680 --> 00:01:20,720
the the proposals to make sure that

00:01:18,799 --> 00:01:22,240
you know really any of the as many of

00:01:20,720 --> 00:01:24,960
the talks as possible

00:01:22,240 --> 00:01:26,000
help inspire collaboration uh help

00:01:24,960 --> 00:01:28,400
inspire kind of follow

00:01:26,000 --> 00:01:29,600
on discussion uh you know trigger good

00:01:28,400 --> 00:01:33,200
you know q a

00:01:29,600 --> 00:01:34,640
sessions um post the the pre-recorded

00:01:33,200 --> 00:01:38,079
part of their talks

00:01:34,640 --> 00:01:41,439
um so hopefully it will improve

00:01:38,079 --> 00:01:43,200
from what we did in north america um

00:01:41,439 --> 00:01:45,119
anybody who's a contributor and this is

00:01:43,200 --> 00:01:46,880
kind of a very vague purposefully

00:01:45,119 --> 00:01:48,079
statement about what is a contributor

00:01:46,880 --> 00:01:49,360
right it doesn't require code

00:01:48,079 --> 00:01:52,560
contribution

00:01:49,360 --> 00:01:54,320
um if you have help with docs if you

00:01:52,560 --> 00:01:56,079
send an issue in if you're hanging out

00:01:54,320 --> 00:01:57,759
on slack and helping an end user who

00:01:56,079 --> 00:01:59,840
shows up

00:01:57,759 --> 00:02:01,600
any of those things those are amazing

00:01:59,840 --> 00:02:04,240
contributions they're all valuable

00:02:01,600 --> 00:02:06,079
so feel free to register using that code

00:02:04,240 --> 00:02:07,439
for free

00:02:06,079 --> 00:02:09,119
the second thing is lots of you touch

00:02:07,439 --> 00:02:12,160
end users um

00:02:09,119 --> 00:02:13,200
you know those of you that work for uh a

00:02:12,160 --> 00:02:16,239
member who may have

00:02:13,200 --> 00:02:17,599
a bit more of a formal process for for

00:02:16,239 --> 00:02:20,319
sharing things like

00:02:17,599 --> 00:02:21,840
our user survey you may very well be

00:02:20,319 --> 00:02:25,040
covered but if you if you're touching

00:02:21,840 --> 00:02:26,640
end users customers and otherwise

00:02:25,040 --> 00:02:29,520
please help us get the word out about

00:02:26,640 --> 00:02:31,920
the user survey um that data

00:02:29,520 --> 00:02:33,440
is actually i think really important

00:02:31,920 --> 00:02:34,840
right so we always try to collect

00:02:33,440 --> 00:02:38,160
something that

00:02:34,840 --> 00:02:40,319
provides meaningful information that

00:02:38,160 --> 00:02:44,080
could be used by the project itself

00:02:40,319 --> 00:02:46,720
to help it understand the the user base

00:02:44,080 --> 00:02:48,560
um in a bit more of a quantitative way

00:02:46,720 --> 00:02:50,480
uh that spans

00:02:48,560 --> 00:02:52,000
you know again the information that you

00:02:50,480 --> 00:02:52,959
might get if you work for one of the

00:02:52,000 --> 00:02:54,480
vendors

00:02:52,959 --> 00:02:56,000
um you know through your own product

00:02:54,480 --> 00:02:57,440
management processes

00:02:56,000 --> 00:03:00,159
right because this will hopefully give a

00:02:57,440 --> 00:03:03,280
bit of a more global view

00:03:00,159 --> 00:03:04,480
so those are the two i don't know i

00:03:03,280 --> 00:03:07,519
would say major

00:03:04,480 --> 00:03:10,159
uh focuses that i wanted to

00:03:07,519 --> 00:03:11,599
to share here at the uh uh at the cab

00:03:10,159 --> 00:03:14,400
call from the cff

00:03:11,599 --> 00:03:16,319
um just for fun i tossed out there an

00:03:14,400 --> 00:03:17,599
interesting tweet from uh from eddie

00:03:16,319 --> 00:03:20,239
who's the

00:03:17,599 --> 00:03:22,080
he is the program manager for cloud.gov

00:03:20,239 --> 00:03:25,200
which is the

00:03:22,080 --> 00:03:28,799
u.s federal government's cloud foundry

00:03:25,200 --> 00:03:30,560
based service um you know we were having

00:03:28,799 --> 00:03:33,040
a discussion about air quality and one

00:03:30,560 --> 00:03:36,159
of the one of the highest use

00:03:33,040 --> 00:03:37,440
sites right now um

00:03:36,159 --> 00:03:39,680
out of all the us federal government

00:03:37,440 --> 00:03:40,159
properties is airnow.gov which is in

00:03:39,680 --> 00:03:43,680
fact

00:03:40,159 --> 00:03:46,400
posted on cloud.gov so

00:03:43,680 --> 00:03:46,959
a little interesting insight anything

00:03:46,400 --> 00:03:49,920
that's

00:03:46,959 --> 00:03:50,400
cloud.gov hosted you can think of that

00:03:49,920 --> 00:03:52,560
as

00:03:50,400 --> 00:03:54,560
something the cf community has helped

00:03:52,560 --> 00:03:58,840
support get out there

00:03:54,560 --> 00:04:01,200
for at least for the value of u.s

00:03:58,840 --> 00:04:03,519
citizens

00:04:01,200 --> 00:04:04,319
eric did a fun test checking to see if

00:04:03,519 --> 00:04:07,439
it will return

00:04:04,319 --> 00:04:07,439
vcap request id

00:04:09,280 --> 00:04:12,159
i'm sorry what was that you

00:04:12,640 --> 00:04:17,840
uh ue was saying that uh i had a um

00:04:15,920 --> 00:04:19,759
short command line snippet that was

00:04:17,840 --> 00:04:21,680
checking whether the go router was there

00:04:19,759 --> 00:04:23,600
and returning the vcap request id header

00:04:21,680 --> 00:04:25,680
and it is

00:04:23,600 --> 00:04:27,199
absolutely i mean i think there's some

00:04:25,680 --> 00:04:28,960
i'm pretty sure there's some caching in

00:04:27,199 --> 00:04:31,440
front of it but uh but still we should

00:04:28,960 --> 00:04:33,280
be proud about that

00:04:31,440 --> 00:04:35,120
so nice work all of everybody who's

00:04:33,280 --> 00:04:38,080
worked on cloud foundry

00:04:35,120 --> 00:04:38,479
it's a tremendous kudos to see something

00:04:38,080 --> 00:04:41,040
that

00:04:38,479 --> 00:04:42,800
people are really depending on right now

00:04:41,040 --> 00:04:46,160
being served up by cloud foundry i

00:04:42,800 --> 00:04:49,520
was very proud when i saw that that that

00:04:46,160 --> 00:04:51,280
tweet um okay

00:04:49,520 --> 00:04:52,560
uh if there's nothing else from the

00:04:51,280 --> 00:04:54,960
foundation

00:04:52,560 --> 00:04:56,160
uh let's kick things off with uh you're

00:04:54,960 --> 00:04:59,120
always comprehensive

00:04:56,160 --> 00:05:00,720
uh pmc updates from from app runtime to

00:04:59,120 --> 00:05:03,600
start with

00:05:00,720 --> 00:05:04,880
hey thanks trey um yeah sure so uh as

00:05:03,600 --> 00:05:05,440
you can see we've got a few highlights

00:05:04,880 --> 00:05:08,720
here

00:05:05,440 --> 00:05:09,759
uh across the various projects um so

00:05:08,720 --> 00:05:12,639
one of those that's maybe the most

00:05:09,759 --> 00:05:14,720
visible is uh new minor versions of both

00:05:12,639 --> 00:05:15,120
the v6 and v7 cli i think this is going

00:05:14,720 --> 00:05:17,440
to be

00:05:15,120 --> 00:05:19,520
this is intended to be the last version

00:05:17,440 --> 00:05:20,240
of v6 to be released that's addressing

00:05:19,520 --> 00:05:22,639
uh

00:05:20,240 --> 00:05:24,000
some bugs in a few features and so my

00:05:22,639 --> 00:05:26,160
understanding is from now on the cli

00:05:24,000 --> 00:05:27,360
team is going to be releasing only uh

00:05:26,160 --> 00:05:30,960
major version seven

00:05:27,360 --> 00:05:32,800
updates and then um quick question uh is

00:05:30,960 --> 00:05:33,280
there is there the possibility that we

00:05:32,800 --> 00:05:36,479
would

00:05:33,280 --> 00:05:39,840
still see um a critical

00:05:36,479 --> 00:05:42,960
security uh things if they should appear

00:05:39,840 --> 00:05:45,680
um i don't know for sure but given given

00:05:42,960 --> 00:05:46,560
our history of security um i would

00:05:45,680 --> 00:05:47,840
imagine that's still

00:05:46,560 --> 00:05:49,600
plausibly in scope that might be

00:05:47,840 --> 00:05:50,320
something we could check with and we can

00:05:49,600 --> 00:05:52,880
probably

00:05:50,320 --> 00:05:55,680
yeah might wanna that might be something

00:05:52,880 --> 00:05:58,639
as an ad hoc basis as as they come up we

00:05:55,680 --> 00:06:00,240
could yeah yeah i can see those even

00:05:58,639 --> 00:06:01,039
being just patched versions on this

00:06:00,240 --> 00:06:05,520
latest

00:06:01,039 --> 00:06:09,199
um version yeah absolutely yeah

00:06:05,520 --> 00:06:11,520
um yeah yeah so thanks ray good question

00:06:09,199 --> 00:06:12,479
um and then we've got um incremental

00:06:11,520 --> 00:06:15,680
updates from

00:06:12,479 --> 00:06:18,479
um both cfrigates and cubecf um

00:06:15,680 --> 00:06:20,639
with some nice updates i think

00:06:18,479 --> 00:06:23,680
coincidentally both relating to

00:06:20,639 --> 00:06:25,360
base image stack support we have the

00:06:23,680 --> 00:06:26,800
basic functionality of updates working

00:06:25,360 --> 00:06:28,639
in cf for gates now

00:06:26,800 --> 00:06:32,319
um and there's some really interesting

00:06:28,639 --> 00:06:35,360
new multi-stack support in qcf

00:06:32,319 --> 00:06:36,720
um and then um yeah continuing some of

00:06:35,360 --> 00:06:39,600
the project updates um

00:06:36,720 --> 00:06:40,479
cappy's been uh doing some work recently

00:06:39,600 --> 00:06:43,120
to

00:06:40,479 --> 00:06:44,000
uh move even more content out of the

00:06:43,120 --> 00:06:46,319
traditional

00:06:44,000 --> 00:06:49,199
blob store object store they've used for

00:06:46,319 --> 00:06:51,520
files and into the oci image registry

00:06:49,199 --> 00:06:52,400
in cfrage so they're moving the

00:06:51,520 --> 00:06:55,520
assembled

00:06:52,400 --> 00:06:57,120
at bits packages into that registry so

00:06:55,520 --> 00:06:58,720
at this point the only thing that the

00:06:57,120 --> 00:07:00,560
blobster will contain

00:06:58,720 --> 00:07:02,240
is the cache of files for resource

00:07:00,560 --> 00:07:03,599
matching so they're thinking about how

00:07:02,240 --> 00:07:04,240
they want to address that in the future

00:07:03,599 --> 00:07:06,160
but

00:07:04,240 --> 00:07:07,599
it's looking like an in the medium term

00:07:06,160 --> 00:07:08,479
that dependency is going to go away

00:07:07,599 --> 00:07:11,840
entirely

00:07:08,479 --> 00:07:13,840
um from the uh set of resources

00:07:11,840 --> 00:07:15,599
that you need to use to run cf for kids

00:07:13,840 --> 00:07:18,319
with happy containerized that way

00:07:15,599 --> 00:07:20,479
relying on kpak

00:07:18,319 --> 00:07:21,520
and some some other nice things that

00:07:20,479 --> 00:07:23,280
have closed out

00:07:21,520 --> 00:07:25,440
uh irene had been doing a track of work

00:07:23,280 --> 00:07:26,720
on supporting application tasks that

00:07:25,440 --> 00:07:28,960
went off tasks

00:07:26,720 --> 00:07:30,960
and that's all now complete and in

00:07:28,960 --> 00:07:33,120
latest versions of irene

00:07:30,960 --> 00:07:34,240
and they've also been doing some work to

00:07:33,120 --> 00:07:37,120
uh inject the

00:07:34,240 --> 00:07:37,840
cf instance index environment variable

00:07:37,120 --> 00:07:40,639
into

00:07:37,840 --> 00:07:42,160
application um containers when they're

00:07:40,639 --> 00:07:44,720
running as pods

00:07:42,160 --> 00:07:45,520
um on kubernetes um this is something

00:07:44,720 --> 00:07:48,879
that you know

00:07:45,520 --> 00:07:50,560
we we've generally regarded it as um

00:07:48,879 --> 00:07:52,240
a somewhat questionable practice doing

00:07:50,560 --> 00:07:53,440
any kind of reliance on that but we do

00:07:52,240 --> 00:07:54,720
know that there are some libraries that

00:07:53,440 --> 00:07:57,360
are going to look for whether

00:07:54,720 --> 00:07:58,800
they're index zero or not to optimize

00:07:57,360 --> 00:08:02,000
running their database migrations when

00:07:58,800 --> 00:08:03,599
they're bootstrapping that kind of thing

00:08:02,000 --> 00:08:05,039
um and then updates from a couple other

00:08:03,599 --> 00:08:07,120
teams networking has

00:08:05,039 --> 00:08:09,520
continued to do some work on scalability

00:08:07,120 --> 00:08:11,919
of istio and their interactions with it

00:08:09,520 --> 00:08:13,199
um and also now that we have this uh

00:08:11,919 --> 00:08:15,440
route crd

00:08:13,199 --> 00:08:16,479
uh serving as uh an intermediate layer

00:08:15,440 --> 00:08:19,120
in the architecture

00:08:16,479 --> 00:08:21,280
they're exploring the possibility of

00:08:19,120 --> 00:08:25,120
plugging in some other ingress systems

00:08:21,280 --> 00:08:27,360
in behind it such as contour

00:08:25,120 --> 00:08:28,960
uh and then also logging in metrics uh

00:08:27,360 --> 00:08:29,599
they've been continuing to do some work

00:08:28,960 --> 00:08:31,759
to improve

00:08:29,599 --> 00:08:32,880
the performance and scalability of the

00:08:31,759 --> 00:08:36,399
log cache component

00:08:32,880 --> 00:08:38,479
as they've uncovered some uh

00:08:36,399 --> 00:08:40,080
ways in which it's somewhat inefficient

00:08:38,479 --> 00:08:42,560
at i think egress

00:08:40,080 --> 00:08:43,279
and handling some of the ingress from

00:08:42,560 --> 00:08:45,519
components

00:08:43,279 --> 00:08:48,480
so i think they're they're making some

00:08:45,519 --> 00:08:48,480
good forward progress on that

00:08:51,680 --> 00:08:58,160
thank you

00:08:55,040 --> 00:09:01,040
kevin since we're on the call any news

00:08:58,160 --> 00:09:01,040
from the bosch world

00:09:01,519 --> 00:09:06,080
hello um we're still just working

00:09:05,200 --> 00:09:08,480
through stuff

00:09:06,080 --> 00:09:09,360
a quick note to the community that uh

00:09:08,480 --> 00:09:12,800
there was a

00:09:09,360 --> 00:09:15,360
high cve on the linux kernel uh so we

00:09:12,800 --> 00:09:18,560
have a new stem cell that came out of

00:09:15,360 --> 00:09:20,080
uh last week so if you are planning to

00:09:18,560 --> 00:09:22,880
do a stem cell bump this is a good one

00:09:20,080 --> 00:09:24,640
to bump up to already

00:09:22,880 --> 00:09:27,519
and other than that we're just

00:09:24,640 --> 00:09:27,519
continuing with

00:09:27,600 --> 00:09:33,279
getting some more releases ready but

00:09:30,240 --> 00:09:33,279
nothing yet to announce

00:09:34,839 --> 00:09:37,839
okay

00:09:39,200 --> 00:09:42,800
uh uh likewise i have very short updates

00:09:42,160 --> 00:09:46,720
from

00:09:42,800 --> 00:09:47,920
the extensions pmc uh because we haven't

00:09:46,720 --> 00:09:49,600
met in a long time

00:09:47,920 --> 00:09:50,959
and i haven't yet gathered everyone

00:09:49,600 --> 00:09:55,360
together uh

00:09:50,959 --> 00:09:58,560
uh so we have uh a meeting coming up

00:09:55,360 --> 00:09:59,279
which i should announce now uh 11 a.m

00:09:58,560 --> 00:10:02,480
pacific

00:09:59,279 --> 00:10:04,079
on september the 28th uh and i will try

00:10:02,480 --> 00:10:05,600
and be reminding all the project leads

00:10:04,079 --> 00:10:08,800
to at least give me updates that

00:10:05,600 --> 00:10:11,279
so then the following uh uh cab

00:10:08,800 --> 00:10:12,800
call i'll have more for you but i do

00:10:11,279 --> 00:10:13,680
because i talk to the stratos team all

00:10:12,800 --> 00:10:17,839
the time

00:10:13,680 --> 00:10:18,399
uh uh they have two releases coming up

00:10:17,839 --> 00:10:21,279
and

00:10:18,399 --> 00:10:22,399
i don't want to steal cf marketing's

00:10:21,279 --> 00:10:25,519
thunder but there is

00:10:22,399 --> 00:10:28,800
something special coming with 4.2

00:10:25,519 --> 00:10:32,320
um chip can i can i let the

00:10:28,800 --> 00:10:35,519
folks know yeah of course

00:10:32,320 --> 00:10:37,360
okay so souza has been maintaining

00:10:35,519 --> 00:10:40,480
extensions for kubernetes

00:10:37,360 --> 00:10:41,360
in in our downstream release of stratos

00:10:40,480 --> 00:10:43,279
for a while

00:10:41,360 --> 00:10:45,200
we are donating those to the foundation

00:10:43,279 --> 00:10:48,640
uh as a 4.2 which should be just

00:10:45,200 --> 00:10:49,200
before the cf summit you heard it here

00:10:48,640 --> 00:10:51,360
first

00:10:49,200 --> 00:10:52,959
uh and so this exposes a whole bunch of

00:10:51,360 --> 00:10:57,839
kubernetes features that you can

00:10:52,959 --> 00:10:57,839
uh that you can uh try out

00:10:58,000 --> 00:11:02,959
yeah that should be neat um hey before

00:11:00,959 --> 00:11:04,959
you move on i actually want to interject

00:11:02,959 --> 00:11:05,279
here i realized uh yui's amazing because

00:11:04,959 --> 00:11:08,560
she

00:11:05,279 --> 00:11:10,480
she caught something that i forgot um

00:11:08,560 --> 00:11:12,399
in addition to asking for help with the

00:11:10,480 --> 00:11:14,800
user survey the other thing that we all

00:11:12,399 --> 00:11:17,920
want you to spend time thinking about

00:11:14,800 --> 00:11:18,800
and then typing and submitting forms for

00:11:17,920 --> 00:11:21,120
us

00:11:18,800 --> 00:11:22,480
is the community award nominations so i

00:11:21,120 --> 00:11:24,160
toss that into the notes up above

00:11:22,480 --> 00:11:25,440
there's a there's a post that you can

00:11:24,160 --> 00:11:26,880
click through to give us some

00:11:25,440 --> 00:11:30,079
nominations but

00:11:26,880 --> 00:11:32,240
um this is an opportunity to nominate

00:11:30,079 --> 00:11:33,920
your peers nominate uh you know the

00:11:32,240 --> 00:11:37,440
people you've worked with

00:11:33,920 --> 00:11:37,920
um that have done really interesting

00:11:37,440 --> 00:11:40,000
things

00:11:37,920 --> 00:11:41,760
for the community whether it's as a

00:11:40,000 --> 00:11:43,600
contributor whether it's

00:11:41,760 --> 00:11:45,040
you know an awesome end user story

00:11:43,600 --> 00:11:46,800
whether it's someone who's done a really

00:11:45,040 --> 00:11:49,839
good job advocating for the project

00:11:46,800 --> 00:11:50,959
um that's always a lot of fun and so

00:11:49,839 --> 00:11:54,839
please take some time

00:11:50,959 --> 00:11:57,839
think about it and and share your

00:11:54,839 --> 00:11:57,839
nominations

00:11:58,160 --> 00:12:02,079
great if someone wants to paste that in

00:12:00,079 --> 00:12:05,120
the chat that would be good too

00:12:02,079 --> 00:12:07,680
i'm lost in my own screen share

00:12:05,120 --> 00:12:07,680
um

00:12:08,480 --> 00:12:14,240
okay uh i did some last minute

00:12:12,320 --> 00:12:17,279
scrambling so that we'd have some

00:12:14,240 --> 00:12:19,440
presentations to talk about now uh

00:12:17,279 --> 00:12:20,320
i saw some really good ones yesterday in

00:12:19,440 --> 00:12:24,959
the

00:12:20,320 --> 00:12:27,120
um kubernetes sig meeting

00:12:24,959 --> 00:12:28,880
and asked a couple of those folks if

00:12:27,120 --> 00:12:30,399
they would like to present today for

00:12:28,880 --> 00:12:32,800
for a wider and slightly different

00:12:30,399 --> 00:12:37,680
audience uh so i'd like to ask

00:12:32,800 --> 00:12:40,720
payali if she can uh are you here

00:12:37,680 --> 00:12:41,360
yes i'm here hello awesome uh if you

00:12:40,720 --> 00:12:43,200
could show

00:12:41,360 --> 00:12:45,600
all of the folks on this call what you

00:12:43,200 --> 00:12:48,240
showed all the folks on yesterday's call

00:12:45,600 --> 00:12:48,240
that would be great

00:12:50,000 --> 00:12:54,880
yeah so i'm actually also here with paul

00:12:52,959 --> 00:12:58,480
who i co-presented with yesterday

00:12:54,880 --> 00:13:01,600
right and um paul is currently

00:12:58,480 --> 00:13:04,160
the interim pm for relent

00:13:01,600 --> 00:13:05,040
um driving the cf for kate's initiative

00:13:04,160 --> 00:13:06,480
and

00:13:05,040 --> 00:13:08,240
yeah he's probably going to give an

00:13:06,480 --> 00:13:12,399
introduction

00:13:08,240 --> 00:13:14,639
thanks bialy yeah so in the bosch based

00:13:12,399 --> 00:13:15,920
cf deployment uh application stack

00:13:14,639 --> 00:13:19,120
updates were provided

00:13:15,920 --> 00:13:22,240
to the platform through a new

00:13:19,120 --> 00:13:25,200
cf linux boss releases as we all know

00:13:22,240 --> 00:13:28,160
that diego then acted upon using the

00:13:25,200 --> 00:13:29,760
base file system contained therein

00:13:28,160 --> 00:13:31,680
to patch all the pushed apps

00:13:29,760 --> 00:13:33,600
simultaneously

00:13:31,680 --> 00:13:35,040
however in this new kate's world we

00:13:33,600 --> 00:13:37,200
don't have a bosch

00:13:35,040 --> 00:13:38,720
and there we therefore we don't have a

00:13:37,200 --> 00:13:42,079
cf linux boss release

00:13:38,720 --> 00:13:43,040
uh or in fact a diego so how will these

00:13:42,079 --> 00:13:46,000
application stack

00:13:43,040 --> 00:13:47,600
updates occur uh we'd like to demo

00:13:46,000 --> 00:13:48,880
recently completed work by the cappy

00:13:47,600 --> 00:13:50,800
team

00:13:48,880 --> 00:13:53,360
that brings this vitally important

00:13:50,800 --> 00:13:55,360
feature to cf cates

00:13:53,360 --> 00:13:56,480
and to talk through the feature roadmap

00:13:55,360 --> 00:13:58,639
from here

00:13:56,480 --> 00:13:59,680
how we plan to provide a better operator

00:13:58,639 --> 00:14:02,000
experience

00:13:59,680 --> 00:14:03,600
and how we plan to expose metrics to the

00:14:02,000 --> 00:14:04,399
operator allowing them to troubleshoot

00:14:03,600 --> 00:14:07,440
when things

00:14:04,399 --> 00:14:10,079
perhaps don't go quite as expected

00:14:07,440 --> 00:14:10,800
so i'd like to hand over to piyali who

00:14:10,079 --> 00:14:14,000
can do

00:14:10,800 --> 00:14:14,000
the demo for you thank you

00:14:14,160 --> 00:14:20,000
thank you for the introduction paul um i

00:14:16,639 --> 00:14:20,000
will share my screen right now

00:14:22,720 --> 00:14:27,440
all right is this font good for everyone

00:14:25,279 --> 00:14:31,120
font size

00:14:27,440 --> 00:14:32,800
cool um so just to explain

00:14:31,120 --> 00:14:34,880
what these four windows you see in front

00:14:32,800 --> 00:14:37,199
of you are on the top

00:14:34,880 --> 00:14:38,880
left i will be basically performing the

00:14:37,199 --> 00:14:40,720
actions that an operator would do

00:14:38,880 --> 00:14:43,199
to actually carry out and trigger a

00:14:40,720 --> 00:14:46,079
stack update in cf for kate's

00:14:43,199 --> 00:14:47,120
and on the top right i will show you the

00:14:46,079 --> 00:14:48,560
stack

00:14:47,120 --> 00:14:51,920
actually i could just show you right now

00:14:48,560 --> 00:14:51,920
what stack we're currently on

00:14:54,240 --> 00:15:00,560
so if i go to the specs section um

00:14:58,160 --> 00:15:02,360
and specifically this run image as you

00:15:00,560 --> 00:15:05,440
can see we're on

00:15:02,360 --> 00:15:08,560
0.0.51 for this run image

00:15:05,440 --> 00:15:09,040
and for the build image we are on 0.0.50

00:15:08,560 --> 00:15:10,480
and

00:15:09,040 --> 00:15:12,160
the build image and run image are

00:15:10,480 --> 00:15:14,240
separate

00:15:12,160 --> 00:15:15,760
but in this in today's demo we're only

00:15:14,240 --> 00:15:19,600
going to be changing the run image

00:15:15,760 --> 00:15:21,839
but you can change both if you want um

00:15:19,600 --> 00:15:23,279
and on the bottom left we have images so

00:15:21,839 --> 00:15:25,519
in cf for kate's for those who don't

00:15:23,279 --> 00:15:27,440
know we're using kpac

00:15:25,519 --> 00:15:29,519
to actually build the images for the

00:15:27,440 --> 00:15:30,399
apps the oci images for the apps and

00:15:29,519 --> 00:15:34,000
pushing them to

00:15:30,399 --> 00:15:35,519
an app registry and basically the

00:15:34,000 --> 00:15:38,320
general flow of a cf push

00:15:35,519 --> 00:15:40,160
is that irene will then essentially take

00:15:38,320 --> 00:15:42,079
those images and put them into staple

00:15:40,160 --> 00:15:45,040
sets which manage the pods

00:15:42,079 --> 00:15:47,120
that run the app workloads so on the

00:15:45,040 --> 00:15:48,160
bottom right i have the staple sets that

00:15:47,120 --> 00:15:50,240
are actually managing

00:15:48,160 --> 00:15:52,480
the app workload pods and i tried to

00:15:50,240 --> 00:15:54,160
give a good mix so i have an app with 20

00:15:52,480 --> 00:15:55,519
instances and i have a couple with one

00:15:54,160 --> 00:15:57,120
instance and i have one with five

00:15:55,519 --> 00:16:00,720
instance just to show

00:15:57,120 --> 00:16:03,920
um roughly how fast this happens um

00:16:00,720 --> 00:16:06,000
so when i will trigger

00:16:03,920 --> 00:16:08,480
the stack update all i'll have to do is

00:16:06,000 --> 00:16:12,880
this cube control patch command

00:16:08,480 --> 00:16:14,639
and i will change this to 0.0.52

00:16:12,880 --> 00:16:16,959
so say the operator sees that there is a

00:16:14,639 --> 00:16:18,639
minor patch version available

00:16:16,959 --> 00:16:20,320
that will take care of some security

00:16:18,639 --> 00:16:21,199
vulnerabilities then they'll want to

00:16:20,320 --> 00:16:22,880
immediately

00:16:21,199 --> 00:16:24,639
patch instead of waiting for the next

00:16:22,880 --> 00:16:25,199
bosh release for example in the previous

00:16:24,639 --> 00:16:27,360
world

00:16:25,199 --> 00:16:29,759
so now they can easily patch whenever

00:16:27,360 --> 00:16:31,360
there's a new stack update available

00:16:29,759 --> 00:16:36,000
and they could just run this keep

00:16:31,360 --> 00:16:39,440
control patch command

00:16:36,000 --> 00:16:42,000
and after the stack is patched then

00:16:39,440 --> 00:16:42,959
basically the k-pac float gets triggered

00:16:42,000 --> 00:16:45,839
immediately

00:16:42,959 --> 00:16:46,959
and the images all get rebased by k-pac

00:16:45,839 --> 00:16:48,320
onto the new stack

00:16:46,959 --> 00:16:50,720
and that's what you see on the bottom

00:16:48,320 --> 00:16:53,680
left where all the images went green

00:16:50,720 --> 00:16:55,120
and one i can show you one example of

00:16:53,680 --> 00:16:59,680
what this would look like so

00:16:55,120 --> 00:17:03,839
if we take this image for example

00:16:59,680 --> 00:17:05,600
and we go down to the status section

00:17:03,839 --> 00:17:08,319
we'll see that there's a latest build

00:17:05,600 --> 00:17:10,319
reason and a latest image section so the

00:17:08,319 --> 00:17:13,520
latest build reason here

00:17:10,319 --> 00:17:15,520
is stack which means that this build was

00:17:13,520 --> 00:17:17,600
only done because of a stack update and

00:17:15,520 --> 00:17:19,600
only because of a stack update

00:17:17,600 --> 00:17:21,280
and for this latest image you'll see

00:17:19,600 --> 00:17:22,319
that there's the oci image reference

00:17:21,280 --> 00:17:25,120
that points to

00:17:22,319 --> 00:17:27,520
the latest build image by kpac which

00:17:25,120 --> 00:17:29,919
includes the new stack in it

00:17:27,520 --> 00:17:31,440
and the reason that this is important is

00:17:29,919 --> 00:17:33,440
because the way that

00:17:31,440 --> 00:17:35,520
cappy is now handling it rather than

00:17:33,440 --> 00:17:38,720
diego and bosh in the previous world

00:17:35,520 --> 00:17:40,799
is that cappy has a new component called

00:17:38,720 --> 00:17:42,400
cf api controllers and also on the

00:17:40,799 --> 00:17:44,400
bottom right by the way

00:17:42,400 --> 00:17:45,600
um you can see that the stack update is

00:17:44,400 --> 00:17:47,120
actually happening

00:17:45,600 --> 00:17:48,720
in front of your eyes canines is really

00:17:47,120 --> 00:17:52,160
cool to show you that

00:17:48,720 --> 00:17:54,000
in real time um but basically

00:17:52,160 --> 00:17:55,760
cf api controller component that i'll

00:17:54,000 --> 00:17:58,160
show you is optimizing

00:17:55,760 --> 00:17:59,440
the kubernetes rolling update strategy

00:17:58,160 --> 00:18:02,559
for stateful sets

00:17:59,440 --> 00:18:04,400
to carry out the stack update and

00:18:02,559 --> 00:18:05,840
that's what you see over here this will

00:18:04,400 --> 00:18:08,000
probably be a good example because it

00:18:05,840 --> 00:18:10,080
has 20 instances

00:18:08,000 --> 00:18:11,360
but you can see that one at a time these

00:18:10,080 --> 00:18:15,440
pods are

00:18:11,360 --> 00:18:17,039
being rebased basically and are

00:18:15,440 --> 00:18:19,120
actually getting restarted with this new

00:18:17,039 --> 00:18:22,240
stack

00:18:19,120 --> 00:18:23,760
and on the top right i can show you the

00:18:22,240 --> 00:18:26,799
new component

00:18:23,760 --> 00:18:28,400
so for observability if

00:18:26,799 --> 00:18:30,480
the operator wants to know what's

00:18:28,400 --> 00:18:33,600
happening today

00:18:30,480 --> 00:18:33,600
we can go to

00:18:34,320 --> 00:18:46,080
the cf api controllers

00:18:42,080 --> 00:18:46,080
and they can go to the manager logs

00:18:49,039 --> 00:18:57,840
hopefully i'll be able to find

00:19:00,799 --> 00:19:04,400
um so yeah so here are all of the

00:19:02,799 --> 00:19:07,440
actions that are currently happening

00:19:04,400 --> 00:19:10,640
from our cf api controller

00:19:07,440 --> 00:19:11,520
so what it does is basically every time

00:19:10,640 --> 00:19:14,080
there is an

00:19:11,520 --> 00:19:14,640
update or some level of event that

00:19:14,080 --> 00:19:17,760
happens

00:19:14,640 --> 00:19:21,360
to the image resource um the

00:19:17,760 --> 00:19:24,320
cf-api controller image controller would

00:19:21,360 --> 00:19:26,240
basically process that event and carry

00:19:24,320 --> 00:19:28,080
out some actions accordingly

00:19:26,240 --> 00:19:29,520
so for example when it sees that there

00:19:28,080 --> 00:19:31,840
is an image updated

00:19:29,520 --> 00:19:33,280
and specifically updated with this stack

00:19:31,840 --> 00:19:35,280
build reason

00:19:33,280 --> 00:19:37,200
the image controller will then carry out

00:19:35,280 --> 00:19:39,440
and actually update the staple set

00:19:37,200 --> 00:19:40,559
directly so there's no involvement with

00:19:39,440 --> 00:19:43,200
irene yet

00:19:40,559 --> 00:19:45,520
on this flow the api controller is

00:19:43,200 --> 00:19:47,440
directly updating the stateful set

00:19:45,520 --> 00:19:49,120
with the new oci image reference that

00:19:47,440 --> 00:19:51,200
comes from kpac

00:19:49,120 --> 00:19:52,320
and this will change shortly in the

00:19:51,200 --> 00:19:54,880
future

00:19:52,320 --> 00:19:57,200
we are planning on optimizing irene's

00:19:54,880 --> 00:19:59,840
new lrp that they're developing

00:19:57,200 --> 00:20:00,640
to update the lrp directly so that irene

00:19:59,840 --> 00:20:02,400
will remain

00:20:00,640 --> 00:20:03,679
as the only component that's interacting

00:20:02,400 --> 00:20:06,880
with the staple sets

00:20:03,679 --> 00:20:08,000
but for now the api controller is

00:20:06,880 --> 00:20:11,600
directly updating

00:20:08,000 --> 00:20:12,559
the stateful set and we also have a

00:20:11,600 --> 00:20:15,039
couple other

00:20:12,559 --> 00:20:16,960
future tracks of work that are really

00:20:15,039 --> 00:20:19,600
exciting that are coming up soon

00:20:16,960 --> 00:20:21,280
one is you can see that observability is

00:20:19,600 --> 00:20:23,520
pretty difficult to be trailing all

00:20:21,280 --> 00:20:24,880
these logs through api controllers so

00:20:23,520 --> 00:20:26,240
we're going to be developing a better

00:20:24,880 --> 00:20:28,240
way for operators

00:20:26,240 --> 00:20:29,679
to understand the progress of the stack

00:20:28,240 --> 00:20:31,039
update and

00:20:29,679 --> 00:20:32,640
even though like the bottom right

00:20:31,039 --> 00:20:34,240
canines window is pretty cool where you

00:20:32,640 --> 00:20:36,080
can actually visually see it but

00:20:34,240 --> 00:20:37,919
it would be good to have some metrics on

00:20:36,080 --> 00:20:39,440
what's going on so that the operator can

00:20:37,919 --> 00:20:41,440
go and troubleshoot if something goes

00:20:39,440 --> 00:20:43,440
wrong for example

00:20:41,440 --> 00:20:45,120
and we also have another feature coming

00:20:43,440 --> 00:20:48,640
up to support rollbacks

00:20:45,120 --> 00:20:50,640
app rollbacks for example if a

00:20:48,640 --> 00:20:51,840
developer wants to roll back to a

00:20:50,640 --> 00:20:54,080
previous revision

00:20:51,840 --> 00:20:55,200
of the app that revision may not have

00:20:54,080 --> 00:20:57,600
been packaged with

00:20:55,200 --> 00:20:59,039
the new version of the stack it may have

00:20:57,600 --> 00:21:00,480
been packaged with a previous version of

00:20:59,039 --> 00:21:02,320
the stack but

00:21:00,480 --> 00:21:03,919
as a developer and as an operator it's

00:21:02,320 --> 00:21:06,159
also in their best interest

00:21:03,919 --> 00:21:08,000
to have all the security patches even

00:21:06,159 --> 00:21:10,000
with an older version of the app

00:21:08,000 --> 00:21:11,280
so rather than what they would have to

00:21:10,000 --> 00:21:14,320
do today which would be

00:21:11,280 --> 00:21:15,760
to restage and re-push the app um so

00:21:14,320 --> 00:21:18,720
that it would have the newer stack

00:21:15,760 --> 00:21:21,200
our new feature would enable automatic

00:21:18,720 --> 00:21:24,159
rebasing of previous revisions as well

00:21:21,200 --> 00:21:25,600
so that when the app developer uh rolls

00:21:24,159 --> 00:21:28,480
back to a previous revision they would

00:21:25,600 --> 00:21:31,360
not have to re-push and restage

00:21:28,480 --> 00:21:32,320
and yes those are some exciting pieces

00:21:31,360 --> 00:21:34,960
of work coming up

00:21:32,320 --> 00:21:36,320
and as you can see while i was doing the

00:21:34,960 --> 00:21:39,520
demo the stack update

00:21:36,320 --> 00:21:44,159
completely finished for all of the apps

00:21:39,520 --> 00:21:47,039
in the workload space

00:21:44,159 --> 00:21:47,039
there any questions

00:21:52,640 --> 00:21:59,520
okay thank you so cool

00:21:56,240 --> 00:22:02,080
i mean this is something that i know

00:21:59,520 --> 00:22:03,760
customers really are or or people who

00:22:02,080 --> 00:22:05,600
are interested in cloud foundry and

00:22:03,760 --> 00:22:07,360
and operators that are thinking of

00:22:05,600 --> 00:22:07,840
adopting it when they realize that they

00:22:07,360 --> 00:22:10,000
can do

00:22:07,840 --> 00:22:12,240
this kind of update and update

00:22:10,000 --> 00:22:16,240
underlying uh container images

00:22:12,240 --> 00:22:18,880
without touching the code on mass

00:22:16,240 --> 00:22:20,080
in an automated fashion uh it's it's one

00:22:18,880 --> 00:22:22,320
of the

00:22:20,080 --> 00:22:23,360
secret sleeper awesome features of cloud

00:22:22,320 --> 00:22:27,360
foundry that

00:22:23,360 --> 00:22:29,360
that make it really enterprise ready

00:22:27,360 --> 00:22:32,080
and so i'm really glad to see this is is

00:22:29,360 --> 00:22:34,880
up and and and going in uh

00:22:32,080 --> 00:22:38,000
in cf for kate's world and and in irene

00:22:34,880 --> 00:22:38,000
or with irene i should say

00:22:38,840 --> 00:22:44,559
yeah uh

00:22:41,200 --> 00:22:49,039
thank you uh uh both of you uh

00:22:44,559 --> 00:22:51,280
uh paul and uh pialy uh if mario's here

00:22:49,039 --> 00:22:52,559
please could you speak up and maybe

00:22:51,280 --> 00:22:54,000
share your screen and tell us a little

00:22:52,559 --> 00:22:56,320
bit about

00:22:54,000 --> 00:22:57,360
uh quark secret i copy-pasted uh

00:22:56,320 --> 00:23:00,080
something in it

00:22:57,360 --> 00:23:02,400
in the agenda it says new quarks secret

00:23:00,080 --> 00:23:05,600
feature but it's a new quark secret

00:23:02,400 --> 00:23:05,600
feature uh

00:23:06,480 --> 00:23:10,159
yeah yeah well it's not really new i

00:23:08,720 --> 00:23:14,320
talked about it yesterday

00:23:10,159 --> 00:23:17,520
already i recognized some faces so

00:23:14,320 --> 00:23:20,880
it's like a rerun um but

00:23:17,520 --> 00:23:23,520
uh okay um i think this time i know how

00:23:20,880 --> 00:23:26,880
to use zoom so

00:23:23,520 --> 00:23:28,960
that's an advantage so

00:23:26,880 --> 00:23:30,720
we we call the new feature templated

00:23:28,960 --> 00:23:33,360
configs

00:23:30,720 --> 00:23:35,919
because it's basically templates that

00:23:33,360 --> 00:23:39,360
generate configs

00:23:35,919 --> 00:23:42,559
so quark secret um is a

00:23:39,360 --> 00:23:45,679
component of our quarks operator

00:23:42,559 --> 00:23:49,120
that we use to deploy

00:23:45,679 --> 00:23:52,159
qcf on kubernetes and quark secret

00:23:49,120 --> 00:23:53,039
specifically is there to generate

00:23:52,159 --> 00:23:57,679
secrets

00:23:53,039 --> 00:24:01,200
inside the cluster and it uses a cid

00:23:57,679 --> 00:24:03,200
and then the output is stored in a

00:24:01,200 --> 00:24:05,520
in a secret for example for password

00:24:03,200 --> 00:24:08,240
certificates and so on

00:24:05,520 --> 00:24:09,039
um some of the future features are like

00:24:08,240 --> 00:24:11,279
that you

00:24:09,039 --> 00:24:12,480
you can bring your own secret and it

00:24:11,279 --> 00:24:14,559
won't uh

00:24:12,480 --> 00:24:15,600
update it it will just use it if it's

00:24:14,559 --> 00:24:18,320
there that's

00:24:15,600 --> 00:24:19,200
um what we use in the qcf deployment

00:24:18,320 --> 00:24:21,600
like you can

00:24:19,200 --> 00:24:23,200
create all these secrets by hand and

00:24:21,600 --> 00:24:25,760
then quark secret will fill in the

00:24:23,200 --> 00:24:28,159
missing ones and the ones you provide

00:24:25,760 --> 00:24:29,360
like the database password so this will

00:24:28,159 --> 00:24:33,760
be yours

00:24:29,360 --> 00:24:36,240
um until you decide to change that

00:24:33,760 --> 00:24:37,760
um yeah it also supports some some kind

00:24:36,240 --> 00:24:39,600
of rotation more like

00:24:37,760 --> 00:24:41,919
updates of existing secrets so

00:24:39,600 --> 00:24:43,840
certificates can be regenerated

00:24:41,919 --> 00:24:46,960
and we added functionality to copy

00:24:43,840 --> 00:24:49,120
secrets into other namespaces so

00:24:46,960 --> 00:24:50,000
that you well if you want to use more

00:24:49,120 --> 00:24:51,520
namespaces

00:24:50,000 --> 00:24:53,039
you have the secrets where they can be

00:24:51,520 --> 00:24:56,400
mounted

00:24:53,039 --> 00:24:56,799
um yeah and it works with quarks restart

00:24:56,400 --> 00:24:58,880
which

00:24:56,799 --> 00:25:00,880
is still in the quarkx operator the

00:24:58,880 --> 00:25:04,080
quarkx operator being the one

00:25:00,880 --> 00:25:04,799
uh big operator which we started to do

00:25:04,080 --> 00:25:06,799
this is

00:25:04,799 --> 00:25:08,159
mostly concerning now now it's mostly

00:25:06,799 --> 00:25:10,400
concerned with some

00:25:08,159 --> 00:25:12,240
converting bosch manifests into

00:25:10,400 --> 00:25:15,360
kubernetes structures

00:25:12,240 --> 00:25:17,360
and we all these smaller components like

00:25:15,360 --> 00:25:19,919
standalone components we um

00:25:17,360 --> 00:25:21,200
extract them from the main code and make

00:25:19,919 --> 00:25:23,520
them run as separate

00:25:21,200 --> 00:25:24,320
uh operators and they have separate hand

00:25:23,520 --> 00:25:27,600
charts

00:25:24,320 --> 00:25:29,039
um so you can use quark secret um on its

00:25:27,600 --> 00:25:32,640
own

00:25:29,039 --> 00:25:36,000
um right um so

00:25:32,640 --> 00:25:38,960
we we have these secrets and um normally

00:25:36,000 --> 00:25:40,720
you would just mount them uh or use them

00:25:38,960 --> 00:25:43,200
as environment variables right

00:25:40,720 --> 00:25:44,960
and then you your 12 factor app would be

00:25:43,200 --> 00:25:45,600
fine because all the configuration would

00:25:44,960 --> 00:25:47,679
be there

00:25:45,600 --> 00:25:49,200
would be secure in environment variables

00:25:47,679 --> 00:25:51,840
and so on and so on

00:25:49,200 --> 00:25:53,120
um but not all applications work that

00:25:51,840 --> 00:25:55,600
way um

00:25:53,120 --> 00:25:57,679
some still require config files or they

00:25:55,600 --> 00:25:58,320
need to read certificates from files on

00:25:57,679 --> 00:26:01,360
disk

00:25:58,320 --> 00:26:04,400
also so um

00:26:01,360 --> 00:26:06,240
the the existing situation is like like

00:26:04,400 --> 00:26:08,559
this that you have a volume

00:26:06,240 --> 00:26:10,080
uh which is in reality like a reference

00:26:08,559 --> 00:26:12,960
to the secret like here the

00:26:10,080 --> 00:26:14,880
gora cert and then you can use if you

00:26:12,960 --> 00:26:18,080
want you can use projection

00:26:14,880 --> 00:26:20,640
to map the keys to different paths so

00:26:18,080 --> 00:26:21,600
private key could become key certificate

00:26:20,640 --> 00:26:24,640
oh well i

00:26:21,600 --> 00:26:26,640
didn't even change it and

00:26:24,640 --> 00:26:27,919
you can also use sub paths as if you

00:26:26,640 --> 00:26:31,279
don't want the files

00:26:27,919 --> 00:26:33,279
um in a

00:26:31,279 --> 00:26:34,559
in the directory but you want them as

00:26:33,279 --> 00:26:37,279
separate files

00:26:34,559 --> 00:26:39,120
and there's this weird thing that your

00:26:37,279 --> 00:26:39,919
port will get updated it will get the

00:26:39,120 --> 00:26:43,200
new

00:26:39,919 --> 00:26:44,080
secret content in the file but only

00:26:43,200 --> 00:26:46,559
eventually

00:26:44,080 --> 00:26:49,279
so at some point after a minute or who

00:26:46,559 --> 00:26:52,400
knows kubernetes decides to update the

00:26:49,279 --> 00:26:55,200
data except when you use a sub

00:26:52,400 --> 00:26:57,039
path and also not for environment

00:26:55,200 --> 00:26:59,520
variables only for files

00:26:57,039 --> 00:27:00,880
and yeah i guess this is well known

00:26:59,520 --> 00:27:04,080
right and here you can

00:27:00,880 --> 00:27:07,279
you can mount the uh

00:27:04,080 --> 00:27:08,880
the secrets here like search you can

00:27:07,279 --> 00:27:11,200
multitude path

00:27:08,880 --> 00:27:13,440
and for the environment variables right

00:27:11,200 --> 00:27:15,600
you can set them to static values

00:27:13,440 --> 00:27:16,640
for ex for example the five parts here

00:27:15,600 --> 00:27:18,799
it's aguara

00:27:16,640 --> 00:27:21,200
certificate what we did mount here at

00:27:18,799 --> 00:27:24,080
the bottom or you can reference

00:27:21,200 --> 00:27:25,120
the key directly for the environment

00:27:24,080 --> 00:27:29,440
variable

00:27:25,120 --> 00:27:32,720
right and now we want to combine those

00:27:29,440 --> 00:27:34,240
in templated configs so to build

00:27:32,720 --> 00:27:36,320
application config files and i think

00:27:34,240 --> 00:27:39,600
cubecf will start using this

00:27:36,320 --> 00:27:41,440
this was the main idea um for uaa so we

00:27:39,600 --> 00:27:42,399
don't want to consume the bosch release

00:27:41,440 --> 00:27:45,520
anymore

00:27:42,399 --> 00:27:47,120
uh instead we want to use the native uaa

00:27:45,520 --> 00:27:48,720
release and

00:27:47,120 --> 00:27:50,480
that somehow needs to share

00:27:48,720 --> 00:27:54,799
configuration with the

00:27:50,480 --> 00:27:57,440
um existing settings from keepsafe

00:27:54,799 --> 00:27:58,799
so we are going to fill the template on

00:27:57,440 --> 00:27:59,520
the configuration file we make a

00:27:58,799 --> 00:28:01,840
template out of

00:27:59,520 --> 00:28:03,120
it we will fill in the values from

00:28:01,840 --> 00:28:05,120
existing secrets

00:28:03,120 --> 00:28:06,640
and we will output the result to another

00:28:05,120 --> 00:28:11,039
secret and

00:28:06,640 --> 00:28:14,159
secrets are always some maps of string

00:28:11,039 --> 00:28:15,600
string so they you have keys and values

00:28:14,159 --> 00:28:18,399
and both are strings

00:28:15,600 --> 00:28:18,399
so um

00:28:20,799 --> 00:28:24,399
yeah we will do this for all the keys

00:28:22,399 --> 00:28:27,279
right each key can be attached

00:28:24,399 --> 00:28:27,919
each value of a key can be a template so

00:28:27,279 --> 00:28:29,840
um

00:28:27,919 --> 00:28:32,320
the demo i'm going to show will be using

00:28:29,840 --> 00:28:34,240
this input here and i

00:28:32,320 --> 00:28:37,039
think it's better to switch to the

00:28:34,240 --> 00:28:37,039
terminal now

00:28:38,880 --> 00:28:43,360
and show it in the editor

00:28:44,080 --> 00:28:49,679
so you should be able to see my terminal

00:28:46,559 --> 00:28:52,960
and the k9s on the side

00:28:49,679 --> 00:28:56,840
yes cool

00:28:52,960 --> 00:29:00,240
and um so this is the templated config

00:28:56,840 --> 00:29:03,120
um i will

00:29:00,240 --> 00:29:05,279
also create the secrets here i will

00:29:03,120 --> 00:29:06,080
create the secret with a key named

00:29:05,279 --> 00:29:09,520
password

00:29:06,080 --> 00:29:13,440
which has a password on the third which

00:29:09,520 --> 00:29:15,760
is a third and then i will use

00:29:13,440 --> 00:29:16,720
a private key and certificate keys from

00:29:15,760 --> 00:29:20,399
the third

00:29:16,720 --> 00:29:23,440
i will map them to to key

00:29:20,399 --> 00:29:25,200
and desert and then this will um

00:29:23,440 --> 00:29:29,279
will live under values and can be used

00:29:25,200 --> 00:29:33,279
here in the template section of the cid

00:29:29,279 --> 00:29:34,080
um since it's string string this is a

00:29:33,279 --> 00:29:37,279
more

00:29:34,080 --> 00:29:39,039
uh this is an inline yaml and

00:29:37,279 --> 00:29:41,520
since we're using home templates we can

00:29:39,039 --> 00:29:45,760
actually use some hand functions

00:29:41,520 --> 00:29:45,760
like to json um

00:29:46,159 --> 00:29:52,559
yeah and

00:29:49,279 --> 00:29:56,080
here at the top is the input data

00:29:52,559 --> 00:29:58,320
so i'm currently running the operator

00:29:56,080 --> 00:30:00,240
here the quark secret operator

00:29:58,320 --> 00:30:02,720
so i can just take a look at quark

00:30:00,240 --> 00:30:02,720
secret

00:30:03,279 --> 00:30:09,840
and apply this

00:30:06,399 --> 00:30:09,840
file here

00:30:12,480 --> 00:30:14,720
okay

00:30:16,880 --> 00:30:22,720
templated config 2 and you can see it's

00:30:20,640 --> 00:30:24,320
going to generate the password very fast

00:30:22,720 --> 00:30:27,360
then the certificate

00:30:24,320 --> 00:30:29,360
and then as well render the template

00:30:27,360 --> 00:30:32,799
so now i can take a look at the

00:30:29,360 --> 00:30:32,799
generated secrets and

00:30:32,880 --> 00:30:37,679
i'd like the the password here for

00:30:36,000 --> 00:30:40,159
example is what you would expect it has

00:30:37,679 --> 00:30:41,760
a key name password and dentistry

00:30:40,159 --> 00:30:44,480
and the template is much more

00:30:41,760 --> 00:30:47,520
interesting because it has the

00:30:44,480 --> 00:30:52,320
uh described mapping here like

00:30:47,520 --> 00:30:52,320
on tls cert and tls key

00:30:53,039 --> 00:30:57,520
and then the inline yaml with the array

00:30:57,760 --> 00:31:05,200
and it has the same values again

00:31:02,000 --> 00:31:10,080
here's the json output from the

00:31:05,200 --> 00:31:11,840
from the debug field yeah and

00:31:10,080 --> 00:31:15,360
we hope that this can also be used for

00:31:11,840 --> 00:31:15,360
more complicated configs

00:31:15,440 --> 00:31:19,679
in the future because now with all the

00:31:18,320 --> 00:31:22,960
secrets living in

00:31:19,679 --> 00:31:26,640
um with all

00:31:22,960 --> 00:31:29,519
all the credentials living in kubernetes

00:31:26,640 --> 00:31:32,080
uh we we will have trouble you getting

00:31:29,519 --> 00:31:34,000
home to read them right so um

00:31:32,080 --> 00:31:35,600
generating those conflicts has to to

00:31:34,000 --> 00:31:38,720
happen in cluster

00:31:35,600 --> 00:31:41,840
we made the cid a little bit

00:31:38,720 --> 00:31:45,600
um template agnostic it's not like

00:31:41,840 --> 00:31:46,559
we really support um different template

00:31:45,600 --> 00:31:48,799
types but

00:31:46,559 --> 00:31:49,760
um we could imagine that we support more

00:31:48,799 --> 00:31:52,960
than ham if

00:31:49,760 --> 00:31:54,880
um somebody likes uh mustache or

00:31:52,960 --> 00:31:58,640
something

00:31:54,880 --> 00:32:01,760
yeah that's um that's it

00:31:58,640 --> 00:32:05,360
i have a couple questions um uh just or

00:32:01,760 --> 00:32:06,640
at least one uh just so everyone

00:32:05,360 --> 00:32:09,360
understands

00:32:06,640 --> 00:32:10,720
why why the quarks team made this and

00:32:09,360 --> 00:32:14,080
how it might be

00:32:10,720 --> 00:32:17,279
more universally useful so um this

00:32:14,080 --> 00:32:20,399
uh feature was designed to enable

00:32:17,279 --> 00:32:22,880
cubecf to consume

00:32:20,399 --> 00:32:23,760
uh the new uaa distribution the

00:32:22,880 --> 00:32:28,720
non-bosch

00:32:23,760 --> 00:32:31,919
release uh kubernetes release of uaa

00:32:28,720 --> 00:32:33,679
why is this also required for cf for

00:32:31,919 --> 00:32:36,640
k-8s uh if it's not

00:32:33,679 --> 00:32:39,279
why is it why is that different why is

00:32:36,640 --> 00:32:43,840
cfa franchise able to consume this

00:32:39,279 --> 00:32:43,840
without using this this operator

00:32:45,120 --> 00:32:49,679
so um i think when when we add more

00:32:48,240 --> 00:32:53,120
native components to

00:32:49,679 --> 00:32:54,159
qcf we will have to provide config and

00:32:53,120 --> 00:32:56,799
as long as the

00:32:54,159 --> 00:32:59,600
bosch manifests and the hem chart right

00:32:56,799 --> 00:33:01,840
that generates those manifests

00:32:59,600 --> 00:33:04,240
as long as this is our single source of

00:33:01,840 --> 00:33:07,120
truth we will have to somehow share

00:33:04,240 --> 00:33:08,880
and at some share these credentials and

00:33:07,120 --> 00:33:12,320
at some

00:33:08,880 --> 00:33:14,159
place right um either at deployment time

00:33:12,320 --> 00:33:16,159
or at runtime inside the cluster we will

00:33:14,159 --> 00:33:19,120
have to generate those config files

00:33:16,159 --> 00:33:19,600
and um i could imagine that you also try

00:33:19,120 --> 00:33:22,960
to get

00:33:19,600 --> 00:33:25,120
him to fetch those info this those

00:33:22,960 --> 00:33:26,480
files from the cluster but then you you

00:33:25,120 --> 00:33:28,240
have like a race condition you have to

00:33:26,480 --> 00:33:30,960
wait for them to be generated

00:33:28,240 --> 00:33:32,880
so it's easier to to do it in clustering

00:33:30,960 --> 00:33:36,320
um for c4 kids i'm

00:33:32,880 --> 00:33:37,760
um uh so

00:33:36,320 --> 00:33:39,519
from the other direction right you have

00:33:37,760 --> 00:33:40,559
all native components and you have no

00:33:39,519 --> 00:33:42,640
bosch right no

00:33:40,559 --> 00:33:44,559
um leftover bosch that you have to

00:33:42,640 --> 00:33:47,600
eliminate step by step

00:33:44,559 --> 00:33:48,240
um i think they generate most of their

00:33:47,600 --> 00:33:50,960
contact

00:33:48,240 --> 00:33:52,080
config files before when they do the ytt

00:33:50,960 --> 00:33:55,279
step yeah right

00:33:52,080 --> 00:33:58,720
so they probably don't need this yet but

00:33:55,279 --> 00:34:00,080
it's more and more secrets um live on

00:33:58,720 --> 00:34:03,200
the cluster and not

00:34:00,080 --> 00:34:06,320
on the disk of the deployer

00:34:03,200 --> 00:34:07,840
that might change i don't know i can

00:34:06,320 --> 00:34:10,879
speak to that a little bit

00:34:07,840 --> 00:34:13,599
as um i'm

00:34:10,879 --> 00:34:14,879
standing in as the pm for relent and uh

00:34:13,599 --> 00:34:18,560
we are evaluating

00:34:14,879 --> 00:34:20,960
quark secret uh and a couple of other

00:34:18,560 --> 00:34:23,200
standalone components they have or will

00:34:20,960 --> 00:34:26,800
have very soon quarks job and

00:34:23,200 --> 00:34:29,679
the quarks restart that can restart pods

00:34:26,800 --> 00:34:30,560
in order to move the management of

00:34:29,679 --> 00:34:34,159
secrets

00:34:30,560 --> 00:34:35,040
into the cluster this makes me very

00:34:34,159 --> 00:34:38,639
happy

00:34:35,040 --> 00:34:40,240
thank you paul um

00:34:38,639 --> 00:34:41,919
because i'd like to see this work being

00:34:40,240 --> 00:34:44,879
used as widely as i can

00:34:41,919 --> 00:34:46,159
and um thanks mario for for for showing

00:34:44,879 --> 00:34:49,359
that were there any more questions

00:34:46,159 --> 00:34:49,359
uh about the future

00:34:54,320 --> 00:34:58,800
okay thank you presenters um i hope

00:34:57,920 --> 00:35:00,960
everyone

00:34:58,800 --> 00:35:02,000
stays safe i know some of us are in fire

00:35:00,960 --> 00:35:03,680
zones some of us have

00:35:02,000 --> 00:35:05,200
limited air quality we're all dealing

00:35:03,680 --> 00:35:08,720
with covid

00:35:05,200 --> 00:35:11,200
uh madness so stay safe

00:35:08,720 --> 00:35:11,760
be kind all those good things and thank

00:35:11,200 --> 00:35:15,119
you for

00:35:11,760 --> 00:35:21,440
joining us this week bye everyone

00:35:15,119 --> 00:35:21,440

YouTube URL: https://www.youtube.com/watch?v=g4B2Ul03SnY


