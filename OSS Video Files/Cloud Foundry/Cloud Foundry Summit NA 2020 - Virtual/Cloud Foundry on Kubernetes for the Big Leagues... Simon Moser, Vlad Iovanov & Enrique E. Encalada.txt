Title: Cloud Foundry on Kubernetes for the Big Leagues... Simon Moser, Vlad Iovanov & Enrique E. Encalada
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	Cloud Foundry on Kubernetes for the Big Leagues: kubecf Multi-cluster - Simon Moser, IBM; Vlad Iovanov, SUSE & Enrique E. Encalada, IBM 

For more info: https://www.cloudfoundry.org/ 

Now that Kubernetes is here for Cloud Foundry, IBM & SUSE are showcasing advanced, multi-cluster deployment topologies to support demands for scale, robustness and flexibility.These new ways of layering Cloud Foundry on top of Kube can be used to improve application availability, to support isolation segments, or to drive massive Cloud Foundry installations. Join us to learn how you can take your Kubernetes and Cloud Foundry infrastructures to the next level.
Captions: 
	00:00:00,030 --> 00:00:05,640
good morning good afternoon good evening

00:00:02,129 --> 00:00:07,980
wherever in the world you are welcome to

00:00:05,640 --> 00:00:11,519
this year's virtual cloud foundry summit

00:00:07,980 --> 00:00:14,450
and my name is Tammy Moser and we will

00:00:11,519 --> 00:00:17,880
be talking about coop CF multi cluster

00:00:14,450 --> 00:00:20,029
I'm having with me flat you're one of

00:00:17,880 --> 00:00:22,380
who's a Software Architect and Susan and

00:00:20,029 --> 00:00:25,800
Enrique and colada who's a software

00:00:22,380 --> 00:00:27,720
engineer with me at IBM we will be

00:00:25,800 --> 00:00:29,570
talking about cloud foundry

00:00:27,720 --> 00:00:32,099
implementing this for the big leagues

00:00:29,570 --> 00:00:35,100
and the question that we were trying to

00:00:32,099 --> 00:00:37,110
gather is what happens if you try to run

00:00:35,100 --> 00:00:40,230
a company discussed with thousands or

00:00:37,110 --> 00:00:42,149
ten thousands of worker nodes and the

00:00:40,230 --> 00:00:45,809
simple answer to this everybody will

00:00:42,149 --> 00:00:50,239
tell you don't go there right the reason

00:00:45,809 --> 00:00:52,460
why that is is because most of the

00:00:50,239 --> 00:00:54,960
probably the service providers out there

00:00:52,460 --> 00:00:57,539
have what they call size and

00:00:54,960 --> 00:00:59,399
recommendations so one could believe

00:00:57,539 --> 00:01:02,010
this buster should not go beyond a

00:00:59,399 --> 00:01:04,170
certain limit and usually that certain

00:01:02,010 --> 00:01:07,920
limit is described as a couple of

00:01:04,170 --> 00:01:09,479
hundred the notes in you know at least

00:01:07,920 --> 00:01:12,180
if you want to use them for production

00:01:09,479 --> 00:01:16,229
workloads I'd were totally aware that

00:01:12,180 --> 00:01:18,390
they are some experiments where just

00:01:16,229 --> 00:01:20,700
doesn't have been scaled up to to you

00:01:18,390 --> 00:01:23,570
know thousands of nodes but from a

00:01:20,700 --> 00:01:26,220
practical perspective I think the

00:01:23,570 --> 00:01:27,900
recommendation is for most of them a

00:01:26,220 --> 00:01:30,930
couple of hundred nodes is considered

00:01:27,900 --> 00:01:33,780
freaking off while that is perfectly

00:01:30,930 --> 00:01:38,310
okay for a single tenant deployment such

00:01:33,780 --> 00:01:42,659
as you can accomplish it with coups

00:01:38,310 --> 00:01:44,399
yesterday or even with CF for cakes we

00:01:42,659 --> 00:01:46,439
have problems when we are talking about

00:01:44,399 --> 00:01:49,409
large multi-tenant environments such as

00:01:46,439 --> 00:01:51,299
the IBM Cloud Foundry service or the ACP

00:01:49,409 --> 00:01:54,320
cloud platform those are Bosch

00:01:51,299 --> 00:01:58,110
deployments today that are running

00:01:54,320 --> 00:02:00,840
thousands of Bosch cells of big results

00:01:58,110 --> 00:02:08,759
in Bosch and they are not easily movable

00:02:00,840 --> 00:02:12,209
to ability space to plant so in the next

00:02:08,759 --> 00:02:14,700
slide my friend Enrique is going to give

00:02:12,209 --> 00:02:21,810
you an introduction to the use cases

00:02:14,700 --> 00:02:24,180
that were solving okay thanks I'm on yes

00:02:21,810 --> 00:02:26,819
so with these examples like very large

00:02:24,180 --> 00:02:30,000
production laundry environments in both

00:02:26,819 --> 00:02:32,400
IBM and ASAP I think that the question

00:02:30,000 --> 00:02:33,859
is quite relevant it will be awesome if

00:02:32,400 --> 00:02:37,079
we could have like different boundaries

00:02:33,859 --> 00:02:40,019
across different curious clusters so

00:02:37,079 --> 00:02:42,299
just to give you a very idea of what

00:02:40,019 --> 00:02:44,000
does this means this basically means

00:02:42,299 --> 00:02:47,700
that you have one your nearest cluster

00:02:44,000 --> 00:02:49,170
with your control signs and then you can

00:02:47,700 --> 00:02:52,650
have different your nearest clusters

00:02:49,170 --> 00:02:55,500
with Diego cells so this will be great

00:02:52,650 --> 00:02:57,450
and one of the or some of the reasons of

00:02:55,500 --> 00:02:58,920
this is because we can address three

00:02:57,450 --> 00:03:01,620
limitations that we have now with a

00:02:58,920 --> 00:03:04,159
single cluster one will be size

00:03:01,620 --> 00:03:06,329
restrictions so basically you will have

00:03:04,159 --> 00:03:08,879
eventually these massive multi cluster

00:03:06,329 --> 00:03:11,420
deployments where you could have like n

00:03:08,879 --> 00:03:14,970
number of clusters just for your load

00:03:11,420 --> 00:03:17,430
then we have isolation segments similar

00:03:14,970 --> 00:03:19,949
to what you do now with Diego cells you

00:03:17,430 --> 00:03:22,260
can define a particular Diego cell where

00:03:19,949 --> 00:03:25,019
you would like to run organizations well

00:03:22,260 --> 00:03:28,319
you can do that now but a different

00:03:25,019 --> 00:03:30,480
keyword need is clusters and one of the

00:03:28,319 --> 00:03:32,489
last ones will be disaster recovery this

00:03:30,480 --> 00:03:35,699
is also a really nice thing that you can

00:03:32,489 --> 00:03:38,190
achieve Multi multi fund recover in

00:03:35,699 --> 00:03:39,959
these clusters because you could define

00:03:38,190 --> 00:03:42,329
like one toaster on a particular region

00:03:39,959 --> 00:03:44,040
and then you could have like understand

00:03:42,329 --> 00:03:47,730
by set of applications on a different

00:03:44,040 --> 00:03:50,190
region so for example if your world load

00:03:47,730 --> 00:03:53,250
is on us out and it goes down because of

00:03:50,190 --> 00:03:57,989
X event you kind of still route all of

00:03:53,250 --> 00:04:00,329
the customer applications to us is with

00:03:57,989 --> 00:04:04,769
this in mind now flood is going to

00:04:00,329 --> 00:04:09,419
showcase a demo on how to do this thanks

00:04:04,769 --> 00:04:13,169
enrique so for this demo we're going to

00:04:09,419 --> 00:04:15,750
start with a couple of IBM kubernetes

00:04:13,169 --> 00:04:19,530
clusters we have two of them deployed

00:04:15,750 --> 00:04:22,380
one is a control plane so all of the

00:04:19,530 --> 00:04:25,620
cloud foundry components like api diego

00:04:22,380 --> 00:04:28,700
api and so on will run here basically

00:04:25,620 --> 00:04:34,020
everything except the diego cells and

00:04:28,700 --> 00:04:36,360
then here we have a second cluster a

00:04:34,020 --> 00:04:39,840
second kubernetes cluster where the

00:04:36,360 --> 00:04:43,320
Diego cells will live so having these

00:04:39,840 --> 00:04:46,500
two setups let's move to the terminal

00:04:43,320 --> 00:04:51,240
and we'll show how this works so on the

00:04:46,500 --> 00:04:53,940
Left I'll show the current context it's

00:04:51,240 --> 00:04:58,080
the control plane and on the right hand

00:04:53,940 --> 00:05:02,120
side and the context is the minions so

00:04:58,080 --> 00:05:09,419
where cells live so if we look at pods

00:05:02,120 --> 00:05:11,610
for both we will see that on the Left we

00:05:09,419 --> 00:05:13,190
can find all of the Cloud Foundry roles

00:05:11,610 --> 00:05:17,460
API

00:05:13,190 --> 00:05:21,539
you know database UA a everything except

00:05:17,460 --> 00:05:23,490
a Diego cell so applications will not be

00:05:21,539 --> 00:05:25,979
running on this cluster on the right

00:05:23,490 --> 00:05:29,310
hand side we can see that we just have

00:05:25,979 --> 00:05:31,889
the Diego cell so all the applications

00:05:29,310 --> 00:05:35,849
that we deploy will actually go to this

00:05:31,889 --> 00:05:37,889
Diego cell and one more thing

00:05:35,849 --> 00:05:42,120
harkening back to what Enrique was

00:05:37,889 --> 00:05:45,510
saying about isolation segments we

00:05:42,120 --> 00:05:46,110
actually have an isolation segment set

00:05:45,510 --> 00:05:49,620
up here

00:05:46,110 --> 00:05:52,260
it's called minion minions one and this

00:05:49,620 --> 00:05:57,330
obviously this Diego cell on the right

00:05:52,260 --> 00:05:59,250
has a placement tag of minions one so we

00:05:57,330 --> 00:06:02,610
can show that we have applications

00:05:59,250 --> 00:06:06,539
deployed here we have app one and we can

00:06:02,610 --> 00:06:09,479
actually curl this we get hello world

00:06:06,539 --> 00:06:11,639
back so this looks easy but what's

00:06:09,479 --> 00:06:14,400
actually happening is when we make a

00:06:11,639 --> 00:06:16,529
curl request to this application we hit

00:06:14,400 --> 00:06:18,779
a load balancer then we hit the cloud

00:06:16,529 --> 00:06:24,159
foundry router in the first cluster

00:06:18,779 --> 00:06:27,909
then that router goes through through

00:06:24,159 --> 00:06:30,129
both subnets so it goes through the gap

00:06:27,909 --> 00:06:33,120
of these two clusters and reaches the

00:06:30,129 --> 00:06:40,360
Diego cell where your application lives

00:06:33,120 --> 00:06:44,159
so going back to the slides we want to

00:06:40,360 --> 00:06:47,039
discuss a bit on how we how we did this

00:06:44,159 --> 00:06:50,499
we won't want to make it very easy for

00:06:47,039 --> 00:06:53,770
everyone to be able to deploy the these

00:06:50,499 --> 00:06:56,289
advanced topologies so it should be as

00:06:53,770 --> 00:07:00,339
easy as a helm install with a particular

00:06:56,289 --> 00:07:03,849
particular flag set and same for Diego

00:07:00,339 --> 00:07:06,639
segments now as you can probably tell

00:07:03,849 --> 00:07:09,639
from this diagram the control plane and

00:07:06,639 --> 00:07:12,490
cells have to talk a lot there are a lot

00:07:09,639 --> 00:07:15,430
of connections happening and for the

00:07:12,490 --> 00:07:18,309
grey arrows all you have to do is set up

00:07:15,430 --> 00:07:22,169
community services correctly we have

00:07:18,309 --> 00:07:26,409
parse DNS capabilities inside qcf and

00:07:22,169 --> 00:07:30,819
with the correct external services set

00:07:26,409 --> 00:07:33,490
up we'll be able to talk between the

00:07:30,819 --> 00:07:36,219
control plane and the Diego cells with

00:07:33,490 --> 00:07:38,800
no certificate changes you know all the

00:07:36,219 --> 00:07:41,229
DNS names remain the same

00:07:38,800 --> 00:07:44,499
and everything gets routed by kubernetes

00:07:41,229 --> 00:07:47,439
correctly so very easy for the orange

00:07:44,499 --> 00:07:51,490
arrow it's still easy if you're using

00:07:47,439 --> 00:07:53,709
something like IKS or a hyper scaler all

00:07:51,490 --> 00:07:56,229
you have to do is deploy your coordinate

00:07:53,709 --> 00:07:59,919
ease clusters on different subnets as

00:07:56,229 --> 00:08:04,059
we're shown you were showing here on the

00:07:59,919 --> 00:08:08,800
Left we have a 172 22 and on the right

00:08:04,059 --> 00:08:11,020
we have a 172 23 for that orange arrow

00:08:08,800 --> 00:08:13,899
to work all we have to do is make sure

00:08:11,020 --> 00:08:18,129
that the go router can reach the Diego

00:08:13,899 --> 00:08:21,249
cell pod IP and this happens

00:08:18,129 --> 00:08:23,439
automatically on IKS if you don't run on

00:08:21,249 --> 00:08:25,899
a hyper scalar you can use something

00:08:23,439 --> 00:08:28,689
like cilium or calico these do a very

00:08:25,899 --> 00:08:32,620
good job and it's easy to set up once

00:08:28,689 --> 00:08:35,649
you do that the the IP emitted by the

00:08:32,620 --> 00:08:40,120
router meter will actually be reachable

00:08:35,649 --> 00:08:44,279
by the go router so with this setup you

00:08:40,120 --> 00:08:51,069
can do what we've just shown and that

00:08:44,279 --> 00:08:53,019
concludes the demo back to enrique yeah

00:08:51,069 --> 00:08:57,519
all right that was a really nice time of

00:08:53,019 --> 00:09:00,519
that so summary on outlook well running

00:08:57,519 --> 00:09:03,819
a cube CF 4 or foundries across multiple

00:09:00,519 --> 00:09:06,790
cue lists clusters is working in the

00:09:03,819 --> 00:09:10,449
demo kind of proof that one of the main

00:09:06,790 --> 00:09:12,160
things is like we kind of tackle the

00:09:10,449 --> 00:09:14,769
three things we wanted to overcome which

00:09:12,160 --> 00:09:17,079
is like the size restrictions we wanted

00:09:14,769 --> 00:09:21,189
to measure the isolation segments worth

00:09:17,079 --> 00:09:24,189
and also high availability this piece of

00:09:21,189 --> 00:09:28,120
work or a spike will be available soon

00:09:24,189 --> 00:09:30,459
in qcf and also the Iranian support for

00:09:28,120 --> 00:09:33,880
multi cluster still in the works as you

00:09:30,459 --> 00:09:38,620
may have seen this was done just with

00:09:33,880 --> 00:09:41,819
the Ellison's I think that would be all

00:09:38,620 --> 00:09:45,189
for the summary and now we go with Simon

00:09:41,819 --> 00:09:48,339
all right so I have the pleasure to

00:09:45,189 --> 00:09:52,120
conclude this meeting again so thank you

00:09:48,339 --> 00:09:55,720
all for listening in I think we showed

00:09:52,120 --> 00:09:58,500
nice interesting twist on how to tackle

00:09:55,720 --> 00:10:00,910
large-scale and high available

00:09:58,500 --> 00:10:03,040
deployments of cloud for view and please

00:10:00,910 --> 00:10:05,410
and if you have any further questions

00:10:03,040 --> 00:10:08,260
for us please come and talk to us in our

00:10:05,410 --> 00:10:09,459
upcoming Q&A and if you don't have time

00:10:08,260 --> 00:10:11,199
because you need to go to another

00:10:09,459 --> 00:10:14,439
session now or you need to do something

00:10:11,199 --> 00:10:16,959
else we are always available in the

00:10:14,439 --> 00:10:20,970
cloud foundry slack in the coop CF slash

00:10:16,959 --> 00:10:23,260
spend some coop CF - def channel

00:10:20,970 --> 00:10:26,380
interested in the code there is a link

00:10:23,260 --> 00:10:27,910
to the github and with that I'll just

00:10:26,380 --> 00:10:29,829
wish you a very nice rest of the

00:10:27,910 --> 00:10:35,490
conference and hope to see you all

00:10:29,829 --> 00:10:35,490

YouTube URL: https://www.youtube.com/watch?v=E5CpaM4LLvo


