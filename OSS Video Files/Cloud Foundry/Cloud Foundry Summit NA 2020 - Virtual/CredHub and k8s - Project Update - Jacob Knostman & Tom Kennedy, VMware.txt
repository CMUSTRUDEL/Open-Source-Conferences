Title: CredHub and k8s - Project Update - Jacob Knostman & Tom Kennedy, VMware
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	CredHub and k8s - Project Update - Jacob Knostman & Tom Kennedy, VMware 

For more info: https://www.cloudfoundry.org/ 

The CredHub team will be talking briefly about our current explorations in the Kubernetes space, including service authentication/application bindings, credential generation, and more. We will also provide updates on our future roadmap plans.
Captions: 
	00:00:00,030 --> 00:00:06,120
everyone thanks for joining us in this

00:00:01,949 --> 00:00:08,519
remote setting for everything but I kick

00:00:06,120 --> 00:00:11,340
it off I'm Jake master I'm a product

00:00:08,519 --> 00:00:14,160
manager on the chrome team I am Tom

00:00:11,340 --> 00:00:17,400
Kennedy I'm one of the engineers in the

00:00:14,160 --> 00:00:20,160
credit team and we're here to talk to

00:00:17,400 --> 00:00:21,750
you about some updates and the product

00:00:20,160 --> 00:00:24,539
of credit as well as some of the

00:00:21,750 --> 00:00:28,160
exploration work and work we're starting

00:00:24,539 --> 00:00:28,160
on the C affricates project

00:00:29,310 --> 00:00:35,050
so when the cfirkus project was first

00:00:32,710 --> 00:00:37,390
kicking off we were in a state where

00:00:35,050 --> 00:00:39,910
much of the team wasn't super familiar

00:00:37,390 --> 00:00:42,310
with kubernetes itself so we figured

00:00:39,910 --> 00:00:45,070
what better thing to do then do a

00:00:42,310 --> 00:00:47,080
discovery and framing based on that we

00:00:45,070 --> 00:00:49,030
were setting out to do two weeks

00:00:47,080 --> 00:00:52,270
dedicated just to learning kubernetes of

00:00:49,030 --> 00:00:54,610
itself and seeing what credential

00:00:52,270 --> 00:00:56,739
primitives are in the platform what

00:00:54,610 --> 00:00:58,750
things are necessary we talked to

00:00:56,739 --> 00:01:01,270
different service teams like RabbitMQ

00:00:58,750 --> 00:01:04,270
some of the open source contributors to

00:01:01,270 --> 00:01:07,000
kubernetes itself and just trying to get

00:01:04,270 --> 00:01:10,330
a general idea of what areas we can add

00:01:07,000 --> 00:01:12,750
value to our CF for Katie's offering I'm

00:01:10,330 --> 00:01:15,190
given that we know a good amount about

00:01:12,750 --> 00:01:17,350
credential management and storage and

00:01:15,190 --> 00:01:20,350
creation for things in Cloud Foundry

00:01:17,350 --> 00:01:22,509
itself we figured we should figure out

00:01:20,350 --> 00:01:28,780
where we can add value to see if the

00:01:22,509 --> 00:01:31,590
gates and the kubernetes face world so

00:01:28,780 --> 00:01:34,420
we had some key takeaways from this

00:01:31,590 --> 00:01:36,369
discovery and framing one of which was

00:01:34,420 --> 00:01:38,770
that platform operators and developers

00:01:36,369 --> 00:01:41,399
currently have no easy way to securely

00:01:38,770 --> 00:01:44,619
generate secrets in kubernetes

00:01:41,399 --> 00:01:47,979
especially in a way that prevents humans

00:01:44,619 --> 00:01:49,539
from seeing any kind of secret value so

00:01:47,979 --> 00:01:52,450
this was one massive area that we were

00:01:49,539 --> 00:01:54,700
like we definitely can provide value we

00:01:52,450 --> 00:01:58,390
also saw that secrets appeared to be

00:01:54,700 --> 00:02:00,970
inconsistently used I mean by that is

00:01:58,390 --> 00:02:05,380
some people will throw a bunch of values

00:02:00,970 --> 00:02:07,149
into one secret others might you know do

00:02:05,380 --> 00:02:09,310
various different things with their

00:02:07,149 --> 00:02:10,840
secrets like how they store them whether

00:02:09,310 --> 00:02:12,310
they move them on to disk some people

00:02:10,840 --> 00:02:15,370
put in config maps and a whole bunch of

00:02:12,310 --> 00:02:19,930
different things and we wanted to try

00:02:15,370 --> 00:02:22,120
and get everyone aligned on that we also

00:02:19,930 --> 00:02:26,130
saw that platform operators and security

00:02:22,120 --> 00:02:28,480
engineers had some questions around the

00:02:26,130 --> 00:02:31,000
security level of kerbin any secrets in

00:02:28,480 --> 00:02:36,070
general mainly due to the lack of

00:02:31,000 --> 00:02:37,330
default encryption of SED there was some

00:02:36,070 --> 00:02:40,210
encryption that you could do through

00:02:37,330 --> 00:02:41,319
public cloud kms offerings but in the

00:02:40,210 --> 00:02:43,980
private cloud this did

00:02:41,319 --> 00:02:43,980
really exist

00:02:44,640 --> 00:02:50,980
and so in order to do level set on some

00:02:48,940 --> 00:02:53,800
of the work that we're trying to get

00:02:50,980 --> 00:02:55,840
into cfirkus project we want to make

00:02:53,800 --> 00:02:58,300
sure we can do a quick recap on the

00:02:55,840 --> 00:03:00,310
benefits the cred hub in foundry world

00:02:58,300 --> 00:03:03,700
southern on Kate's world as we know it

00:03:00,310 --> 00:03:05,440
today just so that we can make sure

00:03:03,700 --> 00:03:08,830
everyone knows what sort of feature

00:03:05,440 --> 00:03:09,519
parity we're looking to get towards and

00:03:08,830 --> 00:03:11,470
go from there

00:03:09,519 --> 00:03:13,360
so yeah crab is a component of cloud

00:03:11,470 --> 00:03:15,550
foundry itself it's a simple secure

00:03:13,360 --> 00:03:18,790
credential service built specifically

00:03:15,550 --> 00:03:22,660
for handling those secrets credential

00:03:18,790 --> 00:03:25,390
generation storage for the platform it's

00:03:22,660 --> 00:03:28,120
pretty simple but it is really powerful

00:03:25,390 --> 00:03:29,620
in that it prevents developers or

00:03:28,120 --> 00:03:32,019
operators from ever needing to see

00:03:29,620 --> 00:03:34,840
passwords instead they can provide only

00:03:32,019 --> 00:03:38,230
references in their manifest and then

00:03:34,840 --> 00:03:41,680
wash and Cloud Foundry itself know how

00:03:38,230 --> 00:03:45,489
to talk to crud hub and send their

00:03:41,680 --> 00:03:52,299
results over to whatever application or

00:03:45,489 --> 00:03:53,829
any product that needs them okay so that

00:03:52,299 --> 00:03:55,180
brings us to a question that we've been

00:03:53,829 --> 00:03:58,959
getting asked a lot lately

00:03:55,180 --> 00:04:01,000
which is what is credit hub going to

00:03:58,959 --> 00:04:04,810
look like on kubernetes or when can I

00:04:01,000 --> 00:04:06,549
expect credit hub on kubernetes so we

00:04:04,810 --> 00:04:09,940
originally considered deploying credit

00:04:06,549 --> 00:04:11,709
to kubernetes and we figured great this

00:04:09,940 --> 00:04:14,170
will solve our generation and secure

00:04:11,709 --> 00:04:16,000
storage problems but it didn't really

00:04:14,170 --> 00:04:17,530
fit into those kubernetes native

00:04:16,000 --> 00:04:20,169
patterns that we really wanted to be

00:04:17,530 --> 00:04:21,700
aligned to we also saw that there was

00:04:20,169 --> 00:04:23,440
tons of good solutions from the

00:04:21,700 --> 00:04:25,990
community already that we would be able

00:04:23,440 --> 00:04:28,930
to leverage and deliver those same

00:04:25,990 --> 00:04:32,680
outcomes that everyone was used to with

00:04:28,930 --> 00:04:34,810
credit hub for VMs we do think that

00:04:32,680 --> 00:04:37,030
there is some opportunity to improve

00:04:34,810 --> 00:04:38,740
upon the lifecycle management of

00:04:37,030 --> 00:04:42,250
certificates specifically around

00:04:38,740 --> 00:04:47,500
rotation and revocation and things like

00:04:42,250 --> 00:04:49,600
that but we didn't want to manage a lot

00:04:47,500 --> 00:04:52,330
of secrets via a credential vault and

00:04:49,600 --> 00:04:55,599
what I mean by that is we see the future

00:04:52,330 --> 00:04:57,700
of kubernetes secrets being more reliant

00:04:55,599 --> 00:05:00,220
on an underlying service mesh

00:04:57,700 --> 00:05:02,350
and there will be very little hopefully

00:05:00,220 --> 00:05:04,600
no secrets that we will have to event

00:05:02,350 --> 00:05:06,310
generate the long term everything will

00:05:04,600 --> 00:05:08,830
be done through identity based

00:05:06,310 --> 00:05:11,470
authentication and certificates will be

00:05:08,830 --> 00:05:13,480
issued by the service mesh so we think

00:05:11,470 --> 00:05:17,280
that ideally the world will move away

00:05:13,480 --> 00:05:17,280
from something like a credential vault

00:05:19,020 --> 00:05:23,680
and so one of the first tracks will work

00:05:21,760 --> 00:05:26,710
that we're really diving into right now

00:05:23,680 --> 00:05:29,140
that we see is a I wouldn't say a big

00:05:26,710 --> 00:05:32,610
problem but something that we can make

00:05:29,140 --> 00:05:35,980
better in the ECF er case world is that

00:05:32,610 --> 00:05:38,160
currently in the Alpha the secrets that

00:05:35,980 --> 00:05:40,630
are being generated so the passwords and

00:05:38,160 --> 00:05:43,330
certificates are being generated on the

00:05:40,630 --> 00:05:45,610
client side using the boss CLI to

00:05:43,330 --> 00:05:50,380
actually create a file that is then

00:05:45,610 --> 00:05:51,910
applied which as we talked about in some

00:05:50,380 --> 00:05:53,920
of the benefits cred hub ideally no

00:05:51,910 --> 00:05:56,920
human should ever see the passwords

00:05:53,920 --> 00:05:59,110
themselves so what our goal was

00:05:56,920 --> 00:06:01,390
on this track of work is to be able to

00:05:59,110 --> 00:06:04,630
securely generate capital s secrets

00:06:01,390 --> 00:06:07,600
which is a concept in kubernetes that is

00:06:04,630 --> 00:06:10,960
a way to store credentials or passwords

00:06:07,600 --> 00:06:14,080
and stuff to deploy the platform without

00:06:10,960 --> 00:06:17,440
human intervention so today as I

00:06:14,080 --> 00:06:20,620
mentioned secrets are being used in a

00:06:17,440 --> 00:06:22,360
sort of inconsistent way there's a lot

00:06:20,620 --> 00:06:24,240
of options you can do with capital s

00:06:22,360 --> 00:06:26,950
secrets in the kubernetes world and

00:06:24,240 --> 00:06:29,740
teams are taking full advantage event in

00:06:26,950 --> 00:06:31,300
order to try to make it so there's a

00:06:29,740 --> 00:06:33,490
limited amount of code difference

00:06:31,300 --> 00:06:38,650
between their Cloud Foundry offerings

00:06:33,490 --> 00:06:41,230
and the cfirkus offerings so what we're

00:06:38,650 --> 00:06:43,450
hoping to do is come up with a solution

00:06:41,230 --> 00:06:46,090
that hide the secret values from

00:06:43,450 --> 00:06:49,090
developers and operators but allows

00:06:46,090 --> 00:06:51,160
component teams to stick to a model that

00:06:49,090 --> 00:06:54,250
they'll be able to maintain long term

00:06:51,160 --> 00:06:58,150
for both regular Cloud Foundry and CF or

00:06:54,250 --> 00:06:59,770
gates and our current plan to do that is

00:06:58,150 --> 00:07:02,460
to leverage these things in the

00:06:59,770 --> 00:07:05,500
kubernetes community called C RDS or

00:07:02,460 --> 00:07:07,570
custom resource definitions basically

00:07:05,500 --> 00:07:10,340
what that is is you can tell kubernetes

00:07:07,570 --> 00:07:12,650
that this is a resource type that

00:07:10,340 --> 00:07:16,280
my controller should be able to launch

00:07:12,650 --> 00:07:18,830
for it and know how to act on so you can

00:07:16,280 --> 00:07:21,470
make references to hey I knew that

00:07:18,830 --> 00:07:25,240
secret of this type here and it would be

00:07:21,470 --> 00:07:25,240
able to eventually generate that input

00:07:28,780 --> 00:07:35,960
so the next area that we saw was a te

00:07:32,810 --> 00:07:39,380
encryption like we talked about and we

00:07:35,960 --> 00:07:41,150
figured that we could add value by

00:07:39,380 --> 00:07:45,110
providing users the ability to encrypt

00:07:41,150 --> 00:07:47,140
their @cd data at rest this originally

00:07:45,110 --> 00:07:49,370
was incredibly high priority for us

00:07:47,140 --> 00:07:53,920
coming out of the discovery and framing

00:07:49,370 --> 00:07:56,540
but the kubernetes community

00:07:53,920 --> 00:07:59,720
specifically kubernetes itself has come

00:07:56,540 --> 00:08:05,480
up with ways to allow for a generic at

00:07:59,720 --> 00:08:07,580
CD encryption using a kms plugin so now

00:08:05,480 --> 00:08:10,040
that that exists we figured we would

00:08:07,580 --> 00:08:13,610
shift our focus 100% towards secret

00:08:10,040 --> 00:08:17,390
generation and we will pick up this

00:08:13,610 --> 00:08:20,420
tract of work again if we find areas

00:08:17,390 --> 00:08:24,500
that we can improve upon the encryption

00:08:20,420 --> 00:08:28,940
that is offered by kubernetes now or

00:08:24,500 --> 00:08:32,170
improve the way in which users were able

00:08:28,940 --> 00:08:34,340
to deploy plugins or something like that

00:08:32,170 --> 00:08:36,140
ideally we would be providing feature

00:08:34,340 --> 00:08:41,330
parity with cred hub in terms of secure

00:08:36,140 --> 00:08:42,860
storage in the long term brings us to

00:08:41,330 --> 00:08:44,990
the question of what's the future of

00:08:42,860 --> 00:08:46,550
grant have been the case world if you

00:08:44,990 --> 00:08:49,040
notice we haven't been using the word

00:08:46,550 --> 00:08:51,530
cred hub specifically in the CFO gate

00:08:49,040 --> 00:08:55,010
stuff that we're talking about and

00:08:51,530 --> 00:08:57,290
that's because we don't think that cred

00:08:55,010 --> 00:08:59,810
hub as we know it with the name cred hub

00:08:57,290 --> 00:09:03,520
will likely be a component of C for

00:08:59,810 --> 00:09:05,630
cakes instead we'll be delivering a

00:09:03,520 --> 00:09:10,190
delivering pretty much the same outcomes

00:09:05,630 --> 00:09:12,890
as the current CF but we want to credit

00:09:10,190 --> 00:09:15,560
hub for C upside with that but we want

00:09:12,890 --> 00:09:19,940
to use more kate's native tools so that

00:09:15,560 --> 00:09:22,460
customers and developers are able to use

00:09:19,940 --> 00:09:24,460
the same language that they are used to

00:09:22,460 --> 00:09:27,620
talking to kubernetes

00:09:24,460 --> 00:09:31,090
in order to deal with their secrets and

00:09:27,620 --> 00:09:33,980
make it a more case based approach

00:09:31,090 --> 00:09:36,710
however the credit for Cloud Foundry

00:09:33,980 --> 00:09:38,660
itself will continue to be developed and

00:09:36,710 --> 00:09:42,130
maintained as it's not going away at any

00:09:38,660 --> 00:09:44,750
point soon but we want to make sure that

00:09:42,130 --> 00:09:47,990
we support the credential generation

00:09:44,750 --> 00:09:51,950
across whatever CF or whatever platform

00:09:47,990 --> 00:09:55,220
CF supports so we tend to look at

00:09:51,950 --> 00:09:58,340
ourselves more than just the credibly MS

00:09:55,220 --> 00:09:59,930
were named and when stead is a team

00:09:58,340 --> 00:10:02,960
that's in charge of standardizing and

00:09:59,930 --> 00:10:07,610
securing credential generation I cross

00:10:02,960 --> 00:10:09,110
whatever platform CF supports one thing

00:10:07,610 --> 00:10:11,150
the client here is you'll probably

00:10:09,110 --> 00:10:14,770
notice that neither access control nor

00:10:11,150 --> 00:10:17,330
delivery of secrets or credentials to

00:10:14,770 --> 00:10:19,640
components on the platform themselves is

00:10:17,330 --> 00:10:22,340
listed here but they are definitely on

00:10:19,640 --> 00:10:24,560
our radar as they would get us towards

00:10:22,340 --> 00:10:25,330
future parity with credible Cloud

00:10:24,560 --> 00:10:27,950
Foundry

00:10:25,330 --> 00:10:31,670
but we got to start with the secret

00:10:27,950 --> 00:10:33,920
generation as that's most prevalent in

00:10:31,670 --> 00:10:37,420
the first creation of the platform

00:10:33,920 --> 00:10:37,420
itself as I usually poison

00:10:38,430 --> 00:10:45,010
all right so most of these tracks are

00:10:41,579 --> 00:10:47,440
still in the very early stage and we

00:10:45,010 --> 00:10:49,839
would really be open and welcome to any

00:10:47,440 --> 00:10:52,720
feedback that anyone has on how we can

00:10:49,839 --> 00:10:57,610
improve or or you know further refine

00:10:52,720 --> 00:10:59,230
were working on is so some things that

00:10:57,610 --> 00:11:01,180
would be great to hear from the

00:10:59,230 --> 00:11:03,910
community are what would you expect from

00:11:01,180 --> 00:11:07,089
our work with CF or Cates any feature

00:11:03,910 --> 00:11:09,459
requests you may have or any validation

00:11:07,089 --> 00:11:13,690
of ideas or concepts that we've brought

00:11:09,459 --> 00:11:16,779
up so far you can find us in the Cloud

00:11:13,690 --> 00:11:19,899
Foundry slack in the credible or you

00:11:16,779 --> 00:11:24,579
could email Jake or myself if you have

00:11:19,899 --> 00:11:25,690
any questions or feedback thank you so

00:11:24,579 --> 00:11:27,670
much for listening

00:11:25,690 --> 00:11:31,209
yeah thank you very much and we'll be

00:11:27,670 --> 00:11:35,370
available for Q&A and I think using the

00:11:31,209 --> 00:11:35,370

YouTube URL: https://www.youtube.com/watch?v=vLieazDzJIY


