Title: SUSE and Cloud Foundry: Helping Customers Simplify, Modernize, and Accelerate - Troy Topnik, SUSE
Publication date: 2020-06-20
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	SUSE and Cloud Foundry: Helping Customers Simplify, Modernize, and Accelerate - Troy Topnik, SUSE

For more info: https://www.cloudfoundry.org/

SUSE has been at the forefront of adopting Kubernetes as a platform for running Cloud Foundry. As part of our mission to help our customers adopt cloud-native technologies, we've learned that the path to successful utilization of Kubernetes can be difficult - for end user software developers, for platform operators, and even for Cloud Foundry itself. This session will summarize how KubeCF, Quarks, and Stratos are building a bridge for platform operators from current BOSH-based releases to the next generation of Cloud Foundry components currently under development.
Captions: 
	00:00:00,000 --> 00:00:05,279
hi welcome to this Cloud Foundry summit

00:00:02,280 --> 00:00:07,500
session Souza and Cloud Foundry helping

00:00:05,279 --> 00:00:14,670
customers simplify modernize and

00:00:07,500 --> 00:00:16,350
accelerate I'm Troy tot Nick I'm a

00:00:14,670 --> 00:00:18,510
product manager at Sousa and I'm

00:00:16,350 --> 00:00:20,340
responsible for a product called Sousa

00:00:18,510 --> 00:00:22,289
cloud application platform

00:00:20,340 --> 00:00:24,449
it's our distribution of Cloud Foundry

00:00:22,289 --> 00:00:27,330
it's our application platform with

00:00:24,449 --> 00:00:29,369
services and some excellent features

00:00:27,330 --> 00:00:31,920
that I'll talk to you a little bit about

00:00:29,369 --> 00:00:34,500
later I've been working with Cloud

00:00:31,920 --> 00:00:36,840
Foundry since about since it first came

00:00:34,500 --> 00:00:38,790
out in 2011 so I'll talk a little bit

00:00:36,840 --> 00:00:43,469
about where I've seen it come from and

00:00:38,790 --> 00:00:46,020
where I see where I see it going three

00:00:43,469 --> 00:00:48,390
things we talked a lot about at Sousa

00:00:46,020 --> 00:00:53,160
it's become a bit of a mantra is

00:00:48,390 --> 00:00:55,500
simplify modernized accelerate I'm gonna

00:00:53,160 --> 00:00:57,559
divide up this little talk into these

00:00:55,500 --> 00:01:00,500
sections and discuss first of all

00:00:57,559 --> 00:01:04,350
essential complexity versus accidental

00:01:00,500 --> 00:01:09,140
complexity and how we can minimize these

00:01:04,350 --> 00:01:11,790
and how we can simplify both the

00:01:09,140 --> 00:01:13,650
complexity in our processes and in our

00:01:11,790 --> 00:01:16,740
software

00:01:13,650 --> 00:01:19,110
talk about how we exhort our customers

00:01:16,740 --> 00:01:22,800
to modernize and but we ourselves also

00:01:19,110 --> 00:01:24,510
have to modernize moving Cloud Foundry

00:01:22,800 --> 00:01:27,480
on to kubernetes has forced us to

00:01:24,510 --> 00:01:28,560
rethink cloud foundry and customers

00:01:27,480 --> 00:01:30,660
often go through the same

00:01:28,560 --> 00:01:33,510
transformations when they adopt cloud

00:01:30,660 --> 00:01:34,740
native technologies and of course we're

00:01:33,510 --> 00:01:37,980
going to talk about how to accelerate

00:01:34,740 --> 00:01:40,350
how to get software delivery going

00:01:37,980 --> 00:01:43,410
faster cloud foundry itself moves

00:01:40,350 --> 00:01:45,720
extremely fast and we can help take the

00:01:43,410 --> 00:01:47,520
knowledge we've gained in developing

00:01:45,720 --> 00:01:52,050
cloud foundry and allow our customers to

00:01:47,520 --> 00:01:54,180
do the same to also accelerate so let's

00:01:52,050 --> 00:01:57,510
talk a little bit about simplification

00:01:54,180 --> 00:01:59,400
and more importantly about complexity I

00:01:57,510 --> 00:02:01,800
want to talk about three types of

00:01:59,400 --> 00:02:04,280
complexity two are more commonly

00:02:01,800 --> 00:02:07,380
understood essential complexity versus

00:02:04,280 --> 00:02:08,520
accidental complexity and one that I

00:02:07,380 --> 00:02:11,490
would like to try and coin which is

00:02:08,520 --> 00:02:13,980
inherited complexity now software

00:02:11,490 --> 00:02:16,620
engineers can cope with a great deal of

00:02:13,980 --> 00:02:18,450
complexity as it's part of their job you

00:02:16,620 --> 00:02:21,330
need to be able to understand many

00:02:18,450 --> 00:02:23,550
levels of abstraction and sometimes that

00:02:21,330 --> 00:02:27,250
leads you to design software that's

00:02:23,550 --> 00:02:30,800
perhaps more complex than it needs to be

00:02:27,250 --> 00:02:33,020
so I want to give a shout out to dr.

00:02:30,800 --> 00:02:35,420
Jules from IBM he wrote a great article

00:02:33,020 --> 00:02:38,120
so it's a rant really but it's a great

00:02:35,420 --> 00:02:40,820
rant stop spending engineering effort

00:02:38,120 --> 00:02:42,200
solving problems you don't have he wrote

00:02:40,820 --> 00:02:44,840
this for medium he wrote this on medium

00:02:42,200 --> 00:02:47,300
and we tell our customers this all the

00:02:44,840 --> 00:02:49,700
time or we tell cloud foundry users this

00:02:47,300 --> 00:02:52,700
is why you should use Cloud Foundry you

00:02:49,700 --> 00:02:54,770
want to simplify your process you want

00:02:52,700 --> 00:02:58,100
to focus on business problems and

00:02:54,770 --> 00:03:00,890
program logic not on infrastructure this

00:02:58,100 --> 00:03:03,890
is the fundamental benefit that Cloud

00:03:00,890 --> 00:03:05,900
Foundry brings to enterprises developers

00:03:03,890 --> 00:03:07,310
get to focus on the code that they act

00:03:05,900 --> 00:03:08,300
that actually matters to them and not

00:03:07,310 --> 00:03:09,830
worrying about the supporting

00:03:08,300 --> 00:03:14,270
infrastructure so we tell people to do

00:03:09,830 --> 00:03:17,600
this but sometimes we don't always

00:03:14,270 --> 00:03:19,130
follow our own advice or maybe the

00:03:17,600 --> 00:03:22,160
systems that we're designing to solve

00:03:19,130 --> 00:03:23,630
this problem are inherently complex so

00:03:22,160 --> 00:03:26,300
it was actually Jules who introduced me

00:03:23,630 --> 00:03:29,510
to the idea of essential Rison's

00:03:26,300 --> 00:03:32,090
accidental complexity and I've folded it

00:03:29,510 --> 00:03:34,459
up it comes from paper called no silver

00:03:32,090 --> 00:03:37,190
bullet essence and accident and software

00:03:34,459 --> 00:03:39,980
engineering by Frederick Brooks jr. from

00:03:37,190 --> 00:03:41,540
back in 1986 so this is not a new

00:03:39,980 --> 00:03:46,610
problem and it's not a new way of

00:03:41,540 --> 00:03:50,570
looking at at complexity in software so

00:03:46,610 --> 00:03:54,650
let's take an example here this is one

00:03:50,570 --> 00:03:56,420
view a fairly simplified view of cloud

00:03:54,650 --> 00:03:59,840
foundry application run time showing

00:03:56,420 --> 00:04:02,900
Kathy showing the connections of the

00:03:59,840 --> 00:04:05,690
cloud controller to the adjacent parts

00:04:02,900 --> 00:04:08,240
of the system all of these roles are are

00:04:05,690 --> 00:04:09,860
fairly well understood by the developers

00:04:08,240 --> 00:04:12,860
of Cloud Foundry fairly well understood

00:04:09,860 --> 00:04:16,549
actually by most operators of cloud

00:04:12,860 --> 00:04:18,950
foundry platforms and we can describe

00:04:16,549 --> 00:04:21,590
how most of these things work this is a

00:04:18,950 --> 00:04:23,150
manageable level of complexity but it is

00:04:21,590 --> 00:04:25,460
not the whole story because we can go a

00:04:23,150 --> 00:04:29,240
little deeper and when we go a level

00:04:25,460 --> 00:04:31,700
deeper especially with the scheduler

00:04:29,240 --> 00:04:33,140
Diego we see a tremendous amount of

00:04:31,700 --> 00:04:35,330
complexity because it's doing a very

00:04:33,140 --> 00:04:38,810
difficult job it's doing a lot of stuff

00:04:35,330 --> 00:04:40,580
behind the scenes but maybe the

00:04:38,810 --> 00:04:41,180
accidental complexity is starting to

00:04:40,580 --> 00:04:43,759
creep in at the

00:04:41,180 --> 00:04:47,270
level maybe it's doing things more than

00:04:43,759 --> 00:04:51,110
it has to do now I mean the the obvious

00:04:47,270 --> 00:04:53,210
thing to ask at this point is do we have

00:04:51,110 --> 00:04:54,979
to as Cloud Foundry or as Cloud Foundry

00:04:53,210 --> 00:04:57,800
vendors or as Cloud Foundry developers

00:04:54,979 --> 00:05:00,590
have to be responsible for this

00:04:57,800 --> 00:05:03,370
complexity we're going to come back to

00:05:00,590 --> 00:05:03,370
that idea

00:05:03,710 --> 00:05:08,630
here's yet another view this is one we

00:05:06,500 --> 00:05:11,060
did so that we ourselves could better

00:05:08,630 --> 00:05:12,770
understand Cloud Foundry in the context

00:05:11,060 --> 00:05:15,770
of cloud application platform which is

00:05:12,770 --> 00:05:16,520
running on kubernetes and ships with

00:05:15,770 --> 00:05:18,470
Diego

00:05:16,520 --> 00:05:22,100
so it actually packages Diego to run on

00:05:18,470 --> 00:05:23,750
kubernetes and this is a tremendous

00:05:22,100 --> 00:05:26,889
amount of complexity and this is

00:05:23,750 --> 00:05:29,150
complexity that we as a team at Sousa

00:05:26,889 --> 00:05:30,979
inherited from upstream cloud foundry

00:05:29,150 --> 00:05:32,360
the bits were already there

00:05:30,979 --> 00:05:34,580
we knew what the behavior was supposed

00:05:32,360 --> 00:05:36,889
to be trying to do something new with it

00:05:34,580 --> 00:05:41,570
introducing it to kubernetes introduced

00:05:36,889 --> 00:05:43,460
still more complexity so let's not do

00:05:41,570 --> 00:05:47,449
that

00:05:43,460 --> 00:05:49,580
one of the things that we've seen with

00:05:47,449 --> 00:05:52,400
the proliferation of projects within CN

00:05:49,580 --> 00:05:54,770
CF this is the CN CF landscape diagram

00:05:52,400 --> 00:05:55,820
that shows all the projects and products

00:05:54,770 --> 00:05:58,820
and companies that make up that

00:05:55,820 --> 00:06:01,010
ecosystem there is a tremendous amount

00:05:58,820 --> 00:06:04,160
of stuff out there and we don't we

00:06:01,010 --> 00:06:07,940
probably don't want to include this many

00:06:04,160 --> 00:06:10,490
projects or this kind of profusion of

00:06:07,940 --> 00:06:15,229
different competing technologies within

00:06:10,490 --> 00:06:18,410
cloud foundry but we can take from it we

00:06:15,229 --> 00:06:22,190
can actually choose things from this

00:06:18,410 --> 00:06:23,979
ecosystem that are best suited to tasks

00:06:22,190 --> 00:06:27,050
that need to be solved in cloud foundry

00:06:23,979 --> 00:06:28,159
so that we can share the complexity with

00:06:27,050 --> 00:06:30,080
other people we can inherit the

00:06:28,159 --> 00:06:31,849
complexity but the responsibility is

00:06:30,080 --> 00:06:33,740
going to be shared not only with a

00:06:31,849 --> 00:06:36,979
larger community but with sometimes

00:06:33,740 --> 00:06:39,050
specialists in the particular area where

00:06:36,979 --> 00:06:40,460
we're adopting the technology prometheus

00:06:39,050 --> 00:06:42,620
developers would be very good at time

00:06:40,460 --> 00:06:46,659
series databases kubernetes obviously is

00:06:42,620 --> 00:06:49,070
all about scheduling containers etc so

00:06:46,659 --> 00:06:50,330
enterprise customers face the same

00:06:49,070 --> 00:06:52,970
problem when they're confronted with

00:06:50,330 --> 00:06:57,740
this landscape diagram and all of these

00:06:52,970 --> 00:07:00,940
new technologies from CN CF Cloud

00:06:57,740 --> 00:07:04,490
Foundry can be a curated subset of these

00:07:00,940 --> 00:07:06,590
of these services and and features and

00:07:04,490 --> 00:07:09,639
projects so that we can provide a good

00:07:06,590 --> 00:07:09,639
developer experience

00:07:10,170 --> 00:07:17,379
so let's

00:07:12,729 --> 00:07:19,539
monetizing modernizing the enterprises

00:07:17,379 --> 00:07:21,969
that we deal with that we consult with

00:07:19,539 --> 00:07:24,009
that we're making products for but also

00:07:21,969 --> 00:07:28,300
let's talk about the history of

00:07:24,009 --> 00:07:29,919
modernizing Cloud Foundry its what's

00:07:28,300 --> 00:07:32,050
what's happened to it recently to make

00:07:29,919 --> 00:07:39,009
it a more modern a more cloud native

00:07:32,050 --> 00:07:41,889
platform itself so Susan wanted to

00:07:39,009 --> 00:07:43,680
modernize Cloud Foundry Sousa wanted to

00:07:41,889 --> 00:07:46,779
produce a cloud primary distribution

00:07:43,680 --> 00:07:48,969
built on the expertise of a team that I

00:07:46,779 --> 00:07:50,529
was part of that we're really good at

00:07:48,969 --> 00:07:54,089
turning cloud foundry itself into

00:07:50,529 --> 00:07:56,529
containers and we wanted to take

00:07:54,089 --> 00:07:58,689
upstream Cloud Foundry right from CF

00:07:56,529 --> 00:08:02,020
deployment and create Cloud Foundry

00:07:58,689 --> 00:08:04,629
application run time on kubernetes so

00:08:02,020 --> 00:08:06,249
how would we do that well back in

00:08:04,629 --> 00:08:08,559
nineteen twenty seventeen when we first

00:08:06,249 --> 00:08:11,349
set about building a cloud application

00:08:08,559 --> 00:08:14,499
platform we had a pretty good idea of

00:08:11,349 --> 00:08:17,379
how to to get there we had done

00:08:14,499 --> 00:08:19,029
something similar before but this time

00:08:17,379 --> 00:08:20,680
we wanted to bring the rest of the Cloud

00:08:19,029 --> 00:08:23,409
Foundry community with us on this

00:08:20,680 --> 00:08:25,689
journey and remember that in 2017 not

00:08:23,409 --> 00:08:28,749
everyone wanted to go this route it

00:08:25,689 --> 00:08:30,159
wasn't totally clear that kubernetes was

00:08:28,749 --> 00:08:34,870
going to be the way to go for

00:08:30,159 --> 00:08:37,029
platform-as-a-service software so when

00:08:34,870 --> 00:08:43,060
we started we started with some

00:08:37,029 --> 00:08:45,760
constraints that shaped the way we have

00:08:43,060 --> 00:08:48,550
delivered to projects quarks and cube C

00:08:45,760 --> 00:08:51,990
F to bring Cloud Foundry to kubernetes

00:08:48,550 --> 00:08:54,699
so a certified distribution requires

00:08:51,990 --> 00:08:59,319
certain core components so they have to

00:08:54,699 --> 00:09:01,649
be sourced from upstream see if

00:08:59,319 --> 00:09:05,910
deployment and so

00:09:01,649 --> 00:09:07,980
we did that and the official

00:09:05,910 --> 00:09:10,879
distribution of these core components is

00:09:07,980 --> 00:09:14,309
via Bosch releases so see if deployment

00:09:10,879 --> 00:09:17,309
is collection and Bosch releases that go

00:09:14,309 --> 00:09:19,559
together and if are tested together we

00:09:17,309 --> 00:09:22,290
had to consume those now Bosch releases

00:09:19,559 --> 00:09:24,360
require orchestration normally coming

00:09:22,290 --> 00:09:26,759
from Bosch director kubernetes does

00:09:24,360 --> 00:09:28,589
things a lot differently and so the

00:09:26,759 --> 00:09:32,360
orchestration required by the releases

00:09:28,589 --> 00:09:36,379
that we were consuming did not exist

00:09:32,360 --> 00:09:37,610
at the same time we had requirements

00:09:36,379 --> 00:09:40,369
from our customers that they would need

00:09:37,610 --> 00:09:42,379
to be able to upgrade as they go which

00:09:40,369 --> 00:09:44,929
dictated that there was some technology

00:09:42,379 --> 00:09:48,049
choices that we had to adopt on the

00:09:44,929 --> 00:09:52,879
kubernetes side adopting in this case

00:09:48,049 --> 00:09:54,769
helm for us and we adopted him because

00:09:52,879 --> 00:09:57,559
kubernetes administrators like to work

00:09:54,769 --> 00:09:59,989
with tooling that they already know helm

00:09:57,559 --> 00:10:03,079
seem to be coming the who is becoming

00:09:59,989 --> 00:10:05,329
the most popular package manager for

00:10:03,079 --> 00:10:08,629
kubernetes package format for kubernetes

00:10:05,329 --> 00:10:12,069
and so we adopted that as the packaging

00:10:08,629 --> 00:10:14,869
constraint that we had but helm is not

00:10:12,069 --> 00:10:18,139
like Bosch director it doesn't do all

00:10:14,869 --> 00:10:19,809
the things that Bosch does so we had to

00:10:18,139 --> 00:10:23,649
deal with that and we had to deal with

00:10:19,809 --> 00:10:23,649
how do we bridge that cut

00:10:23,970 --> 00:10:31,559
so when we proposed this to the

00:10:28,470 --> 00:10:34,919
community we proposed the idea of an

00:10:31,559 --> 00:10:37,679
operator now it was originally intended

00:10:34,919 --> 00:10:39,739
to be simply a kubernetes operator for

00:10:37,679 --> 00:10:42,119
cloud foundry application run time

00:10:39,739 --> 00:10:45,899
taking care of the lifecycle management

00:10:42,119 --> 00:10:47,519
of that but undergoing this process of

00:10:45,899 --> 00:10:49,699
taking the Boche releases from upstream

00:10:47,519 --> 00:10:52,229
we quickly realized that we had to

00:10:49,699 --> 00:10:54,599
basically solve the problem of how to

00:10:52,229 --> 00:10:58,859
convert Bosch releases into kubernetes

00:10:54,599 --> 00:11:00,869
artifacts at runtime and so we did we

00:10:58,859 --> 00:11:04,319
turned it into an operator for any and

00:11:00,869 --> 00:11:05,999
every Bosch release and to do that that

00:11:04,319 --> 00:11:07,829
was implementing Bosch director

00:11:05,999 --> 00:11:09,629
functionality within kubernetes which is

00:11:07,829 --> 00:11:14,009
awesome because then we have these

00:11:09,629 --> 00:11:16,259
useful CR DS customer resource

00:11:14,009 --> 00:11:19,739
definitions in kubernetes that can do

00:11:16,259 --> 00:11:22,109
Bosch like things quark secret parts job

00:11:19,739 --> 00:11:23,999
quark stateful set marks restart that

00:11:22,109 --> 00:11:28,139
emulates behavior that you can get from

00:11:23,999 --> 00:11:29,909
Bosch director now because we are

00:11:28,139 --> 00:11:31,979
essentially porting Bosch functionality

00:11:29,909 --> 00:11:34,619
to kubernetes we end up with a lot of

00:11:31,979 --> 00:11:37,679
complexity and that's necessary but it's

00:11:34,619 --> 00:11:40,109
also not something that we built it was

00:11:37,679 --> 00:11:42,439
something that we inherited that added

00:11:40,109 --> 00:11:46,579
to the the complexity of our platform

00:11:42,439 --> 00:11:50,970
cube CF is cf deployment for kubernetes

00:11:46,579 --> 00:11:52,970
it uses the CF deployment sources all of

00:11:50,970 --> 00:11:56,699
the code from CF deployment releases and

00:11:52,970 --> 00:11:59,249
you can it actually uses all the

00:11:56,699 --> 00:12:03,640
manifests and ops files to make Cloud

00:11:59,249 --> 00:12:06,100
Foundry work on kubernetes now this

00:12:03,640 --> 00:12:07,779
this release is a lighter-weight release

00:12:06,100 --> 00:12:11,050
than we had done before because we had

00:12:07,779 --> 00:12:13,720
the operator on hand to handle some of

00:12:11,050 --> 00:12:16,570
the the management of deployment and and

00:12:13,720 --> 00:12:19,630
and so forth and managing these these

00:12:16,570 --> 00:12:21,550
templates and we were able to reach a

00:12:19,630 --> 00:12:23,769
little deeper into the configuration and

00:12:21,550 --> 00:12:29,320
make arbitrary changes that you would in

00:12:23,769 --> 00:12:30,670
a Bosch like release in via helm but in

00:12:29,320 --> 00:12:34,720
the process of doing this we were able

00:12:30,670 --> 00:12:36,610
to change Sousa Cloud Foundry SCF into

00:12:34,720 --> 00:12:40,930
something that was a lot closer to the

00:12:36,610 --> 00:12:44,320
upstream CF deployment now one of the

00:12:40,930 --> 00:12:46,029
big pieces of reducing complexity and

00:12:44,320 --> 00:12:47,890
something that we've been waiting to do

00:12:46,029 --> 00:12:52,480
for a long time was to replace Diego

00:12:47,890 --> 00:12:56,740
with the kubernetes scheduler itself so

00:12:52,480 --> 00:12:58,899
ireenie is a plugin for the cloud

00:12:56,740 --> 00:13:02,980
controller or it's a it's a mechanism by

00:12:58,899 --> 00:13:04,839
which Cloud Foundry can delegate the

00:13:02,980 --> 00:13:06,399
scheduling of applications user

00:13:04,839 --> 00:13:09,579
applications in Cloud Foundry to

00:13:06,399 --> 00:13:11,800
kubernetes this shifts a lot of the

00:13:09,579 --> 00:13:15,520
complexity of scheduling is that those

00:13:11,800 --> 00:13:17,290
applications to kubernetes and though

00:13:15,520 --> 00:13:19,420
kubernetes has to solve that problem as

00:13:17,290 --> 00:13:21,310
well at least that's being solved by

00:13:19,420 --> 00:13:23,380
someone else kubernetes is there already

00:13:21,310 --> 00:13:25,060
it's actually running our platform now

00:13:23,380 --> 00:13:28,300
it can run the applications that are

00:13:25,060 --> 00:13:31,510
running on platform as well it also

00:13:28,300 --> 00:13:34,149
opens the door for us to use a lot of

00:13:31,510 --> 00:13:36,579
features in kubernetes or tools in the

00:13:34,149 --> 00:13:38,589
kubernetes community that are really

00:13:36,579 --> 00:13:40,600
really useful that may allow us to do

00:13:38,589 --> 00:13:43,240
new things and add new functionality to

00:13:40,600 --> 00:13:45,300
Cloud Foundry easily because the the

00:13:43,240 --> 00:13:49,060
base functionality is there in the

00:13:45,300 --> 00:13:51,370
platform one thing it does need to do

00:13:49,060 --> 00:13:53,140
yet though is I'm saying run the

00:13:51,370 --> 00:13:58,120
production gauntlet it needs to be used

00:13:53,140 --> 00:14:00,100
in anger so PA go has had some time

00:13:58,120 --> 00:14:02,769
under its belt and it's had a lot of

00:14:00,100 --> 00:14:05,620
production uses it's been it's been used

00:14:02,769 --> 00:14:06,820
at very very large scale we need to do

00:14:05,620 --> 00:14:09,490
the same thing with ireenie

00:14:06,820 --> 00:14:11,620
to get it to a place where we can deploy

00:14:09,490 --> 00:14:14,190
at scale with the same level of

00:14:11,620 --> 00:14:14,190
confidence

00:14:14,420 --> 00:14:22,470
another project that Sousa has led is

00:14:19,430 --> 00:14:23,300
Stratos Stratos is the web UI for cloud

00:14:22,470 --> 00:14:27,120
foundry

00:14:23,300 --> 00:14:28,590
it has a back-end proxy that allows you

00:14:27,120 --> 00:14:31,410
to connect multiple endpoints and

00:14:28,590 --> 00:14:33,770
multiple different kinds of api's to

00:14:31,410 --> 00:14:36,300
this proxy and expose them in

00:14:33,770 --> 00:14:38,130
easy-to-understand web interface now

00:14:36,300 --> 00:14:38,880
this is solving complexity in a

00:14:38,130 --> 00:14:42,300
different way

00:14:38,880 --> 00:14:47,150
this is using good UI design principles

00:14:42,300 --> 00:14:50,490
in order to expose Cloud Foundry

00:14:47,150 --> 00:14:51,930
features in a logical way so that

00:14:50,490 --> 00:14:54,030
someone can just look at the interface

00:14:51,930 --> 00:14:57,030
and understand how to use Cloud Foundry

00:14:54,030 --> 00:14:58,920
and understand the benefit of deploying

00:14:57,030 --> 00:15:01,950
applications to a platform as a service

00:14:58,920 --> 00:15:06,690
we've made it extensible so the app

00:15:01,950 --> 00:15:09,750
autoscaler team has added UI to Stratos

00:15:06,690 --> 00:15:12,570
for autoscaler that came from a team

00:15:09,750 --> 00:15:13,740
outside of the Stratos team and of

00:15:12,570 --> 00:15:15,930
course the souza team has been working

00:15:13,740 --> 00:15:18,660
on additional functionality and features

00:15:15,930 --> 00:15:21,480
like kubernetes and helm endpoints that

00:15:18,660 --> 00:15:23,450
you can use those bringing them all

00:15:21,480 --> 00:15:27,589
together all of these things together

00:15:23,450 --> 00:15:31,710
allows us to harness the complexity and

00:15:27,589 --> 00:15:34,230
actually make it make sense in a way

00:15:31,710 --> 00:15:36,150
that adds simplicity or that removes

00:15:34,230 --> 00:15:38,990
some of that complexity to at least to

00:15:36,150 --> 00:15:38,990
the users point of view

00:15:40,220 --> 00:15:51,120
so how are we going to simplify in order

00:15:48,329 --> 00:15:56,250
to accelerate now that we've worked so

00:15:51,120 --> 00:16:00,899
very hard to get Cloud Foundry where it

00:15:56,250 --> 00:16:02,790
is get it working on kubernetes get the

00:16:00,899 --> 00:16:04,980
integration of new next-generation

00:16:02,790 --> 00:16:07,800
components it'd be really great if we

00:16:04,980 --> 00:16:11,180
could catch that wave and use our

00:16:07,800 --> 00:16:13,399
momentum to gain even more speed so

00:16:11,180 --> 00:16:16,410
we've demonstrated that we can do this

00:16:13,399 --> 00:16:19,019
cube CF together with the quarks

00:16:16,410 --> 00:16:22,860
operator can turn the CF deployment

00:16:19,019 --> 00:16:26,069
releases into L charts and manage them

00:16:22,860 --> 00:16:30,240
on kubernetes that's that's been

00:16:26,069 --> 00:16:32,279
demonstrated Kuban Eddie's admins can

00:16:30,240 --> 00:16:34,500
understand this quite easily they can

00:16:32,279 --> 00:16:36,509
deploy it quite easy easily to

00:16:34,500 --> 00:16:40,379
kubernetes but we do have something else

00:16:36,509 --> 00:16:44,250
we need to do we have to do this next we

00:16:40,379 --> 00:16:45,990
have to take different types of

00:16:44,250 --> 00:16:49,439
deployment artifacts and combine them

00:16:45,990 --> 00:16:52,050
into a release for kubernetes whether

00:16:49,439 --> 00:16:55,559
they come from a Bosch release helm

00:16:52,050 --> 00:16:58,170
chart rock urban Eddie's llamo with

00:16:55,559 --> 00:16:59,699
container images or some other package

00:16:58,170 --> 00:17:02,610
format that we we don't even know about

00:16:59,699 --> 00:17:05,760
yet we need to take this next generation

00:17:02,610 --> 00:17:07,919
of kubernetes native or kubernetes

00:17:05,760 --> 00:17:11,130
idiomatic components and combine them

00:17:07,919 --> 00:17:12,659
and we have a plan to do this let's talk

00:17:11,130 --> 00:17:17,159
about these next-generation components

00:17:12,659 --> 00:17:18,809
more recently than 2017 it's become

00:17:17,159 --> 00:17:21,209
clear to everyone in the Cloud Foundry

00:17:18,809 --> 00:17:22,919
community that kubernetes is the next

00:17:21,209 --> 00:17:25,890
platform for cloud foundry it is a

00:17:22,919 --> 00:17:28,880
natural fit and so all of the upstream

00:17:25,890 --> 00:17:30,929
teams now are on board with creating

00:17:28,880 --> 00:17:32,870
kubernetes native cloud foundry

00:17:30,929 --> 00:17:37,770
components right from the get-go and

00:17:32,870 --> 00:17:39,919
you'll find this this repository on in

00:17:37,770 --> 00:17:42,809
the cloud foundry org called CF for k-8

00:17:39,919 --> 00:17:45,240
now this is the place where all of the

00:17:42,809 --> 00:17:47,460
next-generation cloud foundry components

00:17:45,240 --> 00:17:49,649
come together for integration testing

00:17:47,460 --> 00:17:52,830
and it is in itself a release as well

00:17:49,649 --> 00:17:54,179
you'll see it's using only the next-gen

00:17:52,830 --> 00:17:57,000
it's like ireenie what if I mentioned

00:17:54,179 --> 00:17:58,799
earlier kpac for staging Paquette Oh

00:17:57,000 --> 00:18:01,950
build packs which are cloud native build

00:17:58,799 --> 00:18:05,970
packs that are maintained by the Cloud

00:18:01,950 --> 00:18:08,220
Foundry team and sto and many other

00:18:05,970 --> 00:18:11,700
things as well using the latest

00:18:08,220 --> 00:18:13,710
technologies in to preserve the Cloud

00:18:11,700 --> 00:18:15,659
Foundry experience but leveraging all

00:18:13,710 --> 00:18:18,779
these great things from CN CF and

00:18:15,659 --> 00:18:22,200
elsewhere it does not use Bosch releases

00:18:18,779 --> 00:18:23,970
so the the things that come together in

00:18:22,200 --> 00:18:26,639
CF for K eights

00:18:23,970 --> 00:18:29,399
do not come from Bosch releases which

00:18:26,639 --> 00:18:33,090
means there are far fewer constraints

00:18:29,399 --> 00:18:35,580
and far less inherited complexity so

00:18:33,090 --> 00:18:38,549
using these kubernetes native components

00:18:35,580 --> 00:18:40,889
means you don't have to emulate the

00:18:38,549 --> 00:18:44,340
Bosch director you don't have to to do

00:18:40,889 --> 00:18:46,380
all this work to run Bosch releases on

00:18:44,340 --> 00:18:49,320
kubernetes you can just design it from

00:18:46,380 --> 00:18:51,000
the start to to run on communities and

00:18:49,320 --> 00:18:53,370
that was the forcing function that CF

00:18:51,000 --> 00:18:55,559
for K eights brought to Cloud Foundry it

00:18:53,370 --> 00:18:58,559
made all of the developers of the

00:18:55,559 --> 00:19:02,940
maintainer zuv Cloud Foundry think about

00:18:58,559 --> 00:19:05,370
how they could use kubernetes which

00:19:02,940 --> 00:19:08,610
brings us to the question if we've got

00:19:05,370 --> 00:19:10,950
cube CF which is a way to bring Bosch

00:19:08,610 --> 00:19:13,159
releases to kubernetes and we've got CF

00:19:10,950 --> 00:19:15,510
for K eights that's that's integrating

00:19:13,159 --> 00:19:17,639
next-generation components directly from

00:19:15,510 --> 00:19:20,519
the upstream teams to make a new

00:19:17,639 --> 00:19:22,529
kubernetes release what are we going to

00:19:20,519 --> 00:19:24,139
do these are two separate projects well

00:19:22,529 --> 00:19:26,279
let's start out that way

00:19:24,139 --> 00:19:28,500
but there's a level of communication

00:19:26,279 --> 00:19:29,610
that I think you would only ever find in

00:19:28,500 --> 00:19:31,380
the Cloud Foundry community these

00:19:29,610 --> 00:19:32,850
projects are converging and there's a

00:19:31,380 --> 00:19:35,549
great deal of interaction between the

00:19:32,850 --> 00:19:37,289
teams so just to explain the difference

00:19:35,549 --> 00:19:40,919
in case anyone gets confused with this

00:19:37,289 --> 00:19:42,899
cube CF provides everything now so it

00:19:40,919 --> 00:19:44,909
passes the acceptance tests there

00:19:42,899 --> 00:19:49,710
commercial releases that are based on it

00:19:44,909 --> 00:19:52,289
and you can use it right now - it draws

00:19:49,710 --> 00:19:55,139
from CF deployment releases that that

00:19:52,289 --> 00:19:57,240
you're familiar with CF for K 8 is the

00:19:55,139 --> 00:20:00,960
proving ground for the next generation

00:19:57,240 --> 00:20:03,210
components now over time we hope that

00:20:00,960 --> 00:20:05,870
these projects will converge we're going

00:20:03,210 --> 00:20:05,870
to make them converge

00:20:06,389 --> 00:20:12,769
in qcf we have ways to bring in

00:20:08,749 --> 00:20:16,440
kubernetes native components directly so

00:20:12,769 --> 00:20:19,590
one by one as these upstream components

00:20:16,440 --> 00:20:22,469
become ready we can replace the Bosch

00:20:19,590 --> 00:20:26,149
releases within Cube CF with kubernetes

00:20:22,469 --> 00:20:28,739
native or kubernetes idiomatic releases

00:20:26,149 --> 00:20:30,929
so it may be that they never converge

00:20:28,739 --> 00:20:33,239
completely we will likely have different

00:20:30,929 --> 00:20:35,219
packaging but within that packaging we

00:20:33,239 --> 00:20:37,440
will have the same Cloud Foundry in the

00:20:35,219 --> 00:20:40,009
same Cloud Foundry experience for the

00:20:37,440 --> 00:20:40,009
end users

00:20:40,130 --> 00:20:44,330
so I've put together some

00:20:41,990 --> 00:20:49,130
resources and links here you can get the

00:20:44,330 --> 00:20:51,830
slides later the repositories for all of

00:20:49,130 --> 00:20:54,110
the projects that I mentioned or a few

00:20:51,830 --> 00:20:56,480
of the projects I mentioned and of

00:20:54,110 --> 00:20:59,390
course we welcome conversations with

00:20:56,480 --> 00:21:05,020
people who are interested on the Cloud

00:20:59,390 --> 00:21:09,230
Foundry slack and this is all by way of

00:21:05,020 --> 00:21:10,910
introducing the next generation of Sousa

00:21:09,230 --> 00:21:14,390
cloud application platform which is

00:21:10,910 --> 00:21:16,429
being launched at CF summit again we're

00:21:14,390 --> 00:21:19,190
designing this in order to simplify

00:21:16,429 --> 00:21:22,130
modernize and accelerate Cloud Foundry

00:21:19,190 --> 00:21:24,610
but also to do the same for our

00:21:22,130 --> 00:21:24,610
customers

00:21:25,560 --> 00:21:28,040

YouTube URL: https://www.youtube.com/watch?v=UxBkoZ_fz8I


