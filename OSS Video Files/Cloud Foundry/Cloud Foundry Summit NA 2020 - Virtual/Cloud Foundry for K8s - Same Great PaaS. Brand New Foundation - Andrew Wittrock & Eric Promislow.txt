Title: Cloud Foundry for K8s - Same Great PaaS. Brand New Foundation - Andrew Wittrock & Eric Promislow
Publication date: 2020-06-14
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	Cloud Foundry for K8s - Same Great PaaS. Brand New Foundation - Andrew Wittrock, VMWare & Eric Promislow, SUSE 

For more info: https://www.cloudfoundry.org/ 

Come check out this talk on Cloud Foundry for Kubernetes (cf-for-k8s), a fully native Kubernetes foundation. We will walk through the project, give a glimpse of the community involvement, and explore how you can contribute to cf-for-k8s projects.
Captions: 
	00:00:00,030 --> 00:00:07,919
hi Ron and welcome to cloud foundry

00:00:02,010 --> 00:00:11,370
summit 2020 and more importantly welcome

00:00:07,919 --> 00:00:13,889
to cloud foundry for kate's it's the

00:00:11,370 --> 00:00:16,320
same great platform is service on a

00:00:13,889 --> 00:00:18,630
brand new foundation I'm Andrew White

00:00:16,320 --> 00:00:21,390
Rock member of technical staff at VMware

00:00:18,630 --> 00:00:24,930
and joining me is Erik promised our

00:00:21,390 --> 00:00:26,699
senior developer at Sousa we are both

00:00:24,930 --> 00:00:29,279
members of the release integration team

00:00:26,699 --> 00:00:31,830
responsible for integrating the open

00:00:29,279 --> 00:00:35,550
source cloud foundry releases into both

00:00:31,830 --> 00:00:42,260
the flash based CF deployment as well as

00:00:35,550 --> 00:00:47,489
the communities based CF for Kate's so

00:00:42,260 --> 00:00:50,760
what is CF for Kate's CF for gates is

00:00:47,489 --> 00:00:52,739
cloud foundry on Kate's cloud foundry is

00:00:50,760 --> 00:00:54,960
an open source multi cloud application

00:00:52,739 --> 00:00:57,780
platform this is service governed by the

00:00:54,960 --> 00:00:59,460
cloud foundry foundation so CF for

00:00:57,780 --> 00:01:02,280
Kate's is putting cloud foundry on

00:00:59,460 --> 00:01:04,379
kubernetes it reinvents the platform as

00:01:02,280 --> 00:01:06,720
a native kubernetes application platform

00:01:04,379 --> 00:01:09,390
for deploying running and managing other

00:01:06,720 --> 00:01:10,979
applications we're using the best parts

00:01:09,390 --> 00:01:14,760
of cloud foundry and integrating them

00:01:10,979 --> 00:01:17,250
into kubernetes we run CF components as

00:01:14,760 --> 00:01:19,560
OCI compliant image containers in

00:01:17,250 --> 00:01:23,040
kubernetes instead of separate VMs as

00:01:19,560 --> 00:01:25,369
you would see and Bausch we package and

00:01:23,040 --> 00:01:28,470
deploy these developer applications and

00:01:25,369 --> 00:01:31,170
the CF haiku still definitely applies

00:01:28,470 --> 00:01:34,049
you can deploy your applications without

00:01:31,170 --> 00:01:36,960
the how you don't have to care about

00:01:34,049 --> 00:01:42,360
that it should be very familiar to our

00:01:36,960 --> 00:01:46,439
current cloud foundry users why CF for

00:01:42,360 --> 00:01:50,460
kids so CF for gates is a brand new

00:01:46,439 --> 00:01:54,360
reinventing on the current platforms of

00:01:50,460 --> 00:01:57,030
the web it deploys much faster less than

00:01:54,360 --> 00:01:59,490
one-fifth of the boy deploy time of a

00:01:57,030 --> 00:02:01,560
similar Bosch deployment you can bring

00:01:59,490 --> 00:02:04,170
your own is so whatever cluster you want

00:02:01,560 --> 00:02:06,810
to use you can drop see if it gets on as

00:02:04,170 --> 00:02:09,569
a platform that works on any of the

00:02:06,810 --> 00:02:11,730
kubernetes is provisioning tools like

00:02:09,569 --> 00:02:13,360
terraform have more libraries and tools

00:02:11,730 --> 00:02:14,890
for targeting kubernetes

00:02:13,360 --> 00:02:19,000
so there's less need for a specialized

00:02:14,890 --> 00:02:20,680
tool say like bubble as the industry is

00:02:19,000 --> 00:02:22,390
advanced that comes a time when there

00:02:20,680 --> 00:02:25,480
are advantages moving to the dominant

00:02:22,390 --> 00:02:27,070
paradigm and moving to communities

00:02:25,480 --> 00:02:31,450
allows us to leverage community produce

00:02:27,070 --> 00:02:34,540
components so at this point I'm going to

00:02:31,450 --> 00:02:38,560
turn over to Eric so he can provide a

00:02:34,540 --> 00:02:40,600
short demo thanks I drew whoops we

00:02:38,560 --> 00:02:44,380
initially wanted to give a demo to show

00:02:40,600 --> 00:02:47,580
how you can go from like zero to 60 from

00:02:44,380 --> 00:02:50,680
just a bare-bones kubernetes cluster to

00:02:47,580 --> 00:02:52,900
ready to run cloud foundry but it takes

00:02:50,680 --> 00:02:56,680
about 10 minutes that's a lot faster

00:02:52,900 --> 00:02:57,430
than the 50 minutes or hour it would in

00:02:56,680 --> 00:02:59,920
they Bosch

00:02:57,430 --> 00:03:01,870
see if deployment world but it's still

00:02:59,920 --> 00:03:03,310
more than we wanted at a talk today but

00:03:01,870 --> 00:03:05,650
what we're gonna show is when you're at

00:03:03,310 --> 00:03:08,010
60 what's life like in the passing lane

00:03:05,650 --> 00:03:11,890
and we're gonna just make a modification

00:03:08,010 --> 00:03:14,430
so it's just go to this screen and I'll

00:03:11,890 --> 00:03:17,920
show you our components what you need is

00:03:14,430 --> 00:03:20,950
obviously a cluster on some is or you

00:03:17,920 --> 00:03:24,880
can possibly even try mini cube if your

00:03:20,950 --> 00:03:26,739
machine has enough juice on this

00:03:24,880 --> 00:03:30,070
particular cluster we're running five

00:03:26,739 --> 00:03:34,090
nodes the nodes are in the Google world

00:03:30,070 --> 00:03:36,790
in one standard for it's possible to use

00:03:34,090 --> 00:03:39,370
on one standard to up to you depending

00:03:36,790 --> 00:03:42,549
what you want to do and we have Network

00:03:39,370 --> 00:03:44,380
possible policy enabled so if you're

00:03:42,549 --> 00:03:47,230
going in that world you know what I mean

00:03:44,380 --> 00:03:51,220
there we also need a service account

00:03:47,230 --> 00:03:53,709
we're using this one here and we save a

00:03:51,220 --> 00:03:57,310
key under here you could create a key I

00:03:53,709 --> 00:03:59,290
already have a key on my machine it's

00:03:57,310 --> 00:04:01,510
got that ID one five eight one and I'll

00:03:59,290 --> 00:04:04,810
be using that I need that to get

00:04:01,510 --> 00:04:08,049
permission to access the container

00:04:04,810 --> 00:04:10,030
registry if you need to modify it as

00:04:08,049 --> 00:04:11,410
well you'll need the IM tab so these are

00:04:10,030 --> 00:04:13,870
the three tabs in the google world

00:04:11,410 --> 00:04:16,840
you'll need you'll also need to know

00:04:13,870 --> 00:04:20,590
what your dns names are as well and i'll

00:04:16,840 --> 00:04:25,660
show that later as well so what it looks

00:04:20,590 --> 00:04:26,980
like over here so i am running an

00:04:25,660 --> 00:04:29,140
existing

00:04:26,980 --> 00:04:32,440
Cloud Foundry system right here I'm just

00:04:29,140 --> 00:04:34,300
asking what are all the pods in my that

00:04:32,440 --> 00:04:37,210
are in the CF system namespace in

00:04:34,300 --> 00:04:40,870
particularly in particular we're running

00:04:37,210 --> 00:04:43,960
to API servers what I'd like to show you

00:04:40,870 --> 00:04:51,550
is what it takes to move to three API

00:04:43,960 --> 00:04:56,950
servers in this world so there are there

00:04:51,550 --> 00:04:58,210
is a file let me just work here I'll be

00:04:56,950 --> 00:05:00,220
talking more about what's going on

00:04:58,210 --> 00:05:05,710
there's some terminology and technology

00:05:00,220 --> 00:05:07,930
here this is the cloud foundry cloud

00:05:05,710 --> 00:05:12,210
controller deployment file so it is a

00:05:07,930 --> 00:05:14,170
standard communities deployment object

00:05:12,210 --> 00:05:15,880
which means it can do Bluegreen

00:05:14,170 --> 00:05:18,610
deployment and currently it comes with

00:05:15,880 --> 00:05:21,220
two replicas we'd like to change it to

00:05:18,610 --> 00:05:24,430
three you might be tempted to change

00:05:21,220 --> 00:05:27,700
this to two three and go with that and

00:05:24,430 --> 00:05:31,680
you would be correct but if a new

00:05:27,700 --> 00:05:34,510
version of capi ships and you pull it in

00:05:31,680 --> 00:05:37,090
you will lose your setting of replicas

00:05:34,510 --> 00:05:39,720
from switching to two two three

00:05:37,090 --> 00:05:42,010
so instead we're going to be using ytt

00:05:39,720 --> 00:05:43,390
which is this variant of the amal you

00:05:42,010 --> 00:05:44,980
might as already you might already have

00:05:43,390 --> 00:05:48,670
noticed that there's some things that

00:05:44,980 --> 00:05:54,280
look very on yeah maleic whoops here for

00:05:48,670 --> 00:05:55,180
example this hash at load ytt data data

00:05:54,280 --> 00:05:58,120
at line one

00:05:55,180 --> 00:06:01,150
that's a ytt director ytt is the animal

00:05:58,120 --> 00:06:04,690
template toolkit like it sounds it's a

00:06:01,150 --> 00:06:08,200
templating tool we're going to use and

00:06:04,690 --> 00:06:10,750
it's used to help us manage a huge

00:06:08,200 --> 00:06:13,930
amount of kubernetes that is otherwise

00:06:10,750 --> 00:06:15,160
required to deploy on to deploy cloud

00:06:13,930 --> 00:06:19,780
foundry onto kubernetes

00:06:15,160 --> 00:06:21,490
we're gonna use this config file it's

00:06:19,780 --> 00:06:25,600
kind of like an ops file in the CF

00:06:21,490 --> 00:06:27,970
deployment world and the key is here we

00:06:25,600 --> 00:06:31,300
want to change replicas to three we're

00:06:27,970 --> 00:06:33,850
now saying find an existing object that

00:06:31,300 --> 00:06:38,560
is a deployment object and its name is

00:06:33,850 --> 00:06:40,950
CF API server and find the spec field in

00:06:38,560 --> 00:06:43,710
there and look for this line that

00:06:40,950 --> 00:06:46,290
and changed the setting from four

00:06:43,710 --> 00:06:48,120
replicas from whatever it is to three

00:06:46,290 --> 00:06:50,010
and if it's the match missing okay

00:06:48,120 --> 00:06:53,220
equals true means if it's not they're

00:06:50,010 --> 00:06:57,150
less at it meet guys by default replicas

00:06:53,220 --> 00:07:00,870
count is one that's all we need to do

00:06:57,150 --> 00:07:03,330
the change there's a little bit of setup

00:07:00,870 --> 00:07:04,620
as well and I'm it's not too different

00:07:03,330 --> 00:07:07,020
from actually doing an initial

00:07:04,620 --> 00:07:08,670
deployment so we need to define some

00:07:07,020 --> 00:07:12,120
variables first and I'm going to use

00:07:08,670 --> 00:07:14,520
them to work with the cluster also I

00:07:12,120 --> 00:07:17,640
like using shell variables so I can

00:07:14,520 --> 00:07:19,380
refer to them just like I don't like

00:07:17,640 --> 00:07:22,380
repeating myself in code I don't like

00:07:19,380 --> 00:07:25,230
repeating myself on command lines too

00:07:22,380 --> 00:07:27,770
much either and ytt is a very much part

00:07:25,230 --> 00:07:30,830
of that dry do not repeat yourself

00:07:27,770 --> 00:07:35,580
philosophy of working with software so

00:07:30,830 --> 00:07:38,760
like our full domain CF summit 2020

00:07:35,580 --> 00:07:42,750
kate's Deverell and Rox will be doing

00:07:38,760 --> 00:07:46,140
the API to connect to that now what we

00:07:42,750 --> 00:07:49,980
have in the config directory is just a

00:07:46,140 --> 00:07:52,350
big generic Cloud Foundry deployment but

00:07:49,980 --> 00:07:54,780
we need to add some specifications to it

00:07:52,350 --> 00:07:56,880
to make it our own and we're going to

00:07:54,780 --> 00:07:59,520
put those specifications in a values

00:07:56,880 --> 00:08:02,250
file and that will be the name of it and

00:07:59,520 --> 00:08:05,760
we'll just put it over in temp and then

00:08:02,250 --> 00:08:09,840
remember I talked about the service keys

00:08:05,760 --> 00:08:13,080
well when you create a key in Google

00:08:09,840 --> 00:08:15,810
Cloud and save it it just saves it to

00:08:13,080 --> 00:08:19,170
your JSON file so there's the one with

00:08:15,810 --> 00:08:24,810
that ID one five eight one eight etc

00:08:19,170 --> 00:08:26,370
okay now it's time to make a populate

00:08:24,810 --> 00:08:29,610
the values file we have this hack

00:08:26,370 --> 00:08:33,360
directory with some helper scripts they

00:08:29,610 --> 00:08:35,610
are all intended to be temporary until

00:08:33,360 --> 00:08:38,490
we figure out a better way to do this

00:08:35,610 --> 00:08:41,330
and there is a sample values file in the

00:08:38,490 --> 00:08:44,099
repository as well that you can use to

00:08:41,330 --> 00:08:46,050
customize yourself if you prefer but I'm

00:08:44,099 --> 00:08:48,690
going to use this tool I just need to

00:08:46,050 --> 00:08:51,390
give it two parameters I need to give it

00:08:48,690 --> 00:08:54,779
the full domain that's the dash D flag

00:08:51,390 --> 00:08:58,800
and I need to give it the service key

00:08:54,779 --> 00:09:01,379
and I'm gonna write it up to the values

00:08:58,800 --> 00:09:04,920
file the greater-than bar is there

00:09:01,379 --> 00:09:06,060
because I have no clobber set so what's

00:09:04,920 --> 00:09:12,420
in the values file

00:09:06,060 --> 00:09:15,660
I have tool to display it and you can

00:09:12,420 --> 00:09:18,629
see some familiar things like system

00:09:15,660 --> 00:09:22,290
domain is see if summit 2020 Kate's dev

00:09:18,629 --> 00:09:25,589
like I said we also are using the Bosh

00:09:22,290 --> 00:09:27,930
CLI or Bosh CLI technology to generate a

00:09:25,589 --> 00:09:29,459
lot of asserts and passwords we don't

00:09:27,930 --> 00:09:31,709
care about we just want them to be long

00:09:29,459 --> 00:09:36,899
enough that they're secure and that the

00:09:31,709 --> 00:09:39,209
certs and keys conform to SSL so you can

00:09:36,899 --> 00:09:42,529
see yes we have passwords we have certs

00:09:39,209 --> 00:09:47,399
we have specs down at the bottom we have

00:09:42,529 --> 00:09:49,079
basically this is an encoded form of our

00:09:47,399 --> 00:09:51,749
service key that we got from Google

00:09:49,079 --> 00:09:55,139
cloud so we'll be able to use this to

00:09:51,749 --> 00:09:59,339
access the container registry so that's

00:09:55,139 --> 00:10:02,009
there the next step is how do we deploy

00:09:59,339 --> 00:10:08,240
it because we're not using cube control

00:10:02,009 --> 00:10:08,240
well we're using ytt to wrap all of the

00:10:09,050 --> 00:10:13,740
configurations so our so we're telling

00:10:12,269 --> 00:10:16,259
it reading everything from the config

00:10:13,740 --> 00:10:18,720
directory that's stock deployment

00:10:16,259 --> 00:10:21,600
reading the values file and then we have

00:10:18,720 --> 00:10:24,689
our config optional file that we want to

00:10:21,600 --> 00:10:26,910
read in as well use three copies and we

00:10:24,689 --> 00:10:33,839
could save this to a file like a temp

00:10:26,910 --> 00:10:38,309
bolduc ya mole how big is it it's that

00:10:33,839 --> 00:10:44,029
big fourteen thousand lines and then we

00:10:38,309 --> 00:10:47,250
can deploy it this way like so so

00:10:44,029 --> 00:10:51,300
captain that's not there's also a

00:10:47,250 --> 00:10:53,550
directory called deploy so the dash a is

00:10:51,300 --> 00:10:56,209
the name we're calling it CF and it will

00:10:53,550 --> 00:10:59,490
read everything from full dot yeah mol

00:10:56,209 --> 00:11:01,620
its first creating diffs and it's

00:10:59,490 --> 00:11:04,949
determining what does it need to deploy

00:11:01,620 --> 00:11:08,730
compared to what is on disk and what it

00:11:04,949 --> 00:11:11,010
wants to do is update the CF api server

00:11:08,730 --> 00:11:13,290
because we made a change to it and we

00:11:11,010 --> 00:11:15,990
always get this little KPAC registry

00:11:13,290 --> 00:11:18,060
service account kpac is the technology

00:11:15,990 --> 00:11:21,180
we use to build bridges to build

00:11:18,060 --> 00:11:22,470
commands on the fly that works I'm not

00:11:21,180 --> 00:11:24,930
going to accept it because it's not the

00:11:22,470 --> 00:11:27,570
most idiomatic way of doing this for one

00:11:24,930 --> 00:11:32,389
thing I have to remember to delete that

00:11:27,570 --> 00:11:36,930
temporary file the more idiomatic way is

00:11:32,389 --> 00:11:38,459
to put the we have our command I'm

00:11:36,930 --> 00:11:40,410
putting time on it so we can see how

00:11:38,459 --> 00:11:43,170
long it takes the more you do Matic way

00:11:40,410 --> 00:11:44,149
is to use a bash temporary input file to

00:11:43,170 --> 00:11:47,250
have ytt

00:11:44,149 --> 00:11:49,829
do all the interpolating there and we're

00:11:47,250 --> 00:11:53,790
just gonna say - why - say yes we accept

00:11:49,829 --> 00:11:56,010
the difference and the key here is to

00:11:53,790 --> 00:11:59,940
watch what's going on in the bottom

00:11:56,010 --> 00:12:02,190
window there we already have created a

00:11:59,940 --> 00:12:04,740
third API server instance it's

00:12:02,190 --> 00:12:06,779
initializing it you can see basically

00:12:04,740 --> 00:12:12,600
cap is running this under the hood and

00:12:06,779 --> 00:12:16,550
it's watching changes and then we're

00:12:12,600 --> 00:12:19,529
done so what's left is to actually

00:12:16,550 --> 00:12:27,420
attach to the Cloud Foundry instance and

00:12:19,529 --> 00:12:30,000
do something so I still need to say skip

00:12:27,420 --> 00:12:32,160
SSL validation because I did not use a

00:12:30,000 --> 00:12:36,750
proper cert those were self-signed cert

00:12:32,160 --> 00:12:39,839
in the values file and now I'm able to

00:12:36,750 --> 00:12:41,910
use I'm able to get my password from

00:12:39,839 --> 00:12:45,990
that dollar values file the values file

00:12:41,910 --> 00:12:47,779
I saved through that yq-- which is like

00:12:45,990 --> 00:12:51,870
JQ but for llamo

00:12:47,779 --> 00:12:54,930
and that should log us and because I've

00:12:51,870 --> 00:12:57,240
been working here we have noir called

00:12:54,930 --> 00:13:06,260
org in a space called space we're there

00:12:57,240 --> 00:13:06,260
and then we still have the ability to

00:13:07,130 --> 00:13:12,810
Porsche now you know the first part of

00:13:09,750 --> 00:13:16,440
this will look exactly like the Bosch

00:13:12,810 --> 00:13:18,600
based cloud foundry experience where

00:13:16,440 --> 00:13:22,140
we're just uploading the files as a

00:13:18,600 --> 00:13:25,050
package up to the API

00:13:22,140 --> 00:13:26,840
server and the blobstore and I would

00:13:25,050 --> 00:13:29,850
staging them and creating the droplet

00:13:26,840 --> 00:13:33,870
and now we're seeing some differences

00:13:29,850 --> 00:13:36,660
like a reference to an image name with

00:13:33,870 --> 00:13:40,980
just some goo it not found so here it's

00:13:36,660 --> 00:13:43,320
actually using kpac to build a container

00:13:40,980 --> 00:13:45,120
based on the source code and we didn't

00:13:43,320 --> 00:13:47,370
have to change that source code at all

00:13:45,120 --> 00:13:52,440
it's like a standard node app with a

00:13:47,370 --> 00:14:04,290
package.json file and JavaScript files

00:13:52,440 --> 00:14:07,740
to implement the app ok actually there

00:14:04,290 --> 00:14:11,610
is the command I like to use that shows

00:14:07,740 --> 00:14:14,310
a little more the pods right we have we

00:14:11,610 --> 00:14:16,830
have this workload staging so that's

00:14:14,310 --> 00:14:20,790
where that name space is where kpac

00:14:16,830 --> 00:14:21,510
builds the containers and then this CF

00:14:20,790 --> 00:14:24,230
workloads

00:14:21,510 --> 00:14:27,090
uses vai Rini to run the containers and

00:14:24,230 --> 00:14:37,320
I scrolled off there but we have the app

00:14:27,090 --> 00:14:38,190
and I should now be able to hit it and

00:14:37,320 --> 00:14:41,250
there it is

00:14:38,190 --> 00:14:44,220
so just shows you how quickly you can

00:14:41,250 --> 00:14:47,340
make changes later on I'll be coming

00:14:44,220 --> 00:14:49,410
back and going into a deeper dive on the

00:14:47,340 --> 00:14:52,380
technologies that I used in command line

00:14:49,410 --> 00:14:56,300
and show more of the pieces I've cf4

00:14:52,380 --> 00:14:56,300
kate's but it's back to injury now

00:14:58,040 --> 00:15:03,120
thanks Eric

00:14:59,550 --> 00:15:05,700
so this is sort of the 30,000 foot view

00:15:03,120 --> 00:15:07,260
of the architecture we didn't want to

00:15:05,700 --> 00:15:09,780
include a complicated architecture

00:15:07,260 --> 00:15:11,520
diagram so this is sort of the broad

00:15:09,780 --> 00:15:15,720
overview of what you might want to care

00:15:11,520 --> 00:15:18,030
about so you have the user facing

00:15:15,720 --> 00:15:19,770
applications at the top and you have the

00:15:18,030 --> 00:15:21,870
kubernetes orchestration elements at the

00:15:19,770 --> 00:15:23,190
bottom but you need all of this clue to

00:15:21,870 --> 00:15:25,110
stick it together and that's where all

00:15:23,190 --> 00:15:27,930
of the Cloud Foundry value comes in

00:15:25,110 --> 00:15:29,880
you could run anything you want directly

00:15:27,930 --> 00:15:32,550
in a docker container like your bird IVs

00:15:29,880 --> 00:15:34,850
without this layer we gonna lose quite a

00:15:32,550 --> 00:15:38,209
bit of nice to have functionality

00:15:34,850 --> 00:15:39,589
so in that middle layer you have the CF

00:15:38,209 --> 00:15:41,990
components on the open-source components

00:15:39,589 --> 00:15:43,550
that we're in there granular with the CF

00:15:41,990 --> 00:15:45,560
components you get an API for

00:15:43,550 --> 00:15:48,740
interacting with your platform you get

00:15:45,560 --> 00:15:50,870
authentication authorization yet

00:15:48,740 --> 00:15:53,540
workload scheduling simple routing

00:15:50,870 --> 00:15:56,810
mechanics logging aggregation platform

00:15:53,540 --> 00:15:58,040
metrics and app health from the open

00:15:56,810 --> 00:16:00,920
source components you get data

00:15:58,040 --> 00:16:03,440
persistence pack of storage secure

00:16:00,920 --> 00:16:05,600
networking both ingress and container to

00:16:03,440 --> 00:16:11,930
container and you get application

00:16:05,600 --> 00:16:13,699
packaging which is quite nice on the

00:16:11,930 --> 00:16:16,970
roadmap because we're still actively

00:16:13,699 --> 00:16:18,649
developing this and we have some great

00:16:16,970 --> 00:16:21,470
basic functionality but we would like to

00:16:18,649 --> 00:16:24,139
provide a lot more and get to parity

00:16:21,470 --> 00:16:26,389
eventually we have our pivotal tracker

00:16:24,139 --> 00:16:29,000
so if you want to see what's going on

00:16:26,389 --> 00:16:30,889
what's new and being developed up to

00:16:29,000 --> 00:16:33,319
date at the moment you can check in our

00:16:30,889 --> 00:16:35,540
pivotal tracker it's public so anyone

00:16:33,319 --> 00:16:37,910
can come and look and see what we're

00:16:35,540 --> 00:16:40,970
working on so I'd encourage you all to

00:16:37,910 --> 00:16:44,029
take a look at it we are bringing in

00:16:40,970 --> 00:16:46,399
more built back support so we use scene

00:16:44,029 --> 00:16:48,459
B's cloud native build packs to actually

00:16:46,399 --> 00:16:50,750
build these applications on the fly so

00:16:48,459 --> 00:16:53,060
there are a number of build exploring

00:16:50,750 --> 00:16:56,149
different application types the brew be

00:16:53,060 --> 00:16:58,310
seen be recently arrived unfortunately

00:16:56,149 --> 00:17:00,709
doesn't have rack yet but it's still a

00:16:58,310 --> 00:17:03,259
welcome addition to be able to push Ruby

00:17:00,709 --> 00:17:05,750
apps and we will eventually have rack

00:17:03,259 --> 00:17:07,850
based apps as well we're working on

00:17:05,750 --> 00:17:10,339
Cloud Foundry acceptance test

00:17:07,850 --> 00:17:12,530
compatibility so that we can adequately

00:17:10,339 --> 00:17:15,740
test the platform and ensure stability

00:17:12,530 --> 00:17:18,350
and there's also a Python built back

00:17:15,740 --> 00:17:21,350
coming in as well we have several

00:17:18,350 --> 00:17:24,289
current areas of focus secrets and

00:17:21,350 --> 00:17:26,449
config Maps enhancing those our top

00:17:24,289 --> 00:17:29,150
concern we are actively working on

00:17:26,449 --> 00:17:32,720
making managing updating rotating

00:17:29,150 --> 00:17:34,130
painless upgradability is another high

00:17:32,720 --> 00:17:35,780
priority we're working on making

00:17:34,130 --> 00:17:36,289
platform upgrades as seamless as

00:17:35,780 --> 00:17:38,390
possible

00:17:36,289 --> 00:17:40,880
this includes cuber Nettie's level

00:17:38,390 --> 00:17:43,270
upgrades so upgrades to the different

00:17:40,880 --> 00:17:46,100
nodes rather than the API server and

00:17:43,270 --> 00:17:46,880
upgrades to the CEO for Kate's specific

00:17:46,100 --> 00:17:49,910
components

00:17:46,880 --> 00:17:52,850
and all of this is a huge concern that

00:17:49,910 --> 00:17:54,560
we want to make sure has as seamless and

00:17:52,850 --> 00:17:58,040
painless as possible and provides as

00:17:54,560 --> 00:18:00,830
much uptime as possible image ownership

00:17:58,040 --> 00:18:02,900
is in active discussion to ensure we can

00:18:00,830 --> 00:18:04,880
guarantee a chain of custody and issue

00:18:02,900 --> 00:18:07,460
timely updates for bug fixes and

00:18:04,880 --> 00:18:11,450
security vulnerabilities as well as any

00:18:07,460 --> 00:18:15,350
generic upgrade I'm gonna pass it back

00:18:11,450 --> 00:18:18,470
to Eric for a code base overview yeah

00:18:15,350 --> 00:18:21,080
thanks it's more of a continuation of

00:18:18,470 --> 00:18:23,960
what I was showing before without really

00:18:21,080 --> 00:18:27,050
describing it it's more of a description

00:18:23,960 --> 00:18:30,260
so these are the mean directories you'll

00:18:27,050 --> 00:18:34,070
see if you get cloned the cf4 kate's

00:18:30,260 --> 00:18:36,950
repo config you can consider it like a

00:18:34,070 --> 00:18:42,680
read-only directory it's where all of

00:18:36,950 --> 00:18:45,020
the it contains two parts in the second

00:18:42,680 --> 00:18:46,880
part the ytt Lib is where all of the

00:18:45,020 --> 00:18:49,310
contributions when the external teams

00:18:46,880 --> 00:18:53,570
live in the Cloud Foundry teams so for

00:18:49,310 --> 00:18:54,430
example the logging UA a post-grad

00:18:53,570 --> 00:18:58,370
ireenie

00:18:54,430 --> 00:19:00,770
min IO Cloud Controller all of those

00:18:58,370 --> 00:19:03,320
components live in the ytt Lib the

00:19:00,770 --> 00:19:07,310
config layer any gamma files and the

00:19:03,320 --> 00:19:11,510
config contains contained configuration

00:19:07,310 --> 00:19:13,730
files with like settings and secrets

00:19:11,510 --> 00:19:17,360
that you need and as I showed in the

00:19:13,730 --> 00:19:20,450
demo it's often better to modify them in

00:19:17,360 --> 00:19:24,620
config optional or you can modify config

00:19:20,450 --> 00:19:26,360
but then of course you you're

00:19:24,620 --> 00:19:28,880
maintaining like a fork of this code

00:19:26,360 --> 00:19:32,270
whereas config optional is where the ops

00:19:28,880 --> 00:19:34,970
files can go deploy is interesting it

00:19:32,270 --> 00:19:36,710
contains terraform sets of terraform

00:19:34,970 --> 00:19:44,090
scripts for 4 targets right now

00:19:36,710 --> 00:19:47,900
Azure Google Cloud Mini cube sorry kind

00:19:44,090 --> 00:19:50,210
on GCP and kind on mini cube which works

00:19:47,900 --> 00:19:52,970
if your machine is big enough kind of

00:19:50,210 --> 00:19:56,600
course is rubbing running kubernetes in

00:19:52,970 --> 00:20:01,780
darker K in D so it's an interesting

00:19:56,600 --> 00:20:04,400
concept it's a great area for

00:20:01,780 --> 00:20:07,550
providing like making a contribution to

00:20:04,400 --> 00:20:09,470
the project say you want to deploy to

00:20:07,550 --> 00:20:12,410
another cloud that we currently aren't

00:20:09,470 --> 00:20:14,210
supporting but terraform does that'd be

00:20:12,410 --> 00:20:16,520
great

00:20:14,210 --> 00:20:19,850
and then there's the build directory

00:20:16,520 --> 00:20:21,590
which works with a vendor llamo and I'll

00:20:19,850 --> 00:20:22,790
be showing what vendor is in a few

00:20:21,590 --> 00:20:25,370
minutes

00:20:22,790 --> 00:20:30,140
and we have an example of a typical

00:20:25,370 --> 00:20:32,900
build file so after you have say updated

00:20:30,140 --> 00:20:36,380
you we are currently running ireenie 1.0

00:20:32,900 --> 00:20:37,970
0.6 if you are working on the are any

00:20:36,380 --> 00:20:41,630
team and you'd like to test it at one

00:20:37,970 --> 00:20:44,300
point in 0.7 you would enter that in the

00:20:41,630 --> 00:20:46,610
vendor got llamo file run vendor sync

00:20:44,300 --> 00:20:48,320
and then run this build script but I

00:20:46,610 --> 00:20:50,540
brought the build script up here not to

00:20:48,320 --> 00:20:52,580
explain exactly what it does but to show

00:20:50,540 --> 00:20:54,440
how all these different technologies

00:20:52,580 --> 00:21:00,380
that I've been talking about work

00:20:54,440 --> 00:21:05,570
together helm of course whoops is not

00:21:00,380 --> 00:21:09,050
part of the well the K 14s toolset that

00:21:05,570 --> 00:21:09,830
CF for kate's uses but these tools work

00:21:09,050 --> 00:21:13,820
well with it

00:21:09,830 --> 00:21:16,640
so helm emits gamma which YT t which is

00:21:13,820 --> 00:21:19,820
piped into YT T here in the second

00:21:16,640 --> 00:21:23,090
command YT t reads both from standard in

00:21:19,820 --> 00:21:25,610
that's what that - F space - is and you

00:21:23,090 --> 00:21:28,430
can also supply other files to modify

00:21:25,610 --> 00:21:32,810
that input that isn't written out as

00:21:28,430 --> 00:21:36,140
yeah mo to kay build which is kubernetes

00:21:32,810 --> 00:21:39,020
build tool in k belts at the highest

00:21:36,140 --> 00:21:40,970
level it looks at the ammo input for

00:21:39,020 --> 00:21:43,970
references for images and particularly

00:21:40,970 --> 00:21:47,960
images that have a shot as opposed to

00:21:43,970 --> 00:21:49,660
like a latest kind of tag for a docker

00:21:47,960 --> 00:21:53,120
container a docker image for example

00:21:49,660 --> 00:21:54,890
because sha images are immutable and we

00:21:53,120 --> 00:21:59,260
can count on them forever so we can lock

00:21:54,890 --> 00:22:03,740
in a version if you want to lock in say

00:21:59,260 --> 00:22:05,930
my docker container colon b3 there's

00:22:03,740 --> 00:22:08,450
nothing to stop a new version of that

00:22:05,930 --> 00:22:10,940
from getting the same tag be three but

00:22:08,450 --> 00:22:13,880
the Shaw is forever so that's usually

00:22:10,940 --> 00:22:14,330
how we work so k build it reads in the

00:22:13,880 --> 00:22:17,299
animal

00:22:14,330 --> 00:22:19,279
it has side effects of generating the

00:22:17,299 --> 00:22:22,240
images and then it just writes out yamo

00:22:19,279 --> 00:22:24,769
and that's that second last line - f -

00:22:22,240 --> 00:22:27,860
which is writing out the outputs of the

00:22:24,769 --> 00:22:30,880
standardout which is then written to our

00:22:27,860 --> 00:22:33,649
config ytt lib with ireenie

00:22:30,880 --> 00:22:35,870
the rendered yam oh it's gonna take a

00:22:33,649 --> 00:22:37,039
minute and show you where to go for more

00:22:35,870 --> 00:22:42,919
information

00:22:37,039 --> 00:22:44,510
k 14 s io k 14 s 14 stands for the

00:22:42,919 --> 00:22:46,700
number of letters between the K and the

00:22:44,510 --> 00:22:48,409
s I should say number of characters

00:22:46,700 --> 00:22:51,019
between the K and the s including these

00:22:48,409 --> 00:22:53,090
tools because it counts the space in

00:22:51,019 --> 00:22:56,809
particular you can learn more about YT t

00:22:53,090 --> 00:22:59,210
k build cap which is what we use instead

00:22:56,809 --> 00:23:00,950
of cube control because it again is

00:22:59,210 --> 00:23:03,169
aware of the differences between the

00:23:00,950 --> 00:23:04,909
current state and the desired state so

00:23:03,169 --> 00:23:06,950
it minimizes the amount of work you need

00:23:04,909 --> 00:23:09,200
to do and you can learn about vendor as

00:23:06,950 --> 00:23:12,169
well these are the four that we've been

00:23:09,200 --> 00:23:18,740
using today I just want to call out with

00:23:12,169 --> 00:23:20,899
YT t that first of all it's a ya malware

00:23:18,740 --> 00:23:23,179
templating language so that means you

00:23:20,899 --> 00:23:27,019
don't have to count spaces when you're

00:23:23,179 --> 00:23:28,730
writing ytt you can just think in terms

00:23:27,019 --> 00:23:31,010
of the structure you can write a

00:23:28,730 --> 00:23:33,019
function that returns a block of llamó

00:23:31,010 --> 00:23:34,639
and you can reference that function in

00:23:33,019 --> 00:23:36,730
multiple places and it doesn't matter

00:23:34,639 --> 00:23:39,529
where you are in the ml indentation

00:23:36,730 --> 00:23:41,539
because it knows how to indent in the

00:23:39,529 --> 00:23:45,440
final output it's kind of like when it

00:23:41,539 --> 00:23:49,909
renders it so that's terrific it's also

00:23:45,440 --> 00:23:52,220
actually built on top of a dialect of

00:23:49,909 --> 00:23:55,370
Python called star lark so you actually

00:23:52,220 --> 00:23:57,889
have Python definitions and I think

00:23:55,370 --> 00:24:00,529
maybe it's possible to delete the user's

00:23:57,889 --> 00:24:02,809
disk or a lot of files because it's

00:24:00,529 --> 00:24:04,220
Python but I don't know if it supports

00:24:02,809 --> 00:24:06,740
import system I haven't tried that

00:24:04,220 --> 00:24:09,470
myself but it does have a lot of power

00:24:06,740 --> 00:24:12,769
beyond a typical templating language and

00:24:09,470 --> 00:24:16,250
then in here you can actually play in

00:24:12,769 --> 00:24:19,029
the playground and just like select all

00:24:16,250 --> 00:24:22,070
of this and replace with your own little

00:24:19,029 --> 00:24:23,840
trial ytt and see if the result that

00:24:22,070 --> 00:24:26,309
comes out is what you're desiring or do

00:24:23,840 --> 00:24:29,610
you get error messages

00:24:26,309 --> 00:24:32,519
so again that that's really cool also in

00:24:29,610 --> 00:24:35,279
the docks there is a like a blog post

00:24:32,519 --> 00:24:39,320
that compares ytt with other templating

00:24:35,279 --> 00:24:39,320
languages as well I highly recommend

00:24:39,799 --> 00:24:45,210
okay so Andrew will talk about pr's

00:24:44,029 --> 00:24:48,830
Thanks

00:24:45,210 --> 00:24:51,870
so how to contribute specifically PRS

00:24:48,830 --> 00:24:53,580
PRS are encouraged we would really like

00:24:51,870 --> 00:24:57,419
to get some community engagement on this

00:24:53,580 --> 00:24:59,370
welcome any interaction for discussion

00:24:57,419 --> 00:25:01,769
or anything over the direction of the

00:24:59,370 --> 00:25:04,019
project our goal really is to make the

00:25:01,769 --> 00:25:06,750
best tool for all users whether you're

00:25:04,019 --> 00:25:08,789
just wanting to kick the tires or set up

00:25:06,750 --> 00:25:10,110
a production writing system we want to

00:25:08,789 --> 00:25:13,470
hear from you we want to make the great

00:25:10,110 --> 00:25:15,659
tools that you want to use we have CI

00:25:13,470 --> 00:25:19,370
pipelines for checking pull requests if

00:25:15,659 --> 00:25:22,260
you would like to submit one and those

00:25:19,370 --> 00:25:24,779
those pipelines run tests they have

00:25:22,260 --> 00:25:28,590
process gates making sure vendors up

00:25:24,779 --> 00:25:30,480
today sir the pipeline is public so if

00:25:28,590 --> 00:25:32,870
you want to check what's running through

00:25:30,480 --> 00:25:35,190
the pipelines or if you submit a PR and

00:25:32,870 --> 00:25:37,710
maybe it failed to check you can find

00:25:35,190 --> 00:25:39,659
out what checks it's failed or just get

00:25:37,710 --> 00:25:43,440
an idea of what things are actively

00:25:39,659 --> 00:25:46,470
running through in development our

00:25:43,440 --> 00:25:50,490
current contributions are focused on box

00:25:46,470 --> 00:25:53,399
so the documentation for any project can

00:25:50,490 --> 00:25:55,350
always be improved and specifically we

00:25:53,399 --> 00:25:57,330
would like to make our document

00:25:55,350 --> 00:25:59,340
documentation pretty good so

00:25:57,330 --> 00:26:01,139
contributing to documentation is a great

00:25:59,340 --> 00:26:03,809
way to help the community and get more

00:26:01,139 --> 00:26:05,820
involved and especially if you have more

00:26:03,809 --> 00:26:08,220
interesting configurations that aren't

00:26:05,820 --> 00:26:10,440
well documented you might want to help

00:26:08,220 --> 00:26:13,139
us support configurations that you think

00:26:10,440 --> 00:26:20,130
are important and useful to the

00:26:13,139 --> 00:26:22,110
community in general so there's also

00:26:20,130 --> 00:26:23,880
bunch of resources you can check out so

00:26:22,110 --> 00:26:26,550
you're here because you're interested in

00:26:23,880 --> 00:26:28,590
the project hopefully and so if you want

00:26:26,550 --> 00:26:30,900
to continue finding out more about it

00:26:28,590 --> 00:26:33,210
you can come visit us at the CF gates

00:26:30,900 --> 00:26:34,770
channel on the Cloud Foundry slack get

00:26:33,210 --> 00:26:38,610
involved learn about product updates

00:26:34,770 --> 00:26:41,970
chat with people working on the project

00:26:38,610 --> 00:26:45,030
just keep up-to-date with news you can

00:26:41,970 --> 00:26:48,690
file issues bugs open PRS at our github

00:26:45,030 --> 00:26:52,680
repository which is github.com slash

00:26:48,690 --> 00:26:55,620
Cloud Foundry /c affricates the K 14s

00:26:52,680 --> 00:26:59,790
tools that Eric mentioned are available

00:26:55,620 --> 00:27:04,620
at github comm / K 14s you can see why

00:26:59,790 --> 00:27:07,020
TT cap K build etc and you can check out

00:27:04,620 --> 00:27:09,240
our CI pipelines by following the link

00:27:07,020 --> 00:27:10,530
on the slide and again those are public

00:27:09,240 --> 00:27:13,260
so if you want to see what's going

00:27:10,530 --> 00:27:14,970
through just go check them out there is

00:27:13,260 --> 00:27:17,280
additional resources that are available

00:27:14,970 --> 00:27:19,140
if you click on the little tiny your all

00:27:17,280 --> 00:27:24,330
there that we will make sure is

00:27:19,140 --> 00:27:26,700
up-to-date so thank you so much for

00:27:24,330 --> 00:27:29,670
listening we greatly appreciate your

00:27:26,700 --> 00:27:32,160
coming and listening to us and your

00:27:29,670 --> 00:27:34,200
interest in c4 Cates and hope you'll

00:27:32,160 --> 00:27:37,020
join us as we race towards general

00:27:34,200 --> 00:27:40,500
availability and beyond there will be a

00:27:37,020 --> 00:27:42,270
Q&A session to follow this where you'll

00:27:40,500 --> 00:27:45,720
be able to ask a few questions of us and

00:27:42,270 --> 00:27:48,330
we can chat and hopefully answer your

00:27:45,720 --> 00:27:52,170
most pressing questions and maybe direct

00:27:48,330 --> 00:27:55,350
you to some of our contributing projects

00:27:52,170 --> 00:27:55,800
if it is something more directed again

00:27:55,350 --> 00:27:58,710
thanks

00:27:55,800 --> 00:28:02,400
I'm Andrew went rock twitter at Andrew

00:27:58,710 --> 00:28:05,100
wit rock github burg rock and with me is

00:28:02,400 --> 00:28:08,430
Eric promised low Twitter at Eric

00:28:05,100 --> 00:28:11,070
promised low github Eric promised low so

00:28:08,430 --> 00:28:14,030
we'll see you in just a minute

00:28:11,070 --> 00:28:14,030

YouTube URL: https://www.youtube.com/watch?v=jeK3dOMOmMU


