Title: Paketo Buildpacks, From Source Code to Application Images - Daniel Thornton, VMWare
Publication date: 2020-06-22
Playlist: Cloud Foundry Summit NA 2020 - Virtual
Description: 
	Paketo Buildpacks, From Source Code to Application Images - Daniel Thornton, VMWare 

For more info: https://www.cloudfoundry.org/ 

As CF for Kubernetes continues to grow, the process for pushing source code to production will still be as simple as running 'cf push'. But, the build path that your application travels from source to running container has changed. The buildpacks responsible for adding the dependencies an application needs have been completely reimagined.

Building on top of the experience building and maintaining Cloud Foundry Buildpacks comes the Paketo Project. It aims to resolve the technical and organizational issues that affected the old CloudFoundry Buildpacks.

This talk will address how Paketo Buildpacks reshape the buildpack experience to be modular, extensible and approachable.
Captions: 
	00:00:00,030 --> 00:00:06,600
hello all I'm Daniel Thornton today I

00:00:03,659 --> 00:00:10,740
will be talking a bit about the potato

00:00:06,600 --> 00:00:13,230
build packs project just a little bit

00:00:10,740 --> 00:00:16,440
about me for the past couple years I've

00:00:13,230 --> 00:00:19,500
worked for VMware on the cloud foundry

00:00:16,440 --> 00:00:22,289
build packs as well as this new potato

00:00:19,500 --> 00:00:23,730
built X project and I'd like to talk

00:00:22,289 --> 00:00:26,359
with you today about some of the

00:00:23,730 --> 00:00:35,820
technical and ideological changes that

00:00:26,359 --> 00:00:39,870
have led to this project so what is the

00:00:35,820 --> 00:00:42,540
potato build packs project a simple

00:00:39,870 --> 00:00:44,219
definition would be it's a collection of

00:00:42,540 --> 00:00:46,170
cloud made built packs to provide

00:00:44,219 --> 00:00:49,350
support for the most popular language

00:00:46,170 --> 00:00:52,050
runtimes oh here we have Java node go

00:00:49,350 --> 00:00:53,280
genetics donna kholer and PHP and for

00:00:52,050 --> 00:00:57,660
each of these we have an implementation

00:00:53,280 --> 00:00:58,770
you can go and use right now and you

00:00:57,660 --> 00:01:02,640
might look at this definition and say

00:00:58,770 --> 00:01:05,369
what we just defined build packs in

00:01:02,640 --> 00:01:08,700
terms of other build packs and you are

00:01:05,369 --> 00:01:11,549
right we did but I'm hoping throughout

00:01:08,700 --> 00:01:14,100
this talk I can transfer some of this

00:01:11,549 --> 00:01:16,229
context around what build packs are what

00:01:14,100 --> 00:01:17,880
cloud native bill packs are so that at

00:01:16,229 --> 00:01:21,150
the end you walk out of here

00:01:17,880 --> 00:01:28,770
understanding what a picado build pack

00:01:21,150 --> 00:01:31,650
is and how to use one so to give some

00:01:28,770 --> 00:01:33,390
understanding about what potato build

00:01:31,650 --> 00:01:36,570
packs are let's let's talk about the

00:01:33,390 --> 00:01:39,630
problems that they solve so the first of

00:01:36,570 --> 00:01:48,020
these is transforming application code

00:01:39,630 --> 00:01:50,340
into images on any kubernetes system

00:01:48,020 --> 00:01:53,159
you're gonna have to translate your

00:01:50,340 --> 00:01:55,710
source code into this application image

00:01:53,159 --> 00:01:58,079
in order to get it to run this is true

00:01:55,710 --> 00:02:01,320
for vanilla kubernetes and this problem

00:01:58,079 --> 00:02:03,719
needs to be solved for cloud foundry on

00:02:01,320 --> 00:02:05,969
kubernetes as well if you want to see a

00:02:03,719 --> 00:02:09,020
push your app you we need to convert it

00:02:05,969 --> 00:02:09,020
to an image at some point

00:02:09,740 --> 00:02:17,270
so let's talk a little bit about what

00:02:12,740 --> 00:02:20,690
the app image looks like and on the left

00:02:17,270 --> 00:02:24,380
here we have a couple of squares each of

00:02:20,690 --> 00:02:27,470
these represents a layer in an app image

00:02:24,380 --> 00:02:29,540
and the sum of all of these layers is

00:02:27,470 --> 00:02:32,540
going to give us a file system that

00:02:29,540 --> 00:02:36,380
contains all of the bits we need to run

00:02:32,540 --> 00:02:38,180
our application these artifacts have

00:02:36,380 --> 00:02:40,040
become the standard for building

00:02:38,180 --> 00:02:43,010
software over the past couple years

00:02:40,040 --> 00:02:45,860
they're self-contained immutable they

00:02:43,010 --> 00:02:48,830
run on any container runtime and they're

00:02:45,860 --> 00:02:50,780
extremely easy to distribute all these

00:02:48,830 --> 00:02:52,400
factors make this a great way to ship

00:02:50,780 --> 00:02:57,380
your code and one of the reasons why

00:02:52,400 --> 00:03:01,040
kubernetes consumes them so how do we

00:02:57,380 --> 00:03:05,630
make application images well a first and

00:03:01,040 --> 00:03:07,640
easy step is writing a docker file all

00:03:05,630 --> 00:03:09,740
that I would have to do via an app is

00:03:07,640 --> 00:03:12,200
write a docker file that loads my app

00:03:09,740 --> 00:03:15,620
and its dependencies in and run docker

00:03:12,200 --> 00:03:21,320
build and this would give me an app

00:03:15,620 --> 00:03:25,100
image so let's take a quick look here at

00:03:21,320 --> 00:03:28,390
a very very simple docker file ok just

00:03:25,100 --> 00:03:32,090
to get an idea about what they can do um

00:03:28,390 --> 00:03:34,430
so walking through here we have from

00:03:32,090 --> 00:03:37,370
anode current slim so we're building on

00:03:34,430 --> 00:03:40,300
top of an existing image we set the

00:03:37,370 --> 00:03:42,890
working directory Coppedge copy a

00:03:40,300 --> 00:03:48,310
package.json file from our localhost

00:03:42,890 --> 00:03:51,860
computer and then run npm install ok so

00:03:48,310 --> 00:03:54,170
this ability to run arbitrary commands

00:03:51,860 --> 00:03:55,340
in a docker image and add all this

00:03:54,170 --> 00:03:58,760
configuration means that they're

00:03:55,340 --> 00:04:03,800
extremely flexible artifacts if I write

00:03:58,760 --> 00:04:07,940
a docker file it can do almost anything

00:04:03,800 --> 00:04:12,080
and it also gives us these precise and

00:04:07,940 --> 00:04:15,880
atomic tools to control exactly the bits

00:04:12,080 --> 00:04:15,880
that go into our image which is great

00:04:16,640 --> 00:04:23,060
I don't want extra dependencies hanging

00:04:20,900 --> 00:04:28,010
around in my image the only thing that

00:04:23,060 --> 00:04:29,810
does is add to the potential surface

00:04:28,010 --> 00:04:33,500
area that an attacker could exploit

00:04:29,810 --> 00:04:36,889
right so docker files have some quite

00:04:33,500 --> 00:04:39,530
good aspects they are easy to get up and

00:04:36,889 --> 00:04:41,600
running with they give you extremely

00:04:39,530 --> 00:04:45,980
precise control over the bits that go

00:04:41,600 --> 00:04:48,500
into your app image but let's look at

00:04:45,980 --> 00:04:51,770
another example here so on the Left we

00:04:48,500 --> 00:04:54,740
have a snippet from the official Python

00:04:51,770 --> 00:04:58,910
image from docker hub and here we have

00:04:54,740 --> 00:05:01,100
the first 60-ish lines of a 112 line run

00:04:58,910 --> 00:05:02,780
command and if you squint kind of hard

00:05:01,100 --> 00:05:05,150
you can see that we're installing some

00:05:02,780 --> 00:05:15,100
OS packages that's part of what we're

00:05:05,150 --> 00:05:18,440
doing here and this addition and

00:05:15,100 --> 00:05:20,090
complexity is a result of having these

00:05:18,440 --> 00:05:22,930
atomic tools if I want to build

00:05:20,090 --> 00:05:26,300
something up has complicated behavior

00:05:22,930 --> 00:05:28,520
what I'm gonna need to do is use these

00:05:26,300 --> 00:05:32,930
tools extensively and that's what we see

00:05:28,520 --> 00:05:35,300
here and this complexity that results in

00:05:32,930 --> 00:05:40,580
building an image with these small tools

00:05:35,300 --> 00:05:43,130
is vulnerabilities right so in the

00:05:40,580 --> 00:05:45,530
Python docker image example I was

00:05:43,130 --> 00:05:48,440
downloading some OS packages as soon as

00:05:45,530 --> 00:05:51,229
something goes into my docker image I'm

00:05:48,440 --> 00:05:54,740
responsible for keeping that dependency

00:05:51,229 --> 00:05:57,950
up-to-date if there are CVS they need to

00:05:54,740 --> 00:06:01,550
be patched I need to rebuild this app

00:05:57,950 --> 00:06:03,350
image using my docker file and so here

00:06:01,550 --> 00:06:06,740
we have a nice graphic provided by the

00:06:03,350 --> 00:06:11,450
folks head snick that shows us some OS

00:06:06,740 --> 00:06:15,440
vulnerabilities in popular docker images

00:06:11,450 --> 00:06:18,229
so these are vulnerabilities in that OS

00:06:15,440 --> 00:06:23,810
layer that probably could be fixed if

00:06:18,229 --> 00:06:26,210
you've rebuilt your image and so docker

00:06:23,810 --> 00:06:28,310
files have some really strong positives

00:06:26,210 --> 00:06:31,130
and some strong negatives they give us

00:06:28,310 --> 00:06:34,700
these precise tools but just the burden

00:06:31,130 --> 00:06:35,710
of managing all of these tools gives us

00:06:34,700 --> 00:06:38,200
quite a bit of tact

00:06:35,710 --> 00:06:44,220
that and if we don't keep up with that

00:06:38,200 --> 00:06:48,370
debt our app images are vulnerable so

00:06:44,220 --> 00:06:51,100
the cost for this solution when you have

00:06:48,370 --> 00:06:54,760
thousands of apps hundreds of docker

00:06:51,100 --> 00:06:59,340
images it's it's too high and so there

00:06:54,760 --> 00:06:59,340
must be another way for us to do this

00:06:59,400 --> 00:07:09,070
and oh so we want to do this without

00:07:06,460 --> 00:07:12,640
doctor files and the solution is the

00:07:09,070 --> 00:07:18,030
cloud native built PACs project and so

00:07:12,640 --> 00:07:21,720
what this is is a CN CF project with

00:07:18,030 --> 00:07:27,790
contributions from Google Heroku

00:07:21,720 --> 00:07:29,980
Microsoft VMware many others and what it

00:07:27,790 --> 00:07:31,840
seeks to do is to build application

00:07:29,980 --> 00:07:35,800
images and they provide us with this

00:07:31,840 --> 00:07:38,560
tool the PAC CLI and they also give us a

00:07:35,800 --> 00:07:41,350
specification for any bill PACs we write

00:07:38,560 --> 00:07:43,810
to provide dependencies they must adhere

00:07:41,350 --> 00:07:48,030
to these rules this is a great way to

00:07:43,810 --> 00:07:51,280
avoid managing a fleet of docker files

00:07:48,030 --> 00:07:54,150
some additional benefits of using the

00:07:51,280 --> 00:07:57,880
tooling that the cloud native build PACs

00:07:54,150 --> 00:08:00,160
provide are reproducible builds they

00:07:57,880 --> 00:08:02,890
leverage ABI compatibility in some of

00:08:00,160 --> 00:08:05,530
these stacks they provide to enable safe

00:08:02,890 --> 00:08:09,760
and efficient OS patching so this is a

00:08:05,530 --> 00:08:13,330
really important point if you have a lib

00:08:09,760 --> 00:08:16,630
as a cell vulnerability you don't have

00:08:13,330 --> 00:08:17,980
to rebuild your entire application you

00:08:16,630 --> 00:08:21,390
should just be able to swap out those

00:08:17,980 --> 00:08:23,790
os-level packages at the very bottom

00:08:21,390 --> 00:08:25,930
optimizing rebuilds is one of them

00:08:23,790 --> 00:08:27,070
enable imaging auditing there's a

00:08:25,930 --> 00:08:29,290
there's a bunch of other features that

00:08:27,070 --> 00:08:31,690
come out with this project I would

00:08:29,290 --> 00:08:33,430
recommend you check them out and here's

00:08:31,690 --> 00:08:37,810
a here's a link that'll be distributed

00:08:33,430 --> 00:08:40,540
with this deck okay so the cloud native

00:08:37,810 --> 00:08:42,880
build packs project here's a have a

00:08:40,540 --> 00:08:46,550
little diagram here about what exactly

00:08:42,880 --> 00:08:50,120
this does it takes source

00:08:46,550 --> 00:08:56,870
the build pack specification uses the

00:08:50,120 --> 00:08:59,660
pack CLI and we get our app image okay

00:08:56,870 --> 00:09:01,880
so this is exactly where potato bill

00:08:59,660 --> 00:09:04,250
packs fit in they are built packs that

00:09:01,880 --> 00:09:08,120
follow this specification and give us

00:09:04,250 --> 00:09:11,060
some extremely beneficial behavior and

00:09:08,120 --> 00:09:13,970
so let's kick things off here and give a

00:09:11,060 --> 00:09:16,880
quick demonstration we're gonna use two

00:09:13,970 --> 00:09:19,580
potato build packs the node engine bill

00:09:16,880 --> 00:09:21,650
pack and the NPM belt pack and we're

00:09:19,580 --> 00:09:26,470
gonna produce an app image that has

00:09:21,650 --> 00:09:26,470
these two dependencies inside of it

00:09:27,040 --> 00:09:37,670
okay so hop on over into a terminal

00:09:31,880 --> 00:09:42,140
session okay so here I am I am sitting

00:09:37,670 --> 00:09:44,060
in a directory that contains on NPM app

00:09:42,140 --> 00:09:47,750
and I'm sitting at the root so I have a

00:09:44,060 --> 00:09:52,010
server das file a package.json file for

00:09:47,750 --> 00:09:55,390
my and PM dependencies and building this

00:09:52,010 --> 00:09:55,390
is as simple as running

00:10:13,120 --> 00:10:20,589
okay awesome so I'm running a PAC build

00:10:16,180 --> 00:10:22,449
here I've just told PAC what I want the

00:10:20,589 --> 00:10:26,199
name of my image to be

00:10:22,449 --> 00:10:28,449
and I've also specified what Bill packs

00:10:26,199 --> 00:10:31,149
I want to use and so if we just kind of

00:10:28,449 --> 00:10:34,149
examine the output that's being spit out

00:10:31,149 --> 00:10:36,579
here we can see that we are using to

00:10:34,149 --> 00:10:39,579
build packs the past detection they are

00:10:36,579 --> 00:10:43,180
the node engine bill pack and the NPM

00:10:39,579 --> 00:10:45,550
build pack and so let's kind of walk

00:10:43,180 --> 00:10:48,790
through this output that we get when

00:10:45,550 --> 00:10:52,480
building so we can see here that the

00:10:48,790 --> 00:10:54,759
node engine bill pack runs it selects a

00:10:52,480 --> 00:10:58,829
version of node that your application

00:10:54,759 --> 00:10:58,829
specifies or chooses one if it does not

00:10:58,920 --> 00:11:04,540
installs this version of node and

00:11:02,139 --> 00:11:06,370
configures the environment so just to

00:11:04,540 --> 00:11:08,709
set up so environment variables so your

00:11:06,370 --> 00:11:12,279
application can actually use node at

00:11:08,709 --> 00:11:15,089
runtime and writes profile D script we

00:11:12,279 --> 00:11:18,429
won't go into the details of that um

00:11:15,089 --> 00:11:23,980
okay and next we have up the NPM build

00:11:18,429 --> 00:11:27,069
pack and this uses NPM it runs an NPM CI

00:11:23,980 --> 00:11:28,899
to install all of the node modules that

00:11:27,069 --> 00:11:33,490
this application requires and were

00:11:28,899 --> 00:11:35,589
specified in package JSON file and we

00:11:33,490 --> 00:11:39,689
kind of see that it follows some some

00:11:35,589 --> 00:11:44,199
similar behavior and at the end we get a

00:11:39,689 --> 00:11:46,509
an output image and here we go here's

00:11:44,199 --> 00:11:49,779
our CF demo application was successfully

00:11:46,509 --> 00:11:51,220
built okay that's awesome so one of the

00:11:49,779 --> 00:11:56,620
kind of interesting little tidbits that

00:11:51,220 --> 00:11:58,660
we can do with this is show how these

00:11:56,620 --> 00:12:00,579
builds are we can rebuild our

00:11:58,660 --> 00:12:08,110
application in an extremely performant

00:12:00,579 --> 00:12:14,709
way and so all I'm gonna do is just edit

00:12:08,110 --> 00:12:16,949
this file a little bit and let's say we

00:12:14,709 --> 00:12:16,949
add

00:12:25,439 --> 00:12:33,399
some additional details to our greeting

00:12:28,240 --> 00:12:35,619
page awesome so now I'm going to rebuild

00:12:33,399 --> 00:12:37,360
the same application and let's kind of

00:12:35,619 --> 00:12:43,959
examine this output again and see what

00:12:37,360 --> 00:12:47,249
happens so once again we're going to see

00:12:43,959 --> 00:12:47,249
that the Oh

00:12:47,410 --> 00:12:51,339
here we go so once again we see that

00:12:49,720 --> 00:12:55,059
we're going to be using the same build X

00:12:51,339 --> 00:12:56,649
as we did last time and but but this

00:12:55,059 --> 00:12:58,899
building step is quite different right

00:12:56,649 --> 00:13:01,899
all of a sudden we're reusing some

00:12:58,899 --> 00:13:06,069
cached layers despite our application

00:13:01,899 --> 00:13:07,480
changing right so we were able PAC was

00:13:06,069 --> 00:13:10,929
able to say okay all right

00:13:07,480 --> 00:13:12,550
no ten twenty point one you built your

00:13:10,929 --> 00:13:14,800
image with that last time I don't need

00:13:12,550 --> 00:13:18,040
to go through the process of redownload

00:13:14,800 --> 00:13:22,959
in this dependency Andry adding it to

00:13:18,040 --> 00:13:27,009
your app image right similarly we have

00:13:22,959 --> 00:13:29,470
the npm build pack is able to reuse all

00:13:27,009 --> 00:13:31,749
of the cache npm modules all right

00:13:29,470 --> 00:13:33,549
that's pretty awesome um and this

00:13:31,749 --> 00:13:35,559
behavior is intelligent if you change

00:13:33,549 --> 00:13:38,259
your npm modules or your package JSON

00:13:35,559 --> 00:13:43,839
file it will end up re-downloading them

00:13:38,259 --> 00:13:46,959
there's been a change okay let's just

00:13:43,839 --> 00:13:49,779
briefly hop back over to our slides okay

00:13:46,959 --> 00:13:52,929
so we've seen a little bit about how

00:13:49,779 --> 00:13:56,920
picado build packs interact with the PAC

00:13:52,929 --> 00:13:59,170
CLI to provide specific dependencies to

00:13:56,920 --> 00:14:04,509
our application and to inevitably build

00:13:59,170 --> 00:14:07,600
an app image so one of the things that

00:14:04,509 --> 00:14:11,920
we saw in the previous build was this

00:14:07,600 --> 00:14:16,269
usage of to build packs to provide both

00:14:11,920 --> 00:14:18,910
node and NPM and this is quite opposite

00:14:16,269 --> 00:14:21,730
what the cloud foundry build pack used

00:14:18,910 --> 00:14:23,290
to do um there's a reason for this the

00:14:21,730 --> 00:14:25,509
the old cloud foundry build pack was

00:14:23,290 --> 00:14:29,529
responsible for just too much stuff

00:14:25,509 --> 00:14:31,569
installing node NPM yarn selecting the

00:14:29,529 --> 00:14:32,680
correct install process to provide node

00:14:31,569 --> 00:14:37,510
modules

00:14:32,680 --> 00:14:39,550
a lot going on in here and the end

00:14:37,510 --> 00:14:42,460
result is that it made it a little bit

00:14:39,550 --> 00:14:44,529
difficult to maintain but definitely

00:14:42,460 --> 00:14:46,360
more difficult to contribute to if I'm a

00:14:44,529 --> 00:14:48,190
developer and the only thing that I know

00:14:46,360 --> 00:14:50,350
how to work with is Yaron applications I

00:14:48,190 --> 00:14:54,610
don't want to touch any code that has to

00:14:50,350 --> 00:14:59,440
do with an NPM install so the picado

00:14:54,610 --> 00:15:02,140
build packs project it redefines the

00:14:59,440 --> 00:15:04,209
relationship between build packs and the

00:15:02,140 --> 00:15:07,330
dependencies that they install so here

00:15:04,209 --> 00:15:09,670
we have the old node.js build pack and

00:15:07,330 --> 00:15:11,950
in order to achieve similar

00:15:09,670 --> 00:15:13,600
functionality the picado build packs

00:15:11,950 --> 00:15:17,200
have been broken up into these three

00:15:13,600 --> 00:15:20,529
modular distinct pieces that do one job

00:15:17,200 --> 00:15:22,240
and do it well so they have a single

00:15:20,529 --> 00:15:24,490
responsibility node engine should

00:15:22,240 --> 00:15:26,830
install node NPM will install your node

00:15:24,490 --> 00:15:28,810
modules yarn install will also install

00:15:26,830 --> 00:15:32,620
on your node modules using a different

00:15:28,810 --> 00:15:35,649
tool and these are composable elements

00:15:32,620 --> 00:15:37,959
meaning that if my app requires node I

00:15:35,649 --> 00:15:39,820
should be able to get it in there right

00:15:37,959 --> 00:15:43,800
I should be able to have the node engine

00:15:39,820 --> 00:15:47,860
build pack detect and add no to my app

00:15:43,800 --> 00:15:50,860
this refactor from Cloud Foundry to

00:15:47,860 --> 00:15:53,680
potato has made each of these built

00:15:50,860 --> 00:15:56,200
packs have well-defined boundaries and

00:15:53,680 --> 00:15:58,089
made them more maintainable and again

00:15:56,200 --> 00:16:01,150
with this maintainability and simplicity

00:15:58,089 --> 00:16:02,890
we get additional ease of understanding

00:16:01,150 --> 00:16:05,220
and contribution from external

00:16:02,890 --> 00:16:08,860
developers right

00:16:05,220 --> 00:16:13,029
ok so we've seen a little bit about how

00:16:08,860 --> 00:16:16,270
we can build an application using pack

00:16:13,029 --> 00:16:21,070
using two potato build packs but let's

00:16:16,270 --> 00:16:24,160
kind of dive into the details of this

00:16:21,070 --> 00:16:26,610
singular responsibility and our app

00:16:24,160 --> 00:16:26,610
image

00:16:26,710 --> 00:16:34,900
so if I jump back over to my terminal

00:16:31,200 --> 00:16:37,630
we're gonna use a tool called dive it's

00:16:34,900 --> 00:16:41,200
quite nice and it's going to give us

00:16:37,630 --> 00:16:54,940
some additional information about what

00:16:41,200 --> 00:16:57,160
is in our final app image okay so here

00:16:54,940 --> 00:17:00,640
we go all right and over here on the

00:16:57,160 --> 00:17:03,100
Left we have a pane that gives us the

00:17:00,640 --> 00:17:06,970
layers in our application image so

00:17:03,100 --> 00:17:10,000
remember the app the dependencies and

00:17:06,970 --> 00:17:12,700
the underlying OS the ordering here is

00:17:10,000 --> 00:17:15,610
slightly flipped from what we saw in the

00:17:12,700 --> 00:17:17,920
slides earlier this first layer is the

00:17:15,610 --> 00:17:22,570
base layer and everything on top of it

00:17:17,920 --> 00:17:25,750
is further up right so if we kind of

00:17:22,570 --> 00:17:35,620
search through this I let's take a look

00:17:25,750 --> 00:17:38,770
at this 67 megabyte layer okay so this

00:17:35,620 --> 00:17:42,670
red highlighting shows the new additions

00:17:38,770 --> 00:17:49,840
that this layer adds to our application

00:17:42,670 --> 00:17:53,140
image and if we if we just inspect what

00:17:49,840 --> 00:17:56,680
that is we can see that oh sorry

00:17:53,140 --> 00:17:59,890
went too far you can see that this is

00:17:56,680 --> 00:18:03,790
our node engine build pack and it

00:17:59,890 --> 00:18:06,490
provides this binary node exactly what

00:18:03,790 --> 00:18:09,970
we wanted so we kind of have this nice

00:18:06,490 --> 00:18:12,550
connection between a build pack and then

00:18:09,970 --> 00:18:17,020
these layers that it provides directly

00:18:12,550 --> 00:18:19,450
into our image similarly we can see the

00:18:17,020 --> 00:18:22,020
same relationship for the NPM build pack

00:18:19,450 --> 00:18:24,400
here it provides the node modules and

00:18:22,020 --> 00:18:26,650
here's some additional environment

00:18:24,400 --> 00:18:29,380
variables we have but here all of the

00:18:26,650 --> 00:18:37,570
node modules that our application

00:18:29,380 --> 00:18:44,670
required okay

00:18:37,570 --> 00:18:47,440
so back to some slides so one of the

00:18:44,670 --> 00:18:49,240
problems that potato bill packs kind of

00:18:47,440 --> 00:18:51,910
solved was this refactoring the

00:18:49,240 --> 00:18:54,550
breakdown of the monolithic Cloud

00:18:51,910 --> 00:19:03,730
Foundry build packs into these pieces

00:18:54,550 --> 00:19:06,700
that are easier to understand so from a

00:19:03,730 --> 00:19:10,630
technical point of view this refactoring

00:19:06,700 --> 00:19:13,840
into composable elements makes our build

00:19:10,630 --> 00:19:15,670
packs easier for external developers or

00:19:13,840 --> 00:19:17,680
people who are interested in this

00:19:15,670 --> 00:19:21,100
project to figure out what's going on in

00:19:17,680 --> 00:19:25,690
them to figure out how to write one but

00:19:21,100 --> 00:19:27,310
there's also this aspect of how the

00:19:25,690 --> 00:19:29,260
Cloud Foundry build packs were written

00:19:27,310 --> 00:19:30,790
and maintained that made it a little bit

00:19:29,260 --> 00:19:33,280
difficult if you were an external

00:19:30,790 --> 00:19:35,350
developer to jump in and contribute and

00:19:33,280 --> 00:19:38,020
have full view of the decisions that are

00:19:35,350 --> 00:19:40,120
being made and what was happening in

00:19:38,020 --> 00:19:42,880
this project and so we've we've tried to

00:19:40,120 --> 00:19:46,240
change this culture in potato bill packs

00:19:42,880 --> 00:19:48,520
so we have some open source governance

00:19:46,240 --> 00:19:50,800
rules you can check these out there in

00:19:48,520 --> 00:19:53,020
an RFC's repo in the potato bill paxton

00:19:50,800 --> 00:19:56,200
org but this follows kind of a

00:19:53,020 --> 00:19:57,910
traditional open-source model where we

00:19:56,200 --> 00:20:02,560
have contributors and maintained errs

00:19:57,910 --> 00:20:07,690
and the second piece is that we've

00:20:02,560 --> 00:20:09,810
largely moved our work to use the PR

00:20:07,690 --> 00:20:13,240
process right we're no longer just

00:20:09,810 --> 00:20:15,190
pushing up commits to master and as a

00:20:13,240 --> 00:20:17,670
result this adds an additional layer of

00:20:15,190 --> 00:20:23,140
visibility for work that's going on in

00:20:17,670 --> 00:20:25,150
the build PACs community and additional

00:20:23,140 --> 00:20:29,680
discussion that can happen on any PR

00:20:25,150 --> 00:20:32,710
right previously our philosophy for this

00:20:29,680 --> 00:20:35,850
at least on deep on the Cloud Foundry

00:20:32,710 --> 00:20:38,530
built pack side was that you would be

00:20:35,850 --> 00:20:40,540
given some notifications about when we

00:20:38,530 --> 00:20:43,270
were working on stuff but true

00:20:40,540 --> 00:20:48,040
involvement in the process was difficult

00:20:43,270 --> 00:20:50,400
and kind of the the last large change

00:20:48,040 --> 00:20:51,580
that this project has spurred has been

00:20:50,400 --> 00:20:56,200
Mike

00:20:51,580 --> 00:20:58,540
most of our pipelines off of this kind

00:20:56,200 --> 00:21:03,370
of concourse which is a tool that we

00:20:58,540 --> 00:21:05,260
used to use to the new option of github

00:21:03,370 --> 00:21:08,680
actions so they're sitting right in

00:21:05,260 --> 00:21:10,540
these repositories easily accessible you

00:21:08,680 --> 00:21:13,330
can look at the status of your PRS and

00:21:10,540 --> 00:21:15,670
we also have all of these pipelines that

00:21:13,330 --> 00:21:18,630
are set up to release build packs as

00:21:15,670 --> 00:21:20,650
soon as they meet a certain threshold or

00:21:18,630 --> 00:21:28,900
maintainer 's agree that it's time to

00:21:20,650 --> 00:21:31,180
release okay okay so here we have some

00:21:28,900 --> 00:21:33,160
some changes so we've we've made build

00:21:31,180 --> 00:21:35,320
packs more approachable that that's kind

00:21:33,160 --> 00:21:37,090
of this this other piece of potato we've

00:21:35,320 --> 00:21:39,910
done it both on a technical level and

00:21:37,090 --> 00:21:46,380
also on the way that we interact with

00:21:39,910 --> 00:21:46,380
other devs so

00:21:46,890 --> 00:21:51,450
we hope that these changes will have

00:21:49,500 --> 00:21:53,910
significant impact and we can kind of

00:21:51,450 --> 00:21:56,370
break down this walled garden culture

00:21:53,910 --> 00:21:58,920
that um made it a little bit more

00:21:56,370 --> 00:22:04,530
difficult for people to contribute to

00:21:58,920 --> 00:22:06,090
the Cloud Foundry bill PACs okay well

00:22:04,530 --> 00:22:08,370
thank you here's some additional

00:22:06,090 --> 00:22:09,870
materials in case you're looking to get

00:22:08,370 --> 00:22:14,630
started I have some additional

00:22:09,870 --> 00:22:18,510
information please visit on the picado

00:22:14,630 --> 00:22:20,280
website and thank you for the cff for

00:22:18,510 --> 00:22:22,710
helping us set that up there's some

00:22:20,280 --> 00:22:24,840
guides about walking through sample

00:22:22,710 --> 00:22:27,930
applications and how to write a build

00:22:24,840 --> 00:22:30,240
pack if you're interested also check out

00:22:27,930 --> 00:22:33,090
all of our build packs that are

00:22:30,240 --> 00:22:35,520
currently available right here at the

00:22:33,090 --> 00:22:36,980
picado build packs org we have a samples

00:22:35,520 --> 00:22:38,820
repo to give you some idea of

00:22:36,980 --> 00:22:40,800
applications that you can build right

00:22:38,820 --> 00:22:43,380
now and how they relate to applications

00:22:40,800 --> 00:22:45,870
that you have running and finally we

00:22:43,380 --> 00:22:48,480
have a slack instance we'd love it if

00:22:45,870 --> 00:22:52,890
you stopped by and said hello and hope

00:22:48,480 --> 00:22:55,590
we can answer any questions alright

00:22:52,890 --> 00:22:58,280
thank you very much it's been a pleasure

00:22:55,590 --> 00:22:58,280

YouTube URL: https://www.youtube.com/watch?v=JVUh9OuA5N4


