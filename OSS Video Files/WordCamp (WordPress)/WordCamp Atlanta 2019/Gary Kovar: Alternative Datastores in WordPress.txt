Title: Gary Kovar: Alternative Datastores in WordPress
Publication date: 2019-09-08
Playlist: WordCamp Atlanta 2019
Description: 
	WordPress has some great internal APIs to work with WordPress things. Sometimes we need to move beyond $wpdb. We will take a high-level walk through the benefits of things like custom tables, ElasticSearch, Redis, and other external services. Some specific implementation examples will be provided along with learning curve, risks, and potential real world use cases.

WPTV link: https://wordpress.tv/2019/06/27/gary-kovar-alternative-datastores-in-wordpress/
Captions: 
	00:00:01,639 --> 00:00:05,910
hey how's everyone doing this afternoon

00:00:03,859 --> 00:00:08,280
so you have made it through the first

00:00:05,910 --> 00:00:10,200
day of WordCamp Atlanta 2019

00:00:08,280 --> 00:00:13,320
congratulate yourselves everyone looks

00:00:10,200 --> 00:00:15,269
mostly awake I hope that there was like

00:00:13,320 --> 00:00:17,390
coffee and soda out there to get this

00:00:15,269 --> 00:00:19,550
afternoon this is gonna be a little

00:00:17,390 --> 00:00:24,210
theoretical low on the shorter side

00:00:19,550 --> 00:00:25,740
because it is warm in here i i'm gary

00:00:24,210 --> 00:00:28,349
Khobar I'm a back-end developer at

00:00:25,740 --> 00:00:29,369
modern tribe if you've heard of modern

00:00:28,349 --> 00:00:31,500
tribe you've probably heard of us

00:00:29,369 --> 00:00:32,880
because of the events calendar plugin I

00:00:31,500 --> 00:00:34,140
don't know anything about the events

00:00:32,880 --> 00:00:35,190
calendar plugin because that's an entire

00:00:34,140 --> 00:00:36,870
part of the company that I don't work

00:00:35,190 --> 00:00:39,890
with half the company's product and half

00:00:36,870 --> 00:00:43,920
as agency so I work on the agency side

00:00:39,890 --> 00:00:48,239
we're mostly doing WP sites or WP sites

00:00:43,920 --> 00:00:51,180
with a lot of weird third-party things

00:00:48,239 --> 00:00:53,640
happening we work with like some big

00:00:51,180 --> 00:00:55,800
clients like Harvard and Stanford and

00:00:53,640 --> 00:00:57,239
Disney and Microsoft and those are fun

00:00:55,800 --> 00:00:59,969
because those clients do things like say

00:00:57,239 --> 00:01:02,520
we have crazy unreasonable time to first

00:00:59,969 --> 00:01:04,830
byte requirements or we have actually

00:01:02,520 --> 00:01:06,119
scoped everything which is neat but we

00:01:04,830 --> 00:01:09,090
also work with a lot of medium and

00:01:06,119 --> 00:01:12,000
smaller size clients that through the

00:01:09,090 --> 00:01:14,010
process of like you know looking at what

00:01:12,000 --> 00:01:17,729
their requirements are we find some neat

00:01:14,010 --> 00:01:19,950
ways to clean up their really messy data

00:01:17,729 --> 00:01:21,420
and make it work faster

00:01:19,950 --> 00:01:24,830
so this talk is going to be about

00:01:21,420 --> 00:01:28,530
alternative data stores in WordPress

00:01:24,830 --> 00:01:30,570
this is a table of contents I kind of

00:01:28,530 --> 00:01:32,820
wanted to put this out here mostly for

00:01:30,570 --> 00:01:34,140
my own recollection as far as like what

00:01:32,820 --> 00:01:35,939
I hope to accomplish in this talk um

00:01:34,140 --> 00:01:38,520
there's no prerequisites here so if

00:01:35,939 --> 00:01:40,710
you're not like a hardcore dev in PHP

00:01:38,520 --> 00:01:44,189
every everyday we're not going to look

00:01:40,710 --> 00:01:45,630
at a ton of code there's a there's

00:01:44,189 --> 00:01:46,860
definitely a version of this talk that

00:01:45,630 --> 00:01:49,829
has that but we're just going to talk

00:01:46,860 --> 00:01:52,740
about these tools as options for

00:01:49,829 --> 00:01:55,290
speeding up your site so we're talk

00:01:52,740 --> 00:01:57,450
about how WP currently stores data just

00:01:55,290 --> 00:01:58,979
a quick look at MySQL we're going to

00:01:57,450 --> 00:02:00,930
talk through three different categories

00:01:58,979 --> 00:02:04,320
of alternative data stores so custom

00:02:00,930 --> 00:02:06,990
tables and views elasticsearch and then

00:02:04,320 --> 00:02:08,520
Redis memcached generally caching type

00:02:06,990 --> 00:02:10,590
stuff and then I want to walk through

00:02:08,520 --> 00:02:13,830
three real-world examples where I've

00:02:10,590 --> 00:02:16,740
used something other than like

00:02:13,830 --> 00:02:17,880
core tables and then just some real

00:02:16,740 --> 00:02:20,160
quick implementation notes and then we

00:02:17,880 --> 00:02:24,180
can get into questions also because it

00:02:20,160 --> 00:02:29,160
is may the 4th Star Wars day I have

00:02:24,180 --> 00:02:32,100
picked all Star Trek images so how does

00:02:29,160 --> 00:02:33,750
w storage work right so WordPress when

00:02:32,100 --> 00:02:36,840
it's not a multi-site when you install

00:02:33,750 --> 00:02:39,990
it has around a dozen database tables

00:02:36,840 --> 00:02:41,160
it's if you've got like an older site

00:02:39,990 --> 00:02:43,260
you have to upgrade you might have like

00:02:41,160 --> 00:02:44,490
links and stuff hanging around but

00:02:43,260 --> 00:02:47,040
generally the way they're related is

00:02:44,490 --> 00:02:49,560
you're gonna have like the object and

00:02:47,040 --> 00:02:54,300
the object meta so users user meta post

00:02:49,560 --> 00:02:56,090
post meta term term meta following that

00:02:54,300 --> 00:02:59,040
logic WordPress really has like two

00:02:56,090 --> 00:03:03,230
kinds of data store two models of data

00:02:59,040 --> 00:03:06,390
storage two things I'm gonna omit users

00:03:03,230 --> 00:03:07,980
because users is a very concrete thing

00:03:06,390 --> 00:03:11,220
and pretty well

00:03:07,980 --> 00:03:13,320
mirrors how post and post meta are set

00:03:11,220 --> 00:03:15,870
up so posts are a thing that have very

00:03:13,320 --> 00:03:17,310
defined properties as evidenced by if

00:03:15,870 --> 00:03:19,050
you look at the post table right look at

00:03:17,310 --> 00:03:20,660
the post table there's an ID there's a

00:03:19,050 --> 00:03:25,380
title there's an author there's a date

00:03:20,660 --> 00:03:26,970
post type etc and those aren't all very

00:03:25,380 --> 00:03:29,520
sensible things that you would need for

00:03:26,970 --> 00:03:31,380
a post or a custom post with that then

00:03:29,520 --> 00:03:33,600
any extra attributes that we want to

00:03:31,380 --> 00:03:36,000
define generally end up in the post meta

00:03:33,600 --> 00:03:38,790
table the other model is a taxonomy

00:03:36,000 --> 00:03:41,010
terms right in that relationship and the

00:03:38,790 --> 00:03:44,220
sole purpose of taxonomy terms is to

00:03:41,010 --> 00:03:47,610
provide an indexed way a fast way to

00:03:44,220 --> 00:03:49,890
find those posts right these are like

00:03:47,610 --> 00:03:51,300
super sensible defaults so as WordPress

00:03:49,890 --> 00:03:53,730
developed like this became like a nice

00:03:51,300 --> 00:03:59,600
way to say here's a general purpose CMS

00:03:53,730 --> 00:03:59,600
that you can extend however you need the

00:04:00,380 --> 00:04:03,780
the the nice part of this is that

00:04:02,580 --> 00:04:05,910
WordPress in addition to that then

00:04:03,780 --> 00:04:07,980
builds in all the api's you need so to

00:04:05,910 --> 00:04:10,200
register a CPT like you don't write a

00:04:07,980 --> 00:04:12,450
single line of SQL I mean general you

00:04:10,200 --> 00:04:15,120
just call one function and it's you know

00:04:12,450 --> 00:04:16,230
my handful of strings in an array but

00:04:15,120 --> 00:04:18,270
there are situations right where those

00:04:16,230 --> 00:04:19,770
defaults don't make sense and using

00:04:18,270 --> 00:04:21,060
alternative data stores can help us in

00:04:19,770 --> 00:04:26,190
those situations to keep sites

00:04:21,060 --> 00:04:27,419
performant so the three I keep saying

00:04:26,190 --> 00:04:28,860
three

00:04:27,419 --> 00:04:30,330
because something about off-by-one

00:04:28,860 --> 00:04:33,349
errors in programming or whatever right

00:04:30,330 --> 00:04:36,689
we're talking about three things MySQL

00:04:33,349 --> 00:04:38,569
which is structured query language it's

00:04:36,689 --> 00:04:40,710
a relational immediately consistent

00:04:38,569 --> 00:04:43,199
elasticsearch we're going to talk about

00:04:40,710 --> 00:04:47,069
a bit more it's really like a search

00:04:43,199 --> 00:04:48,469
database no SQL thing you just pass it

00:04:47,069 --> 00:04:54,120
documents it's eventually consistent

00:04:48,469 --> 00:04:57,240
memcache in Redis well you you probably

00:04:54,120 --> 00:04:59,279
like think of them as caching data

00:04:57,240 --> 00:05:00,569
stores and that's that's general we're

00:04:59,279 --> 00:05:01,770
gonna use them there's a benefit of

00:05:00,569 --> 00:05:06,800
those being available and we'll get into

00:05:01,770 --> 00:05:10,710
that as well so heading to the first one

00:05:06,800 --> 00:05:13,919
when I explain like how my or how a

00:05:10,710 --> 00:05:16,830
wordpress stores data to non devs right

00:05:13,919 --> 00:05:19,229
the easiest way to explain it is think

00:05:16,830 --> 00:05:20,969
of it like a giant Excel document with a

00:05:19,229 --> 00:05:23,400
bunch of tabs so the tabs being the

00:05:20,969 --> 00:05:25,199
different tables people like immediately

00:05:23,400 --> 00:05:28,800
understand itself it's it's nice and

00:05:25,199 --> 00:05:30,180
square I think MySQL spooks folks when

00:05:28,800 --> 00:05:31,349
you think about you know like well I've

00:05:30,180 --> 00:05:32,879
got these weird relationships and stuff

00:05:31,349 --> 00:05:34,770
happening but if you can paint it as

00:05:32,879 --> 00:05:36,180
each table is its own thing and they're

00:05:34,770 --> 00:05:38,069
related to each other it becomes a bit

00:05:36,180 --> 00:05:41,520
easier to digest so interacting with

00:05:38,069 --> 00:05:43,020
custom tables and views we already have

00:05:41,520 --> 00:05:45,810
the stuff to do that right it's going

00:05:43,020 --> 00:05:50,520
into the WP DB class so you can write

00:05:45,810 --> 00:05:53,399
direct SQL and do whatever you need to

00:05:50,520 --> 00:05:54,779
do so the positive for using a custom

00:05:53,399 --> 00:05:57,360
table or a view and I'll talk about

00:05:54,779 --> 00:05:59,789
those howdy how to create those a few

00:05:57,360 --> 00:06:01,259
more slides the positive up those is you

00:05:59,789 --> 00:06:02,879
know that you already have the tools you

00:06:01,259 --> 00:06:04,649
need like it's built in the WP core you

00:06:02,879 --> 00:06:08,099
can work with tables and views and

00:06:04,649 --> 00:06:10,949
custom tables and views the negative is

00:06:08,099 --> 00:06:12,149
it's still MySQL so you can still shoot

00:06:10,949 --> 00:06:14,969
yourself in the foot and write slow

00:06:12,149 --> 00:06:16,289
queries and and that kind of thing I

00:06:14,969 --> 00:06:18,180
want to quickly differentiate between

00:06:16,289 --> 00:06:19,139
custom tables and views I think custom

00:06:18,180 --> 00:06:21,509
tables is something we're all probably

00:06:19,139 --> 00:06:24,839
familiar with views might be something

00:06:21,509 --> 00:06:27,300
that we don't use often so if you think

00:06:24,839 --> 00:06:30,899
of a view as nothing more than a virtual

00:06:27,300 --> 00:06:32,819
table combining other tables right so

00:06:30,899 --> 00:06:34,919
instead of instead of like writing a

00:06:32,819 --> 00:06:37,259
massive query that's always always has

00:06:34,919 --> 00:06:39,240
the same sub query somewhere within it

00:06:37,259 --> 00:06:41,400
you write the sub query once it becomes

00:06:39,240 --> 00:06:44,070
a view in MySQL it's no more efficient

00:06:41,400 --> 00:06:47,210
do it that way but it keeps your code a

00:06:44,070 --> 00:06:52,199
bit easier to understand

00:06:47,210 --> 00:06:55,139
so elasticsearch it's evidence by the

00:06:52,199 --> 00:06:56,520
name it's it's great for search it's

00:06:55,139 --> 00:06:59,850
it's a document store so instead of

00:06:56,520 --> 00:07:02,100
passing like a an array or object that

00:06:59,850 --> 00:07:04,889
has like a keygen value you give it this

00:07:02,100 --> 00:07:08,000
you know crazy nested JSON object and

00:07:04,889 --> 00:07:09,840
you define some attributes and then

00:07:08,000 --> 00:07:11,430
elasticsearch does this thing where it

00:07:09,840 --> 00:07:13,229
ingests it and it sends it out to

00:07:11,430 --> 00:07:15,630
different nodes in elastic search

00:07:13,229 --> 00:07:18,960
because it all requires like more than

00:07:15,630 --> 00:07:20,970
one piece and eventually it's consistent

00:07:18,960 --> 00:07:22,229
I eventual consistency pops up a few

00:07:20,970 --> 00:07:25,020
times in here and what that means is

00:07:22,229 --> 00:07:27,449
when you put that document in there you

00:07:25,020 --> 00:07:28,590
might ask with a search for something

00:07:27,449 --> 00:07:30,330
that that document should return back

00:07:28,590 --> 00:07:31,949
with and you may or may not get it right

00:07:30,330 --> 00:07:33,960
away because elastic search has to

00:07:31,949 --> 00:07:35,760
replicate across all its nodes so the

00:07:33,960 --> 00:07:36,930
node you stuck it into might not be the

00:07:35,760 --> 00:07:39,000
node that you're directed to when you

00:07:36,930 --> 00:07:40,380
ask for it eventually it'll show up but

00:07:39,000 --> 00:07:42,410
it's it may not be an immediate thing

00:07:40,380 --> 00:07:46,380
that's a limitation of elastic search

00:07:42,410 --> 00:07:48,690
that the pending load you may never run

00:07:46,380 --> 00:07:51,210
into under high load is it's something

00:07:48,690 --> 00:07:56,669
you'll definitely run into and limits

00:07:51,210 --> 00:07:57,840
how we use yes great so Redis memcached

00:07:56,669 --> 00:08:01,349
this is the third one I'm going to group

00:07:57,840 --> 00:08:04,020
these two together a lot the first note

00:08:01,349 --> 00:08:05,520
in difference that really matters

00:08:04,020 --> 00:08:07,020
actually really well there's a couple

00:08:05,520 --> 00:08:10,560
notes the first one that really matters

00:08:07,020 --> 00:08:12,960
is memcached has a limit of like one

00:08:10,560 --> 00:08:16,979
megabyte of data per thing at stores and

00:08:12,960 --> 00:08:18,300
Redis is 5 500 does anybody know fine

00:08:16,979 --> 00:08:23,490
I'm pretty sure it's 500 megabytes is

00:08:18,300 --> 00:08:25,680
the limit so both of these things are a

00:08:23,490 --> 00:08:27,539
key value so you give it like a unique

00:08:25,680 --> 00:08:29,669
key you give it whatever string so

00:08:27,539 --> 00:08:31,380
serialized or JSON or whatever thing

00:08:29,669 --> 00:08:33,360
you're working with when you need it

00:08:31,380 --> 00:08:35,550
later on you say hey I want the value

00:08:33,360 --> 00:08:39,150
it's at this key it's fast because it's

00:08:35,550 --> 00:08:42,779
all in memory so it's it's a great way

00:08:39,150 --> 00:08:43,560
to work with things I will the other

00:08:42,779 --> 00:08:47,130
difference

00:08:43,560 --> 00:08:51,060
sorting onto reticent memcached Redis is

00:08:47,130 --> 00:08:52,589
not just a key value data system it does

00:08:51,060 --> 00:08:53,940
some cool lists and that kind of stuff

00:08:52,589 --> 00:08:55,200
so if you're working with a more complex

00:08:53,940 --> 00:08:57,360
data structure

00:08:55,200 --> 00:08:59,730
Redis might be a value this is it's like

00:08:57,360 --> 00:09:01,200
MySQL though most likely you have this

00:08:59,730 --> 00:09:03,420
available with your host one or the

00:09:01,200 --> 00:09:04,920
other which means most likely you can

00:09:03,420 --> 00:09:09,360
use some kind of composer package and

00:09:04,920 --> 00:09:10,470
interact with these things okay so we're

00:09:09,360 --> 00:09:12,360
now going to get into the part where we

00:09:10,470 --> 00:09:13,920
talk about like how can you actually use

00:09:12,360 --> 00:09:16,310
these things right so we're gonna

00:09:13,920 --> 00:09:18,540
pretend that we have client that says I

00:09:16,310 --> 00:09:21,510
have a geolocation requirement and

00:09:18,540 --> 00:09:23,970
that's like I have some stores right and

00:09:21,510 --> 00:09:25,680
I want to store the latitude longitude

00:09:23,970 --> 00:09:29,040
those stores we're not going to talk

00:09:25,680 --> 00:09:30,060
like how that actually happens we're

00:09:29,040 --> 00:09:32,460
just gonna assume that we've created the

00:09:30,060 --> 00:09:34,290
cpt we've created a meta box that

00:09:32,460 --> 00:09:36,720
captures this latitude and longitude

00:09:34,290 --> 00:09:41,430
either address and figures out after the

00:09:36,720 --> 00:09:48,500
fact or whatever so like the normal

00:09:41,430 --> 00:09:52,500
method we need to get this oh hold on i

00:09:48,500 --> 00:09:53,580
duplicated my notes cool so normal so if

00:09:52,500 --> 00:09:55,620
we save it this way right we put

00:09:53,580 --> 00:09:58,590
latitude and longitude in in post meta

00:09:55,620 --> 00:10:03,240
the the stinky part about post meta is

00:09:58,590 --> 00:10:05,430
that the meta value is set to long text

00:10:03,240 --> 00:10:06,690
so long text we're kind of getting in

00:10:05,430 --> 00:10:09,150
the weeds here I said we weren't I lied

00:10:06,690 --> 00:10:11,730
long text is the limit is 4 gigabytes of

00:10:09,150 --> 00:10:13,170
data so none of us in this room would do

00:10:11,730 --> 00:10:15,030
this but there's pot it's possible that

00:10:13,170 --> 00:10:16,770
there are some like plugins out there

00:10:15,030 --> 00:10:20,150
that would be abusing the post meta

00:10:16,770 --> 00:10:22,650
table and slapping tons of debt in there

00:10:20,150 --> 00:10:27,360
if you're using text fields for search

00:10:22,650 --> 00:10:29,040
in MySQL search queries are not

00:10:27,360 --> 00:10:31,410
performant because the server has to

00:10:29,040 --> 00:10:33,300
call each object individually and scan

00:10:31,410 --> 00:10:35,280
through the entire thing right whereas

00:10:33,300 --> 00:10:36,840
if you're using like integers or in the

00:10:35,280 --> 00:10:39,900
case of latitude longitude you define it

00:10:36,840 --> 00:10:42,270
as a float it's super fast for MySQL to

00:10:39,900 --> 00:10:47,040
zero in on this so long in short like

00:10:42,270 --> 00:10:49,260
any lookup you do in post meta the meta

00:10:47,040 --> 00:10:50,580
value has the potential to be slow I'm

00:10:49,260 --> 00:10:58,620
not gonna say it is slow has the

00:10:50,580 --> 00:11:00,720
potential to be slow so this is this is

00:10:58,620 --> 00:11:02,850
like the the code this is if you were

00:11:00,720 --> 00:11:05,670
doing geolocation right this is the

00:11:02,850 --> 00:11:07,680
formula that you would pass in to figure

00:11:05,670 --> 00:11:08,910
out the distance and miles from the

00:11:07,680 --> 00:11:10,560
latitude and longitude that was

00:11:08,910 --> 00:11:13,590
to you by the user however the user

00:11:10,560 --> 00:11:15,510
passes that in this would give you like

00:11:13,590 --> 00:11:21,420
20 results where the distance is less

00:11:15,510 --> 00:11:22,320
than 25 miles so I don't this Roy

00:11:21,420 --> 00:11:26,490
doesn't matter I said to get in your

00:11:22,320 --> 00:11:29,610
head that you're looking at that whole

00:11:26,490 --> 00:11:31,920
sub thing down there right where you're

00:11:29,610 --> 00:11:34,700
doing like cosine and all sine and

00:11:31,920 --> 00:11:37,140
radians and all sorts of math stuff that

00:11:34,700 --> 00:11:38,940
maybe like computer science folks know I

00:11:37,140 --> 00:11:40,320
don't I don't know it's like magic right

00:11:38,940 --> 00:11:43,590
but it gives you the distance no matter

00:11:40,320 --> 00:11:46,380
what latitude and longitude is for

00:11:43,590 --> 00:11:49,590
whatever's queried so if we were gonna

00:11:46,380 --> 00:11:54,750
do this right with the with the the

00:11:49,590 --> 00:11:56,370
default wordpress post meta table you

00:11:54,750 --> 00:11:58,800
would want to figure out a way to create

00:11:56,370 --> 00:12:02,730
a query that would put that latitude and

00:11:58,800 --> 00:12:04,710
longitude in line with the ID it's gonna

00:12:02,730 --> 00:12:06,330
be a gnarly looking thing you're

00:12:04,710 --> 00:12:08,400
probably have a couple left joins or a

00:12:06,330 --> 00:12:09,570
couple sub queries and and at the end of

00:12:08,400 --> 00:12:11,730
the day you've written something that's

00:12:09,570 --> 00:12:13,230
not going to be continuously performant

00:12:11,730 --> 00:12:16,020
especially as you continue to add things

00:12:13,230 --> 00:12:20,340
to post meta so the first option is we

00:12:16,020 --> 00:12:22,980
create a custom table right the benefit

00:12:20,340 --> 00:12:24,570
is that when you save you can say all I

00:12:22,980 --> 00:12:26,820
need is the ID and the latitude and

00:12:24,570 --> 00:12:29,730
longitude that becomes a sub-query and

00:12:26,820 --> 00:12:31,680
then you can pass to your WP query on

00:12:29,730 --> 00:12:35,340
posts in argh the results of that sub

00:12:31,680 --> 00:12:37,710
query so just three columns ID latitude

00:12:35,340 --> 00:12:39,810
longitude and it makes that that creamy

00:12:37,710 --> 00:12:42,270
boat that two screens ago a lot faster

00:12:39,810 --> 00:12:44,880
if you haven't created a custom table

00:12:42,270 --> 00:12:47,910
before the function you're going to want

00:12:44,880 --> 00:12:49,770
to look at it's called DB Delta first

00:12:47,910 --> 00:12:51,360
check that the table exists if not you

00:12:49,770 --> 00:12:52,770
can create it and and off you go it's

00:12:51,360 --> 00:12:55,440
that simple to have a custom table

00:12:52,770 --> 00:12:56,640
available so in this case we would

00:12:55,440 --> 00:12:59,010
assume that on post save we're just

00:12:56,640 --> 00:13:02,040
gonna stick that into the the latitude

00:12:59,010 --> 00:13:04,110
and longitude into the custom table so

00:13:02,040 --> 00:13:06,780
the next alternative continuing that

00:13:04,110 --> 00:13:09,990
same same path is if we were to create a

00:13:06,780 --> 00:13:11,430
view this is a bad idea but like just

00:13:09,990 --> 00:13:13,170
for the point of conversation we'll

00:13:11,430 --> 00:13:15,630
assume we did that let's assume we

00:13:13,170 --> 00:13:17,580
created a view using the query from just

00:13:15,630 --> 00:13:18,870
standard post meta that now looks like

00:13:17,580 --> 00:13:22,579
the table we defined in the previous

00:13:18,870 --> 00:13:24,889
screen the problem here is all

00:13:22,579 --> 00:13:27,410
we've done is hide a not perform a query

00:13:24,889 --> 00:13:29,329
in a view to make ourselves feel better

00:13:27,410 --> 00:13:31,009
as a dev looking at the simple to read

00:13:29,329 --> 00:13:36,559
data versus what was there previously in

00:13:31,009 --> 00:13:39,889
post meta it's it's a yeah you could do

00:13:36,559 --> 00:13:42,559
it there's just no good reason to so

00:13:39,889 --> 00:13:44,259
elasticsearch this is this is like like

00:13:42,559 --> 00:13:46,129
the right solution in this case

00:13:44,259 --> 00:13:49,389
elasticsearch has this concept of geo

00:13:46,129 --> 00:13:51,470
points so if you're using a plug-in

00:13:49,389 --> 00:13:53,569
topics later elastic press is kind of

00:13:51,470 --> 00:13:55,999
like the de facto standard or if you've

00:13:53,569 --> 00:13:59,329
rolled your own way of ingesting posts

00:13:55,999 --> 00:14:00,649
into elasticsearch you can you can

00:13:59,329 --> 00:14:03,889
assign the geo point based on latitude

00:14:00,649 --> 00:14:07,699
and longitude and so on subsequent

00:14:03,889 --> 00:14:09,889
searches after es has indexed that it's

00:14:07,699 --> 00:14:12,619
going to be like an immediate search es

00:14:09,889 --> 00:14:15,319
general responds in like you know dozen

00:14:12,619 --> 00:14:17,749
milliseconds you know for most most

00:14:15,319 --> 00:14:19,549
sensible stuff so this is going to be

00:14:17,749 --> 00:14:22,160
like amazingly fast it's gonna feel a

00:14:19,549 --> 00:14:23,569
bit like magic especially if you're

00:14:22,160 --> 00:14:27,649
coming to it from like a post meta

00:14:23,569 --> 00:14:29,899
lookup the last one continuing so like

00:14:27,649 --> 00:14:31,749
the rightest memcached there's like not

00:14:29,899 --> 00:14:34,279
a good benefit of using a key value

00:14:31,749 --> 00:14:36,139
situation here because you're gonna end

00:14:34,279 --> 00:14:39,350
up putting so much data into register

00:14:36,139 --> 00:14:42,919
memcached and you run the possibility of

00:14:39,350 --> 00:14:45,139
evicting data that you do need a notice

00:14:42,919 --> 00:14:46,850
or memcached so I'm only including this

00:14:45,139 --> 00:14:48,829
for a complete leanness in the four or

00:14:46,850 --> 00:14:52,549
the three that we're talking through I

00:14:48,829 --> 00:14:56,540
will say one caveat to this is if you

00:14:52,549 --> 00:14:58,579
have only a few few locations and you're

00:14:56,540 --> 00:15:01,639
you're using this location information

00:14:58,579 --> 00:15:05,029
like as a JSON object at this point you

00:15:01,639 --> 00:15:06,619
could just use Redis as like what it's

00:15:05,029 --> 00:15:07,759
built for as an object counter what we

00:15:06,619 --> 00:15:09,739
use a foreign word press generally is an

00:15:07,759 --> 00:15:11,179
object cache and just dump that string

00:15:09,739 --> 00:15:12,679
in there and pass it to the front-end

00:15:11,179 --> 00:15:15,079
without having to do any kind of query

00:15:12,679 --> 00:15:19,579
lookup except for getting one value from

00:15:15,079 --> 00:15:26,299
from Redis so that's that's the first

00:15:19,579 --> 00:15:27,470
like example sample the next one this is

00:15:26,299 --> 00:15:29,689
the one that excites me the most right

00:15:27,470 --> 00:15:31,610
so the task Berner like let's just zoom

00:15:29,689 --> 00:15:33,139
the client comes and says I don't know

00:15:31,610 --> 00:15:36,529
my sites slow when people check out

00:15:33,139 --> 00:15:39,109
right that's like a very

00:15:36,529 --> 00:15:40,779
like broad loaded like well there's

00:15:39,109 --> 00:15:43,909
probably a billion things we can do

00:15:40,779 --> 00:15:45,829
here's one that's like a simple win that

00:15:43,909 --> 00:15:48,169
I've started doing on most sites so we

00:15:45,829 --> 00:15:49,309
implement the idea of a task corner I

00:15:48,169 --> 00:15:52,249
want you to think about like when you go

00:15:49,309 --> 00:15:53,509
in WooCommerce and you checkout there's

00:15:52,249 --> 00:15:55,729
three emails that are sent right

00:15:53,509 --> 00:15:59,239
there's like the purchase confirmation

00:15:55,729 --> 00:16:01,609
receipt and then the email to the site

00:15:59,239 --> 00:16:05,209
admin every single one of those calls WP

00:16:01,609 --> 00:16:06,859
mail generally every single one of those

00:16:05,209 --> 00:16:09,049
is going to have to connect into an

00:16:06,859 --> 00:16:11,739
external service and send the message so

00:16:09,049 --> 00:16:14,119
you're making three external requests

00:16:11,739 --> 00:16:15,829
that when the person clicks check out

00:16:14,119 --> 00:16:20,089
like all that has to happen before they

00:16:15,829 --> 00:16:22,189
see the checkout page but for humans

00:16:20,089 --> 00:16:23,869
like there's no difference you know it's

00:16:22,189 --> 00:16:25,399
if I get an email immediately when I

00:16:23,869 --> 00:16:27,319
click checkout or if it shows up in my

00:16:25,399 --> 00:16:29,869
inbox five or ten or fifteen seconds

00:16:27,319 --> 00:16:32,239
later like it it's not part of the

00:16:29,869 --> 00:16:34,609
request in browser it has not diminished

00:16:32,239 --> 00:16:36,559
my browser experience so the concept

00:16:34,609 --> 00:16:38,149
here is we take the OWP mail and instead

00:16:36,559 --> 00:16:40,189
of sending it immediately let's drop

00:16:38,149 --> 00:16:43,129
into a queue and then process that task

00:16:40,189 --> 00:16:47,679
later on processing that task later on

00:16:43,129 --> 00:16:50,720
we'll get into generally roughly but oh

00:16:47,679 --> 00:16:53,749
I tend to jump ahead and slide sometimes

00:16:50,720 --> 00:16:56,779
uhm yeah so serving with an action and

00:16:53,749 --> 00:16:59,329
related arguments and and then you can

00:16:56,779 --> 00:17:01,939
either run it with WP cron system cron

00:16:59,329 --> 00:17:04,009
or there are systems built specifically

00:17:01,939 --> 00:17:06,379
for this things like gear man or

00:17:04,009 --> 00:17:08,689
TaskRabbit that you could say here are

00:17:06,379 --> 00:17:11,629
things I need to do and it will handle

00:17:08,689 --> 00:17:14,149
that here's the neat thing WordPress has

00:17:11,629 --> 00:17:16,129
this built in so if you've used WP

00:17:14,149 --> 00:17:18,259
schedule single event and pass like

00:17:16,129 --> 00:17:21,799
something that's slow to that you've

00:17:18,259 --> 00:17:24,529
been using W cron as a task runner the

00:17:21,799 --> 00:17:27,039
the big gotcha with using WP as its own

00:17:24,529 --> 00:17:31,759
task runner is that WP stores all cron

00:17:27,039 --> 00:17:32,929
in like one giant serialized blob so if

00:17:31,759 --> 00:17:35,809
you have like a bunch of repetitive

00:17:32,929 --> 00:17:37,850
tasks and maybe you're importing a CSV

00:17:35,809 --> 00:17:39,740
and you break every line in the CSV into

00:17:37,850 --> 00:17:42,080
an individual task which is one of the

00:17:39,740 --> 00:17:44,169
things I commonly use queues for now

00:17:42,080 --> 00:17:48,230
you've just made this this cron

00:17:44,169 --> 00:17:50,360
serialized thing like huge and the same

00:17:48,230 --> 00:17:53,210
deal in the options table it's long text

00:17:50,360 --> 00:17:56,299
so we could be one of those like abusing

00:17:53,210 --> 00:17:59,059
the long text column so the simple thing

00:17:56,299 --> 00:18:04,100
to do is say let's create a custom table

00:17:59,059 --> 00:18:06,250
and let's drop the tasks in there mark

00:18:04,100 --> 00:18:09,019
must complete or remove them pending

00:18:06,250 --> 00:18:10,789
pending what you need to do

00:18:09,019 --> 00:18:12,409
I think after like Norcross this

00:18:10,789 --> 00:18:14,260
conversation on GDP are maybe just

00:18:12,409 --> 00:18:16,610
delete them right

00:18:14,260 --> 00:18:18,710
yeah so this is simple to create the

00:18:16,610 --> 00:18:20,000
table instead of running the task

00:18:18,710 --> 00:18:22,370
immediately put it in there and then

00:18:20,000 --> 00:18:24,889
figure out what your async thing is that

00:18:22,370 --> 00:18:26,269
consumes those tasks and runs them don't

00:18:24,889 --> 00:18:29,720
use elasticsearch for this because

00:18:26,269 --> 00:18:31,130
elasticsearch has that it's eventually

00:18:29,720 --> 00:18:32,029
consistent but if you're sticking stuff

00:18:31,130 --> 00:18:35,179
in there that you want to process

00:18:32,029 --> 00:18:37,100
quickly it's like that's counter

00:18:35,179 --> 00:18:43,490
intuitive or counterproductive or ten or

00:18:37,100 --> 00:18:46,070
something so with Redis or memcached you

00:18:43,490 --> 00:18:47,809
can handle this a couple ways for both

00:18:46,070 --> 00:18:49,519
of them you could say let's drop a key

00:18:47,809 --> 00:18:51,919
in with like some kind of unique ID for

00:18:49,519 --> 00:18:55,639
the task and then let's create another

00:18:51,919 --> 00:18:57,320
key value pair that has like whatever

00:18:55,639 --> 00:18:58,880
the key is for list of tasks and then a

00:18:57,320 --> 00:19:01,610
string or serialize something that says

00:18:58,880 --> 00:19:04,279
hey here the tasks we need to run the

00:19:01,610 --> 00:19:05,720
the flip is on Redis Redis has the

00:19:04,279 --> 00:19:07,340
concept of Lists so you can actually

00:19:05,720 --> 00:19:08,929
accomplish this with just one key and

00:19:07,340 --> 00:19:11,779
value you can add things to the list and

00:19:08,929 --> 00:19:13,760
pull it off and Redis is super great

00:19:11,779 --> 00:19:15,769
because now you've you've removed one

00:19:13,760 --> 00:19:17,179
requirement on yourself for like well I

00:19:15,769 --> 00:19:18,260
took this thing I need to mark that I've

00:19:17,179 --> 00:19:19,429
taken this thing Brett it says well

00:19:18,260 --> 00:19:21,620
you've got this thing I'd like popped

00:19:19,429 --> 00:19:23,000
off the list it's already gone which

00:19:21,620 --> 00:19:28,250
means it's on you to return it if for

00:19:23,000 --> 00:19:30,769
whatever reason the task fails yeah so

00:19:28,250 --> 00:19:33,380
that's it on on task runners that's a

00:19:30,769 --> 00:19:34,880
that's like a quick way to recover a lot

00:19:33,380 --> 00:19:39,320
of time the last one I want to talk

00:19:34,880 --> 00:19:41,840
about like real world example is content

00:19:39,320 --> 00:19:45,350
syndication and this is one of those

00:19:41,840 --> 00:19:48,529
things I've done I don't know three or

00:19:45,350 --> 00:19:49,789
four different ways and it really comes

00:19:48,529 --> 00:19:51,380
down to like what the client means when

00:19:49,789 --> 00:19:53,630
they say excuse me when they say content

00:19:51,380 --> 00:19:55,490
syndication right there's a lot of

00:19:53,630 --> 00:19:58,520
things to consider like from an SEO

00:19:55,490 --> 00:20:01,490
perspective like duplicate content

00:19:58,520 --> 00:20:03,080
obviously like we're not going to dig

00:20:01,490 --> 00:20:04,130
into that here but but that's that's a

00:20:03,080 --> 00:20:06,410
piece of it

00:20:04,130 --> 00:20:07,490
if your syndicating content and what I

00:20:06,410 --> 00:20:09,230
mean by that is taking something that's

00:20:07,490 --> 00:20:11,330
posted on one site and using it on

00:20:09,230 --> 00:20:13,940
multiple other sites very much a a

00:20:11,330 --> 00:20:15,440
hub-and-spoke model you could you could

00:20:13,940 --> 00:20:18,470
easily just say on all the spoke sites

00:20:15,440 --> 00:20:24,289
let's just consume like an RSS feed or

00:20:18,470 --> 00:20:25,400
something but let's let's let's see if

00:20:24,289 --> 00:20:27,950
there's like some better options than

00:20:25,400 --> 00:20:31,160
that that don't require us to make some

00:20:27,950 --> 00:20:33,260
a remote request and whatnot the first

00:20:31,160 --> 00:20:34,100
one is on a smaller let's say it's a

00:20:33,260 --> 00:20:36,740
multi-site network on a smaller

00:20:34,100 --> 00:20:40,220
multi-site network you could on post

00:20:36,740 --> 00:20:43,100
save on the hub go ahead and switch to

00:20:40,220 --> 00:20:45,650
blog and insert it on all 15 blogs or

00:20:43,100 --> 00:20:49,610
whatever the number is the negative here

00:20:45,650 --> 00:20:51,970
is switched to blog is is slow probably

00:20:49,610 --> 00:20:54,320
doesn't matter so much in wp-admin but

00:20:51,970 --> 00:20:56,570
you run the risk of hitting timeouts

00:20:54,320 --> 00:20:59,870
pretty quickly if you're running any any

00:20:56,570 --> 00:21:01,280
real quantity of sites you could also

00:20:59,870 --> 00:21:03,890
didn't say well let's just use direct

00:21:01,280 --> 00:21:05,419
SQL then so I know what I inserted into

00:21:03,890 --> 00:21:08,030
this primary blog let's go ahead and

00:21:05,419 --> 00:21:10,400
take it and and then I know the blog ID

00:21:08,030 --> 00:21:11,929
that I want to insert it into so I'll

00:21:10,400 --> 00:21:15,260
just change the tables and go from there

00:21:11,929 --> 00:21:17,990
the the thing we lose there is all sorts

00:21:15,260 --> 00:21:20,419
of great WP core goodness right like we

00:21:17,990 --> 00:21:21,530
don't know where we are in terms our in

00:21:20,419 --> 00:21:23,030
tax on account so we need to stick that

00:21:21,530 --> 00:21:24,860
stuff in there but then we also need to

00:21:23,030 --> 00:21:27,020
get the result and then map turn to

00:21:24,860 --> 00:21:28,970
taxonomy we need to map the post meta to

00:21:27,020 --> 00:21:31,659
the post all that stuff that just

00:21:28,970 --> 00:21:34,250
happens automatically using the BP core

00:21:31,659 --> 00:21:38,450
methods we miss out on by doing direct

00:21:34,250 --> 00:21:40,220
SQL so content syndication with MySQL

00:21:38,450 --> 00:21:41,799
like you can do it but you're creating a

00:21:40,220 --> 00:21:46,130
lot of hurdles

00:21:41,799 --> 00:21:49,669
so this is where views really shines and

00:21:46,130 --> 00:21:51,380
this is like my favorite solution for

00:21:49,669 --> 00:21:52,539
syndication it only works if syndication

00:21:51,380 --> 00:21:54,620
requirement is hub-and-spoke

00:21:52,539 --> 00:21:57,289
because you want to limit the amount of

00:21:54,620 --> 00:22:00,590
tables you're working with but on your

00:21:57,289 --> 00:22:04,309
spoke sites instead of using posts or

00:22:00,590 --> 00:22:07,400
post meta terms turn meta etc create a

00:22:04,309 --> 00:22:10,220
view and then hook to the query and

00:22:07,400 --> 00:22:12,260
replace the table name and the view will

00:22:10,220 --> 00:22:15,640
be a combination of the primary site and

00:22:12,260 --> 00:22:17,480
the the hub site and the the spoke site

00:22:15,640 --> 00:22:18,740
combined them

00:22:17,480 --> 00:22:20,929
only like potential issue here is that

00:22:18,740 --> 00:22:24,200
you need to make sure that you set the

00:22:20,929 --> 00:22:25,370
auto increment on the hub sites on the

00:22:24,200 --> 00:22:27,230
ID high enough so that you're not going

00:22:25,370 --> 00:22:28,850
to eventually create a conflict but at

00:22:27,230 --> 00:22:32,870
that point then you have effectively

00:22:28,850 --> 00:22:34,309
merged two sites in multi-site it is it

00:22:32,870 --> 00:22:40,970
is an increase in one query but it's

00:22:34,309 --> 00:22:45,559
still very performant so using elastic

00:22:40,970 --> 00:22:47,750
search this is a good solution and I see

00:22:45,559 --> 00:22:49,010
this a lot of times when we need to

00:22:47,750 --> 00:22:50,600
syndicate stuff and we we're not doing

00:22:49,010 --> 00:22:52,940
within multi-site we need to syndicate

00:22:50,600 --> 00:22:55,280
from one WordPress site to a few others

00:22:52,940 --> 00:22:57,620
but there's a lot of business logic into

00:22:55,280 --> 00:22:58,730
what needs to syndicate in this case you

00:22:57,620 --> 00:23:00,290
can also get rid of the concept of

00:22:58,730 --> 00:23:03,320
hub-and-spoke like you can set some

00:23:00,290 --> 00:23:04,940
parameters in there so that it doesn't

00:23:03,320 --> 00:23:07,549
really matter whose hub and who spoke

00:23:04,940 --> 00:23:10,309
you can share content pretty pretty

00:23:07,549 --> 00:23:12,290
easily between sites the the negative to

00:23:10,309 --> 00:23:14,240
this obviously is if you have a bunch of

00:23:12,290 --> 00:23:18,020
sites in use and they're all sticking

00:23:14,240 --> 00:23:19,250
data into es es is gonna be thrashing so

00:23:18,020 --> 00:23:22,429
you're gonna eventually get to

00:23:19,250 --> 00:23:24,260
consistency but on the sites that you're

00:23:22,429 --> 00:23:25,730
pulling from elasticsearch you need to

00:23:24,260 --> 00:23:29,510
know that just because I pulled

00:23:25,730 --> 00:23:30,830
something this time you know that the

00:23:29,510 --> 00:23:33,020
absence of it next time doesn't

00:23:30,830 --> 00:23:33,440
necessarily mean it's deleted so there's

00:23:33,020 --> 00:23:37,120
that

00:23:33,440 --> 00:23:43,669
that weird consistency thing again on

00:23:37,120 --> 00:23:45,890
elasticsearch okay so implementation

00:23:43,669 --> 00:23:47,510
notes elastic press like I said is kind

00:23:45,890 --> 00:23:50,960
of like the de facto standard if you're

00:23:47,510 --> 00:23:52,190
working with elasticsearch but but if

00:23:50,960 --> 00:23:56,059
you're doing something more complex you

00:23:52,190 --> 00:23:57,799
have more complex data models it's it's

00:23:56,059 --> 00:24:00,260
not hard to work directly with es

00:23:57,799 --> 00:24:02,780
there's some cool composer packages

00:24:00,260 --> 00:24:03,710
classic surf has one and it's it's not

00:24:02,780 --> 00:24:07,309
difficult to create the array

00:24:03,710 --> 00:24:11,270
elasticsearch the package handles the

00:24:07,309 --> 00:24:14,960
logic of then passing it to es Preta

00:24:11,270 --> 00:24:16,070
sand memcache PHP are also the other two

00:24:14,960 --> 00:24:22,610
composer packages you would use to

00:24:16,070 --> 00:24:25,220
interact with reticent memcached so that

00:24:22,610 --> 00:24:27,410
is it well alright let's get to the

00:24:25,220 --> 00:24:28,480
after-party all

00:24:27,410 --> 00:24:31,650
you

00:24:28,480 --> 00:24:31,650

YouTube URL: https://www.youtube.com/watch?v=pBK5S1LMEPc


