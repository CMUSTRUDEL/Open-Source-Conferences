Title: Chris Wiegman: Automating WordPress Development
Publication date: 2019-09-08
Playlist: WordCamp Atlanta 2019
Description: 
	Whether you manage a large site or a small one, if you write your own code one of the most tedious parts can be getting started. This talk will show you techniques such as scaffolding tools and others to get you a fully functional WordPress plugin with unit tests, continuous integration, a local development environment and more with just a single command. It will help you stop rebuilding the wheel so you can focus on the functionality you need and can be extended to themes, libraries or whatever else you need.

WPTV link: https://wordpress.tv/2019/06/25/chris-wiegman-automating-wordpress-development/
Captions: 
	00:00:02,689 --> 00:00:05,819
except River go ahead and get started

00:00:04,470 --> 00:00:07,710
with automating WordPress development

00:00:05,819 --> 00:00:09,960
slides are already online so if you want

00:00:07,710 --> 00:00:11,880
to follow along its it there's not a lot

00:00:09,960 --> 00:00:13,230
of code in these it's mostly links so

00:00:11,880 --> 00:00:14,910
it's not something you probably need to

00:00:13,230 --> 00:00:16,529
follow along with but feel free to if

00:00:14,910 --> 00:00:18,630
you need to if you'd like to

00:00:16,529 --> 00:00:19,949
so as bill was saying my name is Chris

00:00:18,630 --> 00:00:22,230
Whitman I'm a senior software engineer

00:00:19,949 --> 00:00:25,230
at WP engine where I'm working on local

00:00:22,230 --> 00:00:27,119
development tools so helping developers

00:00:25,230 --> 00:00:29,760
automate their tools quite honestly I

00:00:27,119 --> 00:00:32,009
was I at one point I built better WP

00:00:29,760 --> 00:00:33,600
security which is now I theme security

00:00:32,009 --> 00:00:34,980
and owned by liquid web I had sold it

00:00:33,600 --> 00:00:37,230
back to them about six years ago

00:00:34,980 --> 00:00:39,570
I've taught computer science at st.

00:00:37,230 --> 00:00:41,969
Edwards University I speak on privacy

00:00:39,570 --> 00:00:45,360
everywhere from WordCamp you tricked

00:00:41,969 --> 00:00:47,760
those word camps in San Diego I Mexican

00:00:45,360 --> 00:00:48,930
X airline captain and do a lot of work

00:00:47,760 --> 00:00:50,640
with histories I've been around this

00:00:48,930 --> 00:00:51,539
WordPress stuff from a whole lot of

00:00:50,640 --> 00:00:53,670
different angles

00:00:51,539 --> 00:00:55,170
mostly education with a little bit of a

00:00:53,670 --> 00:00:57,120
VA ssin sprinkled in and a whole lot of

00:00:55,170 --> 00:00:58,739
security and privacy but a lot of

00:00:57,120 --> 00:01:00,840
enterprise type work and those types of

00:00:58,739 --> 00:01:03,719
environments which brings me a lot of

00:01:00,840 --> 00:01:05,519
this automation stuff as we get going

00:01:03,719 --> 00:01:07,140
one thing to keep in mind with WordPress

00:01:05,519 --> 00:01:08,640
automation is good so long as you know

00:01:07,140 --> 00:01:09,360
exactly where to put the Machine and

00:01:08,640 --> 00:01:11,159
WordPress

00:01:09,360 --> 00:01:14,040
kind of exemplifies this there's a lot

00:01:11,159 --> 00:01:16,320
of machines going in WordPress from the

00:01:14,040 --> 00:01:17,939
time we download the site to when we're

00:01:16,320 --> 00:01:20,490
developing what we're whatever we're

00:01:17,939 --> 00:01:23,090
working on the testing that project

00:01:20,490 --> 00:01:25,979
locally debugging that project

00:01:23,090 --> 00:01:27,180
stakeholder review and deploying the

00:01:25,979 --> 00:01:28,890
project that's a whole lot of places

00:01:27,180 --> 00:01:30,869
that we could possibly put these

00:01:28,890 --> 00:01:32,250
machines with these these processes to

00:01:30,869 --> 00:01:34,890
help us automate what we're doing in

00:01:32,250 --> 00:01:36,540
WordPress this talk is gonna focus very

00:01:34,890 --> 00:01:37,890
heavily on the plug-in side of things

00:01:36,540 --> 00:01:39,360
but everything should be applicable if

00:01:37,890 --> 00:01:41,970
you're building a theme or a site as

00:01:39,360 --> 00:01:43,229
well does oom in in on some of this a

00:01:41,970 --> 00:01:46,350
little bit more let's let's start with

00:01:43,229 --> 00:01:49,380
the first machine location downloading

00:01:46,350 --> 00:01:51,210
existing work probably looks something

00:01:49,380 --> 00:01:54,540
like this your workflow set up a local

00:01:51,210 --> 00:01:56,909
server login to your remote server copy

00:01:54,540 --> 00:01:58,649
files log in the database maybe you have

00:01:56,909 --> 00:01:59,850
a plugin that you've already automated

00:01:58,649 --> 00:02:02,340
some of this maybe you have a backup

00:01:59,850 --> 00:02:04,649
buddy or migrate DB Pro that automates

00:02:02,340 --> 00:02:06,270
your database transfer for you if not

00:02:04,649 --> 00:02:07,979
maybe have something like navikev which

00:02:06,270 --> 00:02:09,479
is a great database tool where you can

00:02:07,979 --> 00:02:11,069
drag and drop your database from one

00:02:09,479 --> 00:02:12,599
server to another but you're probably

00:02:11,069 --> 00:02:13,680
already have automated some of these

00:02:12,599 --> 00:02:15,540
steps here

00:02:13,680 --> 00:02:16,829
but these are very common steps and

00:02:15,540 --> 00:02:18,329
we're still doing if you work on a

00:02:16,829 --> 00:02:20,310
wordpress site you're doing some

00:02:18,329 --> 00:02:22,110
function of these some function of this

00:02:20,310 --> 00:02:25,170
workflow some version of this workflow

00:02:22,110 --> 00:02:29,129
already how many folks have automated at

00:02:25,170 --> 00:02:32,640
least part of this ok about a quarter of

00:02:29,129 --> 00:02:34,680
the room it's the easiest it's probably

00:02:32,640 --> 00:02:37,859
the most traditional and most of our

00:02:34,680 --> 00:02:39,569
tools kind of do this for us by default

00:02:37,859 --> 00:02:41,640
for instance if you want to copy the

00:02:39,569 --> 00:02:43,220
files to copy a modern site the easiest

00:02:41,640 --> 00:02:45,780
way to do this is to use a modern tool

00:02:43,220 --> 00:02:48,389
local by flywheels by far the most

00:02:45,780 --> 00:02:50,190
popular at the end of the month I get to

00:02:48,389 --> 00:02:51,720
finally say this where we're like WP

00:02:50,190 --> 00:02:53,040
engines launching dev kit which will be

00:02:51,720 --> 00:02:55,889
our own tool which are allow you to

00:02:53,040 --> 00:02:57,720
clone copy do all the automation itself

00:02:55,889 --> 00:02:59,099
both of these tools allow you to

00:02:57,720 --> 00:03:01,260
basically press a button or run a

00:02:59,099 --> 00:03:02,909
command in your terminal take the whole

00:03:01,260 --> 00:03:05,010
site update your database does

00:03:02,909 --> 00:03:06,480
everything for you now if you're not

00:03:05,010 --> 00:03:08,220
with local but or if you're not with

00:03:06,480 --> 00:03:11,040
flywheel if you're not with us Pantheon

00:03:08,220 --> 00:03:13,019
has a solution some of the other hosts

00:03:11,040 --> 00:03:14,310
do I I love to speak for names of what

00:03:13,019 --> 00:03:15,959
all the hosts are but there's so many

00:03:14,310 --> 00:03:18,419
hosts these days all of us seem to be

00:03:15,959 --> 00:03:20,879
working on similar tools check with your

00:03:18,419 --> 00:03:22,319
host and see what they have maybe you

00:03:20,879 --> 00:03:24,690
just have a script to do this if you

00:03:22,319 --> 00:03:26,519
work for a university I worked for a

00:03:24,690 --> 00:03:28,650
University of Florida last where we had

00:03:26,519 --> 00:03:32,040
two monolithic sites one of the

00:03:28,650 --> 00:03:33,329
databases was somewhere around 28 gig so

00:03:32,040 --> 00:03:35,280
we had scripts that would allow us to

00:03:33,329 --> 00:03:37,949
pull that down and run the thing just

00:03:35,280 --> 00:03:39,870
without too much work yeah otherwise a

00:03:37,949 --> 00:03:41,250
new developer that's a two-week process

00:03:39,870 --> 00:03:43,530
just getting them to copy the database

00:03:41,250 --> 00:03:46,349
so it automation comes in really handy

00:03:43,530 --> 00:03:47,970
on work that we had to write ourselves

00:03:46,349 --> 00:03:49,829
we can't go to WP ancients they give us

00:03:47,970 --> 00:03:52,440
a database because it's a university we

00:03:49,829 --> 00:03:54,269
hosted it ourselves so there was a lot

00:03:52,440 --> 00:03:55,949
of scripts he wrote to do that but the

00:03:54,269 --> 00:03:57,599
trick here is at some level at some

00:03:55,949 --> 00:03:59,790
level of that initial process whether

00:03:57,599 --> 00:04:01,199
it's just the database or just the files

00:03:59,790 --> 00:04:04,079
you're looking for something that

00:04:01,199 --> 00:04:05,639
there's a one-click set up that reduces

00:04:04,079 --> 00:04:07,650
external connections how many passwords

00:04:05,639 --> 00:04:09,329
do you need if you've worked with a

00:04:07,650 --> 00:04:10,769
client how many times have you gone back

00:04:09,329 --> 00:04:13,440
and forth and say oh I need this

00:04:10,769 --> 00:04:15,810
password oh I need the name cheap

00:04:13,440 --> 00:04:17,220
password I need the host password oh you

00:04:15,810 --> 00:04:18,690
didn't give me this password I need that

00:04:17,220 --> 00:04:21,030
now three weeks later maybe you're

00:04:18,690 --> 00:04:24,270
getting into the site an idea these

00:04:21,030 --> 00:04:25,889
tools reduce that and hopefully at the

00:04:24,270 --> 00:04:27,060
end reduce your stress level they're

00:04:25,889 --> 00:04:28,530
allowing you to develop

00:04:27,060 --> 00:04:30,180
that's sight quicker more efficiently

00:04:28,530 --> 00:04:32,220
and without that contact by to and from

00:04:30,180 --> 00:04:33,930
the client that makes you feel bad oh I

00:04:32,220 --> 00:04:36,330
forgot to ask you for this last time and

00:04:33,930 --> 00:04:37,919
that's really how the modern way that

00:04:36,330 --> 00:04:39,030
we're dealing with pulling these sites

00:04:37,919 --> 00:04:42,330
down and setting up our local

00:04:39,030 --> 00:04:44,250
environments you can't I mean most folks

00:04:42,330 --> 00:04:46,950
in here still you still might have ma'am

00:04:44,250 --> 00:04:48,180
you maybe you're using xampp maybe

00:04:46,950 --> 00:04:49,710
you're using something else these are

00:04:48,180 --> 00:04:51,780
all great tools and there's plenty of

00:04:49,710 --> 00:04:54,330
ways to automate them as well but the

00:04:51,780 --> 00:04:56,690
easiest way is to simply just use your

00:04:54,330 --> 00:04:58,500
hosts tool if they provide it for you

00:04:56,690 --> 00:05:02,880
plugins and themes are a little bit

00:04:58,500 --> 00:05:05,580
different WP engine Pantheon flywheel we

00:05:02,880 --> 00:05:08,280
don't just go out and say hey here's

00:05:05,580 --> 00:05:09,360
your poster plug in with us it doesn't

00:05:08,280 --> 00:05:11,580
really work like that you're hosting a

00:05:09,360 --> 00:05:13,410
website not a plug-in the simplest way

00:05:11,580 --> 00:05:15,300
to automate your plug and pull it

00:05:13,410 --> 00:05:16,710
pulling pushing your plug-in development

00:05:15,300 --> 00:05:17,970
your ability to clone your plug-in

00:05:16,710 --> 00:05:20,850
locally is simply use the version

00:05:17,970 --> 00:05:22,650
control built in if you use git you've

00:05:20,850 --> 00:05:25,440
probably automated a good part of this

00:05:22,650 --> 00:05:27,450
this this step already how many folks in

00:05:25,440 --> 00:05:30,000
here use git or SVN or something like

00:05:27,450 --> 00:05:31,560
that so more than half the room if

00:05:30,000 --> 00:05:33,960
you're developing a plug-in or a theme

00:05:31,560 --> 00:05:35,820
with get that's by far still the most

00:05:33,960 --> 00:05:38,789
efficient way you probably have to do

00:05:35,820 --> 00:05:40,260
this type of thing so when it comes to

00:05:38,789 --> 00:05:41,910
automation most folks are you already

00:05:40,260 --> 00:05:43,700
have some of this done you don't

00:05:41,910 --> 00:05:45,840
necessarily need to go through all of it

00:05:43,700 --> 00:05:46,979
but that's only part of it once you get

00:05:45,840 --> 00:05:49,169
it to the Machine or once you're

00:05:46,979 --> 00:05:51,240
starting a new project it looks a little

00:05:49,169 --> 00:05:54,150
bit different we've all seen this type

00:05:51,240 --> 00:05:55,979
of thing the hello world plug-in every

00:05:54,150 --> 00:05:57,600
tutorial and starting a plug-in most

00:05:55,979 --> 00:05:59,280
workshops and starting a plug-in have

00:05:57,600 --> 00:06:01,830
some version of how do you get the thing

00:05:59,280 --> 00:06:03,300
to say hello world probably don't want

00:06:01,830 --> 00:06:05,280
to use mine from this example because

00:06:03,300 --> 00:06:09,090
it's just gonna kill WordPress with WP

00:06:05,280 --> 00:06:10,830
die but it's the same basic example you

00:06:09,090 --> 00:06:11,940
probably you can find a tutorial here

00:06:10,830 --> 00:06:15,419
who's gonna give you this and say this

00:06:11,940 --> 00:06:18,090
is a plugin great where does the code go

00:06:15,419 --> 00:06:20,100
what kind of code of my building that

00:06:18,090 --> 00:06:21,240
hello world is probably you know maybe

00:06:20,100 --> 00:06:23,910
you want to put a version of Hello Dolly

00:06:21,240 --> 00:06:25,350
up there I know a lot of folks who have

00:06:23,910 --> 00:06:26,490
rewritten Hello Dolly but that's

00:06:25,350 --> 00:06:27,780
probably not the end result of what

00:06:26,490 --> 00:06:29,760
you're going to do you need to put your

00:06:27,780 --> 00:06:32,580
code somewhere what files does that

00:06:29,760 --> 00:06:35,010
involve how do you handle all that what

00:06:32,580 --> 00:06:37,800
if you need something like sass or CSS

00:06:35,010 --> 00:06:39,390
in general web pack grunt gulp some

00:06:37,800 --> 00:06:41,450
other tool to help build these assets

00:06:39,390 --> 00:06:44,010
where does all this stuff

00:06:41,450 --> 00:06:45,900
to start a project today I don't ever

00:06:44,010 --> 00:06:47,510
recommend just creating a new file I

00:06:45,900 --> 00:06:49,920
recommend using code scaffolding

00:06:47,510 --> 00:06:52,350
WordPress by default has a great

00:06:49,920 --> 00:06:54,810
scaffolding system built into WP CLI

00:06:52,350 --> 00:06:58,170
that allows you to easily reproduce your

00:06:54,810 --> 00:06:59,820
template with every coder theme it helps

00:06:58,170 --> 00:07:01,860
you enforce the best practices so if

00:06:59,820 --> 00:07:03,360
you're a developer manager or you're

00:07:01,860 --> 00:07:04,890
simply working with a team of five or

00:07:03,360 --> 00:07:07,440
six with different skill levels within

00:07:04,890 --> 00:07:09,180
WordPress using the scaffolding can help

00:07:07,440 --> 00:07:12,780
you implement those tools to keep that

00:07:09,180 --> 00:07:14,400
code at a consistent level across so one

00:07:12,780 --> 00:07:15,900
developer isn't developing one type of

00:07:14,400 --> 00:07:17,730
plug and you go into another one and it

00:07:15,900 --> 00:07:19,680
looks like a completely different system

00:07:17,730 --> 00:07:21,980
you're developing for those problems

00:07:19,680 --> 00:07:24,930
slow teams down quite a bit

00:07:21,980 --> 00:07:26,160
they're very opinionated so you don't

00:07:24,930 --> 00:07:28,770
have to think about what what you're

00:07:26,160 --> 00:07:31,040
doing especially with WP CLI these are

00:07:28,770 --> 00:07:33,560
written by close to the WP core team

00:07:31,040 --> 00:07:35,640
Allen Sheila Sarah I'm probably

00:07:33,560 --> 00:07:38,820
mispronouncing his name but one of the

00:07:35,640 --> 00:07:40,980
leads of that project there's Danielle

00:07:38,820 --> 00:07:42,390
Brubaker another name I'm sorry I'm

00:07:40,980 --> 00:07:43,920
butchering names if you look these folks

00:07:42,390 --> 00:07:45,300
up but these are folks who have been

00:07:43,920 --> 00:07:47,280
working on this project for quite some

00:07:45,300 --> 00:07:49,020
time and work with the core team to

00:07:47,280 --> 00:07:50,730
allow for these are the files you need

00:07:49,020 --> 00:07:53,460
to get started and here's a whole

00:07:50,730 --> 00:07:54,930
project spun up they add your testing

00:07:53,460 --> 00:07:57,170
automatically so if you're using

00:07:54,930 --> 00:08:00,930
something like PHP unit in particular

00:07:57,170 --> 00:08:03,540
running WP cold scaffold I'll add PHP

00:08:00,930 --> 00:08:05,820
units just a basic file in there so you

00:08:03,540 --> 00:08:08,100
can start writing your tests and all

00:08:05,820 --> 00:08:09,600
your build tools grunt gulp whatever it

00:08:08,100 --> 00:08:12,180
might be depending on which scaffold you

00:08:09,600 --> 00:08:14,790
use are already there for you so things

00:08:12,180 --> 00:08:15,990
like sass you can just run one command

00:08:14,790 --> 00:08:18,960
after the plugins set up and you're

00:08:15,990 --> 00:08:21,240
gonna have set sass setup for you you're

00:08:18,960 --> 00:08:24,000
gonna have javascript minification setup

00:08:21,240 --> 00:08:25,760
for you and it's a simple command WP

00:08:24,000 --> 00:08:28,410
scaffold it allows you to build plugins

00:08:25,760 --> 00:08:30,840
themes the themes are based on

00:08:28,410 --> 00:08:32,760
underscores if you're using something

00:08:30,840 --> 00:08:34,440
like Genesis we're working on something

00:08:32,760 --> 00:08:36,270
at WP engine eventually so you'll be

00:08:34,440 --> 00:08:38,610
able to do this with Genesis if you're

00:08:36,270 --> 00:08:39,870
using something like trying to think

00:08:38,610 --> 00:08:41,460
there's so many themed frameworks out

00:08:39,870 --> 00:08:43,260
there these days but most of the major

00:08:41,460 --> 00:08:45,840
theme rape frameworks either have this

00:08:43,260 --> 00:08:47,900
already out or some some sort of add-on

00:08:45,840 --> 00:08:50,640
you can do with their own scaffolding

00:08:47,900 --> 00:08:51,870
blocks so if you're working on Gutenberg

00:08:50,640 --> 00:08:53,850
and you're trying to develop your first

00:08:51,870 --> 00:08:54,710
block rather than just creating a

00:08:53,850 --> 00:08:57,980
JavaScript file

00:08:54,710 --> 00:09:00,560
a PHP file what do I do with this you

00:08:57,980 --> 00:09:03,710
can create a block basic Blazek basic

00:09:00,560 --> 00:09:06,290
block code excuse me with just a WP

00:09:03,710 --> 00:09:08,180
scaffold command you if you have an

00:09:06,290 --> 00:09:09,830
existing plugin and you're putting out

00:09:08,180 --> 00:09:11,660
versions of it how many people have

00:09:09,830 --> 00:09:12,830
pushed out a plug-in or theme and found

00:09:11,660 --> 00:09:16,460
it broke something that they had done

00:09:12,830 --> 00:09:18,650
six months ago yeah new bugs I crashed

00:09:16,460 --> 00:09:22,550
20,000 websites when I launched I think

00:09:18,650 --> 00:09:25,250
security version 4 it happens I I admit

00:09:22,550 --> 00:09:27,920
it it was a big lesson in testing for me

00:09:25,250 --> 00:09:29,960
if you have if you've done that you can

00:09:27,920 --> 00:09:32,000
start implementing tests implement unit

00:09:29,960 --> 00:09:34,430
tests acceptance tests things like that

00:09:32,000 --> 00:09:35,810
in this case this will add a basic unit

00:09:34,430 --> 00:09:38,330
test framework using something called

00:09:35,810 --> 00:09:39,830
PHP unit so you can write tests they

00:09:38,330 --> 00:09:42,290
actually say if this is your function in

00:09:39,830 --> 00:09:44,200
PHP test it is the entry if I give it

00:09:42,290 --> 00:09:46,730
this input is the output what I expect

00:09:44,200 --> 00:09:48,260
so later on when you do introduce a new

00:09:46,730 --> 00:09:49,490
feature that may be modified that a

00:09:48,260 --> 00:09:50,780
little bit you're gonna know if

00:09:49,490 --> 00:09:51,710
something broke you're gonna be able to

00:09:50,780 --> 00:09:53,120
tell if there's what they call a

00:09:51,710 --> 00:09:53,720
regression you've broken something

00:09:53,120 --> 00:09:55,940
somewhere else

00:09:53,720 --> 00:09:58,100
of course theme tests can do the same

00:09:55,940 --> 00:09:59,510
thing and it can do a whole lot of more

00:09:58,100 --> 00:10:02,420
things it can do things like custom post

00:09:59,510 --> 00:10:04,100
types all sorts of different things that

00:10:02,420 --> 00:10:06,620
the scaffold command can do you can read

00:10:04,100 --> 00:10:09,110
the whole thing at the WordPress codex

00:10:06,620 --> 00:10:10,310
developer at wordpress.org so there's a

00:10:09,110 --> 00:10:13,100
whole list than there as well as the

00:10:10,310 --> 00:10:15,260
syntax to use this now the description

00:10:13,100 --> 00:10:16,910
for this talk was how to get a plug-in

00:10:15,260 --> 00:10:20,360
going in one command and here's that

00:10:16,910 --> 00:10:22,850
command WP scaffold plug-in hello world

00:10:20,360 --> 00:10:25,160
and the this list on the right here's

00:10:22,850 --> 00:10:28,070
all the files this creates from our

00:10:25,160 --> 00:10:30,320
install unit tests the these two files

00:10:28,070 --> 00:10:33,260
here have to do with unit tests some

00:10:30,320 --> 00:10:35,450
ignore files configuration editors get

00:10:33,260 --> 00:10:37,520
ignore more unit test stuff

00:10:35,450 --> 00:10:40,820
Travis which I'll talk about in a little

00:10:37,520 --> 00:10:42,410
bit grunt file if you're a JavaScript

00:10:40,820 --> 00:10:44,150
developer and you're panicking on grunt

00:10:42,410 --> 00:10:46,190
there are ways to work around grunt I

00:10:44,150 --> 00:10:47,600
know grunt is old it's actually being

00:10:46,190 --> 00:10:49,280
redeveloped since about June of last

00:10:47,600 --> 00:10:52,310
year they've started development again

00:10:49,280 --> 00:10:54,740
but grunt is mostly considered somewhat

00:10:52,310 --> 00:10:57,140
obsolete since about 2016 but there's

00:10:54,740 --> 00:11:00,440
ways around that of course your hello

00:10:57,140 --> 00:11:02,720
world basic file package JSON to get

00:11:00,440 --> 00:11:04,940
that all installed more PHP unit and

00:11:02,720 --> 00:11:08,320
your basic readme file everything you

00:11:04,940 --> 00:11:11,870
need to get going on a simple plugin

00:11:08,320 --> 00:11:13,520
if you're showing this if you need build

00:11:11,870 --> 00:11:16,160
tools notice this isn't your code this

00:11:13,520 --> 00:11:17,630
isn't writing code for you it's making

00:11:16,160 --> 00:11:19,220
sure that every developer on your team

00:11:17,630 --> 00:11:22,160
has the tools that developers plug in

00:11:19,220 --> 00:11:23,900
correctly it's automating that basic

00:11:22,160 --> 00:11:26,060
step on top of that it's automating the

00:11:23,900 --> 00:11:27,560
headers when you create a new WordPress

00:11:26,060 --> 00:11:29,570
plug-in or theme how many folks have

00:11:27,560 --> 00:11:31,820
done that and missed like the title in

00:11:29,570 --> 00:11:33,980
the right file or in the style that CSS

00:11:31,820 --> 00:11:35,120
sheet you type it wrong there's a typo

00:11:33,980 --> 00:11:37,250
in there and it never shows up in

00:11:35,120 --> 00:11:39,140
WordPress and your WordPress admin this

00:11:37,250 --> 00:11:40,880
automates all those little steps for you

00:11:39,140 --> 00:11:42,770
all the little things that you shouldn't

00:11:40,880 --> 00:11:45,170
need to think about every single time

00:11:42,770 --> 00:11:47,089
you spin up a new project the theme

00:11:45,170 --> 00:11:48,410
outline of this or the theme outlay of

00:11:47,089 --> 00:11:50,060
this is very similar to what you have

00:11:48,410 --> 00:11:51,080
here just a little bit of course it's

00:11:50,060 --> 00:11:53,210
gonna be a little different files for a

00:11:51,080 --> 00:11:56,029
theme and it does a child theme based on

00:11:53,210 --> 00:11:57,290
underscores so it's slightly different

00:11:56,029 --> 00:11:58,820
but it's all the same concept it's

00:11:57,290 --> 00:12:01,460
giving you that same basic template to

00:11:58,820 --> 00:12:03,350
get started of course if you wanted to

00:12:01,460 --> 00:12:05,000
add a post type to this if I wanted to

00:12:03,350 --> 00:12:08,029
do a movie post type and add it to that

00:12:05,000 --> 00:12:10,100
plug-in WP scaffold post type movie

00:12:08,029 --> 00:12:11,450
label movie plug it and tell it what

00:12:10,100 --> 00:12:14,600
plug-in I want to add it to and it's

00:12:11,450 --> 00:12:17,420
gonna go add the basic PHP code for a

00:12:14,600 --> 00:12:20,209
movie post type now it's not gonna say a

00:12:17,420 --> 00:12:22,070
movie post type has title editor this

00:12:20,209 --> 00:12:24,140
option that option it's gonna give you

00:12:22,070 --> 00:12:25,190
that code so you can get started look at

00:12:24,140 --> 00:12:27,650
wordpress.org

00:12:25,190 --> 00:12:28,760
and then very quickly add the options

00:12:27,650 --> 00:12:31,310
you need but it's gonna put the code

00:12:28,760 --> 00:12:33,950
where it should be it's gonna you know

00:12:31,310 --> 00:12:36,170
proper architecture proper code headers

00:12:33,950 --> 00:12:38,120
proper code usage you know where do you

00:12:36,170 --> 00:12:39,740
register a new post type how does that

00:12:38,120 --> 00:12:41,029
all work it's gonna help you put all

00:12:39,740 --> 00:12:43,040
that together to make sure that that

00:12:41,029 --> 00:12:45,560
that particular item is there for you

00:12:43,040 --> 00:12:46,700
and that OPEC can extend a number of

00:12:45,560 --> 00:12:49,040
other things so once you create your

00:12:46,700 --> 00:12:50,570
plugin start looking at the rest of the

00:12:49,040 --> 00:12:53,270
scaffold command maybe there's parts of

00:12:50,570 --> 00:12:54,830
it or your theme and see is there things

00:12:53,270 --> 00:12:56,870
that I need to use in this plug-in or

00:12:54,830 --> 00:12:58,279
theme that I can scaffold as well so the

00:12:56,870 --> 00:12:59,630
scaffolding can actually take multiple

00:12:58,279 --> 00:13:03,410
steps depending on the needs of what

00:12:59,630 --> 00:13:04,160
you're building of course these are

00:13:03,410 --> 00:13:06,440
pretty simple

00:13:04,160 --> 00:13:08,720
it's a hello world file in this case dot

00:13:06,440 --> 00:13:10,760
PHP that's really all the plug-in is if

00:13:08,720 --> 00:13:12,589
you want to get fancier for instance at

00:13:10,760 --> 00:13:16,339
University of Florida our plugins had

00:13:12,589 --> 00:13:17,990
quite an extensive folder hierarchy when

00:13:16,339 --> 00:13:19,220
we're building plug-ins for 40,000

00:13:17,990 --> 00:13:20,120
people there are a number of functions

00:13:19,220 --> 00:13:21,529
there are a number of things we want to

00:13:20,120 --> 00:13:24,740
do right off the bat

00:13:21,529 --> 00:13:25,540
single plugin this gets a little too

00:13:24,740 --> 00:13:28,100
opinionated

00:13:25,540 --> 00:13:30,139
you know I said before the opinionated

00:13:28,100 --> 00:13:31,670
nature of the scaffolding is its

00:13:30,139 --> 00:13:33,860
strength but it can also be its weakness

00:13:31,670 --> 00:13:37,550
as it doesn't necessarily work for your

00:13:33,860 --> 00:13:39,259
use case as I mentioned before is grunt

00:13:37,550 --> 00:13:41,360
still a thing if you're a front-end

00:13:39,259 --> 00:13:42,529
developer you've you know and started in

00:13:41,360 --> 00:13:45,949
the last year too you might not have

00:13:42,529 --> 00:13:47,749
even heard of grunt it was huge way back

00:13:45,949 --> 00:13:50,569
when I was still doing JavaScript it's

00:13:47,749 --> 00:13:52,009
been a while actually did restart you

00:13:50,569 --> 00:13:53,420
and I had to put that disclaimer in

00:13:52,009 --> 00:13:55,129
there because it's still technically

00:13:53,420 --> 00:13:56,209
being developed again but you maybe

00:13:55,129 --> 00:13:58,790
that's not what you're using maybe

00:13:56,209 --> 00:14:00,860
you're using gulp or web pack or some

00:13:58,790 --> 00:14:03,620
other technology to with all your themes

00:14:00,860 --> 00:14:05,089
that you'd rather do it that way this

00:14:03,620 --> 00:14:08,149
isn't it doesn't create a very complex

00:14:05,089 --> 00:14:10,160
file structure it does it it only uses

00:14:08,149 --> 00:14:13,120
underscores for the theme does everybody

00:14:10,160 --> 00:14:16,309
in - is anybody in here used underscores

00:14:13,120 --> 00:14:20,600
okay there's a few a few folks in here

00:14:16,309 --> 00:14:21,949
how many folks in here use Genesis I was

00:14:20,600 --> 00:14:23,449
hoping for more hands considering that's

00:14:21,949 --> 00:14:26,629
our product but there's a few folks in

00:14:23,449 --> 00:14:28,309
here using Genesis there's thesis is

00:14:26,629 --> 00:14:30,079
still a thing there depending what

00:14:28,309 --> 00:14:33,110
you're use that might still not fit for

00:14:30,079 --> 00:14:36,139
you so but still the built-in command

00:14:33,110 --> 00:14:37,399
only uses underscores so now you there's

00:14:36,139 --> 00:14:40,309
technologies out there that you can

00:14:37,399 --> 00:14:43,519
write your own you can write your own p

00:14:40,309 --> 00:14:46,160
WP CLI command WP CLI commands don't

00:14:43,519 --> 00:14:47,899
need WordPress to run you can stick them

00:14:46,160 --> 00:14:50,269
on a server somewhere if you're using

00:14:47,899 --> 00:14:51,889
vagrant or docker or whatever your

00:14:50,269 --> 00:14:53,209
technology you're using for your local

00:14:51,889 --> 00:14:56,000
server you can build that into your

00:14:53,209 --> 00:14:58,850
technology and have your own scaffolding

00:14:56,000 --> 00:15:01,250
command right there or you can use

00:14:58,850 --> 00:15:03,290
something like yeoman this first one is

00:15:01,250 --> 00:15:05,750
actually a fork of the second generator

00:15:03,290 --> 00:15:08,029
WP word I used to work for 10 up many

00:15:05,750 --> 00:15:09,500
years ago they did their own scaffolding

00:15:08,029 --> 00:15:11,660
version with a much more complex

00:15:09,500 --> 00:15:13,250
structure it still didn't fit when I

00:15:11,660 --> 00:15:15,740
went to the University of Florida so I

00:15:13,250 --> 00:15:17,689
rewrote it and helped convert it over to

00:15:15,740 --> 00:15:19,550
what we needed so this adds things like

00:15:17,689 --> 00:15:21,319
docker configurations for our local

00:15:19,550 --> 00:15:22,699
servers it adds a whole number of things

00:15:21,319 --> 00:15:24,740
that were very specific to what we

00:15:22,699 --> 00:15:26,389
needed you can take a look at feel free

00:15:24,740 --> 00:15:28,009
to take a look the project my projects

00:15:26,389 --> 00:15:29,779
actually archived in get labs I'm not

00:15:28,009 --> 00:15:31,009
doing that type of work anymore but you

00:15:29,779 --> 00:15:32,149
could use it as a base where maybe

00:15:31,009 --> 00:15:35,059
that's the type of work you're doing an

00:15:32,149 --> 00:15:35,540
enterprise you can roll your own golang

00:15:35,059 --> 00:15:38,329
is a

00:15:35,540 --> 00:15:40,940
great language for rollin CLI apps if

00:15:38,329 --> 00:15:42,560
you've never used it if you're a PHP or

00:15:40,940 --> 00:15:43,910
JavaScript developer and want to try

00:15:42,560 --> 00:15:46,190
something completely different working

00:15:43,910 --> 00:15:47,630
with multiple return values I'll drive

00:15:46,190 --> 00:15:48,860
you nuts for the first three weeks and

00:15:47,630 --> 00:15:51,740
go Ling but it's a lot of fun

00:15:48,860 --> 00:15:53,420
of course PHP JavaScript yeoman is

00:15:51,740 --> 00:15:55,339
actually written mostly in JavaScript

00:15:53,420 --> 00:15:57,319
there's various technologies you can use

00:15:55,339 --> 00:15:59,420
there's the scaffolding tools there are

00:15:57,319 --> 00:16:01,550
in other words there are scaffold for

00:15:59,420 --> 00:16:04,519
scaffolding and there he used quite a

00:16:01,550 --> 00:16:05,870
bit so whatever your need might be if WP

00:16:04,519 --> 00:16:07,370
CLI doesn't cut it for you out of the

00:16:05,870 --> 00:16:11,149
box take a look at some of these deeper

00:16:07,370 --> 00:16:13,639
tools that gets your plugin going

00:16:11,149 --> 00:16:15,589
it still doesn't write your code for you

00:16:13,639 --> 00:16:17,329
so now we have to watch as we do start

00:16:15,589 --> 00:16:18,560
writing our code how do we automate how

00:16:17,329 --> 00:16:21,560
do we make sure that that code is the

00:16:18,560 --> 00:16:23,300
best quality it can be WP coding

00:16:21,560 --> 00:16:26,540
standards set the standard for things

00:16:23,300 --> 00:16:29,000
like code syntax and there's PHP code

00:16:26,540 --> 00:16:30,889
sniffer that can enforce this for

00:16:29,000 --> 00:16:33,440
instance I don't force your code syntax

00:16:30,889 --> 00:16:35,509
but it can it also enforce best security

00:16:33,440 --> 00:16:36,440
best practices it'll tell you for

00:16:35,509 --> 00:16:38,240
instance everybody in here know what a

00:16:36,440 --> 00:16:39,709
nonces has worked with a nonce and a

00:16:38,240 --> 00:16:42,740
plug in our theme it's a number used

00:16:39,709 --> 00:16:44,240
once the idea being that if you're if

00:16:42,740 --> 00:16:46,339
you're trying to authenticate say a

00:16:44,240 --> 00:16:48,589
widget call or something with Ajax or a

00:16:46,339 --> 00:16:49,850
JavaScript you don't want people to be

00:16:48,589 --> 00:16:51,560
able to just call that thing over and

00:16:49,850 --> 00:16:54,019
over from different pages from any place

00:16:51,560 --> 00:16:55,819
so we use a nonce to say this this call

00:16:54,019 --> 00:16:59,329
is coming from where it should be for

00:16:55,819 --> 00:17:00,769
all practical purposes coding sandals

00:16:59,329 --> 00:17:02,839
I'll tell you when you missed it in a

00:17:00,769 --> 00:17:04,640
place that you would need it it'll tell

00:17:02,839 --> 00:17:07,040
you performance best practices if you

00:17:04,640 --> 00:17:10,010
stick if you read a query on a your own

00:17:07,040 --> 00:17:11,839
query with WP query and tell it negative

00:17:10,010 --> 00:17:13,669
one on post count negative one is

00:17:11,839 --> 00:17:16,490
considered a very bad thing because if

00:17:13,669 --> 00:17:18,049
you had two million records on my sequel

00:17:16,490 --> 00:17:19,850
database and a three dollar host

00:17:18,049 --> 00:17:21,380
negative one's gonna pull back two

00:17:19,850 --> 00:17:22,970
million well actually it's not going to

00:17:21,380 --> 00:17:26,449
pull two million records most likely

00:17:22,970 --> 00:17:28,130
just gonna crash your server WP coding

00:17:26,449 --> 00:17:30,110
standards will flag that for you and

00:17:28,130 --> 00:17:33,020
tell you hey this is bad figure out how

00:17:30,110 --> 00:17:36,590
to do it a different way and it comes

00:17:33,020 --> 00:17:38,780
with a tool called PHP CBF some editors

00:17:36,590 --> 00:17:40,549
like Jeff if you use phpstorm have their

00:17:38,780 --> 00:17:42,590
own version of this tool built in but if

00:17:40,549 --> 00:17:45,530
you install PHP coding standards on Mac

00:17:42,590 --> 00:17:47,870
or Linux you're gonna have PHP CBF which

00:17:45,530 --> 00:17:48,860
will automatically fix your syntax

00:17:47,870 --> 00:17:50,630
errors

00:17:48,860 --> 00:17:52,070
you can go to a lot of these conferences

00:17:50,630 --> 00:17:54,230
and somebody's gonna say tabs or spaces

00:17:52,070 --> 00:17:57,669
or this bracket or that bracket who

00:17:54,230 --> 00:18:01,130
cares your project has its own standard

00:17:57,669 --> 00:18:02,750
PHP CBF hook it up with vs code hook it

00:18:01,130 --> 00:18:05,000
up with atom hook it up with sublime

00:18:02,750 --> 00:18:07,370
text whatever you're using you hit save

00:18:05,000 --> 00:18:09,110
code reformats to whatever it needs to

00:18:07,370 --> 00:18:11,320
be and you move on doesn't matter what

00:18:09,110 --> 00:18:13,909
that what if you're using tabs or spaces

00:18:11,320 --> 00:18:15,080
more importantly as the developers that

00:18:13,909 --> 00:18:17,510
you're working with are the people that

00:18:15,080 --> 00:18:18,919
you need to review your code it's the

00:18:17,510 --> 00:18:21,080
same standard that you're it's a

00:18:18,919 --> 00:18:23,240
wordpress plugin or a wordpress theme it

00:18:21,080 --> 00:18:24,710
follows X it follows WordPress standards

00:18:23,240 --> 00:18:26,600
they know what they're looking for and

00:18:24,710 --> 00:18:28,669
what they're looking at so it's a it's

00:18:26,600 --> 00:18:30,559
it's a much it's a very quick way to

00:18:28,669 --> 00:18:33,769
automate the code it's the development

00:18:30,559 --> 00:18:35,840
of the code itself if you're finding

00:18:33,769 --> 00:18:37,279
bugs oftentimes we use console dot log

00:18:35,840 --> 00:18:39,139
or var dump how many people have used

00:18:37,279 --> 00:18:42,169
console dot log or var dump in this in

00:18:39,139 --> 00:18:45,590
this room about half the room it looks

00:18:42,169 --> 00:18:47,330
like that's time consuming you figuring

00:18:45,590 --> 00:18:48,950
out where to write it oops I wrote that

00:18:47,330 --> 00:18:51,889
in the wrong function okay now where do

00:18:48,950 --> 00:18:53,899
I put it so you wind up with test1 or

00:18:51,889 --> 00:18:55,519
whatever statement you want to use and

00:18:53,899 --> 00:18:57,260
test2 and you're out putting them in all

00:18:55,519 --> 00:18:59,659
these spaces trying to find out where

00:18:57,260 --> 00:19:01,639
you need to debug you don't need to do

00:18:59,659 --> 00:19:03,919
that anymore if you're using a modern

00:19:01,639 --> 00:19:05,149
text editor it can already automate this

00:19:03,919 --> 00:19:05,929
for you in this end the case of

00:19:05,149 --> 00:19:09,620
JavaScript

00:19:05,929 --> 00:19:12,139
vs code PHP still arm web still arm adam

00:19:09,620 --> 00:19:14,149
sublime text all have tools all have

00:19:12,139 --> 00:19:15,679
extensions built in that when you click

00:19:14,149 --> 00:19:18,350
a line you can click a line at any point

00:19:15,679 --> 00:19:21,289
your code and your JavaScript load that

00:19:18,350 --> 00:19:24,139
page in your editor or in your browser

00:19:21,289 --> 00:19:25,789
and it'll stop when it hits that line of

00:19:24,139 --> 00:19:29,029
execution and tells you everything that

00:19:25,789 --> 00:19:32,000
you see there for PHP there's x2 bug

00:19:29,029 --> 00:19:35,059
does the same thing every variable you

00:19:32,000 --> 00:19:36,559
it PHP knows about at that point and it

00:19:35,059 --> 00:19:38,929
tells you every point that link to your

00:19:36,559 --> 00:19:40,279
function so if you're six files deep and

00:19:38,929 --> 00:19:44,149
a plugin it'll say well it came from

00:19:40,279 --> 00:19:45,559
index.php to WP settings to this file to

00:19:44,149 --> 00:19:47,330
that file and you can see each and every

00:19:45,559 --> 00:19:47,870
variable at every step of the way no

00:19:47,330 --> 00:19:51,260
more

00:19:47,870 --> 00:19:53,179
manually typing in pharr dump what is

00:19:51,260 --> 00:19:55,309
this thing at this point you just switch

00:19:53,179 --> 00:19:57,760
your code your blood break points around

00:19:55,309 --> 00:19:59,779
and everything is solved for you well

00:19:57,760 --> 00:20:01,910
everything's found for you hopefully

00:19:59,779 --> 00:20:04,490
unless I say everything solved for you

00:20:01,910 --> 00:20:06,110
you can also profile a page this way too

00:20:04,490 --> 00:20:08,570
this is this is really neat if you're

00:20:06,110 --> 00:20:11,600
dealing with big sites you've got a 15

00:20:08,570 --> 00:20:12,200
second load time on a huge buddypress

00:20:11,600 --> 00:20:15,590
site

00:20:12,200 --> 00:20:16,730
how do you do bugs that tools like New

00:20:15,590 --> 00:20:20,570
Relic are out there but they're very

00:20:16,730 --> 00:20:22,160
expensive XD bug has a profile tool

00:20:20,570 --> 00:20:24,170
that'll automate this but it takes a

00:20:22,160 --> 00:20:26,030
profile of every function how long it

00:20:24,170 --> 00:20:27,920
took to call where it's located what

00:20:26,030 --> 00:20:30,050
called it and it'll spit all that

00:20:27,920 --> 00:20:31,760
information back out for you so now you

00:20:30,050 --> 00:20:33,920
can now you've just automated all that

00:20:31,760 --> 00:20:36,650
performance check testing you can go

00:20:33,920 --> 00:20:38,540
back in and see oh well this this

00:20:36,650 --> 00:20:40,400
function here has this negative 1 in

00:20:38,540 --> 00:20:41,570
this WP query that I didn't know about

00:20:40,400 --> 00:20:44,150
because somebody wrote it three years

00:20:41,570 --> 00:20:46,880
ago if I fix this now look I'm down from

00:20:44,150 --> 00:20:48,530
fifteen seconds to one second hopefully

00:20:46,880 --> 00:20:50,750
it's that easy for you it's probably not

00:20:48,530 --> 00:20:53,030
but the idea is similar in whatever bug

00:20:50,750 --> 00:20:56,810
you're looking for XD bug is probably

00:20:53,030 --> 00:21:00,440
the single best tool I ever found way

00:20:56,810 --> 00:21:02,390
too late in my career on the JavaScript

00:21:00,440 --> 00:21:05,000
side I don't do enough JavaScript I've

00:21:02,390 --> 00:21:07,010
used the phpstorm tools quite a bit they

00:21:05,000 --> 00:21:08,420
work with Firefox or Chrome especially

00:21:07,010 --> 00:21:11,090
if you're using a modern tool you

00:21:08,420 --> 00:21:12,920
probably have this stuff in there WP

00:21:11,090 --> 00:21:15,350
engine dev kit has x2 bug built in I

00:21:12,920 --> 00:21:17,960
believe local by flywheel does I no Maps

00:21:15,350 --> 00:21:20,270
newer stuff does desktop server by

00:21:17,960 --> 00:21:22,340
server press has X debug stuff built in

00:21:20,270 --> 00:21:23,930
all these tools are built in there and

00:21:22,340 --> 00:21:26,630
they're very easy to use once you get

00:21:23,930 --> 00:21:28,460
started with them for everything else

00:21:26,630 --> 00:21:29,660
tend to automate the rest of the code

00:21:28,460 --> 00:21:34,940
you use what they call a test Runner

00:21:29,660 --> 00:21:36,620
grunt gulp npm web pack make there's all

00:21:34,940 --> 00:21:38,270
kinds of things that can run tasks for

00:21:36,620 --> 00:21:41,450
you from minimizing your JavaScript at

00:21:38,270 --> 00:21:43,460
the end handling all your sass shrinking

00:21:41,450 --> 00:21:45,800
your images creating translation files

00:21:43,460 --> 00:21:47,210
all that stuff can be automated quite

00:21:45,800 --> 00:21:49,210
simply and most of this is done out of

00:21:47,210 --> 00:21:51,470
the box when you do WP scaffold plugin

00:21:49,210 --> 00:21:52,190
everything in this particular page is

00:21:51,470 --> 00:21:54,230
done for you

00:21:52,190 --> 00:21:56,000
except for maybe shrink images I can't

00:21:54,230 --> 00:21:58,910
remember if that's in the basic one now

00:21:56,000 --> 00:22:01,130
or not it'll shrink your it'll shrink

00:21:58,910 --> 00:22:02,360
your j/s it'll take care of sass it'll

00:22:01,130 --> 00:22:03,530
take care of your translations

00:22:02,360 --> 00:22:04,640
everything's ready for you you don't

00:22:03,530 --> 00:22:06,470
have to worry about these tasks you

00:22:04,640 --> 00:22:07,670
don't to set them up you don't have to

00:22:06,470 --> 00:22:09,410
worry about distributing when you

00:22:07,670 --> 00:22:12,440
distribute to wordpress.org it's just

00:22:09,410 --> 00:22:14,330
there so what do you think you're doing

00:22:12,440 --> 00:22:15,380
when you think you're done writing the

00:22:14,330 --> 00:22:17,510
code

00:22:15,380 --> 00:22:18,830
the next big thing is maybe enforcing

00:22:17,510 --> 00:22:20,720
some of these standards they're

00:22:18,830 --> 00:22:22,940
available to us that's great but if we

00:22:20,720 --> 00:22:26,300
don't actually use if we want to use

00:22:22,940 --> 00:22:27,500
notepad on Windows or TextEdit on Mac

00:22:26,300 --> 00:22:28,700
maybe we are using something that

00:22:27,500 --> 00:22:30,830
doesn't have this built in there's ways

00:22:28,700 --> 00:22:32,270
we can automate or you're developers

00:22:30,830 --> 00:22:35,000
aren't using this let's face it none of

00:22:32,270 --> 00:22:37,460
us are gonna avoid our best tooling

00:22:35,000 --> 00:22:38,690
right but if as we give this to a junior

00:22:37,460 --> 00:22:40,610
developer maybe they don't have the

00:22:38,690 --> 00:22:43,040
tooling to help them with this how do

00:22:40,610 --> 00:22:47,180
you enforce this stuff just like

00:22:43,040 --> 00:22:49,040
WordPress get offers hooks in particular

00:22:47,180 --> 00:22:52,220
there's a pre-commit hook which can be

00:22:49,040 --> 00:22:53,720
used to check all of this PHP code

00:22:52,220 --> 00:22:54,980
sniffer and WordPress codes coding

00:22:53,720 --> 00:22:56,360
centers that's what we call a linter

00:22:54,980 --> 00:22:57,680
you're basically looking for low-hanging

00:22:56,360 --> 00:22:59,060
fruit you're looking for the lint in the

00:22:57,680 --> 00:22:59,680
code and you're looking to try to remove

00:22:59,060 --> 00:23:02,810
it

00:22:59,680 --> 00:23:04,520
WP enforcer will enforce that linter

00:23:02,810 --> 00:23:05,540
before you can commit so in other words

00:23:04,520 --> 00:23:08,690
when you hit commit in your git

00:23:05,540 --> 00:23:10,220
repository its WP enforcer by a guy by

00:23:08,690 --> 00:23:12,710
the name of Steve Grunwald who's another

00:23:10,220 --> 00:23:14,840
excellent WordPress developer it'll look

00:23:12,710 --> 00:23:16,700
and say okay let's run PHP code sniffer

00:23:14,840 --> 00:23:18,560
on all your WordPress on all your

00:23:16,700 --> 00:23:20,360
plug-in or theme hey you screwed this

00:23:18,560 --> 00:23:22,160
out you can't save it and it'll tell you

00:23:20,360 --> 00:23:24,920
what line you screwed up what rule you

00:23:22,160 --> 00:23:26,960
broke and where to go fix it so that's

00:23:24,920 --> 00:23:28,550
if you're working in a team the idea

00:23:26,960 --> 00:23:30,380
here is to make sure that just because

00:23:28,550 --> 00:23:32,240
you're following standards make sure

00:23:30,380 --> 00:23:34,550
your entire team is - you're enforcing

00:23:32,240 --> 00:23:36,500
those standards across the entire

00:23:34,550 --> 00:23:38,240
project so you're not gonna wind up with

00:23:36,500 --> 00:23:40,190
one set of code or once thigh or one

00:23:38,240 --> 00:23:42,370
level of code really from one person and

00:23:40,190 --> 00:23:45,440
a different level from someone else you

00:23:42,370 --> 00:23:46,820
can also use this for build assets if

00:23:45,440 --> 00:23:49,510
you really want to if you want to run

00:23:46,820 --> 00:23:51,800
that grunt stop grunting is up as a

00:23:49,510 --> 00:23:53,980
pre-release hook you can do stuff like

00:23:51,800 --> 00:23:56,030
that you can run anything in it you want

00:23:53,980 --> 00:23:58,070
probably wouldn't recommend that you

00:23:56,030 --> 00:24:00,770
don't usually want to commit my minified

00:23:58,070 --> 00:24:02,660
code to sass or to your git repository

00:24:00,770 --> 00:24:05,420
that's when you end up with conflicts

00:24:02,660 --> 00:24:07,490
you you commit one side somebody else

00:24:05,420 --> 00:24:09,290
commits another one gets gonna say hey

00:24:07,490 --> 00:24:10,700
when you try to merge this which which

00:24:09,290 --> 00:24:13,010
version do you want you spend a lot of

00:24:10,700 --> 00:24:14,270
time trying to solve those it's probably

00:24:13,010 --> 00:24:16,280
not something you want to do but the

00:24:14,270 --> 00:24:18,320
point is to emphasize that whatever you

00:24:16,280 --> 00:24:20,690
do need to do at the stage can be

00:24:18,320 --> 00:24:23,000
checked maybe it's running unit tests

00:24:20,690 --> 00:24:24,740
maybe it's running an acceptance testing

00:24:23,000 --> 00:24:26,240
or something else it's all available to

00:24:24,740 --> 00:24:28,880
you at this stage if you need to enforce

00:24:26,240 --> 00:24:30,129
it what more testing would you even want

00:24:28,880 --> 00:24:32,600
to

00:24:30,129 --> 00:24:34,220
wvs careful gave us phpunit

00:24:32,600 --> 00:24:36,019
but does your code break everything

00:24:34,220 --> 00:24:38,149
anything else in WordPress is every

00:24:36,019 --> 00:24:39,620
wordpress developer set up such tools as

00:24:38,149 --> 00:24:42,740
code sniffer there's a few other ones we

00:24:39,620 --> 00:24:44,720
can do the better part usually where we

00:24:42,740 --> 00:24:47,200
do this is what's in CI CD this is

00:24:44,720 --> 00:24:50,090
continuing continuous integration or

00:24:47,200 --> 00:24:52,639
continuous develop delivery deployment I

00:24:50,090 --> 00:24:54,860
really can't talk today my apologies if

00:24:52,639 --> 00:24:57,019
you if you're using git if you're using

00:24:54,860 --> 00:24:59,480
github if you're using git lab if you're

00:24:57,019 --> 00:25:01,340
using bitbucket all these have their own

00:24:59,480 --> 00:25:03,289
tools built in to already handle this as

00:25:01,340 --> 00:25:06,080
well as there's things like circle CI or

00:25:03,289 --> 00:25:07,399
Jenkins which can do they're considered

00:25:06,080 --> 00:25:09,279
a little bit more powerful and they can

00:25:07,399 --> 00:25:11,509
be run independent of your git host and

00:25:09,279 --> 00:25:15,350
typically they run three steps build

00:25:11,509 --> 00:25:16,789
test and deploy so they're running there

00:25:15,350 --> 00:25:18,320
though there's that's this is the step

00:25:16,789 --> 00:25:20,029
at which you're building your assets out

00:25:18,320 --> 00:25:22,279
if you wanted to take your plug-in and

00:25:20,029 --> 00:25:25,159
put it out to the world you want your CI

00:25:22,279 --> 00:25:27,289
CI CD your continuous deployment to say

00:25:25,159 --> 00:25:29,600
okay take all that code build our assets

00:25:27,289 --> 00:25:31,129
out set up for any testing in other

00:25:29,600 --> 00:25:33,019
words prepare it so we can run all those

00:25:31,129 --> 00:25:34,249
tests if you're running JavaScript test

00:25:33,019 --> 00:25:35,480
and you haven't built your JavaScript

00:25:34,249 --> 00:25:37,249
you're not gonna get too far in your

00:25:35,480 --> 00:25:39,379
testing so it's going to run all that

00:25:37,249 --> 00:25:40,730
for you and at the end of the build it

00:25:39,379 --> 00:25:42,289
should have a package that can be given

00:25:40,730 --> 00:25:44,720
to the end user so the idea here is

00:25:42,289 --> 00:25:46,669
whatever you have in your repository you

00:25:44,720 --> 00:25:49,039
build it so that it's it's ready for to

00:25:46,669 --> 00:25:50,990
be sent out and then you run then you

00:25:49,039 --> 00:25:53,570
were in tests on it is it going to break

00:25:50,990 --> 00:25:55,039
something else run unit integration

00:25:53,570 --> 00:25:57,350
acceptance or any other testing

00:25:55,039 --> 00:26:00,710
something like WP acceptance which ten

00:25:57,350 --> 00:26:01,970
up recently released basically what it

00:26:00,710 --> 00:26:03,649
does is it's going to run simple things

00:26:01,970 --> 00:26:05,210
for you can I still log into WordPress

00:26:03,649 --> 00:26:06,679
if this plugin is activated or this

00:26:05,210 --> 00:26:10,399
themes activated can I still do this

00:26:06,679 --> 00:26:11,779
task can I still create a new post these

00:26:10,399 --> 00:26:13,100
are these are the acceptance testing

00:26:11,779 --> 00:26:14,840
that's looking at the functionality of

00:26:13,100 --> 00:26:18,110
the application as a whole rather than

00:26:14,840 --> 00:26:19,700
just individual units what we use a WP

00:26:18,110 --> 00:26:21,919
engine for dev kit is something called

00:26:19,700 --> 00:26:23,119
jest if you're running JavaScript or if

00:26:21,919 --> 00:26:25,429
you're running anything on the CLI

00:26:23,119 --> 00:26:27,440
you're building a new WP CLI command

00:26:25,429 --> 00:26:29,869
this will run the command for you and

00:26:27,440 --> 00:26:31,850
create a snapshot and every time you run

00:26:29,869 --> 00:26:33,470
those tests it'll it'll run that command

00:26:31,850 --> 00:26:35,539
again and if the snapshot differs your

00:26:33,470 --> 00:26:37,519
test fails so it's making sure that the

00:26:35,539 --> 00:26:40,700
output from the entire application is

00:26:37,519 --> 00:26:42,830
what you expect it to be you can compute

00:26:40,700 --> 00:26:44,600
PHP or other test coverage and

00:26:42,830 --> 00:26:46,370
this stage again if there's any issues

00:26:44,600 --> 00:26:47,870
in your code it's gonna fail it's not

00:26:46,370 --> 00:26:50,090
gonna go to your users they're not gonna

00:26:47,870 --> 00:26:51,980
find the problem you've probably all

00:26:50,090 --> 00:26:53,420
seen some level of this all these little

00:26:51,980 --> 00:26:54,980
ones here this is taken right off a

00:26:53,420 --> 00:26:56,240
github are just examples of the

00:26:54,980 --> 00:26:59,630
different things that you can display

00:26:56,240 --> 00:27:01,280
using this type of CI CD some you know

00:26:59,630 --> 00:27:03,230
in this case it's download rates often

00:27:01,280 --> 00:27:05,900
times you'll see test coverage or you'll

00:27:03,230 --> 00:27:07,430
see build passing or build failing build

00:27:05,900 --> 00:27:09,170
failing or bill passing is simply or the

00:27:07,430 --> 00:27:11,930
tests passing or failing is the build

00:27:09,170 --> 00:27:14,570
stage passing or failing it's just all

00:27:11,930 --> 00:27:16,760
notifications as to how far along is the

00:27:14,570 --> 00:27:17,930
code in that repository good if you've

00:27:16,760 --> 00:27:20,570
got to get hub and you want to download

00:27:17,930 --> 00:27:22,190
X project to try and its build failing

00:27:20,570 --> 00:27:24,110
you know you're probably going to have

00:27:22,190 --> 00:27:26,900
some problems if you download right from

00:27:24,110 --> 00:27:28,640
that master branch all that's built all

00:27:26,900 --> 00:27:31,840
that's handled automatically and updated

00:27:28,640 --> 00:27:33,920
automatically through the CI CD stuff

00:27:31,840 --> 00:27:35,330
once you get that all done though now we

00:27:33,920 --> 00:27:37,160
have to deploy our code I've covered the

00:27:35,330 --> 00:27:39,950
build and test deploys a little bit

00:27:37,160 --> 00:27:41,150
different if you're using CI CD this can

00:27:39,950 --> 00:27:44,210
do a lot of things for your version your

00:27:41,150 --> 00:27:46,400
project copy your files trigger a remote

00:27:44,210 --> 00:27:48,650
git pull look it may be it goes out to

00:27:46,400 --> 00:27:49,850
your server if you're running like UF it

00:27:48,650 --> 00:27:51,890
would go out to our server and just

00:27:49,850 --> 00:27:53,720
trigger the git pull it'll tell the

00:27:51,890 --> 00:27:58,070
server hey we got a new code here run it

00:27:53,720 --> 00:27:59,720
or run some sort of deployment script on

00:27:58,070 --> 00:28:01,550
the case of wordpress.org maybe it can

00:27:59,720 --> 00:28:02,870
run a script like this this errands this

00:28:01,550 --> 00:28:04,580
is now Aaron's script this is actually

00:28:02,870 --> 00:28:07,070
the last time the last WordPress plug-in

00:28:04,580 --> 00:28:08,420
I had on wordpress.org is this plug-in

00:28:07,070 --> 00:28:11,030
that Aaron Eaton adopted a couple months

00:28:08,420 --> 00:28:12,890
ago this particular deploy datas sh

00:28:11,030 --> 00:28:14,240
script you don't need to know the SVN

00:28:12,890 --> 00:28:16,550
and all the stuff that wordpress.org

00:28:14,240 --> 00:28:18,740
requires that you use to submit a

00:28:16,550 --> 00:28:20,750
plug-in or theme you run this script it

00:28:18,740 --> 00:28:22,730
does it all for you it checks that your

00:28:20,750 --> 00:28:24,620
versions match if you're submitting a

00:28:22,730 --> 00:28:25,850
plug-in you have readme text version you

00:28:24,620 --> 00:28:27,890
have to have the plug-in header version

00:28:25,850 --> 00:28:29,930
if they differ it never shows up in

00:28:27,890 --> 00:28:32,360
wordpress.org this handles all that for

00:28:29,930 --> 00:28:35,840
you it's just a single script that'll

00:28:32,360 --> 00:28:37,280
work really well on Mac or Linux checks

00:28:35,840 --> 00:28:39,230
plug-in version handles WordPress tag

00:28:37,280 --> 00:28:40,340
can use for things but don't use it for

00:28:39,230 --> 00:28:42,050
first submissions that's the problem

00:28:40,340 --> 00:28:43,730
with any of this stuff anytime you

00:28:42,050 --> 00:28:46,370
deploy your first deployment should

00:28:43,730 --> 00:28:49,790
probably never be automated develop your

00:28:46,370 --> 00:28:51,290
process first every application deploys

00:28:49,790 --> 00:28:52,910
differently whether it's wordpress.org

00:28:51,290 --> 00:28:55,130
wordpress.org on your first deployment

00:28:52,910 --> 00:28:56,570
they're going to review it for you once

00:28:55,130 --> 00:28:57,440
you get the review done and they

00:28:56,570 --> 00:28:59,600
told you all the things you've done

00:28:57,440 --> 00:29:02,360
wrong then switch to something like this

00:28:59,600 --> 00:29:04,340
but then this is for new versions hey I

00:29:02,360 --> 00:29:07,340
had a bug I need to brief release six

00:29:04,340 --> 00:29:09,470
versions this week on a big plugin that

00:29:07,340 --> 00:29:11,059
can be a three or four hour process if

00:29:09,470 --> 00:29:12,889
you've done manually and you're probably

00:29:11,059 --> 00:29:15,200
gonna miss a step somewhere along the

00:29:12,889 --> 00:29:18,049
way if you're using something like this

00:29:15,200 --> 00:29:19,639
with C ICD all your tests everything's

00:29:18,049 --> 00:29:21,049
done within just a couple of minutes and

00:29:19,639 --> 00:29:23,059
it's out there to your users and you

00:29:21,049 --> 00:29:25,690
know everything's complete it's

00:29:23,059 --> 00:29:30,649
consistent and it's ready

00:29:25,690 --> 00:29:33,500
what about changelog follow the progress

00:29:30,649 --> 00:29:35,779
with conventional commits when you make

00:29:33,500 --> 00:29:37,220
a commit in this case fix maybe I'm

00:29:35,779 --> 00:29:38,870
fixing a post type and that's what I

00:29:37,220 --> 00:29:42,139
fixed maybe I'm making a new feature

00:29:38,870 --> 00:29:45,230
blocks there's this conventional commit

00:29:42,139 --> 00:29:47,210
CLI the best the biggest example I see

00:29:45,230 --> 00:29:49,580
use is actually from angularjs which is

00:29:47,210 --> 00:29:50,840
that conventional commits org and it

00:29:49,580 --> 00:29:52,610
tells you how to make your when you

00:29:50,840 --> 00:29:54,409
commit on git it tells you how to make

00:29:52,610 --> 00:29:56,539
your commit that this little CLI script

00:29:54,409 --> 00:29:58,940
can read it and in the deploy process

00:29:56,539 --> 00:30:00,080
it'll look back at your git repo so you

00:29:58,940 --> 00:30:01,940
don't have to read if you haven't

00:30:00,080 --> 00:30:03,200
released in six months what did you know

00:30:01,940 --> 00:30:04,850
you have 50 different things you put in

00:30:03,200 --> 00:30:06,500
there what were they all you want to

00:30:04,850 --> 00:30:08,210
communicate that to your users so it's

00:30:06,500 --> 00:30:10,490
gonna look back at your get history and

00:30:08,210 --> 00:30:12,200
handle that for you this is from a

00:30:10,490 --> 00:30:14,210
couple days ago our last release of our

00:30:12,200 --> 00:30:16,519
last beta release of dev kit internally

00:30:14,210 --> 00:30:18,110
all these ARS are get commits it just

00:30:16,519 --> 00:30:20,000
puts this this actual thing together

00:30:18,110 --> 00:30:21,590
here including if we do something that's

00:30:20,000 --> 00:30:23,899
gonna break it for our existing users

00:30:21,590 --> 00:30:26,389
it'll tell you you don't have to

00:30:23,899 --> 00:30:28,009
remember to say oh yeah I forgot I we

00:30:26,389 --> 00:30:29,419
forgot to put in the change log that if

00:30:28,009 --> 00:30:32,179
they install this version it's gonna

00:30:29,419 --> 00:30:34,610
break X or Y unless they do something

00:30:32,179 --> 00:30:36,889
else it handles all that communications

00:30:34,610 --> 00:30:39,230
for you which can be extremely handy the

00:30:36,889 --> 00:30:42,980
more popular your project gets and it's

00:30:39,230 --> 00:30:44,659
a simple NPM script these are a lot of

00:30:42,980 --> 00:30:46,340
things you can do with this from

00:30:44,659 --> 00:30:49,519
deploying where are you deploying to

00:30:46,340 --> 00:30:51,139
from change logs from tests one of the

00:30:49,519 --> 00:30:53,840
things we use the most is one of the

00:30:51,139 --> 00:30:55,299
oldest technologies in the Linux open

00:30:53,840 --> 00:30:59,360
source world it's something called make

00:30:55,299 --> 00:31:00,769
it's designed to build files in C or

00:30:59,360 --> 00:31:02,899
another you know some of the older

00:31:00,769 --> 00:31:05,629
languages in other words you had X input

00:31:02,899 --> 00:31:08,000
file you wanted Y output file make was

00:31:05,629 --> 00:31:09,929
designed to handle that for you 25 years

00:31:08,000 --> 00:31:11,039
ago or longer

00:31:09,929 --> 00:31:12,960
we use it today is kind of a

00:31:11,039 --> 00:31:14,519
server-based task runner a lot at

00:31:12,960 --> 00:31:18,960
wpengine and i've used it at other

00:31:14,519 --> 00:31:21,840
places it's the it can build assets test

00:31:18,960 --> 00:31:23,730
unit you can script all these things to

00:31:21,840 --> 00:31:26,639
handle it the way you need to for

00:31:23,730 --> 00:31:29,340
instance this is our changelog script it

00:31:26,639 --> 00:31:30,690
looks complex but the only difference

00:31:29,340 --> 00:31:32,490
here that we're doing then if you were

00:31:30,690 --> 00:31:35,519
to go to the basic conventional

00:31:32,490 --> 00:31:37,649
changelog tutorial is we're running it

00:31:35,519 --> 00:31:39,509
in docker because we're not really sure

00:31:37,649 --> 00:31:41,460
sometimes who's computer or running a

00:31:39,509 --> 00:31:43,169
net I develop on Linux a lot of my

00:31:41,460 --> 00:31:45,570
co-workers develop on various versions

00:31:43,169 --> 00:31:46,799
of Mac things can differ a little bit if

00:31:45,570 --> 00:31:48,210
you're not careful so we run it all

00:31:46,799 --> 00:31:51,119
through docker to make sure everything's

00:31:48,210 --> 00:31:52,529
even more consistent and that's what

00:31:51,119 --> 00:31:54,360
this script here it's just a simple make

00:31:52,529 --> 00:31:56,009
script if we say make release changelog

00:31:54,360 --> 00:31:57,720
it does this all for us and it's going

00:31:56,009 --> 00:31:59,639
to do it no matter what computer

00:31:57,720 --> 00:32:03,600
we're on no matter what server we're on

00:31:59,639 --> 00:32:06,269
everything's consistent some pitfalls of

00:32:03,600 --> 00:32:08,369
this whole process no matter how much

00:32:06,269 --> 00:32:10,559
you automate it's still not solving your

00:32:08,369 --> 00:32:12,840
problems it's not writing your code for

00:32:10,559 --> 00:32:17,100
you if you need a plugin to integrate

00:32:12,840 --> 00:32:18,389
stripe with WooCommerce I know there's

00:32:17,100 --> 00:32:20,070
50 of them out there it's the quickest

00:32:18,389 --> 00:32:21,869
example I can come up with it doesn't

00:32:20,070 --> 00:32:24,210
know what stripe is it's not going to

00:32:21,869 --> 00:32:26,220
write your stripe code if you put a

00:32:24,210 --> 00:32:27,649
decimal place point in the wrong place

00:32:26,220 --> 00:32:30,659
and you're charging your users now

00:32:27,649 --> 00:32:32,850
$5,000 instead of $0.50 doesn't care

00:32:30,659 --> 00:32:37,169
that's a valid number automation is not

00:32:32,850 --> 00:32:38,669
gonna solve that for you and the ROI of

00:32:37,169 --> 00:32:41,009
automation isn't something that you're

00:32:38,669 --> 00:32:42,929
gonna realize tomorrow as you start this

00:32:41,009 --> 00:32:45,090
process maybe the first thing you want

00:32:42,929 --> 00:32:46,889
to automate is bringing up a new plugin

00:32:45,090 --> 00:32:48,809
maybe the first thing you want to

00:32:46,889 --> 00:32:50,869
automate is your wordpress.org plug-in

00:32:48,809 --> 00:32:53,100
or theme deployment to wordpress.org

00:32:50,869 --> 00:32:54,509
it's gonna take you a couple of hours

00:32:53,100 --> 00:32:57,210
the first time you do this to set this

00:32:54,509 --> 00:32:59,309
up right it's over the months and it's

00:32:57,210 --> 00:33:02,369
over releases that that the ROI of this

00:32:59,309 --> 00:33:05,879
really starts to pay off but it's still

00:33:02,369 --> 00:33:07,529
not one-size-fits-all every project use

00:33:05,879 --> 00:33:09,659
do spin up you probably still need to

00:33:07,529 --> 00:33:12,169
look at it and say okay I can use

00:33:09,659 --> 00:33:14,909
scaffold for every of one of my projects

00:33:12,169 --> 00:33:17,190
but this particular project deploys this

00:33:14,909 --> 00:33:18,359
way and this one deploys that way so we

00:33:17,190 --> 00:33:20,549
have to do this a little bit differently

00:33:18,359 --> 00:33:21,509
every step of this may be a little bit

00:33:20,549 --> 00:33:23,070
different depending on what you're doing

00:33:21,509 --> 00:33:23,309
so you really do have to spend a little

00:33:23,070 --> 00:33:25,950
bit of

00:33:23,309 --> 00:33:28,830
I'm still at the beginning to make sure

00:33:25,950 --> 00:33:32,190
that's all correct and not everything

00:33:28,830 --> 00:33:34,169
needs automation some of this stuff you

00:33:32,190 --> 00:33:35,279
you simply might not want to do if I

00:33:34,169 --> 00:33:38,249
have one plug-in then I'm going to

00:33:35,279 --> 00:33:39,990
deploy three times for a campaign that

00:33:38,249 --> 00:33:41,700
lasts two weeks I am NOT gonna spend

00:33:39,990 --> 00:33:42,929
time writing make files and automating

00:33:41,700 --> 00:33:45,629
all that process I'm gonna do it

00:33:42,929 --> 00:33:46,950
manually and be done with it and two

00:33:45,629 --> 00:33:48,960
weeks later and just forget about it

00:33:46,950 --> 00:33:50,549
until I probably need it again three

00:33:48,960 --> 00:33:51,629
years and wonder three years later and

00:33:50,549 --> 00:33:54,570
wonder what I did with it

00:33:51,629 --> 00:33:56,249
but it's not for every project it's not

00:33:54,570 --> 00:33:57,629
something I don't want people going home

00:33:56,249 --> 00:33:59,309
and saying well he said I needed to

00:33:57,629 --> 00:34:02,429
automate everything I do with this now

00:33:59,309 --> 00:34:03,480
start with one step maybe it's depending

00:34:02,429 --> 00:34:05,249
on where you're at in your own process

00:34:03,480 --> 00:34:07,350
maybe it's just adding unit tests to it

00:34:05,249 --> 00:34:08,940
run the scaffold command on your unit

00:34:07,350 --> 00:34:11,339
test for theme or plugin and see what

00:34:08,940 --> 00:34:13,020
you get start writing some tests for the

00:34:11,339 --> 00:34:15,990
for the low-hanging fruit that you have

00:34:13,020 --> 00:34:18,179
out there every time we release somebody

00:34:15,990 --> 00:34:19,800
breaks this this part of my theme or

00:34:18,179 --> 00:34:22,349
plugin write a test for that

00:34:19,800 --> 00:34:23,790
so before you release next time you can

00:34:22,349 --> 00:34:26,369
test to see if it's been broken on that

00:34:23,790 --> 00:34:28,379
particular build that's a great way to

00:34:26,369 --> 00:34:31,919
start with this type of thing it touches

00:34:28,379 --> 00:34:33,300
a lot of different areas that's what I

00:34:31,919 --> 00:34:34,649
have there's a lot to say there's a lot

00:34:33,300 --> 00:34:35,819
of different ways to do this I'll take

00:34:34,649 --> 00:34:37,079
some questions here and I will be

00:34:35,819 --> 00:34:40,069
available in the happiness bar

00:34:37,079 --> 00:34:40,069
afterwards mam

00:34:49,349 --> 00:34:52,960
the question is do I have any tips for

00:34:51,520 --> 00:34:54,819
JavaScript sites that are running low

00:34:52,960 --> 00:34:58,329
with heavy plugins such as revolution

00:34:54,819 --> 00:35:00,220
slider oftentimes I tend to stick more

00:34:58,329 --> 00:35:01,720
to the PHP layer so I can give you is

00:35:00,220 --> 00:35:03,880
starting to look at what functions are

00:35:01,720 --> 00:35:06,579
there and I'll use X to bug to actually

00:35:03,880 --> 00:35:08,440
see which JavaScript calls back or slow

00:35:06,579 --> 00:35:10,150
because typically even with JavaScript

00:35:08,440 --> 00:35:12,460
it's not the JavaScript running locally

00:35:10,150 --> 00:35:14,619
on the clients browser

00:35:12,460 --> 00:35:16,119
it's those JavaScript calls back to

00:35:14,619 --> 00:35:19,210
retrieve all the images and say

00:35:16,119 --> 00:35:20,950
revolution Pro or something else so

00:35:19,210 --> 00:35:22,630
maybe it's as simple as in revolution

00:35:20,950 --> 00:35:24,790
Pro is saying well this page is running

00:35:22,630 --> 00:35:26,859
200 images and they're hiding this one

00:35:24,790 --> 00:35:28,180
section so we don't see it but if you

00:35:26,859 --> 00:35:30,430
use something like X to bug and watch

00:35:28,180 --> 00:35:32,710
your your console to see what calls it's

00:35:30,430 --> 00:35:34,750
making back you can quite quickly see oh

00:35:32,710 --> 00:35:36,760
this is where that callback is being is

00:35:34,750 --> 00:35:38,770
happening this is where it's slow and

00:35:36,760 --> 00:35:40,990
then start digging deeper from there

00:35:38,770 --> 00:35:43,329
typically with like say an XD bug or

00:35:40,990 --> 00:35:46,260
whatever your step debugger or profiler

00:35:43,329 --> 00:35:46,260
is does that make sense

00:35:56,090 --> 00:36:00,420
the the the plugin examples will it will

00:35:58,830 --> 00:36:07,260
it work for any type of wordpress is

00:36:00,420 --> 00:36:08,880
that the question okay if you don't want

00:36:07,260 --> 00:36:10,320
to do just a standard post type or

00:36:08,880 --> 00:36:11,700
something it's gonna appear in a theme

00:36:10,320 --> 00:36:14,400
can you use it for other things yes you

00:36:11,700 --> 00:36:15,870
can you can run a plug-in to you know

00:36:14,400 --> 00:36:17,610
maybe you're working with graph QL and

00:36:15,870 --> 00:36:19,680
you're building something in addition to

00:36:17,610 --> 00:36:21,150
graph QL you could scaffold the plug-in

00:36:19,680 --> 00:36:23,450
and then use it from there in order to

00:36:21,150 --> 00:36:25,290
integrate back into graph QL or

00:36:23,450 --> 00:36:36,090
elasticsearch or whatever your

00:36:25,290 --> 00:36:37,830
technology might be sir do I have

00:36:36,090 --> 00:36:39,360
recommended resources for learning to

00:36:37,830 --> 00:36:41,700
use make or some of these other tools

00:36:39,360 --> 00:36:43,590
the best thing I've done and where most

00:36:41,700 --> 00:36:45,960
of where I got started with this is ten

00:36:43,590 --> 00:36:48,270
ups github and some of the bigger

00:36:45,960 --> 00:36:50,690
WordPress agencies ten up automatic that

00:36:48,270 --> 00:36:56,340
puts that puts things out modern tribe

00:36:50,690 --> 00:36:58,500
web dev studios WP engine what did they

00:36:56,340 --> 00:37:00,900
do on on a plugin I'll find a plug and

00:36:58,500 --> 00:37:02,400
they built or a theme they built and see

00:37:00,900 --> 00:37:02,880
how they did it and that's really where

00:37:02,400 --> 00:37:04,920
I started

00:37:02,880 --> 00:37:06,480
especially ten ups code they're putting

00:37:04,920 --> 00:37:08,520
out a lot of open source code right now

00:37:06,480 --> 00:37:09,990
and had some of the most valuable I mean

00:37:08,520 --> 00:37:11,730
I've even used some of their examples

00:37:09,990 --> 00:37:17,090
throughout they've had some of the most

00:37:11,730 --> 00:37:17,090
valuable ones I've seen sir

00:37:25,420 --> 00:37:31,700
sure the question is he uses they use WP

00:37:29,000 --> 00:37:33,410
engine what does deb kit offer may 30th

00:37:31,700 --> 00:37:35,570
is our target launch date for a CLI

00:37:33,410 --> 00:37:36,710
client which will basically replicate

00:37:35,570 --> 00:37:38,900
all the functions like a local by

00:37:36,710 --> 00:37:44,120
flywheel or map or something like that

00:37:38,900 --> 00:37:46,370
sink a site down push a site up xt bugs

00:37:44,120 --> 00:37:49,040
built in we have mid and proxy which

00:37:46,370 --> 00:37:50,660
minim proxies a tool that'll if you have

00:37:49,040 --> 00:37:52,940
a social media plugin that posts and you

00:37:50,660 --> 00:37:53,960
write test post and your client is apple

00:37:52,940 --> 00:37:55,970
and you don't want it to go out to their

00:37:53,960 --> 00:37:59,270
twitter account it'll intercept all of

00:37:55,970 --> 00:38:01,010
that stuff intercept email is going out

00:37:59,270 --> 00:38:02,900
you know all the basic developer tools

00:38:01,010 --> 00:38:04,490
it's a it's a complete local stack built

00:38:02,900 --> 00:38:08,390
on docker that'll initially work on

00:38:04,490 --> 00:38:09,770
linux and mac GUI to follow before a 1.0

00:38:08,390 --> 00:38:12,940
we're starting with a CLI and we're

00:38:09,770 --> 00:38:12,940
gonna build a GUI on top of it

00:38:13,780 --> 00:38:38,300
any other questions sir yep which you

00:38:36,860 --> 00:38:40,970
would typically replaces you read place

00:38:38,300 --> 00:38:43,460
instead of WP / scaffold plugin it would

00:38:40,970 --> 00:38:44,900
be WP scaffold my plugin and then

00:38:43,460 --> 00:38:46,580
whatever you want to push into it and

00:38:44,900 --> 00:38:49,370
you do that simply by writing a new WP

00:38:46,580 --> 00:38:51,710
CLI command the nice thing about WP CLI

00:38:49,370 --> 00:38:52,850
is if you if you look at WordPress stop

00:38:51,710 --> 00:38:54,910
TV I actually have a talk I give

00:38:52,850 --> 00:38:57,500
completely unright a new WP CLI commands

00:38:54,910 --> 00:38:59,990
but it's it's a fairly simple plugin

00:38:57,500 --> 00:39:01,370
that you can write and store in various

00:38:59,990 --> 00:39:09,760
places to be able to handle that for you

00:39:01,370 --> 00:39:09,760
rather quickly any other questions mam

00:39:14,840 --> 00:39:20,690
can the scaffolding handle we're in the

00:39:17,840 --> 00:39:24,170
WordPress admin the plugin appears yes

00:39:20,690 --> 00:39:26,240
and no the default scaffolding nothing

00:39:24,170 --> 00:39:28,400
appears at all other than it'll appear

00:39:26,240 --> 00:39:30,080
and can I activate this plugin you can

00:39:28,400 --> 00:39:33,170
hit activate but there's no code there

00:39:30,080 --> 00:39:36,980
yet perhaps your own scaffold that the

00:39:33,170 --> 00:39:38,780
scaffold we built for UF had quite a bit

00:39:36,980 --> 00:39:40,130
of settings set up and things like that

00:39:38,780 --> 00:39:42,440
so it depends on what scaffolding you're

00:39:40,130 --> 00:39:47,500
using but the base scaffolding does not

00:39:42,440 --> 00:39:55,030
write any Co actual function correct I

00:39:47,500 --> 00:39:58,750
think we have time for one more or not

00:39:55,030 --> 00:40:00,620
what's the link for the presentation I

00:39:58,750 --> 00:40:06,140
realized I was pressing the button the

00:40:00,620 --> 00:40:12,770
wrong direction sorry about that WI eg

00:40:06,140 --> 00:40:14,450
that's Co /wc atl 19 well thank you

00:40:12,770 --> 00:40:16,010
everybody it's coming out I will be in

00:40:14,450 --> 00:40:18,730
the happiness bar this afternoon for any

00:40:16,010 --> 00:40:18,730

YouTube URL: https://www.youtube.com/watch?v=F_cjsVNPEIg


