Title: Micah Wood: Basic Principles of Software Architecture
Publication date: 2019-09-08
Playlist: WordCamp Atlanta 2019
Description: 
	Do you constantly feel like you are hacking code together? Do you find it difficult to maintain, adapt or even read code youâ€™ve written previously? Chances are, you are not taking into consideration some of the basic principles of software architecture. Come learn how some simple habits and changes in perspective can transform you from a 1x developer to a 10x developer!

WPTV link: https://wordpress.tv/2019/07/07/micah-wood-basic-principles-of-software-architecture-2/
Captions: 
	00:00:00,800 --> 00:00:02,909
[Applause]

00:00:03,740 --> 00:00:09,630
thank you

00:00:05,160 --> 00:00:12,389
so yeah so my name is Micah Doug piece

00:00:09,630 --> 00:00:15,780
caller is how you find me just Google

00:00:12,389 --> 00:00:19,500
that you'll find me so basically I work

00:00:15,780 --> 00:00:23,430
at Bluehost and so I'm lucky enough to

00:00:19,500 --> 00:00:26,310
get to contribute to core most of the

00:00:23,430 --> 00:00:27,660
time I spend is contributing to core as

00:00:26,310 --> 00:00:30,539
well as I work on some internal stuff

00:00:27,660 --> 00:00:33,840
for Bluehost before that I was doing a

00:00:30,539 --> 00:00:37,500
lot of enterprise WordPress development

00:00:33,840 --> 00:00:42,690
so that was a lot of fun very

00:00:37,500 --> 00:00:45,809
interesting was able to you know flex my

00:00:42,690 --> 00:00:49,079
architecture and and WordPress muscles I

00:00:45,809 --> 00:00:50,489
guess so yeah so we're going to talk

00:00:49,079 --> 00:00:52,199
about the basic principle of software

00:00:50,489 --> 00:00:56,579
architecture so this the point of this

00:00:52,199 --> 00:00:59,640
is not to go super deep but also try to

00:00:56,579 --> 00:01:02,219
focus on the the key aspects of really

00:00:59,640 --> 00:01:04,170
thinking through and putting software

00:01:02,219 --> 00:01:07,909
together in a way that will make sense

00:01:04,170 --> 00:01:11,340
and be robust and more forward-thinking

00:01:07,909 --> 00:01:13,439
so if we look at the overall software

00:01:11,340 --> 00:01:15,689
development lifecycle we kind of have

00:01:13,439 --> 00:01:17,189
these five basic parts right we have the

00:01:15,689 --> 00:01:20,100
requirements you know what is it that

00:01:17,189 --> 00:01:22,470
we're trying to build you have the

00:01:20,100 --> 00:01:24,740
design how should we build it the

00:01:22,470 --> 00:01:27,570
implementation where you actually do it

00:01:24,740 --> 00:01:29,220
QA which of course is checking to make

00:01:27,570 --> 00:01:31,799
sure you actually did what you wanted to

00:01:29,220 --> 00:01:33,420
do and then maintenance is trying to

00:01:31,799 --> 00:01:37,100
essentially keep it effective keep it

00:01:33,420 --> 00:01:40,759
long term effective for the client so

00:01:37,100 --> 00:01:44,130
most of the time when you work with

00:01:40,759 --> 00:01:46,380
agencies or people who are just kind of

00:01:44,130 --> 00:01:47,759
get stuff out the door a lot of times

00:01:46,380 --> 00:01:50,280
they just do the things that are on the

00:01:47,759 --> 00:01:52,290
top they give you the requirements you

00:01:50,280 --> 00:01:54,329
build the thing and then they maintain

00:01:52,290 --> 00:01:57,540
it right and so the the whole bottom

00:01:54,329 --> 00:02:00,420
half sometimes gets skipped over no

00:01:57,540 --> 00:02:03,240
agencies like to cover their rear so

00:02:00,420 --> 00:02:05,880
they'll throw in some QA you know some

00:02:03,240 --> 00:02:08,099
basic QA or something but a lot of times

00:02:05,880 --> 00:02:09,750
the design of you know how should we

00:02:08,099 --> 00:02:10,379
build this thing before we actually get

00:02:09,750 --> 00:02:11,860
started on it

00:02:10,379 --> 00:02:15,210
gets overlooked

00:02:11,860 --> 00:02:18,190
and so really just making space for that

00:02:15,210 --> 00:02:20,740
that stage is probably one of the

00:02:18,190 --> 00:02:22,240
biggest things you can do to go in the

00:02:20,740 --> 00:02:25,290
right direction with designing your

00:02:22,240 --> 00:02:28,150
systems right actually design them so

00:02:25,290 --> 00:02:29,950
but outside of that taking a look at

00:02:28,150 --> 00:02:32,980
what are the key things that clients

00:02:29,950 --> 00:02:34,300
care about will help us to kind of focus

00:02:32,980 --> 00:02:36,910
our efforts in there in the right

00:02:34,300 --> 00:02:38,980
direction so one of the first things

00:02:36,910 --> 00:02:41,560
that obviously all clients care about is

00:02:38,980 --> 00:02:46,480
what things cost right if it's too

00:02:41,560 --> 00:02:48,030
expensive or maybe too cheap they're a

00:02:46,480 --> 00:02:50,650
little leery about what they're gonna do

00:02:48,030 --> 00:02:52,750
and then they care about the timeline if

00:02:50,650 --> 00:02:54,010
if they're expecting to get something

00:02:52,750 --> 00:02:54,160
done in a week they want it done in a

00:02:54,010 --> 00:02:57,610
week

00:02:54,160 --> 00:02:59,110
not in a year not in a month but at the

00:02:57,610 --> 00:03:01,840
same time there are certain things that

00:02:59,110 --> 00:03:03,610
are definitely going to take longer and

00:03:01,840 --> 00:03:05,260
then of course the effectiveness right

00:03:03,610 --> 00:03:08,350
so the effectiveness for the client now

00:03:05,260 --> 00:03:10,150
is it going to work for them immediately

00:03:08,350 --> 00:03:13,120
is it going to work for them a month

00:03:10,150 --> 00:03:15,220
from now you know and then after you

00:03:13,120 --> 00:03:16,840
leave is someone else going to be able

00:03:15,220 --> 00:03:21,220
to continue to maintain that

00:03:16,840 --> 00:03:24,070
effectiveness and the the business be

00:03:21,220 --> 00:03:28,060
able to make money continually off of

00:03:24,070 --> 00:03:30,640
whatever it is you've built so the first

00:03:28,060 --> 00:03:34,720
two things the time and the cost are

00:03:30,640 --> 00:03:37,150
heavily impacted by the points in the

00:03:34,720 --> 00:03:39,130
design phase or implementation or

00:03:37,150 --> 00:03:41,620
delivery phases here in which things

00:03:39,130 --> 00:03:46,930
happen right so the earlier that a

00:03:41,620 --> 00:03:48,550
change to the requirements or and

00:03:46,930 --> 00:03:49,720
sometimes it's not just a change to the

00:03:48,550 --> 00:03:52,840
requirements sometimes it's just

00:03:49,720 --> 00:03:55,960
identifying that requirement that you

00:03:52,840 --> 00:03:57,580
know kind of went undetected right it

00:03:55,960 --> 00:04:01,300
was an unspoken the client assumed

00:03:57,580 --> 00:04:02,620
something but you know until enquiring

00:04:01,300 --> 00:04:05,920
Minds come along and ask the right

00:04:02,620 --> 00:04:07,840
questions we don't know about this

00:04:05,920 --> 00:04:12,250
particular thing and it could heavily

00:04:07,840 --> 00:04:14,709
impact how we design our software so the

00:04:12,250 --> 00:04:15,910
earlier in the stage the better so if

00:04:14,709 --> 00:04:18,790
you can catch it in the design phase

00:04:15,910 --> 00:04:20,320
you'll be able to make your change

00:04:18,790 --> 00:04:23,229
quickly and easily because it's all just

00:04:20,320 --> 00:04:24,510
on paper is just documentation no code

00:04:23,229 --> 00:04:27,300
has been written

00:04:24,510 --> 00:04:28,590
no QA tests have been done but if you

00:04:27,300 --> 00:04:30,600
detect it during the implementation

00:04:28,590 --> 00:04:32,700
phase which of course if you've already

00:04:30,600 --> 00:04:33,390
skipped the design phase and not done

00:04:32,700 --> 00:04:35,880
that at all

00:04:33,390 --> 00:04:37,950
you're already behind on the curve right

00:04:35,880 --> 00:04:40,290
so so if you catch it in the

00:04:37,950 --> 00:04:41,280
implementation phase it's gonna cost

00:04:40,290 --> 00:04:42,480
more money because you've already

00:04:41,280 --> 00:04:43,380
written code you have to go back and

00:04:42,480 --> 00:04:45,690
change it

00:04:43,380 --> 00:04:47,220
as well as making sure everybody's on

00:04:45,690 --> 00:04:48,660
the same page about the fact that it

00:04:47,220 --> 00:04:51,180
changed maybe you got three developers

00:04:48,660 --> 00:04:52,590
on the project now not only do you you

00:04:51,180 --> 00:04:53,760
have to have somebody change the code

00:04:52,590 --> 00:04:57,030
but you have to explain to the other

00:04:53,760 --> 00:05:00,240
developers why the code changed and then

00:04:57,030 --> 00:05:01,770
at the delivery obviously that is when

00:05:00,240 --> 00:05:06,000
it's going to cost the most time and

00:05:01,770 --> 00:05:08,400
effort to change it and so and of course

00:05:06,000 --> 00:05:11,670
really the what we're talking about here

00:05:08,400 --> 00:05:13,350
is most of these changes are just going

00:05:11,670 --> 00:05:15,780
to take lots of time and so that

00:05:13,350 --> 00:05:17,280
translates not just to extending the

00:05:15,780 --> 00:05:19,950
time line but also to the cost of the

00:05:17,280 --> 00:05:24,300
client for all the hours and work that

00:05:19,950 --> 00:05:25,980
goes into it so so really the the timing

00:05:24,300 --> 00:05:27,480
cost we kind of understand how that

00:05:25,980 --> 00:05:31,290
works we understand that we have to

00:05:27,480 --> 00:05:32,910
catch these things early so that kind of

00:05:31,290 --> 00:05:35,490
leaves the biggest kind of open-ended

00:05:32,910 --> 00:05:37,020
thing as the effectiveness right what

00:05:35,490 --> 00:05:40,890
makes something effective how do we keep

00:05:37,020 --> 00:05:42,420
it effective how does that work so in

00:05:40,890 --> 00:05:43,980
order for something to be effective

00:05:42,420 --> 00:05:45,930
first it actually has to solve the

00:05:43,980 --> 00:05:49,890
problem right the client comes they have

00:05:45,930 --> 00:05:52,440
a problem we have a solution and then

00:05:49,890 --> 00:05:54,360
once we've put the solution together we

00:05:52,440 --> 00:05:56,550
want to make sure that it's easy

00:05:54,360 --> 00:05:58,860
maintain long-term right so if we can

00:05:56,550 --> 00:06:02,970
create a solution that works today but

00:05:58,860 --> 00:06:05,520
you can't actually make any changes to

00:06:02,970 --> 00:06:09,840
it in the future that is going to be

00:06:05,520 --> 00:06:11,250
worth not a lot to the business because

00:06:09,840 --> 00:06:14,070
they're gonna have to rewrite it and pay

00:06:11,250 --> 00:06:17,340
more money all over again later to redo

00:06:14,070 --> 00:06:20,340
it so we want to make sure that we focus

00:06:17,340 --> 00:06:22,770
not just on the now but on making sure

00:06:20,340 --> 00:06:25,230
it's easy to maintain and in to some

00:06:22,770 --> 00:06:28,020
degree you know we see this a lot in

00:06:25,230 --> 00:06:31,860
WordPress where somebody creates a theme

00:06:28,020 --> 00:06:34,470
or some sort of thing for a client that

00:06:31,860 --> 00:06:37,860
client is happy but then they decide

00:06:34,470 --> 00:06:41,879
that maybe things aren't performant or

00:06:37,860 --> 00:06:44,340
not exact sciences problem is that the

00:06:41,879 --> 00:06:45,750
developer who did it is now busy or off

00:06:44,340 --> 00:06:47,939
doing other things so they have to find

00:06:45,750 --> 00:06:50,849
somebody new the new developer says oh I

00:06:47,939 --> 00:06:53,280
can't can't that's that's not why we

00:06:50,849 --> 00:06:55,620
work we're gonna do scrap this and start

00:06:53,280 --> 00:06:57,810
over so you've seen a lot more than once

00:06:55,620 --> 00:06:59,669
you start thinking about it where we

00:06:57,810 --> 00:07:01,349
kind of get something that solves a

00:06:59,669 --> 00:07:03,360
problem now but it's not easy to

00:07:01,349 --> 00:07:05,759
maintain other developers don't know

00:07:03,360 --> 00:07:08,430
what's going on with it you know they've

00:07:05,759 --> 00:07:10,199
got so many layers to the system so much

00:07:08,430 --> 00:07:11,400
complexity that no one else wants to

00:07:10,199 --> 00:07:13,620
work on it

00:07:11,400 --> 00:07:15,419
so that's part of the the problem that

00:07:13,620 --> 00:07:17,879
we have to resolve so there's an

00:07:15,419 --> 00:07:21,479
equation it's a real simple equation you

00:07:17,879 --> 00:07:23,159
just do in your head actually once you

00:07:21,479 --> 00:07:24,509
get more familiar with this it is

00:07:23,159 --> 00:07:26,430
something that you can kind of process a

00:07:24,509 --> 00:07:27,539
little bit in your head but having an

00:07:26,430 --> 00:07:30,389
equation where you can actually put

00:07:27,539 --> 00:07:34,080
dollar signs on all of these variables

00:07:30,389 --> 00:07:36,750
and be able to calculate you know when

00:07:34,080 --> 00:07:39,360
evaluating two different options what

00:07:36,750 --> 00:07:41,940
you should actually do or whether one

00:07:39,360 --> 00:07:43,560
solution is better than another it's

00:07:41,940 --> 00:07:46,560
good to have this in your back pocket so

00:07:43,560 --> 00:07:47,940
this is an equation if you want to know

00:07:46,560 --> 00:07:49,620
where we found it it's there's this

00:07:47,940 --> 00:07:51,509
great little book called code simplicity

00:07:49,620 --> 00:07:54,539
at the end of the slides which I'll

00:07:51,509 --> 00:07:56,069
share out after I have a list of books

00:07:54,539 --> 00:07:59,190
and things that I would highly recommend

00:07:56,069 --> 00:08:00,569
if you're interested in this topic but

00:07:59,190 --> 00:08:04,050
essentially what this says is that the

00:08:00,569 --> 00:08:07,680
desirability of a change is equal to the

00:08:04,050 --> 00:08:09,199
value of that change now plus the value

00:08:07,680 --> 00:08:12,479
of that change in the future

00:08:09,199 --> 00:08:15,180
divided by the effort of implementation

00:08:12,479 --> 00:08:17,129
plus effort of maintenance and the

00:08:15,180 --> 00:08:18,990
reality is that the effort of

00:08:17,129 --> 00:08:21,330
implementation is typically pretty low

00:08:18,990 --> 00:08:24,719
considering it's the effort of

00:08:21,330 --> 00:08:26,639
maintaining something long-term that is

00:08:24,719 --> 00:08:29,279
really the determining factor as to

00:08:26,639 --> 00:08:32,669
whether or not a particular change is a

00:08:29,279 --> 00:08:36,419
good solution or not so you want to make

00:08:32,669 --> 00:08:39,510
sure that that as you're making changes

00:08:36,419 --> 00:08:43,620
you have that focus on maintainability

00:08:39,510 --> 00:08:46,860
in the future so practically how do we

00:08:43,620 --> 00:08:49,050
focus on that maintainability aspect

00:08:46,860 --> 00:08:50,399
right how do we lower that portion of

00:08:49,050 --> 00:08:51,570
the equation to make all of the changes

00:08:50,399 --> 00:08:56,700
that we do more

00:08:51,570 --> 00:09:01,470
desirable so one thing just to keep in

00:08:56,700 --> 00:09:03,780
mind this isn't really like a well so

00:09:01,470 --> 00:09:06,570
technical debt is one of those things

00:09:03,780 --> 00:09:08,360
that you hear about we're essentially

00:09:06,570 --> 00:09:12,260
technical debt is nothing more than

00:09:08,360 --> 00:09:15,660
you've taken shortcuts in the code and

00:09:12,260 --> 00:09:18,810
ultimately what's happened is those

00:09:15,660 --> 00:09:22,140
shortcuts are costing you in maintenance

00:09:18,810 --> 00:09:24,780
right so those shortcuts are causing

00:09:22,140 --> 00:09:26,910
complexity in the code difficulties

00:09:24,780 --> 00:09:30,120
where when you go to maintain that code

00:09:26,910 --> 00:09:32,370
you have a hard time reading that code

00:09:30,120 --> 00:09:36,660
understanding that code being able to

00:09:32,370 --> 00:09:37,170
put additional layers on top of it plug

00:09:36,660 --> 00:09:39,960
into it

00:09:37,170 --> 00:09:44,760
those kinds of things so technical debt

00:09:39,960 --> 00:09:46,860
just like high credit card APRs will

00:09:44,760 --> 00:09:49,710
kill you so you want to make sure that

00:09:46,860 --> 00:09:52,350
for one try not to take those shortcuts

00:09:49,710 --> 00:09:54,810
try to focus on those things that will

00:09:52,350 --> 00:09:57,630
prevent you from incurring technical

00:09:54,810 --> 00:09:59,220
debt and some of those things are just

00:09:57,630 --> 00:10:01,560
keeping certain things like this in mind

00:09:59,220 --> 00:10:03,840
so the law of change basically what this

00:10:01,560 --> 00:10:06,300
says is that the longer that your

00:10:03,840 --> 00:10:07,910
program exists the more likely that any

00:10:06,300 --> 00:10:13,680
part of it is going to have to change

00:10:07,910 --> 00:10:16,280
and this is relatively obvious but when

00:10:13,680 --> 00:10:19,530
you think about it

00:10:16,280 --> 00:10:21,420
you know these these are they call them

00:10:19,530 --> 00:10:23,070
laws because essentially there's really

00:10:21,420 --> 00:10:24,960
no way around it right

00:10:23,070 --> 00:10:26,880
the longer the program exists the more

00:10:24,960 --> 00:10:28,290
features the clients going to want the

00:10:26,880 --> 00:10:31,140
more things are going to be put into it

00:10:28,290 --> 00:10:33,540
and the more likely you know it's going

00:10:31,140 --> 00:10:37,140
to change so we also have the law of

00:10:33,540 --> 00:10:39,510
defect probability so this is because of

00:10:37,140 --> 00:10:42,630
the law of change right so we know that

00:10:39,510 --> 00:10:44,370
things are going to change so this law

00:10:42,630 --> 00:10:46,320
basically says that the chance of

00:10:44,370 --> 00:10:47,910
introducing a defect is proportional to

00:10:46,320 --> 00:10:51,810
the size of the changes that you make

00:10:47,910 --> 00:10:54,090
right so when we have an option to add a

00:10:51,810 --> 00:10:55,650
feature and we can make a change that's

00:10:54,090 --> 00:10:58,110
small or we can make a change that kind

00:10:55,650 --> 00:11:00,120
of affects multiple files in the code as

00:10:58,110 --> 00:11:02,700
opposed to just one the chances of

00:11:00,120 --> 00:11:04,440
defects go up significantly if you have

00:11:02,700 --> 00:11:05,639
to touch five files as opposed to touch

00:11:04,440 --> 00:11:07,759
just one

00:11:05,639 --> 00:11:09,660
so again as you can see these are

00:11:07,759 --> 00:11:12,449
starting to make a little bit more sense

00:11:09,660 --> 00:11:14,639
as we look at them and then we have the

00:11:12,449 --> 00:11:16,139
law of simplicity which basically says

00:11:14,639 --> 00:11:17,910
that the ease of your maintenance is

00:11:16,139 --> 00:11:20,490
proportional to the simplicity of the

00:11:17,910 --> 00:11:22,649
individual pieces so the simpler we can

00:11:20,490 --> 00:11:24,750
make it the individual pieces the more

00:11:22,649 --> 00:11:27,180
confined we can keep the logic and

00:11:24,750 --> 00:11:30,360
prevent things from touching multiple

00:11:27,180 --> 00:11:31,439
files or spanning across classes all

00:11:30,360 --> 00:11:35,670
over the place

00:11:31,439 --> 00:11:37,009
then the easier maintenance will be so

00:11:35,670 --> 00:11:39,930
when you're designing a system

00:11:37,009 --> 00:11:42,149
simplicity is key you want to make sure

00:11:39,930 --> 00:11:44,069
that it's easy to understand easy to

00:11:42,149 --> 00:11:47,160
modify and then easy to test

00:11:44,069 --> 00:11:51,149
so those sound simple but there are some

00:11:47,160 --> 00:11:54,360
things that will definitely help you do

00:11:51,149 --> 00:11:58,259
that better so one of these is

00:11:54,360 --> 00:12:01,170
self-documenting code I think most

00:11:58,259 --> 00:12:05,069
people get the concept of naming things

00:12:01,170 --> 00:12:07,139
clearly and that kind of thing a lot of

00:12:05,069 --> 00:12:11,639
times we'll write functions and we'll

00:12:07,139 --> 00:12:13,290
put a documentation just above that

00:12:11,639 --> 00:12:15,360
function in the code that kind of

00:12:13,290 --> 00:12:16,620
documents what that code does and then

00:12:15,360 --> 00:12:17,970
what happens is somebody will come and

00:12:16,620 --> 00:12:20,009
change the code and not update the

00:12:17,970 --> 00:12:22,829
documentation so what you end up with is

00:12:20,009 --> 00:12:25,290
documentation that just lies to you and

00:12:22,829 --> 00:12:27,990
you know it's it's an easy mistake to

00:12:25,290 --> 00:12:29,850
make right you forget that to update the

00:12:27,990 --> 00:12:31,199
documentation you make a change you just

00:12:29,850 --> 00:12:33,000
want to test it and make sure it works

00:12:31,199 --> 00:12:35,459
before you actually go changing

00:12:33,000 --> 00:12:38,009
documentation so it's easy thing to

00:12:35,459 --> 00:12:39,930
forget so really the best thing that you

00:12:38,009 --> 00:12:43,079
can do is make sure that the code itself

00:12:39,930 --> 00:12:45,240
is documenting itself as much as

00:12:43,079 --> 00:12:48,230
possible and the way that you do this is

00:12:45,240 --> 00:12:52,439
just making sure that instead of using

00:12:48,230 --> 00:12:55,290
vague or super abbreviated variable

00:12:52,439 --> 00:12:57,629
names or function names that you make

00:12:55,290 --> 00:12:59,819
them maybe a little longer just to make

00:12:57,629 --> 00:13:02,759
them a little clearer right so if you're

00:12:59,819 --> 00:13:08,160
reading an if statement and it says if

00:13:02,759 --> 00:13:13,709
faults equals stir pause you know dollar

00:13:08,160 --> 00:13:16,259
sign post whatever you know that's hard

00:13:13,709 --> 00:13:18,269
to read but if if you've created a

00:13:16,259 --> 00:13:18,899
little function that has a very clear

00:13:18,269 --> 00:13:23,550
name

00:13:18,899 --> 00:13:25,230
like if you knowif post type is or

00:13:23,550 --> 00:13:26,550
something like that and you and you have

00:13:25,230 --> 00:13:29,610
that function then when you write your

00:13:26,550 --> 00:13:32,939
if statement now you're saying if this

00:13:29,610 --> 00:13:35,329
post is of post type it's a little it's

00:13:32,939 --> 00:13:37,499
a lot easier to read so clear naming

00:13:35,329 --> 00:13:39,959
sectioning those things off into small

00:13:37,499 --> 00:13:41,879
specific functions that you can use in

00:13:39,959 --> 00:13:44,639
ways that are just very clear and easy

00:13:41,879 --> 00:13:45,569
to read because we all know that in six

00:13:44,639 --> 00:13:47,610
months we're going to have to come back

00:13:45,569 --> 00:13:49,309
and change this code and if you can't

00:13:47,610 --> 00:13:52,170
understand it

00:13:49,309 --> 00:13:57,269
God knows no one else will understand it

00:13:52,170 --> 00:13:58,769
either so so then this is another big

00:13:57,269 --> 00:14:02,269
one here is making sure that you limit

00:13:58,769 --> 00:14:05,509
the cognitive load and so this is

00:14:02,269 --> 00:14:08,459
important because studies have been done

00:14:05,509 --> 00:14:10,649
your brain can only hold so much in

00:14:08,459 --> 00:14:14,429
memory at any given time right so we've

00:14:10,649 --> 00:14:17,699
probably all encountered software

00:14:14,429 --> 00:14:19,860
solutions where you end up starting to

00:14:17,699 --> 00:14:22,259
dig into a problem and you realize okay

00:14:19,860 --> 00:14:24,720
so we have this this thing here I

00:14:22,259 --> 00:14:26,600
understand this but it's a somehow

00:14:24,720 --> 00:14:28,980
linked to this little function over here

00:14:26,600 --> 00:14:30,749
so let me look into that but that little

00:14:28,980 --> 00:14:32,699
function links off to this thing here

00:14:30,749 --> 00:14:34,649
and that thing there and then those two

00:14:32,699 --> 00:14:36,720
things happen to link out somewhere else

00:14:34,649 --> 00:14:39,809
which circles back around here but this

00:14:36,720 --> 00:14:40,949
one goes off somewhere else and so in

00:14:39,809 --> 00:14:43,800
the end you're sitting there you're like

00:14:40,949 --> 00:14:45,809
okay so wait a minute well where did we

00:14:43,800 --> 00:14:49,230
start and so it's really hard to keep

00:14:45,809 --> 00:14:52,740
track if if you have this wide spanning

00:14:49,230 --> 00:14:55,559
array of things right so consolidating

00:14:52,740 --> 00:14:57,839
the logic into one place makes it a

00:14:55,559 --> 00:14:59,220
easier to follow and limits your

00:14:57,839 --> 00:15:01,740
cognitive load because you can only keep

00:14:59,220 --> 00:15:04,439
so much in your mind this is why when we

00:15:01,740 --> 00:15:07,079
do code review they say to limit your

00:15:04,439 --> 00:15:08,639
code review to 200 lines of code if you

00:15:07,079 --> 00:15:11,549
get more than 200 lines of code in a

00:15:08,639 --> 00:15:13,350
code review you're going to get really

00:15:11,549 --> 00:15:16,769
bad code reviews people are going to

00:15:13,350 --> 00:15:18,059
miss things I've seen plenty of code

00:15:16,769 --> 00:15:21,360
reviews come through or somebody just

00:15:18,059 --> 00:15:23,429
had a die in the in the code and they

00:15:21,360 --> 00:15:25,139
forgot to take it out but nobody picked

00:15:23,429 --> 00:15:28,620
it up because they had submitted a

00:15:25,139 --> 00:15:30,120
thousand line change and somebody was

00:15:28,620 --> 00:15:31,769
just kind of reading through it and it's

00:15:30,120 --> 00:15:32,640
easy to miss that kind of thing right so

00:15:31,769 --> 00:15:34,709
if you can

00:15:32,640 --> 00:15:36,209
the cognitive load it'll make a lot

00:15:34,709 --> 00:15:37,500
easier to understand the system it will

00:15:36,209 --> 00:15:38,910
make it a lot easier for other people to

00:15:37,500 --> 00:15:41,910
understand the system some people are

00:15:38,910 --> 00:15:45,510
better at at having more in their mind

00:15:41,910 --> 00:15:48,050
of the system than others so we want to

00:15:45,510 --> 00:15:50,730
make sure that even if we happen to be

00:15:48,050 --> 00:15:53,370
have that particular ability that we try

00:15:50,730 --> 00:15:54,570
to restrict that as much as possible the

00:15:53,370 --> 00:15:57,029
other thing is making sure that we have

00:15:54,570 --> 00:15:58,890
clear boundaries right so if we have

00:15:57,029 --> 00:16:01,370
clear boundaries in our system that

00:15:58,890 --> 00:16:04,220
means that we're not going to have

00:16:01,370 --> 00:16:07,260
multiple things that span off into other

00:16:04,220 --> 00:16:09,720
other classes or other modules or other

00:16:07,260 --> 00:16:12,300
things like that we'll have clear

00:16:09,720 --> 00:16:14,100
boundary where this module connects to

00:16:12,300 --> 00:16:17,930
this module but only by this one

00:16:14,100 --> 00:16:21,209
particular function call or simple API

00:16:17,930 --> 00:16:25,260
and it'll be a lot easier to mentally

00:16:21,209 --> 00:16:29,610
track that so that is a big big thing to

00:16:25,260 --> 00:16:34,680
keep in mind we've all heard this don't

00:16:29,610 --> 00:16:36,390
repeat yourself so I like to start with

00:16:34,680 --> 00:16:38,640
this Latin proverb repetition is the

00:16:36,390 --> 00:16:41,459
mother of learning repeating yourself is

00:16:38,640 --> 00:16:43,050
good when you're learning right but

00:16:41,459 --> 00:16:46,560
every programmer ever will tell you

00:16:43,050 --> 00:16:49,470
don't repeat yourself so you know you

00:16:46,560 --> 00:16:52,470
write code somebody says I see you have

00:16:49,470 --> 00:16:54,899
the same conditional here as you have

00:16:52,470 --> 00:16:55,980
here why don't you create a function for

00:16:54,899 --> 00:16:58,680
that conditional and use it in both

00:16:55,980 --> 00:17:01,740
places and in certain cases that makes

00:16:58,680 --> 00:17:03,660
sense right but this is there's a myth

00:17:01,740 --> 00:17:05,429
the myth is that if I was a good coder

00:17:03,660 --> 00:17:07,169
then all the code I would write would be

00:17:05,429 --> 00:17:09,809
dry and there wouldn't be a need for all

00:17:07,169 --> 00:17:12,240
this repetition right so we all

00:17:09,809 --> 00:17:14,610
encounter repetition in our code and

00:17:12,240 --> 00:17:17,549
sometimes we allow it sometimes we don't

00:17:14,610 --> 00:17:20,910
and in certain cases it's actually good

00:17:17,549 --> 00:17:25,020
when we take a look at where this rule

00:17:20,910 --> 00:17:27,449
essentially came from back in 1960s I

00:17:25,020 --> 00:17:30,960
believe it was the book the pragmatic

00:17:27,449 --> 00:17:32,340
programmer is basically where this came

00:17:30,960 --> 00:17:34,340
from so it says that every piece of

00:17:32,340 --> 00:17:37,290
knowledge must have a single unambiguous

00:17:34,340 --> 00:17:42,300
authoritative representation within a

00:17:37,290 --> 00:17:44,370
system so when we read that we we don't

00:17:42,300 --> 00:17:46,169
instantly think oh the DRI principle

00:17:44,370 --> 00:17:50,399
right it's very diff

00:17:46,169 --> 00:17:52,320
in statement but so I've thought of

00:17:50,399 --> 00:17:54,389
thought a bit about this and I think

00:17:52,320 --> 00:17:56,059
there's some clear distinctions to be

00:17:54,389 --> 00:18:00,179
made when you're thinking about

00:17:56,059 --> 00:18:02,909
repetition in your code so the first is

00:18:00,179 --> 00:18:04,739
that the DRI principle really a pro

00:18:02,909 --> 00:18:06,659
applies mostly to the duplication of

00:18:04,739 --> 00:18:08,460
knowledge so the duplication of

00:18:06,659 --> 00:18:12,720
knowledge is a violation of the DRI

00:18:08,460 --> 00:18:17,999
principle however duplication of code in

00:18:12,720 --> 00:18:20,309
general meaning well duplication of code

00:18:17,999 --> 00:18:22,649
in general is not a violation so the

00:18:20,309 --> 00:18:25,070
difference there is that knowledge is

00:18:22,649 --> 00:18:28,859
essentially data business logic

00:18:25,070 --> 00:18:33,799
algorithms anything that is essentially

00:18:28,859 --> 00:18:36,419
related to the business domain is

00:18:33,799 --> 00:18:38,279
important business logic that should not

00:18:36,419 --> 00:18:41,480
be replicated if you think about a

00:18:38,279 --> 00:18:44,429
shopping cart if you happen to have the

00:18:41,480 --> 00:18:47,429
shopping cart page and the checkout page

00:18:44,429 --> 00:18:49,759
and you have the logic for let's say

00:18:47,429 --> 00:18:52,739
removing an item from the cart or the

00:18:49,759 --> 00:18:58,259
you could do that from either page right

00:18:52,739 --> 00:19:00,059
if the code for each page ran a

00:18:58,259 --> 00:19:02,279
different function to remove the item

00:19:00,059 --> 00:19:04,220
you are duplicating the logic for

00:19:02,279 --> 00:19:07,590
removing an item from the shopping cart

00:19:04,220 --> 00:19:09,629
and obviously in doing that the next

00:19:07,590 --> 00:19:11,340
piece of logic you need to add related

00:19:09,629 --> 00:19:14,129
to removing an item from the shopping

00:19:11,340 --> 00:19:16,649
cart a developer may only do it in one

00:19:14,129 --> 00:19:17,970
place and then you have different logic

00:19:16,649 --> 00:19:22,169
happening in two different places so

00:19:17,970 --> 00:19:23,940
this is very easy to do but it's

00:19:22,169 --> 00:19:26,609
important to create the distinction that

00:19:23,940 --> 00:19:28,889
code includes variables code structures

00:19:26,609 --> 00:19:32,100
and function calls which it is perfectly

00:19:28,889 --> 00:19:36,809
fine to duplicate so if you happen to

00:19:32,100 --> 00:19:41,720
have for example an in VC structure that

00:19:36,809 --> 00:19:46,590
you use and maybe in one case you have a

00:19:41,720 --> 00:19:48,149
display for one particular post type in

00:19:46,590 --> 00:19:51,090
a display for another particular post

00:19:48,149 --> 00:19:53,220
type a lot of times when you see two

00:19:51,090 --> 00:19:55,859
post types that are very similar it's

00:19:53,220 --> 00:19:57,409
very tempting to merge those data store

00:19:55,859 --> 00:20:00,150
those code structures together

00:19:57,409 --> 00:20:04,710
because the logic and everything

00:20:00,150 --> 00:20:06,360
years to be the same but so there's kind

00:20:04,710 --> 00:20:08,370
of two sides to the coin here so the

00:20:06,360 --> 00:20:10,050
first one is something called premature

00:20:08,370 --> 00:20:12,090
optimization so this is where you

00:20:10,050 --> 00:20:14,850
essentially apply the dry principle

00:20:12,090 --> 00:20:19,740
before you need it and so you assume

00:20:14,850 --> 00:20:21,150
that there will be a assume that there's

00:20:19,740 --> 00:20:25,050
a duplication of knowledge and that you

00:20:21,150 --> 00:20:27,690
should fix it before it happens so

00:20:25,050 --> 00:20:30,420
that's kind of applies to the yagna

00:20:27,690 --> 00:20:33,030
principle you ain't going to need it and

00:20:30,420 --> 00:20:36,270
then we have essentially the opposite

00:20:33,030 --> 00:20:40,190
side of this which is where we apply to

00:20:36,270 --> 00:20:43,950
our coding structures the DRI principle

00:20:40,190 --> 00:20:46,770
when really they they do have different

00:20:43,950 --> 00:20:48,600
applications right so if you have kind

00:20:46,770 --> 00:20:51,900
of this MVC structure or something for

00:20:48,600 --> 00:20:54,060
two different post types eventually

00:20:51,900 --> 00:20:55,740
those post types will get different

00:20:54,060 --> 00:20:58,200
business logic and now you've

00:20:55,740 --> 00:21:01,560
automatically coupled all of the code

00:20:58,200 --> 00:21:03,660
for both of these post types and now you

00:21:01,560 --> 00:21:06,740
have to undo that in order to add the

00:21:03,660 --> 00:21:09,140
features that you need to add so

00:21:06,740 --> 00:21:10,860
obviously you want to make sure that you

00:21:09,140 --> 00:21:12,900
create that distinction between

00:21:10,860 --> 00:21:14,850
duplication of knowledge of logic as

00:21:12,900 --> 00:21:18,810
opposed to coding structures in general

00:21:14,850 --> 00:21:20,940
and so we see this a lot with WordPress

00:21:18,810 --> 00:21:24,390
where we have function calls like

00:21:20,940 --> 00:21:26,520
register post ID you know so that we

00:21:24,390 --> 00:21:28,320
will call register post type for

00:21:26,520 --> 00:21:32,190
obviously multiple post types and that

00:21:28,320 --> 00:21:33,450
code is very similar but it is very

00:21:32,190 --> 00:21:34,800
different at the same time because we're

00:21:33,450 --> 00:21:37,260
creating different post types they have

00:21:34,800 --> 00:21:39,630
different requirements so those

00:21:37,260 --> 00:21:42,090
structures are are different so yeah

00:21:39,630 --> 00:21:44,250
here's the you ain't gonna need it so

00:21:42,090 --> 00:21:48,570
try not to prematurely optimize your

00:21:44,250 --> 00:21:50,610
code but also don't inadvertently couple

00:21:48,570 --> 00:21:53,810
things that are that appear to be

00:21:50,610 --> 00:21:58,190
similar but are not actually the same

00:21:53,810 --> 00:22:01,320
and then we have the most misunderstood

00:21:58,190 --> 00:22:03,110
solid principle in existence which is

00:22:01,320 --> 00:22:05,010
the single responsibility principle

00:22:03,110 --> 00:22:07,140
everyone assumes that the single

00:22:05,010 --> 00:22:12,450
responsibility principle based on its

00:22:07,140 --> 00:22:14,050
definition means that you should have a

00:22:12,450 --> 00:22:15,790
function that there's only one thing

00:22:14,050 --> 00:22:17,890
or a class that does only one thing and

00:22:15,790 --> 00:22:21,280
while this is true you should limit the

00:22:17,890 --> 00:22:23,500
scope of your methods or functions the

00:22:21,280 --> 00:22:25,990
scope of your classes and make sure

00:22:23,500 --> 00:22:28,240
they're very cohesive so cute

00:22:25,990 --> 00:22:30,370
cohesiveness is very important when

00:22:28,240 --> 00:22:32,350
you're coding so you're not entirely

00:22:30,370 --> 00:22:35,880
wrong if that's what you think about the

00:22:32,350 --> 00:22:38,080
single responsibility principle the real

00:22:35,880 --> 00:22:40,120
logic behind the single responsibility

00:22:38,080 --> 00:22:41,890
principle is that a class or module

00:22:40,120 --> 00:22:44,800
should have only one reason to change

00:22:41,890 --> 00:22:48,160
and what that means is let's say you

00:22:44,800 --> 00:22:51,190
have let's say you have code that is

00:22:48,160 --> 00:22:52,870
going to render a report so you've got

00:22:51,190 --> 00:22:54,040
the actual content of the report that

00:22:52,870 --> 00:22:55,960
could change you've got the actual

00:22:54,040 --> 00:22:58,420
display or formatting of the report that

00:22:55,960 --> 00:23:00,700
could change and if you put all that

00:22:58,420 --> 00:23:02,650
logic together and you generate the

00:23:00,700 --> 00:23:03,610
content for the report and display it in

00:23:02,650 --> 00:23:06,460
a particular format

00:23:03,610 --> 00:23:08,560
all at the same time then there's two

00:23:06,460 --> 00:23:10,870
reasons that code could change one could

00:23:08,560 --> 00:23:12,820
be they want it to look different one

00:23:10,870 --> 00:23:15,070
could be the content of the report needs

00:23:12,820 --> 00:23:16,690
to change the formula is the logic that

00:23:15,070 --> 00:23:19,330
kind of thing and so if you put those

00:23:16,690 --> 00:23:21,850
two things together let's say you wanted

00:23:19,330 --> 00:23:23,950
to you know a new feature came about oh

00:23:21,850 --> 00:23:25,720
well we actually need to generate the

00:23:23,950 --> 00:23:28,210
same report but in two different formats

00:23:25,720 --> 00:23:30,940
well now you've coupled to things that

00:23:28,210 --> 00:23:32,320
shouldn't be put together so that is the

00:23:30,940 --> 00:23:33,850
real application of a single

00:23:32,320 --> 00:23:36,910
responsibility principle and it doesn't

00:23:33,850 --> 00:23:39,670
just apply in those types of concepts it

00:23:36,910 --> 00:23:42,220
also applies to the types of changes

00:23:39,670 --> 00:23:47,620
that people or departments might request

00:23:42,220 --> 00:23:52,270
right so if you've got a for example a

00:23:47,620 --> 00:23:55,800
class that handles logic for working

00:23:52,270 --> 00:23:58,900
with loans for example so you've got a

00:23:55,800 --> 00:24:02,740
bank they have loans they have logic

00:23:58,900 --> 00:24:04,870
related to the loans or you know you

00:24:02,740 --> 00:24:07,390
might have a CFO that will make certain

00:24:04,870 --> 00:24:09,310
decisions you might have CTO that'll

00:24:07,390 --> 00:24:11,440
make certain decisions and so they'll

00:24:09,310 --> 00:24:14,680
have it's important to kind of create

00:24:11,440 --> 00:24:17,380
distinctions as well as to you know who

00:24:14,680 --> 00:24:19,930
might be requesting a change and usually

00:24:17,380 --> 00:24:21,250
what departments are making changes will

00:24:19,930 --> 00:24:24,340
kind of map to things like the

00:24:21,250 --> 00:24:26,320
formatting of a form of a report or the

00:24:24,340 --> 00:24:27,670
content of a report so it's just

00:24:26,320 --> 00:24:30,010
important to kind of think

00:24:27,670 --> 00:24:33,430
as you're looking at your code you know

00:24:30,010 --> 00:24:35,530
who are the stakeholders what types of

00:24:33,430 --> 00:24:37,120
changes or responsibilities do those

00:24:35,530 --> 00:24:39,670
particular people or departments have

00:24:37,120 --> 00:24:42,570
and how will that play out in future

00:24:39,670 --> 00:24:42,570
changes to the code

00:24:42,660 --> 00:24:48,490
another key principle is the open closed

00:24:47,260 --> 00:24:50,800
principle this is something I think

00:24:48,490 --> 00:24:55,480
WordPress does very well for example

00:24:50,800 --> 00:24:56,710
with the plug-in system and the actions

00:24:55,480 --> 00:25:00,100
and hooks and things that we use in

00:24:56,710 --> 00:25:02,950
WordPress make it easy for you to at any

00:25:00,100 --> 00:25:06,010
point in WordPress kind of run your own

00:25:02,950 --> 00:25:08,890
code or modify variables and things

00:25:06,010 --> 00:25:11,080
inside of WordPress is the open closed

00:25:08,890 --> 00:25:13,720
principle right so we don't modify

00:25:11,080 --> 00:25:16,870
WordPress core directly but we can

00:25:13,720 --> 00:25:18,460
extend WordPress through plugins to be

00:25:16,870 --> 00:25:20,650
able to do very different things with

00:25:18,460 --> 00:25:23,740
WordPress and that's part of the beauty

00:25:20,650 --> 00:25:25,750
and the power of WordPress itself and in

00:25:23,740 --> 00:25:28,600
reality when we look at the open closed

00:25:25,750 --> 00:25:30,430
principle if we have a solid

00:25:28,600 --> 00:25:34,720
architecture where we've created clear

00:25:30,430 --> 00:25:37,810
boundaries and clear ways of extending

00:25:34,720 --> 00:25:39,100
the code we'll be able to have a better

00:25:37,810 --> 00:25:43,030
application of the open and closed

00:25:39,100 --> 00:25:47,080
principle so for example let's say

00:25:43,030 --> 00:25:49,090
you've got let's say most most of the

00:25:47,080 --> 00:25:51,100
time when you create code you're trying

00:25:49,090 --> 00:25:52,660
to create clear boundaries between

00:25:51,100 --> 00:25:55,960
different types of things so you've got

00:25:52,660 --> 00:25:58,210
for example the UI what the user sees

00:25:55,960 --> 00:26:00,190
how how things are being displayed

00:25:58,210 --> 00:26:01,810
you've got the business logic which is

00:26:00,190 --> 00:26:05,470
kind of another layer that's often in

00:26:01,810 --> 00:26:06,700
there you've got the the data storage

00:26:05,470 --> 00:26:08,500
and all those different kinds of things

00:26:06,700 --> 00:26:11,680
and then a lot of times you'll kind of

00:26:08,500 --> 00:26:14,110
have more vertical splits as well where

00:26:11,680 --> 00:26:15,910
you know maybe you know in a shopping

00:26:14,110 --> 00:26:18,010
cart you say well this is all related to

00:26:15,910 --> 00:26:20,280
products this is all rated to the

00:26:18,010 --> 00:26:23,890
checkout process this is all related to

00:26:20,280 --> 00:26:25,660
you know something else so we have all

00:26:23,890 --> 00:26:28,960
these different boundaries and things

00:26:25,660 --> 00:26:31,350
but you want to make sure that as you're

00:26:28,960 --> 00:26:33,730
creating the system that it's easy to

00:26:31,350 --> 00:26:37,570
extend and there's many ways you can

00:26:33,730 --> 00:26:39,970
extend code right we have classes that

00:26:37,570 --> 00:26:40,630
can be extended we have composition

00:26:39,970 --> 00:26:45,790
where you

00:26:40,630 --> 00:26:49,300
take traits or use functional

00:26:45,790 --> 00:26:51,610
composition to to add in code to

00:26:49,300 --> 00:26:53,800
existing classes things like that but

00:26:51,610 --> 00:26:56,080
then we also have a very easy way to do

00:26:53,800 --> 00:26:59,620
that in WordPress which is the hook

00:26:56,080 --> 00:27:03,040
system so not only does WordPress have

00:26:59,620 --> 00:27:05,590
its own way of creating hooks actions

00:27:03,040 --> 00:27:07,120
and filters but of course you and your

00:27:05,590 --> 00:27:12,880
own plugins and things can do that as

00:27:07,120 --> 00:27:15,730
well and at the same time we can create

00:27:12,880 --> 00:27:18,850
modules and things if we use tools like

00:27:15,730 --> 00:27:21,580
composer we can create entities software

00:27:18,850 --> 00:27:23,710
entities that we can use as dependencies

00:27:21,580 --> 00:27:26,290
and easily extend or leverage those in

00:27:23,710 --> 00:27:29,710
our code as well so the open closed

00:27:26,290 --> 00:27:32,290
principle is something that WordPress

00:27:29,710 --> 00:27:34,120
does well and I think that in general as

00:27:32,290 --> 00:27:38,110
we're thinking about creating a good

00:27:34,120 --> 00:27:39,310
system it's important to keep in mind so

00:27:38,110 --> 00:27:44,250
we're going to take a closer look here

00:27:39,310 --> 00:27:47,170
at modularity for a second so we have

00:27:44,250 --> 00:27:48,250
again one of the first things that you

00:27:47,170 --> 00:27:50,980
should think about is making sure you

00:27:48,250 --> 00:27:53,980
have clear boundaries so your modules

00:27:50,980 --> 00:27:55,690
should very clearly you know pertain to

00:27:53,980 --> 00:27:57,430
a particular aspect so we're talking

00:27:55,690 --> 00:27:59,320
about cohesion right so we want to make

00:27:57,430 --> 00:28:00,940
sure that we have cohesion within our

00:27:59,320 --> 00:28:02,380
modules that we're not putting things

00:28:00,940 --> 00:28:04,920
that don't go in there that we're

00:28:02,380 --> 00:28:07,330
splitting them out into the right pieces

00:28:04,920 --> 00:28:09,340
so we also want to make sure it's

00:28:07,330 --> 00:28:10,930
decoupled and obviously when we're

00:28:09,340 --> 00:28:12,370
talking about boundaries the assumption

00:28:10,930 --> 00:28:15,600
is that it's decoupled but it's very

00:28:12,370 --> 00:28:20,260
easy to create tightly coupled modules

00:28:15,600 --> 00:28:23,700
even though there's clear boundaries and

00:28:20,260 --> 00:28:25,870
one of the ways that that can happen

00:28:23,700 --> 00:28:28,890
well I'll get to that in just a second

00:28:25,870 --> 00:28:31,510
so it's easy to couple things

00:28:28,890 --> 00:28:33,430
inadvertently so it's easy to write a

00:28:31,510 --> 00:28:35,620
module that assumes that other modules

00:28:33,430 --> 00:28:37,180
will be there and so you want to make

00:28:35,620 --> 00:28:41,050
sure they have a very clear and clean

00:28:37,180 --> 00:28:43,980
API again that clearly defines those

00:28:41,050 --> 00:28:46,270
boundaries continuity is just a

00:28:43,980 --> 00:28:48,340
reinforcement of kind of the single

00:28:46,270 --> 00:28:51,010
responsibility principle so continuity

00:28:48,340 --> 00:28:54,490
basically means that when you have a

00:28:51,010 --> 00:28:57,129
module and someone requests a change

00:28:54,490 --> 00:29:01,330
the changes that are requested should

00:28:57,129 --> 00:29:04,690
only impact a small a single module

00:29:01,330 --> 00:29:08,980
ideally or maybe a couple of adjacent

00:29:04,690 --> 00:29:11,590
modules in minor ways so what that means

00:29:08,980 --> 00:29:15,879
is that you've properly mapped the

00:29:11,590 --> 00:29:18,100
responsibilities of your code to the

00:29:15,879 --> 00:29:20,080
reasons why the code might change and so

00:29:18,100 --> 00:29:22,509
continuity basically says you know if

00:29:20,080 --> 00:29:24,460
the CFO asks for this change then we've

00:29:22,509 --> 00:29:26,830
properly modularized the business logic

00:29:24,460 --> 00:29:29,019
or the display logic or whatever it is

00:29:26,830 --> 00:29:30,610
so that it only affects that one

00:29:29,019 --> 00:29:33,429
particular module that one particular

00:29:30,610 --> 00:29:35,919
class or whatever it may be and then we

00:29:33,429 --> 00:29:37,720
have protection and protection is one of

00:29:35,919 --> 00:29:41,649
those things where if done incorrectly

00:29:37,720 --> 00:29:43,929
it actually makes it less clear what the

00:29:41,649 --> 00:29:47,169
boundaries are for our module as well as

00:29:43,929 --> 00:29:51,279
allows you to even though you've created

00:29:47,169 --> 00:29:53,590
a module that you seem it seems to have

00:29:51,279 --> 00:29:55,480
clear boundaries allows those boundary

00:29:53,590 --> 00:29:58,360
lines to become blurred is if you don't

00:29:55,480 --> 00:30:02,200
properly protect your your module right

00:29:58,360 --> 00:30:04,899
so let's say you have a class and it's

00:30:02,200 --> 00:30:08,320
very common for people when they create

00:30:04,899 --> 00:30:10,629
classes to instead of marking particular

00:30:08,320 --> 00:30:12,369
property properties as protected they'll

00:30:10,629 --> 00:30:14,350
just write public right so all the

00:30:12,369 --> 00:30:18,240
things are public well now instead of

00:30:14,350 --> 00:30:20,440
having to use the very clear and clean

00:30:18,240 --> 00:30:23,049
collection of methods and things for

00:30:20,440 --> 00:30:25,450
that particular class which would create

00:30:23,049 --> 00:30:27,129
clear boundaries prevent coupling of

00:30:25,450 --> 00:30:29,710
things that shouldn't be coupled well

00:30:27,129 --> 00:30:32,679
now another module can reach directly

00:30:29,710 --> 00:30:34,899
into your module using the public access

00:30:32,679 --> 00:30:36,100
that you've left behind and they can do

00:30:34,899 --> 00:30:39,220
things that they really shouldn't be

00:30:36,100 --> 00:30:42,039
able to do but because you know as

00:30:39,220 --> 00:30:43,990
developers we like shortcuts and if it's

00:30:42,039 --> 00:30:46,330
easier to go straight into it and

00:30:43,990 --> 00:30:48,629
manipulate it how we want then that's

00:30:46,330 --> 00:30:51,970
what we'll do so if you don't properly

00:30:48,629 --> 00:30:53,470
protect your module then that's that's

00:30:51,970 --> 00:30:56,249
where your boundaries get blurred that's

00:30:53,470 --> 00:30:58,570
where coupling kind of sneaks in and

00:30:56,249 --> 00:31:00,309
essentially you're sabotaging your own

00:30:58,570 --> 00:31:03,070
code so you want to make sure that you

00:31:00,309 --> 00:31:06,609
think about you know what is the public

00:31:03,070 --> 00:31:07,539
API what is the thing what are the

00:31:06,609 --> 00:31:08,350
things that need to happen behind the

00:31:07,539 --> 00:31:10,270
scenes

00:31:08,350 --> 00:31:12,370
make sure too that we limit as much as

00:31:10,270 --> 00:31:14,410
possible the public API because the

00:31:12,370 --> 00:31:16,840
larger the public API the more

00:31:14,410 --> 00:31:24,280
complicated change would be in the

00:31:16,840 --> 00:31:25,660
future so and just another oh yeah and

00:31:24,280 --> 00:31:28,059
then of course extensibility talking

00:31:25,660 --> 00:31:29,789
about the open closed principle I'm not

00:31:28,059 --> 00:31:32,590
going into all of the solid principles

00:31:29,789 --> 00:31:35,140
because I think they're a little some of

00:31:32,590 --> 00:31:36,880
them are a little deeper I'll probably

00:31:35,140 --> 00:31:39,760
do a talk later on all of them at some

00:31:36,880 --> 00:31:42,190
point but but yeah so we have

00:31:39,760 --> 00:31:44,830
extensibility and we want to think about

00:31:42,190 --> 00:31:47,799
making sure that our modules are easy to

00:31:44,830 --> 00:31:50,320
extend with custom functionality or

00:31:47,799 --> 00:31:53,100
maybe even you know hooks filters using

00:31:50,320 --> 00:31:56,740
some sort of event based system as well

00:31:53,100 --> 00:32:02,289
but without changing the actual code

00:31:56,740 --> 00:32:04,299
itself and so now we have the reuse

00:32:02,289 --> 00:32:07,990
release principle which to me is a very

00:32:04,299 --> 00:32:10,929
important principle because as software

00:32:07,990 --> 00:32:14,919
developers one of the things that we do

00:32:10,929 --> 00:32:16,929
over time that really helps us get

00:32:14,919 --> 00:32:20,860
better at what we do get faster at what

00:32:16,929 --> 00:32:23,679
we do and continue to I guess further

00:32:20,860 --> 00:32:25,780
our career is you know we start out

00:32:23,679 --> 00:32:27,970
building things from scratch we learn

00:32:25,780 --> 00:32:30,309
how things work we start to write

00:32:27,970 --> 00:32:32,830
cleaner code we start to realize there's

00:32:30,309 --> 00:32:36,610
patterns that we use over and over again

00:32:32,830 --> 00:32:38,350
and then we realize that we use these

00:32:36,610 --> 00:32:39,970
certain patterns so much that we could

00:32:38,350 --> 00:32:42,730
actually abstract them and turn them

00:32:39,970 --> 00:32:45,159
into modules or turn them into you know

00:32:42,730 --> 00:32:48,010
different plugins or things and we can

00:32:45,159 --> 00:32:50,140
reuse them right but the reuse of those

00:32:48,010 --> 00:32:52,799
things is only as valuable as the

00:32:50,140 --> 00:32:56,380
tracking system in which you put them so

00:32:52,799 --> 00:32:58,030
for example on wordpress.org we have a

00:32:56,380 --> 00:33:00,850
tracking system for plugins we have

00:32:58,030 --> 00:33:02,919
plugins they're all versioned they're

00:33:00,850 --> 00:33:05,350
all in one location that's easy to find

00:33:02,919 --> 00:33:07,600
easy to get a particular version it's

00:33:05,350 --> 00:33:10,419
easy to update and so that code is very

00:33:07,600 --> 00:33:14,980
easy to reuse if we have for example

00:33:10,419 --> 00:33:19,150
github and we put our plugins there that

00:33:14,980 --> 00:33:20,380
is good it's a good tracking system but

00:33:19,150 --> 00:33:21,910
again it's one of those things where

00:33:20,380 --> 00:33:24,640
it's more difficult to pull our

00:33:21,910 --> 00:33:27,390
directly from github you know we're not

00:33:24,640 --> 00:33:30,130
we're not reusing those things in Mass

00:33:27,390 --> 00:33:32,260
through github right no no clients gonna

00:33:30,130 --> 00:33:36,220
say oh I'll just clone that git repo and

00:33:32,260 --> 00:33:37,900
use your plugin right so a lot of times

00:33:36,220 --> 00:33:39,580
that you know that's where we we have

00:33:37,900 --> 00:33:40,810
our testing grounds for plugins that we

00:33:39,580 --> 00:33:42,370
don't want clients to use but we want

00:33:40,810 --> 00:33:44,710
developers use right so it's a good

00:33:42,370 --> 00:33:48,580
system for that but it's not good for

00:33:44,710 --> 00:33:51,070
for the user but really as developers we

00:33:48,580 --> 00:33:52,480
are users right like we we need to reuse

00:33:51,070 --> 00:33:54,340
our code and we need to make it easier

00:33:52,480 --> 00:33:57,700
on ourselves to do that and it's not

00:33:54,340 --> 00:33:59,800
practical to have a project that you

00:33:57,700 --> 00:34:02,110
want to have version controlled and then

00:33:59,800 --> 00:34:04,570
to try to clone seven or ten different

00:34:02,110 --> 00:34:05,950
get repos in that and then you can't

00:34:04,570 --> 00:34:07,630
track those things because they're sub

00:34:05,950 --> 00:34:08,980
modules and but you don't like get sub

00:34:07,630 --> 00:34:11,409
modules so that you have to remove get

00:34:08,980 --> 00:34:12,760
from those things it gets complicated so

00:34:11,409 --> 00:34:15,460
that's why we have awesome tools like

00:34:12,760 --> 00:34:19,389
Composer so if you use PHP there's

00:34:15,460 --> 00:34:23,110
Composer if you use JavaScript there's

00:34:19,389 --> 00:34:27,040
NPM node package manager right so you

00:34:23,110 --> 00:34:28,990
can actually from NPM grab any

00:34:27,040 --> 00:34:31,000
JavaScript module that exists out there

00:34:28,990 --> 00:34:33,399
you can pull it into your project it's

00:34:31,000 --> 00:34:35,230
real easy to do with command-line and

00:34:33,399 --> 00:34:37,629
now your Java scripts in there and you

00:34:35,230 --> 00:34:40,210
can start to use it just like you do

00:34:37,629 --> 00:34:42,429
that we have composer all of the things

00:34:40,210 --> 00:34:45,550
live up on packages org they could be

00:34:42,429 --> 00:34:48,909
registered there's a cool little project

00:34:45,550 --> 00:34:51,220
called W packages org where all of the

00:34:48,909 --> 00:34:53,500
wordpress.org plugins and themes have

00:34:51,220 --> 00:34:55,090
been composer fied for you and are ready

00:34:53,500 --> 00:34:57,880
to use and pull into your WordPress

00:34:55,090 --> 00:34:59,440
projects and likewise you don't it

00:34:57,880 --> 00:35:01,420
doesn't have to be plugins or themes

00:34:59,440 --> 00:35:03,550
that you package up it can be individual

00:35:01,420 --> 00:35:07,810
libraries that you use for example one

00:35:03,550 --> 00:35:10,180
that I've created is a wordpress post

00:35:07,810 --> 00:35:12,100
expiration module right so a lot of

00:35:10,180 --> 00:35:14,500
times you have a client and they request

00:35:12,100 --> 00:35:16,660
that you know maybe you're creating

00:35:14,500 --> 00:35:18,040
promotions for them as a post type they

00:35:16,660 --> 00:35:20,530
want to be able to expire it maybe they

00:35:18,040 --> 00:35:22,090
have ads they want to expire maybe they

00:35:20,530 --> 00:35:25,020
have news articles they want to expire

00:35:22,090 --> 00:35:29,200
whatever the case is all I have to do

00:35:25,020 --> 00:35:31,720
composer require my package add a single

00:35:29,200 --> 00:35:34,180
line that says add post type support

00:35:31,720 --> 00:35:35,740
expiration for particular post type and

00:35:34,180 --> 00:35:37,300
now

00:35:35,740 --> 00:35:39,790
that thing will automatically have the

00:35:37,300 --> 00:35:41,890
user interface for post expiration and

00:35:39,790 --> 00:35:44,290
will automatically have the cron setup

00:35:41,890 --> 00:35:46,390
to expire those things and I don't have

00:35:44,290 --> 00:35:48,070
to do anything additional and that

00:35:46,390 --> 00:35:50,530
automatically gives me packaged into a

00:35:48,070 --> 00:35:52,570
theme packaged into a plug-in so

00:35:50,530 --> 00:35:56,110
whatever custom theme I'm the thing I am

00:35:52,570 --> 00:35:59,250
building for a client I can easily reuse

00:35:56,110 --> 00:36:02,110
that and of course everything on

00:35:59,250 --> 00:36:05,590
packages or used vehicle is also

00:36:02,110 --> 00:36:07,840
versioned so understanding semantic

00:36:05,590 --> 00:36:11,680
versioning is very important making sure

00:36:07,840 --> 00:36:15,460
that you understand the differences

00:36:11,680 --> 00:36:17,860
between the breaking changes

00:36:15,460 --> 00:36:20,260
non-breaking changes feature additions

00:36:17,860 --> 00:36:21,490
patches all those kinds of things if you

00:36:20,260 --> 00:36:24,550
want to learn more about that you can go

00:36:21,490 --> 00:36:27,070
to sim ver org and learn about semantic

00:36:24,550 --> 00:36:30,040
versioning so you can properly manage

00:36:27,070 --> 00:36:34,060
things that are tracked in version

00:36:30,040 --> 00:36:36,760
control so reuse release principle very

00:36:34,060 --> 00:36:38,710
important but this is kind of my

00:36:36,760 --> 00:36:41,380
favorite quote so there's this book

00:36:38,710 --> 00:36:44,350
called clean architecture Robert Martin

00:36:41,380 --> 00:36:46,810
also known as Uncle Bob has written and

00:36:44,350 --> 00:36:48,369
his quote is that a good software

00:36:46,810 --> 00:36:50,109
architect will delay decisions for as

00:36:48,369 --> 00:36:52,600
long as possible I used to think that

00:36:50,109 --> 00:36:53,950
software architecture was knowing all

00:36:52,600 --> 00:36:56,410
the things and making them all work

00:36:53,950 --> 00:36:59,530
together perfectly and really it's not

00:36:56,410 --> 00:37:01,090
it's all about delaying decisions as

00:36:59,530 --> 00:37:03,580
long as possible and what that really

00:37:01,090 --> 00:37:06,640
means is let's say you're writing some

00:37:03,580 --> 00:37:08,650
software you start with the the business

00:37:06,640 --> 00:37:11,109
logic you start from the inside you work

00:37:08,650 --> 00:37:13,690
away out when you're designing business

00:37:11,109 --> 00:37:16,570
logic you do not need to know where the

00:37:13,690 --> 00:37:17,859
data will be stored you do not need to

00:37:16,570 --> 00:37:20,350
know what the user interface will look

00:37:17,859 --> 00:37:21,790
like you do not need to know nor do you

00:37:20,350 --> 00:37:23,530
need to create any of those things you

00:37:21,790 --> 00:37:25,840
just need to design the business logic

00:37:23,530 --> 00:37:28,750
and create some basic tests for the

00:37:25,840 --> 00:37:32,530
business logic and the business logic is

00:37:28,750 --> 00:37:35,740
anything that outside of let's say the

00:37:32,530 --> 00:37:37,720
web or any kind of software business

00:37:35,740 --> 00:37:39,730
logic is the thing that is at the core

00:37:37,720 --> 00:37:43,960
of the business right so if you are a

00:37:39,730 --> 00:37:46,390
bank you extend loans to people you know

00:37:43,960 --> 00:37:47,530
you create accounts you have all these

00:37:46,390 --> 00:37:48,640
different things that you do and it

00:37:47,530 --> 00:37:49,150
doesn't matter whether you have an

00:37:48,640 --> 00:37:50,619
online

00:37:49,150 --> 00:37:53,279
we're not those things are going to

00:37:50,619 --> 00:37:55,569
happen that is core business logic

00:37:53,279 --> 00:37:57,809
extending beyond that we have use cases

00:37:55,569 --> 00:38:00,640
so the use cases are the things that

00:37:57,809 --> 00:38:04,750
apply specifically to an automated

00:38:00,640 --> 00:38:07,299
system that operate on that business

00:38:04,750 --> 00:38:11,740
logic so being able to create an account

00:38:07,299 --> 00:38:13,869
online or to request a loan online those

00:38:11,740 --> 00:38:16,720
are use cases that interact with the

00:38:13,869 --> 00:38:18,900
core business logic of the business

00:38:16,720 --> 00:38:21,880
right so you want to make sure that you

00:38:18,900 --> 00:38:23,529
start with the business logic delay the

00:38:21,880 --> 00:38:25,930
other decisions about how to create a

00:38:23,529 --> 00:38:28,359
account online or do these different

00:38:25,930 --> 00:38:30,160
things within the automated system until

00:38:28,359 --> 00:38:34,150
the business logic has been sorted out

00:38:30,160 --> 00:38:35,770
and is meets requirements so then you

00:38:34,150 --> 00:38:37,569
have these use cases and we still don't

00:38:35,770 --> 00:38:39,819
care about where the data is stored what

00:38:37,569 --> 00:38:41,619
the user sees when they go to create an

00:38:39,819 --> 00:38:43,510
account all we care about is that the

00:38:41,619 --> 00:38:45,670
automated system can handle and manage

00:38:43,510 --> 00:38:48,520
what's going to happen there and then

00:38:45,670 --> 00:38:50,380
from there finally we'll start to make

00:38:48,520 --> 00:38:53,140
decisions about where the data is stored

00:38:50,380 --> 00:38:54,490
whether or not we use WordPress all of

00:38:53,140 --> 00:38:56,319
those things are actually irrelevant

00:38:54,490 --> 00:38:58,359
until you get to the point where you

00:38:56,319 --> 00:39:02,109
really need to make the decision and

00:38:58,359 --> 00:39:05,170
that decision may change later but again

00:39:02,109 --> 00:39:07,990
talking about delaying decisions if you

00:39:05,170 --> 00:39:10,210
make them before you've implemented them

00:39:07,990 --> 00:39:12,670
it's going to be a lot easier to do a

00:39:10,210 --> 00:39:14,289
lot simpler to do and if you've written

00:39:12,670 --> 00:39:16,599
your code in a way where it will allow

00:39:14,289 --> 00:39:20,470
you to delay that decision then you're

00:39:16,599 --> 00:39:23,380
actually doing it correctly because you

00:39:20,470 --> 00:39:25,390
are also causing so if you start with

00:39:23,380 --> 00:39:28,680
that business logic work out to the use

00:39:25,390 --> 00:39:31,059
cases work out to the to the interfaces

00:39:28,680 --> 00:39:33,430
essentially you're you're automatically

00:39:31,059 --> 00:39:36,549
going to properly set up your

00:39:33,430 --> 00:39:37,779
dependencies for your software right we

00:39:36,549 --> 00:39:40,510
don't ever want to have the business

00:39:37,779 --> 00:39:42,609
logic depending on where the data is

00:39:40,510 --> 00:39:44,470
stored or how the data is stored we

00:39:42,609 --> 00:39:46,480
don't want someone to say well the

00:39:44,470 --> 00:39:47,770
process of a creating account depends on

00:39:46,480 --> 00:39:50,260
whether the my sequel database is

00:39:47,770 --> 00:39:53,319
available if that is the case then the

00:39:50,260 --> 00:39:54,460
business logic has a problem right but

00:39:53,319 --> 00:39:57,400
if you start from the inside out

00:39:54,460 --> 00:39:59,230
and delay all those decisions then the

00:39:57,400 --> 00:40:00,609
business logic will never depend on the

00:39:59,230 --> 00:40:02,260
my sequel database the business logic

00:40:00,609 --> 00:40:03,010
will never depend on what the user sees

00:40:02,260 --> 00:40:05,200
or how they enter

00:40:03,010 --> 00:40:08,200
with the system it will always just work

00:40:05,200 --> 00:40:09,700
the way they're supposed to and so these

00:40:08,200 --> 00:40:13,119
are the resources that I would recommend

00:40:09,700 --> 00:40:16,230
source making comm is a good website do

00:40:13,119 --> 00:40:18,609
factory comm JavaScript design patterns

00:40:16,230 --> 00:40:20,950
there's a great book on PHP design

00:40:18,609 --> 00:40:25,050
patterns the clean code and clean

00:40:20,950 --> 00:40:29,950
architecture that's Uncle Bob or Robert

00:40:25,050 --> 00:40:32,380
Martin really good books code simplicity

00:40:29,950 --> 00:40:34,660
that's the one where that formula and a

00:40:32,380 --> 00:40:35,980
lot of these laws and principles that

00:40:34,660 --> 00:40:38,619
you saw on some of the slides came from

00:40:35,980 --> 00:40:41,380
and then refactoring so if you ever do

00:40:38,619 --> 00:40:44,130
any kind of heavy refactoring are taking

00:40:41,380 --> 00:40:47,140
legacy systems and converting it into

00:40:44,130 --> 00:40:49,450
you know more modern structures in

00:40:47,140 --> 00:40:53,230
proper architecture that's a good book

00:40:49,450 --> 00:40:55,720
to read so yeah so that's my talk I

00:40:53,230 --> 00:41:02,520
think we got how much time we have for

00:40:55,720 --> 00:41:02,520
questions five minutes so any questions

00:41:30,780 --> 00:41:36,220
so yeah so the question is you know when

00:41:34,090 --> 00:41:38,590
is the right time to code quickly get

00:41:36,220 --> 00:41:40,890
something to market so that you from a

00:41:38,590 --> 00:41:45,280
business perspective can leverage the

00:41:40,890 --> 00:41:47,320
yeah yeah getting to market first as

00:41:45,280 --> 00:41:49,900
opposed to doing it right may be coming

00:41:47,320 --> 00:41:52,510
to market a little later and again I

00:41:49,900 --> 00:41:54,760
think it really depends to a certain

00:41:52,510 --> 00:41:56,950
degree if we look at at the competition

00:41:54,760 --> 00:41:58,840
right if they're doing the quick and

00:41:56,950 --> 00:42:00,760
dirty version then what they're ending

00:41:58,840 --> 00:42:02,380
up with is a system that works now but

00:42:00,760 --> 00:42:05,290
it's gonna be difficult to maintain and

00:42:02,380 --> 00:42:07,060
so as a start-up if you focus on doing

00:42:05,290 --> 00:42:09,040
it right and the logic is there and the

00:42:07,060 --> 00:42:10,690
dependencies are set up correctly then

00:42:09,040 --> 00:42:12,430
your system is going to be easier to

00:42:10,690 --> 00:42:14,230
maintain easier to add features long

00:42:12,430 --> 00:42:16,090
term which means you could outlast the

00:42:14,230 --> 00:42:16,630
competition now granted there is a

00:42:16,090 --> 00:42:19,630
benefit

00:42:16,630 --> 00:42:23,020
to come into market first but really I

00:42:19,630 --> 00:42:24,190
think this particular process of

00:42:23,020 --> 00:42:25,420
starting from the inside and working

00:42:24,190 --> 00:42:28,120
your way out making those decisions

00:42:25,420 --> 00:42:29,790
later can actually give you more

00:42:28,120 --> 00:42:32,680
flexibility coming to market first

00:42:29,790 --> 00:42:34,210
because maybe you realize that there's a

00:42:32,680 --> 00:42:36,370
new technologies coming out you don't

00:42:34,210 --> 00:42:38,950
sure if it's gonna work yet you need to

00:42:36,370 --> 00:42:40,990
give it a month you can delay that

00:42:38,950 --> 00:42:42,190
decision whereas somebody else is trying

00:42:40,990 --> 00:42:43,840
to get something out the door they just

00:42:42,190 --> 00:42:45,580
go with what they know and then it turns

00:42:43,840 --> 00:42:48,270
out that that technology the decision

00:42:45,580 --> 00:42:50,770
was a brilliant one you can transition

00:42:48,270 --> 00:42:52,150
or maybe that was flipped around and you

00:42:50,770 --> 00:42:53,950
need to update to the new technology

00:42:52,150 --> 00:42:57,370
because you've built your system this

00:42:53,950 --> 00:42:58,750
way there's not that dependency that

00:42:57,370 --> 00:43:01,150
shouldn't be there and it makes it

00:42:58,750 --> 00:43:04,000
easier to just swap out this technology

00:43:01,150 --> 00:43:05,980
with this other technology so personally

00:43:04,000 --> 00:43:10,660
I think it makes a lot more sense to

00:43:05,980 --> 00:43:14,130
start from the inside out build it but

00:43:10,660 --> 00:43:18,090
but really I would say the rules are

00:43:14,130 --> 00:43:22,900
it's okay to build it quick and then to

00:43:18,090 --> 00:43:23,800
build it right but if you if you know

00:43:22,900 --> 00:43:26,610
you're never gonna get around to

00:43:23,800 --> 00:43:29,410
building it right then just Billy right

00:43:26,610 --> 00:43:54,280
so yeah it's kind of my my rule of thumb

00:43:29,410 --> 00:43:56,370
I guess so list of things again one more

00:43:54,280 --> 00:43:56,370
time

00:44:08,470 --> 00:44:12,710
so yeah so the way I would kind of

00:44:11,270 --> 00:44:15,200
approach and the question is you know

00:44:12,710 --> 00:44:17,420
how would you build it's a you said it's

00:44:15,200 --> 00:44:19,130
a membership type site where you have

00:44:17,420 --> 00:44:24,290
events you have locations and you have

00:44:19,130 --> 00:44:25,760
one more thing user profiles right so

00:44:24,290 --> 00:44:27,560
really if you think about it from a

00:44:25,760 --> 00:44:29,570
community perspective let's say you

00:44:27,560 --> 00:44:31,670
actually physically met up in person or

00:44:29,570 --> 00:44:33,050
have events right which essentially you

00:44:31,670 --> 00:44:35,870
would be doing I guess unless they're

00:44:33,050 --> 00:44:38,360
online events there's there's that that

00:44:35,870 --> 00:44:40,460
business logic of you know we have an

00:44:38,360 --> 00:44:42,830
event you know an event is an entity

00:44:40,460 --> 00:44:43,910
within the system the event is going to

00:44:42,830 --> 00:44:45,380
have a date it's gonna have a time it's

00:44:43,910 --> 00:44:47,360
going to have these things you can

00:44:45,380 --> 00:44:50,510
create code that just manages that

00:44:47,360 --> 00:44:52,160
particular entity or portion of the

00:44:50,510 --> 00:44:54,860
system right so you're gonna have that

00:44:52,160 --> 00:44:57,920
event entity you'll have the location

00:44:54,860 --> 00:45:00,020
entity you'll have the user entity and

00:44:57,920 --> 00:45:03,350
the fact that it's a profile is really

00:45:00,020 --> 00:45:06,050
more of a data rendering aspect so

00:45:03,350 --> 00:45:08,600
you'll start with those things and then

00:45:06,050 --> 00:45:12,590
of course the automat the the use cases

00:45:08,600 --> 00:45:14,620
would be updating my password you know

00:45:12,590 --> 00:45:16,880
creating events in the system online

00:45:14,620 --> 00:45:19,450
those are the those are the use cases

00:45:16,880 --> 00:45:21,980
they're not core business logic they're

00:45:19,450 --> 00:45:25,250
related to the automated system so you

00:45:21,980 --> 00:45:27,230
start with the the core entity you build

00:45:25,250 --> 00:45:30,200
out those use cases and then you say

00:45:27,230 --> 00:45:32,120
okay I know what a user looks like and

00:45:30,200 --> 00:45:35,060
what can be done with a user I've

00:45:32,120 --> 00:45:37,400
created the automated tools that allow

00:45:35,060 --> 00:45:39,620
me to create a new user delete a user

00:45:37,400 --> 00:45:42,950
change a password manipulate that

00:45:39,620 --> 00:45:43,880
particular entity and then working your

00:45:42,950 --> 00:45:46,220
way out from there

00:45:43,880 --> 00:45:49,100
saying okay well what is the profile

00:45:46,220 --> 00:45:50,720
display going to look like you know

00:45:49,100 --> 00:45:53,810
create the view or template or whatever

00:45:50,720 --> 00:45:55,610
for that and then where's that data

00:45:53,810 --> 00:45:59,110
gonna be stored how I'm gonna work with

00:45:55,610 --> 00:46:02,720
it you know and so you know WordPress

00:45:59,110 --> 00:46:04,460
obviously has its own tools and things

00:46:02,720 --> 00:46:07,990
that you can use for some of that but

00:46:04,460 --> 00:46:11,750
again you should look at WordPress as a

00:46:07,990 --> 00:46:13,640
technical detail so WordPress just like

00:46:11,750 --> 00:46:16,160
anything else is not core to the

00:46:13,640 --> 00:46:18,110
business is not really specifically

00:46:16,160 --> 00:46:19,300
related to that particular use case it

00:46:18,110 --> 00:46:21,430
may be a tool you you

00:46:19,300 --> 00:46:42,130
to implement the use case but it's on

00:46:21,430 --> 00:46:44,320
the outer fringe of the design so yeah

00:46:42,130 --> 00:46:46,750
so the yeah so the question is what is

00:46:44,320 --> 00:46:48,370
the difference between a between

00:46:46,750 --> 00:46:50,740
business logic and a use case so

00:46:48,370 --> 00:46:52,210
business logic is again something that

00:46:50,740 --> 00:46:56,200
would happen regardless of whether or

00:46:52,210 --> 00:47:01,420
not we have a web system or some online

00:46:56,200 --> 00:47:04,810
tool or software tool so so for a user

00:47:01,420 --> 00:47:06,160
to exist right users have names you know

00:47:04,810 --> 00:47:08,590
you there are certain information that

00:47:06,160 --> 00:47:10,690
you as an organization care about when

00:47:08,590 --> 00:47:12,700
it comes to that person so if it's

00:47:10,690 --> 00:47:14,350
something you'd write down in a notebook

00:47:12,700 --> 00:47:16,450
whether or not you had an online system

00:47:14,350 --> 00:47:17,680
or not it's probably important and

00:47:16,450 --> 00:47:22,330
something that you should keep track of

00:47:17,680 --> 00:47:25,030
within the the person or member entity

00:47:22,330 --> 00:47:26,500
and then you know for your events you

00:47:25,030 --> 00:47:27,910
know what are the things that you would

00:47:26,500 --> 00:47:31,150
be marketing whether or not you had a

00:47:27,910 --> 00:47:33,940
website so those are the things that

00:47:31,150 --> 00:47:35,830
that our core business logic and then

00:47:33,940 --> 00:47:38,980
the things that allow you to work with

00:47:35,830 --> 00:47:44,140
WordPress to manage those things those

00:47:38,980 --> 00:47:47,200
are use cases so yes being able to log

00:47:44,140 --> 00:47:50,710
into WordPress and create a new user

00:47:47,200 --> 00:47:53,020
that is a use case so the user is the

00:47:50,710 --> 00:47:54,460
core entity creating that user is

00:47:53,020 --> 00:47:57,400
something you do through the automated

00:47:54,460 --> 00:48:00,850
system you know that user would exist

00:47:57,400 --> 00:48:02,560
regardless in real life but but the

00:48:00,850 --> 00:48:05,700
automated system aspect that's where

00:48:02,560 --> 00:48:05,700
that use case comes in

00:48:10,770 --> 00:48:12,830

YouTube URL: https://www.youtube.com/watch?v=UaGeOgokgkU


