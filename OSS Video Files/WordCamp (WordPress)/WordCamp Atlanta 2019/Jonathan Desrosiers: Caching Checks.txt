Title: Jonathan Desrosiers: Caching Checks
Publication date: 2019-09-08
Playlist: WordCamp Atlanta 2019
Description: 
	Performance is something at the forefront of every site owner’s mind. A slow site will always scare off impatient users and customers. But how can you make your site faster without adding hardware? The answer: caching.
Let’s roll up our sleeves and dig into the different types of caching and how they relate to your WordPress site. If you are wondering how to improve your plugin or site’s performance, then this is the talk for you. Leave with an understanding of the different types of caching and when each type is appropriate so you can improve your site’s performance and conversion rate and start cashing larger checks.

WPTV link: https://wordpress.tv/2019/06/27/jonathan-desrosiers-caching-checks/
Captions: 
	00:00:03,470 --> 00:00:10,349
hello everybody awake after lunch can

00:00:06,150 --> 00:00:13,320
you hear me okay okay so this is Sir

00:00:10,349 --> 00:00:15,960
Isaac Newton and he said something that

00:00:13,320 --> 00:00:16,970
kind of stuck with me and I want to

00:00:15,960 --> 00:00:21,439
share with you

00:00:16,970 --> 00:00:23,880
dolla dolla bills y'all

00:00:21,439 --> 00:00:26,250
ya'll said cream cash rules everything

00:00:23,880 --> 00:00:28,080
around me but we're all here today

00:00:26,250 --> 00:00:29,640
because we we want to make some money

00:00:28,080 --> 00:00:33,000
right we either have a blog that makes

00:00:29,640 --> 00:00:37,500
this money or we sell a product or we we

00:00:33,000 --> 00:00:38,670
have a website so yeah so how do we go

00:00:37,500 --> 00:00:39,899
about that and I'm not going to talk

00:00:38,670 --> 00:00:41,129
about the business side of things I'm

00:00:39,899 --> 00:00:43,829
going to talk about the performance side

00:00:41,129 --> 00:00:45,899
of things because we're all spoiled we

00:00:43,829 --> 00:00:47,280
live in an age where everything is

00:00:45,899 --> 00:00:49,649
instant and we get this instant

00:00:47,280 --> 00:00:51,180
gratification and if anything takes more

00:00:49,649 --> 00:00:55,800
than a couple seconds you know we lose

00:00:51,180 --> 00:00:57,570
interest and we move on so yeah so there

00:00:55,800 --> 00:00:59,940
are many ways to improve your your

00:00:57,570 --> 00:01:01,170
website make it more profitable I'm only

00:00:59,940 --> 00:01:04,260
going to talk about performance today

00:01:01,170 --> 00:01:05,970
and a specific type of performance but

00:01:04,260 --> 00:01:08,930
it's not the only piece of the puzzle

00:01:05,970 --> 00:01:12,150
you you should be design using designers

00:01:08,930 --> 00:01:13,439
customer research talking to your

00:01:12,150 --> 00:01:14,820
customers learning about what they

00:01:13,439 --> 00:01:17,689
actually need and what they want from

00:01:14,820 --> 00:01:20,490
you you should be designing in a way to

00:01:17,689 --> 00:01:23,460
encourage conversions on your website so

00:01:20,490 --> 00:01:25,140
this is really a last piece to this

00:01:23,460 --> 00:01:26,729
puzzle if you have your application

00:01:25,140 --> 00:01:28,530
you've done all these things now how can

00:01:26,729 --> 00:01:30,900
we make it more efficient and more

00:01:28,530 --> 00:01:35,369
performant to convert on those those

00:01:30,900 --> 00:01:37,979
those customers so 53% of mobile users

00:01:35,369 --> 00:01:40,890
abandoned websites that take more than

00:01:37,979 --> 00:01:42,329
three seconds to load who be honest who

00:01:40,890 --> 00:01:44,070
thinks their site might take more than

00:01:42,329 --> 00:01:45,890
three seconds to load I know mine does

00:01:44,070 --> 00:01:48,750
right now I need to do some some work

00:01:45,890 --> 00:01:52,439
but performance is important to us and

00:01:48,750 --> 00:01:54,750
to our users so this is this is a

00:01:52,439 --> 00:01:56,040
business owner he has a site and you

00:01:54,750 --> 00:01:57,689
know it he thought it was really great

00:01:56,040 --> 00:02:01,409
and it's not really converting very well

00:01:57,689 --> 00:02:02,759
and he's getting frustrated so he needs

00:02:01,409 --> 00:02:06,659
some caching he needs some performance

00:02:02,759 --> 00:02:11,430
tweaks who likes horror movies anybody

00:02:06,659 --> 00:02:11,940
okay why do you like horror movies oh we

00:02:11,430 --> 00:02:13,600
had a Yahner

00:02:11,940 --> 00:02:15,970
who likes our movies

00:02:13,600 --> 00:02:18,430
do you like horror movies suspense right

00:02:15,970 --> 00:02:21,460
stresses you out a little bit okay well

00:02:18,430 --> 00:02:25,120
this study was done and mobile delays

00:02:21,460 --> 00:02:28,000
were just as scary as scary movies okay

00:02:25,120 --> 00:02:29,500
so if your site is slow they might as

00:02:28,000 --> 00:02:31,810
well go to the movie theater and see you

00:02:29,500 --> 00:02:34,180
know Jason 52 whatever is out at the

00:02:31,810 --> 00:02:35,530
time okay so we don't want this to be

00:02:34,180 --> 00:02:38,500
going to our website we don't want

00:02:35,530 --> 00:02:41,680
customers to think this here but it

00:02:38,500 --> 00:02:43,870
stresses us out and in I know from

00:02:41,680 --> 00:02:45,250
experience I sit there and I really need

00:02:43,870 --> 00:02:47,080
to get this done and it's just taking

00:02:45,250 --> 00:02:48,850
forever and I'll do it later and then I

00:02:47,080 --> 00:02:51,190
forget and then I'm very forgetful so

00:02:48,850 --> 00:02:52,960
that's that's never good and if we want

00:02:51,190 --> 00:02:54,460
to be dramatic we're doing this if we're

00:02:52,960 --> 00:02:55,660
a business owner we're just we're

00:02:54,460 --> 00:02:55,990
burning money we're throwing it out the

00:02:55,660 --> 00:02:57,730
window

00:02:55,990 --> 00:02:59,410
and we don't want to be doing this we

00:02:57,730 --> 00:03:08,320
want to be we want to be doing this like

00:02:59,410 --> 00:03:11,170
this guy all right so so what is cashing

00:03:08,320 --> 00:03:14,680
and why is it useful and why should you

00:03:11,170 --> 00:03:16,600
look into it caching is or a cache is a

00:03:14,680 --> 00:03:18,820
hardware or software component that

00:03:16,600 --> 00:03:22,480
stores data so that future requests for

00:03:18,820 --> 00:03:25,180
that data can be served faster WordPress

00:03:22,480 --> 00:03:27,640
sites they run on PHP they connect to a

00:03:25,180 --> 00:03:30,480
database where your data is stored and

00:03:27,640 --> 00:03:33,130
your posts your content your settings

00:03:30,480 --> 00:03:34,450
and these are slow this this there's a

00:03:33,130 --> 00:03:35,920
connection there and you have to make

00:03:34,450 --> 00:03:39,190
the connection and request the data

00:03:35,920 --> 00:03:41,650
query the data service can be slow

00:03:39,190 --> 00:03:43,360
Hardware can be expensive maybe you have

00:03:41,650 --> 00:03:44,590
an entry level server you don't or

00:03:43,360 --> 00:03:46,600
you're a non-profit you don't really

00:03:44,590 --> 00:03:49,600
have the money to throw at you know

00:03:46,600 --> 00:03:53,650
clusters of AWS servers and that can get

00:03:49,600 --> 00:03:57,790
expensive so I'll throw a couple

00:03:53,650 --> 00:03:59,980
analogies at you your your cache is like

00:03:57,790 --> 00:04:02,080
a grocery store right so you go to the

00:03:59,980 --> 00:04:03,550
grocery store and when you're caching

00:04:02,080 --> 00:04:05,290
you're you're going shopping you're

00:04:03,550 --> 00:04:06,760
getting the stuff and you're bringing it

00:04:05,290 --> 00:04:09,100
home and you're keeping it in your in

00:04:06,760 --> 00:04:11,620
your cabinets and it doesn't make sense

00:04:09,100 --> 00:04:13,210
for you every time you need to eat to go

00:04:11,620 --> 00:04:15,880
to the grocery store and come home and

00:04:13,210 --> 00:04:18,370
make your meal and then an immediate

00:04:15,880 --> 00:04:21,070
that's just very efficient it's a waste

00:04:18,370 --> 00:04:22,720
of time so caching is kind of like that

00:04:21,070 --> 00:04:24,580
and if you think about it in them in

00:04:22,720 --> 00:04:26,260
that way it'll help you see the things

00:04:24,580 --> 00:04:27,780
that you should be caching and the

00:04:26,260 --> 00:04:31,270
different types

00:04:27,780 --> 00:04:33,750
well the types there's two main types of

00:04:31,270 --> 00:04:36,280
cashing and those break down into a

00:04:33,750 --> 00:04:39,690
couple categories so the first one is

00:04:36,280 --> 00:04:43,000
non-persistent caching and this one is

00:04:39,690 --> 00:04:44,910
basically if I go to the website and

00:04:43,000 --> 00:04:47,920
then the next person goes to the website

00:04:44,910 --> 00:04:51,160
my experience will not affect theirs

00:04:47,920 --> 00:04:53,710
so what I mean by that is non-persistent

00:04:51,160 --> 00:04:56,020
caching it might cache for me but the

00:04:53,710 --> 00:04:59,740
next request will not have any caching

00:04:56,020 --> 00:05:01,780
so it's on a one-off basis WordPress

00:04:59,740 --> 00:05:05,980
does this out of the box we using the WP

00:05:01,780 --> 00:05:07,930
object cache and so for an example if we

00:05:05,980 --> 00:05:09,100
look at this this is just a basic

00:05:07,930 --> 00:05:11,080
function you don't have to understand

00:05:09,100 --> 00:05:14,290
code I'll explain it we're gonna say Wow

00:05:11,080 --> 00:05:18,220
while I is less than 100 we're gonna get

00:05:14,290 --> 00:05:20,350
post 310 okay so without any caching at

00:05:18,220 --> 00:05:22,060
all this would this would do a hundred

00:05:20,350 --> 00:05:24,220
database queries because it's gonna go

00:05:22,060 --> 00:05:26,440
and get the post a hundred times but

00:05:24,220 --> 00:05:29,320
with object caching what WordPress does

00:05:26,440 --> 00:05:31,180
is it takes that post and the first time

00:05:29,320 --> 00:05:33,670
it gets it it stores it in the object

00:05:31,180 --> 00:05:35,230
cache and then the next time it gets

00:05:33,670 --> 00:05:36,700
requested it just has to grab it from

00:05:35,230 --> 00:05:39,310
the object cache it doesn't have to go

00:05:36,700 --> 00:05:41,560
to the database get it again so you

00:05:39,310 --> 00:05:44,410
would have one query for a hundred

00:05:41,560 --> 00:05:47,500
different say operations as opposed as

00:05:44,410 --> 00:05:51,880
possess some has a 99% performance

00:05:47,500 --> 00:05:54,910
increase that's great and this is all

00:05:51,880 --> 00:05:56,980
done in memory so it gets the posts and

00:05:54,910 --> 00:05:58,750
it just keeps it in memory but only for

00:05:56,980 --> 00:06:01,600
that request so even if you go to

00:05:58,750 --> 00:06:04,680
another page it will have to start over

00:06:01,600 --> 00:06:08,050
again and that's non persistent caching

00:06:04,680 --> 00:06:11,170
so let's look at I did a couple of tests

00:06:08,050 --> 00:06:12,910
before here before I came in here so

00:06:11,170 --> 00:06:15,070
with no caching I disabled all the

00:06:12,910 --> 00:06:19,470
internals of the WordPress caching a

00:06:15,070 --> 00:06:21,760
home page with 20 posts had 66 queries

00:06:19,470 --> 00:06:24,520
when Irene abled all the WordPress

00:06:21,760 --> 00:06:28,060
internals for caching there were 45

00:06:24,520 --> 00:06:29,500
queries and that was a 33% decrease so

00:06:28,060 --> 00:06:33,010
right out-of-the-box WordPress is

00:06:29,500 --> 00:06:35,260
already saving you time and processing

00:06:33,010 --> 00:06:38,280
power and helping you keep your web your

00:06:35,260 --> 00:06:38,280
users on your website

00:06:40,560 --> 00:06:47,890
so how would you take advantage of this

00:06:44,910 --> 00:06:49,480
so this is a simple function basically

00:06:47,890 --> 00:06:51,760
what this is doing is it's getting a

00:06:49,480 --> 00:06:54,790
thing for us it's going to check the

00:06:51,760 --> 00:06:58,360
cash in the group of my plug in things

00:06:54,790 --> 00:07:00,220
if there's data we're gonna return it if

00:06:58,360 --> 00:07:02,050
there's no data we're gonna go get our

00:07:00,220 --> 00:07:04,600
data and this could be a database query

00:07:02,050 --> 00:07:06,220
or it could be you're building or

00:07:04,600 --> 00:07:09,010
calculating something it doesn't have to

00:07:06,220 --> 00:07:10,900
be a request and then we're gonna set it

00:07:09,010 --> 00:07:13,120
into the cache for next time and we're

00:07:10,900 --> 00:07:15,670
gonna return the data so this is really

00:07:13,120 --> 00:07:17,890
easy you just need a utility function

00:07:15,670 --> 00:07:19,450
that will handle this for you and you

00:07:17,890 --> 00:07:21,490
just call it all the time and your

00:07:19,450 --> 00:07:25,470
casual your data will be cash for your

00:07:21,490 --> 00:07:25,470
plug in your theme whatever it may be so

00:07:26,580 --> 00:07:33,700
the next type is persistent caching this

00:07:30,340 --> 00:07:36,580
has many more types subtypes that we'll

00:07:33,700 --> 00:07:38,620
talk about the first one is transients

00:07:36,580 --> 00:07:41,290
so this is something that's also built

00:07:38,620 --> 00:07:44,710
into WordPress transient you can think

00:07:41,290 --> 00:07:47,290
of as the weather forecast you might

00:07:44,710 --> 00:07:48,730
check the forecast in the morning but

00:07:47,290 --> 00:07:51,040
you shouldn't use the same forecast that

00:07:48,730 --> 00:07:53,110
night it's gonna change you have to go

00:07:51,040 --> 00:07:55,810
out and get it again so this is most

00:07:53,110 --> 00:07:57,340
common for maybe going to Twitter and

00:07:55,810 --> 00:07:59,560
getting your Twitter feed and your

00:07:57,340 --> 00:08:01,000
responses or your likes going to your

00:07:59,560 --> 00:08:03,100
YouTube channel and getting your new

00:08:01,000 --> 00:08:05,050
videos these are things that you would

00:08:03,100 --> 00:08:06,580
you would request the data from a

00:08:05,050 --> 00:08:10,240
service and then you would store it in a

00:08:06,580 --> 00:08:13,270
cache in a transient so a simple example

00:08:10,240 --> 00:08:15,040
of this let's say we check our transient

00:08:13,270 --> 00:08:17,800
get transient if there's data we're

00:08:15,040 --> 00:08:19,990
gonna just return the data otherwise

00:08:17,800 --> 00:08:21,640
we're going to request the data and if

00:08:19,990 --> 00:08:24,250
it's not an error we're gonna store the

00:08:21,640 --> 00:08:25,930
data transients are always having

00:08:24,250 --> 00:08:28,090
expiration so in this case we're gonna

00:08:25,930 --> 00:08:29,950
store for two hours and then we're gonna

00:08:28,090 --> 00:08:31,690
return the data at the end so again a

00:08:29,950 --> 00:08:33,520
very simple function that you can call

00:08:31,690 --> 00:08:36,969
you're just wrapping it around some

00:08:33,520 --> 00:08:40,060
caching in some logic and it will it

00:08:36,969 --> 00:08:42,640
will store that in your database and

00:08:40,060 --> 00:08:44,620
like I said database transients are in

00:08:42,640 --> 00:08:47,770
the database so they're independent of

00:08:44,620 --> 00:08:49,360
an external caching service or any type

00:08:47,770 --> 00:08:51,580
of hardware or software you might have

00:08:49,360 --> 00:08:52,520
to setup so it's really great because

00:08:51,580 --> 00:08:54,230
you don't have to do any

00:08:52,520 --> 00:08:56,090
extra it's there for you you can already

00:08:54,230 --> 00:08:58,760
utilize this even on a very basic

00:08:56,090 --> 00:09:02,360
default install of WordPress it will

00:08:58,760 --> 00:09:04,490
create two two entries one for the time

00:09:02,360 --> 00:09:06,950
out so that when this should reset and

00:09:04,490 --> 00:09:11,390
then the other one for the data the only

00:09:06,950 --> 00:09:12,980
thing with transient is that you you

00:09:11,390 --> 00:09:15,350
want to make sure your reasonable with

00:09:12,980 --> 00:09:18,050
your timeouts so you don't want to hit a

00:09:15,350 --> 00:09:19,520
service every hour they might or even

00:09:18,050 --> 00:09:21,170
every five minutes

00:09:19,520 --> 00:09:23,840
they they won't like that very much

00:09:21,170 --> 00:09:25,400
you'll say hey this site is is hammering

00:09:23,840 --> 00:09:27,260
our servers and making it harder for us

00:09:25,400 --> 00:09:31,340
to stay in business

00:09:27,260 --> 00:09:32,780
and then you also you you want to be you

00:09:31,340 --> 00:09:35,210
don't want to cache the whole request

00:09:32,780 --> 00:09:37,250
you want to always be parsing the data

00:09:35,210 --> 00:09:38,960
and storing only what you need because

00:09:37,250 --> 00:09:40,850
especially where the transients are in

00:09:38,960 --> 00:09:42,680
the database by default you don't want

00:09:40,850 --> 00:09:46,130
to have like five megabyte entries in

00:09:42,680 --> 00:09:48,500
your database and transients are not

00:09:46,130 --> 00:09:50,780
Auto loaded so that when WordPress

00:09:48,500 --> 00:09:52,520
initiate initializes it will pull all

00:09:50,780 --> 00:09:53,870
the auto loaded options and store them

00:09:52,520 --> 00:09:57,410
in memory right out of the bat right off

00:09:53,870 --> 00:09:59,210
the right out of the gate but they are

00:09:57,410 --> 00:10:07,160
not auto loaded so they're going to be

00:09:59,210 --> 00:10:09,590
database calls each one so I know that I

00:10:07,160 --> 00:10:12,110
talked about WP object cache being non

00:10:09,590 --> 00:10:15,020
persistent but it's also set up to be

00:10:12,110 --> 00:10:18,140
persistent if you do a little bit extra

00:10:15,020 --> 00:10:21,310
work maybe you set up memcache D a PC

00:10:18,140 --> 00:10:24,350
reduce any of those custom caching types

00:10:21,310 --> 00:10:26,660
it's built in a way that you can drop a

00:10:24,350 --> 00:10:28,730
file into your WP content folder and

00:10:26,660 --> 00:10:32,750
replace the core the way that core does

00:10:28,730 --> 00:10:34,070
it so instead of storing it in memory it

00:10:32,750 --> 00:10:38,390
will store it and write it to this

00:10:34,070 --> 00:10:40,160
external object caching so this is an

00:10:38,390 --> 00:10:43,580
example this is the memcache to plugin

00:10:40,160 --> 00:10:45,440
and you can see these functions will not

00:10:43,580 --> 00:10:47,720
get defined by core if they're defined

00:10:45,440 --> 00:10:51,590
in this file and you can do your own

00:10:47,720 --> 00:10:53,830
writes in here so there's plenty of drop

00:10:51,590 --> 00:10:56,630
ins available for the different types of

00:10:53,830 --> 00:11:01,000
object caching that you might need so

00:10:56,630 --> 00:11:04,010
take a look at some of those excuse me

00:11:01,000 --> 00:11:06,490
so I went in on a test of that same test

00:11:04,010 --> 00:11:09,550
site on that same page with 20 posts

00:11:06,490 --> 00:11:11,680
I enabled memcache and that was nine

00:11:09,550 --> 00:11:13,480
queries after that so the first time it

00:11:11,680 --> 00:11:14,950
runs there'll be many queries again but

00:11:13,480 --> 00:11:16,540
then they're all written to cache and

00:11:14,950 --> 00:11:19,060
then after that there was only nine

00:11:16,540 --> 00:11:22,600
queries and so that's an 80% further

00:11:19,060 --> 00:11:23,950
increase in performance it's this guy

00:11:22,600 --> 00:11:25,450
he's getting on his phone now he's

00:11:23,950 --> 00:11:27,100
calling his developer he's saying hey

00:11:25,450 --> 00:11:32,080
I've heard of this thing I need to we

00:11:27,100 --> 00:11:35,110
need to see what we can do so how do you

00:11:32,080 --> 00:11:36,850
take advantage of this exactly the same

00:11:35,110 --> 00:11:38,260
way you would the object cache there's

00:11:36,850 --> 00:11:40,779
nothing different here from that first

00:11:38,260 --> 00:11:44,230
example because it's a drop in because

00:11:40,779 --> 00:11:45,370
it's it's pluggable it's replaceable you

00:11:44,230 --> 00:11:47,620
don't have to do anything

00:11:45,370 --> 00:11:50,380
so if you write plugins or themes you

00:11:47,620 --> 00:11:52,209
can take advantage of this and no matter

00:11:50,380 --> 00:11:54,190
what the user's setup is or what their

00:11:52,209 --> 00:11:55,540
caching mechanism is they'll get a

00:11:54,190 --> 00:11:59,410
benefit from that so that's that's

00:11:55,540 --> 00:12:02,230
really great and transients if you have

00:11:59,410 --> 00:12:03,970
object caching setup they will no longer

00:12:02,230 --> 00:12:06,130
write to the database so transients

00:12:03,970 --> 00:12:12,820
instead would get stored in the memory

00:12:06,130 --> 00:12:15,820
or on the server for object caching page

00:12:12,820 --> 00:12:17,500
caching page caching is like cooking the

00:12:15,820 --> 00:12:19,390
food front there after you go to the

00:12:17,500 --> 00:12:21,579
grocery store and having leftovers in

00:12:19,390 --> 00:12:24,310
the fridge so page caching the whole

00:12:21,579 --> 00:12:26,170
page will render it will get converted

00:12:24,310 --> 00:12:28,360
into some type of file usually an HTML

00:12:26,170 --> 00:12:31,029
or a text file and then it will get

00:12:28,360 --> 00:12:34,990
stored in memory or wherever the page

00:12:31,029 --> 00:12:36,579
cache is set up to be yeah you go to the

00:12:34,990 --> 00:12:38,440
fridge it's already made you don't have

00:12:36,579 --> 00:12:39,180
to cook it again you can just display it

00:12:38,440 --> 00:12:41,850
to the user

00:12:39,180 --> 00:12:46,029
this can be a little problematic though

00:12:41,850 --> 00:12:52,420
now this is a basic example in nginx of

00:12:46,029 --> 00:12:55,060
how to set it up but sometimes you you

00:12:52,420 --> 00:12:56,529
can't cache the entire page and that's

00:12:55,060 --> 00:12:59,620
where this type of caching will come in

00:12:56,529 --> 00:13:04,209
handy is fragment caching so who has a

00:12:59,620 --> 00:13:07,209
store here and you buy a couple so if

00:13:04,209 --> 00:13:08,860
you think of a store right the great

00:13:07,209 --> 00:13:10,480
things about e-commerce site sorry once

00:13:08,860 --> 00:13:12,850
you're logged in everything's personal

00:13:10,480 --> 00:13:14,949
to you you have your account you have

00:13:12,850 --> 00:13:17,800
your cart and all those things so if you

00:13:14,949 --> 00:13:20,170
were doing page caching and you went to

00:13:17,800 --> 00:13:21,579
the site and then I went to the site

00:13:20,170 --> 00:13:23,800
you would see the same thing and that's

00:13:21,579 --> 00:13:26,560
not really the the best experience there

00:13:23,800 --> 00:13:30,070
so if we look at this example here we

00:13:26,560 --> 00:13:33,160
have our a product we're just seeing in

00:13:30,070 --> 00:13:35,019
an ecommerce store these are the things

00:13:33,160 --> 00:13:37,120
that we would not want to cache what's

00:13:35,019 --> 00:13:40,540
in our cart the my account link and

00:13:37,120 --> 00:13:42,699
probably more I think that's on this

00:13:40,540 --> 00:13:43,959
screenshot but there there may be others

00:13:42,699 --> 00:13:46,510
there might be at the bottom of the page

00:13:43,959 --> 00:13:48,490
there might be because you purchased

00:13:46,510 --> 00:13:50,639
something where they recommend similar

00:13:48,490 --> 00:13:53,110
products to what you're interested in

00:13:50,639 --> 00:13:55,389
this would be partial page caching you

00:13:53,110 --> 00:13:57,670
would hole punch those areas of the site

00:13:55,389 --> 00:13:59,410
in in certain files maybe you include

00:13:57,670 --> 00:14:00,970
those template files and then there

00:13:59,410 --> 00:14:02,350
would be a way to replace that and that

00:14:00,970 --> 00:14:04,209
only that would be rendered for each

00:14:02,350 --> 00:14:05,470
request so that way it's unique to the

00:14:04,209 --> 00:14:07,829
user and they receive the proper

00:14:05,470 --> 00:14:07,829
experience

00:14:07,889 --> 00:14:12,970
there's opcode caching this one is

00:14:11,019 --> 00:14:15,370
usually you will see three times

00:14:12,970 --> 00:14:16,930
performance increase on this and it

00:14:15,370 --> 00:14:19,449
doesn't really require much other than

00:14:16,930 --> 00:14:22,839
setting it up this will basically inject

00:14:19,449 --> 00:14:24,370
itself into the PHP lifecycle and it

00:14:22,839 --> 00:14:27,730
will take the result of the compilation

00:14:24,370 --> 00:14:30,190
of PHP and it will cache that so if you

00:14:27,730 --> 00:14:31,390
could think of instead of just setting

00:14:30,190 --> 00:14:33,910
up your workbench to build a birdhouse

00:14:31,390 --> 00:14:36,279
and once you get all your tools laid out

00:14:33,910 --> 00:14:38,380
and all your your supplies laid out it

00:14:36,279 --> 00:14:39,880
would cache that state so there right

00:14:38,380 --> 00:14:48,670
away you're ready to get building and

00:14:39,880 --> 00:14:49,990
processing things this is one that most

00:14:48,670 --> 00:14:52,810
of you probably have been bitten by and

00:14:49,990 --> 00:14:54,430
you don't even know it has anybody ever

00:14:52,810 --> 00:14:57,190
told you to flush your cache clear your

00:14:54,430 --> 00:15:01,149
browser cache right okay so browser

00:14:57,190 --> 00:15:03,790
caching is a way to define a time or a

00:15:01,149 --> 00:15:06,279
lifespan for a static asset so that

00:15:03,790 --> 00:15:09,579
could be a CSS file a JavaScript file an

00:15:06,279 --> 00:15:11,279
image a video file it would look

00:15:09,579 --> 00:15:16,300
something like this so in this example

00:15:11,279 --> 00:15:20,500
we are selling images to have an age of

00:15:16,300 --> 00:15:24,339
I believe this was two years and this

00:15:20,500 --> 00:15:26,410
one here is two months so your CSS files

00:15:24,339 --> 00:15:28,839
will only get downloaded every two

00:15:26,410 --> 00:15:30,610
months and your images will be there for

00:15:28,839 --> 00:15:32,860
a really long time which they never

00:15:30,610 --> 00:15:33,520
change so your users at once they get

00:15:32,860 --> 00:15:35,560
the image they

00:15:33,520 --> 00:15:40,840
shouldn't have to go get it again but

00:15:35,560 --> 00:15:42,910
this has a few problems because if you

00:15:40,840 --> 00:15:44,560
do change those files you need to make

00:15:42,910 --> 00:15:49,420
sure that they get the fresh files and

00:15:44,560 --> 00:15:54,070
we'll talk about that in a little bit so

00:15:49,420 --> 00:15:55,180
I have some tips for you here caching is

00:15:54,070 --> 00:15:58,870
not your Savior

00:15:55,180 --> 00:16:00,640
so I talked about before you have to

00:15:58,870 --> 00:16:02,260
make sure that your art your your

00:16:00,640 --> 00:16:04,120
application is architected in a way

00:16:02,260 --> 00:16:06,010
that's performing there are some just

00:16:04,120 --> 00:16:08,320
basic concepts that you have to make

00:16:06,010 --> 00:16:09,790
sure that you're following your your

00:16:08,320 --> 00:16:11,650
you're implementing in your work you

00:16:09,790 --> 00:16:13,660
can't just come in at the end of the

00:16:11,650 --> 00:16:16,360
project and add caching and expect

00:16:13,660 --> 00:16:18,340
everything to be great if your

00:16:16,360 --> 00:16:20,050
application is not designed to allow

00:16:18,340 --> 00:16:21,520
caching you're gonna have issues you're

00:16:20,050 --> 00:16:23,410
not going to be able to implement it so

00:16:21,520 --> 00:16:25,240
these are all things that you need to

00:16:23,410 --> 00:16:31,660
put some thought into in the beginning

00:16:25,240 --> 00:16:34,690
of the project you should always assume

00:16:31,660 --> 00:16:39,610
that the cache is broken or that it's

00:16:34,690 --> 00:16:41,680
empty at any moment your your your

00:16:39,610 --> 00:16:43,720
object cache server could restart it

00:16:41,680 --> 00:16:46,930
could flush itself and and remove all of

00:16:43,720 --> 00:16:49,180
its entries your transients could expire

00:16:46,930 --> 00:16:52,240
so you always have to code defensively

00:16:49,180 --> 00:16:53,860
in a way that if if the cache is not

00:16:52,240 --> 00:16:55,420
present you're going to be able to still

00:16:53,860 --> 00:16:56,620
display something to the user you're

00:16:55,420 --> 00:17:01,600
still going to be able to get the data

00:16:56,620 --> 00:17:03,040
you're going to refresh that cache for

00:17:01,600 --> 00:17:06,130
this reason you should always test with

00:17:03,040 --> 00:17:08,110
them without WordPress core and Travis

00:17:06,130 --> 00:17:11,110
when when changes are made to WordPress

00:17:08,110 --> 00:17:13,120
there's a job that tests with caching

00:17:11,110 --> 00:17:16,000
and there's a job that tests without so

00:17:13,120 --> 00:17:22,690
it's always there to make sure that both

00:17:16,000 --> 00:17:24,520
experiences are are maintained this is

00:17:22,690 --> 00:17:32,320
this is one of the harder things to get

00:17:24,520 --> 00:17:34,090
a hold of get the hang of so a lot of

00:17:32,320 --> 00:17:37,270
times when people first get into caching

00:17:34,090 --> 00:17:39,820
they let's cache everything and they go

00:17:37,270 --> 00:17:44,590
this is a cache that but they don't

00:17:39,820 --> 00:17:47,740
think about the usability of that cache

00:17:44,590 --> 00:17:51,690
so you shouldn't be caching these big

00:17:47,740 --> 00:17:54,580
chunks of data or these these big

00:17:51,690 --> 00:17:57,340
calculations what you should be doing is

00:17:54,580 --> 00:17:58,930
creating reusable chunks so if we think

00:17:57,340 --> 00:18:02,260
about this in WordPress

00:17:58,930 --> 00:18:06,850
there are cache groups for posts

00:18:02,260 --> 00:18:10,230
comments meta things like that sites if

00:18:06,850 --> 00:18:13,510
you have multi-site and what we cache is

00:18:10,230 --> 00:18:16,600
the post itself just the post we don't

00:18:13,510 --> 00:18:17,830
cache a query the result of a query that

00:18:16,600 --> 00:18:21,070
has ten posts in it

00:18:17,830 --> 00:18:23,080
we don't cache a list of users what we

00:18:21,070 --> 00:18:27,190
do is we cache each individual thing and

00:18:23,080 --> 00:18:28,600
that's important because if I'm on say

00:18:27,190 --> 00:18:30,760
I'm on the top part of the page and that

00:18:28,600 --> 00:18:33,220
post is listed and then I go to the

00:18:30,760 --> 00:18:35,680
bottom and there's a latest posts list

00:18:33,220 --> 00:18:38,290
if it's not individually cached you

00:18:35,680 --> 00:18:39,430
can't use that cache in both spots you

00:18:38,290 --> 00:18:40,720
would have to have to you would have a

00:18:39,430 --> 00:18:44,920
list of posts that is cache and you

00:18:40,720 --> 00:18:46,750
would have the post itself so by caching

00:18:44,920 --> 00:18:49,180
those those things as small as you can

00:18:46,750 --> 00:18:51,610
get them it allows you to reuse that

00:18:49,180 --> 00:18:54,790
cache in multiple places you might have

00:18:51,610 --> 00:18:57,130
a page that displays posts and then you

00:18:54,790 --> 00:18:59,980
have a page that displays images and

00:18:57,130 --> 00:19:03,510
posts and unless you do that you can't

00:18:59,980 --> 00:19:05,530
use that cache that makes sense so

00:19:03,510 --> 00:19:07,870
depending on your application and what

00:19:05,530 --> 00:19:10,600
it is you want to consider that it's

00:19:07,870 --> 00:19:14,980
still okay to cache other things like

00:19:10,600 --> 00:19:17,260
lists of posts and maybe results of

00:19:14,980 --> 00:19:19,690
calculations if you have this really

00:19:17,260 --> 00:19:22,150
complex calculation that happens to tell

00:19:19,690 --> 00:19:24,550
you how how much you need to spend to

00:19:22,150 --> 00:19:27,340
make that guy happy that was on the

00:19:24,550 --> 00:19:28,720
phone that's okay to cash too but again

00:19:27,340 --> 00:19:31,150
always think about that how can I make

00:19:28,720 --> 00:19:32,920
this reusable how can I make this not

00:19:31,150 --> 00:19:35,770
large and you always want to consider

00:19:32,920 --> 00:19:37,000
the size as well like I mentioned the

00:19:35,770 --> 00:19:38,770
bigger the things are the the more

00:19:37,000 --> 00:19:40,060
resources they take the more memories

00:19:38,770 --> 00:19:41,539
they'll take and you don't want to

00:19:40,060 --> 00:19:43,460
exhaust your your

00:19:41,539 --> 00:19:54,470
object cashing with like a couple pages

00:19:43,460 --> 00:19:57,889
a couple sections of your website always

00:19:54,470 --> 00:20:01,190
bust or flush the cache so when I say

00:19:57,889 --> 00:20:03,739
flush the cache that's the object object

00:20:01,190 --> 00:20:05,960
code aspect of it so when you update a

00:20:03,739 --> 00:20:07,789
post you want to make sure that you are

00:20:05,960 --> 00:20:10,070
hooking into the code and you're

00:20:07,789 --> 00:20:12,619
appropriately deleting that cache for

00:20:10,070 --> 00:20:15,169
that object so in WordPress you update a

00:20:12,619 --> 00:20:19,489
post that cache for that post is is

00:20:15,169 --> 00:20:22,429
deleted you have this custom data type

00:20:19,489 --> 00:20:23,899
you update it and your your panel you

00:20:22,429 --> 00:20:26,029
want to make sure that that gets deleted

00:20:23,899 --> 00:20:27,679
from the cache then the next time

00:20:26,029 --> 00:20:30,619
someone requests it it will get loaded

00:20:27,679 --> 00:20:33,049
it will get cached it will be fresh with

00:20:30,619 --> 00:20:35,509
the the resources that we talked about

00:20:33,049 --> 00:20:36,590
instead of getting on tech support and

00:20:35,509 --> 00:20:38,590
they say oh you just have the closure

00:20:36,590 --> 00:20:40,909
cache you know yeah clear your cache

00:20:38,590 --> 00:20:43,489
this is typically how you would in queue

00:20:40,909 --> 00:20:45,649
a stylesheet or a script and so you

00:20:43,489 --> 00:20:47,299
would name it you would tell WordPress

00:20:45,649 --> 00:20:53,749
where it is and you would include a

00:20:47,299 --> 00:20:55,789
version so in WordPress if you don't

00:20:53,749 --> 00:20:57,080
supply a version it will just use the

00:20:55,789 --> 00:20:59,269
version of WordPress that you're using

00:20:57,080 --> 00:21:02,210
so in this case I was using five point

00:20:59,269 --> 00:21:04,489
to release candidate two and as

00:21:02,210 --> 00:21:05,929
WordPress updates that would change so

00:21:04,489 --> 00:21:08,389
that way when the new version of

00:21:05,929 --> 00:21:10,249
WordPress is released the users are

00:21:08,389 --> 00:21:12,349
guaranteed to receive a fresh copy of

00:21:10,249 --> 00:21:14,479
that CSS or JavaScript file no matter

00:21:12,349 --> 00:21:16,519
what happened what changes are in it are

00:21:14,479 --> 00:21:18,559
there no changes it just says just grab

00:21:16,519 --> 00:21:21,409
it again we're updating it's it's fine

00:21:18,559 --> 00:21:23,479
one-time will be okay so by changing

00:21:21,409 --> 00:21:25,759
this value when you update your plug-in

00:21:23,479 --> 00:21:28,099
or when you update your themes that will

00:21:25,759 --> 00:21:30,409
automatically change this URL and you

00:21:28,099 --> 00:21:32,419
can ensure that your users or the the

00:21:30,409 --> 00:21:34,399
sites that use your plug-in all their

00:21:32,419 --> 00:21:37,429
users will receive fresh versions of

00:21:34,399 --> 00:21:40,519
those those assets this is a big one

00:21:37,429 --> 00:21:43,609
because it's just easy it's it's the

00:21:40,519 --> 00:21:44,960
easiest way to do this but not everybody

00:21:43,609 --> 00:21:49,690
does that a lot of people will include

00:21:44,960 --> 00:21:53,029
the the the stylesheet includes include

00:21:49,690 --> 00:21:55,429
tags in the header of the file but if

00:21:53,029 --> 00:21:58,309
you include them this is very easy to do

00:21:55,429 --> 00:22:01,639
and you can replace this with a function

00:21:58,309 --> 00:22:03,919
or a constant that get my plug-in

00:22:01,639 --> 00:22:05,989
version and it will just replace that if

00:22:03,919 --> 00:22:07,669
you update it in one place so you don't

00:22:05,989 --> 00:22:16,219
have to go down the file and replace all

00:22:07,669 --> 00:22:19,489
those versions so warming or priming

00:22:16,219 --> 00:22:22,519
your cache sometimes it makes sense for

00:22:19,489 --> 00:22:24,950
you to populate the cache for the user

00:22:22,519 --> 00:22:27,529
so instead of waiting for the user to

00:22:24,950 --> 00:22:30,169
come to the site to populate everything

00:22:27,529 --> 00:22:32,239
maybe you have a cron job that will hit

00:22:30,169 --> 00:22:33,379
the site every once in a while and it

00:22:32,239 --> 00:22:38,479
will process that and it will populate

00:22:33,379 --> 00:22:40,969
those caches you this will help prevent

00:22:38,479 --> 00:22:42,679
something called cache stampeding so if

00:22:40,969 --> 00:22:45,289
the cache expires and it's empty and

00:22:42,679 --> 00:22:47,269
then all of a sudden I'm on Ellen and

00:22:45,289 --> 00:22:48,799
she mentions my website and everybody

00:22:47,269 --> 00:22:50,839
goes to my website at once and all the

00:22:48,799 --> 00:22:53,450
caches are empty they're gonna keep

00:22:50,839 --> 00:22:55,549
getting written so if multiple requests

00:22:53,450 --> 00:22:56,960
start around the same time they're all

00:22:55,549 --> 00:22:58,369
going to try to write to the cache and

00:22:56,960 --> 00:23:00,979
so your cache will get Stampede in there

00:22:58,369 --> 00:23:02,839
so sometimes if you're anticipating a

00:23:00,979 --> 00:23:06,229
lot a lot amount of large amount of

00:23:02,839 --> 00:23:09,080
traffic warming the caches is the way to

00:23:06,229 --> 00:23:12,739
go that way that Stampede it will happen

00:23:09,080 --> 00:23:14,479
from you and only that cron or however

00:23:12,739 --> 00:23:21,589
you're populating it will will affect

00:23:14,479 --> 00:23:24,710
that ultimately every every site is

00:23:21,589 --> 00:23:27,379
different you can't expect to install

00:23:24,710 --> 00:23:28,879
there's several plugins in the

00:23:27,379 --> 00:23:31,669
repository that will help you do these

00:23:28,879 --> 00:23:34,609
things even if you don't have access to

00:23:31,669 --> 00:23:39,879
install something like memcache it will

00:23:34,609 --> 00:23:42,259
help you with page caching your your

00:23:39,879 --> 00:23:44,299
resource caching with your expire

00:23:42,259 --> 00:23:45,409
headers and things like that but every

00:23:44,299 --> 00:23:48,349
set is different and you have to

00:23:45,409 --> 00:23:54,109
evaluate what's the most effective for

00:23:48,349 --> 00:23:56,479
you this is some additional reading

00:23:54,109 --> 00:23:58,369
these slides are on my website you can

00:23:56,479 --> 00:24:00,320
go and check that out

00:23:58,369 --> 00:24:04,159
I kept it short for questions I didn't

00:24:00,320 --> 00:24:06,320
get too technical but I do I do want to

00:24:04,159 --> 00:24:09,110
get into that if if people want to talk

00:24:06,320 --> 00:24:12,320
about that I'm not sure who's who's here

00:24:09,110 --> 00:24:14,299
consider themselves a developer okay so

00:24:12,320 --> 00:24:19,309
about half and who's a business owner or

00:24:14,299 --> 00:24:21,020
designer okay so yeah so I do want to

00:24:19,309 --> 00:24:23,030
answer questions I do want to help you

00:24:21,020 --> 00:24:26,210
understand this better so please ask

00:24:23,030 --> 00:24:29,590
questions we want to find this guy

00:24:26,210 --> 00:24:38,870
and we want to end up like this guy so

00:24:29,590 --> 00:24:47,660
thank you where's some questions I know

00:24:38,870 --> 00:24:49,970
you have questions yeah yes so the

00:24:47,660 --> 00:24:52,299
question is I had mentioned hardware and

00:24:49,970 --> 00:24:55,400
so which ones are hardware and software

00:24:52,299 --> 00:24:57,440
so the ones that are hardware are like

00:24:55,400 --> 00:24:59,870
memcache sometimes you can set up a

00:24:57,440 --> 00:25:03,230
separate server and that server the only

00:24:59,870 --> 00:25:08,150
purpose that it has is to store the the

00:25:03,230 --> 00:25:11,030
cache opcode caches is software it just

00:25:08,150 --> 00:25:12,620
runs on the same server your non

00:25:11,030 --> 00:25:16,490
persisting cache that runs with

00:25:12,620 --> 00:25:18,140
WordPress automatically but in Reedus I

00:25:16,490 --> 00:25:19,669
haven't worked with Reedus in a while

00:25:18,140 --> 00:25:23,299
but I believe or you need a reader

00:25:19,669 --> 00:25:26,540
server to to have the cache stored on as

00:25:23,299 --> 00:25:29,080
well yeah but there there are some

00:25:26,540 --> 00:25:31,790
services that will help you with that

00:25:29,080 --> 00:25:34,669
and there if for a develop they're not

00:25:31,790 --> 00:25:36,260
too hard to set up you have to monitor

00:25:34,669 --> 00:25:39,669
them and make sure they're they're tuned

00:25:36,260 --> 00:25:39,669
to your server in your environment

00:25:42,910 --> 00:25:47,380
anybody else know

00:26:00,930 --> 00:26:07,230
do you mean how many how much memory

00:26:03,370 --> 00:26:09,970
four so the question was how much memory

00:26:07,230 --> 00:26:13,290
is needed for things like this so do you

00:26:09,970 --> 00:26:15,820
mean for the server itself or for the

00:26:13,290 --> 00:26:20,860
the object caches that require a

00:26:15,820 --> 00:26:22,660
different server okay so that all

00:26:20,860 --> 00:26:25,870
depends on the traffic that you get the

00:26:22,660 --> 00:26:29,520
how the server is configured what

00:26:25,870 --> 00:26:31,600
software is running on it if you have

00:26:29,520 --> 00:26:33,220
you know some services are more

00:26:31,600 --> 00:26:35,440
bare-bones they just give you the server

00:26:33,220 --> 00:26:37,000
and you set everything up on your own so

00:26:35,440 --> 00:26:39,040
for that you might need more memory

00:26:37,000 --> 00:26:41,470
because you would probably install less

00:26:39,040 --> 00:26:44,740
as a business owner but for more managed

00:26:41,470 --> 00:26:46,930
solutions they typically have plugins so

00:26:44,740 --> 00:26:48,360
like we have a plugin that it automatic

00:26:46,930 --> 00:26:52,330
we're working on adding off code cache

00:26:48,360 --> 00:26:54,220
and it's set up where we have different

00:26:52,330 --> 00:26:56,170
caches running and configured already

00:26:54,220 --> 00:26:58,660
for you where you don't have to worry

00:26:56,170 --> 00:27:00,550
about that it would just it would just

00:26:58,660 --> 00:27:03,220
work but we also don't let you tweak

00:27:00,550 --> 00:27:07,210
resources it's like we have tiers of our

00:27:03,220 --> 00:27:08,950
service so it depends and you might have

00:27:07,210 --> 00:27:10,900
to try a couple different ones and see

00:27:08,950 --> 00:27:13,660
what works for you hire someone in the

00:27:10,900 --> 00:27:19,740
tuna or it's that's not an easy answer

00:27:13,660 --> 00:27:19,740
that's a whole other talk yes

00:27:31,880 --> 00:27:38,190
yeah so the question was the persons

00:27:36,420 --> 00:27:40,160
experienced they have typically seen

00:27:38,190 --> 00:27:42,450
that caching plugins slow the site down

00:27:40,160 --> 00:27:46,800
this is kind of what I mean by every

00:27:42,450 --> 00:27:49,560
site is different sometimes people set

00:27:46,800 --> 00:27:52,080
expirations on caches so you can any of

00:27:49,560 --> 00:27:53,760
those caches especially transients you

00:27:52,080 --> 00:27:56,850
can say this is only good for an hour

00:27:53,760 --> 00:27:58,890
this is only good for five minutes but

00:27:56,850 --> 00:28:00,360
if you're a blog and you're not getting

00:27:58,890 --> 00:28:02,370
much traffic there's really no reason

00:28:00,360 --> 00:28:05,070
for that to expire so soon

00:28:02,370 --> 00:28:06,560
your posts are probably good for a year

00:28:05,070 --> 00:28:09,480
you know more than that

00:28:06,560 --> 00:28:11,760
so the caching plugins they might be

00:28:09,480 --> 00:28:14,160
configured to expire every hour and so

00:28:11,760 --> 00:28:16,860
if that that post only gets visited once

00:28:14,160 --> 00:28:18,780
an hour once a day every single time

00:28:16,860 --> 00:28:20,670
that the person goes to it you're not

00:28:18,780 --> 00:28:22,500
getting the benefit of the caching

00:28:20,670 --> 00:28:26,160
because it's always fresh it's always

00:28:22,500 --> 00:28:29,820
expired so that that's one of the things

00:28:26,160 --> 00:28:31,290
I mean by every studies different you

00:28:29,820 --> 00:28:33,450
have to evaluate those things the

00:28:31,290 --> 00:28:35,580
different factors around your your users

00:28:33,450 --> 00:28:37,290
and their their habits and that will

00:28:35,580 --> 00:28:40,890
that will really affect how you tune

00:28:37,290 --> 00:28:42,750
your your website's caching the the

00:28:40,890 --> 00:28:44,880
plugins are good the caching plugins are

00:28:42,750 --> 00:28:47,880
all good it's just they try to do a lot

00:28:44,880 --> 00:28:51,240
for a lot of different sites and it's

00:28:47,880 --> 00:28:53,430
very hard to do that well for all the

00:28:51,240 --> 00:28:55,740
different variables WordPress is great

00:28:53,430 --> 00:28:58,170
you can run as many plugins and themes

00:28:55,740 --> 00:29:00,450
combinations as you want but WordPress

00:28:58,170 --> 00:29:02,010
is not great because you can run as many

00:29:00,450 --> 00:29:03,510
plug-in and theme combinations as you

00:29:02,010 --> 00:29:04,770
want right so it makes it really

00:29:03,510 --> 00:29:07,140
difficult to build for it if you're not

00:29:04,770 --> 00:29:08,370
in there and building it based on what

00:29:07,140 --> 00:29:10,920
you know is required for your

00:29:08,370 --> 00:29:13,350
environment so yeah so in some cases

00:29:10,920 --> 00:29:15,480
that that will happen but you might have

00:29:13,350 --> 00:29:17,130
to turn some things off or start to read

00:29:15,480 --> 00:29:18,990
into the different things in different

00:29:17,130 --> 00:29:21,440
settings that it has and figure out how

00:29:18,990 --> 00:29:22,950
to tweak that to work the best for you

00:29:21,440 --> 00:29:25,460
yeah you're welcome

00:29:22,950 --> 00:29:25,460
yeah

00:29:33,690 --> 00:29:42,490
yep so the the I'm sorry

00:29:39,790 --> 00:29:44,440
oh yes the question the question was do

00:29:42,490 --> 00:29:45,940
browser's cache differently Chrome's

00:29:44,440 --> 00:29:49,000
appears to be very aggressive lately

00:29:45,940 --> 00:29:51,250
with how they cache things as far as I

00:29:49,000 --> 00:29:53,020
know if you don't define the caching

00:29:51,250 --> 00:29:54,760
rules the browser is gonna make the best

00:29:53,020 --> 00:29:56,710
decision for the user and that might be

00:29:54,760 --> 00:29:58,960
based on their settings or what the

00:29:56,710 --> 00:30:01,750
browser thinks so maybe you're not

00:29:58,960 --> 00:30:04,330
setting your your your cache headers for

00:30:01,750 --> 00:30:07,210
your JavaScript and you're updating and

00:30:04,330 --> 00:30:08,980
it's not changing that could be part of

00:30:07,210 --> 00:30:10,210
it but if you want to control that just

00:30:08,980 --> 00:30:12,880
define those and the browser should

00:30:10,210 --> 00:30:13,180
respect those headers yeah you're

00:30:12,880 --> 00:30:21,330
welcome

00:30:13,180 --> 00:30:21,330
yes okay

00:30:34,790 --> 00:30:40,020
yeah so the question is the the person's

00:30:38,100 --> 00:30:42,480
having issues with safaree they'll make

00:30:40,020 --> 00:30:45,210
a change and every every other browser

00:30:42,480 --> 00:30:46,830
will see the change but not Safari so

00:30:45,210 --> 00:30:51,060
one thing you could do is to change the

00:30:46,830 --> 00:30:53,270
version sometimes when I develop let's

00:30:51,060 --> 00:30:55,590
see so there's a few things you could do

00:30:53,270 --> 00:30:57,860
you could just change this and that

00:30:55,590 --> 00:31:02,190
should basically what that does is it

00:30:57,860 --> 00:31:05,250
your browser will see this as a complete

00:31:02,190 --> 00:31:07,380
URL it includes this in the URL in the

00:31:05,250 --> 00:31:08,940
location of the file but if this changes

00:31:07,380 --> 00:31:11,400
even though it's after the question mark

00:31:08,940 --> 00:31:14,040
it will see it as a unique file and so

00:31:11,400 --> 00:31:16,200
that's why that helps with that the

00:31:14,040 --> 00:31:19,710
other thing you can do is when you open

00:31:16,200 --> 00:31:22,020
debug tools a lot of times there's a

00:31:19,710 --> 00:31:24,120
checkbox that says disable cache if you

00:31:22,020 --> 00:31:27,090
check that it will always get fresh

00:31:24,120 --> 00:31:29,850
files so I know in Firefox I have that

00:31:27,090 --> 00:31:31,920
and if I uncheck that and then i refresh

00:31:29,850 --> 00:31:34,110
the page it will they'll actually be

00:31:31,920 --> 00:31:36,000
grayed out in the network tab because it

00:31:34,110 --> 00:31:37,590
will say cached so it already has it

00:31:36,000 --> 00:31:39,510
it's not gonna go get it but it will it

00:31:37,590 --> 00:31:42,750
will actually tell you that I haven't

00:31:39,510 --> 00:31:45,030
used debug bar and debug tools in Safari

00:31:42,750 --> 00:32:03,300
recently but I'm pretty sure they have

00:31:45,030 --> 00:32:06,420
something similar yeah so the comment

00:32:03,300 --> 00:32:08,040
was safaris pretty bad with that in the

00:32:06,420 --> 00:32:10,710
developer tools you have to really open

00:32:08,040 --> 00:32:14,270
it up and explicitly flush it to for it

00:32:10,710 --> 00:32:14,270
to work yes

00:32:27,130 --> 00:32:31,880
yes I'm glad you brought that up so the

00:32:29,600 --> 00:32:34,340
comment was if you have something like

00:32:31,880 --> 00:32:36,559
CloudFlare a CDN a lot of times you can

00:32:34,340 --> 00:32:40,220
log in and flush the entire cache or a

00:32:36,559 --> 00:32:43,700
specific file in there no I'm so CDN is

00:32:40,220 --> 00:32:45,680
basically a distributed network of

00:32:43,700 --> 00:32:47,540
computers that will hold copies of your

00:32:45,680 --> 00:32:50,150
files usually your images and your

00:32:47,540 --> 00:32:52,670
scripts like that and when the user

00:32:50,150 --> 00:32:54,350
requests your website it will serve from

00:32:52,670 --> 00:32:55,970
the closest computer so it's helping

00:32:54,350 --> 00:32:57,920
speed that up by eliminating the

00:32:55,970 --> 00:33:00,950
connections that the file has to travel

00:32:57,920 --> 00:33:02,630
through to get to the user and a lot of

00:33:00,950 --> 00:33:04,610
times they have those cache headers

00:33:02,630 --> 00:33:07,040
configured on all the requests of those

00:33:04,610 --> 00:33:09,920
files because the DNS is going through

00:33:07,040 --> 00:33:11,750
it and request through their server so

00:33:09,920 --> 00:33:14,570
they're able to have a much more

00:33:11,750 --> 00:33:17,120
fine-grained control over that so if you

00:33:14,570 --> 00:33:18,920
really really need that or you that's an

00:33:17,120 --> 00:33:21,110
and I should have mentioned that it's a

00:33:18,920 --> 00:33:24,140
it's kind of caching but it's more just

00:33:21,110 --> 00:33:26,000
offloading of performance where they're

00:33:24,140 --> 00:33:27,710
they're handling those requests for you

00:33:26,000 --> 00:33:28,910
so those requests aren't even going and

00:33:27,710 --> 00:33:37,160
then that's going to that's going to

00:33:28,910 --> 00:33:40,010
help yeah yes so there that's one way to

00:33:37,160 --> 00:33:44,660
configure your cache headers is with HT

00:33:40,010 --> 00:33:46,040
access you can do it with nginx but if

00:33:44,660 --> 00:33:47,510
you wanted to have a handle on it on

00:33:46,040 --> 00:33:49,720
your server this is what you would do

00:33:47,510 --> 00:33:49,720
here

00:34:25,780 --> 00:34:31,600
right through a computer up the desk

00:34:28,220 --> 00:34:36,919
yeah so the comment was shared hosting

00:34:31,600 --> 00:34:38,510
sometimes has issues with connections

00:34:36,919 --> 00:34:40,970
and with allowing you to tweak some of

00:34:38,510 --> 00:34:43,850
these things and that's true oftentimes

00:34:40,970 --> 00:34:44,990
there's with shared hosting the

00:34:43,850 --> 00:34:46,429
companies will try to make the best

00:34:44,990 --> 00:34:47,600
decisions for their users because

00:34:46,429 --> 00:34:50,570
usually they're a little bit more

00:34:47,600 --> 00:34:52,400
non-technical but sometimes that makes

00:34:50,570 --> 00:34:54,290
it harder to override certain things and

00:34:52,400 --> 00:34:56,210
configure things like cache headers like

00:34:54,290 --> 00:34:59,240
this here so they might have a different

00:34:56,210 --> 00:35:00,470
loading order of certain things so it

00:34:59,240 --> 00:35:01,520
always it's you've got to find what

00:35:00,470 --> 00:35:03,740
works for you what level of

00:35:01,520 --> 00:35:06,110
configuration you need maybe it's cloud

00:35:03,740 --> 00:35:08,720
hosting maybe it's a CDN to offload all

00:35:06,110 --> 00:35:20,380
that stuff you just every set is

00:35:08,720 --> 00:35:20,380
different yeah like this guy yes

00:35:24,330 --> 00:35:28,590
good question so first times the bite

00:35:26,890 --> 00:35:32,320
does it have anything to do with caching

00:35:28,590 --> 00:35:33,610
first time to bite it yes

00:35:32,320 --> 00:35:34,960
everything can be cached you know

00:35:33,610 --> 00:35:37,360
there's always ways to cache it that

00:35:34,960 --> 00:35:39,340
would be more on the DNS level though so

00:35:37,360 --> 00:35:42,490
that's basically the DNS server is

00:35:39,340 --> 00:35:44,530
responding really quickly you can't

00:35:42,490 --> 00:35:48,490
really do anything about that other than

00:35:44,530 --> 00:35:50,770
finding a good name name server host see

00:35:48,490 --> 00:35:53,320
CloudFlare might help with that because

00:35:50,770 --> 00:35:56,680
there are CDN and they they handle that

00:35:53,320 --> 00:35:59,110
stuff as well but as far as caching on

00:35:56,680 --> 00:36:01,990
the WordPress level or the server

00:35:59,110 --> 00:36:07,750
application level not really that comes

00:36:01,990 --> 00:36:21,610
first that's before that yep your dns

00:36:07,750 --> 00:36:25,570
will be the most important for that yeah

00:36:21,610 --> 00:36:27,550
so again it's like CDN it has network of

00:36:25,570 --> 00:36:29,290
computers around the world and the

00:36:27,550 --> 00:36:31,390
closest computer will respond to your

00:36:29,290 --> 00:36:33,610
user it's kind of the same thing if they

00:36:31,390 --> 00:36:35,440
have the distributed DNS it's all over

00:36:33,610 --> 00:36:38,980
the place there's a closer computer to

00:36:35,440 --> 00:36:40,360
respond might do better also a lot of

00:36:38,980 --> 00:36:43,480
Internet service providers will have

00:36:40,360 --> 00:36:44,530
their own DNS records and they intercept

00:36:43,480 --> 00:36:48,700
that first and they're the ones that

00:36:44,530 --> 00:36:49,870
serve it so they they know how to things

00:36:48,700 --> 00:36:51,070
that CloudFlare and stuff like that

00:36:49,870 --> 00:36:52,930
they're on top of that they know how to

00:36:51,070 --> 00:37:03,060
encourage the best response time

00:36:52,930 --> 00:37:03,060
possible yes yes okay

00:37:17,300 --> 00:37:37,040
we are created yes yes so good question

00:37:33,380 --> 00:37:39,740
so he's a plug-in developer and he runs

00:37:37,040 --> 00:37:42,920
into issues a lot where they localize

00:37:39,740 --> 00:37:45,920
data so if you have a script like we

00:37:42,920 --> 00:37:47,810
were registering in our example you can

00:37:45,920 --> 00:37:49,370
localize information that gets attached

00:37:47,810 --> 00:37:51,950
to that script and basically it will get

00:37:49,370 --> 00:37:55,430
printed out in the file in in the the

00:37:51,950 --> 00:37:57,020
page markup or in a script tag and so

00:37:55,430 --> 00:38:00,020
then your JavaScript will be able to

00:37:57,020 --> 00:38:03,590
ingest that as information so in

00:38:00,020 --> 00:38:06,020
Gutenberg that they have JavaScript

00:38:03,590 --> 00:38:07,550
localization so it will localize all the

00:38:06,020 --> 00:38:08,960
scripts and then if you're speaking a

00:38:07,550 --> 00:38:11,930
different language it has all the

00:38:08,960 --> 00:38:15,410
translations available but his users

00:38:11,930 --> 00:38:19,120
often use page caching so that data that

00:38:15,410 --> 00:38:23,290
gets localized is the same for everyone

00:38:19,120 --> 00:38:25,400
so as far as how to better educate them

00:38:23,290 --> 00:38:27,770
there's things you could do you could

00:38:25,400 --> 00:38:29,810
localize your data with an ajax request

00:38:27,770 --> 00:38:31,850
you could when the page loads it could

00:38:29,810 --> 00:38:36,140
request that data that's one way to keep

00:38:31,850 --> 00:38:37,850
it fresh you could use some of the more

00:38:36,140 --> 00:38:40,130
popular caching plugins and you could

00:38:37,850 --> 00:38:43,190
figure out how to hole punch and and

00:38:40,130 --> 00:38:45,950
allow that to be unique and generated

00:38:43,190 --> 00:38:49,160
unique to each request it's it's a hard

00:38:45,950 --> 00:38:50,570
problem but those are a few things that

00:38:49,160 --> 00:38:53,300
come to mind that you could maybe look

00:38:50,570 --> 00:38:54,680
at but ultimately there's always going

00:38:53,300 --> 00:38:56,570
to be people just installing a plug-in

00:38:54,680 --> 00:38:58,580
and hoping it works and and if you can

00:38:56,570 --> 00:39:00,800
take the top three or four or caching

00:38:58,580 --> 00:39:02,510
plugins that might be a good start to

00:39:00,800 --> 00:39:03,920
try that out see how it works but it

00:39:02,510 --> 00:39:05,420
might not work for you you have to kind

00:39:03,920 --> 00:39:11,200
of see like every site is different

00:39:05,420 --> 00:39:11,200
every plugins different - yes

00:39:16,960 --> 00:39:29,590
high volume based on traffic or on

00:39:19,700 --> 00:39:29,590
content okay okay

00:40:12,050 --> 00:40:27,720
mmm-hmm you're doing load balancing yeah

00:40:26,880 --> 00:40:32,310
good question

00:40:27,720 --> 00:40:34,050
so the the person at the talk he he has

00:40:32,310 --> 00:40:36,480
a client that got mentioned in the Super

00:40:34,050 --> 00:40:38,280
Bowl and to deal with all the traffic

00:40:36,480 --> 00:40:39,960
that they received he was load balancing

00:40:38,280 --> 00:40:42,030
he had many servers and he was deciding

00:40:39,960 --> 00:40:44,100
which one to send based on which one was

00:40:42,030 --> 00:40:47,930
available and they want to know if

00:40:44,100 --> 00:40:50,690
caching would would help with that

00:40:47,930 --> 00:40:56,670
normally caching can help eliminate

00:40:50,690 --> 00:40:58,290
servers because it's not connecting it's

00:40:56,670 --> 00:41:01,170
not getting data it's doing less work

00:40:58,290 --> 00:41:05,840
each server would be doing less work you

00:41:01,170 --> 00:41:08,160
might need multiple caching servers and

00:41:05,840 --> 00:41:10,530
cluster the servers almost in the same

00:41:08,160 --> 00:41:14,010
way as you do for the server's

00:41:10,530 --> 00:41:15,750
themselves you you can throw hardware at

00:41:14,010 --> 00:41:18,360
something all day long and it would get

00:41:15,750 --> 00:41:20,040
better but you might have a larger

00:41:18,360 --> 00:41:23,700
effect if you use caching things like

00:41:20,040 --> 00:41:25,170
caching a lot of businesses they get a

00:41:23,700 --> 00:41:27,120
lot of traffic they might have one web

00:41:25,170 --> 00:41:30,540
server and it's because they just use

00:41:27,120 --> 00:41:31,530
caching effectively so with something

00:41:30,540 --> 00:41:33,990
like that you're gonna have to do a lot

00:41:31,530 --> 00:41:37,380
of experimentation but like opcode

00:41:33,990 --> 00:41:40,620
caching where you know the PHP is stored

00:41:37,380 --> 00:41:43,290
in a compiled state and memory up

00:41:40,620 --> 00:41:45,510
memcached you have that and all the

00:41:43,290 --> 00:41:47,880
posts are cached and you know maybe you

00:41:45,510 --> 00:41:49,410
clear the cache every five minutes and

00:41:47,880 --> 00:41:51,960
you're getting a million people on the

00:41:49,410 --> 00:41:53,700
site every day then you know a lot of

00:41:51,960 --> 00:41:56,940
sites are gonna a lot of loads are gonna

00:41:53,700 --> 00:41:59,160
get served from that cache yeah so I

00:41:56,940 --> 00:42:01,290
think that's a great use case for some

00:41:59,160 --> 00:42:05,160
caching and you'll probably save some

00:42:01,290 --> 00:42:06,200
money with hardware in the end yeah

00:42:05,160 --> 00:42:09,200
you're welcome

00:42:06,200 --> 00:42:09,200
yes

00:42:19,630 --> 00:42:23,840
when it comes to transients like I

00:42:21,920 --> 00:42:43,790
always hear mixed messages on non

00:42:23,840 --> 00:42:46,640
expired transients wipe them yeah so the

00:42:43,790 --> 00:42:51,050
question is should you remove require

00:42:46,640 --> 00:42:51,710
expired transients from the database non

00:42:51,050 --> 00:42:58,070
expired

00:42:51,710 --> 00:42:59,330
yes so non expired i i recommend no it's

00:42:58,070 --> 00:43:02,260
possible they're not expired in the

00:42:59,330 --> 00:43:04,730
plugin that uses it is deactivated

00:43:02,260 --> 00:43:06,770
ideally you would delete them all and

00:43:04,730 --> 00:43:08,560
then they would just get regenerate on

00:43:06,770 --> 00:43:10,730
the next time they're you they're needed

00:43:08,560 --> 00:43:13,070
but you can't always guarantee that the

00:43:10,730 --> 00:43:16,030
plug-in developer has done it correctly

00:43:13,070 --> 00:43:18,680
like they might be using a cron to

00:43:16,030 --> 00:43:20,410
populate those transients and if you

00:43:18,680 --> 00:43:23,030
delete the transient and then it doesn't

00:43:20,410 --> 00:43:24,770
if it doesn't get returned and it

00:43:23,030 --> 00:43:26,510
doesn't go get the data there would be a

00:43:24,770 --> 00:43:29,870
gap and you wouldn't have data at that

00:43:26,510 --> 00:43:31,400
point so I I think that the more

00:43:29,870 --> 00:43:32,630
reliable ones WordPress core you can

00:43:31,400 --> 00:43:34,370
delete the transients former purpose

00:43:32,630 --> 00:43:38,210
core they get repopulated the next admin

00:43:34,370 --> 00:43:41,780
request or the next page load carefully

00:43:38,210 --> 00:43:43,970
yes I would be more more likely to say

00:43:41,780 --> 00:43:46,070
only the expired ones because those even

00:43:43,970 --> 00:43:47,780
if you say get transient and it exists

00:43:46,070 --> 00:43:51,770
if it's expired you get false back you

00:43:47,780 --> 00:43:54,260
don't you don't get any data so that

00:43:51,770 --> 00:43:56,150
becomes beneficial when you have a lot

00:43:54,260 --> 00:43:58,220
of plugins that had transients that were

00:43:56,150 --> 00:44:01,940
deleted or removed and they don't get

00:43:58,220 --> 00:44:04,310
used anymore so you could say okay I I

00:44:01,940 --> 00:44:06,050
don't use the Yoast SEO plug-in anymore

00:44:04,310 --> 00:44:07,790
let me just delete all their transients

00:44:06,050 --> 00:44:09,650
you know something like that typically

00:44:07,790 --> 00:44:12,020
they're really small in it the the

00:44:09,650 --> 00:44:13,040
performance gain is really minimal but

00:44:12,020 --> 00:44:14,840
every once in a while you'll have

00:44:13,040 --> 00:44:17,030
somebody going out and saying give me

00:44:14,840 --> 00:44:19,940
the last thousand posts on this website

00:44:17,030 --> 00:44:21,500
and catch the entire request and you

00:44:19,940 --> 00:44:23,270
know we'll process that when we when we

00:44:21,500 --> 00:44:25,750
pull the transient that might be a

00:44:23,270 --> 00:44:25,750
little bit problematic

00:44:26,390 --> 00:44:32,309
you're welcome

00:44:27,779 --> 00:44:36,260
yes okay two more questions

00:44:32,309 --> 00:44:36,260
same way else I think we got them all

00:44:37,069 --> 00:44:44,630
thank you

00:44:38,620 --> 00:44:44,630

YouTube URL: https://www.youtube.com/watch?v=smo8eX6UFko


