Title: Ivan Yordanov: Getting more done in less time: Introducing WordPress Automation Using Ansibile
Publication date: 2019-09-05
Playlist: WordCamp Singapore 2019
Description: 
	When you are creating and managing WordPress sites for living, regardless if you are a freelancer or working for an agency, it’s always great to see your customer base increasing. This however, leads to the question – what happens when you start struggling with the time for managing all of your client’s sites? The answer is actually pretty simple – automation.
Automation has become an important part of all departments in the IT sphere. No matter if you are a developer, DevOps or system administrator, it is critical for your time management to be able to complete the tasks you work on as fast as possible with minimum manual work.
Nowadays there are quite a lot tools for WordPress provisioning, management and code versioning, but wouldn’t be cool if you can do all of these things with the help of a single powerful software? I definitely think it is, that’s why I’d like to share with the audience how this can be achieved.
The talk will cover the following topics:
1. What is Ansible – how is it working, basics and general information.
2. Why Ansible will make your life easier – use cases and examples of how WordPress developers can benefit from it
3. How to start automating your WP site management process
4. Practical examples and suggestions for automating tasks related to WordPress sites management

WPTV link: https://wordpress.tv/2019/08/26/ivan-yordanov-getting-more-done-in-less-time-introducing-wordpress-automation-using-ansibile/
Captions: 
	00:00:00,030 --> 00:00:07,379
so I hope that you have enjoyed lunch

00:00:04,710 --> 00:00:09,120
and now you're recharged to learn some

00:00:07,379 --> 00:00:12,090
new things about how can you optimize

00:00:09,120 --> 00:00:17,190
your WordPress day-to-day tasks by

00:00:12,090 --> 00:00:18,990
automating them few words about me my

00:00:17,190 --> 00:00:21,630
name is Yvonne and I'm working as I got

00:00:18,990 --> 00:00:24,330
to the moment I've been with the company

00:00:21,630 --> 00:00:26,939
for five years and I pretty much went

00:00:24,330 --> 00:00:29,189
through most of the technical

00:00:26,939 --> 00:00:33,750
departments there from technical support

00:00:29,189 --> 00:00:36,390
then doing some DevOps and QA tasks and

00:00:33,750 --> 00:00:39,180
right now I'm working as a enterprise

00:00:36,390 --> 00:00:42,989
solutions engineer where we are building

00:00:39,180 --> 00:00:46,140
designing and maintaining infrastructure

00:00:42,989 --> 00:00:48,180
for our biggest plans I'm sure that you

00:00:46,140 --> 00:00:54,000
have heard some of them for example

00:00:48,180 --> 00:00:59,370
Yoast SEO or WP forms or mostly sites so

00:00:54,000 --> 00:01:00,770
yeah and actually in this position I

00:00:59,370 --> 00:01:03,899
have learned how important it is to

00:01:00,770 --> 00:01:07,170
automate automate the tasks that we are

00:01:03,899 --> 00:01:09,420
completing daily in order to have better

00:01:07,170 --> 00:01:14,880
time management and save time for more

00:01:09,420 --> 00:01:16,680
significant significant tasks and there

00:01:14,880 --> 00:01:19,759
is a short summary what this talk is

00:01:16,680 --> 00:01:22,140
going to go and be about first of all

00:01:19,759 --> 00:01:25,350
say a few words about automation in

00:01:22,140 --> 00:01:29,520
general then I will introduce to ansible

00:01:25,350 --> 00:01:32,790
and tell you how WordPress can benefit

00:01:29,520 --> 00:01:35,490
from it and then I have three videos

00:01:32,790 --> 00:01:39,600
with practical examples how ansible is

00:01:35,490 --> 00:01:44,119
run how you can write your configs and

00:01:39,600 --> 00:01:50,100
so on so let's start with automation and

00:01:44,119 --> 00:01:51,540
by automation I mean the use to use

00:01:50,100 --> 00:01:53,970
software to create repeatable

00:01:51,540 --> 00:01:56,180
instructions that will reduce the human

00:01:53,970 --> 00:01:59,040
interactions with tied assistants and

00:01:56,180 --> 00:02:02,009
this is good because first of all we are

00:01:59,040 --> 00:02:04,979
saving a lot of time then we are

00:02:02,009 --> 00:02:08,069
decreasing the errors that we are making

00:02:04,979 --> 00:02:11,950
by manual executing comments again and

00:02:08,069 --> 00:02:14,950
again and from my experience I can say

00:02:11,950 --> 00:02:17,190
the automation is very very useful when

00:02:14,950 --> 00:02:19,030
it comes to server provisioning

00:02:17,190 --> 00:02:22,450
application deployment configuration

00:02:19,030 --> 00:02:27,430
management or if you even continuous

00:02:22,450 --> 00:02:30,670
delivery and now to the point what is

00:02:27,430 --> 00:02:33,730
sensible if I should explain it without

00:02:30,670 --> 00:02:35,260
going into technical terms I would say

00:02:33,730 --> 00:02:39,880
that possible is a software that allows

00:02:35,260 --> 00:02:42,250
us to create tasks and execute them to

00:02:39,880 --> 00:02:47,049
replace the things that we are doing

00:02:42,250 --> 00:02:49,330
manually every day it is really simple

00:02:47,049 --> 00:02:51,700
but at the same time very powerful

00:02:49,330 --> 00:02:53,769
software which is agentless and it's

00:02:51,700 --> 00:02:57,849
only using SSH to connect to the remote

00:02:53,769 --> 00:03:01,660
machines we are working on and of course

00:02:57,849 --> 00:03:05,049
you don't have to do you don't need any

00:03:01,660 --> 00:03:06,640
specific guest edge skills to have it is

00:03:05,049 --> 00:03:08,370
just the software using that type of

00:03:06,640 --> 00:03:11,950
connection to the remote assistance and

00:03:08,370 --> 00:03:15,190
you don't need to create bash scripts or

00:03:11,950 --> 00:03:17,319
anything like that and more

00:03:15,190 --> 00:03:18,880
most of the definitions and the

00:03:17,319 --> 00:03:24,340
configuration files in ansible

00:03:18,880 --> 00:03:26,230
are written in jammu so it's really easy

00:03:24,340 --> 00:03:29,260
to read and understand even by

00:03:26,230 --> 00:03:31,420
inexperienced users so and that's what I

00:03:29,260 --> 00:03:36,100
like the most because it's practically

00:03:31,420 --> 00:03:42,280
human readable and these are the cases

00:03:36,100 --> 00:03:45,459
which I think are more often the most

00:03:42,280 --> 00:03:47,410
common cases when we use ansible as I

00:03:45,459 --> 00:03:49,209
mentioned provisioning education

00:03:47,410 --> 00:03:55,000
deployment configuration management and

00:03:49,209 --> 00:03:59,079
continuous delivery and now some theory

00:03:55,000 --> 00:04:00,910
about ansible and its parts around I I

00:03:59,079 --> 00:04:03,190
know that we don't like theory but we

00:04:00,910 --> 00:04:04,780
need to go through this in order to have

00:04:03,190 --> 00:04:09,190
the practical examples more

00:04:04,780 --> 00:04:11,500
understandable Kent so in order to avoid

00:04:09,190 --> 00:04:14,290
speaking with technical terms only I am

00:04:11,500 --> 00:04:17,229
trying to compare ansible with something

00:04:14,290 --> 00:04:21,250
from the real world and that is car

00:04:17,229 --> 00:04:23,700
assembly line so what we have whenever

00:04:21,250 --> 00:04:25,730
we are making a car is

00:04:23,700 --> 00:04:29,160
specific set of destructions that are

00:04:25,730 --> 00:04:31,760
executed every time we make each model

00:04:29,160 --> 00:04:34,410
right so it's the same with ansible

00:04:31,760 --> 00:04:38,550
danceable playbook which is the main

00:04:34,410 --> 00:04:41,550
part of the service is set of

00:04:38,550 --> 00:04:46,560
instructions that are executed in a

00:04:41,550 --> 00:04:50,760
certain way in certain order these

00:04:46,560 --> 00:04:53,160
instructions whenever when we are in the

00:04:50,760 --> 00:04:56,100
car factory we have a lot of machines

00:04:53,160 --> 00:04:58,980
right so each machine there is doing

00:04:56,100 --> 00:05:00,990
something and that's exactly modules are

00:04:58,980 --> 00:05:03,180
inaudible there are small problems that

00:05:00,990 --> 00:05:08,250
are designed to perform small simple

00:05:03,180 --> 00:05:10,010
tasks and they are based on parameters

00:05:08,250 --> 00:05:13,170
that we pass in our configuration files

00:05:10,010 --> 00:05:15,690
so there are a list of modules on

00:05:13,170 --> 00:05:18,510
danceable sites and there are literary

00:05:15,690 --> 00:05:20,610
concerts but if by chance there is

00:05:18,510 --> 00:05:24,260
service you're using and there is no

00:05:20,610 --> 00:05:24,260
module for that you can write your own

00:05:24,290 --> 00:05:31,880
and speaking of the machines in the car

00:05:27,810 --> 00:05:34,320
factory each of them has completely and

00:05:31,880 --> 00:05:36,150
specifically defined tasks for example

00:05:34,320 --> 00:05:38,700
there are machines that are forming the

00:05:36,150 --> 00:05:42,150
metal parts machines that are putting

00:05:38,700 --> 00:05:43,740
stuff under the hood right so we have

00:05:42,150 --> 00:05:48,150
the same thing in highschool we are

00:05:43,740 --> 00:05:51,000
defining tasks in llamó syntax and then

00:05:48,150 --> 00:05:55,160
these tests are executed with the help

00:05:51,000 --> 00:05:58,920
of the modules that I mentioned for that

00:05:55,160 --> 00:06:01,560
and no car manufacturers have different

00:05:58,920 --> 00:06:05,180
models they have cars with different

00:06:01,560 --> 00:06:08,400
colors and so on so in the IT world

00:06:05,180 --> 00:06:10,590
whenever we have 10 or 20 systems we

00:06:08,400 --> 00:06:12,900
might want to execute the same set of

00:06:10,590 --> 00:06:15,540
instructions on each of them but at the

00:06:12,900 --> 00:06:18,240
same time we want to give the difference

00:06:15,540 --> 00:06:20,100
between the systems we might have some

00:06:18,240 --> 00:06:22,530
different configuration files or

00:06:20,100 --> 00:06:23,840
something like that so that's how

00:06:22,530 --> 00:06:25,610
ansible candles the different

00:06:23,840 --> 00:06:31,630
between our assistants is with using

00:06:25,610 --> 00:06:34,880
variables and templates handles are

00:06:31,630 --> 00:06:38,960
practically small and very simple tasks

00:06:34,880 --> 00:06:41,930
that are triggered after the execution

00:06:38,960 --> 00:06:44,210
of another task so right here in the

00:06:41,930 --> 00:06:47,960
example we have defined handle which is

00:06:44,210 --> 00:06:51,290
restarting Apache service and in the

00:06:47,960 --> 00:06:53,120
next slide we have a task that is

00:06:51,290 --> 00:06:54,770
practically replacing the Apache

00:06:53,120 --> 00:06:55,669
configuration file with the template I'm

00:06:54,770 --> 00:06:58,580
passing to it

00:06:55,669 --> 00:07:01,430
so with that notified line here and then

00:06:58,580 --> 00:07:03,889
I'm specifying that I want to trigger

00:07:01,430 --> 00:07:06,889
the handler that I have specified in the

00:07:03,889 --> 00:07:10,370
previous slide so what this block of

00:07:06,889 --> 00:07:13,190
code will do is it will lay the template

00:07:10,370 --> 00:07:15,290
with the source I have provided and

00:07:13,190 --> 00:07:19,910
after that the batch service will be

00:07:15,290 --> 00:07:22,850
restarted to apply the changes and at

00:07:19,910 --> 00:07:26,479
the end we have roles which are pretty

00:07:22,850 --> 00:07:31,280
much combination of all the parts I said

00:07:26,479 --> 00:07:35,300
so far rows are pretty comfortable way

00:07:31,280 --> 00:07:39,440
to gather groups of tasks variables

00:07:35,300 --> 00:07:42,229
modules and which are related to one

00:07:39,440 --> 00:07:45,110
same server services for example if I

00:07:42,229 --> 00:07:47,479
want to install and configure Apache all

00:07:45,110 --> 00:07:50,060
the way from the beginning to the end I

00:07:47,479 --> 00:07:52,130
would have tasks for downloading the

00:07:50,060 --> 00:07:54,289
package is telling the package then I

00:07:52,130 --> 00:07:57,229
need to adjust the vehicles then

00:07:54,289 --> 00:08:01,160
configuration files and so on and of

00:07:57,229 --> 00:08:03,710
these tasks might be grouped in one

00:08:01,160 --> 00:08:05,389
single row which is code with just one

00:08:03,710 --> 00:08:10,630
line instead of calling each task

00:08:05,389 --> 00:08:14,479
separately in your PlayBook okay now

00:08:10,630 --> 00:08:19,220
enough about ansible only let's see why

00:08:14,479 --> 00:08:22,610
i think i suppo is great to use with

00:08:19,220 --> 00:08:24,639
wordpress and i know that there are a

00:08:22,610 --> 00:08:26,969
lot of one-click installers or

00:08:24,639 --> 00:08:30,149
applications that allow you to

00:08:26,969 --> 00:08:33,089
your wordpress dashboard of different

00:08:30,149 --> 00:08:36,060
sites but it's good to have everything

00:08:33,089 --> 00:08:38,279
that in one single plication or software

00:08:36,060 --> 00:08:40,409
which actually is is taught in your

00:08:38,279 --> 00:08:43,949
computer and you don't need to log in

00:08:40,409 --> 00:08:45,660
anywhere too many short sites right so I

00:08:43,949 --> 00:08:47,100
would say the taskbar would be very

00:08:45,660 --> 00:08:49,889
useful whenever we want to have

00:08:47,100 --> 00:08:51,660
WordPress deployed somewhere and I'm not

00:08:49,889 --> 00:08:55,379
talking only about the WordPress core

00:08:51,660 --> 00:08:58,920
I'm talking about critical bundle for

00:08:55,379 --> 00:09:00,839
example with your favorite plugins or

00:08:58,920 --> 00:09:02,519
themes which you want to have

00:09:00,839 --> 00:09:06,660
pre-installed every time you install the

00:09:02,519 --> 00:09:08,250
WordPress so as far as environment

00:09:06,660 --> 00:09:11,730
changes for example if you're running

00:09:08,250 --> 00:09:15,449
WordPress in subfolder what you usually

00:09:11,730 --> 00:09:17,490
do I think is that you are installing

00:09:15,449 --> 00:09:20,069
the wordpress with one-click installer

00:09:17,490 --> 00:09:21,779
or whatever and then you go on manual

00:09:20,069 --> 00:09:23,100
changes such as the WordPress and many

00:09:21,779 --> 00:09:24,779
will adjust the WordPress to work in

00:09:23,100 --> 00:09:27,350
some folder which actually can be

00:09:24,779 --> 00:09:30,559
automated and you can have everything

00:09:27,350 --> 00:09:33,000
defined in a suppo and executed

00:09:30,559 --> 00:09:38,100
automatically without without you having

00:09:33,000 --> 00:09:41,519
to enter another useful example would be

00:09:38,100 --> 00:09:43,980
managing plugins of a lot of sites I

00:09:41,519 --> 00:09:46,620
don't know how much of you here are

00:09:43,980 --> 00:09:51,660
managing most of five sites or ten sites

00:09:46,620 --> 00:09:55,740
which are on different servers but it is

00:09:51,660 --> 00:09:58,470
a good way to have for example install

00:09:55,740 --> 00:10:01,680
to install or update the plug-in on all

00:09:58,470 --> 00:10:04,559
of your applications no matter if they

00:10:01,680 --> 00:10:10,230
are located on the same or different

00:10:04,559 --> 00:10:12,870
servers no matter also ansible is a very

00:10:10,230 --> 00:10:15,420
good option if you want to automate your

00:10:12,870 --> 00:10:19,649
code deployments because it has given

00:10:15,420 --> 00:10:23,699
some version modules and of course I

00:10:19,649 --> 00:10:27,439
think that it's very useful whenever it

00:10:23,699 --> 00:10:31,439
comes to any task that you are executing

00:10:27,439 --> 00:10:34,019
via SSH I mean not only related to

00:10:31,439 --> 00:10:37,410
WordPress as a application itself but

00:10:34,019 --> 00:10:41,040
whenever you need to let's say change

00:10:37,410 --> 00:10:44,910
permissions of files or update your

00:10:41,040 --> 00:10:46,889
htaccess file or PHP dot ini' file it is

00:10:44,910 --> 00:10:52,160
basically you can automate everything

00:10:46,889 --> 00:10:52,160
that you are doing manually in a safe

00:10:52,610 --> 00:11:01,170
and we reach the practical examples

00:10:55,170 --> 00:11:05,699
first of all I would like to can use it

00:11:01,170 --> 00:11:09,269
well okay first of all I'd like to show

00:11:05,699 --> 00:11:11,519
my possible project folder which is I've

00:11:09,269 --> 00:11:13,500
created it it's very simple and I just

00:11:11,519 --> 00:11:16,860
created fruit cure for this conference

00:11:13,500 --> 00:11:19,470
to show you what I have in it first of

00:11:16,860 --> 00:11:21,269
all I have playbook folder where

00:11:19,470 --> 00:11:25,579
obviously I keep my play books that I

00:11:21,269 --> 00:11:25,579
will show you in the videos after that

00:11:26,300 --> 00:11:32,429
then I have roles that I have written

00:11:29,670 --> 00:11:38,600
and I will be execute which will be

00:11:32,429 --> 00:11:38,600
executed in my play books later and I

00:11:39,589 --> 00:11:47,389
have this host file here which is

00:11:43,610 --> 00:11:50,490
actually a very important part of

00:11:47,389 --> 00:11:52,019
ansible and its coat inventory the

00:11:50,490 --> 00:11:55,079
inventory file contains the information

00:11:52,019 --> 00:11:58,439
about your hosts and you can also

00:11:55,079 --> 00:12:00,540
specify some variables there I know that

00:11:58,439 --> 00:12:03,629
security is very important as well as

00:12:00,540 --> 00:12:04,589
you I'm sure but this is just an example

00:12:03,629 --> 00:12:09,000
don't mind

00:12:04,589 --> 00:12:10,610
for example if playing past plaintext

00:12:09,000 --> 00:12:13,170
puzzles here or something like that just

00:12:10,610 --> 00:12:15,809
ignore it I know you need to give

00:12:13,170 --> 00:12:21,640
yourself sizing don't don't do that

00:12:15,809 --> 00:12:27,700
comedy so right here

00:12:21,640 --> 00:12:30,519
oops these are group names one group can

00:12:27,700 --> 00:12:33,300
contain multiple hosts in my case I have

00:12:30,519 --> 00:12:37,899
one host in history in each group here

00:12:33,300 --> 00:12:41,890
then you have the host name which can be

00:12:37,899 --> 00:12:43,510
pretty much everything you want a simple

00:12:41,890 --> 00:12:46,660
port and a Spock hosts are very

00:12:43,510 --> 00:12:48,459
important variables because they are

00:12:46,660 --> 00:12:52,870
used by the software to connect via

00:12:48,459 --> 00:12:56,800
special server and then you can add

00:12:52,870 --> 00:13:00,940
pretty much whatever variables you want

00:12:56,800 --> 00:13:03,070
in order to suit your roles in your

00:13:00,940 --> 00:13:06,720
playbooks whatever you need in my case I

00:13:03,070 --> 00:13:09,250
have database username password

00:13:06,720 --> 00:13:12,850
WordPress directory where I will install

00:13:09,250 --> 00:13:17,910
WordPress and addendum cached host and

00:13:12,850 --> 00:13:17,910
encash port so

00:13:22,780 --> 00:13:32,540
the first things the first example is is

00:13:30,890 --> 00:13:35,420
related to it in a deployment

00:13:32,540 --> 00:13:39,380
application WordPress application then

00:13:35,420 --> 00:13:42,650
this is my playbook here which will do

00:13:39,380 --> 00:13:45,740
that for me as you can see I have

00:13:42,650 --> 00:13:48,470
defined to place install WordPress core

00:13:45,740 --> 00:13:54,200
and install initial initial plugins

00:13:48,470 --> 00:13:57,110
which is a typo but okay so in that

00:13:54,200 --> 00:13:59,600
first play I'm calling one row which is

00:13:57,110 --> 00:14:01,910
called install WordPress core and then

00:13:59,600 --> 00:14:04,730
I'm calling three more tasks separately

00:14:01,910 --> 00:14:06,140
which are create database in great

00:14:04,730 --> 00:14:09,200
database users they are pretty

00:14:06,140 --> 00:14:11,690
straightforward so I'm not gonna open in

00:14:09,200 --> 00:14:19,990
a review and at the end I have

00:14:11,690 --> 00:14:19,990
configured WordPress just a moment to

00:14:29,250 --> 00:14:38,230
the main dot what mm file is felt that

00:14:34,750 --> 00:14:42,040
is executed every time you are calling

00:14:38,230 --> 00:14:45,010
her oh I mean it's executed first by

00:14:42,040 --> 00:14:49,150
default and every time you are calling

00:14:45,010 --> 00:14:52,270
her role so in my mind without one now I

00:14:49,150 --> 00:14:54,820
have two tasks first of each we is

00:14:52,270 --> 00:14:57,100
ensure WordPress destination is present

00:14:54,820 --> 00:15:00,010
which is creating my directory where the

00:14:57,100 --> 00:15:04,240
WordPress will be hosted and the second

00:15:00,010 --> 00:15:09,160
one is actually double PCI comment where

00:15:04,240 --> 00:15:11,200
I'm using it to download the files the

00:15:09,160 --> 00:15:13,800
core files of the application

00:15:11,200 --> 00:15:17,260
the first task here you can see that is

00:15:13,800 --> 00:15:21,190
defined using the file module which in

00:15:17,260 --> 00:15:26,140
osipov is module which is create create

00:15:21,190 --> 00:15:27,880
files directories and in that case I am

00:15:26,140 --> 00:15:32,230
specifying that I want to create the

00:15:27,880 --> 00:15:34,750
WordPress directory variable here which

00:15:32,230 --> 00:15:37,420
should be instead director it might be

00:15:34,750 --> 00:15:41,490
state file or star state absent which

00:15:37,420 --> 00:15:46,360
will remove that and the second task is

00:15:41,490 --> 00:15:48,940
downloading the file which is I'm using

00:15:46,360 --> 00:15:52,060
the common module the common module is

00:15:48,940 --> 00:15:55,420
pretty flexible thing because it's like

00:15:52,060 --> 00:15:59,140
you're just executing some message

00:15:55,420 --> 00:16:02,110
common via bash or on the remote server

00:15:59,140 --> 00:16:05,440
so what i'm doing here is passing this

00:16:02,110 --> 00:16:11,230
best comment to all my remote host and

00:16:05,440 --> 00:16:13,589
running as ball and now let's get to the

00:16:11,230 --> 00:16:13,589
videos

00:16:21,360 --> 00:16:28,259
okay there you go stopping for a second

00:16:24,899 --> 00:16:31,319
just tell you that uncie Bo can be used

00:16:28,259 --> 00:16:34,230
in common line mode not only defining

00:16:31,319 --> 00:16:37,980
play books and writing llamo code in

00:16:34,230 --> 00:16:40,350
order to have it executed but in this in

00:16:37,980 --> 00:16:41,869
this example you can see that I'm using

00:16:40,350 --> 00:16:45,239
the ansible

00:16:41,869 --> 00:16:48,029
binary and passing some parameters which

00:16:45,239 --> 00:16:51,360
you actually execute the comment and

00:16:48,029 --> 00:16:55,860
specifying in the quads on all my hosts

00:16:51,360 --> 00:16:58,619
I have defined in my inventory and the

00:16:55,860 --> 00:17:01,049
purpose of what I'm showing you now is

00:16:58,619 --> 00:17:03,299
to show you that before running the

00:17:01,049 --> 00:17:06,149
playbook there is nothing on the

00:17:03,299 --> 00:17:10,380
server's you can see that I'm trying to

00:17:06,149 --> 00:17:13,799
access this folder and it is not

00:17:10,380 --> 00:17:15,630
existent at the moment then I'm going to

00:17:13,799 --> 00:17:20,429
show that there is no database is

00:17:15,630 --> 00:17:22,880
created also and on the servers and

00:17:20,429 --> 00:17:22,880
there you go

00:17:27,480 --> 00:17:34,720
and then I am executing the actual

00:17:31,930 --> 00:17:39,760
comment that will start our playbook

00:17:34,720 --> 00:17:42,190
execution which has some important

00:17:39,760 --> 00:17:44,770
parameters here the I parameter

00:17:42,190 --> 00:17:47,470
specified the inventory file that I'm

00:17:44,770 --> 00:17:50,800
using which contains the information of

00:17:47,470 --> 00:17:55,030
the remote host then I'm specifying here

00:17:50,800 --> 00:17:57,070
the name of the playbook and then I'm

00:17:55,030 --> 00:18:00,220
passing some extra variables that are

00:17:57,070 --> 00:18:04,000
needed in order to help my rolls

00:18:00,220 --> 00:18:06,910
executed correctly the first task by

00:18:04,000 --> 00:18:09,190
default is distinct code gathering facts

00:18:06,910 --> 00:18:11,680
which is practically going to your

00:18:09,190 --> 00:18:13,990
unsupported rectory checking the files

00:18:11,680 --> 00:18:18,910
and getting information about the

00:18:13,990 --> 00:18:21,510
variables and then we start with tasks

00:18:18,910 --> 00:18:26,680
one by one executed on each faults

00:18:21,510 --> 00:18:30,250
simultaneously here I'm going to stop

00:18:26,680 --> 00:18:32,410
for a second just to show you that there

00:18:30,250 --> 00:18:34,960
is a slight difference between creating

00:18:32,410 --> 00:18:38,650
database and creating database users so

00:18:34,960 --> 00:18:41,740
first we have change status and then we

00:18:38,650 --> 00:18:43,990
have ok status what this means is that

00:18:41,740 --> 00:18:46,930
ansible is actually remembering states

00:18:43,990 --> 00:18:49,590
of the test and I have created two

00:18:46,930 --> 00:18:52,480
databases or before run into playbook so

00:18:49,590 --> 00:18:54,220
danceable did not took any action it

00:18:52,480 --> 00:18:57,040
just saw that the user is already

00:18:54,220 --> 00:19:00,360
created and it's reporting tasks as okay

00:18:57,040 --> 00:19:03,100
because there is nothing more to do them

00:19:00,360 --> 00:19:04,960
and then I have configuring can be

00:19:03,100 --> 00:19:09,820
stopped in WordPress which is actually

00:19:04,960 --> 00:19:11,320
WPC my comments configure install and

00:19:09,820 --> 00:19:14,320
then after that we are going to the

00:19:11,320 --> 00:19:19,210
second play which would install the

00:19:14,320 --> 00:19:23,340
plugin we have specified there which are

00:19:19,210 --> 00:19:23,340
for plugins socket picked randomly

00:19:24,760 --> 00:19:31,520
and at the end of each play we have that

00:19:28,549 --> 00:19:36,820
play recap which is actually a summary

00:19:31,520 --> 00:19:39,890
of what we have done so far

00:19:36,820 --> 00:19:41,659
after that I'm again using the a Spock

00:19:39,890 --> 00:19:44,240
comment in order to show you that after

00:19:41,659 --> 00:19:47,900
the play there is actually some content

00:19:44,240 --> 00:19:49,909
on the servers and the first the first

00:19:47,900 --> 00:19:52,340
thing is show that there is WordPress

00:19:49,909 --> 00:19:54,880
for files inside the directory we have

00:19:52,340 --> 00:19:54,880
created

00:19:59,950 --> 00:20:05,929
then using the Mexico common line in

00:20:04,489 --> 00:20:08,570
order to show you that there are

00:20:05,929 --> 00:20:11,479
database created and the WordPress core

00:20:08,570 --> 00:20:14,049
tables are actually there on each host

00:20:11,479 --> 00:20:14,049
separately

00:20:16,990 --> 00:20:25,129
and in the end again running double pcie

00:20:22,840 --> 00:20:28,039
bombing list comment in order to show

00:20:25,129 --> 00:20:31,580
that we don't only have the core

00:20:28,039 --> 00:20:33,350
installation there but we now have four

00:20:31,580 --> 00:20:35,299
installations with the blue music has

00:20:33,350 --> 00:20:39,039
specified priced out there without

00:20:35,299 --> 00:20:39,039
having to do that manually

00:20:44,960 --> 00:20:50,550
so this for the first example is a hole

00:20:47,880 --> 00:20:52,770
of course it's it's very simple but you

00:20:50,550 --> 00:20:55,440
cannot so much more there if you want

00:20:52,770 --> 00:20:58,620
and if you have any customizations that

00:20:55,440 --> 00:21:00,720
you have you need to do on your side the

00:20:58,620 --> 00:21:04,230
second thing is managing plug-ins and

00:21:00,720 --> 00:21:08,340
teens and as I said whenever we are

00:21:04,230 --> 00:21:11,250
managing 20 sites and I'm not sure but I

00:21:08,340 --> 00:21:13,800
personally don't know which installation

00:21:11,250 --> 00:21:16,470
will has any specific plug-in so

00:21:13,800 --> 00:21:19,230
whenever you see that plug-in is

00:21:16,470 --> 00:21:21,990
outdated and you might want to check if

00:21:19,230 --> 00:21:26,490
it's need to be updated on your sites

00:21:21,990 --> 00:21:28,560
I suppose very good thing to automate

00:21:26,490 --> 00:21:30,720
that because it can go through all of

00:21:28,560 --> 00:21:36,450
your applications and update the plug-in

00:21:30,720 --> 00:21:37,110
where it is present let me check the

00:21:36,450 --> 00:21:43,190
next video

00:21:37,110 --> 00:21:46,560
they're gone so again I'm using ansible

00:21:43,190 --> 00:21:51,510
binary in order to delete the plug-in

00:21:46,560 --> 00:21:54,120
code booking only onto my project so I

00:21:51,510 --> 00:21:56,480
will have this plug-in installed on to

00:21:54,120 --> 00:21:59,730
WordPress and then I will have it

00:21:56,480 --> 00:22:03,840
deleted from the rest of the to rest of

00:21:59,730 --> 00:22:10,290
the host so waiting for the confirmation

00:22:03,840 --> 00:22:13,910
message here then quick check with is

00:22:10,290 --> 00:22:17,310
installed option in order to see and

00:22:13,910 --> 00:22:18,870
confirm that this plugin is not present

00:22:17,310 --> 00:22:24,000
on these WordPress's

00:22:18,870 --> 00:22:26,160
there you go and now running again the

00:22:24,000 --> 00:22:28,850
our support PlayBook comment which will

00:22:26,160 --> 00:22:32,760
start executing the next playbook I have

00:22:28,850 --> 00:22:35,870
which is called Hogan's dot one now

00:22:32,760 --> 00:22:40,140
again specifying the inventory file and

00:22:35,870 --> 00:22:43,130
putting some extra parts so that the row

00:22:40,140 --> 00:22:43,130
can be executed properly

00:22:44,770 --> 00:22:56,500
you get again there we have this

00:22:53,409 --> 00:22:58,990
message the book message which is doing

00:22:56,500 --> 00:23:01,330
nothing just displaying some information

00:22:58,990 --> 00:23:03,250
I wanted to show you because it is a

00:23:01,330 --> 00:23:05,260
good way to the book whenever your

00:23:03,250 --> 00:23:08,500
PlayBook is failing or getting an error

00:23:05,260 --> 00:23:12,419
or there is undefined variable that the

00:23:08,500 --> 00:23:15,940
book message is a good way to see what

00:23:12,419 --> 00:23:18,039
value here does the variable contains

00:23:15,940 --> 00:23:24,870
and is just used to display some

00:23:18,039 --> 00:23:27,850
information then I have checking plug-in

00:23:24,870 --> 00:23:33,490
function which gets something read there

00:23:27,850 --> 00:23:36,789
so it felt actually this is the another

00:23:33,490 --> 00:23:41,159
thing there we go we have failures on

00:23:36,789 --> 00:23:44,110
two of our holes and the thing is that

00:23:41,159 --> 00:23:47,500
whenever there is a playbook for example

00:23:44,110 --> 00:23:50,649
on for host and whenever task fails on

00:23:47,500 --> 00:23:53,770
one host it is excluded until the rest

00:23:50,649 --> 00:23:57,340
of the play so what this playbook does

00:23:53,770 --> 00:24:01,809
is to first to check out my hosts if the

00:23:57,340 --> 00:24:05,320
plug-in is installed and then if its

00:24:01,809 --> 00:24:07,390
installed to update it and since we

00:24:05,320 --> 00:24:12,309
don't have it on these two codes they're

00:24:07,390 --> 00:24:18,549
excluded now from the play and at the

00:24:12,309 --> 00:24:20,770
end we have we have heard the task for

00:24:18,549 --> 00:24:24,730
update only on the host that actually

00:24:20,770 --> 00:24:28,179
have the plug-in present and here it is

00:24:24,730 --> 00:24:32,740
the recap again this time we have two

00:24:28,179 --> 00:24:37,419
third hostess we understood it and then

00:24:32,740 --> 00:24:42,309
just quick check to see that the booking

00:24:37,419 --> 00:24:44,880
plugin is actually installed only on two

00:24:42,309 --> 00:24:44,880
of our hosts

00:24:54,299 --> 00:25:01,929
there oh we have two hosts we have the

00:24:58,419 --> 00:25:09,340
plug-in installed and then we have two

00:25:01,929 --> 00:25:12,129
which doesn't have it so moving it to

00:25:09,340 --> 00:25:16,330
the left example which is actually an

00:25:12,129 --> 00:25:21,899
example where you you are using get

00:25:16,330 --> 00:25:27,850
module and what it does is to download

00:25:21,899 --> 00:25:30,220
in fact it's copy a repo which contains

00:25:27,850 --> 00:25:37,590
the memcache drop in then deploy it on

00:25:30,220 --> 00:25:40,119
our four hosts and then checking if then

00:25:37,590 --> 00:25:46,299
replacing the host and the port inside

00:25:40,119 --> 00:25:49,899
the object object cache page p2 with the

00:25:46,299 --> 00:25:53,700
variables we want so again getting

00:25:49,899 --> 00:25:53,700
faster factory or fast

00:25:58,660 --> 00:26:07,540
here we are pulling the ripple then we

00:26:02,540 --> 00:26:07,540
are synchronizing the file to our hosts

00:26:10,290 --> 00:26:17,610
fixing some permissions no no ships and

00:26:13,290 --> 00:26:20,970
at the end I'm using replace module

00:26:17,610 --> 00:26:23,400
which you pass a string to and it's it

00:26:20,970 --> 00:26:30,380
is replacing replacing it with another

00:26:23,400 --> 00:26:30,380
string so pretty much the result here

00:26:31,370 --> 00:26:37,470
can be seen we now have the object cast

00:26:34,260 --> 00:26:39,750
of PHP file and we have changed the host

00:26:37,470 --> 00:26:43,260
in the port inside that file on all my

00:26:39,750 --> 00:26:50,760
four hosts without having to do anything

00:26:43,260 --> 00:26:53,130
manually and the last example I don't

00:26:50,760 --> 00:26:55,290
have any videos of it because it's very

00:26:53,130 --> 00:26:58,740
simple and I mean that whenever you need

00:26:55,290 --> 00:27:02,610
to change H Texas or PHP dot ini' or WP

00:26:58,740 --> 00:27:06,450
config file or a lot of applications as

00:27:02,610 --> 00:27:11,150
Bo is very good choice in order to do

00:27:06,450 --> 00:27:14,910
then automated and do not do it manually

00:27:11,150 --> 00:27:17,160
so in my opinion combining constable and

00:27:14,910 --> 00:27:21,570
WordPress would save you a lot of time

00:27:17,160 --> 00:27:23,610
and what's even better is that you don't

00:27:21,570 --> 00:27:25,530
don't need to have 50 applications in

00:27:23,610 --> 00:27:28,140
order to use ansible you can start

00:27:25,530 --> 00:27:30,060
really small with really simple tasks

00:27:28,140 --> 00:27:32,250
for example tasks only for changing

00:27:30,060 --> 00:27:35,010
permissions and start running on your

00:27:32,250 --> 00:27:38,130
projects and as your project projects

00:27:35,010 --> 00:27:42,330
grow your risible codebase will grow

00:27:38,130 --> 00:27:45,330
gradually with it that was all thanks

00:27:42,330 --> 00:27:45,890
very much for the attention and keep any

00:27:45,330 --> 00:27:49,019
questions

00:27:45,890 --> 00:27:49,019
[Applause]

00:27:58,090 --> 00:28:04,600
financially so just ask so you're using

00:28:01,880 --> 00:28:06,920
the WordPress command line tools for

00:28:04,600 --> 00:28:11,450
damages that are really inside WordPress

00:28:06,920 --> 00:28:13,190
right Emily so if I'm running my host

00:28:11,450 --> 00:28:19,250
and up in the doctor and everything

00:28:13,190 --> 00:28:26,030
authorized won't be the food we want to

00:28:19,250 --> 00:28:28,610
put the WordPress binary well ansible

00:28:26,030 --> 00:28:31,910
in my case is just using that binary in

00:28:28,610 --> 00:28:33,920
order to have the plugins and

00:28:31,910 --> 00:28:37,250
application installed so I presume that

00:28:33,920 --> 00:28:40,100
you have installed WP save I already but

00:28:37,250 --> 00:28:42,770
if you haven't you can do everything

00:28:40,100 --> 00:28:46,520
pretty much everything as you do it in

00:28:42,770 --> 00:28:51,950
SH common line so in order you can also

00:28:46,520 --> 00:28:54,260
use I'm not W get or any Linux comment

00:28:51,950 --> 00:28:56,450
in order to turn over the package unzip

00:28:54,260 --> 00:28:59,630
to extract the package and so on so it

00:28:56,450 --> 00:29:02,380
just more tasks defining and it's a

00:28:59,630 --> 00:29:02,380
little bit more work

00:29:07,840 --> 00:29:11,920
I am David how does this work with the

00:29:10,420 --> 00:29:15,370
team environment because it looks like

00:29:11,920 --> 00:29:18,010
it has the playbook and everything

00:29:15,370 --> 00:29:21,460
please on your own copy the right so how

00:29:18,010 --> 00:29:23,100
it work didn't understand the question

00:29:21,460 --> 00:29:30,640
can you repeat

00:29:23,100 --> 00:29:33,550
ok so it looks like you're a store in

00:29:30,640 --> 00:29:36,390
your local machine but what if I want to

00:29:33,550 --> 00:29:36,390
share this

00:29:38,760 --> 00:29:45,640
well personally in my team we have all

00:29:43,480 --> 00:29:48,400
of our ansible configuration in Aggie

00:29:45,640 --> 00:29:51,220
triple so whenever someone wants to use

00:29:48,400 --> 00:29:53,320
it just loaning the ripple and reuses

00:29:51,220 --> 00:29:56,170
the tasks and the roles and everything

00:29:53,320 --> 00:29:59,620
so it's pretty much comfortable to have

00:29:56,170 --> 00:30:01,570
it in a git repo or on a machine on a

00:29:59,620 --> 00:30:04,170
control machine when everybody can log

00:30:01,570 --> 00:30:04,170
in and use it

00:30:17,120 --> 00:30:22,710
what so my question is how would you

00:30:20,640 --> 00:30:25,410
secure your credentials for the machines

00:30:22,710 --> 00:30:28,140
view that you are great yeah I mentioned

00:30:25,410 --> 00:30:30,030
that this example was not secure at all

00:30:28,140 --> 00:30:33,150
but it was created only for the purpose

00:30:30,030 --> 00:30:35,160
of these concerns but for example as

00:30:33,150 --> 00:30:39,120
people has different modules where you

00:30:35,160 --> 00:30:42,260
can randomly generate password record it

00:30:39,120 --> 00:30:45,480
in a variable and then use this variable

00:30:42,260 --> 00:30:49,100
without and without having the password

00:30:45,480 --> 00:30:49,100
actually displayed anywhere

00:30:51,870 --> 00:30:55,710
I think that's all you have thanks for

00:30:55,049 --> 00:30:57,530
sharing

00:30:55,710 --> 00:31:01,440
thank you very much

00:30:57,530 --> 00:31:01,440

YouTube URL: https://www.youtube.com/watch?v=9qRXkgZdFUs


