Title: Leonardo Losoviz: COPE with WordPress
Publication date: 2019-09-05
Playlist: WordCamp Singapore 2019
Description: 
	COPE (Create Once, Publish Everywhere) is a technique which allows to publish content across different platforms from a single source of truth, enabling to feed content to dissimilar platforms such as web, emails, or an iOS or Android app, while minimizing the amount of duplicated information and reducing maintenance to the minimum possible.
Through Gutenberg, WordPress splits the post content into blocks which can be handled independently, thus enabling the implementation of the COPE strategy. This makes WordPress an ideal platform for hosting the content that will be distributed to different platforms. In this talk we will take a look into a WordPress-based architecture to implement COPE, and how it works.

WPTV link: https://wordpress.tv/2019/08/26/leonardo-losoviz-cope-with-wordpress/
Captions: 
	00:00:00,000 --> 00:00:06,120
okay hello everyone all right thanks for

00:00:03,389 --> 00:00:08,910
waiting so my name is Bernardo no

00:00:06,120 --> 00:00:11,670
service I came to give a presentation

00:00:08,910 --> 00:00:13,650
called cope with WordPress I'm going to

00:00:11,670 --> 00:00:16,529
explain what that means in a second

00:00:13,650 --> 00:00:19,830
my twitter is law so is like my username

00:00:16,529 --> 00:00:22,680
my personal blog is yellow so welcome

00:00:19,830 --> 00:00:26,670
and this presentation is available in

00:00:22,680 --> 00:00:32,160
slicer home / Leo so slash code with

00:00:26,670 --> 00:00:33,540
WordPress Co - with the - therapy I

00:00:32,160 --> 00:00:35,520
would encourage you to actually load

00:00:33,540 --> 00:00:38,340
this URL because there are some links

00:00:35,520 --> 00:00:40,649
that are knowing to show here that you

00:00:38,340 --> 00:00:42,899
might want to see later on so we turned

00:00:40,649 --> 00:00:44,820
so cold what does this mean

00:00:42,899 --> 00:00:47,280
it actually means create once publish

00:00:44,820 --> 00:00:49,829
everywhere so it's a kind of click bait

00:00:47,280 --> 00:00:51,960
T title I'm sorry about this I didn't

00:00:49,829 --> 00:00:55,170
invent this term but that's what

00:00:51,960 --> 00:00:58,350
actually means okay so yeah the how they

00:00:55,170 --> 00:01:00,030
promoted so what is cold it is a

00:00:58,350 --> 00:01:02,010
strategy for reducing the amount of work

00:01:00,030 --> 00:01:04,589
needed to publish your content into

00:01:02,010 --> 00:01:07,909
different platforms or mediums like

00:01:04,589 --> 00:01:10,470
which ones like websites email us

00:01:07,909 --> 00:01:12,570
virtual reality augmented reality app

00:01:10,470 --> 00:01:15,840
launch scoreboards and change screens

00:01:12,570 --> 00:01:19,290
podcast home assistance like Amazon

00:01:15,840 --> 00:01:21,750
Alexa in current SME systems or others

00:01:19,290 --> 00:01:24,659
you name it so the idea is you have an

00:01:21,750 --> 00:01:26,670
application running where website maybe

00:01:24,659 --> 00:01:28,920
have any letter maybe you have an app

00:01:26,670 --> 00:01:30,900
and you don't want to work so much into

00:01:28,920 --> 00:01:33,240
adapting the content for the different

00:01:30,900 --> 00:01:35,729
platforms so the idea is how can we

00:01:33,240 --> 00:01:39,270
minimize this amount of work that we

00:01:35,729 --> 00:01:40,979
have to do so how does it work it

00:01:39,270 --> 00:01:43,560
astonishes a single source of truth for

00:01:40,979 --> 00:01:45,299
content which can be used for all the

00:01:43,560 --> 00:01:46,439
different mediums you have only one

00:01:45,299 --> 00:01:48,390
single source of truth that works

00:01:46,439 --> 00:01:52,770
everywhere we don't need to keep working

00:01:48,390 --> 00:01:55,790
on reformatting it for each platform so

00:01:52,770 --> 00:01:57,780
that's a problem which is that every

00:01:55,790 --> 00:02:00,420
single piece of content doesn't normally

00:01:57,780 --> 00:02:03,180
work everywhere so for instance you were

00:02:00,420 --> 00:02:03,810
with HTML for the web but you cannot use

00:02:03,180 --> 00:02:07,439
HTM

00:02:03,810 --> 00:02:09,750
to make an app classes using HTML class

00:02:07,439 --> 00:02:11,220
align Center but if you send an email on

00:02:09,750 --> 00:02:15,900
it later you need to transform that into

00:02:11,220 --> 00:02:18,450
styles and then a style like Tech Center

00:02:15,900 --> 00:02:20,790
doesn't make sense for an audio-based

00:02:18,450 --> 00:02:23,190
medium ok what does it mean for Amazon

00:02:20,790 --> 00:02:26,400
Alexa to play some content on the middle

00:02:23,190 --> 00:02:29,519
ok so not everything works everywhere I

00:02:26,400 --> 00:02:30,900
need to pay attention to these things so

00:02:29,519 --> 00:02:33,630
how does it work

00:02:30,900 --> 00:02:36,750
actually how can we do this the key is

00:02:33,630 --> 00:02:38,069
to separate form from content so the

00:02:36,750 --> 00:02:39,930
presentation and the meaning of the

00:02:38,069 --> 00:02:41,910
content maybe the couple only the

00:02:39,930 --> 00:02:44,430
meaning is used at a single source of

00:02:41,910 --> 00:02:46,110
truth and the presentation can be added

00:02:44,430 --> 00:02:48,690
in another layer specific to that

00:02:46,110 --> 00:02:50,970
particular medium so let's see an

00:02:48,690 --> 00:02:53,099
example we have this HTML code okay

00:02:50,970 --> 00:02:55,319
pretty simple it's a paragraph with its

00:02:53,099 --> 00:02:58,049
appeal it's aligning the text to the

00:02:55,319 --> 00:03:00,840
center and the content is hello world

00:02:58,049 --> 00:03:02,790
so this is where HTML and it's what it

00:03:00,840 --> 00:03:04,530
is if we want to reuse it we need to

00:03:02,790 --> 00:03:09,600
convert this into something more

00:03:04,530 --> 00:03:12,630
agnostic that we can use independent

00:03:09,600 --> 00:03:14,609
units of data for other platforms so

00:03:12,630 --> 00:03:17,370
they can simply be transformed into this

00:03:14,609 --> 00:03:20,250
a simple object an array or a JSON

00:03:17,370 --> 00:03:22,140
object the type is a paragraph content

00:03:20,250 --> 00:03:24,060
is hello one and the placement in this

00:03:22,140 --> 00:03:25,980
case is Center if I can use the

00:03:24,060 --> 00:03:28,530
placement property because it's a screen

00:03:25,980 --> 00:03:31,109
I use it if it is all your bed device I

00:03:28,530 --> 00:03:35,340
ignore it but now I can because the data

00:03:31,109 --> 00:03:37,190
is available as as a property so this is

00:03:35,340 --> 00:03:40,350
what we want to chip if we can somehow

00:03:37,190 --> 00:03:43,049
transform our content from the HTML

00:03:40,350 --> 00:03:45,600
content that we used to input into our

00:03:43,049 --> 00:03:47,400
Gandhi management system WordPress into

00:03:45,600 --> 00:03:48,830
something more resembling the structure

00:03:47,400 --> 00:03:51,380
we made it then we

00:03:48,830 --> 00:03:54,470
you this content for apps and anything

00:03:51,380 --> 00:03:55,970
is I you that you can think of so why

00:03:54,470 --> 00:03:59,020
WordPress while we talking on WordPress

00:03:55,970 --> 00:04:02,480
is it because in we are it were come and

00:03:59,020 --> 00:04:05,300
talk about WordPress yes but not just

00:04:02,480 --> 00:04:07,370
that actually WordPress is quite idea to

00:04:05,300 --> 00:04:09,890
implement dick strategy they create once

00:04:07,370 --> 00:04:11,840
publish everywhere in strategy because

00:04:09,890 --> 00:04:14,030
it is versatile first thing is that

00:04:11,840 --> 00:04:17,359
WordPress allows you to create many

00:04:14,030 --> 00:04:19,609
different content models innovated to a

00:04:17,359 --> 00:04:21,680
specific one but through the use of meta

00:04:19,609 --> 00:04:24,110
fields you can add the properties unit

00:04:21,680 --> 00:04:26,900
so by default WordPress has this

00:04:24,110 --> 00:04:29,510
structure in mind it is pretty powerful

00:04:26,900 --> 00:04:30,470
because you can add new features through

00:04:29,510 --> 00:04:32,720
planes very easily

00:04:30,470 --> 00:04:34,160
it is widespread everyone knows about

00:04:32,720 --> 00:04:36,530
WordPress everyone knows how to use

00:04:34,160 --> 00:04:40,010
WordPress not just technical people but

00:04:36,530 --> 00:04:42,650
also marketers bloggers everyone it is

00:04:40,010 --> 00:04:45,320
headless so headless is that you can

00:04:42,650 --> 00:04:47,150
access the content through api's and we

00:04:45,320 --> 00:04:50,450
will actually need to access our content

00:04:47,150 --> 00:04:52,220
through api's and finally and this is

00:04:50,450 --> 00:04:54,610
the most important one it has a

00:04:52,220 --> 00:04:57,230
broad-based editor called Gutenberg

00:04:54,610 --> 00:04:59,480
blogs can able to easily export the more

00:04:57,230 --> 00:05:01,520
they post content metadata so I'm giving

00:04:59,480 --> 00:05:03,560
this talk today I'm not one year ago

00:05:01,520 --> 00:05:05,240
because of Ruttenberg the release of

00:05:03,560 --> 00:05:07,550
Gutenberg is allowing us to implement a

00:05:05,240 --> 00:05:09,590
strategy okay so this is what we're

00:05:07,550 --> 00:05:11,600
particularly interested about and this

00:05:09,590 --> 00:05:15,110
is what we're going to actually see in

00:05:11,600 --> 00:05:19,550
this top so let's talk about blogs

00:05:15,110 --> 00:05:21,590
versus blows a blow is a single unit of

00:05:19,550 --> 00:05:23,840
information store all together in the

00:05:21,590 --> 00:05:27,350
database so if we had this piece of HTML

00:05:23,840 --> 00:05:29,240
code well we can actually see the

00:05:27,350 --> 00:05:30,860
important bits of information like the

00:05:29,240 --> 00:05:33,200
content of the paragraph where I said

00:05:30,860 --> 00:05:34,850
you got the whole food tango and the

00:05:33,200 --> 00:05:38,150
urine dimensions and the attributes of a

00:05:34,850 --> 00:05:40,150
YouTube video that you read we can

00:05:38,150 --> 00:05:41,919
access it directly it's not

00:05:40,150 --> 00:05:43,690
later so you actually want to extract

00:05:41,919 --> 00:05:46,000
this information I need to parse this

00:05:43,690 --> 00:05:48,910
HTML code which is expensive it is

00:05:46,000 --> 00:05:51,520
doable but it is expensive so they know

00:05:48,910 --> 00:05:55,300
no performant no optimal solution to do

00:05:51,520 --> 00:05:57,970
this so back in the day until world by

00:05:55,300 --> 00:05:59,410
5.0 we were working with blobs when

00:05:57,970 --> 00:06:02,050
you're actually typing content in the

00:05:59,410 --> 00:06:04,389
tiny MCE in the content editor that is a

00:06:02,050 --> 00:06:08,350
blow okay so basically what you had in

00:06:04,389 --> 00:06:11,919
WordPress until until Gutenberg was not

00:06:08,350 --> 00:06:14,080
easily accessible so now Lester called

00:06:11,919 --> 00:06:16,180
blows how do they change the situation a

00:06:14,080 --> 00:06:19,150
block embrace its own content and

00:06:16,180 --> 00:06:21,370
properties as metadata customized to

00:06:19,150 --> 00:06:25,720
each type a paragraph block a video blog

00:06:21,370 --> 00:06:27,550
an audio blog image blog and this is how

00:06:25,720 --> 00:06:31,030
it looks like so in in the previous

00:06:27,550 --> 00:06:33,039
screen we have a paragraph and we have

00:06:31,030 --> 00:06:35,740
an email of a video if I represent this

00:06:33,039 --> 00:06:38,169
as a block as the data is basically an

00:06:35,740 --> 00:06:42,990
object image is a JSON object or an

00:06:38,169 --> 00:06:45,370
array with two entities the first was a

00:06:42,990 --> 00:06:47,740
typographic content the second one says

00:06:45,370 --> 00:06:51,610
type email provider delivering the URL

00:06:47,740 --> 00:06:55,510
so each piece of data depending on his

00:06:51,610 --> 00:06:57,400
type can have its own properties we can

00:06:55,510 --> 00:06:59,110
easily use any bit of data on its own

00:06:57,400 --> 00:07:00,310
and adapt it for the specific medium

00:06:59,110 --> 00:07:02,860
where it might be displayed

00:07:00,310 --> 00:07:05,770
so if we're talking about watching a

00:07:02,860 --> 00:07:07,930
video on my Apple watch I don't into

00:07:05,770 --> 00:07:10,300
potential to the width and height okay I

00:07:07,930 --> 00:07:11,820
can ignore it I just show the URL and

00:07:10,300 --> 00:07:15,370
that's all I care about

00:07:11,820 --> 00:07:17,380
so through Gutenberg we're looking on

00:07:15,370 --> 00:07:18,789
blocks so in this case you have the

00:07:17,380 --> 00:07:20,910
title hello but it's angle and then you

00:07:18,789 --> 00:07:22,780
have a paragraph and then you have a

00:07:20,910 --> 00:07:25,990
embed of a video

00:07:22,780 --> 00:07:28,270
those two are blocks and so it's data it

00:07:25,990 --> 00:07:33,940
can be excessive independently of

00:07:28,270 --> 00:07:36,729
everything else however Gutenberg blogs

00:07:33,940 --> 00:07:37,699
they were not designed to work with coke

00:07:36,729 --> 00:07:39,770
in mind

00:07:37,699 --> 00:07:42,340
whenever they design it nobody will

00:07:39,770 --> 00:07:44,569
think you know the particular use case

00:07:42,340 --> 00:07:46,300
it's representational information in

00:07:44,569 --> 00:07:48,830
different to the ones as described and

00:07:46,300 --> 00:07:52,759
this is how Gutenberg stores the

00:07:48,830 --> 00:07:54,770
information okay we will actually make a

00:07:52,759 --> 00:07:57,650
few observations based on this piece of

00:07:54,770 --> 00:07:59,389
code so the first one is the blocks are

00:07:57,650 --> 00:08:02,419
saved all together in the same database

00:07:59,389 --> 00:08:05,150
entry so if you actually go to table WP

00:08:02,419 --> 00:08:07,009
underscore post you will see an entry

00:08:05,150 --> 00:08:09,500
for the post containing all this data

00:08:07,009 --> 00:08:11,060
which are the blocks indication what the

00:08:09,500 --> 00:08:15,020
content for the blocks are altogether

00:08:11,060 --> 00:08:17,990
which is kind of a pity if you think of

00:08:15,020 --> 00:08:20,180
it because if it's if each block it's on

00:08:17,990 --> 00:08:21,860
its own row you can go straight fetch it

00:08:20,180 --> 00:08:23,030
from the database on its own row so

00:08:21,860 --> 00:08:24,919
you're not bringing the overhead of

00:08:23,030 --> 00:08:28,310
everything else okay

00:08:24,919 --> 00:08:31,520
ideally this is a situation for all

00:08:28,310 --> 00:08:33,709
blocks except the global or reusable

00:08:31,520 --> 00:08:37,130
blocks which they do have their own

00:08:33,709 --> 00:08:37,490
engendered interests however this is a

00:08:37,130 --> 00:08:39,469
good thing

00:08:37,490 --> 00:08:41,779
WordPress provides a function called

00:08:39,469 --> 00:08:44,660
parts blocks that you give it a piece of

00:08:41,779 --> 00:08:46,970
content in HTML it parses this content

00:08:44,660 --> 00:08:49,430
and it gives you an array of all the

00:08:46,970 --> 00:08:51,290
data in the blocks basically all the

00:08:49,430 --> 00:08:53,839
block pizza on their own entities and

00:08:51,290 --> 00:08:56,089
because of this function we don't work

00:08:53,839 --> 00:09:00,320
with this okay so no problem we can

00:08:56,089 --> 00:09:02,480
actually go to the next step next thing

00:09:00,320 --> 00:09:06,110
that we can see that the block that the

00:09:02,480 --> 00:09:08,750
block type and its attributes are stored

00:09:06,110 --> 00:09:10,699
through HTML comments so this is how a

00:09:08,750 --> 00:09:14,449
blog looks like you can see that at the

00:09:10,699 --> 00:09:15,860
top it says W key column paragraph then

00:09:14,449 --> 00:09:17,779
you you have a comment and then he

00:09:15,860 --> 00:09:20,120
closes the HTML comment that you have

00:09:17,779 --> 00:09:23,350
another HTML comment that you peek or

00:09:20,120 --> 00:09:23,350
embers logic you and

00:09:24,520 --> 00:09:29,560
Jason called encode a JSON object

00:09:26,830 --> 00:09:32,050
encoded into the stream with all the

00:09:29,560 --> 00:09:33,940
property for the globe so these are HTML

00:09:32,050 --> 00:09:35,950
comments and it was a wonderful design

00:09:33,940 --> 00:09:37,810
decision mmm when you're working with

00:09:35,950 --> 00:09:41,020
the way people know you can store the

00:09:37,810 --> 00:09:43,149
HTML content on the on the entry print

00:09:41,020 --> 00:09:46,570
it on the page and invisible when you're

00:09:43,149 --> 00:09:48,790
actually browsing the web site on yeah

00:09:46,570 --> 00:09:50,740
for the word however this could be a

00:09:48,790 --> 00:09:53,709
problem if you're not thinking about the

00:09:50,740 --> 00:09:55,810
world because an HTML comment may still

00:09:53,709 --> 00:09:58,120
be visible for our other minion mediums

00:09:55,810 --> 00:10:00,760
okay so you need to be aware of this

00:09:58,120 --> 00:10:02,290
however it's not a big deal because if

00:10:00,760 --> 00:10:04,510
you are look at your using the function

00:10:02,290 --> 00:10:06,339
called parts blocks you're getting the

00:10:04,510 --> 00:10:08,110
data from the blocks you need to worry

00:10:06,339 --> 00:10:09,490
about HTML code anymore

00:10:08,110 --> 00:10:11,860
in that sense okay any for the

00:10:09,490 --> 00:10:13,720
structuring of the blocks so then we

00:10:11,860 --> 00:10:17,230
don't work with this with basically

00:10:13,720 --> 00:10:19,570
right next thing that we can observe and

00:10:17,230 --> 00:10:22,300
this one is is more tricky one

00:10:19,570 --> 00:10:23,830
blocks contain HTML so if you pay

00:10:22,300 --> 00:10:28,140
attention to the first block which is a

00:10:23,830 --> 00:10:30,490
paragraph block the content is the pizza

00:10:28,140 --> 00:10:33,339
look at the wonderful tango and

00:10:30,490 --> 00:10:35,770
enclosing the pizza instead of just look

00:10:33,339 --> 00:10:39,010
at the wonderful Django so depleted is

00:10:35,770 --> 00:10:40,060
web is HTML so it works for the web but

00:10:39,010 --> 00:10:42,100
I don't know if you work for other

00:10:40,060 --> 00:10:43,480
platforms right I mean it may or you may

00:10:42,100 --> 00:10:46,959
not work I cannot make that assumption

00:10:43,480 --> 00:10:49,209
and this is a problem because HTML call

00:10:46,959 --> 00:10:50,589
is not useful for other mediums so then

00:10:49,209 --> 00:10:55,029
the solution to this is that we need to

00:10:50,589 --> 00:10:57,700
strip those tags okay and we can keep

00:10:55,029 --> 00:11:01,600
only the semantic tags like for instance

00:10:57,700 --> 00:11:05,620
if you use strong which is to make a

00:11:01,600 --> 00:11:08,350
text bold instead of using B you can

00:11:05,620 --> 00:11:11,079
actually do it or using a.m. instead of

00:11:08,350 --> 00:11:13,120
using the I for italics because these

00:11:11,079 --> 00:11:14,829
are semantic representations and being

00:11:13,120 --> 00:11:17,079
semantic they can be interpreted for

00:11:14,829 --> 00:11:19,899
different mediums so Amazon Alexa when

00:11:17,079 --> 00:11:23,380
is really in text if it finds the strong

00:11:19,899 --> 00:11:25,779
tab you can actually move a size that

00:11:23,380 --> 00:11:28,620
sentence ok so then it is okay to keep

00:11:25,779 --> 00:11:32,709
the the semantic that's it

00:11:28,620 --> 00:11:36,579
stupid so this is something we have to

00:11:32,709 --> 00:11:40,180
be careful with and finally the last one

00:11:36,579 --> 00:11:42,009
and the one is even trickier is that in

00:11:40,180 --> 00:11:45,339
this case the video caption is during

00:11:42,009 --> 00:11:47,319
HTML and not as an attribute so if you

00:11:45,339 --> 00:11:50,769
see at the second blog you can see there

00:11:47,319 --> 00:11:53,379
is a caption an exquisite tango

00:11:50,769 --> 00:11:56,439
performance and this caption is torn

00:11:53,379 --> 00:12:00,339
between the fake contacts but it did not

00:11:56,439 --> 00:12:03,459
store in the attributes of the blog and

00:12:00,339 --> 00:12:04,779
it is this is an issue people not to

00:12:03,459 --> 00:12:06,850
access the piece of information if I

00:12:04,779 --> 00:12:08,769
want to show the the video caption I

00:12:06,850 --> 00:12:11,110
need to extract it from the HTML I need

00:12:08,769 --> 00:12:14,110
to parse HTML content like the odd in

00:12:11,110 --> 00:12:16,149
the old days basically in this case they

00:12:14,110 --> 00:12:18,730
have brackets the regular expression to

00:12:16,149 --> 00:12:21,879
do it a very simple one okay doing that

00:12:18,730 --> 00:12:24,160
we obtain the caption but the problem is

00:12:21,879 --> 00:12:26,050
we need to release block by block we

00:12:24,160 --> 00:12:29,470
need to identify what properties are

00:12:26,050 --> 00:12:31,689
stored as HTML and say I need the

00:12:29,470 --> 00:12:33,490
property and it's extracted now you need

00:12:31,689 --> 00:12:35,139
to create a regular expression to do it

00:12:33,490 --> 00:12:38,559
they won't work very simple what other

00:12:35,139 --> 00:12:42,670
words are more difficult so this is

00:12:38,559 --> 00:12:43,829
something that works but it could have

00:12:42,670 --> 00:12:49,809
been better

00:12:43,829 --> 00:12:52,540
yeah so implementing code now what do we

00:12:49,809 --> 00:12:55,059
have to do to actually implement the

00:12:52,540 --> 00:12:56,769
algorithm to produce the metadata from

00:12:55,059 --> 00:12:58,269
the block the first time that we had to

00:12:56,769 --> 00:13:00,490
do it to simplify the structure of the

00:12:58,269 --> 00:13:04,209
JSON object returned by functional parts

00:13:00,490 --> 00:13:05,709
blocks the second step is to extract a

00:13:04,209 --> 00:13:07,959
piece of metadata from each block

00:13:05,709 --> 00:13:10,660
transforming them into a medium agnostic

00:13:07,959 --> 00:13:13,059
format and the first step is to make

00:13:10,660 --> 00:13:15,519
this data available through an API

00:13:13,059 --> 00:13:20,110
okay I'm going to show these three steps

00:13:15,519 --> 00:13:22,209
one by one by one so the first one we

00:13:20,110 --> 00:13:24,810
need to simplify the JSON object that we

00:13:22,209 --> 00:13:28,290
get back because on one side it has me

00:13:24,810 --> 00:13:30,450
in data if you have a reusable block it

00:13:28,290 --> 00:13:32,790
is not fetching the data from the list

00:13:30,450 --> 00:13:34,680
from that producer will block and then

00:13:32,790 --> 00:13:37,230
because it adds data and there multiple

00:13:34,680 --> 00:13:39,260
levels so it is not easy to browse which

00:13:37,230 --> 00:13:41,580
he for the nested and the group talks

00:13:39,260 --> 00:13:43,800
this is how it looks like I'm going to

00:13:41,580 --> 00:13:46,230
show you it's on you it so this is a

00:13:43,800 --> 00:13:48,960
simple block here you show the data like

00:13:46,230 --> 00:13:50,610
this then it has an empty block divider

00:13:48,960 --> 00:13:52,950
that is adding between two blocks all

00:13:50,610 --> 00:13:54,600
the time and here for ISA you have a

00:13:52,950 --> 00:13:57,990
reusable block it's simple as a

00:13:54,600 --> 00:13:59,580
reference to that destination block but

00:13:57,990 --> 00:14:00,510
it doesn't bring the data for that block

00:13:59,580 --> 00:14:03,930
so we don't have it yet

00:14:00,510 --> 00:14:06,210
and then for the nextel blocks it

00:14:03,930 --> 00:14:07,770
concatenates them under multiple levels

00:14:06,210 --> 00:14:09,360
so this is not something that we can

00:14:07,770 --> 00:14:12,300
directly work with so we first need to

00:14:09,360 --> 00:14:20,640
process this data and transform it into

00:14:12,300 --> 00:14:22,560
something more convenient so what we do

00:14:20,640 --> 00:14:25,110
is to basically iterate through all the

00:14:22,560 --> 00:14:26,970
data and add it on a first level

00:14:25,110 --> 00:14:29,250
indication of a global block we fetch

00:14:26,970 --> 00:14:31,140
the destination content and indications

00:14:29,250 --> 00:14:33,720
in excellent robots we move everything

00:14:31,140 --> 00:14:35,670
to the first level I have the function

00:14:33,720 --> 00:14:37,980
here I no need to actually show you in

00:14:35,670 --> 00:14:43,650
detail but is basically for functions a

00:14:37,980 --> 00:14:45,630
very simple and the result is that all

00:14:43,650 --> 00:14:47,730
the cont here you know in one single

00:14:45,630 --> 00:14:50,520
level so now this is something that we

00:14:47,730 --> 00:14:55,200
can actually work with and to

00:14:50,520 --> 00:14:57,930
demonstrate this we can create an an

00:14:55,200 --> 00:15:02,640
endpoint in the world Xpress API to

00:14:57,930 --> 00:15:06,740
access this data which looks like this

00:15:02,640 --> 00:15:06,740
so I have here

00:15:08,550 --> 00:15:18,270
oh that looks very tiny so I had this

00:15:15,440 --> 00:15:22,050
wordpress blog post okay we blend your

00:15:18,270 --> 00:15:25,020
blog's he has a video image some images

00:15:22,050 --> 00:15:26,670
which are missing a video audio okay

00:15:25,020 --> 00:15:31,000
pretty much a tiny bit of everything a

00:15:26,670 --> 00:15:32,210
tweet okay so how do I see this data

00:15:31,000 --> 00:15:37,310
[Music]

00:15:32,210 --> 00:15:37,310
here you are maybe you can't see

00:15:41,540 --> 00:15:47,339
okay so this is basically how WordPress

00:15:44,910 --> 00:15:49,260
gives you these data and then you put it

00:15:47,339 --> 00:15:50,970
in format nicer and you can see this is

00:15:49,260 --> 00:15:52,680
block by block by block now that I'm

00:15:50,970 --> 00:15:54,830
accessing this is the first block which

00:15:52,680 --> 00:15:57,630
is a paragraph then I have an image

00:15:54,830 --> 00:15:59,910
another paragraph and I have a YouTube

00:15:57,630 --> 00:16:02,010
video okay so you're basically

00:15:59,910 --> 00:16:04,170
transforming from the blog post into a

00:16:02,010 --> 00:16:05,820
JSON object for which you can actually

00:16:04,170 --> 00:16:20,459
manipulate and use things like that this

00:16:05,820 --> 00:16:25,920
is a first step though but I'm still

00:16:20,459 --> 00:16:27,480
here okay but the good things that you

00:16:25,920 --> 00:16:28,920
don't need to worry about is that all

00:16:27,480 --> 00:16:30,600
the code that I did not show you check

00:16:28,920 --> 00:16:32,580
now for lack of time it's available only

00:16:30,600 --> 00:16:34,980
github repo that I just created for the

00:16:32,580 --> 00:16:37,290
presentation so once again if you trick

00:16:34,980 --> 00:16:40,050
the slices come slash local slash cop

00:16:37,290 --> 00:16:43,860
with WP click on the link you can access

00:16:40,050 --> 00:16:46,050
all the code the second step now that we

00:16:43,860 --> 00:16:47,640
have this initial data from the blog we

00:16:46,050 --> 00:16:49,470
need to transform that into something

00:16:47,640 --> 00:16:52,770
that it medium agnostic that we can use

00:16:49,470 --> 00:16:54,810
for any device so we have data a big

00:16:52,770 --> 00:16:57,600
moment that contains HTML code on which

00:16:54,810 --> 00:16:59,040
as we have said that's not suitable for

00:16:57,600 --> 00:17:02,070
the credit once publish everywhere

00:16:59,040 --> 00:17:04,709
strategy so we must strip the non

00:17:02,070 --> 00:17:07,260
semantic HTML tags for each blog turning

00:17:04,709 --> 00:17:10,079
them into a medium agnostic format and

00:17:07,260 --> 00:17:11,850
then while doing so we can decide on a

00:17:10,079 --> 00:17:12,600
block by block basis depending on the

00:17:11,850 --> 00:17:15,240
type of the globe

00:17:12,600 --> 00:17:16,890
what property we want to capture if it

00:17:15,240 --> 00:17:20,040
is a paragraph just the content if it is

00:17:16,890 --> 00:17:24,679
a video the URL the the width and high

00:17:20,040 --> 00:17:27,420
if it is very much the same and etc and

00:17:24,679 --> 00:17:30,910
then finally also while doing this who

00:17:27,420 --> 00:17:33,430
identified the metadata that is not easy

00:17:30,910 --> 00:17:35,200
because it's not inside the blog

00:17:33,430 --> 00:17:36,790
attributes and we had to create a

00:17:35,200 --> 00:17:41,140
regular expression to extract it from

00:17:36,790 --> 00:17:42,820
the HTML code so something very

00:17:41,140 --> 00:17:45,610
important is that not all blood types

00:17:42,820 --> 00:17:48,790
are suitable for lis strategy some blog

00:17:45,610 --> 00:17:50,770
types are only working for the specific

00:17:48,790 --> 00:17:54,130
medium that we have here screen device

00:17:50,770 --> 00:17:56,740
may only for HTML so we can't transform

00:17:54,130 --> 00:18:00,940
them so for it as core columns color

00:17:56,740 --> 00:18:03,700
column and coral cover I don't know how

00:18:00,940 --> 00:18:05,740
to represent a cover for an audio device

00:18:03,700 --> 00:18:08,010
forensic works on the screen so maybe I

00:18:05,740 --> 00:18:10,330
will I will ignore it for the time being

00:18:08,010 --> 00:18:11,280
called HTML make sense for the world

00:18:10,330 --> 00:18:14,140
morning

00:18:11,280 --> 00:18:15,460
coral table coral batson and corn media

00:18:14,140 --> 00:18:18,880
text all of these are different block

00:18:15,460 --> 00:18:21,820
types or gutenberg they are not easy to

00:18:18,880 --> 00:18:23,920
represent minimalistic they might not

00:18:21,820 --> 00:18:26,740
make sense so I have ignore them for

00:18:23,920 --> 00:18:30,430
time being so that leaves me with all

00:18:26,740 --> 00:18:33,070
these other blocks that I have migrating

00:18:30,430 --> 00:18:35,440
these are all of the default blocks

00:18:33,070 --> 00:18:37,360
shipped with WordPress if you install

00:18:35,440 --> 00:18:40,810
plugins you will have with extra block

00:18:37,360 --> 00:18:42,580
so then you need to work upon but for

00:18:40,810 --> 00:18:44,050
this one I have already done it so I

00:18:42,580 --> 00:18:46,000
mean as a proof of concept that I'm

00:18:44,050 --> 00:18:50,670
going to show now it's all working and

00:18:46,000 --> 00:18:53,830
everything is nice and working very nice

00:18:50,670 --> 00:18:55,630
so to extract the metadata we get the

00:18:53,830 --> 00:18:57,760
content that I showed you channel that

00:18:55,630 --> 00:18:59,140
he was all the data and we transformed

00:18:57,760 --> 00:19:01,720
that we will create a function called

00:18:59,140 --> 00:19:03,760
code block can block metadata for this

00:19:01,720 --> 00:19:07,720
once again no need to show you the goal

00:19:03,760 --> 00:19:09,970
but it's not very long what we do here

00:19:07,720 --> 00:19:13,330
have to show this one function is that

00:19:09,970 --> 00:19:14,580
on a block by block basis in this case

00:19:13,330 --> 00:19:16,860
for the paragraph I

00:19:14,580 --> 00:19:19,169
drugged the content IDs integration the

00:19:16,860 --> 00:19:21,510
image I extract the continuities in the

00:19:19,169 --> 00:19:23,850
case of a YouTube embed I extract the

00:19:21,510 --> 00:19:30,110
code alike so I am on a block by block

00:19:23,850 --> 00:19:33,990
I say how to extract the data and

00:19:30,110 --> 00:19:36,179
finally we had to make this data

00:19:33,990 --> 00:19:37,950
available through an API otherwise what

00:19:36,179 --> 00:19:40,620
is the whole purpose you need to have an

00:19:37,950 --> 00:19:42,179
API because your app for instance we

00:19:40,620 --> 00:19:44,789
need to access the data through an API

00:19:42,179 --> 00:19:47,639
so this is the final step which is what

00:19:44,789 --> 00:19:49,740
important three ways in in WordPress so

00:19:47,639 --> 00:19:51,269
far that I know of at least one is rest

00:19:49,740 --> 00:19:54,269
through the WordPress REST API which is

00:19:51,269 --> 00:19:58,169
integrated in core graph QL a very nice

00:19:54,269 --> 00:20:00,299
API which is implemented through WPF ql

00:19:58,169 --> 00:20:03,000
it's a plugin that you can install and

00:20:00,299 --> 00:20:04,500
finally pop which is my own project I'm

00:20:03,000 --> 00:20:09,080
going to show it's animate our it now

00:20:04,500 --> 00:20:09,080
that it's also implemented for WordPress

00:20:09,500 --> 00:20:15,659
so let's see how to explore the rate of

00:20:11,940 --> 00:20:18,600
through each of them so first for a rest

00:20:15,659 --> 00:20:21,179
the REST API is very simple once again

00:20:18,600 --> 00:20:22,740
no need to show you the code but it's

00:20:21,179 --> 00:20:24,990
simply one from function that is

00:20:22,740 --> 00:20:27,299
accessing or newly defined function

00:20:24,990 --> 00:20:34,830
called block metadata and he retrieves

00:20:27,299 --> 00:20:38,610
that ok after creating this API endpoint

00:20:34,830 --> 00:20:40,110
we see the results ok so if you remember

00:20:38,610 --> 00:20:42,809
that I showed you just now that was a

00:20:40,110 --> 00:20:44,820
big blog post with a lot of content and

00:20:42,809 --> 00:20:48,240
this is how it looks like after have

00:20:44,820 --> 00:20:50,549
extracted administrator its blog in this

00:20:48,240 --> 00:20:52,649
case a paragraph which with only the

00:20:50,549 --> 00:20:54,870
content for the paragraph then we have

00:20:52,649 --> 00:20:57,929
an image and if only has a source for

00:20:54,870 --> 00:20:59,460
very much paragraph again YouTube video

00:20:57,929 --> 00:21:02,460
you have the URL and then he have the

00:20:59,460 --> 00:21:05,850
caption quote it has a quote and here

00:21:02,460 --> 00:21:07,300
the site has text and it has their HTML

00:21:05,850 --> 00:21:11,050
semantics

00:21:07,300 --> 00:21:13,210
that I can actually keep okay for the

00:21:11,050 --> 00:21:15,100
heading you can see something that I

00:21:13,210 --> 00:21:19,750
have done they're hitting it basically

00:21:15,100 --> 00:21:22,690
h1 h2 h3 h4 h5 h6 okay it's an HTML tag

00:21:19,750 --> 00:21:25,570
but can I use that in other devices

00:21:22,690 --> 00:21:27,520
other formats other platforms maybe yes

00:21:25,570 --> 00:21:30,160
maybe no so just have in a sec sighs I'd

00:21:27,520 --> 00:21:32,170
run format that into small medium large

00:21:30,160 --> 00:21:34,090
extra large extra extra large so now

00:21:32,170 --> 00:21:36,990
what we have here in something agnostic

00:21:34,090 --> 00:21:41,320
for the heading is extra large which is

00:21:36,990 --> 00:21:42,760
heading 2 then we have the gallery with

00:21:41,320 --> 00:21:44,770
all the images and the width on the

00:21:42,760 --> 00:21:48,460
height for each of the images the list

00:21:44,770 --> 00:21:50,410
has all the items so this is awesome

00:21:48,460 --> 00:21:52,840
I mean basically we call it through this

00:21:50,410 --> 00:21:54,580
because now this is data is available to

00:21:52,840 --> 00:21:56,650
any of your devices and you don't need

00:21:54,580 --> 00:21:58,090
to actually think cover it anymore you

00:21:56,650 --> 00:22:01,450
go to your blog post you've read the new

00:21:58,090 --> 00:22:03,490
entry and that huge piece of HTML is

00:22:01,450 --> 00:22:05,500
automatically turn formula into

00:22:03,490 --> 00:22:08,670
something that you can access for every

00:22:05,500 --> 00:22:08,670
platform this is magic

00:22:13,310 --> 00:22:17,370
once again no need to show you the code

00:22:15,930 --> 00:22:19,230
for this but all the functions are to

00:22:17,370 --> 00:22:22,610
show you they're available in another

00:22:19,230 --> 00:22:25,950
github repo so you can actually download

00:22:22,610 --> 00:22:28,770
next one is graph QL graph QL is it's

00:22:25,950 --> 00:22:31,440
any bit tricky and I have not been able

00:22:28,770 --> 00:22:34,650
to implement it because all of the

00:22:31,440 --> 00:22:36,410
different responses for each of the

00:22:34,650 --> 00:22:39,480
prototype is different to each other

00:22:36,410 --> 00:22:42,180
there are clearly very verbose so for

00:22:39,480 --> 00:22:44,160
each type for each different response

00:22:42,180 --> 00:22:47,640
structure you need to create a new type

00:22:44,160 --> 00:22:49,740
and if I had like 15 blocks and I had to

00:22:47,640 --> 00:22:51,180
create 15 types to represent the

00:22:49,740 --> 00:22:53,280
information the structure of the

00:22:51,180 --> 00:22:54,210
information in each block out like now

00:22:53,280 --> 00:22:56,610
forget it

00:22:54,210 --> 00:22:59,970
so I didn't do it what I did instead was

00:22:56,610 --> 00:23:02,730
simply to do a JSON encode of the data

00:22:59,970 --> 00:23:05,070
okay and I returned everything that I

00:23:02,730 --> 00:23:06,720
should I check now as a string once you

00:23:05,070 --> 00:23:08,280
get it in the client you have to do it

00:23:06,720 --> 00:23:10,260
JSON decode and you have the object

00:23:08,280 --> 00:23:14,820
again so you can access this through

00:23:10,260 --> 00:23:18,240
cracker is it quite awesome then finally

00:23:14,820 --> 00:23:20,430
we have pop pop he's a library that I

00:23:18,240 --> 00:23:22,980
have I'm working on this my own

00:23:20,430 --> 00:23:24,420
brainchild and he works at anything like

00:23:22,980 --> 00:23:27,710
cracker that you can actually define

00:23:24,420 --> 00:23:30,420
fields and you can fetch the field

00:23:27,710 --> 00:23:32,370
applied for an entity and it gives you

00:23:30,420 --> 00:23:35,220
the content for that field so I created

00:23:32,370 --> 00:23:39,000
one entity or one field called bot block

00:23:35,220 --> 00:23:40,890
metadata and I'm going to show you how

00:23:39,000 --> 00:23:45,600
it works so basically you have here the

00:23:40,890 --> 00:23:48,750
URL of our endpoint and you define

00:23:45,600 --> 00:23:51,480
through fields the the figure you

00:23:48,750 --> 00:23:54,900
actually want to fetch from the from

00:23:51,480 --> 00:23:56,550
that entity okay and it looks like this

00:23:54,900 --> 00:23:59,040
it basically seemed like graph QL and

00:23:56,550 --> 00:24:01,050
asking for properties in this case both

00:23:59,040 --> 00:24:02,980
block metadata it gives me all the

00:24:01,050 --> 00:24:07,000
metadata inside that

00:24:02,980 --> 00:24:08,920
blog post as I showed you general so

00:24:07,000 --> 00:24:11,620
this is a very convenient WordPress REST

00:24:08,920 --> 00:24:14,049
API you have to make an endpoint with an

00:24:11,620 --> 00:24:15,490
if which is the data that it wants so

00:24:14,049 --> 00:24:18,340
you're already limited and constrained

00:24:15,490 --> 00:24:20,110
to that piece of data this way similar

00:24:18,340 --> 00:24:22,890
to crack here you can say give me only

00:24:20,110 --> 00:24:26,160
it is nothing but this which is pretty

00:24:22,890 --> 00:24:26,160
pretty practical

00:24:30,389 --> 00:24:34,330
but something even better that I have

00:24:33,100 --> 00:24:37,960
been able to implement through this API

00:24:34,330 --> 00:24:41,860
is that you can also filter the blocks

00:24:37,960 --> 00:24:43,539
by the blood type so one of the

00:24:41,860 --> 00:24:45,549
implications of working with different

00:24:43,539 --> 00:24:48,100
devices is and not everything works on

00:24:45,549 --> 00:24:50,860
every medium once again content like

00:24:48,100 --> 00:24:54,909
text I can read on my Apple watch Apple

00:24:50,860 --> 00:24:56,889
watch images audio and video don't give

00:24:54,909 --> 00:24:59,860
me anything else so I only want to query

00:24:56,889 --> 00:25:01,299
you for the content in the blog post but

00:24:59,860 --> 00:25:03,309
not everything just give me the video

00:25:01,299 --> 00:25:06,690
nothing else for the video so Lisa Marie

00:25:03,309 --> 00:25:09,070
does it allows to add a blog name

00:25:06,690 --> 00:25:11,590
attribute where you define what type of

00:25:09,070 --> 00:25:17,409
blog you want if I actually click here

00:25:11,590 --> 00:25:20,950
once again now what I have is from a

00:25:17,409 --> 00:25:22,600
list of post only the videos if they

00:25:20,950 --> 00:25:23,710
don't have any video it doesn't give me

00:25:22,600 --> 00:25:26,100
anything even though it does have

00:25:23,710 --> 00:25:26,100
content

00:25:34,410 --> 00:25:41,760
and one final example here I'm wearing a

00:25:38,430 --> 00:25:43,770
single post and I'm saying give me all

00:25:41,760 --> 00:25:45,810
the images in this book ignore

00:25:43,770 --> 00:25:48,360
everything else give me the images once

00:25:45,810 --> 00:25:51,080
again I want to get the images only for

00:25:48,360 --> 00:25:53,640
my Apple watch okay so Lisa Corrigan and

00:25:51,080 --> 00:25:54,900
the beautiful thing about this is that

00:25:53,640 --> 00:25:57,090
when you're actually in putting the

00:25:54,900 --> 00:25:59,010
content through Gutenberg you're not

00:25:57,090 --> 00:26:01,170
thinking about this okay you're just

00:25:59,010 --> 00:26:04,310
adding your your blog post but you can

00:26:01,170 --> 00:26:04,310
use it for any other device

00:26:09,110 --> 00:26:13,530
so once again I'm not going to show the

00:26:11,490 --> 00:26:15,360
the cold here but I say give have ripple

00:26:13,530 --> 00:26:16,430
if you are interested you can check it

00:26:15,360 --> 00:26:20,340
out here

00:26:16,430 --> 00:26:23,610
so what we have after one of these that

00:26:20,340 --> 00:26:26,400
have shown you is we have here the HTML

00:26:23,610 --> 00:26:28,500
for a blog post as you have been said on

00:26:26,400 --> 00:26:31,260
the database by Guttenberg okay

00:26:28,500 --> 00:26:34,320
something that is divided by blocks but

00:26:31,260 --> 00:26:37,140
really not really accessible okay and

00:26:34,320 --> 00:26:42,180
after a few steps in our algorithm we

00:26:37,140 --> 00:26:43,200
have confirmed that into this this is

00:26:42,180 --> 00:26:46,980
what we wanted to achieve

00:26:43,200 --> 00:26:49,860
so we basically did it okay so

00:26:46,980 --> 00:26:52,020
conclusion the COPE which means create

00:26:49,860 --> 00:26:53,340
once publish everywhere strategy helps

00:26:52,020 --> 00:26:55,920
create several application which must

00:26:53,340 --> 00:26:58,440
run on different platforms or medium web

00:26:55,920 --> 00:27:01,020
even perhaps home assistants virtual

00:26:58,440 --> 00:27:03,900
reality augmented reality all your you

00:27:01,020 --> 00:27:06,060
name it the way to do this if I created

00:27:03,900 --> 00:27:09,680
a single source of truth for our content

00:27:06,060 --> 00:27:12,840
which separates form from presentation

00:27:09,680 --> 00:27:14,640
because it is block based Gutenberg

00:27:12,840 --> 00:27:19,410
makes all metadata inside they both

00:27:14,640 --> 00:27:21,120
readily accessible through APRs and now

00:27:19,410 --> 00:27:23,190
we can implement the strategy it is not

00:27:21,120 --> 00:27:26,040
optimal as I as I mentioned right now we

00:27:23,190 --> 00:27:27,930
had to purse parse HTML code it's not

00:27:26,040 --> 00:27:30,960
the best but it works and it works

00:27:27,930 --> 00:27:32,520
pretty well and as a result the effort

00:27:30,960 --> 00:27:35,130
needed to release our applications to

00:27:32,520 --> 00:27:38,030
multiple platforms can be greatly reduce

00:27:35,130 --> 00:27:40,710
this is what we want to achieve success

00:27:38,030 --> 00:27:43,320
so this is it

00:27:40,710 --> 00:27:46,410
once again I need to mention this the

00:27:43,320 --> 00:27:47,610
slides are available online check it out

00:27:46,410 --> 00:27:49,110
because all the links are actually

00:27:47,610 --> 00:27:50,610
pretty useful and I couldn't show

00:27:49,110 --> 00:27:54,110
everything that I wanted to show here

00:27:50,610 --> 00:27:54,110
lack of time thanks very much

00:27:54,860 --> 00:28:07,790
Oh No you have any questions panel

00:28:03,880 --> 00:28:10,390
substances and I don't need your let me

00:28:07,790 --> 00:28:10,390

YouTube URL: https://www.youtube.com/watch?v=6H9x9MLzabc


