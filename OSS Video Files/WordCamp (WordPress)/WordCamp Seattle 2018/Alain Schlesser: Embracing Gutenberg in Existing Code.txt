Title: Alain Schlesser: Embracing Gutenberg in Existing Code
Publication date: 2020-04-09
Playlist: WordCamp Seattle 2018
Description: 
	Gutenberg is a major change to how you will develop software for WordPress. It starts with the WordPress editor but is planned to slowly take over the entire admin interface.
If you already have existing plugin or theme code that you need to maintain and make ready for the upcoming Gutenberg update, you will probably face some architectural design challenges.
This talk will first provide an overview of the general concepts that govern development in the Gutenberg era, and then discuss the different tricks & techniques you can use to gradually move your existing code from here to there, in a clean transition.

Presentation slides: https://drive.google.com/open?id=0B9ly5Ai4pWfgNGhPUDBGNU1iMHFBYURxR0ZWZkl4eTlxQnRN
WPTV link: https://wordpress.tv/2019/12/19/alain-schlesser-embracing-gutenberg-in-existing-code-2/
Captions: 
	00:00:00,210 --> 00:00:09,360
good afternoon everyone Elena sure is a

00:00:07,290 --> 00:00:12,059
freelance software engineer and would

00:00:09,360 --> 00:00:15,660
past consultant living in Germany he is

00:00:12,059 --> 00:00:17,580
the maintainer of WP sales CLI and is

00:00:15,660 --> 00:00:19,740
sponsored by ghost to work on the

00:00:17,580 --> 00:00:22,140
WordPress core but he maintains the

00:00:19,740 --> 00:00:24,269
bootstrap would slash new component and

00:00:22,140 --> 00:00:28,320
tries to tackle their architectural pain

00:00:24,269 --> 00:00:30,029
points of this popular CMS passionate

00:00:28,320 --> 00:00:32,099
about software architecture and code

00:00:30,029 --> 00:00:34,920
quality he never misses an opportunity

00:00:32,099 --> 00:00:36,739
to share best practices and tries to

00:00:34,920 --> 00:00:40,320
collect his educational aspirations

00:00:36,739 --> 00:00:42,149
through public speaking and walking you

00:00:40,320 --> 00:00:48,989
can read his thoughts on code and other

00:00:42,149 --> 00:00:53,360
things alleged ledger calm or say hello

00:00:48,989 --> 00:00:57,050
on Twitter under the handle slicer

00:00:53,360 --> 00:00:57,050
please help me welcome

00:00:57,630 --> 00:01:00,679
[Music]

00:01:05,960 --> 00:01:13,710
[Applause]

00:01:07,490 --> 00:01:17,460
so hello everyone the before I start a

00:01:13,710 --> 00:01:20,610
quick word on the planned target

00:01:17,460 --> 00:01:24,450
audience for his talk so it's mainly the

00:01:20,610 --> 00:01:26,400
developer talk that focuses on people

00:01:24,450 --> 00:01:30,090
that might have their own plugins or

00:01:26,400 --> 00:01:32,700
their own custom code that ties into the

00:01:30,090 --> 00:01:35,460
admin backend of WordPress and it might

00:01:32,700 --> 00:01:38,070
be affected by the changes that their

00:01:35,460 --> 00:01:41,400
employees so this is not about how

00:01:38,070 --> 00:01:45,050
end-users will deal with boomer this is

00:01:41,400 --> 00:01:51,350
how about how plug-in developers and

00:01:45,050 --> 00:01:54,350
site builders will be affected by

00:01:51,350 --> 00:01:54,350
Callahan

00:01:54,560 --> 00:02:05,280
so first of all Gutenberg will not only

00:02:00,240 --> 00:02:08,490
give us new shiny editing experience it

00:02:05,280 --> 00:02:14,250
will drastically change some of the

00:02:08,490 --> 00:02:16,890
architectural decisions that that the

00:02:14,250 --> 00:02:20,400
editing experience is placed on so

00:02:16,890 --> 00:02:23,550
there's a few rather major shifts that

00:02:20,400 --> 00:02:26,489
are happening with Putin Berg and they

00:02:23,550 --> 00:02:28,680
will force you to adapt to this with

00:02:26,489 --> 00:02:34,240
that with any custom development that

00:02:28,680 --> 00:02:36,970
might might directly coincide with

00:02:34,240 --> 00:02:39,640
with the areas to work touches as you

00:02:36,970 --> 00:02:41,620
might know the editing experience is the

00:02:39,640 --> 00:02:46,320
first phase of what Google Earth changes

00:02:41,620 --> 00:02:51,990
but it's planned to go beyond that and

00:02:46,320 --> 00:02:55,390
in later phases also at this block based

00:02:51,990 --> 00:02:58,480
approach to other areas and the Indian

00:02:55,390 --> 00:03:03,010
minute so for now we only concern by the

00:02:58,480 --> 00:03:05,920
editing page editor post that's the only

00:03:03,010 --> 00:03:10,080
area where we work right now changes

00:03:05,920 --> 00:03:13,570
things but it will expand beyond that

00:03:10,080 --> 00:03:17,290
so these architectural changes the first

00:03:13,570 --> 00:03:19,000
one and very obvious one is that

00:03:17,290 --> 00:03:23,740
everything all of a sudden moves from

00:03:19,000 --> 00:03:26,770
server to client so right now if you go

00:03:23,740 --> 00:03:29,350
to the post editing screen and you make

00:03:26,770 --> 00:03:33,730
changes to the first era and you click

00:03:29,350 --> 00:03:36,670
update you will see that the browser

00:03:33,730 --> 00:03:38,500
tries to reload the page is because the

00:03:36,670 --> 00:03:41,500
changes you made are sent to the server

00:03:38,500 --> 00:03:43,960
and then the server will process these

00:03:41,500 --> 00:03:46,870
changes a system to the database and

00:03:43,960 --> 00:03:51,070
then sent you a new version of the post

00:03:46,870 --> 00:03:56,880
editing page that that contains these

00:03:51,070 --> 00:03:59,110
changes that you wanted to store this in

00:03:56,880 --> 00:04:01,570
conceptually if you want to visualize

00:03:59,110 --> 00:04:05,170
this you can see as I've shown here in

00:04:01,570 --> 00:04:08,470
the diagram that the general state is

00:04:05,170 --> 00:04:11,770
served on the server side and the server

00:04:08,470 --> 00:04:14,230
always sends output to the client the

00:04:11,770 --> 00:04:17,920
client displays that output and if you

00:04:14,230 --> 00:04:22,510
click on a link on that output the link

00:04:17,920 --> 00:04:24,700
you clicked will request a new version

00:04:22,510 --> 00:04:27,220
of that page or another page from the

00:04:24,700 --> 00:04:30,730
server so the server gets the request

00:04:27,220 --> 00:04:32,639
and generates new output to show this is

00:04:30,730 --> 00:04:37,050
how the old traditional

00:04:32,639 --> 00:04:38,819
WordPress works and with Guttenberg we

00:04:37,050 --> 00:04:41,520
will now move this to the client slide

00:04:38,819 --> 00:04:47,400
and this basically means that the server

00:04:41,520 --> 00:04:50,210
sends logic and data to declined in case

00:04:47,400 --> 00:04:53,939
it's unclear the client is your browser

00:04:50,210 --> 00:04:56,789
as a practical result so the server

00:04:53,939 --> 00:04:59,310
sends lodging a data to the client and

00:04:56,789 --> 00:05:01,680
then we stay within that client the

00:04:59,310 --> 00:05:04,469
client managers it's straight

00:05:01,680 --> 00:05:06,479
all of them still why are you making the

00:05:04,469 --> 00:05:09,150
changes while you click around while you

00:05:06,479 --> 00:05:13,279
move blocks around and rip new ones they

00:05:09,150 --> 00:05:15,750
develop ones and only when you go

00:05:13,279 --> 00:05:18,810
outside of that post editing screen

00:05:15,750 --> 00:05:21,419
willing it back to the server context

00:05:18,810 --> 00:05:23,930
and server will send you a new page to

00:05:21,419 --> 00:05:27,539
note so while you're in the post editor

00:05:23,930 --> 00:05:29,550
with Gutenberg you are exclusively

00:05:27,539 --> 00:05:34,110
working inside of the client side of

00:05:29,550 --> 00:05:37,379
things and the client only sporadically

00:05:34,110 --> 00:05:39,150
makes data exchanges with the server but

00:05:37,379 --> 00:05:41,550
the server is not responsible for

00:05:39,150 --> 00:05:44,580
generating the output ages that is all

00:05:41,550 --> 00:05:49,409
have an ambulance so this very very

00:05:44,580 --> 00:05:52,110
fundamental change which has a lot of

00:05:49,409 --> 00:05:56,539
implications download and we will touch

00:05:52,110 --> 00:05:59,639
on some of them the most the most

00:05:56,539 --> 00:06:02,189
impactful one is the next architectural

00:05:59,639 --> 00:06:05,599
change which is the cause of that is

00:06:02,189 --> 00:06:09,360
that if you work on the client side

00:06:05,599 --> 00:06:12,569
your code runs in the browser someone's

00:06:09,360 --> 00:06:14,580
laptop so you cannot just make a request

00:06:12,569 --> 00:06:17,310
to the database because the data

00:06:14,580 --> 00:06:19,050
does not exist in the planets context

00:06:17,310 --> 00:06:23,340
there is no database because you're not

00:06:19,050 --> 00:06:24,900
on the server so if you want to do take

00:06:23,340 --> 00:06:26,430
the request if you want to create

00:06:24,900 --> 00:06:30,389
something if you want to store something

00:06:26,430 --> 00:06:33,840
to the database you need to pass through

00:06:30,389 --> 00:06:35,789
the REST API which is a protocol that

00:06:33,840 --> 00:06:39,180
allows the client and server to

00:06:35,789 --> 00:06:41,819
communicate and to exchange data so you

00:06:39,180 --> 00:06:43,889
cannot do a sequel create to directly

00:06:41,819 --> 00:06:46,409
grab something from database you can

00:06:43,889 --> 00:06:49,800
only make a request to the REST API and

00:06:46,409 --> 00:06:54,900
then process the response that you got

00:06:49,800 --> 00:06:58,440
from the recipe however with this REST

00:06:54,900 --> 00:07:01,139
API there's a few caveats that you need

00:06:58,440 --> 00:07:04,050
to be aware of when you are actually

00:07:01,139 --> 00:07:07,740
building the solutions Marcus so first

00:07:04,050 --> 00:07:12,029
of all requests are expensive in terms

00:07:07,740 --> 00:07:14,639
of their processing execution so where

00:07:12,029 --> 00:07:18,389
for example if you do a direct database

00:07:14,639 --> 00:07:20,879
request it will usually land on the same

00:07:18,389 --> 00:07:23,699
server our server that's geographically

00:07:20,879 --> 00:07:27,000
very very close to your web server and

00:07:23,699 --> 00:07:29,909
the request will be handled in in the

00:07:27,000 --> 00:07:32,099
matter of milliseconds all of us happen

00:07:29,909 --> 00:07:34,979
these simple requests turned into a

00:07:32,099 --> 00:07:38,400
network moment works and these network

00:07:34,979 --> 00:07:40,879
round trips given that the one executing

00:07:38,400 --> 00:07:43,259
these is the clients or the browser that

00:07:40,879 --> 00:07:44,460
client might actually need and with a

00:07:43,259 --> 00:07:47,849
different continent

00:07:44,460 --> 00:07:50,339
then the wave server is located at so

00:07:47,849 --> 00:07:54,030
this network round-trip is much much

00:07:50,339 --> 00:07:57,060
slower at several orders of magnitude

00:07:54,030 --> 00:07:59,340
direct database requests so this means

00:07:57,060 --> 00:08:02,070
that you really need to retrieve reduced

00:07:59,340 --> 00:08:06,360
number of requests because they are very

00:08:02,070 --> 00:08:08,820
very costly in terms of time then

00:08:06,360 --> 00:08:11,640
another effect is that these requests

00:08:08,820 --> 00:08:14,760
are also expensive in terms of bandwidth

00:08:11,640 --> 00:08:16,650
which might actually be the type of

00:08:14,760 --> 00:08:21,260
expensive that you can express in

00:08:16,650 --> 00:08:25,350
dollars not everyone has cheap reliable

00:08:21,260 --> 00:08:27,390
flat rates for data access so if you do

00:08:25,350 --> 00:08:30,660
REST API requests and to get a huge

00:08:27,390 --> 00:08:32,730
response back there consuming spent with

00:08:30,660 --> 00:08:36,690
it might be very expensive for the

00:08:32,730 --> 00:08:42,620
people that are running so if someone is

00:08:36,690 --> 00:08:46,020
on a smartphone in a third-world country

00:08:42,620 --> 00:08:49,800
where they might be able to be able to

00:08:46,020 --> 00:08:51,240
pay their telephone fees if you just

00:08:49,800 --> 00:08:54,030
waste their bent with it

00:08:51,240 --> 00:08:57,840
with rental requests to the REST API and

00:08:54,030 --> 00:09:00,150
big responses and is the title expensive

00:08:57,840 --> 00:09:05,130
that actually costs really money to

00:09:00,150 --> 00:09:07,560
young people so that's not only should

00:09:05,130 --> 00:09:10,260
you reduce the number of requests but

00:09:07,560 --> 00:09:13,260
you should also try to only ever grep

00:09:10,260 --> 00:09:17,610
the things that you really need and not

00:09:13,260 --> 00:09:19,830
much more another issue you might face

00:09:17,610 --> 00:09:22,830
when you try to now here's this REST API

00:09:19,830 --> 00:09:27,450
is that REST API in terms of its

00:09:22,830 --> 00:09:31,620
expressiveness is purpose for a limited

00:09:27,450 --> 00:09:33,720
so it is based on the HTTP verbs so

00:09:31,620 --> 00:09:38,700
let's get to the post there's lead

00:09:33,720 --> 00:09:41,070
delete and the rest that guys meant to

00:09:38,700 --> 00:09:43,290
deal with resources so I have a given

00:09:41,070 --> 00:09:45,480
set of resources and finding resources

00:09:43,290 --> 00:09:52,160
you have the basic operations like read

00:09:45,480 --> 00:09:55,450
right maybe if you compare this to the

00:09:52,160 --> 00:10:00,420
title expressing expressiveness

00:09:55,450 --> 00:10:03,430
with the database or with PHP code you

00:10:00,420 --> 00:10:06,690
will see that this is much more

00:10:03,430 --> 00:10:11,020
difficult to then actually design your

00:10:06,690 --> 00:10:13,660
interactions your your data requests and

00:10:11,020 --> 00:10:16,690
so on in a meaningful way and often

00:10:13,660 --> 00:10:19,960
means that you'll have trouble probably

00:10:16,690 --> 00:10:23,020
mapping old behavior to this new REST

00:10:19,960 --> 00:10:25,900
API paradigm it might require you to

00:10:23,020 --> 00:10:29,500
rethink some of the assumptions because

00:10:25,900 --> 00:10:37,870
they are not immediate fit to how the

00:10:29,500 --> 00:10:41,800
web works and how the REST API works the

00:10:37,870 --> 00:10:47,340
next big change with good work is that

00:10:41,800 --> 00:10:51,760
it is built on top of react components

00:10:47,340 --> 00:10:55,290
so users react as it's based framework

00:10:51,760 --> 00:10:59,640
for display in the user interface it is

00:10:55,290 --> 00:11:03,880
the type of reactive programming where

00:10:59,640 --> 00:11:06,220
you modify the state and any time the

00:11:03,880 --> 00:11:08,590
state changes the visual representation

00:11:06,220 --> 00:11:13,210
of tests of that change is automatically

00:11:08,590 --> 00:11:16,300
updated because it is reactive so these

00:11:13,210 --> 00:11:20,680
react components they are very modular

00:11:16,300 --> 00:11:24,370
and it basically means that you build

00:11:20,680 --> 00:11:26,920
code where instead of having one big

00:11:24,370 --> 00:11:29,740
piece of logic that deals with all the

00:11:26,920 --> 00:11:32,260
different interactions you will split

00:11:29,740 --> 00:11:36,310
this up into South three components and

00:11:32,260 --> 00:11:38,620
each component only takes only this

00:11:36,310 --> 00:11:42,210
responsible one small part of

00:11:38,620 --> 00:11:46,260
interaction and then the obvious to

00:11:42,210 --> 00:11:49,630
properly assemble these components and

00:11:46,260 --> 00:11:53,710
pick the granularity of this component

00:11:49,630 --> 00:11:59,560
so that the entirety of it creates this

00:11:53,710 --> 00:12:02,570
new type of interaction with these

00:11:59,560 --> 00:12:06,200
components you can finger

00:12:02,570 --> 00:12:09,230
bit that the change that you need to do

00:12:06,200 --> 00:12:10,970
you can think of it as of when you pass

00:12:09,230 --> 00:12:15,500
from procedure code to object oriented

00:12:10,970 --> 00:12:19,190
code this is the same as clear from with

00:12:15,500 --> 00:12:21,110
normally as HTML to react components

00:12:19,190 --> 00:12:22,820
that are self-contained objects and

00:12:21,110 --> 00:12:25,160
there's some bodies objects so it's a

00:12:22,820 --> 00:12:27,860
bit of a similar transition we need to

00:12:25,160 --> 00:12:30,970
do but you don't need to start from

00:12:27,860 --> 00:12:33,950
scratch because WordPress will ship with

00:12:30,970 --> 00:12:37,100
a lot of base components that you can

00:12:33,950 --> 00:12:42,800
use to build them so you can extend them

00:12:37,100 --> 00:12:44,270
you can combine them in new ways so we

00:12:42,800 --> 00:12:46,400
don't need to build something from

00:12:44,270 --> 00:12:48,320
scratch you can start with the base but

00:12:46,400 --> 00:12:55,280
in building blocks that fit WordPress

00:12:48,320 --> 00:12:57,050
for us there's a reference list of

00:12:55,280 --> 00:13:01,190
reference documentation for his

00:12:57,050 --> 00:13:03,440
components at the very handbook so he

00:13:01,190 --> 00:13:06,170
found it under WordPress the rock /

00:13:03,440 --> 00:13:14,800
Putin boxfish handbook and to sectional

00:13:06,170 --> 00:13:20,600
components where we'll see a list a next

00:13:14,800 --> 00:13:23,690
big thing that that you need to wrap

00:13:20,600 --> 00:13:26,930
your head around is the kind of data

00:13:23,690 --> 00:13:31,420
flow that will be included with

00:13:26,930 --> 00:13:38,630
Gutenberg so good work users Redux as

00:13:31,420 --> 00:13:41,690
it's data flow underpinning it Redux

00:13:38,630 --> 00:13:43,910
means that the state and the state

00:13:41,690 --> 00:13:48,380
changes they only ever flow in one

00:13:43,910 --> 00:13:51,710
direction this sounds very ominous and

00:13:48,380 --> 00:13:55,010
does not help much probably it basically

00:13:51,710 --> 00:13:58,400
means that whenever you've got a given

00:13:55,010 --> 00:14:01,280
state into your code you can rely on

00:13:58,400 --> 00:14:04,190
that state not changing so you can make

00:14:01,280 --> 00:14:05,240
the assumption that whatever you got it

00:14:04,190 --> 00:14:06,089
stays that way

00:14:05,240 --> 00:14:08,309
and

00:14:06,089 --> 00:14:11,809
don't need to add any checks don't need

00:14:08,309 --> 00:14:15,269
to fear any concurrency issues or

00:14:11,809 --> 00:14:21,170
similar things and this works by

00:14:15,269 --> 00:14:25,160
creating a type of circular data flow by

00:14:21,170 --> 00:14:28,230
having the state always be injected on

00:14:25,160 --> 00:14:31,589
onto the top of the tree of the object

00:14:28,230 --> 00:14:34,230
hierarchy and the state and traverses

00:14:31,589 --> 00:14:37,949
this entire object hierarchy and at the

00:14:34,230 --> 00:14:40,319
end it goes back to Redux Redux looks at

00:14:37,949 --> 00:14:43,800
what was requested as changes to this

00:14:40,319 --> 00:14:47,249
state applies the changes and then we

00:14:43,800 --> 00:14:51,449
inject the changed state in a new

00:14:47,249 --> 00:14:54,509
iteration into the object tree again so

00:14:51,449 --> 00:14:57,389
to make changes you don't actually

00:14:54,509 --> 00:15:00,389
modify the state that you get but you

00:14:57,389 --> 00:15:03,509
create a change request that you pass on

00:15:00,389 --> 00:15:06,089
to read us so this change request will

00:15:03,509 --> 00:15:09,569
cause the state to be different the next

00:15:06,089 --> 00:15:12,870
time around you get a state so it's an

00:15:09,569 --> 00:15:16,139
iterative circular approach and you

00:15:12,870 --> 00:15:18,480
don't ever make direct changes you

00:15:16,139 --> 00:15:19,139
request changes and you'll get modified

00:15:18,480 --> 00:15:23,610
State

00:15:19,139 --> 00:15:25,800
the next time so to do this there's a

00:15:23,610 --> 00:15:31,110
bit of a vocabulary for Canada for

00:15:25,800 --> 00:15:33,230
camula that react and redux cues to make

00:15:31,110 --> 00:15:36,720
change requests it's called an action

00:15:33,230 --> 00:15:39,179
don't confuse this with the term action

00:15:36,720 --> 00:15:41,040
that you use in WordPress space we're

00:15:39,179 --> 00:15:45,149
talking about a different type of action

00:15:41,040 --> 00:15:48,870
here the naming is a bit bit unfortunate

00:15:45,149 --> 00:15:54,689
in most other areas you would actually

00:15:48,870 --> 00:15:56,639
call this either an event or command and

00:15:54,689 --> 00:15:58,829
most the frameworks that you work with a

00:15:56,639 --> 00:16:01,290
term command because you give an order

00:15:58,829 --> 00:16:01,949
to the surrounding framework to make a

00:16:01,290 --> 00:16:05,100
change

00:16:01,949 --> 00:16:06,430
yeah it's called action in redux sorry

00:16:05,100 --> 00:16:09,040
we just need to live

00:16:06,430 --> 00:16:10,810
with the fact that we now have two

00:16:09,040 --> 00:16:13,900
elements there are protections in

00:16:10,810 --> 00:16:17,380
WordPress but but keep in mind that this

00:16:13,900 --> 00:16:21,940
is a different one that one you know

00:16:17,380 --> 00:16:24,970
from the PHP site and these actions they

00:16:21,940 --> 00:16:28,570
are collected while state passes through

00:16:24,970 --> 00:16:31,170
your object hierarchy and at the end we

00:16:28,570 --> 00:16:34,780
ducks uses a concept called read useless

00:16:31,170 --> 00:16:38,350
so reducer is a piece of code you can

00:16:34,780 --> 00:16:42,190
provide that knows how to turn the given

00:16:38,350 --> 00:16:44,080
action and an existing state into a

00:16:42,190 --> 00:16:46,900
modified state that takes the action

00:16:44,080 --> 00:16:49,390
into account so it's conferring you so

00:16:46,900 --> 00:16:52,750
because it takes two elements current

00:16:49,390 --> 00:16:56,740
state you request a change and it

00:16:52,750 --> 00:16:58,030
produces it to the modified state so the

00:16:56,740 --> 00:17:04,089
state that is ready for the next

00:16:58,030 --> 00:17:06,670
situation there's an abstraction of

00:17:04,089 --> 00:17:10,120
WordPress users which you can find under

00:17:06,670 --> 00:17:14,500
the JavaScript package will press slash

00:17:10,120 --> 00:17:18,610
data and the subscription is basically

00:17:14,500 --> 00:17:21,880
Redux but with a few changes so that you

00:17:18,610 --> 00:17:25,150
can use it across plug-in mummeries

00:17:21,880 --> 00:17:27,370
because typically javascript is language

00:17:25,150 --> 00:17:30,880
that you normally undo so we have one

00:17:27,370 --> 00:17:32,920
application and one collection of code

00:17:30,880 --> 00:17:33,520
and that's it with WordPress that's not

00:17:32,920 --> 00:17:36,520
the case

00:17:33,520 --> 00:17:38,260
because we have multiple uncles who will

00:17:36,520 --> 00:17:41,020
compile with JavaScript we have the core

00:17:38,260 --> 00:17:43,630
bundle in your bundle for each plug-in

00:17:41,020 --> 00:17:46,960
and so this abstraction that WordPress

00:17:43,630 --> 00:17:47,640
provides allows you to combine these

00:17:46,960 --> 00:17:48,990
whole

00:17:47,640 --> 00:17:53,850
one bullet so that we can all

00:17:48,990 --> 00:17:56,340
collaborate on the same readers this all

00:17:53,850 --> 00:17:59,640
sounds very complicated if you've never

00:17:56,340 --> 00:18:02,400
dealt with JavaScript before I just

00:17:59,640 --> 00:18:06,780
wanted to let you know what the paradigm

00:18:02,400 --> 00:18:09,150
shift is that the state is immutable and

00:18:06,780 --> 00:18:11,730
the current execution contests the

00:18:09,150 --> 00:18:14,340
context and can only request changes for

00:18:11,730 --> 00:18:18,450
the next iteration and for the details

00:18:14,340 --> 00:18:21,180
if you happen to be in the situation way

00:18:18,450 --> 00:18:23,280
medium amenities yourself there is lots

00:18:21,180 --> 00:18:29,280
of good documentation you can find on

00:18:23,280 --> 00:18:32,100
redux and associated councillors I don't

00:18:29,280 --> 00:18:34,490
want to go too much into death so don't

00:18:32,100 --> 00:18:37,770
be too much afraid about this

00:18:34,490 --> 00:18:41,910
complicated way of our states handle it

00:18:37,770 --> 00:18:44,640
basically means that you can rely on a

00:18:41,910 --> 00:18:46,680
few given factors that make it easier to

00:18:44,640 --> 00:18:52,520
build code that doesn't break at scale

00:18:46,680 --> 00:18:58,350
when and stuff becomes complicated so

00:18:52,520 --> 00:19:01,560
this is all very new concepts looks all

00:18:58,350 --> 00:19:03,780
very interesting but when you have the

00:19:01,560 --> 00:19:06,300
current plug in our current custom side

00:19:03,780 --> 00:19:09,660
how you get from here to there

00:19:06,300 --> 00:19:13,290
the obvious choice might be to just

00:19:09,660 --> 00:19:16,190
rewrite the entire thing with these new

00:19:13,290 --> 00:19:19,710
concepts but this causes a few issues

00:19:16,190 --> 00:19:21,980
mainly if you have a business for

00:19:19,710 --> 00:19:25,140
example while you are rebuilding this

00:19:21,980 --> 00:19:28,020
your old code is outdated and the new

00:19:25,140 --> 00:19:30,630
new code is not ready yet so you don't

00:19:28,020 --> 00:19:33,360
want to put yourself into a position we

00:19:30,630 --> 00:19:35,250
just met and being able to make a

00:19:33,360 --> 00:19:36,900
working product in one year's time

00:19:35,250 --> 00:19:42,620
because you were rewriting everything

00:19:36,900 --> 00:19:45,000
from scratch in terms of business

00:19:42,620 --> 00:19:47,940
business process in terms of

00:19:45,000 --> 00:19:52,470
well that's just not a good solution so

00:19:47,940 --> 00:19:55,350
usually you don't want to you want to go

00:19:52,470 --> 00:19:57,809
at this incredible way and be able to

00:19:55,350 --> 00:20:00,390
always gather feedback all the time

00:19:57,809 --> 00:20:04,679
always have working product all the time

00:20:00,390 --> 00:20:07,740
so we look now at how you can split the

00:20:04,679 --> 00:20:10,980
rewriting process of your existing

00:20:07,740 --> 00:20:13,590
product up into several granular steps

00:20:10,980 --> 00:20:16,890
that build one on top of each other and

00:20:13,590 --> 00:20:20,640
that always leave you with the work and

00:20:16,890 --> 00:20:27,030
usable result that keeps our cash flow

00:20:20,640 --> 00:20:30,059
going so first of all the most basic

00:20:27,030 --> 00:20:33,750
changes changes you can make is to use

00:20:30,059 --> 00:20:38,570
server-side rendering server-side

00:20:33,750 --> 00:20:42,630
rendering is also called dynamic works

00:20:38,570 --> 00:20:45,120
and it basically means that yes you

00:20:42,630 --> 00:20:47,190
create a good block but that look

00:20:45,120 --> 00:20:51,179
doesn't know how to render itself it

00:20:47,190 --> 00:20:53,159
just requests the output for serve so I

00:20:51,179 --> 00:20:55,950
basically Beckett whether I've shown you

00:20:53,159 --> 00:20:58,140
in the beginning where the server sends

00:20:55,950 --> 00:21:02,370
the output instead of the data into

00:20:58,140 --> 00:21:06,090
logic server-side render is an existing

00:21:02,370 --> 00:21:08,460
component that makes this possible it

00:21:06,090 --> 00:21:11,490
basically works by created by providing

00:21:08,460 --> 00:21:14,760
a base block that you can just attach a

00:21:11,490 --> 00:21:18,450
server-side fall back to so a piece of

00:21:14,760 --> 00:21:21,419
PHP code that will render HTML and every

00:21:18,450 --> 00:21:26,880
time the block is asked to update itself

00:21:21,419 --> 00:21:30,210
it will through the REST API trigger

00:21:26,880 --> 00:21:32,580
call back of the PHP side PHP will

00:21:30,210 --> 00:21:35,490
render the HTML that you requested and

00:21:32,580 --> 00:21:38,700
will send this as response through the

00:21:35,490 --> 00:21:39,430
rest back to this block so you only deal

00:21:38,700 --> 00:21:43,510
with the pH

00:21:39,430 --> 00:21:47,470
side of things and you can reuse your

00:21:43,510 --> 00:21:50,950
existing PHP code so if you have the

00:21:47,470 --> 00:21:53,140
short code for example it already does

00:21:50,950 --> 00:21:55,810
its job by making direct database

00:21:53,140 --> 00:21:57,550
requests and then generating HTML out of

00:21:55,810 --> 00:22:01,690
it you can just turn this into

00:21:57,550 --> 00:22:04,030
server-side render component and wrap it

00:22:01,690 --> 00:22:07,810
into a good block and all of a sudden

00:22:04,030 --> 00:22:10,750
you already make use of Ruttenberg while

00:22:07,810 --> 00:22:14,770
still reusing your own existing PHP code

00:22:10,750 --> 00:22:20,190
with direct database access keep in mind

00:22:14,770 --> 00:22:22,510
that this is meant to provide a legacy

00:22:20,190 --> 00:22:24,670
opportunity for people to to create

00:22:22,510 --> 00:22:28,890
blocks and it comes with some

00:22:24,670 --> 00:22:32,680
performance with some performance

00:22:28,890 --> 00:22:35,310
implications because every time your

00:22:32,680 --> 00:22:38,530
block is rendered it rule triggered is

00:22:35,310 --> 00:22:41,680
callback and you must ensure that this

00:22:38,530 --> 00:22:44,710
callback is not too slow to have

00:22:41,680 --> 00:22:47,560
everything grind to a halt this can be

00:22:44,710 --> 00:22:50,710
done by clever caching for example of

00:22:47,560 --> 00:22:54,190
the callbacks with it and that it does

00:22:50,710 --> 00:22:57,300
not always render from scratch but only

00:22:54,190 --> 00:23:02,740
every five minutes or similar

00:22:57,300 --> 00:23:06,570
functionality here's an example of how

00:23:02,740 --> 00:23:12,630
such a server-side render look and look

00:23:06,570 --> 00:23:15,520
so you can see on the top left side that

00:23:12,630 --> 00:23:19,330
register a block with the given set of

00:23:15,520 --> 00:23:21,880
attributes and this block has render

00:23:19,330 --> 00:23:24,880
callback attached to it

00:23:21,880 --> 00:23:27,640
the ready call back the value that I put

00:23:24,880 --> 00:23:30,250
into it it's basically just the PHP code

00:23:27,640 --> 00:23:32,650
so here it's function it could also be a

00:23:30,250 --> 00:23:36,760
class method or whatever else you want

00:23:32,650 --> 00:23:42,610
to use and to know about them we see a

00:23:36,760 --> 00:23:46,120
template that renders some basic HTML

00:23:42,610 --> 00:23:51,760
and in the top right we see our callback

00:23:46,120 --> 00:23:54,310
that that uses out the buffering to

00:23:51,760 --> 00:23:59,520
render this template into HTML and

00:23:54,310 --> 00:24:03,010
return it to Dakota it was requested and

00:23:59,520 --> 00:24:05,680
when you now at this code you will see

00:24:03,010 --> 00:24:12,100
that you'll have you block what did we

00:24:05,680 --> 00:24:15,340
call it WCS EA and any where you put

00:24:12,100 --> 00:24:16,960
this block into it will request HTML

00:24:15,340 --> 00:24:25,240
from the server and it will render the

00:24:16,960 --> 00:24:29,140
template this year so I've I've stated

00:24:25,240 --> 00:24:31,840
several times now that normally with PHP

00:24:29,140 --> 00:24:36,520
code to do direct database access and

00:24:31,840 --> 00:24:38,800
that doesn't work with so this is the

00:24:36,520 --> 00:24:41,620
main issue you will be facing when you

00:24:38,800 --> 00:24:43,840
have existing code because it does not

00:24:41,620 --> 00:24:46,450
only mean that you need to completely

00:24:43,840 --> 00:24:48,730
over all your user interface it does

00:24:46,450 --> 00:24:52,060
mean that all your logic that you have

00:24:48,730 --> 00:24:54,490
on the server side is basically useless

00:24:52,060 --> 00:24:56,980
because it could not possibly run on the

00:24:54,490 --> 00:24:59,410
client side even if you translated it to

00:24:56,980 --> 00:25:02,440
JavaScript it would not work because it

00:24:59,410 --> 00:25:08,040
just assumes that it would have database

00:25:02,440 --> 00:25:11,710
access that's why a next logical step to

00:25:08,040 --> 00:25:14,080
be able to move gradually would be to

00:25:11,710 --> 00:25:19,180
start creating an abstraction we're

00:25:14,080 --> 00:25:24,780
anchored so an abstraction of the data

00:25:19,180 --> 00:25:28,810
layer basically means that you put a

00:25:24,780 --> 00:25:32,950
piece of code in between your regular

00:25:28,810 --> 00:25:37,390
logic and whatever it is that you use

00:25:32,950 --> 00:25:41,290
to read and write data this allows you

00:25:37,390 --> 00:25:43,810
to to decouple these two and would allow

00:25:41,290 --> 00:25:46,720
you to keep the logic going no matter

00:25:43,810 --> 00:25:49,570
what current storage mechanism you're

00:25:46,720 --> 00:25:53,650
currently using which is what we're

00:25:49,570 --> 00:25:57,100
after actually so once you have this

00:25:53,650 --> 00:26:00,310
expression in place and your logic is

00:25:57,100 --> 00:26:03,250
adapted to only ever work with this

00:26:00,310 --> 00:26:06,040
abstraction it creates a protective

00:26:03,250 --> 00:26:11,100
layer beneath these abstraction you can

00:26:06,040 --> 00:26:13,600
make changes freely and rapidly without

00:26:11,100 --> 00:26:16,180
needing to fear that you will break some

00:26:13,600 --> 00:26:18,670
of the logic on the other side of the

00:26:16,180 --> 00:26:21,880
abstraction

00:26:18,670 --> 00:26:25,120
I wanted to visually represent this so

00:26:21,880 --> 00:26:29,260
just assume that your existing code will

00:26:25,120 --> 00:26:33,190
directly create the database usually by

00:26:29,260 --> 00:26:37,510
using wpte it could be worse though that

00:26:33,190 --> 00:26:39,970
you even directly do my sequel calls or

00:26:37,510 --> 00:26:45,550
so what usually people should use that

00:26:39,970 --> 00:26:48,610
they can you need when you want to add

00:26:45,550 --> 00:26:50,560
REST API access to this there's no

00:26:48,610 --> 00:26:53,830
obvious way to just slide it in

00:26:50,560 --> 00:26:55,870
somewhere to have part of the code the

00:26:53,830 --> 00:26:57,850
direct database access and pull of the

00:26:55,870 --> 00:27:00,490
code already be transmitted and

00:26:57,850 --> 00:27:03,430
translated to REST API so it's an

00:27:00,490 --> 00:27:05,740
all-or-nothing approach basically if you

00:27:03,430 --> 00:27:08,050
want to use rest against that it means

00:27:05,740 --> 00:27:10,630
breaking all the code and replacing

00:27:08,050 --> 00:27:13,960
everything by a REST API based approach

00:27:10,630 --> 00:27:15,970
and depending on what code you have that

00:27:13,960 --> 00:27:18,340
might be a matter of six months of one

00:27:15,970 --> 00:27:22,450
year of two years maybe of rewriting and

00:27:18,340 --> 00:27:25,130
testing everything until you have

00:27:22,450 --> 00:27:28,370
so if you put an extraction layer in

00:27:25,130 --> 00:27:31,820
place all of a sudden the code is

00:27:28,370 --> 00:27:35,120
decoupled from the database and this

00:27:31,820 --> 00:27:37,670
allows you to randomly change whatever

00:27:35,120 --> 00:27:40,610
you want below this abstraction layer

00:27:37,670 --> 00:27:43,640
and you can even have partial changes so

00:27:40,610 --> 00:27:45,950
you can have from from there 20 requests

00:27:43,640 --> 00:27:48,320
you can add 10 requests that go to a

00:27:45,950 --> 00:27:50,270
database bill because that's the part of

00:27:48,320 --> 00:27:52,910
the code that you haven't yet adapted to

00:27:50,270 --> 00:27:54,620
Gutenberg and the other 10 go to rest

00:27:52,910 --> 00:27:57,020
again instead because that's the part

00:27:54,620 --> 00:27:59,810
that he had already modernized so it

00:27:57,020 --> 00:28:05,540
allows you to move gradually and keep it

00:27:59,810 --> 00:28:08,180
working all the time he has a bit of the

00:28:05,540 --> 00:28:10,130
house example of how that would look

00:28:08,180 --> 00:28:14,170
this is of course extremely simplified

00:28:10,130 --> 00:28:17,150
it just it's meant to illustrate base

00:28:14,170 --> 00:28:22,760
principle so instead of doing direct

00:28:17,150 --> 00:28:25,430
requests for something here we have we

00:28:22,760 --> 00:28:28,040
have the custom post type books and

00:28:25,430 --> 00:28:30,140
instead of directly using this custom

00:28:28,040 --> 00:28:32,560
post type instead of directly make a

00:28:30,140 --> 00:28:36,230
request to the database we create an

00:28:32,560 --> 00:28:38,720
interface book repository and this

00:28:36,230 --> 00:28:41,150
interface just states the methods that

00:28:38,720 --> 00:28:44,060
we need so for example we have a method

00:28:41,150 --> 00:28:47,030
find all that allows us to retrieve all

00:28:44,060 --> 00:28:49,280
the books and while designing this

00:28:47,030 --> 00:28:52,190
interface at first we don't care how

00:28:49,280 --> 00:28:54,290
this is implemented and then in the

00:28:52,190 --> 00:28:56,660
first step we can provide an

00:28:54,290 --> 00:29:00,200
implementation at this place WPD B I

00:28:56,660 --> 00:29:03,050
basically fulfills this contract that we

00:29:00,200 --> 00:29:05,420
set up by using double peak really to

00:29:03,050 --> 00:29:07,820
achieve all the books and all of a

00:29:05,420 --> 00:29:10,730
sudden if our logic only ever deals with

00:29:07,820 --> 00:29:14,650
the book repository interface instead of

00:29:10,730 --> 00:29:18,680
with WP dB we can make immediate changes

00:29:14,650 --> 00:29:23,110
to the way we retrieve textual data in a

00:29:18,680 --> 00:29:23,110
transparent way without logic breaking

00:29:25,470 --> 00:29:30,120
but why used rested young server-side

00:29:28,080 --> 00:29:34,830
now because this abstraction basically

00:29:30,120 --> 00:29:37,980
means that yeah you would use restive

00:29:34,830 --> 00:29:41,970
yard already but you haven't yet written

00:29:37,980 --> 00:29:44,759
JavaScript code so what's the point in

00:29:41,970 --> 00:29:46,919
using rest if you have a suicide but the

00:29:44,759 --> 00:29:49,799
point again is to allow you to make

00:29:46,919 --> 00:29:54,120
gradual changes and for example you can

00:29:49,799 --> 00:29:58,080
already use REST API exclusively on the

00:29:54,120 --> 00:30:00,419
server side which allows you to model

00:29:58,080 --> 00:30:04,590
everything to design everything to test

00:30:00,419 --> 00:30:08,009
everything while keeping everything

00:30:04,590 --> 00:30:11,340
working and the rest API

00:30:08,009 --> 00:30:11,879
once it is in place it doesn't care

00:30:11,340 --> 00:30:14,240
anymore

00:30:11,879 --> 00:30:17,429
whether you're the server or the client

00:30:14,240 --> 00:30:20,159
so instead of starting with client code

00:30:17,429 --> 00:30:22,940
and then building everything in a very

00:30:20,159 --> 00:30:27,389
risky way to make the client code work

00:30:22,940 --> 00:30:31,080
we go the other way around we abstract

00:30:27,389 --> 00:30:35,129
away the things on the server that make

00:30:31,080 --> 00:30:37,860
it server only and by doing that we will

00:30:35,129 --> 00:30:40,139
end up with code that already uses to

00:30:37,860 --> 00:30:41,370
REST API it still runs on a server

00:30:40,139 --> 00:30:43,980
but then it's just a matter of

00:30:41,370 --> 00:30:46,259
translating it into JavaScript and it

00:30:43,980 --> 00:30:55,529
will immediately work because we've set

00:30:46,259 --> 00:30:58,740
the groundwork here we have another

00:30:55,529 --> 00:31:02,220
implementation of our book repository

00:30:58,740 --> 00:31:04,740
interface and this time with call a

00:31:02,220 --> 00:31:07,889
restful book repository because we're

00:31:04,740 --> 00:31:11,759
already using the REST API but still in

00:31:07,889 --> 00:31:14,070
PHP on the server side and this uses the

00:31:11,759 --> 00:31:18,570
fact that REST API the way this building

00:31:14,070 --> 00:31:21,539
in WordPress is just by running a lot of

00:31:18,570 --> 00:31:24,269
objects to collaborate together you can

00:31:21,539 --> 00:31:26,149
directly use these objects on the server

00:31:24,269 --> 00:31:28,759
side to make requests

00:31:26,149 --> 00:31:31,999
to arrest API without incurring the

00:31:28,759 --> 00:31:35,509
network overhead so instead of making an

00:31:31,999 --> 00:31:38,509
external request through a URL to the

00:31:35,509 --> 00:31:40,669
server we can actually directly create

00:31:38,509 --> 00:31:43,969
the objects we need from rest API and

00:31:40,669 --> 00:31:46,879
used REST API endpoints without needing

00:31:43,969 --> 00:31:51,079
it to make a rillette work round trip so

00:31:46,879 --> 00:31:53,299
we get direct immediate REST API access

00:31:51,079 --> 00:31:55,459
we can test everything we can model

00:31:53,299 --> 00:31:57,949
everything we have a lot of time to do a

00:31:55,459 --> 00:32:01,309
proper design of our REST API endpoints

00:31:57,949 --> 00:32:04,249
but all the time this keeps working and

00:32:01,309 --> 00:32:06,499
it does not even slow down because right

00:32:04,249 --> 00:32:18,439
now we're not yet even doing at work

00:32:06,499 --> 00:32:22,509
round trips so now we have we have an

00:32:18,439 --> 00:32:28,069
abstract data layer we are ready to make

00:32:22,509 --> 00:32:32,059
REST API work for us the next step is a

00:32:28,069 --> 00:32:35,689
bit of a special one because for most of

00:32:32,059 --> 00:32:38,749
you you will not be able to just say my

00:32:35,689 --> 00:32:41,929
product now on will only work with good

00:32:38,749 --> 00:32:44,209
work because not everyone will not work

00:32:41,929 --> 00:32:46,309
in every single combination of their

00:32:44,209 --> 00:32:49,509
site but everyone is able to be able to

00:32:46,309 --> 00:32:52,669
use it and you don't want to just

00:32:49,509 --> 00:32:56,119
exclude half your customer base because

00:32:52,669 --> 00:32:59,599
they they happen to not yet be migrated

00:32:56,119 --> 00:33:02,469
over to so ideally you want to make your

00:32:59,599 --> 00:33:07,659
code work with or without putting work

00:33:02,469 --> 00:33:12,099
so this is what this next step is about

00:33:07,659 --> 00:33:16,179
if you're now starting to build your new

00:33:12,099 --> 00:33:20,239
react face shining JavaScript front-end

00:33:16,179 --> 00:33:22,699
magic to make everything work inside a

00:33:20,239 --> 00:33:25,309
wouldn't work you should think about

00:33:22,699 --> 00:33:28,040
building it in such a way that you can

00:33:25,309 --> 00:33:31,340
use this independently

00:33:28,040 --> 00:33:35,420
it just happens to use react but it

00:33:31,340 --> 00:33:36,110
doesn't require work to work what does

00:33:35,420 --> 00:33:41,060
this mean

00:33:36,110 --> 00:33:44,300
so with Gutenberg we can imagine at

00:33:41,060 --> 00:33:48,020
least three scenarios pre-fight both

00:33:44,300 --> 00:33:51,560
sides post iOS the post-fight both sides

00:33:48,020 --> 00:33:56,710
with Gutenberg active and post five both

00:33:51,560 --> 00:33:56,710
sides with a classic editor active and

00:33:56,770 --> 00:34:02,620
if we manage to reuse or components

00:34:00,020 --> 00:34:05,270
across these three different scenarios

00:34:02,620 --> 00:34:07,310
we can reduce a lot of the maintenance

00:34:05,270 --> 00:34:10,190
overhead because it's always preferable

00:34:07,310 --> 00:34:12,440
to build something that is slightly more

00:34:10,190 --> 00:34:17,000
complex and reusable across everything

00:34:12,440 --> 00:34:18,919
that we have branching in our code base

00:34:17,000 --> 00:34:21,169
way--but where we basically need to

00:34:18,919 --> 00:34:23,540
maintain two different code bases that

00:34:21,169 --> 00:34:25,250
target two different platforms this is

00:34:23,540 --> 00:34:28,040
always much more costly in terms of

00:34:25,250 --> 00:34:33,129
maintenance and we want to avoid that so

00:34:28,040 --> 00:34:38,090
an example that already does that is the

00:34:33,129 --> 00:34:41,870
WordPress SEO plug-in by Yoast they did

00:34:38,090 --> 00:34:44,149
a lot of work to create the integrations

00:34:41,870 --> 00:34:49,370
into the editing screen so it's all

00:34:44,149 --> 00:34:51,710
based on reactive but if you look at how

00:34:49,370 --> 00:34:54,470
it is implemented you can see without

00:34:51,710 --> 00:34:56,240
him the screenshot this is with Putin

00:34:54,470 --> 00:35:01,160
work active you can see on the right

00:34:56,240 --> 00:35:04,100
side in the sidebar there's the stuff

00:35:01,160 --> 00:35:06,830
that plug-in does to help you make

00:35:04,100 --> 00:35:09,620
decisions and you can see in the

00:35:06,830 --> 00:35:12,860
developer tools at the bottom that these

00:35:09,620 --> 00:35:15,050
are react components but if you have the

00:35:12,860 --> 00:35:17,120
same plug-in and you design

00:35:15,050 --> 00:35:20,590
you will see that we have the same

00:35:17,120 --> 00:35:22,460
component in a metal box below your

00:35:20,590 --> 00:35:25,850
traditional old-school

00:35:22,460 --> 00:35:28,760
editing screen and if you look into the

00:35:25,850 --> 00:35:31,520
developer tools you can see that you can

00:35:28,760 --> 00:35:35,720
see that it's still the same react

00:35:31,520 --> 00:35:39,410
components and they are doing this by

00:35:35,720 --> 00:35:41,360
creating a metal box that provides the

00:35:39,410 --> 00:35:44,230
container that mirrors wouldn't work

00:35:41,360 --> 00:35:49,280
environment this could be environment

00:35:44,230 --> 00:35:52,370
it's very basic basic extraction of what

00:35:49,280 --> 00:35:54,590
real good moved us but it allows the

00:35:52,370 --> 00:35:57,260
existing react component to just cook

00:35:54,590 --> 00:36:00,590
into that metal box instead of the

00:35:57,260 --> 00:36:02,180
Gutenberg's hypo so the component is

00:36:00,590 --> 00:36:03,890
exactly the same it doesn't need to be

00:36:02,180 --> 00:36:06,620
adapted to multiple platforms

00:36:03,890 --> 00:36:10,820
it's just that they spend a bit of time

00:36:06,620 --> 00:36:13,250
to create a metal box that can accept

00:36:10,820 --> 00:36:20,210
these react components in the same way

00:36:13,250 --> 00:36:22,940
that didn't worked at his basic piece of

00:36:20,210 --> 00:36:26,900
code that that shows how this is done

00:36:22,940 --> 00:36:31,010
so web press provides packages that you

00:36:26,900 --> 00:36:33,140
can just pull in through NPM that are

00:36:31,010 --> 00:36:36,440
the same packages that Paul will use

00:36:33,140 --> 00:36:38,060
starting with version 5 oh but you can

00:36:36,440 --> 00:36:41,330
already pull them in with other versions

00:36:38,060 --> 00:36:43,850
are outside of Ruttenberg and we use the

00:36:41,330 --> 00:36:45,920
exact same packages and with these

00:36:43,850 --> 00:36:51,050
packages you can set up an environment

00:36:45,920 --> 00:36:53,870
that that mirrors what you would have in

00:36:51,050 --> 00:36:57,740
would work so here it includes this

00:36:53,870 --> 00:37:00,080
snippet editor for example inside of a

00:36:57,740 --> 00:37:02,390
metal box and the meta box basically

00:37:00,080 --> 00:37:04,480
provides the fill mechanism and the

00:37:02,390 --> 00:37:09,820
sidebar implementation

00:37:04,480 --> 00:37:13,869
normally provides now for the final

00:37:09,820 --> 00:37:15,670
integration in the long run you want to

00:37:13,869 --> 00:37:16,930
control the flag of fragmentation of

00:37:15,670 --> 00:37:21,040
your code

00:37:16,930 --> 00:37:23,380
so make sure that you try to avoid just

00:37:21,040 --> 00:37:25,930
splitting up your codebase into work and

00:37:23,380 --> 00:37:30,670
not put good Merc you want to get rid of

00:37:25,930 --> 00:37:34,150
anything that is not what we use will

00:37:30,670 --> 00:37:37,599
across all the environments you should

00:37:34,150 --> 00:37:40,060
keep your codebase flexible because good

00:37:37,599 --> 00:37:43,900
wave is moving fast we're not yet sure

00:37:40,060 --> 00:37:46,210
what phase 2 or 3 or 10 will bring so

00:37:43,900 --> 00:37:48,790
you should put yourself into a position

00:37:46,210 --> 00:37:52,180
where you can easily adapt to change and

00:37:48,790 --> 00:37:57,160
is probably most valuable approach and

00:37:52,180 --> 00:37:59,890
you can take and finally once you've

00:37:57,160 --> 00:38:02,020
covered all the bases think about how to

00:37:59,890 --> 00:38:05,079
properly embrace book but how to

00:38:02,020 --> 00:38:08,460
actually make the most out of the

00:38:05,079 --> 00:38:11,500
different user interface that provides

00:38:08,460 --> 00:38:14,200
because the user experience that you

00:38:11,500 --> 00:38:16,089
designed for the old editor might have

00:38:14,200 --> 00:38:18,099
been the best one who could could come

00:38:16,089 --> 00:38:19,720
up for the old editor but it's probably

00:38:18,099 --> 00:38:26,829
not the best one you can come up for the

00:38:19,720 --> 00:38:29,050
new one so the key takeaways reuse

00:38:26,829 --> 00:38:32,560
existing code through the service type

00:38:29,050 --> 00:38:35,410
render component abstract way you later

00:38:32,560 --> 00:38:37,240
model a movie to a rustic young but we

00:38:35,410 --> 00:38:40,540
have containers with reusable react

00:38:37,240 --> 00:38:41,819
components finalize the type user

00:38:40,540 --> 00:38:45,130
interface and user experience

00:38:41,819 --> 00:38:49,660
integration and most importantly stay

00:38:45,130 --> 00:38:51,960
flexible and adaptive change that's it

00:38:49,660 --> 00:38:51,960
for me

00:38:55,960 --> 00:39:11,170
[Applause]

00:38:58,050 --> 00:39:13,300
okay questions so so the other commoners

00:39:11,170 --> 00:39:17,110
have a strong enough to business right

00:39:13,300 --> 00:39:19,690
so if it is reactive ESS though will it

00:39:17,110 --> 00:39:22,500
be accessible for using a standard

00:39:19,690 --> 00:39:22,500
cheerless function

00:39:25,390 --> 00:39:29,970
you mean like using jQuery for example

00:39:31,710 --> 00:39:40,240
yes so that will be problematic because

00:39:36,810 --> 00:39:43,150
the paradigm is a different one so for

00:39:40,240 --> 00:39:46,030
very basic things might still be able to

00:39:43,150 --> 00:39:47,710
pull it off to use something like jQuery

00:39:46,030 --> 00:39:53,650
for example or based JavaScript

00:39:47,710 --> 00:39:58,150
functions but these generally in your de

00:39:53,650 --> 00:39:59,859
state model that react users and if you

00:39:58,150 --> 00:40:03,340
build everything so that it has a

00:39:59,859 --> 00:40:05,260
mutable state and then use jQuery to go

00:40:03,340 --> 00:40:07,270
in there and make changes nevertheless

00:40:05,260 --> 00:40:10,570
that will probably need to allow

00:40:07,270 --> 00:40:13,690
difficult to diagnose parts later on so

00:40:10,570 --> 00:40:16,420
it's not a good approach ideally you

00:40:13,690 --> 00:40:19,869
would work with components they might

00:40:16,420 --> 00:40:22,240
not necessarily use react but at least

00:40:19,869 --> 00:40:25,359
you should be aware of how to state

00:40:22,240 --> 00:40:30,090
flows inside of volcanic table and make

00:40:25,359 --> 00:40:30,090
sure that you're not disrupting at state

00:40:39,450 --> 00:40:49,570
what does this mean for people who are

00:40:41,920 --> 00:40:53,170
not so fun and how does it generally

00:40:49,570 --> 00:40:55,750
means that is all the plugin offers you

00:40:53,170 --> 00:40:57,490
all of us now do all of this

00:40:55,750 --> 00:41:04,870
then you need to worry too much about

00:40:57,490 --> 00:41:07,570
things if you have websites for example

00:41:04,870 --> 00:41:10,720
that you run it might mean that you need

00:41:07,570 --> 00:41:13,180
to hire developers to make changes once

00:41:10,720 --> 00:41:15,660
Gutenberg comes because not everything

00:41:13,180 --> 00:41:17,890
just works out of the bosses and

00:41:15,660 --> 00:41:21,010
depending on what you're using that

00:41:17,890 --> 00:41:23,710
makes deeper integrations into the

00:41:21,010 --> 00:41:26,800
editing back-end you might need to

00:41:23,710 --> 00:41:29,200
replace plugins or change some of the

00:41:26,800 --> 00:41:34,210
custom code and so it might mean that

00:41:29,200 --> 00:41:37,390
you need to spend some some time and

00:41:34,210 --> 00:41:43,110
money and maybe hire a developer to

00:41:37,390 --> 00:41:43,110
adapt your your sites to this you will

00:41:44,640 --> 00:41:48,040
for everything you to process everything

00:41:47,140 --> 00:41:51,340
you were talking about

00:41:48,040 --> 00:41:56,140
does that affect mainly just the editing

00:41:51,340 --> 00:41:58,090
mode or would a page view by a normal

00:41:56,140 --> 00:42:00,220
person on the internet cause these rest

00:41:58,090 --> 00:42:01,900
api s-- to be called in react components

00:42:00,220 --> 00:42:08,370
to render for something as simple as

00:42:01,900 --> 00:42:12,130
like a paragraph so for for normal

00:42:08,370 --> 00:42:15,010
bootable components it works that way

00:42:12,130 --> 00:42:17,710
that the javascript logic of the

00:42:15,010 --> 00:42:20,530
component is only executed on the editor

00:42:17,710 --> 00:42:26,200
side in the ending back end and when you

00:42:20,530 --> 00:42:28,480
save your page it it generates the

00:42:26,200 --> 00:42:30,970
output for the component and stores the

00:42:28,480 --> 00:42:31,850
output of the component into the post

00:42:30,970 --> 00:42:33,680
content

00:42:31,850 --> 00:42:36,500
new database so on the front end

00:42:33,680 --> 00:42:40,390
normally you just treat the end result

00:42:36,500 --> 00:42:45,680
so no JavaScript code is being executed

00:42:40,390 --> 00:42:48,010
it should just work but this is how it

00:42:45,680 --> 00:42:52,610
should behave this doesn't mean that

00:42:48,010 --> 00:42:54,740
plugins will now do other things that

00:42:52,610 --> 00:42:57,410
might cause JavaScript to execute or

00:42:54,740 --> 00:43:00,350
something I mean also it's different for

00:42:57,410 --> 00:43:03,640
dynamic locks so dynamic blocks like a

00:43:00,350 --> 00:43:06,770
show in server-side written component

00:43:03,640 --> 00:43:10,370
they don't store their result in the

00:43:06,770 --> 00:43:15,310
database the only store reference the

00:43:10,370 --> 00:43:18,590
block they did they are the block ID and

00:43:15,310 --> 00:43:21,290
its attributes how it was configured and

00:43:18,590 --> 00:43:23,900
every time the dynamic block is meant to

00:43:21,290 --> 00:43:26,900
be displayed it will actually be parsed

00:43:23,900 --> 00:43:29,120
out of the content and this render

00:43:26,900 --> 00:43:31,880
callback for the triggered to retrieve

00:43:29,120 --> 00:43:34,460
the real HTML content and that will be

00:43:31,880 --> 00:43:37,640
pasted here so for dynamic groups they

00:43:34,460 --> 00:43:41,210
actually include at least one REST API

00:43:37,640 --> 00:43:44,240
request because the REST API request is

00:43:41,210 --> 00:43:47,440
the one that trigger us to render

00:43:44,240 --> 00:43:47,440
callback on the server side

00:43:58,760 --> 00:44:05,610
interesting talk I'm also not very of

00:44:02,250 --> 00:44:08,850
the spectrum but could you describe the

00:44:05,610 --> 00:44:12,780
intent of these structural changes other

00:44:08,850 --> 00:44:15,450
than the benefits of being able to not

00:44:12,780 --> 00:44:18,600
have errors that propagate so easily

00:44:15,450 --> 00:44:20,340
is this more efficient in terms of it's

00:44:18,600 --> 00:44:21,960
not requiring these websites will not

00:44:20,340 --> 00:44:23,910
require to me and within the future

00:44:21,960 --> 00:44:27,510
because so much is happening now on the

00:44:23,910 --> 00:44:30,270
one user end or could you describe the

00:44:27,510 --> 00:44:31,800
intent of the structural change do you

00:44:30,270 --> 00:44:37,860
mean structural changes that Gutenberg

00:44:31,800 --> 00:44:40,620
introduces correct yeah so good where is

00:44:37,860 --> 00:44:42,930
mainly focused on changing the editing

00:44:40,620 --> 00:44:45,080
experience and it's not so much about

00:44:42,930 --> 00:44:49,620
how it would behave on the front end

00:44:45,080 --> 00:44:52,410
actually right now they're still working

00:44:49,620 --> 00:44:56,160
on optimizing the front end output so

00:44:52,410 --> 00:44:59,760
that it doesn't incur performance it is

00:44:56,160 --> 00:45:02,790
being used so it's all about making a

00:44:59,760 --> 00:45:05,940
shiny new editing experience that allows

00:45:02,790 --> 00:45:09,360
you to stay in that editor and have

00:45:05,940 --> 00:45:14,400
everything be very intact but that means

00:45:09,360 --> 00:45:17,310
that while while they designed it it not

00:45:14,400 --> 00:45:19,320
the topmost priority was the ending

00:45:17,310 --> 00:45:21,450
method not how it behaves in front end

00:45:19,320 --> 00:45:23,910
of course this was considered as well

00:45:21,450 --> 00:45:25,680
what it means for the front end but they

00:45:23,910 --> 00:45:27,660
still some things that need to be

00:45:25,680 --> 00:45:29,880
figured out to optimize it properly

00:45:27,660 --> 00:45:34,100
because right now it will be slightly

00:45:29,880 --> 00:45:34,100
less performant and the old way

00:45:51,480 --> 00:45:57,240
so is this gonna change the file

00:45:55,050 --> 00:45:59,820
structure throw used to like going in

00:45:57,240 --> 00:46:02,420
and FTP in and looking at the PHP files

00:45:59,820 --> 00:46:04,860
and such this is gonna be a whole new

00:46:02,420 --> 00:46:08,580
paradigm of what would be looking at on

00:46:04,860 --> 00:46:11,100
the back end yes absolutely

00:46:08,580 --> 00:46:15,510
this is one of the main criticisms of

00:46:11,100 --> 00:46:18,360
uber actually because it will change

00:46:15,510 --> 00:46:21,120
from PHP files that you can just modify

00:46:18,360 --> 00:46:24,120
and immediately see the results to

00:46:21,120 --> 00:46:26,100
modern JavaScript code that needs to be

00:46:24,120 --> 00:46:30,030
compiled and bundled before it can be

00:46:26,100 --> 00:46:32,160
executed so we need to have a build

00:46:30,030 --> 00:46:34,650
pipeline that always compile the

00:46:32,160 --> 00:46:37,260
JavaScript code if you just make the

00:46:34,650 --> 00:46:39,690
change in the file it does not do

00:46:37,260 --> 00:46:41,760
anything because you're not executing

00:46:39,690 --> 00:46:44,010
the source files you're executing the

00:46:41,760 --> 00:46:46,530
result that was generated by the

00:46:44,010 --> 00:46:49,620
pipeline so he not only need to learn

00:46:46,530 --> 00:46:52,050
JavaScript and the syntax etc also need

00:46:49,620 --> 00:46:54,890
to learn how to set up the build tools

00:46:52,050 --> 00:47:02,940
and really proper build pipeline that

00:46:54,890 --> 00:47:08,600
compiles and bundles together yeah but

00:47:02,940 --> 00:47:11,760
it's certainly a big change from HP and

00:47:08,600 --> 00:47:13,920
it is a big change way from what has

00:47:11,760 --> 00:47:16,230
traditionally been one of the strong

00:47:13,920 --> 00:47:19,530
points of WordPress that anyone can just

00:47:16,230 --> 00:47:23,760
tinker with it and learn Wow Wow

00:47:19,530 --> 00:47:27,180
building with with this new react based

00:47:23,760 --> 00:47:30,120
JavaScript approach there's a lot more

00:47:27,180 --> 00:47:36,140
steps involved it's a much steeper

00:47:30,120 --> 00:47:36,140
learning curve to just explore one more

00:47:38,339 --> 00:47:43,289
they replace the kind of question let's

00:47:40,170 --> 00:47:45,599
say you want to extend an existing block

00:47:43,289 --> 00:47:48,749
you just want to say button and you want

00:47:45,599 --> 00:47:50,099
to have a water or hover State I saw how

00:47:48,749 --> 00:47:52,019
we do that but we would have to go

00:47:50,099 --> 00:47:54,089
through the same unit like I'm

00:47:52,019 --> 00:47:57,049
with you the same build process in our

00:47:54,089 --> 00:48:02,279
compiler a separate JavaScript even just

00:47:57,049 --> 00:48:08,160
accurate sir is that correct so for for

00:48:02,279 --> 00:48:14,189
basic use cases you can use in all the

00:48:08,160 --> 00:48:16,439
syntax of JavaScript that so that let me

00:48:14,189 --> 00:48:18,719
step back so with JavaScript JavaScript

00:48:16,439 --> 00:48:22,199
in it is an end constant state of flux

00:48:18,719 --> 00:48:24,569
the the language is being reinvented all

00:48:22,199 --> 00:48:26,910
the time and there's all the illusions

00:48:24,569 --> 00:48:28,979
of the syntax that the browsers can

00:48:26,910 --> 00:48:31,140
directly execute because the browser's

00:48:28,979 --> 00:48:33,209
have caught on to that syntax and this

00:48:31,140 --> 00:48:36,180
one newer version of the syntax that are

00:48:33,209 --> 00:48:37,949
not yet correctly executable by the

00:48:36,180 --> 00:48:40,140
process because they didn't have the

00:48:37,949 --> 00:48:43,289
time here to implement everything so

00:48:40,140 --> 00:48:45,599
this these new types of syntax versions

00:48:43,289 --> 00:48:47,729
there you are transpired into older

00:48:45,599 --> 00:48:50,369
versions so that it can be executed in

00:48:47,729 --> 00:48:52,829
the browser and for simpler use cases

00:48:50,369 --> 00:48:56,640
you can actually use an older type of

00:48:52,829 --> 00:48:59,249
the syntax without any bundling and just

00:48:56,640 --> 00:49:01,859
have the basic javascript file that can

00:48:59,249 --> 00:49:04,769
directly be executed in the browser and

00:49:01,859 --> 00:49:06,900
you can then just in queue this

00:49:04,769 --> 00:49:13,589
javascript file and then that will work

00:49:06,900 --> 00:49:16,439
but is yes yes but as soon as you start

00:49:13,589 --> 00:49:20,069
doing more complex changes this will

00:49:16,439 --> 00:49:22,109
quickly fall apart because you need to

00:49:20,069 --> 00:49:24,900
bring all sorts of dependencies to make

00:49:22,109 --> 00:49:26,489
this work and in a non bundle of non

00:49:24,900 --> 00:49:29,900
compiler version of JavaScript you

00:49:26,489 --> 00:49:29,900
cannot call in these dependencies

00:49:37,920 --> 00:49:41,339
if you want to do something very simple

00:49:40,079 --> 00:49:43,529
if you want to do this

00:49:41,339 --> 00:49:45,990
if you want to start from scratch then

00:49:43,529 --> 00:49:49,289
absolutely start with a basic JavaScript

00:49:45,990 --> 00:49:54,539
file but there's also not option there's

00:49:49,289 --> 00:49:58,170
a few few ways of creating a blog where

00:49:54,539 --> 00:50:00,539
everything already works in terms of

00:49:58,170 --> 00:50:02,849
scaffolding and has setup and you can

00:50:00,539 --> 00:50:05,160
just put your logic in and yet I build

00:50:02,849 --> 00:50:09,210
pipelines already set up there's one

00:50:05,160 --> 00:50:12,900
called create wooden block by otherwise

00:50:09,210 --> 00:50:14,490
WPC life provides a way to scaffold so

00:50:12,900 --> 00:50:16,589
depending on what it is it might make

00:50:14,490 --> 00:50:18,539
sense to just use that kind of

00:50:16,589 --> 00:50:21,569
scaffolding to get you set up with a

00:50:18,539 --> 00:50:24,480
proper flow and and you can already do a

00:50:21,569 --> 00:50:26,190
minor change and it works and then later

00:50:24,480 --> 00:50:31,109
on slowly learn what it's actually doing

00:50:26,190 --> 00:50:32,390
what you look great ah thank you mommy

00:50:31,109 --> 00:50:36,469
thank you

00:50:32,390 --> 00:50:36,469

YouTube URL: https://www.youtube.com/watch?v=2S4yxVrEgIA


