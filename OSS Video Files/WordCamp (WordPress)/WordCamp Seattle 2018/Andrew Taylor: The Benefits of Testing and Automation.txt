Title: Andrew Taylor: The Benefits of Testing and Automation
Publication date: 2020-04-15
Playlist: WordCamp Seattle 2018
Description: 
	Modern development is complex, with lots of tools to turn the code we write into the code used by the user’s browser. This can be as simple as minifying assets or as sophisticated as downloading dependencies, turning source code into production code, and running automated tests.
In this session, we will look at the top benefits gained from adopting automation and testing to optimize workflow. Whether you’re a developer wondering why you should try automation in the first place or a business owner wondering why you should let your team spend time on adopting a new process when the current one “just works” we’ll have answers for you!

Presentation slides: https://drive.google.com/file/d/1xPCnxMxo2vUWIq0WFCdq6hhvfCLuVufB/view?usp=sharing
WPTV link: https://wordpress.tv/2019/12/02/andrew-taylor-the-benefits-of-testing-and-automation/
Captions: 
	00:00:06,250 --> 00:00:17,549
thank you if your Toma - you're in the

00:00:09,460 --> 00:00:17,549
right place here in - benefits

00:00:26,410 --> 00:00:29,550
[Applause]

00:00:36,130 --> 00:00:39,259
[Music]

00:00:41,460 --> 00:00:44,569
[Applause]

00:00:48,650 --> 00:00:54,330
see I'm talking about benefits the

00:00:51,240 --> 00:00:56,640
testing and automation a tailor and me

00:00:54,330 --> 00:00:58,050
get up in Twitter tweeted out the link

00:00:56,640 --> 00:00:59,990
to the slide so if you want to follow

00:00:58,050 --> 00:01:03,390
along grab the resources at the end

00:00:59,990 --> 00:01:05,820
please do that I came up from Portland

00:01:03,390 --> 00:01:09,090
so I looked at Northwest it being

00:01:05,820 --> 00:01:13,110
outdoors taking about making and all

00:01:09,090 --> 00:01:15,960
these sorts of things but more than

00:01:13,110 --> 00:01:18,000
working it down you know being a human

00:01:15,960 --> 00:01:21,090
it likes to be outside I am a maintainer

00:01:18,000 --> 00:01:23,609
of websites and as most of us are here

00:01:21,090 --> 00:01:26,549
at work in Seattle and so that means

00:01:23,609 --> 00:01:29,100
that you know I'm building websites in

00:01:26,549 --> 00:01:31,799
my day job but also my desk company

00:01:29,100 --> 00:01:37,560
needs a website says can you referred

00:01:31,799 --> 00:01:39,929
agency myself I'm gonna go find an

00:01:37,560 --> 00:01:41,219
agency right so these are sorts of

00:01:39,929 --> 00:01:43,049
things that happen we picked up these

00:01:41,219 --> 00:01:45,990
projects and we have to maintain all

00:01:43,049 --> 00:01:47,820
over time whether they're personal

00:01:45,990 --> 00:01:49,830
projects or client

00:01:47,820 --> 00:01:52,380
so I want to talk today about testing an

00:01:49,830 --> 00:01:54,479
automation in really look at ways that

00:01:52,380 --> 00:01:58,080
we can improve our maintaining websites

00:01:54,479 --> 00:02:00,660
and improve our workflows and changes

00:01:58,080 --> 00:02:03,119
especially if it's a client active

00:02:00,660 --> 00:02:04,920
project right happen frequently we get

00:02:03,119 --> 00:02:07,800
requests from the client that maybe

00:02:04,920 --> 00:02:09,479
change this template we have security

00:02:07,800 --> 00:02:10,170
updates that have to be read all the

00:02:09,479 --> 00:02:12,750
time

00:02:10,170 --> 00:02:14,190
big WordPress by moment they come in a

00:02:12,750 --> 00:02:15,510
bit every single plugin you have

00:02:14,190 --> 00:02:17,640
installed was going to have an update

00:02:15,510 --> 00:02:19,770
that goes along with that what fixes

00:02:17,640 --> 00:02:22,950
these features we're developing all

00:02:19,770 --> 00:02:25,980
these sorts of things are coming in and

00:02:22,950 --> 00:02:28,260
so who uses a staging server yeah

00:02:25,980 --> 00:02:32,190
hopefully we all do we should be that

00:02:28,260 --> 00:02:34,020
way moving in production anymore because

00:02:32,190 --> 00:02:35,880
we don't want to break the last night

00:02:34,020 --> 00:02:38,700
especially at the client side we're

00:02:35,880 --> 00:02:41,519
getting paid for that that work can't go

00:02:38,700 --> 00:02:44,430
down in you just leave the work flow I

00:02:41,519 --> 00:02:47,250
see when I interact with folks who are

00:02:44,430 --> 00:02:49,530
using a staging server is that they have

00:02:47,250 --> 00:02:51,390
this new feature this bug fix all these

00:02:49,530 --> 00:02:53,880
things and people are maybe doing it

00:02:51,390 --> 00:02:55,920
locally maybe they're working right on

00:02:53,880 --> 00:02:58,890
the staging server but everyone pushes

00:02:55,920 --> 00:02:59,360
their changes up and then they do around

00:02:58,890 --> 00:03:01,910
a few

00:02:59,360 --> 00:03:03,860
right so you have this bike fix this new

00:03:01,910 --> 00:03:06,080
feature all these plugin updates and

00:03:03,860 --> 00:03:08,930
they're all on the staging server at the

00:03:06,080 --> 00:03:12,770
same time and now we have to do this QA

00:03:08,930 --> 00:03:14,390
and you know people are a little bit

00:03:12,770 --> 00:03:16,550
more advanced maker using version

00:03:14,390 --> 00:03:20,530
control we do that we're not on

00:03:16,550 --> 00:03:23,180
different get branches so developer be

00:03:20,530 --> 00:03:26,000
our new feature and our plugin updates

00:03:23,180 --> 00:03:27,560
are different branches but again they

00:03:26,000 --> 00:03:29,780
both kind of look good on my local

00:03:27,560 --> 00:03:31,790
machine or wherever I'm doing the work

00:03:29,780 --> 00:03:34,190
and then I push it up to the staging

00:03:31,790 --> 00:03:37,040
server and so we have the spot here

00:03:34,190 --> 00:03:41,209
we're doing this large amount of QA with

00:03:37,040 --> 00:03:43,430
multiple changes coming into play and so

00:03:41,209 --> 00:03:46,250
just thinking about the scenario where

00:03:43,430 --> 00:03:48,860
we're updating plugins and things right

00:03:46,250 --> 00:03:50,480
this is one sort of change that maybe

00:03:48,860 --> 00:03:52,250
that you a it looks something like this

00:03:50,480 --> 00:03:55,730
that I'm making over take a look at the

00:03:52,250 --> 00:03:58,760
live site I'm gonna go take a look at

00:03:55,730 --> 00:04:01,030
these staging site if I'm feeling fancy

00:03:58,760 --> 00:04:03,590
all the way up side-by-side

00:04:01,030 --> 00:04:06,920
maybe I'll go check mobile because

00:04:03,590 --> 00:04:08,209
bubbles really important right and we

00:04:06,920 --> 00:04:11,150
want to make sure that the best looking

00:04:08,209 --> 00:04:13,250
good so who notice what was different

00:04:11,150 --> 00:04:15,160
right there actually was a change there

00:04:13,250 --> 00:04:18,260
when I ran these updates between the

00:04:15,160 --> 00:04:21,380
staging site in the live site and it's

00:04:18,260 --> 00:04:24,100
the search box more specifically we can

00:04:21,380 --> 00:04:27,380
see the live sites on the right the

00:04:24,100 --> 00:04:29,750
staging sites on the left and we can see

00:04:27,380 --> 00:04:32,240
that the label search got added in

00:04:29,750 --> 00:04:35,960
addition to the icon which is not a big

00:04:32,240 --> 00:04:38,540
deal but you might not be able to notice

00:04:35,960 --> 00:04:41,720
is that the actual search button is a

00:04:38,540 --> 00:04:44,360
little bit off it's kind of running into

00:04:41,720 --> 00:04:47,000
the border on the bottom layer and as a

00:04:44,360 --> 00:04:48,920
human just looking at these things side

00:04:47,000 --> 00:04:52,280
by side this is something

00:04:48,920 --> 00:04:54,140
yes I didn't notice that maybe you have

00:04:52,280 --> 00:04:58,190
no CP Clank from just nervous that's

00:04:54,140 --> 00:05:01,250
right you don't important right so and

00:04:58,190 --> 00:05:03,440
that's just the homepage of one site and

00:05:01,250 --> 00:05:04,790
now we have to repeat this for all the

00:05:03,440 --> 00:05:08,360
different templates we need to check

00:05:04,790 --> 00:05:10,310
maybe a single post maybe our FAQ page

00:05:08,360 --> 00:05:12,560
maybe the contact page whatever if

00:05:10,310 --> 00:05:15,290
you're doing this over and over every

00:05:12,560 --> 00:05:17,930
time you run updates this is just one

00:05:15,290 --> 00:05:20,510
type of QA and if we have the staging

00:05:17,930 --> 00:05:23,120
site we're not just plugin updates but

00:05:20,510 --> 00:05:24,800
the new template the bug fix the client

00:05:23,120 --> 00:05:27,080
request all these things are stuffed on

00:05:24,800 --> 00:05:30,350
the staging server we're doing this QA

00:05:27,080 --> 00:05:32,780
it doesn't always go well great we catch

00:05:30,350 --> 00:05:36,860
things and then we have to find and fix

00:05:32,780 --> 00:05:39,200
these things and we're probably out of

00:05:36,860 --> 00:05:41,120
planning because at this point the

00:05:39,200 --> 00:05:42,950
client wants their request to go live

00:05:41,120 --> 00:05:44,930
and they want the but it's with the end

00:05:42,950 --> 00:05:45,890
of his framework we need to get this

00:05:44,930 --> 00:05:47,720
stuff out there

00:05:45,890 --> 00:05:48,950
but now we have to untangle to figure

00:05:47,720 --> 00:05:51,290
out where was the issue

00:05:48,950 --> 00:05:58,190
maybe it's holding up all these other

00:05:51,290 --> 00:06:00,770
changes so this is what I usually see

00:05:58,190 --> 00:06:02,330
people have the staging site it's great

00:06:00,770 --> 00:06:03,950
that reusing that that we didn't we

00:06:02,330 --> 00:06:06,140
didn't use to and that's sort of a

00:06:03,950 --> 00:06:07,990
standard the best package there but

00:06:06,140 --> 00:06:10,420
there's a better way that

00:06:07,990 --> 00:06:12,490
on the staging site doing this big

00:06:10,420 --> 00:06:14,380
stressful QA because it's stressful for

00:06:12,490 --> 00:06:17,920
you also stressful for your claim

00:06:14,380 --> 00:06:22,930
because they have those deadlines and so

00:06:17,920 --> 00:06:25,660
you can test after every change and this

00:06:22,930 --> 00:06:27,550
is the idea of continuous testing so we

00:06:25,660 --> 00:06:29,110
looked at you know staging server that

00:06:27,550 --> 00:06:30,910
maybe if you're doing a more advanced

00:06:29,110 --> 00:06:33,010
workflow you're working and get branches

00:06:30,910 --> 00:06:36,400
or tanks for each change but you can

00:06:33,010 --> 00:06:39,100
actually need to test at each point

00:06:36,400 --> 00:06:42,670
after every change so I run plugin

00:06:39,100 --> 00:06:46,150
updates I test things I fix a buddy I

00:06:42,670 --> 00:06:48,130
test things I you know develop a new

00:06:46,150 --> 00:06:50,110
feature or your templates or whatever I

00:06:48,130 --> 00:06:51,940
test things and then when we get to the

00:06:50,110 --> 00:06:54,310
point where we're doing the big QA

00:06:51,940 --> 00:06:55,660
before we go to production it's a lot

00:06:54,310 --> 00:06:58,000
less stressful it's a lot less

00:06:55,660 --> 00:07:00,370
time-consuming because if there were

00:06:58,000 --> 00:07:02,290
issues like with that search for ActiveX

00:07:00,370 --> 00:07:05,050
plug-in updates I would have kind of

00:07:02,290 --> 00:07:07,480
back here and then I can go in and

00:07:05,050 --> 00:07:09,370
actually alright maybe I created I

00:07:07,480 --> 00:07:09,970
created a backup before I ran all those

00:07:09,370 --> 00:07:12,640
updates

00:07:09,970 --> 00:07:15,010
I tested there were issues I could

00:07:12,640 --> 00:07:17,110
restore the backup I can update the

00:07:15,010 --> 00:07:19,270
plugins one at a time I can find worthy

00:07:17,110 --> 00:07:20,920
she was rather than getting all the way

00:07:19,270 --> 00:07:22,740
to the end and trying to attain the

00:07:20,920 --> 00:07:26,560
levels later

00:07:22,740 --> 00:07:30,130
and so this continuous nesting sounds

00:07:26,560 --> 00:07:33,910
great in theory but checking things is

00:07:30,130 --> 00:07:36,010
boring I actually talking with other

00:07:33,910 --> 00:07:39,700
developers there is a difference between

00:07:36,010 --> 00:07:42,520
checking and testing in an I'm fixing a

00:07:39,700 --> 00:07:45,700
bug with the menu I don't like testing

00:07:42,520 --> 00:07:47,190
that the menu works correctly but going

00:07:45,700 --> 00:07:49,410
and checking everything

00:07:47,190 --> 00:07:52,980
on the website making sure that every

00:07:49,410 --> 00:07:55,860
template looks okay that booting up a PM

00:07:52,980 --> 00:07:58,410
to go check internet explorer however

00:07:55,860 --> 00:08:00,150
going in and you know looking all

00:07:58,410 --> 00:08:02,190
different templates or filling out a

00:08:00,150 --> 00:08:05,730
contact form adding products in the cart

00:08:02,190 --> 00:08:07,890
so if i have this quick fix that takes

00:08:05,730 --> 00:08:09,750
me like five minutes for the menu going

00:08:07,890 --> 00:08:13,080
in to check every other part of the

00:08:09,750 --> 00:08:15,660
website is too much pads but we should

00:08:13,080 --> 00:08:18,180
be doing if we want to catch issues

00:08:15,660 --> 00:08:22,440
early and fix that before it gets to be

00:08:18,180 --> 00:08:24,540
a tangled mess and it's also really time

00:08:22,440 --> 00:08:26,550
consuming a lot of people I popped you

00:08:24,540 --> 00:08:28,860
don't do this in practice they know they

00:08:26,550 --> 00:08:32,370
should be doing the fourth year QA more

00:08:28,860 --> 00:08:35,340
often but it's so time consuming that

00:08:32,370 --> 00:08:37,349
it's just not practical because you need

00:08:35,340 --> 00:08:39,750
to actually be doing the work not just

00:08:37,349 --> 00:08:42,570
checking the RIC your clients it's hard

00:08:39,750 --> 00:08:45,870
to send them a line item for you know

00:08:42,570 --> 00:08:48,570
five hours of QA when you also have five

00:08:45,870 --> 00:08:51,660
hours of they're like wait what I'm

00:08:48,570 --> 00:08:54,810
paying you to work so can we test more

00:08:51,660 --> 00:08:57,840
often without doing more work so I

00:08:54,810 --> 00:09:00,150
started asking this question and the

00:08:57,840 --> 00:09:03,420
answer is to make the robots do the work

00:09:00,150 --> 00:09:06,900
if they can actually serve lunch I think

00:09:03,420 --> 00:09:09,060
this is in Japan then you know they're

00:09:06,900 --> 00:09:10,620
going to be driving our cars and all of

00:09:09,060 --> 00:09:13,890
these things surely they can help us

00:09:10,620 --> 00:09:16,530
with our QA and there are lots of great

00:09:13,890 --> 00:09:18,960
tools out there tons of tools that exist

00:09:16,530 --> 00:09:21,870
to help with this maybe some of you who

00:09:18,960 --> 00:09:23,300
have used the PCL a right to automate

00:09:21,870 --> 00:09:26,120
parts of

00:09:23,300 --> 00:09:28,060
go in I want to just check updates are

00:09:26,120 --> 00:09:31,190
available I want to install the plugin

00:09:28,060 --> 00:09:32,630
well if there's tools like this where we

00:09:31,190 --> 00:09:34,640
can do these things in the command line

00:09:32,630 --> 00:09:36,050
then we can start writing scripts and we

00:09:34,640 --> 00:09:40,010
can start building up towards this

00:09:36,050 --> 00:09:42,950
automation it is an upfront time

00:09:40,010 --> 00:09:44,899
investment to learn these tools and

00:09:42,950 --> 00:09:48,170
write the scripts and get this process

00:09:44,899 --> 00:09:50,959
going but it results in this consistent

00:09:48,170 --> 00:09:52,760
testing practice that is going to have

00:09:50,959 --> 00:09:54,800
long-term benefits and we're going to

00:09:52,760 --> 00:09:56,660
get to those benefits this is actually

00:09:54,800 --> 00:09:58,070
one of my favorite projects right kind

00:09:56,660 --> 00:10:01,640
of helps me get in the mindset of what

00:09:58,070 --> 00:10:03,560
developers want to do pass the salt 20

00:10:01,640 --> 00:10:05,300
minutes later I'm building something

00:10:03,560 --> 00:10:08,060
that will make it so I never have to

00:10:05,300 --> 00:10:09,950
pass all to you again right and that's

00:10:08,060 --> 00:10:11,990
what we're going to be doing with our QA

00:10:09,950 --> 00:10:14,060
it's looking at how can we put the time

00:10:11,990 --> 00:10:18,079
in upfront to make sure we never have to

00:10:14,060 --> 00:10:20,360
worry about this and it is the room plus

00:10:18,079 --> 00:10:23,120
travel so most people are still doing

00:10:20,360 --> 00:10:25,399
things medially we know that this

00:10:23,120 --> 00:10:27,140
automation exists and you might go and

00:10:25,399 --> 00:10:29,990
look at you know some sites that are

00:10:27,140 --> 00:10:32,329
really large-scale like Amazon right

00:10:29,990 --> 00:10:35,120
they're deploying changes so often with

00:10:32,329 --> 00:10:36,829
such a big team that they can't do it

00:10:35,120 --> 00:10:39,770
medially they they have that automation

00:10:36,829 --> 00:10:42,800
the press where the projects were

00:10:39,770 --> 00:10:44,570
working on making that scale but we can

00:10:42,800 --> 00:10:47,120
still take some of the best practices

00:10:44,570 --> 00:10:50,510
and adopt it so it's kind of hit at that

00:10:47,120 --> 00:10:53,390
enterprise my light here and so it's a

00:10:50,510 --> 00:10:54,980
bit of below that you road less traveled

00:10:53,390 --> 00:10:56,540
because it's you know kind of upper

00:10:54,980 --> 00:11:00,230
echelon but there's no reason

00:10:56,540 --> 00:11:03,070
take advantage of these things so

00:11:00,230 --> 00:11:05,420
looking at our plugin updates again I

00:11:03,070 --> 00:11:07,460
want to talk about these more aggressive

00:11:05,420 --> 00:11:09,200
testing and this is what they recommend

00:11:07,460 --> 00:11:12,020
most people use to kind of cut their

00:11:09,200 --> 00:11:14,780
teeth automated testing so visual

00:11:12,020 --> 00:11:18,020
regression testing is really neat it

00:11:14,780 --> 00:11:19,550
will go in use a headless browser if you

00:11:18,020 --> 00:11:22,190
didn't know that this chrome actually

00:11:19,550 --> 00:11:24,200
has a headless mode so I'm reading from

00:11:22,190 --> 00:11:26,330
right now but it can actually view a web

00:11:24,200 --> 00:11:29,780
page and not display it on the screen

00:11:26,330 --> 00:11:32,510
it's just parsing the HTML right so you

00:11:29,780 --> 00:11:34,820
can go in do that and rather then

00:11:32,510 --> 00:11:37,310
display it on the screen you can save a

00:11:34,820 --> 00:11:40,010
screenshot and then it can go in and

00:11:37,310 --> 00:11:41,840
check the live site take screenshots of

00:11:40,010 --> 00:11:44,930
that take screenshots of your staging

00:11:41,840 --> 00:11:46,640
site and this is the things we're doing

00:11:44,930 --> 00:11:49,070
mmediately pulling these up and

00:11:46,640 --> 00:11:51,020
comparing them side by side in figuring

00:11:49,070 --> 00:11:54,260
out the difference there's no reason

00:11:51,020 --> 00:11:57,050
that she can't do this and so there's a

00:11:54,260 --> 00:12:02,650
tool called backstop j/s that helps you

00:11:57,050 --> 00:12:02,650
automate this process and so actually I

00:12:02,710 --> 00:12:07,850
built a little note app that uses

00:12:05,330 --> 00:12:09,800
backstop j/s and we can just run it so

00:12:07,850 --> 00:12:12,449
I've put it in a list of a couple of

00:12:09,800 --> 00:12:14,999
sites I picked the one

00:12:12,449 --> 00:12:17,399
and I only have the URL of my life site

00:12:14,999 --> 00:12:19,579
and my staging site saved and it is

00:12:17,399 --> 00:12:22,259
actually opening instances of chrome

00:12:19,579 --> 00:12:24,659
looking at the pages I've defined

00:12:22,259 --> 00:12:27,149
different viewports I've defined for you

00:12:24,659 --> 00:12:30,119
know desktop mobile so this process that

00:12:27,149 --> 00:12:32,399
we used to do manually and even if it

00:12:30,119 --> 00:12:34,379
only took me 10 minutes 10 minutes of

00:12:32,399 --> 00:12:37,199
work after every single change I think

00:12:34,379 --> 00:12:39,659
it's still a big version but now if I

00:12:37,199 --> 00:12:42,169
can just pop up with my terminal and run

00:12:39,659 --> 00:12:44,789
the script it took less than a minute

00:12:42,169 --> 00:12:47,009
generates this nice report actually

00:12:44,789 --> 00:12:49,799
going to click it's showing me the

00:12:47,009 --> 00:12:53,129
difference in years where I'm not

00:12:49,799 --> 00:12:55,470
spending even the mental energy to do

00:12:53,129 --> 00:12:58,769
that anymore all I'm doing is reviewing

00:12:55,470 --> 00:13:02,159
the report and going look okay before

00:12:58,769 --> 00:13:05,309
after looks like that might be a little

00:13:02,159 --> 00:13:07,559
bit up tiny to go tweak some CSS I know

00:13:05,309 --> 00:13:09,929
that it's on this template in this spot

00:13:07,559 --> 00:13:11,789
so rather than wasting my time and

00:13:09,929 --> 00:13:13,589
energy trying to find the people of the

00:13:11,789 --> 00:13:16,199
haystack that may or may not be there

00:13:13,589 --> 00:13:18,239
let the tool do that I will do the

00:13:16,199 --> 00:13:21,179
analysis and make the decision of is

00:13:18,239 --> 00:13:23,489
this acceptable or not and maybe it is

00:13:21,179 --> 00:13:25,619
maybe it finds the difference but it's

00:13:23,489 --> 00:13:28,799
an acceptable one and then you deploy

00:13:25,619 --> 00:13:31,499
the update canoeing and so that does

00:13:28,799 --> 00:13:33,680
make it feasible for us to get to that

00:13:31,499 --> 00:13:36,350
point where we're testing after every

00:13:33,680 --> 00:13:38,180
change because I can run updates right

00:13:36,350 --> 00:13:40,910
and fix the menu and if I don't have to

00:13:38,180 --> 00:13:42,589
do all that other stuff manually that's

00:13:40,910 --> 00:13:44,720
gonna take a good chunk of time if I can

00:13:42,589 --> 00:13:46,670
read a script and you kind of automate

00:13:44,720 --> 00:13:49,820
that process then we can do it on every

00:13:46,670 --> 00:13:51,950
change catch the bugs early and fix them

00:13:49,820 --> 00:13:54,260
before we get this giant stinking server

00:13:51,950 --> 00:13:58,880
with 20 things in it we don't know where

00:13:54,260 --> 00:14:01,670
the issue is so that's gonna keep going

00:13:58,880 --> 00:14:04,370
down this path we use version control

00:14:01,670 --> 00:14:07,700
hopefully using version control on your

00:14:04,370 --> 00:14:10,399
projects github get back bitbucket tons

00:14:07,700 --> 00:14:13,610
of them out there if you're still if

00:14:10,399 --> 00:14:15,950
you're submitting items to wordpress.org

00:14:13,610 --> 00:14:18,320
or working with WordPress core virtually

00:14:15,950 --> 00:14:21,680
you're still using SPN but whatever it

00:14:18,320 --> 00:14:23,980
is hopefully using version control there

00:14:21,680 --> 00:14:29,660
are actually continuous integration

00:14:23,980 --> 00:14:31,820
providers that will help you map these

00:14:29,660 --> 00:14:35,180
scripts in this automation to your

00:14:31,820 --> 00:14:37,580
version control which is really great so

00:14:35,180 --> 00:14:40,160
bitbucket has their pipelines get left

00:14:37,580 --> 00:14:41,600
as their own you can use circles yeah it

00:14:40,160 --> 00:14:44,270
doesn't matter what you want to use you

00:14:41,600 --> 00:14:48,170
know go check them out figure out which

00:14:44,270 --> 00:14:49,700
one's good a good fit for you but they

00:14:48,170 --> 00:14:52,880
are all pretty similar in what they do

00:14:49,700 --> 00:14:55,279
so here was my ideal workflow that I

00:14:52,880 --> 00:14:57,110
thought of in my head and I was actually

00:14:55,279 --> 00:14:59,839
able to use these tools they have a

00:14:57,110 --> 00:15:01,760
configuration file that you define these

00:14:59,839 --> 00:15:05,089
are the things I want to do this is the

00:15:01,760 --> 00:15:06,680
order I want to do them in and you write

00:15:05,089 --> 00:15:08,270
those scripts and it takes care of

00:15:06,680 --> 00:15:10,790
actually running them so we can do

00:15:08,270 --> 00:15:12,930
things like build production assets if

00:15:10,790 --> 00:15:15,210
you're writing SAS and that

00:15:12,930 --> 00:15:17,450
we compiled a CSS you might be using

00:15:15,210 --> 00:15:20,460
right there go for something locally

00:15:17,450 --> 00:15:22,740
instead of doing that on your own now

00:15:20,460 --> 00:15:26,279
that can be outputted you just send your

00:15:22,740 --> 00:15:28,350
SAS files github CI server run to you

00:15:26,279 --> 00:15:31,230
know give it the command you by the SAS

00:15:28,350 --> 00:15:34,860
cons and it runs it automatically it can

00:15:31,230 --> 00:15:37,860
handle deployments so you can send your

00:15:34,860 --> 00:15:41,430
files to your staging server with git

00:15:37,860 --> 00:15:43,350
SSH SFTP whatever that is you can

00:15:41,430 --> 00:15:45,360
automate that and this is actually a

00:15:43,350 --> 00:15:47,700
screenshot here from what am I giving up

00:15:45,360 --> 00:15:50,550
repos where then I called back to the

00:15:47,700 --> 00:15:53,160
hiphop API post a link to where it's

00:15:50,550 --> 00:15:58,350
been shipped so now when I open a pull

00:15:53,160 --> 00:16:00,570
request I don't have to even log in to

00:15:58,350 --> 00:16:03,480
the panthéon dashboard and spin up a new

00:16:00,570 --> 00:16:04,860
environment it's happening on that so

00:16:03,480 --> 00:16:10,220
taking these things that we're spending

00:16:04,860 --> 00:16:13,950
time on innovating so that every PR

00:16:10,220 --> 00:16:16,410
comes in this actually pull request was

00:16:13,950 --> 00:16:19,589
a request to change the color of the

00:16:16,410 --> 00:16:21,330
sidebar so it detected that that's where

00:16:19,589 --> 00:16:24,870
there was a visual difference that's

00:16:21,330 --> 00:16:27,410
fine visual aggression does have its

00:16:24,870 --> 00:16:30,900
limits though so if you're working with

00:16:27,410 --> 00:16:33,000
dynamic content and the banner that

00:16:30,900 --> 00:16:36,480
rotates and ad that changes on every

00:16:33,000 --> 00:16:38,100
page there are ways to ignore those but

00:16:36,480 --> 00:16:41,580
then you're not testing against them and

00:16:38,100 --> 00:16:44,820
if your ads aren't working that leaves

00:16:41,580 --> 00:16:46,260
an issue so it still stay to times if

00:16:44,820 --> 00:16:49,050
you have to go template the template it

00:16:46,260 --> 00:16:50,100
it won't catch I think of it as like a

00:16:49,050 --> 00:16:51,570
big

00:16:50,100 --> 00:16:54,330
you know it's gonna catch those things

00:16:51,570 --> 00:16:56,490
but some stuff gets slipped through but

00:16:54,330 --> 00:16:58,080
you can add more text on top of that so

00:16:56,490 --> 00:17:01,080
there's tons of other tests you can run

00:16:58,080 --> 00:17:04,020
browser tests unit tests performance

00:17:01,080 --> 00:17:07,050
tests tons of things basically you are

00:17:04,020 --> 00:17:08,880
to add enough automated tests that

00:17:07,050 --> 00:17:09,990
you're comfortable when they all pass

00:17:08,880 --> 00:17:12,930
we're not going to get that phone call

00:17:09,990 --> 00:17:14,940
to you again what ever think of those

00:17:12,930 --> 00:17:16,920
mission-critical things so for a

00:17:14,940 --> 00:17:19,709
nonprofit that might be their donation

00:17:16,920 --> 00:17:22,170
for what is that end that's most

00:17:19,709 --> 00:17:24,120
important are we talked about ads so

00:17:22,170 --> 00:17:26,400
have visual Russian is a nice baseline

00:17:24,120 --> 00:17:28,830
but the bigger outputs business critical

00:17:26,400 --> 00:17:30,870
website and test those things through

00:17:28,830 --> 00:17:33,630
e-commerce it's probably that channel

00:17:30,870 --> 00:17:36,510
works in a visual test that until you go

00:17:33,630 --> 00:17:38,040
to the shopping carts Brooke so you do

00:17:36,510 --> 00:17:39,690
have to add a few more tests on top of

00:17:38,040 --> 00:17:41,880
that but maybe regression gives us a

00:17:39,690 --> 00:17:43,890
nice baseline but if something is

00:17:41,880 --> 00:17:45,690
fundamentally wrong with the site it's

00:17:43,890 --> 00:17:47,910
probably going to show up in a visual

00:17:45,690 --> 00:17:49,260
way and then we can test for other

00:17:47,910 --> 00:17:52,860
things that might not show up in that

00:17:49,260 --> 00:17:55,560
way and then I look at other things I

00:17:52,860 --> 00:17:58,020
was doing manually like examining

00:17:55,560 --> 00:18:00,420
performance and I would only do this

00:17:58,020 --> 00:18:02,520
when there were you know performance

00:18:00,420 --> 00:18:05,040
issues I need to go in and debug

00:18:02,520 --> 00:18:06,770
well there's a tool called lighthouse

00:18:05,040 --> 00:18:09,920
you may or may not be from

00:18:06,770 --> 00:18:12,590
with Google it's built into Chrome but

00:18:09,920 --> 00:18:15,440
they also have a similar packaging event

00:18:12,590 --> 00:18:17,960
and it will audit your site and give you

00:18:15,440 --> 00:18:20,960
scores for things like accessibility SEO

00:18:17,960 --> 00:18:23,540
it also does one for performance so

00:18:20,960 --> 00:18:26,090
instead of me meaningfully opening the

00:18:23,540 --> 00:18:28,190
URL going into my dev console

00:18:26,090 --> 00:18:29,960
looking at this network trace and trying

00:18:28,190 --> 00:18:32,450
to figure out the site's performing

00:18:29,960 --> 00:18:35,360
that's not feasible for me to do after

00:18:32,450 --> 00:18:37,310
every change maybe it's part of that QA

00:18:35,360 --> 00:18:39,500
we're doing right before we go live but

00:18:37,310 --> 00:18:42,860
again if we can't issues there it's too

00:18:39,500 --> 00:18:44,630
late so now I can just run this

00:18:42,860 --> 00:18:46,850
lighthouse pool it will tell me my

00:18:44,630 --> 00:18:48,200
performance score so start thinking of

00:18:46,850 --> 00:18:50,900
ways you can wrap that into your

00:18:48,200 --> 00:18:53,270
workflow in my case it's when I hope in

00:18:50,900 --> 00:18:54,830
a pull request I'm going to run the

00:18:53,270 --> 00:18:57,380
performance report again to the live

00:18:54,830 --> 00:18:59,390
site and the code that's in the pull

00:18:57,380 --> 00:19:01,820
request and look at the difference and

00:18:59,390 --> 00:19:05,990
if the performance score decreases more

00:19:01,820 --> 00:19:08,240
than five I fail the test because I want

00:19:05,990 --> 00:19:11,920
to make sure that any codec introducing

00:19:08,240 --> 00:19:14,960
doesn't make the site less performant

00:19:11,920 --> 00:19:17,300
and this is what the continuous

00:19:14,960 --> 00:19:19,310
integration kind of UI looks like BAM

00:19:17,300 --> 00:19:20,300
you know we'll show you a rollup here

00:19:19,310 --> 00:19:23,120
you could go ahead and click on

00:19:20,300 --> 00:19:25,100
individual jobs but I have things like

00:19:23,120 --> 00:19:27,500
I'm going to build this thing I'm going

00:19:25,100 --> 00:19:30,250
to run code sniffing unit tests on the

00:19:27,500 --> 00:19:33,309
deployment I'm gonna do my visual test

00:19:30,250 --> 00:19:35,590
that's given to fight all these things

00:19:33,309 --> 00:19:38,020
you still have to put in work to write

00:19:35,590 --> 00:19:40,330
those tests and write the scripts but

00:19:38,020 --> 00:19:43,929
once you set it up then it's always

00:19:40,330 --> 00:19:46,809
there and test a pass allow you converge

00:19:43,929 --> 00:19:49,450
the PR and test the fail will actually

00:19:46,809 --> 00:19:53,289
block upon request and I don't know

00:19:49,450 --> 00:19:56,049
about you but it might be working on

00:19:53,289 --> 00:19:58,299
your own projects you know these things

00:19:56,049 --> 00:20:01,299
you should be testing that maybe you

00:19:58,299 --> 00:20:03,820
have some internal QA checklist that

00:20:01,299 --> 00:20:06,580
says go check these templates go run

00:20:03,820 --> 00:20:07,960
performance to Tesco do whatever what

00:20:06,580 --> 00:20:10,539
happens when you're really busy you

00:20:07,960 --> 00:20:11,890
bring in a contractor our is the code

00:20:10,539 --> 00:20:15,039
they're submitting gonna go through that

00:20:11,890 --> 00:20:17,110
same QA process we all work in open

00:20:15,039 --> 00:20:19,390
source software I work on a lot of open

00:20:17,110 --> 00:20:22,090
source projects as they contribute to

00:20:19,390 --> 00:20:24,880
somebody else's project for the first

00:20:22,090 --> 00:20:27,190
time I probably don't know what I should

00:20:24,880 --> 00:20:28,929
be testing on that project but I want

00:20:27,190 --> 00:20:31,000
what I want to work best on a project

00:20:28,929 --> 00:20:33,400
and I see something like this and all

00:20:31,000 --> 00:20:35,289
the checkmarks are green I know as a

00:20:33,400 --> 00:20:37,450
contributor that the code I'm sending is

00:20:35,289 --> 00:20:39,070
not reducing errors they know as a

00:20:37,450 --> 00:20:40,990
project maintainer because they're

00:20:39,070 --> 00:20:43,030
accepting is not introducing errors and

00:20:40,990 --> 00:20:44,890
nobody had to go do the work to figure

00:20:43,030 --> 00:20:46,960
it out because we've made the robusta

00:20:44,890 --> 00:20:54,070
Network and it happens on every single

00:20:46,960 --> 00:20:56,080
PR so you get that consistency and so it

00:20:54,070 --> 00:20:58,450
makes it feasible to get to that point

00:20:56,080 --> 00:20:59,220
where we're doing continuous testing

00:20:58,450 --> 00:21:01,080
with every

00:20:59,220 --> 00:21:02,490
because now if we open up or request

00:21:01,080 --> 00:21:04,650
that full suite of Testament

00:21:02,490 --> 00:21:05,909
automatically we don't have to spend

00:21:04,650 --> 00:21:08,580
depth time on it and we're going to

00:21:05,909 --> 00:21:10,440
catch those bikes list issues earlier

00:21:08,580 --> 00:21:12,690
we're going to be able to resolve that

00:21:10,440 --> 00:21:14,220
before we get to that point okay we're

00:21:12,690 --> 00:21:16,559
gonna do final QA on the speaking

00:21:14,220 --> 00:21:18,299
circuit before launch it takes all the

00:21:16,559 --> 00:21:20,640
stress all the worrying out of that

00:21:18,299 --> 00:21:23,429
because every piece of code that's gotta

00:21:20,640 --> 00:21:26,130
is already past this list of tests

00:21:23,429 --> 00:21:30,200
you're just doing one final run to make

00:21:26,130 --> 00:21:32,909
sure things are good for your life and

00:21:30,200 --> 00:21:34,409
so I've helped a lot of agencies of

00:21:32,909 --> 00:21:36,929
developers might have improved their

00:21:34,409 --> 00:21:38,480
workflow with automation I want to talk

00:21:36,929 --> 00:21:40,770
about some of those benefits so

00:21:38,480 --> 00:21:43,830
definitely reducing overhead is the

00:21:40,770 --> 00:21:47,309
biggest one if you're spending human now

00:21:43,830 --> 00:21:48,570
is doing something and you can not spend

00:21:47,309 --> 00:21:50,460
a few hours doing that you can

00:21:48,570 --> 00:21:53,190
reallocate those two things that are

00:21:50,460 --> 00:21:54,990
more billable more valuable our time is

00:21:53,190 --> 00:21:58,380
better spent actually writing the code

00:21:54,990 --> 00:22:01,919
then going in writing browser tests or a

00:21:58,380 --> 00:22:05,039
performance test or whatever you get

00:22:01,919 --> 00:22:06,750
consistency it might be that you have a

00:22:05,039 --> 00:22:09,780
senior developer on your team and

00:22:06,750 --> 00:22:12,630
they're really proficient with opening

00:22:09,780 --> 00:22:14,429
up you know dev tools and running the

00:22:12,630 --> 00:22:16,950
network stack traits and figuring out

00:22:14,429 --> 00:22:19,530
where the performance issues are we

00:22:16,950 --> 00:22:22,320
might have a junior death who's not as

00:22:19,530 --> 00:22:24,090
comfortable doing that and your QA list

00:22:22,320 --> 00:22:26,520
that everyone runs through says

00:22:24,090 --> 00:22:29,549
performance tests theirs might not be a

00:22:26,520 --> 00:22:31,440
story but if you actually automate that

00:22:29,549 --> 00:22:33,210
test and make it happen on every tank

00:22:31,440 --> 00:22:35,789
regardless of who makes the board West

00:22:33,210 --> 00:22:38,159
then your QA process that's consistent

00:22:35,789 --> 00:22:40,080
and it's not oh I forgot to check this

00:22:38,159 --> 00:22:41,460
template or I didn't test this as

00:22:40,080 --> 00:22:43,470
thoroughly as I should

00:22:41,460 --> 00:22:46,310
running out of time everything is

00:22:43,470 --> 00:22:49,500
happening on every single change and

00:22:46,310 --> 00:22:51,300
that mitigates a lot of risk if we're

00:22:49,500 --> 00:22:53,160
testing for a bigot we're testing

00:22:51,300 --> 00:22:54,810
Hoffman and we're doing it's more full

00:22:53,160 --> 00:22:57,780
staff you may have every single cook

00:22:54,810 --> 00:23:00,360
change then there is less risk that that

00:22:57,780 --> 00:23:03,210
final QA process is going to turn up

00:23:00,360 --> 00:23:06,240
issues and that gives confidence to you

00:23:03,210 --> 00:23:11,850
to your clients everyone working on the

00:23:06,240 --> 00:23:14,820
project that involved in the project and

00:23:11,850 --> 00:23:17,820
you get reliable communication if we

00:23:14,820 --> 00:23:20,580
think back to that pull request that has

00:23:17,820 --> 00:23:22,650
steps on this is the performances not

00:23:20,580 --> 00:23:25,050
just the person if you're doing QA

00:23:22,650 --> 00:23:27,270
Angeli may be a document that somewhere

00:23:25,050 --> 00:23:30,270
maybe I do we have internal checklist

00:23:27,270 --> 00:23:33,390
and sometimes doing a review they go in

00:23:30,270 --> 00:23:35,550
it passes to a merchant thing did anyone

00:23:33,390 --> 00:23:38,250
write down what that score was whether

00:23:35,550 --> 00:23:39,840
you know so have that reliable

00:23:38,250 --> 00:23:42,720
communication and things are documented

00:23:39,840 --> 00:23:48,240
because we're actually having a cabinet

00:23:42,720 --> 00:23:50,970
nominated fashion so now I want to go

00:23:48,240 --> 00:23:54,810
back to our updating process so think a

00:23:50,970 --> 00:23:57,270
little deeper about that and how can we

00:23:54,810 --> 00:23:59,220
take some of this automation because

00:23:57,270 --> 00:24:01,650
they're gonna go request is great

00:23:59,220 --> 00:24:04,110
we're gonna catch bugs earlier we're

00:24:01,650 --> 00:24:06,300
going to catch up more often and a lot

00:24:04,110 --> 00:24:07,620
of people will stop there and I wanted

00:24:06,300 --> 00:24:10,380
to push it a little further and think

00:24:07,620 --> 00:24:12,180
about how else you can utilize this and

00:24:10,380 --> 00:24:14,100
solve like WordPress updates is

00:24:12,180 --> 00:24:17,480
something we all spend a lot of time

00:24:14,100 --> 00:24:20,630
doing and honestly I have demo sites

00:24:17,480 --> 00:24:22,070
I'm here speaking at WordCamp I'm not

00:24:20,630 --> 00:24:22,880
logging in to my sites to check for

00:24:22,070 --> 00:24:24,620
updates today

00:24:22,880 --> 00:24:26,990
maybe there's a security update that

00:24:24,620 --> 00:24:31,700
probably should go out today so how can

00:24:26,990 --> 00:24:34,730
I better handle that situation and so

00:24:31,700 --> 00:24:38,020
our WordPress update steps is first name

00:24:34,730 --> 00:24:41,179
check I are there even updates available

00:24:38,020 --> 00:24:42,710
and if there's nothing then you know we

00:24:41,179 --> 00:24:43,700
can just let the client know hey you're

00:24:42,710 --> 00:24:46,360
on mate explain

00:24:43,700 --> 00:24:50,960
we're checking for updates just reminder

00:24:46,360 --> 00:24:53,600
if there are things available then get

00:24:50,960 --> 00:24:56,000
range music version control create a new

00:24:53,600 --> 00:24:57,710
environment apply those updates and

00:24:56,000 --> 00:24:59,120
we're going to do our visual check and

00:24:57,710 --> 00:25:00,679
then we're going to test those critical

00:24:59,120 --> 00:25:04,400
items like the donation form and

00:25:00,679 --> 00:25:06,530
shopping cart or whatever and so these

00:25:04,400 --> 00:25:09,590
are things that I log into and I have to

00:25:06,530 --> 00:25:12,080
actually go do these things and then if

00:25:09,590 --> 00:25:15,770
I find issues after everyone updates

00:25:12,080 --> 00:25:19,370
like our search icon there then I have

00:25:15,770 --> 00:25:22,040
to go in and fix those issues but if

00:25:19,370 --> 00:25:26,630
everything looks good I'm going to do my

00:25:22,040 --> 00:25:28,630
QA then you know I can merge the code

00:25:26,630 --> 00:25:32,059
and I can actually deploy those updates

00:25:28,630 --> 00:25:35,510
and maybe Tyler my colleagues in slack

00:25:32,059 --> 00:25:37,549
hey I updated the site and then this red

00:25:35,510 --> 00:25:39,980
box this is kind of where you run in the

00:25:37,549 --> 00:25:43,280
dread and some issues now after we

00:25:39,980 --> 00:25:46,730
conduct for all sites let's say I have

00:25:43,280 --> 00:25:48,440
five that doesn't seem too bad I have to

00:25:46,730 --> 00:25:51,440
log into five sites and do this

00:25:48,440 --> 00:25:55,640
every day what happens if you manage a

00:25:51,440 --> 00:25:59,330
dozen fifty a hundred right it does not

00:25:55,640 --> 00:26:01,790
scale very well in thinking about

00:25:59,330 --> 00:26:03,950
WordPress updates modern software

00:26:01,790 --> 00:26:06,560
actually auto updates and this was

00:26:03,950 --> 00:26:08,540
interesting to me because of use you

00:26:06,560 --> 00:26:11,360
know truck auxochromes or slack or

00:26:08,540 --> 00:26:13,730
whatever I don't know what version of

00:26:11,360 --> 00:26:16,130
Chrome I think it just kind of updates

00:26:13,730 --> 00:26:17,840
and things are good and that's great for

00:26:16,130 --> 00:26:19,220
security functionality you're always

00:26:17,840 --> 00:26:21,920
getting the latest greatest stuff

00:26:19,220 --> 00:26:26,570
keeping it secure WordPress has

00:26:21,920 --> 00:26:29,780
automated updates and core but there's

00:26:26,570 --> 00:26:33,350
some issues with that your site has to

00:26:29,780 --> 00:26:35,720
be writable in production and it's just

00:26:33,350 --> 00:26:38,660
gonna update there's no QA process so

00:26:35,720 --> 00:26:40,370
even though minor updates are not super

00:26:38,660 --> 00:26:43,730
risky for breaking things there could be

00:26:40,370 --> 00:26:46,760
issues but the bigger thing for me is

00:26:43,730 --> 00:26:49,280
plugins and themes are not updated which

00:26:46,760 --> 00:26:51,080
WordPress updates don't have to kiss

00:26:49,280 --> 00:26:52,610
often as plugins and themes it seems

00:26:51,080 --> 00:26:56,810
like every time I log in if I say

00:26:52,610 --> 00:27:00,410
there's a plugin or a team update and so

00:26:56,810 --> 00:27:02,660
we need to automate those updates but we

00:27:00,410 --> 00:27:04,220
also need to test them we can't just you

00:27:02,660 --> 00:27:05,810
know click update all and cross our

00:27:04,220 --> 00:27:07,520
fingers in production right that's the

00:27:05,810 --> 00:27:09,050
reason we have staging servers and we're

00:27:07,520 --> 00:27:11,510
testing things as we don't want to break

00:27:09,050 --> 00:27:13,910
the production site so we can't read the

00:27:11,510 --> 00:27:16,160
best of both worlds is we need automatic

00:27:13,910 --> 00:27:18,320
updates but we also need to apply it

00:27:16,160 --> 00:27:20,960
automatic testing to make sure that

00:27:18,320 --> 00:27:23,330
those updates wedlock so if we look at

00:27:20,960 --> 00:27:26,660
this process is thing where you're doing

00:27:23,330 --> 00:27:27,620
manually actually spitting up a grant

00:27:26,660 --> 00:27:29,270
environment

00:27:27,620 --> 00:27:31,040
applying updates

00:27:29,270 --> 00:27:33,380
the visual check where we kind of seen

00:27:31,040 --> 00:27:35,300
that these tools exist for a lot of

00:27:33,380 --> 00:27:35,870
these things I wouldn't check your

00:27:35,300 --> 00:27:38,300
updates

00:27:35,870 --> 00:27:41,450
I can use wcl item and it will tell me

00:27:38,300 --> 00:27:44,000
if I have updates I could use WP CLI to

00:27:41,450 --> 00:27:45,500
run the updates the visual check we just

00:27:44,000 --> 00:27:48,080
saw that with the visual regression

00:27:45,500 --> 00:27:49,370
testing tool we can automate that there

00:27:48,080 --> 00:27:51,860
other tests you can add for those

00:27:49,370 --> 00:27:54,170
business critical pieces and so if we

00:27:51,860 --> 00:27:57,350
get to the point where we can automate

00:27:54,170 --> 00:28:00,050
all of these steps narrow repeat for all

00:27:57,350 --> 00:28:02,570
sites is not that bad because automation

00:28:00,050 --> 00:28:04,370
skills guess what

00:28:02,570 --> 00:28:06,950
instead of medium blogging in the each

00:28:04,370 --> 00:28:10,250
site during this process manually it

00:28:06,950 --> 00:28:12,410
might take me hours if I totally

00:28:10,250 --> 00:28:15,530
automated and let the robots handle this

00:28:12,410 --> 00:28:19,280
work they can test every single site in

00:28:15,530 --> 00:28:22,610
my portfolio at the same time it can

00:28:19,280 --> 00:28:25,360
scale out horizontally so whether I had

00:28:22,610 --> 00:28:29,420
20 sites 100 sites it doesn't matter

00:28:25,360 --> 00:28:32,180
because they're all being tested at the

00:28:29,420 --> 00:28:34,400
same time we define these steps and then

00:28:32,180 --> 00:28:37,070
it it'll just run them on whatever

00:28:34,400 --> 00:28:40,840
second talk to so actually have this

00:28:37,070 --> 00:28:43,580
running in production for over a year

00:28:40,840 --> 00:28:46,160
outlining those steps the steps I just

00:28:43,580 --> 00:28:48,470
outlined automated then I post the

00:28:46,160 --> 00:28:51,530
results back to slack and we can

00:28:48,470 --> 00:28:54,590
actually go look here's my slack channel

00:28:51,530 --> 00:28:57,290
this is on a cron running every four

00:28:54,590 --> 00:28:59,600
hours it goes through the sites that I'm

00:28:57,290 --> 00:29:01,430
responsible for maintaining applies

00:28:59,600 --> 00:29:05,180
updates if they're available runs all

00:29:01,430 --> 00:29:07,910
the tests and here's one that failed so

00:29:05,180 --> 00:29:10,360
I was filled into the report and now my

00:29:07,910 --> 00:29:13,360
job is not going in and checking

00:29:10,360 --> 00:29:16,950
trying to link their issues my job is to

00:29:13,360 --> 00:29:22,060
go in and if the tests do find something

00:29:16,950 --> 00:29:25,330
to go look at and so this here we can

00:29:22,060 --> 00:29:27,910
see this change that the spacing around

00:29:25,330 --> 00:29:29,770
this gallery and these image has changed

00:29:27,910 --> 00:29:31,210
and this was probably a Gutenberg

00:29:29,770 --> 00:29:33,520
updated practice

00:29:31,210 --> 00:29:36,910
I ready Guttenberg on the site to test

00:29:33,520 --> 00:29:39,160
out the plugin they're really coming out

00:29:36,910 --> 00:29:41,050
with a release about every two weeks and

00:29:39,160 --> 00:29:42,970
so now all I have to do is make the

00:29:41,050 --> 00:29:45,730
decision about whether the spacing

00:29:42,970 --> 00:29:49,120
change is acceptable or not if it is

00:29:45,730 --> 00:29:51,550
I just log in and click accept updates

00:29:49,120 --> 00:29:53,590
and it moves on to the playing them if

00:29:51,550 --> 00:29:56,230
it's not a day then I can go ahead and

00:29:53,590 --> 00:29:59,500
update the CSS and give that spacing

00:29:56,230 --> 00:30:01,840
back to where it was previously and then

00:29:59,500 --> 00:30:04,410
I just log in click the button in tell

00:30:01,840 --> 00:30:10,330
to continue and it will deploy with my

00:30:04,410 --> 00:30:11,860
big CSS in a public test pass I just

00:30:10,330 --> 00:30:13,780
give this next screen message that says

00:30:11,860 --> 00:30:18,760
hey Mitch were deployed to the site that

00:30:13,780 --> 00:30:23,020
way and so the hours and hours members

00:30:18,760 --> 00:30:25,090
are spending during this I can now spend

00:30:23,020 --> 00:30:28,300
doing other things more valuable were

00:30:25,090 --> 00:30:29,950
consulting with our clients building

00:30:28,300 --> 00:30:31,810
them but with all these things that you

00:30:29,950 --> 00:30:34,090
know India is really paying me to do

00:30:31,810 --> 00:30:35,950
that work not flogging a bunch of work

00:30:34,090 --> 00:30:37,740
websites I'm not the most valuable thing

00:30:35,950 --> 00:30:43,050
that we do

00:30:37,740 --> 00:30:46,000
and so to summarize adopting automation

00:30:43,050 --> 00:30:47,920
we need to test not every change to

00:30:46,000 --> 00:30:49,480
really attach things not how that

00:30:47,920 --> 00:30:52,429
stressful

00:30:49,480 --> 00:30:55,190
it's not feasible to do that

00:30:52,429 --> 00:30:57,289
it just doesn't scale but we can

00:30:55,190 --> 00:31:01,090
automate those things that automation

00:30:57,289 --> 00:31:03,830
does feel it's upfront work to do that

00:31:01,090 --> 00:31:05,270
but you're enforcing those rules and

00:31:03,830 --> 00:31:07,760
you're going to get that consistent

00:31:05,270 --> 00:31:09,679
testing every single time and I really

00:31:07,760 --> 00:31:11,570
do believe that the long term benefits

00:31:09,679 --> 00:31:12,980
they're going to outweigh the learning

00:31:11,570 --> 00:31:14,120
curve in the setup you're gonna have to

00:31:12,980 --> 00:31:21,919
do to get this going

00:31:14,120 --> 00:31:23,720
because once it's up and running and all

00:31:21,919 --> 00:31:25,700
of these things we talked about just to

00:31:23,720 --> 00:31:30,320
recap what the benefits the biggest one

00:31:25,700 --> 00:31:33,590
for me is that people on Team 2 have

00:31:30,320 --> 00:31:36,980
adopted automation are happier right

00:31:33,590 --> 00:31:39,500
nobody's happy manually opening up dev

00:31:36,980 --> 00:31:41,299
tools and modding perform and you may be

00:31:39,500 --> 00:31:44,270
but if you have to do that times 30

00:31:41,299 --> 00:31:47,120
sites like every other day someone wants

00:31:44,270 --> 00:31:49,640
to do that so offloading that mundane

00:31:47,120 --> 00:31:52,100
kind of repetitive work from your

00:31:49,640 --> 00:31:53,690
developers allows them to do the work

00:31:52,100 --> 00:31:55,820
that they really want to be doing and

00:31:53,690 --> 00:31:58,010
having a happier healthier team with a

00:31:55,820 --> 00:32:01,970
better workflow I think makes it over

00:31:58,010 --> 00:32:06,230
there and I do kind of want to end with

00:32:01,970 --> 00:32:08,090
automation is a journey so it took me I

00:32:06,230 --> 00:32:09,950
found this running for over here but it

00:32:08,090 --> 00:32:13,070
also took me over a year to build this

00:32:09,950 --> 00:32:15,559
kind of automated update process and so

00:32:13,070 --> 00:32:18,080
I started with you know just writing a

00:32:15,559 --> 00:32:20,809
script that had WP CLI commands that

00:32:18,080 --> 00:32:23,419
would go do a site check for updates and

00:32:20,809 --> 00:32:26,279
a flight in the 1930 way and then I

00:32:23,419 --> 00:32:28,799
learned about very well

00:32:26,279 --> 00:32:31,859
that visual testing in things that

00:32:28,799 --> 00:32:35,269
always go well I had it set up as like

00:32:31,859 --> 00:32:38,309
sweet visual test pass I can ship this

00:32:35,269 --> 00:32:44,279
well turns out the performance went down

00:32:38,309 --> 00:32:49,320
their point percent on site because well

00:32:44,279 --> 00:32:51,599
no I did it takes a while to build up

00:32:49,320 --> 00:32:54,269
enough tests that you can be confident

00:32:51,599 --> 00:32:56,609
when they all pass it you know nothing's

00:32:54,269 --> 00:32:58,440
gone wrong so definitely it's a journey

00:32:56,609 --> 00:33:00,809
start automating one piece so if you

00:32:58,440 --> 00:33:02,700
automate the visual test maybe you're

00:33:00,809 --> 00:33:05,099
still testing the donation for the

00:33:02,700 --> 00:33:06,809
shopping cart being clean but you can do

00:33:05,099 --> 00:33:09,330
that because now you're not spending

00:33:06,809 --> 00:33:10,769
time doing the visual check right and

00:33:09,330 --> 00:33:12,809
then with those at that time you're

00:33:10,769 --> 00:33:14,339
saving invested more automation and it

00:33:12,809 --> 00:33:16,499
kind of just snowballs to the point

00:33:14,339 --> 00:33:20,549
where you can automate a large amounts

00:33:16,499 --> 00:33:25,259
of your work and you have some resources

00:33:20,549 --> 00:33:28,320
here so I have an example repository

00:33:25,259 --> 00:33:30,749
with the auto-update github it's time to

00:33:28,320 --> 00:33:32,580
Pantheon because the sex I maintain

00:33:30,749 --> 00:33:34,049
around here yeah you will probably have

00:33:32,580 --> 00:33:36,629
to do some tweaking to get it working

00:33:34,049 --> 00:33:38,940
somewhere else but all the visual

00:33:36,629 --> 00:33:41,969
testing WPC like commands to read that

00:33:38,940 --> 00:33:44,070
they thought those things are there and

00:33:41,969 --> 00:33:45,659
then the automated workflow example this

00:33:44,070 --> 00:33:48,690
is one where you open employer requests

00:33:45,659 --> 00:33:51,029
on github and then it runs a suite of

00:33:48,690 --> 00:33:55,229
tests does you know build society does

00:33:51,029 --> 00:33:57,050
deployment all those things it just some

00:33:55,229 --> 00:33:59,690
tools I generally

00:33:57,050 --> 00:34:02,870
and I started exploring the stuff and

00:33:59,690 --> 00:34:06,020
some blog posts my favorite one on this

00:34:02,870 --> 00:34:08,360
list is probably Karl alexander's twit

00:34:06,020 --> 00:34:10,520
press you might know Matt he has a great

00:34:08,360 --> 00:34:12,470
post on getting started with like CIA

00:34:10,520 --> 00:34:18,169
automation for WordPress it's definitely

00:34:12,470 --> 00:34:20,840
worth read so that's all I have thank

00:34:18,169 --> 00:34:23,240
you very much again me Taylor I mean we

00:34:20,840 --> 00:34:25,940
did all the slides as a link and we have

00:34:23,240 --> 00:34:27,970
plenty of time for some questions if you

00:34:25,940 --> 00:34:27,970
have

00:34:31,880 --> 00:34:35,340
[Applause]

00:35:10,410 --> 00:35:13,600
[Music]

00:35:14,680 --> 00:35:20,900
an error logging lot and it's going to

00:35:19,400 --> 00:35:35,210
take a whole recipe page you don't

00:35:20,900 --> 00:35:37,940
really need to know that yeah so cool I

00:35:35,210 --> 00:35:39,950
like this called back stop yes it uses

00:35:37,940 --> 00:35:42,080
Hitler's chrome and puppeteer the other

00:35:39,950 --> 00:35:44,180
hood but rather than writing something

00:35:42,080 --> 00:35:47,470
like crazy have this chrome community

00:35:44,180 --> 00:36:00,530
yourself you define a config file and

00:35:47,470 --> 00:36:02,090
actually so you define things like you

00:36:00,530 --> 00:36:06,290
know we can delay here before we take

00:36:02,090 --> 00:36:08,540
screenshots my acceptable threshold was

00:36:06,290 --> 00:36:13,160
point one so the visual difference is

00:36:08,540 --> 00:36:17,630
more than 0.1% it fails the test but I

00:36:13,160 --> 00:36:20,810
can go in and define different scenarios

00:36:17,630 --> 00:36:23,630
and things and one thing you can do here

00:36:20,810 --> 00:36:26,240
is selectors so I'm selecting the

00:36:23,630 --> 00:36:28,490
document which is the entire image you

00:36:26,240 --> 00:36:30,380
can select by a specificity of ID for

00:36:28,490 --> 00:36:32,570
example so if you want to do a visual

00:36:30,380 --> 00:36:33,980
test of just one can put it as long as

00:36:32,570 --> 00:36:36,109
you have CSS

00:36:33,980 --> 00:36:41,200
get at it then you can definitely do

00:36:36,109 --> 00:36:41,200
that yeah

00:36:54,390 --> 00:36:57,489
[Music]

00:37:07,720 --> 00:37:11,000
[Music]

00:37:25,990 --> 00:37:29,150
[Music]

00:37:44,880 --> 00:37:53,490
I do but the tests really don't care

00:37:49,440 --> 00:37:55,890
where the issue is so if an issue is I

00:37:53,490 --> 00:37:58,770
forgot a semicolon in PHP or the issue

00:37:55,890 --> 00:38:00,690
isn't setting it's incorrect and a

00:37:58,770 --> 00:38:03,840
plug-in the tests are just going to

00:38:00,690 --> 00:38:05,940
alert you that something's wrong we're

00:38:03,840 --> 00:38:10,320
asking about the process of actually

00:38:05,940 --> 00:38:12,420
syncing it sounds like what you talked

00:38:10,320 --> 00:38:18,450
about here is mainly pushing the code

00:38:12,420 --> 00:38:22,220
how do you push configuration to make

00:38:18,450 --> 00:38:26,070
this automated process work

00:38:22,220 --> 00:38:28,560
yeah so with updates I'm typically not

00:38:26,070 --> 00:38:30,960
changing the plug-in setting it's like I

00:38:28,560 --> 00:38:32,730
don't update a plug-in and then going in

00:38:30,960 --> 00:38:36,330
through thoughts behind right I just run

00:38:32,730 --> 00:38:41,190
the update if you are making a larger

00:38:36,330 --> 00:38:43,200
change and you need to get the database

00:38:41,190 --> 00:38:44,730
changes from your snake and Psyche life

00:38:43,200 --> 00:38:46,380
site that's just a tough issue in

00:38:44,730 --> 00:38:48,330
general and there's lots of people that

00:38:46,380 --> 00:38:50,610
have tried to solve this kind of syncing

00:38:48,330 --> 00:38:52,770
and haven't been able to do it there are

00:38:50,610 --> 00:38:55,410
like used advanced custom fields for

00:38:52,770 --> 00:38:57,300
example they have a feature where you

00:38:55,410 --> 00:38:59,010
can export the configuration to JSON

00:38:57,300 --> 00:39:01,140
files and then you can commit a

00:38:59,010 --> 00:39:04,560
diversion control you can play along

00:39:01,140 --> 00:39:06,900
with your code and then excuse me what

00:39:04,560 --> 00:39:11,070
you get to the live site you just import

00:39:06,900 --> 00:39:12,870
from that JSON so I hope that more

00:39:11,070 --> 00:39:15,500
plugins and things in WordPress go with

00:39:12,870 --> 00:39:17,630
that direction that you

00:39:15,500 --> 00:39:20,090
you know kid I haven't from the database

00:39:17,630 --> 00:39:23,440
that actually out into code that way you

00:39:20,090 --> 00:39:26,030
can play them but unfortunately for the

00:39:23,440 --> 00:39:29,000
large part of WordPress that's not the

00:39:26,030 --> 00:39:30,530
case and you can't just shove your time

00:39:29,000 --> 00:39:33,440
your database from staging to live

00:39:30,530 --> 00:39:37,010
because you know you don't can't don't

00:39:33,440 --> 00:39:48,890
know right here like this case in your

00:39:37,010 --> 00:39:51,650
stanky so typically what I'll do is as

00:39:48,890 --> 00:39:53,270
part of the the process is copy the

00:39:51,650 --> 00:39:56,780
production database back down to the

00:39:53,270 --> 00:39:59,480
staging but then you know if I have a

00:39:56,780 --> 00:40:01,700
plugin that I don't know it's an

00:39:59,480 --> 00:40:04,220
e-commerce site and then I need if I'm

00:40:01,700 --> 00:40:06,470
going to test the cart checkout I need

00:40:04,220 --> 00:40:08,420
to switch switch into test mode you

00:40:06,470 --> 00:40:10,010
define in schneps so we copy the

00:40:08,420 --> 00:40:11,330
production database from where I know

00:40:10,010 --> 00:40:13,430
these are the things that I need to

00:40:11,330 --> 00:40:15,680
change I'm going to make sure that this

00:40:13,430 --> 00:40:17,630
plugin is in testament notice and you

00:40:15,680 --> 00:40:19,850
just define those parameters make sure

00:40:17,630 --> 00:40:22,359
that that option is updated before you

00:40:19,850 --> 00:40:22,359
run tests

00:40:24,280 --> 00:40:31,190
I'm not directly with sequel I use WP

00:40:27,619 --> 00:40:34,000
CLI block I try not to do direct queries

00:40:31,190 --> 00:40:34,000
if I can help it

00:41:02,410 --> 00:41:05,719
[Applause]

00:41:16,840 --> 00:41:22,970
yes you could you're gonna have to put

00:41:20,930 --> 00:41:24,440
in more work like I wrote it alone they

00:41:22,970 --> 00:41:26,360
would have that around the command line

00:41:24,440 --> 00:41:29,060
you could probably write a more robust

00:41:26,360 --> 00:41:31,640
path with the GUI if you want you there

00:41:29,060 --> 00:41:34,190
actually I'm using you know open source

00:41:31,640 --> 00:41:36,440
project that like a lot of things you

00:41:34,190 --> 00:41:39,770
can do it yourself but it takes time and

00:41:36,440 --> 00:41:41,450
energy or there's services that your

00:41:39,770 --> 00:41:43,670
clients could sign up for and they will

00:41:41,450 --> 00:41:46,100
do these visual tests for them give them

00:41:43,670 --> 00:41:48,410
the nice UI but they might have to pay

00:41:46,100 --> 00:41:52,010
final ten bucks a month or something

00:41:48,410 --> 00:41:54,530
right those sorts of things if you do

00:41:52,010 --> 00:41:58,160
automate like we saw all the test retina

00:41:54,530 --> 00:42:00,620
when a forward West is open if you can

00:41:58,160 --> 00:42:03,350
build that into your project scope that

00:42:00,620 --> 00:42:06,020
we will set up these automated tests for

00:42:03,350 --> 00:42:08,450
you so that when we leave you know if

00:42:06,020 --> 00:42:12,490
you run through this process these

00:42:08,450 --> 00:42:12,490
things will still be tested

00:42:20,980 --> 00:42:24,099
[Music]

00:42:36,020 --> 00:42:45,660
so you can write tests that do login to

00:42:41,130 --> 00:42:47,730
the admin so we're using necklace Chrome

00:42:45,660 --> 00:42:50,880
and so you can actually authenticate

00:42:47,730 --> 00:42:53,250
with WordPress and login in my case I'm

00:42:50,880 --> 00:42:55,320
just testing the front-end after

00:42:53,250 --> 00:42:59,730
plugging updates but you could

00:42:55,320 --> 00:43:11,210
definitely write test actually have more

00:42:59,730 --> 00:43:14,310
example here so one of the links was to

00:43:11,210 --> 00:43:17,550
in the resources is to this repository

00:43:14,310 --> 00:43:24,599
that runs all the tests on for requests

00:43:17,550 --> 00:43:26,220
and actually have b-hat running if

00:43:24,599 --> 00:43:27,270
you're not familiar with be had it can

00:43:26,220 --> 00:43:30,650
help you with more of those

00:43:27,270 --> 00:43:30,650
business-critical test

00:43:45,989 --> 00:43:55,470
and so I'm actually testing the give

00:43:50,190 --> 00:44:03,930
donation plugin I'm doing that with B

00:43:55,470 --> 00:44:08,220
hat and so I have steps to find it so

00:44:03,930 --> 00:44:10,769
things like log into the admin go to the

00:44:08,220 --> 00:44:12,900
Edit screen of my donation form update

00:44:10,769 --> 00:44:16,109
some settings change the donation level

00:44:12,900 --> 00:44:19,079
to 500 said this is the default press

00:44:16,109 --> 00:44:22,079
publish when I go into that form on the

00:44:19,079 --> 00:44:23,880
front end and I clearly have then the

00:44:22,079 --> 00:44:25,739
amount I updated and the backing should

00:44:23,880 --> 00:44:29,940
be visible so you definitely can write

00:44:25,739 --> 00:44:34,140
tests that do those sorts of things that

00:44:29,940 --> 00:44:36,150
I've seen test being written link custom

00:44:34,140 --> 00:44:38,579
user roles and permissions in WordPress

00:44:36,150 --> 00:44:41,549
are something that is requested pretty

00:44:38,579 --> 00:44:42,599
frequently but often it's hard to you

00:44:41,549 --> 00:44:44,489
know make sure those are working

00:44:42,599 --> 00:44:47,460
properly you can write tests or things

00:44:44,489 --> 00:44:49,349
like that so that you know this role

00:44:47,460 --> 00:44:52,109
tries to go to be to this page I see

00:44:49,349 --> 00:44:56,460
access denied or you know these sorts of

00:44:52,109 --> 00:44:58,529
things so visual regression and I said

00:44:56,460 --> 00:45:01,249
that's a good foundation because just

00:44:58,529 --> 00:45:04,970
taking screenshots and comparing them is

00:45:01,249 --> 00:45:06,989
pretty just kind of set it and forget it

00:45:04,970 --> 00:45:08,549
more of this sort of stuff you're

00:45:06,989 --> 00:45:08,890
talking about you actually have to get

00:45:08,549 --> 00:45:11,140
your

00:45:08,890 --> 00:45:13,720
dirty and right these custom tests

00:45:11,140 --> 00:45:17,109
because there be smoke for every project

00:45:13,720 --> 00:45:19,089
you know this one this one having a

00:45:17,109 --> 00:45:21,400
donation form there might be another

00:45:19,089 --> 00:45:22,690
site with the give plugin but their

00:45:21,400 --> 00:45:25,960
donation form is probably set up

00:45:22,690 --> 00:45:27,519
completely differently right so when you

00:45:25,960 --> 00:45:29,499
get into testing those more critical

00:45:27,519 --> 00:45:31,869
features you have to spend more time to

00:45:29,499 --> 00:45:33,880
write tests custom to that project but

00:45:31,869 --> 00:45:41,769
it's definitely worth it to make sure

00:45:33,880 --> 00:45:45,239
you have that coverage all right

00:45:41,769 --> 00:45:45,239
oh there are no more questions

00:45:49,100 --> 00:45:52,190

YouTube URL: https://www.youtube.com/watch?v=-AkUv2QdICo


