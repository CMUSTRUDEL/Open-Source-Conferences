Title: Matthew Boynes: High-Performance Database Queries in WordPress
Publication date: 2019-04-13
Playlist: WordCamp Portland ME 2018
Description: 
	What makes a database query fast or slow? Are WP_Query’s taxonomy queries fast? What about meta queries? In this talk, we’ll dig into the WordPress database schema, talk about what factors influence query performance, and learn how to sniff out potential performance problems before they ever give you a headache. Next, we’ll discuss strategies for refactoring queries to be as performant as possible, caching strategies, and more.

WPTV link: https://wordpress.tv/2019/02/01/matthew-boynes-high-performance-database-queries-in-wordpress/
Captions: 
	00:00:03,560 --> 00:00:09,110
hi today we're gonna be talking about

00:00:07,130 --> 00:00:11,990
high performance database queries in

00:00:09,110 --> 00:00:14,209
WordPress and for some reason we're

00:00:11,990 --> 00:00:17,870
doing this before the coffee break sorry

00:00:14,209 --> 00:00:20,630
I would not have set up the schedule

00:00:17,870 --> 00:00:23,210
that way this is gonna be we're really

00:00:20,630 --> 00:00:25,820
gonna geek out today this is this is

00:00:23,210 --> 00:00:27,440
gonna be I think a fun talk normally I

00:00:25,820 --> 00:00:29,270
like to kind of shoot just above

00:00:27,440 --> 00:00:31,070
people's heads today I'm gonna maybe

00:00:29,270 --> 00:00:32,780
shoot a little bit higher I really want

00:00:31,070 --> 00:00:36,440
everyone to come out of this with some

00:00:32,780 --> 00:00:38,510
with some new knowledge I also want to

00:00:36,440 --> 00:00:40,519
warn everyone that even though it's you

00:00:38,510 --> 00:00:42,140
know late 2018 and this is a word camp

00:00:40,519 --> 00:00:45,379
presentation we're not gonna talk about

00:00:42,140 --> 00:00:47,420
Guttenberg so you've been warned you're

00:00:45,379 --> 00:00:51,710
hoping for talk on Guttenberg this is

00:00:47,420 --> 00:00:55,159
not the room so a little bit about me

00:00:51,710 --> 00:00:57,249
I'm a partner at Ally we're full service

00:00:55,159 --> 00:01:03,620
digital agency we're one of the

00:00:57,249 --> 00:01:06,200
wordpress.com VIP partner agencies we're

00:01:03,620 --> 00:01:08,450
hiring it's an important note we're

00:01:06,200 --> 00:01:11,920
distributed company so you don't have to

00:01:08,450 --> 00:01:15,439
be any one place to to work for us and

00:01:11,920 --> 00:01:18,399
we build some of the biggest and most

00:01:15,439 --> 00:01:24,049
complicated WordPress sites in the world

00:01:18,399 --> 00:01:29,149
so this is talk on mostly lessons that

00:01:24,049 --> 00:01:31,850
I've learned the hard way ok jumping

00:01:29,149 --> 00:01:34,130
right in and this is from the book high

00:01:31,850 --> 00:01:38,030
performance my sequel third edition it's

00:01:34,130 --> 00:01:41,119
an electrifying read what makes a

00:01:38,030 --> 00:01:42,920
database query fast or slow I really

00:01:41,119 --> 00:01:44,780
liked the way that this book put it the

00:01:42,920 --> 00:01:47,359
most basic reason a query doesn't

00:01:44,780 --> 00:01:50,450
perform well is because it's working

00:01:47,359 --> 00:01:53,420
with too much data let that sink in it

00:01:50,450 --> 00:01:58,310
sounds you know pretty basic but it

00:01:53,420 --> 00:01:59,840
actually explains a lot I'm not

00:01:58,310 --> 00:02:00,950
suggesting that when somebody's

00:01:59,840 --> 00:02:02,780
complaining about the speed of a

00:02:00,950 --> 00:02:04,520
database query you delete most of their

00:02:02,780 --> 00:02:06,740
database that probably wouldn't go over

00:02:04,520 --> 00:02:10,070
well there are other ways to get my

00:02:06,740 --> 00:02:13,159
sequel to work with less data this goes

00:02:10,070 --> 00:02:14,599
on to say some queries just have to sift

00:02:13,159 --> 00:02:15,930
through a lot of data and can't be

00:02:14,599 --> 00:02:17,609
helped that's unusual though

00:02:15,930 --> 00:02:23,010
most bad berries can be changed to

00:02:17,609 --> 00:02:24,299
access less data so if the most basic

00:02:23,010 --> 00:02:25,560
reason that query doesn't perform well

00:02:24,299 --> 00:02:28,200
is because it's working with too much

00:02:25,560 --> 00:02:31,260
data what is the most basic way to speed

00:02:28,200 --> 00:02:35,010
up a database query reduce the amount of

00:02:31,260 --> 00:02:37,680
data that the database has to read which

00:02:35,010 --> 00:02:40,109
brings us to our first topic indexes

00:02:37,680 --> 00:02:42,420
this is also from high performance my

00:02:40,109 --> 00:02:44,129
sequel third edition I promise this is

00:02:42,420 --> 00:02:48,120
not a book report this is my last

00:02:44,129 --> 00:02:50,099
excerpt from this book so just a

00:02:48,120 --> 00:02:51,750
footnote specifically Eitri indexes

00:02:50,099 --> 00:02:54,659
that's the type of index that my sequel

00:02:51,750 --> 00:02:57,030
uses most of the time indexes reduce the

00:02:54,659 --> 00:03:00,329
amount of data the server has to examine

00:02:57,030 --> 00:03:03,989
it's so simple right we need my sequel

00:03:00,329 --> 00:03:06,180
to look at to examine less data indexes

00:03:03,989 --> 00:03:08,669
do that they also help the server avoid

00:03:06,180 --> 00:03:10,950
sorting and avoid using temporary tables

00:03:08,669 --> 00:03:13,620
and they turn random i/o into sequential

00:03:10,950 --> 00:03:17,189
i/o we'll dive into all this a little

00:03:13,620 --> 00:03:20,400
bit more as we go indexes do have some

00:03:17,189 --> 00:03:22,229
downsides you should be aware of indexes

00:03:20,400 --> 00:03:24,569
significantly affect the speed of write

00:03:22,229 --> 00:03:27,810
operations you have many indexes on a

00:03:24,569 --> 00:03:29,790
table a write can take 10 20 times as

00:03:27,810 --> 00:03:31,889
long most of the time that's not a big

00:03:29,790 --> 00:03:34,979
deal because you're only doing writes

00:03:31,889 --> 00:03:37,139
for a very small segment of your users

00:03:34,979 --> 00:03:40,979
people who in the WordPress world are

00:03:37,139 --> 00:03:43,379
using the WordPress admin indexes

00:03:40,979 --> 00:03:45,349
significantly infect storage space the

00:03:43,379 --> 00:03:48,120
storage space of your database server

00:03:45,349 --> 00:03:53,099
the memory usage of a database server

00:03:48,120 --> 00:03:55,259
and indexes aren't altogether flexible a

00:03:53,099 --> 00:03:59,939
really good index is going to be very

00:03:55,259 --> 00:04:02,659
well targeted to specific uses we'll

00:03:59,939 --> 00:04:05,579
look at some indexes in WordPress

00:04:02,659 --> 00:04:08,729
next and we'll get a better sense of

00:04:05,579 --> 00:04:11,759
really what that means but at the end of

00:04:08,729 --> 00:04:13,349
the day you can't just index everything

00:04:11,759 --> 00:04:15,540
if you index everything in a database

00:04:13,349 --> 00:04:17,880
tables and the index is as big as the

00:04:15,540 --> 00:04:19,769
table and now you've not reduced the

00:04:17,880 --> 00:04:21,359
amount of data that my sequel has to

00:04:19,769 --> 00:04:25,270
look at in order to get you your

00:04:21,359 --> 00:04:27,890
information so

00:04:25,270 --> 00:04:29,960
next let's look at some of the indexes

00:04:27,890 --> 00:04:32,510
in WordPress I'm just going to focus on

00:04:29,960 --> 00:04:36,080
three tables that were late to querying

00:04:32,510 --> 00:04:41,990
for posts so the first is the WP post

00:04:36,080 --> 00:04:45,980
table we have my cursor here if that's

00:04:41,990 --> 00:04:47,660
obvious so we have the primary index

00:04:45,980 --> 00:04:50,180
which is just on the ID field

00:04:47,660 --> 00:04:53,230
there's the post name index on the post

00:04:50,180 --> 00:04:56,930
name field this is primarily used for

00:04:53,230 --> 00:04:59,050
for querying for post by by a rewrite

00:04:56,930 --> 00:05:02,570
rule through your pretty permalinks

00:04:59,050 --> 00:05:04,970
there is the type status date index

00:05:02,570 --> 00:05:08,120
which is a multi column index that

00:05:04,970 --> 00:05:10,880
indexes the post type the post status

00:05:08,120 --> 00:05:14,000
the post date and the ID that order is

00:05:10,880 --> 00:05:18,530
actually significant but this is the

00:05:14,000 --> 00:05:20,450
index that is is most commonly used on

00:05:18,530 --> 00:05:22,670
front-end queries anytime you're looking

00:05:20,450 --> 00:05:25,010
at a list of posts basically you're

00:05:22,670 --> 00:05:27,680
going to probably end up using this

00:05:25,010 --> 00:05:30,520
index there are two other indexes on the

00:05:27,680 --> 00:05:33,550
table post parent for generating

00:05:30,520 --> 00:05:36,590
hierarchical queries getting like

00:05:33,550 --> 00:05:39,800
children of a page for instance and then

00:05:36,590 --> 00:05:42,080
there's an index on post author for the

00:05:39,800 --> 00:05:46,940
author archives and used bunch of other

00:05:42,080 --> 00:05:50,750
places too next looking at the WP post

00:05:46,940 --> 00:05:52,790
meta table there's again the primary

00:05:50,750 --> 00:05:54,320
index on the meta ID field we never

00:05:52,790 --> 00:05:56,210
actually used them that ID than

00:05:54,320 --> 00:05:59,660
WordPress there's an index on post ID

00:05:56,210 --> 00:06:02,240
and an index on the meta key those two

00:05:59,660 --> 00:06:05,450
are super important what's also

00:06:02,240 --> 00:06:07,040
noteworthy here is what's missing which

00:06:05,450 --> 00:06:11,630
is that there's not an index on the meta

00:06:07,040 --> 00:06:13,820
value column we will talk quite a bit

00:06:11,630 --> 00:06:17,060
more about that later

00:06:13,820 --> 00:06:19,640
next the WP term relationships table the

00:06:17,060 --> 00:06:23,290
primary index is a multi column index on

00:06:19,640 --> 00:06:28,400
object ID and term taxonomy ID this is

00:06:23,290 --> 00:06:30,080
so object ID is post ID technically

00:06:28,400 --> 00:06:31,790
texana me terms can be related to more

00:06:30,080 --> 00:06:34,760
than just posts that you didn't know

00:06:31,790 --> 00:06:35,490
that so object ID you think of it as

00:06:34,760 --> 00:06:39,870
synonymous with

00:06:35,490 --> 00:06:41,130
and this is this is the main index that

00:06:39,870 --> 00:06:44,190
I end up using here and then there's

00:06:41,130 --> 00:06:46,320
also an index on term text on the ID and

00:06:44,190 --> 00:06:49,140
termina text ami IDs a little bit of a

00:06:46,320 --> 00:06:54,120
of a relic nowadays term packs on the ID

00:06:49,140 --> 00:06:57,570
in term I do the same thing a brief word

00:06:54,120 --> 00:07:00,420
on joins so if you've ever spent a lot

00:06:57,570 --> 00:07:02,820
of time in the database server and

00:07:00,420 --> 00:07:05,220
looking at database queries you might

00:07:02,820 --> 00:07:09,090
have the idea in your head that joins

00:07:05,220 --> 00:07:11,940
are bad are they always bad no they're

00:07:09,090 --> 00:07:16,260
actually not but they certainly can be

00:07:11,940 --> 00:07:18,630
joins have to be well crafted join order

00:07:16,260 --> 00:07:21,330
is important as is proper indexing

00:07:18,630 --> 00:07:26,430
specifically indexing on the colonies

00:07:21,330 --> 00:07:28,650
that form the join furthermore many

00:07:26,430 --> 00:07:33,150
joins in one query can cause a lot of

00:07:28,650 --> 00:07:34,320
CPU overhead this kind of hoax at the

00:07:33,150 --> 00:07:36,330
the edge of the scope of this

00:07:34,320 --> 00:07:38,850
presentation but under the hood the way

00:07:36,330 --> 00:07:41,550
that my sequel does joins is with nested

00:07:38,850 --> 00:07:44,660
loops so when you have a join my sequel

00:07:41,550 --> 00:07:48,330
has a nested loop where it takes

00:07:44,660 --> 00:07:49,800
it goes row by row on one table and for

00:07:48,330 --> 00:07:52,050
each of those it loops through the other

00:07:49,800 --> 00:07:53,910
table so with each join you have to do

00:07:52,050 --> 00:07:57,780
another set of next to lose this can

00:07:53,910 --> 00:07:59,550
create a lot of CPU overhead if your

00:07:57,780 --> 00:08:00,920
database server is also warming your

00:07:59,550 --> 00:08:04,680
house I guess that would be a good thing

00:08:00,920 --> 00:08:08,250
all right so next let's talk about very

00:08:04,680 --> 00:08:10,290
specific WordPress queries starting with

00:08:08,250 --> 00:08:12,360
our type queries this is like if your

00:08:10,290 --> 00:08:14,670
home page is showing your say 10 most

00:08:12,360 --> 00:08:16,440
recent posts this is going to be that's

00:08:14,670 --> 00:08:18,540
gonna be example of one of these queries

00:08:16,440 --> 00:08:20,580
but basically anytime you're looking at

00:08:18,540 --> 00:08:24,500
a list of posts in WordPress it's some

00:08:20,580 --> 00:08:28,170
some form of of an archive query and

00:08:24,500 --> 00:08:30,450
unless it's a custom query it's going to

00:08:28,170 --> 00:08:32,820
filter by post type filter write post

00:08:30,450 --> 00:08:34,680
status and then order by date so

00:08:32,820 --> 00:08:37,650
remember that index we were looking at

00:08:34,680 --> 00:08:42,450
the type status date and next this is

00:08:37,650 --> 00:08:46,270
where that comes into play - everyone

00:08:42,450 --> 00:08:48,910
read this ok cool so

00:08:46,270 --> 00:08:53,500
diving into this query specifically we

00:08:48,910 --> 00:08:56,170
have to just ignore the sequel health

00:08:53,500 --> 00:08:59,260
bound rose we're selecting the post ID

00:08:56,170 --> 00:09:02,709
so this is this was craved from a home

00:08:59,260 --> 00:09:04,630
page I set up a a wordpress install on

00:09:02,709 --> 00:09:07,720
my laptop I installed

00:09:04,630 --> 00:09:10,270
I added not manually I promise you a

00:09:07,720 --> 00:09:12,820
hundred thousand posts to it and I

00:09:10,270 --> 00:09:15,190
pulled a bunch of queries from the site

00:09:12,820 --> 00:09:17,260
as they were running also just ran a

00:09:15,190 --> 00:09:18,910
bunch time pulled out the I verses of

00:09:17,260 --> 00:09:22,630
how long these queries stuck them and

00:09:18,910 --> 00:09:24,490
we'll will dive through them so on the

00:09:22,630 --> 00:09:27,970
home page this query was being run

00:09:24,490 --> 00:09:30,100
select the post ID where the post type

00:09:27,970 --> 00:09:32,290
is post the post status is either a

00:09:30,100 --> 00:09:34,390
publisher private private is used here

00:09:32,290 --> 00:09:37,420
because I was signed in on the site the

00:09:34,390 --> 00:09:40,870
you know a typical visitor would only be

00:09:37,420 --> 00:09:45,010
looking at published posts and then

00:09:40,870 --> 00:09:46,510
ordering by the post date so when I went

00:09:45,010 --> 00:09:50,649
to my site which has a hundred thousand

00:09:46,510 --> 00:09:54,850
posts on it this query took seventy

00:09:50,649 --> 00:09:57,820
three milliseconds that's okay that very

00:09:54,850 --> 00:09:59,770
fast but at the same time it's kind of

00:09:57,820 --> 00:10:03,190
not that fast we want database queries

00:09:59,770 --> 00:10:07,120
to be like one millisecond or a singular

00:10:03,190 --> 00:10:08,709
number of milliseconds so why is this so

00:10:07,120 --> 00:10:10,779
slow everything about this query is

00:10:08,709 --> 00:10:13,750
actually crafted really well let's let's

00:10:10,779 --> 00:10:16,329
go back to it so think about the index

00:10:13,750 --> 00:10:19,029
it was a multi column index type status

00:10:16,329 --> 00:10:21,970
date and then ID was the last column in

00:10:19,029 --> 00:10:24,459
that index every field that we're

00:10:21,970 --> 00:10:26,230
looking at in this query is in the index

00:10:24,459 --> 00:10:28,779
so my sequel doesn't even have to touch

00:10:26,230 --> 00:10:30,820
the database table itself went running

00:10:28,779 --> 00:10:33,070
this query this is why WordPress queries

00:10:30,820 --> 00:10:34,329
for the post ID even though when we're

00:10:33,070 --> 00:10:36,250
generating that page we need more than

00:10:34,329 --> 00:10:39,070
just the ID we need the post title we

00:10:36,250 --> 00:10:41,170
need the post name to generate the

00:10:39,070 --> 00:10:45,130
permalink we need the you know the

00:10:41,170 --> 00:10:46,990
excerpt maybe even though we need all

00:10:45,130 --> 00:10:49,899
that when WordPress runs a spirit it's

00:10:46,990 --> 00:10:51,760
just going for the ID that's gonna keep

00:10:49,899 --> 00:10:53,560
this query running nice and fast and

00:10:51,760 --> 00:10:55,240
then we'll use the ID layer to inflate

00:10:53,560 --> 00:10:56,519
the rest of that post object to get the

00:10:55,240 --> 00:11:00,970
rest of the engine

00:10:56,519 --> 00:11:03,189
so why is this query not as fast as we

00:11:00,970 --> 00:11:05,139
really ideally like it to be we can do

00:11:03,189 --> 00:11:07,239
it explained on it if you've never done

00:11:05,139 --> 00:11:08,379
an explain on a database query it's

00:11:07,239 --> 00:11:10,029
pretty simple just add the word

00:11:08,379 --> 00:11:11,769
explained before whatever query you're

00:11:10,029 --> 00:11:13,689
trying to run and my sequel will give

00:11:11,769 --> 00:11:16,660
you some information about what's going

00:11:13,689 --> 00:11:19,749
on we're gonna skip most of this it's

00:11:16,660 --> 00:11:22,720
outside the scope of this talk maybe if

00:11:19,749 --> 00:11:25,779
I had longer than 40 minutes but we're

00:11:22,720 --> 00:11:27,339
gonna do break down to extra we're using

00:11:25,779 --> 00:11:29,259
we're using index these are really good

00:11:27,339 --> 00:11:31,660
things and then we're using file sort

00:11:29,259 --> 00:11:35,350
this is not necessarily a bad thing but

00:11:31,660 --> 00:11:38,679
it is a flag and ultimately that tells

00:11:35,350 --> 00:11:39,999
us what's really going on in here Mike

00:11:38,679 --> 00:11:42,819
sequel also says that I had to examine

00:11:39,999 --> 00:11:44,499
49 thousand seven in two rows I promise

00:11:42,819 --> 00:11:47,439
there or a hundred thousand rows there

00:11:44,499 --> 00:11:51,509
hey either that's all that my sequel had

00:11:47,439 --> 00:11:53,410
to look at to get things sorted or it's

00:11:51,509 --> 00:11:56,040
guesstimating which my sequel is pretty

00:11:53,410 --> 00:12:02,199
bad at doing this to us

00:11:56,040 --> 00:12:06,309
so using final sort means that my sequel

00:12:02,199 --> 00:12:09,819
had to try to stay closer to the mic so

00:12:06,309 --> 00:12:12,999
that my voice gets picked up on video my

00:12:09,819 --> 00:12:14,410
sequel had to sort these results so when

00:12:12,999 --> 00:12:16,480
it ran this query it got a hundred

00:12:14,410 --> 00:12:20,350
thousand results let's go back up to the

00:12:16,480 --> 00:12:22,679
query at the end we're saying limit zero

00:12:20,350 --> 00:12:25,990
ten so give me the first ten posts

00:12:22,679 --> 00:12:29,559
we only want ten post my sequel has to

00:12:25,990 --> 00:12:31,059
look at a hundred thousand again it's

00:12:29,559 --> 00:12:32,559
still working just within the index so

00:12:31,059 --> 00:12:34,389
this is pretty fast but it has to look

00:12:32,559 --> 00:12:38,110
at a hundred thousand then it has to

00:12:34,389 --> 00:12:40,209
sort them all by date then it takes the

00:12:38,110 --> 00:12:42,249
first ten and it throws away the next

00:12:40,209 --> 00:12:44,579
ninety nine thousand nine hundred and

00:12:42,249 --> 00:12:44,579
ninety

00:12:47,550 --> 00:12:54,180
so if if we were to remove the order in

00:12:52,440 --> 00:12:57,810
the limit from that query that query

00:12:54,180 --> 00:12:59,760
takes four milliseconds it also returns

00:12:57,810 --> 00:13:01,500
a hundred thousand results that are not

00:12:59,760 --> 00:13:02,790
sorted but it only takes four

00:13:01,500 --> 00:13:04,710
milliseconds so that's more what we

00:13:02,790 --> 00:13:07,440
would expect to see out of a database

00:13:04,710 --> 00:13:09,660
query like this so we we know

00:13:07,440 --> 00:13:16,260
unequivocally that what's taking time

00:13:09,660 --> 00:13:20,520
here is sorting the results so can we

00:13:16,260 --> 00:13:21,990
have PHP sort the results instead of let

00:13:20,520 --> 00:13:25,110
my sequel do it if that's what's taking

00:13:21,990 --> 00:13:28,920
majority of the time can we do that

00:13:25,110 --> 00:13:32,060
ourselves I know you asked that I didn't

00:13:28,920 --> 00:13:36,750
ask that what I'm glad you're asked for

00:13:32,060 --> 00:13:38,430
academic purposes I try to do this now

00:13:36,750 --> 00:13:40,230
remember if we're gonna sort by date now

00:13:38,430 --> 00:13:42,570
we can't just select the idea we have to

00:13:40,230 --> 00:13:44,940
select both the ID and the date we have

00:13:42,570 --> 00:13:47,820
to pull that all down into PHP so

00:13:44,940 --> 00:13:49,770
between the ID and the day times 100,000

00:13:47,820 --> 00:13:52,140
it's probably like one or two megabytes

00:13:49,770 --> 00:13:54,120
of data that we have to sit through we

00:13:52,140 --> 00:13:56,340
have to convert those dates into a

00:13:54,120 --> 00:13:57,900
format that we can easily sort or we can

00:13:56,340 --> 00:14:03,320
just sort them as strings and that works

00:13:57,900 --> 00:14:05,610
fine too and then slice off the top ten

00:14:03,320 --> 00:14:07,470
just to deliver that one to two

00:14:05,610 --> 00:14:08,970
megabytes over a local connection this

00:14:07,470 --> 00:14:11,010
is all happening on my laptop the

00:14:08,970 --> 00:14:13,260
database servers on my laptop the web

00:14:11,010 --> 00:14:16,290
servers on my laptop just to deliver the

00:14:13,260 --> 00:14:20,760
data takes longer than 73 milliseconds

00:14:16,290 --> 00:14:22,380
so sorry we doubted you my sequel you're

00:14:20,760 --> 00:14:25,170
actually doing a very good job better

00:14:22,380 --> 00:14:27,480
anything could do all told it took about

00:14:25,170 --> 00:14:33,870
14 times longer to do that sorting and

00:14:27,480 --> 00:14:36,750
and slicing myself okay so we'll get

00:14:33,870 --> 00:14:39,330
back to to the archive queries a little

00:14:36,750 --> 00:14:44,910
bit later let's move on to taxonomy

00:14:39,330 --> 00:14:50,160
queries so a typical taxonomy query uses

00:14:44,910 --> 00:14:54,800
index columns it uses a single join and

00:14:50,160 --> 00:14:54,800
the joint happens on index columns

00:14:56,250 --> 00:15:00,850
so looking at this query it looks very

00:14:59,650 --> 00:15:03,340
similar to the last one that we looked

00:15:00,850 --> 00:15:07,300
at except that we now have a join on the

00:15:03,340 --> 00:15:11,770
WP term relationships table we're

00:15:07,300 --> 00:15:15,160
joining on the post ID matching the the

00:15:11,770 --> 00:15:19,650
object ID of term relationships and then

00:15:15,160 --> 00:15:22,750
in our we're toes we're looking for

00:15:19,650 --> 00:15:25,510
posts that are in the term taxonomy ID

00:15:22,750 --> 00:15:31,360
of two so all hundred thousand of my

00:15:25,510 --> 00:15:34,000
posts are in this one taxonomy term this

00:15:31,360 --> 00:15:35,530
query takes about 200 milliseconds to

00:15:34,000 --> 00:15:43,050
run so quite a bit quite a bit slower

00:15:35,530 --> 00:15:47,080
than the last one what if we were to run

00:15:43,050 --> 00:15:51,460
multiple technologies and 130 so now we

00:15:47,080 --> 00:15:54,150
have two joins instead of one and then

00:15:51,460 --> 00:15:59,290
in the where clause we we have the same

00:15:54,150 --> 00:16:01,240
thing clause for term taxonomy in an ID

00:15:59,290 --> 00:16:04,450
- there are a hundred thousand posts in

00:16:01,240 --> 00:16:07,450
that term and then there's term with

00:16:04,450 --> 00:16:12,310
this with the other tables join tt1 that

00:16:07,450 --> 00:16:15,160
terms like Sam Eid in nine so in that

00:16:12,310 --> 00:16:20,380
term with the ID of nine there's only

00:16:15,160 --> 00:16:22,030
one post so we've increased the

00:16:20,380 --> 00:16:24,850
complexity of this query the last one

00:16:22,030 --> 00:16:29,500
was 200 milliseconds any guesses on how

00:16:24,850 --> 00:16:34,330
long this queries going to take no

00:16:29,500 --> 00:16:35,130
guesses it takes about a millisecond why

00:16:34,330 --> 00:16:37,330
is that

00:16:35,130 --> 00:16:39,940
it's because my school doesn't have to

00:16:37,330 --> 00:16:44,980
do any sorting here it doesn't really

00:16:39,940 --> 00:16:48,490
need to do any work at all the taxonomy

00:16:44,980 --> 00:16:50,800
queries especially when you're working

00:16:48,490 --> 00:16:53,470
with large datasets on large sites they

00:16:50,800 --> 00:16:55,870
get a bad rap they're actually not so

00:16:53,470 --> 00:16:59,110
bad because the way that the query is

00:16:55,870 --> 00:17:02,410
crafted every single column that we're

00:16:59,110 --> 00:17:04,090
looking at here is a next we're only

00:17:02,410 --> 00:17:06,280
working with indexes we're working with

00:17:04,090 --> 00:17:06,740
two indexes that's why the last query

00:17:06,280 --> 00:17:08,959
was

00:17:06,740 --> 00:17:10,970
200 milliseconds versus 73 milliseconds

00:17:08,959 --> 00:17:12,829
when my sequel had to do all that

00:17:10,970 --> 00:17:17,390
sorting it has more data to work with

00:17:12,829 --> 00:17:19,339
and we know that queries speed depends

00:17:17,390 --> 00:17:24,730
on how much data my sequel has to look

00:17:19,339 --> 00:17:27,679
at and work with in this case because at

00:17:24,730 --> 00:17:32,300
the end of the day my sequel only has to

00:17:27,679 --> 00:17:35,420
deal with one post with one result this

00:17:32,300 --> 00:17:37,610
query is lightning fast and the I was

00:17:35,420 --> 00:17:41,150
using the application sequel Pro to run

00:17:37,610 --> 00:17:42,800
this query I I think that it the the

00:17:41,150 --> 00:17:44,000
lowest number that it'll show is one

00:17:42,800 --> 00:17:49,700
millisecond so it may have even been

00:17:44,000 --> 00:17:53,080
faster than one millisecond let's take a

00:17:49,700 --> 00:18:00,290
look at Medicare ease oh and by the way

00:17:53,080 --> 00:18:02,300
with the with this query just to further

00:18:00,290 --> 00:18:05,110
the point that it really it all comes

00:18:02,300 --> 00:18:07,460
down to having to do that sword and

00:18:05,110 --> 00:18:10,580
having to deal with a you know having to

00:18:07,460 --> 00:18:12,440
sort a hundred thousand results if we

00:18:10,580 --> 00:18:15,020
remove the group by the order by the

00:18:12,440 --> 00:18:18,050
limit here those are all things that

00:18:15,020 --> 00:18:20,929
that caused my sequel to have to do some

00:18:18,050 --> 00:18:23,570
some form sorting then this this query

00:18:20,929 --> 00:18:27,230
takes a singular number of milliseconds

00:18:23,570 --> 00:18:33,350
so just like the archived query it's

00:18:27,230 --> 00:18:35,809
really it's lightning fast once you tell

00:18:33,350 --> 00:18:37,460
my sequel once you have data just sent

00:18:35,809 --> 00:18:39,950
it to me you don't need to sort it you

00:18:37,460 --> 00:18:42,260
don't need to touch it alright moving on

00:18:39,950 --> 00:18:45,740
to medic where ease so typical medic

00:18:42,260 --> 00:18:49,100
weary leverages index columns the medic

00:18:45,740 --> 00:18:52,190
key and the post ID join happens on the

00:18:49,100 --> 00:18:54,679
next columns but as I mentioned before

00:18:52,190 --> 00:18:59,559
meta value is not indexed or at least

00:18:54,679 --> 00:19:04,250
out of the box looking at a query so I

00:18:59,559 --> 00:19:05,660
I'm running a custom query here where

00:19:04,250 --> 00:19:07,190
the medic query is looking at the meta

00:19:05,660 --> 00:19:14,870
key of city in the meta value of

00:19:07,190 --> 00:19:18,250
Portland and I have I added that meta

00:19:14,870 --> 00:19:23,060
key value combination to 19

00:19:18,250 --> 00:19:25,250
1999 posts and this took about four

00:19:23,060 --> 00:19:29,780
hundred and ten milliseconds so slower

00:19:25,250 --> 00:19:31,910
than the the taxonomy the yeah slower

00:19:29,780 --> 00:19:35,240
than the taxonomy query got about twice

00:19:31,910 --> 00:19:39,290
as long and more than four times about

00:19:35,240 --> 00:19:45,050
five times as long as as the archive

00:19:39,290 --> 00:19:49,010
query what happens

00:19:45,050 --> 00:19:54,260
so 99999 the other post of my hundred

00:19:49,010 --> 00:19:59,030
thousand I set the meta key to City and

00:19:54,260 --> 00:20:02,780
the meta value to Boston so now my

00:19:59,030 --> 00:20:06,740
sequel only has two only has one post to

00:20:02,780 --> 00:20:09,440
work with so we're moving sorting right

00:20:06,740 --> 00:20:13,370
how long is that career gonna take any

00:20:09,440 --> 00:20:16,280
guesses three hundred and forty

00:20:13,370 --> 00:20:20,240
milliseconds what the heck now there's

00:20:16,280 --> 00:20:21,620
only one result why is this so slow why

00:20:20,240 --> 00:20:23,390
isn't it like a singular number of

00:20:21,620 --> 00:20:25,190
milliseconds because at the end of the

00:20:23,390 --> 00:20:29,420
day my sequel still has to do sort a

00:20:25,190 --> 00:20:31,820
hundred thousand results here before but

00:20:29,420 --> 00:20:34,070
since meta value is not an index column

00:20:31,820 --> 00:20:37,700
my sequel pulls out all the results

00:20:34,070 --> 00:20:39,470
using the index columns and it says okay

00:20:37,700 --> 00:20:41,870
I have a hundred thousand results now

00:20:39,470 --> 00:20:44,150
let me get the medic meta values for all

00:20:41,870 --> 00:20:47,330
those and I'm gonna go row by row and

00:20:44,150 --> 00:20:51,890
see if the meta value matches and so

00:20:47,330 --> 00:20:54,440
even though in my second case there's

00:20:51,890 --> 00:20:57,050
only one post with the meta value of

00:20:54,440 --> 00:20:58,910
Boston it still has to look at and

00:20:57,050 --> 00:21:00,560
access a hundred thousand results

00:20:58,910 --> 00:21:06,470
because there are a hundred thousand

00:21:00,560 --> 00:21:07,760
posts where the meta key is sitting so

00:21:06,470 --> 00:21:10,940
when it comes to medic we're ease a

00:21:07,760 --> 00:21:14,360
query is either fast or slow not based

00:21:10,940 --> 00:21:16,070
on the uniqueness of the result set but

00:21:14,360 --> 00:21:19,690
on the uniqueness of the meta key

00:21:16,070 --> 00:21:22,760
because the meta key is what's indexed

00:21:19,690 --> 00:21:24,920
when there's only one post with the

00:21:22,760 --> 00:21:27,440
citikitty so instead of one post with

00:21:24,920 --> 00:21:30,390
the meta value matching the meta value

00:21:27,440 --> 00:21:34,320
if there was only one post matching

00:21:30,390 --> 00:21:39,539
the city key that query only takes one

00:21:34,320 --> 00:21:43,019
millisecond which segues us into a

00:21:39,539 --> 00:21:45,870
really important part of database

00:21:43,019 --> 00:21:49,320
performance which is planning and data

00:21:45,870 --> 00:21:50,730
architecture know thy data understand

00:21:49,320 --> 00:21:53,429
what the data is gonna look like not

00:21:50,730 --> 00:21:55,049
just today but also tomorrow and if

00:21:53,429 --> 00:21:59,090
you're working on an open source plugin

00:21:55,049 --> 00:22:01,649
you have to operate assuming the worst

00:21:59,090 --> 00:22:04,470
well talk about some some strategies

00:22:01,649 --> 00:22:08,480
very soon on how we can help meta

00:22:04,470 --> 00:22:10,860
queries before we a little bit better

00:22:08,480 --> 00:22:14,220
just briefly I want to touch on search

00:22:10,860 --> 00:22:16,799
queries simply put searches in WordPress

00:22:14,220 --> 00:22:20,370
are not scalable if you have a very

00:22:16,799 --> 00:22:23,850
large site in WordPress I recommend you

00:22:20,370 --> 00:22:25,980
use something external to run search

00:22:23,850 --> 00:22:32,010
some WordPress and I'll point out an

00:22:25,980 --> 00:22:32,760
option or two later on okay the fun part

00:22:32,010 --> 00:22:37,919
of the program

00:22:32,760 --> 00:22:41,490
refactoring so the first way that we can

00:22:37,919 --> 00:22:45,330
refactor our code is to add date

00:22:41,490 --> 00:22:47,789
limitations thinking about that archive

00:22:45,330 --> 00:22:52,980
query we're using the type status date

00:22:47,789 --> 00:22:55,590
index then we're sorting so we're

00:22:52,980 --> 00:23:00,179
filtering by type and status sorting by

00:22:55,590 --> 00:23:02,909
date we figured out that what takes the

00:23:00,179 --> 00:23:04,590
most time when running that query is

00:23:02,909 --> 00:23:06,659
doing that sort taking a hundred

00:23:04,590 --> 00:23:13,260
thousand posts sorting them all by date

00:23:06,659 --> 00:23:16,919
and then throwing away 99,999 9990 of

00:23:13,260 --> 00:23:19,559
the results so how do we get that result

00:23:16,919 --> 00:23:21,779
set the hundred thousand number down so

00:23:19,559 --> 00:23:23,370
here here's an example something you

00:23:21,779 --> 00:23:25,919
might you might build and say you have a

00:23:23,370 --> 00:23:28,470
widget in your in the sidebar of your

00:23:25,919 --> 00:23:31,950
site that shows like the five latest

00:23:28,470 --> 00:23:33,929
posts if you were doing just the basic

00:23:31,950 --> 00:23:36,149
query basic archive query like we were

00:23:33,929 --> 00:23:37,769
looking at before you and you have a

00:23:36,149 --> 00:23:38,880
hundred thousand posts on your site you

00:23:37,769 --> 00:23:41,309
know how long that's gonna take

00:23:38,880 --> 00:23:42,430
I mean your database server might be

00:23:41,309 --> 00:23:45,400
faster than my left

00:23:42,430 --> 00:23:47,980
but you you have a good idea that that's

00:23:45,400 --> 00:23:50,940
gonna be a slower query than you really

00:23:47,980 --> 00:23:55,870
want to be but think about your data is

00:23:50,940 --> 00:23:57,850
there any chance that in those five

00:23:55,870 --> 00:24:00,280
posts there would be a post that's older

00:23:57,850 --> 00:24:02,620
than X number of days or X number of

00:24:00,280 --> 00:24:04,360
months because if you have a hundred

00:24:02,620 --> 00:24:07,780
thousand posts on your site maybe those

00:24:04,360 --> 00:24:09,580
posts go back 10 years 15 years is a

00:24:07,780 --> 00:24:11,980
post from 12 years ago ever going to

00:24:09,580 --> 00:24:15,510
show up there no so why are you making

00:24:11,980 --> 00:24:19,300
my sequel sorted so if you were to add

00:24:15,510 --> 00:24:22,060
take that that the query that that

00:24:19,300 --> 00:24:23,740
widget is running and add a date query

00:24:22,060 --> 00:24:25,930
on it with a safe range let's say that

00:24:23,740 --> 00:24:28,570
you can say beyond any shadow of a doubt

00:24:25,930 --> 00:24:33,010
if the oldest suppose would ever be in

00:24:28,570 --> 00:24:36,130
there is four or five days old so what

00:24:33,010 --> 00:24:38,620
if you pick a safe range like six months

00:24:36,130 --> 00:24:40,540
and say okay I only want to look at the

00:24:38,620 --> 00:24:43,570
most recent six months of data here

00:24:40,540 --> 00:24:46,030
even that if your data spans back ten

00:24:43,570 --> 00:24:49,450
twelve years is going to trim that

00:24:46,030 --> 00:24:50,590
result set considerably here's an

00:24:49,450 --> 00:24:53,200
example of what that might look like in

00:24:50,590 --> 00:24:56,140
code so you have your query the little

00:24:53,200 --> 00:24:57,580
ellipsis just indicates whatever's in

00:24:56,140 --> 00:24:59,350
the query previously we're gonna add a

00:24:57,580 --> 00:25:03,630
date query here and we're gonna say

00:24:59,350 --> 00:25:07,140
after negative six months is is just

00:25:03,630 --> 00:25:09,700
that shortcut saying six months ago

00:25:07,140 --> 00:25:11,320
so we're saying only look at the results

00:25:09,700 --> 00:25:14,010
from the past six months

00:25:11,320 --> 00:25:17,200
you might turn that 73 millisecond query

00:25:14,010 --> 00:25:19,150
into a two millisecond query or a three

00:25:17,200 --> 00:25:20,920
millisecond query because now my sequel

00:25:19,150 --> 00:25:22,690
doesn't have to look at and sort a

00:25:20,920 --> 00:25:24,580
hundred thousand results maybe it only

00:25:22,690 --> 00:25:27,280
has to look at in sort thousand results

00:25:24,580 --> 00:25:30,940
or maybe even better maybe only a few

00:25:27,280 --> 00:25:34,180
hundred if this was a a taxonomy query

00:25:30,940 --> 00:25:35,410
or a medic weari now you're in the in

00:25:34,180 --> 00:25:36,850
the end you're probably talking the same

00:25:35,410 --> 00:25:39,190
amount of result time like three or four

00:25:36,850 --> 00:25:41,620
milliseconds but you're going from 200

00:25:39,190 --> 00:25:47,410
milliseconds or 400 milliseconds to get

00:25:41,620 --> 00:25:52,360
down there this is this is a great

00:25:47,410 --> 00:25:53,940
option for for cutting query query time

00:25:52,360 --> 00:25:56,970
database query time

00:25:53,940 --> 00:25:59,850
on queries that when you step back and

00:25:56,970 --> 00:26:03,060
think about it you you start to get an

00:25:59,850 --> 00:26:05,070
idea of why why am I looking at 99% of

00:26:03,060 --> 00:26:06,600
this content when I know I'm never gonna

00:26:05,070 --> 00:26:08,850
need it

00:26:06,600 --> 00:26:12,630
I've just a real-world example where

00:26:08,850 --> 00:26:15,660
I've used this I in the so this is for a

00:26:12,630 --> 00:26:17,730
news media client I was building them a

00:26:15,660 --> 00:26:19,860
homepage curation tool and there is a

00:26:17,730 --> 00:26:22,080
like search' autocomplete field where

00:26:19,860 --> 00:26:25,920
they could search for posts and curate

00:26:22,080 --> 00:26:27,390
them and these searches and for this

00:26:25,920 --> 00:26:29,040
purpose I was just using WordPress as

00:26:27,390 --> 00:26:30,870
core search these searches were taking

00:26:29,040 --> 00:26:33,180
over 10 seconds to run they have

00:26:30,870 --> 00:26:34,560
millions of posts in the database and

00:26:33,180 --> 00:26:37,290
these searches were taking over 10

00:26:34,560 --> 00:26:38,760
seconds to run I was like well how can I

00:26:37,290 --> 00:26:40,260
speed these up and I and I thought of

00:26:38,760 --> 00:26:42,930
this and I reached out to my client and

00:26:40,260 --> 00:26:45,570
I said would you ever put a content on

00:26:42,930 --> 00:26:47,460
the home page that's that's like older

00:26:45,570 --> 00:26:49,080
than six months now I know the content

00:26:47,460 --> 00:26:50,910
on the home page is only ever gonna be

00:26:49,080 --> 00:26:54,360
within the last few days I'm like okay

00:26:50,910 --> 00:26:55,680
so if I add like 30-day limit no that's

00:26:54,360 --> 00:26:57,840
never gonna confuse anyone right

00:26:55,680 --> 00:26:59,220
nobody's ever gonna search for content

00:26:57,840 --> 00:27:01,410
that's older than 30 days to put on the

00:26:59,220 --> 00:27:04,740
homepage no why would they do that but

00:27:01,410 --> 00:27:07,320
that's ridiculous is a new site so I did

00:27:04,740 --> 00:27:09,990
that and those those searches were

00:27:07,320 --> 00:27:14,000
instant they were 1 or 2 milliseconds so

00:27:09,990 --> 00:27:20,190
that cut it down from over 10 seconds to

00:27:14,000 --> 00:27:24,960
basically no time at all next tip add an

00:27:20,190 --> 00:27:29,220
indexed to meta value this is easier

00:27:24,960 --> 00:27:31,170
said than done but we can being on our

00:27:29,220 --> 00:27:35,310
friends at automatic who run WordPress

00:27:31,170 --> 00:27:37,320
com VIP they do this for their for their

00:27:35,310 --> 00:27:40,440
larger sites on one of their platforms

00:27:37,320 --> 00:27:42,420
if you download the presentation I'll

00:27:40,440 --> 00:27:44,760
bring the URL again later if you if you

00:27:42,420 --> 00:27:48,810
didn't go to it this is a link to their

00:27:44,760 --> 00:27:51,420
code what they what they do is they're

00:27:48,810 --> 00:27:53,190
adding an index on the meta key and then

00:27:51,420 --> 00:27:55,200
the first hundred characters of the meta

00:27:53,190 --> 00:27:58,580
value here's why you can't just add an

00:27:55,200 --> 00:28:01,110
indexed better value meta value can be

00:27:58,580 --> 00:28:02,430
absurdly large I forget what the limit

00:28:01,110 --> 00:28:04,390
is I want to say it's something like two

00:28:02,430 --> 00:28:08,530
gigs it might even be six

00:28:04,390 --> 00:28:11,110
it can be massive you can't index that

00:28:08,530 --> 00:28:12,429
my sickle just won't let you and if my

00:28:11,110 --> 00:28:15,940
secret let you you would take down your

00:28:12,429 --> 00:28:18,210
database server if you had any any any

00:28:15,940 --> 00:28:21,340
values that were anywhere near that size

00:28:18,210 --> 00:28:23,530
so but if you're running a meta query

00:28:21,340 --> 00:28:26,740
you probably aren't going to be typing

00:28:23,530 --> 00:28:29,980
out some you know absurdly long value

00:28:26,740 --> 00:28:32,049
the first hundred characters and that's

00:28:29,980 --> 00:28:33,789
completely arbitrary they say as much in

00:28:32,049 --> 00:28:37,559
their code somebody pulled that out of a

00:28:33,789 --> 00:28:39,760
hat is more than enough to to do

00:28:37,559 --> 00:28:42,940
probably every medic query that you

00:28:39,760 --> 00:28:45,490
would you would ever need to run you

00:28:42,940 --> 00:28:48,640
know there's a lot of especially a large

00:28:45,490 --> 00:28:55,090
site a lot of meta post meta gets

00:28:48,640 --> 00:28:57,039
written so this can slow down your your

00:28:55,090 --> 00:28:59,669
database writes and thus the performance

00:28:57,039 --> 00:29:01,870
in the ad been something to be aware of

00:28:59,669 --> 00:29:04,270
probably tested in a staging environment

00:29:01,870 --> 00:29:06,460
before rolling it out to production and

00:29:04,270 --> 00:29:10,990
affecting people's lives in the real

00:29:06,460 --> 00:29:14,950
world next refactoring tip get creative

00:29:10,990 --> 00:29:20,350
with meta key is so again a tip for for

00:29:14,950 --> 00:29:22,480
meta queries remember when we looked at

00:29:20,350 --> 00:29:24,850
that medic query the problem that we

00:29:22,480 --> 00:29:28,179
were facing is that we had a hundred

00:29:24,850 --> 00:29:30,190
thousand posts all having the same meta

00:29:28,179 --> 00:29:31,929
key even though meta values might have

00:29:30,190 --> 00:29:36,880
differed the problems that they all have

00:29:31,929 --> 00:29:37,900
the same meta key so you can increase

00:29:36,880 --> 00:29:39,610
your uniqueness

00:29:37,900 --> 00:29:42,159
limit your cardinality by getting

00:29:39,610 --> 00:29:43,809
creative with your medic ease so as an

00:29:42,159 --> 00:29:46,929
example let's think about post

00:29:43,809 --> 00:29:48,250
relationships you're you have two posts

00:29:46,929 --> 00:29:49,900
and you want to store a relationship

00:29:48,250 --> 00:29:52,870
between them like these are related

00:29:49,900 --> 00:29:54,789
posts and so the way that you might have

00:29:52,870 --> 00:29:57,340
done it is to have a medic give related

00:29:54,789 --> 00:30:01,299
posts and then store a value of the post

00:29:57,340 --> 00:30:04,480
ID like one two three four five instead

00:30:01,299 --> 00:30:07,530
of storing that key value combination

00:30:04,480 --> 00:30:10,750
you can store the key related post

00:30:07,530 --> 00:30:12,280
underscore Coast ID so related post one

00:30:10,750 --> 00:30:13,140
two three four five and then put

00:30:12,280 --> 00:30:18,210
anything you want in the

00:30:13,140 --> 00:30:20,520
and now your you have a much more

00:30:18,210 --> 00:30:23,429
uniqueness to that meta key in your meta

00:30:20,520 --> 00:30:26,850
queries are going to be significantly

00:30:23,429 --> 00:30:30,480
faster it's not gonna work in every case

00:30:26,850 --> 00:30:32,640
but this this comes up quite a bit I

00:30:30,480 --> 00:30:35,610
find that this this can be a really

00:30:32,640 --> 00:30:40,830
creative solution to to cutting down

00:30:35,610 --> 00:30:45,950
meta meta query time next is to leverage

00:30:40,830 --> 00:30:49,440
caching WordPress has a a cache system

00:30:45,950 --> 00:30:53,010
call it's transients API which is a a

00:30:49,440 --> 00:30:56,010
persistent cache that WordPress has out

00:30:53,010 --> 00:30:57,480
of the box the transients API might

00:30:56,010 --> 00:30:59,970
store data to the database it might

00:30:57,480 --> 00:31:01,559
store data to an external object cache

00:30:59,970 --> 00:31:04,080
if you have one installed like memcache

00:31:01,559 --> 00:31:07,799
or Redis but it's guaranteed to always

00:31:04,080 --> 00:31:09,690
be persistent here's an example of what

00:31:07,799 --> 00:31:12,450
that code might might look like to

00:31:09,690 --> 00:31:15,870
leverage the the transients API you have

00:31:12,450 --> 00:31:19,890
a cache key you load the transient with

00:31:15,870 --> 00:31:21,809
that cache key if the it's the the

00:31:19,890 --> 00:31:25,049
transient doesn't exist if the cache

00:31:21,809 --> 00:31:26,340
doesn't exist then you you generate you

00:31:25,049 --> 00:31:29,820
run your query you generate that data

00:31:26,340 --> 00:31:31,919
notice here I'm calling fields IDs when

00:31:29,820 --> 00:31:33,870
caching data you don't want to catch

00:31:31,919 --> 00:31:36,330
like entire objects or entire result

00:31:33,870 --> 00:31:39,090
sets you just want to cache a minimal

00:31:36,330 --> 00:31:41,760
amount of data the minimal amount that

00:31:39,090 --> 00:31:43,740
removes the heavy-lift in this case once

00:31:41,760 --> 00:31:49,980
we have the IDS we can inflate those

00:31:43,740 --> 00:31:51,360
later to using a get post and then we'd

00:31:49,980 --> 00:31:55,460
have to worry about caching these these

00:31:51,360 --> 00:31:58,919
massive WP post objects so in this case

00:31:55,460 --> 00:32:02,910
we're storing this query for for ten

00:31:58,919 --> 00:32:05,580
minutes but ideally you would even cache

00:32:02,910 --> 00:32:08,460
indefinitely and then only clear the

00:32:05,580 --> 00:32:10,799
cache when the data actually changes you

00:32:08,460 --> 00:32:13,110
can't take advantage of this always

00:32:10,799 --> 00:32:16,559
sometimes the the data is just a little

00:32:13,110 --> 00:32:18,870
bit too too fluid for that you can't you

00:32:16,559 --> 00:32:20,940
can't really surgically say whether or

00:32:18,870 --> 00:32:23,550
not the the cache should have changed

00:32:20,940 --> 00:32:25,500
but in cases where you can there's an

00:32:23,550 --> 00:32:26,440
action in clean post cache which will

00:32:25,500 --> 00:32:28,480
fire anytime

00:32:26,440 --> 00:32:31,899
WordPress knows it needs to clean a post

00:32:28,480 --> 00:32:34,509
cache and it passes the post ID and the

00:32:31,899 --> 00:32:36,700
post through that action so here we

00:32:34,509 --> 00:32:38,409
might run some logic determining if the

00:32:36,700 --> 00:32:43,149
cache should actually clear and then

00:32:38,409 --> 00:32:46,330
once it does delete our transient the

00:32:43,149 --> 00:32:48,059
problem with caching is that you end up

00:32:46,330 --> 00:32:50,470
with an unlucky user here and there

00:32:48,059 --> 00:32:52,240
somebody goes to your site there is no

00:32:50,470 --> 00:32:56,529
cache so they're the ones who trigger

00:32:52,240 --> 00:33:00,370
the the heavy query that that takes a

00:32:56,529 --> 00:33:03,250
long time so if you don't want any

00:33:00,370 --> 00:33:05,350
unlucky users to have to do this one

00:33:03,250 --> 00:33:09,789
approach is to kick off an asynchronous

00:33:05,350 --> 00:33:11,769
tasks using WP cron to pre-warm that

00:33:09,789 --> 00:33:14,110
cache behind-the-scenes let the server

00:33:11,769 --> 00:33:16,840
have to be the the unlucky user who

00:33:14,110 --> 00:33:18,820
warms that cache of a very simple

00:33:16,840 --> 00:33:22,360
example of what this might look like so

00:33:18,820 --> 00:33:24,070
on safe post you know here we've

00:33:22,360 --> 00:33:27,070
probably run some some logic to

00:33:24,070 --> 00:33:28,990
determine if we should actually pre warm

00:33:27,070 --> 00:33:32,320
the cache a result of this post saving

00:33:28,990 --> 00:33:34,120
but then we run WP schedule single event

00:33:32,320 --> 00:33:36,340
this is this is not gonna schedule a

00:33:34,120 --> 00:33:38,710
recurring event just a single event I'm

00:33:36,340 --> 00:33:40,179
setting it to five seconds from now in

00:33:38,710 --> 00:33:42,549
other words like right after this

00:33:40,179 --> 00:33:46,139
request finishes run this and it's

00:33:42,549 --> 00:33:48,909
firing the action warm cache and then on

00:33:46,139 --> 00:33:51,879
when the cron runs when warm cash buyers

00:33:48,909 --> 00:33:57,940
then I can run my laborious query and

00:33:51,879 --> 00:33:59,500
and cache the results there since we

00:33:57,940 --> 00:34:03,100
know that meta queries are slower than

00:33:59,500 --> 00:34:05,769
taxonomy queries for the most part we

00:34:03,100 --> 00:34:07,990
can convert meta queries to taxonomy

00:34:05,769 --> 00:34:11,069
queries from time to time sometimes meta

00:34:07,990 --> 00:34:13,329
may make more sense as taxonomy terms I

00:34:11,069 --> 00:34:16,329
think one thing that gets in a lot of

00:34:13,329 --> 00:34:18,190
people's way is the admin presentation I

00:34:16,329 --> 00:34:20,560
have a meta box with a text field that

00:34:18,190 --> 00:34:22,300
should go to post meta doesn't have to

00:34:20,560 --> 00:34:25,419
you can save that to a taxonomy term

00:34:22,300 --> 00:34:28,480
instead you control the data so you know

00:34:25,419 --> 00:34:32,020
know thy data and store it in the way

00:34:28,480 --> 00:34:33,570
that's going to ends for using it down

00:34:32,020 --> 00:34:35,710
the road

00:34:33,570 --> 00:34:38,140
another trick related to this I like to

00:34:35,710 --> 00:34:42,100
employ is hidden taxonomy so taxonomy is

00:34:38,140 --> 00:34:44,800
that have public set to false and and or

00:34:42,100 --> 00:34:46,330
show you I set to false the user is

00:34:44,800 --> 00:34:48,460
using the WordPress admin have no idea

00:34:46,330 --> 00:34:52,630
that this taxonomy exists it only exists

00:34:48,460 --> 00:34:53,980
behind the scenes and then on front-end

00:34:52,630 --> 00:34:57,730
queries we can use it we can take

00:34:53,980 --> 00:35:00,910
advantage of it but it might make sense

00:34:57,730 --> 00:35:02,830
to do that to duplicate some data that

00:35:00,910 --> 00:35:04,600
we know we can do a faster taxonomy

00:35:02,830 --> 00:35:09,700
query then we put a meta query or

00:35:04,600 --> 00:35:10,990
something else and then sometimes you'll

00:35:09,700 --> 00:35:13,200
just in kind of situation where my

00:35:10,990 --> 00:35:15,730
sequel is not well-suited for their job

00:35:13,200 --> 00:35:19,780
search queries were one of those

00:35:15,730 --> 00:35:22,120
examples but there there are others

00:35:19,780 --> 00:35:24,490
really complex queries where you just

00:35:22,120 --> 00:35:27,730
can't help that it's gonna be a medic

00:35:24,490 --> 00:35:29,950
query with a lot of rows elasticsearch

00:35:27,730 --> 00:35:31,480
is a dedicated search engine but not

00:35:29,950 --> 00:35:33,100
just for keyword searches don't think

00:35:31,480 --> 00:35:34,900
about like Google's text box how you

00:35:33,100 --> 00:35:36,700
type in anything I want it's also good

00:35:34,900 --> 00:35:38,350
for structured searches every database

00:35:36,700 --> 00:35:41,260
crew that we've looked at so far I would

00:35:38,350 --> 00:35:43,540
call a structured search find all posts

00:35:41,260 --> 00:35:44,800
where the post type is post in the post

00:35:43,540 --> 00:35:46,390
status is blah blah blah

00:35:44,800 --> 00:35:47,800
that's a structured search elastic

00:35:46,390 --> 00:35:51,250
search is really fast with this an

00:35:47,800 --> 00:35:53,430
elastic search and my sequel are pretty

00:35:51,250 --> 00:35:56,770
complementary software titles

00:35:53,430 --> 00:35:59,140
software platforms we use them side by

00:35:56,770 --> 00:36:01,390
side all the time and find that when

00:35:59,140 --> 00:36:03,970
bicycle can't get a job done elastic

00:36:01,390 --> 00:36:05,530
search is is really good at it some five

00:36:03,970 --> 00:36:07,900
or six years ago I put together a couple

00:36:05,530 --> 00:36:10,420
of plugins ones called search press here

00:36:07,900 --> 00:36:14,320
there's es WP query that that help you

00:36:10,420 --> 00:36:17,160
do that so that's all I got we got five

00:36:14,320 --> 00:36:22,460
minutes for questions

00:36:17,160 --> 00:36:23,260
anyone have any questions yes

00:36:22,460 --> 00:36:26,369
[Music]

00:36:23,260 --> 00:36:26,369
[Applause]

00:36:28,190 --> 00:36:40,619
utilize my sequel yeah so the question

00:36:38,069 --> 00:36:41,069
is what about for the purpose of the

00:36:40,619 --> 00:36:43,440
video

00:36:41,069 --> 00:36:45,809
what about search plugins that leverage

00:36:43,440 --> 00:36:48,359
my sequel do you know perhaps like

00:36:45,809 --> 00:36:51,180
keyword indexing tables instead of

00:36:48,359 --> 00:36:52,410
having to use an external another

00:36:51,180 --> 00:36:54,660
service that you have to maintain

00:36:52,410 --> 00:36:59,099
support make sure it's running yada yada

00:36:54,660 --> 00:37:03,510
yada like elasticsearch personally I've

00:36:59,099 --> 00:37:06,180
not used them it's it's a great idea and

00:37:03,510 --> 00:37:08,940
if it works for you then that's that's

00:37:06,180 --> 00:37:13,740
awesome I I recommend giving it a shot

00:37:08,940 --> 00:37:15,329
and at the end of the day all all these

00:37:13,740 --> 00:37:16,980
things WordPress and all the plugins

00:37:15,329 --> 00:37:19,230
these are all tools in the tool belt

00:37:16,980 --> 00:37:21,930
find the tool that works best for for

00:37:19,230 --> 00:37:24,720
your particular use case and you know

00:37:21,930 --> 00:37:28,559
run with it so I booked out I think it

00:37:24,720 --> 00:37:30,059
was WP search I want to say is is one

00:37:28,559 --> 00:37:32,160
that that does that it creates

00:37:30,059 --> 00:37:35,460
additional tables and it does keyword

00:37:32,160 --> 00:37:36,720
indexing I haven't you know again I

00:37:35,460 --> 00:37:40,230
haven't used it myself but at a high

00:37:36,720 --> 00:37:43,339
level it looks pretty solid I saw

00:37:40,230 --> 00:37:43,339
another hand yeah

00:37:47,230 --> 00:37:54,440
but situation that I keep like just

00:37:50,360 --> 00:37:58,730
really keep running into our queries

00:37:54,440 --> 00:38:05,300
where I need to order by a meta FAL you

00:37:58,730 --> 00:38:07,340
that may or may not exist so way for

00:38:05,300 --> 00:38:11,970
instance like ordering a query of users

00:38:07,340 --> 00:38:17,010
by like the active

00:38:11,970 --> 00:38:20,630
like some users that feel some if you

00:38:17,010 --> 00:38:29,870
would like read into that found a way to

00:38:20,630 --> 00:38:29,870
make those very efficient I like to use

00:38:37,180 --> 00:38:47,240
yeah so the question is how about

00:38:43,510 --> 00:38:51,290
sorting by meta values that might not

00:38:47,240 --> 00:38:56,090
exist performant ways to to accomplish

00:38:51,290 --> 00:39:00,220
that this is another situation of node I

00:38:56,090 --> 00:39:04,280
data sometimes it'll it'll make sense to

00:39:00,220 --> 00:39:06,920
always store a meta value on that key

00:39:04,280 --> 00:39:09,560
whether you want it to exist or not and

00:39:06,920 --> 00:39:11,869
then running like a WP CLI queries some

00:39:09,560 --> 00:39:14,600
sort of bulk operation to backfill all

00:39:11,869 --> 00:39:17,540
posts that that might need that so that

00:39:14,600 --> 00:39:19,820
you so that you know that there's always

00:39:17,540 --> 00:39:21,740
gonna be a value there sometimes you

00:39:19,820 --> 00:39:26,600
know just an empty string knowing that's

00:39:21,740 --> 00:39:27,680
there is is all you need if you know

00:39:26,600 --> 00:39:29,990
that your result set is gonna be

00:39:27,680 --> 00:39:33,140
relatively small another option is to do

00:39:29,990 --> 00:39:35,180
that that sorting and filtering in PHP

00:39:33,140 --> 00:39:36,590
just return the full data set if you're

00:39:35,180 --> 00:39:38,630
not returning a hundred thousand rows

00:39:36,590 --> 00:39:42,230
like I was and you're instead returning

00:39:38,630 --> 00:39:44,810
like you know maybe a hundred it's it's

00:39:42,230 --> 00:39:47,630
fine to do that that sorting and

00:39:44,810 --> 00:39:50,660
limiting in PHP and you know it'll

00:39:47,630 --> 00:39:52,369
probably be a lot easier a lot easier

00:39:50,660 --> 00:39:57,710
and probably more performant than trying

00:39:52,369 --> 00:39:59,960
to do an additional database query those

00:39:57,710 --> 00:40:01,930
are probably my best suggestions does

00:39:59,960 --> 00:40:06,340
that help cool

00:40:01,930 --> 00:40:06,340
any more questions yes

00:40:14,509 --> 00:40:18,390
that's a great question yeah I probably

00:40:16,680 --> 00:40:19,769
should have mentioned like some plugins

00:40:18,390 --> 00:40:21,599
you can use to look at real world

00:40:19,769 --> 00:40:23,279
queries so the question is what tools

00:40:21,599 --> 00:40:25,769
can we use to look at database queries

00:40:23,279 --> 00:40:29,729
in the wild so that we can pull them out

00:40:25,769 --> 00:40:31,949
we can benchmark etc one of my favorite

00:40:29,729 --> 00:40:34,769
WordPress plugins is query monitor by

00:40:31,949 --> 00:40:37,799
John Blackburn that's what I used to

00:40:34,769 --> 00:40:39,959
crib these berries from from my site the

00:40:37,799 --> 00:40:42,719
debug bar plug-in is another option that

00:40:39,959 --> 00:40:43,859
will list all your database queries you

00:40:42,719 --> 00:40:45,809
can also if you can connect to your

00:40:43,859 --> 00:40:47,999
database server the command show

00:40:45,809 --> 00:40:49,619
processed list or show full processes

00:40:47,999 --> 00:40:52,289
will show you all the queries that are

00:40:49,619 --> 00:40:53,670
running at a given time and so you you

00:40:52,289 --> 00:40:54,779
can pretty easily identify they're

00:40:53,670 --> 00:40:57,619
really bad ones

00:40:54,779 --> 00:41:00,749
since most queries are like just a few

00:40:57,619 --> 00:41:02,249
singular milliseconds you you have to

00:41:00,749 --> 00:41:03,599
like hit the command at the exact right

00:41:02,249 --> 00:41:07,199
time to see that it's running because

00:41:03,599 --> 00:41:08,699
again it's like that but the really bad

00:41:07,199 --> 00:41:10,769
queries that take multiple seconds to

00:41:08,699 --> 00:41:13,609
run it's pretty easy to target them when

00:41:10,769 --> 00:41:18,869
you when you do a show full process list

00:41:13,609 --> 00:41:21,989
and xdebug can do profiling that will

00:41:18,869 --> 00:41:24,779
give you a lot more information than the

00:41:21,989 --> 00:41:27,239
needy but it'll help you target database

00:41:24,779 --> 00:41:31,049
queries as well and external services

00:41:27,239 --> 00:41:33,269
like New Relic for instance are just

00:41:31,049 --> 00:41:36,269
immensely helpful for that New Relic can

00:41:33,269 --> 00:41:37,949
do full page profiling on it'll you know

00:41:36,269 --> 00:41:39,179
you can set targets and say any page

00:41:37,949 --> 00:41:41,969
that takes longer than a second to run

00:41:39,179 --> 00:41:44,069
you know flag it and it'll do a full

00:41:41,969 --> 00:41:46,079
stack profile of what took time in that

00:41:44,069 --> 00:41:48,239
request like it'll go into which

00:41:46,079 --> 00:41:49,949
functions in PHP took the most time and

00:41:48,239 --> 00:41:52,829
it'll pull out which database queries or

00:41:49,949 --> 00:41:55,170
which external API services anytime I

00:41:52,829 --> 00:41:57,239
have a page running slow if I have new

00:41:55,170 --> 00:42:01,619
outlook active that's the first place

00:41:57,239 --> 00:42:03,959
that I like we're probably about out of

00:42:01,619 --> 00:42:05,759
time but any more questions try to

00:42:03,959 --> 00:42:08,369
squeeze one more in before they kick me

00:42:05,759 --> 00:42:10,349
out awesome

00:42:08,369 --> 00:42:12,420
well I'm here all day and I'll be at the

00:42:10,349 --> 00:42:13,960
after-party I'd love to answer you know

00:42:12,420 --> 00:42:15,640
any more questions you might have that

00:42:13,960 --> 00:42:25,150
throughout the day thank you all very

00:42:15,640 --> 00:42:28,320
much and again there's the the URL to

00:42:25,150 --> 00:42:28,320

YouTube URL: https://www.youtube.com/watch?v=4a-zctB2ETw


