Title: Christopher Tousignant: React To Gutenberg
Publication date: 2019-04-13
Playlist: WordCamp Portland ME 2018
Description: 
	An intro to React JS Framework and how it relates to Gutenberg. We will discuss React Core Concepts such as JSX, compontents and props, state and lifecycle, handling events, and lifting state.

WPTV link: https://wordpress.tv/2019/02/01/christopher-tousignant-react-to-gutenberg/
Captions: 
	00:00:03,580 --> 00:00:09,639
I is a web development and digital

00:00:07,359 --> 00:00:13,450
marketing agency we work in several

00:00:09,639 --> 00:00:16,150
platforms such as tentacle Umbraco site

00:00:13,450 --> 00:00:19,150
coir and jute and Drupal and then of

00:00:16,150 --> 00:00:22,779
course we also work in WordPress another

00:00:19,150 --> 00:00:24,730
world I have wake fly is I'm get to be

00:00:22,779 --> 00:00:26,949
their evangelist and WordPress so that

00:00:24,730 --> 00:00:30,159
means I get to learn the ins and outs of

00:00:26,949 --> 00:00:32,349
what WordPress is and how to use it so

00:00:30,159 --> 00:00:34,540
about a year ago they started to

00:00:32,349 --> 00:00:37,539
introduce Gutenberg so I sat down to

00:00:34,540 --> 00:00:39,250
begin to learn it and what I found was I

00:00:37,539 --> 00:00:42,309
was able to do some really simple things

00:00:39,250 --> 00:00:44,649
with it such as create a text box but I

00:00:42,309 --> 00:00:45,609
wasn't able to do more complicated

00:00:44,649 --> 00:00:47,679
things because I was just getting

00:00:45,609 --> 00:00:50,109
confused with how to do it what it was

00:00:47,679 --> 00:00:51,820
how it was doing what it was doing so

00:00:50,109 --> 00:00:53,859
when you get confused by something you

00:00:51,820 --> 00:00:55,510
know open the source code and as soon as

00:00:53,859 --> 00:00:57,219
we open that source code what we

00:00:55,510 --> 00:00:59,530
realized was that Gutenberg is just

00:00:57,219 --> 00:01:01,570
react and so as we started to learn

00:00:59,530 --> 00:01:04,059
react a lot of things about Gutenberg

00:01:01,570 --> 00:01:05,530
just became understandable and we're

00:01:04,059 --> 00:01:07,300
able to start doing things that we

00:01:05,530 --> 00:01:09,100
wanted to do and that's actually the

00:01:07,300 --> 00:01:11,590
real goal of this presentation today

00:01:09,100 --> 00:01:13,810
it's not to teach Gutenberg it's not to

00:01:11,590 --> 00:01:15,790
make you experts that react is to start

00:01:13,810 --> 00:01:17,920
to introduce you to core concepts that

00:01:15,790 --> 00:01:23,860
we found useful as we were learning

00:01:17,920 --> 00:01:26,470
Gutenberg so these are just some links

00:01:23,860 --> 00:01:28,630
for you guys the first one is questions

00:01:26,470 --> 00:01:31,000
if you have any questions that QR will

00:01:28,630 --> 00:01:32,830
be throughout the presentation you can

00:01:31,000 --> 00:01:35,740
take a screenshot of it and it will

00:01:32,830 --> 00:01:38,110
expose a form for you I and will be able

00:01:35,740 --> 00:01:40,480
to put your question up on the screen at

00:01:38,110 --> 00:01:41,410
the end of the presentation we also have

00:01:40,480 --> 00:01:43,960
helpful resources

00:01:41,410 --> 00:01:45,760
that's just our blog that we wrote um

00:01:43,960 --> 00:01:46,450
and it's just a lot of useful

00:01:45,760 --> 00:01:48,370
information

00:01:46,450 --> 00:01:51,480
Gutenberg's tutorials and documentation

00:01:48,370 --> 00:01:53,710
has gotten really good so those are some

00:01:51,480 --> 00:01:55,120
you know resources that we thought would

00:01:53,710 --> 00:01:57,250
be useful for you guys as you learn

00:01:55,120 --> 00:01:59,410
Gutenberg in react and the last one is

00:01:57,250 --> 00:02:01,090
just the presentation itself we are

00:01:59,410 --> 00:02:03,520
making these slides available for you so

00:02:01,090 --> 00:02:07,780
if you want them you guys are welcome to

00:02:03,520 --> 00:02:10,420
them and what we'll cover we're gonna

00:02:07,780 --> 00:02:12,190
cover a Gutenberg really quick just kind

00:02:10,420 --> 00:02:13,240
of what it is we're gonna take a quick

00:02:12,190 --> 00:02:14,860
look at JSX

00:02:13,240 --> 00:02:18,720
and then we're gonna go into some

00:02:14,860 --> 00:02:18,720
reactor core come for our concepts

00:02:19,439 --> 00:02:25,510
so what is Guttenberg Gutenberg's about

00:02:22,360 --> 00:02:27,459
to be released November 19th so it's

00:02:25,510 --> 00:02:30,730
coming out quick and what it is it is

00:02:27,459 --> 00:02:34,360
wordpress is new content editor so if we

00:02:30,730 --> 00:02:36,310
take a quick peek with my mouse at this

00:02:34,360 --> 00:02:38,650
this is just a video of me just kind of

00:02:36,310 --> 00:02:41,079
messing around with Guttenberg itself oh

00:02:38,650 --> 00:02:44,500
if we just take a quick peek so this is

00:02:41,079 --> 00:02:46,030
a brand new editor that we see here on

00:02:44,500 --> 00:02:47,980
the right hand we have our document

00:02:46,030 --> 00:02:49,780
fields and then we also have our block

00:02:47,980 --> 00:02:52,239
fields we don't have a block selected

00:02:49,780 --> 00:02:55,900
yet and we just gonna throw in a quick

00:02:52,239 --> 00:02:58,389
title real quick and then if we hit the

00:02:55,900 --> 00:03:00,970
plus mark on the top hand side what we

00:02:58,389 --> 00:03:02,950
see are all these blocks and WordPress

00:03:00,970 --> 00:03:05,739
organizes these blocks into different

00:03:02,950 --> 00:03:10,859
categories and these blocks will later

00:03:05,739 --> 00:03:10,859
on be able to use to create page content

00:03:16,780 --> 00:03:20,380
and then I know it's hard to read but

00:03:18,670 --> 00:03:22,840
those last two categories with widgets

00:03:20,380 --> 00:03:24,970
and embeds for anyone that's used to

00:03:22,840 --> 00:03:26,800
WordPress right now those are indeed the

00:03:24,970 --> 00:03:28,450
same exact widgets and bids that already

00:03:26,800 --> 00:03:31,360
exists it's just we've written into our

00:03:28,450 --> 00:03:32,800
Guttenberg so what we're gonna do is

00:03:31,360 --> 00:03:35,500
we're just gonna drop a paragraph on a

00:03:32,800 --> 00:03:39,640
page I put some text in it hello I'm a

00:03:35,500 --> 00:03:41,770
paragraph and then when we then we can

00:03:39,640 --> 00:03:44,170
expose the editor control and these are

00:03:41,770 --> 00:03:49,150
just little editors we can do alignment

00:03:44,170 --> 00:03:51,190
um you know Dilli add make it bold and

00:03:49,150 --> 00:03:52,750
then on the right hand side we have more

00:03:51,190 --> 00:03:55,690
controls where we can control things

00:03:52,750 --> 00:03:57,820
like the color the text size class name

00:03:55,690 --> 00:03:59,650
and for developer you actually have

00:03:57,820 --> 00:04:03,010
control over all of this you'll be able

00:03:59,650 --> 00:04:04,959
to add your own controls and kind of

00:04:03,010 --> 00:04:07,000
create the whole system that you want in

00:04:04,959 --> 00:04:08,650
this case I'm actually exposing a drop

00:04:07,000 --> 00:04:10,750
case I kind of just want to demonstrate

00:04:08,650 --> 00:04:12,489
that when you click into it that drop

00:04:10,750 --> 00:04:14,530
case disappears when you click out it

00:04:12,489 --> 00:04:16,269
will come back it just makes it easier

00:04:14,530 --> 00:04:21,549
for editor not to have to edit with a

00:04:16,269 --> 00:04:23,830
drop drop case in there and then the

00:04:21,549 --> 00:04:25,510
next thing we have is transforms and

00:04:23,830 --> 00:04:26,710
this is a really cool part is that we

00:04:25,510 --> 00:04:28,660
can take one block and we can't

00:04:26,710 --> 00:04:30,250
transform it but turn it into a null box

00:04:28,660 --> 00:04:37,060
so we took this paragraph block and we

00:04:30,250 --> 00:04:38,740
just turned it into a hitter we're just

00:04:37,060 --> 00:04:40,150
gonna quickly throw on another block and

00:04:38,740 --> 00:04:42,640
this block we're actually gonna review

00:04:40,150 --> 00:04:48,160
again later it's just the recent post

00:04:42,640 --> 00:04:49,690
block and again we have fields on the

00:04:48,160 --> 00:04:51,729
right-hand side where we can kind of

00:04:49,690 --> 00:04:53,110
control what we want we're going to

00:04:51,729 --> 00:04:54,610
reorder it real quick

00:04:53,110 --> 00:04:59,919
we're gonna take a look at the

00:04:54,610 --> 00:05:04,510
categories and then we can add a larger

00:04:59,919 --> 00:05:06,520
amount of posts and then it's important

00:05:04,510 --> 00:05:11,050
to note that I also added the date of

00:05:06,520 --> 00:05:12,790
the post here I actually just realized

00:05:11,050 --> 00:05:14,680
that how many blocks I actually put on

00:05:12,790 --> 00:05:15,760
or how many posts actually put on so

00:05:14,680 --> 00:05:18,090
we're just gonna bump that down a little

00:05:15,760 --> 00:05:18,090
bit

00:05:18,759 --> 00:05:22,449
and then a lot better so the next thing

00:05:20,979 --> 00:05:24,279
we can do with blocks with Guttenberg is

00:05:22,449 --> 00:05:26,889
that we can rearrange them so we're just

00:05:24,279 --> 00:05:28,689
gonna drop that hitter below um the

00:05:26,889 --> 00:05:30,909
recent post and as you see it's really

00:05:28,689 --> 00:05:32,919
that easy the next thing is we can

00:05:30,909 --> 00:05:37,509
insert blocks before block or after

00:05:32,919 --> 00:05:39,729
block and we're just gonna answer ed

00:05:37,509 --> 00:05:41,680
movie as a paragraph but we can change

00:05:39,729 --> 00:05:42,819
that to anything um and so what we're

00:05:41,680 --> 00:05:46,029
gonna do is we're just gonna add an

00:05:42,819 --> 00:05:47,229
image block real quick and then the last

00:05:46,029 --> 00:05:48,909
thing I just wanted to demonstrate is

00:05:47,229 --> 00:05:50,529
that after we add this image block if we

00:05:48,909 --> 00:05:53,759
decide that we didn't want it we could

00:05:50,529 --> 00:05:53,759
easily delete it as well

00:06:00,310 --> 00:06:05,570
so that's the new Gutenberg editor for a

00:06:03,650 --> 00:06:07,340
content editor it's just a system of

00:06:05,570 --> 00:06:09,889
blocks that you can use to create page

00:06:07,340 --> 00:06:12,500
content for developer it's a system of

00:06:09,889 --> 00:06:14,900
blocks written in react with an

00:06:12,500 --> 00:06:16,370
abstraction layer written over it up and

00:06:14,900 --> 00:06:18,290
that's what Gutenberg will provide and

00:06:16,370 --> 00:06:20,000
for most people that abstraction layer

00:06:18,290 --> 00:06:21,770
is what you're going to focus on when

00:06:20,000 --> 00:06:23,480
you read tutorials and pull the most

00:06:21,770 --> 00:06:24,919
part when you write Gutenberg blocks you

00:06:23,480 --> 00:06:27,550
can pretty much stay within that

00:06:24,919 --> 00:06:27,550
abstraction layer

00:06:33,470 --> 00:06:38,750
okay so we're does react direct was

00:06:35,750 --> 00:06:41,390
developed by Facebook in 2011 and it's

00:06:38,750 --> 00:06:43,880
just a JavaScript library and it's

00:06:41,390 --> 00:06:47,420
designed to be able to build useful our

00:06:43,880 --> 00:06:48,950
interactive user interfaces and in the

00:06:47,420 --> 00:06:51,170
end where that cut boils down to it's

00:06:48,950 --> 00:06:53,330
just nest able component it has a root

00:06:51,170 --> 00:06:55,760
component and that root component will

00:06:53,330 --> 00:07:00,080
contain child components and it'll build

00:06:55,760 --> 00:07:02,030
out into a tree and this is what I mean

00:07:00,080 --> 00:07:04,220
by that and this is actually that recent

00:07:02,030 --> 00:07:06,140
post block that we just looked at so if

00:07:04,220 --> 00:07:09,410
we took a look at how they built this in

00:07:06,140 --> 00:07:11,690
react we actually have a root component

00:07:09,410 --> 00:07:13,670
called fragment right here and then we

00:07:11,690 --> 00:07:15,590
have an unordered list and that

00:07:13,670 --> 00:07:18,200
unordered list can contain a variety

00:07:15,590 --> 00:07:20,420
number of list items and then each list

00:07:18,200 --> 00:07:22,910
item could have an anchor and remember

00:07:20,420 --> 00:07:26,570
when we added the date that would add a

00:07:22,910 --> 00:07:28,640
time component as well and so this is

00:07:26,570 --> 00:07:30,740
just what we mean by a tree the other

00:07:28,640 --> 00:07:32,720
thing to know about this tree is that in

00:07:30,740 --> 00:07:35,420
terms of data is only directional so

00:07:32,720 --> 00:07:36,920
data should flow from the top down so

00:07:35,420 --> 00:07:38,330
let's just start at the fragment and it

00:07:36,920 --> 00:07:43,100
should flow down all the way to the

00:07:38,330 --> 00:07:44,300
anchors and the time next what is just X

00:07:43,100 --> 00:07:46,460
and I'm just throwing this in there

00:07:44,300 --> 00:07:48,560
because we're gonna see JSX throughout

00:07:46,460 --> 00:07:50,930
these examples if you open up Gutenberg

00:07:48,560 --> 00:07:53,840
they write in JSX if you open up most

00:07:50,930 --> 00:07:57,020
react apps they also are in JSX as well

00:07:53,840 --> 00:07:59,470
so JSX is just an XML HTML like syntax

00:07:57,020 --> 00:08:02,480
that's used to extend Ackman script um

00:07:59,470 --> 00:08:05,210
it's actually very visual it's very

00:08:02,480 --> 00:08:07,280
verbose and anyone that has worked with

00:08:05,210 --> 00:08:10,430
HTML should be able to recognize it

00:08:07,280 --> 00:08:12,500
right away the next thing is its

00:08:10,430 --> 00:08:15,169
intended to be used with a preprocessor

00:08:12,500 --> 00:08:16,810
such as babel so you write in JSX and

00:08:15,169 --> 00:08:20,120
you compile it back down to JavaScript

00:08:16,810 --> 00:08:22,250
and the two important things to know

00:08:20,120 --> 00:08:24,530
which is X is while you're writing in

00:08:22,250 --> 00:08:26,690
JavaScript if you want to add JSX you

00:08:24,530 --> 00:08:29,150
would delineate it with smooth brackets

00:08:26,690 --> 00:08:31,700
and if you are in jail sex and you want

00:08:29,150 --> 00:08:33,680
to add JavaScript you would delineate it

00:08:31,700 --> 00:08:36,620
with curly brackets

00:08:33,680 --> 00:08:37,849
and this is what we mean by right this

00:08:36,620 --> 00:08:45,490
is what we mean right here

00:08:37,849 --> 00:08:45,490
and is this readable keep not really

00:08:48,630 --> 00:08:58,110
I'm just gonna edit this real quick I'm

00:08:54,730 --> 00:08:58,110
just gonna make this big for you guys

00:09:05,910 --> 00:09:10,890
so if we look if we look at this code

00:09:08,840 --> 00:09:13,650
ignore this right here this is actually

00:09:10,890 --> 00:09:15,650
babble I'll expand that out later but if

00:09:13,650 --> 00:09:18,900
we just look at this we have a var list

00:09:15,650 --> 00:09:22,770
and then inside our list we have a div

00:09:18,900 --> 00:09:24,990
node we have a h3 node a you-all node

00:09:22,770 --> 00:09:26,580
and Ally node and the important things

00:09:24,990 --> 00:09:29,400
to know about this note these nodes

00:09:26,580 --> 00:09:31,890
again is that it's not HTML it is a

00:09:29,400 --> 00:09:34,230
react node and it's important to know

00:09:31,890 --> 00:09:36,930
because react nodes don't get witnessed

00:09:34,230 --> 00:09:38,970
straight to the to the Dom and actually

00:09:36,930 --> 00:09:40,470
gets rid rendered to a virtual Dom first

00:09:38,970 --> 00:09:42,750
and then react there's a lot of

00:09:40,470 --> 00:09:45,090
comparisons to figure out what has

00:09:42,750 --> 00:09:48,120
changed and enact that change on the Dom

00:09:45,090 --> 00:09:50,820
at that point the last thing we do is if

00:09:48,120 --> 00:09:54,690
we just call react Dom render we passed

00:09:50,820 --> 00:09:56,460
it a list and then we attach it to the

00:09:54,690 --> 00:09:58,800
element that we want in this case we

00:09:56,460 --> 00:10:01,260
just attach it to app and really that's

00:09:58,800 --> 00:10:04,350
what JSX is and as you can tell you a

00:10:01,260 --> 00:10:07,170
very similar to HTML and if we were to

00:10:04,350 --> 00:10:09,650
compile JSX down again if you just

00:10:07,170 --> 00:10:09,650
excuse me

00:10:22,810 --> 00:10:26,380
this is what we get

00:10:26,760 --> 00:10:31,260
and as you can anyone that knows

00:10:29,610 --> 00:10:33,300
JavaScript would immediately recognize

00:10:31,260 --> 00:10:35,760
this as just JavaScript that's all it is

00:10:33,300 --> 00:10:38,699
we took that JSX we ran it through Babel

00:10:35,760 --> 00:10:40,589
and output a JavaScript for us so you

00:10:38,699 --> 00:10:42,690
technically don't need to use JSX with

00:10:40,589 --> 00:10:44,760
Reax but as you can see that it's just a

00:10:42,690 --> 00:10:46,589
lot more readable you could use

00:10:44,760 --> 00:10:52,110
JavaScript but then it just gets really

00:10:46,589 --> 00:10:52,980
complicated to read at points so getting

00:10:52,110 --> 00:10:56,100
into react

00:10:52,980 --> 00:10:58,320
um and what react is it's just a logical

00:10:56,100 --> 00:11:00,510
grouping of notes you know so when we

00:10:58,320 --> 00:11:02,459
saw that recent post it was it was a

00:11:00,510 --> 00:11:04,589
logical grouping it had the fragments

00:11:02,459 --> 00:11:07,199
that had the unordered list it had the

00:11:04,589 --> 00:11:09,329
Allies you know so if we looked at the

00:11:07,199 --> 00:11:11,070
example last last slide it was just a

00:11:09,329 --> 00:11:13,920
div containing h3s

00:11:11,070 --> 00:11:15,990
um you know so it's just a logical

00:11:13,920 --> 00:11:18,570
grouping of notes it usually it

00:11:15,990 --> 00:11:22,199
represents an independent and reasonable

00:11:18,570 --> 00:11:24,240
part of a UI and most typically contains

00:11:22,199 --> 00:11:27,329
some sort of state and will actually

00:11:24,240 --> 00:11:28,920
give you the state in a little bit the

00:11:27,329 --> 00:11:31,519
other thing about component it must

00:11:28,920 --> 00:11:35,160
accept an arbitrary input called props

00:11:31,519 --> 00:11:36,810
and then it outputs a react node and I

00:11:35,160 --> 00:11:39,779
say we act no but that's actually kind

00:11:36,810 --> 00:11:41,370
of false you can also output no and I'm

00:11:39,779 --> 00:11:43,949
just bringing that up because for

00:11:41,370 --> 00:11:45,480
WordPress it's a little bit important

00:11:43,949 --> 00:11:49,260
because if you pass null you're actually

00:11:45,480 --> 00:11:53,300
indicating you want your your component

00:11:49,260 --> 00:11:55,800
to load with PHP instead of JavaScript

00:11:53,300 --> 00:11:57,389
the last thing as we keep talking about

00:11:55,800 --> 00:11:58,769
is components can contain other

00:11:57,389 --> 00:12:03,870
opponents and it creates a component

00:11:58,769 --> 00:12:06,029
tree so if we look at what could the

00:12:03,870 --> 00:12:07,170
component code would look like if we we

00:12:06,029 --> 00:12:10,139
can see that we have a class called

00:12:07,170 --> 00:12:12,990
clock and we just we extend react node

00:12:10,139 --> 00:12:15,750
and we have a vendor function within it

00:12:12,990 --> 00:12:17,910
and all we're returning is a JSX node

00:12:15,750 --> 00:12:20,279
and that's that p tag right there and

00:12:17,910 --> 00:12:23,160
we're just adding in you know the

00:12:20,279 --> 00:12:25,260
current data the current time and the

00:12:23,160 --> 00:12:28,740
sample on the right is what the time was

00:12:25,260 --> 00:12:31,769
when I did this and then we render it

00:12:28,740 --> 00:12:34,079
and we just call like a HTML attribute

00:12:31,769 --> 00:12:37,589
we just call clock within react on

00:12:34,079 --> 00:12:39,329
render and that's how simple a component

00:12:37,589 --> 00:12:40,260
is and in the end when we look at

00:12:39,329 --> 00:12:43,530
Gutenberg blog

00:12:40,260 --> 00:12:45,930
a Guttenberg block is a component this

00:12:43,530 --> 00:12:47,400
is a component right here so this is in

00:12:45,930 --> 00:12:53,280
the end this is really how simple it can

00:12:47,400 --> 00:12:55,170
be so when we have that clock you know

00:12:53,280 --> 00:12:56,970
we weren't passing any data to it so it

00:12:55,170 --> 00:13:00,450
can be pretty useless so how do we pass

00:12:56,970 --> 00:13:02,730
data to a react component and we would

00:13:00,450 --> 00:13:04,830
actually use props and props is just

00:13:02,730 --> 00:13:07,290
like an arbitrary input as we mentioned

00:13:04,830 --> 00:13:08,450
earlier it kind of that you can get kind

00:13:07,290 --> 00:13:10,710
of think of it as it provides

00:13:08,450 --> 00:13:13,400
configuration values for the component

00:13:10,710 --> 00:13:17,820
it functions similar to our HTML

00:13:13,400 --> 00:13:20,850
attributes and inside the vehicle is

00:13:17,820 --> 00:13:22,680
successful through this stop drops the

00:13:20,850 --> 00:13:25,170
most important thing to know about props

00:13:22,680 --> 00:13:27,060
is that they are immutable the data is

00:13:25,170 --> 00:13:30,390
immutable once it's set you shouldn't

00:13:27,060 --> 00:13:31,860
change it and because reacting the N is

00:13:30,390 --> 00:13:34,020
just JavaScript technically as

00:13:31,860 --> 00:13:36,450
developers we could change it but if we

00:13:34,020 --> 00:13:39,180
did we're screwing up reacts our

00:13:36,450 --> 00:13:41,670
internal syncing which destroys our app

00:13:39,180 --> 00:13:43,470
and then it's just a pain to debug so

00:13:41,670 --> 00:13:46,260
once you start your prop they're

00:13:43,470 --> 00:13:48,030
immutable they shouldn't be changed and

00:13:46,260 --> 00:13:50,850
if we would look to see how we pass

00:13:48,030 --> 00:13:53,790
props to a cloth what we know is here is

00:13:50,850 --> 00:13:55,880
again we have our clock on passing a

00:13:53,790 --> 00:13:58,860
date and we're passing a class name and

00:13:55,880 --> 00:14:00,960
then within our render function we're

00:13:58,860 --> 00:14:04,050
studying class name with this dr.oz

00:14:00,960 --> 00:14:06,780
class name and this stop drops that date

00:14:04,050 --> 00:14:10,830
so that's again how easy we passed props

00:14:06,780 --> 00:14:14,150
it looks very similar to HTML and we can

00:14:10,830 --> 00:14:14,150
use them using the stock drops

00:14:16,630 --> 00:14:21,819
so we said that props was immutable it

00:14:19,480 --> 00:14:24,399
can't change once you set it so

00:14:21,819 --> 00:14:26,410
sometimes we have data that is going to

00:14:24,399 --> 00:14:29,050
change and a lot of times that is what

00:14:26,410 --> 00:14:30,250
we're passing to our components so when

00:14:29,050 --> 00:14:32,709
we have data that is going to change

00:14:30,250 --> 00:14:34,480
we're going to use state and all state

00:14:32,709 --> 00:14:37,000
is it's just data that can change over

00:14:34,480 --> 00:14:38,889
time so when we have data that we know

00:14:37,000 --> 00:14:40,959
is always going to be the same we use

00:14:38,889 --> 00:14:43,529
props when we have data that we know

00:14:40,959 --> 00:14:46,449
it's going to change we would use state

00:14:43,529 --> 00:14:48,639
our state change can trigger a rerender

00:14:46,449 --> 00:14:50,980
of the component or the sub component

00:14:48,639 --> 00:14:52,269
and once the state is set in the

00:14:50,980 --> 00:14:55,089
constructor

00:14:52,269 --> 00:14:56,889
you shouldn't affect it directly we

00:14:55,089 --> 00:14:59,889
instead we will use a function called

00:14:56,889 --> 00:15:02,350
this set state and if we just take a

00:14:59,889 --> 00:15:05,019
quick look at the code again we're just

00:15:02,350 --> 00:15:08,350
using our clock example we're still

00:15:05,019 --> 00:15:12,160
passing it a class name and this time

00:15:08,350 --> 00:15:14,889
we're passing it starting time and when

00:15:12,160 --> 00:15:17,800
we look at our constructor we see that

00:15:14,889 --> 00:15:21,250
we have this state I'm setting Tod which

00:15:17,800 --> 00:15:23,860
for me means time of day and then if we

00:15:21,250 --> 00:15:26,139
take a look at our render function we're

00:15:23,860 --> 00:15:28,209
just extracting last name and starting

00:15:26,139 --> 00:15:30,399
time from this table drops and we're

00:15:28,209 --> 00:15:33,579
extracting time of day from this state

00:15:30,399 --> 00:15:35,680
and what we can arm answer and also in

00:15:33,579 --> 00:15:37,930
our render method we just have an h1

00:15:35,680 --> 00:15:41,170
showing the starting time we have a

00:15:37,930 --> 00:15:43,620
paragraph showing the time of day and

00:15:41,170 --> 00:15:47,019
then we have a button to update the time

00:15:43,620 --> 00:15:53,589
anyways we looked at and if we look at

00:15:47,019 --> 00:15:56,439
what happens what we see is that the

00:15:53,589 --> 00:16:00,550
starting time does not change and the

00:15:56,439 --> 00:16:05,230
update time does change so 32 at this

00:16:00,550 --> 00:16:06,579
point 35 and so again remember starting

00:16:05,230 --> 00:16:07,980
time we use props because you know

00:16:06,579 --> 00:16:10,899
starting time is never going to change

00:16:07,980 --> 00:16:14,579
the update time we use state because we

00:16:10,899 --> 00:16:14,579
know the update time is going to change

00:16:17,550 --> 00:16:22,079
the next quick thing we're going to

00:16:18,839 --> 00:16:23,220
cover is just life cycle so our clock is

00:16:22,079 --> 00:16:25,260
still pretty useless

00:16:23,220 --> 00:16:26,970
when I imagine a clock I imagine

00:16:25,260 --> 00:16:30,870
something that's ticking and continually

00:16:26,970 --> 00:16:34,620
updating so how would we cause how would

00:16:30,870 --> 00:16:37,170
we I set up you know a interval for our

00:16:34,620 --> 00:16:39,959
clock to continuously update and we have

00:16:37,170 --> 00:16:42,720
the ability to I use a life cycle so a

00:16:39,959 --> 00:16:44,519
component has a life cycle and it's just

00:16:42,720 --> 00:16:46,709
points within that components life where

00:16:44,519 --> 00:16:48,630
we can affect change to code and for

00:16:46,709 --> 00:16:50,790
WordPress developers you can think of it

00:16:48,630 --> 00:16:54,329
very similarly to action hooks and

00:16:50,790 --> 00:16:57,029
filters and so this is actually diagram

00:16:54,329 --> 00:16:59,850
by dam abramoff he actually works on

00:16:57,029 --> 00:17:01,470
react and this is just a great diagram

00:16:59,850 --> 00:17:04,439
but what we can see is that we have

00:17:01,470 --> 00:17:06,540
three stages we have a mounting stage we

00:17:04,439 --> 00:17:10,949
have an updating stage and we have a

00:17:06,540 --> 00:17:13,350
unmounting stage and within those stages

00:17:10,949 --> 00:17:15,290
we have a variety of methods the most

00:17:13,350 --> 00:17:18,179
important methods that I tend to use is

00:17:15,290 --> 00:17:20,819
component dead mount component did

00:17:18,179 --> 00:17:22,860
update and component will unmount and in

00:17:20,819 --> 00:17:27,329
the example we're gonna see how we use

00:17:22,860 --> 00:17:28,679
it to set up an interval and so again

00:17:27,329 --> 00:17:30,570
we're just keeping with the clock

00:17:28,679 --> 00:17:33,570
example we're still passing it class

00:17:30,570 --> 00:17:35,309
name and starting time but if you notice

00:17:33,570 --> 00:17:36,960
in our vendor we took out the button

00:17:35,309 --> 00:17:38,700
we're not going to use it anymore

00:17:36,960 --> 00:17:42,419
because the times gonna update itself

00:17:38,700 --> 00:17:44,880
and instead we create our component dead

00:17:42,419 --> 00:17:47,549
mount right and the component did mount

00:17:44,880 --> 00:17:50,070
will trigger as soon as this component

00:17:47,549 --> 00:17:51,600
is rendered to the Dom and that will

00:17:50,070 --> 00:17:53,850
trigger so as soon as that's when it to

00:17:51,600 --> 00:17:55,530
the Dom we want to set up our timer and

00:17:53,850 --> 00:17:57,809
kick it off and that's what we're doing

00:17:55,530 --> 00:17:59,760
here with this start timer and within it

00:17:57,809 --> 00:18:02,120
we started interval for every second and

00:17:59,760 --> 00:18:05,760
we changed the date to the current time

00:18:02,120 --> 00:18:08,150
by setting this dot state the last thing

00:18:05,760 --> 00:18:11,070
we do is component will amount and that

00:18:08,150 --> 00:18:13,559
executes right before view we remove a

00:18:11,070 --> 00:18:15,179
component from the Dom and all we're

00:18:13,559 --> 00:18:16,830
just doing here is clear in the interval

00:18:15,179 --> 00:18:18,150
cuz we should take care of our assets

00:18:16,830 --> 00:18:20,460
and get rid of them if we don't need

00:18:18,150 --> 00:18:25,980
them anymore and so when we look at this

00:18:20,460 --> 00:18:28,970
example run we'll see now we just have a

00:18:25,980 --> 00:18:28,970
clock that ticks

00:18:34,610 --> 00:18:38,779
so we've already seen handling events

00:18:36,799 --> 00:18:41,090
and I just kind of want to touch on it

00:18:38,779 --> 00:18:43,159
to make sure everyone knew that we took

00:18:41,090 --> 00:18:45,260
that we took a look at this so we just

00:18:43,159 --> 00:18:49,340
backed up again to an earlier example

00:18:45,260 --> 00:18:51,799
where we have our but we're returning a

00:18:49,340 --> 00:18:55,159
button and this is just an event handler

00:18:51,799 --> 00:18:57,649
and pretty much then react in JavaScript

00:18:55,159 --> 00:19:00,740
events are handled the same way the one

00:18:57,649 --> 00:19:03,620
big difference is that on a button we

00:19:00,740 --> 00:19:06,470
passed it through a function instead of

00:19:03,620 --> 00:19:10,220
a string the other important thing just

00:19:06,470 --> 00:19:14,059
to remember is that in JavaScript and

00:19:10,220 --> 00:19:16,519
also react class methods are this isn't

00:19:14,059 --> 00:19:18,049
immediately bound to our class methods

00:19:16,519 --> 00:19:19,909
so we actually have to bind that

00:19:18,049 --> 00:19:22,250
ourselves and that's actually what we

00:19:19,909 --> 00:19:24,529
see in our constructor is that this to

00:19:22,250 --> 00:19:26,600
update time which we're gonna use our

00:19:24,529 --> 00:19:33,620
handler we're just simply binding this

00:19:26,600 --> 00:19:35,299
to it and the last piece I want to cover

00:19:33,620 --> 00:19:36,980
and this is just because we see this

00:19:35,299 --> 00:19:38,179
through all all of Guttenberg I'm

00:19:36,980 --> 00:19:42,860
actually you're gonna see it through all

00:19:38,179 --> 00:19:45,019
of react apps is lifting state and so

00:19:42,860 --> 00:19:47,539
when we have in lifting States just a

00:19:45,019 --> 00:19:49,580
react a turn or just how we do something

00:19:47,539 --> 00:19:53,330
and when we have two or more components

00:19:49,580 --> 00:19:58,039
that depend on the same changing data or

00:19:53,330 --> 00:19:59,960
the same state we if we want them to be

00:19:58,039 --> 00:20:02,179
synchronized and to be able to use the

00:19:59,960 --> 00:20:05,149
data from the same source we call that a

00:20:02,179 --> 00:20:06,980
single suit source of truth so in our

00:20:05,149 --> 00:20:09,950
example we'll have Celsius and

00:20:06,980 --> 00:20:11,990
Fahrenheit and when we update Celsius it

00:20:09,950 --> 00:20:14,179
will also immediately update Fahrenheit

00:20:11,990 --> 00:20:16,370
and vice-versa so both of them are

00:20:14,179 --> 00:20:17,990
dependent on the same temperature to

00:20:16,370 --> 00:20:20,830
calculate what it would be in both

00:20:17,990 --> 00:20:20,830
degrees

00:20:30,000 --> 00:20:35,460
all right so how do we make it so that

00:20:33,480 --> 00:20:37,410
they're both dependent on the same thing

00:20:35,460 --> 00:20:41,730
obviously we're not going to set state

00:20:37,410 --> 00:20:43,290
on each of these temperature inputs what

00:20:41,730 --> 00:20:46,110
were actually going to do is we're gonna

00:20:43,290 --> 00:20:48,350
remove that state and move it up to the

00:20:46,110 --> 00:20:51,420
closest ancestor that they both have and

00:20:48,350 --> 00:20:53,820
pass down that temperature as a prop and

00:20:51,420 --> 00:20:59,190
that's why we call it lifting state we

00:20:53,820 --> 00:21:02,040
take that state and we move it up and so

00:20:59,190 --> 00:21:03,810
if we take a look at the code we see we

00:21:02,040 --> 00:21:05,910
have our temperature input in our

00:21:03,810 --> 00:21:08,010
example we had that Celsius temperature

00:21:05,910 --> 00:21:11,660
input and that Fahrenheit temperature

00:21:08,010 --> 00:21:15,930
input and what we noticed is that

00:21:11,660 --> 00:21:18,390
everything is run to props so if we take

00:21:15,930 --> 00:21:21,000
a look at the on change its calling this

00:21:18,390 --> 00:21:22,680
taunt handle change which immediately is

00:21:21,000 --> 00:21:25,290
calling a function that was passed

00:21:22,680 --> 00:21:27,570
through this stock drops and since the

00:21:25,290 --> 00:21:29,580
whoever is sending that function it

00:21:27,570 --> 00:21:32,580
sends it the value or the change to

00:21:29,580 --> 00:21:34,680
value so that we can use it and then if

00:21:32,580 --> 00:21:36,870
you notice we also have a constant

00:21:34,680 --> 00:21:39,120
called temperature and it's called from

00:21:36,870 --> 00:21:42,660
the stock drops temperature to which

00:21:39,120 --> 00:21:44,820
both temperature inputs would receive if

00:21:42,660 --> 00:21:47,280
we look at the calculator so if we

00:21:44,820 --> 00:21:50,490
notice our calculator is here and then

00:21:47,280 --> 00:21:53,070
we it has two temperature inputs and the

00:21:50,490 --> 00:21:55,500
calculator or the closest ancestor of

00:21:53,070 --> 00:21:59,520
both these temperature inputs is the one

00:21:55,500 --> 00:22:02,160
that's sending it its Handler and so

00:21:59,520 --> 00:22:04,980
when the value changes and actually gets

00:22:02,160 --> 00:22:07,740
sent to these two handlers and again it

00:22:04,980 --> 00:22:15,060
is the closest ancestor that is handling

00:22:07,740 --> 00:22:16,620
the change and setting the state so what

00:22:15,060 --> 00:22:18,690
we actually went over today real quick

00:22:16,620 --> 00:22:22,050
is that Gutenberg is WordPress's

00:22:18,690 --> 00:22:24,270
new content editor JSX is just a common

00:22:22,050 --> 00:22:29,220
script extension it's just a way to

00:22:24,270 --> 00:22:30,750
build notes in a HTML like syntax a new

00:22:29,220 --> 00:22:33,060
component is just a function that takes

00:22:30,750 --> 00:22:36,300
an arbitrary and an arbitrary input

00:22:33,060 --> 00:22:39,090
called props and outputs a react node in

00:22:36,300 --> 00:22:42,000
the end a react component is a

00:22:39,090 --> 00:22:43,800
Guttenberg block we needed remember that

00:22:42,000 --> 00:22:45,720
props are immutable

00:22:43,800 --> 00:22:48,000
our component can also change contain

00:22:45,720 --> 00:22:50,400
state or changing data and that's how we

00:22:48,000 --> 00:22:52,980
decide if we're going to use props or

00:22:50,400 --> 00:22:56,610
stay is is it changing data or is it

00:22:52,980 --> 00:22:58,140
always gonna be the same react component

00:22:56,610 --> 00:22:59,880
has a lifecycle that we can take

00:22:58,140 --> 00:23:02,450
advantage of they're very similar to

00:22:59,880 --> 00:23:06,390
word presses action hooks and filters

00:23:02,450 --> 00:23:08,880
and if several components depend on the

00:23:06,390 --> 00:23:12,300
same prop then a helpful react pattern

00:23:08,880 --> 00:23:13,980
is lifting the state or moving the or

00:23:12,300 --> 00:23:16,530
moving the state I've missed all that

00:23:13,980 --> 00:23:18,240
moving the state to a prop and attaching

00:23:16,530 --> 00:23:21,170
it to the nearest ancestor of all the

00:23:18,240 --> 00:23:21,170
pending components

00:23:33,880 --> 00:23:40,230
okay any questions yes

00:23:53,490 --> 00:23:58,240
yeah so I was actually talking to a

00:23:56,140 --> 00:24:00,520
gentleman yesterday and he was talking

00:23:58,240 --> 00:24:02,890
about how he wants to build a Guttenberg

00:24:00,520 --> 00:24:04,420
block it would be recent post they

00:24:02,890 --> 00:24:06,220
actually the same recent post that we

00:24:04,420 --> 00:24:09,280
saw he want to do something similar to

00:24:06,220 --> 00:24:12,490
that when you develop in recent posts

00:24:09,280 --> 00:24:14,800
you tend to send if you're doing it in

00:24:12,490 --> 00:24:16,870
JavaScript right you need to send a post

00:24:14,800 --> 00:24:18,220
back and Ajax post back to it and say

00:24:16,870 --> 00:24:20,410
you don't want to do that because it's

00:24:18,220 --> 00:24:21,760
just faster to do it on the server that

00:24:20,410 --> 00:24:24,160
would be example where we would want to

00:24:21,760 --> 00:24:26,470
use PHP instead because it's just easier

00:24:24,160 --> 00:24:28,150
to query for those recent posts and just

00:24:26,470 --> 00:24:35,430
send it through a template and to

00:24:28,150 --> 00:24:35,430
display out anyone else

00:24:37,930 --> 00:24:42,889
No

00:24:39,889 --> 00:24:42,889
beautiful

00:24:45,780 --> 00:24:48,380
right

00:24:50,060 --> 00:24:53,109
[Applause]

00:24:55,520 --> 00:25:03,899
yep um I thought I've been done a lot a

00:25:01,950 --> 00:25:05,850
lot of it has been a bunch of learning

00:25:03,899 --> 00:25:07,409
but one kind of project that I'm using

00:25:05,850 --> 00:25:10,289
as I'm learning and it's such a great

00:25:07,409 --> 00:25:12,390
way to learn this so anyone should I try

00:25:10,289 --> 00:25:13,770
this out if you have a chance is because

00:25:12,390 --> 00:25:15,630
we actually don't want to focus on the

00:25:13,770 --> 00:25:17,010
front end because you know that just

00:25:15,630 --> 00:25:19,950
distract us from actually learning

00:25:17,010 --> 00:25:21,570
Guttenberg so we just took bootstrap we

00:25:19,950 --> 00:25:23,429
threw it on a site that's handing a lot

00:25:21,570 --> 00:25:24,809
of front-end and then we you know

00:25:23,429 --> 00:25:27,029
because bootstrap has all of their

00:25:24,809 --> 00:25:28,649
different components we started picking

00:25:27,029 --> 00:25:29,580
out different components and saying well

00:25:28,649 --> 00:25:31,500
you're going to turn that into a guru

00:25:29,580 --> 00:25:34,909
block and just attempting to turn that

00:25:31,500 --> 00:25:34,909
into something useful

00:25:49,559 --> 00:25:54,340
yeah so this um there's a lot of

00:25:52,330 --> 00:25:56,380
developers that are already developing

00:25:54,340 --> 00:25:57,880
Guttenberg blocks a lot of the existing

00:25:56,380 --> 00:26:00,730
plugins already getting prepared for

00:25:57,880 --> 00:26:01,900
Gutenberg blocks ah so yeah it's going

00:26:00,730 --> 00:26:05,080
to be something that we're gonna see

00:26:01,900 --> 00:26:09,100
pretty soon up to November 19th so a

00:26:05,080 --> 00:26:10,720
couple of weeks and yeah I know a lot of

00:26:09,100 --> 00:26:12,970
a lot of people actually already getting

00:26:10,720 --> 00:26:14,380
prepared for it a quick note about all

00:26:12,970 --> 00:26:15,970
that too is that you're not gonna be

00:26:14,380 --> 00:26:17,410
forced to into Gutenberg and I know a

00:26:15,970 --> 00:26:19,480
lot of people are worried about that

00:26:17,410 --> 00:26:22,210
they're not forcing you into Gutenberg

00:26:19,480 --> 00:26:24,190
there's a couple things you can do the

00:26:22,210 --> 00:26:26,470
first thing is actually pretty bad and

00:26:24,190 --> 00:26:28,870
that's just don't update do not suggest

00:26:26,470 --> 00:26:31,480
that the second thing is actually the

00:26:28,870 --> 00:26:34,750
better option and that is to use the

00:26:31,480 --> 00:26:36,610
classic classic editor plugin and that's

00:26:34,750 --> 00:26:38,470
just a simple plugin that WordPress put

00:26:36,610 --> 00:26:40,240
out there you throw it on your site you

00:26:38,470 --> 00:26:43,210
enable it and it'll start blocking out

00:26:40,240 --> 00:26:45,429
good work for you so you can just stick

00:26:43,210 --> 00:26:47,080
with the classic editor at wake fly

00:26:45,429 --> 00:26:49,690
that's actually what our general plan is

00:26:47,080 --> 00:26:51,460
for all our clients is that when we

00:26:49,690 --> 00:26:53,950
update them we're gonna throw on classic

00:26:51,460 --> 00:26:56,140
editor first so that then we have time

00:26:53,950 --> 00:26:58,179
to start testing their site and figuring

00:26:56,140 --> 00:26:59,799
out once we enable Guttenberg kind of

00:26:58,179 --> 00:27:01,870
what we need to do and how we're gonna

00:26:59,799 --> 00:27:05,040
do it and what problems we may face and

00:27:01,870 --> 00:27:05,040
how to attack those problems

00:27:22,419 --> 00:27:27,770
so with good with react itself we want

00:27:26,240 --> 00:27:30,110
to break everything down into

00:27:27,770 --> 00:27:33,470
independent blocks so when we saw that

00:27:30,110 --> 00:27:36,590
example what we actually saw was ah that

00:27:33,470 --> 00:27:41,480
was actually a component and how much

00:27:36,590 --> 00:27:43,100
time do we have I got time so I'm

00:27:41,480 --> 00:27:46,520
actually gonna do something a little

00:27:43,100 --> 00:27:48,409
scary that I was going to avoid but

00:27:46,520 --> 00:27:49,669
we're just gonna open up Google bug all

00:27:48,409 --> 00:27:51,890
right we're gonna just take a quick look

00:27:49,669 --> 00:27:53,450
at the source code I actually need to

00:27:51,890 --> 00:27:56,200
pull it out of my trashcan because I do

00:27:53,450 --> 00:27:56,200
Gruenberg away

00:28:17,300 --> 00:28:20,650
strolling up my IDE

00:28:26,070 --> 00:28:29,090
let's go

00:28:53,120 --> 00:28:58,810
all right so my ID does not want to work

00:28:56,390 --> 00:28:58,810
right now

00:29:03,200 --> 00:29:06,680
that's cuz that to scream so I don't see

00:29:05,430 --> 00:29:10,100
what's going on in the other screen

00:29:06,680 --> 00:29:10,100
alright there we go

00:29:24,539 --> 00:29:28,070
my computer froze

00:29:31,160 --> 00:29:36,290
all right so this is just Gutenberg

00:29:32,750 --> 00:29:37,880
right here and when I say I kind of put

00:29:36,290 --> 00:29:39,680
note to other thing about looking at

00:29:37,880 --> 00:29:42,910
Gutenberg Corps and when you want to

00:29:39,680 --> 00:29:46,760
look at Google Earth core sorry not live

00:29:42,910 --> 00:29:49,940
packages this is what we mean this is

00:29:46,760 --> 00:29:51,740
just a lot of Gutenberg and then the one

00:29:49,940 --> 00:29:58,250
thing we can look at is we can look at

00:29:51,740 --> 00:30:02,060
the lock library and then inside here we

00:29:58,250 --> 00:30:05,710
can go to latest latest posts and then

00:30:02,060 --> 00:30:05,710
we're just gonna look at their editor

00:30:10,880 --> 00:30:14,710
but you're gonna edit it with no powder

00:30:22,140 --> 00:30:26,940
all right and so in the end all this top

00:30:24,930 --> 00:30:30,300
stuff is pretty scary you just you don't

00:30:26,940 --> 00:30:32,460
really need to know this but oh but what

00:30:30,300 --> 00:30:34,020
we see is that we have you know it's

00:30:32,460 --> 00:30:35,760
just bringing all of this stuff right

00:30:34,020 --> 00:30:38,820
here are just components to use

00:30:35,760 --> 00:30:41,070
throughout the thing and then if we look

00:30:38,820 --> 00:30:43,440
here we just have a component called

00:30:41,070 --> 00:30:45,000
inspector controls and that's exactly

00:30:43,440 --> 00:30:47,460
what you're talking about right there so

00:30:45,000 --> 00:30:49,320
all it is is a component and then we can

00:30:47,460 --> 00:30:51,780
pass it other controls that we want to

00:30:49,320 --> 00:30:54,960
use so if we notice we actually pass it

00:30:51,780 --> 00:30:57,120
they're actually passing it a panel body

00:30:54,960 --> 00:30:59,580
and they give that panel body a title

00:30:57,120 --> 00:31:02,580
then they also pass it query controls

00:30:59,580 --> 00:31:04,890
toggle controls and possibly a rage

00:31:02,580 --> 00:31:07,650
control depending on if it passes that

00:31:04,890 --> 00:31:10,410
check right um and then within that we

00:31:07,650 --> 00:31:13,410
can set different attributes and we can

00:31:10,410 --> 00:31:14,730
pass it a number of props to determine

00:31:13,410 --> 00:31:17,490
what it's going to do and how it's going

00:31:14,730 --> 00:31:19,380
to act so when we look at just this is

00:31:17,490 --> 00:31:21,390
just their editor and this is a good

00:31:19,380 --> 00:31:25,410
example of just components containing

00:31:21,390 --> 00:31:31,940
other components and this is the actual

00:31:25,410 --> 00:31:31,940
code itself of guttenberg make sense yep

00:31:47,019 --> 00:31:54,470
possibly yeah so yeah so I mean the big

00:31:52,700 --> 00:31:55,190
thing to do is to test it first always

00:31:54,470 --> 00:31:57,440
test it first

00:31:55,190 --> 00:31:59,450
um and for the most part what I've seen

00:31:57,440 --> 00:32:01,039
is that when I took a site that used

00:31:59,450 --> 00:32:03,710
something I'll say the classic editor

00:32:01,039 --> 00:32:06,049
and flipped it into Gutenberg what I saw

00:32:03,710 --> 00:32:08,179
is that goomer IntelliJ intelligently

00:32:06,049 --> 00:32:10,429
just took that content and dumped it

00:32:08,179 --> 00:32:12,409
into a classic editor block right so if

00:32:10,429 --> 00:32:14,690
we opened up Gutenberg one of the

00:32:12,409 --> 00:32:16,849
options that we had as a block was just

00:32:14,690 --> 00:32:18,499
a classic editor and so they were doing

00:32:16,849 --> 00:32:20,269
really a really good job of just taking

00:32:18,499 --> 00:32:22,279
that content and dropping it into there

00:32:20,269 --> 00:32:24,200
that doesn't guarantee it's always gonna

00:32:22,279 --> 00:32:27,830
work but that's just kind of what I've

00:32:24,200 --> 00:32:31,039
seen the other thing for developers is

00:32:27,830 --> 00:32:32,840
we have the transformation API when I

00:32:31,039 --> 00:32:34,999
showed you we had that paragraph block

00:32:32,840 --> 00:32:36,710
and we moved it over to our header block

00:32:34,999 --> 00:32:39,499
that's just called the transformation

00:32:36,710 --> 00:32:41,149
API we also have a migration API that as

00:32:39,499 --> 00:32:42,590
developers we could take advantage of

00:32:41,149 --> 00:32:44,359
right because essentially we're just

00:32:42,590 --> 00:32:47,450
saying take the content that looks like

00:32:44,359 --> 00:32:49,340
this and turn it into that right and so

00:32:47,450 --> 00:32:51,049
we could say all right take this plain

00:32:49,340 --> 00:32:52,220
content right here that you see here if

00:32:51,049 --> 00:32:54,349
you're using short codes

00:32:52,220 --> 00:33:01,099
take this short code and change it into

00:32:54,349 --> 00:33:04,159
this block so that's yeah so the custom

00:33:01,099 --> 00:33:06,590
fields with the post meta um goomar got

00:33:04,159 --> 00:33:08,479
a care of that okay so you can actually

00:33:06,590 --> 00:33:10,639
attach post Modesto with Guttenberg

00:33:08,479 --> 00:33:12,349
so that's not for me that's not as much

00:33:10,639 --> 00:33:13,609
about worried there's the bulk of the

00:33:12,349 --> 00:33:15,979
content itself that I tend to get

00:33:13,609 --> 00:33:17,389
worried about yeah and like I said we're

00:33:15,979 --> 00:33:19,369
gonna use classic editors we're gonna

00:33:17,389 --> 00:33:25,869
take advantage of transformation API and

00:33:19,369 --> 00:33:25,869
the migration API yeah

00:33:30,620 --> 00:33:34,730
yeah so I've been taking a look at that

00:33:32,960 --> 00:33:40,520
because we actually use a CF quite a bit

00:33:34,730 --> 00:33:43,309
where we work and so I haven't seen a CF

00:33:40,520 --> 00:33:45,830
really deal with it yet but if I was

00:33:43,309 --> 00:33:47,720
them uh and doing something in terms of

00:33:45,830 --> 00:33:49,309
just making it compatible I would just

00:33:47,720 --> 00:33:52,039
take advantage of the fact that we can

00:33:49,309 --> 00:33:54,500
already attached post meta to a block um

00:33:52,039 --> 00:33:55,669
and I would imagine that because they're

00:33:54,500 --> 00:33:58,460
just so big that they would have a

00:33:55,669 --> 00:34:00,289
solution out before we are we went up we

00:33:58,460 --> 00:34:02,390
launched but post meta is part of

00:34:00,289 --> 00:34:16,929
Gutenberg still so we still have you

00:34:02,390 --> 00:34:16,929
know things like a CF yep exactly

00:34:19,899 --> 00:34:24,679
exactly it's it's a better UI and the

00:34:22,730 --> 00:34:26,899
whole point of doing Guin because like

00:34:24,679 --> 00:34:29,599
everyone everyone sees the classic

00:34:26,899 --> 00:34:32,540
editor right and it's kind of outdated

00:34:29,599 --> 00:34:34,940
like so we work with platforms I can't

00:34:32,540 --> 00:34:39,589
go in Umbraco and if you look at the UI

00:34:34,940 --> 00:34:42,560
right it's really just modern dragon job

00:34:39,589 --> 00:34:44,540
you have all these edit fields and edit

00:34:42,560 --> 00:34:46,790
panels and then you look at WordPress

00:34:44,540 --> 00:34:49,429
and it's very basic there's not a lot

00:34:46,790 --> 00:34:51,409
there and I went to a presentation where

00:34:49,429 --> 00:34:53,629
they were talking about this and the

00:34:51,409 --> 00:34:55,909
whole point of goon burg is that because

00:34:53,629 --> 00:34:57,710
if we keep the classic editor especially

00:34:55,909 --> 00:34:59,780
with the younger generations coming up

00:34:57,710 --> 00:35:01,880
and expecting you know very modern

00:34:59,780 --> 00:35:04,010
tooling we're gonna start losing our

00:35:01,880 --> 00:35:06,470
market share right and WordPress is very

00:35:04,010 --> 00:35:08,270
fortunate right now where we hold a good

00:35:06,470 --> 00:35:13,400
part of market share I think I saw a 60%

00:35:08,270 --> 00:35:14,960
of CMS's at one point and ah and so the

00:35:13,400 --> 00:35:16,910
benefit of being that big is you get

00:35:14,960 --> 00:35:18,680
developers you it's open source so you

00:35:16,910 --> 00:35:20,810
get a huge community developers to

00:35:18,680 --> 00:35:22,760
develop for it a lot of tutorials out

00:35:20,810 --> 00:35:24,680
there and we definitely don't want to

00:35:22,760 --> 00:35:27,830
lose that so this is a point of

00:35:24,680 --> 00:35:31,450
Gutenberg it's to give us modern tooling

00:35:27,830 --> 00:35:31,450
so that we don't lose our market share

00:35:38,210 --> 00:35:42,690
exactly and I think content editors are

00:35:40,740 --> 00:35:45,840
gonna love it because you know it's not

00:35:42,690 --> 00:35:48,150
a lot of the classic editor where it's

00:35:45,840 --> 00:35:50,220
kind of funky at points and sometimes

00:35:48,150 --> 00:35:51,990
you do have to go to the source to do

00:35:50,220 --> 00:35:54,390
what you want to do with the block

00:35:51,990 --> 00:35:55,800
editor you should be able to just drag

00:35:54,390 --> 00:36:13,440
and drop your blocks in rearrange and

00:35:55,800 --> 00:36:18,090
use your panels yep exactly

00:36:13,440 --> 00:36:19,350
oh it definitely is exactly I actually

00:36:18,090 --> 00:36:21,660
used to tell people that is like if you

00:36:19,350 --> 00:36:23,550
know how to use word you can use the

00:36:21,660 --> 00:36:26,010
classic editor it's almost the same

00:36:23,550 --> 00:36:28,140
thing all right so it looks like I am up

00:36:26,010 --> 00:36:30,060
against my time guys thank you for

00:36:28,140 --> 00:36:32,870
coming out I will be around all day if

00:36:30,060 --> 00:36:32,870
you have any more questions

00:36:33,660 --> 00:36:36,520

YouTube URL: https://www.youtube.com/watch?v=xp_3pMNDaNU


