Title: Chris Brosnan: Scaling Effectively with WordPress
Publication date: 2020-04-29
Playlist: WordCamp Glasgow 2020
Description: 
	One of the most common misconceptions about WordPress is that it does not scale well and is only for small sites. This assumption is untrue, but it exists because of wider misconceptions about the use of WordPress and its purpose. With good planning and consideration before and during a WordPress projectâ€™s lifecycle, we can ensure that the project scales well and has the flexibility to add new features without too much scope creep or performance impact. By avoiding waste, using coding standards, and adopting a serious software development mindset to WordPress projects it is easy to build WordPress sites that will scale effectively. This talk will introduce these concepts.

WPTV link: https://wordpress.tv/2020/04/21/chris-brosnan-scaling-effectively-with-wordpress/
Captions: 
	00:00:11,320 --> 00:00:18,439
[Applause]

00:00:15,470 --> 00:00:20,699
I said this won't be on the scaling

00:00:18,439 --> 00:00:22,890
effectively of work for assertive in

00:00:20,699 --> 00:00:27,449
terms of going down the application

00:00:22,890 --> 00:00:29,279
development person how from a

00:00:27,449 --> 00:00:32,790
development process you scale your

00:00:29,279 --> 00:00:36,420
WordPress site so it can they can grow

00:00:32,790 --> 00:00:40,500
more naturally and with less room for

00:00:36,420 --> 00:00:43,170
errors and problems so there are a lot

00:00:40,500 --> 00:00:45,480
of misconceptions about WordPress I'm

00:00:43,170 --> 00:00:49,770
sure we've all heard these WordPress

00:00:45,480 --> 00:00:52,980
it's insecure own belief it's only for

00:00:49,770 --> 00:00:57,210
blogs and news websites it's not for

00:00:52,980 --> 00:01:00,359
real developers and WordPress sites look

00:00:57,210 --> 00:01:02,550
too similar that's one I hear a lot less

00:01:00,359 --> 00:01:05,369
these days but it's still out there in

00:01:02,550 --> 00:01:08,520
the world there's one big one which

00:01:05,369 --> 00:01:11,400
we've all heard which I hear very often

00:01:08,520 --> 00:01:13,979
and in some cases for some WordPress

00:01:11,400 --> 00:01:17,130
sites I believe there is a bigger there

00:01:13,979 --> 00:01:21,780
is some truth to this yes there does not

00:01:17,130 --> 00:01:24,840
scale you know I mean all the statements

00:01:21,780 --> 00:01:27,869
I mentioned can be true in particular

00:01:24,840 --> 00:01:32,340
with certain projects and under certain

00:01:27,869 --> 00:01:34,979
conditions particularly scaling can be a

00:01:32,340 --> 00:01:40,560
very the problem of scaling can be seen

00:01:34,979 --> 00:01:43,020
as very accurate so when I say scaling

00:01:40,560 --> 00:01:47,790
what does that mean from a development

00:01:43,020 --> 00:01:49,619
point of view so there are different

00:01:47,790 --> 00:01:52,530
views on what scaling might be in terms

00:01:49,619 --> 00:01:54,360
of building software in my view web

00:01:52,530 --> 00:01:58,200
sites are just no form of software

00:01:54,360 --> 00:01:59,700
that's why I approach it so when we're

00:01:58,200 --> 00:02:02,850
talking about scaling in terms of

00:01:59,700 --> 00:02:06,390
development what do we mean firstly I'll

00:02:02,850 --> 00:02:08,879
go for what we don't mean it doesn't

00:02:06,390 --> 00:02:10,950
mean just making something much bigger

00:02:08,879 --> 00:02:13,170
or making it much

00:02:10,950 --> 00:02:17,640
much larger codebase or larger piece of

00:02:13,170 --> 00:02:19,410
software also you know related it

00:02:17,640 --> 00:02:21,840
doesn't mean just adding to something

00:02:19,410 --> 00:02:24,510
that's already there does not mean

00:02:21,840 --> 00:02:26,459
adding more complexity in fact I would

00:02:24,510 --> 00:02:30,300
argue at the reverses what you should go

00:02:26,459 --> 00:02:33,390
for it's not removing old code although

00:02:30,300 --> 00:02:34,440
that can be a part of it but generally

00:02:33,390 --> 00:02:37,290
if it's legacy code that's actually

00:02:34,440 --> 00:02:39,930
doing something then I would argue keep

00:02:37,290 --> 00:02:44,220
in there not adding more workload or

00:02:39,930 --> 00:02:45,900
dependencies to any system so in the

00:02:44,220 --> 00:02:50,220
context of WordPress site we could argue

00:02:45,900 --> 00:02:55,819
that's adding plugins or adding to the

00:02:50,220 --> 00:02:58,560
female that you build I would say

00:02:55,819 --> 00:03:01,739
scaling is about making something be

00:02:58,560 --> 00:03:04,560
able to grow organically by this I mean

00:03:01,739 --> 00:03:07,170
with minimal interference or minimal

00:03:04,560 --> 00:03:09,840
being able to develop it well initially

00:03:07,170 --> 00:03:11,959
so there's less need for developers or

00:03:09,840 --> 00:03:14,519
later on down the line so you can easily

00:03:11,959 --> 00:03:16,530
add to it and if there are this

00:03:14,519 --> 00:03:17,730
developer results needed it would you

00:03:16,530 --> 00:03:21,660
can add some functionality without

00:03:17,730 --> 00:03:23,819
rewriting everything else related to

00:03:21,660 --> 00:03:26,130
that make something able to be able to

00:03:23,819 --> 00:03:28,950
without breaking anything else this is

00:03:26,130 --> 00:03:31,769
where things like good development

00:03:28,950 --> 00:03:34,530
patterns are very good to have good code

00:03:31,769 --> 00:03:36,359
structure and using object-oriented PHP

00:03:34,530 --> 00:03:38,940
helps with this but there are a lot of

00:03:36,359 --> 00:03:41,310
other things that go into them and

00:03:38,940 --> 00:03:43,769
following preset patterns for design

00:03:41,310 --> 00:03:45,359
implementation so particularly in terms

00:03:43,769 --> 00:03:47,850
of the code that you're writing if you

00:03:45,359 --> 00:03:49,260
follow some set patterns for

00:03:47,850 --> 00:03:52,620
implementation and adding to that

00:03:49,260 --> 00:03:54,630
beforehand particularly within your team

00:03:52,620 --> 00:03:56,459
you'll fall in similar coding standards

00:03:54,630 --> 00:03:58,790
and similar guidelines it means that

00:03:56,459 --> 00:04:01,400
it's much easier to add to it later on

00:03:58,790 --> 00:04:04,950
allow for progressive improvements so

00:04:01,400 --> 00:04:06,959
this is why I meant you will you allow

00:04:04,950 --> 00:04:09,780
for any new code to be added

00:04:06,959 --> 00:04:12,810
progressively so but if you're building

00:04:09,780 --> 00:04:16,950
something in agile way where you release

00:04:12,810 --> 00:04:19,500
the site in a minimum work or version

00:04:16,950 --> 00:04:21,269
them and add to it later on if you've

00:04:19,500 --> 00:04:21,639
scaled it effectively it should allow

00:04:21,269 --> 00:04:24,280
for the

00:04:21,639 --> 00:04:25,659
much more efficiently it allows for

00:04:24,280 --> 00:04:29,229
increased workload on the system of

00:04:25,659 --> 00:04:31,930
mineral impacts so this is not only a

00:04:29,229 --> 00:04:35,050
server issue but in terms of if we take

00:04:31,930 --> 00:04:38,080
WordPress for example if you can add

00:04:35,050 --> 00:04:39,789
extra code to the site without it

00:04:38,080 --> 00:04:41,949
breaking even or if you can add

00:04:39,789 --> 00:04:43,599
particular plugins that you have built

00:04:41,949 --> 00:04:45,189
which are similar to maybe other custom

00:04:43,599 --> 00:04:46,779
ones that you're built then or maybe

00:04:45,189 --> 00:04:54,759
using some of the same classes that can

00:04:46,779 --> 00:04:57,729
actually help so this would be my

00:04:54,759 --> 00:04:59,560
definition for what scaling is in terms

00:04:57,729 --> 00:05:02,289
of software development and web

00:04:59,560 --> 00:05:05,199
development and so on so you build the

00:05:02,289 --> 00:05:07,719
system in a way that's so minimal that

00:05:05,199 --> 00:05:09,759
you build a system in such a way so that

00:05:07,719 --> 00:05:11,979
minimal effort is required to add to its

00:05:09,759 --> 00:05:17,680
size or workload and in doing so causes

00:05:11,979 --> 00:05:19,569
minimal impact so why would why may

00:05:17,680 --> 00:05:22,240
WordPress sites typically have scaling

00:05:19,569 --> 00:05:25,330
problems the big one that I found in

00:05:22,240 --> 00:05:28,330
many cases over Alliance on third pipe

00:05:25,330 --> 00:05:29,469
like it's so the problem there is that a

00:05:28,330 --> 00:05:33,729
lot of these plugins may use different

00:05:29,469 --> 00:05:35,889
coding standards they may use updated

00:05:33,729 --> 00:05:39,509
PHP in some cases whereas some may be

00:05:35,889 --> 00:05:42,479
using more modern PHP or there may be

00:05:39,509 --> 00:05:44,889
conflicts in their functionality I've

00:05:42,479 --> 00:05:47,759
seen this across certain sites where as

00:05:44,889 --> 00:05:52,539
many different caching plugins are added

00:05:47,759 --> 00:05:54,310
which it sounds two-twenty informed

00:05:52,539 --> 00:05:56,169
users it may sound like good idea but

00:05:54,310 --> 00:05:57,819
then a lot of that functionality can be

00:05:56,169 --> 00:06:00,120
conflicting of each other which can

00:05:57,819 --> 00:06:04,180
cause memory problems and so on and

00:06:00,120 --> 00:06:07,689
potentially just badly written code that

00:06:04,180 --> 00:06:10,029
we see in some places so maybe it's

00:06:07,689 --> 00:06:12,580
using JavaScript that's not following

00:06:10,029 --> 00:06:15,099
standards very well or even using PHP

00:06:12,580 --> 00:06:18,729
that technically works but could be

00:06:15,099 --> 00:06:20,710
improved the WordPress site itself may

00:06:18,729 --> 00:06:23,199
not have been updated the plugins may

00:06:20,710 --> 00:06:25,930
not be updated so again it may be using

00:06:23,199 --> 00:06:27,819
all the code and particularly if the

00:06:25,930 --> 00:06:29,830
server version of PHP or whatever

00:06:27,819 --> 00:06:32,469
software's running may have been updated

00:06:29,830 --> 00:06:32,650
but the code base itself hasn't been for

00:06:32,469 --> 00:06:36,280
that

00:06:32,650 --> 00:06:37,720
important problems and replicates

00:06:36,280 --> 00:06:41,320
functionality that can easily be

00:06:37,720 --> 00:06:44,169
achieved without plugins I've seen this

00:06:41,320 --> 00:06:46,210
I'm not against using plugins but I tend

00:06:44,169 --> 00:06:48,039
to take an approach of being very

00:06:46,210 --> 00:06:51,639
minimal with them I tend to argue that

00:06:48,039 --> 00:06:53,050
if you add a plug-in or if a member of

00:06:51,639 --> 00:06:55,570
my team always adds a plugin

00:06:53,050 --> 00:06:58,060
I kind of want to see a good reason why

00:06:55,570 --> 00:07:00,639
and what it's again to be gained from

00:06:58,060 --> 00:07:02,530
that so I like to keep it minimal but a

00:07:00,639 --> 00:07:03,789
Carberry give an idea of what how many

00:07:02,530 --> 00:07:07,030
of that should be know depends on the

00:07:03,789 --> 00:07:09,550
site so if you're replicating

00:07:07,030 --> 00:07:12,460
functionality that you could easily

00:07:09,550 --> 00:07:14,169
achieve without plugins or with a very

00:07:12,460 --> 00:07:15,460
small custom-built plugin then that

00:07:14,169 --> 00:07:16,990
obviously can cause problems

00:07:15,460 --> 00:07:20,740
particularly if that's done in a lot of

00:07:16,990 --> 00:07:23,050
cases poor project management and

00:07:20,740 --> 00:07:25,090
version control mechanisms so this is

00:07:23,050 --> 00:07:28,150
not necessarily up down to exactly the

00:07:25,090 --> 00:07:30,669
code but more from a development team

00:07:28,150 --> 00:07:33,009
culture standpoint NIC and cause some

00:07:30,669 --> 00:07:35,050
problems for the codebase itself

00:07:33,009 --> 00:07:37,180
I've seen some of these before you know

00:07:35,050 --> 00:07:38,460
changes being made on the fly but in the

00:07:37,180 --> 00:07:41,380
on production where things are made

00:07:38,460 --> 00:07:43,539
where we I know I've only made this

00:07:41,380 --> 00:07:48,099
excuse before that I was a very small

00:07:43,539 --> 00:07:49,840
change but they add up to many little

00:07:48,099 --> 00:07:51,310
changes which may be handy in tracked

00:07:49,840 --> 00:07:53,199
well I'm not being put through version

00:07:51,310 --> 00:07:55,000
control or free proper testing

00:07:53,199 --> 00:07:59,260
mechanisms and then it snowballs into

00:07:55,000 --> 00:08:01,120
quite a big problem eventually and no

00:07:59,260 --> 00:08:03,639
formal software development methodology

00:08:01,120 --> 00:08:07,479
now I'm not arguing every team should go

00:08:03,639 --> 00:08:11,229
agile or Kanban or scrum to the letter

00:08:07,479 --> 00:08:13,300
but it's good to at least look at the

00:08:11,229 --> 00:08:14,949
way these methodologies do things and

00:08:13,300 --> 00:08:19,270
actually see if you can adapt it to your

00:08:14,949 --> 00:08:21,729
team in some way so if you choose to go

00:08:19,270 --> 00:08:24,370
with agile or scrum or Kanban or many of

00:08:21,729 --> 00:08:26,710
the others this time a way to approach

00:08:24,370 --> 00:08:29,199
it but I would argue to actually adapt

00:08:26,710 --> 00:08:30,460
that with your team scope creep of

00:08:29,199 --> 00:08:32,830
Chrome we've all seen this when a

00:08:30,460 --> 00:08:36,070
particular building third-party websites

00:08:32,830 --> 00:08:39,849
the scope can change a lot which it does

00:08:36,070 --> 00:08:41,919
happen but there should be things in

00:08:39,849 --> 00:08:43,709
place early on which means that scope

00:08:41,919 --> 00:08:47,009
creep can be

00:08:43,709 --> 00:08:50,389
redirected over into something that's a

00:08:47,009 --> 00:08:52,560
second version of the project or that's

00:08:50,389 --> 00:08:55,350
maybe a smaller component that you can

00:08:52,560 --> 00:08:57,170
add to it later on and not forcing it

00:08:55,350 --> 00:09:01,920
into a project that launched for example

00:08:57,170 --> 00:09:04,649
and I have seen this not not often but

00:09:01,920 --> 00:09:06,300
pre more than I thought in it where I've

00:09:04,649 --> 00:09:08,279
gone to projects and there's not being

00:09:06,300 --> 00:09:11,699
adequate stage nor development set up

00:09:08,279 --> 00:09:13,170
where it may be if there is a station in

00:09:11,699 --> 00:09:16,589
development sets up but again though

00:09:13,170 --> 00:09:18,360
there's always a disconnect between that

00:09:16,589 --> 00:09:22,160
environment and a production environment

00:09:18,360 --> 00:09:23,790
or there's not proper use of those

00:09:22,160 --> 00:09:26,730
versioning systems

00:09:23,790 --> 00:09:29,339
so obviously that can cause problems in

00:09:26,730 --> 00:09:32,189
terms of code being pushed adequately

00:09:29,339 --> 00:09:34,500
and in terms of the code just being kept

00:09:32,189 --> 00:09:35,699
in good health so checking it adequately

00:09:34,500 --> 00:09:40,319
before you have to be put into

00:09:35,699 --> 00:09:42,269
production not keeping themes cause and

00:09:40,319 --> 00:09:45,120
plugins updated so this is mentioned and

00:09:42,269 --> 00:09:48,000
it's pretty simple ensure we I'm sure

00:09:45,120 --> 00:09:49,170
many of us do realize this yet by not

00:09:48,000 --> 00:09:50,850
keeping those things updated there's a

00:09:49,170 --> 00:09:53,819
lot security vulnerabilities that can be

00:09:50,850 --> 00:09:57,750
in that code and code can be an update

00:09:53,819 --> 00:10:01,529
standard or any increases potential for

00:09:57,750 --> 00:10:04,019
conflicts if you for example if a

00:10:01,529 --> 00:10:05,459
plug-in actually is using object ID PHP

00:10:04,019 --> 00:10:07,680
it means it's probably call in a class

00:10:05,459 --> 00:10:09,839
you know you put it there areas whereas

00:10:07,680 --> 00:10:11,579
if it's using quite outdated mechanisms

00:10:09,839 --> 00:10:13,800
there may be functions in there that are

00:10:11,579 --> 00:10:16,649
actually interfere with others might be

00:10:13,800 --> 00:10:18,420
similar names and so on if they're the

00:10:16,649 --> 00:10:20,540
same as we know if they're the same it

00:10:18,420 --> 00:10:23,660
would often call the complete air above

00:10:20,540 --> 00:10:25,920
in terms of functionality itself that's

00:10:23,660 --> 00:10:29,670
something that could cause conflicts or

00:10:25,920 --> 00:10:31,800
memory leaks server or hosted resources

00:10:29,670 --> 00:10:35,160
that can't keep up demand so in this

00:10:31,800 --> 00:10:37,230
case yeah it's not directly down to

00:10:35,160 --> 00:10:41,670
development it's more of a DevOps if you

00:10:37,230 --> 00:10:42,990
or more of a hosting issue but if you if

00:10:41,670 --> 00:10:44,040
there's a lack of control over your

00:10:42,990 --> 00:10:46,560
hosting environment

00:10:44,040 --> 00:10:48,329
that obviously does limit what you can

00:10:46,560 --> 00:10:52,350
necessarily do it and limits how you can

00:10:48,329 --> 00:10:54,089
actually optimize for that so if you for

00:10:52,350 --> 00:10:57,300
example are hosting a site on shared

00:10:54,089 --> 00:11:01,440
hosting that's obviously the obvious

00:10:57,300 --> 00:11:03,600
limitation so that's why I would always

00:11:01,440 --> 00:11:07,410
recommend VPS hosting or dedicated

00:11:03,600 --> 00:11:09,509
server they're really not there are

00:11:07,410 --> 00:11:12,000
really very affordable now that's very

00:11:09,509 --> 00:11:14,310
good setups for that like a Mitch knows

00:11:12,000 --> 00:11:17,519
there's many hosting providers we know

00:11:14,310 --> 00:11:20,790
who give VPS and dedicate server

00:11:17,519 --> 00:11:22,500
environments and often them for clients

00:11:20,790 --> 00:11:25,500
it can easily be sold to them that it's

00:11:22,500 --> 00:11:28,529
a pretty cost-effective solution when

00:11:25,500 --> 00:11:30,779
you're looking at more uptime more

00:11:28,529 --> 00:11:32,250
control over these server environments

00:11:30,779 --> 00:11:34,620
you know the ability to upscale it more

00:11:32,250 --> 00:11:37,680
efficiently and so on

00:11:34,620 --> 00:11:39,329
so yeah that's essentially stuff

00:11:37,680 --> 00:11:43,310
ourselves being incompatible project

00:11:39,329 --> 00:11:45,660
needs can cause this current problem a

00:11:43,310 --> 00:11:47,250
lack of understanding WordPress in its

00:11:45,660 --> 00:11:50,940
structure can cause a lot of these game

00:11:47,250 --> 00:11:52,920
problems so if I've seen this in cases

00:11:50,940 --> 00:11:56,100
where certain themes that I've come

00:11:52,920 --> 00:11:58,199
across where there's PHP functions being

00:11:56,100 --> 00:12:01,889
declared within the theme itself and

00:11:58,199 --> 00:12:03,750
then used when those functions actually

00:12:01,889 --> 00:12:05,279
exist within core or something very

00:12:03,750 --> 00:12:08,819
similar does exist within the core

00:12:05,279 --> 00:12:11,610
WordPress pro mod so if you get to

00:12:08,819 --> 00:12:14,490
understand the your own WordPress codex

00:12:11,610 --> 00:12:16,769
or similar or the WordPress developer

00:12:14,490 --> 00:12:18,360
resource you can see all these building

00:12:16,769 --> 00:12:21,449
functions and what they can be used for

00:12:18,360 --> 00:12:24,029
so it's best to use that initially and

00:12:21,449 --> 00:12:26,279
then just if you need to add more you

00:12:24,029 --> 00:12:29,250
declare them in your functions file in

00:12:26,279 --> 00:12:30,689
the theme and so on and if you also have

00:12:29,250 --> 00:12:32,310
scene where some things are not

00:12:30,689 --> 00:12:34,769
following the template structure so like

00:12:32,310 --> 00:12:39,540
we have single dot PHP and single - post

00:12:34,769 --> 00:12:41,630
type etc so it's just the WordPress

00:12:39,540 --> 00:12:46,649
development the further you go away from

00:12:41,630 --> 00:12:49,259
the core rules or framework in terms of

00:12:46,649 --> 00:12:51,779
actually developing templates and

00:12:49,259 --> 00:12:53,900
developing themes the more room you

00:12:51,779 --> 00:12:55,550
leave for problems and the more

00:12:53,900 --> 00:12:58,460
harder is to actually maintain that

00:12:55,550 --> 00:13:00,440
particularly when the when you update

00:12:58,460 --> 00:13:04,610
WordPress in my course some problem is

00:13:00,440 --> 00:13:07,400
also on and your I'll touch on this as

00:13:04,610 --> 00:13:09,250
well later on but with if you stretch

00:13:07,400 --> 00:13:11,630
the WordPress install beyond its

00:13:09,250 --> 00:13:16,250
capacities without planning for it then

00:13:11,630 --> 00:13:18,530
that obscene cost an issue so if both in

00:13:16,250 --> 00:13:22,010
terms of the size and scale of the site

00:13:18,530 --> 00:13:25,550
but also in terms of yeah if you're

00:13:22,010 --> 00:13:28,610
going outside of e-commerce and regular

00:13:25,550 --> 00:13:30,650
ecommerce and blogging certainly can do

00:13:28,610 --> 00:13:32,990
that in WordPress and there's many

00:13:30,650 --> 00:13:34,670
WordPress apps that do it very well but

00:13:32,990 --> 00:13:37,130
you probably would need a lot of

00:13:34,670 --> 00:13:41,300
planning to make sure that it's out to

00:13:37,130 --> 00:13:42,890
scale to that of these outdated

00:13:41,300 --> 00:13:44,900
techniques and pork rinds down to soft

00:13:42,890 --> 00:13:46,610
touch from this but if you have any

00:13:44,900 --> 00:13:48,830
count outdated codes or using

00:13:46,610 --> 00:13:52,190
inconsistency of standards across those

00:13:48,830 --> 00:13:54,260
things or if there's no proper

00:13:52,190 --> 00:13:58,370
organization in the codebase then that

00:13:54,260 --> 00:14:01,970
can cause some issues and I'm using

00:13:58,370 --> 00:14:05,510
object or a bit snot a must do but I

00:14:01,970 --> 00:14:08,000
would say it definitely is you know you

00:14:05,510 --> 00:14:09,710
get huge benefits from doing that not

00:14:08,000 --> 00:14:12,050
just in terms of site performance but

00:14:09,710 --> 00:14:14,870
also in terms of saving time really

00:14:12,050 --> 00:14:19,000
writing code yourself so if you declare

00:14:14,870 --> 00:14:21,650
class or an object then you can reuse

00:14:19,000 --> 00:14:22,970
you can put all the relay functions into

00:14:21,650 --> 00:14:26,120
that class and just reuse it for our

00:14:22,970 --> 00:14:28,300
object simply put is we go much deeper

00:14:26,120 --> 00:14:31,310
into that there's no time very

00:14:28,300 --> 00:14:37,100
object-oriented P on its own is more

00:14:31,310 --> 00:14:39,200
than but what can we do to scare so

00:14:37,100 --> 00:14:40,610
there is a few issues for potato for

00:14:39,200 --> 00:14:42,530
WordPress that can cause gaming issues

00:14:40,610 --> 00:14:45,410
but what can we do to make them scale

00:14:42,530 --> 00:14:48,470
more quickly I'll say firstly reduce

00:14:45,410 --> 00:14:50,540
reliance on third point plugins not st.

00:14:48,470 --> 00:14:51,980
if move away from them completely some

00:14:50,540 --> 00:14:55,160
of them are useful even from a

00:14:51,980 --> 00:14:56,660
development point of view but just I

00:14:55,160 --> 00:15:01,430
will take reduce reliance on them where

00:14:56,660 --> 00:15:05,020
possible before our installing ask is

00:15:01,430 --> 00:15:07,210
this plug-in necessary when it actually

00:15:05,020 --> 00:15:08,920
a resource or well actually maybe cause

00:15:07,210 --> 00:15:10,740
more problems later on whether it be

00:15:08,920 --> 00:15:12,700
something they'll actually need to

00:15:10,740 --> 00:15:16,030
develop something else to counter

00:15:12,700 --> 00:15:18,000
against I take this approach they build

00:15:16,030 --> 00:15:20,860
a custom plugin to store functionality

00:15:18,000 --> 00:15:24,520
it instead of adding to the functions

00:15:20,860 --> 00:15:26,440
file it within your feet possible so I

00:15:24,520 --> 00:15:29,710
also helps with debugging if you can add

00:15:26,440 --> 00:15:32,350
it to a plugin that you've custom-built

00:15:29,710 --> 00:15:33,970
then if you do redevelop or change the

00:15:32,350 --> 00:15:36,910
theme you can simply move on same

00:15:33,970 --> 00:15:38,800
functionality across and if your plugins

00:15:36,910 --> 00:15:40,360
deactivate them and removed if they're

00:15:38,800 --> 00:15:42,430
no longer necessary I've I know it

00:15:40,360 --> 00:15:46,510
sounds obvious by seamless in many sites

00:15:42,430 --> 00:15:48,780
come across so the you know a plug-in

00:15:46,510 --> 00:15:52,240
has been left active since launch and

00:15:48,780 --> 00:15:56,950
it's not doing anything I seen that

00:15:52,240 --> 00:15:58,300
several times so yeah something that's

00:15:56,950 --> 00:16:01,420
important to keep my they also void

00:15:58,300 --> 00:16:03,580
avoid the frame the think of thinking of

00:16:01,420 --> 00:16:07,660
there's a plugin for this or they plug

00:16:03,580 --> 00:16:10,090
it flat I mean plugins are they're good

00:16:07,660 --> 00:16:11,560
to use sparingly but then you know

00:16:10,090 --> 00:16:12,730
sometimes it's good to have to be write

00:16:11,560 --> 00:16:14,470
a bit of code because you'd actually

00:16:12,730 --> 00:16:16,350
save yourself more time in the long run

00:16:14,470 --> 00:16:18,520
by doing that instant many cases and

00:16:16,350 --> 00:16:20,170
from my point of view sometimes it's

00:16:18,520 --> 00:16:21,130
actually the easier option to devote for

00:16:20,170 --> 00:16:24,180
the team to develop their own

00:16:21,130 --> 00:16:24,180
functionality in-house

00:16:26,800 --> 00:16:30,140
implement proper project management

00:16:28,730 --> 00:16:34,370
methodologies to the development

00:16:30,140 --> 00:16:37,030
lifecycle so I think a mistake that I've

00:16:34,370 --> 00:16:39,050
seen in some development teams is

00:16:37,030 --> 00:16:41,110
particularly of developers who are new

00:16:39,050 --> 00:16:43,730
to WordPress they come to it with a

00:16:41,110 --> 00:16:46,070
mentality of WordPress development being

00:16:43,730 --> 00:16:48,950
easier or being not like building other

00:16:46,070 --> 00:16:50,420
softwares or other applications but it

00:16:48,950 --> 00:16:55,840
is a framework like well the others so

00:16:50,420 --> 00:16:58,700
should be looked down a similar way so

00:16:55,840 --> 00:17:01,400
you don't have to follow necessarily any

00:16:58,700 --> 00:17:03,080
of these or any particular methodology

00:17:01,400 --> 00:17:05,449
but it's good to at least know what they

00:17:03,080 --> 00:17:06,949
are about so it's just methods rather

00:17:05,449 --> 00:17:09,980
than technical knowledge it's the way

00:17:06,949 --> 00:17:13,280
you would organize a project in software

00:17:09,980 --> 00:17:15,650
development so if it's a scrum module or

00:17:13,280 --> 00:17:18,050
Kanban where drawn Kanban wretchedly

00:17:15,650 --> 00:17:22,160
scrum and Kanban are actually forms of

00:17:18,050 --> 00:17:25,449
our job or if it's a very rare now but

00:17:22,160 --> 00:17:27,740
waterfall or test-driven development so

00:17:25,449 --> 00:17:28,880
if it's good to get at least a basic

00:17:27,740 --> 00:17:33,620
understanding of a lot of these

00:17:28,880 --> 00:17:34,940
methodologies and then look at how if

00:17:33,620 --> 00:17:36,920
you're in position to do so you look at

00:17:34,940 --> 00:17:40,000
how the team is structured under the

00:17:36,920 --> 00:17:42,760
company culture and so on and try and

00:17:40,000 --> 00:17:44,750
think what the best way to actually

00:17:42,760 --> 00:17:47,780
implement some kind of system in your

00:17:44,750 --> 00:17:50,090
workplaces so I would not argue to

00:17:47,780 --> 00:17:51,410
follow everything to the letter without

00:17:50,090 --> 00:17:55,280
thinking how you would adapt it to your

00:17:51,410 --> 00:17:56,740
team because then it's that's just a

00:17:55,280 --> 00:17:59,030
recipe for disaster

00:17:56,740 --> 00:18:01,520
particularly if you're not taking into

00:17:59,030 --> 00:18:03,290
account the company culture because and

00:18:01,520 --> 00:18:07,250
if you do make the changes I would say

00:18:03,290 --> 00:18:08,870
MIT and gradually example ie in my team

00:18:07,250 --> 00:18:11,540
I'm trying to introduce scrum but we're

00:18:08,870 --> 00:18:13,910
doing that much slower manner because I

00:18:11,540 --> 00:18:16,190
feel not only with users but also we've

00:18:13,910 --> 00:18:19,460
development teams it's difficult to get

00:18:16,190 --> 00:18:20,330
people to adopt a new standard if you do

00:18:19,460 --> 00:18:22,370
it right away

00:18:20,330 --> 00:18:24,860
and force it right away so it's best to

00:18:22,370 --> 00:18:27,950
gradually get people used to you know

00:18:24,860 --> 00:18:32,170
some of the concepts and introduce some

00:18:27,950 --> 00:18:35,320
of the ways of working overtime and you

00:18:32,170 --> 00:18:37,670
saw inverse of control systems

00:18:35,320 --> 00:18:40,820
get is the main one there's also a

00:18:37,670 --> 00:18:43,670
mercurial of use multiple branches in

00:18:40,820 --> 00:18:45,530
your repositories you could that to be

00:18:43,670 --> 00:18:50,150
as basic it's just a development staging

00:18:45,530 --> 00:18:53,120
and production or master and yeah but I

00:18:50,150 --> 00:18:55,430
have seen in other cases where we create

00:18:53,120 --> 00:18:56,750
feature branches so for each new feature

00:18:55,430 --> 00:18:58,550
that's being built you'll create a

00:18:56,750 --> 00:19:01,880
separate branch and then merge it back

00:18:58,550 --> 00:19:03,140
into development or so on that's that's

00:19:01,880 --> 00:19:04,850
been some way of doing it so if you have

00:19:03,140 --> 00:19:06,500
multiple developers working on project

00:19:04,850 --> 00:19:09,860
you can separate your code out more

00:19:06,500 --> 00:19:11,870
physically in that way and so it's

00:19:09,860 --> 00:19:13,370
obvious but yeah don't push to

00:19:11,870 --> 00:19:16,550
production before putting through the

00:19:13,370 --> 00:19:18,620
pipeline ideally you would have some

00:19:16,550 --> 00:19:21,250
kind of extra script that will run from

00:19:18,620 --> 00:19:24,050
your master branch to production but

00:19:21,250 --> 00:19:25,220
yeah that's you know it may be that you

00:19:24,050 --> 00:19:28,490
would have let's do a git port depending

00:19:25,220 --> 00:19:32,150
on the resources now keep themes plugins

00:19:28,490 --> 00:19:34,990
and core updated as mentioned I won't go

00:19:32,150 --> 00:19:37,490
too much is because God for already so

00:19:34,990 --> 00:19:39,620
conflicts are more likely if your plugin

00:19:37,490 --> 00:19:41,480
seems in Cora update and the security

00:19:39,620 --> 00:19:43,340
and performance benefits can be realized

00:19:41,480 --> 00:19:46,220
if you keep them updated

00:19:43,340 --> 00:19:47,450
I know sometimes something you're

00:19:46,220 --> 00:19:49,100
probably thinking of we've often updated

00:19:47,450 --> 00:19:51,320
things in WordPress and it breaks stuff

00:19:49,100 --> 00:19:53,480
true that can still happen

00:19:51,320 --> 00:19:55,940
which is why you put things on their

00:19:53,480 --> 00:20:01,520
development server horrid staging server

00:19:55,940 --> 00:20:03,470
first and ensure you run in a server if

00:20:01,520 --> 00:20:04,820
you're going to scale your WordPress

00:20:03,470 --> 00:20:05,900
site and it's going to be a very large

00:20:04,820 --> 00:20:08,360
site that's going to have a lot of

00:20:05,900 --> 00:20:09,860
resources ensure you're running in our

00:20:08,360 --> 00:20:12,320
server hosting that can handle large

00:20:09,860 --> 00:20:14,120
applications and requests so if

00:20:12,320 --> 00:20:17,150
insurance the server that can handle a

00:20:14,120 --> 00:20:21,320
lot of traffic and not fall down once it

00:20:17,150 --> 00:20:23,390
hits the housing users or not make sure

00:20:21,320 --> 00:20:25,910
you can actually run many scripts on

00:20:23,390 --> 00:20:29,270
there at once or can yeah as I said it

00:20:25,910 --> 00:20:32,560
serve many users and so on VPS hosting

00:20:29,270 --> 00:20:35,240
or dedicate hosting is ideal for this

00:20:32,560 --> 00:20:36,760
and if you're trying to sell this to

00:20:35,240 --> 00:20:40,280
clients to pay a bit more for hosting

00:20:36,760 --> 00:20:43,190
it's it's pretty easy to I would argue

00:20:40,280 --> 00:20:44,990
is much easier now to sell it to clients

00:20:43,190 --> 00:20:46,029
now it was previously particularly

00:20:44,990 --> 00:20:47,649
because that kind of hosts

00:20:46,029 --> 00:20:52,599
is now much more affordable than it used

00:20:47,649 --> 00:20:55,649
to be so yeah use a VPS tokay hosting

00:20:52,599 --> 00:20:58,840
and ideally also pick one that gives you

00:20:55,649 --> 00:21:01,539
SSH access so it may not be yourself

00:20:58,840 --> 00:21:04,090
doing that maybe a DevOps and so on but

00:21:01,539 --> 00:21:05,649
if you have access direct me into the

00:21:04,090 --> 00:21:07,570
server and access to that to be able to

00:21:05,649 --> 00:21:10,029
change certain configurations they'll

00:21:07,570 --> 00:21:12,639
help you to optimize it so yeah if you

00:21:10,029 --> 00:21:15,369
have access to the command line then you

00:21:12,639 --> 00:21:17,200
can install WordPress CLI and it would

00:21:15,369 --> 00:21:22,450
just allow you to more scalable II

00:21:17,200 --> 00:21:23,349
manage the application and ensure it

00:21:22,450 --> 00:21:26,049
within your team that there's an

00:21:23,349 --> 00:21:27,489
understanding of WordPress and its use

00:21:26,049 --> 00:21:32,259
strengths and limitations in your

00:21:27,489 --> 00:21:35,080
project team so it's this is more around

00:21:32,259 --> 00:21:37,179
basically around the misconception that

00:21:35,080 --> 00:21:42,070
it's only for blogs or news sites or

00:21:37,179 --> 00:21:44,259
basically commerce so me so I would

00:21:42,070 --> 00:21:47,679
argue that you need to your team must

00:21:44,259 --> 00:21:51,249
have some understanding of the if you

00:21:47,679 --> 00:21:53,830
are going beyond those core uses of

00:21:51,249 --> 00:21:55,479
WordPress you can but it may be that you

00:21:53,830 --> 00:21:57,549
may need to heavily customize your own

00:21:55,479 --> 00:21:58,809
code or combine it with other frameworks

00:21:57,549 --> 00:22:02,379
and this is where we're getting to

00:21:58,809 --> 00:22:05,320
headless WordPress and so on I would

00:22:02,379 --> 00:22:07,269
like you if possible at all do not take

00:22:05,320 --> 00:22:10,269
the plug-in heavy approach this you know

00:22:07,269 --> 00:22:12,899
we see there are plugins for social

00:22:10,269 --> 00:22:16,570
media additions to WordPress and their

00:22:12,899 --> 00:22:18,129
plugins for all kinds of additions but I

00:22:16,570 --> 00:22:19,809
would argue not to take that approach

00:22:18,129 --> 00:22:23,499
and try and maybe combine it with other

00:22:19,809 --> 00:22:24,879
frameworks if possible plan ahead and

00:22:23,499 --> 00:22:27,190
stick to the scope when planning a

00:22:24,879 --> 00:22:28,479
complex WordPress site so if you know

00:22:27,190 --> 00:22:31,210
that it's going to be a road complex

00:22:28,479 --> 00:22:34,509
site you can plan ahead and yes things

00:22:31,210 --> 00:22:35,769
do change but the more you plan ahead

00:22:34,509 --> 00:22:37,869
and the more you actually stick to a

00:22:35,769 --> 00:22:41,489
road map the more easy is to adapt to

00:22:37,869 --> 00:22:44,049
any roadblocks of not coming the way

00:22:41,489 --> 00:22:45,159
everyone is but ever so you can look at

00:22:44,049 --> 00:22:46,599
different options for certain that be

00:22:45,159 --> 00:22:47,100
WordPress site depending on the

00:22:46,599 --> 00:22:49,380
complexity

00:22:47,100 --> 00:22:51,510
so if you go the regular couple

00:22:49,380 --> 00:22:53,669
traditional approach where the CMS and

00:22:51,510 --> 00:22:56,039
the front end that I really linked or do

00:22:53,669 --> 00:22:59,160
you go overhead the site where WordPress

00:22:56,039 --> 00:23:00,360
is just the admin interface multi-site

00:22:59,160 --> 00:23:02,280
car obviously splitting up your

00:23:00,360 --> 00:23:04,289
WordPress site into multiple sites

00:23:02,280 --> 00:23:07,850
within the one site so they can all be

00:23:04,289 --> 00:23:11,490
administrate separately or decoupled so

00:23:07,850 --> 00:23:12,990
similar to headless but it's as well as

00:23:11,490 --> 00:23:15,720
serving the data to a third-party

00:23:12,990 --> 00:23:20,490
application you also serve like cached

00:23:15,720 --> 00:23:22,679
pages and so on and the last one that

00:23:20,490 --> 00:23:25,710
you use modern web structured coding

00:23:22,679 --> 00:23:26,970
standards so there's there's only three

00:23:25,710 --> 00:23:29,460
I'm gonna read three things I'm really

00:23:26,970 --> 00:23:33,480
going to talk about here but use MVC or

00:23:29,460 --> 00:23:36,330
object or a PHP where possible object I

00:23:33,480 --> 00:23:38,250
write PHP two main two things list

00:23:36,330 --> 00:23:40,590
classes and something called dependency

00:23:38,250 --> 00:23:42,960
injection which I can't go deep into

00:23:40,590 --> 00:23:45,390
depends injection because it's very it's

00:23:42,960 --> 00:23:47,010
very technical but it's something that

00:23:45,390 --> 00:23:49,590
you can use within object that PHP that

00:23:47,010 --> 00:23:53,880
really cleans up the code and makes it

00:23:49,590 --> 00:23:55,740
much easier to adapt it another

00:23:53,880 --> 00:23:57,090
recommendation you know doctor coding

00:23:55,740 --> 00:23:59,400
standing your team and stick to it this

00:23:57,090 --> 00:24:02,130
isn't a coding standard will not

00:23:59,400 --> 00:24:04,320
necessarily improve the code or how it

00:24:02,130 --> 00:24:05,850
runs but it means if you have multiple

00:24:04,320 --> 00:24:07,590
developers working on the project it

00:24:05,850 --> 00:24:10,280
will be much easier to maintain it

00:24:07,590 --> 00:24:12,450
because for a project point of view also

00:24:10,280 --> 00:24:14,850
from a project management point of view

00:24:12,450 --> 00:24:17,659
it means that you're commenting and so

00:24:14,850 --> 00:24:19,860
on is much easier it's much more uniform

00:24:17,659 --> 00:24:23,700
add approve document and comment your

00:24:19,860 --> 00:24:26,010
code and use sass to write CSS rules and

00:24:23,700 --> 00:24:28,289
compile compile that into CSS files so

00:24:26,010 --> 00:24:32,370
the last one isn't always necessary but

00:24:28,289 --> 00:24:35,309
I would recommend it so you use sass to

00:24:32,370 --> 00:24:37,380
write your CSS rules and again it's much

00:24:35,309 --> 00:24:41,039
more scalable because it's generally

00:24:37,380 --> 00:24:42,840
much more intuitively arranged rules and

00:24:41,039 --> 00:24:47,640
then you compile that into a style.css

00:24:42,840 --> 00:24:50,909
file so it's not central that does help

00:24:47,640 --> 00:24:52,980
in terms of being able to scale the

00:24:50,909 --> 00:24:54,860
rules that you're adding to your CSS and

00:24:52,980 --> 00:24:57,380
actually be able to maintain it well and

00:24:54,860 --> 00:25:01,790
removes a lot of confusion and complain

00:24:57,380 --> 00:25:05,360
they have only arrived from them so I

00:25:01,790 --> 00:25:06,770
said I've mentioned free areas classes

00:25:05,360 --> 00:25:09,800
so this is one part of what you're doing

00:25:06,770 --> 00:25:12,230
HP so think I make your code in terms of

00:25:09,800 --> 00:25:14,030
objects and workplace you might put this

00:25:12,230 --> 00:25:16,160
object this users post pages comments

00:25:14,030 --> 00:25:18,800
etc and any attributes that are there

00:25:16,160 --> 00:25:20,600
associated them so you combine the

00:25:18,800 --> 00:25:22,460
general ideas you combine any functions

00:25:20,600 --> 00:25:26,060
that interact with an object into a

00:25:22,460 --> 00:25:30,440
class you can save time encoding and can

00:25:26,060 --> 00:25:31,670
minimize code created as well as making

00:25:30,440 --> 00:25:35,090
the calls much more efficient when

00:25:31,670 --> 00:25:39,110
they're done well so quit the very basic

00:25:35,090 --> 00:25:41,750
example so if you take an object car and

00:25:39,110 --> 00:25:45,220
you create a class below you could

00:25:41,750 --> 00:25:49,700
create these set color and get color

00:25:45,220 --> 00:25:53,000
functions for that so and then when

00:25:49,700 --> 00:25:56,360
we're actually calling that we just

00:25:53,000 --> 00:26:00,080
create new two instances of that car

00:25:56,360 --> 00:26:04,460
class and then run a set color as we've

00:26:00,080 --> 00:26:07,370
called it here to actually just add to

00:26:04,460 --> 00:26:08,780
set a color for each object and then if

00:26:07,370 --> 00:26:10,220
this was much more complex we'd have

00:26:08,780 --> 00:26:13,370
more functions and it could get more

00:26:10,220 --> 00:26:15,740
complex and more but this is a very

00:26:13,370 --> 00:26:17,990
crude basic example just to demonstrate

00:26:15,740 --> 00:26:20,930
how it works

00:26:17,990 --> 00:26:22,160
dependency injection so you reuse the

00:26:20,930 --> 00:26:23,600
way this works you reuse the

00:26:22,160 --> 00:26:26,590
functionality of other classes or

00:26:23,600 --> 00:26:29,450
objects in a new class to declare and

00:26:26,590 --> 00:26:31,940
declare functionality that depends on

00:26:29,450 --> 00:26:33,800
that functionality so saves time in

00:26:31,940 --> 00:26:36,230
Konya is also a great way to cut down on

00:26:33,800 --> 00:26:40,460
this so code or read code in certain

00:26:36,230 --> 00:26:41,990
functionality so again this is a very

00:26:40,460 --> 00:26:43,940
very crude example it goes a lot deeper

00:26:41,990 --> 00:26:49,130
than this but this is if we were to take

00:26:43,940 --> 00:26:53,930
the car example again if you imported

00:26:49,130 --> 00:26:55,580
car as a class into so here the class

00:26:53,930 --> 00:26:57,740
that we're setting is that's using the

00:26:55,580 --> 00:27:01,310
dependency injection is the driver class

00:26:57,740 --> 00:27:05,000
at the bottom so I will explain it

00:27:01,310 --> 00:27:08,870
because I'm so I realized it's a bit so

00:27:05,000 --> 00:27:10,440
if we say a class driver then we could

00:27:08,870 --> 00:27:13,830
import functionality

00:27:10,440 --> 00:27:16,460
wrong the car class and then use that

00:27:13,830 --> 00:27:20,940
within the driver class that we prayed

00:27:16,460 --> 00:27:22,759
so I suppose another good example if you

00:27:20,940 --> 00:27:25,230
think of a torch

00:27:22,759 --> 00:27:26,700
that's like think of that it's like an

00:27:25,230 --> 00:27:28,889
object and almost it's like using a

00:27:26,700 --> 00:27:33,210
dependency injection from batteries or

00:27:28,889 --> 00:27:34,470
from a switch so dependency injection is

00:27:33,210 --> 00:27:37,679
when you use the functionality of

00:27:34,470 --> 00:27:39,570
another class or object within the one

00:27:37,679 --> 00:27:41,789
that you're declaring so it's not

00:27:39,570 --> 00:27:45,480
necessary but you can it can help to cut

00:27:41,789 --> 00:27:48,330
down on unnecessary code and rewriting

00:27:45,480 --> 00:27:51,090
stuff but that's that's a totally

00:27:48,330 --> 00:27:53,490
separate thing and you could look into

00:27:51,090 --> 00:28:00,000
it afterwards because it goes quite deep

00:27:53,490 --> 00:28:02,129
and lastly MVC so this laravel and

00:28:00,000 --> 00:28:03,750
Magento Symphony is built on this but

00:28:02,129 --> 00:28:06,570
I've seen a lot of WordPress themes

00:28:03,750 --> 00:28:08,009
starting to use this concept so it's

00:28:06,570 --> 00:28:09,779
where you divide the model that you

00:28:08,009 --> 00:28:14,129
divide your code into Model View and

00:28:09,779 --> 00:28:16,769
controller so and yeah I've seen this

00:28:14,129 --> 00:28:19,470
scene I was you see this in other CMS

00:28:16,769 --> 00:28:25,820
systems like Drupal Magento and also

00:28:19,470 --> 00:28:29,730
frameworks not laravel and symphony so

00:28:25,820 --> 00:28:31,590
typically model you in structures the

00:28:29,730 --> 00:28:33,929
data room a reliable form of prepares it

00:28:31,590 --> 00:28:36,240
based on controllers instructions the

00:28:33,929 --> 00:28:39,179
view is essentially just your your

00:28:36,240 --> 00:28:40,590
templates so what the user what is

00:28:39,179 --> 00:28:42,990
rendered to the user on the front-end

00:28:40,590 --> 00:28:46,470
and the controller takes user commands

00:28:42,990 --> 00:28:52,500
and sends them to the model for data

00:28:46,470 --> 00:28:55,460
updates and sends that to the view okay

00:28:52,500 --> 00:28:55,460
thank you that's

00:28:58,450 --> 00:29:19,360
I hit a lot of CMS with it is whether

00:29:17,770 --> 00:29:24,400
you think it makes a big difference and

00:29:19,360 --> 00:29:28,420
where you wouldn't use it yeah it's I

00:29:24,400 --> 00:29:30,250
would not I I see a lot of benefits of

00:29:28,420 --> 00:29:33,370
it and the reason I would probably not

00:29:30,250 --> 00:29:35,860
use it depend on if it may be overkill

00:29:33,370 --> 00:29:37,480
for your use so if you're still running

00:29:35,860 --> 00:29:39,730
a very basic WordPress site that's

00:29:37,480 --> 00:29:42,840
pretty light then it you may not really

00:29:39,730 --> 00:29:45,160
see much benefit from it but if you are

00:29:42,840 --> 00:29:46,960
running the WordPress site that's very

00:29:45,160 --> 00:29:48,460
that will be very complex and maybe it's

00:29:46,960 --> 00:29:50,190
best to serve a another application

00:29:48,460 --> 00:29:55,000
framework they might go of that approach

00:29:50,190 --> 00:29:57,580
or if you perhaps want to indicate the

00:29:55,000 --> 00:30:00,100
WordPress content elsewhere so I've seen

00:29:57,580 --> 00:30:01,780
that in some cases well where you know

00:30:00,100 --> 00:30:03,910
maybe it's the content has been served

00:30:01,780 --> 00:30:20,770
in multiple places today you might keep

00:30:03,910 --> 00:30:24,630
it just a headless CMS in in that case I

00:30:20,770 --> 00:30:28,240
would go for dedicate server with high

00:30:24,630 --> 00:30:29,650
you know good memory but aside from that

00:30:28,240 --> 00:30:31,060
I'll just it's not worried about the

00:30:29,650 --> 00:30:32,980
server but I'll dog you use something

00:30:31,060 --> 00:30:36,880
you know service it's like Kyle flair

00:30:32,980 --> 00:30:39,750
for example to funnel send traffic if it

00:30:36,880 --> 00:30:39,750
comes for am i right

00:30:47,060 --> 00:31:06,890
yes that's yep that's true

00:31:00,620 --> 00:31:10,250
there are it's I agree that is those

00:31:06,890 --> 00:31:12,650
properties on a there are obviously new

00:31:10,250 --> 00:31:22,510
versions of mightycall that is MongoDB

00:31:12,650 --> 00:31:34,630
and really feed Bates you can change the

00:31:22,510 --> 00:31:34,630
very difficult yeah yeah

00:33:10,340 --> 00:33:20,400
there's even past your database also

00:33:12,780 --> 00:33:23,610
I've seen one project where you cluster

00:33:20,400 --> 00:33:26,670
incident notes so rather than serving it

00:33:23,610 --> 00:33:28,650
all from the same your tab if you it's

00:33:26,670 --> 00:33:30,510
no Reaper very big sites you might

00:33:28,650 --> 00:33:32,010
plaster in two different service and

00:33:30,510 --> 00:33:38,070
they will serve it from different

00:33:32,010 --> 00:33:41,730
servers yes like it means your custom

00:33:38,070 --> 00:33:43,890
queries and you know if one it's also

00:33:41,730 --> 00:33:45,330
acts as like a backup so in case let's

00:33:43,890 --> 00:33:47,340
go so we got down it means they still I

00:33:45,330 --> 00:33:49,700
was to conserve that it helps the memory

00:33:47,340 --> 00:33:49,700
and so on

00:34:11,830 --> 00:34:15,889
honestly honestly tell us what price I

00:34:14,540 --> 00:34:17,510
don't know what I would I mean I've

00:34:15,889 --> 00:34:19,790
worked the laravel a lot so I know it's

00:34:17,510 --> 00:34:23,089
I know about that migrations and see

00:34:19,790 --> 00:34:24,080
files and so on but you probably could

00:34:23,089 --> 00:34:27,050
say something like that of your

00:34:24,080 --> 00:34:39,379
wordpress install but I don't know the

00:34:27,050 --> 00:34:42,290
easy solution I have I have used I have

00:34:39,379 --> 00:34:44,320
done that before also used a headless

00:34:42,290 --> 00:34:49,010
WordPress but with a laravel application

00:34:44,320 --> 00:34:51,619
but in terms of this property narrow

00:34:49,010 --> 00:34:53,060
file has two built-in like database

00:34:51,619 --> 00:34:54,950
migrations so you could just create a

00:34:53,060 --> 00:34:56,659
seed file for your table or you can

00:34:54,950 --> 00:34:59,630
generate it for the command line and you

00:34:56,659 --> 00:35:02,660
can move that to a new server WordPress

00:34:59,630 --> 00:35:04,250
it I've it could be something I'm just

00:35:02,660 --> 00:35:07,790
missed out on but I don't know the

00:35:04,250 --> 00:35:10,040
solution like that for the inferior you

00:35:07,790 --> 00:35:12,589
probably could do that with that too

00:35:10,040 --> 00:35:14,119
maybe we've composer or song but yeah

00:35:12,589 --> 00:35:16,540
I'm not sure off the top my head have

00:35:14,119 --> 00:35:16,540
that me done

00:35:19,680 --> 00:35:25,290
remember if you have an idea for the

00:35:22,619 --> 00:35:31,880
microscope you can one sign up by the

00:35:25,290 --> 00:35:31,880
registration desk thank you please

00:35:34,260 --> 00:35:40,239

YouTube URL: https://www.youtube.com/watch?v=961672WZp9A


