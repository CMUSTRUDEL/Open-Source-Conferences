Title: Steve Grunwell: Confidently Testing WordPress
Publication date: 2019-09-07
Playlist: WordCamp Dayton 2019
Description: 
	WordPress is a tightly-coupled system, representing over a decade and a half of ideas, decisions, technological shifts, and ideological struggles. There’s a lot of history to be parsed and often the simplest task can have unintended consequences.
Meanwhile, automated testing is one of the best ways to ensure software can be released regularly with high confidence and low risk of regressions. Sadly, the leap from “building WordPress plugins” to “building WordPress plugins with tests” is often viewed as a challenging hurdle. Luckily, there are tools to set up a test harness within an existing codebase with ease.
This talk introduces the fundamentals of automated testing, especially within the context of WordPress. After developing an understanding why automated testing is so critical, attendees will learn how to begin testing their plugins and themes, using features found both in PHPUnit and the WordPress core testing framework, to build and release quality software.

WPTV link: https://wordpress.tv/2019/06/19/steve-grunwell-confidently-testing-wordpress/
Captions: 
	00:00:04,620 --> 00:00:10,690
hmm welcome everybody to confidently

00:00:07,510 --> 00:00:12,309
testing WordPress if you didn't hear me

00:00:10,690 --> 00:00:12,850
ramble on this morning my name is Steve

00:00:12,309 --> 00:00:14,619
Grunwald

00:00:12,850 --> 00:00:16,420
I'm at Steve Brundle and all the social

00:00:14,619 --> 00:00:17,560
networks that matter and if you're the

00:00:16,420 --> 00:00:18,850
kind of person who likes to have your

00:00:17,560 --> 00:00:20,440
own copy of the slides to follow along

00:00:18,850 --> 00:00:24,810
you can grab them now at super-criminal

00:00:20,440 --> 00:00:24,810
comm slash slide slash testing WordPress

00:00:25,320 --> 00:00:30,310
each and every slide if you don't grab

00:00:28,720 --> 00:00:34,420
them now though don't worry I will tweet

00:00:30,310 --> 00:00:38,620
them out later let's talk about testing

00:00:34,420 --> 00:00:40,780
fundamentals shall we before we can

00:00:38,620 --> 00:00:42,940
really understand how to test well it

00:00:40,780 --> 00:00:44,829
helps to understand the role that

00:00:42,940 --> 00:00:47,410
automated testing plays in software

00:00:44,829 --> 00:00:49,329
development through automated testing

00:00:47,410 --> 00:00:51,789
we're able to codify exact testing

00:00:49,329 --> 00:00:53,649
procedures this is going to reduce the

00:00:51,789 --> 00:00:55,329
amount of time it takes to run a because

00:00:53,649 --> 00:00:56,980
we don't have someone manually sitting

00:00:55,329 --> 00:00:59,859
there going like let me run through

00:00:56,980 --> 00:01:01,780
every test scenario but B it's reducing

00:00:59,859 --> 00:01:03,730
that chance of human error because no

00:01:01,780 --> 00:01:08,020
one can forget a step because computers

00:01:03,730 --> 00:01:09,880
never forget tests also become very

00:01:08,020 --> 00:01:12,010
easily reproducible because they're

00:01:09,880 --> 00:01:13,300
scripted it's not someone's doing

00:01:12,010 --> 00:01:16,090
something in a different way or in a

00:01:13,300 --> 00:01:18,100
different order everybody is running the

00:01:16,090 --> 00:01:21,460
same tests it doesn't matter if it's

00:01:18,100 --> 00:01:25,150
your CI pipeline or if it's a developer

00:01:21,460 --> 00:01:26,530
on your team automated testing is also

00:01:25,150 --> 00:01:29,320
very important if you want to reach that

00:01:26,530 --> 00:01:31,270
holy grail of continuous integration and

00:01:29,320 --> 00:01:33,310
continuous delivery obviously we don't

00:01:31,270 --> 00:01:35,380
want to be deploying to production over

00:01:33,310 --> 00:01:36,760
and over and over if we don't actually

00:01:35,380 --> 00:01:38,800
know that it's going to work because

00:01:36,760 --> 00:01:41,640
that causes a lot of lost weekends a lot

00:01:38,800 --> 00:01:44,830
of frustration and a lot of drinking

00:01:41,640 --> 00:01:47,980
there are a few different types of tests

00:01:44,830 --> 00:01:49,990
at the base we have what's known as the

00:01:47,980 --> 00:01:53,380
unit test this is going to test the

00:01:49,990 --> 00:01:56,620
smallest possible unit of our code often

00:01:53,380 --> 00:01:59,770
this is a single function or a single

00:01:56,620 --> 00:02:01,330
class method moving up we get to the

00:01:59,770 --> 00:02:03,310
integration testing sometimes this is

00:02:01,330 --> 00:02:04,960
also called feature testing this takes

00:02:03,310 --> 00:02:06,610
all of these individual components that

00:02:04,960 --> 00:02:08,890
we've already tested with our unit tests

00:02:06,610 --> 00:02:13,239
and tests how they all kind of come

00:02:08,890 --> 00:02:15,849
together how they integrate above that

00:02:13,239 --> 00:02:17,810
we have end-to-end sometimes known as

00:02:15,849 --> 00:02:20,239
full stack testing and

00:02:17,810 --> 00:02:22,700
typically is going to test the full path

00:02:20,239 --> 00:02:23,750
through an application as a user I

00:02:22,700 --> 00:02:26,150
arrive on this page

00:02:23,750 --> 00:02:28,489
I click this form and put it I provide

00:02:26,150 --> 00:02:31,190
this data I click this button and I

00:02:28,489 --> 00:02:33,260
expect this to happen we're going to

00:02:31,190 --> 00:02:35,269
consider end-to-end testing beyond the

00:02:33,260 --> 00:02:37,730
scope of this talk we're going to focus

00:02:35,269 --> 00:02:40,459
on these first two unit and integration

00:02:37,730 --> 00:02:42,260
tests now when we take these types of

00:02:40,459 --> 00:02:43,910
tests they're often arranged in what's

00:02:42,260 --> 00:02:46,430
known as the automation test pyramid

00:02:43,910 --> 00:02:49,970
along the x-axis here we have the number

00:02:46,430 --> 00:02:51,650
of tests so the wider the base of this

00:02:49,970 --> 00:02:53,630
pyramid the more of those tests we

00:02:51,650 --> 00:02:56,420
should have as you go up the y-axis we

00:02:53,630 --> 00:03:00,250
get the cost this isn't just cost in

00:02:56,420 --> 00:03:03,890
dollars but costing time cost in effort

00:03:00,250 --> 00:03:07,069
how difficult or how involved are these

00:03:03,890 --> 00:03:09,110
tests to write at our base ideally we're

00:03:07,069 --> 00:03:10,970
going to have the majority of our tests

00:03:09,110 --> 00:03:12,500
be unit tests we want to test the

00:03:10,970 --> 00:03:14,860
individual functions make sure that

00:03:12,500 --> 00:03:17,269
things behave the way we want them to

00:03:14,860 --> 00:03:18,739
moving up we get to integration tests a

00:03:17,269 --> 00:03:21,170
little more involved to write you might

00:03:18,739 --> 00:03:23,000
have HTTP requests going on you might be

00:03:21,170 --> 00:03:25,970
changing session state anything like

00:03:23,000 --> 00:03:28,400
that but still generally pretty easy

00:03:25,970 --> 00:03:30,410
pretty quick to run up at the top of the

00:03:28,400 --> 00:03:31,880
pyramid we have our end end tests these

00:03:30,410 --> 00:03:34,489
are going to be more expensive to run

00:03:31,880 --> 00:03:36,620
because you're often doing something

00:03:34,489 --> 00:03:38,299
with like a headless browser and you

00:03:36,620 --> 00:03:40,340
know you need to spin up headless Chrome

00:03:38,299 --> 00:03:42,170
and visit this page and click this and

00:03:40,340 --> 00:03:43,370
fill this out so they're going to be

00:03:42,170 --> 00:03:45,620
more involved too right they're going to

00:03:43,370 --> 00:03:47,359
take longer to run they're going to be

00:03:45,620 --> 00:03:49,190
really good for testing like happy pats

00:03:47,359 --> 00:03:51,380
like a user must be able to sign up

00:03:49,190 --> 00:03:53,989
before our app because if they can't do

00:03:51,380 --> 00:03:57,370
that we don't make any money those are

00:03:53,989 --> 00:03:59,989
important cases to have and end tests

00:03:57,370 --> 00:04:01,760
another concept that's worth

00:03:59,989 --> 00:04:05,269
understanding is what's known as the

00:04:01,760 --> 00:04:06,680
system under test shut or suit I don't

00:04:05,269 --> 00:04:09,590
know I I live online we don't really

00:04:06,680 --> 00:04:11,569
pronounce things but that refers to the

00:04:09,590 --> 00:04:13,880
the system that we're currently testing

00:04:11,569 --> 00:04:16,310
if we're writing a unit test we might be

00:04:13,880 --> 00:04:18,739
testing a single method the system under

00:04:16,310 --> 00:04:21,739
test is that method we might be testing

00:04:18,739 --> 00:04:24,169
a class in an integration test that

00:04:21,739 --> 00:04:27,470
class is the system under test we want

00:04:24,169 --> 00:04:29,060
to make sure that we're isolating what

00:04:27,470 --> 00:04:30,590
we're trying to test and for anything

00:04:29,060 --> 00:04:32,530
else we want to use test doubles which

00:04:30,590 --> 00:04:35,389
we'll talk more about

00:04:32,530 --> 00:04:36,680
so we've talked about unit tests and

00:04:35,389 --> 00:04:38,780
integration tests

00:04:36,680 --> 00:04:40,669
well WordPress comes along and like

00:04:38,780 --> 00:04:43,939
WordPress does it makes things a little

00:04:40,669 --> 00:04:45,800
more difficult sometimes WordPress by

00:04:43,939 --> 00:04:48,349
its nature is a very tightly coupled

00:04:45,800 --> 00:04:49,999
system different parts of WordPress are

00:04:48,349 --> 00:04:51,379
going to rely very strongly on one

00:04:49,999 --> 00:04:53,360
another you have a lot of global

00:04:51,379 --> 00:04:56,389
variables for instance that are holding

00:04:53,360 --> 00:04:58,340
state so it's hard to say I want to test

00:04:56,389 --> 00:05:00,199
this one function when this one function

00:04:58,340 --> 00:05:04,129
has like eighteen side effects that you

00:05:00,199 --> 00:05:07,039
also need to account for really

00:05:04,129 --> 00:05:08,960
WordPress is it makes it difficult to

00:05:07,039 --> 00:05:10,939
test anything in true isolation it's

00:05:08,960 --> 00:05:14,029
admittedly a teenaged application

00:05:10,939 --> 00:05:16,879
because well that's what happens when

00:05:14,029 --> 00:05:18,860
you've been around for between 13 and 18

00:05:16,879 --> 00:05:20,779
years that's literally a teenaged

00:05:18,860 --> 00:05:23,180
application it's still definitely

00:05:20,779 --> 00:05:25,550
workable and it's we can still test in

00:05:23,180 --> 00:05:27,409
WordPress but it does require a bit of

00:05:25,550 --> 00:05:30,520
creative thinking if you've done any

00:05:27,409 --> 00:05:33,139
software testing in quote-unquote pure

00:05:30,520 --> 00:05:34,520
frameworks or more modern frameworks you

00:05:33,139 --> 00:05:37,819
might kind of be like well everything

00:05:34,520 --> 00:05:39,379
has its it's definite place WordPress we

00:05:37,819 --> 00:05:40,400
muddy those are ins a little bit but let

00:05:39,379 --> 00:05:43,069
me show you what we're gonna be working

00:05:40,400 --> 00:05:45,949
with today so this is our testing

00:05:43,069 --> 00:05:49,250
toolbox at the core of everything it all

00:05:45,949 --> 00:05:51,199
comes down to PHP unit PHP unit if you

00:05:49,250 --> 00:05:53,899
haven't worked with it before is the

00:05:51,199 --> 00:05:56,539
most popular test framework slash runner

00:05:53,899 --> 00:05:58,699
with in the PHP ecosystem there are a

00:05:56,539 --> 00:06:00,649
few other alternatives but PHP unit is

00:05:58,699 --> 00:06:02,240
kind of by and far the one that

00:06:00,649 --> 00:06:05,120
everybody goes to it's also really

00:06:02,240 --> 00:06:07,250
extendable by other frameworks and

00:06:05,120 --> 00:06:09,560
applications and you can write add-ons

00:06:07,250 --> 00:06:11,389
for it and everything and it also serves

00:06:09,560 --> 00:06:15,319
as the basis for the WordPress core test

00:06:11,389 --> 00:06:17,899
suite the structure within PHP unit we

00:06:15,319 --> 00:06:19,849
have a few levels to be aware of at the

00:06:17,899 --> 00:06:22,550
top we're going to have one or more test

00:06:19,849 --> 00:06:26,270
suites a test suite is a collection of

00:06:22,550 --> 00:06:28,430
tests classes and it's usually you might

00:06:26,270 --> 00:06:31,580
have like a unit and an integration test

00:06:28,430 --> 00:06:37,939
suite or you might have a front end and

00:06:31,580 --> 00:06:39,409
a API test suite the next level down we

00:06:37,939 --> 00:06:42,500
get the test class these are literally

00:06:39,409 --> 00:06:44,659
PHP classes which are collections of

00:06:42,500 --> 00:06:45,470
test cases now these will often be

00:06:44,659 --> 00:06:47,300
centered around

00:06:45,470 --> 00:06:50,290
particular feature or a model you might

00:06:47,300 --> 00:06:53,480
have a user test you might have a

00:06:50,290 --> 00:06:56,150
post-test something like that and within

00:06:53,480 --> 00:06:58,580
our test class they're comprised of test

00:06:56,150 --> 00:07:01,520
methods which are literally PHP methods

00:06:58,580 --> 00:07:03,140
functions within a class these are going

00:07:01,520 --> 00:07:05,810
to then in turn contain one or more

00:07:03,140 --> 00:07:08,570
assertions and you can think of each

00:07:05,810 --> 00:07:09,700
test method as a scenario that you're

00:07:08,570 --> 00:07:13,430
trying to test

00:07:09,700 --> 00:07:16,190
now when I say assertions basically

00:07:13,430 --> 00:07:18,380
that's where in our tests we ask a

00:07:16,190 --> 00:07:21,320
question do things work the way we

00:07:18,380 --> 00:07:24,020
expect we make an assertion against

00:07:21,320 --> 00:07:25,940
what's happening PHP unit is going to

00:07:24,020 --> 00:07:28,640
come with a ton of default assertions

00:07:25,940 --> 00:07:30,650
and like I said it's easily extended by

00:07:28,640 --> 00:07:31,850
other frameworks or applications so

00:07:30,650 --> 00:07:34,100
let's take a look at some of the most

00:07:31,850 --> 00:07:36,710
common assertions you'll be using in

00:07:34,100 --> 00:07:39,950
your tests first of all we have the

00:07:36,710 --> 00:07:41,600
question of true or false and as we go

00:07:39,950 --> 00:07:44,810
through these you'll see that everything

00:07:41,600 --> 00:07:46,820
really boils down to true or false so

00:07:44,810 --> 00:07:49,360
assert true is going to do a strict

00:07:46,820 --> 00:07:51,650
comparison to the boolean true

00:07:49,360 --> 00:07:54,550
conversely we have assert false which is

00:07:51,650 --> 00:07:57,169
going to do a strict comparison to false

00:07:54,550 --> 00:07:58,610
we can check for equality things like

00:07:57,169 --> 00:08:01,070
assert equals which is going to do a

00:07:58,610 --> 00:08:03,680
loose comparison note the double equals

00:08:01,070 --> 00:08:05,060
as opposed to the triple we can do

00:08:03,680 --> 00:08:07,430
assert saying which is going to do a

00:08:05,060 --> 00:08:09,050
strict between two values something to

00:08:07,430 --> 00:08:11,240
be aware of here if you are comparing

00:08:09,050 --> 00:08:14,479
two instances of the same class so two

00:08:11,240 --> 00:08:19,070
objects that are not the same object but

00:08:14,479 --> 00:08:20,780
the same class they will not be

00:08:19,070 --> 00:08:25,460
considered equal so something to be

00:08:20,780 --> 00:08:26,900
aware of you can verify contents so you

00:08:25,460 --> 00:08:29,570
might do something like assert contains

00:08:26,900 --> 00:08:31,729
we have a string foo bar Baz and we want

00:08:29,570 --> 00:08:32,719
to see if far is in it well yes bar is

00:08:31,729 --> 00:08:35,210
right there in the middle

00:08:32,719 --> 00:08:37,520
maybe we pass it in an array it's aware

00:08:35,210 --> 00:08:40,099
how types work so we're looking for a

00:08:37,520 --> 00:08:43,700
value of B and look right in the middle

00:08:40,099 --> 00:08:45,620
of this array ABC we can use regular

00:08:43,700 --> 00:08:48,589
expressions any regular expressions fans

00:08:45,620 --> 00:08:50,690
in the room okay I'm not the only one is

00:08:48,589 --> 00:08:52,430
that's great because I'm like regex guy

00:08:50,690 --> 00:08:55,510
and most people are like what are you

00:08:52,430 --> 00:08:55,510
doing why would you do that

00:08:55,910 --> 00:09:03,260
and this is just the regex people

00:08:57,770 --> 00:09:04,580
laughing at the head like most every

00:09:03,260 --> 00:09:08,210
assertion is also going to have an

00:09:04,580 --> 00:09:09,830
opposite and equal assertion equal and

00:09:08,210 --> 00:09:11,360
opposite flows much better but now let's

00:09:09,830 --> 00:09:12,590
let's mess that up

00:09:11,360 --> 00:09:14,870
this is typically going to be in the

00:09:12,590 --> 00:09:16,700
form of assert thing and assert not

00:09:14,870 --> 00:09:18,710
things so for assert equals we have a

00:09:16,700 --> 00:09:21,050
certain not equals assert contains a

00:09:18,710 --> 00:09:23,660
certain not contains assertive a Heskey

00:09:21,050 --> 00:09:28,100
assert array not has key assert count

00:09:23,660 --> 00:09:30,020
assert not count so on so forth but like

00:09:28,100 --> 00:09:32,360
I mentioned a moment ago everything kind

00:09:30,020 --> 00:09:35,780
of boils down to that search for true or

00:09:32,360 --> 00:09:37,910
false so we have assert true or assert

00:09:35,780 --> 00:09:41,150
equals which is essentially hey assert

00:09:37,910 --> 00:09:43,190
true expected double equals actual we

00:09:41,150 --> 00:09:45,950
can do assert not contains is basically

00:09:43,190 --> 00:09:48,530
if we're using it on an array it's doing

00:09:45,950 --> 00:09:50,210
an assert false on an in array if we're

00:09:48,530 --> 00:09:52,310
doing regular expressions we're doing

00:09:50,210 --> 00:09:55,490
preg match and seeing if we got a result

00:09:52,310 --> 00:09:59,270
so everything comes down to true or

00:09:55,490 --> 00:10:01,100
false when we train all of our tests

00:09:59,270 --> 00:10:07,610
together we can get a nice output like

00:10:01,100 --> 00:10:11,000
this here we can see 511 tests a total

00:10:07,610 --> 00:10:13,970
of 1085 assertions for tests were

00:10:11,000 --> 00:10:19,130
skipped it took 1.13 minutes to run and

00:10:13,970 --> 00:10:20,990
occupied 42 Meg's of RAM if we had

00:10:19,130 --> 00:10:22,580
anything that went wrong I mean you can

00:10:20,990 --> 00:10:24,530
see down here okay but incomplete

00:10:22,580 --> 00:10:26,480
skipped er or risking tests those are

00:10:24,530 --> 00:10:30,110
those essays up there each dot

00:10:26,480 --> 00:10:31,610
represents a test method the past if we

00:10:30,110 --> 00:10:35,960
had a failure we might give something

00:10:31,610 --> 00:10:37,790
like this where we see a big red and it

00:10:35,960 --> 00:10:39,890
tells us exactly where things went wrong

00:10:37,790 --> 00:10:42,500
there was one failure it was in copy

00:10:39,890 --> 00:10:44,570
test test get good coffee we were

00:10:42,500 --> 00:10:46,640
expecting great well-balanced coffee and

00:10:44,570 --> 00:10:47,360
we were given Starbucks so clearly we

00:10:46,640 --> 00:10:52,130
have failed

00:10:47,360 --> 00:10:53,780
I mentioned test doubles earlier there

00:10:52,130 --> 00:10:56,360
are five types of test doubles and I

00:10:53,780 --> 00:10:57,950
have a sister talked to this one called

00:10:56,360 --> 00:11:00,920
testing like you've never tested before

00:10:57,950 --> 00:11:04,310
because you haven't I was giving this in

00:11:00,920 --> 00:11:06,170
San Diego last year and my friend

00:11:04,310 --> 00:11:08,089
Jessica Mauer Han some of you may know

00:11:06,170 --> 00:11:09,770
her she's not a wordpress person she's

00:11:08,089 --> 00:11:12,080
in the larger PHP community

00:11:09,770 --> 00:11:14,030
but she was sitting in the audience and

00:11:12,080 --> 00:11:16,460
she's like see if you only have three

00:11:14,030 --> 00:11:19,510
types of test doubles up there and there

00:11:16,460 --> 00:11:21,590
are five what are you doing you're wrong

00:11:19,510 --> 00:11:23,180
because she and I have that kind of

00:11:21,590 --> 00:11:25,040
relationship where we can just call each

00:11:23,180 --> 00:11:28,040
other out for being wrong but she was

00:11:25,040 --> 00:11:31,120
right I omitted content so here today

00:11:28,040 --> 00:11:35,480
you get all five types of test doubles

00:11:31,120 --> 00:11:37,220
yes first we have the noble stub now a

00:11:35,480 --> 00:11:39,050
stub you're going to set the default

00:11:37,220 --> 00:11:41,180
response values you're saying I expect

00:11:39,050 --> 00:11:43,160
to call this function or this method and

00:11:41,180 --> 00:11:45,260
this is the value I expect to get back

00:11:43,160 --> 00:11:47,210
because again system under test you

00:11:45,260 --> 00:11:51,050
don't want to have to test some other

00:11:47,210 --> 00:11:52,910
API to say well I expect to call it with

00:11:51,050 --> 00:11:54,440
these values and then hopefully it'll

00:11:52,910 --> 00:11:56,750
give me the response that I'm expecting

00:11:54,440 --> 00:11:59,660
back you just say nope if I were to call

00:11:56,750 --> 00:12:02,390
this it would respond back with this

00:11:59,660 --> 00:12:04,310
value we have the mock and a mock is

00:12:02,390 --> 00:12:07,790
going to let us say I want to make sure

00:12:04,310 --> 00:12:10,130
that for instance this method is called

00:12:07,790 --> 00:12:13,130
two times with these particular

00:12:10,130 --> 00:12:15,380
arguments a spy flips a mock on its head

00:12:13,130 --> 00:12:17,390
and rather than saying hey I'm going to

00:12:15,380 --> 00:12:19,910
call the mock and expect it to respond

00:12:17,390 --> 00:12:21,950
in a particular way you basically say

00:12:19,910 --> 00:12:23,690
hey go watch that functionality over

00:12:21,950 --> 00:12:26,270
there because I'm going to ask you

00:12:23,690 --> 00:12:28,490
questions about it later to say hey did

00:12:26,270 --> 00:12:31,820
it call that method two times with those

00:12:28,490 --> 00:12:33,620
particular arguments we get into the

00:12:31,820 --> 00:12:35,600
dummy and a dummy is going to do nothing

00:12:33,620 --> 00:12:40,670
but satisfy requirements if you're

00:12:35,600 --> 00:12:44,600
working in more typed PHP so move to PHP

00:12:40,670 --> 00:12:46,070
seven for everyone's sake please but if

00:12:44,600 --> 00:12:48,290
you have type int int dependencies that

00:12:46,070 --> 00:12:51,380
you need to satisfy a dummy is really

00:12:48,290 --> 00:12:52,550
great for that and then you have fakes

00:12:51,380 --> 00:12:55,490
and a fake is going to be an

00:12:52,550 --> 00:12:57,740
implementation of a contract or a system

00:12:55,490 --> 00:13:00,170
that you're not using in production it

00:12:57,740 --> 00:13:03,620
basically just swaps it out to go No

00:13:00,170 --> 00:13:06,110
maybe you have a logger for instance and

00:13:03,620 --> 00:13:08,720
you want to make sure that messages are

00:13:06,110 --> 00:13:10,400
written to the logs so you sub in a fake

00:13:08,720 --> 00:13:11,960
logger that then you can go back and be

00:13:10,400 --> 00:13:14,090
like tell me everything they got written

00:13:11,960 --> 00:13:15,560
to you rather than actually writing out

00:13:14,090 --> 00:13:18,190
to the file system or sending them to a

00:13:15,560 --> 00:13:21,710
log aggregation service or anything

00:13:18,190 --> 00:13:22,649
after I gave the talk and left out dummy

00:13:21,710 --> 00:13:25,709
and fake the

00:13:22,649 --> 00:13:28,879
for like I said Jessica kind of made fun

00:13:25,709 --> 00:13:31,920
of me then she wrote this blog post and

00:13:28,879 --> 00:13:33,360
made me copy edit it for her but it's

00:13:31,920 --> 00:13:35,399
called the five types of test doubles

00:13:33,360 --> 00:13:37,619
and how to create them in PHP in it it

00:13:35,399 --> 00:13:38,999
is in the notes for the stock highly

00:13:37,619 --> 00:13:41,730
recommend reading it because she does a

00:13:38,999 --> 00:13:43,709
much better job than I do of explaining

00:13:41,730 --> 00:13:45,089
the different types of test doubles how

00:13:43,709 --> 00:13:46,920
to create them in PHP unit because

00:13:45,089 --> 00:13:49,800
that's literally the title of her

00:13:46,920 --> 00:13:52,319
article there's also a library called

00:13:49,800 --> 00:13:54,300
mockery that's very very popular

00:13:52,319 --> 00:13:57,629
it does admittedly sort of blur the line

00:13:54,300 --> 00:14:00,360
between a mock and a stub so that's

00:13:57,629 --> 00:14:03,839
something to be aware of but it gives us

00:14:00,360 --> 00:14:08,579
this nice expressive interface so let's

00:14:03,839 --> 00:14:10,499
say we have a an API method called get

00:14:08,579 --> 00:14:12,629
recent orders and we want to make sure

00:14:10,499 --> 00:14:15,300
that it handles when we get an empty

00:14:12,629 --> 00:14:18,449
order list so perhaps we create a mock

00:14:15,300 --> 00:14:20,429
of our API class we are making a partial

00:14:18,449 --> 00:14:22,499
mock which just means anything I don't

00:14:20,429 --> 00:14:25,139
explicitly tell you how to handle proxy

00:14:22,499 --> 00:14:27,240
it back to the the original class and we

00:14:25,139 --> 00:14:29,850
say the API should receive get all

00:14:27,240 --> 00:14:32,309
orders exactly once and it should return

00:14:29,850 --> 00:14:34,379
an empty array now if we have a method

00:14:32,309 --> 00:14:36,149
called get recent orders we're going to

00:14:34,379 --> 00:14:39,240
assume that that's going to be empty if

00:14:36,149 --> 00:14:40,529
get all orders is returning empty so

00:14:39,240 --> 00:14:42,360
we've been able to mock that we're not

00:14:40,529 --> 00:14:46,889
actually calling out we don't have to

00:14:42,360 --> 00:14:48,329
like create some fake you know hey look

00:14:46,889 --> 00:14:51,209
there are orders in a database somewhere

00:14:48,329 --> 00:14:54,779
and now there aren't so we're able to

00:14:51,209 --> 00:14:59,670
mock this out I could talk about test

00:14:54,779 --> 00:15:03,199
doubles all day but it's it gets it's a

00:14:59,670 --> 00:15:05,879
rabbit hole let's be honest run just run

00:15:03,199 --> 00:15:08,699
there's also if I may do a little bit of

00:15:05,879 --> 00:15:11,339
self-promotion sometimes you need to

00:15:08,699 --> 00:15:14,220
test markup and you need to be able to

00:15:11,339 --> 00:15:15,899
say hey does this button exist or do I

00:15:14,220 --> 00:15:17,639
have an element with this class and you

00:15:15,899 --> 00:15:20,249
can do this by saying like assert

00:15:17,639 --> 00:15:22,230
contains and look for specific strings I

00:15:20,249 --> 00:15:24,149
do maintain a library called PHP unit

00:15:22,230 --> 00:15:26,069
markup assertions it's essentially a

00:15:24,149 --> 00:15:29,459
wrapper around Dom document so you can

00:15:26,069 --> 00:15:30,809
do things like element selectors you

00:15:29,459 --> 00:15:33,360
know I'm looking for something with a

00:15:30,809 --> 00:15:36,209
class of both button and active and the

00:15:33,360 --> 00:15:38,939
output so that's very handy it

00:15:36,209 --> 00:15:40,949
available for free on github so check it

00:15:38,939 --> 00:15:43,110
out if you have to do things like does

00:15:40,949 --> 00:15:50,369
the shortcode have the elements I expect

00:15:43,110 --> 00:15:52,499
it to have now that was more general

00:15:50,369 --> 00:15:54,360
testing and PHP let's shift our

00:15:52,499 --> 00:15:57,540
attention and focus more on testing

00:15:54,360 --> 00:15:59,399
within the context of WordPress the core

00:15:57,540 --> 00:16:01,559
test suite is what WordPress core itself

00:15:59,399 --> 00:16:03,269
uses and it's arguably going to be one

00:16:01,559 --> 00:16:06,269
of the best ways to test our plugins and

00:16:03,269 --> 00:16:07,829
themes as well we can scaffold our test

00:16:06,269 --> 00:16:09,839
suite if you don't already have tests in

00:16:07,829 --> 00:16:13,139
your plugin easiest way is going to be

00:16:09,839 --> 00:16:15,809
through WP CLI they have this lovely WP

00:16:13,139 --> 00:16:17,879
scaffold plug-in - tests and then you

00:16:15,809 --> 00:16:20,129
give it your plug-in name you can also

00:16:17,879 --> 00:16:22,649
do theme tests and if you're generating

00:16:20,129 --> 00:16:25,170
a new theme or plugin through WP CI you

00:16:22,649 --> 00:16:27,259
can say ya know include tests and it'll

00:16:25,170 --> 00:16:30,089
put that scaffolding in place for you

00:16:27,259 --> 00:16:33,119
what do we get through WP CLI

00:16:30,089 --> 00:16:35,429
scaffolding well we get PHP unit dot XML

00:16:33,119 --> 00:16:39,540
dot dist this is our PHP unit

00:16:35,429 --> 00:16:41,459
configuration file totally stock PHP in

00:16:39,540 --> 00:16:43,199
it but it basically defines this is

00:16:41,459 --> 00:16:45,600
where our tests live within our file

00:16:43,199 --> 00:16:47,399
system these are things that should be

00:16:45,600 --> 00:16:48,869
considered for code coverage these are

00:16:47,399 --> 00:16:51,360
environment variables we want to set

00:16:48,869 --> 00:16:53,850
anything like that we get a PHP code

00:16:51,360 --> 00:16:56,069
sniffer configuration file if you're

00:16:53,850 --> 00:16:58,259
using Travis CI it'll generate a Travis

00:16:56,069 --> 00:17:00,660
yamo file if you're using other popular

00:16:58,259 --> 00:17:05,010
CI providers you can specify an

00:17:00,660 --> 00:17:07,140
alternate CI provider there as well the

00:17:05,010 --> 00:17:08,520
install WP test Sh

00:17:07,140 --> 00:17:10,350
script will make sure that you have a

00:17:08,520 --> 00:17:11,909
test WordPress environment the the

00:17:10,350 --> 00:17:13,919
WordPress core test suite does require

00:17:11,909 --> 00:17:16,110
an instance of WordPress that it can

00:17:13,919 --> 00:17:19,220
test against and wipe out the database

00:17:16,110 --> 00:17:22,169
of so don't use your production instance

00:17:19,220 --> 00:17:23,189
if you're using a tool like vvv it's

00:17:22,169 --> 00:17:25,589
already going to have a test environment

00:17:23,189 --> 00:17:27,029
built in which is really nice you can

00:17:25,589 --> 00:17:29,929
specify it via an environment variable

00:17:27,029 --> 00:17:32,549
to say hey do all of the tests over here

00:17:29,929 --> 00:17:33,899
you get bootstrap dot PHP which we're

00:17:32,549 --> 00:17:36,149
going to look at in just a second and

00:17:33,899 --> 00:17:37,740
then you get a nice example test because

00:17:36,149 --> 00:17:40,250
who doesn't want to test kind of saying

00:17:37,740 --> 00:17:42,270
hey here's how things might look for you

00:17:40,250 --> 00:17:45,770
one of the important things that we

00:17:42,270 --> 00:17:48,419
don't get though is a composer JSON file

00:17:45,770 --> 00:17:49,840
composer has yet to really take off in

00:17:48,419 --> 00:17:54,130
the WordPress space we

00:17:49,840 --> 00:17:55,870
bummer still holding out hope but if you

00:17:54,130 --> 00:17:57,070
haven't worked with composer composer is

00:17:55,870 --> 00:18:00,580
a package manager

00:17:57,070 --> 00:18:04,090
for WordPress if you are more familiar

00:18:00,580 --> 00:18:08,230
with NPM in the JavaScript world think

00:18:04,090 --> 00:18:13,390
of composer as a better NPM but for PHP

00:18:08,230 --> 00:18:15,520
stuff instead of JavaScript stuff so if

00:18:13,390 --> 00:18:17,440
you run composer in it it'll give you a

00:18:15,520 --> 00:18:18,970
nice little walkthrough and eventually

00:18:17,440 --> 00:18:20,500
we're going to get a file that looks

00:18:18,970 --> 00:18:23,559
like this this is my composer dot JSON

00:18:20,500 --> 00:18:25,809
I'm specifying the plug-in name a

00:18:23,559 --> 00:18:27,730
description for it I'm specifying the

00:18:25,809 --> 00:18:29,590
type its WordPress plug-in if anyone's

00:18:27,730 --> 00:18:31,510
using composer installers they're then

00:18:29,590 --> 00:18:33,370
able to say hey it's a wordpress plugin

00:18:31,510 --> 00:18:36,760
so I want you to install it into WP

00:18:33,370 --> 00:18:39,700
content plugins which is awesome license

00:18:36,760 --> 00:18:42,520
information author information and then

00:18:39,700 --> 00:18:43,779
down here I have this required dev this

00:18:42,520 --> 00:18:45,340
is where I'm loading in development

00:18:43,779 --> 00:18:48,130
dependencies and in this case I'm

00:18:45,340 --> 00:18:50,380
explicitly loading PHP unit some people

00:18:48,130 --> 00:18:53,950
will use a global PHP unit installation

00:18:50,380 --> 00:18:55,179
or something built into vvd or whatever

00:18:53,950 --> 00:18:58,210
development environment they're using

00:18:55,179 --> 00:19:01,620
however different versions of PHP unit

00:18:58,210 --> 00:19:04,390
will have different structures or

00:19:01,620 --> 00:19:06,460
different requirements around them and

00:19:04,390 --> 00:19:08,140
sometimes you'll get a test that'll be

00:19:06,460 --> 00:19:10,630
working in one and failing in another

00:19:08,140 --> 00:19:13,360
and it's it's probably not an issue with

00:19:10,630 --> 00:19:16,360
PHP unit it's just the Sebastian Berkman

00:19:13,360 --> 00:19:17,679
is very cool with like now they're gonna

00:19:16,360 --> 00:19:22,360
be backwards compatibility breaks

00:19:17,679 --> 00:19:24,880
because modern PHP folks it's worth

00:19:22,360 --> 00:19:28,480
noting Here I am pulling in PHP unit 7

00:19:24,880 --> 00:19:30,070
because WordPress as of the time of when

00:19:28,480 --> 00:19:32,669
I put these slides together and then

00:19:30,070 --> 00:19:35,760
check the ticket two nights ago

00:19:32,669 --> 00:19:39,520
WordPress core does not yet support PHP

00:19:35,760 --> 00:19:42,220
unit eight there's an open track ticket

00:19:39,520 --> 00:19:46,120
for it but modern PHP is usually not the

00:19:42,220 --> 00:19:47,409
highest priority that bootstrap file I

00:19:46,120 --> 00:19:50,890
mentioned earlier they get scaffolded

00:19:47,409 --> 00:19:52,899
for you the general gist of it as we go

00:19:50,890 --> 00:19:54,429
through we're going to locate the

00:19:52,899 --> 00:19:55,600
WordPress installation so in this case

00:19:54,429 --> 00:19:58,360
it's looking for the environment

00:19:55,600 --> 00:20:00,340
variable WP tests der again if you're

00:19:58,360 --> 00:20:02,140
using something like DVD it's already

00:20:00,340 --> 00:20:02,980
going to define this and say nope use

00:20:02,140 --> 00:20:04,330
this one over here

00:20:02,980 --> 00:20:05,380
otherwise it's going

00:20:04,330 --> 00:20:07,450
to assume that the shell script

00:20:05,380 --> 00:20:10,809
installed it to temp slash WordPress

00:20:07,450 --> 00:20:13,570
Beslan next we're going to load one file

00:20:10,809 --> 00:20:16,110
from that test directory which gives us

00:20:13,570 --> 00:20:20,919
access to the text ad filter function

00:20:16,110 --> 00:20:23,140
we're going to write a hook or we're

00:20:20,919 --> 00:20:25,320
going to hook in using that test add

00:20:23,140 --> 00:20:27,850
filter function I wrote minus a closure

00:20:25,320 --> 00:20:29,769
because we're all using PHP five three

00:20:27,850 --> 00:20:31,570
and above and because otherwise it

00:20:29,769 --> 00:20:34,450
wouldn't fit on the slide and I'm

00:20:31,570 --> 00:20:36,639
loading the main file from my plugging

00:20:34,450 --> 00:20:38,860
so I'm simply requiring that on any

00:20:36,639 --> 00:20:41,799
plug-in floated and then I'm going to

00:20:38,860 --> 00:20:43,600
bootstrap WordPress core this bootstraps

00:20:41,799 --> 00:20:44,889
the core test suite it starts going okay

00:20:43,600 --> 00:20:46,570
let me set up the wordpress instance

00:20:44,889 --> 00:20:48,909
make sure everything is the way it needs

00:20:46,570 --> 00:20:53,289
to be and then start running through the

00:20:48,909 --> 00:20:55,720
tests if we were just writing regular

00:20:53,289 --> 00:20:58,029
PHP and it tests our test classes would

00:20:55,720 --> 00:21:00,639
look something like this we have my app

00:20:58,029 --> 00:21:03,309
test extends PHP unit framework test

00:21:00,639 --> 00:21:04,929
case if we're working in WordPress we're

00:21:03,309 --> 00:21:07,029
just going to swap this out and instead

00:21:04,929 --> 00:21:10,330
of extending that based test case we're

00:21:07,029 --> 00:21:12,490
going to use WordPress's WP underscore

00:21:10,330 --> 00:21:17,440
unit test case and then get into our

00:21:12,490 --> 00:21:19,840
test methods PHP unit offers us a handy

00:21:17,440 --> 00:21:22,120
little feature called fixtures if we

00:21:19,840 --> 00:21:24,100
have common actions that we're repeating

00:21:22,120 --> 00:21:26,440
over and over I always need to scaffold

00:21:24,100 --> 00:21:30,340
the user before I run any tests in this

00:21:26,440 --> 00:21:31,990
test class we might use a fixture so you

00:21:30,340 --> 00:21:33,639
can say I want to do something on setup

00:21:31,990 --> 00:21:37,269
this is going to run before every test

00:21:33,639 --> 00:21:39,700
every test method I should specify carry

00:21:37,269 --> 00:21:41,950
down after every test method we also

00:21:39,700 --> 00:21:44,380
have set up before class which will run

00:21:41,950 --> 00:21:46,600
once at the beginning of the test class

00:21:44,380 --> 00:21:49,840
teardown after class at the end of each

00:21:46,600 --> 00:21:52,600
test class we also have annotations we

00:21:49,840 --> 00:21:54,809
can do at before and they do something

00:21:52,600 --> 00:21:58,889
before each test method we have at

00:21:54,809 --> 00:22:02,620
before at before class at after and or

00:21:58,889 --> 00:22:06,870
at after class annotations are weird to

00:22:02,620 --> 00:22:10,550
say out loud again we don't use words

00:22:06,870 --> 00:22:13,470
vocalization difficult

00:22:10,550 --> 00:22:16,620
when we have tests especially if we have

00:22:13,470 --> 00:22:19,230
multiple test Suites if we have multiple

00:22:16,620 --> 00:22:20,730
test classes perhaps there are features

00:22:19,230 --> 00:22:22,680
that are a little more tightly coupled

00:22:20,730 --> 00:22:25,800
and we want to make sure like anything

00:22:22,680 --> 00:22:27,120
related to this one thing are tied

00:22:25,800 --> 00:22:29,490
together I want to be able to run all of

00:22:27,120 --> 00:22:31,770
those related tests at once that's where

00:22:29,490 --> 00:22:33,210
this at group annotation comes in see

00:22:31,770 --> 00:22:37,260
that one I can say out loud that group

00:22:33,210 --> 00:22:39,930
hey so say we have our test includes

00:22:37,260 --> 00:22:43,470
private posts maybe this includes both

00:22:39,930 --> 00:22:45,360
it is relevant to posts and post meta we

00:22:43,470 --> 00:22:48,510
can use this at group and then by

00:22:45,360 --> 00:22:52,950
running phpunit - - group equals posts

00:22:48,510 --> 00:22:56,250
any test class or test method with posts

00:22:52,950 --> 00:22:58,070
as its group will get run so that's a

00:22:56,250 --> 00:23:01,290
really nice way it's totally flexible

00:22:58,070 --> 00:23:04,950
you can arrange it however makes the

00:23:01,290 --> 00:23:06,690
most sense for your application but

00:23:04,950 --> 00:23:09,990
we're able to keep this stuff together

00:23:06,690 --> 00:23:12,030
which is awesome if you recall earlier

00:23:09,990 --> 00:23:13,620
when I had the Skip tests we do have

00:23:12,030 --> 00:23:15,990
these two helpers available to us

00:23:13,620 --> 00:23:18,900
through PHP unit mark tests incomplete

00:23:15,990 --> 00:23:20,580
and mark tests skipped they behave in a

00:23:18,900 --> 00:23:23,160
similar way but they have slightly

00:23:20,580 --> 00:23:25,050
different meanings an incomplete test is

00:23:23,160 --> 00:23:26,160
really great if say you're developing a

00:23:25,050 --> 00:23:28,770
new feature you're trying to practice

00:23:26,160 --> 00:23:30,570
TDD and you're like okay I know that

00:23:28,770 --> 00:23:32,100
it's going to have to do this this this

00:23:30,570 --> 00:23:35,100
and this and I want to make sure that

00:23:32,100 --> 00:23:37,260
I'm testing in this error case you know

00:23:35,100 --> 00:23:39,660
so you maybe you stub out a bunch of

00:23:37,260 --> 00:23:40,950
functions or test methods but you

00:23:39,660 --> 00:23:43,680
haven't had time to actually write the

00:23:40,950 --> 00:23:45,570
tests you might mark them as incomplete

00:23:43,680 --> 00:23:48,480
just kind of they're here to remind me

00:23:45,570 --> 00:23:50,250
to write this test mark test skips on

00:23:48,480 --> 00:23:53,160
the other hand this is typically going

00:23:50,250 --> 00:23:55,170
to get used if you have maybe an issue

00:23:53,160 --> 00:23:57,780
where all of your tests are running fine

00:23:55,170 --> 00:24:00,390
then one test fails and then everything

00:23:57,780 --> 00:24:03,570
after that starts erroring or failing

00:24:00,390 --> 00:24:05,520
and you're like am i polluting something

00:24:03,570 --> 00:24:07,110
here my tests not cleaning up properly

00:24:05,520 --> 00:24:09,510
what's going on so I just want to

00:24:07,110 --> 00:24:11,400
temporarily remove something from the

00:24:09,510 --> 00:24:13,620
test Runner that's where Mark has

00:24:11,400 --> 00:24:15,150
skipped comes in really handy if you

00:24:13,620 --> 00:24:17,760
have a production code base where you

00:24:15,150 --> 00:24:20,700
have a bunch of test marks mark tests

00:24:17,760 --> 00:24:22,020
skipped that could be a code smell that

00:24:20,700 --> 00:24:24,810
someone's basically like I can't get

00:24:22,020 --> 00:24:27,210
these tests to pass clearly not my code

00:24:24,810 --> 00:24:28,830
it must be the tests that are wrong so

00:24:27,210 --> 00:24:32,790
people just sort of remove it and then

00:24:28,830 --> 00:24:34,230
things fail data providers are one of my

00:24:32,790 --> 00:24:35,880
favorite features and I realize that

00:24:34,230 --> 00:24:37,380
this talk kind of went like let's talk

00:24:35,880 --> 00:24:40,170
the wordpress stuff now let's go back to

00:24:37,380 --> 00:24:42,570
the cool pete stuff but I get like

00:24:40,170 --> 00:24:45,090
abnormally excited about data providers

00:24:42,570 --> 00:24:46,710
if you have a similar scenario that

00:24:45,090 --> 00:24:50,670
you're setting up and it's just kind of

00:24:46,710 --> 00:24:52,470
same play different actors you can use

00:24:50,670 --> 00:24:55,800
data providers to inject different data

00:24:52,470 --> 00:24:57,270
into it in this case we specify okay

00:24:55,800 --> 00:24:58,860
data provider I want to use my data

00:24:57,270 --> 00:25:01,140
provider which refers to this method

00:24:58,860 --> 00:25:03,060
down here I have the same setup and I'm

00:25:01,140 --> 00:25:06,410
taking arguments so expected and actual

00:25:03,060 --> 00:25:09,330
and then I'm doing the same assertion

00:25:06,410 --> 00:25:11,160
admittedly you'd normally see much more

00:25:09,330 --> 00:25:15,450
in here but for the sake of brevity on a

00:25:11,160 --> 00:25:16,890
slide I kept it pretty low but down here

00:25:15,450 --> 00:25:18,660
we have my data provider which is

00:25:16,890 --> 00:25:20,760
returning an array we can give each one

00:25:18,660 --> 00:25:24,000
a description so we might say like I

00:25:20,760 --> 00:25:26,040
want to do URL parsing I've done that

00:25:24,000 --> 00:25:27,720
one probably a hundred times I should

00:25:26,040 --> 00:25:29,460
really abstract that into a composer

00:25:27,720 --> 00:25:31,200
package come to think of it but maybe

00:25:29,460 --> 00:25:33,150
you're saying I want to make sure that

00:25:31,200 --> 00:25:36,750
like I'm finding all of the matches for

00:25:33,150 --> 00:25:41,070
a YouTube URL so you might have like so

00:25:36,750 --> 00:25:43,020
YouTube URL short URL with query string

00:25:41,070 --> 00:25:44,790
whatever you can define all of these

00:25:43,020 --> 00:25:47,550
things and then these arguments are

00:25:44,790 --> 00:25:49,320
going or the the returned arrays are

00:25:47,550 --> 00:25:50,430
going to correspond to the arguments so

00:25:49,320 --> 00:25:53,340
the first time we run through it will

00:25:50,430 --> 00:25:56,250
have description of case one who would

00:25:53,340 --> 00:25:58,020
be expected bar would be actual second

00:25:56,250 --> 00:26:01,050
time description of case two bar would

00:25:58,020 --> 00:26:03,030
be expected that's what the actual if we

00:26:01,050 --> 00:26:04,410
only need to do these data providers

00:26:03,030 --> 00:26:06,330
once and we don't want to break it out

00:26:04,410 --> 00:26:08,190
into a separate method there's also this

00:26:06,330 --> 00:26:10,050
at test with annotation which is really

00:26:08,190 --> 00:26:12,810
nice we can put it in the doc block at

00:26:10,050 --> 00:26:15,500
the top of the test method again foo bar

00:26:12,810 --> 00:26:18,300
would be expected in actual respectively

00:26:15,500 --> 00:26:21,360
one caveat here we can't do any sort of

00:26:18,300 --> 00:26:23,340
variable interpolation we can't if

00:26:21,360 --> 00:26:24,720
you're trying to use constants or call

00:26:23,340 --> 00:26:27,000
another function anything like that

00:26:24,720 --> 00:26:28,440
you're going to have to use the first

00:26:27,000 --> 00:26:30,990
method with the separate data provider

00:26:28,440 --> 00:26:32,700
because this actually is a method that

00:26:30,990 --> 00:26:36,930
returns an array but if you're just

00:26:32,700 --> 00:26:39,360
using kind of simple data

00:26:36,930 --> 00:26:40,830
oh I had the word and it was awesome I

00:26:39,360 --> 00:26:43,680
was going to blow you all away with how

00:26:40,830 --> 00:26:48,420
smart I sounded and now I've lost it

00:26:43,680 --> 00:26:50,340
damn but yeah the simple data that I

00:26:48,420 --> 00:26:55,260
can't remember the scaler scalar types

00:26:50,340 --> 00:26:57,480
boom anyway alright the rest of these I

00:26:55,260 --> 00:27:01,080
put a nice W up there to show you that

00:26:57,480 --> 00:27:04,020
these are WordPress specific so here's

00:27:01,080 --> 00:27:05,730
what we came here for right factories

00:27:04,020 --> 00:27:07,830
are included in the WordPress core test

00:27:05,730 --> 00:27:09,330
suite and these let us easily generate

00:27:07,830 --> 00:27:11,880
test data so maybe we need to generate

00:27:09,330 --> 00:27:14,340
posts or we need to generate users or

00:27:11,880 --> 00:27:15,840
comments or terms or attachments we can

00:27:14,340 --> 00:27:18,960
do all of that with the core test suite

00:27:15,840 --> 00:27:21,150
which is awesome we could say okay this

00:27:18,960 --> 00:27:23,490
factory posts create and we could pass

00:27:21,150 --> 00:27:24,990
in an array of arguments to change what

00:27:23,490 --> 00:27:26,880
the postal look like but this will give

00:27:24,990 --> 00:27:29,270
us back a post ID of a post and it just

00:27:26,880 --> 00:27:31,860
created it's not going to be like

00:27:29,270 --> 00:27:34,860
award-winning post content I think it

00:27:31,860 --> 00:27:36,750
says like this is the test content but I

00:27:34,860 --> 00:27:38,610
don't have to create that post

00:27:36,750 --> 00:27:41,520
I'm not calling WP insert post and

00:27:38,610 --> 00:27:43,950
pretending that I have that kind of time

00:27:41,520 --> 00:27:45,630
if we need to get back the object that

00:27:43,950 --> 00:27:47,670
was created we can use this create and

00:27:45,630 --> 00:27:49,679
get so we're doing this factory post

00:27:47,670 --> 00:27:52,470
create you get which gives us the post

00:27:49,679 --> 00:27:54,450
object if we want to change just a few

00:27:52,470 --> 00:27:55,650
things if we say the post title I really

00:27:54,450 --> 00:27:57,809
want to make sure that it's my custom

00:27:55,650 --> 00:28:00,360
post because maybe it was like example

00:27:57,809 --> 00:28:02,760
posts before or I need to assign a

00:28:00,360 --> 00:28:04,890
particular author ID to it I can pass

00:28:02,760 --> 00:28:06,600
the post offer there those just get

00:28:04,890 --> 00:28:09,390
passed straight through to WP insert

00:28:06,600 --> 00:28:11,670
post we can also do create many if you

00:28:09,390 --> 00:28:13,380
need to for instance say okay I have an

00:28:11,670 --> 00:28:14,880
author that I've created and I need to

00:28:13,380 --> 00:28:17,100
create five posts and assign them to

00:28:14,880 --> 00:28:18,390
them you can do that by creating the

00:28:17,100 --> 00:28:20,610
author and then you take the author ID

00:28:18,390 --> 00:28:23,880
and you set that as the post offer when

00:28:20,610 --> 00:28:25,980
we call this create many with five so a

00:28:23,880 --> 00:28:29,820
lot of cool stuff that you can do with

00:28:25,980 --> 00:28:31,260
factories a common use case with in

00:28:29,820 --> 00:28:33,900
testing WordPress is going to be

00:28:31,260 --> 00:28:37,740
impersonating users if you need to make

00:28:33,900 --> 00:28:39,600
sure that for instance someone who has

00:28:37,740 --> 00:28:41,790
an author role can't blow stuff up

00:28:39,600 --> 00:28:43,230
usually that's reserved for admins right

00:28:41,790 --> 00:28:45,480
we don't want our authors blowing stuff

00:28:43,230 --> 00:28:47,520
up maybe editors sometimes but usually

00:28:45,480 --> 00:28:49,530
only administrators or super admins get

00:28:47,520 --> 00:28:50,430
to blow stuff up so we're going to

00:28:49,530 --> 00:28:52,920
create a new off

00:28:50,430 --> 00:28:55,440
level user we're going to use this WP

00:28:52,920 --> 00:28:57,090
set current user to their user ID and

00:28:55,440 --> 00:28:59,520
then we're going to do like a capability

00:28:57,090 --> 00:29:01,770
check can the current user blow stuff up

00:28:59,520 --> 00:29:04,110
you'll want to assert that that's false

00:29:01,770 --> 00:29:06,510
and because we're acting as then by

00:29:04,110 --> 00:29:09,720
doing this WP set current user this will

00:29:06,510 --> 00:29:13,950
return false and hurray only the admins

00:29:09,720 --> 00:29:17,100
can blow stuff up the core test suite

00:29:13,950 --> 00:29:19,080
gives us the go-to helper and this is

00:29:17,100 --> 00:29:21,510
going to change the current page context

00:29:19,080 --> 00:29:23,490
as if you visited a new page keep in

00:29:21,510 --> 00:29:26,810
mind it's not actually going to make

00:29:23,490 --> 00:29:30,800
that HTTP each my added an extra tea

00:29:26,810 --> 00:29:33,660
HTTP request but it's going to reset

00:29:30,800 --> 00:29:35,550
things like the superglobals the global

00:29:33,660 --> 00:29:39,180
is the query variables the main query as

00:29:35,550 --> 00:29:42,150
if that page has been requested so again

00:29:39,180 --> 00:29:44,580
not an actual request which is good on

00:29:42,150 --> 00:29:49,110
saving time but something to be aware of

00:29:44,580 --> 00:29:50,760
so in this case we have look I'm not on

00:29:49,110 --> 00:29:52,770
the home page and then I go or what

00:29:50,760 --> 00:29:56,570
evaluates is home which is the page for

00:29:52,770 --> 00:29:59,880
posts which is confusing because legacy

00:29:56,570 --> 00:30:02,100
so if we go to slash blog now we're

00:29:59,880 --> 00:30:03,810
expecting is home to be true because we

00:30:02,100 --> 00:30:10,370
had set that as the page for posts in

00:30:03,810 --> 00:30:12,950
this particular site a custom assertion

00:30:10,370 --> 00:30:16,230
included with the core test suite is

00:30:12,950 --> 00:30:18,180
assert WP error which again because

00:30:16,230 --> 00:30:21,690
everything comes down to this the search

00:30:18,180 --> 00:30:24,810
for truth is essentially a true instance

00:30:21,690 --> 00:30:26,460
of WP error but it can be really nice if

00:30:24,810 --> 00:30:29,010
you have something that for instance

00:30:26,460 --> 00:30:30,870
might return a WP error and maybe you

00:30:29,010 --> 00:30:36,990
want to make sure that what you get back

00:30:30,870 --> 00:30:38,880
is in fact a WP error object so let's

00:30:36,990 --> 00:30:40,770
start talking about writing our first

00:30:38,880 --> 00:30:41,160
test I've given you the tools the

00:30:40,770 --> 00:30:42,810
knowledge

00:30:41,160 --> 00:30:44,940
I'm sure you could all go out right now

00:30:42,810 --> 00:30:48,390
and start writing tests and be like I'm

00:30:44,940 --> 00:30:50,400
confidently testing WordPress but for

00:30:48,390 --> 00:30:52,770
those who who would like a little

00:30:50,400 --> 00:30:53,210
walkthrough I guess we can okay let's do

00:30:52,770 --> 00:30:56,010
this

00:30:53,210 --> 00:30:57,450
so as we go through these tests I want

00:30:56,010 --> 00:31:02,130
you to pay attention to this pattern a

00:30:57,450 --> 00:31:03,210
range act assert a range we're going to

00:31:02,130 --> 00:31:05,520
set up this

00:31:03,210 --> 00:31:07,289
Aereo we're going to generate any posts

00:31:05,520 --> 00:31:09,960
that we need we're going to set any

00:31:07,289 --> 00:31:11,580
filters that we need whatever act we're

00:31:09,960 --> 00:31:14,100
going to actually execute the code the

00:31:11,580 --> 00:31:15,929
system under test then we're going to

00:31:14,100 --> 00:31:18,029
make assertions we're going to verify

00:31:15,929 --> 00:31:20,580
that things happened in the test the way

00:31:18,029 --> 00:31:22,289
we expected them to so let's go back to

00:31:20,580 --> 00:31:24,960
the idea of testing permissions because

00:31:22,289 --> 00:31:27,000
again really this ends up coming up a

00:31:24,960 --> 00:31:29,340
lot at least in the work that I've done

00:31:27,000 --> 00:31:31,950
throughout my career imagine we have a

00:31:29,340 --> 00:31:34,110
function that clears the site cache but

00:31:31,950 --> 00:31:35,429
the function itself is checking user

00:31:34,110 --> 00:31:37,470
capabilities before someone does

00:31:35,429 --> 00:31:39,539
something if the user doesn't have

00:31:37,470 --> 00:31:42,240
permission we should get back a WP error

00:31:39,539 --> 00:31:44,940
object so up here we're going to start

00:31:42,240 --> 00:31:46,409
by arranging the test like we did in the

00:31:44,940 --> 00:31:48,870
previous one we're going to create an

00:31:46,409 --> 00:31:51,870
author so we're using the user factory

00:31:48,870 --> 00:31:53,549
we're going to impersonate them and then

00:31:51,870 --> 00:31:56,100
we're going to try calling my plugin

00:31:53,549 --> 00:31:58,559
clear cache we're going to save the

00:31:56,100 --> 00:32:01,020
response to that it to a response

00:31:58,559 --> 00:32:03,149
variable then we're going to do a

00:32:01,020 --> 00:32:05,370
certain WP error response because we

00:32:03,149 --> 00:32:07,200
expected an author would get a WP error

00:32:05,370 --> 00:32:09,419
back and maybe we want to do something

00:32:07,200 --> 00:32:11,690
like make sure that the error code that

00:32:09,419 --> 00:32:16,260
we get back with the WP air object is a

00:32:11,690 --> 00:32:16,980
403 everything does that kind of make

00:32:16,260 --> 00:32:19,169
sense to everybody

00:32:16,980 --> 00:32:20,730
we're setting up the scenario we're

00:32:19,169 --> 00:32:24,600
acting on it and then we're making

00:32:20,730 --> 00:32:27,990
assertions maybe we have a custom post

00:32:24,600 --> 00:32:29,520
type I mean I'm guessing at least one or

00:32:27,990 --> 00:32:32,730
two people in the room have registered a

00:32:29,520 --> 00:32:34,860
custom post type yeah okay I was

00:32:32,730 --> 00:32:37,350
underselling it has anyone not done a

00:32:34,860 --> 00:32:45,149
custom post type before they're awesome

00:32:37,350 --> 00:32:46,950
they're set all right so we register a

00:32:45,149 --> 00:32:48,990
custom post type in this example we'll

00:32:46,950 --> 00:32:50,730
say that it's book maybe that gets

00:32:48,990 --> 00:32:51,409
registered by a function in our plug-in

00:32:50,730 --> 00:32:53,760
called

00:32:51,409 --> 00:32:55,679
register post types because naming

00:32:53,760 --> 00:32:58,289
things is hard so then we're going to

00:32:55,679 --> 00:33:00,240
get the post type object of book store

00:32:58,289 --> 00:33:02,340
it in post type here then we're going to

00:33:00,240 --> 00:33:03,720
start making assertions about that now

00:33:02,340 --> 00:33:05,399
we don't have to check everything we

00:33:03,720 --> 00:33:07,409
don't want our code to necessarily have

00:33:05,399 --> 00:33:10,049
to redefine like you don't want to write

00:33:07,409 --> 00:33:11,789
your code twice once in your test and

00:33:10,049 --> 00:33:14,130
once over here but we want to make sure

00:33:11,789 --> 00:33:15,179
that the key points stick we want to

00:33:14,130 --> 00:33:16,150
make sure that the post type actually

00:33:15,179 --> 00:33:18,340
got regice

00:33:16,150 --> 00:33:21,100
get post type object will return null if

00:33:18,340 --> 00:33:24,030
if it doesn't exist so this makes sure

00:33:21,100 --> 00:33:26,350
that books are actually a thing big fan

00:33:24,030 --> 00:33:28,090
this maybe we want to make sure that the

00:33:26,350 --> 00:33:30,130
post type is public because if you

00:33:28,090 --> 00:33:31,900
happen to said it's private suddenly

00:33:30,130 --> 00:33:33,549
your plugin will break in all sorts of

00:33:31,900 --> 00:33:35,320
mysterious ways so we're going to make

00:33:33,549 --> 00:33:37,299
these select assertions we're not

00:33:35,320 --> 00:33:39,370
worrying about things like make sure

00:33:37,299 --> 00:33:41,710
that this label is exactly this or

00:33:39,370 --> 00:33:43,059
anything like that and maybe we want to

00:33:41,710 --> 00:33:46,450
make sure that it's hierarchical or it's

00:33:43,059 --> 00:33:52,000
not hierarchical so we put an assertion

00:33:46,450 --> 00:33:53,470
in there we can test hooks as well if we

00:33:52,000 --> 00:33:55,960
want to make sure that a custom action

00:33:53,470 --> 00:33:57,730
was called we can use the function did

00:33:55,960 --> 00:34:00,880
action which will return the number of

00:33:57,730 --> 00:34:03,070
times a particular action was called in

00:34:00,880 --> 00:34:05,740
this case we're there's nothing they

00:34:03,070 --> 00:34:07,510
have to arrange we can act and call my

00:34:05,740 --> 00:34:09,639
plugin function and then we're going to

00:34:07,510 --> 00:34:12,399
make sure that we're seeing exactly one

00:34:09,639 --> 00:34:16,750
time that my act or my plugin underscore

00:34:12,399 --> 00:34:19,270
action was called as we called my plugin

00:34:16,750 --> 00:34:22,030
function if we want to get a little more

00:34:19,270 --> 00:34:23,500
introspective and this is also where the

00:34:22,030 --> 00:34:25,960
test stub will start kind of coming in

00:34:23,500 --> 00:34:27,909
we could actually hook into that action

00:34:25,960 --> 00:34:30,490
I've used this pattern plenty of times

00:34:27,909 --> 00:34:32,919
where you set up a variable something

00:34:30,490 --> 00:34:35,770
like called or did stuff or whatever

00:34:32,919 --> 00:34:37,300
whatever sparks your mood that day then

00:34:35,770 --> 00:34:41,649
we're actually going to register a

00:34:37,300 --> 00:34:43,350
callback on the my plugin action we're

00:34:41,649 --> 00:34:46,720
going to pass it a closure here and

00:34:43,350 --> 00:34:47,859
using the use keyword we're going to

00:34:46,720 --> 00:34:50,440
make sure that we're passing in this

00:34:47,859 --> 00:34:52,869
called variable by reference so if we

00:34:50,440 --> 00:34:55,540
make a change in here to say hey called

00:34:52,869 --> 00:34:57,670
is true then that's actually going to

00:34:55,540 --> 00:34:59,470
change it out here in this scope down

00:34:57,670 --> 00:35:00,820
here we can call the function and then

00:34:59,470 --> 00:35:04,330
make sure that we're asserting true

00:35:00,820 --> 00:35:06,820
called in here we can take in any

00:35:04,330 --> 00:35:07,990
arguments we need to write here so

00:35:06,820 --> 00:35:09,369
arguments that would have been sent to

00:35:07,990 --> 00:35:12,609
the function and we can do additional

00:35:09,369 --> 00:35:14,080
assertions this makes sure that it's not

00:35:12,609 --> 00:35:15,670
just saying hey you passed because I

00:35:14,080 --> 00:35:18,730
never actually did the assertions in

00:35:15,670 --> 00:35:20,500
there and in here we can do you know did

00:35:18,730 --> 00:35:24,820
it receive exactly these arguments did

00:35:20,500 --> 00:35:26,980
it behave in this way did stuff blow up

00:35:24,820 --> 00:35:29,490
unnecessarily where errors triggered

00:35:26,980 --> 00:35:29,490
anything like that

00:35:29,700 --> 00:35:34,660
WordPress has a tendency to print a lot

00:35:32,260 --> 00:35:36,910
of things to screen things like the

00:35:34,660 --> 00:35:39,970
title come to mind where you're not

00:35:36,910 --> 00:35:43,030
returning a value you're simply echoing

00:35:39,970 --> 00:35:44,770
that to the screen so a lot of template

00:35:43,030 --> 00:35:46,990
tags short codes things like that are

00:35:44,770 --> 00:35:48,160
often going to echo things well not

00:35:46,990 --> 00:35:50,890
short codes don't do that with short

00:35:48,160 --> 00:35:52,780
codes but things will often be echo

00:35:50,890 --> 00:35:56,200
directly to the screen so it's important

00:35:52,780 --> 00:35:58,150
that we're able to test output I prefer

00:35:56,200 --> 00:36:00,370
this pattern where you do the OB start

00:35:58,150 --> 00:36:02,020
this is PHP output buffer if you haven't

00:36:00,370 --> 00:36:04,060
worked with it before basically it says

00:36:02,020 --> 00:36:06,670
hey don't print anything just kind of

00:36:04,060 --> 00:36:09,280
keep it in memory then I'm gonna call do

00:36:06,670 --> 00:36:10,870
short code pass the short code tag that

00:36:09,280 --> 00:36:13,240
otherwise would be in my content and

00:36:10,870 --> 00:36:15,700
then OB get clean basically says okay

00:36:13,240 --> 00:36:17,260
reset the output buffer but also return

00:36:15,700 --> 00:36:19,540
anything that was printed since I

00:36:17,260 --> 00:36:21,700
started the output buffer so basically

00:36:19,540 --> 00:36:24,850
I'm able to get the output of do short

00:36:21,700 --> 00:36:27,430
code right here in the output variable

00:36:24,850 --> 00:36:30,550
and then I can do assert contains latest

00:36:27,430 --> 00:36:32,230
posts if I needed to get deeper into it

00:36:30,550 --> 00:36:34,240
make sure that certain selectors existed

00:36:32,230 --> 00:36:35,680
or anything that's where that PHP and if

00:36:34,240 --> 00:36:37,960
markup assertions library I mentioned

00:36:35,680 --> 00:36:40,210
earlier comes into play if you know

00:36:37,960 --> 00:36:43,030
exactly what content you're looking for

00:36:40,210 --> 00:36:46,450
you can do kind of the short version and

00:36:43,030 --> 00:36:49,810
just say hey expect the output to be

00:36:46,450 --> 00:36:52,390
exactly h2 latest posts closing h2 and

00:36:49,810 --> 00:36:54,700
then just call do shortcode this doesn't

00:36:52,390 --> 00:36:56,710
let you do kind of partial matches or

00:36:54,700 --> 00:36:58,540
like hey let me throw some variables in

00:36:56,710 --> 00:37:00,040
here and kind of whatever but if you

00:36:58,540 --> 00:37:03,940
know the exact string you're looking for

00:37:00,040 --> 00:37:05,560
this is a nice clean way to do that and

00:37:03,940 --> 00:37:09,610
one of the most common use cases you'll

00:37:05,560 --> 00:37:12,610
run into is stubbing HTTP requests again

00:37:09,610 --> 00:37:15,490
we should not be testing the api's that

00:37:12,610 --> 00:37:17,710
our our themes or our plugins rely on

00:37:15,490 --> 00:37:20,230
that's not the job of our test we have

00:37:17,710 --> 00:37:22,780
our system under test and if the api

00:37:20,230 --> 00:37:27,190
over there changes like that's kind of

00:37:22,780 --> 00:37:28,870
on the api the pre HTTP request filter

00:37:27,190 --> 00:37:35,140
is the way that we're going to

00:37:28,870 --> 00:37:37,750
short-circuit WordPress HTTP API a lot

00:37:35,140 --> 00:37:41,800
of words there short-circuit the

00:37:37,750 --> 00:37:42,430
WordPress HTTP API so that would be WP

00:37:41,800 --> 00:37:45,700
Remote

00:37:42,430 --> 00:37:48,339
WP remote post all of that normally this

00:37:45,700 --> 00:37:50,319
filter is going to do nothing but if we

00:37:48,339 --> 00:37:52,270
return something it goes oh I already

00:37:50,319 --> 00:37:53,650
have a response I'm just going to not

00:37:52,270 --> 00:37:56,950
execute the stuff where it actually

00:37:53,650 --> 00:37:59,619
makes calls so in this case we have to

00:37:56,950 --> 00:38:03,789
return something in this form because

00:37:59,619 --> 00:38:05,770
this is how the HTTP API responses look

00:38:03,789 --> 00:38:07,839
so we have like headers and body in this

00:38:05,770 --> 00:38:12,279
case we're saying okay we have an empty

00:38:07,839 --> 00:38:14,079
body but a 200 ok status code if we

00:38:12,279 --> 00:38:16,480
needed to test like well how will this

00:38:14,079 --> 00:38:19,539
respond if I happen to get back a 404

00:38:16,480 --> 00:38:21,789
from the API or a 401 or anything like

00:38:19,539 --> 00:38:23,799
that we can start changing these values

00:38:21,789 --> 00:38:26,980
we never actually call out to the API

00:38:23,799 --> 00:38:28,359
but we can predict the responses that

00:38:26,980 --> 00:38:32,380
would be coming back because we are

00:38:28,359 --> 00:38:34,089
literally the ones providing them so

00:38:32,380 --> 00:38:36,940
let's take all of this and put it

00:38:34,089 --> 00:38:39,549
together there's a concept if you

00:38:36,940 --> 00:38:42,880
haven't heard the term TDD before or you

00:38:39,549 --> 00:38:46,029
haven't practiced TDD before test-driven

00:38:42,880 --> 00:38:49,750
development it's it can seem like a

00:38:46,029 --> 00:38:52,930
foreign concepts the general idea of TDD

00:38:49,750 --> 00:38:55,779
is we're going to write tests before we

00:38:52,930 --> 00:38:57,670
write any actual implementation to

00:38:55,779 --> 00:39:00,250
describe the functionality or behavior

00:38:57,670 --> 00:39:02,740
of our code so we say okay I'm going to

00:39:00,250 --> 00:39:04,270
be writing this function and it's going

00:39:02,740 --> 00:39:06,490
to need to be able to accept these kinds

00:39:04,270 --> 00:39:08,170
of arguments and when it gets these

00:39:06,490 --> 00:39:10,420
particular arguments I'm expecting to

00:39:08,170 --> 00:39:13,170
see these responses we're writing the

00:39:10,420 --> 00:39:16,089
tests before we write the implementation

00:39:13,170 --> 00:39:17,470
now these tests are going to be failing

00:39:16,089 --> 00:39:19,630
because of course we haven't written

00:39:17,470 --> 00:39:21,069
anything to make them pass we're just

00:39:19,630 --> 00:39:24,490
saying oh this function will do this

00:39:21,069 --> 00:39:26,260
it's doing like the the sales pitch and

00:39:24,490 --> 00:39:27,430
now the developers have to come in and

00:39:26,260 --> 00:39:30,549
do it oh no we actually have to

00:39:27,430 --> 00:39:33,520
implement this thing now we're going to

00:39:30,549 --> 00:39:35,200
write the code the minimum amount of

00:39:33,520 --> 00:39:37,480
code necessary to make those tests pass

00:39:35,200 --> 00:39:38,890
we've described how it should work now

00:39:37,480 --> 00:39:41,559
we have to actually satisfy that

00:39:38,890 --> 00:39:43,510
contract we have to say ok what code can

00:39:41,559 --> 00:39:45,400
I write to make this work once all of

00:39:43,510 --> 00:39:47,920
the tests are passing then we can go

00:39:45,400 --> 00:39:51,099
back we can start saying well this could

00:39:47,920 --> 00:39:52,299
be done in a more performant way we want

00:39:51,099 --> 00:39:55,180
to use functional programming here

00:39:52,299 --> 00:39:56,620
because it's so hot right now

00:39:55,180 --> 00:39:57,820
that's where you can go back you can

00:39:56,620 --> 00:39:59,830
refactor you can try to make things

00:39:57,820 --> 00:40:02,170
better before the first time you write

00:39:59,830 --> 00:40:04,060
the code you're writing just the bare

00:40:02,170 --> 00:40:06,940
minimum to like have we satisfied the

00:40:04,060 --> 00:40:09,130
requirements or if you're some people I

00:40:06,940 --> 00:40:12,250
know you never go beyond the bare

00:40:09,130 --> 00:40:15,790
minimum but I'm not making fun of Seth

00:40:12,250 --> 00:40:22,180
or anything sorry Seth I had to pick on

00:40:15,790 --> 00:40:25,150
someone yeah so this is often referred

00:40:22,180 --> 00:40:26,740
to as red green refactor read because

00:40:25,150 --> 00:40:27,880
we're in a failing state when we've

00:40:26,740 --> 00:40:30,550
written the tests but we have not yet

00:40:27,880 --> 00:40:31,990
implemented the code green because the

00:40:30,550 --> 00:40:33,640
tests are passing yay and green is

00:40:31,990 --> 00:40:38,050
awesome and then there isn't a good

00:40:33,640 --> 00:40:42,280
color for refactor so it's just to stay

00:40:38,050 --> 00:40:44,710
in plain old black text where TDD

00:40:42,280 --> 00:40:48,370
becomes really handy is in what we call

00:40:44,710 --> 00:40:51,280
regression testing so this is a way of

00:40:48,370 --> 00:40:53,890
making sure that you have a bug you want

00:40:51,280 --> 00:40:56,710
to fix it once and never have that bug

00:40:53,890 --> 00:40:59,320
come back again now imagine we have this

00:40:56,710 --> 00:41:01,600
function called recent post heading and

00:40:59,320 --> 00:41:03,640
it's going to take an array of posts and

00:41:01,600 --> 00:41:05,410
if it's empty it'll say there have been

00:41:03,640 --> 00:41:07,540
no posts in the last 30 days otherwise

00:41:05,410 --> 00:41:09,550
it'll say there have been X posts in the

00:41:07,540 --> 00:41:12,880
last 30 days some people might see where

00:41:09,550 --> 00:41:15,040
this this bug exists already so if we

00:41:12,880 --> 00:41:16,780
run this with zero posts we're going to

00:41:15,040 --> 00:41:19,810
see there have been no posts in the last

00:41:16,780 --> 00:41:23,140
30 days cool if we run it with one one

00:41:19,810 --> 00:41:26,560
posts in the last 30 days I'm not cool

00:41:23,140 --> 00:41:29,290
with that that that hurts and then two

00:41:26,560 --> 00:41:31,120
posts in the last 30 days okay we have a

00:41:29,290 --> 00:41:32,470
bug in our software it's making us look

00:41:31,120 --> 00:41:36,160
like we don't understand how

00:41:32,470 --> 00:41:38,520
pluralization works so let's write a

00:41:36,160 --> 00:41:41,980
test for it

00:41:38,520 --> 00:41:43,660
let's say we maybe hadn't had any tests

00:41:41,980 --> 00:41:45,580
before because we're just getting into

00:41:43,660 --> 00:41:47,470
writing tests so we do something like

00:41:45,580 --> 00:41:49,870
this we have a data provider and we're

00:41:47,470 --> 00:41:51,550
saying okay when I have 0 1 or 2 I'm

00:41:49,870 --> 00:41:54,040
expecting there have been no posts in

00:41:51,550 --> 00:41:55,870
the last 30 days one post one spelled

00:41:54,040 --> 00:41:58,120
out because one as a numeral at the

00:41:55,870 --> 00:42:01,000
beginning of a sentence is awkward one

00:41:58,120 --> 00:42:03,550
post in the last 30 days or 2 posts or X

00:42:01,000 --> 00:42:07,240
post whatever so we could keep going on

00:42:03,550 --> 00:42:09,340
and saying like at 15 we want it to you

00:42:07,240 --> 00:42:11,800
get the idea so

00:42:09,340 --> 00:42:13,990
in our test we are using a factory we're

00:42:11,800 --> 00:42:16,720
creating many however many we retell it

00:42:13,990 --> 00:42:19,120
here we are setting the expected output

00:42:16,720 --> 00:42:21,280
to expected which again is going to be

00:42:19,120 --> 00:42:22,930
the string there and then we're going to

00:42:21,280 --> 00:42:25,900
call recent post heading on the posts

00:42:22,930 --> 00:42:28,390
array that we generated now we haven't

00:42:25,900 --> 00:42:29,650
fixed the bug yet so our tests are going

00:42:28,390 --> 00:42:31,930
to be failing we still have a situation

00:42:29,650 --> 00:42:35,350
where we're looking for one post in the

00:42:31,930 --> 00:42:39,040
last 30 days but we're still getting the

00:42:35,350 --> 00:42:40,840
number one posts in the last 30 days I

00:42:39,040 --> 00:42:43,420
died a little bit inside every time I

00:42:40,840 --> 00:42:44,860
have to say that so we look at our code

00:42:43,420 --> 00:42:46,480
and we go ok we've been able to

00:42:44,860 --> 00:42:48,490
reproduce the bug we have something

00:42:46,480 --> 00:42:50,920
telling us hey there's an issue here

00:42:48,490 --> 00:42:52,630
you've reproduced it i reaiiy tain an

00:42:50,920 --> 00:42:55,510
additional conditional statement so we

00:42:52,630 --> 00:42:57,700
say ok if we have exactly one print one

00:42:55,510 --> 00:42:59,920
post in the last 30 days for everything

00:42:57,700 --> 00:43:02,710
above one so we've covered zero we've

00:42:59,920 --> 00:43:03,580
covered one everything else do ex post

00:43:02,710 --> 00:43:06,100
in the last 30 days

00:43:03,580 --> 00:43:09,400
now our tests are green they're passing

00:43:06,100 --> 00:43:12,010
we get to go to Chipotle or happy hour

00:43:09,400 --> 00:43:14,020
or whatever what's important here is

00:43:12,010 --> 00:43:15,640
that if someone comes back and maybe we

00:43:14,020 --> 00:43:17,740
have a merge conflict where someone's

00:43:15,640 --> 00:43:18,760
like I really hate else ifs because

00:43:17,740 --> 00:43:20,410
there are people who are like they

00:43:18,760 --> 00:43:22,150
refuse to use else--if and I don't

00:43:20,410 --> 00:43:24,130
understand it it doesn't make sense to

00:43:22,150 --> 00:43:28,120
me at all but if you want to sacrifice

00:43:24,130 --> 00:43:29,500
1/3 of logic cool let's say they remove

00:43:28,120 --> 00:43:32,860
that well suddenly we're going to go

00:43:29,500 --> 00:43:35,020
back to a failing test because we have

00:43:32,860 --> 00:43:38,080
this test in there saying hey it needs

00:43:35,020 --> 00:43:39,910
to cover this scenario so we will

00:43:38,080 --> 00:43:41,410
hopefully never have to solve this bug

00:43:39,910 --> 00:43:43,330
again which is awesome because I hate

00:43:41,410 --> 00:43:47,230
repeating myself despite the fact that I

00:43:43,330 --> 00:43:51,520
do it over and over and over so with

00:43:47,230 --> 00:43:53,790
that we have like two minutes I don't

00:43:51,520 --> 00:43:56,940
know if it's a 45 or 50 minutes lot

00:43:53,790 --> 00:44:00,040
timing too we have time for questions

00:43:56,940 --> 00:44:03,130
all right either way let's do the copy

00:44:00,040 --> 00:44:10,920
thing now yay are we all confident

00:44:03,130 --> 00:44:10,920
testers do we have time for questions

00:44:10,930 --> 00:44:13,930
yes

00:44:46,350 --> 00:44:50,190
okay so if if I'm understanding

00:44:48,420 --> 00:44:52,260
correctly basically how do we make sure

00:44:50,190 --> 00:44:54,480
that after we say we're not actually

00:44:52,260 --> 00:44:56,310
going to call out to the API we're going

00:44:54,480 --> 00:44:58,230
to stop everything and then what if that

00:44:56,310 --> 00:45:00,390
API changes or they introduce something

00:44:58,230 --> 00:45:02,610
new and things break in all sorts of

00:45:00,390 --> 00:45:05,190
miraculous ways I've done that more

00:45:02,610 --> 00:45:08,490
times than I care

00:45:05,190 --> 00:45:10,590
I've actually started writing like side

00:45:08,490 --> 00:45:12,090
tests that just kind of get run not as

00:45:10,590 --> 00:45:14,940
part of the main test suite but rather

00:45:12,090 --> 00:45:16,800
as part of like hey this is what I'm

00:45:14,940 --> 00:45:19,980
expecting to get once a month on like a

00:45:16,800 --> 00:45:21,600
cron through a CI server like call out

00:45:19,980 --> 00:45:24,570
and make sure that like the responses

00:45:21,600 --> 00:45:27,060
still sort of match part of that speaks

00:45:24,570 --> 00:45:29,250
to API versioning as well some people

00:45:27,060 --> 00:45:30,750
will just break things

00:45:29,250 --> 00:45:32,040
I've already been pretty critical of

00:45:30,750 --> 00:45:35,900
Facebook today so I'll give them a break

00:45:32,040 --> 00:45:41,250
here no I won't know they do that a lot

00:45:35,900 --> 00:45:43,290
and it gets really painful but yeah you

00:45:41,250 --> 00:45:44,370
get into kind of this this sub thing so

00:45:43,290 --> 00:45:49,590
what you want to make sure that you're

00:45:44,370 --> 00:45:51,060
doing is if you can't know that things

00:45:49,590 --> 00:45:53,970
are going to change but you want to make

00:45:51,060 --> 00:45:55,890
sure that you can adapt quickly I often

00:45:53,970 --> 00:45:57,810
will write helper methods that will kind

00:45:55,890 --> 00:46:00,870
of be wrappers around that API so I'll

00:45:57,810 --> 00:46:02,880
have like a okay mock this request and

00:46:00,870 --> 00:46:05,580
I'll pass in the relevant data that I

00:46:02,880 --> 00:46:08,760
need for my individual test case but I

00:46:05,580 --> 00:46:10,530
will have like a single method that kind

00:46:08,760 --> 00:46:11,910
of this is what I'm expecting to get

00:46:10,530 --> 00:46:14,370
back and I can fill in whatever details

00:46:11,910 --> 00:46:16,920
I need to but if something breaks I can

00:46:14,370 --> 00:46:18,540
go oh this is okay this is how it broke

00:46:16,920 --> 00:46:20,810
and this is where I can change it in my

00:46:18,540 --> 00:46:23,010
tests so moving forward things are cool

00:46:20,810 --> 00:46:24,480
changing API is that's kind of one of

00:46:23,010 --> 00:46:26,310
those like we're going to build

00:46:24,480 --> 00:46:28,820
everything built on everything else as

00:46:26,310 --> 00:46:32,160
long as nothing changes we're cool

00:46:28,820 --> 00:46:36,180
unfortunately that's rarely the case so

00:46:32,160 --> 00:46:38,670
is it one more or was that the one that

00:46:36,180 --> 00:46:40,530
was the one okay if anyone has further

00:46:38,670 --> 00:46:43,470
questions I'm around the rest of the day

00:46:40,530 --> 00:46:47,030
I will be at the the after party as well

00:46:43,470 --> 00:46:47,030
and thank you all so much

00:46:47,540 --> 00:46:53,919
you

00:46:48,250 --> 00:46:53,919

YouTube URL: https://www.youtube.com/watch?v=hto124ruPaY


