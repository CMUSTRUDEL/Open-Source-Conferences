Title: Micah Wood: The WordPress Developerâ€™s Guide to Caching
Publication date: 2019-09-06
Playlist: WordCamp Asheville 2019
Description: 
	Caching can be tricky business. Fundamentally, the concept is simple: storing a temporary copy of data so future requests can be served faster. In reality, there are a number of different types of caching. Certain types of caching can effect our code in different ways. Data changes and the cache has to be invalidated. What happens if a caching layer runs out of memory or goes down?
This session will enlighten those new to caching as well as introduce some common misconceptions, pitfalls and strategies to caching in WordPress themes and plugins.
Takeaways:
What caching is
What types of caching exist
What developers should know about caching when developing on WordPress

Presentation slides: http://link.wpscholar.com/wcavl-2019-caching
WPTV link: https://wordpress.tv/2019/08/08/micah-wood-the-wordpress-developers-guide-to-caching/
Captions: 
	00:00:06,290 --> 00:00:18,840
so we're first developers guide to

00:00:09,450 --> 00:00:19,439
Kishin right yeah caching caching what

00:00:18,840 --> 00:00:23,310
is it

00:00:19,439 --> 00:00:28,230
machine lots of ways to mispronounce

00:00:23,310 --> 00:00:31,710
right so yeah so what is caching in its

00:00:28,230 --> 00:00:34,500
simplest form it is just a temporarily

00:00:31,710 --> 00:00:40,469
storing some sort of resource so that

00:00:34,500 --> 00:00:43,320
future requests can be made faster which

00:00:40,469 --> 00:00:45,110
brings me to my breakfast so basically

00:00:43,320 --> 00:00:49,350
every morning I like to eat three eggs

00:00:45,110 --> 00:00:50,910
make a nice little omelet put a lot of

00:00:49,350 --> 00:00:52,770
ingredients in there right I put some

00:00:50,910 --> 00:00:56,699
spinach maybe some mushrooms tomatoes

00:00:52,770 --> 00:01:01,020
that kind of thing ultimately I cache

00:00:56,699 --> 00:01:03,780
everyday my food right so all I'm doing

00:01:01,020 --> 00:01:05,790
is I'm going to the store and I buy my

00:01:03,780 --> 00:01:07,970
stuff in bulk and I put it in a fridge I

00:01:05,790 --> 00:01:11,760
put it in a pantry I put it in a freezer

00:01:07,970 --> 00:01:14,100
and I basically store those resources

00:01:11,760 --> 00:01:15,780
temporarily in a location where I can

00:01:14,100 --> 00:01:16,950
get to them faster because I do not want

00:01:15,780 --> 00:01:19,830
to make a trip to the store every

00:01:16,950 --> 00:01:23,430
morning for all of the ingredients so I

00:01:19,830 --> 00:01:26,700
can make my omelet so in a sense we all

00:01:23,430 --> 00:01:28,680
do this everyday we just made not think

00:01:26,700 --> 00:01:30,270
about it in the same way right so every

00:01:28,680 --> 00:01:32,909
time you go to the grocery store you're

00:01:30,270 --> 00:01:35,130
caching and every time you put that

00:01:32,909 --> 00:01:37,530
thing in your pantry or wherever that's

00:01:35,130 --> 00:01:42,869
essentially the same idea so all you're

00:01:37,530 --> 00:01:46,740
doing in the digital space is the same

00:01:42,869 --> 00:01:49,439
type of thing so that's one of the the

00:01:46,740 --> 00:01:52,770
key aspects of it is just understanding

00:01:49,439 --> 00:01:56,340
that another key aspect of caching is

00:01:52,770 --> 00:01:58,619
the idea of invalidation right so this

00:01:56,340 --> 00:02:00,810
is the act of expiring some sort of

00:01:58,619 --> 00:02:02,189
cached resource right and we all

00:02:00,810 --> 00:02:06,210
experience this in real life as well

00:02:02,189 --> 00:02:09,270
right so we buy milk it has some sort of

00:02:06,210 --> 00:02:10,679
used by date maybe it's a you know you

00:02:09,270 --> 00:02:12,960
get that you go to the store you get to

00:02:10,679 --> 00:02:17,780
use buy or the sell buy or the

00:02:12,960 --> 00:02:20,040
best if sold or was it best if used by

00:02:17,780 --> 00:02:23,580
well and then the actual expiration date

00:02:20,040 --> 00:02:25,740
right but those are kind of just rough

00:02:23,580 --> 00:02:28,560
dates right like they're not hard and

00:02:25,740 --> 00:02:30,720
fast and so it's kind of like the milk

00:02:28,560 --> 00:02:32,250
you know you get it depends on whether

00:02:30,720 --> 00:02:33,720
you store it in the door in the back of

00:02:32,250 --> 00:02:36,030
the fridge how many times you open that

00:02:33,720 --> 00:02:39,390
door whether somebody actually left it

00:02:36,030 --> 00:02:41,280
out you know and sometimes it can taste

00:02:39,390 --> 00:02:43,830
horrible and smell fine and sometimes it

00:02:41,280 --> 00:02:47,490
smells horrible and it always tastes bad

00:02:43,830 --> 00:02:48,750
in that case but so you know so we kind

00:02:47,490 --> 00:02:50,580
of run into these situations where like

00:02:48,750 --> 00:02:52,020
well how do you tell if milk is bad well

00:02:50,580 --> 00:02:53,550
you know you can use the baking soda

00:02:52,020 --> 00:02:55,380
method and put the baking soda on the

00:02:53,550 --> 00:02:58,050
plate and dump the milk on there and if

00:02:55,380 --> 00:02:59,790
it interacts then it's no good to put it

00:02:58,050 --> 00:03:02,220
in the microwave and you heat it up and

00:02:59,790 --> 00:03:04,980
it becomes something other than liquid

00:03:02,220 --> 00:03:07,020
is no good you know we have all these

00:03:04,980 --> 00:03:08,760
kind of interesting things you can do to

00:03:07,020 --> 00:03:10,530
figure out whether milk is bad same

00:03:08,760 --> 00:03:14,580
thing happens with the digital space

00:03:10,530 --> 00:03:16,860
right so we have this data and ideally

00:03:14,580 --> 00:03:20,370
that data is still valid it may not be

00:03:16,860 --> 00:03:23,400
valid you know after some event takes

00:03:20,370 --> 00:03:26,340
place maybe some remote sources updated

00:03:23,400 --> 00:03:28,380
your Twitter account or maybe you've

00:03:26,340 --> 00:03:30,930
updated a post or somebody commented on

00:03:28,380 --> 00:03:35,220
that post and all of these things could

00:03:30,930 --> 00:03:37,260
potentially expire your data but it just

00:03:35,220 --> 00:03:38,820
depends on kind of what's going on and

00:03:37,260 --> 00:03:43,320
how your data interacts with the rest of

00:03:38,820 --> 00:03:45,630
the world right so a lot of times its

00:03:43,320 --> 00:03:49,530
standard to put some sort of expiration

00:03:45,630 --> 00:03:52,260
date on it but that date could be valid

00:03:49,530 --> 00:03:53,820
it could have long expired based off of

00:03:52,260 --> 00:03:56,760
some data change

00:03:53,820 --> 00:04:00,120
or whatnot so we have to just be careful

00:03:56,760 --> 00:04:02,430
about invalidating things when maybe

00:04:00,120 --> 00:04:05,700
they're still good for another week you

00:04:02,430 --> 00:04:07,500
never know right so and then we have

00:04:05,700 --> 00:04:09,840
cache busting which is another thing we

00:04:07,500 --> 00:04:12,960
hear a lot when we hear caching right so

00:04:09,840 --> 00:04:15,900
cache busting is basically forcing a

00:04:12,960 --> 00:04:17,640
cache to load a new resource in this

00:04:15,900 --> 00:04:23,030
case that's the act of throwing the milk

00:04:17,640 --> 00:04:25,979
out and let's go buy some more and so

00:04:23,030 --> 00:04:28,440
getting to actual code here

00:04:25,979 --> 00:04:32,000
one way that you'll probably see cash

00:04:28,440 --> 00:04:34,440
busting particularly Gutenberg does this

00:04:32,000 --> 00:04:38,849
so if you're in queueing some sort of

00:04:34,440 --> 00:04:41,819
style or script in WordPress you give it

00:04:38,849 --> 00:04:46,229
a handle and then you give it a URL

00:04:41,819 --> 00:04:51,479
where that resource can be found and you

00:04:46,229 --> 00:04:53,759
also define any dependencies in this

00:04:51,479 --> 00:04:56,009
case there's an empty array for that and

00:04:53,759 --> 00:04:58,409
then you have some sort of cache busting

00:04:56,009 --> 00:05:00,990
this is usually a version number so

00:04:58,409 --> 00:05:02,550
every time WordPress updates all the

00:05:00,990 --> 00:05:04,169
scripts inside WordPress they get a new

00:05:02,550 --> 00:05:06,479
version number that corresponds to the

00:05:04,169 --> 00:05:09,030
version of WordPress right so every time

00:05:06,479 --> 00:05:10,740
you update WordPress whatever the old

00:05:09,030 --> 00:05:13,650
versions of the scripts that released

00:05:10,740 --> 00:05:15,930
with that version of WordPress those

00:05:13,650 --> 00:05:17,759
will get a new version when you update

00:05:15,930 --> 00:05:20,610
and what that will do is it will

00:05:17,759 --> 00:05:23,039
automatically ensure that if you have

00:05:20,610 --> 00:05:25,740
these JavaScript files cached on a CDN

00:05:23,039 --> 00:05:29,659
or somewhere else that those things will

00:05:25,740 --> 00:05:32,190
be flushed essentially or busted because

00:05:29,659 --> 00:05:35,009
this new version number indicates that

00:05:32,190 --> 00:05:37,229
this is a different URL resource right

00:05:35,009 --> 00:05:38,880
it would depend a questionmark version

00:05:37,229 --> 00:05:42,599
equals to the end of the URL and that

00:05:38,880 --> 00:05:45,810
would force that resource to load a new

00:05:42,599 --> 00:05:49,889
one so this is a common approach is to

00:05:45,810 --> 00:05:54,169
essentially have the in a plugin you'd

00:05:49,889 --> 00:05:57,710
use plugins URL and a theme you'd use

00:05:54,169 --> 00:06:02,009
stylesheet URI or something like that

00:05:57,710 --> 00:06:04,199
and then ultimately for the version

00:06:02,009 --> 00:06:07,349
number what we're doing here is just

00:06:04,199 --> 00:06:10,039
saying file M time which is a PHP

00:06:07,349 --> 00:06:14,190
function let's check to see if the

00:06:10,039 --> 00:06:15,240
modified timestamp essentially

00:06:14,190 --> 00:06:18,840
associated with that file has changed

00:06:15,240 --> 00:06:21,930
and if it has let's use that as our

00:06:18,840 --> 00:06:24,629
version number so that basically ensures

00:06:21,930 --> 00:06:27,990
that if you deploy a new version of said

00:06:24,629 --> 00:06:31,469
CSS file to the server then that

00:06:27,990 --> 00:06:33,029
modification time would change and then

00:06:31,469 --> 00:06:35,520
this would essentially have a new

00:06:33,029 --> 00:06:38,089
version number and then that would

00:06:35,520 --> 00:06:39,610
ensure that the resource is loaded so

00:06:38,089 --> 00:06:43,569
that's cache

00:06:39,610 --> 00:06:45,340
busting so let's take a look at the

00:06:43,569 --> 00:06:49,719
general types of caching that there are

00:06:45,340 --> 00:06:51,219
so in a very general sense we have two

00:06:49,719 --> 00:06:53,889
things we have one which is the non

00:06:51,219 --> 00:06:58,300
persistent cache so this is basically

00:06:53,889 --> 00:07:00,069
where in a given page load any resources

00:06:58,300 --> 00:07:02,680
that are requested within the context of

00:07:00,069 --> 00:07:04,599
loading that page they are cached but

00:07:02,680 --> 00:07:08,259
only for that specific page load so

00:07:04,599 --> 00:07:10,419
they're not persisted beyond that and

00:07:08,259 --> 00:07:14,259
WordPress uses this and we'll go into

00:07:10,419 --> 00:07:15,939
that a little bit more in a bit then we

00:07:14,259 --> 00:07:18,580
have persistent cache which is basically

00:07:15,939 --> 00:07:22,029
where the data remains in the cache

00:07:18,580 --> 00:07:24,430
across the page loads and this is more

00:07:22,029 --> 00:07:27,340
common and the kind of more ideal

00:07:24,430 --> 00:07:30,939
situation but we'll explain kind of how

00:07:27,340 --> 00:07:32,919
those things come into play so those are

00:07:30,939 --> 00:07:34,810
kind of the two general types but we

00:07:32,919 --> 00:07:36,129
have a number of methods and I'm not

00:07:34,810 --> 00:07:38,969
necessarily going to cover every single

00:07:36,129 --> 00:07:41,289
possible method but kind of more the

00:07:38,969 --> 00:07:45,460
most common methods that you'll see when

00:07:41,289 --> 00:07:47,949
it comes to caching so one of these is a

00:07:45,460 --> 00:07:50,979
CDN right so we've all heard of CDN a

00:07:47,949 --> 00:07:52,449
content delivery network basically all

00:07:50,979 --> 00:07:54,129
of your files are stored in the cloud

00:07:52,449 --> 00:07:57,190
and they're served from the location

00:07:54,129 --> 00:08:00,580
that's the closest and so you can kind

00:07:57,190 --> 00:08:03,250
of set policies as to how those things

00:08:00,580 --> 00:08:05,229
how long those files should stay in

00:08:03,250 --> 00:08:07,000
there you know when they should expire

00:08:05,229 --> 00:08:08,500
and that kind of thing and you can

00:08:07,000 --> 00:08:11,669
manually purge and it kind of gives you

00:08:08,500 --> 00:08:15,339
some control over that so that's just a

00:08:11,669 --> 00:08:17,259
tool that it's commonly used most people

00:08:15,339 --> 00:08:20,409
don't actually think of it as caching

00:08:17,259 --> 00:08:24,729
per se but ultimately you are temporary

00:08:20,409 --> 00:08:29,620
temporarily storing images or JavaScript

00:08:24,729 --> 00:08:33,159
files or CSS files in a place a location

00:08:29,620 --> 00:08:35,649
server closer to wherever your visitors

00:08:33,159 --> 00:08:38,860
from so you can serve them faster so

00:08:35,649 --> 00:08:41,190
it's essentially a cache so another one

00:08:38,860 --> 00:08:43,440
here is the browser cache right so

00:08:41,190 --> 00:08:46,390
everybody has to use a browser to

00:08:43,440 --> 00:08:48,160
navigate the web so the content is

00:08:46,390 --> 00:08:50,500
stored essentially on that user's

00:08:48,160 --> 00:08:52,500
computer and managed by the browser

00:08:50,500 --> 00:08:55,170
itself

00:08:52,500 --> 00:08:58,860
and the user can go in and flush the

00:08:55,170 --> 00:09:01,350
cache themselves but generally there's

00:08:58,860 --> 00:09:05,820
cache headers and things when you make a

00:09:01,350 --> 00:09:07,560
request that indicate you know what

00:09:05,820 --> 00:09:13,200
things will be cached for how long and

00:09:07,560 --> 00:09:16,770
so on so so there's a browser cache we

00:09:13,200 --> 00:09:19,050
also have the object cache this is where

00:09:16,770 --> 00:09:21,960
essentially we have key value pairs so

00:09:19,050 --> 00:09:25,650
typically we'll have some data that has

00:09:21,960 --> 00:09:27,930
a name and it is stored in memory or in

00:09:25,650 --> 00:09:30,810
some sort of persistent data store and

00:09:27,930 --> 00:09:36,930
then those things can be expired or

00:09:30,810 --> 00:09:43,230
forcibly invalidated based off of other

00:09:36,930 --> 00:09:46,260
use cases so this would be so the object

00:09:43,230 --> 00:09:51,150
cache would there's a bunch of different

00:09:46,260 --> 00:09:54,240
ones like Redis or memcache is another

00:09:51,150 --> 00:09:57,930
common one those typically by default

00:09:54,240 --> 00:10:01,470
operate off of the RAM associated with

00:09:57,930 --> 00:10:04,020
the server so they're loaded into memory

00:10:01,470 --> 00:10:06,420
there but they do have a limitation in

00:10:04,020 --> 00:10:08,520
that typically whatever machine you're

00:10:06,420 --> 00:10:11,430
running on has very limited resources

00:10:08,520 --> 00:10:14,430
only has so much RAM available so I

00:10:11,430 --> 00:10:17,840
think a common configuration is someone

00:10:14,430 --> 00:10:22,620
around two megabytes of space for cached

00:10:17,840 --> 00:10:25,290
stuff correct so that's on the server so

00:10:22,620 --> 00:10:28,950
the browser cache is one of those things

00:10:25,290 --> 00:10:31,850
that you know you can you can send

00:10:28,950 --> 00:10:35,730
headers and and ask for things to be

00:10:31,850 --> 00:10:37,350
cached but ultimately you know user has

00:10:35,730 --> 00:10:39,570
to visit it and it has to be cached a

00:10:37,350 --> 00:10:44,730
literacy mean and then you know it'll

00:10:39,570 --> 00:10:47,430
stay no question but but yeah so that's

00:10:44,730 --> 00:10:49,290
on the server and then we also have page

00:10:47,430 --> 00:10:53,460
caching which is where we take an entire

00:10:49,290 --> 00:10:56,970
page and in store the actual rendered

00:10:53,460 --> 00:11:01,850
HTML and put that into some sort of data

00:10:56,970 --> 00:11:03,980
store based off of typically the URL

00:11:01,850 --> 00:11:05,450
and then in an event that some pages

00:11:03,980 --> 00:11:07,490
requested it's going to basically

00:11:05,450 --> 00:11:10,940
shortcut the loading of WordPress and

00:11:07,490 --> 00:11:13,910
return the HTML unless that HTML is not

00:11:10,940 --> 00:11:15,770
available then it would consider to miss

00:11:13,910 --> 00:11:19,370
and then allow it to go back through and

00:11:15,770 --> 00:11:21,760
wordpress with process as usual so so

00:11:19,370 --> 00:11:24,380
those are some of the common methods

00:11:21,760 --> 00:11:26,120
another one is fragment cache which is

00:11:24,380 --> 00:11:28,880
very similar to page caching except

00:11:26,120 --> 00:11:30,710
instead of caching an entire page we're

00:11:28,880 --> 00:11:32,900
just getting a segment or a section of

00:11:30,710 --> 00:11:35,090
the page so this is commonly done for

00:11:32,900 --> 00:11:39,470
things that may require a lot more

00:11:35,090 --> 00:11:42,860
processing so if you think of let's say

00:11:39,470 --> 00:11:45,110
you have an API that generates some sort

00:11:42,860 --> 00:11:48,170
of output that gets put out into some

00:11:45,110 --> 00:11:51,710
section of the page you could cache just

00:11:48,170 --> 00:11:56,060
that portion and reduce the need to

00:11:51,710 --> 00:11:58,580
check that API as often so getting to

00:11:56,060 --> 00:12:01,190
specifically the things that we can do

00:11:58,580 --> 00:12:03,470
in WordPress to kind of leverage some of

00:12:01,190 --> 00:12:06,740
these tools obviously some of these

00:12:03,470 --> 00:12:08,930
things are a little outside of our hands

00:12:06,740 --> 00:12:11,810
we can I'm probably not going to go as

00:12:08,930 --> 00:12:13,730
much into for example sending proper

00:12:11,810 --> 00:12:15,800
cache headers and things to ensure that

00:12:13,730 --> 00:12:17,930
things get cash for a certain amount of

00:12:15,800 --> 00:12:19,670
time a lot of plugins out there will

00:12:17,930 --> 00:12:22,730
just do that stuff for you and if you

00:12:19,670 --> 00:12:25,070
really want to know you can figure all

00:12:22,730 --> 00:12:28,130
that out for yourself but we're gonna

00:12:25,070 --> 00:12:31,940
talk more from the aspect of creating a

00:12:28,130 --> 00:12:33,500
plug-in what does it look like to do

00:12:31,940 --> 00:12:35,090
caching what are the different

00:12:33,500 --> 00:12:38,210
approaches what are the ups and down

00:12:35,090 --> 00:12:40,940
sides of doing that and you know what

00:12:38,210 --> 00:12:42,980
are the considerations so so this is a

00:12:40,940 --> 00:12:48,230
function that created that basically has

00:12:42,980 --> 00:12:50,330
no caching involved at all so as a good

00:12:48,230 --> 00:12:53,660
programmer I prefix it with a vendor

00:12:50,330 --> 00:12:55,100
name which I used WP scholar and the

00:12:53,660 --> 00:12:57,410
name of the function is get related

00:12:55,100 --> 00:12:59,150
posts and obviously what it's gonna do

00:12:57,410 --> 00:13:02,840
is it's gonna get posts related to the

00:12:59,150 --> 00:13:06,530
post ID that you pass in so we start out

00:13:02,840 --> 00:13:08,690
with a line of code there that says we

00:13:06,530 --> 00:13:10,610
have related posts as an array it's an

00:13:08,690 --> 00:13:12,260
empty array and down at the end we're

00:13:10,610 --> 00:13:15,050
going to return whatever related posts

00:13:12,260 --> 00:13:15,680
we have or find so all we're doing is

00:13:15,050 --> 00:13:18,860
we're taking

00:13:15,680 --> 00:13:21,410
WP query running some sort of query

00:13:18,860 --> 00:13:23,990
which I've hidden because that's not the

00:13:21,410 --> 00:13:28,100
important part right except the fact

00:13:23,990 --> 00:13:30,820
that we're returning IDs from this so

00:13:28,100 --> 00:13:35,089
this query is going to return a query

00:13:30,820 --> 00:13:38,420
object or instance which is going to

00:13:35,089 --> 00:13:40,130
have IDs as the post items so we're

00:13:38,420 --> 00:13:43,160
basically just saying if the query has

00:13:40,130 --> 00:13:47,390
posts then related post is equal to an

00:13:43,160 --> 00:13:50,720
array of post object or post IDs so

00:13:47,390 --> 00:13:53,240
query arrow posts is going to be an

00:13:50,720 --> 00:13:57,170
array of nothing but IDs and so those

00:13:53,240 --> 00:14:00,620
IDs represent the related posts and

00:13:57,170 --> 00:14:02,720
we'll kind of explain in our so toward

00:14:00,620 --> 00:14:04,910
the end of this presentation the last

00:14:02,720 --> 00:14:07,130
segment is essentially different

00:14:04,910 --> 00:14:08,899
mindsets and things that are things you

00:14:07,130 --> 00:14:12,560
need to think about when it comes to

00:14:08,899 --> 00:14:15,529
caching but so this is our kind of what

00:14:12,560 --> 00:14:20,089
do you call it when you test and you

00:14:15,529 --> 00:14:21,440
have control yeah this is our control

00:14:20,089 --> 00:14:23,360
group right so this is what it would

00:14:21,440 --> 00:14:24,830
look like if we did no caching and they

00:14:23,360 --> 00:14:27,020
were going to kind of have different

00:14:24,830 --> 00:14:29,779
different versions here we take a look

00:14:27,020 --> 00:14:31,550
at so the next version is essentially

00:14:29,779 --> 00:14:35,959
what I call run time caching so this

00:14:31,550 --> 00:14:37,700
idea of a non persistent cache so if we

00:14:35,959 --> 00:14:43,910
were to hit this function multiple times

00:14:37,700 --> 00:14:46,730
within within the code on a single page

00:14:43,910 --> 00:14:49,339
load then we would consistently get the

00:14:46,730 --> 00:14:51,320
same results every time without having

00:14:49,339 --> 00:14:55,100
to make the query over and over again

00:14:51,320 --> 00:15:00,350
but that's all it's doing the important

00:14:55,100 --> 00:15:02,300
thing here is to notice that caching is

00:15:00,350 --> 00:15:04,250
entirely dependent upon the informations

00:15:02,300 --> 00:15:06,770
passed in right so if you pass the same

00:15:04,250 --> 00:15:13,070
post I ID in you should always get the

00:15:06,770 --> 00:15:15,110
same data back so a very common problem

00:15:13,070 --> 00:15:16,220
is someone who might be implementing

00:15:15,110 --> 00:15:20,450
something like this would just say

00:15:16,220 --> 00:15:24,920
static queries equals zero or something

00:15:20,450 --> 00:15:26,630
or just an array right I'm sorry they

00:15:24,920 --> 00:15:28,470
would do like static related posts

00:15:26,630 --> 00:15:29,910
equals array right and then

00:15:28,470 --> 00:15:32,670
they run the query and whatever the

00:15:29,910 --> 00:15:34,920
result is set it to be that static

00:15:32,670 --> 00:15:37,500
variable problem is you pass in a

00:15:34,920 --> 00:15:40,740
different post ID it's gonna give you

00:15:37,500 --> 00:15:42,870
the old query which would not be any

00:15:40,740 --> 00:15:45,060
good so the idea here is that we have an

00:15:42,870 --> 00:15:49,620
array which represents the queries that

00:15:45,060 --> 00:15:52,380
have been run for in a given post ID and

00:15:49,620 --> 00:15:57,530
so we take our related posts we check to

00:15:52,380 --> 00:16:04,410
see if the queries array has a post ID

00:15:57,530 --> 00:16:06,420
what you call it index and then so if it

00:16:04,410 --> 00:16:10,980
does not will actually run a query and

00:16:06,420 --> 00:16:15,510
set the post ID is the key and the query

00:16:10,980 --> 00:16:17,760
result as the value and that way if we

00:16:15,510 --> 00:16:19,430
run multiple queries each query just

00:16:17,760 --> 00:16:22,580
essentially gets stored in that array

00:16:19,430 --> 00:16:25,970
and because we have a static variable

00:16:22,580 --> 00:16:31,320
that will actually persist across

00:16:25,970 --> 00:16:33,900
function calls and then so then we'll

00:16:31,320 --> 00:16:35,990
basically check to see if the item that

00:16:33,900 --> 00:16:39,330
we just said in the array has posts and

00:16:35,990 --> 00:16:42,330
if it does we'll fetch those posts and

00:16:39,330 --> 00:16:44,220
stories related posts and return that so

00:16:42,330 --> 00:16:47,040
it gets a little bit interesting when we

00:16:44,220 --> 00:16:47,940
start dealing with that but that's kind

00:16:47,040 --> 00:16:51,690
of a way that you would do it with

00:16:47,940 --> 00:16:54,420
runtime or non persistent caching and it

00:16:51,690 --> 00:16:58,590
works you know so if you happen to have

00:16:54,420 --> 00:17:05,130
a very high traffic site and unreliable

00:16:58,590 --> 00:17:07,140
other options right this can work so the

00:17:05,130 --> 00:17:08,400
next option here is transients right so

00:17:07,140 --> 00:17:11,880
transients are a common thing that

00:17:08,400 --> 00:17:13,380
people use in WordPress essentially what

00:17:11,880 --> 00:17:16,950
happens with transients just in case

00:17:13,380 --> 00:17:19,080
you're not aware is if you have some

00:17:16,950 --> 00:17:22,290
sort of object caching like Redis or

00:17:19,080 --> 00:17:24,030
memcache or things like that calling get

00:17:22,290 --> 00:17:26,340
transients at transia and all those

00:17:24,030 --> 00:17:28,050
functions will actually manipulate and

00:17:26,340 --> 00:17:31,170
work with your object caching that you

00:17:28,050 --> 00:17:32,820
set up however if there is no object

00:17:31,170 --> 00:17:34,440
caching setup then WordPress will

00:17:32,820 --> 00:17:37,230
actually store these things into the

00:17:34,440 --> 00:17:40,770
options table in your database and that

00:17:37,230 --> 00:17:42,480
is essentially how that will work so a

00:17:40,770 --> 00:17:46,649
lot of plugins

00:17:42,480 --> 00:17:49,710
we'll use transients because they don't

00:17:46,649 --> 00:17:51,389
know what caching is setup and if no

00:17:49,710 --> 00:17:54,659
caching is setup they can leverage the

00:17:51,389 --> 00:17:57,929
WordPress database itself to store their

00:17:54,659 --> 00:18:00,980
information so in this case again we

00:17:57,929 --> 00:18:03,659
want to make sure that the post ID

00:18:00,980 --> 00:18:06,029
whatever post ID we are requesting

00:18:03,659 --> 00:18:09,510
related posts for we always get the same

00:18:06,029 --> 00:18:12,419
related posts back at least until the

00:18:09,510 --> 00:18:15,600
cache clears and we do it again right so

00:18:12,419 --> 00:18:17,669
in this case we're calling get transient

00:18:15,600 --> 00:18:19,590
and we're doing WP scholar related posts

00:18:17,669 --> 00:18:21,659
underscore and we're appending

00:18:19,590 --> 00:18:24,059
essentially the post ID to the ends so

00:18:21,659 --> 00:18:27,830
that we have some sort of unique key for

00:18:24,059 --> 00:18:31,260
our cache so we're naming our transient

00:18:27,830 --> 00:18:33,299
uniquely to the post ID itself so there

00:18:31,260 --> 00:18:36,750
we have a query and if we don't have a

00:18:33,299 --> 00:18:39,389
query so in the in the case that the

00:18:36,750 --> 00:18:40,380
transient doesn't exist it's going to

00:18:39,389 --> 00:18:42,750
return false

00:18:40,380 --> 00:18:46,620
so query would be false and in that case

00:18:42,750 --> 00:18:47,970
if it's false we're gonna run a query do

00:18:46,620 --> 00:18:51,000
the same thing we have been doing

00:18:47,970 --> 00:18:52,649
fetching our related posts and in this

00:18:51,000 --> 00:18:54,750
case once we get our related post we're

00:18:52,649 --> 00:18:58,740
gonna call set transient which is going

00:18:54,750 --> 00:19:00,419
to allow us to use that same cache key

00:18:58,740 --> 00:19:03,090
essentially so the same name what the

00:19:00,419 --> 00:19:04,950
post ID appended we're gonna pass in our

00:19:03,090 --> 00:19:08,279
related posts and then we're going to

00:19:04,950 --> 00:19:11,279
pass in essentially how long it should

00:19:08,279 --> 00:19:12,960
be before that transient expires so in

00:19:11,279 --> 00:19:14,730
this case we're going to just cache this

00:19:12,960 --> 00:19:16,260
for five minutes

00:19:14,730 --> 00:19:18,090
so we're using the minute and seconds

00:19:16,260 --> 00:19:21,659
constant that WordPress provides

00:19:18,090 --> 00:19:23,010
multiplying that times five and it just

00:19:21,659 --> 00:19:24,480
makes it easy to read and we're not

00:19:23,010 --> 00:19:27,679
putting some really big number in there

00:19:24,480 --> 00:19:27,679
that you have to then calculate

00:19:35,900 --> 00:19:47,900
say it again true that's what I that's

00:19:46,520 --> 00:19:49,190
what I get for trying to do it and her

00:19:47,900 --> 00:19:53,120
you're not actually fully running the

00:19:49,190 --> 00:19:54,860
code yeah good point yeah so yeah

00:19:53,120 --> 00:19:57,350
important thing is to make sure that you

00:19:54,860 --> 00:20:01,940
actually store the same information that

00:19:57,350 --> 00:20:04,700
you are fetching so but actually that's

00:20:01,940 --> 00:20:07,610
something I actually see a lot is where

00:20:04,700 --> 00:20:10,910
somebody will take information put it in

00:20:07,610 --> 00:20:12,650
a transient get it back and expect some

00:20:10,910 --> 00:20:15,340
very specific data structure which is

00:20:12,650 --> 00:20:17,890
not the data structure they passed in so

00:20:15,340 --> 00:20:22,850
yeah it's a good thing to check for it

00:20:17,890 --> 00:20:25,580
so yeah so transients so that's a common

00:20:22,850 --> 00:20:28,760
thing that people use another option

00:20:25,580 --> 00:20:31,220
here is WP object cache the thing to

00:20:28,760 --> 00:20:34,370
note about the WP object cache which is

00:20:31,220 --> 00:20:36,950
actually a class but there's a set of

00:20:34,370 --> 00:20:38,990
functions that essentially manipulate

00:20:36,950 --> 00:20:41,929
work with that class for you they're

00:20:38,990 --> 00:20:44,330
very similar to the set transient get

00:20:41,929 --> 00:20:48,530
transient type functions we have WP

00:20:44,330 --> 00:20:51,050
cache get WP cache set cache delete so

00:20:48,530 --> 00:20:54,950
these functions are a little different

00:20:51,050 --> 00:20:59,050
in that they do not ever put information

00:20:54,950 --> 00:21:01,670
into the database if you have a caching

00:20:59,050 --> 00:21:04,400
system set up like Redis or memcache

00:21:01,670 --> 00:21:07,720
then it will use that if you do not then

00:21:04,400 --> 00:21:10,490
it essentially does nothing except for

00:21:07,720 --> 00:21:12,830
runtime caching so this is where

00:21:10,490 --> 00:21:15,490
WordPress defaults in this case to a

00:21:12,830 --> 00:21:17,690
runtime or non persistent cache so that

00:21:15,490 --> 00:21:19,850
instance that we saw earlier where we

00:21:17,690 --> 00:21:21,230
were essentially doing that part

00:21:19,850 --> 00:21:23,929
ourselves and doing it with static

00:21:21,230 --> 00:21:26,360
variables and all of that WordPress will

00:21:23,929 --> 00:21:27,350
store all of the information that you

00:21:26,360 --> 00:21:31,360
cache

00:21:27,350 --> 00:21:35,950
if there is no cache just as a runtime

00:21:31,360 --> 00:21:35,950
in-memory type thing

00:21:43,990 --> 00:21:53,840
it stores it until the page load is done

00:21:47,600 --> 00:21:58,280
basically since it's non-persistent it

00:21:53,840 --> 00:22:00,950
does yeah because it was in memory for

00:21:58,280 --> 00:22:03,730
that particular runtime once that

00:22:00,950 --> 00:22:51,110
runtime for that page load is done

00:22:03,730 --> 00:22:53,180
whatever was in memory is gone so yeah

00:22:51,110 --> 00:22:56,240
there's a it really depends on what

00:22:53,180 --> 00:23:03,250
plugins are doing what how cache is

00:22:56,240 --> 00:23:03,250
configured and whether it's well

00:23:19,330 --> 00:23:29,900
maybe usually yeah well we'll we'll

00:23:25,670 --> 00:23:32,180
figure that out later yeah some of what

00:23:29,900 --> 00:23:36,830
we cover in the next section might be

00:23:32,180 --> 00:23:40,970
helpful we'll see so yeah so the WP

00:23:36,830 --> 00:23:43,100
object cache will use your persistent

00:23:40,970 --> 00:23:47,150
cache if it's there otherwise it falls

00:23:43,100 --> 00:23:49,550
back to your runtime cache so so in this

00:23:47,150 --> 00:23:55,130
case there's also a little bit more

00:23:49,550 --> 00:23:57,610
functionality as as far as robustness I

00:23:55,130 --> 00:24:01,940
should say in how you can cache things

00:23:57,610 --> 00:24:04,730
beyond what transients can do or well I

00:24:01,940 --> 00:24:07,910
say that it's just easier to use I

00:24:04,730 --> 00:24:11,480
should say so WP cache get allows you to

00:24:07,910 --> 00:24:14,080
pass in for example the post ID and then

00:24:11,480 --> 00:24:18,470
a group name which in this case would be

00:24:14,080 --> 00:24:20,390
TT Scala related posts right and so

00:24:18,470 --> 00:24:23,300
instead of having to concatenate and

00:24:20,390 --> 00:24:26,240
form my own cache key I can just pass in

00:24:23,300 --> 00:24:29,330
a unique value and then the name of the

00:24:26,240 --> 00:24:32,180
group and it will find exactly what I'm

00:24:29,330 --> 00:24:35,840
looking for so it makes it a little

00:24:32,180 --> 00:24:38,680
easier to kind of group things so this

00:24:35,840 --> 00:24:42,350
is how WordPress for example caches

00:24:38,680 --> 00:24:44,960
posts themselves so normally when you

00:24:42,350 --> 00:24:47,570
load WordPress every call to get post

00:24:44,960 --> 00:24:52,580
what it would have to do a query to find

00:24:47,570 --> 00:24:55,010
that post and return it obviously if

00:24:52,580 --> 00:24:56,990
we're using WP cache get and we don't

00:24:55,010 --> 00:24:58,520
have a persistent cache what's gonna

00:24:56,990 --> 00:25:00,590
happen is WordPress is going to

00:24:58,520 --> 00:25:04,460
somebody's gonna call get post in their

00:25:00,590 --> 00:25:06,140
code it's gonna trigger WP cache get and

00:25:04,460 --> 00:25:07,640
so essentially when they call get post

00:25:06,140 --> 00:25:09,410
right they typically pass it in the post

00:25:07,640 --> 00:25:10,610
ID so that's what they're doing in

00:25:09,410 --> 00:25:13,970
WordPress they're passing in their post

00:25:10,610 --> 00:25:16,640
ID and then saying you know we have a

00:25:13,970 --> 00:25:19,490
group name of posts and that's

00:25:16,640 --> 00:25:21,530
essentially how it stores it stores all

00:25:19,490 --> 00:25:24,140
that essentially in think of it as an

00:25:21,530 --> 00:25:27,040
array of information that would just be

00:25:24,140 --> 00:25:27,040
there until the end

00:25:29,100 --> 00:25:34,730
just needs to be unique I don't think

00:25:31,050 --> 00:25:34,730
initially needs to be an integer so

00:25:36,500 --> 00:25:47,790
exactly so yeah it's I think the

00:25:40,680 --> 00:25:49,260
official variable names is but yeah it

00:25:47,790 --> 00:25:52,950
could just be anything I'm pretty sure

00:25:49,260 --> 00:25:55,140
so so yeah so then again just like

00:25:52,950 --> 00:25:59,010
transients if there's nothing there then

00:25:55,140 --> 00:26:01,530
WP cash git will return false and then

00:25:59,010 --> 00:26:04,470
you can run your query get your values

00:26:01,530 --> 00:26:06,090
and then called WP cash set and pass it

00:26:04,470 --> 00:26:08,820
in your stuff and make sure that you

00:26:06,090 --> 00:26:11,910
actually are passing in the thing you're

00:26:08,820 --> 00:26:15,390
getting back and then you can set your

00:26:11,910 --> 00:26:17,010
your expiration with transients the

00:26:15,390 --> 00:26:21,450
interesting thing is if you've set zero

00:26:17,010 --> 00:26:25,050
or don't set a expiration it will

00:26:21,450 --> 00:26:28,110
actually never expire just so you're

00:26:25,050 --> 00:26:30,620
aware it can be helpful in some cases

00:26:28,110 --> 00:26:32,550
but in other cases not so helpful

00:26:30,620 --> 00:26:34,080
generally I recommend that if you're

00:26:32,550 --> 00:26:37,530
cashing something you should set some

00:26:34,080 --> 00:26:41,460
sort of expiration date on things but

00:26:37,530 --> 00:26:44,460
yeah so this is kind of the another

00:26:41,460 --> 00:26:47,550
option right so there's evaluations to

00:26:44,460 --> 00:26:50,820
be made of which you should use but

00:26:47,550 --> 00:26:53,850
let's take a second and look at some of

00:26:50,820 --> 00:26:56,220
the considerations when it comes to

00:26:53,850 --> 00:26:58,080
caching so there's things that a lot of

00:26:56,220 --> 00:27:01,020
people don't think about so I want to

00:26:58,080 --> 00:27:03,330
kind of expose these so number one you

00:27:01,020 --> 00:27:05,970
want to always assume that the cache is

00:27:03,330 --> 00:27:09,570
completely empty or broken in other

00:27:05,970 --> 00:27:11,850
words don't ever assume that you'll

00:27:09,570 --> 00:27:13,980
actually get what you're expecting back

00:27:11,850 --> 00:27:16,740
in your code always make sure that your

00:27:13,980 --> 00:27:20,220
code if it doesn't get the value it's

00:27:16,740 --> 00:27:22,350
expecting from the cache will go and run

00:27:20,220 --> 00:27:28,200
whatever it needs to to get that

00:27:22,350 --> 00:27:29,910
information or data so caching is an

00:27:28,200 --> 00:27:33,030
enhancement that provides better

00:27:29,910 --> 00:27:35,460
performance and along the same lines as

00:27:33,030 --> 00:27:37,040
this assuming that it's broken you

00:27:35,460 --> 00:27:38,900
should always go back and get your data

00:27:37,040 --> 00:27:43,490
you're not

00:27:38,900 --> 00:27:44,720
you should never use a cache to add some

00:27:43,490 --> 00:27:46,940
sort of functionality to your

00:27:44,720 --> 00:27:49,250
application you don't want to assume

00:27:46,940 --> 00:27:50,900
that the data is there and that makes

00:27:49,250 --> 00:27:52,190
something work differently in your

00:27:50,900 --> 00:27:55,490
application you always want to make sure

00:27:52,190 --> 00:27:57,500
that if caching is unavailable your your

00:27:55,490 --> 00:28:02,390
stuff works if caching is available your

00:27:57,500 --> 00:28:04,880
stuff just works faster so again always

00:28:02,390 --> 00:28:06,830
set an expiration you're more than

00:28:04,880 --> 00:28:13,400
likely at some point gonna run into some

00:28:06,830 --> 00:28:16,100
edge case bug if you don't but also be

00:28:13,400 --> 00:28:17,360
aware that you don't want to cache more

00:28:16,100 --> 00:28:18,110
than as necessary because there are

00:28:17,360 --> 00:28:22,430
limits

00:28:18,110 --> 00:28:25,240
so I mentioned like some caching the two

00:28:22,430 --> 00:28:27,380
megabytes is kind of the default so

00:28:25,240 --> 00:28:32,510
taking a consideration

00:28:27,380 --> 00:28:35,690
I want to cache a query results right so

00:28:32,510 --> 00:28:37,850
I'm my example shows that we're caching

00:28:35,690 --> 00:28:40,130
just the IDS themselves has an array

00:28:37,850 --> 00:28:42,920
right so that seems like the minimalist

00:28:40,130 --> 00:28:46,390
information I can always use get post to

00:28:42,920 --> 00:28:49,940
get the post for each thing that I need

00:28:46,390 --> 00:28:52,280
if I were to cache all of the actual

00:28:49,940 --> 00:28:57,020
post objects I wouldn't have to call get

00:28:52,280 --> 00:28:59,960
post but at the same time my caching

00:28:57,020 --> 00:29:01,550
layer would have more information in

00:28:59,960 --> 00:29:04,550
there cuz now it's not just a number

00:29:01,550 --> 00:29:05,720
it's a number it's a post slug it's

00:29:04,550 --> 00:29:09,320
probably a lot of other things I don't

00:29:05,720 --> 00:29:11,210
need or won't really use and if I were

00:29:09,320 --> 00:29:12,980
just to call get post for the thing I

00:29:11,210 --> 00:29:14,450
need it's very possible that somebody

00:29:12,980 --> 00:29:16,370
else has already done it it's already

00:29:14,450 --> 00:29:20,780
been cached and started there available

00:29:16,370 --> 00:29:24,880
so it's better to get a bunch of IDs and

00:29:20,780 --> 00:29:24,880
use that that it is

00:29:43,000 --> 00:29:48,470
you could do it either way I mean if you

00:29:45,110 --> 00:29:51,380
know exactly what you need then I would

00:29:48,470 --> 00:29:53,779
say if you put it in the cash and you

00:29:51,380 --> 00:29:57,980
know it's not huge bits of information

00:29:53,779 --> 00:30:01,279
it's a good option but if for example

00:29:57,980 --> 00:30:03,200
you don't know or your application

00:30:01,279 --> 00:30:05,929
changes it's probably more flexible to

00:30:03,200 --> 00:30:09,490
store the ID get the post from that ID

00:30:05,929 --> 00:30:12,799
and then use whatever you need from it

00:30:09,490 --> 00:30:15,559
and the nice thing is if you have a post

00:30:12,799 --> 00:30:19,039
object that you get after the fact you

00:30:15,559 --> 00:30:22,270
also have virtual properties and things

00:30:19,039 --> 00:30:22,270
that lie to get meta and

00:30:34,610 --> 00:30:43,590
right yeah so yeah so be aware of the

00:30:40,860 --> 00:30:46,080
limits and think through how that works

00:30:43,590 --> 00:30:49,050
definitely don't cache the entire query

00:30:46,080 --> 00:30:53,370
because there's a lot more than just the

00:30:49,050 --> 00:30:54,840
post themselves in there as well always

00:30:53,370 --> 00:30:57,840
make sure you test your application with

00:30:54,840 --> 00:31:00,210
caching on and off that will help you

00:30:57,840 --> 00:31:05,280
catch any bugs related to the actual

00:31:00,210 --> 00:31:10,020
caching of things and don't cache

00:31:05,280 --> 00:31:11,760
sensitive data interestingly if you made

00:31:10,020 --> 00:31:14,790
the rookie mistake of caching the entire

00:31:11,760 --> 00:31:18,810
query what a lot of people don't realize

00:31:14,790 --> 00:31:20,930
is that the WP query object or an

00:31:18,810 --> 00:31:24,180
instance of deputy query actually

00:31:20,930 --> 00:31:28,230
contains a reference to an instance of

00:31:24,180 --> 00:31:30,630
WP DB which contains your username and

00:31:28,230 --> 00:31:32,310
password for your database so every time

00:31:30,630 --> 00:31:35,040
you cache a query in WordPress you are

00:31:32,310 --> 00:31:39,870
cashing your database login information

00:31:35,040 --> 00:31:43,290
as well so it introduces an additional

00:31:39,870 --> 00:31:47,280
security concern which you want to make

00:31:43,290 --> 00:31:49,950
sure that you're careful so again only

00:31:47,280 --> 00:31:51,420
caching exactly what you need is an easy

00:31:49,950 --> 00:31:54,570
way to avoid that because you know

00:31:51,420 --> 00:31:59,850
exactly what's being cached so it's an

00:31:54,570 --> 00:32:02,520
easy mistake to make and ultimately a

00:31:59,850 --> 00:32:06,650
lot of engineers don't even realize that

00:32:02,520 --> 00:32:06,650
so now when I want to highlight for you

00:32:08,270 --> 00:32:16,890
so there are well it really depends I

00:32:12,930 --> 00:32:19,710
guess on what caching you're using so

00:32:16,890 --> 00:32:22,770
for example I use local by fly wolf for

00:32:19,710 --> 00:32:25,290
my local development environment and it

00:32:22,770 --> 00:32:27,780
automatically has Redis available but

00:32:25,290 --> 00:32:30,560
not active so there's a plugin called

00:32:27,780 --> 00:32:34,380
Redis WP something-or-other

00:32:30,560 --> 00:32:36,590
WP writing and you put that in and it

00:32:34,380 --> 00:32:41,670
will automatically once you hit enable

00:32:36,590 --> 00:32:43,050
turn the cache on and so then if you

00:32:41,670 --> 00:32:46,120
have something like query monitor

00:32:43,050 --> 00:32:48,669
plug-in it'll actually tell you

00:32:46,120 --> 00:32:51,150
something was a hit or miss on the cache

00:32:48,669 --> 00:32:54,130
so then you can actually load up a page

00:32:51,150 --> 00:32:57,340
see physically see something that says

00:32:54,130 --> 00:32:59,799
yes this you know hit the object cache

00:32:57,340 --> 00:33:01,179
or you know the object caches in use or

00:32:59,799 --> 00:33:03,520
the object cast is not working or

00:33:01,179 --> 00:33:05,710
whatever the case may be so you know

00:33:03,520 --> 00:34:03,669
it's on or you know it's off and that

00:33:05,710 --> 00:34:08,169
way you can test well that's more of a

00:34:03,669 --> 00:34:15,070
testing thing right so so I've had

00:34:08,169 --> 00:34:18,060
situations to where let's say so you get

00:34:15,070 --> 00:34:20,290
a plug-in or something where you've got

00:34:18,060 --> 00:34:24,369
lots of things they're being cached

00:34:20,290 --> 00:34:28,000
maybe a little too much and what I've

00:34:24,369 --> 00:34:29,409
seen happen is so you have a caching

00:34:28,000 --> 00:34:32,349
layer layer or something you've got a

00:34:29,409 --> 00:34:35,580
host that's got a nice memcache layer

00:34:32,349 --> 00:34:38,080
going on and you know and then I've seen

00:34:35,580 --> 00:34:40,060
situations where for whatever reason

00:34:38,080 --> 00:34:42,460
that memcache layer just no we're not

00:34:40,060 --> 00:34:44,379
working anymore so now all that

00:34:42,460 --> 00:34:47,320
information that too much information

00:34:44,379 --> 00:34:49,149
which was kind of the cache was not

00:34:47,320 --> 00:34:50,619
being extremely valuable the first place

00:34:49,149 --> 00:34:52,330
because it was exceeding the limits and

00:34:50,619 --> 00:34:55,270
then just pushing old stuff out faster

00:34:52,330 --> 00:34:56,679
than it was supposed to so nothing

00:34:55,270 --> 00:34:58,960
actually ever reached the expiration

00:34:56,679 --> 00:35:00,020
date it just got forced out and new

00:34:58,960 --> 00:35:03,530
things got pushed in

00:35:00,020 --> 00:35:06,050
and so maybe like 25% of all requests

00:35:03,530 --> 00:35:08,390
were actually cashed in some way and

00:35:06,050 --> 00:35:10,340
then when the caching layer went down

00:35:08,390 --> 00:35:14,420
all of those things went into the

00:35:10,340 --> 00:35:16,540
database and so now we have hundreds of

00:35:14,420 --> 00:35:20,650
thousands of extra lines in the database

00:35:16,540 --> 00:35:24,770
and so now because someone forgot to put

00:35:20,650 --> 00:35:28,070
an index on the auto load column in the

00:35:24,770 --> 00:35:28,720
database now the site is just slowing to

00:35:28,070 --> 00:35:32,090
a crawl

00:35:28,720 --> 00:35:34,520
so there's all kinds of interesting bugs

00:35:32,090 --> 00:35:37,280
and things that can happen related to

00:35:34,520 --> 00:35:39,740
caching there's definitely not one size

00:35:37,280 --> 00:35:41,690
fits all it depends on the caching it

00:35:39,740 --> 00:35:43,760
depends on how the caching is being used

00:35:41,690 --> 00:35:51,380
what's being cached depends on how much

00:35:43,760 --> 00:35:53,000
is being cached and all that so yeah

00:35:51,380 --> 00:35:55,780
there's a lot of possibility in that

00:35:53,000 --> 00:35:55,780
arena

00:36:22,510 --> 00:36:47,120
right yes I think transience is a good

00:36:45,770 --> 00:36:50,020
option for something that's publicly

00:36:47,120 --> 00:36:54,490
released as long as it's used

00:36:50,020 --> 00:36:57,110
appropriately yeah judiciously yeah so I

00:36:54,490 --> 00:37:00,320
think that there's definitely use case

00:36:57,110 --> 00:37:05,260
for if you have a plug-in that needs to

00:37:00,320 --> 00:37:07,970
potentially optimize lots of things

00:37:05,260 --> 00:37:09,950
there's kind of that top layer of things

00:37:07,970 --> 00:37:12,500
where it's like okay these are super

00:37:09,950 --> 00:37:14,450
heavy requests and maybe I'm gonna use

00:37:12,500 --> 00:37:18,170
get transient for these and they're not

00:37:14,450 --> 00:37:19,670
gonna overload things too much and then

00:37:18,170 --> 00:37:21,620
you know there's kind of this next layer

00:37:19,670 --> 00:37:23,720
of stuff worse like if I cached all of

00:37:21,620 --> 00:37:25,370
this and there was no caching layer I

00:37:23,720 --> 00:37:28,250
would just slow this site down to a

00:37:25,370 --> 00:37:29,900
crawl I might use persisting her non

00:37:28,250 --> 00:37:32,030
persistent caching for some of that

00:37:29,900 --> 00:37:35,090
especially if it's things that are less

00:37:32,030 --> 00:37:37,070
likely to be called that kind of thing

00:37:35,090 --> 00:37:39,530
but maybe if they are called they're

00:37:37,070 --> 00:37:41,360
called a lot within that runtime so yeah

00:37:39,530 --> 00:37:43,640
I think it's definitely being aware of

00:37:41,360 --> 00:37:49,450
what your application is doing how it's

00:37:43,640 --> 00:37:49,450
doing it and all of that yep

00:37:50,110 --> 00:37:54,680
so yeah and then caching is one of those

00:37:53,390 --> 00:37:58,070
things where it's kind of a balancing

00:37:54,680 --> 00:38:00,080
act so it's kind of you know trying to

00:37:58,070 --> 00:38:04,250
find that fine line between performance

00:38:00,080 --> 00:38:06,260
and actually having fresh data so it's

00:38:04,250 --> 00:38:10,100
you know things like let's say Twitter

00:38:06,260 --> 00:38:12,050
account is a easy use case right so you

00:38:10,100 --> 00:38:13,670
want to make sure that the number of

00:38:12,050 --> 00:38:17,990
times somebody shared this particular

00:38:13,670 --> 00:38:19,310
post on Twitter is accurate but at the

00:38:17,990 --> 00:38:21,200
same time you don't want to hit the

00:38:19,310 --> 00:38:23,030
Twitter API all the time to try to

00:38:21,200 --> 00:38:25,220
figure that out

00:38:23,030 --> 00:38:26,600
and so of course you know there's

00:38:25,220 --> 00:38:28,610
JavaScript things but let's assume that

00:38:26,600 --> 00:38:31,220
we're doing this on her own in PHP or

00:38:28,610 --> 00:38:33,290
something so we can make them across to

00:38:31,220 --> 00:38:34,520
the API and fetch that data and we can

00:38:33,290 --> 00:38:36,560
cache it

00:38:34,520 --> 00:38:39,290
do we cache it for an hour do the cache

00:38:36,560 --> 00:38:40,730
it for a day the day may be too much but

00:38:39,290 --> 00:38:42,710
it then again it depends on how often

00:38:40,730 --> 00:38:45,020
people share your stuff right so it's

00:38:42,710 --> 00:38:47,960
kind of one of those things where if I

00:38:45,020 --> 00:38:51,440
write a plug-in to do it and I say you

00:38:47,960 --> 00:38:53,420
know hit it every five minutes or thirty

00:38:51,440 --> 00:38:55,610
minutes or hour or something like that I

00:38:53,420 --> 00:38:59,540
might even be too much for some people

00:38:55,610 --> 00:39:01,510
because their stuff is you know they

00:38:59,540 --> 00:39:04,880
only care about it updating once a day

00:39:01,510 --> 00:39:08,500
so being aware that you know there's

00:39:04,880 --> 00:39:08,500
kind of this balancing act and sometimes

00:39:09,370 --> 00:39:15,500
it really depends on the user as to how

00:39:12,260 --> 00:39:16,910
that will pan out so sometimes it makes

00:39:15,500 --> 00:39:20,150
sense to actually give the user some

00:39:16,910 --> 00:39:23,960
control over over how often or how long

00:39:20,150 --> 00:39:28,100
I should say things are cached so these

00:39:23,960 --> 00:39:33,680
are some resources all of these slides

00:39:28,100 --> 00:39:37,250
are up on Twitter at the moment I also

00:39:33,680 --> 00:39:42,290
do this interesting thing where I have a

00:39:37,250 --> 00:39:45,820
QR code or you can go to link there and

00:39:42,290 --> 00:39:49,340
get to it as well but yeah so that's

00:39:45,820 --> 00:39:51,800
that's caching in general there's like I

00:39:49,340 --> 00:39:53,900
said a lot to it so if there's questions

00:39:51,800 --> 00:39:55,790
I think we kind of went through some

00:39:53,900 --> 00:40:00,050
questions as we go but if we have more

00:39:55,790 --> 00:40:02,290
questions I forget what time do we have

00:40:00,050 --> 00:40:02,290
to

00:40:02,500 --> 00:40:16,050
245 okay gotcha so we have some time we

00:40:13,720 --> 00:40:16,050
can check

00:40:45,550 --> 00:40:53,330
yeah yeah I haven't used WP rocket but

00:40:52,160 --> 00:40:58,580
I've heard a lot of good things about it

00:40:53,330 --> 00:41:02,420
so and there's actually some of the web

00:40:58,580 --> 00:41:06,860
hosts even actually do that for you and

00:41:02,420 --> 00:41:08,750
one thing that I try to do is limit the

00:41:06,860 --> 00:41:11,600
plugins I install and try to see if I

00:41:08,750 --> 00:41:14,420
can get some sort of external service to

00:41:11,600 --> 00:41:17,480
do some of that and some of those tools

00:41:14,420 --> 00:41:18,950
can be things like CloudFlare can

00:41:17,480 --> 00:41:22,340
actually do some of the page caching for

00:41:18,950 --> 00:41:24,320
you but I know certain web hosts

00:41:22,340 --> 00:41:27,440
actually will set it up to where they

00:41:24,320 --> 00:41:28,490
have reverse proxy caching servers and

00:41:27,440 --> 00:41:33,230
all that kind of good stuff

00:41:28,490 --> 00:41:35,630
so maybe worth looking into whether your

00:41:33,230 --> 00:41:37,130
host does another of course WordPress

00:41:35,630 --> 00:41:39,230
specific hosts they actually have their

00:41:37,130 --> 00:41:41,540
own caching plugins and things and if

00:41:39,230 --> 00:41:43,820
you run your own stuff next to what

00:41:41,540 --> 00:41:51,550
they've got it sometimes can even cause

00:41:43,820 --> 00:41:56,630
issues so yeah exactly

00:41:51,550 --> 00:41:59,660
yeah but the other thing to be aware of

00:41:56,630 --> 00:42:01,700
too is that a lot of times plugins that

00:41:59,660 --> 00:42:04,070
do things like page caching full page

00:42:01,700 --> 00:42:07,840
caching they do not take into

00:42:04,070 --> 00:42:11,060
consideration things like dynamic

00:42:07,840 --> 00:42:13,340
functionality that may live on a page so

00:42:11,060 --> 00:42:15,830
if you have a membership site or

00:42:13,340 --> 00:42:17,540
something where you're trying to show

00:42:15,830 --> 00:42:19,220
specific users specific information

00:42:17,540 --> 00:42:23,020
based off of who they are or what

00:42:19,220 --> 00:42:26,960
they've done then that that will work

00:42:23,020 --> 00:42:28,850
I've actually missed configured cloud

00:42:26,960 --> 00:42:30,590
fair CloudFlare one time and so

00:42:28,850 --> 00:42:32,300
everybody that came to my site saw the

00:42:30,590 --> 00:42:37,010
WP admin bar with my picture in the

00:42:32,300 --> 00:42:38,900
corner not that they could actually you

00:42:37,010 --> 00:42:41,270
know go anywhere with that because

00:42:38,900 --> 00:42:43,790
they're not actually logged in but the

00:42:41,270 --> 00:42:46,310
page response had the actual HTML and

00:42:43,790 --> 00:42:48,170
JavaScript and everything for that so

00:42:46,310 --> 00:42:53,230
they could find the links and

00:42:48,170 --> 00:42:58,670
try to go places they wouldn't get in so

00:42:53,230 --> 00:43:01,130
right so yeah that's where it gets to be

00:42:58,670 --> 00:43:03,830
important to figure out what you're how

00:43:01,130 --> 00:43:05,660
you whitelist things and and what URL

00:43:03,830 --> 00:43:08,710
parameters maybe you should take into

00:43:05,660 --> 00:43:12,200
consideration for ignoring all of that

00:43:08,710 --> 00:43:15,910
yeah so ecommerce and all those things

00:43:12,200 --> 00:43:15,910
can be interesting

00:43:37,960 --> 00:43:50,250
today it last part again yeah okay right

00:43:57,060 --> 00:44:04,780
yeah I mean if you're if you're yeah oh

00:44:02,800 --> 00:44:07,900
yeah question for the video so it's a

00:44:04,780 --> 00:44:09,100
very short question so basically the

00:44:07,900 --> 00:44:11,700
question was if you're doing some sort

00:44:09,100 --> 00:44:14,620
of Ajax front end request as opposed to

00:44:11,700 --> 00:44:17,610
initiating the request from the backend

00:44:14,620 --> 00:44:21,370
is there a difference in caching

00:44:17,610 --> 00:44:25,050
ultimately I think if you have caching

00:44:21,370 --> 00:44:25,050
happening in PHP it shouldn't matter

00:44:25,860 --> 00:44:31,270
there are I know for example when it

00:44:29,380 --> 00:44:36,070
comes to things like page caching one of

00:44:31,270 --> 00:44:39,580
the things that is commonly used to

00:44:36,070 --> 00:44:42,640
again bust the cache for certain users

00:44:39,580 --> 00:44:45,340
who might be doing a ecommerce check out

00:44:42,640 --> 00:44:48,460
or logged in as some sort of member to a

00:44:45,340 --> 00:44:51,490
membership site actually looking at the

00:44:48,460 --> 00:44:54,610
cookie responses and detecting certain

00:44:51,490 --> 00:45:00,220
WordPress cookies and things is a common

00:44:54,610 --> 00:45:03,160
way to kind of bust the cache so so yeah

00:45:00,220 --> 00:45:06,160
there's a lot of a lot of different ways

00:45:03,160 --> 00:45:09,550
that it can be done but yeah as far as a

00:45:06,160 --> 00:45:14,500
front-end you know you can actually

00:45:09,550 --> 00:45:16,420
leverage the browser as a cache for Ajax

00:45:14,500 --> 00:45:21,520
requests so if you're making multiple

00:45:16,420 --> 00:45:24,010
requests potentially you know if your

00:45:21,520 --> 00:45:26,530
application may or may not know that a

00:45:24,010 --> 00:45:28,720
request has already been made then

00:45:26,530 --> 00:45:30,280
that's a problem because you know you

00:45:28,720 --> 00:45:32,080
could potentially make multiple requests

00:45:30,280 --> 00:45:35,320
for the exact same information which has

00:45:32,080 --> 00:45:37,090
not changed so you can actually leverage

00:45:35,320 --> 00:45:40,450
things like local storage and the

00:45:37,090 --> 00:45:42,280
browser and write JavaScript that will

00:45:40,450 --> 00:45:44,170
essentially make a request store it in

00:45:42,280 --> 00:45:46,030
local storage and then when it makes a

00:45:44,170 --> 00:45:48,970
request check local storage first and

00:45:46,030 --> 00:45:50,390
then you know if it's not there then

00:45:48,970 --> 00:45:59,819
call

00:45:50,390 --> 00:46:02,489
called the back in no I think you're

00:45:59,819 --> 00:46:08,130
totally on your own for cash priming so

00:46:02,489 --> 00:46:10,469
yeah yeah but yeah that's another thing

00:46:08,130 --> 00:46:14,329
a whole nother topic too is the idea of

00:46:10,469 --> 00:46:16,920
cash priming or cash warming so

00:46:14,329 --> 00:46:18,869
essentially just think about the fact

00:46:16,920 --> 00:46:20,670
that you know if something is cashed

00:46:18,869 --> 00:46:23,519
let's say it's a full page cache for

00:46:20,670 --> 00:46:26,099
example if a full page has already been

00:46:23,519 --> 00:46:29,219
cashed for a static site or whatever

00:46:26,099 --> 00:46:32,699
then somebody hits that it's going to

00:46:29,219 --> 00:46:36,180
serve that page up really quick problem

00:46:32,699 --> 00:46:38,819
is that when that page expires in the

00:46:36,180 --> 00:46:40,079
cache then well the next person that

00:46:38,819 --> 00:46:42,239
lands on that is gonna have to wait

00:46:40,079 --> 00:46:45,829
until the server does that stuff it's

00:46:42,239 --> 00:46:49,109
going to be a little slower but if the

00:46:45,829 --> 00:46:51,329
server is aware of when those things

00:46:49,109 --> 00:46:54,180
expire and it automatically visits that

00:46:51,329 --> 00:46:57,119
page before another user does then it

00:46:54,180 --> 00:46:58,439
gets cached again and it wasn't a user

00:46:57,119 --> 00:47:00,569
who's sitting around waiting for that

00:46:58,439 --> 00:47:04,859
page to load so it's kind of the idea of

00:47:00,569 --> 00:47:08,519
cache warming right is that you that you

00:47:04,859 --> 00:47:10,619
can actually have a fake request request

00:47:08,519 --> 00:47:14,219
made by the server or some other

00:47:10,619 --> 00:47:16,529
technology that will essentially prime

00:47:14,219 --> 00:47:18,239
that cache for the next person who hits

00:47:16,529 --> 00:47:19,619
it so a lot of times when it comes to

00:47:18,239 --> 00:47:22,529
things like object caching if you've

00:47:19,619 --> 00:47:25,199
cashed a WP query instance and you know

00:47:22,529 --> 00:47:26,699
for example that if someone updates the

00:47:25,199 --> 00:47:29,249
post and the admin you're gonna have to

00:47:26,699 --> 00:47:32,579
expire that you might as well go ahead

00:47:29,249 --> 00:47:36,539
and take the updated version and put it

00:47:32,579 --> 00:47:39,660
into the cache for them so it's already

00:47:36,539 --> 00:47:43,380
there for the next call so by putting

00:47:39,660 --> 00:47:45,749
that that extra load time in the admin

00:47:43,380 --> 00:47:47,429
for the person who made the update then

00:47:45,749 --> 00:47:51,439
all the other users on the front-end

00:47:47,429 --> 00:47:51,439
will never experience it away so

00:48:03,099 --> 00:48:12,440
yeah definitely don't total cash no BP

00:48:06,230 --> 00:48:17,480
query objects mainly because of just the

00:48:12,440 --> 00:48:22,400
sheer size as well as sensitivity of

00:48:17,480 --> 00:48:24,319
actually what's in there but for example

00:48:22,400 --> 00:48:26,630
like if you make an API request Twitter

00:48:24,319 --> 00:48:31,700
and they just give you a JSON object you

00:48:26,630 --> 00:48:33,650
know caching that JSON object works and

00:48:31,700 --> 00:48:36,109
again to like you may even consider

00:48:33,650 --> 00:48:38,720
other options when it comes to caching

00:48:36,109 --> 00:48:40,369
so WordPress obviously provides certain

00:48:38,720 --> 00:48:42,069
tools but that doesn't mean that those

00:48:40,369 --> 00:48:45,529
are the only tools that are available

00:48:42,069 --> 00:48:48,289
let's say you hit an API and this API

00:48:45,529 --> 00:48:49,640
has enormous lis large responses and you

00:48:48,289 --> 00:48:50,990
don't know what you're gonna use out of

00:48:49,640 --> 00:48:52,970
that but you don't really have to make

00:48:50,990 --> 00:48:54,349
that many calls to it but it doesn't

00:48:52,970 --> 00:48:56,119
make sense to store in the database or

00:48:54,349 --> 00:48:58,970
anywhere else you can actually just

00:48:56,119 --> 00:49:00,829
store it in a file in the uploads

00:48:58,970 --> 00:49:04,489
directory and a folder for your plug-in

00:49:00,829 --> 00:49:05,930
or something and then you know based off

00:49:04,489 --> 00:49:07,579
the naming of the file structure you

00:49:05,930 --> 00:49:09,319
could use that for caching and then you

00:49:07,579 --> 00:49:11,630
could have some functionality that would

00:49:09,319 --> 00:49:14,900
clear it when it makes new requests or

00:49:11,630 --> 00:49:16,730
something like that and so there's a lot

00:49:14,900 --> 00:49:19,579
more that you can do beyond what

00:49:16,730 --> 00:49:22,119
WordPress provides and there's obviously

00:49:19,579 --> 00:49:26,749
a lot of other technology that I

00:49:22,119 --> 00:49:29,450
probably don't even know about so but

00:49:26,749 --> 00:49:31,640
yeah so it's being aware of how it works

00:49:29,450 --> 00:49:32,569
and just kind of some of the options

00:49:31,640 --> 00:49:36,950
that are available that WordPress

00:49:32,569 --> 00:49:39,609
provides as well as you know being

00:49:36,950 --> 00:49:39,609
creative I guess

00:49:43,880 --> 00:49:50,710
any other question comments things I

00:49:46,790 --> 00:49:50,710
didn't cover or may not know about

00:50:27,950 --> 00:50:32,580
cool

00:50:29,160 --> 00:50:35,520
so yeah for the video plugin called WP

00:50:32,580 --> 00:50:39,330
cash or rest cash

00:50:35,520 --> 00:50:45,720
yeah which will basically allow you to

00:50:39,330 --> 00:50:47,490
set headers and different things for got

00:50:45,720 --> 00:50:50,700
you so it's looking at the code and

00:50:47,490 --> 00:50:53,880
figuring out some of the headers and

00:50:50,700 --> 00:50:56,250
whatnot so I guess in some cases you may

00:50:53,880 --> 00:50:57,390
want to cache certain REST API calls in

00:50:56,250 --> 00:51:01,340
other cases you may not want to

00:50:57,390 --> 00:51:01,340
depending on the data

00:51:31,750 --> 00:51:39,920
yeah yeah again for the video yeah so

00:51:37,100 --> 00:51:42,770
there is the in the Gutenberg Project

00:51:39,920 --> 00:51:46,100
which all the packages they have in

00:51:42,770 --> 00:51:48,620
there there they're on NPM with for the

00:51:46,100 --> 00:51:51,890
WordPress organization and they get put

00:51:48,620 --> 00:51:56,360
into WordPress core and they're there

00:51:51,890 --> 00:51:59,360
now so there's the data package WP data

00:51:56,360 --> 00:52:03,050
which allow you to it's essentially a

00:51:59,360 --> 00:52:05,680
wrapper around the redux data store with

00:52:03,050 --> 00:52:08,290
some customizations by WordPress itself

00:52:05,680 --> 00:52:11,260
to allow you to actually create your own

00:52:08,290 --> 00:52:14,990
inside of the data store that they have

00:52:11,260 --> 00:52:17,810
so ya have for JavaScript applications

00:52:14,990 --> 00:52:19,880
it's really good for managing global

00:52:17,810 --> 00:52:23,420
state so if you make multiple requests

00:52:19,880 --> 00:52:25,220
you can essentially you know create an

00:52:23,420 --> 00:52:29,030
array inside your data store where you

00:52:25,220 --> 00:52:30,680
know the key is maybe the ID or whatever

00:52:29,030 --> 00:52:36,110
of the thing you requested and the

00:52:30,680 --> 00:52:37,640
response is the value so some people

00:52:36,110 --> 00:52:41,120
make the mistake of trying to nest data

00:52:37,640 --> 00:52:42,320
in JavaScript data stores keeping the

00:52:41,120 --> 00:52:44,990
flat structure makes it a whole lot

00:52:42,320 --> 00:52:49,130
easier to work with but there are also

00:52:44,990 --> 00:52:52,160
some JavaScript packages which will if

00:52:49,130 --> 00:52:54,590
you're using like a normal just plain

00:52:52,160 --> 00:52:56,600
Redux store and doing some react stuff

00:52:54,590 --> 00:52:59,510
they have packages that kind of wrap the

00:52:56,600 --> 00:53:02,690
redux data store and automatically

00:52:59,510 --> 00:53:06,200
handle persisting things to the local

00:53:02,690 --> 00:53:10,610
browser cache our browser local storage

00:53:06,200 --> 00:53:12,860
so there's a lot of interesting projects

00:53:10,610 --> 00:53:16,550
and things out there that'll make it a

00:53:12,860 --> 00:53:19,160
lot easier only downside to local

00:53:16,550 --> 00:53:21,200
storage is if a user opens a incognito

00:53:19,160 --> 00:53:23,060
window or a different browser then none

00:53:21,200 --> 00:53:30,140
of that's there but as long as they use

00:53:23,060 --> 00:53:34,690
the same browser you're good what's that

00:53:30,140 --> 00:53:38,390
or yeah they could flush it against but

00:53:34,690 --> 00:53:39,730
cool well I guess that's that's it for

00:53:38,390 --> 00:53:45,659
me appreciate

00:53:39,730 --> 00:53:45,659

YouTube URL: https://www.youtube.com/watch?v=XNJr8eVqvV8


