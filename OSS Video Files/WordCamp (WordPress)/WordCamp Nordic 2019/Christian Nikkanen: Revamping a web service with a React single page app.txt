Title: Christian Nikkanen: Revamping a web service with a React single page app
Publication date: 2019-09-08
Playlist: WordCamp Nordic 2019
Description: 
	We built a React single page application for one of the largest Finnish technology magazines. It replaced their old traditional WordPress site at the end of 2018.
The application has been in development for over a year now. It’s time to share our experiences building it, talk about why we built it, and how we built it. Because there were a lot of problems, I’ll talk about how we resolved them.
To name a few: authenticating users to WordPress, social media previews, search engine visibility, integration testing, and last but not least, cache invalidation in all parts of the stack.
Everyone in the audience should be able to grasp the main points, but developers will get most out of the talk.

WPTV link: https://wordpress.tv/2019/06/19/christian-nikkanen-revamping-a-web-service-with-a-react-single-page-app/
Captions: 
	00:00:00,319 --> 00:00:05,850
so yeah I said my name is Christian

00:00:03,120 --> 00:00:08,010
Icahn and most of you probably know me

00:00:05,850 --> 00:00:10,590
as usually for the known fins that

00:00:08,010 --> 00:00:12,450
basically means a cat's just some

00:00:10,590 --> 00:00:15,059
context but not here to talk about

00:00:12,450 --> 00:00:18,570
myself but instead the thing I worked to

00:00:15,059 --> 00:00:21,240
last year on so what I did was revamp

00:00:18,570 --> 00:00:25,019
its web service with a reacting like

00:00:21,240 --> 00:00:26,880
single page application and yes I'm in a

00:00:25,019 --> 00:00:30,570
bit of a hurry here so I have a lot of

00:00:26,880 --> 00:00:34,530
slides so excuse me if I it's hanging in

00:00:30,570 --> 00:00:36,140
my words so but this is the finished

00:00:34,530 --> 00:00:43,710
product

00:00:36,140 --> 00:00:46,680
so yeah screaming so basically it's a

00:00:43,710 --> 00:00:53,460
finished technology magazine and my mind

00:00:46,680 --> 00:00:56,160
is should be better so yeah it's a thick

00:00:53,460 --> 00:00:59,789
magazine it has a lot of Technology

00:00:56,160 --> 00:01:03,680
articles it has a weekly digital

00:00:59,789 --> 00:01:06,810
magazine this is a new thing before this

00:01:03,680 --> 00:01:10,409
new site it only was it was only

00:01:06,810 --> 00:01:13,530
published twice a month but when we did

00:01:10,409 --> 00:01:15,090
this we upped it to once a week but you

00:01:13,530 --> 00:01:17,450
know of this you can check it out if you

00:01:15,090 --> 00:01:17,450
want to

00:01:20,869 --> 00:01:24,770
I don't know if anyone heard the book

00:01:22,549 --> 00:01:27,740
you might ask why would you build this

00:01:24,770 --> 00:01:32,000
one if you've seen the previous one but

00:01:27,740 --> 00:01:34,729
yeah so first of all this started as an

00:01:32,000 --> 00:01:39,619
MVP to see if headless WordPress would

00:01:34,729 --> 00:01:41,990
suit a client's purposes and yeah the

00:01:39,619 --> 00:01:45,380
new digital magazine was one thing their

00:01:41,990 --> 00:01:47,270
old site was it so legacy that it was

00:01:45,380 --> 00:01:51,170
hard to implement such a thing in it

00:01:47,270 --> 00:01:53,110
anymore and it also serves us building

00:01:51,170 --> 00:01:55,880
foundations for the whole media group

00:01:53,110 --> 00:01:59,720
the media who passed like 20 different

00:01:55,880 --> 00:02:03,560
magazines similar to this so we can use

00:01:59,720 --> 00:02:05,450
this as general building block and the

00:02:03,560 --> 00:02:09,200
client wanted to add up modern software

00:02:05,450 --> 00:02:13,400
development practices and last but not

00:02:09,200 --> 00:02:15,950
least the old site was pretty awful just

00:02:13,400 --> 00:02:22,700
one thing to note about its subscriber

00:02:15,950 --> 00:02:26,180
base pay loads of 8h those do sometimes

00:02:22,700 --> 00:02:28,340
over 30 seconds and yeah if you have a

00:02:26,180 --> 00:02:30,640
user base that takes 30 seconds to load

00:02:28,340 --> 00:02:35,630
that's no good

00:02:30,640 --> 00:02:38,150
well how would you build this the most

00:02:35,630 --> 00:02:40,819
obvious ones add filter

00:02:38,150 --> 00:02:43,910
add action should be the father

00:02:40,819 --> 00:02:50,090
self-explanatory so every time we wanted

00:02:43,910 --> 00:02:52,750
to change something with this and we

00:02:50,090 --> 00:02:58,310
hook these few thousand lines of code

00:02:52,750 --> 00:02:59,420
with them so to talk about a few

00:02:58,310 --> 00:03:01,549
thousand miles of code

00:02:59,420 --> 00:03:05,120
I basically built in a URL resolver

00:03:01,549 --> 00:03:09,079
those who saw me in you vascular might

00:03:05,120 --> 00:03:12,739
ever remember that and we did some

00:03:09,079 --> 00:03:14,870
custom end points as well and then we

00:03:12,739 --> 00:03:17,000
use composure patches and patch baggage

00:03:14,870 --> 00:03:19,910
because we had to use some software

00:03:17,000 --> 00:03:23,209
considered up underwear and we had to

00:03:19,910 --> 00:03:25,940
fix some box in them so those you don't

00:03:23,209 --> 00:03:29,210
know those are nice bots JavaScript and

00:03:25,940 --> 00:03:31,190
PHP then

00:03:29,210 --> 00:03:33,740
continuous integration was a key part of

00:03:31,190 --> 00:03:36,950
all this it allowed us the ship changed

00:03:33,740 --> 00:03:38,840
as fast run tests on the code and if the

00:03:36,950 --> 00:03:41,600
tests you know fail we could deploy to

00:03:38,840 --> 00:03:44,090
production and this has made breaking

00:03:41,600 --> 00:03:49,370
production very hard but still we

00:03:44,090 --> 00:03:52,130
managed to do it just yesterday some of

00:03:49,370 --> 00:04:00,380
our stack this that are here this is not

00:03:52,130 --> 00:04:03,860
even half what yeah so now we get to the

00:04:00,380 --> 00:04:06,920
interesting part as I said I have a lot

00:04:03,860 --> 00:04:10,280
of content so I had to do this only

00:04:06,920 --> 00:04:13,700
Finn's get this book that's not my

00:04:10,280 --> 00:04:15,950
problem so I had to cut a lot of content

00:04:13,700 --> 00:04:18,110
out and I prioritize the most

00:04:15,950 --> 00:04:20,840
interesting ones so you can go and leave

00:04:18,110 --> 00:04:22,880
and see a Lisa at the end of my talk if

00:04:20,840 --> 00:04:26,710
you want but I appreciate if you stay

00:04:22,880 --> 00:04:31,220
here insult end but I'm gonna start with

00:04:26,710 --> 00:04:34,400
search engines and social medias and as

00:04:31,220 --> 00:04:35,810
you may know that a loading problem is

00:04:34,400 --> 00:04:38,000
the most common one using the fetch

00:04:35,810 --> 00:04:40,580
application from their share to Facebook

00:04:38,000 --> 00:04:43,790
for the first time the clients paste

00:04:40,580 --> 00:04:47,720
Sako their euro to Facebook and sees

00:04:43,790 --> 00:04:50,470
nothing but loading mean to embed so how

00:04:47,720 --> 00:04:50,470
do you avoid sir

00:04:53,020 --> 00:04:58,960
so as you see here in the background

00:04:56,650 --> 00:05:01,000
very dim but it is there that's the

00:04:58,960 --> 00:05:03,130
whole HTML response of the single page

00:05:01,000 --> 00:05:05,050
application that we have it's less than

00:05:03,130 --> 00:05:09,270
80 lines and doesn't contain any meta

00:05:05,050 --> 00:05:09,270
tags at all which is unacceptable

00:05:09,510 --> 00:05:19,420
so we used poppets here to fix this so

00:05:17,650 --> 00:05:22,660
property is a no chase library for

00:05:19,420 --> 00:05:24,810
Google Chrome it allows us to simulate

00:05:22,660 --> 00:05:28,690
user interaction and run code on

00:05:24,810 --> 00:05:30,520
addition to that we consists render the

00:05:28,690 --> 00:05:34,530
whole application in a browser that

00:05:30,520 --> 00:05:37,150
behaves like a normal Google Chrome so

00:05:34,530 --> 00:05:39,370
the basic idea is to run a node server

00:05:37,150 --> 00:05:43,450
that runs pop it here and wrote to that

00:05:39,370 --> 00:05:46,840
server from nginx can be done for all

00:05:43,450 --> 00:05:49,270
users user salon just looked in or just

00:05:46,840 --> 00:05:51,610
for BOTS and we need the bots because

00:05:49,270 --> 00:05:54,430
it's easiest one to implement the other

00:05:51,610 --> 00:05:57,340
options can require you to code the same

00:05:54,430 --> 00:06:00,040
way that you would render we have

00:05:57,340 --> 00:06:03,670
traditionally one cell which is a bit

00:06:00,040 --> 00:06:06,810
different so to show you this is just

00:06:03,670 --> 00:06:09,850
basic nginx configuration we have a

00:06:06,810 --> 00:06:11,320
pre-rendered block of the configuration

00:06:09,850 --> 00:06:14,350
I don't know if that's the correct term

00:06:11,320 --> 00:06:17,710
I'm not an engineering expert but I did

00:06:14,350 --> 00:06:21,220
the config so we check the user agent

00:06:17,710 --> 00:06:21,970
with regular expression but these and if

00:06:21,220 --> 00:06:27,940
it matches

00:06:21,970 --> 00:06:29,980
we simply route them to the pre-render

00:06:27,940 --> 00:06:34,630
service which is basically popular

00:06:29,980 --> 00:06:40,390
server at this point to puppeteer server

00:06:34,630 --> 00:06:43,750
takes control and just a tiny bit so

00:06:40,390 --> 00:06:47,410
heads up we did things a bit differently

00:06:43,750 --> 00:06:51,700
for puppeteer so we add headless to

00:06:47,410 --> 00:06:53,350
parameter tutor URL when we render the

00:06:51,700 --> 00:06:55,450
first application first time with

00:06:53,350 --> 00:06:57,400
puppeteer so some freaks aren't

00:06:55,450 --> 00:07:00,070
application happened like it's a new

00:06:57,400 --> 00:07:02,800
site there's a lot of ads and ads make

00:07:00,070 --> 00:07:05,530
the play page slower so we remove two

00:07:02,800 --> 00:07:07,810
ads to give you an example

00:07:05,530 --> 00:07:15,910
don't use that to access the site

00:07:07,810 --> 00:07:18,760
without ads please so yeah so obviously

00:07:15,910 --> 00:07:21,040
this is one problem with it the same one

00:07:18,760 --> 00:07:23,170
that Facebook and Google and others have

00:07:21,040 --> 00:07:27,120
that they don't know when the page is

00:07:23,170 --> 00:07:31,750
ready to be rendered like or taken or

00:07:27,120 --> 00:07:33,850
snapshotting or whatever but it's pretty

00:07:31,750 --> 00:07:36,790
easy to do once you're in control of the

00:07:33,850 --> 00:07:38,770
application so we simply defined this

00:07:36,790 --> 00:07:41,230
function that checks the global in

00:07:38,770 --> 00:07:44,470
window got ready to render that when in

00:07:41,230 --> 00:07:46,090
equals to two it completes a promise so

00:07:44,470 --> 00:07:48,180
this is basically a promise which we

00:07:46,090 --> 00:07:50,440
don't know what to promise this sorry

00:07:48,180 --> 00:07:55,720
I'm not going to explain either in half

00:07:50,440 --> 00:07:58,300
the time well we basically wait until

00:07:55,720 --> 00:08:00,820
the app says ready and when it does we

00:07:58,300 --> 00:08:04,690
extract HTTP status code from a meta tag

00:08:00,820 --> 00:08:08,080
that we have we did that with react so

00:08:04,690 --> 00:08:10,810
we hockey boy it works if the request

00:08:08,080 --> 00:08:13,690
ends in a 404 we can have a 404 response

00:08:10,810 --> 00:08:17,860
instead of 200 that would otherwise

00:08:13,690 --> 00:08:20,229
always come out of property server which

00:08:17,860 --> 00:08:22,570
is take the HTML and return it assess to

00:08:20,229 --> 00:08:28,060
the port that's requesting the content

00:08:22,570 --> 00:08:31,000
and as a side note it's a good idea to

00:08:28,060 --> 00:08:32,860
remove images from the loading process

00:08:31,000 --> 00:08:34,839
because it doesn't make any sense to

00:08:32,860 --> 00:08:36,909
load images when the browser doesn't

00:08:34,839 --> 00:08:38,469
have a screen and no one even looks at

00:08:36,909 --> 00:08:39,969
the images the market doesn't change one

00:08:38,469 --> 00:08:46,990
bit with this but it makes it much

00:08:39,969 --> 00:08:49,450
faster so what's the 3ds render in

00:08:46,990 --> 00:08:54,130
window so basically we have a redux

00:08:49,450 --> 00:08:55,480
action that we call when the main

00:08:54,130 --> 00:09:02,070
component on the page is finished

00:08:55,480 --> 00:09:04,480
loading and that action starts this saga

00:09:02,070 --> 00:09:06,580
when the application is a headless mode

00:09:04,480 --> 00:09:09,250
it does something like removes the

00:09:06,580 --> 00:09:10,600
scripts and sets the render the truth if

00:09:09,250 --> 00:09:12,810
it's not in headless mode it does

00:09:10,600 --> 00:09:12,810
nothing

00:09:14,630 --> 00:09:19,670
so now we have the full content and meta

00:09:16,700 --> 00:09:21,650
tags like here's the full response it

00:09:19,670 --> 00:09:24,230
doesn't fit anymore and there's meta

00:09:21,650 --> 00:09:28,670
tags that you can't see but ever believe

00:09:24,230 --> 00:09:34,120
me and well yeah there's this one minor

00:09:28,670 --> 00:09:37,460
problem that nothing actually works and

00:09:34,120 --> 00:09:40,910
by doesn't work I mean everything is

00:09:37,460 --> 00:09:46,580
broken like this should be there and

00:09:40,910 --> 00:09:47,870
it's there but so I'm gonna let that

00:09:46,580 --> 00:09:52,520
sink in for a moment

00:09:47,870 --> 00:09:54,710
just read it so basically I had to

00:09:52,520 --> 00:09:56,960
import you know the use or you will be

00:09:54,710 --> 00:10:02,630
haunted by spooky ghosts from style

00:09:56,960 --> 00:10:04,460
components this is because solid

00:10:02,630 --> 00:10:08,510
components does support server rendering

00:10:04,460 --> 00:10:10,820
but it only exposes their API for it or

00:10:08,510 --> 00:10:13,400
an actual server-side and our server

00:10:10,820 --> 00:10:16,430
rendering is done in a browser and then

00:10:13,400 --> 00:10:20,110
just return to our server so we can use

00:10:16,430 --> 00:10:25,310
that so we had to abuse this little API

00:10:20,110 --> 00:10:28,970
and yeah then we just added it to the

00:10:25,310 --> 00:10:35,180
his headless check in set rendered and

00:10:28,970 --> 00:10:38,660
this all lines code in total fix all of

00:10:35,180 --> 00:10:41,480
our CSS I don't recommend use those

00:10:38,660 --> 00:10:43,750
components but if you do you can fix it

00:10:41,480 --> 00:10:43,750
like this

00:10:44,650 --> 00:10:50,930
so just to show you here's the

00:10:47,270 --> 00:10:56,830
pre-rendered site let's see what kind of

00:10:50,930 --> 00:10:56,830
demo effect I get today so nice works

00:10:57,610 --> 00:11:02,770
so as you can see that's content missing

00:11:00,610 --> 00:11:04,810
but this is all of the bots care about

00:11:02,770 --> 00:11:09,720
the main content so we skipped

00:11:04,810 --> 00:11:09,720
everything else to get past page size

00:11:10,140 --> 00:11:15,240
and my focus was just

00:11:19,709 --> 00:11:26,350
so how do you build the new site without

00:11:22,899 --> 00:11:28,269
breaking too old as I said we were

00:11:26,350 --> 00:11:30,850
building an MVP on top of the old

00:11:28,269 --> 00:11:33,820
theme-based site and all the invest site

00:11:30,850 --> 00:11:35,139
had to work assess while we were

00:11:33,820 --> 00:11:38,800
building the new application that

00:11:35,139 --> 00:11:40,930
eventually replaced the old site this

00:11:38,800 --> 00:11:43,389
was surprisingly easy I don't expect it

00:11:40,930 --> 00:11:48,310
to be this easy I feel almost doobie

00:11:43,389 --> 00:11:50,920
including this one so this is a key part

00:11:48,310 --> 00:11:53,920
of a code so every costume shortcode

00:11:50,920 --> 00:11:55,810
that we had that rendered HTML to the

00:11:53,920 --> 00:11:58,810
theme based site that was basically

00:11:55,810 --> 00:12:00,810
useless in the react application so we

00:11:58,810 --> 00:12:05,220
changed the short Coast and rendered

00:12:00,810 --> 00:12:08,110
returned JSON instead of HTML and

00:12:05,220 --> 00:12:11,740
injected a component on top of the JSON

00:12:08,110 --> 00:12:15,220
in sort of in react it's a bit hockey

00:12:11,740 --> 00:12:16,300
body works well it's going to be happy

00:12:15,220 --> 00:12:19,839
if you're going to do single page

00:12:16,300 --> 00:12:22,829
applications with WordPress I wasn't

00:12:19,839 --> 00:12:25,930
supposed to go there so it's a wine

00:12:22,829 --> 00:12:28,449
optimization and do a way to make sure

00:12:25,930 --> 00:12:30,670
that we don't actually change anything

00:12:28,449 --> 00:12:33,010
inside of the impatient application we

00:12:30,670 --> 00:12:36,459
only loaded code that changes everything

00:12:33,010 --> 00:12:39,790
we need inside REST API requests which

00:12:36,459 --> 00:12:45,550
is pretty easy with this just included

00:12:39,790 --> 00:12:52,870
in REST API units of action and no not

00:12:45,550 --> 00:12:55,420
wait so that one bit of code here it

00:12:52,870 --> 00:12:59,019
missed by the highlighting but basically

00:12:55,420 --> 00:13:03,510
every AC of image that we had was in ID

00:12:59,019 --> 00:13:05,980
format return so it's when we requested

00:13:03,510 --> 00:13:08,170
everything from the API and it contain

00:13:05,980 --> 00:13:10,480
an easier feel of an image it only had

00:13:08,170 --> 00:13:12,279
an ID which was basically useless to us

00:13:10,480 --> 00:13:15,610
we didn't want to make an additional

00:13:12,279 --> 00:13:20,230
request so we changed every image inside

00:13:15,610 --> 00:13:22,240
ACF to an array regardless of what's the

00:13:20,230 --> 00:13:24,220
return type in the graphical user

00:13:22,240 --> 00:13:26,770
interface was

00:13:24,220 --> 00:13:29,020
then when we wanted to use the same menu

00:13:26,770 --> 00:13:31,000
for the both of the applications

00:13:29,020 --> 00:13:34,480
we're dinner to change something which

00:13:31,000 --> 00:13:39,820
is to use this filter inside blocking

00:13:34,480 --> 00:13:44,740
and changing the Curie parameters inside

00:13:39,820 --> 00:13:46,870
REST API is also pretty easy so this is

00:13:44,740 --> 00:13:49,360
print Mac but yes it's actually 2 TG Mac

00:13:46,870 --> 00:13:51,190
so we wanted to order it by the publish

00:13:49,360 --> 00:13:55,270
date instead of the chronological order

00:13:51,190 --> 00:14:01,980
in WordPress and we wanted to remove

00:13:55,270 --> 00:14:04,630
some values from it too so this is just

00:14:01,980 --> 00:14:06,610
an overview of how you actually change

00:14:04,630 --> 00:14:10,420
the item I'm not going to go into detail

00:14:06,610 --> 00:14:12,580
and that either how we change the Curie

00:14:10,420 --> 00:14:15,670
so basically I'm gonna show you the

00:14:12,580 --> 00:14:18,910
function in a bit but we wanted to

00:14:15,670 --> 00:14:23,170
include six weeks of next issues of the

00:14:18,910 --> 00:14:25,960
DP Mac in the results instead of from

00:14:23,170 --> 00:14:29,790
the first published one so we did like

00:14:25,960 --> 00:14:34,450
that and the removal is also just

00:14:29,790 --> 00:14:37,870
replace something in turay there's also

00:14:34,450 --> 00:14:39,970
some programs index highlights well yeah

00:14:37,870 --> 00:14:42,730
it's basically just a meta query and we

00:14:39,970 --> 00:14:46,300
have a lot of caching in front of it so

00:14:42,730 --> 00:14:47,670
it's fine that it's America don't judge

00:14:46,300 --> 00:14:50,590
me

00:14:47,670 --> 00:14:52,210
so moving on to the problem that made me

00:14:50,590 --> 00:14:56,160
want to commit my career as a developer

00:14:52,210 --> 00:14:56,160
and move on to live a sheep farmer

00:15:00,889 --> 00:15:08,759
so this is pretty bad if low-end devices

00:15:06,809 --> 00:15:16,709
take 30 seconds to render your

00:15:08,759 --> 00:15:18,420
application so a few months ago we

00:15:16,709 --> 00:15:20,939
started noting that sometimes when you

00:15:18,420 --> 00:15:22,949
clicked a link in the application it

00:15:20,939 --> 00:15:25,980
cost the full page to reload instead of

00:15:22,949 --> 00:15:28,439
seamlessly transitioning we did it in a

00:15:25,980 --> 00:15:30,629
bit further and find out they built it

00:15:28,439 --> 00:15:32,879
was actually transitioning but it was

00:15:30,629 --> 00:15:36,779
triggering a reload immediately before

00:15:32,879 --> 00:15:39,959
the transition so we tried debugging it

00:15:36,779 --> 00:15:43,079
but we couldn't even a trebuchet mean

00:15:39,959 --> 00:15:46,470
like every time it was just bit

00:15:43,079 --> 00:15:50,069
different so the problem got worse and

00:15:46,470 --> 00:15:51,920
worse if we didn't even look at it for

00:15:50,069 --> 00:15:54,899
months

00:15:51,920 --> 00:15:58,139
like it didn't occur the some users at

00:15:54,899 --> 00:16:01,649
all like me I didn't have a problem so

00:15:58,139 --> 00:16:03,660
finally our that cleat isolated the

00:16:01,649 --> 00:16:07,110
problem to Google tag manager by simply

00:16:03,660 --> 00:16:09,929
disable every single script on the page

00:16:07,110 --> 00:16:12,899
and just checking what causes it and it

00:16:09,929 --> 00:16:16,009
was Google tag manager and after that it

00:16:12,899 --> 00:16:19,110
was pretty easy to fix the problem

00:16:16,009 --> 00:16:22,350
so in this Stack Overflow answer that

00:16:19,110 --> 00:16:24,509
you don't have to read the main catch is

00:16:22,350 --> 00:16:27,300
that if you have triggers that have said

00:16:24,509 --> 00:16:29,639
the wait for tags and check validation

00:16:27,300 --> 00:16:32,160
checkboxes you have to uncheck them as

00:16:29,639 --> 00:16:34,170
these are unnecessary and even harmful

00:16:32,160 --> 00:16:37,110
in single page applications as what is

00:16:34,170 --> 00:16:40,170
basically do is they abort the page

00:16:37,110 --> 00:16:42,600
transition inside in traditional web

00:16:40,170 --> 00:16:45,329
pages like it aborts the request to the

00:16:42,600 --> 00:16:49,559
new page and since the data to Google

00:16:45,329 --> 00:16:52,230
and then restarts the request again so

00:16:49,559 --> 00:16:55,410
what did this was that it tried to abort

00:16:52,230 --> 00:16:57,839
the request it didn't well so the page

00:16:55,410 --> 00:17:00,839
went where it went and then it reloaded

00:16:57,839 --> 00:17:02,999
the page and if you have a galaxy trend

00:17:00,839 --> 00:17:05,370
he was trying to bounce an article you

00:17:02,999 --> 00:17:09,059
have to wait 30 seconds for each of them

00:17:05,370 --> 00:17:11,130
so that was not very nice we also had a

00:17:09,059 --> 00:17:13,770
similar thing with frost might as well

00:17:11,130 --> 00:17:16,140
and turns out that

00:17:13,770 --> 00:17:18,449
don't work really well in case of single

00:17:16,140 --> 00:17:21,179
page applications frosmo has fixed it

00:17:18,449 --> 00:17:29,340
now but if you have to use circus

00:17:21,179 --> 00:17:33,330
consider again so moving on to cache

00:17:29,340 --> 00:17:36,800
invalidation the hard part of this

00:17:33,330 --> 00:17:43,320
presentation i'm gonna preface this with

00:17:36,800 --> 00:17:46,320
this was a major fail so it's lovely the

00:17:43,320 --> 00:17:49,280
easy ones post for any front-end assets

00:17:46,320 --> 00:17:53,610
that you have CSS javascript as which is

00:17:49,280 --> 00:17:59,400
use the file name with an md5 hashing it

00:17:53,610 --> 00:18:03,420
like doc dot md5 hash table kbecque the

00:17:59,400 --> 00:18:07,350
next one i don't know turns out these

00:18:03,420 --> 00:18:10,530
these things aren't so popular and they

00:18:07,350 --> 00:18:15,300
don't exist so moving on to the harder

00:18:10,530 --> 00:18:18,450
parts so we use another fortress

00:18:15,300 --> 00:18:21,210
transients so i built a better class

00:18:18,450 --> 00:18:23,420
based API and you're gonna go over the

00:18:21,210 --> 00:18:26,340
strikers in a moment but so basically

00:18:23,420 --> 00:18:29,220
yeah it's a class based API instead of

00:18:26,340 --> 00:18:31,920
the pressure to roll standard api if you

00:18:29,220 --> 00:18:34,110
use this it in the background book yeah

00:18:31,920 --> 00:18:34,950
the main future Nia is the predictable

00:18:34,110 --> 00:18:39,330
transient names

00:18:34,950 --> 00:18:41,429
it had prefetch and a list of transients

00:18:39,330 --> 00:18:44,670
with meta and a niche since inception

00:18:41,429 --> 00:18:46,890
mouth which good which lets you present

00:18:44,670 --> 00:18:50,520
we select you put transients within

00:18:46,890 --> 00:18:53,160
transients well these were removed for

00:18:50,520 --> 00:18:54,059
technical reasons I'm gonna tell about

00:18:53,160 --> 00:18:57,660
them in a moment

00:18:54,059 --> 00:19:00,510
well then one thing that uses transients

00:18:57,660 --> 00:19:01,470
a lot is the cache proxy in point with

00:19:00,510 --> 00:19:04,140
that I did

00:19:01,470 --> 00:19:08,960
it's for third-party or native WordPress

00:19:04,140 --> 00:19:12,929
endpoints so say posts endpoint we can

00:19:08,960 --> 00:19:14,670
easily transient if I that but if you

00:19:12,929 --> 00:19:19,230
rather to the cache proxy

00:19:14,670 --> 00:19:21,809
yeah no problem on top of that I added

00:19:19,230 --> 00:19:24,090
automatically on Zients for all custom

00:19:21,809 --> 00:19:25,010
API endpoints it's just one line of code

00:19:24,090 --> 00:19:30,010
if

00:19:25,010 --> 00:19:30,010
you want to use transient in it and

00:19:30,160 --> 00:19:38,720
magic needs some ugly things behind it

00:19:33,760 --> 00:19:42,170
so yeah as I said unfortunately because

00:19:38,720 --> 00:19:48,230
we can only run memcache this small

00:19:42,170 --> 00:19:51,110
solution didn't problem so very well so

00:19:48,230 --> 00:19:54,650
I didn't know that memcached maximum

00:19:51,110 --> 00:19:56,360
value sizes one megabytes and the list

00:19:54,650 --> 00:19:57,980
of my transients quickly got to four

00:19:56,360 --> 00:20:00,710
megabytes with just a few thousand

00:19:57,980 --> 00:20:02,630
transients in it so I tried storing me

00:20:00,710 --> 00:20:08,060
WB options inside the WordPress database

00:20:02,630 --> 00:20:12,230
book yeah - girl didn't like it I don't

00:20:08,060 --> 00:20:15,080
know why I'm not human today but PHP

00:20:12,230 --> 00:20:16,730
could handle value - spine about

00:20:15,080 --> 00:20:22,580
protection crashed a few times as a

00:20:16,730 --> 00:20:25,100
result of my smart code so we simplified

00:20:22,580 --> 00:20:29,690
it a bit left out the list where you

00:20:25,100 --> 00:20:31,250
fetch an injection mode but a system

00:20:29,690 --> 00:20:33,710
like this good work just wonderfully

00:20:31,250 --> 00:20:38,450
with readers or any least recently used

00:20:33,710 --> 00:20:42,250
cash without sensible value limits and

00:20:38,450 --> 00:20:42,250
my remote

00:20:44,290 --> 00:20:46,950
yep

00:20:47,350 --> 00:20:50,220
is this

00:20:55,250 --> 00:21:05,169
this is my demo effect today worse

00:21:12,340 --> 00:21:16,790
yeah

00:21:14,170 --> 00:21:18,950
so I don't see my own presentation

00:21:16,790 --> 00:21:20,690
anymore but I don't need to notes it's

00:21:18,950 --> 00:21:23,810
just that I'm switching context like say

00:21:20,690 --> 00:21:25,450
blending time so I really need to note

00:21:23,810 --> 00:21:29,000
who cares

00:21:25,450 --> 00:21:31,580
so we run it over a week and it didn't

00:21:29,000 --> 00:21:33,230
go what the four megabytes and we must

00:21:31,580 --> 00:21:36,650
populate it all the transients that we

00:21:33,230 --> 00:21:40,550
would but yeah my SQL church owns a

00:21:36,650 --> 00:21:43,180
transient list so we didn't have the

00:21:40,550 --> 00:21:46,040
possibility to use it but if you read us

00:21:43,180 --> 00:21:52,070
previous how do you pronounce it I don't

00:21:46,040 --> 00:21:54,380
care yeah you could use this so I'm

00:21:52,070 --> 00:21:58,070
gonna show you some code this that is

00:21:54,380 --> 00:22:00,800
claimer I hacked it together from the

00:21:58,070 --> 00:22:03,080
path of code that I wrote and a part of

00:22:00,800 --> 00:22:06,410
the code that are now in production so

00:22:03,080 --> 00:22:09,200
no guarantees whatsoever so looking

00:22:06,410 --> 00:22:11,450
through it and I will publish the

00:22:09,200 --> 00:22:14,870
toolkit bouillon containing similar

00:22:11,450 --> 00:22:17,840
features than these but I have to have

00:22:14,870 --> 00:22:18,620
time - yes maybe it's done next week

00:22:17,840 --> 00:22:23,050
maybe it isn't

00:22:18,620 --> 00:22:27,730
oh yeah just to show you how they some

00:22:23,050 --> 00:22:31,130
really complicate the things it's just

00:22:27,730 --> 00:22:34,790
it's different so here's the transient

00:22:31,130 --> 00:22:36,590
apart classic of structure it's I'm not

00:22:34,790 --> 00:22:39,440
going to go into detail what basically

00:22:36,590 --> 00:22:42,620
it sets the key that's the base of all

00:22:39,440 --> 00:22:45,260
transient Keys so we use we have a

00:22:42,620 --> 00:22:48,440
costume access level system so we embed

00:22:45,260 --> 00:22:50,410
data from that to the key so we can have

00:22:48,440 --> 00:22:56,630
different transients for different

00:22:50,410 --> 00:22:59,150
access levels these are just functions

00:22:56,630 --> 00:23:03,230
that really shouldn't get anything from

00:22:59,150 --> 00:23:05,060
WB options but they do and here's the

00:23:03,230 --> 00:23:09,020
Porsche options of the class so

00:23:05,060 --> 00:23:11,300
basically you can set a different expiry

00:23:09,020 --> 00:23:13,820
or different permissions for bypassing

00:23:11,300 --> 00:23:15,980
transients so basically every editor

00:23:13,820 --> 00:23:18,659
that we have has to have get the latest

00:23:15,980 --> 00:23:24,019
content instead of

00:23:18,659 --> 00:23:26,279
last content you can go little

00:23:24,019 --> 00:23:28,679
prefetching is also pretty easy you just

00:23:26,279 --> 00:23:31,740
maintain the list and then you call it

00:23:28,679 --> 00:23:38,850
in with a cron job and you leave the

00:23:31,740 --> 00:23:41,250
list so the interesting part of this is

00:23:38,850 --> 00:23:43,409
this get function so basically the get

00:23:41,250 --> 00:23:46,559
function doesn't do anything with get

00:23:43,409 --> 00:23:48,649
dates of in callable here unless the

00:23:46,559 --> 00:23:52,559
transient is actually missing or invalid

00:23:48,649 --> 00:23:55,049
so if there's new transient it will call

00:23:52,559 --> 00:23:57,840
get data in and stuff to get data to set

00:23:55,049 --> 00:23:59,580
the transient with the set function as

00:23:57,840 --> 00:24:01,470
you see it's past this so it has

00:23:59,580 --> 00:24:04,830
accessed the same transient e for

00:24:01,470 --> 00:24:07,500
instance and this is just a magic behind

00:24:04,830 --> 00:24:13,860
it it's rather simple code but don't do

00:24:07,500 --> 00:24:19,649
this and yeah it's just a cron job that

00:24:13,860 --> 00:24:22,529
triggers the prefetching so to show you

00:24:19,649 --> 00:24:24,720
the category input custom endpoints that

00:24:22,529 --> 00:24:28,799
we have this is a category end point I

00:24:24,720 --> 00:24:31,409
built so yeah you just define the end

00:24:28,799 --> 00:24:34,230
point in the construction and you define

00:24:31,409 --> 00:24:39,419
an expiry for it this is transient

00:24:34,230 --> 00:24:44,789
length and this is the actual API

00:24:39,419 --> 00:24:49,220
endpoint it's pretty simple but under

00:24:44,789 --> 00:24:49,220
these is like 2,000 lines of code so

00:24:50,090 --> 00:24:56,730
transients are really required in this

00:24:52,320 --> 00:25:00,960
case to show you the basic class under

00:24:56,730 --> 00:25:03,360
the custom rest route that we have it's

00:25:00,960 --> 00:25:08,519
rather simple it just extends WP rest

00:25:03,360 --> 00:25:12,360
controller yeah you give it the

00:25:08,519 --> 00:25:14,539
namespace and a route and that's it then

00:25:12,360 --> 00:25:19,860
you use create endpoint entitled class

00:25:14,539 --> 00:25:21,690
to create your endpoints and yeah this

00:25:19,860 --> 00:25:24,980
is just so complex that I don't have

00:25:21,690 --> 00:25:24,980
time to explain it so

00:25:25,039 --> 00:25:37,109
actually 10:35 yeah so I'm not gonna

00:25:34,619 --> 00:25:38,879
explain it it's there they could make

00:25:37,109 --> 00:25:43,859
sure if you want I'm gonna put my slides

00:25:38,879 --> 00:25:47,820
online today it's there I'm in a bit of

00:25:43,859 --> 00:25:50,039
a horror game so transom cleaner it's

00:25:47,820 --> 00:25:55,350
just basically who's on the fielders or

00:25:50,039 --> 00:26:02,039
actions and if it loops things if it

00:25:55,350 --> 00:26:03,779
matches transient it will clear it this

00:26:02,039 --> 00:26:06,239
is religious turnout

00:26:03,779 --> 00:26:10,799
ugly class that there's nothing nice

00:26:06,239 --> 00:26:17,460
don't think of me absolute coder

00:26:10,799 --> 00:26:20,100
especially Yakko so I don't think I have

00:26:17,460 --> 00:26:22,139
time for this well basically every

00:26:20,100 --> 00:26:26,220
request that we make from the client

00:26:22,139 --> 00:26:28,049
side do WordPress is cache to local

00:26:26,220 --> 00:26:30,830
forest which uses index the database

00:26:28,049 --> 00:26:30,830
behind it

00:26:31,730 --> 00:26:37,409
this makes the application passed up all

00:26:34,859 --> 00:26:38,940
the time and allows for offline use and

00:26:37,409 --> 00:26:41,730
we actually ship the offline fare to

00:26:38,940 --> 00:26:45,980
feature yesterday but we had to rollback

00:26:41,730 --> 00:26:48,960
it for other other unrelated issues but

00:26:45,980 --> 00:26:51,239
yeah so if it were to make changes to

00:26:48,960 --> 00:26:53,429
the data that we have stored on the

00:26:51,239 --> 00:26:59,129
user's device and we change the

00:26:53,429 --> 00:27:02,549
components everything will break so we

00:26:59,129 --> 00:27:03,029
have to do something to make the local

00:27:02,549 --> 00:27:07,190
database

00:27:03,029 --> 00:27:11,190
clearable so we used versions basically

00:27:07,190 --> 00:27:13,200
these are just objects that contain some

00:27:11,190 --> 00:27:16,590
properties like the version and these

00:27:13,200 --> 00:27:20,369
are compared with you yeah these are

00:27:16,590 --> 00:27:23,309
compared with future classes I'm gonna

00:27:20,369 --> 00:27:28,129
show you but yeah you can use a version

00:27:23,309 --> 00:27:28,129
to clear all data from on users device

00:27:29,990 --> 00:27:38,370
so we simply clear create local forage

00:27:34,140 --> 00:27:44,100
sauce add a wrapper class around it add

00:27:38,370 --> 00:27:46,920
some functionality so we used hashes for

00:27:44,100 --> 00:27:53,400
the keys to stop us to save a bit on

00:27:46,920 --> 00:27:56,850
user disk space we compare the version

00:27:53,400 --> 00:28:00,780
of the cache item with the application

00:27:56,850 --> 00:28:04,410
version and if it's too late like or it

00:28:00,780 --> 00:28:07,020
has been it says that issue clear we

00:28:04,410 --> 00:28:13,430
will nuke the cache and that's it

00:28:07,020 --> 00:28:16,650
and yeah it's a really simple code too

00:28:13,430 --> 00:28:18,540
so we can hook this up to the data

00:28:16,650 --> 00:28:21,720
retrieval function that we have we have

00:28:18,540 --> 00:28:24,090
a WP client javascript class as well I'm

00:28:21,720 --> 00:28:26,820
going to show that but we have that so

00:28:24,090 --> 00:28:30,390
we have huge into the get method of it

00:28:26,820 --> 00:28:33,150
so all of a ifs data is going to be cast

00:28:30,390 --> 00:28:36,710
out pneumatically but it has problem

00:28:33,150 --> 00:28:36,710
like it's going to keep going forever

00:28:37,010 --> 00:28:43,440
so let's buildin least recently used

00:28:40,260 --> 00:28:51,680
cash for their front end based on the

00:28:43,440 --> 00:28:55,980
disk storage class so we have a list of

00:28:51,680 --> 00:28:58,140
all the items in the cache it's can

00:28:55,980 --> 00:29:01,170
contain a thousand items and if it goes

00:28:58,140 --> 00:29:08,670
over that it will clean 10% lessons out

00:29:01,170 --> 00:29:13,560
automatically nope ah then that's just

00:29:08,670 --> 00:29:16,560
basic so we override the get method

00:29:13,560 --> 00:29:19,890
inside this storage to set to order

00:29:16,560 --> 00:29:21,840
every time requests is made or and

00:29:19,890 --> 00:29:24,680
accessed from the cache it moves upwards

00:29:21,840 --> 00:29:28,560
in the list so it doesn't get removed

00:29:24,680 --> 00:29:30,740
and it just uses the storage get behind

00:29:28,560 --> 00:29:30,740
of it

00:29:31,620 --> 00:29:41,139
this is just the cleaning method it's

00:29:34,950 --> 00:29:42,850
not a manual but this works so on top of

00:29:41,139 --> 00:29:46,809
that I'm gonna have to drop off there

00:29:42,850 --> 00:29:49,929
this one I think yeah so dealing with

00:29:46,809 --> 00:29:53,980
fragmented data which made me regret not

00:29:49,929 --> 00:29:55,990
using type strip well basically there's

00:29:53,980 --> 00:29:58,570
many different formats or at least two

00:29:55,990 --> 00:30:03,460
in this case for sealing the same data

00:29:58,570 --> 00:30:05,830
like this is response from word person

00:30:03,460 --> 00:30:08,529
ativ endpoint of an image featured image

00:30:05,830 --> 00:30:11,350
to be exact and this is an ACF field

00:30:08,529 --> 00:30:12,360
image inside an REST API response so as

00:30:11,350 --> 00:30:19,299
you can see they're a bit different

00:30:12,360 --> 00:30:21,610
contain the same data usually so this is

00:30:19,299 --> 00:30:23,610
a case for everything inside the ACF

00:30:21,610 --> 00:30:26,919
fields that we have from this plugin and

00:30:23,610 --> 00:30:29,559
other things as well but for the sake of

00:30:26,919 --> 00:30:33,549
simplicity so we want to use the same

00:30:29,559 --> 00:30:37,539
components regardless of if it's a AC of

00:30:33,549 --> 00:30:40,629
image or featured image so we used

00:30:37,539 --> 00:30:42,429
models this is basically just a

00:30:40,629 --> 00:30:44,379
JavaScript object that contains these

00:30:42,429 --> 00:30:47,259
properties at all times and the

00:30:44,379 --> 00:30:49,690
components can rely on them so they

00:30:47,259 --> 00:30:51,399
don't happen by movies though they don't

00:30:49,690 --> 00:30:54,490
have to do this kind of ugly thing

00:30:51,399 --> 00:30:58,500
inside the component and don't ask why a

00:30:54,490 --> 00:31:01,779
CF images of always an image dr. Cooper

00:30:58,500 --> 00:31:03,960
that's justify the old thing we couldn't

00:31:01,779 --> 00:31:03,960
change

00:31:07,200 --> 00:31:10,040
five days

00:31:11,960 --> 00:31:18,139
so okay I have funds listen

00:31:15,470 --> 00:31:22,309
so I'll engage English with with

00:31:18,139 --> 00:31:24,470
WordPress the obvious thing to use for

00:31:22,309 --> 00:31:26,659
Sookie's like that was the easiest one

00:31:24,470 --> 00:31:31,220
anyone that's made our East there'd be a

00:31:26,659 --> 00:31:35,269
request from that WP admin has wondered

00:31:31,220 --> 00:31:37,279
why it's so easy probably I did but with

00:31:35,269 --> 00:31:40,940
cookies you have to use nonsense with

00:31:37,279 --> 00:31:43,909
the important requests and you can't do

00:31:40,940 --> 00:31:45,619
that or you can I did and when I run

00:31:43,909 --> 00:31:48,860
into trouble I want to ask for help and

00:31:45,619 --> 00:31:50,869
this is what Ryan McHugh told me so

00:31:48,860 --> 00:31:52,549
basically he said fundamentally kooky

00:31:50,869 --> 00:31:55,460
authentication is only meant to be used

00:31:52,549 --> 00:31:57,649
inside logins or themes and if you're

00:31:55,460 --> 00:32:00,259
not using them you shouldn't do it just

00:31:57,649 --> 00:32:03,080
ignore the rest of what he said I don't

00:32:00,259 --> 00:32:04,610
like the idea of creating a single base

00:32:03,080 --> 00:32:09,039
application that's mustafa-bhai

00:32:04,610 --> 00:32:12,409
worthless so moving on to other options

00:32:09,039 --> 00:32:13,759
JSON web tokens were used briefly but

00:32:12,409 --> 00:32:17,179
they're meant for server server

00:32:13,759 --> 00:32:21,019
applications and not really client-side

00:32:17,179 --> 00:32:23,360
applications so well if it was we use

00:32:21,019 --> 00:32:26,539
this commercial plug-in called WP or

00:32:23,360 --> 00:32:29,809
server which is in this address I don't

00:32:26,539 --> 00:32:33,980
really recommend it it was horrid but we

00:32:29,809 --> 00:32:39,889
did the job so this is how is that I

00:32:33,980 --> 00:32:40,879
love ya so the dog suggest that you do

00:32:39,889 --> 00:32:43,700
this

00:32:40,879 --> 00:32:47,869
even though this is from the user

00:32:43,700 --> 00:32:49,669
credentials grant type documentation you

00:32:47,869 --> 00:32:52,789
might see something wrong with this

00:32:49,669 --> 00:32:55,369
so base64 isn't an encryption it's just

00:32:52,789 --> 00:32:57,169
an encoding so if you were to embed this

00:32:55,369 --> 00:33:00,980
to fly inside we would have some

00:32:57,169 --> 00:33:03,700
troubles later on so what could possibly

00:33:00,980 --> 00:33:07,480
go wrong with this one

00:33:03,700 --> 00:33:10,970
everything so let's do something else so

00:33:07,480 --> 00:33:14,389
instead of finding the documentation

00:33:10,970 --> 00:33:18,169
blindly we did that but with our REST

00:33:14,389 --> 00:33:21,399
API endpoint so we'd supposed to

00:33:18,169 --> 00:33:24,340
username and password at the header and

00:33:21,399 --> 00:33:27,190
forward the requests

00:33:24,340 --> 00:33:30,940
the ORF the server and return it to the

00:33:27,190 --> 00:33:33,640
clients so I'm gonna have to wrap up now

00:33:30,940 --> 00:33:35,410
but this is how we did south indication

00:33:33,640 --> 00:33:38,080
I spend like two months getting it done

00:33:35,410 --> 00:33:41,280
so I don't really recommend the blogging

00:33:38,080 --> 00:33:45,370
Bob I don't know what your options are

00:33:41,280 --> 00:33:48,310
so I'm gonna have to skip these though

00:33:45,370 --> 00:33:55,180
yeah thank you it's been a pleasure

00:33:48,310 --> 00:33:57,400
about too much content I know so just

00:33:55,180 --> 00:34:02,200
send us down some rabbit holes here's

00:33:57,400 --> 00:34:05,340
the reasoning behind the nonces from

00:34:02,200 --> 00:34:10,150
REST API take a picture if you want and

00:34:05,340 --> 00:34:12,580
here's the property starts article we

00:34:10,150 --> 00:34:14,140
just did this one and added some

00:34:12,580 --> 00:34:18,130
boilerplate I putted the production it

00:34:14,140 --> 00:34:20,230
has worked tremendously well no more I

00:34:18,130 --> 00:34:23,170
can just recommend it just do it

00:34:20,230 --> 00:34:24,120
and this was a Google Doc managed to

00:34:23,170 --> 00:34:29,790
answer

00:34:24,120 --> 00:34:32,910
and yeah I've been here sorry thank you

00:34:29,790 --> 00:34:32,910
thank you

00:34:33,030 --> 00:34:37,990
so we have about five minutes for

00:34:35,620 --> 00:34:40,090
questions so if we have some audience

00:34:37,990 --> 00:34:42,190
questions please raise your hands and

00:34:40,090 --> 00:34:45,570
then there'll be a mic given to you so

00:34:42,190 --> 00:34:45,570
there's one in the back corner

00:34:52,890 --> 00:34:57,080
Hey

00:34:54,500 --> 00:35:00,920
this was a fully reacted front done

00:34:57,080 --> 00:35:03,020
right uh yeah is there any reason why

00:35:00,920 --> 00:35:04,940
you chose puppeteer over for example

00:35:03,020 --> 00:35:08,170
next Jase or something like that which

00:35:04,940 --> 00:35:10,430
actually provides yeah

00:35:08,170 --> 00:35:13,760
did you costume continue or did I

00:35:10,430 --> 00:35:16,910
interrupt you so we didn't want to use

00:35:13,760 --> 00:35:19,130
next jeaious because it's react but it's

00:35:16,910 --> 00:35:21,109
different you can't use same kind of

00:35:19,130 --> 00:35:23,720
things like you can't use react router

00:35:21,109 --> 00:35:24,609
with neck chairs and we wanted to use

00:35:23,720 --> 00:35:28,430
react router

00:35:24,609 --> 00:35:31,880
mmm you just wanted to use it and we

00:35:28,430 --> 00:35:35,090
wanted to try papa tsa I see because you

00:35:31,880 --> 00:35:37,820
have in in next you have the possibility

00:35:35,090 --> 00:35:39,800
to do a server-side rendering and every

00:35:37,820 --> 00:35:43,730
concurrent request after the initial

00:35:39,800 --> 00:35:46,849
request is done in the contract I'm not

00:35:43,730 --> 00:35:50,390
sure if I heard that in next you can

00:35:46,849 --> 00:35:52,910
actually do both things you can do

00:35:50,390 --> 00:35:55,040
server-side rendering yeah on the

00:35:52,910 --> 00:35:58,580
initial page yeah I think use next to

00:35:55,040 --> 00:36:01,550
say us briefly hug I liked it a bit but

00:35:58,580 --> 00:36:07,240
we just didn't go with it

00:36:01,550 --> 00:36:09,980
no other reason that any other thank you

00:36:07,240 --> 00:36:12,160
yeah other questions there's one over

00:36:09,980 --> 00:36:12,160
there

00:36:15,930 --> 00:36:21,750
when building this did you look at graph

00:36:18,089 --> 00:36:25,500
QL over using a REST API I wish I used

00:36:21,750 --> 00:36:28,319
graph kill but we didn't have the

00:36:25,500 --> 00:36:30,029
expertise no one know how to use it but

00:36:28,319 --> 00:36:32,700
everyone wanted to use it but we're

00:36:30,029 --> 00:36:33,690
doing in know how to set it up I've

00:36:32,700 --> 00:36:37,650
heard

00:36:33,690 --> 00:36:43,500
Morgan I think I set it up I'm not sure

00:36:37,650 --> 00:36:47,420
maybe I heard that maybe someone from

00:36:43,500 --> 00:36:47,420
that was going to talk about it sometime

00:36:52,760 --> 00:36:57,920
I mean Christopher did you notice a

00:36:55,370 --> 00:37:02,320
change in SEO performance before and

00:36:57,920 --> 00:37:02,320
after the the desire yes it went down

00:37:04,000 --> 00:37:10,670
well it's been temporary we had some

00:37:07,760 --> 00:37:11,750
problems with the poverty obviously well

00:37:10,670 --> 00:37:15,500
yeah

00:37:11,750 --> 00:37:18,050
it's going back that I don't know

00:37:15,500 --> 00:37:20,030
actually why it's going down

00:37:18,050 --> 00:37:23,560
maybe it's because it wasn't able to

00:37:20,030 --> 00:37:27,680
find site maps in the beginning and that

00:37:23,560 --> 00:37:31,580
costs a bit of trouble but every new

00:37:27,680 --> 00:37:34,010
article that we publish is their love

00:37:31,580 --> 00:37:36,140
for him within like 15 minutes from

00:37:34,010 --> 00:37:39,710
publishing if you find with the tile to

00:37:36,140 --> 00:37:44,290
put it to Google it's there so it should

00:37:39,710 --> 00:37:44,290
be okay but definitely metrics are down

00:37:44,680 --> 00:37:48,760
my questions there was

00:37:50,090 --> 00:37:56,330
someone already mentioned next day yes

00:37:52,910 --> 00:38:00,740
you do ever consider God's blue eye

00:37:56,330 --> 00:38:01,510
isn't that more like I don't know what

00:38:00,740 --> 00:38:05,740
to call it

00:38:01,510 --> 00:38:13,820
it's a Bailey yeah so it's a more like

00:38:05,740 --> 00:38:17,440
generator yeah yeah so I hadn't heard of

00:38:13,820 --> 00:38:22,040
cats people before we started this yes

00:38:17,440 --> 00:38:28,900
like built-in direct like for prayer

00:38:22,040 --> 00:38:31,760
support and Oh with the graph QL yes I

00:38:28,900 --> 00:38:32,330
so it's nice so maybe I consider that

00:38:31,760 --> 00:38:34,520
more feature

00:38:32,330 --> 00:38:37,940
yeah most of this stuff would have been

00:38:34,520 --> 00:38:39,890
solved just yeah hey thanks for telling

00:38:37,940 --> 00:38:43,010
me the phone but now I'm not a year ago

00:38:39,890 --> 00:38:44,570
I said that I was going to build this

00:38:43,010 --> 00:38:47,450
say oh I didn't know one tell me what to

00:38:44,570 --> 00:38:49,910
do like I had no idea what to do but you

00:38:47,450 --> 00:38:53,090
did yeah we have one more question on

00:38:49,910 --> 00:38:55,670
the back there Oh was there a reason why

00:38:53,090 --> 00:38:59,390
you wanted to use the built in WordPress

00:38:55,670 --> 00:39:02,930
REST API endpoints because I've found it

00:38:59,390 --> 00:39:05,270
easier to use transform function to put

00:39:02,930 --> 00:39:08,380
the data in the format I want to use

00:39:05,270 --> 00:39:12,590
instead of just using whatever works

00:39:08,380 --> 00:39:15,440
WordPress spits out yeah mainly it was

00:39:12,590 --> 00:39:19,760
an MVP that was the reason and we kind

00:39:15,440 --> 00:39:21,680
of had to stick with it it's going to

00:39:19,760 --> 00:39:25,130
improve in the future I'm sure of that

00:39:21,680 --> 00:39:27,650
but that's minor and so announcements

00:39:25,130 --> 00:39:29,450
this is my last day at Ben's it say I

00:39:27,650 --> 00:39:36,050
don't know how it's going to evolve at

00:39:29,450 --> 00:39:38,630
this point okay I think we're out of

00:39:36,050 --> 00:39:41,620
time for questions so yeah once more

00:39:38,630 --> 00:39:41,620
let's give a hand to grace

00:39:44,660 --> 00:39:47,179

YouTube URL: https://www.youtube.com/watch?v=D2upOJkKNxE


