Title: OSC15 - Kristoffer GrÃ¶nlund - Exploring history with Hawk
Publication date: 2015-05-04
Playlist: openSUSE Conference 2015
Description: 
	Hawk is a cluster configuration and management tool implemented as a Ruby on Rails app which runs on Linux HA clusters. It includes features for monitoring clusters, configuring new cluster resources, simulating changes to the cluster, setting up access control lists and more. This session is an introduction to High Availability clusters in general, focusing on using the Hawk web interface to interact with a cluster, modify resources, and using its history explorer feature to quickly figure out what has happened based on cluster events and logs.
Captions: 
	00:00:14,920 --> 00:00:17,920
um

00:01:10,840 --> 00:01:13,840
so

00:02:20,840 --> 00:02:23,840
so

00:03:02,840 --> 00:03:05,840
so

00:03:30,840 --> 00:03:33,840
so

00:04:50,720 --> 00:04:57,840
one two should i start

00:04:58,240 --> 00:05:00,639
let's see

00:05:08,840 --> 00:05:11,840
oh

00:05:12,720 --> 00:05:16,160
how about this all right

00:05:20,880 --> 00:05:28,720
okay i'm going to talk about uh

00:05:24,479 --> 00:05:32,000
hawk and aha

00:05:28,720 --> 00:05:35,039
which is high availability clustering

00:05:32,000 --> 00:05:38,720
and it's

00:05:35,039 --> 00:05:42,639
gonna be a pretty quick introduction to

00:05:38,720 --> 00:05:45,520
clustering if you haven't done it before

00:05:42,639 --> 00:05:46,080
but i'm gonna try to get it to make

00:05:45,520 --> 00:05:49,199
sense

00:05:46,080 --> 00:05:50,880
so i can show you some of the

00:05:49,199 --> 00:05:53,440
interesting stuff that you can do with

00:05:50,880 --> 00:05:56,639
the with hawk

00:05:53,440 --> 00:05:59,039
so first of all

00:05:56,639 --> 00:06:00,080
my name is christopher grellen i work at

00:05:59,039 --> 00:06:04,160
sousa on the

00:06:00,080 --> 00:06:06,400
aha team i primarily develop crm

00:06:04,160 --> 00:06:07,440
shell but i also maintain a bunch of

00:06:06,400 --> 00:06:11,440
other packages

00:06:07,440 --> 00:06:14,960
and i'm going to start developing hawk

00:06:11,440 --> 00:06:18,400
more going forward um

00:06:14,960 --> 00:06:20,800
so yeah and pretty much yeah i think

00:06:18,400 --> 00:06:24,319
everything i do

00:06:20,800 --> 00:06:27,039
for suse is online open source

00:06:24,319 --> 00:06:28,080
and most of it you can find on github so

00:06:27,039 --> 00:06:32,400
that's my

00:06:28,080 --> 00:06:35,680
handle so i'm gonna start by

00:06:32,400 --> 00:06:39,199
introducing aha

00:06:35,680 --> 00:06:42,560
very quickly it's

00:06:39,199 --> 00:06:44,639
it's going to be abbreviated

00:06:42,560 --> 00:06:46,240
then i'm going to talk about hawk some

00:06:44,639 --> 00:06:48,800
of the features

00:06:46,240 --> 00:06:50,080
what it what it is what it does how you

00:06:48,800 --> 00:06:52,960
can use it

00:06:50,080 --> 00:06:54,639
and then i'm going to show the history

00:06:52,960 --> 00:06:56,080
explorer feature in particular in a

00:06:54,639 --> 00:07:00,840
little bit more depth

00:06:56,080 --> 00:07:05,360
and that's it so and

00:07:00,840 --> 00:07:08,639
yeah high availability is

00:07:05,360 --> 00:07:11,199
yeah it's like that

00:07:08,639 --> 00:07:12,960
high availability is basically trying to

00:07:11,199 --> 00:07:15,280
take something that is not

00:07:12,960 --> 00:07:16,639
highly available and make it highly

00:07:15,280 --> 00:07:18,800
available so

00:07:16,639 --> 00:07:21,680
you have an application like a web

00:07:18,800 --> 00:07:25,039
server that may crash

00:07:21,680 --> 00:07:26,639
and you want to keep it so that the user

00:07:25,039 --> 00:07:29,039
of the application

00:07:26,639 --> 00:07:30,000
never notices that the server may have

00:07:29,039 --> 00:07:33,520
crashed or that

00:07:30,000 --> 00:07:36,479
the software may crashed and so on so

00:07:33,520 --> 00:07:38,160
using special software you want to be

00:07:36,479 --> 00:07:43,120
able to handle

00:07:38,160 --> 00:07:44,960
hardware failures software failures

00:07:43,120 --> 00:07:46,160
any kind of other things one of the

00:07:44,960 --> 00:07:49,360
coolest things i've

00:07:46,160 --> 00:07:52,000
heard someone do is they hooked up

00:07:49,360 --> 00:07:53,120
monitoring systems to the cluster

00:07:52,000 --> 00:07:56,960
software

00:07:53,120 --> 00:07:59,440
and they weighed different events

00:07:56,960 --> 00:08:01,199
so that if the temperature in the server

00:07:59,440 --> 00:08:03,039
room was getting a bit high

00:08:01,199 --> 00:08:05,199
and the server was acting a little bit

00:08:03,039 --> 00:08:05,840
funky and responses were a little bit

00:08:05,199 --> 00:08:08,639
too long

00:08:05,840 --> 00:08:10,319
then all of that would be like okay the

00:08:08,639 --> 00:08:13,840
air conditioning has broken

00:08:10,319 --> 00:08:16,960
and let's switch to another

00:08:13,840 --> 00:08:17,520
data center and that actually they

00:08:16,960 --> 00:08:21,120
actually

00:08:17,520 --> 00:08:24,319
saved uh they actually saved them

00:08:21,120 --> 00:08:29,280
from uh getting into trouble a very hot

00:08:24,319 --> 00:08:29,280
summer day so it's

00:08:29,919 --> 00:08:33,839
there's a lot you can do to try to

00:08:33,039 --> 00:08:37,760
anticipate

00:08:33,839 --> 00:08:40,640
and handle events in in a system

00:08:37,760 --> 00:08:41,760
that also adds a bunch of complexity so

00:08:40,640 --> 00:08:44,399
it can be

00:08:41,760 --> 00:08:45,760
a little bit difficult to configure and

00:08:44,399 --> 00:08:49,440
set up

00:08:45,760 --> 00:08:51,360
but hopefully we made it as easy as it

00:08:49,440 --> 00:08:54,480
can be

00:08:51,360 --> 00:08:57,680
so when i talk about a cluster

00:08:54,480 --> 00:09:01,040
h h a cluster it's not a huge

00:08:57,680 --> 00:09:04,560
cluster usually um the the linux aj

00:09:01,040 --> 00:09:06,399
software supports up to around 32 nodes

00:09:04,560 --> 00:09:07,760
we're working on supporting more than

00:09:06,399 --> 00:09:10,640
that but

00:09:07,760 --> 00:09:11,519
it's not one of those you know 100 000

00:09:10,640 --> 00:09:14,560
machine

00:09:11,519 --> 00:09:17,680
clusters that's more high performance

00:09:14,560 --> 00:09:20,720
computing and so on

00:09:17,680 --> 00:09:23,519
in a cluster you have a bunch of nodes

00:09:20,720 --> 00:09:24,080
basically a node is a single machine it

00:09:23,519 --> 00:09:27,920
can be

00:09:24,080 --> 00:09:31,519
a physical machine or it can be a

00:09:27,920 --> 00:09:34,080
virtual machine for the aj clusters

00:09:31,519 --> 00:09:35,600
normally all of the machines would be in

00:09:34,080 --> 00:09:39,440
the same location

00:09:35,600 --> 00:09:42,080
so you would have maybe two

00:09:39,440 --> 00:09:43,920
blades in the rack or two computers next

00:09:42,080 --> 00:09:47,519
to each other

00:09:43,920 --> 00:09:49,040
and if you want redundancy over larger

00:09:47,519 --> 00:09:50,640
distances

00:09:49,040 --> 00:09:53,760
there's something called geo clustering

00:09:50,640 --> 00:09:58,240
that's kind of a layer on top

00:09:53,760 --> 00:10:01,519
that you can use where you can have

00:09:58,240 --> 00:10:02,839
one sort of one cluster in one location

00:10:01,519 --> 00:10:04,399
and then another cluster in another

00:10:02,839 --> 00:10:06,800
location and

00:10:04,399 --> 00:10:08,399
using the jio clustering software you

00:10:06,800 --> 00:10:11,920
can fail between them but

00:10:08,399 --> 00:10:11,920
the basic functionalities

00:10:12,160 --> 00:10:15,600
a small set of machines in roughly the

00:10:14,480 --> 00:10:18,160
same location with

00:10:15,600 --> 00:10:20,320
very reliable network connections

00:10:18,160 --> 00:10:23,440
between them

00:10:20,320 --> 00:10:26,079
the cluster manages resources and

00:10:23,440 --> 00:10:30,839
basically that's

00:10:26,079 --> 00:10:34,480
software it can be pretty much anything

00:10:30,839 --> 00:10:37,200
and there's a set of rules

00:10:34,480 --> 00:10:39,839
that govern how these resources are

00:10:37,200 --> 00:10:39,839
managed so

00:10:40,160 --> 00:10:44,480
when i talk about resources in the

00:10:42,480 --> 00:10:47,200
cluster there's

00:10:44,480 --> 00:10:48,240
mainly three different things that we

00:10:47,200 --> 00:10:50,959
use so

00:10:48,240 --> 00:10:51,839
first of all we have the ocf agents

00:10:50,959 --> 00:10:55,279
which is kind of

00:10:51,839 --> 00:10:58,720
custom written scripts that manage

00:10:55,279 --> 00:11:00,000
software that deal with a lot of the

00:10:58,720 --> 00:11:02,320
issues that you have

00:11:00,000 --> 00:11:03,440
in clustering so they're kind of custom

00:11:02,320 --> 00:11:06,720
written for that

00:11:03,440 --> 00:11:10,000
scenario um so

00:11:06,720 --> 00:11:11,519
i would say if if there is an ocf agent

00:11:10,000 --> 00:11:13,360
written for the application that you

00:11:11,519 --> 00:11:15,440
want to run in the cluster

00:11:13,360 --> 00:11:17,600
then you probably want to use that

00:11:15,440 --> 00:11:21,200
rather than using

00:11:17,600 --> 00:11:21,200
the systemd service unit

00:11:22,480 --> 00:11:29,040
but you can use those as well

00:11:25,920 --> 00:11:30,880
the systemd service units works pretty

00:11:29,040 --> 00:11:33,920
well in general

00:11:30,880 --> 00:11:36,640
because the way systemd is structured it

00:11:33,920 --> 00:11:37,920
automatically monitors the the services

00:11:36,640 --> 00:11:39,760
so you get

00:11:37,920 --> 00:11:42,560
at least a basic level of monitoring

00:11:39,760 --> 00:11:44,640
that hasn't crashed and so on

00:11:42,560 --> 00:11:46,480
the lsp scripts usually need a little

00:11:44,640 --> 00:11:48,480
bit of

00:11:46,480 --> 00:11:50,560
massaging to work well in the cluster

00:11:48,480 --> 00:11:52,160
environment mainly because they don't

00:11:50,560 --> 00:11:55,360
provide any kind of

00:11:52,160 --> 00:11:59,279
monitoring most of the time

00:11:55,360 --> 00:11:59,279
so that's something to keep in mind

00:12:01,680 --> 00:12:06,079
between resources in the cluster you can

00:12:03,680 --> 00:12:07,920
have constraints which are basically

00:12:06,079 --> 00:12:10,399
rules governing how

00:12:07,920 --> 00:12:11,920
the resources are started or distributed

00:12:10,399 --> 00:12:15,120
in the cluster

00:12:11,920 --> 00:12:18,320
and the basic set of constraints is

00:12:15,120 --> 00:12:19,360
co-location constraints saying that this

00:12:18,320 --> 00:12:22,079
resource

00:12:19,360 --> 00:12:23,360
should preferably be located with this

00:12:22,079 --> 00:12:25,760
other resource

00:12:23,360 --> 00:12:26,560
or has to be located with this other

00:12:25,760 --> 00:12:29,519
resource

00:12:26,560 --> 00:12:31,279
so these two things would run on the

00:12:29,519 --> 00:12:33,839
same machine

00:12:31,279 --> 00:12:35,200
or you can have negative constraints

00:12:33,839 --> 00:12:36,959
using scores

00:12:35,200 --> 00:12:38,480
so you can say that these two resources

00:12:36,959 --> 00:12:42,320
should never run on the same

00:12:38,480 --> 00:12:46,639
machine the ordering constraint

00:12:42,320 --> 00:12:50,160
says in which order

00:12:46,639 --> 00:12:52,079
resource should start or stop so

00:12:50,160 --> 00:12:53,279
i think intuitively you would think of

00:12:52,079 --> 00:12:56,560
these two as

00:12:53,279 --> 00:12:57,839
related that if resource one depends on

00:12:56,560 --> 00:13:00,240
resource two you would

00:12:57,839 --> 00:13:01,680
think okay so first we start resource

00:13:00,240 --> 00:13:03,440
one then we start resource two and they

00:13:01,680 --> 00:13:05,519
both start on the same node

00:13:03,440 --> 00:13:06,639
but uh it gives you a little bit more

00:13:05,519 --> 00:13:09,600
flexibility to

00:13:06,639 --> 00:13:10,560
think of these concepts separately so

00:13:09,600 --> 00:13:13,440
you can

00:13:10,560 --> 00:13:14,959
either decide that these two resources

00:13:13,440 --> 00:13:16,480
have to run on the same machine because

00:13:14,959 --> 00:13:19,839
they use some

00:13:16,480 --> 00:13:21,519
system resource that they both depend on

00:13:19,839 --> 00:13:22,959
or

00:13:21,519 --> 00:13:24,320
they have to start in a certain order

00:13:22,959 --> 00:13:25,600
but it doesn't really matter which

00:13:24,320 --> 00:13:29,120
machine they start on

00:13:25,600 --> 00:13:30,880
so and then the final constraint is

00:13:29,120 --> 00:13:32,720
a location constraint where you can say

00:13:30,880 --> 00:13:36,000
that this resource

00:13:32,720 --> 00:13:39,600
can only start on these certain nodes or

00:13:36,000 --> 00:13:42,240
it has to start on these nodes or

00:13:39,600 --> 00:13:43,760
it should never start on a certain node

00:13:42,240 --> 00:13:46,959
and the way you control

00:13:43,760 --> 00:13:49,519
the preference is using a score that's

00:13:46,959 --> 00:13:50,320
um basically a numeric value that

00:13:49,519 --> 00:13:52,160
doesn't have a

00:13:50,320 --> 00:13:54,880
any particular meaning in itself other

00:13:52,160 --> 00:13:55,760
than that positive or negative infinity

00:13:54,880 --> 00:13:59,600
means

00:13:55,760 --> 00:14:02,880
um it really has to

00:13:59,600 --> 00:14:05,839
apply so it's a it forces you the

00:14:02,880 --> 00:14:06,160
constraints so it's a hard constraint um

00:14:05,839 --> 00:14:09,279
the

00:14:06,160 --> 00:14:10,800
any other score kind of depends on the

00:14:09,279 --> 00:14:12,800
other scores you assign to other things

00:14:10,800 --> 00:14:14,000
so it's a relative measure so there's no

00:14:12,800 --> 00:14:17,040
generic

00:14:14,000 --> 00:14:17,839
way of stating that and then you can

00:14:17,040 --> 00:14:20,160
also

00:14:17,839 --> 00:14:22,160
to complicate things have something

00:14:20,160 --> 00:14:25,040
called rule expressions

00:14:22,160 --> 00:14:25,040
which are basically

00:14:25,519 --> 00:14:29,360
saying when a certain rule applies so it

00:14:28,480 --> 00:14:32,959
can be

00:14:29,360 --> 00:14:35,760
that a certain rule only applies

00:14:32,959 --> 00:14:36,560
on the givens of the nodes or it only

00:14:35,760 --> 00:14:39,680
applies

00:14:36,560 --> 00:14:42,959
a certain times a day so you can have

00:14:39,680 --> 00:14:46,000
different rules for

00:14:42,959 --> 00:14:48,240
the the peak hours or different rules

00:14:46,000 --> 00:14:49,360
for winter compared to summer or

00:14:48,240 --> 00:14:53,519
whatever you want to do

00:14:49,360 --> 00:14:53,519
so it's it's a very flexible system

00:14:53,920 --> 00:15:01,519
and if you want to know more about

00:14:57,519 --> 00:15:04,720
aha and the cluster software in general

00:15:01,519 --> 00:15:07,519
you can go to clusterlabs.org

00:15:04,720 --> 00:15:09,040
it's the general website for the whole

00:15:07,519 --> 00:15:11,839
project

00:15:09,040 --> 00:15:13,600
shared by all the individual pieces i

00:15:11,839 --> 00:15:17,440
haven't really talked about

00:15:13,600 --> 00:15:20,480
what those pieces are or a lot of

00:15:17,440 --> 00:15:20,480
the things that they do but

00:15:20,720 --> 00:15:23,760
in short if you want to try this out you

00:15:22,480 --> 00:15:27,279
can do it on opensuse

00:15:23,760 --> 00:15:30,320
by installing aha cluster bootstrap

00:15:27,279 --> 00:15:31,040
and running hr cluster in it on a on a

00:15:30,320 --> 00:15:33,440
fresh

00:15:31,040 --> 00:15:35,279
uh opensuse machine and you will have a

00:15:33,440 --> 00:15:37,279
basic onenote cluster that you can play

00:15:35,279 --> 00:15:40,959
with

00:15:37,279 --> 00:15:43,519
and that's it for my introduction to

00:15:40,959 --> 00:15:44,399
clustering and if you want to know more

00:15:43,519 --> 00:15:45,920
you better

00:15:44,399 --> 00:15:47,920
the best thing you can do is travel back

00:15:45,920 --> 00:15:50,000
in time to yesterday because

00:15:47,920 --> 00:15:52,160
richard delivered a talk talking about

00:15:50,000 --> 00:15:55,040
exactly this in more detail

00:15:52,160 --> 00:15:56,079
so that maybe there may be a time

00:15:55,040 --> 00:16:00,320
machine on the internet

00:15:56,079 --> 00:16:04,959
that you can use to to see that

00:16:00,320 --> 00:16:04,959
yeah all right so

00:16:05,120 --> 00:16:11,680
so hawk is basically a user interface

00:16:08,480 --> 00:16:15,600
for the cluster software it's a

00:16:11,680 --> 00:16:19,600
web ui written in ruby on rails

00:16:15,600 --> 00:16:21,839
it runs on the cluster nodes themselves

00:16:19,600 --> 00:16:22,639
so it's installed as a package on the

00:16:21,839 --> 00:16:25,519
cluster nodes

00:16:22,639 --> 00:16:26,000
and you access it by accessing a certain

00:16:25,519 --> 00:16:29,199
port

00:16:26,000 --> 00:16:32,560
on the cluster node

00:16:29,199 --> 00:16:34,240
it provides a dashboard or status view

00:16:32,560 --> 00:16:37,360
that you can use

00:16:34,240 --> 00:16:40,240
kind of as a you know

00:16:37,360 --> 00:16:41,440
run it on a monitor in your in your

00:16:40,240 --> 00:16:44,079
admin room and

00:16:41,440 --> 00:16:45,680
see if everything is going well but it

00:16:44,079 --> 00:16:48,240
can also be used to configure

00:16:45,680 --> 00:16:48,800
clusters and administrate clusters so

00:16:48,240 --> 00:16:50,320
you can

00:16:48,800 --> 00:16:52,480
basically set up a complete cluster

00:16:50,320 --> 00:16:56,320
using just the web interface

00:16:52,480 --> 00:16:57,360
um the source code and the development

00:16:56,320 --> 00:17:00,399
happens

00:16:57,360 --> 00:17:01,360
at this url on github under the cluster

00:17:00,399 --> 00:17:03,600
labs banner

00:17:01,360 --> 00:17:04,959
and uh yeah contributors are more than

00:17:03,600 --> 00:17:08,400
welcome

00:17:04,959 --> 00:17:12,000
yeah so i didn't write

00:17:08,400 --> 00:17:15,679
hawk originally um the author of hawk

00:17:12,000 --> 00:17:19,679
looks like this that's tim

00:17:15,679 --> 00:17:23,120
he lives in tasmania he's also a

00:17:19,679 --> 00:17:25,919
pig farmer so

00:17:23,120 --> 00:17:26,799
he's he's busy and right now he looks

00:17:25,919 --> 00:17:29,760
like this

00:17:26,799 --> 00:17:30,640
because he's working on storage and

00:17:29,760 --> 00:17:33,840
stuff

00:17:30,640 --> 00:17:35,039
so while he's doing that i'm i'm taking

00:17:33,840 --> 00:17:39,200
over hawk

00:17:35,039 --> 00:17:42,880
and um basically we're gonna

00:17:39,200 --> 00:17:42,880
redo it completely so

00:17:44,160 --> 00:17:50,400
so you just give you a taste of uh where

00:17:47,280 --> 00:17:52,960
where hawk is going i'm gonna show you

00:17:50,400 --> 00:17:53,919
the dashboard view what it looks like

00:17:52,960 --> 00:17:55,760
today and

00:17:53,919 --> 00:17:57,440
what it's going to look like or what the

00:17:55,760 --> 00:18:01,280
development version looks like

00:17:57,440 --> 00:18:03,280
right now so this

00:18:01,280 --> 00:18:05,679
is kind of the first view you see of

00:18:03,280 --> 00:18:08,559
hawk when you start

00:18:05,679 --> 00:18:10,400
so you can see i don't know if you can

00:18:08,559 --> 00:18:13,520
read the text but

00:18:10,400 --> 00:18:16,320
we have four nodes

00:18:13,520 --> 00:18:17,760
running two groups of resources

00:18:16,320 --> 00:18:20,000
distributed

00:18:17,760 --> 00:18:21,200
by different rules everything is green

00:18:20,000 --> 00:18:24,320
so that's good

00:18:21,200 --> 00:18:25,120
there's no warnings it's not the most

00:18:24,320 --> 00:18:28,080
beautiful

00:18:25,120 --> 00:18:29,440
interface in the world it's a little bit

00:18:28,080 --> 00:18:32,160
outdated

00:18:29,440 --> 00:18:34,240
but it works it's uh it works really

00:18:32,160 --> 00:18:37,600
well

00:18:34,240 --> 00:18:40,240
there's also the multi-cluster dashboard

00:18:37,600 --> 00:18:43,039
which shows you the state of multiple

00:18:40,240 --> 00:18:45,120
clusters so you can connect

00:18:43,039 --> 00:18:46,640
in the geo cluster scenario or just if

00:18:45,120 --> 00:18:48,240
you have multiple clusters but they're

00:18:46,640 --> 00:18:48,799
totally unrelated but you want to

00:18:48,240 --> 00:18:52,240
monitor

00:18:48,799 --> 00:18:54,720
all of them from a single point

00:18:52,240 --> 00:18:55,600
you can use the multi-cluster dashboard

00:18:54,720 --> 00:18:58,960
to

00:18:55,600 --> 00:19:02,080
see the status of all your clusters and

00:18:58,960 --> 00:19:03,679
see if anything's going on on any of

00:19:02,080 --> 00:19:06,400
them

00:19:03,679 --> 00:19:07,440
so yeah so this this is basically what

00:19:06,400 --> 00:19:09,039
it looks like today

00:19:07,440 --> 00:19:11,919
and this is the version that's in

00:19:09,039 --> 00:19:16,240
opensuse 13.2

00:19:11,919 --> 00:19:19,280
and also in sli so

00:19:16,240 --> 00:19:21,440
this is kind of the mock-up of what it's

00:19:19,280 --> 00:19:24,640
going to be

00:19:21,440 --> 00:19:26,960
it's still in development it's not

00:19:24,640 --> 00:19:29,520
finished i think the most important

00:19:26,960 --> 00:19:32,160
feature is that we now have a happy face

00:19:29,520 --> 00:19:33,679
that shows you that everything is good

00:19:32,160 --> 00:19:38,160
so

00:19:33,679 --> 00:19:40,400
as long as you see the happy face then

00:19:38,160 --> 00:19:40,400
sorry

00:19:42,080 --> 00:19:45,520
uh yeah we're that's the just a big

00:19:44,960 --> 00:19:48,880
debate

00:19:45,520 --> 00:19:53,440
right now is what kind of face to

00:19:48,880 --> 00:19:57,280
show when things are going wrong

00:19:53,440 --> 00:20:00,799
no no there's no api um that's something

00:19:57,280 --> 00:20:02,799
i would like to have yeah

00:20:00,799 --> 00:20:04,080
i'm thinking about how to do that the

00:20:02,799 --> 00:20:07,919
best way

00:20:04,080 --> 00:20:09,919
but uh right now it's it's very focused

00:20:07,919 --> 00:20:13,200
on just being the user interface

00:20:09,919 --> 00:20:14,720
uh and we haven't really in the

00:20:13,200 --> 00:20:16,559
yeah in the previous version there's no

00:20:14,720 --> 00:20:20,960
api you can use uh

00:20:16,559 --> 00:20:22,799
in the next version maybe we'll see

00:20:20,960 --> 00:20:24,240
yeah but that's good if you if you have

00:20:22,799 --> 00:20:35,840
a use case for it

00:20:24,240 --> 00:20:35,840
like this is what i would use it for

00:20:39,200 --> 00:20:46,159
yeah yeah that's great um yeah

00:20:43,840 --> 00:20:47,280
i have nothing against that we just have

00:20:46,159 --> 00:20:49,520
to see

00:20:47,280 --> 00:20:50,320
how much work it would be if if i can

00:20:49,520 --> 00:20:52,880
finish it in

00:20:50,320 --> 00:20:54,080
a reasonable amount of time but uh yeah

00:20:52,880 --> 00:20:58,240
i i

00:20:54,080 --> 00:20:59,919
i too prefer to have a cleaner

00:20:58,240 --> 00:21:02,080
api to work against in the user

00:20:59,919 --> 00:21:03,120
interface so i think that's a it's

00:21:02,080 --> 00:21:04,159
definitely something that's going to

00:21:03,120 --> 00:21:06,159
happen

00:21:04,159 --> 00:21:07,360
i don't have a date when it's going to

00:21:06,159 --> 00:21:11,039
be

00:21:07,360 --> 00:21:11,039
going to be done but yeah

00:21:11,760 --> 00:21:15,280
so you can also use hawk to configure

00:21:14,480 --> 00:21:17,679
resources

00:21:15,280 --> 00:21:18,400
i'm just going to show like a little

00:21:17,679 --> 00:21:22,640
example

00:21:18,400 --> 00:21:25,600
of creating a order constraint

00:21:22,640 --> 00:21:27,760
and this is also kind of a mock-up of

00:21:25,600 --> 00:21:30,080
the new interface

00:21:27,760 --> 00:21:32,159
but it looks something like this you

00:21:30,080 --> 00:21:34,080
would you know select the resources you

00:21:32,159 --> 00:21:37,760
want you can add

00:21:34,080 --> 00:21:40,080
um options and and

00:21:37,760 --> 00:21:41,760
any kind of rule expressions that you

00:21:40,080 --> 00:21:45,360
want on top of that

00:21:41,760 --> 00:21:48,960
um there is also something we call

00:21:45,360 --> 00:21:52,240
wizards or configuration scripts

00:21:48,960 --> 00:21:55,600
which gives you

00:21:52,240 --> 00:21:57,520
a ready-made scenario that you can use

00:21:55,600 --> 00:21:59,679
to configure the cluster

00:21:57,520 --> 00:22:01,520
so basically the idea is that you

00:21:59,679 --> 00:22:03,760
install the cluster software

00:22:01,520 --> 00:22:04,960
and you immediately go to the web

00:22:03,760 --> 00:22:08,159
interface and

00:22:04,960 --> 00:22:11,440
you pick one of these and you get a

00:22:08,159 --> 00:22:14,400
basic configuration

00:22:11,440 --> 00:22:15,520
at the moment in the old version and the

00:22:14,400 --> 00:22:18,640
way it's

00:22:15,520 --> 00:22:22,080
structured right now the wizards only

00:22:18,640 --> 00:22:23,919
perform the cluster setup so it's not a

00:22:22,080 --> 00:22:25,840
configuration management solution it

00:22:23,919 --> 00:22:28,000
doesn't actually configure the nodes for

00:22:25,840 --> 00:22:31,760
you or install packages and

00:22:28,000 --> 00:22:34,400
and so on so if you want to set up a

00:22:31,760 --> 00:22:37,039
sql database you basically have to

00:22:34,400 --> 00:22:39,760
configure the sql database beforehand

00:22:37,039 --> 00:22:40,880
and then bring it into the cluster using

00:22:39,760 --> 00:22:43,679
the wizard

00:22:40,880 --> 00:22:45,760
um this is something that i'm working on

00:22:43,679 --> 00:22:49,120
improving we already have

00:22:45,760 --> 00:22:52,799
the back end for for this and we have

00:22:49,120 --> 00:22:53,760
an experimental wizard so to speak which

00:22:52,799 --> 00:22:56,880
is the

00:22:53,760 --> 00:22:57,840
nfs server wizard so the nfs server

00:22:56,880 --> 00:23:01,360
wizard

00:22:57,840 --> 00:23:04,720
can actually configure the nfs

00:23:01,360 --> 00:23:05,679
setup for you and and the mount points

00:23:04,720 --> 00:23:08,240
and so on

00:23:05,679 --> 00:23:08,240
and so

00:23:21,600 --> 00:23:29,840
no i started out using ansible

00:23:25,120 --> 00:23:34,480
uh but ansible basically sshs as well

00:23:29,840 --> 00:23:34,480
so yeah i might go back to that

00:23:34,840 --> 00:23:37,840
yep

00:23:39,280 --> 00:23:46,720
yeah yeah so the question is

00:23:43,200 --> 00:23:48,720
if we have if i'm using uh ansible or

00:23:46,720 --> 00:23:50,000
a chef or a puppet or something like

00:23:48,720 --> 00:23:54,480
this in the back end

00:23:50,000 --> 00:23:57,520
and the answer is no it's it's

00:23:54,480 --> 00:24:00,640
it's basically ssh into all the machines

00:23:57,520 --> 00:24:05,360
and running the script

00:24:00,640 --> 00:24:09,200
directly but um yeah

00:24:05,360 --> 00:24:13,120
i i didn't want to use chef or puppet or

00:24:09,200 --> 00:24:14,720
one of these because i didn't want to

00:24:13,120 --> 00:24:17,360
interfere too much with the system

00:24:14,720 --> 00:24:20,799
administration of the cluster nodes

00:24:17,360 --> 00:24:23,039
directly so i mean these are the idea is

00:24:20,799 --> 00:24:24,720
that this is something that runs on

00:24:23,039 --> 00:24:26,320
machines that are important that you

00:24:24,720 --> 00:24:28,559
have a system administrator that cares a

00:24:26,320 --> 00:24:30,720
lot about the software that runs there

00:24:28,559 --> 00:24:32,320
and that system administrator probably

00:24:30,720 --> 00:24:34,000
has some preference for the

00:24:32,320 --> 00:24:37,279
configuration management

00:24:34,000 --> 00:24:38,640
setup that they want to use so i would

00:24:37,279 --> 00:24:42,000
rather not

00:24:38,640 --> 00:24:45,679
restrict that in any way it's

00:24:42,000 --> 00:24:49,200
yeah in the same way hawk doesn't use

00:24:45,679 --> 00:24:52,640
apache or something like this to

00:24:49,200 --> 00:24:54,400
as a web server because i don't want to

00:24:52,640 --> 00:24:58,480
risk interfering with someone actually

00:24:54,400 --> 00:24:58,480
running apache as a cluster resource

00:24:58,840 --> 00:25:03,679
so

00:25:00,320 --> 00:25:04,880
yeah the next uh nice feature that you

00:25:03,679 --> 00:25:07,919
get in hawk is the

00:25:04,880 --> 00:25:09,279
simulator um this may be the most

00:25:07,919 --> 00:25:12,880
beautiful part of the

00:25:09,279 --> 00:25:16,640
old interface it looks like this with a

00:25:12,880 --> 00:25:18,559
lovely yellow background um

00:25:16,640 --> 00:25:20,080
but it is actually a really cool feature

00:25:18,559 --> 00:25:23,200
so what it gives you

00:25:20,080 --> 00:25:24,080
is a way to see what will happen if

00:25:23,200 --> 00:25:27,200
something

00:25:24,080 --> 00:25:29,360
happened in the cluster very visually

00:25:27,200 --> 00:25:31,360
so you can after configuring your

00:25:29,360 --> 00:25:33,360
resources you can actually

00:25:31,360 --> 00:25:34,720
run a bunch of scenarios in the

00:25:33,360 --> 00:25:38,000
simulator

00:25:34,720 --> 00:25:40,400
and get a sense of if

00:25:38,000 --> 00:25:42,000
the constraints that you set actually

00:25:40,400 --> 00:25:44,799
are the constraints that you want

00:25:42,000 --> 00:25:46,080
so you can see the interpretation of the

00:25:44,799 --> 00:25:47,520
cluster software

00:25:46,080 --> 00:25:49,360
of these constraints so you can see if

00:25:47,520 --> 00:25:51,200
there's any weird interaction between

00:25:49,360 --> 00:25:52,480
different rules or anything you hadn't

00:25:51,200 --> 00:25:56,000
anticipated

00:25:52,480 --> 00:25:59,039
so as an example here you can see

00:25:56,000 --> 00:26:00,159
we have two nodes and on one of the

00:25:59,039 --> 00:26:02,320
nodes we have

00:26:00,159 --> 00:26:03,279
three resources which is basically a web

00:26:02,320 --> 00:26:06,880
server and a

00:26:03,279 --> 00:26:08,320
virtual ip running on that node

00:26:06,880 --> 00:26:10,240
and what i'm gonna do is i'm gonna

00:26:08,320 --> 00:26:12,960
inject inject

00:26:10,240 --> 00:26:13,600
a state change which is saying that that

00:26:12,960 --> 00:26:17,200
node

00:26:13,600 --> 00:26:20,240
goes offline and then

00:26:17,200 --> 00:26:24,080
if i run that simulation you can see

00:26:20,240 --> 00:26:27,679
that the web server resources have moved

00:26:24,080 --> 00:26:29,600
to the other node and

00:26:27,679 --> 00:26:31,840
the fencing resource which is something

00:26:29,600 --> 00:26:33,520
i didn't mention in the aha

00:26:31,840 --> 00:26:34,960
intro but fencing is basically a

00:26:33,520 --> 00:26:38,159
mechanism for

00:26:34,960 --> 00:26:41,919
ensuring that a node that is misbehaving

00:26:38,159 --> 00:26:44,240
is is actually properly dead

00:26:41,919 --> 00:26:45,679
and not is not gonna come back and start

00:26:44,240 --> 00:26:49,200
running resources

00:26:45,679 --> 00:26:51,360
on its own um uh

00:26:49,200 --> 00:26:53,039
like interfering with the shared disc or

00:26:51,360 --> 00:26:55,520
something like that so

00:26:53,039 --> 00:26:56,799
so the fencing mechanism doesn't have to

00:26:55,520 --> 00:26:59,520
fail over so it does

00:26:56,799 --> 00:27:00,320
that one is stopped but the other

00:26:59,520 --> 00:27:03,039
resources

00:27:00,320 --> 00:27:04,159
are moved to the first node and you can

00:27:03,039 --> 00:27:08,720
also get

00:27:04,159 --> 00:27:11,440
even more details um on exactly

00:27:08,720 --> 00:27:12,320
what the decision was like which rules

00:27:11,440 --> 00:27:16,320
applied and

00:27:12,320 --> 00:27:20,000
so on using the links

00:27:16,320 --> 00:27:21,200
to the cib and the graph so the cib is

00:27:20,000 --> 00:27:25,440
basically

00:27:21,200 --> 00:27:27,840
a xml document that describes

00:27:25,440 --> 00:27:29,679
the configuration and state of the

00:27:27,840 --> 00:27:32,640
cluster

00:27:29,679 --> 00:27:35,840
so hawk will give you a friendlier

00:27:32,640 --> 00:27:37,760
interface than just plain xml but

00:27:35,840 --> 00:27:38,960
you can look at the cluster

00:27:37,760 --> 00:27:41,600
configuration

00:27:38,960 --> 00:27:43,600
before and after the transition to see

00:27:41,600 --> 00:27:45,520
what happened

00:27:43,600 --> 00:27:47,679
so yeah i think this is a really cool

00:27:45,520 --> 00:27:50,480
feature

00:27:47,679 --> 00:27:50,880
so something that's kind of related to

00:27:50,480 --> 00:27:55,200
this

00:27:50,880 --> 00:27:56,799
is the history explorer so

00:27:55,200 --> 00:27:58,240
one of the problems with cluster

00:27:56,799 --> 00:28:01,840
software is

00:27:58,240 --> 00:28:03,440
that the whole idea is that it's

00:28:01,840 --> 00:28:04,480
supposed to take care of things where

00:28:03,440 --> 00:28:07,679
you're not looking

00:28:04,480 --> 00:28:10,640
so you can leave machines running and

00:28:07,679 --> 00:28:14,000
if something suddenly happens hopefully

00:28:10,640 --> 00:28:17,440
the cluster software will deal with it

00:28:14,000 --> 00:28:20,640
and your thing will keep going

00:28:17,440 --> 00:28:22,080
um but you you

00:28:20,640 --> 00:28:23,840
still want to know that something

00:28:22,080 --> 00:28:24,559
happened and you want to find out what

00:28:23,840 --> 00:28:26,960
happened

00:28:24,559 --> 00:28:29,200
uh i mean if if you have a two node

00:28:26,960 --> 00:28:30,880
cluster and one node dies

00:28:29,200 --> 00:28:32,880
you're basically running without a

00:28:30,880 --> 00:28:33,840
backup and without high availability at

00:28:32,880 --> 00:28:35,520
that point

00:28:33,840 --> 00:28:37,039
so you don't want the cluster to just

00:28:35,520 --> 00:28:38,720
totally mask it and

00:28:37,039 --> 00:28:40,480
just pretend that everything's fine you

00:28:38,720 --> 00:28:42,559
want to be able to figure out exactly

00:28:40,480 --> 00:28:45,840
what went wrong when it went wrong

00:28:42,559 --> 00:28:47,760
and see what all of the state

00:28:45,840 --> 00:28:49,360
of all the nodes was and this is what

00:28:47,760 --> 00:28:52,000
the history explorer

00:28:49,360 --> 00:28:52,000
helps you do

00:28:52,559 --> 00:28:58,000
so to demonstrate this i have a

00:28:55,760 --> 00:28:59,440
basic cluster configuration where i'm

00:28:58,000 --> 00:29:01,919
running

00:28:59,440 --> 00:29:02,960
hi proxy which is a load balancer on

00:29:01,919 --> 00:29:06,399
onenote

00:29:02,960 --> 00:29:07,600
and then i'm running web servers on two

00:29:06,399 --> 00:29:10,240
other nodes

00:29:07,600 --> 00:29:13,200
and the two web servers are constrained

00:29:10,240 --> 00:29:16,960
to never run on the same machine

00:29:13,200 --> 00:29:18,399
and the proxy server prefers to run on

00:29:16,960 --> 00:29:21,039
the first node so

00:29:18,399 --> 00:29:22,000
by default the cluster software will try

00:29:21,039 --> 00:29:25,440
to spread

00:29:22,000 --> 00:29:26,799
resources evenly across the cluster to

00:29:25,440 --> 00:29:29,919
load balance

00:29:26,799 --> 00:29:32,960
so in a three node cluster this

00:29:29,919 --> 00:29:34,720
usually ends up meaning that uh h a

00:29:32,960 --> 00:29:36,559
proxy runs on the first node

00:29:34,720 --> 00:29:38,320
uh one certain web server runs on the

00:29:36,559 --> 00:29:40,240
second node and the final web server

00:29:38,320 --> 00:29:42,640
runs on the third node

00:29:40,240 --> 00:29:43,440
if one machine goes down one of the web

00:29:42,640 --> 00:29:45,760
servers

00:29:43,440 --> 00:29:47,760
will move to the proxy node or the proxy

00:29:45,760 --> 00:29:50,080
will move to one of the web server nodes

00:29:47,760 --> 00:29:52,000
and if another machine goes down only

00:29:50,080 --> 00:29:53,440
one web server will be running and

00:29:52,000 --> 00:29:55,039
the same node will run the proxy and

00:29:53,440 --> 00:29:57,600
that web server so

00:29:55,039 --> 00:29:58,960
it it handles failure down to from three

00:29:57,600 --> 00:30:02,159
to one node

00:29:58,960 --> 00:30:06,000
and hopefully

00:30:02,159 --> 00:30:09,120
so what will happen if i do this

00:30:06,000 --> 00:30:11,200
this is just a demonstration um but

00:30:09,120 --> 00:30:13,039
basically what i do is i kill the proxy

00:30:11,200 --> 00:30:16,399
and i'm gonna see

00:30:13,039 --> 00:30:19,360
what happens what can i see in the logs

00:30:16,399 --> 00:30:19,360
about this and

00:30:19,760 --> 00:30:23,440
if you don't use the history explorer

00:30:21,919 --> 00:30:26,880
just figuring out

00:30:23,440 --> 00:30:29,520
when it happened can be

00:30:26,880 --> 00:30:31,679
difficult enough but then also figuring

00:30:29,520 --> 00:30:33,520
out which node was the resource running

00:30:31,679 --> 00:30:36,480
on

00:30:33,520 --> 00:30:38,159
what was the failure which logs are

00:30:36,480 --> 00:30:40,880
relevant to that particular

00:30:38,159 --> 00:30:41,440
transition and so on all of that can be

00:30:40,880 --> 00:30:43,760
kind of

00:30:41,440 --> 00:30:45,520
tricky and the cluster software logs

00:30:43,760 --> 00:30:47,919
quite a lot of information

00:30:45,520 --> 00:30:48,840
and you have to look through it to find

00:30:47,919 --> 00:30:51,440
the relevant

00:30:48,840 --> 00:30:53,360
information and with the history

00:30:51,440 --> 00:30:55,760
explorer this gets really easy and

00:30:53,360 --> 00:30:57,120
something you can do almost immediately

00:30:55,760 --> 00:31:00,240
as a failure

00:30:57,120 --> 00:31:04,399
occurs and so yeah

00:31:00,240 --> 00:31:05,279
let's let's have a look so here is my

00:31:04,399 --> 00:31:08,159
test setup

00:31:05,279 --> 00:31:08,159
as i describe it

00:31:08,799 --> 00:31:12,399
the first thing that happens is that you

00:31:10,559 --> 00:31:15,519
get a little yellow bar

00:31:12,399 --> 00:31:18,159
saying that something is happening and

00:31:15,519 --> 00:31:18,720
the cluster is figuring out what to do

00:31:18,159 --> 00:31:22,720
about it

00:31:18,720 --> 00:31:26,159
and how to do it how to recover

00:31:22,720 --> 00:31:26,159
to a good state

00:31:27,039 --> 00:31:31,039
once that happened everything goes back

00:31:29,039 --> 00:31:33,039
to being green

00:31:31,039 --> 00:31:34,720
so this is maybe one of the weaknesses

00:31:33,039 --> 00:31:36,880
with the old interface that

00:31:34,720 --> 00:31:38,399
i would like to fix with the new one

00:31:36,880 --> 00:31:40,559
because the old interface

00:31:38,399 --> 00:31:42,000
all it does is it puts a little triangle

00:31:40,559 --> 00:31:42,720
next to the resource that has failed

00:31:42,000 --> 00:31:44,320
over

00:31:42,720 --> 00:31:46,320
and if you're not looking carefully you

00:31:44,320 --> 00:31:49,840
may not see that

00:31:46,320 --> 00:31:50,399
but the idea is that everything is

00:31:49,840 --> 00:31:53,440
running

00:31:50,399 --> 00:31:54,640
well you know there was a problem but

00:31:53,440 --> 00:31:56,000
it's been dealt with

00:31:54,640 --> 00:31:57,519
but you can see that something has

00:31:56,000 --> 00:31:57,919
happened there's been an event and you

00:31:57,519 --> 00:32:01,600
can look

00:31:57,919 --> 00:32:03,200
more closely at it so in this case we

00:32:01,600 --> 00:32:07,679
can

00:32:03,200 --> 00:32:10,799
click on that resource and view details

00:32:07,679 --> 00:32:11,919
and we get this screen which may be a

00:32:10,799 --> 00:32:15,840
little bit difficult to

00:32:11,919 --> 00:32:15,840
see yeah

00:32:30,320 --> 00:32:34,399
yeah so the question is uh well the

00:32:33,519 --> 00:32:37,440
comment is

00:32:34,399 --> 00:32:40,000
uh maybe you could color code it and

00:32:37,440 --> 00:32:40,880
uh yeah so in the new interface what i

00:32:40,000 --> 00:32:42,720
would like to do is

00:32:40,880 --> 00:32:44,159
the smiley face basically means that

00:32:42,720 --> 00:32:45,200
everything is good and everything has

00:32:44,159 --> 00:32:47,760
always been good and

00:32:45,200 --> 00:32:48,480
you know there's nothing weird ever

00:32:47,760 --> 00:32:52,159
happen

00:32:48,480 --> 00:32:52,960
and if uh any resources any point had a

00:32:52,159 --> 00:32:54,880
failure

00:32:52,960 --> 00:32:56,320
then you wouldn't get that green happy

00:32:54,880 --> 00:32:58,720
face you get

00:32:56,320 --> 00:33:00,399
a little bit more cautious maybe yellow

00:32:58,720 --> 00:33:02,799
maybe orange

00:33:00,399 --> 00:33:04,320
depending on your style series and also

00:33:02,799 --> 00:33:07,200
you will get the

00:33:04,320 --> 00:33:07,919
the flash at the top of the interface

00:33:07,200 --> 00:33:10,320
saying

00:33:07,919 --> 00:33:11,679
more details that this is the failure

00:33:10,320 --> 00:33:15,039
that has occurred

00:33:11,679 --> 00:33:16,799
so the idea is to make it more obvious

00:33:15,039 --> 00:33:20,000
that something has happened

00:33:16,799 --> 00:33:22,159
even if everything is running right now

00:33:20,000 --> 00:33:24,240
so yeah i don't know if you can read

00:33:22,159 --> 00:33:25,919
exactly what this says but

00:33:24,240 --> 00:33:28,240
it basically says that there's been one

00:33:25,919 --> 00:33:32,240
failure it shows you

00:33:28,240 --> 00:33:34,080
the state of the failure counts or

00:33:32,240 --> 00:33:36,399
what's happened on each node so you can

00:33:34,080 --> 00:33:40,240
see that the failure occurred

00:33:36,399 --> 00:33:43,039
on node 1 and you can also see

00:33:40,240 --> 00:33:44,240
the actions that the cluster took on

00:33:43,039 --> 00:33:48,080
each node

00:33:44,240 --> 00:33:48,720
so you can see that the cluster on node

00:33:48,080 --> 00:33:51,200
00:33:48,720 --> 00:33:52,960
had a monitor call which failed with

00:33:51,200 --> 00:33:55,919
return code 7.

00:33:52,960 --> 00:33:57,200
so at that point you would have to look

00:33:55,919 --> 00:34:00,640
at the resource agent

00:33:57,200 --> 00:34:05,279
to see exactly what that meant or

00:34:00,640 --> 00:34:08,320
look in the logs but then

00:34:05,279 --> 00:34:10,000
it runs the start command to restart the

00:34:08,320 --> 00:34:12,320
resource on the same node

00:34:10,000 --> 00:34:13,760
and then when it monitored the resource

00:34:12,320 --> 00:34:16,159
again everything is fine

00:34:13,760 --> 00:34:18,879
so at this point everything is good and

00:34:16,159 --> 00:34:21,280
you can also see that it's also

00:34:18,879 --> 00:34:22,480
monitored all the other nodes for this

00:34:21,280 --> 00:34:25,839
resource

00:34:22,480 --> 00:34:27,919
this is to make sure that uh the reason

00:34:25,839 --> 00:34:29,839
the resource failed on the first node

00:34:27,919 --> 00:34:31,520
wasn't that it was actually running on

00:34:29,839 --> 00:34:32,639
some other node even though the cluster

00:34:31,520 --> 00:34:36,159
hadn't

00:34:32,639 --> 00:34:39,200
told it to so um

00:34:36,159 --> 00:34:42,399
in a way the cluster software is like uh

00:34:39,200 --> 00:34:43,440
an extra sysadmin um you know it's it's

00:34:42,399 --> 00:34:45,520
keeping track of

00:34:43,440 --> 00:34:48,000
what's running on the machine and taking

00:34:45,520 --> 00:34:51,119
action if something changes

00:34:48,000 --> 00:34:53,919
if if an actual sysadmin shows up

00:34:51,119 --> 00:34:54,399
and starts changing things that can

00:34:53,919 --> 00:34:56,960
really

00:34:54,399 --> 00:34:57,839
cause problems and that's actually maybe

00:34:56,960 --> 00:35:00,800
one of the

00:34:57,839 --> 00:35:02,000
main areas of why things go wrong is

00:35:00,800 --> 00:35:04,720
that someone

00:35:02,000 --> 00:35:07,680
accidentally restarts a resource or

00:35:04,720 --> 00:35:10,000
stops a resource and

00:35:07,680 --> 00:35:11,839
and in this way we can see that the

00:35:10,000 --> 00:35:14,800
cluster can actually report that oh

00:35:11,839 --> 00:35:16,000
actually the resource failed on node 1

00:35:14,800 --> 00:35:18,560
because it was running on

00:35:16,000 --> 00:35:18,560
node two

00:35:20,480 --> 00:35:26,320
you can also see the actions

00:35:23,760 --> 00:35:28,640
as quoted from the log file so this is

00:35:26,320 --> 00:35:31,359
actually taken directly from the logs

00:35:28,640 --> 00:35:33,760
on node 1 showing the actions that were

00:35:31,359 --> 00:35:33,760
taken

00:35:35,359 --> 00:35:39,680
once you've determined that okay i've

00:35:38,240 --> 00:35:41,520
seen the error

00:35:39,680 --> 00:35:42,720
and you want to get rid of the little

00:35:41,520 --> 00:35:44,240
triangle

00:35:42,720 --> 00:35:46,400
or you want to get back to the green

00:35:44,240 --> 00:35:47,760
happy face you would

00:35:46,400 --> 00:35:50,160
clean up the resource and you will

00:35:47,760 --> 00:35:52,880
forget about the previous failure so

00:35:50,160 --> 00:35:53,520
this is you know once you've decided

00:35:52,880 --> 00:35:56,640
that okay

00:35:53,520 --> 00:35:58,079
everything is okay now i want to

00:35:56,640 --> 00:36:00,640
go back to green so i can see when it

00:35:58,079 --> 00:36:03,359
turns yellow again the next time

00:36:00,640 --> 00:36:03,359
you run this

00:36:04,560 --> 00:36:09,119
so this is the history explorer

00:36:07,839 --> 00:36:11,119
interface

00:36:09,119 --> 00:36:13,200
so there's basically two ways of using

00:36:11,119 --> 00:36:16,160
this either you give it a

00:36:13,200 --> 00:36:17,680
time span over which you want to examine

00:36:16,160 --> 00:36:19,920
the cluster

00:36:17,680 --> 00:36:20,720
events so you'd say what happened in the

00:36:19,920 --> 00:36:24,720
cluster

00:36:20,720 --> 00:36:28,000
from this time to this other time

00:36:24,720 --> 00:36:29,520
and by default hawke defaults to showing

00:36:28,000 --> 00:36:32,880
you what happened during the last

00:36:29,520 --> 00:36:35,599
24 hours um i think

00:36:32,880 --> 00:36:36,880
that's maybe a little bit too much uh as

00:36:35,599 --> 00:36:38,560
a default because it

00:36:36,880 --> 00:36:40,800
actually has to go through all the logs

00:36:38,560 --> 00:36:41,359
for all those 24 hours so it takes a

00:36:40,800 --> 00:36:44,880
little bit

00:36:41,359 --> 00:36:46,960
more time and usually

00:36:44,880 --> 00:36:48,160
or hopefully you would discover

00:36:46,960 --> 00:36:50,000
something went wrong

00:36:48,160 --> 00:36:51,920
maybe within the hour or maybe a few

00:36:50,000 --> 00:36:53,680
hours so

00:36:51,920 --> 00:36:55,119
we'll see maybe i'll change that but you

00:36:53,680 --> 00:36:58,480
can also

00:36:55,119 --> 00:37:01,680
save the state of a cluster

00:36:58,480 --> 00:37:03,280
over a certain time period as a tarball

00:37:01,680 --> 00:37:05,119
which is something that we use when

00:37:03,280 --> 00:37:08,160
developing and

00:37:05,119 --> 00:37:09,839
qa uses to give us more information on

00:37:08,160 --> 00:37:11,440
you know if something happened what

00:37:09,839 --> 00:37:23,839
happened we can collect that and send it

00:37:11,440 --> 00:37:23,839
to me and i can look at it yes

00:37:34,240 --> 00:37:37,760
yeah yeah so the the suggestion is to

00:37:36,400 --> 00:37:40,400
show a dropbox

00:37:37,760 --> 00:37:41,280
uh giving you choices like uh the last

00:37:40,400 --> 00:37:44,400
24 hours

00:37:41,280 --> 00:37:46,079
or one hour and so on and yeah yeah i'm

00:37:44,400 --> 00:37:49,119
definitely going to add that

00:37:46,079 --> 00:37:52,560
um so but in this case we're looking at

00:37:49,119 --> 00:37:55,839
a little bit shorter timespan because

00:37:52,560 --> 00:37:59,440
i just wanted to demonstrate this

00:37:55,839 --> 00:38:00,720
so i'm basically looking at the last

00:37:59,440 --> 00:38:04,320
five minutes

00:38:00,720 --> 00:38:06,320
of the cluster in this case

00:38:04,320 --> 00:38:07,440
hawk will go out and collect data from

00:38:06,320 --> 00:38:09,200
all of the cluster nodes

00:38:07,440 --> 00:38:11,200
since some of the log information that

00:38:09,200 --> 00:38:12,640
you may be interested in may only

00:38:11,200 --> 00:38:14,400
have been logged on one particular

00:38:12,640 --> 00:38:17,599
machine so it

00:38:14,400 --> 00:38:18,560
has to go and look at that machine to do

00:38:17,599 --> 00:38:21,599
this it needs

00:38:18,560 --> 00:38:25,200
a kind of a special configuration for

00:38:21,599 --> 00:38:27,040
ssh access so this is

00:38:25,200 --> 00:38:29,280
well one of the limitations of hawk that

00:38:27,040 --> 00:38:30,880
you kind of have to configure it in a

00:38:29,280 --> 00:38:32,400
particular way to be able to use these

00:38:30,880 --> 00:38:34,640
features

00:38:32,400 --> 00:38:35,839
but if you've configured it so that hawk

00:38:34,640 --> 00:38:37,359
can access

00:38:35,839 --> 00:38:39,599
the other nodes and get the information

00:38:37,359 --> 00:38:42,880
from them and then

00:38:39,599 --> 00:38:42,880
that's what it does at this point

00:38:43,359 --> 00:38:49,520
and once it finishes collecting the data

00:38:46,400 --> 00:38:52,720
it shows you an interface like this and

00:38:49,520 --> 00:38:55,440
basically this is a timeline from

00:38:52,720 --> 00:38:56,079
the start of the time frame you gave it

00:38:55,440 --> 00:38:58,800
to

00:38:56,079 --> 00:39:01,520
the end of it showing you each

00:38:58,800 --> 00:39:02,320
transition in the cluster that is every

00:39:01,520 --> 00:39:05,599
time

00:39:02,320 --> 00:39:09,920
the cluster resource manager decided to

00:39:05,599 --> 00:39:14,480
reallocate or modify the settings of

00:39:09,920 --> 00:39:18,000
resources you can get the the p

00:39:14,480 --> 00:39:20,800
e input file or there's also p

00:39:18,000 --> 00:39:22,880
warning and and the p error files that

00:39:20,800 --> 00:39:25,760
are basically

00:39:22,880 --> 00:39:27,200
the state of the what is called the

00:39:25,760 --> 00:39:30,640
policy engine but the

00:39:27,200 --> 00:39:33,440
resource manager of its model

00:39:30,640 --> 00:39:34,800
of the cluster and so you can get for

00:39:33,440 --> 00:39:36,960
each transition

00:39:34,800 --> 00:39:38,400
you can get the information about what

00:39:36,960 --> 00:39:41,520
does

00:39:38,400 --> 00:39:42,560
the cluster look like and how has the

00:39:41,520 --> 00:39:45,440
model

00:39:42,560 --> 00:39:47,040
changed and how will what will the

00:39:45,440 --> 00:39:50,720
cluster do about it

00:39:47,040 --> 00:39:52,000
uh so if we look at uh

00:39:50,720 --> 00:39:53,760
yeah so this is basically the

00:39:52,000 --> 00:39:57,200
information from

00:39:53,760 --> 00:40:00,320
the the p engine output

00:39:57,200 --> 00:40:01,839
so here we can see that we have a

00:40:00,320 --> 00:40:05,680
failure

00:40:01,839 --> 00:40:08,560
in the proxy group

00:40:05,680 --> 00:40:12,240
which is that the aj proxy failed which

00:40:08,560 --> 00:40:12,240
is not surprising because i killed it

00:40:12,560 --> 00:40:16,319
and you can also get a transition

00:40:14,560 --> 00:40:18,880
summary that says

00:40:16,319 --> 00:40:19,839
processing failed monitor for proxy on

00:40:18,880 --> 00:40:21,920
node one

00:40:19,839 --> 00:40:23,119
not running so you can actually get

00:40:21,920 --> 00:40:26,720
quite a bit of information

00:40:23,119 --> 00:40:28,640
already and and uh even

00:40:26,720 --> 00:40:30,400
at this point you've saved quite a bit

00:40:28,640 --> 00:40:32,240
of looking around in the logs for

00:40:30,400 --> 00:40:33,520
finding that particular line that says

00:40:32,240 --> 00:40:35,920
that oh

00:40:33,520 --> 00:40:37,440
the monitor action returned return

00:40:35,920 --> 00:40:39,119
return code seven

00:40:37,440 --> 00:40:42,319
you can actually get your steady

00:40:39,119 --> 00:40:42,319
information that you're interested in

00:40:42,720 --> 00:40:46,480
and then you can also see what changes

00:40:45,680 --> 00:40:50,880
is

00:40:46,480 --> 00:40:53,520
the clusters going to do about it and

00:40:50,880 --> 00:40:55,200
what you can see is it's gonna stop the

00:40:53,520 --> 00:40:56,400
resource this is to make sure that it

00:40:55,200 --> 00:40:59,599
really did fail

00:40:56,400 --> 00:41:03,040
it's not just a glitch in the monitor

00:40:59,599 --> 00:41:04,560
action so in case the monitor action is

00:41:03,040 --> 00:41:06,240
kind of buggy and sometimes says that

00:41:04,560 --> 00:41:06,720
the resource is not running even if it

00:41:06,240 --> 00:41:08,079
is

00:41:06,720 --> 00:41:09,920
well this is going to make sure that it

00:41:08,079 --> 00:41:12,079
really is not running

00:41:09,920 --> 00:41:13,359
so that's the reason to make sure that

00:41:12,079 --> 00:41:16,319
your monitoring

00:41:13,359 --> 00:41:17,200
actions actually work and are reliable

00:41:16,319 --> 00:41:20,720
because

00:41:17,200 --> 00:41:23,280
if the monitoring is not reliable or the

00:41:20,720 --> 00:41:25,680
timeouts are a little bit too short

00:41:23,280 --> 00:41:26,960
you can actually provoke failures in the

00:41:25,680 --> 00:41:28,560
cluster

00:41:26,960 --> 00:41:30,240
since the cluster software will decide

00:41:28,560 --> 00:41:32,000
that oh it's not running

00:41:30,240 --> 00:41:35,040
better make sure and stop it even though

00:41:32,000 --> 00:41:35,040
it was running so

00:41:36,240 --> 00:41:39,920
but in this case it's just going to

00:41:38,319 --> 00:41:42,400
restart the same resource

00:41:39,920 --> 00:41:43,119
on the same machine and then look at it

00:41:42,400 --> 00:41:47,520
again and see

00:41:43,119 --> 00:41:52,079
if if it's fine by default

00:41:47,520 --> 00:41:55,040
a proxy or the aha software will

00:41:52,079 --> 00:41:56,960
restart to say a failed resource up to

00:41:55,040 --> 00:41:58,640
three times on the same machine before

00:41:56,960 --> 00:42:00,400
deciding it's time to move it to another

00:41:58,640 --> 00:42:03,119
machine

00:42:00,400 --> 00:42:04,560
this is something you can configure if

00:42:03,119 --> 00:42:07,680
if you wanted to fail over

00:42:04,560 --> 00:42:10,000
immediately or after a longer period and

00:42:07,680 --> 00:42:10,000
so on

00:42:10,400 --> 00:42:19,440
uh yeah it's just more of that

00:42:16,000 --> 00:42:22,319
this is um yeah

00:42:19,440 --> 00:42:23,200
just saying the same thing really this

00:42:22,319 --> 00:42:26,400
you can see

00:42:23,200 --> 00:42:30,640
the actions taken at that

00:42:26,400 --> 00:42:34,720
point by the cluster um you can also get

00:42:30,640 --> 00:42:37,040
a graphical view or a graph view of

00:42:34,720 --> 00:42:38,160
the transition the transition

00:42:37,040 --> 00:42:41,200
calculation

00:42:38,160 --> 00:42:42,000
by the cluster software so here you can

00:42:41,200 --> 00:42:43,920
see the

00:42:42,000 --> 00:42:46,000
uh it the first thing it's going to do

00:42:43,920 --> 00:42:49,200
is it's going to stop

00:42:46,000 --> 00:42:49,200
the proxy resource

00:42:50,160 --> 00:42:53,359
and hopefully reach a point where it's

00:42:52,480 --> 00:42:57,760
stopped

00:42:53,359 --> 00:42:59,760
and the restart it and in parallel

00:42:57,760 --> 00:43:00,960
it's gonna start looking that it's

00:42:59,760 --> 00:43:04,079
running and also

00:43:00,960 --> 00:43:06,319
run the monitor so you can see sometimes

00:43:04,079 --> 00:43:07,280
the cluster will do multiple actions in

00:43:06,319 --> 00:43:10,800
parallel

00:43:07,280 --> 00:43:13,040
and this is a way to see

00:43:10,800 --> 00:43:14,560
see that that is kind of difficult to

00:43:13,040 --> 00:43:15,440
see from the log since the log is a

00:43:14,560 --> 00:43:17,359
linear

00:43:15,440 --> 00:43:18,720
format so you will see like oh first it

00:43:17,359 --> 00:43:19,760
does this then it does that but you

00:43:18,720 --> 00:43:21,280
can't really tell

00:43:19,760 --> 00:43:24,079
that it actually decided that it's going

00:43:21,280 --> 00:43:27,359
to do all of these things at once

00:43:24,079 --> 00:43:30,640
so this is actually quite valuable

00:43:27,359 --> 00:43:33,599
and then the final view which is um

00:43:30,640 --> 00:43:34,880
perhaps the one in most need of updating

00:43:33,599 --> 00:43:38,400
visually

00:43:34,880 --> 00:43:39,760
is the diff view but it's actually one

00:43:38,400 --> 00:43:42,400
of the most useful

00:43:39,760 --> 00:43:43,760
ones because here you can really see the

00:43:42,400 --> 00:43:46,960
whole timeline

00:43:43,760 --> 00:43:48,880
of what happened and what the cluster

00:43:46,960 --> 00:43:50,400
did about it so

00:43:48,880 --> 00:43:52,560
the first thing that happens here you

00:43:50,400 --> 00:43:54,560
can see that it it was in the state

00:43:52,560 --> 00:43:57,599
where

00:43:54,560 --> 00:44:00,880
the hd proxy was started on node 1

00:43:57,599 --> 00:44:04,400
and then it went to failed

00:44:00,880 --> 00:44:08,319
and we can see the failed action appear

00:44:04,400 --> 00:44:10,400
as well if you go to the next transition

00:44:08,319 --> 00:44:12,160
we can then see that it goes from being

00:44:10,400 --> 00:44:13,760
failed to being stopped it means that

00:44:12,160 --> 00:44:14,079
the cluster software now has run the

00:44:13,760 --> 00:44:16,800
stop

00:44:14,079 --> 00:44:20,240
action and ensured that it that the h8

00:44:16,800 --> 00:44:20,240
proxy really is now running

00:44:20,800 --> 00:44:24,880
and then the next thing that we can see

00:44:24,000 --> 00:44:28,000
here

00:44:24,880 --> 00:44:30,160
is that the failed action disappears

00:44:28,000 --> 00:44:33,839
from the logs

00:44:30,160 --> 00:44:36,480
um and

00:44:33,839 --> 00:44:37,440
have proxy is now started again so you

00:44:36,480 --> 00:44:41,200
get the whole

00:44:37,440 --> 00:44:43,520
kind of timeline of events in a

00:44:41,200 --> 00:44:44,480
pretty nice format you can scroll

00:44:43,520 --> 00:44:46,079
through and see

00:44:44,480 --> 00:44:48,839
okay so this is exactly what happened

00:44:46,079 --> 00:44:51,359
this is when it happened

00:44:48,839 --> 00:44:54,720
and yeah

00:44:51,359 --> 00:44:58,000
so as a summary if you're

00:44:54,720 --> 00:45:00,160
using linux ha

00:44:58,000 --> 00:45:02,000
and pacemaker and so on and you're not

00:45:00,160 --> 00:45:05,440
using hawk

00:45:02,000 --> 00:45:07,599
you're missing out i think um

00:45:05,440 --> 00:45:09,119
personally for configuring i still use

00:45:07,599 --> 00:45:12,560
the command line i think that's

00:45:09,119 --> 00:45:15,920
uh you know a nicer way to do that stuff

00:45:12,560 --> 00:45:17,440
but for the simulation and history

00:45:15,920 --> 00:45:20,160
viewer

00:45:17,440 --> 00:45:21,280
i think hawk is is really really nice

00:45:20,160 --> 00:45:24,560
and a really

00:45:21,280 --> 00:45:26,160
really useful tool and yeah the new

00:45:24,560 --> 00:45:29,680
version is going to be

00:45:26,160 --> 00:45:31,119
even more awesome and i should say that

00:45:29,680 --> 00:45:34,079
it's not just me working on the new

00:45:31,119 --> 00:45:37,440
version it's also thomas burger at

00:45:34,079 --> 00:45:39,119
souza and a guy called manuele who is

00:45:37,440 --> 00:45:41,440
designing all the graphical

00:45:39,119 --> 00:45:42,880
niceties so it actually looks good and

00:45:41,440 --> 00:45:46,720
not like programmer

00:45:42,880 --> 00:45:49,839
art which is what it would be otherwise

00:45:46,720 --> 00:45:52,480
and yeah that's me

00:45:49,839 --> 00:45:52,480
any questions

00:45:54,400 --> 00:46:01,839
yeah i love this one

00:46:04,960 --> 00:46:08,319
yeah all right

00:46:09,119 --> 00:46:13,440
okay no questions then uh if you want to

00:46:11,760 --> 00:46:29,839
talk to me afterwards i'm around

00:46:13,440 --> 00:46:29,839
so yep

00:46:31,680 --> 00:46:37,359
yeah so right now the graph is actually

00:46:35,280 --> 00:46:38,000
generated kind of on the server side so

00:46:37,359 --> 00:46:39,520
it's just

00:46:38,000 --> 00:46:42,240
in the unit space it's actually just the

00:46:39,520 --> 00:46:44,560
png from the server side so there's

00:46:42,240 --> 00:46:45,599
it's very limited what i can do with it

00:46:44,560 --> 00:46:46,880
so in the new

00:46:45,599 --> 00:46:48,800
interface i'm just going to send it to

00:46:46,880 --> 00:46:51,359
the front end and let the front end

00:46:48,800 --> 00:46:53,680
render it as svg and then i can attach

00:46:51,359 --> 00:46:56,079
all kinds of information

00:46:53,680 --> 00:46:57,200
you know showing showing it actually so

00:46:56,079 --> 00:46:59,040
you can click

00:46:57,200 --> 00:47:00,319
from one to the next so you can see the

00:46:59,040 --> 00:47:02,319
transition as it

00:47:00,319 --> 00:47:04,480
goes through and the same thing with the

00:47:02,319 --> 00:47:07,599
diff view is actually also

00:47:04,480 --> 00:47:08,560
rendered server side as a an image which

00:47:07,599 --> 00:47:11,680
is

00:47:08,560 --> 00:47:14,079
crazy but uh

00:47:11,680 --> 00:47:15,359
so i'm gonna do that uh client side as

00:47:14,079 --> 00:47:18,480
well so

00:47:15,359 --> 00:47:21,280
yeah it's gonna be way more usable

00:47:18,480 --> 00:47:22,559
in that sense i mean this all works you

00:47:21,280 --> 00:47:23,280
can actually use it but it takes a

00:47:22,559 --> 00:47:27,119
little bit of

00:47:23,280 --> 00:47:27,119
getting used to and yeah

00:47:29,359 --> 00:47:40,559
all right thanks

00:47:38,480 --> 00:47:40,559

YouTube URL: https://www.youtube.com/watch?v=mngfxzXkFLw


