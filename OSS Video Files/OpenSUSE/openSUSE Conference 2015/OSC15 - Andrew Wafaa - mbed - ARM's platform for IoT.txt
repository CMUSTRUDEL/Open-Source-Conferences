Title: OSC15 - Andrew Wafaa - mbed - ARM's platform for IoT
Publication date: 2015-05-03
Playlist: openSUSE Conference 2015
Description: 
	"Internet of Things" or IoT is a growing term in the industry, but it's more than just buzz. The presentation will provide an insight into how ARM is approaching this new market with the mbed platform and what technologies are in play including security, network, data and APIs. By providing the necessary building blocks to be able to create standards-based connected IoT solutions for a broad set of market segments ARM and mbed are the perfect partners for your IoT plans.
Captions: 
	00:00:00,000 --> 00:00:04,370
good afternoon good evening welcome

00:00:04,670 --> 00:00:15,509
thanks for coming so embed is arms IOT

00:00:13,590 --> 00:00:23,779
sorry somebody's just stealing the case

00:00:15,509 --> 00:00:28,890
of beer that's that's fine embed its

00:00:23,779 --> 00:00:34,079
arms RT platform you don't know what I

00:00:28,890 --> 00:00:37,469
OT is its internet of things what does

00:00:34,079 --> 00:00:42,140
that mean it is effectively connected

00:00:37,469 --> 00:00:50,640
devices that can be anything from watch

00:00:42,140 --> 00:00:54,090
fridge TV sensors door locks that you

00:00:50,640 --> 00:00:56,270
can manage your phone all those sort of

00:00:54,090 --> 00:00:56,270
things

00:00:58,910 --> 00:01:07,790
so just to give you an overview of embed

00:01:03,460 --> 00:01:10,700
it was embed its self was announced last

00:01:07,790 --> 00:01:21,290
year and around October November time

00:01:10,700 --> 00:01:25,210
2014 at arms tech con it's a that the

00:01:21,290 --> 00:01:31,160
new incarnation is a complete platform

00:01:25,210 --> 00:01:32,750
whereas before it was just literally the

00:01:31,160 --> 00:01:35,300
operating system that ran on one of

00:01:32,750 --> 00:01:40,190
these little boards that has multiple

00:01:35,300 --> 00:01:44,860
sensors on it the platform is split into

00:01:40,190 --> 00:01:50,780
two embed OS which is what runs on the

00:01:44,860 --> 00:01:56,090
m-class device and embed device server

00:01:50,780 --> 00:02:03,050
which as its name says is a server and

00:01:56,090 --> 00:02:06,310
it helps manage those smaller devices

00:02:03,050 --> 00:02:14,650
that are out there the reason behind it

00:02:06,310 --> 00:02:18,800
is to help accelerate time-to-market for

00:02:14,650 --> 00:02:21,560
customers and we've got a lot of

00:02:18,800 --> 00:02:25,480
partnerships out there with silicon

00:02:21,560 --> 00:02:27,530
providers cloud providers iBM has

00:02:25,480 --> 00:02:35,349
announced a partnership with our

00:02:27,530 --> 00:02:35,349
membered to provide cloud services and

00:02:35,380 --> 00:02:44,030
how we do this is by providing the

00:02:39,020 --> 00:02:47,360
blocks for people to then build their

00:02:44,030 --> 00:02:52,780
end solution so we're effectively the

00:02:47,360 --> 00:02:52,780
LEGO pieces for Internet of Things

00:02:53,500 --> 00:03:02,060
so there's plenty of momentum going on

00:02:57,430 --> 00:03:05,150
arm purchase the company about two years

00:03:02,060 --> 00:03:08,299
ago called sensor node they've been

00:03:05,150 --> 00:03:12,109
around now for eight years they already

00:03:08,299 --> 00:03:16,640
are out in commercial use as it stands

00:03:12,109 --> 00:03:19,810
now and the new embed platform is a

00:03:16,640 --> 00:03:23,390
combination of arms in house m bed

00:03:19,810 --> 00:03:26,739
married with sensor node there are well

00:03:23,390 --> 00:03:29,180
over 9000 projects based on them bed now

00:03:26,739 --> 00:03:32,840
some of them are commercial some of them

00:03:29,180 --> 00:03:40,220
are hobbyist and there's a huge variety

00:03:32,840 --> 00:03:44,680
of things being used there are well over

00:03:40,220 --> 00:03:49,450
30 boards now this one's by Nordic

00:03:44,680 --> 00:03:54,379
freescale nxp just some of the other

00:03:49,450 --> 00:04:00,769
vendors and that ecosystem is growing

00:03:54,379 --> 00:04:04,010
constantly as I mentioned embed platform

00:04:00,769 --> 00:04:10,690
split into two got the device server on

00:04:04,010 --> 00:04:15,319
top which has both free to use and

00:04:10,690 --> 00:04:19,970
commercial versions it does a lot of the

00:04:15,319 --> 00:04:26,240
application and device management and it

00:04:19,970 --> 00:04:29,530
helps as I said grow customers use base

00:04:26,240 --> 00:04:32,449
M bed OS that runs on the actual device

00:04:29,530 --> 00:04:36,050
and one thing to note is M bed is

00:04:32,449 --> 00:04:41,870
designed for m-class processes and so

00:04:36,050 --> 00:04:45,409
not the cortex a class things that you

00:04:41,870 --> 00:04:50,090
get in your mobile phone or tablet or

00:04:45,409 --> 00:04:54,099
even Raspberry Pi it is much smaller

00:04:50,090 --> 00:04:54,099
much lighter weight

00:04:54,990 --> 00:05:04,080
most boards have a variety of sensors in

00:04:58,650 --> 00:05:06,890
there and around covering both

00:05:04,080 --> 00:05:10,530
components there's the embed ecosystem

00:05:06,890 --> 00:05:19,680
made up of developers commercial

00:05:10,530 --> 00:05:22,890
partners services companies so that's

00:05:19,680 --> 00:05:25,770
great but in this context at an event

00:05:22,890 --> 00:05:28,880
like this what's in it for developers

00:05:25,770 --> 00:05:32,160
why would you want to care about it

00:05:28,880 --> 00:05:36,620
there's actually quite a bit for

00:05:32,160 --> 00:05:41,540
developers within them bed you've got

00:05:36,620 --> 00:05:45,890
productivity use cases security

00:05:41,540 --> 00:05:49,040
leveraging expertise on the Linux stack

00:05:45,890 --> 00:05:53,310
with in the security field within

00:05:49,040 --> 00:05:59,070
networking aspect of things management

00:05:53,310 --> 00:06:02,460
is a big opportunity for people to work

00:05:59,070 --> 00:06:07,380
in and then there's the optimizations

00:06:02,460 --> 00:06:11,700
for efficiency and suchlike as mentioned

00:06:07,380 --> 00:06:16,130
there's well over 30 development boards

00:06:11,700 --> 00:06:18,360
available for people to use em bed is

00:06:16,130 --> 00:06:23,970
designed from the ground up to be

00:06:18,360 --> 00:06:28,230
cross-platform so you can change you can

00:06:23,970 --> 00:06:32,060
prototype on a nxp board and then decide

00:06:28,230 --> 00:06:36,300
actually in production I'm going to use

00:06:32,060 --> 00:06:40,380
the Nordic board and it'll work code is

00:06:36,300 --> 00:06:41,880
completely transportable and as I

00:06:40,380 --> 00:06:48,390
mentioned most of these boards have a

00:06:41,880 --> 00:06:51,270
multitude of sensors and solutions a lot

00:06:48,390 --> 00:06:55,470
of them have Wi-Fi Bluetooth especially

00:06:51,270 --> 00:07:00,240
Bluetooth le so low energy there's cell

00:06:55,470 --> 00:07:04,040
modems 6lowpan for network connectivity

00:07:00,240 --> 00:07:04,040
and thread

00:07:05,180 --> 00:07:14,910
there's well over seventy thousand

00:07:10,670 --> 00:07:16,320
members of the embed community as it

00:07:14,910 --> 00:07:21,360
stands now and there's a lot of moral

00:07:16,320 --> 00:07:26,240
knowledge sharing within forums and

00:07:21,360 --> 00:07:30,500
suchlike and helping those new to the

00:07:26,240 --> 00:07:30,500
ecosystem get up and running

00:07:34,370 --> 00:07:38,930
to get up and running there are a whole

00:07:37,190 --> 00:07:43,150
heap of different resources available to

00:07:38,930 --> 00:07:47,930
you there's documentation and suchlike

00:07:43,150 --> 00:07:50,380
so there's the homepage a 10-bed org and

00:07:47,930 --> 00:08:05,500
there's the developer portal at

00:07:50,380 --> 00:08:10,220
developer.android.com / typing and

00:08:05,500 --> 00:08:19,300
ensuring that your code valid and forum

00:08:10,220 --> 00:08:21,740
for asking help so not only is embed OS

00:08:19,300 --> 00:08:25,880
multi-platform from the actual device

00:08:21,740 --> 00:08:29,570
you can actually code from a variety of

00:08:25,880 --> 00:08:32,900
platforms whether it be offline on your

00:08:29,570 --> 00:08:35,860
desktop regardless of iOS or if you want

00:08:32,900 --> 00:08:40,610
you can do it directly in the browser

00:08:35,860 --> 00:08:47,330
the embed compiler has got a web hosted

00:08:40,610 --> 00:08:50,209
instance so with a lot of IOT devices

00:08:47,330 --> 00:08:55,480
they generate lots of little bits of

00:08:50,209 --> 00:09:01,160
data whether it be temperature sensing

00:08:55,480 --> 00:09:08,690
moisture sensing movement etc all that

00:09:01,160 --> 00:09:11,480
stuff gets pushed up and that multitude

00:09:08,690 --> 00:09:14,839
of little bits of data creates a lot of

00:09:11,480 --> 00:09:19,310
big data analytics ensuring that you get

00:09:14,839 --> 00:09:25,970
all that data together is quite key

00:09:19,310 --> 00:09:29,390
there's a lot of effort in ensuring that

00:09:25,970 --> 00:09:38,080
all that data traveling from the devices

00:09:29,390 --> 00:09:39,590
up to the device server is encrypted the

00:09:38,080 --> 00:09:43,240
management is

00:09:39,590 --> 00:09:43,240
all seamless

00:09:44,660 --> 00:09:53,259
so part of em bed is ensuring that we

00:09:49,100 --> 00:09:58,670
use standards and driving standards

00:09:53,259 --> 00:10:04,129
protocols right way through the stack so

00:09:58,670 --> 00:10:11,449
you've got standard tcp IP ipv4 v6 and

00:10:04,129 --> 00:10:16,600
6lowpan 6lowpan is effectively creating

00:10:11,449 --> 00:10:20,560
a low-powered ipv6 enabled network

00:10:16,600 --> 00:10:25,220
locally rather than having to rely on

00:10:20,560 --> 00:10:31,600
the internet utilizing things like TCP

00:10:25,220 --> 00:10:37,910
UDP protocols and TLS for encryption

00:10:31,600 --> 00:10:41,029
standard HTTP s its rest api's there's

00:10:37,910 --> 00:10:43,870
JSON for ensuring the all the

00:10:41,029 --> 00:10:43,870
encapsulations there

00:10:46,570 --> 00:11:03,310
so how many people here have heard of

00:10:49,360 --> 00:11:09,280
thread fun wunderbar exit and so that is

00:11:03,310 --> 00:11:11,470
a thread yes not quite the exact

00:11:09,280 --> 00:11:21,010
interpretation I look for but sure let's

00:11:11,470 --> 00:11:26,110
go over that so it's collaboratively

00:11:21,010 --> 00:11:29,470
being designed it's a standard with a

00:11:26,110 --> 00:11:35,440
lot of input from big names like nest

00:11:29,470 --> 00:11:41,590
freescale Samsung etc and so you've got

00:11:35,440 --> 00:11:46,930
a thread access point on the available

00:11:41,590 --> 00:11:51,550
in the gateway thread communication is

00:11:46,930 --> 00:11:55,140
all low power so these devices quite

00:11:51,550 --> 00:11:58,210
often will be running off a battery of

00:11:55,140 --> 00:11:59,680
some form so they will not be

00:11:58,210 --> 00:12:07,120
necessarily plugged into the mains

00:11:59,680 --> 00:12:11,950
pulling a lot of power there's a huge

00:12:07,120 --> 00:12:17,410
range of devices that are able to be

00:12:11,950 --> 00:12:22,870
deployed and grow the network within

00:12:17,410 --> 00:12:25,060
that thread is a utilizers mesh

00:12:22,870 --> 00:12:28,650
networking so the more devices you have

00:12:25,060 --> 00:12:32,250
the stronger year network connectivity

00:12:28,650 --> 00:12:32,250
and the wider reach

00:12:36,460 --> 00:12:44,890
and it takes IP all the way up to the

00:12:41,320 --> 00:12:47,070
edge of that mesh network so it's using

00:12:44,890 --> 00:12:52,600
standard protocols that you're already

00:12:47,070 --> 00:12:57,000
familiar with and with that there is a

00:12:52,600 --> 00:13:00,070
mature and well-developed security model

00:12:57,000 --> 00:13:08,460
to ensure Albert traffic is well

00:13:00,070 --> 00:13:17,170
encrypted so on the actual device server

00:13:08,460 --> 00:13:20,440
it's easy integration there's support

00:13:17,170 --> 00:13:24,310
connectivity of all devices manage the

00:13:20,440 --> 00:13:26,560
security of all your devices running on

00:13:24,310 --> 00:13:28,600
the standards as I mentioned and the

00:13:26,560 --> 00:13:30,250
management of the device server is

00:13:28,600 --> 00:13:32,460
designed from the ground up to be

00:13:30,250 --> 00:13:32,460
lightweight

00:13:37,510 --> 00:13:47,440
so it's an example of IOT in white scale

00:13:44,410 --> 00:13:52,860
commercial use there are multiple cities

00:13:47,440 --> 00:13:56,740
that have deployed IOT device them bed

00:13:52,860 --> 00:14:00,540
this is one of the examples that has

00:13:56,740 --> 00:14:06,490
that is active in the wild so each

00:14:00,540 --> 00:14:12,760
streetlight has an embed style device on

00:14:06,490 --> 00:14:16,990
top of it in it our sensors for light so

00:14:12,760 --> 00:14:22,570
you set your parameter of if they you

00:14:16,990 --> 00:14:28,210
know sunlight gets to X variable power

00:14:22,570 --> 00:14:33,390
on light because all the devices use

00:14:28,210 --> 00:14:36,990
mesh networking so with each streetlight

00:14:33,390 --> 00:14:40,000
they connect to the one before it

00:14:36,990 --> 00:14:43,780
there's the strength of your network

00:14:40,000 --> 00:14:47,320
there it's all encrypted traffic all

00:14:43,780 --> 00:14:52,120
that data goes to a gateway that's

00:14:47,320 --> 00:14:55,210
connected to the one in one form or

00:14:52,120 --> 00:15:01,260
another generally speaking they are

00:14:55,210 --> 00:15:04,720
powered by linux standard Linux OS and

00:15:01,260 --> 00:15:10,120
invariably they'll be running on cortex

00:15:04,720 --> 00:15:12,070
a class processors from the gateway the

00:15:10,120 --> 00:15:18,600
data is then sent up to the device

00:15:12,070 --> 00:15:21,670
server where the utility admins can

00:15:18,600 --> 00:15:26,320
monitor how often lights are coming on

00:15:21,670 --> 00:15:28,930
they can monitor which lights have a

00:15:26,320 --> 00:15:31,420
broken bulb so they know when to send

00:15:28,930 --> 00:15:36,910
the maintenance guys out to fix it they

00:15:31,420 --> 00:15:39,220
can monitor voltage power spikes etc

00:15:36,910 --> 00:15:41,500
they get all the information from the

00:15:39,220 --> 00:15:45,190
embed device sitting on those lamp posts

00:15:41,500 --> 00:15:47,850
and they're able to analyze and budget

00:15:45,190 --> 00:15:47,850
accordingly

00:15:50,820 --> 00:15:58,590
so that's a commercial use case some

00:15:55,020 --> 00:16:04,170
hobbyists style use cases if you wish

00:15:58,590 --> 00:16:07,540
robot all sensors so it's able to

00:16:04,170 --> 00:16:13,780
autonomously move around completely

00:16:07,540 --> 00:16:18,220
powered by open source both running on

00:16:13,780 --> 00:16:24,540
the ground and then water hooking up to

00:16:18,220 --> 00:16:28,480
a webcam for motion detection there's

00:16:24,540 --> 00:16:32,100
multiple instantiations of a home

00:16:28,480 --> 00:16:35,860
weather center in your garden or

00:16:32,100 --> 00:16:42,250
wherever there's quite a few use cases

00:16:35,860 --> 00:16:45,040
of gardening applications so monitoring

00:16:42,250 --> 00:16:49,180
ph level of the soil moisture in the

00:16:45,040 --> 00:16:52,900
soil sunlight temperature etc so you

00:16:49,180 --> 00:16:55,060
know when you need to go and what the

00:16:52,900 --> 00:16:57,970
plants you can hook up automatic

00:16:55,060 --> 00:17:00,310
irrigation system so that when moisture

00:16:57,970 --> 00:17:04,140
level gets below a certain point it'll

00:17:00,310 --> 00:17:04,140
automatically triggers the irrigation

00:17:06,920 --> 00:17:16,460
so basic wearable example here the low

00:17:13,400 --> 00:17:19,850
powered device connects via bluetooth

00:17:16,460 --> 00:17:24,230
much in the same way that my Android

00:17:19,850 --> 00:17:29,930
wear device does now to either cell

00:17:24,230 --> 00:17:35,540
phone or a other internet gateway

00:17:29,930 --> 00:17:39,710
something talk to the cloud and you can

00:17:35,540 --> 00:17:41,960
set it to do your multiple monitoring

00:17:39,710 --> 00:17:50,540
whether it be for health movement step

00:17:41,960 --> 00:17:53,480
tracking etc smart home can again be

00:17:50,540 --> 00:17:57,020
utilized in much the same way you can

00:17:53,480 --> 00:18:03,170
have a device in which every shape you

00:17:57,020 --> 00:18:04,490
wish in the house again utilizing all

00:18:03,170 --> 00:18:07,760
the sensors that you have on board the

00:18:04,490 --> 00:18:12,320
m-class board there to monitor your

00:18:07,760 --> 00:18:15,710
temperature air purity and suchlike and

00:18:12,320 --> 00:18:18,050
then you can have an application whether

00:18:15,710 --> 00:18:22,310
it be a web app mobile app etc and you

00:18:18,050 --> 00:18:24,880
can monitor and control things from

00:18:22,310 --> 00:18:27,920
there hook it up to a nest thermostat

00:18:24,880 --> 00:18:30,850
for you automatic temperature

00:18:27,920 --> 00:18:30,850
adjustments

00:18:32,999 --> 00:18:38,459
so as I said embed has a community it is

00:18:36,269 --> 00:18:44,819
growing but we want to ensure that it

00:18:38,459 --> 00:18:50,999
continues to grow so getting involved is

00:18:44,819 --> 00:18:57,539
super easy most people have a common

00:18:50,999 --> 00:18:59,219
vision for how I OT applications want to

00:18:57,539 --> 00:19:04,139
go and there's plenty of opportunities

00:18:59,219 --> 00:19:07,079
for collaboration it's example of some

00:19:04,139 --> 00:19:11,249
of the partners in the cloud I mentioned

00:19:07,079 --> 00:19:16,649
IBM already there's kddi injured in

00:19:11,249 --> 00:19:19,069
Japan telefonica in Spain Salesforce

00:19:16,649 --> 00:19:24,479
have cloud applications available for

00:19:19,069 --> 00:19:27,029
embed multiple ecosystem partners if you

00:19:24,479 --> 00:19:32,399
need to get components and such like and

00:19:27,029 --> 00:19:33,929
like Farnell element14 and then there's

00:19:32,399 --> 00:19:37,999
the silicon partners for the large

00:19:33,929 --> 00:19:37,999
variety globally

00:19:40,169 --> 00:19:49,529
so what is the part that opensuse and

00:19:46,109 --> 00:19:52,039
linux to play with in the whole IOT

00:19:49,529 --> 00:19:54,359
space so you won't be able to run

00:19:52,039 --> 00:19:58,830
standard Linux distribution on one of

00:19:54,359 --> 00:20:00,499
these devices they have no new it's just

00:19:58,830 --> 00:20:05,100
not going to work generally speaking

00:20:00,499 --> 00:20:08,639
it's art our style systems that running

00:20:05,100 --> 00:20:11,149
they're so good way for Linux to get

00:20:08,639 --> 00:20:13,409
involved annuities at the gateway

00:20:11,149 --> 00:20:17,960
managing all the data that's going up to

00:20:13,409 --> 00:20:21,869
the cloud and ensuring the

00:20:17,960 --> 00:20:31,039
communications between the device server

00:20:21,869 --> 00:20:35,879
and the devices works well analytics

00:20:31,039 --> 00:20:39,259
applications the end user application

00:20:35,879 --> 00:20:46,139
whether it be mobile web fat line etc

00:20:39,259 --> 00:20:49,039
prime opportunity for Linux there's lots

00:20:46,139 --> 00:20:56,389
of frameworks available for you to use

00:20:49,039 --> 00:21:02,210
there another area where Linux can

00:20:56,389 --> 00:21:07,440
leverage its power is as a controller so

00:21:02,210 --> 00:21:11,929
you can utilize Linux in association

00:21:07,440 --> 00:21:16,159
with applications to manage an orchestra

00:21:11,929 --> 00:21:16,159
how these devices work

00:21:20,030 --> 00:21:32,309
barmer not entirely sure why he's there

00:21:27,030 --> 00:21:38,940
right correct developers developers

00:21:32,309 --> 00:21:45,240
developers developers so Linux has a

00:21:38,940 --> 00:21:48,540
huge huge pool of developers in lots of

00:21:45,240 --> 00:21:51,440
different areas they have the power at

00:21:48,540 --> 00:21:55,200
the knowledge the experience of

00:21:51,440 --> 00:21:56,820
tinkering they know what they have

00:21:55,200 --> 00:21:59,610
generally speaking limits developers

00:21:56,820 --> 00:22:03,750
have a whole heap of itches that they

00:21:59,610 --> 00:22:06,390
try and force upon devices and

00:22:03,750 --> 00:22:08,100
applications that aren't suited really

00:22:06,390 --> 00:22:16,429
for the job but it's what they've got to

00:22:08,100 --> 00:22:21,170
hand it all do embed helps to fix those

00:22:16,429 --> 00:22:25,020
itches help you scratch them I know Lars

00:22:21,170 --> 00:22:29,750
used a raspberry pi for a quick project

00:22:25,020 --> 00:22:32,100
to monitor data center for opensuse and

00:22:29,750 --> 00:22:34,410
he had to get a whole heap of different

00:22:32,100 --> 00:22:38,610
bits for sensors and work out how he's

00:22:34,410 --> 00:22:41,580
going to communicate etcetera embed

00:22:38,610 --> 00:22:44,550
would have made that project so much

00:22:41,580 --> 00:22:47,760
easier and he could have concentrated on

00:22:44,550 --> 00:22:54,150
his fancy Ruby on Rails skills etcetera

00:22:47,760 --> 00:22:57,929
that he has but ultimately Linux is the

00:22:54,150 --> 00:23:02,660
perfect partner for embed OS both on the

00:22:57,929 --> 00:23:07,299
client device and on the device server

00:23:02,660 --> 00:23:14,159
it just works well together

00:23:07,299 --> 00:23:17,259
a lot of embed is patchy to licensed the

00:23:14,159 --> 00:23:22,239
online compiler is active license use

00:23:17,259 --> 00:23:30,809
GCC or variety of different compilers

00:23:22,239 --> 00:23:30,809
available for you to slice their sorry

00:23:30,880 --> 00:23:43,810
kittens yes actually it does I'm a dog

00:23:36,460 --> 00:23:52,540
man myself so how am i doing I've got a

00:23:43,810 --> 00:23:55,150
bit of time any questions I'll go back

00:23:52,540 --> 00:24:01,500
to you in a second vaccines any other

00:23:55,150 --> 00:24:01,500
questions go

00:24:06,160 --> 00:24:16,240
oh okay so how is the relation between n

00:24:12,400 --> 00:24:18,060
bed and the all joiner lines and how are

00:24:16,240 --> 00:24:22,180
you playing with the Linux Foundation

00:24:18,060 --> 00:24:24,340
collaboration project for IOT hmm

00:24:22,180 --> 00:24:29,830
somebody's been paying attention you're

00:24:24,340 --> 00:24:34,410
a collapse on it it's good point so at

00:24:29,830 --> 00:24:40,650
the moment M bed is not part of all join

00:24:34,410 --> 00:24:40,650
all seen it is something that we are

00:24:40,770 --> 00:24:48,180
tracking trying to understand better how

00:24:44,940 --> 00:24:53,290
that's going to play out and understand

00:24:48,180 --> 00:24:56,800
their target audience does it really

00:24:53,290 --> 00:25:03,220
line up with how we want or how we

00:24:56,800 --> 00:25:06,130
envision the IOT play going there's not

00:25:03,220 --> 00:25:07,960
been any decision that the present as

00:25:06,130 --> 00:25:10,930
far as I'm aware of whether we are

00:25:07,960 --> 00:25:13,570
definitely or not I do know that we are

00:25:10,930 --> 00:25:20,320
tracking it certainly many of our

00:25:13,570 --> 00:25:23,770
partners are in all join is there a need

00:25:20,320 --> 00:25:28,510
for us to be in there as well quite

00:25:23,770 --> 00:25:30,870
possibly but at the moment it's still to

00:25:28,510 --> 00:25:30,870
be decided

00:25:32,890 --> 00:25:38,090
next

00:25:34,850 --> 00:25:39,920
actually the question to the audience is

00:25:38,090 --> 00:25:42,580
there actually anyone already using

00:25:39,920 --> 00:25:42,580
embed here

00:25:46,600 --> 00:25:49,740
a little present

00:25:53,970 --> 00:25:58,620
how do you prevent that one device I

00:25:56,490 --> 00:26:00,660
mean I take 10 vertex take over one

00:25:58,620 --> 00:26:02,190
street lamp how do you prevent me

00:26:00,660 --> 00:26:07,350
blocking messages from the others and

00:26:02,190 --> 00:26:14,160
just injecting and you know I was new

00:26:07,350 --> 00:26:16,620
protocols audited already so 6lowpan has

00:26:14,160 --> 00:26:20,700
been as far as I'm aware and it's been

00:26:16,620 --> 00:26:23,700
in use for quite some time zigbee is

00:26:20,700 --> 00:26:28,440
another mesh networking protocol that

00:26:23,700 --> 00:26:29,730
has been around for quite some time with

00:26:28,440 --> 00:26:36,090
regards to the first part of the

00:26:29,730 --> 00:26:39,090
question I would have to defer to my

00:26:36,090 --> 00:26:43,470
security colleagues who would much be

00:26:39,090 --> 00:26:49,170
better placed to answer that I genuinely

00:26:43,470 --> 00:26:52,740
couldn't honestly answer it but thanks

00:26:49,170 --> 00:26:57,730
for the question that's right they're

00:26:52,740 --> 00:27:00,420
resilient they are now

00:26:57,730 --> 00:27:00,420
sorry

00:27:00,440 --> 00:27:02,440
uh

00:27:07,200 --> 00:27:19,429
embed device server is I don't think it

00:27:13,799 --> 00:27:19,429
is completely open but you

00:27:23,100 --> 00:27:27,750
yeah I mean that this that you do could

00:27:26,190 --> 00:27:29,910
you please repeat the question so that

00:27:27,750 --> 00:27:34,380
everyone understand it yet so the

00:27:29,910 --> 00:27:39,740
question was is embed device server open

00:27:34,380 --> 00:27:44,929
source I don't believe all of it is

00:27:39,740 --> 00:27:49,140
there are certain components so embed

00:27:44,929 --> 00:27:52,770
device server is still in a beta stage

00:27:49,140 --> 00:27:57,419
it should be publicly released in

00:27:52,770 --> 00:28:00,690
november this year the 104 embed device

00:27:57,419 --> 00:28:05,010
server and more details will be

00:28:00,690 --> 00:28:08,820
published then currently it's in beta

00:28:05,010 --> 00:28:12,440
with partners and it goes public beta i

00:28:08,820 --> 00:28:12,440
believe around summer time

00:28:15,110 --> 00:28:21,530
okay I wanted to ask you mentioned that

00:28:19,250 --> 00:28:24,980
all these devices are connected to be a

00:28:21,530 --> 00:28:27,200
some low-power wireless sling you

00:28:24,980 --> 00:28:29,870
mentioned the bluetooth low power you

00:28:27,200 --> 00:28:32,360
mentioned zigbee is it specified

00:28:29,870 --> 00:28:37,040
somewhere in embed what is the preferred

00:28:32,360 --> 00:28:38,480
way of this wireless connection to do

00:28:37,040 --> 00:28:41,420
all these devices that you showed that

00:28:38,480 --> 00:28:43,940
there is plenty of those have some

00:28:41,420 --> 00:28:47,330
standard way of communicating or do I

00:28:43,940 --> 00:28:49,730
need to make sure that devices that I by

00:28:47,330 --> 00:28:54,049
are using the same technology to connect

00:28:49,730 --> 00:28:58,760
to each other so that the the protocol

00:28:54,049 --> 00:29:05,540
whether it be zigbee 6lowpan etc that's

00:28:58,760 --> 00:29:10,760
in the embed device OS not much on the

00:29:05,540 --> 00:29:13,490
if they've got a Wi-Fi chip on them

00:29:10,760 --> 00:29:18,350
you'll be able to communicate via

00:29:13,490 --> 00:29:20,630
6lowpan yeah and if they're done to poor

00:29:18,350 --> 00:29:25,840
zigbee I think that there are you can

00:29:20,630 --> 00:29:25,840
use it on different megahertz and

00:29:28,160 --> 00:29:39,010
yeah so so its base basically up to the

00:29:33,680 --> 00:29:39,010
device as far as somewhere I guess okay

00:29:40,030 --> 00:29:47,300
you have to come down I'm not

00:29:44,930 --> 00:29:49,580
going to throw it that far you mentioned

00:29:47,300 --> 00:29:51,890
the already existing mesh networks for

00:29:49,580 --> 00:29:54,440
the lights in the cities I'm just

00:29:51,890 --> 00:29:57,110
curious how huge dose mesh networks can

00:29:54,440 --> 00:30:00,340
be or in reality are currently I is it

00:29:57,110 --> 00:30:02,870
like dozens of thousands of an

00:30:00,340 --> 00:30:10,570
eight-person limits it's certainly

00:30:02,870 --> 00:30:13,190
hundreds I believe one of the city's has

00:30:10,570 --> 00:30:17,390
5,000 mesh network i'm not sure if they

00:30:13,190 --> 00:30:20,440
are all just in the single mesh or if

00:30:17,390 --> 00:30:22,550
there's multiple mesh networks

00:30:20,440 --> 00:30:23,960
communicating with you know so you have

00:30:22,550 --> 00:30:25,880
a block of streetlights and they've got

00:30:23,960 --> 00:30:29,110
their own gateway in each block has its

00:30:25,880 --> 00:30:34,000
own gateway etc you know a few hundred

00:30:29,110 --> 00:30:38,380
i'm not sure on the exact implementation

00:30:34,000 --> 00:30:38,380
aspect thank you

00:30:46,150 --> 00:30:50,490
sorry

00:30:47,890 --> 00:30:50,490
No

00:30:53,070 --> 00:31:00,090
okay so I know imagine if I want to use

00:30:57,630 --> 00:31:03,149
those devices for home automation I

00:31:00,090 --> 00:31:06,269
would have to somehow a set of a server

00:31:03,149 --> 00:31:10,080
so i would have to have a device that

00:31:06,269 --> 00:31:12,210
runs the MS server i would buy a lot of

00:31:10,080 --> 00:31:17,460
small devices and put them every word

00:31:12,210 --> 00:31:20,610
you just measure some stuff how do i set

00:31:17,460 --> 00:31:23,070
that stuff how do i actually configure

00:31:20,610 --> 00:31:31,379
the device is like to connect them to my

00:31:23,070 --> 00:31:36,360
Wi-Fi or whatever the cookbook is your

00:31:31,379 --> 00:31:39,090
friend the embed cookbook that that will

00:31:36,360 --> 00:31:44,340
give you the best solution for whether

00:31:39,090 --> 00:31:47,850
its internal or external usage and how

00:31:44,340 --> 00:31:52,889
to actually hook them all up together to

00:31:47,850 --> 00:31:55,970
the end access point I I wouldn't like

00:31:52,889 --> 00:31:59,610
to say and I wouldn't like to pass any

00:31:55,970 --> 00:32:02,159
advice because I'm probably not the best

00:31:59,610 --> 00:32:06,730
person to on the implementation aspect

00:32:02,159 --> 00:32:14,470
of it okay thank you

00:32:06,730 --> 00:32:20,049
but you can start now what is the price

00:32:14,470 --> 00:32:24,760
range of the devices in general tens of

00:32:20,049 --> 00:32:27,280
dollars so if i wanted to approach my

00:32:24,760 --> 00:32:30,040
house switching on every light it would

00:32:27,280 --> 00:32:33,760
probably cost me a couple of hundreds to

00:32:30,040 --> 00:32:41,370
thousands it depends on the size of your

00:32:33,760 --> 00:32:45,040
house about 80 square meters yeah so

00:32:41,370 --> 00:32:48,330
yeah they're generally around if you

00:32:45,040 --> 00:32:51,730
want to make it yourself it's about 15

00:32:48,330 --> 00:32:57,179
boards range from about roughly about

00:32:51,730 --> 00:33:02,799
fifteen dollars if that you can go to

00:32:57,179 --> 00:33:06,520
some companies that implement that sort

00:33:02,799 --> 00:33:10,770
of technology and you're gonna pay about

00:33:06,520 --> 00:33:19,510
a hundred and fifty dollars for the bulb

00:33:10,770 --> 00:33:21,940
and yeah and then you then have to login

00:33:19,510 --> 00:33:24,280
create an account on their web service

00:33:21,940 --> 00:33:26,860
you know entirely sure how well they are

00:33:24,280 --> 00:33:33,610
so yeah you're looking if you got say

00:33:26,860 --> 00:33:36,460
ten rooms hundred bucks there abouts and

00:33:33,610 --> 00:33:38,940
then it's a matter of a little bit of

00:33:36,460 --> 00:33:38,940
coding time

00:33:40,050 --> 00:33:46,740
there are so I'm out of embed boards but

00:33:47,490 --> 00:33:54,940
close let's try again getting dangerous

00:33:49,840 --> 00:34:07,180
now no sir haha you can keep that one

00:33:54,940 --> 00:34:12,010
sorry any other questions um follow-up

00:34:07,180 --> 00:34:14,679
from my side so embed for my view was

00:34:12,010 --> 00:34:19,060
was primarily like a development and

00:34:14,679 --> 00:34:21,429
evaluation platform so on one hand when

00:34:19,060 --> 00:34:24,010
you've talked about the streetlights are

00:34:21,429 --> 00:34:26,290
using embed OS does that mean that they

00:34:24,010 --> 00:34:27,909
also have like the USB connector so that

00:34:26,290 --> 00:34:30,960
someone could actually go and reflash

00:34:27,909 --> 00:34:33,460
them or on the other hand is there like

00:34:30,960 --> 00:34:35,050
service partners that would then you

00:34:33,460 --> 00:34:37,480
know if you want to have those a

00:34:35,050 --> 00:34:40,149
particular solution that you programmed

00:34:37,480 --> 00:34:41,710
in a large scale such as know hundreds

00:34:40,149 --> 00:34:43,870
of light bulbs or whatever or their

00:34:41,710 --> 00:34:46,510
partners that would then design a custom

00:34:43,870 --> 00:34:53,169
piece of you for you that might be less

00:34:46,510 --> 00:34:58,080
expensive than those boards yes the

00:34:53,169 --> 00:35:04,120
would certainly be partners that can

00:34:58,080 --> 00:35:09,070
take your proof concept on a nxp board

00:35:04,120 --> 00:35:11,440
or a nordic board and then implement

00:35:09,070 --> 00:35:14,140
functionality that you're after and your

00:35:11,440 --> 00:35:19,150
code can just be transferred across into

00:35:14,140 --> 00:35:22,350
all works with regards to whether what

00:35:19,150 --> 00:35:26,640
how the devices look like on the example

00:35:22,350 --> 00:35:28,810
i haven't seen them myself so i can say

00:35:26,640 --> 00:35:34,440
but generally speaking it would be

00:35:28,810 --> 00:35:37,120
through a partner that would do that

00:35:34,440 --> 00:35:39,490
development aspect to ensure its as

00:35:37,120 --> 00:35:45,360
low-maintenance as possible it is also

00:35:39,490 --> 00:35:50,760
possible to do uh nover the air update

00:35:45,360 --> 00:35:55,610
to the devices from the embed server by

00:35:50,760 --> 00:35:59,160
the Gateway can we say in general that

00:35:55,610 --> 00:36:00,810
code developed for for embed OS can be

00:35:59,160 --> 00:36:03,690
deployed to any cortex-m

00:36:00,810 --> 00:36:07,020
microcontrollers or does it have to be a

00:36:03,690 --> 00:36:11,240
certain embed platform it I I wouldn't

00:36:07,020 --> 00:36:15,840
say it any m-class it would need to be

00:36:11,240 --> 00:36:19,580
embed certified platforms which is why

00:36:15,840 --> 00:36:24,470
there's only you know around 40 tops

00:36:19,580 --> 00:36:33,060
embed platforms yet there are numerous

00:36:24,470 --> 00:36:35,280
m-class powered devices voila ssl

00:36:33,060 --> 00:36:37,890
library was recently purchased by arm

00:36:35,280 --> 00:36:40,010
renamed to embed pls i assume that it is

00:36:37,890 --> 00:36:45,810
because it's becoming part of this

00:36:40,010 --> 00:36:47,730
development platform and thus embedded

00:36:45,810 --> 00:36:52,530
dealers will remain supported on other

00:36:47,730 --> 00:36:57,390
architectures than arm yes it is going

00:36:52,530 --> 00:37:00,900
to be maintained the polar SSL

00:36:57,390 --> 00:37:04,080
acquisition was done primarily to

00:37:00,900 --> 00:37:07,680
bolster the security of embed OS and

00:37:04,080 --> 00:37:12,570
ensure that there is a proper ssl

00:37:07,680 --> 00:37:18,870
library available for use the external

00:37:12,570 --> 00:37:22,830
usage support should be maintained I'm

00:37:18,870 --> 00:37:24,900
not heard any word on them dropping any

00:37:22,830 --> 00:37:27,290
support for other architectures or

00:37:24,900 --> 00:37:27,290
platforms

00:37:32,239 --> 00:37:34,899
clucks

00:37:36,090 --> 00:37:43,690
really again or less that's time sorry

00:37:40,330 --> 00:37:46,869
and thank very much okay I'm gonna ask

00:37:43,690 --> 00:37:49,450
you anyway if not I'll ask your beer so

00:37:46,869 --> 00:37:51,670
cool so why do in bed at all why not run

00:37:49,450 --> 00:37:55,200
the Linux kernel strip it down and just

00:37:51,670 --> 00:37:55,200
put the device drivers into place

00:37:58,260 --> 00:38:08,230
because the wonderful wizard of oz there

00:38:02,770 --> 00:38:10,750
are whilst it's possible to strip

00:38:08,230 --> 00:38:16,510
colonel down and we'd after on you see

00:38:10,750 --> 00:38:20,290
Linux AccessNow mm you it it just

00:38:16,510 --> 00:38:28,440
becomes more of a headache having an

00:38:20,290 --> 00:38:31,599
artists was the best fit for the job the

00:38:28,440 --> 00:38:38,170
amount of modifications that would have

00:38:31,599 --> 00:38:43,180
been needed to standard Linux the

00:38:38,170 --> 00:38:46,830
overhead on that from a back office

00:38:43,180 --> 00:38:49,930
perspective maintenance and development

00:38:46,830 --> 00:38:52,350
would have been too high there was

00:38:49,930 --> 00:38:56,410
already expertise in the artists world

00:38:52,350 --> 00:39:02,680
that we could easily tap into it was

00:38:56,410 --> 00:39:05,100
just a much easier fit to get to market

00:39:02,680 --> 00:39:05,100
quickly

00:39:08,450 --> 00:39:11,109
maybe

00:39:11,180 --> 00:39:15,579
so am Marcus this morning I was actually

00:39:13,700 --> 00:39:20,630
talking about enabling some of those

00:39:15,579 --> 00:39:24,290
platforms to run linux and the the issue

00:39:20,630 --> 00:39:27,770
is that you need about 4 megabytes of

00:39:24,290 --> 00:39:29,329
RAM to actually run a linux kernel plus

00:39:27,770 --> 00:39:32,510
anything that you actually want to run

00:39:29,329 --> 00:39:38,540
in user space and some of those devices

00:39:32,510 --> 00:39:42,109
they have like you know 144 256 k of of

00:39:38,540 --> 00:39:45,740
SRAM and no external sdram or anything

00:39:42,109 --> 00:39:50,890
plus well if you're lucky you have 2 mb

00:39:45,740 --> 00:39:50,890
of flash storage usually less

00:39:57,160 --> 00:40:03,250
quite possibly yeah I mean that's what

00:40:01,510 --> 00:40:05,530
they may have today but you know in a

00:40:03,250 --> 00:40:08,109
year from now they'll have to 10 times

00:40:05,530 --> 00:40:11,319
as much for less than half the price if

00:40:08,109 --> 00:40:14,650
we wait any a's time then we could be

00:40:11,319 --> 00:40:17,140
like 10 years 1 year but yeah i'm not

00:40:14,650 --> 00:40:24,490
saying you should wait it's just it

00:40:17,140 --> 00:40:26,349
seems that we're going back to you know

00:40:24,490 --> 00:40:29,020
oh we need something for the arm

00:40:26,349 --> 00:40:31,720
community needs something special and so

00:40:29,020 --> 00:40:35,440
we create something special after after

00:40:31,720 --> 00:40:38,710
the arm community has spend last three

00:40:35,440 --> 00:40:41,920
years getting rid of we are so special

00:40:38,710 --> 00:40:43,960
in putting stuff up stream now you're

00:40:41,920 --> 00:40:47,770
starting the whole cycle over again and

00:40:43,960 --> 00:40:50,260
seemed kind of like the definition of

00:40:47,770 --> 00:40:53,950
insanity in a way but we're all special

00:40:50,260 --> 00:41:01,650
in our own way well we know about that

00:40:53,950 --> 00:41:01,650
that's okay yeah I mean it's altos is

00:41:01,740 --> 00:41:10,450
you know will Tom os's are used quite

00:41:05,559 --> 00:41:15,480
extensively on the m-class platform

00:41:10,450 --> 00:41:22,029
whether it be within automotive industry

00:41:15,480 --> 00:41:27,130
IOT there are multiple valid use cases

00:41:22,029 --> 00:41:32,200
for real-time OS versus a standard Linux

00:41:27,130 --> 00:41:38,160
tag it may be possible in the years time

00:41:32,200 --> 00:41:38,160
to just transport all the

00:41:40,599 --> 00:41:47,119
embed over to a standard Linux that I

00:41:43,750 --> 00:41:49,280
don't know I'm not directly involved in

00:41:47,119 --> 00:41:51,830
any of the embed development so I

00:41:49,280 --> 00:41:56,210
couldn't say on how much work that would

00:41:51,830 --> 00:42:00,680
take but it is something that has been

00:41:56,210 --> 00:42:03,530
raised and the decision was felt that

00:42:00,680 --> 00:42:07,280
for the time to market and getting in

00:42:03,530 --> 00:42:09,109
there now it was the sensible fit we are

00:42:07,280 --> 00:42:12,830
ensuring that we're as standards

00:42:09,109 --> 00:42:18,020
compliant as possible open protocols own

00:42:12,830 --> 00:42:22,030
standards so that you know there is

00:42:18,020 --> 00:42:28,190
possibility then to my great platform

00:42:22,030 --> 00:42:30,590
art words was it to Italy lebens or BS

00:42:28,190 --> 00:42:33,849
already sorry was it towards like

00:42:30,590 --> 00:42:37,970
compiler and stuff available the OAS

00:42:33,849 --> 00:42:40,040
they available in OBS and I think they

00:42:37,970 --> 00:42:42,920
are in OBS but it's online there's an

00:42:40,040 --> 00:42:45,589
online compiler I did package the piyo

00:42:42,920 --> 00:42:46,940
CD package and so far I don't have an

00:42:45,589 --> 00:42:48,800
embed device so I would be very

00:42:46,940 --> 00:42:50,390
interested in feedback that's also why i

00:42:48,800 --> 00:42:52,369
asked initially who of you is already

00:42:50,390 --> 00:42:55,910
using em bed so those of you who called

00:42:52,369 --> 00:42:58,490
board please try out the python 3 dash x

00:42:55,910 --> 00:43:01,160
OCD or python dash by OCT package and

00:42:58,490 --> 00:43:05,359
report whether it works if not followed

00:43:01,160 --> 00:43:07,430
reports or updates and so on and also as

00:43:05,359 --> 00:43:12,020
I mentioned this morning and you can use

00:43:07,430 --> 00:43:15,250
our GCC from the arm v7 repository for

00:43:12,020 --> 00:43:19,549
me said now repository to build

00:43:15,250 --> 00:43:23,079
44 cortex-m devices the only exception

00:43:19,549 --> 00:43:27,710
is that we don't have multi the lib GCC

00:43:23,079 --> 00:43:28,849
that means either you need to have the

00:43:27,710 --> 00:43:31,279
particular code that you're running

00:43:28,849 --> 00:43:33,049
needs to have certain you know assemblée

00:43:31,279 --> 00:43:38,150
files in implementing certain intrinsic

00:43:33,049 --> 00:43:43,400
functions from GCC or you need to to

00:43:38,150 --> 00:43:46,510
build that what binutils definitely is

00:43:43,400 --> 00:43:46,510
able to do

00:43:48,430 --> 00:43:56,370
almost that's it for the questions

00:43:57,500 --> 00:44:03,520
I remember not I do have one myself so

00:44:05,290 --> 00:44:11,210
beyond embed even you know the I OTS

00:44:08,780 --> 00:44:15,470
seems to be propagating this idea that

00:44:11,210 --> 00:44:18,380
all devices need to to communicate

00:44:15,470 --> 00:44:20,620
wirelessly with each other and obviously

00:44:18,380 --> 00:44:23,180
arms interest is getting like em

00:44:20,620 --> 00:44:27,410
royalties from from the processor sold

00:44:23,180 --> 00:44:30,590
but if those processors really grow as

00:44:27,410 --> 00:44:33,050
arm predicts doesn't that caused a huge

00:44:30,590 --> 00:44:35,240
jam in the is M band I mean like are

00:44:33,050 --> 00:44:37,250
these all these new protocols that are

00:44:35,240 --> 00:44:39,500
being developed in the same range of

00:44:37,250 --> 00:44:42,820
frequencies fully compatible running

00:44:39,500 --> 00:44:42,820
alongside each other

00:44:46,319 --> 00:44:52,140
possibly but I think there's enough

00:44:52,829 --> 00:45:02,920
spectrum to be able to allow it for the

00:44:57,130 --> 00:45:04,329
short-term midterm you mentioned zen

00:45:02,920 --> 00:45:06,279
tech as one of their partners and

00:45:04,329 --> 00:45:08,650
they're trying to push this long-range

00:45:06,279 --> 00:45:10,180
technology which is using a different

00:45:08,650 --> 00:45:14,799
frequency from the others and saying

00:45:10,180 --> 00:45:16,450
that it's no less affected by by my

00:45:14,799 --> 00:45:19,599
noise and what so on and that you can

00:45:16,450 --> 00:45:21,729
have distances up to three kilometers

00:45:19,599 --> 00:45:24,539
covered but once people actually start

00:45:21,729 --> 00:45:30,940
adopting that I somewhat doubt that will

00:45:24,539 --> 00:45:34,019
remain the case possibly not possibly so

00:45:30,940 --> 00:45:34,019

YouTube URL: https://www.youtube.com/watch?v=r7635_baZac


