Title: OSC15 - Richard Brown - Pacemakers, Death by Storage, and Shooting Servers in the Head
Publication date: 2015-05-03
Playlist: openSUSE Conference 2015
Description: 
	This session will be an introduction to High Availability clustering, which is available in openSUSE and the SUSE Linux Enterprise High Availability Extension.
The talk will explain the basic concepts of high availability clustering, such as the Pacemaker Resource Manager, Corosync Cluster Engine, Resource Agents, Fencing Agents, and great acronyms like SBD (Storage Based Death) and STONITH (Shoot the other node in the head)

It will also give a very brief demonstration on how easy it is to setup a simple 2 node HA cluster on openSUSE 13.2 or Tumbleweed.
Captions: 
	00:00:00,000 --> 00:00:04,500
I'm here to talk to you about why

00:00:01,079 --> 00:00:07,710
clustering is awesome but first I

00:00:04,500 --> 00:00:09,150
thought I'd kind of explain why I'm here

00:00:07,710 --> 00:00:11,660
talking about this because obviously

00:00:09,150 --> 00:00:13,679
most of you know me as an opensuse guy

00:00:11,660 --> 00:00:16,460
you know so what am i doing talking

00:00:13,679 --> 00:00:18,660
about a che and all that fun stuff so

00:00:16,460 --> 00:00:22,020
i've been working at susan out for two

00:00:18,660 --> 00:00:24,150
years what other two years and mainly as

00:00:22,020 --> 00:00:26,279
a QA engineer mainly testing the h a

00:00:24,150 --> 00:00:29,939
high-availability stack inside seated

00:00:26,279 --> 00:00:33,989
enterprise and of course more recently

00:00:29,939 --> 00:00:37,129
also testing with open QA but really

00:00:33,989 --> 00:00:41,070
I've been for the last 13 years now

00:00:37,129 --> 00:00:43,200
working as a sysadmin and working with a

00:00:41,070 --> 00:00:46,500
che we work with my college where I used

00:00:43,200 --> 00:00:48,570
to work we were really early adopters of

00:00:46,500 --> 00:00:50,850
high availability clustering I mean

00:00:48,570 --> 00:00:54,239
we're talking about the time like when I

00:00:50,850 --> 00:00:56,190
scuzzy was first invented before i was

00:00:54,239 --> 00:00:58,500
using linux so we had netware servers

00:00:56,190 --> 00:01:00,510
and i was trying to get I scuzzy running

00:00:58,500 --> 00:01:02,969
on that way and I phoned up novelle and

00:01:00,510 --> 00:01:04,920
they said I was crazy so I built it

00:01:02,969 --> 00:01:07,110
anyway and then ended up with this

00:01:04,920 --> 00:01:11,580
really weird cluster of machines they

00:01:07,110 --> 00:01:14,040
had hey five machines running to storage

00:01:11,580 --> 00:01:16,110
boxes all these wonderful high

00:01:14,040 --> 00:01:21,270
availability stuff so I could run all of

00:01:16,110 --> 00:01:24,900
my services at my university on this

00:01:21,270 --> 00:01:27,450
bizarre hybrid netware monstrosity and

00:01:24,900 --> 00:01:28,979
then linux came along about three years

00:01:27,450 --> 00:01:30,090
after i started doing that and that's

00:01:28,979 --> 00:01:33,150
about the same time i started

00:01:30,090 --> 00:01:35,369
contributing to opensuse so for me linux

00:01:33,150 --> 00:01:37,040
hey CheY opensuse have all kind of got

00:01:35,369 --> 00:01:39,270
merged in my head in the same way

00:01:37,040 --> 00:01:42,299
because that's kind of how I got started

00:01:39,270 --> 00:01:45,000
with linux you immediately replaced all

00:01:42,299 --> 00:01:46,799
of our net web boxes with linux ice cuz

00:01:45,000 --> 00:01:49,140
he actually started working bacala then

00:01:46,799 --> 00:01:52,439
as well so i could actually put load

00:01:49,140 --> 00:01:53,729
onto my clusters and you know that's

00:01:52,439 --> 00:01:56,180
sort of the story of how i got started

00:01:53,729 --> 00:02:00,119
all this so now i'm talking about a che

00:01:56,180 --> 00:02:04,439
many years later running on opensuse and

00:02:00,119 --> 00:02:06,479
honestly so why do we need a che why do

00:02:04,439 --> 00:02:09,989
we need a keyboard that works there we

00:02:06,479 --> 00:02:12,000
go why do we need high availability what

00:02:09,989 --> 00:02:13,470
is it so can anybody raise a hand are

00:02:12,000 --> 00:02:16,280
you using a che

00:02:13,470 --> 00:02:19,550
mustering in any kind of way at all

00:02:16,280 --> 00:02:23,010
looks very chaste the Microsoft won a

00:02:19,550 --> 00:02:24,720
few hey che proxy which isn't really

00:02:23,010 --> 00:02:26,460
what I'm talking about here but is a

00:02:24,720 --> 00:02:29,100
high-availability things okay a few

00:02:26,460 --> 00:02:31,650
people who has no idea about what I'm

00:02:29,100 --> 00:02:33,300
talking about so far you know no idea

00:02:31,650 --> 00:02:37,200
about what clustering is wrong but you

00:02:33,300 --> 00:02:39,030
don't count you write it but yeah there

00:02:37,200 --> 00:02:41,550
we go so yeah I'll talk a little bit

00:02:39,030 --> 00:02:43,920
about why we need it a bit about how it

00:02:41,550 --> 00:02:45,330
works and i'll show you how to you can

00:02:43,920 --> 00:02:53,370
install it and get it started running on

00:02:45,330 --> 00:02:54,690
opensuse so what is hey che it's high

00:02:53,370 --> 00:02:56,190
availability I'm going to keep on

00:02:54,690 --> 00:02:58,140
calling at AJ because high availability

00:02:56,190 --> 00:03:01,709
will make this talk 25 minutes longer if

00:02:58,140 --> 00:03:03,180
I keep on saying it all the dough I was

00:03:01,709 --> 00:03:05,880
looking up the Wikipedia definition of

00:03:03,180 --> 00:03:08,810
this and the Wikipedia definition of

00:03:05,880 --> 00:03:12,510
high availability is completely useless

00:03:08,810 --> 00:03:14,670
the definition of availability is up

00:03:12,510 --> 00:03:17,400
time divided by total time but this

00:03:14,670 --> 00:03:19,739
equation is not practical so you must

00:03:17,400 --> 00:03:23,610
substitute or time- downtime blah blah

00:03:19,739 --> 00:03:26,519
blah blah blah this is why you install a

00:03:23,610 --> 00:03:29,489
J you want everything to just keep on

00:03:26,519 --> 00:03:31,860
working and nothing to break ever on all

00:03:29,489 --> 00:03:33,690
of your servers all of your all your

00:03:31,860 --> 00:03:35,250
systems you just want everything to keep

00:03:33,690 --> 00:03:38,820
on working to your users don't find you

00:03:35,250 --> 00:03:40,980
up and start screaming at you but they

00:03:38,820 --> 00:03:43,980
will anyway but you know maybe for this

00:03:40,980 --> 00:03:45,090
a little bit shorter so when I first

00:03:43,980 --> 00:03:46,200
talked about this presentation I

00:03:45,090 --> 00:03:48,480
immediately got people raising their

00:03:46,200 --> 00:03:50,190
hands and saying yeah but linux is

00:03:48,480 --> 00:03:53,549
already stable it makes is perfect it

00:03:50,190 --> 00:03:56,880
does everything fine you know and okay i

00:03:53,549 --> 00:03:58,530
work in QA I should be saying now that

00:03:56,880 --> 00:04:02,600
everything I released is perfectly state

00:03:58,530 --> 00:04:05,220
one has no bugs but that's not true

00:04:02,600 --> 00:04:07,170
software does have bugs and sometimes

00:04:05,220 --> 00:04:10,019
those bugs end up impacting services and

00:04:07,170 --> 00:04:11,670
a che can actually surprisingly save you

00:04:10,019 --> 00:04:14,340
quite a lot without there's been plenty

00:04:11,670 --> 00:04:16,470
of times I've had issues with linux

00:04:14,340 --> 00:04:18,390
boxes having weird colonel issues hard

00:04:16,470 --> 00:04:20,190
locks or that kind of stuff and a che

00:04:18,390 --> 00:04:21,599
because of the way it works it doesn't

00:04:20,190 --> 00:04:24,599
really care where the problems are Ridge

00:04:21,599 --> 00:04:26,039
mating from it will actually dive in and

00:04:24,599 --> 00:04:26,400
save the day kill the machine and you

00:04:26,039 --> 00:04:30,060
can keep

00:04:26,400 --> 00:04:32,250
running again um a friend of mine is a

00:04:30,060 --> 00:04:34,949
really heavy bsd user so at this point i

00:04:32,250 --> 00:04:39,000
like to quote theatre at with this you

00:04:34,949 --> 00:04:41,400
know linux is never about quality which

00:04:39,000 --> 00:04:43,410
of course isn't entirely true but

00:04:41,400 --> 00:04:45,240
there's an awful lot of moving parts in

00:04:43,410 --> 00:04:46,410
linux i mean in opensuse now is at eight

00:04:45,240 --> 00:04:50,370
thousand packages in the main

00:04:46,410 --> 00:04:52,229
distribution having something like aj

00:04:50,370 --> 00:04:53,639
they're giving you an extra way of

00:04:52,229 --> 00:04:57,060
covering keeping your services running

00:04:53,639 --> 00:05:00,000
is very very nice to have but really war

00:04:57,060 --> 00:05:01,830
so we're not talking about software when

00:05:00,000 --> 00:05:03,780
we're talking about a che we're normally

00:05:01,830 --> 00:05:06,870
talking about hardware failures your

00:05:03,780 --> 00:05:11,280
servers in a data center somewhere or

00:05:06,870 --> 00:05:12,840
your home and this happens and this

00:05:11,280 --> 00:05:16,080
isn't a photo of actually happening to

00:05:12,840 --> 00:05:19,349
me luckily but i've actually seen this

00:05:16,080 --> 00:05:21,510
for five times now in production with i

00:05:19,349 --> 00:05:24,360
allus for some reason always SATA hard

00:05:21,510 --> 00:05:26,789
this Iran I de hadas for years and they

00:05:24,360 --> 00:05:30,419
never caught fire but I've had SATA hard

00:05:26,789 --> 00:05:31,710
disk do this on me now three times one

00:05:30,419 --> 00:05:33,510
was really cool colleague was sitting in

00:05:31,710 --> 00:05:36,150
an office and I just heard this scream

00:05:33,510 --> 00:05:37,979
and look round the corner and then this

00:05:36,150 --> 00:05:40,169
huge puff of smoke flying out of his

00:05:37,979 --> 00:05:41,909
office and the really funny thing is the

00:05:40,169 --> 00:05:44,130
cloud of smoke goes right over the fire

00:05:41,909 --> 00:05:47,669
alarm detective in the office and the

00:05:44,130 --> 00:05:49,710
didn't set the fire alarm off so like

00:05:47,669 --> 00:05:51,210
okay that's kind of weird so one fire

00:05:49,710 --> 00:05:54,900
extinguisher later we had a broken hard

00:05:51,210 --> 00:05:56,550
disk and yeah hey Jay who is kind of

00:05:54,900 --> 00:05:59,490
really built to cover these corner these

00:05:56,550 --> 00:06:01,080
are wonderful hardware failures I've got

00:05:59,490 --> 00:06:05,820
a video here of the worst hardware

00:06:01,080 --> 00:06:09,510
failure I've ever seen which this was

00:06:05,820 --> 00:06:12,360
actually one of my first Linux cluster

00:06:09,510 --> 00:06:14,490
production servers and I logged in one I

00:06:12,360 --> 00:06:16,080
came in one day and luckily this is the

00:06:14,490 --> 00:06:18,389
perfect age a success story my phone

00:06:16,080 --> 00:06:20,760
wasn't ringing everything was fine and I

00:06:18,389 --> 00:06:24,030
log in to nag yes and this cluster notes

00:06:20,760 --> 00:06:27,270
dead someone okay weird fire up the

00:06:24,030 --> 00:06:30,349
serial console nothing we boot it by the

00:06:27,270 --> 00:06:33,659
power switch nothing get it out the lab

00:06:30,349 --> 00:06:35,549
plug it into a connector and that's the

00:06:33,659 --> 00:06:37,989
bios screen now

00:06:35,549 --> 00:06:39,639
never figured out what it was we ended

00:06:37,989 --> 00:06:40,959
up replacing practically every single

00:06:39,639 --> 00:06:43,719
part in the machine so it was a whole

00:06:40,959 --> 00:06:46,119
new machine what we're finished but this

00:06:43,719 --> 00:06:47,649
is yha is awesome because you can have

00:06:46,119 --> 00:06:51,009
failures like this which you can never

00:06:47,649 --> 00:06:53,799
explain and your machine doesn't matter

00:06:51,009 --> 00:06:56,709
anymore you can just keep the service

00:06:53,799 --> 00:07:00,489
running keep everyone happy people don't

00:06:56,709 --> 00:07:02,589
phone up and moan about it too much but

00:07:00,489 --> 00:07:06,669
also it's not just software and hardware

00:07:02,589 --> 00:07:09,909
they can let you down these systems are

00:07:06,669 --> 00:07:13,319
running somewhere people go to these

00:07:09,909 --> 00:07:15,879
places normally workmen in data centers

00:07:13,319 --> 00:07:19,179
were command have things like power saws

00:07:15,879 --> 00:07:20,859
which cut through network cables which

00:07:19,179 --> 00:07:22,599
is really not fun when that happens to

00:07:20,859 --> 00:07:25,539
you and half your cluster suddenly

00:07:22,599 --> 00:07:27,759
disappears this has happened to me twice

00:07:25,539 --> 00:07:29,849
I guess I'm just really unlucky when we

00:07:27,759 --> 00:07:33,309
have people come into our data centers

00:07:29,849 --> 00:07:35,019
and we've also had plenty of cases well

00:07:33,309 --> 00:07:36,519
most server rooms at least most server

00:07:35,019 --> 00:07:39,849
rooms that I've ever found if they're on

00:07:36,519 --> 00:07:43,659
location at a office normally end up

00:07:39,849 --> 00:07:45,219
being in the basement and if you're

00:07:43,659 --> 00:07:46,269
really unlucky that basement normally

00:07:45,219 --> 00:07:48,759
has quite a lot of plumbing going

00:07:46,269 --> 00:07:50,049
through it you get a plumber come in and

00:07:48,759 --> 00:07:52,419
suddenly you have lots of very web

00:07:50,049 --> 00:07:55,539
service so this is also a very good use

00:07:52,419 --> 00:07:58,569
case for geo clustering having one

00:07:55,539 --> 00:08:00,249
cluster of servers in one location and

00:07:58,569 --> 00:08:02,979
another cluster somewhere very very very

00:08:00,249 --> 00:08:05,559
far away and this is all stuff you can

00:08:02,979 --> 00:08:11,259
do with the H a software today that we

00:08:05,559 --> 00:08:16,979
have in opensuse so when I was growing

00:08:11,259 --> 00:08:21,879
up I was a big fan of the 18 h a team

00:08:16,979 --> 00:08:22,929
but yeah service fail a chaise covering

00:08:21,879 --> 00:08:26,469
service so when we're talking about

00:08:22,929 --> 00:08:30,819
actually deploying hey CheY and using it

00:08:26,469 --> 00:08:32,259
in production we don't actually care

00:08:30,819 --> 00:08:34,509
about the server it's a bit it's a bit

00:08:32,259 --> 00:08:37,360
of a cloud mentality you know servers

00:08:34,509 --> 00:08:38,769
are expendable you want them to explode

00:08:37,360 --> 00:08:40,149
you want them to you know you expect

00:08:38,769 --> 00:08:42,669
them to explode you expect them to fail

00:08:40,149 --> 00:08:45,009
and you want to be able to walk away

00:08:42,669 --> 00:08:47,410
from the carnage and your users carry on

00:08:45,009 --> 00:08:50,620
working with no problems

00:08:47,410 --> 00:08:52,839
so the model in a che is basically all

00:08:50,620 --> 00:08:54,129
of your services are what you're

00:08:52,839 --> 00:08:56,980
configuring in your high availability

00:08:54,129 --> 00:08:59,470
software and it's so services which are

00:08:56,980 --> 00:09:03,160
defined and that's what's moving around

00:08:59,470 --> 00:09:04,480
your cluster so it's still working so

00:09:03,160 --> 00:09:06,069
when something fails us the server

00:09:04,480 --> 00:09:08,019
disappears everything kind of goes like

00:09:06,069 --> 00:09:11,399
this and get it slow distributed across

00:09:08,019 --> 00:09:11,399
all of the other machines in the cluster

00:09:12,660 --> 00:09:16,689
so in a very simple diagram this is

00:09:15,579 --> 00:09:20,519
actually straight from the pacemaker

00:09:16,689 --> 00:09:23,860
documentation this is how a che works

00:09:20,519 --> 00:09:26,649
you have in this case three physical

00:09:23,860 --> 00:09:28,779
servers and in a traditional environment

00:09:26,649 --> 00:09:30,250
with old-style standalone servers then

00:09:28,779 --> 00:09:32,800
and that would be your web server your

00:09:30,250 --> 00:09:35,500
database server and you know maybe some

00:09:32,800 --> 00:09:38,139
spare machine if you're lucky on top of

00:09:35,500 --> 00:09:39,519
that all you have to install is

00:09:38,139 --> 00:09:42,160
basically two sets of software called

00:09:39,519 --> 00:09:44,620
pacemaker and coho sink cover sink is

00:09:42,160 --> 00:09:45,730
the then it could get me we're going to

00:09:44,620 --> 00:09:47,829
get this wrong you can correct me but

00:09:45,730 --> 00:09:49,149
I'll be really embarrassed oh I think is

00:09:47,829 --> 00:09:51,310
a communication layer which basically

00:09:49,149 --> 00:09:53,019
keeps all of the clusters machines

00:09:51,310 --> 00:09:55,149
talking to each other make sure that

00:09:53,019 --> 00:09:56,230
they're there they're awake that they

00:09:55,149 --> 00:09:58,630
can see each other when the network's

00:09:56,230 --> 00:10:00,519
behaving properly and pacemaker is the

00:09:58,630 --> 00:10:02,589
service manager so the pace if you want

00:10:00,519 --> 00:10:04,269
to think of it very simply chorus things

00:10:02,589 --> 00:10:06,819
kind of checking everything below that

00:10:04,269 --> 00:10:08,319
red line is working and pacemaker is

00:10:06,819 --> 00:10:12,639
actually what's defining everything in

00:10:08,319 --> 00:10:14,920
the green boxes and so inside pacemaker

00:10:12,639 --> 00:10:17,199
you then configure your apache server

00:10:14,920 --> 00:10:19,350
and you're basically saying okay this is

00:10:17,199 --> 00:10:21,399
my apache server this is its config and

00:10:19,350 --> 00:10:23,319
also you normally attach an IP address

00:10:21,399 --> 00:10:25,509
to that as well because of course if

00:10:23,319 --> 00:10:26,920
this is moving around your cluster you

00:10:25,509 --> 00:10:29,050
can't give it the IP address of the

00:10:26,920 --> 00:10:31,420
actual web server that might disappear

00:10:29,050 --> 00:10:33,220
so you give it a portable IP address

00:10:31,420 --> 00:10:35,529
which the machine has in addition to its

00:10:33,220 --> 00:10:36,850
local IP address and that's what you

00:10:35,529 --> 00:10:39,189
move around the cluster with this

00:10:36,850 --> 00:10:41,559
resource so your users can always get to

00:10:39,189 --> 00:10:43,149
the same web server and not realize that

00:10:41,559 --> 00:10:46,509
the michigan was on blew up 10 minutes

00:10:43,149 --> 00:10:48,160
earlier and you can have ridiculous

00:10:46,509 --> 00:10:50,399
numbers of service here for the state of

00:10:48,160 --> 00:10:53,709
this discussion I'm keeping this simple

00:10:50,399 --> 00:10:56,110
the total number we currently support in

00:10:53,709 --> 00:10:59,470
pacemaker is 32 machines on a maximum

00:10:56,110 --> 00:11:00,460
cluster and the number of resources I

00:10:59,470 --> 00:11:03,640
don't think we've

00:11:00,460 --> 00:11:05,680
test well I've tested it past 255 so you

00:11:03,640 --> 00:11:09,400
can do crazy numbers of resources if you

00:11:05,680 --> 00:11:11,950
feel like it and quite a lot of these

00:11:09,400 --> 00:11:14,410
resources are already effectively

00:11:11,950 --> 00:11:16,450
pre-configured in the software so all

00:11:14,410 --> 00:11:20,110
you have to really say is it's an Apache

00:11:16,450 --> 00:11:22,030
server there's a conflict done and HJ

00:11:20,110 --> 00:11:24,430
will take care of the rest there's not

00:11:22,030 --> 00:11:28,060
much scripting or complicated digging

00:11:24,430 --> 00:11:30,100
around involved so when a server files

00:11:28,060 --> 00:11:31,390
let's say you have one of these physical

00:11:30,100 --> 00:11:34,000
servers so in this case one of the

00:11:31,390 --> 00:11:37,150
orange boxes and one of these servers is

00:11:34,000 --> 00:11:40,690
sitting there doing both Apache and your

00:11:37,150 --> 00:11:42,940
database when it fails pacemaker can if

00:11:40,690 --> 00:11:45,250
you want it to actually then kind of

00:11:42,940 --> 00:11:46,600
split that load so the Apache server

00:11:45,250 --> 00:11:48,130
goes somewhere the web server goes

00:11:46,600 --> 00:11:50,070
somewhere else sorry the mouse the

00:11:48,130 --> 00:11:52,300
database server go somewhere else and

00:11:50,070 --> 00:11:54,520
you're keeping that load so you don't

00:11:52,300 --> 00:11:57,190
have a situation like you can with some

00:11:54,520 --> 00:11:59,140
HH stacks where one server fails

00:11:57,190 --> 00:12:01,390
everything falls over to your backup

00:11:59,140 --> 00:12:04,840
server and then your backup server and

00:12:01,390 --> 00:12:06,460
you know ends up being way too slow way

00:12:04,840 --> 00:12:08,950
too laggy everything just goes worse and

00:12:06,460 --> 00:12:10,630
you've come from you know a broken

00:12:08,950 --> 00:12:12,040
machine to a really slow machine which

00:12:10,630 --> 00:12:16,660
user still don't like because it's just

00:12:12,040 --> 00:12:20,850
too slow so building a very simple

00:12:16,660 --> 00:12:23,260
cluster all you need is two machines

00:12:20,850 --> 00:12:26,230
it's not an ideal scenario and I'll go

00:12:23,260 --> 00:12:29,980
into detail about that at the end but we

00:12:26,230 --> 00:12:33,850
need is two basic service and on top of

00:12:29,980 --> 00:12:35,590
that you keeping with the traditional

00:12:33,850 --> 00:12:37,930
example you have a web server like

00:12:35,590 --> 00:12:42,240
Apache and maybe a file server like

00:12:37,930 --> 00:12:45,640
samba and then something goes wrong

00:12:42,240 --> 00:12:47,110
server number one fails might be a

00:12:45,640 --> 00:12:50,020
hardware failure might be somebody

00:12:47,110 --> 00:12:51,850
cutting a cable who knows doesn't really

00:12:50,020 --> 00:12:54,400
care pacemaker will detective Korsak

00:12:51,850 --> 00:12:55,680
will detect the factor that the cluster

00:12:54,400 --> 00:13:00,220
cluster node is no longer there

00:12:55,680 --> 00:13:02,230
pacemaker does this wonderful feet step

00:13:00,220 --> 00:13:04,510
called shoot the other node in their

00:13:02,230 --> 00:13:08,440
head istana 'the we have wonderful

00:13:04,510 --> 00:13:11,139
acronyms in a che and that sec that

00:13:08,440 --> 00:13:13,389
server that's failed will then be killed

00:13:11,139 --> 00:13:15,730
the mechanism of how that is depends on

00:13:13,389 --> 00:13:17,980
how you want to configure it there's

00:13:15,730 --> 00:13:20,259
ways were effectively a poison pill get

00:13:17,980 --> 00:13:22,389
sent in the kernel panics itself you can

00:13:20,259 --> 00:13:24,999
point it at power switches you can make

00:13:22,389 --> 00:13:26,470
it SSH and just do in it zero there's

00:13:24,999 --> 00:13:30,220
plenty of ways of killing a machine and

00:13:26,470 --> 00:13:32,589
hey CheY kind of supports all of them so

00:13:30,220 --> 00:13:33,939
you end up with the situation where both

00:13:32,589 --> 00:13:38,019
your web server when your patchy server

00:13:33,939 --> 00:13:41,559
is running on the same box but the web

00:13:38,019 --> 00:13:45,429
server still needs its files and they

00:13:41,559 --> 00:13:46,959
were left on the other machine so you

00:13:45,429 --> 00:13:49,389
have to worry about the storage as well

00:13:46,959 --> 00:13:52,299
and this is one thing that a lot of H a

00:13:49,389 --> 00:13:53,949
beginners forget about is you know and

00:13:52,299 --> 00:13:55,839
then it gets really messy because yeah

00:13:53,949 --> 00:13:57,339
something fails and doesn't have the

00:13:55,839 --> 00:13:58,839
same you know if you don't have the same

00:13:57,339 --> 00:14:01,179
version of the website running on the

00:13:58,839 --> 00:14:02,739
second server well you use a suddenly

00:14:01,179 --> 00:14:05,949
get a nasty old version and it all goes

00:14:02,739 --> 00:14:09,279
horribly wrong so there's plenty of ways

00:14:05,949 --> 00:14:11,949
of dealing with this issue and there's

00:14:09,279 --> 00:14:16,329
certain recommendations but in the very

00:14:11,949 --> 00:14:18,519
easiest one it's just use a sink define

00:14:16,329 --> 00:14:21,819
you folk via folders that you're using

00:14:18,519 --> 00:14:23,649
for your failing over services and make

00:14:21,819 --> 00:14:26,499
sure that both machines keep that kind

00:14:23,649 --> 00:14:29,499
of in sync with each other it's not the

00:14:26,499 --> 00:14:31,569
most simple way where Muslim most ideal

00:14:29,499 --> 00:14:35,350
way but it does the job and it's really

00:14:31,569 --> 00:14:37,299
good for basic to know clusters in a

00:14:35,350 --> 00:14:40,169
more advanced situation where you might

00:14:37,299 --> 00:14:43,720
want to have an absolute certainty that

00:14:40,169 --> 00:14:45,970
the storage on both nodes is absolutely

00:14:43,720 --> 00:14:49,239
identical on the block level there's a

00:14:45,970 --> 00:14:50,709
very nice technology called drbd which

00:14:49,239 --> 00:14:53,919
basically lets you take a block device

00:14:50,709 --> 00:14:55,539
so any hard their school any block

00:14:53,919 --> 00:14:57,489
device at all and basically transmit

00:14:55,539 --> 00:14:59,860
those blocks over the network to another

00:14:57,489 --> 00:15:03,100
block device as a network grade one

00:14:59,860 --> 00:15:05,410
mirror basically this is incredibly

00:15:03,100 --> 00:15:07,689
useful at the moment it only supports to

00:15:05,410 --> 00:15:09,939
note clusters I think the plans still to

00:15:07,689 --> 00:15:14,199
fix that so it can do multiple nodes but

00:15:09,939 --> 00:15:16,869
I'm not sure if it's there yet and that

00:15:14,199 --> 00:15:18,549
covers two no trusters pretty nicely but

00:15:16,869 --> 00:15:21,309
in our deal situation what you really

00:15:18,549 --> 00:15:22,889
want is some kind of shared disk

00:15:21,309 --> 00:15:26,040
something in between so

00:15:22,889 --> 00:15:29,309
when I started out doing this I pretty

00:15:26,040 --> 00:15:30,899
much always liked I scuzzy even when it

00:15:29,309 --> 00:15:33,329
was a bit on the slow side because you

00:15:30,899 --> 00:15:35,160
can just you know at the end get around

00:15:33,329 --> 00:15:38,819
it by using fancy tricks on networks

00:15:35,160 --> 00:15:40,619
like pork bonding and aggregation and

00:15:38,819 --> 00:15:42,660
just gonna throw more network cables at

00:15:40,619 --> 00:15:44,100
it and the problem goes away well these

00:15:42,660 --> 00:15:46,649
days you can just throw 10 gig at it and

00:15:44,100 --> 00:15:49,679
it bottom also goes away but fibre

00:15:46,649 --> 00:15:52,079
channel whatever or the various

00:15:49,679 --> 00:15:54,569
different shared a network of shared San

00:15:52,079 --> 00:15:56,429
approaches all kind of fit in here and

00:15:54,569 --> 00:15:58,799
if you're you know really on the cutting

00:15:56,429 --> 00:16:00,869
edge of stuff of course things like chef

00:15:58,799 --> 00:16:04,079
like Susur having this easy storage

00:16:00,869 --> 00:16:05,939
product would be a natural fit here I

00:16:04,079 --> 00:16:07,980
don't know anybody who's done that yet

00:16:05,939 --> 00:16:09,480
if somebody has please let me know

00:16:07,980 --> 00:16:13,290
because I think that we really awesome

00:16:09,480 --> 00:16:15,720
to write about but yeah that's something

00:16:13,290 --> 00:16:18,779
shared in between is the perfect

00:16:15,720 --> 00:16:22,290
approach for H a cluster because then

00:16:18,779 --> 00:16:26,179
you have a chance of doing this which is

00:16:22,290 --> 00:16:30,230
in my opinion the perfect beginning

00:16:26,179 --> 00:16:35,309
situation for AJ with two node clusters

00:16:30,230 --> 00:16:36,959
you have a fundamental problem how do

00:16:35,309 --> 00:16:42,269
you know what how do you know which one

00:16:36,959 --> 00:16:43,709
died plus it one's dead howdy number one

00:16:42,269 --> 00:16:45,360
is dead how does it know how does

00:16:43,709 --> 00:16:49,019
machine number to know that it isn't the

00:16:45,360 --> 00:16:51,179
one that failed itself this is sort of

00:16:49,019 --> 00:16:53,730
the traditional split brain problem

00:16:51,179 --> 00:16:55,730
we're both machines are both monitoring

00:16:53,730 --> 00:16:58,199
each other and then when one goes wrong

00:16:55,730 --> 00:16:59,939
you don't necessarily know which one

00:16:58,199 --> 00:17:04,350
went wrong from the one that's still

00:16:59,939 --> 00:17:05,579
standing or put another way kind of like

00:17:04,350 --> 00:17:07,769
this scene in iron man 2 where they're

00:17:05,579 --> 00:17:09,569
both just beating down each other and in

00:17:07,769 --> 00:17:11,880
fact when you have Stalin involved at

00:17:09,569 --> 00:17:13,949
the end where the machine that fails

00:17:11,880 --> 00:17:15,510
gets killed by the other machine you

00:17:13,949 --> 00:17:19,380
kind of have a situation like this at

00:17:15,510 --> 00:17:21,299
the end and your cluster just kills

00:17:19,380 --> 00:17:23,370
itself because they both think they both

00:17:21,299 --> 00:17:25,769
failed and you've managed to break both

00:17:23,370 --> 00:17:29,549
machines so with the three no cluster

00:17:25,769 --> 00:17:31,110
you never have this problem because if

00:17:29,549 --> 00:17:32,690
one machine fails you have two of them

00:17:31,110 --> 00:17:35,220
they can say okay you're the dead one

00:17:32,690 --> 00:17:37,960
diet go away disappear

00:17:35,220 --> 00:17:40,269
have you have you get yourself shot in

00:17:37,960 --> 00:17:43,480
the head and everything carries our

00:17:40,269 --> 00:17:47,169
money so when it comes to building a

00:17:43,480 --> 00:17:49,480
cluster if you can afford it stick with

00:17:47,169 --> 00:17:52,080
odd-numbered nodes for has a problem too

00:17:49,480 --> 00:17:54,009
I mean if you had like with the the

00:17:52,080 --> 00:17:56,230
idiots cutting through the network cable

00:17:54,009 --> 00:17:58,629
problem I've had that where I had a four

00:17:56,230 --> 00:18:01,419
node cluster split in half and then I

00:17:58,629 --> 00:18:02,889
suddenly had 22 no clusters with storage

00:18:01,419 --> 00:18:07,600
list that was getting really really

00:18:02,889 --> 00:18:09,669
messy so build three node clusters world

00:18:07,600 --> 00:18:12,720
5 no clusters try and avoid even numbers

00:18:09,669 --> 00:18:15,249
if you can unless you're doing the whole

00:18:12,720 --> 00:18:18,100
drbd thing which you really need to

00:18:15,249 --> 00:18:19,779
stick with two nodes for that so but

00:18:18,100 --> 00:18:22,690
just be aware that you might have sort

00:18:19,779 --> 00:18:25,749
of folks failures which if it does

00:18:22,690 --> 00:18:30,669
happen you what's the point of

00:18:25,749 --> 00:18:33,909
installing KJ so installing a che on

00:18:30,669 --> 00:18:38,619
opensuse is actually surprisingly simple

00:18:33,909 --> 00:18:39,999
on tumbleweed or 13 to all you have to

00:18:38,619 --> 00:18:42,159
run there's no add-ons there's no of

00:18:39,999 --> 00:18:45,279
extra repos it's all in there in the

00:18:42,159 --> 00:18:47,499
main distribution is zipper in H a

00:18:45,279 --> 00:18:52,629
cluster bootstrap and this is

00:18:47,499 --> 00:18:55,269
effectively the nice cut down script

00:18:52,629 --> 00:18:57,149
wizard that automatically asks you all

00:18:55,269 --> 00:18:59,409
the questions you need to install a che

00:18:57,149 --> 00:19:00,940
so installing that package actually

00:18:59,409 --> 00:19:02,440
pulls down all the dependencies you need

00:19:00,940 --> 00:19:05,739
for the web interface and everything

00:19:02,440 --> 00:19:09,009
else inside a chain so on the first

00:19:05,739 --> 00:19:11,950
machine you log in you connect to it and

00:19:09,009 --> 00:19:13,899
you run a che cluster in it which I will

00:19:11,950 --> 00:19:15,489
show in a minute and this was it

00:19:13,899 --> 00:19:17,769
basically asks you all of the questions

00:19:15,489 --> 00:19:19,899
you need to set up your cluster and so

00:19:17,769 --> 00:19:21,999
if you're using shared storage and you

00:19:19,899 --> 00:19:23,259
want to use an SBD for detecting the

00:19:21,999 --> 00:19:25,989
split brain so you don't have that

00:19:23,259 --> 00:19:28,600
situation with two nodes it will ask you

00:19:25,989 --> 00:19:30,159
that question it asks you a few other

00:19:28,600 --> 00:19:31,749
things to be honest normally I just say

00:19:30,159 --> 00:19:34,539
yes to everything now so I can't remove

00:19:31,749 --> 00:19:36,369
what they all are in order and then

00:19:34,539 --> 00:19:38,830
that's it you end up with a one-load

00:19:36,369 --> 00:19:40,629
cluster which is totally useless but

00:19:38,830 --> 00:19:42,429
that's exactly what you need to then

00:19:40,629 --> 00:19:44,619
have your second and third nodes connect

00:19:42,429 --> 00:19:45,999
to so you end up with you're actually

00:19:44,619 --> 00:19:47,529
building your cluster and to connect

00:19:45,999 --> 00:19:49,020
those other nodes you just use H a

00:19:47,529 --> 00:19:53,080
cluster joint

00:19:49,020 --> 00:19:56,680
so now I do a very very quick demo of

00:19:53,080 --> 00:20:01,060
how that looks with one rough edge I

00:19:56,680 --> 00:20:05,830
have to avoid so separate in H a cluster

00:20:01,060 --> 00:20:13,720
bootstrap this machine's tumbleweed can

00:20:05,830 --> 00:20:16,690
you read that nope you can't wait is

00:20:13,720 --> 00:20:20,680
that readable now yeah and then we just

00:20:16,690 --> 00:20:24,100
make the let me just make the font

00:20:20,680 --> 00:20:26,730
bigger because it's important you can

00:20:24,100 --> 00:20:26,730
see the questions

00:20:35,740 --> 00:20:38,670
to do

00:20:44,070 --> 00:20:54,060
maybe there now I've probably made it

00:20:47,310 --> 00:20:56,780
too big yep okay let's just give up with

00:20:54,060 --> 00:20:56,780
that for a second

00:21:06,230 --> 00:21:12,669
while I'm messing around with this does

00:21:07,880 --> 00:21:12,669
anybody have any questions yes

00:21:16,809 --> 00:21:19,470
yep

00:21:28,830 --> 00:21:30,890
Oh

00:21:38,429 --> 00:21:42,690
so we found that we're actually by

00:21:40,590 --> 00:21:44,309
having it automatically shoot other

00:21:42,690 --> 00:21:46,350
nodes in the head and automatically fail

00:21:44,309 --> 00:21:50,220
things over we're finding much lower

00:21:46,350 --> 00:21:53,369
reliability overall in the system that's

00:21:50,220 --> 00:21:55,200
because it needs your hive LD software

00:21:53,369 --> 00:21:57,240
needs to be many orders of magnitude

00:21:55,200 --> 00:21:59,159
more reliable than the underlying

00:21:57,240 --> 00:22:02,369
systems or your false positive rate will

00:21:59,159 --> 00:22:05,009
be higher yeah so so which software were

00:22:02,369 --> 00:22:11,340
you using just a bee's was happy version

00:22:05,009 --> 00:22:13,619
1 and then early version 2 yeah ah it

00:22:11,340 --> 00:22:16,110
wasn't great back then softwares changed

00:22:13,619 --> 00:22:17,700
a lot since then luckily yes yeah but

00:22:16,110 --> 00:22:19,710
we've found is actually quite nice to

00:22:17,700 --> 00:22:21,149
have the monitoring system tell you when

00:22:19,710 --> 00:22:22,679
something wrong yeah and have the

00:22:21,149 --> 00:22:24,659
tooling in place to be able to manually

00:22:22,679 --> 00:22:27,029
make have a human make a decision about

00:22:24,659 --> 00:22:29,669
what dice that that's actually 11

00:22:27,029 --> 00:22:31,230
feature we do have in here so with like

00:22:29,669 --> 00:22:33,389
I said we pacemaker there's lots of

00:22:31,230 --> 00:22:35,820
different ways of killing that machine

00:22:33,389 --> 00:22:38,039
off with the Stalinist mechanisms so I

00:22:35,820 --> 00:22:40,980
mentioned obviously the split brain

00:22:38,039 --> 00:22:43,919
detector over storage SSH power switches

00:22:40,980 --> 00:22:46,379
etc one of those is a cotton by the

00:22:43,919 --> 00:22:48,330
exact term but it's effectively the

00:22:46,379 --> 00:22:50,909
human option so the monitoring system

00:22:48,330 --> 00:22:52,980
Flags it has failed but the system does

00:22:50,909 --> 00:22:55,110
nothing but then you just pop into your

00:22:52,980 --> 00:22:58,350
pacemaker and say okay it's really

00:22:55,110 --> 00:23:01,350
failed and you move it that way so I I

00:22:58,350 --> 00:23:03,179
used to use that back when the software

00:23:01,350 --> 00:23:05,399
was in that kind of slightly weird stage

00:23:03,179 --> 00:23:07,769
for me I've never have luckily never

00:23:05,399 --> 00:23:10,230
used to hate cluster stack that was that

00:23:07,769 --> 00:23:13,559
bad but I heard stories about paper help

00:23:10,230 --> 00:23:15,600
beat back then but yeah now I can't

00:23:13,559 --> 00:23:17,340
think of I can't think of a situation

00:23:15,600 --> 00:23:18,990
where I've had many false positives with

00:23:17,340 --> 00:23:22,039
any of this software or false negative

00:23:18,990 --> 00:23:25,740
when it fails it really has failed and

00:23:22,039 --> 00:23:28,860
you have lots of options like monetary

00:23:25,740 --> 00:23:31,169
actual monitoring of services so you can

00:23:28,860 --> 00:23:33,749
actually say okay is my website actually

00:23:31,169 --> 00:23:35,940
responding to users and use that as you

00:23:33,749 --> 00:23:38,759
favor your condition not just you know a

00:23:35,940 --> 00:23:40,259
random ping to the machine which you

00:23:38,759 --> 00:23:41,429
know in certain circumstances things

00:23:40,259 --> 00:23:44,429
might not be working but the website

00:23:41,429 --> 00:23:46,350
they're still fine so you know you can

00:23:44,429 --> 00:23:48,299
easily set up your HH stack to actually

00:23:46,350 --> 00:23:49,900
monitor the real service in the way that

00:23:48,299 --> 00:23:51,970
a user's going to see it

00:23:49,900 --> 00:23:53,470
and then okay you might have a

00:23:51,970 --> 00:23:55,000
transitional problem but at least it's a

00:23:53,470 --> 00:23:57,160
problem that the use of really suffered

00:23:55,000 --> 00:23:59,340
so it was probably worth killing the

00:23:57,160 --> 00:24:02,350
Machine off and moving it over thank you

00:23:59,340 --> 00:24:09,100
yeah so Paige a cluster bootstrap this

00:24:02,350 --> 00:24:11,920
is tumbleweed and now you ignore that

00:24:09,100 --> 00:24:13,540
ever because this is Hawk the web

00:24:11,920 --> 00:24:15,400
interface which at the moment is getting

00:24:13,540 --> 00:24:17,740
redesigned and at the moment is slightly

00:24:15,400 --> 00:24:19,360
broken and tumbleweed but I'm not

00:24:17,740 --> 00:24:23,070
demonstrating that and Christopher's

00:24:19,360 --> 00:24:28,990
demonstrating it tomorrow in which room

00:24:23,070 --> 00:24:31,510
second room at what time ok so did just

00:24:28,990 --> 00:24:33,690
before lunch tomorrow in that second

00:24:31,510 --> 00:24:36,520
room if you want to see the shiny new

00:24:33,690 --> 00:24:37,930
hawk web interface and how you can

00:24:36,520 --> 00:24:39,370
actually use it for diagnosing a problem

00:24:37,930 --> 00:24:41,710
on H a cluster Christopher's doing a

00:24:39,370 --> 00:24:47,680
talk in there so lucky I don't have to

00:24:41,710 --> 00:24:48,910
show it at the moment and I really

00:24:47,680 --> 00:24:50,890
should have put these packages on before

00:24:48,910 --> 00:24:53,820
but it's not that big we'll hopefully

00:24:50,890 --> 00:24:53,820
install quite quickly

00:24:58,570 --> 00:25:01,809
so yeah this is pulling through all the

00:25:00,490 --> 00:25:05,529
coercing sack all of pacemaker

00:25:01,809 --> 00:25:11,130
everything I need to get running there

00:25:05,529 --> 00:25:11,130
we are so H a cluster it

00:25:14,010 --> 00:25:17,340
and straightaways telling me that my

00:25:16,140 --> 00:25:19,200
machine is not set up properly I'm

00:25:17,340 --> 00:25:22,140
missing ntp and i haven't got my

00:25:19,200 --> 00:25:23,970
hostname set up right but both of those

00:25:22,140 --> 00:25:25,170
are non critical failures I mean it's

00:25:23,970 --> 00:25:28,650
going to break things if I did this in

00:25:25,170 --> 00:25:31,260
production but for demo it's fine so I

00:25:28,650 --> 00:25:34,050
can click yes it asked me here which IP

00:25:31,260 --> 00:25:35,580
address do i wanted to bind to it tries

00:25:34,050 --> 00:25:38,190
to auto detect the IP address of the

00:25:35,580 --> 00:25:39,630
machine so in this case its realize them

00:25:38,190 --> 00:25:42,600
on the Wi-Fi network and giving me a

00:25:39,630 --> 00:25:46,520
Wi-Fi address I'll just accept it for

00:25:42,600 --> 00:25:49,500
this by default a che will use multicast

00:25:46,520 --> 00:25:50,700
you can use unique art instead for

00:25:49,500 --> 00:25:51,750
communicating between all the nodes

00:25:50,700 --> 00:25:54,180
making sure that everything's still

00:25:51,750 --> 00:25:56,130
there but by default it will use

00:25:54,180 --> 00:25:57,660
multicast and this script will randomly

00:25:56,130 --> 00:25:59,250
generate a multicast address route to

00:25:57,660 --> 00:26:02,100
use so it doesn't clash with your other

00:25:59,250 --> 00:26:04,920
classes on the same network there's the

00:26:02,100 --> 00:26:08,270
port I don't want to use sbd because I

00:26:04,920 --> 00:26:08,270
haven't got shared storage on my laptop

00:26:09,950 --> 00:26:16,440
and it fails because I didn't install

00:26:12,360 --> 00:26:19,410
hook demo effective underfloor um yeah

00:26:16,440 --> 00:26:20,790
if I did have hawk install the web

00:26:19,410 --> 00:26:23,640
interface the web interface would then

00:26:20,790 --> 00:26:25,920
start at this point which is basically

00:26:23,640 --> 00:26:27,510
the same go to this URL and in the

00:26:25,920 --> 00:26:29,640
background all the rest of the cluster

00:26:27,510 --> 00:26:34,350
services start up and that's your first

00:26:29,640 --> 00:26:36,800
node cluster up and running so that's

00:26:34,350 --> 00:26:41,760
all you need to get a hey che cluster

00:26:36,800 --> 00:26:43,680
and square one then add your second

00:26:41,760 --> 00:26:45,390
nodes it's just that simple one that

00:26:43,680 --> 00:26:48,180
wizard and in fact for most of those

00:26:45,390 --> 00:26:52,410
questions I said you know except to the

00:26:48,180 --> 00:26:56,430
default values now my presentation might

00:26:52,410 --> 00:26:59,940
start again hey there we go yeah for

00:26:56,430 --> 00:27:01,800
most of those options I just accepted

00:26:59,940 --> 00:27:02,880
the defaults so if you're doing this in

00:27:01,800 --> 00:27:04,650
like it's some kind of automated

00:27:02,880 --> 00:27:06,600
environment or cloud or whatever the

00:27:04,650 --> 00:27:08,490
heck you feel like doing you can

00:27:06,600 --> 00:27:10,200
normally just run a che cluster in it-

00:27:08,490 --> 00:27:12,210
why and it just says yes to everything

00:27:10,200 --> 00:27:14,700
and you immediately have a cluster setup

00:27:12,210 --> 00:27:17,100
which is really good for testing and

00:27:14,700 --> 00:27:18,840
doing crazy stuff so if you want to

00:27:17,100 --> 00:27:22,650
learn more well obviously christopher's

00:27:18,840 --> 00:27:24,030
talk tomorrow or the documentation the

00:27:22,650 --> 00:27:25,710
best documentation we have on it at the

00:27:24,030 --> 00:27:27,300
moment is actually the slow stuff with

00:27:25,710 --> 00:27:27,840
Slee 12 because it's very very similar

00:27:27,300 --> 00:27:29,640
to what

00:27:27,840 --> 00:27:33,120
we have in 13 2 and in tumbleweed right

00:27:29,640 --> 00:27:35,460
now so the H extension details are there

00:27:33,120 --> 00:27:36,690
he goes into great detail about pretty

00:27:35,460 --> 00:27:41,190
much everything you could possibly

00:27:36,690 --> 00:27:42,929
wonder about but with drbd I quite find

00:27:41,190 --> 00:27:45,419
quite like the upstream documentation as

00:27:42,929 --> 00:27:47,909
well so there's the link for the website

00:27:45,419 --> 00:27:49,980
there and then if you want to get hold

00:27:47,909 --> 00:27:53,460
of me krista for anyone else who

00:27:49,980 --> 00:27:55,529
involved in doing a che the h.a develop

00:27:53,460 --> 00:28:00,179
on freenode is actually a cross

00:27:55,529 --> 00:28:01,409
distribution IRC channel where we're

00:28:00,179 --> 00:28:03,720
there from the sort of Souza and

00:28:01,409 --> 00:28:09,409
opensuse side and is also yeah Red Hat

00:28:03,720 --> 00:28:11,640
and I can't think of other yes is it now

00:28:09,409 --> 00:28:12,779
did we is it because I have I'm not

00:28:11,640 --> 00:28:16,049
joining cluster labs and I still got

00:28:12,779 --> 00:28:18,210
plenty traffic on that address okay it

00:28:16,049 --> 00:28:20,220
should be cluster labs not a che devo um

00:28:18,210 --> 00:28:23,039
I think that's an alias because I still

00:28:20,220 --> 00:28:24,510
get plenty of traffic on it but yeah it

00:28:23,039 --> 00:28:26,159
should be cluster labs night either are

00:28:24,510 --> 00:28:28,110
fine or the open seas emailing list

00:28:26,159 --> 00:28:29,610
which at the moment is very low traffic

00:28:28,110 --> 00:28:32,580
but that's part of the reason I'm here

00:28:29,610 --> 00:28:36,260
so we can hopefully change that and with

00:28:32,580 --> 00:28:36,260
that thank you very much

00:28:40,880 --> 00:28:50,610
any last questions cuz i got like 30

00:28:45,120 --> 00:28:54,390
seconds left yes so i can just explain

00:28:50,610 --> 00:28:57,600
what happened with hawk so Richard is

00:28:54,390 --> 00:29:00,060
using on tumbleweed and the hawk is ruby

00:28:57,600 --> 00:29:02,340
on rails app so every time someone

00:29:00,060 --> 00:29:04,920
checks in a new version of any ruby gem

00:29:02,340 --> 00:29:06,330
that we use in Hawk it breaks so if you

00:29:04,920 --> 00:29:08,100
if you want to use same production you

00:29:06,330 --> 00:29:09,390
probably don't want to use on tumbleweed

00:29:08,100 --> 00:29:13,440
but you probably don't want to run the

00:29:09,390 --> 00:29:15,060
clustering yeah I think I'm the only

00:29:13,440 --> 00:29:17,970
person who's ever actually done that and

00:29:15,060 --> 00:29:20,490
I did it because I kind of on a bet but

00:29:17,970 --> 00:29:24,410
yeah but it's there for testing that's

00:29:20,490 --> 00:29:24,410
fine cool anyone else

00:29:28,350 --> 00:29:34,390
what I'm saying is if if you're if

00:29:33,040 --> 00:29:36,550
you're interested in high available

00:29:34,390 --> 00:29:38,320
education let's see how I can spin this

00:29:36,550 --> 00:29:39,790
if you're interested in high

00:29:38,320 --> 00:29:42,790
availability you probably want to run it

00:29:39,790 --> 00:29:44,530
on the regular release because you know

00:29:42,790 --> 00:29:46,680
you'd normally high availability talking

00:29:44,530 --> 00:29:48,910
about something that's very very stable

00:29:46,680 --> 00:29:50,770
you know updating every day in

00:29:48,910 --> 00:29:52,390
tumbleweed I mean tumbleweed is great at

00:29:50,770 --> 00:29:54,030
tumbleweed is wonderfully fast but you

00:29:52,390 --> 00:29:58,720
really gonna patch tumble weed every day

00:29:54,030 --> 00:29:59,860
in Nha environment probably not so you

00:29:58,720 --> 00:30:01,480
probably want to have something that

00:29:59,860 --> 00:30:03,850
moves a bit slower that's probably a

00:30:01,480 --> 00:30:05,260
case for the stable release so if you're

00:30:03,850 --> 00:30:06,700
the crazy kind of guy who wants to have

00:30:05,260 --> 00:30:09,940
their server patching and rebooting

00:30:06,700 --> 00:30:10,990
every day eh eh we'll give you some you

00:30:09,940 --> 00:30:12,370
know interesting way to better handle

00:30:10,990 --> 00:30:13,690
that because you can just reboot a note

00:30:12,370 --> 00:30:17,980
every day and your cluster should carry

00:30:13,690 --> 00:30:20,290
on working but yeah let us know if that

00:30:17,980 --> 00:30:22,510
goes horribly want with which yeah

00:30:20,290 --> 00:30:29,670
that's that's not really a traditional

00:30:22,510 --> 00:30:31,770
use case for AJ so yeah there's another

00:30:29,670 --> 00:30:34,540
thing that you mentioned before that

00:30:31,770 --> 00:30:38,650
when you add H a software we actually

00:30:34,540 --> 00:30:40,480
get lower availability and in a sense

00:30:38,650 --> 00:30:44,950
that's true because like the biggest

00:30:40,480 --> 00:30:47,320
enemy for stability is complexity right

00:30:44,950 --> 00:30:50,260
and by adding more software you're

00:30:47,320 --> 00:30:53,980
adding more complexity so you do have

00:30:50,260 --> 00:30:57,170
like a step back there but the thing is

00:30:53,980 --> 00:31:00,080
if you start chasing you know 1999

00:30:57,170 --> 00:31:02,420
nine percent up time you really need to

00:31:00,080 --> 00:31:04,130
be able to respond to failure very very

00:31:02,420 --> 00:31:07,310
quickly and the only way to do that is

00:31:04,130 --> 00:31:09,950
to automate recovery which means you

00:31:07,310 --> 00:31:11,720
need to have a really stable application

00:31:09,950 --> 00:31:15,770
that you're trying to run I'll available

00:31:11,720 --> 00:31:18,260
answer so there's it's it's not you know

00:31:15,770 --> 00:31:19,630
you don't don't use that hi little bit

00:31:18,260 --> 00:31:21,650
software and everything gets better

00:31:19,630 --> 00:31:24,710
actual fact that gets a little bit worse

00:31:21,650 --> 00:31:33,880
but thanks to that you can get a little

00:31:24,710 --> 00:31:33,880

YouTube URL: https://www.youtube.com/watch?v=e9fElUiCdcY


