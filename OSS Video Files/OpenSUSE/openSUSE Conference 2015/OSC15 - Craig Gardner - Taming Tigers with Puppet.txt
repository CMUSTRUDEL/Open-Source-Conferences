Title: OSC15 - Craig Gardner - Taming Tigers with Puppet
Publication date: 2015-05-04
Playlist: openSUSE Conference 2015
Description: 
	Managing a single system can be troublesome. Managing more than one is nightmare. Keep your systems running as you intend with Configuration Management. There are many choices, each able to satisfy a variety of needs. This presentation will show what can be done with these tools, and compare features among the various tools. And don't forget, SUSE also has a cool new opensource offering in this space: Machinery. When you start using powerful tools like this, the ferocious tigers in your datacenter will bow before you as their master.
Captions: 
	00:00:00,000 --> 00:00:05,069
for coming to the opensuse conference

00:00:02,300 --> 00:00:06,960
this is my first time to the opensuse

00:00:05,069 --> 00:00:09,660
conference I've tried to come on many

00:00:06,960 --> 00:00:12,630
occasions in the past and this is my

00:00:09,660 --> 00:00:14,490
first time I'm glad that I have come my

00:00:12,630 --> 00:00:16,350
name is Craig Gardner as you can see on

00:00:14,490 --> 00:00:18,449
the screen and you might be able to

00:00:16,350 --> 00:00:20,340
guess from my email address and for the

00:00:18,449 --> 00:00:23,490
format of this particular slides that I

00:00:20,340 --> 00:00:26,460
have I work for Souza am I even wearing

00:00:23,490 --> 00:00:28,830
some Susa clothing here and i've been

00:00:26,460 --> 00:00:31,439
working at susa for many years for a

00:00:28,830 --> 00:00:33,660
little over four years and enjoy working

00:00:31,439 --> 00:00:35,719
at susa very much and not the least of

00:00:33,660 --> 00:00:39,750
which the reason that I get to work with

00:00:35,719 --> 00:00:43,050
opensuse guys as well I have been a part

00:00:39,750 --> 00:00:45,960
of the the Oh pious services team at

00:00:43,050 --> 00:00:47,550
susa for these many years and as such I

00:00:45,960 --> 00:00:49,789
have had many opportunities to be

00:00:47,550 --> 00:00:51,719
involved in this important topic of

00:00:49,789 --> 00:00:55,410
configuration management as we have

00:00:51,719 --> 00:00:57,420
tried to to standardize on systems and

00:00:55,410 --> 00:00:59,219
be able to deploy systems and be able to

00:00:57,420 --> 00:01:01,680
make sure that we can recover one

00:00:59,219 --> 00:01:02,879
systems when something goes wrong so I'd

00:01:01,680 --> 00:01:04,339
like to share with you some of the

00:01:02,879 --> 00:01:07,320
experience that I have with

00:01:04,339 --> 00:01:09,900
configuration management the title of my

00:01:07,320 --> 00:01:11,790
presentation suggest that I'm going to

00:01:09,900 --> 00:01:14,640
be talking about puppet but make no

00:01:11,790 --> 00:01:17,909
mistake it's not so much that I'm trying

00:01:14,640 --> 00:01:19,799
to sell you specifically on puppet what

00:01:17,909 --> 00:01:23,250
I'm really trying to sell people on is

00:01:19,799 --> 00:01:27,210
the principle of configuration

00:01:23,250 --> 00:01:29,490
management and my configuration

00:01:27,210 --> 00:01:32,850
management experience goes way back

00:01:29,490 --> 00:01:35,610
beyond my working on the opensuse it

00:01:32,850 --> 00:01:38,579
would put with the Susa opia services

00:01:35,610 --> 00:01:40,439
team back when I was in college I was a

00:01:38,579 --> 00:01:42,750
systems administrator at the University

00:01:40,439 --> 00:01:46,170
and our configuration management

00:01:42,750 --> 00:01:49,079
technique was that each critical system

00:01:46,170 --> 00:01:52,950
had sitting on top of the system a

00:01:49,079 --> 00:01:56,430
notebook like this one right here at any

00:01:52,950 --> 00:01:58,290
time that you installed software any

00:01:56,430 --> 00:02:01,500
time that you made a configuration

00:01:58,290 --> 00:02:04,159
change any time you did anything to that

00:02:01,500 --> 00:02:06,990
machine that you intended to have it be

00:02:04,159 --> 00:02:10,200
reproduced that to have it back to that

00:02:06,990 --> 00:02:12,270
state again at some later date you

00:02:10,200 --> 00:02:13,440
opened up that notebook and you wrote a

00:02:12,270 --> 00:02:15,960
log entry

00:02:13,440 --> 00:02:17,370
in that notebook to say this is what I

00:02:15,960 --> 00:02:20,940
changed and this is what the system

00:02:17,370 --> 00:02:24,330
should be well it's not very effective I

00:02:20,940 --> 00:02:28,110
mean it was okay for us back then when

00:02:24,330 --> 00:02:33,030
we were talking about a small number of

00:02:28,110 --> 00:02:37,500
systems in our very university setting

00:02:33,030 --> 00:02:40,890
of 10 maybe 12 different servers but it

00:02:37,500 --> 00:02:43,350
doesn't scale at all the number of

00:02:40,890 --> 00:02:45,630
systems that you have to manage with a

00:02:43,350 --> 00:02:49,650
notebook for each one doesn't work at

00:02:45,630 --> 00:02:53,090
all or particularly when you have to do

00:02:49,650 --> 00:02:55,020
something along the lines of well I

00:02:53,090 --> 00:02:56,490
guess that's really what i should say

00:02:55,020 --> 00:02:59,130
hear about this bullet point about scale

00:02:56,490 --> 00:03:04,050
is if you now need to deploy multiple

00:02:59,130 --> 00:03:06,930
servers to adapt to an increase in load

00:03:04,050 --> 00:03:08,370
that's coming from from from users or

00:03:06,930 --> 00:03:11,040
something along that line that becomes

00:03:08,370 --> 00:03:12,990
just impossible to be able to

00:03:11,040 --> 00:03:15,530
immediately scale up machines or scale

00:03:12,990 --> 00:03:18,620
down machines based on user demand and

00:03:15,530 --> 00:03:22,440
when a server crashes the notebook works

00:03:18,620 --> 00:03:25,800
okay but it's just not the most

00:03:22,440 --> 00:03:27,810
reproducible mechanism for this and if

00:03:25,800 --> 00:03:30,959
you have to spin up a whole bunch of

00:03:27,810 --> 00:03:33,630
identical servers or services notebooks

00:03:30,959 --> 00:03:36,090
fall apart really fast so it just

00:03:33,630 --> 00:03:39,959
doesn't work very well it was great for

00:03:36,090 --> 00:03:42,209
its time but people got smart systems

00:03:39,959 --> 00:03:45,540
got more complex and systems got larger

00:03:42,209 --> 00:03:47,190
we needed to have some good software to

00:03:45,540 --> 00:03:49,080
be able to manage these things with some

00:03:47,190 --> 00:03:50,940
good practices to go along with that

00:03:49,080 --> 00:03:52,530
software and that's what leads us to

00:03:50,940 --> 00:03:54,300
configuration management I'll start by

00:03:52,530 --> 00:03:56,519
talking a little bit about puppet and

00:03:54,300 --> 00:03:57,660
who doesn't love soft man here sock

00:03:56,519 --> 00:04:00,690
puppet what's his name I can't remember

00:03:57,660 --> 00:04:02,489
from Little Big Planet I could sign a

00:04:00,690 --> 00:04:04,890
sack boy that's what it is Thank You

00:04:02,489 --> 00:04:06,300
Frederick sack boy my kids love this

00:04:04,890 --> 00:04:09,709
game I used to play it with them and

00:04:06,300 --> 00:04:14,550
I've already forgotten his name well

00:04:09,709 --> 00:04:18,600
puppet has a huge user base which helps

00:04:14,550 --> 00:04:22,080
it significantly in terms of people

00:04:18,600 --> 00:04:26,220
trying to use it for real-world problems

00:04:22,080 --> 00:04:30,180
so it has become quite robust quite

00:04:26,220 --> 00:04:32,970
a lot of features and solves a lot of

00:04:30,180 --> 00:04:36,450
configuration management problems and so

00:04:32,970 --> 00:04:38,670
it's a good tool to use because it has a

00:04:36,450 --> 00:04:40,620
huge user base it also continues to have

00:04:38,670 --> 00:04:43,320
a growing developer base which provides

00:04:40,620 --> 00:04:46,380
some more robustness more flexibility

00:04:43,320 --> 00:04:47,870
some more sophistication it's growing

00:04:46,380 --> 00:04:51,140
very well from a developer perspective

00:04:47,870 --> 00:04:54,060
it also has a very specific domain

00:04:51,140 --> 00:04:56,040
language that people don't have too much

00:04:54,060 --> 00:04:59,430
trouble learning it's a little quirky

00:04:56,040 --> 00:05:01,490
but not too bad you can use puppet on a

00:04:59,430 --> 00:05:03,900
variety of different platforms and

00:05:01,490 --> 00:05:06,300
because it's been around for a while and

00:05:03,900 --> 00:05:08,430
because it has the wide user base that

00:05:06,300 --> 00:05:12,680
it has it has a significant mindshare

00:05:08,430 --> 00:05:16,790
associated with it a lot of solid

00:05:12,680 --> 00:05:18,930
committed passionate users of puppet and

00:05:16,790 --> 00:05:20,700
really the main reason that you want to

00:05:18,930 --> 00:05:22,290
use something like puppet or another

00:05:20,700 --> 00:05:24,270
configuration management tools because

00:05:22,290 --> 00:05:26,730
all of those notebooks just haven't

00:05:24,270 --> 00:05:27,990
worked they just don't solve our

00:05:26,730 --> 00:05:31,770
problems the way that they used to

00:05:27,990 --> 00:05:34,919
anymore so then let's spare a moment to

00:05:31,770 --> 00:05:38,070
talk about chef chef is great in very

00:05:34,919 --> 00:05:41,600
similar ways and for very similar

00:05:38,070 --> 00:05:44,030
reasons chef has is a more recent

00:05:41,600 --> 00:05:48,150
development it doesn't have the broad

00:05:44,030 --> 00:05:52,229
mind share that puppet has but it is a

00:05:48,150 --> 00:05:54,660
growing popular tool for doing much the

00:05:52,229 --> 00:05:57,750
same thing and note that chef was

00:05:54,660 --> 00:05:59,010
largely inspired by puppet now when I

00:05:57,750 --> 00:06:01,410
say that that's a nice way of saying

00:05:59,010 --> 00:06:02,790
that the people who invented chef didn't

00:06:01,410 --> 00:06:04,830
like puppet they wanted something else

00:06:02,790 --> 00:06:06,810
so they built something else something

00:06:04,830 --> 00:06:08,160
new something that does the same things

00:06:06,810 --> 00:06:10,910
just in a different way and we'll

00:06:08,160 --> 00:06:14,760
analyze that here in just a minute and

00:06:10,910 --> 00:06:18,050
we've got this newfangled thing that I

00:06:14,760 --> 00:06:21,690
keep saying is just a fad but it's not

00:06:18,050 --> 00:06:24,960
DevOps more and more we're narrowing

00:06:21,690 --> 00:06:27,979
that space we're narrowing that time

00:06:24,960 --> 00:06:32,370
between the developer role and the

00:06:27,979 --> 00:06:36,240
operations role and tools like chef help

00:06:32,370 --> 00:06:37,020
you to economize and make more efficient

00:06:36,240 --> 00:06:39,539
the

00:06:37,020 --> 00:06:41,910
means of delivering those solutions

00:06:39,539 --> 00:06:43,530
directly from your developer base to

00:06:41,910 --> 00:06:46,560
those who are going to be using it does

00:06:43,530 --> 00:06:48,090
that mean that we cut out testing no no

00:06:46,560 --> 00:06:53,580
no but that's a discussion for another

00:06:48,090 --> 00:06:54,680
day now one thing that too often gets

00:06:53,580 --> 00:06:57,360
overlooked when we talk about

00:06:54,680 --> 00:07:01,139
configuration management tools is this

00:06:57,360 --> 00:07:03,539
old dinosaur called CF engine by the way

00:07:01,139 --> 00:07:06,419
I think immediately following my talk

00:07:03,539 --> 00:07:09,090
not in this room but somewhere in this

00:07:06,419 --> 00:07:11,159
building somebody is going to be talking

00:07:09,090 --> 00:07:14,280
about CF engine and if you're interested

00:07:11,159 --> 00:07:16,169
in configuration management at all you

00:07:14,280 --> 00:07:17,430
need to go listen to this because I'm

00:07:16,169 --> 00:07:20,400
just going to touch on the surface of

00:07:17,430 --> 00:07:22,770
this see if engine is significant see if

00:07:20,400 --> 00:07:25,520
engine is powerful and let me tell you

00:07:22,770 --> 00:07:30,389
what see if engine provides for you that

00:07:25,520 --> 00:07:35,159
puppet and chef don't provide CF engine

00:07:30,389 --> 00:07:37,080
is the most stable and mature of all of

00:07:35,159 --> 00:07:39,690
them it's been around the longest it is

00:07:37,080 --> 00:07:43,710
the most has the most development time

00:07:39,690 --> 00:07:45,659
devoted to it both chef and puppet Oh a

00:07:43,710 --> 00:07:48,659
lot to see if engine because they borrow

00:07:45,659 --> 00:07:52,110
almost ninety percent plus I shouldn't I

00:07:48,659 --> 00:07:54,599
said almost ninety percent plus the

00:07:52,110 --> 00:07:56,479
principles and concepts from CF engine

00:07:54,599 --> 00:08:00,150
of what to do about managing

00:07:56,479 --> 00:08:03,300
configurations the best thing going for

00:08:00,150 --> 00:08:06,180
is that it's written in native see what

00:08:03,300 --> 00:08:09,599
does that mean it has a huge advantage

00:08:06,180 --> 00:08:13,550
over any of the other that have to drag

00:08:09,599 --> 00:08:18,449
along with it and interpreter Ruby

00:08:13,550 --> 00:08:20,520
Ruby's a huge ball of wax ruby is good

00:08:18,449 --> 00:08:24,300
ruby is powerful but when you're talking

00:08:20,520 --> 00:08:26,699
about cloud deployments you want to be

00:08:24,300 --> 00:08:29,669
able to put out to your cloud

00:08:26,699 --> 00:08:35,490
infrastructure the smallest the most

00:08:29,669 --> 00:08:37,919
essential pieces out to the base that

00:08:35,490 --> 00:08:39,479
you are then going to instrument an

00:08:37,919 --> 00:08:43,079
outfit with all the rest of your

00:08:39,479 --> 00:08:45,150
application if you want to have speed

00:08:43,079 --> 00:08:47,880
and efficiency

00:08:45,150 --> 00:08:51,060
and a small size that becomes much

00:08:47,880 --> 00:08:53,730
easier to manage this is the way to go

00:08:51,060 --> 00:08:58,050
because the only thing that you need to

00:08:53,730 --> 00:09:03,120
put out to your cloud systems is the

00:08:58,050 --> 00:09:05,760
colonel the toolchain g lipsy and the CF

00:09:03,120 --> 00:09:09,150
engine agent and from there you can do

00:09:05,760 --> 00:09:13,050
anything to configure that box it's

00:09:09,150 --> 00:09:17,250
powerful and it's a good solution but

00:09:13,050 --> 00:09:20,070
too often overlooked now there are other

00:09:17,250 --> 00:09:22,320
solutions that are also very interesting

00:09:20,070 --> 00:09:26,490
and I think that one of our colleagues

00:09:22,320 --> 00:09:33,660
is here I don't know when I wish I could

00:09:26,490 --> 00:09:34,950
remember the ansible talk 5 so that's

00:09:33,660 --> 00:09:41,030
the one that's just immediately thought

00:09:34,950 --> 00:09:44,400
maybe the CF engine guy was before me ok

00:09:41,030 --> 00:09:46,170
so at least for sure you have the

00:09:44,400 --> 00:09:48,030
ansible one which is going to be five

00:09:46,170 --> 00:09:51,060
o'clock in the main one and that's worth

00:09:48,030 --> 00:09:52,830
going to ansible is the newest of the

00:09:51,060 --> 00:09:56,700
ones that I've already talked about and

00:09:52,830 --> 00:09:58,910
one of the key Oh matter of fact there's

00:09:56,700 --> 00:10:03,000
the guys named as giving the talk on it

00:09:58,910 --> 00:10:06,000
one of the most interesting features of

00:10:03,000 --> 00:10:10,470
ansible is that it is agent less ollie

00:10:06,000 --> 00:10:13,280
well agentless it uses ssh as its agent

00:10:10,470 --> 00:10:16,950
and so it's not even really a

00:10:13,280 --> 00:10:18,960
client-server kind of application the

00:10:16,950 --> 00:10:20,850
same way that the others are you can put

00:10:18,960 --> 00:10:22,830
the server on any machine in your

00:10:20,850 --> 00:10:28,530
infrastructure and any client that

00:10:22,830 --> 00:10:31,740
listens on ssh can be a keg can be a

00:10:28,530 --> 00:10:33,360
target for ansible now it has some

00:10:31,740 --> 00:10:35,850
weaknesses along with that but it is

00:10:33,360 --> 00:10:38,340
very powerful and very useful and it's

00:10:35,850 --> 00:10:40,140
very lightweight in the way that you go

00:10:38,340 --> 00:10:41,820
about configuring systems using ansible

00:10:40,140 --> 00:10:44,490
there's another cool product that's

00:10:41,820 --> 00:10:45,570
called salt as a matter of fact the

00:10:44,490 --> 00:10:48,180
reason I bring that up is because that

00:10:45,570 --> 00:10:50,490
comes from my hometown I live near Salt

00:10:48,180 --> 00:10:52,440
Lake City Utah in the United States and

00:10:50,490 --> 00:10:55,140
that's where this name of salt comes

00:10:52,440 --> 00:10:56,700
from now it's still quite young but it

00:10:55,140 --> 00:11:00,400
was in 2013

00:10:56,700 --> 00:11:02,740
blackduck software's gold medal award

00:11:00,400 --> 00:11:05,440
winner for the the best up-and-coming

00:11:02,740 --> 00:11:07,270
software project and it's really quite

00:11:05,440 --> 00:11:11,620
good and something that's worth looking

00:11:07,270 --> 00:11:14,650
into but the underlying statement that I

00:11:11,620 --> 00:11:17,980
want to make here is I don't care which

00:11:14,650 --> 00:11:21,400
one that you use pick one that solves

00:11:17,980 --> 00:11:22,870
your problems and use it and here are

00:11:21,400 --> 00:11:24,640
the characteristics that I'm looking for

00:11:22,870 --> 00:11:26,590
that I I think you should consider when

00:11:24,640 --> 00:11:28,660
you look at the kinds of options that

00:11:26,590 --> 00:11:29,650
are available to you you want to make

00:11:28,660 --> 00:11:32,260
sure that you pick something that you

00:11:29,650 --> 00:11:33,790
can automate you'll want to make sure

00:11:32,260 --> 00:11:35,890
that you can pick something that has

00:11:33,790 --> 00:11:37,840
version control to it because you're

00:11:35,890 --> 00:11:40,060
talking about configuration management

00:11:37,840 --> 00:11:43,060
you're all about versions today your

00:11:40,060 --> 00:11:44,950
server exists as in in state a and

00:11:43,060 --> 00:11:47,470
tomorrow it's going to be in state a

00:11:44,950 --> 00:11:49,330
prime and sooner or later it's going to

00:11:47,470 --> 00:11:50,800
be a prime prime prime prime prime and

00:11:49,330 --> 00:11:52,330
there's going to be come a day when you

00:11:50,800 --> 00:11:53,980
want it to not be a prime prime prime

00:11:52,330 --> 00:11:57,430
prime prime prime anymore you need it to

00:11:53,980 --> 00:11:59,410
be in state B and have version control

00:11:57,430 --> 00:12:03,670
to manage all of those configurations

00:11:59,410 --> 00:12:05,410
for your systems is critical make sure

00:12:03,670 --> 00:12:06,880
that you pick a tool that allows you to

00:12:05,410 --> 00:12:08,670
be reproducible and of course that has

00:12:06,880 --> 00:12:11,200
something to do with version control

00:12:08,670 --> 00:12:12,910
also make sure you pick one of them that

00:12:11,200 --> 00:12:15,630
ports to all of the different platforms

00:12:12,910 --> 00:12:19,150
that you're using and not all of them do

00:12:15,630 --> 00:12:22,020
for example salt salt doesn't port all

00:12:19,150 --> 00:12:24,730
the platforms that see if engine will

00:12:22,020 --> 00:12:26,650
puppet chef and see if engine they

00:12:24,730 --> 00:12:28,420
pretty much cover everything that you

00:12:26,650 --> 00:12:32,050
and I are going to be worried about and

00:12:28,420 --> 00:12:35,140
a little bit more make sure that you

00:12:32,050 --> 00:12:37,000
pick the solution pick the configuration

00:12:35,140 --> 00:12:38,530
management tool that solves your

00:12:37,000 --> 00:12:41,050
problems that's actually going to be

00:12:38,530 --> 00:12:44,950
able to deliver the kinds of services

00:12:41,050 --> 00:12:48,160
that your operation needs that delivers

00:12:44,950 --> 00:12:50,230
your DevOps software that delivers your

00:12:48,160 --> 00:12:52,210
apache configurations that is able to

00:12:50,230 --> 00:12:54,670
make your configuration changes to your

00:12:52,210 --> 00:12:56,920
apache make sure that it solves the

00:12:54,670 --> 00:12:59,890
problems that your organization needs to

00:12:56,920 --> 00:13:02,500
solve and then the last one is use the

00:12:59,890 --> 00:13:04,750
one that your team can use because if

00:13:02,500 --> 00:13:07,180
you come in and everybody on the team

00:13:04,750 --> 00:13:09,550
has no idea how to read ruby and no

00:13:07,180 --> 00:13:10,100
nobody has to write Ruby maybe one of

00:13:09,550 --> 00:13:11,779
the Ruby so

00:13:10,100 --> 00:13:13,579
visions isn't the right choice for you

00:13:11,779 --> 00:13:15,199
yeah you could spend time and teaching

00:13:13,579 --> 00:13:18,290
people Ruby and there's value to having

00:13:15,199 --> 00:13:20,209
your team understand Ruby but that might

00:13:18,290 --> 00:13:22,279
not be where you want to spend your time

00:13:20,209 --> 00:13:24,370
and your efforts pick the one that's

00:13:22,279 --> 00:13:30,319
going to make sense to you and your team

00:13:24,370 --> 00:13:31,910
today and going forward so this is not

00:13:30,319 --> 00:13:33,470
to say that one is better than the other

00:13:31,910 --> 00:13:39,139
but let's compare a few interesting

00:13:33,470 --> 00:13:44,360
features of puppet and chef with puppet

00:13:39,139 --> 00:13:47,829
you have what's puppet is basis is Ruby

00:13:44,360 --> 00:13:50,480
but it has a very watered-down

00:13:47,829 --> 00:13:53,500
domain-specific language that it

00:13:50,480 --> 00:13:56,300
enforces upon you which is useful

00:13:53,500 --> 00:13:58,040
because it's very specific you only do

00:13:56,300 --> 00:14:00,680
what configuration management things you

00:13:58,040 --> 00:14:03,620
intended to do and not everything that

00:14:00,680 --> 00:14:07,160
Ruby intends for you to do with Chef

00:14:03,620 --> 00:14:10,630
you're basically given for good and bad

00:14:07,160 --> 00:14:14,870
the whole power of the Ruby language

00:14:10,630 --> 00:14:17,000
back to puppet uh with the puppet

00:14:14,870 --> 00:14:19,699
implementation you have a CLI on the

00:14:17,000 --> 00:14:23,089
client that's called poppet similar to

00:14:19,699 --> 00:14:26,750
that you have on with Chef you don't

00:14:23,089 --> 00:14:30,649
have a chef command but you have a knife

00:14:26,750 --> 00:14:33,250
command with puppet you're going to

00:14:30,649 --> 00:14:35,990
collect all of the node data from a

00:14:33,250 --> 00:14:38,779
third application a different

00:14:35,990 --> 00:14:40,160
application called factor for unit tests

00:14:38,779 --> 00:14:42,470
you're going to use a third application

00:14:40,160 --> 00:14:44,269
called beaker for managing your

00:14:42,470 --> 00:14:47,029
configurations you're going to use

00:14:44,269 --> 00:14:51,199
another kind of technology called here a

00:14:47,029 --> 00:14:53,060
higher which is actually built in now it

00:14:51,199 --> 00:14:55,160
wasn't in version 2 a puppet but now in

00:14:53,060 --> 00:14:56,810
version 3 it's built into puppet with

00:14:55,160 --> 00:14:59,000
chef you're going to have the same kind

00:14:56,810 --> 00:15:01,310
of no data collection with a tool called

00:14:59,000 --> 00:15:03,139
oh hi with unit testing you use this

00:15:01,310 --> 00:15:06,079
cool thing called kitchen and rear

00:15:03,139 --> 00:15:08,120
configs you don't have this third kind

00:15:06,079 --> 00:15:10,130
of application thing you just go ahead

00:15:08,120 --> 00:15:11,660
and use Ruby to manage all your

00:15:10,130 --> 00:15:13,430
configurations if you need to go into

00:15:11,660 --> 00:15:15,439
your kernel config and you want to

00:15:13,430 --> 00:15:17,149
change this kernel config parameter you

00:15:15,439 --> 00:15:19,040
just write a little script in Ruby that

00:15:17,149 --> 00:15:20,089
goes in runs on the target changes that

00:15:19,040 --> 00:15:24,069
parameter and

00:15:20,089 --> 00:15:24,069
and returns back that it was successful

00:15:24,160 --> 00:15:27,920
an interesting thing about puppet is

00:15:26,389 --> 00:15:30,230
that you can basically use any version

00:15:27,920 --> 00:15:34,189
control configuration management that

00:15:30,230 --> 00:15:37,059
you want to which is helpful let me

00:15:34,189 --> 00:15:40,610
point out that you also can use any

00:15:37,059 --> 00:15:43,370
version control for chef that you want

00:15:40,610 --> 00:15:45,439
but it happens to have get capabilities

00:15:43,370 --> 00:15:48,139
built right into it which is really

00:15:45,439 --> 00:15:50,029
really helpful now again that's a

00:15:48,139 --> 00:15:52,999
double-edged sword yet again because

00:15:50,029 --> 00:15:54,980
does your team know how to use git and

00:15:52,999 --> 00:15:57,139
maybe not so if you have to teach your

00:15:54,980 --> 00:15:58,220
team how to use git that's a learning

00:15:57,139 --> 00:16:00,740
curve and it might not be the right

00:15:58,220 --> 00:16:03,439
solution for you but gets very powerful

00:16:00,740 --> 00:16:08,629
gets somewhat Universal and gets built

00:16:03,439 --> 00:16:11,720
right into chef pros and cons one thing

00:16:08,629 --> 00:16:14,420
that people say all the time which isn't

00:16:11,720 --> 00:16:16,790
entirely true but is commonly accepted

00:16:14,420 --> 00:16:20,329
because people say it all the time is

00:16:16,790 --> 00:16:25,939
that puppet is a more system

00:16:20,329 --> 00:16:29,709
administrator oriented tool whereas chef

00:16:25,939 --> 00:16:31,999
is more of a developer oriented tool and

00:16:29,709 --> 00:16:36,470
that has a lot to do with the fact that

00:16:31,999 --> 00:16:39,079
puppet obscures Ruby and chef makes

00:16:36,470 --> 00:16:42,529
takes full advantage of Ruby and so

00:16:39,079 --> 00:16:44,420
programmers identify more closely with a

00:16:42,529 --> 00:16:46,459
real programming language rather than

00:16:44,420 --> 00:16:50,300
just a very watered-down domain-specific

00:16:46,459 --> 00:16:53,240
language again the key to take away here

00:16:50,300 --> 00:16:55,249
is whether it's puppet or chef or one of

00:16:53,240 --> 00:16:57,230
the several others that we have you want

00:16:55,249 --> 00:16:58,939
to kind of identify these kinds of

00:16:57,230 --> 00:17:00,829
expertise as that are within your team

00:16:58,939 --> 00:17:03,679
and the kinds of problems that you're

00:17:00,829 --> 00:17:08,600
trying to solve and pick the right tool

00:17:03,679 --> 00:17:09,949
for your team for your organization one

00:17:08,600 --> 00:17:11,990
last thing that's important for me to

00:17:09,949 --> 00:17:13,669
mention it's kind of a selfish thing for

00:17:11,990 --> 00:17:17,179
me to mention because it's a susa

00:17:13,669 --> 00:17:20,179
oriented tool a Susa created tool it's a

00:17:17,179 --> 00:17:23,539
sous of passion right now and that is

00:17:20,179 --> 00:17:26,230
the machinery product that we have

00:17:23,539 --> 00:17:28,650
developed and sitting in our midst is

00:17:26,230 --> 00:17:32,160
thomas got liquor who is

00:17:28,650 --> 00:17:34,260
one of the principles for that team this

00:17:32,160 --> 00:17:36,090
is a very interesting project I'll call

00:17:34,260 --> 00:17:38,730
your attention here to this website this

00:17:36,090 --> 00:17:40,590
is the machinery website heey Thomas

00:17:38,730 --> 00:17:46,980
will be giving a presentation tell us

00:17:40,590 --> 00:17:49,950
when and which room in the main room

00:17:46,980 --> 00:17:51,390
tomorrow 3pm in the main room what

00:17:49,950 --> 00:17:53,460
Thomas will give us all of the dirty

00:17:51,390 --> 00:17:55,710
details so I'm not going to give

00:17:53,460 --> 00:17:57,000
anything away but this is compelling

00:17:55,710 --> 00:17:59,610
this is something worth intrude but

00:17:57,000 --> 00:18:03,930
that's that's worth looking into now

00:17:59,610 --> 00:18:05,580
it's not the same configuration

00:18:03,930 --> 00:18:07,710
management kind of tool that we're

00:18:05,580 --> 00:18:10,980
talking about in terms of chef and

00:18:07,710 --> 00:18:14,400
puppet and CF engine but it's a very

00:18:10,980 --> 00:18:16,530
specific tool that Thomas and his team

00:18:14,400 --> 00:18:18,990
and many of the customers that we deal

00:18:16,530 --> 00:18:20,910
with have said to us you know there are

00:18:18,990 --> 00:18:22,260
some things that we just don't like

00:18:20,910 --> 00:18:24,330
about those other products and then they

00:18:22,260 --> 00:18:27,120
don't do what it is that we need them to

00:18:24,330 --> 00:18:30,690
do so it fills the gaps that current

00:18:27,120 --> 00:18:32,370
tools don't address we have some steps

00:18:30,690 --> 00:18:34,620
further down the road that we need to go

00:18:32,370 --> 00:18:36,360
with it but I think you'll like it and

00:18:34,620 --> 00:18:38,010
it's worth going and watching his

00:18:36,360 --> 00:18:40,680
presentation to see what you can do with

00:18:38,010 --> 00:18:43,290
it it's also interesting to note that I

00:18:40,680 --> 00:18:45,320
can't make any announcements but other

00:18:43,290 --> 00:18:47,970
things that we plan to do down the road

00:18:45,320 --> 00:18:49,650
with machinery that will be very

00:18:47,970 --> 00:18:53,280
interesting to watch happen over the

00:18:49,650 --> 00:18:56,670
next couple of months and there's their

00:18:53,280 --> 00:18:59,150
cool logo I like this anything you want

00:18:56,670 --> 00:18:59,150
to add Thomas

00:19:09,560 --> 00:19:13,940
great yeah so to repeat what he said

00:19:11,930 --> 00:19:16,250
make sure you understand that it's not

00:19:13,940 --> 00:19:17,570
even though we invented it and it's

00:19:16,250 --> 00:19:20,000
solving problems that we think are

00:19:17,570 --> 00:19:22,730
important it's not a sous a specific

00:19:20,000 --> 00:19:25,280
tool we incorporate the ability to

00:19:22,730 --> 00:19:29,990
manage a variety of different platforms

00:19:25,280 --> 00:19:31,850
and systems with it Thanks all right now

00:19:29,990 --> 00:19:34,820
I originally wanted to have at least

00:19:31,850 --> 00:19:35,990
only a brief demo but the amount of time

00:19:34,820 --> 00:19:38,300
that was afforded me for this

00:19:35,990 --> 00:19:41,570
presentation including a variety of

00:19:38,300 --> 00:19:44,720
other technical calamities that took

00:19:41,570 --> 00:19:46,190
place last a while it just wasn't going

00:19:44,720 --> 00:19:48,020
to work out for me to show you a little

00:19:46,190 --> 00:19:51,020
bit about puppet but it's fairly simple

00:19:48,020 --> 00:19:52,700
let me before I get there just share a

00:19:51,020 --> 00:19:56,240
few things about puppet it's

00:19:52,700 --> 00:20:02,390
client-server so is chef so as CF engine

00:19:56,240 --> 00:20:06,290
it's written in Ruby well so is chef but

00:20:02,390 --> 00:20:08,870
not see if engine it's secured through

00:20:06,290 --> 00:20:13,280
ssl certificate transactions now chef

00:20:08,870 --> 00:20:14,960
uses not SSL but uses GP GP GP and there

00:20:13,280 --> 00:20:17,210
are other security mechanisms you'll

00:20:14,960 --> 00:20:19,820
want to make sure that you want to use a

00:20:17,210 --> 00:20:22,340
tool where you the kinds of things that

00:20:19,820 --> 00:20:25,790
you're telling your managed systems to

00:20:22,340 --> 00:20:29,300
do and how to behave and what to be that

00:20:25,790 --> 00:20:32,750
that's a secure transaction you manage

00:20:29,300 --> 00:20:34,730
all of the different recipes what a

00:20:32,750 --> 00:20:36,470
server is and how it's supposed to

00:20:34,730 --> 00:20:39,110
behave what characteristics is supposed

00:20:36,470 --> 00:20:41,330
to have and you have a variety of things

00:20:39,110 --> 00:20:43,130
to do that to manage those systems

00:20:41,330 --> 00:20:45,740
through as I mentioned on a previous

00:20:43,130 --> 00:20:48,380
slide actuelle call hira which allows

00:20:45,740 --> 00:20:50,870
you to manage the hierarchical structure

00:20:48,380 --> 00:20:53,180
of a variety of configuration settings

00:20:50,870 --> 00:20:54,560
factor which tells you a bunch of things

00:20:53,180 --> 00:20:57,290
that I'll show you some examples here in

00:20:54,560 --> 00:20:59,450
a moment the facts about the system and

00:20:57,290 --> 00:21:01,400
a geous that also allows you to do other

00:20:59,450 --> 00:21:04,190
configuration file kinds of changes and

00:21:01,400 --> 00:21:06,350
it's an entirely declarative language a

00:21:04,190 --> 00:21:09,800
domain-specific declarative language

00:21:06,350 --> 00:21:13,610
that says be like this I don't care how

00:21:09,800 --> 00:21:16,940
you get to be like that but this is what

00:21:13,610 --> 00:21:19,670
I declare you to be web server with this

00:21:16,940 --> 00:21:23,630
characteristics how that all happens is

00:21:19,670 --> 00:21:27,680
all black magic black box stuff

00:21:23,630 --> 00:21:30,770
happening behind the black curtain just

00:21:27,680 --> 00:21:33,350
like chef puppet server has a server

00:21:30,770 --> 00:21:36,020
side it's called puppet master on the

00:21:33,350 --> 00:21:40,310
server side where it you maintain all of

00:21:36,020 --> 00:21:43,190
your modules which is the 70 you want to

00:21:40,310 --> 00:21:45,560
manage SSH SSH is supposed to behave you

00:21:43,190 --> 00:21:47,660
would create a module that defines how

00:21:45,560 --> 00:21:49,250
SSH is supposed to behave you have

00:21:47,660 --> 00:21:50,960
manifests that represents all this

00:21:49,250 --> 00:21:53,180
different servers i have server a i have

00:21:50,960 --> 00:21:56,360
server be I have server x I have server

00:21:53,180 --> 00:21:58,700
why all of the different managed systems

00:21:56,360 --> 00:22:01,640
are what make up the manifest and then

00:21:58,700 --> 00:22:03,650
all of the different recipes how to use

00:22:01,640 --> 00:22:07,160
those modules how to manipulate those

00:22:03,650 --> 00:22:08,870
modules to have a thought that I have a

00:22:07,160 --> 00:22:10,930
system that's in your manifest behave a

00:22:08,870 --> 00:22:13,880
certain way or not behave a certain way

00:22:10,930 --> 00:22:17,000
you get keeps on the server side a

00:22:13,880 --> 00:22:20,030
database of all of the puppets those

00:22:17,000 --> 00:22:22,730
managed systems are called puppets all

00:22:20,030 --> 00:22:24,260
similar but not identical nomenclature

00:22:22,730 --> 00:22:28,160
all throughout all of these different

00:22:24,260 --> 00:22:30,830
technologies the puppet server runs as a

00:22:28,160 --> 00:22:35,510
demon and it doesn't run as root it runs

00:22:30,830 --> 00:22:38,090
as its own unprivileged user called

00:22:35,510 --> 00:22:39,950
puppy you can run it as root I would not

00:22:38,090 --> 00:22:41,870
recommend that and then the server

00:22:39,950 --> 00:22:44,540
configuration is managed on the server

00:22:41,870 --> 00:22:46,750
side with this file called puppet calm

00:22:44,540 --> 00:22:49,840
and typically although not exclusively

00:22:46,750 --> 00:22:53,090
you would have a server in your domain

00:22:49,840 --> 00:22:56,120
that's answers by way of DNS to the name

00:22:53,090 --> 00:22:58,310
of puppet that's the standard that's the

00:22:56,120 --> 00:22:59,870
default value you can configure it

00:22:58,310 --> 00:23:02,000
differently but if you just use that

00:22:59,870 --> 00:23:04,190
default it'll just go out and add the

00:23:02,000 --> 00:23:07,700
client when it looks for a puppet server

00:23:04,190 --> 00:23:11,210
is going to ask for a play host by the

00:23:07,700 --> 00:23:12,590
name of puppet and then on the client

00:23:11,210 --> 00:23:15,500
side you have similar kinds of things

00:23:12,590 --> 00:23:17,750
i'm using puppet as the example all the

00:23:15,500 --> 00:23:20,240
others do similar things you have a

00:23:17,750 --> 00:23:22,940
client that could run as a demon as an

00:23:20,240 --> 00:23:25,220
agent you can just cron it up to run

00:23:22,940 --> 00:23:27,260
periodically however often you want it

00:23:25,220 --> 00:23:28,790
to run if you run it as a demon it's

00:23:27,260 --> 00:23:31,160
just going to answer any time the puppet

00:23:28,790 --> 00:23:32,580
server calls to it if you have if you

00:23:31,160 --> 00:23:36,539
run it as Kron they

00:23:32,580 --> 00:23:37,679
and anytime cron iterates is going to

00:23:36,539 --> 00:23:39,149
ask the server do I have any

00:23:37,679 --> 00:23:40,679
configuration updates and it's going to

00:23:39,149 --> 00:23:43,799
give them to you or you could just run

00:23:40,679 --> 00:23:45,559
it manually and when you run it for the

00:23:43,799 --> 00:23:49,200
first time you have to do an SSL

00:23:45,559 --> 00:23:51,090
certificate authentication same thing

00:23:49,200 --> 00:23:52,950
with gpg when you're talking about chef

00:23:51,090 --> 00:23:56,340
you have to make sure that these

00:23:52,950 --> 00:23:58,559
transactions are authorized and as far

00:23:56,340 --> 00:24:00,269
as puppet is concerned you've got that

00:23:58,559 --> 00:24:02,730
puppet comp file that's in the actual

00:24:00,269 --> 00:24:04,799
same place as the server file so you can

00:24:02,730 --> 00:24:06,480
technically have a client and server

00:24:04,799 --> 00:24:09,029
running on the same box although that's

00:24:06,480 --> 00:24:10,799
not necessarily a wise thing to do and

00:24:09,029 --> 00:24:13,440
then a few interesting things about

00:24:10,799 --> 00:24:16,049
puppet 3 which is recent not that recent

00:24:13,440 --> 00:24:17,850
now 20 yeah yeah it's almost two years

00:24:16,049 --> 00:24:20,990
now yeah well maybe I get rid of this

00:24:17,850 --> 00:24:22,980
slide now but it's a lot faster we

00:24:20,990 --> 00:24:25,740
reconfigured it every configured it we

00:24:22,980 --> 00:24:29,730
refactored and throughout xmlrpc and

00:24:25,740 --> 00:24:31,500
it's entirely rest now higher as I

00:24:29,730 --> 00:24:35,880
mentioned is an integral part of puffit

00:24:31,500 --> 00:24:38,519
and the most recent 2 dot X stuff will

00:24:35,880 --> 00:24:40,169
certainly work with 3x stuff but you get

00:24:38,519 --> 00:24:41,760
any all older than that you might have

00:24:40,169 --> 00:24:45,059
some problems so it's best if you're

00:24:41,760 --> 00:24:47,789
updating that you upgrade to dot 4 or 2

00:24:45,059 --> 00:24:52,620
out 522 that seven before you move on to

00:24:47,789 --> 00:24:54,299
3x just standard client-server stuff

00:24:52,620 --> 00:24:55,559
that you'd expect to see you have the

00:24:54,299 --> 00:24:56,909
puppet master here with all different

00:24:55,559 --> 00:24:58,889
puppets that it communicates with

00:24:56,909 --> 00:25:01,950
bi-directionally back on the pep up

00:24:58,889 --> 00:25:06,990
master server side you keep this variety

00:25:01,950 --> 00:25:09,149
of manifests and modules and then you

00:25:06,990 --> 00:25:11,220
keep a nice database of all the

00:25:09,149 --> 00:25:14,639
different configuration data that comes

00:25:11,220 --> 00:25:17,580
from the puppets all of these platforms

00:25:14,639 --> 00:25:21,539
and more these are all the ones you care

00:25:17,580 --> 00:25:24,450
about right puppet and chef and see if

00:25:21,539 --> 00:25:29,730
engine all are going to cover this span

00:25:24,450 --> 00:25:31,559
here and ansible typical things that you

00:25:29,730 --> 00:25:34,860
want to control configuration management

00:25:31,559 --> 00:25:36,960
wise users and user authentication what

00:25:34,860 --> 00:25:39,389
packages are installed and more

00:25:36,960 --> 00:25:41,970
importantly what packages are not

00:25:39,389 --> 00:25:44,440
installed right that's just as important

00:25:41,970 --> 00:25:47,330
if not more so

00:25:44,440 --> 00:25:49,700
making sure that certain services are

00:25:47,330 --> 00:25:50,779
stopped or started and the kinds of

00:25:49,700 --> 00:25:54,529
dependencies that may be involved

00:25:50,779 --> 00:25:57,590
they're asserting specific configuration

00:25:54,529 --> 00:25:59,990
settings deploying configuration files

00:25:57,590 --> 00:26:01,490
not just changing them and any other

00:25:59,990 --> 00:26:03,500
files that you want to deploy to each of

00:26:01,490 --> 00:26:07,549
the systems that you're managing and at

00:26:03,500 --> 00:26:10,429
one of the most significant use cases

00:26:07,549 --> 00:26:13,010
for the development of puppet was the

00:26:10,429 --> 00:26:16,340
marriage that it had with nagios one of

00:26:13,010 --> 00:26:19,279
the huge user bases for puppet are those

00:26:16,340 --> 00:26:22,580
who use nagios for monitoring and being

00:26:19,279 --> 00:26:25,340
able to push out all of those nagios

00:26:22,580 --> 00:26:27,470
rules to the clients is very easy to do

00:26:25,340 --> 00:26:32,570
with puppet can you do it with chef and

00:26:27,470 --> 00:26:34,850
others yes it's simply that nagios was

00:26:32,570 --> 00:26:37,970
the driving force behind some of that

00:26:34,850 --> 00:26:44,090
those key features of the development

00:26:37,970 --> 00:26:46,190
and puppet and you can think of terms of

00:26:44,090 --> 00:26:48,529
all of these programming characteristics

00:26:46,190 --> 00:26:49,299
like types and classes you can go

00:26:48,529 --> 00:26:51,409
through a lot of sophisticated

00:26:49,299 --> 00:26:53,690
inheritance whether that's good and bad

00:26:51,409 --> 00:26:57,789
because sometimes coupling is not a good

00:26:53,690 --> 00:27:02,510
thing to go through variables arrays

00:26:57,789 --> 00:27:08,350
conditionals if I've got red hat I want

00:27:02,510 --> 00:27:12,919
my my my web server to be referenced as

00:27:08,350 --> 00:27:15,279
httpd if I've got souza I want my web

00:27:12,919 --> 00:27:17,330
server to be referenced as Apache to

00:27:15,279 --> 00:27:20,269
conditionals that allow us to do those

00:27:17,330 --> 00:27:22,639
kinds of things fairly easily you can

00:27:20,269 --> 00:27:24,320
also put together your own functions and

00:27:22,639 --> 00:27:27,769
defines to make it more sophisticated

00:27:24,320 --> 00:27:30,340
you manage a variety of nodes and two

00:27:27,769 --> 00:27:33,559
characteristics based on those nodes and

00:27:30,340 --> 00:27:35,480
although ruby is not directly exposed in

00:27:33,559 --> 00:27:37,580
the same way that Chef is puppet still

00:27:35,480 --> 00:27:41,630
allows you to use Ruby characteristics

00:27:37,580 --> 00:27:44,000
through what we call templates here are

00:27:41,630 --> 00:27:45,440
a bunch of the standard native types

00:27:44,000 --> 00:27:48,049
that we talked about make sure that

00:27:45,440 --> 00:27:50,090
package is installed deliver this file

00:27:48,049 --> 00:27:51,950
make sure the host is called this or

00:27:50,090 --> 00:27:54,830
behave a certain way when host is called

00:27:51,950 --> 00:27:57,140
that distributing ssh-keys all of these

00:27:54,830 --> 00:27:58,760
different kinds of data types

00:27:57,140 --> 00:28:00,790
that make it easy for you to manage each

00:27:58,760 --> 00:28:04,670
of the puppets that you are managing

00:28:00,790 --> 00:28:08,390
similar things that exist in chef and CF

00:28:04,670 --> 00:28:12,350
engine a puppet example here if I were

00:28:08,390 --> 00:28:14,750
to be managing Apache manually I'd SSH

00:28:12,350 --> 00:28:17,990
into the server and I would run zipper

00:28:14,750 --> 00:28:19,700
install apache2 then I would edit this

00:28:17,990 --> 00:28:21,410
configuration file and a bunch of other

00:28:19,700 --> 00:28:22,810
configuration files and then i would

00:28:21,410 --> 00:28:25,190
start it up and make sure that it works

00:28:22,810 --> 00:28:27,290
the puppet way to do exactly the same

00:28:25,190 --> 00:28:30,500
sort of thing is I don't SSH into the

00:28:27,290 --> 00:28:33,130
box i write this puppet module that says

00:28:30,500 --> 00:28:40,340
make sure that package apache2 is

00:28:33,130 --> 00:28:42,740
installed deliver to the puppet target

00:28:40,340 --> 00:28:45,380
the the agent the file that's going to

00:28:42,740 --> 00:28:47,210
land in this space and where is that

00:28:45,380 --> 00:28:49,490
file going to come from is going to come

00:28:47,210 --> 00:28:51,230
from the server the server side this

00:28:49,490 --> 00:28:53,450
file that I have located on the server

00:28:51,230 --> 00:28:56,330
side and then once that stuff is done

00:28:53,450 --> 00:29:00,920
make sure that apache is started simple

00:28:56,330 --> 00:29:03,440
declarative very easy to do puppet a

00:29:00,920 --> 00:29:06,440
chef you do very similar things CF

00:29:03,440 --> 00:29:08,270
engine although the language of CF

00:29:06,440 --> 00:29:10,550
engine is a little quirky and people

00:29:08,270 --> 00:29:13,970
don't like it it's antiquated you do the

00:29:10,550 --> 00:29:17,000
same thing you have that tool called

00:29:13,970 --> 00:29:18,530
factor you where you can harvest all of

00:29:17,000 --> 00:29:19,790
the information about all of the

00:29:18,530 --> 00:29:21,530
different puppets that you're managing

00:29:19,790 --> 00:29:25,850
here are some examples of the things

00:29:21,530 --> 00:29:27,830
that you see from this the puppets what

00:29:25,850 --> 00:29:30,950
the kernel version is a variable that

00:29:27,830 --> 00:29:33,890
you can use all of these are variables

00:29:30,950 --> 00:29:36,050
that you can reference and things like

00:29:33,890 --> 00:29:37,820
which operating system it is you can

00:29:36,050 --> 00:29:42,260
even tell whether the system that's

00:29:37,820 --> 00:29:44,750
running is virtual or physical a chef

00:29:42,260 --> 00:29:47,900
example similar to the ones that we had

00:29:44,750 --> 00:29:52,160
from the puffin puppet example in this

00:29:47,900 --> 00:29:54,050
case we even have this way of Kevin

00:29:52,160 --> 00:29:57,260
conditionals to behave a certain way

00:29:54,050 --> 00:29:59,660
when we reboot or DoD or debian or when

00:29:57,260 --> 00:30:03,550
we're Susa and then at the end make sure

00:29:59,660 --> 00:30:06,350
that we start the thing up and it runs

00:30:03,550 --> 00:30:07,440
here would be the demonstration which i

00:30:06,350 --> 00:30:11,460
am going to

00:30:07,440 --> 00:30:13,379
hope tactfully decline to do so but you

00:30:11,460 --> 00:30:15,360
can see the power that you have and you

00:30:13,379 --> 00:30:17,220
see you have the ability to scale things

00:30:15,360 --> 00:30:19,620
you could have this whole infrastructure

00:30:17,220 --> 00:30:22,889
of web servers this whole infrastructure

00:30:19,620 --> 00:30:25,559
of DNS this whole infrastructure of file

00:30:22,889 --> 00:30:28,710
services and keeping them all managed

00:30:25,559 --> 00:30:31,440
from a centralized server using

00:30:28,710 --> 00:30:34,259
configuration management to know when

00:30:31,440 --> 00:30:37,049
things change that it's a change that I

00:30:34,259 --> 00:30:40,190
intended to change and anything that

00:30:37,049 --> 00:30:43,679
anybody does that's unintended will get

00:30:40,190 --> 00:30:46,919
restored appropriately and when a system

00:30:43,679 --> 00:30:49,019
crashes I don't have to panic and race

00:30:46,919 --> 00:30:50,159
down and go ahead and to tear that

00:30:49,019 --> 00:30:51,659
machine out and try and get a

00:30:50,159 --> 00:30:52,830
replacement try to remember what all

00:30:51,659 --> 00:30:54,000
this says settings were try to remember

00:30:52,830 --> 00:30:56,429
what all the software was that was

00:30:54,000 --> 00:30:58,200
installed on that I stand up a new

00:30:56,429 --> 00:31:01,440
server whether it's a physical machine

00:30:58,200 --> 00:31:04,409
or some cloud machine and I deploy that

00:31:01,440 --> 00:31:08,070
configuration to that web server to

00:31:04,409 --> 00:31:10,259
bring it back up after a crash or if I

00:31:08,070 --> 00:31:12,120
need to spin up nine machines to handle

00:31:10,259 --> 00:31:15,409
the huge load that's coming I have a

00:31:12,120 --> 00:31:18,320
mechanism to do that predictably

00:31:15,409 --> 00:31:23,490
reproducibly effectively and efficiently

00:31:18,320 --> 00:31:25,289
so configuration management do it and

00:31:23,490 --> 00:31:29,159
I'm happy to answer any questions that

00:31:25,289 --> 00:31:31,440
you may have so that you can keep stuff

00:31:29,159 --> 00:31:34,679
automated you can keep all of your

00:31:31,440 --> 00:31:37,350
systems regulated and auditable and then

00:31:34,679 --> 00:31:41,009
it's much easier to do than a

00:31:37,350 --> 00:31:43,379
spiral-bound notebook my name is Craig

00:31:41,009 --> 00:31:44,970
Gardner I'll put my address back here up

00:31:43,379 --> 00:31:47,220
at the front I'm happy to answer

00:31:44,970 --> 00:31:51,590
questions here or if you want to write

00:31:47,220 --> 00:31:51,590
me email later habit to any questions

00:31:52,259 --> 00:31:55,259
Cornelius

00:32:14,820 --> 00:32:19,509
that's a great question and and I'm

00:32:18,100 --> 00:32:21,249
going to answer your question by saying

00:32:19,509 --> 00:32:23,559
nothing ever breaks for us we are

00:32:21,249 --> 00:32:28,200
perfect we do it right every time but

00:32:23,559 --> 00:32:31,989
yeah but you know that's not true yes

00:32:28,200 --> 00:32:33,669
yeah that's always a tough one the this

00:32:31,989 --> 00:32:36,639
textbook approach to that sort of thing

00:32:33,669 --> 00:32:38,019
is similar to any other production

00:32:36,639 --> 00:32:41,139
environment that you would be in is that

00:32:38,019 --> 00:32:43,389
you you want to have a test environment

00:32:41,139 --> 00:32:45,399
where you test these things out first

00:32:43,389 --> 00:32:47,470
before you promote them to production

00:32:45,399 --> 00:32:48,489
and that's true of a variety of

00:32:47,470 --> 00:32:50,379
different things that we do in the

00:32:48,489 --> 00:32:53,109
software environment including DevOps

00:32:50,379 --> 00:32:55,149
right we need to test the application

00:32:53,109 --> 00:32:57,700
that we're deploying and we need to test

00:32:55,149 --> 00:33:00,730
the means to deploy the application that

00:32:57,700 --> 00:33:03,609
we're deploying and when things go wrong

00:33:00,730 --> 00:33:06,129
that's another good reason to have good

00:33:03,609 --> 00:33:08,139
monitoring systems like nagios that are

00:33:06,129 --> 00:33:09,820
going to report to you the kinds of

00:33:08,139 --> 00:33:13,289
things that might be going wrong as

00:33:09,820 --> 00:33:15,700
quickly as possible other than that

00:33:13,289 --> 00:33:19,299
you've just got to have a skilled team

00:33:15,700 --> 00:33:20,980
that trusts each other and that you back

00:33:19,299 --> 00:33:23,109
each other up you know what to expect

00:33:20,980 --> 00:33:28,559
from from who's involved in that team

00:33:23,109 --> 00:33:31,179
and know that that it's software right

00:33:28,559 --> 00:33:33,820
things are going to go wrong and be able

00:33:31,179 --> 00:33:36,869
to react to them efficiently if you've

00:33:33,820 --> 00:33:39,850
got good process if you've got good

00:33:36,869 --> 00:33:43,119
discipline and you've got good skilled

00:33:39,850 --> 00:33:45,519
engineers with the right tools they can

00:33:43,119 --> 00:33:47,739
do the right things even when things go

00:33:45,519 --> 00:33:52,200
wrong they can react quickly and make

00:33:47,739 --> 00:33:56,429
things right not the answer you wanted

00:33:52,200 --> 00:33:56,429
thanks pretty this Daniel

00:33:59,170 --> 00:34:04,330
so I know that my

00:34:17,129 --> 00:34:29,520
whatever he could I need to make some

00:34:21,429 --> 00:34:34,559
changes so we be awesome if I could just

00:34:29,520 --> 00:34:39,129
set up the server for something

00:34:34,559 --> 00:34:42,360
and that would be part of the Persian or

00:34:39,129 --> 00:34:45,170
whatever you just also change

00:34:42,360 --> 00:34:45,170
pi

00:34:49,429 --> 00:34:54,720
that's so I will try to summarize what

00:34:53,010 --> 00:34:58,740
it is that you said which is an

00:34:54,720 --> 00:35:00,870
interesting problem that I think ansible

00:34:58,740 --> 00:35:03,690
is the kind of thing that handles better

00:35:00,870 --> 00:35:07,650
than these other ones do the question is

00:35:03,690 --> 00:35:09,330
I don't want to be I'm summarizing and

00:35:07,650 --> 00:35:13,620
I'm sorry to say that I don't want to be

00:35:09,330 --> 00:35:16,290
beholden to all of the bulk challenges

00:35:13,620 --> 00:35:18,480
that come from an entire package I want

00:35:16,290 --> 00:35:22,560
to be able to manage just the changes

00:35:18,480 --> 00:35:24,390
that happen for a specific verge that

00:35:22,560 --> 00:35:26,790
came in a specific version of an RPM

00:35:24,390 --> 00:35:31,740
package or other package whatever it may

00:35:26,790 --> 00:35:35,490
be and deploy only that change and this

00:35:31,740 --> 00:35:37,110
is a feature that well certainly you

00:35:35,490 --> 00:35:39,810
could get around that by certainly not

00:35:37,110 --> 00:35:42,090
using a package manager at all right

00:35:39,810 --> 00:35:44,070
just put in the right files in the right

00:35:42,090 --> 00:35:45,660
place on the server that then can be

00:35:44,070 --> 00:35:47,690
deployed but that's not a good solution

00:35:45,660 --> 00:35:50,340
is it that's not a good solution at all

00:35:47,690 --> 00:35:53,670
there isn't really a good way of doing

00:35:50,340 --> 00:35:55,710
that yet but that's a good use case that

00:35:53,670 --> 00:35:58,830
I think would be interesting to propose

00:35:55,710 --> 00:36:01,710
to the the the various communities of

00:35:58,830 --> 00:36:05,310
these projects to see how you could

00:36:01,710 --> 00:36:07,590
better economize and be more atomic in

00:36:05,310 --> 00:36:10,110
the kinds of changes that you want to

00:36:07,590 --> 00:36:12,140
push out in the context of existing

00:36:10,110 --> 00:36:17,630
technologies like the package manager

00:36:12,140 --> 00:36:17,630
thanks Daniel other questions

00:36:19,599 --> 00:36:22,839
yes please

00:36:39,859 --> 00:36:50,210
I'm sorry I didn't quite understand stop

00:37:09,039 --> 00:37:15,190
so did I say

00:37:19,490 --> 00:37:25,920
good okay question is what what would be

00:37:23,520 --> 00:37:28,860
important consideration to run the

00:37:25,920 --> 00:37:31,280
client as a demon versus running it as a

00:37:28,860 --> 00:37:31,280
cron job

00:37:40,140 --> 00:37:42,170
I

00:38:33,150 --> 00:38:39,550
so if I'm going to be able to summarize

00:38:35,620 --> 00:38:42,940
correctly you're saying that in your

00:38:39,550 --> 00:38:47,080
workflow you may want to go out to

00:38:42,940 --> 00:38:51,520
system a and make a manual change to it

00:38:47,080 --> 00:38:55,000
and before you get around to creating a

00:38:51,520 --> 00:38:57,190
recipe for that for puppet I'm sorry I'm

00:38:55,000 --> 00:39:01,300
mixing metaphors their right and create

00:38:57,190 --> 00:39:05,530
a rule for that create a module or a

00:39:01,300 --> 00:39:09,220
manifest datum for that you think that

00:39:05,530 --> 00:39:10,990
the demon running on system a is going

00:39:09,220 --> 00:39:13,180
to overwrite the changes that you have

00:39:10,990 --> 00:39:15,690
made manually on system a and you don't

00:39:13,180 --> 00:39:15,690
want that to happen

00:39:32,590 --> 00:39:38,410
the same observation

00:39:35,720 --> 00:39:38,410
haha

00:40:12,390 --> 00:40:18,400
but perhaps that you could compartment

00:40:15,910 --> 00:40:20,339
it depends on your workflow right a

00:40:18,400 --> 00:40:24,359
variety of choices that you make here

00:40:20,339 --> 00:40:26,859
you can divide up your different

00:40:24,359 --> 00:40:29,229
manifests into a variety of different

00:40:26,859 --> 00:40:32,559
classes right you could say that this

00:40:29,229 --> 00:40:36,460
manifesto of this this definition of

00:40:32,559 --> 00:40:39,130
machines applies similarly it's the same

00:40:36,460 --> 00:40:42,640
sort of functionality that I have for

00:40:39,130 --> 00:40:45,670
data center be as I have for a but I

00:40:42,640 --> 00:40:47,680
want to treat them differently for

00:40:45,670 --> 00:40:50,229
whatever reason that you may have and so

00:40:47,680 --> 00:40:55,269
you would create a manifest for these

00:40:50,229 --> 00:40:58,599
servers in data center a which would be

00:40:55,269 --> 00:41:01,420
different manifest of machines that you

00:40:58,599 --> 00:41:04,660
have for data center be and then you

00:41:01,420 --> 00:41:07,029
would apply the changes for a that would

00:41:04,660 --> 00:41:09,130
not affect be until the time comes that

00:41:07,029 --> 00:41:12,670
you implement those changes for B and

00:41:09,130 --> 00:41:15,279
they could then be independent you could

00:41:12,670 --> 00:41:16,509
they could still be demonized but

00:41:15,279 --> 00:41:19,930
because you've divided them into two

00:41:16,509 --> 00:41:21,369
different classes of systems they can be

00:41:19,930 --> 00:41:24,269
managed independent one of the other

00:41:21,369 --> 00:41:24,269
with the same rules

00:41:36,890 --> 00:41:42,119
good so again it depends on your

00:41:40,170 --> 00:41:44,730
workflow perhaps you are in a

00:41:42,119 --> 00:41:47,880
circumstance where you don't want to

00:41:44,730 --> 00:41:49,859
have traffic happening on your wire

00:41:47,880 --> 00:41:52,320
because it's expensive at certain times

00:41:49,859 --> 00:41:55,410
of the day and so if you had it

00:41:52,320 --> 00:41:57,349
demonized it would try to make all those

00:41:55,410 --> 00:41:59,910
changes all at exactly that time

00:41:57,349 --> 00:42:03,630
whenever the change gets made on the

00:41:59,910 --> 00:42:06,380
server all of the client-side things

00:42:03,630 --> 00:42:08,369
would start cascading immediately and

00:42:06,380 --> 00:42:10,560
you don't want that to happen a

00:42:08,369 --> 00:42:12,480
particular time of the day or maybe not

00:42:10,560 --> 00:42:14,550
because it's expensive but because it's

00:42:12,480 --> 00:42:16,349
during a production time right it's

00:42:14,550 --> 00:42:19,680
during a time when there's not supposed

00:42:16,349 --> 00:42:22,770
to be any changes to the systems so you

00:42:19,680 --> 00:42:26,130
might say we only run the client-side

00:42:22,770 --> 00:42:29,550
updates between midnight and 4am and

00:42:26,130 --> 00:42:34,670
cron them up appropriately that makes

00:42:29,550 --> 00:42:34,670

YouTube URL: https://www.youtube.com/watch?v=ic6FpP262uA


