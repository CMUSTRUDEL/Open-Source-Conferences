Title: OSC15 - Lars Vogdt - Monitoring at with SUSE
Publication date: 2015-05-03
Playlist: openSUSE Conference 2015
Description: 
	Thousands of running services on hundreds of machines ask the admins to pay attention. At all times, on all channels, with all available software packages that openSUSE has to offer. Lars does not only keep an eye on all devices inside SUSE R&D, he is also maintaining some of the biggest packages in the server:monitoring repository like Nagios, Icinga, Shinken, check_mk, mod_gearman, Naemon, PNP4Nagios or the monitoring-plugins (and others). The integration of some of those packages into a complex, secure and high available monitoring setup together with some tips and tricks and insights into the SUSE R&D infrastructure will be demonstrated.
Captions: 
	00:00:00,000 --> 00:00:08,940
one hello everybody so I will show you

00:00:05,180 --> 00:00:10,380
what we do inside souza development with

00:00:08,940 --> 00:00:14,070
all the monitoring stuff that is

00:00:10,380 --> 00:00:16,470
available on the market to be honest I

00:00:14,070 --> 00:00:19,740
have a couple of slides I have a lot of

00:00:16,470 --> 00:00:23,820
slides and I will just do a quick

00:00:19,740 --> 00:00:26,430
walkthrough for you if you want to ask

00:00:23,820 --> 00:00:29,279
questions at any time please raise your

00:00:26,430 --> 00:00:33,239
hands stand up sing a song so I can

00:00:29,279 --> 00:00:35,820
recognize you otherwise you need to

00:00:33,239 --> 00:00:39,540
watch the video afterward or download

00:00:35,820 --> 00:00:42,690
the slide and look at them in deep so

00:00:39,540 --> 00:00:44,940
what's on the agenda today first we will

00:00:42,690 --> 00:00:47,700
speak about the official history of

00:00:44,940 --> 00:00:52,440
monitoring and especially the monitoring

00:00:47,700 --> 00:00:55,379
packages inside Souza then I will give

00:00:52,440 --> 00:00:57,300
you a short view what we are doing

00:00:55,379 --> 00:00:58,770
inside suzerainty with the monitoring

00:00:57,300 --> 00:01:03,210
packages that we provide to our

00:00:58,770 --> 00:01:06,450
customers I was often asked especially

00:01:03,210 --> 00:01:09,030
with the release of 13 dot to where are

00:01:06,450 --> 00:01:13,530
the nagios plugins so hopefully I can

00:01:09,030 --> 00:01:17,070
answer that question and then go into

00:01:13,530 --> 00:01:21,570
the details showing you some tips and

00:01:17,070 --> 00:01:25,020
tricks that we evolved over time and if

00:01:21,570 --> 00:01:28,049
there is still some time left I will

00:01:25,020 --> 00:01:30,900
love to show you how we set up a high

00:01:28,049 --> 00:01:33,200
available cluster which is also doing

00:01:30,900 --> 00:01:37,229
load balancing for all the monitoring

00:01:33,200 --> 00:01:42,450
and then there is still some time left

00:01:37,229 --> 00:01:44,850
we will do also a table so about the

00:01:42,450 --> 00:01:48,600
short history monitoring in Zeus's

00:01:44,850 --> 00:01:51,210
started with suse linux 7.3 during that

00:01:48,600 --> 00:01:56,520
time the monitoring package was called

00:01:51,210 --> 00:01:58,979
net chained a year later there was the

00:01:56,520 --> 00:02:02,820
first nagios efficient as successor of

00:01:58,979 --> 00:02:05,579
neck saying during that time also big

00:02:02,820 --> 00:02:08,039
sister was around we still have one or

00:02:05,579 --> 00:02:11,879
two of those big sister instances

00:02:08,039 --> 00:02:13,970
running but as you can see even in this

00:02:11,879 --> 00:02:17,610
time they were also

00:02:13,970 --> 00:02:21,060
other Forks or other implementations

00:02:17,610 --> 00:02:23,280
beside nagios even if Nagas right now is

00:02:21,060 --> 00:02:30,510
smaller less the monitoring solution in

00:02:23,280 --> 00:02:32,730
the open source world so 2007-2009 there

00:02:30,510 --> 00:02:36,209
was some improvements inside the nagios

00:02:32,730 --> 00:02:39,569
tech they jumped from version 26 to

00:02:36,209 --> 00:02:41,010
version 3 and this version is still

00:02:39,569 --> 00:02:44,069
supported right now by suse linux

00:02:41,010 --> 00:02:46,849
enterprise but what was interesting for

00:02:44,069 --> 00:02:51,049
us and especially for the opensuse world

00:02:46,849 --> 00:02:57,959
was 2009 when a project called a kinga

00:02:51,049 --> 00:03:00,630
forked nagios I don't will repeat the

00:02:57,959 --> 00:03:03,319
whole story it's more a social problem

00:03:00,630 --> 00:03:06,239
than a technical problem why they forked

00:03:03,319 --> 00:03:09,810
but in the end at least use a jump on

00:03:06,239 --> 00:03:12,870
the plane and we will replace nagios

00:03:09,810 --> 00:03:16,140
even on the enterprise distribution with

00:03:12,870 --> 00:03:18,780
the kinga in the next release and a

00:03:16,140 --> 00:03:21,319
Kinger will be part of suzy manager so

00:03:18,780 --> 00:03:23,810
we can do more releases more often

00:03:21,319 --> 00:03:26,549
especially in this monitoring area and

00:03:23,810 --> 00:03:29,569
integrate that one better into the

00:03:26,549 --> 00:03:31,950
management solution that user provides

00:03:29,569 --> 00:03:34,560
what does it mean for opensuse for

00:03:31,950 --> 00:03:37,019
albums use it means that the nagios

00:03:34,560 --> 00:03:39,359
package that we have in opensuse is more

00:03:37,019 --> 00:03:41,130
or less unsupported even if I am still

00:03:39,359 --> 00:03:43,260
the maintainer and I do stuff and I

00:03:41,130 --> 00:03:46,620
still have mine Arceus test instances up

00:03:43,260 --> 00:03:50,940
and running but I expect nagios to

00:03:46,620 --> 00:03:53,280
become less interesting for us and less

00:03:50,940 --> 00:03:56,280
interesting for me because I already

00:03:53,280 --> 00:03:59,489
switched over to a Kinger since quite

00:03:56,280 --> 00:04:02,459
some years what I'm currently thinking

00:03:59,489 --> 00:04:05,459
about is the change from a king of one

00:04:02,459 --> 00:04:07,200
to a king got to because that change

00:04:05,459 --> 00:04:10,799
will have some very very interesting

00:04:07,200 --> 00:04:14,220
changes with them because in get you is

00:04:10,799 --> 00:04:16,680
incompatible right now when you jump

00:04:14,220 --> 00:04:19,470
over from your Nargis installation to a

00:04:16,680 --> 00:04:22,070
Kinger one it's more or less an easy

00:04:19,470 --> 00:04:24,300
step he will move or rename the folder

00:04:22,070 --> 00:04:27,950
you will rename the main configuration

00:04:24,300 --> 00:04:27,950
file and you're done

00:04:28,190 --> 00:04:35,190
with nargis for and even with your kinga

00:04:31,890 --> 00:04:38,400
to that might be different and I spoke

00:04:35,190 --> 00:04:41,460
with both app streams and both say well

00:04:38,400 --> 00:04:43,440
if you do such a big step forward in

00:04:41,460 --> 00:04:46,560
your monitoring infrastructure you want

00:04:43,440 --> 00:04:47,730
to do it from scratch and this is to be

00:04:46,560 --> 00:04:49,830
honest nothing I want to do is

00:04:47,730 --> 00:04:53,820
administrator and this is also nothing I

00:04:49,830 --> 00:04:56,730
want you put on to my customers so what

00:04:53,820 --> 00:04:58,950
will happen after that with a kinga

00:04:56,730 --> 00:05:02,160
right now in opensuse and on to the

00:04:58,950 --> 00:05:04,170
manager we will see the interesting

00:05:02,160 --> 00:05:07,980
point is right now we have many many

00:05:04,170 --> 00:05:11,160
additional monitoring solutions that can

00:05:07,980 --> 00:05:13,500
be used in that are lucky we are already

00:05:11,160 --> 00:05:15,660
in server monitoring as packages so

00:05:13,500 --> 00:05:18,360
right now it might the time for the

00:05:15,660 --> 00:05:22,050
community to test what is available on

00:05:18,360 --> 00:05:24,810
the market and decide just by foot walks

00:05:22,050 --> 00:05:27,300
which project will be the final

00:05:24,810 --> 00:05:31,200
successor of this big nagios enterprise

00:05:27,300 --> 00:05:33,330
system just to mention it now gives

00:05:31,200 --> 00:05:35,940
enterprise is still there they are

00:05:33,330 --> 00:05:37,830
making big money out of that but most

00:05:35,940 --> 00:05:39,930
other projects at least here in Europe

00:05:37,830 --> 00:05:42,660
decided not to use Nagas anymore or

00:05:39,930 --> 00:05:48,690
forged and that's what opensuse was

00:05:42,660 --> 00:05:52,290
doing also so what we are we using as

00:05:48,690 --> 00:05:54,300
user to monitor on ourselves in general

00:05:52,290 --> 00:05:56,250
we use of course the suse linux

00:05:54,300 --> 00:05:59,550
enterprise server with a high

00:05:56,250 --> 00:06:02,190
availability extension and we use a lot

00:05:59,550 --> 00:06:05,580
of additional packages from the server

00:06:02,190 --> 00:06:09,180
monitoring repository meanwhile we have

00:06:05,580 --> 00:06:10,950
more than 150 plugins in there which can

00:06:09,180 --> 00:06:15,110
be installed as single packages you can

00:06:10,950 --> 00:06:18,750
install 150 single packages if you like

00:06:15,110 --> 00:06:20,970
some of them are pearl deep pool

00:06:18,750 --> 00:06:22,830
packages need a lot of modules so most

00:06:20,970 --> 00:06:25,770
open come from devil languages pearl and

00:06:22,830 --> 00:06:30,170
for asterisk and some other stuff like

00:06:25,770 --> 00:06:33,030
SMS tools we also news network telephony

00:06:30,170 --> 00:06:35,100
we already have internal packages that I

00:06:33,030 --> 00:06:37,620
cannot release to the outside I'm sorry

00:06:35,100 --> 00:06:40,140
but there are legal reasons so for

00:06:37,620 --> 00:06:40,600
example if you have oracle or if you

00:06:40,140 --> 00:06:44,380
have

00:06:40,600 --> 00:06:46,360
java application that is crippled you

00:06:44,380 --> 00:06:49,870
cannot release it to the public but in

00:06:46,360 --> 00:06:53,460
general everything that is used inside

00:06:49,870 --> 00:06:57,120
zuza can be found on server monitoring

00:06:53,460 --> 00:06:59,650
so what I can say from my perspective

00:06:57,120 --> 00:07:01,270
the packages that you can see in server

00:06:59,650 --> 00:07:04,270
monitoring are the ones that are in

00:07:01,270 --> 00:07:06,010
production and yes they are seeing

00:07:04,270 --> 00:07:11,980
updates from time to time because they

00:07:06,010 --> 00:07:17,010
are used so about the question where are

00:07:11,980 --> 00:07:17,010
the nagas plugins there are two boxes

00:07:17,700 --> 00:07:24,280
hands the upstream author of the foreman

00:07:20,590 --> 00:07:27,520
Arceus plugins opened bugzilla entries

00:07:24,280 --> 00:07:30,040
on both because what happened suddenly

00:07:27,520 --> 00:07:33,400
nargis enterprises decided to change the

00:07:30,040 --> 00:07:36,640
dns entries 10 years they live with a

00:07:33,400 --> 00:07:39,760
community where they say okay here is

00:07:36,640 --> 00:07:42,760
your server you can use it we own the

00:07:39,760 --> 00:07:45,640
domain now here's my nose plug ins com

00:07:42,760 --> 00:07:48,310
or arc and you can do whatever you want

00:07:45,640 --> 00:07:51,880
on that platform so 10 years the

00:07:48,310 --> 00:07:55,810
community is using it right now we have

00:07:51,880 --> 00:07:58,360
more successors or more competitors in

00:07:55,810 --> 00:08:01,060
the area of nagios and the monitoring or

00:07:58,360 --> 00:08:03,460
Nagas plugins decided to say hey nagios

00:08:01,060 --> 00:08:05,740
plugins it is not only useful for nagios

00:08:03,460 --> 00:08:09,700
you can also use them with the king of a

00:08:05,740 --> 00:08:11,770
shinken or all the other tools and that

00:08:09,700 --> 00:08:13,450
was something that the original Nagas

00:08:11,770 --> 00:08:16,990
enterprise company doesn't want to see

00:08:13,450 --> 00:08:19,900
on the webpage so they cloned the source

00:08:16,990 --> 00:08:21,850
code they cloned the webpage change the

00:08:19,900 --> 00:08:24,100
dns entries because they are the owners

00:08:21,850 --> 00:08:25,570
that was easy for them and now they're

00:08:24,100 --> 00:08:29,350
pointing suddenly to a completely

00:08:25,570 --> 00:08:31,930
different server and the community guys

00:08:29,350 --> 00:08:34,330
behind nargis plugins said okay this is

00:08:31,930 --> 00:08:37,300
not what we want to see and they

00:08:34,330 --> 00:08:39,310
originally opened it as security report

00:08:37,300 --> 00:08:41,590
because suddenly someone can download

00:08:39,310 --> 00:08:43,960
stuff that he thinks is from the

00:08:41,590 --> 00:08:48,370
community but from an Argus enterprise

00:08:43,960 --> 00:08:50,710
server so right now if you want to

00:08:48,370 --> 00:08:54,460
follow the discussion the redhead

00:08:50,710 --> 00:08:55,810
bugzilla shows all details or crazy

00:08:54,460 --> 00:08:58,150
it's and all that stuff that you never

00:08:55,810 --> 00:08:59,530
ever want to read but if you have time

00:08:58,150 --> 00:09:06,550
one hour to read through all these

00:08:59,530 --> 00:09:09,910
entries it's fun so in 2014 in july i

00:09:06,550 --> 00:09:11,680
decided to rename nagios plugins to

00:09:09,910 --> 00:09:15,460
monitoring plugins and therefore follow

00:09:11,680 --> 00:09:17,680
the upstream solution as Nagas

00:09:15,460 --> 00:09:20,740
enterprises still supports or provides

00:09:17,680 --> 00:09:23,950
an argue spragins package we already

00:09:20,740 --> 00:09:26,470
have a nagios core plug-ins package

00:09:23,950 --> 00:09:30,250
inside server monitoring now where I

00:09:26,470 --> 00:09:32,710
normally upload the sources and see that

00:09:30,250 --> 00:09:34,900
the package doesn't build anymore so I'm

00:09:32,710 --> 00:09:36,910
just caring about monitoring plugins

00:09:34,900 --> 00:09:39,480
right now if there is some volunteer to

00:09:36,910 --> 00:09:42,520
take over the nagios core plugins

00:09:39,480 --> 00:09:48,250
distributed by Nagas enterprises feel

00:09:42,520 --> 00:09:51,100
free to step up so for zuza rd internal

00:09:48,250 --> 00:09:53,830
what are we using we are a bit special

00:09:51,100 --> 00:09:55,240
because a we are in our d research and

00:09:53,830 --> 00:09:58,030
development that means we have crazy

00:09:55,240 --> 00:10:00,760
users or developers or whatever you

00:09:58,030 --> 00:10:03,040
think so normally they say I don't need

00:10:00,760 --> 00:10:06,580
monitoring I just needed service and

00:10:03,040 --> 00:10:07,780
that's done after a while they came to

00:10:06,580 --> 00:10:12,250
insert a my service is not running

00:10:07,780 --> 00:10:14,880
anymore didn't you notice of course you

00:10:12,250 --> 00:10:16,780
don't want to have it ma network after

00:10:14,880 --> 00:10:18,550
additional while they come up in there

00:10:16,780 --> 00:10:22,510
can you give me some statistics how many

00:10:18,550 --> 00:10:26,920
people are using that service sorry you

00:10:22,510 --> 00:10:30,340
don't want it so we have some points

00:10:26,920 --> 00:10:34,810
inside our SLA policy that they can have

00:10:30,340 --> 00:10:37,210
monitoring but it's not a must we have

00:10:34,810 --> 00:10:38,980
multiple dual-stack networks yes we're

00:10:37,210 --> 00:10:41,620
running ib physics int only already

00:10:38,980 --> 00:10:43,030
since a longer time and we run it on

00:10:41,620 --> 00:10:45,000
different networks text so we have

00:10:43,030 --> 00:10:48,570
firewalls in between proxies in between

00:10:45,000 --> 00:10:52,210
a lot of fun for the networking guys and

00:10:48,570 --> 00:10:54,520
we have this production every year where

00:10:52,210 --> 00:10:56,890
we run services to build our packages

00:10:54,520 --> 00:10:59,410
most of you know that as open build

00:10:56,890 --> 00:11:02,320
service for example then we have those

00:10:59,410 --> 00:11:06,100
development areas that change very often

00:11:02,320 --> 00:11:08,380
and we have multiple hardware vendors so

00:11:06,100 --> 00:11:11,140
we even get in da hardware that is not

00:11:08,380 --> 00:11:13,930
lykke li available but we need to keep

00:11:11,140 --> 00:11:18,820
an eye on it if it breaks developers are

00:11:13,930 --> 00:11:21,420
unhappy normally we have luck most of

00:11:18,820 --> 00:11:24,550
the time we use one operating system not

00:11:21,420 --> 00:11:26,860
really on the switches or on the power

00:11:24,550 --> 00:11:30,220
supplies but most of the other stuff is

00:11:26,860 --> 00:11:35,850
Linux so that makes a different to the

00:11:30,220 --> 00:11:41,710
normal companies maybe but that's it so

00:11:35,850 --> 00:11:44,110
the past when i started in that team we

00:11:41,710 --> 00:11:47,680
had around 70 service to monitor in two

00:11:44,110 --> 00:11:50,290
thousand services to watch over in three

00:11:47,680 --> 00:11:53,560
different locations everything worked

00:11:50,290 --> 00:11:57,520
fine but then we started to jump on the

00:11:53,560 --> 00:12:01,150
train and really do monitoring so right

00:11:57,520 --> 00:12:06,250
now we are around 600 nearly 700 servers

00:12:01,150 --> 00:12:08,890
and 7,000 services that does not include

00:12:06,250 --> 00:12:13,600
that services that you can see at the

00:12:08,890 --> 00:12:15,280
outside so everything that is www org or

00:12:13,600 --> 00:12:18,670
so it does not count here it's just the

00:12:15,280 --> 00:12:24,730
development area so if you have a look

00:12:18,670 --> 00:12:27,880
at the graph it's it changed a lot but

00:12:24,730 --> 00:12:31,060
if you see at the Layton sees that means

00:12:27,880 --> 00:12:34,360
how much load does the monitoring server

00:12:31,060 --> 00:12:37,540
have to execute its checks and you

00:12:34,360 --> 00:12:40,300
compare that with the former one you see

00:12:37,540 --> 00:12:43,330
that we had around one second average

00:12:40,300 --> 00:12:46,350
for services in hast checks where is

00:12:43,330 --> 00:12:48,850
average of seven to eight seconds for

00:12:46,350 --> 00:12:52,090
the maximum amount of time that the

00:12:48,850 --> 00:12:55,270
server needs to recheck everything right

00:12:52,090 --> 00:12:59,880
now we are at five and three seconds so

00:12:55,270 --> 00:13:03,960
even if we use ten times more monitoring

00:12:59,880 --> 00:13:07,090
we were able to reduce the latencies and

00:13:03,960 --> 00:13:09,550
the result of that was simply to go with

00:13:07,090 --> 00:13:12,640
a load balanced solution because one

00:13:09,550 --> 00:13:14,680
single server would not be able to do

00:13:12,640 --> 00:13:22,779
that at all and I will show you later

00:13:14,680 --> 00:13:24,739
how we did it so next up on small steps

00:13:22,779 --> 00:13:26,540
why you should always define

00:13:24,739 --> 00:13:28,040
dependencies it's just simple because if

00:13:26,540 --> 00:13:32,170
your manager is behind you and you can

00:13:28,040 --> 00:13:34,819
shown such a graph he's happy point

00:13:32,170 --> 00:13:39,639
another point why you use dependencies

00:13:34,819 --> 00:13:42,499
is if a switch in the middle is dying

00:13:39,639 --> 00:13:44,589
you will not get notifications for all

00:13:42,499 --> 00:13:47,739
the services that are behind that switch

00:13:44,589 --> 00:13:50,629
it don't even want to think about that

00:13:47,739 --> 00:13:54,529
you just want to know that switch is

00:13:50,629 --> 00:13:56,839
down and the rest I don't care so if you

00:13:54,529 --> 00:14:02,299
set up your environment plz always think

00:13:56,839 --> 00:14:04,040
about dependencies what should be

00:14:02,299 --> 00:14:06,619
monitored please keep in mind you have

00:14:04,040 --> 00:14:09,319
on one side the admin the admin who

00:14:06,619 --> 00:14:13,249
wants to know anything he is the N is a

00:14:09,319 --> 00:14:15,679
point on the other side you have all

00:14:13,249 --> 00:14:18,859
your customers and they just want to see

00:14:15,679 --> 00:14:21,470
if the business is there running so

00:14:18,859 --> 00:14:25,249
providing your customers a web front-end

00:14:21,470 --> 00:14:28,509
that shows all services they would not

00:14:25,249 --> 00:14:31,939
care if you provide an administrator a

00:14:28,509 --> 00:14:35,239
summarized view you cannot live with

00:14:31,939 --> 00:14:38,480
that so we need to keep keep an eye on

00:14:35,239 --> 00:14:41,149
those both customers and for that you

00:14:38,480 --> 00:14:43,339
have a business monitoring so on that

00:14:41,149 --> 00:14:45,410
side you see okay our web service

00:14:43,339 --> 00:14:47,480
working our email system is up and

00:14:45,410 --> 00:14:49,100
running monitoring is working and that's

00:14:47,480 --> 00:14:51,259
all your customer want to know can I

00:14:49,100 --> 00:14:56,119
write an email or not and if they see

00:14:51,259 --> 00:14:58,669
here monitoring our email is red done

00:14:56,119 --> 00:15:00,379
they would not ask you for the

00:14:58,669 --> 00:15:02,179
administrator it's important okay if

00:15:00,379 --> 00:15:05,959
email is not working which of those

00:15:02,179 --> 00:15:09,049
services is down is DNS down it's my

00:15:05,959 --> 00:15:11,089
file system for whatever but please keep

00:15:09,049 --> 00:15:13,269
always in mind you have two kinds of

00:15:11,089 --> 00:15:13,269
customers

00:15:17,070 --> 00:15:23,620
so what can be checked everything I saw

00:15:21,460 --> 00:15:28,420
even some web cams monitoring the coffee

00:15:23,620 --> 00:15:30,760
cup and why is it so because the only

00:15:28,420 --> 00:15:33,970
thing you need to know are the exit

00:15:30,760 --> 00:15:38,680
codes of your scripts and the exit codes

00:15:33,970 --> 00:15:43,660
of your scripts can be written in bash

00:15:38,680 --> 00:15:46,990
pearl C++ Ruby whatever you want you can

00:15:43,660 --> 00:15:50,530
write in any language even in maybe

00:15:46,990 --> 00:15:52,090
windows powershell whatever you like the

00:15:50,530 --> 00:15:54,400
only important thing for nagios or a

00:15:52,090 --> 00:15:59,200
kinga or any other competitor in the

00:15:54,400 --> 00:16:02,860
market are those exit codes done if you

00:15:59,200 --> 00:16:06,970
can provide 0 1 2 3 as exit code of your

00:16:02,860 --> 00:16:09,970
scripts you are able to write the narcos

00:16:06,970 --> 00:16:14,500
plugin that's it that's how easy it is

00:16:09,970 --> 00:16:16,330
and to your human users maybe it's

00:16:14,500 --> 00:16:19,360
important to print something on standard

00:16:16,330 --> 00:16:22,690
out yes but for the monitoring system

00:16:19,360 --> 00:16:24,730
again it's not needed so all the stuff

00:16:22,690 --> 00:16:28,480
that you print out on standard out is

00:16:24,730 --> 00:16:32,550
just nice messages to keep the users

00:16:28,480 --> 00:16:35,380
more relaxed if you want to have

00:16:32,550 --> 00:16:39,280
performance data so if you want to see

00:16:35,380 --> 00:16:41,730
how a service x over the time you can

00:16:39,280 --> 00:16:45,550
also provide performance data on

00:16:41,730 --> 00:16:47,470
standard out and below is the link if

00:16:45,550 --> 00:16:50,770
you want to know more about writing

00:16:47,470 --> 00:16:54,100
those plugins it's that easy that simple

00:16:50,770 --> 00:16:55,780
and if you haven't plugged in written in

00:16:54,100 --> 00:16:58,540
that form and you're following that

00:16:55,780 --> 00:17:00,490
guiding principles you can use it more

00:16:58,540 --> 00:17:03,089
or less than any available monitoring

00:17:00,490 --> 00:17:07,060
system that is open source in the market

00:17:03,089 --> 00:17:11,080
so don't hide anymore start writing your

00:17:07,060 --> 00:17:15,910
plugins how easy it is that a simple bad

00:17:11,080 --> 00:17:18,520
example so okay I want to see that a

00:17:15,910 --> 00:17:23,410
file does not exist maybe the plugin is

00:17:18,520 --> 00:17:27,169
named in the wrong way but who cares so

00:17:23,410 --> 00:17:35,359
when I do exit one except to or exit 0

00:17:27,169 --> 00:17:38,210
that's it sometimes you will also want

00:17:35,359 --> 00:17:40,879
to do something if a service is not

00:17:38,210 --> 00:17:43,009
reacting anymore and that's an example

00:17:40,879 --> 00:17:45,379
how easy it is to write a so-called

00:17:43,009 --> 00:17:48,200
event handler so if it service is down

00:17:45,379 --> 00:17:50,600
nah gives can do something that those

00:17:48,200 --> 00:17:53,509
aged a guys with pacemaker and cluster

00:17:50,600 --> 00:17:55,399
and caressing are so proud of our

00:17:53,509 --> 00:17:58,580
monitoring solutions can do the same

00:17:55,399 --> 00:18:01,429
since years and they can do it with a

00:17:58,580 --> 00:18:03,830
simple bash script what happens the

00:18:01,429 --> 00:18:06,590
service goes down the monitoring system

00:18:03,830 --> 00:18:09,139
checks at once and twice because maybe

00:18:06,590 --> 00:18:11,779
it's a network problem and if it finds

00:18:09,139 --> 00:18:13,279
the third one and it says okay it's not

00:18:11,779 --> 00:18:17,539
the third time that the service is down

00:18:13,279 --> 00:18:19,659
I will try to restart it how easy is

00:18:17,539 --> 00:18:19,659
that

00:18:23,650 --> 00:18:31,690
some more deep in example so if you will

00:18:26,770 --> 00:18:33,730
monitor your sign boxes you can simply

00:18:31,690 --> 00:18:37,450
copy and paste that options for at least

00:18:33,730 --> 00:18:40,750
cisco and qlogic then you can produce

00:18:37,450 --> 00:18:43,360
some graphs those examples are

00:18:40,750 --> 00:18:47,920
especially for mr TG you can integrate

00:18:43,360 --> 00:18:49,930
that also in argos or kinga but for us

00:18:47,920 --> 00:18:52,930
for historical reasons we will stay with

00:18:49,930 --> 00:18:54,550
a Mataji inside souza rd because it's

00:18:52,930 --> 00:18:56,590
there for a long time and it's much

00:18:54,550 --> 00:19:02,530
nicer if you can go back five or ten

00:18:56,590 --> 00:19:04,530
years even in your graphs interesting

00:19:02,530 --> 00:19:06,940
point monitoring I owe on your machines

00:19:04,530 --> 00:19:10,600
most of the time when a machine gets

00:19:06,940 --> 00:19:13,210
busy the only point is meanwhile that it

00:19:10,600 --> 00:19:16,150
has too much i owe load the cpus don't

00:19:13,210 --> 00:19:19,150
matter anymore but your hard drives do

00:19:16,150 --> 00:19:20,440
all your network does so this is

00:19:19,150 --> 00:19:23,350
something that you really should do

00:19:20,440 --> 00:19:26,020
there is a monitoring plugins are curve

00:19:23,350 --> 00:19:30,250
it installs also the package name this

00:19:26,020 --> 00:19:33,340
stat you can enable this stud also we're

00:19:30,250 --> 00:19:36,460
system de oro beer just five in it and

00:19:33,340 --> 00:19:39,430
have local information at hand if you

00:19:36,460 --> 00:19:41,380
need it but this plugin will also put

00:19:39,430 --> 00:19:44,230
all this information and feeds it into

00:19:41,380 --> 00:19:47,710
nagios so you have it in one central

00:19:44,230 --> 00:19:50,380
place something i can really recommend

00:19:47,710 --> 00:19:56,470
because then you can see what happens on

00:19:50,380 --> 00:20:00,010
your systems if you want to see what

00:19:56,470 --> 00:20:03,040
your cloud is doing so you have a server

00:20:00,010 --> 00:20:04,990
running 15 machines on it and you want

00:20:03,040 --> 00:20:06,760
to see how much network traffic does a

00:20:04,990 --> 00:20:08,730
single machine have because normally you

00:20:06,760 --> 00:20:11,020
just see the output of the server side

00:20:08,730 --> 00:20:13,870
but you want to know which virtual

00:20:11,020 --> 00:20:15,670
machine is doing how much traffic you

00:20:13,870 --> 00:20:18,520
can monitor it directly on the server

00:20:15,670 --> 00:20:20,140
that is running the virtual machines the

00:20:18,520 --> 00:20:21,490
only thing that you should do for that

00:20:20,140 --> 00:20:27,780
and that is something that I recommend

00:20:21,490 --> 00:20:30,640
in any case is here I hope I can mark it

00:20:27,780 --> 00:20:34,030
edit the xml definition on your virtual

00:20:30,640 --> 00:20:37,120
machine and give the virtual network

00:20:34,030 --> 00:20:38,820
interface name most of the time the name

00:20:37,120 --> 00:20:42,850
of the virtual machine that is running

00:20:38,820 --> 00:20:46,330
because then if you call i p.m. in my is

00:20:42,850 --> 00:20:48,670
or bridge control shell devices you will

00:20:46,330 --> 00:20:51,570
see okay this is the device of that

00:20:48,670 --> 00:20:55,120
virtual machine and not device number

00:20:51,570 --> 00:20:57,670
eth0 dot dot dot seven eight or

00:20:55,120 --> 00:21:00,010
something like that makes it really easy

00:20:57,670 --> 00:21:02,080
for you to understand which machine is

00:21:00,010 --> 00:21:04,840
currently hanging on that virtual

00:21:02,080 --> 00:21:09,250
network device and if you start the

00:21:04,840 --> 00:21:10,800
snmp-server on your virtual server you

00:21:09,250 --> 00:21:16,360
can simply integrate that information

00:21:10,800 --> 00:21:17,830
into a marquee you're done so the SNP

00:21:16,360 --> 00:21:19,960
package already provides all the

00:21:17,830 --> 00:21:26,590
information that you need to monitor

00:21:19,960 --> 00:21:28,929
your devices for monitoring of my secret

00:21:26,590 --> 00:21:32,290
service often enough when I go around

00:21:28,929 --> 00:21:36,130
and watch the documentation they always

00:21:32,290 --> 00:21:41,200
say okay grant all to nagios to monitor

00:21:36,130 --> 00:21:48,179
your my sequel server no it just needs

00:21:41,200 --> 00:21:51,880
select if at all so if you open up your

00:21:48,179 --> 00:21:55,390
my sequel installation in the end just

00:21:51,880 --> 00:21:59,740
allow select for the nagas user not rent

00:21:55,390 --> 00:22:02,200
or please don't do that and then we have

00:21:59,740 --> 00:22:04,330
two interesting nagas plugins that you

00:22:02,200 --> 00:22:07,360
can use check my sequel is more or less

00:22:04,330 --> 00:22:10,720
the base that you can use is the service

00:22:07,360 --> 00:22:12,870
to live is he doing something and the

00:22:10,720 --> 00:22:16,990
other one the check my sequel he'll

00:22:12,870 --> 00:22:18,400
allows you to monitor way more even

00:22:16,990 --> 00:22:22,179
stuff that you do not even want to think

00:22:18,400 --> 00:22:24,670
about but in the end with the second one

00:22:22,179 --> 00:22:26,710
and you normally run in our

00:22:24,670 --> 00:22:29,860
installations we run eight checks with

00:22:26,710 --> 00:22:31,690
this check my sequel healed you get an

00:22:29,860 --> 00:22:34,840
idea what's going on with you my sequel

00:22:31,690 --> 00:22:37,260
server very soon and even before the

00:22:34,840 --> 00:22:37,260
clusters

00:22:38,340 --> 00:22:44,920
if you want to monitor a postgres it's

00:22:41,710 --> 00:22:47,260
simple as that beside the fact that you

00:22:44,920 --> 00:22:50,580
need to open or allow the IP address of

00:22:47,260 --> 00:22:53,440
the monitoring servers in PGH be a conf

00:22:50,580 --> 00:22:56,950
to connect to the post-crescent sense at

00:22:53,440 --> 00:22:59,140
all and here it's kind of different

00:22:56,950 --> 00:23:02,610
because you need to have the super user

00:22:59,140 --> 00:23:07,420
role but that super user role can be

00:23:02,610 --> 00:23:10,930
shrink down to do some special checks

00:23:07,420 --> 00:23:15,910
and not to create new users or take over

00:23:10,930 --> 00:23:18,970
the whole system then you can also do

00:23:15,910 --> 00:23:21,400
some crazy things with the check post

00:23:18,970 --> 00:23:27,250
question for example also in server

00:23:21,400 --> 00:23:29,470
monitoring yes there's more I just put

00:23:27,250 --> 00:23:31,690
out some script that we have running on

00:23:29,470 --> 00:23:34,780
our more returning instance so the first

00:23:31,690 --> 00:23:37,660
one important for you if you use a

00:23:34,780 --> 00:23:39,880
package from the server monitoring I put

00:23:37,660 --> 00:23:41,680
in more and more up-armored profiles for

00:23:39,880 --> 00:23:44,140
the single checks especially for those

00:23:41,680 --> 00:23:46,870
that run under other user privilege

00:23:44,140 --> 00:23:49,570
levels so if there is something going on

00:23:46,870 --> 00:23:52,360
crazy because you placed for example the

00:23:49,570 --> 00:23:54,970
configuration file of a check in a

00:23:52,360 --> 00:23:57,850
directory which is not in my brain when

00:23:54,970 --> 00:24:00,400
I right there are more check please have

00:23:57,850 --> 00:24:02,260
a look at the audit log normally you

00:24:00,400 --> 00:24:04,180
will see really soon that there is some

00:24:02,260 --> 00:24:09,490
problem with up-armor and that's not the

00:24:04,180 --> 00:24:14,740
check itself that's broken okay another

00:24:09,490 --> 00:24:16,810
one that happens inside my team when you

00:24:14,740 --> 00:24:19,420
do upgrades and update of systems

00:24:16,810 --> 00:24:21,070
normally my team members just disable

00:24:19,420 --> 00:24:23,380
notifications of the monitoring system

00:24:21,070 --> 00:24:25,480
and then they forget it two days later

00:24:23,380 --> 00:24:28,720
the whole system is down and nobody

00:24:25,480 --> 00:24:32,500
noticed it so what we have is a senior

00:24:28,720 --> 00:24:37,870
cron job over there that re enables

00:24:32,500 --> 00:24:40,300
notifications each night done what you

00:24:37,870 --> 00:24:43,000
should also do if you use nsca is

00:24:40,300 --> 00:24:46,600
monitor your nsca Damon if it's still

00:24:43,000 --> 00:24:48,670
able to submit anything that it gets

00:24:46,600 --> 00:24:50,960
from the outside systems into your

00:24:48,670 --> 00:24:54,559
nagios system and the Nagas system is

00:24:50,960 --> 00:24:58,490
able to do something with it for that

00:24:54,559 --> 00:25:01,970
I've written a small nsca check that

00:24:58,490 --> 00:25:05,600
does exactly that it injects epsoide or

00:25:01,970 --> 00:25:09,110
check and after I guess five seconds or

00:25:05,600 --> 00:25:12,679
so it checks if this check is still okay

00:25:09,110 --> 00:25:16,279
with a current time because of that

00:25:12,679 --> 00:25:21,080
succeeds you can now get a good idea

00:25:16,279 --> 00:25:23,270
that it's still working and if you want

00:25:21,080 --> 00:25:25,039
to create performance data you should

00:25:23,270 --> 00:25:27,409
also think about create performance data

00:25:25,039 --> 00:25:29,270
for your monitoring because sooner or

00:25:27,409 --> 00:25:32,210
later you will reach some limits inside

00:25:29,270 --> 00:25:34,970
the monitoring and then you will want to

00:25:32,210 --> 00:25:38,539
see how to proceed from that point of

00:25:34,970 --> 00:25:40,370
time and how you can improve and if you

00:25:38,539 --> 00:25:43,100
don't have any performance data of your

00:25:40,370 --> 00:25:47,240
current installation how will you go

00:25:43,100 --> 00:25:49,730
away and then proceed there so overall

00:25:47,240 --> 00:25:58,760
it's more or less like monitoring

00:25:49,730 --> 00:26:00,260
monitoring setup very important so in

00:25:58,760 --> 00:26:04,190
the beginning I talked about high

00:26:00,260 --> 00:26:06,640
available and load balance monitoring so

00:26:04,190 --> 00:26:09,190
this is the basic overview how we did it

00:26:06,640 --> 00:26:11,779
we are using cursing and pacemaker

00:26:09,190 --> 00:26:14,390
running on two machines those are the

00:26:11,779 --> 00:26:16,970
two main machines when I put a virtual

00:26:14,390 --> 00:26:20,360
machine machine beside just to have a

00:26:16,970 --> 00:26:22,070
quorum so once I have a problem with one

00:26:20,360 --> 00:26:27,409
monitoring server there's still another

00:26:22,070 --> 00:26:31,130
machine so two against one and that's it

00:26:27,409 --> 00:26:33,710
and now using it me for stone if so if

00:26:31,130 --> 00:26:38,809
the to decide the other one is more or

00:26:33,710 --> 00:26:42,380
less brain dead shoot them up done we're

00:26:38,809 --> 00:26:45,740
using drbd managed by pacemaker to store

00:26:42,380 --> 00:26:48,710
for example the P&P graphs some are rd

00:26:45,740 --> 00:26:51,320
information and also some log files so

00:26:48,710 --> 00:26:54,940
we have this information always up to

00:26:51,320 --> 00:26:58,190
date on the currently active node

00:26:54,940 --> 00:27:02,080
services slide my sequel or single

00:26:58,190 --> 00:27:04,400
services SNMP trap NCS a that can either

00:27:02,080 --> 00:27:05,750
manage themselves that

00:27:04,400 --> 00:27:08,120
means they have an integrated high

00:27:05,750 --> 00:27:10,450
availability solution like my secret

00:27:08,120 --> 00:27:13,160
where you can run active active or

00:27:10,450 --> 00:27:16,210
services that can be started on both

00:27:13,160 --> 00:27:19,190
notes in parallel start that in parallel

00:27:16,210 --> 00:27:21,740
don't use pacemaker to manage services

00:27:19,190 --> 00:27:24,040
that can do that on your own or don't

00:27:21,740 --> 00:27:27,260
need to be managed by pacemaker at all

00:27:24,040 --> 00:27:32,990
it uses you're overloading pacemaker

00:27:27,260 --> 00:27:37,880
configuration trust me then we have two

00:27:32,990 --> 00:27:41,720
interesting let's say packages one is

00:27:37,880 --> 00:27:47,210
mod gman what gilman is somewhat like a

00:27:41,720 --> 00:27:51,980
proxy so there is a plug-in that jumps

00:27:47,210 --> 00:27:54,380
directly into a kinga or nagios grabs

00:27:51,980 --> 00:27:56,450
all the information out of it especially

00:27:54,380 --> 00:27:58,850
those informations about I should do

00:27:56,450 --> 00:28:01,820
Haas checks I should do plugin checks

00:27:58,850 --> 00:28:04,670
and then distribute that informations on

00:28:01,820 --> 00:28:06,740
workers and you can have as many workers

00:28:04,670 --> 00:28:09,980
as you like you can even use your normal

00:28:06,740 --> 00:28:12,440
work station to become a worker those

00:28:09,980 --> 00:28:14,960
workers connect to the gman demon get

00:28:12,440 --> 00:28:17,540
the working information execute their

00:28:14,960 --> 00:28:20,900
checks and come it back again with the

00:28:17,540 --> 00:28:22,910
results so for a Kinger itself which is

00:28:20,900 --> 00:28:25,580
still a single threaded application in

00:28:22,910 --> 00:28:28,910
the same applies also for nagios it's

00:28:25,580 --> 00:28:31,310
like there is sudden execution all the

00:28:28,910 --> 00:28:33,560
time every time when the core of the

00:28:31,310 --> 00:28:36,890
king of the core of Nargis decides to

00:28:33,560 --> 00:28:40,040
execute a new check mod gman will take

00:28:36,890 --> 00:28:44,780
over and the load on the king of server

00:28:40,040 --> 00:28:48,620
just decrease done and you can scale it

00:28:44,780 --> 00:28:52,040
out you can scale even with a much proxy

00:28:48,620 --> 00:28:56,390
no mod gman proxy package over different

00:28:52,040 --> 00:28:58,610
levels over different firewalls the next

00:28:56,390 --> 00:29:01,090
thing I want to inform you about is

00:28:58,610 --> 00:29:04,400
checking k checking k is currently the

00:29:01,090 --> 00:29:07,010
rising star getting more and more

00:29:04,400 --> 00:29:09,260
attention checking k does something

00:29:07,010 --> 00:29:12,710
similar it also connects directly into

00:29:09,260 --> 00:29:14,930
the king or nagios core and submits or

00:29:12,710 --> 00:29:16,640
fetches information from that core but

00:29:14,930 --> 00:29:17,690
check MK has another interesting

00:29:16,640 --> 00:29:21,559
approach

00:29:17,690 --> 00:29:24,470
it just has one plug-in check that is

00:29:21,559 --> 00:29:26,570
executed on the clients normally if you

00:29:24,470 --> 00:29:28,700
have those nagios and monitoring

00:29:26,570 --> 00:29:32,080
plug-ins for everything that you want to

00:29:28,700 --> 00:29:34,940
monitor like your disk cpu usage

00:29:32,080 --> 00:29:38,269
interface bandwidth usage you will have

00:29:34,940 --> 00:29:42,710
different plugins checking k fetches

00:29:38,269 --> 00:29:45,110
them all in one single request so for

00:29:42,710 --> 00:29:46,399
your clients that makes it easier for

00:29:45,110 --> 00:29:49,429
them to handle that stuff there's

00:29:46,399 --> 00:29:52,730
limited network connection and on the

00:29:49,429 --> 00:29:54,889
other side the e kinga processed just to

00:29:52,730 --> 00:29:58,940
need needs to execute one active check

00:29:54,889 --> 00:30:01,580
and we'll get back a lot of passive

00:29:58,940 --> 00:30:03,950
checks because check-in cable handle all

00:30:01,580 --> 00:30:07,970
the return values and pushes them in

00:30:03,950 --> 00:30:11,539
different passive checks and the nice

00:30:07,970 --> 00:30:13,700
thing is it will configure itself you

00:30:11,539 --> 00:30:19,100
just need to tell check MK please

00:30:13,700 --> 00:30:21,139
monitor that host do an inventory it

00:30:19,100 --> 00:30:23,620
doesn't inventory comes back oh I found

00:30:21,139 --> 00:30:27,649
the following ten or twenty services

00:30:23,620 --> 00:30:30,230
automatically no need for you to do that

00:30:27,649 --> 00:30:31,549
on your own so for automatic

00:30:30,230 --> 00:30:34,309
installations especially if you run

00:30:31,549 --> 00:30:36,710
clouds please have a look at that

00:30:34,309 --> 00:30:39,860
package might be very interesting for

00:30:36,710 --> 00:30:43,519
you what I do for those horse which are

00:30:39,860 --> 00:30:46,309
managed by check mkay i have just let's

00:30:43,519 --> 00:30:48,350
say a handful of active checks because

00:30:46,309 --> 00:30:51,289
what I still want to manage or still

00:30:48,350 --> 00:30:54,889
want to monitor from my own is the

00:30:51,289 --> 00:30:57,500
external connections is ssh port

00:30:54,889 --> 00:30:59,750
reachable is there still a web server

00:30:57,500 --> 00:31:01,730
with the web page available because that

00:30:59,750 --> 00:31:04,190
is something checking k cannot help me

00:31:01,730 --> 00:31:06,379
with it will say me yes the ssh daemon

00:31:04,190 --> 00:31:08,450
is there or the apache demon is running

00:31:06,379 --> 00:31:10,549
but it cannot tell me if my application

00:31:08,450 --> 00:31:13,509
is still working as i expected but for

00:31:10,549 --> 00:31:15,860
everything that is on the client i

00:31:13,509 --> 00:31:21,230
currently recommend checking k because

00:31:15,860 --> 00:31:24,470
it's so easy and what we are still using

00:31:21,230 --> 00:31:28,070
is a marquis together collect statistics

00:31:24,470 --> 00:31:30,930
from our network and our storage because

00:31:28,070 --> 00:31:33,780
we have it historically you can do that

00:31:30,930 --> 00:31:35,670
meanwhile already on nagios itself if

00:31:33,780 --> 00:31:38,700
you have nog yo soy kinga together with

00:31:35,670 --> 00:31:44,130
P and P or if you use check and k i'll

00:31:38,700 --> 00:31:50,750
provide nice graphics for you so this is

00:31:44,130 --> 00:31:53,580
how it looks like and as open source is

00:31:50,750 --> 00:31:57,840
sometimes it seems easy sometimes it

00:31:53,580 --> 00:32:01,710
seems very very complex and yes it took

00:31:57,840 --> 00:32:06,470
a bit of time until we had that set up

00:32:01,710 --> 00:32:09,720
up and running so starting from the top

00:32:06,470 --> 00:32:12,510
we have our business process add-ons we

00:32:09,720 --> 00:32:15,840
have like this to have nice graphics

00:32:12,510 --> 00:32:18,210
over the world we use P and P to have

00:32:15,840 --> 00:32:22,430
those nice statistics all the time and

00:32:18,210 --> 00:32:25,050
we use nag trap all now what that means

00:32:22,430 --> 00:32:28,170
if not come to me later i will show it

00:32:25,050 --> 00:32:30,180
to you we have two Apaches up and

00:32:28,170 --> 00:32:32,790
running on the two systems managed by

00:32:30,180 --> 00:32:35,310
corazon more or less because they're

00:32:32,790 --> 00:32:39,270
running independent so we're running in

00:32:35,310 --> 00:32:43,380
a what's called group mode and in the

00:32:39,270 --> 00:32:45,450
middle we have the king of process the

00:32:43,380 --> 00:32:48,330
Ginga process is managed by a pacemaker

00:32:45,450 --> 00:32:53,280
so we always have just one running on

00:32:48,330 --> 00:32:59,490
the two nodes and we use live status

00:32:53,280 --> 00:33:01,620
which is part of checking k connects

00:32:59,490 --> 00:33:05,010
directly to the information which is

00:33:01,620 --> 00:33:06,990
stored in the ram of your machine so

00:33:05,010 --> 00:33:08,910
live status should also always be

00:33:06,990 --> 00:33:11,850
compiled with right header files from

00:33:08,910 --> 00:33:15,020
nagios or kinga because it directly

00:33:11,850 --> 00:33:18,480
grabs them from the structure of your

00:33:15,020 --> 00:33:19,950
internal ram but luckily with build

00:33:18,480 --> 00:33:22,320
service each time when we upload a new

00:33:19,950 --> 00:33:26,910
nagas or a king a package that one gets

00:33:22,320 --> 00:33:30,300
rebuilt automatically perfect the King

00:33:26,910 --> 00:33:32,510
are also allows us to push information

00:33:30,300 --> 00:33:36,060
more or less just for historical reasons

00:33:32,510 --> 00:33:39,660
into a database for historical reasons

00:33:36,060 --> 00:33:42,330
we choose my sequel we have my secret

00:33:39,660 --> 00:33:46,389
cluster running on both nodes

00:33:42,330 --> 00:33:49,539
and normally that would it be all ready

00:33:46,389 --> 00:33:52,570
for a single simple setup but we're

00:33:49,539 --> 00:33:54,700
going closer Emma tricky is in the

00:33:52,570 --> 00:33:56,249
middle because in the middle you see

00:33:54,700 --> 00:33:59,169
everything that is managed by pacemaker

00:33:56,249 --> 00:34:04,210
because for MHD we store the information

00:33:59,169 --> 00:34:06,849
on a drbd device so every time when I

00:34:04,210 --> 00:34:08,260
need my ml tigue information or MIT runs

00:34:06,849 --> 00:34:11,109
and gather the information from the

00:34:08,260 --> 00:34:13,619
network it stores that on our drbd

00:34:11,109 --> 00:34:16,929
device that is always on the active node

00:34:13,619 --> 00:34:20,109
done I can always see the great graphs

00:34:16,929 --> 00:34:23,289
out of an alert Iggy so for that i also

00:34:20,109 --> 00:34:25,149
need the rbd and the our body is also

00:34:23,289 --> 00:34:31,799
used to store the nice graphics from p

00:34:25,149 --> 00:34:34,510
and p that's it now I have nagios nsca

00:34:31,799 --> 00:34:38,470
running on those systems completely

00:34:34,510 --> 00:34:41,970
independent what will happen if a client

00:34:38,470 --> 00:34:44,470
submits data to the wrong client

00:34:41,970 --> 00:34:48,549
information will get lost the service

00:34:44,470 --> 00:34:52,629
will they get read okay but I always

00:34:48,549 --> 00:34:54,099
switch the IP addresses so the active IP

00:34:52,629 --> 00:34:55,809
address is always with an active

00:34:54,099 --> 00:34:59,500
eichinger and with the active NSC a

00:34:55,809 --> 00:35:02,740
client so I didn't see I didn't see any

00:34:59,500 --> 00:35:05,410
loss at all after more than two years

00:35:02,740 --> 00:35:07,869
that this setup is running so having

00:35:05,410 --> 00:35:12,190
nsca running independent perfect fine

00:35:07,869 --> 00:35:15,730
and I have the gierman demon which is

00:35:12,190 --> 00:35:19,150
the job scheduler and the mod Yemen

00:35:15,730 --> 00:35:22,480
workers I just put two of them here you

00:35:19,150 --> 00:35:26,819
can have as many as you want and I have

00:35:22,480 --> 00:35:30,339
as an MP TT with which is a trap demon

00:35:26,819 --> 00:35:32,049
so I have a trap demon collecting all

00:35:30,339 --> 00:35:35,619
the SNMP traps especially from our

00:35:32,049 --> 00:35:38,529
network or storage devices and SNMP TT

00:35:35,619 --> 00:35:42,760
is feeding them into the my sequel

00:35:38,529 --> 00:35:45,760
database then I can go have a tool

00:35:42,760 --> 00:35:47,549
called nacked trap which grabs all the

00:35:45,760 --> 00:35:51,789
information out of the database and

00:35:47,549 --> 00:35:53,799
either comes up with a service warning

00:35:51,789 --> 00:35:55,869
for me if there is a trap from a device

00:35:53,799 --> 00:36:01,539
or shows it to me

00:35:55,869 --> 00:36:03,910
nice web interface then we have checked

00:36:01,539 --> 00:36:08,829
MK and on the clients we have of course

00:36:03,910 --> 00:36:12,809
the plugins and nrpe and shake MK in

00:36:08,829 --> 00:36:18,249
whatever you like questions about that

00:36:12,809 --> 00:36:20,440
yes we have questions and no microphone

00:36:18,249 --> 00:36:23,680
just pocket otherwise I would repeat

00:36:20,440 --> 00:36:29,499
again my question is how complicated was

00:36:23,680 --> 00:36:32,619
the immigration 29 goes to a kanga the

00:36:29,499 --> 00:36:34,329
most complicated part was that I during

00:36:32,619 --> 00:36:37,779
the migration I noticed that we have

00:36:34,329 --> 00:36:40,299
empty host groups because our

00:36:37,779 --> 00:36:43,539
configuration is grown over the time and

00:36:40,299 --> 00:36:46,299
they define some house groups to put

00:36:43,539 --> 00:36:49,089
them into the signal hosts and some of

00:36:46,299 --> 00:36:51,339
them they're empty and suddenly kinga

00:36:49,089 --> 00:36:55,539
refuses to start and print it out in log

00:36:51,339 --> 00:36:59,349
file empty host groups you probably set

00:36:55,539 --> 00:37:01,420
one to set empty horse groups to one in

00:36:59,349 --> 00:37:02,980
your configuration I read that

00:37:01,420 --> 00:37:06,509
information in the log file i changed

00:37:02,980 --> 00:37:08,619
the configuration file restarted done

00:37:06,509 --> 00:37:09,999
during the migration that was also

00:37:08,619 --> 00:37:12,309
interesting because all my team members

00:37:09,999 --> 00:37:15,880
said to me ah kinga has this nice

00:37:12,309 --> 00:37:19,599
graphical interface which is millions

00:37:15,880 --> 00:37:22,779
away million years away from nagios and

00:37:19,599 --> 00:37:26,559
in the beginning I said Moo migrating

00:37:22,779 --> 00:37:32,289
blue I have no time I have no one no but

00:37:26,559 --> 00:37:34,059
I just exchanged the web interface so in

00:37:32,289 --> 00:37:37,509
the core i still had an arceus running

00:37:34,059 --> 00:37:40,509
in the beginning and the kinga that

00:37:37,509 --> 00:37:43,539
interface was able after changing the

00:37:40,509 --> 00:37:47,680
line of the status that and the command

00:37:43,539 --> 00:37:49,299
pipe that was the only true the king i

00:37:47,680 --> 00:37:54,430
was able to connect to the nagios core

00:37:49,299 --> 00:37:57,430
and show me the same information so I

00:37:54,430 --> 00:38:00,239
had my team members happy on the other

00:37:57,430 --> 00:38:03,460
side I could walk on the core stuff and

00:38:00,239 --> 00:38:07,359
then overnight I just switched over

00:38:03,460 --> 00:38:08,710
after some testing and both narco sandy

00:38:07,359 --> 00:38:12,580
kinga allow you to run a

00:38:08,710 --> 00:38:15,160
check so we have our Sea King check

00:38:12,580 --> 00:38:17,550
verbose for example and you can even run

00:38:15,160 --> 00:38:20,230
it directly as panicking immunity boost

00:38:17,550 --> 00:38:23,530
so it will just check the configuration

00:38:20,230 --> 00:38:27,730
and not restart any service so you just

00:38:23,530 --> 00:38:33,280
move over the files the directories from

00:38:27,730 --> 00:38:37,869
et Cie negatives to eat ECE kinga on

00:38:33,280 --> 00:38:42,940
that side you say okay move negus conf

00:38:37,869 --> 00:38:50,490
to e kinga calm and then you start your

00:38:42,940 --> 00:38:55,300
tests and another question is checking T

00:38:50,490 --> 00:38:57,940
so I want to ask about the reports if I

00:38:55,300 --> 00:39:02,130
need to report from a customer's I have

00:38:57,940 --> 00:39:07,020
one check and check in k and this check

00:39:02,130 --> 00:39:17,260
ask cpu ram and so on and to build a

00:39:07,020 --> 00:39:19,390
graph or something yeah and so this

00:39:17,260 --> 00:39:24,130
means that i have one graph or wall

00:39:19,390 --> 00:39:28,240
checks or how how's work what looks like

00:39:24,130 --> 00:39:31,599
yep i can show it to you so we choose

00:39:28,240 --> 00:39:34,300
something that is ok so this is how

00:39:31,599 --> 00:39:37,750
hosts I don't know which pasta is but I

00:39:34,300 --> 00:39:40,800
don't care at the moment so you can see

00:39:37,750 --> 00:39:43,290
this is the the old ich Inga interface

00:39:40,800 --> 00:39:46,690
the interesting part for my team members

00:39:43,290 --> 00:39:49,839
was not that it's not dark anymore and

00:39:46,690 --> 00:39:52,660
now it's it's light it was even bad

00:39:49,839 --> 00:39:54,550
during that time but the most important

00:39:52,660 --> 00:40:00,180
point all my team members always ask

00:39:54,550 --> 00:40:04,119
before is this check box over there

00:40:00,180 --> 00:40:07,780
because with this check box and letter

00:40:04,119 --> 00:40:10,780
drop down box you can say okay for

00:40:07,780 --> 00:40:14,890
example reschedule all those service

00:40:10,780 --> 00:40:18,099
checks I had market if you compare that

00:40:14,890 --> 00:40:21,250
with a nagios installation you do that

00:40:18,099 --> 00:40:22,210
for each single check again again and

00:40:21,250 --> 00:40:25,510
again

00:40:22,210 --> 00:40:28,930
and that looks like that's example you

00:40:25,510 --> 00:40:31,300
click here wait you click here reduce

00:40:28,930 --> 00:40:36,250
too scared and you click on the next and

00:40:31,300 --> 00:40:40,000
the next and so that was the main

00:40:36,250 --> 00:40:44,710
feature that my team members missed but

00:40:40,000 --> 00:40:49,180
beside that for your information this is

00:40:44,710 --> 00:40:51,490
a passive check so normally a king I

00:40:49,180 --> 00:40:53,770
would not actively pull the check it

00:40:51,490 --> 00:40:58,839
expects external data to come in for

00:40:53,770 --> 00:41:01,420
that and that one here check MK that's

00:40:58,839 --> 00:41:05,490
the only active check here in that line

00:41:01,420 --> 00:41:11,109
beside all those that is executed

00:41:05,490 --> 00:41:13,869
actively so those other informations is

00:41:11,109 --> 00:41:17,290
just yeah showing nice graphs and so on

00:41:13,869 --> 00:41:19,180
and here you can see check MK will

00:41:17,290 --> 00:41:31,200
execute something and turn something

00:41:19,180 --> 00:41:34,500
back now i can jump to the s so I know

00:41:31,200 --> 00:41:34,500
internet is down

00:41:37,260 --> 00:41:44,550
check MK has an abbreviation CM key I

00:41:41,150 --> 00:41:49,610
want to inventory eyes this host again

00:41:44,550 --> 00:41:49,610
because i can add salt 1

00:41:52,510 --> 00:42:01,960
so check MK can you read that okay so

00:42:00,220 --> 00:42:03,880
check MK discovered all the services

00:42:01,960 --> 00:42:07,480
that are available on the external

00:42:03,880 --> 00:42:11,010
machine then it detects some checks that

00:42:07,480 --> 00:42:11,010
it now has in this inventory

00:42:20,200 --> 00:42:26,020
that's how it looked like here on the

00:42:22,150 --> 00:42:27,579
monitoring server so checking k had that

00:42:26,020 --> 00:42:32,400
information about that horse that it

00:42:27,579 --> 00:42:35,920
directly has just by inventor izing it

00:42:32,400 --> 00:42:37,900
so it checks also mount points Colonel

00:42:35,920 --> 00:42:40,329
context switches and so on and so on and

00:42:37,900 --> 00:42:42,940
so on another nice point is with

00:42:40,329 --> 00:42:47,680
checking care you have of course those

00:42:42,940 --> 00:42:51,000
nice graphs here so you have something

00:42:47,680 --> 00:42:51,000
that you can show your managers

00:42:51,420 --> 00:43:00,339
automatically done by checking k and now

00:42:57,130 --> 00:43:03,550
what I do is I tell check and K please

00:43:00,339 --> 00:43:06,130
reconfigure my nagas installation that's

00:43:03,550 --> 00:43:08,520
another option so what it does it

00:43:06,130 --> 00:43:12,760
generate the configuration out of the

00:43:08,520 --> 00:43:14,109
gathered information it validates if it

00:43:12,760 --> 00:43:15,940
will still fit otherwise it will just

00:43:14,109 --> 00:43:18,250
break and say okay there's something

00:43:15,940 --> 00:43:21,550
broken I will do nothing and then a

00:43:18,250 --> 00:43:24,760
pre-compiled sauce check and reloads my

00:43:21,550 --> 00:43:28,540
nargis or aching instance done so

00:43:24,760 --> 00:43:32,160
integrating a new host with that is

00:43:28,540 --> 00:43:32,160
something you can easily automate

00:43:36,250 --> 00:43:43,240
I hope I have the right port this is the

00:43:39,610 --> 00:43:45,730
output from the check mkay client I'm

00:43:43,240 --> 00:43:47,650
running those check and K clients here

00:43:45,730 --> 00:43:51,100
in our internal network so I don't care

00:43:47,650 --> 00:43:54,820
about security you don't want to run it

00:43:51,100 --> 00:43:57,330
in the internet but you can implement

00:43:54,820 --> 00:44:03,040
talents around it the only thing that is

00:43:57,330 --> 00:44:05,680
check a TC x I need d check MK there you

00:44:03,040 --> 00:44:07,180
define okay this is the port but you can

00:44:05,680 --> 00:44:09,880
do whatever you do normally with a

00:44:07,180 --> 00:44:12,630
service that is running over at exile ID

00:44:09,880 --> 00:44:17,140
on the client side you can even execute

00:44:12,630 --> 00:44:21,610
this command here via SSH on your local

00:44:17,140 --> 00:44:25,210
client this is the output the check-in k

00:44:21,610 --> 00:44:27,520
produces so you can see it does a lot of

00:44:25,210 --> 00:44:29,950
stuff because here that's the monitoring

00:44:27,520 --> 00:44:32,500
server i execute a collector command and

00:44:29,950 --> 00:44:34,300
the monitoring server has my sequel

00:44:32,500 --> 00:44:38,260
database running and so on so checking k

00:44:34,300 --> 00:44:40,120
detect that directly for you and then it

00:44:38,260 --> 00:44:44,500
creates the configuration file for a

00:44:40,120 --> 00:44:46,530
kinga nagios and that's it okay thank

00:44:44,500 --> 00:44:46,530
you

00:44:47,369 --> 00:44:54,539
other questions your slot is already

00:44:51,240 --> 00:44:57,049
over and it's now that's expected time

00:44:54,539 --> 00:45:02,779
for Thomas oh I think we have to wrap up

00:44:57,049 --> 00:45:02,779

YouTube URL: https://www.youtube.com/watch?v=Xhwijc-IsJA


