Title: OSC15 - Robert Schweikert - Docker - Not a silver bullet
Publication date: 2015-05-04
Playlist: openSUSE Conference 2015
Description: 
	Docker is all the hype these days. In this short talk I will take a look at some of the not so pleasant issues that come along with containers that not many appear to want to acknowledge or talk about. This is not a Docker tutorial nor will we discuss any technical details about the tools or how Docker functions. Rather in this talk we will explore side effects of container building and what these side effects imply for the management of the OS or IT infrastructure in general.

There are other questions that Docker, or containers in general bring along. We will spend time of pondering one of the more fundamental questions, in a world of containers, what does it mean to be a distribution?
Captions: 
	00:00:00,350 --> 00:00:09,210
all right all of us here I think we can

00:00:02,909 --> 00:00:10,980
get started all right what good would

00:00:09,210 --> 00:00:15,030
the conference be without a talk about

00:00:10,980 --> 00:00:18,000
docker come on people oh I could say

00:00:15,030 --> 00:00:22,020
darker drives me to drink but I think

00:00:18,000 --> 00:00:24,570
that would be an exaggeration anyway my

00:00:22,020 --> 00:00:28,560
name is Robert Schweikart and yes you

00:00:24,570 --> 00:00:30,539
have to listen to me again docker it is

00:00:28,560 --> 00:00:32,189
not a silver bullet although if you

00:00:30,539 --> 00:00:34,200
believe the media hype you would

00:00:32,189 --> 00:00:37,890
certainly think it is but it really

00:00:34,200 --> 00:00:42,360
isn't and I will tell you why I think

00:00:37,890 --> 00:00:44,910
that is not true okay so I'll start

00:00:42,360 --> 00:00:46,860
talking about the claim that is being

00:00:44,910 --> 00:00:50,430
made about containers in general

00:00:46,860 --> 00:00:57,360
especially about dr. how it is presented

00:00:50,430 --> 00:01:02,070
to the developer community at large and

00:00:57,360 --> 00:01:04,700
system administrators and users and CTOs

00:01:02,070 --> 00:01:07,400
and CIOs and whatever you name them

00:01:04,700 --> 00:01:09,990
we'll talk a bit about the reality I

00:01:07,400 --> 00:01:12,570
take it a little bit of a deeper look

00:01:09,990 --> 00:01:14,250
beneath the surface of how things you

00:01:12,570 --> 00:01:16,979
know really look and when you look at it

00:01:14,250 --> 00:01:19,439
then the picture that it's not quite so

00:01:16,979 --> 00:01:23,189
nice as it presented becomes relatively

00:01:19,439 --> 00:01:27,270
clear I'll give you some general

00:01:23,189 --> 00:01:29,100
thoughts and then will you know ponder

00:01:27,270 --> 00:01:31,860
about what it means to be a distribution

00:01:29,100 --> 00:01:35,850
this is a opensuse conference after all

00:01:31,860 --> 00:01:41,310
in the world of containers all right

00:01:35,850 --> 00:01:44,159
let's start with a claim the claim is if

00:01:41,310 --> 00:01:46,229
you are an application developer package

00:01:44,159 --> 00:01:49,110
your application and your dependencies

00:01:46,229 --> 00:01:51,299
and you're done and you hand it over to

00:01:49,110 --> 00:01:56,909
the system administrator and everything

00:01:51,299 --> 00:02:00,119
will magically work well let's just say

00:01:56,909 --> 00:02:04,710
there was a guy what 40 years ago now

00:02:00,119 --> 00:02:09,060
that wrote something about silver

00:02:04,710 --> 00:02:10,550
bullets right and that is still true

00:02:09,060 --> 00:02:13,769
today

00:02:10,550 --> 00:02:16,680
so this is the claim if you believe the

00:02:13,769 --> 00:02:19,260
hype about docker and containers you

00:02:16,680 --> 00:02:22,200
will see this package application and

00:02:19,260 --> 00:02:25,980
dependencies and then you can move that

00:02:22,200 --> 00:02:28,319
around from development to tests to

00:02:25,980 --> 00:02:31,500
staging to production and everything

00:02:28,319 --> 00:02:35,370
will work just magically fine but this

00:02:31,500 --> 00:02:38,970
is actually not true I claim so it's my

00:02:35,370 --> 00:02:41,819
counterclaim the reality is that well

00:02:38,970 --> 00:02:43,470
yes you can package only application and

00:02:41,819 --> 00:02:45,870
your dependencies and why can you do

00:02:43,470 --> 00:02:48,870
that because docker and specific has a

00:02:45,870 --> 00:02:51,510
layered file system approach and you can

00:02:48,870 --> 00:02:54,510
see here you start with something that

00:02:51,510 --> 00:02:56,459
has a colonel with cgroups a name spaces

00:02:54,510 --> 00:02:59,430
so you need a kernel that has sufficient

00:02:56,459 --> 00:03:01,950
technology built-in this is not doesn't

00:02:59,430 --> 00:03:04,609
go back to the beginning of time so you

00:03:01,950 --> 00:03:07,230
need to have a relatively recent Colonel

00:03:04,609 --> 00:03:09,390
that's basically your boot file system

00:03:07,230 --> 00:03:13,530
and then you build a container with a

00:03:09,390 --> 00:03:16,440
base image it opens russo of course what

00:03:13,530 --> 00:03:18,750
else would you possibly use and then you

00:03:16,440 --> 00:03:22,799
add applications on top of that in in

00:03:18,750 --> 00:03:24,690
this case emacs and apache and and then

00:03:22,799 --> 00:03:26,700
on top of that you have a writable file

00:03:24,690 --> 00:03:30,180
system layer so if you make any changes

00:03:26,700 --> 00:03:32,160
they basically overlay the other layers

00:03:30,180 --> 00:03:34,680
which are reader which are read-only

00:03:32,160 --> 00:03:38,030
okay so anything in the stack that is

00:03:34,680 --> 00:03:41,220
kind of in blue color that is read-only

00:03:38,030 --> 00:03:44,340
so yes as an application developer let's

00:03:41,220 --> 00:03:48,150
say Apache you can simply pack Apache

00:03:44,340 --> 00:03:51,389
but if you look at Apache well it's not

00:03:48,150 --> 00:03:56,220
just Apache right Apache depends on

00:03:51,389 --> 00:03:58,639
other stuff one of those funny things it

00:03:56,220 --> 00:04:02,040
depends on happens to be open SSL

00:03:58,639 --> 00:04:08,489
anybody remember heartbleed yeah yeah

00:04:02,040 --> 00:04:11,639
yeah so ah so let's say open SSL is in

00:04:08,489 --> 00:04:16,370
my apache layer and heartbeat happens

00:04:11,639 --> 00:04:18,989
now what right so so the reality is that

00:04:16,370 --> 00:04:20,909
it sounds great that you're just

00:04:18,989 --> 00:04:23,490
packaging your application and your

00:04:20,909 --> 00:04:25,639
dependencies but then who

00:04:23,490 --> 00:04:27,930
packages that application and

00:04:25,639 --> 00:04:30,949
dependencies is also responsible for

00:04:27,930 --> 00:04:33,509
that application and dependencies right

00:04:30,949 --> 00:04:35,580
so if that layer comes from a free

00:04:33,509 --> 00:04:37,560
software project like opensuse for

00:04:35,580 --> 00:04:39,780
example let's say it's going to work

00:04:37,560 --> 00:04:42,720
that we will actually would produce a

00:04:39,780 --> 00:04:45,509
new file system layer that has a fixed

00:04:42,720 --> 00:04:48,539
Apache with well not Apache but a fixed

00:04:45,509 --> 00:04:51,930
openssl but let's say this is some

00:04:48,539 --> 00:04:54,120
third-party software they want now

00:04:51,930 --> 00:04:59,819
you're depending on them to give you

00:04:54,120 --> 00:05:04,500
updated patches an updated layer in time

00:04:59,819 --> 00:05:06,150
right okay so the base container why do

00:05:04,500 --> 00:05:08,220
we need the base container it provides

00:05:06,150 --> 00:05:11,940
an init system okay containers need an

00:05:08,220 --> 00:05:14,099
init system so it is more than a

00:05:11,940 --> 00:05:15,810
container is by definition already more

00:05:14,099 --> 00:05:20,069
than the application because you need an

00:05:15,810 --> 00:05:22,560
init system okay there should be an

00:05:20,069 --> 00:05:25,830
update stack because well although

00:05:22,560 --> 00:05:28,620
that's not required the containers the

00:05:25,830 --> 00:05:31,050
container arm templates you usually get

00:05:28,620 --> 00:05:33,389
are really basic systems okay so there's

00:05:31,050 --> 00:05:35,880
nothing in it well there's the init

00:05:33,389 --> 00:05:38,580
system and that's about it and so if you

00:05:35,880 --> 00:05:40,469
want to add anything to it which adds

00:05:38,580 --> 00:05:44,520
then up to these layers that we saw

00:05:40,469 --> 00:05:46,380
right these are usually happy this

00:05:44,520 --> 00:05:48,570
usually happen to through an

00:05:46,380 --> 00:05:51,210
installation process so if you want to

00:05:48,570 --> 00:05:54,539
have an installation process you need an

00:05:51,210 --> 00:05:56,849
update stack okay an update stack is

00:05:54,539 --> 00:05:59,810
also generally useful if while if you

00:05:56,849 --> 00:06:02,340
have to fix security problems but

00:05:59,810 --> 00:06:08,280
therein lies a problem and we'll get to

00:06:02,340 --> 00:06:10,889
that in a minute okay so okay once you

00:06:08,280 --> 00:06:13,110
have that then you need a docker file

00:06:10,889 --> 00:06:15,740
okay you need a vadhaka file so you can

00:06:13,110 --> 00:06:19,500
build your your container to begin with

00:06:15,740 --> 00:06:21,569
okay someone also has to release that

00:06:19,500 --> 00:06:23,639
application layer as I mentioned earlier

00:06:21,569 --> 00:06:26,190
right you have to have that application

00:06:23,639 --> 00:06:29,370
layer if you want that application in it

00:06:26,190 --> 00:06:31,949
or you install that application layer

00:06:29,370 --> 00:06:34,289
through your docker file right so

00:06:31,949 --> 00:06:35,630
there's two ways to to get there right

00:06:34,289 --> 00:06:39,170
you can say

00:06:35,630 --> 00:06:41,930
I base my new container on some image

00:06:39,170 --> 00:06:46,300
that has the application already in it

00:06:41,930 --> 00:06:49,850
or I base my new image on the base image

00:06:46,300 --> 00:06:53,270
opensuse base image and then run sipper

00:06:49,850 --> 00:06:55,760
in apache to write so now you have those

00:06:53,270 --> 00:06:59,060
layers or you get the layer from

00:06:55,760 --> 00:07:00,500
somebody else okay and again if you get

00:06:59,060 --> 00:07:02,900
the layer from somebody else then you

00:07:00,500 --> 00:07:05,540
depend on them to fix any security

00:07:02,900 --> 00:07:07,790
issues in their dependencies or the

00:07:05,540 --> 00:07:13,270
application themselves by giving you a

00:07:07,790 --> 00:07:15,650
new layer okay so well heartbleed

00:07:13,270 --> 00:07:17,750
something like that requires security

00:07:15,650 --> 00:07:20,090
fixes that are basically immediate right

00:07:17,750 --> 00:07:22,400
and and this is where distribution

00:07:20,090 --> 00:07:26,030
vendors or distribution communities such

00:07:22,400 --> 00:07:30,230
as opensuse have in the past proven

00:07:26,030 --> 00:07:32,840
really responsive but third parties may

00:07:30,230 --> 00:07:39,310
not necessarily be as responsive right

00:07:32,840 --> 00:07:43,610
so there's a trust relationship and and

00:07:39,310 --> 00:07:47,840
a hope that whoever gives you that layer

00:07:43,610 --> 00:07:51,890
is immediately responsive to when there

00:07:47,840 --> 00:07:55,040
are 0 day vulnerabilities okay and not

00:07:51,890 --> 00:07:56,870
just that you also need some kind of

00:07:55,040 --> 00:08:00,380
service and this does not exist today

00:07:56,870 --> 00:08:03,110
that tells you that these these issues

00:08:00,380 --> 00:08:06,710
exist right today when you're running a

00:08:03,110 --> 00:08:09,350
distribution if you're running opensuse

00:08:06,710 --> 00:08:13,370
or suse linux enterprise on your desktop

00:08:09,350 --> 00:08:15,290
or even on your server we have package

00:08:13,370 --> 00:08:18,710
kid running generally and it gives you

00:08:15,290 --> 00:08:21,950
little notification and say they are a

00:08:18,710 --> 00:08:23,900
number of security fixes available and

00:08:21,950 --> 00:08:26,060
you should install them right if you're

00:08:23,900 --> 00:08:27,890
running it on your desktop and for

00:08:26,060 --> 00:08:29,810
servers we have mailing this where you

00:08:27,890 --> 00:08:32,690
get that but if you're getting a

00:08:29,810 --> 00:08:35,539
container from somebody there's no

00:08:32,690 --> 00:08:37,310
service like that today okay nobody has

00:08:35,539 --> 00:08:40,580
a service like that today that tells you

00:08:37,310 --> 00:08:43,270
we gave you a container and you're

00:08:40,580 --> 00:08:46,510
running that container and we found

00:08:43,270 --> 00:08:49,270
that d version of lib ssl that we have

00:08:46,510 --> 00:08:51,040
in that container has a secure security

00:08:49,270 --> 00:08:55,090
vulnerability that service does not

00:08:51,040 --> 00:08:56,560
exist today okay so so there is an issue

00:08:55,090 --> 00:08:58,120
right there I do you have no

00:08:56,560 --> 00:09:00,940
notification sir you may be running

00:08:58,120 --> 00:09:04,150
something you don't really know what's

00:09:00,940 --> 00:09:06,760
in it and you don't know if you're

00:09:04,150 --> 00:09:10,930
vulnerable okay so there's something

00:09:06,760 --> 00:09:15,520
that that needs to be thought about okay

00:09:10,930 --> 00:09:18,370
or okay the other way of course is to

00:09:15,520 --> 00:09:21,340
say okay I have an update stack in my

00:09:18,370 --> 00:09:24,520
base image and so I just run super up

00:09:21,340 --> 00:09:28,500
and then the vulnerable libraries get

00:09:24,520 --> 00:09:32,020
replaced the problem with that is well a

00:09:28,500 --> 00:09:34,990
container only runs as long as the

00:09:32,020 --> 00:09:38,470
service that you're providing within the

00:09:34,990 --> 00:09:41,530
container runs so if i update and then

00:09:38,470 --> 00:09:43,450
restart the container well my container

00:09:41,530 --> 00:09:45,640
goes down and I start one from the

00:09:43,450 --> 00:09:47,500
original image which of course is

00:09:45,640 --> 00:09:49,810
vulnerable so you're caught in this

00:09:47,500 --> 00:09:52,650
vicious cycle where you can't update the

00:09:49,810 --> 00:09:56,530
container unless you actually rebuild it

00:09:52,650 --> 00:09:59,860
meaning build it from scratch okay and

00:09:56,530 --> 00:10:02,830
so you're in this cycle where you can

00:09:59,860 --> 00:10:06,100
say well okay so if you compare it to a

00:10:02,830 --> 00:10:08,500
system on real hardware or in a virtual

00:10:06,100 --> 00:10:10,270
machine right I can go in and I can

00:10:08,500 --> 00:10:12,280
update the virtual machine and I can

00:10:10,270 --> 00:10:15,550
shut down apache and bring it back up

00:10:12,280 --> 00:10:17,710
that takes me a second and everything is

00:10:15,550 --> 00:10:20,890
fine because it'll use the new version

00:10:17,710 --> 00:10:22,720
of lip ssl you can't do that in a

00:10:20,890 --> 00:10:24,340
container because as soon as you shut

00:10:22,720 --> 00:10:26,890
down apache in that container your

00:10:24,340 --> 00:10:29,320
container goes away and when you restart

00:10:26,890 --> 00:10:31,810
it you're starting from the original

00:10:29,320 --> 00:10:34,620
container which has the broken version

00:10:31,810 --> 00:10:34,620
of lib ssl

00:10:44,550 --> 00:10:50,010
because updates are not persistent

00:10:46,960 --> 00:10:50,010
unless you commit them

00:10:50,980 --> 00:10:58,300
and then as soon as you committed you

00:10:53,889 --> 00:11:00,610
create a new container okay if I run if

00:10:58,300 --> 00:11:02,980
I run an update in a container the next

00:11:00,610 --> 00:11:05,500
step is if I wanted to persist you have

00:11:02,980 --> 00:11:07,570
to run commit which means you are

00:11:05,500 --> 00:11:09,519
creating a new container it is no longer

00:11:07,570 --> 00:11:11,320
that it can it is no longer the

00:11:09,519 --> 00:11:18,220
container that you were running to begin

00:11:11,320 --> 00:11:22,480
with right yes it's a doctor talk yes

00:11:18,220 --> 00:11:23,949
yes okay so you have to if if you want

00:11:22,480 --> 00:11:26,680
those changes that you're making with

00:11:23,949 --> 00:11:28,899
your update stack to persist then you

00:11:26,680 --> 00:11:31,329
have to commit your container so that it

00:11:28,899 --> 00:11:33,300
did changes are persisted but that also

00:11:31,329 --> 00:11:36,070
means you're creating a new container

00:11:33,300 --> 00:11:37,930
okay you're creating a new container and

00:11:36,070 --> 00:11:39,839
then you have to start that new

00:11:37,930 --> 00:11:48,310
container it is not the same container

00:11:39,839 --> 00:11:49,899
okay so there's a difference no you can

00:11:48,310 --> 00:11:51,730
take you you're committing to your local

00:11:49,899 --> 00:11:55,920
file system where the containers are

00:11:51,730 --> 00:11:58,750
stored okay VAR lib docker wherever okay

00:11:55,920 --> 00:12:01,630
but you have to make that commit right

00:11:58,750 --> 00:12:03,730
and that it's not necessarily what

00:12:01,630 --> 00:12:05,920
people think about right people go and

00:12:03,730 --> 00:12:08,529
say okay I'm going to run super up and

00:12:05,920 --> 00:12:10,209
I'm going to restart the service alright

00:12:08,529 --> 00:12:14,380
this is a new step that is in the

00:12:10,209 --> 00:12:16,149
workflow that is not necessarily in the

00:12:14,380 --> 00:12:19,769
consciousness of the person that you

00:12:16,149 --> 00:12:22,660
know because for 20-odd years 30 years

00:12:19,769 --> 00:12:24,940
the workflow has been I update the

00:12:22,660 --> 00:12:27,550
broken library in between I restart the

00:12:24,940 --> 00:12:30,699
service and I'm fine while that doesn't

00:12:27,550 --> 00:12:32,290
work with containers right if i restart

00:12:30,699 --> 00:12:34,839
the service without committing in

00:12:32,290 --> 00:12:36,699
between i'm starting the same container

00:12:34,839 --> 00:12:39,310
that has the boner ability built in

00:12:36,699 --> 00:12:41,740
already right and then you walk away and

00:12:39,310 --> 00:12:44,399
you're vulnerable and then you say but I

00:12:41,740 --> 00:12:44,399
rain update

00:12:49,290 --> 00:12:52,290
I

00:12:56,110 --> 00:13:03,290
not a problem you just have to do it you

00:13:00,709 --> 00:13:06,259
have to do it and what I'm saying is old

00:13:03,290 --> 00:13:08,779
habits die hard people are used to

00:13:06,259 --> 00:13:11,000
update restart the service right that's

00:13:08,779 --> 00:13:13,190
what everybody's used to think about

00:13:11,000 --> 00:13:16,339
yourself right what what are you used

00:13:13,190 --> 00:13:19,040
what happened when hardly came out I ran

00:13:16,339 --> 00:13:21,829
zipper up I restarted all my services

00:13:19,040 --> 00:13:24,649
and I was done that is what I'm used to

00:13:21,829 --> 00:13:26,360
that's what I've done for how many ever

00:13:24,649 --> 00:13:27,829
years right in the in the world of

00:13:26,360 --> 00:13:30,699
containers that no longer applies

00:13:27,829 --> 00:13:30,699
Frederick

00:13:42,160 --> 00:13:45,460
I'm sorry

00:13:50,740 --> 00:13:53,910
dr. pol

00:13:56,170 --> 00:14:02,120
right yes so that would be possible you

00:13:59,630 --> 00:14:05,090
could automate the workflow but today it

00:14:02,120 --> 00:14:09,110
doesn't exist okay and we're thinking of

00:14:05,090 --> 00:14:11,360
ways to make that safer from you know

00:14:09,110 --> 00:14:13,100
from a susan perspective but today that

00:14:11,360 --> 00:14:23,090
does not exist there was another

00:14:13,100 --> 00:14:24,860
question here right right so the problem

00:14:23,090 --> 00:14:26,690
is that if you don't commit in between

00:14:24,860 --> 00:14:29,120
you always start the same thing over and

00:14:26,690 --> 00:14:31,130
over again which is vulnerable by

00:14:29,120 --> 00:14:34,130
definition right which is what you were

00:14:31,130 --> 00:14:37,720
trying to fix with the update stack so

00:14:34,130 --> 00:14:37,720
you have to be careful there right

00:14:44,710 --> 00:14:50,360
yes yes so the question is if at the end

00:14:48,680 --> 00:14:52,580
of what you normally do if you're

00:14:50,360 --> 00:14:57,970
running in a container you have to

00:14:52,580 --> 00:15:00,740
commit and get the answers yes yes right

00:14:57,970 --> 00:15:02,870
right there's this new stat right you

00:15:00,740 --> 00:15:04,970
have to commit if you're running an

00:15:02,870 --> 00:15:08,330
update stack in the container and you're

00:15:04,970 --> 00:15:10,550
running zipper up to make sure it's up

00:15:08,330 --> 00:15:12,320
to date and you want to restart the

00:15:10,550 --> 00:15:15,460
service that runs in the container you

00:15:12,320 --> 00:15:18,650
have to commit first before you restart

00:15:15,460 --> 00:15:20,690
because the container shuts down as soon

00:15:18,650 --> 00:15:24,920
as the service that is running within it

00:15:20,690 --> 00:15:32,240
if that process ends right in the doctor

00:15:24,920 --> 00:15:34,130
case okay so basically or if you don't

00:15:32,240 --> 00:15:37,640
do the commit then you have to rebuild

00:15:34,130 --> 00:15:39,890
from scratch as long as you built your

00:15:37,640 --> 00:15:44,990
dockerfile your build script basically

00:15:39,890 --> 00:15:47,210
contains a super up in in inside of the

00:15:44,990 --> 00:15:51,380
build script then you automatically get

00:15:47,210 --> 00:15:53,000
to get the latest right so so this is

00:15:51,380 --> 00:15:58,190
not as easy as it is proclaimed

00:15:53,000 --> 00:16:02,210
obviously right so with that some

00:15:58,190 --> 00:16:05,300
general thoughts okay on time I halfway

00:16:02,210 --> 00:16:08,420
through for developers containers are

00:16:05,300 --> 00:16:11,090
great right because for us if I'm

00:16:08,420 --> 00:16:13,820
developing a web service I can really

00:16:11,090 --> 00:16:16,160
have a very fast cycle containers built

00:16:13,820 --> 00:16:19,070
really fast because docker keeps a cache

00:16:16,160 --> 00:16:21,740
of what you have built on your system

00:16:19,070 --> 00:16:25,670
right I can rebuild a container in a

00:16:21,740 --> 00:16:27,830
matter of minutes right I can map the

00:16:25,670 --> 00:16:30,350
application the web application that I'm

00:16:27,830 --> 00:16:33,350
working on that is on my file system on

00:16:30,350 --> 00:16:36,410
my machine on my laptop I can map that

00:16:33,350 --> 00:16:38,960
directory into the container and can

00:16:36,410 --> 00:16:41,780
point the web server or whatever service

00:16:38,960 --> 00:16:43,880
is running inside to my application is

00:16:41,780 --> 00:16:46,640
actually on my file system and so I can

00:16:43,880 --> 00:16:49,550
develop and I can recycle and restart

00:16:46,640 --> 00:16:51,350
that container in a matter of seconds or

00:16:49,550 --> 00:16:53,660
minutes it is great it is really

00:16:51,350 --> 00:16:57,200
fantastic there's no question about it

00:16:53,660 --> 00:16:58,339
the mapping of directories also the

00:16:57,200 --> 00:17:01,069
container is portable

00:16:58,339 --> 00:17:03,559
right so if I'm working with somebody

00:17:01,069 --> 00:17:07,549
else on my team I can just tell them

00:17:03,559 --> 00:17:11,510
look go to my github you know pull my

00:17:07,549 --> 00:17:14,539
repository and put it in in your home

00:17:11,510 --> 00:17:17,299
directory and then here is my docker

00:17:14,539 --> 00:17:21,890
file and now run docker built and run

00:17:17,299 --> 00:17:24,350
docker run and within a minute my team

00:17:21,890 --> 00:17:26,329
member has a duplicated environment of

00:17:24,350 --> 00:17:29,870
what I have and we can work on the same

00:17:26,329 --> 00:17:32,679
code see the same thing right this is

00:17:29,870 --> 00:17:36,260
very easy so this is fantastic right

00:17:32,679 --> 00:17:38,029
okay and yes it is a reasonable preview

00:17:36,260 --> 00:17:40,760
of production because with docker and

00:17:38,029 --> 00:17:43,100
some other tools I can do orchestration

00:17:40,760 --> 00:17:44,990
on my laptop of three four five machines

00:17:43,100 --> 00:17:49,039
that have to be hooked together a

00:17:44,990 --> 00:17:51,169
database back-end web front-end and

00:17:49,039 --> 00:17:53,510
whatever else goes along with it I can

00:17:51,169 --> 00:17:55,610
hook that together with with dr.

00:17:53,510 --> 00:17:57,470
containers very easily right docker

00:17:55,610 --> 00:18:01,370
provides all that infrastructure and

00:17:57,470 --> 00:18:05,240
that's very nice okay so in the end it

00:18:01,370 --> 00:18:08,450
lets me encapsulate what I'm doing into

00:18:05,240 --> 00:18:10,279
into a way that is easily portable okay

00:18:08,450 --> 00:18:12,320
and it lets me focus on the work that

00:18:10,279 --> 00:18:14,990
I'm doing if I'm developing a web

00:18:12,320 --> 00:18:17,809
application or some other service so

00:18:14,990 --> 00:18:20,510
from that point of view dr is fantastic

00:18:17,809 --> 00:18:23,090
and I'm a developer I'm not run while

00:18:20,510 --> 00:18:26,090
I'm developing my service is not going

00:18:23,090 --> 00:18:27,380
to be exposed to the outside world so I

00:18:26,090 --> 00:18:29,690
really don't care that much about

00:18:27,380 --> 00:18:31,460
heartbleed or shell shock or whatever

00:18:29,690 --> 00:18:33,770
right it's just running on my machine

00:18:31,460 --> 00:18:35,960
nobody else can get to it it cannot be

00:18:33,770 --> 00:18:39,559
compromised because there's no access

00:18:35,960 --> 00:18:41,570
from the outside world and I'm okay but

00:18:39,559 --> 00:18:44,450
that does not mean that I can take that

00:18:41,570 --> 00:18:48,770
then and stick it into production right

00:18:44,450 --> 00:18:51,890
this works great developers whoa yes we

00:18:48,770 --> 00:18:55,580
love that stuff system that means

00:18:51,890 --> 00:18:58,549
production environment hmm not so much

00:18:55,580 --> 00:19:00,350
right yes they're easy to fire up and I

00:18:58,549 --> 00:19:02,779
can take the orchestration that the

00:19:00,350 --> 00:19:04,520
developer build and run it on my

00:19:02,779 --> 00:19:07,309
production system so from that point of

00:19:04,520 --> 00:19:09,950
view there is a translation in make it

00:19:07,309 --> 00:19:11,990
easy and make it easy in production but

00:19:09,950 --> 00:19:15,740
as I mentioned the man

00:19:11,990 --> 00:19:17,450
of security fixes now becomes actually

00:19:15,740 --> 00:19:19,670
more complicated than it already is

00:19:17,450 --> 00:19:22,790
today okay and the system that we have

00:19:19,670 --> 00:19:24,559
today is far from perfect but it works

00:19:22,790 --> 00:19:26,420
and we've all gotten used to it that

00:19:24,559 --> 00:19:30,220
doesn't necessarily mean we can't do

00:19:26,420 --> 00:19:33,080
better or we shouldn't change it but

00:19:30,220 --> 00:19:36,710
dockers not really the way I think to go

00:19:33,080 --> 00:19:39,140
here okay if you're using a layer from

00:19:36,710 --> 00:19:41,240
an application layer from somebody then

00:19:39,140 --> 00:19:43,240
that means you're depending on that

00:19:41,240 --> 00:19:46,490
somebody to give you a new layer

00:19:43,240 --> 00:19:49,040
basically immediately then you have to

00:19:46,490 --> 00:19:51,350
rebuild your container from that new

00:19:49,040 --> 00:19:55,220
layer and then restart that container

00:19:51,350 --> 00:19:58,640
okay so there may be potential downtime

00:19:55,220 --> 00:20:01,280
issues if you use the update stack we

00:19:58,640 --> 00:20:02,870
already discussed that you may if you

00:20:01,280 --> 00:20:04,910
don't do the commit you end up in this

00:20:02,870 --> 00:20:06,470
vicious cycle where you restart it and

00:20:04,910 --> 00:20:11,540
you actually don't get the fix that you

00:20:06,470 --> 00:20:13,760
want right and overall as it stands

00:20:11,540 --> 00:20:16,790
today there are there's very little

00:20:13,760 --> 00:20:18,380
experience okay in in the systems

00:20:16,790 --> 00:20:21,830
administration community and the

00:20:18,380 --> 00:20:25,730
community in general and there is no

00:20:21,830 --> 00:20:27,500
best practice for you know well what

00:20:25,730 --> 00:20:29,660
happens if you deploy ten thousand

00:20:27,500 --> 00:20:32,120
containers they're not really best

00:20:29,660 --> 00:20:35,000
practices available today because nobody

00:20:32,120 --> 00:20:37,280
has made those experiences yet we don't

00:20:35,000 --> 00:20:38,990
really know what's going to happen this

00:20:37,280 --> 00:20:40,750
is going to take time it's going to

00:20:38,990 --> 00:20:43,730
happen eventually we are going to know

00:20:40,750 --> 00:20:48,140
best practices will be documented but

00:20:43,730 --> 00:20:51,670
we're not there yet today all right and

00:20:48,140 --> 00:20:56,300
now to the more philosophical question

00:20:51,670 --> 00:20:59,120
as a distribution provider as the

00:20:56,300 --> 00:21:03,309
opensuse project what does it mean to be

00:20:59,120 --> 00:21:08,620
a distribution in the container world so

00:21:03,309 --> 00:21:11,780
this one's easy right we have a kernel

00:21:08,620 --> 00:21:15,080
Buddha fess that comes from the opensuse

00:21:11,780 --> 00:21:18,010
project we run opensuse on top and

00:21:15,080 --> 00:21:21,620
applications are we running opensuse now

00:21:18,010 --> 00:21:23,540
yes we are right because everything in

00:21:21,620 --> 00:21:26,649
the stack comes from the project it's

00:21:23,540 --> 00:21:30,559
now it's quite easy to answer

00:21:26,649 --> 00:21:34,190
but now what now I have some kernel

00:21:30,559 --> 00:21:36,049
maybe I have the upstream kernel or get

00:21:34,190 --> 00:21:41,840
the colonel from some other distribution

00:21:36,049 --> 00:21:46,190
or I am a colonel hacker and have my own

00:21:41,840 --> 00:21:51,289
car and now run opensuse on top am i

00:21:46,190 --> 00:21:52,909
running opensuse in that container so

00:21:51,289 --> 00:21:54,590
from a distribution point of view this

00:21:52,909 --> 00:21:56,629
raises some very interesting questions

00:21:54,590 --> 00:21:58,009
right how do we define ourselves as a

00:21:56,629 --> 00:22:01,399
distribution now we're defining

00:21:58,009 --> 00:22:04,580
ourselves as a distribution of the

00:22:01,399 --> 00:22:06,379
update stack and all the packages that

00:22:04,580 --> 00:22:08,179
you may get from our project which may

00:22:06,379 --> 00:22:11,179
not necessarily have to include the

00:22:08,179 --> 00:22:12,889
kernel or do we say we're only you're

00:22:11,179 --> 00:22:16,549
only running at the opensuse

00:22:12,889 --> 00:22:20,210
distribution if if you're in this

00:22:16,549 --> 00:22:24,049
scenario we're opensuse is the base and

00:22:20,210 --> 00:22:25,879
you're using opensuse barcode on called

00:22:24,049 --> 00:22:27,859
user space right because this is more

00:22:25,879 --> 00:22:30,799
the base image is more than user space

00:22:27,859 --> 00:22:36,129
but let's just say this is user space in

00:22:30,799 --> 00:22:36,129
the container world right Oliver

00:22:40,560 --> 00:22:43,680
excuse me

00:22:44,320 --> 00:22:48,540
just

00:22:46,280 --> 00:22:50,910
how is it different from running on a

00:22:48,540 --> 00:22:52,770
virtual machine well because in a

00:22:50,910 --> 00:22:54,570
virtual machine whatever is inside the

00:22:52,770 --> 00:22:57,690
virtual machine runs on the kernel that

00:22:54,570 --> 00:23:00,000
the distribution provided the hypervisor

00:22:57,690 --> 00:23:02,430
itself is really immaterial because it

00:23:00,000 --> 00:23:04,559
just abstracts the hardware the

00:23:02,430 --> 00:23:07,410
hypervisor just says ok I'm running on a

00:23:04,559 --> 00:23:09,930
different set of hardware so if you run

00:23:07,410 --> 00:23:12,960
in amazon today or in google and you run

00:23:09,930 --> 00:23:14,700
an opensuse image that we release you're

00:23:12,960 --> 00:23:17,130
running opensuse you're running on top

00:23:14,700 --> 00:23:18,990
of our kernel and they use different

00:23:17,130 --> 00:23:22,230
hypervisors between Google compute

00:23:18,990 --> 00:23:25,950
engine and Amazon but that's just like

00:23:22,230 --> 00:23:35,850
saying I'm running on IBM boxes or an HP

00:23:25,950 --> 00:23:38,309
boxes no you're not you're changing the

00:23:35,850 --> 00:23:40,830
abstraction layer that's like running on

00:23:38,309 --> 00:23:42,570
IBM or it's running on but you're not

00:23:40,830 --> 00:23:44,700
changing the colonel you're still

00:23:42,570 --> 00:23:48,420
running on the kernel that our that

00:23:44,700 --> 00:23:51,410
opensuse or suse linux enterprise put

00:23:48,420 --> 00:23:51,410
into that image

00:23:54,580 --> 00:24:02,690
so there is there is a big difference

00:23:57,129 --> 00:24:05,090
anyway so so this is a question that is

00:24:02,690 --> 00:24:08,659
not easily answered right in the

00:24:05,090 --> 00:24:12,049
container world from a distribution

00:24:08,659 --> 00:24:15,049
point of view I don't think we have an

00:24:12,049 --> 00:24:18,590
answer for this question today and with

00:24:15,049 --> 00:24:21,649
that I am actually at the end and so if

00:24:18,590 --> 00:24:26,289
you have more questions I'm happy to

00:24:21,649 --> 00:24:26,289
answer them yes

00:24:38,650 --> 00:24:41,650
Jews

00:24:49,030 --> 00:24:58,880
yes inside darker there is really no

00:24:54,500 --> 00:25:01,870
reason to do that but you could you just

00:24:58,880 --> 00:25:05,210
have to consider that a docker container

00:25:01,870 --> 00:25:07,010
the lifetime of a docker container ends

00:25:05,210 --> 00:25:10,190
when the service that you're running

00:25:07,010 --> 00:25:12,530
within ends okay so if you want to have

00:25:10,190 --> 00:25:15,320
a change route jail inside a docker

00:25:12,530 --> 00:25:17,540
container which is kind of nested which

00:25:15,320 --> 00:25:20,810
would be like nested docker and that's

00:25:17,540 --> 00:25:23,690
okay that means you have to run one

00:25:20,810 --> 00:25:27,200
process in the outer layer and the outer

00:25:23,690 --> 00:25:29,180
docker that basically persists right you

00:25:27,200 --> 00:25:31,310
could run an interactive shell and leave

00:25:29,180 --> 00:25:34,700
that up in a terminal running forever

00:25:31,310 --> 00:25:36,590
right or sent the output somewhere but

00:25:34,700 --> 00:25:39,260
you then you have to do a service that

00:25:36,590 --> 00:25:41,960
you know you don't have to change that

00:25:39,260 --> 00:25:44,500
will never go away so soon as that

00:25:41,960 --> 00:25:47,120
service ends that runs the outer docker

00:25:44,500 --> 00:25:49,460
your change route jail also will go away

00:25:47,120 --> 00:25:53,450
right because the container will be shut

00:25:49,460 --> 00:25:56,600
down night I mean you could map a change

00:25:53,450 --> 00:25:58,760
or jail from your file system into that

00:25:56,600 --> 00:26:00,740
change from jail that you're running in

00:25:58,760 --> 00:26:07,060
the container but I'm not certain that

00:26:00,740 --> 00:26:07,060
is that is really useful use case Gabor

00:26:20,170 --> 00:26:25,700
if there are any larger customers that

00:26:22,820 --> 00:26:35,390
are running containers in production not

00:26:25,700 --> 00:26:37,550
that I know of today what well yes

00:26:35,390 --> 00:26:42,800
Google is but they're not a customer of

00:26:37,550 --> 00:26:49,550
ours but yes so good so Google on a

00:26:42,800 --> 00:26:52,070
large yes so so doctor well not dr.

00:26:49,550 --> 00:26:54,850
environments container environments so

00:26:52,070 --> 00:26:59,390
Google has been doing containers forever

00:26:54,850 --> 00:27:02,510
for much longer than dr. existed and and

00:26:59,390 --> 00:27:05,540
basically what Google has been doing in

00:27:02,510 --> 00:27:07,640
I don't know last five six seven eight

00:27:05,540 --> 00:27:10,880
ten years maybe they're not they don't

00:27:07,640 --> 00:27:12,980
really tell you how long that is all

00:27:10,880 --> 00:27:15,320
coming together in a project called

00:27:12,980 --> 00:27:19,760
Cooper Nettie's which is on github and

00:27:15,320 --> 00:27:21,620
basically on Google is making all of

00:27:19,760 --> 00:27:25,309
that technology that they've been using

00:27:21,620 --> 00:27:27,710
forever more available in in the Cooper

00:27:25,309 --> 00:27:32,200
Nettie's project Cooper dennis is really

00:27:27,710 --> 00:27:35,540
fast moving it helps you to deploy

00:27:32,200 --> 00:27:37,820
clusters of containers an actually

00:27:35,540 --> 00:27:42,140
Google compute engine what happens there

00:27:37,820 --> 00:27:44,210
is that every workload runs in a

00:27:42,140 --> 00:27:45,800
container so when you run a virtual

00:27:44,210 --> 00:27:48,679
machine in Google compute engine

00:27:45,800 --> 00:27:51,470
actually runs inside of container okay

00:27:48,679 --> 00:27:55,100
so everything in Google runs in

00:27:51,470 --> 00:27:58,850
containers and i would say google is the

00:27:55,100 --> 00:28:01,420
largest shop that uses containers other

00:27:58,850 --> 00:28:05,929
than that I don't really know of anybody

00:28:01,420 --> 00:28:09,110
that is running containers in in a

00:28:05,929 --> 00:28:14,840
production environment like that or even

00:28:09,110 --> 00:28:18,340
similar to that is especially not stuff

00:28:14,840 --> 00:28:18,340
that's exposed to the outside world

00:28:26,540 --> 00:28:30,830
is there any strength

00:28:35,350 --> 00:28:39,530
so the question is if there are

00:28:37,490 --> 00:28:45,320
experiences with other servers other

00:28:39,530 --> 00:28:47,120
than been web servers currently the

00:28:45,320 --> 00:28:50,450
focus i think is mostly on web

00:28:47,120 --> 00:28:53,200
applications and the trend the trend

00:28:50,450 --> 00:28:57,080
with docker is really to go into the

00:28:53,200 --> 00:29:00,530
microservices operation which means it

00:28:57,080 --> 00:29:04,070
means a service that does a very very

00:29:00,530 --> 00:29:06,740
small set of that provides a very very

00:29:04,070 --> 00:29:09,200
small set of functionality and that can

00:29:06,740 --> 00:29:11,330
be fully automated so that you can

00:29:09,200 --> 00:29:13,850
really get to the point where you can

00:29:11,330 --> 00:29:16,490
very quickly restart your container okay

00:29:13,850 --> 00:29:19,789
so in the case of the security update

00:29:16,490 --> 00:29:24,440
you could go in okay say I have I have a

00:29:19,789 --> 00:29:27,200
hundred i have 100 containers that run

00:29:24,440 --> 00:29:30,100
the same microservice and each container

00:29:27,200 --> 00:29:32,870
is fully automated so if it gets started

00:29:30,100 --> 00:29:34,909
then it automatically connects to the

00:29:32,870 --> 00:29:37,669
beta database back-end or whatever it

00:29:34,909 --> 00:29:39,980
does right and and all of that is fully

00:29:37,669 --> 00:29:42,520
automated so that's the general idea so

00:29:39,980 --> 00:29:45,950
that when I do run zipper up commit

00:29:42,520 --> 00:29:48,169
shutdown restart I can do that in

00:29:45,950 --> 00:29:50,510
sequence on or you I can say okay I'm

00:29:48,169 --> 00:29:52,640
going to do 50 at once and then the

00:29:50,510 --> 00:29:54,860
other 50 carry the load while these come

00:29:52,640 --> 00:29:59,750
back up and then I do the next 50 right

00:29:54,860 --> 00:30:01,970
so that's the general idea but um all of

00:29:59,750 --> 00:30:04,039
that has not really been tried out as I

00:30:01,970 --> 00:30:07,100
said Aaron currently to the best of my

00:30:04,039 --> 00:30:09,380
knowledge no best practices for any of

00:30:07,100 --> 00:30:11,950
this that people can just you know where

00:30:09,380 --> 00:30:16,539
their recipes that people can just fall

00:30:11,950 --> 00:30:16,539
other questions Andrew

00:30:21,869 --> 00:30:31,019
yeah so the question is about managing

00:30:24,220 --> 00:30:34,299
the containers so while currently um I

00:30:31,019 --> 00:30:37,299
mean management from containers exists

00:30:34,299 --> 00:30:39,399
on at least two levels right the

00:30:37,299 --> 00:30:42,190
container itself as it is running and

00:30:39,399 --> 00:30:44,710
there's also an issue with wood

00:30:42,190 --> 00:30:46,840
terminology right because when we talk

00:30:44,710 --> 00:30:50,200
about a container it can be either the

00:30:46,840 --> 00:30:52,899
image which rests on your disk file or

00:30:50,200 --> 00:30:54,999
it can be the running container and in

00:30:52,899 --> 00:30:57,759
the common language that containers are

00:30:54,999 --> 00:31:00,100
talked about there's not really a

00:30:57,759 --> 00:31:02,320
differentiation between the container

00:31:00,100 --> 00:31:04,119
that sits on your disk and does nothing

00:31:02,320 --> 00:31:05,889
and the container that is actually

00:31:04,119 --> 00:31:08,619
running right you talk about

00:31:05,889 --> 00:31:10,509
virtualization we talk about images and

00:31:08,619 --> 00:31:12,309
instances and then you know while the

00:31:10,509 --> 00:31:14,529
instance is the running thing and the

00:31:12,309 --> 00:31:15,850
image is the thing on disk but in a

00:31:14,529 --> 00:31:18,489
container world we always talk about

00:31:15,850 --> 00:31:20,619
container and it is not really certain

00:31:18,489 --> 00:31:23,440
if the thing is running or just resting

00:31:20,619 --> 00:31:24,759
on disk and so as far as management is

00:31:23,440 --> 00:31:27,909
concerned to come back to your question

00:31:24,759 --> 00:31:29,710
it is well ok so when you talk about

00:31:27,909 --> 00:31:31,600
container management are you talking

00:31:29,710 --> 00:31:34,480
about the running container meaning the

00:31:31,600 --> 00:31:36,850
stuff that's actually inside or you're

00:31:34,480 --> 00:31:38,769
talking about the container that happens

00:31:36,850 --> 00:31:42,519
to be resting on disk that you can start

00:31:38,769 --> 00:31:46,419
at any time ok so if I look at the well

00:31:42,519 --> 00:31:49,090
what's running inside theoretically you

00:31:46,419 --> 00:31:51,159
can use the current management tools ok

00:31:49,090 --> 00:31:55,600
so for example I could hook a running

00:31:51,159 --> 00:31:57,639
container into souza manager if I wanted

00:31:55,600 --> 00:32:00,639
to right that is certainly possible and

00:31:57,639 --> 00:32:03,159
then that can push my updates out ok and

00:32:00,639 --> 00:32:05,230
as long as they the updates that I'm

00:32:03,159 --> 00:32:09,039
pushing out don't require the service

00:32:05,230 --> 00:32:11,379
that's inside to restart I'm ok but if I

00:32:09,039 --> 00:32:13,389
require that to restart then again it

00:32:11,379 --> 00:32:15,129
goes back to the earlier discussion then

00:32:13,389 --> 00:32:17,499
I have to do a commit and then the

00:32:15,129 --> 00:32:21,600
restart of the container or the update

00:32:17,499 --> 00:32:24,609
is really useless right and so then for

00:32:21,600 --> 00:32:27,309
for the next layer for the outside layer

00:32:24,609 --> 00:32:29,529
of saying well the container that the

00:32:27,309 --> 00:32:30,110
container file or the image that rests

00:32:29,529 --> 00:32:33,260
on your day

00:32:30,110 --> 00:32:37,990
us we saw earlier the mall I don't know

00:32:33,260 --> 00:32:41,600
if everybody but earlier Joseph

00:32:37,990 --> 00:32:44,870
presented a new module in Yost that

00:32:41,600 --> 00:32:48,110
presents container information in Yost

00:32:44,870 --> 00:32:52,490
right and so there there is work going

00:32:48,110 --> 00:32:54,320
on in that direction and Yost will at

00:32:52,490 --> 00:32:56,510
least show you the containers that you

00:32:54,320 --> 00:32:59,030
have on your system but currently we

00:32:56,510 --> 00:33:03,200
have nothing that would say okay this

00:32:59,030 --> 00:33:07,040
container X is related to dockerfile X

00:33:03,200 --> 00:33:09,440
and dr. philex contains this and maps

00:33:07,040 --> 00:33:11,059
this back to the repositories where the

00:33:09,440 --> 00:33:14,270
stuff that you built the container from

00:33:11,059 --> 00:33:17,510
comes from right so so that connection

00:33:14,270 --> 00:33:20,530
is currently missing and and eventually

00:33:17,510 --> 00:33:23,419
that will have to be close to make that

00:33:20,530 --> 00:33:25,280
manageable and as far as the built

00:33:23,419 --> 00:33:27,110
environment is concerned so the doctor

00:33:25,280 --> 00:33:29,929
build environment which is the darker

00:33:27,110 --> 00:33:32,440
files those you can just manage through

00:33:29,929 --> 00:33:36,940
get for example or some other source

00:33:32,440 --> 00:33:36,940
control file mechanism

00:33:55,740 --> 00:34:03,780
well so far it goes the question is

00:33:58,590 --> 00:34:05,760
about SSH keys and certificates and oh

00:34:03,780 --> 00:34:10,470
yeah I'm overtime okay sorry so it's the

00:34:05,760 --> 00:34:13,350
last question sorry so they're basically

00:34:10,470 --> 00:34:17,790
you can just map those into your

00:34:13,350 --> 00:34:19,770
container as a volume and and you can

00:34:17,790 --> 00:34:22,440
just point them to your file system on

00:34:19,770 --> 00:34:24,810
on the container host and then when you

00:34:22,440 --> 00:34:26,460
restart it it just gets remapped and and

00:34:24,810 --> 00:34:28,830
then the stuff is there so you there's

00:34:26,460 --> 00:34:32,340
not really a lot of effort to handle

00:34:28,830 --> 00:34:34,350
that so and with that out of time so i

00:34:32,340 --> 00:34:36,619
can and take any more questions thanks

00:34:34,350 --> 00:34:36,619

YouTube URL: https://www.youtube.com/watch?v=lNO8m-0aK38


