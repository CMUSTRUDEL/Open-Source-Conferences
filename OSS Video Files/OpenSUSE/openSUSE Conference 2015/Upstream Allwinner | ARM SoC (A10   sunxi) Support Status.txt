Title: Upstream Allwinner | ARM SoC (A10   sunxi) Support Status
Publication date: 2015-05-12
Playlist: openSUSE Conference 2015
Description: 
	The linux-sunxi community has been slowly but steadily working on getting Allwinner SoCs like the A10 supported in upstream u-boot and the kernel.
This talk will present the current status of Allwinner support upstream.
Which SoCs are supported and which ones are not (yet) supported? Which blocks of the supported SoCs are supported, and which are not? Why are some SoCs / blocks not supported, and what are the plans to get them supported? This are some of the questions this talk tries to answer.

Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Follow us on Google+ ► https://www.plus.google.com/openSUSE
Captions: 
	00:00:02,179 --> 00:00:08,730
okay my phone says that it's a quarter

00:00:05,520 --> 00:00:11,370
past two so let's get started my name is

00:00:08,730 --> 00:00:13,650
Hans tokuda and i'll be talking to you

00:00:11,370 --> 00:00:18,270
this afternoon about support for all

00:00:13,650 --> 00:00:20,100
allwinner arm SOC s so first I want to

00:00:18,270 --> 00:00:22,710
quickly introduce which as I see all

00:00:20,100 --> 00:00:24,779
winners made then I want to talk about

00:00:22,710 --> 00:00:26,340
you boot what was supported was

00:00:24,779 --> 00:00:29,460
currently is supported about a year

00:00:26,340 --> 00:00:35,190
later the kernel and then the road maps

00:00:29,460 --> 00:00:38,370
of the two so our winners SOC switch

00:00:35,190 --> 00:00:40,920
which SOC is all winner make our winners

00:00:38,370 --> 00:00:43,590
started with a number of soc s which are

00:00:40,920 --> 00:00:46,020
not on this slide which were used in mp3

00:00:43,590 --> 00:00:47,789
players and mp4 players so small video

00:00:46,020 --> 00:00:49,200
players and they are not really

00:00:47,789 --> 00:00:51,210
interesting because you cannot really

00:00:49,200 --> 00:00:52,920
properly run linux on them and they're

00:00:51,210 --> 00:00:55,710
not armed t7 they're older and arm v7

00:00:52,920 --> 00:00:59,129
and i only care about our mt7 to be

00:00:55,710 --> 00:01:01,739
honest so all winners claim to fame was

00:00:59,129 --> 00:01:04,049
the a-10 the a-10 was one of the first

00:01:01,739 --> 00:01:06,900
chinese associés to be really really

00:01:04,049 --> 00:01:09,210
integrated allwinner actually when i

00:01:06,900 --> 00:01:10,770
introduced the a-10 they cost a large

00:01:09,210 --> 00:01:12,439
number of companies in the schengen

00:01:10,770 --> 00:01:15,390
districts in china to go bankrupt

00:01:12,439 --> 00:01:16,890
because before the a-10 there were a lot

00:01:15,390 --> 00:01:20,460
of different components on a motherboard

00:01:16,890 --> 00:01:23,549
of a tablet and the a-10 integrated

00:01:20,460 --> 00:01:25,619
almost everything inside the SOC so the

00:01:23,549 --> 00:01:29,430
model board of the tablet is pretty much

00:01:25,619 --> 00:01:31,140
empty beside the SOC which meant that a

00:01:29,430 --> 00:01:32,520
lot of company who were delivering some

00:01:31,140 --> 00:01:34,290
of the more small components which were

00:01:32,520 --> 00:01:36,060
integrated went bankrupt that was their

00:01:34,290 --> 00:01:39,509
claim to fame and it really helped to

00:01:36,060 --> 00:01:42,540
get tablet prices down to a whole new

00:01:39,509 --> 00:01:45,140
pricing level the a-10 was their first

00:01:42,540 --> 00:01:47,399
SOC it was a single core and had

00:01:45,140 --> 00:01:49,439
mali-400 graphics something which they

00:01:47,399 --> 00:01:52,740
stayed with for a large number of other

00:01:49,439 --> 00:01:54,780
socs1 of the other cool things which the

00:01:52,740 --> 00:01:57,719
a-10 has which unfortunately only the

00:01:54,780 --> 00:02:00,299
a20 also has no other SOC from allwinner

00:01:57,719 --> 00:02:02,820
has that is it has an integrated ahci

00:02:00,299 --> 00:02:06,060
controller so it has native SATA so you

00:02:02,820 --> 00:02:09,429
can actually attach disk or an SSD via a

00:02:06,060 --> 00:02:11,260
seder connection instead of via USB

00:02:09,429 --> 00:02:13,120
and that means that you actually get

00:02:11,260 --> 00:02:15,700
decent performance out of it because USB

00:02:13,120 --> 00:02:17,920
Mass Storage is a suboptimal protocol

00:02:15,700 --> 00:02:21,790
let's put it that way USB Mass Storage

00:02:17,920 --> 00:02:23,290
sucks when it comes to speed as I said

00:02:21,790 --> 00:02:25,450
it had lots of stuff integrated

00:02:23,290 --> 00:02:27,519
including the day and not only targeted

00:02:25,450 --> 00:02:28,959
tablets but also top set boxes which was

00:02:27,519 --> 00:02:30,670
where the Seder came in and also they

00:02:28,959 --> 00:02:35,739
had hundred megabit internet integrated

00:02:30,670 --> 00:02:37,209
and hdmi output after that for each SOC

00:02:35,739 --> 00:02:38,739
which they introduced to introduce the

00:02:37,209 --> 00:02:40,269
budget version where they cut off some

00:02:38,739 --> 00:02:42,549
pieces so later they did he ate your

00:02:40,269 --> 00:02:46,810
team which is basically the same chip

00:02:42,549 --> 00:02:48,129
but they remove the Seder and it has

00:02:46,810 --> 00:02:50,200
less pins so it has less memory

00:02:48,129 --> 00:02:52,180
bandwidth then they went to a dual core

00:02:50,200 --> 00:02:53,530
version and again a cheaper then they

00:02:52,180 --> 00:02:55,030
did a quad core version and with the

00:02:53,530 --> 00:02:57,400
quad core version they did a number of

00:02:55,030 --> 00:02:59,290
things which sucked the first thing

00:02:57,400 --> 00:03:01,510
which sucks about the 831 which is the

00:02:59,290 --> 00:03:04,269
first but core version is they used

00:03:01,510 --> 00:03:05,950
power VR graphics and with Molly

00:03:04,269 --> 00:03:09,519
graphics there are some efforts to

00:03:05,950 --> 00:03:10,870
reverse-engineer them and hopefully one

00:03:09,519 --> 00:03:13,780
day we'll actually get an open source

00:03:10,870 --> 00:03:15,400
driver with power VR graphics it's not

00:03:13,780 --> 00:03:17,530
very likely we'll ever see an open

00:03:15,400 --> 00:03:20,379
source driver another thing which they

00:03:17,530 --> 00:03:22,090
did was they removed theta it was their

00:03:20,379 --> 00:03:26,049
flagship product but it didn't have SATA

00:03:22,090 --> 00:03:28,659
and another thing which they messed up

00:03:26,049 --> 00:03:31,780
is the 831 does not boot from sdcard by

00:03:28,659 --> 00:03:33,609
default all the other allwinner SOC s

00:03:31,780 --> 00:03:35,769
have this nice feature that if you put

00:03:33,609 --> 00:03:37,989
in an SD card in the first SD card slot

00:03:35,769 --> 00:03:42,220
and almost all the devices have an SD

00:03:37,989 --> 00:03:43,959
card slot it will automatically boot

00:03:42,220 --> 00:03:45,939
from that SD card if there's the proper

00:03:43,959 --> 00:03:47,799
magic signature on there so you cannot

00:03:45,939 --> 00:03:49,479
break the device we don't need to root

00:03:47,799 --> 00:03:50,769
it you just put in an SD card with a

00:03:49,479 --> 00:03:53,470
magic signature and it will boot from

00:03:50,769 --> 00:03:57,189
your SD card it's brilliant except the

00:03:53,470 --> 00:03:58,689
831 the 80 83 is the budget version day

00:03:57,189 --> 00:04:01,269
they fix the number of things there they

00:03:58,689 --> 00:04:04,689
went back to Molly it puts from SD card

00:04:01,269 --> 00:04:07,359
again and their latest flagship product

00:04:04,689 --> 00:04:10,209
is the aat which is an octa-core it's a

00:04:07,359 --> 00:04:13,599
big little architecture again dated

00:04:10,209 --> 00:04:15,430
power fiar graphics I see I'm Tinka dust

00:04:13,599 --> 00:04:20,079
boot from SD cards by default I'm not

00:04:15,430 --> 00:04:22,580
sure and their latest budget product is

00:04:20,079 --> 00:04:24,650
the a83 which is a

00:04:22,580 --> 00:04:26,689
a seven-course which is a bit crazy if

00:04:24,650 --> 00:04:30,379
you ask me and again it has power VR

00:04:26,689 --> 00:04:33,379
graphics and the a83 will will soon know

00:04:30,379 --> 00:04:34,580
no more about it's still sort of very

00:04:33,379 --> 00:04:38,750
new so we don't know that much about

00:04:34,580 --> 00:04:40,699
this so you boot I initially gave this

00:04:38,750 --> 00:04:42,080
presentation at first M so I don't hope

00:04:40,699 --> 00:04:44,479
there's anyone in a room who sold the

00:04:42,080 --> 00:04:46,610
same presentation at fast them so i

00:04:44,479 --> 00:04:50,840
started at fast them with comparing it

00:04:46,610 --> 00:04:54,650
the first time a year before so fast m

00:04:50,840 --> 00:04:57,949
2014 there was no upstream liberal

00:04:54,650 --> 00:04:59,719
support for all 1s OCS at all there was

00:04:57,949 --> 00:05:02,060
some support in a fork but not in the

00:04:59,719 --> 00:05:05,060
main upstream repositories it did

00:05:02,060 --> 00:05:07,219
support he a 10 and a 20 which are very

00:05:05,060 --> 00:05:09,620
much alike it did not support any of the

00:05:07,219 --> 00:05:11,719
other sfcs it did not support video

00:05:09,620 --> 00:05:13,550
output so if you were to boot you boot

00:05:11,719 --> 00:05:14,990
on our tablets and would stop at you

00:05:13,550 --> 00:05:16,789
boot because you had an error in your

00:05:14,990 --> 00:05:19,430
conflict you would config or whatever it

00:05:16,789 --> 00:05:21,199
wouldn't show you anything it didn't

00:05:19,430 --> 00:05:24,259
support booting from USB didn't support

00:05:21,199 --> 00:05:25,909
booting from sada it was pretty poor in

00:05:24,259 --> 00:05:28,000
a year we did a lot of work we got

00:05:25,909 --> 00:05:32,690
effort we got the basic support upstream

00:05:28,000 --> 00:05:34,610
we added support for the a23 and 81 in

00:05:32,690 --> 00:05:36,520
my personal branch and i'll probably

00:05:34,610 --> 00:05:41,089
sell the pull request for that tomorrow

00:05:36,520 --> 00:05:43,520
because i just got the latest ex is a 33

00:05:41,089 --> 00:05:45,770
support haiti support is working

00:05:43,520 --> 00:05:48,800
progress and we've got something which

00:05:45,770 --> 00:05:52,190
gold is called psci working currently

00:05:48,800 --> 00:05:55,870
only on the a20 SOC as anyone here know

00:05:52,190 --> 00:06:00,440
why we would want to have psei working

00:05:55,870 --> 00:06:02,839
psci actually is sort of pc like it's

00:06:00,440 --> 00:06:04,490
like with a CPI you you keep your

00:06:02,839 --> 00:06:07,430
firmware active and you can call back

00:06:04,490 --> 00:06:10,310
into the firmware and it's necessary on

00:06:07,430 --> 00:06:13,550
arm to be able to start up your cpu

00:06:10,310 --> 00:06:15,889
cores in hyper visor mode so only a 20

00:06:13,550 --> 00:06:18,560
we can actually start the cpu cores in

00:06:15,889 --> 00:06:20,599
hyper visor mode and it means that you

00:06:18,560 --> 00:06:22,069
can actually run kvm on them so you can

00:06:20,599 --> 00:06:24,589
run hardware accelerated virtual

00:06:22,069 --> 00:06:28,669
machines on a thirty dollars mobile

00:06:24,589 --> 00:06:31,310
small board computer so if you want to

00:06:28,669 --> 00:06:32,690
run VMs you no longer need a pc of 3 400

00:06:31,310 --> 00:06:34,849
euros you can do it on a thirty dollar

00:06:32,690 --> 00:06:35,700
small board computer like the raspberry

00:06:34,849 --> 00:06:36,720
pi

00:06:35,700 --> 00:06:40,620
and you can run hardware-accelerated

00:06:36,720 --> 00:06:42,870
virtual machines on there so that one's

00:06:40,620 --> 00:06:44,760
also cool we got video output working we

00:06:42,870 --> 00:06:47,100
started with hdmi and then once we had

00:06:44,760 --> 00:06:48,840
test it was really quick to also add

00:06:47,100 --> 00:06:50,760
support for LCD screens and VGA output

00:06:48,840 --> 00:06:53,580
on boards which have a debt cetera I

00:06:50,760 --> 00:06:55,680
already set the DDA 10 is sort of a

00:06:53,580 --> 00:06:58,050
crazy design they integrated everything

00:06:55,680 --> 00:06:59,700
and even as vga digital analog

00:06:58,050 --> 00:07:01,320
converters in there so it just has a

00:06:59,700 --> 00:07:03,090
number of vga pins you can just hook up

00:07:01,320 --> 00:07:07,050
a vga connector if you want in your VGA

00:07:03,090 --> 00:07:09,750
output on your tablet or on your small

00:07:07,050 --> 00:07:12,540
board computer we got us be working both

00:07:09,750 --> 00:07:15,240
host mode and on-the-go mode and we have

00:07:12,540 --> 00:07:17,610
we can boot from sada booting from sada

00:07:15,240 --> 00:07:20,730
is a bit unfortunate because you

00:07:17,610 --> 00:07:22,950
bootcamp boot from sada but SOC itself

00:07:20,730 --> 00:07:25,080
cannot so you still need like a 512

00:07:22,950 --> 00:07:27,330
megabyte SD card just to put you boot on

00:07:25,080 --> 00:07:31,710
there and then everything else can be on

00:07:27,330 --> 00:07:34,140
sada so how do things look from the

00:07:31,710 --> 00:07:38,310
colonel side we actually already had

00:07:34,140 --> 00:07:40,350
some stuff upstream in the stem 2014 we

00:07:38,310 --> 00:07:42,960
basically you could boot the board and

00:07:40,350 --> 00:07:44,400
you could get a serial console and you

00:07:42,960 --> 00:07:45,510
could put a root filesystem on NFS

00:07:44,400 --> 00:07:49,530
because we had hung up megabit Ethernet

00:07:45,510 --> 00:07:52,320
working since then we've gained support

00:07:49,530 --> 00:07:54,750
for pretty much every other SOC from

00:07:52,320 --> 00:08:00,450
from allwinner one gigabit ethernet USB

00:07:54,750 --> 00:08:01,560
host mode sada infrared tablet keys so

00:08:00,450 --> 00:08:02,970
your volume buttons in your home

00:08:01,560 --> 00:08:07,920
hardware button cetera on tablets

00:08:02,970 --> 00:08:09,270
resistive touchscreens MMC or SD card so

00:08:07,920 --> 00:08:11,850
we can actually put a root filesystem

00:08:09,270 --> 00:08:15,000
somewhere because before that we only

00:08:11,850 --> 00:08:17,220
had a ram disk or NFS as simple FB

00:08:15,000 --> 00:08:19,020
simple FB is a mechanism where we take

00:08:17,220 --> 00:08:22,760
over the frame buffer as it's been set

00:08:19,020 --> 00:08:25,590
up by you boot so previous slide I said

00:08:22,760 --> 00:08:27,300
that a new boot we now have pretty much

00:08:25,590 --> 00:08:29,010
all the video outputs working and the

00:08:27,300 --> 00:08:30,180
crew law can just take it over we don't

00:08:29,010 --> 00:08:32,460
have mode setting yet you cannot change

00:08:30,180 --> 00:08:34,979
the mode but you at least you get you

00:08:32,460 --> 00:08:37,560
get a display which is pretty nice to

00:08:34,979 --> 00:08:41,580
have for display now what are the plans

00:08:37,560 --> 00:08:45,090
for renewables first let me tell you

00:08:41,580 --> 00:08:46,220
something about new SOC sport if you

00:08:45,090 --> 00:08:50,540
look at most

00:08:46,220 --> 00:08:53,029
sses they do not know how to talk to drm

00:08:50,540 --> 00:08:54,680
to talk to your external realm right

00:08:53,029 --> 00:08:56,300
your external RAM is all dynamic RAM and

00:08:54,680 --> 00:08:58,269
programming dynamic Ram needs a lot of

00:08:56,300 --> 00:09:01,100
timing parameters and stuff like that

00:08:58,269 --> 00:09:03,319
usually the SOC cannot do that out of

00:09:01,100 --> 00:09:05,569
the box so what it does it has a really

00:09:03,319 --> 00:09:07,250
small interval boot ROM which will first

00:09:05,569 --> 00:09:09,800
look for the magic signature on the SD

00:09:07,250 --> 00:09:12,470
card and then after the magic signature

00:09:09,800 --> 00:09:14,480
it will read 32 kilobytes of code no

00:09:12,470 --> 00:09:15,350
more you'll get 32 kilobytes of coats

00:09:14,480 --> 00:09:18,019
like you're working with a

00:09:15,350 --> 00:09:19,910
microcontroller those 32 kilobytes of

00:09:18,019 --> 00:09:22,550
code get copied to an internal SRAM

00:09:19,910 --> 00:09:26,000
because the SOC doesn't have drm working

00:09:22,550 --> 00:09:28,459
yet and aninha that 32 k of code you you

00:09:26,000 --> 00:09:30,230
get to set up drm but you cannot set up

00:09:28,459 --> 00:09:32,180
the ram you need to begin with setting

00:09:30,230 --> 00:09:33,800
up all the clocks all the PLL so that

00:09:32,180 --> 00:09:35,990
you actually have a clock to Clark your

00:09:33,800 --> 00:09:37,910
DRAM and then you need to set up your

00:09:35,990 --> 00:09:40,310
eyes chord C controller so you can talk

00:09:37,910 --> 00:09:42,740
to your power management IC which is a

00:09:40,310 --> 00:09:44,839
little separate IC which makes a lot of

00:09:42,740 --> 00:09:47,689
separate voltages it has a lot of dc-dc

00:09:44,839 --> 00:09:49,339
converters and el Dios and anyway you

00:09:47,689 --> 00:09:50,779
can talk to your power management I see

00:09:49,339 --> 00:09:52,339
you can actually power your derailment

00:09:50,779 --> 00:09:54,350
and when you have your divine power can

00:09:52,339 --> 00:09:58,129
you have your DM clocked then you can

00:09:54,350 --> 00:10:00,079
start to worry about actually activating

00:09:58,129 --> 00:10:01,670
the drm and then you have to dear i'm

00:10:00,079 --> 00:10:04,069
fully programmed and activate it and it

00:10:01,670 --> 00:10:06,620
works and you also don't have access to

00:10:04,069 --> 00:10:08,899
like all of a gig of ram instead of 32 k

00:10:06,620 --> 00:10:10,939
codes you need to load the real you good

00:10:08,899 --> 00:10:13,759
binary which usually is you would is

00:10:10,939 --> 00:10:18,500
small it's like 200-300 KF code but it's

00:10:13,759 --> 00:10:20,029
too big to fit in the initial phase to

00:10:18,500 --> 00:10:23,240
load the real you with binary you'll

00:10:20,029 --> 00:10:26,629
also need as d card support so the first

00:10:23,240 --> 00:10:28,939
step we call the SPL it's a school for

00:10:26,629 --> 00:10:31,279
secondary payload because the primary

00:10:28,939 --> 00:10:33,170
payload is the rum inside the SOC that's

00:10:31,279 --> 00:10:35,990
where the CPU starts executing in the

00:10:33,170 --> 00:10:38,059
SPL is the secondary payload and you

00:10:35,990 --> 00:10:42,559
would itself is the TPL the tertiary

00:10:38,059 --> 00:10:46,339
payload some SLC's even have a quarter a

00:10:42,559 --> 00:10:48,079
payload because they're the first SPL

00:10:46,339 --> 00:10:50,509
isn't powerful enough to do everything

00:10:48,079 --> 00:10:52,080
and it loads like another helper and

00:10:50,509 --> 00:10:53,970
then that loads

00:10:52,080 --> 00:10:56,400
really would but we only have the SPL

00:10:53,970 --> 00:10:58,950
and real you boot so the first thing

00:10:56,400 --> 00:11:00,840
what we actually do is all the initial

00:10:58,950 --> 00:11:03,110
setup that's the hardest part getting

00:11:00,840 --> 00:11:05,190
the clocks running getting the power up

00:11:03,110 --> 00:11:08,520
initializing the drm that's all pretty

00:11:05,190 --> 00:11:09,960
dark magic and its own undocumented so

00:11:08,520 --> 00:11:12,300
usually we start with using an all

00:11:09,960 --> 00:11:14,670
winter binary for that so we just use

00:11:12,300 --> 00:11:16,920
what all winter goals boot 0 good 0 is

00:11:14,670 --> 00:11:19,170
what you would cause the SPL secondary

00:11:16,920 --> 00:11:20,880
payload we start by using that and we

00:11:19,170 --> 00:11:22,950
just write our own new boot so that at

00:11:20,880 --> 00:11:24,840
least we have open source running and we

00:11:22,950 --> 00:11:28,080
can poke registers and see how the drm

00:11:24,840 --> 00:11:29,490
controller has been set up etc once we

00:11:28,080 --> 00:11:31,860
have that going we actually start

00:11:29,490 --> 00:11:33,780
writing the SPL and once we have the SPL

00:11:31,860 --> 00:11:36,150
going and the main you boot then we do

00:11:33,780 --> 00:11:37,830
all the nice to have stuff like internet

00:11:36,150 --> 00:11:39,960
support so you can put from a network

00:11:37,830 --> 00:11:45,360
directly from you about USB support

00:11:39,960 --> 00:11:47,160
video output support etc so about the

00:11:45,360 --> 00:11:50,190
roadmap I'll get back to that later when

00:11:47,160 --> 00:11:53,280
I talk about the 888 year's e3 support

00:11:50,190 --> 00:11:55,080
currently is finished pretty much as I

00:11:53,280 --> 00:11:56,490
said before I just got the latest x2 a

00:11:55,080 --> 00:11:58,860
few patches so i can send a pull request

00:11:56,490 --> 00:12:01,020
now and then it's done and it's it's

00:11:58,860 --> 00:12:06,000
it's complete 833 support includes video

00:12:01,020 --> 00:12:08,490
support USB support everything the AAT

00:12:06,000 --> 00:12:11,190
is a different story because the a 2033

00:12:08,490 --> 00:12:15,470
is sort of evolutionary step from the

00:12:11,190 --> 00:12:19,260
a23 the AAT is a completely new design

00:12:15,470 --> 00:12:21,030
step one is complete in my personal repo

00:12:19,260 --> 00:12:23,490
there you can build a new boot binary

00:12:21,030 --> 00:12:26,490
and you can use the boot 0 binary from

00:12:23,490 --> 00:12:29,370
allwinner the blob to load you boots and

00:12:26,490 --> 00:12:31,740
we have that running but the next step

00:12:29,370 --> 00:12:34,050
is very hard because they have to CPU

00:12:31,740 --> 00:12:35,490
clusters the a-15 cluster and the a7

00:12:34,050 --> 00:12:38,520
cluster and a boat of their own power

00:12:35,490 --> 00:12:41,010
management I see so instead of 1p make

00:12:38,520 --> 00:12:42,540
we have to pee mix i already have called

00:12:41,010 --> 00:12:44,250
to talk to both of them i can read their

00:12:42,540 --> 00:12:46,680
identification register and so that's

00:12:44,250 --> 00:12:51,690
working and i have no idea which power

00:12:46,680 --> 00:12:54,120
plate is hooked up to what which is

00:12:51,690 --> 00:12:56,220
tricky and the drm controller looks

00:12:54,120 --> 00:12:57,160
significantly different so or when I

00:12:56,220 --> 00:12:59,170
actually recently

00:12:57,160 --> 00:13:02,259
released some code for both these things

00:12:59,170 --> 00:13:04,509
so we should be getting somewhere but to

00:13:02,259 --> 00:13:06,480
be honest another problem is I'm not

00:13:04,509 --> 00:13:08,470
really that interested in the AAT the

00:13:06,480 --> 00:13:10,269
interesting thing is that with all

00:13:08,470 --> 00:13:13,839
winner I can buy a tablet like this one

00:13:10,269 --> 00:13:15,759
for thirty-five dollars aat designs

00:13:13,839 --> 00:13:17,709
start at one hundred and twenty dollars

00:13:15,759 --> 00:13:21,699
for a set-top box so you don't get a

00:13:17,709 --> 00:13:23,170
screen or anything 883 support as i said

00:13:21,699 --> 00:13:24,759
before allwinner is doing a cheaper

00:13:23,170 --> 00:13:29,230
version of the AAT like they did with

00:13:24,759 --> 00:13:30,279
all their previous a series the 883 all

00:13:29,230 --> 00:13:32,230
weather has published document

00:13:30,279 --> 00:13:34,209
documentation and source for us so we

00:13:32,230 --> 00:13:35,500
have data sheets we have source code for

00:13:34,209 --> 00:13:38,769
the bootloader we have source code for

00:13:35,500 --> 00:13:44,139
their own android kernel which is based

00:13:38,769 --> 00:13:45,790
on linux 3.4 or ancient and they are

00:13:44,139 --> 00:13:47,769
shipping some hardware samples to pee

00:13:45,790 --> 00:13:50,970
community members in the all winner open

00:13:47,769 --> 00:13:53,740
source community the upstream community

00:13:50,970 --> 00:13:56,439
so from the colonel side of things what

00:13:53,740 --> 00:13:58,689
are we working on in world of zero we

00:13:56,439 --> 00:14:00,399
merged a lot of stuff we merge cpu

00:13:58,689 --> 00:14:02,740
frequency so we can actually not run the

00:14:00,399 --> 00:14:03,759
cpu with one gigahertz which is nice if

00:14:02,740 --> 00:14:06,089
you have a battery that you're not

00:14:03,759 --> 00:14:09,339
constantly running out at one gigahertz

00:14:06,089 --> 00:14:11,740
as i said before the a-10 allwinner

00:14:09,339 --> 00:14:12,939
integrated everything the internet

00:14:11,740 --> 00:14:15,880
integrated everything and the kitchen

00:14:12,939 --> 00:14:17,410
sink the thing has a canvas controller

00:14:15,880 --> 00:14:19,480
inside because they could put it in

00:14:17,410 --> 00:14:21,459
there and maybe someone ever would want

00:14:19,480 --> 00:14:24,220
to canvas controller in SOC the thing

00:14:21,459 --> 00:14:29,199
also has actual hardware ps2 controller

00:14:24,220 --> 00:14:30,759
so in an a I 8042 controller in there so

00:14:29,199 --> 00:14:32,529
will someone actually wrote a driver for

00:14:30,759 --> 00:14:34,509
that that's merged now so you can hook

00:14:32,529 --> 00:14:37,209
up appears to pee boards to your small

00:14:34,509 --> 00:14:39,819
board computer if you want to and it's

00:14:37,209 --> 00:14:41,769
supported a number of minor other things

00:14:39,819 --> 00:14:43,689
this one is important we got MMC support

00:14:41,769 --> 00:14:45,519
for the AAT merge so you can have

00:14:43,689 --> 00:14:47,230
actually pretty much boudin upstream

00:14:45,519 --> 00:14:49,480
disturb on your aad as long as you use

00:14:47,230 --> 00:14:53,110
the boot 0 binary from from allwinner

00:14:49,480 --> 00:14:56,129
and we got the power management IC

00:14:53,110 --> 00:15:01,959
driver for the XP 221 merged which is

00:14:56,129 --> 00:15:04,620
used in the a23 and 833 this has planned

00:15:01,959 --> 00:15:06,880
for four plus two and over here we have

00:15:04,620 --> 00:15:09,160
four dot 0

00:15:06,880 --> 00:15:11,590
this is a not so funny story at least I

00:15:09,160 --> 00:15:15,940
don't find it funny we had a lot of

00:15:11,590 --> 00:15:18,970
stuff queued up for 4.1 but the arm

00:15:15,940 --> 00:15:23,170
subsystem maintainer missed the merge

00:15:18,970 --> 00:15:27,670
window so now we have a lot of stuff

00:15:23,170 --> 00:15:30,040
queued up for 4.2 specifically we have

00:15:27,670 --> 00:15:31,450
for the a23 we have SMP support

00:15:30,040 --> 00:15:34,360
currently we can only use one of the two

00:15:31,450 --> 00:15:37,300
cores in the colonel this will bring up

00:15:34,360 --> 00:15:40,210
the second core for the 831 we have

00:15:37,300 --> 00:15:41,800
power management support so for support

00:15:40,210 --> 00:15:44,140
for external p mix so we can actually do

00:15:41,800 --> 00:15:46,300
change the cpu voltage which in

00:15:44,140 --> 00:15:49,780
combination with cpu frequency gives off

00:15:46,300 --> 00:15:51,970
a lot of power saving and for the AAT we

00:15:49,780 --> 00:15:56,110
have support for USB controllers USB

00:15:51,970 --> 00:15:57,760
host real soon now we hope to merge USB

00:15:56,110 --> 00:16:00,280
on-the-go support it's actually already

00:15:57,760 --> 00:16:01,660
working i'm using that to use this

00:16:00,280 --> 00:16:04,690
keyboard with the tablet because most

00:16:01,660 --> 00:16:06,790
tablets only have an OTG port the SOC

00:16:04,690 --> 00:16:09,240
has real USB host ports but usually

00:16:06,790 --> 00:16:12,160
they're not routed to the outside and

00:16:09,240 --> 00:16:17,230
audio analog audio out which is used

00:16:12,160 --> 00:16:19,150
usually useful for top set boxes and

00:16:17,230 --> 00:16:20,820
work in progress then support and then

00:16:19,150 --> 00:16:23,140
support sort of this in the freezer

00:16:20,820 --> 00:16:24,610
someone did an initial patch hat and no

00:16:23,140 --> 00:16:26,260
one is really working on it someone

00:16:24,610 --> 00:16:28,450
needs to pick that up and hardware

00:16:26,260 --> 00:16:31,060
crypto engine support is actively being

00:16:28,450 --> 00:16:32,560
worked on because the a 20 and later

00:16:31,060 --> 00:16:34,390
have fun hardware crypto engine which

00:16:32,560 --> 00:16:36,400
can do a number of crypto things like

00:16:34,390 --> 00:16:42,520
deaths in hardware and we're adding

00:16:36,400 --> 00:16:44,440
support for that a demo ok so i had a

00:16:42,520 --> 00:16:47,650
subtitle for this talk don't know if

00:16:44,440 --> 00:16:52,050
anyone saw it a 40 US dollar tablet so

00:16:47,650 --> 00:16:52,050
let me see if i can keep the promise

00:16:52,500 --> 00:16:59,110
this is the first one which i have to do

00:16:55,240 --> 00:17:02,110
to demo today this one is 60 thirty-six

00:16:59,110 --> 00:17:04,420
dollars including shipping to europe and

00:17:02,110 --> 00:17:07,270
that is this one is it's it's a

00:17:04,420 --> 00:17:11,819
dual-core it's the a23 whole gig of ram

00:17:07,270 --> 00:17:11,819
and it shoot

00:17:11,860 --> 00:17:19,780
training effect boot linux this is you

00:17:16,510 --> 00:17:22,390
boot a new boot you can actually hook up

00:17:19,780 --> 00:17:24,490
a keyboard because the on-the-go

00:17:22,390 --> 00:17:26,079
controller works in you both now we're

00:17:24,490 --> 00:17:27,670
in the colonel we cannot hook up a

00:17:26,079 --> 00:17:30,790
keyboard there yet don't have ot G

00:17:27,670 --> 00:17:32,559
support working yet so this will boot

00:17:30,790 --> 00:17:34,000
all the way to a graphical logon screen

00:17:32,559 --> 00:17:35,320
and then we cannot do anything because I

00:17:34,000 --> 00:17:38,470
don't have touchscreen support yet i

00:17:35,320 --> 00:17:40,870
don't have USB support yet selves but

00:17:38,470 --> 00:17:42,520
the basic works the display works by the

00:17:40,870 --> 00:17:46,870
next tablet also still under the

00:17:42,520 --> 00:17:48,220
promised forty dollars is this one this

00:17:46,870 --> 00:17:49,960
one is actually really interesting i

00:17:48,220 --> 00:17:55,780
really like this one for a number of

00:17:49,960 --> 00:17:58,179
reasons one of the reasons is this one

00:17:55,780 --> 00:18:00,070
was intended as an ereader i think and

00:17:58,179 --> 00:18:02,799
it has a pretty good screen it as an IPS

00:18:00,070 --> 00:18:03,970
screen actually and a weird orientation

00:18:02,799 --> 00:18:08,890
because it was intended as an ereader

00:18:03,970 --> 00:18:10,830
but this one actually has everything

00:18:08,890 --> 00:18:13,030
working pretty much except for the GPU

00:18:10,830 --> 00:18:14,470
even the internal storage because they

00:18:13,030 --> 00:18:16,360
didn't use names they didn't use roll

00:18:14,470 --> 00:18:18,820
meant it as an emm seen embed at MMC

00:18:16,360 --> 00:18:20,470
inside which needed a little prodding

00:18:18,820 --> 00:18:23,679
but that works now too you must be a

00:18:20,470 --> 00:18:26,620
Wi-Fi works USB on-the-go works Bowden

00:18:23,679 --> 00:18:28,630
host and application mode so i can also

00:18:26,620 --> 00:18:31,440
hook it up to my laptop and it will show

00:18:28,630 --> 00:18:34,840
up as a serial console over USB

00:18:31,440 --> 00:18:36,429
everything just works except for GPU so

00:18:34,840 --> 00:18:38,710
if you want a tablet to play with

00:18:36,429 --> 00:18:44,020
regular linux on you can just buy this

00:18:38,710 --> 00:18:47,559
one ute the rito p66 and it's thirty-six

00:18:44,020 --> 00:18:49,870
dollars you get a IPS screen alpha gig

00:18:47,559 --> 00:18:52,960
of ram single cpu core the other one was

00:18:49,870 --> 00:18:54,820
a dual-core but so yeah you lose the

00:18:52,960 --> 00:18:56,559
core but you gain IPS and you gain a

00:18:54,820 --> 00:18:57,850
work in touch screen which is supported

00:18:56,559 --> 00:19:01,510
in the upstream kernel and things like

00:18:57,850 --> 00:19:03,490
that so I have one more which doesn't

00:19:01,510 --> 00:19:05,460
completely fulfill my promise of being

00:19:03,490 --> 00:19:07,690
less than forty forty dollars or less

00:19:05,460 --> 00:19:10,000
it's a shocking forty seven dollars

00:19:07,690 --> 00:19:11,950
which is this one this is just a big

00:19:10,000 --> 00:19:14,169
brother of this one this one is complete

00:19:11,950 --> 00:19:17,799
booting out so this is a dual core

00:19:14,169 --> 00:19:19,270
health kick of RAM two cores and this is

00:19:17,799 --> 00:19:22,559
the quad core version and you get a

00:19:19,270 --> 00:19:22,559
slightly higher resolution screen

00:19:23,120 --> 00:19:32,840
and yeah it's about ten dollars more

00:19:25,970 --> 00:19:34,460
expensive so if you want to play with

00:19:32,840 --> 00:19:36,440
these later you can come to the front

00:19:34,460 --> 00:19:43,309
after the end or are there any questions

00:19:36,440 --> 00:19:45,320
you guys need to fill 10 minutes with

00:19:43,309 --> 00:19:52,370
questions otherwise I'm not sticking to

00:19:45,320 --> 00:20:06,950
the time schedule service no questions

00:19:52,370 --> 00:20:14,150
at all I don't completely understand the

00:20:06,950 --> 00:20:17,929
question to you ah it's it's for

00:20:14,150 --> 00:20:19,580
actually talking to the net the the Nant

00:20:17,929 --> 00:20:21,950
is usually used in combination with a

00:20:19,580 --> 00:20:25,220
flash controller like in a USB stick or

00:20:21,950 --> 00:20:28,309
in an SSD but you can also have Roman

00:20:25,220 --> 00:20:30,050
Texas these SOC s have their own names

00:20:28,309 --> 00:20:32,300
controller built into the SOC and they

00:20:30,050 --> 00:20:34,550
use Rome and chips so you need to do a

00:20:32,300 --> 00:20:35,960
lot of things like ECC and randomizing

00:20:34,550 --> 00:20:38,510
and all those kind of stuff which you

00:20:35,960 --> 00:20:40,760
need to properly deal with nance in in

00:20:38,510 --> 00:20:42,170
the software basically in combination

00:20:40,760 --> 00:20:43,550
with some hardware which helps you to do

00:20:42,170 --> 00:20:45,559
that there's an enfant further in there

00:20:43,550 --> 00:20:47,510
so you just needed to be able to access

00:20:45,559 --> 00:20:49,220
the net at all that way you would get

00:20:47,510 --> 00:20:53,080
this one has eight gigs of internal

00:20:49,220 --> 00:20:55,400
flash this one also eight or maybe 6 16

00:20:53,080 --> 00:20:57,770
if you want to use that internal flash

00:20:55,400 --> 00:20:59,210
instead of an MMC card in SD card then

00:20:57,770 --> 00:21:02,090
you need to have support for the next

00:20:59,210 --> 00:21:03,350
controller and then you can just use it

00:21:02,090 --> 00:21:08,030
for a final system it's just a block

00:21:03,350 --> 00:21:09,550
device basically but normally the name

00:21:08,030 --> 00:21:12,230
chips are not really nice to work with

00:21:09,550 --> 00:21:13,880
people are used as a USB stick or a

00:21:12,230 --> 00:21:15,620
necessity just works but there's a lot

00:21:13,880 --> 00:21:16,970
of stuff which you need to do on top

00:21:15,620 --> 00:21:19,370
with we're leveling and things like that

00:21:16,970 --> 00:21:21,170
and normally that's all hidden away and

00:21:19,370 --> 00:21:23,090
with these kind of cheap devices you

00:21:21,170 --> 00:21:26,210
have roll access to the net so you need

00:21:23,090 --> 00:21:27,590
to take care of that yourself and that

00:21:26,210 --> 00:21:29,090
needs to be supported in a colonel

00:21:27,590 --> 00:21:31,360
before we can actually use the name

00:21:29,090 --> 00:21:31,360
chips

00:21:38,830 --> 00:21:41,830
yes

00:21:43,470 --> 00:21:48,850
how to start with these devices it's

00:21:46,480 --> 00:21:52,690
actually pretty easy allwinner has an

00:21:48,850 --> 00:21:54,809
sdk and they don't want that every

00:21:52,690 --> 00:21:57,309
vendor needs to compile their own kernel

00:21:54,809 --> 00:21:59,140
so they'd a ship with pre-compiled

00:21:57,309 --> 00:22:01,659
colonel pre-compiled android images and

00:21:59,140 --> 00:22:05,140
they have a little any file format

00:22:01,659 --> 00:22:07,630
called fe x FX files and there actually

00:22:05,140 --> 00:22:10,179
is effects file inside the device if you

00:22:07,630 --> 00:22:11,740
buy it so you can take that foul and you

00:22:10,179 --> 00:22:14,590
can find the deviant parameters in which

00:22:11,740 --> 00:22:16,450
gpios are using for what etcetera and

00:22:14,590 --> 00:22:17,950
there's a there's a whole weekly

00:22:16,450 --> 00:22:19,630
explaining you how to bring up a new

00:22:17,950 --> 00:22:26,169
device and most devices are already

00:22:19,630 --> 00:22:29,140
supported it is over here linux and sedo

00:22:26,169 --> 00:22:31,270
torque is where the community the owner

00:22:29,140 --> 00:22:32,950
community has their own website and of

00:22:31,270 --> 00:22:34,600
course i'm not sure if i'm going to get

00:22:32,950 --> 00:22:35,919
anything i already loaded all these at

00:22:34,600 --> 00:22:38,200
home because i knew the internet

00:22:35,919 --> 00:22:40,779
wouldn't work that well here but that's

00:22:38,200 --> 00:22:46,120
the URL maybe at one point will also get

00:22:40,779 --> 00:22:47,919
a web page but it's really easy

00:22:46,120 --> 00:22:49,330
basically just just buy a device and you

00:22:47,919 --> 00:22:51,039
can start playing with it and you need

00:22:49,330 --> 00:22:52,510
to build your own new boot and a device

00:22:51,039 --> 00:22:54,370
free file for the colonel you know what

00:22:52,510 --> 00:22:56,529
that is but a lot there's also a linux

00:22:54,370 --> 00:22:58,480
on cedar dork IRC channel where people

00:22:56,529 --> 00:23:00,399
can help you so it's not that hard to

00:22:58,480 --> 00:23:03,039
get started really there's an supportive

00:23:00,399 --> 00:23:08,380
community to help you out are there any

00:23:03,039 --> 00:23:10,270
more questions well none thanks for your

00:23:08,380 --> 00:23:12,850
time before you go let me pluck one

00:23:10,270 --> 00:23:14,289
thing i'm not sure if there is anything

00:23:12,850 --> 00:23:16,179
planned from the conference themselves

00:23:14,289 --> 00:23:18,340
it's afternoon but i noticed that the

00:23:16,179 --> 00:23:21,640
scheduled stops at for the official

00:23:18,340 --> 00:23:24,760
schedule nearby as in 10 minutes walking

00:23:21,640 --> 00:23:27,220
from here about 200 meters in i have no

00:23:24,760 --> 00:23:29,110
clue i think that direction if I have my

00:23:27,220 --> 00:23:30,520
orientation correct there is a the local

00:23:29,110 --> 00:23:32,080
hackerspace the hackerspace from the hey

00:23:30,520 --> 00:23:33,640
called ref space it's a really nice

00:23:32,080 --> 00:23:35,200
place and there will be people there

00:23:33,640 --> 00:23:39,100
tonight to welcome you if you feel like

00:23:35,200 --> 00:23:40,870
visiting a local hacker space and yeah

00:23:39,100 --> 00:23:43,029
we'll have food and drinks although well

00:23:40,870 --> 00:23:44,590
we can arrange food we can order pizza

00:23:43,029 --> 00:23:49,059
or something if people want to stay for

00:23:44,590 --> 00:23:50,880
dinner and this is where it is so we are

00:23:49,059 --> 00:23:56,260
here right now

00:23:50,880 --> 00:23:58,600
water this is the highway and a railroad

00:23:56,260 --> 00:24:00,730
track and then it's over here so it's

00:23:58,600 --> 00:24:02,560
really close by and i'll be going there

00:24:00,730 --> 00:24:08,680
myself after my next dog so you can also

00:24:02,560 --> 00:24:10,450
walk with me if you want to visit it did

00:24:08,680 --> 00:24:15,670
you were curious what's there's not that

00:24:10,450 --> 00:24:17,470
much to see there but i just wanted to

00:24:15,670 --> 00:24:19,240
show that there is a wiki where it has

00:24:17,470 --> 00:24:28,330
lots of information for people who want

00:24:19,240 --> 00:24:29,710
to start running allwinner devices so if

00:24:28,330 --> 00:24:32,040
there are no more questions and thanks

00:24:29,710 --> 00:24:32,040

YouTube URL: https://www.youtube.com/watch?v=EAYa095r5tE


