Title: TNTNet - Web dynamite | openSUSE Conference 2015
Publication date: 2015-05-12
Playlist: openSUSE Conference 2015
Description: 
	Web development is nowadays done in modern cool and hyped languages like RoR or Node.js. But what if you are old school programmer who doesn't need to be trendy? What if you don't try every new language out there but stick to the classics you are good at? Yes, you can do that and do web applications at the same time with ease. There is C++ web development framework that you can use to develop a web! And it's way cooler than RoR. All your application can fit in one shared library loaded by server. But be aware, with great power comes great responsibility - it's easy to crash the application by not using your memory correctly ;-)

Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Follow us on Google+ ► https://www.plus.google.com/openSUSE
Captions: 
	00:00:00,709 --> 00:00:10,200
go okay hi everybody my name is Miko

00:00:06,270 --> 00:00:15,929
shitski and I'm here to present to today

00:00:10,200 --> 00:00:19,439
about the empty net let's start with

00:00:15,929 --> 00:00:26,460
simple question have you ever done any

00:00:19,439 --> 00:00:33,059
web development anyway okay and who of

00:00:26,460 --> 00:00:35,880
you is it's which is there anybody whose

00:00:33,059 --> 00:00:40,860
favorite language is ceaseless eat pass

00:00:35,880 --> 00:00:43,440
pass okay there is an overlap that's

00:00:40,860 --> 00:00:47,219
great that's what I'm going to talk

00:00:43,440 --> 00:00:49,649
about so if you are writing some web

00:00:47,219 --> 00:00:53,280
service there are few obvious choices of

00:00:49,649 --> 00:00:56,850
the languages the most traditional one

00:00:53,280 --> 00:01:02,070
is PHP everybody claims that they know

00:00:56,850 --> 00:01:05,070
PHP and they can write it and quite some

00:01:02,070 --> 00:01:07,549
people actually do write it and quite

00:01:05,070 --> 00:01:13,500
some of them don't know how to write it

00:01:07,549 --> 00:01:16,200
also write it and there is a syntax that

00:01:13,500 --> 00:01:20,549
is similar to plenty of other languages

00:01:16,200 --> 00:01:22,920
there is you can there are actual

00:01:20,549 --> 00:01:26,330
multiple variants of syntax that you can

00:01:22,920 --> 00:01:31,200
try and it's been there a long time

00:01:26,330 --> 00:01:34,400
everybody knows it but I don't think

00:01:31,200 --> 00:01:37,619
that that many people I sure like it

00:01:34,400 --> 00:01:41,549
everybody just use it because that's the

00:01:37,619 --> 00:01:45,360
choice for the web development then one

00:01:41,549 --> 00:01:48,229
of the famous things that yeah I see her

00:01:45,360 --> 00:01:48,229
approaching

00:01:48,369 --> 00:01:54,969
there's this cool thing called Ruby on

00:01:51,130 --> 00:01:57,670
Rails which used to be really cool a few

00:01:54,969 --> 00:02:03,609
years ago and some people are still

00:01:57,670 --> 00:02:09,509
using it but I'm I'm already too old to

00:02:03,609 --> 00:02:12,700
learn such a new if the language so and

00:02:09,509 --> 00:02:16,180
the other part about Ruby on Rails is

00:02:12,700 --> 00:02:18,129
thanks to it it's easy to start but if

00:02:16,180 --> 00:02:22,799
you don't know how to then you get

00:02:18,129 --> 00:02:25,690
really messed up in maintaining it and

00:02:22,799 --> 00:02:28,510
thanks to that thanks to the fact that

00:02:25,690 --> 00:02:31,150
it's so easy to start quite some people

00:02:28,510 --> 00:02:34,000
actually instead of maintaining it start

00:02:31,150 --> 00:02:37,450
from scratch again because it's much

00:02:34,000 --> 00:02:42,280
easier than to maintain it and the new

00:02:37,450 --> 00:02:46,269
cookie in town is nope Jas and I didn't

00:02:42,280 --> 00:02:49,510
even try to learn that one but what from

00:02:46,269 --> 00:02:54,280
what I know it's JavaScript and I never

00:02:49,510 --> 00:02:56,920
liked JavaScript so yeah those are the

00:02:54,280 --> 00:02:59,859
obvious choices that you have if you are

00:02:56,920 --> 00:03:03,959
doing web development and what about

00:02:59,859 --> 00:03:08,829
guys like me that would start with C C++

00:03:03,959 --> 00:03:13,630
there is there some hope for us yeah

00:03:08,829 --> 00:03:17,590
there is it's got the empty net and it's

00:03:13,630 --> 00:03:19,540
web development framework it has all the

00:03:17,590 --> 00:03:22,769
classic templating systems that you will

00:03:19,540 --> 00:03:28,450
find in other web development frameworks

00:03:22,769 --> 00:03:32,230
it has routing map similar to what rails

00:03:28,450 --> 00:03:37,540
dance and it uses C++ as a programming

00:03:32,230 --> 00:03:41,470
language so you can use all the

00:03:37,540 --> 00:03:44,799
libraries that you have in C you can you

00:03:41,470 --> 00:03:48,609
can use them directly you can use alt

00:03:44,799 --> 00:03:51,519
code that you have written in C C++ have

00:03:48,609 --> 00:03:54,579
it it has a disadvantage that it has to

00:03:51,519 --> 00:03:57,280
be pre-compiled so you have to compile

00:03:54,579 --> 00:04:00,790
your web application then you will get

00:03:57,280 --> 00:04:04,390
some shared library then you

00:04:00,790 --> 00:04:07,810
gets to a server and you've got the

00:04:04,390 --> 00:04:10,900
other application running and thanks to

00:04:07,810 --> 00:04:17,370
the completion it's also supposed to be

00:04:10,900 --> 00:04:19,959
much faster than the other alternative

00:04:17,370 --> 00:04:21,160
when I spoke with one of the guys that

00:04:19,959 --> 00:04:23,260
are working on it

00:04:21,160 --> 00:04:28,030
he claimed that it's even faster than

00:04:23,260 --> 00:04:30,250
static web pages that yeah if you

00:04:28,030 --> 00:04:32,229
compile all the static assets into the

00:04:30,250 --> 00:04:33,479
shared library and then just put it

00:04:32,229 --> 00:04:39,070
there

00:04:33,479 --> 00:04:42,669
and you can make the output I do the

00:04:39,070 --> 00:04:45,400
shared library that you can link to your

00:04:42,669 --> 00:04:48,130
web server it will load it and it will

00:04:45,400 --> 00:04:51,250
start serving it or you can write simple

00:04:48,130 --> 00:04:53,889
wrap around it and create executable

00:04:51,250 --> 00:04:58,990
that you can run and when you run it it

00:04:53,889 --> 00:05:03,060
will start a web server you can access

00:04:58,990 --> 00:05:07,960
it without configuring Apache or

00:05:03,060 --> 00:05:11,500
whatever so let's take a look at the

00:05:07,960 --> 00:05:14,320
templating system that it uses it's as

00:05:11,500 --> 00:05:18,639
in the other cases is basically just

00:05:14,320 --> 00:05:21,699
HTML page and it has few special tags

00:05:18,639 --> 00:05:30,250
that you can use to inject code and

00:05:21,699 --> 00:05:38,940
logic response are free these are used

00:05:30,250 --> 00:05:43,419
to use input so as you know in C C++

00:05:38,940 --> 00:05:48,159
so these belong to pre section then you

00:05:43,419 --> 00:05:51,060
can put in some code that does some low

00:05:48,159 --> 00:05:53,770
G repair that fetch them from database

00:05:51,060 --> 00:05:58,560
do some modifications and stuff like

00:05:53,770 --> 00:06:00,330
that that that you should put in CPP

00:05:58,560 --> 00:06:04,949
tags

00:06:00,330 --> 00:06:09,539
it also passes arguments that you get

00:06:04,949 --> 00:06:12,270
either via get or post so you need you

00:06:09,539 --> 00:06:17,900
can specify in which variables you want

00:06:12,270 --> 00:06:24,180
to get those arguments you can get some

00:06:17,900 --> 00:06:28,409
variables that are used guitar session

00:06:24,180 --> 00:06:32,659
viable so can easily use session and as

00:06:28,409 --> 00:06:36,449
you probably know from stuff like rail

00:06:32,659 --> 00:06:39,900
there's this nice tag that will output

00:06:36,449 --> 00:06:44,190
the contents of the variable and put it

00:06:39,900 --> 00:06:49,099
directly into the rendered template and

00:06:44,190 --> 00:06:53,190
it will escape all the dangerous

00:06:49,099 --> 00:06:56,840
characters and there is also option to

00:06:53,190 --> 00:06:56,840
do this conditional

00:06:58,460 --> 00:07:02,600
I was speaking about variables there's

00:07:01,009 --> 00:07:07,849
plenty of variables that you can have

00:07:02,600 --> 00:07:11,720
how these variables can have different

00:07:07,849 --> 00:07:15,020
visibility they can be visible for just

00:07:11,720 --> 00:07:20,509
a component of the web page or they can

00:07:15,020 --> 00:07:24,289
be visible globally or just in inside

00:07:20,509 --> 00:07:27,580
the page and you can also specify how

00:07:24,289 --> 00:07:31,030
long do you among these variables to

00:07:27,580 --> 00:07:34,280
live if you want to have him have them

00:07:31,030 --> 00:07:36,860
created for every request and at the end

00:07:34,280 --> 00:07:41,539
of the request destroyed or if you want

00:07:36,860 --> 00:07:48,440
to have them pass right or globally by a

00:07:41,539 --> 00:07:51,470
whole application so simple example this

00:07:48,440 --> 00:07:56,169
is actual code of applicate of simple

00:07:51,470 --> 00:07:59,419
hello world application as you can see

00:07:56,169 --> 00:08:03,169
we've got the one argument that we can

00:07:59,419 --> 00:08:06,530
get either vial get or post and it's

00:08:03,169 --> 00:08:12,130
called name by default we don't have to

00:08:06,530 --> 00:08:14,990
specify types and default type is string

00:08:12,130 --> 00:08:18,349
you can specify for example int or

00:08:14,990 --> 00:08:20,780
something else and if you do that then

00:08:18,349 --> 00:08:23,750
the web framework will try to convert

00:08:20,780 --> 00:08:27,409
the string to this type and put it in

00:08:23,750 --> 00:08:32,750
and if it doesn't succeed it it will

00:08:27,409 --> 00:08:36,079
raise an exception and in general they

00:08:32,750 --> 00:08:39,200
are working quite quite frequently with

00:08:36,079 --> 00:08:41,270
exceptions and if you don't handle these

00:08:39,200 --> 00:08:42,200
exceptions and they will propagate back

00:08:41,270 --> 00:08:45,649
to the web server

00:08:42,200 --> 00:08:50,709
then you will get some error code on the

00:08:45,649 --> 00:08:50,709
web server some file or something

00:08:50,820 --> 00:09:02,700
then we have standard HTML and if it is

00:08:58,890 --> 00:09:06,900
non empty I will put there the value of

00:09:02,700 --> 00:09:09,720
the argument and that's pretty much

00:09:06,900 --> 00:09:12,230
everything there is down here except

00:09:09,720 --> 00:09:12,230
comment

00:09:15,680 --> 00:09:21,200
and if you want to make send their own

00:09:18,830 --> 00:09:23,330
application that you can fire up and it

00:09:21,200 --> 00:09:27,860
will served a web server this is the

00:09:23,330 --> 00:09:31,150
code that you need to write as you see

00:09:27,860 --> 00:09:34,010
it's catching all the exceptions and

00:09:31,150 --> 00:09:41,540
something like four lines and you get

00:09:34,010 --> 00:09:49,130
the red server but in this case it's X

00:09:41,540 --> 00:09:53,060
using manual mapping if we use provided

00:09:49,130 --> 00:09:58,010
that server it's using XML where are all

00:09:53,060 --> 00:10:04,310
the routes written and here is an

00:09:58,010 --> 00:10:09,700
example of that and nothing works that

00:10:04,310 --> 00:10:14,690
like that that it will try whether this

00:10:09,700 --> 00:10:20,480
ruse match with the request incoming and

00:10:14,690 --> 00:10:22,970
if it does then it will go to it will

00:10:20,480 --> 00:10:27,470
try to let it handles by this component

00:10:22,970 --> 00:10:31,850
this is actually the web page and this

00:10:27,470 --> 00:10:38,070
is shirt library so you can mix multiple

00:10:31,850 --> 00:10:44,640
web applications in one

00:10:38,070 --> 00:10:46,350
and then for example here I do some

00:10:44,640 --> 00:10:51,540
verification that the user is

00:10:46,350 --> 00:10:56,640
authenticated and I do it only for both

00:10:51,540 --> 00:10:59,310
put and delete method and the nice part

00:10:56,640 --> 00:11:01,860
about this is that you can at your

00:10:59,310 --> 00:11:04,260
component you can say that you did

00:11:01,860 --> 00:11:05,940
everything that you want and you don't

00:11:04,260 --> 00:11:10,920
want to process the sequester anymore

00:11:05,940 --> 00:11:13,380
but it's not processed yet so like the

00:11:10,920 --> 00:11:17,100
request will go to the out wavy

00:11:13,380 --> 00:11:19,350
component and at the end I will say that

00:11:17,100 --> 00:11:22,890
I haven't processed it so it will

00:11:19,350 --> 00:11:27,120
continue going down and I just did what

00:11:22,890 --> 00:11:33,560
I needed to like verifying the

00:11:27,120 --> 00:11:33,560
identification or setting up mimetype

00:11:34,670 --> 00:11:48,030
another part of this the empty net

00:11:38,460 --> 00:11:50,460
ecosystem is library called TMT dB it's

00:11:48,030 --> 00:11:53,880
a database abstraction library and it

00:11:50,460 --> 00:11:56,190
has plug-in infrastructure and you can

00:11:53,880 --> 00:11:59,400
write one curve and then you can

00:11:56,190 --> 00:12:04,800
interact with SQLite my skew outpost

00:11:59,400 --> 00:12:09,390
grass or even Oracle database everything

00:12:04,800 --> 00:12:14,130
is same all you need to do is change the

00:12:09,390 --> 00:12:18,650
connect swing it has also some very nice

00:12:14,130 --> 00:12:22,920
features like gift prepared statement or

00:12:18,650 --> 00:12:25,380
connection pool that you can use so you

00:12:22,920 --> 00:12:27,330
don't have to do it by yourself no I

00:12:25,380 --> 00:12:32,490
very will provide you with connection

00:12:27,330 --> 00:12:37,230
pool it has conversion functions for all

00:12:32,490 --> 00:12:40,680
the basic types so you can get int and

00:12:37,230 --> 00:12:42,810
stuff like that from database easily it

00:12:40,680 --> 00:12:46,770
also provides a way how you can extend

00:12:42,810 --> 00:12:48,900
to your own types so it so they can be

00:12:46,770 --> 00:12:55,530
loaded from the database

00:12:48,900 --> 00:13:00,890
and it has some transaction support it's

00:12:55,530 --> 00:13:06,060
in for example there is a connect string

00:13:00,890 --> 00:13:08,610
we asked for cashed connection which

00:13:06,060 --> 00:13:11,310
will try to take a look in the

00:13:08,610 --> 00:13:14,720
connection pool to see if there is any

00:13:11,310 --> 00:13:21,930
connection that we can use and we

00:13:14,720 --> 00:13:27,150
prepare statement using the cache then

00:13:21,930 --> 00:13:29,910
we execute some SQL queries and at the

00:13:27,150 --> 00:13:33,840
end of the scope when the connection is

00:13:29,910 --> 00:13:36,990
destroyed it's not actually destroyed

00:13:33,840 --> 00:13:40,680
it's handled again by the connection

00:13:36,990 --> 00:13:43,530
pool and connection pool will decide

00:13:40,680 --> 00:13:48,750
whether to destroy it or leave it open

00:13:43,530 --> 00:13:52,580
and give it to somebody else and here is

00:13:48,750 --> 00:13:56,940
a little example how to use transaction

00:13:52,580 --> 00:13:59,280
again with C++ they are using scope to

00:13:56,940 --> 00:14:04,290
buy apples so at the beginning of you

00:13:59,280 --> 00:14:09,050
create transaction you do some SQL

00:14:04,290 --> 00:14:12,240
queries and at the end you commit if you

00:14:09,050 --> 00:14:16,410
have some errors if you encounter some

00:14:12,240 --> 00:14:20,250
errors doing these queries it will raise

00:14:16,410 --> 00:14:23,370
an exception and the transaction will

00:14:20,250 --> 00:14:26,430
get destroyed without being committed so

00:14:23,370 --> 00:14:33,000
it worked they'll get rolled back as you

00:14:26,430 --> 00:14:36,810
and as you exit the scope and both of

00:14:33,000 --> 00:14:40,350
these libraries actually using another

00:14:36,810 --> 00:14:42,390
useful library I think that it was

00:14:40,350 --> 00:14:45,510
because they were they were developing

00:14:42,390 --> 00:14:48,150
this and all the independent functions

00:14:45,510 --> 00:14:53,340
that are not strictly database write it

00:14:48,150 --> 00:14:57,310
or strictly but framework related I put

00:14:53,340 --> 00:15:01,610
in two separate library which is called

00:14:57,310 --> 00:15:05,480
cx6 tools hmm and this can be used

00:15:01,610 --> 00:15:08,690
without the internet and mtdb and also

00:15:05,480 --> 00:15:12,070
has quite some hop function for example

00:15:08,690 --> 00:15:16,280
there is an annotation of thread pool or

00:15:12,070 --> 00:15:23,650
serialization which which provides the

00:15:16,280 --> 00:15:29,500
service serialization object itself is s

00:15:23,650 --> 00:15:33,260
as is its specification specific

00:15:29,500 --> 00:15:36,830
implementations are basically there is

00:15:33,260 --> 00:15:42,980
one object that can handle jason CSV XML

00:15:36,830 --> 00:15:46,280
and it's all the same API just in class

00:15:42,980 --> 00:15:49,100
hierarchy it's use different object at

00:15:46,280 --> 00:15:52,670
the end but you can use all these

00:15:49,100 --> 00:15:56,570
specification theorization formats the

00:15:52,670 --> 00:15:58,250
same way there are some regs matching

00:15:56,570 --> 00:16:01,400
there are some configuration file

00:15:58,250 --> 00:16:03,760
parsing there is a vulgar library and

00:16:01,400 --> 00:16:07,910
much much more

00:16:03,760 --> 00:16:10,880
everything is using really nice API

00:16:07,910 --> 00:16:14,330
nicely designed so it's very easy to

00:16:10,880 --> 00:16:16,810
understand it and use it inside of your

00:16:14,330 --> 00:16:16,810
project

00:16:19,590 --> 00:16:24,420
so

00:16:21,390 --> 00:16:27,269
what next if you are if I got you little

00:16:24,420 --> 00:16:31,110
bit interested you can go to the

00:16:27,269 --> 00:16:34,380
Internet not org webpage or if you

00:16:31,110 --> 00:16:39,930
install it it's available in one of the

00:16:34,380 --> 00:16:45,000
projects in OBS you can check the main

00:16:39,930 --> 00:16:48,120
page of EC PP which is compiled that

00:16:45,000 --> 00:16:51,060
which is a compiler that you can use to

00:16:48,120 --> 00:16:53,880
compile your web pages and there is a

00:16:51,060 --> 00:16:55,649
syntax of all the variables that I was

00:16:53,880 --> 00:17:01,430
speaking about and all these actions

00:16:55,649 --> 00:17:05,480
like that you can use so that is all

00:17:01,430 --> 00:17:05,480
questions yeah

00:17:11,790 --> 00:17:18,660
we all learn from PHP you can say right

00:17:14,910 --> 00:17:23,209
safe PHP web applications but it's also

00:17:18,660 --> 00:17:27,959
very easy to do not how easy it is

00:17:23,209 --> 00:17:32,340
language user input directly and fight

00:17:27,959 --> 00:17:36,470
not safe in their faces so you guys

00:17:32,340 --> 00:17:41,240
doing something and so surprisingly and

00:17:36,470 --> 00:17:42,630
all the types say for how safe you are

00:17:41,240 --> 00:17:47,280
okay

00:17:42,630 --> 00:17:52,860
I'm regarding the famous feature of C

00:17:47,280 --> 00:17:56,790
buffer overflows actually there is a

00:17:52,860 --> 00:18:01,770
nice talk by South to about how you

00:17:56,790 --> 00:18:04,350
should write C++ and he he says that the

00:18:01,770 --> 00:18:06,750
best way how to avoid these buffer

00:18:04,350 --> 00:18:11,180
overflows is using just scope to buy

00:18:06,750 --> 00:18:14,760
apples and STL template and try to avoid

00:18:11,180 --> 00:18:20,430
dynamic memory allocation as much as you

00:18:14,760 --> 00:18:22,770
can and that way and it's C++ so you

00:18:20,430 --> 00:18:27,090
have STD string you don't have to

00:18:22,770 --> 00:18:31,410
allocate car arrays you can if you want

00:18:27,090 --> 00:18:33,560
but yeah if if you do that you know that

00:18:31,410 --> 00:18:38,070
you have to be careful

00:18:33,560 --> 00:18:40,350
probably and we see you probably know

00:18:38,070 --> 00:18:45,840
that you have to be careful because you

00:18:40,350 --> 00:18:49,220
already smashed into stuff before like

00:18:45,840 --> 00:18:49,220
in your first hello world

00:18:49,840 --> 00:18:54,039
okay some more questions

00:18:57,440 --> 00:19:02,910
maybe

00:18:59,290 --> 00:19:07,810
tell us how much do you think this is

00:19:02,910 --> 00:19:11,260
used I think it's not getting used that

00:19:07,810 --> 00:19:14,470
much that's why I have a talk to show it

00:19:11,260 --> 00:19:17,680
to you so you can start using it but I

00:19:14,470 --> 00:19:21,480
can tell you that these guys are using

00:19:17,680 --> 00:19:27,070
it for some company and they are making

00:19:21,480 --> 00:19:29,470
company some some product with that I

00:19:27,070 --> 00:19:33,340
started using it in my free time to

00:19:29,470 --> 00:19:35,830
write my own web application that I like

00:19:33,340 --> 00:19:38,020
to use and it might work we are

00:19:35,830 --> 00:19:42,910
currently using it to develop our

00:19:38,020 --> 00:19:50,050
project as well which scopes talking

00:19:42,910 --> 00:19:53,620
about your personal what I will

00:19:50,050 --> 00:19:55,960
well I wrote a real simple application

00:19:53,620 --> 00:20:00,310
which is basically a wish list or my

00:19:55,960 --> 00:20:02,920
Christmas what so people can buy me the

00:20:00,310 --> 00:20:06,490
presents that I like I don't why don't I

00:20:02,920 --> 00:20:07,620
know this list so why don't I know this

00:20:06,490 --> 00:20:21,100
list

00:20:07,620 --> 00:20:22,930
why don't I know this okay I was son

00:20:21,100 --> 00:20:25,870
send you the list so what you need but

00:20:22,930 --> 00:20:31,210
in your in the disguise if you say these

00:20:25,870 --> 00:20:37,900
guys I'm obviously what what kind of

00:20:31,210 --> 00:20:40,360
application is not remember the

00:20:37,900 --> 00:20:45,610
application that we are writing at work

00:20:40,360 --> 00:20:47,620
is basically we are exposing our we are

00:20:45,610 --> 00:20:51,160
writing some application which is which

00:20:47,620 --> 00:20:55,180
has to have REST API and because all the

00:20:51,160 --> 00:20:58,240
rest of our application is in C C++ each

00:20:55,180 --> 00:21:00,020
it's much easier to poke into it with

00:20:58,240 --> 00:21:05,920
this then

00:21:00,020 --> 00:21:09,730
- right another yeah abstraction and

00:21:05,920 --> 00:21:14,030
another layers how to inko interconnect

00:21:09,730 --> 00:21:19,910
so and we are using for example

00:21:14,030 --> 00:21:21,380
connection to sussel or direct

00:21:19,910 --> 00:21:24,760
connections to the database that are

00:21:21,380 --> 00:21:29,980
easy in everything but we are also using

00:21:24,760 --> 00:21:33,100
some network connections we are protocol

00:21:29,980 --> 00:21:37,250
sending messages out and receiving in

00:21:33,100 --> 00:21:41,290
during processing of the request which

00:21:37,250 --> 00:21:41,290
makes it quite easy to doing

00:21:44,940 --> 00:21:49,280
okay some other question

00:21:52,300 --> 00:21:54,330
Oh

00:21:55,130 --> 00:22:01,600
yeah I basically have questions the

00:21:58,190 --> 00:22:01,600
first one is Howard

00:22:16,210 --> 00:22:27,009
yeah I regularly use GDB to run it on

00:22:21,759 --> 00:22:30,460
backplate and something clashes and my

00:22:27,009 --> 00:22:34,440
colleague is using Walgreens to find out

00:22:30,460 --> 00:22:40,450
memories that we have so basically since

00:22:34,440 --> 00:22:43,179
same as any other C C++ application you

00:22:40,450 --> 00:22:46,840
just need to filter out what it's done

00:22:43,179 --> 00:22:49,409
in the framework and what it's done by

00:22:46,840 --> 00:22:49,409
actually

00:23:01,330 --> 00:23:03,900
you can see

00:23:06,170 --> 00:23:16,640
well now I don't expect that gdb shows

00:23:08,870 --> 00:23:19,250
you which line it's actually well this

00:23:16,640 --> 00:23:24,410
this file will get pre-processed and

00:23:19,250 --> 00:23:28,850
translated into C++ and that gets

00:23:24,410 --> 00:23:31,990
compiled afterwards but yeah I never

00:23:28,850 --> 00:23:37,610
tried to debug it step by step

00:23:31,990 --> 00:23:39,830
but usually were tied well my how I

00:23:37,610 --> 00:23:44,210
usually work when I'm developing

00:23:39,830 --> 00:23:51,919
something is by combination of helpful

00:23:44,210 --> 00:23:55,910
printf and back-trace if something

00:23:51,919 --> 00:23:59,990
crashes yeah so you can you can look at

00:23:55,910 --> 00:24:02,480
the CPP file then you will know the line

00:23:59,990 --> 00:24:05,000
numbers but if you are raising

00:24:02,480 --> 00:24:08,660
exceptions or something like that it

00:24:05,000 --> 00:24:17,200
will translate the numbers back to the

00:24:08,660 --> 00:24:20,660
original is a CPP file I do not see much

00:24:17,200 --> 00:24:23,320
advancement other modern frameworks

00:24:20,660 --> 00:24:23,320
except

00:24:26,630 --> 00:24:30,309
if you'da framework if someone

00:24:30,340 --> 00:24:41,230
I think it doesn't have anything that

00:24:37,480 --> 00:24:44,909
with any special feature that will give

00:24:41,230 --> 00:24:48,340
it advantage over the other frameworks

00:24:44,909 --> 00:24:52,620
main main feature that I like about it

00:24:48,340 --> 00:24:55,020
is that I can write with C++

00:24:52,620 --> 00:24:57,940
that's biggest advantage for me

00:24:55,020 --> 00:25:00,250
otherwise I think it would be pretty

00:24:57,940 --> 00:25:03,159
simple to fit a similar to the other

00:25:00,250 --> 00:25:06,220
frameworks maybe there will be some

00:25:03,159 --> 00:25:07,950
features missing if we are if we compare

00:25:06,220 --> 00:25:10,510
it for example with rails

00:25:07,950 --> 00:25:13,500
you wouldn't get all these fancy

00:25:10,510 --> 00:25:18,149
generators that will write code for you

00:25:13,500 --> 00:25:18,149
and you will have to write code yourself

00:25:18,659 --> 00:25:21,659
okay

00:25:22,520 --> 00:25:26,790
okay

00:25:24,440 --> 00:25:29,120
anybody else

00:25:26,790 --> 00:25:32,980
no so

00:25:29,120 --> 00:25:32,980
okay last question

00:25:37,730 --> 00:25:43,669
when you have an existing application or

00:25:41,210 --> 00:25:47,269
any server process written and see that

00:25:43,669 --> 00:25:49,909
you can use this easily to plug it in as

00:25:47,269 --> 00:25:51,950
such as an additional admin interface

00:25:49,909 --> 00:25:54,289
for instance for these kind of processes

00:25:51,950 --> 00:25:59,139
well it's more like in addition to

00:25:54,289 --> 00:26:02,570
existing software Matt's not as a as an

00:25:59,139 --> 00:26:04,220
it would it conflict with existing sort

00:26:02,570 --> 00:26:08,320
of would you

00:26:04,220 --> 00:26:13,370
do you need your own schedule inside or

00:26:08,320 --> 00:26:15,379
possess enla or can you easily either

00:26:13,370 --> 00:26:26,179
run it as part of an existing postal

00:26:15,379 --> 00:26:29,000
service well well that you can basically

00:26:26,179 --> 00:26:32,450
part it up as another threat of your

00:26:29,000 --> 00:26:34,340
existing purposes and then you have to

00:26:32,450 --> 00:26:38,659
somehow handle the communication between

00:26:34,340 --> 00:26:41,450
your right your your server application

00:26:38,659 --> 00:26:46,789
and this part will believe we have some

00:26:41,450 --> 00:26:48,289
IPC okay but it then it makes sense to

00:26:46,789 --> 00:26:49,809
for instance if you want to have a bit

00:26:48,289 --> 00:26:53,710
nice type interface in your mighty

00:26:49,809 --> 00:26:56,570
servers and to do something like that to

00:26:53,710 --> 00:26:58,990
provide a nice web interface that means

00:26:56,570 --> 00:26:58,990
the face

00:26:59,010 --> 00:27:04,590
okay thank you

00:27:01,620 --> 00:27:06,360
and thank you for attention and if you

00:27:04,590 --> 00:27:10,140
have some more questions or want to talk

00:27:06,360 --> 00:27:12,750
me I will be somewhere here and don't

00:27:10,140 --> 00:27:15,950
forget to drink all the beers but so we

00:27:12,750 --> 00:27:15,950

YouTube URL: https://www.youtube.com/watch?v=jL22SaxsR8g


