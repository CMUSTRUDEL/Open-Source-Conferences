Title: OSC15- Thomas GÃ¶ttlicher - Machinery - A Systems Management Toolkit for Linux
Publication date: 2015-05-03
Playlist: openSUSE Conference 2015
Description: 
	Alfred is a system administrator of a real world data center. He faces the reality of systems nobody knows about, people making mistakes and forgetting about best practices, or not riding the latest DevOps trend. SUSE has started an open source project to help Alfred to keep his sanity and fill the gaps current tools don't address yet. The project is Machinery (http://machinery-project.org) and it is released for openSUSE as well as SUSE Linux Enterprise. The presentation will provide a deep dive into what Machinery can do for system administrators and how the community can benefit and contribute.
Captions: 
	00:00:00,439 --> 00:00:06,180
hello everybody my name is Tomas

00:00:04,110 --> 00:00:08,309
kaliesha i'm a developer and i've been

00:00:06,180 --> 00:00:11,759
working for Susie for more than eight

00:00:08,309 --> 00:00:16,289
years the first time I came in touch

00:00:11,759 --> 00:00:18,720
with suse linux was many years ago I was

00:00:16,289 --> 00:00:21,600
working as a system administrator for a

00:00:18,720 --> 00:00:24,900
medium-sized company we had 400

00:00:21,600 --> 00:00:26,789
employees 20 servers and I was a system

00:00:24,900 --> 00:00:30,179
administrator and I was responsible

00:00:26,789 --> 00:00:33,210
responsible for these machines half of

00:00:30,179 --> 00:00:36,840
the machines was running old unix the

00:00:33,210 --> 00:00:39,180
other half was running suse linux it was

00:00:36,840 --> 00:00:41,969
so much more fun to administrate suse

00:00:39,180 --> 00:00:45,870
linux after that i went to university

00:00:41,969 --> 00:00:49,710
and we had a lab half of the computers

00:00:45,870 --> 00:00:54,620
was running windows the other half was

00:00:49,710 --> 00:00:57,719
running opensuse when I went to the lab

00:00:54,620 --> 00:01:00,750
most times all the windows servers were

00:00:57,719 --> 00:01:03,260
already taken by other students and it

00:01:00,750 --> 00:01:07,350
was pretty easy to get us a free one

00:01:03,260 --> 00:01:09,210
sooo civ a free susan machine so there

00:01:07,350 --> 00:01:12,030
are different reasons but so much better

00:01:09,210 --> 00:01:13,200
to have this Uzi machine for example as

00:01:12,030 --> 00:01:16,070
you don't have to wait for it or it's

00:01:13,200 --> 00:01:22,520
easier to administrate but sometimes

00:01:16,070 --> 00:01:25,200
it's not that easy to administrate so

00:01:22,520 --> 00:01:29,009
some of the obstacles that could occur

00:01:25,200 --> 00:01:32,369
to you are you set up your family's

00:01:29,009 --> 00:01:33,840
computer and your brother wants to

00:01:32,369 --> 00:01:37,770
install some software screws up your

00:01:33,840 --> 00:01:40,710
machine and then he asked you can you

00:01:37,770 --> 00:01:44,189
please fix it and when you say well okay

00:01:40,710 --> 00:01:46,729
what did you change not paying okay

00:01:44,189 --> 00:01:50,820
let's restore the backup no my changes

00:01:46,729 --> 00:01:53,939
so probably you want to have some nice

00:01:50,820 --> 00:01:57,060
way to find out what has changed or you

00:01:53,939 --> 00:01:59,430
set up your workstation everything's

00:01:57,060 --> 00:02:00,659
perfectly configured and then you have

00:01:59,430 --> 00:02:04,409
your laptop and want to have it

00:02:00,659 --> 00:02:07,320
configured a similar way another use

00:02:04,409 --> 00:02:10,479
cases that you want to upgrade from

00:02:07,320 --> 00:02:14,319
opensuse 13 but 12 13 dot to

00:02:10,479 --> 00:02:16,120
and you want to transfer your changes

00:02:14,319 --> 00:02:19,060
give software that you manually

00:02:16,120 --> 00:02:23,950
installed your configuration you adapted

00:02:19,060 --> 00:02:28,599
to your new machine in the last use case

00:02:23,950 --> 00:02:30,970
listed here is that you are responsible

00:02:28,599 --> 00:02:34,120
for some machines in the lab in your

00:02:30,970 --> 00:02:36,670
university or in your company you open a

00:02:34,120 --> 00:02:39,310
door and there's some old workstation

00:02:36,670 --> 00:02:41,500
it's connected to power connected to the

00:02:39,310 --> 00:02:44,730
network but you don't know what it is

00:02:41,500 --> 00:02:47,200
for you ask your system administrator

00:02:44,730 --> 00:02:49,049
indeed as well that was maintained for

00:02:47,200 --> 00:02:52,959
some guy he left the company or the

00:02:49,049 --> 00:02:55,959
university some years ago and you don't

00:02:52,959 --> 00:02:57,310
know can i unblock it will I break it is

00:02:55,959 --> 00:03:01,000
it essential for the whole

00:02:57,310 --> 00:03:05,040
infrastructure so you want to know

00:03:01,000 --> 00:03:05,040
what's the system's purpose

00:03:06,740 --> 00:03:13,220
well I could tell you a lot about theory

00:03:10,910 --> 00:03:15,920
behind it how to do it but I want to

00:03:13,220 --> 00:03:18,580
show you a short demo so you know how it

00:03:15,920 --> 00:03:18,580
looks in practice

00:03:24,670 --> 00:03:29,260
so you know this talk is called

00:03:26,190 --> 00:03:31,090
machinery and I will show you a tool

00:03:29,260 --> 00:03:38,230
called machinery it's a command line

00:03:31,090 --> 00:03:39,910
tool I can call it and what we want to

00:03:38,230 --> 00:03:42,550
do is we want to address this use case

00:03:39,910 --> 00:03:45,270
where your brother or my brother

00:03:42,550 --> 00:03:47,440
actually I don't have a brother but

00:03:45,270 --> 00:03:50,140
probably it was your brother who broke

00:03:47,440 --> 00:03:57,100
my workstation so let's find out what

00:03:50,140 --> 00:03:59,470
has changed on this workstation so use

00:03:57,100 --> 00:04:04,530
machinery and I want to inspect this

00:03:59,470 --> 00:04:09,310
broken machine this machine is called OS

00:04:04,530 --> 00:04:12,180
32 it's running opensuse 32 let's buy

00:04:09,310 --> 00:04:12,180
came up with this hostname

00:04:16,920 --> 00:04:22,650
I will give this report that will be

00:04:20,790 --> 00:04:26,310
created or let's call it system

00:04:22,650 --> 00:04:31,230
description the name current and i will

00:04:26,310 --> 00:04:35,880
also extract files so what is going on

00:04:31,230 --> 00:04:40,530
now this tool tries to get a lot of

00:04:35,880 --> 00:04:43,320
information from this broken system it

00:04:40,530 --> 00:04:46,410
looks in using as its age it retrieves

00:04:43,320 --> 00:04:49,230
the list of packages it retrieves the

00:04:46,410 --> 00:04:51,950
list of software repositories the users

00:04:49,230 --> 00:04:56,790
in the group's the services which means

00:04:51,950 --> 00:04:59,820
system d and system 5 in it services and

00:04:56,790 --> 00:05:02,730
it also retrieved some files which are

00:04:59,820 --> 00:05:05,310
unmanaged files that's a list of files

00:05:02,730 --> 00:05:08,940
which were installed insist on the

00:05:05,310 --> 00:05:13,410
system not by RPM but for example by

00:05:08,940 --> 00:05:16,020
tarball and it also will retrieve

00:05:13,410 --> 00:05:18,870
changed manage files that are files

00:05:16,020 --> 00:05:21,360
which were installed by RPM that were

00:05:18,870 --> 00:05:25,370
changed later on so if someone at that's

00:05:21,360 --> 00:05:28,490
a script and use a pin that will be also

00:05:25,370 --> 00:05:28,490
figured out

00:05:31,020 --> 00:05:36,569
and we also have configuration files

00:05:34,220 --> 00:05:39,120
which were changed we will also get

00:05:36,569 --> 00:05:47,300
these files so we will have an overview

00:05:39,120 --> 00:05:47,300
over this system you have a question

00:05:50,430 --> 00:05:56,430
it's well it's a virtual machine running

00:05:53,400 --> 00:05:59,700
on my laptop that it could be any

00:05:56,430 --> 00:06:05,850
machine which is accessible over the

00:05:59,700 --> 00:06:10,110
network so what I have now is the system

00:06:05,850 --> 00:06:13,520
description of this broken machine this

00:06:10,110 --> 00:06:18,090
nice tool shows me what the next step is

00:06:13,520 --> 00:06:22,560
so i can have to overlook or overview

00:06:18,090 --> 00:06:25,950
over the packages the users and the

00:06:22,560 --> 00:06:28,970
groups and so on what I'm interested in

00:06:25,950 --> 00:06:31,680
is what has changed in the meantime and

00:06:28,970 --> 00:06:34,440
well I'm a lucky guy I created such a

00:06:31,680 --> 00:06:36,930
system description when I set up the

00:06:34,440 --> 00:06:40,020
machine for your brother because I don't

00:06:36,930 --> 00:06:43,370
have a brother and I want to compare

00:06:40,020 --> 00:06:43,370
both system descriptions

00:06:51,080 --> 00:06:58,430
so I call machinery compare and pass

00:06:54,259 --> 00:07:00,800
both system descriptions okay what can

00:06:58,430 --> 00:07:03,560
we see there's one additional package

00:07:00,800 --> 00:07:05,780
it's called ex bill does someone in this

00:07:03,560 --> 00:07:11,659
room know the software raise your hand

00:07:05,780 --> 00:07:15,590
okay and we also see there's one

00:07:11,659 --> 00:07:18,590
configuration file changed and some

00:07:15,590 --> 00:07:20,539
libraries installed that these files are

00:07:18,590 --> 00:07:24,889
unmanaged files so they were installed

00:07:20,539 --> 00:07:27,319
not by RPM but manually so it seems as

00:07:24,889 --> 00:07:29,270
this evil brother wanted to install X

00:07:27,319 --> 00:07:32,419
bill installed some libraries on the

00:07:29,270 --> 00:07:34,879
system and maybe that's the reason why

00:07:32,419 --> 00:07:41,360
the system does not work exactly in the

00:07:34,879 --> 00:07:43,370
way how it's supposed to that's one of

00:07:41,360 --> 00:07:47,740
the use cases another use case we had

00:07:43,370 --> 00:07:51,500
was this machine in the lab which was

00:07:47,740 --> 00:07:54,590
abandoned the administrator has left the

00:07:51,500 --> 00:07:57,289
university or the company and we want to

00:07:54,590 --> 00:08:00,949
know more about this software update

00:07:57,289 --> 00:08:06,469
about the system so what we could do is

00:08:00,949 --> 00:08:15,009
we could inspect such your system let's

00:08:06,469 --> 00:08:15,009
use the original system and have a look

00:08:16,390 --> 00:08:21,610
how it looks like so this is a systemic

00:08:18,370 --> 00:08:23,890
description of some system it shows

00:08:21,610 --> 00:08:28,210
which system which operating system it

00:08:23,890 --> 00:08:30,970
runs it shows the list of packages here

00:08:28,210 --> 00:08:35,140
are the packages including the

00:08:30,970 --> 00:08:37,650
architecture the vendor software

00:08:35,140 --> 00:08:42,760
patterns as you know them from a sipper

00:08:37,650 --> 00:08:45,580
the software repositories users and

00:08:42,760 --> 00:08:47,890
groups the services that might be

00:08:45,580 --> 00:08:50,860
interesting to have a look in this the

00:08:47,890 --> 00:08:54,760
services to see which services are

00:08:50,860 --> 00:08:57,250
delivered and I told you earlier that

00:08:54,760 --> 00:09:00,430
there are different sorts of files so we

00:08:57,250 --> 00:09:02,820
are have a list of unmanaged files the

00:09:00,430 --> 00:09:05,710
files which were installed not by rpm

00:09:02,820 --> 00:09:08,200
change manage files in this case they

00:09:05,710 --> 00:09:11,440
are empty so no one hacked around on on

00:09:08,200 --> 00:09:16,270
the scripts which were delivered by RPM

00:09:11,440 --> 00:09:17,650
and also the configuration files three

00:09:16,270 --> 00:09:20,470
of these configuration files were

00:09:17,650 --> 00:09:23,320
changed and if we are interested in the

00:09:20,470 --> 00:09:26,140
changes we can have a look at the diff

00:09:23,320 --> 00:09:30,760
so what we see is that the two lines

00:09:26,140 --> 00:09:32,530
were added when I have when I compare

00:09:30,760 --> 00:09:37,570
the original version how it was shipped

00:09:32,530 --> 00:09:40,560
by rpm two outs right now so that's how

00:09:37,570 --> 00:09:45,120
we can find out details about a system

00:09:40,560 --> 00:09:47,830
what the purpose is how its configured

00:09:45,120 --> 00:09:51,670
all that works with system descriptions

00:09:47,830 --> 00:09:53,620
i used the term more again and again so

00:09:51,670 --> 00:09:56,380
let's have a look what system

00:09:53,620 --> 00:09:58,650
descriptions are let's go back to the

00:09:56,380 --> 00:09:58,650
slides

00:10:02,830 --> 00:10:11,950
so system descriptions are the interests

00:10:05,830 --> 00:10:13,800
essential central part of all the burgh

00:10:11,950 --> 00:10:16,240
flows such as system description

00:10:13,800 --> 00:10:19,870
contains all the data to replicate a

00:10:16,240 --> 00:10:23,010
system so it contains everything to

00:10:19,870 --> 00:10:27,580
rebuild the system so it also contains

00:10:23,010 --> 00:10:31,260
manual changes so if I build an image

00:10:27,580 --> 00:10:35,650
using such a system description I have

00:10:31,260 --> 00:10:38,290
functionalized the same system such a

00:10:35,650 --> 00:10:40,720
system description can be stored it can

00:10:38,290 --> 00:10:43,840
be compared as I already showed you it

00:10:40,720 --> 00:10:49,000
can be viewed on the command line or in

00:10:43,840 --> 00:10:52,120
HTML and it can be imported or exported

00:10:49,000 --> 00:10:57,670
to other formats so for example alter

00:10:52,120 --> 00:10:59,770
yast or keavy that means that this

00:10:57,670 --> 00:11:02,220
system description works together with

00:10:59,770 --> 00:11:02,220
other tools

00:11:04,190 --> 00:11:12,260
in the center of all these operations is

00:11:08,450 --> 00:11:14,330
the system description and the system

00:11:12,260 --> 00:11:17,450
administrator and around are different

00:11:14,330 --> 00:11:22,400
operations which work on the system

00:11:17,450 --> 00:11:24,620
description so let's go through the

00:11:22,400 --> 00:11:27,590
different operations let's start at nine

00:11:24,620 --> 00:11:30,740
o clock at inspect i already showed you

00:11:27,590 --> 00:11:33,950
inspect it means we lock in on to a

00:11:30,740 --> 00:11:36,110
running system we investigate what's

00:11:33,950 --> 00:11:40,760
going on there what's configured

00:11:36,110 --> 00:11:43,790
packages patterns and using this we

00:11:40,760 --> 00:11:49,190
create a system description next one

00:11:43,790 --> 00:11:52,820
clockwise is validate in at this

00:11:49,190 --> 00:11:54,140
operation we we have a template which

00:11:52,820 --> 00:11:56,600
describes how a system should be

00:11:54,140 --> 00:11:58,820
configured and be compared to our

00:11:56,600 --> 00:12:00,770
current system and then we see does it

00:11:58,820 --> 00:12:03,200
match the patch packages I want to have

00:12:00,770 --> 00:12:05,890
installed in my system so i can use it

00:12:03,200 --> 00:12:09,230
for audit or if i want to see if it's

00:12:05,890 --> 00:12:10,970
yeah couldn't if it fulfills the

00:12:09,230 --> 00:12:14,950
requirements for some application that

00:12:10,970 --> 00:12:18,260
some libraries be need to be installed

00:12:14,950 --> 00:12:21,890
then we have show that was already

00:12:18,260 --> 00:12:25,970
demonstrated on the command line or the

00:12:21,890 --> 00:12:27,860
HTML report at twelve o'clock

00:12:25,970 --> 00:12:30,920
parameterize the someone in this room

00:12:27,860 --> 00:12:33,380
have an idea but it could mean except

00:12:30,920 --> 00:12:35,120
cornelius cause Kanellis is my boss he

00:12:33,380 --> 00:12:37,070
knows everything about machinery so I

00:12:35,120 --> 00:12:39,110
think this this crash is not challenging

00:12:37,070 --> 00:12:44,050
for him that does someone else know what

00:12:39,110 --> 00:12:44,050
it could be but do you think any ideas

00:12:45,630 --> 00:12:52,400
ok we'll tell you so you have a system

00:12:50,130 --> 00:12:54,630
description and you want to have some

00:12:52,400 --> 00:12:56,430
variables which you can set for example

00:12:54,630 --> 00:12:59,490
the hostname or if you have different

00:12:56,430 --> 00:13:01,880
environments like production environment

00:12:59,490 --> 00:13:05,010
and testing environment you want to have

00:13:01,880 --> 00:13:11,100
yes some variables you can set so that's

00:13:05,010 --> 00:13:13,710
meant by parameterize motif I takes a

00:13:11,100 --> 00:13:17,250
system description and you can change

00:13:13,710 --> 00:13:19,920
certain parts and some packages change

00:13:17,250 --> 00:13:24,950
user passwords so that's working on a

00:13:19,920 --> 00:13:27,090
system description the next one is build

00:13:24,950 --> 00:13:29,700
building means I take a system

00:13:27,090 --> 00:13:32,370
description and create an image which

00:13:29,700 --> 00:13:38,280
can be applied on a hard disk or an a

00:13:32,370 --> 00:13:41,160
virtual machine or in the cloud then we

00:13:38,280 --> 00:13:43,530
have apply which applies the settings

00:13:41,160 --> 00:13:48,300
describe the system description on to a

00:13:43,530 --> 00:13:50,490
running system run is some sort of test

00:13:48,300 --> 00:13:53,880
drive when I have a system description I

00:13:50,490 --> 00:13:57,690
wanna see does that fulfill my needs I

00:13:53,880 --> 00:14:00,480
can test drive it before I deployed with

00:13:57,690 --> 00:14:02,420
deploys the next step where I could

00:14:00,480 --> 00:14:06,600
deploy to the sousa cloud for example

00:14:02,420 --> 00:14:11,670
and then there's two very important ones

00:14:06,600 --> 00:14:13,800
that's import and export cuz that makes

00:14:11,670 --> 00:14:16,380
it possible to integrate machinery into

00:14:13,800 --> 00:14:19,140
your workflows to work together with

00:14:16,380 --> 00:14:24,090
your tools like Auto yest so we are able

00:14:19,140 --> 00:14:29,090
to export auto yes or we can create TV

00:14:24,090 --> 00:14:31,530
so you can build your images using TV

00:14:29,090 --> 00:14:35,990
some of these operations are already

00:14:31,530 --> 00:14:38,640
implemented some will be in the future

00:14:35,990 --> 00:14:43,680
but using all these different operations

00:14:38,640 --> 00:14:46,170
you can if you add them together in the

00:14:43,680 --> 00:14:49,080
right order you can make your workflows

00:14:46,170 --> 00:14:52,200
for example if you want if you want to

00:14:49,080 --> 00:14:55,949
migrate from physical to virtual or to

00:14:52,200 --> 00:14:59,439
the cloud you can start with inspect

00:14:55,949 --> 00:15:02,819
the first operation next operation would

00:14:59,439 --> 00:15:05,559
be build it build omit the image and

00:15:02,819 --> 00:15:11,529
then you deploy so connecting these

00:15:05,559 --> 00:15:17,800
different operations fulfills your your

00:15:11,529 --> 00:15:21,369
use cases so it's machinery which works

00:15:17,800 --> 00:15:24,100
on this system descriptions but the tool

00:15:21,369 --> 00:15:27,069
are already demonstrated it's a

00:15:24,100 --> 00:15:30,309
command-line tool and on the hosts

00:15:27,069 --> 00:15:32,800
there's no client software needed so you

00:15:30,309 --> 00:15:35,610
do not have to run a demon which eats up

00:15:32,800 --> 00:15:39,009
your memory you don't have to install

00:15:35,610 --> 00:15:43,139
some Ruby stack Chavez deck or whatever

00:15:39,009 --> 00:15:49,660
so it only uses the tools which are on

00:15:43,139 --> 00:15:54,029
Linux systems like tar arcing find the

00:15:49,660 --> 00:15:58,379
only requirement is this machine must be

00:15:54,029 --> 00:15:58,379
accessible using SSH

00:16:00,850 --> 00:16:05,529
the architecture looks like that we have

00:16:02,769 --> 00:16:07,810
a administrator machine on the 11 inside

00:16:05,529 --> 00:16:11,259
and then we have the targets which are

00:16:07,810 --> 00:16:12,810
administrative so machinery is installed

00:16:11,259 --> 00:16:17,440
on the administrator machine and

00:16:12,810 --> 00:16:19,660
supportive jizz opensuse 13.1 32 it's

00:16:17,440 --> 00:16:22,899
less 12 and tumbleweed will be supported

00:16:19,660 --> 00:16:26,139
soon and as the targets which can be

00:16:22,899 --> 00:16:33,430
inspected for example we support

00:16:26,139 --> 00:16:35,470
opensuse 31 32 2 + 11 / 12 rel five six

00:16:33,430 --> 00:16:38,699
and seven and tumbleweed will be

00:16:35,470 --> 00:16:38,699
supported to and there's the question

00:16:40,949 --> 00:16:45,300
yeah what

00:16:49,620 --> 00:16:56,100
Machinery runs on those machines what

00:16:53,130 --> 00:16:59,850
are the restrictions what does it

00:16:56,100 --> 00:17:05,520
depends on could you rephrase your

00:16:59,850 --> 00:17:08,130
question please I would be axed I see I

00:17:05,520 --> 00:17:10,350
want to find out what are the

00:17:08,130 --> 00:17:13,770
restrictions why does it on machinery

00:17:10,350 --> 00:17:18,750
only on those machines and not on the

00:17:13,770 --> 00:17:21,449
order kind of machines it has to sshs

00:17:18,750 --> 00:17:23,220
can use the other tools yeah so what's

00:17:21,449 --> 00:17:25,170
the restriction does it does so you have

00:17:23,220 --> 00:17:27,720
some certain operating system in mind

00:17:25,170 --> 00:17:31,890
which you would like to see machinery to

00:17:27,720 --> 00:17:34,530
support ya bien yeah there's one big

00:17:31,890 --> 00:17:36,809
difference between debian and systems

00:17:34,530 --> 00:17:40,440
listed here it's a package manager

00:17:36,809 --> 00:17:45,840
uh-huh so right now we support this

00:17:40,440 --> 00:17:48,420
cause they are rpm based but with with

00:17:45,840 --> 00:17:53,550
um effort it would be possible to also

00:17:48,420 --> 00:17:58,530
support debian-based distributions okay

00:17:53,550 --> 00:18:02,570
nice thank you it will come there's

00:17:58,530 --> 00:18:02,570
another question in the back

00:18:05,190 --> 00:18:12,720
so that's the operating systems that you

00:18:09,300 --> 00:18:16,590
support what about architectures is a no

00:18:12,720 --> 00:18:22,680
arch or other specific architectural

00:18:16,590 --> 00:18:26,010
requirements we support the package

00:18:22,680 --> 00:18:33,960
itself is not low art but it's it works

00:18:26,010 --> 00:18:38,220
on Intel it works on system z it works

00:18:33,960 --> 00:18:40,200
on powerpc so i think your your

00:18:38,220 --> 00:18:43,470
distribution or your architecture will

00:18:40,200 --> 00:18:46,920
be supported and get inspected host

00:18:43,470 --> 00:18:52,700
itself are ya there it does not depend

00:18:46,920 --> 00:18:56,880
on the architecture would it be to add

00:18:52,700 --> 00:19:00,180
an additional architecture are you

00:18:56,880 --> 00:19:05,400
talking about the target system or about

00:19:00,180 --> 00:19:06,630
the system varied runs bugs ok so i can

00:19:05,400 --> 00:19:10,560
give you the same answer for both

00:19:06,630 --> 00:19:12,990
questions it's mostly about the testing

00:19:10,560 --> 00:19:14,610
environment so we have tests which

00:19:12,990 --> 00:19:17,670
ensure that we don't have regressions

00:19:14,610 --> 00:19:20,760
and we need to set up these machines in

00:19:17,670 --> 00:19:26,300
in our infrastructure that's the most

00:19:20,760 --> 00:19:29,550
effort but the the architectures itself

00:19:26,300 --> 00:19:32,550
it's not that much work to to support

00:19:29,550 --> 00:19:34,230
another architecture as soon as long as

00:19:32,550 --> 00:19:37,020
there's a rupee stack for the

00:19:34,230 --> 00:19:40,140
administrator node there's nothing which

00:19:37,020 --> 00:19:45,240
makes it hard to have it this is this

00:19:40,140 --> 00:19:46,890
architecture supported maybe as a as a

00:19:45,240 --> 00:19:52,040
follow-up to that question is there

00:19:46,890 --> 00:19:52,040
anything specific to the bootloader used

00:19:52,429 --> 00:20:01,100
no so right now the bootloader is not

00:19:55,909 --> 00:20:03,769
inspected so your your administrator

00:20:01,100 --> 00:20:06,919
node comes up that means your bootloader

00:20:03,769 --> 00:20:09,799
must needs to be installed properly but

00:20:06,919 --> 00:20:13,009
i think if you run some software on some

00:20:09,799 --> 00:20:15,320
system the bootloader works and on the

00:20:13,009 --> 00:20:17,360
target systems we don't inspect the

00:20:15,320 --> 00:20:21,950
bootloader because it's not the

00:20:17,360 --> 00:20:24,320
essential the attentions of a system

00:20:21,950 --> 00:20:26,690
because we look at a system from the

00:20:24,320 --> 00:20:31,129
point of view that we want to offer a

00:20:26,690 --> 00:20:36,230
service to customer so for we inspect

00:20:31,129 --> 00:20:39,830
the systems from lightened like a black

00:20:36,230 --> 00:20:46,909
box so that means it's not hardly

00:20:39,830 --> 00:20:49,429
dependent what we inspect and yeah

00:20:46,909 --> 00:20:52,490
tumbleweed is also shown here on the

00:20:49,429 --> 00:20:58,999
list that in practice there soon that's

00:20:52,490 --> 00:21:01,340
exactly why answer to your question we

00:20:58,999 --> 00:21:04,129
haven't set up our test environment

00:21:01,340 --> 00:21:06,830
fully for tumbleweed but I expect it to

00:21:04,129 --> 00:21:09,559
be done by next week and then I can

00:21:06,830 --> 00:21:11,509
remove the soon and brackets and it will

00:21:09,559 --> 00:21:15,679
be four different over different

00:21:11,509 --> 00:21:19,779
architectures very similarly any more

00:21:15,679 --> 00:21:19,779
questions before I go to the next slide

00:21:20,769 --> 00:21:24,940
so let's talk about the project itself

00:21:26,179 --> 00:21:32,600
so the essential part is the system

00:21:29,090 --> 00:21:35,419
description and we don't want to

00:21:32,600 --> 00:21:40,960
reinvent the wheel that means we want to

00:21:35,419 --> 00:21:43,070
use tools which fulfill the purposes and

00:21:40,960 --> 00:21:45,950
at the same time we want to work

00:21:43,070 --> 00:21:50,240
together so machinery can be integrated

00:21:45,950 --> 00:21:54,080
into other workflows so we want to

00:21:50,240 --> 00:21:58,509
provide a tool box when you started this

00:21:54,080 --> 00:22:01,700
project we decided that we want to yeah

00:21:58,509 --> 00:22:07,309
work in an HR way which means that we

00:22:01,700 --> 00:22:10,279
want to react to user needs quickly so

00:22:07,309 --> 00:22:12,710
we have two weeks prints we listen to

00:22:10,279 --> 00:22:14,210
our users we listen to our customers so

00:22:12,710 --> 00:22:16,700
we want to find out what's the most

00:22:14,210 --> 00:22:18,320
important thing right now so we

00:22:16,700 --> 00:22:25,549
implement the most important features

00:22:18,320 --> 00:22:28,490
first and it's open source if you want

00:22:25,549 --> 00:22:32,299
to have the code we are on github github

00:22:28,490 --> 00:22:38,149
Suzie d souza machinery and we also have

00:22:32,299 --> 00:22:41,929
a nice home page in the top left corner

00:22:38,149 --> 00:22:44,830
there's some links which are one-click

00:22:41,929 --> 00:22:49,220
install links for opensuse 13.1

00:22:44,830 --> 00:22:50,840
uncertain or two and we have some more

00:22:49,220 --> 00:22:55,669
information about the project and the

00:22:50,840 --> 00:23:00,730
software on our own page so how can you

00:22:55,669 --> 00:23:04,580
participate first of all you can use it

00:23:00,730 --> 00:23:07,009
you can tell us about your needs for

00:23:04,580 --> 00:23:09,129
example architectures other operating

00:23:07,009 --> 00:23:09,129
systems

00:23:10,130 --> 00:23:16,910
when you use it you can so you can you

00:23:14,090 --> 00:23:20,300
might find some bugs please report them

00:23:16,910 --> 00:23:24,290
if you can send us patches they are

00:23:20,300 --> 00:23:26,300
always welcome you can write some

00:23:24,290 --> 00:23:29,830
documentation or you can log about how

00:23:26,300 --> 00:23:34,180
you use it how you my created how you

00:23:29,830 --> 00:23:39,650
your third hint of 120 to for example

00:23:34,180 --> 00:23:42,520
and you can talk about it tell others

00:23:39,650 --> 00:23:46,970
that there's this software that might

00:23:42,520 --> 00:23:49,400
fulfill their needs there's one last

00:23:46,970 --> 00:23:52,600
thing how you can participate you can

00:23:49,400 --> 00:23:56,270
ask some more questions other any

00:23:52,600 --> 00:23:58,810
there's the question could you please

00:23:56,270 --> 00:23:58,810
wait for the mic

00:24:02,450 --> 00:24:09,210
test okay if I want to find out with

00:24:06,630 --> 00:24:12,030
your example how my brothers well my

00:24:09,210 --> 00:24:13,950
sister screwed up the system I would

00:24:12,030 --> 00:24:16,710
like to compare against the latest

00:24:13,950 --> 00:24:20,610
snapshot by sniper that's why I have it

00:24:16,710 --> 00:24:25,830
so but it seems you require a running

00:24:20,610 --> 00:24:28,830
system it's a different approach so if

00:24:25,830 --> 00:24:30,990
you run a few runs Knepper for example

00:24:28,830 --> 00:24:33,930
then you need to have snapshots on your

00:24:30,990 --> 00:24:37,980
system so that depends on your file

00:24:33,930 --> 00:24:40,429
system or you could also use my

00:24:37,980 --> 00:24:40,429
machinery

00:24:55,250 --> 00:25:01,190
I was wondering are you inspecting or

00:24:58,520 --> 00:25:04,040
solar user files or you're using home

00:25:01,190 --> 00:25:06,260
directories for example sorry I didn't

00:25:04,040 --> 00:25:08,360
get your during the in the system

00:25:06,260 --> 00:25:11,300
inspection if you inspect not only the

00:25:08,360 --> 00:25:13,910
system configuration but also use a

00:25:11,300 --> 00:25:19,400
configuration like user home directories

00:25:13,910 --> 00:25:23,300
and answer so that it depends what we

00:25:19,400 --> 00:25:25,820
what you call configuration what we call

00:25:23,300 --> 00:25:30,260
configuration is files which are marked

00:25:25,820 --> 00:25:32,300
as configuration file in rpm so if there

00:25:30,260 --> 00:25:35,080
are files in your home directory they

00:25:32,300 --> 00:25:38,180
are likely not to be marked as rpm files

00:25:35,080 --> 00:25:41,120
rpm configuration files so they won't

00:25:38,180 --> 00:25:44,120
show up there but they will show up for

00:25:41,120 --> 00:25:50,540
example as unaged file if you inspect it

00:25:44,120 --> 00:25:55,670
like that I managed file how do you

00:25:50,540 --> 00:25:59,810
inspect what if it's because I expected

00:25:55,670 --> 00:26:02,060
our numero so files under some for it on

00:25:59,810 --> 00:26:05,450
some time longer running system which

00:26:02,060 --> 00:26:09,020
show by our and packaged anywhere so you

00:26:05,450 --> 00:26:11,630
list all of them well they're different

00:26:09,020 --> 00:26:18,050
approaches first of all we can list all

00:26:11,630 --> 00:26:21,620
of them if they are in one directory so

00:26:18,050 --> 00:26:24,140
a directory which contains files which

00:26:21,620 --> 00:26:28,610
are unmanaged then we list the directory

00:26:24,140 --> 00:26:30,980
and we can also apply filters so if you

00:26:28,610 --> 00:26:34,400
see too many files and want to filter

00:26:30,980 --> 00:26:36,260
out some some files because you want to

00:26:34,400 --> 00:26:39,700
have a better overview then you can also

00:26:36,260 --> 00:26:39,700
apply filters before you show them

00:26:44,169 --> 00:26:51,480
any more questions there's another

00:26:49,029 --> 00:26:51,480
question

00:26:56,150 --> 00:27:02,450
could you tell more how about technology

00:26:59,000 --> 00:27:06,710
you already mentioned Ruby yeah so your

00:27:02,450 --> 00:27:10,640
data storage such things but sure could

00:27:06,710 --> 00:27:12,860
be quick maybe general yeah so let's

00:27:10,640 --> 00:27:16,610
have a look so our software is

00:27:12,860 --> 00:27:17,600
implemented in Ruby so that means you

00:27:16,610 --> 00:27:21,200
need the Ruby stack on your

00:27:17,600 --> 00:27:22,850
administrator machine and restore the

00:27:21,200 --> 00:27:25,910
system descriptions in the home

00:27:22,850 --> 00:27:29,420
directory of the administrator runs the

00:27:25,910 --> 00:27:31,190
tool you don't need to run it as root it

00:27:29,420 --> 00:27:34,390
can be run as a normal user but you need

00:27:31,190 --> 00:27:38,570
root access to the target machine and

00:27:34,390 --> 00:27:41,960
they are stored in a directory dot

00:27:38,570 --> 00:27:47,200
machinery and the home directory and for

00:27:41,960 --> 00:27:52,310
example this file contains all the

00:27:47,200 --> 00:27:55,430
information of the system description so

00:27:52,310 --> 00:28:00,830
this chase and file is the system

00:27:55,430 --> 00:28:04,760
description and there are also some

00:28:00,830 --> 00:28:06,700
directories change manage files config

00:28:04,760 --> 00:28:09,950
files and unmanaged files that's where

00:28:06,700 --> 00:28:12,080
these files are exported so we have

00:28:09,950 --> 00:28:14,510
always a system description which

00:28:12,080 --> 00:28:22,150
contains all data to replicate the

00:28:14,510 --> 00:28:22,150
system you will come

00:28:30,370 --> 00:28:40,930
is it possible to hook machinery up to

00:28:35,670 --> 00:28:46,200
an orchestration tool like salt or or

00:28:40,930 --> 00:28:49,930
something like that to fix any gaps

00:28:46,200 --> 00:28:52,300
that's that's exactly what we want to do

00:28:49,930 --> 00:28:56,340
we want to fill the gaps and there are

00:28:52,300 --> 00:28:59,430
already some some sort of research how

00:28:56,340 --> 00:29:01,930
machinery could work together result

00:28:59,430 --> 00:29:05,230
that we don't want to narrow it down to

00:29:01,930 --> 00:29:08,620
salt but we want to make it to fit two

00:29:05,230 --> 00:29:10,510
different tools that that's a good

00:29:08,620 --> 00:29:14,170
question and yes we want to work

00:29:10,510 --> 00:29:18,600
together with other tools and provide

00:29:14,170 --> 00:29:18,600
machinery as part of tool kit

00:29:22,590 --> 00:29:28,350
I see quite a similarity with the

00:29:25,830 --> 00:29:31,049
pressure how do you relate to out to us

00:29:28,350 --> 00:29:34,559
and God's the biggest difference between

00:29:31,049 --> 00:29:37,620
missionary out to us so when it comes to

00:29:34,559 --> 00:29:40,169
alter guest we we can export all the

00:29:37,620 --> 00:29:44,370
nest so for example we can inspect a

00:29:40,169 --> 00:29:50,400
system and export auto yes that's one

00:29:44,370 --> 00:29:53,400
thing and there's some differences in

00:29:50,400 --> 00:29:55,350
august compared to machineries system

00:29:53,400 --> 00:29:58,130
descriptions cause system prescriptions

00:29:55,350 --> 00:30:02,340
they describe a system so that's

00:29:58,130 --> 00:30:06,330
description while a auto yes profile

00:30:02,340 --> 00:30:10,590
contains lot chicks like if there's more

00:30:06,330 --> 00:30:15,990
than one network hard make it a router

00:30:10,590 --> 00:30:18,539
if it contains more than five discs make

00:30:15,990 --> 00:30:21,090
it a storage so audrius profiles can

00:30:18,539 --> 00:30:25,279
have some logic in it while the system

00:30:21,090 --> 00:30:25,279
description just describes in the system

00:30:31,090 --> 00:30:37,330
if there are no more questions one

00:30:34,180 --> 00:30:41,400
question myself if I understood you

00:30:37,330 --> 00:30:44,110
correctly there's two ways that you can

00:30:41,400 --> 00:30:49,060
inspect the system state one is by

00:30:44,110 --> 00:30:51,280
comparing the list of RPM files

00:30:49,060 --> 00:30:53,080
installed against any changes towards

00:30:51,280 --> 00:30:55,870
their configuration files and the other

00:30:53,080 --> 00:30:59,770
one is by comparing two system

00:30:55,870 --> 00:31:02,370
description is that correct so far yes

00:30:59,770 --> 00:31:06,670
so we can create a system description

00:31:02,370 --> 00:31:08,650
which contains list of files different

00:31:06,670 --> 00:31:13,090
sorts so files like configuration files

00:31:08,650 --> 00:31:16,450
contains a list of packages and also the

00:31:13,090 --> 00:31:18,640
files which don't belong two packages so

00:31:16,450 --> 00:31:20,200
that's one system description and then

00:31:18,640 --> 00:31:23,650
we can compare different systems

00:31:20,200 --> 00:31:25,840
descriptions to each other so for

00:31:23,650 --> 00:31:30,640
example two different systems can be

00:31:25,840 --> 00:31:33,370
compared or one system at point x and

00:31:30,640 --> 00:31:35,920
time to point y in time so you can see

00:31:33,370 --> 00:31:37,750
what has changed over the time for that

00:31:35,920 --> 00:31:40,240
to work you need to have previously

00:31:37,750 --> 00:31:42,310
executed the inspect step on on that

00:31:40,240 --> 00:31:45,910
machine like you mentioned for your

00:31:42,310 --> 00:31:47,620
virtual brother might it make sense to

00:31:45,910 --> 00:31:50,410
actually integrate that functionality

00:31:47,620 --> 00:31:51,820
into say the opensuse installer or

00:31:50,410 --> 00:31:53,880
something so that such system

00:31:51,820 --> 00:31:56,440
descriptions are saved automatically at

00:31:53,880 --> 00:31:58,960
system point a certain point in time or

00:31:56,440 --> 00:32:01,450
to have like a package checked in to

00:31:58,960 --> 00:32:04,450
open to the factory that contains like

00:32:01,450 --> 00:32:06,760
for a certain tumbleweed release the set

00:32:04,450 --> 00:32:09,730
of packages that is supposed to contain

00:32:06,760 --> 00:32:12,460
or something like that yeah that's this

00:32:09,730 --> 00:32:16,150
template approach that might be a nice

00:32:12,460 --> 00:32:19,180
thing to have templates how certain

00:32:16,150 --> 00:32:23,140
systems should look like as a minimal

00:32:19,180 --> 00:32:25,900
requirement so you can compare and your

00:32:23,140 --> 00:32:27,430
other idea of having a system

00:32:25,900 --> 00:32:29,950
description created during installation

00:32:27,430 --> 00:32:32,470
it's also a nice idea like this clone

00:32:29,950 --> 00:32:34,420
the system for all the yest check box in

00:32:32,470 --> 00:32:38,590
the installer to have a similar check

00:32:34,420 --> 00:32:40,770
box for create a system description nice

00:32:38,590 --> 00:32:40,770
idea

00:32:45,899 --> 00:32:52,480
at the beginning there's a use case that

00:32:49,779 --> 00:32:54,460
you have desktop and you have some

00:32:52,480 --> 00:32:58,919
laptop and wanted to have those same

00:32:54,460 --> 00:33:01,600
systems on laptop yeah how do you solve

00:32:58,919 --> 00:33:05,049
hardware differences for example my

00:33:01,600 --> 00:33:09,820
desktop have common booth but my laptop

00:33:05,049 --> 00:33:11,799
use ufi and I have unlocked up some of

00:33:09,820 --> 00:33:15,489
our management tools that's not on

00:33:11,799 --> 00:33:17,859
desktop and such differences so when the

00:33:15,489 --> 00:33:19,749
current approach is more a manual

00:33:17,859 --> 00:33:22,359
approach so you set up a machine and

00:33:19,749 --> 00:33:25,509
then you want to find out what exactly

00:33:22,359 --> 00:33:27,909
do I need to configure so this tool will

00:33:25,509 --> 00:33:30,429
show you the configuration files you

00:33:27,909 --> 00:33:32,889
need to port to your other system and it

00:33:30,429 --> 00:33:34,570
will also give you the packages which

00:33:32,889 --> 00:33:38,320
you also want to install on the on the

00:33:34,570 --> 00:33:42,999
other host if there are architecture

00:33:38,320 --> 00:33:44,980
changes also you as a administrator need

00:33:42,999 --> 00:33:47,139
to know what to do but this tool will

00:33:44,980 --> 00:33:49,299
assist you with a lot of information

00:33:47,139 --> 00:33:52,779
which you could also find out on

00:33:49,299 --> 00:33:56,489
yourself with a lot of effort or with

00:33:52,779 --> 00:33:56,489
machinery very easily

00:34:06,010 --> 00:34:12,960
so thank you and if you have any more

00:34:08,200 --> 00:34:12,960

YouTube URL: https://www.youtube.com/watch?v=8EyEMBdC8ig


