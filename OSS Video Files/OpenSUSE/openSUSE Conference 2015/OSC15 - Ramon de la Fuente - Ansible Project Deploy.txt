Title: OSC15 - Ramon de la Fuente - Ansible Project Deploy
Publication date: 2015-05-03
Playlist: openSUSE Conference 2015
Description: 
	Ansible is a provisioning tool rapidly growing in popularity, mainly due to it’s simplicity. But it’s capable of more than just provisioning! In this talk, I’ll walk you through an Ansible role that can be used to deploy your projects. Those familiar with Capistrano wil recognize the method, but I’ll explain it step by step and in the end I’ll show a real-world example from a Symfony2 project: the SweetlakePHP website. (this talk assumes some knowledge of how Ansible works)

After this talk, you should be able to use the featured role to deploy your projects, as well as write your own based on the Ansible deploy_helper module.
Captions: 
	00:00:00,000 --> 00:00:06,690
um welcome to this talk it's called an

00:00:03,419 --> 00:00:08,040
ansible project deploy and because of

00:00:06,690 --> 00:00:11,070
the vagueness of the title I have a

00:00:08,040 --> 00:00:16,560
subtitle called a reusable uncibal roll

00:00:11,070 --> 00:00:20,250
to deploy your project who here uses

00:00:16,560 --> 00:00:22,820
ansible all right so quite a few that's

00:00:20,250 --> 00:00:26,910
good you use it for provisioning mainly

00:00:22,820 --> 00:00:28,470
do you deploy software with it not

00:00:26,910 --> 00:00:31,349
really all right okay well that's what

00:00:28,470 --> 00:00:32,460
this talk is about so that's good the

00:00:31,349 --> 00:00:33,840
talk assumes a little bit of knowledge

00:00:32,460 --> 00:00:37,140
about on suppose so that's why I asked

00:00:33,840 --> 00:00:42,090
the question so first a little bit about

00:00:37,140 --> 00:00:43,950
me my name is ramon de la Fuente and I I

00:00:42,090 --> 00:00:48,360
don't have a fetish for underscores but

00:00:43,950 --> 00:00:49,829
this is my twitter handle all the good

00:00:48,360 --> 00:00:52,350
names were taken let's just leave it

00:00:49,829 --> 00:00:54,690
leave it at that I run my own company I

00:00:52,350 --> 00:00:57,210
have for eight years now it's called

00:00:54,690 --> 00:01:01,710
future 500 in space in suit aamir so

00:00:57,210 --> 00:01:04,920
real close by and in my spare time if I

00:01:01,710 --> 00:01:07,799
have any I run a user group called sweet

00:01:04,920 --> 00:01:09,090
like PHP also into tamir and we actually

00:01:07,799 --> 00:01:12,330
have a session tonight so if you're

00:01:09,090 --> 00:01:14,490
interested you can join us after I I

00:01:12,330 --> 00:01:19,710
think about eight if you're not leaving

00:01:14,490 --> 00:01:23,670
the venue ansible project deploy so

00:01:19,710 --> 00:01:27,740
first off why ansible we use on table

00:01:23,670 --> 00:01:27,740
for provisioning and for us it was a

00:01:27,860 --> 00:01:32,720
discovery to find a provisioning tool

00:01:30,180 --> 00:01:37,229
that could that we could understand and

00:01:32,720 --> 00:01:39,119
the writer of of ansible said I I needed

00:01:37,229 --> 00:01:40,560
to write on so because the existing

00:01:39,119 --> 00:01:42,409
tools didn't fit my brain which is

00:01:40,560 --> 00:01:47,729
exactly how I felt when I used puppet

00:01:42,409 --> 00:01:50,640
who uses puppet do you love puppet it

00:01:47,729 --> 00:01:53,250
does the job right well answerable was a

00:01:50,640 --> 00:01:57,600
weird developers to make that first off

00:01:53,250 --> 00:01:59,969
make that clear we're not we're def ups

00:01:57,600 --> 00:02:03,060
right so we do development mostly and we

00:01:59,969 --> 00:02:05,130
have to do the ops and we love uncibal

00:02:03,060 --> 00:02:07,110
because it fits with our way of working

00:02:05,130 --> 00:02:08,970
and for us because we did provisioning

00:02:07,110 --> 00:02:10,780
actually extending the toolkit to

00:02:08,970 --> 00:02:14,319
deploys made sense

00:02:10,780 --> 00:02:16,600
so it's easy that's basically our main

00:02:14,319 --> 00:02:18,550
reason there is no unnecessary

00:02:16,600 --> 00:02:21,430
complexity in on ssible you have no

00:02:18,550 --> 00:02:23,200
agent right everything goes over SSH so

00:02:21,430 --> 00:02:29,080
you just have a box on the other side

00:02:23,200 --> 00:02:31,239
and it'll work it's built for reuse

00:02:29,080 --> 00:02:33,660
which means you write some roles and you

00:02:31,239 --> 00:02:36,160
can share these rules quite easily and

00:02:33,660 --> 00:02:39,010
that was a big plus for us because we

00:02:36,160 --> 00:02:41,680
use the roles and different setups in

00:02:39,010 --> 00:02:44,290
different ways because every project has

00:02:41,680 --> 00:02:47,260
its own provisioning so sharing the

00:02:44,290 --> 00:02:49,120
rules was a big plus and it's actually

00:02:47,260 --> 00:02:51,580
extendable in your own language so you

00:02:49,120 --> 00:02:54,310
could like we're PHP developers you

00:02:51,580 --> 00:02:56,050
could write ansible modules in PHP we'd

00:02:54,310 --> 00:02:58,830
never actually done that because python

00:02:56,050 --> 00:03:01,180
is such a nice language to write in but

00:02:58,830 --> 00:03:02,890
well you could if you wanted to because

00:03:01,180 --> 00:03:05,620
the way on civil works is it just copies

00:03:02,890 --> 00:03:06,970
a module over to the other side and runs

00:03:05,620 --> 00:03:08,650
it with the parameters that you can

00:03:06,970 --> 00:03:12,760
figure it with and that should do

00:03:08,650 --> 00:03:14,829
everything so this is basically why we

00:03:12,760 --> 00:03:17,709
use ansible but which problem are we

00:03:14,829 --> 00:03:23,110
solving now with deployments with with

00:03:17,709 --> 00:03:26,019
ansible well first off we want to deploy

00:03:23,110 --> 00:03:28,090
at the press of a button we want our

00:03:26,019 --> 00:03:30,790
deployment process to be fully automated

00:03:28,090 --> 00:03:32,410
there's no need to do a manual step

00:03:30,790 --> 00:03:34,780
anywhere in between you have a new

00:03:32,410 --> 00:03:37,870
version you just press a button or your

00:03:34,780 --> 00:03:42,549
CI chain presses the button for you and

00:03:37,870 --> 00:03:44,470
you deploy to production besides that

00:03:42,549 --> 00:03:46,720
you need to be able to maintain the

00:03:44,470 --> 00:03:48,459
deploy procedure easily we found that

00:03:46,720 --> 00:03:51,370
I've been having a deployed procedure

00:03:48,459 --> 00:03:53,320
that was complex that meant like the

00:03:51,370 --> 00:03:56,109
senior developer had to look at it or

00:03:53,320 --> 00:03:58,239
change it but anyone could change the

00:03:56,109 --> 00:04:00,430
parameters of the project so then the

00:03:58,239 --> 00:04:01,980
provisioning needs to be changed or the

00:04:00,430 --> 00:04:04,390
deployment process needs to be changed

00:04:01,980 --> 00:04:07,450
we found that with ensemble it was quite

00:04:04,390 --> 00:04:09,400
easy to have any developer be able to

00:04:07,450 --> 00:04:11,109
change their their their setup for the

00:04:09,400 --> 00:04:12,790
project and also change the deployment

00:04:11,109 --> 00:04:16,930
script in a single commit which is

00:04:12,790 --> 00:04:19,450
something we we we love it has a small

00:04:16,930 --> 00:04:23,169
learning curve this basically is the

00:04:19,450 --> 00:04:23,960
easy thing all over again and we need to

00:04:23,169 --> 00:04:26,210
Ryu

00:04:23,960 --> 00:04:28,520
the deployment procedure between

00:04:26,210 --> 00:04:30,319
projects as easy as possible you don't

00:04:28,520 --> 00:04:33,319
want to reinvent your deployment every

00:04:30,319 --> 00:04:36,020
time you have a new project so this is

00:04:33,319 --> 00:04:37,729
the problem we looked at and we we used

00:04:36,020 --> 00:04:40,819
Capistrano before who here uses

00:04:37,729 --> 00:04:44,900
Capistrano anyone do you yeah all right

00:04:40,819 --> 00:04:46,580
so that's a tool in Ruby to do the same

00:04:44,900 --> 00:04:48,470
thing basically to deploy your project

00:04:46,580 --> 00:04:54,220
but that's just configuration for a

00:04:48,470 --> 00:04:54,220
project and the tool hat does the rest

00:04:58,090 --> 00:05:03,380
reusing it between projects for us were

00:05:01,400 --> 00:05:05,780
meant that we had to copy a little bit

00:05:03,380 --> 00:05:08,599
the wake up Capistrano that does things

00:05:05,780 --> 00:05:14,229
in an ansible role and that's basically

00:05:08,599 --> 00:05:17,389
what we built before we talked about

00:05:14,229 --> 00:05:19,430
well at the actual role let's define a

00:05:17,389 --> 00:05:25,340
little bit about what what a deployment

00:05:19,430 --> 00:05:27,740
is or what we feel a deployment is first

00:05:25,340 --> 00:05:29,720
off if you use Capistrano you'll

00:05:27,740 --> 00:05:31,669
recognize the directory structure we use

00:05:29,720 --> 00:05:33,770
a directory structure where you have a

00:05:31,669 --> 00:05:37,729
folder a root folder for your project

00:05:33,770 --> 00:05:40,940
and then a releases folder and in the

00:05:37,729 --> 00:05:43,250
releases folder you'll have for each

00:05:40,940 --> 00:05:46,940
deploy that you do a time-stamped folder

00:05:43,250 --> 00:05:49,219
with that release next to that is a

00:05:46,940 --> 00:05:51,080
shared folder and the shared folder will

00:05:49,219 --> 00:05:53,180
contain anything that needs to be

00:05:51,080 --> 00:05:55,070
maintained between releases for example

00:05:53,180 --> 00:05:57,110
if your users upload files and you keep

00:05:55,070 --> 00:05:59,270
them in your project this way then you

00:05:57,110 --> 00:06:01,789
don't want every deploy to remove the

00:05:59,270 --> 00:06:03,440
files or other or session files maybe if

00:06:01,789 --> 00:06:07,210
you have sessions in your application

00:06:03,440 --> 00:06:07,210
you want to keep those between deploys

00:06:07,270 --> 00:06:13,940
there is a source folder inside the

00:06:09,919 --> 00:06:16,340
shared folder and that is the source

00:06:13,940 --> 00:06:18,289
code of your viewer of your application

00:06:16,340 --> 00:06:20,990
and you keep that in shared as well

00:06:18,289 --> 00:06:22,699
because you don't want to download or

00:06:20,990 --> 00:06:24,139
upload the entire source code every time

00:06:22,699 --> 00:06:25,460
you could just update it to the latest

00:06:24,139 --> 00:06:28,870
version or to the version you're

00:06:25,460 --> 00:06:32,539
deploying from where you're at and

00:06:28,870 --> 00:06:35,210
finally there is a current but the

00:06:32,539 --> 00:06:37,460
current is just a symlink it points to

00:06:35,210 --> 00:06:39,080
the release that is currently active

00:06:37,460 --> 00:06:41,120
and when you do a new deploy a new

00:06:39,080 --> 00:06:43,550
folder will be created but it won't

00:06:41,120 --> 00:06:45,229
automatically be the active one it only

00:06:43,550 --> 00:06:47,810
turns into the active one if the

00:06:45,229 --> 00:06:54,199
deployment procedure completes without

00:06:47,810 --> 00:06:57,229
errors breaking that down a little bit

00:06:54,199 --> 00:07:00,349
what is a deploy well if you break that

00:06:57,229 --> 00:07:02,210
into some steps you'll get first off you

00:07:00,349 --> 00:07:05,000
want to update the code base and this is

00:07:02,210 --> 00:07:07,940
the code base in the shared folder and

00:07:05,000 --> 00:07:10,479
then copy to a release folder and after

00:07:07,940 --> 00:07:13,280
that you might want to edit or change

00:07:10,479 --> 00:07:14,360
the configuration file specifically for

00:07:13,280 --> 00:07:16,310
the environment that you're deploying

00:07:14,360 --> 00:07:22,729
sometimes it would be staging sometimes

00:07:16,310 --> 00:07:24,380
production or whatever next up if you

00:07:22,729 --> 00:07:26,120
have that in order you want to install

00:07:24,380 --> 00:07:28,370
your dependencies because your codebase

00:07:26,120 --> 00:07:30,409
doesn't contain all the dependencies for

00:07:28,370 --> 00:07:32,710
your project right there are tons of

00:07:30,409 --> 00:07:35,360
other stuff in PHP land we use composer

00:07:32,710 --> 00:07:38,349
which is a package manager but there's

00:07:35,360 --> 00:07:44,330
also NPM and Bauer for front-end stuff

00:07:38,349 --> 00:07:46,340
that brings in the the libraries in

00:07:44,330 --> 00:07:48,289
depth and the code that you depend on in

00:07:46,340 --> 00:07:50,870
your application and you want your

00:07:48,289 --> 00:07:52,460
deploy to do that in a structured way so

00:07:50,870 --> 00:07:57,139
that it turns out the same every

00:07:52,460 --> 00:07:59,330
everywhere you do it the step three is

00:07:57,139 --> 00:08:03,860
preserved shared resources this means

00:07:59,330 --> 00:08:05,840
that you basically point the locations

00:08:03,860 --> 00:08:08,389
in your project that need to be

00:08:05,840 --> 00:08:09,979
maintained like the sessions folder

00:08:08,389 --> 00:08:12,469
maybe or the uploads folder you point

00:08:09,979 --> 00:08:17,570
that to the shared folder so then they

00:08:12,469 --> 00:08:21,430
stay preserved and finally in step 4

00:08:17,570 --> 00:08:24,469
you'll have some build tasks and this is

00:08:21,430 --> 00:08:27,280
compiling less and SAS maybe i'm not

00:08:24,469 --> 00:08:29,990
sure if you if you use those tools but

00:08:27,280 --> 00:08:32,270
anything that you want to run as a

00:08:29,990 --> 00:08:33,620
process after your code base is complete

00:08:32,270 --> 00:08:35,930
and you have all the dependencies there

00:08:33,620 --> 00:08:40,370
those are billed tasks in step 4 and

00:08:35,930 --> 00:08:43,370
when everything works then step 5 is

00:08:40,370 --> 00:08:46,430
finalized and it could be anything but

00:08:43,370 --> 00:08:48,230
it boils down to pointing the same link

00:08:46,430 --> 00:08:50,820
to the latest release and then you're

00:08:48,230 --> 00:08:53,160
done so these

00:08:50,820 --> 00:09:00,200
and this explanation there's a role for

00:08:53,160 --> 00:09:03,000
that and it's called a project deploy if

00:09:00,200 --> 00:09:08,060
you're familiar with ansible galaxy

00:09:03,000 --> 00:09:12,360
anyone yeah so uncibal galaxy is the

00:09:08,060 --> 00:09:14,940
repository collection for roles in

00:09:12,360 --> 00:09:15,960
uncibal that you can use so that you

00:09:14,940 --> 00:09:23,220
don't have to reinvent everything

00:09:15,960 --> 00:09:26,490
yourself and if you want to get the role

00:09:23,220 --> 00:09:30,210
from uncibal galaxy then you can run the

00:09:26,490 --> 00:09:33,480
install command that's this uncibal

00:09:30,210 --> 00:09:36,780
galaxy install probably if you use

00:09:33,480 --> 00:09:37,830
ansible galaxy already or if you start

00:09:36,780 --> 00:09:40,050
using it you want to have a

00:09:37,830 --> 00:09:42,720
configuration files that till uncibal

00:09:40,050 --> 00:09:46,470
which projects you depend on or which

00:09:42,720 --> 00:09:48,600
roles so here's an example file and you

00:09:46,470 --> 00:09:52,560
run that with uncibal galaxy install

00:09:48,600 --> 00:09:54,300
mean minus R dash R this is just a way

00:09:52,560 --> 00:09:56,580
to get the role so now you have it on

00:09:54,300 --> 00:10:01,290
your machine and I'll walk you through

00:09:56,580 --> 00:10:03,270
it 22 to map the task sensible to the

00:10:01,290 --> 00:10:06,930
steps the five steps that I just

00:10:03,270 --> 00:10:09,270
described I realize it's late and there

00:10:06,930 --> 00:10:11,400
is a lot of slides here which contain

00:10:09,270 --> 00:10:13,080
ansible code which you're probably not

00:10:11,400 --> 00:10:17,340
familiar with if you don't use it so

00:10:13,080 --> 00:10:19,320
I'll go through the little faster the

00:10:17,340 --> 00:10:22,920
first slide here shows you like

00:10:19,320 --> 00:10:24,510
initialize a task so ansibles is built

00:10:22,920 --> 00:10:28,650
up of roles and then inside the roles

00:10:24,510 --> 00:10:32,010
you'll have tasks that do certain steps

00:10:28,650 --> 00:10:34,560
and the first parameter for a see if I

00:10:32,010 --> 00:10:36,650
can do this the first parameter here

00:10:34,560 --> 00:10:40,080
it's already on the line sorry the

00:10:36,650 --> 00:10:42,240
deploy helper colon that's the name of

00:10:40,080 --> 00:10:43,740
the module that we're using and this

00:10:42,240 --> 00:10:47,550
module is actually written to do the

00:10:43,740 --> 00:10:49,200
deploys but if you read the ansible file

00:10:47,550 --> 00:10:51,690
you'll see that the first word is always

00:10:49,200 --> 00:10:53,880
the module that's being used so there is

00:10:51,690 --> 00:10:57,930
a deploy help or module and this module

00:10:53,880 --> 00:10:59,910
is available from galaxies separately so

00:10:57,930 --> 00:11:01,680
if you find that our role doesn't really

00:10:59,910 --> 00:11:03,300
match what you're doing but you would

00:11:01,680 --> 00:11:06,089
like to have some of the

00:11:03,300 --> 00:11:09,060
Croft removed from your your your own

00:11:06,089 --> 00:11:12,510
scripts like creating the directory

00:11:09,060 --> 00:11:14,670
structure that we're using the module

00:11:12,510 --> 00:11:18,060
does that for you so if you want to use

00:11:14,670 --> 00:11:19,800
the module separately you can first off

00:11:18,060 --> 00:11:21,570
when we run this it's initialized it

00:11:19,800 --> 00:11:23,399
will create the root folder and the

00:11:21,570 --> 00:11:25,980
shared folder and the religious folder

00:11:23,399 --> 00:11:27,630
and it will gather some facts also

00:11:25,980 --> 00:11:30,600
something that's ansible specific but

00:11:27,630 --> 00:11:32,670
gathering facts means that some

00:11:30,600 --> 00:11:36,000
variables are are collected that you can

00:11:32,670 --> 00:11:38,790
use in subsequent tasks the variables

00:11:36,000 --> 00:11:40,740
here this is the entire list not all of

00:11:38,790 --> 00:11:42,630
them are really interesting especially a

00:11:40,740 --> 00:11:47,690
project path which is the one you put in

00:11:42,630 --> 00:11:50,100
yourself it's only useful to have a

00:11:47,690 --> 00:11:51,500
similar way of gather are using the

00:11:50,100 --> 00:11:54,959
variable so everything looks the same

00:11:51,500 --> 00:11:59,310
this one is the most interesting the new

00:11:54,959 --> 00:12:01,079
release this is a fact that is generated

00:11:59,310 --> 00:12:03,029
by the module if you don't pass it

00:12:01,079 --> 00:12:07,680
through pass it in yourself and this is

00:12:03,029 --> 00:12:09,990
a time stamp it it actually takes three

00:12:07,680 --> 00:12:12,000
talks announced able to to create a time

00:12:09,990 --> 00:12:13,829
stamp and to save it in a variable and

00:12:12,000 --> 00:12:16,190
to use it later so having the module

00:12:13,829 --> 00:12:21,899
generated for you is actually quite nice

00:12:16,190 --> 00:12:23,520
um so and if you use this role then

00:12:21,899 --> 00:12:25,770
you'll have or if you use the variable

00:12:23,520 --> 00:12:27,690
than you you'll you'll have the the name

00:12:25,770 --> 00:12:28,950
of the module dot and then the name of

00:12:27,690 --> 00:12:32,910
the variable you see that in the lower

00:12:28,950 --> 00:12:35,130
line also interesting maybe is the

00:12:32,910 --> 00:12:37,709
unfinished file name we have a file that

00:12:35,130 --> 00:12:40,230
gets created during a deploy inside the

00:12:37,709 --> 00:12:42,329
release folder and this file as long as

00:12:40,230 --> 00:12:46,470
it exists it signifies that your deploy

00:12:42,329 --> 00:12:48,420
wasn't finished correctly so that in a

00:12:46,470 --> 00:12:50,850
cleanup task later on when you remove

00:12:48,420 --> 00:12:52,740
all folders that are not that are not

00:12:50,850 --> 00:12:56,250
really releases then you can just remove

00:12:52,740 --> 00:12:58,350
that folder because we know that it

00:12:56,250 --> 00:13:00,060
wasn't a proper deploy and you can never

00:12:58,350 --> 00:13:06,360
make a symlink that points to a folder

00:13:00,060 --> 00:13:10,350
that has that that file in it Oh moving

00:13:06,360 --> 00:13:13,500
on and a lot of code again interesting

00:13:10,350 --> 00:13:15,630
here is that the role it does a lot of

00:13:13,500 --> 00:13:16,649
stuff for you so it's what you when you

00:13:15,630 --> 00:13:18,569
start using this

00:13:16,649 --> 00:13:20,519
you'll just have to configure it to do

00:13:18,569 --> 00:13:22,889
what you want so what I'm showing you

00:13:20,519 --> 00:13:24,600
here is the tasks inside so you'll know

00:13:22,889 --> 00:13:26,279
what to configure later on and the most

00:13:24,600 --> 00:13:28,589
interesting part here is the fact that

00:13:26,279 --> 00:13:31,199
you can choose a strategy for deploying

00:13:28,589 --> 00:13:33,029
so but where does your code come from

00:13:31,199 --> 00:13:36,949
and in this case you can choose either

00:13:33,029 --> 00:13:42,509
get or synchronize which is an rsync or

00:13:36,949 --> 00:13:44,339
I think someone added AWS so there's

00:13:42,509 --> 00:13:45,720
there's multiple places where you can

00:13:44,339 --> 00:13:47,730
keep your code and if you have your code

00:13:45,720 --> 00:13:51,319
there then you can use this rule to

00:13:47,730 --> 00:13:51,319
deploy by just configuring it properly

00:13:52,970 --> 00:13:59,639
if you look at this slide you'll see

00:13:56,220 --> 00:14:03,449
that the version is something that you

00:13:59,639 --> 00:14:07,709
pass on as a variable so if you want to

00:14:03,449 --> 00:14:10,559
deploy version like V 1 point 0 of your

00:14:07,709 --> 00:14:14,959
project then you pass that along in the

00:14:10,559 --> 00:14:14,959
in the calling of the deployment tool

00:14:18,559 --> 00:14:23,100
yeah updating the codebase these are

00:14:20,970 --> 00:14:24,990
just the tasks that make sure that the

00:14:23,100 --> 00:14:30,809
code comes from the source that you you

00:14:24,990 --> 00:14:33,959
you that you configured and that it's

00:14:30,809 --> 00:14:37,110
it's inside a new deployment folder and

00:14:33,959 --> 00:14:39,209
that it's going to be used later on and

00:14:37,110 --> 00:14:41,040
so step one is updating the code base

00:14:39,209 --> 00:14:43,499
with also updating your configuration

00:14:41,040 --> 00:14:50,009
files and with this role you can choose

00:14:43,499 --> 00:14:51,839
either the files or the copy module of

00:14:50,009 --> 00:14:54,089
unstable or the template module of

00:14:51,839 --> 00:14:58,649
ansible and the latter ones is more

00:14:54,089 --> 00:15:00,360
logical for configuration files to just

00:14:58,649 --> 00:15:02,699
have a list of templates that you want

00:15:00,360 --> 00:15:04,139
to use and you pass that list along to

00:15:02,699 --> 00:15:06,540
the role and it'll make sure that those

00:15:04,139 --> 00:15:14,639
files get to the end destination and

00:15:06,540 --> 00:15:16,589
that your variables are set inside step

00:15:14,639 --> 00:15:18,869
to installing dependencies these are the

00:15:16,589 --> 00:15:20,759
dependency managers that are included in

00:15:18,869 --> 00:15:23,819
the role so if you use this role and you

00:15:20,759 --> 00:15:26,399
have composer you just set a variable to

00:15:23,819 --> 00:15:28,829
project has composer to true which means

00:15:26,399 --> 00:15:30,120
that the role will know when the time

00:15:28,829 --> 00:15:32,339
comes to run a composer

00:15:30,120 --> 00:15:40,290
install and the same goes for NPM and

00:15:32,339 --> 00:15:42,890
Bauer if you have a specialized way of

00:15:40,290 --> 00:15:46,350
calling your your dependency managers

00:15:42,890 --> 00:15:47,760
the the command that's run itself is

00:15:46,350 --> 00:15:50,400
also a variable so if you want to

00:15:47,760 --> 00:15:52,050
override that you could but they're all

00:15:50,400 --> 00:15:56,880
set in defaults and they're pretty

00:15:52,050 --> 00:15:58,500
showing defaults so steps so now the

00:15:56,880 --> 00:16:00,630
configuration files are in order right

00:15:58,500 --> 00:16:02,850
and the source code is there so we can

00:16:00,630 --> 00:16:05,820
move on to step three which is the

00:16:02,850 --> 00:16:07,230
shared resources the way this role works

00:16:05,820 --> 00:16:09,420
is that it assumes that you want

00:16:07,230 --> 00:16:10,830
siblings from your project that the one

00:16:09,420 --> 00:16:13,760
that you are deploying to the shared

00:16:10,830 --> 00:16:16,350
folder so you pass along a list of

00:16:13,760 --> 00:16:20,180
sources and destinations for those links

00:16:16,350 --> 00:16:20,180
and the rule will create those for you

00:16:21,680 --> 00:16:29,810
if we go to step 4 now we have the build

00:16:25,260 --> 00:16:32,370
steps these are the the build steps are

00:16:29,810 --> 00:16:34,560
really project specific all right

00:16:32,370 --> 00:16:36,390
because they're your own tools the steps

00:16:34,560 --> 00:16:38,850
that you want to run to make sure that

00:16:36,390 --> 00:16:43,260
everything is in order so what we've

00:16:38,850 --> 00:16:45,870
done here is we created a list or you

00:16:43,260 --> 00:16:49,050
can pass along a list of commands to run

00:16:45,870 --> 00:16:53,220
and they go to the command module which

00:16:49,050 --> 00:16:55,740
is just a good shell command that will

00:16:53,220 --> 00:16:59,520
do whatever you want it to do after the

00:16:55,740 --> 00:17:01,110
symlinks are in order so here's an

00:16:59,520 --> 00:17:03,510
example usage because this one is pretty

00:17:01,110 --> 00:17:05,400
vague the example usage here says that

00:17:03,510 --> 00:17:08,610
there are three commands that we run and

00:17:05,400 --> 00:17:10,110
if you know symphony in PHP this is

00:17:08,610 --> 00:17:13,260
pretty common framework if you know

00:17:10,110 --> 00:17:16,339
symphony then this is you'll recognize

00:17:13,260 --> 00:17:19,140
the commands that you run after you or

00:17:16,339 --> 00:17:20,640
before you can use your project so these

00:17:19,140 --> 00:17:26,100
are the build steps that you could you

00:17:20,640 --> 00:17:27,780
that you would commonly use also what

00:17:26,100 --> 00:17:30,150
you could place in here are things like

00:17:27,780 --> 00:17:32,160
schema upgrades because your database

00:17:30,150 --> 00:17:34,320
would won't always stay the same so if

00:17:32,160 --> 00:17:35,940
you want to if you want to upgrade your

00:17:34,320 --> 00:17:39,240
database schema then you could have a

00:17:35,940 --> 00:17:41,190
build command before you finalize that

00:17:39,240 --> 00:17:43,169
can upgrade your database schema for you

00:17:41,190 --> 00:17:44,759
and

00:17:43,169 --> 00:17:46,200
perhaps if you have a maintenance mode

00:17:44,759 --> 00:17:51,659
this is the moment where you want to add

00:17:46,200 --> 00:17:53,940
a maintenance mode too i may add a

00:17:51,659 --> 00:17:55,649
maintenance flag to your application so

00:17:53,940 --> 00:17:57,419
it knows that it can go down schema

00:17:55,649 --> 00:18:00,029
upgrade and then you can finalize and

00:17:57,419 --> 00:18:02,609
you'll be sure that you don't upgrade

00:18:00,029 --> 00:18:09,840
your database while you have people

00:18:02,609 --> 00:18:12,029
coming in the role ends here and it

00:18:09,840 --> 00:18:13,470
would replace the symlink which means

00:18:12,029 --> 00:18:16,470
that you don't have really have an

00:18:13,470 --> 00:18:18,029
option to do anything a special except

00:18:16,470 --> 00:18:19,470
those those those build commands that I

00:18:18,029 --> 00:18:21,269
described but if you do have something

00:18:19,470 --> 00:18:22,739
special and one thing that would be is

00:18:21,269 --> 00:18:25,639
like a schema upgrade could be more

00:18:22,739 --> 00:18:28,889
complicated than just running a script

00:18:25,639 --> 00:18:30,389
then you have a variable called Project

00:18:28,889 --> 00:18:33,720
finalized which you can set the false

00:18:30,389 --> 00:18:36,859
which means this role will end its work

00:18:33,720 --> 00:18:39,960
at this point and you have a choice to

00:18:36,859 --> 00:18:41,879
to have special scripts or additional

00:18:39,960 --> 00:18:43,590
ansible scripts that do that do work and

00:18:41,879 --> 00:18:45,749
then you'll do the finalized yourself

00:18:43,590 --> 00:18:48,119
like replacing the symlink after all the

00:18:45,749 --> 00:18:49,830
work is done so this role is open-ended

00:18:48,119 --> 00:18:51,749
and you can add to it you don't have to

00:18:49,830 --> 00:18:55,700
do it doesn't have to be a complete

00:18:51,749 --> 00:18:59,840
thing this slide is actually for me

00:18:55,700 --> 00:18:59,840
because of all the code

00:19:03,879 --> 00:19:12,969
I realize it's a half past five so there

00:19:10,839 --> 00:19:19,799
are it's not as bad as it seems this

00:19:12,969 --> 00:19:22,089
role has 98 lines of code 22 tasks and a

00:19:19,799 --> 00:19:24,539
couple of variables that you can set

00:19:22,089 --> 00:19:26,649
it's not complicated anyone can do it

00:19:24,539 --> 00:19:28,209
which means if you want to deploy your

00:19:26,649 --> 00:19:30,459
projects it's quite easy to just add a

00:19:28,209 --> 00:19:33,279
configuration and be done with it and

00:19:30,459 --> 00:19:35,139
have your deployment in order then then

00:19:33,279 --> 00:19:39,819
having to rewrite or reinvent the wheel

00:19:35,139 --> 00:19:41,799
every time so let's look at a minimal

00:19:39,819 --> 00:19:44,129
playbook that you could use and the

00:19:41,799 --> 00:19:46,599
PlayBook is the thing that runs ansible

00:19:44,129 --> 00:19:49,239
the thing that you write to deploy your

00:19:46,599 --> 00:19:51,069
project all you need in here are some

00:19:49,239 --> 00:19:55,239
variables so the minimum that you need

00:19:51,069 --> 00:19:56,709
to do is set some variables and add the

00:19:55,239 --> 00:20:01,749
role to your role section in the

00:19:56,709 --> 00:20:05,919
playbook and that would look like almost

00:20:01,749 --> 00:20:09,929
look like this this is all you need to

00:20:05,919 --> 00:20:13,209
do to deploy a project this will not do

00:20:09,929 --> 00:20:15,099
admittedly very useful stuff but it will

00:20:13,209 --> 00:20:18,489
make sure that the code on the other end

00:20:15,099 --> 00:20:20,139
is up to date there are no configuration

00:20:18,489 --> 00:20:21,669
files for templates so there is no

00:20:20,139 --> 00:20:23,079
configuration but it will be done and

00:20:21,669 --> 00:20:25,029
the symlink will be replaced and you

00:20:23,079 --> 00:20:29,619
have new version of your software online

00:20:25,029 --> 00:20:31,629
a more realistic example would be I

00:20:29,619 --> 00:20:34,839
mentioned sweet Lake PHP we have a

00:20:31,629 --> 00:20:39,819
website we deploy the website with this

00:20:34,839 --> 00:20:41,619
tool and this is this is the the

00:20:39,819 --> 00:20:44,019
playbook that we use to deploy sweet

00:20:41,619 --> 00:20:45,969
like PHP so again the first part is the

00:20:44,019 --> 00:20:47,379
same you have a project route this is

00:20:45,969 --> 00:20:50,440
different for every project so that's

00:20:47,379 --> 00:20:54,190
just a variable and we deploy from

00:20:50,440 --> 00:20:56,409
directly from get it's on github but we

00:20:54,190 --> 00:20:58,690
have an additional environment variable

00:20:56,409 --> 00:21:00,009
this environment is something that it's

00:20:58,690 --> 00:21:03,339
a regular environment variable but

00:21:00,009 --> 00:21:08,440
ansible uses this variable to to to run

00:21:03,339 --> 00:21:09,789
the build commands with so share

00:21:08,440 --> 00:21:11,529
children i mentioned share children

00:21:09,789 --> 00:21:14,169
those are just symlinks that point to

00:21:11,529 --> 00:21:16,470
the shared folder so here's the the list

00:21:14,169 --> 00:21:19,110
these are two with a path and

00:21:16,470 --> 00:21:20,730
that point to the uploads and the

00:21:19,110 --> 00:21:22,679
sessions which are the two examples that

00:21:20,730 --> 00:21:29,580
I mentioned that you would want to keep

00:21:22,679 --> 00:21:32,640
in a shared folder templates templates

00:21:29,580 --> 00:21:35,070
are for a symphony project is basically

00:21:32,640 --> 00:21:37,159
a parameters file also just a list of

00:21:35,070 --> 00:21:40,049
variables so there's a template that

00:21:37,159 --> 00:21:42,510
uploads and replaces all the variables

00:21:40,049 --> 00:21:45,179
for the for the stage that you are

00:21:42,510 --> 00:21:46,919
deploying and that's just three lines of

00:21:45,179 --> 00:21:50,940
configuration and the actual template

00:21:46,919 --> 00:21:53,309
that you need to write project has

00:21:50,940 --> 00:21:56,010
composer it's a PHP project and we use

00:21:53,309 --> 00:21:58,049
composer and the build commands and

00:21:56,010 --> 00:21:59,880
these are a little more elaborate than

00:21:58,049 --> 00:22:01,850
the three I showed before but this is

00:21:59,880 --> 00:22:05,130
just a list of commands that are run and

00:22:01,850 --> 00:22:09,270
finally you have to add the role to the

00:22:05,130 --> 00:22:14,010
role section otherwise boom work those

00:22:09,270 --> 00:22:16,500
who are still awake this line is the

00:22:14,010 --> 00:22:18,030
schema upgrade and it's just smack in

00:22:16,500 --> 00:22:19,500
the middle of some build commands it

00:22:18,030 --> 00:22:22,830
doesn't really if something goes wrong

00:22:19,500 --> 00:22:25,080
here then we're screwed so I wouldn't

00:22:22,830 --> 00:22:28,010
recommend doing this actually in

00:22:25,080 --> 00:22:30,630
production I mentioned that we do use it

00:22:28,010 --> 00:22:34,470
you have two reasons when you could do

00:22:30,630 --> 00:22:37,350
this one you're extremely lucky which

00:22:34,470 --> 00:22:39,270
are not fingers crossed deployment

00:22:37,350 --> 00:22:40,860
that's what we call this the other is if

00:22:39,270 --> 00:22:42,330
you have no visitors on your website and

00:22:40,860 --> 00:22:44,909
that's actually the case for sweet lake

00:22:42,330 --> 00:22:49,559
PHP so we can get away with this but

00:22:44,909 --> 00:22:51,630
don't do it in production what that's so

00:22:49,559 --> 00:22:53,610
that's what the role does right what

00:22:51,630 --> 00:22:56,370
doesn't it do I actually mentioned it

00:22:53,610 --> 00:23:00,120
doesn't do schema upgrades we chose not

00:22:56,370 --> 00:23:02,190
to add anything for specific database

00:23:00,120 --> 00:23:04,620
vendors or anything because schemas and

00:23:02,190 --> 00:23:08,070
databases are such a flavor of the month

00:23:04,620 --> 00:23:09,809
thing nowadays it's better to just use

00:23:08,070 --> 00:23:11,460
the open-endedness of the role and stop

00:23:09,809 --> 00:23:14,610
at the finalized and do your own thing

00:23:11,460 --> 00:23:16,890
afterwards it also doesn't do and

00:23:14,610 --> 00:23:20,070
Capistrano fans will won't like this but

00:23:16,890 --> 00:23:22,620
it doesn't do rollbacks ansible doesn't

00:23:20,070 --> 00:23:24,390
really work that way it describes a

00:23:22,620 --> 00:23:26,700
state of a machine how you want it to be

00:23:24,390 --> 00:23:29,940
and it doesn't really recognize how it

00:23:26,700 --> 00:23:32,639
was before so we roll back

00:23:29,940 --> 00:23:36,389
we personally say that the rollback is a

00:23:32,639 --> 00:23:38,220
lie what you want to do when you are

00:23:36,389 --> 00:23:40,620
deploying you want the deployment to

00:23:38,220 --> 00:23:42,779
fail at a certain state and you don't

00:23:40,620 --> 00:23:45,450
want to be bothered with it again it

00:23:42,779 --> 00:23:47,009
will stop and you will just deploy again

00:23:45,450 --> 00:23:48,840
if you discover what went wrong you'll

00:23:47,009 --> 00:23:51,120
fix it and you'll deploy again the

00:23:48,840 --> 00:23:56,970
previous deployment doesn't hurt and it

00:23:51,120 --> 00:23:58,409
will just be removed setting a

00:23:56,970 --> 00:24:00,000
maintenance mode also something that we

00:23:58,409 --> 00:24:02,759
didn't include in this role because it's

00:24:00,000 --> 00:24:04,289
you don't know which web servers if web

00:24:02,759 --> 00:24:07,110
servers are being used you don't know

00:24:04,289 --> 00:24:09,299
where the maintenance mode is set we

00:24:07,110 --> 00:24:11,039
personally use a just a regular file

00:24:09,299 --> 00:24:13,980
that exists and engine X will check for

00:24:11,039 --> 00:24:15,929
that but if you if you do it differently

00:24:13,980 --> 00:24:19,470
than you then you have to build that

00:24:15,929 --> 00:24:21,509
around this role so database migrations

00:24:19,470 --> 00:24:25,230
I mention still mentioned those it's not

00:24:21,509 --> 00:24:28,950
not to complicate this role so what's

00:24:25,230 --> 00:24:30,269
next for this role you could wear we've

00:24:28,950 --> 00:24:32,519
actually got a public press running that

00:24:30,269 --> 00:24:34,710
would allow you to inject your own tasks

00:24:32,519 --> 00:24:36,750
uncibal tasks at certain point this

00:24:34,710 --> 00:24:40,350
would be the callbacks that are familiar

00:24:36,750 --> 00:24:42,990
from from from Capistrano at a certain

00:24:40,350 --> 00:24:45,299
point in the role you want to do some

00:24:42,990 --> 00:24:46,620
specific task and if it doesn't match

00:24:45,299 --> 00:24:49,500
this right now you have to copy the

00:24:46,620 --> 00:24:53,220
entire roll and do write the whole thing

00:24:49,500 --> 00:24:55,649
yourself but as of like take next week

00:24:53,220 --> 00:24:57,240
next week you can just place a little

00:24:55,649 --> 00:24:58,799
script of a little a few a couple of

00:24:57,240 --> 00:25:00,539
ounce of all tasks at certain points in

00:24:58,799 --> 00:25:05,309
the process which makes it a lot more

00:25:00,539 --> 00:25:07,259
flexible we wanted to copy the vendor

00:25:05,309 --> 00:25:09,389
folders from previous releases because

00:25:07,259 --> 00:25:11,039
if you run a complete composer install

00:25:09,389 --> 00:25:12,419
or a dependency manager installed and

00:25:11,039 --> 00:25:13,950
you have all these dependencies that

00:25:12,419 --> 00:25:16,529
you've already got and now you're

00:25:13,950 --> 00:25:18,179
downloading them again that's actually

00:25:16,529 --> 00:25:22,250
done so there are three variables that

00:25:18,179 --> 00:25:26,129
mean that allow you to keep our copy

00:25:22,250 --> 00:25:30,840
composer and p.m. orb our installations

00:25:26,129 --> 00:25:34,800
from previous releases privileges are

00:25:30,840 --> 00:25:36,660
something that in every deploy you get a

00:25:34,800 --> 00:25:38,130
hung up on the privileges that you need

00:25:36,660 --> 00:25:39,990
for the web server to write the files

00:25:38,130 --> 00:25:42,090
but also your deploy user to write to

00:25:39,990 --> 00:25:45,300
the files and you don't want to mix

00:25:42,090 --> 00:25:49,140
those up we use acl's for that and i'd

00:25:45,300 --> 00:25:52,350
like to have a little bit of either an

00:25:49,140 --> 00:25:54,210
example or some some good tasks in there

00:25:52,350 --> 00:25:57,300
that can do that for you with a minimal

00:25:54,210 --> 00:25:59,730
configuration and finally we're open to

00:25:57,300 --> 00:26:03,110
ideas this role is it's open source

00:25:59,730 --> 00:26:06,140
obviously so pull requests are welcome

00:26:03,110 --> 00:26:11,670
it's in uncibal galaxy and it's just an

00:26:06,140 --> 00:26:14,040
LG PL licensed role thank you very much

00:26:11,670 --> 00:26:17,400
that's that's it for me I'm any

00:26:14,040 --> 00:26:22,530
questions and I think there's a mic if

00:26:17,400 --> 00:26:25,500
there are any questions no questions

00:26:22,530 --> 00:26:29,750
whatsoever I managed to get everyone to

00:26:25,500 --> 00:26:29,750

YouTube URL: https://www.youtube.com/watch?v=9VVb9j5ZFcA


