Title: OSC15 - Richard Brown - Testing Fedora in openQA
Publication date: 2015-05-04
Playlist: openSUSE Conference 2015
Description: 
	This session will be serve as an introduction to openQA and demonstrate how it can be used to write tests for more than just openSUSE and it's distributions. Using the example of Fedora Linux, this session will describe a methodology for designing an openQA test suite and give an guide on how attendees could go about building their own openQA test suites.
Attendees do not need any past experience with openQA or it's Perl-based Domain Specific Language, but it will help.
Captions: 
	00:00:01,460 --> 00:00:08,960
okay everybody hello again it's me I'm

00:00:06,480 --> 00:00:12,179
gonna talk to you this morning about

00:00:08,960 --> 00:00:15,030
testing fedora in open QE and in reality

00:00:12,179 --> 00:00:18,869
really talk to you just a bit about open

00:00:15,030 --> 00:00:21,000
QA what it can do how it does it and how

00:00:18,869 --> 00:00:25,109
you can write a test case or test suite

00:00:21,000 --> 00:00:28,109
for a kinky way in less than 24 hours so

00:00:25,109 --> 00:00:32,489
who in the room has actually worked with

00:00:28,109 --> 00:00:34,079
open QA written tests apart from you

00:00:32,489 --> 00:00:36,239
guys shaking your head that I know have

00:00:34,079 --> 00:00:37,500
done it so pretty much now I'm good

00:00:36,239 --> 00:00:39,780
because I'm going to start at the

00:00:37,500 --> 00:00:42,840
beginning explain what I think you I can

00:00:39,780 --> 00:00:44,730
do show you it in action in production

00:00:42,840 --> 00:00:49,980
with the opensuse builder opensuse

00:00:44,730 --> 00:00:51,690
instance of open Qi and then also tell

00:00:49,980 --> 00:00:53,640
the story of how i wrote a test suite

00:00:51,690 --> 00:00:57,600
for fedora while i was bored over the

00:00:53,640 --> 00:01:02,609
christmas vacation and we really bored

00:00:57,600 --> 00:01:03,629
and then actually how how that works how

00:01:02,609 --> 00:01:05,339
you can therefore use that kind of

00:01:03,629 --> 00:01:08,580
approach to write a test suite for

00:01:05,339 --> 00:01:11,280
anything rather quickly so what is open

00:01:08,580 --> 00:01:15,720
QA oh it's a distribution testing

00:01:11,280 --> 00:01:18,390
framework it's actually a any software

00:01:15,720 --> 00:01:20,720
testing framework we don't care which

00:01:18,390 --> 00:01:23,070
linux distribution you put in it

00:01:20,720 --> 00:01:25,170
obviously i'm going to talk about fedora

00:01:23,070 --> 00:01:27,509
we've also had android in running in

00:01:25,170 --> 00:01:31,290
there we also have windows running in

00:01:27,509 --> 00:01:33,990
open QA now so any operating system of

00:01:31,290 --> 00:01:37,979
any kind or the applications inside it

00:01:33,990 --> 00:01:41,400
can be tested with open QA it does

00:01:37,979 --> 00:01:43,920
graphical testing and console testing so

00:01:41,400 --> 00:01:45,630
in the in the graphically situation it's

00:01:43,920 --> 00:01:47,430
actually controlling the keyboard the

00:01:45,630 --> 00:01:49,320
mouse it's actually looking at the

00:01:47,430 --> 00:01:52,229
screen and able to do image analysis

00:01:49,320 --> 00:01:54,479
over the screen so we have this concept

00:01:52,229 --> 00:01:56,070
called needles where you basically

00:01:54,479 --> 00:01:58,770
define which areas of the screen you're

00:01:56,070 --> 00:02:00,479
interested in those are then stored and

00:01:58,770 --> 00:02:03,600
put up for comparison when the test run

00:02:00,479 --> 00:02:05,280
and it's doing an image image analysis

00:02:03,600 --> 00:02:06,750
on those portions of the screen other

00:02:05,280 --> 00:02:08,670
parts can change nothing else matters

00:02:06,750 --> 00:02:11,800
that you can actually have UI elements

00:02:08,670 --> 00:02:15,460
found so it's basically yeah software

00:02:11,800 --> 00:02:18,040
robot that has eyes fingers keyboards it

00:02:15,460 --> 00:02:19,630
can do all of that on the console side

00:02:18,040 --> 00:02:21,820
that's a little bit more traditional

00:02:19,630 --> 00:02:23,620
looking at a serial console throwing

00:02:21,820 --> 00:02:27,100
stuff into the command line seeing what

00:02:23,620 --> 00:02:28,890
gets out of it we use it in opensuse for

00:02:27,100 --> 00:02:32,080
building them main opensuse distribution

00:02:28,890 --> 00:02:36,000
we use it for tumbleweed and obviously

00:02:32,080 --> 00:02:40,060
sousa and now using it as well for sleep

00:02:36,000 --> 00:02:41,710
so it's really the magic behind the

00:02:40,060 --> 00:02:43,930
tumbleweed rolling distribution you know

00:02:41,710 --> 00:02:48,340
in the past we had factory actually was

00:02:43,930 --> 00:02:50,500
great but broke all the time and using

00:02:48,340 --> 00:02:52,480
open QA along with the staging process

00:02:50,500 --> 00:02:56,740
where things are tested before they get

00:02:52,480 --> 00:02:58,540
put into tumbleweed we've now turned it

00:02:56,740 --> 00:03:01,120
into a rolling release that everybody

00:02:58,540 --> 00:03:02,680
can use and it works with us and it

00:03:01,120 --> 00:03:05,950
really all thanks to open key right

00:03:02,680 --> 00:03:08,380
pretty much we test staging recess

00:03:05,950 --> 00:03:10,270
probably's test changes as they're

00:03:08,380 --> 00:03:13,180
coming in and then we test the entire

00:03:10,270 --> 00:03:14,380
distribution before we publish it so we

00:03:13,180 --> 00:03:16,120
know that individual change hasn't

00:03:14,380 --> 00:03:19,150
broken anything and we know that the

00:03:16,120 --> 00:03:21,820
entire distribution as a whole it works

00:03:19,150 --> 00:03:23,470
it boots all the applications we have

00:03:21,820 --> 00:03:25,270
test returns for it all start up they

00:03:23,470 --> 00:03:29,140
all do the things we've told it to test

00:03:25,270 --> 00:03:31,330
and that's why we can be so confident

00:03:29,140 --> 00:03:34,150
that the tumbleweed snapshots that we're

00:03:31,330 --> 00:03:35,620
now doing four or five times a week are

00:03:34,150 --> 00:03:38,370
actually going to work when you're

00:03:35,620 --> 00:03:38,370
running it on your machine

00:03:40,880 --> 00:03:46,310
so this is an example of an installation

00:03:44,750 --> 00:03:49,820
test I actually took the screenshot from

00:03:46,310 --> 00:03:51,700
solaris 11 etspeed before I don't know

00:03:49,820 --> 00:03:55,460
why I should've done opensuse really um

00:03:51,700 --> 00:03:57,230
but this is where open QA really started

00:03:55,460 --> 00:04:00,320
for us we needed to test the

00:03:57,230 --> 00:04:02,540
installation process in opensuse we need

00:04:00,320 --> 00:04:03,950
to have it testing Yost you haven't

00:04:02,540 --> 00:04:06,070
really got much of an event environment

00:04:03,950 --> 00:04:08,480
there when you start a machine up and

00:04:06,070 --> 00:04:10,250
everything's yeah everything's just

00:04:08,480 --> 00:04:11,870
being installed in the first place so I

00:04:10,250 --> 00:04:14,360
from QA is doing it all in the vm

00:04:11,870 --> 00:04:17,840
looking at that screen the top there

00:04:14,360 --> 00:04:20,420
that a with the mouse cursor there we go

00:04:17,840 --> 00:04:21,950
on this screen here this is just

00:04:20,420 --> 00:04:25,190
checking the installation settings

00:04:21,950 --> 00:04:26,540
screen in the Installer so the only part

00:04:25,190 --> 00:04:29,090
that we really care about because

00:04:26,540 --> 00:04:30,410
everything else can change below is does

00:04:29,090 --> 00:04:33,860
it say installation settings at the top

00:04:30,410 --> 00:04:36,620
so that green box is the the needle that

00:04:33,860 --> 00:04:38,180
we use in open QA if anything else

00:04:36,620 --> 00:04:40,220
change on this screen so if the theme

00:04:38,180 --> 00:04:43,520
changes the texture changes anywhere

00:04:40,220 --> 00:04:44,540
else it's not going to care so the nice

00:04:43,520 --> 00:04:46,820
thing with these tests we can be

00:04:44,540 --> 00:04:49,190
incredibly detailed on the parts of the

00:04:46,820 --> 00:04:51,800
UI that we care about because if this

00:04:49,190 --> 00:04:54,860
installation settings font changed much

00:04:51,800 --> 00:04:55,910
at all it would fail the test and we'd

00:04:54,860 --> 00:04:58,280
immediately know that that screens

00:04:55,910 --> 00:04:59,780
broken but all the other parts of the UI

00:04:58,280 --> 00:05:01,340
which we know might actually have

00:04:59,780 --> 00:05:04,040
changed there might be dynamic parts

00:05:01,340 --> 00:05:08,690
flying up we can just open curious ok

00:05:04,040 --> 00:05:10,400
ignore it that's fine move on we do

00:05:08,690 --> 00:05:12,230
exactly this we also do the same for the

00:05:10,400 --> 00:05:16,940
application testing this is obviously

00:05:12,230 --> 00:05:18,920
our test for Firefox and the box in the

00:05:16,940 --> 00:05:20,270
middle here which is incredibly fuzzy so

00:05:18,920 --> 00:05:25,130
I won't try and share it in too much

00:05:20,270 --> 00:05:27,710
detail actually is showing the version

00:05:25,130 --> 00:05:30,890
number section of the about page of

00:05:27,710 --> 00:05:33,470
Firefox and in the case of that we're

00:05:30,890 --> 00:05:35,780
not we're able to actually tune open QA

00:05:33,470 --> 00:05:37,160
a little bit more than that so the

00:05:35,780 --> 00:05:39,580
version number in there changes every

00:05:37,160 --> 00:05:42,170
time there's a new version of Firefox

00:05:39,580 --> 00:05:43,550
but because it's doing image matching

00:05:42,170 --> 00:05:45,860
and because we can tell it to do fuzzy

00:05:43,550 --> 00:05:47,950
image matching the fact the version

00:05:45,860 --> 00:05:50,900
number characters are changing numbers

00:05:47,950 --> 00:05:52,919
don't actually cause the test to fail

00:05:50,900 --> 00:05:54,750
so we don't have to go in here and

00:05:52,919 --> 00:05:57,000
update the screenshot every single time

00:05:54,750 --> 00:05:58,650
there's a new version of Firefox that's

00:05:57,000 --> 00:06:02,009
fine but if any of the other text

00:05:58,650 --> 00:06:03,389
changes we've noticed because the the

00:06:02,009 --> 00:06:06,569
difference would be higher than the

00:06:03,389 --> 00:06:08,090
three percent for that yeah I think

00:06:06,569 --> 00:06:11,190
we've said sort of you has to be

00:06:08,090 --> 00:06:15,120
ninety-seven percent accurate for for

00:06:11,190 --> 00:06:16,860
that test and like I said we also do an

00:06:15,120 --> 00:06:19,259
awful lot of console testing about a

00:06:16,860 --> 00:06:21,120
third of all of our tests are our

00:06:19,259 --> 00:06:22,560
console driven not looking at the UI not

00:06:21,120 --> 00:06:24,210
looking at the graphics at all nice

00:06:22,560 --> 00:06:26,940
traditional throw of something into the

00:06:24,210 --> 00:06:29,490
command line get something out and have

00:06:26,940 --> 00:06:31,050
a look at it over the serial console in

00:06:29,490 --> 00:06:32,099
open QA we still have this lovely web

00:06:31,050 --> 00:06:34,470
interface eager to have a nice

00:06:32,099 --> 00:06:35,990
screenshot but you know in the

00:06:34,470 --> 00:06:39,630
background it's doing all this wonderful

00:06:35,990 --> 00:06:42,750
geeky terminal staff words in this case

00:06:39,630 --> 00:06:44,280
looking at looking at curl making sure

00:06:42,750 --> 00:06:46,169
that the response comes out alright and

00:06:44,280 --> 00:06:51,720
reading that over the serial consoles of

00:06:46,169 --> 00:06:53,280
the test can pass so we have a rather

00:06:51,720 --> 00:06:54,180
large team of people working on open QA

00:06:53,280 --> 00:06:56,009
these are the ones that are mainly

00:06:54,180 --> 00:06:58,500
working on open QA for firstly and

00:06:56,009 --> 00:06:59,789
opensuse and also they're not as well

00:06:58,500 --> 00:07:03,479
I'm sorry I forgot the name of this list

00:06:59,789 --> 00:07:05,639
it's getting a bit cramped where the

00:07:03,479 --> 00:07:06,840
team's always getting bigger we've got

00:07:05,639 --> 00:07:08,789
more more people working on it and

00:07:06,840 --> 00:07:11,370
various different parts writing tests

00:07:08,789 --> 00:07:15,509
writing stuff on the back end and we'd

00:07:11,370 --> 00:07:19,139
like more and we've now also got red hat

00:07:15,509 --> 00:07:21,419
contributing to open QA um this is kind

00:07:19,139 --> 00:07:24,509
of a side effect of my experiment over

00:07:21,419 --> 00:07:27,330
Christmas with fedora because while i

00:07:24,509 --> 00:07:29,430
was using those tests with a with open

00:07:27,330 --> 00:07:33,210
QA i ended up finding quite a few

00:07:29,430 --> 00:07:35,880
blocker bugs in fedora 22 and wide so i

00:07:33,210 --> 00:07:37,530
filed them and i kind of had to mention

00:07:35,880 --> 00:07:41,280
that you know this automated tool found

00:07:37,530 --> 00:07:42,930
them and so they yeah took while i'm

00:07:41,280 --> 00:07:45,389
going to show you later actually have

00:07:42,930 --> 00:07:47,400
now implemented themselves and they're

00:07:45,389 --> 00:07:50,159
actually running it inside the Fedora

00:07:47,400 --> 00:07:52,500
projects for testing for door 22 and 4

00:07:50,159 --> 00:07:55,409
wide and they've also had quite a lot of

00:07:52,500 --> 00:07:57,900
fun messing around with docker so

00:07:55,409 --> 00:07:59,880
they're actually using docker to deploy

00:07:57,900 --> 00:08:01,830
their open QA installations

00:07:59,880 --> 00:08:03,240
which is not something we're going to

00:08:01,830 --> 00:08:06,660
detail but I think that's kind of cool

00:08:03,240 --> 00:08:10,170
and they've also working with us for a

00:08:06,660 --> 00:08:12,690
few batches ideas feature requests that

00:08:10,170 --> 00:08:14,910
kind of things and also new to learn

00:08:12,690 --> 00:08:17,340
because most of open carry is written in

00:08:14,910 --> 00:08:19,530
perl i think all of open Gary's really

00:08:17,340 --> 00:08:21,590
written in book and they really hate

00:08:19,530 --> 00:08:23,340
power so they're writing lots of fancy

00:08:21,590 --> 00:08:25,590
Python tools that kind of wrap around

00:08:23,340 --> 00:08:27,350
what we're doing and gotta replace the

00:08:25,590 --> 00:08:31,740
tooling that they don't like in that

00:08:27,350 --> 00:08:38,780
there's a public instance which I will

00:08:31,740 --> 00:08:38,780
show you quickly that one

00:08:46,480 --> 00:08:50,610
which shows the commentator fedora wide

00:08:52,320 --> 00:08:56,870
but yeah

00:08:55,010 --> 00:09:01,270
it's testing it really well it's just

00:08:56,870 --> 00:09:01,270
not booting very well at the moment

00:09:06,610 --> 00:09:16,350
so yes open QA in action so I can say

00:09:12,550 --> 00:09:18,750
this is inferred or aversion it is ours

00:09:16,350 --> 00:09:21,880
tumbleweed is in a much better state

00:09:18,750 --> 00:09:28,180
although how come we have 100 tests

00:09:21,880 --> 00:09:29,829
today in 118 yesterday oh so we tested

00:09:28,180 --> 00:09:32,140
it twice as well on one day okay that's

00:09:29,829 --> 00:09:37,300
cool that's also why it failed twice as

00:09:32,140 --> 00:09:41,470
much yeah okay so yeah I'm on open QA we

00:09:37,300 --> 00:09:43,750
have this nice new web UI which culo

00:09:41,470 --> 00:09:46,510
mainly worked on which shows all of the

00:09:43,750 --> 00:09:47,890
different products or parts of opensuse

00:09:46,510 --> 00:09:50,200
that we're testing so here's tumbleweed

00:09:47,890 --> 00:09:52,899
we also have the ah-64 ton of

00:09:50,200 --> 00:09:56,620
tumbleweeds down here which is currently

00:09:52,899 --> 00:10:02,980
being tested right now as well as

00:09:56,620 --> 00:10:05,290
powerpc and various staging projects so

00:10:02,980 --> 00:10:06,940
when these tests are run there these are

00:10:05,290 --> 00:10:08,740
actually tied into OBS so when there's a

00:10:06,940 --> 00:10:11,230
new builder that needs to be tested OB

00:10:08,740 --> 00:10:14,040
we start the the job automatically

00:10:11,230 --> 00:10:14,040
starts in open QA

00:10:16,590 --> 00:10:24,990
and on this web UI you can actually see

00:10:19,800 --> 00:10:27,470
the tests plumbing I say as it takes a

00:10:24,990 --> 00:10:27,470
while to them

00:10:28,710 --> 00:10:31,760
so in this web UI

00:10:36,600 --> 00:10:41,009
yeah its arm it's taking forever so

00:10:38,610 --> 00:10:47,550
instead of showing you a rather slow arm

00:10:41,009 --> 00:10:48,990
machine okay instead of showing a rather

00:10:47,550 --> 00:10:56,730
slow our machine i'll show you power to

00:10:48,990 --> 00:11:03,509
make Dina happy and there's no running

00:10:56,730 --> 00:11:06,470
tests but I can fix that I was logged in

00:11:03,509 --> 00:11:06,470
I don't know why this went wrong

00:11:10,230 --> 00:11:14,480
there we go

00:11:12,370 --> 00:11:16,250
so

00:11:14,480 --> 00:11:16,940
we have all of our products we have all

00:11:16,250 --> 00:11:21,589
of our different parts of the

00:11:16,940 --> 00:11:22,820
distribution it's all split into

00:11:21,589 --> 00:11:24,199
different builds so if we have new

00:11:22,820 --> 00:11:25,699
versions coming up each of them get

00:11:24,199 --> 00:11:28,160
tested individually we then get this

00:11:25,699 --> 00:11:30,500
outlook which actually shows all of the

00:11:28,160 --> 00:11:34,360
actual individual tests so in here we're

00:11:30,500 --> 00:11:39,820
testing GPT ovm minimal X installation

00:11:34,360 --> 00:11:39,820
multipath and the rescue system and

00:11:40,089 --> 00:11:45,820
these ones are all green so I'm going to

00:11:42,350 --> 00:11:45,820
restart this job here

00:11:51,300 --> 00:12:01,830
and now open QA automatically all on its

00:11:54,510 --> 00:12:04,410
own I started up a vm on power and this

00:12:01,830 --> 00:12:06,690
is now totally automated running through

00:12:04,410 --> 00:12:10,829
an installation of opensuse tumbleweed

00:12:06,690 --> 00:12:13,560
on power and at the same time live

00:12:10,829 --> 00:12:15,750
streaming the whole thing on the web so

00:12:13,560 --> 00:12:20,130
you can monitor it in real-time as it's

00:12:15,750 --> 00:12:22,790
doing its thing I'll just wait till it

00:12:20,130 --> 00:12:22,790
gets de asked

00:12:25,050 --> 00:12:28,950
is this a graphical install good i did

00:12:27,899 --> 00:12:32,360
have really had a look at the results

00:12:28,950 --> 00:12:32,360
before make sure that it looks good

00:12:40,700 --> 00:12:43,300
dinner

00:12:43,320 --> 00:12:49,580
so here's our welcome screen but

00:12:50,130 --> 00:12:55,230
oh yeah now you can see now you can see

00:12:53,460 --> 00:12:57,540
the mouse disappear off the screen yeah

00:12:55,230 --> 00:13:00,050
I think I'll cut away before that

00:12:57,540 --> 00:13:00,050
happens

00:13:08,630 --> 00:13:14,620
yeah come on oh well you get the idea so

00:13:12,950 --> 00:13:16,480
yeah get to the welcome screen and

00:13:14,620 --> 00:13:19,370
unfortunately at the moment we've got a

00:13:16,480 --> 00:13:21,260
well I've put in a slight delay on all

00:13:19,370 --> 00:13:22,940
the tests which spend about 30 seconds

00:13:21,260 --> 00:13:24,380
sitting here so we can move them out in

00:13:22,940 --> 00:13:26,480
the top left hand corner if it's for

00:13:24,380 --> 00:13:29,000
sleep come on silly 11 it takes a little

00:13:26,480 --> 00:13:30,320
while longer that it doesn't opensuse so

00:13:29,000 --> 00:13:31,970
it is going to sit in for like a minute

00:13:30,320 --> 00:13:33,890
before it starts moving on but you've

00:13:31,970 --> 00:13:36,410
seen it it starts up it controls the

00:13:33,890 --> 00:13:40,130
installation process when it's finished

00:13:36,410 --> 00:13:42,190
with all of that you have all the test

00:13:40,130 --> 00:13:42,190
results

00:13:49,360 --> 00:13:53,769
so all of these results get broken down

00:13:51,190 --> 00:13:59,740
in a test by test basis each individual

00:13:53,769 --> 00:14:02,410
component is shown and whether that

00:13:59,740 --> 00:14:04,570
individual components pass and all of

00:14:02,410 --> 00:14:05,709
the various needles that we told open

00:14:04,570 --> 00:14:06,970
key way to have a look at soar the

00:14:05,709 --> 00:14:09,910
various screenshots or screen elements

00:14:06,970 --> 00:14:11,519
we were said it interested in it takes a

00:14:09,910 --> 00:14:14,140
screenshot for each one of those and

00:14:11,519 --> 00:14:17,260
stores it so it can then show it on here

00:14:14,140 --> 00:14:19,000
so you can actually step by step see the

00:14:17,260 --> 00:14:21,240
whole installation the whole application

00:14:19,000 --> 00:14:24,970
test whatever you're running open QA for

00:14:21,240 --> 00:14:26,800
step-by-step each and see did it work

00:14:24,970 --> 00:14:28,089
why did it work did other things happen

00:14:26,800 --> 00:14:31,870
that maybe hoping he wasn't actually

00:14:28,089 --> 00:14:35,880
looking for like here where it's looking

00:14:31,870 --> 00:14:35,880
at the petitioner

00:14:36,819 --> 00:14:42,819
and then putting that all together at

00:14:38,470 --> 00:14:45,339
the end it also recorded the whole thing

00:14:42,819 --> 00:14:46,209
in a video so if there's something that

00:14:45,339 --> 00:14:47,709
you're not interested in on the

00:14:46,209 --> 00:14:49,929
screenshot side but you know maybe it

00:14:47,709 --> 00:14:51,819
slipped in in between what other test

00:14:49,929 --> 00:14:58,029
was running this video will actually

00:14:51,819 --> 00:15:00,009
catch it i say as i wait i did look for

00:14:58,029 --> 00:15:01,720
my network adapter for this laptop but i

00:15:00,009 --> 00:15:04,709
couldn't find it so i'm on the Wi-Fi

00:15:01,720 --> 00:15:04,709
it's a little bit on the slow side

00:15:07,979 --> 00:15:12,629
actually have a plan B

00:15:27,390 --> 00:15:30,450
and if you don't detect about

00:15:29,280 --> 00:15:32,570
installation it looks something like

00:15:30,450 --> 00:15:32,570
this

00:15:37,730 --> 00:15:41,769
oh there we go

00:15:42,750 --> 00:15:48,240
so it runs for installation you can see

00:15:44,460 --> 00:15:51,590
it all in action and you know that

00:15:48,240 --> 00:15:51,590
what's been tested is actually passed

00:15:58,980 --> 00:16:04,639
so if you're interested in contributing

00:16:00,329 --> 00:16:07,079
to open QA the main website is there on

00:16:04,639 --> 00:16:09,510
there we have all of the documentation

00:16:07,079 --> 00:16:11,610
we have recordings of videos from

00:16:09,510 --> 00:16:13,170
various overseas in the past probably

00:16:11,610 --> 00:16:15,990
these ones will end up on here at some

00:16:13,170 --> 00:16:17,130
point as well and the documentation is

00:16:15,990 --> 00:16:19,560
actually split into various different

00:16:17,130 --> 00:16:21,810
sections depending on what part of open

00:16:19,560 --> 00:16:24,029
QR you might be interested in so you

00:16:21,810 --> 00:16:25,260
know there's a user's guide installation

00:16:24,029 --> 00:16:27,720
guide for somebody actually installed in

00:16:25,260 --> 00:16:30,000
the system developers guide for anybody

00:16:27,720 --> 00:16:31,860
who wants to work on the back end the

00:16:30,000 --> 00:16:34,470
real meet behind the thing the web UI

00:16:31,860 --> 00:16:36,089
and sort of that whole engine and then

00:16:34,470 --> 00:16:38,040
there's a test developers guide which

00:16:36,089 --> 00:16:39,269
Jesus cuts down to the parts that you

00:16:38,040 --> 00:16:41,670
will be interested in for actually

00:16:39,269 --> 00:16:43,560
writing your tests so you don't need to

00:16:41,670 --> 00:16:45,630
worry about all this wonderful backend

00:16:43,560 --> 00:16:47,370
stuff but you just need to know that the

00:16:45,630 --> 00:16:48,779
API calls you to write on your scripts

00:16:47,370 --> 00:16:51,529
so you know so you can actually get the

00:16:48,779 --> 00:16:51,529
tester actually one

00:16:54,449 --> 00:16:57,269
when you can when you're actually

00:16:55,679 --> 00:16:59,369
contributing code back to it these are

00:16:57,269 --> 00:17:02,540
the four repositories you might be

00:16:59,369 --> 00:17:05,370
interested in of course the main one is

00:17:02,540 --> 00:17:07,919
OS auto industry opensuse which is where

00:17:05,370 --> 00:17:09,839
we keep all of our tests everything for

00:17:07,919 --> 00:17:12,139
opensuse everything forcely we put it

00:17:09,839 --> 00:17:14,699
all in this one big test repository and

00:17:12,139 --> 00:17:16,649
then all there so you can have a look at

00:17:14,699 --> 00:17:18,329
actually how we're writing our tests you

00:17:16,649 --> 00:17:20,299
can learn from that especially when you

00:17:18,329 --> 00:17:22,559
get to some of the more crazy stuff with

00:17:20,299 --> 00:17:24,959
complicated UI testing where you kind of

00:17:22,559 --> 00:17:27,269
want to do stuff like okay if this thing

00:17:24,959 --> 00:17:28,799
flashes up on the screen then do this 20

00:17:27,269 --> 00:17:32,159
different things but if something else

00:17:28,799 --> 00:17:34,080
happens and do something else we've

00:17:32,159 --> 00:17:36,600
written all of that already so you can

00:17:34,080 --> 00:17:39,360
have a look in there see exactly how

00:17:36,600 --> 00:17:41,669
it's done and race it off that Ford all

00:17:39,360 --> 00:17:43,320
those tests are in there bitbucket I

00:17:41,669 --> 00:17:45,000
don't know why they're not submitting

00:17:43,320 --> 00:17:47,190
them to us but I guess we can have a

00:17:45,000 --> 00:17:48,360
chat with know about that but they're

00:17:47,190 --> 00:17:51,389
there and those are the tests of Fedora

00:17:48,360 --> 00:17:53,340
using for testing their distribution the

00:17:51,389 --> 00:17:57,450
back end which is OS auto into the sort

00:17:53,340 --> 00:17:59,269
of original part of open QA is in the OS

00:17:57,450 --> 00:18:01,559
auto missed folder and the web UI is

00:17:59,269 --> 00:18:04,260
what we actually call open queuing in

00:18:01,559 --> 00:18:07,590
the git repository and that's where all

00:18:04,260 --> 00:18:08,940
of that web front-end stuff the website

00:18:07,590 --> 00:18:13,769
they're logging in the live streaming

00:18:08,940 --> 00:18:14,820
video all about I don't want to go into

00:18:13,769 --> 00:18:16,529
too much detail about that because

00:18:14,820 --> 00:18:18,450
Ludwig is talking about this in much

00:18:16,529 --> 00:18:20,220
more detail tomorrow so if you want to

00:18:18,450 --> 00:18:22,590
have a view of thought of more of the

00:18:20,220 --> 00:18:24,539
architecture and actually how open great

00:18:22,590 --> 00:18:28,289
i'll put together Ludwig's talking about

00:18:24,539 --> 00:18:33,750
it at 1 30 in the second room just over

00:18:28,289 --> 00:18:36,960
there so I think I can cure a test for

00:18:33,750 --> 00:18:39,720
fedora the first thing you're going to

00:18:36,960 --> 00:18:43,049
need in my opinion is a notebook

00:18:39,720 --> 00:18:45,520
computer just a piece of pen a piece of

00:18:43,049 --> 00:18:49,330
paper and a pen

00:18:45,520 --> 00:18:52,300
I found this the easiest way of doing it

00:18:49,330 --> 00:18:54,610
of just starting up whatever I want to

00:18:52,300 --> 00:18:58,960
test so in my case with fedora starting

00:18:54,610 --> 00:19:02,470
up a vm a fedora and then installing it

00:18:58,960 --> 00:19:06,280
just like I usually would the only thing

00:19:02,470 --> 00:19:08,560
I really try and to try and lead to make

00:19:06,280 --> 00:19:10,240
my life a lot easier is be very keyboard

00:19:08,560 --> 00:19:11,620
centric because it's a heck of a lot

00:19:10,240 --> 00:19:13,210
easier to write tests where you're just

00:19:11,620 --> 00:19:15,730
slamming keyboard and treating all the

00:19:13,210 --> 00:19:17,530
time then having to control the mouse

00:19:15,730 --> 00:19:19,390
and tell it where to click and all that

00:19:17,530 --> 00:19:21,910
stuff so if you can do everything over

00:19:19,390 --> 00:19:24,580
the keyboard you can write test to test

00:19:21,910 --> 00:19:26,320
that much much easier and it's an awful

00:19:24,580 --> 00:19:27,880
lot easier to write those notes

00:19:26,320 --> 00:19:30,850
initially and then convert that to code

00:19:27,880 --> 00:19:32,920
afterwards but it's also good to take a

00:19:30,850 --> 00:19:38,830
point of like when would be a good time

00:19:32,920 --> 00:19:40,060
to take a knee cousin time so when when

00:19:38,830 --> 00:19:42,520
would there be a good time to take a

00:19:40,060 --> 00:19:44,020
needle which screens are are really

00:19:42,520 --> 00:19:46,390
relevant to have a look at which UI

00:19:44,020 --> 00:19:49,330
elements are really important for that

00:19:46,390 --> 00:19:51,340
part of the process and make a note of

00:19:49,330 --> 00:19:53,920
those so when you come to actually

00:19:51,340 --> 00:19:55,900
writing your code you're able to do

00:19:53,920 --> 00:19:58,510
pretty much the entire thing blind and

00:19:55,900 --> 00:20:00,220
then you can just throw those tests into

00:19:58,510 --> 00:20:02,440
your open QA instance and run them and

00:20:00,220 --> 00:20:03,790
then just make it take the screenshots

00:20:02,440 --> 00:20:05,020
for the first time and then that's it

00:20:03,790 --> 00:20:06,910
you're done you've got your code written

00:20:05,020 --> 00:20:08,860
you've got your screen shots taken and

00:20:06,910 --> 00:20:11,650
you've suddenly got a fully working test

00:20:08,860 --> 00:20:16,600
week so when you're doing the

00:20:11,650 --> 00:20:18,190
installation I the way I the way I would

00:20:16,600 --> 00:20:22,690
recommend it with the notebook is kind

00:20:18,190 --> 00:20:24,310
of have one test per page so if you kind

00:20:22,690 --> 00:20:27,130
of think of what you're testing split it

00:20:24,310 --> 00:20:28,750
into sensible logical groups so in the

00:20:27,130 --> 00:20:31,510
case of let's say yeah store fedora

00:20:28,750 --> 00:20:33,310
that's easy pretty much every screen of

00:20:31,510 --> 00:20:36,640
the Installer makes a perfectly natural

00:20:33,310 --> 00:20:40,830
next stage so that's one plate one piece

00:20:36,640 --> 00:20:43,330
of paper per test one line per key press

00:20:40,830 --> 00:20:44,820
and one line per needle points you just

00:20:43,330 --> 00:20:46,840
basically have this nice long list of

00:20:44,820 --> 00:20:51,030
all the instructions you're going to

00:20:46,840 --> 00:20:51,030
need to automate this test

00:20:51,429 --> 00:20:57,340
so further the welcome screen in fedora

00:20:54,350 --> 00:20:59,929
this ends up looking something like this

00:20:57,340 --> 00:21:03,320
which the first thing you want to need

00:20:59,929 --> 00:21:05,539
you to check is the welcome screen did

00:21:03,320 --> 00:21:12,730
it actually show up so there's actually

00:21:05,539 --> 00:21:12,730
a I'm missing a slide a minute

00:21:14,730 --> 00:21:22,140
does it no no I'll just talk to it okay

00:21:18,380 --> 00:21:25,740
so the the top line there obviously is

00:21:22,140 --> 00:21:27,690
the name of the test the next line where

00:21:25,740 --> 00:21:31,650
I've said n that's my sort of shorthand

00:21:27,690 --> 00:21:32,940
for making needle here and then the text

00:21:31,650 --> 00:21:34,650
after which is just probably some

00:21:32,940 --> 00:21:36,270
gibberish that i'm gonna use is the

00:21:34,650 --> 00:21:37,950
identifier when I'm writing the test you

00:21:36,270 --> 00:21:40,309
know the welcome screen in this case so

00:21:37,950 --> 00:21:42,960
take a screenshot of the welcome screen

00:21:40,309 --> 00:21:45,540
after that I'm just type writing down

00:21:42,960 --> 00:21:47,429
the key presses i press to get through

00:21:45,540 --> 00:21:50,460
the installation so i pressed right once

00:21:47,429 --> 00:21:52,110
i press return another window popped up

00:21:50,460 --> 00:21:53,880
in this case there the language

00:21:52,110 --> 00:21:55,770
selection so I thought okay that'll be a

00:21:53,880 --> 00:21:58,980
good thing to make sure i can qhx that

00:21:55,770 --> 00:22:00,179
the language selection turns up to get

00:21:58,980 --> 00:22:02,880
the language selection to go away you

00:22:00,179 --> 00:22:06,830
press old see so I wrote that down and

00:22:02,880 --> 00:22:10,440
then because I was messing around with

00:22:06,830 --> 00:22:11,490
Ford over 21 and wide when you're

00:22:10,440 --> 00:22:14,040
messing around with war hi do you

00:22:11,490 --> 00:22:16,470
sometimes get a beta message popping up

00:22:14,040 --> 00:22:19,500
saying you know this is beter software

00:22:16,470 --> 00:22:21,059
carry on your own risk so maybe a little

00:22:19,500 --> 00:22:22,200
note of that that you know in this test

00:22:21,059 --> 00:22:24,570
they might there's a sort of this

00:22:22,200 --> 00:22:26,130
conditional situation where if I'm

00:22:24,570 --> 00:22:28,669
testing different versions of Fedora it

00:22:26,130 --> 00:22:30,900
might not happen but it will in this one

00:22:28,669 --> 00:22:33,750
take a needle to see that the beetle

00:22:30,900 --> 00:22:35,460
warning is there actually turned up if

00:22:33,750 --> 00:22:37,500
it does you need to press tab once

00:22:35,460 --> 00:22:39,500
because you can't auto select it so you

00:22:37,500 --> 00:22:44,549
have to actually make sure that the

00:22:39,500 --> 00:22:45,960
selection of that appears press n they

00:22:44,549 --> 00:22:47,340
have a really nice warning pop up with

00:22:45,960 --> 00:22:51,480
their beta this is you know do you

00:22:47,340 --> 00:22:53,250
accept your fate so yes you do you press

00:22:51,480 --> 00:22:56,059
return and then you end up with the

00:22:53,250 --> 00:22:56,059
fedora summary page

00:22:58,110 --> 00:23:02,669
and in fact that's what I'm missing

00:23:15,430 --> 00:23:21,300
so doing it manually it ends up looking

00:23:18,580 --> 00:23:21,300
something like this

00:23:27,280 --> 00:23:29,970
I wish I

00:23:39,180 --> 00:23:43,130
not gonna work maybe

00:23:48,010 --> 00:23:52,390
now this is a fun experiment I tried

00:23:50,140 --> 00:23:53,740
this a week ago and all these this these

00:23:52,390 --> 00:23:55,840
commands still mapped up with this

00:23:53,740 --> 00:23:57,130
version of rawhide or the version of

00:23:55,840 --> 00:23:58,540
white I was testing this is a slightly

00:23:57,130 --> 00:24:06,700
newer version so hopefully they haven't

00:23:58,540 --> 00:24:12,870
changed anything yeah here's the Fedora

00:24:06,700 --> 00:24:16,900
welcome screen press right let's return

00:24:12,870 --> 00:24:24,520
nothing happens and the demo effect

00:24:16,900 --> 00:24:27,570
kicks in hey okay forget about that I'll

00:24:24,520 --> 00:24:27,570
show you later when it worked

00:24:30,570 --> 00:24:34,950
so you have all these notes you've gone

00:24:32,309 --> 00:24:37,320
through the installation which stage of

00:24:34,950 --> 00:24:39,299
the test you have piece of paper with

00:24:37,320 --> 00:24:41,789
all of the commands that you need to do

00:24:39,299 --> 00:24:45,240
to actually have the instant that have

00:24:41,789 --> 00:24:47,039
the software undo that step and you have

00:24:45,240 --> 00:24:49,019
all of the areas where you want to add a

00:24:47,039 --> 00:24:50,639
screenshot so now it's actually time to

00:24:49,019 --> 00:24:56,240
get down and dirty and write some code

00:24:50,639 --> 00:24:59,389
into open QA the open QA test suites are

00:24:56,240 --> 00:25:06,179
all arranged in Singh individual folders

00:24:59,389 --> 00:25:09,240
like this and this main p.m. is the most

00:25:06,179 --> 00:25:11,279
important part of the test suite in

00:25:09,240 --> 00:25:15,899
essence it's a bit that open QA will

00:25:11,279 --> 00:25:18,360
actually run and defines the order of

00:25:15,899 --> 00:25:21,350
which tests do it what does it run in

00:25:18,360 --> 00:25:21,350
which order

00:25:25,120 --> 00:25:31,730
so in a really simple test too sweet

00:25:29,170 --> 00:25:36,470
like the Fedora one that I'm showing you

00:25:31,730 --> 00:25:38,450
here is each piece of paper that you've

00:25:36,470 --> 00:25:44,380
currently got that each one of your test

00:25:38,450 --> 00:25:44,380
modules translates to one line like this

00:25:45,220 --> 00:25:52,340
load test the test test whatever so you

00:25:50,000 --> 00:25:53,540
can even now before you actually got

00:25:52,340 --> 00:25:56,240
anything executing you can actually

00:25:53,540 --> 00:25:58,850
write your main p.m. which is throwing a

00:25:56,240 --> 00:26:00,740
whole bunch of load tests if you want to

00:25:58,850 --> 00:26:01,730
use subfolders you can when you when it

00:26:00,740 --> 00:26:03,230
comes to actually storing the test

00:26:01,730 --> 00:26:06,110
laterz it here we've put all everything

00:26:03,230 --> 00:26:07,760
in installation test subfolder and we

00:26:06,110 --> 00:26:09,980
have a welcome module a partitioning

00:26:07,760 --> 00:26:12,370
module installation summary root

00:26:09,980 --> 00:26:12,370
password

00:26:18,400 --> 00:26:23,320
actually making the test files as you

00:26:20,470 --> 00:26:24,670
saw there we have a test sub 40 and you

00:26:23,320 --> 00:26:26,470
can split it into further sub folders

00:26:24,670 --> 00:26:28,930
for actually organs fitting things up

00:26:26,470 --> 00:26:30,700
for example installation tests consort

00:26:28,930 --> 00:26:32,320
asks if you have a really complicated

00:26:30,700 --> 00:26:34,960
application it will probably make sense

00:26:32,320 --> 00:26:37,630
to have that with its own sub folder and

00:26:34,960 --> 00:26:40,630
keep all the tests in there and then you

00:26:37,630 --> 00:26:43,360
just make one file so one far named p.m.

00:26:40,630 --> 00:26:45,510
for each of those test modules that

00:26:43,360 --> 00:26:50,950
you've already defined on your notepad

00:26:45,510 --> 00:26:54,580
ready to write code for open QA if

00:26:50,950 --> 00:26:58,240
you've taken this approach for open QA

00:26:54,580 --> 00:27:01,720
you pretty much need just these four API

00:26:58,240 --> 00:27:03,700
calls to get started to check to check

00:27:01,720 --> 00:27:06,130
the screen to check the needles you need

00:27:03,700 --> 00:27:09,520
to use either a search screen or check

00:27:06,130 --> 00:27:11,410
screen a search screen is basically

00:27:09,520 --> 00:27:14,500
fatal about it so it'll have a look at

00:27:11,410 --> 00:27:16,180
the screen check that the needle matches

00:27:14,500 --> 00:27:18,780
what you've told it to and if it doesn't

00:27:16,180 --> 00:27:21,610
that's it test over test failed check

00:27:18,780 --> 00:27:22,870
screens non-fatal so it comes in really

00:27:21,610 --> 00:27:24,370
handy where you have conditional

00:27:22,870 --> 00:27:27,550
situations like you know something might

00:27:24,370 --> 00:27:30,130
appear then do this so we have that as

00:27:27,550 --> 00:27:32,440
well for setting key presses all you

00:27:30,130 --> 00:27:36,610
need to do is use the send key function

00:27:32,440 --> 00:27:39,280
and to type a string you need to just

00:27:36,610 --> 00:27:41,700
use type of string nice easy

00:27:39,280 --> 00:27:41,700
straightforward

00:27:41,920 --> 00:27:49,920
so when you have our example like this

00:27:44,950 --> 00:27:52,690
in open qas Co but kind of almost a

00:27:49,920 --> 00:27:56,260
domain-specific language a test like

00:27:52,690 --> 00:27:58,750
that looks something like this so the

00:27:56,260 --> 00:28:03,160
top we have a search screen what we say

00:27:58,750 --> 00:28:04,600
yeah look for the welcome screen and 120

00:28:03,160 --> 00:28:06,970
after that is that the timeouts are

00:28:04,600 --> 00:28:09,670
basically you have 120 seconds to get to

00:28:06,970 --> 00:28:11,110
the welcome screen once open QA hits

00:28:09,670 --> 00:28:14,980
that time out of the test will ferrell

00:28:11,110 --> 00:28:17,680
anyway so on different architectures

00:28:14,980 --> 00:28:20,710
like on power and out 64 we actually now

00:28:17,680 --> 00:28:22,030
have a sort of universal modifier so we

00:28:20,710 --> 00:28:24,820
can say take these timeouts and you know

00:28:22,030 --> 00:28:25,990
x x so we don't have to go and rewrite

00:28:24,820 --> 00:28:31,420
all these tests for all those different

00:28:25,990 --> 00:28:32,890
architectures so well yeah of course

00:28:31,420 --> 00:28:34,990
power would be left someone you want it

00:28:32,890 --> 00:28:37,270
to be testing everything quicker and yes

00:28:34,990 --> 00:28:41,050
and then on yeah I Oxford before I think

00:28:37,270 --> 00:28:42,400
it's like three or four and what was the

00:28:41,050 --> 00:28:44,170
one that I change oh yeah I love it on

00:28:42,400 --> 00:28:46,900
because we're normally testing in VMs

00:28:44,170 --> 00:28:48,370
here the VMS are normally highly

00:28:46,900 --> 00:28:49,510
optimized you know we normally write and

00:28:48,370 --> 00:28:51,190
not writing to disk we're writing

00:28:49,510 --> 00:28:53,440
everything to temp FS everything's

00:28:51,190 --> 00:28:55,390
coming into Ram we've now started

00:28:53,440 --> 00:29:00,430
testing stuff in real hardware so we

00:28:55,390 --> 00:29:01,780
have both I p.m. I and amt interfaces so

00:29:00,430 --> 00:29:04,510
we can actually go to a laptop or a

00:29:01,780 --> 00:29:06,970
physical machine open curate that treats

00:29:04,510 --> 00:29:07,870
exactly the same way started up and is

00:29:06,970 --> 00:29:10,270
running through the installation process

00:29:07,870 --> 00:29:12,120
and when we started doing that we

00:29:10,270 --> 00:29:14,410
suddenly realized we had a problem

00:29:12,120 --> 00:29:16,750
because real Hardware slower than our

00:29:14,410 --> 00:29:18,730
VMs so all of our tests started failing

00:29:16,750 --> 00:29:21,310
because all the time outs with were

00:29:18,730 --> 00:29:25,060
certainly way out of really really wrong

00:29:21,310 --> 00:29:27,280
so I'm now actually using that

00:29:25,060 --> 00:29:29,430
multiplier to actually I think give all

00:29:27,280 --> 00:29:31,630
these timeouts are three times longer

00:29:29,430 --> 00:29:33,220
just so the real Hardware can actually

00:29:31,630 --> 00:29:35,950
boot to the same speed get to the same

00:29:33,220 --> 00:29:38,350
point and that's great because I don't

00:29:35,950 --> 00:29:41,020
have to go rewriting all these tests so

00:29:38,350 --> 00:29:43,120
yeah wait under in 20 seconds get to the

00:29:41,020 --> 00:29:46,060
welcome screen to that that covers a

00:29:43,120 --> 00:29:47,650
whole kind of pre-boot part of the vm

00:29:46,060 --> 00:29:49,060
like i showed you which you don't really

00:29:47,650 --> 00:29:52,090
care about you know it's going to start

00:29:49,060 --> 00:29:56,580
up it's going to get there who cares

00:29:52,090 --> 00:30:01,020
press the send key so send key right

00:29:56,580 --> 00:30:04,450
then press Enter send key return or ret

00:30:01,020 --> 00:30:05,980
then the language selection pops up for

00:30:04,450 --> 00:30:07,330
some reason I gave it 60 seconds here I

00:30:05,980 --> 00:30:09,940
guess I was being well the generous

00:30:07,330 --> 00:30:12,970
normally I'm either leave it to the

00:30:09,940 --> 00:30:16,270
default which is 30 seconds or it's a

00:30:12,970 --> 00:30:17,799
very good related to keep it as short as

00:30:16,270 --> 00:30:19,270
sensible because you know you want the

00:30:17,799 --> 00:30:20,620
test to fail it you know if you're

00:30:19,270 --> 00:30:21,970
testing something in you know you don't

00:30:20,620 --> 00:30:24,100
want to use a waiting a minute before

00:30:21,970 --> 00:30:26,860
window pops up so you can actually use

00:30:24,100 --> 00:30:28,840
open character test the softer signs of

00:30:26,860 --> 00:30:31,770
quality doctors oh it works but you know

00:30:28,840 --> 00:30:36,250
it works in a relatively decent speed

00:30:31,770 --> 00:30:39,309
press alt see and then in the case of

00:30:36,250 --> 00:30:41,049
rawhide we have a sort of a beta

00:30:39,309 --> 00:30:43,779
variable so when we're testing something

00:30:41,049 --> 00:30:46,750
in open QA we can say okay this software

00:30:43,779 --> 00:30:49,360
is you know beta he took beam up with

00:30:46,750 --> 00:30:51,279
set the beat of flag 21 so when open

00:30:49,360 --> 00:30:53,350
tray comes along we just can tell it to

00:30:51,279 --> 00:30:55,149
use that variable and you immediately

00:30:53,350 --> 00:30:57,520
knows okay this off West or under

00:30:55,149 --> 00:30:59,710
testing and then like in this situation

00:30:57,520 --> 00:31:01,570
or in the same place with sleep wear

00:30:59,710 --> 00:31:03,429
sleeve behave slightly differently when

00:31:01,570 --> 00:31:05,440
it's a beta version versus from when

00:31:03,429 --> 00:31:08,200
it's a you know release candidate or

00:31:05,440 --> 00:31:10,059
real version those slight difference in

00:31:08,200 --> 00:31:11,529
behaviour in the software can still be

00:31:10,059 --> 00:31:12,970
written in the same tests you're not

00:31:11,529 --> 00:31:14,710
writing two different tests and I'm into

00:31:12,970 --> 00:31:17,950
way back two separate sets of code when

00:31:14,710 --> 00:31:21,520
you have to work with everything so that

00:31:17,950 --> 00:31:23,559
was split into the the if their checks

00:31:21,520 --> 00:31:25,320
at the beta warning appears if it

00:31:23,559 --> 00:31:29,289
doesn't the test will fail and go away

00:31:25,320 --> 00:31:32,380
press tab have a look for the fate

00:31:29,289 --> 00:31:35,700
except screen press return and then you

00:31:32,380 --> 00:31:35,700
end up back at the installation summary

00:31:36,790 --> 00:31:39,970
so you do that for every single one of

00:31:38,950 --> 00:31:41,770
those pieces of paper that you wrote

00:31:39,970 --> 00:31:46,150
down when you did your sort of first

00:31:41,770 --> 00:31:50,410
trial for door installation and between

00:31:46,150 --> 00:31:52,980
those two processes both doing a basic

00:31:50,410 --> 00:31:54,760
installation with the notes and then

00:31:52,980 --> 00:32:00,310
converting all of that so you've written

00:31:54,760 --> 00:32:02,170
it is your test takes about a day if you

00:32:00,310 --> 00:32:04,240
done it with any time before you can do

00:32:02,170 --> 00:32:06,310
it quicker but it's a complete beginner

00:32:04,240 --> 00:32:09,520
which I kind of was when I started doing

00:32:06,310 --> 00:32:11,950
this took me about a day and then at the

00:32:09,520 --> 00:32:15,430
end of all of that this is actually a

00:32:11,950 --> 00:32:21,490
video recording of the first time I ran

00:32:15,430 --> 00:32:26,160
it after taking the screenshots you end

00:32:21,490 --> 00:32:26,160
up with a broken video there we go

00:32:33,720 --> 00:32:40,850
the video recording of it moving up

00:32:37,560 --> 00:32:43,080
and installing token of a password and

00:32:40,850 --> 00:32:45,300
that's it the installation is now

00:32:43,080 --> 00:32:47,640
running it goes incredibly quickly

00:32:45,300 --> 00:32:49,590
because open QA when it's recording

00:32:47,640 --> 00:32:51,150
video only records the frame that have

00:32:49,590 --> 00:32:54,270
changed doesn't actually record the real

00:32:51,150 --> 00:32:56,630
time how long it took on that frame so

00:32:54,270 --> 00:32:56,630
it

00:33:08,860 --> 00:33:18,160
oh really I didn't know that Thanks did

00:33:13,510 --> 00:33:19,720
we change that okay fine no because he's

00:33:18,160 --> 00:33:21,250
correcting me and I'll just stick with

00:33:19,720 --> 00:33:24,340
that and he can correct everybody else

00:33:21,250 --> 00:33:25,540
later tell everybody okay um no I was

00:33:24,340 --> 00:33:27,640
actually wrong when I was saying that

00:33:25,540 --> 00:33:30,280
it's any recording the the frame changes

00:33:27,640 --> 00:33:31,630
it's recording it a factor of 12 farther

00:33:30,280 --> 00:33:33,220
than it should so two frames per second

00:33:31,630 --> 00:33:34,750
but then the video plays back at 24

00:33:33,220 --> 00:33:37,900
frames per second so that's why it looks

00:33:34,750 --> 00:33:41,020
so quick but if you pause the video and

00:33:37,900 --> 00:33:45,190
scroll to it you can actually see things

00:33:41,020 --> 00:33:46,720
in a much simpler case so this is a

00:33:45,190 --> 00:33:48,610
really simple test case throughout this

00:33:46,720 --> 00:33:50,740
entire process I'm just kind of doing

00:33:48,610 --> 00:33:53,650
the basics clicking next to everything

00:33:50,740 --> 00:33:56,169
not going into like the partitioner and

00:33:53,650 --> 00:33:57,760
messing around with you know actual

00:33:56,169 --> 00:34:00,970
partition options and messing around

00:33:57,760 --> 00:34:02,290
with discs but for testing anything new

00:34:00,970 --> 00:34:04,780
this is poor this is how I'd recommend

00:34:02,290 --> 00:34:06,820
you start just do the basics get your

00:34:04,780 --> 00:34:08,590
basic test there and then you can expand

00:34:06,820 --> 00:34:11,020
on that add extra modules when you want

00:34:08,590 --> 00:34:12,399
them add extra variables when you need

00:34:11,020 --> 00:34:14,590
them so you can have more you know if

00:34:12,399 --> 00:34:16,389
this is set then do the crazy stuff in

00:34:14,590 --> 00:34:17,919
the partitioner or if this is set do the

00:34:16,389 --> 00:34:21,190
crazy stuff of these software selection

00:34:17,919 --> 00:34:22,869
and over time you end up with a very

00:34:21,190 --> 00:34:25,889
very complete test suite that can test

00:34:22,869 --> 00:34:25,889
anything you want an open

00:34:36,030 --> 00:34:42,290
so any questions yes

00:34:43,340 --> 00:34:50,300
is that yep you want it's the

00:34:46,550 --> 00:34:55,490
possibility to do text citation text

00:34:50,300 --> 00:35:00,140
texas OCR not we can't do text OCR on

00:34:55,490 --> 00:35:02,030
the graphical side yet can we we can ok

00:35:00,140 --> 00:35:03,680
we have experimental support 40 in there

00:35:02,030 --> 00:35:09,080
and so experimental I didn't know about

00:35:03,680 --> 00:35:11,180
it does it work gee we'd ever tried okay

00:35:09,080 --> 00:35:14,030
there is experiment it's so experimental

00:35:11,180 --> 00:35:17,000
it's there but we've never tried it for

00:35:14,030 --> 00:35:18,650
the text recognition we normally use the

00:35:17,000 --> 00:35:20,180
proper console testing so we try and do

00:35:18,650 --> 00:35:22,580
that kind of stuff in the console where

00:35:20,180 --> 00:35:26,900
you can actually read the actual text

00:35:22,580 --> 00:35:29,140
output so yeah that's otherwise

00:35:26,900 --> 00:35:31,250
otherwise in the case of let's say the

00:35:29,140 --> 00:35:34,850
like is an example why should i do the

00:35:31,250 --> 00:35:37,700
fedora about screen if you want to be

00:35:34,850 --> 00:35:39,430
like absolutely pedantic that this text

00:35:37,700 --> 00:35:42,500
must always match exactly what you

00:35:39,430 --> 00:35:44,360
wanted you just set that needle to be

00:35:42,500 --> 00:35:46,550
you know a hundred percent or ninety

00:35:44,360 --> 00:35:48,680
nine percent and then there'll be you

00:35:46,550 --> 00:35:50,840
know any change of any character there

00:35:48,680 --> 00:35:52,700
would immediately get noticed so so it's

00:35:50,840 --> 00:35:55,700
it's okay that's checking exact for

00:35:52,700 --> 00:35:58,550
exact but you can you can do also

00:35:55,700 --> 00:36:00,020
composite needles so you can have one

00:35:58,550 --> 00:36:01,310
big screen shot with many different

00:36:00,020 --> 00:36:04,100
parts of the screen that you're

00:36:01,310 --> 00:36:06,230
interested in so you can that's often

00:36:04,100 --> 00:36:08,330
what I use for taking up the text part

00:36:06,230 --> 00:36:10,640
i'm interested in FL just slice that

00:36:08,330 --> 00:36:13,940
part of the screen as a needle do it

00:36:10,640 --> 00:36:16,370
that way and rather part audio oh you

00:36:13,940 --> 00:36:20,510
wouldn't know look audio output we do

00:36:16,370 --> 00:36:22,580
have tests for their doing DTMF tones so

00:36:20,510 --> 00:36:24,860
it actually plays a sound through then

00:36:22,580 --> 00:36:27,440
and compares the sound that was output

00:36:24,860 --> 00:36:30,530
with the recorded sound in open QA that

00:36:27,440 --> 00:36:34,060
we wanted to match do we test input at

00:36:30,530 --> 00:36:37,530
all no we have no input testing another

00:36:34,060 --> 00:36:37,530
yes thanks yep

00:36:40,000 --> 00:36:44,700
cool any other questions yes

00:36:46,230 --> 00:36:50,880
would it be an option to you something

00:36:48,930 --> 00:36:53,670
like a keyboard require instead of

00:36:50,880 --> 00:36:57,420
fighting to keep prices manually when

00:36:53,670 --> 00:36:58,830
you write tests yeah I mean that would

00:36:57,420 --> 00:37:00,150
double that would work as well that

00:36:58,830 --> 00:37:01,680
would probably be a you know if you had

00:37:00,150 --> 00:37:04,530
a keyboard recorder that actually pushed

00:37:01,680 --> 00:37:06,510
out a nice easy to read format you could

00:37:04,530 --> 00:37:10,650
probably do a script and just have that

00:37:06,510 --> 00:37:12,090
right half the test for you if you come

00:37:10,650 --> 00:37:13,410
up with a way of doing that please let

00:37:12,090 --> 00:37:18,330
me know because that would make my life

00:37:13,410 --> 00:37:21,770
easier well the problem is I have it up

00:37:18,330 --> 00:37:21,770
for yet already yeah

00:37:28,480 --> 00:37:31,380
anyone else

00:37:32,710 --> 00:37:35,640
yep someone

00:37:38,700 --> 00:37:44,520
so in the example you gave him I think

00:37:41,130 --> 00:37:48,150
but can I just use anything you like to

00:37:44,520 --> 00:37:50,099
run a test on the we have various

00:37:48,150 --> 00:37:53,640
backends we said we support the main one

00:37:50,099 --> 00:37:56,310
we use the most is kvm I also mentioned

00:37:53,640 --> 00:37:58,320
that we have an IPM I 14 testing real

00:37:56,310 --> 00:38:00,359
Hardware we also have an AMT one which

00:37:58,320 --> 00:38:03,930
is mostly finished at the serial console

00:38:00,359 --> 00:38:07,800
still missing coolest thing okay where

00:38:03,930 --> 00:38:10,109
we've got that freak we're also testing

00:38:07,800 --> 00:38:14,839
on s390 which had its own back-end for

00:38:10,109 --> 00:38:18,180
mainframes and there's various other

00:38:14,839 --> 00:38:21,060
backends that are in either various

00:38:18,180 --> 00:38:22,500
stages of development or bit rot for

00:38:21,060 --> 00:38:24,780
example there was a was as end back end

00:38:22,500 --> 00:38:28,020
at some point that sofa def testing

00:38:24,780 --> 00:38:30,480
different hypervisors so they could

00:38:28,020 --> 00:38:31,740
weaken the software's modular enough

00:38:30,480 --> 00:38:33,510
that we can very easily add more

00:38:31,740 --> 00:38:34,770
backends for those kind of scenarios

00:38:33,510 --> 00:38:36,599
where you want to test you different

00:38:34,770 --> 00:38:39,900
hypervisor or different hardware or

00:38:36,599 --> 00:38:41,160
something like that so yeah at the

00:38:39,900 --> 00:38:43,109
moment those are the main ones were

00:38:41,160 --> 00:38:45,089
using but we're always kind of on the

00:38:43,109 --> 00:38:48,290
lookout for what makes sense for adding

00:38:45,089 --> 00:38:48,290
new features editor

00:38:52,100 --> 00:38:58,810
cool anybody else nope

00:38:59,109 --> 00:39:02,309
pardon so I cut

00:39:03,320 --> 00:39:09,920
yes so like I showed the screenshot of

00:39:05,510 --> 00:39:11,330
the Firefox one there but I can actually

00:39:09,920 --> 00:39:14,210
show the question by the way was so are

00:39:11,330 --> 00:39:18,530
we testing any applications as well so

00:39:14,210 --> 00:39:20,150
if I go back to the web UI which for

00:39:18,530 --> 00:39:25,160
some reason I can't see where my firefox

00:39:20,150 --> 00:39:26,930
is gone there it is so here for example

00:39:25,160 --> 00:39:29,500
with the tumbleweed one all this bit

00:39:26,930 --> 00:39:34,070
here that you see is the installation

00:39:29,500 --> 00:39:36,560
but if I pick a test it actually does

00:39:34,070 --> 00:39:38,770
application testing up at KDE for a

00:39:36,560 --> 00:39:38,770
change

00:39:42,460 --> 00:39:48,070
after the installations finished we're

00:39:45,670 --> 00:39:49,810
testing a whole bunch of applications on

00:39:48,070 --> 00:39:56,020
the console here so for example testing

00:39:49,810 --> 00:40:02,260
you asked it's a screenshot but then we

00:39:56,020 --> 00:40:04,710
flip to the UI and we're testing lots of

00:40:02,260 --> 00:40:07,480
different parts of chromium for example

00:40:04,710 --> 00:40:09,240
like the html5 test is actually firing

00:40:07,480 --> 00:40:13,450
up chromium typing into the application

00:40:09,240 --> 00:40:14,800
go to this URL do html5 test and then

00:40:13,450 --> 00:40:17,200
this is actually also analyzing the

00:40:14,800 --> 00:40:18,700
output of that so you can see that it's

00:40:17,200 --> 00:40:20,020
actually able to go to a website and

00:40:18,700 --> 00:40:23,710
it's rendering in the way that we

00:40:20,020 --> 00:40:25,540
expected so in the case if you wanted to

00:40:23,710 --> 00:40:28,119
do just application testing and just

00:40:25,540 --> 00:40:30,460
forget about the installation open QA

00:40:28,119 --> 00:40:33,040
has no problem being fed a disk image

00:40:30,460 --> 00:40:35,520
rather than a installation aye sir so

00:40:33,040 --> 00:40:37,390
you can have like a vm with your

00:40:35,520 --> 00:40:39,640
opensuse or whatever that's already

00:40:37,390 --> 00:40:41,080
installed and open where you can just

00:40:39,640 --> 00:40:42,580
start that up and then start your

00:40:41,080 --> 00:40:45,220
application that you want the test and

00:40:42,580 --> 00:40:47,440
run with it that way that's actually

00:40:45,220 --> 00:40:51,640
similar to my hack Creek project where I

00:40:47,440 --> 00:40:53,560
tested open QA in Oakland QA so I

00:40:51,640 --> 00:40:55,390
started a basically made a vm of a

00:40:53,560 --> 00:40:58,420
standard open q a server with the web UI

00:40:55,390 --> 00:40:59,859
in the back end and all that stuff and i

00:40:58,420 --> 00:41:03,130
had then have another open to a machine

00:40:59,859 --> 00:41:05,770
start that up start to test inside there

00:41:03,130 --> 00:41:08,380
and then test everything on the console

00:41:05,770 --> 00:41:09,790
and fire up the web UI and test all the

00:41:08,380 --> 00:41:11,109
parts of the web UI and see that

00:41:09,790 --> 00:41:14,050
basically everything i showed you here

00:41:11,109 --> 00:41:17,849
is still working so yeah application

00:41:14,050 --> 00:41:17,849
testing snowfall yes Andrew

00:41:18,630 --> 00:41:29,890
what about application stacks so second

00:41:25,690 --> 00:41:31,390
appointment and OpenStack yeah the

00:41:29,890 --> 00:41:35,380
technology is there people just need to

00:41:31,390 --> 00:41:39,039
write the test so we can we can do that

00:41:35,380 --> 00:41:42,460
so for example the H a snack ously is

00:41:39,039 --> 00:41:43,690
being tested this way now and yeah Seth

00:41:42,460 --> 00:41:45,220
deploy that kind of thing I mean

00:41:43,690 --> 00:41:47,230
obviously if you're going to be using

00:41:45,220 --> 00:41:48,430
the kvm back end you might have to be

00:41:47,230 --> 00:41:50,410
worrying about stuff like nested

00:41:48,430 --> 00:41:51,430
virtualization but if you're using

00:41:50,410 --> 00:41:53,950
something like the real Hardware

00:41:51,430 --> 00:41:57,150
back-end the world's your oyster I mean

00:41:53,950 --> 00:41:57,150
you can do crazy stuff with that

00:41:58,750 --> 00:42:01,380
yep

00:42:04,420 --> 00:42:11,950
how well does it integrate with OBS with

00:42:07,990 --> 00:42:13,510
OBS I'm really well in terms of

00:42:11,950 --> 00:42:15,370
practical sense of every time there's a

00:42:13,510 --> 00:42:18,190
build of what we're looking at it starts

00:42:15,370 --> 00:42:19,810
up and gets testing I'll be honest

00:42:18,190 --> 00:42:21,700
though the code that we do to do that

00:42:19,810 --> 00:42:24,130
needs a bit of a tidy up this kind of

00:42:21,700 --> 00:42:26,500
wonderfully complicated arcing perl

00:42:24,130 --> 00:42:27,970
script it's kind of looking at OBS

00:42:26,500 --> 00:42:29,770
projects that we're interested in and

00:42:27,970 --> 00:42:32,650
then those all the magic to make up and

00:42:29,770 --> 00:42:35,050
Kure do it and and yeah we could do is

00:42:32,650 --> 00:42:36,970
tighten it up a little bit because but

00:42:35,050 --> 00:42:38,470
it works it so whenever there's a new

00:42:36,970 --> 00:42:42,040
tumbleweed snapshot or a new staging

00:42:38,470 --> 00:42:45,070
thing it's there it's fine and Fedora

00:42:42,040 --> 00:42:47,590
also have their equivalent with fed find

00:42:45,070 --> 00:42:49,030
I think which is their thing looking at

00:42:47,590 --> 00:42:53,310
their equivalent and doing the same

00:42:49,030 --> 00:42:53,310
thing so yeah thanks

00:42:55,240 --> 00:42:58,500
yes does

00:43:04,270 --> 00:43:08,750
the fedora increase the number of Isis

00:43:06,980 --> 00:43:11,990
if good now know that they have of

00:43:08,750 --> 00:43:13,789
queueing hmm did fedora increase the

00:43:11,990 --> 00:43:15,440
number of isil's ability since they have

00:43:13,789 --> 00:43:17,510
no they're still producing the same

00:43:15,440 --> 00:43:20,470
number of Isis is this they always build

00:43:17,510 --> 00:43:22,520
and that hasn't changed so it's mainly

00:43:20,470 --> 00:43:25,579
for them they've been working a lot on

00:43:22,520 --> 00:43:28,280
on their own testing to task at Ron for

00:43:25,579 --> 00:43:30,049
a long time which was basically stepping

00:43:28,280 --> 00:43:33,369
into their manual process exactly the

00:43:30,049 --> 00:43:35,569
same way they always did it with open QA

00:43:33,369 --> 00:43:37,849
that's kind of dropped in there and done

00:43:35,569 --> 00:43:39,020
that so that so they're still process

00:43:37,849 --> 00:43:40,520
why is still doing the same old

00:43:39,020 --> 00:43:42,920
processes that used to with manual

00:43:40,520 --> 00:43:46,630
testing and just kind of triggering open

00:43:42,920 --> 00:43:49,299
queuing semi manually at the moment but

00:43:46,630 --> 00:43:54,559
that'll change I mean it's you know I

00:43:49,299 --> 00:43:55,970
did my test in December it's now may you

00:43:54,559 --> 00:43:57,470
know the world doesn't change overnight

00:43:55,970 --> 00:43:59,390
I wouldn't be surprised if they start

00:43:57,470 --> 00:44:02,140
wanting to test more things faster and

00:43:59,390 --> 00:44:02,140
faster faster

00:44:03,420 --> 00:44:06,829
Oh which is you know one thing I

00:44:05,099 --> 00:44:09,000
mentioned forgot to mention with this

00:44:06,829 --> 00:44:11,790
the the back end is actually also

00:44:09,000 --> 00:44:14,490
incredibly scalable like OBS so at the

00:44:11,790 --> 00:44:16,890
moment we have for the for example the

00:44:14,490 --> 00:44:18,510
suse linux wish installation of open

00:44:16,890 --> 00:44:20,790
curing i think something like 24 workers

00:44:18,510 --> 00:44:23,790
now on various different architectures

00:44:20,790 --> 00:44:25,260
so we can do 24 tests in parallel so you

00:44:23,790 --> 00:44:25,950
can have a really complicated test suite

00:44:25,260 --> 00:44:27,990
with a whole bunch of different

00:44:25,950 --> 00:44:30,599
installation scenarios or application

00:44:27,990 --> 00:44:32,549
test new build appears and you've got 24

00:44:30,599 --> 00:44:34,829
of them running all at the same time and

00:44:32,549 --> 00:44:37,619
just like OBS you can keep on adding

00:44:34,829 --> 00:44:40,170
more workers as you need it with more

00:44:37,619 --> 00:44:41,369
hardware so she's really funky but at

00:44:40,170 --> 00:44:46,410
the same time it's nice and small you

00:44:41,369 --> 00:44:52,020
can fit it running on a laptop last

00:44:46,410 --> 00:44:54,650
chance for questions nope wonderful

00:44:52,020 --> 00:44:54,650

YouTube URL: https://www.youtube.com/watch?v=a8LmqhwpVvg


