Title: openSUSE Conference 2018 - DevOps for GNOME with Flatpak
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1876-devops-for-gnome-with-flatpak

And how we improved our contributors experience and exposure of the happenings of GNOME

As probably you might know, GNOME hasn't been the most updated in technologies & processes used for the design, development, testing, QA, delivery loop. To be honest, we have been quite behind!

Build fails, not passing tests, contributors stuck with trivial details, each product with different released days, designers and QA in need to build the whole stack to try out a minimal UI change... well, we could continue indefinitely. Needless to say this was a huge impact in our performance and contributor friendliness, even more in a time where web applications are as common.

Fortunately, things has changed dramatically over the last two years, specially with Flatpak for a containerized-alike build and distribution of apps and our move to GitLab and its integrated CI, we are able to fully dive into integrating a more DevOps oriented workflow. This effort has become a dream come true for GNOME, that we would have never imagined a few years back.

In this talk I will present and explain in details how to use and integrate Flatpak and GitLab together to create the future of the DevOps experience for Linux applications development and how we use it at GNOME and what impact is making to our organization.

As probably you might know, GNOME hasn't been the most updated in technologies & processes used for the design, development, testing, QA, delivery loop. To be honest, we have been quite behind!

Build fails, not passing tests, contributors stuck with trivial details, each product with different released days, designers and QA in need to build the whole stack to try out a minimal UI change... well, we could continue indefinitely. Needless to say this was a huge impact in our performance and contributor friendliness, even more in a time where web applications are as common.

Fortunately, things has changed dramatically over the last two years, specially with Flatpak for a containerized-alike build and distribution of apps and our move to GitLab and its integrated CI, we are able to fully dive into integrating a more DevOps oriented workflow. This effort has become a dream come true for GNOME, that we would have never imagined a few years back.

In this talk I will present and explain in details how to use and integrate Flatpak and GitLab together to create the future of the DevOps experience for Linux applications development and how we use it at GNOME and what impact is making to our organization.

Carlos Soriano
Captions: 
	00:00:01,080 --> 00:00:03,140
you

00:00:05,890 --> 00:00:12,250
so welcome to the pub's at Nam I'm

00:00:10,010 --> 00:00:15,379
Carlos Soriano I work in a rahat

00:00:12,250 --> 00:00:17,150
basically as maintainer of Nautilus but

00:00:15,379 --> 00:00:17,930
to be honest I spend a lot of time as

00:00:17,150 --> 00:00:20,270
well

00:00:17,930 --> 00:00:22,519
more on the organizational level of Nam

00:00:20,270 --> 00:00:26,300
as part of the board of directors and

00:00:22,519 --> 00:00:27,920
designers instantly I have been the

00:00:26,300 --> 00:00:30,710
point of contact with Philips because no

00:00:27,920 --> 00:00:32,989
me switching to give up and with our

00:00:30,710 --> 00:00:34,519
partnership I'm also interested quite a

00:00:32,989 --> 00:00:38,239
bit in in the whole experience of

00:00:34,519 --> 00:00:40,219
developers and uses a gnome so I have

00:00:38,239 --> 00:00:42,680
been working on kind of like a mission

00:00:40,219 --> 00:00:44,480
with epic angle up to try to make Fulda

00:00:42,680 --> 00:00:47,270
pops experience for Nam because before

00:00:44,480 --> 00:00:51,559
we have been quite but in keeping with

00:00:47,270 --> 00:00:53,770
that so the review is going to be the

00:00:51,559 --> 00:00:58,430
first part which is welcome to tell

00:00:53,770 --> 00:01:01,850
which was what we were doing before we

00:00:58,430 --> 00:01:03,890
were building applications on Nam the

00:01:01,850 --> 00:01:07,369
stability and build ability that we had

00:01:03,890 --> 00:01:09,649
a Nam reproducibility the pre-planning

00:01:07,369 --> 00:01:12,979
that we have the iteration within design

00:01:09,649 --> 00:01:16,039
QA users and there is some phone missing

00:01:12,979 --> 00:01:19,580
there anyway the feedback cycle cycle

00:01:16,039 --> 00:01:22,789
that we have then look for the tools

00:01:19,580 --> 00:01:25,459
that now fixing this which is flap again

00:01:22,789 --> 00:01:28,099
gillip we will see just the basics of in

00:01:25,459 --> 00:01:30,470
LA and gulab CI and then the flood by

00:01:28,099 --> 00:01:32,660
basics and then finally the most

00:01:30,470 --> 00:01:35,239
interesting parenting is when you merge

00:01:32,660 --> 00:01:38,270
both of them then you create a full deep

00:01:35,239 --> 00:01:40,670
experience with cion flat back flap back

00:01:38,270 --> 00:01:48,080
and reality bundles continuous delivery

00:01:40,670 --> 00:01:51,560
and the full new cycle so how we were

00:01:48,080 --> 00:01:53,869
will being not before have you try ever

00:01:51,560 --> 00:01:57,429
to build an application you know before

00:01:53,869 --> 00:02:00,229
yeah yeah yeah I can imagine

00:01:57,429 --> 00:02:03,379
so we were using something called eh

00:02:00,229 --> 00:02:06,050
bill jet wheel is just like an escape

00:02:03,379 --> 00:02:08,030
abaca script that has some prefix

00:02:06,050 --> 00:02:11,090
forestalling applications and some

00:02:08,030 --> 00:02:13,010
remain very Abel's that's it that means

00:02:11,090 --> 00:02:15,230
that half of the themes are on the host

00:02:13,010 --> 00:02:17,020
and then hard for the things we were

00:02:15,230 --> 00:02:21,700
building from master

00:02:17,020 --> 00:02:23,830
and that is not versioning so for

00:02:21,700 --> 00:02:28,360
example to give an example to build out

00:02:23,830 --> 00:02:32,080
he lose he was eighty modules building

00:02:28,360 --> 00:02:34,660
from master and it was taking around

00:02:32,080 --> 00:02:37,330
between four hours and eight hours from

00:02:34,660 --> 00:02:40,390
scratch that's a lot for application in

00:02:37,330 --> 00:02:41,020
Nam and you can imagine what you are

00:02:40,390 --> 00:02:44,560
building

00:02:41,020 --> 00:02:46,750
eighty modules from master that some of

00:02:44,560 --> 00:02:48,989
them are not even controlled by Nam it's

00:02:46,750 --> 00:02:52,239
gonna break it's gonna break

00:02:48,989 --> 00:02:56,280
so while we are doing for you know

00:02:52,239 --> 00:02:59,850
fixing this problem before good luck

00:02:56,280 --> 00:03:02,560
literally nothing we had nothing before

00:02:59,850 --> 00:03:04,330
and this is really about experience you

00:03:02,560 --> 00:03:06,489
can imagine for new contributors and for

00:03:04,330 --> 00:03:11,860
developers even for people distributors

00:03:06,489 --> 00:03:14,860
designers this is insane so for the

00:03:11,860 --> 00:03:16,810
possibility basically we had different

00:03:14,860 --> 00:03:19,030
environment for developers designers

00:03:16,810 --> 00:03:21,160
qadian users because developers were

00:03:19,030 --> 00:03:23,650
using maybe a very update distro like

00:03:21,160 --> 00:03:25,930
fedora things like this deleted fedora

00:03:23,650 --> 00:03:27,430
but maybe the sinus or not the adducing

00:03:25,930 --> 00:03:30,549
may be open source or arts or whatever

00:03:27,430 --> 00:03:32,620
the same for QA and users so the problem

00:03:30,549 --> 00:03:34,900
is that everyone what was in its own

00:03:32,620 --> 00:03:40,660
environment which means things quite

00:03:34,900 --> 00:03:43,450
difficult I need to keep time let me

00:03:40,660 --> 00:03:45,400
okay because it's my first sort alt I

00:03:43,450 --> 00:03:49,570
usually do long halt so I don't want to

00:03:45,400 --> 00:03:51,190
keep very long so yeah I think most of

00:03:49,570 --> 00:03:54,010
us has seen in the last part in the

00:03:51,190 --> 00:03:56,500
users that when they come to us and try

00:03:54,010 --> 00:03:59,260
to file a report we say oh it work for

00:03:56,500 --> 00:04:00,489
me right this is very typical and this

00:03:59,260 --> 00:04:04,769
is because they are using different

00:04:00,489 --> 00:04:07,840
environments right and here I

00:04:04,769 --> 00:04:10,540
interesting this was the first like the

00:04:07,840 --> 00:04:13,239
the guide we have for newcomers and can

00:04:10,540 --> 00:04:20,829
you see here I will show you directly on

00:04:13,239 --> 00:04:22,990
the here can you see here in big it is

00:04:20,829 --> 00:04:24,610
strongly recommended to use for a 25

00:04:22,990 --> 00:04:27,970
that other point was the latest and

00:04:24,610 --> 00:04:30,130
that's it we only support it fedora very

00:04:27,970 --> 00:04:33,730
politically correct right for now

00:04:30,130 --> 00:04:36,940
and I remember deepstar I don't know

00:04:33,730 --> 00:04:38,830
he's okay you yeah you were not pleased

00:04:36,940 --> 00:04:40,900
with this and you were like come on this

00:04:38,830 --> 00:04:42,310
is not motivating and I agree this was

00:04:40,900 --> 00:04:44,350
not a good experience and he's really

00:04:42,310 --> 00:04:45,760
bad but we had no other choice

00:04:44,350 --> 00:04:58,900
and it happened then now we have the

00:04:45,760 --> 00:05:00,880
choice then also this goes inside the

00:04:58,900 --> 00:05:03,820
force PDFs are not in flat pack but

00:05:00,880 --> 00:05:06,700
still we were doing project planning

00:05:03,820 --> 00:05:09,310
just in the wiki it was a table with

00:05:06,700 --> 00:05:12,070
links to bugs nobody was taking it there

00:05:09,310 --> 00:05:14,110
is no integration and you couldn't query

00:05:12,070 --> 00:05:15,550
things like the whole sort ambition for

00:05:14,110 --> 00:05:17,200
no more long-term additional six like

00:05:15,550 --> 00:05:20,440
this which is also very bad for

00:05:17,200 --> 00:05:22,900
distributors like open source so if

00:05:20,440 --> 00:05:24,970
really what we'll have for the

00:05:22,900 --> 00:05:27,040
interaction between designers QA users

00:05:24,970 --> 00:05:29,890
is that for example designers have no

00:05:27,040 --> 00:05:32,830
cups and they iterate on them and they

00:05:29,890 --> 00:05:34,570
can this should be able to try work in

00:05:32,830 --> 00:05:36,430
progress like in a branch or something

00:05:34,570 --> 00:05:38,590
but they are designers so you cannot

00:05:36,430 --> 00:05:40,420
make them you know build not to lose 80

00:05:38,590 --> 00:05:43,840
modules that probably they are going to

00:05:40,420 --> 00:05:45,850
fail anyway they also usually wants to

00:05:43,840 --> 00:05:48,040
see different versions for example the

00:05:45,850 --> 00:05:49,960
development version alongside the system

00:05:48,040 --> 00:05:51,820
installation for for designer this is

00:05:49,960 --> 00:05:54,070
very good because they can see you know

00:05:51,820 --> 00:05:56,650
the difference here if it works if it

00:05:54,070 --> 00:05:59,350
doesn't work and they can iterate on the

00:05:56,650 --> 00:06:01,510
feedback and of course they are either

00:05:59,350 --> 00:06:05,200
later or non-technical so you cannot

00:06:01,510 --> 00:06:06,520
give them yes a scrip and good luck and

00:06:05,200 --> 00:06:07,870
this is the kind of see we have before

00:06:06,520 --> 00:06:10,510
we see which is Mozilla

00:06:07,870 --> 00:06:12,580
so they attach some a matter of

00:06:10,510 --> 00:06:15,070
something there is no inline super for

00:06:12,580 --> 00:06:17,290
images there is no way to try out new

00:06:15,070 --> 00:06:20,110
things in here not even deployment ation

00:06:17,290 --> 00:06:23,410
for for the Saints they do so yeah it

00:06:20,110 --> 00:06:25,180
was quite bad so the problem is that

00:06:23,410 --> 00:06:27,520
everyone was following the same partners

00:06:25,180 --> 00:06:30,040
the developers and does not ideal right

00:06:27,520 --> 00:06:33,910
in Delhi we have early feedback from

00:06:30,040 --> 00:06:35,530
designers from users from QA that they

00:06:33,910 --> 00:06:38,919
can try these things yes we want click

00:06:35,530 --> 00:06:40,860
everything visual no c'mon line and that

00:06:38,919 --> 00:06:43,369
this path is optimal is optimized for

00:06:40,860 --> 00:06:46,610
users QA of respective

00:06:43,369 --> 00:06:50,899
or designers okay let's go to the second

00:06:46,610 --> 00:06:53,929
pyre so this is what you have until now

00:06:50,899 --> 00:06:56,089
quite what I think I to be honest I I

00:06:53,929 --> 00:06:57,349
cannot imagine now how we have to live

00:06:56,089 --> 00:06:59,569
in there for so long

00:06:57,349 --> 00:07:02,869
III don't know I don't know how we did

00:06:59,569 --> 00:07:06,399
it but now I will explain the tools that

00:07:02,869 --> 00:07:10,039
solve these issues flat back and gillip

00:07:06,399 --> 00:07:11,719
so just the very basics of big lab it's

00:07:10,039 --> 00:07:14,119
a tool that it was made from a scratch

00:07:11,719 --> 00:07:16,159
for a type of experience so that means

00:07:14,119 --> 00:07:18,709
everything is interrelated what we have

00:07:16,159 --> 00:07:20,089
before it's back silicic it and it will

00:07:18,709 --> 00:07:22,669
turn everything and now everything's

00:07:20,089 --> 00:07:25,759
interacted on the same - it's very

00:07:22,669 --> 00:07:27,619
similar to github if you know get up but

00:07:25,759 --> 00:07:31,009
it's a bit more powerful and it's free

00:07:27,619 --> 00:07:34,279
software as you said every Center rated

00:07:31,009 --> 00:07:35,779
the whole theme from idea to design to

00:07:34,279 --> 00:07:38,599
implementation to continuous integration

00:07:35,779 --> 00:07:40,699
QA continuous delivery and again and the

00:07:38,599 --> 00:07:44,089
full cycle of the post so that's very

00:07:40,699 --> 00:07:45,769
good for for us Anakin superb for

00:07:44,089 --> 00:07:47,839
non-technical teams and this one is very

00:07:45,769 --> 00:07:50,929
important because nothing makes me more

00:07:47,839 --> 00:07:53,479
happy than to see this which is right

00:07:50,929 --> 00:07:55,879
now in the Norman Gill lab we have all

00:07:53,479 --> 00:07:59,209
our teams using the same tool design

00:07:55,879 --> 00:08:01,309
engagement you want to put him Fedora

00:07:59,209 --> 00:08:02,779
translation developer portal even the

00:08:01,309 --> 00:08:06,079
Board of Directors are using this tool

00:08:02,779 --> 00:08:08,659
so everyone is in the same you can use

00:08:06,079 --> 00:08:11,569
the labels and it's like this the USO is

00:08:08,659 --> 00:08:13,129
quite nice but ok the most important bar

00:08:11,569 --> 00:08:15,919
and the technical let's go to the

00:08:13,129 --> 00:08:18,919
technical part again is the CI is

00:08:15,919 --> 00:08:20,779
similar to Travis if you know it you can

00:08:18,919 --> 00:08:23,389
spine lines for example you can have

00:08:20,779 --> 00:08:29,599
pipelines under stitches so for example

00:08:23,389 --> 00:08:31,099
you can have build test deployment JB

00:08:29,599 --> 00:08:33,829
you there are there are a few of them

00:08:31,099 --> 00:08:36,709
you can have artifacts which is a way to

00:08:33,829 --> 00:08:39,259
put from the container to to the public

00:08:36,709 --> 00:08:41,000
to pull it to policy something and there

00:08:39,259 --> 00:08:44,500
are scales so for example you can do

00:08:41,000 --> 00:08:46,880
something like every Sunday I will

00:08:44,500 --> 00:08:50,029
deploy my application to the users so

00:08:46,880 --> 00:08:51,350
they will use an update and you don't

00:08:50,029 --> 00:08:54,310
have to do anything else

00:08:51,350 --> 00:08:56,300
so let's see how is the CI that we do

00:08:54,310 --> 00:08:59,060
know sorry this is just a small example

00:08:56,300 --> 00:09:02,780
so basically how they gillip CI wars is

00:08:59,060 --> 00:09:05,540
that you choose a darker CI image and

00:09:02,780 --> 00:09:08,480
then you have the stitches for example

00:09:05,540 --> 00:09:11,780
test and you just run a script for

00:09:08,480 --> 00:09:14,630
example which is a generator of static

00:09:11,780 --> 00:09:18,020
websites and then you deploy in the

00:09:14,630 --> 00:09:20,240
pages stage doing the same but then you

00:09:18,020 --> 00:09:23,000
put some artifacts which is the public

00:09:20,240 --> 00:09:24,740
folder from the website and that's it

00:09:23,000 --> 00:09:28,100
it's very simple

00:09:24,740 --> 00:09:31,540
this generates website a static website

00:09:28,100 --> 00:09:36,350
in some link so I think it's quite nice

00:09:31,540 --> 00:09:40,190
it's quite powerful the gillip CI and

00:09:36,350 --> 00:09:43,640
now flat back how much of you are know

00:09:40,190 --> 00:09:48,050
about flat pack you know okay what's a

00:09:43,640 --> 00:09:50,120
few yeah so probably you know already

00:09:48,050 --> 00:09:52,880
the basics but I will do very fast this

00:09:50,120 --> 00:09:58,190
one basically uses container

00:09:52,880 --> 00:10:00,350
technologies like OS 3 it's unboxit that

00:09:58,190 --> 00:10:02,720
means and it supports it by default if

00:10:00,350 --> 00:10:05,330
you want you cannot opt out of that you

00:10:02,720 --> 00:10:09,050
can punch holes or make use of portals

00:10:05,330 --> 00:10:09,890
which is similar to Android intent but

00:10:09,050 --> 00:10:12,530
yeah is a sandbox

00:10:09,890 --> 00:10:15,590
you cannot just remove this sandbox

00:10:12,530 --> 00:10:18,050
system it has a consistent environment

00:10:15,590 --> 00:10:20,600
which I guess you can start imagining

00:10:18,050 --> 00:10:22,550
how this fix things that we have talked

00:10:20,600 --> 00:10:25,190
in before because everyone is going to

00:10:22,550 --> 00:10:26,870
use the same memory I mean it doesn't

00:10:25,190 --> 00:10:30,670
depend on the host basically like a

00:10:26,870 --> 00:10:33,770
container right so it doesn't touch the

00:10:30,670 --> 00:10:36,260
user installation it's also version so

00:10:33,770 --> 00:10:37,550
you can have SDKs like an Android for

00:10:36,260 --> 00:10:40,400
example so you target that specific

00:10:37,550 --> 00:10:42,350
version and it's forward compatible so

00:10:40,400 --> 00:10:43,880
even if you are using a very new distro

00:10:42,350 --> 00:10:46,640
with a very old application that's gonna

00:10:43,880 --> 00:10:49,490
keep working there is nothing that it's

00:10:46,640 --> 00:10:52,490
gonna break it and we control of all of

00:10:49,490 --> 00:10:54,260
that is cross distribution so finally

00:10:52,490 --> 00:10:56,000
with this we can say to deepstar that

00:10:54,260 --> 00:10:58,040
the he does not have to worry about

00:10:56,000 --> 00:11:00,170
newcomers to know because now they can

00:10:58,040 --> 00:11:02,560
use open source and contribute to know

00:11:00,170 --> 00:11:02,560
freely

00:11:02,589 --> 00:11:09,279
so just a very basic on how you create a

00:11:05,589 --> 00:11:13,110
flat-pack manifest which is what defines

00:11:09,279 --> 00:11:20,499
your application I will show you now a

00:11:13,110 --> 00:11:23,589
nautilus flat back it's very simple you

00:11:20,499 --> 00:11:27,579
have the first section this one can you

00:11:23,589 --> 00:11:30,059
see well there yeah it's fine

00:11:27,579 --> 00:11:33,610
the first section is just describing the

00:11:30,059 --> 00:11:36,369
application name then the target like

00:11:33,610 --> 00:11:38,379
it's using master and SDK which is no

00:11:36,369 --> 00:11:41,949
there are caddy there are electron there

00:11:38,379 --> 00:11:44,410
are others and we put some tags and then

00:11:41,949 --> 00:11:47,040
we describe that to application the

00:11:44,410 --> 00:11:50,170
dependencies that are not in the SDK

00:11:47,040 --> 00:11:52,329
Nautilus has actually not many is active

00:11:50,170 --> 00:11:53,709
reactive which is a wrapper or the first

00:11:52,329 --> 00:11:57,160
one tracker

00:11:53,709 --> 00:11:59,949
no matter are Nautilus and that's it

00:11:57,160 --> 00:12:02,199
this is how you will not lose it's as

00:11:59,949 --> 00:12:15,759
simple as that you do flat-pack builder

00:12:02,199 --> 00:12:21,790
build this dot and housing of this is

00:12:15,759 --> 00:12:24,069
that we go from the four hours within

00:12:21,790 --> 00:12:27,189
four hours 8 hours a CD four to six

00:12:24,069 --> 00:12:29,350
minutes now anyone can go to non builder

00:12:27,189 --> 00:12:31,629
for example you open up will they're

00:12:29,350 --> 00:12:33,610
usually not a loose instance minutes you

00:12:31,629 --> 00:12:35,319
have not to lose their running and it's

00:12:33,610 --> 00:12:37,600
gonna work because it's using this

00:12:35,319 --> 00:12:40,480
environment that is isolated from the

00:12:37,600 --> 00:12:42,220
host I think that's pretty good that's a

00:12:40,480 --> 00:12:44,230
really big change from what we have

00:12:42,220 --> 00:12:49,269
before and I'm very happy that we have

00:12:44,230 --> 00:12:52,720
that so I can since it's possible as

00:12:49,269 --> 00:12:53,980
well and the bargman is is consistent we

00:12:52,720 --> 00:12:56,709
don't have any issues that we talked

00:12:53,980 --> 00:12:57,970
before like the person in or or braking

00:12:56,709 --> 00:13:00,069
because some other model master

00:12:57,970 --> 00:13:05,940
histories is broken or something like

00:13:00,069 --> 00:13:08,190
this and now ok have five minutes guys

00:13:05,940 --> 00:13:10,320
the last part I think is the most

00:13:08,190 --> 00:13:12,960
interesting is when you put flat-pack

00:13:10,320 --> 00:13:15,660
and Gil up together basically using the

00:13:12,960 --> 00:13:17,880
CI because the CI is the the year the

00:13:15,660 --> 00:13:20,190
the thing that connects flat-pack with

00:13:17,880 --> 00:13:25,560
Gil up in a way to create this debuffs

00:13:20,190 --> 00:13:28,380
cycle so let's see how we do CI for flat

00:13:25,560 --> 00:13:34,290
pack and Nautilus well Allison and the

00:13:28,380 --> 00:13:38,610
whole room actually so it's quite easy

00:13:34,290 --> 00:13:41,430
we have an image that we create it is

00:13:38,610 --> 00:13:45,030
yes I think a very very minimal fill

00:13:41,430 --> 00:13:47,700
image which has the flat package they

00:13:45,030 --> 00:13:49,170
can install so if you have the the

00:13:47,700 --> 00:13:52,470
crystal you don't need to download it

00:13:49,170 --> 00:13:54,750
and download it every time we have some

00:13:52,470 --> 00:13:57,600
variables just for building and then

00:13:54,750 --> 00:14:01,080
what we do is flap up in there and we

00:13:57,600 --> 00:14:04,280
say to a stop on the on the Nautilus

00:14:01,080 --> 00:14:09,930
module so we build all the dependencies

00:14:04,280 --> 00:14:13,170
then yeah we stop then we built that

00:14:09,930 --> 00:14:15,540
well that well Nautilus we have to do

00:14:13,170 --> 00:14:17,310
this because we are doing these in

00:14:15,540 --> 00:14:21,240
branches so for example when you create

00:14:17,310 --> 00:14:23,970
a merge request on on Nautilus now you

00:14:21,240 --> 00:14:26,160
will have the CI triggering and then it

00:14:23,970 --> 00:14:27,870
will build whatever is in there to do

00:14:26,160 --> 00:14:29,490
that you have to build whatever the

00:14:27,870 --> 00:14:32,040
gillip CI is download in they're not

00:14:29,490 --> 00:14:33,780
they are 12-string Nautilus right so we

00:14:32,040 --> 00:14:36,270
estoppel Nautilus then we build while

00:14:33,780 --> 00:14:37,850
gillip CI has inside but everything is

00:14:36,270 --> 00:14:41,760
done inside the flat-pack environment

00:14:37,850 --> 00:14:47,520
then we install and then we run the test

00:14:41,760 --> 00:14:50,250
and finally we create a bundle that we

00:14:47,520 --> 00:14:52,740
will speak about this later but this

00:14:50,250 --> 00:14:55,680
quite simple then we have some artifacts

00:14:52,740 --> 00:14:57,810
which is what we show to the wall and

00:14:55,680 --> 00:15:01,620
it's basically the bundle that we'll see

00:14:57,810 --> 00:15:04,770
later what is that some locks and we say

00:15:01,620 --> 00:15:06,930
that it is pious after 30 days and then

00:15:04,770 --> 00:15:10,010
we have some cash so every build is

00:15:06,930 --> 00:15:10,010
going to keep this cash

00:15:12,180 --> 00:15:20,430
so basically how it looks like is that

00:15:15,570 --> 00:15:20,430
for example you go to pipelines

00:15:27,540 --> 00:15:40,990
pipelines here you can see all of the CI

00:15:38,980 --> 00:15:42,340
for every branch that we have so you

00:15:40,990 --> 00:15:46,030
create a me request and the CI is

00:15:42,340 --> 00:15:49,120
trigger that's very good because now

00:15:46,030 --> 00:15:52,090
what we have we have pre merge

00:15:49,120 --> 00:15:54,820
build test and runtime test we no longer

00:15:52,090 --> 00:15:56,200
have the issue about yes put into

00:15:54,820 --> 00:15:58,330
masters on scene and Boop

00:15:56,200 --> 00:16:00,460
nom now breaks and nobody can will know

00:15:58,330 --> 00:16:02,440
many more and six like this because we

00:16:00,460 --> 00:16:05,020
had the these issues before now

00:16:02,440 --> 00:16:07,300
everything that goes master is passed

00:16:05,020 --> 00:16:10,000
through the CI and since the environment

00:16:07,300 --> 00:16:12,010
is the same as developers are using if

00:16:10,000 --> 00:16:14,980
it part the CI it's gonna be buildable

00:16:12,010 --> 00:16:16,680
for any developers as well so we already

00:16:14,980 --> 00:16:19,150
fix those issues now we talked before

00:16:16,680 --> 00:16:23,230
and as you see before is quite fast from

00:16:19,150 --> 00:16:24,790
from four hours to three minutes now the

00:16:23,230 --> 00:16:26,320
second part which for me is the most

00:16:24,790 --> 00:16:28,600
interesting and I think is where

00:16:26,320 --> 00:16:30,400
actually flat-pack makes a difference

00:16:28,600 --> 00:16:33,610
here flapper together with Phillip is

00:16:30,400 --> 00:16:35,020
bundles so with flat-pack you can create

00:16:33,610 --> 00:16:36,670
a containerized

00:16:35,020 --> 00:16:39,550
bundle like an application you can

00:16:36,670 --> 00:16:41,110
download like in math in Tosh right and

00:16:39,550 --> 00:16:46,290
then with that you can install that and

00:16:41,110 --> 00:16:48,340
run it so what we do for example here

00:16:46,290 --> 00:16:51,040
this is a merge request

00:16:48,340 --> 00:16:54,580
I created a branch in Nautilus I created

00:16:51,040 --> 00:16:58,330
just for this talk I modified I will

00:16:54,580 --> 00:17:01,330
show to you here can you see the soul

00:16:58,330 --> 00:17:03,760
hidden files here I modified this label

00:17:01,330 --> 00:17:05,530
and I put something in there I create

00:17:03,760 --> 00:17:08,680
the branch I creates the me request and

00:17:05,530 --> 00:17:11,920
now here the CI triggers and creates

00:17:08,680 --> 00:17:14,290
test makes the test the built and then

00:17:11,920 --> 00:17:16,060
creates this bundle and you single app

00:17:14,290 --> 00:17:18,040
review apps which is something for

00:17:16,060 --> 00:17:20,650
making deployments we go to the

00:17:18,040 --> 00:17:23,290
continuous delivery which is exposing

00:17:20,650 --> 00:17:25,120
the flat-pack

00:17:23,290 --> 00:17:27,599
and it's in this link so this is just a

00:17:25,120 --> 00:17:29,040
regular mess request so we click here

00:17:27,599 --> 00:17:43,510
[Music]

00:17:29,040 --> 00:18:00,930
he's downloading here don't let Lee

00:17:43,510 --> 00:18:04,540
naughty lose the flat-pack install lunch

00:18:00,930 --> 00:18:05,710
don't this is not a loose master this is

00:18:04,540 --> 00:18:09,430
not a loose from there from the merge

00:18:05,710 --> 00:18:12,520
request and you can see it here hello

00:18:09,430 --> 00:18:14,560
open shows conference this is amazing

00:18:12,520 --> 00:18:16,870
now the signers doesn't need to build

00:18:14,560 --> 00:18:20,020
anything you can't use go there and

00:18:16,870 --> 00:18:22,480
install whatever we have done we solve

00:18:20,020 --> 00:18:38,470
the problem we finally file have like a

00:18:22,480 --> 00:18:40,420
live experience together you know and so

00:18:38,470 --> 00:18:42,490
finally so what we have here is that we

00:18:40,420 --> 00:18:47,260
generate is the label bundle per my

00:18:42,490 --> 00:18:54,070
request we have parallel installation so

00:18:47,260 --> 00:18:55,510
designers can see so you can see the

00:18:54,070 --> 00:18:57,130
system installation on the left there

00:18:55,510 --> 00:18:59,650
the developer installation on the right

00:18:57,130 --> 00:19:04,360
and they can make difference within them

00:18:59,650 --> 00:19:08,020
they can provide any you know feedback

00:19:04,360 --> 00:19:10,870
that they have and now the last thing is

00:19:08,020 --> 00:19:14,230
how these goes together now you have

00:19:10,870 --> 00:19:18,060
more or less the the big overview but

00:19:14,230 --> 00:19:22,930
basically I will show you a real example

00:19:18,060 --> 00:19:24,760
recently we had well now we fix also we

00:19:22,930 --> 00:19:27,370
fill up this short ambition a long-term

00:19:24,760 --> 00:19:30,010
vision of Nam now we are using this epic

00:19:27,370 --> 00:19:31,870
levels stretch labels to say they were

00:19:30,010 --> 00:19:35,950
the sort ambition of norm the big task

00:19:31,870 --> 00:19:36,999
and one of them is the action bar we we

00:19:35,950 --> 00:19:41,709
make a proposal

00:19:36,999 --> 00:19:45,429
of and I don't have water okay anyway to

00:19:41,709 --> 00:19:48,699
make an action bar so sinks to the flat

00:19:45,429 --> 00:19:50,679
back and gillip we had around sixty

00:19:48,699 --> 00:19:53,199
signers that we never seen before in

00:19:50,679 --> 00:19:54,909
number just random users runs on the

00:19:53,199 --> 00:19:56,619
signers from from the world that came

00:19:54,909 --> 00:19:58,959
used to help us with the feedback

00:19:56,619 --> 00:20:02,949
because they could instant this quite

00:19:58,959 --> 00:20:05,369
easily so we propose something finally

00:20:02,949 --> 00:20:08,019
we have oh thank you very much

00:20:05,369 --> 00:20:13,089
finally we have inline super 40 matches

00:20:08,019 --> 00:20:14,889
and then with what I did here is that

00:20:13,089 --> 00:20:18,789
with the signs the signer put some oak

00:20:14,889 --> 00:20:21,609
up and then I create a wee branch I

00:20:18,789 --> 00:20:23,679
create a sorry we've met request there's

00:20:21,609 --> 00:20:25,569
an eclipse installed neither liked it

00:20:23,679 --> 00:20:27,459
let's do another mock-up you can see

00:20:25,569 --> 00:20:29,589
here that there are a lot of mock-ups a

00:20:27,459 --> 00:20:34,029
lot of designers a lot of user providing

00:20:29,589 --> 00:20:36,789
feedback on mock-ups so he was doing a

00:20:34,029 --> 00:20:40,299
lot of mock-up I created a new verse

00:20:36,789 --> 00:20:42,489
request and again and again and again

00:20:40,299 --> 00:20:44,409
under the tradition was so easy because

00:20:42,489 --> 00:20:46,449
they just have to start anything and

00:20:44,409 --> 00:20:49,239
then finally the last one this one have

00:20:46,449 --> 00:20:50,499
we match it and that's it and it's the

00:20:49,239 --> 00:20:52,899
first time that really the singers have

00:20:50,499 --> 00:20:54,909
been you know happy to a I can't just go

00:20:52,899 --> 00:21:02,169
here and try things burly early on the

00:20:54,909 --> 00:21:05,979
on the cycle so yeah the last one the

00:21:02,169 --> 00:21:07,749
Bob's we achieve it and this is for no

00:21:05,979 --> 00:21:09,279
but actually you can do it for any

00:21:07,749 --> 00:21:11,409
application and I think is very helpful

00:21:09,279 --> 00:21:21,489
to have this whole six cycle of a

00:21:11,409 --> 00:21:23,819
flapper plus Caleb questions okay thank

00:21:21,489 --> 00:21:23,819

YouTube URL: https://www.youtube.com/watch?v=eG7zEh3nAVQ


