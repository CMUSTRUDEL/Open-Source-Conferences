Title: openSUSE Conference 2018 - Atomic Bonds: openSUSE Kubic & SUSE CaaSP
Publication date: 2018-05-25
Playlist: openSUSE Conference 2018
Description: 
	openSUSE & SUSE exploring the container world

The Kubic Project is an exciting new part of the openSUSE family. This talk will provide a brief introduction of the Project and how it focuses on container technologies such as the Docker & Podman runtimes, Kubernetes, Transactional (Atomic) Operating System updates, and much more.

The session will then go into detail how Kubic provides the base for SUSE's Container as a Service Platform (CaaSP), explaining how Kubic serves a similar role to that product as Tumbleweed does to SUSE Linux Enterprise, and explaining the relationship between CaaSP versions, SLE versions, and Tumbleweed.

Finally, this presentation will be an opportunity for those interested in Kubic to learn ways they can get involved with the project and contribute, regardless if their interest is containers, orchestration, testing, or atomic system updates.

The Kubic Project is an exciting new part of the openSUSE family. This talk will provide a brief introduction of the Project and how it focuses on container technologies such as the Docker & Podman runtimes, Kubernetes, Transactional (Atomic) Operating System updates, and much more.

The session will then go into detail how Kubic provides the base for SUSE's Container as a Service Platform (CaaSP), explaining how Kubic serves a similar role to that product as Tumbleweed does to SUSE Linux Enterprise, and explaining the relationship between CaaSP versions, SLE versions, and Tumbleweed.

Finally, this presentation will be an opportunity for those interested in Kubic to learn ways they can get involved with the project and contribute, regardless if their interest is containers, orchestration, testing, or atomic system updates.

Richard Brown
Captions: 
	00:00:00,000 --> 00:00:11,219
oh hello okay

00:00:07,710 --> 00:00:12,870
so yes I'm Richard Brown the Linux

00:00:11,219 --> 00:00:15,780
distribution engineer working on Cuba

00:00:12,870 --> 00:00:21,119
Katz Souza and Alex is connect reduce

00:00:15,780 --> 00:00:24,090
himself hi my name is Alexander hats

00:00:21,119 --> 00:00:26,970
again the release manager Switzer

00:00:24,090 --> 00:00:30,179
containers a service platform and we're

00:00:26,970 --> 00:00:32,610
presenting oh yeah we're presenting how

00:00:30,179 --> 00:00:34,950
we work together so the openSUSE cubic

00:00:32,610 --> 00:00:36,899
what is openSUSE cubic and how that

00:00:34,950 --> 00:00:38,610
relates to Souza's class product and

00:00:36,899 --> 00:00:39,960
yeah sort of how we're collaborating

00:00:38,610 --> 00:00:42,840
together from the sort of Souza and

00:00:39,960 --> 00:00:44,730
openSUSE side of things but just before

00:00:42,840 --> 00:00:47,579
we start all of that I wanted to kind of

00:00:44,730 --> 00:00:50,820
give a little bit of a picture painting

00:00:47,579 --> 00:00:53,489
history lessons sort of thing and why

00:00:50,820 --> 00:00:55,649
what is this whole containerized world

00:00:53,489 --> 00:00:58,010
where are things going what are things

00:00:55,649 --> 00:01:00,300
looking like why why are we doing this

00:00:58,010 --> 00:01:02,370
why are we here

00:01:00,300 --> 00:01:03,960
and and you know lately I've been

00:01:02,370 --> 00:01:05,309
getting more into retro computing and

00:01:03,960 --> 00:01:07,290
thinking actually then about my first

00:01:05,309 --> 00:01:08,790
computer which was a Commodore 64 and

00:01:07,290 --> 00:01:10,770
you know and back then you know a

00:01:08,790 --> 00:01:13,010
computer was was completely disconnected

00:01:10,770 --> 00:01:15,060
from the world sitting in your home

00:01:13,010 --> 00:01:18,270
plugging into a TV and you know you're

00:01:15,060 --> 00:01:21,030
just happily hacking away on this one

00:01:18,270 --> 00:01:22,439
disconnected device but you know if you

00:01:21,030 --> 00:01:24,150
think of the world today of the

00:01:22,439 --> 00:01:27,080
computing you're actually using in your

00:01:24,150 --> 00:01:29,220
hand and user computing you know

00:01:27,080 --> 00:01:31,439
everything you know you've got this

00:01:29,220 --> 00:01:34,350
massive sort of priority of different

00:01:31,439 --> 00:01:36,180
devices you know smartwatches phones are

00:01:34,350 --> 00:01:38,360
computers on the desk are computers on

00:01:36,180 --> 00:01:41,070
our laptops are mobile stuff and

00:01:38,360 --> 00:01:43,770
everything here is all interconnected in

00:01:41,070 --> 00:01:46,020
some way you know probably talking to

00:01:43,770 --> 00:01:48,270
some server somewhere in some data

00:01:46,020 --> 00:01:50,369
center maybe more than one server

00:01:48,270 --> 00:01:52,049
actually more than three servers in fact

00:01:50,369 --> 00:01:53,850
so many servers that in the end we just

00:01:52,049 --> 00:01:57,329
stopped talking about servers and start

00:01:53,850 --> 00:01:58,979
calling it a cloud but you know it's you

00:01:57,329 --> 00:02:03,180
know it's still ultimately a whole bunch

00:01:58,979 --> 00:02:04,950
of service and this fact of computing

00:02:03,180 --> 00:02:06,540
you know that now sort of the general

00:02:04,950 --> 00:02:07,710
consumption point of computing is

00:02:06,540 --> 00:02:09,899
something is really you know you have

00:02:07,710 --> 00:02:11,410
some end user device and really a lot of

00:02:09,899 --> 00:02:13,690
the work is being done

00:02:11,410 --> 00:02:16,720
by some other thing in some back-end

00:02:13,690 --> 00:02:18,580
somewhere means the world is actually a

00:02:16,720 --> 00:02:21,850
very very different place and everything

00:02:18,580 --> 00:02:23,730
is way more interconnected and that

00:02:21,850 --> 00:02:26,680
means everything is way more complicated

00:02:23,730 --> 00:02:28,260
you know and that you see that not just

00:02:26,680 --> 00:02:31,960
reflected in sort of the very sort of

00:02:28,260 --> 00:02:34,540
tangible sort of network servers racks

00:02:31,960 --> 00:02:36,280
and clouds and that kind of thing but

00:02:34,540 --> 00:02:38,350
even down to our software the software

00:02:36,280 --> 00:02:40,180
rewriting these days more and more has a

00:02:38,350 --> 00:02:43,860
million different modules talking to a

00:02:40,180 --> 00:02:47,500
million different things and that just

00:02:43,860 --> 00:02:49,420
breeds complexity and confusion and you

00:02:47,500 --> 00:02:52,120
know difficulties with maintaining them

00:02:49,420 --> 00:02:54,490
and all this kind of stuff so you know

00:02:52,120 --> 00:02:56,440
the general trend is is you know towards

00:02:54,490 --> 00:02:57,970
turning everything into a module you

00:02:56,440 --> 00:02:59,560
know every you know software is trying

00:02:57,970 --> 00:03:02,200
to get more and more modularized more

00:02:59,560 --> 00:03:04,810
more can containerized and d-- dealt in

00:03:02,200 --> 00:03:07,510
a way of a smaller easier more

00:03:04,810 --> 00:03:09,130
manageable unit of consumption so it's

00:03:07,510 --> 00:03:12,160
easier to figure out how to maintain it

00:03:09,130 --> 00:03:14,230
it's easier for a developer to ship that

00:03:12,160 --> 00:03:15,310
software and have it reused in different

00:03:14,230 --> 00:03:17,020
ways or have it been used

00:03:15,310 --> 00:03:19,120
interchangeably so basically trying to

00:03:17,020 --> 00:03:22,540
turn computing into a collection of LEGO

00:03:19,120 --> 00:03:24,490
bricks and this isn't just to try and

00:03:22,540 --> 00:03:26,980
solve the the complexity problem or the

00:03:24,490 --> 00:03:29,320
interconnection problem but but also

00:03:26,980 --> 00:03:31,450
case of operating at scale you know the

00:03:29,320 --> 00:03:33,310
the the world has got bigger you know

00:03:31,450 --> 00:03:34,900
more people are using all of this stuff

00:03:33,310 --> 00:03:37,320
more people want to use all of this

00:03:34,900 --> 00:03:40,990
stuff you want to have services that can

00:03:37,320 --> 00:03:43,150
scale up and scale down depending on the

00:03:40,990 --> 00:03:44,890
amount of users you have or the amount

00:03:43,150 --> 00:03:48,570
of users that might be using this today

00:03:44,890 --> 00:03:51,220
or might not be using it tomorrow and

00:03:48,570 --> 00:03:53,530
when you then start thinking about our

00:03:51,220 --> 00:03:56,800
old computers our Commodore 64's are

00:03:53,530 --> 00:03:59,890
served our personal server sitting in

00:03:56,800 --> 00:04:02,200
Iraq somewhere we used to treat our

00:03:59,890 --> 00:04:04,209
servers like they were pets we would

00:04:02,200 --> 00:04:05,980
give them a name you know my servers

00:04:04,209 --> 00:04:08,860
were all named after Jedi Knights from

00:04:05,980 --> 00:04:10,990
Star Wars to Star Wars films you know

00:04:08,860 --> 00:04:13,570
and we lovingly look after them and we

00:04:10,990 --> 00:04:15,970
patch them carefully and we micromanage

00:04:13,570 --> 00:04:18,910
all of the configuration but that

00:04:15,970 --> 00:04:21,160
doesn't work when you're doing all of

00:04:18,910 --> 00:04:23,830
this stuff at that kind of scale when

00:04:21,160 --> 00:04:25,240
you have so many servers that you know

00:04:23,830 --> 00:04:28,060
you don't have enough

00:04:25,240 --> 00:04:30,539
Jedi Knights left and named them all and

00:04:28,060 --> 00:04:33,340
you can't SSH into each one and

00:04:30,539 --> 00:04:35,770
individually figure out you know how

00:04:33,340 --> 00:04:38,319
you're gonna configure that GT seat file

00:04:35,770 --> 00:04:40,090
on that machine you don't want to treat

00:04:38,319 --> 00:04:41,440
your servers like pets anymore you don't

00:04:40,090 --> 00:04:45,430
want to treat your machines like pets

00:04:41,440 --> 00:04:47,680
anymore you want to look at it much more

00:04:45,430 --> 00:04:51,190
like cattle you know just number them

00:04:47,680 --> 00:04:52,660
put a tag on them use them you know if

00:04:51,190 --> 00:04:54,610
they end up causing your problems you

00:04:52,660 --> 00:04:57,370
know kill them and eat them

00:04:54,610 --> 00:04:59,680
and you know just move on and have this

00:04:57,370 --> 00:05:01,229
constant sort of farm of computers doing

00:04:59,680 --> 00:05:04,509
your work for you

00:05:01,229 --> 00:05:06,520
so you can move faster so you can use

00:05:04,509 --> 00:05:09,610
this new software faster and faster and

00:05:06,520 --> 00:05:11,259
so you can deal with this world that

00:05:09,610 --> 00:05:12,729
we're now in and not just from a

00:05:11,259 --> 00:05:15,130
community perspective which I'll be

00:05:12,729 --> 00:05:17,080
talking about more lately but everything

00:05:15,130 --> 00:05:19,300
I just talked about here applies equally

00:05:17,080 --> 00:05:21,849
true in the business world you know

00:05:19,300 --> 00:05:25,030
Souza's businesses business customers

00:05:21,849 --> 00:05:29,320
are trying to move in this world wanting

00:05:25,030 --> 00:05:31,330
to use technology faster and yeah at

00:05:29,320 --> 00:05:35,169
higher scale at higher pace of change

00:05:31,330 --> 00:05:37,810
and on that then therefore the taste

00:05:35,169 --> 00:05:39,370
becomes you know how you know how does

00:05:37,810 --> 00:05:42,039
suzer as a corporate company have a

00:05:39,370 --> 00:05:43,780
platform that kind of yeah addresses

00:05:42,039 --> 00:05:46,840
these concerns and this is why I hand

00:05:43,780 --> 00:06:01,960
over to Alex to talk about cusp so thank

00:05:46,840 --> 00:06:07,030
you down one more here we go sorry what

00:06:01,960 --> 00:06:10,719
I brought to the speeches I brought down

00:06:07,030 --> 00:06:15,430
Sousa caste platform and divided into

00:06:10,719 --> 00:06:20,080
layers and we'll go through them now one

00:06:15,430 --> 00:06:21,819
by one yeah just introduce you which

00:06:20,080 --> 00:06:24,729
layers we have here so you get a better

00:06:21,819 --> 00:06:26,889
understanding of what has platform is

00:06:24,729 --> 00:06:30,669
looking like but this also applies for

00:06:26,889 --> 00:06:34,750
cubic with some other namings here and

00:06:30,669 --> 00:06:36,729
there obviously so the first thing we

00:06:34,750 --> 00:06:38,830
have here is we have a news for

00:06:36,729 --> 00:06:40,360
infrastructure layer

00:06:38,830 --> 00:06:42,780
so even the cloud has some kind of

00:06:40,360 --> 00:06:46,379
infrastructure that needs to run on so

00:06:42,780 --> 00:06:49,479
Isuzu cast platform is capable of

00:06:46,379 --> 00:06:51,220
running on physical servers so if you

00:06:49,479 --> 00:06:55,629
have some bare metal in your in your

00:06:51,220 --> 00:06:57,849
storage you can get it out and install

00:06:55,629 --> 00:06:59,319
it plain there you can also run it on

00:06:57,849 --> 00:07:03,009
your desktop machines if they are

00:06:59,319 --> 00:07:06,220
powerful enough more also what a decent

00:07:03,009 --> 00:07:09,129
idea is if you have some small factor

00:07:06,220 --> 00:07:11,949
PCs which you can easily or conveniently

00:07:09,129 --> 00:07:14,440
stack on your on your desktop and you

00:07:11,949 --> 00:07:17,610
can run a physical cluster on your

00:07:14,440 --> 00:07:20,110
desktop if you have some small machines

00:07:17,610 --> 00:07:22,509
raspberry PI's not yet Allah enable but

00:07:20,110 --> 00:07:26,669
this will also be another option once we

00:07:22,509 --> 00:07:26,669
start supporting the ARM architecture

00:07:27,120 --> 00:07:35,919
then of course we support a cast a

00:07:32,560 --> 00:07:39,370
couple of hypervisors so and we have

00:07:35,919 --> 00:07:43,690
VMware images out there we have images

00:07:39,370 --> 00:07:46,150
for hyper-v also for KVM Enix and I just

00:07:43,690 --> 00:07:50,409
realised the clouds are broken yeah so

00:07:46,150 --> 00:07:52,050
it's broken VMware OpenStack AWS exactly

00:07:50,409 --> 00:07:54,669
so we were running the classical

00:07:52,050 --> 00:07:56,710
hypervisor us we are running on

00:07:54,669 --> 00:08:00,039
OpenStack so if you have an open seg

00:07:56,710 --> 00:08:01,539
instance you can scale out and we do a

00:08:00,039 --> 00:08:04,360
lot of testing or so on OpenStack

00:08:01,539 --> 00:08:07,870
because it's pretty convenient then

00:08:04,360 --> 00:08:12,370
there is we're supporting public clouds

00:08:07,870 --> 00:08:15,419
like AWS future also and Google Cloud

00:08:12,370 --> 00:08:22,960
engine so you will find our images there

00:08:15,419 --> 00:08:26,969
soon yep then there's there used to be

00:08:22,960 --> 00:08:31,890
an operating system which in our case is

00:08:26,969 --> 00:08:36,269
Souza's micro s it's a on purpose of for

00:08:31,890 --> 00:08:40,029
purpose-built SUSE Linux Enterprise

00:08:36,269 --> 00:08:43,630
based at the moment it's less 12 sp3

00:08:40,029 --> 00:08:45,940
based operating system we call it micro

00:08:43,630 --> 00:08:48,070
estan get confused a bit by the name

00:08:45,940 --> 00:08:51,040
it's not called micro does not aim at

00:08:48,070 --> 00:08:52,389
being small although we're trying to be

00:08:51,040 --> 00:08:55,149
small because you

00:08:52,389 --> 00:08:57,670
maybe hundreds of distance but this aims

00:08:55,149 --> 00:09:00,370
for the name of micro service or s so

00:08:57,670 --> 00:09:03,579
where micro service oriented here which

00:09:00,370 --> 00:09:05,079
is one of the use cases for having cast

00:09:03,579 --> 00:09:06,370
yeah so it can run all of those

00:09:05,079 --> 00:09:08,079
different modules in all those different

00:09:06,370 --> 00:09:12,160
containers yeah

00:09:08,079 --> 00:09:15,639
so having having a bundled operating

00:09:12,160 --> 00:09:17,740
system in your in your cusp stick means

00:09:15,639 --> 00:09:21,819
that you're able to install it wherever

00:09:17,740 --> 00:09:23,709
you want you can configure it we have

00:09:21,819 --> 00:09:25,810
internal updates we have a we have a

00:09:23,709 --> 00:09:27,990
talked about or we heard a talk about

00:09:25,810 --> 00:09:29,949
already from eat nuts

00:09:27,990 --> 00:09:32,079
tomorrow arts tomorrow sorry I was on

00:09:29,949 --> 00:09:33,519
the wrong video sorry and you worry more

00:09:32,079 --> 00:09:36,699
about transactional updates which is

00:09:33,519 --> 00:09:39,579
really neat feature especially for for

00:09:36,699 --> 00:09:43,829
cluster computing because you have zero

00:09:39,579 --> 00:09:47,589
downtime for doing updates and

00:09:43,829 --> 00:09:49,540
transaction updates also moves out into

00:09:47,589 --> 00:09:51,370
the souza world so it is applicable on

00:09:49,540 --> 00:09:55,839
leap and and tumbleweed I talked about

00:09:51,370 --> 00:10:01,379
that more like that okay yeah then

00:09:55,839 --> 00:10:05,139
you're able with the operating system to

00:10:01,379 --> 00:10:06,850
debug we have a tool chain mode you'll

00:10:05,139 --> 00:10:11,860
know enable where it can debug a lot of

00:10:06,850 --> 00:10:13,809
stuff and also you're able to install

00:10:11,860 --> 00:10:17,399
third-party tools like monitoring or

00:10:13,809 --> 00:10:19,959
whatever this is needed for your purpose

00:10:17,399 --> 00:10:22,750
then on top of that there's running some

00:10:19,959 --> 00:10:26,620
kind of container execution or container

00:10:22,750 --> 00:10:29,019
engine at the moment we are running the

00:10:26,620 --> 00:10:32,379
docker engine as the first container

00:10:29,019 --> 00:10:35,290
engine and in the next version there

00:10:32,379 --> 00:10:39,300
will be a ticker a tech preview and that

00:10:35,290 --> 00:10:42,790
we offer the possibility to run cryo as

00:10:39,300 --> 00:10:46,059
as a container engine if you're for

00:10:42,790 --> 00:10:48,600
whatever reason would like to or prefer

00:10:46,059 --> 00:10:48,600
it over docker

00:10:49,740 --> 00:10:57,250
yeah with that you'll get access to the

00:10:53,319 --> 00:11:00,370
Sousa registry which we roll out pretty

00:10:57,250 --> 00:11:04,540
soon so you will find sign containers in

00:11:00,370 --> 00:11:06,280
there so one of our other projects

00:11:04,540 --> 00:11:08,580
the Suzy a cloud application platform

00:11:06,280 --> 00:11:11,770
already uses this user registry to ship

00:11:08,580 --> 00:11:14,020
their product in the Suzy registry so

00:11:11,770 --> 00:11:18,400
you can download it only from the

00:11:14,020 --> 00:11:20,140
registry so there's containers so

00:11:18,400 --> 00:11:21,910
containers usually said to be very small

00:11:20,140 --> 00:11:24,010
but they have containers with about 6

00:11:21,910 --> 00:11:26,070
gigabytes so this is a pretty pretty

00:11:24,010 --> 00:11:29,290
huge thing there so that's not

00:11:26,070 --> 00:11:30,760
convenient for someone if what happene

00:11:29,290 --> 00:11:35,590
this goes to container because they're

00:11:30,760 --> 00:11:37,690
considered small yeah if you run a lot

00:11:35,590 --> 00:11:39,220
of containers you want to contain arcus

00:11:37,690 --> 00:11:41,530
tration because you do not want to run

00:11:39,220 --> 00:11:43,180
your monitor your fifty thousand

00:11:41,530 --> 00:11:48,520
containers on your own so you need some

00:11:43,180 --> 00:11:51,070
kind of orchestration and the quasi

00:11:48,520 --> 00:11:55,270
standard or the to be standard or the

00:11:51,070 --> 00:11:58,440
most euston that is kubernetes who of

00:11:55,270 --> 00:12:01,840
you have hazard of kubernetes before

00:11:58,440 --> 00:12:03,850
yeah okay almost everyone so I'm telling

00:12:01,840 --> 00:12:08,050
nothing new here really that let's go a

00:12:03,850 --> 00:12:11,760
bit into detail here so it consists of

00:12:08,050 --> 00:12:14,550
two part we have a container scheduling

00:12:11,760 --> 00:12:17,230
which takes care that your services are

00:12:14,550 --> 00:12:26,050
almost running all the time so who can

00:12:17,230 --> 00:12:28,690
give you 100% but 99.99 expensive it

00:12:26,050 --> 00:12:31,780
provides you fault tolerance and high

00:12:28,690 --> 00:12:33,700
availability so convenience takes care

00:12:31,780 --> 00:12:38,800
that your container always runs if you

00:12:33,700 --> 00:12:40,450
cut if you define it that way and make

00:12:38,800 --> 00:12:44,170
sure that your service is available as

00:12:40,450 --> 00:12:47,950
you have defined it before on the other

00:12:44,170 --> 00:12:49,540
side there is container management which

00:12:47,950 --> 00:12:52,210
gives you control over your containers

00:12:49,540 --> 00:12:54,720
you can define in which environment your

00:12:52,210 --> 00:12:57,370
containers are about to run how much

00:12:54,720 --> 00:12:59,020
resources your containers should get

00:12:57,370 --> 00:13:01,930
where it could run so if you have a

00:12:59,020 --> 00:13:05,140
hybrid cluster consisting of bare metal

00:13:01,930 --> 00:13:07,690
and that virtualized environments you

00:13:05,140 --> 00:13:11,530
can define where to run it um if you

00:13:07,690 --> 00:13:13,700
have some heavy duty services you can

00:13:11,530 --> 00:13:16,190
define that they should only run on

00:13:13,700 --> 00:13:19,940
bare-metal if you desire if your setup

00:13:16,190 --> 00:13:24,020
is like that yeah and then there is

00:13:19,940 --> 00:13:26,920
another Sousa specific thing that's your

00:13:24,020 --> 00:13:30,380
cluster management and there we have

00:13:26,920 --> 00:13:33,800
vellum which we develop in-house and

00:13:30,380 --> 00:13:35,240
vellum is a UI for your purposes where

00:13:33,800 --> 00:13:38,090
you can bootstrap your cluster where

00:13:35,240 --> 00:13:40,130
you're going to monitor your cluster you

00:13:38,090 --> 00:13:43,460
can set up you can see the health state

00:13:40,130 --> 00:13:46,040
of your nodes you monitor a wild

00:13:43,460 --> 00:13:48,650
bootstrapping which nodes are good which

00:13:46,040 --> 00:13:49,630
is how you can see the update status

00:13:48,650 --> 00:13:51,770
here

00:13:49,630 --> 00:13:53,840
the venom doesn't care about the

00:13:51,770 --> 00:13:55,850
containers themselves so they'll exactly

00:13:53,840 --> 00:13:57,880
so that's why I said here it's cluster

00:13:55,850 --> 00:14:00,530
management not container management it

00:13:57,880 --> 00:14:03,080
takes care of the nodes register for

00:14:00,530 --> 00:14:05,720
your system and you can control them

00:14:03,080 --> 00:14:09,110
here you can add notes to it you can

00:14:05,720 --> 00:14:12,560
remove nodes to it you can update notes

00:14:09,110 --> 00:14:16,100
you can define the app the update policy

00:14:12,560 --> 00:14:19,160
you want to apply to your cluster then

00:14:16,100 --> 00:14:22,990
there's an optional layer if you need

00:14:19,160 --> 00:14:27,230
that you can install an application

00:14:22,990 --> 00:14:30,860
ecosystem like the cloud application

00:14:27,230 --> 00:14:33,620
platform that abstracts your

00:14:30,860 --> 00:14:36,920
applications even more if you're

00:14:33,620 --> 00:14:39,110
interested go on our website and look

00:14:36,920 --> 00:14:40,790
for a cloud application platform to know

00:14:39,110 --> 00:14:44,300
more about that but this this is an

00:14:40,790 --> 00:14:46,520
abstraction layer when you do not want

00:14:44,300 --> 00:14:49,310
to handle each and every container on

00:14:46,520 --> 00:14:50,930
your own you can use isuzu cloud

00:14:49,310 --> 00:14:53,720
application platform which is based on

00:14:50,930 --> 00:14:55,450
the cloud foundry project and last but

00:14:53,720 --> 00:14:58,580
not least

00:14:55,450 --> 00:15:00,500
sukar platform is designed to run club

00:14:58,580 --> 00:15:04,630
application a cloud native applications

00:15:00,500 --> 00:15:11,420
so you have a very special way of how

00:15:04,630 --> 00:15:14,200
cloud application should run did I write

00:15:11,420 --> 00:15:18,770
it here yeah so it should be operational

00:15:14,200 --> 00:15:20,690
observable elastic and resilient and of

00:15:18,770 --> 00:15:24,530
course edge-on yeah that possible does

00:15:20,690 --> 00:15:27,460
not may not must be said said like that

00:15:24,530 --> 00:15:30,940
and yeah with that back to Richard

00:15:27,460 --> 00:15:32,740
thank you yeah so kind of that's the

00:15:30,940 --> 00:15:34,690
brief story of cubic because it's a very

00:15:32,740 --> 00:15:37,899
very young project you know only started

00:15:34,690 --> 00:15:40,720
last year actually at our seat last year

00:15:37,899 --> 00:15:42,370
really is is you know openSUSE you know

00:15:40,720 --> 00:15:43,870
both inside susan and outside you know

00:15:42,370 --> 00:15:46,660
has kind of taken a look at what Suze is

00:15:43,870 --> 00:15:49,870
doing with this this caste model looking

00:15:46,660 --> 00:15:51,580
at these layers and trying to use these

00:15:49,870 --> 00:15:54,459
technologies and enterprise sense and

00:15:51,580 --> 00:15:56,560
kind of really looking at what you know

00:15:54,459 --> 00:15:59,230
what are the applications and a broader

00:15:56,560 --> 00:16:00,190
community sense so yeah lucky thing

00:15:59,230 --> 00:16:01,720
started a year ago

00:16:00,190 --> 00:16:03,459
it's a sub project in the openSUSE

00:16:01,720 --> 00:16:05,649
project so yet another under that big

00:16:03,459 --> 00:16:07,630
umbrella that we have these days and

00:16:05,649 --> 00:16:09,700
it's focused on all of these different

00:16:07,630 --> 00:16:11,800
container technologies most of them that

00:16:09,700 --> 00:16:13,390
you mentioned the stack there but also

00:16:11,800 --> 00:16:16,450
sort of broadening out a little bit as

00:16:13,390 --> 00:16:18,580
well and we've now become the the

00:16:16,450 --> 00:16:19,899
upstream for Casper and the Casa program

00:16:18,580 --> 00:16:21,970
so really I mean we're kind of like you

00:16:19,899 --> 00:16:24,420
know the the Martian explorers with this

00:16:21,970 --> 00:16:26,680
whole container world side of things

00:16:24,420 --> 00:16:28,870
it's obviously similar we know coming

00:16:26,680 --> 00:16:30,790
from the same basic ideas but already in

00:16:28,870 --> 00:16:32,650
a year you know things have grown quite

00:16:30,790 --> 00:16:33,610
different and that's really quite an

00:16:32,650 --> 00:16:34,750
exciting thing so you know we're

00:16:33,610 --> 00:16:36,250
independent from cars but like

00:16:34,750 --> 00:16:38,440
everything in openSUSE independent from

00:16:36,250 --> 00:16:39,820
Souza and we're basing all of the work

00:16:38,440 --> 00:16:40,300
we're doing inside open SUSE a

00:16:39,820 --> 00:16:43,660
tumbleweed

00:16:40,300 --> 00:16:45,040
more details about that later and you

00:16:43,660 --> 00:16:47,589
know more and more we're targeting the

00:16:45,040 --> 00:16:50,140
latest upstream container technologies

00:16:47,589 --> 00:16:51,790
so for example we know we had there is

00:16:50,140 --> 00:16:53,980
vellum and vellum is contribute to as

00:16:51,790 --> 00:16:55,660
part of the cubic project but in

00:16:53,980 --> 00:16:58,050
addition to that we're looking at a cube

00:16:55,660 --> 00:17:00,220
ATM which in the last year has kind of

00:16:58,050 --> 00:17:02,589
flooded onto the scene and that's really

00:17:00,220 --> 00:17:05,079
becoming the sort of upstream cluster

00:17:02,589 --> 00:17:08,170
bootstrapper for most kubernetes

00:17:05,079 --> 00:17:10,059
clusters and there's some really cool

00:17:08,170 --> 00:17:11,530
stuff that only velum can do that cube

00:17:10,059 --> 00:17:13,150
ATM can't and there's some really cool

00:17:11,530 --> 00:17:14,650
stuff that only cube ATM can do the

00:17:13,150 --> 00:17:17,800
Vallum cart right now so we're kind of

00:17:14,650 --> 00:17:20,110
looking at that and playing with that a

00:17:17,800 --> 00:17:21,790
lot of the stuff with with cRIO and and

00:17:20,110 --> 00:17:24,730
pod man is happening inside there

00:17:21,790 --> 00:17:26,199
there's a cubic space we have

00:17:24,730 --> 00:17:27,699
transactional updates and all of the

00:17:26,199 --> 00:17:30,040
development we're doing there and I'll

00:17:27,699 --> 00:17:32,500
talk more about that in a little bit and

00:17:30,040 --> 00:17:34,330
yes we've since starting cubic we've

00:17:32,500 --> 00:17:36,669
completely and utterly re-engineered the

00:17:34,330 --> 00:17:38,260
installation routines so it's a million

00:17:36,669 --> 00:17:40,480
times more customizable than what the

00:17:38,260 --> 00:17:42,490
customers of Casper using so we can

00:17:40,480 --> 00:17:45,220
prototype new stuff and play around and

00:17:42,490 --> 00:17:46,990
yeah generally have yeah they have a lot

00:17:45,220 --> 00:17:48,429
more options in there so in a nutshell

00:17:46,990 --> 00:17:51,130
though you know what are we really

00:17:48,429 --> 00:17:53,200
looking at is pretty much anything our

00:17:51,130 --> 00:17:55,600
community wants to look at in this

00:17:53,200 --> 00:17:57,760
container space so for example Paul has

00:17:55,600 --> 00:18:01,120
has his talk on Sunday in the the hall

00:17:57,760 --> 00:18:03,390
next door at that time that's an example

00:18:01,120 --> 00:18:06,250
of this yeah exactly that's Paul he's

00:18:03,390 --> 00:18:07,450
you know and he's been experimenting

00:18:06,250 --> 00:18:09,520
with some stuff on cubic you'll be

00:18:07,450 --> 00:18:10,750
talking about that in fact I don't think

00:18:09,520 --> 00:18:12,429
you're using kubernetes at all so it

00:18:10,750 --> 00:18:14,400
like a perfect example of the the kind

00:18:12,429 --> 00:18:17,380
of crazier in more interesting stuff

00:18:14,400 --> 00:18:20,919
yeah so please come to his talk I'm

00:18:17,380 --> 00:18:22,990
gonna focus a little bit on the

00:18:20,919 --> 00:18:24,370
transactional update stuff although alex

00:18:22,990 --> 00:18:27,490
already talked quite a fair bit about it

00:18:24,370 --> 00:18:31,059
and you know with all of this with all

00:18:27,490 --> 00:18:33,010
of this highly orchestrated Lord having

00:18:31,059 --> 00:18:34,750
clusters of machines running all of your

00:18:33,010 --> 00:18:37,840
services looking after all of this stuff

00:18:34,750 --> 00:18:39,309
this old sis admin Maxim is more true

00:18:37,840 --> 00:18:42,370
than ever you know if you've got a

00:18:39,309 --> 00:18:44,049
cluster of nodes even if it's five nodes

00:18:42,370 --> 00:18:46,090
but if it's like five nodes on two

00:18:44,049 --> 00:18:47,650
different clouds or whatever crazy

00:18:46,090 --> 00:18:50,110
arrangement you might have for running

00:18:47,650 --> 00:18:52,090
your clusters you never want to touch

00:18:50,110 --> 00:18:53,980
that running system you know it's just

00:18:52,090 --> 00:18:56,799
more work than it's worth half the time

00:18:53,980 --> 00:18:59,140
but at the same time you've still got to

00:18:56,799 --> 00:19:00,720
be secure and still got to be patched

00:18:59,140 --> 00:19:03,669
and still got to deal with those issues

00:19:00,720 --> 00:19:06,370
so for that we have transactional

00:19:03,669 --> 00:19:08,770
updates in cubic it's an update that is

00:19:06,370 --> 00:19:10,900
is is totally atomic it happens in a

00:19:08,770 --> 00:19:13,419
single operation you know either it

00:19:10,900 --> 00:19:14,799
totally applies and the system totally

00:19:13,419 --> 00:19:16,900
changes to the new version of the

00:19:14,799 --> 00:19:18,940
operating system or nothing at all

00:19:16,900 --> 00:19:20,350
happens no software is changed no light

00:19:18,940 --> 00:19:24,460
weights are changed everything is just

00:19:20,350 --> 00:19:26,470
left exactly as it was and as part of

00:19:24,460 --> 00:19:28,480
that none of those changes happening

00:19:26,470 --> 00:19:29,860
while the system is actually running

00:19:28,480 --> 00:19:31,929
because you know your services are up

00:19:29,860 --> 00:19:33,520
your things are running you don't want

00:19:31,929 --> 00:19:37,480
to risk anything you don't want to swap

00:19:33,520 --> 00:19:38,950
things around and doing that properly in

00:19:37,480 --> 00:19:42,070
a single transaction and with the

00:19:38,950 --> 00:19:43,900
technology who are using mean also we

00:19:42,070 --> 00:19:45,820
also wanted to be totally and easily to

00:19:43,900 --> 00:19:48,130
rollback so you know you do make a

00:19:45,820 --> 00:19:48,760
change it all happens in one easy swift

00:19:48,130 --> 00:19:50,770
move

00:19:48,760 --> 00:19:52,240
and then when you test it so you then

00:19:50,770 --> 00:19:54,610
run it and you realize it doesn't quite

00:19:52,240 --> 00:19:56,320
work the way you wanted to you can throw

00:19:54,610 --> 00:19:58,420
that update away and immediately get

00:19:56,320 --> 00:20:00,280
back to running the system exactly how

00:19:58,420 --> 00:20:03,670
it was before you changed anything

00:20:00,280 --> 00:20:05,680
and yeah so transactional updates were

00:20:03,670 --> 00:20:08,080
originally designed as part of micro s

00:20:05,680 --> 00:20:10,990
on the cusp side of things it's really

00:20:08,080 --> 00:20:13,060
become like the core feature inside both

00:20:10,990 --> 00:20:14,170
cubic and cast bits the better by

00:20:13,060 --> 00:20:16,200
definitely the moment think it's the

00:20:14,170 --> 00:20:18,640
most exciting thing we're working on and

00:20:16,200 --> 00:20:20,980
as you saw in the leaked 15 announcement

00:20:18,640 --> 00:20:23,980
today this feature is also available as

00:20:20,980 --> 00:20:25,900
a transactional server mode in leap 15

00:20:23,980 --> 00:20:27,850
and tumbleweed so you can have a leap 15

00:20:25,900 --> 00:20:30,750
machine using this as its update

00:20:27,850 --> 00:20:32,710
mechanism just pick the the

00:20:30,750 --> 00:20:34,600
transactional server system or when

00:20:32,710 --> 00:20:36,010
you're installing it but I won't go into

00:20:34,600 --> 00:20:37,870
any more details because Ignatius is

00:20:36,010 --> 00:20:40,210
over there raise your hand wave yeah

00:20:37,870 --> 00:20:42,100
he's in this room tomorrow doing it to

00:20:40,210 --> 00:20:44,230
more detail about that so you can see

00:20:42,100 --> 00:20:45,040
how that all works and how to use it and

00:20:44,230 --> 00:20:49,330
have fun with it

00:20:45,040 --> 00:20:54,430
so yeah with this different view on

00:20:49,330 --> 00:20:56,380
things with with openSUSE so I know yeah

00:20:54,430 --> 00:20:58,750
yeah with this with this this slightly

00:20:56,380 --> 00:21:00,190
different view on things and looking in

00:20:58,750 --> 00:21:02,590
slightly different things from from what

00:21:00,190 --> 00:21:05,740
Casper's doing and now how do we

00:21:02,590 --> 00:21:07,690
actually work together well the story of

00:21:05,740 --> 00:21:08,980
kubaton cask working together isn't

00:21:07,690 --> 00:21:10,840
really that different from the suit the

00:21:08,980 --> 00:21:13,720
story of openSUSE and and Susie working

00:21:10,840 --> 00:21:16,060
together you know tumbleweed is the the

00:21:13,720 --> 00:21:17,800
star souza Factory whatever is you know

00:21:16,060 --> 00:21:19,540
if it's Souza or openSUSE it doesn't

00:21:17,800 --> 00:21:22,240
matter we're all building on the same

00:21:19,540 --> 00:21:24,760
code base you know and tumbleweed is

00:21:22,240 --> 00:21:26,920
there as our nice stable always working

00:21:24,760 --> 00:21:28,930
always tested always usable code base

00:21:26,920 --> 00:21:31,720
it's the base system for all sleeve

00:21:28,930 --> 00:21:34,630
urchins and it's even changes for

00:21:31,720 --> 00:21:37,060
service packs are going to go into

00:21:34,630 --> 00:21:40,750
factory first which is the process we

00:21:37,060 --> 00:21:43,270
call factory first which is yeah a key

00:21:40,750 --> 00:21:45,880
part of all Susan Alexander price

00:21:43,270 --> 00:21:48,070
development you know all development now

00:21:45,880 --> 00:21:50,650
follows the factory first policy almost

00:21:48,070 --> 00:21:52,900
everything ends up complying with that

00:21:50,650 --> 00:21:54,670
policy there's always some exceptions

00:21:52,900 --> 00:21:56,260
especially in service packs obviously

00:21:54,670 --> 00:21:58,710
you know tumbleweed move so far that not

00:21:56,260 --> 00:22:00,480
all changes make sense to you know

00:21:58,710 --> 00:22:02,040
and some libraries Lee backporting and

00:22:00,480 --> 00:22:04,200
that kind of thing but the intention is

00:22:02,040 --> 00:22:06,960
definitely still there and the main

00:22:04,200 --> 00:22:08,640
benefit this brings both Sousa and

00:22:06,960 --> 00:22:11,310
openSUSE from the the Sousa side of

00:22:08,640 --> 00:22:14,010
things you know it makes features a heck

00:22:11,310 --> 00:22:15,720
of a lot easier to get into Slee you

00:22:14,010 --> 00:22:17,660
know it makes in fact the transaction of

00:22:15,720 --> 00:22:20,010
update feature being one example of that

00:22:17,660 --> 00:22:22,470
it makes it easier for Souza's partners

00:22:20,010 --> 00:22:24,210
in the community to contribute into into

00:22:22,470 --> 00:22:26,790
the city code base it makes that all

00:22:24,210 --> 00:22:28,320
more stable which means it all nice and

00:22:26,790 --> 00:22:30,690
more stable more usable for everybody

00:22:28,320 --> 00:22:32,280
which in turn makes everything nice and

00:22:30,690 --> 00:22:34,260
more stable and more usable for

00:22:32,280 --> 00:22:35,970
everybody who's using openSUSE leap

00:22:34,260 --> 00:22:39,180
because you know that's where it also

00:22:35,970 --> 00:22:41,700
ends up afterwards to display this sort

00:22:39,180 --> 00:22:45,000
of diagrammatically it looks something

00:22:41,700 --> 00:22:46,650
like this you know everything from well

00:22:45,000 --> 00:22:49,560
everything that Sousa cares about

00:22:46,650 --> 00:22:53,010
forcely comes from tumbleweed when they

00:22:49,560 --> 00:22:54,750
start a new silly codebase and when

00:22:53,010 --> 00:22:56,760
they're working on a new silly service

00:22:54,750 --> 00:22:58,410
pack everything they possibly can take

00:22:56,760 --> 00:23:02,910
from tumbleweed you know comes from from

00:22:58,410 --> 00:23:06,000
there with CASP it's pretty much the

00:23:02,910 --> 00:23:09,870
same idea but we have this thing called

00:23:06,000 --> 00:23:12,090
cubic so in essence you know cubic is

00:23:09,870 --> 00:23:14,190
this is this sub project we're focusing

00:23:12,090 --> 00:23:16,440
on this container stuff from a code

00:23:14,190 --> 00:23:18,450
based perspective though everything qu

00:23:16,440 --> 00:23:20,040
Bukh and tumbleweed are pretty much

00:23:18,450 --> 00:23:21,930
interchangeable it's the same

00:23:20,040 --> 00:23:24,540
repositories it's the same codebase it's

00:23:21,930 --> 00:23:25,890
the same project in OBS it's a different

00:23:24,540 --> 00:23:27,450
installation media and it's a different

00:23:25,890 --> 00:23:29,070
installation routine because you know

00:23:27,450 --> 00:23:31,260
we're focusing just on this container

00:23:29,070 --> 00:23:35,010
side of things so you know it's it's

00:23:31,260 --> 00:23:36,900
really just a derivative distribution of

00:23:35,010 --> 00:23:38,940
tumbleweed but all of the code is the

00:23:36,900 --> 00:23:41,910
same and to change something in cubic

00:23:38,940 --> 00:23:44,340
you change something in tumbleweed in

00:23:41,910 --> 00:23:48,030
the same kind of mostly the same kind of

00:23:44,340 --> 00:23:51,990
sense yeah Sousa caste platform is the

00:23:48,030 --> 00:23:53,970
derivative of Slee of a service packs so

00:23:51,990 --> 00:23:54,480
if Susan want to change something inside

00:23:53,970 --> 00:23:56,640
CASP

00:23:54,480 --> 00:23:59,190
they can change that in that Slee

00:23:56,640 --> 00:24:00,450
service pack or if the software in

00:23:59,190 --> 00:24:02,190
question doesn't come from that sleaze

00:24:00,450 --> 00:24:04,380
service back then they pull it from

00:24:02,190 --> 00:24:07,470
cubics all the kind of container e stuff

00:24:04,380 --> 00:24:10,050
that doesn't exist engine n woolsley is

00:24:07,470 --> 00:24:12,870
generally being told you know from cubic

00:24:10,050 --> 00:24:14,060
so to do that diagrammatically you end

00:24:12,870 --> 00:24:18,990
up with something like this

00:24:14,060 --> 00:24:21,510
so yeah tumbleweed feeds into Slee sleep

00:24:18,990 --> 00:24:23,340
feeds into cars and tumbleweed in cubic

00:24:21,510 --> 00:24:26,250
Musha in the same code base but the

00:24:23,340 --> 00:24:30,060
cubic bits of interesting for cars end

00:24:26,250 --> 00:24:33,000
up in there so to kind of put that sort

00:24:30,060 --> 00:24:35,040
of simply a little bit to simply you

00:24:33,000 --> 00:24:37,470
know all openSUSE development starts in

00:24:35,040 --> 00:24:40,470
tumbleweed flea development starts in

00:24:37,470 --> 00:24:42,990
tumbleweed yeah silly is based on

00:24:40,470 --> 00:24:44,760
tumbleweed cubic is based on tumbleweed

00:24:42,990 --> 00:24:49,020
tumbleweed kind at the heart of all of

00:24:44,760 --> 00:24:50,970
this and yeah if you really want to work

00:24:49,020 --> 00:24:54,330
with with cars piano you're working with

00:24:50,970 --> 00:24:57,270
tumbleweed sleaze derivative of both of

00:24:54,330 --> 00:24:58,440
those two things together so if I've

00:24:57,270 --> 00:25:00,120
interested you enough that you want to

00:24:58,440 --> 00:25:01,830
start contributing to this and changing

00:25:00,120 --> 00:25:04,800
what we're doing and having here they're

00:25:01,830 --> 00:25:07,170
seeing what we're doing we could do with

00:25:04,800 --> 00:25:08,910
more people testing it we have our we

00:25:07,170 --> 00:25:10,530
have our ice O's they're working quite

00:25:08,910 --> 00:25:12,240
nicely but you know we're testing them

00:25:10,530 --> 00:25:14,240
only in open QA right now there's you

00:25:12,240 --> 00:25:16,590
know more manual testing so if we see so

00:25:14,240 --> 00:25:18,450
so you can just go to the dentist

00:25:16,590 --> 00:25:21,090
regular tumbleweed download page there

00:25:18,450 --> 00:25:22,800
is a cubic option there you can install

00:25:21,090 --> 00:25:25,350
it on bare metals you can install it on

00:25:22,800 --> 00:25:27,570
VMs the installation routine like I say

00:25:25,350 --> 00:25:29,550
is nice and changed and simplified so in

00:25:27,570 --> 00:25:32,370
fact it walks you through the system

00:25:29,550 --> 00:25:34,320
rolls farm in far more detailed and then

00:25:32,370 --> 00:25:36,990
another any other openSUSE distribution

00:25:34,320 --> 00:25:39,630
does and when you find bugs because I'm

00:25:36,990 --> 00:25:40,110
sure you will you know you file them in

00:25:39,630 --> 00:25:42,780
Bugzilla

00:25:40,110 --> 00:25:45,570
in openSUSE tumbleweed as part of the

00:25:42,780 --> 00:25:48,480
the cubed component if you think that

00:25:45,570 --> 00:25:49,860
cubic specific generally speaking a lot

00:25:48,480 --> 00:25:51,810
of the bugs are shared between

00:25:49,860 --> 00:25:55,760
tumbleweed and gibbet so if file a

00:25:51,810 --> 00:25:57,600
tumbleweed bug will fix them there too

00:25:55,760 --> 00:26:00,210
obviously though in this whole kind of

00:25:57,600 --> 00:26:01,590
agile container II cloudy world a lot of

00:26:00,210 --> 00:26:03,030
people don't want to handle messing

00:26:01,590 --> 00:26:07,020
around with installing installation

00:26:03,030 --> 00:26:10,860
media so we are working on VM and cloud

00:26:07,020 --> 00:26:13,530
images that is the URL for the OBS

00:26:10,860 --> 00:26:15,480
project where they are right now the

00:26:13,530 --> 00:26:19,770
devel project is there in fact there is

00:26:15,480 --> 00:26:22,140
a factory project for them as well but

00:26:19,770 --> 00:26:23,710
we cubic the cubic team and we started

00:26:22,140 --> 00:26:26,620
looking at this suddenly realized

00:26:23,710 --> 00:26:28,470
topic we does n't have any VM images and

00:26:26,620 --> 00:26:31,270
in fact the tumbleweed release process

00:26:28,470 --> 00:26:33,760
doesn't have any way of releasing VM

00:26:31,270 --> 00:26:35,590
images yet so that's something we're

00:26:33,760 --> 00:26:36,970
actively working on with the tumbleweed

00:26:35,590 --> 00:26:38,980
team at the moment of figuring out okay

00:26:36,970 --> 00:26:40,930
you know we can build them now how do we

00:26:38,980 --> 00:26:42,550
test them how do we do them as part of

00:26:40,930 --> 00:26:43,690
the standard tumbleweed release process

00:26:42,550 --> 00:26:46,210
so when there's a new tumbleweed

00:26:43,690 --> 00:26:49,330
snapshot we're not just publishing a new

00:26:46,210 --> 00:26:52,240
s iso and a new repo but we also publish

00:26:49,330 --> 00:26:54,730
a whole bunch of VM images for that as

00:26:52,240 --> 00:26:56,770
well as part of the whole thing we're

00:26:54,730 --> 00:26:58,300
using for that kind of effort we're

00:26:56,770 --> 00:27:01,240
using the factory mailing list they were

00:26:58,300 --> 00:27:03,400
mainly using the factory IRC channel and

00:27:01,240 --> 00:27:07,090
we also have our own Kubek IRC channel

00:27:03,400 --> 00:27:09,370
as well if you're a packager packaging

00:27:07,090 --> 00:27:14,860
or interested in packaging anything code

00:27:09,370 --> 00:27:15,940
of container e we have the I really want

00:27:14,860 --> 00:27:17,650
to change the name because you know

00:27:15,940 --> 00:27:20,620
obviously it comes from cars because

00:27:17,650 --> 00:27:25,360
they start it first but yeah the devel

00:27:20,620 --> 00:27:28,210
caste controller node davell project

00:27:25,360 --> 00:27:30,370
where most of the cubic specific stuff

00:27:28,210 --> 00:27:32,590
is being incubated it's a standard

00:27:30,370 --> 00:27:34,860
develop project following the same rules

00:27:32,590 --> 00:27:39,340
and processes that we generally have in

00:27:34,860 --> 00:27:40,660
OBS for tumbleweed we could really do

00:27:39,340 --> 00:27:42,670
with some help with with packaging

00:27:40,660 --> 00:27:45,520
especially the more interesting new fast

00:27:42,670 --> 00:27:47,650
moving upstream stuff things like the

00:27:45,520 --> 00:27:50,560
latest cryo and pod man and the whole

00:27:47,650 --> 00:27:52,300
kind of project atomic build tooling has

00:27:50,560 --> 00:27:53,710
all very interesting stuff and we do

00:27:52,300 --> 00:27:55,150
have versions in there but you know

00:27:53,710 --> 00:27:57,730
they're moving quickly there's different

00:27:55,150 --> 00:28:01,540
ways of doing things so please feel free

00:27:57,730 --> 00:28:03,220
to contribute on the vellum side of

00:28:01,540 --> 00:28:05,080
things even though we're looking at cube

00:28:03,220 --> 00:28:06,460
ATM we still wanted to actually help

00:28:05,080 --> 00:28:08,380
with vellum and I'm looking forward to

00:28:06,460 --> 00:28:12,250
the day where vellum is is a key part of

00:28:08,380 --> 00:28:15,210
the cubic standard cluster we all that

00:28:12,250 --> 00:28:17,800
development is being done in in get

00:28:15,210 --> 00:28:19,780
vellum is mostly a ruby application but

00:28:17,800 --> 00:28:21,070
there's sort of two components with with

00:28:19,780 --> 00:28:22,600
with vellum

00:28:21,070 --> 00:28:23,920
have you got the sort of the front end

00:28:22,600 --> 00:28:25,660
and they're kind of a lot of the logic

00:28:23,920 --> 00:28:28,300
happening in Ruby

00:28:25,660 --> 00:28:30,160
but the execution of changes to your

00:28:28,300 --> 00:28:32,740
cluster the kind of orchestration of

00:28:30,160 --> 00:28:34,960
bootstrapping the Clough step it's all

00:28:32,740 --> 00:28:36,850
actually done using salt and the the

00:28:34,960 --> 00:28:38,950
repo name is a little bit incongruous

00:28:36,850 --> 00:28:41,590
it's not quite true it's not it's not

00:28:38,950 --> 00:28:44,230
another copy of salt the binary that run

00:28:41,590 --> 00:28:46,120
the salt stack the salt repo in the

00:28:44,230 --> 00:28:48,490
cubic project actually has all of our

00:28:46,120 --> 00:28:51,190
salt states all of our configuration for

00:28:48,490 --> 00:28:53,350
salt and that's where we have all of the

00:28:51,190 --> 00:28:55,720
the salt scripts and the soap profiles

00:28:53,350 --> 00:28:57,310
where we're defining it how to change

00:28:55,720 --> 00:28:59,170
something on a kubernetes cluster how to

00:28:57,310 --> 00:29:02,470
bootstrap the cluster what to do when

00:28:59,170 --> 00:29:04,030
how etc and that's something we could

00:29:02,470 --> 00:29:07,090
definitely do with a lot of help with

00:29:04,030 --> 00:29:07,870
not just updating for the pace of stuff

00:29:07,090 --> 00:29:10,600
in tumbleweed

00:29:07,870 --> 00:29:12,460
but those modules are incredibly useful

00:29:10,600 --> 00:29:15,070
for people who might be interested in in

00:29:12,460 --> 00:29:16,480
just using them bare for running like

00:29:15,070 --> 00:29:18,760
their own abilities cluster you know

00:29:16,480 --> 00:29:21,340
separate from using the the more broad

00:29:18,760 --> 00:29:23,050
tools it's a lot of very useful

00:29:21,340 --> 00:29:24,640
knowledge therefore like starting up a

00:29:23,050 --> 00:29:26,410
kubernetes cluster moving you're moving

00:29:24,640 --> 00:29:29,680
the initial containers around and

00:29:26,410 --> 00:29:32,170
getting the base level done but right

00:29:29,680 --> 00:29:33,670
now it's all very much focused on the

00:29:32,170 --> 00:29:35,620
cast stuff when we want to kind of make

00:29:33,670 --> 00:29:38,440
it more useable and more flexible for

00:29:35,620 --> 00:29:40,930
dealing with the fastest stuff so please

00:29:38,440 --> 00:29:44,710
feel free to go there its github issues

00:29:40,930 --> 00:29:49,770
pull requests it's all open and very

00:29:44,710 --> 00:29:53,410
very very nice to use and almost lost

00:29:49,770 --> 00:29:55,270
yeah we have the the cubic website

00:29:53,410 --> 00:29:56,770
itself so there we have kind of the

00:29:55,270 --> 00:29:59,260
summary of everything I've talked about

00:29:56,770 --> 00:30:00,640
here but also we're trying to turn it

00:29:59,260 --> 00:30:03,550
into a sort of a very active sort of

00:30:00,640 --> 00:30:05,530
blog slash community for it showcasing

00:30:03,550 --> 00:30:06,790
what is happening in the cubicle world

00:30:05,530 --> 00:30:08,890
of things so that's where you can read

00:30:06,790 --> 00:30:11,410
all the latest stuff about the

00:30:08,890 --> 00:30:14,080
transactional update features in in

00:30:11,410 --> 00:30:15,870
leapin and tumbleweed where you can read

00:30:14,080 --> 00:30:18,790
about the stuff we're doing with pod man

00:30:15,870 --> 00:30:20,860
and if you're doing anything interesting

00:30:18,790 --> 00:30:22,540
in openSUSE in the container kind of

00:30:20,860 --> 00:30:24,580
side of things we're interested in

00:30:22,540 --> 00:30:27,250
taking that blog post and putting it on

00:30:24,580 --> 00:30:29,140
there it's very easy to contribute

00:30:27,250 --> 00:30:31,930
articles because it's just a bunch of

00:30:29,140 --> 00:30:35,860
markdown in a git repo so please yeah

00:30:31,930 --> 00:30:39,280
send us a pull request and yes

00:30:35,860 --> 00:30:41,290
last but not least anything else it's

00:30:39,280 --> 00:30:43,360
open project we're keen to see what you

00:30:41,290 --> 00:30:46,930
know this is a very fast-moving area of

00:30:43,360 --> 00:30:48,520
IT of the world so you know if you have

00:30:46,930 --> 00:30:52,450
any ideas of what you'd like to see

00:30:48,520 --> 00:30:54,130
inside Kubik please get in touch we have

00:30:52,450 --> 00:30:56,740
our mailing list we have the cubic IRC

00:30:54,130 --> 00:30:58,210
channel please join us and start with

00:30:56,740 --> 00:31:02,650
that I guess does anybody have any

00:30:58,210 --> 00:31:06,070
questions comments yes sir yeah yeah so

00:31:02,650 --> 00:31:09,220
I think I think this one might be

00:31:06,070 --> 00:31:11,470
charged up enough serving you pose it's

00:31:09,220 --> 00:31:13,180
about these cubic images because if

00:31:11,470 --> 00:31:15,250
Kovac is the platform to run the

00:31:13,180 --> 00:31:17,200
containers I don't understand what are

00:31:15,250 --> 00:31:19,510
these cubic images are the end

00:31:17,200 --> 00:31:22,720
applications that will be run in the

00:31:19,510 --> 00:31:25,200
containers on Kovac or are images of the

00:31:22,720 --> 00:31:28,420
Kovac itself

00:31:25,200 --> 00:31:32,890
yeah so the good question yeah so the

00:31:28,420 --> 00:31:34,510
the they would be the VN images for your

00:31:32,890 --> 00:31:38,860
your qubit cluster for your cubic

00:31:34,510 --> 00:31:40,390
platform so the you know the OS bit it's

00:31:38,860 --> 00:31:42,070
fair to mention actually I just realized

00:31:40,390 --> 00:31:44,440
I've totally neglected to finishing the

00:31:42,070 --> 00:31:47,980
stuff we're doing on the container site

00:31:44,440 --> 00:31:50,140
itself so yeah if you indulge me for a

00:31:47,980 --> 00:31:52,210
second in addition to all of this in the

00:31:50,140 --> 00:31:55,480
cubic team we have people now working on

00:31:52,210 --> 00:31:57,280
the base containers for openSUSE and

00:31:55,480 --> 00:31:59,860
souza distributions so for example the

00:31:57,280 --> 00:32:02,140
official tumbleweed container in the

00:31:59,860 --> 00:32:03,490
docker hub you know is being done it's

00:32:02,140 --> 00:32:05,470
sort of part of the cubic project and

00:32:03,490 --> 00:32:07,450
that's you know if you now and same with

00:32:05,470 --> 00:32:09,700
leap which i think is also been upgraded

00:32:07,450 --> 00:32:13,060
at eight-fifteen today already so you

00:32:09,700 --> 00:32:15,370
can do your docker pull from from the

00:32:13,060 --> 00:32:18,100
hub from that registry and get you know

00:32:15,370 --> 00:32:19,450
a proper built properly tested properly

00:32:18,100 --> 00:32:24,130
openSUSE style

00:32:19,450 --> 00:32:25,630
openSUSE quality container image and one

00:32:24,130 --> 00:32:27,820
thing we're working with but we're not

00:32:25,630 --> 00:32:31,030
quite there yet it's kind of a it's a

00:32:27,820 --> 00:32:33,940
big collaborative thing the obf team

00:32:31,030 --> 00:32:37,330
have a bunch of features going into the

00:32:33,940 --> 00:32:39,310
openSUSE build service and there is now

00:32:37,330 --> 00:32:42,160
a website you can already go to registry

00:32:39,310 --> 00:32:44,770
to openSUSE dog and that is an official

00:32:42,160 --> 00:32:47,980
container registry for the openSUSE

00:32:44,770 --> 00:32:50,590
project and it basically reflects every

00:32:47,980 --> 00:32:51,820
single container built in every single

00:32:50,590 --> 00:32:55,240
project in everything

00:32:51,820 --> 00:32:58,030
part of the OBS so anybody with a home

00:32:55,240 --> 00:32:59,650
project in the OBS putting a Kiwi file

00:32:58,030 --> 00:33:01,690
there and building their own container

00:32:59,650 --> 00:33:04,330
you can get that you can get that

00:33:01,690 --> 00:33:05,710
container from registry to openSUSE it's

00:33:04,330 --> 00:33:08,500
all signed

00:33:05,710 --> 00:33:10,420
voter read done properly because you

00:33:08,500 --> 00:33:14,500
know the hub docker hub doesn't do that

00:33:10,420 --> 00:33:16,540
right ultimately long term that almost

00:33:14,500 --> 00:33:18,220
certainly will be the official place to

00:33:16,540 --> 00:33:20,140
get all of the containers for running

00:33:18,220 --> 00:33:23,320
things like vellum and kubernetes on a

00:33:20,140 --> 00:33:24,520
cubic cluster it's just the cases of not

00:33:23,320 --> 00:33:26,590
really being there yet so we're doing

00:33:24,520 --> 00:33:29,800
there yeah we've got the iso images and

00:33:26,590 --> 00:33:32,200
stuff done the image is next and that

00:33:29,800 --> 00:33:34,180
release process part of tumbleweed which

00:33:32,200 --> 00:33:36,250
we haven't figured out the container

00:33:34,180 --> 00:33:38,110
images would be the the step right after

00:33:36,250 --> 00:33:42,460
that that will probably answer it at the

00:33:38,110 --> 00:33:47,140
same time but just yeah priorities cool

00:33:42,460 --> 00:33:49,810
next question thanks Alex what

00:33:47,140 --> 00:33:55,180
architectures they do you support is

00:33:49,810 --> 00:33:58,240
cubic at the moment only x86 64 Intel I

00:33:55,180 --> 00:34:01,930
have absolutely no problem with talking

00:33:58,240 --> 00:34:05,230
about doing any other architecture so in

00:34:01,930 --> 00:34:07,210
my home project in OBS there's a little

00:34:05,230 --> 00:34:12,070
sub project called cubic underscore our

00:34:07,210 --> 00:34:13,570
PI and it works kinda most of the issues

00:34:12,070 --> 00:34:15,460
that are actually stopping at working

00:34:13,570 --> 00:34:18,490
aren't issues with the cubic base or

00:34:15,460 --> 00:34:20,560
with our min openSUSE most of the issues

00:34:18,490 --> 00:34:23,590
are things like kubernetes where like a

00:34:20,560 --> 00:34:25,090
cube ATM bootstrapping is like it has a

00:34:23,590 --> 00:34:26,530
million different timeouts and there's

00:34:25,090 --> 00:34:29,500
no way of raw sleep I can do anything

00:34:26,530 --> 00:34:31,240
that quickly so yeah it's kind of a case

00:34:29,500 --> 00:34:34,930
of dealing with upstream to make it more

00:34:31,240 --> 00:34:36,850
friendly so yeah definitely that's

00:34:34,930 --> 00:34:38,230
really kind of everything else category

00:34:36,850 --> 00:34:40,480
this is one thing I would love to see

00:34:38,230 --> 00:34:49,510
people help pushes along because I kind

00:34:40,480 --> 00:34:52,020
of like the idea next question yeah

00:34:49,510 --> 00:34:52,020
Palace

00:34:55,820 --> 00:35:00,990
it's not equation is just a comment that

00:34:59,250 --> 00:35:03,240
I would like also to highlight what

00:35:00,990 --> 00:35:05,040
Richard said is that cubic is a new

00:35:03,240 --> 00:35:08,550
project and basically we can save it

00:35:05,040 --> 00:35:10,680
based on the community needs so just to

00:35:08,550 --> 00:35:14,130
give you an example this is true a

00:35:10,680 --> 00:35:15,990
couple of months ago I was looking in

00:35:14,130 --> 00:35:20,070
the rootless containers and what we do

00:35:15,990 --> 00:35:22,920
there in openSUSE and now we have the

00:35:20,070 --> 00:35:26,340
test in a paint way so we're really

00:35:22,920 --> 00:35:28,890
proud of that because the cubic might be

00:35:26,340 --> 00:35:31,950
only the only distribution out there

00:35:28,890 --> 00:35:36,420
that make sure that rootless containers

00:35:31,950 --> 00:35:38,520
and OCI open containers initiative style

00:35:36,420 --> 00:35:40,260
of standardized containers are working

00:35:38,520 --> 00:35:42,480
for us so there will never be broken

00:35:40,260 --> 00:35:45,270
there in that case so if you have any

00:35:42,480 --> 00:35:52,380
use cases bring them forth and they can

00:35:45,270 --> 00:35:55,880
be a reality thank you cool if there's

00:35:52,380 --> 00:35:55,880

YouTube URL: https://www.youtube.com/watch?v=uUpRnoQRdWI


