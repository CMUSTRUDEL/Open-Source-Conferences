Title: openSUSE Conference 2018 - Introduction to TLS 1.3
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1825-introduction-to-tls-1-3



TLS 1.3 is the brand new version of the SSL/TLS protocol.
The draft of the standard was recently approved by IETF and it will be published as RFC in a couple of months.

TLS 1.3 is a big redesign of the protocol which brings substantial changes such as better security or handshake speed-up.

The talk will present its new features as well as compare the new protocol to the previous versions.
It will also focus on the status of openSUSE, for example how are the web browsers, common cryptography libraries, and applications doing with regard to the TLS 1.3 support.

TLS 1.3 is the brand new version of the SSL/TLS protocol.
The draft of the standard was recently approved by IETF and it will be published as RFC in a couple of months.

TLS 1.3 is a big redesign of the protocol which brings substantial changes such as better security or handshake speed-up.

The talk will present its new features as well as compare the new protocol to the previous versions.
It will also focus on the status of openSUSE, for example how are the web browsers, common cryptography libraries, and applications doing with regard to the TLS 1.3 support.

vitezslav_cizek
Captions: 
	00:00:05,810 --> 00:00:10,710
hello welcome to the talk and which is

00:00:08,910 --> 00:00:13,349
strategic and this talk will be about

00:00:10,710 --> 00:00:15,559
the upcoming new Thiele standard one two

00:00:13,349 --> 00:00:15,559
three

00:00:16,220 --> 00:00:23,130
I'm a software engineer at Sousa and

00:00:18,690 --> 00:00:25,650
booster doing see stuff and come in

00:00:23,130 --> 00:00:27,630
touch with the most popular essential

00:00:25,650 --> 00:00:30,359
implementations on open source

00:00:27,630 --> 00:00:36,090
implementations I made an open SSL new

00:00:30,359 --> 00:00:40,649
TMS and also a batch module for NSS well

00:00:36,090 --> 00:00:43,590
first I'll outline what TLS is some

00:00:40,649 --> 00:00:45,600
short interaction and what our actual do

00:00:43,590 --> 00:00:50,039
problems with the current current status

00:00:45,600 --> 00:00:54,840
current supported protocols then I'll

00:00:50,039 --> 00:00:57,829
introduce the l3 and later house

00:00:54,840 --> 00:01:03,629
actually the adoption of the l3 standart

00:00:57,829 --> 00:01:06,210
when we can expect it deployed so so

00:01:03,629 --> 00:01:07,140
what is TLS dll's stands for transport

00:01:06,210 --> 00:01:10,820
layer security

00:01:07,140 --> 00:01:13,619
it's a cryptographic protocol that

00:01:10,820 --> 00:01:14,630
enables a secure channel over the

00:01:13,619 --> 00:01:18,330
Internet

00:01:14,630 --> 00:01:26,159
it's widely deployed and used for HTTP

00:01:18,330 --> 00:01:27,570
or for email VPN YP and etc etc the

00:01:26,159 --> 00:01:31,560
architecture of the protocol is

00:01:27,570 --> 00:01:34,920
client-server and the protocol uses

00:01:31,560 --> 00:01:36,900
public interface our structure to update

00:01:34,920 --> 00:01:41,970
the gate appears also there are other

00:01:36,900 --> 00:01:48,119
options like mr. English certificates

00:01:41,970 --> 00:01:50,100
via Dane or using public keys well the

00:01:48,119 --> 00:01:53,159
secure connection that the TLS protocol

00:01:50,100 --> 00:01:56,460
establishes has these properties it of

00:01:53,159 --> 00:01:58,229
the case at least one of the peers since

00:01:56,460 --> 00:02:00,750
the osmanthus reads is mandatory for the

00:01:58,229 --> 00:02:05,640
server there are no anonymous ciphers

00:02:00,750 --> 00:02:08,989
anymore and authentication is mostly

00:02:05,640 --> 00:02:11,520
done using public key cryptography

00:02:08,989 --> 00:02:15,520
confidentiality is

00:02:11,520 --> 00:02:17,770
well enabled by the symmetry use of

00:02:15,520 --> 00:02:23,040
symmetric ciphers that data is

00:02:17,770 --> 00:02:23,040
transmitted is private to the peers it

00:02:23,500 --> 00:02:31,150
attackers can see into the data and the

00:02:28,270 --> 00:02:34,810
protocol super is integrity which means

00:02:31,150 --> 00:02:36,940
that data can be modified but all the

00:02:34,810 --> 00:02:39,840
modifications will be detection detected

00:02:36,940 --> 00:02:44,470
and the connection will be terminated

00:02:39,840 --> 00:02:48,100
the other protocol consists of these two

00:02:44,470 --> 00:02:50,650
pieces the first and the more

00:02:48,100 --> 00:02:52,750
interesting part for us is the henching

00:02:50,650 --> 00:02:56,110
protocol it's used to establish as the

00:02:52,750 --> 00:02:58,060
keys because shared key material it also

00:02:56,110 --> 00:03:01,630
negotiated parameters of the connection

00:02:58,060 --> 00:03:04,870
and it's also used to authenticate one

00:03:01,630 --> 00:03:08,830
or both Spears the record protocol is

00:03:04,870 --> 00:03:12,430
the underlying protocol it suits for the

00:03:08,830 --> 00:03:13,750
data transmission it cuts the data into

00:03:12,430 --> 00:03:16,090
two pieces encourage them with this

00:03:13,750 --> 00:03:23,730
symmetric cipher and sends it over the

00:03:16,090 --> 00:03:23,730
wire the tails and shake looks like this

00:03:23,790 --> 00:03:34,440
first the client contacts the server

00:03:26,320 --> 00:03:40,110
sends a coin hello and a key sure it's

00:03:34,440 --> 00:03:43,239
both parts of the protocol establishes

00:03:40,110 --> 00:03:45,209
the security grade by using random

00:03:43,239 --> 00:03:48,850
bounces and they are mixing these

00:03:45,209 --> 00:03:50,739
launches into a king material which is

00:03:48,850 --> 00:03:52,269
the master circuit and all the keys

00:03:50,739 --> 00:03:58,420
which are used for the communication is

00:03:52,269 --> 00:04:00,940
derived from this well here's a brief we

00:03:58,420 --> 00:04:03,550
were you of the history of the SSL or

00:04:00,940 --> 00:04:07,060
TLS protocol at the beginning in the 90s

00:04:03,550 --> 00:04:10,470
it was called SSL and it was developed

00:04:07,060 --> 00:04:13,989
by Netscape the idea was basically to

00:04:10,470 --> 00:04:18,100
enable internet banking so people can

00:04:13,989 --> 00:04:21,130
use their credit cards over the HTTP the

00:04:18,100 --> 00:04:23,430
protocol is obsolete for a couple of

00:04:21,130 --> 00:04:26,009
years it has major issues

00:04:23,430 --> 00:04:29,150
and there's actually an RFC that

00:04:26,009 --> 00:04:35,340
prohibits its usage the same goes for

00:04:29,150 --> 00:04:39,539
3.0 the following protocols are

00:04:35,340 --> 00:04:42,600
currently in use most mostly we are

00:04:39,539 --> 00:04:44,810
using TLS 1.2 now because it's the most

00:04:42,600 --> 00:04:47,009
modern variant of the protocol and

00:04:44,810 --> 00:04:50,419
offers the best features and best

00:04:47,009 --> 00:04:54,840
security and also there was a big

00:04:50,419 --> 00:04:56,250
paradigm shift in the mindset so because

00:04:54,840 --> 00:04:58,710
there was a lot of attacks against the

00:04:56,250 --> 00:05:01,530
LS protocol so since a couple of years

00:04:58,710 --> 00:05:03,750
ago the new versions of the protocol are

00:05:01,530 --> 00:05:12,030
deployed more aggressively and also we

00:05:03,750 --> 00:05:15,780
are moving to more secure keys well here

00:05:12,030 --> 00:05:19,970
are some couple couple of deficiencies

00:05:15,780 --> 00:05:24,000
find it necessary to the protocol is

00:05:19,970 --> 00:05:27,419
well mostly unusable because an attacker

00:05:24,000 --> 00:05:30,000
could terminate the connection because

00:05:27,419 --> 00:05:32,760
there's no signaling of the end of the

00:05:30,000 --> 00:05:36,360
transfer the connection is terminated

00:05:32,760 --> 00:05:40,650
thus ecologist antara made it as is the

00:05:36,360 --> 00:05:42,330
tcp underlying tcp Challis killed the

00:05:40,650 --> 00:05:46,530
phishing messages are also not protected

00:05:42,330 --> 00:05:49,979
which is susceptible to many little

00:05:46,530 --> 00:05:52,789
metal attacks and for example that other

00:05:49,979 --> 00:05:56,330
cars could generate negotiating ciphers

00:05:52,789 --> 00:05:58,430
it also has a weak Mac which is

00:05:56,330 --> 00:06:03,479
identification code which is used for

00:05:58,430 --> 00:06:04,949
integrity and both keys for the

00:06:03,479 --> 00:06:09,930
encryption and for the Mac are the same

00:06:04,949 --> 00:06:14,190
which is also a problem if mmm if one of

00:06:09,930 --> 00:06:16,409
the protocols this week and compared to

00:06:14,190 --> 00:06:19,830
the new versions of also it misses a lot

00:06:16,409 --> 00:06:26,130
of functionality and not even security

00:06:19,830 --> 00:06:28,560
but also in the extensibility associated

00:06:26,130 --> 00:06:34,500
0 both protocol was actually called by a

00:06:28,560 --> 00:06:39,960
dog do you know which one yep

00:06:34,500 --> 00:06:43,050
was called by Buddha well and it was a

00:06:39,960 --> 00:06:48,690
budding eric opening coracle attack on

00:06:43,050 --> 00:06:51,000
this legacy encryption because a 3.0 the

00:06:48,690 --> 00:06:56,490
best - it was available in the protocol

00:06:51,000 --> 00:06:59,430
is yes in CBC mode but this pool attack

00:06:56,490 --> 00:07:01,850
can be leveraged to actually decrypt the

00:06:59,430 --> 00:07:06,930
plaintext without a big hassle

00:07:01,850 --> 00:07:10,080
so after this attack a 3.0 was abandoned

00:07:06,930 --> 00:07:16,470
because it was no longer considered

00:07:10,080 --> 00:07:20,220
secured other used ciphered it was used

00:07:16,470 --> 00:07:24,180
by this protocol was rc4 but it is also

00:07:20,220 --> 00:07:28,800
considered broken know here are some

00:07:24,180 --> 00:07:32,940
other issues so 3.0 there are no

00:07:28,800 --> 00:07:35,400
suitable ciphers because the CBC mode is

00:07:32,940 --> 00:07:41,700
basically broken by the pool and rc4 is

00:07:35,400 --> 00:07:44,760
weak and also biased other issues are is

00:07:41,700 --> 00:07:49,580
the composite CBC mode because the LS

00:07:44,760 --> 00:07:52,590
uses this magnet encrypt construction

00:07:49,580 --> 00:07:55,500
which is also vulnerable to audre to

00:07:52,590 --> 00:08:00,590
attacks to Oracle attacks like lucky

00:07:55,500 --> 00:08:03,090
searching well the key exchange for

00:08:00,590 --> 00:08:06,090
exchanged also vulnerable to man in the

00:08:03,090 --> 00:08:08,700
middle attacks there was attacks against

00:08:06,090 --> 00:08:11,190
the negotiation and also to polish shank

00:08:08,700 --> 00:08:15,810
which was conversion of resumption and

00:08:11,190 --> 00:08:17,760
there a negotiation mmm

00:08:15,810 --> 00:08:20,850
the hash function which are used by the

00:08:17,760 --> 00:08:24,510
protocol sha-1 and md5 are also no

00:08:20,850 --> 00:08:26,610
longer considered secure mmm

00:08:24,510 --> 00:08:29,210
this protocol had something that's

00:08:26,610 --> 00:08:34,890
called custom cryptographic primitives

00:08:29,210 --> 00:08:37,229
so the peers can actually negotiate some

00:08:34,890 --> 00:08:39,320
cryptographic primitives and that's

00:08:37,229 --> 00:08:42,360
risky because there might not be

00:08:39,320 --> 00:08:44,390
reviewed as the usual pieces

00:08:42,360 --> 00:08:46,980
building blocks of the SSL protocol

00:08:44,390 --> 00:08:49,620
again a missing functionalities and

00:08:46,980 --> 00:08:52,960
because she also because

00:08:49,620 --> 00:08:56,650
the security issues which are shown on

00:08:52,960 --> 00:08:58,990
the left were fixed into under zero by

00:08:56,650 --> 00:09:05,350
using gos extension which is a mechanism

00:08:58,990 --> 00:09:10,779
that opens the possibility to extend the

00:09:05,350 --> 00:09:13,120
protocol here's the sum of list of the

00:09:10,779 --> 00:09:15,040
attacks against Els so I grouped them

00:09:13,120 --> 00:09:18,040
into several groups

00:09:15,040 --> 00:09:20,560
this is CBC mode was vulnerable to

00:09:18,040 --> 00:09:24,430
attacks like beasts and aforementioned

00:09:20,560 --> 00:09:28,089
pool oh like in microseconds Magnum

00:09:24,430 --> 00:09:32,260
encrypt construction is also broken and

00:09:28,089 --> 00:09:34,360
compression is another often misused

00:09:32,260 --> 00:09:37,750
feature of the protocol there are

00:09:34,360 --> 00:09:39,430
attacks crime time bridge the beast

00:09:37,750 --> 00:09:44,110
attack was actually the first one who

00:09:39,430 --> 00:09:47,290
used this kitchen nickname and the other

00:09:44,110 --> 00:09:50,920
other attacks basically followed and a

00:09:47,290 --> 00:09:53,040
heartbleed issue which was actually

00:09:50,920 --> 00:09:56,260
another protocol issue but

00:09:53,040 --> 00:09:59,170
implementation issue in open SSL brought

00:09:56,260 --> 00:10:04,180
all this marketing stuff to publishing

00:09:59,170 --> 00:10:09,430
vulnerabilities was also problem is ours

00:10:04,180 --> 00:10:15,520
a with the P key CS 1.5 it's known to be

00:10:09,430 --> 00:10:17,410
broken since 90s by cryptographer named

00:10:15,520 --> 00:10:21,279
Daniel blacken Barker and all the

00:10:17,410 --> 00:10:23,890
attacks the we must attack robot and per

00:10:21,279 --> 00:10:25,290
sec all days all based on the same

00:10:23,890 --> 00:10:29,589
saying there's basically three

00:10:25,290 --> 00:10:34,390
iterations of this attack our c4 is

00:10:29,589 --> 00:10:36,220
broken because it's just too old md5 and

00:10:34,390 --> 00:10:40,570
sha-1 are also not considered a secure

00:10:36,220 --> 00:10:43,480
anymore and another often broken feature

00:10:40,570 --> 00:10:47,650
is an english initial which also was

00:10:43,480 --> 00:10:50,170
target for several attacks well here are

00:10:47,650 --> 00:10:52,690
some other security issues while the

00:10:50,170 --> 00:10:57,459
protocol got quite complicated over the

00:10:52,690 --> 00:11:00,030
years so the implementations know don't

00:10:57,459 --> 00:11:02,400
always get it right so there were

00:11:00,030 --> 00:11:05,310
a couple high-profile vulnerabilities

00:11:02,400 --> 00:11:08,280
like heartbleed burçak or a snake which

00:11:05,310 --> 00:11:11,760
was attack actually and state machines

00:11:08,280 --> 00:11:15,120
of the implementations and also there's

00:11:11,760 --> 00:11:19,460
hundreds of other bucks a week

00:11:15,120 --> 00:11:23,390
cryptography or hosted a legacy stuff

00:11:19,460 --> 00:11:28,320
like export ciphers which are visas

00:11:23,390 --> 00:11:31,980
since the 90s they're actually leveraged

00:11:28,320 --> 00:11:38,370
several attacks which were done grinding

00:11:31,980 --> 00:11:41,880
the protocol to unsecured ciphers there

00:11:38,370 --> 00:11:43,560
are two interesting inter RFC's one is

00:11:41,880 --> 00:11:46,860
summarizing the NAM attacks again TLS

00:11:43,560 --> 00:11:48,870
and the other one are recommendations

00:11:46,860 --> 00:12:00,110
for security of the protocol

00:11:48,870 --> 00:12:05,430
okay let's yep sorry okay so we have

00:12:00,110 --> 00:12:12,089
some basics behind us and now let's see

00:12:05,430 --> 00:12:16,380
what do s 1 2 3 is doing it's a brand

00:12:12,089 --> 00:12:20,760
new standard which is basically freshly

00:12:16,380 --> 00:12:23,850
developed the development is led by IETF

00:12:20,760 --> 00:12:27,600
which is an organization that is taking

00:12:23,850 --> 00:12:32,670
care of web standards the development

00:12:27,600 --> 00:12:34,310
started four years ago and it took

00:12:32,670 --> 00:12:37,380
actually much longer than expected

00:12:34,310 --> 00:12:41,339
because there were several obstacles on

00:12:37,380 --> 00:12:44,970
the way the standard is developed in a

00:12:41,339 --> 00:12:46,800
very open way there's a the github link

00:12:44,970 --> 00:12:48,750
what you see that's actually the

00:12:46,800 --> 00:12:53,460
specification that was submitted for

00:12:48,750 --> 00:12:55,560
approval and besides the github lots of

00:12:53,460 --> 00:13:01,380
discussions about the politico are going

00:12:55,560 --> 00:13:04,470
on the IETF mailing list well as the

00:13:01,380 --> 00:13:07,440
development was taking so long and it

00:13:04,470 --> 00:13:10,960
was more open than you previously mmm

00:13:07,440 --> 00:13:13,420
this brings a lot of benefits like

00:13:10,960 --> 00:13:17,410
several actually independent

00:13:13,420 --> 00:13:21,160
implementations were implemented and the

00:13:17,410 --> 00:13:23,770
protocol was also formally verified the

00:13:21,160 --> 00:13:32,620
handshake was verified and this stained

00:13:23,770 --> 00:13:36,910
state ultimate these are the design

00:13:32,620 --> 00:13:38,350
goals of T us 1.3 as outlined by Eric

00:13:36,910 --> 00:13:43,570
our scholar which is the principal

00:13:38,350 --> 00:13:46,420
author of of this protocol since 3.0 so

00:13:43,570 --> 00:13:48,970
the first big thing was to clean the

00:13:46,420 --> 00:13:55,090
protocol up to remove a new staff of

00:13:48,970 --> 00:13:58,740
absolutely stuff risky stuff the other

00:13:55,090 --> 00:14:04,090
objective was to use modern secure

00:13:58,740 --> 00:14:13,360
cryptography and other is doing Christie

00:14:04,090 --> 00:14:16,390
privacy of the users because the

00:14:13,360 --> 00:14:19,570
channels like DNS are going to be more

00:14:16,390 --> 00:14:23,650
private and encrypted in the future and

00:14:19,570 --> 00:14:26,050
so is the plan of the TLS protocol know

00:14:23,650 --> 00:14:30,490
as for performance the goal was to speed

00:14:26,050 --> 00:14:32,260
up the handshake because it's it's to a

00:14:30,490 --> 00:14:34,660
giant overhead it's not the same as it

00:14:32,260 --> 00:14:37,360
was in the past we're using the public

00:14:34,660 --> 00:14:40,210
key cryptography was a big obstacle and

00:14:37,360 --> 00:14:46,060
it took a huge amount of CPU time but

00:14:40,210 --> 00:14:49,320
the CPUs got faster but still and also

00:14:46,060 --> 00:14:51,190
the biggest ghost was actually to be

00:14:49,320 --> 00:14:54,340
backward compatible as much possible

00:14:51,190 --> 00:14:58,600
because there are setups and not

00:14:54,340 --> 00:15:02,230
everyone is moving forward and using the

00:14:58,600 --> 00:15:06,250
newest tools available okay now for the

00:15:02,230 --> 00:15:09,400
clean up these are the victims that fell

00:15:06,250 --> 00:15:13,540
prey to the cleanup of the chaos one two

00:15:09,400 --> 00:15:18,820
three protocol there are these custom

00:15:13,540 --> 00:15:20,060
DHE groups whatever actually mostly

00:15:18,820 --> 00:15:22,880
unused and

00:15:20,060 --> 00:15:25,790
several will have to guess and size this

00:15:22,880 --> 00:15:29,480
acceptable for the protocol but this

00:15:25,790 --> 00:15:31,850
feature was mostly unused other well not

00:15:29,480 --> 00:15:35,360
so widely used feature was point for

00:15:31,850 --> 00:15:36,680
mass negotiation well other clients were

00:15:35,360 --> 00:15:41,030
service mostly was the uncompressed

00:15:36,680 --> 00:15:43,820
format and TLS 1.3 removes this

00:15:41,030 --> 00:15:48,710
completely and there's just one format

00:15:43,820 --> 00:15:52,760
for each curve another thing that's gone

00:15:48,710 --> 00:15:55,400
is DSA and also there are not so popular

00:15:52,760 --> 00:15:57,800
I first like camellia or area they were

00:15:55,400 --> 00:15:59,420
actually part of the protocol in the

00:15:57,800 --> 00:16:03,620
beginnings but they're very moved later

00:15:59,420 --> 00:16:05,080
on and another sign thing that this gun

00:16:03,620 --> 00:16:10,930
is in a negotiation

00:16:05,080 --> 00:16:14,510
the protocol was actually simplified and

00:16:10,930 --> 00:16:17,630
handshake was very structured and the

00:16:14,510 --> 00:16:19,580
several things were gone and when there

00:16:17,630 --> 00:16:22,630
it was possible things were merged

00:16:19,580 --> 00:16:25,340
together or just reduced to a basic set

00:16:22,630 --> 00:16:28,160
for example machine or assumption into a

00:16:25,340 --> 00:16:30,890
swan talk to you and appreciate keys got

00:16:28,160 --> 00:16:32,810
merge together because both of them were

00:16:30,890 --> 00:16:38,020
doing bison was it basically the same

00:16:32,810 --> 00:16:40,430
saying learning ocean ocean ocean was

00:16:38,020 --> 00:16:46,100
remove completely and replaced by two

00:16:40,430 --> 00:16:49,010
support mechanisms the ocean thing is

00:16:46,100 --> 00:16:50,360
convoluted and was also survival

00:16:49,010 --> 00:16:54,230
diabetes for example the triple

00:16:50,360 --> 00:16:57,970
handshake what we have now instead we

00:16:54,230 --> 00:17:01,630
now have the key update mechanism

00:16:57,970 --> 00:17:04,070
because one thing for which during

00:17:01,630 --> 00:17:06,140
negotiation was used is to actually

00:17:04,070 --> 00:17:08,390
update the traffic keys which is think

00:17:06,140 --> 00:17:12,650
you might want to do because if you are

00:17:08,390 --> 00:17:15,050
interacting as a key to long you may run

00:17:12,650 --> 00:17:17,840
up the security mount of data you can

00:17:15,050 --> 00:17:20,390
transfer and also if you are using the

00:17:17,840 --> 00:17:24,430
same key for months then I guess it's

00:17:20,390 --> 00:17:29,290
time to update another single

00:17:24,430 --> 00:17:37,120
for which a negotiation was used is the

00:17:29,290 --> 00:17:39,310
post hashing authentication y to the

00:17:37,120 --> 00:17:41,590
server I mean no I declined all

00:17:39,310 --> 00:17:46,540
technician was used after a handshake

00:17:41,590 --> 00:17:48,280
well one thing is that you can doing it

00:17:46,540 --> 00:17:52,630
like this the client certificate will be

00:17:48,280 --> 00:17:55,810
transferred encrypted so it's a good

00:17:52,630 --> 00:18:05,440
thing to have against let's say mostly

00:17:55,810 --> 00:18:08,290
dragnet surveillance and another thing

00:18:05,440 --> 00:18:11,620
is wides done after the handshake is

00:18:08,290 --> 00:18:16,990
because there are actually lots of

00:18:11,620 --> 00:18:21,700
corporate websites that are partially

00:18:16,990 --> 00:18:23,650
partially secure so there are some

00:18:21,700 --> 00:18:25,540
protected resources and when you are

00:18:23,650 --> 00:18:27,670
browsing to the website and you and you

00:18:25,540 --> 00:18:30,340
stumble upon something that is supposed

00:18:27,670 --> 00:18:35,560
to be protected then the server ask you

00:18:30,340 --> 00:18:38,610
for the authentication this thing was

00:18:35,560 --> 00:18:43,090
actually removed early in the process of

00:18:38,610 --> 00:18:45,160
standardization of TOS 103 but several

00:18:43,090 --> 00:18:48,460
drafts later Microsoft came that they

00:18:45,160 --> 00:18:51,460
are using this there's a large customers

00:18:48,460 --> 00:18:55,300
that are using the corporate websites

00:18:51,460 --> 00:18:56,440
and then it authentication and people

00:18:55,300 --> 00:18:59,140
are quite unhappy because they're a

00:18:56,440 --> 00:19:01,530
negotiation thing was finally gone it

00:18:59,140 --> 00:19:05,710
caused lots of durability forward

00:19:01,530 --> 00:19:07,930
instead of putting this thing back this

00:19:05,710 --> 00:19:19,660
new post and Chicago dedication was

00:19:07,930 --> 00:19:23,000
introduced ok security province again

00:19:19,660 --> 00:19:26,970
lots of things were dropped compression

00:19:23,000 --> 00:19:29,490
again source of lots of attacks and it

00:19:26,970 --> 00:19:30,960
was actually no one knows how to

00:19:29,490 --> 00:19:34,020
implement it properly there were attacks

00:19:30,960 --> 00:19:36,030
like Gregg crime time or breach which

00:19:34,020 --> 00:19:38,970
was actually on the HTTP local

00:19:36,030 --> 00:19:41,780
compression but compression on unless

00:19:38,970 --> 00:19:43,920
encryption uses really causes purple and

00:19:41,780 --> 00:19:51,180
there were several attacks that were

00:19:43,920 --> 00:19:55,740
able to using repeated chosen plaintext

00:19:51,180 --> 00:19:57,170
attack actually able to figure out HTTP

00:19:55,740 --> 00:20:00,030
cookies and things like that

00:19:57,170 --> 00:20:07,980
export ciphers again a sink of the past

00:20:00,030 --> 00:20:11,940
gun our C key key exchange is gone too I

00:20:07,980 --> 00:20:14,400
mean our sales certificate state but his

00:20:11,940 --> 00:20:16,100
keys change is gone because it's just

00:20:14,400 --> 00:20:20,780
too slow compared to elliptic curves and

00:20:16,100 --> 00:20:22,080
it doesn't offer perfect forward secrecy

00:20:20,780 --> 00:20:28,230
mmm

00:20:22,080 --> 00:20:31,320
our CP case as one five again it's known

00:20:28,230 --> 00:20:35,910
to be broken since 90s other thing

00:20:31,320 --> 00:20:40,140
that's gone no no well any safer that

00:20:35,910 --> 00:20:42,950
don't offer alternative encryption and

00:20:40,140 --> 00:20:45,810
also static here they feel home on

00:20:42,950 --> 00:20:51,270
exchange because this thing wasn't used

00:20:45,810 --> 00:20:52,740
and doesn't offer PFS well so here's

00:20:51,270 --> 00:20:57,690
again the list of the attacks I showed

00:20:52,740 --> 00:20:59,670
previously and compression gun don't a

00:20:57,690 --> 00:21:05,730
yet ciphers that also includes our seats

00:20:59,670 --> 00:21:08,700
for again RS a gun so basically all

00:21:05,730 --> 00:21:18,510
these classes should be eliminated in

00:21:08,700 --> 00:21:27,600
TLS 103 okay so what

00:21:18,510 --> 00:21:32,100
left deciphers in to us all 1.3 what's

00:21:27,600 --> 00:21:35,130
different a jump right here this is how

00:21:32,100 --> 00:21:38,700
the TOS 1.2 and 1.3 ciphers do look like

00:21:35,130 --> 00:21:41,580
and you also under to decipher all also

00:21:38,700 --> 00:21:44,820
outlined key exchange and out dedication

00:21:41,580 --> 00:21:48,900
mechanisms but this was split off and

00:21:44,820 --> 00:21:53,910
it's now negotiated separately Jo

00:21:48,900 --> 00:21:58,800
ciphers are just much shorter than just

00:21:53,910 --> 00:22:02,340
provide encryption and Mike without

00:21:58,800 --> 00:22:04,440
education and dose 1 2 3 it's either by

00:22:02,340 --> 00:22:09,210
the certificate or by a private key

00:22:04,440 --> 00:22:13,590
which is suited for resumption a key

00:22:09,210 --> 00:22:17,100
exchange is our size guns of all the

00:22:13,590 --> 00:22:20,970
ciphers are diffie-hellman exchange is

00:22:17,100 --> 00:22:24,170
and does offer perfect forward secrecy

00:22:20,970 --> 00:22:24,170
[Music]

00:22:24,530 --> 00:22:29,160
well here's the complete list of the

00:22:26,970 --> 00:22:33,900
element of three ciphers there are just

00:22:29,160 --> 00:22:38,310
five of five of them just AES and

00:22:33,900 --> 00:22:41,300
cha-cha is left all others stuff also

00:22:38,310 --> 00:22:43,830
removes to simplify the protocol because

00:22:41,300 --> 00:22:47,610
if you have fewer choices then you have

00:22:43,830 --> 00:22:53,550
fewer chances to actually implement it

00:22:47,610 --> 00:22:58,620
improperly okay so four key is changing

00:22:53,550 --> 00:23:01,620
TOS 103 allocate take I first elected I

00:22:58,620 --> 00:23:06,300
curves elliptic curves are used these

00:23:01,620 --> 00:23:06,960
are these nice high first and also diner

00:23:06,300 --> 00:23:12,450
Bernstein's

00:23:06,960 --> 00:23:14,940
X 2 4 2 5 5 1 9 and X 4 for 8 finite

00:23:12,450 --> 00:23:17,730
field determine also remain but for

00:23:14,940 --> 00:23:20,700
example OpenSSL dozen didn't implement

00:23:17,730 --> 00:23:24,010
it and they don't want to

00:23:20,700 --> 00:23:26,470
for our dedication Erica still can be

00:23:24,010 --> 00:23:30,039
used but there are modern models which

00:23:26,470 --> 00:23:32,049
could use instead and as I've said for

00:23:30,039 --> 00:23:36,809
encryption everything is perfectly

00:23:32,049 --> 00:23:39,640
forward secure we have s GCM and ChaCha

00:23:36,809 --> 00:23:43,919
and this one cipher is mandatory to

00:23:39,640 --> 00:23:49,330
implement for all problem plantations

00:23:43,919 --> 00:23:53,350
okay so to summarize decipher pruning in

00:23:49,330 --> 00:23:56,020
TS offers just a few but very good

00:23:53,350 --> 00:23:58,360
choices at the moment there are just

00:23:56,020 --> 00:24:01,539
five ciphers fields from which one is

00:23:58,360 --> 00:24:03,669
mandatory and there's one single point

00:24:01,539 --> 00:24:06,240
format for each curve there no

00:24:03,669 --> 00:24:10,029
negotiation anymore

00:24:06,240 --> 00:24:12,220
okay speed-up improvement in the Hinch

00:24:10,029 --> 00:24:16,630
ink was speed of one around three four

00:24:12,220 --> 00:24:19,270
seven off well in most cases the full

00:24:16,630 --> 00:24:20,860
headshake now takes just one round-trip

00:24:19,270 --> 00:24:24,570
and the resumption

00:24:20,860 --> 00:24:29,169
can be used even with zero roundtrip

00:24:24,570 --> 00:24:33,390
there on tip means well the way to the

00:24:29,169 --> 00:24:38,710
server and back and it's basically to

00:24:33,390 --> 00:24:40,240
start the amount of run tips until the

00:24:38,710 --> 00:24:47,230
data can be transferred from the pollak

00:24:40,240 --> 00:24:51,760
all okay so this here are handshakes for

00:24:47,230 --> 00:24:57,880
1.2 and 1.3 these are general like

00:24:51,760 --> 00:25:02,529
shakes mmm the all 1.2 takes two round

00:24:57,880 --> 00:25:04,929
trips because we are claimed since first

00:25:02,529 --> 00:25:09,279
the cipher sister server then the server

00:25:04,929 --> 00:25:14,320
picks one of the cipher suites and sends

00:25:09,279 --> 00:25:17,740
back is quisha which is a defeat among

00:25:14,320 --> 00:25:22,630
group to be used for a negotiation of

00:25:17,740 --> 00:25:25,659
the security material then the Klan's

00:25:22,630 --> 00:25:29,460
and hits key sure and we are finished

00:25:25,659 --> 00:25:35,740
and we can send the data in TOS 1.3

00:25:29,460 --> 00:25:39,970
it's visible here look so the difference

00:25:35,740 --> 00:25:47,799
ability in 1.2 and 1.3 isn't that in 1.2

00:25:39,970 --> 00:25:49,840
the grant was very pessimistic it was

00:25:47,799 --> 00:25:52,270
like I don't know what the server can be

00:25:49,840 --> 00:25:54,700
doing there's just too many options in

00:25:52,270 --> 00:25:57,160
ciphers to choose from owls and

00:25:54,700 --> 00:26:02,860
everything I support and I let him pick

00:25:57,160 --> 00:26:06,669
something worse in TOS 1.3 mm the

00:26:02,860 --> 00:26:11,740
protocol is much more optimistic there

00:26:06,669 --> 00:26:15,340
are civil limited choices which actually

00:26:11,740 --> 00:26:18,900
intensify this so as we are only have a

00:26:15,340 --> 00:26:22,900
couple of ciphers we have a couple of

00:26:18,900 --> 00:26:26,010
different groups to choose from then the

00:26:22,900 --> 00:26:28,900
server just I'm in declaimed just

00:26:26,010 --> 00:26:33,490
guesses it prepares a key share for some

00:26:28,900 --> 00:26:37,380
of the groups which will be negotiated

00:26:33,490 --> 00:26:40,380
and so in this sense it over the server

00:26:37,380 --> 00:26:43,450
well the server looks at the choices and

00:26:40,380 --> 00:26:47,980
determines whether there are file not if

00:26:43,450 --> 00:26:50,470
they are find and it just sends declined

00:26:47,980 --> 00:26:52,330
back one of his key sure he also sends

00:26:50,470 --> 00:26:54,880
back the certificate and the signature

00:26:52,330 --> 00:26:58,480
of the Center forget which approved that

00:26:54,880 --> 00:27:02,650
is actually all of the certificate and

00:26:58,480 --> 00:27:04,360
can encrypt and decrypt eh I visit one

00:27:02,650 --> 00:27:07,600
octave has been chairman of and the

00:27:04,360 --> 00:27:15,360
server can and the client can transmit

00:27:07,600 --> 00:27:17,799
data this is basically what I just said

00:27:15,360 --> 00:27:19,860
dookey share of it from the server it

00:27:17,799 --> 00:27:25,870
can be formal groups for example a

00:27:19,860 --> 00:27:28,390
client can send 2 5 6 and X 2 5 for 9

00:27:25,870 --> 00:27:30,789
and if the server supports either of

00:27:28,390 --> 00:27:35,559
them you can just pick one and sends the

00:27:30,789 --> 00:27:37,150
single key share for it oh this is nice

00:27:35,559 --> 00:27:40,690
but

00:27:37,150 --> 00:27:42,550
it's not guaranteed that the client will

00:27:40,690 --> 00:27:46,150
guess right so what happens when the

00:27:42,550 --> 00:27:47,580
client goes wrong now we are back to the

00:27:46,150 --> 00:27:50,380
two round-trips

00:27:47,580 --> 00:27:53,260
this is the worst case and to us 1.3 but

00:27:50,380 --> 00:27:55,809
shouldn't be that comment because the

00:27:53,260 --> 00:27:56,890
choices are quite limited and some of

00:27:55,809 --> 00:28:02,890
there are mandatory for each

00:27:56,890 --> 00:28:05,530
implementations so what happens now the

00:28:02,890 --> 00:28:11,860
clients and sometimes send something but

00:28:05,530 --> 00:28:15,130
the server I looked at it and wondered

00:28:11,860 --> 00:28:17,770
oh you're sending me these groups but I

00:28:15,130 --> 00:28:19,750
would like to use something else at two

00:28:17,770 --> 00:28:21,580
five six because it was generated from

00:28:19,750 --> 00:28:24,850
some magic seat and I don't like that I

00:28:21,580 --> 00:28:29,410
would like to use export for it instead

00:28:24,850 --> 00:28:34,330
so it's since Howell return request and

00:28:29,410 --> 00:28:36,550
after that the client sends a new client

00:28:34,330 --> 00:28:40,240
hello with a single key share for the

00:28:36,550 --> 00:28:43,030
selected development group the group

00:28:40,240 --> 00:28:48,970
that server picked must have been listed

00:28:43,030 --> 00:28:52,559
and supported groups by the client so

00:28:48,970 --> 00:28:59,290
basically this worst case is as good as

00:28:52,559 --> 00:29:02,140
the usual case anti-us 1.2 we can

00:28:59,290 --> 00:29:06,420
actually do better and because something

00:29:02,140 --> 00:29:10,059
called the resumption which is used to

00:29:06,420 --> 00:29:13,720
sharing overwrite roundtrip in the past

00:29:10,059 --> 00:29:15,370
it was the idea behind it was mostly the

00:29:13,720 --> 00:29:18,550
public key cryptography is too expensive

00:29:15,370 --> 00:29:23,950
so we want to motorize the cost so we

00:29:18,550 --> 00:29:28,960
want to avoid computing latch per se

00:29:23,950 --> 00:29:34,510
computing with large RSA keys so what is

00:29:28,960 --> 00:29:36,970
done instead can go back this is the

00:29:34,510 --> 00:29:40,270
full handshake and there are two

00:29:36,970 --> 00:29:42,970
mechanisms in 1.2 for the session

00:29:40,270 --> 00:29:46,570
assumption there's a session session ID

00:29:42,970 --> 00:29:48,100
which is transmitted during the a shank

00:29:46,570 --> 00:29:50,690
and the source obsession ticket which is

00:29:48,100 --> 00:29:55,380
transmitted after that

00:29:50,690 --> 00:29:56,250
Tio's one two three doesn't use any of

00:29:55,380 --> 00:30:06,660
these mechanisms

00:29:56,250 --> 00:30:09,870
it's its own so what's here different

00:30:06,660 --> 00:30:15,590
during this session our assumption the

00:30:09,870 --> 00:30:15,590
client sends again the client hello but

00:30:16,790 --> 00:30:24,330
previously I got from a server Prashad

00:30:20,940 --> 00:30:31,440
key or a session ticket and using this

00:30:24,330 --> 00:30:35,180
key decline there the clientele serval

00:30:31,440 --> 00:30:38,850
exchanged short material already so they

00:30:35,180 --> 00:30:43,890
they can skip the negotiation and also

00:30:38,850 --> 00:30:47,160
there's no authentication because the

00:30:43,890 --> 00:30:50,090
peers out indicated by having the

00:30:47,160 --> 00:30:53,610
pressure keys there's no need for

00:30:50,090 --> 00:30:57,650
certificate because the client verified

00:30:53,610 --> 00:31:05,310
the service identity during the previous

00:30:57,650 --> 00:31:07,440
we're going to previous connection well

00:31:05,310 --> 00:31:11,550
her something about perfect fabric

00:31:07,440 --> 00:31:15,630
secrecy that's a it's a good thing to

00:31:11,550 --> 00:31:17,730
have because if the traffic is got

00:31:15,630 --> 00:31:21,630
compromised that perfect forward secrecy

00:31:17,730 --> 00:31:23,610
set that the attacker even with the

00:31:21,630 --> 00:31:29,150
compromised key scan the past

00:31:23,610 --> 00:31:32,690
connections when until last month or two

00:31:29,150 --> 00:31:35,640
this respect to the certificate the

00:31:32,690 --> 00:31:37,970
connections are perfect for that secure

00:31:35,640 --> 00:31:40,770
only

00:31:37,970 --> 00:31:43,200
diffie-hellman key exchange is used if

00:31:40,770 --> 00:31:45,780
RSA is used then there's no perfect

00:31:43,200 --> 00:31:48,060
perfect forward secrecy because having

00:31:45,780 --> 00:31:50,580
the private certificate of the server

00:31:48,060 --> 00:31:52,140
the attacker can decrypt them and the

00:31:50,580 --> 00:31:53,620
past connections and recovered racial

00:31:52,140 --> 00:31:56,350
secret for them

00:31:53,620 --> 00:31:59,380
and using this ticket mechanism for

00:31:56,350 --> 00:32:06,309
British art piece in 2001 due to there's

00:31:59,380 --> 00:32:09,640
no perfect forward secrecy because if

00:32:06,309 --> 00:32:12,940
the other Kroger gets to know the pre

00:32:09,640 --> 00:32:15,880
shared key then he can decrypt all the

00:32:12,940 --> 00:32:18,400
material of the traffic from now on

00:32:15,880 --> 00:32:20,080
until one two three with respect to the

00:32:18,400 --> 00:32:23,760
certificate we have perfect forward

00:32:20,080 --> 00:32:27,309
secrecy because all the ciphers are now

00:32:23,760 --> 00:32:31,240
the Philharmonic ml and with the

00:32:27,309 --> 00:32:34,510
pressure key we can use something which

00:32:31,240 --> 00:32:36,970
is called s ke that means that actually

00:32:34,510 --> 00:32:43,570
using pressure key with diffie-hellman

00:32:36,970 --> 00:32:46,120
together if you are not under option to

00:32:43,570 --> 00:32:51,390
use just pressure get along and we are

00:32:46,120 --> 00:32:51,390
basically back to the EOS one dot here

00:32:53,640 --> 00:32:59,710
in the resumption in the US one two

00:32:57,429 --> 00:33:04,000
three there's an additional key Sharon

00:32:59,710 --> 00:33:05,710
message which basically means that the

00:33:04,000 --> 00:33:08,919
Philharmonic groups will be negotiated

00:33:05,710 --> 00:33:12,760
and secret material will be derived

00:33:08,919 --> 00:33:16,149
using this algorithm so instead of using

00:33:12,760 --> 00:33:18,070
the pressure keys from now on after

00:33:16,149 --> 00:33:26,350
hands Inc we will have a brand new

00:33:18,070 --> 00:33:30,010
keying material okay so basically most

00:33:26,350 --> 00:33:32,919
of the collisions using TS 1.3 are just

00:33:30,010 --> 00:33:35,320
one round type but we can actually do

00:33:32,919 --> 00:33:35,740
better we can even reduce this one

00:33:35,320 --> 00:33:37,870
roundtrip

00:33:35,740 --> 00:33:42,899
and since end the data during the first

00:33:37,870 --> 00:33:47,799
flight this is done using the early data

00:33:42,899 --> 00:33:50,950
extension this is how it looks and to us

00:33:47,799 --> 00:33:55,779
103 is used with the early data the

00:33:50,950 --> 00:34:01,000
early data can be used is the pressure

00:33:55,779 --> 00:34:03,309
gives so instead of a I think our

00:34:01,000 --> 00:34:09,010
after the handshake the data can be sent

00:34:03,309 --> 00:34:10,830
right over because we have keys already

00:34:09,010 --> 00:34:21,609
we have to appreciate key and we have

00:34:10,830 --> 00:34:25,869
encrypted traffic and send it over how

00:34:21,609 --> 00:34:29,500
is the zero our kitty data to early data

00:34:25,869 --> 00:34:34,000
it works like client sends an extension

00:34:29,500 --> 00:34:39,129
that is able to send zero RTT data and

00:34:34,000 --> 00:34:42,909
the server can later decide if I use the

00:34:39,129 --> 00:34:51,909
data or just discard it and return to

00:34:42,909 --> 00:34:54,669
the one:1 RTT the basic mechanism or I

00:34:51,909 --> 00:34:57,280
can agree and proceed with the parsing

00:34:54,669 --> 00:35:08,070
the early data and signaling the blood

00:34:57,280 --> 00:35:15,070
by this incriminating extension there so

00:35:08,070 --> 00:35:17,800
issue is replay attacks because when an

00:35:15,070 --> 00:35:19,540
attacker captures the plain hello he or

00:35:17,800 --> 00:35:21,820
she actually played against the server

00:35:19,540 --> 00:35:29,140
and it will look like completely

00:35:21,820 --> 00:35:34,570
legitimate use so there are some entire

00:35:29,140 --> 00:35:40,210
reply protections just a server could

00:35:34,570 --> 00:35:43,119
save zero RTT state then it would be

00:35:40,210 --> 00:35:45,160
pretty easy to actually target well I

00:35:43,119 --> 00:35:47,530
got this in the previous fight so this

00:35:45,160 --> 00:35:51,369
must be a replay I will just discard it

00:35:47,530 --> 00:35:56,170
all the problem is that servers are not

00:35:51,369 --> 00:35:58,630
just one machine anymore it could be a

00:35:56,170 --> 00:36:01,830
very content provider and you can have

00:35:58,630 --> 00:36:05,500
servers geographically spread and

00:36:01,830 --> 00:36:10,200
there's no chance you can persist you

00:36:05,500 --> 00:36:10,200
can keep globally consistent state

00:36:10,589 --> 00:36:17,679
but there are some protections in the

00:36:14,439 --> 00:36:25,719
protocol that could be used to prevent

00:36:17,679 --> 00:36:28,179
this okay here's some traffic control

00:36:25,719 --> 00:36:31,299
measures that are implemented into us

00:36:28,179 --> 00:36:34,569
one to three more parts of the hinchik

00:36:31,299 --> 00:36:36,549
were encrypted for example the server

00:36:34,569 --> 00:36:38,229
certificate is now encrypted and using

00:36:36,549 --> 00:36:40,949
the post in check out the indication the

00:36:38,229 --> 00:36:46,390
client certificate could be encrypted to

00:36:40,949 --> 00:36:49,539
record content is now encrypted the old

00:36:46,390 --> 00:36:51,939
well old field for type just now says

00:36:49,539 --> 00:36:55,809
application data for everything and the

00:36:51,939 --> 00:36:59,229
real content type is hidden encrypted in

00:36:55,809 --> 00:37:01,900
this in cipher block just want to see

00:36:59,229 --> 00:37:06,219
also implements arbitrary padding and

00:37:01,900 --> 00:37:14,019
the padding can be added at a record so

00:37:06,219 --> 00:37:15,219
attacker can can guess the size of the

00:37:14,019 --> 00:37:22,569
transferred material anymore

00:37:15,219 --> 00:37:25,299
and for SNI there's a proposal to use to

00:37:22,569 --> 00:37:28,119
smuggle it out in the zero RTT data and

00:37:25,299 --> 00:37:32,489
to sankar top front front server and the

00:37:28,119 --> 00:37:35,709
hidden server so you're connected to a

00:37:32,489 --> 00:37:38,459
server send it a bogus SNI and the

00:37:35,709 --> 00:37:42,909
reason i will be hidden in 2-0 RTT data

00:37:38,459 --> 00:37:49,449
which is encrypted by by the pre-shared

00:37:42,909 --> 00:37:52,569
key by the system in progress compatible

00:37:49,449 --> 00:37:54,939
with the previous versions there was

00:37:52,569 --> 00:37:57,459
during development this was one of the

00:37:54,939 --> 00:38:02,019
biggest obstacle we delayed the open or

00:37:57,459 --> 00:38:04,599
the standard for the longest there are

00:38:02,019 --> 00:38:06,489
some middle boxes on the internet there

00:38:04,599 --> 00:38:09,219
are machines which usually examine

00:38:06,489 --> 00:38:12,029
geostrophic and then decide a drivel

00:38:09,219 --> 00:38:15,789
elevate or drop it

00:38:12,029 --> 00:38:17,799
they usually perform any terminal attack

00:38:15,789 --> 00:38:19,430
against the earth connection so instead

00:38:17,799 --> 00:38:21,589
of connecting to us

00:38:19,430 --> 00:38:25,099
which you want you will be connecting to

00:38:21,589 --> 00:38:28,010
this middle box which will terminate the

00:38:25,099 --> 00:38:30,680
connection there and it will connect to

00:38:28,010 --> 00:38:33,050
the server or on your behalf and then

00:38:30,680 --> 00:38:39,140
we'll transfer the data these machines

00:38:33,050 --> 00:38:41,540
are used to mostly security scanning but

00:38:39,140 --> 00:38:45,230
decide we saw some black boxes which are

00:38:41,540 --> 00:38:49,700
actually not well maintained and some of

00:38:45,230 --> 00:38:51,920
them don't like new versions the version

00:38:49,700 --> 00:38:55,190
on the wire of the TOS protocol is

00:38:51,920 --> 00:38:59,089
called C dot for this for historical

00:38:55,190 --> 00:39:02,720
reasons because SSL 3 was 3.0 and all

00:38:59,089 --> 00:39:09,230
the forming TLS person just incremented

00:39:02,720 --> 00:39:13,540
the number so this function to pass the

00:39:09,230 --> 00:39:17,119
rs3 through through these machines was

00:39:13,540 --> 00:39:22,579
well to camouflage the TOS protocol to

00:39:17,119 --> 00:39:25,309
look just like the earth 1.2 so for

00:39:22,579 --> 00:39:30,349
example the version of the protocol is

00:39:25,309 --> 00:39:33,589
now was frozen and it's using the 1.2

00:39:30,349 --> 00:39:36,079
and the real version this actually has

00:39:33,589 --> 00:39:39,910
been moved to the extensions there's a

00:39:36,079 --> 00:39:43,400
supported versions extension which holds

00:39:39,910 --> 00:39:47,089
the real version and also the new key

00:39:43,400 --> 00:39:50,510
share mechanism it has to be moved to a

00:39:47,089 --> 00:39:53,450
separate extensions and also the pre

00:39:50,510 --> 00:39:57,680
shared key mechanism is implemented to

00:39:53,450 --> 00:40:01,430
syncing stations the hell are I request

00:39:57,680 --> 00:40:05,930
is camouflages several hello that's

00:40:01,430 --> 00:40:08,510
because if it well the machines wouldn't

00:40:05,930 --> 00:40:10,220
understand and new inching message and

00:40:08,510 --> 00:40:14,270
well terminate the connection so instead

00:40:10,220 --> 00:40:24,049
of the server hello is used and

00:40:14,270 --> 00:40:24,750
bogus value is set in the random change

00:40:24,049 --> 00:40:28,110
the first

00:40:24,750 --> 00:40:30,120
if occasionally our first Peck message

00:40:28,110 --> 00:40:32,700
which was used until s102 to signal that

00:40:30,120 --> 00:40:34,590
all the traffic from now on will be

00:40:32,700 --> 00:40:36,240
encrypted it was dropped in the also

00:40:34,590 --> 00:40:37,890
mandatory but the envelope

00:40:36,240 --> 00:40:41,160
implementations are allowed to actually

00:40:37,890 --> 00:40:44,310
use it for better compatibility with all

00:40:41,160 --> 00:40:49,740
the protocols and this something called

00:40:44,310 --> 00:40:56,130
grease which is a mechanism to keep

00:40:49,740 --> 00:40:59,540
their server more agile and so they got

00:40:56,130 --> 00:41:04,320
used to newer stuffs in the protocol

00:40:59,540 --> 00:41:06,210
this a proposal which are at some random

00:41:04,320 --> 00:41:10,140
data to various fields in the protocol

00:41:06,210 --> 00:41:17,760
so keep servers from and implementations

00:41:10,140 --> 00:41:20,520
from pacifying well cos 1 2 3 some

00:41:17,760 --> 00:41:22,890
issues which uses Myron into the ciphers

00:41:20,520 --> 00:41:26,250
are no longer compatible still under 2

00:41:22,890 --> 00:41:30,210
because the key exchange was moved to a

00:41:26,250 --> 00:41:34,140
separate negotiation so for example

00:41:30,210 --> 00:41:37,020
using C - E string in open SSL very want

00:41:34,140 --> 00:41:40,650
less Anita's mother 3 cipher sheets so

00:41:37,020 --> 00:41:42,930
that's a things to watch out for when

00:41:40,650 --> 00:41:46,170
you're using explicit cipher strings in

00:41:42,930 --> 00:41:51,180
open SSL sessions are established after

00:41:46,170 --> 00:41:55,080
the handshake there's a special API for

00:41:51,180 --> 00:41:58,170
this because the pay was the sessions

00:41:55,080 --> 00:42:01,140
follow-up study before DSR certificates

00:41:58,170 --> 00:42:03,600
are gone and renegotiation and the

00:42:01,140 --> 00:42:05,750
compression was removed so if at us one

00:42:03,600 --> 00:42:07,830
does the implementation encounters

00:42:05,750 --> 00:42:13,920
renegotiation on probation it will

00:42:07,830 --> 00:42:16,560
terminate the connection ok so we have a

00:42:13,920 --> 00:42:19,070
brand new standard and when we can

00:42:16,560 --> 00:42:21,990
expect that it will be deployed

00:42:19,070 --> 00:42:25,950
the draft was recently approved as a

00:42:21,990 --> 00:42:32,420
proposed standard by IETF and it is

00:42:25,950 --> 00:42:34,760
adult for becoming an RFC soon well

00:42:32,420 --> 00:42:36,930
adoption was actually quite good

00:42:34,760 --> 00:42:44,010
considering that the protocol wasn't

00:42:36,930 --> 00:42:46,440
fully rectified yet most of the society

00:42:44,010 --> 00:42:49,940
plantations are at least working on

00:42:46,440 --> 00:42:52,830
implementing the draft in OpenSSL

00:42:49,940 --> 00:42:57,170
everything is implemented but there was

00:42:52,830 --> 00:43:01,349
no actual release everything is in

00:42:57,170 --> 00:43:04,920
mastery but this upcoming 1.1.1 version

00:43:01,349 --> 00:43:06,690
is scheduled in a few weeks and may may

00:43:04,920 --> 00:43:10,200
be released very soon

00:43:06,690 --> 00:43:13,430
the same goes for Gutierrez everything

00:43:10,200 --> 00:43:19,550
will be enabled and fully implemented in

00:43:13,430 --> 00:43:21,900
3.6 das 3 in NSS this report is well

00:43:19,550 --> 00:43:24,300
since the beginning because NSS was

00:43:21,900 --> 00:43:29,460
actually used for the first class 103

00:43:24,300 --> 00:43:30,839
connection over the internet so and the

00:43:29,460 --> 00:43:33,839
array Kirchner is called the guy for

00:43:30,839 --> 00:43:37,950
example with the author of this year a

00:43:33,839 --> 00:43:40,070
standard is employed by Muslims working

00:43:37,950 --> 00:43:44,040
on implementation

00:43:40,070 --> 00:43:48,750
microsoft said it's in the development

00:43:44,040 --> 00:43:52,349
and a place that to implement it this

00:43:48,750 --> 00:43:56,010
actually already the support in web

00:43:52,349 --> 00:43:58,080
browsers is also very good chrome does

00:43:56,010 --> 00:44:01,800
support it and it's actually already

00:43:58,080 --> 00:44:04,410
enabled the same goes with Firefox there

00:44:01,800 --> 00:44:08,359
the other option is being gradually

00:44:04,410 --> 00:44:12,570
enabled you can check it in about config

00:44:08,359 --> 00:44:20,040
for our suffering it's implemented by

00:44:12,570 --> 00:44:20,850
this off and H again in the workman web

00:44:20,040 --> 00:44:23,640
servers

00:44:20,850 --> 00:44:28,980
and cheeks has perfect support for quite

00:44:23,640 --> 00:44:30,780
a time is not yet and approach well

00:44:28,980 --> 00:44:36,210
currently the only chance is using mod

00:44:30,780 --> 00:44:38,520
NSS other applications which are very

00:44:36,210 --> 00:44:40,440
useful for this is a VAR shark and in

00:44:38,520 --> 00:44:45,840
his perfect support for the second

00:44:40,440 --> 00:44:48,330
dirtiest modesty protocol okay this is

00:44:45,840 --> 00:45:06,810
the message which indicates and of TOS

00:44:48,330 --> 00:45:09,180
connection also ends my presentation so

00:45:06,810 --> 00:45:11,970
you said the server should keep state

00:45:09,180 --> 00:45:17,070
for zero bunch of stuff how because the

00:45:11,970 --> 00:45:18,780
window even like keeping in it should

00:45:17,070 --> 00:45:20,550
keep the state for one hour and if it

00:45:18,780 --> 00:45:22,200
picked disorder when one hour like come

00:45:20,550 --> 00:45:24,890
sometimes and order when one hour I can

00:45:22,200 --> 00:45:29,100
automatically discard it or how long

00:45:24,890 --> 00:45:30,960
yeah for a few min to prevent to replay

00:45:29,100 --> 00:45:35,000
attack there's actually support in the

00:45:30,960 --> 00:45:38,880
protocol there there's that timestamp

00:45:35,000 --> 00:45:43,560
which the server will check and for

00:45:38,880 --> 00:45:47,490
example if it gets to zero RTT data and

00:45:43,560 --> 00:45:48,960
then it gets minutes later than just

00:45:47,490 --> 00:45:52,050
discard it because it was too light so

00:45:48,960 --> 00:45:54,900
how big this window in the Sun not well

00:45:52,050 --> 00:45:58,290
it depends up on the implementation all

00:45:54,900 --> 00:46:03,660
that usually very close because there

00:45:58,290 --> 00:46:07,260
are seconds it it's too much okay so the

00:46:03,660 --> 00:46:11,580
second question is sni is not in 1.3 or

00:46:07,260 --> 00:46:13,470
still yes it's even 1/3 but you said the

00:46:11,580 --> 00:46:17,700
encryption phone is like stood in

00:46:13,470 --> 00:46:19,530
discussion yeah well did occur this you

00:46:17,700 --> 00:46:21,570
mean encrypted as and I'm jealous one

00:46:19,530 --> 00:46:23,730
it's written that it's not implemented

00:46:21,570 --> 00:46:25,740
yet in the standard there's a proposal

00:46:23,730 --> 00:46:29,340
for doing that but it actually is

00:46:25,740 --> 00:46:31,970
collaboration this other protocols so

00:46:29,340 --> 00:46:31,970
this is modern

00:46:42,960 --> 00:46:48,310
so as per your expertise what's your

00:46:45,820 --> 00:46:51,700
expectation I mean - how long will it

00:46:48,310 --> 00:46:53,590
take to switch to - you sell one point

00:46:51,700 --> 00:46:55,390
free for the servers that I mean like

00:46:53,590 --> 00:46:58,360
some service will still run their old

00:46:55,390 --> 00:47:02,410
version or in compatibility mode so some

00:46:58,360 --> 00:47:04,420
Holdeman abilities can be used and the

00:47:02,410 --> 00:47:05,980
second question are we moving into the

00:47:04,420 --> 00:47:08,560
direction that actually the client-side

00:47:05,980 --> 00:47:11,100
all souls have this certificate and it

00:47:08,560 --> 00:47:11,100
will be verified

00:47:11,310 --> 00:47:18,790
okay so first I'll answer the second

00:47:13,720 --> 00:47:21,420
question first question well there's

00:47:18,790 --> 00:47:25,180
nothing wrong with steals mundo - when

00:47:21,420 --> 00:47:28,120
when configured properly because we have

00:47:25,180 --> 00:47:30,040
secure ciphers there are basically safe

00:47:28,120 --> 00:47:33,040
that's one of the reasons for example by

00:47:30,040 --> 00:47:35,560
a liberal SSL didn't implement all 103

00:47:33,040 --> 00:47:39,220
at all for now because the standard was

00:47:35,560 --> 00:47:42,940
developing and just one does - is good

00:47:39,220 --> 00:47:51,760
enough for Islam could you repeat the

00:47:42,940 --> 00:47:53,620
second question means the second

00:47:51,760 --> 00:47:55,150
question was if you are moving into the

00:47:53,620 --> 00:47:56,590
direction that the client-side also will

00:47:55,150 --> 00:47:58,920
have this certificate which will be

00:47:56,590 --> 00:48:01,300
verified and so we not only validate the

00:47:58,920 --> 00:48:08,670
server's certificate but also the

00:48:01,300 --> 00:48:11,770
client-side we have kind of a password I

00:48:08,670 --> 00:48:13,480
mean they say when we undersides the

00:48:11,770 --> 00:48:15,420
connection we verified that circuit is

00:48:13,480 --> 00:48:17,920
valid for the server and for the

00:48:15,420 --> 00:48:20,080
connection to the server but server

00:48:17,920 --> 00:48:22,210
doesn't validate the because client

00:48:20,080 --> 00:48:24,460
doesn't basically have a certificate so

00:48:22,210 --> 00:48:25,780
connection can be from anywhere and if

00:48:24,460 --> 00:48:28,270
there are any movement for I don't know

00:48:25,780 --> 00:48:32,970
maybe some specific areas where this is

00:48:28,270 --> 00:48:36,010
applied say the both sides are validated

00:48:32,970 --> 00:48:37,950
it's not the client side first are

00:48:36,010 --> 00:48:41,730
basically Anisha

00:48:37,950 --> 00:48:59,069
there's I don't say anything while

00:48:41,730 --> 00:49:08,600
moving it in front okay any more

00:48:59,069 --> 00:49:12,100
question okay thank you for coming

00:49:08,600 --> 00:49:12,100

YouTube URL: https://www.youtube.com/watch?v=Ye37HbopzwQ


