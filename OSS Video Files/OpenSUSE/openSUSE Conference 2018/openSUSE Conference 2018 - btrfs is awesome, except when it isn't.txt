Title: openSUSE Conference 2018 - btrfs is awesome, except when it isn't
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1915-btrfs-is-awesome-except-when-it-isn-t

How to fix a broken btrfs filesystem

I love btrfs, I think btrfs is the best filesystem ever.

But like all software, it's not absolutely 100% perfect all of the time.

This lightning talk will help tell you what to do when it all goes wrong :)

I love btrfs, I think btrfs is the best filesystem ever.

But like all software, it's not absolutely 100% perfect all of the time.

This lightning talk will help tell you what to do when it all goes wrong :)

Richard Brown
Captions: 
	00:00:05,690 --> 00:00:09,750
awesome so I'm Richard I'm gonna be

00:00:07,950 --> 00:00:13,309
talking about why I think btrfs is

00:00:09,750 --> 00:00:16,470
absolutely wonderfully awesome and

00:00:13,309 --> 00:00:17,340
except when it isn't and how to deal

00:00:16,470 --> 00:00:21,980
with it when things aren't going

00:00:17,340 --> 00:00:26,220
perfectly fine so yeah I I am a

00:00:21,980 --> 00:00:28,439
shameless btrfs fanboy you know you've

00:00:26,220 --> 00:00:30,470
just heard about the wonderful things

00:00:28,439 --> 00:00:33,360
we're doing with transactional updates

00:00:30,470 --> 00:00:37,110
inside all Sousa distributions

00:00:33,360 --> 00:00:39,719
openSUSE Slee Cask everything you know

00:00:37,110 --> 00:00:42,870
we're using btrfs as the default root

00:00:39,719 --> 00:00:47,129
filesystem mainly for the snapshot in

00:00:42,870 --> 00:00:50,219
the ball back feature so and there are

00:00:47,129 --> 00:00:52,500
also features like btrfs send and

00:00:50,219 --> 00:00:54,149
receive which I don't want to go into

00:00:52,500 --> 00:00:56,730
too much detail because this is meant to

00:00:54,149 --> 00:00:58,500
be a lightning talk but btrfs sending

00:00:56,730 --> 00:01:00,239
receive is one of those awesome features

00:00:58,500 --> 00:01:02,250
is just lurking away there in the

00:01:00,239 --> 00:01:06,770
codebase that nobody really pays enough

00:01:02,250 --> 00:01:09,510
attention to the kind of short answer is

00:01:06,770 --> 00:01:12,840
you can basically pipe out the entire

00:01:09,510 --> 00:01:15,390
contents of your data to you know to

00:01:12,840 --> 00:01:17,659
standard output and then you can receive

00:01:15,390 --> 00:01:20,220
all of that and pipe it somewhere else

00:01:17,659 --> 00:01:23,759
but you can do that on a snapshot level

00:01:20,220 --> 00:01:25,860
as well so you can basically do a sync

00:01:23,759 --> 00:01:27,360
on steroids with your actual block data

00:01:25,860 --> 00:01:30,299
transmitting it you know across your

00:01:27,360 --> 00:01:32,640
network and or whatever comfortably

00:01:30,299 --> 00:01:34,590
building you know things like your own

00:01:32,640 --> 00:01:37,020
sort of Apple Time Machine style

00:01:34,590 --> 00:01:38,640
arrangement or just you know a couple of

00:01:37,020 --> 00:01:40,710
lines of scripting and it all just works

00:01:38,640 --> 00:01:42,630
wonderfully so the the upstream

00:01:40,710 --> 00:01:45,180
Wikipedia every wiki article on this

00:01:42,630 --> 00:01:47,790
covers that gives lots of examples of

00:01:45,180 --> 00:01:51,390
scripts and how to use it it's amazing

00:01:47,790 --> 00:01:53,340
and especially recently there's been an

00:01:51,390 --> 00:01:55,950
awful lot of work in be TFS for

00:01:53,340 --> 00:01:58,049
compression and that's now sort of a

00:01:55,950 --> 00:02:01,590
fully standardized fully supported

00:01:58,049 --> 00:02:03,570
feature in btrfs you can you know just

00:02:01,590 --> 00:02:06,079
turn it on with a single you know mount

00:02:03,570 --> 00:02:08,310
option you can shove it in your FS tab

00:02:06,079 --> 00:02:10,530
but if you have an existing be TFS

00:02:08,310 --> 00:02:12,760
system it's not going to retroactively

00:02:10,530 --> 00:02:14,890
Lee compress everything that you have

00:02:12,760 --> 00:02:17,170
if you've got an old installation and

00:02:14,890 --> 00:02:18,970
it's all uncompressed you know

00:02:17,170 --> 00:02:20,799
dismounting it compression will only

00:02:18,970 --> 00:02:24,400
compress the new files you're putting on

00:02:20,799 --> 00:02:26,409
the system but to retro actively

00:02:24,400 --> 00:02:30,489
compress anything you want kind of

00:02:26,409 --> 00:02:32,890
strangely oh yeah kind of strangely yeah

00:02:30,489 --> 00:02:35,920
you can use the defrag command and that

00:02:32,890 --> 00:02:36,849
will compress Wow it's defragging so two

00:02:35,920 --> 00:02:38,549
birds in one stone

00:02:36,849 --> 00:02:41,349
everything goes a little bit faster

00:02:38,549 --> 00:02:44,500
there's three different layers or two

00:02:41,349 --> 00:02:46,540
different formats for methods for

00:02:44,500 --> 00:02:48,879
compressing you have good old fashioned

00:02:46,540 --> 00:02:51,730
Zed Lib which you know it's incredibly

00:02:48,879 --> 00:02:53,950
slow but it's also an incredibly high

00:02:51,730 --> 00:02:55,420
ratio of compression so you know you get

00:02:53,950 --> 00:02:58,329
an awful lot of storage back for your

00:02:55,420 --> 00:03:01,090
buck with that there is l0 which I think

00:02:58,329 --> 00:03:03,040
is the default I can't quite remember to

00:03:01,090 --> 00:03:06,310
be honest you know which is incredibly

00:03:03,040 --> 00:03:09,730
fast but the the the ratio comparatively

00:03:06,310 --> 00:03:11,049
is is you know less and the reason why I

00:03:09,730 --> 00:03:15,700
can't remember which one's the default

00:03:11,049 --> 00:03:18,569
is because Zee standard is the new shiny

00:03:15,700 --> 00:03:22,449
hotness which is in tumbleweed since

00:03:18,569 --> 00:03:25,660
kernel 414 and actually I think it was

00:03:22,449 --> 00:03:27,099
back ported to sleaze 412 kernel as well

00:03:25,660 --> 00:03:30,669
so I think it's also in sleep in

00:03:27,099 --> 00:03:32,769
sleeping 15 it's incredibly fast and

00:03:30,669 --> 00:03:34,569
it's also an incredibly high ratio and

00:03:32,769 --> 00:03:36,579
in fact the whole thing is scalable so

00:03:34,569 --> 00:03:38,410
there's an extra tuning parameter and

00:03:36,579 --> 00:03:41,280
you can say I want this compression

00:03:38,410 --> 00:03:45,160
method and I want it you know value 3

00:03:41,280 --> 00:03:50,470
and there's actually a on the on the

00:03:45,160 --> 00:03:52,870
btrfs wiki there is a in a table kind of

00:03:50,470 --> 00:03:56,079
showing from Facebook because Facebook

00:03:52,870 --> 00:03:57,669
were using btrfs incredibly heavily of

00:03:56,079 --> 00:03:59,349
their metrics where they figured out

00:03:57,669 --> 00:04:01,329
like for them the sweet spot is like

00:03:59,349 --> 00:04:02,650
value 3 where like they're compressing

00:04:01,329 --> 00:04:04,840
everything really really quickly and

00:04:02,650 --> 00:04:07,329
getting a really good bang for their

00:04:04,840 --> 00:04:09,459
buck and I think that's what they've set

00:04:07,329 --> 00:04:13,269
the default value to be because they

00:04:09,459 --> 00:04:15,630
contributed that so yeah so btrfs is

00:04:13,269 --> 00:04:22,270
absolutely awesome it's you know just

00:04:15,630 --> 00:04:24,610
yeah but it's not perfect with any be

00:04:22,270 --> 00:04:26,200
tree based file system you end up with

00:04:24,610 --> 00:04:26,470
this especially with snapshots and all

00:04:26,200 --> 00:04:28,480
this

00:04:26,470 --> 00:04:30,790
wonderful stuff you end up with this

00:04:28,480 --> 00:04:32,350
lovely complication of you don't really

00:04:30,790 --> 00:04:34,450
necessarily know how much space you're

00:04:32,350 --> 00:04:36,190
using oh it gets a heck of a lot harder

00:04:34,450 --> 00:04:39,760
to think about how much space you're

00:04:36,190 --> 00:04:40,690
using you know as your snapshots are you

00:04:39,760 --> 00:04:42,280
know as you're making more of these

00:04:40,690 --> 00:04:44,860
snapshots and your snapshots are you

00:04:42,280 --> 00:04:46,240
know just containing the diffs of what's

00:04:44,860 --> 00:04:48,370
changed but when you look at the

00:04:46,240 --> 00:04:51,250
snapshot you see all of the files not

00:04:48,370 --> 00:04:53,470
just the dipped ones you know there's

00:04:51,250 --> 00:04:56,470
basically no way of really calculating

00:04:53,470 --> 00:04:58,300
accurately all of the discs in use

00:04:56,470 --> 00:05:00,790
unless you go into every single snapshot

00:04:58,300 --> 00:05:04,300
and count every single file kind of like

00:05:00,790 --> 00:05:06,310
d-u does but that means like DF doesn't

00:05:04,300 --> 00:05:08,050
do that so you run DF and it's just

00:05:06,310 --> 00:05:10,510
gonna look at like the current file

00:05:08,050 --> 00:05:12,970
system and say you know the coven's

00:05:10,510 --> 00:05:14,500
snapshots this big no idea about all

00:05:12,970 --> 00:05:18,040
that other copies you've got lurking in

00:05:14,500 --> 00:05:19,960
somewhere so yeah it's kind of you know

00:05:18,040 --> 00:05:21,250
kind of like Jenga all these different

00:05:19,960 --> 00:05:23,890
pieces of the file system were all

00:05:21,250 --> 00:05:25,870
stacked on top of each other and DF

00:05:23,890 --> 00:05:27,430
can't figure out which is the block that

00:05:25,870 --> 00:05:33,490
the whole thing would fall apart if it

00:05:27,430 --> 00:05:35,500
pulled it out so don't use DF on btrfs

00:05:33,490 --> 00:05:38,890
or if you do use it just expect it to be

00:05:35,500 --> 00:05:41,140
lying to you there are there are three

00:05:38,890 --> 00:05:42,820
different options btrfs because you know

00:05:41,140 --> 00:05:44,350
it's such an awesome file system if you

00:05:42,820 --> 00:05:47,950
can do something right once you can do

00:05:44,350 --> 00:05:52,120
it right three different times the basic

00:05:47,950 --> 00:05:54,520
one is beat EFS file systems show which

00:05:52,120 --> 00:05:55,630
is like the absolutely minimum data like

00:05:54,520 --> 00:05:57,070
it just says you know you have a file

00:05:55,630 --> 00:06:01,419
system it's this big

00:05:57,070 --> 00:06:03,729
roughly beat EFS file system DF gives

00:06:01,419 --> 00:06:05,800
you a layout much more similar to DF

00:06:03,729 --> 00:06:09,460
with a little bit of extra information

00:06:05,800 --> 00:06:11,260
about beat EFS metadata and btrfs file

00:06:09,460 --> 00:06:13,000
system usage just like dumps out a huge

00:06:11,260 --> 00:06:14,350
amount of statistics and I have to be

00:06:13,000 --> 00:06:16,270
honest I don't understand what half of

00:06:14,350 --> 00:06:19,419
the mean so I don't use that one much

00:06:16,270 --> 00:06:21,580
but you know beat EFS file system DF

00:06:19,419 --> 00:06:22,900
makes it clear when you're running low

00:06:21,580 --> 00:06:24,250
on disk space so if you're using

00:06:22,900 --> 00:06:27,190
monitoring scripts you're looking at

00:06:24,250 --> 00:06:31,620
that stop counting on DF if you're using

00:06:27,190 --> 00:06:31,620
beat EFS use one of these two instead

00:06:32,280 --> 00:06:36,220
because if you don't want to just keep

00:06:34,240 --> 00:06:38,020
on piling on more into your system to

00:06:36,220 --> 00:06:39,250
the point where you know it's completely

00:06:38,020 --> 00:06:41,079
overloaded and you can't even fit this

00:06:39,250 --> 00:06:44,299
picture on this slide

00:06:41,079 --> 00:06:45,589
and you can you know if you're not

00:06:44,299 --> 00:06:48,469
paying attention you know dis face you

00:06:45,589 --> 00:06:50,029
know you can run out of space especially

00:06:48,469 --> 00:06:53,329
on the Suzy distributions that we have

00:06:50,029 --> 00:06:56,419
snapper installed and really quite often

00:06:53,329 --> 00:06:58,249
it's not btrfs fault thanks if not be

00:06:56,419 --> 00:07:01,159
TFS his fault of a narrow space you know

00:06:58,249 --> 00:07:04,849
I blame snapper but the snapper

00:07:01,159 --> 00:07:09,679
developer if he's here Alvin no good

00:07:04,849 --> 00:07:11,329
he'd be blaming me if he was but it's

00:07:09,679 --> 00:07:13,279
got a heck of a lot better in the last

00:07:11,329 --> 00:07:16,879
few years so any installation that is a

00:07:13,279 --> 00:07:19,489
Slee 12 or later so any 15 installations

00:07:16,879 --> 00:07:21,349
any new tumbleweed installation will not

00:07:19,489 --> 00:07:22,519
have timeline snapshots enabled by

00:07:21,349 --> 00:07:24,199
default so you're not gonna constantly

00:07:22,519 --> 00:07:25,999
just be taking snapshots just for the

00:07:24,199 --> 00:07:29,509
hell of taking snapshots on your file

00:07:25,999 --> 00:07:30,889
system and so yeah that number gets

00:07:29,509 --> 00:07:33,189
smaller therefore you're carrying their

00:07:30,889 --> 00:07:35,179
stiffs therefore you're using less space

00:07:33,189 --> 00:07:37,729
and when you even when you are using

00:07:35,179 --> 00:07:40,609
that space up there is no spacer where

00:07:37,729 --> 00:07:43,069
cleanup it's the default in regular

00:07:40,609 --> 00:07:44,989
installations but if you were an old

00:07:43,069 --> 00:07:48,709
installation anything later than sort of

00:07:44,989 --> 00:07:50,449
2016 go have a look at our bins blog he

00:07:48,709 --> 00:07:59,929
posted how to turn it on it's one

00:07:50,449 --> 00:08:01,309
command it's really useful yep sorry my

00:07:59,929 --> 00:08:06,589
slide deck is broken so I have to read

00:08:01,309 --> 00:08:08,329
it this way yeah so if you've run out of

00:08:06,589 --> 00:08:10,399
space with btrfs

00:08:08,329 --> 00:08:13,269
it needs beauty FS needs a little bit of

00:08:10,399 --> 00:08:16,669
space in order to be able to delete data

00:08:13,269 --> 00:08:19,939
and so you know there you have a very

00:08:16,669 --> 00:08:21,469
simple command to run to effectively

00:08:19,939 --> 00:08:22,759
reallocate and balance the space so

00:08:21,469 --> 00:08:27,229
there's a little bit of room left so you

00:08:22,759 --> 00:08:29,599
can start deleting stuff so you can then

00:08:27,229 --> 00:08:31,069
start with moving snap of snapshots just

00:08:29,599 --> 00:08:32,300
using the standard snapper commands and

00:08:31,069 --> 00:08:33,680
you know that will clear up all your

00:08:32,300 --> 00:08:36,009
free space everything will work fine

00:08:33,680 --> 00:08:41,180
after that

00:08:36,009 --> 00:08:45,230
most of the time sooner or later some

00:08:41,180 --> 00:08:47,240
file systems get a break and I'm btrfs

00:08:45,230 --> 00:08:48,949
it has a habit of appearing to be broken

00:08:47,240 --> 00:08:51,350
more often because the data is being

00:08:48,949 --> 00:08:52,730
checked summed btrfs is gonna know when

00:08:51,350 --> 00:08:54,050
your disk is starting writing nonsense

00:08:52,730 --> 00:08:57,800
data to your

00:08:54,050 --> 00:08:59,600
and btrfs is gonna stop mounting that so

00:08:57,800 --> 00:09:01,280
you get all these wonderful error

00:08:59,600 --> 00:09:03,170
messages like your disk is broken or

00:09:01,280 --> 00:09:05,030
like your file systems broken it's not

00:09:03,170 --> 00:09:07,820
normally be TFS fault it's normally

00:09:05,030 --> 00:09:09,920
normally the disk underneath so don't

00:09:07,820 --> 00:09:11,030
panic you know just because it's not

00:09:09,920 --> 00:09:13,430
mounting doesn't mean it's totally

00:09:11,030 --> 00:09:14,480
broken doesn't mean it's totally you

00:09:13,430 --> 00:09:18,110
know beyond repair

00:09:14,480 --> 00:09:21,350
and whatever you do do not run btrfs FS

00:09:18,110 --> 00:09:22,910
check - - repair it's like the worst

00:09:21,350 --> 00:09:25,130
thing you could possibly do because in

00:09:22,910 --> 00:09:27,230
that case it effectively ignores

00:09:25,130 --> 00:09:28,760
whatever the b-tree saying and tries to

00:09:27,230 --> 00:09:30,740
scan everything around it generally

00:09:28,760 --> 00:09:32,720
makes a complete pig's ear of it and

00:09:30,740 --> 00:09:33,640
 it up more than whatever was wrong

00:09:32,720 --> 00:09:36,920
in the first place

00:09:33,640 --> 00:09:40,010
so that is the absolute command of last

00:09:36,920 --> 00:09:42,320
resort and unfortunately if you run like

00:09:40,010 --> 00:09:44,510
btrfs dot FF check out what so FF sector

00:09:42,320 --> 00:09:48,350
PT FS it's the first thing it recommends

00:09:44,510 --> 00:09:52,550
so ignore that don't do it instead run

00:09:48,350 --> 00:09:54,230
scrub running to scrub will check all of

00:09:52,550 --> 00:09:57,560
that at the height highest level

00:09:54,230 --> 00:09:58,970
possible 99.9% of the time scrub will

00:09:57,560 --> 00:10:00,320
fix the problem your system will start

00:09:58,970 --> 00:10:02,480
mounting everything's fine

00:10:00,320 --> 00:10:04,790
if it happens again very soon after

00:10:02,480 --> 00:10:07,220
you're gonna realize he's braking so you

00:10:04,790 --> 00:10:09,020
know it's it's the easy lightweight safe

00:10:07,220 --> 00:10:11,030
way of checking everything it's totally

00:10:09,020 --> 00:10:13,670
data safe you're not risking any data

00:10:11,030 --> 00:10:15,860
when you're doing it as another kind of

00:10:13,670 --> 00:10:19,220
second option if the the root be tree

00:10:15,860 --> 00:10:21,890
has gotta stuff corrupted somehow in

00:10:19,220 --> 00:10:25,810
whatever way there is always a second

00:10:21,890 --> 00:10:28,580
beat be tree lurking on the file system

00:10:25,810 --> 00:10:30,770
and you can just mount your system using

00:10:28,580 --> 00:10:33,200
use backup root and we used to be called

00:10:30,770 --> 00:10:34,340
BT FS recovery and that will get the

00:10:33,200 --> 00:10:35,780
system up and running and actually

00:10:34,340 --> 00:10:39,290
restore the system to a fully working

00:10:35,780 --> 00:10:41,000
state since I realized those two

00:10:39,290 --> 00:10:42,740
commands fix almost everything every

00:10:41,000 --> 00:10:45,610
issue I've had with BT FS has been fixed

00:10:42,740 --> 00:10:48,500
by those two commands with one exception

00:10:45,610 --> 00:10:51,590
so generally speaking that's all that

00:10:48,500 --> 00:10:53,930
yeah all you ever need to do but I used

00:10:51,590 --> 00:10:57,020
to work in QA so you know some I've got

00:10:53,930 --> 00:10:58,790
incredibly bad luck and sooner or later

00:10:57,020 --> 00:11:00,410
you might find something more

00:10:58,790 --> 00:11:02,440
interesting that so that doesn't fix it

00:11:00,410 --> 00:11:06,230
you found something that's bug worthy

00:11:02,440 --> 00:11:06,950
please run btrfs check not repair just

00:11:06,230 --> 00:11:10,040
check

00:11:06,950 --> 00:11:11,720
save the logs and use it to file a bug

00:11:10,040 --> 00:11:12,950
you know our kernel guys would like to

00:11:11,720 --> 00:11:16,910
know what the hell happened and how the

00:11:12,950 --> 00:11:19,970
hell that went horribly wrong and btrfs

00:11:16,910 --> 00:11:21,290
restore basically scans through your

00:11:19,970 --> 00:11:23,779
file system of scans through your disk

00:11:21,290 --> 00:11:26,630
and data and recovers everything it can

00:11:23,779 --> 00:11:27,470
to another device at this point you know

00:11:26,630 --> 00:11:29,449
you've found something interesting

00:11:27,470 --> 00:11:31,160
enough it's probably a good idea to take

00:11:29,449 --> 00:11:33,290
a good backup anyway even if you do

00:11:31,160 --> 00:11:37,790
manage to fix it in place so my advice

00:11:33,290 --> 00:11:39,139
would be to look that btrfs rescue has a

00:11:37,790 --> 00:11:42,500
bunch of commands right now it's for

00:11:39,139 --> 00:11:45,740
it's these for these are fixes for

00:11:42,500 --> 00:11:48,920
in-place repair of the common issues

00:11:45,740 --> 00:11:50,930
that BT FS does occasionally get these

00:11:48,920 --> 00:11:52,880
are mostly harmless they're mostly safe

00:11:50,930 --> 00:11:55,250
to run they very very very very rarely

00:11:52,880 --> 00:11:58,190
could do damage to your system so it's a

00:11:55,250 --> 00:12:02,089
far safer than the running BT efforts

00:11:58,190 --> 00:12:04,670
were check - - repair so yeah have a

00:12:02,089 --> 00:12:06,860
look at that run it you know it really I

00:12:04,670 --> 00:12:08,899
would run them kind of in this order the

00:12:06,860 --> 00:12:11,870
last time I had a system that wasn't

00:12:08,899 --> 00:12:14,120
booting it was that one that fixed it so

00:12:11,870 --> 00:12:15,709
I've run that well I didn't I've never

00:12:14,120 --> 00:12:18,649
run that one who talked it didn't exist

00:12:15,709 --> 00:12:20,329
when that was broken and this one just

00:12:18,649 --> 00:12:21,829
takes forever because it's going to all

00:12:20,329 --> 00:12:24,440
of the chunks and recovering them in a

00:12:21,829 --> 00:12:27,050
very very slow period but I know a

00:12:24,440 --> 00:12:28,940
friend of mine had an issue with that so

00:12:27,050 --> 00:12:31,760
it's there it's kind of the last last

00:12:28,940 --> 00:12:35,180
resort and if that doesn't fix it then

00:12:31,760 --> 00:12:38,480
just pray because the only choice you

00:12:35,180 --> 00:12:41,300
have left is backing up again if you

00:12:38,480 --> 00:12:43,940
haven't done it earlier and then maybe

00:12:41,300 --> 00:12:47,930
think about running btrfs check repair

00:12:43,940 --> 00:12:48,620
then it might help possibly or at least

00:12:47,930 --> 00:12:50,269
if it's broken

00:12:48,620 --> 00:12:53,269
it'll be really broken and you'll feel

00:12:50,269 --> 00:12:55,600
better about it and that's it thank you

00:12:53,269 --> 00:12:55,600
very much

00:13:24,860 --> 00:13:27,860
yep

00:13:55,849 --> 00:14:02,339
yeah so the question was a case of the

00:13:59,399 --> 00:14:04,169
the was it so the root the beach the

00:14:02,339 --> 00:14:05,489
beach reboot having an invalid checksum

00:14:04,169 --> 00:14:05,819
the superblock having an invalid check

00:14:05,489 --> 00:14:08,609
sir

00:14:05,819 --> 00:14:10,919
so that will be fixed most of the time

00:14:08,609 --> 00:14:12,089
by the use backup route so the use

00:14:10,919 --> 00:14:13,470
backup route will try and mount the

00:14:12,089 --> 00:14:16,049
system by searching through the file

00:14:13,470 --> 00:14:19,379
system to find that backup copy of it's

00:14:16,049 --> 00:14:22,579
it's yeah of its route which will fix it

00:14:19,379 --> 00:14:27,029
most of the time one of the four beat

00:14:22,579 --> 00:14:29,999
btrfs rescue commands does fix that

00:14:27,029 --> 00:14:31,679
weird edge case where the first the the

00:14:29,999 --> 00:14:33,179
root is so broken that it can't find the

00:14:31,679 --> 00:14:35,279
reference to the second root and then it

00:14:33,179 --> 00:14:36,509
doesn't know what to do anymore so

00:14:35,279 --> 00:14:37,919
that's yeah that's I think that's a

00:14:36,509 --> 00:14:40,679
chunk recover that's the one that takes

00:14:37,919 --> 00:14:43,199
forever at the end but yeah one of those

00:14:40,679 --> 00:14:45,059
one of those for rescue commands should

00:14:43,199 --> 00:14:47,789
fix it and if it doesn't you should have

00:14:45,059 --> 00:14:49,259
already taken your nice log and you know

00:14:47,789 --> 00:14:52,349
the BT FS developers will add another

00:14:49,259 --> 00:14:54,599
rescue command you know those basically

00:14:52,349 --> 00:14:57,029
whenever there is an edge case you end

00:14:54,599 --> 00:14:58,979
up with a new btrfs rescue command that

00:14:57,029 --> 00:15:01,559
you know they've made right now this for

00:14:58,979 --> 00:15:09,440
six months ago there was three it's not

00:15:01,559 --> 00:15:12,539
that bad so any other questions yeah

00:15:09,440 --> 00:15:12,539
[Music]

00:15:14,119 --> 00:15:18,059
yeah what's my take on RedHat stopping

00:15:16,289 --> 00:15:19,439
but supporting butter FS well they've

00:15:18,059 --> 00:15:21,349
stopped supporting but Jeffress because

00:15:19,439 --> 00:15:23,879
they didn't know how to develop on it

00:15:21,349 --> 00:15:27,599
and now they're trying to do all those

00:15:23,879 --> 00:15:29,639
features in ZFS or so XFS and they're

00:15:27,599 --> 00:15:31,619
gonna hit all of the same complications

00:15:29,639 --> 00:15:34,439
and confusions that we have in bt FS

00:15:31,619 --> 00:15:35,819
like these most of these are the nature

00:15:34,439 --> 00:15:37,439
of the beast when you're trying to build

00:15:35,819 --> 00:15:39,319
a file system that's also a volume

00:15:37,439 --> 00:15:42,599
manager that can do all this other stuff

00:15:39,319 --> 00:15:45,209
so I don't you know it's their decision

00:15:42,599 --> 00:15:50,599
I think there's a perfectly good option

00:15:45,209 --> 00:15:50,599
that they should have stuck with yes

00:15:52,059 --> 00:15:56,299
no I would not recommend a separate home

00:15:54,529 --> 00:16:07,189
position with it with X of s but you

00:15:56,299 --> 00:16:09,470
know I do yeah I would so yeah I would

00:16:07,189 --> 00:16:13,009
recommend having everything in a single

00:16:09,470 --> 00:16:15,290
large route a single large ETFs

00:16:13,009 --> 00:16:17,359
partition using sub volumes that's

00:16:15,290 --> 00:16:18,859
that's my way of doing it myself I just

00:16:17,359 --> 00:16:21,259
take my big disk I did install

00:16:18,859 --> 00:16:22,790
everything on it and if I have secondary

00:16:21,259 --> 00:16:26,059
disks I might end up with a different

00:16:22,790 --> 00:16:35,449
file system but generally I'm btrfs all

00:16:26,059 --> 00:16:37,040
of the way everywhere yep and res with

00:16:35,449 --> 00:16:38,689
beat EFS send and receive I haven't done

00:16:37,040 --> 00:16:40,939
one for ages I just copy it to a

00:16:38,689 --> 00:16:44,179
different machine that's all that's an

00:16:40,939 --> 00:16:46,160
awesome command it really is yeah I

00:16:44,179 --> 00:16:48,139
avoid avoid reinstallations as much as I

00:16:46,160 --> 00:16:50,540
can and unfortunately with the recent

00:16:48,139 --> 00:16:52,899
changes I made with var you know I've

00:16:50,540 --> 00:16:54,829
had to do that like once or twice but

00:16:52,899 --> 00:16:56,629
yeah because we changed the subform

00:16:54,829 --> 00:17:00,949
layout but that's that's another topic

00:16:56,629 --> 00:17:03,279
and I'm over the over time so good thank

00:17:00,949 --> 00:17:03,279

YouTube URL: https://www.youtube.com/watch?v=8YUC-r1aXAc


