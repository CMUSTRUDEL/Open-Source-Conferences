Title: openSUSE Conference 2018 - Saltboot - Salt managed PXE boot
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1942-saltboot-salt-managed-pxe-boot



In the time of clouds and virtual computing it seems, there is no longer space for a large real-hardware-based OS deployments. But what schools use in their classrooms? What is beneath ATMs, info kiosks, cash registers? For there devices real network OS deployment is still crucial.
This talk is about exactly that. Well known network PXE boot, but upgraded with Salt, a modern configuration management engine, to automate and secure the process.
We will go from basic setup, through salt integration in netboot initrd and to salt states to make all of this possible and more.

In the time of clouds and virtual computing it seems, there is no longer space for a large real-hardware-based OS deployments. But what schools use in their classrooms? What is beneath ATMs, info kiosks, cash registers? For there devices real network OS deployment is still crucial.
This talk is about exactly that. Well known network PXE boot, but upgraded with Salt, a modern configuration management engine, to automate and secure the process.
We will go from basic setup, through salt integration in netboot initrd and to salt states to make all of this possible and more.

Ondrej Holecek
Captions: 
	00:00:05,770 --> 00:00:13,610
okay so I would like to welcome you on

00:00:08,690 --> 00:00:18,820
my talk about this salt managed it's you

00:00:13,610 --> 00:00:21,920
keep it for later thanks okay

00:00:18,820 --> 00:00:23,930
my name is Andre Hangzhou holy check I

00:00:21,920 --> 00:00:27,370
worked as a software developer in Souza

00:00:23,930 --> 00:00:30,140
for roughly it will be ten years now and

00:00:27,370 --> 00:00:34,310
this what I will be talking about is

00:00:30,140 --> 00:00:38,570
some introduction or some describing the

00:00:34,310 --> 00:00:43,280
process which we implemented in uh in

00:00:38,570 --> 00:00:48,170
our in our product with Susan so what

00:00:43,280 --> 00:00:49,970
well the idea now it's I'll just talk

00:00:48,170 --> 00:00:51,770
briefly about what the network boot

00:00:49,970 --> 00:00:53,800
itself is that's the easy part

00:00:51,770 --> 00:00:56,780
I guess everybody knows what is this

00:00:53,800 --> 00:00:59,000
then I will talk about a little bit

00:00:56,780 --> 00:01:01,190
about salt mainly the architecture or

00:00:59,000 --> 00:01:03,410
all the bits and pieces we need to

00:01:01,190 --> 00:01:07,220
implement the solution we will I will

00:01:03,410 --> 00:01:08,900
discuss later I guess that it will take

00:01:07,220 --> 00:01:11,479
a little more time because I don't think

00:01:08,900 --> 00:01:14,600
it's all this is universally known and

00:01:11,479 --> 00:01:19,460
the last part is the actual solution the

00:01:14,600 --> 00:01:21,310
fun bits about the salt boot so let's

00:01:19,460 --> 00:01:24,490
start with the ready network boot

00:01:21,310 --> 00:01:28,040
everybody knows I guess what is this

00:01:24,490 --> 00:01:31,159
there is this definition I found

00:01:28,040 --> 00:01:33,260
somewhere on Google but basically you

00:01:31,159 --> 00:01:35,810
have one server you have one client

00:01:33,260 --> 00:01:38,780
machine you connect them using network

00:01:35,810 --> 00:01:42,799
you have some services on a server you

00:01:38,780 --> 00:01:44,659
have some you boot up the client and you

00:01:42,799 --> 00:01:46,880
don't have to have any installed system

00:01:44,659 --> 00:01:51,439
on the client it will just it will just

00:01:46,880 --> 00:01:52,549
work what's the purpose some 20 30 years

00:01:51,439 --> 00:01:55,159
ago I guess

00:01:52,549 --> 00:01:58,220
same clients were the thing so it was

00:01:55,159 --> 00:02:01,790
one amazed one use case you don't have

00:01:58,220 --> 00:02:05,299
any hard drive nothing you just start on

00:02:01,790 --> 00:02:07,970
the client really expensive hardware and

00:02:05,299 --> 00:02:11,029
every everything is done on a on a

00:02:07,970 --> 00:02:12,910
server itself the thing I will be

00:02:11,029 --> 00:02:15,490
discussing today is mainly the

00:02:12,910 --> 00:02:18,670
provisioning when you have plain hard

00:02:15,490 --> 00:02:21,730
drive you just plug plug in the computer

00:02:18,670 --> 00:02:26,050
start it up and somehow it will get

00:02:21,730 --> 00:02:29,230
installed manually or automatically so

00:02:26,050 --> 00:02:32,350
briefly how this work we have BIOS you

00:02:29,230 --> 00:02:35,650
Fe you enable pixie boot pixie boots

00:02:32,350 --> 00:02:38,440
using the DHCP to down to get the

00:02:35,650 --> 00:02:41,400
address we download the NBP which is

00:02:38,440 --> 00:02:46,090
network which is network boot program

00:02:41,400 --> 00:02:50,590
write a 50 p and we and it is executed

00:02:46,090 --> 00:02:52,540
and it would he is right okay I'll just

00:02:50,590 --> 00:02:55,960
go through the specifics little little

00:02:52,540 --> 00:03:01,390
more in a detail pixie boot I don't know

00:02:55,960 --> 00:03:04,200
if I guess everybody what just stands

00:03:01,390 --> 00:03:07,090
for pre-boot execution environment

00:03:04,200 --> 00:03:09,580
originally it was part of the firmware

00:03:07,090 --> 00:03:12,010
of your network heart now network cards

00:03:09,580 --> 00:03:18,640
are usually on the motherboard so it's

00:03:12,010 --> 00:03:20,440
part of the ufi bios 8 so it's

00:03:18,640 --> 00:03:22,330
client-side it's on the machine you want

00:03:20,440 --> 00:03:25,420
to you want to start you want to

00:03:22,330 --> 00:03:29,530
provision on the server side to make it

00:03:25,420 --> 00:03:32,680
work it was it depends on DHCP and this

00:03:29,530 --> 00:03:35,290
DHCP you need to have some specific bits

00:03:32,680 --> 00:03:37,150
enable it I've write it twice

00:03:35,290 --> 00:03:39,430
technically the same thing but it's

00:03:37,150 --> 00:03:45,750
enough important enough to mention it

00:03:39,430 --> 00:03:48,550
twice DHCP with network would support

00:03:45,750 --> 00:03:51,070
you have usual configuration when you

00:03:48,550 --> 00:03:54,090
install the package you must must make

00:03:51,070 --> 00:03:58,720
make sure that you add two is two

00:03:54,090 --> 00:04:03,340
highlighted bits one is the server name

00:03:58,720 --> 00:04:06,760
or next server you can either use domain

00:04:03,340 --> 00:04:09,850
name or hostname or IP address depends

00:04:06,760 --> 00:04:13,239
we do have DNS server or not and file

00:04:09,850 --> 00:04:17,739
name the file name points to the and VP

00:04:13,239 --> 00:04:20,950
which in our case is pick Co Linux you

00:04:17,739 --> 00:04:23,440
can just put plain host file name or you

00:04:20,950 --> 00:04:24,450
can adopt some directory if you have it

00:04:23,440 --> 00:04:26,670
in sin

00:04:24,450 --> 00:04:31,170
some different locations they will get

00:04:26,670 --> 00:04:34,440
to that I on a ft FTP and pixel in oxide

00:04:31,170 --> 00:04:37,100
TFTP you can use generic configuration

00:04:34,440 --> 00:04:41,190
as you install package from the

00:04:37,100 --> 00:04:44,850
repositories on a pixel init pixel is

00:04:41,190 --> 00:04:47,490
part of the six Linux package it is so

00:04:44,850 --> 00:04:49,770
all the all the bits are installed in

00:04:47,490 --> 00:04:52,800
user shares syslinux P syslinux

00:04:49,770 --> 00:04:58,350
directory from that you either copy or

00:04:52,800 --> 00:05:05,280
do a link to do default is serve the FTP

00:04:58,350 --> 00:05:07,800
wood directory if it depends if you have

00:05:05,280 --> 00:05:11,700
TFTP yo installed to follow the links or

00:05:07,800 --> 00:05:15,660
not either copy or link it axilla nukes

00:05:11,700 --> 00:05:19,770
itself is has a configuration of

00:05:15,660 --> 00:05:22,440
external CFG and you know their you

00:05:19,770 --> 00:05:24,750
specify all the options you have and the

00:05:22,440 --> 00:05:28,500
excel in aqsa since it's executed on the

00:05:24,750 --> 00:05:31,380
client machine as you own on this

00:05:28,500 --> 00:05:34,320
example there is one for Ned wood and

00:05:31,380 --> 00:05:36,720
one for local boot local Buddhist just

00:05:34,320 --> 00:05:40,970
boosted from hard drive net boot is to

00:05:36,720 --> 00:05:45,780
install to reduce this network who think

00:05:40,970 --> 00:05:51,210
you specify kernel file name and command

00:05:45,780 --> 00:05:56,220
line or the specific IP a pencil is used

00:05:51,210 --> 00:05:59,160
that XCX knows to append the IP address

00:05:56,220 --> 00:06:04,440
of the server you are installing from to

00:05:59,160 --> 00:06:07,530
this command line ok and the last part

00:06:04,440 --> 00:06:09,090
the last part is with you will need for

00:06:07,530 --> 00:06:11,150
deployment is of course some kind of

00:06:09,090 --> 00:06:14,340
boot image or boot instructions I

00:06:11,150 --> 00:06:19,950
already mentioned the kernel you can use

00:06:14,340 --> 00:06:23,700
the generic now from distribution and in

00:06:19,950 --> 00:06:25,890
it are D this is there may be some

00:06:23,700 --> 00:06:29,750
differences between nhr give you used

00:06:25,890 --> 00:06:32,120
from when you're booting a system it's a

00:06:29,750 --> 00:06:37,280
already in system and when you are using

00:06:32,120 --> 00:06:39,440
this netboot Netaji and this is also one

00:06:37,280 --> 00:06:43,340
of the place with which we will be

00:06:39,440 --> 00:06:47,120
changing to incorporate our salt salt

00:06:43,340 --> 00:06:52,550
support all of these are downloaded by a

00:06:47,120 --> 00:06:56,360
TFTP and then execute it as as specified

00:06:52,550 --> 00:06:59,180
in the configuration so briefly

00:06:56,360 --> 00:07:04,480
oh really fast interaction to the

00:06:59,180 --> 00:07:08,480
network boot now let's talk to us also

00:07:04,480 --> 00:07:12,050
there about there were many talks many

00:07:08,480 --> 00:07:15,440
you just today or yesterday you probably

00:07:12,050 --> 00:07:18,470
had salt numerous times it is currently

00:07:15,440 --> 00:07:22,130
the thing in Sousa

00:07:18,470 --> 00:07:25,630
so what is this salt its salt it's

00:07:22,130 --> 00:07:27,590
produced by salts tech company they have

00:07:25,630 --> 00:07:29,630
Enterprise version and then they have

00:07:27,590 --> 00:07:32,480
open-source version

00:07:29,630 --> 00:07:37,880
I'm using only the open-source features

00:07:32,480 --> 00:07:41,240
here this description is taken from

00:07:37,880 --> 00:07:42,710
their part their part well if you want

00:07:41,240 --> 00:07:47,450
often vary with the salt itself maybe

00:07:42,710 --> 00:07:50,630
you know a simple package a chef and

00:07:47,450 --> 00:07:54,160
these similar things basically is used

00:07:50,630 --> 00:08:00,010
for a remote management or configuration

00:07:54,160 --> 00:08:03,620
of machines but there are some specifics

00:08:00,010 --> 00:08:08,900
for salt which we use in our example in

00:08:03,620 --> 00:08:12,500
later in this presentation and it is it

00:08:08,900 --> 00:08:17,380
is event driven that is allows remote

00:08:12,500 --> 00:08:22,270
execution and it's automation of

00:08:17,380 --> 00:08:24,580
configuration the event driven because

00:08:22,270 --> 00:08:27,080
was either

00:08:24,580 --> 00:08:29,420
vendek's cold will be executed when the

00:08:27,080 --> 00:08:32,000
coldest executed orders

00:08:29,420 --> 00:08:34,910
on the machine client machine we need to

00:08:32,000 --> 00:08:38,720
know some how to let server know that -

00:08:34,910 --> 00:08:41,390
yeah nh10 move remote execution that's

00:08:38,720 --> 00:08:45,560
true because we need to execute from

00:08:41,390 --> 00:08:48,140
some server a command on on client

00:08:45,560 --> 00:08:50,150
configuration automation because we want

00:08:48,140 --> 00:08:57,290
this deployment in our example to be

00:08:50,150 --> 00:09:01,550
automated how the salt looks like so the

00:08:57,290 --> 00:09:07,310
center the center of salt is salt master

00:09:01,550 --> 00:09:11,150
the central node everything important is

00:09:07,310 --> 00:09:14,420
happening on this this machine it

00:09:11,150 --> 00:09:16,490
contains the configuration of all this

00:09:14,420 --> 00:09:20,390
all your state's all the files you need

00:09:16,490 --> 00:09:23,770
are contained there it manages all the

00:09:20,390 --> 00:09:25,910
network of clients and manage

00:09:23,770 --> 00:09:30,140
identification whether you trust them or

00:09:25,910 --> 00:09:33,620
not as I was mentioning the clients in

00:09:30,140 --> 00:09:38,230
salt they are called minions and this is

00:09:33,620 --> 00:09:41,240
basically the managed system there are

00:09:38,230 --> 00:09:45,890
they are authenticated using the public

00:09:41,240 --> 00:09:48,980
key cryptography and to the master the

00:09:45,890 --> 00:09:53,960
communication is using usually 2 0 mq

00:09:48,980 --> 00:09:56,150
boss it's encrypted and one once you

00:09:53,960 --> 00:10:00,350
approve that you know this minion during

00:09:56,150 --> 00:10:07,160
the registration you can rewrite it it's

00:10:00,350 --> 00:10:09,830
secure the communication between I'm on

00:10:07,160 --> 00:10:11,600
here I mentioned that you need that you

00:10:09,830 --> 00:10:14,720
have at least these two parts master

00:10:11,600 --> 00:10:17,000
manana there are some special

00:10:14,720 --> 00:10:19,550
circumstances when you can run minion

00:10:17,000 --> 00:10:25,250
even with the out master it calls master

00:10:19,550 --> 00:10:27,410
lies yawns but this is the possibility

00:10:25,250 --> 00:10:30,110
that you can use for example salt even

00:10:27,410 --> 00:10:32,150
to manage your your own local machine

00:10:30,110 --> 00:10:35,260
without having all the infrastructure

00:10:32,150 --> 00:10:41,890
but it's one of the feature

00:10:35,260 --> 00:10:46,570
not usually used next all the things

00:10:41,890 --> 00:10:50,940
that salt can do is in different it's

00:10:46,570 --> 00:10:50,940
called these different purposes and it's

00:10:51,540 --> 00:10:58,030
in between different modules okay so we

00:10:55,810 --> 00:11:00,850
have one one of these this execution

00:10:58,030 --> 00:11:05,380
modules this execution modules so just

00:11:00,850 --> 00:11:07,630
do they are SS executing command there

00:11:05,380 --> 00:11:10,690
for example make file up and find

00:11:07,630 --> 00:11:12,550
something to the file delete files it

00:11:10,690 --> 00:11:15,910
does not check whether it is it's

00:11:12,550 --> 00:11:19,390
already configured or not if the

00:11:15,910 --> 00:11:22,750
condition if there are like a prison

00:11:19,390 --> 00:11:26,160
plate file already exists or already

00:11:22,750 --> 00:11:30,130
contains what you want it just do it

00:11:26,160 --> 00:11:34,170
when you want to check it when you want

00:11:30,130 --> 00:11:36,850
to have decorative for example a

00:11:34,170 --> 00:11:40,450
configuration of the service system then

00:11:36,850 --> 00:11:43,240
you have salt State in salt states you

00:11:40,450 --> 00:11:46,120
represent how you wish your system to

00:11:43,240 --> 00:11:49,470
see to appear so for example I won't

00:11:46,120 --> 00:11:52,750
have configured HTTP or in our case the

00:11:49,470 --> 00:11:55,930
DHCP I just specify that I have this

00:11:52,750 --> 00:11:58,810
DHCP configuration and I want it on this

00:11:55,930 --> 00:12:02,320
minion the DHCP configuration looks like

00:11:58,810 --> 00:12:06,550
this you specify it in this salt state

00:12:02,320 --> 00:12:09,000
and then salt when it is executing you

00:12:06,550 --> 00:12:12,040
can be sure that it at least first try

00:12:09,000 --> 00:12:14,290
to see if the configuration is as you

00:12:12,040 --> 00:12:18,520
expect and if it's not it will configure

00:12:14,290 --> 00:12:22,000
it using the execution modules but salt

00:12:18,520 --> 00:12:24,100
states itself are mainly for the

00:12:22,000 --> 00:12:31,120
description of the system how you want

00:12:24,100 --> 00:12:34,690
it to to appear this is two basic things

00:12:31,120 --> 00:12:38,320
how to configure a system now if you

00:12:34,690 --> 00:12:41,970
want to share some data between between

00:12:38,320 --> 00:12:41,970
these minions and

00:12:42,120 --> 00:12:51,160
master dot ways this is the pillars

00:12:46,589 --> 00:12:53,800
pilars is the thing when you want when

00:12:51,160 --> 00:12:56,050
you have a data on a server and you want

00:12:53,800 --> 00:13:01,420
to distribute it to the minions they're

00:12:56,050 --> 00:13:03,250
considered secure they are encrypted bit

00:13:01,420 --> 00:13:05,560
speaking even between minions so if you

00:13:03,250 --> 00:13:08,110
have the Lars for you have pillar for

00:13:05,560 --> 00:13:14,050
some specific minion other minions can

00:13:08,110 --> 00:13:16,990
see them and the the minion can't change

00:13:14,050 --> 00:13:20,649
it you can change it only manually

00:13:16,990 --> 00:13:22,990
usually only manually on the server now

00:13:20,649 --> 00:13:27,610
of course some workarounds about this

00:13:22,990 --> 00:13:29,199
but usually just when you connect menu

00:13:27,610 --> 00:13:33,240
and you don't have any support States

00:13:29,199 --> 00:13:38,259
minion can't change it change the plus

00:13:33,240 --> 00:13:41,550
when you want data from the minion to

00:13:38,259 --> 00:13:46,889
get to the salt master you use cranes

00:13:41,550 --> 00:13:49,389
drains are for example Hardware specific

00:13:46,889 --> 00:13:51,339
order details about the hardware when

00:13:49,389 --> 00:13:53,199
the minion registers it sends it's the

00:13:51,339 --> 00:13:55,930
CPU architecture how much memory it has

00:13:53,199 --> 00:13:58,839
IP addresses and so on and it sends it

00:13:55,930 --> 00:14:04,930
back to the master so you can evaluate

00:13:58,839 --> 00:14:07,420
them later in you know or on essentially

00:14:04,930 --> 00:14:10,029
you can you see what machines have any

00:14:07,420 --> 00:14:15,120
characteristics or Hardware details or

00:14:10,029 --> 00:14:15,120
everything you want the thing is that

00:14:15,600 --> 00:14:22,959
these the because menu can change it you

00:14:19,449 --> 00:14:28,060
may or may not trust and because you can

00:14:22,959 --> 00:14:31,449
they can be fabricated or you know it's

00:14:28,060 --> 00:14:34,720
you know should not not you should trust

00:14:31,449 --> 00:14:42,579
only then there that that's grains you

00:14:34,720 --> 00:14:46,089
know that they are correct okay one of

00:14:42,579 --> 00:14:47,920
the things because all the states and

00:14:46,089 --> 00:14:49,809
runners and I think they are executed

00:14:47,920 --> 00:14:52,569
even though they are read they are

00:14:49,809 --> 00:14:53,920
described in salt master they are

00:14:52,569 --> 00:14:56,950
executed on minion

00:14:53,920 --> 00:15:00,390
the way it works that when the minion is

00:14:56,950 --> 00:15:05,170
registered it synchronize it copies or

00:15:00,390 --> 00:15:08,920
veggies all these state files Python

00:15:05,170 --> 00:15:11,950
modules whatever it needs back locally

00:15:08,920 --> 00:15:15,339
to location result Manila and were

00:15:11,950 --> 00:15:18,279
instructed it executed it on Dominion so

00:15:15,339 --> 00:15:20,950
there's no way to change that data or

00:15:18,279 --> 00:15:24,700
anything on a server verse out of salt

00:15:20,950 --> 00:15:26,920
master itself if you want to run it on a

00:15:24,700 --> 00:15:31,390
sub master there is this modules called

00:15:26,920 --> 00:15:34,120
runners runners are exactly the same

00:15:31,390 --> 00:15:36,730
similar as execution modules but they

00:15:34,120 --> 00:15:39,450
are running on a server so this is the

00:15:36,730 --> 00:15:42,760
one thing how you can for example change

00:15:39,450 --> 00:15:45,640
pillars when you have when you write and

00:15:42,760 --> 00:15:48,760
runner to modify files on this on the

00:15:45,640 --> 00:15:53,279
server master you can of course out or

00:15:48,760 --> 00:15:53,279
change pillars for minions

00:15:53,709 --> 00:15:59,610
one interesting renderer is also

00:15:56,769 --> 00:16:02,589
orchestrated orchestrate rather

00:15:59,610 --> 00:16:06,100
interesting on this that it's meant to

00:16:02,589 --> 00:16:08,620
synchronize multiple machines together

00:16:06,100 --> 00:16:12,899
for example when you are booting a

00:16:08,620 --> 00:16:17,529
machine it is registered in the HCV and

00:16:12,899 --> 00:16:22,420
when you when it is ready for example so

00:16:17,529 --> 00:16:24,850
you want to change your hostname so you

00:16:22,420 --> 00:16:27,850
have a salt state to change a hostname

00:16:24,850 --> 00:16:31,779
on a vanilla and then you have another

00:16:27,850 --> 00:16:34,720
state which changed the name on the DNS

00:16:31,779 --> 00:16:37,480
server so it's written in there like you

00:16:34,720 --> 00:16:40,360
know named configuration and you want it

00:16:37,480 --> 00:16:43,360
to do it at the same time to prevent

00:16:40,360 --> 00:16:44,980
some races also so you can use

00:16:43,360 --> 00:16:48,699
orchestrate to synchronize multiple

00:16:44,980 --> 00:16:54,100
states on multiple minions at one

00:16:48,699 --> 00:16:58,209
together and the last thing we will need

00:16:54,100 --> 00:17:01,420
in our in the next present the next we

00:16:58,209 --> 00:17:04,329
will is a reactor I was talking about

00:17:01,420 --> 00:17:05,490
it's all this evil driven or the reactor

00:17:04,329 --> 00:17:08,760
is where you have the

00:17:05,490 --> 00:17:12,120
but where we put handlers of your to

00:17:08,760 --> 00:17:15,750
your to your events and using this you

00:17:12,120 --> 00:17:22,160
can execute either of states runner

00:17:15,750 --> 00:17:31,040
runners or yeah anything what you

00:17:22,160 --> 00:17:37,500
specify it that's what we need from Salt

00:17:31,040 --> 00:17:43,950
briefly for our for our next task okay

00:17:37,500 --> 00:17:46,860
so South boot we based South boot or sub

00:17:43,950 --> 00:17:50,550
boot in our implementation is based on

00:17:46,860 --> 00:17:54,570
net net boot which is provided by TV as

00:17:50,550 --> 00:17:58,110
a special in it Hardy but today I will

00:17:54,570 --> 00:18:03,210
talk about this if you want to write it

00:17:58,110 --> 00:18:06,780
from a scratch so yeah it's all good

00:18:03,210 --> 00:18:08,750
steak we have a client site when we edit

00:18:06,780 --> 00:18:11,970
in its Hardy

00:18:08,750 --> 00:18:15,630
we provide drains and the fire events

00:18:11,970 --> 00:18:17,670
and then we have a server-side when we

00:18:15,630 --> 00:18:20,640
need to write our custom states how to

00:18:17,670 --> 00:18:27,120
handle eight runners execution modules

00:18:20,640 --> 00:18:29,340
and of course the pillars so imagine

00:18:27,120 --> 00:18:34,230
then we have a machine we just plug in

00:18:29,340 --> 00:18:36,750
to the network and we started it of

00:18:34,230 --> 00:18:40,679
course initially when we start the

00:18:36,750 --> 00:18:42,929
machine we were I assume we already have

00:18:40,679 --> 00:18:44,850
the server-side configured as was in the

00:18:42,929 --> 00:18:47,490
first part about network boot so we have

00:18:44,850 --> 00:18:51,030
our Sun sang some kind of in its Rd we

00:18:47,490 --> 00:18:53,670
have configure DHCP we have TFTP now the

00:18:51,030 --> 00:18:58,380
machine moves up and it starts to assist

00:18:53,670 --> 00:19:00,750
in it Rd when you use in it Rd from the

00:18:58,380 --> 00:19:02,880
net boots or some other it usually

00:19:00,750 --> 00:19:04,710
doesn't start any mini on anything it

00:19:02,880 --> 00:19:09,179
just goes through and for something

00:19:04,710 --> 00:19:11,010
booted from boot from hard drive you

00:19:09,179 --> 00:19:13,770
know in its Hardy

00:19:11,010 --> 00:19:16,620
there is some some part always when you

00:19:13,770 --> 00:19:18,990
can edit you at your own clients

00:19:16,620 --> 00:19:23,070
in that boot in it Hardy provided by

00:19:18,990 --> 00:19:25,679
Kiwi a there is a Linux RC script and in

00:19:23,070 --> 00:19:31,200
this Linux RC we need to somehow

00:19:25,679 --> 00:19:33,240
modified it that's just that at a

00:19:31,200 --> 00:19:36,360
specific time it will start to listening

00:19:33,240 --> 00:19:41,010
to our clients the easiest way of course

00:19:36,360 --> 00:19:45,960
is just on the wall on the right place

00:19:41,010 --> 00:19:49,080
that's a trademark write insert start of

00:19:45,960 --> 00:19:50,520
thought minion the right place is

00:19:49,080 --> 00:19:54,510
probably after the network is

00:19:50,520 --> 00:19:57,120
initialized and everything even it is

00:19:54,510 --> 00:19:59,070
already prepared then you start sub

00:19:57,120 --> 00:20:01,350
Mineola you need to take care that you

00:19:59,070 --> 00:20:03,809
start salt minion in a foreground not in

00:20:01,350 --> 00:20:11,179
a service because we need to stop this

00:20:03,809 --> 00:20:15,390
execution of init Rd and from this point

00:20:11,179 --> 00:20:17,730
we have the control from the source all

00:20:15,390 --> 00:20:22,890
server salt salt master we have a

00:20:17,730 --> 00:20:24,779
control shot in yen of course we will

00:20:22,890 --> 00:20:26,820
keep this in mind so when we will need

00:20:24,779 --> 00:20:29,279
to continue with this boot process when

00:20:26,820 --> 00:20:32,039
everything is done we want we need to

00:20:29,279 --> 00:20:40,590
tell tell this sub menu to terminate

00:20:32,039 --> 00:20:42,809
itself one thing about the registration

00:20:40,590 --> 00:20:45,360
how it works when assault within the

00:20:42,809 --> 00:20:47,520
salt echo system when the South minion

00:20:45,360 --> 00:20:53,610
first boot ups or connects to the South

00:20:47,520 --> 00:20:56,700
master it will send its own public key

00:20:53,610 --> 00:20:58,919
and information to the server and just

00:20:56,700 --> 00:21:01,890
stops until the server accepted and

00:20:58,919 --> 00:21:04,529
tries it each 10 15 seconds to whether

00:21:01,890 --> 00:21:06,779
it's already released rate or not on the

00:21:04,529 --> 00:21:09,480
south master you have when you're

00:21:06,779 --> 00:21:12,020
playing lists all the salt minions keys

00:21:09,480 --> 00:21:16,490
we will see that you have an approved

00:21:12,020 --> 00:21:19,289
key there until you manually approve it

00:21:16,490 --> 00:21:22,830
everything is stopped there are of

00:21:19,289 --> 00:21:26,130
course way base how to how to accept

00:21:22,830 --> 00:21:28,470
keys but of course then

00:21:26,130 --> 00:21:31,430
some security is compromised so by

00:21:28,470 --> 00:21:35,870
default you need to manually come

00:21:31,430 --> 00:21:39,510
acknowledge this key so at this point

00:21:35,870 --> 00:21:46,260
our South minion is stopped until we

00:21:39,510 --> 00:21:48,870
reach state as soon as we register it it

00:21:46,260 --> 00:21:53,040
will fire up a sub minion will fire up

00:21:48,870 --> 00:21:58,260
an event it's called salt / minion stars

00:21:53,040 --> 00:22:00,570
stall lets our minions always fight this

00:21:58,260 --> 00:22:05,700
event one day when they start and they

00:22:00,570 --> 00:22:10,380
are registered so this is the point

00:22:05,700 --> 00:22:13,320
where we will try to have to influence

00:22:10,380 --> 00:22:18,060
the minion and we do that that we

00:22:13,320 --> 00:22:21,660
configure own reactor there is zodiac

00:22:18,060 --> 00:22:25,110
this configuration file in a salty sea

00:22:21,660 --> 00:22:28,080
salt master when you are to this this

00:22:25,110 --> 00:22:31,050
snippet reactor then you have the ID of

00:22:28,080 --> 00:22:33,960
the event it was fired and then you have

00:22:31,050 --> 00:22:38,400
the file which will contain some state

00:22:33,960 --> 00:22:43,640
or some state which will hand late the

00:22:38,400 --> 00:22:46,460
salt salt perfect salt double salt sorry

00:22:43,640 --> 00:22:49,140
the salt prefix means that it is

00:22:46,460 --> 00:22:53,400
somewhere somewhere reachable on the

00:22:49,140 --> 00:22:55,290
salt filesystem it means that salt is

00:22:53,400 --> 00:22:58,920
configured to look into some directories

00:22:55,290 --> 00:23:01,020
and use it file system which which from

00:22:58,920 --> 00:23:05,250
where it can gather the files usually

00:23:01,020 --> 00:23:10,440
all this events lot of salt state files

00:23:05,250 --> 00:23:13,470
or it's like a service salt user shows

00:23:10,440 --> 00:23:19,290
or user share salt and so on they are

00:23:13,470 --> 00:23:21,150
accessible using the salt itself ok so

00:23:19,290 --> 00:23:28,380
we have now with some file which ones

00:23:21,150 --> 00:23:30,510
minion Union start and this is something

00:23:28,380 --> 00:23:33,520
so let's see this is our and three

00:23:30,510 --> 00:23:41,260
points so let's say that we want have

00:23:33,520 --> 00:23:43,270
our disk partition it so in this when

00:23:41,260 --> 00:23:44,830
you read just a side note when you read

00:23:43,270 --> 00:23:46,929
the documentation about salt

00:23:44,830 --> 00:23:49,480
they will discourage using something

00:23:46,929 --> 00:23:54,190
like that because the reactor is running

00:23:49,480 --> 00:23:56,890
in the main thread and when you use some

00:23:54,190 --> 00:24:00,309
intensive tasks in the main thread it

00:23:56,890 --> 00:24:01,929
will block all salt master so this is

00:24:00,309 --> 00:24:05,350
just for demonstration but usually we

00:24:01,929 --> 00:24:09,670
will have some really short so state

00:24:05,350 --> 00:24:11,830
specifying yes execute this state and it

00:24:09,670 --> 00:24:14,770
will done it will do executed state in

00:24:11,830 --> 00:24:20,380
different workers threat so but for

00:24:14,770 --> 00:24:24,730
presentation you can I just put it put

00:24:20,380 --> 00:24:27,250
it there what we see here this is a

00:24:24,730 --> 00:24:29,679
business of identification this

00:24:27,250 --> 00:24:33,250
partition entities whatever you want you

00:24:29,679 --> 00:24:36,570
know it doesn't it's really your ID and

00:24:33,250 --> 00:24:40,440
then this module run it means that the

00:24:36,570 --> 00:24:42,820
salt will start execution module

00:24:40,440 --> 00:24:47,290
execution module with the name of

00:24:42,820 --> 00:24:51,070
partition make parts and we added some

00:24:47,290 --> 00:24:55,330
static data like the hard drive the FS

00:24:51,070 --> 00:24:59,110
da what type of fascist Taiwan whatever

00:24:55,330 --> 00:25:02,500
you want and then we have another state

00:24:59,110 --> 00:25:04,929
it's called stop stop minion and that's

00:25:02,500 --> 00:25:09,010
instructs all states out minion to to

00:25:04,929 --> 00:25:11,110
kill itself and it requires on the

00:25:09,010 --> 00:25:13,540
successful completion of disk partition

00:25:11,110 --> 00:25:15,520
it if you would execute it

00:25:13,540 --> 00:25:19,210
it will just partition a disk and

00:25:15,520 --> 00:25:21,190
continue booting this is of course

00:25:19,210 --> 00:25:24,190
you're not really this is really static

00:25:21,190 --> 00:25:28,900
configuration what all machines have is

00:25:24,190 --> 00:25:31,390
def SDA not all machines want exactly

00:25:28,900 --> 00:25:36,250
this kind of partition this kind of our

00:25:31,390 --> 00:25:40,720
system what we can do it will result is

00:25:36,250 --> 00:25:43,840
that there is a ginger or templating

00:25:40,720 --> 00:25:44,980
engine it's people who are working with

00:25:43,840 --> 00:25:48,160
Python are

00:25:44,980 --> 00:25:50,770
familiar probably with ginger and you

00:25:48,160 --> 00:25:55,690
can we can use it in a in a salt state

00:25:50,770 --> 00:25:58,720
itself so in this example alright it has

00:25:55,690 --> 00:26:02,440
this disk partitioning I added some

00:25:58,720 --> 00:26:05,220
ginger pre-processing and of course also

00:26:02,440 --> 00:26:09,190
at the first line I'm asking the pillar

00:26:05,220 --> 00:26:13,780
to get the disk name or disk or list of

00:26:09,190 --> 00:26:15,820
disks in this case I have a minion which

00:26:13,780 --> 00:26:18,880
is a minion ID and somewhere on SWAT

00:26:15,820 --> 00:26:21,669
mast so I can have a pillar which is a

00:26:18,880 --> 00:26:24,220
similar file like this in this format

00:26:21,669 --> 00:26:28,210
assigned only to this pillar and in this

00:26:24,220 --> 00:26:31,720
final file I will have disks list and

00:26:28,210 --> 00:26:37,480
list of disk I want to part together

00:26:31,720 --> 00:26:40,809
with their with their sizes and so what

00:26:37,480 --> 00:26:43,780
will this ginger what will this does is

00:26:40,809 --> 00:26:47,679
the gingival when it is prepared by

00:26:43,780 --> 00:26:53,980
ginger it will create and numerous of

00:26:47,679 --> 00:26:55,990
states for each hard drive partition it

00:26:53,980 --> 00:26:58,600
will create another state and then it

00:26:55,990 --> 00:27:04,600
will be passed to a salt and salt will

00:26:58,600 --> 00:27:11,910
execute it and try to partition all of

00:27:04,600 --> 00:27:16,000
this this this is fine for some easy

00:27:11,910 --> 00:27:19,980
easy because it is a part because

00:27:16,000 --> 00:27:24,059
gingers it looks like Python but is not

00:27:19,980 --> 00:27:27,400
full-fledged Python so there is really

00:27:24,059 --> 00:27:29,140
when you have some advanced tasks like

00:27:27,400 --> 00:27:32,980
you want to check whether the

00:27:29,140 --> 00:27:37,179
partitioning already exists manually not

00:27:32,980 --> 00:27:39,880
using some salt tools or when you want

00:27:37,179 --> 00:27:43,480
different pieces to work and it's a

00:27:39,880 --> 00:27:47,290
complicated to do in templating the good

00:27:43,480 --> 00:27:50,530
thing is that salt so some knows about

00:27:47,290 --> 00:27:53,740
salt you can write salt state even in

00:27:50,530 --> 00:27:56,320
Python itself you usually put it into

00:27:53,740 --> 00:27:58,590
the somewhere in the soul size file

00:27:56,320 --> 00:28:03,240
system for examples

00:27:58,590 --> 00:28:06,750
asari / salt / you are the directory

00:28:03,240 --> 00:28:11,159
underscore state and then you put your

00:28:06,750 --> 00:28:16,140
Python file in this piping file you can

00:28:11,159 --> 00:28:19,260
define functions vital functions for

00:28:16,140 --> 00:28:21,179
States they have some special format

00:28:19,260 --> 00:28:24,659
which is not complete here because it's

00:28:21,179 --> 00:28:29,070
quite longer but you are supposed to

00:28:24,659 --> 00:28:32,309
return our result whether you passed or

00:28:29,070 --> 00:28:36,620
not some commands you should handle

00:28:32,309 --> 00:28:40,010
tests dry run which I omitted here but

00:28:36,620 --> 00:28:42,899
in essence you can write a Python code

00:28:40,010 --> 00:28:44,429
in the in this Python code you can

00:28:42,899 --> 00:28:47,640
notice there is an underscore just

00:28:44,429 --> 00:28:51,000
called salt and the scholar score this

00:28:47,640 --> 00:28:54,929
will allows you to access to the salt

00:28:51,000 --> 00:28:57,690
execution modules there is a similar for

00:28:54,929 --> 00:28:59,039
a variable called pillar and underscore

00:28:57,690 --> 00:29:01,770
is called pillar understand the score

00:28:59,039 --> 00:29:04,020
that will allow you access to the pillar

00:29:01,770 --> 00:29:08,580
give available for this for this mini

00:29:04,020 --> 00:29:11,880
Ana and you can use so you can you have

00:29:08,580 --> 00:29:15,240
you can execute another sub modules you

00:29:11,880 --> 00:29:22,020
can do pretty much all everything you

00:29:15,240 --> 00:29:24,990
you want and then because we need

00:29:22,020 --> 00:29:28,500
somehow some way to call this our state

00:29:24,990 --> 00:29:31,460
so there is another state Inc

00:29:28,500 --> 00:29:35,970
for example this is our Buddhist Alice

00:29:31,460 --> 00:29:39,440
you can see that the previously was

00:29:35,970 --> 00:29:42,510
module dot rather I have salt would not

00:29:39,440 --> 00:29:51,679
check existing which is the name of the

00:29:42,510 --> 00:29:54,809
function in this Python module fact now

00:29:51,679 --> 00:29:59,279
we have this much support so in this

00:29:54,809 --> 00:30:01,559
case we already can check the partitions

00:29:59,279 --> 00:30:07,470
we can partition it when the partitions

00:30:01,559 --> 00:30:10,590
are not existing now support so that we

00:30:07,470 --> 00:30:16,889
want some modification on the sir

00:30:10,590 --> 00:30:27,179
as I was saying about runners for a for

00:30:16,889 --> 00:30:28,919
a runner you can this is yeah we need to

00:30:27,179 --> 00:30:32,759
send us because all the states are

00:30:28,919 --> 00:30:35,519
executed on the linear itself we need to

00:30:32,759 --> 00:30:40,860
somebody notify the server so we start

00:30:35,519 --> 00:30:43,769
we sent an event you send event by sent

00:30:40,860 --> 00:30:46,519
events and what your execution module

00:30:43,769 --> 00:30:52,200
module around and name is executions and

00:30:46,519 --> 00:30:54,559
you can add the ID of this order tag of

00:30:52,200 --> 00:30:57,389
this event can be whatever you want just

00:30:54,559 --> 00:31:01,549
just the form result use this format is

00:30:57,389 --> 00:31:05,580
name slash something slash something

00:31:01,549 --> 00:31:07,110
usually like companies slash components

00:31:05,580 --> 00:31:11,909
life

00:31:07,110 --> 00:31:15,480
it's your choice in choosing and you

00:31:11,909 --> 00:31:17,100
could add at the other data I want if

00:31:15,480 --> 00:31:24,539
you want to include all the grains you

00:31:17,100 --> 00:31:26,789
just are with the grains this of course

00:31:24,539 --> 00:31:29,429
we need to handle it in a reactor so we

00:31:26,789 --> 00:31:35,039
would need to enhance the reactor with

00:31:29,429 --> 00:31:37,590
our own handle and we have which we

00:31:35,039 --> 00:31:40,259
which seems it's called the same sum of

00:31:37,590 --> 00:31:44,210
all the all the states or our call in

00:31:40,259 --> 00:31:48,149
the reactor are called the same but our

00:31:44,210 --> 00:31:57,230
machine list state uses salt rather

00:31:48,149 --> 00:32:01,019
instead of would you run or or salt

00:31:57,230 --> 00:32:03,299
orchestrated so the runner salt will

00:32:01,019 --> 00:32:08,940
know that this kind of code should be

00:32:03,299 --> 00:32:11,940
run on the server itself and now because

00:32:08,940 --> 00:32:15,600
house runner this did not run modules I

00:32:11,940 --> 00:32:18,300
isolated itself

00:32:15,600 --> 00:32:22,970
the modules provided by saltstack itself

00:32:18,300 --> 00:32:27,080
so but he wants to call the common usual

00:32:22,970 --> 00:32:30,600
salt modules execution module we have

00:32:27,080 --> 00:32:34,830
for this there is the name salted cfd

00:32:30,600 --> 00:32:37,530
salted or CMD is a salt runner module

00:32:34,830 --> 00:32:41,330
which allows you to call South execution

00:32:37,530 --> 00:32:44,850
when you it's getting a little it look

00:32:41,330 --> 00:32:49,470
complex here but that's that's how they

00:32:44,850 --> 00:32:53,340
do it and salt sea we call the execution

00:32:49,470 --> 00:32:55,770
module called file append which takes a

00:32:53,340 --> 00:33:02,100
path and arguments you want to you want

00:32:55,770 --> 00:33:07,820
to up here append to list file of course

00:33:02,100 --> 00:33:11,970
I can't go over a complete solution how

00:33:07,820 --> 00:33:17,250
how to him to do all of this what you

00:33:11,970 --> 00:33:22,610
will need to finish as a reduce example

00:33:17,250 --> 00:33:26,430
is to deploy Amish do have an image

00:33:22,610 --> 00:33:31,160
deploy image and one big thing which I

00:33:26,430 --> 00:33:37,670
not convert here is you need somehow to

00:33:31,160 --> 00:33:40,560
preserve the minions rigid pipe

00:33:37,670 --> 00:33:45,720
certificate and the key is all did

00:33:40,560 --> 00:33:48,690
between which with which it was

00:33:45,720 --> 00:33:51,000
registered to the salt master because if

00:33:48,690 --> 00:33:52,620
you do not do imagine that you reboot

00:33:51,000 --> 00:33:55,410
you already deploy you image you

00:33:52,620 --> 00:33:57,570
partition this hard drive everything and

00:33:55,410 --> 00:34:00,270
then you restart restart the computer

00:33:57,570 --> 00:34:05,160
and again it will start without minion

00:34:00,270 --> 00:34:09,540
if it's not registered it for all again

00:34:05,160 --> 00:34:12,120
wait and so on what you can do is that

00:34:09,540 --> 00:34:14,720
when for example this this salt state is

00:34:12,120 --> 00:34:18,600
finished after the salt menu is

00:34:14,720 --> 00:34:22,520
terminated you in the in the nooks RC

00:34:18,600 --> 00:34:26,820
script you can take a slash eighty sea

00:34:22,520 --> 00:34:28,060
salt many on are separated in Alba

00:34:26,820 --> 00:34:30,730
directory there are six

00:34:28,060 --> 00:34:34,420
certificate and some other configuration

00:34:30,730 --> 00:34:38,200
files you can computer copy it on hard

00:34:34,420 --> 00:34:40,090
drive and then at the beginning of

00:34:38,200 --> 00:34:43,750
building looks RC before you start South

00:34:40,090 --> 00:34:47,680
mania copy this file from hard drive to

00:34:43,750 --> 00:34:51,760
the memory rubber base in it Adi

00:34:47,680 --> 00:34:54,580
so when next reboot salt can use reuse

00:34:51,760 --> 00:34:58,050
the certificate it already used for

00:34:54,580 --> 00:35:03,580
certification you have to wait for all

00:34:58,050 --> 00:35:07,450
all the things to happen again how it

00:35:03,580 --> 00:35:10,330
look if you do all of this how it looks

00:35:07,450 --> 00:35:14,590
like well this is regular screen from a

00:35:10,330 --> 00:35:16,990
pixie oh you might be well know it's a

00:35:14,590 --> 00:35:21,610
diversity there is a TFTP prefix boot

00:35:16,990 --> 00:35:25,180
which in my example I omitted but it's

00:35:21,610 --> 00:35:28,000
so the only difference it you see it

00:35:25,180 --> 00:35:33,850
loaded canal it low it's snowing in it

00:35:28,000 --> 00:35:36,160
Rd now it all starts now this is in this

00:35:33,850 --> 00:35:37,840
case it's waiting this is exactly the

00:35:36,160 --> 00:35:44,320
thing about the registration of the

00:35:37,840 --> 00:35:46,690
minion to the master of course you will

00:35:44,320 --> 00:35:48,730
in if you will be implementing this by

00:35:46,690 --> 00:35:52,540
yourself you will need somehow to get

00:35:48,730 --> 00:35:54,520
this data to the apply mode fortunately

00:35:52,540 --> 00:35:59,290
apply most now in some of it supports

00:35:54,520 --> 00:36:01,890
the multi line commands you know and you

00:35:59,290 --> 00:36:05,680
see there is the first is the minion IV

00:36:01,890 --> 00:36:09,190
the minion ID is taken usually from a

00:36:05,680 --> 00:36:12,610
machine at machine ID system the service

00:36:09,190 --> 00:36:14,230
and the second line is the fingerprint

00:36:12,610 --> 00:36:18,760
that's the fingerprint on the side of

00:36:14,230 --> 00:36:25,060
the certificate it's used to register

00:36:18,760 --> 00:36:27,370
itself the same eye the same data you

00:36:25,060 --> 00:36:30,280
will see on the salt master when you are

00:36:27,370 --> 00:36:33,370
using salt key for example to it just to

00:36:30,280 --> 00:36:35,480
see them as soon as you accept them

00:36:33,370 --> 00:36:40,609
accept this

00:36:35,480 --> 00:36:42,980
the manana it will do it stuff in our

00:36:40,609 --> 00:36:46,580
case in when the screen shows a state

00:36:42,980 --> 00:36:49,280
color we already have all the salt

00:36:46,580 --> 00:36:51,080
states checking what hardware

00:36:49,280 --> 00:36:55,760
architecture it is what harbour type it

00:36:51,080 --> 00:36:57,710
is we have a minion here which specified

00:36:55,760 --> 00:37:00,920
it for this machine type use this

00:36:57,710 --> 00:37:04,880
partitioning and use that image so this

00:37:00,920 --> 00:37:08,200
is not downloading the image once

00:37:04,880 --> 00:37:11,060
downloading it is once download is done

00:37:08,200 --> 00:37:15,680
you can all verify it

00:37:11,060 --> 00:37:18,170
this is all done in a salt Python after

00:37:15,680 --> 00:37:20,180
the verification of course booting

00:37:18,170 --> 00:37:22,790
system which means that the last last

00:37:20,180 --> 00:37:25,670
thing which salt minion print it and

00:37:22,790 --> 00:37:32,380
then terminates itself and it and at

00:37:25,670 --> 00:37:32,380
8:00 butit's booted server booted client

00:37:34,910 --> 00:37:44,300
it's from my side that's all from my

00:37:38,990 --> 00:37:47,440
side well one note I don't know if you

00:37:44,300 --> 00:37:50,990
were on the presentation about the

00:37:47,440 --> 00:37:53,119
project uni because all of these the

00:37:50,990 --> 00:37:55,220
Clippers actually use this salt it's a

00:37:53,119 --> 00:37:57,650
salt it's deeply integrated into the

00:37:55,220 --> 00:38:00,530
unit and all of this

00:37:57,650 --> 00:38:04,300
so this basically integrated also we

00:38:00,530 --> 00:38:08,030
this project units so when you will

00:38:04,300 --> 00:38:13,640
check it out later on a github there are

00:38:08,030 --> 00:38:16,119
already states which handle this well we

00:38:13,640 --> 00:38:23,480
are not yet there but they will be there

00:38:16,119 --> 00:38:26,450
hopefully next in in month and you will

00:38:23,480 --> 00:38:29,390
not don't have to write all the events

00:38:26,450 --> 00:38:33,410
but your yourself but you can check it

00:38:29,390 --> 00:38:35,540
out and see what also you can do with to

00:38:33,410 --> 00:38:39,770
play with

00:38:35,540 --> 00:38:47,270
it's working installation and so on okay

00:38:39,770 --> 00:39:02,470
I have open to questions all right

00:38:47,270 --> 00:39:02,470
okay it's one question it's not okay

00:39:05,180 --> 00:39:14,150
you're doing some installation on a

00:39:08,900 --> 00:39:16,310
system right and we in this in the

00:39:14,150 --> 00:39:19,190
state's you can do whatever you want so

00:39:16,310 --> 00:39:21,470
in the example in the screenshots it was

00:39:19,190 --> 00:39:23,600
based on a image so the image is already

00:39:21,470 --> 00:39:27,170
pre-built by the Kiwi and it's done on

00:39:23,600 --> 00:39:29,090
it but it's so it's not like manual

00:39:27,170 --> 00:39:34,220
installation it's all the deployment of

00:39:29,090 --> 00:39:36,410
one image right so one can rather

00:39:34,220 --> 00:39:39,290
compare it to an audience installation

00:39:36,410 --> 00:39:42,170
rather than interactive manual

00:39:39,290 --> 00:39:43,580
installation it's automated but you know

00:39:42,170 --> 00:39:45,470
how to assess doing the installation

00:39:43,580 --> 00:39:48,380
itself so you can use different sources

00:39:45,470 --> 00:39:50,720
in image you have always to say for all

00:39:48,380 --> 00:39:53,240
the Machine you have it's the same image

00:39:50,720 --> 00:39:57,080
and you use an auto adjust and something

00:39:53,240 --> 00:39:58,910
changed for example new new BB publish

00:39:57,080 --> 00:39:59,630
you can have have machines all on

00:39:58,910 --> 00:40:01,520
machines

00:39:59,630 --> 00:40:03,740
yeah okay so I wonder where you see

00:40:01,520 --> 00:40:06,560
potential connection points for the

00:40:03,740 --> 00:40:08,810
future compared to order just as well as

00:40:06,560 --> 00:40:13,880
the asset installer as well as your

00:40:08,810 --> 00:40:15,470
approach of course there is so I don't

00:40:13,880 --> 00:40:18,230
see a problem to integrate to

00:40:15,470 --> 00:40:22,070
integrating yeah how to ask installer in

00:40:18,230 --> 00:40:24,560
an assault itself that's that's pretty

00:40:22,070 --> 00:40:27,290
straightforward from my perspective to

00:40:24,560 --> 00:40:31,880
harder part would be if how to us

00:40:27,290 --> 00:40:36,140
decided to use salt for some management

00:40:31,880 --> 00:40:36,620
or configure configuration but I don't

00:40:36,140 --> 00:40:42,120
see it

00:40:36,620 --> 00:40:45,900
that's a blocking problem but sighs yet

00:40:42,120 --> 00:40:50,070
they definitely needs some needs some

00:40:45,900 --> 00:40:53,580
work but it's possible a second question

00:40:50,070 --> 00:40:59,600
how do you test well this is all the

00:40:53,580 --> 00:41:02,400
stated open QA we have complete

00:40:59,600 --> 00:41:06,510
architecture about this including

00:41:02,400 --> 00:41:11,460
building of images and so on you know

00:41:06,510 --> 00:41:13,950
but even the screenshots are from from

00:41:11,460 --> 00:41:16,740
the oh thank you a the project uni which

00:41:13,950 --> 00:41:19,410
used the one of course original susan

00:41:16,740 --> 00:41:23,340
manager it's testing a cucumber so they

00:41:19,410 --> 00:41:28,110
have capybara and all of this testing

00:41:23,340 --> 00:41:36,480
about it but our point in our part is

00:41:28,110 --> 00:41:42,150
all open QA just yes it includes topic c

00:41:36,480 --> 00:41:47,120
be updated and st has two files to

00:41:42,150 --> 00:41:51,420
delete provided by the test which like

00:41:47,120 --> 00:41:54,840
yeah because it's bills kiwi itself and

00:41:51,420 --> 00:41:59,300
of course we have our own package which

00:41:54,840 --> 00:42:03,660
is called south boot which is not yet

00:41:59,300 --> 00:42:07,620
public even if it's not it's not too

00:42:03,660 --> 00:42:12,060
much work but there is this packages

00:42:07,620 --> 00:42:15,870
which can be used and it built in the

00:42:12,060 --> 00:42:18,930
open QA instance we use salt states

00:42:15,870 --> 00:42:21,540
already it's called formulas there are

00:42:18,930 --> 00:42:24,510
some salt states which are provided by

00:42:21,540 --> 00:42:29,520
upstream and do we use them for

00:42:24,510 --> 00:42:31,170
configuring DHCP DNS TFTP along this so

00:42:29,520 --> 00:42:34,080
we don't know we don't do this manually

00:42:31,170 --> 00:42:36,450
we just this project or this

00:42:34,080 --> 00:42:42,810
assimilation configures it for us to be

00:42:36,450 --> 00:42:47,460
using this salt formulas and the key v

00:42:42,810 --> 00:42:50,329
is built by itself also and then just we

00:42:47,460 --> 00:42:53,510
hook up the third machine

00:42:50,329 --> 00:42:55,670
as to test it to boot it up and we test

00:42:53,510 --> 00:42:59,630
it and open everything checks out and

00:42:55,670 --> 00:43:09,020
then on the graphical image we use a

00:42:59,630 --> 00:43:11,530
regular slice test suit Forex okay any

00:43:09,020 --> 00:43:11,530
other question

00:43:11,890 --> 00:43:16,760
okay I think I was already cited time

00:43:14,869 --> 00:43:21,040
almost out of time so thank you for your

00:43:16,760 --> 00:43:21,040

YouTube URL: https://www.youtube.com/watch?v=xwRVcHlXczw


