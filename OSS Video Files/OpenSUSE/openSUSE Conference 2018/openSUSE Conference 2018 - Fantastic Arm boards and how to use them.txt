Title: openSUSE Conference 2018 - Fantastic Arm boards and how to use them
Publication date: 2018-05-27
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1858-fantastic-arm-boards-and-how-to-use-them

News on hardware and Spectre

Following up on last year's talk (https://events.opensuse.org/conference/oSC17/program/proposal/1246) I intend to give an update on hardware support in openSUSE and software support for new boards. This will include an update on Meltdown/Spectre mitigations and what users need to take care of.

Following up on last year's talk (https://events.opensuse.org/conference/oSC17/program/proposal/1246) I intend to give an update on hardware support in openSUSE and software support for new boards. This will include an update on Meltdown/Spectre mitigations and what users need to take care of.

Andreas FÃ¤rber
Captions: 
	00:00:00,000 --> 00:00:03,550
you

00:00:01,490 --> 00:00:03,550
you

00:00:05,270 --> 00:00:09,870
my name is Andres father I'm a project

00:00:07,920 --> 00:00:14,100
manager from Isuzu labs for the ARM

00:00:09,870 --> 00:00:15,420
architecture and right now I'm going to

00:00:14,100 --> 00:00:21,930
talk about what's new with the

00:00:15,420 --> 00:00:24,240
tumbleweed arm ports as usual short

00:00:21,930 --> 00:00:25,920
disclaimer this is about software so

00:00:24,240 --> 00:00:27,510
this is not a guide about what hardware

00:00:25,920 --> 00:00:29,520
you should be buying or should not be

00:00:27,510 --> 00:00:33,300
buying if you have specific questions

00:00:29,520 --> 00:00:36,270
for projects do ask us beyond this

00:00:33,300 --> 00:00:39,360
particular talk then we can give you

00:00:36,270 --> 00:00:44,250
bias advice on what you think about that

00:00:39,360 --> 00:00:46,220
and obviously some of those things

00:00:44,250 --> 00:00:48,329
mentioned here have been supported by

00:00:46,220 --> 00:00:51,270
hardware donations or help with

00:00:48,329 --> 00:00:56,129
particular boards from people or vendors

00:00:51,270 --> 00:00:59,969
as a brief outline I'm going to remind

00:00:56,129 --> 00:01:02,129
of the different dimensions of support

00:00:59,969 --> 00:01:06,450
for the ARM architecture that we have

00:01:02,129 --> 00:01:08,940
been working on every year I have a very

00:01:06,450 --> 00:01:11,580
different focus point this will be this

00:01:08,940 --> 00:01:13,740
time firmware and the spectra and

00:01:11,580 --> 00:01:16,619
meltdown security vulnerabilities that I

00:01:13,740 --> 00:01:18,299
were going into with some more time this

00:01:16,619 --> 00:01:20,700
year we do not have a hardware showcase

00:01:18,299 --> 00:01:27,770
here and I will not have as many

00:01:20,700 --> 00:01:30,090
hardware updates but still a number so

00:01:27,770 --> 00:01:32,729
when we're talking about arm and

00:01:30,090 --> 00:01:34,140
supporting arm we've already talked

00:01:32,729 --> 00:01:37,280
about microcontrollers let's leave that

00:01:34,140 --> 00:01:42,030
aside for this talk so in particular

00:01:37,280 --> 00:01:43,830
there's a number of chips that exist and

00:01:42,030 --> 00:01:45,780
there's new chips coming out over time

00:01:43,830 --> 00:01:48,960
there's been new chips coming out since

00:01:45,780 --> 00:01:51,750
last weapons user conference with those

00:01:48,960 --> 00:01:53,909
trips vendors are building a number of

00:01:51,750 --> 00:01:55,979
boards so usually there's a one to end

00:01:53,909 --> 00:01:57,060
relation between them one chip several

00:01:55,979 --> 00:02:00,140
different boards and several

00:01:57,060 --> 00:02:02,250
configurations and then there is a third

00:02:00,140 --> 00:02:04,020
configuration that is becoming

00:02:02,250 --> 00:02:06,210
increasingly important as we are

00:02:04,020 --> 00:02:07,890
actually getting to a point where things

00:02:06,210 --> 00:02:09,420
are running stable and mature on the

00:02:07,890 --> 00:02:11,969
various boards then you're not only

00:02:09,420 --> 00:02:13,559
happy if you're able to boot to a prompt

00:02:11,969 --> 00:02:17,130
on the system but you actually want to

00:02:13,559 --> 00:02:18,810
you know like control the robot with the

00:02:17,130 --> 00:02:23,340
or you know do other fun things with it

00:02:18,810 --> 00:02:26,970
in you know the maker sense now let me

00:02:23,340 --> 00:02:31,410
start by getting into the topic of

00:02:26,970 --> 00:02:34,440
recent security vulnerabilities first in

00:02:31,410 --> 00:02:36,420
order to understand what this is about

00:02:34,440 --> 00:02:39,240
I'm gonna talk about how the boot

00:02:36,420 --> 00:02:43,740
workflow works at least in theory on a

00:02:39,240 --> 00:02:52,590
r64 boards and then I'm gonna go into

00:02:43,740 --> 00:02:55,710
bit more details so ap in this case

00:02:52,590 --> 00:02:58,200
stands for application processor so I'm

00:02:55,710 --> 00:02:59,550
assuming that to some point we're

00:02:58,200 --> 00:03:02,250
getting to the point where there is

00:02:59,550 --> 00:03:03,840
power on that particular CPU sometimes

00:03:02,250 --> 00:03:06,210
there's like service processors or

00:03:03,840 --> 00:03:07,710
management course that take over that

00:03:06,210 --> 00:03:09,330
function in particularly in server class

00:03:07,710 --> 00:03:11,490
if we use but when we're talking about

00:03:09,330 --> 00:03:15,600
like single board computers that in most

00:03:11,490 --> 00:03:20,040
cases will have a rather direct boot

00:03:15,600 --> 00:03:22,320
flow and either the boot ROM or well the

00:03:20,040 --> 00:03:24,590
boot ROM definitely does but possibly

00:03:22,320 --> 00:03:27,840
also an initial software component

00:03:24,590 --> 00:03:33,780
provided by the vendor or yourself would

00:03:27,840 --> 00:03:37,590
start doing initializations and what you

00:03:33,780 --> 00:03:39,960
can see on the right of this slide over

00:03:37,590 --> 00:03:41,400
here is that there are different

00:03:39,960 --> 00:03:44,850
exception levels

00:03:41,400 --> 00:03:51,630
listed so going down from el3 down to L

00:03:44,850 --> 00:03:54,810
and 0 and this roughly corresponds to

00:03:51,630 --> 00:03:57,330
what you would refer to as rings on the

00:03:54,810 --> 00:04:02,520
Intel Architecture and maybe on the top

00:03:57,330 --> 00:04:05,070
you would have like SMM but in any case

00:04:02,520 --> 00:04:10,280
I'm just gonna talk about 64-bit army

00:04:05,070 --> 00:04:10,280
it's slightly different for a at 32 and

00:04:10,700 --> 00:04:17,520
the next step would be so the rough idea

00:04:14,850 --> 00:04:19,980
is that the trip comes up with only

00:04:17,520 --> 00:04:22,590
minimal peripherals working and you

00:04:19,980 --> 00:04:24,570
don't have any external RAM available

00:04:22,590 --> 00:04:29,430
yet you have the internal SRAM the

00:04:24,570 --> 00:04:30,960
static Ram and that is well if you

00:04:29,430 --> 00:04:33,780
kilobyte if you're lucky

00:04:30,960 --> 00:04:36,210
maybe megabyte or something and that is

00:04:33,780 --> 00:04:38,550
available for initial code execution and

00:04:36,210 --> 00:04:41,099
what your ten-point need to do is to

00:04:38,550 --> 00:04:42,810
actually initialize the RAM that you can

00:04:41,099 --> 00:04:45,990
then run for the components into so

00:04:42,810 --> 00:04:49,020
these are small individual components

00:04:45,990 --> 00:04:52,370
that trainload each other until you have

00:04:49,020 --> 00:04:56,610
like the actual workload that is working

00:04:52,370 --> 00:05:00,690
now this is in this case as far as the

00:04:56,610 --> 00:05:03,539
arm trusted firmware that's this TFA is

00:05:00,690 --> 00:05:06,539
concerned is the default defined case is

00:05:03,539 --> 00:05:09,270
that this actually runs in l1 and relies

00:05:06,539 --> 00:05:12,360
on services provided by the be l1

00:05:09,270 --> 00:05:14,940
component in order to have certain hyper

00:05:12,360 --> 00:05:21,210
calls VM usually that's done via SMC

00:05:14,940 --> 00:05:24,139
calls to provide a certain entry point

00:05:21,210 --> 00:05:27,300
that you want the higher-level

00:05:24,139 --> 00:05:29,280
exceptional exceptional level to jump to

00:05:27,300 --> 00:05:32,250
code because and once you've dropped

00:05:29,280 --> 00:05:34,110
privileges as with you know as you might

00:05:32,250 --> 00:05:35,970
know from a user space processes you

00:05:34,110 --> 00:05:40,919
can't just gain like root privileges

00:05:35,970 --> 00:05:45,090
again so easily however if you don't

00:05:40,919 --> 00:05:47,250
have a rom or component that implements

00:05:45,090 --> 00:05:48,960
those functionalities in l3 you have no

00:05:47,250 --> 00:05:52,229
chance of getting back so there's also

00:05:48,960 --> 00:05:55,320
an alternative way to do the bill too

00:05:52,229 --> 00:05:57,449
and that is to host bill to at the

00:05:55,320 --> 00:06:00,120
exception level 3 where it then health

00:05:57,449 --> 00:06:03,449
is sufficient and privileges to run

00:06:00,120 --> 00:06:07,050
pretty much all code that at once this

00:06:03,449 --> 00:06:08,789
is what typically the u-boot secondary

00:06:07,050 --> 00:06:12,180
program loader or in some cases there's

00:06:08,789 --> 00:06:14,190
also a tertiary program loader and so a

00:06:12,180 --> 00:06:17,340
third one where you have like 1 2 3

00:06:14,190 --> 00:06:19,500
executing one after another due to space

00:06:17,340 --> 00:06:23,250
constraints for the respective cold

00:06:19,500 --> 00:06:25,860
blobs or you can also use again on

00:06:23,250 --> 00:06:28,520
trusted firmer for this part of the

00:06:25,860 --> 00:06:28,520
initialization

00:06:30,840 --> 00:06:38,460
the next step then is called bl3 one and

00:06:35,060 --> 00:06:41,070
this is where most of the runtime

00:06:38,460 --> 00:06:43,800
services are getting hosted so they have

00:06:41,070 --> 00:06:46,500
the the highest exception level so they

00:06:43,800 --> 00:06:50,550
have access to really everything in the

00:06:46,500 --> 00:06:53,010
secure domain that is by the way the the

00:06:50,550 --> 00:06:54,660
green line with a distinction SMS so on

00:06:53,010 --> 00:06:57,270
the left side everything that we are

00:06:54,660 --> 00:06:59,280
looking at up to now is in the secure

00:06:57,270 --> 00:07:01,980
domain so this has access to special

00:06:59,280 --> 00:07:06,030
parts of RAM that may not be accessible

00:07:01,980 --> 00:07:10,860
from a non-secure world and this

00:07:06,030 --> 00:07:16,620
component is being used for power

00:07:10,860 --> 00:07:19,560
control among others in particular the

00:07:16,620 --> 00:07:21,710
PS di interface is what we're using from

00:07:19,560 --> 00:07:24,780
from Linux

00:07:21,710 --> 00:07:29,340
Heiko do you have any additions that I'm

00:07:24,780 --> 00:07:30,150
missing out on here but yes okay I mean

00:07:29,340 --> 00:07:31,740
I know there are some other

00:07:30,150 --> 00:07:33,000
abbreviations that are also hidden in

00:07:31,740 --> 00:07:40,530
this one but I guess they're not so

00:07:33,000 --> 00:07:43,650
relevant and not so well known so at

00:07:40,530 --> 00:07:48,180
that point in the process there is an

00:07:43,650 --> 00:07:50,400
option to load a secure operating system

00:07:48,180 --> 00:07:55,470
and secure operating system in this case

00:07:50,400 --> 00:07:57,600
is not openSUSE but is usually a trusted

00:07:55,470 --> 00:07:59,669
execution environment which is related

00:07:57,600 --> 00:08:03,720
to doing secure crypto operations

00:07:59,669 --> 00:08:05,550
storing keys signing things in a way

00:08:03,720 --> 00:08:08,880
that is isolated from the actual

00:08:05,550 --> 00:08:13,050
operating system and this can then run

00:08:08,880 --> 00:08:15,750
at the kind of equivalent to user space

00:08:13,050 --> 00:08:17,510
applications under Linux run some small

00:08:15,750 --> 00:08:20,550
apps that perform certain functions

00:08:17,510 --> 00:08:22,680
according to their API and apart from

00:08:20,550 --> 00:08:24,960
opti being the one that is being

00:08:22,680 --> 00:08:27,600
developed by Lenara for arm there's also

00:08:24,960 --> 00:08:30,289
one from Nvidia called tlk as well as

00:08:27,600 --> 00:08:33,110
several and third-party commercial ones

00:08:30,289 --> 00:08:36,910
that are probably not so relevant for

00:08:33,110 --> 00:08:41,140
boards running openSUSE

00:08:36,910 --> 00:08:43,150
afterwards usually at Yale - we will

00:08:41,140 --> 00:08:48,160
have the actual bootloader which then

00:08:43,150 --> 00:08:54,280
implements the UEFI interfaces be loaded

00:08:48,160 --> 00:08:57,130
as be l33 and from there on we would

00:08:54,280 --> 00:08:59,200
then be able to load if we want grub if

00:08:57,130 --> 00:09:03,540
it's actually working that's what I'll

00:08:59,200 --> 00:09:06,820
be mentioning later on and from either

00:09:03,540 --> 00:09:09,940
you boot edk - or grub we could then

00:09:06,820 --> 00:09:12,400
load Linux and I've been told that by

00:09:09,940 --> 00:09:15,220
now it is mostly running in l2 there's

00:09:12,400 --> 00:09:17,400
also the option of having it run in l1

00:09:15,220 --> 00:09:20,560
but in particular if you want to use

00:09:17,400 --> 00:09:24,610
hypervisor services like a k vm then it

00:09:20,560 --> 00:09:26,290
needs to run in l2 and obviously the

00:09:24,610 --> 00:09:31,330
regular user space applications then

00:09:26,290 --> 00:09:34,720
running at the least exception level any

00:09:31,330 --> 00:09:37,240
questions so far I know it's a lot of

00:09:34,720 --> 00:09:39,460
numbers but these are actually numbers

00:09:37,240 --> 00:09:41,260
that on boards that do implement this

00:09:39,460 --> 00:09:43,540
you will get a lot of debug output when

00:09:41,260 --> 00:09:45,910
I start saying and it will print out all

00:09:43,540 --> 00:09:47,290
those yell something numbers and you

00:09:45,910 --> 00:09:50,560
know that it's jumping from one point to

00:09:47,290 --> 00:09:58,900
another and I'll be getting to why that

00:09:50,560 --> 00:10:04,270
becomes relevant shortly okay so hitting

00:09:58,900 --> 00:10:09,640
you with full scope of us so in January

00:10:04,270 --> 00:10:11,410
this year there was a disclosure that

00:10:09,640 --> 00:10:13,270
pretty much everyone should have heard

00:10:11,410 --> 00:10:15,550
of by now because it does not only

00:10:13,270 --> 00:10:19,020
affect arm it mainly originally was

00:10:15,550 --> 00:10:22,150
about Intel that there are certain

00:10:19,020 --> 00:10:25,920
features in the processor designed to

00:10:22,150 --> 00:10:29,200
run code fast that unfortunately led to

00:10:25,920 --> 00:10:33,190
some security vulnerabilities used by

00:10:29,200 --> 00:10:36,190
clever hackers in order to use timing

00:10:33,190 --> 00:10:39,430
effects to read data that you should

00:10:36,190 --> 00:10:43,270
naturally be able to read now there are

00:10:39,430 --> 00:10:46,660
multiple variants in which this can be

00:10:43,270 --> 00:10:49,030
exploited so the variant one listed here

00:10:46,660 --> 00:10:50,780
is a balance check bypass so if you have

00:10:49,030 --> 00:10:56,520
like an

00:10:50,780 --> 00:10:58,770
if a is less than equals then 200 do

00:10:56,520 --> 00:11:00,540
something it would simply do it

00:10:58,770 --> 00:11:03,390
irrespective of whether or not that

00:11:00,540 --> 00:11:05,520
condition is true speculatively try to

00:11:03,390 --> 00:11:07,640
do this access and if at the right right

00:11:05,520 --> 00:11:11,300
point in time he would read certain

00:11:07,640 --> 00:11:14,310
registers then you would have an

00:11:11,300 --> 00:11:18,930
intermediate value be available to code

00:11:14,310 --> 00:11:21,060
a second variant of that would be a

00:11:18,930 --> 00:11:24,810
branch target injection so when you're

00:11:21,060 --> 00:11:26,820
actually jumping to code to get access

00:11:24,810 --> 00:11:34,050
to what you should not be having access

00:11:26,820 --> 00:11:35,790
to as well as the more the the most

00:11:34,050 --> 00:11:40,530
impactful one with the Geist codename

00:11:35,790 --> 00:11:45,180
meltdown is when uses space processors

00:11:40,530 --> 00:11:48,300
would be able to access data in the

00:11:45,180 --> 00:11:51,750
address space that they should not

00:11:48,300 --> 00:11:54,480
usually have access to as well as an arm

00:11:51,750 --> 00:11:56,970
specific variant that was then about I'm

00:11:54,480 --> 00:12:00,830
certain core processor registers part of

00:11:56,970 --> 00:12:07,670
the amp chip and what is now new since

00:12:00,830 --> 00:12:14,660
last week May 21st is a new variant for

00:12:07,670 --> 00:12:16,920
where stores are able to bypass loads

00:12:14,660 --> 00:12:19,170
the description is slightly longer than

00:12:16,920 --> 00:12:21,210
that I won't go into the exact teasers

00:12:19,170 --> 00:12:23,340
of which bits are being ignored in the

00:12:21,210 --> 00:12:27,120
implementation from the various vendors

00:12:23,340 --> 00:12:29,970
fact is that those security

00:12:27,120 --> 00:12:32,700
vulnerabilities exist if you're running

00:12:29,970 --> 00:12:34,980
a board with a local with a slow

00:12:32,700 --> 00:12:37,440
low-cost core chances are that you're

00:12:34,980 --> 00:12:40,260
not affected in particular the cortex

00:12:37,440 --> 00:12:42,300
a53 which is very present like in all

00:12:40,260 --> 00:12:44,610
the all winner boards is not affected by

00:12:42,300 --> 00:12:47,040
this one so the Raspberry Pi is not

00:12:44,610 --> 00:12:50,880
affected either but if you're running

00:12:47,040 --> 00:12:56,690
any core any better cores like cortex a

00:12:50,880 --> 00:12:59,570
57 on the soft iron overdrive X 1000 or

00:12:56,690 --> 00:13:01,190
[Music]

00:12:59,570 --> 00:13:07,790
more recent versions of the the hi

00:13:01,190 --> 00:13:10,850
keyboard the Machado bin and of course a

00:13:07,790 --> 00:13:15,530
various server from from other vendors

00:13:10,850 --> 00:13:18,710
as well and are affected by this and for

00:13:15,530 --> 00:13:21,350
some of those cases and it is necessary

00:13:18,710 --> 00:13:27,740
to not just update your Linux system but

00:13:21,350 --> 00:13:35,210
also firmware and in one case even the

00:13:27,740 --> 00:13:38,360
secure eyes if you're using one so that

00:13:35,210 --> 00:13:41,860
means you know in addition to updating

00:13:38,360 --> 00:13:44,510
your kernel with the mitigations of

00:13:41,860 --> 00:13:46,730
trying to avoid those circumstances

00:13:44,510 --> 00:13:49,130
within the kernel it is also necessary

00:13:46,730 --> 00:13:51,710
to take manual action if your own such a

00:13:49,130 --> 00:13:54,800
board and actually deploy a new version

00:13:51,710 --> 00:13:56,780
of the firmware on that board for the

00:13:54,800 --> 00:13:58,700
Raspberry Pi is pretty much the only

00:13:56,780 --> 00:14:01,790
board that we have an automatic

00:13:58,700 --> 00:14:03,800
mechanism where by doing is super dupe

00:14:01,790 --> 00:14:06,230
you can either get a new from a package

00:14:03,800 --> 00:14:09,470
that will then be used on board but for

00:14:06,230 --> 00:14:14,000
any other ones you would need to DD the

00:14:09,470 --> 00:14:15,740
component by hand and well if you am if

00:14:14,000 --> 00:14:17,510
you're in the lucky position to own an

00:14:15,740 --> 00:14:19,040
actual silver board then you can get

00:14:17,510 --> 00:14:20,300
from Ray updates from the respective

00:14:19,040 --> 00:14:22,280
vendor and you have a nice user

00:14:20,300 --> 00:14:23,810
interface that you can just flash them

00:14:22,280 --> 00:14:26,930
like you could you know update the

00:14:23,810 --> 00:14:29,540
firmware on an interface computer but if

00:14:26,930 --> 00:14:32,450
you actually have those smaller cheap

00:14:29,540 --> 00:14:34,480
single board computers then you will

00:14:32,450 --> 00:14:37,160
need to take care of that yourself and

00:14:34,480 --> 00:14:40,430
for that purpose we've started to

00:14:37,160 --> 00:14:42,590
collect the various firmware related

00:14:40,430 --> 00:14:45,920
packages into a new develop project

00:14:42,590 --> 00:14:48,530
called Hardware hold on boot in OBS were

00:14:45,920 --> 00:14:50,780
also some packages that are not part of

00:14:48,530 --> 00:14:53,000
factory are being made available in

00:14:50,780 --> 00:14:55,910
particular the untrusted firmware is

00:14:53,000 --> 00:14:59,060
there I've also prepared some opti

00:14:55,910 --> 00:15:02,470
builds there as well as edk two packages

00:14:59,060 --> 00:15:02,470
for a few boards

00:15:05,790 --> 00:15:19,590
any questions about that so far okay

00:15:14,720 --> 00:15:22,430
then I'm moving on to the actual boards

00:15:19,590 --> 00:15:30,150
what is new there in that domain I'm

00:15:22,430 --> 00:15:32,990
starting with the v6 version so the

00:15:30,150 --> 00:15:36,150
Raspberry Pi 0w was mentioned last year

00:15:32,990 --> 00:15:39,290
it is using the same chipset as the

00:15:36,150 --> 00:15:45,810
original Raspberry Pi arm11

00:15:39,290 --> 00:15:47,640
there is a new boot or PI 0w and built

00:15:45,810 --> 00:15:49,200
separately available that is the one

00:15:47,640 --> 00:15:51,270
that I have been using that's why there

00:15:49,200 --> 00:15:54,480
are still some question marks in there

00:15:51,270 --> 00:15:57,570
so we have made a recent change to the

00:15:54,480 --> 00:16:01,970
way that we boot all the variants of the

00:15:57,570 --> 00:16:04,350
Raspberry Pi so previously there's the

00:16:01,970 --> 00:16:08,460
binary and proprietary Raspberry Pi

00:16:04,350 --> 00:16:11,340
firmware that executes on the graphic

00:16:08,460 --> 00:16:18,900
core of the Raspberry Pi and from there

00:16:11,340 --> 00:16:21,030
on we load our new boot and so far you

00:16:18,900 --> 00:16:23,370
boot was configured to ship its own

00:16:21,030 --> 00:16:25,470
device trees so that meant that if you

00:16:23,370 --> 00:16:27,690
read a tutorial somewhere on the

00:16:25,470 --> 00:16:30,150
internet that said you know take the

00:16:27,690 --> 00:16:31,860
convict txt file add some magic line

00:16:30,150 --> 00:16:34,110
that would you know make some hardware

00:16:31,860 --> 00:16:36,240
work that you wanted to use that will

00:16:34,110 --> 00:16:38,160
not work because you boot would override

00:16:36,240 --> 00:16:41,400
whatever was configured by the firmware

00:16:38,160 --> 00:16:43,290
and as such you would have to it was

00:16:41,400 --> 00:16:47,760
possible to use them but it needed to be

00:16:43,290 --> 00:16:53,130
like redone on the the level one higher

00:16:47,760 --> 00:16:55,320
or lower depending on how you look as I

00:16:53,130 --> 00:16:58,440
mentioned I've been testing this with

00:16:55,320 --> 00:17:01,230
the our PI 0w but in theory it should

00:16:58,440 --> 00:17:04,470
work with the u-boot there are pi

00:17:01,230 --> 00:17:09,360
because alex graph has worked on passing

00:17:04,470 --> 00:17:12,990
the dt from the firmware into the into

00:17:09,360 --> 00:17:15,390
the u-boot bootloader so that whatever

00:17:12,990 --> 00:17:17,400
has been correctly configured by the

00:17:15,390 --> 00:17:18,720
Raspberry Pi firmware would then be

00:17:17,400 --> 00:17:22,980
available to

00:17:18,720 --> 00:17:24,419
our bootloader as well and I have been

00:17:22,980 --> 00:17:26,280
testing just before this conference

00:17:24,419 --> 00:17:29,070
again that it is actually booting now

00:17:26,280 --> 00:17:32,720
with the tumbleweed kernel there were

00:17:29,070 --> 00:17:36,299
originally some difficulties because

00:17:32,720 --> 00:17:38,940
certain you are drivers were missing in

00:17:36,299 --> 00:17:42,299
in the RB 6 kernel because so far they

00:17:38,940 --> 00:17:46,280
had not been used and also there are

00:17:42,299 --> 00:17:50,280
there were some changes necessary for

00:17:46,280 --> 00:17:52,470
for the Wi-Fi trip which on the 0w is

00:17:50,280 --> 00:17:55,650
very similar to what the raspberry pi 3

00:17:52,470 --> 00:17:59,690
does so it may be possible that you need

00:17:55,650 --> 00:18:03,570
to touch the convict xt file in order to

00:17:59,690 --> 00:18:05,880
add some line step by the way touching

00:18:03,570 --> 00:18:07,830
the convict dog txt file is how I

00:18:05,880 --> 00:18:10,380
describe make the change but it's not

00:18:07,830 --> 00:18:13,049
the most clever way so we actually have

00:18:10,380 --> 00:18:17,100
an include mechanism there which is

00:18:13,049 --> 00:18:18,960
called something with extra in the name

00:18:17,100 --> 00:18:21,659
extra config or so that is then actually

00:18:18,960 --> 00:18:23,610
included from the convict txt file so

00:18:21,659 --> 00:18:25,950
that the convict txt file can still be

00:18:23,610 --> 00:18:28,190
updated by our packages without breaking

00:18:25,950 --> 00:18:28,190
anything

00:18:28,250 --> 00:18:38,640
moving on to jambe 7 so at the last step

00:18:34,500 --> 00:18:41,610
is use a conference we had the tourist

00:18:38,640 --> 00:18:46,110
omnia router and presented there I'm

00:18:41,610 --> 00:18:48,390
using a Marvel Amada 32-bit chip by now

00:18:46,110 --> 00:18:52,890
we have an upstream based package for

00:18:48,390 --> 00:18:54,929
the reboot res omnia unfortunately last

00:18:52,890 --> 00:18:57,539
time that I was testing it it was not

00:18:54,929 --> 00:19:01,470
quite working so I'll need to retest

00:18:57,539 --> 00:19:04,260
that but at least with the downstream

00:19:01,470 --> 00:19:07,710
version with a few modifications I have

00:19:04,260 --> 00:19:09,690
been able to boot a regular open to the

00:19:07,710 --> 00:19:11,970
kernel by now not just some self

00:19:09,690 --> 00:19:21,270
compiled version so this is working well

00:19:11,970 --> 00:19:24,030
by now also using the PD V switch ports

00:19:21,270 --> 00:19:28,909
so this is not just a board but actually

00:19:24,030 --> 00:19:31,710
enclosed in an enclosed router and board

00:19:28,909 --> 00:19:35,309
it is possible to configure

00:19:31,710 --> 00:19:37,020
it not why I asked Estella bug but at

00:19:35,309 --> 00:19:40,230
least by the kernel interfaces and

00:19:37,020 --> 00:19:42,809
manual text config files so that you can

00:19:40,230 --> 00:19:45,029
actually use it for connecting several

00:19:42,809 --> 00:19:47,460
boards to that or having your own

00:19:45,029 --> 00:19:54,899
routing bridging and whatever setup you

00:19:47,460 --> 00:19:59,520
may want to configure I had spoken about

00:19:54,899 --> 00:20:02,010
the guitar board last year a board using

00:19:59,520 --> 00:20:05,720
the same trip the action semi s500 is

00:20:02,010 --> 00:20:10,110
the Sparky board the vendor has kindly

00:20:05,720 --> 00:20:11,820
helped test that same as all the other

00:20:10,110 --> 00:20:14,159
action boards there is no mail and you

00:20:11,820 --> 00:20:16,770
put for that yet so it is not yet

00:20:14,159 --> 00:20:19,020
possible to boot openSUSE on there and I

00:20:16,770 --> 00:20:23,490
have been working on getting patches

00:20:19,020 --> 00:20:26,520
into mainline as time permits but so far

00:20:23,490 --> 00:20:29,760
only booting to serial console and in it

00:20:26,520 --> 00:20:32,640
MRD is working and on this particular

00:20:29,760 --> 00:20:34,260
board I'm still seeing problems with the

00:20:32,640 --> 00:20:36,450
serial console so I can actually read

00:20:34,260 --> 00:20:38,220
what the board is doing it's executing

00:20:36,450 --> 00:20:41,940
just fine but I'm not being able to

00:20:38,220 --> 00:20:51,630
actually provide input to the shell on

00:20:41,940 --> 00:20:55,320
the inner Rd so going to the 64 bit

00:20:51,630 --> 00:20:58,649
world and focusing on that obviously a

00:20:55,320 --> 00:21:01,500
bit more so what is new for the pint 64

00:20:58,649 --> 00:21:03,659
board is that finally we can use the

00:21:01,500 --> 00:21:06,539
kernel defaults so previously we had a

00:21:03,659 --> 00:21:10,140
contrib kernel which was carrying a few

00:21:06,539 --> 00:21:13,230
patches on top now ethernet is working

00:21:10,140 --> 00:21:18,270
fine as well in the default kernel from

00:21:13,230 --> 00:21:23,279
tumbleweed and also the u-boot package

00:21:18,270 --> 00:21:25,380
is now self-sufficient in that it

00:21:23,279 --> 00:21:27,630
includes a secondary program loader now

00:21:25,380 --> 00:21:28,970
so it does not need any binary blob

00:21:27,630 --> 00:21:31,799
before that anymore

00:21:28,970 --> 00:21:35,760
the only limitation at this point is

00:21:31,799 --> 00:21:37,590
that it relies on the untrusted firmware

00:21:35,760 --> 00:21:40,649
and we don't have untrusted firmware in

00:21:37,590 --> 00:21:43,409
factory so that's why this package still

00:21:40,649 --> 00:21:45,640
needs to be taken from the Contra point

00:21:43,409 --> 00:21:52,510
64 package even though the source

00:21:45,640 --> 00:21:55,060
for this is in factory and I recently

00:21:52,510 --> 00:21:58,420
switched the juice package over to use

00:21:55,060 --> 00:22:05,050
this new kernel so that is in the Contra

00:21:58,420 --> 00:22:07,780
pine 64 project the macaron another

00:22:05,050 --> 00:22:09,420
board that frequently gets asked about

00:22:07,780 --> 00:22:12,970
[Music]

00:22:09,420 --> 00:22:15,880
unfortunately Marvel does not have the

00:22:12,970 --> 00:22:19,570
code for their trips in the mainline

00:22:15,880 --> 00:22:21,700
upstream untrusted firmware project so

00:22:19,570 --> 00:22:24,760
they're like two versions behind still

00:22:21,700 --> 00:22:27,370
at this point it was not immediately

00:22:24,760 --> 00:22:32,860
possible for me to do the back ports for

00:22:27,370 --> 00:22:35,610
the TF side fixes for for spectra based

00:22:32,860 --> 00:22:38,950
on that version they've been doing that

00:22:35,610 --> 00:22:40,930
on their own sometime later then at the

00:22:38,950 --> 00:22:42,640
moment I'm still waiting for the v4

00:22:40,930 --> 00:22:44,320
fixes to be come out but either way

00:22:42,640 --> 00:22:46,510
unfortunately

00:22:44,320 --> 00:22:48,550
the packages the way that I have that

00:22:46,510 --> 00:22:50,920
prepared in OBS are unfortunately not

00:22:48,550 --> 00:22:52,450
yet booting not sure why that is any

00:22:50,920 --> 00:22:57,640
help with debugging that will be

00:22:52,450 --> 00:22:59,500
appreciated but Q boot is available for

00:22:57,640 --> 00:23:03,250
sometime and if you simply use the you

00:22:59,500 --> 00:23:05,710
boot that ships on the board from Marvel

00:23:03,250 --> 00:23:10,780
on there you can actually load for

00:23:05,710 --> 00:23:13,600
example from network or from SD card a

00:23:10,780 --> 00:23:15,850
new you boot and use the features that

00:23:13,600 --> 00:23:18,240
are available in there with some

00:23:15,850 --> 00:23:21,220
restrictions and that is actually

00:23:18,240 --> 00:23:26,530
working so far so I've managed to boot

00:23:21,220 --> 00:23:28,570
into the installer at least the basics

00:23:26,530 --> 00:23:31,900
are working it might be that um some

00:23:28,570 --> 00:23:34,540
additional drivers are not available

00:23:31,900 --> 00:23:40,420
something has anyone recently been

00:23:34,540 --> 00:23:42,720
playing with that one okay

00:23:40,420 --> 00:23:42,720
Peters

00:23:44,190 --> 00:23:56,020
then one of the first cheap 64-bit arm

00:23:52,840 --> 00:23:58,690
boards was the Heike out of the 96

00:23:56,020 --> 00:24:03,760
sports project from the narrow with a

00:23:58,690 --> 00:24:09,360
high silicon chip on that I had it

00:24:03,760 --> 00:24:12,190
working with 80 f-14 and was testing the

00:24:09,360 --> 00:24:14,110
specter mitigations on there even though

00:24:12,190 --> 00:24:18,070
not strictly needed for the cortex a53

00:24:14,110 --> 00:24:19,600
it has unfortunately with version 1.5 it

00:24:18,070 --> 00:24:21,300
stopped working for me so there were

00:24:19,600 --> 00:24:23,470
some changes if you remember the

00:24:21,300 --> 00:24:29,650
explanation about the various bootloader

00:24:23,470 --> 00:24:35,380
components they switched from the vol.1

00:24:29,650 --> 00:24:38,980
based BL 2 to a L 3 base bill 2 and

00:24:35,380 --> 00:24:41,260
somehow in that process things broke for

00:24:38,980 --> 00:24:43,270
us although on another board I'll be

00:24:41,260 --> 00:24:45,910
mentioning that is not generally the

00:24:43,270 --> 00:24:50,250
case so that remains to be debugged ASAP

00:24:45,910 --> 00:24:50,250
and back reported to planar about that

00:24:51,600 --> 00:24:57,090
so just don't be confused there is an a

00:24:57,929 --> 00:25:06,460
Jew's high key image around in in a

00:25:02,650 --> 00:25:09,400
contra project but that is highly

00:25:06,460 --> 00:25:12,520
outdated so it uses some custom kernel

00:25:09,400 --> 00:25:15,760
from the original days of when this was

00:25:12,520 --> 00:25:18,610
being worked on by leonora so in theory

00:25:15,760 --> 00:25:24,340
the juice efi package should be working

00:25:18,610 --> 00:25:27,490
as far as the device tree in the u-boot

00:25:24,340 --> 00:25:30,640
package that we ship is up to date it

00:25:27,490 --> 00:25:32,160
may be that a DTP package or file needs

00:25:30,640 --> 00:25:38,380
to be added to the image in order to

00:25:32,160 --> 00:25:41,350
make it boot the installer was not yet

00:25:38,380 --> 00:25:43,240
booting so they have a mailbox driver

00:25:41,350 --> 00:25:46,330
that is needed for certain power

00:25:43,240 --> 00:25:48,400
operations during startup and without

00:25:46,330 --> 00:25:51,159
that driver it was not able to actually

00:25:48,400 --> 00:25:53,960
reach the installer so I'll need to

00:25:51,159 --> 00:25:57,860
adapt the installation images to include

00:25:53,960 --> 00:26:00,649
those drivers the Heike 960 is the

00:25:57,860 --> 00:26:05,350
successor which actually has cores that

00:26:00,649 --> 00:26:05,350
are as mentioned before affected by the

00:26:06,940 --> 00:26:14,240
by the spectre vulnerability a similar

00:26:12,470 --> 00:26:17,360
problem here although slightly different

00:26:14,240 --> 00:26:20,140
it also changed to the bill to a TL 3

00:26:17,360 --> 00:26:26,200
and is no longer working at the moment

00:26:20,140 --> 00:26:31,010
and also previously I did not have

00:26:26,200 --> 00:26:32,779
Colonels booting from sd card on this

00:26:31,010 --> 00:26:34,639
port using the regular cross so using

00:26:32,779 --> 00:26:42,260
some Leonora kernel it was working but

00:26:34,639 --> 00:26:44,029
not using ours poplar is another one

00:26:42,260 --> 00:26:51,409
with a high silicon trip from the 96

00:26:44,029 --> 00:26:53,840
ports family surprisingly after the v15

00:26:51,409 --> 00:26:55,940
bill to a TL 3 update it is still

00:26:53,840 --> 00:27:00,019
working both for recovery and for normal

00:26:55,940 --> 00:27:08,659
boot modes you boot is packaged for this

00:27:00,019 --> 00:27:10,970
and well it has started to boot but I

00:27:08,659 --> 00:27:18,830
have not been able to entirely retest it

00:27:10,970 --> 00:27:21,950
before this talk still then a new board

00:27:18,830 --> 00:27:24,500
with a very quick mention the dragon

00:27:21,950 --> 00:27:26,409
board for Anna 10 C has been around for

00:27:24,500 --> 00:27:31,630
some time there was recent a refresh

00:27:26,409 --> 00:27:35,480
with the Snapdragon 820 and chip

00:27:31,630 --> 00:27:37,580
this is using same as the board that

00:27:35,480 --> 00:27:42,110
Matias mentioned yesterday the little

00:27:37,580 --> 00:27:44,480
kernel as a bootloader so in that case

00:27:42,110 --> 00:27:48,080
as what can be done is to simply train

00:27:44,480 --> 00:27:50,059
load from LK you boot if you would is

00:27:48,080 --> 00:27:51,710
available which I understand for

00:27:50,059 --> 00:27:53,450
mediatek it's not yet because someone

00:27:51,710 --> 00:27:58,190
would actually need to reimplemented

00:27:53,450 --> 00:27:59,640
riders for well accessing SD emmc and so

00:27:58,190 --> 00:28:03,600
on

00:27:59,640 --> 00:28:05,820
this is packaged for the new dragon

00:28:03,600 --> 00:28:08,640
board but not yet tested whether the

00:28:05,820 --> 00:28:14,850
train loading from LK works and in

00:28:08,640 --> 00:28:16,890
particular whether the UEFI support in

00:28:14,850 --> 00:28:18,990
group work so that was previously the

00:28:16,890 --> 00:28:21,590
problem with the dragon board for a

00:28:18,990 --> 00:28:24,180
tendency for one there were some

00:28:21,590 --> 00:28:26,640
redistribute ability issues with some of

00:28:24,180 --> 00:28:28,440
the binary firmware blobs that execute

00:28:26,640 --> 00:28:33,870
before we get to those open source boot

00:28:28,440 --> 00:28:36,360
loaders and also it was possible to boot

00:28:33,870 --> 00:28:46,410
a kernel via you boot but not booting

00:28:36,360 --> 00:28:50,760
grub from you boot then an update from

00:28:46,410 --> 00:28:53,970
the Nvidia world the Tegra x1 based

00:28:50,760 --> 00:28:56,460
Jetson board that's using you know M an

00:28:53,970 --> 00:28:59,190
Nvidia manufactured module not just a

00:28:56,460 --> 00:29:01,850
chip on a development board that could

00:28:59,190 --> 00:29:07,050
in theory one on multiple carrier boards

00:29:01,850 --> 00:29:11,130
for that the 1.5 version of trusted from

00:29:07,050 --> 00:29:16,590
Ray is actually working just fine and it

00:29:11,130 --> 00:29:18,530
is affected by the vulnerabilities so

00:29:16,590 --> 00:29:22,860
that is good news I just need to apply

00:29:18,530 --> 00:29:27,960
the patch istel for that you boot is

00:29:22,860 --> 00:29:31,380
available UEFI unfortunately was not yet

00:29:27,960 --> 00:29:35,310
working and I needed to revert to the

00:29:31,380 --> 00:29:39,270
version or 24 of the Nvidia provided

00:29:35,310 --> 00:29:40,920
Linux for Tegra framework so that's

00:29:39,270 --> 00:29:43,530
basically in this case the the

00:29:40,920 --> 00:29:49,250
bootloader blobs that execute before we

00:29:43,530 --> 00:29:53,880
get to these parts of ATF but with that

00:29:49,250 --> 00:29:58,020
kernel 416 and 417 are finally working

00:29:53,880 --> 00:30:03,320
fine on this board something that I

00:29:58,020 --> 00:30:07,080
cannot say about the x2 version yet so I

00:30:03,320 --> 00:30:10,620
have been having trouble even flashing

00:30:07,080 --> 00:30:13,020
the any any firmware at all to the

00:30:10,620 --> 00:30:15,900
x2 version of the board so with the x1

00:30:13,020 --> 00:30:20,309
no problem with the x2 it did not work

00:30:15,900 --> 00:30:23,250
with leap 15 and unhelpfully if you

00:30:20,309 --> 00:30:25,230
search for such problems as lots of

00:30:23,250 --> 00:30:28,020
forum posts that all say oh yeah just

00:30:25,230 --> 00:30:30,180
take Ubuntu 14.4 and it will magically

00:30:28,020 --> 00:30:32,520
work no one really works why it works

00:30:30,180 --> 00:30:35,010
with an really ancient distribution

00:30:32,520 --> 00:30:39,480
instead of recent one like of course our

00:30:35,010 --> 00:30:43,950
leap and tamper with distributions when

00:30:39,480 --> 00:30:48,600
using the version that Nvidia ships

00:30:43,950 --> 00:30:50,700
themselves obviously UEFI was not

00:30:48,600 --> 00:30:53,910
working yet

00:30:50,700 --> 00:30:55,830
and the kernel was starting to boot but

00:30:53,910 --> 00:31:00,900
not actually finding the boot device so

00:30:55,830 --> 00:31:02,910
not really much to do but as mentioned

00:31:00,900 --> 00:31:07,490
for another board before the plan here

00:31:02,910 --> 00:31:10,830
is that if we have a UEFI compatible

00:31:07,490 --> 00:31:13,500
bootloader flash on to the board so not

00:31:10,830 --> 00:31:16,050
on the boot medium then we can just take

00:31:13,500 --> 00:31:18,570
the existing juice efi image and do not

00:31:16,050 --> 00:31:21,570
need an image that is specific to the

00:31:18,570 --> 00:31:24,809
board or the chip that it is going to

00:31:21,570 --> 00:31:28,350
run on and that is in general a course

00:31:24,809 --> 00:31:33,750
of action to generalize the images more

00:31:28,350 --> 00:31:38,610
I will say a bit more about that in a

00:31:33,750 --> 00:31:44,960
few moments that we need to consolidate

00:31:38,610 --> 00:31:44,960
the very rapid growth of images in OBS

00:31:47,570 --> 00:31:55,410
so alex has been working on a very new

00:31:52,460 --> 00:32:01,050
zhiling space 96 port called the ultra

00:31:55,410 --> 00:32:02,880
96 this is packaged in a contra proposal

00:32:01,050 --> 00:32:06,000
Tory for now due to some tools

00:32:02,880 --> 00:32:09,240
dependencies there you boot is actually

00:32:06,000 --> 00:32:12,720
packaged in the main line I just didn't

00:32:09,240 --> 00:32:16,879
verify the exact name but it is there

00:32:12,720 --> 00:32:21,220
it's using the standard kernel and it is

00:32:16,879 --> 00:32:25,490
working so far as Alex has tested it

00:32:21,220 --> 00:32:30,830
which is very new that this this board

00:32:25,490 --> 00:32:33,649
is out for a few months at most and it's

00:32:30,830 --> 00:32:35,539
already in a state that something can

00:32:33,649 --> 00:32:37,129
execute on it for one that's because the

00:32:35,539 --> 00:32:39,500
trip has been around for time and

00:32:37,129 --> 00:32:42,139
sellings has been working with Sousa on

00:32:39,500 --> 00:32:43,580
enabling it also force less products but

00:32:42,139 --> 00:32:46,070
also there was a very good collaboration

00:32:43,580 --> 00:32:49,669
with the vendor of the board in order to

00:32:46,070 --> 00:32:57,019
let openSUSE run as probably the first

00:32:49,669 --> 00:32:59,600
real distribution on this board if we're

00:32:57,019 --> 00:33:01,279
thinking of the chips access again one

00:32:59,600 --> 00:33:03,799
new trip that has come out is the

00:33:01,279 --> 00:33:08,059
Allwinner h6 unfortunately last time I

00:33:03,799 --> 00:33:10,460
checked on this heute was still in very

00:33:08,059 --> 00:33:12,379
early changes with an early patch set

00:33:10,460 --> 00:33:15,889
and people were still using the fel boot

00:33:12,379 --> 00:33:18,139
mode to try a loading something via USB

00:33:15,889 --> 00:33:20,649
I'm on there since the DRAM

00:33:18,139 --> 00:33:23,480
initialization code was not hit there

00:33:20,649 --> 00:33:27,620
does anyone happen to have an update on

00:33:23,480 --> 00:33:29,779
this in the audience so if you're

00:33:27,620 --> 00:33:32,779
thinking about it just don't confuse the

00:33:29,779 --> 00:33:36,259
pine 64 which is working quite well and

00:33:32,779 --> 00:33:38,809
the pine h 64 which is using a very new

00:33:36,259 --> 00:33:44,090
incompatible sock that is not yet well

00:33:38,809 --> 00:33:47,149
enabled and similarly allow me to

00:33:44,090 --> 00:33:52,970
mention that there is the first real

00:33:47,149 --> 00:33:55,460
tech based single board computer now the

00:33:52,970 --> 00:33:58,789
situation with that I had talked about

00:33:55,460 --> 00:34:00,440
that at opens whose era summit and also

00:33:58,789 --> 00:34:02,740
briefly mentioned it last year the

00:34:00,440 --> 00:34:06,259
openSUSE conference

00:34:02,740 --> 00:34:08,690
there is a significant lack of source

00:34:06,259 --> 00:34:11,990
code for this platform to put it mildly

00:34:08,690 --> 00:34:14,540
and I've been trying to in some cases

00:34:11,990 --> 00:34:17,270
just by trial and error to get parts of

00:34:14,540 --> 00:34:20,690
this main line I do have some patches in

00:34:17,270 --> 00:34:25,859
my in my github repository not in the

00:34:20,690 --> 00:34:29,829
mainline Linux repository where

00:34:25,859 --> 00:34:33,270
by now at least on the RTD 1295 it is

00:34:29,829 --> 00:34:38,169
possible to boot into openSUSE via

00:34:33,270 --> 00:34:40,270
Masada so not yet right SD and so on and

00:34:38,169 --> 00:34:43,869
using various blobs from the renders to

00:34:40,270 --> 00:34:46,389
actually get there but it is possible by

00:34:43,869 --> 00:34:48,730
now and it's mainly just the DT patches

00:34:46,389 --> 00:34:51,789
for describing RTD 1296 and this

00:34:48,730 --> 00:34:53,980
particular board that are missing now

00:34:51,789 --> 00:34:58,980
then some some other mentions let me

00:34:53,980 --> 00:35:01,750
start with Mitchell has a talk about

00:34:58,980 --> 00:35:04,839
open-source routers and there is an

00:35:01,750 --> 00:35:07,930
ongoing crowdfunding project the torus

00:35:04,839 --> 00:35:12,730
mocks based on the Marvel Armada

00:35:07,930 --> 00:35:17,470
37:20 processor we have seen openSUSE

00:35:12,730 --> 00:35:18,700
booting on that yesterday yay also using

00:35:17,470 --> 00:35:20,920
the same trip

00:35:18,700 --> 00:35:23,440
matvey has been working on running

00:35:20,920 --> 00:35:25,720
openSUSE on the espresso bin there are

00:35:23,440 --> 00:35:28,049
still some pieces missing in our

00:35:25,720 --> 00:35:31,480
repositories about that in particular

00:35:28,049 --> 00:35:33,880
for deploying the firmware this is very

00:35:31,480 --> 00:35:35,230
different unfortunately ville just like

00:35:33,880 --> 00:35:35,890
all the chips are very different from

00:35:35,230 --> 00:35:38,140
each other

00:35:35,890 --> 00:35:44,010
I mean different from the the boot flow

00:35:38,140 --> 00:35:46,779
on the mikado bin and such it is not yet

00:35:44,010 --> 00:35:48,970
integrated into the OBS develop project

00:35:46,779 --> 00:35:52,270
but it's on a very good way to get there

00:35:48,970 --> 00:35:55,240
and similarly with another Rock trip

00:35:52,270 --> 00:35:59,920
based CPU Matvey has been working on the

00:35:55,240 --> 00:36:01,750
rock 64 board that's the RK 33 28 and my

00:35:59,920 --> 00:36:05,950
colleague Youssef has been working on

00:36:01,750 --> 00:36:08,069
the Firefly RK $33.99 and the

00:36:05,950 --> 00:36:12,849
corresponding and rock chips have our

00:36:08,069 --> 00:36:16,839
evaluation board for the RK 343 99 up

00:36:12,849 --> 00:36:18,760
streaming projects actually that is a

00:36:16,839 --> 00:36:21,369
typo that should not be Rockchip so

00:36:18,760 --> 00:36:23,170
sorry heiko and that should be real tech

00:36:21,369 --> 00:36:27,010
is the one that I've been working on

00:36:23,170 --> 00:36:29,140
getting patches into action semi as well

00:36:27,010 --> 00:36:31,539
that would be the bubblegum 96 as well

00:36:29,140 --> 00:36:35,580
as the guitar and the Sparky that I

00:36:31,539 --> 00:36:40,200
mentioned today and a few others

00:36:35,580 --> 00:36:42,720
and shortly after the last dublin's of

00:36:40,200 --> 00:36:45,030
the conference we received an F Q board

00:36:42,720 --> 00:36:51,500
from Fujitsu this is using a so see you

00:36:45,030 --> 00:36:56,550
next processor from the Fujitsu heritage

00:36:51,500 --> 00:37:01,920
this I have started writing the patches

00:36:56,550 --> 00:37:04,500
but they have not yet gone upstream then

00:37:01,920 --> 00:37:08,850
some very brief updates that are already

00:37:04,500 --> 00:37:11,280
touched on so at openSUSE Asia Summit I

00:37:08,850 --> 00:37:13,980
had given a more broader overview and

00:37:11,280 --> 00:37:17,130
insight into where we are with set-top

00:37:13,980 --> 00:37:21,240
boxes in particular what difficulties

00:37:17,130 --> 00:37:23,910
are involved there and here's a few

00:37:21,240 --> 00:37:27,450
models that by now and have been tested

00:37:23,910 --> 00:37:29,790
to at least boot to some degree

00:37:27,450 --> 00:37:31,860
unfortunately I found that it varies a

00:37:29,790 --> 00:37:35,940
lot between even if they have the same

00:37:31,860 --> 00:37:38,850
chip and the same crappy vendor boot

00:37:35,940 --> 00:37:40,440
blobs in there it will vary quite a lot

00:37:38,850 --> 00:37:42,060
how they're actually configured so on

00:37:40,440 --> 00:37:45,120
some devices you will have a convenient

00:37:42,060 --> 00:37:48,690
way to actually load new boot loaders

00:37:45,120 --> 00:37:52,080
new kernels via the network or possibly

00:37:48,690 --> 00:37:53,760
even from sd card on others that will be

00:37:52,080 --> 00:37:55,230
completely broken and the only way to

00:37:53,760 --> 00:37:57,030
get something new on there will be a

00:37:55,230 --> 00:37:59,120
serial transfer which unfortunately I

00:37:57,030 --> 00:38:05,280
have not yet found a suitable way to

00:37:59,120 --> 00:38:06,990
automate some new chips that I have been

00:38:05,280 --> 00:38:08,760
looking into but not yet made real

00:38:06,990 --> 00:38:11,610
progress so just to give some

00:38:08,760 --> 00:38:15,180
inspiration maybe is the s9 o 5w so as

00:38:11,610 --> 00:38:17,340
nano v s9 is 9 12 and so on from M logic

00:38:15,180 --> 00:38:20,520
already in the kernel but this one is

00:38:17,340 --> 00:38:22,530
new and not yet tested there's been some

00:38:20,520 --> 00:38:28,620
hardware difficulties on getting serial

00:38:22,530 --> 00:38:31,230
access and the t920 6e I have started

00:38:28,620 --> 00:38:34,190
working on but not yet having a

00:38:31,230 --> 00:38:36,630
proof-of-concept kernel to present

00:38:34,190 --> 00:38:39,970
similarly using the same similar chips

00:38:36,630 --> 00:38:45,190
as mentioned before so I have

00:38:39,970 --> 00:38:50,080
an upstream based kernel booting on the

00:38:45,190 --> 00:38:52,690
rtt 1296 based storage box which is the

00:38:50,080 --> 00:38:57,070
same trip as mentioned in the new banana

00:38:52,690 --> 00:38:58,720
PW to board unfortunately there is not a

00:38:57,070 --> 00:39:01,120
lot of time left to talk about

00:38:58,720 --> 00:39:05,590
expansion boards just very briefly let

00:39:01,120 --> 00:39:07,180
me say that for the Raspberry Pi as

00:39:05,590 --> 00:39:11,260
mentioned testers conflict or txt

00:39:07,180 --> 00:39:13,960
mechanism for other boards there would

00:39:11,260 --> 00:39:16,750
be the possibility to not just override

00:39:13,960 --> 00:39:19,540
the device tree with a one that has been

00:39:16,750 --> 00:39:21,160
extended by yourselves but in recent

00:39:19,540 --> 00:39:23,250
versions we have enabled overlays

00:39:21,160 --> 00:39:26,050
supports so that you can lower d TB o

00:39:23,250 --> 00:39:30,160
file to be added on top of the actual

00:39:26,050 --> 00:39:31,870
dtp file and then once the colonel knows

00:39:30,160 --> 00:39:35,110
that this hardware is present in your

00:39:31,870 --> 00:39:37,090
system you know connected to those 44

00:39:35,110 --> 00:39:40,210
the pin connector rows or whatever your

00:39:37,090 --> 00:39:42,040
board has in particular there is two

00:39:40,210 --> 00:39:44,560
ways to actually work with them one is

00:39:42,040 --> 00:39:47,680
there's drivers like I just see dev and

00:39:44,560 --> 00:39:50,260
Spyder that make a device available that

00:39:47,680 --> 00:39:53,080
you can then use from user space program

00:39:50,260 --> 00:39:56,140
to directly access the pins and write

00:39:53,080 --> 00:39:58,810
and read from there however from a

00:39:56,140 --> 00:40:01,510
kernel perspective that is not always

00:39:58,810 --> 00:40:04,180
desirable in particular when and various

00:40:01,510 --> 00:40:06,940
projects that are available somewhere in

00:40:04,180 --> 00:40:08,800
github will then start to actually probe

00:40:06,940 --> 00:40:10,630
Hardware from user space although

00:40:08,800 --> 00:40:13,870
actually you have the hardware

00:40:10,630 --> 00:40:16,480
description already elsewhere and such

00:40:13,870 --> 00:40:19,600
there is what is new since last here

00:40:16,480 --> 00:40:23,980
there is a certif a framework where you

00:40:19,600 --> 00:40:26,650
can actually chain a kernel driver to

00:40:23,980 --> 00:40:28,660
the serial port which is useful for

00:40:26,650 --> 00:40:31,240
things like Bluetooth for example and

00:40:28,660 --> 00:40:32,800
you don't have to run any weird HCI

00:40:31,240 --> 00:40:37,140
attached commands from user space

00:40:32,800 --> 00:40:39,460
anymore or I've been using that for some

00:40:37,140 --> 00:40:42,820
wireless drivers that we're using some

00:40:39,460 --> 00:40:44,470
80 protocol via serial and certainly

00:40:42,820 --> 00:40:47,860
slightly more use cases and then there's

00:40:44,470 --> 00:40:50,050
a whole range of industrial i/o drivers

00:40:47,860 --> 00:40:54,340
in the Linux kernel for

00:40:50,050 --> 00:40:56,020
sensors converges of various kinds so if

00:40:54,340 --> 00:40:57,790
there's anything that you need we can

00:40:56,020 --> 00:41:02,230
easily enable the options in the

00:40:57,790 --> 00:41:05,380
tumbleweed Colonel and right and well

00:41:02,230 --> 00:41:07,980
you can either then use those IO drivers

00:41:05,380 --> 00:41:10,750
from other kernel drivers directly or

00:41:07,980 --> 00:41:14,490
use certain frameworks and tools in

00:41:10,750 --> 00:41:20,080
order to access them from user space

00:41:14,490 --> 00:41:21,490
yeah these are some of the project that

00:41:20,080 --> 00:41:25,810
I'm still working on

00:41:21,490 --> 00:41:27,820
so like sensors if a sensor is not yet

00:41:25,810 --> 00:41:31,440
in the IO framework implemented then

00:41:27,820 --> 00:41:35,650
it's relatively easy to do that yourself

00:41:31,440 --> 00:41:38,410
what I'm also working on is Laura

00:41:35,650 --> 00:41:40,870
drivers so I figured that it is not

00:41:38,410 --> 00:41:44,380
really useful to keep reimplemented this

00:41:40,870 --> 00:41:47,650
in various user space projects so

00:41:44,380 --> 00:41:50,860
instead I would prefer to have a socket

00:41:47,650 --> 00:41:55,750
based interface to simply use it the

00:41:50,860 --> 00:41:59,970
same way that you would like with 802 15

00:41:55,750 --> 00:42:05,080
for devices or you know Ethernet devices

00:41:59,970 --> 00:42:07,030
Wi-Fi and another area that I've been

00:42:05,080 --> 00:42:11,560
looking into is industrial Ethernet so

00:42:07,030 --> 00:42:13,810
where you have rj45 connectors that are

00:42:11,560 --> 00:42:16,750
using the Ethernet protocol but not the

00:42:13,810 --> 00:42:18,930
usual tcp/ip communication that you

00:42:16,750 --> 00:42:21,550
would run on them but rather some

00:42:18,930 --> 00:42:25,530
customized protocols with real time

00:42:21,550 --> 00:42:27,550
capabilities TSN is the new thing the

00:42:25,530 --> 00:42:29,980
time-sensitive networks which is

00:42:27,550 --> 00:42:34,030
supported by the kernel if you have

00:42:29,980 --> 00:42:35,470
suitable committable hardware but

00:42:34,030 --> 00:42:38,650
there's various other protocols such as

00:42:35,470 --> 00:42:42,130
EtherCAT that various expansion boards

00:42:38,650 --> 00:42:45,970
exist for data then access mostly virus

00:42:42,130 --> 00:42:51,090
by a protocol with that I've rushed to

00:42:45,970 --> 00:42:51,090
the end do we have any quick questions

00:43:05,970 --> 00:43:11,380
is the conflict of texty changes for the

00:43:09,130 --> 00:43:18,190
roast beef I documented on the wiki yet

00:43:11,380 --> 00:43:19,710
I don't quite think so okay Oh what

00:43:18,190 --> 00:43:23,680
about change in particular are you

00:43:19,710 --> 00:43:27,790
asking about just in order to enable

00:43:23,680 --> 00:43:33,430
certain drivers on the GP I was what's

00:43:27,790 --> 00:43:36,250
pi r-squared say so no but in theory the

00:43:33,430 --> 00:43:40,810
documentation that is available on

00:43:36,250 --> 00:43:43,780
raspberry pi dot org should be 99%

00:43:40,810 --> 00:43:45,940
applicable to what we have so like you

00:43:43,780 --> 00:43:48,490
know we still need to configure the the

00:43:45,940 --> 00:43:50,200
convict text to load our u-boot which is

00:43:48,490 --> 00:43:54,280
slightly different from what raspbian

00:43:50,200 --> 00:43:56,470
does listed in the past but we ship the

00:43:54,280 --> 00:43:58,780
same DTP all files that are coming from

00:43:56,470 --> 00:44:01,180
the raspberry pi former repository so

00:43:58,780 --> 00:44:05,470
those can just be used out of the box

00:44:01,180 --> 00:44:15,060
and there's no restrictions on that that

00:44:05,470 --> 00:44:15,060
I'm currently aware of for the questions

00:44:18,870 --> 00:44:23,400
okay then thank you very much for your

00:44:21,160 --> 00:44:23,400
attention

00:44:29,010 --> 00:44:33,670
[Applause]

00:44:31,610 --> 00:44:33,670

YouTube URL: https://www.youtube.com/watch?v=dz_41AexLMU


