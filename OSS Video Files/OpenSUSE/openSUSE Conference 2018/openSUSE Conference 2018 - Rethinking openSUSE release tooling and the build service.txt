Title: openSUSE Conference 2018 - Rethinking openSUSE release tooling and the build service
Publication date: 2018-05-27
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1831-rethinking-opensuse-release-tooling-and-the-build-service

Simplify, improve, and increase transparency

Over the last year I have completed a large amount of work on the tools integral to the openSUSE release process and as such have become familiar with the scope, workflow, and general problems involved. After mulling over these general shortcomings it becomes clear that taking a step back and rethinking some core concepts such as the build service and the way the release tools interact with it is necessary. I have since explored and prototyped a new approach that should drastically reduce the maintenance burden on the openSUSE project while solving major pitfalls, improving transparency, solving a large number of open feature requests, and providing entirely new options.

At this point it seems appropriate to present the concept and prototype to a wider audience before investing too much further. Hopefully, the openSUSE community will be as excited about this direction as I am.

To start, some background on the type of work being done over the last year will be provided. Metrics will be provided to demonstrate the effect and importance of the work. After which details of pitfalls that force a cumbersome workflow will be provided in addition to covering some feature requests and general improvements desired for release work. The new approach will then be explained and how it resolves a large number of these problems while drastically reducing the overall code-base. With the reduction in the code-base along with adapting modern practices it should be easier to involve new contributors.

Preferably key stake holders from OBS and release teams will be present and participate in a healthy discussion.

Over the last year I have completed a large amount of work on the tools integral to the openSUSE release process and as such have become familiar with the scope, workflow, and general problems involved. After mulling over these general shortcomings it becomes clear that taking a step back and rethinking some core concepts such as the build service and the way the release tools interact with it is necessary. I have since explored and prototyped a new approach that should drastically reduce the maintenance burden on the openSUSE project while solving major pitfalls, improving transparency, solving a large number of open feature requests, and providing entirely new options.

At this point it seems appropriate to present the concept and prototype to a wider audience before investing too much further. Hopefully, the openSUSE community will be as excited about this direction as I am.

To start, some background on the type of work being done over the last year will be provided. Metrics will be provided to demonstrate the effect and importance of the work. After which details of pitfalls that force a cumbersome workflow will be provided in addition to covering some feature requests and general improvements desired for release work. The new approach will then be explained and how it resolves a large number of these problems while drastically reducing the overall code-base. With the reduction in the code-base along with adapting modern practices it should be easier to involve new contributors.

Preferably key stake holders from OBS and release teams will be present and participate in a healthy discussion.

Jimmy Berry
Captions: 
	00:00:03,940 --> 00:00:09,210
you

00:00:05,970 --> 00:00:10,590
all right I guess I'll get started so

00:00:09,210 --> 00:00:12,280
for those that don't know me

00:00:10,590 --> 00:00:13,870
spent most

00:00:12,280 --> 00:00:16,090
you're working on the release tools

00:00:13,870 --> 00:00:18,010
which is the bots and things that you

00:00:16,090 --> 00:00:20,400
interact with in factory leap and Slee

00:00:18,010 --> 00:00:24,279
and a bunch of the things that you don't

00:00:20,400 --> 00:00:25,840
so this talk is going to cover basically

00:00:24,279 --> 00:00:29,320
some problems that we've run into and

00:00:25,840 --> 00:00:30,970
possibly a some approaches for resolving

00:00:29,320 --> 00:00:34,600
them so that they aren't pain points nor

00:00:30,970 --> 00:00:37,840
so first of all let's cover the goals

00:00:34,600 --> 00:00:39,070
basically so I imagine most people

00:00:37,840 --> 00:00:41,079
aren't familiar with the current process

00:00:39,070 --> 00:00:42,399
or not a lot so we'll cover that

00:00:41,079 --> 00:00:45,910
somewhat briefly just everyone has an

00:00:42,399 --> 00:00:48,519
idea of kind of what's involved identify

00:00:45,910 --> 00:00:50,980
some of the problems that have come

00:00:48,519 --> 00:00:52,300
about in that area and propose some

00:00:50,980 --> 00:00:55,210
solutions some things that we need

00:00:52,300 --> 00:00:58,539
basically to make those problems go away

00:00:55,210 --> 00:01:01,629
and explore a fresh approach that will

00:00:58,539 --> 00:01:04,120
hopefully do hopefully make those things

00:01:01,629 --> 00:01:06,340
going alright so first of all let's look

00:01:04,120 --> 00:01:07,630
at the current workflow so again this is

00:01:06,340 --> 00:01:08,790
going to be kind of summarized but just

00:01:07,630 --> 00:01:11,530
to give everyone an idea what's going on

00:01:08,790 --> 00:01:13,330
so to start off with you're probably

00:01:11,530 --> 00:01:15,310
most familiar with this which is the

00:01:13,330 --> 00:01:16,479
general idea of the develop projects

00:01:15,310 --> 00:01:17,979
that eventually get submitted into

00:01:16,479 --> 00:01:20,020
factory server one branch is another

00:01:17,979 --> 00:01:21,880
home project does development they're

00:01:20,020 --> 00:01:23,200
smiths to develop projects sometimes

00:01:21,880 --> 00:01:26,350
directly to the develop projects and

00:01:23,200 --> 00:01:28,390
then on to factory but what really

00:01:26,350 --> 00:01:30,759
happens in the factory process is a bit

00:01:28,390 --> 00:01:32,950
more complicated than this so to kinda

00:01:30,759 --> 00:01:34,719
give you an idea there's some of you may

00:01:32,950 --> 00:01:37,149
be familiar with the staging projects

00:01:34,719 --> 00:01:38,409
that precede entrance into factory and

00:01:37,149 --> 00:01:40,450
there's a whole bunch of tools that deal

00:01:38,409 --> 00:01:41,890
with getting the packages into those

00:01:40,450 --> 00:01:44,039
dating projects and evaluating what

00:01:41,890 --> 00:01:46,719
happens in those projects and there's a

00:01:44,039 --> 00:01:48,399
bots as well that you like said have

00:01:46,719 --> 00:01:51,880
probably interacted with that review

00:01:48,399 --> 00:01:53,619
various components of the requests the

00:01:51,880 --> 00:01:55,990
illegal to be and all these everything

00:01:53,619 --> 00:01:58,320
that I put in the cloud basically is not

00:01:55,990 --> 00:02:00,700
running on OBS so these are things that

00:01:58,320 --> 00:02:03,000
are necessary but they're not part of

00:02:00,700 --> 00:02:03,000
OBS

00:02:03,440 --> 00:02:07,130
and of course this doesn't include leap

00:02:05,000 --> 00:02:08,750
which has a separate component the

00:02:07,130 --> 00:02:10,790
crawler that's automatically submits

00:02:08,750 --> 00:02:12,800
packages from factory to leap and it has

00:02:10,790 --> 00:02:15,710
its own copy of basically all the clouds

00:02:12,800 --> 00:02:19,760
that you see for factory its own set of

00:02:15,710 --> 00:02:21,170
all that addition that we also have slee

00:02:19,760 --> 00:02:23,000
which is doing very much the same thing

00:02:21,170 --> 00:02:23,600
at this point any crawlers submitting

00:02:23,000 --> 00:02:25,220
from Slee

00:02:23,600 --> 00:02:27,890
so this crawler has to keep track of

00:02:25,220 --> 00:02:30,040
these sources of the packages and submit

00:02:27,890 --> 00:02:32,180
basically in both directions to leap

00:02:30,040 --> 00:02:33,890
also put something on there for the

00:02:32,180 --> 00:02:35,060
maintenance bots which there are some of

00:02:33,890 --> 00:02:36,530
those so again everything that it's in

00:02:35,060 --> 00:02:38,920
the clouds basically is not running on

00:02:36,530 --> 00:02:41,390
oh yes

00:02:38,920 --> 00:02:43,940
in addition that obviously individual

00:02:41,390 --> 00:02:46,250
develop projects have their own tools

00:02:43,940 --> 00:02:48,020
for updating packages and things like

00:02:46,250 --> 00:02:50,390
that as well as individual packages may

00:02:48,020 --> 00:02:51,740
have scripts that are run as part of

00:02:50,390 --> 00:02:54,170
their update process again outside of

00:02:51,740 --> 00:02:55,430
obvious so basically the point I'm

00:02:54,170 --> 00:02:58,160
trying to drive home is there's a whole

00:02:55,430 --> 00:02:59,570
lot of stuff that is not an OBS that

00:02:58,160 --> 00:03:01,280
would probably be preferable if it could

00:02:59,570 --> 00:03:04,340
live closer to the actual packages and

00:03:01,280 --> 00:03:06,230
things that it's tied to so before I

00:03:04,340 --> 00:03:07,510
dive too much in I want to cover some of

00:03:06,230 --> 00:03:09,320
the efforts over the last year or so

00:03:07,510 --> 00:03:10,400
just to give you an idea of the fact

00:03:09,320 --> 00:03:13,250
that we have have made a bunch of

00:03:10,400 --> 00:03:15,950
changes and that the the outcome has

00:03:13,250 --> 00:03:18,110
been I think positive so that we can

00:03:15,950 --> 00:03:20,810
have some sort of I guess credibility

00:03:18,110 --> 00:03:22,459
for making more changes going forward so

00:03:20,810 --> 00:03:23,780
I think some of my primary goals anyway

00:03:22,459 --> 00:03:25,820
was dawn made as much as possible

00:03:23,780 --> 00:03:27,769
anything that's mundane or people don't

00:03:25,820 --> 00:03:31,070
want to do make it automatic because

00:03:27,769 --> 00:03:32,620
people tend not to do mundane things or

00:03:31,070 --> 00:03:34,940
factor as much of the code to share

00:03:32,620 --> 00:03:36,709
common features so again this is mostly

00:03:34,940 --> 00:03:38,300
been targeted on the bots and and

00:03:36,709 --> 00:03:40,370
whatnot and as well as refactoring them

00:03:38,300 --> 00:03:42,019
to be able to be used on all the

00:03:40,370 --> 00:03:45,230
products some of them were specific to

00:03:42,019 --> 00:03:48,500
factory or leap and things like that so

00:03:45,230 --> 00:03:50,239
making them more generic additionally a

00:03:48,500 --> 00:03:51,590
lot of the bots run in different modes

00:03:50,239 --> 00:03:54,519
on the different products there's a lot

00:03:51,590 --> 00:03:56,450
of options where they'll basically

00:03:54,519 --> 00:03:58,400
implement some policy on one of the

00:03:56,450 --> 00:03:59,630
products and not elsewhere so basically

00:03:58,400 --> 00:04:01,970
trying to abstract that all I was like

00:03:59,630 --> 00:04:03,500
config switches rather than some of the

00:04:01,970 --> 00:04:06,200
various methods used before so it's

00:04:03,500 --> 00:04:08,390
again more easy to manage all this one

00:04:06,200 --> 00:04:09,890
of the other goals has been improving

00:04:08,390 --> 00:04:11,989
the tool communication certain things

00:04:09,890 --> 00:04:14,970
like the repo checker were not terribly

00:04:11,989 --> 00:04:16,620
transparent in when they had issues

00:04:14,970 --> 00:04:18,239
mostly the release team was about the

00:04:16,620 --> 00:04:20,220
only people that could look at the logs

00:04:18,239 --> 00:04:21,720
and really find out was going on so now

00:04:20,220 --> 00:04:24,690
some of you may notice there's a bunch

00:04:21,720 --> 00:04:26,400
of comments um they get dumped whenever

00:04:24,690 --> 00:04:28,730
it has problems which of course

00:04:26,400 --> 00:04:30,780
introduced their own issues with that

00:04:28,730 --> 00:04:31,950
and one of the other areas is since we

00:04:30,780 --> 00:04:33,420
have to run all these services outside

00:04:31,950 --> 00:04:36,720
of OBS we obviously have to deal with

00:04:33,420 --> 00:04:39,360
all the standard problems in deploying

00:04:36,720 --> 00:04:41,130
things to production I monitoring them

00:04:39,360 --> 00:04:43,800
when they go out things like that so

00:04:41,130 --> 00:04:45,780
I've been been improving those things so

00:04:43,800 --> 00:04:47,580
as I mentioned leap and sleep picked up

00:04:45,780 --> 00:04:51,900
a number of the bots and tools that were

00:04:47,580 --> 00:04:53,550
used by tumbleweed and the new package

00:04:51,900 --> 00:04:55,830
list generator basically built to do all

00:04:53,550 --> 00:04:57,390
work with all the products at once so

00:04:55,830 --> 00:05:00,140
these are kind of general improvements

00:04:57,390 --> 00:05:02,490
that being made

00:05:00,140 --> 00:05:04,500
um and then I guess the graph there is

00:05:02,490 --> 00:05:06,600
just give you an idea we've kind of

00:05:04,500 --> 00:05:09,900
ramped up the activity and the main

00:05:06,600 --> 00:05:12,210
release tools over the last year so

00:05:09,900 --> 00:05:14,250
again to summarize the all the main

00:05:12,210 --> 00:05:16,770
tools basically are shared and I

00:05:14,250 --> 00:05:18,150
basically have been posting details that

00:05:16,770 --> 00:05:20,760
address when we make changes if you're

00:05:18,150 --> 00:05:22,500
interested in reading more so one thing

00:05:20,760 --> 00:05:24,660
that I'm really interested in is

00:05:22,500 --> 00:05:26,580
confirming when we make changes as well

00:05:24,660 --> 00:05:28,350
as we can that we actually had the

00:05:26,580 --> 00:05:30,630
desired effect and we didn't cause other

00:05:28,350 --> 00:05:32,700
problems so one of the other things that

00:05:30,630 --> 00:05:34,350
I introduced was metrics that openSUSE

00:05:32,700 --> 00:05:36,930
that work so as all bunch of graphs

00:05:34,350 --> 00:05:38,130
there I'm gonna cover some more easily

00:05:36,930 --> 00:05:40,230
understandable ones without a lot of

00:05:38,130 --> 00:05:41,400
extra context just that basically proved

00:05:40,230 --> 00:05:44,220
that some of the things we deployed over

00:05:41,400 --> 00:05:47,160
the last year had a positive in fact and

00:05:44,220 --> 00:05:49,350
some other interesting things so the

00:05:47,160 --> 00:05:51,240
first one here is the staging bot which

00:05:49,350 --> 00:05:53,750
again if you submit the factory may have

00:05:51,240 --> 00:05:55,860
seen so it does a large portion of the

00:05:53,750 --> 00:05:58,919
first-round staging things like that

00:05:55,860 --> 00:06:02,130
obviously Dominic and others are there

00:05:58,919 --> 00:06:03,540
cleaning up whatever remains but this

00:06:02,130 --> 00:06:07,740
graph basically shows you after we

00:06:03,540 --> 00:06:09,150
deployed it they're around five one that

00:06:07,740 --> 00:06:10,919
you can see the takeover of the green

00:06:09,150 --> 00:06:12,210
basically doing all the initial staging

00:06:10,919 --> 00:06:13,980
work initially enough you can see the

00:06:12,210 --> 00:06:16,770
black lines where there's no data that

00:06:13,980 --> 00:06:18,090
was actually OBS outages so some of

00:06:16,770 --> 00:06:20,210
those things are very obvious to see in

00:06:18,090 --> 00:06:22,200
these the data here similarly leap

00:06:20,210 --> 00:06:24,720
basically a similar trend there the dark

00:06:22,200 --> 00:06:26,699
purple is the staging bots in this graph

00:06:24,720 --> 00:06:30,090
so again taking over a lot of that work

00:06:26,699 --> 00:06:31,560
oh another one of the goals was to

00:06:30,090 --> 00:06:33,360
basically try and stage things as

00:06:31,560 --> 00:06:35,940
quickly as possible because a lot of the

00:06:33,360 --> 00:06:37,770
bots can't do anything until it's staged

00:06:35,940 --> 00:06:40,770
so you don't get feedback until that

00:06:37,770 --> 00:06:42,539
happens so yeah this is crazy a graph

00:06:40,770 --> 00:06:44,190
showing particularly the ADI stagings

00:06:42,539 --> 00:06:46,410
which is things that aren't in the rings

00:06:44,190 --> 00:06:47,669
so basically things that aren't is less

00:06:46,410 --> 00:06:49,199
important I guess so we don't test as

00:06:47,669 --> 00:06:51,030
much but anyway you can see here that

00:06:49,199 --> 00:06:52,860
before it's very clear there in the

00:06:51,030 --> 00:06:54,360
middle around 5:1 again after the

00:06:52,860 --> 00:06:57,180
deployment of the staging BOTS there's a

00:06:54,360 --> 00:06:58,380
huge drop in the time before the first

00:06:57,180 --> 00:07:00,570
staging so everything's basically

00:06:58,380 --> 00:07:02,490
roughly under an hour those spikes after

00:07:00,570 --> 00:07:05,460
that I believe are almost entirely on

00:07:02,490 --> 00:07:07,470
requests that fit into our pseudo state

00:07:05,460 --> 00:07:09,150
of ignored which I haven't filtered out

00:07:07,470 --> 00:07:12,660
in this graph but anyway the vast

00:07:09,150 --> 00:07:14,729
majority is below that line another

00:07:12,660 --> 00:07:16,919
interesting thing just some code

00:07:14,729 --> 00:07:18,900
cleanups bunch of empty commits made

00:07:16,919 --> 00:07:20,099
this some of our internal kind of

00:07:18,900 --> 00:07:21,960
components that the tools share

00:07:20,099 --> 00:07:24,050
information with so you can see the big

00:07:21,960 --> 00:07:26,520
spikes there in the middle and then once

00:07:24,050 --> 00:07:28,110
cleaning up all those basically empty

00:07:26,520 --> 00:07:31,009
useless commits you can see that the

00:07:28,110 --> 00:07:32,880
rated commits drops drastically there

00:07:31,009 --> 00:07:35,310
this one's kind of interesting this is

00:07:32,880 --> 00:07:36,630
the weekly releases of tumbleweed so you

00:07:35,310 --> 00:07:38,909
can see that some weeks we actually hit

00:07:36,630 --> 00:07:42,840
seven which is all of them you can see

00:07:38,909 --> 00:07:44,009
there right on the left side at the end

00:07:42,840 --> 00:07:45,810
of the year that was actually basically

00:07:44,009 --> 00:07:47,400
the end of your vacations so we actually

00:07:45,810 --> 00:07:48,570
had no releases so again all these

00:07:47,400 --> 00:07:52,770
things are kind of interesting to see on

00:07:48,570 --> 00:07:54,449
the graphs again this this isn't so much

00:07:52,770 --> 00:07:55,830
important of demonstrating is I just

00:07:54,449 --> 00:07:57,930
find this interesting but this is the

00:07:55,830 --> 00:08:01,349
develop projects for factory over the

00:07:57,930 --> 00:08:02,729
last was it your almost I guess so you

00:08:01,349 --> 00:08:05,490
can see it's been steadily climbing from

00:08:02,729 --> 00:08:09,419
somewhere around just over 170 to over

00:08:05,490 --> 00:08:12,419
200 kind of inching this is another

00:08:09,419 --> 00:08:14,099
graph basically demonstrates this is the

00:08:12,419 --> 00:08:16,860
percentage of requests staged in each

00:08:14,099 --> 00:08:18,120
letter staging is part of the process so

00:08:16,860 --> 00:08:19,740
you can see that we generally have a

00:08:18,120 --> 00:08:21,599
couple big stagings and lots of little

00:08:19,740 --> 00:08:23,190
ones to me I just find this interesting

00:08:21,599 --> 00:08:25,320
because basically by providing all these

00:08:23,190 --> 00:08:27,180
graphs you can recognize trends that are

00:08:25,320 --> 00:08:30,530
they're very easy to recognize the

00:08:27,180 --> 00:08:33,510
trends that otherwise would be hidden

00:08:30,530 --> 00:08:35,640
so to summarize from those graphs were

00:08:33,510 --> 00:08:36,990
able to see deployments very clearly so

00:08:35,640 --> 00:08:37,990
when we made changes that they had a

00:08:36,990 --> 00:08:39,820
significant effect

00:08:37,990 --> 00:08:41,140
also able to see like I said the OBS

00:08:39,820 --> 00:08:44,649
outages system failures seems like

00:08:41,140 --> 00:08:45,760
that's all very clearly identifiable so

00:08:44,649 --> 00:08:47,260
that we can verify that we're not having

00:08:45,760 --> 00:08:48,460
adverse effects I guess that was the

00:08:47,260 --> 00:08:50,470
other point with the week releases

00:08:48,460 --> 00:08:51,730
you'll notice there was no major like

00:08:50,470 --> 00:08:54,459
drop-off or anything like that it was

00:08:51,730 --> 00:08:56,290
just kind of standard fluctuation the

00:08:54,459 --> 00:09:00,190
whole time so we didn't have any adverse

00:08:56,290 --> 00:09:02,680
effect I guess on the rate so what's

00:09:00,190 --> 00:09:04,779
left to be done so I'm gonna cover some

00:09:02,680 --> 00:09:06,130
of the pain points that I've I've

00:09:04,779 --> 00:09:08,680
identified when working on these tools

00:09:06,130 --> 00:09:10,540
and the general kind of problems that

00:09:08,680 --> 00:09:13,270
come up so one of the biggest ones is

00:09:10,540 --> 00:09:14,410
the low transparency so people that

00:09:13,270 --> 00:09:16,420
aren't part of the release team have a

00:09:14,410 --> 00:09:19,420
hard time many times finding out if

00:09:16,420 --> 00:09:21,070
something's going awry or what is

00:09:19,420 --> 00:09:23,070
actually going on all this stuff that's

00:09:21,070 --> 00:09:25,600
deployed is again not terribly visible

00:09:23,070 --> 00:09:27,490
so you don't necessarily know if they if

00:09:25,600 --> 00:09:28,779
you're just waiting in a queue or if one

00:09:27,490 --> 00:09:31,630
of the bots is dead

00:09:28,779 --> 00:09:34,600
you don't know any of this many of the

00:09:31,630 --> 00:09:36,640
bots don't necessarily just tell you

00:09:34,600 --> 00:09:38,830
when they're done so again it's just

00:09:36,640 --> 00:09:40,450
kind of you can go looking the release

00:09:38,830 --> 00:09:44,130
team members can go look in the logs but

00:09:40,450 --> 00:09:46,570
it's not very useful for everyone else

00:09:44,130 --> 00:09:48,400
yeah and they overall workflow so a lot

00:09:46,570 --> 00:09:49,480
of the possible I add each other after

00:09:48,400 --> 00:09:50,950
they complete what they're doing but

00:09:49,480 --> 00:09:53,080
it's hard necessarily as a contributor

00:09:50,950 --> 00:09:54,640
to go okay well the first bot failed I'm

00:09:53,080 --> 00:09:56,620
gonna fix my thing and then the next bot

00:09:54,640 --> 00:09:59,100
fails like how many steps actually are

00:09:56,620 --> 00:10:01,810
there things like that the overview

00:09:59,100 --> 00:10:03,370
another problem is the notifications so

00:10:01,810 --> 00:10:05,350
right now a lot of the bots report back

00:10:03,370 --> 00:10:07,540
they kind of abuse the the comment

00:10:05,350 --> 00:10:08,980
system because there's no way for them

00:10:07,540 --> 00:10:10,209
to basically post a status report so

00:10:08,980 --> 00:10:12,370
many of the bots will post something

00:10:10,209 --> 00:10:13,510
that's useful if someone wants to go

00:10:12,370 --> 00:10:15,250
look at that request to understand what

00:10:13,510 --> 00:10:17,740
the plot did but it isn't necessarily

00:10:15,250 --> 00:10:19,870
requiring someone to come look at it but

00:10:17,740 --> 00:10:21,040
when we post those comments that are

00:10:19,870 --> 00:10:22,900
basically status reports people you

00:10:21,040 --> 00:10:25,360
notifications right now if you submit

00:10:22,900 --> 00:10:26,470
packages to factory you get a crap ton

00:10:25,360 --> 00:10:28,690
of emails basically for all the

00:10:26,470 --> 00:10:29,920
different stages so I think one of the

00:10:28,690 --> 00:10:32,940
problems is people tend to just ignore

00:10:29,920 --> 00:10:34,540
those emails which isn't terribly useful

00:10:32,940 --> 00:10:37,300
additionally it'd be nice if you had

00:10:34,540 --> 00:10:39,579
some sort of overview to basically look

00:10:37,300 --> 00:10:41,529
at what are all the things as a

00:10:39,579 --> 00:10:42,970
maintainer that basically I need to do

00:10:41,529 --> 00:10:44,800
so all my packages it's made in a

00:10:42,970 --> 00:10:46,060
factory I may have submitted 20 in the

00:10:44,800 --> 00:10:47,320
last week there's two of them that are

00:10:46,060 --> 00:10:49,270
stuck and I want to quickly identify

00:10:47,320 --> 00:10:51,370
which ones those are and what I need to

00:10:49,270 --> 00:10:52,930
do

00:10:51,370 --> 00:10:54,940
and the last note I guess there is some

00:10:52,930 --> 00:10:56,140
of the bots aren't able to clean up

00:10:54,940 --> 00:10:59,650
their cubs as well that there again

00:10:56,140 --> 00:11:01,060
using a status reports so so for example

00:10:59,650 --> 00:11:02,710
the repo checker post comments on

00:11:01,060 --> 00:11:04,780
develop projects which it can't remove

00:11:02,710 --> 00:11:06,010
so you kind of don't know is this still

00:11:04,780 --> 00:11:10,560
actually a problem it's kind of

00:11:06,010 --> 00:11:10,560
ambiguous so that's another issue

00:11:11,440 --> 00:11:15,250
issue tracking so some of the bots will

00:11:13,660 --> 00:11:16,990
send out emails there's about to send

00:11:15,250 --> 00:11:19,000
emails to pen or remind people outside

00:11:16,990 --> 00:11:22,600
of OBS in addition to OBS as emails

00:11:19,000 --> 00:11:23,980
about build failures there's a lot of

00:11:22,600 --> 00:11:27,820
other issues we'd like to notify about

00:11:23,980 --> 00:11:28,960
certain um so basically has to

00:11:27,820 --> 00:11:30,790
maintainer Harry there can you do

00:11:28,960 --> 00:11:32,470
something about this that whole kind of

00:11:30,790 --> 00:11:35,110
escalation process I think really could

00:11:32,470 --> 00:11:37,390
be handled as proper issues attached to

00:11:35,110 --> 00:11:39,010
the packages that again it's all tied

00:11:37,390 --> 00:11:40,240
together rather than basically all these

00:11:39,010 --> 00:11:44,260
emails and kind of tools that live

00:11:40,240 --> 00:11:46,120
outside OBS in addition the release team

00:11:44,260 --> 00:11:47,920
uses a diary outside of OBS to basically

00:11:46,120 --> 00:11:49,150
communicate what we're doing also use

00:11:47,920 --> 00:11:50,500
the comments on the projects but

00:11:49,150 --> 00:11:53,010
everyone sees those and again it can be

00:11:50,500 --> 00:11:55,150
spammy with emails so kind of having a

00:11:53,010 --> 00:11:57,070
that could also be done with issues

00:11:55,150 --> 00:11:58,390
relate to the staging projects so again

00:11:57,070 --> 00:12:00,460
there's some sort of kind of generic

00:11:58,390 --> 00:12:03,750
issue management stuff that's all typed

00:12:00,460 --> 00:12:05,890
OBS would be really nice for all this

00:12:03,750 --> 00:12:07,420
and be able to cross-reference because

00:12:05,890 --> 00:12:08,530
that's one of the biggest problems is a

00:12:07,420 --> 00:12:10,240
lot of times these things are all

00:12:08,530 --> 00:12:11,170
separate and you end up having to post

00:12:10,240 --> 00:12:12,190
all over the place that you did

00:12:11,170 --> 00:12:14,730
something whereas it be nice to just

00:12:12,190 --> 00:12:14,730
reference it

00:12:15,139 --> 00:12:19,050
complexities and other issues all the

00:12:17,189 --> 00:12:20,309
tools since they live outside OBS all

00:12:19,050 --> 00:12:22,709
have to do their own bootstrapping they

00:12:20,309 --> 00:12:24,239
have to have their own accounts a lot of

00:12:22,709 --> 00:12:26,369
them have caches some of them fairly

00:12:24,239 --> 00:12:29,519
extensive hundreds of gigs things like

00:12:26,369 --> 00:12:30,689
that they all basically have to pick up

00:12:29,519 --> 00:12:33,029
where they left off figure out what the

00:12:30,689 --> 00:12:34,259
state is there's a lot of just muck

00:12:33,029 --> 00:12:35,519
basically that isn't too particularly

00:12:34,259 --> 00:12:36,869
interesting to what the bots actually

00:12:35,519 --> 00:12:40,860
wants to accomplish that they all have

00:12:36,869 --> 00:12:42,329
to have and for in one one big one I

00:12:40,860 --> 00:12:45,360
think is the Reaper ticker which

00:12:42,329 --> 00:12:48,209
essentially has to re-implement the way

00:12:45,360 --> 00:12:50,309
OBS does project snacking just because

00:12:48,209 --> 00:12:51,809
it ends up having to verify its basic

00:12:50,309 --> 00:12:54,989
doing a install time check of all the

00:12:51,809 --> 00:12:56,819
packages so we can tell if packages and

00:12:54,989 --> 00:12:57,660
stagings are actually installable and it

00:12:56,819 --> 00:12:59,429
basically has to re-implement

00:12:57,660 --> 00:13:01,139
essentially what OBS is already doing to

00:12:59,429 --> 00:13:02,730
do builds which is the way the stating

00:13:01,139 --> 00:13:08,579
projects layer on top of factory and

00:13:02,730 --> 00:13:10,679
things which again is not ideal some of

00:13:08,579 --> 00:13:12,420
the other issues at least with minut

00:13:10,679 --> 00:13:16,040
things with the tools would probably be

00:13:12,420 --> 00:13:21,749
nice if we had something like git

00:13:16,040 --> 00:13:23,850
version trying to do some things but the

00:13:21,749 --> 00:13:25,559
other issue is some of the metadata that

00:13:23,850 --> 00:13:28,170
exists relate to packages and the config

00:13:25,559 --> 00:13:30,119
is outside the realm of requests certain

00:13:28,170 --> 00:13:32,220
things special cases are changeable by

00:13:30,119 --> 00:13:33,660
requests but other things aren't so some

00:13:32,220 --> 00:13:35,069
of the things that have to be changed as

00:13:33,660 --> 00:13:36,540
far as the project config that need to

00:13:35,069 --> 00:13:38,369
go along with packages that are staged

00:13:36,540 --> 00:13:39,839
that's just something the release team

00:13:38,369 --> 00:13:41,369
has to manage so basically making those

00:13:39,839 --> 00:13:42,749
changes both in staging and when those

00:13:41,369 --> 00:13:44,730
requests are accepted making them in the

00:13:42,749 --> 00:13:46,649
actual project so having some sort of

00:13:44,730 --> 00:13:48,629
having them either live in their home

00:13:46,649 --> 00:13:49,740
that can be changed or a special request

00:13:48,629 --> 00:13:53,009
for them or something along that lines

00:13:49,740 --> 00:13:55,019
so that those changes could be possibly

00:13:53,009 --> 00:13:57,839
a even created by people outside the

00:13:55,019 --> 00:13:59,069
release team or be added to the stagings

00:13:57,839 --> 00:14:00,209
and then automatically carried over we

00:13:59,069 --> 00:14:04,199
can obviously implement this in our

00:14:00,209 --> 00:14:05,759
release tools but again these are I just

00:14:04,199 --> 00:14:09,600
don't think that's it's just a lot of

00:14:05,759 --> 00:14:11,339
stuff to live outside oh yes so this is

00:14:09,600 --> 00:14:13,679
all the bots right now do pulling

00:14:11,339 --> 00:14:15,600
obviously there's been some movement to

00:14:13,679 --> 00:14:17,069
try and switch over to an event based

00:14:15,600 --> 00:14:18,989
system so again this would probably eat

00:14:17,069 --> 00:14:20,759
up the bots response time in a variety

00:14:18,989 --> 00:14:23,040
of areas and reduce their amount of

00:14:20,759 --> 00:14:26,309
calls double yes that's again that would

00:14:23,040 --> 00:14:27,570
be nice authentication was another one

00:14:26,309 --> 00:14:28,710
that I mentioned earlier

00:14:27,570 --> 00:14:31,260
so all the bots have to have their own

00:14:28,710 --> 00:14:32,370
accounts although this account

00:14:31,260 --> 00:14:34,500
information is typically in shared

00:14:32,370 --> 00:14:36,150
environments which personally if someone

00:14:34,500 --> 00:14:37,830
wanted to do something nefarious it

00:14:36,150 --> 00:14:38,790
would be possibly harder to track down

00:14:37,830 --> 00:14:40,890
because some of these bots have

00:14:38,790 --> 00:14:43,890
relatively elevated permissions so again

00:14:40,890 --> 00:14:46,530
that's kind of potential issue and there

00:14:43,890 --> 00:14:47,910
was an incident with authentication

00:14:46,530 --> 00:14:49,410
where one of the bots was actually

00:14:47,910 --> 00:14:51,540
blocked because they were doing some

00:14:49,410 --> 00:14:52,890
migration and it just kept saying hello

00:14:51,540 --> 00:14:54,390
so that whole the whole issue of

00:14:52,890 --> 00:14:59,010
authentication would be nice if we could

00:14:54,390 --> 00:15:00,900
avoid it some of the other problems

00:14:59,010 --> 00:15:02,280
modifying all this stuff again can

00:15:00,900 --> 00:15:04,530
require creation of all these accounts

00:15:02,280 --> 00:15:06,350
we have to deploy things again outside

00:15:04,530 --> 00:15:08,490
of OBS you can't just turn something on

00:15:06,350 --> 00:15:10,250
and so some of this can be difficult to

00:15:08,490 --> 00:15:14,070
simulate based on the way all

00:15:10,250 --> 00:15:15,510
interrelate so again people that aren't

00:15:14,070 --> 00:15:17,400
necessarily familiar this ends up being

00:15:15,510 --> 00:15:20,010
like maintenance of like lots of little

00:15:17,400 --> 00:15:23,130
services that run outside of OBS so it's

00:15:20,010 --> 00:15:28,500
just a bunch of work that hopefully we

00:15:23,130 --> 00:15:30,150
could avoid as if that was enough we do

00:15:28,500 --> 00:15:31,710
all this work and it only works for the

00:15:30,150 --> 00:15:33,720
main products so a lot of these tools

00:15:31,710 --> 00:15:35,310
can't work for the develop projects or

00:15:33,720 --> 00:15:37,080
if they did we'd have to have possibly

00:15:35,310 --> 00:15:38,520
additional resources to run them they

00:15:37,080 --> 00:15:40,590
don't run again it'd be nice if we could

00:15:38,520 --> 00:15:43,440
run them on the same workers as OBS so

00:15:40,590 --> 00:15:44,790
that it scales a lot better so some of

00:15:43,440 --> 00:15:46,350
the potential things that would be nice

00:15:44,790 --> 00:15:48,660
to apply that develop projects possibly

00:15:46,350 --> 00:15:50,310
even more involve develop projects would

00:15:48,660 --> 00:15:51,690
be the staging process itself or at

00:15:50,310 --> 00:15:53,370
least some of the review bots the

00:15:51,690 --> 00:15:55,260
runtime checks has been requested a

00:15:53,370 --> 00:15:57,480
number of times by develop projects

00:15:55,260 --> 00:15:59,100
because they can't see those problems

00:15:57,480 --> 00:16:01,560
without manually checking until they

00:15:59,100 --> 00:16:04,320
submit the factory and again any of

00:16:01,560 --> 00:16:06,270
those custom scripts that exist would

00:16:04,320 --> 00:16:10,260
again be really nice to have run there

00:16:06,270 --> 00:16:12,120
so enough of all the pain points what

00:16:10,260 --> 00:16:13,680
what can we really boil down that we

00:16:12,120 --> 00:16:16,920
actually need to resolve a lot of this I

00:16:13,680 --> 00:16:19,110
think the main piece would be some sort

00:16:16,920 --> 00:16:21,060
of general continuous integration style

00:16:19,110 --> 00:16:22,440
setup like you've seen elsewhere we're

00:16:21,060 --> 00:16:24,690
basically a lot of these scripts that

00:16:22,440 --> 00:16:25,980
basically aren't of interest to the OBS

00:16:24,690 --> 00:16:27,990
team to maintain and I don't think they

00:16:25,980 --> 00:16:30,120
should could at least run on OBS so they

00:16:27,990 --> 00:16:31,200
scale properly that would resolve a lot

00:16:30,120 --> 00:16:34,410
of the deployment problems things like

00:16:31,200 --> 00:16:35,850
that and the events and all that

00:16:34,410 --> 00:16:37,050
bootstrapping I think up a lot of that

00:16:35,850 --> 00:16:38,970
could be done away with because

00:16:37,050 --> 00:16:40,510
basically you just have a simpler drop

00:16:38,970 --> 00:16:43,180
that runs on one particular conte

00:16:40,510 --> 00:16:45,670
and they seek it's just triggered when

00:16:43,180 --> 00:16:47,050
it's supposed to run another interesting

00:16:45,670 --> 00:16:50,500
things some of the bots have to manage

00:16:47,050 --> 00:16:52,240
artifacts outside of o-p-s and there has

00:16:50,500 --> 00:16:54,010
to be basically they have to be dealt

00:16:52,240 --> 00:16:56,110
with storing them somewhere and again

00:16:54,010 --> 00:16:58,600
it's all kind of a mess there are other

00:16:56,110 --> 00:16:59,980
tools out there that would manage that

00:16:58,600 --> 00:17:01,660
sort of thing kind of the same way that

00:16:59,980 --> 00:17:03,550
OBS stores rpms right now but basically

00:17:01,660 --> 00:17:06,520
almost or have arbitrary stuff attached

00:17:03,550 --> 00:17:07,809
ECI jobs would be nice another nice

00:17:06,520 --> 00:17:09,699
thing would be like a set of everything

00:17:07,809 --> 00:17:11,140
looking kit especially the configs and

00:17:09,699 --> 00:17:13,120
meta and all that kind of stuff so that

00:17:11,140 --> 00:17:15,010
week it's basically if it all lived in

00:17:13,120 --> 00:17:16,780
the same version control system as the

00:17:15,010 --> 00:17:18,030
packaged source then for the same reason

00:17:16,780 --> 00:17:20,530
that I think it's been adopted elsewhere

00:17:18,030 --> 00:17:22,870
things like changing your like Travis

00:17:20,530 --> 00:17:24,549
config when you add a new component to

00:17:22,870 --> 00:17:25,900
test more things you know do that

00:17:24,549 --> 00:17:28,020
altogether really makes a lot of sense

00:17:25,900 --> 00:17:29,500
rather than having them be separate

00:17:28,020 --> 00:17:31,299
obviously if we're going to use

00:17:29,500 --> 00:17:33,520
something like it we would need one of

00:17:31,299 --> 00:17:36,100
the large file system solutions to avoid

00:17:33,520 --> 00:17:41,940
having to store the actual source

00:17:36,100 --> 00:17:44,470
upstream sources in the git tree and

00:17:41,940 --> 00:17:46,150
back to what I admitted earlier said

00:17:44,470 --> 00:17:47,860
having some sort of package level issue

00:17:46,150 --> 00:17:50,080
tracking where maintainer can very

00:17:47,860 --> 00:17:51,549
quickly go and see okay hey in the last

00:17:50,080 --> 00:17:53,890
overnight I submitted a bunch of

00:17:51,549 --> 00:17:55,390
packages two of them have issues one of

00:17:53,890 --> 00:17:57,309
them one of them is not installable and

00:17:55,390 --> 00:17:58,600
you know the other one doesn't build in

00:17:57,309 --> 00:18:01,000
the staging and very quickly be able

00:17:58,600 --> 00:18:02,380
identify that so those are I think

00:18:01,000 --> 00:18:04,870
basically the three big things there

00:18:02,380 --> 00:18:08,350
that would resolve the majority of these

00:18:04,870 --> 00:18:08,710
problems so do those three things sound

00:18:08,350 --> 00:18:12,040
familiar

00:18:08,710 --> 00:18:15,940
I think they do go I think it sounds

00:18:12,040 --> 00:18:17,860
like gitlab so interestingly enough if

00:18:15,940 --> 00:18:21,040
we used gate lab I think we get some

00:18:17,860 --> 00:18:24,250
nice bonus features for doing this so

00:18:21,040 --> 00:18:26,290
for example per line reviews things like

00:18:24,250 --> 00:18:27,520
that where you can have threads so it

00:18:26,290 --> 00:18:30,010
makes the review process a little easier

00:18:27,520 --> 00:18:31,570
specifying what's the issue

00:18:30,010 --> 00:18:33,280
cross referencing works so you can

00:18:31,570 --> 00:18:35,679
reference between requests and issues

00:18:33,280 --> 00:18:37,059
and all that stuff and when requests go

00:18:35,679 --> 00:18:39,160
in you can have actions attached to them

00:18:37,059 --> 00:18:43,450
so basically you close closed out issues

00:18:39,160 --> 00:18:44,710
or all sorts of other stuff something

00:18:43,450 --> 00:18:46,720
would be really nice for the release

00:18:44,710 --> 00:18:48,730
team would be being able to group all

00:18:46,720 --> 00:18:51,130
these things into stuff that's visible

00:18:48,730 --> 00:18:53,140
on the actual main tool so for example

00:18:51,130 --> 00:18:54,190
we have some custom dashboards that do

00:18:53,140 --> 00:18:55,269
some of this but we

00:18:54,190 --> 00:18:57,580
that's all on the box if we use

00:18:55,269 --> 00:19:03,789
something like labels or milestones to

00:18:57,580 --> 00:19:05,200
attach all of the requests itchin enough

00:19:03,789 --> 00:19:06,519
also has container registry which is

00:19:05,200 --> 00:19:10,110
something that OBS has been adding

00:19:06,519 --> 00:19:12,190
recently and mobile interface works well

00:19:10,110 --> 00:19:13,899
lots of little stuff that we get as

00:19:12,190 --> 00:19:16,899
bonus features so which are all probably

00:19:13,899 --> 00:19:18,639
saying but we have to add all we have to

00:19:16,899 --> 00:19:22,299
at least have the base features to be

00:19:18,639 --> 00:19:24,519
able to do builds so interesting enough

00:19:22,299 --> 00:19:25,750
the gate lab upstream is already dealing

00:19:24,519 --> 00:19:28,509
with one of the biggest problems which

00:19:25,750 --> 00:19:29,889
is in a relation between projects so

00:19:28,509 --> 00:19:31,149
that you can basically have CI jobs that

00:19:29,889 --> 00:19:33,129
depend on each other different

00:19:31,149 --> 00:19:34,659
repositories so it's already a lot of

00:19:33,129 --> 00:19:37,299
work there but I think generally it

00:19:34,659 --> 00:19:38,100
boils down to generating the repo

00:19:37,299 --> 00:19:40,419
metadata

00:19:38,100 --> 00:19:42,250
so you actually have a repository that

00:19:40,419 --> 00:19:44,230
you can install things out of and a

00:19:42,250 --> 00:19:46,149
basic scheduling in the same way that

00:19:44,230 --> 00:19:48,070
OBS does it which again these are all

00:19:46,149 --> 00:19:49,269
kind of interrelated these stacking and

00:19:48,070 --> 00:19:51,789
everything like it has to be done in

00:19:49,269 --> 00:19:54,610
Reaper ticker all that is basically tied

00:19:51,789 --> 00:19:57,340
together essentially enough I think if

00:19:54,610 --> 00:19:59,320
we were to do this at least for the

00:19:57,340 --> 00:20:00,759
staging workflows things like that I

00:19:59,320 --> 00:20:02,529
think it could be achieved with

00:20:00,759 --> 00:20:04,629
something like a source sync similar the

00:20:02,529 --> 00:20:06,100
way OBS IBS bridge works where you

00:20:04,629 --> 00:20:09,309
basically sync all the sources back to

00:20:06,100 --> 00:20:10,899
OBS and additionally you could expose

00:20:09,309 --> 00:20:13,149
the binaries the same way sleep binaries

00:20:10,899 --> 00:20:16,509
are done where they weren't built on OBS

00:20:13,149 --> 00:20:18,549
but they are accessible there so I have

00:20:16,509 --> 00:20:21,460
a prototype of this which I will show

00:20:18,549 --> 00:20:22,500
just as so you can see what I'm talking

00:20:21,460 --> 00:20:25,059
about

00:20:22,500 --> 00:20:27,250
it's basically here I'm building one of

00:20:25,059 --> 00:20:28,779
my packages that I maintain a burner so

00:20:27,250 --> 00:20:31,570
you can see a building this is get lab

00:20:28,779 --> 00:20:32,529
if you're not familiar so you can see

00:20:31,570 --> 00:20:34,419
there on the right side you have

00:20:32,529 --> 00:20:36,519
previous builds that failed click

00:20:34,419 --> 00:20:37,779
through it all it has artifacts so you

00:20:36,519 --> 00:20:40,240
could download all of them so I can tell

00:20:37,779 --> 00:20:41,740
all the rpms at once or I can browse

00:20:40,240 --> 00:20:43,409
them browsing them this would look like

00:20:41,740 --> 00:20:45,250
I was looking at the new Oryx directory

00:20:43,409 --> 00:20:45,789
so you could see all the RPMs are

00:20:45,250 --> 00:20:47,230
produced

00:20:45,789 --> 00:20:50,019
it already has a preview screen which

00:20:47,230 --> 00:20:53,289
you can obviously add to expose the RPM

00:20:50,019 --> 00:20:56,350
metadata if you wanted I think the most

00:20:53,289 --> 00:20:59,259
exciting part of this whole prototype is

00:20:56,350 --> 00:21:00,549
I built basically well you can serve the

00:20:59,259 --> 00:21:01,809
repo metadata so this is basically

00:21:00,549 --> 00:21:04,629
serving directly out of get labs

00:21:01,809 --> 00:21:05,919
artifact storage so as the publishing

00:21:04,629 --> 00:21:06,910
workflow doesn't require copying

00:21:05,919 --> 00:21:08,440
anything

00:21:06,910 --> 00:21:09,730
our moving files around can serve it

00:21:08,440 --> 00:21:11,350
directly out to collab so you get all

00:21:09,730 --> 00:21:12,760
the features of get lab keeping track of

00:21:11,350 --> 00:21:13,000
all the artifacts and clean it up for

00:21:12,760 --> 00:21:15,610
you

00:21:13,000 --> 00:21:17,140
instantly enough so this is just the

00:21:15,610 --> 00:21:18,190
same thing but showing you the packages

00:21:17,140 --> 00:21:20,080
that it's serving at it so the only

00:21:18,190 --> 00:21:22,600
thing to pay attention here is the

00:21:20,080 --> 00:21:24,550
platform SH and rush at the top so if

00:21:22,600 --> 00:21:26,650
you notice the URL has the word latest

00:21:24,550 --> 00:21:28,270
at the end so I can actually serve

00:21:26,650 --> 00:21:29,860
revisions out of this which i think is

00:21:28,270 --> 00:21:31,450
the most exciting part so for example

00:21:29,860 --> 00:21:32,890
this would have been the repository or

00:21:31,450 --> 00:21:35,470
this was the repository state before I

00:21:32,890 --> 00:21:37,240
added the platform SH and drush packages

00:21:35,470 --> 00:21:40,030
so basically it only has the admin or

00:21:37,240 --> 00:21:42,640
packages this already works off see if

00:21:40,030 --> 00:21:44,650
you plug it into zipper it's happy to

00:21:42,640 --> 00:21:46,300
present those so the benefits of having

00:21:44,650 --> 00:21:50,680
revisions of repositories I think are

00:21:46,300 --> 00:21:51,880
normal the biggest thing is that right

00:21:50,680 --> 00:21:53,830
now the whole workflow of having

00:21:51,880 --> 00:21:55,030
standard and to test or we're copying

00:21:53,830 --> 00:21:56,530
all the binaries around could be

00:21:55,030 --> 00:21:58,990
unnecessary because you basically just

00:21:56,530 --> 00:22:00,910
take a build and you tag it as being to

00:21:58,990 --> 00:22:03,070
test and we use that revision until we

00:22:00,910 --> 00:22:04,330
move on and then when we're done with

00:22:03,070 --> 00:22:05,500
that we tag it as the standard so

00:22:04,330 --> 00:22:07,300
basically everyone builds against those

00:22:05,500 --> 00:22:10,270
and it just simply references a revision

00:22:07,300 --> 00:22:11,470
of the entire repository instantly

00:22:10,270 --> 00:22:14,830
enough this also means that if you

00:22:11,470 --> 00:22:16,420
extended this to home projects things

00:22:14,830 --> 00:22:17,890
like the issue the OBS team ran into

00:22:16,420 --> 00:22:19,630
where they deploy out of a repository

00:22:17,890 --> 00:22:20,980
and are able to easily go back because

00:22:19,630 --> 00:22:22,960
they update a bunch of the dependencies

00:22:20,980 --> 00:22:25,630
things like that if you had revisions of

00:22:22,960 --> 00:22:26,620
the repository that'll be trivial so I

00:22:25,630 --> 00:22:28,330
think they'll be really cool something

00:22:26,620 --> 00:22:30,490
like totally snapshots becomes built-in

00:22:28,330 --> 00:22:32,920
so basically you just tag every release

00:22:30,490 --> 00:22:35,290
your revisions and you keep X amount of

00:22:32,920 --> 00:22:36,400
whatever you want they're all there I

00:22:35,290 --> 00:22:38,020
think the same thing applies to

00:22:36,400 --> 00:22:39,520
something like open QA or they want

00:22:38,020 --> 00:22:41,560
revisions of the repositories things

00:22:39,520 --> 00:22:44,470
like that so you can just do this all

00:22:41,560 --> 00:22:46,990
out of the main repository Delta rpms

00:22:44,470 --> 00:22:49,150
same thing if you have the previous

00:22:46,990 --> 00:22:51,790
revisions easily accessible that becomes

00:22:49,150 --> 00:22:54,460
trivial might also be interesting that

00:22:51,790 --> 00:22:56,620
you could do parallel releases because

00:22:54,460 --> 00:22:59,290
you could basically be running open QA

00:22:56,620 --> 00:23:00,820
on a on say you check in one staging an

00:22:59,290 --> 00:23:02,470
hour later you check in another staging

00:23:00,820 --> 00:23:03,730
you could have both of those revisions

00:23:02,470 --> 00:23:05,590
and be testing them independent of each

00:23:03,730 --> 00:23:10,060
other would you be kind of neat so you

00:23:05,590 --> 00:23:12,430
wouldn't have to block so next thing to

00:23:10,060 --> 00:23:14,620
cover this is a prototype basically

00:23:12,430 --> 00:23:16,420
another prototype with a mock-up I made

00:23:14,620 --> 00:23:17,560
a half a year ago about possibly

00:23:16,420 --> 00:23:19,810
improving the transparency of the

00:23:17,560 --> 00:23:21,100
staging workflow

00:23:19,810 --> 00:23:22,840
so as you can see it just kind of shows

00:23:21,100 --> 00:23:24,760
you the overall steps has checkmarks

00:23:22,840 --> 00:23:26,890
things that are done interesting enough

00:23:24,760 --> 00:23:28,150
I think you can achieve something very

00:23:26,890 --> 00:23:30,960
similar to this almost out of the box

00:23:28,150 --> 00:23:33,190
with get lab so if you look here

00:23:30,960 --> 00:23:35,620
basically you have the reviews that need

00:23:33,190 --> 00:23:37,540
to be done this is a little Seuss the

00:23:35,620 --> 00:23:38,560
little icon there is basically

00:23:37,540 --> 00:23:39,640
representing the review team having

00:23:38,560 --> 00:23:42,370
approved it but it still needs to be

00:23:39,640 --> 00:23:44,080
approved by other maintainer is the

00:23:42,370 --> 00:23:46,090
package and you can also communicate

00:23:44,080 --> 00:23:47,650
very clearly that it was staged there

00:23:46,090 --> 00:23:50,170
using the deployments feature so it's

00:23:47,650 --> 00:23:55,720
staged in a and you can see that it's

00:23:50,170 --> 00:23:57,340
building all that so in this example I

00:23:55,720 --> 00:24:00,670
basically have the factory Autobot and

00:23:57,340 --> 00:24:02,200
the repo checkers delete check which

00:24:00,670 --> 00:24:03,940
does not require staging running ahead

00:24:02,200 --> 00:24:05,140
of time so they run by themselves you

00:24:03,940 --> 00:24:06,610
can very good easy to click through

00:24:05,140 --> 00:24:08,590
those and see the previous pages I

00:24:06,610 --> 00:24:10,060
showed before with the log output so

00:24:08,590 --> 00:24:13,300
again this becomes very transparent

00:24:10,060 --> 00:24:16,420
everyone can see what's going on for the

00:24:13,300 --> 00:24:17,890
release team as well you can use the

00:24:16,420 --> 00:24:19,540
deployments feature which basically has

00:24:17,890 --> 00:24:22,930
an interface so we can now do the entire

00:24:19,540 --> 00:24:24,520
staging process through the web guy or

00:24:22,930 --> 00:24:27,100
the API itself but it doesn't have to be

00:24:24,520 --> 00:24:29,320
done outside via tools so that's kind of

00:24:27,100 --> 00:24:30,970
cool and people again can see this so

00:24:29,320 --> 00:24:32,590
basically if people were submitting to

00:24:30,970 --> 00:24:33,910
factory they could see this pipeline

00:24:32,590 --> 00:24:36,250
there and they could see that okay I

00:24:33,910 --> 00:24:37,600
have to pass those to bots and then I go

00:24:36,250 --> 00:24:39,190
to the staging process and they can very

00:24:37,600 --> 00:24:43,660
clearly see hey it hasn't been staged

00:24:39,190 --> 00:24:45,700
yet so back to this so if we look at the

00:24:43,660 --> 00:24:49,000
fact that it was staged we can see the

00:24:45,700 --> 00:24:50,590
build results there and the same thing

00:24:49,000 --> 00:24:52,840
with the pipeline just some of you may

00:24:50,590 --> 00:24:58,030
be more familiar this if you've used git

00:24:52,840 --> 00:24:59,950
lab extensively so this is basically

00:24:58,030 --> 00:25:01,690
what the build results look like so you

00:24:59,950 --> 00:25:03,310
can down with the artifacts or reit

00:25:01,690 --> 00:25:05,310
rigger them so all the all the sort of

00:25:03,310 --> 00:25:11,230
base features you need there are there

00:25:05,310 --> 00:25:12,430
so to wrap up basically revisit our

00:25:11,230 --> 00:25:14,700
original goals so we covered the

00:25:12,430 --> 00:25:17,890
workflow identify the problem areas

00:25:14,700 --> 00:25:20,350
fresh solution so let's evaluate the

00:25:17,890 --> 00:25:22,600
solution so I think it it definitely

00:25:20,350 --> 00:25:24,990
resolves a lot of the major paint points

00:25:22,600 --> 00:25:27,340
we get a bunch of extra features with it

00:25:24,990 --> 00:25:29,760
also means we don't have to maintain a

00:25:27,340 --> 00:25:29,760
bunch of code

00:25:30,679 --> 00:25:36,269
anyway so I think it's uh I like said I

00:25:33,809 --> 00:25:40,379
think the the storing the revisions in

00:25:36,269 --> 00:26:12,720
general is really useful so questions

00:25:40,379 --> 00:26:14,970
your cards thanks for the talk

00:26:12,720 --> 00:26:17,700
so the build would happen in get lap

00:26:14,970 --> 00:26:20,879
right yeah so and and for instance how

00:26:17,700 --> 00:26:23,970
do you scale out so if you need 100

00:26:20,879 --> 00:26:26,220
workers or something so how would that

00:26:23,970 --> 00:26:30,149
work I guess I'm not familiar with

00:26:26,220 --> 00:26:31,470
gillip well it has its I think he

00:26:30,149 --> 00:26:32,759
already has integration with things like

00:26:31,470 --> 00:26:34,320
kubernetes and stuff like that that you

00:26:32,759 --> 00:26:36,539
can use so basically as a way to manage

00:26:34,320 --> 00:26:37,919
workers so it'd be somewhere I mentioned

00:26:36,539 --> 00:26:42,149
the way OBS is deployed you just need

00:26:37,919 --> 00:26:44,190
machines basically have you thought

00:26:42,149 --> 00:26:46,799
about at least moving some of the stuff

00:26:44,190 --> 00:26:48,899
in OBS services of some new kind of way

00:26:46,799 --> 00:26:52,499
because then we could also like use

00:26:48,899 --> 00:26:53,940
obvious workers for things yeah so some

00:26:52,499 --> 00:26:55,499
of the things like I said that kind of

00:26:53,940 --> 00:26:56,879
having access to some sort of general CI

00:26:55,499 --> 00:26:58,830
that would run on OBS would be another

00:26:56,879 --> 00:27:01,200
way you could obviously achieve at least

00:26:58,830 --> 00:27:06,600
the main part of running all the tools

00:27:01,200 --> 00:27:09,230
alongside OBS but be something I think

00:27:06,600 --> 00:27:09,230
that needs to be worked on

00:27:14,140 --> 00:27:19,600
I think also on one point what you

00:27:17,230 --> 00:27:21,610
missed what but this one key feature of

00:27:19,600 --> 00:27:24,250
or basis interconnecting different

00:27:21,610 --> 00:27:27,520
instances so that we have polygons

00:27:24,250 --> 00:27:31,150
pac-man or the internal OBS fits against

00:27:27,520 --> 00:27:32,520
the external so how do we mention how

00:27:31,150 --> 00:27:35,230
that would work

00:27:32,520 --> 00:27:37,660
um so I think there's no reason not to

00:27:35,230 --> 00:27:39,220
basically just use gill app based

00:27:37,660 --> 00:27:40,990
Garrity has mirroring so you just mirror

00:27:39,220 --> 00:27:42,940
the sources themselves and you can

00:27:40,990 --> 00:27:44,440
expose the repositories basically the

00:27:42,940 --> 00:27:46,510
same way so that repo data generation

00:27:44,440 --> 00:27:49,540
just exposed so basically looks the same

00:27:46,510 --> 00:27:51,520
way as the way the what he call it a

00:27:49,540 --> 00:27:54,100
sleep I Nerys are exposed to Oh PS

00:27:51,520 --> 00:27:57,059
basically the same thing so you know it

00:27:54,100 --> 00:27:57,059
shouldn't anything special there

00:28:01,380 --> 00:28:13,929
anything else oh that I don't know like

00:28:12,340 --> 00:28:16,270
I said I have the the prototype that I

00:28:13,929 --> 00:28:19,600
showed that has the basic features but

00:28:16,270 --> 00:28:22,750
it's obviously missing specifically the

00:28:19,600 --> 00:28:26,140
proper scheduling so it can only do kind

00:28:22,750 --> 00:28:27,580
of localized scheduling but I don't kind

00:28:26,140 --> 00:28:28,720
of depends I guess if people like this

00:28:27,580 --> 00:28:42,340
idea or not more than what I work

00:28:28,720 --> 00:28:47,520
anymore so I found all what you

00:28:42,340 --> 00:28:50,980
presented very impressive and convincing

00:28:47,520 --> 00:28:54,100
but to make it more clear do you want to

00:28:50,980 --> 00:28:55,990
single-handedly replace obvious well I

00:28:54,100 --> 00:28:58,240
guess that's when I threw out as you

00:28:55,990 --> 00:29:00,160
could still sync the two so basically I

00:28:58,240 --> 00:29:01,660
would imagine if you were to use this

00:29:00,160 --> 00:29:03,070
that we at least target just the

00:29:01,660 --> 00:29:04,750
features we need it develop o-p-s and

00:29:03,070 --> 00:29:06,820
that way you can still do image building

00:29:04,750 --> 00:29:09,520
and all the other stuff that I'm not

00:29:06,820 --> 00:29:11,260
covering it all here on OBS right that

00:29:09,520 --> 00:29:12,610
makes sense or or just use obvious if

00:29:11,260 --> 00:29:16,059
you like it better yes we'd still

00:29:12,610 --> 00:29:18,640
exposed under in that model let's say in

00:29:16,059 --> 00:29:21,250
two years from now maybe what would be

00:29:18,640 --> 00:29:23,779
the the main driving system would be

00:29:21,250 --> 00:29:26,570
obvious or gitlab and then the

00:29:23,779 --> 00:29:27,440
would be you know triggered by that or

00:29:26,570 --> 00:29:29,330
the other way around

00:29:27,440 --> 00:29:30,889
well I imagine if we were doing the

00:29:29,330 --> 00:29:32,139
actual product development on get lab

00:29:30,889 --> 00:29:34,789
then it would probably be the one

00:29:32,139 --> 00:29:35,809
publishing the binaries back to OBS and

00:29:34,789 --> 00:29:39,349
nobody else would be triggering builds

00:29:35,809 --> 00:29:42,950
over there that's something else I wanna

00:29:39,349 --> 00:29:45,679
save it on you can't think that okay oh

00:29:42,950 --> 00:29:48,289
I guess so for some of the other things

00:29:45,679 --> 00:29:49,999
outside of the things we need to build

00:29:48,289 --> 00:29:51,559
the products obviously if you have that

00:29:49,999 --> 00:29:52,820
generic CI I don't see any reason why

00:29:51,559 --> 00:29:54,979
you couldn't port things over

00:29:52,820 --> 00:29:56,450
like building images because it would

00:29:54,979 --> 00:29:58,909
just simply be basically executing Kiwi

00:29:56,450 --> 00:30:00,870
the same way OBS does so all that work

00:29:58,909 --> 00:30:09,460
could basically just be ported over

00:30:00,870 --> 00:30:15,320
[Music]

00:30:09,460 --> 00:30:17,839
anything else all right

00:30:15,320 --> 00:30:21,879
well if your should talk more office

00:30:17,839 --> 00:30:21,879
they'll be around thanks for your time

00:30:28,300 --> 00:30:30,360

YouTube URL: https://www.youtube.com/watch?v=iY_ADUQiiQI


