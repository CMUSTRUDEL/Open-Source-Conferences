Title: openSUSE Conference 2018 - AppArmor 3 and beyond
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1933-apparmor-3-and-beyond

riding the Tumbleweed

There are several changes coming with the release of AppArmor 3. This talk
will cover the changes that AppArmor 3 will bring and how the changes
will affect policy and confinement. It will cover policy versioning, local vs
pre-shipped read-only policy text, improvements in AppArmor policy namespaces, fine grained network and d-bus mediation as well as IMA integration.


There are several changes coming with the release of AppArmor 3. This talk
will cover the changes that AppArmor 3 will bring and how the changes
will affect policy and confinement. It will cover policy versioning, local vs
pre-shipped read-only policy text, improvements in AppArmor policy namespaces, fine grained network and d-bus mediation as well as IMA integration.


John Johansen
Captions: 
	00:00:06,030 --> 00:00:11,190
alright should we get started we're

00:00:09,040 --> 00:00:13,510
gonna talk about a primer three mostly

00:00:11,190 --> 00:00:16,090
it's the current development or lease

00:00:13,510 --> 00:00:21,039
for a farmer it's going to be landing in

00:00:16,090 --> 00:00:22,720
tumbleweed soon you know so if you don't

00:00:21,039 --> 00:00:24,580
know what a primer is it's a mandatory

00:00:22,720 --> 00:00:26,350
access control system that's about all

00:00:24,580 --> 00:00:31,690
I'm going to say for it we are assuming

00:00:26,350 --> 00:00:34,000
you know the rest if not sorry we've got

00:00:31,690 --> 00:00:35,980
a new logo that know what Davis has been

00:00:34,000 --> 00:00:37,420
working on this isn't may not be the

00:00:35,980 --> 00:00:40,210
final version there still needs to be a

00:00:37,420 --> 00:00:44,620
vote on it but we should be seeing this

00:00:40,210 --> 00:00:46,480
show up soon so first we're going to

00:00:44,620 --> 00:00:51,309
take a step back and review some stuff

00:00:46,480 --> 00:00:54,879
that has actually landed already you can

00:00:51,309 --> 00:00:59,319
use some of this in tumbleweed for sure

00:00:54,879 --> 00:01:02,769
and even some of this in leap so a

00:00:59,319 --> 00:01:05,560
primer has had the ability to use some

00:01:02,769 --> 00:01:07,900
are back or rolls and user space

00:01:05,560 --> 00:01:11,110
confinement our user confinement for

00:01:07,900 --> 00:01:13,799
quite a while but it's been quite

00:01:11,110 --> 00:01:17,469
limited it has quite a few simple

00:01:13,799 --> 00:01:20,520
imitations and it when you use it one of

00:01:17,469 --> 00:01:23,560
the big ones is it precludes using other

00:01:20,520 --> 00:01:25,090
policies so application policy that

00:01:23,560 --> 00:01:28,240
you'd normally associate with how you

00:01:25,090 --> 00:01:31,119
use a primer the easiest way to set it

00:01:28,240 --> 00:01:35,770
up has been Pam a farmer and that's not

00:01:31,119 --> 00:01:37,090
easy it's really clunky it uses a primer

00:01:35,770 --> 00:01:39,100
hats if you don't know what they are

00:01:37,090 --> 00:01:41,350
don't worry about it

00:01:39,100 --> 00:01:44,350
but that basically means that your whole

00:01:41,350 --> 00:01:49,000
system needs to be confined to make this

00:01:44,350 --> 00:01:53,109
work properly and if it causes a lot of

00:01:49,000 --> 00:01:54,219
issues with using it well so we're not

00:01:53,109 --> 00:01:56,679
going to go into it any more than that

00:01:54,219 --> 00:01:59,109
at the moment policy namespaces so a

00:01:56,679 --> 00:02:04,090
primer has had policy names faces for a

00:01:59,109 --> 00:02:05,619
long time people haven't used them for

00:02:04,090 --> 00:02:10,030
various reasons they haven't been very

00:02:05,619 --> 00:02:12,820
useful too recently so basically it lets

00:02:10,030 --> 00:02:14,860
you have different namespaces each one

00:02:12,820 --> 00:02:16,540
with its own set of policies they don't

00:02:14,860 --> 00:02:17,980
collide with each other you can name

00:02:16,540 --> 00:02:18,569
them the same thing if you want you can

00:02:17,980 --> 00:02:20,760
have

00:02:18,569 --> 00:02:26,370
different list of policies they get

00:02:20,760 --> 00:02:28,890
managed separately when you see them in

00:02:26,370 --> 00:02:30,629
policy when you see when you introspect

00:02:28,890 --> 00:02:34,349
what's going on in the system you'll see

00:02:30,629 --> 00:02:36,870
like the name name space will show up

00:02:34,349 --> 00:02:41,790
with like a colon separating it from the

00:02:36,870 --> 00:02:50,370
profile name not a big deal the policy

00:02:41,790 --> 00:02:52,709
namespaces are hierarchical about all I

00:02:50,370 --> 00:02:55,170
want to say there well they used each

00:02:52,709 --> 00:02:57,030
one still gets its own profile set each

00:02:55,170 --> 00:02:59,129
one also gets its own done confined

00:02:57,030 --> 00:03:02,669
State which we'll see in a minute a

00:02:59,129 --> 00:03:04,889
policy namespace also defines a view and

00:03:02,669 --> 00:03:07,680
who can load where policy can be loaded

00:03:04,889 --> 00:03:09,989
who can load policy to where so in this

00:03:07,680 --> 00:03:11,939
case a system a task and the system

00:03:09,989 --> 00:03:17,700
namespace can see all the child

00:03:11,939 --> 00:03:21,269
namespaces of the system when we go put

00:03:17,700 --> 00:03:25,889
a task into the say ns3 it can only see

00:03:21,269 --> 00:03:29,459
an s3 s policy and below so it's on the

00:03:25,889 --> 00:03:32,459
NS trees children and it can only load

00:03:29,459 --> 00:03:38,329
policy into n s3 or its children

00:03:32,459 --> 00:03:40,379
assuming it has cap macit min and

00:03:38,329 --> 00:03:42,720
similarly we can do the same with

00:03:40,379 --> 00:03:45,659
namespace v again we can narrow it down

00:03:42,720 --> 00:03:54,359
even further so let's take a quick

00:03:45,659 --> 00:04:01,919
little demo here what do we got so we're

00:03:54,359 --> 00:04:04,229
gonna just jump into namespace 1 and we

00:04:01,919 --> 00:04:12,449
get a pit back out of that that I can't

00:04:04,229 --> 00:04:17,430
quite read 53 89 is that it we can look

00:04:12,449 --> 00:04:24,300
on that it thinks it's unconfined but if

00:04:17,430 --> 00:04:26,749
we do 53 89 from the system I must not

00:04:24,300 --> 00:04:37,469
have the right bid

00:04:26,749 --> 00:04:47,400
part me zero nine all right you can see

00:04:37,469 --> 00:04:49,409
it in the namespace so so then next

00:04:47,400 --> 00:04:50,699
thing we want to cover quick is stacking

00:04:49,409 --> 00:04:53,669
this is something that's landed more

00:04:50,699 --> 00:04:58,919
recently if you've got a a polymer 211

00:04:53,669 --> 00:05:01,710
user space and a 413 kernel you have

00:04:58,919 --> 00:05:05,189
access to this it brings a runtime

00:05:01,710 --> 00:05:08,449
dynamic policy come finish composition

00:05:05,189 --> 00:05:11,129
specifically an intersection of policies

00:05:08,449 --> 00:05:16,409
this brings a lot of flexibility to

00:05:11,129 --> 00:05:18,120
certain parts of policy so when you're

00:05:16,409 --> 00:05:21,300
in respecting policy you'll see it show

00:05:18,120 --> 00:05:23,810
up like somewhat like this so it's

00:05:21,300 --> 00:05:25,550
separated with the double slash and

00:05:23,810 --> 00:05:27,499
ampersand

00:05:25,550 --> 00:05:29,879
[Music]

00:05:27,499 --> 00:05:32,580
these two profiles together

00:05:29,879 --> 00:05:36,500
I mean it's not going to be very useful

00:05:32,580 --> 00:05:39,990
right for the system why would I do that

00:05:36,500 --> 00:05:43,409
so that's not useful here so where is it

00:05:39,990 --> 00:05:46,080
useful if we take a look again at the

00:05:43,409 --> 00:05:49,830
namespaces so here we have a task and

00:05:46,080 --> 00:05:56,460
it's just in the system namespace that's

00:05:49,830 --> 00:05:58,919
all fine and well if we now add a stack

00:05:56,460 --> 00:06:02,219
so that we're stacking a system

00:05:58,919 --> 00:06:06,000
namespace profile and profile from

00:06:02,219 --> 00:06:08,250
namespace 3 to the task what happens is

00:06:06,000 --> 00:06:12,139
the task is now limited to the view of

00:06:08,250 --> 00:06:16,110
namespace 3 but the system namespace

00:06:12,139 --> 00:06:21,029
policy and namespace 3 policies being

00:06:16,110 --> 00:06:25,500
applied against this task where is this

00:06:21,029 --> 00:06:27,899
useful well you know the task can't see

00:06:25,500 --> 00:06:34,199
the system policy where this is really

00:06:27,899 --> 00:06:37,840
useful is in containers so we're gonna

00:06:34,199 --> 00:06:42,560
jump back over here for a second

00:06:37,840 --> 00:06:50,240
we can show this stack quick yes this is

00:06:42,560 --> 00:06:52,909
just silly if I got it right you should

00:06:50,240 --> 00:06:55,009
see the set stack there it's keeping me

00:06:52,909 --> 00:06:57,529
from using tap completion and stuff

00:06:55,009 --> 00:07:03,169
because it's a senseless stack and it

00:06:57,529 --> 00:07:09,250
causes problems but we can also say jump

00:07:03,169 --> 00:07:12,169
into a namespace and if I come over here

00:07:09,250 --> 00:07:22,849
which pit did I use this to come out as

00:07:12,169 --> 00:07:26,270
this time paid 250 480 or a zero four

00:07:22,849 --> 00:07:29,629
fifty four zero four I should be

00:07:26,270 --> 00:07:31,069
mirroring this so I can see it in front

00:07:29,629 --> 00:07:36,499
of me you can see it's in the namespace

00:07:31,069 --> 00:07:44,389
we're here it doesn't see itself this is

00:07:36,499 --> 00:07:46,159
in the namespace lots of fun lxd

00:07:44,389 --> 00:07:52,669
supports this right now

00:07:46,159 --> 00:07:57,819
so we can jump over to an lxd we've got

00:07:52,669 --> 00:07:57,819
a system with lots of profiles in it ah

00:07:58,839 --> 00:08:03,680
that finger that some of them are for

00:08:02,360 --> 00:08:07,639
the namespace some of them are host

00:08:03,680 --> 00:08:10,759
policy we can jump into our LXE

00:08:07,639 --> 00:08:17,389
container so this is actually an bun to

00:08:10,759 --> 00:08:25,479
host with an lxc container that's open

00:08:17,389 --> 00:08:25,479
openSUSE leap for two it thinks it's

00:08:27,309 --> 00:08:31,909
I'm confined it's in its own set of

00:08:30,080 --> 00:08:35,269
stuff we haven't set it up to use

00:08:31,909 --> 00:08:41,019
anything there I need to grab the pit

00:08:35,269 --> 00:08:48,529
again we got 68 41

00:08:41,019 --> 00:08:54,170
unfortunately we uh Alex C is lxd he's

00:08:48,529 --> 00:09:00,040
doing some pit mapping Christie was at

00:08:54,170 --> 00:09:05,500
sixty four six eight four one yeah okay

00:09:00,040 --> 00:09:11,029
I'm having some problems with my six six

00:09:05,500 --> 00:09:12,649
come on four eight one so we have to

00:09:11,029 --> 00:09:21,440
figure the mapping out before we can

00:09:12,649 --> 00:09:25,010
grab the 26 481 and you can see that

00:09:21,440 --> 00:09:30,970
it's well I got the grout wrong one did

00:09:25,010 --> 00:09:35,420
I oh six

00:09:30,970 --> 00:09:44,329
I've got missing two six I flipped them

00:09:35,420 --> 00:09:56,779
yeah where did I do that wrong - six

00:09:44,329 --> 00:10:05,060
Oh Maps - I can't see it right now

00:09:56,779 --> 00:10:09,380
oh that could be where my grip there we

00:10:05,060 --> 00:10:12,860
go okay we're not getting that to show

00:10:09,380 --> 00:10:21,069
up because I got the wrong one six eight

00:10:12,860 --> 00:10:21,069
four one ah yeah I flip those sorry

00:10:25,740 --> 00:10:38,620
and then we can grip for two so you can

00:10:36,700 --> 00:10:44,680
see that it's got this long ugly thing

00:10:38,620 --> 00:10:48,760
where it's using an lxd namespace that

00:10:44,680 --> 00:10:50,710
round one alright and we can further

00:10:48,760 --> 00:10:54,580
reduce the view right doing another

00:10:50,710 --> 00:11:00,580
namespace in the namespace so what's a

00:10:54,580 --> 00:11:02,500
primer 3 a primer 3 is about dealing

00:11:00,580 --> 00:11:05,710
dealing with some issues it's got all

00:11:02,500 --> 00:11:08,620
this in it we have a problem where I

00:11:05,710 --> 00:11:11,620
think user space tools policy and kernel

00:11:08,620 --> 00:11:14,620
are all moving at their own pace we had

00:11:11,620 --> 00:11:16,570
a little problem with the 4 for 2 for 14

00:11:14,620 --> 00:11:18,910
development cycle where we broke some

00:11:16,570 --> 00:11:23,170
kernel devs they were not we're not

00:11:18,910 --> 00:11:26,470
happy about that so while a primer 3

00:11:23,170 --> 00:11:28,120
supports some new features in the kernel

00:11:26,470 --> 00:11:33,100
in fact is going to be required for new

00:11:28,120 --> 00:11:35,350
kernel features it's mostly about

00:11:33,100 --> 00:11:40,690
improving how policy interacts with the

00:11:35,350 --> 00:11:45,160
system so the big point really is all

00:11:40,690 --> 00:11:46,930
policies gonna pick up versioning the

00:11:45,160 --> 00:11:49,270
details are going to be hidden behind an

00:11:46,930 --> 00:11:51,550
include so it's just like that include

00:11:49,270 --> 00:11:54,160
policy version 3 what's actually

00:11:51,550 --> 00:11:56,620
happening in that at base level this can

00:11:54,160 --> 00:11:58,420
pick up more detail if we need to in the

00:11:56,620 --> 00:12:00,490
future is it's going to define a

00:11:58,420 --> 00:12:05,380
variable for some conditionals if needed

00:12:00,490 --> 00:12:08,710
and it's gonna set the feature file

00:12:05,380 --> 00:12:11,380
fetch feature a bi that's used currently

00:12:08,710 --> 00:12:15,400
the feature 8 feature a bi is either

00:12:11,380 --> 00:12:17,740
grabbed from the running kernel or from

00:12:15,400 --> 00:12:20,620
the pinning that's set up in the config

00:12:17,740 --> 00:12:23,380
file so you can pin to a version this

00:12:20,620 --> 00:12:27,130
way we can specify for each policy which

00:12:23,380 --> 00:12:30,190
version it was off authored for we're in

00:12:27,130 --> 00:12:32,200
the past everything was all policy was

00:12:30,190 --> 00:12:34,000
using the same version when it was

00:12:32,200 --> 00:12:36,030
running on the system this is going to

00:12:34,000 --> 00:12:40,380
allow for multiple versions to

00:12:36,030 --> 00:12:43,470
coexist because each profile has its own

00:12:40,380 --> 00:12:45,420
version profiles can move at different

00:12:43,470 --> 00:12:49,590
speeds and get updated at different

00:12:45,420 --> 00:12:52,110
times the compiler is going to be

00:12:49,590 --> 00:12:54,300
responsible for figuring out the ABI of

00:12:52,110 --> 00:12:57,570
the the policy and what the kernel

00:12:54,300 --> 00:12:59,580
supports and making sure things are are

00:12:57,570 --> 00:13:04,140
compiled correctly and so it can be

00:12:59,580 --> 00:13:06,480
loaded into the kernel this does mean

00:13:04,140 --> 00:13:09,870
that is potential you could have down

00:13:06,480 --> 00:13:12,420
grades on rules there will be options to

00:13:09,870 --> 00:13:17,300
either warn and well not warned at all

00:13:12,420 --> 00:13:20,190
warn on those or just fail the compile

00:13:17,300 --> 00:13:21,750
right now 3.0 is really just the start

00:13:20,190 --> 00:13:24,480
of this so there is some limits to what

00:13:21,750 --> 00:13:35,520
we can do with it and we'll be improving

00:13:24,480 --> 00:13:39,270
and improving it in the future so if

00:13:35,520 --> 00:13:42,570
this is about improving application

00:13:39,270 --> 00:13:45,720
policy or packaged policy what about on

00:13:42,570 --> 00:13:48,450
older releases so older releases don't

00:13:45,720 --> 00:13:51,960
have versioning so putting versioning in

00:13:48,450 --> 00:13:53,370
will break them that's somewhat expected

00:13:51,960 --> 00:13:55,980
that happens with new features all the

00:13:53,370 --> 00:13:58,470
time or you add a new feature but it

00:13:55,980 --> 00:14:01,890
doesn't work on an older version because

00:13:58,470 --> 00:14:03,540
user space just doesn't support it we do

00:14:01,890 --> 00:14:06,000
have some work in progress to make that

00:14:03,540 --> 00:14:10,530
better one of the things that's landing

00:14:06,000 --> 00:14:13,260
with a primer 3 is conditional includes

00:14:10,530 --> 00:14:15,750
and that can be used on the version if

00:14:13,260 --> 00:14:17,970
you want because it's again abstracted

00:14:15,750 --> 00:14:21,480
away in an include file so you can say

00:14:17,970 --> 00:14:23,580
include if exists you know while all the

00:14:21,480 --> 00:14:26,220
policy versioning isn't being backported

00:14:23,580 --> 00:14:31,440
the conditional includes have been back

00:14:26,220 --> 00:14:33,420
ported so that will let some policy be

00:14:31,440 --> 00:14:35,250
used on older systems they'll just

00:14:33,420 --> 00:14:39,870
ignore it and use the ABI that the

00:14:35,250 --> 00:14:41,820
systems supporting so we have a lot of

00:14:39,870 --> 00:14:43,960
policy out there that isn't version so

00:14:41,820 --> 00:14:45,910
what happens with those so

00:14:43,960 --> 00:14:47,620
what's gonna happen with those is there

00:14:45,910 --> 00:14:49,300
gonna be they're gonna look at the

00:14:47,620 --> 00:14:52,480
kernel version the crowler look at the

00:14:49,300 --> 00:14:56,590
kernel version or ABI and it will also

00:14:52,480 --> 00:14:59,260
look at a static set for 14 ABI and I'll

00:14:56,590 --> 00:15:03,540
take a subset of those and say well this

00:14:59,260 --> 00:15:06,400
is where we lock down the ABI for no for

00:15:03,540 --> 00:15:09,940
policy that hasn't been versioned you

00:15:06,400 --> 00:15:12,550
can't use features beyond 414 in it that

00:15:09,940 --> 00:15:16,680
what's supported in 414 and so that's

00:15:12,550 --> 00:15:19,810
what we're gonna choose as our set point

00:15:16,680 --> 00:15:22,930
there is a few Wiggles around this or

00:15:19,810 --> 00:15:26,020
quirks whatever for distros that have

00:15:22,930 --> 00:15:27,910
shipped non upstream features there will

00:15:26,020 --> 00:15:35,530
be some compatibility patches that they

00:15:27,910 --> 00:15:37,510
can use to continue supporting things so

00:15:35,530 --> 00:15:39,750
another thing we needed to deal with and

00:15:37,510 --> 00:15:43,210
we've been running into problems with is

00:15:39,750 --> 00:15:46,090
read-only images and pre-built policy

00:15:43,210 --> 00:15:48,160
and not just pre-built policy for

00:15:46,090 --> 00:15:52,450
read-only images which I call pre

00:15:48,160 --> 00:15:57,130
shipped policy because you're shipping

00:15:52,450 --> 00:16:02,920
it with ro image but the the policy we

00:15:57,130 --> 00:16:07,150
use on boot right so in pre 3.0 we have

00:16:02,920 --> 00:16:10,210
a single binary policy cache when you

00:16:07,150 --> 00:16:12,790
switch your kernel you have to recompile

00:16:10,210 --> 00:16:15,070
the cache that's often done on boot

00:16:12,790 --> 00:16:17,140
because it's not being triggered and say

00:16:15,070 --> 00:16:18,490
your kernel install even if it was

00:16:17,140 --> 00:16:20,620
triggered in the kernel install if you

00:16:18,490 --> 00:16:22,360
don't reboot into that kernel you still

00:16:20,620 --> 00:16:25,510
have the old policy on your running

00:16:22,360 --> 00:16:29,410
system it needs to be reset if you app

00:16:25,510 --> 00:16:31,750
happen to try reloading lots of messes

00:16:29,410 --> 00:16:34,180
there it when the when it goes to

00:16:31,750 --> 00:16:37,660
compile the policy on boot that slows

00:16:34,180 --> 00:16:40,900
down the boot because compiles can take

00:16:37,660 --> 00:16:42,410
a bit of time especially on small

00:16:40,900 --> 00:16:43,509
devices it depends what you have

00:16:42,410 --> 00:16:47,540
[Music]

00:16:43,509 --> 00:16:50,720
is usually not too bad but we've seen

00:16:47,540 --> 00:16:54,279
bad cases let's put it that way

00:16:50,720 --> 00:16:57,499
recompiling policy at boot also

00:16:54,279 --> 00:17:00,529
precludes us from doing early loads

00:16:57,499 --> 00:17:02,389
because to do an early load we can't do

00:17:00,529 --> 00:17:07,809
everything we need to do to actually

00:17:02,389 --> 00:17:07,809
compile the policy which is a problem

00:17:11,559 --> 00:17:18,949
so with Rio we get a per kernel binary

00:17:15,470 --> 00:17:22,909
policy it so it's multiple cache

00:17:18,949 --> 00:17:23,389
directories it's based on the hashing of

00:17:22,909 --> 00:17:27,980
the feature

00:17:23,389 --> 00:17:30,470
ABI that's supported for the kernel they

00:17:27,980 --> 00:17:32,480
each get their own compiled policy they

00:17:30,470 --> 00:17:33,919
could be the same in them but with

00:17:32,480 --> 00:17:36,019
different features they could actually

00:17:33,919 --> 00:17:40,490
again be different just depending on how

00:17:36,019 --> 00:17:43,010
the compliant stuff compiles out they do

00:17:40,490 --> 00:17:44,840
this does handle collisions if so for if

00:17:43,010 --> 00:17:46,970
some reason the hash collides it

00:17:44,840 --> 00:17:48,649
probably won't ever but we've have

00:17:46,970 --> 00:17:51,230
double checked that it will handle

00:17:48,649 --> 00:17:54,200
collisions that's the dot zero on the

00:17:51,230 --> 00:17:56,630
end and the dot one versus you know that

00:17:54,200 --> 00:18:01,789
with the two same hashes versus the

00:17:56,630 --> 00:18:03,799
different hash with just a lot zero so

00:18:01,789 --> 00:18:06,169
this is actually in tumbleweed right now

00:18:03,799 --> 00:18:08,480
because we've got a two thirteen release

00:18:06,169 --> 00:18:10,460
with some of the a primer three features

00:18:08,480 --> 00:18:14,510
because people are wanting to play with

00:18:10,460 --> 00:18:17,029
this the only thing that isn't there I

00:18:14,510 --> 00:18:19,159
haven't mentioned yet is the fallback so

00:18:17,029 --> 00:18:22,159
if for some reason you boot into a

00:18:19,159 --> 00:18:26,659
kernel that doesn't have a policy cache

00:18:22,159 --> 00:18:30,549
compiled it's possible to fall back to a

00:18:26,659 --> 00:18:30,549
closest match ABI

00:18:30,610 --> 00:18:39,679
which I'll let you get some policy in in

00:18:36,860 --> 00:18:42,169
addition to help support overlay images

00:18:39,679 --> 00:18:46,070
where if you're shipping pre-compiled

00:18:42,169 --> 00:18:48,110
policy you know either you can't have

00:18:46,070 --> 00:18:50,299
any local changes or you can't ship

00:18:48,110 --> 00:18:52,870
precompiled policy we now allow an

00:18:50,299 --> 00:18:55,920
overlay so you can define multiple

00:18:52,870 --> 00:18:58,440
policy binary policy locations

00:18:55,920 --> 00:19:01,950
and the local changes will update and

00:18:58,440 --> 00:19:04,460
write to the the local store overlay and

00:19:01,950 --> 00:19:11,670
those will override the pre shipped

00:19:04,460 --> 00:19:14,520
read-only image similar to the binary

00:19:11,670 --> 00:19:16,770
policy getting an overlay text policy

00:19:14,520 --> 00:19:19,590
will also get an overlay so you can

00:19:16,770 --> 00:19:22,980
define another location that a user can

00:19:19,590 --> 00:19:26,700
make changes and that can over override

00:19:22,980 --> 00:19:28,590
what's on a read-only image again so

00:19:26,700 --> 00:19:32,610
it's just it's a matter of supporting

00:19:28,590 --> 00:19:34,470
read-only images where the em where the

00:19:32,610 --> 00:19:36,030
locations are distro dependent we

00:19:34,470 --> 00:19:38,100
haven't defined that yet

00:19:36,030 --> 00:19:43,350
but even if we did as an upstream

00:19:38,100 --> 00:19:46,310
distros may override it so a primer 3

00:19:43,350 --> 00:19:50,490
like I said it's gonna be required to

00:19:46,310 --> 00:19:54,140
support new features that go into the

00:19:50,490 --> 00:19:56,790
kernel some of the things like

00:19:54,140 --> 00:19:58,680
networking rules the base socket

00:19:56,790 --> 00:19:59,790
networking rules Suso is already

00:19:58,680 --> 00:20:02,100
supported for a while they've been

00:19:59,790 --> 00:20:06,860
carrying and out of tree patch to use

00:20:02,100 --> 00:20:09,540
the upstream version that landed in 4:16

00:20:06,860 --> 00:20:10,800
you're going to have to have an app bar

00:20:09,540 --> 00:20:14,400
missery it won't work

00:20:10,800 --> 00:20:17,250
on a prom or two whatever that we have

00:20:14,400 --> 00:20:20,640
in leap or tumbleweed at the moment

00:20:17,250 --> 00:20:23,280
until we land a pond or three because we

00:20:20,640 --> 00:20:25,920
had to break the api to meet lenez's

00:20:23,280 --> 00:20:27,810
requirements so it's been it was

00:20:25,920 --> 00:20:29,910
deliberate that we won't support this on

00:20:27,810 --> 00:20:33,720
the 2x and the deliberate that we broke

00:20:29,910 --> 00:20:40,530
the ABI again this is to avoid breaking

00:20:33,720 --> 00:20:45,000
kernel diff systems so like I said it's

00:20:40,530 --> 00:20:46,920
an upstream in 4:16 now we're gonna be

00:20:45,000 --> 00:20:49,110
landing a fine-grained eunuch minute

00:20:46,920 --> 00:20:52,530
mediation upstream we were hoping for a

00:20:49,110 --> 00:20:54,690
for 18 for 18 merge Windows coming up in

00:20:52,530 --> 00:20:57,530
a couple weeks and we had to make some

00:20:54,690 --> 00:21:00,110
changes to it and

00:20:57,530 --> 00:21:03,260
so we're not gonna land those in 14 it's

00:21:00,110 --> 00:21:05,650
going to land a 419 now it gives you a

00:21:03,260 --> 00:21:08,480
lot of flexibility on matching for

00:21:05,650 --> 00:21:12,260
addresses and what combined to where it

00:21:08,480 --> 00:21:15,590
supports anonymous sockets abstract

00:21:12,260 --> 00:21:17,419
sockets and file system sockets so it

00:21:15,590 --> 00:21:21,470
adds up quite a bit of control over

00:21:17,419 --> 00:21:28,220
their generic socket of course socket

00:21:21,470 --> 00:21:30,679
mediation d-bus mediation this has

00:21:28,220 --> 00:21:32,860
actually been in upstream Debus the

00:21:30,679 --> 00:21:36,190
upstream d-bus project for a while and

00:21:32,860 --> 00:21:39,140
if you enable it it it will use it if

00:21:36,190 --> 00:21:42,080
that were more if the kernel supports it

00:21:39,140 --> 00:21:44,510
what's required for the kernel stuff to

00:21:42,080 --> 00:21:48,169
support it is the the fine-grained unix

00:21:44,510 --> 00:21:50,750
mediation AF unix mediation that we just

00:21:48,169 --> 00:21:52,940
talked about so this again is going to

00:21:50,750 --> 00:21:57,440
be coming with 419 it's already

00:21:52,940 --> 00:21:59,799
supported but again you will require a

00:21:57,440 --> 00:22:02,419
primer three to use the upstream version

00:21:59,799 --> 00:22:03,970
there's lots of options to play with in

00:22:02,419 --> 00:22:07,220
here I don't have time to go over

00:22:03,970 --> 00:22:09,130
everything we can do with it you just

00:22:07,220 --> 00:22:10,659
have to go into the documentation

00:22:09,130 --> 00:22:13,429
[Music]

00:22:10,659 --> 00:22:17,480
recently there's been some i'ma

00:22:13,429 --> 00:22:21,020
interaction or integration landed so I'm

00:22:17,480 --> 00:22:27,250
a allows controlling signatures on files

00:22:21,020 --> 00:22:27,250
and is another LSM in fact well sort of

00:22:27,370 --> 00:22:33,860
so right now we do how if you look at

00:22:31,760 --> 00:22:37,340
profiles you can deter you can control

00:22:33,860 --> 00:22:38,690
which what executable profile will

00:22:37,340 --> 00:22:40,820
attach to with the attachment

00:22:38,690 --> 00:22:42,770
specification like this one showing up

00:22:40,820 --> 00:22:47,870
here so we have a Firefox profile and it

00:22:42,770 --> 00:22:50,120
can attach to this big ugly file so one

00:22:47,870 --> 00:22:52,789
thing that's gonna happen is there is a

00:22:50,120 --> 00:22:55,880
conditional a new conditional that's

00:22:52,789 --> 00:22:58,520
gonna come about it's been defined very

00:22:55,880 --> 00:23:00,260
generically so that it can be extended

00:22:58,520 --> 00:23:03,559
right now it's going to be working with

00:23:00,260 --> 00:23:07,220
I'ma and so you can say I want to be

00:23:03,559 --> 00:23:10,490
able to match the imma namespace so I

00:23:07,220 --> 00:23:13,490
can define at the imma signature

00:23:10,490 --> 00:23:15,800
I just threw a random bar in there right

00:23:13,490 --> 00:23:17,900
now and so you can know that I'm as

00:23:15,800 --> 00:23:20,679
saying this file is actually a good file

00:23:17,900 --> 00:23:24,170
I've signed it all signed off on it and

00:23:20,679 --> 00:23:27,170
you won't actually be able to transition

00:23:24,170 --> 00:23:30,880
your profile without that signature that

00:23:27,170 --> 00:23:30,880
I must says everything's good

00:23:32,410 --> 00:23:40,640
so beyond a prom are three we've got a

00:23:37,460 --> 00:23:42,679
few other things in the works better

00:23:40,640 --> 00:23:45,140
system D integration so there is some

00:23:42,679 --> 00:23:48,500
integration right now with system D but

00:23:45,140 --> 00:23:52,280
we've made it so the library that primer

00:23:48,500 --> 00:23:54,590
library can load policy and we want to

00:23:52,280 --> 00:23:56,240
update system D to be able to access the

00:23:54,590 --> 00:23:59,540
library directly instead of having to

00:23:56,240 --> 00:24:01,700
call into the compile C compiler this is

00:23:59,540 --> 00:24:07,490
going to allow us with in combination

00:24:01,700 --> 00:24:10,570
with multiple kernel policy to load

00:24:07,490 --> 00:24:14,870
policy as early as possible without

00:24:10,570 --> 00:24:16,730
getting into the init Rd you can

00:24:14,870 --> 00:24:22,040
certainly do that if you want but that's

00:24:16,730 --> 00:24:25,400
kind of something you want to avoid and

00:24:22,040 --> 00:24:27,770
the we can run the compiler again later

00:24:25,400 --> 00:24:29,630
at boot and parallel to just verify that

00:24:27,770 --> 00:24:34,640
everything's compiled correctly and up

00:24:29,630 --> 00:24:37,150
to date we're gonna split Paula there's

00:24:34,640 --> 00:24:40,220
going to be a split and improvement on

00:24:37,150 --> 00:24:42,410
policy namespaces where the view can be

00:24:40,220 --> 00:24:48,670
split from the scope basically the scope

00:24:42,410 --> 00:24:53,480
is what what the policy applies to and

00:24:48,670 --> 00:24:55,190
the who can control it but the view well

00:24:53,480 --> 00:24:56,840
now you will be able to define named

00:24:55,190 --> 00:25:00,920
traces that have the same view as the

00:24:56,840 --> 00:25:04,160
parent so in this case n s5 has a view

00:25:00,920 --> 00:25:06,559
the same view is ns3 so it can see NS

00:25:04,160 --> 00:25:08,960
three policy it can see NS four policy

00:25:06,559 --> 00:25:11,600
but it's still controlled and it can't

00:25:08,960 --> 00:25:15,410
you can't if you're in NS five you can't

00:25:11,600 --> 00:25:19,580
load policy anywhere but NS five and its

00:25:15,410 --> 00:25:21,980
policy is limited down to NS five so why

00:25:19,580 --> 00:25:24,440
would we want this it's going to open up

00:25:21,980 --> 00:25:28,340
policy so that we can

00:25:24,440 --> 00:25:30,200
open up our namespaces to user-defined

00:25:28,340 --> 00:25:33,160
policy so users will be able to get to

00:25:30,200 --> 00:25:36,500
define their own profiles and load those

00:25:33,160 --> 00:25:38,120
the system policy will still apply the

00:25:36,500 --> 00:25:40,610
user policy will go into their own

00:25:38,120 --> 00:25:44,900
namespace and it'll stack with the

00:25:40,610 --> 00:25:48,530
system policy tasks connect can use a

00:25:44,900 --> 00:25:50,930
primer to stand box themselves so it

00:25:48,530 --> 00:25:53,660
just opens up a lot of flexibility and

00:25:50,930 --> 00:25:55,490
it still allows users to have this the

00:25:53,660 --> 00:25:57,920
usual experience that they have where

00:25:55,490 --> 00:25:59,720
they can see system policy but if your

00:25:57,920 --> 00:26:01,400
assistant policy author you don't have

00:25:59,720 --> 00:26:03,230
to allow them to do that either you have

00:26:01,400 --> 00:26:07,730
the options there's a lot of flexibility

00:26:03,230 --> 00:26:09,380
there user confinements gonna get a lot

00:26:07,730 --> 00:26:11,660
easier pam a partner is going to be

00:26:09,380 --> 00:26:13,520
upgraded it's got a it'll be go to a

00:26:11,660 --> 00:26:15,440
config file it'll use change profile

00:26:13,520 --> 00:26:17,060
instead a change hat basically you don't

00:26:15,440 --> 00:26:20,780
have to confine your whole system to use

00:26:17,060 --> 00:26:23,990
it and we're also going to add another

00:26:20,780 --> 00:26:27,950
attachment conditional where you can get

00:26:23,990 --> 00:26:29,720
policy restricted down to users so you

00:26:27,950 --> 00:26:31,520
can define specific ones that could be

00:26:29,720 --> 00:26:34,160
used in combination with pam map armor

00:26:31,520 --> 00:26:36,310
or on its own we're gonna have a

00:26:34,160 --> 00:26:39,230
learning interface which is gonna help

00:26:36,310 --> 00:26:40,430
policy development clean up the log so

00:26:39,230 --> 00:26:44,330
you can get rid of all the complain

00:26:40,430 --> 00:26:47,780
messages and we this is coming soon to a

00:26:44,330 --> 00:26:50,350
fine-grain mediation for ipv4 ipv6

00:26:47,780 --> 00:26:52,760
the syntax is still a work in progress

00:26:50,350 --> 00:26:55,340
but basically you'll be able to set what

00:26:52,760 --> 00:26:57,440
addresses you want to bind to who you

00:26:55,340 --> 00:26:57,920
want to talk to it'll integrate with sec

00:26:57,440 --> 00:27:00,380
mark

00:26:57,920 --> 00:27:01,910
SEC mark the label a primary label

00:27:00,380 --> 00:27:04,190
converts to the sec mark so you will be

00:27:01,910 --> 00:27:05,570
able to set the sec mark in a primer

00:27:04,190 --> 00:27:08,780
policy you'll be able to override

00:27:05,570 --> 00:27:11,240
defaults and set your own labels IP

00:27:08,780 --> 00:27:13,430
tables will be able to react to the sec

00:27:11,240 --> 00:27:16,900
marks or set sec marks and a primer will

00:27:13,430 --> 00:27:19,130
be able to respond to those those so

00:27:16,900 --> 00:27:24,640
there's going to be a lot of flexibility

00:27:19,130 --> 00:27:24,640
here any questions

00:27:33,110 --> 00:27:44,580
well we got one over here fine-grained

00:27:42,390 --> 00:27:47,460
policy for IP is fine but do you have

00:27:44,580 --> 00:27:49,980
fun green policy for a file system per

00:27:47,460 --> 00:27:51,929
me fine green policy for file system

00:27:49,980 --> 00:27:54,929
light access only to configuration files

00:27:51,929 --> 00:27:58,770
of that particular application or to the

00:27:54,929 --> 00:28:03,140
document I am opening yes so we already

00:27:58,770 --> 00:28:06,620
have a policy that will limit files and

00:28:03,140 --> 00:28:11,880
access the files on a per tax basis our

00:28:06,620 --> 00:28:13,650
profile what is coming to improve that

00:28:11,880 --> 00:28:15,990
that isn't around yet

00:28:13,650 --> 00:28:21,390
and I didn't talk about is there's going

00:28:15,990 --> 00:28:23,520
to be a delegation support and so as for

00:28:21,390 --> 00:28:26,370
example file dog dialogues can run in a

00:28:23,520 --> 00:28:28,860
proof step and it can have more access

00:28:26,370 --> 00:28:33,000
than the application and it can delegate

00:28:28,860 --> 00:28:34,799
extra access into the application I'm

00:28:33,000 --> 00:28:50,750
not sure that's going to be able to land

00:28:34,799 --> 00:28:52,810
this year all right well thank you

00:28:50,750 --> 00:28:52,810
you

00:28:57,500 --> 00:28:59,560

YouTube URL: https://www.youtube.com/watch?v=ofeCpN99FU8


