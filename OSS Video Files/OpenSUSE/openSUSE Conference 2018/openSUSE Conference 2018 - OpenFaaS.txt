Title: openSUSE Conference 2018 - OpenFaaS
Publication date: 2018-05-25
Playlist: openSUSE Conference 2018
Description: 
	Serveless Framework for Docker/OCI and Kubernetes

A quick introduction to the concept of a Serverless and Function-as-a-Service followed by a live demo session based on the SUSE Container-as-a-Service-Plarform (CaaSP v2.0). The presenter will cover the following topics:

- What is Serverless and OpenFaaS
- Use Helm to setup OpenFaaS in SUSE CaaSP and/or test it using DockerSwarm
- Create your own openFaaS openSUSE Docker image in DockerHub
- Try out a couple of examples presented earlier at DockerCon17 (Copenhagen)
- Horizontal auto-scaling on demand and monitoring with Prometheus
- How to create your own functions

Note: For all of you who are not yet exposed to the power of containers, we will not be liable for any crazy ideas that you will be interested in applying to production after this awesome experience.



A quick introduction to the concept of a Serverless and Function-as-a-Service followed by a live demo session based on the SUSE Container-as-a-Service-Plarform (CaaSP v2.0). The presenter will cover the following topics:

- What is Serverless and OpenFaaS
- Use Helm to setup OpenFaaS in SUSE CaaSP and/or test it using DockerSwarm
- Create your own openFaaS openSUSE Docker image in DockerHub
- Try out a couple of examples presented earlier at DockerCon17 (Copenhagen)
- Horizontal auto-scaling on demand and monitoring with Prometheus
- How to create your own functions

Note: For all of you who are not yet exposed to the power of containers, we will not be liable for any crazy ideas that you will be interested in applying to production after this awesome experience.



Panos Georgiadis
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:06,220 --> 00:00:14,030
hello my name is Panettiere Alice I work

00:00:10,610 --> 00:00:15,620
for susie-q a maintenance and today I'm

00:00:14,030 --> 00:00:16,700
going to talk to you about serverless

00:00:15,620 --> 00:00:23,890
and

00:00:16,700 --> 00:00:26,840
open fast first thing is how many of you

00:00:23,890 --> 00:00:29,090
do you know what kubernetes is and you

00:00:26,840 --> 00:00:34,129
have set up and bootstrap a kubernetes

00:00:29,090 --> 00:00:35,120
cluster please just raise your hand ok

00:00:34,129 --> 00:00:39,500
thank you very much

00:00:35,120 --> 00:00:41,329
not many people this talk basically

00:00:39,500 --> 00:00:44,390
implies that you're already familiar

00:00:41,329 --> 00:00:47,780
with kubernetes and micro services

00:00:44,390 --> 00:00:50,410
although we are note I will try to give

00:00:47,780 --> 00:00:52,879
my best to make it as simple as possible

00:00:50,410 --> 00:00:57,320
abstract it for everybody here the

00:00:52,879 --> 00:01:00,530
conference to understand this kind of

00:00:57,320 --> 00:01:08,990
new notion for several lessons is the

00:01:00,530 --> 00:01:13,310
next step so what is serverless it's

00:01:08,990 --> 00:01:16,400
kind of funny name server les is when I

00:01:13,310 --> 00:01:25,520
come to your server room and steal your

00:01:16,400 --> 00:01:30,520
servers not really I mean a few months

00:01:25,520 --> 00:01:34,460
ago Kelsey Hightower who is quite famous

00:01:30,520 --> 00:01:37,130
persona in the kubernetes world made the

00:01:34,460 --> 00:01:40,070
joke in Twitter and said you know

00:01:37,130 --> 00:01:42,070
serverless if you have no servers then

00:01:40,070 --> 00:01:45,520
the only thing you can deploy there is a

00:01:42,070 --> 00:01:52,490
code less application so just for fun

00:01:45,520 --> 00:01:59,630
what he did is he created this git

00:01:52,490 --> 00:02:02,920
repository which has no code and getting

00:01:59,630 --> 00:02:05,719
started studied by not writing any code

00:02:02,920 --> 00:02:09,259
bleeding application this is how you

00:02:05,719 --> 00:02:10,700
build your application deploying it it's

00:02:09,259 --> 00:02:14,450
simple right

00:02:10,700 --> 00:02:17,330
and you don't have to contribute the

00:02:14,450 --> 00:02:19,160
funny thing is that the community of

00:02:17,330 --> 00:02:23,390
kubernetes and several is really like

00:02:19,160 --> 00:02:24,500
this as you can see 20,000 people really

00:02:23,390 --> 00:02:29,690
start the project

00:02:24,500 --> 00:02:33,350
it has 1000 issues let's see some of the

00:02:29,690 --> 00:02:38,000
issues what issues we can have here

00:02:33,350 --> 00:02:42,080
yeah licenses code doesn't run but

00:02:38,000 --> 00:02:46,310
performance on Windows 10 where it is I

00:02:42,080 --> 00:02:51,950
mean good job Microsoft that's a nice

00:02:46,310 --> 00:02:54,260
achievement so and even if this is not

00:02:51,950 --> 00:02:59,950
enough I don't know if you know a guy

00:02:54,260 --> 00:03:04,730
called Brown Richard Brown packets did

00:02:59,950 --> 00:03:08,660
and I remember talking to him and he was

00:03:04,730 --> 00:03:10,519
like panels you don't believe how hard

00:03:08,660 --> 00:03:14,569
is to build something in build service

00:03:10,519 --> 00:03:17,750
that has absolutely no code inside so it

00:03:14,569 --> 00:03:21,200
seems like everybody in the community

00:03:17,750 --> 00:03:24,140
really likes this joke so I was let's

00:03:21,200 --> 00:03:27,109
create some buzz here in the open to the

00:03:24,140 --> 00:03:32,709
conference so I would like to welcome

00:03:27,109 --> 00:03:37,390
you to the first worldwide serverless

00:03:32,709 --> 00:03:41,630
sorry presentation last presentation

00:03:37,390 --> 00:03:45,410
which is just a talk meaning like I have

00:03:41,630 --> 00:03:48,769
empty slides absolutely empty slides

00:03:45,410 --> 00:03:51,380
there are no slides yet Here I am here

00:03:48,769 --> 00:03:53,959
were so we have a presentation but also

00:03:51,380 --> 00:03:56,329
we don't have at the same time the same

00:03:53,959 --> 00:03:59,690
thing with servers we deploy staff but

00:03:56,329 --> 00:04:08,780
we say we don't have them so let's start

00:03:59,690 --> 00:04:10,280
i assume that even though most people

00:04:08,780 --> 00:04:11,780
are not familiar with kubernetes

00:04:10,280 --> 00:04:15,850
i'm sure you are all familiar with

00:04:11,780 --> 00:04:19,970
deploying an instance or instances

00:04:15,850 --> 00:04:23,270
spawning them setting them down

00:04:19,970 --> 00:04:26,240
SSH into your instances debug what went

00:04:23,270 --> 00:04:27,830
wrong and in some point in time this

00:04:26,240 --> 00:04:29,840
time when this riot you update your

00:04:27,830 --> 00:04:31,600
instances and everything I assume

00:04:29,840 --> 00:04:35,090
everybody should be familiar with that

00:04:31,600 --> 00:04:37,460
all these things that feels familiar to

00:04:35,090 --> 00:04:41,660
a sysadmin are not happening in

00:04:37,460 --> 00:04:47,240
serverless in serverless the developer

00:04:41,660 --> 00:04:50,750
is focused only on his application the

00:04:47,240 --> 00:04:52,640
company pays only for what is used it's

00:04:50,750 --> 00:04:55,040
very easy to debug the problem because

00:04:52,640 --> 00:04:57,710
everything is stripped down and

00:04:55,040 --> 00:05:01,040
individualized into functions and the

00:04:57,710 --> 00:05:06,290
updates are seamlessly happening in some

00:05:01,040 --> 00:05:07,910
seconds so I will take you back and talk

00:05:06,290 --> 00:05:11,750
a little bit about the progression of

00:05:07,910 --> 00:05:13,640
computing years ago like in this big

00:05:11,750 --> 00:05:15,710
room let's say we had computers that

00:05:13,640 --> 00:05:18,590
were filling this room big mainframes

00:05:15,710 --> 00:05:21,220
very hard to maintain very hard to

00:05:18,590 --> 00:05:25,240
change very expensive not that powerful

00:05:21,220 --> 00:05:28,360
then today we basically live in the

00:05:25,240 --> 00:05:30,830
times that we have pocket-sized

00:05:28,360 --> 00:05:33,440
computers you all have smartphones you

00:05:30,830 --> 00:05:36,200
all know but raspberry PI's are although

00:05:33,440 --> 00:05:38,510
it seems that this is not enough we

00:05:36,200 --> 00:05:40,550
still need some space to place those

00:05:38,510 --> 00:05:43,400
machines right we still need the server

00:05:40,550 --> 00:05:45,140
room a couple of years ago actually if

00:05:43,400 --> 00:05:47,330
you want to expand your interest track

00:05:45,140 --> 00:05:50,270
solution to rent another room to buy

00:05:47,330 --> 00:05:51,950
servers to pay for Alec Street for for

00:05:50,270 --> 00:05:54,920
the air-conditioning for the electricity

00:05:51,950 --> 00:05:56,240
and all those things so what happened

00:05:54,920 --> 00:05:59,690
next as the next step in the evolution

00:05:56,240 --> 00:06:01,850
is we discovered virtual machines so in

00:05:59,690 --> 00:06:05,690
the same scene in the same server we

00:06:01,850 --> 00:06:10,520
sliced it up in virtual machines so we

00:06:05,690 --> 00:06:13,400
don't need more space for more servers

00:06:10,520 --> 00:06:17,840
in that case the problem with virtual

00:06:13,400 --> 00:06:20,650
machines is that they actually you don't

00:06:17,840 --> 00:06:23,870
realize that they exist I mean in a

00:06:20,650 --> 00:06:26,540
bare-metal physical server you you see

00:06:23,870 --> 00:06:30,140
it you can touch it in when I see a

00:06:26,540 --> 00:06:31,850
server I don't know how many virtual

00:06:30,140 --> 00:06:33,529
machines are inside or something like

00:06:31,850 --> 00:06:36,079
that so in order to

00:06:33,529 --> 00:06:38,929
realize that virtual machine exists is

00:06:36,079 --> 00:06:40,969
only when it is online right only when

00:06:38,929 --> 00:06:42,139
it has an IP I that I can pig in

00:06:40,969 --> 00:06:44,239
something otherwise I have no

00:06:42,139 --> 00:06:48,199
information of the existence of this

00:06:44,239 --> 00:06:50,899
instance the virtual machines in order

00:06:48,199 --> 00:06:52,819
to be online they have to boot so we

00:06:50,899 --> 00:06:55,279
treat them as a normal computer in that

00:06:52,819 --> 00:07:01,009
case which means that we have to wait

00:06:55,279 --> 00:07:03,529
for boot time then the next step in the

00:07:01,009 --> 00:07:07,759
evolution is containers containers are

00:07:03,529 --> 00:07:10,699
let's say smaller virtual machines not

00:07:07,759 --> 00:07:12,289
that good isolated but they have two

00:07:10,699 --> 00:07:15,169
interesting characteristics

00:07:12,289 --> 00:07:17,479
characteristics number one number one is

00:07:15,169 --> 00:07:19,489
that they are smaller when we think of

00:07:17,479 --> 00:07:21,739
containers will think of megabytes when

00:07:19,489 --> 00:07:24,319
we think of Keuka images we think of

00:07:21,739 --> 00:07:26,779
gigabytes usually and the second thing

00:07:24,319 --> 00:07:29,929
is that the containers can start and

00:07:26,779 --> 00:07:32,239
stop in milliseconds so we can

00:07:29,929 --> 00:07:34,579
immediately understand that this thing

00:07:32,239 --> 00:07:37,219
is online while in in a virtual machine

00:07:34,579 --> 00:07:40,279
we have to wait to boot okay

00:07:37,219 --> 00:07:42,860
and apparently we live in times that

00:07:40,279 --> 00:07:45,139
people say that the best way to deploy a

00:07:42,860 --> 00:07:48,039
web app or any app is inside the

00:07:45,139 --> 00:07:51,439
container and how would you do that

00:07:48,039 --> 00:07:55,279
well Google gave us the solution in that

00:07:51,439 --> 00:07:58,189
case which is kubernetes now it's an

00:07:55,279 --> 00:08:03,379
open source project and what kubernetes

00:07:58,189 --> 00:08:06,289
is is the guy that basically manages

00:08:03,379 --> 00:08:08,689
your containers stops them replicates

00:08:06,289 --> 00:08:11,449
them skill them heal them he is the

00:08:08,689 --> 00:08:14,299
administrator of your containers in that

00:08:11,449 --> 00:08:19,999
case what is the problem with with

00:08:14,299 --> 00:08:22,969
kubernetes the problem is that how many

00:08:19,999 --> 00:08:26,869
of you are let's say developers you know

00:08:22,969 --> 00:08:31,309
how to write code all of you perfect so

00:08:26,869 --> 00:08:34,219
how many of you know how to do average

00:08:31,309 --> 00:08:39,229
workflow in kubernetes meaning you know

00:08:34,219 --> 00:08:42,349
how to deploy a docker image to send it

00:08:39,229 --> 00:08:44,750
to the to the registry to write a spec

00:08:42,349 --> 00:08:46,930
file for your deployment to write a spec

00:08:44,750 --> 00:08:48,880
file for your

00:08:46,930 --> 00:08:51,910
servus if it's going to be a service and

00:08:48,880 --> 00:08:53,860
then use an ingress controller not that

00:08:51,910 --> 00:08:55,930
many of you that you raise your hand

00:08:53,860 --> 00:08:58,899
before I think only two people raise

00:08:55,930 --> 00:09:01,240
your hand so as you can see the

00:08:58,899 --> 00:09:04,360
developers today they have to be

00:09:01,240 --> 00:09:06,220
kubernetes administrators first and then

00:09:04,360 --> 00:09:08,350
developers and there are some people and

00:09:06,220 --> 00:09:11,770
say you know I know how to write Python

00:09:08,350 --> 00:09:13,089
but I don't really care where my code is

00:09:11,770 --> 00:09:17,200
going to run I don't want to maintain

00:09:13,089 --> 00:09:18,070
that server so can this be a little bit

00:09:17,200 --> 00:09:22,450
easier

00:09:18,070 --> 00:09:25,000
I mean and the second thing is and now

00:09:22,450 --> 00:09:27,940
we are in an integration period of many

00:09:25,000 --> 00:09:30,459
people are converting their big

00:09:27,940 --> 00:09:32,440
monoliths into micro services and what

00:09:30,459 --> 00:09:33,790
is happening it what what is going to

00:09:32,440 --> 00:09:35,470
happen and what is happening for the

00:09:33,790 --> 00:09:37,779
companies that have already been there

00:09:35,470 --> 00:09:40,800
is like they end up with having let's

00:09:37,779 --> 00:09:43,839
say 100 micro services in the

00:09:40,800 --> 00:09:46,450
infrastructure and then while they

00:09:43,839 --> 00:09:49,450
monitor them they realize that you know

00:09:46,450 --> 00:09:53,890
from this 100 will actually use five of

00:09:49,450 --> 00:09:57,430
them and there is not that much but they

00:09:53,890 --> 00:10:00,070
have to pay for 100 they have to pay CPU

00:09:57,430 --> 00:10:02,200
resources store ads and everything for

00:10:00,070 --> 00:10:05,680
the 100 even though they use just five

00:10:02,200 --> 00:10:08,290
of them so how this can be a little bit

00:10:05,680 --> 00:10:11,709
simpler for the developer and how this

00:10:08,290 --> 00:10:17,020
can be a little bit more efficient cost

00:10:11,709 --> 00:10:19,240
wise and you have to think like that I

00:10:17,020 --> 00:10:20,800
told you before to pay attention to the

00:10:19,240 --> 00:10:25,810
characteristics of the containers which

00:10:20,800 --> 00:10:28,959
are smaller and faster what if we go the

00:10:25,810 --> 00:10:32,650
next step in the architecture design I

00:10:28,959 --> 00:10:35,890
know and say that we split the micro

00:10:32,650 --> 00:10:39,100
service which is already small enough we

00:10:35,890 --> 00:10:41,560
split it into functions so all those

00:10:39,100 --> 00:10:44,770
functions altogether they consist the

00:10:41,560 --> 00:10:46,720
micro service the characteristic of a

00:10:44,770 --> 00:10:49,839
function is that is a small piece of

00:10:46,720 --> 00:10:53,350
code and usually it executes pretty fast

00:10:49,839 --> 00:10:56,230
so small container small piece of code

00:10:53,350 --> 00:10:59,040
first container fast execution time if

00:10:56,230 --> 00:11:00,710
you combine this you have several less

00:10:59,040 --> 00:11:05,260
meaning

00:11:00,710 --> 00:11:09,320
if I can spawn a container that fast

00:11:05,260 --> 00:11:11,000
when the user asks me to do it the user

00:11:09,320 --> 00:11:14,360
is not going to realize that this thing

00:11:11,000 --> 00:11:17,900
was dead before right I mean he asked

00:11:14,360 --> 00:11:20,360
for it he gets it the delay is less than

00:11:17,900 --> 00:11:22,750
10 milliseconds he's not going to

00:11:20,360 --> 00:11:26,300
realize the decision is not running so

00:11:22,750 --> 00:11:28,550
what's the reason of having this thing

00:11:26,300 --> 00:11:32,450
running in the first place and costuming

00:11:28,550 --> 00:11:35,630
money none and this is why surveillance

00:11:32,450 --> 00:11:39,220
is so popular today because it saves you

00:11:35,630 --> 00:11:44,410
money and how much money you may ask

00:11:39,220 --> 00:11:44,410
let's see I was checking some articles

00:11:45,460 --> 00:11:55,820
let's look this from ten thousand they

00:11:50,480 --> 00:11:59,900
drop down to three hundred seventy and

00:11:55,820 --> 00:12:01,130
here the article here some some graphs

00:11:59,900 --> 00:12:05,780
and other stuff

00:12:01,130 --> 00:12:09,640
the thing is in average you can cost you

00:12:05,780 --> 00:12:14,450
can decrease your cost down to 70%

00:12:09,640 --> 00:12:16,820
minimum and maximum 90% and this is why

00:12:14,450 --> 00:12:20,510
everybody likes that because they save a

00:12:16,820 --> 00:12:23,450
lot of money like literally a lot they

00:12:20,510 --> 00:12:25,700
just pay what they use they don't have

00:12:23,450 --> 00:12:28,310
anything running and because there is no

00:12:25,700 --> 00:12:30,500
service running this is why they call it

00:12:28,310 --> 00:12:31,790
several is like there is no server

00:12:30,500 --> 00:12:34,780
running in the first place

00:12:31,790 --> 00:12:40,040
it goes up only when you guys need it

00:12:34,780 --> 00:12:41,180
the second thing is that actually since

00:12:40,040 --> 00:12:43,490
I have a presentation in this

00:12:41,180 --> 00:12:52,760
presentation let me go to the correct

00:12:43,490 --> 00:12:57,070
slide number five okay and let's talk a

00:12:52,760 --> 00:13:02,600
little bit about what several less means

00:12:57,070 --> 00:13:04,550
it's all about point of view okay from

00:13:02,600 --> 00:13:08,110
the point of view of the developer the

00:13:04,550 --> 00:13:11,800
developer just writes a function and

00:13:08,110 --> 00:13:14,360
then it sends that function to

00:13:11,800 --> 00:13:17,089
kubernetes or the server less

00:13:14,360 --> 00:13:19,369
infrastructure and his facts a function

00:13:17,089 --> 00:13:21,319
is going to scale is going to be

00:13:19,369 --> 00:13:25,100
maintained by somebody else in other

00:13:21,319 --> 00:13:27,709
words servers do exist of course they

00:13:25,100 --> 00:13:30,110
exist is just not your servers is

00:13:27,709 --> 00:13:33,459
somebody else problem to solve in that

00:13:30,110 --> 00:13:36,739
case that's the whole thing Wow

00:13:33,459 --> 00:13:38,809
from the point of view of managers that

00:13:36,739 --> 00:13:41,239
they deal with money and stuff

00:13:38,809 --> 00:13:43,129
they see the benefit of the cost that

00:13:41,239 --> 00:13:45,649
they reduce the cost they don't have to

00:13:43,129 --> 00:13:48,559
have any virtual machine bare metal or

00:13:45,649 --> 00:13:50,569
even containers running 24/7 these

00:13:48,559 --> 00:13:53,899
things are running only when it's needed

00:13:50,569 --> 00:13:59,989
so you pay only what you use in that

00:13:53,899 --> 00:14:01,489
case from the point of view of the from

00:13:59,989 --> 00:14:03,319
the point of view of the administrators

00:14:01,489 --> 00:14:05,360
well the administrators have to

00:14:03,319 --> 00:14:06,889
administer something tough like guys not

00:14:05,360 --> 00:14:10,189
surveillance for you there is a server

00:14:06,889 --> 00:14:14,149
there although you can do a lot of stuff

00:14:10,189 --> 00:14:16,309
with kubernetes nowadays and basically

00:14:14,149 --> 00:14:19,189
as soon as you have a deployment there

00:14:16,309 --> 00:14:21,649
kubernetes can basically auto scale your

00:14:19,189 --> 00:14:24,679
deployment and I will show you a live

00:14:21,649 --> 00:14:28,279
demo later on how kubernetes can auto

00:14:24,679 --> 00:14:29,989
scale this it can self heal your pods if

00:14:28,279 --> 00:14:32,360
something goes down could burn this will

00:14:29,989 --> 00:14:36,319
understand that and automatically spawn

00:14:32,360 --> 00:14:39,169
another pod for you so the typical

00:14:36,319 --> 00:14:41,720
administrator thing is there but it has

00:14:39,169 --> 00:14:43,850
a lot of help from the system and from

00:14:41,720 --> 00:14:46,759
the user perspective or the customer

00:14:43,850 --> 00:14:49,790
perspective they don't realize any

00:14:46,759 --> 00:14:52,730
difference they actually have access in

00:14:49,790 --> 00:14:56,049
the services just to give you an example

00:14:52,730 --> 00:14:59,209
if you go and buy coca-cola from these

00:14:56,049 --> 00:15:01,639
fridges that you swipe your card what

00:14:59,209 --> 00:15:03,439
happens is that by the time you swipe

00:15:01,639 --> 00:15:06,850
your card there is a serverless

00:15:03,439 --> 00:15:10,129
lambda a function from a duck from AWS

00:15:06,850 --> 00:15:10,339
that makes the transaction so Coke and

00:15:10,129 --> 00:15:12,319
Coke

00:15:10,339 --> 00:15:16,489
so coca-cola is a company in that case

00:15:12,319 --> 00:15:21,100
they pay for this service only when you

00:15:16,489 --> 00:15:21,100
pay for a Cola in that case

00:15:24,030 --> 00:15:31,390
so the next question is all all those

00:15:28,600 --> 00:15:34,930
things seems to be really or fine and

00:15:31,390 --> 00:15:38,020
great then why everybody's using this

00:15:34,930 --> 00:15:42,070
right why you say that good things and

00:15:38,020 --> 00:15:45,190
we are not really see people using this

00:15:42,070 --> 00:15:50,050
well first thing is it's a very new

00:15:45,190 --> 00:15:52,120
technology and with every technology now

00:15:50,050 --> 00:15:55,270
is the time that this technology is

00:15:52,120 --> 00:15:58,570
actually cost-effective the same thing

00:15:55,270 --> 00:16:01,480
what happens with every technological

00:15:58,570 --> 00:16:04,570
project do you remember 10 years ago the

00:16:01,480 --> 00:16:07,030
CRT monitors real big ones and the LCDs

00:16:04,570 --> 00:16:09,400
were really expensive so now it's time

00:16:07,030 --> 00:16:12,870
for this thing to like you have a

00:16:09,400 --> 00:16:16,390
relatively cheap cloud infrastructure

00:16:12,870 --> 00:16:19,870
relatively cheap computers also power

00:16:16,390 --> 00:16:23,200
and all those things the problem also

00:16:19,870 --> 00:16:25,660
with that is because it's new is not

00:16:23,200 --> 00:16:27,970
mature enough and people are not going

00:16:25,660 --> 00:16:32,100
to replace what they make money with

00:16:27,970 --> 00:16:37,120
with something which is relatively new

00:16:32,100 --> 00:16:40,330
Amazon and other services Google has you

00:16:37,120 --> 00:16:43,060
and other cloud providers they want to

00:16:40,330 --> 00:16:45,220
boost this so they give you for free you

00:16:43,060 --> 00:16:48,370
say it for example AWS gives you 1

00:16:45,220 --> 00:16:50,860
million calls for free 1 million

00:16:48,370 --> 00:16:53,500
constants a lot so you can play you can

00:16:50,860 --> 00:16:57,460
study that you can google for tutorials

00:16:53,500 --> 00:17:00,190
and stuff without costing you money but

00:16:57,460 --> 00:17:03,280
even though the problem is that there

00:17:00,190 --> 00:17:05,650
are no tools around this thing so for

00:17:03,280 --> 00:17:10,110
example many people that use Amazon they

00:17:05,650 --> 00:17:14,620
also use the task bird for monitoring so

00:17:10,110 --> 00:17:17,490
you start to you know I need this tool

00:17:14,620 --> 00:17:23,920
providing this stat and it's not really

00:17:17,490 --> 00:17:26,680
solid let's say yet and this is why one

00:17:23,920 --> 00:17:32,170
year before the Linux Foundation the

00:17:26,680 --> 00:17:35,680
SNCF made this as a project and they try

00:17:32,170 --> 00:17:38,980
to standardize the format

00:17:35,680 --> 00:17:45,760
there are so many several s frameworks

00:17:38,980 --> 00:17:48,070
in that case we have we have several s

00:17:45,760 --> 00:17:54,220
yeah not a unique name

00:17:48,070 --> 00:17:57,520
we have nucleo we have vision we have

00:17:54,220 --> 00:18:00,070
cublas we have cube list by the way

00:17:57,520 --> 00:18:01,530
since we're in university if there are

00:18:00,070 --> 00:18:03,700
students playing with machine learning

00:18:01,530 --> 00:18:08,140
this is what they use in machine

00:18:03,700 --> 00:18:10,840
learning nowadays quite a lot and also a

00:18:08,140 --> 00:18:13,080
patsy open whisk the one that we are

00:18:10,840 --> 00:18:14,800
going to talk about today is open fast

00:18:13,080 --> 00:18:17,500
but you see there are many

00:18:14,800 --> 00:18:19,480
implementations and people start to get

00:18:17,500 --> 00:18:22,900
dizzy with all things

00:18:19,480 --> 00:18:27,640
so the CNC F group said you know let's

00:18:22,900 --> 00:18:31,360
standardize things and quite recently in

00:18:27,640 --> 00:18:37,090
cube con they actually made the very

00:18:31,360 --> 00:18:40,000
first draft you see the version is 0.1

00:18:37,090 --> 00:18:43,540
so they try to have a specification like

00:18:40,000 --> 00:18:45,400
what in what a an event is going to be

00:18:43,540 --> 00:18:47,440
like how you're Jason is going to be

00:18:45,400 --> 00:18:49,750
like and all those things to make sure

00:18:47,440 --> 00:18:53,920
that everybody is not going wild and

00:18:49,750 --> 00:18:59,680
crazy and try to standardize all all the

00:18:53,920 --> 00:19:02,050
things so okay this is serverless and

00:18:59,680 --> 00:19:06,040
how you are going to use it in that case

00:19:02,050 --> 00:19:08,740
with functions and function as a service

00:19:06,040 --> 00:19:11,410
is the technology that developers are

00:19:08,740 --> 00:19:14,140
going to use to write functions that

00:19:11,410 --> 00:19:16,930
they pass them to the surveillance

00:19:14,140 --> 00:19:23,020
infrastructure and have what we exactly

00:19:16,930 --> 00:19:30,490
said before so let's try to have a demo

00:19:23,020 --> 00:19:35,410
in that case in that case I'm using mini

00:19:30,490 --> 00:19:38,320
cube because unfortunately everything

00:19:35,410 --> 00:19:41,670
else seems to be broken in openSUSE when

00:19:38,320 --> 00:19:41,670
it comes to kubernetes

00:19:42,200 --> 00:19:47,230
yeah if you are using kubernetes blick

00:19:44,570 --> 00:19:50,930
make me a favor and file bug reports

00:19:47,230 --> 00:19:52,820
start using it we have cubic later on

00:19:50,930 --> 00:19:54,320
today Richard brown and Alexander

00:19:52,820 --> 00:19:56,900
heretic here is going to give you a

00:19:54,320 --> 00:19:58,850
presentation about this we need people

00:19:56,900 --> 00:20:01,850
guys we need the community to embrace

00:19:58,850 --> 00:20:05,000
the things in open Susan start be active

00:20:01,850 --> 00:20:08,090
we cannot have broken stuff when it

00:20:05,000 --> 00:20:15,140
comes to the latest technologies like

00:20:08,090 --> 00:20:17,920
that we really need your help so for

00:20:15,140 --> 00:20:28,420
this one let me switch to a terminal

00:20:17,920 --> 00:20:28,420
okay so let me see where I have my notes

00:20:32,880 --> 00:20:36,179
[Music]

00:20:46,020 --> 00:20:54,850
okay so for those of you that you are

00:20:52,780 --> 00:20:56,679
new to kubernetes the first thing that

00:20:54,850 --> 00:20:58,630
you are going to find this mini mini

00:20:56,679 --> 00:21:01,059
cube is similar to shallow world in

00:20:58,630 --> 00:21:03,190
every other programming language is the

00:21:01,059 --> 00:21:07,120
easiest and simplest way to deploy your

00:21:03,190 --> 00:21:09,429
cluster within a minute or so or even

00:21:07,120 --> 00:21:11,110
less and truth to be told it's not going

00:21:09,429 --> 00:21:14,409
to be a real cluster it's going to be a

00:21:11,110 --> 00:21:17,049
single node cluster I would like to have

00:21:14,409 --> 00:21:19,450
tube ADM here to show you how you can

00:21:17,049 --> 00:21:21,280
have multiple clusters but it doesn't

00:21:19,450 --> 00:21:23,440
work at the moment and even with mini

00:21:21,280 --> 00:21:26,440
tube I had to use the go binaries from

00:21:23,440 --> 00:21:28,659
the upstream so mini cube is a little

00:21:26,440 --> 00:21:30,610
bit grumpy and by default it uses

00:21:28,659 --> 00:21:33,760
VirtualBox and I don't really want to

00:21:30,610 --> 00:21:39,340
use VirtualBox in my Linux machine so I

00:21:33,760 --> 00:21:45,100
use KVM in in case you would like to do

00:21:39,340 --> 00:21:48,130
the same you can go to my blog so it's

00:21:45,100 --> 00:21:52,270
not a difficult URL it's my first name

00:21:48,130 --> 00:21:54,940
and my last name and you can find this

00:21:52,270 --> 00:21:57,520
article and there I have the KVM

00:21:54,940 --> 00:22:01,450
configuration that you guys are going to

00:21:57,520 --> 00:22:05,980
need in order for mini tube to use KVM

00:22:01,450 --> 00:22:15,340
and libvirt in that case so let me take

00:22:05,980 --> 00:22:18,190
this command open a new terminal do I

00:22:15,340 --> 00:22:22,020
have another one open already I said it

00:22:18,190 --> 00:22:22,020
open already okay

00:22:24,830 --> 00:22:34,910
so make there openSUSE conference 18

00:22:28,520 --> 00:22:37,280
let's go into the conference mini cube

00:22:34,910 --> 00:22:40,890
this will take some time

00:22:37,280 --> 00:22:44,280
and what it will do basically it will

00:22:40,890 --> 00:22:48,600
download chuka image

00:22:44,280 --> 00:22:52,080
I hope the Wi-Fi will be okay with that

00:22:48,600 --> 00:22:55,920
and automatically configure kubernetes

00:22:52,080 --> 00:22:59,550
for you in your case while this is

00:22:55,920 --> 00:23:02,250
happening let's discuss some things I

00:22:59,550 --> 00:23:04,470
suppose some of you you already have

00:23:02,250 --> 00:23:07,140
some applications and you would like to

00:23:04,470 --> 00:23:11,190
port them in this new kind of thing what

00:23:07,140 --> 00:23:14,730
you will need you will probably need to

00:23:11,190 --> 00:23:16,500
switch to JavaScript most of the people

00:23:14,730 --> 00:23:17,790
don't really like it it's not that it

00:23:16,500 --> 00:23:20,010
doesn't work with other programming

00:23:17,790 --> 00:23:23,790
language many people also use Python and

00:23:20,010 --> 00:23:27,270
other Ruby also but for me at that

00:23:23,790 --> 00:23:30,120
moment it seems like JavaScript has the

00:23:27,270 --> 00:23:31,830
best tooling around those things second

00:23:30,120 --> 00:23:34,140
thing you have to consider is that you

00:23:31,830 --> 00:23:36,990
have completely destroyed your middle

00:23:34,140 --> 00:23:40,770
layer in your application the whole

00:23:36,990 --> 00:23:43,050
logic has to be in functions in order to

00:23:40,770 --> 00:23:45,170
be able to scale the third thing you

00:23:43,050 --> 00:23:49,950
have to find the server less friendly

00:23:45,170 --> 00:23:54,390
framework I recommend you where it is

00:23:49,950 --> 00:23:59,970
the view Jes if I have it here but I can

00:23:54,390 --> 00:24:05,010
also google it UJS this is a friendly

00:23:59,970 --> 00:24:10,610
framework for that stuff okay if you

00:24:05,010 --> 00:24:14,550
change maybe it's not it's orc okay I

00:24:10,610 --> 00:24:17,850
went with a better domain in that case

00:24:14,550 --> 00:24:20,570
you dodged a yes okay and you see here

00:24:17,850 --> 00:24:26,070
it says a function as a service platform

00:24:20,570 --> 00:24:27,720
library no you don't see it yes here so

00:24:26,070 --> 00:24:33,120
it's better to start with something

00:24:27,720 --> 00:24:36,380
friendly for you and the last thing that

00:24:33,120 --> 00:24:38,310
I would like to mention here is security

00:24:36,380 --> 00:24:44,250
security security

00:24:38,310 --> 00:24:47,100
security one out of five serverless apps

00:24:44,250 --> 00:24:50,280
has a critical security vulnerability

00:24:47,100 --> 00:24:53,580
why because most people are copy and

00:24:50,280 --> 00:24:57,540
paste stuff from tutorials and this is a

00:24:53,580 --> 00:24:58,830
new technology so in latest ok let's do

00:24:57,540 --> 00:25:01,050
that and they end up with having

00:24:58,830 --> 00:25:05,850
passwords and secrets in kubernetes in

00:25:01,050 --> 00:25:08,010
github and other staff then you have to

00:25:05,850 --> 00:25:10,280
actually familiar as as you'll help with

00:25:08,010 --> 00:25:13,440
JSON web tokens that's how the

00:25:10,280 --> 00:25:16,470
authentication works so do me a favor

00:25:13,440 --> 00:25:20,130
and before really starting doing this

00:25:16,470 --> 00:25:29,430
just study how the off education works

00:25:20,130 --> 00:25:37,760
there okay let's see first list okay we

00:25:29,430 --> 00:25:45,720
have it running that's good so let's see

00:25:37,760 --> 00:25:51,140
oops ETL cluster info ok our cluster is

00:25:45,720 --> 00:25:56,220
there cube city L get pods let's see the

00:25:51,140 --> 00:25:59,460
namespaces first get namespaces so by

00:25:56,220 --> 00:26:03,540
default mini cube creates for you three

00:25:59,460 --> 00:26:08,010
namespaces in that case if we look what

00:26:03,540 --> 00:26:17,990
is happening in the namespace of cube

00:26:08,010 --> 00:26:21,110
system get pod I have to get the pod

00:26:17,990 --> 00:26:25,040
it already has created this pot for you

00:26:21,110 --> 00:26:30,320
and as you can see it has already

00:26:25,040 --> 00:26:32,210
created a dashboard in order if you

00:26:30,320 --> 00:26:35,650
don't like terminal you can also do all

00:26:32,210 --> 00:26:40,190
those things graphically basically and

00:26:35,650 --> 00:26:46,490
we are going to see the service running

00:26:40,190 --> 00:26:50,059
there the service is using node port for

00:26:46,490 --> 00:26:54,950
the networking so it's already set up

00:26:50,059 --> 00:26:58,370
and the port is 30,000 now we need to

00:26:54,950 --> 00:27:02,929
find the actual port that we want to use

00:26:58,370 --> 00:27:13,480
so as the IP of the machine sorry

00:27:02,929 --> 00:27:13,480
so describe port and describe this one

00:27:13,780 --> 00:27:21,320
and here we get the description of what

00:27:17,690 --> 00:27:22,550
is happening and somewhere here should

00:27:21,320 --> 00:27:25,340
say note yes

00:27:22,550 --> 00:27:28,160
note here so this is the IP and I'm

00:27:25,340 --> 00:27:31,429
going to use in order to access my

00:27:28,160 --> 00:27:36,260
service in that case at port 330

00:27:31,429 --> 00:27:38,929
thousand dancing right yeah 1 2 3 so

00:27:36,260 --> 00:27:41,809
this is the default - port you get with

00:27:38,929 --> 00:27:43,580
mini cube in that case so the same thing

00:27:41,809 --> 00:27:46,010
that you can query from the command line

00:27:43,580 --> 00:27:48,350
you can do it also here so we just

00:27:46,010 --> 00:27:52,280
change the namespace for example to cube

00:27:48,350 --> 00:27:54,410
system and you see here that we can see

00:27:52,280 --> 00:27:56,300
the port the deployments the replicas

00:27:54,410 --> 00:28:00,920
sets the service is running and all

00:27:56,300 --> 00:28:03,860
those things so next thing in order to

00:28:00,920 --> 00:28:06,440
install open files we are going to use a

00:28:03,860 --> 00:28:11,210
kubernetes package manager' kubernetes

00:28:06,440 --> 00:28:16,370
package manager is helm so i'm going to

00:28:11,210 --> 00:28:19,640
do shell in need okay and what is

00:28:16,370 --> 00:28:22,520
happening now is that it's going to

00:28:19,640 --> 00:28:24,679
deploy a servers on the kubernetes side

00:28:22,520 --> 00:28:27,410
in order to elcome to commit to

00:28:24,679 --> 00:28:28,970
communicate the service is called time

00:28:27,410 --> 00:28:33,289
Tyler

00:28:28,970 --> 00:28:41,210
so let's see again you see Tyler deploy

00:28:33,289 --> 00:28:44,870
here here let me basically do this and

00:28:41,210 --> 00:28:47,750
let's see if the service is already if

00:28:44,870 --> 00:28:52,669
the pod is running or is preparing to

00:28:47,750 --> 00:29:03,409
run Tyler yeah it's running perfect so

00:28:52,669 --> 00:29:09,730
now if I do he'll what she'll let me see

00:29:03,409 --> 00:29:13,909
my notes yeah she'll version it actually

00:29:09,730 --> 00:29:16,630
tries to come tries to communicate here

00:29:13,909 --> 00:29:18,799
is helm here is Tyler in that case so

00:29:16,630 --> 00:29:21,110
shall we can communicate with our

00:29:18,799 --> 00:29:25,570
kubernetes cluster we can use a package

00:29:21,110 --> 00:29:32,350
manager to install easily web apps and

00:29:25,570 --> 00:29:32,350
cubes meaning if you go to Q Bob's here

00:29:32,500 --> 00:29:40,640
here there are 189 packages for

00:29:39,380 --> 00:29:44,419
kubernetes that you can basically

00:29:40,640 --> 00:29:47,150
install with one click in micro-service

00:29:44,419 --> 00:29:49,280
way so you just type what you want you

00:29:47,150 --> 00:29:53,900
run the command and it's installed seems

00:29:49,280 --> 00:29:56,530
similar to zipper in that case so now

00:29:53,900 --> 00:29:59,210
that we have everything installed

00:29:56,530 --> 00:30:01,039
everything ready you need to have a

00:29:59,210 --> 00:30:04,190
kubernetes infrastructure that was

00:30:01,039 --> 00:30:07,580
affair the first step the prerequisite

00:30:04,190 --> 00:30:16,520
now let's go in let's go in to install

00:30:07,580 --> 00:30:22,870
open files you go to this directory in

00:30:16,520 --> 00:30:22,870
github and here we have some information

00:30:23,380 --> 00:30:29,990
first you need to create something is

00:30:27,289 --> 00:30:33,380
beeping here I don't know

00:30:29,990 --> 00:30:35,480
you have to create a namespace for that

00:30:33,380 --> 00:30:39,950
and it's always good to create name

00:30:35,480 --> 00:30:42,650
spaces for your deployments so let's

00:30:39,950 --> 00:30:45,290
create a namespace for open files

00:30:42,650 --> 00:30:48,200
opposed and let's create a different one

00:30:45,290 --> 00:30:51,350
for open files functions so different

00:30:48,200 --> 00:30:55,429
one for the framework and a different

00:30:51,350 --> 00:30:59,600
for the functions and then because

00:30:55,429 --> 00:31:03,890
kubernetes 1.10 is using our hair back

00:30:59,600 --> 00:31:08,000
as a authentication method we are going

00:31:03,890 --> 00:31:12,650
also to deploy it using authentication

00:31:08,000 --> 00:31:16,130
method hair back I mean this air back

00:31:12,650 --> 00:31:23,690
through here it's a good practice to use

00:31:16,130 --> 00:31:27,470
of Education in general so what needs

00:31:23,690 --> 00:31:31,550
listening yes of course I need to clone

00:31:27,470 --> 00:31:35,740
the repository first so for that so the

00:31:31,550 --> 00:31:46,610
repository we need to clone was it here

00:31:35,740 --> 00:31:52,330
yes so come on Wi-Fi I need you just for

00:31:46,610 --> 00:31:56,330
a few kilobytes you can do it thank you

00:31:52,330 --> 00:32:00,170
okay fasten it is fascinating all the

00:31:56,330 --> 00:32:05,540
names have to be fancy and we go into

00:32:00,170 --> 00:32:09,679
the charts charts is the specification

00:32:05,540 --> 00:32:15,710
for the dip for the deployment so if I

00:32:09,679 --> 00:32:18,040
go inside here you can read this is the

00:32:15,710 --> 00:32:20,750
deployment in that case this is the file

00:32:18,040 --> 00:32:28,990
right this is what channel is going to

00:32:20,750 --> 00:32:28,990
you to use so what again

00:32:35,900 --> 00:32:50,660
ah yes thank you guys

00:32:41,690 --> 00:32:53,090
so already things happening here these

00:32:50,660 --> 00:32:55,730
are the services that open fast deploys

00:32:53,090 --> 00:32:59,900
it also deploys from issues for you to

00:32:55,730 --> 00:33:04,030
give you some monitoring and let's see

00:32:59,900 --> 00:33:04,030
here if the service is up and running

00:33:06,490 --> 00:33:13,900
okay

00:33:09,429 --> 00:33:13,900
oops it he'll get pods

00:33:15,010 --> 00:33:22,809
open files why I had to have an error

00:33:24,640 --> 00:33:40,870
just by this is not good

00:33:32,350 --> 00:33:40,870
let me show you how you can change that

00:33:44,080 --> 00:33:54,200
so we did that it worked we did that it

00:33:49,040 --> 00:33:56,929
worked so in case it doesn't work like

00:33:54,200 --> 00:34:03,410
you for the first let's delete it and do

00:33:56,929 --> 00:34:05,600
it again let's see if it's fixed

00:34:03,410 --> 00:34:09,409
ah now it's working so kubernetes

00:34:05,600 --> 00:34:14,300
self-healing things live that's even

00:34:09,409 --> 00:34:18,590
better actually okay so what we need we

00:34:14,300 --> 00:34:21,230
need the IP of the Gateway let's find

00:34:18,590 --> 00:34:23,929
that although we know the IP because we

00:34:21,230 --> 00:34:27,610
have just one pod so we need the port

00:34:23,929 --> 00:34:36,940
that this thing is running so services

00:34:27,610 --> 00:34:39,340
so as the service it's in this port so

00:34:36,940 --> 00:34:45,980
where was the kubernetes

00:34:39,340 --> 00:34:47,570
thingy here okay and I can also see the

00:34:45,980 --> 00:34:49,780
same thing from here because I told you

00:34:47,570 --> 00:34:54,820
you can see the same things from the

00:34:49,780 --> 00:35:00,210
from the dashboard let me go to open

00:34:54,820 --> 00:35:00,210
files in that case let me go to services

00:35:03,480 --> 00:35:15,030
services let's find yet we external and

00:35:09,300 --> 00:35:15,030
here you can see the port also from here

00:35:19,590 --> 00:35:29,230
so this is the web UI of open files

00:35:24,420 --> 00:35:33,730
plain symbol and you just click I mean

00:35:29,230 --> 00:35:36,370
for your first steps you you can just

00:35:33,730 --> 00:35:39,250
click to deploy a new function and here

00:35:36,370 --> 00:35:40,810
there is a github repository with some

00:35:39,250 --> 00:35:45,280
functions that people have contributed

00:35:40,810 --> 00:35:48,640
into just for fun and you can just click

00:35:45,280 --> 00:35:50,320
and have it installed for example if you

00:35:48,640 --> 00:35:54,700
would like to check for SSL

00:35:50,320 --> 00:35:56,770
certification and by clicking here at

00:35:54,700 --> 00:35:59,710
the links you can see the github

00:35:56,770 --> 00:36:02,730
repository for those things so what is

00:35:59,710 --> 00:36:05,500
inside this container in that case

00:36:02,730 --> 00:36:09,220
information how you can invoke the

00:36:05,500 --> 00:36:13,180
function and all that stuff so by

00:36:09,220 --> 00:36:17,410
clicking deploy it has deployed it here

00:36:13,180 --> 00:36:20,380
and let's see if it's actually so now we

00:36:17,410 --> 00:36:24,310
are going to the namespace of FN and get

00:36:20,380 --> 00:36:28,270
the pod here so we see that it's running

00:36:24,310 --> 00:36:31,660
this is good and let's use it let's see

00:36:28,270 --> 00:36:37,180
the certificate of openSUSE dot org in

00:36:31,660 --> 00:36:39,580
that case so it ran and it didn't gave

00:36:37,180 --> 00:36:41,710
us that the openSUSE dot orc certificate

00:36:39,580 --> 00:36:43,750
is going to expire two years from now

00:36:41,710 --> 00:36:46,690
for example this is a simple function

00:36:43,750 --> 00:36:49,390
this thing is not alive is dead

00:36:46,690 --> 00:36:52,060
it goes up only when I click the invoke

00:36:49,390 --> 00:36:55,240
button that's the whole server less

00:36:52,060 --> 00:36:59,770
thing I can call it also from the

00:36:55,240 --> 00:37:03,910
command line in that case I can either

00:36:59,770 --> 00:37:08,860
use Karel or I can also

00:37:03,910 --> 00:37:16,450
use a command-line binary for open files

00:37:08,860 --> 00:37:19,360
called fast CLI so let's try this but I

00:37:16,450 --> 00:37:25,620
have to change the IP to the correct one

00:37:19,360 --> 00:37:31,630
which is 55 okay

00:37:25,620 --> 00:37:33,970
55 the open fast website seems to end up

00:37:31,630 --> 00:37:36,550
in two weeks from now so these guys have

00:37:33,970 --> 00:37:38,410
to fix their certificate in two in two

00:37:36,550 --> 00:37:44,320
weeks from now so this is how you call

00:37:38,410 --> 00:37:48,340
it with a Carol do you need to zoom yeah

00:37:44,320 --> 00:37:52,200
is it everybody okay okay cool I think

00:37:48,340 --> 00:37:58,450
here is better and you can also use the

00:37:52,200 --> 00:38:02,890
facil I command line you can find more

00:37:58,450 --> 00:38:05,320
information by visiting the open files

00:38:02,890 --> 00:38:08,620
github repository how to do it but these

00:38:05,320 --> 00:38:20,370
are the basic instructions in that case

00:38:08,620 --> 00:38:22,710
and you can just call it like that echo

00:38:20,370 --> 00:38:28,180
yes

00:38:22,710 --> 00:38:30,160
55 so that's the same thing just we

00:38:28,180 --> 00:38:32,140
using the binary in case you don't have

00:38:30,160 --> 00:38:39,640
Carol available but you have this I

00:38:32,140 --> 00:38:43,300
don't know what else let's also create a

00:38:39,640 --> 00:38:46,150
function of our own but how much time do

00:38:43,300 --> 00:38:47,920
you have okay we don't have much time we

00:38:46,150 --> 00:38:50,710
have just five minutes but we're also a

00:38:47,920 --> 00:38:52,510
little bit late so I'm going to demo

00:38:50,710 --> 00:38:56,410
because I would like really to demo you

00:38:52,510 --> 00:39:03,790
the the auto scaling function so let's

00:38:56,410 --> 00:39:08,710
go directly to that okay let me open two

00:39:03,790 --> 00:39:12,790
windows that case and I need the IP of

00:39:08,710 --> 00:39:15,210
promised use the portal from misuse of

00:39:12,790 --> 00:39:15,210
the IP

00:39:15,979 --> 00:39:28,529
not UI this is a Prometheus running for

00:39:21,269 --> 00:39:46,339
us for free in that case so let's see

00:39:28,529 --> 00:39:51,059
the rate of this light something wrong

00:39:46,339 --> 00:39:55,519
okay so I have to look at the graph so

00:39:51,059 --> 00:39:59,910
we just call this function where it is

00:39:55,519 --> 00:40:02,160
here three three times we call it three

00:39:59,910 --> 00:40:04,949
times one from the web UI into time from

00:40:02,160 --> 00:40:08,339
the terminal so we have just one a

00:40:04,949 --> 00:40:10,319
replica running or one a replica

00:40:08,339 --> 00:40:14,609
available when we are going to use it in

00:40:10,319 --> 00:40:16,670
that case and the auto scaling scheme

00:40:14,609 --> 00:40:20,369
that we have here if you go to alerts

00:40:16,670 --> 00:40:22,199
here it says that if I start calling

00:40:20,369 --> 00:40:26,249
this if there is traffic using this

00:40:22,199 --> 00:40:29,549
function more than five times in less

00:40:26,249 --> 00:40:32,549
than or in ten seconds then kubernetes

00:40:29,549 --> 00:40:38,249
will auto scale this so let's brute

00:40:32,549 --> 00:40:43,949
force it why not so let's do while this

00:40:38,249 --> 00:40:45,869
is true do this now we're going to

00:40:43,949 --> 00:40:52,199
create a set load of traffic into this

00:40:45,869 --> 00:40:56,759
one so you see here that the invocation

00:40:52,199 --> 00:41:04,769
count is going to get bigger and bigger

00:40:56,759 --> 00:41:09,959
and here add promised use let's see if

00:41:04,769 --> 00:41:17,890
we actually hit that maybe the function

00:41:09,959 --> 00:41:20,910
is not that fast in that case hang so my

00:41:17,890 --> 00:41:24,700
to think that it can handle this one

00:41:20,910 --> 00:41:26,980
it's not that fast to to need to create

00:41:24,700 --> 00:41:29,980
another pod let's create another

00:41:26,980 --> 00:41:34,720
function in that case that it's more

00:41:29,980 --> 00:41:38,050
fast doesn't need that much of time yeah

00:41:34,720 --> 00:41:40,930
this one my laptop seems to be fine with

00:41:38,050 --> 00:41:44,410
this one interesting I have four gigs of

00:41:40,930 --> 00:41:46,900
RAM okay so let's stop this one and

00:41:44,410 --> 00:42:12,130
let's create another one which is really

00:41:46,900 --> 00:42:14,470
faster so not here not here also yes I

00:42:12,130 --> 00:42:16,150
have this information in my in my blog

00:42:14,470 --> 00:42:21,460
because I would like you to read my blog

00:42:16,150 --> 00:42:25,470
calls so yes you go again to my blog and

00:42:21,460 --> 00:42:27,790
you click basically to the open files

00:42:25,470 --> 00:42:29,920
article so you can find more information

00:42:27,790 --> 00:42:32,800
in depth here that we don't have time to

00:42:29,920 --> 00:42:36,450
show you right now about how you can

00:42:32,800 --> 00:42:39,170
write your functions in that case so

00:42:36,450 --> 00:42:42,449
let's create a very simple function

00:42:39,170 --> 00:42:42,449
[Music]

00:42:42,690 --> 00:42:50,320
where it is I think it's called strong

00:42:46,090 --> 00:42:57,870
has rare so we go back to the web

00:42:50,320 --> 00:43:01,320
interface which is where somewhere ah

00:42:57,870 --> 00:43:05,770
it's further away okay

00:43:01,320 --> 00:43:07,990
it's I really have to fix my tabs okay

00:43:05,770 --> 00:43:10,060
deploy a new function now we are going

00:43:07,990 --> 00:43:13,450
to deploy a new functions manually from

00:43:10,060 --> 00:43:15,520
docker hub you can push your function in

00:43:13,450 --> 00:43:23,260
Tokyo hub and you can just put them

00:43:15,520 --> 00:43:28,199
there so and now yeah I need my log so

00:43:23,260 --> 00:43:32,469
we are going to use this function

00:43:28,199 --> 00:43:34,660
this is a docker image Alpine in that

00:43:32,469 --> 00:43:41,979
case I'm sure most of you are familiar

00:43:34,660 --> 00:43:46,089
with this one then let's create a

00:43:41,979 --> 00:43:48,519
function name like strong cos and the

00:43:46,089 --> 00:43:53,439
binary that we are going to use in that

00:43:48,519 --> 00:43:56,109
case it's this binary so a function can

00:43:53,439 --> 00:43:59,380
actually be just a binary guys if you

00:43:56,109 --> 00:44:04,150
just need to play with that it's the

00:43:59,380 --> 00:44:08,289
easiest way to do it and for the network

00:44:04,150 --> 00:44:11,109
there is the default option of func

00:44:08,289 --> 00:44:19,349
functions this is a default network that

00:44:11,109 --> 00:44:19,349
this thing wants to have there so deploy

00:44:20,189 --> 00:44:25,209
and it go deployed so if I write some

00:44:23,469 --> 00:44:28,989
text blah blah blah blah

00:44:25,209 --> 00:44:32,319
this will create as a hoss from that the

00:44:28,989 --> 00:44:34,900
function is still building yeah now you

00:44:32,319 --> 00:44:43,859
see this is the house so let's call this

00:44:34,900 --> 00:44:43,859
function in that case multiple times so

00:44:51,359 --> 00:45:13,960
yeah this is

00:44:53,290 --> 00:45:16,300
not the IP okay it works so while true

00:45:13,960 --> 00:45:17,800
this is really fast it doesn't have to

00:45:16,300 --> 00:45:20,200
visit the website and do the whole thing

00:45:17,800 --> 00:45:24,070
so also that the Wi-Fi was a little bit

00:45:20,200 --> 00:45:26,940
slow so kubernetes was able to do all

00:45:24,070 --> 00:45:32,200
those things without really a problem

00:45:26,940 --> 00:45:35,170
you had to do this so now we are

00:45:32,200 --> 00:45:40,540
creating traffic I hope so

00:45:35,170 --> 00:45:43,720
strong cos let's see strong hands here

00:45:40,540 --> 00:45:47,470
yes already okay this is going way

00:45:43,720 --> 00:45:49,330
faster so let's see yes we hit it you

00:45:47,470 --> 00:45:52,480
see that it's pending the system

00:45:49,330 --> 00:45:56,320
realized that something is taking too

00:45:52,480 --> 00:45:59,710
much traffic normal than usual and it

00:45:56,320 --> 00:46:03,700
activated here you see now it's going to

00:45:59,710 --> 00:46:05,290
get firing yes firing means like burn it

00:46:03,700 --> 00:46:08,350
is now it's going to auto scale the

00:46:05,290 --> 00:46:11,500
thing because we actually try to kill to

00:46:08,350 --> 00:46:15,310
brute force it so we are in 1500 already

00:46:11,500 --> 00:46:17,220
calls and kubernetes scale that for time

00:46:15,310 --> 00:46:20,320
meaning it created four different

00:46:17,220 --> 00:46:22,900
deployments and if we had a normal class

00:46:20,320 --> 00:46:25,630
that not a single node cluster might be

00:46:22,900 --> 00:46:29,680
that one node is in USA one node is

00:46:25,630 --> 00:46:36,520
paging one node is so you have a say in

00:46:29,680 --> 00:46:38,770
that case our time is up I would say for

00:46:36,520 --> 00:46:40,359
more information you can talk to me

00:46:38,770 --> 00:46:44,140
after the

00:46:40,359 --> 00:46:47,859
that the talk and you can also visit my

00:46:44,140 --> 00:46:52,539
website because I have a blog about that

00:46:47,859 --> 00:46:56,619
and also you can go here serverless dot

00:46:52,539 --> 00:46:59,349
lon this is the site and you can judge

00:46:56,619 --> 00:47:02,619
if it makes sense for your applications

00:46:59,349 --> 00:47:05,049
to put them in sin furnace or not and

00:47:02,619 --> 00:47:07,470
with that thank you guys very much for

00:47:05,049 --> 00:47:07,470
being here

00:47:13,520 --> 00:47:18,560
[Applause]

00:47:16,500 --> 00:47:18,560

YouTube URL: https://www.youtube.com/watch?v=WXlvbWm9wDU


