Title: openSUSE Conference 2018 - Tumbleweed Snapshots: Rolling With You
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	The missing link between fixed and rolling releases

Tumbleweed, being a rolling distribution, is constantly changing and packages are constantly being rebuilt against one another and updating requirements. As such it becomes necessary to update even when undesirable. For example, one is running snapshot 17 and the next day snapshot 18 contains a QT update that rebuilt a large number of packages. When attempting to install an application that depends on QT one is greeted with an ugly unresolveable error. It is then necessary to run a full update, likely very large with many unrelated changes, in order to simply install an application as would have been possible yesterday.

If a remote repository containing historical snapshots was available one could simply install the application and perhaps the handful of new dependencies it requires rather than having to update the entire system. This provides one with the benefits of a rolling distribution without requiring the constant change. A week later when a new kernel and DRM stack provides an exciting feature it is still easy to update everything and be running the latest code, but the user is not interrupted by having to update when it should not be necessary.

From another angle, the capabilities of rollback using snapper and btrfs are widely advertised, but the cumbersome and rather unusable state in which a user is left is not commonly discussed. If for example a kernel and/or network manager update completely break network functionality for certain users they can rollback, but then what. As they wait for a fix their installation falls further behind and with that it becomes less and less likely that installing a new package will function properly.

On a similar note, if one wanted to install debuginfo packages it is many times impossible without first updating that application and with it many of its dependencies.

Such historical snapshot repositories are available and a command line tool, built on libzypp changes, which eases usage. This talk will provide an introduction to the motivation behind this project, implementation, and usage. In addition the Tumbleweed snapshot review site will also be covered to aid users in utilizing Tumbleweed in a manor that suits them. In general this approach offers no downsides if one wishes to still update to every new snapshot or preferred to wait in order to ensure a usable system for getting work done.

The review site opens up the possibility to analyze and even predict the stability of releases. With this there is likely plenty of topics of discussion surrounding pushing it further.

- https:// www.youtube.com/watch?v=CSXRreUjiIc
- http:// release-tools.opensuse.org/2017/11/22/Tumbleweed-Snapshots.html
- http:// review.tumbleweed.boombatower.com/

Tumbleweed, being a rolling distribution, is constantly changing and packages are constantly being rebuilt against one another and updating requirements. As such it becomes necessary to update even when undesirable. For example, one is running snapshot 17 and the next day snapshot 18 contains a QT update that rebuilt a large number of packages. When attempting to install an application that depends on QT one is greeted with an ugly unresolveable error. It is then necessary to run a full update, likely very large with many unrelated changes, in order to simply install an application as would have been possible yesterday.

Jimmy Berry
Captions: 
	00:00:05,750 --> 00:00:11,940
all right I guess we'll get started

00:00:08,910 --> 00:00:13,470
this talks on tumbleweed snapshots so

00:00:11,940 --> 00:00:15,360
I'd like to get started

00:00:13,470 --> 00:00:17,820
curious who's actually heard of tongue

00:00:15,360 --> 00:00:21,390
blade snapshots before anyone all right

00:00:17,820 --> 00:00:23,419
who's using it currently all right

00:00:21,390 --> 00:00:28,560
hopefully I can convince some of you to

00:00:23,419 --> 00:00:31,290
some more users so to start off I have a

00:00:28,560 --> 00:00:32,489
video I produced several months back I

00:00:31,290 --> 00:00:33,840
don't know if any of you've seen it but

00:00:32,489 --> 00:00:36,270
I think it does a freely good job of

00:00:33,840 --> 00:00:40,699
introducing the topic so go ahead and

00:00:36,270 --> 00:00:44,820
play that building atop tumbleweed

00:00:40,699 --> 00:00:46,829
introducing tumbleweed snapshots before

00:00:44,820 --> 00:00:48,839
talking about tumbleweed snapshots it is

00:00:46,829 --> 00:00:51,030
helpful to first compare the differences

00:00:48,839 --> 00:00:54,329
between leap a fixed release and

00:00:51,030 --> 00:00:57,030
tumbleweed a rolling release leap is

00:00:54,329 --> 00:00:59,609
released as a frozen set of packages in

00:00:57,030 --> 00:01:01,829
a repository those packages receive

00:00:59,609 --> 00:01:05,010
updates via another repository but the

00:01:01,829 --> 00:01:06,870
main system remains unchanged a user has

00:01:05,010 --> 00:01:09,060
a copy of the packages installed on

00:01:06,870 --> 00:01:11,189
their machine along comes a new version

00:01:09,060 --> 00:01:14,159
of leap which updates the base system

00:01:11,189 --> 00:01:16,500
and lots of packages the user may then

00:01:14,159 --> 00:01:19,680
perform a distribution upgrade to the

00:01:16,500 --> 00:01:22,049
new version tumbleweed differs from leap

00:01:19,680 --> 00:01:23,850
in that the base system and packages are

00:01:22,049 --> 00:01:26,610
constantly changing within the same

00:01:23,850 --> 00:01:28,680
repository the user then performs

00:01:26,610 --> 00:01:30,899
distribution upgrades each time the

00:01:28,680 --> 00:01:33,299
repository is updated tumbleweed

00:01:30,899 --> 00:01:36,000
snapshots provides a separate repository

00:01:33,299 --> 00:01:37,979
for each snapshot of tumbleweed users

00:01:36,000 --> 00:01:40,530
thus have a remote repository that

00:01:37,979 --> 00:01:42,570
matches their installed system unlike

00:01:40,530 --> 00:01:44,579
the single repository approach where

00:01:42,570 --> 00:01:46,530
installing a new package may come from a

00:01:44,579 --> 00:01:48,479
newer snapshot and not fit into the

00:01:46,530 --> 00:01:50,969
installed system with snapshot

00:01:48,479 --> 00:01:51,930
repositories new packages are ensured to

00:01:50,969 --> 00:01:53,909
fit properly

00:01:51,930 --> 00:01:55,619
this provides the benefits of

00:01:53,909 --> 00:01:58,170
bleeding-edge software when you need it

00:01:55,619 --> 00:02:00,060
without the hassle of updating just to

00:01:58,170 --> 00:02:02,700
install new software in effect

00:02:00,060 --> 00:02:04,799
tumbleweed snapshots acts like lots of

00:02:02,700 --> 00:02:07,350
mini fixed releases so you can choose

00:02:04,799 --> 00:02:10,050
when to update this also works well with

00:02:07,350 --> 00:02:12,060
snap aerobics as new software can still

00:02:10,050 --> 00:02:15,080
be installed while you wait for upstream

00:02:12,060 --> 00:02:17,300
fixes extending on this a website and

00:02:15,080 --> 00:02:19,700
a source will be provided to aid users

00:02:17,300 --> 00:02:22,510
in determining what snapshots to avoid

00:02:19,700 --> 00:02:26,000
due to problems that would affect them

00:02:22,510 --> 00:02:28,790
to get started install tumbleweed CLI

00:02:26,000 --> 00:02:30,500
and run tumbleweed in it see the video

00:02:28,790 --> 00:02:32,900
description for links containing more

00:02:30,500 --> 00:02:35,930
details alright

00:02:32,900 --> 00:02:37,970
so possibly the first question that

00:02:35,930 --> 00:02:40,340
needs to be answered is why not just

00:02:37,970 --> 00:02:43,340
always update as I mentioned that's what

00:02:40,340 --> 00:02:45,590
most people do currently so there's two

00:02:43,340 --> 00:02:48,830
main reasons for not updating the first

00:02:45,590 --> 00:02:51,050
one is disruption so obviously you can

00:02:48,830 --> 00:02:52,310
take a fair amount of time to update and

00:02:51,050 --> 00:02:54,560
install and all that sorts of stuff if

00:02:52,310 --> 00:02:55,820
all you actually want is to install some

00:02:54,560 --> 00:02:59,410
missing library or something so you can

00:02:55,820 --> 00:03:02,390
complete your work or an application and

00:02:59,410 --> 00:03:03,950
being stuck so obviously there are

00:03:02,390 --> 00:03:06,800
problems that occur in template that

00:03:03,950 --> 00:03:09,709
effect some users more than others we've

00:03:06,800 --> 00:03:11,870
had various kernel driver issues that

00:03:09,709 --> 00:03:13,100
would cause black and white screens

00:03:11,870 --> 00:03:15,200
things like that that you want to avoid

00:03:13,100 --> 00:03:17,180
so in situations where you've already

00:03:15,200 --> 00:03:19,070
updated encountered those problems and

00:03:17,180 --> 00:03:21,290
rolled back or have read the mailing

00:03:19,070 --> 00:03:22,580
lists and are aware of them you may not

00:03:21,290 --> 00:03:25,370
want to update but this leaves you in

00:03:22,580 --> 00:03:27,130
kind of a precarious situation let's

00:03:25,370 --> 00:03:30,590
we'll look at here in the next slide so

00:03:27,130 --> 00:03:32,590
the impact of updating means that you

00:03:30,590 --> 00:03:34,760
can't always install new software

00:03:32,590 --> 00:03:36,380
because it won't fit in so if a new

00:03:34,760 --> 00:03:38,150
compiler just hit tumbleweed the next

00:03:36,380 --> 00:03:39,290
day after you updated you may have a lot

00:03:38,150 --> 00:03:41,330
of issues if you try to install new

00:03:39,290 --> 00:03:43,790
libraries and depending on how the

00:03:41,330 --> 00:03:47,239
dependencies are set up they may just

00:03:43,790 --> 00:03:48,950
install and cause things to crash so for

00:03:47,239 --> 00:03:50,269
example just a simplified example here

00:03:48,950 --> 00:03:52,580
if you want to install the debug info

00:03:50,269 --> 00:03:54,769
for Mesa and it got updated the next day

00:03:52,580 --> 00:03:56,690
after you had updated obviously it

00:03:54,769 --> 00:03:59,780
wouldn't fit in and what you really want

00:03:56,690 --> 00:04:01,160
is the debug info that was compiled for

00:03:59,780 --> 00:04:06,200
the mesa that's running on your system

00:04:01,160 --> 00:04:08,959
so let's take a look at how template

00:04:06,200 --> 00:04:09,800
snapshots accomplishes this so first of

00:04:08,959 --> 00:04:12,860
all we're gonna take a look at the

00:04:09,800 --> 00:04:13,910
client-side command line so we'll just

00:04:12,860 --> 00:04:15,470
get everyone familiar with what it's

00:04:13,910 --> 00:04:17,450
doing when you initialize everyone's

00:04:15,470 --> 00:04:19,489
hopefully comfortable to perhaps try it

00:04:17,450 --> 00:04:23,120
themselves when you run an it it goes

00:04:19,489 --> 00:04:25,880
ahead it only modifies the main OSS and

00:04:23,120 --> 00:04:27,350
non OSS repositories from tumbleweed the

00:04:25,880 --> 00:04:28,400
rest of the repositories are obviously

00:04:27,350 --> 00:04:30,510
not snapshot

00:04:28,400 --> 00:04:32,490
but it goes ahead and backs the muck for

00:04:30,510 --> 00:04:35,550
you so by backing them up places him in

00:04:32,490 --> 00:04:37,410
a repost directory makes a little hidden

00:04:35,550 --> 00:04:39,930
one called previous so there if you need

00:04:37,410 --> 00:04:42,450
them and it also goes ahead and

00:04:39,930 --> 00:04:44,370
introduces the snapshot version into the

00:04:42,450 --> 00:04:46,320
URL which we'll talk about later and

00:04:44,370 --> 00:04:49,590
this allows you this basically makes

00:04:46,320 --> 00:04:52,290
your repository URLs be able to point to

00:04:49,590 --> 00:04:55,320
different snapshots easily so just to be

00:04:52,290 --> 00:04:57,030
clear you can undo the initialization so

00:04:55,320 --> 00:04:58,590
you can go backwards it will simply put

00:04:57,030 --> 00:05:01,320
them back so you're exactly back into

00:04:58,590 --> 00:05:03,600
the state your before you initialize so

00:05:01,320 --> 00:05:06,510
there should be not too much trouble

00:05:03,600 --> 00:05:09,330
if you mess up what's actually happening

00:05:06,510 --> 00:05:11,190
when you run the init is it modifies the

00:05:09,330 --> 00:05:13,980
posit or e-file to introduce that

00:05:11,190 --> 00:05:16,530
snapper reversion variable which zipper

00:05:13,980 --> 00:05:18,960
supports so basically there's a virus

00:05:16,530 --> 00:05:21,180
directory with the with a file of the

00:05:18,960 --> 00:05:23,070
same name snapchat version would have

00:05:21,180 --> 00:05:24,960
the contents as you see there up a

00:05:23,070 --> 00:05:27,390
particular tumbleweed snapshot which

00:05:24,960 --> 00:05:29,070
then when assembled the URL ends up

00:05:27,390 --> 00:05:31,200
pointing to a remote repository so if

00:05:29,070 --> 00:05:33,920
you want to change that to point to a

00:05:31,200 --> 00:05:36,360
newer snapshot you simply change the

00:05:33,920 --> 00:05:39,210
value in the snapshot version file and

00:05:36,360 --> 00:05:42,450
your URL ends up pointing to a newer

00:05:39,210 --> 00:05:45,390
snapshot so to ease that the command

00:05:42,450 --> 00:05:47,130
line tool simply allows you to execute

00:05:45,390 --> 00:05:48,510
these switch command can specify

00:05:47,130 --> 00:05:50,370
whatever version you want to switch to

00:05:48,510 --> 00:05:52,020
and simply modifies the contents data

00:05:50,370 --> 00:05:55,800
file which effectively changes which

00:05:52,020 --> 00:05:59,960
repository you're pointing it so let's

00:05:55,800 --> 00:06:03,180
look at a typical scenario of updating

00:05:59,960 --> 00:06:04,970
so since the since the actual

00:06:03,180 --> 00:06:07,680
repositories are pointing to a fixed

00:06:04,970 --> 00:06:09,420
version of tumbleweed just running near

00:06:07,680 --> 00:06:11,760
normal refresh and DUP won't work you

00:06:09,420 --> 00:06:14,190
need to actually change which snapshot

00:06:11,760 --> 00:06:16,680
you're pointing it so the command line

00:06:14,190 --> 00:06:18,660
is designed similar to get where you

00:06:16,680 --> 00:06:20,460
basically have a overview status which

00:06:18,660 --> 00:06:23,460
tells you the latest snapshot that's

00:06:20,460 --> 00:06:24,720
available on the remote end the one that

00:06:23,460 --> 00:06:27,720
you're currently targeting and the one

00:06:24,720 --> 00:06:29,250
that's installed so if you run update

00:06:27,720 --> 00:06:32,610
here we can see that we were running the

00:06:29,250 --> 00:06:34,560
530 snapshot and the latest one is 602

00:06:32,610 --> 00:06:36,720
so update automatically just picks the

00:06:34,560 --> 00:06:39,090
latest one and it which and which is

00:06:36,720 --> 00:06:41,190
equivalent to running switch with

00:06:39,090 --> 00:06:42,230
install so basically switch normally

00:06:41,190 --> 00:06:44,610
just changes the

00:06:42,230 --> 00:06:46,200
the value the snapshot that you're

00:06:44,610 --> 00:06:48,330
pointing at so install simply triggers

00:06:46,200 --> 00:06:53,040
refresh in DUP to run afterwards just to

00:06:48,330 --> 00:06:55,410
simplify things also available through

00:06:53,040 --> 00:06:58,200
the command line is the history so you

00:06:55,410 --> 00:06:59,340
can see here's the list just for context

00:06:58,200 --> 00:07:01,320
of the snapshots that would have been

00:06:59,340 --> 00:07:02,700
available on the remote end and since we

00:07:01,320 --> 00:07:05,010
just updated you can see that in our

00:07:02,700 --> 00:07:08,160
history we were on 530 before and we

00:07:05,010 --> 00:07:09,840
updated to 602 the fact that it keeps

00:07:08,160 --> 00:07:11,190
this history makes it easy obviously if

00:07:09,840 --> 00:07:13,410
you're using snapper you can simply

00:07:11,190 --> 00:07:15,900
rollback and all the configuration files

00:07:13,410 --> 00:07:17,640
will have rolled back as well but if

00:07:15,900 --> 00:07:19,500
you're not or you're doing something

00:07:17,640 --> 00:07:22,020
manual you can use this if you run

00:07:19,500 --> 00:07:23,280
tumbleweed revert it will simply look in

00:07:22,020 --> 00:07:26,070
that history file and go back to the

00:07:23,280 --> 00:07:27,930
previous one which again is equivalent

00:07:26,070 --> 00:07:31,110
to you manually selecting which snapshot

00:07:27,930 --> 00:07:32,760
you want to go to and running switch so

00:07:31,110 --> 00:07:36,210
now let's take a look at how the remote

00:07:32,760 --> 00:07:37,620
snapshots are created so you no idea

00:07:36,210 --> 00:07:40,500
what's there so there were several

00:07:37,620 --> 00:07:42,090
iterations of this the first one was

00:07:40,500 --> 00:07:43,860
basically trying to create a whole bunch

00:07:42,090 --> 00:07:45,810
of copies of the repositories with

00:07:43,860 --> 00:07:47,250
symlinks for the files in common the

00:07:45,810 --> 00:07:49,440
idea behind this was simply to allow

00:07:47,250 --> 00:07:52,410
mirrors in the future to easily be able

00:07:49,440 --> 00:07:54,450
to get their own copy was quickly

00:07:52,410 --> 00:07:55,440
replaced with using hard links which the

00:07:54,450 --> 00:07:58,680
mirror should be able to handle with our

00:07:55,440 --> 00:08:01,380
sync no problem and after waiting quite

00:07:58,680 --> 00:08:03,930
a while without getting official hosting

00:08:01,380 --> 00:08:05,940
ended up deciding to host it myself so I

00:08:03,930 --> 00:08:07,140
used Amazon s3 to actually host all the

00:08:05,940 --> 00:08:08,250
files which required a slightly

00:08:07,140 --> 00:08:09,570
different approach since they don't

00:08:08,250 --> 00:08:12,810
support hard links since it's not

00:08:09,570 --> 00:08:15,690
actually a real file system so we'll

00:08:12,810 --> 00:08:19,710
talk about what that structure looks

00:08:15,690 --> 00:08:21,450
like so the s3 structure basically has

00:08:19,710 --> 00:08:23,910
directories for each one of the

00:08:21,450 --> 00:08:26,550
snapshots and a shared directory where

00:08:23,910 --> 00:08:28,470
all the actual rpms are placed and then

00:08:26,550 --> 00:08:30,240
a latest in list file which that command

00:08:28,470 --> 00:08:33,270
line tool access so you know which ones

00:08:30,240 --> 00:08:35,669
are available the structure within an

00:08:33,270 --> 00:08:37,950
individual snapshot basically contains

00:08:35,669 --> 00:08:40,380
the most important pieces the repo data

00:08:37,950 --> 00:08:41,729
but there's some other files in there so

00:08:40,380 --> 00:08:44,070
the repo data if you're not familiar is

00:08:41,729 --> 00:08:45,930
the bit that zipper will request when

00:08:44,070 --> 00:08:48,090
you run refresh to know what packages

00:08:45,930 --> 00:08:49,290
are actually available and then there's

00:08:48,090 --> 00:08:51,360
some other files that I just generate

00:08:49,290 --> 00:08:53,040
the disk file which gives me a rough

00:08:51,360 --> 00:08:55,080
idea of how much that snapshots using

00:08:53,040 --> 00:08:56,610
and the RPM

00:08:55,080 --> 00:09:00,390
and unique lists which we'll talk about

00:08:56,610 --> 00:09:02,850
more later the shared directory then is

00:09:00,390 --> 00:09:05,430
what contains all the RPMs so basically

00:09:02,850 --> 00:09:07,050
anytime a new snapshot introducing new

00:09:05,430 --> 00:09:09,180
rpms are all placed in one big shared

00:09:07,050 --> 00:09:10,920
directory and there are redirects used

00:09:09,180 --> 00:09:12,120
this is basically just avoiding the fact

00:09:10,920 --> 00:09:14,700
that you can't use hard links or any

00:09:12,120 --> 00:09:16,410
kind of symlinks on s3 so we basically

00:09:14,700 --> 00:09:19,110
accomplish the same thing by using

00:09:16,410 --> 00:09:21,500
redirects so the current snapshot has

00:09:19,110 --> 00:09:25,160
always pointed to the live mirrors and

00:09:21,500 --> 00:09:27,180
then the any any older snapshots

00:09:25,160 --> 00:09:30,330
basically point to the shared directory

00:09:27,180 --> 00:09:32,970
for rpms and the repo data served how

00:09:30,330 --> 00:09:35,220
the directory itself so to visualize it

00:09:32,970 --> 00:09:37,080
another way basically have a giant

00:09:35,220 --> 00:09:39,390
shared directory with all the rpms from

00:09:37,080 --> 00:09:41,010
all the snapshots in it and then we

00:09:39,390 --> 00:09:42,630
basically create virtual repositories on

00:09:41,010 --> 00:09:44,610
top of that by basically stacking the

00:09:42,630 --> 00:09:46,590
repo data with the redirects on top of

00:09:44,610 --> 00:09:47,940
the shared directory so we can

00:09:46,590 --> 00:09:51,510
effectively serve multiple snapshots

00:09:47,940 --> 00:09:52,830
with the same set of shared rpms so to

00:09:51,510 --> 00:09:54,960
get another idea of what that looks like

00:09:52,830 --> 00:09:56,460
when you're making a request let's

00:09:54,960 --> 00:10:00,180
imagine we are trying to install the

00:09:56,460 --> 00:10:03,180
food package for this the 602 snapshot

00:10:00,180 --> 00:10:06,600
that was generated get requests for the

00:10:03,180 --> 00:10:07,740
602 snapshot of that RPM which would end

00:10:06,600 --> 00:10:11,250
up being redirected to the shared

00:10:07,740 --> 00:10:13,650
repository for the same file so if we

00:10:11,250 --> 00:10:15,540
were running a older snapshot and we did

00:10:13,650 --> 00:10:17,430
the same thing you would get a request

00:10:15,540 --> 00:10:19,890
for that snapshot and we reject to the

00:10:17,430 --> 00:10:21,780
same place so basically we just saves us

00:10:19,890 --> 00:10:25,710
the hassle or the space of having a

00:10:21,780 --> 00:10:30,260
store loads of the same thing so how

00:10:25,710 --> 00:10:33,810
this is accomplished basically

00:10:30,260 --> 00:10:35,100
run our sync against the active

00:10:33,810 --> 00:10:37,110
snapshot that's published on the

00:10:35,100 --> 00:10:39,660
official mirrors get a list of all the

00:10:37,110 --> 00:10:41,160
files that are in that snapshot we look

00:10:39,660 --> 00:10:44,070
at the previous snapshot that we have on

00:10:41,160 --> 00:10:46,170
s3 and we have that list of all the rpms

00:10:44,070 --> 00:10:48,540
and you know contained within do a diff

00:10:46,170 --> 00:10:51,990
of those determine what unique rpms were

00:10:48,540 --> 00:10:54,060
introduced in the latest snapshot and

00:10:51,990 --> 00:10:56,760
from there we can take those two pieces

00:10:54,060 --> 00:10:58,710
of information we can our sync all the

00:10:56,760 --> 00:11:01,620
files to whatever machine is performing

00:10:58,710 --> 00:11:03,750
the snapshot and then upload them all to

00:11:01,620 --> 00:11:06,090
Amazon shared directory and then we

00:11:03,750 --> 00:11:08,160
basically copy the repo data and a few

00:11:06,090 --> 00:11:12,840
other things but simplified there

00:11:08,160 --> 00:11:14,670
the particular snapshot directory and to

00:11:12,840 --> 00:11:16,890
delete basically do the exact opposite

00:11:14,670 --> 00:11:18,120
so if we wanted to delete the older

00:11:16,890 --> 00:11:19,740
snapshot that we're working with there

00:11:18,120 --> 00:11:23,280
we have the file this both available on

00:11:19,740 --> 00:11:24,750
s3 do basically a unique check to look

00:11:23,280 --> 00:11:27,840
for whatever was unique in the older one

00:11:24,750 --> 00:11:30,210
when compared to the newer one remove

00:11:27,840 --> 00:11:34,460
those from the shared directory and then

00:11:30,210 --> 00:11:37,680
delete the actual repo data directory so

00:11:34,460 --> 00:11:40,440
the limitations of hosting on s3 right

00:11:37,680 --> 00:11:42,450
now is they have a hard limit of 50

00:11:40,440 --> 00:11:43,830
static website redirects and they do not

00:11:42,450 --> 00:11:46,410
support wildcards so that effectively

00:11:43,830 --> 00:11:48,600
limits us to 50 snapshots so that's what

00:11:46,410 --> 00:11:52,200
I've been hosting for the last six

00:11:48,600 --> 00:11:54,240
months or so so how well does this

00:11:52,200 --> 00:11:57,660
approach work for keeping the size down

00:11:54,240 --> 00:11:58,980
you can see here a graph of the s3

00:11:57,660 --> 00:12:01,160
storage consumption over the last few

00:11:58,980 --> 00:12:03,750
months the big spike in the middle was

00:12:01,160 --> 00:12:05,910
introduction of cubic packages in the

00:12:03,750 --> 00:12:08,700
factory which rebuild every single time

00:12:05,910 --> 00:12:10,560
and contain basically copies of lots of

00:12:08,700 --> 00:12:12,060
RPM so they're not terribly useful for

00:12:10,560 --> 00:12:14,130
us so after removing them you can see

00:12:12,060 --> 00:12:15,930
the flat line at the end so we're

00:12:14,130 --> 00:12:19,560
basically running at about 300 gigabytes

00:12:15,930 --> 00:12:21,900
for 50 snapshots which isn't too bad so

00:12:19,560 --> 00:12:23,850
it analyzed that a bit more a full

00:12:21,900 --> 00:12:27,780
snapshot of the OSS and nan OSS

00:12:23,850 --> 00:12:30,300
repositories is roughly 70 gigs the repo

00:12:27,780 --> 00:12:32,960
data directory and all the other files

00:12:30,300 --> 00:12:36,240
that in there is around 860 megabytes

00:12:32,960 --> 00:12:37,770
and the typical shared usage between

00:12:36,240 --> 00:12:39,420
snapshots which basically gives you a

00:12:37,770 --> 00:12:41,340
rough idea of how much churn there

00:12:39,420 --> 00:12:43,170
actually is in tumbleweed is anywhere

00:12:41,340 --> 00:12:44,610
from 1 to 15 gigs with the average being

00:12:43,170 --> 00:12:46,620
right around 5 gigabytes so that's

00:12:44,610 --> 00:12:50,550
basically the number of unique rpms

00:12:46,620 --> 00:12:53,070
produced in each tumble each snapshot so

00:12:50,550 --> 00:12:56,400
50 snapshots ends up using like I said

00:12:53,070 --> 00:12:58,200
around 305 gigs which the raw would have

00:12:56,400 --> 00:13:01,020
been three and three and a half

00:12:58,200 --> 00:13:03,990
terabytes so we're using roughly 9% of

00:13:01,020 --> 00:13:06,240
the size so all the redirecting and all

00:13:03,990 --> 00:13:09,150
that fun muck saving us a bunch of

00:13:06,240 --> 00:13:12,540
storage space so now let's review from

00:13:09,150 --> 00:13:14,010
the user perspective some of the tools

00:13:12,540 --> 00:13:15,660
that I've added basically to help you

00:13:14,010 --> 00:13:17,400
choose snapshots since you have a lot

00:13:15,660 --> 00:13:20,010
more flexibility on when you update and

00:13:17,400 --> 00:13:22,050
what you update to now this is also

00:13:20,010 --> 00:13:23,999
useful if you're not going to use the

00:13:22,050 --> 00:13:25,529
tumbleweed snapshots just to keep in

00:13:23,999 --> 00:13:28,519
keep track of what's actually going on

00:13:25,529 --> 00:13:30,869
in factory and tumbly

00:13:28,519 --> 00:13:32,610
so basically the two main things is a

00:13:30,869 --> 00:13:35,550
scorers introduced for each one of the

00:13:32,610 --> 00:13:37,350
snapshots there's two main parts of the

00:13:35,550 --> 00:13:38,699
score both a feedback score which

00:13:37,350 --> 00:13:40,589
basically comes from looking at the

00:13:38,699 --> 00:13:42,360
factory mailing list and possibly

00:13:40,589 --> 00:13:44,519
expanded in the future but bugzilla as

00:13:42,360 --> 00:13:45,689
well try to get an idea of how many

00:13:44,519 --> 00:13:47,569
problems and if there are problems with

00:13:45,689 --> 00:13:49,769
the snapshot that people are facing and

00:13:47,569 --> 00:13:51,899
that's combined with a predictive score

00:13:49,769 --> 00:13:53,759
which basically looks at particular

00:13:51,899 --> 00:13:55,170
packaged versions and where they are in

00:13:53,759 --> 00:13:57,480
their release cycle or whether or not

00:13:55,170 --> 00:13:59,069
the package turn itself was huge which

00:13:57,480 --> 00:14:00,360
could mean lots of things that recompile

00:13:59,069 --> 00:14:05,129
things like that that have caused issues

00:14:00,360 --> 00:14:06,749
and the fact or in the past so basically

00:14:05,129 --> 00:14:08,249
the idea is that these snapshots kind of

00:14:06,749 --> 00:14:11,459
sit for a week before they're actually

00:14:08,249 --> 00:14:13,439
given a actual stability rating with the

00:14:11,459 --> 00:14:15,720
intent being to allow for feedback from

00:14:13,439 --> 00:14:17,879
users so obviously there would be two

00:14:15,720 --> 00:14:18,959
groups with that people that probably

00:14:17,879 --> 00:14:20,369
aren't running the snapshots will be

00:14:18,959 --> 00:14:23,009
providing that immediate feedback and

00:14:20,369 --> 00:14:25,259
then those that are actually waiting to

00:14:23,009 --> 00:14:26,910
update so again as I mentioned the two

00:14:25,259 --> 00:14:29,279
main feedback sources are from the

00:14:26,910 --> 00:14:31,740
factory mailing list so any basically

00:14:29,279 --> 00:14:33,299
the entire mailing lists are downloaded

00:14:31,740 --> 00:14:35,929
and threaded so anything that's a

00:14:33,299 --> 00:14:39,389
response to the release announcement is

00:14:35,929 --> 00:14:41,730
considered a considered feedback and the

00:14:39,389 --> 00:14:43,649
any threads referencing with the subject

00:14:41,730 --> 00:14:45,899
referencing the particular tumbleweed

00:14:43,649 --> 00:14:47,249
snapshot I was hoping to get more

00:14:45,899 --> 00:14:49,619
detailed at Bugzilla but the way that

00:14:47,249 --> 00:14:51,360
it's structured without a bit more work

00:14:49,619 --> 00:14:54,299
can't really get too much useful

00:14:51,360 --> 00:14:57,119
information so that isn't weighed very

00:14:54,299 --> 00:14:59,999
heavily the idea behind the predictive

00:14:57,119 --> 00:15:02,999
score is basically for users that saw

00:14:59,999 --> 00:15:05,369
for example my parents have my mother

00:15:02,999 --> 00:15:06,990
running tumbly and I don't want to have

00:15:05,369 --> 00:15:08,220
to like babysit when she updates and

00:15:06,990 --> 00:15:10,169
things like that so the idea with this

00:15:08,220 --> 00:15:12,059
being that the predictive score is

00:15:10,169 --> 00:15:13,949
overly cautious basically to avoid

00:15:12,059 --> 00:15:15,629
anything that has caused issues in the

00:15:13,949 --> 00:15:18,360
past so that hopefully someone like that

00:15:15,629 --> 00:15:20,309
could simply update to the most stable

00:15:18,360 --> 00:15:22,290
version of tumbleweed and they may skip

00:15:20,309 --> 00:15:24,540
20 or 30 snapshots in between until it

00:15:22,290 --> 00:15:26,040
happens so as I mentioned some of the

00:15:24,540 --> 00:15:28,529
factors that play into that are like

00:15:26,040 --> 00:15:30,540
initial versions of a colonel or Mesa

00:15:28,529 --> 00:15:33,149
things that we've seen cause like white

00:15:30,540 --> 00:15:34,780
screens for users fun stuff like that or

00:15:33,149 --> 00:15:37,630
if the compiler changes or like I said

00:15:34,780 --> 00:15:40,780
there's a large turn and just packages

00:15:37,630 --> 00:15:41,320
change in one snapshot so some ideas for

00:15:40,780 --> 00:15:43,120
the future

00:15:41,320 --> 00:15:45,520
the current sights kind of rough but

00:15:43,120 --> 00:15:47,710
basically splitting out the scores so

00:15:45,520 --> 00:15:49,060
that people that aren't care concerned

00:15:47,710 --> 00:15:50,080
about the predictive scores they really

00:15:49,060 --> 00:15:52,390
just want to know about feedback can

00:15:50,080 --> 00:15:54,520
more easily separate the two and

00:15:52,390 --> 00:15:55,840
indicates a lot of the factors that are

00:15:54,520 --> 00:15:57,130
going into those two scores so again

00:15:55,840 --> 00:15:59,590
things that don't affect certain people

00:15:57,130 --> 00:16:01,360
they can ignore and possibly just

00:15:59,590 --> 00:16:03,480
condense the site itself which we'll

00:16:01,360 --> 00:16:06,280
take a look at missing it and get it

00:16:03,480 --> 00:16:10,330
possibly officially part of openSUSE ten

00:16:06,280 --> 00:16:11,500
org some other ideas like I mentioned

00:16:10,330 --> 00:16:13,030
this integrating into the command line

00:16:11,500 --> 00:16:14,860
so that basically you could specify when

00:16:13,030 --> 00:16:16,510
you run tumbleweed update hey I only

00:16:14,860 --> 00:16:18,850
want snapshots that are really stable or

00:16:16,510 --> 00:16:21,580
I don't really care things like that and

00:16:18,850 --> 00:16:24,070
then possibly as was suggested to me by

00:16:21,580 --> 00:16:25,270
someone the zipper plug-in or something

00:16:24,070 --> 00:16:27,310
like that which could basically filter

00:16:25,270 --> 00:16:29,170
out issues that don't affect you so for

00:16:27,310 --> 00:16:32,320
example a lot of times when a new kernel

00:16:29,170 --> 00:16:33,700
is introduced the Nvidia drivers variety

00:16:32,320 --> 00:16:34,960
drivers typically have issues of that

00:16:33,700 --> 00:16:37,420
and bunch of people will complain that

00:16:34,960 --> 00:16:39,580
snapshot will then be very negatively

00:16:37,420 --> 00:16:41,230
scored even though for people not using

00:16:39,580 --> 00:16:42,940
the Nvidia proprietary driver you

00:16:41,230 --> 00:16:43,990
obviously don't care at all so they

00:16:42,940 --> 00:16:47,320
don't a filter those things that would

00:16:43,990 --> 00:16:50,770
be some future steps all the data that

00:16:47,320 --> 00:16:52,180
the site ingest and process is all

00:16:50,770 --> 00:16:54,430
available in llaman files if you want to

00:16:52,180 --> 00:16:55,900
do something else with it and it's

00:16:54,430 --> 00:16:57,010
explained and documented on the site if

00:16:55,900 --> 00:16:59,650
you go look which I'll have all the

00:16:57,010 --> 00:17:02,230
links at the end so no let's take a look

00:16:59,650 --> 00:17:05,350
at the current review site as it stands

00:17:02,230 --> 00:17:06,190
so for those of you haven't seen it

00:17:05,350 --> 00:17:07,930
that's what it looks like so you

00:17:06,190 --> 00:17:09,610
basically get it's a long pages just

00:17:07,930 --> 00:17:11,590
list down all the snapshots of

00:17:09,610 --> 00:17:13,570
tumbleweed and provides you some

00:17:11,590 --> 00:17:15,250
information about them you can also use

00:17:13,570 --> 00:17:17,050
the RSS feed so if you'd like to be

00:17:15,250 --> 00:17:18,420
notified of new snapshots that way which

00:17:17,050 --> 00:17:20,590
a lot of people seem to prefer over

00:17:18,420 --> 00:17:25,750
trying to find release announcements in

00:17:20,590 --> 00:17:28,570
the factory list the graph expanded

00:17:25,750 --> 00:17:31,780
there that was on the left basically

00:17:28,570 --> 00:17:32,830
tracks the stability scores that are the

00:17:31,780 --> 00:17:34,180
stability rating for each one of the

00:17:32,830 --> 00:17:36,310
snapshots over time so you can kind of

00:17:34,180 --> 00:17:37,390
see what the trends are is there a lot

00:17:36,310 --> 00:17:40,060
of issues in template that it's

00:17:37,390 --> 00:17:42,790
recovering from or is it relatively

00:17:40,060 --> 00:17:46,450
stable right now so this is this these

00:17:42,790 --> 00:17:48,040
two particular dips here reference there

00:17:46,450 --> 00:17:49,180
are two pretty nasty issues that happen

00:17:48,040 --> 00:17:50,710
few months ago and template that caused

00:17:49,180 --> 00:17:52,600
a lot of people have white screens on

00:17:50,710 --> 00:17:54,820
boots I think it was a sheeter cache in

00:17:52,600 --> 00:17:56,200
Mesa and some other things so correctly

00:17:54,820 --> 00:17:58,870
based on the feedback it scored those

00:17:56,200 --> 00:18:02,280
releases very negatively and they took a

00:17:58,870 --> 00:18:04,660
little while to recover so it works

00:18:02,280 --> 00:18:06,550
these are this is one of those releases

00:18:04,660 --> 00:18:07,660
that was- scored so you can see here it

00:18:06,550 --> 00:18:09,490
has all the males that were referenced

00:18:07,660 --> 00:18:10,600
from people complaining like plasma

00:18:09,490 --> 00:18:12,400
doesn't start or all these different

00:18:10,600 --> 00:18:14,080
things so you'd be able to see that

00:18:12,400 --> 00:18:17,140
there which does are basically just

00:18:14,080 --> 00:18:21,160
filtered versions of the subjects from

00:18:17,140 --> 00:18:23,710
the mailing list this is just

00:18:21,160 --> 00:18:25,870
demonstrating the yellow border around

00:18:23,710 --> 00:18:27,280
the 55 which simply indicates that I

00:18:25,870 --> 00:18:29,710
don't have an actual snapshot of that

00:18:27,280 --> 00:18:31,780
particular release of tongue quit so if

00:18:29,710 --> 00:18:32,890
you're looking to install that I am you

00:18:31,780 --> 00:18:35,440
would either have to have been running

00:18:32,890 --> 00:18:36,910
it live or wouldn't bill to get it and

00:18:35,440 --> 00:18:40,120
that's indicated more when you click on

00:18:36,910 --> 00:18:41,710
the actual releases themselves so here's

00:18:40,120 --> 00:18:43,990
an overview of what that looks like if

00:18:41,710 --> 00:18:45,400
you look at one of those releases so if

00:18:43,990 --> 00:18:48,580
we zoom in here you can see at the

00:18:45,400 --> 00:18:50,350
bottom it indicates the versions of some

00:18:48,580 --> 00:18:52,210
of the kind of primary system components

00:18:50,350 --> 00:18:53,260
and it builds them when they change them

00:18:52,210 --> 00:18:54,850
so you can kind of get an overview of

00:18:53,260 --> 00:18:55,720
what version these snapshots are running

00:18:54,850 --> 00:18:59,260
so again if you're trying to avoid

00:18:55,720 --> 00:19:00,640
particular versions that cause issues on

00:18:59,260 --> 00:19:02,050
your system you can go back and look in

00:19:00,640 --> 00:19:03,550
the last ten snapshots or whatever you

00:19:02,050 --> 00:19:05,380
need to do and figure out where it was

00:19:03,550 --> 00:19:07,000
that it was changed and update just

00:19:05,380 --> 00:19:09,790
before it there's links at the bottom

00:19:07,000 --> 00:19:12,210
there to the now mailing mailing this

00:19:09,790 --> 00:19:15,010
announcement and the full list of

00:19:12,210 --> 00:19:16,000
packages so you can control F and find

00:19:15,010 --> 00:19:18,520
whatever you're interested in finding

00:19:16,000 --> 00:19:20,790
the version four at the bottom there it

00:19:18,520 --> 00:19:23,260
provides you with the tumbleweed switch

00:19:20,790 --> 00:19:25,300
command to install this particular

00:19:23,260 --> 00:19:26,260
snapshot and like I mentioned before if

00:19:25,300 --> 00:19:27,160
there was a yellow border around that

00:19:26,260 --> 00:19:28,420
you'll get a little message at the

00:19:27,160 --> 00:19:30,610
bottom that says I don't have a snapshot

00:19:28,420 --> 00:19:32,680
of this particular release so you can't

00:19:30,610 --> 00:19:36,580
install it then you can see all the

00:19:32,680 --> 00:19:38,940
feedback for it so the next question is

00:19:36,580 --> 00:19:41,800
anyone else is anyone actually using it

00:19:38,940 --> 00:19:44,950
so based on the statistics I get from

00:19:41,800 --> 00:19:46,300
Amazon there's roughly 6000 hits per day

00:19:44,950 --> 00:19:48,960
I obviously don't know how many of those

00:19:46,300 --> 00:19:51,520
are unique hits based on looking at the

00:19:48,960 --> 00:19:53,530
refreshes of repo metadata and the list

00:19:51,520 --> 00:19:55,990
page I'd say it's somewhere just south

00:19:53,530 --> 00:19:58,830
of us and most people are literally just

00:19:55,990 --> 00:20:01,210
refreshing over and over and over again

00:19:58,830 --> 00:20:01,960
I'd like to be able to do the same thing

00:20:01,210 --> 00:20:04,929
that download

00:20:01,960 --> 00:20:06,580
Susan org does which is a zipper sends

00:20:04,929 --> 00:20:08,950
them an extra header which basically

00:20:06,580 --> 00:20:11,890
lets you know lets you differentiate

00:20:08,950 --> 00:20:14,049
between machines but that'd be something

00:20:11,890 --> 00:20:17,049
we could do once it's once we get

00:20:14,049 --> 00:20:19,210
official hosting just a quick breakdown

00:20:17,049 --> 00:20:21,309
of countries that are using it if

00:20:19,210 --> 00:20:24,309
anyone's curious Germany at the top

00:20:21,309 --> 00:20:25,510
there it's now you may ask what are the

00:20:24,309 --> 00:20:28,570
downsides from using tumbleweed

00:20:25,510 --> 00:20:33,309
snapshots as far as as far as I can

00:20:28,570 --> 00:20:36,789
reason there aren't any so basically you

00:20:33,309 --> 00:20:39,039
should don't install the CLI tool and

00:20:36,789 --> 00:20:40,659
run tumbleweed in it so one thing to

00:20:39,039 --> 00:20:42,130
remember after you do that is that

00:20:40,659 --> 00:20:44,260
updating is a bit different so you can

00:20:42,130 --> 00:20:46,899
either use the own one tumbleweed update

00:20:44,260 --> 00:20:48,640
command which runs basically everything

00:20:46,899 --> 00:20:50,710
you see on the right which runs switch

00:20:48,640 --> 00:20:52,659
and then runs a refresh and up for you

00:20:50,710 --> 00:20:55,990
which you can do yourself obviously if

00:20:52,659 --> 00:20:57,610
you want some other things to know if

00:20:55,990 --> 00:20:58,720
you're using pac-man repository or

00:20:57,610 --> 00:21:00,970
develop projects or things like that

00:20:58,720 --> 00:21:02,350
those are not snapshotted so if you

00:21:00,970 --> 00:21:04,960
decide you want to update to like a

00:21:02,350 --> 00:21:06,610
month old snapshot of tumbleweed and you

00:21:04,960 --> 00:21:09,610
have pac-man then you're dumping at the

00:21:06,610 --> 00:21:11,679
same time you may have issues so

00:21:09,610 --> 00:21:13,330
generally generally if you are using

00:21:11,679 --> 00:21:16,090
pac-man basically you need to update to

00:21:13,330 --> 00:21:18,789
relatively recent snapshot if you're

00:21:16,090 --> 00:21:19,929
actually an update that as well as I

00:21:18,789 --> 00:21:21,279
mentioned there's no response to the man

00:21:19,929 --> 00:21:22,690
list but setting up snapshotting for

00:21:21,279 --> 00:21:25,840
something that should be relatively

00:21:22,690 --> 00:21:27,909
simple if we wanted to do so even easier

00:21:25,840 --> 00:21:30,820
if it was built into OBS which could be

00:21:27,909 --> 00:21:33,970
something to look at the resources

00:21:30,820 --> 00:21:36,760
mentioned in the slides here are all

00:21:33,970 --> 00:21:37,230
based around my hosting tomboy boot are

00:21:36,760 --> 00:21:39,909
calm

00:21:37,230 --> 00:21:41,409
so the actual snapshots themselves are

00:21:39,909 --> 00:21:43,210
basically mirroring the downloaded

00:21:41,409 --> 00:21:45,760
opensuse style so they're all at

00:21:43,210 --> 00:21:47,830
download about that the review site that

00:21:45,760 --> 00:21:49,090
you saw there is right there and the

00:21:47,830 --> 00:21:50,230
main page is a dashboard that's been

00:21:49,090 --> 00:21:51,549
around for a long time

00:21:50,230 --> 00:21:52,899
if you're curious it kind of shows you

00:21:51,549 --> 00:21:56,140
what's upcoming shows you what's in the

00:21:52,899 --> 00:21:57,760
develop projects for tumbleweed and I

00:21:56,140 --> 00:21:59,620
write stuff that release tools it's a

00:21:57,760 --> 00:22:02,740
blog so there's information about a lot

00:21:59,620 --> 00:22:05,380
of these changes but that's all I got

00:22:02,740 --> 00:22:09,510
so anyone has any questions or comments

00:22:05,380 --> 00:22:09,510
about snapshots

00:22:09,830 --> 00:22:39,270
do you wanna do - my cur do they

00:22:36,420 --> 00:22:43,890
understand right that if I want to use

00:22:39,270 --> 00:22:47,430
it I need to reserve around 350 GB on a

00:22:43,890 --> 00:22:50,190
machine no so the the 300 gigs is what

00:22:47,430 --> 00:22:51,600
I'm paying for is 3 ok basically it

00:22:50,190 --> 00:22:53,790
operates exactly the same as running

00:22:51,600 --> 00:22:55,440
tumbly normally from your perspective so

00:22:53,790 --> 00:22:56,880
you'll have whatever your repository

00:22:55,440 --> 00:23:00,470
caches and the actual packages

00:22:56,880 --> 00:23:03,549
themselves but nothing else ok thanks

00:23:00,470 --> 00:23:03,549
[Music]

00:23:15,860 --> 00:23:19,530
Thank You Jimmy I think this is an

00:23:18,030 --> 00:23:22,530
excellent idea two questions

00:23:19,530 --> 00:23:24,990
once I've got it installed if I want to

00:23:22,530 --> 00:23:27,990
update if I want to patch I just run

00:23:24,990 --> 00:23:30,440
zippered up just as just as I usually do

00:23:27,990 --> 00:23:35,640
a tumbleweed right correct yeah ok

00:23:30,440 --> 00:23:36,930
basically like I said it's so the actual

00:23:35,640 --> 00:23:39,060
tumbleweed repositories themselves will

00:23:36,930 --> 00:23:40,560
be fixed if you run DUP but any of the

00:23:39,060 --> 00:23:42,030
other repositories like the tumbly to

00:23:40,560 --> 00:23:44,370
update repo or things like that

00:23:42,030 --> 00:23:46,170
when you rent applause the update ok so

00:23:44,370 --> 00:23:48,300
as far as pac-man goes I'm kind of on my

00:23:46,170 --> 00:23:49,740
own with that one yeah so generally how

00:23:48,300 --> 00:23:51,720
I've been using it like I said is unless

00:23:49,740 --> 00:23:53,790
there's huge changes to relate to like

00:23:51,720 --> 00:23:55,830
ffmpeg or things like that in tumbleweed

00:23:53,790 --> 00:23:57,300
generally if you pick a release from the

00:23:55,830 --> 00:23:59,910
last like 14 days or so you're usually

00:23:57,300 --> 00:24:02,130
ok but hopefully DUP will complain

00:23:59,910 --> 00:24:05,790
heavily if you're not so you can go back

00:24:02,130 --> 00:24:08,430
and right now what I just did it now I

00:24:05,790 --> 00:24:10,590
added the two repositories that I added

00:24:08,430 --> 00:24:12,150
were boomba Tower you talked about

00:24:10,590 --> 00:24:13,770
getting official hosting again I think

00:24:12,150 --> 00:24:16,290
this is a great idea do you have any

00:24:13,770 --> 00:24:18,559
idea of when you're likely to get that

00:24:16,290 --> 00:24:20,990
official hosting

00:24:18,559 --> 00:24:22,879
a controversial question yeah so

00:24:20,990 --> 00:24:31,240
hopefully it all happens soon I think

00:24:22,879 --> 00:24:35,509
there's a movement there but we'll see I

00:24:31,240 --> 00:24:38,679
also think it's a great idea and I see

00:24:35,509 --> 00:24:43,269
Adam and we just see related which is

00:24:38,679 --> 00:24:46,970
for leap that we have versions with a

00:24:43,269 --> 00:24:49,129
but the dot version and then people are

00:24:46,970 --> 00:24:51,110
saying that you know one version of leap

00:24:49,129 --> 00:24:53,240
is not that long support so I have in my

00:24:51,110 --> 00:24:56,049
mind an idea and you can tell me that is

00:24:53,240 --> 00:25:00,710
applicable to use a similar approach to

00:24:56,049 --> 00:25:02,509
update to a leap version therefore of

00:25:00,710 --> 00:25:05,389
course it wouldn't be like a snapshot

00:25:02,509 --> 00:25:10,789
but one specific version of leap would

00:25:05,389 --> 00:25:11,929
it make sense not sure I fully

00:25:10,789 --> 00:25:16,249
understand what you're asking but

00:25:11,929 --> 00:25:21,320
basically okay sorry to ask a simple

00:25:16,249 --> 00:25:24,110
question can we apply the same on leap

00:25:21,320 --> 00:25:27,820
to say I only want to have whatever is

00:25:24,110 --> 00:25:30,230
the latest version of leap or maybe the

00:25:27,820 --> 00:25:33,019
oldest version that is still supported

00:25:30,230 --> 00:25:35,509
or maybe the latest - one version of

00:25:33,019 --> 00:25:39,139
leap because I want to apply something

00:25:35,509 --> 00:25:41,149
similar I do not want to you know be

00:25:39,139 --> 00:25:43,639
always on the most reason I do not want

00:25:41,149 --> 00:25:46,220
to make this version switch manually I

00:25:43,639 --> 00:25:49,899
want something like to stumble it switch

00:25:46,220 --> 00:25:53,480
to be able to select that in an easy way

00:25:49,899 --> 00:25:55,249
yeah okay well from that perspective I

00:25:53,480 --> 00:25:57,169
think you ought to be able to tweak the

00:25:55,249 --> 00:25:58,850
tools to do the same thing you could

00:25:57,169 --> 00:26:01,220
probably even use a variable for the

00:25:58,850 --> 00:26:03,830
leap version like I'm doing if that's if

00:26:01,220 --> 00:26:05,330
that's rakul I think that would that

00:26:03,830 --> 00:26:07,249
would work fine if you wanted to I don't

00:26:05,330 --> 00:26:09,350
know if there's any more actual remote

00:26:07,249 --> 00:26:10,759
and you want to do like snapshot in the

00:26:09,350 --> 00:26:11,720
updates repo or something like that I

00:26:10,759 --> 00:26:15,139
don't know if that's what you're

00:26:11,720 --> 00:26:17,570
thinking about well I think on download

00:26:15,139 --> 00:26:20,749
or zoos or we of course we have multiple

00:26:17,570 --> 00:26:22,730
versions and I think in the end the same

00:26:20,749 --> 00:26:26,570
approach could be applied there because

00:26:22,730 --> 00:26:28,399
right now it's like full copy of free

00:26:26,570 --> 00:26:30,289
RPM packages and then repository and I

00:26:28,399 --> 00:26:32,539
think the same way of maybe just

00:26:30,289 --> 00:26:34,100
efficient space storage could build

00:26:32,539 --> 00:26:35,629
even though I think it's not that big of

00:26:34,100 --> 00:26:37,879
an issue because of course you only have

00:26:35,629 --> 00:26:40,999
one version per year so have a

00:26:37,879 --> 00:26:42,740
consistency another thing which is then

00:26:40,999 --> 00:26:45,639
maybe applicable to both ways even more

00:26:42,740 --> 00:26:49,309
is to have some kind of more

00:26:45,639 --> 00:26:51,710
intelligence to say you know I do not I

00:26:49,309 --> 00:26:54,320
don't care which snapshot but really

00:26:51,710 --> 00:26:56,179
what I want is like really the latest

00:26:54,320 --> 00:26:59,539
that would be like equivalent to real

00:26:56,179 --> 00:27:01,450
tumbleweed or they always - one already

00:26:59,539 --> 00:27:04,399
I don't know is there some kind of

00:27:01,450 --> 00:27:06,799
threshold for this stability level which

00:27:04,399 --> 00:27:08,570
I can then select and say always pick up

00:27:06,799 --> 00:27:09,830
the next one if the stability level is

00:27:08,570 --> 00:27:11,960
higher than this or what you mentioned

00:27:09,830 --> 00:27:13,789
regarding the you know I do not run in

00:27:11,960 --> 00:27:15,230
video so please give me the latest one

00:27:13,789 --> 00:27:15,950
that is stable on non and video or

00:27:15,230 --> 00:27:17,809
something like that

00:27:15,950 --> 00:27:19,369
yeah so that's where I want to take it

00:27:17,809 --> 00:27:21,409
so basically the site itself and the

00:27:19,369 --> 00:27:23,629
data source already rates them so that's

00:27:21,409 --> 00:27:25,429
after the week he'll give them a I think

00:27:23,629 --> 00:27:27,499
I have like a moderate to stable and not

00:27:25,429 --> 00:27:28,970
and those are just basically based on my

00:27:27,499 --> 00:27:30,889
rating system so that's like seventy

00:27:28,970 --> 00:27:32,929
tonight and ninety or the cutoff points

00:27:30,889 --> 00:27:34,610
there so that's definitely what I

00:27:32,929 --> 00:27:36,320
envision is basically gonna set your

00:27:34,610 --> 00:27:38,149
your command-line tool to basically say

00:27:36,320 --> 00:27:40,190
only one update to stable ones ignore

00:27:38,149 --> 00:27:42,409
everything else and just have it do that

00:27:40,190 --> 00:27:44,749
and so that would naturally wait based

00:27:42,409 --> 00:27:46,700
on my rating system a week to go by for

00:27:44,749 --> 00:27:49,039
each snapshot so you probably be running

00:27:46,700 --> 00:27:50,480
an - whatever that would be roughly a

00:27:49,039 --> 00:27:51,769
day they're released but not always so

00:27:50,480 --> 00:27:53,570
you could be running a five-day old

00:27:51,769 --> 00:27:56,450
snapshot so just another thing to

00:27:53,570 --> 00:27:57,649
clarify if you don't care about the

00:27:56,450 --> 00:27:59,240
stability rating and you still want to

00:27:57,649 --> 00:28:02,090
update to the latest version of em of

00:27:59,240 --> 00:28:03,830
tumbleweed all the time you can still

00:28:02,090 --> 00:28:05,179
use this even if you're basically

00:28:03,830 --> 00:28:07,009
updating every couple days or something

00:28:05,179 --> 00:28:09,139
like that so you can still update to the

00:28:07,009 --> 00:28:10,669
latest snapshot and if you sit on it for

00:28:09,139 --> 00:28:12,230
a couple days then you'll be you can

00:28:10,669 --> 00:28:12,820
still install things so you can use it

00:28:12,230 --> 00:28:15,830
either way

00:28:12,820 --> 00:28:17,690
right thanks and just one minor question

00:28:15,830 --> 00:28:20,090
for clarification you mentioned the use

00:28:17,690 --> 00:28:22,759
case of installing to write debug

00:28:20,090 --> 00:28:24,619
information my source package but then

00:28:22,759 --> 00:28:27,799
you explained that only the OSS and

00:28:24,619 --> 00:28:29,899
honest report nerd so how does this yeah

00:28:27,799 --> 00:28:31,220
so you can't actually do that I've seen

00:28:29,899 --> 00:28:32,570
but that's something that was one of my

00:28:31,220 --> 00:28:34,340
original use cases but that's just a

00:28:32,570 --> 00:28:36,080
bunch more space so if we get official

00:28:34,340 --> 00:28:37,549
hosting and you know that's not a

00:28:36,080 --> 00:28:38,869
constraint then like I said you could

00:28:37,549 --> 00:28:40,159
apply this to all the repositories so

00:28:38,869 --> 00:28:42,179
I'm just limiting it for my own sake to

00:28:40,159 --> 00:28:43,919
the OSS and

00:28:42,179 --> 00:28:45,090
that's once but it still applies if

00:28:43,919 --> 00:28:46,440
you're you know installing Python

00:28:45,090 --> 00:28:58,139
libraries or who knows what's changed

00:28:46,440 --> 00:28:59,399
things like that but ok thanks I think

00:28:58,139 --> 00:29:02,159
also it's a great idea

00:28:59,399 --> 00:29:06,330
is it possible to switch back to an old

00:29:02,159 --> 00:29:07,799
earth snapshot yeah so you can you can

00:29:06,330 --> 00:29:09,029
either use like I showed there the

00:29:07,799 --> 00:29:10,799
history that it just keeps on your own

00:29:09,029 --> 00:29:12,450
machine of snapshots and just run revert

00:29:10,799 --> 00:29:14,340
or you can just run switch and pick any

00:29:12,450 --> 00:29:16,049
version that I have on the remote in so

00:29:14,340 --> 00:29:17,519
I've tried it a bunch of times in like a

00:29:16,049 --> 00:29:19,559
container and whatnot so you can take a

00:29:17,519 --> 00:29:21,269
current docker container and you can

00:29:19,559 --> 00:29:22,350
install the CLI tool and just say I want

00:29:21,269 --> 00:29:23,879
to install something from two months ago

00:29:22,350 --> 00:29:24,960
again that's going to depend on the

00:29:23,879 --> 00:29:27,240
packaging whether or not that works

00:29:24,960 --> 00:29:29,369
without issues so sometimes when there's

00:29:27,240 --> 00:29:30,899
a ton of change you can't actually go

00:29:29,369 --> 00:29:32,399
backwards easily because configs have

00:29:30,899 --> 00:29:34,710
been migrated stuff like that but

00:29:32,399 --> 00:29:35,909
generally if you're not going back too

00:29:34,710 --> 00:29:37,289
far or if there hasn't been too much

00:29:35,909 --> 00:29:38,879
change it works really well so like I

00:29:37,289 --> 00:29:40,379
said the preferred set is if you

00:29:38,879 --> 00:29:41,519
actually have like snapper or something

00:29:40,379 --> 00:29:43,139
else so you can just straight up

00:29:41,519 --> 00:29:44,759
rollback to an old version and sit on it

00:29:43,139 --> 00:29:46,289
after you don't like it but you can use

00:29:44,759 --> 00:29:49,019
this tool to go backwards like I said

00:29:46,289 --> 00:29:51,389
with varying degrees of success yeah

00:29:49,019 --> 00:29:54,179
that was my second question the the in

00:29:51,389 --> 00:29:56,639
case an update doesn't go too well you

00:29:54,179 --> 00:29:59,159
would rather recommend to use snapper to

00:29:56,639 --> 00:30:02,159
switch back to the right snapshot rather

00:29:59,159 --> 00:30:05,159
than switch to older snapshots of

00:30:02,159 --> 00:30:06,779
tumbleweed repos yeah so if you do

00:30:05,159 --> 00:30:08,249
snapper than the all the config file

00:30:06,779 --> 00:30:09,659
should roll roll back as well so

00:30:08,249 --> 00:30:11,070
basically it should just be pointing at

00:30:09,659 --> 00:30:12,539
whatever snapshot you were on before in

00:30:11,070 --> 00:30:14,309
the remote end so it should just work

00:30:12,539 --> 00:30:16,289
naturally so if you have snapper I think

00:30:14,309 --> 00:30:18,409
that's probably the cleanest way to do

00:30:16,289 --> 00:30:18,409
it

00:30:24,660 --> 00:30:34,140
anybody else all right well thanks son

00:30:31,630 --> 00:30:34,140
for listening

00:30:38,119 --> 00:30:40,179

YouTube URL: https://www.youtube.com/watch?v=CRszp1p47BM


