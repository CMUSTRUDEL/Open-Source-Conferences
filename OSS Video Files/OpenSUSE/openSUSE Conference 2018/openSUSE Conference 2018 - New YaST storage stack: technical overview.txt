Title: openSUSE Conference 2018 - New YaST storage stack: technical overview
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1963-new-yast-storage-stack-technical-overview



YaST comes with a brand new storage stack. The packages libstorage and yast2-storage have been replaced by the new libstorage-ng and yast2-storage-ng. YaST team has put a lot effort on having its new storage ready for openSUSE Leap 15 (and SUSE SLE 15), and now it is time to present how it works. In this presentation we will explain storage-ng from a technical point of view. For example, we will discuss the current algorithm used by the automatic proposal: how it decides what devices should be removed, how to configure its behavior and how it works in several scenarios. Also, we will see some details about how AutoYaST uses and interacts with the new storage stack. This talk is a good opportunity to get feedback from the openSUSE community, and we can discuss how our tools can be improved in future.

YaST comes with a brand new storage stack. The packages libstorage and yast2-storage have been replaced by the new libstorage-ng and yast2-storage-ng. YaST team has put a lot effort on having its new storage ready for openSUSE Leap 15 (and SUSE SLE 15), and now it is time to present how it works. In this presentation we will explain storage-ng from a technical point of view. For example, we will discuss the current algorithm used by the automatic proposal: how it decides what devices should be removed, how to configure its behavior and how it works in several scenarios. Also, we will see some details about how AutoYaST uses and interacts with the new storage stack. This talk is a good opportunity to get feedback from the openSUSE community, and we can discuss how our tools can be improved in future.

José Iván López González
Captions: 
	00:00:05,760 --> 00:00:12,339
my name is Yvonne I work a software

00:00:10,000 --> 00:00:17,050
engineer in the yes team

00:00:12,339 --> 00:00:21,580
in fact I joined to Suze last year more

00:00:17,050 --> 00:00:25,509
or less one year and half ago and during

00:00:21,580 --> 00:00:29,230
all this time I have been involved in

00:00:25,509 --> 00:00:30,509
implementation of the new just storage

00:00:29,230 --> 00:00:33,820
stuck

00:00:30,509 --> 00:00:36,610
well this presentation is basically a

00:00:33,820 --> 00:00:41,350
follow up of the previous one given by

00:00:36,610 --> 00:00:45,430
Uncle bye but here we are going to see

00:00:41,350 --> 00:00:53,160
more technical details about the new

00:00:45,430 --> 00:00:57,220
just storage in stock so first of all

00:00:53,160 --> 00:01:00,610
what this story changing well I think

00:00:57,220 --> 00:01:02,320
this was very well explained but my

00:01:00,610 --> 00:01:05,229
teammate anchor in the previous

00:01:02,320 --> 00:01:07,030
presentation but well in case you

00:01:05,229 --> 00:01:10,000
couldn't attend to the to that

00:01:07,030 --> 00:01:12,579
presentation very quickly only to say

00:01:10,000 --> 00:01:15,909
that storage energy is basically our

00:01:12,579 --> 00:01:20,350
implementation of the storage stack

00:01:15,909 --> 00:01:22,749
layer that just uses to deal with all

00:01:20,350 --> 00:01:25,329
the devices related with this grid

00:01:22,749 --> 00:01:31,929
storage for example these partitions

00:01:25,329 --> 00:01:34,090
file systems or whatever so just use two

00:01:31,929 --> 00:01:37,689
packages leave a storage and just

00:01:34,090 --> 00:01:40,329
storage for this and now with with a

00:01:37,689 --> 00:01:43,090
storage ng those two packages husband

00:01:40,329 --> 00:01:46,869
being replaced by the new in the new

00:01:43,090 --> 00:01:47,909
ones leaf storage and G and just storage

00:01:46,869 --> 00:01:51,579
ng

00:01:47,909 --> 00:01:55,509
well those packages are already included

00:01:51,579 --> 00:01:59,229
in the last openSUSE leap 15 that was

00:01:55,509 --> 00:02:02,020
released yesterday and also these

00:01:59,229 --> 00:02:06,030
packages are included in tab in topic

00:02:02,020 --> 00:02:10,479
wind sings january so if you have

00:02:06,030 --> 00:02:13,900
installed tumbleweed lately most likely

00:02:10,479 --> 00:02:16,180
you are already using storage in G so

00:02:13,900 --> 00:02:24,189
sorry

00:02:16,180 --> 00:02:27,819
okay the just storage stuck affairs to

00:02:24,189 --> 00:02:31,269
the user two main components one of them

00:02:27,819 --> 00:02:34,090
is the storage he proposal and this this

00:02:31,269 --> 00:02:38,769
presentation is mainly focused on this

00:02:34,090 --> 00:02:41,170
on this tool because well this component

00:02:38,769 --> 00:02:46,000
is probably the component with more

00:02:41,170 --> 00:02:49,569
changes compared with all bassoon in the

00:02:46,000 --> 00:02:54,010
whole storage so we are going to talk a

00:02:49,569 --> 00:02:57,519
lot of a lot about this and then the

00:02:54,010 --> 00:03:01,750
another main component that just storage

00:02:57,519 --> 00:03:04,810
offers is the expect partitioner well

00:03:01,750 --> 00:03:07,780
I'm pretty sure that most of you have

00:03:04,810 --> 00:03:11,470
already used this in this tool and in

00:03:07,780 --> 00:03:14,859
fact if you take a look to the new to

00:03:11,470 --> 00:03:17,470
the newest repetition in storage ng you

00:03:14,859 --> 00:03:22,419
can realize that is pretty pretty

00:03:17,470 --> 00:03:24,720
similar to the biggest one in fact is a

00:03:22,419 --> 00:03:28,840
clone of the problem of the previous one

00:03:24,720 --> 00:03:32,440
but that is to only forth from the UI

00:03:28,840 --> 00:03:34,299
point of view because under the hood the

00:03:32,440 --> 00:03:36,609
code of the set of the expert

00:03:34,299 --> 00:03:40,810
partitioner is completely new as the

00:03:36,609 --> 00:03:45,129
rest of the storage stack so we can say

00:03:40,810 --> 00:03:49,209
goodbye to all the old bugs but also

00:03:45,129 --> 00:03:52,989
welcome to new ones at least now the

00:03:49,209 --> 00:03:56,560
code is much more easier to fix and also

00:03:52,989 --> 00:04:00,430
is much more easier to extend now we can

00:03:56,560 --> 00:04:06,069
add new new futures that with the old

00:04:00,430 --> 00:04:10,690
code it could be simply impossible so

00:04:06,069 --> 00:04:15,099
let's go with the storage proposal well

00:04:10,690 --> 00:04:18,459
when we start a new installation this

00:04:15,099 --> 00:04:22,630
step the system pro system proving step

00:04:18,459 --> 00:04:25,630
is the first time when the storage in G

00:04:22,630 --> 00:04:29,390
is used by the Installer here in this

00:04:25,630 --> 00:04:32,810
step all your storage devices are

00:04:29,390 --> 00:04:39,050
so do all your DS partitions filesystem

00:04:32,810 --> 00:04:44,120
lbm and then in the next step of doing

00:04:39,050 --> 00:04:49,070
the installation is the dialog for the

00:04:44,120 --> 00:04:52,340
storage proposal so what is the main

00:04:49,070 --> 00:04:55,370
goal of the storage proposal basically

00:04:52,340 --> 00:04:58,820
it will try to create all the necessary

00:04:55,370 --> 00:05:02,870
partitions to perform an installation

00:04:58,820 --> 00:05:06,950
and not only that the storage proposal

00:05:02,870 --> 00:05:08,720
is also able to detect what partitions

00:05:06,950 --> 00:05:13,430
are necessary in your system for

00:05:08,720 --> 00:05:16,460
properly boot of the technology so if we

00:05:13,430 --> 00:05:20,570
take a look well the letter is too small

00:05:16,460 --> 00:05:25,400
but transmitted if in this sequence of

00:05:20,570 --> 00:05:29,080
axioms the first one the proposal will

00:05:25,400 --> 00:05:34,790
try to delayed some existing partitions

00:05:29,080 --> 00:05:39,650
then it will try to reuse one existing

00:05:34,790 --> 00:05:42,710
swap then it will propose to create root

00:05:39,650 --> 00:05:45,380
partition with certain size and using

00:05:42,710 --> 00:05:49,070
battery phase as the fall as the as

00:05:45,380 --> 00:05:53,890
filesystem it also proposed to create a

00:05:49,070 --> 00:05:58,280
separate partition for home in the last

00:05:53,890 --> 00:06:02,060
and then it also proposed in this case

00:05:58,280 --> 00:06:07,160
to create BIOS BIOS boot partition for a

00:06:02,060 --> 00:06:09,590
popular boot system well all the

00:06:07,160 --> 00:06:12,410
information the proposal needs to create

00:06:09,590 --> 00:06:16,580
the necessary party songs for for the

00:06:12,410 --> 00:06:19,850
installation are defined in a control

00:06:16,580 --> 00:06:21,620
file the control file is an especial

00:06:19,850 --> 00:06:26,210
file that is contained in this talicia

00:06:21,620 --> 00:06:29,030
medium this file defines all the

00:06:26,210 --> 00:06:31,610
necessary information that the proposal

00:06:29,030 --> 00:06:35,510
needs for example what partitions are

00:06:31,610 --> 00:06:38,180
necessary to create for leap or the

00:06:35,510 --> 00:06:40,970
filesystem to use for root the minimal

00:06:38,180 --> 00:06:43,780
size of each partition all these kind of

00:06:40,970 --> 00:06:47,390
things are defined in the control

00:06:43,780 --> 00:06:50,390
so when we arrived to this dialogue for

00:06:47,390 --> 00:06:54,230
first time the system automatically

00:06:50,390 --> 00:06:57,140
create this initial proposal based on

00:06:54,230 --> 00:07:01,060
all this information contained in the

00:06:57,140 --> 00:07:06,140
control file but in case you don't like

00:07:01,060 --> 00:07:08,660
this initial proposal the user for

00:07:06,140 --> 00:07:11,570
example in some cases the proposed

00:07:08,660 --> 00:07:14,510
account remove some partition that you

00:07:11,570 --> 00:07:17,510
don't want to touch or simply you don't

00:07:14,510 --> 00:07:20,420
want a separate home partition or

00:07:17,510 --> 00:07:24,340
whatever if you want to change this kind

00:07:20,420 --> 00:07:28,970
of things the user can do it using the

00:07:24,340 --> 00:07:32,720
guided setup button when we use this

00:07:28,970 --> 00:07:36,560
button the cable setup will go through a

00:07:32,720 --> 00:07:41,300
sequence of dialogues where we can

00:07:36,560 --> 00:07:43,400
configure several options and then the

00:07:41,300 --> 00:07:45,470
system will create a new proposal

00:07:43,400 --> 00:07:52,970
according to the options we have

00:07:45,470 --> 00:07:56,750
selected so this is the first dialog

00:07:52,970 --> 00:07:59,870
that we will see if you use this guy the

00:07:56,750 --> 00:08:03,290
setup button but in fact this dialogue

00:07:59,870 --> 00:08:08,540
is only presented in in case we have

00:08:03,290 --> 00:08:12,410
several DS in our system and here we can

00:08:08,540 --> 00:08:16,490
select the candidate disks the kind of

00:08:12,410 --> 00:08:20,090
candidate these are basically which this

00:08:16,490 --> 00:08:23,300
we want that the proposal use for for

00:08:20,090 --> 00:08:28,160
the installation in case you we don't

00:08:23,300 --> 00:08:32,090
want to use any specific disk we can

00:08:28,160 --> 00:08:36,760
unselect that disk here and then the

00:08:32,090 --> 00:08:41,450
proposal will not touch that this at all

00:08:36,760 --> 00:08:46,000
so once we have selected our candidate

00:08:41,450 --> 00:08:49,640
disk the next step in the guided setup

00:08:46,000 --> 00:08:55,240
in this next step we can select several

00:08:49,640 --> 00:08:56,960
options first of all we can indicate

00:08:55,240 --> 00:09:01,760
which

00:08:56,960 --> 00:09:05,180
ladies we want to use us to disk the

00:09:01,760 --> 00:09:09,800
route this is simply where to place the

00:09:05,180 --> 00:09:14,240
root partition and then we have three

00:09:09,800 --> 00:09:17,810
combo box sorry if you can read you can

00:09:14,240 --> 00:09:22,760
read the text pad well the first combo

00:09:17,810 --> 00:09:25,540
box is well these three combo box are to

00:09:22,760 --> 00:09:28,880
select a to indicate to the proposal

00:09:25,540 --> 00:09:32,690
what we want to do with the existing

00:09:28,880 --> 00:09:35,210
partitions the first combo box is for

00:09:32,690 --> 00:09:37,580
the Windows partitions the second one

00:09:35,210 --> 00:09:41,180
for the Linux for teachings and the last

00:09:37,580 --> 00:09:45,110
one for other kind of partitions for

00:09:41,180 --> 00:09:48,710
each one we can indicate for example if

00:09:45,110 --> 00:09:52,850
we want that the proposal simply remove

00:09:48,710 --> 00:09:56,720
all this kind of partitions or if we

00:09:52,850 --> 00:09:59,350
want the apostle only remove some of

00:09:56,720 --> 00:10:02,600
this partitions if is strictly necessary

00:09:59,350 --> 00:10:06,460
to make a space for the new partitions

00:10:02,600 --> 00:10:10,190
for installation or we can also indicate

00:10:06,460 --> 00:10:12,950
if we don't to touch that kind of

00:10:10,190 --> 00:10:14,630
partitions and in the case of the

00:10:12,950 --> 00:10:17,360
windows partitions there are more

00:10:14,630 --> 00:10:20,960
options for example we can indicate to

00:10:17,360 --> 00:10:24,170
the proposal that we want to resize our

00:10:20,960 --> 00:10:29,840
current windows partitions to make free

00:10:24,170 --> 00:10:32,860
space the next step in the next step of

00:10:29,840 --> 00:10:37,190
the great setup we have two more options

00:10:32,860 --> 00:10:41,000
here in effect in the first check box if

00:10:37,190 --> 00:10:42,880
we check that we are indicated that we

00:10:41,000 --> 00:10:46,550
want to create the the new installation

00:10:42,880 --> 00:10:49,820
using LPM logical volume instead of

00:10:46,550 --> 00:10:53,150
playing partitions and with the second

00:10:49,820 --> 00:10:56,390
check box we are indicating that we want

00:10:53,150 --> 00:11:00,020
to include all the new partitions that

00:10:56,390 --> 00:11:03,530
the proposal will create of course with

00:11:00,020 --> 00:11:06,360
have also to introduce the the Pascal

00:11:03,530 --> 00:11:08,090
for for the looks

00:11:06,360 --> 00:11:13,200
[Music]

00:11:08,090 --> 00:11:18,720
well and this is the last step in this

00:11:13,200 --> 00:11:22,950
dire in this guided setup and here first

00:11:18,720 --> 00:11:27,090
we can select the file system type to

00:11:22,950 --> 00:11:30,480
use for for the root partition in case

00:11:27,090 --> 00:11:33,000
we have selected a butterface filesystem

00:11:30,480 --> 00:11:37,520
we have also the option to indicate if

00:11:33,000 --> 00:11:42,930
we want a enable a snapshot or not and

00:11:37,520 --> 00:11:46,230
then for for home and for swap we can

00:11:42,930 --> 00:11:49,350
check if we actually want to create a

00:11:46,230 --> 00:11:53,340
separate partition for that for home all

00:11:49,350 --> 00:11:56,850
for swap and in the case of the swap we

00:11:53,340 --> 00:12:00,140
have a second checkbox to negate that we

00:11:56,850 --> 00:12:03,870
want to enlarge the swap partitions

00:12:00,140 --> 00:12:08,100
according to the size of Tehran for

00:12:03,870 --> 00:12:10,830
suspending the system in this example we

00:12:08,100 --> 00:12:13,710
have uncheck the home partition the

00:12:10,830 --> 00:12:16,740
option for the separate home so in this

00:12:13,710 --> 00:12:24,540
case the proposal shouldn't upgrade a

00:12:16,740 --> 00:12:28,410
specific partition for for home once we

00:12:24,540 --> 00:12:31,980
have indicated all the options we want

00:12:28,410 --> 00:12:35,280
for the new proposal the system create a

00:12:31,980 --> 00:12:38,730
new proposal taking a look on all these

00:12:35,280 --> 00:12:43,500
options so now in the sequence of

00:12:38,730 --> 00:12:46,710
actions first the in the in the first

00:12:43,500 --> 00:12:49,940
axiom it will create encrypted partition

00:12:46,710 --> 00:12:54,900
because we select selected the option

00:12:49,940 --> 00:12:59,850
for encrypt partitions it also create a

00:12:54,900 --> 00:13:02,670
boolean group and then it will create a

00:12:59,850 --> 00:13:06,060
two logical volleys one for route

00:13:02,670 --> 00:13:08,760
another one for swap but in this case it

00:13:06,060 --> 00:13:14,940
will not create a separate bowling for

00:13:08,760 --> 00:13:18,520
for home so this is basically basically

00:13:14,940 --> 00:13:21,430
the way the user has

00:13:18,520 --> 00:13:24,100
to work with the proposal so when we

00:13:21,430 --> 00:13:26,350
started say installation an initial

00:13:24,100 --> 00:13:29,080
proposal is automatically created

00:13:26,350 --> 00:13:31,660
according to the settings in the control

00:13:29,080 --> 00:13:34,630
file and in case we don't like that

00:13:31,660 --> 00:13:39,540
proposal we can use the disguiser setup

00:13:34,630 --> 00:13:45,100
to to try to create another one so now

00:13:39,540 --> 00:13:49,330
we are - we are going to see how is the

00:13:45,100 --> 00:13:57,550
algorithm the storage ng uses to

00:13:49,330 --> 00:14:04,810
generate the proposal well the algorithm

00:13:57,550 --> 00:14:09,400
is its basic in three main steps in the

00:14:04,810 --> 00:14:12,430
first step in the proposal will plan a

00:14:09,400 --> 00:14:16,060
set of partitions to create for the

00:14:12,430 --> 00:14:18,370
installation the partitions to create as

00:14:16,060 --> 00:14:20,680
commented as already commented out based

00:14:18,370 --> 00:14:23,020
on the information in the control file

00:14:20,680 --> 00:14:26,740
or in the setting selected by the use of

00:14:23,020 --> 00:14:31,300
indicator setup so once it knows what

00:14:26,740 --> 00:14:36,280
partitions we have to create the second

00:14:31,300 --> 00:14:39,880
step is to make enough free space on the

00:14:36,280 --> 00:14:44,560
disk to place that that plan partitions

00:14:39,880 --> 00:14:49,000
so once we have enough free space the

00:14:44,560 --> 00:14:51,760
white jangles represents free spaces on

00:14:49,000 --> 00:14:54,760
the disk so once we have enough free

00:14:51,760 --> 00:14:57,660
space the last step is to create the

00:14:54,760 --> 00:14:59,980
plan partitions using this free space

00:14:57,660 --> 00:15:06,790
distribute distributing the the

00:14:59,980 --> 00:15:10,480
partitions in the best possible way to

00:15:06,790 --> 00:15:14,010
make a free space the storage proposal

00:15:10,480 --> 00:15:17,640
also follows in several steps

00:15:14,010 --> 00:15:21,300
first of all in case we have select the

00:15:17,640 --> 00:15:23,730
option remove even if not needed for

00:15:21,300 --> 00:15:26,660
some for some kind of partition in the

00:15:23,730 --> 00:15:31,890
writer setup we have select that option

00:15:26,660 --> 00:15:34,890
the proposal first will remove all this

00:15:31,890 --> 00:15:37,620
all partition of this kind for example

00:15:34,890 --> 00:15:40,200
if we select that foreigner partition it

00:15:37,620 --> 00:15:43,590
will it automatically will remove all

00:15:40,200 --> 00:15:48,510
these all Linux partitions independently

00:15:43,590 --> 00:15:52,550
of this is necessary or not to make free

00:15:48,510 --> 00:15:57,540
space for the new partitions to create

00:15:52,550 --> 00:16:01,800
then in the second step if we have

00:15:57,540 --> 00:16:06,660
select the option to for a sizing window

00:16:01,800 --> 00:16:09,330
partitions it will try to resize our

00:16:06,660 --> 00:16:14,490
current windows partitions to make in a

00:16:09,330 --> 00:16:18,930
free space and then in the last step and

00:16:14,490 --> 00:16:23,360
in case that we still need more free

00:16:18,930 --> 00:16:25,860
space it will try to remove all

00:16:23,360 --> 00:16:30,240
partitions where we have select the

00:16:25,860 --> 00:16:32,910
option remove if needed so for example

00:16:30,240 --> 00:16:37,440
if we have select that for Linux

00:16:32,910 --> 00:16:39,480
partition it will start to remove this

00:16:37,440 --> 00:16:42,750
kind of partitions littles partition in

00:16:39,480 --> 00:16:49,970
that case starting from the end of the

00:16:42,750 --> 00:16:49,970
disk and it remove one by one partitions

00:16:50,000 --> 00:16:59,670
until it makes enough space well this

00:16:56,670 --> 00:17:02,490
this way of of making a space of

00:16:59,670 --> 00:17:07,590
removing partition after starting from

00:17:02,490 --> 00:17:12,450
the end undulating one by one is more or

00:17:07,590 --> 00:17:17,550
less easy to implement but it has some

00:17:12,450 --> 00:17:21,690
problems for example imagine we have a

00:17:17,550 --> 00:17:25,230
disk where there is already some free

00:17:21,690 --> 00:17:28,039
space and we have select that option

00:17:25,230 --> 00:17:33,779
remove if needed for Linux party

00:17:28,039 --> 00:17:36,149
well vertically only removing the first

00:17:33,779 --> 00:17:39,510
Linux partition that follows the the

00:17:36,149 --> 00:17:42,510
free space imagine that simply removing

00:17:39,510 --> 00:17:47,039
that limits partition would be enough to

00:17:42,510 --> 00:17:50,639
make a free space for the new partitions

00:17:47,039 --> 00:17:54,870
we want to create so we only have to

00:17:50,639 --> 00:17:59,549
remove one partition for that but our

00:17:54,870 --> 00:18:01,950
algorithm instead of that it will start

00:17:59,549 --> 00:18:04,440
to remove partitions from the end so it

00:18:01,950 --> 00:18:08,130
will remove first dis Linux partitions

00:18:04,440 --> 00:18:10,950
then the swap and in the worst case it

00:18:08,130 --> 00:18:15,330
will even remove all the Linux partition

00:18:10,950 --> 00:18:18,600
so at the end in some cases we can

00:18:15,330 --> 00:18:22,669
remove more partitions down the Stickley

00:18:18,600 --> 00:18:27,240
necessary obviously this is something

00:18:22,669 --> 00:18:30,029
that we have to think again probably

00:18:27,240 --> 00:18:34,190
will improve this way of making a

00:18:30,029 --> 00:18:34,190
spacing in future releases

00:18:35,520 --> 00:18:43,649
[Music]

00:18:37,190 --> 00:18:49,380
well once we have make enough space to

00:18:43,649 --> 00:18:51,929
create all the plan partitions the next

00:18:49,380 --> 00:18:55,289
step in the algorithm consists on

00:18:51,929 --> 00:19:00,090
distribute all the plan partitions into

00:18:55,289 --> 00:19:03,299
the free spaces this task is more

00:19:00,090 --> 00:19:05,960
complex than it looks at first because

00:19:03,299 --> 00:19:09,750
well we have to take into account

00:19:05,960 --> 00:19:12,149
several restrictions for example if we

00:19:09,750 --> 00:19:15,210
are working with a ms-dos partition

00:19:12,149 --> 00:19:17,519
table we cannot create more than three

00:19:15,210 --> 00:19:19,799
primary partition that is something to

00:19:17,519 --> 00:19:23,010
take into account and also we have to

00:19:19,799 --> 00:19:23,370
consider the lining of the partitions so

00:19:23,010 --> 00:19:25,649
on

00:19:23,370 --> 00:19:28,529
so it is not so easy to deceive

00:19:25,649 --> 00:19:32,059
distribute the valid partition to

00:19:28,529 --> 00:19:32,059
several free spaces

00:19:32,550 --> 00:19:41,800
for example imagine this first possible

00:19:37,540 --> 00:19:45,490
distribution where the proposal plays

00:19:41,800 --> 00:19:48,550
the boot and the swap partitions into

00:19:45,490 --> 00:19:52,770
the free into the first free space

00:19:48,550 --> 00:19:58,270
because there is enough space for that

00:19:52,770 --> 00:20:02,620
well but if we if we do that the second

00:19:58,270 --> 00:20:05,550
free free space is useless because we

00:20:02,620 --> 00:20:10,090
can operate mod primary partitions so

00:20:05,550 --> 00:20:14,710
route home should be created as logical

00:20:10,090 --> 00:20:19,000
partitions in the last free space well

00:20:14,710 --> 00:20:21,130
the proposal the proposal will generate

00:20:19,000 --> 00:20:23,560
all the possibilities all the possible

00:20:21,130 --> 00:20:27,610
distributions of the plain partition of

00:20:23,560 --> 00:20:31,330
into the free spaces and well and then

00:20:27,610 --> 00:20:35,380
it will evaluate each of these

00:20:31,330 --> 00:20:39,190
distributions taking into account for

00:20:35,380 --> 00:20:42,280
example the total free space that is not

00:20:39,190 --> 00:20:47,620
used at the end or the number of cap in

00:20:42,280 --> 00:20:50,410
in the disk or more conditions so it

00:20:47,620 --> 00:20:55,000
evaluate each possible distribution and

00:20:50,410 --> 00:20:58,150
then it select the best possible in this

00:20:55,000 --> 00:21:01,180
example the best one could be something

00:20:58,150 --> 00:21:05,020
like this last distribution that is

00:21:01,180 --> 00:21:07,840
presented in the slide where it was able

00:21:05,020 --> 00:21:12,660
to distribute all the plant partitions

00:21:07,840 --> 00:21:12,660
without living free space at the end

00:21:13,890 --> 00:21:23,070
[Music]

00:21:17,610 --> 00:21:30,220
this is the so this is the general

00:21:23,070 --> 00:21:33,850
algorithm to generate a new proposal so

00:21:30,220 --> 00:21:35,710
in the first step it plan a set of

00:21:33,850 --> 00:21:37,809
partition take it up on the control file

00:21:35,710 --> 00:21:40,809
and the settings indicated by the user

00:21:37,809 --> 00:21:42,970
then it removes partitions then it

00:21:40,809 --> 00:21:45,340
calculate and evaluate all the possible

00:21:42,970 --> 00:21:48,720
distributions and at the end it select

00:21:45,340 --> 00:21:51,840
the best one well actually this is a

00:21:48,720 --> 00:21:55,330
simplistic view of the algorithm because

00:21:51,840 --> 00:21:59,020
actually the Thalgo daggering is is more

00:21:55,330 --> 00:22:01,419
complex here we are not taking into

00:21:59,020 --> 00:22:04,659
account for example the case when we are

00:22:01,419 --> 00:22:07,090
creating logical volumes we have

00:22:04,659 --> 00:22:11,440
selected a later set up that we want to

00:22:07,090 --> 00:22:13,960
use lbm in this case the algorithm is a

00:22:11,440 --> 00:22:16,570
little bit more complex but but in

00:22:13,960 --> 00:22:19,990
general I think that in general this is

00:22:16,570 --> 00:22:32,970
enough to to understand the the general

00:22:19,990 --> 00:22:32,970
idea of the of the proposal now before

00:22:37,060 --> 00:22:44,770
[Music]

00:22:40,049 --> 00:22:48,429
so before finishing I want to talk a

00:22:44,770 --> 00:22:53,100
little bit and more about about the

00:22:48,429 --> 00:22:58,179
stuff that the proposal try to reuse

00:22:53,100 --> 00:23:04,120
well when the proposal plan to create a

00:22:58,179 --> 00:23:09,580
swap partition it it always tried to

00:23:04,120 --> 00:23:13,750
reuse some of the existing swaps so it

00:23:09,580 --> 00:23:18,630
will search for all the current swaps

00:23:13,750 --> 00:23:23,200
that already exist on the disk and you

00:23:18,630 --> 00:23:27,880
select the the swap partition that fits

00:23:23,200 --> 00:23:32,770
better with the swap we want to create

00:23:27,880 --> 00:23:36,580
and on the other hand when we are making

00:23:32,770 --> 00:23:40,539
a space we delayed some existing swap

00:23:36,580 --> 00:23:44,320
partitions the proposal also try to

00:23:40,539 --> 00:23:50,049
reduce the UUID and the level of the

00:23:44,320 --> 00:23:55,990
remove swap partitions we we do that to

00:23:50,049 --> 00:24:03,700
try to know to not break some other

00:23:55,990 --> 00:24:07,480
existing Linux installations another

00:24:03,700 --> 00:24:10,780
thing that the proposal will try to

00:24:07,480 --> 00:24:13,960
reuse is the volume the existing volume

00:24:10,780 --> 00:24:16,929
groups if we have indicated in the

00:24:13,960 --> 00:24:23,500
greatest stuff that that we want to

00:24:16,929 --> 00:24:26,940
create that we want to use LPM for for

00:24:23,500 --> 00:24:31,150
the proposal in that case the proposal

00:24:26,940 --> 00:24:36,039
will search for existing volume groups

00:24:31,150 --> 00:24:39,640
and it will tolerate use it in this case

00:24:36,039 --> 00:24:43,120
in this case if if the proposal find

00:24:39,640 --> 00:24:46,659
some existing volume groups it will try

00:24:43,120 --> 00:24:51,549
to not remove the partitions that are

00:24:46,659 --> 00:24:56,440
used as physical volumes but from the

00:24:51,549 --> 00:25:00,460
other hand the logical volumes it it can

00:24:56,440 --> 00:25:04,360
remove the logical volumes if it is

00:25:00,460 --> 00:25:07,630
necessary for creating the new logical

00:25:04,360 --> 00:25:11,350
volumes for distillation so at the end

00:25:07,630 --> 00:25:14,260
maybe this way of reducing volume groups

00:25:11,350 --> 00:25:17,350
is something that doesn't make much

00:25:14,260 --> 00:25:20,799
sense because if at the end we are

00:25:17,350 --> 00:25:25,150
removing the existing logical volumes we

00:25:20,799 --> 00:25:29,070
are losing our data so so why to reuse

00:25:25,150 --> 00:25:32,679
then the volume group that is another

00:25:29,070 --> 00:25:34,580
question all decision that we have to

00:25:32,679 --> 00:25:37,860
think

00:25:34,580 --> 00:25:43,500
while piloting bluefin future releases

00:25:37,860 --> 00:25:46,139
of the code I think that that is

00:25:43,500 --> 00:25:50,370
basically all that I wanted to tell you

00:25:46,139 --> 00:25:53,100
I hope that you now have a better

00:25:50,370 --> 00:25:57,860
understanding of what is happening with

00:25:53,100 --> 00:26:03,090
your with your partitions when you are

00:25:57,860 --> 00:26:06,929
installing a tumbleweed or lip sync

00:26:03,090 --> 00:26:09,090
yesterday so that's all thank you for

00:26:06,929 --> 00:26:28,289
your attention now if you have some

00:26:09,090 --> 00:26:30,509
questions I'm not sure if I missed it I

00:26:28,289 --> 00:26:32,580
think an anchors talk you talk that

00:26:30,509 --> 00:26:35,759
there's lip storage and there say yes

00:26:32,580 --> 00:26:39,299
boot which is then do we implementation

00:26:35,759 --> 00:26:41,129
so why is it splitted or why it was not

00:26:39,299 --> 00:26:44,820
possible to have everything in Ruby yeah

00:26:41,129 --> 00:26:47,429
I know so if you who are here in the

00:26:44,820 --> 00:26:51,379
previews in the previous talk but what

00:26:47,429 --> 00:26:55,590
anyway leave a storage is basically the

00:26:51,379 --> 00:26:59,269
develop the background the low level the

00:26:55,590 --> 00:27:03,509
low global layer of the storage so it's

00:26:59,269 --> 00:27:05,519
it's mainly for working at low level for

00:27:03,509 --> 00:27:10,279
creative partition format partitions

00:27:05,519 --> 00:27:18,769
create logical volumes or so on but all

00:27:10,279 --> 00:27:21,480
the high level logic for example when to

00:27:18,769 --> 00:27:25,230
allow it for the proposal to calculate

00:27:21,480 --> 00:27:26,879
the axioms that we need to the partition

00:27:25,230 --> 00:27:29,100
we need to remove all the new partition

00:27:26,879 --> 00:27:32,759
we need to create all this a high level

00:27:29,100 --> 00:27:36,750
logic is implemented in the just storage

00:27:32,759 --> 00:27:40,950
package because is something that we can

00:27:36,750 --> 00:27:43,679
say that it is only for just not for not

00:27:40,950 --> 00:27:47,130
no it's not for a you know usage is only

00:27:43,679 --> 00:27:49,590
for just so that is one of the

00:27:47,130 --> 00:27:56,100
risotto not Lisa splitting into

00:27:49,590 --> 00:28:00,120
properties if you want to set up a rate

00:27:56,100 --> 00:28:03,600
array how is that done if you if we want

00:28:00,120 --> 00:28:07,410
to have our file systems on rate arrays

00:28:03,600 --> 00:28:09,270
how is that done I would have expected

00:28:07,410 --> 00:28:17,730
that at the same place where you put

00:28:09,270 --> 00:28:20,039
them on LVM I know their question what

00:28:17,730 --> 00:28:22,860
do you mean how because I have several

00:28:20,039 --> 00:28:27,419
discs and I want to put them into a rate

00:28:22,860 --> 00:28:31,159
array and I saw no way to do that with

00:28:27,419 --> 00:28:34,710
the declarant set up with the right well

00:28:31,159 --> 00:28:38,100
the proposal at this moment is not able

00:28:34,710 --> 00:28:41,130
to work with software right it only

00:28:38,100 --> 00:28:43,919
worked with BIOS rate but in the case of

00:28:41,130 --> 00:28:45,870
software rates if you want to create a

00:28:43,919 --> 00:28:50,159
new installation using that you have to

00:28:45,870 --> 00:28:53,600
use this pair partition probably we will

00:28:50,159 --> 00:28:56,280
add also the options in the proposal to

00:28:53,600 --> 00:28:58,049
to be able to work we with civil rights

00:28:56,280 --> 00:29:00,919
in the filter for example if there is

00:28:58,049 --> 00:29:04,080
already a super-bright created then

00:29:00,919 --> 00:29:06,750
probably we should try to reuse that

00:29:04,080 --> 00:29:09,360
software a for distillation right now

00:29:06,750 --> 00:29:17,130
the Picasa will remove the software it

00:29:09,360 --> 00:29:20,090
is necessary I almost worry I have

00:29:17,130 --> 00:29:20,090
answer your question

00:29:24,980 --> 00:29:30,330
so back to the question right now this

00:29:27,929 --> 00:29:32,970
proposal is for a particular use case

00:29:30,330 --> 00:29:35,850
that is they guided installation for a

00:29:32,970 --> 00:29:38,700
newbie but if you want a soft you want

00:29:35,850 --> 00:29:41,070
to create a software right then of

00:29:38,700 --> 00:29:42,600
course the question that just has to

00:29:41,070 --> 00:29:46,470
argue are a different set of questions

00:29:42,600 --> 00:29:49,380
like with this right which level of

00:29:46,470 --> 00:29:52,230
right mirroring is tripping based on

00:29:49,380 --> 00:29:54,440
partitions are you so it's a totally

00:29:52,230 --> 00:29:57,659
different allowance asking for different

00:29:54,440 --> 00:30:00,059
questions and the idea is to have such

00:29:57,659 --> 00:30:03,330
such whistle as well in the expert

00:30:00,059 --> 00:30:04,679
partitioner but actually we saw for a

00:30:03,330 --> 00:30:06,480
different use case that will ask

00:30:04,679 --> 00:30:09,270
different questions and will provide you

00:30:06,480 --> 00:30:12,030
something similar in the end bodies yeah

00:30:09,270 --> 00:30:13,770
I mean there is no default answer for

00:30:12,030 --> 00:30:15,750
anything if you want to create the right

00:30:13,770 --> 00:30:17,850
you first have to tell me which kind of

00:30:15,750 --> 00:30:23,220
rate extending with this and for which

00:30:17,850 --> 00:30:25,350
purposes so different beasts and also

00:30:23,220 --> 00:30:28,679
about the reason for for breaking into a

00:30:25,350 --> 00:30:31,610
library and and the specific part we had

00:30:28,679 --> 00:30:34,880
the expectation that the library is

00:30:31,610 --> 00:30:38,130
useful for other projects as Kiwi or

00:30:34,880 --> 00:30:41,460
even my canary was so their libraries

00:30:38,130 --> 00:30:43,440
C++ so you don't need the whole Ruby

00:30:41,460 --> 00:30:46,290
runtime to run it in your own project

00:30:43,440 --> 00:30:51,150
like Kiwi machinery whatever and we

00:30:46,290 --> 00:30:55,020
provide bindings for Ruby and Python

00:30:51,150 --> 00:30:56,580
apart from C++ itself so it was just to

00:30:55,020 --> 00:31:01,370
not make something that nobody else

00:30:56,580 --> 00:31:01,370
could take advantage of

00:31:08,880 --> 00:31:17,960
more questions No so thanks for

00:31:15,120 --> 00:31:17,960
attention

00:31:24,730 --> 00:31:26,790

YouTube URL: https://www.youtube.com/watch?v=_0VKUjFAIwo


