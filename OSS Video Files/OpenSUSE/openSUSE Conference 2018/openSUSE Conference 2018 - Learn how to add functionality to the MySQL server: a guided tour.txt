Title: openSUSE Conference 2018 - Learn how to add functionality to the MySQL server: a guided tour
Publication date: 2018-05-26
Playlist: openSUSE Conference 2018
Description: 
	https://media.ccc.de/v/1723-learn-how-to-add-functionality-to-the-mysql-server-a-guided-tour

Hack on the MySQL code for fun and profit !

Ever wanted to learn how to add this little piece of functionality that you're missing in MySQL but the codebase seems large and thus intimidating ?
Then this talk is for you: we'll enumerate the ways to extend and alter MySQL functionality and will get you started on hacking on the codebase: what the layout is like and where to fund stuff and documentation to support you. 
We will also review the state of the doxygen project in MySQL 8.0.
The talk assumes you'd have working knowledge with C/C++ and algorithms. 

Ever wanted to learn how to add this little piece of functionality that you're missing in MySQL but the codebase seems large and thus intimidating ?
Then this talk is for you: we'll enumerate the ways to extend and alter MySQL functionality and will get you started on hacking on the codebase: what the layout is like and where to fund stuff and documentation to support you. 
We will also review the state of the doxygen project in MySQL 8.0.
The talk assumes you'd have working knowledge with C/C++ and algorithms. 

Georgi Kodinov
Captions: 
	00:00:05,930 --> 00:00:11,630
let's get

00:00:07,520 --> 00:00:15,320
that I only have 30 minutes and that can

00:00:11,630 --> 00:00:19,940
go as long as we need it to go it's a

00:00:15,320 --> 00:00:23,180
wide subject really okay so a few words

00:00:19,940 --> 00:00:26,270
about me first I'm a mask you developers

00:00:23,180 --> 00:00:33,559
currently leading a team working on

00:00:26,270 --> 00:00:36,110
Damascus overcoat I've been a longtime

00:00:33,559 --> 00:00:39,710
guest to this conference I really like

00:00:36,110 --> 00:00:42,860
it and I like the community in opens you

00:00:39,710 --> 00:00:48,170
so I think it's important that Moscow is

00:00:42,860 --> 00:00:53,649
present here and well we show what we

00:00:48,170 --> 00:00:56,540
are working on - to you guys right so

00:00:53,649 --> 00:00:58,340
first of all I would like to say that

00:00:56,540 --> 00:01:02,420
please don't make any purchasing

00:00:58,340 --> 00:01:08,500
decisions based on them no presentation

00:01:02,420 --> 00:01:08,500
here it's just for your information so

00:01:08,590 --> 00:01:15,770
okay so I want to talk about how you can

00:01:13,429 --> 00:01:19,850
go about adding functionality to mask

00:01:15,770 --> 00:01:21,829
you when that nutshell it's a very easy

00:01:19,850 --> 00:01:24,709
answer basically it's an open source

00:01:21,829 --> 00:01:30,859
project you just hack on it and then you

00:01:24,709 --> 00:01:34,459
get results but because writing database

00:01:30,859 --> 00:01:37,819
kernels is not an easy matter we have

00:01:34,459 --> 00:01:40,999
come up with a ways to well make it a

00:01:37,819 --> 00:01:44,389
bit more simpler than that so those are

00:01:40,999 --> 00:01:47,060
the first three items on my agenda here

00:01:44,389 --> 00:01:49,459
it's the basic way the old way and the

00:01:47,060 --> 00:01:53,119
new way that we have in Moscow at zero

00:01:49,459 --> 00:01:55,039
and of course the last one is the

00:01:53,119 --> 00:02:00,200
traditional way to add functionality

00:01:55,039 --> 00:02:04,939
that you may think of right so we'll

00:02:00,200 --> 00:02:08,220
start with the basic way typically when

00:02:04,939 --> 00:02:11,400
you want to extend my SQL

00:02:08,220 --> 00:02:14,400
a database server really what you really

00:02:11,400 --> 00:02:16,980
want to artists another function that

00:02:14,400 --> 00:02:20,520
you can call from from the SQL language

00:02:16,980 --> 00:02:23,340
and this is what user-defined functions

00:02:20,520 --> 00:02:25,740
are actually they're they operate on

00:02:23,340 --> 00:02:28,530
this basic level they assume that you

00:02:25,740 --> 00:02:30,600
pass a certain set of arguments to the

00:02:28,530 --> 00:02:32,630
function and then you get the single

00:02:30,600 --> 00:02:36,540
result really that's what it is

00:02:32,630 --> 00:02:40,020
this interface has been around with

00:02:36,540 --> 00:02:44,610
masks for probably 15 years now so

00:02:40,020 --> 00:02:48,060
there's a good number of usage examples

00:02:44,610 --> 00:02:52,650
of this interface and because it's that

00:02:48,060 --> 00:02:54,990
old it's also very basic so well it

00:02:52,650 --> 00:02:58,020
works for the basic stuff again but not

00:02:54,990 --> 00:03:01,170
for the more advanced things that you

00:02:58,020 --> 00:03:04,500
may want to do does the architecture of

00:03:01,170 --> 00:03:07,380
the UDF's the client execute some sort

00:03:04,500 --> 00:03:10,800
of an SQL that triggers internally in

00:03:07,380 --> 00:03:13,170
the server triggers a UDF call which is

00:03:10,800 --> 00:03:16,500
stands for user-defined function and

00:03:13,170 --> 00:03:18,720
then that calls this external component

00:03:16,500 --> 00:03:21,540
component that is loaded inside the

00:03:18,720 --> 00:03:23,610
server and that produces some result

00:03:21,540 --> 00:03:27,110
which is then sent back to the client

00:03:23,610 --> 00:03:31,380
that's in a nutshell what it is

00:03:27,110 --> 00:03:34,290
so pros and cons of datas i can say as i

00:03:31,380 --> 00:03:37,190
said already it's very easy very ancient

00:03:34,290 --> 00:03:43,500
very well-documented because of that and

00:03:37,190 --> 00:03:45,900
kind of easily understood by people it's

00:03:43,500 --> 00:03:48,570
also dynamically loadable so if you have

00:03:45,900 --> 00:03:51,090
like a running server you can well

00:03:48,570 --> 00:03:54,000
install your extra shared object and

00:03:51,090 --> 00:03:58,440
then have it be executed by the server

00:03:54,000 --> 00:04:01,890
process concern it can return a single

00:03:58,440 --> 00:04:05,910
value and that's the biggest limitation

00:04:01,890 --> 00:04:07,860
of it really and there's a couple of

00:04:05,910 --> 00:04:10,440
extra things like it cannot generate

00:04:07,860 --> 00:04:15,150
proper SQL errors it can just return

00:04:10,440 --> 00:04:17,250
that value and also it has kind of a

00:04:15,150 --> 00:04:19,600
limited data type support it does not

00:04:17,250 --> 00:04:25,180
support all the modern types of

00:04:19,600 --> 00:04:27,400
the database engine yep and another kind

00:04:25,180 --> 00:04:29,950
of maintenance car though is that you

00:04:27,400 --> 00:04:32,230
need to be defining if you have like a

00:04:29,950 --> 00:04:35,200
single shared object with say ten

00:04:32,230 --> 00:04:37,930
functions you need to execute create

00:04:35,200 --> 00:04:43,090
function ten times for each of these

00:04:37,930 --> 00:04:46,450
functions it's kind of inconvenient and

00:04:43,090 --> 00:04:49,350
here is an example of how when one of

00:04:46,450 --> 00:04:52,690
those functions really looks like so

00:04:49,350 --> 00:04:54,850
this particular one takes a variable

00:04:52,690 --> 00:04:57,580
number of arguments and then does

00:04:54,850 --> 00:05:03,250
certain things based on the type of the

00:04:57,580 --> 00:05:06,820
argument really okay so you can check

00:05:03,250 --> 00:05:10,420
for now there you can return that the

00:05:06,820 --> 00:05:16,810
set result and yeah it's pretty basic

00:05:10,420 --> 00:05:19,000
really and this is how it looks like

00:05:16,810 --> 00:05:20,170
when you want to compile it this is

00:05:19,000 --> 00:05:23,170
based on the source distribution

00:05:20,170 --> 00:05:25,180
actually so if you have a binary

00:05:23,170 --> 00:05:28,300
distribution what we call a binary

00:05:25,180 --> 00:05:30,400
distribution of nice QL you may skip

00:05:28,300 --> 00:05:33,400
some of the include parts here but well

00:05:30,400 --> 00:05:36,940
does the source and developer so I work

00:05:33,400 --> 00:05:39,790
on the source and that's how you compile

00:05:36,940 --> 00:05:42,250
this single function and then this is

00:05:39,790 --> 00:05:44,830
how you install it as well and run it as

00:05:42,250 --> 00:05:51,730
you can see it operates as expected

00:05:44,830 --> 00:05:54,640
basically we'll sum the one and the two

00:05:51,730 --> 00:05:56,560
on the last example and then add to that

00:05:54,640 --> 00:06:02,430
the length of the string which is three

00:05:56,560 --> 00:06:02,430
and you get the six so kind of nifty

00:06:03,850 --> 00:06:13,540
if you wanna run a service inside the

00:06:08,080 --> 00:06:15,460
server ie run an extra threat or have

00:06:13,540 --> 00:06:19,330
some sort of a background processing

00:06:15,460 --> 00:06:22,240
going come the traditional way of doing

00:06:19,330 --> 00:06:26,740
that inside Moscow is called the plug-in

00:06:22,240 --> 00:06:31,750
API so that has been around with mascot

00:06:26,740 --> 00:06:34,840
since 5-0 I believe there is also a book

00:06:31,750 --> 00:06:39,130
on the subject written by the architect

00:06:34,840 --> 00:06:43,630
of this interface strongly recommended

00:06:39,130 --> 00:06:46,690
if you consider doing that and the

00:06:43,630 --> 00:06:51,010
premise here is a bit different so those

00:06:46,690 --> 00:06:54,610
of you familiar with say the Apache

00:06:51,010 --> 00:06:59,949
modules it's a similar concept here or

00:06:54,610 --> 00:07:02,350
well basically you have the SQL query

00:06:59,949 --> 00:07:05,289
and then the server at certain points

00:07:02,350 --> 00:07:08,639
decides ok I want to check for pluggable

00:07:05,289 --> 00:07:11,770
functionality like for example

00:07:08,639 --> 00:07:14,229
authenticating users is one such check

00:07:11,770 --> 00:07:18,220
point all the authentication in Moscow

00:07:14,229 --> 00:07:20,800
is done via plugins and it's because the

00:07:18,220 --> 00:07:23,139
server decides ok I now wanna go and

00:07:20,800 --> 00:07:25,180
instead of authenticating this user

00:07:23,139 --> 00:07:29,229
account I wanna go and search for

00:07:25,180 --> 00:07:32,590
plugins that do that but of course there

00:07:29,229 --> 00:07:35,110
is this other type of plug-in which we

00:07:32,590 --> 00:07:37,570
call the daemon plugin basically this

00:07:35,110 --> 00:07:40,120
only gets initialization and the

00:07:37,570 --> 00:07:43,060
initialization when loaded or unloaded

00:07:40,120 --> 00:07:45,310
from the server and you are free to do

00:07:43,060 --> 00:07:47,560
your own background processing click

00:07:45,310 --> 00:07:51,490
open a listening socket or whatever I

00:07:47,560 --> 00:07:55,090
mean this is for example how our new

00:07:51,490 --> 00:07:57,849
protocol plug-in operates it's a it's a

00:07:55,090 --> 00:08:02,080
daemon plug-in that listens on three

00:07:57,849 --> 00:08:07,150
trees zero six zero and listens for the

00:08:02,080 --> 00:08:09,760
new X protocol right but the premise is

00:08:07,150 --> 00:08:11,919
simple the server decides when to talk

00:08:09,760 --> 00:08:12,490
to the plug-in and then the plug-in can

00:08:11,919 --> 00:08:18,220
only talk

00:08:12,490 --> 00:08:22,830
to the server that's it okay pros and

00:08:18,220 --> 00:08:25,599
cons I mentioned already some of those

00:08:22,830 --> 00:08:28,720
this has been around and there's a lot

00:08:25,599 --> 00:08:31,150
of examples so you have a good starting

00:08:28,720 --> 00:08:34,719
point and a good boilerplate to to work

00:08:31,150 --> 00:08:40,180
on and also storage engines are plugins

00:08:34,719 --> 00:08:43,029
of a soft so it's driving important

00:08:40,180 --> 00:08:47,520
parts of the server really so if you

00:08:43,029 --> 00:08:50,410
wanna write plugins there is not a very

00:08:47,520 --> 00:08:53,740
rough start I mean you have a lot of

00:08:50,410 --> 00:08:59,350
examples and they are dynamically

00:08:53,740 --> 00:09:02,140
loadable you can basically call server

00:08:59,350 --> 00:09:05,589
functions if you know them because when

00:09:02,140 --> 00:09:08,020
you link the plugins will see later they

00:09:05,589 --> 00:09:10,930
you link them with the server binary

00:09:08,020 --> 00:09:13,330
symbols so basically it's a shared

00:09:10,930 --> 00:09:15,550
object that can call back into the

00:09:13,330 --> 00:09:21,070
server main binary all the public

00:09:15,550 --> 00:09:23,560
symbols of it kind of interesting so if

00:09:21,070 --> 00:09:25,899
you lock this particular interface from

00:09:23,560 --> 00:09:27,640
the server that you need you may just as

00:09:25,899 --> 00:09:29,020
well just call the internal functions

00:09:27,640 --> 00:09:31,690
and be done with it

00:09:29,020 --> 00:09:33,810
this of course has risks because you

00:09:31,690 --> 00:09:37,839
cannot really have portable plug-ins

00:09:33,810 --> 00:09:40,209
basically if you do that then you need

00:09:37,839 --> 00:09:43,920
to compile your plugin with every new

00:09:40,209 --> 00:09:46,870
server version that that is out there

00:09:43,920 --> 00:09:49,860
but it's tempting because there's a lot

00:09:46,870 --> 00:09:53,020
of functionality that you can access

00:09:49,860 --> 00:09:54,820
okay so cons are the biggest cons of

00:09:53,020 --> 00:09:57,339
plugins is that the plugins can only

00:09:54,820 --> 00:09:59,860
talk to the server so server is like

00:09:57,339 --> 00:10:04,660
this focal point of plugins and if you

00:09:59,860 --> 00:10:07,529
won't say you're auditing your storage

00:10:04,660 --> 00:10:10,660
engine to talk to your auditing plug-in

00:10:07,529 --> 00:10:14,950
then you basically need a proxy service

00:10:10,660 --> 00:10:18,589
in the server that allows other plugins

00:10:14,950 --> 00:10:22,850
to talk to the to the auditing plugin

00:10:18,589 --> 00:10:25,519
and that's kind of tedious I mean for

00:10:22,850 --> 00:10:27,620
every new plug-in that you are if you

00:10:25,519 --> 00:10:30,319
want to enable it for other plug-in City

00:10:27,620 --> 00:10:33,769
to do this extra proxy service so that

00:10:30,319 --> 00:10:35,779
the plugins can call it otherwise it's

00:10:33,769 --> 00:10:38,740
only the server that can interact with

00:10:35,779 --> 00:10:43,120
it that's the that's the biggest

00:10:38,740 --> 00:10:43,120
architecture of limitation if you like

00:10:45,309 --> 00:10:52,879
okay so another thing is that you don't

00:10:49,790 --> 00:10:55,389
have explicit dependencies because of

00:10:52,879 --> 00:10:59,059
the plugins talking only to the server

00:10:55,389 --> 00:11:00,769
so they expect that you your plugin does

00:10:59,059 --> 00:11:03,279
not depend on any other pluggable

00:11:00,769 --> 00:11:05,389
functionality which is kind of limiting

00:11:03,279 --> 00:11:07,399
or do you need to handle the

00:11:05,389 --> 00:11:10,339
dependencies yourself basically check

00:11:07,399 --> 00:11:15,189
okay so it does this work then okay I

00:11:10,339 --> 00:11:18,790
have do whatever otherwise just bail up

00:11:15,189 --> 00:11:21,439
right so this is a an example

00:11:18,790 --> 00:11:23,540
authentication plugin but probably the

00:11:21,439 --> 00:11:27,110
simplest one that we have there is a

00:11:23,540 --> 00:11:30,110
even a simpler one but well it does not

00:11:27,110 --> 00:11:36,139
do a lot it just says yes so this one

00:11:30,110 --> 00:11:40,459
does a bit of well maybe it's not really

00:11:36,139 --> 00:11:42,189
well seeing like see if we can can zoom

00:11:40,459 --> 00:11:49,069
a bit like that

00:11:42,189 --> 00:11:53,240
is this better okay so as you can see

00:11:49,069 --> 00:11:56,000
this is the main function the main

00:11:53,240 --> 00:11:58,240
function of the plugin that the server

00:11:56,000 --> 00:12:00,980
cause when it wants to authenticate

00:11:58,240 --> 00:12:04,120
authenticate user there's a number of

00:12:00,980 --> 00:12:07,040
arguments passed on top of it and then

00:12:04,120 --> 00:12:11,809
what it does it it goes to the UNIX

00:12:07,040 --> 00:12:15,439
socket and checks the UNIX user that's

00:12:11,809 --> 00:12:18,470
authentic that so well had that socket

00:12:15,439 --> 00:12:22,939
opened and then if the username of that

00:12:18,470 --> 00:12:25,399
user much is the the username that is

00:12:22,939 --> 00:12:27,339
passed to the server then it says ok so

00:12:25,399 --> 00:12:31,010
basically if you are logged in as root

00:12:27,339 --> 00:12:35,630
you can be root in mask you

00:12:31,010 --> 00:12:38,630
or if your log locked in this Joe

00:12:35,630 --> 00:12:42,260
you only can be Joe in max-q nothing

00:12:38,630 --> 00:12:44,329
else does the but the good part is that

00:12:42,260 --> 00:12:49,240
you don't need the password because well

00:12:44,329 --> 00:12:49,240
it's already been provided to the system

00:12:50,199 --> 00:12:57,769
so the each plug-in also has like

00:12:54,040 --> 00:13:00,290
descriptor of block of assault this is

00:12:57,769 --> 00:13:02,420
the authentication handler so as you can

00:13:00,290 --> 00:13:06,110
see here it's the authentication

00:13:02,420 --> 00:13:08,449
function on top and then some other

00:13:06,110 --> 00:13:12,410
service functions that we use for

00:13:08,449 --> 00:13:15,010
various occasions I can go over this but

00:13:12,410 --> 00:13:18,889
we don't really have the time for that

00:13:15,010 --> 00:13:21,320
and then it's the plug-in declaration so

00:13:18,889 --> 00:13:23,240
this plug-in declaration basically

00:13:21,320 --> 00:13:26,029
defines one public single that the

00:13:23,240 --> 00:13:28,880
server searches for when it loads the

00:13:26,029 --> 00:13:34,040
plugin and from there it all begins

00:13:28,880 --> 00:13:35,720
basically okay so that's plugins that's

00:13:34,040 --> 00:13:39,410
how we write plugins plenty of examples

00:13:35,720 --> 00:13:41,720
again go to plug-in slash and you'll

00:13:39,410 --> 00:13:46,370
find at least 10 of them in the original

00:13:41,720 --> 00:13:50,630
distro this is how you compile one sorry

00:13:46,370 --> 00:13:54,160
this is one seem like simple scene like

00:13:50,630 --> 00:13:57,319
file that you use to compile a plug-in

00:13:54,160 --> 00:13:59,180
basically you call a see Mike macro

00:13:57,319 --> 00:14:01,339
again you give it the name of the

00:13:59,180 --> 00:14:04,190
plug-in the source files and then you

00:14:01,339 --> 00:14:06,079
say I want this plug-in to only be

00:14:04,190 --> 00:14:09,529
compiled as a shared object that's what

00:14:06,079 --> 00:14:12,440
module only is and this calf peer crate

00:14:09,529 --> 00:14:14,930
is some C make magic to check if you are

00:14:12,440 --> 00:14:20,240
running on Linux that's that's what it

00:14:14,930 --> 00:14:26,360
is okay and this is how using a plugin

00:14:20,240 --> 00:14:29,990
looks like again try to zoom a bit so

00:14:26,360 --> 00:14:32,500
you install it first obviously right

00:14:29,990 --> 00:14:32,500
here

00:14:32,710 --> 00:14:38,710
and then well you create a user using

00:14:37,270 --> 00:14:41,290
that plugin so because it's an

00:14:38,710 --> 00:14:46,420
authentication plug-in and now you can

00:14:41,290 --> 00:14:48,610
basically just login with it and there

00:14:46,420 --> 00:14:53,260
you go you are authenticated without the

00:14:48,610 --> 00:14:55,810
password so that's how this buggies work

00:14:53,260 --> 00:14:58,090
the server needs to know to call them

00:14:55,810 --> 00:15:02,940
and when it does call them they produce

00:14:58,090 --> 00:15:02,940
the results they are expected to produce

00:15:04,230 --> 00:15:11,200
so not not very complex I hope and

00:15:08,800 --> 00:15:13,480
there's various kinds of plugins - I

00:15:11,200 --> 00:15:15,640
mean various plug-in types there's the

00:15:13,480 --> 00:15:21,670
authentication power in there's all of

00:15:15,640 --> 00:15:25,510
these guys like six or seven okay so

00:15:21,670 --> 00:15:28,960
this one is our new take on the plug-in

00:15:25,510 --> 00:15:33,270
system architecture we thought it would

00:15:28,960 --> 00:15:36,130
be easier if we start from scratch

00:15:33,270 --> 00:15:39,490
because there are certain architectural

00:15:36,130 --> 00:15:42,430
limitations with plugins that will not

00:15:39,490 --> 00:15:45,280
be easy to overcome as a kind of

00:15:42,430 --> 00:15:49,030
continuous development so we decided to

00:15:45,280 --> 00:15:52,840
make a completely new interface based on

00:15:49,030 --> 00:15:56,160
the idea of components and the kind of

00:15:52,840 --> 00:15:59,650
micro services that you expose in use

00:15:56,160 --> 00:16:02,020
this is new in night zero so if you want

00:15:59,650 --> 00:16:05,860
to play with that you need a scale right

00:16:02,020 --> 00:16:10,360
zero but well since it is new

00:16:05,860 --> 00:16:12,280
functionality that's natural I guess as

00:16:10,360 --> 00:16:16,120
you can see the architecture here is

00:16:12,280 --> 00:16:19,090
quite different there's no server as a

00:16:16,120 --> 00:16:20,800
central focal point anymore

00:16:19,090 --> 00:16:23,410
that's just a bunch of components

00:16:20,800 --> 00:16:26,560
talking to pitch and every other

00:16:23,410 --> 00:16:32,050
component through services that's the

00:16:26,560 --> 00:16:34,620
premise I wanna make a reference to the

00:16:32,050 --> 00:16:37,650
windows comm architecture

00:16:34,620 --> 00:16:40,890
I know it's not very popular in your

00:16:37,650 --> 00:16:44,580
circles but he does have some some good

00:16:40,890 --> 00:16:47,400
ideas there and mainly the good ideas is

00:16:44,580 --> 00:16:49,710
that the interfaces are an abstract

00:16:47,400 --> 00:16:53,280
thing that may have one or many

00:16:49,710 --> 00:16:56,310
implementations that's the basic good

00:16:53,280 --> 00:17:03,240
idea that I like in common I tried to

00:16:56,310 --> 00:17:06,390
implement here as well right so profs

00:17:03,240 --> 00:17:09,960
and concept components obviously each

00:17:06,390 --> 00:17:13,590
component can only consume services so

00:17:09,960 --> 00:17:16,050
you get as a benefit explicit list of

00:17:13,590 --> 00:17:20,130
dependencies basically you know what you

00:17:16,050 --> 00:17:24,870
need but just based on the services that

00:17:20,130 --> 00:17:27,930
this component is asking for then all

00:17:24,870 --> 00:17:31,800
components are EQ and there's no central

00:17:27,930 --> 00:17:34,320
command so to say every every component

00:17:31,800 --> 00:17:37,380
can talk on an equal footing with every

00:17:34,320 --> 00:17:40,370
other component or implement or consume

00:17:37,380 --> 00:17:44,690
the services available so there's no

00:17:40,370 --> 00:17:47,330
special place for the server anymore

00:17:44,690 --> 00:17:51,090
it can also overwrite existing

00:17:47,330 --> 00:17:54,950
implementations as I said a service is

00:17:51,090 --> 00:17:57,180
an abstract entity so you can have many

00:17:54,950 --> 00:18:01,260
implementations of that survey of that

00:17:57,180 --> 00:18:04,080
service but only one is considered quote

00:18:01,260 --> 00:18:06,030
unquote default implementations and if

00:18:04,080 --> 00:18:08,460
your code is asking for the default

00:18:06,030 --> 00:18:11,400
implementation and not for any specific

00:18:08,460 --> 00:18:13,620
implementation then if you switch the

00:18:11,400 --> 00:18:17,010
default implementation you can basically

00:18:13,620 --> 00:18:20,310
overwrite functionality that maybe in

00:18:17,010 --> 00:18:23,990
another component through your own to

00:18:20,310 --> 00:18:27,810
your own implementation of that service

00:18:23,990 --> 00:18:30,420
and so it's obviously very different it

00:18:27,810 --> 00:18:33,300
requires a central registry of all the

00:18:30,420 --> 00:18:35,640
interfaces and we have that so every

00:18:33,300 --> 00:18:38,880
component when it is initialized it gets

00:18:35,640 --> 00:18:42,060
a interface pointer to the registry so

00:18:38,880 --> 00:18:44,220
you can search for components and for

00:18:42,060 --> 00:18:46,540
services and implementations there and

00:18:44,220 --> 00:18:49,250
then components registered there

00:18:46,540 --> 00:18:53,840
implement the implementations of their

00:18:49,250 --> 00:18:58,670
services into the registry as well right

00:18:53,840 --> 00:19:01,070
so some cones we have a bridge between

00:18:58,670 --> 00:19:04,460
plugins and components so we have a

00:19:01,070 --> 00:19:06,950
plugin service that allows you to get to

00:19:04,460 --> 00:19:10,940
the registry so if you have a plug-in or

00:19:06,950 --> 00:19:13,070
you are you want to modify one you can

00:19:10,940 --> 00:19:15,640
start with that and then access the

00:19:13,070 --> 00:19:21,110
registry to that bridge and then talk

00:19:15,640 --> 00:19:24,590
components but well not all plug-in API

00:19:21,110 --> 00:19:27,380
sorry had converted into component api's

00:19:24,590 --> 00:19:31,130
we plan to do that but it does take time

00:19:27,380 --> 00:19:34,000
in some API some plug-in API you have

00:19:31,130 --> 00:19:39,260
like 300 methods that's just not

00:19:34,000 --> 00:19:42,230
reasonable so that will take some work

00:19:39,260 --> 00:19:45,560
but we are doing that evolutionally we

00:19:42,230 --> 00:19:48,110
took one plug-in type the password

00:19:45,560 --> 00:19:50,030
verification and we converted it into a

00:19:48,110 --> 00:19:52,730
component so you can see how this is

00:19:50,030 --> 00:19:55,270
done comparing the five-seven plug-in

00:19:52,730 --> 00:19:58,610
implementation towards the eight zeros

00:19:55,270 --> 00:20:01,190
component implementation so there are

00:19:58,610 --> 00:20:08,840
examples already but it's work in

00:20:01,190 --> 00:20:13,100
progress in a way right so that's where

00:20:08,840 --> 00:20:17,180
we are at right now I have some samples

00:20:13,100 --> 00:20:21,710
for you and be quick to leave some time

00:20:17,180 --> 00:20:25,310
for questions this is how declaring a

00:20:21,710 --> 00:20:28,340
service works like so you define your

00:20:25,310 --> 00:20:32,620
service by name you define two methods

00:20:28,340 --> 00:20:36,290
for it the validate and get strength and

00:20:32,620 --> 00:20:38,440
then you implement the methods so this

00:20:36,290 --> 00:20:40,580
is the bottom part is called

00:20:38,440 --> 00:20:43,880
implementing one method looks like

00:20:40,580 --> 00:20:47,210
basically it takes arguments and under

00:20:43,880 --> 00:20:51,830
something can returns whatever the

00:20:47,210 --> 00:20:54,929
definition of the method is right here

00:20:51,830 --> 00:20:57,539
so not very different from plugins is

00:20:54,929 --> 00:21:00,750
what I'm trying to to show you we have

00:20:57,539 --> 00:21:05,549
helper macros to kind of hide some of

00:21:00,750 --> 00:21:07,799
the complexities and it it looks similar

00:21:05,549 --> 00:21:09,720
to plugin so if you are kind of

00:21:07,799 --> 00:21:12,120
comfortable doing plugins you should

00:21:09,720 --> 00:21:18,149
also be comfortable doing components I

00:21:12,120 --> 00:21:22,320
would guess okay

00:21:18,149 --> 00:21:24,840
so that thing before that was a service

00:21:22,320 --> 00:21:28,200
and this is how the description of one

00:21:24,840 --> 00:21:31,200
component look looks like so you start

00:21:28,200 --> 00:21:33,899
by defining the component and what

00:21:31,200 --> 00:21:37,380
services does it provide so there goes

00:21:33,899 --> 00:21:41,490
your dependency tracking and then you

00:21:37,380 --> 00:21:44,340
have a bunch of requirements basically

00:21:41,490 --> 00:21:46,679
it does need some services so it

00:21:44,340 --> 00:21:48,389
explicitly states what it needs and

00:21:46,679 --> 00:21:51,450
that's really great when you want to

00:21:48,389 --> 00:21:53,700
load multiple components you know which

00:21:51,450 --> 00:21:58,350
one you need to load and is it possible

00:21:53,700 --> 00:22:01,230
towards that particular component and of

00:21:58,350 --> 00:22:04,080
course there's the standard metadata

00:22:01,230 --> 00:22:07,429
type of thing similar to plugins so

00:22:04,080 --> 00:22:07,429
nothing scary there

00:22:08,149 --> 00:22:22,590
okay so yep I have an example here on

00:22:16,880 --> 00:22:27,529
how to implement this service really no

00:22:22,590 --> 00:22:31,529
sorry how to use it so this is how you

00:22:27,529 --> 00:22:33,659
basically access the registry we have

00:22:31,529 --> 00:22:35,820
the registry pointer and then we call

00:22:33,659 --> 00:22:39,120
acquire with the name of the service

00:22:35,820 --> 00:22:43,590
over here and we get an interface

00:22:39,120 --> 00:22:45,870
pointer which we basically typecast to

00:22:43,590 --> 00:22:48,029
the to the right type service type a

00:22:45,870 --> 00:22:51,210
valid ID password and then which can

00:22:48,029 --> 00:22:54,440
just call that basically so that's the

00:22:51,210 --> 00:22:54,440
hard way

00:22:55,730 --> 00:23:01,190
and there is a bit of a better way we

00:22:58,399 --> 00:23:04,309
have a helper class for you which is

00:23:01,190 --> 00:23:07,130
called my service it does take all of

00:23:04,309 --> 00:23:09,350
these parameters and thus the proper

00:23:07,130 --> 00:23:12,500
typecasting so you can just well then

00:23:09,350 --> 00:23:14,570
call the thing and it also does acquire

00:23:12,500 --> 00:23:19,480
and release for you when it goes out of

00:23:14,570 --> 00:23:19,480
scope so kind of a convenience thing

00:23:21,429 --> 00:23:27,169
okay so few words on the pour requests I

00:23:24,740 --> 00:23:31,370
won't go into details here because I'm

00:23:27,169 --> 00:23:32,809
sure you you have encountered this site

00:23:31,370 --> 00:23:37,850
on the left right

00:23:32,809 --> 00:23:40,730
that's github so basically what I want

00:23:37,850 --> 00:23:43,789
to show you here is that whenever you do

00:23:40,730 --> 00:23:48,169
that basically file a poor request in

00:23:43,789 --> 00:23:50,779
github you automatically we have some

00:23:48,169 --> 00:23:54,350
automation here you automatically end up

00:23:50,779 --> 00:23:56,600
with that so we get a proper

00:23:54,350 --> 00:23:59,450
notification directly from github with

00:23:56,600 --> 00:24:04,460
all the necessary information there with

00:23:59,450 --> 00:24:09,889
link to the github repository so we

00:24:04,460 --> 00:24:13,309
fully integrated pour requests into into

00:24:09,889 --> 00:24:15,440
our own internal processes so that

00:24:13,309 --> 00:24:17,269
should be kind of easy for you you just

00:24:15,440 --> 00:24:20,059
do your poor request and then you

00:24:17,269 --> 00:24:25,700
communicate either via the github of the

00:24:20,059 --> 00:24:30,500
other back API up to your ear and last

00:24:25,700 --> 00:24:34,760
but not least I am really proud because

00:24:30,500 --> 00:24:37,210
I spent a lot of effort on it to show

00:24:34,760 --> 00:24:40,010
you the mascot doxygen

00:24:37,210 --> 00:24:43,519
documentation so starting with eight

00:24:40,010 --> 00:24:45,769
zero we are putting significant effort

00:24:43,519 --> 00:24:50,029
into documenting the code in the proper

00:24:45,769 --> 00:24:52,700
way and I have most of the protocol

00:24:50,029 --> 00:24:56,029
documentation converted and updated to

00:24:52,700 --> 00:24:58,659
the latest details of the protocol into

00:24:56,029 --> 00:25:01,750
the oxygen and there's also a ton of

00:24:58,659 --> 00:25:05,220
function an API doc

00:25:01,750 --> 00:25:09,370
that will help you reading the code also

00:25:05,220 --> 00:25:12,450
also some nice diagrams as you can see

00:25:09,370 --> 00:25:15,700
here explaining the workforce so yes

00:25:12,450 --> 00:25:19,030
that's your new place to basically start

00:25:15,700 --> 00:25:21,460
reading The Masque Yokote where we

00:25:19,030 --> 00:25:23,680
intend to put a lot of effort into that

00:25:21,460 --> 00:25:27,520
and on a continuous basis

00:25:23,680 --> 00:25:31,480
that's our Ryan documentation source

00:25:27,520 --> 00:25:33,700
nowadays even for internal internally

00:25:31,480 --> 00:25:38,110
ramping Japanese developers and stuff

00:25:33,700 --> 00:25:44,710
like that so you get basically the royal

00:25:38,110 --> 00:25:47,620
treatment if you read that okay so what

00:25:44,710 --> 00:25:50,380
you should this there was a lot of

00:25:47,620 --> 00:25:53,320
technical stuff here and a lot of source

00:25:50,380 --> 00:25:56,020
code but these are the important parts

00:25:53,320 --> 00:26:00,010
you should always consider at least one

00:25:56,020 --> 00:26:01,840
working create trying to consider a

00:26:00,010 --> 00:26:05,410
component if you want to add something

00:26:01,840 --> 00:26:09,670
that's the most basic and most robust

00:26:05,410 --> 00:26:12,340
way that you can that you can use and

00:26:09,670 --> 00:26:15,370
you need to go to the plugin if you need

00:26:12,340 --> 00:26:17,320
some existing API or you need to call

00:26:15,370 --> 00:26:19,570
into something that's not yet the

00:26:17,320 --> 00:26:23,320
components so that's when you go to

00:26:19,570 --> 00:26:26,020
plugins and finally if you just need an

00:26:23,320 --> 00:26:29,530
SQL function then you do Daniel do you

00:26:26,020 --> 00:26:32,530
DFS and if nothing else works there's

00:26:29,530 --> 00:26:36,210
always the poor request so that's my

00:26:32,530 --> 00:26:39,670
talk in a nutshell that's how you select

00:26:36,210 --> 00:26:40,410
okay we talked I have four minutes for

00:26:39,670 --> 00:26:47,110
questions

00:26:40,410 --> 00:26:49,180
anybody anything it does not have to be

00:26:47,110 --> 00:26:49,810
plugin related it any masks your

00:26:49,180 --> 00:26:58,290
questions

00:26:49,810 --> 00:27:02,890
yes okay one thing I forgot to mention

00:26:58,290 --> 00:27:06,250
Moscow has a brand new GI release a code

00:27:02,890 --> 00:27:10,720
masquerade it has a lot of functionality

00:27:06,250 --> 00:27:15,700
as you noticed not only on the under the

00:27:10,720 --> 00:27:23,730
hood but also user facing so please go

00:27:15,700 --> 00:27:23,730
and try it out it has a lot to offer yes

00:27:28,380 --> 00:27:31,579
[Music]

00:27:37,200 --> 00:27:47,200
right ok so basically we will we will

00:27:42,940 --> 00:27:49,360
update the documentation with the with

00:27:47,200 --> 00:27:51,100
the description of the services see we

00:27:49,360 --> 00:27:53,950
are in the process of doing that

00:27:51,100 --> 00:27:55,840
so yes it's going to be properly

00:27:53,950 --> 00:28:11,380
documented in the oxygen of these

00:27:55,840 --> 00:28:16,450
methods and services yeah it's it does

00:28:11,380 --> 00:28:20,190
go deep yes we plan to use it for our

00:28:16,450 --> 00:28:25,140
own internal purposes as well ok great

00:28:20,190 --> 00:28:28,090
any more questions No

00:28:25,140 --> 00:28:31,780
then I thank you for your time and I

00:28:28,090 --> 00:28:35,970
hope you have good time using core while

00:28:31,780 --> 00:28:35,970

YouTube URL: https://www.youtube.com/watch?v=e1p41cw9zmk


