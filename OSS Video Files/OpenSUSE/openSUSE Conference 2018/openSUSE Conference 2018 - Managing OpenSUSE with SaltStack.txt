Title: openSUSE Conference 2018 - Managing OpenSUSE with SaltStack
Publication date: 2018-05-25
Playlist: openSUSE Conference 2018
Description: 
	Controlling Chaos with Event-Driven Automation

Systems management in the era of containerization and hybrid clouds can challenge even the most seasoned professional. In this session, we'll learn how to control the chaos by bringing disciplined automation practices to the rescue. Presented by the principal maintainer of the SaltStack project -- one of the largest and most active open-source communities in the world -- we'll learn how to use Salt manage everything from the smallest embedded systems to some of the largest computing infrastructures in the world.

By the time this session is complete, attendees will be armed with practical information about how to deploy Salt's automation framework which can be used right away to immediately begin to order to chaotic environments. We'll spend time focusing especially on features which can be used to manage SUSE systems but we'll also cover using Salt to manage a variety of deployments including IoT, containers, and legacy infrastructure.

Presented by Mike Place, who manages the project full-time, this talk will give attendees a chance to meet the maintainer and talk directly about future plans for the project as well as ask questions about its current direction. We'll talk about where automation is working well in modern computing and where things can be improved. Finally, we'll have a chance to talk about best practices for automation and learn about how its used by some of the best and brightest teams to build and manage systems that anyone could be proud of.

Systems management in the era of containerization and hybrid clouds can challenge even the most seasoned professional. In this session, we'll learn how to control the chaos by bringing disciplined automation practices to the rescue. Presented by the principal maintainer of the SaltStack project -- one of the largest and most active open-source communities in the world -- we'll learn how to use Salt manage everything from the smallest embedded systems to some of the largest computing infrastructures in the world.

By the time this session is complete, attendees will be armed with practical information about how to deploy Salt's automation framework which can be used right away to immediately begin to order to chaotic environments. We'll spend time focusing especially on features which can be used to manage SUSE systems but we'll also cover using Salt to manage a variety of deployments including IoT, containers, and legacy infrastructure.

Presented by Mike Place, who manages the project full-time, this talk will give attendees a chance to meet the maintainer and talk directly about future plans for the project as well as ask questions about its current direction. We'll talk about where automation is working well in modern computing and where things can be improved. Finally, we'll have a chance to talk about best practices for automation and learn about how its used by some of the best and brightest teams to build and manage systems that anyone could be proud of.

Mike Place
Captions: 
	00:00:05,899 --> 00:00:14,490
hi welcome everybody thanks so much for

00:00:10,230 --> 00:00:17,130
coming my name is Mike place as you can

00:00:14,490 --> 00:00:20,250
tell I am a long way from home I am from

00:00:17,130 --> 00:00:24,090
Salt Lake City Utah and thank you so

00:00:20,250 --> 00:00:26,550
much for having me here I am the

00:00:24,090 --> 00:00:28,830
principal maintainer of the saltstack

00:00:26,550 --> 00:00:29,939
project I have been for about five years

00:00:28,830 --> 00:00:32,700
now

00:00:29,939 --> 00:00:35,969
Tom assault stack was originally written

00:00:32,700 --> 00:00:39,629
by my boss whose name is Tom hatch who

00:00:35,969 --> 00:00:41,129
maybe some of you know and the stuff

00:00:39,629 --> 00:00:43,020
that I get really really passionate and

00:00:41,129 --> 00:00:45,570
really really excited about is

00:00:43,020 --> 00:00:49,430
automation and configuration management

00:00:45,570 --> 00:00:52,739
and figuring out how to control

00:00:49,430 --> 00:00:57,180
infrastructure at really really large

00:00:52,739 --> 00:00:59,250
and hyper scale and so I get really

00:00:57,180 --> 00:01:03,390
really happy when I can come here and

00:00:59,250 --> 00:01:05,970
talk about automation and about salt and

00:01:03,390 --> 00:01:09,930
about the stuff that that I'm really

00:01:05,970 --> 00:01:13,170
interested in so yeah that's me and like

00:01:09,930 --> 00:01:16,049
I said I am the principal maintainer of

00:01:13,170 --> 00:01:20,400
salt if there's anybody here who has

00:01:16,049 --> 00:01:23,009
ever participated in the salt project I

00:01:20,400 --> 00:01:25,439
might be the guy who was reviewing your

00:01:23,009 --> 00:01:27,810
PRS so hopefully I was really nice to

00:01:25,439 --> 00:01:30,299
you and if I wasn't please come up to me

00:01:27,810 --> 00:01:33,600
afterwards and I'll apologize to you but

00:01:30,299 --> 00:01:37,079
salt is one of the largest and most

00:01:33,600 --> 00:01:41,159
active pathan based open-source projects

00:01:37,079 --> 00:01:44,820
in the world on a typical day in salt

00:01:41,159 --> 00:01:47,729
will wake up on a Monday and will review

00:01:44,820 --> 00:01:49,460
and merge somewhere between 20 and 30

00:01:47,729 --> 00:01:52,710
pull requests which will constitute

00:01:49,460 --> 00:01:56,969
anywhere between about a thousand and

00:01:52,710 --> 00:02:00,450
maybe 5,000 lines of code so we have

00:01:56,969 --> 00:02:03,259
weeks where we move is move around as

00:02:00,450 --> 00:02:07,900
many as 30 or 40,000 lines of code so

00:02:03,259 --> 00:02:11,650
salt in many ways is as large and

00:02:07,900 --> 00:02:13,660
as active as major operating systems and

00:02:11,650 --> 00:02:16,690
I think that's one of the ways that you

00:02:13,660 --> 00:02:18,790
have to start to think about the way

00:02:16,690 --> 00:02:20,710
infrastructure is changing is that the

00:02:18,790 --> 00:02:22,480
notion of the the operating system

00:02:20,710 --> 00:02:23,980
itself is moving up and up and

00:02:22,480 --> 00:02:26,200
abstraction is moving up and up away

00:02:23,980 --> 00:02:28,660
from the hardware as we start to build

00:02:26,200 --> 00:02:31,510
out more distributed systems and

00:02:28,660 --> 00:02:35,830
automation is a real is a key component

00:02:31,510 --> 00:02:38,170
of that assumably there are a number of

00:02:35,830 --> 00:02:42,340
people here who use SUSE for those of

00:02:38,170 --> 00:02:44,590
you familiar with SUSE manager assault

00:02:42,340 --> 00:02:46,420
is the technology that is right under

00:02:44,590 --> 00:02:49,600
the hood there we're very thankful to

00:02:46,420 --> 00:02:51,310
our to our friends at SUSE and we have

00:02:49,600 --> 00:02:54,130
collaborations you know with with a

00:02:51,310 --> 00:02:58,300
number of other people so let's talk

00:02:54,130 --> 00:02:59,770
about salt itself these are these sort

00:02:58,300 --> 00:03:02,590
of introductory talks are always a

00:02:59,770 --> 00:03:05,620
little bit difficult for me to give

00:03:02,590 --> 00:03:09,160
because it's a little bit like saying

00:03:05,620 --> 00:03:12,160
well explain tumble all of tumbleweed to

00:03:09,160 --> 00:03:15,010
me in 30 minutes okay go you're like

00:03:12,160 --> 00:03:18,130
well where do I even start but at the

00:03:15,010 --> 00:03:21,670
end of the day salt is a automation

00:03:18,130 --> 00:03:26,380
framework that is designed to allow you

00:03:21,670 --> 00:03:30,040
to control your infrastructure by

00:03:26,380 --> 00:03:34,750
implementing automation patterns okay so

00:03:30,040 --> 00:03:37,420
what do I mean by that so in 2011 tom

00:03:34,750 --> 00:03:40,120
and then very soon myself set out to

00:03:37,420 --> 00:03:42,220
solve a really simple problem what we

00:03:40,120 --> 00:03:44,769
wanted to do is we have these large

00:03:42,220 --> 00:03:46,959
infrastructures that we had to control

00:03:44,769 --> 00:03:49,180
and we needed to do something really

00:03:46,959 --> 00:03:52,360
really basic which is that we needed to

00:03:49,180 --> 00:03:55,030
send shell commands to a lot of machines

00:03:52,360 --> 00:03:58,060
and by a lot I mean thousands which in

00:03:55,030 --> 00:04:00,610
2011 was a lot it's not really a lot

00:03:58,060 --> 00:04:02,830
anymore but at the time we had to we had

00:04:00,610 --> 00:04:04,180
to send a series of shell commands you

00:04:02,830 --> 00:04:06,070
know to two or three thousand machines

00:04:04,180 --> 00:04:09,310
at the same time sort of like well okay

00:04:06,070 --> 00:04:12,130
what are we gonna do there and so what

00:04:09,310 --> 00:04:15,700
we wanted to do is build a really really

00:04:12,130 --> 00:04:17,170
fast remote execution framework right

00:04:15,700 --> 00:04:18,970
we're all familiar with the notion of

00:04:17,170 --> 00:04:21,100
remote execution right we started all

00:04:18,970 --> 00:04:22,720
the way back in the day with RSA

00:04:21,100 --> 00:04:24,760
but basically we wanted to run shale

00:04:22,720 --> 00:04:27,730
communes commands and we want to wanted

00:04:24,760 --> 00:04:31,450
to run them in a massively parallel way

00:04:27,730 --> 00:04:34,060
so salt started out as a command and

00:04:31,450 --> 00:04:36,810
control system wherein you could have

00:04:34,060 --> 00:04:39,910
what we call a master which is a

00:04:36,810 --> 00:04:42,640
management node and you could have

00:04:39,910 --> 00:04:44,260
machines which were under control or

00:04:42,640 --> 00:04:47,080
being managed

00:04:44,260 --> 00:04:49,450
we call those minions and that works in

00:04:47,080 --> 00:04:51,990
a client-server architecture such that

00:04:49,450 --> 00:04:54,640
from the master you can publish a

00:04:51,990 --> 00:04:56,140
command to a series of minions the

00:04:54,640 --> 00:04:59,320
minions will run the command and they'll

00:04:56,140 --> 00:05:01,690
return the results back to the master so

00:04:59,320 --> 00:05:05,170
the way that we ended up making this

00:05:01,690 --> 00:05:07,750
really really fast is that we took a

00:05:05,170 --> 00:05:09,880
technology off the shelf called 0 mq all

00:05:07,750 --> 00:05:12,430
right which these days is still around

00:05:09,880 --> 00:05:15,640
still an amazing product product or

00:05:12,430 --> 00:05:18,790
project rather and there are a number of

00:05:15,640 --> 00:05:21,670
other message buses around as well but

00:05:18,790 --> 00:05:22,990
Sir on-q gave us the flexibility to be

00:05:21,670 --> 00:05:26,650
able to publish these commands

00:05:22,990 --> 00:05:28,780
simultaneously in a pub sub pattern in a

00:05:26,650 --> 00:05:30,570
number of milliseconds almost as fast as

00:05:28,780 --> 00:05:34,270
the network round-trip time would be

00:05:30,570 --> 00:05:38,110
along with encryption overhead and a few

00:05:34,270 --> 00:05:40,870
other things so after that point we said

00:05:38,110 --> 00:05:43,090
ok cool now we can control our

00:05:40,870 --> 00:05:45,430
datacenter basically by you know typing

00:05:43,090 --> 00:05:48,010
commands on a single machine what should

00:05:45,430 --> 00:05:50,710
we do next and the service that came

00:05:48,010 --> 00:05:52,690
along next was configuration management

00:05:50,710 --> 00:05:55,300
which we're all familiar with right our

00:05:52,690 --> 00:05:57,400
friends at cfengine and our friends at

00:05:55,300 --> 00:05:58,780
chef and our friends at puppet have been

00:05:57,400 --> 00:06:00,580
talking about this notion of

00:05:58,780 --> 00:06:02,620
infrastructure is code for a really

00:06:00,580 --> 00:06:06,070
really long time and so we said ok

00:06:02,620 --> 00:06:08,710
that's cool we'll do that and there were

00:06:06,070 --> 00:06:11,440
a couple of problems that we wanted to

00:06:08,710 --> 00:06:13,060
address that we're in that ecosystem and

00:06:11,440 --> 00:06:14,410
I'm gonna talk about them really briefly

00:06:13,060 --> 00:06:16,090
before I get into the nuts and bolts

00:06:14,410 --> 00:06:17,800
just because I'm a huge nerd about this

00:06:16,090 --> 00:06:21,940
stuff and I really like to talk about

00:06:17,800 --> 00:06:23,830
the history and the philosophy so one of

00:06:21,940 --> 00:06:24,450
the big debates that was happening at

00:06:23,830 --> 00:06:25,990
the time

00:06:24,450 --> 00:06:28,380
especially in the configuration

00:06:25,990 --> 00:06:31,030
management world was this debate between

00:06:28,380 --> 00:06:31,999
imperative an imperative approach and a

00:06:31,030 --> 00:06:33,829
declarative approach

00:06:31,999 --> 00:06:35,569
now if you remember back to your

00:06:33,829 --> 00:06:36,949
computer science classes you have the

00:06:35,569 --> 00:06:39,259
notion of imperative programming and

00:06:36,949 --> 00:06:41,779
declarative programming but from the

00:06:39,259 --> 00:06:44,029
systems management perspective an

00:06:41,779 --> 00:06:46,819
imperative approach is what you might

00:06:44,029 --> 00:06:50,029
think of as a procedural approach it

00:06:46,819 --> 00:06:54,349
says okay in order to get the system to

00:06:50,029 --> 00:06:57,529
state Z first do step a then do step B

00:06:54,349 --> 00:06:58,939
then do step C then do sets and so on

00:06:57,529 --> 00:07:01,099
and so on and so on and so on and that's

00:06:58,939 --> 00:07:02,809
how you get the system to this final

00:07:01,099 --> 00:07:05,029
state and that gives you of course

00:07:02,809 --> 00:07:06,679
maximal control and for you know people

00:07:05,029 --> 00:07:10,129
who are very into programming like that

00:07:06,679 --> 00:07:12,889
sort of thing but it's also not

00:07:10,129 --> 00:07:15,379
particularly its it can be brittle right

00:07:12,889 --> 00:07:17,299
because what happens if state D one day

00:07:15,379 --> 00:07:20,360
needs to change for one reason or

00:07:17,299 --> 00:07:22,429
another that's a huge pain right the

00:07:20,360 --> 00:07:25,399
second approach is a declarative

00:07:22,429 --> 00:07:27,860
approach a declarative approach says

00:07:25,399 --> 00:07:31,039
okay I want to get this the system to

00:07:27,860 --> 00:07:34,669
stay Z in order to do that I am simply

00:07:31,039 --> 00:07:37,579
going to describe state Z and I am going

00:07:34,669 --> 00:07:39,739
to allow the internal mechanics of

00:07:37,579 --> 00:07:41,269
whatever system being a compiler and

00:07:39,739 --> 00:07:45,019
automation engine or whatever it is

00:07:41,269 --> 00:07:48,349
figure out the best way to get me from A

00:07:45,019 --> 00:07:52,249
to Z right and so there was this huge

00:07:48,349 --> 00:07:53,959
debate and products like chef or I

00:07:52,249 --> 00:07:56,769
should say projects projects like chef

00:07:53,959 --> 00:07:59,029
projects like puppet really ended up

00:07:56,769 --> 00:08:00,199
somewhat more on the imperative side of

00:07:59,029 --> 00:08:02,119
this right they came up with

00:08:00,199 --> 00:08:04,249
domain-specific languages in order to

00:08:02,119 --> 00:08:05,989
describe systems chef if you've ever

00:08:04,249 --> 00:08:09,739
used that is a really imperative

00:08:05,989 --> 00:08:12,379
approach and we said well you know what

00:08:09,739 --> 00:08:15,619
I think we might be able to do both of

00:08:12,379 --> 00:08:18,759
those things and so we set out trying to

00:08:15,619 --> 00:08:22,219
achieve that goal of creating a system a

00:08:18,759 --> 00:08:24,349
project where you could both sort of

00:08:22,219 --> 00:08:27,110
program in an imperative sense how the

00:08:24,349 --> 00:08:29,179
system could look but also describe in a

00:08:27,110 --> 00:08:31,489
declarative sense if if that's what you

00:08:29,179 --> 00:08:33,289
wanted to do so we built out

00:08:31,489 --> 00:08:35,329
configuration management and we'll take

00:08:33,289 --> 00:08:38,149
a look at how that looks in a bit here

00:08:35,329 --> 00:08:41,269
but the configuration management

00:08:38,149 --> 00:08:44,470
approach that we took was to use a

00:08:41,269 --> 00:08:45,940
serialization language called yeah mph

00:08:44,470 --> 00:08:49,660
a lot of you are familiar with these

00:08:45,940 --> 00:08:52,300
days but yama allows you to in a very

00:08:49,660 --> 00:08:54,310
sort of declarative way say okay I want

00:08:52,300 --> 00:08:56,560
this declaration about the state of my

00:08:54,310 --> 00:09:00,580
system which the declaration might be

00:08:56,560 --> 00:09:03,370
okay make sure that the Apache package

00:09:00,580 --> 00:09:05,020
is installed right and your

00:09:03,370 --> 00:09:07,150
configuration management system does

00:09:05,020 --> 00:09:10,510
that by figuring out whether it needs to

00:09:07,150 --> 00:09:12,850
invoke D package or zipper or young or

00:09:10,510 --> 00:09:16,240
whatever it is so on and so forth so

00:09:12,850 --> 00:09:18,760
let's go on and let's talk about how

00:09:16,240 --> 00:09:20,980
salt actually implements this

00:09:18,760 --> 00:09:23,770
client-server architecture so that we

00:09:20,980 --> 00:09:26,500
can control all of these minions are

00:09:23,770 --> 00:09:29,980
these managed nodes at really really

00:09:26,500 --> 00:09:32,080
high speed which brings me to the second

00:09:29,980 --> 00:09:34,120
big debate that you hear a lot about in

00:09:32,080 --> 00:09:39,070
the automation space these days and that

00:09:34,120 --> 00:09:41,740
debate is about whether it's better to

00:09:39,070 --> 00:09:43,210
have an agent-based approach ie to have

00:09:41,740 --> 00:09:45,130
an agent that sits on all of these

00:09:43,210 --> 00:09:47,290
managed nodes that listens to commands

00:09:45,130 --> 00:09:49,990
or whether it's better to have an

00:09:47,290 --> 00:09:52,630
agentless approach the advocates of an

00:09:49,990 --> 00:09:57,640
agentless approach basically run all of

00:09:52,630 --> 00:09:59,380
their commands over SSH right well we

00:09:57,640 --> 00:10:02,230
said again that sort of seems like a

00:09:59,380 --> 00:10:04,210
false dichotomy we're going to allow you

00:10:02,230 --> 00:10:07,450
to do both if you want an agentless

00:10:04,210 --> 00:10:09,760
approach salt will do that it will

00:10:07,450 --> 00:10:13,930
control command and control all of your

00:10:09,760 --> 00:10:16,240
minions with no software installed on

00:10:13,930 --> 00:10:19,210
the other and just an SSH daemon

00:10:16,240 --> 00:10:21,070
listening or we have an agent-based

00:10:19,210 --> 00:10:24,790
approach the agent based approach like I

00:10:21,070 --> 00:10:31,330
said runs over 0 and Q and is very very

00:10:24,790 --> 00:10:34,330
very fast so the master that sits on top

00:10:31,330 --> 00:10:37,180
right connects to all of these different

00:10:34,330 --> 00:10:40,440
types of machines over what we call a

00:10:37,180 --> 00:10:43,510
message bus now we think that the the

00:10:40,440 --> 00:10:46,060
salt message bus we also call it an

00:10:43,510 --> 00:10:48,430
event bus is an extremely powerful

00:10:46,060 --> 00:10:51,190
paradigm for infrastructure management

00:10:48,430 --> 00:10:56,540
and the reason that we think so is

00:10:51,190 --> 00:10:59,750
because a single event bus that acts as

00:10:56,540 --> 00:11:01,880
management layer between your managed

00:10:59,750 --> 00:11:05,410
manager node right we call it the master

00:11:01,880 --> 00:11:09,230
and your minions that events flow over

00:11:05,410 --> 00:11:11,240
allows more than just your management

00:11:09,230 --> 00:11:13,670
layer to participate in the

00:11:11,240 --> 00:11:16,310
administration of your network which is

00:11:13,670 --> 00:11:18,170
to say that for example right now a

00:11:16,310 --> 00:11:19,580
really common paradigm is you'll have a

00:11:18,170 --> 00:11:21,410
monitoring system that sits over here

00:11:19,580 --> 00:11:23,510
and you'll have a management system that

00:11:21,410 --> 00:11:24,890
sits over here and those are in very

00:11:23,510 --> 00:11:27,350
specific silos

00:11:24,890 --> 00:11:30,560
one of the things that we said is why

00:11:27,350 --> 00:11:35,660
does that need to be the case right why

00:11:30,560 --> 00:11:38,030
can't it we have machines that emit

00:11:35,660 --> 00:11:41,540
events about their own health right that

00:11:38,030 --> 00:11:43,190
go on to this event bus and why don't we

00:11:41,540 --> 00:11:45,710
have an automation system that can

00:11:43,190 --> 00:11:48,320
listen to those events and if it hears

00:11:45,710 --> 00:11:50,060
about a problem hey turns out it's a

00:11:48,320 --> 00:11:53,690
configuration management system it can

00:11:50,060 --> 00:11:55,760
go out and fix them so that's called we

00:11:53,690 --> 00:11:57,350
call that the event system or the

00:11:55,760 --> 00:12:00,950
assault reactor and we'll look at some

00:11:57,350 --> 00:12:04,160
demos of those really quick okay so

00:12:00,950 --> 00:12:06,770
continuing on with how we've implemented

00:12:04,160 --> 00:12:09,740
all of these ideas there are a couple of

00:12:06,770 --> 00:12:13,160
main principles when you start to get

00:12:09,740 --> 00:12:15,440
into salt and you start to look at at

00:12:13,160 --> 00:12:17,590
using salt for your own projects that

00:12:15,440 --> 00:12:20,210
you'll probably want to be familiar with

00:12:17,590 --> 00:12:22,430
so we've split those up into two areas

00:12:20,210 --> 00:12:24,470
the first is on the master side again

00:12:22,430 --> 00:12:27,620
the master is this management node and

00:12:24,470 --> 00:12:30,200
the master has a couple of concepts that

00:12:27,620 --> 00:12:32,870
you'll really want to understand the

00:12:30,200 --> 00:12:36,590
first is what we call the pillar on the

00:12:32,870 --> 00:12:40,700
master side the pillar is simply a place

00:12:36,590 --> 00:12:43,730
where we store secrets that a managed

00:12:40,700 --> 00:12:46,990
node might need to know about so why do

00:12:43,730 --> 00:12:49,460
we need to do this because for example

00:12:46,990 --> 00:12:51,530
one of the things that people very

00:12:49,460 --> 00:12:54,170
frequently do when they're managing

00:12:51,530 --> 00:12:56,030
systems is they write out configuration

00:12:54,170 --> 00:12:58,130
files and sometimes those configuration

00:12:56,030 --> 00:13:01,490
files have secrets in them right so

00:12:58,130 --> 00:13:06,080
let's imagine for example that you want

00:13:01,490 --> 00:13:07,820
to use salt to control a fleet of MySQL

00:13:06,080 --> 00:13:09,980
servers okay so you need to write out

00:13:07,820 --> 00:13:11,029
Etsy you know my Kampf - all of these

00:13:09,980 --> 00:13:13,310
machine

00:13:11,029 --> 00:13:14,750
but inside my Kampf right you're going

00:13:13,310 --> 00:13:17,270
to have you know stuff like connection

00:13:14,750 --> 00:13:19,880
passwords things of that nature but

00:13:17,270 --> 00:13:21,950
you're also controlling some Apache web

00:13:19,880 --> 00:13:24,020
servers right but you don't want them to

00:13:21,950 --> 00:13:26,630
have access to that so what the pillar

00:13:24,020 --> 00:13:28,250
does is it allows you to specify this

00:13:26,630 --> 00:13:31,100
password that you're going to template

00:13:28,250 --> 00:13:33,740
eyes into your configuration files on

00:13:31,100 --> 00:13:38,480
the MySQL side deliver those files

00:13:33,740 --> 00:13:41,830
securely to those machines but not have

00:13:38,480 --> 00:13:45,560
that secret available to other machines

00:13:41,830 --> 00:13:47,360
the second I think really important

00:13:45,560 --> 00:13:50,450
principle to understand about the master

00:13:47,360 --> 00:13:51,529
is this notion of the reactor and don't

00:13:50,450 --> 00:13:53,240
worry if this is a little bit abstract

00:13:51,529 --> 00:13:54,800
because in just a minute or two we'll

00:13:53,240 --> 00:13:56,600
start to get into some demos and look at

00:13:54,800 --> 00:13:59,240
some codes so things won't be so

00:13:56,600 --> 00:14:03,020
confusing but the reactor is this idea

00:13:59,240 --> 00:14:05,390
that on the master side remember again

00:14:03,020 --> 00:14:07,250
that we have this event bus right where

00:14:05,390 --> 00:14:08,720
masters are publishing events and

00:14:07,250 --> 00:14:12,380
minions are listening to those events

00:14:08,720 --> 00:14:16,370
and sending back returns so we might say

00:14:12,380 --> 00:14:17,870
for example okay all minions tell me

00:14:16,370 --> 00:14:20,779
what version of Python you have

00:14:17,870 --> 00:14:22,160
installed right they all get busy doing

00:14:20,779 --> 00:14:25,130
that and they send all these returns

00:14:22,160 --> 00:14:28,190
back to the master each of those returns

00:14:25,130 --> 00:14:31,100
or rather each event on this bus has

00:14:28,190 --> 00:14:32,959
both a tag and a data structure now what

00:14:31,100 --> 00:14:36,020
we can do with this is that we can

00:14:32,959 --> 00:14:38,750
actually configure the master so that it

00:14:36,020 --> 00:14:41,920
can listen for certain types of events

00:14:38,750 --> 00:14:45,529
and then it can react to those events

00:14:41,920 --> 00:14:47,660
accordingly right so it might say for

00:14:45,529 --> 00:14:50,950
example okay tell me about the version

00:14:47,660 --> 00:14:53,300
of Python right and any you know any

00:14:50,950 --> 00:14:57,110
reactor or any event that comes back

00:14:53,300 --> 00:14:59,240
right that says python 2 6 right then

00:14:57,110 --> 00:15:02,420
the master says up that's a problem

00:14:59,240 --> 00:15:05,360
right I'm gonna react to that by telling

00:15:02,420 --> 00:15:08,839
that minion to go out and upgrade to

00:15:05,360 --> 00:15:11,950
Python 3 or whatever it is right so as

00:15:08,839 --> 00:15:14,870
we right we can create this reactive

00:15:11,950 --> 00:15:16,880
infrastructure right and we can program

00:15:14,870 --> 00:15:19,209
against that and I think a much more

00:15:16,880 --> 00:15:21,480
compelling way than in like the typical

00:15:19,209 --> 00:15:23,760
procedural way of trying to

00:15:21,480 --> 00:15:26,790
you know create api's between services

00:15:23,760 --> 00:15:28,850
and trying to sort of procedurally right

00:15:26,790 --> 00:15:31,529
right out how all of that will look

00:15:28,850 --> 00:15:34,100
anyway we'll look at that in depth in

00:15:31,529 --> 00:15:37,260
just a minute here on the minion side

00:15:34,100 --> 00:15:39,480
there are three concepts that are really

00:15:37,260 --> 00:15:43,740
important for your first day working

00:15:39,480 --> 00:15:47,130
with salt the first of those is grains a

00:15:43,740 --> 00:15:51,329
grain in the salt ecosystem is simply a

00:15:47,130 --> 00:15:54,180
fact about a machine right the OS the IP

00:15:51,329 --> 00:15:57,000
address you can assign arbitrary facts

00:15:54,180 --> 00:15:59,910
to a system right there grains and what

00:15:57,000 --> 00:16:03,209
those grains allow you to do is from the

00:15:59,910 --> 00:16:06,600
master target machines intelligently

00:16:03,209 --> 00:16:09,510
right so for example you could have all

00:16:06,600 --> 00:16:12,870
of your machines in data center one have

00:16:09,510 --> 00:16:15,089
a grain that says dc1 and then when you

00:16:12,870 --> 00:16:19,350
want to upgrade all of your machines at

00:16:15,089 --> 00:16:21,930
dc1 its simple as saying ok salt target

00:16:19,350 --> 00:16:24,540
everything with the grain dc1 and do a

00:16:21,930 --> 00:16:26,550
package upgrade of this package and in a

00:16:24,540 --> 00:16:28,350
single command right your fleet of a

00:16:26,550 --> 00:16:30,149
thousand machines has done its package

00:16:28,350 --> 00:16:30,750
upgrade and you can go off to lunch easy

00:16:30,149 --> 00:16:34,790
as that

00:16:30,750 --> 00:16:36,930
the second and perhaps most critical

00:16:34,790 --> 00:16:41,519
component or set of components on the

00:16:36,930 --> 00:16:44,220
minion is called a module right modules

00:16:41,519 --> 00:16:48,930
are what do the work they're what is

00:16:44,220 --> 00:16:51,089
called by salt now what we wanted to do

00:16:48,930 --> 00:16:53,069
when we created salt salt as I've

00:16:51,089 --> 00:16:56,880
mentioned is written in Python is that

00:16:53,069 --> 00:16:59,069
we wanted salt to mirror Python the way

00:16:56,880 --> 00:17:02,810
people interact with Python and be as

00:16:59,069 --> 00:17:05,370
pythonic as it could possibly be and so

00:17:02,810 --> 00:17:08,069
modules themselves are actually

00:17:05,370 --> 00:17:09,660
literally Python modules right if you're

00:17:08,069 --> 00:17:12,360
not a Python programmer when I say

00:17:09,660 --> 00:17:15,449
module I basically mean a Python script

00:17:12,360 --> 00:17:18,150
right or a file written in Python and

00:17:15,449 --> 00:17:21,770
these Python modules simply have a set

00:17:18,150 --> 00:17:25,079
of functions which are inside them right

00:17:21,770 --> 00:17:27,209
which so you might have for example a

00:17:25,079 --> 00:17:30,150
package module and one of those

00:17:27,209 --> 00:17:33,419
functions might be a function literally

00:17:30,150 --> 00:17:34,860
just called install right and so as you

00:17:33,419 --> 00:17:36,630
can see here in the middle

00:17:34,860 --> 00:17:40,740
putting all of these concepts together

00:17:36,630 --> 00:17:43,380
this is the the basically the salt

00:17:40,740 --> 00:17:46,440
command line here and this would say

00:17:43,380 --> 00:17:50,460
salt star right so we're using basically

00:17:46,440 --> 00:17:52,830
shell globbing right run module dot

00:17:50,460 --> 00:17:54,660
function which corresponds to the module

00:17:52,830 --> 00:17:57,210
name and the Python function that is

00:17:54,660 --> 00:18:00,450
inside it and then any arguments that

00:17:57,210 --> 00:18:03,179
you wish to pass to this Python function

00:18:00,450 --> 00:18:07,429
that goes and that runs over message bus

00:18:03,179 --> 00:18:09,690
and then you are off to the races so

00:18:07,429 --> 00:18:12,000
like I said there are three main

00:18:09,690 --> 00:18:14,640
components of salt the first is remote

00:18:12,000 --> 00:18:19,080
execution we talked about that right in

00:18:14,640 --> 00:18:23,370
that model the minion accepts a request

00:18:19,080 --> 00:18:25,950
right in the in the 0 and Q world which

00:18:23,370 --> 00:18:27,990
is the agent based world these this is

00:18:25,950 --> 00:18:30,240
persistent but we can also do it in an

00:18:27,990 --> 00:18:32,160
agentless way let's move away from the

00:18:30,240 --> 00:18:34,290
slides just for a moment so we can get a

00:18:32,160 --> 00:18:36,900
little bit less abstract and actually

00:18:34,290 --> 00:18:39,480
look at how all of this works can

00:18:36,900 --> 00:18:50,450
everybody see this ok text size is cool

00:18:39,480 --> 00:18:53,450
bigger okay hang on better more okay

00:18:50,450 --> 00:18:56,610
better okay good

00:18:53,450 --> 00:19:01,260
so and you can see the bottom okay right

00:18:56,610 --> 00:19:04,200
okay so what I have here is I have on

00:19:01,260 --> 00:19:06,120
the top and I'm running these these both

00:19:04,200 --> 00:19:09,960
with debug logging I have the master on

00:19:06,120 --> 00:19:13,850
the top and I have the minion on the

00:19:09,960 --> 00:19:20,309
bottom okay and so if I say for example

00:19:13,850 --> 00:19:26,549
write salt star right test echo right

00:19:20,309 --> 00:19:32,250
hello all right oops what's not demo

00:19:26,549 --> 00:19:37,760
fail today we actually didn't fail that

00:19:32,250 --> 00:19:37,760
was cool that's trying

00:19:40,940 --> 00:20:06,120
we're half we got honor ah that's the

00:20:01,290 --> 00:20:11,580
problem I do know how to use computers

00:20:06,120 --> 00:20:13,860
don't worry okay right because does

00:20:11,580 --> 00:20:16,200
anybody know why that happened it's

00:20:13,860 --> 00:20:20,550
because like I briefly forgot how shells

00:20:16,200 --> 00:20:25,710
work okay right because the shell yeah

00:20:20,550 --> 00:20:31,710
okay cool not embarrassing at all all

00:20:25,710 --> 00:20:35,760
right so there we go to illustrate how

00:20:31,710 --> 00:20:39,390
something like this is mapped into salt

00:20:35,760 --> 00:20:43,500
itself I think it's good just to

00:20:39,390 --> 00:20:47,250
actually actually let's do this just to

00:20:43,500 --> 00:20:49,800
go look at some source code okay so if

00:20:47,250 --> 00:20:52,530
you download salts right this is the

00:20:49,800 --> 00:20:54,870
directory structure that you'll get okay

00:20:52,530 --> 00:20:58,230
if you go here to modules this is the

00:20:54,870 --> 00:21:07,140
list of execution modules and I just

00:20:58,230 --> 00:21:07,530
want to show you okay here we go all

00:21:07,140 --> 00:21:11,850
right

00:21:07,530 --> 00:21:13,920
echo text so you can see hopefully at

00:21:11,850 --> 00:21:16,010
this point how all of these concepts are

00:21:13,920 --> 00:21:20,250
starting to connect together right

00:21:16,010 --> 00:21:22,890
because what we did here is we ran salt

00:21:20,250 --> 00:21:25,440
and then I targeted the name of the

00:21:22,890 --> 00:21:29,520
minions that I wanted the command to run

00:21:25,440 --> 00:21:32,550
on then I gave it a test echo which said

00:21:29,520 --> 00:21:36,810
use the test module and then I said okay

00:21:32,550 --> 00:21:39,870
give it run the echo function and then I

00:21:36,810 --> 00:21:41,760
gave it an argument of hello and that

00:21:39,870 --> 00:21:44,730
went straight to here and in a very

00:21:41,760 --> 00:21:49,080
pythonic way we just ingested the

00:21:44,730 --> 00:21:51,510
argument and we returned it so if you're

00:21:49,080 --> 00:21:52,800
off if you do any programming at all or

00:21:51,510 --> 00:21:53,340
any system administration at all

00:21:52,800 --> 00:21:55,140
especially

00:21:53,340 --> 00:21:56,730
if it's in Python this should start to

00:21:55,140 --> 00:21:58,110
get really really exciting for you

00:21:56,730 --> 00:22:01,800
because you should be able to say at

00:21:58,110 --> 00:22:03,870
this point you know what I can manage

00:22:01,800 --> 00:22:06,870
all of my systems like this because all

00:22:03,870 --> 00:22:09,240
I have to do is write a little bit of

00:22:06,870 --> 00:22:11,760
Python write a single execution module

00:22:09,240 --> 00:22:14,190
to do the work that I want to do just

00:22:11,760 --> 00:22:16,770
drop it in it everywhere and I'm done

00:22:14,190 --> 00:22:22,580
right which I personally think is really

00:22:16,770 --> 00:22:24,780
really neat so let's jump back here okay

00:22:22,580 --> 00:22:27,420
so next we have the concept of

00:22:24,780 --> 00:22:32,250
configuration management so let's look

00:22:27,420 --> 00:22:35,790
at how that works in the salt ecosystem

00:22:32,250 --> 00:22:40,230
here so I'm gonna go ahead and clean up

00:22:35,790 --> 00:22:41,970
some terminal windows here okay so again

00:22:40,230 --> 00:22:45,290
configuration management don't know is

00:22:41,970 --> 00:22:47,490
the uses a fancy word right called

00:22:45,290 --> 00:22:53,580
idempotency right which simply means

00:22:47,490 --> 00:22:57,230
that when we tell a machine that we want

00:22:53,580 --> 00:22:59,970
it to be configured in some way the

00:22:57,230 --> 00:23:01,200
configuration management system will go

00:22:59,970 --> 00:23:04,590
oh okay

00:23:01,200 --> 00:23:06,570
no problem first I'm going to check to

00:23:04,590 --> 00:23:09,990
see if the machine is configured in that

00:23:06,570 --> 00:23:12,060
way if it is I will do nothing if it is

00:23:09,990 --> 00:23:14,400
not then I will figure out what needs to

00:23:12,060 --> 00:23:16,830
be done then I will do it then I will

00:23:14,400 --> 00:23:19,440
tell you what I did and then if you tell

00:23:16,830 --> 00:23:23,100
me to do it again I won't do it again

00:23:19,440 --> 00:23:27,450
because I did it the first time right so

00:23:23,100 --> 00:23:31,200
the way that we create those intended

00:23:27,450 --> 00:23:38,150
States is by writing what we call SLS

00:23:31,200 --> 00:23:42,270
files so let's go look at something okay

00:23:38,150 --> 00:23:45,350
okay let's start out with as you can see

00:23:42,270 --> 00:23:48,600
these are just written in gamal right

00:23:45,350 --> 00:23:51,060
let me give you a really brief tour of e

00:23:48,600 --> 00:23:53,550
amel because for people who are not

00:23:51,060 --> 00:23:55,950
familiar with the animal or can't find

00:23:53,550 --> 00:24:00,390
this a little bit daunting the important

00:23:55,950 --> 00:24:03,510
thing here is that yeah Moe is really

00:24:00,390 --> 00:24:05,310
just dictionaries and lists right so if

00:24:03,510 --> 00:24:06,750
you've dealt with dictionaries and lists

00:24:05,310 --> 00:24:08,940
at all yeah

00:24:06,750 --> 00:24:10,530
I can explain you animal to you in 30

00:24:08,940 --> 00:24:14,280
seconds so here's my attempt to do that

00:24:10,530 --> 00:24:18,540
if you see a colon in Y Amal you are

00:24:14,280 --> 00:24:20,040
looking at a dictionary okay where the

00:24:18,540 --> 00:24:22,140
thing on the left side of the colon is

00:24:20,040 --> 00:24:25,710
the key and the thing on the right side

00:24:22,140 --> 00:24:28,670
of the colon is the value if you are if

00:24:25,710 --> 00:24:32,220
you see a - you are looking at a list

00:24:28,670 --> 00:24:33,180
all right if you see something like this

00:24:32,220 --> 00:24:36,360
all right

00:24:33,180 --> 00:24:39,900
where you see a - and a colon then you

00:24:36,360 --> 00:24:41,070
are looking at a list of dictionaries

00:24:39,900 --> 00:24:43,230
okay

00:24:41,070 --> 00:24:46,320
that's yellow in 30 seconds all right

00:24:43,230 --> 00:24:49,560
the very last thing is that indentation

00:24:46,320 --> 00:24:52,230
matters in Y amel salt uses a subset of

00:24:49,560 --> 00:24:57,420
the full amel specification thank

00:24:52,230 --> 00:24:59,850
goodness and so if you if you want to

00:24:57,420 --> 00:25:00,480
express that something is a set of

00:24:59,850 --> 00:25:03,030
something else

00:25:00,480 --> 00:25:04,590
you simply indent again all right so

00:25:03,030 --> 00:25:09,810
yeah well it took me like 45 seconds but

00:25:04,590 --> 00:25:12,810
not too bad so insult right to write out

00:25:09,810 --> 00:25:16,290
a state we start out with a top-level

00:25:12,810 --> 00:25:18,630
key that is simply arbitrary text that

00:25:16,290 --> 00:25:20,930
describes the state itself here I've

00:25:18,630 --> 00:25:26,430
called this one right out a secret file

00:25:20,930 --> 00:25:29,940
okay the second line right or the value

00:25:26,430 --> 00:25:34,730
for that top-level key is the state that

00:25:29,940 --> 00:25:38,310
we wish to run okay so when I say that

00:25:34,730 --> 00:25:42,030
right first

00:25:38,310 --> 00:25:43,770
oops sorry okay we saw here all right

00:25:42,030 --> 00:25:46,140
that we had this list of modules these

00:25:43,770 --> 00:25:50,520
execution modules that can do remote

00:25:46,140 --> 00:25:53,220
execution we also have states and each

00:25:50,520 --> 00:25:57,170
one of these states interact with the

00:25:53,220 --> 00:26:00,150
configuration management system okay and

00:25:57,170 --> 00:26:05,310
they can well configure the state of a

00:26:00,150 --> 00:26:09,210
system right and I got lost there we go

00:26:05,310 --> 00:26:11,100
okay so the state that I want to do here

00:26:09,210 --> 00:26:13,440
is I want to use a state that ships with

00:26:11,100 --> 00:26:15,690
salt which is called file dot managed

00:26:13,440 --> 00:26:17,070
right exactly the same syntax if you

00:26:15,690 --> 00:26:18,570
looked in the state's directory you

00:26:17,070 --> 00:26:19,299
would see a state called file and you

00:26:18,570 --> 00:26:22,509
would see

00:26:19,299 --> 00:26:23,980
a function called managed and that

00:26:22,509 --> 00:26:25,929
function would take a couple of

00:26:23,980 --> 00:26:27,970
arguments one of those would be the

00:26:25,929 --> 00:26:30,789
source of the file that we want to write

00:26:27,970 --> 00:26:33,279
out to our machines the second one would

00:26:30,789 --> 00:26:34,570
be the name where we want to write it to

00:26:33,279 --> 00:26:37,509
and of course this is all documented

00:26:34,570 --> 00:26:40,179
both in the public documentation and in

00:26:37,509 --> 00:26:43,239
the source code for the state itself the

00:26:40,179 --> 00:26:46,179
third thing is something that we want to

00:26:43,239 --> 00:26:48,730
point out which is that salt both in its

00:26:46,179 --> 00:26:53,049
States and in files that it can write

00:26:48,730 --> 00:26:55,149
out supports templating through a bunch

00:26:53,049 --> 00:26:57,879
of different template in languages but

00:26:55,149 --> 00:26:59,679
the most common one is called Jinja if

00:26:57,879 --> 00:27:01,269
you know if you've ever been a Django

00:26:59,679 --> 00:27:05,259
programmer you know all about ginger

00:27:01,269 --> 00:27:07,869
right okay so this should make sense

00:27:05,259 --> 00:27:09,879
what this says is okay this state says

00:27:07,869 --> 00:27:12,190
we're gonna write out something that is

00:27:09,879 --> 00:27:15,129
templatized the template is going to be

00:27:12,190 --> 00:27:17,139
stored on the master in this location

00:27:15,129 --> 00:27:18,940
called secret file and the place that we

00:27:17,139 --> 00:27:21,369
want to write it out to is going to be

00:27:18,940 --> 00:27:23,049
slash temp /foo so the next thing we

00:27:21,369 --> 00:27:26,830
should do is go okay well let's look at

00:27:23,049 --> 00:27:30,570
what's in secret file all right okay

00:27:26,830 --> 00:27:33,100
here it is okay the secret is going is

00:27:30,570 --> 00:27:36,100
now this looks kind of weird but all

00:27:33,100 --> 00:27:38,739
this is is a little bit of ginger again

00:27:36,100 --> 00:27:41,590
some templates ization and this says

00:27:38,739 --> 00:27:44,440
piller get remember we described the

00:27:41,590 --> 00:27:46,629
pillar the pillar was this keep secrets

00:27:44,440 --> 00:27:49,029
key value store that was on the master

00:27:46,629 --> 00:27:52,330
right this again should look very

00:27:49,029 --> 00:27:55,119
pythonic to you pillar get the value for

00:27:52,330 --> 00:27:57,070
the key foo so when we templatized this

00:27:55,119 --> 00:27:58,600
file when we write it out imagine this

00:27:57,070 --> 00:28:02,320
was a configuration file or what have

00:27:58,600 --> 00:28:05,710
you then we would write out whatever the

00:28:02,320 --> 00:28:09,879
secret is for the key foo so the last

00:28:05,710 --> 00:28:14,320
piece of this mystery write is what's in

00:28:09,879 --> 00:28:16,029
the pillar all right okay what's in this

00:28:14,320 --> 00:28:18,369
pillar here I skipped over I glossed

00:28:16,029 --> 00:28:19,509
over some of that but we're a little bit

00:28:18,369 --> 00:28:26,139
limited on time so that's the only

00:28:19,509 --> 00:28:28,529
reason why foo bar right okay so let's

00:28:26,139 --> 00:28:32,200
see

00:28:28,529 --> 00:28:33,419
okay so this is called demo alright as

00:28:32,200 --> 00:28:39,760
you recall

00:28:33,419 --> 00:28:41,740
so let's Loops go over here and what

00:28:39,760 --> 00:28:44,650
we're going to the remote execution

00:28:41,740 --> 00:28:48,250
command we're going to run in this case

00:28:44,650 --> 00:28:50,740
is called state SLS right this is

00:28:48,250 --> 00:28:52,480
perhaps the most confusing part for

00:28:50,740 --> 00:28:56,529
people who are starting with salt their

00:28:52,480 --> 00:29:01,210
first day but state is an execution

00:28:56,529 --> 00:29:03,190
module right because all calls via the

00:29:01,210 --> 00:29:05,710
salt command line are to execution

00:29:03,190 --> 00:29:09,669
modules this one is called state the

00:29:05,710 --> 00:29:12,850
function is called SLS and what we pass

00:29:09,669 --> 00:29:15,250
to it is the name of the SLS file that

00:29:12,850 --> 00:29:16,570
we just wrote out that'll take you two

00:29:15,250 --> 00:29:18,039
or three times to kind of get in your

00:29:16,570 --> 00:29:21,220
head and then it'll make perfect sense

00:29:18,039 --> 00:29:24,460
so we're saying OK on the machine silver

00:29:21,220 --> 00:29:27,809
write enforce the state called demo

00:29:24,460 --> 00:29:30,520
right so we go ahead and we do that

00:29:27,809 --> 00:29:32,440
right and there we go

00:29:30,520 --> 00:29:38,350
really really quickly a little under 50

00:29:32,440 --> 00:29:39,880
milliseconds alright oops we can see we

00:29:38,350 --> 00:29:42,549
could see the return that happened right

00:29:39,880 --> 00:29:43,870
there right write out a secret file the

00:29:42,549 --> 00:29:45,580
function that we call this file dot

00:29:43,870 --> 00:29:53,250
manage what we wrote out was temp dot

00:29:45,580 --> 00:29:55,860
foo right and there's dot foo okay so

00:29:53,250 --> 00:29:58,960
that is a really really basic

00:29:55,860 --> 00:30:04,649
run-through of how the state system

00:29:58,960 --> 00:30:04,649
operates as you can see if you whoops

00:30:05,070 --> 00:30:14,260
okay I'll make this even bigger here

00:30:07,720 --> 00:30:16,149
yeah yeah maybe it won't what I was

00:30:14,260 --> 00:30:19,899
gonna say is as you can see there are

00:30:16,149 --> 00:30:24,070
quite a few states here right let's do

00:30:19,899 --> 00:30:27,190
one for example that says okay I want to

00:30:24,070 --> 00:30:30,700
install a package on all of my machines

00:30:27,190 --> 00:30:36,240
right you might look and go ok well I'm

00:30:30,700 --> 00:30:36,240
just going to use the package state and

00:30:38,670 --> 00:30:46,309
[Music]

00:30:40,389 --> 00:30:48,979
okay come on install them a package all

00:30:46,309 --> 00:30:51,679
right we're gonna call the package

00:30:48,979 --> 00:30:53,659
install state and I just happened to

00:30:51,679 --> 00:30:55,940
know offhand although you could look in

00:30:53,659 --> 00:30:58,940
the documentation all right

00:30:55,940 --> 00:31:09,999
that it takes an argument called

00:30:58,940 --> 00:31:09,999
name all right so easy as that and then

00:31:11,739 --> 00:31:23,090
okay what is that not what I called it I

00:31:16,220 --> 00:31:27,279
called it package and there we go and

00:31:23,090 --> 00:31:27,279
you can see right whoa

00:31:27,729 --> 00:31:40,269
package not install is not it oh okay

00:31:30,679 --> 00:31:40,269
because I type on it did it right and

00:31:45,429 --> 00:31:50,960
there we go you can see now this is

00:31:48,129 --> 00:31:52,519
sadly not a Linux machine but it's going

00:31:50,960 --> 00:31:54,649
out and it's using brew and it's it's

00:31:52,519 --> 00:31:57,019
figuring out how to do that the nice

00:31:54,649 --> 00:31:59,989
thing there is if you don't manage a

00:31:57,019 --> 00:32:03,340
heterogeneous infrastructure and you

00:31:59,989 --> 00:32:07,399
know three of your machines happen to be

00:32:03,340 --> 00:32:09,139
something other than openSUSE right you

00:32:07,399 --> 00:32:10,849
don't have to figure out the difference

00:32:09,139 --> 00:32:12,739
you can just run packaged on install and

00:32:10,849 --> 00:32:15,499
salts going to figure out under the hood

00:32:12,739 --> 00:32:18,409
how in a declarative way how to actually

00:32:15,499 --> 00:32:28,820
do that package installation for you all

00:32:18,409 --> 00:32:30,559
right okay so as you can see you can

00:32:28,820 --> 00:32:33,950
actually take this a really really long

00:32:30,559 --> 00:32:36,440
way you can use this to control files on

00:32:33,950 --> 00:32:38,749
your operating system you can use it to

00:32:36,440 --> 00:32:40,669
ensure that services might be running or

00:32:38,749 --> 00:32:42,320
that they might not be running you can

00:32:40,669 --> 00:32:44,749
use it to ensure that things might be

00:32:42,320 --> 00:32:47,419
installed or not be installed right what

00:32:44,749 --> 00:32:48,350
have you because I'm just about out of

00:32:47,419 --> 00:32:53,000
time

00:32:48,350 --> 00:32:56,120
I did want to show you one thing can you

00:32:53,000 --> 00:32:59,480
see that or is that way too small way

00:32:56,120 --> 00:33:00,410
too small okay so I for those who want

00:32:59,480 --> 00:33:02,960
to see it I will show it to you

00:33:00,410 --> 00:33:05,000
afterwards there was some Susi specific

00:33:02,960 --> 00:33:08,090
stuff but obviously it's on this VM and

00:33:05,000 --> 00:33:10,549
it's a little bit too small so with that

00:33:08,090 --> 00:33:13,580
that's a very basic run-through of what

00:33:10,549 --> 00:33:16,280
your first steps with salt might look

00:33:13,580 --> 00:33:19,370
like in order to run some remote

00:33:16,280 --> 00:33:21,380
execution commands and to use the

00:33:19,370 --> 00:33:22,909
configuration management system if

00:33:21,380 --> 00:33:25,730
people have specific questions about

00:33:22,909 --> 00:33:28,309
salt I'm happy to take those or I'm

00:33:25,730 --> 00:33:30,740
happy to demo stuff for people outside

00:33:28,309 --> 00:33:32,000
in the hallway after we're done so with

00:33:30,740 --> 00:33:34,900
that thanks very much if there are

00:33:32,000 --> 00:33:34,900
questions I'll take those too

00:33:43,760 --> 00:33:45,820

YouTube URL: https://www.youtube.com/watch?v=7jVpXq7P3rw


