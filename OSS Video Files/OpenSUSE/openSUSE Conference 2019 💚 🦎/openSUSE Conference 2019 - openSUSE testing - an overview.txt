Title: openSUSE Conference 2019 - openSUSE testing - an overview
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2396-opensuse-testing-an-overview



How is software within the openSUSE ecosystem tested? What kind of tests exist? Who is doing what?

This talk will try to present an overview of how "testing" is done for software developed in the openSUSE ecosystem. The workflow of software contributions to the openSUSE distributions will be shown from testing perspective from upstream source code repos to feedback from users in the released products. Used tools will be mentioned, the testing approaches as well as the people involved. The relation to SLE testing will be described. As this "overview" will not be able to cover all approaches used by the community feedback by the audience in the Q&A part of the talk will be appreciated. Of course, openQA will be included but it is certainly not the only solution to be mentioned ;)

How is software within the openSUSE ecosystem tested? What kind of tests exist? Who is doing what?

This talk will try to present an overview of how "testing" is done for software developed in the openSUSE ecosystem. The workflow of software contributions to the openSUSE distributions will be shown from testing perspective from upstream source code repos to feedback from users in the released products. Used tools will be mentioned, the testing approaches as well as the people involved. The relation to SLE testing will be described. As this "overview" will not be able to cover all approaches used by the community feedback by the audience in the Q&A part of the talk will be appreciated. Of course, openQA will be included but it is certainly not the only solution to be mentioned ;)

Oliver Kurz
Captions: 
	00:00:06,950 --> 00:00:12,740
good afternoon everyone

00:00:09,380 --> 00:00:15,539
so my presentation will be about

00:00:12,740 --> 00:00:21,240
openSUSE testing and I'm trying to give

00:00:15,539 --> 00:00:29,150
an overview and for this let me check

00:00:21,240 --> 00:00:29,150
something first I have to test something

00:00:49,810 --> 00:00:55,490
the scope should be to answer the

00:00:52,790 --> 00:00:58,850
question how is software within the

00:00:55,490 --> 00:01:00,800
opens who's the ecosystem tested what

00:00:58,850 --> 00:01:05,540
kind of tests exist

00:01:00,800 --> 00:01:07,550
who is doing what how is it done and

00:01:05,540 --> 00:01:12,170
then I would like to come to some

00:01:07,550 --> 00:01:14,570
challenges in the end I will try to use

00:01:12,170 --> 00:01:18,710
that illustration of the so called test

00:01:14,570 --> 00:01:20,450
automation pyramid to guide through this

00:01:18,710 --> 00:01:21,560
so we will go through this from the

00:01:20,450 --> 00:01:24,979
bottom to the top

00:01:21,560 --> 00:01:28,430
it starts with upstream sori protests

00:01:24,979 --> 00:01:30,920
wherever all the software that we are

00:01:28,430 --> 00:01:33,170
talking about lifts this is very start

00:01:30,920 --> 00:01:36,070
with and then we come to package and

00:01:33,170 --> 00:01:38,780
project tests or this means for all the

00:01:36,070 --> 00:01:42,350
tens of thousands of packages that we

00:01:38,780 --> 00:01:45,020
have in the distributions where we can

00:01:42,350 --> 00:01:48,080
also conduct test system level tests and

00:01:45,020 --> 00:01:50,479
this is where the pyramid gets more

00:01:48,080 --> 00:01:52,369
narrow so we can say that we have by

00:01:50,479 --> 00:01:54,410
definition we have less test where we

00:01:52,369 --> 00:01:57,110
combine all of that but they have a

00:01:54,410 --> 00:01:59,869
broader impact on the whole system the

00:01:57,110 --> 00:02:03,440
whole operating system and their GUI

00:01:59,869 --> 00:02:06,740
acceptance test and also on the top of

00:02:03,440 --> 00:02:08,959
the automation pyramid is meaning

00:02:06,740 --> 00:02:11,680
talking about automated tests this is

00:02:08,959 --> 00:02:14,420
now where we reach this cloudy area of

00:02:11,680 --> 00:02:18,410
exploratory beta testing so something

00:02:14,420 --> 00:02:20,990
that by definition can not be running in

00:02:18,410 --> 00:02:25,069
automated tests but let's start from the

00:02:20,990 --> 00:02:30,280
bottom for the upstream source repo

00:02:25,069 --> 00:02:32,840
tests this is well something that

00:02:30,280 --> 00:02:35,990
everyone should do right everyone that

00:02:32,840 --> 00:02:40,010
is doing software he has we have some

00:02:35,990 --> 00:02:43,130
source code repository and they are what

00:02:40,010 --> 00:02:45,620
we commonly see you can see something

00:02:43,130 --> 00:02:47,450
like on github some projects where we

00:02:45,620 --> 00:02:51,200
have this nice patches and we have a

00:02:47,450 --> 00:02:54,200
green or red showing how this this unit

00:02:51,200 --> 00:02:57,010
tests are running top rights that's a

00:02:54,200 --> 00:02:59,900
screenshot from from Travis where we see

00:02:57,010 --> 00:03:01,640
checks that we even can conduct on pull

00:02:59,900 --> 00:03:03,530
requests before merging something and

00:03:01,640 --> 00:03:05,390
all this up

00:03:03,530 --> 00:03:06,980
sauce reporters they provide a baseline

00:03:05,390 --> 00:03:09,530
for all the downstream tests all the

00:03:06,980 --> 00:03:13,940
tests that come later this is very start

00:03:09,530 --> 00:03:16,280
with commonly it's hard to cover a

00:03:13,940 --> 00:03:18,560
distribution integration when we are

00:03:16,280 --> 00:03:20,690
talking about source code proposed to

00:03:18,560 --> 00:03:23,480
see something like on on github or other

00:03:20,690 --> 00:03:25,459
version control systems where we do not

00:03:23,480 --> 00:03:28,239
yet talk about a Linux distribution

00:03:25,459 --> 00:03:30,950
mainly but something about how does my

00:03:28,239 --> 00:03:35,630
my software work in whatever environment

00:03:30,950 --> 00:03:37,550
I'm using for development now

00:03:35,630 --> 00:03:40,360
who is doing that well this is the

00:03:37,550 --> 00:03:42,500
upstream communities that could be

00:03:40,360 --> 00:03:44,390
single persons that could be bigger

00:03:42,500 --> 00:03:48,470
communities that have main may be

00:03:44,390 --> 00:03:50,600
selected some kind of target operating

00:03:48,470 --> 00:03:51,980
system as their main target it could be

00:03:50,600 --> 00:03:54,680
also souza

00:03:51,980 --> 00:03:58,100
or openSUSE developers that develop

00:03:54,680 --> 00:04:00,080
software in that stage and how that is

00:03:58,100 --> 00:04:03,709
done there's very much ecosystem

00:04:00,080 --> 00:04:06,650
dependent so for example when you're

00:04:03,709 --> 00:04:08,600
when your program is mainly in Python

00:04:06,650 --> 00:04:11,630
and you're using something like Python

00:04:08,600 --> 00:04:13,640
unit tests or pointers if it's in in

00:04:11,630 --> 00:04:16,729
Ruby then there are certain frameworks

00:04:13,640 --> 00:04:20,630
by you say like the state of industry

00:04:16,729 --> 00:04:23,050
which we select and this defines mainly

00:04:20,630 --> 00:04:27,140
how you run these tests on that level

00:04:23,050 --> 00:04:30,140
well why this is done this is the way to

00:04:27,140 --> 00:04:31,910
get the fastest feedback because we are

00:04:30,140 --> 00:04:35,530
talking about developers that on the

00:04:31,910 --> 00:04:38,660
machine run some code and want to test

00:04:35,530 --> 00:04:40,220
does it work what I want to do here so

00:04:38,660 --> 00:04:42,140
it's something that should be available

00:04:40,220 --> 00:04:46,010
to the developers where the fastest

00:04:42,140 --> 00:04:48,830
feedback as possible meaning no not not

00:04:46,010 --> 00:04:51,200
too many steps in between it's

00:04:48,830 --> 00:04:53,300
independent of distribution well I would

00:04:51,200 --> 00:04:55,550
say kinda because commonly you need to

00:04:53,300 --> 00:04:57,590
select something as your operating

00:04:55,550 --> 00:05:02,090
system on which you develop and based on

00:04:57,590 --> 00:05:05,900
that you're running to certain tests for

00:05:02,090 --> 00:05:08,780
example if I run openSUSE leap 15.1 then

00:05:05,900 --> 00:05:10,910
I develop on that the question is does

00:05:08,780 --> 00:05:13,220
it still work on openSUSE leap for the

00:05:10,910 --> 00:05:15,710
two to three which is to support it so

00:05:13,220 --> 00:05:16,610
just some question that is yet to be

00:05:15,710 --> 00:05:19,639
answered and probably

00:05:16,610 --> 00:05:24,110
not on that level so it can be simple

00:05:19,639 --> 00:05:26,060
could be like Python PI test and talks

00:05:24,110 --> 00:05:28,520
or it can be more so focused

00:05:26,060 --> 00:05:32,389
sophisticated this is showing an example

00:05:28,520 --> 00:05:34,909
from the Travis test results on open QA

00:05:32,389 --> 00:05:37,729
itself to open a software where we have

00:05:34,909 --> 00:05:41,810
some unit tests we have some web-based

00:05:37,729 --> 00:05:44,180
UI tests so we are checking the UI which

00:05:41,810 --> 00:05:48,340
is mainly the web interface for pink

00:05:44,180 --> 00:05:50,689
usually do that for that we are using

00:05:48,340 --> 00:05:52,039
containers we are using virtual machines

00:05:50,689 --> 00:05:55,129
something which you might have heard

00:05:52,039 --> 00:05:57,770
about in other talks and is also be used

00:05:55,129 --> 00:06:00,620
for automated administration what you

00:05:57,770 --> 00:06:02,300
can see there and in the bottom left is

00:06:00,620 --> 00:06:04,069
there it is multiple check marks it

00:06:02,300 --> 00:06:06,500
check marks tensor for a certain set of

00:06:04,069 --> 00:06:07,969
tests there are some unit tests there's

00:06:06,500 --> 00:06:10,340
some integration tests there's some UI

00:06:07,969 --> 00:06:13,039
tests but they also jobs which for

00:06:10,340 --> 00:06:14,750
example publish the documentation which

00:06:13,039 --> 00:06:16,909
is generated from the source code

00:06:14,750 --> 00:06:19,969
repositories so something which you can

00:06:16,909 --> 00:06:24,469
also use which you can which you can use

00:06:19,969 --> 00:06:27,349
Travis for or CI systems ok so this

00:06:24,469 --> 00:06:29,240
level for source code repositories the

00:06:27,349 --> 00:06:31,729
next level and we are talking about

00:06:29,240 --> 00:06:35,919
openSUSE as a distribution is where we

00:06:31,729 --> 00:06:40,669
come to the packages that mainly means

00:06:35,919 --> 00:06:43,129
in OBS we have packages where we get the

00:06:40,669 --> 00:06:47,089
source code from the upstream source

00:06:43,129 --> 00:06:49,069
code repositories and I would call that

00:06:47,089 --> 00:06:51,169
the foundation of distribution building

00:06:49,069 --> 00:06:52,879
because we want to have a package for

00:06:51,169 --> 00:06:54,529
everything that ends up in the

00:06:52,879 --> 00:06:56,930
distribution of course there are other

00:06:54,529 --> 00:07:01,039
also other possibilities doesn't

00:06:56,930 --> 00:07:03,229
necessarily have to be standard RPM

00:07:01,039 --> 00:07:05,870
built package where you end up with a

00:07:03,229 --> 00:07:09,490
binary package it could also be on

00:07:05,870 --> 00:07:12,889
container itself from flat back image or

00:07:09,490 --> 00:07:16,639
just an archive of something which you

00:07:12,889 --> 00:07:20,120
don't even need to build further now I

00:07:16,639 --> 00:07:23,089
would call the building process also a

00:07:20,120 --> 00:07:25,610
test so you are on OBS that makes it

00:07:23,089 --> 00:07:28,849
pretty easy you build against multiple

00:07:25,610 --> 00:07:30,050
projects against multiple products in in

00:07:28,849 --> 00:07:33,440
various versions

00:07:30,050 --> 00:07:37,340
various architectures and by that you're

00:07:33,440 --> 00:07:39,590
testing can I built that package it

00:07:37,340 --> 00:07:41,840
might fail because of missing

00:07:39,590 --> 00:07:43,639
dependencies something which is not

00:07:41,840 --> 00:07:45,830
necessarily something that needs to

00:07:43,639 --> 00:07:48,919
change in your own source code it might

00:07:45,830 --> 00:07:50,840
also be that you're relying on certain

00:07:48,919 --> 00:07:53,389
features which is only available in

00:07:50,840 --> 00:07:55,430
certain versions of dependencies or base

00:07:53,389 --> 00:07:56,990
layers which is maybe not provided on an

00:07:55,430 --> 00:08:01,520
older version or maybe a more recent

00:07:56,990 --> 00:08:03,139
version already behaves different and if

00:08:01,520 --> 00:08:06,139
we are talking about packaging then

00:08:03,139 --> 00:08:09,129
commonly this is done using rpm based on

00:08:06,139 --> 00:08:11,629
spec files and in spec files there is

00:08:09,129 --> 00:08:14,240
this building ruled as a rule for

00:08:11,629 --> 00:08:15,289
preparation there's also one one rule

00:08:14,240 --> 00:08:17,990
which you can use which is called

00:08:15,289 --> 00:08:22,069
percentage check and if you use that

00:08:17,990 --> 00:08:25,039
then you can run the tests that maybe

00:08:22,069 --> 00:08:27,440
you have already ran on the source code

00:08:25,039 --> 00:08:30,379
repository level you can also do that

00:08:27,440 --> 00:08:31,370
within OBS and the advantage is that you

00:08:30,379 --> 00:08:33,169
do that for all the different

00:08:31,370 --> 00:08:37,719
combinations which I've mentioned

00:08:33,169 --> 00:08:41,209
earlier now I would like to present one

00:08:37,719 --> 00:08:43,339
slightly alternative approach on top

00:08:41,209 --> 00:08:47,149
which is what I would call the multi

00:08:43,339 --> 00:08:49,720
build package self test the question is

00:08:47,149 --> 00:08:54,440
what if the upstream tests are passing

00:08:49,720 --> 00:08:56,149
but your package is broken or what if

00:08:54,440 --> 00:09:00,260
because that had been also mentioned

00:08:56,149 --> 00:09:02,270
multiple times in different talks and I

00:09:00,260 --> 00:09:05,149
will come to that what is open gate but

00:09:02,270 --> 00:09:06,770
what if open case system tests are too

00:09:05,149 --> 00:09:08,420
late or too brought because all the

00:09:06,770 --> 00:09:10,339
other tests they come later they take

00:09:08,420 --> 00:09:13,279
longer it takes longer for us to get the

00:09:10,339 --> 00:09:18,250
information and as an example project

00:09:13,279 --> 00:09:24,199
which for now I will not show on obvious

00:09:18,250 --> 00:09:28,459
but what it does is in OBS projects it

00:09:24,199 --> 00:09:31,540
uses two files so what you need is two

00:09:28,459 --> 00:09:34,699
files to define that you want to run

00:09:31,540 --> 00:09:36,500
second to the building step of building

00:09:34,699 --> 00:09:40,520
a package you want to run some tests

00:09:36,500 --> 00:09:43,550
which are in another environment not to

00:09:40,520 --> 00:09:45,410
build environment but another

00:09:43,550 --> 00:09:47,420
dedicated independent environment where

00:09:45,410 --> 00:09:50,270
you can test does my package actually

00:09:47,420 --> 00:09:53,480
install how does it work if I call it

00:09:50,270 --> 00:09:54,200
very trivial example my script - - help

00:09:53,480 --> 00:09:57,410
or something

00:09:54,200 --> 00:10:00,080
there - Falls underscore multi belt

00:09:57,410 --> 00:10:02,510
there you can define a variant so you're

00:10:00,080 --> 00:10:05,660
defining next to the normal variant of

00:10:02,510 --> 00:10:08,750
your package the the test variant and

00:10:05,660 --> 00:10:11,060
then there's another one which is in the

00:10:08,750 --> 00:10:17,270
spec file itself so there you can see

00:10:11,060 --> 00:10:18,950
the this name colon and then the

00:10:17,270 --> 00:10:20,870
definitions this is what you commonly do

00:10:18,950 --> 00:10:22,100
when you build a package the special

00:10:20,870 --> 00:10:24,860
part is something with this

00:10:22,100 --> 00:10:27,320
if test and something so let's talk

00:10:24,860 --> 00:10:31,360
about this block here what you do here

00:10:27,320 --> 00:10:35,180
in a test environment that the package

00:10:31,360 --> 00:10:39,680
the test package requires on the build

00:10:35,180 --> 00:10:42,530
package by doing that when you kind of

00:10:39,680 --> 00:10:45,170
built this test package you're trying to

00:10:42,530 --> 00:10:46,970
resolve all the dependencies but you're

00:10:45,170 --> 00:10:49,070
trying to resolve the runtime

00:10:46,970 --> 00:10:50,840
dependencies which you would need now if

00:10:49,070 --> 00:10:52,880
you would conduct only a test within the

00:10:50,840 --> 00:10:54,380
built environment you would not check

00:10:52,880 --> 00:10:57,140
for the runtime dependencies but only

00:10:54,380 --> 00:11:02,000
for built on dependencies this single

00:10:57,140 --> 00:11:03,890
line already can show you what you might

00:11:02,000 --> 00:11:05,210
be missing regarding the runtime

00:11:03,890 --> 00:11:09,830
dependencies which i forgot to mention

00:11:05,210 --> 00:11:11,840
in spec form and the second part later

00:11:09,830 --> 00:11:14,780
down here so there's an example from

00:11:11,840 --> 00:11:18,170
server application and what you're doing

00:11:14,780 --> 00:11:20,150
here is you're calling commands the

00:11:18,170 --> 00:11:21,980
commands which you would install by your

00:11:20,150 --> 00:11:24,380
package which you're building and by

00:11:21,980 --> 00:11:26,810
doing that of course within the limits

00:11:24,380 --> 00:11:28,670
of the environment in case of phobias

00:11:26,810 --> 00:11:31,730
for example there is no external Network

00:11:28,670 --> 00:11:35,000
access but still you can run a local

00:11:31,730 --> 00:11:37,700
host server and try to register against

00:11:35,000 --> 00:11:40,760
that server locally that all happens

00:11:37,700 --> 00:11:43,870
within OBS and if you have seen OBS

00:11:40,760 --> 00:11:46,580
built results already in before this is

00:11:43,870 --> 00:11:48,590
resembling the same it's just that you

00:11:46,580 --> 00:11:51,980
have a second half to it so normally you

00:11:48,590 --> 00:11:54,360
have a package I assume many people have

00:11:51,980 --> 00:11:57,449
seen as a view similar to that

00:11:54,360 --> 00:12:00,839
you have multiple repositories you have

00:11:57,449 --> 00:12:03,029
multiple variants for the different

00:12:00,839 --> 00:12:05,670
architectures and you see that all the

00:12:03,029 --> 00:12:08,579
packages succeeds to build that means we

00:12:05,670 --> 00:12:13,019
have a package for all of these projects

00:12:08,579 --> 00:12:14,489
however the test package which is this

00:12:13,019 --> 00:12:17,069
multi built variant which we showed it

00:12:14,489 --> 00:12:19,139
before shows that there are some

00:12:17,069 --> 00:12:22,049
problems for example on leap 42 that

00:12:19,139 --> 00:12:23,999
through it shows unresolvable now what

00:12:22,049 --> 00:12:25,739
does that mean it means that we could

00:12:23,999 --> 00:12:27,239
build a package we could find all the

00:12:25,739 --> 00:12:29,189
dependencies that we need to build the

00:12:27,239 --> 00:12:31,949
package this is why it succeeded to

00:12:29,189 --> 00:12:33,809
build but afterwards when checking for

00:12:31,949 --> 00:12:36,329
the runtime dependencies we can see that

00:12:33,809 --> 00:12:38,879
leap 42 to 3 doesn't offer all the

00:12:36,329 --> 00:12:41,129
dependencies which we would need this is

00:12:38,879 --> 00:12:45,509
why I have put in another variant of the

00:12:41,129 --> 00:12:47,579
of the repository which is the last line

00:12:45,509 --> 00:12:49,559
where I am adding an additional

00:12:47,579 --> 00:12:51,689
repository I'm saying like okay then if

00:12:49,559 --> 00:12:53,610
that dependency is not there let's try

00:12:51,689 --> 00:12:55,230
to add another development project which

00:12:53,610 --> 00:12:59,730
should provide state dependent package

00:12:55,230 --> 00:13:01,529
and then you see that it can install the

00:12:59,730 --> 00:13:02,970
package but then it failed so in the

00:13:01,529 --> 00:13:04,860
latest step when I was trying to

00:13:02,970 --> 00:13:07,049
register in my own server I can see like

00:13:04,860 --> 00:13:09,299
aha so this doesn't work so something is

00:13:07,049 --> 00:13:15,689
about diversions of the dependencies

00:13:09,299 --> 00:13:18,899
which is now different now that adds

00:13:15,689 --> 00:13:23,160
quite some boilerplate code in the spec

00:13:18,899 --> 00:13:26,339
file it's not actually nice or tidy

00:13:23,160 --> 00:13:29,279
because kind of abusing this instrument

00:13:26,339 --> 00:13:30,899
to build packages for testing there's

00:13:29,279 --> 00:13:32,519
only one suggestion which I can give is

00:13:30,899 --> 00:13:34,019
to use a separate spec file which you

00:13:32,519 --> 00:13:35,639
can also do so if you don't want to

00:13:34,019 --> 00:13:37,980
intermingle this all you can have

00:13:35,639 --> 00:13:41,639
multiple spec files per package and you

00:13:37,980 --> 00:13:45,179
would have a test package which is next

00:13:41,639 --> 00:13:48,569
to the build package definition now we

00:13:45,179 --> 00:13:50,610
are still on this package packaging

00:13:48,569 --> 00:13:53,519
level project level there's more on this

00:13:50,610 --> 00:13:58,110
level there are repository install

00:13:53,519 --> 00:14:01,470
checks which check if the repositories

00:13:58,110 --> 00:14:03,269
which are generated are installable more

00:14:01,470 --> 00:14:05,160
or less what I showed on the level of a

00:14:03,269 --> 00:14:07,440
single packaging before you can check

00:14:05,160 --> 00:14:09,150
does it all install this is

00:14:07,440 --> 00:14:11,460
what is done for example when a new

00:14:09,150 --> 00:14:14,390
snapshot for tumblr is created same as

00:14:11,460 --> 00:14:19,500
Phillipe it is checked can we install

00:14:14,390 --> 00:14:21,720
packages within their review bots so for

00:14:19,500 --> 00:14:24,600
except for famous example is the legal

00:14:21,720 --> 00:14:27,420
bot which checks the licenses correct of

00:14:24,600 --> 00:14:29,760
all the source faults they are the

00:14:27,420 --> 00:14:31,770
further policy checks for example

00:14:29,760 --> 00:14:34,500
regarding the inheritance of the package

00:14:31,770 --> 00:14:36,750
is a leap package coming from a source

00:14:34,500 --> 00:14:40,140
or from a factory source so that we

00:14:36,750 --> 00:14:42,300
don't have dangling packages which are

00:14:40,140 --> 00:14:45,450
only leap or not any other distributions

00:14:42,300 --> 00:14:47,490
and their development project tests so

00:14:45,450 --> 00:14:51,300
some development project which are a bit

00:14:47,490 --> 00:14:53,130
bigger already have more and finer tests

00:14:51,300 --> 00:14:56,010
for example the KDE just as well as

00:14:53,130 --> 00:14:59,310
ignorant as day runs on tests based on

00:14:56,010 --> 00:15:02,070
the development project level so we are

00:14:59,310 --> 00:15:03,960
not waiting until the end of trying to

00:15:02,070 --> 00:15:06,920
create a snapshot of tumbleweed to say

00:15:03,960 --> 00:15:11,490
does the latest get snapshot of KDE work

00:15:06,920 --> 00:15:14,760
and as this so called staging projects

00:15:11,490 --> 00:15:17,250
in this staging projects then again try

00:15:14,760 --> 00:15:18,990
to when you create a submit request to

00:15:17,250 --> 00:15:22,380
have something included for example in

00:15:18,990 --> 00:15:24,570
factory then this is then checking for

00:15:22,380 --> 00:15:27,570
multiple things on that level before

00:15:24,570 --> 00:15:31,140
package is accepted further into the

00:15:27,570 --> 00:15:35,160
whole distribution ok so who does that I

00:15:31,140 --> 00:15:39,570
would say that is the maintainer of the

00:15:35,160 --> 00:15:41,790
packages or the build projects how one

00:15:39,570 --> 00:15:46,140
wave just by building it I would say

00:15:41,790 --> 00:15:48,750
that is a test using the check role and

00:15:46,140 --> 00:15:52,050
as well as the approach which I showed

00:15:48,750 --> 00:15:54,480
with a multi built package self-test OBS

00:15:52,050 --> 00:15:56,850
ports but also see I systems in

00:15:54,480 --> 00:15:59,570
containers for example using an

00:15:56,850 --> 00:16:02,880
additional Jenkins instance or

00:15:59,570 --> 00:16:05,100
containers registry or other tools where

00:16:02,880 --> 00:16:06,960
we can just check out the latest state

00:16:05,100 --> 00:16:09,570
from the some development project and

00:16:06,960 --> 00:16:12,660
then in a circle feedback that result

00:16:09,570 --> 00:16:14,910
before creating submit and why I would

00:16:12,660 --> 00:16:16,770
say well integration is crucial

00:16:14,910 --> 00:16:17,940
especially for distribution building

00:16:16,770 --> 00:16:19,740
when we are talking about multiple

00:16:17,940 --> 00:16:20,760
versions architectures and all that

00:16:19,740 --> 00:16:23,459
variants

00:16:20,760 --> 00:16:26,639
so the goal is to identify the package

00:16:23,459 --> 00:16:29,760
impact before accepting that into the

00:16:26,639 --> 00:16:32,269
whole system okay and then we are on the

00:16:29,760 --> 00:16:35,399
next level that is system level tests

00:16:32,269 --> 00:16:38,880
system level test means that we can test

00:16:35,399 --> 00:16:41,790
end to end the whole operating system in

00:16:38,880 --> 00:16:45,240
that regard now this is testing the

00:16:41,790 --> 00:16:47,010
distribution as a whole we can or we

00:16:45,240 --> 00:16:49,170
should rely here on all the pre

00:16:47,010 --> 00:16:51,000
integration test results so knowing what

00:16:49,170 --> 00:16:53,490
we tested in before then we can say like

00:16:51,000 --> 00:16:56,490
ok what else could go wrong after accept

00:16:53,490 --> 00:16:58,920
the package now what is different now on

00:16:56,490 --> 00:17:02,010
the on the level of system and a good

00:16:58,920 --> 00:17:03,630
example is booting the system or

00:17:02,010 --> 00:17:05,100
conducting an installation this is

00:17:03,630 --> 00:17:07,319
something which we cannot do when we are

00:17:05,100 --> 00:17:09,329
talking about a single package but

00:17:07,319 --> 00:17:12,839
there's there are a lot of things which

00:17:09,329 --> 00:17:14,880
can go wrong it could be grub the kernel

00:17:12,839 --> 00:17:16,949
some config files which rely on a

00:17:14,880 --> 00:17:20,160
different convict format and all that

00:17:16,949 --> 00:17:22,740
things and this on that level directly

00:17:20,160 --> 00:17:24,059
feeds into the product release decision

00:17:22,740 --> 00:17:25,589
process or when we are talking about

00:17:24,059 --> 00:17:29,220
something like rolling release

00:17:25,589 --> 00:17:34,410
tumbleweed same as Phillipe and on a

00:17:29,220 --> 00:17:36,960
similar level same forcely system tests

00:17:34,410 --> 00:17:40,260
are conducted and based on that a built

00:17:36,960 --> 00:17:44,850
or snapshot of tumbleweed is accepted or

00:17:40,260 --> 00:17:47,730
is discarded I would say the main

00:17:44,850 --> 00:17:49,980
workhorse here regarding did classical

00:17:47,730 --> 00:17:53,190
distribution is over QA if you haven't

00:17:49,980 --> 00:17:57,000
seen it this is one view how it looks

00:17:53,190 --> 00:17:59,640
like so what you see there is tumbleweed

00:17:57,000 --> 00:18:02,400
is being tested and all of this numbers

00:17:59,640 --> 00:18:05,040
to the right is one single virtual or

00:18:02,400 --> 00:18:08,700
physical machine test that is conducted

00:18:05,040 --> 00:18:11,220
you can see that there's one built for

00:18:08,700 --> 00:18:13,559
every snapshot of tumbleweed which is

00:18:11,220 --> 00:18:15,020
conducted and based on the test results

00:18:13,559 --> 00:18:17,970
in there

00:18:15,020 --> 00:18:19,470
this is feeding back into the decision

00:18:17,970 --> 00:18:25,799
should we release that built of

00:18:19,470 --> 00:18:28,200
tumbleweed or not if you interested

00:18:25,799 --> 00:18:30,780
later I can I would be happy to give you

00:18:28,200 --> 00:18:33,150
an introduction into open came if you

00:18:30,780 --> 00:18:34,179
know it already you might not know what

00:18:33,150 --> 00:18:36,100
is included

00:18:34,179 --> 00:18:38,289
recently so I would like to present some

00:18:36,100 --> 00:18:40,360
reason new features which can make the

00:18:38,289 --> 00:18:43,029
life easier there is an open - a

00:18:40,360 --> 00:18:45,279
bootstrap tool for easy installation so

00:18:43,029 --> 00:18:46,869
if you think yeah I open QA was already

00:18:45,279 --> 00:18:49,299
cool but I don't know how to install the

00:18:46,869 --> 00:18:51,220
thing it's too complicated there's a I

00:18:49,299 --> 00:18:54,009
would say something like a one-click

00:18:51,220 --> 00:18:57,999
solution now so you can run that and

00:18:54,009 --> 00:19:00,100
even that is not necessary to do if you

00:18:57,999 --> 00:19:03,009
want to try out open K it had been

00:19:00,100 --> 00:19:06,399
already mentioned today in the morning

00:19:03,009 --> 00:19:08,139
in Reaume stock is you can run custom

00:19:06,399 --> 00:19:09,669
test code on production instances

00:19:08,139 --> 00:19:11,470
because we're relying on some virtual

00:19:09,669 --> 00:19:13,840
machines or some physical machines to

00:19:11,470 --> 00:19:16,809
conduct a test it's not necessary that

00:19:13,840 --> 00:19:19,210
you're trying out tests or some

00:19:16,809 --> 00:19:22,659
experiments need to be accepted into the

00:19:19,210 --> 00:19:25,119
main branch before tests can be executed

00:19:22,659 --> 00:19:27,490
so there's a way to have just your own

00:19:25,119 --> 00:19:29,860
git repository where you're trying out

00:19:27,490 --> 00:19:32,320
something changing an existing test or

00:19:29,860 --> 00:19:35,740
adding a new test and that could be

00:19:32,320 --> 00:19:37,659
conducted on production instance there's

00:19:35,740 --> 00:19:40,659
a yellow based declarative schedule

00:19:37,659 --> 00:19:43,629
support now so previously some of the

00:19:40,659 --> 00:19:45,879
schedule was definable only in the web

00:19:43,629 --> 00:19:48,220
UI by selecting some fields which is

00:19:45,879 --> 00:19:50,740
really easy to do and it's also pretty

00:19:48,220 --> 00:19:52,779
obvious what is going on there however

00:19:50,740 --> 00:19:56,169
if you want to go a bit further more

00:19:52,779 --> 00:19:59,159
professional then it's good to have the

00:19:56,169 --> 00:20:01,860
schedule definition itself in a more

00:19:59,159 --> 00:20:03,940
defined format in the text-based format

00:20:01,860 --> 00:20:06,999
so this is what has been done recently

00:20:03,940 --> 00:20:09,070
based on yellow text format and also

00:20:06,999 --> 00:20:11,259
there's a reworked interactive developer

00:20:09,070 --> 00:20:13,629
mode so if you know the older

00:20:11,259 --> 00:20:15,700
interactive mode that one is way more

00:20:13,629 --> 00:20:17,499
stable now and it's really fun to work

00:20:15,700 --> 00:20:21,879
with so what you can do is if you're

00:20:17,499 --> 00:20:24,070
running a test then you can interact

00:20:21,879 --> 00:20:25,990
with the VM while it is running of

00:20:24,070 --> 00:20:27,970
course it will it can impact the test

00:20:25,990 --> 00:20:31,480
result this is why the individual job

00:20:27,970 --> 00:20:34,809
then is not regarded anymore for test

00:20:31,480 --> 00:20:36,519
results but you can actually interact

00:20:34,809 --> 00:20:40,299
with the machine for debugging purposes

00:20:36,519 --> 00:20:42,279
for example okay so system level tests

00:20:40,299 --> 00:20:44,109
who is doing that well this is where

00:20:42,279 --> 00:20:46,029
release management comes into play and

00:20:44,109 --> 00:20:48,460
also quality assurance

00:20:46,029 --> 00:20:50,289
this is also where I am participating as

00:20:48,460 --> 00:20:54,129
a QA sue the employee as a QA engineer

00:20:50,289 --> 00:20:56,320
is we focus or we start from system

00:20:54,129 --> 00:20:58,029
level test so we don't start from the

00:20:56,320 --> 00:20:59,950
package level we rely on something what

00:20:58,029 --> 00:21:02,830
is come down on a package level mainly

00:20:59,950 --> 00:21:08,349
we try to look at the ad product as a

00:21:02,830 --> 00:21:10,599
whole how is that done mainly using the

00:21:08,349 --> 00:21:13,139
MS because we am sorry easy to scale and

00:21:10,599 --> 00:21:16,479
they are really isolated and separated

00:21:13,139 --> 00:21:19,690
but also using containers and then

00:21:16,479 --> 00:21:21,909
there's also different benchmarks

00:21:19,690 --> 00:21:24,129
executed as well as on a lot other

00:21:21,909 --> 00:21:29,009
testing frameworks which are done within

00:21:24,129 --> 00:21:31,899
open QA or but also in other context and

00:21:29,009 --> 00:21:33,609
why this is done I would say well this

00:21:31,899 --> 00:21:35,830
is what the user cares about when we are

00:21:33,609 --> 00:21:38,289
talking about openSUSE as a distribution

00:21:35,830 --> 00:21:40,269
as an operating system you use the

00:21:38,289 --> 00:21:44,739
system and this is also what open gate

00:21:40,269 --> 00:21:49,299
tries to it uses the system as a user

00:21:44,739 --> 00:21:52,359
what to do but we are not finished with

00:21:49,299 --> 00:21:57,489
open yet there's the next level

00:21:52,359 --> 00:21:59,919
GUI acceptances this is what I would say

00:21:57,489 --> 00:22:01,659
this is where open creations but I was

00:21:59,919 --> 00:22:03,759
presenting in the for system level test

00:22:01,659 --> 00:22:06,190
which have nothing to do with the UI

00:22:03,759 --> 00:22:09,129
necessarily when we are talking about

00:22:06,190 --> 00:22:13,749
GUI except in tests is this yeah okay it

00:22:09,129 --> 00:22:15,580
needs to look correct right and we

00:22:13,749 --> 00:22:17,830
wanted to look at applications they need

00:22:15,580 --> 00:22:20,019
to look awesome so we want to preserve

00:22:17,830 --> 00:22:22,929
that and for that we can use open game

00:22:20,019 --> 00:22:25,299
which actually I would say is pretty fun

00:22:22,929 --> 00:22:27,609
to develop tests for because you can

00:22:25,299 --> 00:22:29,259
take a look on the screen and do what

00:22:27,609 --> 00:22:31,539
you would also do as a user click

00:22:29,259 --> 00:22:33,899
somewhere and then you ask open K to do

00:22:31,539 --> 00:22:39,159
that and you have that running in a test

00:22:33,899 --> 00:22:40,989
now finally something visual this is a

00:22:39,159 --> 00:22:43,989
video recording which is done

00:22:40,989 --> 00:22:47,679
automatically by open K for every single

00:22:43,989 --> 00:22:50,739
job that it executes and what you can

00:22:47,679 --> 00:22:53,469
see here is how open K instructs the

00:22:50,739 --> 00:22:55,850
installer to install an operating system

00:22:53,469 --> 00:23:00,020
and after the installation

00:22:55,850 --> 00:23:02,120
it locks into the system and then clicks

00:23:00,020 --> 00:23:05,090
around starts application and tries it

00:23:02,120 --> 00:23:08,900
what you can also see is that this is a

00:23:05,090 --> 00:23:10,130
bit faster than in real time so of

00:23:08,900 --> 00:23:12,470
course when we are doing an installation

00:23:10,130 --> 00:23:14,240
this is actually conducted in real time

00:23:12,470 --> 00:23:16,100
it relies on the performance of the

00:23:14,240 --> 00:23:17,870
network because we're really downloading

00:23:16,100 --> 00:23:20,419
and installing the packages as a user

00:23:17,870 --> 00:23:25,429
would do it's only afterwards that the

00:23:20,419 --> 00:23:27,799
installation itself well is a bit faster

00:23:25,429 --> 00:23:30,320
to do here ok this is the full video

00:23:27,799 --> 00:23:32,770
recording later on it will boot into the

00:23:30,320 --> 00:23:36,350
system and it will open Firefox go to

00:23:32,770 --> 00:23:38,960
another web page and then open a mail

00:23:36,350 --> 00:23:40,730
client and all that things I think we do

00:23:38,960 --> 00:23:43,070
not need to necessarily wait for the

00:23:40,730 --> 00:23:45,470
whole however what I would like to show

00:23:43,070 --> 00:23:47,380
is the booting process because this is

00:23:45,470 --> 00:23:50,809
something which is also pretty hard for

00:23:47,380 --> 00:23:53,750
for other test automation tools to to

00:23:50,809 --> 00:23:56,200
automate so we are in the installer we

00:23:53,750 --> 00:23:58,880
just stopped right before rebooting

00:23:56,200 --> 00:24:01,789
collect collect some locks then we boot

00:23:58,880 --> 00:24:04,640
you saw KDE 4 for a glimpse of a second

00:24:01,789 --> 00:24:07,460
then we lock into a txt terminal we call

00:24:04,640 --> 00:24:10,669
sipper we conduct some console based

00:24:07,460 --> 00:24:13,460
tests and then later on after we did

00:24:10,669 --> 00:24:15,740
that we lock into the graphical session

00:24:13,460 --> 00:24:19,010
here we disable the screensaver

00:24:15,740 --> 00:24:21,500
and we test something about the network

00:24:19,010 --> 00:24:23,990
and all different kind of applications

00:24:21,500 --> 00:24:27,440
that we normally ship by on the

00:24:23,990 --> 00:24:30,260
different distributions we we trigger

00:24:27,440 --> 00:24:32,570
here at least try to poke them a little

00:24:30,260 --> 00:24:34,730
bit we cannot have an in-depth test of

00:24:32,570 --> 00:24:36,440
all the applications and packages on

00:24:34,730 --> 00:24:39,590
that level because that would mean we

00:24:36,440 --> 00:24:42,470
would need to run like 20,000 packages

00:24:39,590 --> 00:24:46,669
on every run but that's a bit too much

00:24:42,470 --> 00:24:48,409
so we are doing less than that so if you

00:24:46,669 --> 00:24:50,900
want to see the full video I invite you

00:24:48,409 --> 00:24:56,090
over to open que openSUSE org select any

00:24:50,900 --> 00:24:58,220
job and just enjoy the show there now Co

00:24:56,090 --> 00:24:59,630
accepting tests who does that again I

00:24:58,220 --> 00:25:01,460
would say release management and quality

00:24:59,630 --> 00:25:03,440
assurance when we take a look at the

00:25:01,460 --> 00:25:05,600
results and we take a look like does it

00:25:03,440 --> 00:25:07,460
still render correctly otherwise open

00:25:05,600 --> 00:25:09,500
key tests would also fail how that is

00:25:07,460 --> 00:25:11,210
done using open game at

00:25:09,500 --> 00:25:15,380
for the distribution experience itself

00:25:11,210 --> 00:25:17,060
and why because well compared to system

00:25:15,380 --> 00:25:20,390
level test this is what the desktop user

00:25:17,060 --> 00:25:22,250
cares about there can be much more

00:25:20,390 --> 00:25:25,910
in-depth tests on the on the system

00:25:22,250 --> 00:25:28,820
level area but in the end it matters how

00:25:25,910 --> 00:25:30,830
it looks like okay but as the was the

00:25:28,820 --> 00:25:33,680
last level which is this cloudy area of

00:25:30,830 --> 00:25:35,960
exploratory in beta testing and this is

00:25:33,680 --> 00:25:37,280
well manual by definition I would say

00:25:35,960 --> 00:25:40,700
because this is everything what you

00:25:37,280 --> 00:25:42,500
cannot automate and this catches what

00:25:40,700 --> 00:25:45,830
was missed by automation and it provides

00:25:42,500 --> 00:25:48,380
feedback on where to extend test this

00:25:45,830 --> 00:25:52,580
section in particular is very much

00:25:48,380 --> 00:25:56,660
dependent on all of you on everyone and

00:25:52,580 --> 00:25:58,700
because well we we don't know what was

00:25:56,660 --> 00:26:00,770
mystery relying on feedback and this is

00:25:58,700 --> 00:26:03,110
also where it can scale out to have

00:26:00,770 --> 00:26:05,210
something which I mentioned in before

00:26:03,110 --> 00:26:06,770
open case mainly relying due to

00:26:05,210 --> 00:26:11,300
scalability reasons on virtual machines

00:26:06,770 --> 00:26:13,610
if we want to go broad and further then

00:26:11,300 --> 00:26:16,070
it's very much dependent on specific

00:26:13,610 --> 00:26:18,410
hardware drivers and all that things and

00:26:16,070 --> 00:26:22,730
this is really hard to automate even

00:26:18,410 --> 00:26:24,230
though maybe not impossible so this is

00:26:22,730 --> 00:26:27,200
what I would call exploratory beta

00:26:24,230 --> 00:26:30,050
testing how that is done well mainly by

00:26:27,200 --> 00:26:31,550
using it so you know when load Rick

00:26:30,050 --> 00:26:33,740
knows Lee's writing announcement and

00:26:31,550 --> 00:26:37,040
saying hey test new version of leap 50.1

00:26:33,740 --> 00:26:39,170
please try it then we are relying also

00:26:37,040 --> 00:26:41,480
on the feedback from there so I hope you

00:26:39,170 --> 00:26:43,160
also providing the feedback by creating

00:26:41,480 --> 00:26:45,140
the proper buck reports or at least

00:26:43,160 --> 00:26:47,210
asking on the mailing list hey guys do

00:26:45,140 --> 00:26:49,340
you also have that problem or is that

00:26:47,210 --> 00:26:53,540
problem won't know why

00:26:49,340 --> 00:26:57,290
well no automation can be complete now

00:26:53,540 --> 00:27:01,460
this brings me to the points to take

00:26:57,290 --> 00:27:04,610
away important for me is that testing is

00:27:01,460 --> 00:27:06,740
no phase so this is something which you

00:27:04,610 --> 00:27:08,990
might through 20 years ago it's very

00:27:06,740 --> 00:27:10,580
traditional that you would have some

00:27:08,990 --> 00:27:12,800
development phase some integration free

00:27:10,580 --> 00:27:15,830
some testing phase and I would say that

00:27:12,800 --> 00:27:20,050
is hardly the case we within Suzy Q a we

00:27:15,830 --> 00:27:22,790
test on a periodic regular base

00:27:20,050 --> 00:27:23,920
everybody that builds packages is doing

00:27:22,790 --> 00:27:26,920
that all the

00:27:23,920 --> 00:27:29,920
you as users are doing the testing so it

00:27:26,920 --> 00:27:33,010
happens all the time and everyone is

00:27:29,920 --> 00:27:35,590
involved it's also important to select

00:27:33,010 --> 00:27:38,290
the right tool for the purpose so I

00:27:35,590 --> 00:27:41,580
presented some tools for it I don't have

00:27:38,290 --> 00:27:47,080
the answer for all of them and this is

00:27:41,580 --> 00:27:50,410
only what you can do for the individual

00:27:47,080 --> 00:27:54,630
jobs do it in particular now optional

00:27:50,410 --> 00:27:54,630
this is something for for you too

00:27:54,900 --> 00:28:00,640
sorry to explore further on on yan you

00:27:59,320 --> 00:28:03,130
can click around I provided some links

00:28:00,640 --> 00:28:05,230
for all the individual steps for one

00:28:03,130 --> 00:28:07,900
example project that we can follow on

00:28:05,230 --> 00:28:09,670
with all the steps of the pyramid which

00:28:07,900 --> 00:28:12,340
I have shown in before in individual

00:28:09,670 --> 00:28:16,120
examples like pointing to github OBS and

00:28:12,340 --> 00:28:18,850
further to challenges regarding testing

00:28:16,120 --> 00:28:22,030
while more tests are good but how to

00:28:18,850 --> 00:28:23,350
know what is already tested that is hard

00:28:22,030 --> 00:28:24,970
to know if you are having something

00:28:23,350 --> 00:28:26,440
tested on pigs level you should know

00:28:24,970 --> 00:28:28,300
about it on the system levels that I

00:28:26,440 --> 00:28:31,600
didn't know what they needs to add or

00:28:28,300 --> 00:28:33,220
what not to repeat again some project

00:28:31,600 --> 00:28:35,530
packages are good at this but how to

00:28:33,220 --> 00:28:39,520
scale not everybody does have to write

00:28:35,530 --> 00:28:42,190
at the same level of testing and test

00:28:39,520 --> 00:28:44,650
may fail in any step but who can keep an

00:28:42,190 --> 00:28:48,220
overview speaking for myself as a QA

00:28:44,650 --> 00:28:51,370
engineer it's hard to have an overview

00:28:48,220 --> 00:28:53,820
and really see what is tested there I

00:28:51,370 --> 00:28:58,450
just know that it is so I can trust that

00:28:53,820 --> 00:29:02,280
with this I'm at the end thank you

00:28:58,450 --> 00:29:07,560
[Applause]

00:29:02,280 --> 00:29:10,320
okay so any question correction note

00:29:07,560 --> 00:29:12,860
single one for now or beat me outside

00:29:10,320 --> 00:29:12,860
later

00:29:20,340 --> 00:29:28,140
hello I have a question about packaging

00:29:23,730 --> 00:29:31,590
antennas for example recently we have a

00:29:28,140 --> 00:29:37,500
new version of search boat in Tim Boeing

00:29:31,590 --> 00:29:39,690
but it cannot renew the certificate SSL

00:29:37,500 --> 00:29:41,280
certificate anymore called

00:29:39,690 --> 00:29:47,070
because of some second image

00:29:41,280 --> 00:29:49,350
segmentation board but at the premium

00:29:47,070 --> 00:29:55,290
equipment and are saying might not pass

00:29:49,350 --> 00:30:00,960
a package in some certain condition does

00:29:55,290 --> 00:30:04,710
open QA can can provide tasks for some

00:30:00,960 --> 00:30:08,520
kind of important packages for servers

00:30:04,710 --> 00:30:12,510
because some people may be like me just

00:30:08,520 --> 00:30:14,960
every night update the demo wave system

00:30:12,510 --> 00:30:18,350
without carrying your favorite packages

00:30:14,960 --> 00:30:21,450
working and if something happened and

00:30:18,350 --> 00:30:24,570
right so I'm not sure I forgot this

00:30:21,450 --> 00:30:26,730
right is this about package dependencies

00:30:24,570 --> 00:30:29,190
which you might need for a certain

00:30:26,730 --> 00:30:31,640
version for something to work and you

00:30:29,190 --> 00:30:36,560
want to test the combination of packages

00:30:31,640 --> 00:30:41,100
maybe not it's not clear that why this

00:30:36,560 --> 00:30:45,150
package doesn't work anymore yeah but if

00:30:41,100 --> 00:30:52,920
the package doesn't work with others the

00:30:45,150 --> 00:30:56,070
new world has a problem yeah right so so

00:30:52,920 --> 00:30:58,260
in the end what one is doing is building

00:30:56,070 --> 00:31:00,780
you kind of your own distribution

00:30:58,260 --> 00:31:02,640
because you're having your package which

00:31:00,780 --> 00:31:05,250
interested in and in relying on certain

00:31:02,640 --> 00:31:07,200
versions which I would say normally you

00:31:05,250 --> 00:31:09,240
should rely on OBS to provide you that

00:31:07,200 --> 00:31:11,400
maybe in a custom repository where you

00:31:09,240 --> 00:31:14,970
include all the other repositories but

00:31:11,400 --> 00:31:16,920
then that can be tested that could also

00:31:14,970 --> 00:31:19,110
be tested within open hey think about

00:31:16,920 --> 00:31:21,450
you as a user how you would do that you

00:31:19,110 --> 00:31:23,970
would add some repositories and then try

00:31:21,450 --> 00:31:26,880
if that works we can instruct open cave

00:31:23,970 --> 00:31:30,420
no problem to do the same by saying just

00:31:26,880 --> 00:31:32,820
use the latest tumbleweed snapshot plus

00:31:30,420 --> 00:31:33,840
this repo plus that repo and then see if

00:31:32,820 --> 00:31:36,120
something works in queue

00:31:33,840 --> 00:31:41,480
being upgrades so yeah this is possible

00:31:36,120 --> 00:31:41,480
rewrite combination okay so thank you

00:31:42,150 --> 00:31:47,880

YouTube URL: https://www.youtube.com/watch?v=A3FjpB4JdvM


