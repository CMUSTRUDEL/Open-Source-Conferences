Title: openSUSE Conference 2019 - openSUSE MicroOS
Publication date: 2019-05-24
Playlist: openSUSE Conference 2019 💚 🦎
Description: 
	https://media.ccc.de/v/2528-opensuse-microos

A new distro for a new age

As the world moves more and more towards containerised solutions, a number of real questions start to appear. - What is the perfect platform for running containers atop? - How to use this platform as part of a flexible, scalable, highly available infrastructure fabric? - How to minimize the maintenance and administration of this platform at scale? 

Many of these problems are well answered in enterprise container offerings, but for developers more interested in the state of containers & kubernetes upstream, new issues start to appear. With such fast moving upstreams, developers and enthusiasts need a platform that can keep up and is closely involved with those upstream developments. This platform needs to not only be able to run containers at scale, but also on single machine, all the while preserving the attributes of low maintenance so the focus can be on the containers, not the base system beneath them. 

And then the question becomes "What is so special about containers anyway?" - in more and more cases, people are deploying Linux VMs, Cloud instances, or bare metal to do 'just one job', with other jobs being handled by other machines. Can we simplify the Operating System and make it easier to live with if we optimise it for these 'single-purpose' deployments?

This talk introduces openSUSE MicroOS, and explains how it addresses the above, being the perfect distribution for this modern age. The session will explore in some detail how MicroOS is developed in lockstep with the Tumbleweed rolling release and can be used for a wide variety of single-purpose systems.

This talk will also discuss openSUSE Kubic, the MicroOS variant focused on containers. The talk will share how Kubic collaborates with various upstreams including kubeadm and CRI-O. Transactional Updates, Kubic's system update stack will be demonstrated and the benefits from such an atomic update approach discussed in some detail.

Finally the kubictl Kubernetes cluster boostrapping tool will be discussed and some future plans shared for consideration and feedback.

As the world moves more and more towards containerised solutions, a number of real questions start to appear. - What is the perfect platform for running containers atop? - How to use this platform as part of a flexible, scalable, highly available infrastructure fabric? - How to minimize the maintenance and administration of this platform at scale? 

Many of these problems are well answered in enterprise container offerings, but for developers more interested in the state of containers & kubernetes upstream, new issues start to appear. With such fast moving upstreams, developers and enthusiasts need a platform that can keep up and is closely involved with those upstream developments. This platform needs to not only be able to run containers at scale, but also on single machine, all the while preserving the attributes of low maintenance so the focus can be on the containers, not the base system beneath them. 

And then the question becomes "What is so special about containers anyway?" - in more and more cases, people are deploying Linux VMs, Cloud instances, or bare metal to do 'just one job', with other jobs being handled by other machines. Can we simplify the Operating System and make it easier to live with if we optimise it for these 'single-purpose' deployments?

This talk introduces openSUSE MicroOS, and explains how it addresses the above, being the perfect distribution for this modern age. The session will explore in some detail how MicroOS is developed in lockstep with the Tumbleweed rolling release and can be used for a wide variety of single-purpose systems.

This talk will also discuss openSUSE Kubic, the MicroOS variant focused on containers. The talk will share how Kubic collaborates with various upstreams including kubeadm and CRI-O. Transactional Updates, Kubic's system update stack will be demonstrated and the benefits from such an atomic update approach discussed in some detail.

Finally the kubictl Kubernetes cluster boostrapping tool will be discussed and some future plans shared for consideration and feedback.

Richard Brown
Captions: 
	00:00:05,490 --> 00:00:12,840
okay then thank you all for coming

00:00:08,730 --> 00:00:15,150
I'm Richard Brown who I am and I'm gonna

00:00:12,840 --> 00:00:18,060
be talking about micro s so to kind of

00:00:15,150 --> 00:00:21,800
start who here has heard the term micro

00:00:18,060 --> 00:00:25,439
s or Kubek raise your hands please

00:00:21,800 --> 00:00:28,369
cool I want you to forget everything you

00:00:25,439 --> 00:00:30,450
think you know about micro s or Kubek I

00:00:28,369 --> 00:00:32,910
want when I was doing this presentation

00:00:30,450 --> 00:00:34,829
I realized I could turn this into like a

00:00:32,910 --> 00:00:36,750
history lesson of everything we've tried

00:00:34,829 --> 00:00:38,280
and what we were thinking a year ago and

00:00:36,750 --> 00:00:40,949
what we were thinking and a year before

00:00:38,280 --> 00:00:43,230
that and then I realized that would make

00:00:40,949 --> 00:00:45,359
a really boring presentation so I'm

00:00:43,230 --> 00:00:48,210
doing my best here to describe what

00:00:45,359 --> 00:00:51,329
micro s is today where we're going today

00:00:48,210 --> 00:00:53,280
and I'm therefore likely to say things

00:00:51,329 --> 00:00:55,589
which don't make any sense with your

00:00:53,280 --> 00:00:57,089
previous understanding so kind of yeah

00:00:55,589 --> 00:00:58,649
do you have to forget it go with me I

00:00:57,089 --> 00:01:00,210
will do my best to leave room for

00:00:58,649 --> 00:01:04,050
questions at the end so we can kind of

00:01:00,210 --> 00:01:08,280
bridge any gaps between then now where

00:01:04,050 --> 00:01:10,560
we're going so the story from micro SME

00:01:08,280 --> 00:01:13,740
kind of actually starts with my stories

00:01:10,560 --> 00:01:15,270
of computing you know when I when we all

00:01:13,740 --> 00:01:17,990
start when I started with the computing

00:01:15,270 --> 00:01:20,670
at a Commodore 64 was my first machine

00:01:17,990 --> 00:01:22,710
and it was a machine that could do one

00:01:20,670 --> 00:01:26,090
thing at a time you know one cassette

00:01:22,710 --> 00:01:29,640
tape yeah yeah but one cassette tape in

00:01:26,090 --> 00:01:30,990
wait 20 minutes for to load if you want

00:01:29,640 --> 00:01:32,610
to do more than one thing you need to

00:01:30,990 --> 00:01:34,950
have more than one Commodore 64 next to

00:01:32,610 --> 00:01:37,890
each other and this is sort of where

00:01:34,950 --> 00:01:40,680
computing started before networking even

00:01:37,890 --> 00:01:42,420
and that's where things started getting

00:01:40,680 --> 00:01:45,509
interesting later on you know with the

00:01:42,420 --> 00:01:48,240
PC with networking what did we all start

00:01:45,509 --> 00:01:49,950
doing we started plugging them all

00:01:48,240 --> 00:01:53,460
together and you know building networks

00:01:49,950 --> 00:01:56,130
and using PC's and using laptops and as

00:01:53,460 --> 00:01:58,350
we started doing that the the story in

00:01:56,130 --> 00:02:00,960
many respects became less about that one

00:01:58,350 --> 00:02:03,270
thing running on that computer well you

00:02:00,960 --> 00:02:04,409
know what can all the things do when

00:02:03,270 --> 00:02:06,689
they're connected together you know this

00:02:04,409 --> 00:02:09,060
became the era of the internet and we

00:02:06,689 --> 00:02:13,410
had yeah or networking first and then

00:02:09,060 --> 00:02:16,610
the internet and when you look at that

00:02:13,410 --> 00:02:18,880
you know what what comes is baggage with

00:02:16,610 --> 00:02:23,230
networked computing

00:02:18,880 --> 00:02:24,580
you realize that you know you ended up

00:02:23,230 --> 00:02:27,790
it brings with us with it a sort of a

00:02:24,580 --> 00:02:29,170
certain pile of complexity you know the

00:02:27,790 --> 00:02:32,980
more computers you have on a network

00:02:29,170 --> 00:02:34,600
theater a one or a LAN or the Internet

00:02:32,980 --> 00:02:38,170
you know you need more infrastructure

00:02:34,600 --> 00:02:40,420
more networking more switches you know

00:02:38,170 --> 00:02:42,640
more more hair conditioning you know in

00:02:40,420 --> 00:02:44,830
businesses or even at home you know the

00:02:42,640 --> 00:02:46,390
more Hardware you have you know it's

00:02:44,830 --> 00:02:48,010
harder to get that money especially when

00:02:46,390 --> 00:02:49,600
it's big expenses and you're inside

00:02:48,010 --> 00:02:51,550
companies you always have the issue of

00:02:49,600 --> 00:02:54,400
like capital expenditure versus

00:02:51,550 --> 00:02:56,140
operational expenditure the more

00:02:54,400 --> 00:02:58,000
machines you have the harder time you

00:02:56,140 --> 00:03:00,460
have with configuration management you

00:02:58,000 --> 00:03:02,200
know keeping those machines running you

00:03:00,460 --> 00:03:04,000
know yeah and you want to keep them all

00:03:02,200 --> 00:03:05,560
running kind of the same way so you know

00:03:04,000 --> 00:03:07,210
we all end up with these wonderful shell

00:03:05,560 --> 00:03:09,010
scripts on our laptops or whatever to

00:03:07,210 --> 00:03:11,830
you know set up the machine exactly the

00:03:09,010 --> 00:03:12,760
way we want to do it and of course you

00:03:11,830 --> 00:03:16,240
don't have to spend all of that time

00:03:12,760 --> 00:03:20,620
patching and so if we're thinking sort

00:03:16,240 --> 00:03:22,210
of now you know 90s early 2000s I used

00:03:20,620 --> 00:03:24,190
to be a system administration like what

00:03:22,210 --> 00:03:26,950
was like lesson number one of system

00:03:24,190 --> 00:03:29,380
administration try and have as few

00:03:26,950 --> 00:03:30,820
machines as you need you know always try

00:03:29,380 --> 00:03:32,170
and minimize the amount of hardware you

00:03:30,820 --> 00:03:34,510
have in the datacenter always try and

00:03:32,170 --> 00:03:36,430
minimize the amount of that additional

00:03:34,510 --> 00:03:37,690
complexity with your network because

00:03:36,430 --> 00:03:38,920
them you know if you just keep on

00:03:37,690 --> 00:03:40,720
throwing machines at the problem you're

00:03:38,920 --> 00:03:45,310
just gonna you know bulk up that kind of

00:03:40,720 --> 00:03:48,390
pile of baggage at the end and so you

00:03:45,310 --> 00:03:51,940
end up with servers in particular

00:03:48,390 --> 00:03:54,430
running more than one service you know

00:03:51,940 --> 00:03:55,840
the traditional kind of Susan identify

00:03:54,430 --> 00:03:58,450
so many cases the traditional sort of

00:03:55,840 --> 00:04:00,070
openSUSE server doesn't just do one job

00:03:58,450 --> 00:04:01,720
you know it's a mail server and a web

00:04:00,070 --> 00:04:05,320
server and a database server and

00:04:01,720 --> 00:04:09,310
something else because that helps cut

00:04:05,320 --> 00:04:11,320
down that infrastructure baggage there's

00:04:09,310 --> 00:04:16,239
sort of the the connection tax sort of

00:04:11,320 --> 00:04:18,970
side of things but that in itself ends

00:04:16,239 --> 00:04:20,680
up bringing more complexity you know you

00:04:18,970 --> 00:04:22,330
may have less machines but you still

00:04:20,680 --> 00:04:23,890
have this nasty configuration management

00:04:22,330 --> 00:04:25,600
problem because you've gotta worry about

00:04:23,890 --> 00:04:28,990
the configuration of 20 different

00:04:25,600 --> 00:04:30,460
services on this one box and you know

00:04:28,990 --> 00:04:31,440
they might be incompatible with each

00:04:30,460 --> 00:04:33,390
other you know

00:04:31,440 --> 00:04:34,890
well you know try and run two versions

00:04:33,390 --> 00:04:37,190
of Posca secret on the same server at

00:04:34,890 --> 00:04:39,390
the same time it's not going to be easy

00:04:37,190 --> 00:04:41,580
those machines are going to need to have

00:04:39,390 --> 00:04:44,070
more hardware more RAM more CPU

00:04:41,580 --> 00:04:45,630
individually and a problem that I used

00:04:44,070 --> 00:04:47,730
to have a lot of the sysadmin is is sort

00:04:45,630 --> 00:04:49,320
of what described here is problem

00:04:47,730 --> 00:04:52,890
pooling like you know everything

00:04:49,320 --> 00:04:55,080
individually works fine and then one

00:04:52,890 --> 00:04:57,000
student does something really stupid on

00:04:55,080 --> 00:04:58,620
that Apache server with PHP and like

00:04:57,000 --> 00:05:00,450
your entire infrastructure is broken

00:04:58,620 --> 00:05:02,250
because Apache ended up eating all the

00:05:00,450 --> 00:05:03,480
CPU which their menu database never

00:05:02,250 --> 00:05:06,540
stopped working which they meant the

00:05:03,480 --> 00:05:08,790
cluster crashed which then meant the HR

00:05:06,540 --> 00:05:10,440
system doesn't work anymore and yeah the

00:05:08,790 --> 00:05:14,400
whole thing cascaded because you dumped

00:05:10,440 --> 00:05:16,590
it all on this one machine so you

00:05:14,400 --> 00:05:19,770
couldn't just bundle everything onto

00:05:16,590 --> 00:05:21,390
less servers and then of course you know

00:05:19,770 --> 00:05:24,300
the world's changed and we stop talking

00:05:21,390 --> 00:05:29,030
about servers and data centers as much

00:05:24,300 --> 00:05:32,840
and started talking more about cloud and

00:05:29,030 --> 00:05:38,000
part of the cloud story is this idea of

00:05:32,840 --> 00:05:40,740
making IT infrastructure more modular of

00:05:38,000 --> 00:05:42,419
you know splitting you know as much as

00:05:40,740 --> 00:05:44,340
possible splitting those various

00:05:42,419 --> 00:05:48,050
services into the smallest sensible

00:05:44,340 --> 00:05:51,600
chunk managing them in that chunk and

00:05:48,050 --> 00:05:54,419
therefore ideally hopefully minimizing

00:05:51,600 --> 00:05:56,250
that problem of pooling pooling problems

00:05:54,419 --> 00:05:59,610
together or complexity on an individual

00:05:56,250 --> 00:06:01,320
system and this is you know the new

00:05:59,610 --> 00:06:03,090
world we're actually living in today you

00:06:01,320 --> 00:06:05,820
know and you know it's not just a case

00:06:03,090 --> 00:06:07,860
of cloud you know you could say

00:06:05,820 --> 00:06:10,320
virtualization is part of this story you

00:06:07,860 --> 00:06:12,720
know then generally speaking with like

00:06:10,320 --> 00:06:14,730
virtualization how many how many are

00:06:12,720 --> 00:06:18,750
doing lots of stuffs with VMs on data

00:06:14,730 --> 00:06:21,090
centers for example yeah so when you

00:06:18,750 --> 00:06:23,070
have a new service what do you do do you

00:06:21,090 --> 00:06:26,850
add another service to an existing VM or

00:06:23,070 --> 00:06:28,380
do you just spin up a new VM both ok but

00:06:26,850 --> 00:06:30,390
yeah yeah but more and more you're

00:06:28,380 --> 00:06:32,010
probably spending up more more VMs and

00:06:30,390 --> 00:06:33,800
especially with cloud unless you want to

00:06:32,010 --> 00:06:36,840
avoid having to spend too much money

00:06:33,800 --> 00:06:38,669
containers live this life IOT live this

00:06:36,840 --> 00:06:39,730
life and so more and more you end up

00:06:38,669 --> 00:06:42,490
with

00:06:39,730 --> 00:06:46,500
systems that are being deployed to just

00:06:42,490 --> 00:06:48,880
do one job a single purpose system

00:06:46,500 --> 00:06:50,470
containing the minimum amount of service

00:06:48,880 --> 00:06:53,560
minimum and de binary's it needs to do

00:06:50,470 --> 00:06:56,440
that one job in some cases totally

00:06:53,560 --> 00:06:58,240
ignoring patching you know just deploy

00:06:56,440 --> 00:07:01,900
the thing in the clouds run the thing

00:06:58,240 --> 00:07:04,030
destroy it to deploy a new thing and

00:07:01,900 --> 00:07:05,860
when you need to do when you need to add

00:07:04,030 --> 00:07:08,050
more services you just you know you add

00:07:05,860 --> 00:07:09,400
more VMS you add more containers you add

00:07:08,050 --> 00:07:11,230
more cloud answers whatever whichever

00:07:09,400 --> 00:07:14,140
poison you you're using in this new

00:07:11,230 --> 00:07:16,750
world the model is kind of one that just

00:07:14,140 --> 00:07:18,280
encourages more and more installations

00:07:16,750 --> 00:07:22,570
of an operating system actually

00:07:18,280 --> 00:07:25,060
individually doing less and less and

00:07:22,570 --> 00:07:27,580
that solves a little bit of the problem

00:07:25,060 --> 00:07:29,950
you know the the incompatibilities of

00:07:27,580 --> 00:07:31,600
running multiple versions of the same

00:07:29,950 --> 00:07:33,250
thing on the same machine goes away

00:07:31,600 --> 00:07:35,950
because you're not running multiple

00:07:33,250 --> 00:07:38,500
versions there anymore the problem

00:07:35,950 --> 00:07:40,570
pooling goes away as well but you're

00:07:38,500 --> 00:07:41,800
still left with the hardware

00:07:40,570 --> 00:07:43,450
requirements getting higher and higher

00:07:41,800 --> 00:07:46,390
the more you're putting on the bare

00:07:43,450 --> 00:07:47,470
metal and you're left with configuration

00:07:46,390 --> 00:07:49,660
management which is probably getting

00:07:47,470 --> 00:07:51,790
even worse the more VMs you have the

00:07:49,660 --> 00:07:59,050
more variant the more various

00:07:51,790 --> 00:08:02,200
installations you have around them so to

00:07:59,050 --> 00:08:04,240
really solve the problem of the perfect

00:08:02,200 --> 00:08:07,780
operating system for this new world for

00:08:04,240 --> 00:08:10,420
containers for single purpose systems we

00:08:07,780 --> 00:08:11,830
need you know it needs to have an answer

00:08:10,420 --> 00:08:14,200
for the configuration management problem

00:08:11,830 --> 00:08:15,730
basically minimizing the possibility of

00:08:14,200 --> 00:08:19,150
the configuration of an operating system

00:08:15,730 --> 00:08:21,190
drifting changing and ideally have as

00:08:19,150 --> 00:08:23,200
little on there to be configured as

00:08:21,190 --> 00:08:24,700
possible because then if there's nothing

00:08:23,200 --> 00:08:28,210
that they can figure this less there to

00:08:24,700 --> 00:08:29,890
go wrong patching you need security

00:08:28,210 --> 00:08:32,560
updates you need to be running the

00:08:29,890 --> 00:08:33,940
latest version of the right thing and as

00:08:32,560 --> 00:08:34,479
much as possible that should be totally

00:08:33,940 --> 00:08:37,240
automated

00:08:34,479 --> 00:08:38,500
for obvious reasons if you automate it

00:08:37,240 --> 00:08:42,729
you don't have to worry about doing

00:08:38,500 --> 00:08:44,620
anything about it and the hardware needs

00:08:42,729 --> 00:08:45,850
to be well the hardware requirements of

00:08:44,620 --> 00:08:47,620
that operating system should be kind of

00:08:45,850 --> 00:08:50,820
minimized or optimized as much as

00:08:47,620 --> 00:08:50,820
possible to do that job

00:08:51,050 --> 00:08:58,589
and I just realized I talked about all

00:08:53,399 --> 00:09:00,600
of that without changing the slider when

00:08:58,589 --> 00:09:02,430
we've been looking at that in our team

00:09:00,600 --> 00:09:04,619
you know we we kind of ended up focusing

00:09:02,430 --> 00:09:07,619
on the configuration management in the

00:09:04,619 --> 00:09:09,240
patching side of things trying to you

00:09:07,619 --> 00:09:11,579
know as operating system engineers you

00:09:09,240 --> 00:09:13,800
know we're looking at the the best way

00:09:11,579 --> 00:09:16,230
of minimizing the problems and

00:09:13,800 --> 00:09:17,670
mitigating the issues and it's Souza's

00:09:16,230 --> 00:09:21,119
you know we've been doing stuff with

00:09:17,670 --> 00:09:24,269
btrfs since like forever and in slee we

00:09:21,119 --> 00:09:26,009
have snapshot and rollback and with that

00:09:24,269 --> 00:09:28,970
kind of in context we realized that the

00:09:26,009 --> 00:09:31,259
the solution to those two problems

00:09:28,970 --> 00:09:34,920
really can be answered by sort of this

00:09:31,259 --> 00:09:36,990
one champion solution in between of this

00:09:34,920 --> 00:09:39,660
concept of transactional administration

00:09:36,990 --> 00:09:41,309
you know it doesn't you know you want to

00:09:39,660 --> 00:09:42,569
of course minimize the configuration

00:09:41,309 --> 00:09:43,920
management requirements you want to

00:09:42,569 --> 00:09:45,600
minimize the amount of patching you need

00:09:43,920 --> 00:09:47,429
to do but you're still going to have to

00:09:45,600 --> 00:09:48,869
do something you're still gonna have to

00:09:47,429 --> 00:09:51,480
change some company on a machine you're

00:09:48,869 --> 00:09:52,769
still gonna have to patch it so you need

00:09:51,480 --> 00:09:54,660
to be in a position that if it's worth

00:09:52,769 --> 00:09:55,889
doing if you're actually changing this

00:09:54,660 --> 00:09:57,839
the configuration of a system or

00:09:55,889 --> 00:10:00,389
changing the state of a system you can

00:09:57,839 --> 00:10:02,699
undo it that it can easily be rolled

00:10:00,389 --> 00:10:04,759
back to the work the last known working

00:10:02,699 --> 00:10:07,709
state so any change should be

00:10:04,759 --> 00:10:10,050
transactionally applied be in a way

00:10:07,709 --> 00:10:12,029
that's sort of totally reliable totally

00:10:10,050 --> 00:10:14,730
reproducible and totally reversible

00:10:12,029 --> 00:10:19,050
because any time this changes this a

00:10:14,730 --> 00:10:20,309
chance something will go wrong and of

00:10:19,050 --> 00:10:21,839
course we also realized at this point

00:10:20,309 --> 00:10:23,670
that every sysadmin has this sort of

00:10:21,839 --> 00:10:25,529
unhidden of this sort of almost secret

00:10:23,670 --> 00:10:27,230
rule of they never want to touch a

00:10:25,529 --> 00:10:29,970
running system it's there it's working

00:10:27,230 --> 00:10:31,259
you know don't touch it especially on a

00:10:29,970 --> 00:10:32,970
Friday night because if you deploy on a

00:10:31,259 --> 00:10:38,699
Friday night you're gonna work on

00:10:32,970 --> 00:10:40,920
Saturday and so in - what two years ago

00:10:38,699 --> 00:10:42,809
now we introduced into sort of the

00:10:40,920 --> 00:10:46,410
openSUSE ecosystem this idea of

00:10:42,809 --> 00:10:50,429
transactional updates which is an update

00:10:46,410 --> 00:10:54,329
or a way of updating a system using

00:10:50,429 --> 00:10:56,100
btrfs and snapper but in a different way

00:10:54,329 --> 00:10:58,889
than the way you normally see it in in

00:10:56,100 --> 00:11:01,079
openSUSE moon leap which is totally

00:10:58,889 --> 00:11:02,290
atomic you know basically the change to

00:11:01,079 --> 00:11:05,079
the system has happened

00:11:02,290 --> 00:11:08,190
in one single atomic operation it either

00:11:05,079 --> 00:11:10,959
entirely happens or none of it happens

00:11:08,190 --> 00:11:12,459
when it does happen it happens in a way

00:11:10,959 --> 00:11:13,959
that isn't influencing the running

00:11:12,459 --> 00:11:16,149
system you know the system is currently

00:11:13,959 --> 00:11:18,220
running you're updating the file system

00:11:16,149 --> 00:11:20,380
in the background but the files

00:11:18,220 --> 00:11:23,110
currently in use don't get touched and

00:11:20,380 --> 00:11:26,470
then you flip from the current system to

00:11:23,110 --> 00:11:28,389
the new system on a reboot because it's

00:11:26,470 --> 00:11:30,040
all happening in one single atomic

00:11:28,389 --> 00:11:31,839
operation and that's captured in a

00:11:30,040 --> 00:11:35,529
snapshot in btrfs it can be easily

00:11:31,839 --> 00:11:37,480
rolled back and because it's actually

00:11:35,529 --> 00:11:39,550
happening at a reboot it's also trivial

00:11:37,480 --> 00:11:41,139
at that point the test has the reboot

00:11:39,550 --> 00:11:42,910
happened properly you know have all the

00:11:41,139 --> 00:11:45,009
services started up right is everything

00:11:42,910 --> 00:11:46,149
working the way it's meant to work so if

00:11:45,009 --> 00:11:48,610
it's not working the way it's meant to

00:11:46,149 --> 00:11:51,100
work it's incredibly easy to just throw

00:11:48,610 --> 00:11:54,009
that snapshot away reboot again and get

00:11:51,100 --> 00:11:55,660
back to where you were if you want to

00:11:54,009 --> 00:11:57,639
know more about transactional updates

00:11:55,660 --> 00:12:00,279
there's another talk in here

00:11:57,639 --> 00:12:02,199
12 o'clock tomorrow Ignace is doing it

00:12:00,279 --> 00:12:03,910
I'm talking about the state of

00:12:02,199 --> 00:12:05,500
transactional updates after the last

00:12:03,910 --> 00:12:08,529
couple of years of it being in openSUSE

00:12:05,500 --> 00:12:12,160
where it is how we're using it so not

00:12:08,529 --> 00:12:14,350
going to much detail here and admittedly

00:12:12,160 --> 00:12:15,670
it's not all wonderful we have some

00:12:14,350 --> 00:12:19,180
areas where we're trying to improve

00:12:15,670 --> 00:12:20,260
things so on Sunday at 10 o'clock or so

00:12:19,180 --> 00:12:21,850
in here

00:12:20,260 --> 00:12:23,290
Torsten is talking about some of the

00:12:21,850 --> 00:12:25,029
ideas we have for improving the

00:12:23,290 --> 00:12:26,649
situation of transactional updates with

00:12:25,029 --> 00:12:28,149
et Cie so the whole kind of figuration

00:12:26,649 --> 00:12:29,670
management side of things things are

00:12:28,149 --> 00:12:32,170
getting better we're minimizing it

00:12:29,670 --> 00:12:34,209
minimizing the problems but there's some

00:12:32,170 --> 00:12:37,360
still there and yeah we could do with

00:12:34,209 --> 00:12:41,980
some suggestions or hearing some of

00:12:37,360 --> 00:12:46,480
ideas there so with this combination of

00:12:41,980 --> 00:12:50,410
basically using salt and a read-only

00:12:46,480 --> 00:12:52,750
root filesystem we're doing our best to

00:12:50,410 --> 00:12:55,209
solve that configuration drift problem

00:12:52,750 --> 00:12:58,120
you know the idea with micro is what

00:12:55,209 --> 00:13:00,160
we're basically doing is minimizing what

00:12:58,120 --> 00:13:01,930
you can change on the system at the same

00:13:00,160 --> 00:13:04,509
time using salt so when you do change it

00:13:01,930 --> 00:13:07,389
it's as standardized across all of your

00:13:04,509 --> 00:13:09,910
machines as possible on top of that

00:13:07,389 --> 00:13:12,940
we're using transactional updates

00:13:09,910 --> 00:13:14,800
and on top of that with optimizing the

00:13:12,940 --> 00:13:16,960
footprint not installing too much not

00:13:14,800 --> 00:13:18,130
yeah not bundling a million files on

00:13:16,960 --> 00:13:19,540
there so of course there's less things

00:13:18,130 --> 00:13:23,260
on the system there's less things to go

00:13:19,540 --> 00:13:25,690
wrong and when we originally started

00:13:23,260 --> 00:13:27,150
with micros you know we've always talked

00:13:25,690 --> 00:13:29,860
about it in the context of containers

00:13:27,150 --> 00:13:31,600
but when you think about it it's

00:13:29,860 --> 00:13:34,270
actually far more generic than that it's

00:13:31,600 --> 00:13:36,430
a perfect operating system now for any

00:13:34,270 --> 00:13:38,920
sort of single purpose deployment

00:13:36,430 --> 00:13:41,080
you know containers is one example but a

00:13:38,920 --> 00:13:44,070
VM that's just doing one thing or an IOT

00:13:41,080 --> 00:13:47,920
device or something like that is yeah

00:13:44,070 --> 00:13:53,530
the perfect yeah micros perfectly sort

00:13:47,920 --> 00:13:56,140
of fits fits to that niche it's a

00:13:53,530 --> 00:13:58,390
rolling release based on tumbleweed in

00:13:56,140 --> 00:13:59,800
fact we're building it totally as part

00:13:58,390 --> 00:14:01,180
of the tumbleweed project so we

00:13:59,800 --> 00:14:03,430
advertise it and talk about it as if

00:14:01,180 --> 00:14:05,980
it's a different distribution but it's

00:14:03,430 --> 00:14:07,960
not a different code base it's tested in

00:14:05,980 --> 00:14:10,660
the tumbleweed project it's built in the

00:14:07,960 --> 00:14:12,010
tumbleweed project in OBS and it's

00:14:10,660 --> 00:14:15,820
actually part of the tumbleweed release

00:14:12,010 --> 00:14:17,440
process so if tumbleweed breaks in a way

00:14:15,820 --> 00:14:20,440
or tumble we change you something that

00:14:17,440 --> 00:14:22,480
breaks micro s then neither of them get

00:14:20,440 --> 00:14:24,970
shipped and vice versa if micro rest

00:14:22,480 --> 00:14:26,430
breaks something which I admit I do

00:14:24,970 --> 00:14:28,750
probably a bit more often than I should

00:14:26,430 --> 00:14:32,230
then I'm the reason tumbleweed doesn't

00:14:28,750 --> 00:14:33,580
have a snapshot that day but that means

00:14:32,230 --> 00:14:35,440
of course you know if you're using

00:14:33,580 --> 00:14:37,330
tumbleweed you know that quality you

00:14:35,440 --> 00:14:39,190
know what we're doing there and this is

00:14:37,330 --> 00:14:42,400
sort of part of that at that same level

00:14:39,190 --> 00:14:44,470
of always usable but of course with the

00:14:42,400 --> 00:14:46,000
additional benefit because we have

00:14:44,470 --> 00:14:48,790
transactional updates as the only way of

00:14:46,000 --> 00:14:51,460
doing it in some respects it's a safer

00:14:48,790 --> 00:14:53,920
benefit to the safer version of

00:14:51,460 --> 00:14:56,800
tumbleweed to use because it can roll

00:14:53,920 --> 00:14:58,240
itself back if it all goes wrong so but

00:14:56,800 --> 00:15:00,960
I'm getting ahead of myself I've got

00:14:58,240 --> 00:15:03,490
another talk about that later today

00:15:00,960 --> 00:15:06,790
we've got various deployment options for

00:15:03,490 --> 00:15:09,250
micro s available now so we have a fully

00:15:06,790 --> 00:15:12,370
working tested DVD and that ISO with

00:15:09,250 --> 00:15:14,890
Yost so you can download it boot up a

00:15:12,370 --> 00:15:17,590
system with it you get a slightly

00:15:14,890 --> 00:15:19,300
optimized version of es of workflow with

00:15:17,590 --> 00:15:20,830
after than the typical tumbleweed

00:15:19,300 --> 00:15:22,450
installation so there's less screens

00:15:20,830 --> 00:15:25,120
there's less steps it's less things to

00:15:22,450 --> 00:15:27,550
ask for but we've still kept a lot of

00:15:25,120 --> 00:15:28,930
options there on the summary screen at

00:15:27,550 --> 00:15:31,360
the end so you can really dig in

00:15:28,930 --> 00:15:32,740
customize add extra stuff because it's

00:15:31,360 --> 00:15:35,230
you asked what's the point if we didn't

00:15:32,740 --> 00:15:37,000
give you that option we also didn't have

00:15:35,230 --> 00:15:40,570
a bunch of these other things kind of

00:15:37,000 --> 00:15:44,440
most of these are in some state of

00:15:40,570 --> 00:15:46,839
development we have VM cloud images and

00:15:44,440 --> 00:15:49,060
PI images which based on what Fabian was

00:15:46,839 --> 00:15:50,200
talking about which there but still need

00:15:49,060 --> 00:15:53,020
a little bit more testing before they

00:15:50,200 --> 00:15:56,350
kind of officially part of part of the

00:15:53,020 --> 00:15:59,800
release process we have Yomi which is in

00:15:56,350 --> 00:16:01,030
a method of installing micro RS directly

00:15:59,800 --> 00:16:04,720
from sub snacker we'll have that very

00:16:01,030 --> 00:16:06,940
soon and for all of these images and

00:16:04,720 --> 00:16:08,260
ways of deploying you know we're using

00:16:06,940 --> 00:16:11,410
at the moment a combination of either

00:16:08,260 --> 00:16:14,260
cloud in it or soon ignition for

00:16:11,410 --> 00:16:16,120
configuring the micro system on first

00:16:14,260 --> 00:16:18,940
boot of handling things like the network

00:16:16,120 --> 00:16:21,100
configuration SSH keys etc so the idea

00:16:18,940 --> 00:16:23,460
being you just deploy it it boots up

00:16:21,100 --> 00:16:25,839
it's ready to go it's already running

00:16:23,460 --> 00:16:29,880
you don't have to do anything else just

00:16:25,839 --> 00:16:29,880
put your workload on top of it

00:16:29,940 --> 00:16:33,970
Yomi the the salt paste installer is a

00:16:32,560 --> 00:16:36,040
really exciting part of that you can

00:16:33,970 --> 00:16:38,380
come here come the gallery so the other

00:16:36,040 --> 00:16:41,140
room tomorrow at 3 o'clock and Alberto

00:16:38,380 --> 00:16:42,460
is talking about that so I don't have to

00:16:41,140 --> 00:16:44,170
go into more detail here which is nice

00:16:42,460 --> 00:16:48,910
because otherwise I've run out of time

00:16:44,170 --> 00:16:50,650
and with all of that put together the

00:16:48,910 --> 00:16:52,210
question then becomes what do you what

00:16:50,650 --> 00:16:54,400
what are you going to use micro RS for

00:16:52,210 --> 00:16:58,210
you know when it's not just a container

00:16:54,400 --> 00:17:01,150
operating system now so some examples

00:16:58,210 --> 00:17:02,950
sort of the obvious five obviously

00:17:01,150 --> 00:17:04,630
containers it's where we started we

00:17:02,950 --> 00:17:06,480
started this micro rest of playing

00:17:04,630 --> 00:17:09,760
around as a container operating system

00:17:06,480 --> 00:17:11,709
but anything that needs a single that's

00:17:09,760 --> 00:17:13,390
hosting a single service is a perfect

00:17:11,709 --> 00:17:16,870
use case for this so things like single

00:17:13,390 --> 00:17:21,490
service VMs cluster nodes hardware

00:17:16,870 --> 00:17:22,990
appliances raspberry pies IOT the idea

00:17:21,490 --> 00:17:24,640
with it you know even if you're running

00:17:22,990 --> 00:17:27,670
in a container or you're just putting an

00:17:24,640 --> 00:17:31,210
extra rpm package on top micro s should

00:17:27,670 --> 00:17:33,880
be the perfect openSUSE for that kind of

00:17:31,210 --> 00:17:37,690
in my case I've become a complete micro

00:17:33,880 --> 00:17:40,150
addict so you know I obviously chairman

00:17:37,690 --> 00:17:42,400
of openSUSE I been using leap I've been

00:17:40,150 --> 00:17:45,210
using tumbleweed at the moment right now

00:17:42,400 --> 00:17:47,260
I have one tumble one leap machine left

00:17:45,210 --> 00:17:50,260
everything else in my life is are the

00:17:47,260 --> 00:17:52,780
pure tumbleweed or micro errs including

00:17:50,260 --> 00:17:55,330
all of my personal infrastructure so I

00:17:52,780 --> 00:17:58,330
have an X cloud server that's running on

00:17:55,330 --> 00:18:00,940
micro s as a container host using the

00:17:58,330 --> 00:18:02,980
next cloud container there's my blog in

00:18:00,940 --> 00:18:04,480
fact there's my blog there's the cubic

00:18:02,980 --> 00:18:06,820
blog there's pretty much every blog that

00:18:04,480 --> 00:18:09,940
I'm involved in somewhere that's running

00:18:06,820 --> 00:18:11,530
on micro s running Jekyll on top in

00:18:09,940 --> 00:18:15,370
those cases I'm not using a container

00:18:11,530 --> 00:18:17,200
I'm just using you have plain jekyll

00:18:15,370 --> 00:18:19,990
happy m packages and running that one

00:18:17,200 --> 00:18:23,200
service there to deploy the website i

00:18:19,990 --> 00:18:25,270
have a retro gaming machine that's

00:18:23,200 --> 00:18:29,170
plugged into the back of my TV using a

00:18:25,270 --> 00:18:32,170
combination of micro s with retro arch

00:18:29,170 --> 00:18:33,580
and emulation station and that's been

00:18:32,170 --> 00:18:36,640
plugged into the back of my TV now for

00:18:33,580 --> 00:18:39,430
about a better part of a year and a half

00:18:36,640 --> 00:18:41,290
and i haven't actually looked at the

00:18:39,430 --> 00:18:42,520
console for that for that whole time

00:18:41,290 --> 00:18:44,230
it's just been plugged into the back

00:18:42,520 --> 00:18:45,940
it's been updating tumbleweed every

00:18:44,230 --> 00:18:48,400
single time rebooting itself in the

00:18:45,940 --> 00:18:49,840
middle of the night and whenever I feel

00:18:48,400 --> 00:18:51,940
like playing old retro games

00:18:49,840 --> 00:18:54,310
I just flick to that on my TV and it's

00:18:51,940 --> 00:18:55,630
there and it's working and it's running

00:18:54,310 --> 00:18:59,200
the latest version of emulation station

00:18:55,630 --> 00:19:01,450
based on what we have on OBS and it's

00:18:59,200 --> 00:19:02,680
never gone wrong I've even I didn't

00:19:01,450 --> 00:19:04,270
bring it with me today I might bring it

00:19:02,680 --> 00:19:05,590
with me tomorrow I take it to

00:19:04,270 --> 00:19:07,300
conferences we like to shove it on the

00:19:05,590 --> 00:19:09,580
booth when everybody's bored and you

00:19:07,300 --> 00:19:11,470
know play a few games and it's never

00:19:09,580 --> 00:19:14,380
gone wrong every time it boots up it's

00:19:11,470 --> 00:19:16,120
there working fine and you know I assume

00:19:14,380 --> 00:19:18,460
at some point tumbleweed has had a bad

00:19:16,120 --> 00:19:21,010
day but it automatically rolled back so

00:19:18,460 --> 00:19:23,380
as a dumb user I don't notice it's just

00:19:21,010 --> 00:19:26,590
they're always working with the newest

00:19:23,380 --> 00:19:28,180
stuff and yeah my minecraft server which

00:19:26,590 --> 00:19:30,730
me and my friends used to same again

00:19:28,180 --> 00:19:32,770
they're another micro s machine this

00:19:30,730 --> 00:19:34,530
case I think they I'm running it on on

00:19:32,770 --> 00:19:36,580
hetner so running it in the cloud and

00:19:34,530 --> 00:19:38,860
that's just running a container on top

00:19:36,580 --> 00:19:40,720
of it and it keeps on patching itself

00:19:38,860 --> 00:19:43,150
and I don't pay any attention to it I

00:19:40,720 --> 00:19:46,240
it's just there and working

00:19:43,150 --> 00:19:50,530
so after I'm done rambling on about this

00:19:46,240 --> 00:19:52,840
stuff issues talking about how he's

00:19:50,530 --> 00:19:55,630
using micro ice in production at 4:15 in

00:19:52,840 --> 00:19:57,130
here and in fact if you want to hear me

00:19:55,630 --> 00:20:00,460
ramble on about this stuff a bit more I

00:19:57,130 --> 00:20:03,760
have a crazy idea about using micro as a

00:20:00,460 --> 00:20:06,220
desktop it I messed remember this I

00:20:03,760 --> 00:20:07,780
passed in a hack week project and yeah

00:20:06,220 --> 00:20:10,900
I'll be talking about it more at 3

00:20:07,780 --> 00:20:13,330
o'clock in here as well if you're

00:20:10,900 --> 00:20:15,520
interested in playing with this it's

00:20:13,330 --> 00:20:17,950
part of tumbleweed so download the

00:20:15,520 --> 00:20:20,410
openSUSE - org slash tumbleweed in the

00:20:17,950 --> 00:20:22,660
appliances folder in the ISO folder you

00:20:20,410 --> 00:20:25,690
can download this now we don't have a

00:20:22,660 --> 00:20:27,520
website for micro s yet volunteers are

00:20:25,690 --> 00:20:28,870
welcome please you know this you know

00:20:27,520 --> 00:20:31,480
it's all new which moving stuff around

00:20:28,870 --> 00:20:34,330
so if you're interested in working on a

00:20:31,480 --> 00:20:37,120
website for that please find me around

00:20:34,330 --> 00:20:38,740
the conference let's talk you know what

00:20:37,120 --> 00:20:40,480
we need to obviously start spreading

00:20:38,740 --> 00:20:42,070
this and just having ISO sitting on a

00:20:40,480 --> 00:20:44,559
download server isn't going to get

00:20:42,070 --> 00:20:46,330
everybody using it but at least

00:20:44,559 --> 00:20:48,160
technically speaking we can say it works

00:20:46,330 --> 00:20:50,140
it's awesome we're building it we're

00:20:48,160 --> 00:20:51,460
testing it it's good quality so all the

00:20:50,140 --> 00:20:54,390
hard part is done now we just need to

00:20:51,460 --> 00:20:54,390
spread it around the whole world

00:20:54,600 --> 00:21:02,950
so that's micro s what about cubic in

00:20:59,460 --> 00:21:05,080
with micro SD find as this general

00:21:02,950 --> 00:21:06,790
purple general purpose single purpose

00:21:05,080 --> 00:21:08,410
operating system so you know you can use

00:21:06,790 --> 00:21:10,230
it for anything but we expect it to be

00:21:08,410 --> 00:21:13,530
deployed for just one thing at a time

00:21:10,230 --> 00:21:15,760
cubic is now a micro SD rivet --iv

00:21:13,530 --> 00:21:17,920
basically it's a showcase of what you

00:21:15,760 --> 00:21:21,010
can do with micro s when it comes to

00:21:17,920 --> 00:21:22,750
containers or kubernetes so we're still

00:21:21,010 --> 00:21:24,910
using the name cubic because people know

00:21:22,750 --> 00:21:26,890
it and you know it's part of the cube

00:21:24,910 --> 00:21:29,500
the kubernetes ecosystem it's known by

00:21:26,890 --> 00:21:30,490
the cloud native compute foundation and

00:21:29,500 --> 00:21:32,530
the like

00:21:30,490 --> 00:21:36,520
but in from a technical perspective it's

00:21:32,530 --> 00:21:39,090
just a micro SV variant and just like

00:21:36,520 --> 00:21:41,410
micro s it's built as part of tumbleweed

00:21:39,090 --> 00:21:43,870
interested as part of tumbleweed shipped

00:21:41,410 --> 00:21:45,460
as part of tumbleweed and so yeah all

00:21:43,870 --> 00:21:47,260
all works is part of that part of that

00:21:45,460 --> 00:21:51,100
family so we have three distributions

00:21:47,260 --> 00:21:53,340
all on one code base now containers in

00:21:51,100 --> 00:21:53,340
particular

00:21:53,480 --> 00:21:59,360
fun you know the they do a really good

00:21:57,620 --> 00:22:01,820
job of trying to solve that kind of

00:21:59,360 --> 00:22:03,140
problem pooling problem problem pooling

00:22:01,820 --> 00:22:07,070
problem well should have thought about

00:22:03,140 --> 00:22:09,080
that in and by you know separating the

00:22:07,070 --> 00:22:12,590
service or the application from the

00:22:09,080 --> 00:22:14,480
operating system and I've realized more

00:22:12,590 --> 00:22:16,400
and more you know as a as a distro

00:22:14,480 --> 00:22:17,660
engineer as a Linux geek you know I

00:22:16,400 --> 00:22:19,880
don't necessarily care about that

00:22:17,660 --> 00:22:21,830
because I mean kind of user that you

00:22:19,880 --> 00:22:23,600
know I am perfectly happy doing

00:22:21,830 --> 00:22:25,280
everything in our PMS because I care

00:22:23,600 --> 00:22:27,169
about the base system I care about the

00:22:25,280 --> 00:22:30,950
application like I worry about all this

00:22:27,169 --> 00:22:32,720
stuff but most users don't they don't

00:22:30,950 --> 00:22:34,460
want to worry about the operating system

00:22:32,720 --> 00:22:37,160
they just want to worry about that one

00:22:34,460 --> 00:22:38,900
thing that they care about you know the

00:22:37,160 --> 00:22:41,990
yeah their webserver their minecraft

00:22:38,900 --> 00:22:44,480
server whatever and containers give a

00:22:41,990 --> 00:22:45,860
really nice model of reflecting that

00:22:44,480 --> 00:22:47,570
technically speaking because they can

00:22:45,860 --> 00:22:50,000
take the develop the developer the user

00:22:47,570 --> 00:22:51,710
can just worry about that service they

00:22:50,000 --> 00:22:53,330
want to deploy and they can they can

00:22:51,710 --> 00:22:54,590
micromanage that they can really take

00:22:53,330 --> 00:22:56,570
care about what's in that container

00:22:54,590 --> 00:22:59,240
where they pour their container how they

00:22:56,570 --> 00:23:00,919
can figure it and that's the bits of the

00:22:59,240 --> 00:23:02,809
story they want to worry about and they

00:23:00,919 --> 00:23:05,179
just want something underneath that they

00:23:02,809 --> 00:23:08,120
can just leave and forget about and not

00:23:05,179 --> 00:23:11,210
do anything with but now we have micros

00:23:08,120 --> 00:23:12,530
and like a like my examples I've just

00:23:11,210 --> 00:23:14,299
deployed it and I don't look at it

00:23:12,530 --> 00:23:17,059
anymore it takes care of itself it

00:23:14,299 --> 00:23:18,650
patched itself so marrying these two

00:23:17,059 --> 00:23:22,549
things together works really really

00:23:18,650 --> 00:23:25,990
nicely but you need to of course have

00:23:22,549 --> 00:23:29,450
something to run those containers inside

00:23:25,990 --> 00:23:31,460
so we're huge fans of pod man in the

00:23:29,450 --> 00:23:35,630
Kubik project pod man is an alternative

00:23:31,460 --> 00:23:38,900
to to the other container one time

00:23:35,630 --> 00:23:41,840
beginning with D that people like one of

00:23:38,900 --> 00:23:43,370
the reasons pod man is a really

00:23:41,840 --> 00:23:45,320
interesting project is from an

00:23:43,370 --> 00:23:47,120
architectural perspective it's more

00:23:45,320 --> 00:23:49,669
interesting it doesn't have a single

00:23:47,120 --> 00:23:51,260
demon so with with docker there's this

00:23:49,669 --> 00:23:53,059
one big docker daemon which is a

00:23:51,260 --> 00:23:55,580
nightmare to secure it's a nightmare to

00:23:53,059 --> 00:23:57,350
manage and if that docker demon dies all

00:23:55,580 --> 00:24:01,010
of your containers become impossible to

00:23:57,350 --> 00:24:02,600
manage with pod man it's acting actually

00:24:01,010 --> 00:24:05,060
like an old-fashioned UNIX application

00:24:02,600 --> 00:24:07,700
in the sense of it starts a container

00:24:05,060 --> 00:24:09,530
as a process you can manage the process

00:24:07,700 --> 00:24:11,930
you can stop the process and yeah

00:24:09,530 --> 00:24:13,160
there's no demon to die you can still

00:24:11,930 --> 00:24:15,470
manage it if things go a little bit

00:24:13,160 --> 00:24:18,080
weird and it supports all of the same

00:24:15,470 --> 00:24:20,240
containers that docker does and in fact

00:24:18,080 --> 00:24:22,880
it uses all the same commands the docker

00:24:20,240 --> 00:24:25,100
does and some fun extra ones as well so

00:24:22,880 --> 00:24:26,480
basically from a lot of people if you

00:24:25,100 --> 00:24:29,840
want to transition from docker to pod

00:24:26,480 --> 00:24:32,150
man just alias docker to pod man and the

00:24:29,840 --> 00:24:34,280
commands will mostly work the same in

00:24:32,150 --> 00:24:36,320
the case of cubic we don't install dr by

00:24:34,280 --> 00:24:36,800
default anymore in fact i don't offer

00:24:36,320 --> 00:24:38,210
docker

00:24:36,800 --> 00:24:40,280
anywhere in the installation options

00:24:38,210 --> 00:24:42,980
anymore so you're gonna get pod man by

00:24:40,280 --> 00:24:44,090
default if you don't like that you can

00:24:42,980 --> 00:24:46,670
install docker from keep it from

00:24:44,090 --> 00:24:48,320
tumbleweed it'll work as well but yeah

00:24:46,670 --> 00:24:50,000
please if you're interested in

00:24:48,320 --> 00:24:53,720
containers it will try it play with it

00:24:50,000 --> 00:24:55,360
it's awesome I when I wrote this slide I

00:24:53,720 --> 00:24:58,160
forgot that Fabian was going before me

00:24:55,360 --> 00:25:00,590
but yes we have registry to openSUSE to

00:24:58,160 --> 00:25:04,400
organelle it's building containers

00:25:00,590 --> 00:25:06,980
directly from OBS it's rebuilding those

00:25:04,400 --> 00:25:08,360
containers as part of OBS rebuilding the

00:25:06,980 --> 00:25:10,600
packages that the containers always

00:25:08,360 --> 00:25:13,370
fresh they're signed and notarized and

00:25:10,600 --> 00:25:16,670
with pod man it's nice and simple you

00:25:13,370 --> 00:25:18,350
can just run a single command download

00:25:16,670 --> 00:25:20,180
to the latest official tumbleweed leap

00:25:18,350 --> 00:25:22,850
container and the more containers as

00:25:20,180 --> 00:25:24,260
people words we add it so if you want to

00:25:22,850 --> 00:25:26,150
know more about that and you weren't

00:25:24,260 --> 00:25:28,630
here half an hour ago

00:25:26,150 --> 00:25:30,860
you know just watch the video because

00:25:28,630 --> 00:25:32,030
Fabian did a really good job of

00:25:30,860 --> 00:25:33,380
explaining how we can build those

00:25:32,030 --> 00:25:38,060
containers and how you can contribute to

00:25:33,380 --> 00:25:40,490
that who has heard the word kubernetes

00:25:38,060 --> 00:25:43,310
before hey cool

00:25:40,490 --> 00:25:45,380
so yeah Kuban Nettie's is special you

00:25:43,310 --> 00:25:47,330
know containers running them at scale

00:25:45,380 --> 00:25:49,130
and when I say special I mean it in like

00:25:47,330 --> 00:25:52,190
the positive and the negative way of

00:25:49,130 --> 00:25:54,740
special you know it's designed to run

00:25:52,190 --> 00:25:57,800
hundreds of containers across dozens of

00:25:54,740 --> 00:26:00,830
machines and when you look at that from

00:25:57,800 --> 00:26:03,290
a distro engineers perspective it's an

00:26:00,830 --> 00:26:05,540
absolute nightmare you know that like

00:26:03,290 --> 00:26:08,120
the in like dr t talking about caspin

00:26:05,540 --> 00:26:09,680
cubic this morning you know the part of

00:26:08,120 --> 00:26:12,380
the reason why things have kind of gone

00:26:09,680 --> 00:26:15,050
a little awry there is there are just an

00:26:12,380 --> 00:26:16,340
infinite amount of moving parts you know

00:26:15,050 --> 00:26:17,720
i no matter which way of the stack you

00:26:16,340 --> 00:26:18,770
look at it you know from the users point

00:26:17,720 --> 00:26:19,850
of view

00:26:18,770 --> 00:26:21,080
they know they always want to have the

00:26:19,850 --> 00:26:22,550
latest container so you have the

00:26:21,080 --> 00:26:24,679
containers always moving really quickly

00:26:22,550 --> 00:26:26,120
and then of course the latest containers

00:26:24,679 --> 00:26:28,370
probably require the latest cube and

00:26:26,120 --> 00:26:30,740
that EC there this is lead to have cuba

00:26:28,370 --> 00:26:32,450
Nettie's moving really quickly and that

00:26:30,740 --> 00:26:34,040
of course then has an impact on your

00:26:32,450 --> 00:26:36,140
container one time if you're using cryo

00:26:34,040 --> 00:26:38,630
or docker and therefore that leads to

00:26:36,140 --> 00:26:40,160
move really quickly and then that of

00:26:38,630 --> 00:26:41,570
course means the base operating system

00:26:40,160 --> 00:26:43,010
has to move really quickly and somehow

00:26:41,570 --> 00:26:45,590
all these different parts will have to

00:26:43,010 --> 00:26:51,580
move really really quickly and at the

00:26:45,590 --> 00:26:53,929
same time actually work so it's it's oh

00:26:51,580 --> 00:26:55,040
it's the tradition it's the problems we

00:26:53,929 --> 00:26:56,660
were talking about earlier of you know

00:26:55,040 --> 00:26:58,700
configuration management patching

00:26:56,660 --> 00:27:00,400
Hardware you know just kind of amp it up

00:26:58,700 --> 00:27:03,230
to 11 and then some

00:27:00,400 --> 00:27:04,580
but with cubic because it's based on

00:27:03,230 --> 00:27:06,559
micro risk because it's adopting this

00:27:04,580 --> 00:27:10,070
principle of sort of single purpose

00:27:06,559 --> 00:27:12,100
operating systems it's basically my mind

00:27:10,070 --> 00:27:14,929
the perfect kubernetes operating system

00:27:12,100 --> 00:27:16,340
because the tumbler we base the moving

00:27:14,929 --> 00:27:17,929
quickly part is totally sort of you know

00:27:16,340 --> 00:27:20,270
we can move as fast as all of the up

00:27:17,929 --> 00:27:23,000
streams without worrying about things

00:27:20,270 --> 00:27:24,320
much at all means we can also integrate

00:27:23,000 --> 00:27:29,090
the latest stuff from upstream right

00:27:24,320 --> 00:27:32,150
away so cube ADM when cube in cubic for

00:27:29,090 --> 00:27:33,710
kubernetes we don't use pod man because

00:27:32,150 --> 00:27:39,650
pod man is kind of more designed for

00:27:33,710 --> 00:27:43,429
your single host instead we're using

00:27:39,650 --> 00:27:45,350
cryo which is basically the same thing

00:27:43,429 --> 00:27:48,400
but kind of optimized for Cooper net for

00:27:45,350 --> 00:27:51,800
kubernetes rather than a single host and

00:27:48,400 --> 00:27:54,230
coming soon well in fact it technically

00:27:51,800 --> 00:27:56,390
Oh boom oh yeah sorry I just realized my

00:27:54,230 --> 00:27:57,070
marito is pointing slightly I there we

00:27:56,390 --> 00:28:02,710
go

00:27:57,070 --> 00:28:05,809
cubic yeah everything I was just saying

00:28:02,710 --> 00:28:08,210
and yeah coming soon we have cured which

00:28:05,809 --> 00:28:12,010
is a service running on your kubernetes

00:28:08,210 --> 00:28:15,650
cluster to kind of help orchestrate the

00:28:12,010 --> 00:28:18,290
rebooting aspect of patching cubic

00:28:15,650 --> 00:28:20,000
systems so because we have cubic where a

00:28:18,290 --> 00:28:23,059
patch itself and then it needs a reboot

00:28:20,000 --> 00:28:25,010
for the patching to take effect and with

00:28:23,059 --> 00:28:26,330
kubernetes you have a large cluster with

00:28:25,010 --> 00:28:27,919
hundreds of different machines all doing

00:28:26,330 --> 00:28:29,720
different things you don't necessarily

00:28:27,919 --> 00:28:31,309
want to have those machines randomly

00:28:29,720 --> 00:28:32,750
rebooting when it's really inappropriate

00:28:31,309 --> 00:28:35,360
like you know

00:28:32,750 --> 00:28:37,190
when it's busy so with cured you have a

00:28:35,360 --> 00:28:38,810
server sitting on kubernetes it's aware

00:28:37,190 --> 00:28:40,610
of what your cluster is doing cured

00:28:38,810 --> 00:28:43,310
stands for kubernetes reboot daemon by

00:28:40,610 --> 00:28:45,530
the way and then so cured will make sure

00:28:43,310 --> 00:28:47,330
okay or cured is not integrated with

00:28:45,530 --> 00:28:49,370
transactional update so it can be aware

00:28:47,330 --> 00:28:51,440
okay these machines are ready for a

00:28:49,370 --> 00:28:54,820
reboot and then they'll trigger the

00:28:51,440 --> 00:28:58,160
reboot when the time is appropriate and

00:28:54,820 --> 00:29:00,260
we also have a new tool called cubic

00:28:58,160 --> 00:29:02,780
control which helps streamline and

00:29:00,260 --> 00:29:04,730
bootstrap sort of the whole cubic

00:29:02,780 --> 00:29:06,650
kubernetes story so we're using cube a

00:29:04,730 --> 00:29:08,900
cube a DM to actually start the cluster

00:29:06,650 --> 00:29:10,240
built the cluster but with keep it

00:29:08,900 --> 00:29:13,190
control we kind of wrap that around

00:29:10,240 --> 00:29:15,680
helps set up a salt master and configure

00:29:13,190 --> 00:29:17,150
salt all at the same time but

00:29:15,680 --> 00:29:20,660
unfortunately I don't have time to talk

00:29:17,150 --> 00:29:24,710
about that today setting up a kubernetes

00:29:20,660 --> 00:29:27,440
cluster on cubic is incredibly easy the

00:29:24,710 --> 00:29:30,230
documentation on the wiki we need to

00:29:27,440 --> 00:29:32,540
have at least two machines you setup the

00:29:30,230 --> 00:29:34,310
Installer at the moment using a store

00:29:32,540 --> 00:29:38,780
you can use the the images we're working

00:29:34,310 --> 00:29:40,250
on basically install the SSH is

00:29:38,780 --> 00:29:41,900
automatically configured in fact in

00:29:40,250 --> 00:29:45,640
addition to SSH we also have this really

00:29:41,900 --> 00:29:49,370
cool tool called tallow which sets up

00:29:45,640 --> 00:29:51,550
basically like fail to ban so tallow is

00:29:49,370 --> 00:29:53,810
listening to your systemd journal

00:29:51,550 --> 00:29:55,550
figuring out who's trying to access your

00:29:53,810 --> 00:29:57,380
SSH connections and if it's getting too

00:29:55,550 --> 00:29:59,690
many failed attempts to guess the root

00:29:57,380 --> 00:30:02,090
part root password it just blocks them

00:29:59,690 --> 00:30:04,640
sets up the IP IP table rules and yeah

00:30:02,090 --> 00:30:06,320
nice nice and secure so another one of

00:30:04,640 --> 00:30:08,930
those nice things with cubic if you

00:30:06,320 --> 00:30:10,430
don't have to worry about configuring a

00:30:08,930 --> 00:30:13,180
much after the deployment it's already

00:30:10,430 --> 00:30:15,470
there already taken care of itself

00:30:13,180 --> 00:30:18,830
yeah once you've got your first cubic

00:30:15,470 --> 00:30:21,880
node installed all it takes to set up

00:30:18,830 --> 00:30:24,200
that node in the cluster is one command

00:30:21,880 --> 00:30:25,640
and in fact if you've seen previous

00:30:24,200 --> 00:30:28,100
versions of the slide that command used

00:30:25,640 --> 00:30:29,630
to be really long thanks to working with

00:30:28,100 --> 00:30:31,100
upstream we've managed to solve most of

00:30:29,630 --> 00:30:34,700
the issues so it's now just one command

00:30:31,100 --> 00:30:37,910
and a string for setting up the network

00:30:34,700 --> 00:30:39,740
and in fact the talk tomorrow about see

00:30:37,910 --> 00:30:42,200
Liam actually there's an alternative way

00:30:39,740 --> 00:30:45,019
of doing this to use what you what you

00:30:42,200 --> 00:30:48,570
will learn about see Liam tomorrow

00:30:45,019 --> 00:30:51,899
when that's finished she by diem gives

00:30:48,570 --> 00:30:54,299
you a nice command which is way too

00:30:51,899 --> 00:30:56,039
small to read here basically that that's

00:30:54,299 --> 00:30:58,950
the command you need to run on the other

00:30:56,039 --> 00:31:01,140
nodes on your cluster so it will join

00:30:58,950 --> 00:31:03,419
the cluster automatically have its keys

00:31:01,140 --> 00:31:05,399
configured and yet trust established

00:31:03,419 --> 00:31:08,630
between the other nodes in the cluster

00:31:05,399 --> 00:31:11,789
and the masks that you just configured

00:31:08,630 --> 00:31:13,380
then you need to configure a client so

00:31:11,789 --> 00:31:15,360
you can manage the system that's nice

00:31:13,380 --> 00:31:16,889
and easy because cube ATM has already

00:31:15,360 --> 00:31:18,659
made the config files for that so you

00:31:16,889 --> 00:31:22,380
basically just copy the config files to

00:31:18,659 --> 00:31:24,960
the right location need to have a

00:31:22,380 --> 00:31:26,190
network again nice and easy because

00:31:24,960 --> 00:31:28,380
we're in this wonderful container world

00:31:26,190 --> 00:31:30,210
so single command there that will deploy

00:31:28,380 --> 00:31:33,450
your container cluster to your yeah

00:31:30,210 --> 00:31:37,679
container your container Network to your

00:31:33,450 --> 00:31:40,799
cluster and after those few commands

00:31:37,679 --> 00:31:42,840
you're done all of you just add all the

00:31:40,799 --> 00:31:46,049
additional nodes using that command you

00:31:42,840 --> 00:31:47,789
were given at the beginning and you end

00:31:46,049 --> 00:31:49,830
up with the kubernetes cluster so you

00:31:47,789 --> 00:31:51,870
can then start deploying your containers

00:31:49,830 --> 00:31:54,389
have the containers automatically moving

00:31:51,870 --> 00:31:55,049
around multiple machines taking care of

00:31:54,389 --> 00:31:58,260
themselves

00:31:55,049 --> 00:31:59,820
yeah so in and that combination being

00:31:58,260 --> 00:32:01,649
there for then you know cubics

00:31:59,820 --> 00:32:03,870
underneath patching itself rebooting

00:32:01,649 --> 00:32:05,460
itself the containers on top moving

00:32:03,870 --> 00:32:08,389
around the cluster so everything was

00:32:05,460 --> 00:32:10,889
always working all the time

00:32:08,389 --> 00:32:12,330
to know more about cubic yeah because

00:32:10,889 --> 00:32:13,440
there's just so many talks about all

00:32:12,330 --> 00:32:14,309
this stuff and I didn't have to fit it

00:32:13,440 --> 00:32:17,419
all in here

00:32:14,309 --> 00:32:22,380
dennis is talking here today about using

00:32:17,419 --> 00:32:25,940
cubic with SEF and with rook yeah just

00:32:22,380 --> 00:32:29,519
before five o'clock and then after him

00:32:25,940 --> 00:32:33,570
we got to talk about cubic and open STS

00:32:29,519 --> 00:32:36,029
as well and with that I'm done with ten

00:32:33,570 --> 00:32:38,159
minutes left for questions so does

00:32:36,029 --> 00:32:39,929
anybody have any and if you do I think I

00:32:38,159 --> 00:32:41,070
have the the speaking microphone so I'm

00:32:39,929 --> 00:32:43,350
afraid you're gonna have to go at the

00:32:41,070 --> 00:32:45,799
back because I broke the other

00:32:43,350 --> 00:32:45,799
microphone

00:32:47,560 --> 00:32:54,220
hello Joe

00:32:49,630 --> 00:32:57,380
hey so you've really advertised using

00:32:54,220 --> 00:32:59,570
microwaves are there any reasons not to

00:32:57,380 --> 00:33:01,340
use it I mean it looks like why wouldn't

00:32:59,570 --> 00:33:03,590
we just change everything to microwaves

00:33:01,340 --> 00:33:08,510
why why isn't it the perfect solution

00:33:03,590 --> 00:33:10,400
for everyone so if you if the machine if

00:33:08,510 --> 00:33:13,000
the deployment of the machines the VM or

00:33:10,400 --> 00:33:15,680
whatever is just going to do one job I

00:33:13,000 --> 00:33:16,160
think it might be the perfect answer for

00:33:15,680 --> 00:33:18,440
everything

00:33:16,160 --> 00:33:22,010
that's what I want to explore a little

00:33:18,440 --> 00:33:25,880
more in my talk an hour from now I'm not

00:33:22,010 --> 00:33:27,920
sure quite sure on that but if you're

00:33:25,880 --> 00:33:29,780
the kind of person that wants to tinker

00:33:27,920 --> 00:33:31,550
around with the Machine once it's

00:33:29,780 --> 00:33:33,320
deployed you know like let's say for

00:33:31,550 --> 00:33:35,090
example me as a typical tumbleweed use

00:33:33,320 --> 00:33:36,890
it where I'm installing packages and

00:33:35,090 --> 00:33:39,070
removing packages and really messing

00:33:36,890 --> 00:33:41,600
around with the innards of the system

00:33:39,070 --> 00:33:43,390
micros is not a friendly system for that

00:33:41,600 --> 00:33:45,650
because you're going to be rebooting

00:33:43,390 --> 00:33:49,090
every time you're making a change to

00:33:45,650 --> 00:33:52,160
that part of the operating system so if

00:33:49,090 --> 00:33:56,030
ya tinkering and playing around is your

00:33:52,160 --> 00:33:57,980
thing micros isn't the best for that but

00:33:56,030 --> 00:34:00,440
if it's more of a case of you want to

00:33:57,980 --> 00:34:01,970
deploy it have it just do one job and

00:34:00,440 --> 00:34:04,520
wants it to deploy pretty much forget

00:34:01,970 --> 00:34:08,500
about it I really think there's a place

00:34:04,520 --> 00:34:12,200
to use my Chris in tons of places yes

00:34:08,500 --> 00:34:14,090
yes I don't question what I'm hearing

00:34:12,200 --> 00:34:16,429
from some users is that you know the

00:34:14,090 --> 00:34:18,290
reboots are just too frequent because

00:34:16,429 --> 00:34:21,919
every update has to go through the

00:34:18,290 --> 00:34:23,870
reboot would there be a way of doing it

00:34:21,919 --> 00:34:27,340
like in two worlds like if you have

00:34:23,870 --> 00:34:30,679
updates that are safe to apply like non

00:34:27,340 --> 00:34:33,830
kernel updates so we could still do that

00:34:30,679 --> 00:34:37,340
and then kind of make the file system

00:34:33,830 --> 00:34:39,140
read-only do the copy only if you have

00:34:37,340 --> 00:34:40,460
to do like the reboot that the big ones

00:34:39,140 --> 00:34:42,110
every three months where you do the

00:34:40,460 --> 00:34:47,210
kernel updates that major security

00:34:42,110 --> 00:34:48,560
updates but would you would you like the

00:34:47,210 --> 00:34:50,540
answer that Susan management would

00:34:48,560 --> 00:34:52,669
probably like me to say or my person who

00:34:50,540 --> 00:34:57,380
answer first

00:34:52,669 --> 00:34:59,930
I don't trust maintenance updates

00:34:57,380 --> 00:35:03,290
they have a habit of breaking more than

00:34:59,930 --> 00:35:07,940
tumbleweed updates due partly because

00:35:03,290 --> 00:35:09,380
the there is a this is a legitimate a

00:35:07,940 --> 00:35:11,900
technical reason for that you know it's

00:35:09,380 --> 00:35:13,490
it's incredibly hard when you're just

00:35:11,900 --> 00:35:16,880
trying to change that one thing in a

00:35:13,490 --> 00:35:19,640
complex system you know that that that

00:35:16,880 --> 00:35:22,610
kind of desire to minimize the change is

00:35:19,640 --> 00:35:24,500
more it brings with it certain risks

00:35:22,610 --> 00:35:26,300
that in tumbleweed we just managed a

00:35:24,500 --> 00:35:29,060
blast right past because we can change

00:35:26,300 --> 00:35:30,860
everything we can always you know if

00:35:29,060 --> 00:35:32,690
that one tiny change needs to change

00:35:30,860 --> 00:35:34,400
twenty libraries we change those twenty

00:35:32,690 --> 00:35:38,240
libraries we test everything we ship

00:35:34,400 --> 00:35:40,190
everything and so the the micro s

00:35:38,240 --> 00:35:42,890
patching modo is kind of a reflection of

00:35:40,190 --> 00:35:44,600
that philosophy it may be there is room

00:35:42,890 --> 00:35:46,010
for a hybrid if there is I'm not

00:35:44,600 --> 00:35:48,200
probably the best person to find it

00:35:46,010 --> 00:35:55,400
because I'm very much on the rolling

00:35:48,200 --> 00:35:57,020
everything side of things good okay yes

00:35:55,400 --> 00:35:58,250
oh by the way I'm running my laptop on

00:35:57,020 --> 00:35:58,610
top of it so I know what you're talking

00:35:58,250 --> 00:36:08,300
about

00:35:58,610 --> 00:36:13,130
yeah when you say doing one thing mm-hmm

00:36:08,300 --> 00:36:18,920
what do you mean in so much as would

00:36:13,130 --> 00:36:21,950
something like OBS classes doing one

00:36:18,920 --> 00:36:24,170
thing or is that which part of OBS so

00:36:21,950 --> 00:36:28,240
you talk about workers etcetera normal

00:36:24,170 --> 00:36:30,440
yeah it's it's a bit of a nebulous term

00:36:28,240 --> 00:36:34,940
kind of on purpose because I kind of

00:36:30,440 --> 00:36:38,630
scope of one thing you know can be at

00:36:34,940 --> 00:36:40,130
vary around so you know the typical kind

00:36:38,630 --> 00:36:41,450
of one thing would be like a container

00:36:40,130 --> 00:36:44,750
host so you know in that case it's in a

00:36:41,450 --> 00:36:47,360
micro S Plus pod man that's the scope of

00:36:44,750 --> 00:36:49,760
micro s the one thing is pod man the

00:36:47,360 --> 00:36:51,860
fact is pod man might be running 20

00:36:49,760 --> 00:36:53,930
different things in a container that's

00:36:51,860 --> 00:36:54,920
out of scope of the operating system

00:36:53,930 --> 00:36:56,360
we're not going to reboot because you

00:36:54,920 --> 00:36:57,740
deployed a new container you know we're

00:36:56,360 --> 00:36:59,420
gonna you know the system state is

00:36:57,740 --> 00:37:04,610
changing because pod man's getting an

00:36:59,420 --> 00:37:06,710
update so with micro OS there's nothing

00:37:04,610 --> 00:37:10,970
stopping somebody installing micro s

00:37:06,710 --> 00:37:14,040
today doing transactional update pkg in

00:37:10,970 --> 00:37:17,160
20 different packages turning all of

00:37:14,040 --> 00:37:20,730
them on and having those 20 things be

00:37:17,160 --> 00:37:24,660
the one thing for micro s but you bring

00:37:20,730 --> 00:37:26,280
with that you bring with that more of

00:37:24,660 --> 00:37:27,630
like Joe mentioned here at the patching

00:37:26,280 --> 00:37:29,280
problem the more things you deploy there

00:37:27,630 --> 00:37:30,750
the more things are gonna move the more

00:37:29,280 --> 00:37:33,210
things you're gonna need to reboot

00:37:30,750 --> 00:37:35,520
because and so if you try to make this

00:37:33,210 --> 00:37:38,130
one machine do everything you know you

00:37:35,520 --> 00:37:39,750
kind of lose the benefit of mic micro s

00:37:38,130 --> 00:37:41,520
being this kind of just simple deploy

00:37:39,750 --> 00:37:43,680
forget about it options so there's a

00:37:41,520 --> 00:37:45,359
there's a balancing act in between with

00:37:43,680 --> 00:37:47,940
something like OBS I think OBS is

00:37:45,359 --> 00:37:50,700
smartly designed enough then if I'm any

00:37:47,940 --> 00:37:52,050
of those parts are kind of already built

00:37:50,700 --> 00:37:53,940
in that way like the workers you know

00:37:52,050 --> 00:37:56,940
workers would make probably make

00:37:53,940 --> 00:37:59,430
perfectly good microwaves use cases cuz

00:37:56,940 --> 00:38:00,690
you know there's you deploy micros you

00:37:59,430 --> 00:38:02,040
have the worker software on there and

00:38:00,690 --> 00:38:07,980
then everything else is VMs for the

00:38:02,040 --> 00:38:10,260
build part yeah so that's yeah that

00:38:07,980 --> 00:38:13,320
would work um am i talking later about

00:38:10,260 --> 00:38:15,510
the micro SD s top you know a desktop is

00:38:13,320 --> 00:38:18,119
kind of stretching the one thing a

00:38:15,510 --> 00:38:19,890
little bit but that's that's where I

00:38:18,119 --> 00:38:21,960
want to be exploring with that Thanks

00:38:19,890 --> 00:38:24,690
yeah when are we exploring that of you

00:38:21,960 --> 00:38:27,240
know does it make sense to install

00:38:24,690 --> 00:38:30,060
Weiland and X and gnome and kind of

00:38:27,240 --> 00:38:31,530
define that is the one thing and see

00:38:30,060 --> 00:38:33,180
where that goes so I don't want a

00:38:31,530 --> 00:38:35,099
strictly defined it down to like oh it

00:38:33,180 --> 00:38:37,980
has to be one can take one package or

00:38:35,099 --> 00:38:39,089
whatever like you know it's openSUSE we

00:38:37,980 --> 00:38:42,210
want to figure out where that line

00:38:39,089 --> 00:38:44,820
perfectly is but I would if someone's

00:38:42,210 --> 00:38:46,800
gonna you know file a bug on micro s and

00:38:44,820 --> 00:38:49,050
say you know I installed these 20 things

00:38:46,800 --> 00:38:51,690
and one of them doesn't work you know

00:38:49,050 --> 00:38:53,310
I'm probably not gonna be you know that

00:38:51,690 --> 00:38:56,570
I'm gonna suggest they're pretty gonna

00:38:53,310 --> 00:38:56,570
use something else other than micro s

00:38:57,400 --> 00:39:09,859
any more questions yep oh cool I have a

00:39:06,619 --> 00:39:13,009
one question about a foul system because

00:39:09,859 --> 00:39:15,980
I think now you you can kind of create a

00:39:13,009 --> 00:39:19,999
snapshot for the system and go back to a

00:39:15,980 --> 00:39:26,900
previous version but Steel's of the file

00:39:19,999 --> 00:39:30,079
system sometime may broke it's just

00:39:26,900 --> 00:39:36,559
build-up and you cannot read anything

00:39:30,079 --> 00:39:39,170
into the disk I mean is the micro OS

00:39:36,559 --> 00:39:42,980
have something to solve the problems

00:39:39,170 --> 00:39:47,930
that the file system itself may fail and

00:39:42,980 --> 00:39:51,049
we can kind of recover it so but battery

00:39:47,930 --> 00:39:54,049
FS has a bit of a reputation for being a

00:39:51,049 --> 00:39:55,460
bit of a hard beast to live with in my

00:39:54,049 --> 00:39:59,690
opinion is that actually mostly and

00:39:55,460 --> 00:40:00,680
mostly an unfair reputation and I'll try

00:39:59,690 --> 00:40:03,319
and answer your question there kind of

00:40:00,680 --> 00:40:05,119
in most parts in terms of the case of

00:40:03,319 --> 00:40:07,789
butter FS filling up because of

00:40:05,119 --> 00:40:10,609
snapshots which is something in openSUSE

00:40:07,789 --> 00:40:14,569
we've had a ton of and part of that is

00:40:10,609 --> 00:40:16,279
at least partially my fault there is a

00:40:14,569 --> 00:40:19,670
balancing act of making sure that the

00:40:16,279 --> 00:40:21,950
root filesystem is big enough for the

00:40:19,670 --> 00:40:24,859
snapshots caused by the root filesystem

00:40:21,950 --> 00:40:26,269
changing we never we have until recently

00:40:24,859 --> 00:40:29,569
I don't think we got that balance right

00:40:26,269 --> 00:40:31,579
in currently in leap 15.1 in micro s in

00:40:29,569 --> 00:40:33,799
tumbleweed I really strongly believe

00:40:31,579 --> 00:40:35,450
we've solved that problem now because I

00:40:33,799 --> 00:40:38,809
spent a really hard time trying to get

00:40:35,450 --> 00:40:41,210
the the lip storage ng sizing rules for

00:40:38,809 --> 00:40:43,999
all of those things to be far more

00:40:41,210 --> 00:40:46,369
accurate for the real world so we

00:40:43,999 --> 00:40:49,609
generally have you asked automatically

00:40:46,369 --> 00:40:51,619
making the root filesystem bigger so you

00:40:49,609 --> 00:40:54,440
know it doesn't you yeah it has more

00:40:51,619 --> 00:40:56,180
space for those snapshots plus we Arvind

00:40:54,440 --> 00:40:58,249
on the apps team has done a lot of work

00:40:56,180 --> 00:41:01,059
with snapper so it tidies up itself

00:40:58,249 --> 00:41:03,259
better so those two things together mean

00:41:01,059 --> 00:41:03,680
snapper shouldn't be filling up the disk

00:41:03,259 --> 00:41:06,200
anymore

00:41:03,680 --> 00:41:08,390
full stop that should be fixed the other

00:41:06,200 --> 00:41:10,549
kind of part of the reputation of be TFS

00:41:08,390 --> 00:41:11,090
being a bit fragile I talked about it

00:41:10,549 --> 00:41:13,730
actually

00:41:11,090 --> 00:41:14,260
see last year there's a lightning talk I

00:41:13,730 --> 00:41:16,580
did on it

00:41:14,260 --> 00:41:20,510
the biggest problem is battery FS is

00:41:16,580 --> 00:41:21,920
it's it's it's aware of what's going on

00:41:20,510 --> 00:41:24,200
with the desk you know it's smart it's

00:41:21,920 --> 00:41:25,280
got it's got a data it's got its data

00:41:24,200 --> 00:41:26,600
it's got its metadata and it's

00:41:25,280 --> 00:41:28,370
constantly checking that those things

00:41:26,600 --> 00:41:30,610
are in sync and when something goes

00:41:28,370 --> 00:41:33,220
wrong it takes the action of like

00:41:30,610 --> 00:41:35,060
mounting everything is read-only so

00:41:33,220 --> 00:41:37,040
people think it's broken

00:41:35,060 --> 00:41:39,620
it's not broken it's just taking care of

00:41:37,040 --> 00:41:41,920
itself unfortunately when that happens

00:41:39,620 --> 00:41:43,160
most people have used something like

00:41:41,920 --> 00:41:45,080
ext4

00:41:43,160 --> 00:41:47,150
and what's the first thing we all do

00:41:45,080 --> 00:41:49,820
when ext4 is misbehaving

00:41:47,150 --> 00:41:53,030
we run FS check if you manifest check on

00:41:49,820 --> 00:41:55,490
btrfs especially with - - repair you're

00:41:53,030 --> 00:41:57,380
probably gonna break btrfs it's why the

00:41:55,490 --> 00:41:59,840
documentation says this is the last

00:41:57,380 --> 00:42:02,900
thing you should ever do but nobody

00:41:59,840 --> 00:42:06,100
reads the documentation on the wiki for

00:42:02,900 --> 00:42:08,510
openSUSE we have a 14 step guide on

00:42:06,100 --> 00:42:12,620
basically what to do when btrfs

00:42:08,510 --> 00:42:13,940
misbehaves for 99.9% of people you don't

00:42:12,620 --> 00:42:16,850
get past step 4

00:42:13,940 --> 00:42:19,970
before it's fixed and actually running

00:42:16,850 --> 00:42:22,850
FF check is the last step so you know

00:42:19,970 --> 00:42:24,920
it's but when you do the right things

00:42:22,850 --> 00:42:27,500
with by two FS it's perfectly reliable

00:42:24,920 --> 00:42:30,260
you know souza are using it in the

00:42:27,500 --> 00:42:33,140
enterprise so it's just yeah

00:42:30,260 --> 00:42:35,540
read the manual read the wiki and don't

00:42:33,140 --> 00:42:37,520
panic when something goes wrong it I've

00:42:35,540 --> 00:42:39,230
never had a BFS system in the last four

00:42:37,520 --> 00:42:43,120
years I haven't been able to fix and

00:42:39,230 --> 00:42:49,190
I've had a lot of broken systems thanks

00:42:43,120 --> 00:42:50,620
cool good I think I'm out of time thank

00:42:49,190 --> 00:42:51,420
you very much

00:42:50,620 --> 00:42:54,550
[Applause]

00:42:51,420 --> 00:42:54,550

YouTube URL: https://www.youtube.com/watch?v=nIwqzGbX-oc


