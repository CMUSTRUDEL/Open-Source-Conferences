Title: openSUSE Conference 2019 - openSUSE on ARM
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2351-opensuse-on-arm

What happened since a year

This talk will give an overview of what happens since about a year for openSUSE on ARM. What is the current status and what is on the TODO list.

This talk will give an overview of what happens since about a year for openSUSE on ARM. What is the current status and what is on the TODO list.

Guillaume Gardet
Captions: 
	00:00:05,930 --> 00:00:15,690
good morning I'm Guillaume Gotti I work

00:00:12,510 --> 00:00:19,770
for armed as partner engineer dedicated

00:00:15,690 --> 00:00:24,689
to Suzhou and openSUSE and I will cover

00:00:19,770 --> 00:00:32,070
what happened since about a year opens

00:00:24,689 --> 00:00:36,330
to the side for armed I will start with

00:00:32,070 --> 00:00:38,699
what is opened to the unarmed then I

00:00:36,330 --> 00:00:43,049
will give an overview of openSUSE UNAM

00:00:38,699 --> 00:00:46,470
workflow of the development and we will

00:00:43,049 --> 00:00:49,589
see what happened on OBS side on open QA

00:00:46,470 --> 00:00:54,479
side and specifically on tumbleweed

00:00:49,589 --> 00:00:58,619
cubic leap a little word about openSUSE

00:00:54,479 --> 00:01:02,159
wiki and finally the to-do lists and we

00:00:58,619 --> 00:01:05,210
will have some time to for Christians at

00:01:02,159 --> 00:01:05,210
the end of the talk

00:01:08,020 --> 00:01:15,410
so what is open season um the short

00:01:11,270 --> 00:01:19,790
answer is obliviously openSUSE running

00:01:15,410 --> 00:01:25,910
on architectures what does it mean

00:01:19,790 --> 00:01:30,230
we supports 32-bit architectures on v6

00:01:25,910 --> 00:01:35,330
or for tumbleweed only we also support

00:01:30,230 --> 00:01:38,600
on v7 on tumbleweed and leap and also

00:01:35,330 --> 00:01:45,800
64-bit architectures on both tumbleweed

00:01:38,600 --> 00:01:49,030
and leap arm system very right we cover

00:01:45,800 --> 00:01:53,390
very small embedded systems such as

00:01:49,030 --> 00:01:58,010
Raspberry Pi but we also have some very

00:01:53,390 --> 00:02:03,550
powerful server system such as the Sunda

00:01:58,010 --> 00:02:06,790
x2 from formerly caveum now Marvel and

00:02:03,550 --> 00:02:09,890
there is some differences between those

00:02:06,790 --> 00:02:14,090
systems on embedded world we are more

00:02:09,890 --> 00:02:18,260
with custom boot loaders which is a bit

00:02:14,090 --> 00:02:23,060
painful sometimes and on the server side

00:02:18,260 --> 00:02:33,110
we use UEFI so we have a single image

00:02:23,060 --> 00:02:34,400
and you can run it on your server before

00:02:33,110 --> 00:02:37,100
talking about

00:02:34,400 --> 00:02:42,680
openSUSE on our more flow a little water

00:02:37,100 --> 00:02:46,519
about and openSUSE workflow on x86 for

00:02:42,680 --> 00:02:51,290
tumbleweed when we want to update some

00:02:46,519 --> 00:02:56,209
packages you submit it to factory it is

00:02:51,290 --> 00:03:00,170
reviewed it is tested and once active

00:02:56,209 --> 00:03:07,670
accepted to factory it is pushed to open

00:03:00,170 --> 00:03:10,880
QA for further tests and if it's ok the

00:03:07,670 --> 00:03:14,980
updates is released to users on download

00:03:10,880 --> 00:03:14,980
server as number with

00:03:16,810 --> 00:03:23,630
for the arm side we have open to the

00:03:20,480 --> 00:03:29,600
factory arm projects which is simply a

00:03:23,630 --> 00:03:33,500
link to openSUSE factory x86 the same

00:03:29,600 --> 00:03:37,550
for lip we have a project link from

00:03:33,500 --> 00:03:40,400
openSUSE lip 15 one arm to the x86

00:03:37,550 --> 00:03:46,160
project which is open to the lip 15 one

00:03:40,400 --> 00:03:51,050
and so we reuse all the sources it's

00:03:46,160 --> 00:03:53,450
really the same nobody is on top it's

00:03:51,050 --> 00:03:56,990
updating in real-time so when you have

00:03:53,450 --> 00:04:01,100
an updates on x86 factory you get the

00:03:56,990 --> 00:04:03,470
update on arm side and there is just a

00:04:01,100 --> 00:04:08,300
very small overlay which is a variable

00:04:03,470 --> 00:04:11,270
to under the snapshot version is the

00:04:08,300 --> 00:04:17,109
content of iso and ftp trees on the arm

00:04:11,270 --> 00:04:21,820
side here you have a screenshot of the

00:04:17,109 --> 00:04:24,980
openSUSE lip project so you can see that

00:04:21,820 --> 00:04:29,600
we have only four packages for the

00:04:24,980 --> 00:04:35,900
overlay and all the rest are in aerated

00:04:29,600 --> 00:04:38,990
packages from the x86 project so if you

00:04:35,900 --> 00:04:43,250
want to get an update on arm side you

00:04:38,990 --> 00:04:47,630
have to push it on the x86 side because

00:04:43,250 --> 00:04:49,640
which the sauce is so the the workflow

00:04:47,630 --> 00:04:53,290
is the following you submit it to

00:04:49,640 --> 00:04:57,560
factory as previously its reviewed it's

00:04:53,290 --> 00:05:02,390
a little bit tested and then when it

00:04:57,560 --> 00:05:06,290
reach factory it it is inherited in

00:05:02,390 --> 00:05:10,850
factory arm and then it it is pushed to

00:05:06,290 --> 00:05:15,560
open QA arm and if it's always ok it is

00:05:10,850 --> 00:05:18,740
raised as tamper with arm if the open QA

00:05:15,560 --> 00:05:22,690
is not okay the update is blocked so

00:05:18,740 --> 00:05:22,690
that users are always fine

00:05:24,350 --> 00:05:34,770
now let's talk about the OBS in OBS we

00:05:30,990 --> 00:05:39,840
get some servers to get more power to

00:05:34,770 --> 00:05:43,199
build packages for arm so thanks to our

00:05:39,840 --> 00:05:50,370
sponsor Marvel formerly caveum which

00:05:43,199 --> 00:05:53,880
give thunder x2 machine those bill

00:05:50,370 --> 00:05:58,310
powers allowed to remove snapshotting

00:05:53,880 --> 00:06:02,400
between x86 factory project and our

00:05:58,310 --> 00:06:03,000
project so now the sources are updated

00:06:02,400 --> 00:06:05,910
in real time

00:06:03,000 --> 00:06:09,050
previously we needed to block the

00:06:05,910 --> 00:06:13,020
updates because it was very too fast and

00:06:09,050 --> 00:06:17,070
tumbleweed didn't have any time to

00:06:13,020 --> 00:06:19,789
rebuild and push to open to it so now

00:06:17,070 --> 00:06:19,789
it's ok

00:06:19,820 --> 00:06:26,370
it's it allowed to enable more arm

00:06:23,639 --> 00:06:29,130
wheels in devil projects so that men

00:06:26,370 --> 00:06:32,479
maintenance can see bit failures on arm

00:06:29,130 --> 00:06:39,150
earlier and they can fix it

00:06:32,479 --> 00:06:42,389
when the care here is a little odd about

00:06:39,150 --> 00:06:45,509
how to enable arm build in your project

00:06:42,389 --> 00:06:49,860
so it can be your own project or devil

00:06:45,509 --> 00:06:53,789
project it's the same process you just

00:06:49,860 --> 00:06:58,169
go to the repositories tab and then

00:06:53,789 --> 00:07:00,719
click on add repositories then on the

00:06:58,169 --> 00:07:03,389
second page you just select the arm

00:07:00,719 --> 00:07:07,039
distribution you want to breed for for

00:07:03,389 --> 00:07:10,919
example openSUSE leap 15 one arm

00:07:07,039 --> 00:07:15,389
openSUSE factory arm previously it was

00:07:10,919 --> 00:07:20,210
openSUSE leap 15 0 prods because arm and

00:07:15,389 --> 00:07:23,840
PowerPC was part of the same OBS project

00:07:20,210 --> 00:07:29,030
so maintenance please enable it and

00:07:23,840 --> 00:07:29,030
catch big failures forearm Ally

00:07:31,230 --> 00:07:40,330
our containers are now published when

00:07:34,810 --> 00:07:44,620
armies released not when X H sorry x86

00:07:40,330 --> 00:07:47,820
is released it seems obvious that it was

00:07:44,620 --> 00:07:47,820
not the case previously

00:07:48,330 --> 00:07:54,400
some are obvious workers have been

00:07:50,980 --> 00:07:58,030
updated to better fit requirements of

00:07:54,400 --> 00:08:03,910
packages in fact we decrease the number

00:07:58,030 --> 00:08:13,990
of build workers that increase CPUs RAM

00:08:03,910 --> 00:08:18,160
available and open queue aside how many

00:08:13,990 --> 00:08:23,080
people knows open Shiu here yeah

00:08:18,160 --> 00:08:27,000
do you know how it works yeah not so

00:08:23,080 --> 00:08:30,640
much so a little Roosevelts how it works

00:08:27,000 --> 00:08:33,970
you have one server chart for all

00:08:30,640 --> 00:08:38,320
architectures where you have a revenant

00:08:33,970 --> 00:08:42,450
interface and an API these servers all

00:08:38,320 --> 00:08:46,630
also files I mean I saw our disk images

00:08:42,450 --> 00:08:49,630
represent aced it has also the test

00:08:46,630 --> 00:08:54,480
Suites information and then it control

00:08:49,630 --> 00:08:58,600
the test run and stores the test results

00:08:54,480 --> 00:09:01,690
connect it to the server you have a

00:08:58,600 --> 00:09:05,170
number of machine which can be excited 6

00:09:01,690 --> 00:09:08,230
PowerPC arm whatever and on those

00:09:05,170 --> 00:09:11,860
machine you are running some virtual

00:09:08,230 --> 00:09:16,450
machine here it's Kim you and you run

00:09:11,860 --> 00:09:19,690
tests inside it and for each test you

00:09:16,450 --> 00:09:23,100
run some actions and check if the result

00:09:19,690 --> 00:09:23,100
is expected or not

00:09:25,190 --> 00:09:33,889
okay if you want a very complex

00:09:30,310 --> 00:09:38,269
schematic you you can read this just go

00:09:33,889 --> 00:09:44,509
to open that QA / dogs or ask open QA

00:09:38,269 --> 00:09:47,420
guys here just a very small example this

00:09:44,509 --> 00:09:49,279
is a the media check test it just puts

00:09:47,420 --> 00:09:51,560
the Heysel status tech check

00:09:49,279 --> 00:09:55,579
installation media and make sure no

00:09:51,560 --> 00:09:59,740
error from so you can see screenshots

00:09:55,579 --> 00:10:09,949
and the screenshots are used to check if

00:09:59,740 --> 00:10:15,819
the test is ok or not on arm side in we

00:10:09,949 --> 00:10:19,040
just test on v8 so the 64 bits flavor

00:10:15,819 --> 00:10:24,470
currently we do not test for on v6 or

00:10:19,040 --> 00:10:29,569
ambition last year we used Seattle

00:10:24,470 --> 00:10:35,420
machine which was six CPU with 32 gig of

00:10:29,569 --> 00:10:37,870
ram and we only run two rockers on it we

00:10:35,420 --> 00:10:40,610
added a few tests for tumbleweed and lip

00:10:37,870 --> 00:10:46,009
but with two rockers you are very

00:10:40,610 --> 00:10:50,750
limited if you want not so long test in

00:10:46,009 --> 00:10:53,990
open key then at the end of the year we

00:10:50,750 --> 00:11:00,769
get a new machine adizero 5 which was

00:10:53,990 --> 00:11:05,449
very more powerful with 64 CPU 128 gig

00:11:00,769 --> 00:11:08,389
of ram a big SATA disk and initially we

00:11:05,449 --> 00:11:13,399
enabled 10 workers on it and now we are

00:11:08,389 --> 00:11:18,259
at 16 workers so we added even more

00:11:13,399 --> 00:11:21,740
tests for tumbleweed and lip and we now

00:11:18,259 --> 00:11:25,879
have a very good coverage of open QA o

00:11:21,740 --> 00:11:28,459
now we test for example upgrades but our

00:11:25,879 --> 00:11:32,790
FS tools virtualization red multi

00:11:28,459 --> 00:11:37,830
persons etc of

00:11:32,790 --> 00:11:41,790
we needed to update some tests for arm

00:11:37,830 --> 00:11:46,170
because sometimes only x86 is supported

00:11:41,790 --> 00:11:52,710
in an arm in the tests so you need to

00:11:46,170 --> 00:11:56,390
update we got known arm specific updates

00:11:52,710 --> 00:12:00,960
which include new tests a deal of cross

00:11:56,390 --> 00:12:04,260
open Shui as now a good developer mode

00:12:00,960 --> 00:12:04,890
which allow you to stop the vehicle

00:12:04,260 --> 00:12:10,010
machine

00:12:04,890 --> 00:12:14,070
take your screenshot save it and so on

00:12:10,010 --> 00:12:17,760
there is a good script to use when you

00:12:14,070 --> 00:12:21,000
make a pull request on the key tab to

00:12:17,760 --> 00:12:23,670
update taste or add new tests and with

00:12:21,000 --> 00:12:27,180
this script you can run the test on open

00:12:23,670 --> 00:12:29,990
QA that openSUSE at work and show that

00:12:27,180 --> 00:12:34,380
it's ok

00:12:29,990 --> 00:12:39,690
we added support for huge pages with

00:12:34,380 --> 00:12:47,010
Kimmy bacon and also generic options to

00:12:39,690 --> 00:12:50,700
be passed to commune a few numbers from

00:12:47,010 --> 00:12:55,530
one or two weeks ago on tumbleweed we

00:12:50,700 --> 00:13:01,260
have 72 tests now please 69 tests to

00:12:55,530 --> 00:13:07,140
photo channel and on leap we have 59

00:13:01,260 --> 00:13:08,630
tests on tumbleweed there is a test for

00:13:07,140 --> 00:13:11,220
cubic microarrays

00:13:08,630 --> 00:13:13,590
you don't have it on a leap of course

00:13:11,220 --> 00:13:17,370
because cubic and micro raises tamper

00:13:13,590 --> 00:13:20,430
with flavor on the DVD you have three

00:13:17,370 --> 00:13:23,190
more tests on tamper with side because

00:13:20,430 --> 00:13:26,460
alexei patent is only available on

00:13:23,190 --> 00:13:30,930
tumbleweed DVD so you can test it only

00:13:26,460 --> 00:13:34,290
on tambourine and there is just two more

00:13:30,930 --> 00:13:37,340
tests added recently open QA bootstrap

00:13:34,290 --> 00:13:37,340
and open scale

00:13:37,600 --> 00:13:46,030
on the net ties oh we have two more

00:13:41,950 --> 00:13:48,940
tests on tumbleweed side to because we

00:13:46,030 --> 00:13:52,300
create not disk image with released

00:13:48,940 --> 00:13:58,570
tumbleweed and tests upgrade from this

00:13:52,300 --> 00:14:02,220
disk image to the tested image and we

00:13:58,570 --> 00:14:11,440
also test we have to to test suite for

00:14:02,220 --> 00:14:14,080
just eNOS RS if you screenshot from two

00:14:11,440 --> 00:14:18,370
days ago so you can see that tumbleweed

00:14:14,080 --> 00:14:21,720
arm is not so bad ly 15 has been

00:14:18,370 --> 00:14:25,870
released and it was in pretty good shape

00:14:21,720 --> 00:14:28,900
with six failure not all real failures

00:14:25,870 --> 00:14:36,690
you have false positive and only when

00:14:28,900 --> 00:14:43,540
real work and on just eNOS OS images

00:14:36,690 --> 00:14:46,480
it's not so good but it's not very big

00:14:43,540 --> 00:14:52,690
things in fact when you run a very long

00:14:46,480 --> 00:14:55,800
test run a single test failure make its

00:14:52,690 --> 00:14:55,800
already so

00:14:59,260 --> 00:15:05,870
now let's talk about tumbleweed

00:15:03,220 --> 00:15:12,070
tumbleweed is now officially supported

00:15:05,870 --> 00:15:16,730
and is no more best effort pot for arm

00:15:12,070 --> 00:15:23,150
from I mean for a r64 it's not the case

00:15:16,730 --> 00:15:27,620
for um v6 v7 lots of package have been

00:15:23,150 --> 00:15:31,100
fixed on at Build time on a BS but also

00:15:27,620 --> 00:15:35,030
on run time on open shui

00:15:31,100 --> 00:15:39,110
it includes Colonel Firefox chromium and

00:15:35,030 --> 00:15:45,410
more we also added new packages or

00:15:39,110 --> 00:15:47,690
enable build for 64-bit it includes LDC

00:15:45,410 --> 00:15:53,870
compiler free pascal compiler and mauro

00:15:47,690 --> 00:15:56,720
and we also added some features through

00:15:53,870 --> 00:16:00,200
existing packages for example in mesa

00:15:56,720 --> 00:16:02,800
where we enabled some um specific

00:16:00,200 --> 00:16:02,800
options

00:16:04,610 --> 00:16:14,629
on mv7 we enabled two more boards on if

00:16:10,970 --> 00:16:19,339
I grab to support its sub right and

00:16:14,629 --> 00:16:23,509
Chromebooks no and we get some boards

00:16:19,339 --> 00:16:27,679
out of country projects and now in the

00:16:23,509 --> 00:16:34,970
upstream factory on projects such as you

00:16:27,679 --> 00:16:38,589
to kneel and thanks to always up-to-date

00:16:34,970 --> 00:16:49,910
channel in tumbleweed we get all the

00:16:38,589 --> 00:16:55,610
improvements we get Colonel upstream air

00:16:49,910 --> 00:17:02,509
64 supporter so cubic since generous is

00:16:55,610 --> 00:17:06,829
here it is tested in open QA with

00:17:02,509 --> 00:17:11,630
tumbleweed if you want to get more

00:17:06,829 --> 00:17:14,839
information on it I did the link on the

00:17:11,630 --> 00:17:17,419
slide I'll just go to cubic that

00:17:14,839 --> 00:17:26,179
openSUSE that rock and with you will

00:17:17,419 --> 00:17:30,049
find it only 15 one just a little world

00:17:26,179 --> 00:17:34,159
what about how it is built in fact clip

00:17:30,049 --> 00:17:38,860
15 one inherits some packages from Slee

00:17:34,159 --> 00:17:44,419
15 sp1 its four core packages such as

00:17:38,860 --> 00:17:48,289
GCC channel cameo and for the rest it

00:17:44,419 --> 00:17:50,840
inherits from lip 15 0 and if package

00:17:48,289 --> 00:17:54,409
maintain us want to they can push

00:17:50,840 --> 00:17:58,750
updates from tumbleweed so this is a

00:17:54,409 --> 00:18:03,830
case for example for carita Firefox and

00:17:58,750 --> 00:18:08,260
we of course fix it some packages builds

00:18:03,830 --> 00:18:08,260
and runtime failure

00:18:09,900 --> 00:18:17,130
for tumbleweed we switched to board from

00:18:13,050 --> 00:18:22,110
mv7 family it's against a variety and

00:18:17,130 --> 00:18:24,540
chromebox no and now they're ready to to

00:18:22,110 --> 00:18:27,840
use images such as just in SOS or

00:18:24,540 --> 00:18:32,100
docker our testing in openness way it

00:18:27,840 --> 00:18:38,630
was not the case before and we really is

00:18:32,100 --> 00:18:41,630
always up-to-date images from the 15:1

00:18:38,630 --> 00:18:41,630
project

00:18:51,799 --> 00:19:05,000
a little rolled about openSUSE wiki the

00:18:59,630 --> 00:19:10,210
main page for arm is bottle arm on this

00:19:05,000 --> 00:19:14,299
wiki you can find some updates such as

00:19:10,210 --> 00:19:18,500
water ham of course but also on our web

00:19:14,299 --> 00:19:23,590
compatibility pages we added some for

00:19:18,500 --> 00:19:28,190
example the g0 5g overdrive 1000 and

00:19:23,590 --> 00:19:33,890
there is an interesting page with tests

00:19:28,190 --> 00:19:38,990
on systems which is openSUSE supported

00:19:33,890 --> 00:19:42,140
arm boards where you can find if USB or

00:19:38,990 --> 00:19:46,640
video output is supported and working

00:19:42,140 --> 00:19:50,570
with tumbleweed or leap so if you have a

00:19:46,640 --> 00:19:59,240
board please add it and if you want to

00:19:50,570 --> 00:20:03,409
get information go to this page so a lot

00:19:59,240 --> 00:20:08,570
I've been done but still along to the

00:20:03,409 --> 00:20:11,570
list we shall continue to improve the

00:20:08,570 --> 00:20:18,940
wiki with new information and up-to-date

00:20:11,570 --> 00:20:23,000
information we can improve on OBS side

00:20:18,940 --> 00:20:26,600
what we need to do is to speed up v7

00:20:23,000 --> 00:20:29,899
images because this is a current

00:20:26,600 --> 00:20:36,470
bottleneck to get more tumbleweed

00:20:29,899 --> 00:20:40,659
snapshot I think we have about 100 v7

00:20:36,470 --> 00:20:40,659
images to build each type

00:20:41,140 --> 00:20:46,210
and we should enable unbilled in more

00:20:45,160 --> 00:20:49,660
developers

00:20:46,210 --> 00:20:52,590
so that people so that maintenance can

00:20:49,660 --> 00:20:56,440
catch built failures and fix it early

00:20:52,590 --> 00:21:00,610
otherwise you have to wait that updates

00:20:56,440 --> 00:21:05,559
rich tumbleweed and someone no ties

00:21:00,610 --> 00:21:13,919
its failure and the fix is much stronger

00:21:05,559 --> 00:21:18,270
this way we can improve on open suicide

00:21:13,919 --> 00:21:24,340
maybe add more tests for AR 64

00:21:18,270 --> 00:21:26,890
why not testing mv7 images open to a

00:21:24,340 --> 00:21:29,740
although test on real hardware so why

00:21:26,890 --> 00:21:32,580
not test the raspberry pi 3 for example

00:21:29,740 --> 00:21:35,590
[Music]

00:21:32,580 --> 00:21:40,210
we can increase the number of open QA

00:21:35,590 --> 00:21:41,980
worker to speed up tests maybe and we

00:21:40,210 --> 00:21:44,950
should monitor continuously built

00:21:41,980 --> 00:21:49,600
failures and test failure and fix 7 as

00:21:44,950 --> 00:21:53,290
soon as possible and people please

00:21:49,600 --> 00:21:57,220
report the bug you have because I often

00:21:53,290 --> 00:21:59,230
meet people who told me hey I have this

00:21:57,220 --> 00:22:02,080
program on this board ok

00:21:59,230 --> 00:22:07,559
did you fill the bag a bug or something

00:22:02,080 --> 00:22:07,559
Oh No so please do it

00:22:10,710 --> 00:22:16,660
we need to help some we need some help

00:22:14,320 --> 00:22:21,910
to test and get feedback on systems

00:22:16,660 --> 00:22:27,040
people use could be a simple board on

00:22:21,910 --> 00:22:30,700
the embedded side or big server and told

00:22:27,040 --> 00:22:35,170
us what is okay what is broken and we

00:22:30,700 --> 00:22:39,310
may fix it we can add new features such

00:22:35,170 --> 00:22:43,300
as secure boot for example and we need

00:22:39,310 --> 00:22:47,290
to improve the graphics tack on arm so

00:22:43,300 --> 00:22:51,610
it includes PCI Express card such as

00:22:47,290 --> 00:22:53,920
Nvidia AMD but also integrated system

00:22:51,610 --> 00:22:59,170
and chip into the system and chip such

00:22:53,920 --> 00:23:03,610
as Nvidia as we Normandy and stay tuned

00:22:59,170 --> 00:23:09,490
on tumbleweed because kernel 5.2 and

00:23:03,610 --> 00:23:15,010
measure 19 1 are coming reso soon and it

00:23:09,490 --> 00:23:17,370
adds Mali GPU upstream support so it's

00:23:15,010 --> 00:23:22,180
currently just an initial support so

00:23:17,370 --> 00:23:27,580
don't expect a full open Sierra Vulcano

00:23:22,180 --> 00:23:32,940
whatever but most part of OpenGL ES 2.0

00:23:27,580 --> 00:23:38,560
is supporting so let's see how it goes

00:23:32,940 --> 00:23:43,890
and please join us on IRC or on the

00:23:38,560 --> 00:23:43,890
mailing list often

00:23:45,610 --> 00:23:55,650
do you have any questions yep you have a

00:23:52,060 --> 00:23:55,650
microphone behind please

00:24:10,870 --> 00:24:18,010
hi and my question is you said on rb7 we

00:24:15,280 --> 00:24:22,590
don't have open you at the moment so

00:24:18,010 --> 00:24:26,950
this is a problem of human resources to

00:24:22,590 --> 00:24:31,870
enable and look after them or to the

00:24:26,950 --> 00:24:35,890
problem of hardware just a problem of

00:24:31,870 --> 00:24:38,770
nobody take care to do it so we have two

00:24:35,890 --> 00:24:41,860
options either at number seven board

00:24:38,770 --> 00:24:46,080
such as Anand L board for example and

00:24:41,860 --> 00:24:52,150
run workers on it otherwise you can run

00:24:46,080 --> 00:24:55,960
Rawkus on 64-bit machine with cim yux I

00:24:52,150 --> 00:25:03,700
just specified that you want to use

00:24:55,960 --> 00:25:07,980
32-bit instruction but I think we will

00:25:03,700 --> 00:25:07,980
do it shortly

00:25:12,160 --> 00:25:19,840
I question about the testing you

00:25:15,670 --> 00:25:23,530
mentioned about raspberry pi so does it

00:25:19,840 --> 00:25:26,230
work so how does it work for open QA so

00:25:23,530 --> 00:25:28,990
with Excel hardware which part of the

00:25:26,230 --> 00:25:30,750
hardware with actual hardware not

00:25:28,990 --> 00:25:33,010
washing machine

00:25:30,750 --> 00:25:38,310
you mean testing the real hardware

00:25:33,010 --> 00:25:42,400
instead of engine it is already done in

00:25:38,310 --> 00:25:46,060
Suzy open QA so it works you just need

00:25:42,400 --> 00:25:48,370
to add it to open scissor open tree so

00:25:46,060 --> 00:25:52,900
it's just a matter of hardware or the

00:25:48,370 --> 00:25:55,660
software is ready to support it as with

00:25:52,900 --> 00:25:58,750
that means that it doesn't test any

00:25:55,660 --> 00:26:02,440
specific Raspberry Pi so hardware

00:25:58,750 --> 00:26:06,550
features or how what kind of things are

00:26:02,440 --> 00:26:09,340
tested on Raspberry Pi I'm not sure if

00:26:06,550 --> 00:26:12,310
you should ask sue the people to know

00:26:09,340 --> 00:26:14,680
what the the test but you I think you

00:26:12,310 --> 00:26:19,620
just run the same tests as in CHEM you

00:26:14,680 --> 00:26:22,680
you will run it on the Raspberry Pi okay

00:26:19,620 --> 00:26:22,680
thank you

00:26:24,780 --> 00:26:32,790
any more questions okay thanks

00:26:35,389 --> 00:26:37,450

YouTube URL: https://www.youtube.com/watch?v=T3L33w2kYW8


