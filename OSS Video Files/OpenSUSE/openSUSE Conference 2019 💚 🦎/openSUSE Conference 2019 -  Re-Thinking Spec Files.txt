Title: openSUSE Conference 2019 -  Re-Thinking Spec Files
Publication date: 2019-05-24
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2501-re-thinking-spec-files

New features for rpmbuild

Right now many RPM spec files contain large parts of boiler plate code. In the current development cycle of RPM we try to help reducing this clutter. We hope we can make packaging easier by providing means to have pre-arranged building blocks and offer more control over larger sets of packages. This will also change the relation between RPM as a multipurpose tool and the single package/packager by adding a layer in between take will take care of common tasks.
This talk  will give a overview of the changes already done and still planned and will allow for discussion and feed back.

Right now many RPM spec files contain large parts of boiler plate code. In the current development cycle of RPM we try to help reducing this clutter. We hope we can make packaging easier by providing means to have pre-arranged building blocks and offer more control over larger sets of packages. This will also change the relation between RPM as a multipurpose tool and the single package/packager by adding a layer in between take will take care of common tasks.
This talk  will give a overview of the changes already done and still planned and will allow for discussion and feed back.

Florian Festi
Captions: 
	00:00:05,480 --> 00:00:11,219
okay hello welcome to my talk created

00:00:09,030 --> 00:00:14,580
some people even more people actually

00:00:11,219 --> 00:00:19,980
made it up here even whether it's great

00:00:14,580 --> 00:00:23,990
outside and just beer somewhere so we're

00:00:19,980 --> 00:00:23,990
talking about spec files and rpm

00:00:24,269 --> 00:00:29,240
Who am I I'm working for red head for

00:00:26,340 --> 00:00:32,099
quite a while now I started in 2006 I

00:00:29,240 --> 00:00:34,320
after about one year I started getting

00:00:32,099 --> 00:00:38,309
involved in young which is the updater

00:00:34,320 --> 00:00:42,480
the predecessor of DNF basically does

00:00:38,309 --> 00:00:44,610
the what equal into super and after year

00:00:42,480 --> 00:00:47,010
of optimizing it I realized well I'm

00:00:44,610 --> 00:00:49,890
done here if I want to do anything else

00:00:47,010 --> 00:00:54,840
I need to go down one level and so I get

00:00:49,890 --> 00:00:58,379
involved in rpm in around 2008 and have

00:00:54,840 --> 00:01:00,270
stuck there for for some reason that's

00:00:58,379 --> 00:01:02,579
actually my second visit to openSUSE

00:01:00,270 --> 00:01:04,830
conf I've been here before but a lot of

00:01:02,579 --> 00:01:07,770
things have changed last time I've been

00:01:04,830 --> 00:01:10,110
here it's been 2009 and it were very

00:01:07,770 --> 00:01:11,490
different times and I've actually not

00:01:10,110 --> 00:01:14,010
really been in a conference we've been

00:01:11,490 --> 00:01:16,979
hiding in some rooms and doing technical

00:01:14,010 --> 00:01:20,790
talk into how to merge two different

00:01:16,979 --> 00:01:26,909
patches that have been in openSUSE and

00:01:20,790 --> 00:01:29,700
then in the fedora tree at that point so

00:01:26,909 --> 00:01:33,329
where are we in rpm buys we've done a

00:01:29,700 --> 00:01:35,579
few large changes and features but it's

00:01:33,329 --> 00:01:37,350
been a while now so it's like two two

00:01:35,579 --> 00:01:39,270
and a half years till we - we roll them

00:01:37,350 --> 00:01:41,090
out five triggers and put in

00:01:39,270 --> 00:01:43,770
dependencies were one of the biggest

00:01:41,090 --> 00:01:45,060
especially five triggers are at least in

00:01:43,770 --> 00:01:48,119
fedora a big thing because they've

00:01:45,060 --> 00:01:51,000
basically changed most of the scriptlets

00:01:48,119 --> 00:01:53,070
so there's a huge amount of of packages

00:01:51,000 --> 00:01:55,920
that have been changed I've actually not

00:01:53,070 --> 00:02:00,590
looked into openSUSE what's the state

00:01:55,920 --> 00:02:00,590
there of reduction but maybe someone can

00:02:01,759 --> 00:02:07,290
enlighten us on this so we currently

00:02:04,469 --> 00:02:08,729
have a huge backlog of mostly smaller

00:02:07,290 --> 00:02:11,129
features that we are going to reduce the

00:02:08,729 --> 00:02:14,000
ideas to have an alpha release out next

00:02:11,129 --> 00:02:14,000
week hopefully

00:02:14,580 --> 00:02:21,820
but so over the next Fedora cycle we

00:02:19,660 --> 00:02:25,150
want to get release stabilized and then

00:02:21,820 --> 00:02:27,340
out so traditionally we've in rpm use

00:02:25,150 --> 00:02:31,810
fedoras attach test bench so basically

00:02:27,340 --> 00:02:33,910
we release in an early in an early

00:02:31,810 --> 00:02:43,420
version of the next release and then

00:02:33,910 --> 00:02:46,090
stabilize throughout that there so and

00:02:43,420 --> 00:02:48,910
anything as we've been pretty busy with

00:02:46,090 --> 00:02:50,590
this relates thing on the side and so

00:02:48,910 --> 00:02:52,720
basically after that's done we're now

00:02:50,590 --> 00:02:55,680
thinking of what's the next big thing

00:02:52,720 --> 00:02:58,900
what to do where to go from here and

00:02:55,680 --> 00:03:02,860
what should what what is the most

00:02:58,900 --> 00:03:05,260
important thing to consider now and the

00:03:02,860 --> 00:03:08,950
problem with rpm development is always

00:03:05,260 --> 00:03:10,870
that rpm developers are developers and

00:03:08,950 --> 00:03:12,910
they are not really packagers yeah we do

00:03:10,870 --> 00:03:16,150
have a few packages that we have to take

00:03:12,910 --> 00:03:18,489
care of but that's not the basic side

00:03:16,150 --> 00:03:21,700
thing this has led to two basically the

00:03:18,489 --> 00:03:24,310
last decade that Mouse changes even if

00:03:21,700 --> 00:03:26,080
there have huge impact for packaging

00:03:24,310 --> 00:03:30,040
like the five triggers are basically

00:03:26,080 --> 00:03:32,110
done from an RPM perspective and not

00:03:30,040 --> 00:03:34,570
from an RPM build perspective so it's

00:03:32,110 --> 00:03:37,180
like how do we want to have this

00:03:34,570 --> 00:03:39,190
installed on the system properly and not

00:03:37,180 --> 00:03:42,570
so much what's the easiest for a package

00:03:39,190 --> 00:03:44,769
sure to actually put it into something

00:03:42,570 --> 00:03:48,150
so and that's basically what's something

00:03:44,769 --> 00:03:51,400
you want to do to next and to basically

00:03:48,150 --> 00:03:52,989
look and to specs files and packaging

00:03:51,400 --> 00:03:54,880
from appropriate package of perspective

00:03:52,989 --> 00:03:59,140
see what can be improved and what can be

00:03:54,880 --> 00:04:00,610
made easier another thing that's more

00:03:59,140 --> 00:04:04,209
probably not that interesting for you

00:04:00,610 --> 00:04:07,090
but I had the data relying around that's

00:04:04,209 --> 00:04:09,190
the growth of fedora I put in all us

00:04:07,090 --> 00:04:10,930
assume that open source the data for

00:04:09,190 --> 00:04:13,300
Zeus it looks basically the same the

00:04:10,930 --> 00:04:15,910
exact numbers are not that important it

00:04:13,300 --> 00:04:18,700
starts here with 2004 and goes to

00:04:15,910 --> 00:04:21,039
basically now and as you as you can see

00:04:18,700 --> 00:04:24,130
it's basically a linear growth in in

00:04:21,039 --> 00:04:25,130
number of packages and also in a number

00:04:24,130 --> 00:04:27,470
of in the

00:04:25,130 --> 00:04:29,510
overall size of distribution that means

00:04:27,470 --> 00:04:33,080
the number of work that has to be done

00:04:29,510 --> 00:04:36,110
each release gets bigger and bigger and

00:04:33,080 --> 00:04:39,740
bigger and bigger every time and there's

00:04:36,110 --> 00:04:45,260
no sign of just slowing down or stopping

00:04:39,740 --> 00:04:47,630
at any point so the the only way around

00:04:45,260 --> 00:04:49,790
this is either to get more and more and

00:04:47,630 --> 00:04:53,330
more people involved which is surely an

00:04:49,790 --> 00:04:55,400
option but there's only so much you can

00:04:53,330 --> 00:04:57,260
do there and the other option is to

00:04:55,400 --> 00:05:01,370
basically lower the amount of work

00:04:57,260 --> 00:05:09,020
needed for on each update to be able to

00:05:01,370 --> 00:05:11,540
keep up with death that's basically or

00:05:09,020 --> 00:05:14,480
what I said about this so the question

00:05:11,540 --> 00:05:16,880
is what can be removed from the package

00:05:14,480 --> 00:05:20,150
or what steps can be removed from from

00:05:16,880 --> 00:05:22,430
actually doing updates of or creating

00:05:20,150 --> 00:05:25,400
new packages what can be automated and

00:05:22,430 --> 00:05:32,180
what can we remove from the manual work

00:05:25,400 --> 00:05:34,790
that's that's needed so one big area has

00:05:32,180 --> 00:05:37,010
been scriptlets that's kind of solved

00:05:34,790 --> 00:05:38,930
from an implementation point of view

00:05:37,010 --> 00:05:42,800
with file triggers I don't know how far

00:05:38,930 --> 00:05:47,470
this works in openSUSE anyone an aria is

00:05:42,800 --> 00:05:47,470
used or they used on a broader scale

00:05:51,080 --> 00:05:54,710
okay so that's um that's something worth

00:05:53,840 --> 00:05:56,569
looking into

00:05:54,710 --> 00:06:01,220
basically replacing all the scriptlets

00:05:56,569 --> 00:06:04,460
in the in in most files in most packages

00:06:01,220 --> 00:06:06,680
in centralize them but also don't know

00:06:04,460 --> 00:06:09,020
that's basically the five triggers are

00:06:06,680 --> 00:06:10,729
basically you can run a script based on

00:06:09,020 --> 00:06:13,970
a filename that's in another package

00:06:10,729 --> 00:06:16,550
I don't probably Susa doesn't run that

00:06:13,970 --> 00:06:17,770
many scriptlets as we do but that's not

00:06:16,550 --> 00:06:22,639
what I heard

00:06:17,770 --> 00:06:24,530
there's an expert so the idea is

00:06:22,639 --> 00:06:26,719
basically to do all the scriptlets in a

00:06:24,530 --> 00:06:28,550
centralized work and move them out of

00:06:26,719 --> 00:06:29,960
the packages or the packages get simpler

00:06:28,550 --> 00:06:32,449
and their package shows themselves don't

00:06:29,960 --> 00:06:36,259
have to care about it but one central

00:06:32,449 --> 00:06:37,789
instance does all the work centrally the

00:06:36,259 --> 00:06:39,800
next big thing that's going to be the

00:06:37,789 --> 00:06:44,860
next release is automatic dependencies

00:06:39,800 --> 00:06:50,210
that comes from the rust and Gao folks

00:06:44,860 --> 00:06:52,639
the problem here is that when many of

00:06:50,210 --> 00:06:55,250
those new languages to have their own

00:06:52,639 --> 00:06:57,020
package format and they do have all

00:06:55,250 --> 00:06:59,120
those made-up data already like

00:06:57,020 --> 00:07:02,650
dependencies on what other packages they

00:06:59,120 --> 00:07:05,509
depend then it's a pain to to

00:07:02,650 --> 00:07:08,840
synchronize that right now so there are

00:07:05,509 --> 00:07:10,880
tools that can read some other rust or

00:07:08,840 --> 00:07:13,039
go package description internet

00:07:10,880 --> 00:07:15,259
introspect file but it's not that's

00:07:13,039 --> 00:07:17,779
great as a starting point but it's not

00:07:15,259 --> 00:07:19,789
something that's very helpful on an for

00:07:17,779 --> 00:07:22,550
distribution that does updates because

00:07:19,789 --> 00:07:23,840
you don't want to override your spec

00:07:22,550 --> 00:07:25,310
file you want to keep that and want to

00:07:23,840 --> 00:07:27,500
keep your history and your patches and

00:07:25,310 --> 00:07:30,770
everything you don't want to copy over

00:07:27,500 --> 00:07:32,840
stuff that gets generated elsewhere all

00:07:30,770 --> 00:07:34,479
the time the automatic build

00:07:32,840 --> 00:07:38,150
dependencies will solve this to some

00:07:34,479 --> 00:07:40,729
extent it's basically built scripted

00:07:38,150 --> 00:07:44,029
that's this run after prep and will

00:07:40,729 --> 00:07:46,430
generate dependencies for the belt

00:07:44,029 --> 00:07:49,159
that's going to be interesting for the

00:07:46,430 --> 00:07:54,310
obvious people that probably still sit

00:07:49,159 --> 00:07:54,310
down they're not suspecting anything

00:07:55,640 --> 00:08:01,200
as it breaks a lot of assumptions of the

00:07:59,190 --> 00:08:03,830
build which we have right now the

00:08:01,200 --> 00:08:06,630
assumption is you can just build and

00:08:03,830 --> 00:08:09,720
source rpm without anything basically

00:08:06,630 --> 00:08:11,370
with rpm only and you can then start a

00:08:09,720 --> 00:08:14,580
build with the dependencies in there

00:08:11,370 --> 00:08:16,980
with and being aren't heeded going to

00:08:14,580 --> 00:08:18,840
succeed because if you order of

00:08:16,980 --> 00:08:21,360
dependencies installed it's going to

00:08:18,840 --> 00:08:22,800
break but it's not as bad as I first

00:08:21,360 --> 00:08:24,930
thought so you basically have to do

00:08:22,800 --> 00:08:26,940
another round read in the new

00:08:24,930 --> 00:08:29,190
dependencies or restart the build it's

00:08:26,940 --> 00:08:35,400
going to be okay I promise

00:08:29,190 --> 00:08:38,780
maybe so another thing that's that's

00:08:35,400 --> 00:08:41,850
that's kind of our PMS but not really

00:08:38,780 --> 00:08:43,440
that's probably more Fedora specific and

00:08:41,850 --> 00:08:46,440
we have to see how that translate to

00:08:43,440 --> 00:08:50,610
other distributions is I want to get

00:08:46,440 --> 00:08:52,920
some stuff out of the spec file and

00:08:50,610 --> 00:08:56,490
using the git repositories we have two

00:08:52,920 --> 00:08:58,140
spec files in s datastore I will

00:08:56,490 --> 00:09:01,380
elaborate on that that's a bit more

00:08:58,140 --> 00:09:04,440
complicated and for the long term things

00:09:01,380 --> 00:09:07,500
what what we want to do is having

00:09:04,440 --> 00:09:10,260
templates within the spec files that can

00:09:07,500 --> 00:09:12,360
be maintained centrally so you can have

00:09:10,260 --> 00:09:14,280
boiler which you can remove some of the

00:09:12,360 --> 00:09:17,010
boilerplate stuff and have to decide for

00:09:14,280 --> 00:09:22,530
a location to dust things they are

00:09:17,010 --> 00:09:24,170
basically two tools directions cities

00:09:22,530 --> 00:09:26,430
one is this is something to have

00:09:24,170 --> 00:09:31,080
templates for building so you have four

00:09:26,430 --> 00:09:34,890
different languages prepared build

00:09:31,080 --> 00:09:37,680
templates that you can use that's still

00:09:34,890 --> 00:09:39,710
very vague in my mind a question here is

00:09:37,680 --> 00:09:42,660
what can be centralized how many

00:09:39,710 --> 00:09:46,620
configuration do you need or is and what

00:09:42,660 --> 00:09:48,450
can actually be saved you know in in

00:09:46,620 --> 00:09:49,800
complexity or if you key if you need

00:09:48,450 --> 00:09:52,310
some money knobs that it's not worth

00:09:49,800 --> 00:09:55,910
doing but we have we'll look into this

00:09:52,310 --> 00:09:59,070
more detail and another thing is

00:09:55,910 --> 00:10:01,680
building sub-packages is currently kind

00:09:59,070 --> 00:10:03,860
of a pain the thing that's come

00:10:01,680 --> 00:10:07,550
currently mode most complicated is

00:10:03,860 --> 00:10:10,279
debauch info pet hitches and it's soft

00:10:07,550 --> 00:10:14,180
currently by some code somewhere in rpm

00:10:10,279 --> 00:10:16,640
that basically does them in C code which

00:10:14,180 --> 00:10:20,930
is not that beautiful but they're all of

00:10:16,640 --> 00:10:23,630
a lot of other use cases where right now

00:10:20,930 --> 00:10:28,570
those those sub packages have to be done

00:10:23,630 --> 00:10:33,079
by hand but I will also go into details

00:10:28,570 --> 00:10:34,910
soon so what we currently have if you if

00:10:33,079 --> 00:10:36,589
you do an update you have to create a

00:10:34,910 --> 00:10:38,870
patch somehow you have to edit to the

00:10:36,589 --> 00:10:40,640
spec file you have to pick a pitch

00:10:38,870 --> 00:10:43,250
number find out which is the next

00:10:40,640 --> 00:10:46,190
suitable then you have to apply that and

00:10:43,250 --> 00:10:49,250
prep using the number up of you have to

00:10:46,190 --> 00:10:51,769
in crystal release your fill Adam change

00:10:49,250 --> 00:10:53,720
log entry you have to use the number you

00:10:51,769 --> 00:10:55,910
will release number you just increase

00:10:53,720 --> 00:10:57,740
from above you have to add your name and

00:10:55,910 --> 00:10:59,269
email then you have to commit this I

00:10:57,740 --> 00:11:05,810
don't know what what you do in Susa

00:10:59,269 --> 00:11:10,120
where do you store your spec files okay

00:11:05,810 --> 00:11:10,120
so you put them somewhere else but it so

00:11:16,329 --> 00:11:24,470
yeah yeah so yeah so we could put it to

00:11:22,610 --> 00:11:26,029
get and typically you'd even have to put

00:11:24,470 --> 00:11:27,110
a change low and I have to copy the

00:11:26,029 --> 00:11:29,420
change lock message or you have

00:11:27,110 --> 00:11:35,420
something and get also so it's a lot of

00:11:29,420 --> 00:11:38,020
steps yeah we already removed this step

00:11:35,420 --> 00:11:41,959
here without without with auto set up

00:11:38,020 --> 00:11:44,180
the next release will allow you to not

00:11:41,959 --> 00:11:47,750
set a number so we will auto number two

00:11:44,180 --> 00:11:50,540
patches which makes sense if you use

00:11:47,750 --> 00:11:53,540
auto setup because who cares what number

00:11:50,540 --> 00:11:55,670
to patch has this is more interesting

00:11:53,540 --> 00:11:58,100
for us because we have different

00:11:55,670 --> 00:12:01,130
branches for different releases so we

00:11:58,100 --> 00:12:03,079
might want to Jerry pick stuff from one

00:12:01,130 --> 00:12:04,850
branch to another and this is a total

00:12:03,079 --> 00:12:08,560
nightmare because there's nothing in

00:12:04,850 --> 00:12:08,560
here that doesn't give for conflict

00:12:08,720 --> 00:12:18,870
literally though and I will try to look

00:12:16,800 --> 00:12:20,910
if we can get off rid of the change lock

00:12:18,870 --> 00:12:23,960
by basically generating that from the

00:12:20,910 --> 00:12:26,100
get back lock and probably also

00:12:23,960 --> 00:12:28,650
calculate the release number from the

00:12:26,100 --> 00:12:31,410
gate by just counting up so that will

00:12:28,650 --> 00:12:34,440
reduce the number of things that can go

00:12:31,410 --> 00:12:37,140
wrong or be wrong it also will basically

00:12:34,440 --> 00:12:39,390
remove all those things that create a

00:12:37,140 --> 00:12:41,100
merge conflicts for us because you

00:12:39,390 --> 00:12:43,500
basically just put in the patch to patch

00:12:41,100 --> 00:12:45,060
adds one line up here and if it's a

00:12:43,500 --> 00:12:48,630
conflict that's not that bad it's just a

00:12:45,060 --> 00:12:50,100
one line somewhere in the right moment

00:12:48,630 --> 00:12:52,170
that might be in the wrong order

00:12:50,100 --> 00:12:53,760
who cares you put it in there and then

00:12:52,170 --> 00:12:56,880
you the commit message stays the same

00:12:53,760 --> 00:12:58,530
and it just does everything else there's

00:12:56,880 --> 00:13:00,960
something I want to look in for fedora

00:12:58,530 --> 00:13:02,040
that's will probably take a while till

00:13:00,960 --> 00:13:12,620
it gets to a point where it's

00:13:02,040 --> 00:13:12,620
interesting for you guys but can be done

00:13:13,680 --> 00:13:16,720
[Music]

00:14:02,480 --> 00:14:08,760
well the stuff that is in our does we

00:14:06,030 --> 00:14:11,670
within rpm will of course be upstream

00:14:08,760 --> 00:14:14,660
rpm there are other stuff the problem is

00:14:11,670 --> 00:14:17,580
that's all basically build system or

00:14:14,660 --> 00:14:19,680
logic so depends on

00:14:17,580 --> 00:14:22,080
the integration in the build system or

00:14:19,680 --> 00:14:30,029
the way you store your spec file so

00:14:22,080 --> 00:14:32,459
that's yet that the auto setup stuff is

00:14:30,029 --> 00:14:34,649
done already and the the pitch number

00:14:32,459 --> 00:14:36,870
stuff is going to be the next release so

00:14:34,649 --> 00:14:46,890
let's pay more or less that's done we

00:14:36,870 --> 00:14:52,019
just have to release it yeah we will see

00:14:46,890 --> 00:15:00,839
how the tip affect the thing the thing

00:14:52,019 --> 00:15:02,310
is the thing is are probably so first no

00:15:00,839 --> 00:15:08,579
I don't say anything about what we're

00:15:02,310 --> 00:15:10,800
doing Ralph but we can talk about fedora

00:15:08,579 --> 00:15:14,250
and we've so far been hesitant

00:15:10,800 --> 00:15:17,240
backporting too many stuff back we'll

00:15:14,250 --> 00:15:24,930
see but it's that's a topic for another

00:15:17,240 --> 00:15:28,560
not a rainy day that's basically what

00:15:24,930 --> 00:15:30,149
we're trying to do here then dynamic

00:15:28,560 --> 00:15:32,579
built ability I already said that there

00:15:30,149 --> 00:15:37,860
will be a new section that will rob you

00:15:32,579 --> 00:15:40,310
run after prep the main thing is that it

00:15:37,860 --> 00:15:43,620
will require system

00:15:40,310 --> 00:15:46,920
integration you will be able to do that

00:15:43,620 --> 00:15:49,709
in also on a command line of course so

00:15:46,920 --> 00:15:52,950
you have to expect that you build my

00:15:49,709 --> 00:15:55,640
fail on missing built dependencies even

00:15:52,950 --> 00:15:57,839
though you already installed all of them

00:15:55,640 --> 00:15:58,470
that you had in your so in your source

00:15:57,839 --> 00:16:01,100
of here

00:15:58,470 --> 00:16:04,440
so that's it's basically a main change

00:16:01,100 --> 00:16:06,890
that is in there the other thing is as a

00:16:04,440 --> 00:16:10,589
package show you can probably outsource

00:16:06,890 --> 00:16:13,110
generating the built dependencies from

00:16:10,589 --> 00:16:15,839
your package and it will be it's one

00:16:13,110 --> 00:16:19,550
section less that can go wrong if the

00:16:15,839 --> 00:16:23,040
packages change I assume there will be

00:16:19,550 --> 00:16:24,570
tools for the typical candidate slate

00:16:23,040 --> 00:16:28,680
like rust

00:16:24,570 --> 00:16:32,120
Igor's working on death is his hiding

00:16:28,680 --> 00:16:32,120
siding in the new background

00:16:33,680 --> 00:16:41,520
yeah

00:16:34,980 --> 00:16:43,050
so that's on your doorstep and I hear

00:16:41,520 --> 00:16:47,459
there go people are also interested in

00:16:43,050 --> 00:16:50,670
using this the thing is that's how it's

00:16:47,459 --> 00:16:55,110
going to start I can imagine that on a

00:16:50,670 --> 00:16:58,170
long term even classical packages may be

00:16:55,110 --> 00:17:00,209
using this I mean it's not that great if

00:16:58,170 --> 00:17:06,900
you want to get the requirements out of

00:17:00,209 --> 00:17:11,130
an configure file but but see Marek

00:17:06,900 --> 00:17:13,290
maybe maybe maybe maybe one can even

00:17:11,130 --> 00:17:15,480
convince upstream to basically shipper

00:17:13,290 --> 00:17:18,390
machine readable file of dependencies at

00:17:15,480 --> 00:17:19,860
some point if we downstream are able to

00:17:18,390 --> 00:17:23,850
actually process that and it makes

00:17:19,860 --> 00:17:27,059
something useful with it so so I see

00:17:23,850 --> 00:17:28,980
there's more thing that is more impacted

00:17:27,059 --> 00:17:31,770
us can have on the long term but it will

00:17:28,980 --> 00:17:36,210
probably take a while until it all the

00:17:31,770 --> 00:17:41,100
tooling gets in place and it's actually

00:17:36,210 --> 00:17:42,990
gets adopted so the another thing when

00:17:41,100 --> 00:17:45,890
you're looking on the packages but I

00:17:42,990 --> 00:17:53,250
have been thinking about packages is

00:17:45,890 --> 00:17:56,850
there are some weird conflict about

00:17:53,250 --> 00:17:59,040
who's actually controlling what in our

00:17:56,850 --> 00:18:01,500
Pure Land so there's of course things

00:17:59,040 --> 00:18:04,290
that are RPM upstream that we do and

00:18:01,500 --> 00:18:05,970
then they are implemented and everyone

00:18:04,290 --> 00:18:10,650
else has to follow because if you change

00:18:05,970 --> 00:18:12,510
something yeah we changed it then there

00:18:10,650 --> 00:18:15,120
is of course a package sure which has

00:18:12,510 --> 00:18:18,360
most control over the package itself and

00:18:15,120 --> 00:18:22,350
there's a very weird in-between layer of

00:18:18,360 --> 00:18:25,020
the distribution that has very little

00:18:22,350 --> 00:18:27,059
control right now and so it's very

00:18:25,020 --> 00:18:30,690
difficult to actually centralize stuff

00:18:27,059 --> 00:18:33,179
out of the packages and bring bringing

00:18:30,690 --> 00:18:36,120
it in in a place where people think

00:18:33,179 --> 00:18:40,590
about a bigger picture so we've tried to

00:18:36,120 --> 00:18:43,050
do that with the file triggers to to be

00:18:40,590 --> 00:18:44,070
able to get us Triplets to a central

00:18:43,050 --> 00:18:45,450
place

00:18:44,070 --> 00:18:48,360
I think in the long term we need to

00:18:45,450 --> 00:18:50,550
think about more if there are more

00:18:48,360 --> 00:18:57,330
places where we can centralize things

00:18:50,550 --> 00:18:59,070
and currently that's really difficult

00:18:57,330 --> 00:19:02,040
because there's no implementation level

00:18:59,070 --> 00:19:04,350
so there's no open source but in fedora

00:19:02,040 --> 00:19:07,110
we have huge amount of packaging

00:19:04,350 --> 00:19:09,960
guidelines pages of all pages or pages

00:19:07,110 --> 00:19:11,940
or pages how things are to be done how

00:19:09,960 --> 00:19:14,010
they do be named how they be should look

00:19:11,940 --> 00:19:16,080
like what you can't and couldn't do what

00:19:14,010 --> 00:19:21,120
we shouldn't do what you might do if you

00:19:16,080 --> 00:19:24,420
ask someone or what else the the worst

00:19:21,120 --> 00:19:26,340
thing about all those guidelines is yeah

00:19:24,420 --> 00:19:30,330
there's a package review but if your

00:19:26,340 --> 00:19:32,220
package is in no one care so there are

00:19:30,330 --> 00:19:34,380
all those rules that may or may not be

00:19:32,220 --> 00:19:37,500
followed and there's no way to actually

00:19:34,380 --> 00:19:41,640
put them into the world as an entity on

00:19:37,500 --> 00:19:45,180
their own and so I hope that their here

00:19:41,640 --> 00:19:46,920
we can find ways to for one help the

00:19:45,180 --> 00:19:49,890
package sure doing the right thing and

00:19:46,920 --> 00:19:51,390
on the other hand giving the

00:19:49,890 --> 00:19:55,290
distribution or parts of two

00:19:51,390 --> 00:19:59,430
distributions more control over a set of

00:19:55,290 --> 00:20:01,520
packages of their interest I've first

00:19:59,430 --> 00:20:03,810
thought if we can do something on an

00:20:01,520 --> 00:20:05,940
distribution level but I think that's

00:20:03,810 --> 00:20:07,650
not possible to pick the reason why

00:20:05,940 --> 00:20:09,240
there's so much control on the package

00:20:07,650 --> 00:20:12,120
sure level is because the packages are

00:20:09,240 --> 00:20:13,650
so different and that's one of the

00:20:12,120 --> 00:20:15,450
reason why rpm is so hard and so

00:20:13,650 --> 00:20:18,570
complicated because we have to cover

00:20:15,450 --> 00:20:22,410
basically every possible situation that

00:20:18,570 --> 00:20:25,950
might be somewhere and there's no way to

00:20:22,410 --> 00:20:27,690
to like fit them all under one solution

00:20:25,950 --> 00:20:30,270
but there are a lot of packages that

00:20:27,690 --> 00:20:34,440
look a lot the same all the Python

00:20:30,270 --> 00:20:37,200
packages or the font packages or the

00:20:34,440 --> 00:20:39,240
language packages and so there are a lot

00:20:37,200 --> 00:20:42,030
of packages that belong together either

00:20:39,240 --> 00:20:44,040
by by the way they are built or the what

00:20:42,030 --> 00:20:47,340
they contain or how they are relate to

00:20:44,040 --> 00:20:50,790
and so I think we need to focus if we

00:20:47,340 --> 00:20:55,080
can find solutions and that allowed

00:20:50,790 --> 00:20:57,380
those packages to to be maintained in a

00:20:55,080 --> 00:20:57,380
more

00:20:57,510 --> 00:21:07,010
old way with a more centralized approach

00:21:02,780 --> 00:21:09,900
but that's going to be tricky because

00:21:07,010 --> 00:21:12,930
those structures don't really and just

00:21:09,900 --> 00:21:14,670
exist because there's no point in me

00:21:12,930 --> 00:21:17,700
like having a script saying well that's

00:21:14,670 --> 00:21:20,340
that's what Python packages should look

00:21:17,700 --> 00:21:21,900
like you need basically a group within a

00:21:20,340 --> 00:21:28,080
distribution that actually takes care of

00:21:21,900 --> 00:21:30,510
this this extends to rpm to some extent

00:21:28,080 --> 00:21:32,400
that we also have a lot of - a lot of

00:21:30,510 --> 00:21:35,970
the tools that we already have upstream

00:21:32,400 --> 00:21:38,970
is our things that we don't really

00:21:35,970 --> 00:21:41,670
maintain well because we don't know and

00:21:38,970 --> 00:21:44,490
we don't care really so there are all

00:21:41,670 --> 00:21:47,580
kinds of those dependency generators for

00:21:44,490 --> 00:21:50,460
different languages and I'm fine I know

00:21:47,580 --> 00:21:53,520
Python I can look at a Python dependency

00:21:50,460 --> 00:21:56,280
generator and make some sense of it then

00:21:53,520 --> 00:21:57,990
there is sudden goal dependency

00:21:56,280 --> 00:21:59,730
generator and have no idea or how that's

00:21:57,990 --> 00:22:04,170
even supposed to work and there are

00:21:59,730 --> 00:22:08,280
always other languages and so there's

00:22:04,170 --> 00:22:10,530
the we've tried to last year or two but

00:22:08,280 --> 00:22:12,360
not succeeded much precisely we pushed

00:22:10,530 --> 00:22:14,070
them out and basically hand them over as

00:22:12,360 --> 00:22:15,450
a separate projects that are maintained

00:22:14,070 --> 00:22:18,570
by different people that actually care

00:22:15,450 --> 00:22:21,230
about how those packages look like so I

00:22:18,570 --> 00:22:23,940
invited everyone if you're if you're

00:22:21,230 --> 00:22:26,850
taking care of some of those groups of

00:22:23,940 --> 00:22:30,120
larger packages talk to us if you have

00:22:26,850 --> 00:22:34,470
if you want to get involved so we can

00:22:30,120 --> 00:22:36,000
basically hand those and chase and areas

00:22:34,470 --> 00:22:38,610
over to people that actually care

00:22:36,000 --> 00:22:42,390
because rpm upstream can't really get

00:22:38,610 --> 00:22:46,140
involved into all those ever growing

00:22:42,390 --> 00:22:48,830
number of packaged families that have

00:22:46,140 --> 00:22:51,120
special needs that need special care and

00:22:48,830 --> 00:22:53,760
one of the things that we want to look

00:22:51,120 --> 00:22:58,110
into perform around feature wise is how

00:22:53,760 --> 00:23:01,590
to make this easier and how to offer

00:22:58,110 --> 00:23:04,650
solutions to those groups that can be

00:23:01,590 --> 00:23:08,610
actually done yeah you can write macros

00:23:04,650 --> 00:23:11,070
and rpm and but that's all kind of ugly

00:23:08,610 --> 00:23:13,440
right now so it's

00:23:11,070 --> 00:23:16,350
probably some lot of things can be done

00:23:13,440 --> 00:23:20,580
if you really want to but you run into

00:23:16,350 --> 00:23:23,789
issues very quickly so if you want to

00:23:20,580 --> 00:23:26,539
basically if you want to ship those

00:23:23,789 --> 00:23:28,740
macros as separate files and

00:23:26,539 --> 00:23:30,769
automatically set dependencies on those

00:23:28,740 --> 00:23:32,990
stuff so there's probably a lot of

00:23:30,769 --> 00:23:36,059
smaller feature that we will look into

00:23:32,990 --> 00:23:42,710
over the next year to see if if we can

00:23:36,059 --> 00:23:45,090
make this easier one of the ghosts to

00:23:42,710 --> 00:23:47,299
satellites house Paul operate code

00:23:45,090 --> 00:23:49,860
that's not that interesting but at least

00:23:47,299 --> 00:23:53,840
it is done I've looked at a build which

00:23:49,860 --> 00:23:53,840
does something very similar to this

00:23:54,620 --> 00:24:05,399
those interest groups d2 and we need to

00:24:02,340 --> 00:24:12,330
get in contact with and the ideas of

00:24:05,399 --> 00:24:15,450
course - this will be of course optional

00:24:12,330 --> 00:24:17,129
so we are not going to remove the other

00:24:15,450 --> 00:24:19,440
stuff so but that means on the other

00:24:17,129 --> 00:24:20,250
hand packages actually will need to be

00:24:19,440 --> 00:24:24,539
moved

00:24:20,250 --> 00:24:31,259
Wallis by hand or by script - there's no

00:24:24,539 --> 00:24:34,740
new options one way this could solve is

00:24:31,259 --> 00:24:38,519
if you put those scripts or templates in

00:24:34,740 --> 00:24:40,649
two in two separate versions in four

00:24:38,519 --> 00:24:45,419
different releases you could get rid of

00:24:40,649 --> 00:24:48,750
all those if if lines that litter a lot

00:24:45,419 --> 00:24:52,110
of our packages and here that's even

00:24:48,750 --> 00:24:55,710
worse an open source or not not pointing

00:24:52,110 --> 00:24:59,220
fingers but so but but if you have

00:24:55,710 --> 00:25:00,690
centralized scripts that are used there

00:24:59,220 --> 00:25:02,610
you can have different versions for

00:25:00,690 --> 00:25:06,090
different releases that does do the

00:25:02,610 --> 00:25:12,179
right thing without package even knowing

00:25:06,090 --> 00:25:14,250
the difference hopefully the other thing

00:25:12,179 --> 00:25:17,850
is dealing with sub-packages that's

00:25:14,250 --> 00:25:21,510
currently the problem with this the sub

00:25:17,850 --> 00:25:24,020
packages in RPM right now is the overall

00:25:21,510 --> 00:25:28,570
attitude that RPM has inspect files

00:25:24,020 --> 00:25:31,460
the spec file right now basically is an

00:25:28,570 --> 00:25:34,429
consistency check for the software it

00:25:31,460 --> 00:25:37,700
packages so you have to find list the

00:25:34,429 --> 00:25:39,380
file list is there to type in every file

00:25:37,700 --> 00:25:41,510
so make sure to make sure that if there

00:25:39,380 --> 00:25:43,640
some file pops up that doesn't belong

00:25:41,510 --> 00:25:45,679
there it gets an error it creates an

00:25:43,640 --> 00:25:47,600
error and you as a picture are supposed

00:25:45,679 --> 00:25:51,500
to look up what went wrong and fix that

00:25:47,600 --> 00:25:53,570
and fix the list or whatever and the

00:25:51,500 --> 00:25:55,370
same thing is also true for sub packages

00:25:53,570 --> 00:25:56,840
so as soon as something goes wrong there

00:25:55,370 --> 00:26:01,280
you will get an error and the package

00:25:56,840 --> 00:26:03,590
will not build and I think we might be

00:26:01,280 --> 00:26:05,929
able to basically just loosen those

00:26:03,590 --> 00:26:10,160
rules or be able to loosen those rules

00:26:05,929 --> 00:26:14,030
basically on honest bias which to be

00:26:10,160 --> 00:26:16,790
able to have template packages that

00:26:14,030 --> 00:26:19,370
we'll build if everything is right so so

00:26:16,790 --> 00:26:23,690
you can basically have an devil template

00:26:19,370 --> 00:26:26,960
that will be used and it will swallow

00:26:23,690 --> 00:26:29,510
all those files that look the right way

00:26:26,960 --> 00:26:31,400
so ordered include files it will just

00:26:29,510 --> 00:26:33,950
move there if there are some and the

00:26:31,400 --> 00:26:36,980
behavior will be if there are no files

00:26:33,950 --> 00:26:40,460
to be included because it's not an SI

00:26:36,980 --> 00:26:42,440
package but some documentation package

00:26:40,460 --> 00:26:45,730
dos package will just not be built

00:26:42,440 --> 00:26:49,309
without credit generating in error so

00:26:45,730 --> 00:26:54,910
you have those templates you can use and

00:26:49,309 --> 00:26:56,510
and it will fail graciously and not

00:26:54,910 --> 00:27:00,020
bother you

00:26:56,510 --> 00:27:06,440
I have some ideas how to do that but

00:27:00,020 --> 00:27:09,230
it's still brewing in my mind how to do

00:27:06,440 --> 00:27:11,480
this in detail the in the end it's a

00:27:09,230 --> 00:27:13,550
question of philosophy how much

00:27:11,480 --> 00:27:16,220
convenience you want for the package

00:27:13,550 --> 00:27:18,350
sure and how much control you want to

00:27:16,220 --> 00:27:26,480
bind down how the package actually

00:27:18,350 --> 00:27:28,250
should work there's the possibility of

00:27:26,480 --> 00:27:30,280
course we used to build templates from

00:27:28,250 --> 00:27:34,100
above to actually include those

00:27:30,280 --> 00:27:37,190
templates so you could have so that even

00:27:34,100 --> 00:27:39,529
those sub packages get basic

00:27:37,190 --> 00:27:43,340
generate automatically and you could

00:27:39,529 --> 00:27:46,940
have like distribution level includes

00:27:43,340 --> 00:27:48,799
that would determine what level of sub

00:27:46,940 --> 00:27:50,509
packages are actually built for those

00:27:48,799 --> 00:27:56,179
packages that using this so you could

00:27:50,509 --> 00:28:00,200
say well we want all the lip all the non

00:27:56,179 --> 00:28:02,119
binary files split out in a separate

00:28:00,200 --> 00:28:04,489
package so you would only have the

00:28:02,119 --> 00:28:06,940
binary stuff in the package and

00:28:04,489 --> 00:28:09,979
everything else gets a lip no source RPL

00:28:06,940 --> 00:28:13,249
RPM or something like this or you would

00:28:09,979 --> 00:28:16,460
be able to split out or language files

00:28:13,249 --> 00:28:19,489
and basically explode every every

00:28:16,460 --> 00:28:21,499
application into like 50 language sub

00:28:19,489 --> 00:28:22,909
packages and you could switch this on

00:28:21,499 --> 00:28:31,519
and off basically without even touching

00:28:22,909 --> 00:28:32,779
the package so that's basically yeah

00:28:31,519 --> 00:28:34,820
well one interesting thing is how to

00:28:32,779 --> 00:28:37,099
what to do with files and there is a

00:28:34,820 --> 00:28:39,349
couple of mechanisms that we would need

00:28:37,099 --> 00:28:42,619
there like some sub package stealing

00:28:39,349 --> 00:28:45,109
files from another and or if so that the

00:28:42,619 --> 00:28:49,249
problem is right now files are more or

00:28:45,109 --> 00:28:52,159
less taken care of very carefully but if

00:28:49,249 --> 00:28:53,599
you want to enable switch on and sub

00:28:52,159 --> 00:28:55,309
package of course have to move the files

00:28:53,599 --> 00:28:58,099
over there without generating an error

00:28:55,309 --> 00:29:03,049
in the other package that may list them

00:28:58,099 --> 00:29:04,729
still so there's a couple of there's

00:29:03,049 --> 00:29:06,379
what we will need some syntax that will

00:29:04,729 --> 00:29:09,799
allow to do that without generating

00:29:06,379 --> 00:29:11,960
arrows and we will also need something

00:29:09,799 --> 00:29:14,389
to basically append packages or

00:29:11,960 --> 00:29:16,070
something that is currently not possible

00:29:14,389 --> 00:29:19,249
so we cannot have like a second finalist

00:29:16,070 --> 00:29:22,009
for to add files to a package that may

00:29:19,249 --> 00:29:24,169
be coming from a template so if you have

00:29:22,009 --> 00:29:26,330
an Devil package you might have those

00:29:24,169 --> 00:29:30,919
other files you want India to so you

00:29:26,330 --> 00:29:35,479
will add something like this so that the

00:29:30,919 --> 00:29:38,499
things we've I'm thinking at night I'm

00:29:35,479 --> 00:29:44,210
thinking about at night questions

00:29:38,499 --> 00:29:48,519
comments scared faces I do have I do

00:29:44,210 --> 00:29:48,519
have a peer merge for the best comments

00:30:11,360 --> 00:30:25,710
walking like building up Ian's yes the

00:30:22,410 --> 00:30:27,930
question was about PEC parting and how

00:30:25,710 --> 00:30:30,780
to make it easier to make those new

00:30:27,930 --> 00:30:33,240
features and new macros to actually work

00:30:30,780 --> 00:30:35,820
on all the releases that are built from

00:30:33,240 --> 00:30:40,980
the same spec file into a white order if

00:30:35,820 --> 00:30:43,680
if release version something so in

00:30:40,980 --> 00:30:48,960
fedora White's us to some acree by

00:30:43,680 --> 00:30:50,340
having actually different get branches

00:30:48,960 --> 00:30:54,240
so they are not they are not building

00:30:50,340 --> 00:30:57,180
from the same file but they're not

00:30:54,240 --> 00:30:58,710
everyone is willing to split up the spec

00:30:57,180 --> 00:31:02,580
file into actually different versions so

00:30:58,710 --> 00:31:05,300
we basically get the same thing that

00:31:02,580 --> 00:31:08,220
pointing features is kind of difficult

00:31:05,300 --> 00:31:10,440
there especially I mean there there's

00:31:08,220 --> 00:31:13,890
just just no magic here there are two

00:31:10,440 --> 00:31:16,020
ways to do that either you update rpm in

00:31:13,890 --> 00:31:18,330
the old version that's something a lot

00:31:16,020 --> 00:31:21,000
of people feel very uncomfortable with

00:31:18,330 --> 00:31:22,860
and the other thing is basically back

00:31:21,000 --> 00:31:26,160
porting the single patches which is

00:31:22,860 --> 00:31:30,000
something we have done but we are trying

00:31:26,160 --> 00:31:34,290
to avoid in because of course a lot of

00:31:30,000 --> 00:31:37,470
work and may break stuff anyway but

00:31:34,290 --> 00:31:38,880
there's no real solution for us the real

00:31:37,470 --> 00:31:43,470
solution is not to have too many

00:31:38,880 --> 00:31:45,090
different versions or the other the

00:31:43,470 --> 00:31:48,990
other thing what we've actually done in

00:31:45,090 --> 00:31:53,100
in the past is delay the usage of those

00:31:48,990 --> 00:31:56,840
features for release or two so you so

00:31:53,100 --> 00:32:00,350
you basically trying drain out the old

00:31:56,840 --> 00:32:04,250
the old rpm versions that kinds of

00:32:00,350 --> 00:32:07,070
for didn't only use it later on we yet

00:32:04,250 --> 00:32:09,260
have been waiting 15 years that the

00:32:07,070 --> 00:32:11,539
thing the thing is we've we've we've

00:32:09,260 --> 00:32:20,690
dated in the past but but not not for

00:32:11,539 --> 00:32:22,010
this reason yeah we're we're we can no

00:32:20,690 --> 00:32:24,140
longer do that with all we're trying to

00:32:22,010 --> 00:32:27,500
keep up and be faster and it's a good

00:32:24,140 --> 00:34:11,389
thing but it it balances out so being

00:32:27,500 --> 00:34:13,760
slow sometimes you might well the main

00:34:11,389 --> 00:34:16,270
reason so the question was this looks

00:34:13,760 --> 00:34:19,220
like a lot of magic and why not

00:34:16,270 --> 00:34:23,929
generator built requires previously in

00:34:19,220 --> 00:34:27,350
another step and one of the reason is

00:34:23,929 --> 00:34:29,899
that we first you need to you need your

00:34:27,350 --> 00:34:34,220
infrastructure to do that not a step the

00:34:29,899 --> 00:34:38,570
second thing is those new language just

00:34:34,220 --> 00:34:41,720
basically yeah you could previously but

00:34:38,570 --> 00:34:44,030
it's kind of proud of the build process

00:34:41,720 --> 00:34:46,369
actually so so there there came they

00:34:44,030 --> 00:34:50,839
come prepackaged with the information in

00:34:46,369 --> 00:34:53,629
inside and basically using this during

00:34:50,839 --> 00:34:55,609
the process makes it easy makes it

00:34:53,629 --> 00:35:02,720
harder for us to actually go wrong or

00:34:55,609 --> 00:35:05,660
break so it's basically you could do it

00:35:02,720 --> 00:35:07,760
outside but you you need to you need to

00:35:05,660 --> 00:35:08,960
have all the stuff wrapped around if you

00:35:07,760 --> 00:35:12,160
do it in the package you can actually

00:35:08,960 --> 00:35:19,280
have the process of extracting those

00:35:12,160 --> 00:35:46,550
dependencies as part of the package yeah

00:35:19,280 --> 00:35:49,300
rpms rpm is all up so we are not we are

00:35:46,550 --> 00:35:49,300
not hiding them

00:36:04,750 --> 00:36:19,369
so this is a comment to the yes what we

00:36:16,490 --> 00:36:23,000
need to install in Tibet how do you want

00:36:19,369 --> 00:36:26,319
to then run the rust extract tool on

00:36:23,000 --> 00:36:26,319
your resolving

00:36:26,770 --> 00:36:34,099
so Kochi does it by you we take from

00:36:32,119 --> 00:36:36,490
this kit we create a source package

00:36:34,099 --> 00:36:39,109
source package gets passed to mock

00:36:36,490 --> 00:36:41,630
macarons DNF build depth which extracts

00:36:39,109 --> 00:36:43,970
us installs those built depths then runs

00:36:41,630 --> 00:36:45,859
RPM build against that our via built

00:36:43,970 --> 00:36:47,960
bombs out with another source package

00:36:45,859 --> 00:36:50,210
which then runs DNF build up against

00:36:47,960 --> 00:36:52,220
that creates a new trim that runs the

00:36:50,210 --> 00:36:55,750
bill the second time and then runs

00:36:52,220 --> 00:36:55,750
through that and then that's the final

00:36:59,630 --> 00:37:03,410
[Music]

00:37:01,329 --> 00:37:04,910
well in the end of the room there'll be

00:37:03,410 --> 00:37:06,980
a final source package but there's

00:37:04,910 --> 00:37:08,029
intermediary no source package that's

00:37:06,980 --> 00:37:11,750
great

00:37:08,029 --> 00:37:12,980
so the thing is it's actually is the the

00:37:11,750 --> 00:37:15,589
way it's implemented in RPM it's

00:37:12,980 --> 00:37:17,750
actually meant to restart a build and

00:37:15,589 --> 00:37:22,510
you can actually restart a build even

00:37:17,750 --> 00:37:25,670
from the extracted prep from the

00:37:22,510 --> 00:37:28,490
extracted sources if you want to so the

00:37:25,670 --> 00:37:30,410
turnaround in there is very small if you

00:37:28,490 --> 00:37:31,910
if you do it properly so it basically

00:37:30,410 --> 00:37:33,680
just creates a header with the

00:37:31,910 --> 00:37:36,440
dependencies in it and you basically

00:37:33,680 --> 00:37:39,109
install those into the existing build

00:37:36,440 --> 00:37:44,000
Road and then restart a build that's all

00:37:39,109 --> 00:37:47,529
you need to do mmm you would need to

00:37:44,000 --> 00:37:47,529
lock if well you need to

00:37:53,450 --> 00:37:58,640
no a total no nothing

00:37:56,599 --> 00:38:04,730
there's no secondary resolution process

00:37:58,640 --> 00:38:06,740
at all yeah Alice will be interesting so

00:38:04,730 --> 00:38:18,440
sorts I've been taught I've been talking

00:38:06,740 --> 00:38:19,790
to Michael Schroeder and he said we will

00:38:18,440 --> 00:38:21,470
see that I've been talking to Michael

00:38:19,790 --> 00:38:27,950
children he's that he thinks he can do

00:38:21,470 --> 00:38:36,670
it somehow but yeah so so so Who am I to

00:38:27,950 --> 00:38:36,670
question I'm not I'm not repeating that

00:39:08,589 --> 00:39:18,170
there's a very simple answer the answer

00:39:11,150 --> 00:39:21,940
is no we have people that do Java

00:39:18,170 --> 00:39:21,940
package sure that they're not me

00:39:22,290 --> 00:39:28,200
in addition was a vice knocks at the

00:39:26,010 --> 00:39:30,390
door project or there's a package be

00:39:28,200 --> 00:39:34,020
nine lines page the Java stuff applies

00:39:30,390 --> 00:39:35,940
to all Red Hat family distributions yeah

00:39:34,020 --> 00:40:07,220
s Wazir we have a lot of package and

00:39:35,940 --> 00:40:07,220
guidelines okay

00:40:41,230 --> 00:41:05,230
I like that because basically you're

00:41:03,490 --> 00:41:06,790
getting very close to some of the things

00:41:05,230 --> 00:41:10,420
that other people have been doing right

00:41:06,790 --> 00:41:12,550
now so I thought it looked at Connery

00:41:10,420 --> 00:41:20,380
but that's excuse me something we will

00:41:12,550 --> 00:41:26,020
look into can someone yeah so can

00:41:20,380 --> 00:41:36,240
someone I'm kind of I'm kind of chained

00:41:26,020 --> 00:41:36,240
here okay any other questions remarks

00:41:43,260 --> 00:41:47,829
that's that's a great that's a good

00:41:45,460 --> 00:41:50,170
that's a good question in its that's

00:41:47,829 --> 00:41:53,069
that's easy to answer it because there

00:41:50,170 --> 00:41:55,450
are no comments in rpm

00:41:53,069 --> 00:41:57,670
yeah doubt it but it's they actually

00:41:55,450 --> 00:42:00,550
answer the thing is if you have a hash

00:41:57,670 --> 00:42:04,060
that's an that's in comment within and

00:42:00,550 --> 00:42:06,280
and within its shell that's part of the

00:42:04,060 --> 00:42:08,650
shell thing and rpm is completely

00:42:06,280 --> 00:42:10,180
oblivious of the fact that you thought

00:42:08,650 --> 00:42:13,710
you would commenting on something out

00:42:10,180 --> 00:42:16,480
that's something we actually looked into

00:42:13,710 --> 00:42:19,470
like a half a year ago and I don't know

00:42:16,480 --> 00:42:25,869
if some did something about it but it's

00:42:19,470 --> 00:42:37,060
it's something I think I think we edit

00:42:25,869 --> 00:42:45,220
warning for that I'm not yeah something

00:42:37,060 --> 00:42:46,010
like this now we could do a alpha

00:42:45,220 --> 00:42:50,190
release next week

00:42:46,010 --> 00:43:08,800
[Laughter]

00:42:50,190 --> 00:43:10,710
yep that that's a plan so the plan is to

00:43:08,800 --> 00:43:13,360
do an alpha release next week and

00:43:10,710 --> 00:43:16,570
refined it through the next Fedora

00:43:13,360 --> 00:43:27,730
release cycle which ends in October or

00:43:16,570 --> 00:43:30,580
something November I think so your feel

00:43:27,730 --> 00:43:37,330
free to trap the alpha release as soon

00:43:30,580 --> 00:43:42,220
as it's out I you maybe maybe wait a

00:43:37,330 --> 00:43:44,230
week or two before you push it yeah but

00:43:42,220 --> 00:43:49,140
but of course you have feel free play

00:43:44,230 --> 00:43:51,760
around with it I mean yeah we will

00:43:49,140 --> 00:43:55,119
typically Fedora takes most of the heat

00:43:51,760 --> 00:43:57,070
off getting the really fresh stuff but

00:43:55,119 --> 00:43:59,740
there's really no reason why other

00:43:57,070 --> 00:44:10,000
people shouldn't try and feel a bit of

00:43:59,740 --> 00:44:12,670
the pain yeah but even even even if you

00:44:10,000 --> 00:44:16,020
don't put in a distribution right away

00:44:12,670 --> 00:44:16,020
you can play around with it

00:44:19,200 --> 00:44:31,840
like and that's because of my resolution

00:44:22,000 --> 00:44:36,850
anything can you just open a ticket for

00:44:31,840 --> 00:44:38,980
both on test case because the Macra

00:44:36,850 --> 00:44:41,260
engine we have Pavlina which has looked

00:44:38,980 --> 00:44:43,690
into the power macro engine i for years

00:44:41,260 --> 00:44:46,480
have basically refused to even look at

00:44:43,690 --> 00:44:52,650
it because it's scary on the outside and

00:44:46,480 --> 00:45:00,340
maybe is carry on the inside ha ha ha no

00:44:52,650 --> 00:45:02,890
but so yet there's probably still stuff

00:45:00,340 --> 00:45:15,850
that can be fixed even if it's code

00:45:02,890 --> 00:45:19,150
that's 20 years old I I will probably

00:45:15,850 --> 00:45:20,680
just I will I will probably just merge

00:45:19,150 --> 00:45:31,510
it as soon as I get back from the

00:45:20,680 --> 00:45:37,260
conference it's it's it's a it's a it's

00:45:31,510 --> 00:45:42,100
an it's an epic over like years and

00:45:37,260 --> 00:45:46,380
don't you pissed on it ok any other

00:45:42,100 --> 00:45:46,380
questions I think we're done here

00:45:46,600 --> 00:45:54,329

YouTube URL: https://www.youtube.com/watch?v=cd5hJB8TGms


