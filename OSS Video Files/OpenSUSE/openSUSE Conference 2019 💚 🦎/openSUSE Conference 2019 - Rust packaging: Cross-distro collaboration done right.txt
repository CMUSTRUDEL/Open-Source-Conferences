Title: openSUSE Conference 2019 - Rust packaging: Cross-distro collaboration done right
Publication date: 2019-05-26
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2489-rust-packaging-cross-distro-collaboration-done-right

Yes, distros can work together!

When you are looking on the distribution and how they package things, they do it in so much different way. Even between RPM-based distributions, there are different macro, different package names and so on. People inside distributions tend to just write something what suit their needs and start using it.

With Rust we've taken different approach: we've designed prototype in Fedora and then before officially using it, showed to other people (openSUSE, Mageia, Debian), asked for feedback, worked with them to suit their needs and only after that went and started using it in Fedora. It didn't work out fully with Debian because the ecosystem is too different, but even there we've made agreement on the filesystem paths and basic principles.

When you are looking on the distribution and how they package things, they do it in so much different way. Even between RPM-based distributions, there are different macro, different package names and so on. People inside distributions tend to just write something what suit their needs and start using it.

With Rust we've taken different approach: we've designed prototype in Fedora and then before officially using it, showed to other people (openSUSE, Mageia, Debian), asked for feedback, worked with them to suit their needs and only after that went and started using it in Fedora. It didn't work out fully with Debian because the ecosystem is too different, but even there we've made agreement on the filesystem paths and basic principles.

Igor Gnatenko
Captions: 
	00:00:05,510 --> 00:00:14,209
hello my name is Igor so today we're

00:00:09,740 --> 00:00:16,789
going to talk about not very popular I

00:00:14,209 --> 00:00:19,580
think like cross distro collaboration

00:00:16,789 --> 00:00:22,670
because everyone does it his own thing

00:00:19,580 --> 00:00:23,560
and no it doesn't care about other

00:00:22,670 --> 00:00:27,439
people

00:00:23,560 --> 00:00:29,449
so I'm federal contributor for six years

00:00:27,439 --> 00:00:32,150
though my open-source account is

00:00:29,449 --> 00:00:35,990
probably older than that I couldn't find

00:00:32,150 --> 00:00:38,000
a way how to check that I'm member of

00:00:35,990 --> 00:00:39,079
federal packaging committee the people

00:00:38,000 --> 00:00:41,690
who are defining the packaging

00:00:39,079 --> 00:00:45,020
guidelines for federal I'm outer of

00:00:41,690 --> 00:00:48,500
roster p.m. the tool which is generating

00:00:45,020 --> 00:00:50,960
the spec files for the rust packages I'm

00:00:48,500 --> 00:00:54,019
contributor for openSUSE basically

00:00:50,960 --> 00:00:56,719
mostly for rough stuff for a few months

00:00:54,019 --> 00:00:59,359
and I'm also a contributor to many

00:00:56,719 --> 00:01:04,330
upstream projects randomly pushing

00:00:59,359 --> 00:01:05,740
patches everywhere so for today we have

00:01:04,330 --> 00:01:09,800
[Music]

00:01:05,740 --> 00:01:11,900
look at current status between

00:01:09,800 --> 00:01:16,240
distribution differences in RPM

00:01:11,900 --> 00:01:19,760
packaging then basically is some small

00:01:16,240 --> 00:01:22,160
why why we actually care about it why do

00:01:19,760 --> 00:01:24,560
we want to have same packaging between

00:01:22,160 --> 00:01:26,890
different distributions then I will tell

00:01:24,560 --> 00:01:31,130
you how it happened with the rust and

00:01:26,890 --> 00:01:35,240
then basically just small recap what to

00:01:31,130 --> 00:01:40,220
do and how to do so current status is

00:01:35,240 --> 00:01:42,320
that for c and c++ the packaging is more

00:01:40,220 --> 00:01:45,470
or less same like you have same macro

00:01:42,320 --> 00:01:48,020
make build make install which is more or

00:01:45,470 --> 00:01:50,000
less works for Simek it's actually quite

00:01:48,020 --> 00:01:52,760
different for openSUSE and Phaedra

00:01:50,000 --> 00:01:54,500
because with the open source a builds

00:01:52,760 --> 00:01:56,750
out of the three by default and for

00:01:54,500 --> 00:01:59,690
feather it does not and there are many

00:01:56,750 --> 00:02:01,970
things which are different there the

00:01:59,690 --> 00:02:04,730
package names are also different in many

00:02:01,970 --> 00:02:07,250
cases in federal we just name packages

00:02:04,730 --> 00:02:09,920
like G Lib - while in open associates

00:02:07,250 --> 00:02:13,220
split to the sub packages like lib G

00:02:09,920 --> 00:02:15,140
leap to zero by so name but actually I

00:02:13,220 --> 00:02:19,189
found out that it's not everywhere it's

00:02:15,140 --> 00:02:19,730
just half-and-half probably for Python

00:02:19,189 --> 00:02:25,069
go

00:02:19,730 --> 00:02:27,920
and Ruby it's kinda similar the package

00:02:25,069 --> 00:02:30,280
package names for ruby is rubygems and

00:02:27,920 --> 00:02:34,129
the gym name for patent it's pied into

00:02:30,280 --> 00:02:38,330
Python free package name for go on it's

00:02:34,129 --> 00:02:40,370
golden github whatsoever but actually

00:02:38,330 --> 00:02:42,709
the macros inside and the house pack

00:02:40,370 --> 00:02:44,660
file looks is really different like

00:02:42,709 --> 00:02:46,910
really different open SUSE does a lot of

00:02:44,660 --> 00:02:50,299
magic to automated parts Federer does

00:02:46,910 --> 00:02:51,080
not so it's just horrible because you

00:02:50,299 --> 00:02:53,060
cannot simply take

00:02:51,080 --> 00:02:56,660
openSUSE spec and build it for federal

00:02:53,060 --> 00:02:59,450
you just need to rewrite it entirely so

00:02:56,660 --> 00:03:02,239
and rust is actually identical you can

00:02:59,450 --> 00:03:05,090
take federal spec file for the res

00:03:02,239 --> 00:03:07,640
package build it on openSUSE and install

00:03:05,090 --> 00:03:12,019
it on my J and it will work without any

00:03:07,640 --> 00:03:14,780
problems so why we actually care about

00:03:12,019 --> 00:03:16,790
all this well first thing is we don't

00:03:14,780 --> 00:03:19,790
want people to duplicate work because

00:03:16,790 --> 00:03:21,860
people can spend time on writing some

00:03:19,790 --> 00:03:24,560
automation tools improving generators

00:03:21,860 --> 00:03:26,900
for rust rpm for gem to rpm whatsoever

00:03:24,560 --> 00:03:29,120
they can work on infrastructure instead

00:03:26,900 --> 00:03:31,069
of doing the monkey work by rewriting

00:03:29,120 --> 00:03:31,970
spec files between distributions it

00:03:31,069 --> 00:03:34,819
doesn't make any sense

00:03:31,970 --> 00:03:35,870
and obviously users are confused because

00:03:34,819 --> 00:03:39,069
when they switch to a different

00:03:35,870 --> 00:03:41,510
distribution this is oh it used to be

00:03:39,069 --> 00:03:43,280
Lib G leap and now there is no such

00:03:41,510 --> 00:03:45,079
package what do I do now how do I

00:03:43,280 --> 00:03:48,319
install so basically for upstream

00:03:45,079 --> 00:03:49,639
developers it's they need to have ten

00:03:48,319 --> 00:03:50,870
different ways of describing which

00:03:49,639 --> 00:03:56,150
dependencies do you need to build your

00:03:50,870 --> 00:03:58,850
package build a tool so how did it went

00:03:56,150 --> 00:04:01,040
with the rust first thing we did is I

00:03:58,850 --> 00:04:03,019
created proof of concept which works for

00:04:01,040 --> 00:04:05,630
federal so it's generating spec file and

00:04:03,019 --> 00:04:08,049
it builds for federal it was not that

00:04:05,630 --> 00:04:10,940
easy but we did it

00:04:08,049 --> 00:04:12,590
yeah then differently we just went and

00:04:10,940 --> 00:04:17,049
started using and didn't tell anybody

00:04:12,590 --> 00:04:21,130
like everyone else does but not really

00:04:17,049 --> 00:04:24,289
so then we actually went to my Jo and

00:04:21,130 --> 00:04:25,550
openSUSE and asks people ok here is we

00:04:24,289 --> 00:04:29,930
have some proof of concept what do you

00:04:25,550 --> 00:04:31,700
think about it like don't tell me your

00:04:29,930 --> 00:04:33,559
preference what you don't like what we

00:04:31,700 --> 00:04:37,159
need to improve and stuff like that

00:04:33,559 --> 00:04:39,379
and apparently we got some Debian guys

00:04:37,159 --> 00:04:42,289
coming to us back and also telling oh

00:04:39,379 --> 00:04:44,089
this looks cool we definitely cannot use

00:04:42,289 --> 00:04:46,549
it because we have the packages but we

00:04:44,089 --> 00:04:48,679
can make some agreements on the where we

00:04:46,549 --> 00:04:52,099
install files how we package things and

00:04:48,679 --> 00:04:53,899
basically stuff like that and also we

00:04:52,099 --> 00:04:58,459
collaborated on to some upstream pages

00:04:53,899 --> 00:05:03,109
for example for cargo so we're working

00:04:58,459 --> 00:05:04,639
together we got some flag - - target

00:05:03,109 --> 00:05:05,809
which is specifying for widget

00:05:04,639 --> 00:05:09,019
distribution you want to generate spec

00:05:05,809 --> 00:05:10,609
files it is when I said you can take

00:05:09,019 --> 00:05:14,839
spec file from feather and build it on

00:05:10,609 --> 00:05:16,609
openSUSE it will work but openSUSE has

00:05:14,839 --> 00:05:19,009
its own guidelines for example their

00:05:16,609 --> 00:05:20,599
license header in the spec file which we

00:05:19,009 --> 00:05:22,999
don't have in Federer because all the

00:05:20,599 --> 00:05:25,249
spec files are MIT license by default

00:05:22,999 --> 00:05:27,199
unless you specify otherwise well in

00:05:25,249 --> 00:05:28,849
open-source it from what I know it's

00:05:27,199 --> 00:05:35,029
requirement to have the license header

00:05:28,849 --> 00:05:37,539
on the spec files so what were the

00:05:35,029 --> 00:05:41,239
challenges they were obviously not

00:05:37,539 --> 00:05:44,329
probably know the main challenge was

00:05:41,239 --> 00:05:50,539
that we needed to change rpm so for the

00:05:44,329 --> 00:05:53,659
RPM we needed to change we needed to

00:05:50,539 --> 00:05:55,999
have new the dependency description so

00:05:53,659 --> 00:05:59,479
we needed to have a way to specify that

00:05:55,999 --> 00:06:01,999
I need create fool with the version more

00:05:59,479 --> 00:06:04,789
equals one zero zero but less than one

00:06:01,999 --> 00:06:07,009
to zero for example and that's actually

00:06:04,789 --> 00:06:09,379
quite complicated in the RPM ecosystem

00:06:07,009 --> 00:06:10,939
because RPM is the core part of the

00:06:09,379 --> 00:06:13,489
whole distribution and you cannot just

00:06:10,939 --> 00:06:17,149
implement something and then hey guys

00:06:13,489 --> 00:06:19,849
start using it because it will take take

00:06:17,149 --> 00:06:24,349
a while so I think we had first proof of

00:06:19,849 --> 00:06:26,539
concept done in beginning of 2018 but we

00:06:24,349 --> 00:06:32,929
could not start using it everywhere in

00:06:26,539 --> 00:06:35,389
open SUSE until probably 2019 almost so

00:06:32,929 --> 00:06:38,289
what are the results of the of the work

00:06:35,389 --> 00:06:40,939
basically we established our C channel

00:06:38,289 --> 00:06:43,459
for the rust where we have people from

00:06:40,939 --> 00:06:46,669
open SUSE we have people from Debian we

00:06:43,459 --> 00:06:48,530
have people from Fedora from magia

00:06:46,669 --> 00:06:53,389
probably some other distributions which

00:06:48,530 --> 00:06:55,150
I didn't know about we got as I say it

00:06:53,389 --> 00:06:57,229
we got compatibility between

00:06:55,150 --> 00:06:58,729
distributions that you can take spec

00:06:57,229 --> 00:07:01,819
file from there build it there and sell

00:06:58,729 --> 00:07:03,800
it somewhere else it will work so we got

00:07:01,819 --> 00:07:05,900
only one repository which contains all

00:07:03,800 --> 00:07:11,749
the macro all the tooling and everything

00:07:05,900 --> 00:07:14,389
so people just use it basically file

00:07:11,749 --> 00:07:16,129
system path user share cargo whatever

00:07:14,389 --> 00:07:18,199
names are there is the same between

00:07:16,129 --> 00:07:20,210
distributions

00:07:18,199 --> 00:07:23,360
yeah and spec files are the same as well

00:07:20,210 --> 00:07:26,960
and if we compare rpm and dev

00:07:23,360 --> 00:07:29,419
distributions we have basically agreed

00:07:26,960 --> 00:07:31,189
on the file path and even the package

00:07:29,419 --> 00:07:34,219
names are somewhat similar because they

00:07:31,189 --> 00:07:36,889
don't use devil but they use dev so for

00:07:34,219 --> 00:07:40,159
example in fedora and open SUSE we have

00:07:36,889 --> 00:07:42,710
rusts or the derived devil well in the

00:07:40,159 --> 00:07:45,889
end they have libris or they derive dev

00:07:42,710 --> 00:07:51,379
so looks very similar so people are not

00:07:45,889 --> 00:07:53,449
that confused so basically some short

00:07:51,379 --> 00:07:57,110
instruction how people should work on

00:07:53,449 --> 00:07:59,659
this is basically create proof of

00:07:57,110 --> 00:08:02,949
concept which works for you then

00:07:59,659 --> 00:08:05,089
basically now before creating that

00:08:02,949 --> 00:08:06,560
people should actually look what's

00:08:05,089 --> 00:08:09,169
available they're probably already start

00:08:06,560 --> 00:08:11,629
somebody started working on something

00:08:09,169 --> 00:08:15,199
what you want to create so if it's there

00:08:11,629 --> 00:08:17,870
just join and work together if not just

00:08:15,199 --> 00:08:19,639
create proof of concept and then ask

00:08:17,870 --> 00:08:22,279
people for feedback find out who is

00:08:19,639 --> 00:08:24,379
interested and make sure that basically

00:08:22,279 --> 00:08:26,360
other distributions are aware of what

00:08:24,379 --> 00:08:29,930
you are doing and they can give their

00:08:26,360 --> 00:08:32,570
comments obviously you need some place

00:08:29,930 --> 00:08:35,240
to discuss everything not just in five

00:08:32,570 --> 00:08:38,659
different mailing lists you send to open

00:08:35,240 --> 00:08:40,940
SUSE devil rpm ecosystem fedora devil

00:08:38,659 --> 00:08:43,909
and everywhere just get some original or

00:08:40,940 --> 00:08:48,620
one mailing list and discuss everything

00:08:43,909 --> 00:08:51,380
there and don't forget that once you got

00:08:48,620 --> 00:08:53,690
some people you cannot just go and break

00:08:51,380 --> 00:08:55,310
everything because you just wanted to

00:08:53,690 --> 00:08:57,769
have something nicer in your

00:08:55,310 --> 00:08:59,840
distribution but then everyone else will

00:08:57,769 --> 00:09:02,300
say oh this doesn't work for us

00:08:59,840 --> 00:09:07,130
we're just going to fork it and be done

00:09:02,300 --> 00:09:09,320
with it and basically what I did I

00:09:07,130 --> 00:09:11,180
became a more contributor to the other

00:09:09,320 --> 00:09:13,550
distributions to basically try it out

00:09:11,180 --> 00:09:16,100
and see basically whenever I do any

00:09:13,550 --> 00:09:18,320
changes in the roster p.m. he I'm

00:09:16,100 --> 00:09:22,070
testing it on the open Scioscia to see

00:09:18,320 --> 00:09:24,620
basically whether somehow basically how

00:09:22,070 --> 00:09:28,330
does it affect that distributions do

00:09:24,620 --> 00:09:28,330
changes which helped both distributions

00:09:29,170 --> 00:09:35,540
this was actually much faster than I

00:09:31,760 --> 00:09:38,780
expected so I suppose we can go to the

00:09:35,540 --> 00:09:41,110
questions or suggestions or anything

00:09:38,780 --> 00:09:41,110
like that

00:09:45,820 --> 00:09:49,700
obviously the collaboration is really

00:09:48,110 --> 00:09:51,560
hard between the source is not easy we

00:09:49,700 --> 00:09:53,300
know so what was the hardest part for

00:09:51,560 --> 00:09:58,520
you to get three destroys together

00:09:53,300 --> 00:10:01,160
Raymond for so mostly it was talking

00:09:58,520 --> 00:10:03,650
finding right people that was quite hard

00:10:01,160 --> 00:10:07,760
it's good that we had a neil gumpa who

00:10:03,650 --> 00:10:10,580
actually told me hey this guy is doing

00:10:07,760 --> 00:10:14,180
something similar in openSUSE this guy

00:10:10,580 --> 00:10:16,910
is doing it in magia and what helped a

00:10:14,180 --> 00:10:18,110
lot was that Federer was I think the

00:10:16,910 --> 00:10:20,960
first dissolution which packaged

00:10:18,110 --> 00:10:23,030
compiler Ross compiler in the RPM so

00:10:20,960 --> 00:10:25,220
actually other people when trying to

00:10:23,030 --> 00:10:26,870
package it it's horrible to package

00:10:25,220 --> 00:10:28,310
compiler so they actually started

00:10:26,870 --> 00:10:30,470
looking at Federer and they actually go

00:10:28,310 --> 00:10:32,060
to further arrests before we started

00:10:30,470 --> 00:10:35,830
doing packaging for the rust

00:10:32,060 --> 00:10:39,650
applications other hard part was

00:10:35,830 --> 00:10:44,750
basically rpm rpm changes it's it's

00:10:39,650 --> 00:10:46,610
really hard all right if I get it

00:10:44,750 --> 00:10:50,930
correctly you're mostly talking about

00:10:46,610 --> 00:10:53,600
rust applications and is there anything

00:10:50,930 --> 00:10:56,030
that you can also share across

00:10:53,600 --> 00:10:58,910
distributions regarding building the

00:10:56,030 --> 00:11:01,340
compiler and cargo and all the tools so

00:10:58,910 --> 00:11:03,560
actually the I'm not sure about open

00:11:01,340 --> 00:11:05,600
SUSE but differently between further and

00:11:03,560 --> 00:11:08,750
much here actually the spec file is the

00:11:05,600 --> 00:11:11,900
absolutely same the it has I think three

00:11:08,750 --> 00:11:12,980
four conditionals in there like if my

00:11:11,900 --> 00:11:15,529
dear then because

00:11:12,980 --> 00:11:18,470
they have architecture I five eight six

00:11:15,529 --> 00:11:20,420
and that is not supported by upstream I

00:11:18,470 --> 00:11:22,579
mean it's not supported by upstream and

00:11:20,420 --> 00:11:25,070
it's it doesn't exist in Federer so

00:11:22,579 --> 00:11:28,839
there are few ifs but apart from that

00:11:25,070 --> 00:11:32,899
the spec file I think is like 99% same

00:11:28,839 --> 00:11:35,089
yeah I mean it turns out for example on

00:11:32,899 --> 00:11:38,329
on openSUSE we would like to have the

00:11:35,089 --> 00:11:40,250
same spec file for the current or

00:11:38,329 --> 00:11:42,889
running distribution the tumbleweed and

00:11:40,250 --> 00:11:45,620
for some older distributions so that you

00:11:42,889 --> 00:11:48,139
can get a Russ compiled on safely twelve

00:11:45,620 --> 00:11:51,230
and we don't have to maintain two

00:11:48,139 --> 00:11:53,120
different packages when that is a as you

00:11:51,230 --> 00:11:56,649
know that is that is a challenge because

00:11:53,120 --> 00:12:00,920
Ross compiles Russ is compiled by rust

00:11:56,649 --> 00:12:03,949
which is in turn compiled by LLVM so you

00:12:00,920 --> 00:12:06,500
would either have to bundle in the LLVM

00:12:03,949 --> 00:12:08,570
or you would have to depend on I don't

00:12:06,500 --> 00:12:11,389
know which LLVM then you start to get

00:12:08,570 --> 00:12:15,050
the differences between different yeah I

00:12:11,389 --> 00:12:17,360
think yeah Federer and much it do not

00:12:15,050 --> 00:12:19,100
bundle LLVM widget and just your shared

00:12:17,360 --> 00:12:20,540
library but basically if you try to

00:12:19,100 --> 00:12:23,060
compile it for alder distribution which

00:12:20,540 --> 00:12:24,709
just does not have new enough LLVM you

00:12:23,060 --> 00:12:29,329
probably will need to bundle it and it's

00:12:24,709 --> 00:12:33,350
becoming just a mess so yeah I think in

00:12:29,329 --> 00:12:38,569
eople we do bundle LLVM because LLVM

00:12:33,350 --> 00:12:40,600
coming from rallies is too old okay fair

00:12:38,569 --> 00:12:40,600
enough

00:12:41,649 --> 00:12:50,180
so is there some repository that keeps

00:12:46,220 --> 00:12:52,370
all those tools and and template spec

00:12:50,180 --> 00:12:58,240
templates and some play sources just in

00:12:52,370 --> 00:13:02,019
some packages so it is roster PM repo I

00:12:58,240 --> 00:13:02,019
think you can open it

00:13:07,310 --> 00:13:15,860
yes it looks horrible yeah whatever

00:13:13,459 --> 00:13:18,110
so we have rust rpm repo which has

00:13:15,860 --> 00:13:22,069
actually some templates between the

00:13:18,110 --> 00:13:27,800
distributions and you can see that no

00:13:22,069 --> 00:13:33,079
it's not this folder let's restore p.m.

00:13:27,800 --> 00:13:35,749
templates and so basically main spec is

00:13:33,079 --> 00:13:39,350
the same it's just named version release

00:13:35,749 --> 00:13:40,519
whatsoever some templating magic so the

00:13:39,350 --> 00:13:44,839
only difference part between

00:13:40,519 --> 00:13:49,879
distributions is yeah license header

00:13:44,839 --> 00:13:52,309
some basically it's for openSUSE yeah

00:13:49,879 --> 00:13:57,860
the group because in federal we don't

00:13:52,309 --> 00:14:00,649
use group thingy yeah and the change

00:13:57,860 --> 00:14:03,470
look so basically we have one repo which

00:14:00,649 --> 00:14:05,480
contains all the templates and it's just

00:14:03,470 --> 00:14:08,029
generator which is generating spec file

00:14:05,480 --> 00:14:11,209
and we have same you can supply some

00:14:08,029 --> 00:14:14,620
configuration for example you can I

00:14:11,209 --> 00:14:14,620
probably can show it

00:14:40,480 --> 00:14:45,970
you know so basically if you have such

00:14:43,300 --> 00:14:47,590
configuration file you can use rust rpm

00:14:45,970 --> 00:14:50,620
for different distributions and it will

00:14:47,590 --> 00:14:53,200
this actually will you can override for

00:14:50,620 --> 00:14:54,670
openSUSE for each distribution you can

00:14:53,200 --> 00:14:56,650
have different requires if they're

00:14:54,670 --> 00:14:58,120
really different but apart from that you

00:14:56,650 --> 00:15:00,310
have just default section which is

00:14:58,120 --> 00:15:02,980
compatible between all of them so

00:15:00,310 --> 00:15:04,870
basically when I'm packaging things like

00:15:02,980 --> 00:15:06,370
this for openSUSE just copy this

00:15:04,870 --> 00:15:09,460
configuration file there and generate

00:15:06,370 --> 00:15:17,590
spec file for openSUSE using same tool

00:15:09,460 --> 00:15:20,140
on federer so it's great to see the

00:15:17,590 --> 00:15:22,750
collaboration across the different

00:15:20,140 --> 00:15:27,910
districts what about collaboration with

00:15:22,750 --> 00:15:30,370
upstream rust well we do have some

00:15:27,910 --> 00:15:35,320
patches for the upstream which we

00:15:30,370 --> 00:15:38,620
obviously send them but for now we had

00:15:35,320 --> 00:15:41,740
three major things I think to fix one is

00:15:38,620 --> 00:15:45,040
that previously when you publish some

00:15:41,740 --> 00:15:46,900
crate it it still saves workspace paths

00:15:45,040 --> 00:15:48,400
and stuff like this in the cargo tunnel

00:15:46,900 --> 00:15:50,920
which is creating a pain for the

00:15:48,400 --> 00:15:55,060
packagers so this was fixed by the rust

00:15:50,920 --> 00:15:56,980
upstream quite quite fast we got a few

00:15:55,060 --> 00:15:59,170
more things which needs to be fixed and

00:15:56,980 --> 00:16:02,620
seems that upstream does not care much

00:15:59,170 --> 00:16:04,600
about that so it seems we just need to

00:16:02,620 --> 00:16:06,970
go and write patches for it and they

00:16:04,600 --> 00:16:10,770
will just accept it they seems do not

00:16:06,970 --> 00:16:10,770
have some time to to work on it

00:16:12,310 --> 00:16:17,490
what architectures are you testing

00:16:14,500 --> 00:16:23,130
against so basically for federal we have

00:16:17,490 --> 00:16:29,700
six architectures which use x86 64 i68 6

00:16:23,130 --> 00:16:34,750
PP c 64 l e as 490 x arm v 7s shell and

00:16:29,700 --> 00:16:38,850
air 64 we used to have PB c 64 the big

00:16:34,750 --> 00:16:38,850
endian one but we don't have it anymore

00:16:40,000 --> 00:16:47,100
we never had a 390 in the fedora as the

00:16:44,200 --> 00:16:47,100
primary architecture

00:16:51,769 --> 00:16:56,519
is there any interest of smaller

00:16:54,539 --> 00:16:59,999
distributions to join this or to take

00:16:56,519 --> 00:17:01,949
over the work which exactly

00:16:59,999 --> 00:17:04,259
distributions those small ones because

00:17:01,949 --> 00:17:06,240
actually I did not see those small

00:17:04,259 --> 00:17:09,240
distributions coming and basically

00:17:06,240 --> 00:17:10,829
asking for any help they probably just

00:17:09,240 --> 00:17:12,120
exist somewhere I don't know what

00:17:10,829 --> 00:17:19,259
they're doing I never heard about them

00:17:12,120 --> 00:17:21,179
okay one more question so if this rust

00:17:19,259 --> 00:17:25,429
stuff is done what's the next language

00:17:21,179 --> 00:17:29,460
you're doing according to this procedure

00:17:25,429 --> 00:17:32,070
so the next thing is I want to get

00:17:29,460 --> 00:17:33,690
further up closer to the openSUSE and

00:17:32,070 --> 00:17:36,269
the other way around so for example what

00:17:33,690 --> 00:17:39,179
I really enjoy about open source is the

00:17:36,269 --> 00:17:41,730
build system it's amazing but it has

00:17:39,179 --> 00:17:42,320
broken version control system at least

00:17:41,730 --> 00:17:45,059
for me

00:17:42,320 --> 00:17:47,460
it's painful to work with so basically

00:17:45,059 --> 00:17:50,549
what one thing which I want to get

00:17:47,460 --> 00:17:52,620
further to do is I want people to stop

00:17:50,549 --> 00:17:55,289
writing release in there because obvious

00:17:52,620 --> 00:17:56,879
is generating that automatically so and

00:17:55,289 --> 00:17:59,220
in federal you have to always rebuild

00:17:56,879 --> 00:18:01,799
yourself increment release and all the

00:17:59,220 --> 00:18:04,799
manual work which people hate so

00:18:01,799 --> 00:18:07,139
basically I want to get federal closer

00:18:04,799 --> 00:18:09,659
to open source in this way but on the

00:18:07,139 --> 00:18:11,429
other hand I want OpenSocial to start

00:18:09,659 --> 00:18:17,639
using for example get as the version

00:18:11,429 --> 00:18:21,269
control system so so we can get a bit

00:18:17,639 --> 00:18:23,610
closer and probably at some point I want

00:18:21,269 --> 00:18:27,779
to get Ruby and Python stuff to be

00:18:23,610 --> 00:18:30,860
better with help of the RPM folks I'm

00:18:27,779 --> 00:18:30,860
looking at you Florian

00:18:36,769 --> 00:18:41,669
so from what you have seen how to

00:18:39,570 --> 00:18:44,309
improve cross sister collaboration

00:18:41,669 --> 00:18:47,820
obviously it worked for us guys but

00:18:44,309 --> 00:18:52,080
mostly it's not where it should be so I

00:18:47,820 --> 00:18:54,870
think we need a actually rpm rpm extreme

00:18:52,080 --> 00:18:56,730
wanted to get this was closer so they

00:18:54,870 --> 00:18:58,620
created the RPM ecosystem mailing list

00:18:56,730 --> 00:19:01,380
which is supposed to be read by

00:18:58,620 --> 00:19:04,169
different distributions which is not

00:19:01,380 --> 00:19:06,389
very true at this point so I I would

00:19:04,169 --> 00:19:09,139
probably suggest to subscribe to our

00:19:06,389 --> 00:19:12,539
p.m. echo system at rpm that org and

00:19:09,139 --> 00:19:14,370
basically like whenever we want to do

00:19:12,539 --> 00:19:15,870
something with the packaging like in the

00:19:14,370 --> 00:19:18,299
entirely new ecosystem which didn't

00:19:15,870 --> 00:19:21,360
exist before or basically somebody wants

00:19:18,299 --> 00:19:23,460
to rework old stuff basically bring it

00:19:21,360 --> 00:19:27,500
there discuss it between between the

00:19:23,460 --> 00:19:30,929
people and get from there not just do it

00:19:27,500 --> 00:19:34,169
so we also created and repository on

00:19:30,929 --> 00:19:36,149
github for those stuff so the ideas in a

00:19:34,169 --> 00:19:39,090
long term to move more of those scripts

00:19:36,149 --> 00:19:41,700
out of our PM core because we really

00:19:39,090 --> 00:19:43,830
can't take care of it properly like

00:19:41,700 --> 00:19:46,740
things like python and go and all those

00:19:43,830 --> 00:19:49,019
languages to have the tooling for those

00:19:46,740 --> 00:19:51,299
packages move to separate repositories

00:19:49,019 --> 00:19:53,059
that that are maintained by the

00:19:51,299 --> 00:19:56,370
communities shared between the

00:19:53,059 --> 00:20:00,710
distributions and basically rpm only

00:19:56,370 --> 00:20:04,019
lending its name and place as a neutral

00:20:00,710 --> 00:20:06,659
playground for for people to meet and do

00:20:04,019 --> 00:20:08,639
that but we have we created a repository

00:20:06,659 --> 00:20:10,380
but we didn't put too much work into

00:20:08,639 --> 00:20:15,480
getting people in it's something we need

00:20:10,380 --> 00:20:17,070
to do for probably rather sooner than

00:20:15,480 --> 00:20:18,690
later because there's still a lot of

00:20:17,070 --> 00:20:23,429
stuff that can be improved and it's

00:20:18,690 --> 00:20:25,620
currently distributed over all those

00:20:23,429 --> 00:20:28,010
small parts in some distributions some

00:20:25,620 --> 00:20:31,980
files and probably not even being

00:20:28,010 --> 00:20:35,730
uniform within the distributions and so

00:20:31,980 --> 00:20:40,139
there's a lot to be done to make make

00:20:35,730 --> 00:20:44,250
this easier for everyone and probably

00:20:40,139 --> 00:20:46,919
stop doing all this magic inside the RPM

00:20:44,250 --> 00:20:49,260
macros and get some pitches to rpm to

00:20:46,919 --> 00:20:51,900
improve it not just try to work around

00:20:49,260 --> 00:20:54,390
but try to get some features in the RPM

00:20:51,900 --> 00:20:58,020
nowadays it's much easier than it used

00:20:54,390 --> 00:21:00,500
to be many years ago so like for example

00:20:58,020 --> 00:21:03,840
the sub packages for Python to Python 3

00:21:00,500 --> 00:21:07,530
fluorine is working somehow own it in

00:21:03,840 --> 00:21:09,570
the RPM upstream so let's just help rpm

00:21:07,530 --> 00:21:11,940
upstream to get some patterns for the

00:21:09,570 --> 00:21:14,130
packages whatever we need to automate

00:21:11,940 --> 00:21:16,040
packaging let's get it to the RPM stream

00:21:14,130 --> 00:21:33,240
instead of trying to work around it in

00:21:16,040 --> 00:21:35,040
distributions more questions so I think

00:21:33,240 --> 00:21:37,110
if no more questions

00:21:35,040 --> 00:21:41,910
such stickers are available somewhere

00:21:37,110 --> 00:21:43,660
around feel free to grab them I suppose

00:21:41,910 --> 00:21:49,809
this it thanks

00:21:43,660 --> 00:21:49,809

YouTube URL: https://www.youtube.com/watch?v=izHUvjO0Jhw


