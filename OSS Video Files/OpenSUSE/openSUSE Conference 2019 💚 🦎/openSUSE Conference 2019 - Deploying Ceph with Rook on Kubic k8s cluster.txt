Title: openSUSE Conference 2019 - Deploying Ceph with Rook on Kubic k8s cluster
Publication date: 2019-05-24
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2468-deploying-ceph-with-rook-on-kubic-k8s-cluster



In this talk we could see how easy it is to deploy and configure Ceph ready k8s cluster on top of Kubic. And setup Ceph on top of it with Rook (rook.io).
We would see couple of examples for Openstack and Vagrant to run such clusters for your CI and development environments.

In this talk we could see how easy it is to deploy and configure Ceph ready k8s cluster on top of Kubic. And setup Ceph on top of it with Rook (rook.io).
We would see couple of examples for Openstack and Vagrant to run such clusters for your CI and development environments.

Denis Kondratenko
Captions: 
	00:00:05,570 --> 00:00:10,680
so once again my name is Dennis I am

00:00:08,490 --> 00:00:13,010
working at Sousa it's storage team and

00:00:10,680 --> 00:00:16,619
today I will be talking about the

00:00:13,010 --> 00:00:18,869
cellphone Kubek how to set up that and

00:00:16,619 --> 00:00:21,779
Kubik how to run that and how to you can

00:00:18,869 --> 00:00:27,149
possibly test that as well and develop

00:00:21,779 --> 00:00:28,890
it so as I said I am working storage we

00:00:27,149 --> 00:00:32,070
are developing the storage product based

00:00:28,890 --> 00:00:33,809
on self and that's includes not only

00:00:32,070 --> 00:00:35,700
self but a lot of different

00:00:33,809 --> 00:00:39,390
configuration management software around

00:00:35,700 --> 00:00:41,820
gateways and all the possible tools are

00:00:39,390 --> 00:00:44,339
there I will briefly go through the self

00:00:41,820 --> 00:00:46,800
technology what is the self what is the

00:00:44,339 --> 00:00:49,920
root and then we'll show you how you can

00:00:46,800 --> 00:00:57,379
setup that on your environment and start

00:00:49,920 --> 00:01:01,109
running it so storage is distributed

00:00:57,379 --> 00:01:03,329
storage system sorry and it's highly

00:01:01,109 --> 00:01:05,370
distributed highly available it's

00:01:03,329 --> 00:01:08,909
distributed data across the different

00:01:05,370 --> 00:01:12,420
nodes and provides you access to it as

00:01:08,909 --> 00:01:17,369
block devices file system and as s3

00:01:12,420 --> 00:01:19,259
Swift interfaces as well it this the

00:01:17,369 --> 00:01:21,329
what is good and safe is that is

00:01:19,259 --> 00:01:25,110
replicates data across the cluster

00:01:21,329 --> 00:01:27,090
manage it and self-healing itself if

00:01:25,110 --> 00:01:29,880
some molds are down or some discs are

00:01:27,090 --> 00:01:31,890
broken so it will figure out where the

00:01:29,880 --> 00:01:36,630
data is it's really placated again and

00:01:31,890 --> 00:01:41,340
provide you data always there so here is

00:01:36,630 --> 00:01:43,409
the one of the heart of the self system

00:01:41,340 --> 00:01:46,289
is the rudders reliable autonomic

00:01:43,409 --> 00:01:48,479
distributed objects store which all

00:01:46,289 --> 00:01:52,049
these interfaces are based on so this is

00:01:48,479 --> 00:01:54,780
a general system storage system where

00:01:52,049 --> 00:01:57,420
all other are based on it so you can use

00:01:54,780 --> 00:02:00,719
the directly the Broadus interface with

00:01:57,420 --> 00:02:02,460
little robust library as well as its you

00:02:00,719 --> 00:02:05,759
have services like Radha's Gateway

00:02:02,460 --> 00:02:08,070
providing you s3 and swift interface you

00:02:05,759 --> 00:02:11,720
have block devices that you can use

00:02:08,070 --> 00:02:14,600
mount and use as well as file system

00:02:11,720 --> 00:02:17,270
for the surface so surface this is

00:02:14,600 --> 00:02:20,900
native file system for self that's

00:02:17,270 --> 00:02:24,410
actually works in provider file system

00:02:20,900 --> 00:02:26,960
really rapidly and there are also other

00:02:24,410 --> 00:02:29,330
great ways that you can use like in a

00:02:26,960 --> 00:02:33,380
fast gateway I sky's a gateway that you

00:02:29,330 --> 00:02:38,390
also can apply here and use his self

00:02:33,380 --> 00:02:41,110
system in the heart of the self system

00:02:38,390 --> 00:02:43,730
there is a grush algorithm that actually

00:02:41,110 --> 00:02:46,400
allows you to distribute the data to

00:02:43,730 --> 00:02:49,790
know where data is how to replicate it

00:02:46,400 --> 00:02:52,520
and and so on so basically what you need

00:02:49,790 --> 00:02:55,070
to know about the self for this topic is

00:02:52,520 --> 00:02:59,180
this complex system in the different

00:02:55,070 --> 00:03:01,610
nodes and it's really not trivial to

00:02:59,180 --> 00:03:05,060
configure and maintain and manage

00:03:01,610 --> 00:03:07,640
upgrade update and etc that's those

00:03:05,060 --> 00:03:10,870
other challenges of self in the

00:03:07,640 --> 00:03:10,870
configuration management perspective

00:03:11,320 --> 00:03:20,210
what is the ruk ruk is the cloud native

00:03:16,340 --> 00:03:22,130
storage Orchestrator and it's also have

00:03:20,210 --> 00:03:24,860
all these fancy words like safe managing

00:03:22,130 --> 00:03:28,810
self care scaling conceptual healing but

00:03:24,860 --> 00:03:32,570
it's on another level so if self is the

00:03:28,810 --> 00:03:35,980
solution for data rookie solution for

00:03:32,570 --> 00:03:39,710
the orchestration of these services

00:03:35,980 --> 00:03:41,750
around the cluster so it's automates the

00:03:39,710 --> 00:03:45,530
deployment bootstrapping configuration

00:03:41,750 --> 00:03:47,450
of great update everything so this is

00:03:45,530 --> 00:03:49,970
the ruk it supports not only self a

00:03:47,450 --> 00:03:53,420
storage system but other storage system

00:03:49,970 --> 00:03:55,400
as well for example databases etc they a

00:03:53,420 --> 00:03:58,310
couple of them but I think the self is

00:03:55,400 --> 00:04:01,790
only one that is their reach their

00:03:58,310 --> 00:04:04,720
version 1.0 other systems are still in

00:04:01,790 --> 00:04:09,100
the beta stage some in the alpha stage

00:04:04,720 --> 00:04:12,380
so what ruk actually does it's setups

00:04:09,100 --> 00:04:15,200
the self across your nodes across the

00:04:12,380 --> 00:04:17,690
disks its knows where it should set up

00:04:15,200 --> 00:04:20,870
their storage nodes it knows where to

00:04:17,690 --> 00:04:23,360
stab the monitors managers gateways and

00:04:20,870 --> 00:04:25,189
etcetera it does it all for you in the

00:04:23,360 --> 00:04:27,409
kubernetes cluster for exam

00:04:25,189 --> 00:04:29,479
so here you can see the rock

00:04:27,409 --> 00:04:32,240
architecture it's provides it's not only

00:04:29,479 --> 00:04:35,960
setups des F it's also provide the

00:04:32,240 --> 00:04:39,139
access to self through the volume claims

00:04:35,960 --> 00:04:44,590
or directly so you can use in your

00:04:39,139 --> 00:04:48,620
containers this this storage from self

00:04:44,590 --> 00:04:52,449
in your containers so there is briefly

00:04:48,620 --> 00:04:55,580
architecture of self of look sorry and

00:04:52,449 --> 00:04:58,460
there is what I already said is that

00:04:55,580 --> 00:05:01,460
this root agent for example provides the

00:04:58,460 --> 00:05:04,219
access to the self storage so you can

00:05:01,460 --> 00:05:06,650
reuse it in your containers actually I'm

00:05:04,219 --> 00:05:10,270
not expert in Rock per se we have people

00:05:06,650 --> 00:05:12,680
here and I can point to Stefan has

00:05:10,270 --> 00:05:14,539
sitting here in the room and if you will

00:05:12,680 --> 00:05:19,849
have any questions regarding look how it

00:05:14,539 --> 00:05:22,819
works you can ask him so we have self

00:05:19,849 --> 00:05:25,400
you have orchestrators that works in

00:05:22,819 --> 00:05:30,610
kubernetes what we means is that's

00:05:25,400 --> 00:05:33,500
actually how to use it in openSUSE in

00:05:30,610 --> 00:05:36,650
storage team as well as in other teams

00:05:33,500 --> 00:05:39,439
in says Susie we always have the opens

00:05:36,650 --> 00:05:42,860
to the first approach so we first commit

00:05:39,439 --> 00:05:45,649
our packages and our solutions to

00:05:42,860 --> 00:05:47,960
openSUSE and then tested they I build it

00:05:45,649 --> 00:05:52,219
there and after that we use it in the

00:05:47,960 --> 00:05:55,189
enterprise product so we have the if we

00:05:52,219 --> 00:05:59,060
have the packages long time built in our

00:05:55,189 --> 00:06:02,620
file system self development repo it

00:05:59,060 --> 00:06:05,419
also get submitted to tumbleweed and the

00:06:02,620 --> 00:06:07,099
PAC stable packages of self ago

00:06:05,419 --> 00:06:09,860
submitted to leap as well

00:06:07,099 --> 00:06:12,080
so you can see here that we have they

00:06:09,860 --> 00:06:15,289
open SUSE yourself wiki page which you

00:06:12,080 --> 00:06:17,930
can check and there are some hints how

00:06:15,289 --> 00:06:20,800
to configure how to yourself as well as

00:06:17,930 --> 00:06:21,979
you can check those build server

00:06:20,800 --> 00:06:25,610
projects

00:06:21,979 --> 00:06:27,860
what kind of packages are there and how

00:06:25,610 --> 00:06:34,669
that looks like I will show you in the

00:06:27,860 --> 00:06:36,900
mem in the moment so this is our wiki

00:06:34,669 --> 00:06:39,810
page that you can

00:06:36,900 --> 00:06:43,259
read and figure out what kind of methods

00:06:39,810 --> 00:06:46,080
to install and surf it starts even from

00:06:43,259 --> 00:06:48,870
beginning of deployment with self deploy

00:06:46,080 --> 00:06:50,879
is how you can deploy it with salt how

00:06:48,870 --> 00:06:53,039
you can deploy it in containers how you

00:06:50,879 --> 00:06:56,840
can deploy it with rook as well so it's

00:06:53,039 --> 00:07:02,419
great quite useful for the beginning

00:06:56,840 --> 00:07:05,250
here is our build server project and

00:07:02,419 --> 00:07:09,479
it's container contains all the packages

00:07:05,250 --> 00:07:14,099
I needed for you to start yourself build

00:07:09,479 --> 00:07:15,870
it and run it by the way they still this

00:07:14,099 --> 00:07:18,870
is a whole development project so the

00:07:15,870 --> 00:07:22,439
release packages already and in the leap

00:07:18,870 --> 00:07:24,719
and tumbleweed distro you also could pay

00:07:22,439 --> 00:07:26,969
attention to sub projects they are quite

00:07:24,719 --> 00:07:29,879
a few of them starting from hammer

00:07:26,969 --> 00:07:32,759
release doodle luminous currently the

00:07:29,879 --> 00:07:41,520
stable one is no tools and the

00:07:32,759 --> 00:07:44,089
development one is octopus so the

00:07:41,520 --> 00:07:46,650
process for the release in the staff

00:07:44,089 --> 00:07:49,650
looks forward so we have this file

00:07:46,650 --> 00:07:52,889
system safe octopus which is development

00:07:49,650 --> 00:07:54,690
project we submit those packages to the

00:07:52,889 --> 00:07:59,159
file system staff and from there we

00:07:54,690 --> 00:08:00,900
submit them to factory and from file

00:07:59,159 --> 00:08:05,339
system safe notice we submit the

00:08:00,900 --> 00:08:07,710
packages leap for container sexually

00:08:05,339 --> 00:08:10,919
this is a new thing for us it's quite

00:08:07,710 --> 00:08:14,729
rapidly changing lately as Fabian said

00:08:10,919 --> 00:08:17,330
it's became more stable so we are

00:08:14,729 --> 00:08:19,830
starting to build the containers as well

00:08:17,330 --> 00:08:23,159
and we have their route self image which

00:08:19,830 --> 00:08:26,669
is the based on route package and this

00:08:23,159 --> 00:08:28,560
is a rock operator that I describe it as

00:08:26,669 --> 00:08:30,659
well as self image which is their self

00:08:28,560 --> 00:08:34,199
is all needed services that are listed

00:08:30,659 --> 00:08:35,190
here like safe monitors self itself and

00:08:34,199 --> 00:08:39,100
self

00:08:35,190 --> 00:08:42,550
libraries as well as self ISD

00:08:39,100 --> 00:08:46,270
and we are planning to follow the same

00:08:42,550 --> 00:08:49,060
process so that's a Fabian define it on

00:08:46,270 --> 00:08:51,850
the wiki page we plan to submit our

00:08:49,060 --> 00:08:54,940
containers from file system self to the

00:08:51,850 --> 00:08:58,080
openSUSE factory and leap so you will

00:08:54,940 --> 00:09:09,670
see those containers in the distro

00:08:58,080 --> 00:09:11,920
sometimes in near future I hope and you

00:09:09,670 --> 00:09:14,530
have ever seen right now we have system

00:09:11,920 --> 00:09:16,270
we have say look we have builded

00:09:14,530 --> 00:09:18,610
packages as well as containers what we

00:09:16,270 --> 00:09:21,610
need is in our development setup is to

00:09:18,610 --> 00:09:25,810
actually set it up use it develop test

00:09:21,610 --> 00:09:27,610
it how we can do that in openSUSE in we

00:09:25,810 --> 00:09:30,310
have in opposite of the self we have

00:09:27,610 --> 00:09:34,750
long time project a long-term project

00:09:30,310 --> 00:09:37,210
that named vagrants F it was developed

00:09:34,750 --> 00:09:39,520
at long time ago to set up the virtual

00:09:37,210 --> 00:09:41,710
environment on your local computer that

00:09:39,520 --> 00:09:44,110
enables you to develop configuration

00:09:41,710 --> 00:09:46,480
management systems for example we have

00:09:44,110 --> 00:09:48,880
deep sea based on salt and that was

00:09:46,480 --> 00:09:52,210
really useful to have like multi node

00:09:48,880 --> 00:09:55,260
setup on your local machine to set up

00:09:52,210 --> 00:09:57,700
the self on different nodes and that's

00:09:55,260 --> 00:10:00,550
that project actually provides you

00:09:57,700 --> 00:10:04,300
disability it's also provides a lot of

00:10:00,550 --> 00:10:07,090
its it has a lot of libraries to prepare

00:10:04,300 --> 00:10:10,120
these images to attach the disks to the

00:10:07,090 --> 00:10:12,520
always denotes to define the different

00:10:10,120 --> 00:10:15,070
roles like administration role monitor

00:10:12,520 --> 00:10:18,730
role etc it's also pre upload some of

00:10:15,070 --> 00:10:21,370
the files if needed this all define it

00:10:18,730 --> 00:10:23,380
in the as I said in the wiki page so you

00:10:21,370 --> 00:10:27,910
can read this documentation there as

00:10:23,380 --> 00:10:30,550
well how it works you need to have a box

00:10:27,910 --> 00:10:33,790
and luckily enough

00:10:30,550 --> 00:10:37,330
openSUSE factory has this box for micros

00:10:33,790 --> 00:10:40,120
they build in the vibrant box so what

00:10:37,330 --> 00:10:44,200
you need is to add the box with one

00:10:40,120 --> 00:10:46,420
comment and make vibrant up and that

00:10:44,200 --> 00:10:49,870
will bring up the cluster in this case

00:10:46,420 --> 00:10:53,480
it's Renault tiny cluster and you will

00:10:49,870 --> 00:10:56,100
have the kubernetes deploy there so

00:10:53,480 --> 00:10:58,170
so this is the starting point the

00:10:56,100 --> 00:11:02,750
kubernetes cluster or some notes so you

00:10:58,170 --> 00:11:12,079
can you can start to deploy work on it

00:11:02,750 --> 00:11:15,449
how that's possible so they're the

00:11:12,079 --> 00:11:17,730
vagrants eff has said this number of

00:11:15,449 --> 00:11:19,680
libraries right and it's also have this

00:11:17,730 --> 00:11:21,630
configure mo file where all the

00:11:19,680 --> 00:11:25,260
configuration defiant or you can define

00:11:21,630 --> 00:11:28,800
your own configuration and also it

00:11:25,260 --> 00:11:31,170
defines what to do after after the

00:11:28,800 --> 00:11:33,930
brutal machines brought up so you can

00:11:31,170 --> 00:11:36,120
add some repositories there you can add

00:11:33,930 --> 00:11:38,699
some packages you can add some files

00:11:36,120 --> 00:11:40,769
upload some files and run some comments

00:11:38,699 --> 00:11:46,529
if you need for example here's the

00:11:40,769 --> 00:11:50,639
example for tumbleweed but I will talk

00:11:46,529 --> 00:11:55,920
about how to stop the kubernetes on that

00:11:50,639 --> 00:11:58,500
cluster so setting up kubernetes is

00:11:55,920 --> 00:12:01,010
quite tricky if you go the right way to

00:11:58,500 --> 00:12:03,690
result els certificates and etc i

00:12:01,010 --> 00:12:06,990
reviewed with a couple of the vehicle by

00:12:03,690 --> 00:12:09,480
grunt setups for kubernetes and it was

00:12:06,990 --> 00:12:12,510
really complicated so what what did I

00:12:09,480 --> 00:12:13,680
want is to use the same vagrant set

00:12:12,510 --> 00:12:17,000
because it provides already

00:12:13,680 --> 00:12:20,819
infrastructure for you and set up the

00:12:17,000 --> 00:12:22,980
kubernetes I did it's really hacky it's

00:12:20,819 --> 00:12:27,449
actually quite a lot of hacks here so

00:12:22,980 --> 00:12:29,970
the first line here is the Cooper admin

00:12:27,449 --> 00:12:32,610
in it and it's used a predefined token

00:12:29,970 --> 00:12:35,699
it runs from that me not as you see and

00:12:32,610 --> 00:12:37,860
it runs all the commands to have the

00:12:35,699 --> 00:12:41,970
fully functional Kubrat min node

00:12:37,860 --> 00:12:43,649
kubernetes master node and also pre

00:12:41,970 --> 00:12:46,620
applauds root package they're not

00:12:43,649 --> 00:12:50,730
package but resources to the admin node

00:12:46,620 --> 00:12:54,260
and the hug here another hack here is

00:12:50,730 --> 00:12:58,620
that how the other nodes are joining the

00:12:54,260 --> 00:13:01,560
cluster around that in the demonized way

00:12:58,620 --> 00:13:04,470
this Cooperman giant takes some time

00:13:01,560 --> 00:13:06,720
it's actually half timeout but it's

00:13:04,470 --> 00:13:08,790
enough for admin nodes to

00:13:06,720 --> 00:13:13,259
during the cluster so it's just trance

00:13:08,790 --> 00:13:14,850
on all the notes except that mean I do

00:13:13,259 --> 00:13:17,550
not recommend to use that in any

00:13:14,850 --> 00:13:19,800
production environment or anywhere out

00:13:17,550 --> 00:13:26,189
of your local system because it's quite

00:13:19,800 --> 00:13:30,180
a hug but it does work done and you will

00:13:26,189 --> 00:13:32,100
have as I showed previously the Cooper

00:13:30,180 --> 00:13:34,589
Nettie's cluster that is there for you

00:13:32,100 --> 00:13:39,810
it's here is three note but unique you

00:13:34,589 --> 00:13:41,430
can define more notes if you want so we

00:13:39,810 --> 00:13:44,069
have the kubernetes cluster right now

00:13:41,430 --> 00:13:47,370
running on our development setup what we

00:13:44,069 --> 00:13:49,949
want to do is to start the route that

00:13:47,370 --> 00:13:53,490
will deploy the staff on that cluster

00:13:49,949 --> 00:13:55,410
and this is really easy to do so the

00:13:53,490 --> 00:14:00,329
rook has these examples

00:13:55,410 --> 00:14:02,879
yamo file where all the operator and

00:14:00,329 --> 00:14:05,250
notes defined so in cluster defined so

00:14:02,879 --> 00:14:07,860
you actually execute these two commands

00:14:05,250 --> 00:14:12,389
to create comments that one is creating

00:14:07,860 --> 00:14:15,600
operator is some of the security and

00:14:12,389 --> 00:14:18,600
access rights and another command

00:14:15,600 --> 00:14:21,839
creates actually cluster this cluster

00:14:18,600 --> 00:14:25,100
young-young file creating the self

00:14:21,839 --> 00:14:29,970
cluster tool box this is the special

00:14:25,100 --> 00:14:36,660
container that helps you to troubleshoot

00:14:29,970 --> 00:14:40,230
or access the self and yeah and in the

00:14:36,660 --> 00:14:43,470
end you will have the self cluster on

00:14:40,230 --> 00:14:49,199
these three nodes that was done by the

00:14:43,470 --> 00:14:57,839
operator I will try to show you that in

00:14:49,199 --> 00:15:04,139
the life so here I already run the

00:14:57,839 --> 00:15:06,689
vagrant up my setup so that brings up

00:15:04,139 --> 00:15:11,040
the virtual machines as you can see

00:15:06,689 --> 00:15:13,589
attach some disks to it and start to run

00:15:11,040 --> 00:15:18,120
the provisioner so provision those

00:15:13,589 --> 00:15:19,500
machines here so that's very neat on

00:15:18,120 --> 00:15:26,670
admin old

00:15:19,500 --> 00:15:30,360
and and after that you are login to your

00:15:26,670 --> 00:15:32,790
machine and you can see that yeah there

00:15:30,360 --> 00:15:35,730
is the three nodes cluster kubernetes

00:15:32,790 --> 00:15:39,450
clusters ready for you so what we are

00:15:35,730 --> 00:15:43,560
going to do next is to execute those

00:15:39,450 --> 00:15:50,240
procedures that I talked about so first

00:15:43,560 --> 00:15:54,600
of all we will create the operator and

00:15:50,240 --> 00:15:56,780
here it is it did create let's check it

00:15:54,600 --> 00:15:56,780
out

00:16:03,740 --> 00:16:11,990
so we can see that there were some C or

00:16:09,860 --> 00:16:14,570
D created and the important one is self

00:16:11,990 --> 00:16:18,980
cluster that's clusters that is sexually

00:16:14,570 --> 00:16:22,540
operator and right now we can we can

00:16:18,980 --> 00:16:31,700
actually see that there are some pots

00:16:22,540 --> 00:16:34,400
started in the brook self.namespace so

00:16:31,700 --> 00:16:39,320
right now it's just wrong operator and

00:16:34,400 --> 00:16:43,730
later they will be also their tool box

00:16:39,320 --> 00:16:47,170
created here as well and we can go ahead

00:16:43,730 --> 00:16:47,170
and create the cluster now

00:16:53,400 --> 00:17:01,120
okay and now we can watch how the

00:16:57,600 --> 00:17:04,740
operator will create the cluster it will

00:17:01,120 --> 00:17:11,110
take some moment and so I switch to the

00:17:04,740 --> 00:17:14,290
presentation so you already can can see

00:17:11,110 --> 00:17:19,510
the hell we'd start to create the self

00:17:14,290 --> 00:17:23,250
agents self yeah this is the service

00:17:19,510 --> 00:17:23,250
container to detect the version of self

00:17:24,209 --> 00:17:31,900
and then you will get this self okay so

00:17:28,480 --> 00:17:33,910
as I said this is could be configured to

00:17:31,900 --> 00:17:39,309
anything this is by default the tiny

00:17:33,910 --> 00:17:42,670
cluster and it also used this boxes from

00:17:39,309 --> 00:17:47,830
the knot boxes the containers from file

00:17:42,670 --> 00:17:50,830
system self development project they

00:17:47,830 --> 00:17:56,110
build there and you can find them and

00:17:50,830 --> 00:17:58,960
also use them as well we have our own

00:17:56,110 --> 00:18:03,070
fork that is adapted to the public as

00:17:58,960 --> 00:18:05,320
well as clasp so this is located here in

00:18:03,070 --> 00:18:07,240
github Suzie Luke most of our

00:18:05,320 --> 00:18:09,790
development is done upstream and we have

00:18:07,240 --> 00:18:13,809
this only for maintaining compatibility

00:18:09,790 --> 00:18:15,820
with open Susan Susan and we have this

00:18:13,809 --> 00:18:17,970
Susan master branch specifically for

00:18:15,820 --> 00:18:17,970
that

00:18:22,380 --> 00:18:35,110
yeah so it's grating let's give it some

00:18:25,630 --> 00:18:37,540
time and that's gives you the self

00:18:35,110 --> 00:18:42,550
cluster there that is operated by Luke

00:18:37,540 --> 00:18:45,190
and you can yeah develop it you can test

00:18:42,550 --> 00:18:47,020
it you can do anything you want in the

00:18:45,190 --> 00:18:51,850
u-local setup that provides your ability

00:18:47,020 --> 00:18:55,270
to do your development locally an

00:18:51,850 --> 00:19:05,380
equation so far about the migrant self

00:18:55,270 --> 00:19:09,600
rock anything looks like not so when you

00:19:05,380 --> 00:19:09,600
got your development cluster already

00:19:11,490 --> 00:19:17,580
it's still creating I think it's just

00:19:14,920 --> 00:19:21,270
right now downloading the images and

00:19:17,580 --> 00:19:21,270
probably that takes some time

00:19:29,840 --> 00:19:37,350
so I want to show you how you can adjust

00:19:32,940 --> 00:19:39,330
the VAR grunts F by variance F for the

00:19:37,350 --> 00:19:42,930
parameters first of all you have

00:19:39,330 --> 00:19:47,010
traditional vagrant file and here you

00:19:42,930 --> 00:19:49,170
can find all the needed parameters like

00:19:47,010 --> 00:19:52,140
what kind of box by default it will take

00:19:49,170 --> 00:19:55,830
it from environment or it will default

00:19:52,140 --> 00:19:58,740
to the openSUSE also the configuration

00:19:55,830 --> 00:20:01,800
of the cluster is here is tiny right now

00:19:58,740 --> 00:20:04,920
other configurations you can find the

00:20:01,800 --> 00:20:10,740
can configure Yama file at the end of

00:20:04,920 --> 00:20:12,900
the file yeah there is this different

00:20:10,740 --> 00:20:20,250
types of configuration with different

00:20:12,900 --> 00:20:23,610
nodes how much memory T it requires how

00:20:20,250 --> 00:20:26,760
many disks to do they need SSD so just

00:20:23,610 --> 00:20:30,210
the spinning disks and you can adjust

00:20:26,760 --> 00:20:32,070
that in the background file and box you

00:20:30,210 --> 00:20:35,880
can provide in the parameters it's also

00:20:32,070 --> 00:20:39,600
provides you the script to set up the

00:20:35,880 --> 00:20:45,110
vagrant vagrant locally as well if you

00:20:39,600 --> 00:20:45,110
want okay

00:20:53,260 --> 00:20:59,030
after you have your development step and

00:20:55,820 --> 00:21:01,760
developers unable to do their work what

00:20:59,030 --> 00:21:07,040
you actually need is to check their work

00:21:01,760 --> 00:21:09,500
in CI and here I will show you how you

00:21:07,040 --> 00:21:12,020
can possibly build us a cluster in

00:21:09,500 --> 00:21:14,120
OpenStack to run against those

00:21:12,020 --> 00:21:18,860
containers and to verify they're working

00:21:14,120 --> 00:21:22,730
fine so you might do that with a vagrant

00:21:18,860 --> 00:21:26,870
as well if you want but we have the

00:21:22,730 --> 00:21:30,560
OpenStack cloud in our environment so we

00:21:26,870 --> 00:21:32,690
can use that for OpenStack you can use

00:21:30,560 --> 00:21:33,170
different tools to spin off the cluster

00:21:32,690 --> 00:21:37,850
there

00:21:33,170 --> 00:21:40,850
leichter form scripts whatever but very

00:21:37,850 --> 00:21:44,770
vagrant as well you can do that what I

00:21:40,850 --> 00:21:47,780
did find useful is the heat templates

00:21:44,770 --> 00:21:49,490
because you do not have any other tool

00:21:47,780 --> 00:21:52,040
in the middle you just define the heat

00:21:49,490 --> 00:21:55,910
template and OpenStack cloud understand

00:21:52,040 --> 00:21:58,580
it and do you think it's just the job of

00:21:55,910 --> 00:22:00,860
the OpenStack cloud to do it and you

00:21:58,580 --> 00:22:02,900
will not have any other problems is the

00:22:00,860 --> 00:22:05,030
tool in the middle because when you have

00:22:02,900 --> 00:22:07,820
a tool in the middle in my horrible

00:22:05,030 --> 00:22:11,650
opinion then when analyzing the lock you

00:22:07,820 --> 00:22:15,050
try to figure out who is fault in this

00:22:11,650 --> 00:22:17,630
issue and yeah it's really hard to

00:22:15,050 --> 00:22:20,390
analyze many logs with different tools

00:22:17,630 --> 00:22:23,300
and figure out where is the problem so I

00:22:20,390 --> 00:22:26,450
like hit templates and here I will fire

00:22:23,300 --> 00:22:28,670
show you how to spin the cluster and

00:22:26,450 --> 00:22:33,200
open an openstack whose hit template and

00:22:28,670 --> 00:22:35,990
run some CI on it so the kubernetes

00:22:33,200 --> 00:22:39,260
approach for Kubik is actually the same

00:22:35,990 --> 00:22:42,230
and really I was impressed how easy it

00:22:39,260 --> 00:22:44,690
is to setup the kubernetes on Kubik

00:22:42,230 --> 00:22:47,810
yeah it's a couple of steps couple of

00:22:44,690 --> 00:22:53,710
comments and you have your cluster so

00:22:47,810 --> 00:22:53,710
let's so for hit templates you need some

00:22:53,860 --> 00:23:02,300
files to define your cluster in the

00:22:58,360 --> 00:23:05,950
vagrant that's in the llamo definition

00:23:02,300 --> 00:23:07,690
plus special scripts that

00:23:05,950 --> 00:23:10,210
check in what kind of knowledge you need

00:23:07,690 --> 00:23:15,190
and spinning this out is live leered is

00:23:10,210 --> 00:23:17,350
hip to play this is a special format you

00:23:15,190 --> 00:23:21,520
can find it in this repository as

00:23:17,350 --> 00:23:24,210
example so first of all yeah this is

00:23:21,520 --> 00:23:26,860
definition of parameters and etc and

00:23:24,210 --> 00:23:28,930
it's yours also can define different

00:23:26,860 --> 00:23:30,670
networks here

00:23:28,930 --> 00:23:33,930
what kind of networks does it need wrote

00:23:30,670 --> 00:23:38,710
in does it need floating AP and etc

00:23:33,930 --> 00:23:42,460
security groups and actually here you

00:23:38,710 --> 00:23:46,000
spin the servers one or a couple of them

00:23:42,460 --> 00:23:48,910
if you want that's done with the help of

00:23:46,000 --> 00:23:51,430
the server resource group so this is

00:23:48,910 --> 00:23:55,390
actually definition of number of workers

00:23:51,430 --> 00:23:57,760
that will be spent in the OpenStack what

00:23:55,390 --> 00:24:00,610
kind of flavor they will use what kind

00:23:57,760 --> 00:24:02,620
of image what kind of network and etc so

00:24:00,610 --> 00:24:04,960
these templates actually defines your

00:24:02,620 --> 00:24:08,830
cluster and that's why I like it you

00:24:04,960 --> 00:24:10,300
define it in one small file and upload

00:24:08,830 --> 00:24:13,960
it to OpenStack and it creates

00:24:10,300 --> 00:24:17,980
everything for you it is a couple of

00:24:13,960 --> 00:24:20,410
environments like what kind of lever for

00:24:17,980 --> 00:24:24,640
each node because for example in case of

00:24:20,410 --> 00:24:28,210
the Kubik or right now micros you can

00:24:24,640 --> 00:24:31,540
use smaller images for the workers and

00:24:28,210 --> 00:24:35,260
always DS that do not require the Cooper

00:24:31,540 --> 00:24:43,080
admin and larger worker lateral image on

00:24:35,260 --> 00:24:43,080
the master node for example so

00:24:46,350 --> 00:24:53,169
so you take in this the plate and

00:24:48,759 --> 00:24:57,429
applaud it to the open stack this is one

00:24:53,169 --> 00:25:01,059
comment you would take as an output here

00:24:57,429 --> 00:25:03,190
is the AP of the master machine and then

00:25:01,059 --> 00:25:05,559
you run this three standard comment

00:25:03,190 --> 00:25:10,720
which Richard was also defined and we

00:25:05,559 --> 00:25:15,460
had seen in the vagrant example Kubrat

00:25:10,720 --> 00:25:19,179
meaning it in the master node and then

00:25:15,460 --> 00:25:22,960
just could be joined on the all other

00:25:19,179 --> 00:25:28,179
nodes and then you deploy the rook in

00:25:22,960 --> 00:25:30,340
the same way you can use some own script

00:25:28,179 --> 00:25:33,249
if you want or you can use I don't know

00:25:30,340 --> 00:25:36,220
other tools like salt or whatever so you

00:25:33,249 --> 00:25:37,809
run these commands of deploy and exactly

00:25:36,220 --> 00:25:41,200
the same commands of deploying the rook

00:25:37,809 --> 00:25:44,200
and in the end we will have the same

00:25:41,200 --> 00:25:47,200
health so key cluster here I use

00:25:44,200 --> 00:25:49,779
different comment it's like get safe

00:25:47,200 --> 00:25:52,990
cluster and that's actually could be

00:25:49,779 --> 00:25:56,289
used to have tomato CI it's like

00:25:52,990 --> 00:25:58,570
checking out if the operator was created

00:25:56,289 --> 00:26:00,700
created and operated created the cluster

00:25:58,570 --> 00:26:04,720
and what is the health of the cluster

00:26:00,700 --> 00:26:07,869
right now yeah and if you need to gather

00:26:04,720 --> 00:26:10,570
the useful information like logs in case

00:26:07,869 --> 00:26:13,840
of failure you can use those commands to

00:26:10,570 --> 00:26:16,059
get all the logs from all the operators

00:26:13,840 --> 00:26:18,879
there or all the logs from the other

00:26:16,059 --> 00:26:21,039
different containers as well in the end

00:26:18,879 --> 00:26:27,309
you just delete the cluster is one

00:26:21,039 --> 00:26:29,950
comment and that's pretty much it so we

00:26:27,309 --> 00:26:32,230
discussed the very grant set upon

00:26:29,950 --> 00:26:34,389
development how you can set up in the CI

00:26:32,230 --> 00:26:37,289
we have this set up working really well

00:26:34,389 --> 00:26:40,450
are the tools that you can use for work

00:26:37,289 --> 00:26:45,220
the for example turf from could be key

00:26:40,450 --> 00:26:47,769
VM you can as I said spin of the cluster

00:26:45,220 --> 00:26:51,580
in OpenStack as well as using the lip

00:26:47,769 --> 00:26:53,590
field in locally so it's up to you it's

00:26:51,580 --> 00:26:56,460
up to your taste if you want to start

00:26:53,590 --> 00:26:58,830
with scratch nobody prevents you

00:26:56,460 --> 00:27:00,630
if you do not like the vagrants vagrant

00:26:58,830 --> 00:27:03,450
for example safe or something like that

00:27:00,630 --> 00:27:05,570
the upstream also have the examples of

00:27:03,450 --> 00:27:11,130
mini cube and their own chorus

00:27:05,570 --> 00:27:13,260
kubernetes a vagrant setup so yeah there

00:27:11,130 --> 00:27:13,710
are plenty of options if you want to use

00:27:13,260 --> 00:27:18,660
them

00:27:13,710 --> 00:27:21,390
go ahead unfortunately it doesn't work

00:27:18,660 --> 00:27:25,560
that smoothly there are some bugs in the

00:27:21,390 --> 00:27:28,980
images currently in openSUSE openSUSE

00:27:25,560 --> 00:27:31,940
worse about it and trying to fix it so

00:27:28,980 --> 00:27:35,220
there is bug that if you spin the

00:27:31,940 --> 00:27:37,920
multiple nodes some of the notes do not

00:27:35,220 --> 00:27:43,400
start right now that prevents me to use

00:27:37,920 --> 00:27:45,750
them my cross images but but I

00:27:43,400 --> 00:27:48,000
openSUSE team provided me Fabian

00:27:45,750 --> 00:27:50,610
provided me they work around and I used

00:27:48,000 --> 00:27:54,150
those images so far after they will be

00:27:50,610 --> 00:27:57,780
fixed it will use my cross for sure

00:27:54,150 --> 00:28:00,060
another bug is this open open stack I

00:27:57,780 --> 00:28:03,300
found that's if you will define the

00:28:00,060 --> 00:28:05,910
number of interfaces then it will

00:28:03,300 --> 00:28:08,130
configure wrote in incorrectly so right

00:28:05,910 --> 00:28:10,020
now on all the nodes there is only one

00:28:08,130 --> 00:28:12,120
network interface it doesn't matter

00:28:10,020 --> 00:28:14,070
farook and development but in future

00:28:12,120 --> 00:28:15,210
when the route will be able and safe

00:28:14,070 --> 00:28:20,250
you'll be able to use different

00:28:15,210 --> 00:28:24,540
interfaces that needs to be fixed and we

00:28:20,250 --> 00:28:31,860
need to test that as well and in the end

00:28:24,540 --> 00:28:36,630
let's see what our cluster says so right

00:28:31,860 --> 00:28:39,689
now you see different nodes running

00:28:36,630 --> 00:28:39,689
[Music]

00:28:41,710 --> 00:28:48,679
you can see that always these are now

00:28:44,990 --> 00:28:51,410
running monitors are now running and we

00:28:48,679 --> 00:29:02,840
can go ahead and execute for example

00:28:51,410 --> 00:29:06,350
some of the comments I will copy paste

00:29:02,840 --> 00:29:15,260
it from the documentation so you see so

00:29:06,350 --> 00:29:19,640
you see it working fine yep right now it

00:29:15,260 --> 00:29:22,480
has one I think that's their six so is

00:29:19,640 --> 00:29:24,980
this up all the monitors and quorum and

00:29:22,480 --> 00:29:27,230
some manager failed to dip some

00:29:24,980 --> 00:29:29,960
dependents I think this both containers

00:29:27,230 --> 00:29:33,559
are still in development mode so that's

00:29:29,960 --> 00:29:36,650
not a problem but anyway here you have

00:29:33,559 --> 00:29:40,040
your cluster running operated by rock

00:29:36,650 --> 00:29:43,400
and run in local in how to contribute

00:29:40,040 --> 00:29:46,160
you can contribute in self you can

00:29:43,400 --> 00:29:48,110
contribute and rook also you can

00:29:46,160 --> 00:29:52,750
contribute as documentation to openSUSE

00:29:48,110 --> 00:29:55,130
self as well as to our OBS project and

00:29:52,750 --> 00:29:57,410
that's all questions I don't I don't

00:29:55,130 --> 00:30:00,880
have time for questions right so if you

00:29:57,410 --> 00:30:04,400
have any catch me up around catch up

00:30:00,880 --> 00:30:08,230
Stefan and yeah ask any questions you

00:30:04,400 --> 00:30:08,460
want thank you

00:30:08,230 --> 00:30:11,640
[Applause]

00:30:08,460 --> 00:30:11,640

YouTube URL: https://www.youtube.com/watch?v=f4B3WkEtSEQ


