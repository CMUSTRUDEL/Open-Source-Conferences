Title: openSUSE Conference 2019 - DNF vs ZYpp: Fight!
Publication date: 2019-05-24
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2480-dnf-vs-zypp-fight

A comparison of the two major RPM package managers

In one corner, we have Zypper: the successor to the motley of package management options from Ximian and SuSE. Created after the merger of the Ximian and YaST package manager teams, it was a pioneer in using the SAT solver for package management and proved that it worked well at scale in a large and popular Linux distribution platform (SUSE Linux). It spawned the development of libsatsolver, which became libsolv. Considered by many to be the most advanced and fastest package manager, it is created a class of package managers all on its own. It is used in openSUSE, but is also available in Fedora and other RPM-based Linux distributions.

In the other corner, we have DNF: the anointed successor to YUM (Yellowdog Updater, Modified). DNF (Dandified YUM) was forked from YUM to rework the internals to leverage libsolv and offer a saner, more maintainable API. Forged from the blood, sweat, and tears of many package manager developers from Red Hat and others, DNF is built with the lessons in mind from the last decade of software and systems management experiences. A new up and comer, it is used in Fedora, Mageia, OpenMandriva, Yocto, and others. It is also available in openSUSE.

How do these two package managers compare? Are they more similar than different? Has DNF made YUM no longer a trash heap? Does ZYpp still rule the roost? This talk explores both package managers and compares them from a technical, usability, and ecosystem perspective. Who knows? Perhaps there are lessons to still be learned for evolving both package managers.

In one corner, we have Zypper: the successor to the motley of package management options from Ximian and SuSE. Created after the merger of the Ximian and YaST package manager teams, it was a pioneer in using the SAT solver for package management and proved that it worked well at scale in a large and popular Linux distribution platform (SUSE Linux). It spawned the development of libsatsolver, which became libsolv. Considered by many to be the most advanced and fastest package manager, it is created a class of package managers all on its own. It is used in openSUSE, but is also available in Fedora and other RPM-based Linux distributions.

In the other corner, we have DNF: the anointed successor to YUM (Yellowdog Updater, Modified). DNF (Dandified YUM) was forked from YUM to rework the internals to leverage libsolv and offer a saner, more maintainable API. Forged from the blood, sweat, and tears of many package manager developers from Red Hat and others, DNF is built with the lessons in mind from the last decade of software and systems management experiences. A new up and comer, it is used in Fedora, Mageia, OpenMandriva, Yocto, and others. It is also available in openSUSE.

How do these two package managers compare? Are they more similar than different? Has DNF made YUM no longer a trash heap? Does ZYpp still rule the roost? This talk explores both package managers and compares them from a technical, usability, and ecosystem perspective. Who knows? Perhaps there are lessons to still be learned for evolving both package managers.

Neal Gompa
Captions: 
	00:00:05,620 --> 00:00:14,090
hello everyone so my name is Neil gompa

00:00:11,540 --> 00:00:16,129
I'm a contributor in Fedora project as

00:00:14,090 --> 00:00:18,500
well as in openSUSE and whatnot and here

00:00:16,129 --> 00:00:20,539
I'm to talk about like DNF first a

00:00:18,500 --> 00:00:24,619
zipper you know fight because you know

00:00:20,539 --> 00:00:26,630
why not so a little bit about Who I am

00:00:24,619 --> 00:00:30,320
I'm sort of a self-styled

00:00:26,630 --> 00:00:32,090
open-source advocate I'm a contributor

00:00:30,320 --> 00:00:35,180
and package maintainer in fedora mafia

00:00:32,090 --> 00:00:38,600
and openSUSE and I've contributed to rpm

00:00:35,180 --> 00:00:40,039
DNF zipper Kiwi the open build service

00:00:38,600 --> 00:00:44,030
and a number of the system management

00:00:40,039 --> 00:00:45,770
based stuff for my day job I'm a DevOps

00:00:44,030 --> 00:00:47,960
engineer at Daddo

00:00:45,770 --> 00:00:50,090
a disaster recovery backup business

00:00:47,960 --> 00:00:52,129
continuity company and part of my role

00:00:50,090 --> 00:00:54,019
involves managing the release

00:00:52,129 --> 00:00:56,690
engineering of our software including

00:00:54,019 --> 00:00:59,390
running an OBS instance internally and

00:00:56,690 --> 00:01:01,340
doing terrible package backport things

00:00:59,390 --> 00:01:02,809
because you know that's what always

00:01:01,340 --> 00:01:07,010
happens when you're in a corporate

00:01:02,809 --> 00:01:10,700
environment so let's kind of start with

00:01:07,010 --> 00:01:13,160
introducing the two package managers so

00:01:10,700 --> 00:01:15,970
to begin with like the one that most of

00:01:13,160 --> 00:01:20,210
y'all probably aren't too familiar with

00:01:15,970 --> 00:01:22,490
if the slide would move there we go

00:01:20,210 --> 00:01:24,770
DNF so it's a successor to the

00:01:22,490 --> 00:01:27,260
yellow-dog updater modified or yum has a

00:01:24,770 --> 00:01:29,180
lot of people may vaguely know of from

00:01:27,260 --> 00:01:34,040
the Red Hat ecosystem

00:01:29,180 --> 00:01:36,590
it was forked from YUM about five six

00:01:34,040 --> 00:01:38,390
years ago to rework the internals to use

00:01:36,590 --> 00:01:41,990
the Lib solve library and to offer a

00:01:38,390 --> 00:01:43,550
saner maintainable API it offers a

00:01:41,990 --> 00:01:44,840
defined plug-in architecture for

00:01:43,550 --> 00:01:47,720
extending the package manager

00:01:44,840 --> 00:01:51,260
functionality it is the package manager

00:01:47,720 --> 00:01:55,460
in Fedora open mantra the Yocto and now

00:01:51,260 --> 00:01:57,410
Red Hat Enterprise Linux as of rl8 it is

00:01:55,460 --> 00:01:59,810
available also as a as a supported

00:01:57,410 --> 00:02:03,230
package manager in Maggio it is included

00:01:59,810 --> 00:02:05,420
in openSUSE as of leap 15/0 and it

00:02:03,230 --> 00:02:07,790
actually was included in rel 7 as of

00:02:05,420 --> 00:02:13,220
rail 7.6 as an option for you to use

00:02:07,790 --> 00:02:14,370
instead of crappy old yum and then of

00:02:13,220 --> 00:02:16,950
course the

00:02:14,370 --> 00:02:19,110
a classical zipper thing that you guys

00:02:16,950 --> 00:02:20,970
all kind of know this it's the package

00:02:19,110 --> 00:02:22,590
manager that made a whole new class of

00:02:20,970 --> 00:02:25,080
package managers in itself with sat

00:02:22,590 --> 00:02:27,569
solving and large scale it replaced the

00:02:25,080 --> 00:02:30,750
Motley of crazy-ass package management

00:02:27,569 --> 00:02:32,250
options that we all inherited from zimmi

00:02:30,750 --> 00:02:35,069
and and Sousa back when the two

00:02:32,250 --> 00:02:38,459
companies kind of came together when

00:02:35,069 --> 00:02:40,200
Novell bought them both spawned the

00:02:38,459 --> 00:02:42,150
development of the Lipsett solver which

00:02:40,200 --> 00:02:43,650
became loop solve it is used primarily

00:02:42,150 --> 00:02:46,620
today and of course the Sousa

00:02:43,650 --> 00:02:48,390
distributions as well as Tyson and it is

00:02:46,620 --> 00:02:51,349
also in fedora

00:02:48,390 --> 00:02:55,079
since Fedora 26 courtesy of yours truly

00:02:51,349 --> 00:02:59,299
so it is kind of functional all the way

00:02:55,079 --> 00:03:02,849
through fedora 28 after that not so much

00:02:59,299 --> 00:03:04,109
so some of the similarities here though

00:03:02,849 --> 00:03:05,549
I mean because there are of course

00:03:04,109 --> 00:03:08,129
similarities between the two

00:03:05,549 --> 00:03:10,049
so they both use lip solve for

00:03:08,129 --> 00:03:11,819
dependency resolution the low-level

00:03:10,049 --> 00:03:15,299
aspects of both package managers are in

00:03:11,819 --> 00:03:17,430
C and C++ plugins are supported in the

00:03:15,299 --> 00:03:18,989
base library interfaces and they both

00:03:17,430 --> 00:03:20,400
work with package kits so like anything

00:03:18,989 --> 00:03:22,950
that's leveraging package kit on these

00:03:20,400 --> 00:03:25,590
distributions that use the DNF or zipper

00:03:22,950 --> 00:03:28,530
will be able to leverage those backends

00:03:25,590 --> 00:03:30,419
correctly the exclusively handle RPM

00:03:28,530 --> 00:03:32,400
metadata repositories this technically

00:03:30,419 --> 00:03:34,410
wasn't true the past because zipper used

00:03:32,400 --> 00:03:36,690
to handle yes repos but it doesn't

00:03:34,410 --> 00:03:39,599
anymore it silently says well yes GE

00:03:36,690 --> 00:03:43,109
repos don't exist we're gonna do RPM

00:03:39,599 --> 00:03:45,449
repos instead and both of them actually

00:03:43,109 --> 00:03:47,970
do support fairly well being able to

00:03:45,449 --> 00:03:49,650
build custom front-end interfaces and of

00:03:47,970 --> 00:03:53,910
course arbitrary sub commands through

00:03:49,650 --> 00:03:57,949
extending through either modules Python

00:03:53,910 --> 00:04:00,480
modules and or C++ programs or whatnot

00:03:57,949 --> 00:04:03,629
the user experience between the two is

00:04:00,480 --> 00:04:07,470
actually fairly similar as well the CLI

00:04:03,629 --> 00:04:09,690
interface structure is the same it's you

00:04:07,470 --> 00:04:12,329
know the tool with the action with the

00:04:09,690 --> 00:04:14,549
arguments for the action sub commands in

00:04:12,329 --> 00:04:16,109
both DNF and zipper have standard

00:04:14,549 --> 00:04:17,820
abbreviated forms this is something that

00:04:16,109 --> 00:04:19,889
maybe some people aren't familiar with

00:04:17,820 --> 00:04:22,289
that in the DNF package manager they've

00:04:19,889 --> 00:04:25,560
kind of adopted the same technique that

00:04:22,289 --> 00:04:27,510
the zipper people have where common sub

00:04:25,560 --> 00:04:29,730
commands have a short form that's

00:04:27,510 --> 00:04:30,870
easier to type and remember so that you

00:04:29,730 --> 00:04:33,410
don't necessarily require Bosch

00:04:30,870 --> 00:04:36,330
completion to be able to get to them and

00:04:33,410 --> 00:04:38,370
of course the CLI supports colors when

00:04:36,330 --> 00:04:40,560
the terminal supports it and will help

00:04:38,370 --> 00:04:41,490
you distinguish stuff when the colors

00:04:40,560 --> 00:04:43,470
are activated

00:04:41,490 --> 00:04:46,200
there's graphical front-ends to offer

00:04:43,470 --> 00:04:50,180
more intuitive user friendly ways to do

00:04:46,200 --> 00:04:50,180
software management as well of course

00:04:50,480 --> 00:04:57,770
but there's a fair bit of differences to

00:04:54,380 --> 00:05:01,520
the the underlying differences between

00:04:57,770 --> 00:05:06,180
DNF and zip stack are actually quite

00:05:01,520 --> 00:05:08,580
significant the biggest one is that the

00:05:06,180 --> 00:05:12,960
underlying architecture for the DNF

00:05:08,580 --> 00:05:15,960
stack is very very modular it is split

00:05:12,960 --> 00:05:18,530
up across five or six libraries if we

00:05:15,960 --> 00:05:21,750
exclude Lib rpm itself and Lib solve

00:05:18,530 --> 00:05:23,670
whereas the zip stack is one library

00:05:21,750 --> 00:05:27,510
when you exclude all of that when you

00:05:23,670 --> 00:05:30,240
exclude those one thing that's a little

00:05:27,510 --> 00:05:32,220
bit scary and surprising is that zipper

00:05:30,240 --> 00:05:34,620
actually installs packages by sub

00:05:32,220 --> 00:05:39,540
processing out to the RPM command where

00:05:34,620 --> 00:05:42,240
with from what I understand from eons

00:05:39,540 --> 00:05:44,130
gone by they couldn't trust live rpm to

00:05:42,240 --> 00:05:46,200
do the right thing so they sub processed

00:05:44,130 --> 00:05:48,860
it and did scary things to make sure

00:05:46,200 --> 00:05:51,780
everything looked like it worked

00:05:48,860 --> 00:05:54,000
DNF however has no such compunction and

00:05:51,780 --> 00:05:56,190
uses Lib rpm to install things directly

00:05:54,000 --> 00:05:59,600
so the transaction is handled directly

00:05:56,190 --> 00:06:03,530
by rpm through the library interface and

00:05:59,600 --> 00:06:10,230
doesn't look quite as terrifying from

00:06:03,530 --> 00:06:11,850
the 10,000 feet view the way that you

00:06:10,230 --> 00:06:14,100
install collections of packages is

00:06:11,850 --> 00:06:16,320
slightly different between DNF and

00:06:14,100 --> 00:06:20,030
zipper because of the comps stuff

00:06:16,320 --> 00:06:23,070
composition groups and now new module

00:06:20,030 --> 00:06:25,470
metadata stuff so Fedora has this new

00:06:23,070 --> 00:06:30,540
modularity thing which has a new extra

00:06:25,470 --> 00:06:34,380
metadata format with more stuff and it's

00:06:30,540 --> 00:06:36,660
kind of complicated but it adds more

00:06:34,380 --> 00:06:39,240
things to how DNF can handle collections

00:06:36,660 --> 00:06:40,630
of packages whereas of course zipper has

00:06:39,240 --> 00:06:43,060
the patterns which

00:06:40,630 --> 00:06:44,710
all familiar are basically very fancy

00:06:43,060 --> 00:06:46,720
meta packages with extra properties

00:06:44,710 --> 00:06:50,290
attached to them so that zipper knows

00:06:46,720 --> 00:06:51,850
how to find them one of the things that

00:06:50,290 --> 00:06:54,370
was actually kind of surprising when I

00:06:51,850 --> 00:06:56,380
first started looking at the comparing

00:06:54,370 --> 00:06:57,760
the two stacks years years ago when I

00:06:56,380 --> 00:07:00,130
was first looking at this was that

00:06:57,760 --> 00:07:03,130
language bindings and zipper are

00:07:00,130 --> 00:07:07,630
actually in a pretty poor state the zip

00:07:03,130 --> 00:07:11,440
bindings thing is not in good shape and

00:07:07,630 --> 00:07:15,070
is essentially unsupported and don't

00:07:11,440 --> 00:07:17,800
work whereas in the do stack as a

00:07:15,070 --> 00:07:19,120
consequence of how the front end front

00:07:17,800 --> 00:07:21,580
ends are implemented in some of the

00:07:19,120 --> 00:07:23,050
legacy language bindings in the

00:07:21,580 --> 00:07:25,690
libraries are actually a first-class

00:07:23,050 --> 00:07:27,610
citizen and they're and while it only

00:07:25,690 --> 00:07:29,830
currently supports Python more languages

00:07:27,610 --> 00:07:34,360
are expected to follow in the near

00:07:29,830 --> 00:07:37,870
future and DNF also has an

00:07:34,360 --> 00:07:39,990
implementation that exports the API as a

00:07:37,870 --> 00:07:43,390
d-bus interface for applications to

00:07:39,990 --> 00:07:46,300
interrogate and manipulate through that

00:07:43,390 --> 00:07:49,750
manner if they wish that's something

00:07:46,300 --> 00:07:52,450
that as far as I'm aware only the yum

00:07:49,750 --> 00:07:54,910
DNF and apt actually have some form of

00:07:52,450 --> 00:07:56,830
this not very many package managers have

00:07:54,910 --> 00:08:02,110
like a direct way to be interrogated via

00:07:56,830 --> 00:08:03,460
d-bus the user experience is actually

00:08:02,110 --> 00:08:07,450
somewhat different as well but not too

00:08:03,460 --> 00:08:09,580
much so DNF has the feature of aliases

00:08:07,450 --> 00:08:11,920
which it inherits from yum so you can

00:08:09,580 --> 00:08:16,120
have sub commands that you can define

00:08:11,920 --> 00:08:17,620
that are built on standard commands with

00:08:16,120 --> 00:08:19,750
options and things like that so you can

00:08:17,620 --> 00:08:21,280
make short forms of custom short forms

00:08:19,750 --> 00:08:23,710
of whatever you want

00:08:21,280 --> 00:08:26,170
another thing that DNF does that is

00:08:23,710 --> 00:08:28,000
different from zipper is that you can

00:08:26,170 --> 00:08:29,980
actually install any package based on

00:08:28,000 --> 00:08:32,710
any file path that is in that is known

00:08:29,980 --> 00:08:35,440
by the repository because DNF actually

00:08:32,710 --> 00:08:37,150
parses the file lists completely and

00:08:35,440 --> 00:08:39,900
handles that in its solver pool whereas

00:08:37,150 --> 00:08:42,250
zipper does not normally do that and

00:08:39,900 --> 00:08:46,860
there's multiple native graphical front

00:08:42,250 --> 00:08:48,670
ends zipper has to its credit it has

00:08:46,860 --> 00:08:52,420
strangely enough a machine readable

00:08:48,670 --> 00:08:54,610
output form XML for its output so that

00:08:52,420 --> 00:08:56,680
it can be manipulated from other

00:08:54,610 --> 00:08:59,260
schools through shell script and awk and

00:08:56,680 --> 00:09:01,720
Perl and stuff like that one really neat

00:08:59,260 --> 00:09:04,240
thing that it does is that it can split

00:09:01,720 --> 00:09:07,300
transactions up into smaller chunks if

00:09:04,240 --> 00:09:09,040
it detects a low disk situation or if

00:09:07,300 --> 00:09:10,540
there's a special solver situation that

00:09:09,040 --> 00:09:13,120
requires splitting the transaction up

00:09:10,540 --> 00:09:15,220
that is really handy when you're working

00:09:13,120 --> 00:09:17,260
with laptops and with small SSDs or

00:09:15,220 --> 00:09:20,640
netbooks and things like that and that's

00:09:17,260 --> 00:09:22,329
a really nice fancy feature to have

00:09:20,640 --> 00:09:23,920
unfortunately asked is the only

00:09:22,329 --> 00:09:26,740
graphical front-end that exists for it

00:09:23,920 --> 00:09:27,850
yeah it is cool and all but the fact

00:09:26,740 --> 00:09:29,350
that there isn't an independent

00:09:27,850 --> 00:09:31,149
front-end that kind of just works on its

00:09:29,350 --> 00:09:33,490
own makes it a little difficult to

00:09:31,149 --> 00:09:36,339
demonstrate whether how well to use the

00:09:33,490 --> 00:09:42,700
the lives if API for building such

00:09:36,339 --> 00:09:44,350
things so yeah as far as the ecosystem

00:09:42,700 --> 00:09:48,910
coasts like we can kind of start with

00:09:44,350 --> 00:09:51,760
the development activity of the actual

00:09:48,910 --> 00:09:54,240
package manager software itself as soon

00:09:51,760 --> 00:09:58,510
as that shows up there we go

00:09:54,240 --> 00:10:00,600
so for DNF the first the Verdean offense

00:09:58,510 --> 00:10:04,029
if er the two ones at the top are

00:10:00,600 --> 00:10:06,910
actually the command-line front-end so

00:10:04,029 --> 00:10:08,769
you can see that the dnf1 starts in 2002

00:10:06,910 --> 00:10:11,170
that's because it was forked from YUM so

00:10:08,769 --> 00:10:13,690
if you ignore everything before 2012

00:10:11,170 --> 00:10:17,949
that's all 2012 and earlier is all yum

00:10:13,690 --> 00:10:19,899
code forward on that is DNF and in

00:10:17,949 --> 00:10:21,310
zipper you can also see that by

00:10:19,899 --> 00:10:24,579
comparison there isn't a whole lot going

00:10:21,310 --> 00:10:28,480
on in the CL aisle and that's because

00:10:24,579 --> 00:10:30,070
unlike in DNF zippers stack the seal

00:10:28,480 --> 00:10:32,230
light doesn't actually have a whole lot

00:10:30,070 --> 00:10:34,600
of logic in it most of it is in the

00:10:32,230 --> 00:10:37,180
library and so you can see comparatively

00:10:34,600 --> 00:10:41,260
live zip has a lot more code going on in

00:10:37,180 --> 00:10:43,120
there whereas on the DNF side it's a

00:10:41,260 --> 00:10:46,480
little bit mixed there's a lot of

00:10:43,120 --> 00:10:48,940
business logic in both the CLI front-end

00:10:46,480 --> 00:10:50,920
as well as in the libraries and that's

00:10:48,940 --> 00:10:55,060
something hopefully that will be fixed

00:10:50,920 --> 00:10:57,250
over time in terms of like how the

00:10:55,060 --> 00:10:59,560
ecosystem tends to use this the plugins

00:10:57,250 --> 00:11:01,510
and extensions model is something that

00:10:59,560 --> 00:11:03,250
is very well supported in DNF and it's

00:11:01,510 --> 00:11:05,170
something that i think actually it has

00:11:03,250 --> 00:11:07,190
been a really good boost to how that ii

00:11:05,170 --> 00:11:10,460
could how that has been

00:11:07,190 --> 00:11:12,590
used by a lot of people because the API

00:11:10,460 --> 00:11:15,680
is now stabilized and well-defined there

00:11:12,590 --> 00:11:17,570
has been a lot of plugins and extensions

00:11:15,680 --> 00:11:20,240
for supporting interesting workflows and

00:11:17,570 --> 00:11:23,600
tools and things like that there's like

00:11:20,240 --> 00:11:25,910
over 25 officially supported plugins off

00:11:23,600 --> 00:11:29,720
the top of my head I know of at least a

00:11:25,910 --> 00:11:31,130
dozen more that people have written that

00:11:29,720 --> 00:11:35,000
they're using and then there's also

00:11:31,130 --> 00:11:38,000
things like salt and ansible which poked

00:11:35,000 --> 00:11:39,380
the DNF API directly because they can

00:11:38,000 --> 00:11:44,780
and they know that that stuff is going

00:11:39,380 --> 00:11:48,500
to work and that allows them to do more

00:11:44,780 --> 00:11:51,230
creative things when they need to for

00:11:48,500 --> 00:11:52,640
zipper I'm actually not too certain if

00:11:51,230 --> 00:11:54,290
there were that many plugins that were

00:11:52,640 --> 00:11:57,290
written for it I could only really find

00:11:54,290 --> 00:12:00,020
a few major ones like this the one for a

00:11:57,290 --> 00:12:02,180
spacewalk Sue's a manager and the so

00:12:00,020 --> 00:12:04,700
does a customer sent her package search

00:12:02,180 --> 00:12:06,080
plug-in that was those were the only

00:12:04,700 --> 00:12:08,810
ones I could really find I couldn't

00:12:06,080 --> 00:12:10,700
really find too many others the methods

00:12:08,810 --> 00:12:13,190
to support plugins and extensions

00:12:10,700 --> 00:12:16,040
doesn't seem to be that well documented

00:12:13,190 --> 00:12:18,440
or pointed out anywhere it was a little

00:12:16,040 --> 00:12:20,480
curious because like from what I could

00:12:18,440 --> 00:12:23,420
tell it is supposed to be capable of it

00:12:20,480 --> 00:12:27,560
it's just not used which I'm a little

00:12:23,420 --> 00:12:30,260
weirded out about but another bit like

00:12:27,560 --> 00:12:32,390
as I mentioned earlier there was there's

00:12:30,260 --> 00:12:35,720
also graphical front ends for the DNF

00:12:32,390 --> 00:12:38,360
stack multiples of them and of course is

00:12:35,720 --> 00:12:41,990
because the CLI is scary

00:12:38,360 --> 00:12:43,520
it's whoo but aside from the package kit

00:12:41,990 --> 00:12:45,860
front ends like gnome software and

00:12:43,520 --> 00:12:47,930
plasma discover there's a few native

00:12:45,860 --> 00:12:51,350
front ends that exist for it the first

00:12:47,930 --> 00:12:54,140
was actually yah mix DNF which was the

00:12:51,350 --> 00:12:56,450
young extender DNF flavor that project

00:12:54,140 --> 00:12:59,839
is now defunct and it's been superseded

00:12:56,450 --> 00:13:02,390
by dnf2 gora which is from the maggia

00:12:59,839 --> 00:13:06,050
project and simple Dena which was made

00:13:02,390 --> 00:13:08,720
by some independent developer who wanted

00:13:06,050 --> 00:13:11,330
to make a much simpler gtk based

00:13:08,720 --> 00:13:13,040
front-end it actually I think is brand

00:13:11,330 --> 00:13:17,300
new I only found it like a couple of

00:13:13,040 --> 00:13:20,600
weeks ago and so I'm going to show you

00:13:17,300 --> 00:13:22,700
just a little bit of that stuff

00:13:20,600 --> 00:13:25,840
with the D enough things so let's see

00:13:22,700 --> 00:13:33,890
here oh come on don't do this to me now

00:13:25,840 --> 00:13:39,310
fine let me kill this and then let's go

00:13:33,890 --> 00:13:39,310
over here let's start this

00:14:30,570 --> 00:14:40,600
there we go so here I pre-loaded a

00:14:35,620 --> 00:14:42,640
transaction here to show so let's make

00:14:40,600 --> 00:14:44,970
this a little what that is not what I

00:14:42,640 --> 00:14:44,970
wanted

00:14:55,380 --> 00:15:10,199
so if you see what is oh I see what's

00:15:00,970 --> 00:15:13,269
going on here so if you see over here

00:15:10,199 --> 00:15:15,100
this is I'm about to execute a

00:15:13,269 --> 00:15:16,269
transaction to like actually do the

00:15:15,100 --> 00:15:18,670
equivalent of zippered up on a

00:15:16,269 --> 00:15:20,490
tumbleweed system I actually already pre

00:15:18,670 --> 00:15:23,350
downloaded the whole transaction because

00:15:20,490 --> 00:15:25,930
well it took like seven hours in my

00:15:23,350 --> 00:15:28,600
hotel room to download everything so I

00:15:25,930 --> 00:15:31,570
figured I didn't want to trust you know

00:15:28,600 --> 00:15:33,490
Wi-Fi to work or something like that so

00:15:31,570 --> 00:15:36,660
I should also like kill the test

00:15:33,490 --> 00:15:39,370
transaction part let's see

00:15:36,660 --> 00:15:42,310
so I'm also using a short form here

00:15:39,370 --> 00:15:47,170
desync I could actually if I wanted to

00:15:42,310 --> 00:15:50,279
be super clever we'll just use DUP so

00:15:47,170 --> 00:15:50,279
lift up

00:15:57,770 --> 00:16:03,270
so that shows all the stuff that's gonna

00:16:01,950 --> 00:16:06,360
happen it's gonna install hundred and

00:16:03,270 --> 00:16:10,010
sixty packages upgrade 1.5 K of them

00:16:06,360 --> 00:16:12,180
we're moving downgrade if you do a thing

00:16:10,010 --> 00:16:14,330
already downloaded all of it so it's

00:16:12,180 --> 00:16:17,810
gonna run a transaction check and

00:16:14,330 --> 00:16:17,810
actually do the thing

00:16:24,680 --> 00:16:28,569
and then meanwhile

00:16:36,570 --> 00:16:45,000
and then over here I have dnf2 gora

00:16:41,600 --> 00:16:47,970
setup to install some things I've

00:16:45,000 --> 00:16:49,920
checked a few packages and then it'll

00:16:47,970 --> 00:17:07,520
transaction Flay this is why you don't

00:16:49,920 --> 00:17:07,520
do demos let's see here Cora screw it

00:17:08,360 --> 00:17:14,940
there we go now it shows all the stuff

00:17:10,770 --> 00:17:16,440
and so this is you know it's basically

00:17:14,940 --> 00:17:17,850
the same kind of output you'd see from

00:17:16,440 --> 00:17:19,080
the CLI or if you're familiar with you

00:17:17,850 --> 00:17:21,690
ass you'll see something like this when

00:17:19,080 --> 00:17:24,180
it's about to propose a transaction to

00:17:21,690 --> 00:17:32,730
you and it's just gonna make me type in

00:17:24,180 --> 00:17:35,420
my password again and now it's gonna

00:17:32,730 --> 00:17:37,890
download wait while the Wi-Fi works here

00:17:35,420 --> 00:17:40,560
so it's downloading packages and it's

00:17:37,890 --> 00:17:43,260
gonna do stuff while that's happening

00:17:40,560 --> 00:17:44,910
then over here you can see it's doing

00:17:43,260 --> 00:17:46,680
basically the same thing it's upgrading

00:17:44,910 --> 00:17:48,450
the packages running through the

00:17:46,680 --> 00:17:51,180
scriptlets and stuff actually something

00:17:48,450 --> 00:17:53,700
that I learned while I was doing this we

00:17:51,180 --> 00:17:58,710
run a lot of scriptlets during an

00:17:53,700 --> 00:18:02,910
upgrade in openSUSE like a whole lot far

00:17:58,710 --> 00:18:05,790
more than I actually expected to but it

00:18:02,910 --> 00:18:08,400
was an interesting exercise because it

00:18:05,790 --> 00:18:09,990
showed that for one openSUSE does do

00:18:08,400 --> 00:18:12,030
stuff the right way cuz even swapping

00:18:09,990 --> 00:18:16,230
from zipper to DNF things work fairly

00:18:12,030 --> 00:18:17,550
well you can see all the output it does

00:18:16,230 --> 00:18:20,280
all the right ordering and installation

00:18:17,550 --> 00:18:22,740
and stuff there's nothing too special or

00:18:20,280 --> 00:18:24,540
crazy actually this virtual machine has

00:18:22,740 --> 00:18:27,000
been upgraded like three times using DNF

00:18:24,540 --> 00:18:34,170
rather than zipper and nothing has

00:18:27,000 --> 00:18:36,500
exploded so far so I'll just go back to

00:18:34,170 --> 00:18:36,500
this

00:18:50,960 --> 00:18:57,920
beach ball of doom all right so since

00:18:56,330 --> 00:19:01,070
that kind of shows like what was going

00:18:57,920 --> 00:19:05,150
on in there the kind of conclusions I

00:19:01,070 --> 00:19:07,160
came from this was the DNF package

00:19:05,150 --> 00:19:08,360
manager' and thes and the zipper package

00:19:07,160 --> 00:19:10,400
manager' are actually fairly comparable

00:19:08,360 --> 00:19:12,530
at this point in terms of user

00:19:10,400 --> 00:19:14,470
experience performance and usability

00:19:12,530 --> 00:19:16,700
they're pretty they're pretty up there

00:19:14,470 --> 00:19:18,500
they're pretty good with each other and

00:19:16,700 --> 00:19:20,840
they're pretty good as as package of

00:19:18,500 --> 00:19:23,240
editors as a whole I'm a little bit

00:19:20,840 --> 00:19:25,760
disappointed at like some of the when I

00:19:23,240 --> 00:19:27,470
looked at how the sausage was made for a

00:19:25,760 --> 00:19:31,280
zipper like how some of the stuff

00:19:27,470 --> 00:19:33,110
actually worked inside compared to maybe

00:19:31,280 --> 00:19:35,690
it's again part of the fact that zipper

00:19:33,110 --> 00:19:38,690
is so much older and they trusted the

00:19:35,690 --> 00:19:41,270
underlying stack a lot less but it's a

00:19:38,690 --> 00:19:43,910
little bit weird the kind of hacks that

00:19:41,270 --> 00:19:46,400
are in there that I feel like somebody

00:19:43,910 --> 00:19:47,930
should take a second look at and maybe

00:19:46,400 --> 00:19:51,770
think maybe that they're no longer

00:19:47,930 --> 00:19:55,460
needed to work this way another thing

00:19:51,770 --> 00:19:56,360
that was sort of a thing was it feels

00:19:55,460 --> 00:19:58,070
like somebody needs to care about

00:19:56,360 --> 00:19:59,540
developing a little community around it

00:19:58,070 --> 00:20:02,690
zipper is a perfectly serviceable

00:19:59,540 --> 00:20:06,770
package manager and it's totally a good

00:20:02,690 --> 00:20:09,200
replacement for a lot of subpar package

00:20:06,770 --> 00:20:12,800
managers in the RPM ecosystem but it

00:20:09,200 --> 00:20:15,610
seems like there's not much attempt to

00:20:12,800 --> 00:20:17,750
really drive adoption or usage of that

00:20:15,610 --> 00:20:21,620
supporting plugins and extensions is

00:20:17,750 --> 00:20:23,210
hard and zip is well fill in your own

00:20:21,620 --> 00:20:26,510
word but I would say as if it's pretty

00:20:23,210 --> 00:20:28,370
awesome for the DNF side the

00:20:26,510 --> 00:20:30,500
architecture is kind of complicated it's

00:20:28,370 --> 00:20:33,260
a little hard to follow how all the

00:20:30,500 --> 00:20:35,090
pieces fit together on the flips I think

00:20:33,260 --> 00:20:39,710
the community is pretty strong that's

00:20:35,090 --> 00:20:41,300
maybe partly my fault but the there's

00:20:39,710 --> 00:20:43,280
there's a large number of people that

00:20:41,300 --> 00:20:46,580
are actually using it and building tools

00:20:43,280 --> 00:20:48,200
around it and doing things like that the

00:20:46,580 --> 00:20:50,510
language binding support beyond Python

00:20:48,200 --> 00:20:52,880
is still missing and I think it kind of

00:20:50,510 --> 00:20:55,490
comes away that DNF makes um really not

00:20:52,880 --> 00:20:57,560
step not suck it has a good CLI

00:20:55,490 --> 00:21:02,650
interface the performance is pretty good

00:20:57,560 --> 00:21:05,980
the extensibility is is awesome and

00:21:02,650 --> 00:21:07,960
generally I enjoy it man is like you

00:21:05,980 --> 00:21:11,230
shouldn't have to say like I it's not

00:21:07,960 --> 00:21:13,150
that I don't want to say I love working

00:21:11,230 --> 00:21:14,890
with my packages all the time but like

00:21:13,150 --> 00:21:20,169
it doesn't make it a chore to deal with

00:21:14,890 --> 00:21:21,820
all of them so in summary I guess zipper

00:21:20,169 --> 00:21:24,309
is probably still slightly up there

00:21:21,820 --> 00:21:26,110
higher than what DNF is but I think

00:21:24,309 --> 00:21:28,179
there there's there's potential in both

00:21:26,110 --> 00:21:31,450
ways and there's still a bunch to learn

00:21:28,179 --> 00:21:33,250
from both of them like DNF does does

00:21:31,450 --> 00:21:35,950
certain things a little bit better than

00:21:33,250 --> 00:21:40,260
I think super does and vice-versa as

00:21:35,950 --> 00:21:40,260
I've kind of mentioned earlier so yeah

00:21:42,059 --> 00:21:51,270
questions okay yeah

00:22:17,940 --> 00:22:25,149
so the question was is there to simplify

00:22:22,630 --> 00:22:27,639
this that was the question was is there

00:22:25,149 --> 00:22:29,590
an RPM based package manager that does

00:22:27,639 --> 00:22:32,500
source to binary reproducibility weave

00:22:29,590 --> 00:22:36,039
for verification before installation the

00:22:32,500 --> 00:22:38,230
answer to this is no one that is

00:22:36,039 --> 00:22:39,789
extremely expensive that requires

00:22:38,230 --> 00:22:41,320
setting up build routes or worse

00:22:39,789 --> 00:22:42,159
installing all the build dependencies on

00:22:41,320 --> 00:22:44,380
the computer first

00:22:42,159 --> 00:22:45,730
before installing the for building it

00:22:44,380 --> 00:22:47,740
and then installing the real package at

00:22:45,730 --> 00:22:48,759
the end and then probably figuring out a

00:22:47,740 --> 00:22:50,139
way to track all the build dependencies

00:22:48,759 --> 00:22:56,139
to remove afterwards because you don't

00:22:50,139 --> 00:22:58,480
need them and two it's not strictly

00:22:56,139 --> 00:23:00,580
necessary most of the time most people

00:22:58,480 --> 00:23:02,289
who are building rpms are hopefully

00:23:00,580 --> 00:23:07,179
using a build system that's worth a damn

00:23:02,289 --> 00:23:09,639
like OBS or Co G which provides source

00:23:07,179 --> 00:23:11,830
to binary guarantees and reproducibility

00:23:09,639 --> 00:23:15,720
that lets you make sure you are not

00:23:11,830 --> 00:23:18,519
doing dumb things in your packages and

00:23:15,720 --> 00:23:20,379
usually the repository of metadata can

00:23:18,519 --> 00:23:22,509
be verified to ensure it's not tampered

00:23:20,379 --> 00:23:24,700
with either through check sums metal

00:23:22,509 --> 00:23:27,039
inks GPG checks or a combination of

00:23:24,700 --> 00:23:28,899
those and with that you can usually

00:23:27,039 --> 00:23:30,850
trace from there to the binary package

00:23:28,899 --> 00:23:32,769
check the checksum and the signatures of

00:23:30,850 --> 00:23:35,740
those and then install there so you have

00:23:32,769 --> 00:23:37,720
enough path paths of verification that

00:23:35,740 --> 00:23:40,179
it's usually not necessary to go down

00:23:37,720 --> 00:23:42,070
the extra mile of rebuild and then

00:23:40,179 --> 00:23:44,200
install to verify that the the

00:23:42,070 --> 00:23:45,100
reproducibility there usually that's the

00:23:44,200 --> 00:23:47,409
kind of stuff you'd want to do

00:23:45,100 --> 00:23:51,309
server-side in a build farm like in an

00:23:47,409 --> 00:23:52,870
OBS or a Koji setup but there are bits

00:23:51,309 --> 00:23:55,210
and pieces of that functionality in both

00:23:52,870 --> 00:23:57,250
package managers zipper has a function

00:23:55,210 --> 00:24:01,120
called source install which allows you

00:23:57,250 --> 00:24:04,480
to download us download or point it to a

00:24:01,120 --> 00:24:06,129
source rpm and that will go and read it

00:24:04,480 --> 00:24:08,230
and install all the build dependencies

00:24:06,129 --> 00:24:10,240
and unpack it into an RPM build

00:24:08,230 --> 00:24:12,399
directory or whatnot so that you could

00:24:10,240 --> 00:24:14,980
just go ahead and build the package

00:24:12,399 --> 00:24:17,620
yourself if you'd like DNF has the build

00:24:14,980 --> 00:24:20,909
DEP sub command which allows it to read

00:24:17,620 --> 00:24:22,990
a spec file or a source package and

00:24:20,909 --> 00:24:24,460
install the build dependencies and then

00:24:22,990 --> 00:24:25,840
you could do what everyone there but it

00:24:24,460 --> 00:24:28,480
doesn't have an equivalent to the source

00:24:25,840 --> 00:24:29,710
install functionality might get it

00:24:28,480 --> 00:24:33,039
someday but right now it

00:24:29,710 --> 00:24:35,020
have it but that's kind of the closest

00:24:33,039 --> 00:24:37,630
you get other package managers like you

00:24:35,020 --> 00:24:40,090
are PMI user rpm from man trela they

00:24:37,630 --> 00:24:43,360
have the ability to download and unpack

00:24:40,090 --> 00:24:45,190
just like zipper does apt rpm doesn't

00:24:43,360 --> 00:24:46,960
have any of this functionality it

00:24:45,190 --> 00:24:50,610
doesn't it really tries to ignore the

00:24:46,960 --> 00:24:52,779
fact that source packages exist and

00:24:50,610 --> 00:24:55,390
poldek and others are just kind of

00:24:52,779 --> 00:24:57,549
wofully on what to do with with this

00:24:55,390 --> 00:25:00,850
kind of thing so it's it's not really a

00:24:57,549 --> 00:25:02,380
thing that all a lot of the RPM package

00:25:00,850 --> 00:25:09,929
manager is concerned themselves too much

00:25:02,380 --> 00:25:09,929
with yeah

00:25:15,840 --> 00:25:20,799
you mean group installation meaning you

00:25:19,630 --> 00:25:22,779
mean group installation as in like

00:25:20,799 --> 00:25:24,159
installing from one thing from using one

00:25:22,779 --> 00:25:26,769
command to a bunch of computers at once

00:25:24,159 --> 00:25:31,029
or do you mean installing a bunch of

00:25:26,769 --> 00:25:32,740
packages the latter ok so group

00:25:31,029 --> 00:25:37,210
installation in terms of installing a

00:25:32,740 --> 00:25:38,590
bunch of packages in in the DNF stack

00:25:37,210 --> 00:25:40,210
you have this through the composition

00:25:38,590 --> 00:25:42,970
groups or const groups as a lot of

00:25:40,210 --> 00:25:45,490
people call it and now with the module

00:25:42,970 --> 00:25:47,440
MMD so the module metadata and the comms

00:25:45,490 --> 00:25:50,500
groups what they are essentially are

00:25:47,440 --> 00:25:52,480
metadata files that describe a set of

00:25:50,500 --> 00:25:56,590
packages that belong for a specific role

00:25:52,480 --> 00:25:58,630
or tight or some logical grouping of

00:25:56,590 --> 00:26:00,399
some kind that a user may want to act

00:25:58,630 --> 00:26:02,139
upon so they want to install it or

00:26:00,399 --> 00:26:03,960
remove it or upgrade them together or

00:26:02,139 --> 00:26:06,880
something like that

00:26:03,960 --> 00:26:09,549
zipper has this kind of the similar

00:26:06,880 --> 00:26:11,139
behavior with patterns it treats the

00:26:09,549 --> 00:26:13,360
meta packages slightly differently in

00:26:11,139 --> 00:26:16,510
pattern mode and tries to accomplish the

00:26:13,360 --> 00:26:18,159
same behavior and the reason it used to

00:26:16,510 --> 00:26:20,409
be that patterns were special metadata

00:26:18,159 --> 00:26:24,039
like comps groups were like comms groups

00:26:20,409 --> 00:26:26,980
are sorry but nowadays it is just meta

00:26:24,039 --> 00:26:29,799
packages with fancy labels and stuff

00:26:26,980 --> 00:26:30,820
inside but essentially both package

00:26:29,799 --> 00:26:32,799
managers provide that kind of

00:26:30,820 --> 00:26:36,159
functionality for zipper its zipper

00:26:32,799 --> 00:26:39,730
install Dashti pattern name of pattern

00:26:36,159 --> 00:26:42,490
and for a DNF its DNF install @ sign

00:26:39,730 --> 00:26:43,929
name of group or name of module and it

00:26:42,490 --> 00:26:45,370
will go ahead and do the thing to

00:26:43,929 --> 00:26:48,130
install a collection of packages

00:26:45,370 --> 00:26:50,200
together and it tracks those collections

00:26:48,130 --> 00:26:52,149
as they're installed uninstalled

00:26:50,200 --> 00:26:53,590
upgraded and whatnot so you will know

00:26:52,149 --> 00:26:55,510
that whether a package was installed as

00:26:53,590 --> 00:26:58,139
part of a group or if it was installed

00:26:55,510 --> 00:26:58,139
individually

00:27:00,610 --> 00:27:03,419
yeah

00:27:08,810 --> 00:27:14,940
so good question does the question was

00:27:13,080 --> 00:27:17,610
does DNF have any special behavior for

00:27:14,940 --> 00:27:19,650
handling when a user explicitly removes

00:27:17,610 --> 00:27:21,870
a sub dependency or a weak dependency

00:27:19,650 --> 00:27:23,760
week installed package the answer this

00:27:21,870 --> 00:27:27,810
question unfortunately right now is no

00:27:23,760 --> 00:27:30,210
however because DNF tracks how DNF

00:27:27,810 --> 00:27:32,430
tracks the reason in which a package is

00:27:30,210 --> 00:27:33,840
installed and actually already has the

00:27:32,430 --> 00:27:36,060
information to make these kinds of

00:27:33,840 --> 00:27:37,890
decisions the only reason right now it

00:27:36,060 --> 00:27:40,410
doesn't do things like automatically

00:27:37,890 --> 00:27:42,810
excluding weak install package that a

00:27:40,410 --> 00:27:45,810
user has explicitly removed is because

00:27:42,810 --> 00:27:48,000
the no one has written the logic to do

00:27:45,810 --> 00:27:49,200
that like it's the all the pieces are

00:27:48,000 --> 00:27:52,800
there it's just the filter is not

00:27:49,200 --> 00:27:54,750
actually wired up yet there was actually

00:27:52,800 --> 00:27:56,430
an effort a couple of years ago to redo

00:27:54,750 --> 00:27:58,980
how DNF stores its recent information

00:27:56,430 --> 00:28:00,390
they now call it a software database it

00:27:58,980 --> 00:28:02,280
used to be a descendant of the yum

00:28:00,390 --> 00:28:04,500
database it's essentially a database

00:28:02,280 --> 00:28:06,840
that tracks all the transactions that

00:28:04,500 --> 00:28:08,790
have ever happened and also indicates

00:28:06,840 --> 00:28:11,910
like how the packages were installed in

00:28:08,790 --> 00:28:14,070
why and that information also tracks

00:28:11,910 --> 00:28:16,260
when users decide to say I don't want

00:28:14,070 --> 00:28:18,930
this anymore and you uninstall it it

00:28:16,260 --> 00:28:21,150
records that reason as well that those

00:28:18,930 --> 00:28:23,100
reasons are currently not fully factored

00:28:21,150 --> 00:28:25,080
into the dependency solving but they

00:28:23,100 --> 00:28:27,630
vary they could be and if they were then

00:28:25,080 --> 00:28:37,850
you could get more intelligent results

00:28:27,630 --> 00:28:42,390
out of that hello hello you talked about

00:28:37,850 --> 00:28:45,440
DNS module functions does it support any

00:28:42,390 --> 00:28:48,810
higher level functions for example

00:28:45,440 --> 00:28:51,570
dependencies between modules or combs or

00:28:48,810 --> 00:28:56,280
for example registering Enterprise

00:28:51,570 --> 00:29:00,180
modules yeah so unfortunately it does so

00:28:56,280 --> 00:29:04,080
modules modules actually export the same

00:29:00,180 --> 00:29:07,290
level of interfaces and manipulation

00:29:04,080 --> 00:29:09,930
api's that packages do so you can

00:29:07,290 --> 00:29:11,520
install remove update query them and

00:29:09,930 --> 00:29:14,220
modules can have module level

00:29:11,520 --> 00:29:16,530
dependencies the way that the module

00:29:14,220 --> 00:29:18,180
stuff works is it's kind of a layer you

00:29:16,530 --> 00:29:20,550
start with a repository layer at the

00:29:18,180 --> 00:29:22,380
bottom which has a super packages then

00:29:20,550 --> 00:29:24,690
you have module MDS that say these

00:29:22,380 --> 00:29:26,700
these buckets in of these soups of

00:29:24,690 --> 00:29:29,130
packages belong with these and then the

00:29:26,700 --> 00:29:30,480
buckets of packages inside are handled

00:29:29,130 --> 00:29:33,419
so each layer it goes all the way down

00:29:30,480 --> 00:29:35,460
and DNF basically handles each of those

00:29:33,419 --> 00:29:42,090
as if they are like a package and you

00:29:35,460 --> 00:29:45,120
can do actions and things like that lip

00:29:42,090 --> 00:29:47,490
solve knows nothing okay unfortunately

00:29:45,120 --> 00:29:49,350
lib solve knows nothing right now part

00:29:47,490 --> 00:29:51,000
of this is because a lot of the

00:29:49,350 --> 00:29:54,030
behaviors related specifically to

00:29:51,000 --> 00:29:57,150
modules are not fully fleshed out to the

00:29:54,030 --> 00:29:58,440
point that we can start figuring out how

00:29:57,150 --> 00:30:00,570
they should work in lib solve because

00:29:58,440 --> 00:30:02,700
it'd be unfair to everybody if we

00:30:00,570 --> 00:30:04,080
implemented it once and then it turned

00:30:02,700 --> 00:30:06,059
out like six months later we have to

00:30:04,080 --> 00:30:07,289
change everything again we kind of want

00:30:06,059 --> 00:30:11,280
to have a solid idea of how it's

00:30:07,289 --> 00:30:13,289
supposed to behave across the board

00:30:11,280 --> 00:30:15,360
before we want to do something like that

00:30:13,289 --> 00:30:17,549
and make Lib solve actually fully aware

00:30:15,360 --> 00:30:19,740
of them for now from Lib Sol's point of

00:30:17,549 --> 00:30:21,360
view it looks like DNF is saying I want

00:30:19,740 --> 00:30:23,340
to disable all these packages or I want

00:30:21,360 --> 00:30:24,510
to enable all these packages these are

00:30:23,340 --> 00:30:26,909
in these filter groups these are

00:30:24,510 --> 00:30:28,919
considered higher priority but it

00:30:26,909 --> 00:30:31,710
doesn't know why from the lips all point

00:30:28,919 --> 00:30:33,750
of view and can you do anything like

00:30:31,710 --> 00:30:37,080
enterprise registrations of rail using

00:30:33,750 --> 00:30:39,690
DNF or a plugin yeah I mean the

00:30:37,080 --> 00:30:40,980
subscription management sorry the

00:30:39,690 --> 00:30:44,309
subscription management functionality

00:30:40,980 --> 00:30:46,289
has been integrated into into the lower

00:30:44,309 --> 00:30:48,299
levels so for example Red Hat

00:30:46,289 --> 00:30:51,360
subscription management actually now has

00:30:48,299 --> 00:30:53,520
a C library Lib RHS M which is plugged

00:30:51,360 --> 00:30:55,980
into the Lib DNF library as a plugin and

00:30:53,520 --> 00:30:58,260
so if you are on a rail system that

00:30:55,980 --> 00:31:00,480
plugin is built-in and it will it will

00:30:58,260 --> 00:31:02,640
track your entitlement status and

00:31:00,480 --> 00:31:05,039
regenerate the Red Hat repo file that is

00:31:02,640 --> 00:31:07,409
installed on there to include your

00:31:05,039 --> 00:31:09,659
repositories that you are entitled to

00:31:07,409 --> 00:31:11,880
the subscription manager tool from

00:31:09,659 --> 00:31:13,500
candlepin is the one that author that

00:31:11,880 --> 00:31:15,750
manipulates the settings for that and

00:31:13,500 --> 00:31:17,429
that's a Python program that lives a

00:31:15,750 --> 00:31:19,559
little bit outside of it but it also

00:31:17,429 --> 00:31:21,600
wires into the DNF front and through its

00:31:19,559 --> 00:31:24,750
python api to make sure that those

00:31:21,600 --> 00:31:26,340
things are all coherent there should be

00:31:24,750 --> 00:31:29,610
this should be done slightly more

00:31:26,340 --> 00:31:32,150
smoothly but that takes a little bit of

00:31:29,610 --> 00:31:34,919
work of like figuring out how the

00:31:32,150 --> 00:31:35,950
interactions between the package manager

00:31:34,919 --> 00:31:38,019
and the entitlement manage

00:31:35,950 --> 00:31:40,779
system need to be rationalized

00:31:38,019 --> 00:31:42,549
especially in the in in the part about

00:31:40,779 --> 00:31:45,159
handling a transition from talking to

00:31:42,549 --> 00:31:47,019
our HSM directly and talking to and

00:31:45,159 --> 00:31:51,059
switching over to a satellite system or

00:31:47,019 --> 00:31:51,059
a Summa system or something like that

00:31:56,760 --> 00:32:00,330
any other questions

00:32:04,750 --> 00:32:07,750
okay

00:32:11,890 --> 00:32:19,509

YouTube URL: https://www.youtube.com/watch?v=bTFl9n7JJXw


