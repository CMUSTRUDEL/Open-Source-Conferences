Title: openSUSE Conference 2019 - IoT programming with openSUSE
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 💚 🦎
Description: 
	https://media.ccc.de/v/2390-iot-programming-with-opensuse

.

Small networked devices, commonly named Internet of Things (IoT), lead the next revolution in information technology. This talk will present the software and tools available on openSUSE to participate in this revolution. We will especially look at the 'Arduino' IDE to program Arduino, ESP8266, Wemos, ESP32, and similar devices.

Small networked devices, commonly named Internet of Things (IoT), lead the next revolution in information technology. This talk will present the software and tools available on openSUSE to participate in this revolution. We will especially look at the 'Arduino' IDE to program Arduino, ESP8266, Wemos, ESP32, and similar devices.

Klaus Kämpf
Captions: 
	00:00:07,370 --> 00:00:15,510
okay so welcome to this talk about IOT

00:00:12,090 --> 00:00:16,619
programming this openSUSE my name is

00:00:15,510 --> 00:00:19,980
Klaus Kemp

00:00:16,619 --> 00:00:24,450
I'm a senior product owner currently

00:00:19,980 --> 00:00:27,410
working for the cusp offering the

00:00:24,450 --> 00:00:33,329
container has a service platform but

00:00:27,410 --> 00:00:38,190
today let's look at what is IOT why is a

00:00:33,329 --> 00:00:40,379
OT important to everyone and since

00:00:38,190 --> 00:00:42,750
you're all hackers I'd like to show you

00:00:40,379 --> 00:00:48,030
a couple of IOT devices and especially

00:00:42,750 --> 00:00:51,390
how to program them with openSUSE bit

00:00:48,030 --> 00:00:57,300
about me I'm meanwhile and Suzanne

00:00:51,390 --> 00:01:01,499
offices a veteran 20 years already

00:00:57,300 --> 00:01:02,249
Oh active and open source for quite some

00:01:01,499 --> 00:01:04,949
time

00:01:02,249 --> 00:01:06,450
coring nose at all privately I'm a

00:01:04,949 --> 00:01:13,229
father a hacker and a maker

00:01:06,450 --> 00:01:17,939
I love agile and as I said taking care

00:01:13,229 --> 00:01:22,490
of containers but IOT so who knows what

00:01:17,939 --> 00:01:26,210
IOT is who have who has heard about IOT

00:01:22,490 --> 00:01:29,460
so ok

00:01:26,210 --> 00:01:33,560
not everyone raised his hand so IOT is

00:01:29,460 --> 00:01:37,590
the Internet of Things that means that

00:01:33,560 --> 00:01:40,649
everything one day would get an IP

00:01:37,590 --> 00:01:46,740
address maybe these chairs will get an

00:01:40,649 --> 00:01:50,460
IP address maybe the projector or all

00:01:46,740 --> 00:01:56,030
already has one and they all communicate

00:01:50,460 --> 00:01:59,579
and interact why is it important because

00:01:56,030 --> 00:02:07,039
there's a lot of money behind simple as

00:01:59,579 --> 00:02:12,240
that and if everywhere there are some

00:02:07,039 --> 00:02:17,690
computer or device which can which has a

00:02:12,240 --> 00:02:19,709
CPU and some means of transferring in

00:02:17,690 --> 00:02:23,069
information

00:02:19,709 --> 00:02:30,480
it is also important to all of us in

00:02:23,069 --> 00:02:34,170
terms of security and to understand what

00:02:30,480 --> 00:02:40,799
this actually means so let me start with

00:02:34,170 --> 00:02:46,470
a couple of IOT device examples many of

00:02:40,799 --> 00:02:49,500
you know this that's actually not the

00:02:46,470 --> 00:02:53,190
latest version in newer versions have

00:02:49,500 --> 00:02:57,180
Wireless but that's not what I'm going

00:02:53,190 --> 00:03:00,959
to talk about here because these things

00:02:57,180 --> 00:03:06,510
are pretty trivial in the sense of you

00:03:00,959 --> 00:03:09,209
can put Linux on them and treat it as a

00:03:06,510 --> 00:03:14,250
normal Linux device what I'm going to

00:03:09,209 --> 00:03:19,730
talk about is these things and I have

00:03:14,250 --> 00:03:22,819
one here so blue thing which can't

00:03:19,730 --> 00:03:25,949
almost can't see this is an IOT device

00:03:22,819 --> 00:03:30,169
the cables and the other thing is just a

00:03:25,949 --> 00:03:34,319
serial connector or serial to two USB v

00:03:30,169 --> 00:03:39,079
IOT device is is here I have a couple of

00:03:34,319 --> 00:03:45,629
other examples so for example this one

00:03:39,079 --> 00:03:49,970
again here this is the actual CPU and

00:03:45,629 --> 00:03:56,639
wireless controller and this is just as

00:03:49,970 --> 00:04:01,680
a serial converter this one is quite

00:03:56,639 --> 00:04:09,449
popular as you can see it has a lot of

00:04:01,680 --> 00:04:13,790
i/o pins and all these examples are dead

00:04:09,449 --> 00:04:13,790
chip a couple of euros

00:04:15,400 --> 00:04:25,830
so what is inside usually they are

00:04:21,489 --> 00:04:29,410
called esp8266 there is a successor of

00:04:25,830 --> 00:04:31,630
disco DSP 32 which I don't have with me

00:04:29,410 --> 00:04:36,669
this time they all do

00:04:31,630 --> 00:04:42,010
Vilas normal Wireless they have RISC

00:04:36,669 --> 00:04:45,340
processer and limited very limited

00:04:42,010 --> 00:04:48,820
amount of RAM and flash but they are

00:04:45,340 --> 00:04:53,310
cheap and they for a specific purpose

00:04:48,820 --> 00:04:56,639
they are wonderful so what are typical

00:04:53,310 --> 00:05:01,240
characteristics of IOT devices which I

00:04:56,639 --> 00:05:05,410
think are important first of all these

00:05:01,240 --> 00:05:12,330
devices are constrained you cannot run

00:05:05,410 --> 00:05:17,650
Linux on them they are small in terms of

00:05:12,330 --> 00:05:21,820
memory they are small in terms of CPU

00:05:17,650 --> 00:05:27,310
power they have usually a handful maybe

00:05:21,820 --> 00:05:32,919
two handful of pins to interact with the

00:05:27,310 --> 00:05:36,160
outside world almost all of them run on

00:05:32,919 --> 00:05:41,530
low power so not the typical USB 5 volt

00:05:36,160 --> 00:05:48,760
but three points avoids they some of

00:05:41,530 --> 00:05:52,030
them have analog input so you can have

00:05:48,760 --> 00:05:56,620
an analog to digital converter typical

00:05:52,030 --> 00:06:01,180
use cases for these are temperature

00:05:56,620 --> 00:06:05,349
sensor Ross many of them have an I

00:06:01,180 --> 00:06:09,130
square C bus this is just a three wire

00:06:05,349 --> 00:06:16,900
bus for a lot of other things

00:06:09,130 --> 00:06:24,880
sensors displays and and so on and all

00:06:16,900 --> 00:06:27,599
of them appear to your device as as a

00:06:24,880 --> 00:06:27,599
serial port

00:06:27,729 --> 00:06:33,249
and of course they all have networking

00:06:30,189 --> 00:06:39,059
capabilities so that they can interact

00:06:33,249 --> 00:06:42,999
with the internet let's look at

00:06:39,059 --> 00:06:45,879
networking IOT and networking this is

00:06:42,999 --> 00:06:50,620
the whole purpose of these things that

00:06:45,879 --> 00:06:53,710
they can buy our the internet connect to

00:06:50,620 --> 00:06:57,009
the world or can be reached from from

00:06:53,710 --> 00:06:59,550
the outside typical example and I have a

00:06:57,009 --> 00:07:05,919
couple of devices with me is of course

00:06:59,550 --> 00:07:08,259
wireless LAN it's simple everyone the

00:07:05,919 --> 00:07:14,860
room here probably has a device which

00:07:08,259 --> 00:07:20,499
does wireless the cost for these devices

00:07:14,860 --> 00:07:23,469
is small everyone has a router we have

00:07:20,499 --> 00:07:27,909
one I think here which provides Wireless

00:07:23,469 --> 00:07:31,029
in this room so this is everywhere and

00:07:27,909 --> 00:07:35,379
usage cost is also very very low so this

00:07:31,029 --> 00:07:39,089
is positive because here or at home you

00:07:35,379 --> 00:07:41,949
usually have have a flat rate and so on

00:07:39,089 --> 00:07:43,740
availability is also quite good I mean

00:07:41,949 --> 00:07:46,599
everyone who has a smartphone

00:07:43,740 --> 00:07:48,580
smartphones today depend on wireless I

00:07:46,599 --> 00:07:52,169
don't work without wireless so everyone

00:07:48,580 --> 00:07:57,969
wears a smartphone has a wireless

00:07:52,169 --> 00:08:02,249
endpoint to connect to and there an IOT

00:07:57,969 --> 00:08:07,870
device can connect to range is limited

00:08:02,249 --> 00:08:12,819
maybe 50 to 100 meter speed is quite

00:08:07,870 --> 00:08:17,339
quite good usually and a power

00:08:12,819 --> 00:08:20,050
consumption is not so good so running

00:08:17,339 --> 00:08:20,860
such a device on the battery doesn't

00:08:20,050 --> 00:08:24,270
last long

00:08:20,860 --> 00:08:30,909
they they they drain a lot of power so

00:08:24,270 --> 00:08:38,760
you need for this for wireless you need

00:08:30,909 --> 00:08:41,230
a power outlet and and power transformer

00:08:38,760 --> 00:08:45,940
then there is B

00:08:41,230 --> 00:08:48,610
II that is Bluetooth Low Energy that is

00:08:45,940 --> 00:08:52,630
relatively new I think it appeared a

00:08:48,610 --> 00:08:58,470
couple of years ago use of use is not as

00:08:52,630 --> 00:09:02,050
simple as Wireless from my perspective

00:08:58,470 --> 00:09:07,870
these IOT devices still cost more than

00:09:02,050 --> 00:09:13,180
two so on then wireless devices usage

00:09:07,870 --> 00:09:16,690
cost is the same I mean if you have a

00:09:13,180 --> 00:09:19,930
Bluetooth and end point to connect to

00:09:16,690 --> 00:09:24,460
then it's and it's simple but they are

00:09:19,930 --> 00:09:26,380
not as available so for example in this

00:09:24,460 --> 00:09:28,930
room there is no Bluetooth endpoint to

00:09:26,380 --> 00:09:33,150
to connect two ranges are also very

00:09:28,930 --> 00:09:39,220
limited usually less than a centimeter

00:09:33,150 --> 00:09:41,470
speed is not so very good but power

00:09:39,220 --> 00:09:44,880
consumption is really really low so

00:09:41,470 --> 00:09:52,900
running these devices on a battery is is

00:09:44,880 --> 00:09:58,990
easy then there is relatively new

00:09:52,900 --> 00:10:01,510
this is GSM so the mobile network to

00:09:58,990 --> 00:10:09,700
have IOT devices which connect to the

00:10:01,510 --> 00:10:16,290
mobile network is of use not so easy

00:10:09,700 --> 00:10:20,500
device cost is compared to the simple

00:10:16,290 --> 00:10:22,900
wireless device is relatively high usage

00:10:20,500 --> 00:10:29,010
cost is also high because you need two

00:10:22,900 --> 00:10:36,550
SIM cards you need mobile contract and

00:10:29,010 --> 00:10:39,400
you pay per megabyte so you can't stream

00:10:36,550 --> 00:10:42,040
on on these devices without paying a lot

00:10:39,400 --> 00:10:46,560
of money availability is very good

00:10:42,040 --> 00:10:51,370
I mean mobile coverage worldwide is okay

00:10:46,560 --> 00:10:54,670
speed is also quite quite high but power

00:10:51,370 --> 00:10:56,040
consumption know again that was need a

00:10:54,670 --> 00:10:59,620
lot of

00:10:56,040 --> 00:11:03,910
and the last and I think there's a talk

00:10:59,620 --> 00:11:06,070
about this in parallel is Laura Vaughn

00:11:03,910 --> 00:11:11,260
and the long range wide area network

00:11:06,070 --> 00:11:15,040
that is something pretty new ease of use

00:11:11,260 --> 00:11:18,540
is quite okay because again it's like

00:11:15,040 --> 00:11:22,740
the Internet problem is device cost

00:11:18,540 --> 00:11:28,120
those devices are still relatively

00:11:22,740 --> 00:11:31,270
expensive and especially the endpoints

00:11:28,120 --> 00:11:35,940
are expensive but the nice thing about

00:11:31,270 --> 00:11:41,280
Laura bond is Laura vise especially in

00:11:35,940 --> 00:11:46,800
Europe here is growing in the sense of

00:11:41,280 --> 00:11:51,040
that people provide free endpoints so

00:11:46,800 --> 00:11:54,340
cost usage cost is extremely low because

00:11:51,040 --> 00:12:00,720
you can connect to Laura bond endpoint

00:11:54,340 --> 00:12:04,540
and from there we have free free traffic

00:12:00,720 --> 00:12:05,830
availability is not very good but it's

00:12:04,540 --> 00:12:07,690
getting better

00:12:05,830 --> 00:12:15,610
I think here and on back we currently

00:12:07,690 --> 00:12:19,240
have three of four and endpoints so I

00:12:15,610 --> 00:12:21,760
for example I'm active in the in the

00:12:19,240 --> 00:12:24,490
non-black maker space the phablet Fablab

00:12:21,760 --> 00:12:27,100
known back and we are currently in the

00:12:24,490 --> 00:12:30,490
process of establishing Laura bond and

00:12:27,100 --> 00:12:35,850
end point and provide Internet through

00:12:30,490 --> 00:12:39,990
this range is extremely good several key

00:12:35,850 --> 00:12:46,750
kilo meters if there is especially

00:12:39,990 --> 00:12:48,970
line-of-sight speed is very very low but

00:12:46,750 --> 00:12:52,930
that's the purpose the purpose is not to

00:12:48,970 --> 00:12:59,010
transfer pictures but the purpose here

00:12:52,930 --> 00:13:05,080
is to transport sensor readings like

00:12:59,010 --> 00:13:08,200
temperature hue humidity movement or

00:13:05,080 --> 00:13:08,529
also and power consumption is very very

00:13:08,200 --> 00:13:12,159
good

00:13:08,529 --> 00:13:15,099
so I don't have one of these devices

00:13:12,159 --> 00:13:18,819
myself but what I heard you can run

00:13:15,099 --> 00:13:20,799
these devices for weeks on a battery

00:13:18,819 --> 00:13:23,589
because they don't have a constant

00:13:20,799 --> 00:13:26,289
connection they just turn on there

00:13:23,589 --> 00:13:30,369
they're trans transmission when when

00:13:26,289 --> 00:13:33,489
needed okay

00:13:30,369 --> 00:13:38,349
and all these internet of things it is

00:13:33,489 --> 00:13:41,079
about sensors this is what what these

00:13:38,349 --> 00:13:46,779
devices are for and here's a typical

00:13:41,079 --> 00:13:52,299
example of these are the sets you can

00:13:46,779 --> 00:13:55,959
get on on eBay for example and for

00:13:52,299 --> 00:13:59,919
example this one here is soil most

00:13:55,959 --> 00:14:08,829
moisture so you can check if your plants

00:13:59,919 --> 00:14:15,179
have enough water there is holes sense

00:14:08,829 --> 00:14:21,220
or touch this is ultrasound for

00:14:15,179 --> 00:14:25,959
proximity there are light sensors and

00:14:21,220 --> 00:14:32,759
and and so on and such a set costs I

00:14:25,959 --> 00:14:38,759
think 20 euros or so just to tinker with

00:14:32,759 --> 00:14:43,089
so with a sensor and in a simple

00:14:38,759 --> 00:14:47,229
Wireless I add a OT you are in the 20 30

00:14:43,089 --> 00:14:51,599
euros range but you need to program

00:14:47,229 --> 00:14:55,919
these things so what do we have there

00:14:51,599 --> 00:15:01,809
there is a very simple programming model

00:14:55,919 --> 00:15:07,329
and this is kind of a very rough one but

00:15:01,809 --> 00:15:12,039
it should transport my point so you have

00:15:07,329 --> 00:15:14,889
a of course you have a CPU core on top

00:15:12,039 --> 00:15:19,109
of this you have a bootloader so that

00:15:14,889 --> 00:15:21,830
when the device starts that it knows

00:15:19,109 --> 00:15:25,779
what what to do

00:15:21,830 --> 00:15:35,350
and on top of this you have the firmware

00:15:25,779 --> 00:15:39,430
that is so to speak the the application

00:15:35,350 --> 00:15:42,470
the base application and then you have

00:15:39,430 --> 00:15:45,950
your your application so this is the

00:15:42,470 --> 00:15:51,230
programming the the runtime environment

00:15:45,950 --> 00:15:54,500
and this is your application usually you

00:15:51,230 --> 00:15:58,839
can't change the bootloader but what you

00:15:54,500 --> 00:16:06,560
can do is you can change the firmware

00:15:58,839 --> 00:16:11,899
this is possible everywhere and then you

00:16:06,560 --> 00:16:16,670
can have different applications so let's

00:16:11,899 --> 00:16:20,600
look at from this if you buy these ESP

00:16:16,670 --> 00:16:25,329
things then they typically are

00:16:20,600 --> 00:16:30,290
pre-programmed with the expressive 80

00:16:25,329 --> 00:16:33,860
firmware so an 80 firmware does a modem

00:16:30,290 --> 00:16:37,190
emulation so who who of you is old

00:16:33,860 --> 00:16:42,950
enough that he knows about modems and

00:16:37,190 --> 00:16:47,839
the 880 command set yeah

00:16:42,950 --> 00:16:53,589
this is pretty old these are the things

00:16:47,839 --> 00:17:00,640
that you connected to your landline and

00:16:53,589 --> 00:17:04,760
I think it was Hayes manufacturer who

00:17:00,640 --> 00:17:08,809
standardized this command set so if you

00:17:04,760 --> 00:17:12,130
plug these devices in they appear as a

00:17:08,809 --> 00:17:15,500
serial device and what you need is a

00:17:12,130 --> 00:17:20,240
terminal program which talks to the to

00:17:15,500 --> 00:17:22,760
your serial device and openSUSE to the

00:17:20,240 --> 00:17:27,319
rescue there are even two of them it is

00:17:22,760 --> 00:17:31,010
mini-com and peacock on this is what

00:17:27,319 --> 00:17:35,420
openSUSE provides and how it looks like

00:17:31,010 --> 00:17:39,850
is something like this so you have

00:17:35,420 --> 00:17:45,580
every command stops with 880 and then

00:17:39,850 --> 00:17:51,010
for example 80-plus GMR shows you the

00:17:45,580 --> 00:17:56,890
version and then you have a t + c WLAP

00:17:51,010 --> 00:18:01,220
does a scan of available endpoints and

00:17:56,890 --> 00:18:03,590
if you download the presentation you

00:18:01,220 --> 00:18:06,440
will probably see more of it and then

00:18:03,590 --> 00:18:10,430
you will see this is an actual screen

00:18:06,440 --> 00:18:14,090
shot from the openSUSE summit in

00:18:10,430 --> 00:18:19,610
Nashville where I

00:18:14,090 --> 00:18:21,500
I tried this out but you can change the

00:18:19,610 --> 00:18:26,770
firmware and for example one very

00:18:21,500 --> 00:18:30,500
popular is my crop Titan yes you can put

00:18:26,770 --> 00:18:36,860
Titan on these devices and you have

00:18:30,500 --> 00:18:39,920
still room to write a Python program and

00:18:36,860 --> 00:18:41,930
what this micro patent provides is of

00:18:39,920 --> 00:18:42,860
course no graphical user interface or

00:18:41,930 --> 00:18:50,270
something like that

00:18:42,860 --> 00:18:53,360
but the things you need to program an

00:18:50,270 --> 00:18:59,150
IOT device so you can do analog and

00:18:53,360 --> 00:19:05,320
digital i/o you can do computations on

00:18:59,150 --> 00:19:09,700
these it has various process to talk to

00:19:05,320 --> 00:19:18,980
external devices and of course it has a

00:19:09,700 --> 00:19:23,120
tcp/ip and an HTTP stack so your i am i

00:19:18,980 --> 00:19:25,220
OT device can provide a web server

00:19:23,120 --> 00:19:28,070
endpoint and you can connect with your

00:19:25,220 --> 00:19:31,720
iphone or something like that with a

00:19:28,070 --> 00:19:36,620
browser to this device and read out your

00:19:31,720 --> 00:19:39,230
temperature or i guess guess sensor so

00:19:36,620 --> 00:19:43,310
for example at the makerspace

00:19:39,230 --> 00:19:49,130
so Fablab in nürnberg there's a gas

00:19:43,310 --> 00:19:52,460
sensor for carbon dioxide

00:19:49,130 --> 00:19:55,490
and based on this there's another

00:19:52,460 --> 00:19:59,690
calculation how many people are in the

00:19:55,490 --> 00:20:05,300
room currently which is which is pretty

00:19:59,690 --> 00:20:07,550
nice there is also another project on

00:20:05,300 --> 00:20:14,510
the internet which does something

00:20:07,550 --> 00:20:20,140
similar which scans mobile and wireless

00:20:14,510 --> 00:20:23,930
devices with such a small thing and

00:20:20,140 --> 00:20:30,680
based on this estimates the number of

00:20:23,930 --> 00:20:33,770
people in in the room example for micro

00:20:30,680 --> 00:20:38,650
pieden is this

00:20:33,770 --> 00:20:42,500
so micro patent even has a has a help

00:20:38,650 --> 00:20:45,230
command and then you can scan the

00:20:42,500 --> 00:20:51,040
network and at this point I actually

00:20:45,230 --> 00:20:54,470
like to demo it so what I have here is

00:20:51,040 --> 00:20:59,660
the device like this which is the same

00:20:54,470 --> 00:21:02,900
like this one it just has more I opened

00:20:59,660 --> 00:21:07,910
to connect to and it's a bit easier

00:21:02,900 --> 00:21:13,390
because it has I can connect a u.s. USB

00:21:07,910 --> 00:21:13,390
cable so let's do the real thing

00:21:33,330 --> 00:21:42,970
so here's the Titan front I can enter

00:21:37,990 --> 00:21:49,299
help I hope this is readable for all of

00:21:42,970 --> 00:21:53,799
you and here it even says how to connect

00:21:49,299 --> 00:22:03,490
to it I can just now copy and paste from

00:21:53,799 --> 00:22:08,429
here import Network then I create a

00:22:03,490 --> 00:22:11,100
network interface and activate it and

00:22:08,429 --> 00:22:18,520
then oops

00:22:11,100 --> 00:22:25,590
and then I can scan takes a while and

00:22:18,520 --> 00:22:25,590
here it gives you a typical Titan list

00:22:27,299 --> 00:22:30,990
let's put it a bit

00:22:37,220 --> 00:22:43,760
okay you know this is this is a simplest

00:22:40,640 --> 00:22:47,050
program so and if you check on your

00:22:43,760 --> 00:22:50,900
mobile phones this is the actual

00:22:47,050 --> 00:22:53,150
endpoints that are available in this

00:22:50,900 --> 00:22:56,660
room so this is the name of the end

00:22:53,150 --> 00:22:59,120
point and this is the MAC address and a

00:22:56,660 --> 00:23:03,710
couple of more parameters like signal

00:22:59,120 --> 00:23:07,480
strength and and so on okay I've seen at

00:23:03,710 --> 00:23:16,990
least two for don't believe me and check

00:23:07,480 --> 00:23:16,990
all right so back to the presentation

00:23:24,280 --> 00:23:36,080
yep okay yeah that was micro piden then

00:23:33,770 --> 00:23:39,940
there are a couple of other firmwares

00:23:36,080 --> 00:23:42,650
you can put on for example there is

00:23:39,940 --> 00:23:46,780
Esprit no basically giving you a

00:23:42,650 --> 00:23:49,910
JavaScript and environment note MC Lua

00:23:46,780 --> 00:23:53,990
I'm also a simple scripting there's

00:23:49,910 --> 00:23:57,320
basic and more so if you're Google for

00:23:53,990 --> 00:24:00,770
this this is really amazing how much

00:23:57,320 --> 00:24:03,850
possibilities you you have nowadays to

00:24:00,770 --> 00:24:09,170
program and and interact with these

00:24:03,850 --> 00:24:12,350
devices firmware update is also

00:24:09,170 --> 00:24:14,120
relatively simple so either you have a

00:24:12,350 --> 00:24:19,370
device like this where you directly

00:24:14,120 --> 00:24:21,800
connect USB or you get one of these USB

00:24:19,370 --> 00:24:26,450
to serial converter and a couple of

00:24:21,800 --> 00:24:28,760
cables you just now need to to connect

00:24:26,450 --> 00:24:32,960
the right pins to put this device into

00:24:28,760 --> 00:24:35,480
probe programming mode and then again

00:24:32,960 --> 00:24:39,890
the to the rescue there's peyten

00:24:35,480 --> 00:24:43,130
ESP tool and respite USB tool and the

00:24:39,890 --> 00:24:46,060
correct firmware binary you can flash

00:24:43,130 --> 00:24:46,060
your own samba

00:24:47,690 --> 00:24:55,830
but no Linux there's a couple of tools

00:24:53,070 --> 00:25:00,300
but no Linux involved so where is Linux

00:24:55,830 --> 00:25:04,130
and where's openSUSE l all these devices

00:25:00,300 --> 00:25:09,930
need to talk to some end point and their

00:25:04,130 --> 00:25:12,740
Linux is everywhere it is it is that

00:25:09,930 --> 00:25:19,160
Linux that holds the internet together

00:25:12,740 --> 00:25:23,460
that provides database and that runs on

00:25:19,160 --> 00:25:28,550
gateways and and so on and that gives

00:25:23,460 --> 00:25:34,380
you a workstation or laptop to program

00:25:28,550 --> 00:25:41,300
these devices also you do yourself for

00:25:34,380 --> 00:25:45,950
software development usually on on Linux

00:25:41,300 --> 00:25:49,650
when you do cross-compilation you do

00:25:45,950 --> 00:25:53,790
debugging on on Linux and you have your

00:25:49,650 --> 00:25:57,960
terminal like mini-com about cross

00:25:53,790 --> 00:26:00,270
compilation you cannot directly run

00:25:57,960 --> 00:26:04,770
Linux or your compiler on these devices

00:26:00,270 --> 00:26:07,710
so what is about cross compilation cross

00:26:04,770 --> 00:26:10,620
compilation means that it is not your

00:26:07,710 --> 00:26:15,690
usual software development workflow your

00:26:10,620 --> 00:26:19,530
usual workflow is you are sitting in on

00:26:15,690 --> 00:26:21,870
on the device and you code your edit you

00:26:19,530 --> 00:26:24,480
compile a link run in the environment

00:26:21,870 --> 00:26:26,910
your final program runs you don't have a

00:26:24,480 --> 00:26:32,490
change of platform cross compilation

00:26:26,910 --> 00:26:35,460
means that you are developing in a

00:26:32,490 --> 00:26:37,980
different platform then the final

00:26:35,460 --> 00:26:40,680
program so you need to compile for a

00:26:37,980 --> 00:26:43,650
different device you need to link for a

00:26:40,680 --> 00:26:45,660
different device and at the end of the

00:26:43,650 --> 00:26:49,050
link you need to upload it and then you

00:26:45,660 --> 00:26:50,490
can run it on the final final device and

00:26:49,050 --> 00:26:56,040
here

00:26:50,490 --> 00:27:00,360
openSUSE has a huge set of cross to

00:26:56,040 --> 00:27:05,480
chain tools so for example

00:27:00,360 --> 00:27:11,510
there is cross DCC that means a normal

00:27:05,480 --> 00:27:15,809
new c compiler but it outputs code for

00:27:11,510 --> 00:27:19,470
example for one of these devices and in

00:27:15,809 --> 00:27:22,590
order to do this you need cross headers

00:27:19,470 --> 00:27:26,399
cross in Clute files you need the

00:27:22,590 --> 00:27:29,399
complete binutils chain like the

00:27:26,399 --> 00:27:32,220
assembler and and the linker and of

00:27:29,399 --> 00:27:36,260
course in order to link you also need

00:27:32,220 --> 00:27:42,559
cross libraries and all this is

00:27:36,260 --> 00:27:47,100
available on DVD CC in the build service

00:27:42,559 --> 00:27:51,590
here our GCC maintainer are doing an

00:27:47,100 --> 00:27:57,149
awesome job of keeping all these cross

00:27:51,590 --> 00:28:00,360
targets alive so you get the latest and

00:27:57,149 --> 00:28:07,559
greatest new compiler the complete - a

00:28:00,360 --> 00:28:14,519
chain able to cross compile for arm a VR

00:28:07,559 --> 00:28:19,850
is the typical device or you know you

00:28:14,519 --> 00:28:19,850
can cross compile for power the CPUs or

00:28:19,880 --> 00:28:32,899
risk of 5 myths for example MIPS is

00:28:25,049 --> 00:28:37,710
typical CPU in a small wireless router

00:28:32,899 --> 00:28:44,720
so again kudos to the GCC maintain us at

00:28:37,710 --> 00:28:49,110
this point then in order to develop

00:28:44,720 --> 00:28:49,559
that's a very nice idea and that is

00:28:49,110 --> 00:28:53,789
called

00:28:49,559 --> 00:29:00,000
our Arduino so who has not heard about

00:28:53,789 --> 00:29:05,010
or do you know yet good thankfully every

00:29:00,000 --> 00:29:08,279
everyone has so typical Arduino device

00:29:05,010 --> 00:29:11,330
would be this one this for example has

00:29:08,279 --> 00:29:11,330
an AVR

00:29:12,300 --> 00:29:20,400
processor and also lots of i/o but no no

00:29:16,200 --> 00:29:23,340
wireless and neuro devices of Arduino

00:29:20,400 --> 00:29:27,690
look more like this

00:29:23,340 --> 00:29:34,980
they have meanwhile an arm core here

00:29:27,690 --> 00:29:37,980
they have a newer Wi-Fi module and this

00:29:34,980 --> 00:29:42,090
little thing here this this oddly shaped

00:29:37,980 --> 00:29:47,340
or u-shaped metal plate is the actual an

00:29:42,090 --> 00:29:53,370
antenna for for Wi-Fi and with the

00:29:47,340 --> 00:29:57,420
arduino ide you can directly yeah write

00:29:53,370 --> 00:30:01,050
your programs either in c like language

00:29:57,420 --> 00:30:03,710
that is called processing or directly in

00:30:01,050 --> 00:30:08,300
c or c++

00:30:03,710 --> 00:30:10,230
arduino ide is an integrated development

00:30:08,300 --> 00:30:17,150
environment

00:30:10,230 --> 00:30:19,980
it's java and it has some go tooling and

00:30:17,150 --> 00:30:24,300
there you have you have everything you

00:30:19,980 --> 00:30:29,420
can have a nice edit or then it calls

00:30:24,300 --> 00:30:34,140
out you know builder to call GCC and the

00:30:29,420 --> 00:30:39,180
linker and it supports a myriad of

00:30:34,140 --> 00:30:42,950
hardware devices how does it look like

00:30:39,180 --> 00:30:47,580
so typically looks looks like this

00:30:42,950 --> 00:30:51,830
so this is see the editor window you

00:30:47,580 --> 00:30:55,920
have a check mark button here this is

00:30:51,830 --> 00:30:58,310
the compile button and then this little

00:30:55,920 --> 00:30:59,610
error right next to it

00:30:58,310 --> 00:31:03,090
[Music]

00:30:59,610 --> 00:31:07,850
this means upload so you can then upload

00:31:03,090 --> 00:31:11,790
your your compiled program and here

00:31:07,850 --> 00:31:16,620
coding is normal

00:31:11,790 --> 00:31:20,990
c program or is extremely nice about the

00:31:16,620 --> 00:31:25,650
arduino ide is that it's easily

00:31:20,990 --> 00:31:26,160
extensible to other devices so just for

00:31:25,650 --> 00:31:30,870
reference

00:31:26,160 --> 00:31:36,800
in the presentation for example in the

00:31:30,870 --> 00:31:39,120
main settings you can enter URLs of

00:31:36,800 --> 00:31:42,750
additional board managers so that it

00:31:39,120 --> 00:31:47,820
knows about new new hardware new devices

00:31:42,750 --> 00:31:55,020
new new CPUs almost every device

00:31:47,820 --> 00:31:58,290
nowadays has such extension so every

00:31:55,020 --> 00:32:03,440
time you grab a device you can add this

00:31:58,290 --> 00:32:07,700
here and it's supported a quick look at

00:32:03,440 --> 00:32:14,540
what this means if you download or add

00:32:07,700 --> 00:32:21,590
such a device so for example ESP 888 e

00:32:14,540 --> 00:32:26,040
266 so the one here is called extensor

00:32:21,590 --> 00:32:29,210
CPU and when you add this you get a lot

00:32:26,040 --> 00:32:34,320
of additional binaries and they all

00:32:29,210 --> 00:32:38,580
sound familiar so you have the GCC

00:32:34,320 --> 00:32:45,900
compiler here the archiver run lip-read

00:32:38,580 --> 00:32:49,910
e b LD linker jeep g plus plus the

00:32:45,900 --> 00:32:52,520
complete new control chain

00:32:49,910 --> 00:32:58,470
what is really amazing is the set of

00:32:52,520 --> 00:33:02,100
libraries predefined libraries in IDE in

00:32:58,470 --> 00:33:06,390
our do you know you have libraries for

00:33:02,100 --> 00:33:09,180
sensors you have libraries for complete

00:33:06,390 --> 00:33:16,700
application web web servers you have

00:33:09,180 --> 00:33:21,000
libraries for this displays for elite

00:33:16,700 --> 00:33:23,610
LED stripes here just to pick an example

00:33:21,000 --> 00:33:27,870
is is a can control account

00:33:23,610 --> 00:33:36,050
it's a typical in industrial bus to

00:33:27,870 --> 00:33:39,830
connect such such devices you can also

00:33:36,050 --> 00:33:45,950
update your your libraries

00:33:39,830 --> 00:33:50,330
in this IDE it it's it's extremely well

00:33:45,950 --> 00:33:52,700
integrated and of course you have a have

00:33:50,330 --> 00:34:00,560
a boat's manager and here is just a

00:33:52,700 --> 00:34:03,220
typical list of boards and even if if

00:34:00,560 --> 00:34:08,060
your board is not supported you can

00:34:03,220 --> 00:34:10,520
adapt everything arduino ide is of

00:34:08,060 --> 00:34:13,190
course packaged in openSUSE it's not

00:34:10,520 --> 00:34:19,130
part of the leap distribution but we

00:34:13,190 --> 00:34:23,360
have cross to chain a AVR because IVR is

00:34:19,130 --> 00:34:24,110
the CPU where Arduino started with on

00:34:23,360 --> 00:34:27,950
built

00:34:24,110 --> 00:34:31,520
openSUSE ork the package for his

00:34:27,950 --> 00:34:34,610
historical reasons is spelled with an

00:34:31,520 --> 00:34:40,850
uppercase R but the command is with a

00:34:34,610 --> 00:34:43,160
lowercase I adapted it in a way that if

00:34:40,850 --> 00:34:45,830
you download audio from the internet you

00:34:43,160 --> 00:34:51,140
get the complete new to chain based on

00:34:45,830 --> 00:34:55,400
GCC six or seven I adapted it in a in a

00:34:51,140 --> 00:34:56,960
way that first of course this IDE is

00:34:55,400 --> 00:35:01,510
compiled from source so it's not a

00:34:56,960 --> 00:35:05,900
repackage binary and I stripped all the

00:35:01,510 --> 00:35:09,290
Arduino provided new tool chain and this

00:35:05,900 --> 00:35:16,850
uses the cross to chain from double

00:35:09,290 --> 00:35:21,110
please GCC okay I'm already at the end

00:35:16,850 --> 00:35:23,770
of the talk so let's look at our cheap

00:35:21,110 --> 00:35:26,330
programming with openSUSE it is

00:35:23,770 --> 00:35:30,440
extremely simple and extremely cheap for

00:35:26,330 --> 00:35:34,750
everyone to start with it you have many

00:35:30,440 --> 00:35:37,940
many sensors and IOT is all all about

00:35:34,750 --> 00:35:41,390
sensors you can choose the programming

00:35:37,940 --> 00:35:47,060
language that you're most familiar is

00:35:41,390 --> 00:35:51,530
and openSUSE everything is packaged and

00:35:47,060 --> 00:35:56,090
ready to use

00:35:51,530 --> 00:35:58,630
and with that I'm at the end thank you

00:35:56,090 --> 00:36:02,650
questions please

00:35:58,630 --> 00:36:02,650
and we have a microphone

00:36:04,010 --> 00:36:09,920
I will leave those SP 32 chips they have

00:36:06,890 --> 00:36:13,820
extends our CPUs and we currently don't

00:36:09,920 --> 00:36:15,860
have extends our cross compilers so I

00:36:13,820 --> 00:36:18,380
try to use the binary blobs that are

00:36:15,860 --> 00:36:23,660
provided for the Arduino re yeah but

00:36:18,380 --> 00:36:31,610
that's probably just approaching the DCC

00:36:23,660 --> 00:36:33,530
maintainer and enabling this in GCC I

00:36:31,610 --> 00:36:35,540
was just pulling for the status how far

00:36:33,530 --> 00:36:38,650
are we into this I haven't looked at

00:36:35,540 --> 00:36:43,100
this okay thank you yeah because I mean

00:36:38,650 --> 00:36:47,860
these devices I I don't directly code in

00:36:43,100 --> 00:36:52,550
in GCC I usually use micro Patton or

00:36:47,860 --> 00:36:55,910
JavaScript okay you see of course if you

00:36:52,550 --> 00:36:59,980
want to for example compile micro patent

00:36:55,910 --> 00:36:59,980
from source then you would need it

00:37:03,700 --> 00:37:12,910
more questions okay from the front with

00:37:10,489 --> 00:37:20,440
the micro Python how do you upload the

00:37:12,910 --> 00:37:22,999
application if you write a script or so

00:37:20,440 --> 00:37:26,869
write a script and then virus your

00:37:22,999 --> 00:37:28,969
device you can also enter it manually

00:37:26,869 --> 00:37:34,009
and then store it on the device I mean

00:37:28,969 --> 00:37:36,529
they all have flash fresh memory yeah so

00:37:34,009 --> 00:37:40,700
you can basically use this reduce plain

00:37:36,529 --> 00:37:53,900
pison and program it like on a normal

00:37:40,700 --> 00:37:57,640
look sister whatever yep can some of the

00:37:53,900 --> 00:37:57,640
devices be updated over-the-air

00:37:58,359 --> 00:38:06,920
loli all of these devices can be updated

00:38:02,269 --> 00:38:12,460
over the air if you program it so for

00:38:06,920 --> 00:38:19,670
example a German food shop called OB

00:38:12,460 --> 00:38:23,779
provided wireless power plug which you

00:38:19,670 --> 00:38:26,299
can wear you can buy our wireless can

00:38:23,779 --> 00:38:32,109
turn power on and on and off it costs 10

00:38:26,299 --> 00:38:38,559
10 euros it has an esp8266 you can

00:38:32,109 --> 00:38:42,769
reflash it with with open-source

00:38:38,559 --> 00:38:45,410
application this topic open-source

00:38:42,769 --> 00:38:48,069
application then gives you a simple web

00:38:45,410 --> 00:38:54,069
endpoint so you can connect to it with

00:38:48,069 --> 00:38:57,529
your browser you can add sensors to it

00:38:54,069 --> 00:39:03,819
and it has a capability to download new

00:38:57,529 --> 00:39:03,819
newer versions from the internet nice

00:39:09,120 --> 00:39:14,470
okay

00:39:10,740 --> 00:39:17,350
no more questions so if somebody wants

00:39:14,470 --> 00:39:20,590
to have a look I've some stuff here in

00:39:17,350 --> 00:39:23,320
front so that you can see how small

00:39:20,590 --> 00:39:25,440
these things are otherwise thanks a lot

00:39:23,320 --> 00:39:32,550
and enjoy your day

00:39:25,440 --> 00:39:32,550

YouTube URL: https://www.youtube.com/watch?v=mt9DD9ucwZU


