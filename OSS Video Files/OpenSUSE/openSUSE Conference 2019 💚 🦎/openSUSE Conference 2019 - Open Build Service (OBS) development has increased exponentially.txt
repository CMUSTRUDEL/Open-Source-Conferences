Title: openSUSE Conference 2019 - Open Build Service (OBS) development has increased exponentially
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2519-open-build-service-obs-development-has-increased-exponentially



OBS Team will briefly explain the evolution of the OBS in the last year, and also some of the impressive features that have been included recently.

We will introduce the advances of OBS, not only the Frontend but also those related with the Backend and OSC (command line tool).

We will also give some hints about the upcoming features we have in mind for the future of OBS.

Sounds interesting, right?

Don't miss this talk and take advantage of knowing all the improvements that can make your work easier using OBS.

OBS Team will briefly explain the evolution of the OBS in the last year, and also some of the impressive features that have been included recently.

We will introduce the advances of OBS, not only the Frontend but also those related with the Backend and OSC (command line tool).

We will also give some hints about the upcoming features we have in mind for the future of OBS.

Sounds interesting, right?

Don't miss this talk and take advantage of knowing all the improvements that can make your work easier using OBS.

David Kang
Captions: 
	00:00:07,309 --> 00:00:14,099
well we can start hello thank you for

00:00:11,490 --> 00:00:17,790
coming to this talk about oh yes

00:00:14,099 --> 00:00:19,560
open build service first of all let me

00:00:17,790 --> 00:00:25,169
introduce you to the people who's going

00:00:19,560 --> 00:00:29,340
to talk to you today my name is Sarah I

00:00:25,169 --> 00:00:32,700
am a web developer in oh yes David is

00:00:29,340 --> 00:00:37,290
also a web developer Frank works in the

00:00:32,700 --> 00:00:42,390
backend and Marco is in charge of OSE

00:00:37,290 --> 00:00:44,789
our common line line some of our

00:00:42,390 --> 00:00:48,059
colleagues really believe that we work

00:00:44,789 --> 00:00:51,780
like this we live in the Canary Islands

00:00:48,059 --> 00:00:54,780
in Spain and they think we are all day

00:00:51,780 --> 00:00:58,850
long lying on the beach sunbathing with

00:00:54,780 --> 00:01:04,350
our laptop but it's not like this at all

00:00:58,850 --> 00:01:08,610
we we work in a normal office we share

00:01:04,350 --> 00:01:11,520
it with all the Canarian guys and it is

00:01:08,610 --> 00:01:16,500
quite normal as you see full of

00:01:11,520 --> 00:01:18,049
chameleons of course and this is the

00:01:16,500 --> 00:01:21,869
yellow for today

00:01:18,049 --> 00:01:25,320
we are going to talk about what is new

00:01:21,869 --> 00:01:28,770
in obvious first debate and I are going

00:01:25,320 --> 00:01:31,229
to talk about a web application then

00:01:28,770 --> 00:01:35,159
Frank is going to explain us what's new

00:01:31,229 --> 00:01:38,100
in the back end and finally Marco is

00:01:35,159 --> 00:01:46,170
going to tell us the news about the

00:01:38,100 --> 00:01:49,049
common line client well sometimes we

00:01:46,170 --> 00:01:53,280
develop some features that are so big or

00:01:49,049 --> 00:01:57,810
so complex that we need exhaustive

00:01:53,280 --> 00:02:01,259
testing for them so we need some users

00:01:57,810 --> 00:02:06,600
to test them but they are not in a final

00:02:01,259 --> 00:02:10,080
version so how can we do that we have

00:02:06,600 --> 00:02:12,420
four that the beta program where we

00:02:10,080 --> 00:02:15,330
don't show those features to all the

00:02:12,420 --> 00:02:17,280
users but only to those users who want

00:02:15,330 --> 00:02:19,500
to join the beta program and test was

00:02:17,280 --> 00:02:23,460
new all the features

00:02:19,500 --> 00:02:25,770
that our ongoing development it's very

00:02:23,460 --> 00:02:28,770
easy to join any of you can join right

00:02:25,770 --> 00:02:33,930
now if you want you can just have to log

00:02:28,770 --> 00:02:37,110
in in OBS go to the profile page to your

00:02:33,930 --> 00:02:39,510
user page and then on the left side you

00:02:37,110 --> 00:02:43,140
have a link to join the better program

00:02:39,510 --> 00:02:47,130
from that moment you can see all the new

00:02:43,140 --> 00:02:49,140
features that we are delivering and you

00:02:47,130 --> 00:02:52,200
can start working with them in your

00:02:49,140 --> 00:02:54,030
daily work and it's going to be very

00:02:52,200 --> 00:02:57,330
useful for us because maybe you can find

00:02:54,030 --> 00:02:59,430
some box or you can realize that some

00:02:57,330 --> 00:03:04,320
workflow has chain and it's not good for

00:02:59,430 --> 00:03:07,830
you so please join the water program is

00:03:04,320 --> 00:03:10,020
very easy and every time we deliver some

00:03:07,830 --> 00:03:14,390
new features we are going to announce

00:03:10,020 --> 00:03:18,030
them in our block have a look to it

00:03:14,390 --> 00:03:20,010
every two weeks or every month probably

00:03:18,030 --> 00:03:22,650
you will see something new there and

00:03:20,010 --> 00:03:25,709
it's very important for us that you test

00:03:22,650 --> 00:03:31,920
them and open an issue if you find

00:03:25,709 --> 00:03:33,840
something strange if you join the beta

00:03:31,920 --> 00:03:37,410
program right now you can see that we

00:03:33,840 --> 00:03:41,010
have every fresh user interface you can

00:03:37,410 --> 00:03:47,700
see that most of of the pages has look

00:03:41,010 --> 00:03:51,209
at different way and why do do we revamp

00:03:47,700 --> 00:03:53,760
the user interface we have many reasons

00:03:51,209 --> 00:03:57,600
for that and the mess the most important

00:03:53,760 --> 00:04:00,750
one is that the technology we were using

00:03:57,600 --> 00:04:05,030
is now obsolete and it is not longer

00:04:00,750 --> 00:04:08,850
maintained so for this reason we are

00:04:05,030 --> 00:04:11,880
revamping it we have to choose a new

00:04:08,850 --> 00:04:15,030
technology but there are more reasons

00:04:11,880 --> 00:04:18,890
another one is that we want our just an

00:04:15,030 --> 00:04:21,510
interface to be mobile friendly we also

00:04:18,890 --> 00:04:28,919
thought that it was time to make it more

00:04:21,510 --> 00:04:32,999
modern and a bit nicer it's also useful

00:04:28,919 --> 00:04:35,489
for us to rewrite the code a bit

00:04:32,999 --> 00:04:39,029
because it was a bit chaotic sometime

00:04:35,489 --> 00:04:43,559
and we need them to be tidy and clean

00:04:39,029 --> 00:04:45,269
too to be able to refactor it in the

00:04:43,559 --> 00:04:47,879
future or maybe changing the workflow

00:04:45,269 --> 00:04:55,889
and it's easier if we have everything

00:04:47,879 --> 00:04:59,789
tidy I tidy and clean well we did some

00:04:55,889 --> 00:05:03,719
proof of concept with some workflow some

00:04:59,789 --> 00:05:08,039
framework sorry we try semantic UI we

00:05:03,719 --> 00:05:10,889
also try bootstrap and bulma and finally

00:05:08,039 --> 00:05:15,559
we realize that the best for us was

00:05:10,889 --> 00:05:18,149
bootstrap the reasons are first of all

00:05:15,559 --> 00:05:22,049
there is a big community behind

00:05:18,149 --> 00:05:25,559
bootstrap it is a stable project it's

00:05:22,049 --> 00:05:31,679
reliable it's well documented it has all

00:05:25,559 --> 00:05:35,009
the features we needed some of the of

00:05:31,679 --> 00:05:40,889
our colleagues had experience with it so

00:05:35,009 --> 00:05:46,039
we chose it this is I'm going to show

00:05:40,889 --> 00:05:46,039
you some of the pages that has changed

00:05:47,089 --> 00:05:55,319
this is the old main page the home page

00:05:50,279 --> 00:06:00,559
of obvious and now you can see how cool

00:05:55,319 --> 00:06:07,889
is it nowadays a lot of change right

00:06:00,559 --> 00:06:08,869
amazing don't you think so I don't think

00:06:07,889 --> 00:06:13,139
so

00:06:08,869 --> 00:06:16,709
yes we it has changed a bit we have new

00:06:13,139 --> 00:06:19,110
icons we have the layout is wider we

00:06:16,709 --> 00:06:23,069
have more empty space between the

00:06:19,110 --> 00:06:30,119
elements but it's not really a big

00:06:23,069 --> 00:06:33,360
change as you can see but it was what

00:06:30,119 --> 00:06:35,969
what we wanted to achieve we didn't want

00:06:33,360 --> 00:06:39,539
to disrupt your daily work we just

00:06:35,969 --> 00:06:42,719
wanted to keep it like it was but it has

00:06:39,539 --> 00:06:44,909
changed a lot behind they called change

00:06:42,719 --> 00:06:46,980
a lot we have migrated a lot of things

00:06:44,909 --> 00:06:52,710
so for us we

00:06:46,980 --> 00:06:55,980
getting what we wanted this is another

00:06:52,710 --> 00:06:59,700
example this is the page of the project

00:06:55,980 --> 00:07:06,740
and it looked like this before and now

00:06:59,700 --> 00:07:06,740
it looks like this yes be better not bad

00:07:07,590 --> 00:07:14,700
most of the other pages are migrated

00:07:11,760 --> 00:07:20,600
like like this keeping what we had

00:07:14,700 --> 00:07:20,600
before but making it more clean and now

00:07:20,690 --> 00:07:26,100
I'm going to show you some of the pages

00:07:23,280 --> 00:07:28,260
that really changed because we thought

00:07:26,100 --> 00:07:30,930
it was necessary or it was a bit

00:07:28,260 --> 00:07:34,200
confusing before and the repository

00:07:30,930 --> 00:07:38,730
space is one good example it was like

00:07:34,200 --> 00:07:40,800
this we had some listing we list some

00:07:38,730 --> 00:07:44,490
all the repository names

00:07:40,800 --> 00:07:46,980
I'll bit more information but now we

00:07:44,490 --> 00:07:50,760
have we are displaying this in boxes so

00:07:46,980 --> 00:07:55,980
we we are using all the free space on

00:07:50,760 --> 00:07:58,950
the right so it looks better now this is

00:07:55,980 --> 00:08:04,800
another good example this is the pools

00:07:58,950 --> 00:08:11,070
page and this is it it was a list also

00:08:04,800 --> 00:08:14,540
and now it looks like this it's colorful

00:08:11,070 --> 00:08:19,350
or the information is divided into

00:08:14,540 --> 00:08:22,560
sections and we also can select for

00:08:19,350 --> 00:08:24,110
periods of times there so it has

00:08:22,560 --> 00:08:28,830
improved a lot

00:08:24,110 --> 00:08:32,370
and also how we did some good Europe I

00:08:28,830 --> 00:08:35,310
think with the members group members

00:08:32,370 --> 00:08:39,860
stopped before it was a table for only

00:08:35,310 --> 00:08:44,300
one column or two if you are arming and

00:08:39,860 --> 00:08:47,790
now we can see all the users like this

00:08:44,300 --> 00:08:52,020
we focus on the avatar and the name and

00:08:47,790 --> 00:08:57,060
we eat they are side by side too to use

00:08:52,020 --> 00:08:59,340
better the space and we did it we have

00:08:57,060 --> 00:09:00,450
our application and now it's mobile

00:08:59,340 --> 00:09:05,850
friendly

00:09:00,450 --> 00:09:10,110
it looks very well in the mobile and you

00:09:05,850 --> 00:09:11,820
can see everything I have just so you if

00:09:10,110 --> 00:09:14,910
you join the better program so please

00:09:11,820 --> 00:09:16,950
join please give us feedback please let

00:09:14,910 --> 00:09:23,160
us know if you have found something

00:09:16,950 --> 00:09:25,860
wrong or you suggest any change that's

00:09:23,160 --> 00:09:27,570
all for my site next daddy they are

00:09:25,860 --> 00:09:31,620
going to tell you more interesting

00:09:27,570 --> 00:09:36,210
things about obviously thank you thank

00:09:31,620 --> 00:09:40,680
you said I I look like a single with

00:09:36,210 --> 00:09:43,530
that okay so now we have the status

00:09:40,680 --> 00:09:46,320
status report API I mean in the last few

00:09:43,530 --> 00:09:48,170
years we was trying to do some some

00:09:46,320 --> 00:09:51,720
changes we were trying to improve our

00:09:48,170 --> 00:09:54,480
continuous integration and we note that

00:09:51,720 --> 00:09:56,730
when we can provide more information you

00:09:54,480 --> 00:09:59,910
can take better decision for integrated

00:09:56,730 --> 00:10:03,000
for stuff that you can do in your

00:09:59,910 --> 00:10:04,920
workflow so let's spline a little bit

00:10:03,000 --> 00:10:08,310
what is a contingent iteration so

00:10:04,920 --> 00:10:11,940
imagine taking github your salt causes

00:10:08,310 --> 00:10:16,410
you have a pull request son is trying to

00:10:11,940 --> 00:10:19,200
build we pass to some testes and after

00:10:16,410 --> 00:10:21,990
that the tests are reported have some

00:10:19,200 --> 00:10:23,010
report and is everything is green is

00:10:21,990 --> 00:10:25,080
everything's fine

00:10:23,010 --> 00:10:30,330
so it's merged it to your source code

00:10:25,080 --> 00:10:32,850
and you can release it what we have done

00:10:30,330 --> 00:10:36,120
with the status report API is an idea

00:10:32,850 --> 00:10:38,460
that you can't take this information

00:10:36,120 --> 00:10:42,120
from the external tool and show it in

00:10:38,460 --> 00:10:44,430
obvious that's means that when you're

00:10:42,120 --> 00:10:46,800
for example Travis tells your tester

00:10:44,430 --> 00:10:48,750
screen in obvious you can show this

00:10:46,800 --> 00:10:50,640
information you can see it in the check

00:10:48,750 --> 00:10:53,760
status below that we have some tests

00:10:50,640 --> 00:10:55,440
with open QA that he succeed another one

00:10:53,760 --> 00:10:57,750
with a minima that is pending because

00:10:55,440 --> 00:11:02,370
it's not finished and one with us is

00:10:57,750 --> 00:11:05,040
failed and with this status with the

00:11:02,370 --> 00:11:08,040
status report API we empowered our our

00:11:05,040 --> 00:11:11,760
staging workflow our staging workflow is

00:11:08,040 --> 00:11:13,920
some kind of CI because you can with

00:11:11,760 --> 00:11:17,149
that we can take a little bunch of

00:11:13,920 --> 00:11:20,670
summer requests and that's all together

00:11:17,149 --> 00:11:23,250
so for example here we can see that we

00:11:20,670 --> 00:11:25,410
can take a lot of packages a lot of

00:11:23,250 --> 00:11:28,440
submit requests that you want to

00:11:25,410 --> 00:11:30,360
integrate in your in your project you

00:11:28,440 --> 00:11:34,110
had it in a soup and studying project

00:11:30,360 --> 00:11:37,920
but then they start to build and if that

00:11:34,110 --> 00:11:39,630
is that enough in a sternal CI with the

00:11:37,920 --> 00:11:41,970
stairs with the status report apply you

00:11:39,630 --> 00:11:45,389
can check if the external have done I

00:11:41,970 --> 00:11:50,910
finish it and with and have finished

00:11:45,389 --> 00:11:53,040
sorry as ice forgot this this slide if I

00:11:50,910 --> 00:11:58,040
finish it and reported and if it's green

00:11:53,040 --> 00:11:58,040
you can merge it and you can release it

00:11:58,970 --> 00:12:05,399
so here we have an example so here you

00:12:02,639 --> 00:12:09,740
can see the staging workflow in this

00:12:05,399 --> 00:12:09,740
case it for the for the project as Linux

00:12:09,949 --> 00:12:15,110
I think it was night because it very

00:12:12,480 --> 00:12:16,320
useful so with that what we want is

00:12:15,110 --> 00:12:19,500
sorry

00:12:16,320 --> 00:12:20,790
so with that you can see that the good

00:12:19,500 --> 00:12:22,320
points of the steady workflow is that

00:12:20,790 --> 00:12:24,899
you can take different change this

00:12:22,320 --> 00:12:26,430
friends submit request that's it rarely

00:12:24,899 --> 00:12:28,709
different changes from different

00:12:26,430 --> 00:12:31,140
projects and you can you can test all

00:12:28,709 --> 00:12:33,630
them together not like the other CI that

00:12:31,140 --> 00:12:38,940
you can only test them independently by

00:12:33,630 --> 00:12:44,160
y1 so now let's just pick a little bit

00:12:38,940 --> 00:12:49,019
about the future so right now what we

00:12:44,160 --> 00:12:52,829
have is that when when some changes

00:12:49,019 --> 00:12:56,810
occur in our in our in our in our

00:12:52,829 --> 00:12:59,339
repository that is the case of github

00:12:56,810 --> 00:13:03,029
someone contribute make a port request

00:12:59,339 --> 00:13:06,540
this progressive merge github sent to us

00:13:03,029 --> 00:13:08,519
a request and then we start to do stuff

00:13:06,540 --> 00:13:12,510
and we'll for example updating the

00:13:08,519 --> 00:13:14,850
source started rebuilding but what we

00:13:12,510 --> 00:13:17,490
cannot do and we want is when something

00:13:14,850 --> 00:13:20,040
happens in obvious we should also be

00:13:17,490 --> 00:13:22,290
possible to send and even to send a

00:13:20,040 --> 00:13:25,410
request to an external tool for example

00:13:22,290 --> 00:13:27,240
in the case of open crea so we want on

00:13:25,410 --> 00:13:27,810
and events happens in obvious we can

00:13:27,240 --> 00:13:31,439
tell to

00:13:27,810 --> 00:13:33,990
Oh pink ray okay now you can test open

00:13:31,439 --> 00:13:36,269
QA is an automatic tool for open system

00:13:33,990 --> 00:13:38,579
that could be open create that could be

00:13:36,269 --> 00:13:42,360
also traveese any other kind of of -

00:13:38,579 --> 00:13:44,129
that we want to so with this concept we

00:13:42,360 --> 00:13:46,439
try to improve the communication with

00:13:44,129 --> 00:13:48,689
the tools directly we don't need to any

00:13:46,439 --> 00:13:50,399
intermedia or any kind of boards when we

00:13:48,689 --> 00:13:52,680
kind of grown that do stuff in the

00:13:50,399 --> 00:13:58,829
middle so we want to connect and talk

00:13:52,680 --> 00:14:00,839
with the external tools directly what

00:13:58,829 --> 00:14:03,209
another improve that we want to do is

00:14:00,839 --> 00:14:05,519
automate interface updates in real time

00:14:03,209 --> 00:14:07,680
what does means that means that you not

00:14:05,519 --> 00:14:12,300
did that you don't need to do any more

00:14:07,680 --> 00:14:14,610
f5 f5 to get information so let's have

00:14:12,300 --> 00:14:16,829
an example so the here you can see that

00:14:14,610 --> 00:14:19,589
a user is interacting with in the face

00:14:16,829 --> 00:14:22,529
and he talked with the bakken and the

00:14:19,589 --> 00:14:25,139
backend gave him the answer so if you

00:14:22,529 --> 00:14:26,910
want to give an update information he

00:14:25,139 --> 00:14:30,949
need to refresh again the page or do

00:14:26,910 --> 00:14:34,259
another action to get the feedback and

00:14:30,949 --> 00:14:36,629
in talking a real a real example here

00:14:34,259 --> 00:14:38,579
you can see the B result that's the

00:14:36,629 --> 00:14:40,920
package pearl purse it is that is still

00:14:38,579 --> 00:14:42,870
building from some repository and if the

00:14:40,920 --> 00:14:44,670
user I want to know if the bidder finish

00:14:42,870 --> 00:14:47,309
it he need to click in the Refresh icon

00:14:44,670 --> 00:14:49,829
that isn't on the top and sometimes

00:14:47,309 --> 00:14:51,000
nothing changed because the bakken it's

00:14:49,829 --> 00:14:54,600
your building you don't have any

00:14:51,000 --> 00:14:56,639
information so what we plan to do really

00:14:54,600 --> 00:14:59,309
is when the Bakken has something to

00:14:56,639 --> 00:15:01,920
update the interface should show the

00:14:59,309 --> 00:15:03,240
date information that means that this

00:15:01,920 --> 00:15:05,879
bill is stating that in the in the

00:15:03,240 --> 00:15:08,519
bottom so automatically changed to

00:15:05,879 --> 00:15:12,149
succeed if the bill was succeed without

00:15:08,519 --> 00:15:19,559
any interaction from the user so now

00:15:12,149 --> 00:15:22,110
without any science religion as well as

00:15:19,559 --> 00:15:25,379
we the team we are possible at for

00:15:22,110 --> 00:15:28,230
instance Bill openSUSE dot org and we

00:15:25,379 --> 00:15:31,730
are many - well we are many and many I

00:15:28,230 --> 00:15:34,559
mean tasks like deployment debugging

00:15:31,730 --> 00:15:37,980
issues looking to the into the logs

00:15:34,559 --> 00:15:40,440
marita into different dashboard and we

00:15:37,980 --> 00:15:44,840
want to avoid this kind of test

00:15:40,440 --> 00:15:48,840
and doing some more automated and

00:15:44,840 --> 00:15:53,520
automated sorry and connect and connect

00:15:48,840 --> 00:15:56,850
system via software related to the

00:15:53,520 --> 00:15:58,200
provides the deployment as we are many

00:15:56,850 --> 00:16:00,660
people doing that and we expect in the

00:15:58,200 --> 00:16:03,240
future that more people will do will do

00:16:00,660 --> 00:16:06,630
the same system we will do the same we

00:16:03,240 --> 00:16:10,620
need to have some kind of we need to

00:16:06,630 --> 00:16:14,100
start managing to deployment so we would

00:16:10,620 --> 00:16:16,770
like to know the current deployment we

00:16:14,100 --> 00:16:19,440
will also would like to set the premiÃ¨re

00:16:16,770 --> 00:16:20,880
classe specific time or even know what's

00:16:19,440 --> 00:16:22,890
happened if what happened the past I

00:16:20,880 --> 00:16:30,210
mean the history of the of the of the

00:16:22,890 --> 00:16:33,420
deployment I know another aspect is we

00:16:30,210 --> 00:16:34,890
also try or may think going to the

00:16:33,420 --> 00:16:37,770
direction to the continued deployment

00:16:34,890 --> 00:16:39,960
that means when a change happens deploy

00:16:37,770 --> 00:16:44,850
ultimate and Whittle automatically a

00:16:39,960 --> 00:16:47,280
deploy and do that we try to us more

00:16:44,850 --> 00:16:53,940
time of to be able to focus in more

00:16:47,280 --> 00:16:55,620
exposed in more important tasks for

00:16:53,940 --> 00:16:57,300
having a previous and what you of what's

00:16:55,620 --> 00:16:59,100
happening the below place to talk or I

00:16:57,300 --> 00:17:01,710
mean the instance that we are in charge

00:16:59,100 --> 00:17:03,690
right now we have to increase the

00:17:01,710 --> 00:17:06,000
monitoring for the application health

00:17:03,690 --> 00:17:11,339
for application health I mean for

00:17:06,000 --> 00:17:13,709
example for example to look performances

00:17:11,339 --> 00:17:16,319
or to see what's happened there or

00:17:13,709 --> 00:17:20,720
what's happened with the with our system

00:17:16,319 --> 00:17:21,930
and we work and we also want to be

00:17:20,720 --> 00:17:24,180
alerted

00:17:21,930 --> 00:17:27,980
I mean to get some notification when

00:17:24,180 --> 00:17:30,930
something critical happens to be able to

00:17:27,980 --> 00:17:35,670
to fix it as much as fast as possible

00:17:30,930 --> 00:17:36,960
and give you a better service so for

00:17:35,670 --> 00:17:40,890
example right now

00:17:36,960 --> 00:17:44,040
we have performance monitoring for that

00:17:40,890 --> 00:17:47,490
we also have tracking a track released a

00:17:44,040 --> 00:17:49,620
track reception but they are all

00:17:47,490 --> 00:17:52,220
disconnected I mean they sent to us in

00:17:49,620 --> 00:17:54,740
the on notification

00:17:52,220 --> 00:17:56,960
and for us is a leap a little of me

00:17:54,740 --> 00:17:59,179
sometimes very hard to have an overview

00:17:56,960 --> 00:18:01,640
of the states what is happening in all

00:17:59,179 --> 00:18:03,860
the place maybe the system is down maybe

00:18:01,640 --> 00:18:05,450
the user makes something wrong something

00:18:03,860 --> 00:18:08,059
happening for us it's very difficult to

00:18:05,450 --> 00:18:09,860
track all this information so what we

00:18:08,059 --> 00:18:12,500
want to what we want to do is to work

00:18:09,860 --> 00:18:18,890
well we want to work is to connect all

00:18:12,500 --> 00:18:20,720
these tools because like a civic for

00:18:18,890 --> 00:18:24,760
when something wrong happens like for

00:18:20,720 --> 00:18:28,429
example the service down we want to know

00:18:24,760 --> 00:18:30,820
we want to know what's happened and we

00:18:28,429 --> 00:18:40,130
want to reach to know it's the easiest

00:18:30,820 --> 00:18:42,710
way to check what is happening sorry and

00:18:40,130 --> 00:18:45,530
also to being true that's weed and

00:18:42,710 --> 00:18:50,960
having this information we we will we

00:18:45,530 --> 00:18:53,720
will we can we can fact we can fix the

00:18:50,960 --> 00:18:55,610
problem as fast as possible and give

00:18:53,720 --> 00:18:59,510
heed you about the service and bring

00:18:55,610 --> 00:19:01,970
back the service to its normal state so

00:18:59,510 --> 00:19:04,669
in resume or in summary what we want is

00:19:01,970 --> 00:19:09,110
to have an automated connected and

00:19:04,669 --> 00:19:15,100
observable system and that's all for my

00:19:09,110 --> 00:19:18,210
past for my side so Frank

00:19:15,100 --> 00:19:18,210
[Applause]

00:19:18,610 --> 00:19:26,270
sings David from the back hand side it

00:19:24,230 --> 00:19:28,789
was really hard for me to find something

00:19:26,270 --> 00:19:34,159
what might be interesting for the users

00:19:28,789 --> 00:19:38,390
because we did many improvements and for

00:19:34,159 --> 00:19:44,270
the speed of the backend but mostly the

00:19:38,390 --> 00:19:49,280
most users don't see the things we are

00:19:44,270 --> 00:19:51,890
doing there so I will concentrate here

00:19:49,280 --> 00:19:57,200
on the consignor stuff we did in the

00:19:51,890 --> 00:20:00,770
last year we replaced scope you as a

00:19:57,200 --> 00:20:03,429
tool for our container uploads to a

00:20:00,770 --> 00:20:03,429
registry

00:20:04,150 --> 00:20:14,940
the implemented container unpacking in

00:20:10,840 --> 00:20:17,650
layer layering on the server side and

00:20:14,940 --> 00:20:23,230
implemented the whole rest the whole

00:20:17,650 --> 00:20:27,159
docker registry protocol so OBS now can

00:20:23,230 --> 00:20:33,220
run as a talker registry natively and a

00:20:27,159 --> 00:20:35,620
notary so this is especially interesting

00:20:33,220 --> 00:20:45,190
when you run your own instance because

00:20:35,620 --> 00:20:48,850
saved a lot of disk space by this I

00:20:45,190 --> 00:20:55,360
don't know who has already used registry

00:20:48,850 --> 00:21:00,460
openSUSE work ok we now enhance the

00:20:55,360 --> 00:21:03,370
information which registry gives in the

00:21:00,460 --> 00:21:07,510
web front-end especially here you can

00:21:03,370 --> 00:21:09,909
see that you have a link to your

00:21:07,510 --> 00:21:15,570
building project where the container is

00:21:09,909 --> 00:21:18,490
built and now you also can choose

00:21:15,570 --> 00:21:26,080
apartment as your your tool of choice

00:21:18,490 --> 00:21:28,480
for using the docker containers yeah and

00:21:26,080 --> 00:21:30,760
that's from my site and now I hand over

00:21:28,480 --> 00:21:36,539
to Marco

00:21:30,760 --> 00:21:36,539
[Applause]

00:21:39,910 --> 00:21:46,670
hello my name is Marco most of you might

00:21:44,510 --> 00:21:50,540
know me from sitting behind those video

00:21:46,670 --> 00:21:54,320
tables but beside of that I'm the OSC

00:21:50,540 --> 00:21:57,050
maintainer and we see the vallabha and I

00:21:54,320 --> 00:22:00,560
make it really short because there is no

00:21:57,050 --> 00:22:05,740
big news we are on the current version

00:22:00,560 --> 00:22:09,920
is one 65.1 there was six releases since

00:22:05,740 --> 00:22:15,100
last year since I hold give gave the

00:22:09,920 --> 00:22:19,910
almost same talk on in in Prague we have

00:22:15,100 --> 00:22:21,640
146 commits since then which most most

00:22:19,910 --> 00:22:26,210
of them are just small stuff but

00:22:21,640 --> 00:22:28,400
nevertheless 146 commits and there were

00:22:26,210 --> 00:22:31,190
two big changes

00:22:28,400 --> 00:22:33,110
one is the who a crabber is no longer

00:22:31,190 --> 00:22:35,930
needed so we are not dependent on him

00:22:33,110 --> 00:22:38,330
anymore and the reason why we are not

00:22:35,930 --> 00:22:41,510
dependent on him anymore is we are

00:22:38,330 --> 00:22:47,510
pythons really compatible since the

00:22:41,510 --> 00:22:51,830
latest version yay it took a long time

00:22:47,510 --> 00:22:56,090
but at least we at least we made it so I

00:22:51,830 --> 00:22:59,660
have a lot of free time no not really

00:22:56,090 --> 00:23:02,330
because the the next things we will

00:22:59,660 --> 00:23:06,530
completely rewrite the password handling

00:23:02,330 --> 00:23:10,730
because it's a pain in yes don't it's

00:23:06,530 --> 00:23:13,340
not good because if you ever have tried

00:23:10,730 --> 00:23:17,030
using keyring I don't know have any one

00:23:13,340 --> 00:23:20,030
is you is using keyring with yeah yeah

00:23:17,030 --> 00:23:23,150
it's it's possible but it's it's not

00:23:20,030 --> 00:23:25,310
user-friendly let's say that way so this

00:23:23,150 --> 00:23:26,810
will be better than the complete setup

00:23:25,310 --> 00:23:29,270
process so the first time you start

00:23:26,810 --> 00:23:32,450
always you will be improved so that you

00:23:29,270 --> 00:23:34,640
get like you you have the choice should

00:23:32,450 --> 00:23:37,130
pass would be sort it all should be

00:23:34,640 --> 00:23:41,630
stored in the keyring something like

00:23:37,130 --> 00:23:43,610
that then the documentation as always

00:23:41,630 --> 00:23:46,050
needs to be improved if anyone is

00:23:43,610 --> 00:23:51,170
interested in writing documentation

00:23:46,050 --> 00:23:56,490
please come - I will come to you and

00:23:51,170 --> 00:23:58,710
what I realized while migrating to pison

00:23:56,490 --> 00:24:01,050
is that the test coverage in Python and

00:23:58,710 --> 00:24:04,590
in OSE is not very good we we test the

00:24:01,050 --> 00:24:07,380
the base library was where we mocked the

00:24:04,590 --> 00:24:11,809
back end calls which is which was nice

00:24:07,380 --> 00:24:15,090
because I I used this PI 2 to 3 script

00:24:11,809 --> 00:24:16,140
run it over OSE let the test read run

00:24:15,090 --> 00:24:18,780
everything works

00:24:16,140 --> 00:24:20,130
I was very cool I'm done five minutes I

00:24:18,780 --> 00:24:22,440
don't know what your problem is

00:24:20,130 --> 00:24:24,660
yeah but then I started using it and

00:24:22,440 --> 00:24:27,720
everything broke so we need better test

00:24:24,660 --> 00:24:31,380
coverage we need better way to test like

00:24:27,720 --> 00:24:35,010
a complete CLI test not only mocking the

00:24:31,380 --> 00:24:39,120
back end like but more like testing

00:24:35,010 --> 00:24:41,370
again against a real back end and of

00:24:39,120 --> 00:24:43,920
course there will be a lot of Python 3

00:24:41,370 --> 00:24:47,550
bug fixes coming so we will see a lot of

00:24:43,920 --> 00:24:51,900
releases like one 65.1

00:24:47,550 --> 00:24:54,720
dot 2.3.4 you name it until the pison 3

00:24:51,900 --> 00:24:57,000
branch is completely stable so if anyone

00:24:54,720 --> 00:25:00,030
of you is please use the Python 3 branch

00:24:57,000 --> 00:25:02,460
I am open to puck reports I'm happy to

00:25:00,030 --> 00:25:05,190
receive bugs because the more bugs I get

00:25:02,460 --> 00:25:07,320
the more I can fix and the stabler the

00:25:05,190 --> 00:25:12,960
more stable the Python script branch

00:25:07,320 --> 00:25:15,510
gets so that was from my side so

00:25:12,960 --> 00:25:19,410
questions I think this is not just for

00:25:15,510 --> 00:25:23,480
me this for everyone so if yeah if

00:25:19,410 --> 00:25:23,480
someone who is responsible for this talk

00:25:24,549 --> 00:25:31,029
I save you okay any question now thank

00:25:30,399 --> 00:25:37,719
you very much

00:25:31,029 --> 00:25:39,999
so before we please well I forgot one

00:25:37,719 --> 00:25:45,369
slide this in this table instead wait

00:25:39,999 --> 00:25:47,759
wait wait wait I'm trying to okay don't

00:25:45,369 --> 00:25:51,519
forget please join the beta prom tribal

00:25:47,759 --> 00:25:54,489
org and create issues and also review

00:25:51,519 --> 00:25:56,669
blog for the formal news thank you very

00:25:54,489 --> 00:25:56,669
much

00:25:56,860 --> 00:26:02,850

YouTube URL: https://www.youtube.com/watch?v=WcGznbdMryI


