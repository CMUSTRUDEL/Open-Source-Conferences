Title: openSUSE Conference 2019 - LoRa for the kernel
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2345-lora-for-the-kernel

Adding support for LPWA wireless technologies

At ELCE 2018 I presented a project to implement Linux kernel drivers for LoRa Low-Power Wide Area Network (LPWAN) wireless technology. The project is since evolving to cover more chipsets and other technologies. This is a brief overview of what is being worked on and how to participate. It will also explain how openSUSE Tumbleweed aarch64 has been used as base for most of the kernel development.

At ELCE 2018 I presented a project to implement Linux kernel drivers for LoRa Low-Power Wide Area Network (LPWAN) wireless technology. The project is since evolving to cover more chipsets and other technologies. This is a brief overview of what is being worked on and how to participate. It will also explain how openSUSE Tumbleweed aarch64 has been used as base for most of the kernel development.

Andreas FÃ¤rber
Captions: 
	00:00:05,930 --> 00:00:10,139
hello everyone we've sorted out the

00:00:08,700 --> 00:00:14,480
remaining hardware and software issues

00:00:10,139 --> 00:00:14,480
so let's slowly get started

00:00:30,080 --> 00:00:35,640
so hello my name is andreas fava most of

00:00:33,989 --> 00:00:37,440
you know me from talking about our

00:00:35,640 --> 00:00:39,780
boards and the hard when ableman

00:00:37,440 --> 00:00:41,699
at previous events them today I'm gonna

00:00:39,780 --> 00:00:44,760
talk about a slightly different topic

00:00:41,699 --> 00:00:47,879
but I am going to get back to arm in the

00:00:44,760 --> 00:00:49,800
end of this presentation I work at Souza

00:00:47,879 --> 00:00:51,989
labs as a project manager responsible

00:00:49,800 --> 00:00:55,829
for all our products on the ARM

00:00:51,989 --> 00:01:00,780
architecture the topic of today's talk

00:00:55,829 --> 00:01:03,899
is Laura and frequency shift keying

00:01:00,780 --> 00:01:08,039
radio technologies inside the Linux

00:01:03,899 --> 00:01:10,950
kernel in particular how I've been am

00:01:08,039 --> 00:01:15,149
developing such a new kernel technology

00:01:10,950 --> 00:01:17,130
and in general how to use not just arm

00:01:15,149 --> 00:01:24,990
boards but like anything really

00:01:17,130 --> 00:01:26,759
connected to such on boards at last

00:01:24,990 --> 00:01:28,530
year's event and possibly before that

00:01:26,759 --> 00:01:30,479
I've been speaking about the three

00:01:28,530 --> 00:01:33,179
dimensions that we've been working on so

00:01:30,479 --> 00:01:35,400
for one arm from time to time has been

00:01:33,179 --> 00:01:38,070
adding new CPU cores other vendors

00:01:35,400 --> 00:01:40,890
obviously as well then for a given CPU

00:01:38,070 --> 00:01:43,829
core there may be one or more companies

00:01:40,890 --> 00:01:46,890
actually implementing physical chips

00:01:43,829 --> 00:01:49,049
with that so that is kind of a one to

00:01:46,890 --> 00:01:52,020
end relationship between the cores to

00:01:49,049 --> 00:01:54,119
the Sox and then finally for a given

00:01:52,020 --> 00:01:56,130
chip that people can actually buy

00:01:54,119 --> 00:01:58,020
through their distributors or from the

00:01:56,130 --> 00:02:00,840
companies directly there will be any

00:01:58,020 --> 00:02:03,840
number of boards with varying number of

00:02:00,840 --> 00:02:07,500
connectors additional chipsets on there

00:02:03,840 --> 00:02:09,390
and expansion possibilities now that is

00:02:07,500 --> 00:02:11,070
the scope that we have been previously

00:02:09,390 --> 00:02:12,810
working on and we were usually pretty

00:02:11,070 --> 00:02:15,180
happy once we actually had the board

00:02:12,810 --> 00:02:16,560
booting up into openSUSE tumbleweed and

00:02:15,180 --> 00:02:18,780
have a prompt and have all the packages

00:02:16,560 --> 00:02:21,480
in place to be able to reproduce that

00:02:18,780 --> 00:02:23,579
but at that point well it's slightly

00:02:21,480 --> 00:02:25,380
boring because you have a tumbleweed

00:02:23,579 --> 00:02:27,660
system as you have pretty much anywhere

00:02:25,380 --> 00:02:30,570
else so the real value actually comes

00:02:27,660 --> 00:02:32,820
when you make use of the interfaces that

00:02:30,570 --> 00:02:35,370
those boards are offering that you would

00:02:32,820 --> 00:02:37,950
normally not have on you know any random

00:02:35,370 --> 00:02:42,840
notebook or other devices

00:02:37,950 --> 00:02:45,420
that you may be familiar with now the

00:02:42,840 --> 00:02:47,160
big question is the hardware has been

00:02:45,420 --> 00:02:49,500
out there for you to purchase for quite

00:02:47,160 --> 00:02:52,530
a long time how do we actually use this

00:02:49,500 --> 00:02:53,850
in openSUSE I will be diving first into

00:02:52,530 --> 00:02:56,130
this generally and then going

00:02:53,850 --> 00:03:03,630
specifically into those regular chip

00:02:56,130 --> 00:03:09,570
sets in general there are two different

00:03:03,630 --> 00:03:13,680
types of how the hardware presents

00:03:09,570 --> 00:03:16,500
itself to the Linux kernel one is a CPI

00:03:13,680 --> 00:03:18,690
as we have on all internal machines

00:03:16,500 --> 00:03:22,650
virtually the other one is the so-called

00:03:18,690 --> 00:03:25,800
device tree which is a tree hierarchical

00:03:22,650 --> 00:03:28,620
representation of data that is then read

00:03:25,800 --> 00:03:31,200
by the kernel in order to make decisions

00:03:28,620 --> 00:03:35,220
about what drivers to load and what

00:03:31,200 --> 00:03:39,210
specific settings to apply the so-called

00:03:35,220 --> 00:03:41,040
dtb also those device trees get compiled

00:03:39,210 --> 00:03:43,260
into a so called device tree blob that

00:03:41,040 --> 00:03:46,230
is in short the dtb and a device tree

00:03:43,260 --> 00:03:50,250
overlay is that like a dip that you

00:03:46,230 --> 00:03:53,489
apply to this base set of information on

00:03:50,250 --> 00:03:56,580
top in order to customize it to your

00:03:53,489 --> 00:03:59,160
needs now on the Raspberry Pi this is

00:03:56,580 --> 00:04:03,120
fairly easy and kind of well documented

00:03:59,160 --> 00:04:06,270
in that there is a text configuration

00:04:03,120 --> 00:04:10,260
file on openSUSE this will be extra

00:04:06,270 --> 00:04:11,970
convict or txt because convict or txt is

00:04:10,260 --> 00:04:14,160
provided by our packages and may

00:04:11,970 --> 00:04:17,880
actually get changed on updates of the

00:04:14,160 --> 00:04:20,870
packages provided by openSUSE in those

00:04:17,880 --> 00:04:24,690
text config files you can add a line

00:04:20,870 --> 00:04:26,970
called DT overlay and then specify the

00:04:24,690 --> 00:04:29,760
file name of the overlay that you

00:04:26,970 --> 00:04:32,160
actually wanted to apply on top of the

00:04:29,760 --> 00:04:35,760
overlay that on top of the device tree

00:04:32,160 --> 00:04:38,580
that it will be using in the first place

00:04:35,760 --> 00:04:40,320
I've run into a slightly odd limitation

00:04:38,580 --> 00:04:42,150
that nothing will warn about so if

00:04:40,320 --> 00:04:43,860
something goes wrong there there's no

00:04:42,150 --> 00:04:47,280
error it will still boot it will just

00:04:43,860 --> 00:04:49,620
not have those settings applied the file

00:04:47,280 --> 00:04:50,020
name needs to be sufficiently short so

00:04:49,620 --> 00:04:53,530
that

00:04:50,020 --> 00:04:55,090
this prefix notation or any parameters

00:04:53,530 --> 00:04:58,270
that you may want to add at the end of

00:04:55,090 --> 00:05:02,129
the line it is not longer than about 80

00:04:58,270 --> 00:05:04,360
characters once all those things are

00:05:02,129 --> 00:05:06,159
applied so either you can write it

00:05:04,360 --> 00:05:07,960
directly onto the SD card if you already

00:05:06,159 --> 00:05:09,909
have a tumbleweed system booting on that

00:05:07,960 --> 00:05:12,069
system you can edit that within the

00:05:09,909 --> 00:05:15,250
system then you need to reboot in order

00:05:12,069 --> 00:05:18,039
for them to take effect and you will see

00:05:15,250 --> 00:05:21,370
in the proc device tree file system

00:05:18,039 --> 00:05:23,979
whether the properties have changed in

00:05:21,370 --> 00:05:26,620
the way that you have I'm told it to and

00:05:23,979 --> 00:05:29,349
obviously check whether the drivers have

00:05:26,620 --> 00:05:31,960
been loaded by the kernel that is one

00:05:29,349 --> 00:05:35,919
way that unfortunately is specific to

00:05:31,960 --> 00:05:38,199
that family of wards now even on the

00:05:35,919 --> 00:05:40,360
Raspberry Pi we are using the u-boot

00:05:38,199 --> 00:05:42,280
bootloader as a second stage bootloader

00:05:40,360 --> 00:05:47,650
or third stage depending on how you

00:05:42,280 --> 00:05:49,629
count and by default there is a so

00:05:47,650 --> 00:05:52,000
called distribute mechanism that will

00:05:49,629 --> 00:05:54,310
iterate over the available boot devices

00:05:52,000 --> 00:05:55,930
check for what files are available on

00:05:54,310 --> 00:05:59,110
those boot devices in that particular

00:05:55,930 --> 00:06:02,289
order and then normally and because we

00:05:59,110 --> 00:06:05,080
have the efi enabled grub bootloader on

00:06:02,289 --> 00:06:08,380
our media it will load grub however this

00:06:05,080 --> 00:06:12,969
can be preempted by having a booted scr

00:06:08,380 --> 00:06:17,409
file on there that's a text script file

00:06:12,969 --> 00:06:19,630
converted with a binary header that

00:06:17,409 --> 00:06:22,569
contains command that would then be

00:06:19,630 --> 00:06:26,289
executed either before or instead of the

00:06:22,569 --> 00:06:29,710
commands that it would do by default so

00:06:26,289 --> 00:06:33,039
that is one possibility to simply

00:06:29,710 --> 00:06:35,039
duplicate the relevant commands that you

00:06:33,039 --> 00:06:38,289
need for booting letters in particular

00:06:35,039 --> 00:06:41,770
loading the kernel loading the device

00:06:38,289 --> 00:06:44,620
tree loading the init Rd and then

00:06:41,770 --> 00:06:49,389
specifying a command to start executing

00:06:44,620 --> 00:06:51,849
it and then before actually executing it

00:06:49,389 --> 00:06:53,860
you can in that script insert additional

00:06:51,849 --> 00:06:57,340
commands that it would not execute by

00:06:53,860 --> 00:06:58,889
default so for one normally we would

00:06:57,340 --> 00:07:02,189
just be passing

00:06:58,889 --> 00:07:05,069
and variable containing an address to

00:07:02,189 --> 00:07:07,499
the boot command for 64-bit on that

00:07:05,069 --> 00:07:11,249
would be the boot I command for 32-bit

00:07:07,499 --> 00:07:13,080
arm usually the boot Z command in this

00:07:11,249 --> 00:07:14,939
case if we want to actually mess with a

00:07:13,080 --> 00:07:17,069
device tree we need to first tell it

00:07:14,939 --> 00:07:19,770
what the address of the device tree is

00:07:17,069 --> 00:07:22,759
before actually booting that is the FD T

00:07:19,770 --> 00:07:26,490
add row command as an address and then

00:07:22,759 --> 00:07:28,770
afterwards we can do any things with

00:07:26,490 --> 00:07:31,199
further FDG commands in particular we

00:07:28,770 --> 00:07:34,139
can load additional gto files into

00:07:31,199 --> 00:07:38,789
memory and then apply them to the base d

00:07:34,139 --> 00:07:42,659
DB file with this FD t apply command

00:07:38,789 --> 00:07:45,479
down there so one thing to be aware of

00:07:42,659 --> 00:07:48,090
is that the behavior is vastly different

00:07:45,479 --> 00:07:51,060
from the Raspberry Pi in that if

00:07:48,090 --> 00:07:52,949
anything goes wrong like if the syntax

00:07:51,060 --> 00:07:55,199
is wrong or it doesn't find what you

00:07:52,949 --> 00:07:57,719
actually want to do there this will

00:07:55,199 --> 00:08:00,029
break and the base device tree will be

00:07:57,719 --> 00:08:02,389
in an unusable shape so you'll need to

00:08:00,029 --> 00:08:05,810
start from scratch or reboot whatever

00:08:02,389 --> 00:08:08,430
you are doing in your particular setup

00:08:05,810 --> 00:08:10,139
once the script has been compiled and

00:08:08,430 --> 00:08:11,819
it's incomplete is in place you can

00:08:10,139 --> 00:08:14,159
simply reboot the board and those

00:08:11,819 --> 00:08:15,689
settings will start to take effect and

00:08:14,159 --> 00:08:19,379
you can again check in the running

00:08:15,689 --> 00:08:21,389
system whether everything is the way you

00:08:19,379 --> 00:08:23,270
wanted it to look and if necessary an

00:08:21,389 --> 00:08:27,599
iterate on what exactly it's been doing

00:08:23,270 --> 00:08:29,909
now if all else fails for example

00:08:27,599 --> 00:08:31,830
because you have at Jana Corrie dk2 as a

00:08:29,909 --> 00:08:34,019
boot loader instead of you boot or

00:08:31,830 --> 00:08:36,029
because you have a very ancient you boot

00:08:34,019 --> 00:08:39,029
that does not have those fdt commands

00:08:36,029 --> 00:08:41,849
enabled as a last resort pretty much it

00:08:39,029 --> 00:08:44,310
is possible to specify a device tree

00:08:41,849 --> 00:08:46,589
with grub there is a device tree command

00:08:44,310 --> 00:08:49,440
that can be used to specify such a dtp

00:08:46,589 --> 00:08:52,230
file however this is not an overlay file

00:08:49,440 --> 00:08:56,209
so this is really the device tree that

00:08:52,230 --> 00:08:58,890
Linux will be using directly so for one

00:08:56,209 --> 00:09:01,850
the bootloader always has an opportunity

00:08:58,890 --> 00:09:07,440
to modify any device tree that it uses

00:09:01,850 --> 00:09:09,360
as an input and for example it can use a

00:09:07,440 --> 00:09:11,440
random number generator in order to

00:09:09,360 --> 00:09:13,750
generate an offset

00:09:11,440 --> 00:09:17,500
use for Colonel address space layout

00:09:13,750 --> 00:09:20,020
randomization if you provided a fixed

00:09:17,500 --> 00:09:22,240
dtb then you are in control of what

00:09:20,020 --> 00:09:25,330
exactly the colonel will see and nothing

00:09:22,240 --> 00:09:28,690
else will change after that so it

00:09:25,330 --> 00:09:32,370
becomes your responsibility to make sure

00:09:28,690 --> 00:09:36,210
that this dtp file is in a same shape

00:09:32,370 --> 00:09:40,090
custom CFG is a very convenient way to

00:09:36,210 --> 00:09:41,920
have those additional grub commands be

00:09:40,090 --> 00:09:46,480
integrated into our regular zuzu

00:09:41,920 --> 00:09:49,090
boot flows in that you can just run the

00:09:46,480 --> 00:09:51,190
config and zouzou will take here yes

00:09:49,090 --> 00:09:53,110
tools and grab tools will take care of

00:09:51,190 --> 00:09:54,580
generating a menu with the various

00:09:53,110 --> 00:09:58,990
kernel versions that you have installed

00:09:54,580 --> 00:10:01,840
and for example before or after that

00:09:58,990 --> 00:10:03,880
menu it would just be executing any

00:10:01,840 --> 00:10:04,680
commands that you have specified by me

00:10:03,880 --> 00:10:06,760
this way

00:10:04,680 --> 00:10:08,800
obviously one handy would think that I

00:10:06,760 --> 00:10:11,110
always do is also insert an echo to

00:10:08,800 --> 00:10:17,380
actually make sure that it is doing what

00:10:11,110 --> 00:10:21,250
I want when I want and I've been talking

00:10:17,380 --> 00:10:22,690
about a lot what you do with the dtb o

00:10:21,250 --> 00:10:24,610
or dtb file

00:10:22,690 --> 00:10:27,490
how do you actually get those files for

00:10:24,610 --> 00:10:31,200
one the raspberry pi comes with a number

00:10:27,490 --> 00:10:35,620
of pre generated DTP o files for certain

00:10:31,200 --> 00:10:37,510
frequently used expansion boards but it

00:10:35,620 --> 00:10:41,170
is also very easy to write this on their

00:10:37,510 --> 00:10:43,870
own with a simple text syntax the main

00:10:41,170 --> 00:10:45,940
things that you will need to do for any

00:10:43,870 --> 00:10:50,500
given node to be it you know a spy now

00:10:45,940 --> 00:10:52,870
what I square see UART pwm whatever it

00:10:50,500 --> 00:10:55,270
is in the end is that you need to make

00:10:52,870 --> 00:10:57,490
sure that the specific function you want

00:10:55,270 --> 00:11:01,180
to use is actually enabled you do that

00:10:57,490 --> 00:11:03,430
by overriding the status property and in

00:11:01,180 --> 00:11:05,500
some cases it may be necessary to assure

00:11:03,430 --> 00:11:07,630
that also the so called pin control

00:11:05,500 --> 00:11:10,360
configuration is set that means

00:11:07,630 --> 00:11:12,460
switching between whether the physical

00:11:10,360 --> 00:11:14,530
pin is actually going to be just an

00:11:12,460 --> 00:11:16,600
input output or whether it has the

00:11:14,530 --> 00:11:17,850
special function like for example them

00:11:16,600 --> 00:11:21,750
those mentioned here

00:11:17,850 --> 00:11:24,329
by UART whatever exactly once you have

00:11:21,750 --> 00:11:27,509
the driver M enabled the second task is

00:11:24,329 --> 00:11:29,519
to make a driver specific node addition

00:11:27,509 --> 00:11:31,440
to there so if you have a serial port

00:11:29,519 --> 00:11:33,990
you can directly in via the serial

00:11:31,440 --> 00:11:38,310
device bus and attach drivers to

00:11:33,990 --> 00:11:41,819
interface with the UART or obviously for

00:11:38,310 --> 00:11:44,190
spy nodes you can have just regular spy

00:11:41,819 --> 00:11:46,050
drivers that are interfacing with the

00:11:44,190 --> 00:11:52,319
hardware registers and transfers

00:11:46,050 --> 00:11:54,660
directly and again it depends on the

00:11:52,319 --> 00:11:56,040
individual driver what exactly needs to

00:11:54,660 --> 00:11:58,980
be specified there usually there is

00:11:56,040 --> 00:12:01,100
documentation for my new stuff and that

00:11:58,980 --> 00:12:03,420
is something we're still working on but

00:12:01,100 --> 00:12:09,319
usually examples are available that can

00:12:03,420 --> 00:12:14,850
be copied from now to the actual project

00:12:09,319 --> 00:12:20,399
at some point you will have on the one

00:12:14,850 --> 00:12:23,069
hand your board running our Linux and on

00:12:20,399 --> 00:12:25,860
the other hand some random chipset so

00:12:23,069 --> 00:12:28,110
for example this is a clique board that

00:12:25,860 --> 00:12:30,630
implements the lower run radio standard

00:12:28,110 --> 00:12:32,790
and the question is if you have the

00:12:30,630 --> 00:12:34,800
hardware and you have the board you

00:12:32,790 --> 00:12:36,689
might have either a connector or there's

00:12:34,800 --> 00:12:40,740
various adapters available for example

00:12:36,689 --> 00:12:45,870
to go from raspberry pi 40 pin pin out

00:12:40,740 --> 00:12:50,130
to Arduino pin out or this click pin out

00:12:45,870 --> 00:12:53,189
microbus pin out sorry or XB or any

00:12:50,130 --> 00:12:55,470
number of vendor specific variants and

00:12:53,189 --> 00:13:01,560
the big question is how can you then

00:12:55,470 --> 00:13:04,500
make use of this hardware there's before

00:13:01,560 --> 00:13:07,680
I get to the details of that I'll be

00:13:04,500 --> 00:13:13,769
talking a bit more about variants of the

00:13:07,680 --> 00:13:16,560
lore Aradia modules so this one that I

00:13:13,769 --> 00:13:18,769
was just holding up over here is the

00:13:16,560 --> 00:13:21,589
middle variant where you have a small

00:13:18,769 --> 00:13:24,589
microcontroller on board of the

00:13:21,589 --> 00:13:26,480
expansion board this is then driving the

00:13:24,589 --> 00:13:30,730
actual radio communication and you are

00:13:26,480 --> 00:13:34,339
communicating in this case via a UART

00:13:30,730 --> 00:13:35,839
and it is up to that microcontroller

00:13:34,339 --> 00:13:38,809
farmer provided by the vendor to

00:13:35,839 --> 00:13:41,809
determine how exactly you speak to that

00:13:38,809 --> 00:13:43,639
particular module the reason that many

00:13:41,809 --> 00:13:45,379
vendors do this is because it allows

00:13:43,639 --> 00:13:47,569
them to certify the firmware that

00:13:45,379 --> 00:13:49,819
they've developed and afterwards you can

00:13:47,569 --> 00:13:53,389
use that in various regulatory region of

00:13:49,819 --> 00:13:54,860
the world and you know not have to deal

00:13:53,389 --> 00:13:57,499
with that yourself

00:13:54,860 --> 00:14:00,019
whereas like the original class of

00:13:57,499 --> 00:14:02,990
devices that I was starting with have

00:14:00,019 --> 00:14:04,870
the actual chipset directly on the board

00:14:02,990 --> 00:14:07,519
without any additional microcontroller

00:14:04,870 --> 00:14:09,259
and that means that in many cases it's

00:14:07,519 --> 00:14:13,519
going to be the serial peripheral

00:14:09,259 --> 00:14:16,699
interface or you arts in some cases it

00:14:13,519 --> 00:14:33,110
might even be via a USB connection maybe

00:14:16,699 --> 00:14:35,000
use piece PI or USB UART and for that it

00:14:33,110 --> 00:14:37,790
will be exposing directly the full

00:14:35,000 --> 00:14:39,680
features of the physical layer of the

00:14:37,790 --> 00:14:42,259
radio communication so that means you

00:14:39,680 --> 00:14:44,180
can send out various packets but if you

00:14:42,259 --> 00:14:46,129
want to have a specific protocol like

00:14:44,180 --> 00:14:49,579
Laura Wan then you need to have a

00:14:46,129 --> 00:14:53,050
so-called software mac media access

00:14:49,579 --> 00:14:55,550
control layer driver that is

00:14:53,050 --> 00:14:57,920
implementing the actual and packet

00:14:55,550 --> 00:14:59,509
frames and structure of that particular

00:14:57,920 --> 00:15:02,809
protocol that you want to drive in any

00:14:59,509 --> 00:15:04,699
addressing and related functionality and

00:15:02,809 --> 00:15:07,040
finally what you can see on the very

00:15:04,699 --> 00:15:09,500
right in grey is that there are also

00:15:07,040 --> 00:15:11,689
other modules that you will find that

00:15:09,500 --> 00:15:14,449
are outside of this category that we can

00:15:11,689 --> 00:15:18,620
use with Linux in that they are actually

00:15:14,449 --> 00:15:20,480
meant to have the user install custom

00:15:18,620 --> 00:15:22,160
firmware on a microcontroller and

00:15:20,480 --> 00:15:25,009
usually on those microcontrollers there

00:15:22,160 --> 00:15:31,029
is insufficient RAM to actually run them

00:15:25,009 --> 00:15:31,029
Linux now how to interface

00:15:32,340 --> 00:15:39,280
this is trying to depict various

00:15:35,440 --> 00:15:41,590
subsystems of the Linux kernel so like

00:15:39,280 --> 00:15:43,780
you know memory management scheduling

00:15:41,590 --> 00:15:45,970
and so on and so on and then you have

00:15:43,780 --> 00:15:49,210
certain technology specific subsystems

00:15:45,970 --> 00:15:52,750
like for example spy TTY and husb where

00:15:49,210 --> 00:15:57,550
you have certain generic drivers that

00:15:52,750 --> 00:16:00,340
will allow you to expose so that will

00:15:57,550 --> 00:16:04,390
expose a device to use a space allowing

00:16:00,340 --> 00:16:06,310
you from user space to then access via

00:16:04,390 --> 00:16:08,860
the standard Zeus calls and while

00:16:06,310 --> 00:16:12,340
gilepsy and provided operations with

00:16:08,860 --> 00:16:14,440
those devices in particular what you

00:16:12,340 --> 00:16:16,990
will find a lot is like github projects

00:16:14,440 --> 00:16:19,300
that will be using spy dev in order to

00:16:16,990 --> 00:16:21,940
send and receive messages via these

00:16:19,300 --> 00:16:24,190
fibers as well as what most of you will

00:16:21,940 --> 00:16:27,130
probably know is if you have like serial

00:16:24,190 --> 00:16:28,870
console or a you know other you are

00:16:27,130 --> 00:16:31,660
connected devices connected you will

00:16:28,870 --> 00:16:34,450
have some form of tty device and that

00:16:31,660 --> 00:16:36,700
you can then access to via those

00:16:34,450 --> 00:16:40,330
commands and you know right from random

00:16:36,700 --> 00:16:42,340
user space programs what I've been

00:16:40,330 --> 00:16:44,080
working on instead is to have drivers

00:16:42,340 --> 00:16:45,600
inside the Linux kernel that will

00:16:44,080 --> 00:16:49,120
abstract those vendor-specific

00:16:45,600 --> 00:16:51,670
interfaces so just like you have an eth0

00:16:49,120 --> 00:16:53,160
device or whatever it may be obscured

00:16:51,670 --> 00:16:55,720
depending on the system configuration

00:16:53,160 --> 00:16:58,480
you will have network interfaces that

00:16:55,720 --> 00:17:00,730
expose and that allows you to create a

00:16:58,480 --> 00:17:03,730
socket which in turn will be using

00:17:00,730 --> 00:17:08,070
buffers to manage and move around

00:17:03,730 --> 00:17:11,110
packets both outgoing and incoming and

00:17:08,070 --> 00:17:14,170
provide a interface that is specific to

00:17:11,110 --> 00:17:16,030
this radio technology as opposed to one

00:17:14,170 --> 00:17:18,780
of those many particular chipsets for

00:17:16,030 --> 00:17:18,780
that technology

00:17:19,650 --> 00:17:25,459
on the software side those socket layers

00:17:22,760 --> 00:17:28,710
then it's the current state of

00:17:25,459 --> 00:17:33,240
discussion and implementation would be

00:17:28,710 --> 00:17:37,920
using the MPF packet protocol family on

00:17:33,240 --> 00:17:39,990
down on the left side over here to send

00:17:37,920 --> 00:17:42,480
raw Laura packets which allows you to

00:17:39,990 --> 00:17:44,460
send data from one board to another

00:17:42,480 --> 00:17:46,920
board you know just send and receive

00:17:44,460 --> 00:17:50,790
arbitrary data in any way that you want

00:17:46,920 --> 00:17:54,600
to format it and as an alternative

00:17:50,790 --> 00:17:57,480
besides that there has been work ongoing

00:17:54,600 --> 00:17:59,610
on developing such a soft Mac for Laura

00:17:57,480 --> 00:18:02,429
Wong as a module that would then be

00:17:59,610 --> 00:18:04,740
translating from a higher level package

00:18:02,429 --> 00:18:09,540
family Laura Wan with two different

00:18:04,740 --> 00:18:13,140
modes in that case either directly to

00:18:09,540 --> 00:18:16,890
Hardware specific command interfaces

00:18:13,140 --> 00:18:19,740
like 80 commands or other forms of

00:18:16,890 --> 00:18:23,610
communication or to translate that to

00:18:19,740 --> 00:18:24,500
the existing lower driver stack on the

00:18:23,610 --> 00:18:28,679
lower layer

00:18:24,500 --> 00:18:33,210
similarly them just like you have the

00:18:28,679 --> 00:18:35,000
config 802 11 module for Wi-Fi there is

00:18:33,210 --> 00:18:37,700
a conflict Laura module in the works

00:18:35,000 --> 00:18:40,110
which allows you to set certain

00:18:37,700 --> 00:18:42,809
configuration details by exposing and

00:18:40,110 --> 00:18:44,880
netlink Laura interface such as for

00:18:42,809 --> 00:18:46,770
example setting the frequency getting

00:18:44,880 --> 00:18:49,710
the frequency setting the spreading

00:18:46,770 --> 00:18:51,840
factor bandwidth other aspect of the

00:18:49,710 --> 00:18:55,440
technology this is being worked on at

00:18:51,840 --> 00:18:57,420
the moment and the idea is to have the

00:18:55,440 --> 00:19:00,270
same thing also for Laura 1 so that on

00:18:57,420 --> 00:19:03,770
chops you have an abstract layer that is

00:19:00,270 --> 00:19:06,150
modeling things like data rates and

00:19:03,770 --> 00:19:08,820
configurations on this higher level that

00:19:06,150 --> 00:19:12,179
will then translate directly to either

00:19:08,820 --> 00:19:15,570
the hardware mac layer over here or to

00:19:12,179 --> 00:19:20,280
the existing Anna Laura interface for

00:19:15,570 --> 00:19:23,400
the MS of Mac chipsets what can you do

00:19:20,280 --> 00:19:27,240
with that well you can as the user

00:19:23,400 --> 00:19:29,040
directly use the Laura interface to send

00:19:27,240 --> 00:19:32,080
whatever packages you want peer-to-peer

00:19:29,040 --> 00:19:33,279
there's also some proprietary and

00:19:32,080 --> 00:19:35,769
protocols that someone could

00:19:33,279 --> 00:19:37,600
theoretically implement but that we

00:19:35,769 --> 00:19:40,510
cannot implement ourselves as a GPL

00:19:37,600 --> 00:19:43,240
implementation Robin was already

00:19:40,510 --> 00:19:45,700
mentioned on top of laura1 you can drive

00:19:43,240 --> 00:19:49,690
again all kinds of and payloads yourself

00:19:45,700 --> 00:19:54,789
but most of the lower chipsets also AM

00:19:49,690 --> 00:19:57,130
expose and FSK modulation that's a

00:19:54,789 --> 00:20:00,340
different kind of transmitting the data

00:19:57,130 --> 00:20:03,909
so basically you have amplitude

00:20:00,340 --> 00:20:05,970
frequency and phase as the three and

00:20:03,909 --> 00:20:10,710
access that you can modulate data on or

00:20:05,970 --> 00:20:14,950
combinations of them Laura and chipsets

00:20:10,710 --> 00:20:18,970
buys MT exposed both as alternatively

00:20:14,950 --> 00:20:23,049
configured modes there is a large range

00:20:18,970 --> 00:20:25,779
of protocols that are based on FSK some

00:20:23,049 --> 00:20:30,580
in the home automation sector for

00:20:25,779 --> 00:20:32,289
example yeah you can read some of those

00:20:30,580 --> 00:20:37,299
names here I'm not going to go into all

00:20:32,289 --> 00:20:39,000
of them ble M depending on which

00:20:37,299 --> 00:20:41,679
frequency spectrum we're thinking on so

00:20:39,000 --> 00:20:44,529
Laura usually is being used in the sub

00:20:41,679 --> 00:20:46,570
gigahertz spectrum but FSK can also be

00:20:44,529 --> 00:20:48,909
used in the 2.4 gigahertz spectrum for

00:20:46,570 --> 00:20:51,700
instance that's where a Bluetooth

00:20:48,909 --> 00:20:54,970
low-energy M is located and there is

00:20:51,700 --> 00:20:57,730
actually some chipsets that have like

00:20:54,970 --> 00:21:01,649
three of those modes and implemented in

00:20:57,730 --> 00:21:06,159
one module as well as a number of not

00:21:01,649 --> 00:21:08,409
GPL or at least either not documented or

00:21:06,159 --> 00:21:11,649
not legally implementable as GPL

00:21:08,409 --> 00:21:15,549
technologies that are listed here as

00:21:11,649 --> 00:21:20,200
well as okay is an amplitude based and

00:21:15,549 --> 00:21:22,210
very simple modulation and in the 2.4

00:21:20,200 --> 00:21:25,210
gigahertz and lower chipset there's also

00:21:22,210 --> 00:21:27,639
what they call the fast long range

00:21:25,210 --> 00:21:30,039
coding as an additional modulation

00:21:27,639 --> 00:21:34,009
technology

00:21:30,039 --> 00:21:36,200
netlink operations could use people that

00:21:34,009 --> 00:21:38,230
either propose interfaces or actually

00:21:36,200 --> 00:21:41,779
implement them that is something that

00:21:38,230 --> 00:21:44,600
has been worked on in well a number of

00:21:41,779 --> 00:21:51,080
the last weeks since the native

00:21:44,600 --> 00:21:54,289
conference so for the generic interface

00:21:51,080 --> 00:21:58,369
as well as one particular chipset it

00:21:54,289 --> 00:22:00,440
usually takes well one night to

00:21:58,369 --> 00:22:02,119
implement one or two of those operations

00:22:00,440 --> 00:22:04,850
just for one chipset and there's many

00:22:02,119 --> 00:22:07,100
more that are in the work so over time

00:22:04,850 --> 00:22:08,809
we'll need to complete the existing

00:22:07,100 --> 00:22:11,059
driver implementations or add new

00:22:08,809 --> 00:22:14,119
implementations for whatever chipset it

00:22:11,059 --> 00:22:15,980
is that you have access to in order to

00:22:14,119 --> 00:22:17,869
make use of the drivers for various

00:22:15,980 --> 00:22:20,299
boards and combination of boards

00:22:17,869 --> 00:22:24,200
adapters expansion boards and chipsets

00:22:20,299 --> 00:22:28,009
one always needs those DT snippets in

00:22:24,200 --> 00:22:33,320
theory yes a CPI is another technology

00:22:28,009 --> 00:22:37,820
that could be used but that currently is

00:22:33,320 --> 00:22:41,690
not implemented testing is always needed

00:22:37,820 --> 00:22:43,580
over time to catch errors we have open

00:22:41,690 --> 00:22:45,409
design discussion on how to act to do

00:22:43,580 --> 00:22:48,200
things where decisions need to be taken

00:22:45,409 --> 00:22:51,139
and in some cases testing has resulted

00:22:48,200 --> 00:22:53,989
in entirely unrelated problems in the

00:22:51,139 --> 00:22:57,019
kernel that simply have become hurdles

00:22:53,989 --> 00:22:59,720
like for example that the clock driver

00:22:57,019 --> 00:23:05,299
interface simply locks up when called

00:22:59,720 --> 00:23:06,889
from certain operations on platforms but

00:23:05,299 --> 00:23:11,570
not on also that it wasn't initially

00:23:06,889 --> 00:23:13,999
noticed so increasing that base will

00:23:11,570 --> 00:23:16,549
certainly be a good thing there is a new

00:23:13,999 --> 00:23:19,820
mailing list available for this Linux LP

00:23:16,549 --> 00:23:22,639
one on infrared there is also a Laura

00:23:19,820 --> 00:23:25,170
IAC channel available and there are

00:23:22,639 --> 00:23:27,540
previous presentations of

00:23:25,170 --> 00:23:29,910
with more details on the technical

00:23:27,540 --> 00:23:33,090
implementation and any particular open

00:23:29,910 --> 00:23:35,220
issues and feel free to catch me after

00:23:33,090 --> 00:23:36,960
this talk or I'm late during the

00:23:35,220 --> 00:23:39,660
conference for more detail discussions

00:23:36,960 --> 00:23:43,770
now moving on to how this has actually

00:23:39,660 --> 00:23:45,750
been developed in general these are

00:23:43,770 --> 00:23:47,490
basically the choices that people have

00:23:45,750 --> 00:23:50,670
if you want to develop a new kernel

00:23:47,490 --> 00:23:54,060
driver for one you can always just get

00:23:50,670 --> 00:23:56,400
the original Linux git checkout compile

00:23:54,060 --> 00:23:58,830
it on an arm board or cross compile it

00:23:56,400 --> 00:24:00,720
on your Intel machine deployed some way

00:23:58,830 --> 00:24:03,930
by you know copying over the files to

00:24:00,720 --> 00:24:06,720
that system the alternative is to take

00:24:03,930 --> 00:24:08,970
the kernel source git repository that we

00:24:06,720 --> 00:24:11,190
are using to build the district ronald's

00:24:08,970 --> 00:24:12,990
you could in theory throw a couple of

00:24:11,190 --> 00:24:15,360
patches into there and have them build

00:24:12,990 --> 00:24:16,740
by the OBS infrastructure then you have

00:24:15,360 --> 00:24:18,960
a package that you can just easily

00:24:16,740 --> 00:24:21,090
install but you know fiddling that in

00:24:18,960 --> 00:24:23,940
each time is going to be work that so

00:24:21,090 --> 00:24:25,800
far I have not engaged in and then a

00:24:23,940 --> 00:24:29,340
third option that I have been using

00:24:25,800 --> 00:24:31,950
extensively is that I'm in addition to

00:24:29,340 --> 00:24:33,390
the kernel default or kernel LP kernels

00:24:31,950 --> 00:24:36,210
that we are building for the distro

00:24:33,390 --> 00:24:38,400
they're actually accompanying kernel

00:24:36,210 --> 00:24:42,090
default develop packages and a current

00:24:38,400 --> 00:24:44,520
avail package that includes all the

00:24:42,090 --> 00:24:47,400
intermediate binary files and headers

00:24:44,520 --> 00:24:50,220
needed for kernel development on that

00:24:47,400 --> 00:24:53,250
particular board with our kernel sources

00:24:50,220 --> 00:24:57,720
and you can then use that to build

00:24:53,250 --> 00:24:59,640
modules locally and on that system and

00:24:57,720 --> 00:25:02,370
simply insert them into the kernel it

00:24:59,640 --> 00:25:05,570
will show a tape message but well what

00:25:02,370 --> 00:25:08,640
do we care the alternative would be to

00:25:05,570 --> 00:25:11,580
put this into a spec file again you know

00:25:08,640 --> 00:25:15,090
package one big or multiple patches

00:25:11,580 --> 00:25:17,880
apply them to sources and then build a

00:25:15,090 --> 00:25:20,340
KMP package in OBS and again install

00:25:17,880 --> 00:25:22,710
such a KMP package in addition to the

00:25:20,340 --> 00:25:27,690
kernel package that you already have

00:25:22,710 --> 00:25:30,150
installed in my case I had a number of

00:25:27,690 --> 00:25:33,300
arm also mips ports and other

00:25:30,150 --> 00:25:34,539
architectures i'm around and depending

00:25:33,300 --> 00:25:36,839
on

00:25:34,539 --> 00:25:41,379
the board obviously we don't have a

00:25:36,839 --> 00:25:42,820
distribution for for openSUSE so there

00:25:41,379 --> 00:25:44,799
I've been just cross compiling at

00:25:42,820 --> 00:25:47,979
upstream kernel and testing that

00:25:44,799 --> 00:25:52,179
directly for the arm boards the approach

00:25:47,979 --> 00:25:54,609
that I was just mentioning for that

00:25:52,179 --> 00:25:57,609
purpose there is a github repository of

00:25:54,609 --> 00:26:01,289
mine that has a make file and this make

00:25:57,609 --> 00:26:03,989
file automates if you just run make

00:26:01,289 --> 00:26:07,239
reading out the current kernel version

00:26:03,989 --> 00:26:12,579
using that particular directory that we

00:26:07,239 --> 00:26:15,699
have in order to build the local tree of

00:26:12,579 --> 00:26:17,769
kernel modules against that the current

00:26:15,699 --> 00:26:20,259
requirement is it needs to be a kernel

00:26:17,769 --> 00:26:23,190
420 or newer so it doesn't work with

00:26:20,259 --> 00:26:26,109
leap only with recent tumbleweed and

00:26:23,190 --> 00:26:29,469
then yes there is a kernel Oracle

00:26:26,109 --> 00:26:32,649
repository with some already posted

00:26:29,469 --> 00:26:36,579
patches staged for Laura drivers as well

00:26:32,649 --> 00:26:39,219
as M FSK there sometimes I'm ahead of

00:26:36,579 --> 00:26:40,929
myself and have queue of new things in

00:26:39,219 --> 00:26:43,959
my private github repository that I

00:26:40,929 --> 00:26:46,389
still need to send out and all those

00:26:43,959 --> 00:26:51,459
ports then have basically the same

00:26:46,389 --> 00:26:53,469
drivers installed and I can then use one

00:26:51,459 --> 00:26:56,169
of those boards in order to send via one

00:26:53,469 --> 00:26:59,129
of those interfaces and try to receive

00:26:56,169 --> 00:27:01,929
that data on the other boards and

00:26:59,129 --> 00:27:04,449
currently that is being done by using

00:27:01,929 --> 00:27:07,359
debug output from the kernel I'm on

00:27:04,449 --> 00:27:10,089
those boards and since the receive path

00:27:07,359 --> 00:27:12,659
on most of the drivers is not yet fully

00:27:10,089 --> 00:27:12,659
implemented

00:27:14,140 --> 00:27:21,340
so a number of people helped make this

00:27:17,470 --> 00:27:23,559
happen Ben Witten from company Laird

00:27:21,340 --> 00:27:26,440
they do gateways has been contributing

00:27:23,559 --> 00:27:32,890
to the Essex 13:01 Linux driver as well

00:27:26,440 --> 00:27:39,760
as some volunteers in Taiwan chan

00:27:32,890 --> 00:27:45,190
han-pan and in as well as others in in

00:27:39,760 --> 00:27:47,200
Germany and a number of sorry that was

00:27:45,190 --> 00:27:51,190
here the company I was just talking

00:27:47,200 --> 00:27:53,620
about and a number of other vendors have

00:27:51,190 --> 00:27:55,570
helped us out in providing hardware and

00:27:53,620 --> 00:27:57,580
to allow for a broader testing of those

00:27:55,570 --> 00:28:00,520
drivers and creating more drivers and

00:27:57,580 --> 00:28:02,280
finding an abstract interface that fits

00:28:00,520 --> 00:28:05,650
all those various vendor specific

00:28:02,280 --> 00:28:08,140
interfaces so thank you again to those

00:28:05,650 --> 00:28:10,299
people who have made that happen and if

00:28:08,140 --> 00:28:12,760
you have hardware from companies that is

00:28:10,299 --> 00:28:14,160
not listed here just let me know or talk

00:28:12,760 --> 00:28:16,630
to those companies whether they may be

00:28:14,160 --> 00:28:19,630
willing and interested to participate as

00:28:16,630 --> 00:28:21,870
well having talked a lot about arm

00:28:19,630 --> 00:28:26,080
boards already I'll be giving a couple

00:28:21,870 --> 00:28:28,750
updates as a bonus here so for one toast

00:28:26,080 --> 00:28:31,630
Duva has been working on the only makes

00:28:28,750 --> 00:28:34,179
Terrace 1m notebook that's a notebook

00:28:31,630 --> 00:28:38,230
kit that you assemble yourself based on

00:28:34,179 --> 00:28:39,700
the Allwinner a 64 am system on chip he

00:28:38,230 --> 00:28:41,500
has been actively working on up

00:28:39,700 --> 00:28:43,179
streaming you would support for this

00:28:41,500 --> 00:28:45,940
board so that we have the irregular

00:28:43,179 --> 00:28:50,770
openSUSE tumbleweed workflow working on

00:28:45,940 --> 00:28:52,330
that one in addition the please so this

00:28:50,770 --> 00:28:55,410
is toast and over here can we have a

00:28:52,330 --> 00:28:55,410
round of applause for him please

00:28:56,809 --> 00:29:04,049
so looks like a notebook behaves like a

00:29:00,330 --> 00:29:11,490
notebook this is it and as you can see

00:29:04,049 --> 00:29:14,460
it is running Linux I just updated the

00:29:11,490 --> 00:29:16,260
regular way to from 15 0 to 15 1 it's

00:29:14,460 --> 00:29:18,570
running a custom car although I'm

00:29:16,260 --> 00:29:20,580
currently in the process of pushing the

00:29:18,570 --> 00:29:23,160
final patch series upstream but

00:29:20,580 --> 00:29:26,940
otherwise it's an upstream 5.2 connell

00:29:23,160 --> 00:29:32,580
and regular arm 64

00:29:26,940 --> 00:29:36,570
openSUSE leap 15 1 running there I would

00:29:32,580 --> 00:29:39,299
assume that in 15.1 probably the network

00:29:36,570 --> 00:29:42,740
drivers or something would be lacking or

00:29:39,299 --> 00:29:45,809
what do you need the custom kernel for

00:29:42,740 --> 00:29:47,309
it's only the EDP bridge for the

00:29:45,809 --> 00:29:50,370
internal display I mean if you read

00:29:47,309 --> 00:29:51,510
kernel the kernel mailing list it's that

00:29:50,370 --> 00:29:53,460
serious that because I'm currently

00:29:51,510 --> 00:29:58,380
discussing and that's the final thing

00:29:53,460 --> 00:30:01,169
for for growth support a Bluetooth and

00:29:58,380 --> 00:30:04,669
HDMI have minor issues otherwise it

00:30:01,169 --> 00:30:04,669
should be fully supported right now

00:30:05,360 --> 00:30:08,910
whichever if people you can keep it

00:30:07,710 --> 00:30:14,100
there and people look at it look at it

00:30:08,910 --> 00:30:15,840
afterwards I don't care and if you're

00:30:14,100 --> 00:30:18,299
interested to find hosting after the

00:30:15,840 --> 00:30:19,799
talk he may be able to share some

00:30:18,299 --> 00:30:21,450
experiences in case maybe you have a

00:30:19,799 --> 00:30:23,970
slightly different variant of a device

00:30:21,450 --> 00:30:26,640
that you would on to make em open just

00:30:23,970 --> 00:30:29,100
one on we've been running the pint 64

00:30:26,640 --> 00:30:31,110
for quite a long time already now also

00:30:29,100 --> 00:30:34,740
the banana pie a 64 has been getting

00:30:31,110 --> 00:30:37,410
some testing and packaging same chipset

00:30:34,740 --> 00:30:41,429
that is and then for the Allwinner h 6

00:30:37,410 --> 00:30:45,450
SOC and the pine age 64 has started

00:30:41,429 --> 00:30:48,179
slowly to work so since the 5.0 kernel I

00:30:45,450 --> 00:30:50,480
think also the network on that one is

00:30:48,179 --> 00:30:53,190
working however I've noticed that

00:30:50,480 --> 00:30:55,169
despite having a Raspberry Pi compatible

00:30:53,190 --> 00:30:58,320
connector there are some limitations

00:30:55,169 --> 00:31:00,809
compared to the pine 64 in that not all

00:30:58,320 --> 00:31:02,700
pins can actually be used with the other

00:31:00,809 --> 00:31:04,350
connectors on the board at the same time

00:31:02,700 --> 00:31:06,289
in particular UART and Ethernet I'm

00:31:04,350 --> 00:31:12,740
aware of

00:31:06,289 --> 00:31:18,210
okay anak speak or IQ there has been a

00:31:12,740 --> 00:31:24,029
freedom LS 1020 a tension L is 1012 a

00:31:18,210 --> 00:31:25,950
board with rather limited resources that

00:31:24,029 --> 00:31:28,740
we've been having difficulties actually

00:31:25,950 --> 00:31:31,140
getting openSUSE to run on then there

00:31:28,740 --> 00:31:33,299
was a new freeway board with some

00:31:31,140 --> 00:31:36,090
additional connectors and connection

00:31:33,299 --> 00:31:39,409
possibilities for example connected to

00:31:36,090 --> 00:31:39,409
connect this in theory at least

00:31:39,980 --> 00:31:44,220
unfortunately Hubert for that is not

00:31:41,940 --> 00:31:46,380
upstream and it's been I've not been

00:31:44,220 --> 00:31:49,169
able to modify the Hubert environment to

00:31:46,380 --> 00:31:52,590
actually circumvent that so it really

00:31:49,169 --> 00:31:56,070
needs to me to stop the boot on the

00:31:52,590 --> 00:31:57,690
burst and manually type or paste in

00:31:56,070 --> 00:31:59,580
commands in order to boot into our

00:31:57,690 --> 00:32:01,559
chronal but so far it's been working

00:31:59,580 --> 00:32:05,070
unfortunately the up streaming of that

00:32:01,559 --> 00:32:09,500
was never completed by an experience is

00:32:05,070 --> 00:32:09,500
working which impacts the use of the

00:32:10,700 --> 00:32:15,899
UART connections that are behind a spy

00:32:13,590 --> 00:32:17,700
bridge on that micro bus connector so

00:32:15,899 --> 00:32:19,679
unfortunately again it can be used for

00:32:17,700 --> 00:32:22,950
may be able to use for spy but not for

00:32:19,679 --> 00:32:26,549
you out so yeah

00:32:22,950 --> 00:32:27,389
your mileage may vary as they say the

00:32:26,549 --> 00:32:32,330
new kid on the block

00:32:27,389 --> 00:32:35,940
is the NX p MX 8 M chipset so to

00:32:32,330 --> 00:32:38,429
community ish boards have surfaced for

00:32:35,940 --> 00:32:41,880
that one is the pickup I the other one

00:32:38,429 --> 00:32:44,000
is the curl board from Google on those

00:32:41,880 --> 00:32:46,980
boards and XP has been shipping a

00:32:44,000 --> 00:32:49,470
slightly outdated version of you boot it

00:32:46,980 --> 00:32:52,860
does already am have the support for

00:32:49,470 --> 00:32:55,830
booting EFI it's not being used via the

00:32:52,860 --> 00:32:57,659
distribute setup unfortunately so it is

00:32:55,830 --> 00:33:00,299
possible to manually interrupt a boot

00:32:57,659 --> 00:33:02,730
and run those commands however then grab

00:33:00,299 --> 00:33:05,149
will not find its conflict because the

00:33:02,730 --> 00:33:07,600
hubert still has some bugs because it's

00:33:05,149 --> 00:33:11,080
not current

00:33:07,600 --> 00:33:13,120
and yeah apparently no one has been

00:33:11,080 --> 00:33:14,980
working on those new boards here to make

00:33:13,120 --> 00:33:17,350
sure that an upstream bootloader is

00:33:14,980 --> 00:33:23,680
available that would fix those

00:33:17,350 --> 00:33:26,050
particular problems I had started the up

00:33:23,680 --> 00:33:28,060
streaming for action semiconductor

00:33:26,050 --> 00:33:30,280
boards in particular the Bubblegum 96

00:33:28,060 --> 00:33:33,640
board as well as a few others mentioned

00:33:30,280 --> 00:33:35,560
here I've been getting some help making

00:33:33,640 --> 00:33:38,350
progress with the drivers unfortunately

00:33:35,560 --> 00:33:41,860
those activities have seized for the

00:33:38,350 --> 00:33:43,690
moment so we're still on how like an SD

00:33:41,860 --> 00:33:46,990
card driver that we could really load a

00:33:43,690 --> 00:33:49,600
root of s from there is au boot

00:33:46,990 --> 00:33:51,310
available but beware that for one of

00:33:49,600 --> 00:33:53,500
those ports but be aware that it does

00:33:51,310 --> 00:33:55,990
not have the full set of drivers so it's

00:33:53,500 --> 00:33:57,820
not really that useful yet but if you're

00:33:55,990 --> 00:34:00,220
interested in it there is now a Linux

00:33:57,820 --> 00:34:03,130
actions and mailing list on in Fredette

00:34:00,220 --> 00:34:06,640
that you can join if you're interested

00:34:03,130 --> 00:34:08,350
in those particular chipsets similar

00:34:06,640 --> 00:34:09,760
with Realtek unfortunately there have

00:34:08,350 --> 00:34:11,290
been some problems with the interrupt

00:34:09,760 --> 00:34:14,410
controller for quite a long time and

00:34:11,290 --> 00:34:17,560
time issues on my side so there is not

00:34:14,410 --> 00:34:21,160
much progress on that some people have

00:34:17,560 --> 00:34:23,410
showed interest to help out with that

00:34:21,160 --> 00:34:25,900
topic and there is a Linux real Tech

00:34:23,410 --> 00:34:27,940
Talk mailing list also on infrared and

00:34:25,900 --> 00:34:33,490
that can be used to coordinate efforts

00:34:27,940 --> 00:34:36,460
between volunteers nvidia has with much

00:34:33,490 --> 00:34:38,230
fanfare introduced a new Jetson board

00:34:36,460 --> 00:34:39,910
unfortunately it is what what not

00:34:38,230 --> 00:34:42,160
unfortunately in fact is that it is

00:34:39,910 --> 00:34:44,590
using like the an older generation of

00:34:42,160 --> 00:34:47,890
the attacker trip the x1 we had already

00:34:44,590 --> 00:34:50,650
successfully tested the trusted firmware

00:34:47,890 --> 00:34:52,660
and you boot for that particular chipset

00:34:50,650 --> 00:34:54,790
so hopefully that should be fine if

00:34:52,660 --> 00:34:57,520
anyone has one and can provide feedback

00:34:54,790 --> 00:35:00,630
that would be appreciated looking at

00:34:57,520 --> 00:35:00,630
certain people in the frontier

00:35:01,240 --> 00:35:09,950
yeah and yeah I've made the experience

00:35:06,350 --> 00:35:11,390
for the MX so the x1 generation and

00:35:09,950 --> 00:35:13,460
things have been working okay with

00:35:11,390 --> 00:35:17,690
flashing things onto those boards for me

00:35:13,460 --> 00:35:19,130
but since upgrading to lead 15.0 them

00:35:17,690 --> 00:35:22,430
I've been unable to actually get

00:35:19,130 --> 00:35:27,250
anything onto the x2 board so that

00:35:22,430 --> 00:35:29,930
remains to be retested with 15.1 and

00:35:27,250 --> 00:35:32,210
similar story with rock chips so there

00:35:29,930 --> 00:35:34,970
are some new boards that have surfaced

00:35:32,210 --> 00:35:37,550
and we've also prepared some packages

00:35:34,970 --> 00:35:39,830
for those unfortunately I've not been

00:35:37,550 --> 00:35:42,320
able to test them because similarly the

00:35:39,830 --> 00:35:44,990
USB flash in tool for that one is broken

00:35:42,320 --> 00:35:47,330
in current 15.0 and needs to be tested

00:35:44,990 --> 00:35:51,520
whether anyone has come up with any

00:35:47,330 --> 00:35:54,620
fixes or workaround for that one finally

00:35:51,520 --> 00:35:56,270
since I've spoken about arm so much not

00:35:54,620 --> 00:35:58,730
been able to you know speak much about

00:35:56,270 --> 00:36:00,770
other architectures we've not been

00:35:58,730 --> 00:36:03,560
seeing much presentations here about

00:36:00,770 --> 00:36:05,420
verse 5 so I've taken the opportunity to

00:36:03,560 --> 00:36:09,770
say a few words about that one as well

00:36:05,420 --> 00:36:12,230
so for one if you have qmu packages

00:36:09,770 --> 00:36:14,920
installed on openSUSE on whatever system

00:36:12,230 --> 00:36:17,060
you have you can emulate a risk 5 system

00:36:14,920 --> 00:36:19,970
there are now you would packages

00:36:17,060 --> 00:36:21,650
available that can be used with that you

00:36:19,970 --> 00:36:24,730
would packages are now also available

00:36:21,650 --> 00:36:28,190
for the currently single available

00:36:24,730 --> 00:36:32,450
hardware linux compatible board for us

00:36:28,190 --> 00:36:36,320
5d hi-5 Unleashed unfortunately either

00:36:32,450 --> 00:36:38,660
way grub support for risk 5 is still

00:36:36,320 --> 00:36:42,920
missing at least in our package possibly

00:36:38,660 --> 00:36:46,010
also upstream so yeah some things still

00:36:42,920 --> 00:36:47,990
need to happen to have a easy user

00:36:46,010 --> 00:36:50,390
experience there but it's already used

00:36:47,990 --> 00:36:52,700
impossible to use it Andrea Schwab has

00:36:50,390 --> 00:36:56,150
been spending a lot of time working on

00:36:52,700 --> 00:36:58,010
this and you probably already know that

00:36:56,150 --> 00:37:00,560
for the ARM architecture you can find

00:36:58,010 --> 00:37:03,440
all the various packages in the openSUSE

00:37:00,560 --> 00:37:05,840
factory arm project and similarly there

00:37:03,440 --> 00:37:10,330
is an open Sousa factory risk 5 project

00:37:05,840 --> 00:37:10,330
that is building for this Marc

00:37:12,120 --> 00:37:19,630
that is it we do still have roughly five

00:37:16,720 --> 00:37:22,810
minutes for questions anything about

00:37:19,630 --> 00:37:25,200
Laura or arm boards and hardware touch

00:37:22,810 --> 00:37:25,200
meant in general

00:37:32,890 --> 00:37:39,070
Heiko any updates that you may want to

00:37:35,480 --> 00:37:39,070
share for Rockchip No

00:37:43,320 --> 00:37:49,630
yeah in the back visual disco

00:37:46,210 --> 00:37:52,180
head is it possible to swap disable the

00:37:49,630 --> 00:37:54,130
Bluetooth on the Raspberry Pi 3 and use

00:37:52,180 --> 00:38:00,849
the hardware you are instead from an

00:37:54,130 --> 00:38:08,490
open scissor image yet not on the

00:38:00,849 --> 00:38:10,540
regular Raspberry Pi so the pins of the

00:38:08,490 --> 00:38:13,750
what is being used for the Bluetooth

00:38:10,540 --> 00:38:16,270
UART are not being exposed on the board

00:38:13,750 --> 00:38:19,990
in any way that I know of being able to

00:38:16,270 --> 00:38:22,000
at least easily access them so you have

00:38:19,990 --> 00:38:25,180
only one you are that is being exposed

00:38:22,000 --> 00:38:28,450
there and via ADT overlay you can switch

00:38:25,180 --> 00:38:31,300
whether that is the tty s 0 or the tty

00:38:28,450 --> 00:38:33,190
am a zero if however you use the

00:38:31,300 --> 00:38:36,099
Raspberry Pi computer module with some

00:38:33,190 --> 00:38:39,070
baseboard that does not have bluetooth

00:38:36,099 --> 00:38:43,240
chipset on there then you can actually

00:38:39,070 --> 00:38:45,460
use both and we've been Matthias over

00:38:43,240 --> 00:38:47,609
here has been working on a device

00:38:45,460 --> 00:38:50,680
through overlay that can be used to

00:38:47,609 --> 00:38:52,450
enable that second UART because

00:38:50,680 --> 00:38:55,200
apparently that is not being done by

00:38:52,450 --> 00:39:02,369
default

00:38:55,200 --> 00:39:05,010
oh yes so we've been working with a

00:39:02,369 --> 00:39:08,160
company called embedded micro technology

00:39:05,010 --> 00:39:13,020
in the UK they have a baseboard called

00:39:08,160 --> 00:39:17,910
my PI that you can you know unplug this

00:39:13,020 --> 00:39:20,339
dim shaped compute module into and then

00:39:17,910 --> 00:39:23,579
have like pretty much the same or

00:39:20,339 --> 00:39:25,500
possibly even what about the the same on

00:39:23,579 --> 00:39:28,140
even more connectors than would have on

00:39:25,500 --> 00:39:32,130
the Raspberry Pi in a rather well larger

00:39:28,140 --> 00:39:35,420
shape so that and then also has their

00:39:32,130 --> 00:39:38,640
own expansion mechanism for having like

00:39:35,420 --> 00:39:40,260
industrial-grade IO with you know like

00:39:38,640 --> 00:39:46,770
higher voltage levels than you would

00:39:40,260 --> 00:39:48,510
usually have on the PI and yeah that is

00:39:46,770 --> 00:39:51,270
one way to get around certain

00:39:48,510 --> 00:39:56,339
limitations of the Raspberry Pi you know

00:39:51,270 --> 00:39:58,790
three model bb+ boards any further

00:39:56,339 --> 00:39:58,790
questions

00:40:01,079 --> 00:40:03,700
okay then thank you very much for your

00:40:03,250 --> 00:40:13,390
interest

00:40:03,700 --> 00:40:16,900
oh yes and what I had been standing here

00:40:13,390 --> 00:40:21,160
on the board is two more things to show

00:40:16,900 --> 00:40:22,990
so I was speaking about adaptors from

00:40:21,160 --> 00:40:27,160
one type of expansion board to another

00:40:22,990 --> 00:40:30,849
for example this one is matching from

00:40:27,160 --> 00:40:33,309
the 96 ports where it was previously

00:40:30,849 --> 00:40:36,309
pretty difficult to attach anything

00:40:33,309 --> 00:40:38,920
because they have smaller and picture of

00:40:36,309 --> 00:40:43,690
only 2 millimeters instead of the 0.1

00:40:38,920 --> 00:40:46,450
inch and 1.8 volt instead of 3.3 volts

00:40:43,690 --> 00:40:51,760
so this goes from that particular output

00:40:46,450 --> 00:40:54,790
to Raspberry Pi and Arduino connectors

00:40:51,760 --> 00:40:57,760
it's still slightly difficult since this

00:40:54,790 --> 00:41:00,130
is an early adapter to make use of it so

00:40:57,760 --> 00:41:02,829
it needs some configuration I'm on the

00:41:00,130 --> 00:41:05,170
system to choose how the pins are

00:41:02,829 --> 00:41:08,980
actually going to be routed and since it

00:41:05,170 --> 00:41:13,990
has an FPGA on board it costs about as

00:41:08,980 --> 00:41:18,150
much as the cheapest 96 board other

00:41:13,990 --> 00:41:21,030
adapters for going from Raspberry Pi to

00:41:18,150 --> 00:41:23,260
you know the smaller micro bus

00:41:21,030 --> 00:41:28,089
connectors that's probably around at

00:41:23,260 --> 00:41:29,859
another 15 20 euro and depending on

00:41:28,089 --> 00:41:31,990
whether any additional trip sets are on

00:41:29,859 --> 00:41:33,640
such an adapter you know the price will

00:41:31,990 --> 00:41:36,490
will vary and the size of it of course

00:41:33,640 --> 00:41:38,170
the other thing I brought here is

00:41:36,490 --> 00:41:41,970
something that I already showed at the

00:41:38,170 --> 00:41:44,290
openSUSE booth to Faust them this is

00:41:41,970 --> 00:41:46,510
essentially a Raspberry Pi I actually

00:41:44,290 --> 00:41:48,220
opened that last time and showed the

00:41:46,510 --> 00:41:51,579
inside since I exchanged the Raspberry

00:41:48,220 --> 00:41:54,040
Pi and there to be 64 bit you can see

00:41:51,579 --> 00:41:56,799
you know the connectors of that here on

00:41:54,040 --> 00:41:59,440
the outside that you may recognize and

00:41:56,799 --> 00:42:02,920
on top of the Raspberry Pi it then has

00:41:59,440 --> 00:42:06,450
like a custom-designed adapter to go to

00:42:02,920 --> 00:42:09,790
a particular Laura module there and

00:42:06,450 --> 00:42:12,140
they've designed you know a

00:42:09,790 --> 00:42:13,880
aluminium case around that and are

00:42:12,140 --> 00:42:15,320
basically selling that as a product and

00:42:13,880 --> 00:42:16,790
she will find that quite a lot if you

00:42:15,320 --> 00:42:21,410
look around that people are actually

00:42:16,790 --> 00:42:24,170
taking the standard s pcs and then you

00:42:21,410 --> 00:42:26,450
know making some waterproof case that is

00:42:24,170 --> 00:42:30,350
much larger possibly than the actual

00:42:26,450 --> 00:42:32,240
board round that and selling that as you

00:42:30,350 --> 00:42:35,860
know gateway devices that are then put

00:42:32,240 --> 00:42:35,860

YouTube URL: https://www.youtube.com/watch?v=_EKzeZlQCJI


