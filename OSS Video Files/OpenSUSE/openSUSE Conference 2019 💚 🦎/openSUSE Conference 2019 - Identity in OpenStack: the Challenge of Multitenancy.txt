Title: openSUSE Conference 2019 - Identity in OpenStack: the Challenge of Multitenancy
Publication date: 2019-05-26
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2525-identity-in-openstack-the-challenge-of-multitenancy



Keystone is the OpenStack component responsible for identity management and
user authentication and authorization, which has unique challenges in
cloud-like environments where secure sharing of resources is an essential
requirement and yet is fundamental to the core idea of collaborative
computing. This introductory talk will give an overview of the keystone
project, including:

* The many ways users and applications can securely authenticate with
  keystone, including SAML2.0, OpenID Connect, X.509 and Kerberos
* The implications for authorization in a multitenant environment and how
  role-based access control is designed in keystone
* How keystone relates to projects outside of the OpenStack ecosystem such as
  Kubernetes

Keystone is the OpenStack component responsible for identity management and
user authentication and authorization, which has unique challenges in
cloud-like environments where secure sharing of resources is an essential
requirement and yet is fundamental to the core idea of collaborative
computing. This introductory talk will give an overview of the keystone
project, including:

* The many ways users and applications can securely authenticate with
  keystone, including SAML2.0, OpenID Connect, X.509 and Kerberos
* The implications for authorization in a multitenant environment and how
  role-based access control is designed in keystone
* How keystone relates to projects outside of the OpenStack ecosystem such as
  Kubernetes

Colleen Murphy
Captions: 
	00:00:05,520 --> 00:00:10,430
all right I think it's time for me to

00:00:08,069 --> 00:00:12,930
get started thank you all for coming

00:00:10,430 --> 00:00:15,179
welcome thank you all for sticking with

00:00:12,930 --> 00:00:15,540
me to the very end I really appreciate

00:00:15,179 --> 00:00:18,810
it

00:00:15,540 --> 00:00:21,689
this talk is gonna be about identity and

00:00:18,810 --> 00:00:24,240
OpenStack which is called Keystone and

00:00:21,689 --> 00:00:36,150
its role in a multi-tenant computing

00:00:24,240 --> 00:00:38,760
environment like OpenStack so my name is

00:00:36,150 --> 00:00:40,110
colleen i am i work at souza I've been

00:00:38,760 --> 00:00:42,870
there for about two years now

00:00:40,110 --> 00:00:44,820
I work on the cloud team we build our

00:00:42,870 --> 00:00:46,559
cloud product around OpenStack which is

00:00:44,820 --> 00:00:49,530
one of the largest open-source projects

00:00:46,559 --> 00:00:52,949
in the world and I've been contributing

00:00:49,530 --> 00:00:55,260
to that for a while I'm also the PTL or

00:00:52,949 --> 00:00:57,089
project team lead for the Keystone

00:00:55,260 --> 00:00:59,040
project in OpenStack and that's a

00:00:57,089 --> 00:01:01,680
community elected position that's not

00:00:59,040 --> 00:01:02,970
part of my job title at Sousa and so

00:01:01,680 --> 00:01:06,950
that's why this talk is going to focus

00:01:02,970 --> 00:01:10,920
on the Keystone component of OpenStack

00:01:06,950 --> 00:01:12,270
so since I work on Keystone I wanted to

00:01:10,920 --> 00:01:13,679
give a talk that gives a broad

00:01:12,270 --> 00:01:16,320
introduction sort of a high-level

00:01:13,679 --> 00:01:18,929
introduction to the Keystone project and

00:01:16,320 --> 00:01:21,749
I'll try to make this kind of an honest

00:01:18,929 --> 00:01:23,969
look at Keystone and OpenStack and not

00:01:21,749 --> 00:01:25,469
just talk about why it's so great but

00:01:23,969 --> 00:01:27,570
beyond that I'd like to sort of take a

00:01:25,469 --> 00:01:30,119
step back from this particular project

00:01:27,570 --> 00:01:32,070
and talk about multi-tenancy and why

00:01:30,119 --> 00:01:32,759
it's a hard problem and why how we try

00:01:32,070 --> 00:01:37,770
to solve it

00:01:32,759 --> 00:01:40,140
and OpenStack in with Keystone so to set

00:01:37,770 --> 00:01:43,409
the stage these are what I think are

00:01:40,140 --> 00:01:45,569
sort of the founding principles of cloud

00:01:43,409 --> 00:01:47,880
and what makes cloud different from just

00:01:45,569 --> 00:01:50,670
regular virtualization first of all

00:01:47,880 --> 00:01:52,950
cloud infrastructure is multi-tenant and

00:01:50,670 --> 00:01:54,960
second cloud infrastructure is self

00:01:52,950 --> 00:01:56,460
service and those kind of go hand in

00:01:54,960 --> 00:02:00,389
hand a little bit you can't really have

00:01:56,460 --> 00:02:03,179
one without the other to define that a

00:02:00,389 --> 00:02:06,109
little bit more multi-tenancy is this

00:02:03,179 --> 00:02:08,819
abstraction that lets us collaborate on

00:02:06,109 --> 00:02:11,310
virtual resources within a team or

00:02:08,819 --> 00:02:14,100
organization while also allowing these

00:02:11,310 --> 00:02:16,830
teams to securely share this underlying

00:02:14,100 --> 00:02:17,900
physical infrastructure between these

00:02:16,830 --> 00:02:19,790
teams and a nice

00:02:17,900 --> 00:02:23,590
relation from one another without

00:02:19,790 --> 00:02:26,720
disrupting each other's workflows

00:02:23,590 --> 00:02:29,090
sharing resources like this is it's not

00:02:26,720 --> 00:02:30,560
really a new idea any kind of multi-user

00:02:29,090 --> 00:02:33,110
UNIX system already supports

00:02:30,560 --> 00:02:35,269
multi-tenancy in some way but what's

00:02:33,110 --> 00:02:36,769
more interesting about the way OpenStack

00:02:35,269 --> 00:02:40,069
does it is it's not just about giving

00:02:36,769 --> 00:02:42,019
individual users access to a system it's

00:02:40,069 --> 00:02:44,810
more about allowing groups of users to

00:02:42,019 --> 00:02:47,480
collaborate on some logical section of

00:02:44,810 --> 00:02:50,420
the system and so in the in the cloud

00:02:47,480 --> 00:02:52,970
take on multi-tenancy the whole thing is

00:02:50,420 --> 00:02:55,129
centered around teams of users and

00:02:52,970 --> 00:02:59,840
moreover a user could be a member of

00:02:55,129 --> 00:03:01,609
more than one team which implies they

00:02:59,840 --> 00:03:03,319
need access to more than one tenant in

00:03:01,609 --> 00:03:04,579
the system which is another layer of

00:03:03,319 --> 00:03:08,780
complexity that we have to program

00:03:04,579 --> 00:03:11,599
around and so then self-service means

00:03:08,780 --> 00:03:13,459
users having full control over their

00:03:11,599 --> 00:03:16,129
applications and having the

00:03:13,459 --> 00:03:18,650
infrastructure be fully automated lowly

00:03:16,129 --> 00:03:21,859
discoverable never having to file a

00:03:18,650 --> 00:03:23,780
ticket with your your cloud operator the

00:03:21,859 --> 00:03:25,730
applications running on the system

00:03:23,780 --> 00:03:29,090
should always have enough information to

00:03:25,730 --> 00:03:30,980
make their own decisions without a

00:03:29,090 --> 00:03:32,870
humans involvement or they should be

00:03:30,980 --> 00:03:34,340
able to discover enough information

00:03:32,870 --> 00:03:36,139
about the system that they can make

00:03:34,340 --> 00:03:39,459
their own decisions for example when it

00:03:36,139 --> 00:03:39,459
comes to things like auto-scaling

00:03:40,269 --> 00:03:45,290
so before I can talk about the keystone

00:03:43,069 --> 00:03:47,840
component of OpenStack I need to explain

00:03:45,290 --> 00:03:51,949
what OpenStack is just for anybody who's

00:03:47,840 --> 00:03:54,409
not completely familiar with it it's an

00:03:51,949 --> 00:03:57,139
open source cloud platform it's usually

00:03:54,409 --> 00:04:00,440
used as a private cloud for cases where

00:03:57,139 --> 00:04:02,180
either it's more cost-effective to run

00:04:00,440 --> 00:04:03,319
your own cloud in your own data center

00:04:02,180 --> 00:04:05,419
or if you're concerned about data

00:04:03,319 --> 00:04:07,459
privacy and you want your data contained

00:04:05,419 --> 00:04:10,340
in one data center but you still need

00:04:07,459 --> 00:04:13,729
the agility and flexibility that having

00:04:10,340 --> 00:04:15,919
a cloud gives you there's also a

00:04:13,729 --> 00:04:17,630
different public cloud offerings running

00:04:15,919 --> 00:04:20,419
OpenStack which is convenient because

00:04:17,630 --> 00:04:21,769
you can use the same api's to run your

00:04:20,419 --> 00:04:23,840
workloads across multiple different

00:04:21,769 --> 00:04:27,620
providers without being locked into a

00:04:23,840 --> 00:04:30,320
particular provider another way to look

00:04:27,620 --> 00:04:32,090
at it is as infrastructure as a service

00:04:30,320 --> 00:04:34,210
where you can you can

00:04:32,090 --> 00:04:37,490
servers you can request block storage

00:04:34,210 --> 00:04:39,950
networking all on-demand not need to ask

00:04:37,490 --> 00:04:43,340
your IT team to buy and install a new

00:04:39,950 --> 00:04:45,080
server or boot up a new VMware node and

00:04:43,340 --> 00:04:47,780
so what OpenStack is not is it's not

00:04:45,080 --> 00:04:50,360
virtualization its virtualization is a

00:04:47,780 --> 00:04:52,610
lower layer below the cloud it's part of

00:04:50,360 --> 00:04:54,650
it's part of OpenStack but it's

00:04:52,610 --> 00:05:00,169
OpenStack is really the abstractions on

00:04:54,650 --> 00:05:01,490
top of virtualization and so an

00:05:00,169 --> 00:05:04,250
important thing to know about OpenStack

00:05:01,490 --> 00:05:06,830
is that it's pretty big it's developed

00:05:04,250 --> 00:05:09,110
and it's operated as distinct building

00:05:06,830 --> 00:05:11,180
block components it's not a product that

00:05:09,110 --> 00:05:13,880
comes already put together working out

00:05:11,180 --> 00:05:17,570
of the box it's actually up to two cloud

00:05:13,880 --> 00:05:19,550
operators and to deployers installers

00:05:17,570 --> 00:05:21,470
lifecycle managers to pick out the

00:05:19,550 --> 00:05:24,889
pieces and put them together in a

00:05:21,470 --> 00:05:27,080
particular way so the central box here

00:05:24,889 --> 00:05:29,330
is all of the HTTP services that are

00:05:27,080 --> 00:05:30,740
part of OpenStack and down in the corner

00:05:29,330 --> 00:05:35,150
there is Keystone which is what we're

00:05:30,740 --> 00:05:38,060
going to focus on so with that in mind

00:05:35,150 --> 00:05:39,979
this is what Keystone is it's it

00:05:38,060 --> 00:05:41,810
implements the identity API for

00:05:39,979 --> 00:05:44,300
OpenStack which means it's responsible

00:05:41,810 --> 00:05:46,280
for user management as well as for

00:05:44,300 --> 00:05:48,590
authentication and for authorization

00:05:46,280 --> 00:05:50,390
with an open stack and then since it's

00:05:48,590 --> 00:05:52,910
central to all the other components of

00:05:50,390 --> 00:05:54,919
OpenStack it also acts as a discovery

00:05:52,910 --> 00:05:56,840
service and so I'm going to talk about

00:05:54,919 --> 00:05:58,220
that functionality first because it's

00:05:56,840 --> 00:06:00,650
kind of the odd one out

00:05:58,220 --> 00:06:02,570
it doesn't really exactly fit into

00:06:00,650 --> 00:06:05,690
Keystone's role as an identity service

00:06:02,570 --> 00:06:08,330
but discovery is kind of critical to the

00:06:05,690 --> 00:06:10,190
way OpenStack works because because

00:06:08,330 --> 00:06:13,039
OpenStack is developed as the separate

00:06:10,190 --> 00:06:15,800
building blocks that are independent

00:06:13,039 --> 00:06:18,410
from one another so the reason we make

00:06:15,800 --> 00:06:20,150
discovery part of Keystone is that

00:06:18,410 --> 00:06:22,310
Keystone happens to be central to all

00:06:20,150 --> 00:06:24,229
these other components so it's in sort

00:06:22,310 --> 00:06:26,690
of this unique position to provide an

00:06:24,229 --> 00:06:28,639
entry point into the cloud and to act as

00:06:26,690 --> 00:06:33,169
kind of a bridge between these disjoint

00:06:28,639 --> 00:06:34,940
components and the way it operates is is

00:06:33,169 --> 00:06:37,160
pretty simple the components just

00:06:34,940 --> 00:06:39,710
register themselves in the Keystone

00:06:37,160 --> 00:06:42,680
catalog and so this allows clients to

00:06:39,710 --> 00:06:44,630
only have to know the Keystone URL in

00:06:42,680 --> 00:06:45,660
order to be able to find out what other

00:06:44,630 --> 00:06:47,970
services

00:06:45,660 --> 00:06:49,620
are available in the cloud and what

00:06:47,970 --> 00:06:51,780
endpoints they're at what regions

00:06:49,620 --> 00:06:53,670
they're in and from there they can start

00:06:51,780 --> 00:06:55,470
figuring out what API versions each

00:06:53,670 --> 00:06:57,390
service supports and so they can start

00:06:55,470 --> 00:07:00,360
negotiating how they're going to talk to

00:06:57,390 --> 00:07:03,300
this service and so this discovery

00:07:00,360 --> 00:07:05,850
mechanism allows client applications to

00:07:03,300 --> 00:07:07,650
autonomously interact with a cloud

00:07:05,850 --> 00:07:10,560
without previously knowing anything

00:07:07,650 --> 00:07:12,600
about it and that even allows clients to

00:07:10,560 --> 00:07:14,040
interact with different clouds which

00:07:12,600 --> 00:07:15,150
could be configured differently they

00:07:14,040 --> 00:07:18,450
could have different components

00:07:15,150 --> 00:07:20,130
installed but they can still figure it

00:07:18,450 --> 00:07:22,770
out because of this discovery component

00:07:20,130 --> 00:07:25,460
this is kind of a representation of the

00:07:22,770 --> 00:07:28,620
catalog from a CLI point of view but

00:07:25,460 --> 00:07:31,140
normally this would just be used within

00:07:28,620 --> 00:07:36,210
within the client and not really exposed

00:07:31,140 --> 00:07:37,800
to humans and so then the most obvious

00:07:36,210 --> 00:07:40,380
part of Keystone is more the identity

00:07:37,800 --> 00:07:42,780
part of Keystone so it can be used as an

00:07:40,380 --> 00:07:44,730
identity storage mechanism where the

00:07:42,780 --> 00:07:46,620
user information the password hashes are

00:07:44,730 --> 00:07:49,170
all stored in the Keystone database

00:07:46,620 --> 00:07:51,480
managed directly by Keystone but it can

00:07:49,170 --> 00:07:54,360
also act as kind of an identity broker

00:07:51,480 --> 00:07:56,790
where the information is stored in your

00:07:54,360 --> 00:07:59,010
LDAP directory and proxied through

00:07:56,790 --> 00:08:01,320
Keystone so that your organization's

00:07:59,010 --> 00:08:05,400
LDAP server can still act as that

00:08:01,320 --> 00:08:07,470
authoritative identity source but user

00:08:05,400 --> 00:08:09,150
is interacting with the Keystone still

00:08:07,470 --> 00:08:17,810
have the same experience as if they were

00:08:09,150 --> 00:08:20,150
local Keystone users what Keystone

00:08:17,810 --> 00:08:22,530
really excels at though is not the

00:08:20,150 --> 00:08:24,930
identity storage or Identity Management

00:08:22,530 --> 00:08:27,300
but the authentication part and

00:08:24,930 --> 00:08:29,220
authentication here means proving your

00:08:27,300 --> 00:08:31,710
identity in some way proving you are who

00:08:29,220 --> 00:08:34,890
you say you are so Keystone's real power

00:08:31,710 --> 00:08:36,450
is what I'm calling a token service it

00:08:34,890 --> 00:08:39,719
provides a bunch of authentication

00:08:36,450 --> 00:08:42,150
methods and if you pass these methods

00:08:39,719 --> 00:08:44,610
then they result in some sort of token

00:08:42,150 --> 00:08:47,220
and you can use the token to present to

00:08:44,610 --> 00:08:50,130
other OpenStack services in your cloud

00:08:47,220 --> 00:08:52,260
as proof that you've been authenticated

00:08:50,130 --> 00:08:54,060
which implies that these other services

00:08:52,260 --> 00:08:55,589
need some way of understanding and

00:08:54,060 --> 00:09:00,000
interpreting and invalidating these

00:08:55,589 --> 00:09:03,060
tokens we support a few different token

00:09:00,000 --> 00:09:04,620
formats the Fernet format is kind of an

00:09:03,060 --> 00:09:07,920
older format that's not really well

00:09:04,620 --> 00:09:11,910
known in the rest of the industry the

00:09:07,920 --> 00:09:14,400
newer format we support is JWT that's we

00:09:11,910 --> 00:09:16,920
introduce that in the hope that that can

00:09:14,400 --> 00:09:18,660
be that can help with adoption outside

00:09:16,920 --> 00:09:21,180
of an OpenStack context because it's a

00:09:18,660 --> 00:09:23,640
better supported format and then in a

00:09:21,180 --> 00:09:26,640
kind of a limited form we support sam'l

00:09:23,640 --> 00:09:29,790
assertions as anetha it can issue a

00:09:26,640 --> 00:09:34,230
sam'l assertion as well but it's more

00:09:29,790 --> 00:09:36,570
limited that way so this is a

00:09:34,230 --> 00:09:38,580
visualization of how a request would go

00:09:36,570 --> 00:09:41,850
in OpenStack using Keystone for

00:09:38,580 --> 00:09:44,550
authentication so the users client needs

00:09:41,850 --> 00:09:46,860
to make two requests it needs to first

00:09:44,550 --> 00:09:49,020
request a token from Keystone using

00:09:46,860 --> 00:09:52,080
their credentials their username and

00:09:49,020 --> 00:09:53,670
password or whatever it is and then once

00:09:52,080 --> 00:09:55,950
they get the token they pass the token

00:09:53,670 --> 00:09:58,950
it is a second request to the service

00:09:55,950 --> 00:10:00,770
they're actually trying to access and we

00:09:58,950 --> 00:10:03,839
have this middleware layer here that

00:10:00,770 --> 00:10:05,700
intercepts the request and validates

00:10:03,839 --> 00:10:08,580
that the token is genuine and validates

00:10:05,700 --> 00:10:10,500
the user is really authentic ated and

00:10:08,580 --> 00:10:13,620
then at that point the service can

00:10:10,500 --> 00:10:15,540
actually respond with the resource that

00:10:13,620 --> 00:10:17,280
the users requesting which is could be

00:10:15,540 --> 00:10:19,860
creating a new virtual machine or

00:10:17,280 --> 00:10:26,100
listing your block storage devices or or

00:10:19,860 --> 00:10:28,350
what have you and so Keystone as an

00:10:26,100 --> 00:10:30,230
occasion service supports a few

00:10:28,350 --> 00:10:33,060
different types of authentication

00:10:30,230 --> 00:10:35,040
natively the standard of course just

00:10:33,060 --> 00:10:37,530
basic password authentication

00:10:35,040 --> 00:10:39,720
I'm you users password is validated

00:10:37,530 --> 00:10:41,459
against the hash in Keystone or its

00:10:39,720 --> 00:10:43,680
proxy to your LDAP directory for

00:10:41,459 --> 00:10:46,260
validation another way is with

00:10:43,680 --> 00:10:49,500
application credentials which is kind of

00:10:46,260 --> 00:10:51,870
like API keys it's a way of delegating a

00:10:49,500 --> 00:10:54,330
narrower narrower level of authorization

00:10:51,870 --> 00:10:57,930
to your applications without having to

00:10:54,330 --> 00:11:01,470
give your applications your password and

00:10:57,930 --> 00:11:04,620
then we have TTT OTP time-based one-time

00:11:01,470 --> 00:11:07,870
passwords that's of course most useful

00:11:04,620 --> 00:11:10,520
in a multi factor auth type of situation

00:11:07,870 --> 00:11:12,800
but beyond what Keystone can do natively

00:11:10,520 --> 00:11:15,620
it can also support web server off

00:11:12,800 --> 00:11:17,750
modules for authentication so if the

00:11:15,620 --> 00:11:20,770
users stored in your LDAP or in your

00:11:17,750 --> 00:11:26,230
sequel database Keystone can use a

00:11:20,770 --> 00:11:29,450
variable from the web server module as

00:11:26,230 --> 00:11:31,820
proof that the user is authenticated so

00:11:29,450 --> 00:11:33,550
some examples of this would be X 509

00:11:31,820 --> 00:11:37,250
client certification certification

00:11:33,550 --> 00:11:39,800
certificate certificates or Kerberos or

00:11:37,250 --> 00:11:42,440
even like basic auth digests off

00:11:39,800 --> 00:11:44,030
anything that Apache supports as an auth

00:11:42,440 --> 00:11:47,540
module that can be used as

00:11:44,030 --> 00:11:49,580
authentication with Keystone and then

00:11:47,540 --> 00:11:52,640
the more exciting part of Keystone for

00:11:49,580 --> 00:11:54,740
me is federated authentication it's kind

00:11:52,640 --> 00:11:57,140
of an extension on external

00:11:54,740 --> 00:11:59,390
authentication but in this case the user

00:11:57,140 --> 00:12:01,490
needs they don't need to be stored in

00:11:59,390 --> 00:12:03,620
the sequel database or the LDAP

00:12:01,490 --> 00:12:05,900
directory in this case they're actually

00:12:03,620 --> 00:12:08,600
stored in an external identity provider

00:12:05,900 --> 00:12:10,790
and then rather than rather than

00:12:08,600 --> 00:12:13,790
Keystone having direct access to these

00:12:10,790 --> 00:12:15,680
attributes these are authenticates with

00:12:13,790 --> 00:12:17,450
some external identity provider which

00:12:15,680 --> 00:12:20,020
supports one of these federated

00:12:17,450 --> 00:12:23,420
protocols like sam'l or open ID connect

00:12:20,020 --> 00:12:25,839
and then an assertion or an attestation

00:12:23,420 --> 00:12:28,490
is generated by the identity provider

00:12:25,839 --> 00:12:29,870
which provides Keystone with these user

00:12:28,490 --> 00:12:32,210
attributes and proves that they're

00:12:29,870 --> 00:12:34,850
actually authenticated and then Keystone

00:12:32,210 --> 00:12:38,000
can use mapping configured by the cloud

00:12:34,850 --> 00:12:40,370
operator to translate these user

00:12:38,000 --> 00:12:43,940
attributes into local attributes within

00:12:40,370 --> 00:12:47,360
Keystone and in this way we can achieve

00:12:43,940 --> 00:12:51,800
a Federation of identity across multiple

00:12:47,360 --> 00:12:53,570
clouds or multiple systems so that was

00:12:51,800 --> 00:12:55,870
all about the authentication part of

00:12:53,570 --> 00:12:58,400
Keystone which Keystone does really well

00:12:55,870 --> 00:13:02,089
the the next part of Keystone that

00:12:58,400 --> 00:13:04,100
that's important is authorization which

00:13:02,089 --> 00:13:07,700
is about granting the users the right

00:13:04,100 --> 00:13:09,500
level of access to the things they need

00:13:07,700 --> 00:13:11,410
so making sure that users are allowed to

00:13:09,500 --> 00:13:14,600
do what they're requesting to do and

00:13:11,410 --> 00:13:16,459
this is the part where things get a

00:13:14,600 --> 00:13:19,500
little bit complicated and Keystone and

00:13:16,459 --> 00:13:21,540
OpenStack suffer a little bit because

00:13:19,500 --> 00:13:24,810
this is where multi-tenancy makes things

00:13:21,540 --> 00:13:27,120
a little bit complicated so Keystone

00:13:24,810 --> 00:13:28,740
doesn't need to just worry about users

00:13:27,120 --> 00:13:30,690
logging into OpenStack in general they

00:13:28,740 --> 00:13:33,120
need to worry about users logging into a

00:13:30,690 --> 00:13:36,120
tenant in OpenStack and having the

00:13:33,120 --> 00:13:39,180
permissions to do what they need to do

00:13:36,120 --> 00:13:41,430
and not being allowed to do anything

00:13:39,180 --> 00:13:44,280
else on the system and so we've called

00:13:41,430 --> 00:13:46,770
this scoped our back because regular

00:13:44,280 --> 00:13:49,440
role based access control just doesn't

00:13:46,770 --> 00:13:53,400
really fully describe the tenancy

00:13:49,440 --> 00:13:54,720
component of authorization and so this

00:13:53,400 --> 00:13:56,850
is all made harder by the fact that

00:13:54,720 --> 00:14:01,650
we've the way we've designed OpenStack

00:13:56,850 --> 00:14:03,510
is these individual components and that

00:14:01,650 --> 00:14:05,910
means that a role in Keystone is

00:14:03,510 --> 00:14:07,350
actually not owned by Keystone it's

00:14:05,910 --> 00:14:10,890
owned by the individual service

00:14:07,350 --> 00:14:14,400
components so we'll explain that a

00:14:10,890 --> 00:14:16,740
little bit more roles are just names in

00:14:14,400 --> 00:14:18,930
the Keystone database and what a role

00:14:16,740 --> 00:14:21,090
means is actually defined in policy

00:14:18,930 --> 00:14:22,920
rules which are owned by these other

00:14:21,090 --> 00:14:25,770
component services and this is kind of a

00:14:22,920 --> 00:14:27,750
side effective of how OpenStack is

00:14:25,770 --> 00:14:31,940
developed and operated as these just

00:14:27,750 --> 00:14:34,410
don't just joint component services so

00:14:31,940 --> 00:14:36,120
the other services are always creating

00:14:34,410 --> 00:14:39,150
new API s and Keystone doesn't really

00:14:36,120 --> 00:14:41,070
have the ability or the authority to say

00:14:39,150 --> 00:14:43,260
what kind of access level each API

00:14:41,070 --> 00:14:48,450
should have so we delegate that to the

00:14:43,260 --> 00:14:50,340
other services and so the the defaults

00:14:48,450 --> 00:14:54,390
for these other services are set by the

00:14:50,340 --> 00:14:55,830
service themselves and they are the

00:14:54,390 --> 00:15:01,140
overrides are configured by the cloud

00:14:55,830 --> 00:15:03,570
operator this is an example of the

00:15:01,140 --> 00:15:06,870
policy file configuration it has its own

00:15:03,570 --> 00:15:12,530
syntax to specify what roles and what

00:15:06,870 --> 00:15:12,530
scopes are allowed for a given operation

00:15:12,660 --> 00:15:16,080
and so then a user can't just have a

00:15:14,340 --> 00:15:18,450
role in OpenStack they need to have a

00:15:16,080 --> 00:15:21,030
role and a scope and so the most basic

00:15:18,450 --> 00:15:22,950
scope we have is called a project it's

00:15:21,030 --> 00:15:24,330
essentially a tenant it actually used to

00:15:22,950 --> 00:15:27,390
be called a tenant but we change the

00:15:24,330 --> 00:15:29,970
name and that's just an abstraction to

00:15:27,390 --> 00:15:32,430
allow us to group virtual resources like

00:15:29,970 --> 00:15:34,980
a group of VMs or group of disk volumes

00:15:32,430 --> 00:15:38,070
together and designate access to each

00:15:34,980 --> 00:15:40,260
grouping on an individual basis and then

00:15:38,070 --> 00:15:42,330
it'll domain is sort of like a top-level

00:15:40,260 --> 00:15:44,400
project but it'll also allows you to

00:15:42,330 --> 00:15:47,280
have users and projects within the

00:15:44,400 --> 00:15:48,480
domain so that users can be sort of self

00:15:47,280 --> 00:15:51,900
organized they can create their own

00:15:48,480 --> 00:15:54,270
users create their own projects and then

00:15:51,900 --> 00:15:57,750
the system scope is a relatively new

00:15:54,270 --> 00:15:59,040
scope that we've we've just created and

00:15:57,750 --> 00:16:00,720
it's the scope you would use if you

00:15:59,040 --> 00:16:03,210
actually don't want to do a multi-tenant

00:16:00,720 --> 00:16:05,550
operative operation but you just want to

00:16:03,210 --> 00:16:08,640
manage something that's global across

00:16:05,550 --> 00:16:10,770
the entire cloud or should be hidden

00:16:08,640 --> 00:16:12,390
from tenant users like managing your

00:16:10,770 --> 00:16:15,230
compute hypervisors or managing your

00:16:12,390 --> 00:16:15,230
Keystone catalog

00:16:16,280 --> 00:16:21,900
so then role assignments are what puts

00:16:19,440 --> 00:16:23,850
the two things together so in a non

00:16:21,900 --> 00:16:27,380
multi tenant system you would just say

00:16:23,850 --> 00:16:29,370
user a has role B and that would define

00:16:27,380 --> 00:16:31,500
globally what they're allowed to do

00:16:29,370 --> 00:16:32,820
within the system but OpenStack is

00:16:31,500 --> 00:16:37,320
different because we have the scope

00:16:32,820 --> 00:16:43,650
components so you have to say user a has

00:16:37,320 --> 00:16:45,570
role beyond project C and so with this

00:16:43,650 --> 00:16:48,900
authorization component this is a more

00:16:45,570 --> 00:16:50,760
complete visualization of how a request

00:16:48,900 --> 00:16:54,120
will work in OpenStack so the clients

00:16:50,760 --> 00:16:56,190
along with their username and password

00:16:54,120 --> 00:16:58,440
they need to also request a scope from

00:16:56,190 --> 00:17:02,730
Keystone Keystone will send back a

00:16:58,440 --> 00:17:06,180
scoped token and then they will still

00:17:02,730 --> 00:17:07,410
pass that token back to the the service

00:17:06,180 --> 00:17:09,750
that they're trying to request a

00:17:07,410 --> 00:17:12,089
resource from the token still gets

00:17:09,750 --> 00:17:14,970
validated with Keystone but then the

00:17:12,089 --> 00:17:18,990
token is translated into a context for

00:17:14,970 --> 00:17:20,820
the service to evaluate and then without

00:17:18,990 --> 00:17:23,190
information the service itself is

00:17:20,820 --> 00:17:25,110
responsible for the

00:17:23,190 --> 00:17:26,580
citing whether the users authorised to

00:17:25,110 --> 00:17:29,070
do what they're trying to do which it

00:17:26,580 --> 00:17:32,370
does with a policy library and

00:17:29,070 --> 00:17:35,850
decorators on their API routes and so if

00:17:32,370 --> 00:17:39,090
the policy checker passes then the

00:17:35,850 --> 00:17:44,670
service can grant the resource that the

00:17:39,090 --> 00:17:46,790
user is requesting and this is kind of

00:17:44,670 --> 00:17:49,560
getting to the crux of the issue we're

00:17:46,790 --> 00:17:53,610
in the early days OpenStack in Keystone

00:17:49,560 --> 00:17:55,650
weren't designed so well and because

00:17:53,610 --> 00:17:57,390
components were not and still are not in

00:17:55,650 --> 00:17:59,730
a lot of cases really accounting for the

00:17:57,390 --> 00:18:02,070
scope thing in their policy rules and we

00:17:59,730 --> 00:18:03,810
until recently didn't even have a scope

00:18:02,070 --> 00:18:06,450
that could properly describe things that

00:18:03,810 --> 00:18:10,260
weren't tenant operations that were

00:18:06,450 --> 00:18:12,450
purely system level operations and so

00:18:10,260 --> 00:18:14,460
this came about in this long-standing

00:18:12,450 --> 00:18:16,620
issue we've we've documented it

00:18:14,460 --> 00:18:19,260
documented it in a bug report but it's

00:18:16,620 --> 00:18:22,770
less of a bug and more of an open it

00:18:19,260 --> 00:18:25,200
stack wide design flaw which is where

00:18:22,770 --> 00:18:27,840
most component services aren't really

00:18:25,200 --> 00:18:30,330
accounting for scope they're only

00:18:27,840 --> 00:18:32,640
accounting for role or there or there

00:18:30,330 --> 00:18:36,390
sort of abusing the the project scope in

00:18:32,640 --> 00:18:38,220
some way and the end result is that in a

00:18:36,390 --> 00:18:39,810
lot of cases having the admin role and

00:18:38,220 --> 00:18:41,850
some project actually means having the

00:18:39,810 --> 00:18:44,250
admin role on all projects everywhere

00:18:41,850 --> 00:18:46,920
across OpenStack which is obviously not

00:18:44,250 --> 00:18:49,200
really where you want to be and makes it

00:18:46,920 --> 00:18:54,810
really hard to grant people a

00:18:49,200 --> 00:18:56,760
fine-grained level of access control at

00:18:54,810 --> 00:19:00,300
this point Keystone does support this

00:18:56,760 --> 00:19:02,640
new system scope but it's a sort of a

00:19:00,300 --> 00:19:04,550
community effort now to start working

00:19:02,640 --> 00:19:07,050
with the other component projects and

00:19:04,550 --> 00:19:10,050
helping them to rewrite their default

00:19:07,050 --> 00:19:12,590
policies to understand it plus retrain

00:19:10,050 --> 00:19:14,910
all the users to use this new scope and

00:19:12,590 --> 00:19:16,950
rewrite everybody's applications to

00:19:14,910 --> 00:19:20,580
understand the new scope so it's a long

00:19:16,950 --> 00:19:22,650
it's an ongoing effort and then another

00:19:20,580 --> 00:19:24,180
problem with this is that the policy

00:19:22,650 --> 00:19:27,030
rules are managed in the server

00:19:24,180 --> 00:19:29,520
configuration by the cloud operator so

00:19:27,030 --> 00:19:31,860
you could have some role but you don't

00:19:29,520 --> 00:19:35,149
necessarily know what the role means

00:19:31,860 --> 00:19:38,580
unless it has a really descriptive name

00:19:35,149 --> 00:19:40,470
we're we're sort of violating that

00:19:38,580 --> 00:19:42,179
principle of discoverability because we

00:19:40,470 --> 00:19:46,940
can't really discover the specifics of

00:19:42,179 --> 00:19:49,860
what a role will let you do and then so

00:19:46,940 --> 00:19:52,409
not only can tenant users not know ahead

00:19:49,860 --> 00:19:53,870
of time how a role is defined they also

00:19:52,409 --> 00:19:56,610
can't really create roles themselves

00:19:53,870 --> 00:19:58,350
which means even if you're the

00:19:56,610 --> 00:20:00,509
administrator of one of these domains

00:19:58,350 --> 00:20:02,610
for your organization and you can create

00:20:00,509 --> 00:20:04,529
new users and new projects you can't

00:20:02,610 --> 00:20:07,649
really create new roles because you need

00:20:04,529 --> 00:20:09,120
to rely on the cloud operator to create

00:20:07,649 --> 00:20:10,980
the new role and define it for you

00:20:09,120 --> 00:20:12,019
across these configuration files with an

00:20:10,980 --> 00:20:16,139
openstack

00:20:12,019 --> 00:20:19,070
which is a tough job to do and of course

00:20:16,139 --> 00:20:26,460
again violates that self-service

00:20:19,070 --> 00:20:28,019
component so Keystone excels I think at

00:20:26,460 --> 00:20:29,730
the Identity Management part and the

00:20:28,019 --> 00:20:32,850
authentication part and it can be used

00:20:29,730 --> 00:20:34,919
outside of OpenStack in a lot of ways

00:20:32,850 --> 00:20:35,909
it's already it already can be used for

00:20:34,919 --> 00:20:39,210
things like staff for things like

00:20:35,909 --> 00:20:42,450
kubernetes for this for this component

00:20:39,210 --> 00:20:44,970
and with the introduction of the JSON

00:20:42,450 --> 00:20:46,740
web token format as a new format and

00:20:44,970 --> 00:20:49,830
with the advancements we're planning for

00:20:46,740 --> 00:20:51,600
expanding our sam'l support we could

00:20:49,830 --> 00:20:53,549
even see further adoption of Keystone

00:20:51,600 --> 00:20:54,419
for identity management for

00:20:53,549 --> 00:20:58,620
authentication

00:20:54,419 --> 00:21:00,120
but for the authorization part I think

00:20:58,620 --> 00:21:02,370
the future is kind of fuzzy because

00:21:00,120 --> 00:21:04,919
first of all not all applications

00:21:02,370 --> 00:21:07,289
outside of OpenStack really need this

00:21:04,919 --> 00:21:09,029
kind of multi tenant authorization model

00:21:07,289 --> 00:21:11,970
so we wouldn't know how to apply this

00:21:09,029 --> 00:21:15,210
scoped auerbach thing or in some cases

00:21:11,970 --> 00:21:17,850
they already have some existing model of

00:21:15,210 --> 00:21:22,049
multi-tenancy seth has the these buckets

00:21:17,850 --> 00:21:23,399
kubernetes has namespaces and the they

00:21:22,049 --> 00:21:28,500
don't really map one to one with

00:21:23,399 --> 00:21:30,480
Keystone's idea of a tenant so and plus

00:21:28,500 --> 00:21:32,370
the way we've we've delegated policy

00:21:30,480 --> 00:21:34,080
management to the OpenStack components

00:21:32,370 --> 00:21:36,480
and not really done it with in Keystone

00:21:34,080 --> 00:21:39,450
itself means it's sort of unclear how

00:21:36,480 --> 00:21:43,789
you would generalize this to defining

00:21:39,450 --> 00:21:43,789
roles outside of OpenStack

00:21:44,240 --> 00:21:49,050
and so similarly for Discovery it's a

00:21:47,430 --> 00:21:50,760
little bit unclear whether this would

00:21:49,050 --> 00:21:53,100
even ever be useful outside of an

00:21:50,760 --> 00:21:54,840
openstack context and there's also

00:21:53,100 --> 00:21:57,240
already other discovery mechanisms

00:21:54,840 --> 00:22:02,730
available so that part's a little bit

00:21:57,240 --> 00:22:03,900
unclear so in terms of what's next for

00:22:02,730 --> 00:22:06,540
Keystone we want to build on our

00:22:03,900 --> 00:22:08,130
successes with Keystone as an Identity

00:22:06,540 --> 00:22:10,620
Management Service Senna's on aesthetic

00:22:08,130 --> 00:22:13,710
authentication service by building more

00:22:10,620 --> 00:22:15,450
functionality into it and building what

00:22:13,710 --> 00:22:17,910
we're calling a proxy identity provider

00:22:15,450 --> 00:22:20,580
which could be used to translate

00:22:17,910 --> 00:22:22,680
authentication information from many

00:22:20,580 --> 00:22:25,980
external identity providers into some

00:22:22,680 --> 00:22:28,560
common format and we could build on our

00:22:25,980 --> 00:22:30,600
work with JSON web tokens are on sam'l

00:22:28,560 --> 00:22:33,360
to help support this and make this

00:22:30,600 --> 00:22:35,310
actually a more flexible service to be

00:22:33,360 --> 00:22:38,550
used with applications outside of

00:22:35,310 --> 00:22:40,140
OpenStack to address the authorization

00:22:38,550 --> 00:22:42,840
issues we're working with the OpenStack

00:22:40,140 --> 00:22:45,630
community to bring system scope to all

00:22:42,840 --> 00:22:47,070
these other components and to help them

00:22:45,630 --> 00:22:52,620
use them in these deep in their default

00:22:47,070 --> 00:22:55,110
policies we were also at one point

00:22:52,620 --> 00:22:58,170
working on the idea of bringing the

00:22:55,110 --> 00:23:01,830
management oh sorry we we are working on

00:22:58,170 --> 00:23:04,610
bringing management of quotas under

00:23:01,830 --> 00:23:07,230
under Keystone which sort of helps more

00:23:04,610 --> 00:23:10,310
bring a more consistent multi tenant

00:23:07,230 --> 00:23:12,240
user experience to OpenStack as a whole

00:23:10,310 --> 00:23:14,960
but beyond that we haven't really

00:23:12,240 --> 00:23:17,250
decided how we're going to address

00:23:14,960 --> 00:23:19,740
exposing role definitions to end-users

00:23:17,250 --> 00:23:21,510
we had thought at one point we could try

00:23:19,740 --> 00:23:23,310
to move more of this directly under

00:23:21,510 --> 00:23:26,130
Keystone rather than under the

00:23:23,310 --> 00:23:28,980
individual OpenStack services but it was

00:23:26,130 --> 00:23:31,140
kind of too big of a change and the

00:23:28,980 --> 00:23:33,270
design we had couldn't really cover the

00:23:31,140 --> 00:23:36,270
every use case that was out in the wild

00:23:33,270 --> 00:23:39,510
so um it was just too hard at the time

00:23:36,270 --> 00:23:43,020
and we also haven't really discussed how

00:23:39,510 --> 00:23:45,840
we could map this authorization model

00:23:43,020 --> 00:23:49,050
that we have in Keystone to other things

00:23:45,840 --> 00:23:51,060
outside of OpenStack in a way that

00:23:49,050 --> 00:23:53,810
wouldn't end up just being a one-off for

00:23:51,060 --> 00:23:53,810
every application

00:23:56,320 --> 00:24:04,750
so coming back to these cloud principles

00:24:00,940 --> 00:24:07,460
when people ask me about this sort of

00:24:04,750 --> 00:24:10,190
the downturn of OpenStack and this

00:24:07,460 --> 00:24:10,730
height bubble thing someone asked me

00:24:10,190 --> 00:24:13,580
once

00:24:10,730 --> 00:24:15,950
whether OpenStack could survive if all

00:24:13,580 --> 00:24:17,690
these big commercial companies if we all

00:24:15,950 --> 00:24:19,880
decided to pull out of OpenStack and it

00:24:17,690 --> 00:24:23,870
became more of like a hobbyist open

00:24:19,880 --> 00:24:27,290
source project and the answer is yes it

00:24:23,870 --> 00:24:29,420
would it would survive but it's just not

00:24:27,290 --> 00:24:31,190
the the type of project you really work

00:24:29,420 --> 00:24:33,350
on by yourself it's not something you

00:24:31,190 --> 00:24:35,660
install on your personal server in your

00:24:33,350 --> 00:24:37,640
garage and and just do things by

00:24:35,660 --> 00:24:41,060
yourself on its it's all about

00:24:37,640 --> 00:24:43,340
collaboration and collaboration is the

00:24:41,060 --> 00:24:45,290
way we do development it's the reason we

00:24:43,340 --> 00:24:48,440
are building the software it's the ways

00:24:45,290 --> 00:24:50,240
that the software is used and so as long

00:24:48,440 --> 00:24:52,850
as there is this need for a

00:24:50,240 --> 00:24:54,500
collaborative computing this way we're

00:24:52,850 --> 00:24:56,180
going to be building this and improving

00:24:54,500 --> 00:24:57,710
the ways we can we can automate our

00:24:56,180 --> 00:25:01,910
infrastructure so that we can actually

00:24:57,710 --> 00:25:05,030
start writing the more exciting things

00:25:01,910 --> 00:25:07,040
on top of this infrastructure and so at

00:25:05,030 --> 00:25:10,670
the center of that is is Keystone and so

00:25:07,040 --> 00:25:14,810
I find a lot of joy and working on that

00:25:10,670 --> 00:25:16,940
and helping to use Keystone to make

00:25:14,810 --> 00:25:18,710
supporting team collaboration easier and

00:25:16,940 --> 00:25:21,680
making it easier to automate your

00:25:18,710 --> 00:25:24,940
infrastructure and if you have any

00:25:21,680 --> 00:25:27,290
interest in collaborating and

00:25:24,940 --> 00:25:30,140
contributing to Keystone or if you have

00:25:27,290 --> 00:25:32,240
any questions on what I said today feel

00:25:30,140 --> 00:25:34,310
free to join us on freenode on our IRC

00:25:32,240 --> 00:25:37,940
channel or email us on the OpenStack

00:25:34,310 --> 00:25:39,530
discuss mailing list and that is all I

00:25:37,940 --> 00:25:42,020
had to say about Keystone and

00:25:39,530 --> 00:25:44,120
multi-tenancy so thank you everybody so

00:25:42,020 --> 00:25:47,080
much for for coming and listening to me

00:25:44,120 --> 00:25:47,080
thank you

00:25:47,500 --> 00:25:53,230
[Applause]

00:25:50,820 --> 00:25:54,880
um I think I have a few minutes for

00:25:53,230 --> 00:25:56,710
questions I don't necessarily want to

00:25:54,880 --> 00:25:58,480
hold everybody hostage here I know the

00:25:56,710 --> 00:26:01,059
beer is calling and the sunshine is

00:25:58,480 --> 00:26:03,790
calling but I also have stickers up here

00:26:01,059 --> 00:26:05,830
if anybody wants some Keystone mascot

00:26:03,790 --> 00:26:08,110
stickers or I'll also hang out here for

00:26:05,830 --> 00:26:10,540
a few minutes if you have any one-on-one

00:26:08,110 --> 00:26:15,429
questions you want to ask me are there

00:26:10,540 --> 00:26:18,020
any questions from the room all right

00:26:15,429 --> 00:26:22,490
thank you have a good day

00:26:18,020 --> 00:26:22,490

YouTube URL: https://www.youtube.com/watch?v=UI3Q0R55cVI


