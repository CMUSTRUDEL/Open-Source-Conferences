Title: openSUSE Conference 2019 - openSUSE Leap 15.x Kernels: Status Quo
Publication date: 2019-05-26
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2486-opensuse-leap-15-x-kernels-status-quo



The saga continues: after the legendary Leap 42.3 trilogy, we entered a new era of Leap 15.x.

This talk will look over the past Leap 15.0 kernel  and the ongoing Leap 15.1 kernel development, which new feature are armed, how they are managed and how they are processed.


The saga continues: after the legendary Leap 42.3 trilogy, we entered a new era of Leap 15.x.

This talk will look over the past Leap 15.0 kernel  and the ongoing Leap 15.1 kernel development, which new feature are armed, how they are managed and how they are processed.


Takashi Iwai
Captions: 
	00:00:06,240 --> 00:00:15,420
hi I'm Takashi so I'd be working for

00:00:10,280 --> 00:00:18,150
Suzy fairly for a long time and still

00:00:15,420 --> 00:00:21,600
I'm working for the cornea stuff and

00:00:18,150 --> 00:00:26,730
this year again my talk is about the

00:00:21,600 --> 00:00:29,220
colonel um so this is outline of my talk

00:00:26,730 --> 00:00:33,059
today so at Versailles I've started

00:00:29,220 --> 00:00:36,000
something clarifying meters and followed

00:00:33,059 --> 00:00:41,370
by the what's new in the deep 15:1

00:00:36,000 --> 00:00:43,890
kernel and then going to the Suzy were

00:00:41,370 --> 00:00:48,180
open to the kernel development process

00:00:43,890 --> 00:00:51,270
and asked something to show how the

00:00:48,180 --> 00:00:56,640
things get fixed and how the things get

00:00:51,270 --> 00:01:01,410
tested so that our first topic is about

00:00:56,640 --> 00:01:05,850
the - meters that means just kind of FAQ

00:01:01,410 --> 00:01:09,960
about our carnal and here's my talk

00:01:05,850 --> 00:01:13,650
about is about open sea deep and SUSE

00:01:09,960 --> 00:01:18,060
Linux Enterprise and one with a common

00:01:13,650 --> 00:01:22,369
question is well deep deep and is the

00:01:18,060 --> 00:01:29,040
kernels and they're same identical

00:01:22,369 --> 00:01:31,619
well it's yes and no yes the post pack

00:01:29,040 --> 00:01:37,260
is a built from the very source same

00:01:31,619 --> 00:01:39,540
source tree however its Meccano and deep

00:01:37,260 --> 00:01:43,320
canal they have major differences in the

00:01:39,540 --> 00:01:45,510
binary form and first of all the kernel

00:01:43,320 --> 00:01:49,080
configurations they're completely

00:01:45,510 --> 00:01:52,020
different between to the Civic's

00:01:49,080 --> 00:01:55,290
Enterprise Carnell help reduce kernel

00:01:52,020 --> 00:01:58,470
configuration why openSUSE deep contains

00:01:55,290 --> 00:02:02,640
almost whole enablement of the all

00:01:58,470 --> 00:02:05,729
features and it's really has a speech

00:02:02,640 --> 00:02:08,640
for on two packages one is a supported

00:02:05,729 --> 00:02:10,769
anodized unsupported modules and while

00:02:08,640 --> 00:02:13,739
deep has only one kind of package

00:02:10,769 --> 00:02:15,380
contains everything and both packages

00:02:13,739 --> 00:02:18,400
are built in different environments

00:02:15,380 --> 00:02:22,510
build build build services

00:02:18,400 --> 00:02:27,670
IBS internet service versus OBS open to

00:02:22,510 --> 00:02:31,150
debate service and then stay carnal on

00:02:27,670 --> 00:02:34,269
supports live patching back a graft

00:02:31,150 --> 00:02:37,569
while susie opposite lip doesn't provide

00:02:34,269 --> 00:02:40,629
that yet so they're also the same they

00:02:37,569 --> 00:02:43,420
are built from the very same source tree

00:02:40,629 --> 00:02:48,340
the resultant binary package is a

00:02:43,420 --> 00:02:52,599
completely different and maybe that is

00:02:48,340 --> 00:02:59,019
the most commonly asked or sins in the

00:02:52,599 --> 00:03:03,760
open society 15/0 5114 support web

00:02:59,019 --> 00:03:08,799
kernel that is very very very old yeah

00:03:03,760 --> 00:03:12,819
yes it's old and actually our looking

00:03:08,799 --> 00:03:16,709
our history tips to the openSUSE deep

00:03:12,819 --> 00:03:21,670
takes relatively old color basis so

00:03:16,709 --> 00:03:25,239
oppositely 42 to takes took 42 for

00:03:21,670 --> 00:03:27,669
Calabasas and oppositely 15 0 and 1 are

00:03:25,239 --> 00:03:29,310
based on for that web kernel that's

00:03:27,669 --> 00:03:34,030
correct

00:03:29,310 --> 00:03:39,280
however we took really huge amount of

00:03:34,030 --> 00:03:43,629
patches on top of that and now well open

00:03:39,280 --> 00:03:50,040
to the big 15 0 we already took 22,000

00:03:43,629 --> 00:03:50,040
patches on top now guess watch for 51

00:03:51,540 --> 00:04:00,430
46,000 so almost 50,000 patches on top

00:03:55,750 --> 00:04:03,099
and that's why it is no longer for the

00:04:00,430 --> 00:04:06,569
12 kernel it is a kind of question of

00:04:03,099 --> 00:04:10,930
them ship of t-cells that's a famous

00:04:06,569 --> 00:04:14,799
thought experiment so this is no longer

00:04:10,930 --> 00:04:18,370
or is now for the 12 but quite yeah

00:04:14,799 --> 00:04:24,130
containing so much different components

00:04:18,370 --> 00:04:28,270
on top and is it deep lake are now

00:04:24,130 --> 00:04:31,120
stable in that case the answer is yes

00:04:28,270 --> 00:04:33,280
so actually this is a reason they're

00:04:31,120 --> 00:04:39,430
very much reason why we take their old

00:04:33,280 --> 00:04:41,860
color code base and that's another point

00:04:39,430 --> 00:04:45,069
of the about stability is that we

00:04:41,860 --> 00:04:48,300
guarantee as a kind of guarantee to

00:04:45,069 --> 00:04:52,000
provide a constant consistent kernel ABI

00:04:48,300 --> 00:04:54,819
that means if you build cut a model

00:04:52,000 --> 00:04:57,460
package once then this is this package

00:04:54,819 --> 00:05:01,270
can be built for all corners after

00:04:57,460 --> 00:05:05,500
upgrades updates of the the same the

00:05:01,270 --> 00:05:09,550
person and we do proactive fix back

00:05:05,500 --> 00:05:13,090
backporting fixes and also that are from

00:05:09,550 --> 00:05:16,630
there several trusted sources and we do

00:05:13,090 --> 00:05:20,650
CI and QA testing regularly on the

00:05:16,630 --> 00:05:25,960
kernel so please continue to the next

00:05:20,650 --> 00:05:28,630
thing that what's new in the 51 so as I

00:05:25,960 --> 00:05:34,000
said there are so many changes in the

00:05:28,630 --> 00:05:36,789
kernel in the 51 and this is a table

00:05:34,000 --> 00:05:38,770
showing the house so which directory is

00:05:36,789 --> 00:05:42,810
top directories in the kernel contain

00:05:38,770 --> 00:05:45,849
the changes and as you can see that

00:05:42,810 --> 00:05:49,630
majority of change is happy have been

00:05:45,849 --> 00:05:52,360
done to the drivers this astonishing

00:05:49,630 --> 00:05:58,810
over 86 percent of the source code

00:05:52,360 --> 00:06:02,259
changes so we in the end we almost had 5

00:05:58,810 --> 00:06:05,860
million lines of changes and about at

00:06:02,259 --> 00:06:10,860
86% and that this is not surprising

00:06:05,860 --> 00:06:16,300
because in general Drive device drivers

00:06:10,860 --> 00:06:19,750
they tend to have well a bunch of

00:06:16,300 --> 00:06:22,449
changes in the coach while the important

00:06:19,750 --> 00:06:25,389
changes like memory management core a

00:06:22,449 --> 00:06:28,360
file system there changes amount of

00:06:25,389 --> 00:06:32,199
changes as charge some small however

00:06:28,360 --> 00:06:35,490
they are important and how deep and is

00:06:32,199 --> 00:06:39,219
reka notes we are kind of conservative

00:06:35,490 --> 00:06:42,520
so we don't touch too much about the

00:06:39,219 --> 00:06:45,590
core part intensity

00:06:42,520 --> 00:06:47,870
while we are backporting many things to

00:06:45,590 --> 00:06:50,569
support the new features of the new

00:06:47,870 --> 00:06:53,150
machines or new systems that's there

00:06:50,569 --> 00:07:00,529
with one of the reasons that we get

00:06:53,150 --> 00:07:04,759
these statistics so now 51 so let's

00:07:00,529 --> 00:07:07,279
start from the server side we had as you

00:07:04,759 --> 00:07:09,909
can guess many many storage and file

00:07:07,279 --> 00:07:12,830
system block there and network updates

00:07:09,909 --> 00:07:17,810
most of us can see so recent sketchy

00:07:12,830 --> 00:07:21,169
drivers have been updated and infinite

00:07:17,810 --> 00:07:24,590
bunch of EMA and one another interesting

00:07:21,169 --> 00:07:27,289
thing is a any BME of a public state is

00:07:24,590 --> 00:07:30,169
required for net up stuff and we catch

00:07:27,289 --> 00:07:32,020
up upstream and first the file system

00:07:30,169 --> 00:07:35,270
got also a bunch of updates especially

00:07:32,020 --> 00:07:39,860
batteries this is a our default file

00:07:35,270 --> 00:07:41,539
system and also a clear XSS xe4 and at

00:07:39,860 --> 00:07:45,919
this time we got a bunch of big cache

00:07:41,539 --> 00:07:50,509
updates and empty rate and safe and CIFS

00:07:45,919 --> 00:07:53,270
and block there that now we are still I

00:07:50,509 --> 00:07:57,349
think we still didn't switch default to

00:07:53,270 --> 00:08:01,009
multi cue but we got the updates to the

00:07:57,349 --> 00:08:04,460
most recent college for them block

00:08:01,009 --> 00:08:08,149
memory queue and that includes a PF q io

00:08:04,460 --> 00:08:10,129
schedule and network yeah of course the

00:08:08,149 --> 00:08:14,360
network core has been updated and

00:08:10,129 --> 00:08:16,699
Ethernet yeah protocol cabin Chelsea of

00:08:14,360 --> 00:08:22,879
Cisco well you name it most of the

00:08:16,699 --> 00:08:27,349
vendors have been updated their desktop

00:08:22,879 --> 00:08:30,860
usage the first of all that is video

00:08:27,349 --> 00:08:34,459
driver TM DRM stack updates that we

00:08:30,860 --> 00:08:38,560
raise the whole code up to 4.19 a later

00:08:34,459 --> 00:08:43,159
stage and actually this is a very much

00:08:38,560 --> 00:08:48,010
many many changes and this is about 20%

00:08:43,159 --> 00:08:52,480
of the whole 50,000 lines of changes

00:08:48,010 --> 00:08:54,459
and also Wi-Fi drivers we almost we

00:08:52,480 --> 00:08:56,740
update almost the whole Wi-Fi drivers

00:08:54,459 --> 00:09:01,750
and Wi-Fi stack up to fall of nineteen

00:08:56,740 --> 00:09:05,079
plus and storage MMC SD and they're

00:09:01,750 --> 00:09:08,110
happy nap today and sound drivers that's

00:09:05,079 --> 00:09:11,920
my area and so I update upgraded whole

00:09:08,110 --> 00:09:21,339
HD audio USB audio too hype zero or even

00:09:11,920 --> 00:09:26,350
5.1 and then bus platforms etc we got a

00:09:21,339 --> 00:09:30,519
thunderbolt update PCI hot black and FGP

00:09:26,350 --> 00:09:34,050
a small pitch still and TPM wanted to to

00:09:30,519 --> 00:09:36,639
the all things and oddity memo depend ad

00:09:34,050 --> 00:09:42,070
bandwidth allocation stuff I was a

00:09:36,639 --> 00:09:43,839
hardware crypto and x86 HW my at the IBM

00:09:42,070 --> 00:09:46,420
I this is a four word app tops and

00:09:43,839 --> 00:09:48,699
desktops and virtual machines

00:09:46,420 --> 00:09:52,779
KVM hyper-v is and they have been

00:09:48,699 --> 00:09:55,750
updated and security camera and another

00:09:52,779 --> 00:09:59,350
interesting thing is AMD SE v that is

00:09:55,750 --> 00:10:04,449
our secure encrypted version machine

00:09:59,350 --> 00:10:07,029
either water running and tools as a

00:10:04,449 --> 00:10:13,769
power of n PPF of course these staff

00:10:07,029 --> 00:10:17,769
have been updated pictures and for a x86

00:10:13,769 --> 00:10:21,420
we had support for the recent new a new

00:10:17,769 --> 00:10:24,190
recent Intel and AMD chipsets like our

00:10:21,420 --> 00:10:28,050
life or whatever name whiskey whiskey

00:10:24,190 --> 00:10:32,769
decanter lake or which also ice lake and

00:10:28,050 --> 00:10:36,399
also AMD resins and to sing well then to

00:10:32,769 --> 00:10:39,220
is that just an I'm 64

00:10:36,399 --> 00:10:42,670
ah well javi there are so many changes

00:10:39,220 --> 00:10:45,010
and I cannot be stopped so if you if you

00:10:42,670 --> 00:10:47,760
have a question here is a Matias Braga

00:10:45,010 --> 00:10:52,149
then he can you can answer yeah or

00:10:47,760 --> 00:10:56,050
something's broken that it's it's

00:10:52,149 --> 00:10:57,750
because his updates and arms

00:10:56,050 --> 00:11:02,870
32 pitch

00:10:57,750 --> 00:11:06,930
for that we didn't have much updates but

00:11:02,870 --> 00:11:10,139
backports but only casual fixes that s

00:11:06,930 --> 00:11:14,910
ported spotted and from the trusted

00:11:10,139 --> 00:11:17,750
stable tree or fixes and 32 pitch is

00:11:14,910 --> 00:11:21,329
provided only for deep this is not for

00:11:17,750 --> 00:11:25,889
Susan's enterprise and on the other hand

00:11:21,329 --> 00:11:28,949
purpose is 64 and s 319 they are mostly

00:11:25,889 --> 00:11:32,939
for SUSE Linux Enterprise and there they

00:11:28,949 --> 00:11:35,100
got also updates also always provide I

00:11:32,939 --> 00:11:37,740
think we provide on the end these

00:11:35,100 --> 00:11:42,680
architectures package also for ports on

00:11:37,740 --> 00:11:46,759
open sensitive so continue on SUSE Linux

00:11:42,680 --> 00:11:50,610
kernel development how that happens so

00:11:46,759 --> 00:11:53,300
not surprisingly we managed that engage

00:11:50,610 --> 00:11:59,660
yes of course everything is on the gauge

00:11:53,300 --> 00:12:03,300
and what different what is different in

00:11:59,660 --> 00:12:05,370
scan Suzy opens to say kernel source

00:12:03,300 --> 00:12:10,759
management from other distribution is

00:12:05,370 --> 00:12:14,189
that we keep all codes changes in

00:12:10,759 --> 00:12:17,490
individual patches instead of applying

00:12:14,189 --> 00:12:20,459
the patch on that get color or 3 instead

00:12:17,490 --> 00:12:23,670
did can repost week contains Pachi Pachi

00:12:20,459 --> 00:12:27,779
Pachi Pachi Pachi Pachi files and this

00:12:23,670 --> 00:12:30,829
is applied on dynamically as a building

00:12:27,779 --> 00:12:34,680
a package Allah so just like a huge and

00:12:30,829 --> 00:12:36,809
this series that cough contains a distal

00:12:34,680 --> 00:12:39,959
patches so which patch is applied first

00:12:36,809 --> 00:12:44,699
and then so on and the repository

00:12:39,959 --> 00:12:47,670
contains a patch files we when you do

00:12:44,699 --> 00:12:50,759
catch the kernel source packages and you

00:12:47,670 --> 00:12:52,800
can find that over 97% of patches are

00:12:50,759 --> 00:12:55,589
from upstream so I mean this means

00:12:52,800 --> 00:12:59,819
upstream the industry and that is a

00:12:55,589 --> 00:13:01,529
result we we are we try hard to push

00:12:59,819 --> 00:13:06,000
upstream first rule

00:13:01,529 --> 00:13:09,690
so we basically accept only parties that

00:13:06,000 --> 00:13:12,680
are upstream or that will be up strange

00:13:09,690 --> 00:13:15,300
and the recent changes in the

00:13:12,680 --> 00:13:20,010
development process is that when we

00:13:15,300 --> 00:13:22,740
apply throated patches and what is

00:13:20,010 --> 00:13:26,160
assaulted patches and that means

00:13:22,740 --> 00:13:30,330
basically we apply the patches in order

00:13:26,160 --> 00:13:33,390
the same order like an upstream tree so

00:13:30,330 --> 00:13:38,130
suppose that upstream the industry had

00:13:33,390 --> 00:13:42,150
changes a b c and then we applied

00:13:38,130 --> 00:13:46,550
patches a B and C that order that's all

00:13:42,150 --> 00:13:52,080
that is assorted patches that means we

00:13:46,550 --> 00:13:56,070
for example when we had the patch B and

00:13:52,080 --> 00:13:58,950
C first applies and we found out that

00:13:56,070 --> 00:14:01,500
the patch is missing then we have we

00:13:58,950 --> 00:14:06,120
have to apply patch a and in that case

00:14:01,500 --> 00:14:12,780
we don't apply patch BC a instead we

00:14:06,120 --> 00:14:16,320
apply patch a B and C so for that always

00:14:12,780 --> 00:14:19,770
we ordering the patches to adapt the

00:14:16,320 --> 00:14:23,100
upstream the topological order so that

00:14:19,770 --> 00:14:29,100
is a key of the assorted pages and why

00:14:23,100 --> 00:14:35,250
we do that because by keeping the sorted

00:14:29,100 --> 00:14:40,470
order that each patch is becomes closer

00:14:35,250 --> 00:14:43,440
to the original form and this has a big

00:14:40,470 --> 00:14:47,250
married edge that makes the back port

00:14:43,440 --> 00:14:50,220
easier but what cleaner and also it

00:14:47,250 --> 00:14:52,380
makes easier to catch any backward

00:14:50,220 --> 00:14:55,830
mistakes you can just compare the patch

00:14:52,380 --> 00:15:01,620
the backported patches patch and over

00:14:55,830 --> 00:15:05,580
the original commit so there on how to

00:15:01,620 --> 00:15:09,870
expand patches yeah we have a 50,000

00:15:05,580 --> 00:15:12,510
pages as I said and this may take really

00:15:09,870 --> 00:15:17,370
long time

00:15:12,510 --> 00:15:21,870
if you run coach script for this 50,000

00:15:17,370 --> 00:15:27,480
pages I major - and that takes six hours

00:15:21,870 --> 00:15:28,260
auntie set machine six hours patch-up

00:15:27,480 --> 00:15:32,580
dying

00:15:28,260 --> 00:15:35,520
it's not good for the daily job morning

00:15:32,580 --> 00:15:36,650
aplenty patches and sleeping the days

00:15:35,520 --> 00:15:40,860
over

00:15:36,650 --> 00:15:45,720
it's a good job so that death can be

00:15:40,860 --> 00:15:48,180
actually faster so we had already a

00:15:45,720 --> 00:15:52,260
script so called a sequence patch and

00:15:48,180 --> 00:15:57,810
that applies Apaches and just like huge

00:15:52,260 --> 00:16:01,830
but yeah optimized way and this

00:15:57,810 --> 00:16:06,780
takes nine minutes 25 minutes for 50,000

00:16:01,830 --> 00:16:11,670
patches it's faster yeah but still take

00:16:06,780 --> 00:16:18,980
time but there is a trick the script

00:16:11,670 --> 00:16:22,230
catch fast mode and what this mode do

00:16:18,980 --> 00:16:26,100
the problem of the previous approach was

00:16:22,230 --> 00:16:28,890
that script invokes patch program at

00:16:26,100 --> 00:16:31,730
each time that means 50,000 times patch

00:16:28,890 --> 00:16:35,190
was invoked so patch program executive

00:16:31,730 --> 00:16:37,680
that took so much so in many time so

00:16:35,190 --> 00:16:40,080
instead this mode will gather all

00:16:37,680 --> 00:16:43,160
fifties are the patches in a single

00:16:40,080 --> 00:16:47,700
patch file and fees to patch program

00:16:43,160 --> 00:16:53,040
then that works then that's 80 seconds

00:16:47,700 --> 00:16:56,610
good however the drawback of death this

00:16:53,040 --> 00:17:03,630
approach is that you cannot roll back to

00:16:56,610 --> 00:17:08,190
their arm patch that fails to apply is

00:17:03,630 --> 00:17:11,400
there any better way yeah there is the

00:17:08,190 --> 00:17:15,090
reason three measures of developed a

00:17:11,400 --> 00:17:17,910
program called rapid coach and this is a

00:17:15,090 --> 00:17:20,190
program written by rust and there's

00:17:17,910 --> 00:17:21,870
apply the patches in parallel and also

00:17:20,190 --> 00:17:26,280
supports a rollback at a phase

00:17:21,870 --> 00:17:29,220
pass failure and if you use that program

00:17:26,280 --> 00:17:31,860
on my machine that's with Edco machine

00:17:29,220 --> 00:17:34,110
it takes only three seconds four five

00:17:31,860 --> 00:17:35,610
thousand apply applying five satyr per

00:17:34,110 --> 00:17:38,520
thousand patties

00:17:35,610 --> 00:17:45,930
instead of six hours that's really

00:17:38,520 --> 00:17:47,970
awesome then Susan ld3 this is publicly

00:17:45,930 --> 00:17:52,320
available and you can see that Colonel

00:17:47,970 --> 00:17:54,960
de Sousa calm at anytime and this key

00:17:52,320 --> 00:18:00,120
tree contains several different branches

00:17:54,960 --> 00:18:05,070
and each branch most RIA each branch

00:18:00,120 --> 00:18:08,910
represents for their arm each so to say

00:18:05,070 --> 00:18:13,650
the product like it's a 15 what is a 15

00:18:08,910 --> 00:18:15,630
sp1 opens is a 1503 51 and also Tambo

00:18:13,650 --> 00:18:19,440
which is taken from their stable branch

00:18:15,630 --> 00:18:22,980
that's that's tracks to that our stable

00:18:19,440 --> 00:18:27,000
upstream stable kernel also there is a

00:18:22,980 --> 00:18:30,800
master and a hedge this tracking the the

00:18:27,000 --> 00:18:34,020
industry there's currently 5.2 lc1 and

00:18:30,800 --> 00:18:38,250
also there is a vanilla and Enix next

00:18:34,020 --> 00:18:39,960
branches that automatically fetched tea

00:18:38,250 --> 00:18:44,150
tree from the upstream and just just

00:18:39,960 --> 00:18:49,340
that these are all just for testing and

00:18:44,150 --> 00:18:54,840
it worked role and as we do

00:18:49,340 --> 00:18:56,310
yeah kind of github Dyke or normal git

00:18:54,840 --> 00:18:58,560
workflow yes

00:18:56,310 --> 00:19:01,140
taking the each branch maintainer takes

00:18:58,560 --> 00:19:04,730
a pull request from the each developer

00:19:01,140 --> 00:19:09,630
and merge after integration test and

00:19:04,730 --> 00:19:12,990
review that's the way there is a cable

00:19:09,630 --> 00:19:15,810
to botch running that's testing the

00:19:12,990 --> 00:19:18,930
builds and also to doing the sanity

00:19:15,810 --> 00:19:21,570
checks like patch can be applied cleanly

00:19:18,930 --> 00:19:24,900
or something something wrong contained

00:19:21,570 --> 00:19:27,000
and so on and if they're everything's

00:19:24,900 --> 00:19:29,190
okay then cab it both sets that's yes

00:19:27,000 --> 00:19:31,620
you it's this branch can be merged and

00:19:29,190 --> 00:19:35,220
branch mint that reviews and merge that

00:19:31,620 --> 00:19:39,300
stuff and what's it to be noted that is

00:19:35,220 --> 00:19:42,510
the branch some branches are shared by

00:19:39,300 --> 00:19:44,850
other branches for example is 315 it's

00:19:42,510 --> 00:19:48,630
shared by many other branches and this

00:19:44,850 --> 00:19:52,680
their branches or automatically merge to

00:19:48,630 --> 00:19:56,400
branches this is like like that

00:19:52,680 --> 00:19:57,510
so as the branch is merged to sa 12 SP 4

00:19:56,400 --> 00:20:03,870
and that's it

00:19:57,510 --> 00:20:09,860
15 sp1 and SS whereas even SP 5 and sf15

00:20:03,870 --> 00:20:09,860
is type 2 opposite 15 0 and so on

00:20:11,330 --> 00:20:19,320
that's for users and developers one good

00:20:15,210 --> 00:20:21,420
thing to know it's kind of the day this

00:20:19,320 --> 00:20:24,660
is really I would recommend to remember

00:20:21,420 --> 00:20:29,670
and actually this is a kind of package

00:20:24,660 --> 00:20:34,170
built from the very latest can you get

00:20:29,670 --> 00:20:37,140
branch and in obvious it's updated daily

00:20:34,170 --> 00:20:40,290
so every day it's updated and fetch the

00:20:37,140 --> 00:20:44,370
very latest git repository and rebuilt

00:20:40,290 --> 00:20:48,270
the package and that obvious Colonel

00:20:44,370 --> 00:20:51,150
Colin as a 15 words this kernel : branch

00:20:48,270 --> 00:20:55,920
that contains the county package kind of

00:20:51,150 --> 00:20:58,230
the day so why this is good so you can

00:20:55,920 --> 00:21:02,400
install kind of the day package from

00:20:58,230 --> 00:21:07,170
other branches tool that means if you

00:21:02,400 --> 00:21:09,600
have a brand new laptop that's open 51

00:21:07,170 --> 00:21:13,820
still doesn't support then you can

00:21:09,600 --> 00:21:16,290
install openSUSE tumble wait kernel and

00:21:13,820 --> 00:21:20,130
buried it is one from the kernel stable

00:21:16,290 --> 00:21:24,150
tree or if you have a regression after

00:21:20,130 --> 00:21:26,640
upgrading to the openSUSE leap 51 then

00:21:24,150 --> 00:21:30,090
you can just install the old opposite

00:21:26,640 --> 00:21:33,750
baby 15 0 kernel on top of your 51

00:21:30,090 --> 00:21:36,870
system and see whether it there problem

00:21:33,750 --> 00:21:39,750
gets fixed by that and if yes then it

00:21:36,870 --> 00:21:42,630
this is a canary aggression of 51 you

00:21:39,750 --> 00:21:46,490
can report that then we see what change

00:21:42,630 --> 00:21:46,490
a done and so on

00:21:46,740 --> 00:21:53,250
once it to be noted that you shh you'd

00:21:50,520 --> 00:21:56,580
better to increase the number of multi

00:21:53,250 --> 00:21:59,760
installable damage in zip conf file

00:21:56,580 --> 00:22:00,650
before hands as they poach i think there

00:21:59,760 --> 00:22:03,440
are

00:22:00,650 --> 00:22:06,440
you can install two or three kernels on

00:22:03,440 --> 00:22:15,440
the system but usually I increase that

00:22:06,440 --> 00:22:18,890
number of to five or six so bug fixes so

00:22:15,440 --> 00:22:22,940
as I said the deep were the in general

00:22:18,890 --> 00:22:23,480
openSUSE we update the bug fixes on

00:22:22,940 --> 00:22:28,550
bhaiyya

00:22:23,480 --> 00:22:31,880
our hands and usually we take that back

00:22:28,550 --> 00:22:37,130
fixes from upstream college and how we

00:22:31,880 --> 00:22:39,410
can find that bug fix that nowadays it's

00:22:37,130 --> 00:22:42,470
the kind of developer is supposed to

00:22:39,410 --> 00:22:42,950
mark fix it stack if there's some dead

00:22:42,470 --> 00:22:44,840
bug

00:22:42,950 --> 00:22:49,370
if the commit it's supposed to be a

00:22:44,840 --> 00:22:53,090
regression fix then there is a script

00:22:49,370 --> 00:22:56,120
program called get fixes and this

00:22:53,090 --> 00:23:01,850
program can scan the upstream changes

00:22:56,120 --> 00:23:05,390
and reports which which comic may fix

00:23:01,850 --> 00:23:09,830
our the back that's found in our kernel

00:23:05,390 --> 00:23:12,530
and this is one way to find out their

00:23:09,830 --> 00:23:15,790
fixes from the upstream another way is

00:23:12,530 --> 00:23:18,680
just looking at their stable countries

00:23:15,790 --> 00:23:22,240
and currently there are hold at 14 and

00:23:18,680 --> 00:23:25,280
4.19 long time support kernel and we

00:23:22,240 --> 00:23:28,610
there is script also get fixes can take

00:23:25,280 --> 00:23:32,360
a look at that and see which pair which

00:23:28,610 --> 00:23:37,190
commits a missing possibly fix their

00:23:32,360 --> 00:23:39,260
problem and if we have a problem then of

00:23:37,190 --> 00:23:42,380
course you can reproach Susie or

00:23:39,260 --> 00:23:45,880
openSUSE bugzilla or we can take a look

00:23:42,380 --> 00:23:45,880
at upstream bug trackers too

00:23:46,510 --> 00:23:55,130
and now the some this is something new

00:23:51,400 --> 00:23:58,520
now we have a lightweight CI tests for

00:23:55,130 --> 00:24:03,050
the kernel and actually this is running

00:23:58,520 --> 00:24:07,070
hourly on the ditch on my my desktop

00:24:03,050 --> 00:24:09,470
it's not a cloud and it's fetched their

00:24:07,070 --> 00:24:11,350
gate college and if something changed

00:24:09,470 --> 00:24:16,710
and running that

00:24:11,350 --> 00:24:21,900
and it tests on the KVM and sports duty

00:24:16,710 --> 00:24:25,960
to the desktop system and doing also

00:24:21,900 --> 00:24:28,660
suspend resume testing and there are

00:24:25,960 --> 00:24:30,940
different images built from the

00:24:28,660 --> 00:24:34,510
different file systems and also Effie

00:24:30,940 --> 00:24:38,650
legacy boots and different to M graphics

00:24:34,510 --> 00:24:42,670
backends and so that helps sometimes to

00:24:38,650 --> 00:24:47,770
catch their big question as early as

00:24:42,670 --> 00:24:50,740
possible and another new thing is that

00:24:47,770 --> 00:24:54,400
we deploy open QA test for the color of

00:24:50,740 --> 00:24:59,770
the day so thanks to the QA team

00:24:54,400 --> 00:25:03,430
there's we they take certain branches

00:24:59,770 --> 00:25:06,580
coming to essay 15 as a 15 sp12 sp4 and

00:25:03,430 --> 00:25:10,530
something else and they taste kind of

00:25:06,580 --> 00:25:13,960
the day so every day basically and

00:25:10,530 --> 00:25:17,070
that's open to a so it's karma tree the

00:25:13,960 --> 00:25:21,550
immediate only on virtual machine and

00:25:17,070 --> 00:25:28,660
test scenarios are since seen also

00:25:21,550 --> 00:25:30,700
limited current is a test on the LTP so

00:25:28,660 --> 00:25:33,310
that's basically all my topics ten

00:25:30,700 --> 00:25:35,890
resource their candidacy datacom and

00:25:33,310 --> 00:25:38,380
obvious repository is there so if we

00:25:35,890 --> 00:25:43,360
some if we want to find something that

00:25:38,380 --> 00:25:47,020
you can take a look at dance okay so

00:25:43,360 --> 00:25:51,180
that's all any questions or a bash into

00:25:47,020 --> 00:25:51,180
the corner packages or something else

00:26:01,179 --> 00:26:09,110
is not not directly a question but more

00:26:05,390 --> 00:26:13,540
like a comment so I think as a openSUSE

00:26:09,110 --> 00:26:13,540
community we should think about how to

00:26:13,570 --> 00:26:20,990
how to manage how to handle requests for

00:26:17,809 --> 00:26:24,290
open source and deep kernel development

00:26:20,990 --> 00:26:26,690
because I think we we use an open susan

00:26:24,290 --> 00:26:29,059
if we use this lis kernel which i think

00:26:26,690 --> 00:26:31,970
makes a lot of sense because of the

00:26:29,059 --> 00:26:34,549
stability but we sometimes it's a

00:26:31,970 --> 00:26:37,790
problem then after what someone came and

00:26:34,549 --> 00:26:40,640
said hey this driver or this peripheral

00:26:37,790 --> 00:26:43,460
is not working this is a bug and we told

00:26:40,640 --> 00:26:45,290
him no you can't we can't the at least

00:26:43,460 --> 00:26:48,880
driver now because it's already closed

00:26:45,290 --> 00:26:52,190
so we I think we would need to like

00:26:48,880 --> 00:26:55,490
formalized in some way the possibility

00:26:52,190 --> 00:26:58,690
for the community to create feature

00:26:55,490 --> 00:27:00,429
requests against lip kernel to include

00:26:58,690 --> 00:27:05,059
their needs

00:27:00,429 --> 00:27:09,290
yeah thank ya very much I agree that we

00:27:05,059 --> 00:27:12,590
used to have the open page in the past

00:27:09,290 --> 00:27:17,059
but it was discontinued I think so the

00:27:12,590 --> 00:27:21,320
current way to request for the open SUSE

00:27:17,059 --> 00:27:27,559
deep is either buck Taylor just open the

00:27:21,320 --> 00:27:29,690
bacterial entry to report that or ask on

00:27:27,559 --> 00:27:31,370
the open Susan Karnow mailing list or

00:27:29,690 --> 00:27:35,030
factory maybe the car obviously the

00:27:31,370 --> 00:27:37,130
corner is better but yes well it's it

00:27:35,030 --> 00:27:40,640
way better to have a more formal way

00:27:37,130 --> 00:27:44,720
yeah because we want to track the

00:27:40,640 --> 00:27:51,010
feature request itself yeah but I think

00:27:44,720 --> 00:27:51,010
this yeah maybe it's above my hands

00:28:00,340 --> 00:28:07,829
good okay thank you Thank You Watterson

00:28:03,790 --> 00:28:07,829

YouTube URL: https://www.youtube.com/watch?v=oaJd2E6owyU


