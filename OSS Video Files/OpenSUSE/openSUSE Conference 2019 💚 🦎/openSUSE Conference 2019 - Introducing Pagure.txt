Title: openSUSE Conference 2019 - Introducing Pagure
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2432-introducing-pagure

A new lightweight and powerful Git-centered forge, now in openSUSE!

Pagure is a new, full-featured Git repository service for the web, written in Python. It is similar to other popular Git-based forges, allowing developers and contributors to share and collaborate on code and content. It also has some unique features not found in any other Git forge providing the basis for decentralized, federated software code hosting and development.

It's fully free and open source software, and it's included in openSUSE Leap 15.1 and openSUSE Tumbleweed!

The agenda of the presentation:
- What is Pagure
- History of Pagure
- Current state and features of Pagure
- Current ecosystem around Pagure
- Plans for the future of Pagure
- Demo of Pagure on openSUSE

Pagure is a new, full-featured Git repository service for the web, written in Python. It is similar to other popular Git-based forges, allowing developers and contributors to share and collaborate on code and content. It also has some unique features not found in any other Git forge providing the basis for decentralized, federated software code hosting and development.

It's fully free and open source software, and it's included in openSUSE Leap 15.1 and openSUSE Tumbleweed!

The agenda of the presentation:
- What is Pagure
- History of Pagure
- Current state and features of Pagure
- Current ecosystem around Pagure
- Plans for the future of Pagure
- Demo of Pagure on openSUSE

pingou
Captions: 
	00:00:05,620 --> 00:00:13,600
so good afternoon everyone so I'm Shiva

00:00:11,020 --> 00:00:15,100
also known as pingu and Nina and I are

00:00:13,600 --> 00:00:18,119
going to introduce you a little bit

00:00:15,100 --> 00:00:21,460
about the bagger project

00:00:18,119 --> 00:00:24,190
so what's on the agenda basically we

00:00:21,460 --> 00:00:26,080
start but what Packer is we go back a

00:00:24,190 --> 00:00:28,330
little bit through the history of how it

00:00:26,080 --> 00:00:30,609
came to be I'll present to you a little

00:00:28,330 --> 00:00:33,400
bit further what the state is currently

00:00:30,609 --> 00:00:35,050
in and some of the features it has I'll

00:00:33,400 --> 00:00:36,790
speak a current quickly about the

00:00:35,050 --> 00:00:39,880
ecosystems and some of the application

00:00:36,790 --> 00:00:42,309
you can find around pygar some of the

00:00:39,880 --> 00:00:45,280
ideas we have for the future and then

00:00:42,309 --> 00:00:46,809
need we take over for attempting Murphy

00:00:45,280 --> 00:00:50,829
and see if we can actually get a live

00:00:46,809 --> 00:00:55,660
demo to work on stage here so to start

00:00:50,829 --> 00:00:59,170
what Prager is so it's very hard work to

00:00:55,660 --> 00:01:02,710
pronounce for non French people you can

00:00:59,170 --> 00:01:06,460
ask nearly as problems of it yeah pygar

00:01:02,710 --> 00:01:08,410
is a hard word to say so it's the French

00:01:06,460 --> 00:01:11,910
words that refers to the Latin word

00:01:08,410 --> 00:01:14,890
Paris which is which is a family of

00:01:11,910 --> 00:01:17,050
seashells of which the most well-known

00:01:14,890 --> 00:01:19,590
is the Parker is Bernard is which is

00:01:17,050 --> 00:01:21,959
otherwise known as the air mint crab and

00:01:19,590 --> 00:01:25,959
some of the picture you can see in there

00:01:21,959 --> 00:01:28,450
it's it seems to be AG Nick dot hold

00:01:25,959 --> 00:01:29,500
from this but I'm actually going to come

00:01:28,450 --> 00:01:31,179
back on this in a little bit later

00:01:29,500 --> 00:01:35,619
because there is a little bit of a

00:01:31,179 --> 00:01:37,569
meaning behind this using this name so

00:01:35,619 --> 00:01:40,630
for the purpose of this thought Parker

00:01:37,569 --> 00:01:44,200
is going to refer to a lightweight geek

00:01:40,630 --> 00:01:47,229
centric python-based full project

00:01:44,200 --> 00:01:51,789
hosting Forge which also happens to be

00:01:47,229 --> 00:01:54,369
you know the gplv2 or later versions how

00:01:51,789 --> 00:01:56,770
does it come to be well started in the

00:01:54,369 --> 00:01:59,080
federal project and more precisely

00:01:56,770 --> 00:02:01,090
because of the release engineering term

00:01:59,080 --> 00:02:04,360
so the release engineering team in

00:02:01,090 --> 00:02:06,069
Ferrara used to work in in close

00:02:04,360 --> 00:02:09,550
proximity to each other but also a

00:02:06,069 --> 00:02:11,319
levite of hard-to-reach team in in

00:02:09,550 --> 00:02:12,670
Ferrara you could it was hard to

00:02:11,319 --> 00:02:14,200
collaborate with them it was hard to

00:02:12,670 --> 00:02:15,939
reach out to figure out what they were

00:02:14,200 --> 00:02:17,769
working on how they were working on them

00:02:15,939 --> 00:02:19,390
and see where you could poke at things

00:02:17,769 --> 00:02:21,610
to help

00:02:19,390 --> 00:02:23,230
so they wanted they were self-conscious

00:02:21,610 --> 00:02:24,670
of that and one they wanted to prove to

00:02:23,230 --> 00:02:26,500
improve that situation so they wanted to

00:02:24,670 --> 00:02:28,750
open up the collaboration to get more of

00:02:26,500 --> 00:02:31,420
the people in the federal community to

00:02:28,750 --> 00:02:33,760
help with religion Janine at that time

00:02:31,420 --> 00:02:36,130
we have Tiger which was then called pro

00:02:33,760 --> 00:02:38,140
gate as a proof of concept publicize

00:02:36,130 --> 00:02:41,050
something which I worked on the on the

00:02:38,140 --> 00:02:42,400
site to see basically I was looking at

00:02:41,050 --> 00:02:48,580
the interaction between Python and get

00:02:42,400 --> 00:02:51,940
them so wipe agar well github is that

00:02:48,580 --> 00:02:53,709
the default nowadays platform for

00:02:51,940 --> 00:02:55,570
building open source software for

00:02:53,709 --> 00:02:57,010
building software in general the main

00:02:55,570 --> 00:02:59,320
issue is why if you look at the

00:02:57,010 --> 00:03:01,450
licensing you probably all aware of that

00:02:59,320 --> 00:03:04,360
but github is not a free and open source

00:03:01,450 --> 00:03:06,430
software so for release engineering in

00:03:04,360 --> 00:03:08,230
Ferrara they really they were really

00:03:06,430 --> 00:03:09,670
attached to the to the notion of using

00:03:08,230 --> 00:03:11,500
only free and open source software to

00:03:09,670 --> 00:03:14,709
build federal so good app was out of the

00:03:11,500 --> 00:03:17,050
picture then we have her number of

00:03:14,709 --> 00:03:19,690
competitors we have fabricators we have

00:03:17,050 --> 00:03:23,620
Garrett but those are actually mainly

00:03:19,690 --> 00:03:25,810
about code review systems they are I

00:03:23,620 --> 00:03:28,540
spoke about with a group one of the

00:03:25,810 --> 00:03:30,519
fabricator developer back then and there

00:03:28,540 --> 00:03:31,840
was ideas about including an issue

00:03:30,519 --> 00:03:33,370
tracker in fabricator but it was

00:03:31,840 --> 00:03:35,019
something down the line and not a

00:03:33,370 --> 00:03:38,519
priority for a price he wasn't what the

00:03:35,019 --> 00:03:40,810
project was meant to for and for gitlab

00:03:38,519 --> 00:03:42,070
one of the requirements we had then was

00:03:40,810 --> 00:03:44,049
that everything in federal

00:03:42,070 --> 00:03:48,340
infrastructure had to be deployed from

00:03:44,049 --> 00:03:51,519
an RPM and getting get lab package was

00:03:48,340 --> 00:03:53,560
has been a meteor tentative which has

00:03:51,519 --> 00:03:55,690
never succeeded we've never been able to

00:03:53,560 --> 00:03:57,820
actually get kit lab package in federal

00:03:55,690 --> 00:04:00,430
despite having several people working

00:03:57,820 --> 00:04:02,320
several years on this effort and there

00:04:00,430 --> 00:04:04,690
is a second component to the gate lab is

00:04:02,320 --> 00:04:07,959
I don't know if many of you have been

00:04:04,690 --> 00:04:09,459
actually trying to maintain get lab but

00:04:07,959 --> 00:04:10,060
I will let Neil mention some what about

00:04:09,459 --> 00:04:13,420
that

00:04:10,060 --> 00:04:16,060
so get lab is great when you're using it

00:04:13,420 --> 00:04:19,000
as a user and it has a lot of powerful

00:04:16,060 --> 00:04:22,000
functionality but on the flip side when

00:04:19,000 --> 00:04:26,260
you're administering that server your

00:04:22,000 --> 00:04:28,330
life is kind of hell they the the

00:04:26,260 --> 00:04:29,860
options tend to change quite a bit the

00:04:28,330 --> 00:04:32,260
way that it actually handles its

00:04:29,860 --> 00:04:36,100
upgrades is rickety as best

00:04:32,260 --> 00:04:38,800
and every it's always a new surprise

00:04:36,100 --> 00:04:42,850
what brakes in in a get lab upgrade like

00:04:38,800 --> 00:04:44,740
there was a for one of the play over

00:04:42,850 --> 00:04:47,800
where I have maintained a get labs

00:04:44,740 --> 00:04:48,910
server for going on a couple of years

00:04:47,800 --> 00:04:52,330
now

00:04:48,910 --> 00:04:54,550
there was a entire release series like

00:04:52,330 --> 00:04:56,430
three or four releases in a row where

00:04:54,550 --> 00:04:59,170
merge requests did not work because

00:04:56,430 --> 00:05:02,320
loading a merger quest would cause it to

00:04:59,170 --> 00:05:03,820
spike up the browser would be overloaded

00:05:02,320 --> 00:05:05,050
there'd be so much JavaScript it would

00:05:03,820 --> 00:05:07,330
all fall over and you couldn't actually

00:05:05,050 --> 00:05:09,250
do anything that sort of defeats the

00:05:07,330 --> 00:05:11,620
point of something that kind of

00:05:09,250 --> 00:05:13,990
emphasizes a merger quest style or pull

00:05:11,620 --> 00:05:18,580
request style workflows so it was a not

00:05:13,990 --> 00:05:20,710
fun so we put this considered reason

00:05:18,580 --> 00:05:22,780
Janine Jim in Ferrara decided well you

00:05:20,710 --> 00:05:25,150
know let's give bugger try and see how

00:05:22,780 --> 00:05:26,770
we can bring it forward this has

00:05:25,150 --> 00:05:29,370
impacted also another team in Ferrara

00:05:26,770 --> 00:05:31,330
which is the infrastructure team itself

00:05:29,370 --> 00:05:33,370
back then we were running something

00:05:31,330 --> 00:05:36,190
called federal state org and it was a

00:05:33,370 --> 00:05:39,340
place for project where our or federal

00:05:36,190 --> 00:05:40,810
contributors was were upstream so you

00:05:39,340 --> 00:05:42,610
know just a place where you could use

00:05:40,810 --> 00:05:44,470
your code remember that throw acid

00:05:42,610 --> 00:05:47,440
basically studied a little bit before

00:05:44,470 --> 00:05:50,770
github or pack list before Nikita became

00:05:47,440 --> 00:05:54,370
what it is today to the point that we

00:05:50,770 --> 00:05:56,500
actually were using track 0.12 I forgot

00:05:54,370 --> 00:05:59,770
to pick that version so we were still

00:05:56,500 --> 00:06:04,360
using 0.12 even after the one dot or

00:05:59,770 --> 00:06:07,300
release was was released and out we were

00:06:04,360 --> 00:06:09,250
winning difference instance of track for

00:06:07,300 --> 00:06:10,630
each projects it wasn't self-service so

00:06:09,250 --> 00:06:13,140
basically if you wanted to create a new

00:06:10,630 --> 00:06:15,760
project in the federal system using the

00:06:13,140 --> 00:06:17,410
frosted the tour domain you would have

00:06:15,760 --> 00:06:19,660
to open a ticket tune in first to the

00:06:17,410 --> 00:06:22,270
infrastructure folks one of them would

00:06:19,660 --> 00:06:24,280
wake up sealer ticket process it create

00:06:22,270 --> 00:06:27,430
the corresponding get or SVN or

00:06:24,280 --> 00:06:27,610
mercurial and bizarre I don't think we

00:06:27,430 --> 00:06:29,380
did

00:06:27,610 --> 00:06:32,380
we have CBS back then but we were

00:06:29,380 --> 00:06:35,320
offering all of these options and and

00:06:32,380 --> 00:06:37,630
set up the track for you so you know it

00:06:35,320 --> 00:06:38,890
could take between a few hours to a few

00:06:37,630 --> 00:06:41,260
days before you actually you were

00:06:38,890 --> 00:06:43,210
actually able to publish or code the

00:06:41,260 --> 00:06:46,030
other place where we store code in

00:06:43,210 --> 00:06:48,130
Fedora is the disk each people so it's

00:06:46,030 --> 00:06:51,970
the place where we have a git repository

00:06:48,130 --> 00:06:54,460
for every package we ship in fira the

00:06:51,970 --> 00:06:57,820
thing is for awhile there was no

00:06:54,460 --> 00:06:59,860
collaboration model on this get if you

00:06:57,820 --> 00:07:01,540
wanted to contribute to patch to a spec

00:06:59,860 --> 00:07:04,300
file the best way to do that was you

00:07:01,540 --> 00:07:06,520
know go to Bugzilla open etiquette and

00:07:04,300 --> 00:07:08,710
attach respectful in there and I'm sure

00:07:06,520 --> 00:07:13,960
we all loved reviewing patches on

00:07:08,710 --> 00:07:16,000
bugzilla tickets so they come to this

00:07:13,960 --> 00:07:17,440
has come to to what Packer is today so

00:07:16,000 --> 00:07:19,870
to give you some dates

00:07:17,440 --> 00:07:22,600
the first comment on the project is from

00:07:19,870 --> 00:07:24,370
March 2014

00:07:22,600 --> 00:07:28,419
so a little bit more than five years ago

00:07:24,370 --> 00:07:31,180
the poquito de yo itself was released on

00:07:28,419 --> 00:07:31,780
May 2015 so a little bit more than a

00:07:31,180 --> 00:07:36,220
year after that

00:07:31,780 --> 00:07:37,780
Phil Arras it was sunset in 2017 source

00:07:36,220 --> 00:07:41,950
that were a project that ork was

00:07:37,780 --> 00:07:43,960
launched on February 2017 so that that

00:07:41,950 --> 00:07:45,790
this is our discrete instance I'm sorry

00:07:43,960 --> 00:07:48,700
i'm lucas 2017 that's our diskit

00:07:45,790 --> 00:07:50,260
instance and santo SS recently also

00:07:48,700 --> 00:07:54,310
deployed tiger on the top of the

00:07:50,260 --> 00:07:55,960
diskette last April how does it look

00:07:54,310 --> 00:07:59,740
from a user's point of view

00:07:55,960 --> 00:08:04,479
well picado was about 1,600 projects

00:07:59,740 --> 00:08:05,710
today from about 700 users and 140

00:08:04,479 --> 00:08:07,300
groups

00:08:05,710 --> 00:08:09,390
needless to say that the number of

00:08:07,300 --> 00:08:13,000
projects that we have on Peguero Deo is

00:08:09,390 --> 00:08:15,669
vastly greater than what we ever had on

00:08:13,000 --> 00:08:18,190
ferocity dot work just the fact that you

00:08:15,669 --> 00:08:21,280
just can self service as tremendously

00:08:18,190 --> 00:08:25,210
helps in there so if you're wondering

00:08:21,280 --> 00:08:26,530
how bagger scales on fedora we are

00:08:25,210 --> 00:08:28,900
running in a sense that eyes about

00:08:26,530 --> 00:08:33,610
30,000 projects that's how these gates

00:08:28,900 --> 00:08:35,469
you know almost 3,000 users sent to us

00:08:33,610 --> 00:08:38,530
just started and they only have seven

00:08:35,469 --> 00:08:41,800
thousand projects so far and on the

00:08:38,530 --> 00:08:43,740
scale ID I'm aware of one peg or

00:08:41,800 --> 00:08:47,470
instance that is running with close to

00:08:43,740 --> 00:08:51,550
45,000 projects so it does scale to some

00:08:47,470 --> 00:08:54,160
extent so what does it do well it's a

00:08:51,550 --> 00:08:57,660
it's a fortune oh nothing new in there

00:08:54,160 --> 00:08:59,460
we are we have a place where you can do

00:08:57,660 --> 00:09:01,560
code where you can place your

00:08:59,460 --> 00:09:03,990
documentation where you can a Venetia

00:09:01,560 --> 00:09:07,410
tracker report bugs reports are EFI's

00:09:03,990 --> 00:09:09,810
and its provides that now the factors

00:09:07,410 --> 00:09:14,040
turned out for can pull requests so much

00:09:09,810 --> 00:09:16,860
request workflow one of the some of the

00:09:14,040 --> 00:09:20,790
feature it does it's it designed to not

00:09:16,860 --> 00:09:23,010
be platform looking so each project is

00:09:20,790 --> 00:09:25,110
actually composed of four git

00:09:23,010 --> 00:09:26,550
repositories one is the main one you

00:09:25,110 --> 00:09:29,040
interact with the one that you're the

00:09:26,550 --> 00:09:31,290
most use to which out your code the

00:09:29,040 --> 00:09:33,620
second one is your documentation the

00:09:31,290 --> 00:09:36,660
documentation can be text files HTML

00:09:33,620 --> 00:09:38,430
marked on rests the markdown and the res

00:09:36,660 --> 00:09:41,220
file will be converted to HTML on the

00:09:38,430 --> 00:09:43,350
fly and then we have another to get

00:09:41,220 --> 00:09:45,720
ripples one that contains all the ticket

00:09:43,350 --> 00:09:47,820
metadata and one that contains all the

00:09:45,720 --> 00:09:50,820
pro request metadata so if you want to

00:09:47,820 --> 00:09:53,310
move out of get of bagger you can

00:09:50,820 --> 00:09:55,080
download these these for git repos and

00:09:53,310 --> 00:09:57,960
you have everything that is in the

00:09:55,080 --> 00:10:00,930
device for pygar for your project it

00:09:57,960 --> 00:10:03,390
also comes back to the the Packer

00:10:00,930 --> 00:10:05,460
instant the pack your animal on one side

00:10:03,390 --> 00:10:07,200
there because one of the original idea

00:10:05,460 --> 00:10:09,180
was that you would be able to move a

00:10:07,200 --> 00:10:11,220
project from a tiger instance to another

00:10:09,180 --> 00:10:12,900
one and that's actually also how we

00:10:11,220 --> 00:10:15,930
migrated our project from Farrow

00:10:12,900 --> 00:10:18,630
alsa.org to pagoda at i/o we dumped the

00:10:15,930 --> 00:10:20,820
content from track formatted it in the

00:10:18,630 --> 00:10:22,770
way that peg you expected it enabled the

00:10:20,820 --> 00:10:25,280
oak on the the ticket and the pull

00:10:22,770 --> 00:10:27,720
request tracker get pushed and

00:10:25,280 --> 00:10:31,590
everything appeared on the Packer side

00:10:27,720 --> 00:10:32,940
so one of the original idea behind this

00:10:31,590 --> 00:10:35,280
would also that you would be able to

00:10:32,940 --> 00:10:37,410
have a private internal pygar instance

00:10:35,280 --> 00:10:39,900
and a public external bugger instance

00:10:37,410 --> 00:10:42,000
and you would be able to sync issues

00:10:39,900 --> 00:10:46,350
from one to the other or pro requests

00:10:42,000 --> 00:10:49,290
from one to the other we also provide

00:10:46,350 --> 00:10:50,550
mirroring marine to Packer oh my god

00:10:49,290 --> 00:10:52,470
mirroring front agar

00:10:50,550 --> 00:10:55,440
so if you look at beggar we basically

00:10:52,470 --> 00:10:57,870
you know it out on dog foods pagoda Rio

00:10:55,440 --> 00:11:00,270
slash beggar is original project but

00:10:57,870 --> 00:11:01,340
beggars are present on github and on get

00:11:00,270 --> 00:11:04,290
labdurg

00:11:01,340 --> 00:11:06,240
we have a third-party plugin mechanisms

00:11:04,290 --> 00:11:08,550
and we're starting to make use of this

00:11:06,240 --> 00:11:10,820
on the disk each instance of bagger in

00:11:08,550 --> 00:11:13,190
fedora so that we

00:11:10,820 --> 00:11:16,220
we are able to prevent new at new

00:11:13,190 --> 00:11:19,940
endpoints that that allows us to expand

00:11:16,220 --> 00:11:24,670
the use of vigor without you know

00:11:19,940 --> 00:11:24,670
without putting in the up string code

00:11:25,060 --> 00:11:31,040
endpoints logic that is specific to a

00:11:28,490 --> 00:11:34,370
discrete deployment so something we

00:11:31,040 --> 00:11:36,320
worked on recently in federal you have a

00:11:34,370 --> 00:11:38,330
point of contact you have a main

00:11:36,320 --> 00:11:40,279
principal maintainer for every package

00:11:38,330 --> 00:11:42,170
and sometime that person goes out and

00:11:40,279 --> 00:11:45,140
goes away and then the package is off

00:11:42,170 --> 00:11:47,360
and for while people and people are able

00:11:45,140 --> 00:11:47,930
to enough on the package let's make it

00:11:47,360 --> 00:11:50,870
their own

00:11:47,930 --> 00:11:52,610
so we have a mechanism using this we are

00:11:50,870 --> 00:11:54,860
able to say well if the package is often

00:11:52,610 --> 00:11:57,440
and that person is a package or they are

00:11:54,860 --> 00:12:00,080
able to take the to take the the project

00:11:57,440 --> 00:12:02,330
from this often user we have an

00:12:00,080 --> 00:12:04,370
extensible Kotok system so if you want

00:12:02,330 --> 00:12:07,160
to write your own geek it works if you

00:12:04,370 --> 00:12:09,410
want to make it available all the

00:12:07,160 --> 00:12:11,630
project on your four or something that

00:12:09,410 --> 00:12:14,959
is optional it's easy to do we have

00:12:11,630 --> 00:12:17,570
teams so we have four teams by default

00:12:14,959 --> 00:12:20,810
I'm going to quickly go through three of

00:12:17,570 --> 00:12:25,459
them this is the maguro the packet at

00:12:20,810 --> 00:12:27,770
i/o one very very simple we have a very

00:12:25,459 --> 00:12:31,180
similar one for the diskette instance

00:12:27,770 --> 00:12:33,500
this is it just reminds me of the the

00:12:31,180 --> 00:12:37,000
the presentation we had yesterday about

00:12:33,500 --> 00:12:40,070
using similar seam across applications

00:12:37,000 --> 00:12:41,810
this is the get that sent West occurred

00:12:40,070 --> 00:12:43,490
and this is the closest one to the

00:12:41,810 --> 00:12:46,310
default they basically only change the

00:12:43,490 --> 00:12:48,260
logo on the top here and for the first

00:12:46,310 --> 00:12:52,520
team I'm actually leaving the surprise

00:12:48,260 --> 00:12:54,440
of alright a bit later some of the other

00:12:52,520 --> 00:12:56,329
things it does so how does it check SSH

00:12:54,440 --> 00:12:58,670
access how does this check who can

00:12:56,329 --> 00:13:01,250
access which repose well originally

00:12:58,670 --> 00:13:03,680
Ardis get instance was using it alight

00:13:01,250 --> 00:13:05,240
so we built like you're on the top of

00:13:03,680 --> 00:13:07,399
git alight and to some extent you could

00:13:05,240 --> 00:13:09,560
consider pygar to be some sort of

00:13:07,399 --> 00:13:12,200
self-service administered face of get

00:13:09,560 --> 00:13:14,690
right but reverse entry also get rid of

00:13:12,200 --> 00:13:17,029
it because it has given us labels of

00:13:14,690 --> 00:13:18,949
problems when you have such a thousand

00:13:17,029 --> 00:13:20,810
repositories and you refresh the key to

00:13:18,949 --> 00:13:22,520
hide configuration file and you need to

00:13:20,810 --> 00:13:24,050
recompile it every time you're adding a

00:13:22,520 --> 00:13:24,259
new contributor to a project or doing a

00:13:24,050 --> 00:13:26,929
new

00:13:24,259 --> 00:13:29,959
project it can tackle it a bit a little

00:13:26,929 --> 00:13:32,209
bit of time so we also figure we ever

00:13:29,959 --> 00:13:35,329
saw now a packer itself a ways of

00:13:32,209 --> 00:13:36,559
deploying it without get alight and some

00:13:35,329 --> 00:13:38,809
of the thing which is also nice you can

00:13:36,559 --> 00:13:40,910
just reply to a comment you know whether

00:13:38,809 --> 00:13:43,100
it's from a ProQuest or from an it from

00:13:40,910 --> 00:13:46,639
an issue by email and it will show up in

00:13:43,100 --> 00:13:48,619
the inner database and in the UI we have

00:13:46,639 --> 00:13:51,139
a saw a number of notification systems

00:13:48,619 --> 00:13:53,029
the classic web books that now everybody

00:13:51,139 --> 00:13:56,929
uses but we also support a number of

00:13:53,029 --> 00:13:58,910
message bus so we have fed message which

00:13:56,929 --> 00:14:01,429
is which started to be the federal

00:13:58,910 --> 00:14:04,279
message bus and then got into got ran

00:14:01,429 --> 00:14:06,259
into federated message bus which is a

00:14:04,279 --> 00:14:09,019
REM queue based so it's a very mature

00:14:06,259 --> 00:14:11,660
fire-and-forget system we are moving

00:14:09,019 --> 00:14:13,699
from fan message to federal messaging in

00:14:11,660 --> 00:14:16,699
the federal infrastructure which is m QP

00:14:13,699 --> 00:14:20,410
based both wheels of support stomp and

00:14:16,699 --> 00:14:23,869
MQTT notifications so to give you an ID

00:14:20,410 --> 00:14:25,819
federal using the top two I know about

00:14:23,869 --> 00:14:29,059
one instance cetera that's using the

00:14:25,819 --> 00:14:32,569
third one and get the Santos folks are

00:14:29,059 --> 00:14:37,399
using the MQTT one on the community side

00:14:32,569 --> 00:14:39,289
we have 146 commuters it seems to be not

00:14:37,399 --> 00:14:41,329
so much I mean you know when you look at

00:14:39,289 --> 00:14:43,819
bigger project on the other side from

00:14:41,329 --> 00:14:45,289
the infrastructure point of view this is

00:14:43,819 --> 00:14:48,619
definitely the project that has had the

00:14:45,289 --> 00:14:50,869
largest number of contributors they used

00:14:48,619 --> 00:14:52,730
to be 40% of the contributors in the top

00:14:50,869 --> 00:14:54,980
ten that was not where that employee

00:14:52,730 --> 00:14:57,619
except that we are at one of them so

00:14:54,980 --> 00:14:59,119
it's only the top three out of the top

00:14:57,619 --> 00:15:02,899
10 contributors is on these three that

00:14:59,119 --> 00:15:04,789
are non radar us today and four we have

00:15:02,899 --> 00:15:05,869
I've listed here the three public

00:15:04,789 --> 00:15:07,730
instance which I've already mentioned

00:15:05,869 --> 00:15:10,309
but we are aware about a few private

00:15:07,730 --> 00:15:12,799
instances as well one of them I'm not

00:15:10,309 --> 00:15:15,169
going to reveal in a secret here Israel

00:15:12,799 --> 00:15:18,199
internally at reddit others are run in

00:15:15,169 --> 00:15:19,939
different companies so when it come to

00:15:18,199 --> 00:15:24,559
the the ecosystems a little bit around

00:15:19,939 --> 00:15:26,720
pygar we have so the the with the

00:15:24,559 --> 00:15:28,850
principle that you can have the issue

00:15:26,720 --> 00:15:31,100
metadata present in a git repo that you

00:15:28,850 --> 00:15:33,559
can clone there is a small utility which

00:15:31,100 --> 00:15:35,029
is called back off which basically lets

00:15:33,559 --> 00:15:37,529
you interact with your issue tracker

00:15:35,029 --> 00:15:38,970
offline I use this all the time when I'm

00:15:37,529 --> 00:15:41,339
traveling when you're on a plane when

00:15:38,970 --> 00:15:44,610
you're on your own train you can just do

00:15:41,339 --> 00:15:46,949
something like bug of Lists Tiger and it

00:15:44,610 --> 00:15:49,110
will go to the to your local clone of

00:15:46,949 --> 00:15:51,089
your pocket tickets and give you all the

00:15:49,110 --> 00:15:52,529
tickets a tarpon you can assign them to

00:15:51,089 --> 00:15:54,839
yourself you can close them you can

00:15:52,529 --> 00:15:56,579
comment on them you can do you can do

00:15:54,839 --> 00:15:58,499
anything offline and when you reach

00:15:56,579 --> 00:16:00,990
Network again you just do a git pull git

00:15:58,499 --> 00:16:03,689
push if you have enabled the right hook

00:16:00,990 --> 00:16:07,889
on the in the UI your ticket is up to

00:16:03,689 --> 00:16:09,480
date I find it's very very handy we have

00:16:07,889 --> 00:16:11,670
a small Python library that interacts

00:16:09,480 --> 00:16:13,379
with the Packer API it's not feature

00:16:11,670 --> 00:16:16,529
complete something that I was started by

00:16:13,379 --> 00:16:19,199
by contributors in the pagarÃ¡ in the

00:16:16,529 --> 00:16:21,389
Packer project so it's not very complete

00:16:19,199 --> 00:16:22,620
it does not cover the entire API but it

00:16:21,389 --> 00:16:24,240
gives a base where people can

00:16:22,620 --> 00:16:26,449
collaborate if they were if they didn't

00:16:24,240 --> 00:16:29,879
need to or they want to expand and

00:16:26,449 --> 00:16:32,879
interact with Tiger command you know you

00:16:29,879 --> 00:16:34,139
know in a project the third one which

00:16:32,879 --> 00:16:36,120
I'm going to speak about is called the

00:16:34,139 --> 00:16:38,730
repo spanner it's something which is

00:16:36,120 --> 00:16:40,649
fairly new we are volley we are

00:16:38,730 --> 00:16:43,139
currently running it and rolling it in

00:16:40,649 --> 00:16:46,230
production it's a distributed get

00:16:43,139 --> 00:16:48,180
storage server so is one of the issues

00:16:46,230 --> 00:16:49,680
of Packer is that it needs direct access

00:16:48,180 --> 00:16:51,689
to the git repo which means that you

00:16:49,680 --> 00:16:53,309
can't really do load balancing unless

00:16:51,689 --> 00:16:56,370
you actually use something like NFS and

00:16:53,309 --> 00:16:57,990
then you run into it's doable I know an

00:16:56,370 --> 00:17:00,209
instance that of you that is running

00:16:57,990 --> 00:17:01,889
with the git repos on NFS it's also can

00:17:00,209 --> 00:17:02,189
be a pain to deal with every once in a

00:17:01,889 --> 00:17:04,319
while

00:17:02,189 --> 00:17:06,030
so Ruppersberger partly solved that

00:17:04,319 --> 00:17:09,839
because you basically create a closer's

00:17:06,030 --> 00:17:11,399
of repo spanner nodes and it's it mimics

00:17:09,839 --> 00:17:13,140
a little bit what github uses in

00:17:11,399 --> 00:17:16,649
production so every time you push

00:17:13,140 --> 00:17:18,809
something it will sync you push to the

00:17:16,649 --> 00:17:21,390
nodes and it needs the majority of the

00:17:18,809 --> 00:17:23,130
node to ACK the change before it allows

00:17:21,390 --> 00:17:25,230
the push to go through if the majority

00:17:23,130 --> 00:17:28,079
of the nodes is unavailable or not able

00:17:25,230 --> 00:17:29,970
to act you put it will deny the push and

00:17:28,079 --> 00:17:31,860
you will have to retry it later on it

00:17:29,970 --> 00:17:35,309
also means that you know if you have an

00:17:31,860 --> 00:17:37,289
no cluster of three and two of exactly

00:17:35,309 --> 00:17:39,600
the the pushed and the third one is

00:17:37,289 --> 00:17:43,080
going to catch up later on it's very

00:17:39,600 --> 00:17:45,360
powerful it's a it's it's complex but

00:17:43,080 --> 00:17:48,929
it's it's very powerful and it's a

00:17:45,360 --> 00:17:51,269
it's quite a nice piece of software so

00:17:48,929 --> 00:17:53,429
that's what it is today and what you can

00:17:51,269 --> 00:17:55,619
find around it and the ideas for the

00:17:53,429 --> 00:17:57,989
future so it this used to be road map

00:17:55,619 --> 00:17:59,940
but I feared that using the terminology

00:17:57,989 --> 00:18:02,159
road map here meant a little bit more

00:17:59,940 --> 00:18:04,619
this is going to happen while these are

00:18:02,159 --> 00:18:08,100
more fogies ideas of things we could do

00:18:04,619 --> 00:18:09,809
I don't know if we will go to there one

00:18:08,100 --> 00:18:11,789
of the ideas actually to do a tighter

00:18:09,809 --> 00:18:14,519
integration with Weber spanner currently

00:18:11,789 --> 00:18:17,190
Robespierre is entirely optional moving

00:18:14,519 --> 00:18:20,340
to it would actually swallow speeding up

00:18:17,190 --> 00:18:22,889
a number of operations in beggar

00:18:20,340 --> 00:18:24,720
pygar relies on packet you which itself

00:18:22,889 --> 00:18:28,129
is a Python binding to the lib get your

00:18:24,720 --> 00:18:30,720
libraries which has a number of issues

00:18:28,129 --> 00:18:34,289
one of them for example is doing a

00:18:30,720 --> 00:18:36,840
cloning a git repo League leads leaks

00:18:34,289 --> 00:18:38,999
file descriptors so if you have a lot of

00:18:36,840 --> 00:18:41,509
clone running at the same time you end

00:18:38,999 --> 00:18:44,159
up with too many files opens exceptions

00:18:41,509 --> 00:18:47,190
to the point that I was receiving tens

00:18:44,159 --> 00:18:49,350
of emails a day about this problem and I

00:18:47,190 --> 00:18:52,109
have actually replaced lead get to

00:18:49,350 --> 00:18:54,450
Apogee to represent repository cloned by

00:18:52,109 --> 00:18:56,759
a simple ace by simple sub process git

00:18:54,450 --> 00:18:59,129
clone I'm very happy about that but

00:18:56,759 --> 00:19:03,769
that's actually was a better fix than

00:18:59,129 --> 00:19:06,059
then keeping on on what it is today so

00:19:03,769 --> 00:19:07,679
moving to rip a spanner would actually

00:19:06,059 --> 00:19:09,419
moving more person to or postpone or

00:19:07,679 --> 00:19:11,789
making it not optional would actually

00:19:09,419 --> 00:19:13,559
allow us to to farm out some of the get

00:19:11,789 --> 00:19:16,649
operation to replace banner which is

00:19:13,559 --> 00:19:17,909
what it means to do improving the

00:19:16,649 --> 00:19:19,289
content of the web books and the

00:19:17,909 --> 00:19:22,200
notification so that's something that

00:19:19,289 --> 00:19:24,269
Neil has reported basically apparently

00:19:22,200 --> 00:19:26,519
the payload that we're sending on weibo

00:19:24,269 --> 00:19:30,059
and message personification is not

00:19:26,519 --> 00:19:32,129
enough for everyone to act upon so we

00:19:30,059 --> 00:19:34,109
need to identify what content is missing

00:19:32,129 --> 00:19:37,409
from these notifications and you know

00:19:34,109 --> 00:19:39,720
add it in there we would very much like

00:19:37,409 --> 00:19:43,320
to be able to figure out a way of having

00:19:39,720 --> 00:19:45,450
a CI system integrating on pager and to

00:19:43,320 --> 00:19:47,820
make it as easy as you know obtaining

00:19:45,450 --> 00:19:49,559
into Travis CI so it's probably going to

00:19:47,820 --> 00:19:51,570
be something like you have a checkbox in

00:19:49,559 --> 00:19:53,429
the settings and yeah Malphite to do in

00:19:51,570 --> 00:19:56,279
the source and it would automatically

00:19:53,429 --> 00:19:56,970
run the CI triggers it and pull requests

00:19:56,279 --> 00:20:00,570
on coming

00:19:56,970 --> 00:20:01,980
some Latino are twins one of the ideas

00:20:00,570 --> 00:20:05,940
which I have on the back of my head is

00:20:01,980 --> 00:20:07,890
the proquest dependencies so if you work

00:20:05,940 --> 00:20:09,690
on different features at the same time

00:20:07,890 --> 00:20:12,210
you're probably using different branch

00:20:09,690 --> 00:20:13,530
for each feature and potentially a

00:20:12,210 --> 00:20:14,039
feature is going to depend on another

00:20:13,530 --> 00:20:16,590
one

00:20:14,039 --> 00:20:18,659
or just because you want to merge

00:20:16,590 --> 00:20:20,580
feature a and then B and then C even if

00:20:18,659 --> 00:20:23,030
they are independent from each other if

00:20:20,580 --> 00:20:26,010
you keep opening them all against master

00:20:23,030 --> 00:20:27,870
it's great except that your CI system is

00:20:26,010 --> 00:20:29,370
going to compare what is feature a

00:20:27,870 --> 00:20:30,870
against master what is feature be

00:20:29,370 --> 00:20:33,210
against matter what you features C

00:20:30,870 --> 00:20:34,830
against master and every time you want

00:20:33,210 --> 00:20:36,990
to you merge one of them you need to

00:20:34,830 --> 00:20:38,760
rebate the other two to be able to see

00:20:36,990 --> 00:20:42,179
okay what is the CI system now saying

00:20:38,760 --> 00:20:44,190
with a merge and B and C and so if you

00:20:42,179 --> 00:20:46,409
were able to say well I want to merge a

00:20:44,190 --> 00:20:49,200
first and then B and then C then we

00:20:46,409 --> 00:20:51,809
build we would be able to show you the

00:20:49,200 --> 00:20:54,240
pro request of C against B be against a

00:20:51,809 --> 00:20:57,090
against master and your CI system would

00:20:54,240 --> 00:20:59,460
be able to say well I'm running a

00:20:57,090 --> 00:21:01,860
against master I'm getting be against a

00:20:59,460 --> 00:21:03,120
and C against B and well you know if you

00:21:01,860 --> 00:21:04,950
change the order you just change the

00:21:03,120 --> 00:21:07,140
dependency order and I would make

00:21:04,950 --> 00:21:09,600
reviewing easier because you would not

00:21:07,140 --> 00:21:12,450
because of chain Pro you would see the

00:21:09,600 --> 00:21:16,890
DIA of feature C against feature B and

00:21:12,450 --> 00:21:19,200
not a B and C against master and you

00:21:16,890 --> 00:21:20,760
would also have when the CI system runs

00:21:19,200 --> 00:21:22,799
and you can go through the code and

00:21:20,760 --> 00:21:24,720
there is nothing to change you can just

00:21:22,799 --> 00:21:26,490
you know merge a B and C in one go and

00:21:24,720 --> 00:21:31,380
you know your sis you see a system was

00:21:26,490 --> 00:21:33,929
already tested ABC merged together one

00:21:31,380 --> 00:21:36,480
thing which we also have is the ability

00:21:33,929 --> 00:21:39,840
of creating a pull request from an email

00:21:36,480 --> 00:21:41,820
so basically sending a D for patch to a

00:21:39,840 --> 00:21:45,900
certain address that would open a pull

00:21:41,820 --> 00:21:48,360
request to that project so again these

00:21:45,900 --> 00:21:50,070
are not necessarily things that will be

00:21:48,360 --> 00:21:51,630
done or will be done in time soon but

00:21:50,070 --> 00:21:53,760
these are things that are on the back of

00:21:51,630 --> 00:21:56,460
our mind and we would very much like to

00:21:53,760 --> 00:21:57,900
do or you know if anyone in the assembly

00:21:56,460 --> 00:22:00,419
would like to work on any of these tasks

00:21:57,900 --> 00:22:03,840
we would very much like to to help you

00:22:00,419 --> 00:22:07,080
and get this merge dinner and with this

00:22:03,840 --> 00:22:10,880
I will let Li see if we can actually

00:22:07,080 --> 00:22:10,880
master Murphy for this afternoon

00:22:35,010 --> 00:22:42,310
so this is a virtual machine running

00:22:37,780 --> 00:22:45,100
opens is a leap on it and I have this

00:22:42,310 --> 00:22:46,690
running on here so this is a packer

00:22:45,100 --> 00:22:48,730
instance running the surprise theme

00:22:46,690 --> 00:22:53,080
which is actually contributed by a

00:22:48,730 --> 00:22:56,290
static for for Packer or while ago when

00:22:53,080 --> 00:22:57,820
we did the 5.0 release it's based on the

00:22:56,290 --> 00:23:00,970
theme that came from software openSUSE

00:22:57,820 --> 00:23:02,410
dark so it's a the chameleon theme as

00:23:00,970 --> 00:23:04,270
its called officially the tree and I

00:23:02,410 --> 00:23:05,920
pulled in a couple of projects in here

00:23:04,270 --> 00:23:08,950
to kind of show off what it looks like

00:23:05,920 --> 00:23:10,660
so this one's the RPM config Souza

00:23:08,950 --> 00:23:13,210
project which was I mirrored this

00:23:10,660 --> 00:23:15,250
actually from github earlier this

00:23:13,210 --> 00:23:18,370
morning and pulled that in into here and

00:23:15,250 --> 00:23:21,910
you can see like there the changes that

00:23:18,370 --> 00:23:25,420
went in from these people if I do this

00:23:21,910 --> 00:23:27,460
one here you can see the diff the

00:23:25,420 --> 00:23:30,130
commits you can even see all the

00:23:27,460 --> 00:23:31,900
references hyperlinks are clickable and

00:23:30,130 --> 00:23:35,170
that will go to the place of the github

00:23:31,900 --> 00:23:38,070
z' other branches the original version

00:23:35,170 --> 00:23:41,740
of RPM config so that I wrote is there

00:23:38,070 --> 00:23:43,510
yeah and the other one I pulled in was

00:23:41,740 --> 00:23:45,190
something that kind of looks somewhat

00:23:43,510 --> 00:23:47,530
like what we have in Fedora with disk it

00:23:45,190 --> 00:23:49,750
where I pulled in the the salt packaging

00:23:47,530 --> 00:23:53,400
repo that's on on the open SUSE at

00:23:49,750 --> 00:23:56,290
github org and in here like you can see

00:23:53,400 --> 00:23:57,490
there's the patches in here you can see

00:23:56,290 --> 00:24:00,520
that the diffs are actually like

00:23:57,490 --> 00:24:03,310
highlighted correctly and then if we go

00:24:00,520 --> 00:24:06,280
to a spec file here the spec file syntax

00:24:03,310 --> 00:24:09,870
highlighting totally correct has the

00:24:06,280 --> 00:24:14,260
comments descriptions and whatnot and

00:24:09,870 --> 00:24:15,700
then let's see all the crazy branches

00:24:14,260 --> 00:24:16,930
for all the different versions and all

00:24:15,700 --> 00:24:21,929
the crazy things that have been going on

00:24:16,930 --> 00:24:24,570
in here no tags releases so

00:24:21,929 --> 00:24:30,990
a little bit in here let's that's the

00:24:24,570 --> 00:24:37,499
terminal hold of this thank you that

00:24:30,990 --> 00:24:39,419
makes that easier I'm gonna just switch

00:24:37,499 --> 00:24:44,570
this to mirroring because this is very

00:24:39,419 --> 00:24:44,570
very hard don't use this up near

00:24:47,730 --> 00:24:56,340
there we go now from in here

00:24:51,550 --> 00:24:59,800
let's go into salt and I'm going to do

00:24:56,340 --> 00:25:04,270
ya once put some bigger fonts well not

00:24:59,800 --> 00:25:06,040
the right one this one right so in salt

00:25:04,270 --> 00:25:09,460
here we've got all of these crazy files

00:25:06,040 --> 00:25:12,820
I'm gonna get MV all the things to the

00:25:09,460 --> 00:25:16,480
top-level directory get RM are the salt

00:25:12,820 --> 00:25:17,890
directory because the salt director

00:25:16,480 --> 00:25:19,260
doesn't exist it get anymore because

00:25:17,890 --> 00:25:28,110
that's how that works

00:25:19,260 --> 00:25:37,900
get commit - and well move to top-level

00:25:28,110 --> 00:25:41,200
author and compa openSUSE org and we'll

00:25:37,900 --> 00:25:42,790
do a - yes just for the funsies and it's

00:25:41,200 --> 00:25:45,130
not name email and does not matter oh

00:25:42,790 --> 00:25:49,570
because I forgot the funny quote thingy

00:25:45,130 --> 00:25:53,620
at the end there we go and then it's

00:25:49,570 --> 00:25:55,210
gonna make that commit and that is I am

00:25:53,620 --> 00:25:58,150
moving a shitload of files that's

00:25:55,210 --> 00:26:07,450
probably going to not be fun no matter

00:25:58,150 --> 00:26:10,590
what with it do it are you gonna just

00:26:07,450 --> 00:26:14,080
clean beat you hold this for a second

00:26:10,590 --> 00:26:19,060
bloody demos alright

00:26:14,080 --> 00:26:24,040
get config global user email and dump

00:26:19,060 --> 00:26:28,270
out openSUSE org git config I can't

00:26:24,040 --> 00:26:31,990
believe I'm doing this now shame on me

00:26:28,270 --> 00:26:36,240
for not trying this part first now I can

00:26:31,990 --> 00:26:39,640
do this there we go and then get push

00:26:36,240 --> 00:26:42,070
cuz we're just gonna do a fun thing just

00:26:39,640 --> 00:26:46,150
get a Phi bash

00:26:42,070 --> 00:26:52,240
push push this here

00:26:46,150 --> 00:26:54,730
viii push that here and that is pushed I

00:26:52,240 --> 00:26:59,049
can create a merchant pull request right

00:26:54,730 --> 00:27:00,640
here and we see here open PR and I can

00:26:59,049 --> 00:27:01,990
do this against normally I could do this

00:27:00,640 --> 00:27:03,840
against like a fork or whatever but

00:27:01,990 --> 00:27:07,950
since I just did within this repo

00:27:03,840 --> 00:27:12,490
there's a thing create the pull request

00:27:07,950 --> 00:27:14,380
let's see I changed 21 files here move

00:27:12,490 --> 00:27:16,090
to top-level you can see I've redeemed

00:27:14,380 --> 00:27:17,830
all these things there's no diff here so

00:27:16,090 --> 00:27:25,179
it's got smart differ a cognition for

00:27:17,830 --> 00:27:32,200
renaming and then delete branch after

00:27:25,179 --> 00:27:33,730
merging and merge confirm merge yes the

00:27:32,200 --> 00:27:37,270
Gator the either worker should be

00:27:33,730 --> 00:27:38,460
running otherwise very bad things would

00:27:37,270 --> 00:27:40,750
be happening right now

00:27:38,460 --> 00:27:42,530
wolf very bad things might be happening

00:27:40,750 --> 00:27:43,910
right now

00:27:42,530 --> 00:27:58,980
[Music]

00:27:43,910 --> 00:28:02,570
Journal few bagger worker and because of

00:27:58,980 --> 00:28:02,570
that pseudo

00:28:06,059 --> 00:28:17,460
grabbing walk for one it is doing stuff

00:28:09,940 --> 00:28:17,460
right task is running

00:28:17,770 --> 00:28:26,870
yep there we go so it's starting to do

00:28:20,390 --> 00:28:31,670
stuff on the inside you can see that's

00:28:26,870 --> 00:28:34,850
doing get things and is it still like

00:28:31,670 --> 00:28:37,730
trying to do this merge no it's done

00:28:34,850 --> 00:28:40,640
there we go moved to the top level top

00:28:37,730 --> 00:28:42,830
commit branch went away nope it's still

00:28:40,640 --> 00:28:45,170
trying to delete the branch but there we

00:28:42,830 --> 00:28:47,390
go and you see here on the top level all

00:28:45,170 --> 00:28:50,000
the files are here read me that Sousa

00:28:47,390 --> 00:28:53,420
did funny things index highlighting but

00:28:50,000 --> 00:28:56,500
spec is all here and the pull request is

00:28:53,420 --> 00:29:01,700
done yep

00:28:56,500 --> 00:29:03,470
so there we go that's the kind of the

00:29:01,700 --> 00:29:05,420
basics of what the the Packer interface

00:29:03,470 --> 00:29:07,610
stuff looks like didn't go quite as

00:29:05,420 --> 00:29:13,010
perfectly as they hoped but I think it

00:29:07,610 --> 00:29:16,850
went okay so and you'll get the very

00:29:13,010 --> 00:29:19,690
important question I mean the very

00:29:16,850 --> 00:29:19,690
important slide now

00:29:28,059 --> 00:29:32,450
and the variants persons slide that says

00:29:31,130 --> 00:29:34,309
thank you for your attention and if you

00:29:32,450 --> 00:29:40,580
have any questions and I see one on the

00:29:34,309 --> 00:29:45,250
back there I thanks for the presentation

00:29:40,580 --> 00:29:51,740
so my question is this beggar support

00:29:45,250 --> 00:29:53,870
PGP key signed commits so the question

00:29:51,740 --> 00:29:57,169
is does a beggar Shapoorji PD sign

00:29:53,870 --> 00:29:59,240
commits so as a good repo it supports

00:29:57,169 --> 00:30:01,940
deputies and commits it does not

00:29:59,240 --> 00:30:03,950
currently show them in the UI nor

00:30:01,940 --> 00:30:04,270
validates that the commits belong to the

00:30:03,950 --> 00:30:06,620
user

00:30:04,270 --> 00:30:09,230
sorry you can touch the shuttle user

00:30:06,620 --> 00:30:11,960
with you could via the email address I

00:30:09,230 --> 00:30:13,850
guess it doesn't show that in the UI but

00:30:11,960 --> 00:30:16,250
the backend does support it like any

00:30:13,850 --> 00:30:18,529
other git repos with this good vicar

00:30:16,250 --> 00:30:20,559
request there is already a ticket on

00:30:18,529 --> 00:30:20,559
that

00:30:27,320 --> 00:30:34,190
and as a question coming how do you

00:30:31,730 --> 00:30:36,050
store the boundaries so you have respect

00:30:34,190 --> 00:30:39,080
for them patches but usually also have

00:30:36,050 --> 00:30:41,900
troubles and boundary files how do you

00:30:39,080 --> 00:30:43,730
store them so the question is how do we

00:30:41,900 --> 00:30:53,720
store the binaries on the federales gate

00:30:43,730 --> 00:30:56,150
I guess so

00:30:53,720 --> 00:30:58,250
in federal we split in two different

00:30:56,150 --> 00:31:01,340
locations the tar balls from the spec

00:30:58,250 --> 00:31:04,010
files the spec file on git repos and tar

00:31:01,340 --> 00:31:07,010
bolts on the leucocyte cash on the side

00:31:04,010 --> 00:31:09,080
of it and our build system pulls the DES

00:31:07,010 --> 00:31:11,840
spec files which also contains the files

00:31:09,080 --> 00:31:14,420
sources which includes the checksum of

00:31:11,840 --> 00:31:16,010
the tar balls and retrieve using that

00:31:14,420 --> 00:31:23,020
checksums which is a corresponding tab

00:31:16,010 --> 00:31:27,950
or founded cassette cache I want to do a

00:31:23,020 --> 00:31:32,620
code hosting scenario using Pargo what

00:31:27,950 --> 00:31:38,330
are the key gaps / differences between

00:31:32,620 --> 00:31:39,800
Haggar and let's say gitlab what are the

00:31:38,330 --> 00:31:46,070
what are the key differences between

00:31:39,800 --> 00:31:48,470
pygar and get lab my tech will be it's

00:31:46,070 --> 00:31:49,670
going to depend on what your take the

00:31:48,470 --> 00:31:53,210
technology stack that you're currently

00:31:49,670 --> 00:31:55,310
using if your team is familiar and well

00:31:53,210 --> 00:31:58,520
versed in Ruby and knows how to maintain

00:31:55,310 --> 00:32:00,980
good lab instances then you know I would

00:31:58,520 --> 00:32:04,010
I would probably rely on github if your

00:32:00,980 --> 00:32:05,780
team is a Python shop or it's not

00:32:04,010 --> 00:32:08,870
doesn't have much experience with

00:32:05,780 --> 00:32:11,510
running Ruby instances bugger is

00:32:08,870 --> 00:32:15,560
probably done an interesting project to

00:32:11,510 --> 00:32:17,210
look into a little bit of this like the

00:32:15,560 --> 00:32:19,190
other thing is if you're running more

00:32:17,210 --> 00:32:20,750
constrained environments like one of the

00:32:19,190 --> 00:32:22,730
one of the things that finally pushed me

00:32:20,750 --> 00:32:24,620
to starting to look at bagram or was

00:32:22,730 --> 00:32:29,390
that I could no longer run git lab

00:32:24,620 --> 00:32:32,330
comfortably on my tiny cloud VPS or on

00:32:29,390 --> 00:32:35,300
my on my little crappy arm servers that

00:32:32,330 --> 00:32:36,920
I have at home and so with more

00:32:35,300 --> 00:32:38,780
constrained environments or more

00:32:36,920 --> 00:32:41,670
flexible environments peckers a lot

00:32:38,780 --> 00:32:43,630
easier to roll out and manage

00:32:41,670 --> 00:32:45,040
it's easier to plug into other

00:32:43,630 --> 00:32:47,170
infrastructure if you really want to

00:32:45,040 --> 00:32:49,270
because of the way that the architecture

00:32:47,170 --> 00:32:51,790
is set up whereas gitlab is a very very

00:32:49,270 --> 00:32:53,320
large monolithic Ruby on Rails thing

00:32:51,790 --> 00:32:57,940
with weird hybrid things all over the

00:32:53,320 --> 00:32:59,980
place so at least if you if you don't

00:32:57,940 --> 00:33:03,610
need all of the fanciness that get lab

00:32:59,980 --> 00:33:04,870
house and if you want to have a somewhat

00:33:03,610 --> 00:33:07,630
smoother and easier experience

00:33:04,870 --> 00:33:10,000
maintaining your git server and you've

00:33:07,630 --> 00:33:11,920
already got like maybe and you have some

00:33:10,000 --> 00:33:13,210
level of Python experience for like

00:33:11,920 --> 00:33:15,220
maybe if you want to extend things a

00:33:13,210 --> 00:33:16,300
little bit packers a lot nicer of a

00:33:15,220 --> 00:33:18,120
choice than a lot of the other

00:33:16,300 --> 00:33:21,640
alternatives

00:33:18,120 --> 00:33:23,620
so it's production-ready then I mean

00:33:21,640 --> 00:33:26,200
we're running it all over the place I

00:33:23,620 --> 00:33:28,780
mean I personally have to private Packer

00:33:26,200 --> 00:33:31,840
instances one that runs on Fedora and

00:33:28,780 --> 00:33:33,430
one that runs on openSUSE and mainly

00:33:31,840 --> 00:33:39,670
because the openSUSE one runs on Python

00:33:33,430 --> 00:33:43,420
3 but at in the Fedora project we've got

00:33:39,670 --> 00:33:46,720
several of them I think we have to

00:33:43,420 --> 00:33:49,060
production ones to staging ones and then

00:33:46,720 --> 00:33:52,960
CentOS has to has a production in the

00:33:49,060 --> 00:33:56,650
staging yeah and then we have a thingy

00:33:52,960 --> 00:34:00,400
that floats around doing stuff there's a

00:33:56,650 --> 00:34:03,250
few I know of a few public independent

00:34:00,400 --> 00:34:04,480
instances that exist you can kind of

00:34:03,250 --> 00:34:10,240
find them if you know how to google for

00:34:04,480 --> 00:34:12,330
them there's also a few people that are

00:34:10,240 --> 00:34:14,260
using it for their internal corporate

00:34:12,330 --> 00:34:16,210
Packer instances and they've actually

00:34:14,260 --> 00:34:18,520
contributed fixes and improvements to us

00:34:16,210 --> 00:34:20,920
as well so like the low barrier to entry

00:34:18,520 --> 00:34:22,750
to contributing and making the software

00:34:20,920 --> 00:34:26,530
better is actually I think a huge plus

00:34:22,750 --> 00:34:27,880
point for a lot of people and just a

00:34:26,530 --> 00:34:30,430
side note on the under resource

00:34:27,880 --> 00:34:33,430
constraint I actually managed to get a

00:34:30,430 --> 00:34:35,350
guy running on a banana pie I'm not

00:34:33,430 --> 00:34:37,660
saying it was fast I'm not saying you

00:34:35,350 --> 00:34:42,910
want to run the Linux kernel tree in

00:34:37,660 --> 00:34:44,710
that bagger instance but it did work to

00:34:42,910 --> 00:34:47,710
more patients first of all when it comes

00:34:44,710 --> 00:34:49,270
to using it internally has your Red Hat

00:34:47,710 --> 00:34:51,790
product team ever thought about

00:34:49,270 --> 00:34:54,620
integrating it into the open shipped

00:34:51,790 --> 00:34:56,000
story or so or are they on a complete

00:34:54,620 --> 00:34:58,640
different track with their technology

00:34:56,000 --> 00:35:01,910
stack on the second one on the CI do you

00:34:58,640 --> 00:35:03,770
already have any direction like is there

00:35:01,910 --> 00:35:05,780
an existing CI project you would want to

00:35:03,770 --> 00:35:07,850
integrate or are you going to build this

00:35:05,780 --> 00:35:11,140
from scratch there any ideas about that

00:35:07,850 --> 00:35:13,700
one so there are two questions here is

00:35:11,140 --> 00:35:16,340
from a project perspective as well

00:35:13,700 --> 00:35:19,730
considered pygar to become something to

00:35:16,340 --> 00:35:21,470
predict to predict ties knots actually

00:35:19,730 --> 00:35:24,220
able to answer that question I don't

00:35:21,470 --> 00:35:28,310
think it has been considered at church

00:35:24,220 --> 00:35:29,930
it is run in Somali and I can also say

00:35:28,310 --> 00:35:33,170
the internal instance is running in

00:35:29,930 --> 00:35:35,570
OpenShift that's that's how we know it

00:35:33,170 --> 00:35:37,640
does run in openshift and the second

00:35:35,570 --> 00:35:40,010
question is about the pegasi ice so we

00:35:37,640 --> 00:35:43,310
currently support jenkins and you can

00:35:40,010 --> 00:35:47,750
point by go to any jenkins instance that

00:35:43,310 --> 00:35:49,790
Packer can access the jenkins we mostly

00:35:47,750 --> 00:35:51,830
use is the one that is a set by the CI

00:35:49,790 --> 00:35:54,140
that centers that fork folks just

00:35:51,830 --> 00:35:56,120
because the sentox works are you know

00:35:54,140 --> 00:35:58,820
next-door neighbor and we can actually

00:35:56,120 --> 00:36:00,560
easily poke them and see how it does we

00:35:58,820 --> 00:36:03,290
would like to integrate with more CI

00:36:00,560 --> 00:36:05,690
system the question has been you know so

00:36:03,290 --> 00:36:08,570
far Seattle Santos has been not so our

00:36:05,690 --> 00:36:11,810
needs so it's it puts less pressure on

00:36:08,570 --> 00:36:14,330
integrating with others the architecture

00:36:11,810 --> 00:36:16,970
use is extensible so we should be able

00:36:14,330 --> 00:36:19,400
to integrate with was a CI system we are

00:36:16,970 --> 00:36:23,750
not we haven't managed to actually get

00:36:19,400 --> 00:36:26,750
this done yet so at least from the with

00:36:23,750 --> 00:36:29,420
the Pagar CI stuff with with the jenkins

00:36:26,750 --> 00:36:31,580
like the way that the Packer CI is set

00:36:29,420 --> 00:36:33,530
up when you set up a project and turn on

00:36:31,580 --> 00:36:34,790
the feature you tell it what Jenkins

00:36:33,530 --> 00:36:37,070
instance you'd like to configure it with

00:36:34,790 --> 00:36:38,900
so like for example if somebody had a

00:36:37,070 --> 00:36:40,880
project on Packer i/o they could easily

00:36:38,900 --> 00:36:42,860
and that was focused mainly on souza

00:36:40,880 --> 00:36:44,630
things they could point it at CI tat

00:36:42,860 --> 00:36:47,140
openSUSE org and if they have the

00:36:44,630 --> 00:36:50,000
education set up to be able to do that

00:36:47,140 --> 00:36:51,590
it can actually run CI jobs their track

00:36:50,000 --> 00:36:53,750
the statuses report back and do those

00:36:51,590 --> 00:36:57,110
kinds of things we have been looking at

00:36:53,750 --> 00:37:00,050
a number of other kinds of CI systems to

00:36:57,110 --> 00:37:03,050
like explore for improving to get Travis

00:37:00,050 --> 00:37:04,370
CI or get lab CI like quality of ease of

00:37:03,050 --> 00:37:07,700
use for managing CI

00:37:04,370 --> 00:37:09,410
it's just difficult because this space

00:37:07,700 --> 00:37:12,800
is very

00:37:09,410 --> 00:37:14,450
confusing is to put it mildly insofar as

00:37:12,800 --> 00:37:16,550
like plugging it in with stuff like open

00:37:14,450 --> 00:37:20,210
shift one of the things that I've been

00:37:16,550 --> 00:37:22,580
doing because of you know the stuff that

00:37:20,210 --> 00:37:24,290
I run is like I'd like to plug with the

00:37:22,580 --> 00:37:26,420
build release pipeline that's included

00:37:24,290 --> 00:37:28,250
in open shift with packer and part of

00:37:26,420 --> 00:37:29,750
that is where we've been working on

00:37:28,250 --> 00:37:31,369
beefing up the notifications and the

00:37:29,750 --> 00:37:32,119
webhook stuff so that stuff works a

00:37:31,369 --> 00:37:35,540
little bit better

00:37:32,119 --> 00:37:39,410
there's already a project that was

00:37:35,540 --> 00:37:41,570
written by one of the one of the packer

00:37:39,410 --> 00:37:43,390
contributors that actually bridges the

00:37:41,570 --> 00:37:45,770
gap already in a slightly different way

00:37:43,390 --> 00:37:46,940
but I'd like to have more direct support

00:37:45,770 --> 00:37:49,609
for being able to integrate with more

00:37:46,940 --> 00:37:51,500
systems for these kinds of things and

00:37:49,609 --> 00:37:53,420
that's kind of like where part of my

00:37:51,500 --> 00:37:55,510
focus has been recently for these kinds

00:37:53,420 --> 00:37:55,510
of things

00:38:03,720 --> 00:38:12,990
does it have a helmet art does it run on

00:38:08,430 --> 00:38:15,840
kubernetes we don't have an official

00:38:12,990 --> 00:38:18,350
helm chart for it because I know that

00:38:15,840 --> 00:38:22,770
one exists because one of the externally

00:38:18,350 --> 00:38:24,930
run private of instances of Packer is

00:38:22,770 --> 00:38:27,390
run into kubernetes but nobody has

00:38:24,930 --> 00:38:30,150
stepped up to contribute a proper helm

00:38:27,390 --> 00:38:36,710
chart to us we would love to have one

00:38:30,150 --> 00:38:36,710
it's just nobody has given one to us I

00:38:38,120 --> 00:38:41,190
think that's the end of the question so

00:38:40,080 --> 00:38:44,180
thank you all for your attention and

00:38:41,190 --> 00:38:44,180

YouTube URL: https://www.youtube.com/watch?v=wastUxOT6IQ


