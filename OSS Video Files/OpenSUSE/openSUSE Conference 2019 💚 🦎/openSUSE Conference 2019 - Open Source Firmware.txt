Title: openSUSE Conference 2019 - Open Source Firmware
Publication date: 2019-05-25
Playlist: openSUSE Conference 2019 ðŸ’š ðŸ¦Ž
Description: 
	https://media.ccc.de/v/2450-open-source-firmware

... and I finally had my personal bootsplash screen :)

Firmware is found in all computing devices, including PCs, laptops, networking equipment, printers, embedded devices such as IoT and industrial controllers, mobile phones, tablets, and more. The community around open source firmware has grown over the last years, allowing for more exchange in the development and granting freedom to end users. Prominent projects like U-Boot, Tianocore, coreboot and others teach how firmware works and welcome contributions. This talk provides a brief introduction into firmware, an overview of the general build process, a perception of the current state of development on two platforms, an end user report, and a summary of the first Open Source Firmware Conference, which was supported by the openSUSE project.

Firmware is found in all computing devices, including PCs, laptops, networking equipment, printers, embedded devices such as IoT and industrial controllers, mobile phones, tablets, and more. The community around open source firmware has grown over the last years, allowing for more exchange in the development and granting freedom to end users. Prominent projects like U-Boot, Tianocore, coreboot and others teach how firmware works and welcome contributions. This talk provides a brief introduction into firmware, an overview of the general build process, a perception of the current state of development on two platforms, an end user report, and a summary of the first Open Source Firmware Conference, which was supported by the openSUSE project.

Daniel Maslowski
Captions: 
	00:00:06,000 --> 00:00:14,340
hello everyone I'm Daniel today we'll be

00:00:10,870 --> 00:00:14,340
speaking about open source firmware

00:00:15,209 --> 00:00:22,329
first a small introduction

00:00:18,390 --> 00:00:25,179
starting with me because not everybody

00:00:22,329 --> 00:00:28,539
necessarily knows me and I'm you know

00:00:25,179 --> 00:00:31,060
strolling around everywhere so yeah this

00:00:28,539 --> 00:00:33,880
is me I'm Daniel I'm actually a web

00:00:31,060 --> 00:00:36,520
developer so people might ask themselves

00:00:33,880 --> 00:00:39,280
why am I here at openSUSE conference

00:00:36,520 --> 00:00:41,800
because we're talking about operating

00:00:39,280 --> 00:00:45,460
systems we're talking about software at

00:00:41,800 --> 00:00:49,630
large our platform is a distribution

00:00:45,460 --> 00:00:52,750
mostly so and I'm not even going to talk

00:00:49,630 --> 00:00:54,550
about web stuff anyway

00:00:52,750 --> 00:01:00,970
I also have a security background in

00:00:54,550 --> 00:01:04,089
fact ok so I look at all the things out

00:01:00,970 --> 00:01:07,600
there I don't just look at the very high

00:01:04,089 --> 00:01:09,700
level who are necessary working but also

00:01:07,600 --> 00:01:12,909
look at very very low levels sometimes

00:01:09,700 --> 00:01:15,580
and that's what brought me here I'm also

00:01:12,909 --> 00:01:19,870
a member of a hackerspace in boham das

00:01:15,580 --> 00:01:28,240
Dubois that I down there that's our logo

00:01:19,870 --> 00:01:30,940
and our doctor notes but first I want to

00:01:28,240 --> 00:01:35,580
thank you and by you I mean especially

00:01:30,940 --> 00:01:39,909
openSUSE the project and the community

00:01:35,580 --> 00:01:43,270
you all know this friend here on the

00:01:39,909 --> 00:01:47,680
left if you don't know the one on the

00:01:43,270 --> 00:01:50,170
right this is Oscar and Oscar is the

00:01:47,680 --> 00:01:56,740
mascot of the open source firmware

00:01:50,170 --> 00:01:59,610
conference last year we had the very

00:01:56,740 --> 00:02:02,460
first ever open source formal conference

00:01:59,610 --> 00:02:07,090
not far away from here actually in

00:02:02,460 --> 00:02:12,069
Erlangen and among some large sponsors

00:02:07,090 --> 00:02:15,400
we had like arm and Intel was there we

00:02:12,069 --> 00:02:17,740
all said openSUSE and that was a very

00:02:15,400 --> 00:02:19,420
very nice surprise for me I didn't

00:02:17,740 --> 00:02:23,950
really expect this

00:02:19,420 --> 00:02:26,290
so yeah thanks again we had 200

00:02:23,950 --> 00:02:30,630
participants from all over the world

00:02:26,290 --> 00:02:36,040
from many different ages from different

00:02:30,630 --> 00:02:39,910
vendors companies we had students we had

00:02:36,040 --> 00:02:42,790
hobbyists literally everyone and also

00:02:39,910 --> 00:02:45,940
people from different backgrounds okay

00:02:42,790 --> 00:02:49,420
so not just people working directly on

00:02:45,940 --> 00:02:52,330
firmware but we also have people who are

00:02:49,420 --> 00:02:54,850
even closer to Hardware people who are

00:02:52,330 --> 00:02:57,960
more in the field of security and that's

00:02:54,850 --> 00:03:01,630
why we had two full days of talks and

00:02:57,960 --> 00:03:04,600
two tracks even one of them covering the

00:03:01,630 --> 00:03:07,180
entire security topic and if you have

00:03:04,600 --> 00:03:09,970
been following the news a bit you might

00:03:07,180 --> 00:03:12,700
see that suddenly we need to look a bit

00:03:09,970 --> 00:03:16,210
more at security also in the fields of

00:03:12,700 --> 00:03:19,180
firmware but more on that later in

00:03:16,210 --> 00:03:22,090
addition we also had two days full of

00:03:19,180 --> 00:03:25,720
workshops so we also had a lot of

00:03:22,090 --> 00:03:31,000
sharing going on ok and that's what we

00:03:25,720 --> 00:03:35,140
want to spike now because I mean we all

00:03:31,000 --> 00:03:37,180
know about open source but we feel like

00:03:35,140 --> 00:03:43,330
there should also be more in the field

00:03:37,180 --> 00:03:48,190
of formal development so speaking about

00:03:43,330 --> 00:03:51,250
which what is firmware anyway okay so

00:03:48,190 --> 00:03:53,500
firmware is literally everywhere the

00:03:51,250 --> 00:03:55,900
picture here on the left I took that

00:03:53,500 --> 00:03:58,390
from one of the apprentice in our office

00:03:55,900 --> 00:04:00,640
once because it was just updating its

00:03:58,390 --> 00:04:03,640
firmware you know it happens sometimes

00:04:00,640 --> 00:04:05,770
so you need to tell people oh you can

00:04:03,640 --> 00:04:08,410
print right now it's running a firmware

00:04:05,770 --> 00:04:11,080
update and now people suddenly get aware

00:04:08,410 --> 00:04:14,230
of well things actually running on those

00:04:11,080 --> 00:04:16,989
devices no almost everyone has watched

00:04:14,230 --> 00:04:19,209
now like this or not necessarily

00:04:16,989 --> 00:04:21,310
everyone but many people which is also

00:04:19,209 --> 00:04:22,870
running some sort of firmware so those

00:04:21,310 --> 00:04:29,130
are those very small devices where you

00:04:22,870 --> 00:04:32,740
usually have one system-on-chip and well

00:04:29,130 --> 00:04:36,190
they are kind of ubiquitous now

00:04:32,740 --> 00:04:40,780
on the other hand we all know laptops

00:04:36,190 --> 00:04:42,730
like this one here this year is an

00:04:40,780 --> 00:04:45,400
actual photograph of another laptop of

00:04:42,730 --> 00:04:48,150
mine and here we actually see those

00:04:45,400 --> 00:04:51,460
settings we can do in the firmware and

00:04:48,150 --> 00:04:54,400
in laptops we typically have more than

00:04:51,460 --> 00:04:56,980
just one chip we have lots of chips and

00:04:54,400 --> 00:04:59,590
they all need some sort of homework so

00:04:56,980 --> 00:05:02,110
you all know BIOS the legacy basic

00:04:59,590 --> 00:05:05,170
input/output system you heard about UEFI

00:05:02,110 --> 00:05:07,840
so that's what many modern platforms are

00:05:05,170 --> 00:05:12,550
now running that's what's on the host

00:05:07,840 --> 00:05:15,040
CPU but you also have the EM e the Intel

00:05:12,550 --> 00:05:17,140
management engine which is a tiny core

00:05:15,040 --> 00:05:20,350
processor also somewhere on your

00:05:17,140 --> 00:05:24,010
mainboard found among Intel devices

00:05:20,350 --> 00:05:25,180
mostly of course then you have a Gigabit

00:05:24,010 --> 00:05:27,820
Ethernet interface

00:05:25,180 --> 00:05:31,750
it also requires additional firmware in

00:05:27,820 --> 00:05:33,700
many cases so that means without that

00:05:31,750 --> 00:05:37,060
firmware things may not even function

00:05:33,700 --> 00:05:39,340
properly there is an embedded controller

00:05:37,060 --> 00:05:41,980
somewhere on your laptop which is

00:05:39,340 --> 00:05:45,930
nowadays responsible for example to

00:05:41,980 --> 00:05:48,160
power the fan so it will measure and

00:05:45,930 --> 00:05:51,870
check the temperature if it's running

00:05:48,160 --> 00:05:55,360
too hot then it will turn on the fan

00:05:51,870 --> 00:05:58,600
make it go faster and if that doesn't

00:05:55,360 --> 00:06:06,180
work then well your laptop won't survive

00:05:58,600 --> 00:06:09,220
too long which brings us to vendors so

00:06:06,180 --> 00:06:11,020
vendors are already providing us with

00:06:09,220 --> 00:06:13,480
firmware right so when we buy a laptop

00:06:11,020 --> 00:06:15,490
we know there is already something on

00:06:13,480 --> 00:06:17,100
there even if there is no operating

00:06:15,490 --> 00:06:20,920
system installed

00:06:17,100 --> 00:06:26,050
we still have former so we can boot one

00:06:20,920 --> 00:06:30,190
of our systems and solid and happily

00:06:26,050 --> 00:06:34,110
around our system right and we can even

00:06:30,190 --> 00:06:37,660
upgrade it so now we have a new project

00:06:34,110 --> 00:06:40,120
it's quite some years out now but you

00:06:37,660 --> 00:06:42,460
know still getting more and more

00:06:40,120 --> 00:06:45,460
traction the Linux vendors firmware

00:06:42,460 --> 00:06:48,100
service where vendors can go

00:06:45,460 --> 00:06:50,289
upload their firmware so that people

00:06:48,100 --> 00:06:54,250
running you know all those diverse

00:06:50,289 --> 00:06:57,099
districts we have so many of them people

00:06:54,250 --> 00:07:00,270
can still regardless of the distro use

00:06:57,099 --> 00:07:02,889
one single tool to upgrade the firmware

00:07:00,270 --> 00:07:05,800
there is more than 100 vendors now on

00:07:02,889 --> 00:07:08,740
the list on the platform not all of them

00:07:05,800 --> 00:07:10,449
are already supplying updates there but

00:07:08,740 --> 00:07:15,130
the platform is growing and it's more

00:07:10,449 --> 00:07:17,770
and more vendors doing something so

00:07:15,130 --> 00:07:19,930
we're actually done right so we don't

00:07:17,770 --> 00:07:25,180
really need to do much more in the

00:07:19,930 --> 00:07:28,660
fields of February let's check because

00:07:25,180 --> 00:07:32,759
there's actually some issues now okay so

00:07:28,660 --> 00:07:35,349
the first thing is continuous updates I

00:07:32,759 --> 00:07:39,610
don't know about you but usually when I

00:07:35,349 --> 00:07:43,020
as an end-user I buy one laptop and I

00:07:39,610 --> 00:07:46,060
check the vendor site for updates

00:07:43,020 --> 00:07:48,849
usually I can count like two or maybe

00:07:46,060 --> 00:07:52,599
three updates through the entire

00:07:48,849 --> 00:07:56,940
lifetime of the device which is not very

00:07:52,599 --> 00:07:59,099
much we already had a very similar issue

00:07:56,940 --> 00:08:01,750
with phones

00:07:59,099 --> 00:08:03,219
you remember those devices which have

00:08:01,750 --> 00:08:06,419
been running an ancient version of

00:08:03,219 --> 00:08:09,190
Android for I don't know how many years

00:08:06,419 --> 00:08:11,770
which is not just a problem for

00:08:09,190 --> 00:08:15,219
consumers in the end but also for the

00:08:11,770 --> 00:08:18,130
entire ecosystem and my company we have

00:08:15,219 --> 00:08:20,020
also developers on mobile platforms know

00:08:18,130 --> 00:08:21,940
there's iOS developers which are always

00:08:20,020 --> 00:08:24,099
happy because Apple is always shipping

00:08:21,940 --> 00:08:26,830
updates and there is Android developers

00:08:24,099 --> 00:08:28,509
who still always have to check what do

00:08:26,830 --> 00:08:30,969
we still have to support this and this

00:08:28,509 --> 00:08:37,690
version how many people are still using

00:08:30,969 --> 00:08:42,250
it and we don't want to keep the problem

00:08:37,690 --> 00:08:48,010
everywhere so since we currently depend

00:08:42,250 --> 00:08:54,010
on the vendors we need to do something

00:08:48,010 --> 00:08:56,770
ourselves maybe and we don't just rely

00:08:54,010 --> 00:08:59,000
on the vendors themselves but we also

00:08:56,770 --> 00:09:01,460
rely on the quality I just

00:08:59,000 --> 00:09:04,730
a chat outside with someone telling me

00:09:01,460 --> 00:09:09,140
that they bought a device and via me

00:09:04,730 --> 00:09:12,800
drive and it had a firmware issue for

00:09:09,140 --> 00:09:15,110
about nine months until they got an

00:09:12,800 --> 00:09:16,840
update so imagine you buy a device and

00:09:15,110 --> 00:09:19,610
you can use it for an entire year

00:09:16,840 --> 00:09:21,650
because your vendor doesn't provide you

00:09:19,610 --> 00:09:24,830
a firmware that actually works for it

00:09:21,650 --> 00:09:27,920
and since we have so many components now

00:09:24,830 --> 00:09:33,650
there is so much more we need to check

00:09:27,920 --> 00:09:36,410
for everything to work together ok you

00:09:33,650 --> 00:09:38,840
can see one link here I will publish

00:09:36,410 --> 00:09:41,450
these slides later so you can follow all

00:09:38,840 --> 00:09:44,480
those links I promise you there is many

00:09:41,450 --> 00:09:51,320
more things to look into so you can

00:09:44,480 --> 00:10:00,470
follow them later ok let's look a bit

00:09:51,320 --> 00:10:04,120
closer at vendors supply chains you're

00:10:00,470 --> 00:10:06,620
this person down there on the right

00:10:04,120 --> 00:10:09,290
that's the end customer who is now

00:10:06,620 --> 00:10:12,710
buying some device you know we have this

00:10:09,290 --> 00:10:15,350
big flower above us which is promising

00:10:12,710 --> 00:10:17,660
us hey you can use a lot of free and

00:10:15,350 --> 00:10:20,420
Libre and open-source software can just

00:10:17,660 --> 00:10:22,130
download it you can share it you can

00:10:20,420 --> 00:10:24,320
look at it you can edit it you can

00:10:22,130 --> 00:10:30,530
redistribute it can do many things with

00:10:24,320 --> 00:10:33,370
it but that's only on the operating

00:10:30,530 --> 00:10:36,290
system currently and applications

00:10:33,370 --> 00:10:39,320
you still need to buy some hardware from

00:10:36,290 --> 00:10:41,870
a retailer you might be a bit unlucky

00:10:39,320 --> 00:10:44,660
you know sometimes you buy something and

00:10:41,870 --> 00:10:47,380
well you will just see oh that that

00:10:44,660 --> 00:10:52,339
thing doesn't really work for me

00:10:47,380 --> 00:10:55,910
you don't expect something like when the

00:10:52,339 --> 00:10:59,780
first problems arose when devices had

00:10:55,910 --> 00:11:02,240
you Fi checking for certain proprietary

00:10:59,780 --> 00:11:03,890
operating systems to be present you

00:11:02,240 --> 00:11:05,600
wanted to install another operating

00:11:03,890 --> 00:11:08,660
system and suddenly people were writing

00:11:05,600 --> 00:11:11,080
oh no nothing works anymore we have lost

00:11:08,660 --> 00:11:11,080
our freedom

00:11:12,940 --> 00:11:17,870
but that's only where you enter the

00:11:15,950 --> 00:11:19,820
supply chain so if you look at this

00:11:17,870 --> 00:11:21,520
picture I marked everything in colors

00:11:19,820 --> 00:11:24,800
which is a potential issue

00:11:21,520 --> 00:11:29,060
okay so behind your retailer from which

00:11:24,800 --> 00:11:31,640
you buy the hardware there is an OEM

00:11:29,060 --> 00:11:34,640
even behind or maybe other OEMs there

00:11:31,640 --> 00:11:39,380
can be a whole chain of OMS the original

00:11:34,640 --> 00:11:41,540
equipment manufacturers which again talk

00:11:39,380 --> 00:11:43,850
to other suppliers there is the

00:11:41,540 --> 00:11:46,399
so-called OD M's the device

00:11:43,850 --> 00:11:50,480
manufacturers or design manufacturers

00:11:46,399 --> 00:11:53,990
there is the IV's the independent BIOS

00:11:50,480 --> 00:11:55,279
vendors independence means that you know

00:11:53,990 --> 00:11:58,010
the chain is getting longer and longer

00:11:55,279 --> 00:12:00,640
and eventually we have the sock vendors

00:11:58,010 --> 00:12:03,050
which are actually creating the chips

00:12:00,640 --> 00:12:09,740
and all we have to assemble everything

00:12:03,050 --> 00:12:13,130
together and hope it works out which

00:12:09,740 --> 00:12:17,060
brings us to politics so we as consumers

00:12:13,130 --> 00:12:19,959
of course the only thing we can do is we

00:12:17,060 --> 00:12:22,370
can choose the devices we want to buy

00:12:19,959 --> 00:12:24,890
that's literally the only option we

00:12:22,370 --> 00:12:27,649
currently have when I look at

00:12:24,890 --> 00:12:29,959
hackerspaces usually there is like let's

00:12:27,649 --> 00:12:33,350
say 50 or 60 percent of people are

00:12:29,959 --> 00:12:35,120
running some old Lenovo thing hats for

00:12:33,350 --> 00:12:38,120
some reason it just it just developed

00:12:35,120 --> 00:12:40,880
like this so they're very well known for

00:12:38,120 --> 00:12:43,959
a lot of support so by support I mean

00:12:40,880 --> 00:12:49,640
you can run lots of free software on it

00:12:43,959 --> 00:12:53,510
even on some lower level layers and that

00:12:49,640 --> 00:13:01,279
includes even some firmware and more on

00:12:53,510 --> 00:13:04,880
that later now the problem is there's

00:13:01,279 --> 00:13:07,820
still lots of lobs in there so blobs or

00:13:04,880 --> 00:13:09,770
binary large objects that's what we

00:13:07,820 --> 00:13:17,320
cannot audit that's the proprietary

00:13:09,770 --> 00:13:20,510
stuff we get were we lack visibility if

00:13:17,320 --> 00:13:24,160
we even want to gain more freedom here

00:13:20,510 --> 00:13:24,160
we need to have documentation

00:13:24,320 --> 00:13:29,959
and we don't get that documentation

00:13:26,120 --> 00:13:36,130
everywhere so only very very few vendors

00:13:29,959 --> 00:13:38,690
actually publish their stuff which means

00:13:36,130 --> 00:13:40,579
sometimes you have to have a lot of

00:13:38,690 --> 00:13:44,000
understanding to actually even get

00:13:40,579 --> 00:13:47,449
started we don't even have word

00:13:44,000 --> 00:13:50,180
schematics in many cases so what we need

00:13:47,449 --> 00:13:53,120
to do is we need to disassemble our

00:13:50,180 --> 00:13:54,980
devices we need to look at the board

00:13:53,120 --> 00:13:57,949
itself to get an understanding of how

00:13:54,980 --> 00:14:00,380
things work or try to come up with

00:13:57,949 --> 00:14:03,740
conclusions from what we already know

00:14:00,380 --> 00:14:07,430
from before but again it's still lack of

00:14:03,740 --> 00:14:09,019
knowledge we start with and then again

00:14:07,430 --> 00:14:11,839
there is so many chips which are

00:14:09,019 --> 00:14:16,639
requiring firmware and I just mentioned

00:14:11,839 --> 00:14:22,069
some very briefly but it's also other

00:14:16,639 --> 00:14:24,740
components like video for example you

00:14:22,069 --> 00:14:31,339
cannot even have video output without

00:14:24,740 --> 00:14:33,199
blobs on some platforms and that's a bad

00:14:31,339 --> 00:14:35,449
thing for us as an open source community

00:14:33,199 --> 00:14:37,010
we don't really want that we would like

00:14:35,449 --> 00:14:42,430
to have the sources we would like to

00:14:37,010 --> 00:14:46,389
also work on things improve them now

00:14:42,430 --> 00:14:51,069
what current vendors do is they

00:14:46,389 --> 00:14:53,930
implement an interface called UEFI it's

00:14:51,069 --> 00:14:56,149
promising to be extensible it's a

00:14:53,930 --> 00:15:00,230
firmware interface that's literally what

00:14:56,149 --> 00:15:02,329
it means and it's already huge and I

00:15:00,230 --> 00:15:05,839
imagine a huge specification and you've

00:15:02,329 --> 00:15:11,139
want to extend that that's so complex

00:15:05,839 --> 00:15:13,639
this is not where we want to start and

00:15:11,139 --> 00:15:17,209
then of course there is security

00:15:13,639 --> 00:15:19,819
I guess everyone has seen those pictures

00:15:17,209 --> 00:15:22,189
at some point specter and meltdown they

00:15:19,819 --> 00:15:24,949
were in the news they were big there

00:15:22,189 --> 00:15:28,610
were those raw hammer attacks and this

00:15:24,949 --> 00:15:30,529
is most is still a research now so it's

00:15:28,610 --> 00:15:35,300
even hard to tell if people actually

00:15:30,529 --> 00:15:38,150
exploited those vulnerabilities so once

00:15:35,300 --> 00:15:41,750
again that's another reason why we need

00:15:38,150 --> 00:15:46,190
more open source firmware and also Bart

00:15:41,750 --> 00:15:49,040
schematics and everything else the Intel

00:15:46,190 --> 00:15:53,450
management engines had a longer list of

00:15:49,040 --> 00:15:56,510
CVS was one then the second one and

00:15:53,450 --> 00:15:59,860
three and four and five coming up people

00:15:56,510 --> 00:16:03,410
were getting a bit nervous about it

00:15:59,860 --> 00:16:04,940
suddenly calming down again but still in

00:16:03,410 --> 00:16:08,960
the first place it sounded like oh no

00:16:04,940 --> 00:16:11,480
everything is broken now well I can calm

00:16:08,960 --> 00:16:15,130
you down again as well it's not as bad

00:16:11,480 --> 00:16:18,320
as it sounds for end consumers at least

00:16:15,130 --> 00:16:20,690
some server boards were having trouble

00:16:18,320 --> 00:16:22,490
with this of course because this is

00:16:20,690 --> 00:16:25,810
where the management engine was actually

00:16:22,490 --> 00:16:38,530
active can be used for provisioning and

00:16:25,810 --> 00:16:38,530
that should of course work so x86

00:16:40,120 --> 00:16:52,510
everything which has a - is a very very

00:16:45,920 --> 00:16:55,430
low layer this is where we have a

00:16:52,510 --> 00:16:59,540
platform which we are running on again

00:16:55,430 --> 00:17:03,020
and the very first thing here is the ME

00:16:59,540 --> 00:17:06,290
the management engine we rely on

00:17:03,020 --> 00:17:11,240
something which no one on the outside

00:17:06,290 --> 00:17:13,610
word has actually seen ever we could

00:17:11,240 --> 00:17:16,070
only do some blackbox tests so we

00:17:13,610 --> 00:17:19,550
couldn't look from the outside and at

00:17:16,070 --> 00:17:21,709
some point say oh well there's some

00:17:19,550 --> 00:17:24,800
service running here and there and we

00:17:21,709 --> 00:17:29,240
can try fuzzing it and that's how they

00:17:24,800 --> 00:17:31,790
found the issues with it and then we

00:17:29,240 --> 00:17:35,390
built firmware on top of that there is

00:17:31,790 --> 00:17:37,790
now the system management mode based on

00:17:35,390 --> 00:17:40,580
that we can run hypervisors and then

00:17:37,790 --> 00:17:42,440
finally and this is where we are more

00:17:40,580 --> 00:17:45,530
familiar with everything we have our

00:17:42,440 --> 00:17:48,380
kernel it can be a Linux kernel can be a

00:17:45,530 --> 00:17:51,710
BSD kernel of course something which is

00:17:48,380 --> 00:17:51,929
open source which we know works and we

00:17:51,710 --> 00:17:54,899
know

00:17:51,929 --> 00:17:55,980
how it works because we have a lot of

00:17:54,899 --> 00:17:59,210
knowledge about it

00:17:55,980 --> 00:18:02,369
we have sharing of documentation so

00:17:59,210 --> 00:18:04,649
that's exactly the opposite of what

00:18:02,369 --> 00:18:06,269
proprietary vendors are doing and this

00:18:04,649 --> 00:18:08,879
is what we want and we want to keep it

00:18:06,269 --> 00:18:11,730
that way and of course that's also true

00:18:08,879 --> 00:18:15,629
for the applications we run on top right

00:18:11,730 --> 00:18:19,259
so I guess everyone here knows lots of

00:18:15,629 --> 00:18:21,869
open-source applications they know how

00:18:19,259 --> 00:18:23,549
to use them and maybe even saw some of

00:18:21,869 --> 00:18:26,429
the source code or even delivered

00:18:23,549 --> 00:18:28,350
patches at some point by the way I made

00:18:26,429 --> 00:18:30,269
this presentation here with pen doc

00:18:28,350 --> 00:18:34,169
although it's the same design as

00:18:30,269 --> 00:18:36,240
everyone else is using I made it work

00:18:34,169 --> 00:18:39,600
also with pen doc so they got some

00:18:36,240 --> 00:18:42,929
patches now so that's one upside of this

00:18:39,600 --> 00:18:47,539
talk here but that's also what we want

00:18:42,929 --> 00:18:49,970
right so being able to contribute

00:18:47,539 --> 00:18:57,419
knowing what's going on

00:18:49,970 --> 00:19:01,309
auditing things giving back and that's

00:18:57,419 --> 00:19:01,309
why finally we want open source firmware

00:19:02,210 --> 00:19:08,960
there is one project called you boot you

00:19:06,480 --> 00:19:12,600
might have heard about it because it's

00:19:08,960 --> 00:19:15,509
quite famous now they support multiple

00:19:12,600 --> 00:19:19,169
different architectures more than a

00:19:15,509 --> 00:19:22,619
thousand ports and you find them on lots

00:19:19,169 --> 00:19:26,369
of small devices that includes lots of

00:19:22,619 --> 00:19:29,519
routers you can get for home use and

00:19:26,369 --> 00:19:32,309
also stuff like this this thing here is

00:19:29,519 --> 00:19:35,249
so tiny it's literally just a Gigabit

00:19:32,309 --> 00:19:38,850
Ethernet port and a small MIPS CPU

00:19:35,249 --> 00:19:41,580
behind it and that's probably booting

00:19:38,850 --> 00:19:46,169
with you boot I'm so investigating this

00:19:41,580 --> 00:19:47,369
but the this is kind of the devices

00:19:46,169 --> 00:19:51,179
we're talking about when we talk about

00:19:47,369 --> 00:19:55,140
you good lossy it's also been used on

00:19:51,179 --> 00:19:57,570
other platforms of course yeah

00:19:55,140 --> 00:19:59,400
and what does you would do it

00:19:57,570 --> 00:20:03,120
initializes your hardware

00:19:59,400 --> 00:20:05,070
so eventually including this device and

00:20:03,120 --> 00:20:07,710
also your home routers we probably run

00:20:05,070 --> 00:20:12,000
your Linux kernel on top in this case

00:20:07,710 --> 00:20:15,000
here it's a built of open wrt the famous

00:20:12,000 --> 00:20:18,720
open-source router project which is also

00:20:15,000 --> 00:20:20,549
used for the German - project or not

00:20:18,720 --> 00:20:25,320
just German I guess now it's also spread

00:20:20,549 --> 00:20:28,380
among other countries and it's so

00:20:25,320 --> 00:20:31,590
amazing we can literally build an entire

00:20:28,380 --> 00:20:34,710
machine now because we have the overview

00:20:31,590 --> 00:20:39,260
of all the code running on it except for

00:20:34,710 --> 00:20:39,260
maybe some blobs still missing there

00:20:39,710 --> 00:20:50,429
okay you boot can run a Linux kernel

00:20:46,049 --> 00:20:54,210
directly but it can also run other stuff

00:20:50,429 --> 00:21:02,490
for example it could run a UEFI payload

00:20:54,210 --> 00:21:06,020
or a legacy BIOS payload okay and

00:21:02,490 --> 00:21:09,840
another project here is core boot

00:21:06,020 --> 00:21:12,780
it's very similar and the regard that it

00:21:09,840 --> 00:21:18,919
actually supports also lots of different

00:21:12,780 --> 00:21:24,929
devices and platforms so it supports x86

00:21:18,919 --> 00:21:27,960
supports also some arm devices and

00:21:24,929 --> 00:21:33,480
others it can also boot a little scanner

00:21:27,960 --> 00:21:36,500
directly and since we are here using a

00:21:33,480 --> 00:21:40,070
Linux based software distribution I

00:21:36,500 --> 00:21:43,100
guess you can see where this is going

00:21:40,070 --> 00:21:47,390
it's used by Google for the Chromebooks

00:21:43,100 --> 00:21:49,679
which are also based on the Linux kernel

00:21:47,390 --> 00:21:52,950
it's being applied to more and more

00:21:49,679 --> 00:21:55,440
servers now it's also getting popular

00:21:52,950 --> 00:21:58,110
among some hackers so I mentioned I'm in

00:21:55,440 --> 00:22:01,860
a hacker space and in fact on boham we

00:21:58,110 --> 00:22:08,120
kind of have like 10 people now toying

00:22:01,860 --> 00:22:10,640
around with this so now I just told you

00:22:08,120 --> 00:22:16,970
we can run a Linux kernel straight from

00:22:10,640 --> 00:22:20,360
the firmware what does that mean you're

00:22:16,970 --> 00:22:22,370
used to seeing a bootloader right so

00:22:20,360 --> 00:22:25,220
usually when you turn on your laptop you

00:22:22,370 --> 00:22:31,070
see something like grub or lie low back

00:22:25,220 --> 00:22:33,710
in the days there's some others and what

00:22:31,070 --> 00:22:36,020
are they doing they are reimplemented a

00:22:33,710 --> 00:22:41,960
lot of stuff which we already have in

00:22:36,020 --> 00:22:46,429
the Linux kernel like drivers for hard

00:22:41,960 --> 00:22:49,880
disks USB and so on networking for pixie

00:22:46,429 --> 00:22:55,940
boot maybe you can even decrypt your

00:22:49,880 --> 00:22:58,580
hard drives but why and that's why we

00:22:55,940 --> 00:23:02,179
now have the little squid project it

00:22:58,580 --> 00:23:06,080
started last year in January that's when

00:23:02,179 --> 00:23:10,789
it was announced and the idea of Linux

00:23:06,080 --> 00:23:14,350
boot is to use a very small Linux kernel

00:23:10,789 --> 00:23:19,130
very similar to the open wrt project

00:23:14,350 --> 00:23:23,240
just use its drivers for devices for

00:23:19,130 --> 00:23:27,110
file systems for maybe networking for

00:23:23,240 --> 00:23:30,799
pixie boot again and then rely on the

00:23:27,110 --> 00:23:36,890
fact that Linux has been used and

00:23:30,799 --> 00:23:39,970
developed by so many people that we can

00:23:36,890 --> 00:23:41,529
be very certain that it works properly

00:23:39,970 --> 00:23:46,429
ok

00:23:41,529 --> 00:23:48,649
and all the quest is we can suddenly

00:23:46,429 --> 00:23:52,279
implement boot loaders which really

00:23:48,649 --> 00:23:55,880
don't have to do much more now we just

00:23:52,279 --> 00:24:00,020
need to boot an operating system imagine

00:23:55,880 --> 00:24:03,580
you already have drivers so you can look

00:24:00,020 --> 00:24:06,529
at file systems can read files

00:24:03,580 --> 00:24:11,470
now you can KX ik into your next minutes

00:24:06,529 --> 00:24:11,470
kernel it's amazing

00:24:12,360 --> 00:24:22,060
so this is a project which is now

00:24:17,140 --> 00:24:25,180
continuing and growing it's written in

00:24:22,060 --> 00:24:29,650
golang or some utilities are actually

00:24:25,180 --> 00:24:31,240
written in golang so if you are familiar

00:24:29,650 --> 00:24:33,400
with that language it's something you

00:24:31,240 --> 00:24:35,530
could look into but since we are running

00:24:33,400 --> 00:24:37,150
a little screener now you can write in

00:24:35,530 --> 00:24:40,090
any of the languages you are familiar

00:24:37,150 --> 00:24:42,670
with which you can run on an operating

00:24:40,090 --> 00:24:46,090
system right so you can write something

00:24:42,670 --> 00:24:50,560
and rust you can write something and see

00:24:46,090 --> 00:25:00,010
if you will anything now you can help

00:24:50,560 --> 00:25:04,240
yourself in case you can boot and if

00:25:00,010 --> 00:25:06,040
you're eager now to try this out I want

00:25:04,240 --> 00:25:12,880
to tell you a bit about the equipment

00:25:06,040 --> 00:25:15,760
you need first so we need to take things

00:25:12,880 --> 00:25:18,130
apart right we need screwdrivers you can

00:25:15,760 --> 00:25:20,650
get those everywhere you probably

00:25:18,130 --> 00:25:23,380
already have them at home maybe you

00:25:20,650 --> 00:25:25,630
already exchanged some RAM or or added

00:25:23,380 --> 00:25:27,550
some more or edit a hard drive or

00:25:25,630 --> 00:25:31,090
something so this is what you already

00:25:27,550 --> 00:25:32,920
know and in some cases you Latorre have

00:25:31,090 --> 00:25:37,660
to open the entire laptop to actually

00:25:32,920 --> 00:25:40,630
get to where you need to work right I

00:25:37,660 --> 00:25:43,990
promise you a very good investment as a

00:25:40,630 --> 00:25:46,510
magnifying lens that's because for some

00:25:43,990 --> 00:25:49,450
reason those chips were made in such a

00:25:46,510 --> 00:25:52,990
way that they print dark grey on almost

00:25:49,450 --> 00:25:55,600
black so it's very hard to read and you

00:25:52,990 --> 00:25:58,180
know if you have a Mac and you have some

00:25:55,600 --> 00:26:00,040
extra light and you turn it a bit then

00:25:58,180 --> 00:26:02,110
sometimes it really helps a lot to find

00:26:00,040 --> 00:26:06,240
the right chips in the right place so

00:26:02,110 --> 00:26:06,240
this is how you can identify your chips

00:26:08,880 --> 00:26:21,550
you see those chips here this one this

00:26:16,020 --> 00:26:24,870
is actually a very small flash chip from

00:26:21,550 --> 00:26:28,500
which the former image is red

00:26:24,870 --> 00:26:33,710
so on this part here we have two of them

00:26:28,500 --> 00:26:33,710
on one of them we have this test clip

00:26:33,740 --> 00:26:38,670
this saves you the pain of actually

00:26:36,600 --> 00:26:41,490
doing soldering work so you can just

00:26:38,670 --> 00:26:45,290
attach the clip you just need to figure

00:26:41,490 --> 00:26:47,760
out the orientation and that's all and

00:26:45,290 --> 00:26:50,760
suddenly you can interact with this chip

00:26:47,760 --> 00:26:53,630
it's very much like a USB Drive just a

00:26:50,760 --> 00:26:58,770
bit smaller so usually those range from

00:26:53,630 --> 00:27:00,809
4 to 8 to 16 megabytes these days this

00:26:58,770 --> 00:27:02,550
is the 8 pin form factor there is also

00:27:00,809 --> 00:27:04,710
16 pin form factors

00:27:02,550 --> 00:27:06,990
but this is what you mostly find on

00:27:04,710 --> 00:27:13,350
current main boards like this one for

00:27:06,990 --> 00:27:17,940
example on the other side you need a

00:27:13,350 --> 00:27:23,100
programmer you can use anything which

00:27:17,940 --> 00:27:25,200
knows SPI this one here is a very very

00:27:23,100 --> 00:27:28,260
cheap device you can get it for 5 or 6

00:27:25,200 --> 00:27:32,520
or 7 euros on Amazon or Ebay or

00:27:28,260 --> 00:27:34,760
whichever is your preferred platform you

00:27:32,520 --> 00:27:37,860
can also use a BeagleBone black or

00:27:34,760 --> 00:27:40,140
Raspberry Pi people are famously doing

00:27:37,860 --> 00:27:43,559
this a lot so if you look at tutorials

00:27:40,140 --> 00:27:46,890
for example for coreboot people

00:27:43,559 --> 00:27:50,610
sometimes use those I prefer this tiny

00:27:46,890 --> 00:27:53,700
device for one reason I don't need to

00:27:50,610 --> 00:27:56,429
find the SPI interface and I don't get

00:27:53,700 --> 00:27:58,260
the wires wrong so easily right so I

00:27:56,429 --> 00:28:02,760
only need to get your orientation right

00:27:58,260 --> 00:28:07,740
and that's literally it and again it's

00:28:02,760 --> 00:28:10,470
quite cheap and of course we need the

00:28:07,740 --> 00:28:14,150
software side so we have open source

00:28:10,470 --> 00:28:16,790
firmware now and we need to build it if

00:28:14,150 --> 00:28:20,040
you know how to build a Linux kernel

00:28:16,790 --> 00:28:23,250
then you also know how to build core

00:28:20,040 --> 00:28:26,460
boot or you boot the process is always

00:28:23,250 --> 00:28:28,559
the same you need a tool chain you need

00:28:26,460 --> 00:28:32,270
a tool chain on your host but you also

00:28:28,559 --> 00:28:36,570
need a tool chain for an extra target so

00:28:32,270 --> 00:28:38,190
for example coreboot lets you just build

00:28:36,570 --> 00:28:38,820
a tool chain with a very small make

00:28:38,190 --> 00:28:41,759
command

00:28:38,820 --> 00:28:44,850
and then you can just choose it for your

00:28:41,759 --> 00:28:46,649
desired target platform of course it

00:28:44,850 --> 00:28:49,470
takes a while but you know then you have

00:28:46,649 --> 00:28:53,220
a tool chain sometimes you need some

00:28:49,470 --> 00:28:58,019
extra utilities for example one that is

00:28:53,220 --> 00:29:03,710
called yesil or i ASO which is used for

00:28:58,019 --> 00:29:07,409
some other code to be converted and then

00:29:03,710 --> 00:29:09,960
some utility to use the programmer there

00:29:07,409 --> 00:29:12,259
is the flash rom project which is also

00:29:09,960 --> 00:29:15,330
adopted now by the coreboot community

00:29:12,259 --> 00:29:18,649
which knows how to use lots of SPI

00:29:15,330 --> 00:29:21,440
programmers including the one I showed

00:29:18,649 --> 00:29:25,440
but it also supports others like

00:29:21,440 --> 00:29:30,690
Raspberry Pi bigger bone black you can

00:29:25,440 --> 00:29:37,919
use many different ones now we have

00:29:30,690 --> 00:29:39,659
everything let's start hacking so this

00:29:37,919 --> 00:29:41,250
is the first very simple thing which you

00:29:39,659 --> 00:29:43,110
can do even without the hardware

00:29:41,250 --> 00:29:48,149
equipment everybody can literally do

00:29:43,110 --> 00:29:50,519
this you can clone a project let's say

00:29:48,149 --> 00:29:53,850
the coreboot project you can build its

00:29:50,519 --> 00:29:56,429
tool chain by default it's configured to

00:29:53,850 --> 00:29:59,240
be running with C BIOS a legacy BIOS

00:29:56,429 --> 00:30:02,190
implementation which is open-source and

00:29:59,240 --> 00:30:05,279
you can just run in qemu just to try it

00:30:02,190 --> 00:30:08,639
out and see if it boots so you're just a

00:30:05,279 --> 00:30:11,100
screenshot from C BIOS which is coming

00:30:08,639 --> 00:30:14,370
right after coreboot so Corbeau takes it

00:30:11,100 --> 00:30:16,679
as a payload and then just runs it it

00:30:14,370 --> 00:30:19,740
gives us some output right it says hey

00:30:16,679 --> 00:30:21,919
I'm C bars running here it's running on

00:30:19,740 --> 00:30:26,309
the screen now we have output here and

00:30:21,919 --> 00:30:31,320
it can try to boot something you can

00:30:26,309 --> 00:30:35,029
even attach an ISO file and then you can

00:30:31,320 --> 00:30:35,029
boot your favorite operating system

00:30:39,010 --> 00:30:46,610
but of course this is more fun okay so I

00:30:43,180 --> 00:30:48,620
want everyone of you to look at the

00:30:46,610 --> 00:30:51,500
devices you find around you disassemble

00:30:48,620 --> 00:30:55,310
them look into them we need that

00:30:51,500 --> 00:30:58,310
information which is still proprietary

00:30:55,310 --> 00:31:01,070
now we can get lots of clues by just

00:30:58,310 --> 00:31:03,830
opening up devices we can read out firm

00:31:01,070 --> 00:31:07,540
work we can analyze it we can look at

00:31:03,830 --> 00:31:10,520
the board schematics from well the

00:31:07,540 --> 00:31:13,220
actual hardware standpoint if we don't

00:31:10,520 --> 00:31:22,030
have them in data sheets we can try to

00:31:13,220 --> 00:31:22,030
figure things out and that's what I did

00:31:22,090 --> 00:31:30,680
this year is the result of let's say

00:31:25,820 --> 00:31:31,460
some years of work I had this laptop for

00:31:30,680 --> 00:31:36,260
quite a while

00:31:31,460 --> 00:31:39,580
it's from xmg which are related to

00:31:36,260 --> 00:31:43,220
tuxedo what they are also present here

00:31:39,580 --> 00:31:47,480
and I was having a slight problem with

00:31:43,220 --> 00:31:50,420
the touchpad here so this thing here is

00:31:47,480 --> 00:31:52,280
a gigabyte laptop so it's not cleaver

00:31:50,420 --> 00:31:55,850
branded as most of the other devices

00:31:52,280 --> 00:32:01,100
they sell and gigabyte doesn't publish

00:31:55,850 --> 00:32:05,560
much information I tried to apply one of

00:32:01,100 --> 00:32:07,850
their firmware updates I got it to boot

00:32:05,560 --> 00:32:10,970
after having all of this knowledge I

00:32:07,850 --> 00:32:13,760
literally used the programmer to flash

00:32:10,970 --> 00:32:16,490
that new firmware but I wasn't still

00:32:13,760 --> 00:32:19,550
very happy with it so a friend of mine

00:32:16,490 --> 00:32:22,730
said hey let's see maybe you can get

00:32:19,550 --> 00:32:29,000
along with coreboot and I promise you it

00:32:22,730 --> 00:32:32,870
was a very very refreshing painful and

00:32:29,000 --> 00:32:36,110
at the same time happier through all the

00:32:32,870 --> 00:32:38,720
layers of hardware and firmware I gained

00:32:36,110 --> 00:32:41,690
so much knowledge just during the last

00:32:38,720 --> 00:32:44,870
let's say three months while doing this

00:32:41,690 --> 00:32:47,390
all my progress is behind those links

00:32:44,870 --> 00:32:50,630
here so I put everything on github there

00:32:47,390 --> 00:32:51,080
is one gist where I dropped lines on all

00:32:50,630 --> 00:32:53,720
the

00:32:51,080 --> 00:32:56,330
steps I went through some patches

00:32:53,720 --> 00:33:01,960
already and the coreboot documentation

00:32:56,330 --> 00:33:04,760
now and will be more and more added and

00:33:01,960 --> 00:33:07,130
at some point you will see that it's

00:33:04,760 --> 00:33:11,299
actually so similar to the Linux kernel

00:33:07,130 --> 00:33:15,950
in lots of ways we can learn from each

00:33:11,299 --> 00:33:20,120
other and in fact for this very device

00:33:15,950 --> 00:33:23,179
here I looked at the Linux kernel source

00:33:20,120 --> 00:33:27,970
code to find relationships between

00:33:23,179 --> 00:33:27,970
certain chips I have in this laptop for

00:33:28,299 --> 00:33:34,309
for some reason I was I was lucky to

00:33:30,980 --> 00:33:35,929
figure out about one chip that it's

00:33:34,309 --> 00:33:38,539
actually the same model as a different

00:33:35,929 --> 00:33:40,279
one when a company name changed but you

00:33:38,539 --> 00:33:43,279
know how do you figure this out even if

00:33:40,279 --> 00:33:45,649
you know names of certain chips you use

00:33:43,279 --> 00:33:48,919
a search engine to get information it's

00:33:45,649 --> 00:33:51,860
really not trivial but we can share

00:33:48,919 --> 00:33:53,570
information and I'm very happy that the

00:33:51,860 --> 00:33:58,909
Linux kernel is open source so I could

00:33:53,570 --> 00:34:01,490
get that so what did I get to work you

00:33:58,909 --> 00:34:04,490
can see text on the screen here it's not

00:34:01,490 --> 00:34:06,320
in a high resolution so that's still

00:34:04,490 --> 00:34:10,460
something coming up but you know I

00:34:06,320 --> 00:34:15,050
already got this output of course before

00:34:10,460 --> 00:34:18,530
that even RAM works if you know

00:34:15,050 --> 00:34:20,720
operating systems you already know that

00:34:18,530 --> 00:34:23,030
Ram is there but this is what the

00:34:20,720 --> 00:34:24,859
firmware needs to initialize first but

00:34:23,030 --> 00:34:26,629
that's the first step you need to go

00:34:24,859 --> 00:34:28,550
through until you can actually do

00:34:26,629 --> 00:34:30,530
something more meaningful they can

00:34:28,550 --> 00:34:34,179
initialize all the other hard work but

00:34:30,530 --> 00:34:37,909
if you don't have friend then you know

00:34:34,179 --> 00:34:41,359
nothing actually works okay so the

00:34:37,909 --> 00:34:43,040
laptop rooted I could also boot in my

00:34:41,359 --> 00:34:44,720
operating system I could get the high

00:34:43,040 --> 00:34:47,139
resolution because the Linux kernel had

00:34:44,720 --> 00:34:50,119
the correct drivers and everything and

00:34:47,139 --> 00:34:51,320
in fact even without the video blob I

00:34:50,119 --> 00:34:53,000
could actually boot

00:34:51,320 --> 00:34:55,040
I just couldn't see the front where I

00:34:53,000 --> 00:34:58,369
would have to enter my password here to

00:34:55,040 --> 00:35:02,300
unlock but yeah I figured that out later

00:34:58,369 --> 00:35:04,760
then Bluetooth works Wi-Fi works USB

00:35:02,300 --> 00:35:05,000
works even suspend and resume which I

00:35:04,760 --> 00:35:07,370
did

00:35:05,000 --> 00:35:10,490
expect in the first place worked it

00:35:07,370 --> 00:35:12,530
didn't work with the lid being closed so

00:35:10,490 --> 00:35:16,460
there is a CPI event which need to be

00:35:12,530 --> 00:35:20,420
triggered but yeah that that's the next

00:35:16,460 --> 00:35:22,040
steps now and one thing which is even

00:35:20,420 --> 00:35:24,560
more painful I already mentioned this

00:35:22,040 --> 00:35:27,080
earlier the embedded controller which is

00:35:24,560 --> 00:35:31,070
responsibly responsible for cooling down

00:35:27,080 --> 00:35:33,650
the system didn't really do its job I

00:35:31,070 --> 00:35:36,640
haven't yet figured out the issue but

00:35:33,650 --> 00:35:36,640
we're getting there

00:35:42,250 --> 00:35:48,070
now here's another call for action I

00:35:44,910 --> 00:35:51,660
know we have very very very smart people

00:35:48,070 --> 00:35:51,660
here who can help

00:35:52,170 --> 00:36:00,010
we have tuxedo here I talked to them

00:35:56,160 --> 00:36:04,150
there is other vendors of course but

00:36:00,010 --> 00:36:07,900
please talk to them talk to the device

00:36:04,150 --> 00:36:09,849
manufacturers or the retailer's or OEMs

00:36:07,900 --> 00:36:12,369
whatever where you get your laptop from

00:36:09,849 --> 00:36:16,720
talk to them ask them about open source

00:36:12,369 --> 00:36:20,430
firmware that's the first step to signal

00:36:16,720 --> 00:36:20,430
that we have a lot of interest in that

00:36:23,640 --> 00:36:30,520
operating system distributions why not

00:36:27,700 --> 00:36:33,040
integrate firmware updates as well we

00:36:30,520 --> 00:36:38,530
just had a talk a very short one but a

00:36:33,040 --> 00:36:42,130
very good one about transactions when

00:36:38,530 --> 00:36:43,690
you hear hey we don't really want you to

00:36:42,130 --> 00:36:47,440
install firmware updates actually

00:36:43,690 --> 00:36:49,349
because it might break your device that

00:36:47,440 --> 00:36:52,450
doesn't make us very happy

00:36:49,349 --> 00:36:56,830
coreboot supports having multiple

00:36:52,450 --> 00:36:59,320
payloads and multiple implementations of

00:36:56,830 --> 00:37:02,470
the initialization as well so we can

00:36:59,320 --> 00:37:04,089
also failover that's what the

00:37:02,470 --> 00:37:08,589
Chromebooks are for example doing by the

00:37:04,089 --> 00:37:12,010
way we can build our own firmware we

00:37:08,589 --> 00:37:16,119
have OBS we can even run checks on the

00:37:12,010 --> 00:37:19,330
firmware we can use open QA for that we

00:37:16,119 --> 00:37:21,490
have a lot of infrastructure and of

00:37:19,330 --> 00:37:24,160
course we can bring the kernel and for

00:37:21,490 --> 00:37:27,540
more developers if it closer together so

00:37:24,160 --> 00:37:30,490
if you're working on the Linux kernel

00:37:27,540 --> 00:37:33,430
look into projects like you would look

00:37:30,490 --> 00:37:35,109
at coreboot see if there is something

00:37:33,430 --> 00:37:37,180
you can do for them see if there is

00:37:35,109 --> 00:37:39,520
something they can do for you so that

00:37:37,180 --> 00:37:43,210
you don't need to fix brokenness if you

00:37:39,520 --> 00:37:46,359
hire tables or something you can join

00:37:43,210 --> 00:37:50,230
the community we have different channels

00:37:46,359 --> 00:37:54,010
in different chat systems IRC there is

00:37:50,230 --> 00:38:05,950
slack for the more modern people

00:37:54,010 --> 00:38:12,070
and of course now let's celebrate

00:38:05,950 --> 00:38:15,400
actually you would and coreboot are both

00:38:12,070 --> 00:38:21,520
turning 20 this year this work has been

00:38:15,400 --> 00:38:26,880
going on for 20 years it's not as old as

00:38:21,520 --> 00:38:31,360
the Linux kernel and in fact the

00:38:26,880 --> 00:38:34,180
coreboot project itself was first called

00:38:31,360 --> 00:38:38,650
Linux BIOS because that's what they were

00:38:34,180 --> 00:38:40,960
going for no it's more Universal we can

00:38:38,650 --> 00:38:44,140
celebrate 20 years of open source

00:38:40,960 --> 00:38:52,900
firmware but there is still so much work

00:38:44,140 --> 00:38:56,070
to be done so let me invite you to join

00:38:52,900 --> 00:39:01,240
us in the open source formal conference

00:38:56,070 --> 00:39:04,870
the next edition will be this year again

00:39:01,240 --> 00:39:07,750
in September this time we will be in San

00:39:04,870 --> 00:39:13,060
Francisco so we're going around the

00:39:07,750 --> 00:39:16,300
globe a bit if you are interested the

00:39:13,060 --> 00:39:19,630
call for papers are still open if there

00:39:16,300 --> 00:39:22,120
is something you can tell maybe from the

00:39:19,630 --> 00:39:26,410
perspective of an operating system from

00:39:22,120 --> 00:39:29,920
a distribution or from a kernel please

00:39:26,410 --> 00:39:33,070
do so we had lots of interesting talks

00:39:29,920 --> 00:39:36,430
already last year and what I'm still

00:39:33,070 --> 00:39:38,920
missing is were synergies because I feel

00:39:36,430 --> 00:39:40,950
that there is still something we can

00:39:38,920 --> 00:39:40,950
share

00:39:44,720 --> 00:39:53,430
and with that thanks again for

00:39:48,750 --> 00:39:57,360
everything for listening to me here in

00:39:53,430 --> 00:39:59,520
the afternoon and hot summer and if you

00:39:57,360 --> 00:40:01,760
have any questions please ask me

00:39:59,520 --> 00:40:01,760
everything

00:40:04,340 --> 00:40:08,550
[Applause]

00:40:10,070 --> 00:40:16,369
the mic is already there so you said

00:40:13,080 --> 00:40:19,080
that you were interested in building

00:40:16,369 --> 00:40:21,600
bootloader packages so we already have a

00:40:19,080 --> 00:40:23,400
hard work hold on boot project in OBS

00:40:21,600 --> 00:40:25,350
that could be used for that or you could

00:40:23,400 --> 00:40:30,780
have you know sub projects can you get

00:40:25,350 --> 00:40:35,820
the mic a bit closer sorry there is a

00:40:30,780 --> 00:40:37,710
hardware : boot project in OBS if there

00:40:35,820 --> 00:40:39,090
is any additional boot loaders that you

00:40:37,710 --> 00:40:41,040
need beyond you boot that we already

00:40:39,090 --> 00:40:42,960
have there for instance you're free to

00:40:41,040 --> 00:40:45,570
submit stuff there or we can also create

00:40:42,960 --> 00:40:50,550
you know sub projects as needed for that

00:40:45,570 --> 00:40:53,520
ok great thanks my question relates to

00:40:50,550 --> 00:40:55,410
the management engine Intel there are a

00:40:53,520 --> 00:40:57,210
couple of myths running around it and

00:40:55,410 --> 00:41:03,810
what would happen if I just switch it

00:40:57,210 --> 00:41:08,660
off that's the point

00:41:03,810 --> 00:41:11,730
how so what you can do literally is if

00:41:08,660 --> 00:41:14,910
you have the ME region in that flash

00:41:11,730 --> 00:41:18,780
chip I showed you you can just overwrite

00:41:14,910 --> 00:41:22,740
it with zeros I promise you your system

00:41:18,780 --> 00:41:25,770
won't boot that's what is going to

00:41:22,740 --> 00:41:30,210
happen there is one project which is

00:41:25,770 --> 00:41:33,140
called ME cleaner to strip down the me2

00:41:30,210 --> 00:41:38,040
the essential part to actually need I

00:41:33,140 --> 00:41:41,900
mean if you don't have the Amir running

00:41:38,040 --> 00:41:45,090
then sadly your device won't really work

00:41:41,900 --> 00:41:48,090
that's the sad news the good news is

00:41:45,090 --> 00:41:52,080
that we can at least remove some stuff

00:41:48,090 --> 00:41:56,850
which is really not necessary but

00:41:52,080 --> 00:41:59,970
potentially harmful the project is also

00:41:56,850 --> 00:42:03,320
still going on it's a Python script so

00:41:59,970 --> 00:42:03,320
you can look into that

00:42:05,460 --> 00:42:10,020
you mentioned tuxedo twice so can we

00:42:08,430 --> 00:42:11,700
assume from that that the current

00:42:10,020 --> 00:42:13,800
devices that they're selling would open

00:42:11,700 --> 00:42:20,609
to the preinstalled have a proprietary

00:42:13,800 --> 00:42:25,250
firmware still this one here is actually

00:42:20,609 --> 00:42:28,380
also tuxedo laptop and it is running

00:42:25,250 --> 00:42:32,099
proprietary firmware in this case is

00:42:28,380 --> 00:42:36,270
from american megatrends you know or ami

00:42:32,099 --> 00:42:41,300
for short and i even run an upgrade to

00:42:36,270 --> 00:42:45,390
that so currently they do ship

00:42:41,300 --> 00:42:47,970
proprietary firmware they do offer

00:42:45,390 --> 00:42:50,609
updates you have to sign up on their

00:42:47,970 --> 00:42:54,119
platform and ask for them you can at

00:42:50,609 --> 00:42:56,880
least get updates but of course I would

00:42:54,119 --> 00:43:01,109
also love to see open source firmware on

00:42:56,880 --> 00:43:07,470
it and actually do talk to them a lot

00:43:01,109 --> 00:43:09,750
and we have one guy who already parted

00:43:07,470 --> 00:43:13,230
his laptop to car boot which is also a

00:43:09,750 --> 00:43:15,329
tuxedo one a quite modern one and I'm

00:43:13,230 --> 00:43:18,599
looking forward to partying this year

00:43:15,329 --> 00:43:21,180
next so once my other laptop is working

00:43:18,599 --> 00:43:24,829
properly again we can swap roles and

00:43:21,180 --> 00:43:24,829
take care of this one

00:43:35,299 --> 00:43:44,839
we have two minutes as I still have a

00:43:40,069 --> 00:43:48,619
little bonus I already talked to you

00:43:44,839 --> 00:43:54,769
being maybe kernel developers or maybe

00:43:48,619 --> 00:44:02,029
destroy developers there is an event

00:43:54,769 --> 00:44:06,439
coming up the itza or IT as a it's a is

00:44:02,029 --> 00:44:09,339
also here in Nuremberg so that later in

00:44:06,439 --> 00:44:13,039
the year you can use this opportunity to

00:44:09,339 --> 00:44:14,929
come and visit a friend of mine who is

00:44:13,039 --> 00:44:19,429
running the company nine element

00:44:14,929 --> 00:44:23,209
cybersecurity they poured coreboot onto

00:44:19,429 --> 00:44:27,799
more and more devices and they developed

00:44:23,209 --> 00:44:32,239
security features for the former so if

00:44:27,799 --> 00:44:36,999
you are running data centers this might

00:44:32,239 --> 00:44:36,999
be an option for you as a business user

00:44:45,520 --> 00:44:49,240
any more questions now

00:44:54,150 --> 00:45:03,400

YouTube URL: https://www.youtube.com/watch?v=aBuZII5E7UM


