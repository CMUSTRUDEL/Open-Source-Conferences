Title: openSUSE Conference 2017 Creating an openSUSE Powered Robot
Publication date: 2017-05-27
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1342-creating-an-opensuse-powered-robot

The joys of open source (taking other peoples work to make something cool for yourself).

Often as software engineers / developers the first thing we do when we want to start a cool new project is just write code. In reality what we should do is look at everything that already exists first, open source software provides a wonderful platform too build cool things with very little effort by utalising existing code. 

I will use the expereinces and lessons I have learned from building an openSUSE powered robot [1] to illustrate this, I will go through my design and design decisions to further illustrate this point while also touching on other systems engineering concepts such as modular design and using open protocols to further allow reuse and changes. 

The level of design in the talk will be such that someone with some basic electronics skills (like myself) could go away and build something similar at the same time the majority of the talk will be aimed toward people with some software background but not nessearly any knowledge of electronics.

https://www.youtube.com/watch?v=AMz01IRAgZI

I could probably cut this back to a 30 Min talk if required.




Simon Lees
Captions: 
	00:00:10,099 --> 00:00:18,110
all right so

00:00:13,240 --> 00:00:20,689
that we're about ready it's amazing how

00:00:18,110 --> 00:00:22,369
when you plug a computer into a laptop I

00:00:20,689 --> 00:00:25,000
mean a computer into a projector it

00:00:22,369 --> 00:00:29,240
starts acting completely differently

00:00:25,000 --> 00:00:33,590
that think we're there so my name's

00:00:29,240 --> 00:00:34,750
Simon Lee's I work for Caesar and today

00:00:33,590 --> 00:00:38,540
I'm going to talk to you about robots

00:00:34,750 --> 00:00:41,360
which is a hobby something I've done it

00:00:38,540 --> 00:00:42,949
must be a time for I used to do in my

00:00:41,360 --> 00:00:47,329
spare time and I've had a bit less time

00:00:42,949 --> 00:00:50,149
late but okay so I've been working at

00:00:47,329 --> 00:00:52,460
Caesar for a bit over a year before that

00:00:50,149 --> 00:00:55,399
I work for a communications company in

00:00:52,460 --> 00:00:58,539
an engineering department so I've got to

00:00:55,399 --> 00:01:00,739
have some exposure to electronics and

00:00:58,539 --> 00:01:02,870
things like that and I've been a member

00:01:00,739 --> 00:01:06,259
of the I've been working in the open

00:01:02,870 --> 00:01:07,550
Caesar project for five plus years but

00:01:06,259 --> 00:01:09,890
it's the first time I've been able to

00:01:07,550 --> 00:01:15,619
come across to the conference being from

00:01:09,890 --> 00:01:17,750
Australia and so so this is a big trap

00:01:15,619 --> 00:01:20,659
and you have all been talked into coming

00:01:17,750 --> 00:01:23,210
to a boring systems engineering lecture

00:01:20,659 --> 00:01:26,930
with the promise of shiny robots and

00:01:23,210 --> 00:01:32,950
things so you have been warned run away

00:01:26,930 --> 00:01:36,829
now if you wish but say yeah we go next

00:01:32,950 --> 00:01:39,619
so I want to talk to you about there's a

00:01:36,829 --> 00:01:41,930
lot of in open-source there's a lot we

00:01:39,619 --> 00:01:45,500
can learn from systems engineering

00:01:41,930 --> 00:01:46,880
concepts in that you can there's a whole

00:01:45,500 --> 00:01:49,490
bunch of stuff that people have already

00:01:46,880 --> 00:01:51,140
made for you and you can take it you can

00:01:49,490 --> 00:01:53,390
use it you can do what you want with it

00:01:51,140 --> 00:01:57,350
and often enough when we go to start a

00:01:53,390 --> 00:01:59,689
project we think I'll just write

00:01:57,350 --> 00:02:01,670
everything from scratch whereas the

00:01:59,689 --> 00:02:03,229
system engineer and me should go as well

00:02:01,670 --> 00:02:06,259
now you should just write everything

00:02:03,229 --> 00:02:08,959
from scratch you should go and look at

00:02:06,259 --> 00:02:10,579
what's already there and see if you can

00:02:08,959 --> 00:02:12,560
be lazy and use the least amount of

00:02:10,579 --> 00:02:16,220
effort possible to bring all these

00:02:12,560 --> 00:02:19,280
things together so why would we make a

00:02:16,220 --> 00:02:23,959
robot well because we can and they're

00:02:19,280 --> 00:02:25,430
cool and most software I write is boring

00:02:23,959 --> 00:02:27,380
and sits in the bottom of the server and

00:02:25,430 --> 00:02:28,280
you never get to see anything and it

00:02:27,380 --> 00:02:31,820
doesn't look cool where

00:02:28,280 --> 00:02:34,130
these people look at it and they go it's

00:02:31,820 --> 00:02:36,800
cool and it's fun so that's why we write

00:02:34,130 --> 00:02:39,680
a robot and the second reason is because

00:02:36,800 --> 00:02:41,780
the world needs more cool robots that

00:02:39,680 --> 00:02:45,260
should be obvious when I was a kid we

00:02:41,780 --> 00:02:47,600
had a talker I think a scout group from

00:02:45,260 --> 00:02:50,030
a local Robotics Club and that would

00:02:47,600 --> 00:02:52,250
have been back in the early 90s and the

00:02:50,030 --> 00:02:55,730
robots then were pretty underwhelming

00:02:52,250 --> 00:02:58,340
I thought they it was a box that looked

00:02:55,730 --> 00:03:01,190
nicely like a robot but all I could do

00:02:58,340 --> 00:03:03,080
was flash them LEDs and to me that's not

00:03:01,190 --> 00:03:05,600
a robot that's a box with flashing

00:03:03,080 --> 00:03:08,300
lights when I think robot I think

00:03:05,600 --> 00:03:10,489
something like r2d2 something's that's

00:03:08,300 --> 00:03:13,550
cool something that's got voice

00:03:10,489 --> 00:03:15,830
activation something that's able to

00:03:13,550 --> 00:03:19,520
drive itself around and all those sorts

00:03:15,830 --> 00:03:22,220
of things so that's where I started with

00:03:19,520 --> 00:03:26,150
my design for my robot and where I

00:03:22,220 --> 00:03:27,950
wanted to take it that's so having said

00:03:26,150 --> 00:03:32,150
that for the design why would you make a

00:03:27,950 --> 00:03:34,610
robot running Linux and there is a lot

00:03:32,150 --> 00:03:36,140
of advantages really you already have

00:03:34,610 --> 00:03:40,870
text-to-speech speech-to-text

00:03:36,140 --> 00:03:43,970
applications sound is easy video is easy

00:03:40,870 --> 00:03:48,170
you have Wi-Fi to get it to talk to a

00:03:43,970 --> 00:03:49,910
bunch of things easily and lynx is good

00:03:48,170 --> 00:03:52,100
for developing on it's easy to write a

00:03:49,910 --> 00:03:54,890
Linux application and to do what you

00:03:52,100 --> 00:03:57,260
want so that's why if you were to write

00:03:54,890 --> 00:04:02,239
or if you were to make a robot you might

00:03:57,260 --> 00:04:04,280
want to use Linux to do it and so but

00:04:02,239 --> 00:04:09,920
there is downsides to using Linux for a

00:04:04,280 --> 00:04:13,130
robot real time operations takling wires

00:04:09,920 --> 00:04:16,370
to go up and down when you want them to

00:04:13,130 --> 00:04:19,549
can be painful it can be done but it can

00:04:16,370 --> 00:04:21,799
be painful so going with this concept of

00:04:19,549 --> 00:04:24,050
systems engineering finding the right

00:04:21,799 --> 00:04:26,630
thing for the right task taking the

00:04:24,050 --> 00:04:28,610
laziest approach possible I have

00:04:26,630 --> 00:04:30,890
something called an Arduino which is a

00:04:28,610 --> 00:04:34,580
little microprocessor and I decided I'd

00:04:30,890 --> 00:04:36,979
use that to do all the controlling of

00:04:34,580 --> 00:04:39,560
motors because that's what they're

00:04:36,979 --> 00:04:41,560
designed for and I thought I'd talk to

00:04:39,560 --> 00:04:46,510
it with cereal because

00:04:41,560 --> 00:04:49,790
cereal is easy but we'll go further now

00:04:46,510 --> 00:04:50,930
something I find and something that

00:04:49,790 --> 00:04:56,750
helped me back from starting this

00:04:50,930 --> 00:04:59,570
project a lot longer ooh he is hard I'm

00:04:56,750 --> 00:05:02,930
not a mechanical engineer I can't really

00:04:59,570 --> 00:05:05,600
fabricate cool things and so I wanted to

00:05:02,930 --> 00:05:08,750
find something out there that I could

00:05:05,600 --> 00:05:10,940
use and at the time I've been looking

00:05:08,750 --> 00:05:12,860
for ages and I wanted something with

00:05:10,940 --> 00:05:15,680
tank tracks but everything with tank

00:05:12,860 --> 00:05:17,300
tracks was like this big plastic he

00:05:15,680 --> 00:05:20,420
didn't look like her to survive outside

00:05:17,300 --> 00:05:22,250
anyway and so being someone who wanted a

00:05:20,420 --> 00:05:25,430
cool robot that could drive around and

00:05:22,250 --> 00:05:28,040
go fast I was thinking of taking a RC

00:05:25,430 --> 00:05:32,120
car about this big and building my robot

00:05:28,040 --> 00:05:35,330
on top of that and then one day I was

00:05:32,120 --> 00:05:37,940
looking around on eBay and I saw someone

00:05:35,330 --> 00:05:41,510
had started making these robot chassis

00:05:37,940 --> 00:05:43,660
and that was really what kick-started me

00:05:41,510 --> 00:05:47,350
actually working on this project was

00:05:43,660 --> 00:05:49,640
something became available and I think

00:05:47,350 --> 00:05:58,860
for those of you at the back let's try

00:05:49,640 --> 00:06:01,860
this here I have a

00:05:58,860 --> 00:06:10,080
camera that's and if I can aim it

00:06:01,860 --> 00:06:11,939
correctly you'll be able to see so

00:06:10,080 --> 00:06:21,539
basically we've got a chassis with a

00:06:11,939 --> 00:06:24,539
couple of tank tracks and so now that so

00:06:21,539 --> 00:06:27,300
now that I realized that the cool part

00:06:24,539 --> 00:06:28,979
was there the hard part was done I could

00:06:27,300 --> 00:06:30,780
start thinking a bit more about the

00:06:28,979 --> 00:06:34,400
design which I'd already thought about

00:06:30,780 --> 00:06:37,650
being in my head and so now we come to

00:06:34,400 --> 00:06:41,210
the design part of the talk

00:06:37,650 --> 00:06:45,629
and while hardware is really hard

00:06:41,210 --> 00:06:53,250
electronics is not the hardest thing in

00:06:45,629 --> 00:06:55,650
the world but still I'm lazy and I could

00:06:53,250 --> 00:06:58,469
build electronics things but that would

00:06:55,650 --> 00:07:01,439
take me a long time and would probably

00:06:58,469 --> 00:07:06,389
be a waste of my time so I worked out I

00:07:01,439 --> 00:07:09,060
had three main problems to solve with

00:07:06,389 --> 00:07:10,620
regards to the electronics this chassis

00:07:09,060 --> 00:07:13,740
came with a couple of twelve volt meters

00:07:10,620 --> 00:07:16,620
and so I needed to come up with a way to

00:07:13,740 --> 00:07:20,060
power the motors a way to control the

00:07:16,620 --> 00:07:22,379
motors and then in my ideal world I

00:07:20,060 --> 00:07:25,139
didn't want to have two possible sources

00:07:22,379 --> 00:07:27,689
of connected so I wanted to power my

00:07:25,139 --> 00:07:30,000
processor off the same thing I'm using

00:07:27,689 --> 00:07:33,029
to power my motors so those were my

00:07:30,000 --> 00:07:35,479
three challenges the first solution for

00:07:33,029 --> 00:07:38,719
providing the power isn't here today

00:07:35,479 --> 00:07:40,680
because it is a big lithium battery and

00:07:38,719 --> 00:07:43,379
airlines don't like you taking them on

00:07:40,680 --> 00:07:44,129
planes so to make my life easier I just

00:07:43,379 --> 00:07:48,080
left it at home

00:07:44,129 --> 00:07:51,770
but I'm using a eleven point four volt I

00:07:48,080 --> 00:07:54,449
think it's a five thousand Leanne power

00:07:51,770 --> 00:07:56,819
battery that was I think designed for RC

00:07:54,449 --> 00:08:01,639
planes or something like that it's about

00:07:56,819 --> 00:08:05,400
this long this wide and at the time I

00:08:01,639 --> 00:08:09,060
didn't know how much power I needed and

00:08:05,400 --> 00:08:11,339
I was lazy and I didn't bother doing any

00:08:09,060 --> 00:08:12,820
calculations I just bought the biggest

00:08:11,339 --> 00:08:15,070
battery I could find there's a

00:08:12,820 --> 00:08:17,850
at the ripe voltage and hope for the

00:08:15,070 --> 00:08:20,800
best and I was quite surprised because

00:08:17,850 --> 00:08:23,500
it will happily run the robot running

00:08:20,800 --> 00:08:25,540
around for five or six hours with the

00:08:23,500 --> 00:08:28,510
processor running with a webcam going

00:08:25,540 --> 00:08:31,650
and all sorts of things so that was big

00:08:28,510 --> 00:08:34,599
plus in terms of controlling the motor

00:08:31,650 --> 00:08:36,400
and I did some googling and there is a

00:08:34,599 --> 00:08:40,000
thing called a hatch bridge which is

00:08:36,400 --> 00:08:42,280
what this top picture is and as I said I

00:08:40,000 --> 00:08:43,720
could have sat down and I could have

00:08:42,280 --> 00:08:47,650
designed a circuit for that chip and

00:08:43,720 --> 00:08:50,680
build it myself but in reality you can

00:08:47,650 --> 00:08:52,150
buy one for five dollars of eBay so I

00:08:50,680 --> 00:08:54,910
picked the nicest looking one I could

00:08:52,150 --> 00:08:58,540
find and it's sitting somewhere under

00:08:54,910 --> 00:09:00,730
here and then again I knew there was a

00:08:58,540 --> 00:09:03,340
thing called a voltage regulator which

00:09:00,730 --> 00:09:08,380
takes your 12 volts and turns it into

00:09:03,340 --> 00:09:17,410
five volts and so I found one of them as

00:09:08,380 --> 00:09:20,530
well then whatsoever that was see from

00:09:17,410 --> 00:09:23,560
the camera up here there is this thing

00:09:20,530 --> 00:09:24,970
on the right with a display that you

00:09:23,560 --> 00:09:28,960
can't quite see in the light it says

00:09:24,970 --> 00:09:34,750
twelve point one at the moment and you

00:09:28,960 --> 00:09:37,660
can get much smaller ones but I try I

00:09:34,750 --> 00:09:41,260
decided to get one with a display on it

00:09:37,660 --> 00:09:43,210
because you can see how much power the

00:09:41,260 --> 00:09:46,210
battery is putting out and see and I

00:09:43,210 --> 00:09:51,970
went to charger battery which is pretty

00:09:46,210 --> 00:09:56,200
useful so now we have the solution to

00:09:51,970 --> 00:09:59,320
the electronics problems I had to choose

00:09:56,200 --> 00:10:02,310
processes now this was back two and a

00:09:59,320 --> 00:10:04,720
half years ago when I started this and

00:10:02,310 --> 00:10:07,540
while the raspberry PI's had been out

00:10:04,720 --> 00:10:09,910
they weren't I think it was still only

00:10:07,540 --> 00:10:11,710
the Raspberry Pi one at that time it

00:10:09,910 --> 00:10:14,140
wasn't good value compared to something

00:10:11,710 --> 00:10:17,590
like the adroid so I went with an

00:10:14,140 --> 00:10:20,040
Android c1 which is pictured below it's

00:10:17,590 --> 00:10:20,040
hiding

00:10:22,529 --> 00:10:28,320
so it's hiding under this display here

00:10:28,860 --> 00:10:39,730
and then in hindsight that was a really

00:10:34,480 --> 00:10:42,640
bad choice because if you ever going to

00:10:39,730 --> 00:10:44,649
buy an arm board buy one where the

00:10:42,640 --> 00:10:47,430
company is up streaming the drivers into

00:10:44,649 --> 00:10:50,410
the mainline kernel because for example

00:10:47,430 --> 00:10:53,740
this process this board is running a

00:10:50,410 --> 00:10:56,529
Ubuntu 3.2 kernel because that was the

00:10:53,740 --> 00:11:01,089
kernel that had at the time and no one

00:10:56,529 --> 00:11:03,399
has ever updated it since and running

00:11:01,089 --> 00:11:05,800
alongside that because I wanted to run

00:11:03,399 --> 00:11:07,360
open Caesar on it it is running an open

00:11:05,800 --> 00:11:10,510
Caesar factory snapshot probably from

00:11:07,360 --> 00:11:14,020
about two years ago which like all great

00:11:10,510 --> 00:11:19,029
Internet of Things devices means it's

00:11:14,020 --> 00:11:22,300
quite insecure and I haven't tried

00:11:19,029 --> 00:11:24,820
updating it because I know we probably

00:11:22,300 --> 00:11:27,310
use newer features in the kernel and it

00:11:24,820 --> 00:11:29,020
will probably break one of the next

00:11:27,310 --> 00:11:31,600
things on my list is to replace it with

00:11:29,020 --> 00:11:34,149
a Raspberry Pi 3 where things will just

00:11:31,600 --> 00:11:35,380
work out of the box so that's somewhere

00:11:34,149 --> 00:11:40,810
where I didn't take the simple option

00:11:35,380 --> 00:11:42,370
and it's come back to bite me and then

00:11:40,810 --> 00:11:42,880
in terms of the Arduino which I talked

00:11:42,370 --> 00:11:45,339
about before

00:11:42,880 --> 00:11:48,220
it's this little microprocessor you can

00:11:45,339 --> 00:11:52,920
see up the top I pick this nice little

00:11:48,220 --> 00:11:55,390
white board that just slots onto the

00:11:52,920 --> 00:12:00,760
GPIO header of the Raspberry Pi or

00:11:55,390 --> 00:12:04,300
Odroid and that makes life easy because

00:12:00,760 --> 00:12:05,980
it's also powered from the adroid which

00:12:04,300 --> 00:12:08,950
is one less thing that I need to worry

00:12:05,980 --> 00:12:12,339
about and my advice for anyone if you

00:12:08,950 --> 00:12:15,279
ever buy an arm board is get one of

00:12:12,339 --> 00:12:19,209
those serial adapters it will save your

00:12:15,279 --> 00:12:21,880
life multiple times because if you start

00:12:19,209 --> 00:12:23,920
if you start up your board and you don't

00:12:21,880 --> 00:12:26,700
get to network if you don't have one of

00:12:23,920 --> 00:12:29,570
those cables you have no way of knowing

00:12:26,700 --> 00:12:32,180
what is going on

00:12:29,570 --> 00:12:35,000
whereas if you plug the cable in you get

00:12:32,180 --> 00:12:35,990
a nice terminal interface you can see

00:12:35,000 --> 00:12:38,840
what's wrong and you can fix your

00:12:35,990 --> 00:12:42,050
problems and you can come to some where

00:12:38,840 --> 00:12:48,100
you can plug it in you can configure a

00:12:42,050 --> 00:12:52,250
new Wi-Fi network and life's easy so I

00:12:48,100 --> 00:12:53,650
have always been a great one for I will

00:12:52,250 --> 00:12:57,350
think I'm going to build a project I

00:12:53,650 --> 00:12:58,100
will start doing the project I'll see

00:12:57,350 --> 00:13:00,860
something else

00:12:58,100 --> 00:13:02,590
I'll get distracted and I'll go work on

00:13:00,860 --> 00:13:05,420
something else in the first project was

00:13:02,590 --> 00:13:09,260
gone so rather than spending lots of

00:13:05,420 --> 00:13:10,730
money up front and having all the parts

00:13:09,260 --> 00:13:14,000
for a robot never actually building a

00:13:10,730 --> 00:13:17,990
robot I sort of staged out my build over

00:13:14,000 --> 00:13:20,390
a few months and so my first step was to

00:13:17,990 --> 00:13:23,710
buy the processor and get it working in

00:13:20,390 --> 00:13:26,570
once I invested the time into that I

00:13:23,710 --> 00:13:28,400
knew I'd probably go the next step so I

00:13:26,570 --> 00:13:34,220
brought a motor and a bunch of

00:13:28,400 --> 00:13:38,450
electronics and then I wrote some code

00:13:34,220 --> 00:13:43,550
to make the motor work and then I added

00:13:38,450 --> 00:13:45,290
the chassis and then a battery you can

00:13:43,550 --> 00:13:48,800
see there there is a list of things that

00:13:45,290 --> 00:13:51,350
are yet to be done that's next on my

00:13:48,800 --> 00:13:53,450
list um would be nice if this web cam

00:13:51,350 --> 00:13:55,960
streamed to the device you're using to

00:13:53,450 --> 00:13:59,360
drive it so you can see where it's going

00:13:55,960 --> 00:14:01,760
because at the moment this doesn't know

00:13:59,360 --> 00:14:04,750
where it is which way it's facing so I

00:14:01,760 --> 00:14:06,980
need to add a GPS and a compass and as

00:14:04,750 --> 00:14:09,380
you'll see a bit in a bit the user

00:14:06,980 --> 00:14:11,600
interface I've written took me about an

00:14:09,380 --> 00:14:14,450
hour and could certainly deal with some

00:14:11,600 --> 00:14:16,010
improvements and hey maybe one day it

00:14:14,450 --> 00:14:18,740
can lend Skynet and it can drive itself

00:14:16,010 --> 00:14:23,780
around and it can do anything you'd want

00:14:18,740 --> 00:14:26,810
but that's all just time right so coming

00:14:23,780 --> 00:14:29,660
into the design I wanted to design this

00:14:26,810 --> 00:14:32,690
concept so that it was nice and modular

00:14:29,660 --> 00:14:35,500
so basically the way it works is

00:14:32,690 --> 00:14:35,500
starting from the left

00:14:36,320 --> 00:14:44,090
I'm going to start from the right so as

00:14:39,940 --> 00:14:48,860
I talked about there's motors they're

00:14:44,090 --> 00:14:52,610
driven by the motor controller and then

00:14:48,860 --> 00:14:55,580
the motor controller and turn these are

00:14:52,610 --> 00:14:58,190
just playing for wires between 0 and 12

00:14:55,580 --> 00:15:00,640
volts for 0 volts the motor doesn't go

00:14:58,190 --> 00:15:04,660
anywhere if it's 12 they go full speed

00:15:00,640 --> 00:15:10,520
then yard we know drives the motor

00:15:04,660 --> 00:15:15,080
controller coming over here the Odroid

00:15:10,520 --> 00:15:20,140
talks via serial to the arduino and then

00:15:15,080 --> 00:15:22,280
i'm using Wi-Fi and WebSockets to

00:15:20,140 --> 00:15:29,600
control up from either my laptop or a

00:15:22,280 --> 00:15:31,210
phone or whatever else and so for those

00:15:29,600 --> 00:15:34,010
of you who might want to build a robot

00:15:31,210 --> 00:15:36,400
but aren't sure maybe I can give you

00:15:34,010 --> 00:15:40,580
enough information about how you could

00:15:36,400 --> 00:15:44,210
start the Arduino code is remarkably

00:15:40,580 --> 00:15:48,440
simple so this motor controller uses

00:15:44,210 --> 00:15:52,970
something called PWM to control the

00:15:48,440 --> 00:15:56,420
speed so you send a square wave as you

00:15:52,970 --> 00:15:59,810
can see here and if it's zero and if the

00:15:56,420 --> 00:16:03,980
the shorter the high point is the slower

00:15:59,810 --> 00:16:05,720
it will go and so on Arduino there is

00:16:03,980 --> 00:16:08,240
hardware for that and so all you have to

00:16:05,720 --> 00:16:10,400
do is write the right value

00:16:08,240 --> 00:16:14,150
kulap function that will happen

00:16:10,400 --> 00:16:16,160
automatically say for each motor we have

00:16:14,150 --> 00:16:18,410
the speed which is running through one

00:16:16,160 --> 00:16:21,200
wire and then we have a forwards in a

00:16:18,410 --> 00:16:24,620
backwards direction wire you set the

00:16:21,200 --> 00:16:29,260
speed to something you turn on the

00:16:24,620 --> 00:16:35,300
forwards wire and it will drive

00:16:29,260 --> 00:16:38,570
something and so and I have the Arduino

00:16:35,300 --> 00:16:42,490
code it's quite simple so we can

00:16:38,570 --> 00:16:42,490
probably have a look at it

00:16:55,990 --> 00:17:08,630
so each wire comes out of a pin to start

00:17:03,200 --> 00:17:12,500
with we tell it which pins to use for

00:17:08,630 --> 00:17:14,240
what so we have one for reverse and

00:17:12,500 --> 00:17:19,370
forwards one for speed for the left

00:17:14,240 --> 00:17:25,449
motor same for the right motor I've

00:17:19,370 --> 00:17:27,740
marked out the serial pins and say I

00:17:25,449 --> 00:17:29,690
also have some other things happening on

00:17:27,740 --> 00:17:32,470
the idroid which means I can't use these

00:17:29,690 --> 00:17:37,720
ones so I've made note of that as well

00:17:32,470 --> 00:17:43,750
and then you set it up by saying that

00:17:37,720 --> 00:17:48,410
these these pins here are outputs and

00:17:43,750 --> 00:17:50,690
I've set the speed to zero can I make

00:17:48,410 --> 00:18:01,179
the text bigger that is a wonderful

00:17:50,690 --> 00:18:01,179
question let's see is the go bit bigger

00:18:01,900 --> 00:18:11,030
is that better so this whole the whole

00:18:08,929 --> 00:18:16,520
code sitting on the microprocessor to

00:18:11,030 --> 00:18:21,250
drive the motors is 240 lines and it has

00:18:16,520 --> 00:18:25,280
some extra bits so it's not complicated

00:18:21,250 --> 00:18:28,130
is Arduino language I'm using string

00:18:25,280 --> 00:18:29,890
stuff which isn't the fastest way of

00:18:28,130 --> 00:18:32,600
doing things on a microprocessor but

00:18:29,890 --> 00:18:35,650
this doesn't need to run thousands of

00:18:32,600 --> 00:18:44,440
times a second so it's easy and it works

00:18:35,650 --> 00:18:50,150
so we did you have a starting loop I

00:18:44,440 --> 00:18:52,429
send us send this command across the

00:18:50,150 --> 00:18:53,960
serial which looks something like I'm

00:18:52,429 --> 00:18:57,040
just going to write it here because I

00:18:53,960 --> 00:18:57,040
left it out of the slide

00:19:01,960 --> 00:19:09,800
so if you send this across serial it

00:19:07,490 --> 00:19:13,220
will set both motors to be going up a

00:19:09,800 --> 00:19:16,130
speed of 80 out of arm drug if you put a

00:19:13,220 --> 00:19:19,640
negative in front of it then it will go

00:19:16,130 --> 00:19:24,680
backwards and say this first lot of code

00:19:19,640 --> 00:19:29,020
is all around splitting up and pulling

00:19:24,680 --> 00:19:33,020
the speed out of that string and then

00:19:29,020 --> 00:19:45,050
the interesting bit is here where we

00:19:33,020 --> 00:19:50,530
write the motor speed and so if it's if

00:19:45,050 --> 00:19:54,250
the motor should be off one then it sets

00:19:50,530 --> 00:19:58,400
the forwards pin to zero it sends the

00:19:54,250 --> 00:20:00,380
backwards pin to zero the direction pins

00:19:58,400 --> 00:20:05,240
they can either be 0 or 1 in this case

00:20:00,380 --> 00:20:08,240
they're both set to 0 and then if the

00:20:05,240 --> 00:20:14,050
speed set higher than 0 it's as simple

00:20:08,240 --> 00:20:17,780
as setting the right direction and then

00:20:14,050 --> 00:20:21,440
this analog right function is what makes

00:20:17,780 --> 00:20:26,860
the P wwm square wave thing and that

00:20:21,440 --> 00:20:29,240
takes between 0 and 255 and so we just

00:20:26,860 --> 00:20:31,550
calculate that and set that and then the

00:20:29,240 --> 00:20:35,450
motor will go so the Arduino code is

00:20:31,550 --> 00:20:38,510
quite simple it's on my github you could

00:20:35,450 --> 00:20:41,930
probably buy an Arduino I made a

00:20:38,510 --> 00:20:44,720
controller make sure you've got your

00:20:41,930 --> 00:20:48,740
pins your cables set to the right spots

00:20:44,720 --> 00:20:49,370
you might have to change you might have

00:20:48,740 --> 00:20:53,090
to change

00:20:49,370 --> 00:20:55,100
definitions here to point to the pins

00:20:53,090 --> 00:20:57,890
you're using you could put that on your

00:20:55,100 --> 00:20:59,750
algebra a and you would have some code

00:20:57,890 --> 00:21:01,640
that you could run a motor from a serial

00:20:59,750 --> 00:21:10,400
device it's not hard

00:21:01,640 --> 00:21:15,830
so robotics can be quite simple so yep

00:21:10,400 --> 00:21:19,370
there is the link all right and then the

00:21:15,830 --> 00:21:21,350
final part of the wire of the design in

00:21:19,370 --> 00:21:23,360
terms of electronics is the wiring and

00:21:21,350 --> 00:21:25,760
as you can see there's 12 volts going

00:21:23,360 --> 00:21:28,370
from the battery or the power supply

00:21:25,760 --> 00:21:30,230
cable as I've got today and that goes to

00:21:28,370 --> 00:21:32,540
the motor controller so the motors can

00:21:30,230 --> 00:21:35,600
be driven at 12 volts and it goes to the

00:21:32,540 --> 00:21:38,720
voltage regulator which creates the 5

00:21:35,600 --> 00:21:43,670
volts which then the or the idroid and

00:21:38,720 --> 00:21:46,220
the motor controller also use now the

00:21:43,670 --> 00:21:48,830
next systems engineering component I

00:21:46,220 --> 00:21:52,220
wanted to talk to you about is modular

00:21:48,830 --> 00:21:54,170
design you don't make one big monolithic

00:21:52,220 --> 00:21:57,620
thing you split things up into

00:21:54,170 --> 00:22:01,820
components and so if we come back to the

00:21:57,620 --> 00:22:05,090
way data flows across here I've used I'm

00:22:01,820 --> 00:22:07,610
using Wi-Fi Ethernet it's very flexible

00:22:05,090 --> 00:22:10,070
you can do anything with it and then I

00:22:07,610 --> 00:22:14,780
thought well I don't want to write my

00:22:10,070 --> 00:22:15,559
own networking protocol to deal with

00:22:14,780 --> 00:22:17,420
this myself

00:22:15,559 --> 00:22:19,190
I remembered there's this wonderful

00:22:17,420 --> 00:22:22,700
things think of WebSockets

00:22:19,190 --> 00:22:25,370
and with WebSockets every language has a

00:22:22,700 --> 00:22:28,370
library you can run them from your

00:22:25,370 --> 00:22:30,320
browser in JavaScript so I could get my

00:22:28,370 --> 00:22:32,450
web browser to control this robot if I

00:22:30,320 --> 00:22:34,610
wanted and it's as simple as just

00:22:32,450 --> 00:22:37,700
sending a come-up sending some text and

00:22:34,610 --> 00:22:40,610
it'll come out the other end and so by

00:22:37,700 --> 00:22:42,980
being modular and using WebSockets I

00:22:40,610 --> 00:22:47,030
could control this from my laptop my

00:22:42,980 --> 00:22:49,570
phone anything else in the world I could

00:22:47,030 --> 00:22:51,860
write my user interface part in

00:22:49,570 --> 00:22:55,870
whichever language I feel like it could

00:22:51,860 --> 00:22:58,280
be JavaScript in a web page could be C++

00:22:55,870 --> 00:22:59,400
it's easy I have lots of options and

00:22:58,280 --> 00:23:03,120
then

00:22:59,400 --> 00:23:08,010
if we take this whole component from

00:23:03,120 --> 00:23:09,870
here by using serial theoretically I

00:23:08,010 --> 00:23:12,240
could swap out the motor controller the

00:23:09,870 --> 00:23:14,430
motors for something different and I

00:23:12,240 --> 00:23:17,370
could change the chassis to be something

00:23:14,430 --> 00:23:19,350
like this and using the same controller

00:23:17,370 --> 00:23:22,230
code I could drive one of these around

00:23:19,350 --> 00:23:24,330
which I would like to do one day for the

00:23:22,230 --> 00:23:25,530
spare money to afford something like

00:23:24,330 --> 00:23:27,840
that because I think that would be a lot

00:23:25,530 --> 00:23:36,030
of fun and would be the next step up

00:23:27,840 --> 00:23:38,880
from this all right and so I'm not sure

00:23:36,030 --> 00:23:40,740
how many of you are programmers how many

00:23:38,880 --> 00:23:43,800
of you have done a bit of scripting but

00:23:40,740 --> 00:23:45,750
something I found is that a lot of your

00:23:43,800 --> 00:23:47,390
more beginner hobbyist programmers if

00:23:45,750 --> 00:23:49,260
you used to just writing shell scripts

00:23:47,390 --> 00:23:51,270
you could write a shell script that

00:23:49,260 --> 00:23:55,020
writes to the serial port to control

00:23:51,270 --> 00:23:57,929
this robot if you wanted to but a lot of

00:23:55,020 --> 00:24:00,179
people think of a pro program is

00:23:57,929 --> 00:24:02,610
something that has a starting point it

00:24:00,179 --> 00:24:07,320
does a bunch of instructions and comes

00:24:02,610 --> 00:24:08,700
to an end point whereas with embedded

00:24:07,320 --> 00:24:10,800
systems because we're dealing with

00:24:08,700 --> 00:24:13,230
events coming in programs don't look

00:24:10,800 --> 00:24:16,590
like that they look more like this is

00:24:13,230 --> 00:24:20,100
the this is the main part of my robot up

00:24:16,590 --> 00:24:25,559
here and it is basically a while triplet

00:24:20,100 --> 00:24:27,030
or Wildtree loop and so it sits there it

00:24:25,559 --> 00:24:29,880
wakes up checks if some things have

00:24:27,030 --> 00:24:31,980
happened if something's happened it does

00:24:29,880 --> 00:24:33,450
something about it if nothing's happened

00:24:31,980 --> 00:24:39,270
it goes back to sleep and wakes up again

00:24:33,450 --> 00:24:41,580
and so I being a software engineer in

00:24:39,270 --> 00:24:44,190
the software part being the fun part of

00:24:41,580 --> 00:24:46,920
the robot the Python code that's running

00:24:44,190 --> 00:24:49,230
on the microcontroller is really over

00:24:46,920 --> 00:24:50,550
complex and so I won't bother explaining

00:24:49,230 --> 00:24:54,840
it properly

00:24:50,550 --> 00:24:56,850
other than we have what you call what we

00:24:54,840 --> 00:24:59,700
call threads you can kind of think of

00:24:56,850 --> 00:25:02,520
them as spinning loops so there is a

00:24:59,700 --> 00:25:02,929
spinning loop here you can see from

00:25:02,520 --> 00:25:06,809
there

00:25:02,929 --> 00:25:08,520
there is a spinning loop coming from the

00:25:06,809 --> 00:25:11,760
UI so

00:25:08,520 --> 00:25:14,429
that's something that's waiting for it's

00:25:11,760 --> 00:25:16,980
sitting you praise your process it can

00:25:14,429 --> 00:25:18,540
do multiple things at once or have the

00:25:16,980 --> 00:25:21,179
illusion of doing things at once so it's

00:25:18,540 --> 00:25:23,030
whole job is to see if the UI has

00:25:21,179 --> 00:25:25,770
centered anything from the websocket and

00:25:23,030 --> 00:25:29,130
if it does it puts it into a cue say

00:25:25,770 --> 00:25:31,650
that this main thing can do it but

00:25:29,130 --> 00:25:36,240
that's possibly getting a bit complex

00:25:31,650 --> 00:25:43,920
for some of you and that's okay um so

00:25:36,240 --> 00:25:48,000
let's do some demoing so this is the

00:25:43,920 --> 00:25:49,559
robot this is my phone my phone has a

00:25:48,000 --> 00:25:53,040
smartphone app on it I'll show you that

00:25:49,559 --> 00:26:01,220
in a minute but I can theoretically

00:25:53,040 --> 00:26:04,260
press a button and things will work so I

00:26:01,220 --> 00:26:06,360
have used QT to write the Android

00:26:04,260 --> 00:26:09,330
application and one of the great

00:26:06,360 --> 00:26:11,460
advantages of that is I can also compile

00:26:09,330 --> 00:26:14,700
a desktop version so at the moment my

00:26:11,460 --> 00:26:18,360
limited.you I donate in about an hour is

00:26:14,700 --> 00:26:23,059
four but five buttons forwards goes

00:26:18,360 --> 00:26:27,260
forwards backwards goes backwards and

00:26:23,059 --> 00:26:27,260
you can see how fast it's going and

00:26:27,830 --> 00:26:33,900
unfortunately there's not too far I can

00:26:31,650 --> 00:26:45,030
drive it around here but we can have a

00:26:33,900 --> 00:26:46,440
shot and so it'll drive around and if it

00:26:45,030 --> 00:26:48,800
goes any feeling that it'll run out of

00:26:46,440 --> 00:26:48,800
cable

00:26:53,299 --> 00:27:08,899
ever it's cable and get tangled and say

00:27:04,369 --> 00:27:12,159
that in itself is a lot of fun I figured

00:27:08,899 --> 00:27:16,340
sin as I have this screen I may as well

00:27:12,159 --> 00:27:18,139
do stuff with it it was an impulse thing

00:27:16,340 --> 00:27:19,700
when I was buying the processor thought

00:27:18,139 --> 00:27:22,669
having a screen as well would look cool

00:27:19,700 --> 00:27:24,799
so it's got a screen at the moment it's

00:27:22,669 --> 00:27:30,529
running top giving you some system

00:27:24,799 --> 00:27:32,269
Diagnostics it's a frame buffer believe

00:27:30,529 --> 00:27:33,679
it or not at one point I had x11 on

00:27:32,269 --> 00:27:34,789
there and I was running the

00:27:33,679 --> 00:27:38,359
Enlightenment window manager on the

00:27:34,789 --> 00:27:40,009
screen but that's overkill and you can

00:27:38,359 --> 00:27:42,529
use it through the HDMI port then so

00:27:40,009 --> 00:27:44,509
it's running a frame buffer the

00:27:42,529 --> 00:27:47,269
Enlightenment projects makes a terminal

00:27:44,509 --> 00:27:49,009
called terminology that will quite

00:27:47,269 --> 00:27:54,889
happily launch onto a frame buffer and

00:27:49,009 --> 00:27:58,909
so we can have top the other joy of

00:27:54,889 --> 00:28:17,450
linux is to control up we can just ssh

00:27:58,909 --> 00:28:30,559
into it and then we can kill top and we

00:28:17,450 --> 00:28:34,480
can start up webcam and it is now this

00:28:30,559 --> 00:28:36,799
webcam is now on and i'm using another

00:28:34,480 --> 00:28:39,220
enlightenment group of applications

00:28:36,799 --> 00:28:41,659
called rage which is their mplayer clone

00:28:39,220 --> 00:28:44,989
but conveniently that can also run on a

00:28:41,659 --> 00:28:46,249
frame buffer and so now this webcam is

00:28:44,989 --> 00:28:51,320
looking at you and coming out on the

00:28:46,249 --> 00:28:54,379
screen and as an intermediate stage at

00:28:51,320 --> 00:28:57,259
one point I was running VLC and ASCII

00:28:54,379 --> 00:29:05,779
mode on the terminal so I can do that as

00:28:57,259 --> 00:29:11,450
well the camera

00:29:05,779 --> 00:29:13,369
this web camera you can see that that is

00:29:11,450 --> 00:29:28,609
now a webcam of a webcam looking at

00:29:13,369 --> 00:29:30,590
itself and so being Linux I got to make

00:29:28,609 --> 00:29:34,249
that I got to make use of a wonderful

00:29:30,590 --> 00:29:37,759
thing called systemd say my I wrote some

00:29:34,249 --> 00:29:40,039
simple startup scripts and the robot

00:29:37,759 --> 00:29:42,379
will start up application will start up

00:29:40,039 --> 00:29:43,009
automatically as a service and will keep

00:29:42,379 --> 00:29:48,739
running forever

00:29:43,009 --> 00:29:53,570
and saying there is that how are we

00:29:48,739 --> 00:29:57,200
doing for time so in so as a summary of

00:29:53,570 --> 00:29:59,419
what I've said the main joy of

00:29:57,200 --> 00:30:02,239
open-source is if you want to do

00:29:59,419 --> 00:30:04,789
something you can look at all the things

00:30:02,239 --> 00:30:07,219
other people have done and you can go

00:30:04,789 --> 00:30:09,379
away and if you can come up with a way

00:30:07,219 --> 00:30:12,649
to glue them all together you can make

00:30:09,379 --> 00:30:14,539
something complicated or something

00:30:12,649 --> 00:30:17,659
that's recently quite quite complex with

00:30:14,539 --> 00:30:20,299
very minimal effort and you can do it

00:30:17,659 --> 00:30:21,830
yourself so rather than thinking I want

00:30:20,299 --> 00:30:23,869
to do this thing I'll go write in your

00:30:21,830 --> 00:30:27,649
library for it look at what's already

00:30:23,869 --> 00:30:30,409
out there by using modular designs with

00:30:27,649 --> 00:30:34,190
common protocols you leave yourself open

00:30:30,409 --> 00:30:36,349
to be able to change things and you also

00:30:34,190 --> 00:30:37,849
make it easy for other people who come

00:30:36,349 --> 00:30:40,099
along they might find your projects and

00:30:37,849 --> 00:30:44,859
if you have an open protocol then they

00:30:40,099 --> 00:30:49,099
can connect their UI to your robot or

00:30:44,859 --> 00:30:52,969
for that and generally use the right

00:30:49,099 --> 00:30:56,539
tool for your job is always a good thing

00:30:52,969 --> 00:30:59,389
and build yourself a robot there is kits

00:30:56,539 --> 00:31:02,809
out there for any sort of started level

00:30:59,389 --> 00:31:05,299
if you don't know how to program there

00:31:02,809 --> 00:31:07,549
is robot kits to take block your eyes

00:31:05,299 --> 00:31:09,830
you can do stuff and you can have fun if

00:31:07,549 --> 00:31:14,059
you're unlike me and you're really good

00:31:09,830 --> 00:31:15,859
at mechanical things you can build

00:31:14,059 --> 00:31:21,369
yourself something mechanical and run

00:31:15,859 --> 00:31:21,369
someone else's software on it yeah

00:31:21,880 --> 00:31:24,280
quick look up a couple of quick

00:31:23,740 --> 00:31:27,160
thank-yous

00:31:24,280 --> 00:31:29,580
thank you for Sousa who conveniently

00:31:27,160 --> 00:31:31,570
allowed me to make my trip to Europe

00:31:29,580 --> 00:31:33,880
aligned with this conference so I could

00:31:31,570 --> 00:31:35,049
come and funding my travel thank you to

00:31:33,880 --> 00:31:52,350
everyone who's organized the conference

00:31:35,049 --> 00:31:57,429
and have you got any questions are you

00:31:52,350 --> 00:32:01,840
planning on outsourcing the hardware

00:31:57,429 --> 00:32:03,309
design specs aspect and from a software

00:32:01,840 --> 00:32:07,740
perspective have you got a projects in

00:32:03,309 --> 00:32:11,470
OBS I haven't got a project on OBS

00:32:07,740 --> 00:32:14,260
because that I'm a packager I could put

00:32:11,470 --> 00:32:16,390
a project on OBS without much effort but

00:32:14,260 --> 00:32:19,270
at the moment because it's still in much

00:32:16,390 --> 00:32:21,549
more of a experimental stage there's a

00:32:19,270 --> 00:32:23,110
project on github and you would have to

00:32:21,549 --> 00:32:25,660
copy the things to the right place for

00:32:23,110 --> 00:32:29,740
your processor in terms of the hardware

00:32:25,660 --> 00:32:32,230
as I've showed you it's quite simple

00:32:29,740 --> 00:32:37,600
I've used two off-the-shelf hardware

00:32:32,230 --> 00:32:40,140
boards and an Arduino and say the

00:32:37,600 --> 00:32:44,760
hardware designs in this slide are

00:32:40,140 --> 00:32:47,880
probably as complex as it gets and so

00:32:44,760 --> 00:32:50,799
it's not like I've gone and designed

00:32:47,880 --> 00:32:53,559
something complicated had I designed

00:32:50,799 --> 00:32:55,780
both these boards rather than buying

00:32:53,559 --> 00:32:56,770
off-the-shelf ones then yes they'll

00:32:55,780 --> 00:33:11,220
probably would have been a case for me

00:32:56,770 --> 00:33:11,220
to open the hardware design so

00:33:12,670 --> 00:33:17,420
alright well thank you and I think we

00:33:15,740 --> 00:33:20,390
have a couple of minutes so feel free to

00:33:17,420 --> 00:33:23,060
come up have a look at it ask me any

00:33:20,390 --> 00:33:24,080
more questions we can possibly drive it

00:33:23,060 --> 00:33:28,090
around the stage a little bit for a

00:33:24,080 --> 00:33:33,749
couple more minutes thank you

00:33:28,090 --> 00:33:33,749

YouTube URL: https://www.youtube.com/watch?v=gewJJoA4Z9k


