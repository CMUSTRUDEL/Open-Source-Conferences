Title: openSUSE Conference 2017 From source to package
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1308-from-source-to-package

Leveraging the power of GitLab CI

During this talk we'll show a complete CI/CT pipeline and how we automated the
following tasks:

* Render and publish RST / sphinx based documentation
* Build and publish packages (deb + rpm) on a public repository (incl. signing)
* Advanced testing of JS-based applications with Firefox and PhantomJS

The idea is to automate the whole pipeline starting simple with application
testing and finally deploying it or building and publishing the appropriate
packages and documentations.

Only OSS is used and will be presented during the talk. The process is
automated with GitLab, GitLab-CI, Docker, Vagrant and several smaller projects
we have or will publish on GitHub:

* pyaptly (https://github.com/adfinis-sygroup/pyaptly)
* pkgbuild-bot (https://github.com/adfinis-sygroup/gitlab-pkgbot)
* docbuild-bot (https://github.com/adfinis-sygroup/gitlab-docsbot)

We are sure that this fully automated approach for different uses cases brings
a new angle into the CI/CT space. Properly packaging software (incl. signing)
is still not that easy and many tend to work around it. Attendees will get new
ideas how to fully automate the process of transforming source code to a
ready-to-use package and not only parts of it.



Michael Hofer
Captions: 
	00:00:07,760 --> 00:00:15,049
hello good

00:00:09,269 --> 00:00:15,049
irune I'm Michael

00:00:15,600 --> 00:00:24,510
at finis a group we are a open source

00:00:19,800 --> 00:00:29,279
provider based in Switzerland and today

00:00:24,510 --> 00:00:33,390
I will talk about each lab CI and how we

00:00:29,279 --> 00:00:39,930
basically leverage it to automate

00:00:33,390 --> 00:00:43,410
certain painful or annoying tasks so who

00:00:39,930 --> 00:00:46,940
of you already know skeet lab or already

00:00:43,410 --> 00:00:51,420
has it in place okay

00:00:46,940 --> 00:00:54,089
more or less all of you so we can more

00:00:51,420 --> 00:00:57,080
or less rush through the short

00:00:54,089 --> 00:01:00,390
introduction of kete lab so gitlab is

00:00:57,080 --> 00:01:04,559
quite similar to get up but basically

00:01:00,390 --> 00:01:07,170
you can host it on premise and you get

00:01:04,559 --> 00:01:10,770
all those nice and fancy features that

00:01:07,170 --> 00:01:13,920
you are used to so you have all the

00:01:10,770 --> 00:01:16,380
those workflows you can follow and the

00:01:13,920 --> 00:01:19,979
get workflows of course it provides a

00:01:16,380 --> 00:01:24,829
nice fancy web interface and you have

00:01:19,979 --> 00:01:27,600
the roll roll user group concept in

00:01:24,829 --> 00:01:30,090
addition you can integrate into

00:01:27,600 --> 00:01:33,479
different tools like matter most so you

00:01:30,090 --> 00:01:35,909
get notifications each time so one word

00:01:33,479 --> 00:01:38,820
shariq merged a request or accepts a

00:01:35,909 --> 00:01:43,490
pull request whatever and other tools as

00:01:38,820 --> 00:01:47,980
well of course and get lab itself is

00:01:43,490 --> 00:01:51,850
open source and as mentioned

00:01:47,980 --> 00:01:55,000
and they basically provide two version

00:01:51,850 --> 00:02:00,790
so to speak a Community Edition and to

00:01:55,000 --> 00:02:03,880
separate Enterprise editions aqui clap

00:02:00,790 --> 00:02:06,130
itself is more or less a basic rail

00:02:03,880 --> 00:02:08,920
stack they do have some additional tools

00:02:06,130 --> 00:02:12,700
that are not or components that are not

00:02:08,920 --> 00:02:15,340
directly written in Ruby and the data

00:02:12,700 --> 00:02:19,210
for the repositories is stored on disk

00:02:15,340 --> 00:02:23,020
and additional died on the data database

00:02:19,210 --> 00:02:26,830
and of course traffic gets proxy through

00:02:23,020 --> 00:02:31,840
whatever web server you prefer and what

00:02:26,830 --> 00:02:34,120
is kind of unique wavelet lab is that

00:02:31,840 --> 00:02:36,610
they use something like they call an

00:02:34,120 --> 00:02:41,910
omnibus installation that means they

00:02:36,610 --> 00:02:44,080
have one big ball which and

00:02:41,910 --> 00:02:46,510
packages all those different

00:02:44,080 --> 00:02:50,260
dependencies that you need ranging from

00:02:46,510 --> 00:02:53,980
post gree to web server to all the

00:02:50,260 --> 00:02:56,709
rubican dependencies and whatnot this

00:02:53,980 --> 00:02:59,350
makes it of course easy to maintain the

00:02:56,709 --> 00:03:02,170
whole application stack and you can also

00:02:59,350 --> 00:03:04,600
install it on older distributions like

00:03:02,170 --> 00:03:09,550
Debian 7 where you were to basically

00:03:04,600 --> 00:03:12,070
miss all those ruby gems on the other

00:03:09,550 --> 00:03:15,459
hand it raises certain security issues

00:03:12,070 --> 00:03:18,360
so you basically trust the ladies and

00:03:15,459 --> 00:03:21,640
gentleman at Key Club that they will

00:03:18,360 --> 00:03:28,660
maintain the whole package and really

00:03:21,640 --> 00:03:32,080
update and add those security patches it

00:03:28,660 --> 00:03:35,140
lab CI is and their continuous

00:03:32,080 --> 00:03:38,110
integration component and it's basically

00:03:35,140 --> 00:03:41,920
one small application that is written or

00:03:38,110 --> 00:03:44,650
one binary written in go and they

00:03:41,920 --> 00:03:47,620
provide different kind or different

00:03:44,650 --> 00:03:50,650
varieties of executioners that you can

00:03:47,620 --> 00:03:54,540
use and so you can roll run your builds

00:03:50,650 --> 00:03:57,760
in a basic shell environment and/or

00:03:54,540 --> 00:03:58,970
containerized in as a docker room in a

00:03:57,760 --> 00:04:02,150
docker image

00:03:58,970 --> 00:04:06,890
virtualbox and and also more advanced

00:04:02,150 --> 00:04:10,790
and executioner's like kubernetes so you

00:04:06,890 --> 00:04:17,870
can automatically deploy pods in your

00:04:10,790 --> 00:04:20,750
company this instance after the

00:04:17,870 --> 00:04:24,350
installation you can basically execute

00:04:20,750 --> 00:04:30,080
the key clap CI multi runner command to

00:04:24,350 --> 00:04:34,430
register this machine server in urine

00:04:30,080 --> 00:04:36,530
get lab instance so you have the

00:04:34,430 --> 00:04:39,830
possibility to either register the

00:04:36,530 --> 00:04:44,540
runner as shared that means you can use

00:04:39,830 --> 00:04:47,390
for example a docker and image build

00:04:44,540 --> 00:04:50,390
environment for different projects or

00:04:47,390 --> 00:04:56,350
you can register it as a specific

00:04:50,390 --> 00:04:59,390
specifically for one project and and the

00:04:56,350 --> 00:05:03,970
command is pretty simple just type in

00:04:59,390 --> 00:05:08,780
the URL of course token which is either

00:05:03,970 --> 00:05:13,730
available globally for the shared runner

00:05:08,780 --> 00:05:20,090
or project specific and of course the

00:05:13,730 --> 00:05:22,940
executioner type that you want to use so

00:05:20,090 --> 00:05:25,010
those runners will then basically pull

00:05:22,940 --> 00:05:28,010
get lab every few seconds to see if

00:05:25,010 --> 00:05:30,410
there are new comets and if the IC and

00:05:28,010 --> 00:05:33,800
that something has changed they will

00:05:30,410 --> 00:05:37,160
pull all the data from get lab which

00:05:33,800 --> 00:05:39,500
makes it more integratable into

00:05:37,160 --> 00:05:43,040
different network environments so you

00:05:39,500 --> 00:05:47,150
don't have to worry about ports and

00:05:43,040 --> 00:05:51,260
firewall rules and whatever the the

00:05:47,150 --> 00:05:53,630
configuration of the build workflow or

00:05:51,260 --> 00:05:56,419
the steps that should be taken care of

00:05:53,630 --> 00:05:58,669
and is basically done in this key CLABSI

00:05:56,419 --> 00:06:01,669
uyama file and if you are already

00:05:58,669 --> 00:06:05,270
familiar with Travis or Jenkins to that

00:06:01,669 --> 00:06:08,660
oh and with the champions file and it's

00:06:05,270 --> 00:06:11,030
more or less the same and of course it

00:06:08,660 --> 00:06:12,740
the runner will execute those tests and

00:06:11,030 --> 00:06:15,440
upload all artifacts

00:06:12,740 --> 00:06:17,810
if there are any back to get lab so if

00:06:15,440 --> 00:06:23,240
you build a package or a binary it will

00:06:17,810 --> 00:06:27,500
be available in kit lab so here's a

00:06:23,240 --> 00:06:31,220
short example and this is a snippet from

00:06:27,500 --> 00:06:35,240
from our world client and we wrote a and

00:06:31,220 --> 00:06:38,120
a go based CLI tool to access the a she

00:06:35,240 --> 00:06:42,800
called prod server so before starting

00:06:38,120 --> 00:06:45,530
the test run we mock or start the vault

00:06:42,800 --> 00:06:48,909
server so we can run the test against it

00:06:45,530 --> 00:06:53,180
and we define two stages the first

00:06:48,909 --> 00:06:56,300
basically and will take care of the

00:06:53,180 --> 00:07:02,659
tests themselves and afterwards we built

00:06:56,300 --> 00:07:06,889
the the go binary so again here those

00:07:02,659 --> 00:07:10,370
two stages first run the tests and then

00:07:06,889 --> 00:07:12,830
build the go binary at the bottom you

00:07:10,370 --> 00:07:17,210
can see that the artifacts are then

00:07:12,830 --> 00:07:20,630
stored and or will be stored after the

00:07:17,210 --> 00:07:22,520
build in the we see directory and this

00:07:20,630 --> 00:07:26,120
is also the directory that will be

00:07:22,520 --> 00:07:33,830
finally uploaded back to get lab as the

00:07:26,120 --> 00:07:37,099
artifacts our infrastructure is not too

00:07:33,830 --> 00:07:40,159
fancy we have just one virtual machine

00:07:37,099 --> 00:07:43,430
for get lab we actually use geek lab

00:07:40,159 --> 00:07:46,280
Enterprise for I guess two to three

00:07:43,430 --> 00:07:49,360
years years now we of course started

00:07:46,280 --> 00:07:51,740
with the community - edition but then

00:07:49,360 --> 00:07:54,139
decided that we also want to receive

00:07:51,740 --> 00:07:56,780
support developers because it's

00:07:54,139 --> 00:08:00,190
basically one of our core components and

00:07:56,780 --> 00:08:03,800
we really use it on the daily basis

00:08:00,190 --> 00:08:06,590
we have two dedicated Hardware servers

00:08:03,800 --> 00:08:08,979
for the CI environment so one docker

00:08:06,590 --> 00:08:12,349
runner where most of the builds are

00:08:08,979 --> 00:08:15,590
executed and one dedicated VirtualBox

00:08:12,349 --> 00:08:19,400
runner and for more and heavy testing

00:08:15,590 --> 00:08:22,669
like running complex ansible playbooks

00:08:19,400 --> 00:08:25,099
and stuff like that where you basically

00:08:22,669 --> 00:08:28,010
need to have multiple servers in a

00:08:25,099 --> 00:08:32,990
virtual machine or multiple services

00:08:28,010 --> 00:08:36,849
sorry and and as you usually just run

00:08:32,990 --> 00:08:41,870
one simple service in a docker container

00:08:36,849 --> 00:08:45,020
we have around 100 users that use get

00:08:41,870 --> 00:08:52,209
our gitlab instance and 30 of them are

00:08:45,020 --> 00:08:52,209
heavy users that use it on a daily basis

00:08:52,600 --> 00:08:59,089
so let's have a look at some more

00:08:55,310 --> 00:09:03,380
interesting pipelines and as we've

00:08:59,089 --> 00:09:06,310
covered the basics we had more or less

00:09:03,380 --> 00:09:10,790
three pain points that we really want to

00:09:06,310 --> 00:09:14,449
cover in the past few months so one of

00:09:10,790 --> 00:09:17,990
them was that of course and previously

00:09:14,449 --> 00:09:21,709
when we used Jenkins even before we had

00:09:17,990 --> 00:09:23,600
gate lab and we didn't have fully

00:09:21,709 --> 00:09:27,920
automated testing environment for

00:09:23,600 --> 00:09:30,079
example front-end applications or we

00:09:27,920 --> 00:09:34,220
basically write quite a lot of

00:09:30,079 --> 00:09:37,670
documentation on in rst and render it

00:09:34,220 --> 00:09:40,010
with things or we have different and

00:09:37,670 --> 00:09:43,610
workshop and training slides that are

00:09:40,010 --> 00:09:45,709
based on markdown and notes and all of

00:09:43,610 --> 00:09:48,740
them should be basically rendered and

00:09:45,709 --> 00:09:52,670
published automatically and of course

00:09:48,740 --> 00:09:54,890
the same goes for packages and these can

00:09:52,670 --> 00:09:55,790
be especially annoying if you have to

00:09:54,890 --> 00:09:57,980
build them manually

00:09:55,790 --> 00:10:06,310
of course sign the packages and then

00:09:57,980 --> 00:10:09,860
publish them on the repository server as

00:10:06,310 --> 00:10:12,410
mentioned already and most documentation

00:10:09,860 --> 00:10:17,829
and from the developers are written in

00:10:12,410 --> 00:10:23,240
rst and we render them to HTML or PDF

00:10:17,829 --> 00:10:26,660
documentation with swings and trainings

00:10:23,240 --> 00:10:29,900
or that the slides or user usually

00:10:26,660 --> 00:10:31,310
written in markdown and then we display

00:10:29,900 --> 00:10:34,290
them with reveal.js

00:10:31,310 --> 00:10:38,870
so we have those fancy

00:10:34,290 --> 00:10:38,870
slides that you can view in your browser

00:10:39,440 --> 00:10:45,959
these can of course be quite easily

00:10:41,639 --> 00:10:49,949
rendered with gitlab see I just execute

00:10:45,959 --> 00:10:52,649
the required command and and you will

00:10:49,949 --> 00:10:54,930
have them available as artifacts but how

00:10:52,649 --> 00:10:59,069
do you now publish those slides or

00:10:54,930 --> 00:11:02,519
documentation so you can either push

00:10:59,069 --> 00:11:05,730
them directly during the build process

00:11:02,519 --> 00:11:10,139
to your web server or you can trigger a

00:11:05,730 --> 00:11:15,029
web book which is in my opinion the the

00:11:10,139 --> 00:11:17,850
cooler way to do it so for that we wrote

00:11:15,029 --> 00:11:20,940
a small Python based web server which

00:11:17,850 --> 00:11:25,829
basically accepts web books from gitlab

00:11:20,940 --> 00:11:27,899
it will then or the web book will

00:11:25,829 --> 00:11:32,040
basically tell the web server which

00:11:27,899 --> 00:11:34,790
repository was and/or which build was

00:11:32,040 --> 00:11:38,040
run etc and it will take care of

00:11:34,790 --> 00:11:40,829
downloading the artifacts and extracting

00:11:38,040 --> 00:11:45,329
the documentation to the specific

00:11:40,829 --> 00:11:48,600
document root it's also on available on

00:11:45,329 --> 00:11:52,819
on github if you are interested and it

00:11:48,600 --> 00:11:55,980
may have some rough edges of course and

00:11:52,819 --> 00:11:59,399
this is what it looks like for example

00:11:55,980 --> 00:12:01,980
when we build the training slides so

00:11:59,399 --> 00:12:05,370
again this is technique lab see I am all

00:12:01,980 --> 00:12:08,399
and nothing too interesting about it

00:12:05,370 --> 00:12:11,819
which is to have a single command or

00:12:08,399 --> 00:12:14,519
several commands that are required to

00:12:11,819 --> 00:12:18,709
build the documentation and afterwards

00:12:14,519 --> 00:12:24,750
and upload them as artifacts to Key Club

00:12:18,709 --> 00:12:27,300
for managing the the stock spot which

00:12:24,750 --> 00:12:29,970
will take care of extracting extracting

00:12:27,300 --> 00:12:32,880
and placing the the artifacts on the web

00:12:29,970 --> 00:12:37,139
server and you need to create a

00:12:32,880 --> 00:12:40,050
dedicated file this is really based on

00:12:37,139 --> 00:12:42,269
the geek lab cimu file so just tell it

00:12:40,050 --> 00:12:45,420
where those artifacts should be

00:12:42,269 --> 00:12:47,000
extracted to a certain delay because

00:12:45,420 --> 00:12:49,100
sometimes the

00:12:47,000 --> 00:12:51,650
the trigger will be faster than

00:12:49,100 --> 00:12:54,610
uploading the artifacts so you can have

00:12:51,650 --> 00:12:59,120
this kind of rice condition and

00:12:54,610 --> 00:13:02,210
basically and which stages and should be

00:12:59,120 --> 00:13:05,410
taken care of so and of course if you

00:13:02,210 --> 00:13:08,390
just run the test stages it shouldn't

00:13:05,410 --> 00:13:13,220
deploy any documentation because they

00:13:08,390 --> 00:13:18,800
weren't built afterwards you need to

00:13:13,220 --> 00:13:21,560
grant a user or you would need to grant

00:13:18,800 --> 00:13:24,020
and the the permissions read permissions

00:13:21,560 --> 00:13:27,320
to a specific user and that's also the

00:13:24,020 --> 00:13:31,880
one that will be used to access geek lab

00:13:27,320 --> 00:13:34,280
through the API and of course you need

00:13:31,880 --> 00:13:38,660
to treat and configure the web book so

00:13:34,280 --> 00:13:40,910
um each time something changes or a

00:13:38,660 --> 00:13:44,180
build is triggered and matured also

00:13:40,910 --> 00:13:49,420
trigger that URL and so then the doc

00:13:44,180 --> 00:13:52,190
spot is kicked off and in the end if

00:13:49,420 --> 00:13:59,030
such a build passed it will basically

00:13:52,190 --> 00:14:02,360
look like this and it will have built

00:13:59,030 --> 00:14:05,090
all the required training slides and

00:14:02,360 --> 00:14:07,550
stuff like that so we for example have

00:14:05,090 --> 00:14:20,000
training materials for suture manager

00:14:07,550 --> 00:14:24,590
and you have those nice slides for the

00:14:20,000 --> 00:14:27,680
packages and we basically build them in

00:14:24,590 --> 00:14:30,520
docker containers as well so we built

00:14:27,680 --> 00:14:33,410
Debian packages and RPM packages and

00:14:30,520 --> 00:14:37,700
again upload them to to get lapis

00:14:33,410 --> 00:14:40,370
artifacts but and now comes more or less

00:14:37,700 --> 00:14:45,080
the the real question how do you publish

00:14:40,370 --> 00:14:47,420
them so we use aptly which is a Swiss

00:14:45,080 --> 00:14:49,790
Army knife like a Swiss Army knife tool

00:14:47,420 --> 00:14:52,790
for Debian repository management and

00:14:49,790 --> 00:14:55,600
it's quite powerful you can create

00:14:52,790 --> 00:14:57,830
snapshots mirror other repositories

00:14:55,600 --> 00:14:58,630
create repositories with your own

00:14:57,830 --> 00:15:00,970
packages

00:14:58,630 --> 00:15:03,340
and merge different snapshots and

00:15:00,970 --> 00:15:08,140
publish them so it's you're quite

00:15:03,340 --> 00:15:11,020
flexible and four-part or you know we

00:15:08,140 --> 00:15:14,650
use aptly and pie aptly and pie apt is

00:15:11,020 --> 00:15:17,710
basically a small wrapper around aptly

00:15:14,650 --> 00:15:20,140
which makes it configurable with with

00:15:17,710 --> 00:15:24,310
Alma file so you don't have to hassle

00:15:20,140 --> 00:15:27,820
with all the zeolite commands and as

00:15:24,310 --> 00:15:31,810
aptly currently that does not support or

00:15:27,820 --> 00:15:35,170
p.m. packages we use the default core

00:15:31,810 --> 00:15:42,840
tools just rpm create rapport and GPG

00:15:35,170 --> 00:15:45,550
for the Santos or Susi repositories and

00:15:42,840 --> 00:15:48,490
for the publishing process we took a

00:15:45,550 --> 00:15:50,950
similar path like for the dock spot so

00:15:48,490 --> 00:15:53,650
we have a small web server which is

00:15:50,950 --> 00:15:56,830
running on the repository server and

00:15:53,650 --> 00:16:00,820
this web server again is triggered by by

00:15:56,830 --> 00:16:03,240
a web book by gitlab and afterwards it

00:16:00,820 --> 00:16:05,830
will basically extract the whole

00:16:03,240 --> 00:16:10,360
artifacts place them in a defined

00:16:05,830 --> 00:16:15,160
structure and then trigger the required

00:16:10,360 --> 00:16:17,800
commands to update their packages again

00:16:15,160 --> 00:16:24,370
if you're interested and the project is

00:16:17,800 --> 00:16:27,160
on one gear top as well so first you

00:16:24,370 --> 00:16:28,840
will have to pee prepare a certain

00:16:27,160 --> 00:16:33,220
directory structure on the repository

00:16:28,840 --> 00:16:37,530
server this is just where basically that

00:16:33,220 --> 00:16:40,450
bot will extract the packages too so it

00:16:37,530 --> 00:16:43,960
basically at the very top you have the

00:16:40,450 --> 00:16:46,680
repository name and of course then the

00:16:43,960 --> 00:16:49,570
different distributions and releases and

00:16:46,680 --> 00:16:52,540
talkSPORT a package bot will basically

00:16:49,570 --> 00:16:58,150
place all those packages into the

00:16:52,540 --> 00:17:02,500
specific directories afterwards again

00:16:58,150 --> 00:17:05,350
like for the docs bot small llamó

00:17:02,500 --> 00:17:09,390
configuration is required a new

00:17:05,350 --> 00:17:11,530
repository so you first define the

00:17:09,390 --> 00:17:14,480
repository

00:17:11,530 --> 00:17:18,430
where the packages should be available

00:17:14,480 --> 00:17:22,750
at after the public publishing process

00:17:18,430 --> 00:17:26,930
again a download delay if required and

00:17:22,750 --> 00:17:29,570
you can define the branches and that

00:17:26,930 --> 00:17:33,050
should actually trigger updating the

00:17:29,570 --> 00:17:35,570
packages so if you have for example if

00:17:33,050 --> 00:17:38,420
you commit regularly on the testing

00:17:35,570 --> 00:17:41,420
branch you might not want to publish the

00:17:38,420 --> 00:17:46,610
the build packages of course to your

00:17:41,420 --> 00:17:51,920
upstream repositories or afterwards you

00:17:46,610 --> 00:17:55,070
have the packages and part that is a

00:17:51,920 --> 00:17:59,540
little bit tricky because we have to

00:17:55,070 --> 00:18:01,970
find out basically which packages belong

00:17:59,540 --> 00:18:04,910
to what distribution and to which

00:18:01,970 --> 00:18:08,360
release and for that and you basically

00:18:04,910 --> 00:18:13,130
define the different distributions and

00:18:08,360 --> 00:18:17,330
releases and then tell and the package

00:18:13,130 --> 00:18:19,920
pot and which blob or wet rag acts

00:18:17,330 --> 00:18:21,340
should be matched for certain packages

00:18:19,920 --> 00:18:24,530
[Music]

00:18:21,340 --> 00:18:28,070
so you can see it will basically take

00:18:24,530 --> 00:18:30,740
all RPM packages in that case and no

00:18:28,070 --> 00:18:38,420
matter what version they are and place

00:18:30,740 --> 00:18:40,250
them in the santos directory again the

00:18:38,420 --> 00:18:42,890
package pot will need access to the

00:18:40,250 --> 00:18:45,680
repository to reach the required data

00:18:42,890 --> 00:18:48,560
and artifacts and it will be triggered

00:18:45,680 --> 00:18:52,370
by via web book the same as for the talk

00:18:48,560 --> 00:18:56,470
spot and if that all runs through

00:18:52,370 --> 00:19:00,100
basically and you should see the the

00:18:56,470 --> 00:19:08,470
packages available in your repository

00:19:00,100 --> 00:19:11,530
can quickly show that so

00:19:08,470 --> 00:19:16,090
shame on us we do not have yet played

00:19:11,530 --> 00:19:18,539
around with openSUSE but here for

00:19:16,090 --> 00:19:21,669
example you can see that we build and

00:19:18,539 --> 00:19:28,120
the package bot package with the package

00:19:21,669 --> 00:19:32,320
pod and it was automatically and placed

00:19:28,120 --> 00:19:35,380
after the build into required repository

00:19:32,320 --> 00:19:43,500
and you have all the signatures in place

00:19:35,380 --> 00:19:46,980
or you can validate the package so wide

00:19:43,500 --> 00:19:49,290
and we just use obs so in our case

00:19:46,980 --> 00:19:51,660
obvious who basically have been an

00:19:49,290 --> 00:19:55,550
overkill because we don't have that many

00:19:51,660 --> 00:19:58,440
packages and I already have set up

00:19:55,550 --> 00:20:01,950
obvious in the past for another company

00:19:58,440 --> 00:20:04,560
and they still use it today but it at

00:20:01,950 --> 00:20:07,530
that time it was very very very painful

00:20:04,560 --> 00:20:11,040
to set up so I'm not sure if anyone

00:20:07,530 --> 00:20:14,550
already has experience in setting up

00:20:11,040 --> 00:20:16,980
obvious but at that time quite a lot of

00:20:14,550 --> 00:20:20,130
documentation was missing but when we

00:20:16,980 --> 00:20:23,670
were able to to get it running it was

00:20:20,130 --> 00:20:25,320
quite nice but again for us it would

00:20:23,670 --> 00:20:28,980
have been an overkill to have a

00:20:25,320 --> 00:20:33,300
dedicated environment just for a few

00:20:28,980 --> 00:20:35,850
packages or yeah of course you you

00:20:33,300 --> 00:20:39,480
basically get more packages for each

00:20:35,850 --> 00:20:43,920
project but again not that many prod and

00:20:39,480 --> 00:20:50,060
packages and of course mostly Intel or

00:20:43,920 --> 00:20:50,060
AMD 64 based not RM packages or whatever

00:20:50,930 --> 00:20:56,520
so as a takeaway

00:20:52,980 --> 00:20:59,690
just remember to to start easy if you

00:20:56,520 --> 00:21:02,910
are already using a CI tool and

00:20:59,690 --> 00:21:06,360
basically remember that you have to eat

00:21:02,910 --> 00:21:15,230
an elephant piece by piece and not take

00:21:06,360 --> 00:21:15,230
two big leaps are there any questions

00:21:25,250 --> 00:21:27,580
all right

00:21:27,030 --> 00:21:30,680
much

00:21:27,580 --> 00:21:30,680

YouTube URL: https://www.youtube.com/watch?v=aubuZXcyuVA


