Title: openSUSE Conference 2017 Moving Beyond Infrastructure as Code
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1318-moving-beyond-infrastructure-as-code

: Why Event-Driven Infrastructure is the Path Forward for Distributed Computing

The data center is getting bigger and more complex, and the microservice revolution is creating even more moving parts with application stacks that may contain hundreds and thousands of containers and services. How do we move beyond the old patterns of configuration management and infrastructure as code to what's required to survive in a world of distributed systems? If application developers can write event-driven programs to listen and react to stimulus, why can't operators do the same for infrastructure?

In this keynote Thomas Hatch, SaltStack technical founder and CTO, will discuss how to control modern data center complexity, and turn it to a competitive advantage, using SaltStack and SUSE technologies. Thomas will provide insight into the SaltStack model for event-driven infrastructure and the emerging framework for intelligent, responsive application stack management. Modern data center commodities have never been so â€‹diverse. From bare-metal to containers, Kubernetes to web servers, SaltStack and SUSE have solutions to bring order and peace of mind to a complex new world.




Thomas S Hatch
Captions: 
	00:00:07,490 --> 00:00:17,880
all right I think yesterday went dink

00:00:15,150 --> 00:00:20,699
really well I always enjoy coming out to

00:00:17,880 --> 00:00:23,599
openSUSE con and are very grateful for

00:00:20,699 --> 00:00:29,070
the opportunity and your willingness to

00:00:23,599 --> 00:00:34,620
listen to me Yammer on yet again but so

00:00:29,070 --> 00:00:37,199
I wanted to talk to you about really a

00:00:34,620 --> 00:00:39,239
lot of what the future of infrastructure

00:00:37,199 --> 00:00:42,360
deployment looks like right now a lot of

00:00:39,239 --> 00:00:44,820
the challenges that we're facing look at

00:00:42,360 --> 00:00:48,059
it from a pragmatic perspective and also

00:00:44,820 --> 00:00:51,540
talk a little bit about the event-driven

00:00:48,059 --> 00:00:52,769
infrastructure and what that means with

00:00:51,540 --> 00:00:54,900
some of the new and emerging

00:00:52,769 --> 00:01:00,600
technologies as well as new and emerging

00:00:54,900 --> 00:01:02,790
problems that we're facing so as a quick

00:01:00,600 --> 00:01:06,000
introduction my name is Thomas hatch I'm

00:01:02,790 --> 00:01:13,220
the CTO of saltstack and I'm the

00:01:06,000 --> 00:01:13,220
original author of the salt project now

00:01:13,939 --> 00:01:22,530
infrastructure is out there are becoming

00:01:16,520 --> 00:01:24,480
increasingly more complex I had I had a

00:01:22,530 --> 00:01:30,450
wonderful argument about this a few

00:01:24,480 --> 00:01:32,900
months ago to banking caught a at a

00:01:30,450 --> 00:01:35,760
panel that was prepared to many banks

00:01:32,900 --> 00:01:38,280
back east everybody else on the panel

00:01:35,760 --> 00:01:41,460
was explaining that no no infrastructure

00:01:38,280 --> 00:01:49,170
is getting simpler because we have more

00:01:41,460 --> 00:01:51,240
automation and they seem to have a hard

00:01:49,170 --> 00:01:54,420
time understanding that even if that

00:01:51,240 --> 00:01:55,830
were true which it which it isn't I mean

00:01:54,420 --> 00:01:58,460
we do have more automation but that

00:01:55,830 --> 00:02:00,750
doesn't magically make things simpler

00:01:58,460 --> 00:02:04,170
effectively what it does is it allows us

00:02:00,750 --> 00:02:06,540
to deploy more services so I finished

00:02:04,170 --> 00:02:09,959
this argument on this panel and I go

00:02:06,540 --> 00:02:12,750
back down to and I talk to the head of

00:02:09,959 --> 00:02:15,900
an infrastructure division at one of the

00:02:12,750 --> 00:02:17,459
large banks and they say thank you for

00:02:15,900 --> 00:02:19,650
thank you for arguing the fact that

00:02:17,459 --> 00:02:24,180
things are getting more complicated than

00:02:19,650 --> 00:02:27,239
he was saying before we introduced salt

00:02:24,180 --> 00:02:28,500
and similar automation tooling in an

00:02:27,239 --> 00:02:32,130
infrastructure he said

00:02:28,500 --> 00:02:34,710
he said my team could deploy five

00:02:32,130 --> 00:02:38,130
applications we maintained five

00:02:34,710 --> 00:02:41,160
applications and he says now that we

00:02:38,130 --> 00:02:45,959
have automation tooling we have to

00:02:41,160 --> 00:02:50,060
maintain 50 applications and so this is

00:02:45,959 --> 00:02:53,670
really one of the main reasons why

00:02:50,060 --> 00:02:55,680
things are getting more complex is just

00:02:53,670 --> 00:02:58,380
that there are more services out there

00:02:55,680 --> 00:03:02,070
but something else that's occurring

00:02:58,380 --> 00:03:05,400
that's making things more complex has to

00:03:02,070 --> 00:03:07,680
do with all of the different types of

00:03:05,400 --> 00:03:09,840
deployments all of the different types

00:03:07,680 --> 00:03:13,230
of systems that we need to manage an

00:03:09,840 --> 00:03:18,450
interface with it used to be right that

00:03:13,230 --> 00:03:22,590
we would set up say a server deployment

00:03:18,450 --> 00:03:23,370
and we'd maintain some desktops and that

00:03:22,590 --> 00:03:26,130
was that

00:03:23,370 --> 00:03:29,989
but now as you're all very well aware

00:03:26,130 --> 00:03:43,530
there's there's just a lot more going on

00:03:29,989 --> 00:03:45,450
okay so why not only has infrastructure

00:03:43,530 --> 00:03:48,810
changed dramatically over the last few

00:03:45,450 --> 00:03:52,200
years but it has a great deal to do with

00:03:48,810 --> 00:03:55,799
the tools that are available again it

00:03:52,200 --> 00:03:58,890
used to be and many of you remember this

00:03:55,799 --> 00:04:03,680
probably quite vividly because it wasn't

00:03:58,890 --> 00:04:09,180
too terribly long ago that the primary

00:04:03,680 --> 00:04:13,560
case was to deploy a lamp stack and to

00:04:09,180 --> 00:04:15,060
carve that up and to carve out lamp you

00:04:13,560 --> 00:04:17,519
would have Linux and that you're

00:04:15,060 --> 00:04:20,609
managing your operating systems Apache

00:04:17,519 --> 00:04:24,780
that's a web server mysql that's

00:04:20,609 --> 00:04:26,910
database and p for all of the good

00:04:24,780 --> 00:04:29,419
programming languages of the day you

00:04:26,910 --> 00:04:29,419
know Python

00:04:30,169 --> 00:04:37,559
Microsoft just came out with a new

00:04:32,249 --> 00:04:39,270
language called P just so apparently

00:04:37,559 --> 00:04:42,839
they're trying to go back in time and

00:04:39,270 --> 00:04:45,899
take over that now that was the old days

00:04:42,839 --> 00:04:48,929
we had those basic components to deal

00:04:45,899 --> 00:04:51,509
with a database a web server and

00:04:48,929 --> 00:04:55,709
application and the operating systems

00:04:51,509 --> 00:04:57,990
this is certainly not the case now we

00:04:55,709 --> 00:04:59,819
still often times need to I should say

00:04:57,990 --> 00:05:03,209
often times we still need to interface

00:04:59,819 --> 00:05:05,849
with and manage operating systems I'm a

00:05:03,209 --> 00:05:08,249
genetic Euler Lee prevalent in the minds

00:05:05,849 --> 00:05:14,639
of people who come to a conference about

00:05:08,249 --> 00:05:16,169
an operating system and instead of the

00:05:14,639 --> 00:05:18,869
old days where we would say well we've

00:05:16,169 --> 00:05:23,669
got an SQL database and we're going to

00:05:18,869 --> 00:05:27,449
argue between MySQL and Postgres we have

00:05:23,669 --> 00:05:30,509
a few more databases to consider and

00:05:27,449 --> 00:05:33,360
manage now whether those databases are

00:05:30,509 --> 00:05:36,089
SQL no SQL on-premise in the cloud

00:05:33,360 --> 00:05:41,099
spanned across multiple cloud services

00:05:36,089 --> 00:05:43,889
and providers etc but also we've got so

00:05:41,099 --> 00:05:48,089
much more along the lines of Big Data

00:05:43,889 --> 00:05:51,990
and artificial intelligence systems in

00:05:48,089 --> 00:05:56,189
the last year Amazon deployed hundreds

00:05:51,990 --> 00:05:59,729
if not more than a thousand new services

00:05:56,189 --> 00:06:01,619
to their cloud if if this isn't

00:05:59,729 --> 00:06:05,579
increasing complexity I don't know what

00:06:01,619 --> 00:06:10,229
is and then again tying back in to my

00:06:05,579 --> 00:06:13,199
original point we're deploying more and

00:06:10,229 --> 00:06:18,509
more applications to these clouds than

00:06:13,199 --> 00:06:22,999
we ever have before I say clouds but I

00:06:18,509 --> 00:06:22,999
should say just to our infrastructures

00:06:23,119 --> 00:06:28,589
okay so if infrastructure looks a lot

00:06:26,339 --> 00:06:32,699
different today than it did 10 years ago

00:06:28,589 --> 00:06:37,050
and 20 years ago I just wanted to take a

00:06:32,699 --> 00:06:39,240
brief and happy step through time with

00:06:37,050 --> 00:06:42,479
and discuss the evolution of

00:06:39,240 --> 00:06:43,120
infrastructure so back in the 70s this

00:06:42,479 --> 00:06:46,630
is suppose

00:06:43,120 --> 00:06:53,470
the 70s maybe maybe the 60s with that

00:06:46,630 --> 00:06:56,290
hair but we had mainframes and that was

00:06:53,470 --> 00:06:59,790
how computers in large organizations

00:06:56,290 --> 00:07:04,300
worked right mainframes and then we

00:06:59,790 --> 00:07:06,760
evolved to commodity hardware which I'm

00:07:04,300 --> 00:07:10,320
sure many of you have seen some

00:07:06,760 --> 00:07:12,490
beautiful cabling jobs in your lives I

00:07:10,320 --> 00:07:19,539
tried to find one that you could still

00:07:12,490 --> 00:07:20,949
see the servers behind the cables Linux

00:07:19,539 --> 00:07:25,449
in and of itself was one of the great

00:07:20,949 --> 00:07:28,270
enablers for commodity hardware and for

00:07:25,449 --> 00:07:30,280
having many independent servers in the

00:07:28,270 --> 00:07:32,770
rack this in this scenario we're so

00:07:30,280 --> 00:07:35,530
familiar with now and I want to stop and

00:07:32,770 --> 00:07:38,139
put a little emphasis on this and talk

00:07:35,530 --> 00:07:43,600
about the fact that open-source software

00:07:38,139 --> 00:07:46,180
enables us to progress significantly

00:07:43,600 --> 00:07:49,060
faster in what we were able to build and

00:07:46,180 --> 00:07:50,530
deploy because all of a sudden we of

00:07:49,060 --> 00:07:53,620
course have the availability of that

00:07:50,530 --> 00:07:58,090
stack now as we move forward and start

00:07:53,620 --> 00:08:01,680
to look at the cloud when the cloud

00:07:58,090 --> 00:08:04,030
really took off if we look at

00:08:01,680 --> 00:08:06,340
virtualization sure in the late 90s

00:08:04,030 --> 00:08:10,510
VMware came along and they said hey

00:08:06,340 --> 00:08:13,479
we've got this virtualization thing but

00:08:10,510 --> 00:08:18,479
what really made the cloud take off with

00:08:13,479 --> 00:08:24,190
Xen and the availability of

00:08:18,479 --> 00:08:26,789
virtualization in the open and then I

00:08:24,190 --> 00:08:30,580
think was really when the transformative

00:08:26,789 --> 00:08:33,400
aspect of cloud started to occur because

00:08:30,580 --> 00:08:35,709
all of a sudden we had legitimately free

00:08:33,400 --> 00:08:38,800
and open tools that we could continue to

00:08:35,709 --> 00:08:43,270
build on top of and kind of go bananas

00:08:38,800 --> 00:08:45,100
and yes that that visual of

00:08:43,270 --> 00:08:46,690
virtualization is meant to be comical

00:08:45,100 --> 00:08:49,200
the numbers are probably too small to

00:08:46,690 --> 00:08:54,600
see it's a wildly over provisioned

00:08:49,200 --> 00:08:54,600
server which that never happens

00:08:54,920 --> 00:09:02,990
so if we have progress right that we've

00:08:59,100 --> 00:09:05,910
moved forward from mainframes to

00:09:02,990 --> 00:09:08,490
commoditized Hardware to cloud to

00:09:05,910 --> 00:09:12,720
containers and then as we are currently

00:09:08,490 --> 00:09:15,810
moving into things like serverless why

00:09:12,720 --> 00:09:21,120
is it that when we oftentimes go into a

00:09:15,810 --> 00:09:24,140
large in data center and deployment it

00:09:21,120 --> 00:09:26,790
instead looks a little more like this

00:09:24,140 --> 00:09:30,510
where we see that they're using multiple

00:09:26,790 --> 00:09:33,959
clouds and by multiple clouds I do mean

00:09:30,510 --> 00:09:37,529
that they're using AWS plus three other

00:09:33,959 --> 00:09:41,690
clouds usually one is some cloud that

00:09:37,529 --> 00:09:41,690
you know that guy Bob in the back setup

00:09:41,779 --> 00:09:45,240
yeah I hear some laughing you know what

00:09:44,490 --> 00:09:48,330
I'm talking about

00:09:45,240 --> 00:09:51,720
and you have no idea why some random

00:09:48,330 --> 00:09:56,910
critical service is running on Linode I

00:09:51,720 --> 00:09:58,350
mean unlike Linode null but so and then

00:09:56,910 --> 00:10:02,940
when we look at the bare metal

00:09:58,350 --> 00:10:04,950
on-premise systems which still exist we

00:10:02,940 --> 00:10:09,000
end up seeing a very wide swath of

00:10:04,950 --> 00:10:11,700
what's being used there from classically

00:10:09,000 --> 00:10:15,900
managed maintained servers all the way

00:10:11,700 --> 00:10:21,060
up to the vast and very quickly

00:10:15,900 --> 00:10:23,480
proliferating kubernetes systems so the

00:10:21,060 --> 00:10:27,390
question I wanted to pose is why do

00:10:23,480 --> 00:10:30,270
infrastructures look like this today why

00:10:27,390 --> 00:10:33,060
you have infrastructures and these and

00:10:30,270 --> 00:10:36,029
these deployments in so many cases been

00:10:33,060 --> 00:10:39,450
unable to completely move forward into

00:10:36,029 --> 00:10:42,150
the cloud and into containerization and

00:10:39,450 --> 00:10:46,860
into service and that we seem to leave

00:10:42,150 --> 00:10:49,290
this long tail out behind ourselves and

00:10:46,860 --> 00:10:55,640
then we end up needing to manage that

00:10:49,290 --> 00:10:55,640
tail continually so

00:10:58,670 --> 00:11:04,889
one of the philosophies that I like to

00:11:01,379 --> 00:11:10,529
present is that the PI keeps getting

00:11:04,889 --> 00:11:12,420
bigger but the actual amount of Pi that

00:11:10,529 --> 00:11:16,259
any individual component takes up

00:11:12,420 --> 00:11:20,329
doesn't necessarily shrink many

00:11:16,259 --> 00:11:23,850
technologies are very hard to kill

00:11:20,329 --> 00:11:28,740
they're like I don't know certain

00:11:23,850 --> 00:11:31,680
certain villains in Bond movies they

00:11:28,740 --> 00:11:36,059
absolutely refuse to die I'm amazed how

00:11:31,680 --> 00:11:38,670
much Fortran still exists I'm also

00:11:36,059 --> 00:11:40,350
amazed to walk into organizations and

00:11:38,670 --> 00:11:42,839
see that they're still building software

00:11:40,350 --> 00:11:47,279
and maintaining it using models that

00:11:42,839 --> 00:11:49,259
they developed in the early 90s so a lot

00:11:47,279 --> 00:11:52,499
of these older components refused to die

00:11:49,259 --> 00:11:55,709
and it's more about we keep making the

00:11:52,499 --> 00:11:57,300
pie bigger and as we keep making the pie

00:11:55,709 --> 00:12:02,000
bigger we keep introducing new

00:11:57,300 --> 00:12:04,379
technologies into the mix even under

00:12:02,000 --> 00:12:07,980
Microsoft let's just say Microsoft's at

00:12:04,379 --> 00:12:15,000
best CEO ever if you remember he liked

00:12:07,980 --> 00:12:18,629
developers Microsoft's physical install

00:12:15,000 --> 00:12:22,709
base didn't really go down but the

00:12:18,629 --> 00:12:24,870
overall in deployment of servers and

00:12:22,709 --> 00:12:27,269
services went up to the point where we

00:12:24,870 --> 00:12:34,680
just ignored the relevance of Microsoft

00:12:27,269 --> 00:12:38,269
in the data center so I guess the point

00:12:34,680 --> 00:12:44,040
I'm trying to make is that it's very

00:12:38,269 --> 00:12:52,350
very easy and very tantalizing for us to

00:12:44,040 --> 00:12:57,439
be completely consumed by what is coming

00:12:52,350 --> 00:13:00,179
out tomorrow as opposed to looking at

00:12:57,439 --> 00:13:03,389
everything that we've got from a more

00:13:00,179 --> 00:13:04,860
complete view and saying what is it

00:13:03,389 --> 00:13:06,810
that's out there what are what are the

00:13:04,860 --> 00:13:09,420
real things that are going on

00:13:06,810 --> 00:13:12,900
and how can I build and manage my

00:13:09,420 --> 00:13:16,650
systems and deal with the incredible

00:13:12,900 --> 00:13:25,860
flood of open-source software which is

00:13:16,650 --> 00:13:27,570
continually bearing down on us so with

00:13:25,860 --> 00:13:29,910
that said with that introduction

00:13:27,570 --> 00:13:33,080
I want to talk a little bit about some

00:13:29,910 --> 00:13:36,420
of the emerging areas of infrastructure

00:13:33,080 --> 00:13:39,660
some of the in those emerging patterns

00:13:36,420 --> 00:13:41,160
and some of those emerging problems so

00:13:39,660 --> 00:13:44,580
I'm going to start by talking about

00:13:41,160 --> 00:13:47,580
security and how the security landscape

00:13:44,580 --> 00:13:50,040
in just the last few years has had to

00:13:47,580 --> 00:13:53,130
change so dramatically and now we've

00:13:50,040 --> 00:13:55,590
seen a very significant shift in the

00:13:53,130 --> 00:13:59,100
type of software that is being built and

00:13:55,590 --> 00:14:02,760
deployed for security when it comes to

00:13:59,100 --> 00:14:05,790
Internet of Things to use a terrible

00:14:02,760 --> 00:14:08,850
term to just try and try and deal with

00:14:05,790 --> 00:14:11,360
the fact that we can run software on

00:14:08,850 --> 00:14:11,360
everything now

00:14:11,390 --> 00:14:17,310
similarly the threats and the

00:14:15,210 --> 00:14:21,300
opportunities in Internet of Things has

00:14:17,310 --> 00:14:23,940
become incredibly vast and I also want

00:14:21,300 --> 00:14:29,280
to spend some time talking about service

00:14:23,940 --> 00:14:32,970
as we see containers taking such a

00:14:29,280 --> 00:14:34,740
stronghold in our infrastructures I want

00:14:32,970 --> 00:14:38,130
to put a strong emphasis on the fact

00:14:34,740 --> 00:14:40,950
that the service architectures today are

00:14:38,130 --> 00:14:44,400
receiving a lot of developmental

00:14:40,950 --> 00:14:47,160
attention and that as we are seeing

00:14:44,400 --> 00:14:52,250
systems like kubernetes take such a

00:14:47,160 --> 00:14:55,500
strong hold in the data center similarly

00:14:52,250 --> 00:14:58,110
these service architectures and service

00:14:55,500 --> 00:15:01,470
systems are becoming very very important

00:14:58,110 --> 00:15:03,060
and we need not only to figure out how

00:15:01,470 --> 00:15:05,370
they work how to interface with them how

00:15:03,060 --> 00:15:07,650
to build applications on them but also

00:15:05,370 --> 00:15:10,860
what that implication what those

00:15:07,650 --> 00:15:13,110
implications are for existing data

00:15:10,860 --> 00:15:18,170
centers existing applications and

00:15:13,110 --> 00:15:22,459
existing deployments and systems ok

00:15:18,170 --> 00:15:24,769
oh and artificial intelligence is a

00:15:22,459 --> 00:15:27,230
thing apparently

00:15:24,769 --> 00:15:28,970
it's it's ironically always been a thing

00:15:27,230 --> 00:15:31,610
I mean that was kind of Alan Turing's

00:15:28,970 --> 00:15:35,690
original dream was it not to build

00:15:31,610 --> 00:15:38,120
artificial intelligence and I would say

00:15:35,690 --> 00:15:40,639
that since it's so difficult to find

00:15:38,120 --> 00:15:43,190
normal intelligence building artificial

00:15:40,639 --> 00:15:51,920
intelligence and of itself seems to be

00:15:43,190 --> 00:15:54,040
still a rather daunting task okay so let

00:15:51,920 --> 00:15:58,579
me talk a little bit about security I

00:15:54,040 --> 00:16:00,230
got an email last night do you guy do

00:15:58,579 --> 00:16:04,160
you guys have a restaurant called

00:16:00,230 --> 00:16:08,329
Chipotle in Europe no there's no

00:16:04,160 --> 00:16:13,310
Chipotle's out here there's a Chipotle

00:16:08,329 --> 00:16:15,230
in Frankfurt I was I was I was going to

00:16:13,310 --> 00:16:17,029
make a crack about how I never find

00:16:15,230 --> 00:16:19,160
Mexican food in Europe it might be

00:16:17,029 --> 00:16:22,339
because you're you're like far away from

00:16:19,160 --> 00:16:25,339
Mexico and you eat Spanish food instead

00:16:22,339 --> 00:16:27,050
that makes sense it might be the same

00:16:25,339 --> 00:16:30,649
reason why you can't find English food

00:16:27,050 --> 00:16:34,990
in the States but unlike English food

00:16:30,649 --> 00:16:39,110
Mexican food I think tastes quite good

00:16:34,990 --> 00:16:44,990
so Chipotle I got an email last night

00:16:39,110 --> 00:16:50,540
from Chipotle informing me that their

00:16:44,990 --> 00:16:52,699
cash registers have been hacked this is

00:16:50,540 --> 00:16:55,579
not the first company whose cash

00:16:52,699 --> 00:16:58,100
registers have been hacked it's tiresome

00:16:55,579 --> 00:17:00,350
I'm sure that the bank's love the fact

00:16:58,100 --> 00:17:02,930
that they need to reissue everyone's

00:17:00,350 --> 00:17:11,569
credit cards every three months now it

00:17:02,930 --> 00:17:17,299
seems so if we're looking at the

00:17:11,569 --> 00:17:19,819
emerging security thread we have to

00:17:17,299 --> 00:17:21,650
consider systems paradigms and models

00:17:19,819 --> 00:17:23,770
which are very very different from how

00:17:21,650 --> 00:17:25,970
we have traditionally managed security

00:17:23,770 --> 00:17:27,500
how we have traditionally managed

00:17:25,970 --> 00:17:30,320
security of course is to make sure that

00:17:27,500 --> 00:17:32,060
our systems are patched make sure that

00:17:30,320 --> 00:17:34,120
our system software known Vern

00:17:32,060 --> 00:17:36,920
vulnerabilities are taken care of and

00:17:34,120 --> 00:17:40,520
then we firewall the ever-lovin

00:17:36,920 --> 00:17:43,400
daylights out of our networks but when

00:17:40,520 --> 00:17:48,980
we start to look at environments where

00:17:43,400 --> 00:17:51,890
we have so many end devices we have to

00:17:48,980 --> 00:17:55,970
come up with new models of managing

00:17:51,890 --> 00:17:59,840
security and we have to come up with new

00:17:55,970 --> 00:18:04,040
ways of exposing where our security

00:17:59,840 --> 00:18:05,390
faults are and over the last few years

00:18:04,040 --> 00:18:08,390
there have been a lot of security

00:18:05,390 --> 00:18:10,160
companies which have emerged and a lot

00:18:08,390 --> 00:18:13,850
of security companies which have focused

00:18:10,160 --> 00:18:18,080
around a number of key areas to try and

00:18:13,850 --> 00:18:20,390
mitigate security issues now these areas

00:18:18,080 --> 00:18:23,420
generally you've got your classical

00:18:20,390 --> 00:18:25,250
approach to security which is to say yes

00:18:23,420 --> 00:18:26,810
let's make sure that our vulnerabilities

00:18:25,250 --> 00:18:29,240
are taken care of and our systems are

00:18:26,810 --> 00:18:32,060
patched and then our systems are

00:18:29,240 --> 00:18:35,840
configured in a secure way auditing

00:18:32,060 --> 00:18:40,310
against security standards government

00:18:35,840 --> 00:18:43,190
security standards etc now as we move

00:18:40,310 --> 00:18:45,110
forward some of these emerging security

00:18:43,190 --> 00:18:49,910
companies again are doing things like

00:18:45,110 --> 00:18:52,490
creating honeypot systems and having

00:18:49,910 --> 00:18:55,220
very aggressive deception systems built

00:18:52,490 --> 00:18:56,810
into the network I'm not entirely sure

00:18:55,220 --> 00:19:00,980
how that's going to work for cash

00:18:56,810 --> 00:19:05,000
registers or how it's going to work for

00:19:00,980 --> 00:19:08,080
weather stations or oil rigs or one of

00:19:05,000 --> 00:19:11,120
my personal favorites slot machines

00:19:08,080 --> 00:19:12,530
although I have to admit I'm generally

00:19:11,120 --> 00:19:14,540
less concerned about the overall

00:19:12,530 --> 00:19:16,640
security of slot machines I don't see

00:19:14,540 --> 00:19:23,330
that as a personal major economic impact

00:19:16,640 --> 00:19:25,190
er now I say that because something like

00:19:23,330 --> 00:19:32,510
half of the world slot machines have

00:19:25,190 --> 00:19:34,280
salt on them so let's see one of the

00:19:32,510 --> 00:19:36,250
other problems that we went into with

00:19:34,280 --> 00:19:38,840
security has to do with the fact that

00:19:36,250 --> 00:19:41,540
many companies go through the security

00:19:38,840 --> 00:19:43,610
assessment and then they come to the

00:19:41,540 --> 00:19:47,420
conclusion that it's going to cost

00:19:43,610 --> 00:19:52,570
more money to defend from a security

00:19:47,420 --> 00:19:52,570
breach than it is to mitigate one I

00:19:53,410 --> 00:19:59,059
think that this was an incredibly

00:19:55,610 --> 00:20:03,620
startling revelation that many companies

00:19:59,059 --> 00:20:07,309
have made the very real decision to roll

00:20:03,620 --> 00:20:11,840
the dice and hope that they are the ones

00:20:07,309 --> 00:20:14,450
that get hit now with a said though we

00:20:11,840 --> 00:20:20,230
see that there are far more issues with

00:20:14,450 --> 00:20:24,080
security today than there were

00:20:20,230 --> 00:20:26,120
traditionally so as as the scenarios

00:20:24,080 --> 00:20:29,240
change in the threats change I wanted to

00:20:26,120 --> 00:20:32,500
I wanted to make a comparison to a major

00:20:29,240 --> 00:20:35,290
security change which occurred in Europe

00:20:32,500 --> 00:20:40,250
in the 14th century

00:20:35,290 --> 00:20:44,030
see I was about the time that we came up

00:20:40,250 --> 00:20:47,390
with cannons that's a great idea we can

00:20:44,030 --> 00:20:53,660
shoot giant balls of lead at our enemies

00:20:47,390 --> 00:20:57,740
so the problem with cannons and a

00:20:53,660 --> 00:21:02,150
defense was that all of the walls around

00:20:57,740 --> 00:21:05,780
cities which had been built up until

00:21:02,150 --> 00:21:09,200
that time were fairly thin walls they

00:21:05,780 --> 00:21:14,270
were made to defend against a guy on a

00:21:09,200 --> 00:21:16,820
horse with a spear or a sword they

00:21:14,270 --> 00:21:22,280
weren't made to defend against gunpowder

00:21:16,820 --> 00:21:24,830
propelled projections and so as we look

00:21:22,280 --> 00:21:28,010
at many of the cities around here and

00:21:24,830 --> 00:21:29,840
again you guys probably get to see city

00:21:28,010 --> 00:21:33,049
walls a lot more often than I do we've

00:21:29,840 --> 00:21:36,230
given up on city walls in the US we just

00:21:33,049 --> 00:21:39,250
kind of had lots of guns that's still an

00:21:36,230 --> 00:21:39,250
ongoing problem for us

00:21:39,920 --> 00:21:50,690
but to great expense and to into a great

00:21:46,250 --> 00:21:53,360
economic burden huge numbers of cities

00:21:50,690 --> 00:21:59,440
in the 14th century had to tear down

00:21:53,360 --> 00:22:02,120
their existing old city walls and build

00:21:59,440 --> 00:22:05,210
city walls that could deal with the

00:22:02,120 --> 00:22:07,400
onslaught from a cannon and change them

00:22:05,210 --> 00:22:11,480
from what they had which were again

00:22:07,400 --> 00:22:14,270
these tall flat thin walls that a cannon

00:22:11,480 --> 00:22:19,160
can easily get through and change those

00:22:14,270 --> 00:22:21,020
into large earthwork sloped walls that a

00:22:19,160 --> 00:22:24,350
cannonball will bounce off of and it

00:22:21,020 --> 00:22:26,750
won't matter and admittedly when this

00:22:24,350 --> 00:22:29,060
first happened they went to the to the

00:22:26,750 --> 00:22:32,440
best architects of the day to say how

00:22:29,060 --> 00:22:37,160
are we going to defend from this

00:22:32,440 --> 00:22:40,010
effectively what I am proposing is that

00:22:37,160 --> 00:22:41,540
the emergence today of security threats

00:22:40,010 --> 00:22:43,450
and how they have changed in the last

00:22:41,540 --> 00:22:46,490
few years

00:22:43,450 --> 00:22:49,340
poses a similar threat to

00:22:46,490 --> 00:22:55,370
infrastructures and devices as the

00:22:49,340 --> 00:22:59,450
cannon did to medieval walls and that

00:22:55,370 --> 00:23:02,960
the requirement exists to look at a

00:22:59,450 --> 00:23:06,230
fundamental revamp of how we are

00:23:02,960 --> 00:23:13,660
managing security inside of the data

00:23:06,230 --> 00:23:13,660
center and inside of manage devices now

00:23:15,790 --> 00:23:22,430
so the question is do we have the right

00:23:19,370 --> 00:23:25,910
models in place to deal with these

00:23:22,430 --> 00:23:27,680
emerging threats one of the major

00:23:25,910 --> 00:23:30,260
problems that we run into is that the

00:23:27,680 --> 00:23:34,790
nature of the threats change so

00:23:30,260 --> 00:23:38,780
dramatically based on the systems which

00:23:34,790 --> 00:23:43,820
we are interfacing with and so when we

00:23:38,780 --> 00:23:46,820
when we dive into saying that I need to

00:23:43,820 --> 00:23:48,770
secure a data center the way that's

00:23:46,820 --> 00:23:51,800
worked has changed so dramatically

00:23:48,770 --> 00:23:53,820
because of microservices and because of

00:23:51,800 --> 00:23:57,420
virtualization and even because of the

00:23:53,820 --> 00:23:59,490
loud one of the emerging technologies

00:23:57,420 --> 00:24:02,850
I shouldn't say emerging it's it's

00:23:59,490 --> 00:24:06,660
fairly emerged is a concept called micro

00:24:02,850 --> 00:24:09,080
segmentation micro segmentation is the

00:24:06,660 --> 00:24:12,210
ability to map all of your allowed

00:24:09,080 --> 00:24:14,270
network systems and then have individual

00:24:12,210 --> 00:24:17,550
individual firewalls on all of your

00:24:14,270 --> 00:24:20,340
servers so that you only allow all of

00:24:17,550 --> 00:24:22,530
the inter data center communication

00:24:20,340 --> 00:24:24,650
which is required and then have an

00:24:22,530 --> 00:24:27,270
accurate and up-to-date map of

00:24:24,650 --> 00:24:28,800
everything that's of all of your network

00:24:27,270 --> 00:24:31,350
connections so that as soon as a network

00:24:28,800 --> 00:24:33,080
connection tries to occur which doesn't

00:24:31,350 --> 00:24:36,960
look normal

00:24:33,080 --> 00:24:38,940
you instantly become aware of it now

00:24:36,960 --> 00:24:41,670
micro segmentation schemes have been

00:24:38,940 --> 00:24:46,440
able a few of them have been able to

00:24:41,670 --> 00:24:48,390
keep up with the cloud but there's some

00:24:46,440 --> 00:24:50,160
strong questions about whether or not

00:24:48,390 --> 00:24:52,400
these sorts of approaches are going to

00:24:50,160 --> 00:24:54,090
be able to keep up with a containerized

00:24:52,400 --> 00:24:57,930
infrastructure or surveillance

00:24:54,090 --> 00:25:02,400
infrastructure and then when we look at

00:24:57,930 --> 00:25:05,220
voter abilities is that enough one of

00:25:02,400 --> 00:25:07,290
the things that's great about a lot of

00:25:05,220 --> 00:25:11,220
containerized infrastructure tools is

00:25:07,290 --> 00:25:15,000
that they can be set up to prevent you

00:25:11,220 --> 00:25:17,850
from deploying a container that has

00:25:15,000 --> 00:25:23,340
known software vulnerabilities in it

00:25:17,850 --> 00:25:28,710
aiya sounds like a really good idea it

00:25:23,340 --> 00:25:30,960
also sounds kind of like always checking

00:25:28,710 --> 00:25:34,260
the validity of your certificates when

00:25:30,960 --> 00:25:38,400
you make SSL or TLS connections and no

00:25:34,260 --> 00:25:42,530
one in this room ever accepts a

00:25:38,400 --> 00:25:42,530
self-signed certificate right never

00:25:42,990 --> 00:25:48,270
everyone in this room also with SSH

00:25:45,850 --> 00:25:52,210
connections I'm sure that you always

00:25:48,270 --> 00:25:53,710
manually check to make sure that the

00:25:52,210 --> 00:25:58,840
system you're connecting to is what you

00:25:53,710 --> 00:26:01,660
think it is and so I find it easy to

00:25:58,840 --> 00:26:03,010
believe that people who are deploying to

00:26:01,660 --> 00:26:05,320
infrastructures that are checking for

00:26:03,010 --> 00:26:09,850
vulnerabilities it's easier to flip that

00:26:05,320 --> 00:26:11,590
off so something else that we need to

00:26:09,850 --> 00:26:17,770
consider when we're looking at security

00:26:11,590 --> 00:26:19,510
in this new wave of system tooling is

00:26:17,770 --> 00:26:23,170
also figuring out how to make it so to

00:26:19,510 --> 00:26:27,580
make that security as non cumbersome to

00:26:23,170 --> 00:26:31,090
the users as possible yesterday we had

00:26:27,580 --> 00:26:36,310
an excellent talk from the Freesat from

00:26:31,090 --> 00:26:41,130
the FSF about people switching away from

00:26:36,310 --> 00:26:44,800
linux on the desktop people don't care

00:26:41,130 --> 00:26:46,300
about what runs on their computers or I

00:26:44,800 --> 00:26:50,370
should say the vast majority of them

00:26:46,300 --> 00:26:52,870
don't care what they care about is

00:26:50,370 --> 00:26:58,450
getting done what they need to get done

00:26:52,870 --> 00:27:00,910
they care about doing their jobs and if

00:26:58,450 --> 00:27:03,790
we have security tools which prevent

00:27:00,910 --> 00:27:05,560
people from doing their jobs people will

00:27:03,790 --> 00:27:08,320
do everything they can to break those

00:27:05,560 --> 00:27:11,740
tools and I'm sure you've seen it before

00:27:08,320 --> 00:27:13,140
and and I see some people chuckling I

00:27:11,740 --> 00:27:15,820
appreciate that

00:27:13,140 --> 00:27:20,290
but this is a very real and serious

00:27:15,820 --> 00:27:23,380
thing that if we cannot provide security

00:27:20,290 --> 00:27:27,940
which actually delivers real security

00:27:23,380 --> 00:27:30,370
but at the same time if that the

00:27:27,940 --> 00:27:33,130
security delivery makes people's jobs

00:27:30,370 --> 00:27:37,810
more difficult then they're going to

00:27:33,130 --> 00:27:39,970
turn it off which is why I can't tell

00:27:37,810 --> 00:27:41,440
you how many times I have sat down and

00:27:39,970 --> 00:27:46,180
talked to people about the workings of

00:27:41,440 --> 00:27:50,260
SELinux in my past and the ubiquitous

00:27:46,180 --> 00:27:52,510
response to SELinux is why would we

00:27:50,260 --> 00:27:53,690
leave that on it's annoying and it gets

00:27:52,510 --> 00:27:58,909
in the way

00:27:53,690 --> 00:28:03,200
I got I got my first job managing

00:27:58,909 --> 00:28:05,690
systems because I was able to explain to

00:28:03,200 --> 00:28:08,360
them that SELinux was their problem in a

00:28:05,690 --> 00:28:10,190
job interview and they hadn't realized

00:28:08,360 --> 00:28:11,769
yet that they needed to that they needed

00:28:10,190 --> 00:28:14,059
to do something about it

00:28:11,769 --> 00:28:16,639
so again we need to make sure that the

00:28:14,059 --> 00:28:23,330
security tools that we build don't

00:28:16,639 --> 00:28:26,000
impede users and so that becomes the

00:28:23,330 --> 00:28:27,019
question what security what security

00:28:26,000 --> 00:28:31,370
models do we need for the next

00:28:27,019 --> 00:28:39,679
generation of systems and do they even

00:28:31,370 --> 00:28:44,539
exist ok I'm going to change gears now a

00:28:39,679 --> 00:28:46,909
little away from security since the

00:28:44,539 --> 00:28:52,700
security is boring anyway right nobody

00:28:46,909 --> 00:28:54,009
wants to do that it's tedious I don't

00:28:52,700 --> 00:29:01,690
want to talk to you a little bit about

00:28:54,009 --> 00:29:04,460
service service is a fairly new thing

00:29:01,690 --> 00:29:08,179
originally introduced or the concepts of

00:29:04,460 --> 00:29:10,159
service were originally introduced I

00:29:08,179 --> 00:29:13,809
should say originally modernly

00:29:10,159 --> 00:29:19,100
introduced by tool called Amazon lambda

00:29:13,809 --> 00:29:21,350
and the idea behind service is that you

00:29:19,100 --> 00:29:24,019
can put your application somewhere and

00:29:21,350 --> 00:29:26,360
you don't need to be aware of or care

00:29:24,019 --> 00:29:30,320
about the underlying operating system at

00:29:26,360 --> 00:29:33,620
all that the operating system logically

00:29:30,320 --> 00:29:36,289
becomes irrelevant to the person who is

00:29:33,620 --> 00:29:39,830
running their code the operating system

00:29:36,289 --> 00:29:41,750
of course is still relevant I actually

00:29:39,830 --> 00:29:46,129
was on a consulting call with a group

00:29:41,750 --> 00:29:48,110
that was trying to explain it to bring

00:29:46,129 --> 00:29:49,490
me on a consulting call so that I could

00:29:48,110 --> 00:29:52,309
explain to them that the operating

00:29:49,490 --> 00:29:55,220
system wasn't relevant anymore and that

00:29:52,309 --> 00:29:56,720
the operating system was dead and they

00:29:55,220 --> 00:29:59,740
they didn't like the fact that I

00:29:56,720 --> 00:29:59,740
disagreed with them

00:30:00,100 --> 00:30:05,300
please do not hire a consultant just

00:30:03,320 --> 00:30:08,480
because you want someone to agree with

00:30:05,300 --> 00:30:14,780
you that's not what the hiring

00:30:08,480 --> 00:30:16,130
consultants is for so the last thing I

00:30:14,780 --> 00:30:18,430
want to do in talking about serverless

00:30:16,130 --> 00:30:22,520
is make people think that I think that

00:30:18,430 --> 00:30:24,370
operating systems are irrelevant I think

00:30:22,520 --> 00:30:27,710
that operating systems are increasing

00:30:24,370 --> 00:30:31,190
increasingly relevant if for no other

00:30:27,710 --> 00:30:36,170
reason just the sheer fact that we need

00:30:31,190 --> 00:30:38,210
to install them on more stuff and that

00:30:36,170 --> 00:30:40,010
if there is a service infrastructure

00:30:38,210 --> 00:30:41,480
somebody has to take care of the

00:30:40,010 --> 00:30:49,280
operating systems which exist underneath

00:30:41,480 --> 00:30:51,920
it now so service this idea that we were

00:30:49,280 --> 00:30:55,900
able to just say put code out there I

00:30:51,920 --> 00:31:01,010
don't care it runs on just so long as

00:30:55,900 --> 00:31:02,840
Python is there or I almost said Perl

00:31:01,010 --> 00:31:05,920
but I've never known a service system to

00:31:02,840 --> 00:31:09,140
deploy Perl do any of them to play perl

00:31:05,920 --> 00:31:12,470
so just as long as the environment I

00:31:09,140 --> 00:31:14,270
need to execute code is there I make

00:31:12,470 --> 00:31:16,670
jokes about Perl but poor pearls a

00:31:14,270 --> 00:31:19,610
fantastic language and Perl 6 admittedly

00:31:16,670 --> 00:31:22,250
I think that it took him a long time but

00:31:19,610 --> 00:31:24,740
they've done a really nice job so if

00:31:22,250 --> 00:31:32,630
anybody likes Perl I don't it's not

00:31:24,740 --> 00:31:35,000
personal okay um

00:31:32,630 --> 00:31:36,170
Bank and server this conference has made

00:31:35,000 --> 00:31:40,430
a big server this conference that

00:31:36,170 --> 00:31:42,170
happened maybe a month ago they

00:31:40,430 --> 00:31:46,670
presented that there were three pillars

00:31:42,170 --> 00:31:49,280
of serverless and that those pillars are

00:31:46,670 --> 00:31:53,390
abstraction micro billing and the fact

00:31:49,280 --> 00:31:55,910
that it's event-driven now one of the

00:31:53,390 --> 00:31:59,240
things that I find extremely comical

00:31:55,910 --> 00:32:01,700
about this scenario is micro billing

00:31:59,240 --> 00:32:04,809
does anyone remember where micro billing

00:32:01,700 --> 00:32:07,240
comes from in computers

00:32:04,809 --> 00:32:10,230
going back in the history sorry it was

00:32:07,240 --> 00:32:13,329
somebody gonna say something mainframes

00:32:10,230 --> 00:32:13,329
[Music]

00:32:13,350 --> 00:32:18,129
I've heard people say a couple times

00:32:16,059 --> 00:32:20,590
that are a number of times that all you

00:32:18,129 --> 00:32:22,960
need to do to come up with a new startup

00:32:20,590 --> 00:32:25,629
and infrastructure is to pull out an old

00:32:22,960 --> 00:32:27,700
mainframe manual and to make one of

00:32:25,629 --> 00:32:33,460
those applications and try and sell it

00:32:27,700 --> 00:32:35,409
in all honesty a server list set up

00:32:33,460 --> 00:32:37,960
isn't too different from what we used to

00:32:35,409 --> 00:32:41,049
present to users as applications inside

00:32:37,960 --> 00:32:44,919
of mainframes where we would present to

00:32:41,049 --> 00:32:47,200
a user a jail and say here's a jail and

00:32:44,919 --> 00:32:51,340
you can run an application in that jail

00:32:47,200 --> 00:32:53,619
and I think this ties in too and I'm

00:32:51,340 --> 00:32:56,799
going to I never thought I'd say this

00:32:53,619 --> 00:33:01,539
until very recently I'm gonna have to

00:32:56,799 --> 00:33:03,249
argue that I think that mainframe sales

00:33:01,539 --> 00:33:08,470
are going to go up dramatically in the

00:33:03,249 --> 00:33:13,539
next five years I'm relieved to see many

00:33:08,470 --> 00:33:15,340
nodding heads a few rolling eyes and I

00:33:13,539 --> 00:33:19,450
think somebody in the back vomited I'm

00:33:15,340 --> 00:33:21,190
sorry about that how many times have we

00:33:19,450 --> 00:33:24,700
walked into organisations that have said

00:33:21,190 --> 00:33:26,529
we're going to deploy OpenStack and a

00:33:24,700 --> 00:33:28,929
year later they say well there there

00:33:26,529 --> 00:33:36,460
goes eight million dollars and we don't

00:33:28,929 --> 00:33:37,960
have OpenStack and how much easier would

00:33:36,460 --> 00:33:40,419
be for those people for those companies

00:33:37,960 --> 00:33:41,769
to say I'll just invest one hundred

00:33:40,419 --> 00:33:47,769
thousand dollars and get a mainframe

00:33:41,769 --> 00:33:49,389
that just is a cloud and I'm done so

00:33:47,769 --> 00:33:52,749
this is definitely something that's

00:33:49,389 --> 00:33:55,869
emerging but that sets enough about

00:33:52,749 --> 00:33:57,820
micro billing the abstraction of course

00:33:55,869 --> 00:34:01,059
we've already talked about that you need

00:33:57,820 --> 00:34:02,769
to make sure that the person writing the

00:34:01,059 --> 00:34:05,130
application doesn't need to care about

00:34:02,769 --> 00:34:10,320
the operating system

00:34:05,130 --> 00:34:13,320
now this has challenges for some strange

00:34:10,320 --> 00:34:17,250
reason especially a roomful of operating

00:34:13,320 --> 00:34:20,520
system people for some strange reason we

00:34:17,250 --> 00:34:23,810
built many wonderful tools into our

00:34:20,520 --> 00:34:28,980
operating systems like logging and

00:34:23,810 --> 00:34:35,720
networks and really fantastic file

00:34:28,980 --> 00:34:35,720
systems like riser F I mean butter FS

00:34:36,679 --> 00:34:42,720
and so to tell someone that they're

00:34:41,220 --> 00:34:45,149
going to be executing their code inside

00:34:42,720 --> 00:34:46,770
of a sandbox that doesn't care or have

00:34:45,149 --> 00:34:52,470
visibility into the operating system

00:34:46,770 --> 00:34:54,899
might sound somewhat offensive but at

00:34:52,470 --> 00:34:57,480
the same time it can definitely allow us

00:34:54,899 --> 00:34:58,830
to deploy applications faster and at the

00:34:57,480 --> 00:35:00,090
end of the day that's what that's what

00:34:58,830 --> 00:35:02,130
the people that's what the people

00:35:00,090 --> 00:35:04,609
writing the checks want is they want

00:35:02,130 --> 00:35:07,950
more applications delivered faster and

00:35:04,609 --> 00:35:13,890
more easily and if possible for less

00:35:07,950 --> 00:35:17,190
money if possible another statement that

00:35:13,890 --> 00:35:20,820
was made yesterday was the argument of

00:35:17,190 --> 00:35:25,760
maybe as open-source people we've spent

00:35:20,820 --> 00:35:31,560
too much time trying to argue the cost

00:35:25,760 --> 00:35:36,150
benefits of open source when when

00:35:31,560 --> 00:35:39,420
OpenStack came out there was a huge

00:35:36,150 --> 00:35:47,609
amount of market speculation that VMware

00:35:39,420 --> 00:35:51,780
was in deep trouble VMware stock has

00:35:47,609 --> 00:35:54,540
done just fine because if someone

00:35:51,780 --> 00:35:57,720
perceives that money can remove

00:35:54,540 --> 00:36:02,670
difficulty from their life quite frankly

00:35:57,720 --> 00:36:06,390
that's what money's for and they're

00:36:02,670 --> 00:36:09,840
happy to spend it the expenditure of

00:36:06,390 --> 00:36:12,540
money is often further down the list if

00:36:09,840 --> 00:36:18,020
they are able to give their teams more

00:36:12,540 --> 00:36:18,020
convenience and deliver more product

00:36:18,920 --> 00:36:23,850
so as much as I love the fact and I'm a

00:36:22,410 --> 00:36:27,240
big fan of course of the fact that

00:36:23,850 --> 00:36:30,860
open-source is free it is something that

00:36:27,240 --> 00:36:35,070
I do think that we need to consider okay

00:36:30,860 --> 00:36:36,930
the third pillar of surveillance is the

00:36:35,070 --> 00:36:42,420
one that we actually need to talk about

00:36:36,930 --> 00:36:45,000
and this is event-driven so what does it

00:36:42,420 --> 00:36:48,150
mean then for something to be

00:36:45,000 --> 00:36:51,030
event-driven in the service idea it's

00:36:48,150 --> 00:36:54,420
all about deploying a function basically

00:36:51,030 --> 00:36:56,040
is deploying an application and that

00:36:54,420 --> 00:36:58,860
application has a function which is

00:36:56,040 --> 00:36:59,730
going to be triggered when an event is

00:36:58,860 --> 00:37:04,920
fired

00:36:59,730 --> 00:37:07,680
whether that event is a change to data

00:37:04,920 --> 00:37:14,420
inside of a database or whether that

00:37:07,680 --> 00:37:18,540
event is someone hitting an API gateway

00:37:14,420 --> 00:37:20,400
so this is all fine and good and those

00:37:18,540 --> 00:37:29,580
events become important you have to have

00:37:20,400 --> 00:37:37,800
an event bus but do we need more than

00:37:29,580 --> 00:37:40,190
single event reactions and this is this

00:37:37,800 --> 00:37:42,810
is the part of this talk I know I'm

00:37:40,190 --> 00:37:46,710
almost 40 minutes in and I feel like I'm

00:37:42,810 --> 00:37:48,300
starting to get to the punchline this is

00:37:46,710 --> 00:37:53,280
the part of the talk that person thing

00:37:48,300 --> 00:37:57,840
I'm most interested in the serve the

00:37:53,280 --> 00:38:00,090
service paradigm is all about events but

00:37:57,840 --> 00:38:02,359
one of the first things and one of the

00:38:00,090 --> 00:38:07,980
biggest things I learned with salt is

00:38:02,359 --> 00:38:11,520
that you can only do so much with a

00:38:07,980 --> 00:38:15,180
single event reactor a reactor that

00:38:11,520 --> 00:38:21,180
waits for a specific event and reacts to

00:38:15,180 --> 00:38:25,820
it what we really need is to be able to

00:38:21,180 --> 00:38:28,820
deal with more than single event

00:38:25,820 --> 00:38:28,820
reactions

00:38:29,359 --> 00:38:39,300
and so even as we begin to see the

00:38:34,290 --> 00:38:41,280
emergence of this service concept I want

00:38:39,300 --> 00:38:45,420
to emphasize that the service concept

00:38:41,280 --> 00:38:48,720
really creates a dynamic distributed

00:38:45,420 --> 00:38:51,300
operating system an operating system

00:38:48,720 --> 00:38:54,330
that allows us to deploy code in a

00:38:51,300 --> 00:38:55,980
transparent and distributed way without

00:38:54,330 --> 00:38:58,290
needing to worry about the underlying

00:38:55,980 --> 00:39:02,670
mechanism of things like scheduling

00:38:58,290 --> 00:39:08,570
where that code runs which is you know

00:39:02,670 --> 00:39:12,240
kind of what an operating system does so

00:39:08,570 --> 00:39:15,390
in a distributed computing environment

00:39:12,240 --> 00:39:18,270
what do we need to do to main to take it

00:39:15,390 --> 00:39:19,650
further first what do we need to do on

00:39:18,270 --> 00:39:23,160
the application layer to make

00:39:19,650 --> 00:39:24,869
applications be aware of events so I'm

00:39:23,160 --> 00:39:28,340
going to argue that it is incredibly

00:39:24,869 --> 00:39:30,690
important that applications themselves

00:39:28,340 --> 00:39:32,520
need to be aware of the events that are

00:39:30,690 --> 00:39:35,580
being fired inside of distributed

00:39:32,520 --> 00:39:38,700
systems whether those events are

00:39:35,580 --> 00:39:45,300
monitoring events whether those events

00:39:38,700 --> 00:39:47,609
are triggers which are occurring outside

00:39:45,300 --> 00:39:49,230
of the application or whether those

00:39:47,609 --> 00:39:52,680
events are custom events with the app

00:39:49,230 --> 00:39:54,950
which the application is creating but

00:39:52,680 --> 00:39:57,150
that need to have the application

00:39:54,950 --> 00:40:00,660
interface with the event system I think

00:39:57,150 --> 00:40:02,820
is very very important and extremely

00:40:00,660 --> 00:40:08,369
enabling to the application developers

00:40:02,820 --> 00:40:11,640
and that it also delivers an event bus

00:40:08,369 --> 00:40:14,040
an event framework back to the

00:40:11,640 --> 00:40:15,270
application developer because another

00:40:14,040 --> 00:40:17,119
thing that's very important about

00:40:15,270 --> 00:40:19,560
operating system development is

00:40:17,119 --> 00:40:23,130
understanding that what we build in the

00:40:19,560 --> 00:40:27,150
operating system is built for the

00:40:23,130 --> 00:40:28,550
purpose of delivering software to an end

00:40:27,150 --> 00:40:32,160
user

00:40:28,550 --> 00:40:35,130
however competent said end user may be

00:40:32,160 --> 00:40:36,480
and often and we need to remember that

00:40:35,130 --> 00:40:39,330
the software that we're delivering to

00:40:36,480 --> 00:40:41,370
the end users those end users could be

00:40:39,330 --> 00:40:43,890
other software developers like us

00:40:41,370 --> 00:40:48,570
that is I would argue definitely Linux's

00:40:43,890 --> 00:40:52,340
strength is delivering and solutions to

00:40:48,570 --> 00:40:56,580
people like those who are building it

00:40:52,340 --> 00:40:59,550
which is why it's more popular in a data

00:40:56,580 --> 00:41:01,050
center than on a desktop despite the

00:40:59,550 --> 00:41:05,010
fact that I will argue that the Linux

00:41:01,050 --> 00:41:12,420
desktop is superior but whatever I might

00:41:05,010 --> 00:41:19,700
just be out to lunch on that one okay so

00:41:12,420 --> 00:41:25,140
I want to talk about autonomous

00:41:19,700 --> 00:41:26,820
event-driven software development so

00:41:25,140 --> 00:41:28,320
I've done a lot to lead up to this and

00:41:26,820 --> 00:41:29,990
I'm going to try and tie a lot of these

00:41:28,320 --> 00:41:34,370
concepts together

00:41:29,990 --> 00:41:42,390
what does autonomous event-driven

00:41:34,370 --> 00:41:46,650
software mean when we look at artificial

00:41:42,390 --> 00:41:47,850
intelligence the vast majority of what

00:41:46,650 --> 00:41:52,460
we're doing in artificial intelligence

00:41:47,850 --> 00:41:56,570
right now is advanced data analytics and

00:41:52,460 --> 00:42:04,140
advanced data management and searching

00:41:56,570 --> 00:42:05,340
and let's do with making decisions now

00:42:04,140 --> 00:42:07,770
we've gotten some really good examples

00:42:05,340 --> 00:42:10,920
of artificial intelligence systems which

00:42:07,770 --> 00:42:13,980
are decision-making systems autonomous

00:42:10,920 --> 00:42:15,780
cars is one of them but when we look at

00:42:13,980 --> 00:42:17,580
a lot of organizations around this

00:42:15,780 --> 00:42:22,290
really what they're trying to do is to

00:42:17,580 --> 00:42:26,160
say person X wants information about

00:42:22,290 --> 00:42:28,200
thing Y I will argue that a lot of use

00:42:26,160 --> 00:42:30,690
cases of artificial intelligence today

00:42:28,200 --> 00:42:34,740
is really us trying to make search

00:42:30,690 --> 00:42:40,580
engines suck less and be targeted to the

00:42:34,740 --> 00:42:47,390
users still but so what does it mean

00:42:40,580 --> 00:42:47,390
then to have autonomous systems

00:42:48,060 --> 00:42:56,339
the best example out there today I would

00:42:52,420 --> 00:43:04,240
say our robotics style systems like

00:42:56,339 --> 00:43:05,950
autonomous cars now I can neither

00:43:04,240 --> 00:43:10,510
confirm nor deny that I have ever done

00:43:05,950 --> 00:43:12,310
any work for the US Navy I did use to

00:43:10,510 --> 00:43:13,960
work for the US intelligence community

00:43:12,310 --> 00:43:17,560
it was way like it was it was in the

00:43:13,960 --> 00:43:19,329
past don't don't get after me I don't

00:43:17,560 --> 00:43:24,690
know I wasn't involved in actually

00:43:19,329 --> 00:43:24,690
deploying any systems that spied on you

00:43:26,490 --> 00:43:34,290
they never told me where they were

00:43:28,420 --> 00:43:39,250
putting the things I built anyway a

00:43:34,290 --> 00:43:43,420
project I am familiar with was an early

00:43:39,250 --> 00:43:45,910
autonomous submarine system and I

00:43:43,420 --> 00:43:51,869
learned a lot from this autonomous

00:43:45,910 --> 00:43:57,210
submarine system and what they had done

00:43:51,869 --> 00:44:02,200
was built a an early type of flow

00:43:57,210 --> 00:44:03,880
programming system now I I mentioned a

00:44:02,200 --> 00:44:10,260
little earlier that Microsoft just came

00:44:03,880 --> 00:44:12,670
out with a language called P which yeah

00:44:10,260 --> 00:44:14,440
sorry I'm just I just have a hard time

00:44:12,670 --> 00:44:17,500
with calling something anything just the

00:44:14,440 --> 00:44:21,490
letter P it doesn't denote a whole lot

00:44:17,500 --> 00:44:25,380
of confidence in me but anyway it's an

00:44:21,490 --> 00:44:27,940
event-driven programming language that

00:44:25,380 --> 00:44:30,609
ties very directly into a flow

00:44:27,940 --> 00:44:32,530
programming style and a lot of the

00:44:30,609 --> 00:44:34,300
emerging programming systems that we're

00:44:32,530 --> 00:44:37,690
seeing are using this flow programming

00:44:34,300 --> 00:44:41,079
style and inside of salt for instance

00:44:37,690 --> 00:44:45,780
the thorium salt reactor is a flow

00:44:41,079 --> 00:44:50,160
programming interface so

00:44:45,780 --> 00:44:51,930
a flow programming system means that all

00:44:50,160 --> 00:44:56,130
of the software that you are writing

00:44:51,930 --> 00:45:00,060
exists inside of a state machine and it

00:44:56,130 --> 00:45:02,970
means that based on events that are

00:45:00,060 --> 00:45:07,140
coming into the system your software

00:45:02,970 --> 00:45:08,880
changes state and then the states that

00:45:07,140 --> 00:45:12,060
your software changes into and out of

00:45:08,880 --> 00:45:15,800
have the ability to munge and change and

00:45:12,060 --> 00:45:15,800
manipulate the incoming data

00:45:15,830 --> 00:45:22,890
subsequently that model allows us to

00:45:19,050 --> 00:45:26,280
create decision engines engines which

00:45:22,890 --> 00:45:28,980
are very easy for us to put in what are

00:45:26,280 --> 00:45:32,970
the parameters and the thresholds before

00:45:28,980 --> 00:45:36,030
we make a particular decision again the

00:45:32,970 --> 00:45:38,760
salt thorium reactor is I think a decent

00:45:36,030 --> 00:45:41,430
example of this because it's able to do

00:45:38,760 --> 00:45:43,170
things like say as soon as the system

00:45:41,430 --> 00:45:45,330
has been offline for a certain amount of

00:45:43,170 --> 00:45:47,790
time I'm going to do something about

00:45:45,330 --> 00:45:53,690
that so that we're able to very easily

00:45:47,790 --> 00:45:57,570
build in passive non polling styles of

00:45:53,690 --> 00:45:59,640
decisions but also these sorts of

00:45:57,570 --> 00:46:04,310
engines are the types of things that

00:45:59,640 --> 00:46:07,230
make it very easy for us to say that

00:46:04,310 --> 00:46:10,710
we're going to make very specific action

00:46:07,230 --> 00:46:15,900
when we see that the disk IO weight is

00:46:10,710 --> 00:46:19,580
particularly high but more importantly

00:46:15,900 --> 00:46:22,820
these decisions can be passed further

00:46:19,580 --> 00:46:28,350
into aspects of an infrastructure like

00:46:22,820 --> 00:46:30,360
security and IOT cuu thought I was just

00:46:28,350 --> 00:46:34,610
wandering around like some madman for

00:46:30,360 --> 00:46:34,610
the past 40 minutes to do I had a point

00:46:35,300 --> 00:46:43,290
when we start to look at how to manage

00:46:38,930 --> 00:46:46,200
historic systems current systems and

00:46:43,290 --> 00:46:51,860
future systems the argument I am

00:46:46,200 --> 00:46:56,010
presenting is that we have to have

00:46:51,860 --> 00:46:58,940
event-driven models and that those

00:46:56,010 --> 00:47:03,570
event-driven models need to tie into

00:46:58,940 --> 00:47:05,370
autonomous automation and that that

00:47:03,570 --> 00:47:09,060
autonomous automation needs to be

00:47:05,370 --> 00:47:11,910
developed sufficiently to be able to

00:47:09,060 --> 00:47:16,440
hook into disparate systems

00:47:11,910 --> 00:47:20,220
it can't be narrow-minded lis tied to

00:47:16,440 --> 00:47:24,060
whatever the new thing is they have to

00:47:20,220 --> 00:47:28,020
be broad-based they have to be able to

00:47:24,060 --> 00:47:32,010
bridge these gaps because what happens

00:47:28,020 --> 00:47:34,020
on a cash register affects things which

00:47:32,010 --> 00:47:38,450
we are doing inside of an infrastructure

00:47:34,020 --> 00:47:41,190
and what happens on a security camera

00:47:38,450 --> 00:47:43,770
changes the alerts that need to be

00:47:41,190 --> 00:47:45,950
presented to humans about dealing with

00:47:43,770 --> 00:47:48,810
what's happening on that security camera

00:47:45,950 --> 00:47:56,340
and we can't bridge these gaps with

00:47:48,810 --> 00:48:02,160
using the models that we have that we

00:47:56,340 --> 00:48:05,370
have used in the past because so often

00:48:02,160 --> 00:48:07,680
we love to have tunnel vision and it's

00:48:05,370 --> 00:48:11,520
hard not to as so as a software

00:48:07,680 --> 00:48:13,470
developer your job is to figure out what

00:48:11,520 --> 00:48:17,340
it is that you're building focus on it

00:48:13,470 --> 00:48:19,770
and build it and if you have to consider

00:48:17,340 --> 00:48:21,660
the whole world around you I mean you

00:48:19,770 --> 00:48:24,180
you're many of you are probably aware

00:48:21,660 --> 00:48:26,280
and have gained sufficient wisdom in

00:48:24,180 --> 00:48:31,790
your lives to realize that that becomes

00:48:26,280 --> 00:48:34,790
a very impractical setup okay all right

00:48:31,790 --> 00:48:34,790
so

00:48:36,309 --> 00:48:43,490
using autonomous systems and autonomy

00:48:39,289 --> 00:48:47,299
and autonomous models I believe is how

00:48:43,490 --> 00:48:49,220
we get to that next level of accepting

00:48:47,299 --> 00:48:51,799
the fact that no we're not just going to

00:48:49,220 --> 00:48:54,950
throw away the past and that the past

00:48:51,799 --> 00:48:57,829
rears its head yet again because just

00:48:54,950 --> 00:48:59,119
because some guy lived in 1977 it

00:48:57,829 --> 00:49:03,289
doesn't mean that he didn't know what he

00:48:59,119 --> 00:49:05,809
was talking about at the time and that

00:49:03,289 --> 00:49:10,009
we need to keep an open mind to what is

00:49:05,809 --> 00:49:21,349
moving forward and what everything came

00:49:10,009 --> 00:49:25,279
from okay so why now the main work that

00:49:21,349 --> 00:49:29,240
I'm engaged dad in saltstack is around

00:49:25,279 --> 00:49:32,630
building autonomous systems which are

00:49:29,240 --> 00:49:34,549
able to interface across multiple topics

00:49:32,630 --> 00:49:38,170
and multiple aspects of an

00:49:34,549 --> 00:49:41,049
infrastructure that goes well beyond

00:49:38,170 --> 00:49:43,880
what somebody generally thinks of salt

00:49:41,049 --> 00:49:45,739
being and this is one of those messages

00:49:43,880 --> 00:49:49,039
that I that I generally have a hard time

00:49:45,739 --> 00:49:52,190
getting out see I built this thing

00:49:49,039 --> 00:49:55,609
called salt and everyone sees it as a

00:49:52,190 --> 00:49:59,239
configuration management system when I

00:49:55,609 --> 00:50:04,009
built salt the idea behind it was that I

00:49:59,239 --> 00:50:06,579
needed a high-speed executor to be able

00:50:04,009 --> 00:50:10,819
to execute arbitrary routines on

00:50:06,579 --> 00:50:16,670
distributed groups of systems so that I

00:50:10,819 --> 00:50:19,609
could make a decision engine in building

00:50:16,670 --> 00:50:24,319
those executors I realized that I wanted

00:50:19,609 --> 00:50:27,170
two kinds of executors one-off executors

00:50:24,319 --> 00:50:30,380
that allow you to do one-off routines

00:50:27,170 --> 00:50:34,670
and execute functions but also a need

00:50:30,380 --> 00:50:36,859
for item potent executors it just so

00:50:34,670 --> 00:50:40,690
happens that idempotent executors are

00:50:36,859 --> 00:50:40,690
also called configuration management

00:50:42,730 --> 00:50:50,050
so we ended up in this config management

00:50:45,340 --> 00:50:53,710
trench and are still very much so viewed

00:50:50,050 --> 00:50:57,210
to be in that arena and also I will

00:50:53,710 --> 00:50:59,440
admit it stalled us a great deal and

00:50:57,210 --> 00:51:02,890
redirected a lot of my original intent

00:50:59,440 --> 00:51:06,760
and so I'm very excited the fact that

00:51:02,890 --> 00:51:10,480
now we're finally getting back to taking

00:51:06,760 --> 00:51:16,600
the parts of salt that I am interested

00:51:10,480 --> 00:51:19,930
in outside of config alright I have to

00:51:16,600 --> 00:51:21,850
have to back up and at least come back

00:51:19,930 --> 00:51:24,460
and argue that salt still has the best

00:51:21,850 --> 00:51:28,119
config management system I'm really

00:51:24,460 --> 00:51:33,670
biased but I still definitely think it

00:51:28,119 --> 00:51:36,460
does now so what we're looking at is

00:51:33,670 --> 00:51:43,480
first that we build this thing called

00:51:36,460 --> 00:51:47,320
the thorium reactor okay and and the

00:51:43,480 --> 00:51:50,260
eventbus inside of salt and the ability

00:51:47,320 --> 00:51:54,280
to grab events from disparate systems

00:51:50,260 --> 00:51:59,109
and types of systems ingest those events

00:51:54,280 --> 00:52:01,900
and then react to them now using that

00:51:59,109 --> 00:52:05,290
system I've got people who have done all

00:52:01,900 --> 00:52:09,760
sorts of crazy things but most

00:52:05,290 --> 00:52:13,119
importantly it has been the backbone and

00:52:09,760 --> 00:52:18,810
research for figuring out how to glue

00:52:13,119 --> 00:52:21,040
together all of these disparate types of

00:52:18,810 --> 00:52:24,090
deployments and all of these disparate

00:52:21,040 --> 00:52:26,890
types of systems that need to be managed

00:52:24,090 --> 00:52:32,170
again whether those are sensors on an

00:52:26,890 --> 00:52:36,369
oil rig or whether those are slot

00:52:32,170 --> 00:52:40,170
machines or light bulbs or security

00:52:36,369 --> 00:52:42,360
systems in someone's apartment or home

00:52:40,170 --> 00:52:48,280
okay

00:52:42,360 --> 00:52:50,950
and so again that's the punchline in

00:52:48,280 --> 00:52:52,780
we've got the thorium reactor inside of

00:52:50,950 --> 00:52:54,580
salt that does some of the things that I

00:52:52,780 --> 00:52:57,880
was talking about that we're just

00:52:54,580 --> 00:53:00,280
beginning to crack that case but at the

00:52:57,880 --> 00:53:01,840
same time we've got a lot more along

00:53:00,280 --> 00:53:09,430
those lines that we are actively working

00:53:01,840 --> 00:53:13,090
on and I want to conclude a big thanks

00:53:09,430 --> 00:53:19,000
yet again to Sousa for not only putting

00:53:13,090 --> 00:53:20,050
up with hearing me talk yet again but

00:53:19,000 --> 00:53:25,840
also that they've been a wonderful

00:53:20,050 --> 00:53:29,920
support to the salt project and that I'm

00:53:25,840 --> 00:53:33,600
incredibly impressed by the value and

00:53:29,920 --> 00:53:41,920
the capabilities of the Sousa engineers

00:53:33,600 --> 00:53:44,940
so in a nutshell autonomous systems need

00:53:41,920 --> 00:53:50,800
to exist to tie together disparate

00:53:44,940 --> 00:53:52,390
deployments of devices we need to be

00:53:50,800 --> 00:53:55,540
able to build these systems in such a

00:53:52,390 --> 00:54:02,380
way that they take into consideration a

00:53:55,540 --> 00:54:04,090
broad set of use cases because we it's

00:54:02,380 --> 00:54:08,220
very important that we are honest with

00:54:04,090 --> 00:54:10,480
ourselves in recognizing the fact that

00:54:08,220 --> 00:54:13,000
infrastructure as well as systems

00:54:10,480 --> 00:54:15,250
deployments are becoming significantly

00:54:13,000 --> 00:54:18,910
more complicated than they were only a

00:54:15,250 --> 00:54:20,680
few years ago and also being honest with

00:54:18,910 --> 00:54:23,140
ourselves with respect to the diversity

00:54:20,680 --> 00:54:28,530
of deployments which exists out there

00:54:23,140 --> 00:54:37,620
and which need to be adequately managed

00:54:28,530 --> 00:54:39,510
all right so this is this is where again

00:54:37,620 --> 00:54:41,850
to trouble fortunately I'm just about

00:54:39,510 --> 00:54:46,290
out of time but does anyone have any

00:54:41,850 --> 00:54:54,570
questions comments arguments rebuttals

00:54:46,290 --> 00:54:56,910
or rotten fruit or vegetables or have I

00:54:54,570 --> 00:55:01,010
spoken so ridiculously and abstractly

00:54:56,910 --> 00:55:01,010
that you're all just thinking I'm mad

00:55:03,020 --> 00:55:08,910
okay I hope that you all have a good

00:55:05,760 --> 00:55:10,770
time today I'm really excited about some

00:55:08,910 --> 00:55:15,240
of the talks I won't endorse any in

00:55:10,770 --> 00:55:16,710
particular but I think I think that

00:55:15,240 --> 00:55:19,800
we've got a really a really fantastic

00:55:16,710 --> 00:55:23,420
day today at the conference and thank

00:55:19,800 --> 00:55:23,420
you again for letting me come and speak

00:55:29,019 --> 00:55:31,079
you

00:55:31,250 --> 00:55:33,310

YouTube URL: https://www.youtube.com/watch?v=VuwvvbWcT44


