Title: openSUSE Conference 2017 YaST: from the repository to the distributions
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1266-yast-from-the-repository-to-the-distributions

Continuous testing and delivery, the YaST way

In this talk we will briefly explore all the mechanisms and workflows used by the YaST developers in order to share as much code as possible between all the SUSE and openSUSE distributions, while ensuring the quality of all the different YaST modules.

Learn how Rake, unit tests, Github, Jenkins, Travis, OBS and even Docker are used to deliver the developer's work to the already released products (via maintenance updates), to the ones still to be released and to our rolling distribution Tumbleweed.



Ancor GonzÃ¡lez Sosa
Captions: 
	00:00:07,280 --> 00:00:13,679
so hello my name is hanker hi I'm part

00:00:11,010 --> 00:00:15,330
of the adjust development team and I

00:00:13,679 --> 00:00:19,500
would like to use the following 15

00:00:15,330 --> 00:00:22,529
minutes to explain you the or well give

00:00:19,500 --> 00:00:24,720
you a quick overview on the tooling we

00:00:22,529 --> 00:00:28,320
used to ensure a continuous delivery and

00:00:24,720 --> 00:00:30,869
continuous testing on on just so

00:00:28,320 --> 00:00:33,930
continued deliveries kind of a trendy

00:00:30,869 --> 00:00:36,450
topic in software industry the whole

00:00:33,930 --> 00:00:39,120
point of the idea is to deliver the new

00:00:36,450 --> 00:00:41,820
features and also bug fixes to your

00:00:39,120 --> 00:00:43,770
final users as fast as possible

00:00:41,820 --> 00:00:46,920
compared to when when the fitter is

00:00:43,770 --> 00:00:48,570
really written by the developer so as as

00:00:46,920 --> 00:00:50,879
soon as the developer writes unseen you

00:00:48,570 --> 00:00:55,230
have some mechanisms to ensure that this

00:00:50,879 --> 00:00:57,629
is safe and its reach your users as soon

00:00:55,230 --> 00:00:59,850
as possible that's actually a very

00:00:57,629 --> 00:01:02,609
familiar concept to free software

00:00:59,850 --> 00:01:05,850
because we usually have that mantra of

00:01:02,609 --> 00:01:09,689
release early release often so it's not

00:01:05,850 --> 00:01:11,790
new really for us and is especially true

00:01:09,689 --> 00:01:14,280
in the open Seussical project since we

00:01:11,790 --> 00:01:16,409
have a tumbleweed our rolling distro

00:01:14,280 --> 00:01:18,810
that I will say that a broad industry

00:01:16,409 --> 00:01:22,920
zone is actually a extreme example of

00:01:18,810 --> 00:01:26,549
continuous delivery so this is in our

00:01:22,920 --> 00:01:28,200
case the guest workflow so how so there

00:01:26,549 --> 00:01:31,409
is a just developer writing something

00:01:28,200 --> 00:01:34,110
that's how they averaged just developer

00:01:31,409 --> 00:01:36,509
looks like so he writes some software

00:01:34,110 --> 00:01:39,229
and then he sends that new source code

00:01:36,509 --> 00:01:41,790
to s off to a source code repository

00:01:39,229 --> 00:01:45,360
nowadays we are using it hub for that

00:01:41,790 --> 00:01:47,759
because it's the most popular repository

00:01:45,360 --> 00:01:49,860
or set of repositories for free software

00:01:47,759 --> 00:01:52,110
so everybody can find you there and can

00:01:49,860 --> 00:01:57,180
help you there everybody has an account

00:01:52,110 --> 00:01:59,340
so can open a pull request and once the

00:01:57,180 --> 00:02:01,619
source code is has passed some checks

00:01:59,340 --> 00:02:04,560
that we will see now it goes to our

00:02:01,619 --> 00:02:08,399
build service as you already know our

00:02:04,560 --> 00:02:11,280
bit service kind of takes source code as

00:02:08,399 --> 00:02:12,900
input and outputs binary software that

00:02:11,280 --> 00:02:16,890
our users can direct

00:02:12,900 --> 00:02:19,200
use maybe RPM packages in a repository

00:02:16,890 --> 00:02:23,459
or just the ISO images that they can

00:02:19,200 --> 00:02:27,569
install so let's take a look to every

00:02:23,459 --> 00:02:30,470
one of those steps or leaps so first

00:02:27,569 --> 00:02:33,450
from the developer computer to github as

00:02:30,470 --> 00:02:35,700
most projects on github we use a pull

00:02:33,450 --> 00:02:37,980
request model that means that every time

00:02:35,700 --> 00:02:40,769
a developer wants some software to be

00:02:37,980 --> 00:02:43,980
integrated he has to request that

00:02:40,769 --> 00:02:46,560
opening a so called would request and

00:02:43,980 --> 00:02:48,239
another member of the team has to take a

00:02:46,560 --> 00:02:52,109
look to the source code and have to

00:02:48,239 --> 00:02:54,690
approve that change data ensures first

00:02:52,109 --> 00:02:58,409
of all that every line of code is read

00:02:54,690 --> 00:03:01,310
at least by four eyes and but it's also

00:02:58,409 --> 00:03:04,200
a nice opportunity to discuss

00:03:01,310 --> 00:03:07,109
alternative ideas on how to do the same

00:03:04,200 --> 00:03:09,629
thing and it's usually the case that we

00:03:07,109 --> 00:03:11,280
overlook Sansom we are close to

00:03:09,629 --> 00:03:13,290
introduce the back because we just

00:03:11,280 --> 00:03:15,569
didn't realize about something other so

00:03:13,290 --> 00:03:18,060
it's good to have fresh eyes looking at

00:03:15,569 --> 00:03:19,799
the same thing and we take that

00:03:18,060 --> 00:03:23,280
opportunity to do also a lot of

00:03:19,799 --> 00:03:25,859
automated work so for example we run the

00:03:23,280 --> 00:03:29,909
unit test a unit studies unit test is

00:03:25,859 --> 00:03:32,579
basically automate the step that printed

00:03:29,909 --> 00:03:34,260
checks one of your components so every

00:03:32,579 --> 00:03:38,129
time you write the component you also

00:03:34,260 --> 00:03:41,699
write tests to verify the company is

00:03:38,129 --> 00:03:45,000
working that in theory protects you from

00:03:41,699 --> 00:03:47,489
breaking that component in the future of

00:03:45,000 --> 00:03:49,650
course the fact that all the all the

00:03:47,489 --> 00:03:51,329
pieces of a machine works doesn't imply

00:03:49,650 --> 00:03:53,940
that the whole matching were works as

00:03:51,329 --> 00:03:57,599
expected but it's already biggest set

00:03:53,940 --> 00:04:00,359
forward so we run all the unit tests

00:03:57,599 --> 00:04:02,549
automatically and we also do all other

00:04:00,359 --> 00:04:06,120
quality checks for example we check that

00:04:02,549 --> 00:04:08,579
every file has a license hitter that is

00:04:06,120 --> 00:04:10,530
a very important and really one always

00:04:08,579 --> 00:04:13,680
in software but especially in free

00:04:10,530 --> 00:04:15,510
software if you would know to know more

00:04:13,680 --> 00:04:18,000
if you want to know more about data

00:04:15,510 --> 00:04:21,599
tomorrow will be a presentation by cool

00:04:18,000 --> 00:04:24,599
about the automatic mechanism we having

00:04:21,599 --> 00:04:26,400
in openSUSE to verify licenses and is

00:04:24,599 --> 00:04:28,919
quite sis

00:04:26,400 --> 00:04:30,630
them so it is interesting I he will pull

00:04:28,919 --> 00:04:33,150
Oh will be presenting also with kiri and

00:04:30,630 --> 00:04:34,500
the openSUSE lawyer so check the

00:04:33,150 --> 00:04:37,169
schedule if you are interested on that

00:04:34,500 --> 00:04:38,940
but we also do since like a spell

00:04:37,169 --> 00:04:42,060
checking because we are most of us are

00:04:38,940 --> 00:04:44,070
not native English speakers and we check

00:04:42,060 --> 00:04:45,840
for the style to make sure everything

00:04:44,070 --> 00:04:48,720
looks the same no matter who wrote it

00:04:45,840 --> 00:04:51,449
and since like that so for all that

00:04:48,720 --> 00:04:55,050
automation we use Travis which is a

00:04:51,449 --> 00:04:57,389
service on top of that integrates very

00:04:55,050 --> 00:05:00,600
well with this pull request mechanisms

00:04:57,389 --> 00:05:02,220
that github has on one side and on the

00:05:00,600 --> 00:05:04,979
other side integrates very well with

00:05:02,220 --> 00:05:07,979
other services that provide added value

00:05:04,979 --> 00:05:11,910
and we also use many of those services

00:05:07,979 --> 00:05:15,270
like for example Cobras so with corporal

00:05:11,910 --> 00:05:17,280
we miss your which part of our source

00:05:15,270 --> 00:05:19,530
code is covered by the unit test and

00:05:17,280 --> 00:05:21,919
which is more important what part is not

00:05:19,530 --> 00:05:26,460
so that we need to write tests for that

00:05:21,919 --> 00:05:30,120
we use code climate that's service that

00:05:26,460 --> 00:05:33,470
a sports part of your source code that

00:05:30,120 --> 00:05:36,210
looks yeah suspicious that looks like

00:05:33,470 --> 00:05:38,340
more complex that there it should be so

00:05:36,210 --> 00:05:41,460
maybe you can refactor a little bit and

00:05:38,340 --> 00:05:44,960
improve it some of our repositories also

00:05:41,460 --> 00:05:47,400
use inch which measures the coverage of

00:05:44,960 --> 00:05:51,210
documentation so we know which part of

00:05:47,400 --> 00:05:53,729
our source code is really documented so

00:05:51,210 --> 00:05:55,889
it is quite interesting service and how

00:05:53,729 --> 00:05:58,620
we do it is probably even more

00:05:55,889 --> 00:06:00,900
interesting because how Travis works is

00:05:58,620 --> 00:06:03,000
every time some software gets merged

00:06:00,900 --> 00:06:05,250
into the branch of the repository it

00:06:03,000 --> 00:06:06,900
pops up every to a machine for you it

00:06:05,250 --> 00:06:09,960
puts your software in the virtual

00:06:06,900 --> 00:06:12,380
machine run all the tests report the

00:06:09,960 --> 00:06:16,349
result and then the virtual machine is

00:06:12,380 --> 00:06:19,560
done and it disappears and that's very

00:06:16,349 --> 00:06:21,090
convenient but the most problematic part

00:06:19,560 --> 00:06:24,449
for part is that built on machine is

00:06:21,090 --> 00:06:26,729
actually we want to base it and although

00:06:24,449 --> 00:06:29,400
we actually managed to make it work for

00:06:26,729 --> 00:06:32,699
some time to have all the just checks

00:06:29,400 --> 00:06:34,380
and and yaks compiled just compiling and

00:06:32,699 --> 00:06:37,139
working and all that only we want to

00:06:34,380 --> 00:06:39,360
just for this for the sake of testing it

00:06:37,139 --> 00:06:40,480
was quite hard to maintain so

00:06:39,360 --> 00:06:42,640
quite recently we

00:06:40,480 --> 00:06:46,450
change the approach and now we use

00:06:42,640 --> 00:06:48,310
docker so what we really do is inside

00:06:46,450 --> 00:06:51,070
that you want to match in where we run a

00:06:48,310 --> 00:06:53,620
docker container that contains all and

00:06:51,070 --> 00:06:56,620
openSUSE system so everything is running

00:06:53,620 --> 00:06:59,410
beautifully in a real openSUSE system so

00:06:56,620 --> 00:07:01,690
we can check the run checks that are

00:06:59,410 --> 00:07:04,570
closer to reality so if you are

00:07:01,690 --> 00:07:06,550
interested in the whole that dock your

00:07:04,570 --> 00:07:08,500
integration with Travis works for

00:07:06,550 --> 00:07:10,900
continuous integration you can tomorrow

00:07:08,500 --> 00:07:13,900
there's also a talk by Ladislav who is

00:07:10,900 --> 00:07:16,690
over there and I really don't know the

00:07:13,900 --> 00:07:18,880
title of the talk bots will be something

00:07:16,690 --> 00:07:21,490
like using docker for continuous

00:07:18,880 --> 00:07:24,610
integration and Travis yes yes check the

00:07:21,490 --> 00:07:27,040
schedules will be there so that's all we

00:07:24,610 --> 00:07:29,530
do to ensure that all the source code

00:07:27,040 --> 00:07:32,410
that enters the repositories in good

00:07:29,530 --> 00:07:34,150
save good save so next step as I said is

00:07:32,410 --> 00:07:38,290
going from there to the build service

00:07:34,150 --> 00:07:40,960
and for that with a different continuous

00:07:38,290 --> 00:07:43,360
integration system called Jenkins in

00:07:40,960 --> 00:07:45,340
this case is not a service because

00:07:43,360 --> 00:07:48,640
Travis is a service but Jenkins is a

00:07:45,340 --> 00:07:50,800
self hosted solution so we have Jenkins

00:07:48,640 --> 00:07:54,370
servers installed and controlled by us

00:07:50,800 --> 00:07:58,630
and actually we have two of them because

00:07:54,370 --> 00:08:00,130
we have to build services because we use

00:07:58,630 --> 00:08:02,470
the open to civil service that you will

00:08:00,130 --> 00:08:05,290
know but also Suzy has an internal one

00:08:02,470 --> 00:08:07,810
for creating our enterprise products

00:08:05,290 --> 00:08:09,510
that is exactly the same software and a

00:08:07,810 --> 00:08:12,880
same service but in a different server

00:08:09,510 --> 00:08:16,240
so both of them take or are always

00:08:12,880 --> 00:08:18,040
watching our github repo that's very

00:08:16,240 --> 00:08:20,520
important that it's the same github repo

00:08:18,040 --> 00:08:24,910
so the source code is exactly the same a

00:08:20,520 --> 00:08:27,630
yes is exactly the same code base in all

00:08:24,910 --> 00:08:32,800
Suzy products and in all openSUSE

00:08:27,630 --> 00:08:35,560
products or so it's only one source code

00:08:32,800 --> 00:08:38,440
repository but our two yanking instance

00:08:35,560 --> 00:08:40,780
just just for that so what it does is

00:08:38,440 --> 00:08:42,700
always watching what happens in the

00:08:40,780 --> 00:08:46,630
repository and if something new happens

00:08:42,700 --> 00:08:50,230
you send a commit it commits to our

00:08:46,630 --> 00:08:51,760
devil project on on OBS and from that

00:08:50,230 --> 00:08:53,340
devil project it creates a submit

00:08:51,760 --> 00:08:58,140
requests to factory out

00:08:53,340 --> 00:09:01,380
matically but since things can always go

00:08:58,140 --> 00:09:04,050
wrong we in addition have another check

00:09:01,380 --> 00:09:06,000
so every everyday we make sure that

00:09:04,050 --> 00:09:07,800
everything that is in the rep is already

00:09:06,000 --> 00:09:09,600
committed to our devil project and

00:09:07,800 --> 00:09:11,880
submitted to factory in case it's not

00:09:09,600 --> 00:09:14,340
just in case when you introduce the

00:09:11,880 --> 00:09:16,890
change in the repository obvious was

00:09:14,340 --> 00:09:20,630
down or yanking has a network prowling

00:09:16,890 --> 00:09:23,010
whatever so at least we ensure that a

00:09:20,630 --> 00:09:25,740
with the build service and the

00:09:23,010 --> 00:09:28,620
repository are in out-of-sync no more

00:09:25,740 --> 00:09:30,480
than 24 hours usually our completely

00:09:28,620 --> 00:09:33,630
unseen but at least no more than 24

00:09:30,480 --> 00:09:35,370
hours and in addition since we already

00:09:33,630 --> 00:09:38,160
have the toy running we already have

00:09:35,370 --> 00:09:40,800
Jenkins we use it for other tasks for

00:09:38,160 --> 00:09:45,150
example we run continuously Auto yes

00:09:40,800 --> 00:09:47,100
integration tests that are in to some

00:09:45,150 --> 00:09:49,560
extent kind of similar to the open here

00:09:47,100 --> 00:09:52,680
open QA most of you know so it's always

00:09:49,560 --> 00:09:55,230
running the very latest version of our

00:09:52,680 --> 00:09:57,660
packages and doing a whole installation

00:09:55,230 --> 00:09:59,910
with them and checking that the install

00:09:57,660 --> 00:10:02,550
system looks like it's old but instead

00:09:59,910 --> 00:10:04,260
of pretending to be a human clicking and

00:10:02,550 --> 00:10:09,990
moving it does with out ideas that

00:10:04,260 --> 00:10:14,310
images presented to Doc's a back so and

00:10:09,990 --> 00:10:17,010
in addition we also have a context we

00:10:14,310 --> 00:10:18,600
are continuing rigor in rebuilds of the

00:10:17,010 --> 00:10:21,570
docker image that we use in the previous

00:10:18,600 --> 00:10:26,160
step so we also ensure that that docker

00:10:21,570 --> 00:10:28,380
images are up-to-date so finally the

00:10:26,160 --> 00:10:32,130
source code or the older package were

00:10:28,380 --> 00:10:34,200
submitted to Factory I'm from from there

00:10:32,130 --> 00:10:36,600
on you already know the process quite a

00:10:34,200 --> 00:10:38,760
bit because actually we are having a lot

00:10:36,600 --> 00:10:41,160
of presentations and workshops and

00:10:38,760 --> 00:10:43,920
everything about the tumble with

00:10:41,160 --> 00:10:46,800
development model and open QA in this

00:10:43,920 --> 00:10:49,530
event so but the idea is that every

00:10:46,800 --> 00:10:53,490
submission that goes to factory have to

00:10:49,530 --> 00:10:56,400
pass through open QA if packages that

00:10:53,490 --> 00:10:58,590
are the that has or submission that have

00:10:56,400 --> 00:11:01,500
some chains of breaking things have

00:10:58,590 --> 00:11:03,720
actually a print aeration test that used

00:11:01,500 --> 00:11:05,490
always the case for just packages

00:11:03,720 --> 00:11:06,660
because we are kind of the usual

00:11:05,490 --> 00:11:08,190
suspects too

00:11:06,660 --> 00:11:10,829
racing's because we are the Installer

00:11:08,190 --> 00:11:12,690
after all so every change in gas is

00:11:10,829 --> 00:11:14,360
suspected to change somehow the

00:11:12,690 --> 00:11:17,959
installation process so is always

00:11:14,360 --> 00:11:20,430
dangerous for open QA to some extent so

00:11:17,959 --> 00:11:22,189
yeah but this viral actually we don't

00:11:20,430 --> 00:11:25,199
need to take care because we have the

00:11:22,189 --> 00:11:28,139
temple with maintainer so they always

00:11:25,199 --> 00:11:31,170
check our packages twice one for

00:11:28,139 --> 00:11:34,139
installation and when once they trust

00:11:31,170 --> 00:11:36,089
them they are they putting in the same

00:11:34,139 --> 00:11:39,750
mix that everything else so we test the

00:11:36,089 --> 00:11:42,149
full I saw with post integration test if

00:11:39,750 --> 00:11:44,399
everything is green you have a new

00:11:42,149 --> 00:11:48,959
version of gas in your repository and in

00:11:44,399 --> 00:11:51,569
your Isis so it's really quite Sun steps

00:11:48,959 --> 00:11:53,399
that but everything is automated

00:11:51,569 --> 00:11:55,680
everything everything is triggered by

00:11:53,399 --> 00:11:58,769
the previous one so it really is a

00:11:55,680 --> 00:12:00,449
cascade that takes not so much time so

00:11:58,769 --> 00:12:04,199
you always have the greater than latest

00:12:00,449 --> 00:12:06,420
and those was actually about continued

00:12:04,199 --> 00:12:08,189
delivery but I have said use the word

00:12:06,420 --> 00:12:10,500
test a lot of time during the

00:12:08,189 --> 00:12:12,899
presentation so this continuous delivery

00:12:10,500 --> 00:12:15,230
and continue setting are really kind of

00:12:12,899 --> 00:12:18,959
the same thing and this is kind of

00:12:15,230 --> 00:12:21,420
summary summary as light or for the

00:12:18,959 --> 00:12:23,639
times I have used the test word during

00:12:21,420 --> 00:12:25,620
the presentation the first one is a link

00:12:23,639 --> 00:12:27,540
where we explain from a more technical

00:12:25,620 --> 00:12:31,829
point of view how we develop all those

00:12:27,540 --> 00:12:33,180
tests and actually there's something new

00:12:31,829 --> 00:12:35,850
in the slide that is the last line

00:12:33,180 --> 00:12:38,009
because apart from all that we also have

00:12:35,850 --> 00:12:40,220
manual testing so they have a QA

00:12:38,009 --> 00:12:44,189
department and open SUSE they have a

00:12:40,220 --> 00:12:46,560
group of volunteers that test everything

00:12:44,189 --> 00:12:49,740
they coordinate themselves before every

00:12:46,560 --> 00:12:53,610
lip release to test that most things

00:12:49,740 --> 00:12:55,980
look saying and also all tumble with

00:12:53,610 --> 00:12:59,130
users are part of this effort they are

00:12:55,980 --> 00:13:02,339
reporting errors when they found it so

00:12:59,130 --> 00:13:04,889
the leap users can sleep quiet because

00:13:02,339 --> 00:13:07,529
most stumble with the users already

00:13:04,889 --> 00:13:11,220
found and make sure that the Arabs were

00:13:07,529 --> 00:13:14,759
fixed so that mainly all I wanted to say

00:13:11,220 --> 00:13:17,250
I had more slides about explaining how

00:13:14,759 --> 00:13:20,250
we use the same system not only for

00:13:17,250 --> 00:13:23,220
tumbleweed or mud also for the

00:13:20,250 --> 00:13:26,940
fix release lately and also for

00:13:23,220 --> 00:13:29,790
maintenance release so when a version is

00:13:26,940 --> 00:13:31,980
already out but some critical bug

00:13:29,790 --> 00:13:33,810
appears you also have to deliver a

00:13:31,980 --> 00:13:35,790
maintenance update and to fix the

00:13:33,810 --> 00:13:38,130
batting in all the supported versions

00:13:35,790 --> 00:13:40,320
and for that we also use a very similar

00:13:38,130 --> 00:13:43,920
mechanism and we also use Travis and we

00:13:40,320 --> 00:13:46,290
also use the Incans and so on but it was

00:13:43,920 --> 00:13:49,260
too much for 15 minutes so I'm now open

00:13:46,290 --> 00:13:51,840
to questions and of course you can just

00:13:49,260 --> 00:13:53,640
yes approach me at any point in the

00:13:51,840 --> 00:14:00,480
conference I will be around if you have

00:13:53,640 --> 00:14:04,260
anything to ask so it's now your turn so

00:14:00,480 --> 00:14:07,770
I have a question that goes exactly to

00:14:04,260 --> 00:14:10,770
that topic but there is - yes modules

00:14:07,770 --> 00:14:12,720
called just - CIO and just to s/390 that

00:14:10,770 --> 00:14:15,450
are not in factory at the moment but are

00:14:12,720 --> 00:14:18,240
in SUSE factory in the port's project

00:14:15,450 --> 00:14:24,420
net systems would we ask to get that

00:14:18,240 --> 00:14:26,970
into factory well atole just modules are

00:14:24,420 --> 00:14:29,250
not different from any other packet - to

00:14:26,970 --> 00:14:32,160
get the say accepted into factory it's

00:14:29,250 --> 00:14:34,050
it's more a matter of a so it does not

00:14:32,160 --> 00:14:37,590
need the process of testing and all that

00:14:34,050 --> 00:14:40,230
stuff also we will like you we will like

00:14:37,590 --> 00:14:43,740
any just module to use this whole

00:14:40,230 --> 00:14:45,300
process but is this is kind let's say

00:14:43,740 --> 00:14:47,940
the process of the gas team they're

00:14:45,300 --> 00:14:49,620
always modules that are not developed or

00:14:47,940 --> 00:14:53,430
maintained by the yes team they don't

00:14:49,620 --> 00:14:55,770
have to stick to our process because

00:14:53,430 --> 00:14:58,380
they are just random packages from

00:14:55,770 --> 00:15:00,810
factory we would like we will encourage

00:14:58,380 --> 00:15:02,820
you to just approach us and we will set

00:15:00,810 --> 00:15:04,800
up set up everything for you so you can

00:15:02,820 --> 00:15:06,630
athlete that it's actually two modules

00:15:04,800 --> 00:15:08,880
that are in the enterprise distribution

00:15:06,630 --> 00:15:12,150
available and they are obviously also

00:15:08,880 --> 00:15:15,890
then we will be more than happy to help

00:15:12,150 --> 00:15:15,890
you to set up the whole the whole system

00:15:20,710 --> 00:15:27,750
anything else time

00:15:31,400 --> 00:15:34,800
[Applause]

00:15:32,740 --> 00:15:34,800

YouTube URL: https://www.youtube.com/watch?v=pPxGXAIVMzE


