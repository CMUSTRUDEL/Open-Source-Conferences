Title: openSUSE Conference 2017 Rapido: quick kernel testing from source
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1416-rapido-quick-kernel-testing-from-source



Test kernel changes in a matter of seconds using Rapido - a glorified wrapper for Dracut and QEMU.

This talk will walk through the process of taking a kernel source repository and turning it into a testable VM.
For those who would like to play along on their own machine, please bring:
- a laptop with openSUSE Leap or Tumbleweed installed
- Kernel source (mainline master)
  - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
- Rapido source
  - https://github.com/ddiss/rapido.git

After covering a simple standalone test procedure, the walk-through will then move on to kernel testing alongside network accessible storage such as iSCSI, and also touch on some debugging techniques.



David Disseldorp
Captions: 
	00:00:07,970 --> 00:00:18,180
okay I guess I'll get started I hope

00:00:14,670 --> 00:00:20,570
okay in the room I'm David disel top

00:00:18,180 --> 00:00:26,130
from Souza and I'm here to speak about

00:00:20,570 --> 00:00:29,340
kernel testing yeah so just a quick

00:00:26,130 --> 00:00:33,150
background on this project it basically

00:00:29,340 --> 00:00:35,850
started as an itch to scratch so I was

00:00:33,150 --> 00:00:39,120
kind of frustrated with how how quickly

00:00:35,850 --> 00:00:42,150
I was or the pace of development I had

00:00:39,120 --> 00:00:45,630
with with kernel work and so I had a

00:00:42,150 --> 00:00:47,820
user space background I'm used to sort

00:00:45,630 --> 00:00:50,989
of you know typing make being able to

00:00:47,820 --> 00:00:54,899
immediately run whatever I'm working on

00:00:50,989 --> 00:00:56,670
in the kernel this turned out to be

00:00:54,899 --> 00:01:00,000
quite frustrating in that you know I

00:00:56,670 --> 00:01:04,350
would make changes copy it over to some

00:01:00,000 --> 00:01:07,710
Sun box or VM reboot the VM run my test

00:01:04,350 --> 00:01:09,390
code potentially run the same kernel on

00:01:07,710 --> 00:01:12,030
multiple boxes if I want to test

00:01:09,390 --> 00:01:15,180
something networked this was just sort

00:01:12,030 --> 00:01:18,960
of taking way too long I was just not

00:01:15,180 --> 00:01:23,400
happy with how productive I was in the

00:01:18,960 --> 00:01:25,310
kernel so with that or with that

00:01:23,400 --> 00:01:30,329
frustration I sort of looked around it

00:01:25,310 --> 00:01:34,140
what other people had done found that so

00:01:30,329 --> 00:01:38,280
qmu kbm does support booting directly

00:01:34,140 --> 00:01:41,340
from the kernel Bizet image you can give

00:01:38,280 --> 00:01:44,070
it an inner in it Ram FS image alongside

00:01:41,340 --> 00:01:48,060
that and it will then basically bypass

00:01:44,070 --> 00:01:49,979
the bootloader yeah run or just

00:01:48,060 --> 00:01:52,950
basically boot straight up to that that

00:01:49,979 --> 00:01:57,030
kernel so that looked promising this was

00:01:52,950 --> 00:02:00,829
a way to yeah have a much more immediate

00:01:57,030 --> 00:02:03,149
turn around in the the work I was doing

00:02:00,829 --> 00:02:06,950
they were still sort of the challenge of

00:02:03,149 --> 00:02:10,140
then generating this in a tram FS image

00:02:06,950 --> 00:02:11,820
and then things like networking from

00:02:10,140 --> 00:02:14,700
there so you know go on testing

00:02:11,820 --> 00:02:17,220
alongside other network components I

00:02:14,700 --> 00:02:21,709
want to be able to plumb them into the

00:02:17,220 --> 00:02:24,989
same virtual machine another handy

00:02:21,709 --> 00:02:27,569
utility with qmu is that you can just

00:02:24,989 --> 00:02:28,050
give it this no graphic parameter and

00:02:27,569 --> 00:02:30,750
then

00:02:28,050 --> 00:02:33,240
will basically redirect everything to

00:02:30,750 --> 00:02:34,950
the the console so basically where

00:02:33,240 --> 00:02:38,540
you're starting cream you KVM you'll

00:02:34,950 --> 00:02:44,460
then see everything that's output by the

00:02:38,540 --> 00:02:46,920
virtual machine serial console so the

00:02:44,460 --> 00:02:49,680
the challenge of in a tram FS generation

00:02:46,920 --> 00:02:52,590
and this is something I want to be able

00:02:49,680 --> 00:02:55,230
to do also very quickly I want to say

00:02:52,590 --> 00:02:59,790
okay this is what I need in my my test

00:02:55,230 --> 00:03:03,120
system this is where it is make me an

00:02:59,790 --> 00:03:06,440
init ram FS image with that this is

00:03:03,120 --> 00:03:09,600
already luckily they're done on

00:03:06,440 --> 00:03:12,750
basically all Linux systems in that we

00:03:09,600 --> 00:03:14,700
have this in a tram FS as something to

00:03:12,750 --> 00:03:17,190
bring the the root filesystem up while

00:03:14,700 --> 00:03:21,450
booting so we have this tool called

00:03:17,190 --> 00:03:26,480
drackett it's already there on open sue

00:03:21,450 --> 00:03:29,070
Sisley on many many other systems fedora

00:03:26,480 --> 00:03:31,440
it's it's quite flexible and that you

00:03:29,070 --> 00:03:33,810
can then just give it a list of binaries

00:03:31,440 --> 00:03:36,000
it will then work out what sort of

00:03:33,810 --> 00:03:38,040
library dependencies are there and pull

00:03:36,000 --> 00:03:41,580
everything in you can give it a list of

00:03:38,040 --> 00:03:45,030
kernel modules and you can also plumb

00:03:41,580 --> 00:03:47,880
into basically the the boot path and run

00:03:45,030 --> 00:03:51,120
your own code so there are a number of

00:03:47,880 --> 00:03:53,040
ways to do that you can basically right

00:03:51,120 --> 00:03:55,590
I think what's called an emergency

00:03:53,040 --> 00:03:57,720
module in that if you don't have a root

00:03:55,590 --> 00:04:01,790
filesystem for bring up then it jumps

00:03:57,720 --> 00:04:04,440
into this emergency module this is yeah

00:04:01,790 --> 00:04:10,980
everything I need basically on the inner

00:04:04,440 --> 00:04:14,760
m FS side so just looking at then or the

00:04:10,980 --> 00:04:17,459
a graphical representation of everything

00:04:14,760 --> 00:04:20,940
I need from from drackett I'm feeding in

00:04:17,459 --> 00:04:24,450
my binary dependencies for for testing

00:04:20,940 --> 00:04:27,030
so you know something like FS tests the

00:04:24,450 --> 00:04:30,270
X first test suite I have a whole heap

00:04:27,030 --> 00:04:32,010
of you know file system tools and

00:04:30,270 --> 00:04:34,800
utilities which are needed by this test

00:04:32,010 --> 00:04:38,040
suite so I have a list of dependencies

00:04:34,800 --> 00:04:39,690
for that I can pull in then the test

00:04:38,040 --> 00:04:41,490
suite itself so I can just point

00:04:39,690 --> 00:04:43,410
drackett edge at

00:04:41,490 --> 00:04:47,039
a specific directory and it will just

00:04:43,410 --> 00:04:52,169
copy that entire directory into the in a

00:04:47,039 --> 00:04:54,900
tram FS image I can then also pull in my

00:04:52,169 --> 00:04:57,690
kernel modules from my kernel source so

00:04:54,900 --> 00:04:59,400
basically in my case I've I've already

00:04:57,690 --> 00:05:02,039
built the ternal out at the kernel I

00:04:59,400 --> 00:05:04,800
want to test and I just tell Drake it's

00:05:02,039 --> 00:05:06,690
where those modules are installed it

00:05:04,800 --> 00:05:09,840
will go ahead and pull the kernel

00:05:06,690 --> 00:05:12,660
modules in and at the end I get this

00:05:09,840 --> 00:05:16,349
nifty little in a tram FS image which is

00:05:12,660 --> 00:05:19,590
normally you know 10 to 60 megabytes

00:05:16,349 --> 00:05:23,669
with with everything I need for testing

00:05:19,590 --> 00:05:28,289
I give Q mu the image itself and the

00:05:23,669 --> 00:05:32,400
kernel that's been built and it does all

00:05:28,289 --> 00:05:35,159
the magic and boots it so the next

00:05:32,400 --> 00:05:38,060
challenge was in networking this came

00:05:35,159 --> 00:05:41,639
about with SEF so I was looking at

00:05:38,060 --> 00:05:46,080
working on SEF router Spock device and

00:05:41,639 --> 00:05:48,990
CFS both of which are in kernel so here

00:05:46,080 --> 00:05:51,330
I have potentially a SEP cluster I'd

00:05:48,990 --> 00:05:54,270
like to to connect to from this this

00:05:51,330 --> 00:05:58,380
kernel so I can do that then just using

00:05:54,270 --> 00:06:00,599
a simple bridge setup in this case I was

00:05:58,380 --> 00:06:03,570
running the Ceph cluster or virtual safe

00:06:00,599 --> 00:06:05,969
cluster on my laptop already so I could

00:06:03,570 --> 00:06:09,840
just plumb those kernel virtual machines

00:06:05,969 --> 00:06:15,150
into my bridge and everything is good to

00:06:09,840 --> 00:06:18,090
go on the the other IP or network

00:06:15,150 --> 00:06:21,199
configuration side on the VMS there's

00:06:18,090 --> 00:06:24,330
also a handy little parameter which is

00:06:21,199 --> 00:06:28,110
normally used for booting from NFS root

00:06:24,330 --> 00:06:32,130
and which is this IP parameter and with

00:06:28,110 --> 00:06:35,880
that I can specify a static IP or ask or

00:06:32,130 --> 00:06:38,240
two to try DHCP at the boot time for the

00:06:35,880 --> 00:06:38,240
kernel

00:06:40,880 --> 00:06:46,860
so now on to to rapido basically I had

00:06:44,580 --> 00:06:48,419
just a whole collection of these dirties

00:06:46,860 --> 00:06:51,600
groups laying around which you know

00:06:48,419 --> 00:06:53,729
built certain images and booted or you

00:06:51,600 --> 00:06:55,949
know set up network in a certain way

00:06:53,729 --> 00:06:58,229
that I needed for testing I didn't

00:06:55,949 --> 00:07:00,360
thought okay there's all this may then

00:06:58,229 --> 00:07:03,120
potentially be be helpful for others so

00:07:00,360 --> 00:07:05,400
I might as well just wrap some scripts

00:07:03,120 --> 00:07:08,400
around it and put it into a repo

00:07:05,400 --> 00:07:12,210
somewhere so this is where rapido came

00:07:08,400 --> 00:07:15,050
about really it's just yeah very very

00:07:12,210 --> 00:07:19,830
much brain-dead rapper scripts around

00:07:15,050 --> 00:07:22,380
bracket and qnu we have what's called a

00:07:19,830 --> 00:07:24,750
cup script so that is is calling

00:07:22,380 --> 00:07:28,889
drackett with all the dependencies I

00:07:24,750 --> 00:07:33,630
need for for testing so basically for

00:07:28,889 --> 00:07:37,320
each each test target so say local file

00:07:33,630 --> 00:07:40,650
system testing or CFS testing SEF RBD I

00:07:37,320 --> 00:07:43,740
would have a separate cut script which

00:07:40,650 --> 00:07:45,810
then handles the image generation by

00:07:43,740 --> 00:07:48,330
Dracut

00:07:45,810 --> 00:07:51,090
there's the auto run script now this is

00:07:48,330 --> 00:07:54,560
a script that then is run when the

00:07:51,090 --> 00:07:57,450
virtual machine is booting so generally

00:07:54,560 --> 00:08:01,080
yeah as the other VM is coming up I want

00:07:57,450 --> 00:08:02,789
to jump straight into my test so I can

00:08:01,080 --> 00:08:06,000
potentially just plumb whatever I want

00:08:02,789 --> 00:08:09,720
in there for testing and I have just a

00:08:06,000 --> 00:08:16,680
simple VMs H which is yeah just calling

00:08:09,720 --> 00:08:21,620
to MU K VM for configuration I put

00:08:16,680 --> 00:08:24,479
everything into a global rapid icon file

00:08:21,620 --> 00:08:27,479
at a minimum all you need in there is is

00:08:24,479 --> 00:08:30,599
just to to define where your kernel

00:08:27,479 --> 00:08:35,789
sources pretty much everything else can

00:08:30,599 --> 00:08:38,810
be yeah derived from from that we do

00:08:35,789 --> 00:08:41,190
have or if you are bringing up a VM with

00:08:38,810 --> 00:08:44,610
requirement for network then there are

00:08:41,190 --> 00:08:47,670
some parameters for setting you know the

00:08:44,610 --> 00:08:50,880
static IP address you can do things like

00:08:47,670 --> 00:08:53,810
set up a DHCP server and and have the

00:08:50,880 --> 00:08:53,810
VMS boot from that

00:08:54,400 --> 00:08:59,920
they're also then within rapido a number

00:08:57,130 --> 00:09:03,100
of other you know just help us groups

00:08:59,920 --> 00:09:07,900
for setting up network provisioning RAM

00:09:03,100 --> 00:09:12,810
disks so compress frown disks and yeah

00:09:07,900 --> 00:09:12,810
with that I guess I'll move on to a demo

00:09:13,410 --> 00:09:18,370
so we've if anyone has their laptop

00:09:16,120 --> 00:09:22,470
around and they have a kernel source and

00:09:18,370 --> 00:09:22,470
feel free to sort of play along

00:09:23,410 --> 00:09:26,570
[Music]

00:09:29,060 --> 00:09:32,110
[Music]

00:09:33,720 --> 00:09:38,970
who's babe thank you great

00:09:42,840 --> 00:09:49,990
this should be good

00:09:45,330 --> 00:09:51,640
so here is my rapido source directory um

00:09:49,990 --> 00:09:53,980
you'll notice there are just a bunch of

00:09:51,640 --> 00:09:56,680
of cut scripts and a bunch of auto run

00:09:53,980 --> 00:09:59,310
scripts are basically then as mentioned

00:09:56,680 --> 00:10:02,230
earlier have a cut script for for each

00:09:59,310 --> 00:10:11,230
testable component or test target that I

00:10:02,230 --> 00:10:16,180
I wish to test over here in the other

00:10:11,230 --> 00:10:19,110
window I have just a regular kernel

00:10:16,180 --> 00:10:23,860
source tree and so at the moment I have

00:10:19,110 --> 00:10:26,980
kernel yeah for 11.1 checked out so from

00:10:23,860 --> 00:10:28,600
there I can just go ahead and build my

00:10:26,980 --> 00:10:31,720
kernel um

00:10:28,600 --> 00:10:34,570
I built it earlier so there's really

00:10:31,720 --> 00:10:39,850
nothing to do um I'll go ahead and and

00:10:34,570 --> 00:10:42,160
make install those modules so this is

00:10:39,850 --> 00:10:45,180
just installing your modules in a

00:10:42,160 --> 00:10:48,070
subdirectory under the kernel source and

00:10:45,180 --> 00:10:54,570
then I'll basically be pointing a

00:10:48,070 --> 00:11:00,640
bracket at that bar a tree so now onto

00:10:54,570 --> 00:11:04,390
rapido so for the first

00:11:00,640 --> 00:11:07,839
I just wanted to to run through local

00:11:04,390 --> 00:11:10,570
file system testing so for that I hope

00:11:07,839 --> 00:11:13,649
you're aware of the the FS tests or X

00:11:10,570 --> 00:11:17,620
fess tests test suite and that has

00:11:13,649 --> 00:11:20,140
hundreds of local file system path I'm

00:11:17,620 --> 00:11:25,149
really quite helpful for for stressing a

00:11:20,140 --> 00:11:34,420
kernel so with that I'll go ahead and

00:11:25,149 --> 00:11:37,600
create my image estás logo so that's

00:11:34,420 --> 00:11:43,089
that's the image generation component if

00:11:37,600 --> 00:11:50,950
we take a look at the script itself here

00:11:43,089 --> 00:11:56,470
we can see oh this is sorry on file cuts

00:11:50,950 --> 00:11:59,410
it stays local so here we can see all we

00:11:56,470 --> 00:12:02,529
have is basically a call to drackett the

00:11:59,410 --> 00:12:04,450
install parameter they're just lists all

00:12:02,529 --> 00:12:08,800
of the dependencies I have for this test

00:12:04,450 --> 00:12:11,230
or for this test suite I'm including the

00:12:08,800 --> 00:12:13,480
FS test source so I'm just dumping the

00:12:11,230 --> 00:12:14,940
entire source for FS tests into the

00:12:13,480 --> 00:12:19,300
image

00:12:14,940 --> 00:12:22,149
I'm also pulling in some kernel modules

00:12:19,300 --> 00:12:24,670
so there's ed RAM kernel modules and

00:12:22,149 --> 00:12:28,360
some DM modules and they're they're used

00:12:24,670 --> 00:12:30,790
for provisioning basically a compressed

00:12:28,360 --> 00:12:35,760
block device within the virtual machine

00:12:30,790 --> 00:12:38,709
and finally down the bottom here I have

00:12:35,760 --> 00:12:41,920
just some resource requirements for the

00:12:38,709 --> 00:12:44,699
VM so this basically says okay the the

00:12:41,920 --> 00:12:49,690
VM that I'm bringing up is network list

00:12:44,699 --> 00:12:53,560
and I'd like a VM with two virtual CPUs

00:12:49,690 --> 00:12:59,190
and and two geek memory so X first test

00:12:53,560 --> 00:13:05,829
is is quite some memory intense normally

00:12:59,190 --> 00:13:09,339
rapido just brings up 512 make VMs so

00:13:05,829 --> 00:13:12,760
with that I'll go ahead I hope people

00:13:09,339 --> 00:13:14,380
are timing sort of a boot time here but

00:13:12,760 --> 00:13:18,160
this is then just boot

00:13:14,380 --> 00:13:21,250
immediately from that that image and the

00:13:18,160 --> 00:13:24,520
kernel that I I just compiled and with

00:13:21,250 --> 00:13:28,290
that the VM comes up in in a matter of

00:13:24,520 --> 00:13:32,110
seconds you can see above that I've

00:13:28,290 --> 00:13:36,910
provisioned some block devices and done

00:13:32,110 --> 00:13:39,760
make FS XFS on that normally I would

00:13:36,910 --> 00:13:42,550
want it to immediately run my file

00:13:39,760 --> 00:13:44,380
system tests without switching to a

00:13:42,550 --> 00:13:47,260
prompt but just to show you that you can

00:13:44,380 --> 00:13:50,580
sort of muck around with your own VM

00:13:47,260 --> 00:13:54,490
once it's up we can then just jump into

00:13:50,580 --> 00:13:57,670
if it's test directory I already have

00:13:54,490 --> 00:14:01,990
the test target file systems mounted so

00:13:57,670 --> 00:14:06,820
I can just go ahead and just run check

00:14:01,990 --> 00:14:09,670
OOP just run the auto group so this is

00:14:06,820 --> 00:14:11,800
in just starting the test suite now so

00:14:09,670 --> 00:14:17,260
that's running on the the kernel which

00:14:11,800 --> 00:14:19,600
was just just compiled um yeah basically

00:14:17,260 --> 00:14:22,000
the turnaround is sort of a matter of

00:14:19,600 --> 00:14:27,550
seconds going from this compiled kernel

00:14:22,000 --> 00:14:33,550
into the running test suite so I can

00:14:27,550 --> 00:14:35,560
just in that shutdown the VM and armed

00:14:33,550 --> 00:14:37,600
with that now I wanted to show you oh

00:14:35,560 --> 00:14:43,870
actually are there any questions at this

00:14:37,600 --> 00:14:46,480
stage otherwise we'll move on to sort of

00:14:43,870 --> 00:14:48,670
a little more advanced test in that I'd

00:14:46,480 --> 00:14:51,460
like to test now the the Sif's kernel

00:14:48,670 --> 00:14:55,240
module and for the sits kernel module I

00:14:51,460 --> 00:14:57,250
need in an SMB server in my case I'd

00:14:55,240 --> 00:15:02,880
like to test against against windows in

00:14:57,250 --> 00:15:02,880
this case so I'll bring up my SMB server

00:15:09,200 --> 00:15:19,850
so they can find my mouth helps if I

00:15:16,800 --> 00:15:28,200
bring up the network first so down here

00:15:19,850 --> 00:15:32,810
I'll just run the BR setup script and

00:15:28,200 --> 00:15:35,760
what that then does is creates these two

00:15:32,810 --> 00:15:40,260
tap devices or virtual devices down

00:15:35,760 --> 00:15:42,330
there and a br0 bridge device and the

00:15:40,260 --> 00:15:47,280
vmm that I'm starting is just plumbed

00:15:42,330 --> 00:15:52,260
into this bridge yeah so will that VM

00:15:47,280 --> 00:15:55,860
boots we can take another look at just

00:15:52,260 --> 00:15:57,360
the regular rapido configuration file I

00:15:55,860 --> 00:16:01,530
didn't really go through that earlier

00:15:57,360 --> 00:16:04,590
but here we have at the top the two most

00:16:01,530 --> 00:16:07,040
important parameters which is just

00:16:04,590 --> 00:16:10,950
pointing rapido at your kernel source

00:16:07,040 --> 00:16:15,000
directory after that we have just the

00:16:10,950 --> 00:16:18,060
regular network settings which are

00:16:15,000 --> 00:16:24,330
needed if your VM is coming up on the

00:16:18,060 --> 00:16:29,430
network we have there more so MAC

00:16:24,330 --> 00:16:31,320
address IP address for each VM we surf

00:16:29,430 --> 00:16:33,780
we have a separate section for safe

00:16:31,320 --> 00:16:39,270
configuration in this case I'm running

00:16:33,780 --> 00:16:42,750
against a an SMB server so I'm using the

00:16:39,270 --> 00:16:46,260
sips kernel client to mount a share on

00:16:42,750 --> 00:16:49,170
that SMB server so here you'll see that

00:16:46,260 --> 00:16:58,110
I have just the credentials to to

00:16:49,170 --> 00:17:00,690
basically connect to that SMB share also

00:16:58,110 --> 00:17:06,470
the question was do I use or what do I

00:17:00,690 --> 00:17:08,850
use to store the test results so that

00:17:06,470 --> 00:17:10,680
for accessing the test results are a

00:17:08,850 --> 00:17:14,490
couple of options normally I just pass

00:17:10,680 --> 00:17:17,069
the output of the zero console but

00:17:14,490 --> 00:17:19,740
another option is to if you do want to

00:17:17,069 --> 00:17:21,750
persistent storage to store say logs or

00:17:19,740 --> 00:17:22,680
test results they normally I just

00:17:21,750 --> 00:17:26,190
connect

00:17:22,680 --> 00:17:29,610
a file or RAM disk to the virtual

00:17:26,190 --> 00:17:31,860
machine as it's coming up so just and

00:17:29,610 --> 00:17:46,710
then just use that for for storage on

00:17:31,860 --> 00:17:49,500
the VM itself yes that's another option

00:17:46,710 --> 00:17:52,440
you could use NFS or SCP whatever you

00:17:49,500 --> 00:17:56,520
you'd like to get the results of all the

00:17:52,440 --> 00:17:59,250
test results or logs off the VM yeah

00:17:56,520 --> 00:18:02,720
with that I'll bring up the kernel

00:17:59,250 --> 00:18:10,380
client member so I can just go ahead and

00:18:02,720 --> 00:18:14,420
home cut a Vista sips so this is then

00:18:10,380 --> 00:18:17,430
just generating and another image with

00:18:14,420 --> 00:18:22,580
all of the requirements or dependencies

00:18:17,430 --> 00:18:26,640
for sips testing I'll go ahead and boot

00:18:22,580 --> 00:18:29,820
and so on boots this will then mount the

00:18:26,640 --> 00:18:33,390
SMB server on the windows the M that I

00:18:29,820 --> 00:18:35,130
just brought up so it takes a little

00:18:33,390 --> 00:18:38,000
longer hearing that it brings up the

00:18:35,130 --> 00:18:43,170
network while the VM is booting so it's

00:18:38,000 --> 00:18:47,460
three seconds instead of one second but

00:18:43,170 --> 00:18:51,500
here we can see good it's it's performed

00:18:47,460 --> 00:18:56,060
amount of the city share there we have

00:18:51,500 --> 00:18:59,460
yeah the directory up it looks good

00:18:56,060 --> 00:19:01,380
we've course have an IP address within

00:18:59,460 --> 00:19:03,570
the VM so this is just showing the

00:19:01,380 --> 00:19:06,960
network setup there it's been assigned a

00:19:03,570 --> 00:19:12,020
static IP using this IP parameter for

00:19:06,960 --> 00:19:20,790
the kernel and what I wanted to do was

00:19:12,020 --> 00:19:24,570
run a test that I prepared earlier just

00:19:20,790 --> 00:19:28,650
bring up my notes so I have a test which

00:19:24,570 --> 00:19:31,320
calls a specific I octal in the six

00:19:28,650 --> 00:19:34,430
kernel module and this is an I October

00:19:31,320 --> 00:19:37,000
of M requests as a list of snapshots

00:19:34,430 --> 00:19:41,800
available on the SMB

00:19:37,000 --> 00:19:45,430
and so if I go ahead you see this IAP

00:19:41,800 --> 00:19:47,190
door and so the the test code I have is

00:19:45,430 --> 00:19:49,360
just in the efforts test sauce

00:19:47,190 --> 00:19:54,670
I'm just running that against the

00:19:49,360 --> 00:19:57,760
directory in the SMB share and okay

00:19:54,670 --> 00:20:01,870
we've hit here at a panic so this is a

00:19:57,760 --> 00:20:04,570
bug which I ran into while while testing

00:20:01,870 --> 00:20:08,140
with with rapido and we can see that

00:20:04,570 --> 00:20:10,720
we've hit a kernel panic in the do VF si

00:20:08,140 --> 00:20:16,150
octal kernel path so basically this ifs

00:20:10,720 --> 00:20:19,030
I octal path and so let's now now look

00:20:16,150 --> 00:20:21,670
at how we'd like to address that bug and

00:20:19,030 --> 00:20:38,220
so for starters we can just go ahead and

00:20:21,670 --> 00:20:38,220
fill this VM so the the fix for this

00:20:39,690 --> 00:20:48,190
Thanks so we take a look just in the I

00:20:45,490 --> 00:20:52,710
just had a regular vanilla kernel source

00:20:48,190 --> 00:20:52,710
here if I take a look

00:20:59,040 --> 00:21:11,790
at the log there we should have so we

00:21:09,390 --> 00:21:13,940
have in here i i've already pushed

00:21:11,790 --> 00:21:18,080
upstream the fix for this

00:21:13,940 --> 00:21:22,590
so these fix enumerate snapshots oops

00:21:18,080 --> 00:21:24,299
so let's now consider that it's unfixed

00:21:22,590 --> 00:21:28,350
and we'd like to test or play around

00:21:24,299 --> 00:21:32,220
with fixing this so what I'll do is just

00:21:28,350 --> 00:21:38,940
on my local branch here just cherry-pick

00:21:32,220 --> 00:21:41,040
that fix so we've applied the fix now

00:21:38,940 --> 00:21:46,320
obviously I want to text test that that

00:21:41,040 --> 00:21:49,350
fix works so I'll go ahead build my

00:21:46,320 --> 00:21:51,950
kernel and there's a very very little

00:21:49,350 --> 00:22:00,120
change to the kernel so it should be

00:21:51,950 --> 00:22:02,850
relatively quick to build hold on

00:22:00,120 --> 00:22:05,640
and now I just need to install those

00:22:02,850 --> 00:22:09,540
modules again and so this is module is

00:22:05,640 --> 00:22:16,890
built separately with that we can go

00:22:09,540 --> 00:22:24,600
ahead and create our in a tram FS and

00:22:16,890 --> 00:22:26,940
boot the VM I hope someone's timing now

00:22:24,600 --> 00:22:31,440
because this is going from basically a

00:22:26,940 --> 00:22:34,830
broken kernel applying a fix rebuilding

00:22:31,440 --> 00:22:44,250
the kernel and then testing the fix and

00:22:34,830 --> 00:22:46,080
I'll just run that test again and you

00:22:44,250 --> 00:22:49,740
can see I've run exactly the same test

00:22:46,080 --> 00:22:52,410
so this FS test shot against the

00:22:49,740 --> 00:22:55,490
directory in the SMB share and this time

00:22:52,410 --> 00:22:58,980
we've just had a failed enum response

00:22:55,490 --> 00:23:00,870
back from or back to user space so the

00:22:58,980 --> 00:23:04,140
panic is no longer there the kernels fix

00:23:00,870 --> 00:23:09,690
we can then be relatively confident in

00:23:04,140 --> 00:23:11,100
in the change that we've made yeah so

00:23:09,690 --> 00:23:12,620
that's that's the end of the demo I

00:23:11,100 --> 00:23:16,330
guess I'll

00:23:12,620 --> 00:23:16,330
move back onto the slides

00:23:24,999 --> 00:23:33,249
I have five minutes so we'll weave

00:23:27,789 --> 00:23:35,349
through the the rest of it um so so as

00:23:33,249 --> 00:23:38,109
you saw in the rapido source directory I

00:23:35,349 --> 00:23:40,239
had yeah a bunch of scripts for testing

00:23:38,109 --> 00:23:43,259
different kernel components so basically

00:23:40,239 --> 00:23:45,789
if you take a look yourself you'll find

00:23:43,259 --> 00:23:48,279
hopefully something that sort of matches

00:23:45,789 --> 00:23:51,279
what you're looking at testing just feel

00:23:48,279 --> 00:23:52,749
free to adapt them as you need them if

00:23:51,279 --> 00:23:55,539
you want to test a new kernel component

00:23:52,749 --> 00:23:58,029
then please just make the changes and

00:23:55,539 --> 00:24:02,469
push them back into or submit a request

00:23:58,029 --> 00:24:04,809
to my repo there are some tests or test

00:24:02,469 --> 00:24:06,489
cases therefore as mentioned local

00:24:04,809 --> 00:24:10,449
filesystem Sif's

00:24:06,489 --> 00:24:14,169
set FSF RBD there's some or there are

00:24:10,449 --> 00:24:17,169
some Alejo tests Johannes turn Singh

00:24:14,169 --> 00:24:22,749
from from Zeus elapsed at at the nvme

00:24:17,169 --> 00:24:25,719
over fabrics test functionality some

00:24:22,749 --> 00:24:28,569
future challenges so yeah some things I

00:24:25,719 --> 00:24:32,319
sort of like to have in in rapido would

00:24:28,569 --> 00:24:37,529
be cross distro support so someone's

00:24:32,319 --> 00:24:40,089
worked on running this within Debian and

00:24:37,529 --> 00:24:42,609
yeah there are some issues which you run

00:24:40,089 --> 00:24:45,699
into otherwise it's mostly working so

00:24:42,609 --> 00:24:48,909
I'd like to to fix the issues found

00:24:45,699 --> 00:24:51,609
there some more test targets so as

00:24:48,909 --> 00:24:55,329
mentioned please submit anything you'd

00:24:51,609 --> 00:24:57,459
like to test there's some integration

00:24:55,329 --> 00:24:59,649
with CI would also be good in that any

00:24:57,459 --> 00:25:02,859
kernel changes we test potentially

00:24:59,649 --> 00:25:06,269
within openSUSE or souza we run that

00:25:02,859 --> 00:25:10,449
quickly through some sort of CI utility

00:25:06,269 --> 00:25:12,819
but otherwise I think in its current

00:25:10,449 --> 00:25:15,399
state it is it is usable that allows you

00:25:12,819 --> 00:25:19,109
to quickly and effectively test kernel

00:25:15,399 --> 00:25:22,449
changes wrap it all itself is basically

00:25:19,109 --> 00:25:25,389
very little it's it's all based on Q mu

00:25:22,449 --> 00:25:27,219
and racket and things which are already

00:25:25,389 --> 00:25:30,609
present or hopefully present on your

00:25:27,219 --> 00:25:33,039
system so just go ahead and jump into

00:25:30,609 --> 00:25:35,499
kernel development it's sort of nothing

00:25:33,039 --> 00:25:38,079
to be scared of you really can just play

00:25:35,499 --> 00:25:38,710
around with your own sand pits and and

00:25:38,079 --> 00:25:42,010
Bray

00:25:38,710 --> 00:25:45,340
breaking over ends this allows you to

00:25:42,010 --> 00:25:47,980
test those changes very easily so with

00:25:45,340 --> 00:26:02,650
that I guess that's it

00:25:47,980 --> 00:26:05,650
any questions so question is whether it

00:26:02,650 --> 00:26:07,990
publishes or generates a test results

00:26:05,650 --> 00:26:08,650
the test results themselves or at this

00:26:07,990 --> 00:26:11,320
stage

00:26:08,650 --> 00:26:13,540
everything is just dumped to the serial

00:26:11,320 --> 00:26:17,740
console so as I mentioned earlier you

00:26:13,540 --> 00:26:20,530
could mount an NFS share you could just

00:26:17,740 --> 00:26:22,660
write it into a ram disk connected to

00:26:20,530 --> 00:26:25,500
the VM there are a number of options but

00:26:22,660 --> 00:26:28,020
it doesn't sort of get in the way or

00:26:25,500 --> 00:26:40,660
handle any of that at this stage

00:26:28,020 --> 00:26:42,250
Richard yep good okay two questions have

00:26:40,660 --> 00:26:47,650
you tried this with any sort of bigger

00:26:42,250 --> 00:26:50,290
kernel test Suites like the LTP no I

00:26:47,650 --> 00:26:54,820
haven't I've tested it with FS test

00:26:50,290 --> 00:26:58,720
which is in itself pretty huge there are

00:26:54,820 --> 00:27:01,120
still some yeah what what appear to be

00:26:58,720 --> 00:27:03,510
potentially some environment issues with

00:27:01,120 --> 00:27:08,020
a post test so there are hundreds of

00:27:03,510 --> 00:27:11,800
tests there which you need to be sort of

00:27:08,020 --> 00:27:14,260
evaluated no I haven't tested LTE or and

00:27:11,800 --> 00:27:15,790
and so my second question it's also kind

00:27:14,260 --> 00:27:18,130
of a follow-up to his have you thought

00:27:15,790 --> 00:27:20,800
about integrating this with something

00:27:18,130 --> 00:27:23,590
like open QA e to handle like the

00:27:20,800 --> 00:27:26,020
publishing of the results side of things

00:27:23,590 --> 00:27:28,960
integration with open QA I think there's

00:27:26,020 --> 00:27:32,170
there's a lot of overlap in what open QA

00:27:28,960 --> 00:27:39,610
already does it's more at least as I see

00:27:32,170 --> 00:27:41,560
it it's more UI oriented okay I think

00:27:39,610 --> 00:27:43,540
that's actually a different scope

00:27:41,560 --> 00:27:45,730
because this is for a quick testing if

00:27:43,540 --> 00:27:47,410
your newly developed kernel feature is

00:27:45,730 --> 00:27:51,340
actually working if there's a direct

00:27:47,410 --> 00:27:52,570
regression LTP runs so long that booting

00:27:51,340 --> 00:27:54,880
the machine is not a problem

00:27:52,570 --> 00:27:56,440
but if you're doing a quick by section

00:27:54,880 --> 00:27:58,870
or something about are you really

00:27:56,440 --> 00:28:00,880
installing the kernel booting waiting

00:27:58,870 --> 00:28:02,680
until you through the BIOS or with a big

00:28:00,880 --> 00:28:03,130
server until it has counted its memory

00:28:02,680 --> 00:28:04,630
and stuff

00:28:03,130 --> 00:28:07,090
this makes really a difference and I

00:28:04,630 --> 00:28:09,010
would say this is also aimed at longer

00:28:07,090 --> 00:28:10,750
running tests so we do actually use so

00:28:09,010 --> 00:28:13,180
within the storage team at Sousa we do

00:28:10,750 --> 00:28:16,840
use it for longer running regression

00:28:13,180 --> 00:28:18,790
tests okay it's an option it's just you

00:28:16,840 --> 00:28:21,950
can use it how you want to use it okay

00:28:18,790 --> 00:28:21,950
[Music]

00:28:25,140 --> 00:28:29,980
so you know we're running open QA with

00:28:27,790 --> 00:28:32,080
LTP and there we're not running like the

00:28:29,980 --> 00:28:33,700
really long LTP we're splitting it up

00:28:32,080 --> 00:28:36,070
into many many chunks and divert

00:28:33,700 --> 00:28:39,880
diverging it all over open QA in that

00:28:36,070 --> 00:28:41,680
case the boot time and all the VMS it's

00:28:39,880 --> 00:28:43,030
meaningless nonsense really that we do

00:28:41,680 --> 00:28:45,490
just because that's how open queuing

00:28:43,030 --> 00:28:47,230
normally does it most of your solution

00:28:45,490 --> 00:28:49,000
here it's actually really well aligned

00:28:47,230 --> 00:28:52,000
with everything we do in open QA so I

00:28:49,000 --> 00:28:53,590
can like see the possibility of Mania

00:28:52,000 --> 00:29:02,830
mangling the two together in some ways

00:28:53,590 --> 00:29:07,420
possibly are your planning support for

00:29:02,830 --> 00:29:11,430
other architectures at this stage so

00:29:07,420 --> 00:29:14,980
someone tested it on I think was is 390

00:29:11,430 --> 00:29:17,920
there are some issues so yes I would I

00:29:14,980 --> 00:29:20,470
would like to get it to a point where it

00:29:17,920 --> 00:29:22,420
can be run on arm or Ezra not only

00:29:20,470 --> 00:29:24,180
whatever other architectures rather and

00:29:22,420 --> 00:29:29,200
the same question to cross-compilation

00:29:24,180 --> 00:29:31,420
enviroments this a compilation is mostly

00:29:29,200 --> 00:29:34,270
at least for now it's not the job of

00:29:31,420 --> 00:29:39,450
rapido rapido just handles in each

00:29:34,270 --> 00:29:41,560
generation and yeah breeding the VM so

00:29:39,450 --> 00:29:43,870
I'd like to sort of steer clear of

00:29:41,560 --> 00:29:46,210
anything that sub involves compiling

00:29:43,870 --> 00:29:48,790
tools or utilities and things like that

00:29:46,210 --> 00:29:51,910
at this stage no I just meant that you

00:29:48,790 --> 00:29:55,360
couldn't like test a different

00:29:51,910 --> 00:29:58,750
architecture on your laptop you can test

00:29:55,360 --> 00:30:02,710
the I'm 64 virtual machine with the

00:29:58,750 --> 00:30:04,530
kernels modules on your laptop so as you

00:30:02,710 --> 00:30:06,100
as you say you would have to handle the

00:30:04,530 --> 00:30:10,450
cross compilation

00:30:06,100 --> 00:30:12,760
yourself yeah look I think it's

00:30:10,450 --> 00:30:15,490
something worth worth looking into

00:30:12,760 --> 00:30:17,770
yeah maybe we could could get it to a

00:30:15,490 --> 00:30:30,970
point where it's it fits nicely but

00:30:17,770 --> 00:30:35,850
otherwise yeah yeah that looks like

00:30:30,970 --> 00:30:42,080
we're three minutes over time so thanks

00:30:35,850 --> 00:30:42,080

YouTube URL: https://www.youtube.com/watch?v=XTEGe0lG3yc


