Title: openSUSE Conference 2017 openSUSE & Jurrassic Park
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1320-opensuse-jurrassic-park

What should we do about Containerised Applications?

Containerised Application technologies like AppImage, Snappy and Flatpak promise a brave new world for Linux applications, free from the worries of shared libraries and dependency issues. Just one problem, this is a road long travelled before, such as in the application dark ages of Win32 applications and DLLs. And it worked out so wonderfully there... Do we risk a future where, like the resurrected dinosaurs of Jurassic Park, this family of applications will break their containment and start eating our users? This session will try to present a fair argument about the situation, frankly discussing the benefits promised by these technologies, but highlighting the very real issues and risks their widespread adoption could, and in some cases are, already bringing to the table.

The talk with cover the promised benefits of application containers, such as AppImage, Snappy and Flatpak. It will detail the empowerment of developers who use the technologies, the ability for upstream projects to have a much closer role in delivering their software, and the benefits that brings to both the upstream projects and their users. But as a counter to those benefits, the session will detail some of the risks and responsibilities that come with that technology. The complexities of library integration, the risk of introducing new forms of dependency issues, and the transference of responsibility for those issues, plus security, away from the current Distributions delivering upstream projects towards those upstream projects directly. As a conclusion, the session will start to ask the question, what the hell should openSUSE do about this mess? How much can we help fix it or mitigate the problems? How much do we want to be involved in that new world?




Richard Brown
Captions: 
	00:00:07,309 --> 00:00:10,950
Wow

00:00:08,880 --> 00:00:13,049
thanks everybody for coming it's like

00:00:10,950 --> 00:00:14,219
the last ball second to last talk for me

00:00:13,049 --> 00:00:15,480
after this we've got the board meeting

00:00:14,219 --> 00:00:18,330
in the main hall and then we're done

00:00:15,480 --> 00:00:21,240
so I'm Richard I'm here to talk about

00:00:18,330 --> 00:00:23,869
well dinosaurs or as most other people

00:00:21,240 --> 00:00:27,119
know them containerized applications and

00:00:23,869 --> 00:00:29,400
how we get how we need to deal with them

00:00:27,119 --> 00:00:31,980
now they're out there now users are

00:00:29,400 --> 00:00:33,120
really using them now these you know now

00:00:31,980 --> 00:00:36,270
we're starting to see the problems with

00:00:33,120 --> 00:00:37,500
them in the real world and this is a

00:00:36,270 --> 00:00:40,290
variation on talk I did at FOSDEM

00:00:37,500 --> 00:00:42,629
earlier in the year so I'm going to

00:00:40,290 --> 00:00:44,550
start out rehashing a lot of that so if

00:00:42,629 --> 00:00:47,190
you see my talk I'll try and run through

00:00:44,550 --> 00:00:48,329
it a little bit quicker and if you

00:00:47,190 --> 00:00:50,070
haven't and you're more interested you

00:00:48,329 --> 00:00:51,780
can go back and watch that and then I'll

00:00:50,070 --> 00:00:54,440
talk about some of the new and exciting

00:00:51,780 --> 00:00:59,100
stuff and why I had to rewrite my slides

00:00:54,440 --> 00:01:00,420
twice during this conference but really

00:00:59,100 --> 00:01:02,280
when I started looking at these

00:01:00,420 --> 00:01:04,979
technologies looking at snappy looking

00:01:02,280 --> 00:01:06,750
at flat back and looking at a pitch it

00:01:04,979 --> 00:01:11,729
struck me that I'd seen all of this

00:01:06,750 --> 00:01:14,909
before and in fact where I first sort of

00:01:11,729 --> 00:01:17,820
saw similarities was actually back in

00:01:14,909 --> 00:01:19,470
sort of the windows architecture the

00:01:17,820 --> 00:01:21,920
original Windows application

00:01:19,470 --> 00:01:25,020
architecture how Windows deals with

00:01:21,920 --> 00:01:27,750
loading up libraries and dependencies in

00:01:25,020 --> 00:01:30,200
the windows world and I mean input you

00:01:27,750 --> 00:01:33,270
know just start sort of start off with

00:01:30,200 --> 00:01:35,670
look at if another perspective Linux has

00:01:33,270 --> 00:01:37,110
a lot of traditional Linux traditional

00:01:35,670 --> 00:01:40,860
Linux packaging has an awful lot in

00:01:37,110 --> 00:01:43,439
common with Windows 3.1 you know it's

00:01:40,860 --> 00:01:45,570
the similar world you know there is no

00:01:43,439 --> 00:01:46,799
ABI backwards compatibility things are

00:01:45,570 --> 00:01:49,560
constantly changing things are

00:01:46,799 --> 00:01:51,420
constantly evolved there's one great big

00:01:49,560 --> 00:01:54,210
file system where everything is dumped

00:01:51,420 --> 00:01:57,360
into Windows you know Window System will

00:01:54,210 --> 00:01:58,740
see Windows global identifiers for all

00:01:57,360 --> 00:02:00,390
the symbols so everything starts

00:01:58,740 --> 00:02:02,880
crashing all over the place it's an

00:02:00,390 --> 00:02:04,829
absolute maintenance nightmare and you

00:02:02,880 --> 00:02:07,380
know it's where the term DLL come hell

00:02:04,829 --> 00:02:09,390
comes from because ultimately all

00:02:07,380 --> 00:02:12,330
developers want to do is have a nice

00:02:09,390 --> 00:02:14,190
well simple environment to work with and

00:02:12,330 --> 00:02:17,310
you know in the Windows Windows

00:02:14,190 --> 00:02:19,230
one world they had you know had to

00:02:17,310 --> 00:02:21,270
development and test every single

00:02:19,230 --> 00:02:23,760
possible DLL combination that might be

00:02:21,270 --> 00:02:25,230
seen in the wild possibly anywhere and

00:02:23,760 --> 00:02:26,910
then every time they had a patch test

00:02:25,230 --> 00:02:29,310
that app patch in every single

00:02:26,910 --> 00:02:30,480
combination everywhere and then when

00:02:29,310 --> 00:02:32,400
there were the dependency or library

00:02:30,480 --> 00:02:34,590
patch test everything in every single

00:02:32,400 --> 00:02:36,330
combination everywhere and they would do

00:02:34,590 --> 00:02:37,950
that and they would try and you know

00:02:36,330 --> 00:02:39,060
Windows was being used everywhere and

00:02:37,950 --> 00:02:40,800
then they'd cry because it would all

00:02:39,060 --> 00:02:43,500
break anyway and you know it would all

00:02:40,800 --> 00:02:45,720
go horribly horribly wrong and Microsoft

00:02:43,500 --> 00:02:47,400
thought they could fix this and they

00:02:45,720 --> 00:02:49,530
tried very very well to do that and they

00:02:47,400 --> 00:02:51,930
were somewhat successful now Windows

00:02:49,530 --> 00:02:55,790
2000 introduced this concept of side by

00:02:51,930 --> 00:02:58,020
side assembly which is basically

00:02:55,790 --> 00:03:00,720
containerization or you know application

00:02:58,020 --> 00:03:02,280
isolation for the windows world having a

00:03:00,720 --> 00:03:05,220
separate memory space for every single

00:03:02,280 --> 00:03:07,830
application and all of its dll's loading

00:03:05,220 --> 00:03:11,220
up those dll's privately from a folder

00:03:07,830 --> 00:03:13,440
in the file system having windows files

00:03:11,220 --> 00:03:16,380
protection doing disk isolation of

00:03:13,440 --> 00:03:18,840
system dll and having these fancy tools

00:03:16,380 --> 00:03:20,700
to audit all of that to migrate those

00:03:18,840 --> 00:03:23,610
legacy applications and deal with those

00:03:20,700 --> 00:03:26,040
problems and you know you ended up with

00:03:23,610 --> 00:03:29,370
this wonderful situation if your Windows

00:03:26,040 --> 00:03:31,230
user where you know your Windows NT or

00:03:29,370 --> 00:03:33,990
Windows 2000 or later could include Gena

00:03:31,230 --> 00:03:37,110
run an application for win32 or even for

00:03:33,990 --> 00:03:39,000
politics or even os/2 or using these

00:03:37,110 --> 00:03:41,760
fancy little runtimes that were packaged

00:03:39,000 --> 00:03:44,040
up in that Windows environment so you

00:03:41,760 --> 00:03:46,140
know problem solved right well no of

00:03:44,040 --> 00:03:48,540
course you know it all went horribly

00:03:46,140 --> 00:03:52,830
wrong and not just because it was

00:03:48,540 --> 00:03:55,500
Microsoft doing it you know there were

00:03:52,830 --> 00:03:57,270
very very real sort of social and

00:03:55,500 --> 00:04:00,420
practical problems that evolved over

00:03:57,270 --> 00:04:02,400
time that we all saw it was a security

00:04:00,420 --> 00:04:04,950
nightmare all of these libraries all of

00:04:02,400 --> 00:04:08,250
these dependencies end up lurking in

00:04:04,950 --> 00:04:10,320
countless folders all being maintained

00:04:08,250 --> 00:04:12,780
to various degrees by the developers

00:04:10,320 --> 00:04:14,370
that put them there all them becoming

00:04:12,780 --> 00:04:17,669
lovely security vulnerability yeah

00:04:14,370 --> 00:04:19,890
security gaps attack services for things

00:04:17,669 --> 00:04:22,049
like wanna cry and other malware to you

00:04:19,890 --> 00:04:23,460
know go and abuse misuse when certain

00:04:22,049 --> 00:04:25,980
applications are loaded in memory in a

00:04:23,460 --> 00:04:28,290
loading up the bad DL O's in question

00:04:25,980 --> 00:04:30,450
it's also making incitement as a user

00:04:28,290 --> 00:04:32,520
how do you then update that application

00:04:30,450 --> 00:04:34,650
on the user's machine you know anyone

00:04:32,520 --> 00:04:36,120
using Windows how many applications

00:04:34,650 --> 00:04:37,740
uploaders do you have in your system

00:04:36,120 --> 00:04:41,160
tray I mean everyone builds another

00:04:37,740 --> 00:04:44,070
system updater and you know it just

00:04:41,160 --> 00:04:45,750
doesn't scale it ends up especially in

00:04:44,070 --> 00:04:47,220
the open source world being a bit of a

00:04:45,750 --> 00:04:49,020
legal nightmare one of the biggest

00:04:47,220 --> 00:04:52,110
issues of getting open source software

00:04:49,020 --> 00:04:54,060
in Windows is actually this problem it's

00:04:52,110 --> 00:04:56,610
actually figuring out okay can we put

00:04:54,060 --> 00:04:58,020
this open source DLL in this container

00:04:56,610 --> 00:05:00,030
with everything else we need to put in

00:04:58,020 --> 00:05:02,070
there to get the thing working and you

00:05:00,030 --> 00:05:04,170
know we're you know we in the case of

00:05:02,070 --> 00:05:06,300
the windows world with these DLL

00:05:04,170 --> 00:05:08,820
encompassed applications you know that

00:05:06,300 --> 00:05:10,140
the developer is the distributor they

00:05:08,820 --> 00:05:13,320
have to worry about those legal issues

00:05:10,140 --> 00:05:15,210
those legal concern but there is one but

00:05:13,320 --> 00:05:17,130
a bunch of people happy hard disk

00:05:15,210 --> 00:05:19,470
vendors because everybody is using up

00:05:17,130 --> 00:05:23,730
more disk space people need more bytes

00:05:19,470 --> 00:05:25,650
you know it's not terrible and this was

00:05:23,730 --> 00:05:27,870
yeah like I say since 2000 you know

00:05:25,650 --> 00:05:29,790
meanwhile in the next land we were

00:05:27,870 --> 00:05:33,000
looking on smugly because we'd already

00:05:29,790 --> 00:05:35,880
solved all these problems sort of and

00:05:33,000 --> 00:05:37,650
you know the way we solve these problems

00:05:35,880 --> 00:05:43,080
was with the traditional Linux

00:05:37,650 --> 00:05:44,820
distribution and primarily the the

00:05:43,080 --> 00:05:47,210
things that distributions brought to the

00:05:44,820 --> 00:05:50,460
table and still bring to the table today

00:05:47,210 --> 00:05:52,170
isn't the technical stuff per se you

00:05:50,460 --> 00:05:54,270
know we all solve the technical problems

00:05:52,170 --> 00:05:56,100
in our own way we all have our different

00:05:54,270 --> 00:05:57,780
package managers and our you know

00:05:56,100 --> 00:05:59,730
different philosophies on how you should

00:05:57,780 --> 00:06:02,100
do this engineering a packaging stuff

00:05:59,730 --> 00:06:05,070
but the you know the universal thing we

00:06:02,100 --> 00:06:07,230
all really bring to the table is we care

00:06:05,070 --> 00:06:09,720
about the security of the operating

00:06:07,230 --> 00:06:11,280
system and its applications in the

00:06:09,720 --> 00:06:13,020
context of a user looking after we're

00:06:11,280 --> 00:06:14,580
maintaining this stuff we're auditing

00:06:13,020 --> 00:06:17,370
this stuff we're constantly monitoring

00:06:14,580 --> 00:06:19,770
CVEs pushing out these updates and

00:06:17,370 --> 00:06:22,140
especially with the open source side of

00:06:19,770 --> 00:06:24,750
things you know a major security

00:06:22,140 --> 00:06:26,700
vulnerability it needs to be handled in

00:06:24,750 --> 00:06:28,860
a very particular way you are going to

00:06:26,700 --> 00:06:31,230
have embargoed security mailing list you

00:06:28,860 --> 00:06:33,270
need to have trusted people on there so

00:06:31,230 --> 00:06:35,100
you cut you know you need to yeah need

00:06:33,270 --> 00:06:36,300
to have the right people there need to

00:06:35,100 --> 00:06:38,010
have the right relationships there to

00:06:36,300 --> 00:06:39,780
get on those embargoed lists and you

00:06:38,010 --> 00:06:42,210
know distributions play that key role

00:06:39,780 --> 00:06:45,120
being there able to get those fixes out

00:06:42,210 --> 00:06:46,130
before issues start hitting your code

00:06:45,120 --> 00:06:48,900
tree

00:06:46,130 --> 00:06:50,220
like I said maintaining it packaging

00:06:48,900 --> 00:06:52,470
those updates keeping them updated

00:06:50,220 --> 00:06:55,350
dealing with upstreams helping work with

00:06:52,470 --> 00:06:56,130
up streams with that employers auditing

00:06:55,350 --> 00:06:57,900
all of their stuff

00:06:56,130 --> 00:06:59,730
checking its compatible making sure that

00:06:57,900 --> 00:07:03,930
the license is being chosen are sane and

00:06:59,730 --> 00:07:05,250
consistent with each other so when I

00:07:03,930 --> 00:07:08,550
talk about this just there the

00:07:05,250 --> 00:07:11,370
distribution stuff you know lots of

00:07:08,550 --> 00:07:13,140
people in it's kind of spawned by these

00:07:11,370 --> 00:07:15,600
new technologies or these this kind of

00:07:13,140 --> 00:07:17,900
resurgence of the the bundled

00:07:15,600 --> 00:07:19,830
application side of things of you know

00:07:17,900 --> 00:07:21,990
shared libraries of a problem we're

00:07:19,830 --> 00:07:23,580
trying to solve the problem dependencies

00:07:21,990 --> 00:07:24,660
are a pain in the ass you know you know

00:07:23,580 --> 00:07:25,650
I don't want to worry about the

00:07:24,660 --> 00:07:29,550
dependencies I just want to worry about

00:07:25,650 --> 00:07:30,990
my app shared libraries do so real

00:07:29,550 --> 00:07:33,090
problems it's not just a case of being

00:07:30,990 --> 00:07:35,640
more efficient on disk although that is

00:07:33,090 --> 00:07:37,200
a benefit as well but having fewer

00:07:35,640 --> 00:07:39,060
libraries to worry about having fewer

00:07:37,200 --> 00:07:41,160
dependencies to worry about or having

00:07:39,060 --> 00:07:44,280
fewer repeating copies of the same

00:07:41,160 --> 00:07:46,770
dependency to worry about is a very

00:07:44,280 --> 00:07:48,540
beneficial thing you know when something

00:07:46,770 --> 00:07:50,520
goes wrong when something is in when

00:07:48,540 --> 00:07:52,290
something is insecure you have fewer

00:07:50,520 --> 00:07:54,150
copies of that thing to worry about you

00:07:52,290 --> 00:07:57,180
have fewer places to patch you have less

00:07:54,150 --> 00:07:59,940
manpower required to batch it let's

00:07:57,180 --> 00:08:02,039
double work sending multiple copies of

00:07:59,940 --> 00:08:03,210
your vulnerable lib SSL out there you're

00:08:02,039 --> 00:08:05,700
vulnerable assemble libraries out there

00:08:03,210 --> 00:08:08,190
and that makes it easier to then review

00:08:05,700 --> 00:08:09,960
it most as a user and as a distributor

00:08:08,190 --> 00:08:12,419
or was a developer who is distributing

00:08:09,960 --> 00:08:13,950
and ensuring that legal and security

00:08:12,419 --> 00:08:15,240
compliance that you know this is

00:08:13,950 --> 00:08:18,479
something you can trust and rely on

00:08:15,240 --> 00:08:20,190
today tomorrow and also when it stops

00:08:18,479 --> 00:08:22,169
being maintained it's still doing it in

00:08:20,190 --> 00:08:25,200
a way that's you know at least was

00:08:22,169 --> 00:08:26,669
saying at the time of stopping it so

00:08:25,200 --> 00:08:28,590
from the open source sort of

00:08:26,669 --> 00:08:32,039
distribution side of things mission

00:08:28,590 --> 00:08:35,849
accomplished right well no like I

00:08:32,039 --> 00:08:37,530
already said the open suit the open

00:08:35,849 --> 00:08:39,089
source distribution way of doing things

00:08:37,530 --> 00:08:41,490
was very similar to actually how Windows

00:08:39,089 --> 00:08:43,740
did it you know we we still had these

00:08:41,490 --> 00:08:46,560
problems we still had the issues of

00:08:43,740 --> 00:08:48,480
compatibility of making sure all these

00:08:46,560 --> 00:08:50,070
bits and pieces work together having a

00:08:48,480 --> 00:08:52,950
portability how does an application

00:08:50,070 --> 00:08:55,560
built in one context work elsewhere

00:08:52,950 --> 00:08:58,380
and and how do you handle this issue of

00:08:55,560 --> 00:09:00,140
keeping something keeping this software

00:08:58,380 --> 00:09:02,280
being delivered and just working and

00:09:00,140 --> 00:09:03,690
handling the fact that the open source

00:09:02,280 --> 00:09:06,270
world and therefore everything you're

00:09:03,690 --> 00:09:10,800
distributing is moving at a constantly

00:09:06,270 --> 00:09:14,910
changing pace of change but we're not

00:09:10,800 --> 00:09:17,880
Windows and when you're distributing in

00:09:14,910 --> 00:09:19,860
the open source world there's different

00:09:17,880 --> 00:09:22,860
factors at play so thinking about the

00:09:19,860 --> 00:09:25,200
compatibility issue we all end up doing

00:09:22,860 --> 00:09:26,400
different distributions we all end up

00:09:25,200 --> 00:09:28,710
having different libraries and different

00:09:26,400 --> 00:09:29,730
applications different applications that

00:09:28,710 --> 00:09:31,170
require different libraries that the

00:09:29,730 --> 00:09:33,600
problem becomes in exponentially

00:09:31,170 --> 00:09:35,160
complicated and application developers

00:09:33,600 --> 00:09:36,870
don't want to worry about all that mess

00:09:35,160 --> 00:09:38,940
they just want to deliver their software

00:09:36,870 --> 00:09:39,870
in the hands of users I get it they

00:09:38,940 --> 00:09:42,360
don't want to have to worry about which

00:09:39,870 --> 00:09:45,270
choice of dependencies did certain

00:09:42,360 --> 00:09:48,120
distributions pick but most of the time

00:09:45,270 --> 00:09:49,860
they don't have to in reality

00:09:48,120 --> 00:09:51,600
distributions have their own maintainer

00:09:49,860 --> 00:09:54,720
zhh we have our own communities you're

00:09:51,600 --> 00:09:56,430
all here who care about this stuff in

00:09:54,720 --> 00:09:58,140
this part of it and you know other sort

00:09:56,430 --> 00:09:59,700
of the second tier making sure that the

00:09:58,140 --> 00:10:01,920
application gets in the hands of users

00:09:59,700 --> 00:10:03,540
and you know you care about it in the

00:10:01,920 --> 00:10:06,150
same way as the upstream maintain its

00:10:03,540 --> 00:10:08,340
care about it so very rarely does it

00:10:06,150 --> 00:10:10,920
really become a problem because most

00:10:08,340 --> 00:10:12,210
times it is really being done by the

00:10:10,920 --> 00:10:14,490
district maintainer z-- who care about

00:10:12,210 --> 00:10:15,510
this and that's that's what you all do

00:10:14,490 --> 00:10:19,650
and that's what we've been doing for

00:10:15,510 --> 00:10:20,910
years and we're bloody good at it as you

00:10:19,650 --> 00:10:22,830
can just see in tumbleweed where we

00:10:20,910 --> 00:10:26,550
repeatedly ship stuff as fast as the

00:10:22,830 --> 00:10:29,250
upstream shipping it but it is important

00:10:26,550 --> 00:10:32,850
you know it's openSUSE by openSUSE for

00:10:29,250 --> 00:10:34,440
openSUSE and you know an application

00:10:32,850 --> 00:10:35,550
developer wants to make sure that their

00:10:34,440 --> 00:10:37,140
software runs in a many different

00:10:35,550 --> 00:10:38,810
contexts as possible and as many

00:10:37,140 --> 00:10:41,430
different distributions as possible and

00:10:38,810 --> 00:10:42,810
they don't want to learn a whole bunch

00:10:41,430 --> 00:10:44,670
of different build tools and they don't

00:10:42,810 --> 00:10:46,140
want to learn 20 different ways of doing

00:10:44,670 --> 00:10:47,450
things and they don't want to retest it

00:10:46,140 --> 00:10:51,330
20 different places

00:10:47,450 --> 00:10:53,070
but again distribution communities often

00:10:51,330 --> 00:10:57,930
take care of that problem for the

00:10:53,070 --> 00:10:59,140
application developers anyway and then

00:10:57,930 --> 00:11:01,329
pay stuff change

00:10:59,140 --> 00:11:03,610
every distribution does everything at a

00:11:01,329 --> 00:11:04,690
different pace heck if you openSUSE we

00:11:03,610 --> 00:11:06,339
do it at two different paces

00:11:04,690 --> 00:11:08,829
you know we'd leap we do it regularly

00:11:06,339 --> 00:11:10,810
every year with major versions every few

00:11:08,829 --> 00:11:13,089
years and we do tumbleweed where we just

00:11:10,810 --> 00:11:16,720
go nuts and as fast as every upstream

00:11:13,089 --> 00:11:18,670
wants us to go but in the traditional

00:11:16,720 --> 00:11:21,640
old-fashioned way of doing things um you

00:11:18,670 --> 00:11:23,040
know the regular release process gets in

00:11:21,640 --> 00:11:26,200
the way of that application delivery

00:11:23,040 --> 00:11:27,760
desire you know you could in the

00:11:26,200 --> 00:11:29,890
traditional model you can't necessarily

00:11:27,760 --> 00:11:32,829
run the latest version of software on

00:11:29,890 --> 00:11:34,029
your stable openSUSE your debian system

00:11:32,829 --> 00:11:35,740
you know debian in particular is the

00:11:34,029 --> 00:11:38,769
perfect example because they freeze so

00:11:35,740 --> 00:11:40,600
well and so hard and so solidly you know

00:11:38,769 --> 00:11:43,510
that that becomes even even harder and

00:11:40,600 --> 00:11:45,310
they're proud of that leap we

00:11:43,510 --> 00:11:48,000
purposefully design it in a way to try

00:11:45,310 --> 00:11:50,649
and bend the issue around the edges and

00:11:48,000 --> 00:11:52,420
deliver faster stuff when we can how we

00:11:50,649 --> 00:11:55,240
can we have the build service we have

00:11:52,420 --> 00:11:56,860
opened QA to help with that um but it's

00:11:55,240 --> 00:11:58,209
still a very real problem sometimes we

00:11:56,860 --> 00:12:00,730
just have to say no because the

00:11:58,209 --> 00:12:02,620
technology can't do it but that problem

00:12:00,730 --> 00:12:04,180
that balance how do we deliver this

00:12:02,620 --> 00:12:05,980
software that is again something that

00:12:04,180 --> 00:12:11,500
distributions you know do currently take

00:12:05,980 --> 00:12:13,899
care they don't take care of so how much

00:12:11,500 --> 00:12:15,940
of a problem is it really doesn't matter

00:12:13,899 --> 00:12:18,329
app image flat-pack snappy you're here

00:12:15,940 --> 00:12:22,120
to solve all the problems left anyway

00:12:18,329 --> 00:12:24,250
and now they exist to solve that issue

00:12:22,120 --> 00:12:26,320
they exist to try and move these

00:12:24,250 --> 00:12:27,610
problems out of that you know out of the

00:12:26,320 --> 00:12:29,170
hand of the distributions or you know

00:12:27,610 --> 00:12:32,820
reduce the need for the distributions to

00:12:29,170 --> 00:12:35,260
do this so application developers can

00:12:32,820 --> 00:12:37,120
get that software in the hands of users

00:12:35,260 --> 00:12:40,449
at the pace the application developers

00:12:37,120 --> 00:12:42,130
want to be and they do so by providing a

00:12:40,449 --> 00:12:43,660
bundle containing the app and the

00:12:42,130 --> 00:12:47,019
libraries all the dependencies they need

00:12:43,660 --> 00:12:49,209
in then some kind of container or

00:12:47,019 --> 00:12:50,709
context or bubble or whatever I'm going

00:12:49,209 --> 00:12:53,260
to keep on saying container although

00:12:50,709 --> 00:12:56,529
technically speaking you know let's open

00:12:53,260 --> 00:12:58,079
for interpretation and the big promises

00:12:56,529 --> 00:13:00,220
of all these technologies despite

00:12:58,079 --> 00:13:02,350
details around the edges of how they do

00:13:00,220 --> 00:13:03,730
things is to solve all these compatible

00:13:02,350 --> 00:13:06,220
issue compatibility and portability

00:13:03,730 --> 00:13:07,660
issues you know it's only going to have

00:13:06,220 --> 00:13:08,949
the compatible libraries in the bundle

00:13:07,660 --> 00:13:10,510
so you don't have to worry about

00:13:08,949 --> 00:13:12,100
anything from the distribution you know

00:13:10,510 --> 00:13:12,760
you just put your application there

00:13:12,100 --> 00:13:15,370
everything in

00:13:12,760 --> 00:13:17,140
you know it'll be portable it'll work

00:13:15,370 --> 00:13:18,310
everywhere because all the dependencies

00:13:17,140 --> 00:13:20,830
will be solved in there you'll never

00:13:18,310 --> 00:13:23,350
have to worry about the you know what

00:13:20,830 --> 00:13:24,580
does a distribution ship and of course

00:13:23,350 --> 00:13:27,250
that means you can ship it at the pace

00:13:24,580 --> 00:13:28,360
you want whenever however don't have to

00:13:27,250 --> 00:13:30,220
worry about what the distribution is

00:13:28,360 --> 00:13:33,100
doing and it's just going to work and

00:13:30,220 --> 00:13:37,090
it's going to be wonderful that's the

00:13:33,100 --> 00:13:38,710
promise and then you have nice

00:13:37,090 --> 00:13:40,930
architectural diagrams like the snappy

00:13:38,710 --> 00:13:42,670
one here or you have really stupidly

00:13:40,930 --> 00:13:45,220
complicated architecture diagrams like

00:13:42,670 --> 00:13:48,820
the flat-pack one where you have this

00:13:45,220 --> 00:13:50,290
kind of model of you know just ignoring

00:13:48,820 --> 00:13:53,530
the operating system down the bottom

00:13:50,290 --> 00:13:56,830
pretty much it's just there and then

00:13:53,530 --> 00:14:00,790
there is some layer on top of that be it

00:13:56,830 --> 00:14:02,110
the frameworks or the runtimes which you

00:14:00,790 --> 00:14:05,290
know provide the sort of layer of

00:14:02,110 --> 00:14:06,640
dependencies which are an awful lot like

00:14:05,290 --> 00:14:09,220
the dependencies the distributions are

00:14:06,640 --> 00:14:11,710
currently doing anyway and then the

00:14:09,220 --> 00:14:15,840
bundle itself contains the library the

00:14:11,710 --> 00:14:15,840
code the application everything is fine

00:14:16,770 --> 00:14:21,880
but it doesn't work in practice it

00:14:19,570 --> 00:14:23,410
doesn't work most of the time it does

00:14:21,880 --> 00:14:27,730
but there are still some very very real

00:14:23,410 --> 00:14:29,590
issues there and in fact the the biggest

00:14:27,730 --> 00:14:31,480
problem that comes around in reality

00:14:29,590 --> 00:14:34,840
when you start using these in production

00:14:31,480 --> 00:14:37,680
is this issue of you know compatibility

00:14:34,840 --> 00:14:40,810
and portability the myth is not true

00:14:37,680 --> 00:14:43,600
because at some point be it app image

00:14:40,810 --> 00:14:46,600
that pack or snappy there are some

00:14:43,600 --> 00:14:49,150
assumptions made about the stuff below

00:14:46,600 --> 00:14:51,190
the system and we talked about this like

00:14:49,150 --> 00:14:53,440
you know you know in the case of snap

00:14:51,190 --> 00:14:54,880
waver in the case of snaps you know that

00:14:53,440 --> 00:14:56,050
is still the kernel you know everything

00:14:54,880 --> 00:14:59,290
above the kernel is assumed to be

00:14:56,050 --> 00:15:01,060
delivered by some snap somehow but no

00:14:59,290 --> 00:15:02,320
kernel is equal you know if we

00:15:01,060 --> 00:15:03,370
distribution has a different kind of a

00:15:02,320 --> 00:15:05,290
different conflict there's still

00:15:03,370 --> 00:15:06,700
problems there that get introduced by

00:15:05,290 --> 00:15:09,610
different you know by different kernel

00:15:06,700 --> 00:15:13,060
arrangements we see this in in openSUSE

00:15:09,610 --> 00:15:14,470
most actually with steam which isn't

00:15:13,060 --> 00:15:15,820
using one of these technologies but

00:15:14,470 --> 00:15:19,060
basically uses the same approach of

00:15:15,820 --> 00:15:20,530
having a containerized steam you know

00:15:19,060 --> 00:15:23,140
runtime they get to put in your user

00:15:20,530 --> 00:15:24,760
area and run that way and everything was

00:15:23,140 --> 00:15:26,329
fine on openSUSE with steam for the

00:15:24,760 --> 00:15:28,069
longest time it just worked it did it

00:15:26,329 --> 00:15:30,319
job we could move everything in openSUSE

00:15:28,069 --> 00:15:31,879
and everything was fine and then we

00:15:30,319 --> 00:15:34,879
changed our G Lib C and it exploded

00:15:31,879 --> 00:15:36,709
spectacularly because their steam

00:15:34,879 --> 00:15:38,119
runtime was built with an old of a G Lib

00:15:36,709 --> 00:15:39,470
C and therefore nothing would run

00:15:38,119 --> 00:15:41,899
anymore all those libraries would go

00:15:39,470 --> 00:15:44,329
horribly horribly wrong until we started

00:15:41,899 --> 00:15:45,980
scripting around injecting our G Lib C

00:15:44,329 --> 00:15:49,069
into there and rebuilding everything and

00:15:45,980 --> 00:15:51,139
it was a complete mess and we've seen

00:15:49,069 --> 00:15:52,549
this issues with flat packs we've seen

00:15:51,139 --> 00:15:53,600
this issue with some of the expense with

00:15:52,549 --> 00:15:57,139
snaps we've seen the issue sometimes

00:15:53,600 --> 00:15:58,879
with images but one of the nice things

00:15:57,139 --> 00:16:01,069
in one of the reasons why I've always

00:15:58,879 --> 00:16:02,779
come into this liking app image is at

00:16:01,069 --> 00:16:07,339
least app image documents this problem

00:16:02,779 --> 00:16:09,529
you know it's stated there that it isn't

00:16:07,339 --> 00:16:11,959
trying to be a universal portable

00:16:09,529 --> 00:16:14,779
application solution you're going to

00:16:11,959 --> 00:16:16,549
have to gather the binaries for the

00:16:14,779 --> 00:16:18,679
dependencies for the distributions

00:16:16,549 --> 00:16:22,509
you're targeting you're not going to

00:16:18,679 --> 00:16:22,509
magically solve this problem everywhere

00:16:22,869 --> 00:16:28,129
but that means that if you're using

00:16:25,670 --> 00:16:30,079
these technologies you still have to

00:16:28,129 --> 00:16:32,119
worry about all of the compatible

00:16:30,079 --> 00:16:34,279
dependencies which might not be provided

00:16:32,119 --> 00:16:37,669
by any distribution you might want to

00:16:34,279 --> 00:16:40,489
run it on that's a lot of stuff to worry

00:16:37,669 --> 00:16:42,709
about that's the stuff that we all do it

00:16:40,489 --> 00:16:43,699
openSUSE all the damn time and it takes

00:16:42,709 --> 00:16:45,919
all of us to do it

00:16:43,699 --> 00:16:50,600
if you don't get your head around that

00:16:45,919 --> 00:16:52,360
your users need to expect crashes so

00:16:50,600 --> 00:16:55,339
it's a hopeful is it hopeless you know

00:16:52,360 --> 00:16:57,410
well you know you talk to flat pack

00:16:55,339 --> 00:16:59,089
people at this or no we've solved it you

00:16:57,410 --> 00:17:00,169
know we've got these runtimes or when

00:16:59,089 --> 00:17:03,379
the snap side of things you know we've

00:17:00,169 --> 00:17:05,750
got these base snaps well those base

00:17:03,379 --> 00:17:09,500
snap so as runtimes just end up being

00:17:05,750 --> 00:17:12,399
some second curated middle district its

00:17:09,500 --> 00:17:15,740
middleware for the containerized world

00:17:12,399 --> 00:17:17,000
cool fine but you haven't solved the

00:17:15,740 --> 00:17:18,289
problem you've just moved it into a

00:17:17,000 --> 00:17:19,789
different context it's still another

00:17:18,289 --> 00:17:21,409
distribution you're still having to have

00:17:19,789 --> 00:17:23,480
distribution engineers worry about this

00:17:21,409 --> 00:17:27,589
stuff and curate it and secure it and

00:17:23,480 --> 00:17:30,590
patch it and maintain it maybe it isn't

00:17:27,589 --> 00:17:32,960
a real solution maybe a real solution is

00:17:30,590 --> 00:17:36,380
actually figuring out a way of commonly

00:17:32,960 --> 00:17:40,310
agreeing between us the distributions as

00:17:36,380 --> 00:17:43,310
a platform the application runtimes

00:17:40,310 --> 00:17:46,430
as a delivery mechanism and hopefully

00:17:43,310 --> 00:17:47,840
even the developers on common I use the

00:17:46,430 --> 00:17:50,300
word standards here but let's say common

00:17:47,840 --> 00:17:51,920
agreements of you know what can you

00:17:50,300 --> 00:17:53,960
expect from your base system

00:17:51,920 --> 00:17:55,130
what can a plication developers expect

00:17:53,960 --> 00:17:57,440
from their runtimes

00:17:55,130 --> 00:17:59,090
so people can go into this and we won't

00:17:57,440 --> 00:18:01,730
just have random crashes when you

00:17:59,090 --> 00:18:03,350
install your app image or your snap on

00:18:01,730 --> 00:18:05,120
an openSUSE machine and it doesn't

00:18:03,350 --> 00:18:07,460
deliver the you know the kernel the way

00:18:05,120 --> 00:18:12,050
it's expected or the libraries the way

00:18:07,460 --> 00:18:13,670
it's expected and until we do that the

00:18:12,050 --> 00:18:15,530
compatibility problem isn't really going

00:18:13,670 --> 00:18:17,900
to be so the portability problem isn't

00:18:15,530 --> 00:18:20,540
really going to be solved but what about

00:18:17,900 --> 00:18:27,440
pace of changes and you know well yeah

00:18:20,540 --> 00:18:30,500
and what about it just working well back

00:18:27,440 --> 00:18:32,600
to the window side of things you know

00:18:30,500 --> 00:18:34,280
this is what Windows did this is very

00:18:32,600 --> 00:18:38,060
very similar to what these technologies

00:18:34,280 --> 00:18:43,340
are doing as well is history just

00:18:38,060 --> 00:18:46,820
repeating itself because when you're

00:18:43,340 --> 00:18:49,040
delivering these libraries in there it's

00:18:46,820 --> 00:18:50,540
going to be a security nightmare maybe

00:18:49,040 --> 00:18:51,830
not in a practical sense you know

00:18:50,540 --> 00:18:54,890
because we are talking about putting

00:18:51,830 --> 00:18:57,560
these stuff in jails and you know some

00:18:54,890 --> 00:18:58,790
kind of isolation but to be honest when

00:18:57,560 --> 00:19:03,470
it comes to these ice you know these

00:18:58,790 --> 00:19:05,420
bits of isolation it's a firewall and I

00:19:03,470 --> 00:19:08,360
don't like the idea of trusting a

00:19:05,420 --> 00:19:09,800
firewall with my system security I like

00:19:08,360 --> 00:19:11,120
a firewall being there when everything

00:19:09,800 --> 00:19:12,500
goes wrong and it's my last line of

00:19:11,120 --> 00:19:14,540
defense but it's not my first line of

00:19:12,500 --> 00:19:18,800
defense I want sensible engineering as

00:19:14,540 --> 00:19:20,960
my first line of defense and therefore I

00:19:18,800 --> 00:19:22,370
kind of forget about the isolation

00:19:20,960 --> 00:19:24,110
entirely I want to make sure that

00:19:22,370 --> 00:19:26,990
someone is taking care of the security

00:19:24,110 --> 00:19:28,460
over the libraries in my bundle and

00:19:26,990 --> 00:19:31,670
assume that at some point someone's

00:19:28,460 --> 00:19:32,840
going to escape the jail there's no

00:19:31,670 --> 00:19:34,610
answer for that right now there's no

00:19:32,840 --> 00:19:38,510
clean answer for that why not oh there

00:19:34,610 --> 00:19:39,470
wasn't a week ago same with the

00:19:38,510 --> 00:19:40,640
maintenance side of things you know

00:19:39,470 --> 00:19:41,690
who's going to be patching these

00:19:40,640 --> 00:19:43,070
libraries in there who's going to be

00:19:41,690 --> 00:19:44,930
making sure that those libraries are

00:19:43,070 --> 00:19:46,520
moving forward who is going to be making

00:19:44,930 --> 00:19:48,080
sure that what I've what I've installed

00:19:46,520 --> 00:19:49,630
is actually legally allowed to be on my

00:19:48,080 --> 00:19:52,790
machine who's going to make sure that

00:19:49,630 --> 00:19:54,290
these two pet you know that the yeah the

00:19:52,790 --> 00:19:56,300
the GPO is

00:19:54,290 --> 00:19:58,370
success in it correctly being used and

00:19:56,300 --> 00:20:00,800
cited in there with my lg PR stuff for

00:19:58,370 --> 00:20:01,820
example but it's okay storage vendors

00:20:00,800 --> 00:20:03,080
will still be happy because all these

00:20:01,820 --> 00:20:06,890
bundles are going to be using up more

00:20:03,080 --> 00:20:08,870
displace and then this is where my slide

00:20:06,890 --> 00:20:10,460
deck all starts going out of kilter

00:20:08,870 --> 00:20:13,040
because I was going to then talk about

00:20:10,460 --> 00:20:14,990
how you know mini to bite you no need to

00:20:13,040 --> 00:20:17,630
start conveying these responsibilities

00:20:14,990 --> 00:20:19,130
to you know the various maintained as a

00:20:17,630 --> 00:20:20,360
vApp image and flat back and snappy and

00:20:19,130 --> 00:20:22,460
start talking about you know how are we

00:20:20,360 --> 00:20:24,250
going to get this message out there and

00:20:22,460 --> 00:20:27,290
I was going to be talking about you know

00:20:24,250 --> 00:20:29,390
considering you know a bi changes and

00:20:27,290 --> 00:20:32,900
you know how do you rebuild bundles when

00:20:29,390 --> 00:20:35,030
a bi changes happen and I was going to

00:20:32,900 --> 00:20:36,260
be talking about testing all of that I'm

00:20:35,030 --> 00:20:38,570
going to be talking about the security

00:20:36,260 --> 00:20:40,670
maintenance issues and I was going to

00:20:38,570 --> 00:20:43,210
ask the question about you know what are

00:20:40,670 --> 00:20:43,210
we going to do

00:20:43,610 --> 00:20:48,890
and I was going to suggest a few things

00:20:45,620 --> 00:20:51,320
as well but it all went horribly

00:20:48,890 --> 00:20:56,480
horribly wrong because of the openSUSE

00:20:51,320 --> 00:20:59,150
conference it's all changed my question

00:20:56,480 --> 00:21:03,310
no longer is what are we gonna do it's

00:20:59,150 --> 00:21:06,260
actually what has been done already and

00:21:03,310 --> 00:21:08,180
well I was gonna change the title of

00:21:06,260 --> 00:21:09,440
this talk because you know from being a

00:21:08,180 --> 00:21:12,890
real bad skeptic of all these

00:21:09,440 --> 00:21:17,090
technologies given what's been done I

00:21:12,890 --> 00:21:22,250
now love app image I really love app

00:21:17,090 --> 00:21:27,080
image um because well OBS now builds app

00:21:22,250 --> 00:21:28,790
images our build service now can take

00:21:27,080 --> 00:21:29,570
our packages that we have in there for

00:21:28,790 --> 00:21:30,770
tumbleweeds we'll eat them for

00:21:29,570 --> 00:21:34,690
everything else even not develop

00:21:30,770 --> 00:21:38,180
projects and build app images from that

00:21:34,690 --> 00:21:40,250
so all those problems about the sort of

00:21:38,180 --> 00:21:43,070
security compliance the security

00:21:40,250 --> 00:21:44,720
auditing license tracking dependency

00:21:43,070 --> 00:21:46,460
tracking figuring out how to rebuild

00:21:44,720 --> 00:21:47,810
stuff when to rebuild stuff all these

00:21:46,460 --> 00:21:51,290
problems that we'd already solved in the

00:21:47,810 --> 00:21:52,760
distribution space the app image guys by

00:21:51,290 --> 00:21:55,790
working with us have now solved it in

00:21:52,760 --> 00:21:57,020
the app image space as well and you know

00:21:55,790 --> 00:21:58,700
well then we can host them on the build

00:21:57,020 --> 00:22:00,380
service too so we have even you know

00:21:58,700 --> 00:22:02,270
change the context of how you can

00:22:00,380 --> 00:22:04,700
deliver the software to the users and

00:22:02,270 --> 00:22:06,260
we've managed you know the OBS team

00:22:04,700 --> 00:22:07,820
we've managed to do all of this without

00:22:06,260 --> 00:22:09,320
impeding app image

00:22:07,820 --> 00:22:11,270
strengths and flexibilities of just

00:22:09,320 --> 00:22:13,970
being a nice easy lightweight of doing

00:22:11,270 --> 00:22:16,010
weight things this thing in you know in

00:22:13,970 --> 00:22:18,560
the hands of users it just gets there

00:22:16,010 --> 00:22:22,850
it's easy to deploy you know on single

00:22:18,560 --> 00:22:25,640
click run it unpacks it runs this is

00:22:22,850 --> 00:22:26,870
really exciting this totally changes my

00:22:25,640 --> 00:22:29,210
outlook on all these technologies

00:22:26,870 --> 00:22:29,990
because suddenly I don't have to be a

00:22:29,210 --> 00:22:31,550
skeptic anymore

00:22:29,990 --> 00:22:33,140
I trust the build service I trust the

00:22:31,550 --> 00:22:36,860
tools we have that I trust the processes

00:22:33,140 --> 00:22:39,140
we have there and it makes both sides of

00:22:36,860 --> 00:22:40,490
the equation more interesting to me just

00:22:39,140 --> 00:22:42,920
a few ideas that are kind of bouncing

00:22:40,490 --> 00:22:46,100
around my head since since I heard about

00:22:42,920 --> 00:22:49,040
this two days ago you know I I want to

00:22:46,100 --> 00:22:53,030
see if we can do something like openSUSE

00:22:49,040 --> 00:22:54,590
leap with app images with user space

00:22:53,030 --> 00:22:57,350
applications being built from the

00:22:54,590 --> 00:22:58,730
tumbleweed sources you know because the

00:22:57,350 --> 00:23:00,290
build service can do that you know we

00:22:58,730 --> 00:23:03,020
can build tumbleweed sources for

00:23:00,290 --> 00:23:05,240
Philippe we can then wrap that all up in

00:23:03,020 --> 00:23:06,890
an app image and you know last year I

00:23:05,240 --> 00:23:08,150
had this really long one hour ranty

00:23:06,890 --> 00:23:10,220
talked about how I hated the vel

00:23:08,150 --> 00:23:11,810
projects well now we can kill them I'm

00:23:10,220 --> 00:23:13,220
in the sense of killing the publishing

00:23:11,810 --> 00:23:15,410
of the mist of leave them for building

00:23:13,220 --> 00:23:17,420
stuff the tumbleweed but you know user

00:23:15,410 --> 00:23:19,640
if we do this users will be able to

00:23:17,420 --> 00:23:21,380
hopefully get the latest version of

00:23:19,640 --> 00:23:23,450
libre office on their Leap machine

00:23:21,380 --> 00:23:25,400
without having to change everything on

00:23:23,450 --> 00:23:28,010
their leap machine that's really cool

00:23:25,400 --> 00:23:31,640
and we announced earlier this week

00:23:28,010 --> 00:23:33,230
openSUSE cubic which is a very well

00:23:31,640 --> 00:23:35,810
currently very much targeted for the

00:23:33,230 --> 00:23:38,180
document kubernetes world of a very very

00:23:35,810 --> 00:23:40,850
stable atomic filesystem atomic

00:23:38,180 --> 00:23:43,940
distribution with transactional updates

00:23:40,850 --> 00:23:46,100
on the base system well now we have this

00:23:43,940 --> 00:23:47,360
I mean if we shove a graphical

00:23:46,100 --> 00:23:49,040
environment on there may be a nice

00:23:47,360 --> 00:23:51,530
tightly polished one you know something

00:23:49,040 --> 00:23:54,560
like gnome and do all of the user

00:23:51,530 --> 00:23:57,410
applications with this suddenly there's

00:23:54,560 --> 00:23:58,790
an option of a openSUSE Chrome OS style

00:23:57,410 --> 00:24:01,790
thing you know I know you know a nice

00:23:58,790 --> 00:24:04,010
simple appliance for your grandma which

00:24:01,790 --> 00:24:05,630
is something you know well when someone

00:24:04,010 --> 00:24:07,640
talked to me about that you know just

00:24:05,630 --> 00:24:10,250
last week I said yeah good luck have fun

00:24:07,640 --> 00:24:11,810
it's crazy it would take tons of people

00:24:10,250 --> 00:24:14,330
tons of hours and it's never going to

00:24:11,810 --> 00:24:16,370
happen now I can see one or two

00:24:14,330 --> 00:24:17,780
maintainer 'he's taking what we do in

00:24:16,370 --> 00:24:19,130
the build service and taking what the

00:24:17,780 --> 00:24:21,560
app image guys have done with us and

00:24:19,130 --> 00:24:24,620
being able to knock that out

00:24:21,560 --> 00:24:26,540
a couple of weeks that is awesome

00:24:24,620 --> 00:24:27,680
admittedly I'm not going to use it but

00:24:26,540 --> 00:24:30,560
it's awesome if someone wants to take

00:24:27,680 --> 00:24:33,440
and use it and there was gonna talk

00:24:30,560 --> 00:24:34,610
today about the about package hub and

00:24:33,440 --> 00:24:38,540
all the stuff we're going in package hub

00:24:34,610 --> 00:24:41,300
and I have a hopefully no one from Sousa

00:24:38,540 --> 00:24:44,090
sees this part I have a bit of a mixed

00:24:41,300 --> 00:24:45,830
opinion of package hub because it's

00:24:44,090 --> 00:24:47,360
really exciting me that we're delivering

00:24:45,830 --> 00:24:50,930
openSUSE packages to enterprise

00:24:47,360 --> 00:24:52,550
customers but at the same time the way

00:24:50,930 --> 00:24:54,530
we're doing it is really similar to how

00:24:52,550 --> 00:24:56,570
tumbleweed back like three years ago

00:24:54,530 --> 00:24:58,730
used to be wearing a sling is a really

00:24:56,570 --> 00:25:00,140
nice stable base and we keep on putting

00:24:58,730 --> 00:25:01,730
new versions of everything in to package

00:25:00,140 --> 00:25:04,070
up you know rolling along the top of

00:25:01,730 --> 00:25:05,450
that with old tumbleweed we learned

00:25:04,070 --> 00:25:07,490
eventually that gets too big and too

00:25:05,450 --> 00:25:10,490
unwieldy in it you know starts it's not

00:25:07,490 --> 00:25:11,840
getting a little bit breaky hasn't had

00:25:10,490 --> 00:25:13,520
that problem with with package hub yet

00:25:11,840 --> 00:25:16,070
but that's a risk if package up just

00:25:13,520 --> 00:25:17,420
keeps on ballooning well for the user

00:25:16,070 --> 00:25:19,070
space tools that the user space

00:25:17,420 --> 00:25:20,150
applications at least thirteen of the

00:25:19,070 --> 00:25:22,700
desktop applications

00:25:20,150 --> 00:25:24,950
you know app this app image stuff gives

00:25:22,700 --> 00:25:26,930
us an easy way of insulating that

00:25:24,950 --> 00:25:28,820
problem we can actually you know define

00:25:26,930 --> 00:25:30,560
the scope a little bit better start

00:25:28,820 --> 00:25:32,330
using the app images there maybe start

00:25:30,560 --> 00:25:34,670
delivering app in megistus Levi's a

00:25:32,330 --> 00:25:36,440
package up so for the same problem does

00:25:34,670 --> 00:25:38,690
it in a slightly more sane way and use

00:25:36,440 --> 00:25:40,340
these technology ster so real problems

00:25:38,690 --> 00:25:46,550
that we would otherwise run headlong

00:25:40,340 --> 00:25:49,940
into but I'm not finished because this

00:25:46,550 --> 00:25:53,870
is just a pitch and so I was thinking

00:25:49,940 --> 00:25:58,550
you know what's left well snappy flat

00:25:53,870 --> 00:26:00,080
back sorry with with this now you're not

00:25:58,550 --> 00:26:02,810
just leet you know you're not just part

00:26:00,080 --> 00:26:04,760
of the equation you have your behind app

00:26:02,810 --> 00:26:08,060
image now has a better build story than

00:26:04,760 --> 00:26:10,790
you do they've got a stronger compliance

00:26:08,060 --> 00:26:12,230
story than you do and they've got a more

00:26:10,790 --> 00:26:14,030
straightforward use of experience in

00:26:12,230 --> 00:26:15,260
different distributions than you do

00:26:14,030 --> 00:26:18,260
get used to haven't got snapped in

00:26:15,260 --> 00:26:19,310
tumbleweed and even if you ignore the

00:26:18,260 --> 00:26:20,470
technical stuff and you want to argue

00:26:19,310 --> 00:26:22,670
the details with me

00:26:20,470 --> 00:26:25,850
they're kicking your ass when it comes

00:26:22,670 --> 00:26:28,190
to working with others because it's not

00:26:25,850 --> 00:26:30,260
just the fact that you're both here it's

00:26:28,190 --> 00:26:32,000
the tone it's the style it's the way

00:26:30,260 --> 00:26:33,340
they've really got their hands dirty and

00:26:32,000 --> 00:26:35,120
messed around with the build service

00:26:33,340 --> 00:26:37,850
please beam

00:26:35,120 --> 00:26:40,070
like app image it's been so fun working

00:26:37,850 --> 00:26:42,770
with them and seeing them seeing them

00:26:40,070 --> 00:26:43,850
change my mind and you know seeing us

00:26:42,770 --> 00:26:46,070
change their mind a little bit about a

00:26:43,850 --> 00:26:49,250
few things you know we've got the tools

00:26:46,070 --> 00:26:50,570
we've got the talent please work with us

00:26:49,250 --> 00:26:53,270
because I think we can do really

00:26:50,570 --> 00:26:55,250
exciting things in this space um but

00:26:53,270 --> 00:26:56,600
it's going to need to you know work in

00:26:55,250 --> 00:26:59,450
the kind of way that these guys already

00:26:56,600 --> 00:27:01,670
are working with us you know because

00:26:59,450 --> 00:27:02,020
it's just really exciting doing it that

00:27:01,670 --> 00:27:04,580
way

00:27:02,020 --> 00:27:06,320
and it's not all good news or bad news

00:27:04,580 --> 00:27:09,590
for you there are still problems across

00:27:06,320 --> 00:27:12,160
the entire thing dependency hell is

00:27:09,590 --> 00:27:15,770
still on the horizon all of these tools

00:27:12,160 --> 00:27:18,050
still have very limited or no way of

00:27:15,770 --> 00:27:19,400
really solving this issue of what's

00:27:18,050 --> 00:27:20,809
coming from the base system you know

00:27:19,400 --> 00:27:24,650
there's still assumptions being made

00:27:20,809 --> 00:27:26,240
there we need to get together these

00:27:24,650 --> 00:27:28,070
tools me together that the distributions

00:27:26,240 --> 00:27:29,929
need together and we need to discuss

00:27:28,070 --> 00:27:31,850
common standards and design common

00:27:29,929 --> 00:27:33,530
standards so everybody can go into this

00:27:31,850 --> 00:27:35,630
equation with simple ideas of what's

00:27:33,530 --> 00:27:37,400
going on there without that common

00:27:35,630 --> 00:27:40,010
understanding application developers

00:27:37,400 --> 00:27:41,480
will just find frustration and users

00:27:40,010 --> 00:27:43,550
will just find crashed self and

00:27:41,480 --> 00:27:44,809
distributions will just keep on doing

00:27:43,550 --> 00:27:46,130
what they're doing at this context

00:27:44,809 --> 00:27:47,750
they're doing and then we'll actually

00:27:46,130 --> 00:27:50,150
miss out on good opportunities to use

00:27:47,750 --> 00:27:55,190
this stuff in the way like I was talking

00:27:50,150 --> 00:27:57,890
about and security sandboxing the app

00:27:55,190 --> 00:27:59,720
isolation side of things is a complete

00:27:57,890 --> 00:28:01,370
mess right now like everybody has cool

00:27:59,720 --> 00:28:04,250
ideas and no one's finished implementing

00:28:01,370 --> 00:28:05,929
anything the app image side of things

00:28:04,250 --> 00:28:06,980
well I kind of understand that could

00:28:05,929 --> 00:28:09,410
they've gone into this with the approach

00:28:06,980 --> 00:28:12,140
of you know use fire gel or whatever the

00:28:09,410 --> 00:28:13,490
hell you want that's cool but I'd like

00:28:12,140 --> 00:28:16,220
whatever the hell you want to be a

00:28:13,490 --> 00:28:17,900
little bit affine than that you know

00:28:16,220 --> 00:28:20,450
snap D obviously has the app on the side

00:28:17,900 --> 00:28:23,030
of things we love app armor but you know

00:28:20,450 --> 00:28:25,550
your patches aren't up streamed yet and

00:28:23,030 --> 00:28:27,230
I know yet that's cool you're fixing

00:28:25,550 --> 00:28:29,960
that but you know let's get that done

00:28:27,230 --> 00:28:32,120
let's get that in because well if I had

00:28:29,960 --> 00:28:35,120
my way of doing my way I'd like to see a

00:28:32,120 --> 00:28:36,710
farmer kind of become the single way of

00:28:35,120 --> 00:28:38,870
doing this I think it makes more sense I

00:28:36,710 --> 00:28:40,040
understand a farmer or more than I can

00:28:38,870 --> 00:28:42,110
understand bubble wrap and what they're

00:28:40,040 --> 00:28:44,390
trying to do there I think that bubble

00:28:42,110 --> 00:28:47,030
wrap stuff is a little bit too desktop

00:28:44,390 --> 00:28:48,539
application orientated which is cool for

00:28:47,030 --> 00:28:50,699
desktop applications but you know

00:28:48,539 --> 00:28:52,409
there's scope here for using it you know

00:28:50,699 --> 00:28:55,049
in hub of the wind wonderful ways and

00:28:52,409 --> 00:28:56,999
IOT and stuff so let's see what we can

00:28:55,049 --> 00:29:00,259
do about getting a Parma in there

00:28:56,999 --> 00:29:02,879
polished up and do it all the way and

00:29:00,259 --> 00:29:04,469
with that I just want to kind of say

00:29:02,879 --> 00:29:07,619
thank you I mean this is becoming a

00:29:04,469 --> 00:29:08,969
really good lesson to me of you know two

00:29:07,619 --> 00:29:10,349
months ago I was screaming that I

00:29:08,969 --> 00:29:13,079
thought the world was ending and this

00:29:10,349 --> 00:29:14,399
would never work out alright and you

00:29:13,079 --> 00:29:17,820
know I've become a convert I want to

00:29:14,399 --> 00:29:19,409
help make this better now um so let's

00:29:17,820 --> 00:29:27,469
just get on to it and does anybody have

00:29:19,409 --> 00:29:31,409
any questions anybody go on then

00:29:27,469 --> 00:29:33,659
obviously I was hoping you did Oh Mike

00:29:31,409 --> 00:29:35,399
Lee so I'm curious about security and

00:29:33,659 --> 00:29:37,049
learn licensing compliance as you

00:29:35,399 --> 00:29:38,999
mentioned so you say you have a app

00:29:37,049 --> 00:29:41,249
image built on OBS yes

00:29:38,999 --> 00:29:42,809
what does actually check that maybe that

00:29:41,249 --> 00:29:44,759
app image is built from a good tree

00:29:42,809 --> 00:29:46,589
somewhere else that you're still

00:29:44,759 --> 00:29:48,089
compliant that doesn't that the get tree

00:29:46,589 --> 00:29:50,549
does not contain stuff in a different

00:29:48,089 --> 00:29:52,289
incompatible license and it doesn't

00:29:50,549 --> 00:29:54,419
contain a bundled copy of a library

00:29:52,289 --> 00:29:56,219
that's security vulnerabilities you're

00:29:54,419 --> 00:29:58,949
technically right umm I mean yeah if

00:29:56,219 --> 00:30:00,869
someone's taking an OBS project a random

00:29:58,949 --> 00:30:03,239
home OBS project and loading up images

00:30:00,869 --> 00:30:06,869
from that there's no magic licensed

00:30:03,239 --> 00:30:08,190
solution there but you know like we were

00:30:06,869 --> 00:30:10,769
talking about earlier this week like my

00:30:08,190 --> 00:30:11,969
other talk from Friday you know if you

00:30:10,769 --> 00:30:13,499
look at what we're doing with tumbleweed

00:30:11,969 --> 00:30:15,029
you've got a pool of software and

00:30:13,499 --> 00:30:16,649
tumbleweed where we are keeping up with

00:30:15,029 --> 00:30:18,569
upstream you know hunt you know Peck we

00:30:16,649 --> 00:30:20,069
were just about to publish a new GCC

00:30:18,569 --> 00:30:22,049
seven version that we did while we were

00:30:20,069 --> 00:30:23,219
here you know the pace of change in

00:30:22,049 --> 00:30:25,979
tumbleweed is fine so you've got this

00:30:23,219 --> 00:30:27,629
huge pool that is audited that is there

00:30:25,979 --> 00:30:29,969
that is done that's keeping up with up

00:30:27,629 --> 00:30:32,699
streams so if you're building your app

00:30:29,969 --> 00:30:33,929
image based on tumbleweed packages you

00:30:32,699 --> 00:30:35,579
know you've just got to worry that about

00:30:33,929 --> 00:30:37,859
your tiny little dip your your little

00:30:35,579 --> 00:30:39,329
part there which means all of the other

00:30:37,859 --> 00:30:40,619
dependencies you're feeding into that

00:30:39,329 --> 00:30:42,539
they've been audited they've been

00:30:40,619 --> 00:30:45,409
checked they work in the sense of Tompa

00:30:42,539 --> 00:30:47,999
we've done completely agree and snaps

00:30:45,409 --> 00:30:50,279
exactly the same thing with the build

00:30:47,999 --> 00:30:52,589
stuff I talked about yeah but exactly

00:30:50,279 --> 00:30:55,709
exactly the same thing with a bun too

00:30:52,589 --> 00:30:58,229
and only a bun too well still we're

00:30:55,709 --> 00:30:59,519
doing it and exactly the same as you

00:30:58,229 --> 00:31:01,409
though yeah but with the build service

00:30:59,519 --> 00:31:02,309
way you can do it with everything I just

00:31:01,409 --> 00:31:04,499
said with tumbleweed

00:31:02,309 --> 00:31:06,659
and you can do it with someone - sure

00:31:04,499 --> 00:31:09,450
and you can do it with Josh and we're

00:31:06,659 --> 00:31:11,129
gonna get it even you can do that your

00:31:09,450 --> 00:31:12,899
way or you can just copy what they

00:31:11,129 --> 00:31:14,190
didn't do with the build service no

00:31:12,899 --> 00:31:16,200
because the problems are not like that

00:31:14,190 --> 00:31:19,049
the problems are technical you load the

00:31:16,200 --> 00:31:20,429
stack and it's not a prob about building

00:31:19,049 --> 00:31:21,749
you can build it you just can't run it

00:31:20,429 --> 00:31:23,159
yet once we get to the running you can

00:31:21,749 --> 00:31:25,830
build it on top of anything and run it

00:31:23,159 --> 00:31:28,549
and that's fine so we have the same goal

00:31:25,830 --> 00:31:35,039
here there's no disagreement okay

00:31:28,549 --> 00:31:39,119
I'll believe it when I see it any more

00:31:35,039 --> 00:31:41,099
comments questions cool so there's two

00:31:39,119 --> 00:31:44,039
issues actually don't really see soft

00:31:41,099 --> 00:31:46,499
yet so first of all you still end up

00:31:44,039 --> 00:31:49,589
with a certain amount of size right yeah

00:31:46,499 --> 00:31:53,580
because you need redundancy and of

00:31:49,589 --> 00:31:55,589
course one thing that always concerns me

00:31:53,580 --> 00:31:59,129
is the laziness of developers because

00:31:55,589 --> 00:32:02,309
they start to rely on compatibility or

00:31:59,129 --> 00:32:04,979
outdated libraries so especially if you

00:32:02,309 --> 00:32:07,669
have something large like say framework

00:32:04,979 --> 00:32:10,379
X which depends on a lot of libraries

00:32:07,669 --> 00:32:13,019
then you have a large footprint which

00:32:10,379 --> 00:32:15,659
becomes outdated now I don't want that

00:32:13,019 --> 00:32:18,839
to happen with stuff like an open SSL

00:32:15,659 --> 00:32:21,269
for example what do you think about that

00:32:18,839 --> 00:32:23,789
I it's a perfectly fair point it's a

00:32:21,269 --> 00:32:26,009
perfectly fair problem and the answers

00:32:23,789 --> 00:32:27,029
are exactly you know I don't see that

00:32:26,009 --> 00:32:28,769
problem any different in the

00:32:27,029 --> 00:32:30,659
containerized application context and I

00:32:28,769 --> 00:32:33,450
do in the distribution one actually um

00:32:30,659 --> 00:32:35,849
you know we we suffer that same pain um

00:32:33,450 --> 00:32:36,779
I'm kind of hoping that the inner gating

00:32:35,849 --> 00:32:38,070
distributions around the type

00:32:36,779 --> 00:32:39,869
distributions and projects around the

00:32:38,070 --> 00:32:41,729
table and with like the kind of common

00:32:39,869 --> 00:32:44,190
framework I did that we sort of you know

00:32:41,729 --> 00:32:46,499
it's coalescing might give a little bit

00:32:44,190 --> 00:32:49,320
of a push to you know help drive that

00:32:46,499 --> 00:32:51,059
problem away a little bit you know just

00:32:49,320 --> 00:32:52,979
like it did with like KDE and Li

00:32:51,059 --> 00:32:54,299
pleading ak10 OTS release and you know

00:32:52,979 --> 00:32:55,409
Katie either making a commitment to that

00:32:54,299 --> 00:32:58,219
of you know that's how they're going to

00:32:55,409 --> 00:33:01,739
do that and solve that problem for us

00:32:58,219 --> 00:33:03,269
yeah it's it's a very real problem we

00:33:01,739 --> 00:33:04,799
never really solved it on the dependents

00:33:03,269 --> 00:33:06,899
on the distribution side of things on

00:33:04,799 --> 00:33:09,149
our own this actually makes it

00:33:06,899 --> 00:33:10,649
potentially a little bit more better it

00:33:09,149 --> 00:33:14,539
gives us a second chance to do it right

00:33:10,649 --> 00:33:14,539
this time hopefully

00:33:14,779 --> 00:33:25,379
there's a question there yeah i if i

00:33:22,470 --> 00:33:29,369
will be developer of a pitch I still

00:33:25,379 --> 00:33:32,070
feel I I that Android kick our ass

00:33:29,369 --> 00:33:35,009
because it's so much easier to develop

00:33:32,070 --> 00:33:38,399
for Android and theirs they have stay

00:33:35,009 --> 00:33:41,279
the same problem they have let's call it

00:33:38,399 --> 00:33:43,859
distributors which is actually hardware

00:33:41,279 --> 00:33:45,830
vendors that provide their phones and

00:33:43,859 --> 00:33:46,950
they have some stable base which is

00:33:45,830 --> 00:33:50,340
versioned

00:33:46,950 --> 00:33:52,379
Android and yeah of course they have

00:33:50,340 --> 00:33:55,590
problem security and such stuff but I

00:33:52,379 --> 00:33:57,960
still feel that from developer point of

00:33:55,590 --> 00:34:04,529
view it's much easier to develop for

00:33:57,960 --> 00:34:06,450
Android than any epidemic is why what

00:34:04,529 --> 00:34:08,790
what's the difference there because I

00:34:06,450 --> 00:34:10,679
mean ultimately you know an Android app

00:34:08,790 --> 00:34:13,530
it's just a bundle of a whole bunch of

00:34:10,679 --> 00:34:15,869
dependencies it might be each I can oh

00:34:13,530 --> 00:34:17,309
yeah how would that be easier both this

00:34:15,869 --> 00:34:18,990
question I've got to get to you then is

00:34:17,309 --> 00:34:20,639
how is that easy about getting the

00:34:18,990 --> 00:34:23,780
application out in the first place and

00:34:20,639 --> 00:34:25,460
then how is it easier maintaining it

00:34:23,780 --> 00:34:28,950
yeah

00:34:25,460 --> 00:34:32,970
one part it's easier the day they have a

00:34:28,950 --> 00:34:35,970
common base they can easily they its

00:34:32,970 --> 00:34:38,460
backward somehow backward compatible and

00:34:35,970 --> 00:34:41,339
you can say I support this version of

00:34:38,460 --> 00:34:44,849
Android or newer and yep it keeps

00:34:41,339 --> 00:34:48,240
working but yeah I think finding such

00:34:44,849 --> 00:34:50,040
base in Linux is as you mentioned in the

00:34:48,240 --> 00:34:54,359
new external base is basically missing

00:34:50,040 --> 00:34:56,750
and there's a lot much more stuff in

00:34:54,359 --> 00:35:00,480
Android that's common than in Linux

00:34:56,750 --> 00:35:04,319
which is yeah glad sucks because you

00:35:00,480 --> 00:35:06,780
have to bundle much more in Android yeah

00:35:04,319 --> 00:35:08,040
I I I can't argue with that part that's

00:35:06,780 --> 00:35:10,559
why I think we need this

00:35:08,040 --> 00:35:12,270
because I think you know the problem

00:35:10,559 --> 00:35:14,130
with an extended base is the scope is

00:35:12,270 --> 00:35:16,170
too broad you know it always wants to

00:35:14,130 --> 00:35:18,569
trying to define everything at every

00:35:16,170 --> 00:35:19,920
level of every bit of the stack the nice

00:35:18,569 --> 00:35:22,079
thing with these technologies is they

00:35:19,920 --> 00:35:23,849
push that problem down to a certain

00:35:22,079 --> 00:35:26,430
amount I mean snap tries to push it down

00:35:23,849 --> 00:35:27,990
to the kernel app image tries to pin a

00:35:26,430 --> 00:35:28,530
push it down quite quite low as well a

00:35:27,990 --> 00:35:30,270
flat pack

00:35:28,530 --> 00:35:31,740
keeps on changing its mind because then

00:35:30,270 --> 00:35:33,810
the runtimes move the line all over the

00:35:31,740 --> 00:35:35,580
place but you know at least that line

00:35:33,810 --> 00:35:37,530
tries to get defined further down and

00:35:35,580 --> 00:35:39,900
further down the stack so if we just

00:35:37,530 --> 00:35:42,000
figure out where that line is and define

00:35:39,900 --> 00:35:44,280
a common base below there you know

00:35:42,000 --> 00:35:45,540
common what let's say if it line gets

00:35:44,280 --> 00:35:48,720
drawn near the bot the kernel you know a

00:35:45,540 --> 00:35:50,850
basically common standard conflict of

00:35:48,720 --> 00:35:53,040
the kernel you know what-what config is

00:35:50,850 --> 00:35:54,390
likely to be there you know what is in

00:35:53,040 --> 00:35:56,280
LT yet you know are we going to follow

00:35:54,390 --> 00:35:58,650
the upstream LTS kernel and move along

00:35:56,280 --> 00:36:00,090
at that kind of pace just so you can you

00:35:58,650 --> 00:36:02,340
know tag that with a version and say

00:36:00,090 --> 00:36:04,920
okay I'm supporting you know container

00:36:02,340 --> 00:36:06,570
base version blah and then you get that

00:36:04,920 --> 00:36:08,760
solution you get that situation you have

00:36:06,570 --> 00:36:11,190
with Android I think we need that in the

00:36:08,760 --> 00:36:13,110
Linux container containerized app side

00:36:11,190 --> 00:36:15,330
of things as well totally yeah and

00:36:13,110 --> 00:36:17,190
another part that sucks for me as

00:36:15,330 --> 00:36:19,440
developer is that we don't have

00:36:17,190 --> 00:36:23,040
commonplace verb to distribute such

00:36:19,440 --> 00:36:27,030
stuff they have the the Android store

00:36:23,040 --> 00:36:29,580
how they call it and you just upload it

00:36:27,030 --> 00:36:31,710
there and you are fine every every

00:36:29,580 --> 00:36:33,360
Android user even if it's from different

00:36:31,710 --> 00:36:37,080
distribution or they're having and we

00:36:33,360 --> 00:36:42,060
still miss it Linux for yeah for many

00:36:37,080 --> 00:36:43,590
years yeah I given the nature of the the

00:36:42,060 --> 00:36:45,300
open source word I don't think you will

00:36:43,590 --> 00:36:47,850
have a single place I mean you might

00:36:45,300 --> 00:36:48,960
have a dominant place and because you

00:36:47,850 --> 00:36:52,020
know someone's going to win the

00:36:48,960 --> 00:36:53,490
popularity war but whether it'll be a

00:36:52,020 --> 00:36:57,120
single one I mean even Snapp has

00:36:53,490 --> 00:36:59,400
multiple store options already OBS is

00:36:57,120 --> 00:37:01,140
now another one for app image it there

00:36:59,400 --> 00:37:03,180
will be fragmentation there I'd love to

00:37:01,140 --> 00:37:05,940
see a way of pulling it all together

00:37:03,180 --> 00:37:09,930
somehow and because I think that'll help

00:37:05,940 --> 00:37:11,250
in the long run but that's I yeah that's

00:37:09,930 --> 00:37:13,950
a problem for the feet for the future I

00:37:11,250 --> 00:37:15,720
think but something's yeah something we

00:37:13,950 --> 00:37:18,210
have to buy about definitely yeah so

00:37:15,720 --> 00:37:21,480
what I want to say is that we are still

00:37:18,210 --> 00:37:23,220
behind and we're still behind Android no

00:37:21,480 --> 00:37:25,830
doubt about that from developer point of

00:37:23,220 --> 00:37:29,280
view and I think user point of view is

00:37:25,830 --> 00:37:31,230
also yeah yeah and that's and that's

00:37:29,280 --> 00:37:32,850
that's something that I am you know

00:37:31,230 --> 00:37:35,010
that's a drum I think I'll keep on

00:37:32,850 --> 00:37:36,480
beating because I think if we can get a

00:37:35,010 --> 00:37:38,850
bit more commonality between these

00:37:36,480 --> 00:37:40,350
different tool sets it makes that a

00:37:38,850 --> 00:37:42,250
little bit easier to catch up with my

00:37:40,350 --> 00:37:43,810
android are makes it a little bit

00:37:42,250 --> 00:37:45,340
also to be honest we kind of one of

00:37:43,810 --> 00:37:47,050
motivations behind this I can see how

00:37:45,340 --> 00:37:49,870
this makes distributions lives easier

00:37:47,050 --> 00:37:52,480
you know less stuff as to maintain you

00:37:49,870 --> 00:37:54,040
know and we're all lazy so you know I

00:37:52,480 --> 00:37:56,020
can I can see how we can actually use

00:37:54,040 --> 00:37:59,080
this to change everything in a rather

00:37:56,020 --> 00:38:02,410
nice way but it's only going to work if

00:37:59,080 --> 00:38:04,480
we yeah kind of find ways of applying

00:38:02,410 --> 00:38:07,750
focus to that and you're coming up with

00:38:04,480 --> 00:38:09,310
some common standards and then seeing

00:38:07,750 --> 00:38:17,680
how the technologies actually shake out

00:38:09,310 --> 00:38:21,880
in the long run cool

00:38:17,680 --> 00:38:24,330
any more questions no okay

00:38:21,880 --> 00:38:24,330

YouTube URL: https://www.youtube.com/watch?v=BrWB2OZ9h2Y


