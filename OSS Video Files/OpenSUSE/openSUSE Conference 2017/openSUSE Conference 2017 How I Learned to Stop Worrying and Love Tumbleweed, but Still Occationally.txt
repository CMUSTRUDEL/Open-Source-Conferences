Title: openSUSE Conference 2017 How I Learned to Stop Worrying and Love Tumbleweed, but Still Occationally
Publication date: 2017-05-27
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1322-how-i-learned-to-stop-worrying-and-love-tumbleweed-but-still-occationally-worry

Everyone should be running a rolling release, and we should keep making it better


Rolling Releases are the future of Linux distributions. They are already the better solution for power users & developers. Tumbleweed is the future of Rolling Releases. The methodologies, techniques, and capabilities of Tumbleweed are opening up new doors, creating possibilities, and disrupting existing technologies beyond its borders. This session will explain how and why openSUSE Tumbleweed is paving the way for that future, while already being "the reliable rolling release". The talk will dispel the fears, uncertainties and doubts that many have regarding rolling releases in general and Tumbleweed specifically, and share how you can get involved both using, and improving, this exciting fast moving foundation of the openSUSE Project.

But not everything is perfect. This talk will also identify some rough edges in Tumbleweed and suggest collaborative solutions as to how the openSUSE Project could start addressing them, so we can continue the exceptional progress Tumbleweed has made into the future and beyond the year 2020.



Richard Brown
Captions: 
	00:00:07,849 --> 00:00:12,440
I'm now the after-lunch locked

00:00:10,340 --> 00:00:13,610
I hope don't mind if people would start

00:00:12,440 --> 00:00:14,570
tricking again but I'm going to get

00:00:13,610 --> 00:00:17,780
things started

00:00:14,570 --> 00:00:19,970
so I'm Richard Brown chairman of the

00:00:17,780 --> 00:00:23,510
openSUSE project and I'm here to talk to

00:00:19,970 --> 00:00:25,369
you today about tumbleweed why I think

00:00:23,510 --> 00:00:27,949
it is the best thing since sliced bread

00:00:25,369 --> 00:00:29,980
why I'm most excited about this than

00:00:27,949 --> 00:00:33,470
anything else we're doing an open Sousa

00:00:29,980 --> 00:00:37,790
why I think rolling releases are the

00:00:33,470 --> 00:00:39,440
future of Linux distributions and some

00:00:37,790 --> 00:00:41,150
of the bits and pieces where I don't

00:00:39,440 --> 00:00:42,890
think we're doing everything that we

00:00:41,150 --> 00:00:46,100
could be doing to make it as smooth as

00:00:42,890 --> 00:00:49,790
it possibly could be because you know

00:00:46,100 --> 00:00:51,530
we're not perfect we're just great to

00:00:49,790 --> 00:00:53,660
talk about rolling releases I really

00:00:51,530 --> 00:00:56,090
have to start at the beginning really

00:00:53,660 --> 00:00:58,239
have to explain to the fina where Linux

00:00:56,090 --> 00:01:01,280
comes from what is a distribution and

00:00:58,239 --> 00:01:02,329
you know when we're talking about Linux

00:01:01,280 --> 00:01:04,449
distributions or traditional

00:01:02,329 --> 00:01:08,090
distributions we are talking about

00:01:04,449 --> 00:01:10,640
regular releases it's what most Linux

00:01:08,090 --> 00:01:12,530
distributions follow it's a model where

00:01:10,640 --> 00:01:14,060
you know you collect all your different

00:01:12,530 --> 00:01:16,220
upstream packages you put them all

00:01:14,060 --> 00:01:20,149
together you make a cohesive operating

00:01:16,220 --> 00:01:23,899
system with as a distribution and you're

00:01:20,149 --> 00:01:26,420
releasing it every X years or months you

00:01:23,899 --> 00:01:28,539
know depends you know on your users and

00:01:26,420 --> 00:01:30,920
your use case of how often that is

00:01:28,539 --> 00:01:33,050
community distributions generally favor

00:01:30,920 --> 00:01:35,390
slightly faster release schedules so

00:01:33,050 --> 00:01:39,050
distribution is like Fedora Ubuntu or

00:01:35,390 --> 00:01:41,119
the old openSUSE would be in every you

00:01:39,050 --> 00:01:43,280
know six to eight you know six to twelve

00:01:41,119 --> 00:01:44,660
months and then of course you have

00:01:43,280 --> 00:01:46,520
things like enterprise distributions

00:01:44,660 --> 00:01:47,780
where the you know new major release of

00:01:46,520 --> 00:01:52,190
an enterprise distribution will be

00:01:47,780 --> 00:01:53,899
several years away once that release is

00:01:52,190 --> 00:01:57,410
out once users can download that

00:01:53,899 --> 00:01:59,060
software and start using it the general

00:01:57,410 --> 00:02:01,399
model of a traditional distribution is

00:01:59,060 --> 00:02:03,170
to not dramatically change the software

00:02:01,399 --> 00:02:05,259
within that you know it being very very

00:02:03,170 --> 00:02:07,910
conservative from that point and only

00:02:05,259 --> 00:02:09,739
very reluctantly upgrading very

00:02:07,910 --> 00:02:11,599
reluctantly patching those things you

00:02:09,739 --> 00:02:14,390
need to patch to keep the operating

00:02:11,599 --> 00:02:16,190
system working but you don't want to

00:02:14,390 --> 00:02:18,560
introduce unexpected changes you don't

00:02:16,190 --> 00:02:20,360
want to break anything so you know very

00:02:18,560 --> 00:02:21,870
very reluctantly doing that generally

00:02:20,360 --> 00:02:23,640
freezing anything

00:02:21,870 --> 00:02:26,340
which means when you look at sort of the

00:02:23,640 --> 00:02:28,170
big wide open source world and

00:02:26,340 --> 00:02:30,379
everything else going on in packages

00:02:28,170 --> 00:02:33,420
elsewhere upstream projects elsewhere

00:02:30,379 --> 00:02:36,260
the only choice to maintain a regular

00:02:33,420 --> 00:02:38,430
release is with heavy use of backporting

00:02:36,260 --> 00:02:41,129
you know so taking patches and fixes

00:02:38,430 --> 00:02:43,260
from the upstream project and putting

00:02:41,129 --> 00:02:46,140
them into your stable regular release

00:02:43,260 --> 00:02:47,940
one and like I said this is the the

00:02:46,140 --> 00:02:49,470
traditional model it's you know followed

00:02:47,940 --> 00:02:52,230
by debian fedora

00:02:49,470 --> 00:02:55,980
openSUSE leap follows it as well and

00:02:52,230 --> 00:02:57,750
yeah Ubuntu but developing these is

00:02:55,980 --> 00:02:59,549
tricky you need something to start this

00:02:57,750 --> 00:03:01,980
how do you develop a regular regular

00:02:59,549 --> 00:03:03,569
release and most other Linux

00:03:01,980 --> 00:03:06,180
distributions rely on a development

00:03:03,569 --> 00:03:08,730
branch to do this we used to ours was

00:03:06,180 --> 00:03:10,769
called factory but you know other

00:03:08,730 --> 00:03:13,799
distributions have things like Debian

00:03:10,769 --> 00:03:15,329
Sid or fedorova hide or bun to have

00:03:13,799 --> 00:03:18,090
something that they kind of cool dailies

00:03:15,329 --> 00:03:20,819
but it never seems to work but it's

00:03:18,090 --> 00:03:25,019
where your developers of a distribution

00:03:20,819 --> 00:03:26,609
should be using actively actively

00:03:25,019 --> 00:03:30,799
putting in their various upstream

00:03:26,609 --> 00:03:33,239
packages to constantly give you a

00:03:30,799 --> 00:03:35,190
rolling picture of you know where is

00:03:33,239 --> 00:03:37,379
your codebase what is your next regular

00:03:35,190 --> 00:03:39,030
release going to look like nothing's

00:03:37,379 --> 00:03:41,609
ever frozen in there it's always we're

00:03:39,030 --> 00:03:45,030
always moving and it's almost always

00:03:41,609 --> 00:03:46,859
broken this is true of every single one

00:03:45,030 --> 00:03:51,150
out there every single development

00:03:46,859 --> 00:03:54,180
branch it's typically broken and this is

00:03:51,150 --> 00:03:55,709
problematic because developers need

00:03:54,180 --> 00:03:58,709
their system to be as close as possible

00:03:55,709 --> 00:04:00,299
to the upstreams they're working on you

00:03:58,709 --> 00:04:02,190
know they need to be able to see where

00:04:00,299 --> 00:04:03,810
is you know both where is their

00:04:02,190 --> 00:04:06,419
particular part they're used to and

00:04:03,810 --> 00:04:08,760
everything else around them they need to

00:04:06,419 --> 00:04:10,919
be able to see how it's all working dev

00:04:08,760 --> 00:04:12,780
branches accomplish that but they're

00:04:10,919 --> 00:04:15,930
completely and utterly unstable unusable

00:04:12,780 --> 00:04:18,299
so you've got this sort of nice deadlock

00:04:15,930 --> 00:04:20,370
problem of you know how do you actually

00:04:18,299 --> 00:04:22,800
then get a good picture of what's really

00:04:20,370 --> 00:04:24,479
going on what generally happens is

00:04:22,800 --> 00:04:26,039
developers stop using their dev branch

00:04:24,479 --> 00:04:28,110
apart from when they really really have

00:04:26,039 --> 00:04:30,690
to to you know it comply with some

00:04:28,110 --> 00:04:32,849
process somewhere and that means you

00:04:30,690 --> 00:04:34,490
have very narrow attention being paid to

00:04:32,849 --> 00:04:36,410
what's actually going on

00:04:34,490 --> 00:04:39,440
in all those up streams that you're

00:04:36,410 --> 00:04:41,000
relying on to build your distribution so

00:04:39,440 --> 00:04:42,680
it doesn't work for developers they just

00:04:41,000 --> 00:04:45,050
move on and find some other way of

00:04:42,680 --> 00:04:48,400
hacking together their packages to get

00:04:45,050 --> 00:04:50,960
into the domain regular releases and

00:04:48,400 --> 00:04:52,699
that becomes a really big problem as a

00:04:50,960 --> 00:04:55,039
distribution project so traditional

00:04:52,699 --> 00:04:56,780
openSUSE as a distribution project we

00:04:55,039 --> 00:05:00,169
used to do this we used to have factory

00:04:56,780 --> 00:05:02,180
and the as your users and contributors

00:05:00,169 --> 00:05:04,880
of your dev branch decline your entire

00:05:02,180 --> 00:05:08,090
project starts getting slower there's no

00:05:04,880 --> 00:05:10,580
doubt about it you get less indications

00:05:08,090 --> 00:05:12,229
of bugs before a regular release you get

00:05:10,580 --> 00:05:14,300
less new features in your regular

00:05:12,229 --> 00:05:16,130
releases you know less innovation there

00:05:14,300 --> 00:05:18,320
because nobody knows what's going on so

00:05:16,130 --> 00:05:20,780
even the most ambitious features they

00:05:18,320 --> 00:05:23,060
think of are relatively narrow things

00:05:20,780 --> 00:05:24,800
compared to what they could possibly be

00:05:23,060 --> 00:05:27,770
getting if they had a broader view of

00:05:24,800 --> 00:05:29,870
where the world is you end up with

00:05:27,770 --> 00:05:31,909
overtime particular sort of increased

00:05:29,870 --> 00:05:33,919
technical debt stuff lies lingering

00:05:31,909 --> 00:05:36,289
around in your dev branch for ages and

00:05:33,919 --> 00:05:37,909
no one ever fixes it which then means

00:05:36,289 --> 00:05:39,470
when you do eventually have a regular

00:05:37,909 --> 00:05:41,509
release and you do eventually need to

00:05:39,470 --> 00:05:43,490
fix it clearing that technical debt

00:05:41,509 --> 00:05:45,380
makes that release more more expensive

00:05:43,490 --> 00:05:47,389
it's more and more hard work it's more

00:05:45,380 --> 00:05:51,289
and more work to get the community

00:05:47,389 --> 00:05:53,780
involved in doing it and yeah it just

00:05:51,289 --> 00:05:57,979
really really starts holding the entire

00:05:53,780 --> 00:05:59,449
project back it's not just a problem for

00:05:57,979 --> 00:06:01,719
the distributions trying to get this

00:05:59,449 --> 00:06:04,190
software into the hands of users though

00:06:01,719 --> 00:06:07,250
it's a problem for upstream developers

00:06:04,190 --> 00:06:09,020
also because every upstream project

00:06:07,250 --> 00:06:10,909
especially in this day and age wants to

00:06:09,020 --> 00:06:12,139
get their hands in the you know once you

00:06:10,909 --> 00:06:15,289
get the software in the hands of users

00:06:12,139 --> 00:06:18,979
as fast as humanly possible dev branch

00:06:15,289 --> 00:06:20,870
is technically accomplish this but they

00:06:18,979 --> 00:06:23,570
useless really because no user is going

00:06:20,870 --> 00:06:25,490
to be using them regular releases don't

00:06:23,570 --> 00:06:27,800
accomplish it whatever schedule whatever

00:06:25,490 --> 00:06:30,440
distribution picks it's going to be too

00:06:27,800 --> 00:06:32,960
slow for that goal of getting it in the

00:06:30,440 --> 00:06:35,750
hands of users quickly and then

00:06:32,960 --> 00:06:38,180
containerized apps things like app image

00:06:35,750 --> 00:06:41,060
flat-pack snappy you know promise to

00:06:38,180 --> 00:06:42,800
solve this but it's not quite that easy

00:06:41,060 --> 00:06:44,839
you know they'll make get there one day

00:06:42,800 --> 00:06:46,699
and if you want to hear more about my

00:06:44,839 --> 00:06:47,729
rant about that you can come see my talk

00:06:46,699 --> 00:06:51,479
on Sunday

00:06:47,729 --> 00:06:54,349
that Drake lock in the other room but

00:06:51,479 --> 00:06:56,729
yeah the problem is not ideal there and

00:06:54,349 --> 00:06:59,279
then when you start looking at users and

00:06:56,729 --> 00:07:02,639
particularly enthusiastic Linux users

00:06:59,279 --> 00:07:03,990
power users make the kind of core part

00:07:02,639 --> 00:07:05,960
of the community that are interested in

00:07:03,990 --> 00:07:08,580
open source because it's open source

00:07:05,960 --> 00:07:10,249
they also want to have that software as

00:07:08,580 --> 00:07:12,629
fast as possible they don't want to wait

00:07:10,249 --> 00:07:15,749
but when they get it they want to make

00:07:12,629 --> 00:07:18,689
sure it works so dev branches don't work

00:07:15,749 --> 00:07:22,860
there either and there's also the sort

00:07:18,689 --> 00:07:25,139
of second thing the users want a

00:07:22,860 --> 00:07:27,120
consistent experience they want it to

00:07:25,139 --> 00:07:30,149
feel like it's well put together that

00:07:27,120 --> 00:07:33,809
you know you know collectively themed

00:07:30,149 --> 00:07:35,309
looks the right that feels right the UX

00:07:33,809 --> 00:07:38,159
works properly these are key

00:07:35,309 --> 00:07:39,689
requirements that users have and this is

00:07:38,159 --> 00:07:42,029
another problem actually that a lot of

00:07:39,689 --> 00:07:43,050
these container apps are starting to

00:07:42,029 --> 00:07:44,759
bump into is you know they're getting

00:07:43,050 --> 00:07:47,279
out there and running these things but

00:07:44,759 --> 00:07:49,620
you know getting that that feeling of

00:07:47,279 --> 00:07:53,849
this is a consistently built in a

00:07:49,620 --> 00:07:56,399
consistently engineered solution just

00:07:53,849 --> 00:07:57,930
doesn't work with either the regular

00:07:56,399 --> 00:07:59,729
release model where it's always too slow

00:07:57,930 --> 00:08:01,020
or the development branch model where

00:07:59,729 --> 00:08:03,810
everything is just moving too fast and

00:08:01,020 --> 00:08:05,099
breaking and these are the people we've

00:08:03,810 --> 00:08:06,270
gotta capture because these are the

00:08:05,099 --> 00:08:08,339
people that are going to be our

00:08:06,270 --> 00:08:09,810
contributors in the future they're the

00:08:08,339 --> 00:08:11,129
ones I'm enthusiastic they're the ones

00:08:09,810 --> 00:08:13,919
who are looking at these up streams who

00:08:11,129 --> 00:08:15,479
are keen on what we're doing we need to

00:08:13,919 --> 00:08:17,370
find a way of encouraging them to use

00:08:15,479 --> 00:08:19,649
this software and you know get enamored

00:08:17,370 --> 00:08:21,240
by it so we can then start having them

00:08:19,649 --> 00:08:26,009
help maintain it and make things even

00:08:21,240 --> 00:08:29,279
quicker and faster rolling releases are

00:08:26,009 --> 00:08:34,050
the answer to these problems but what is

00:08:29,279 --> 00:08:35,389
a rolling release well in basic terms a

00:08:34,050 --> 00:08:38,339
rolling release is a Linux distribution

00:08:35,389 --> 00:08:41,639
without a release schedule no version

00:08:38,339 --> 00:08:44,970
numbers no point releases no milestone

00:08:41,639 --> 00:08:47,029
dates frequently updating all of the

00:08:44,970 --> 00:08:50,970
packages in the operating system

00:08:47,029 --> 00:08:52,769
whenever they're ready so you can just

00:08:50,970 --> 00:08:55,529
download it start using it and you're

00:08:52,769 --> 00:08:58,170
always going to get the latest ready

00:08:55,529 --> 00:08:59,700
stable version of everything

00:08:58,170 --> 00:09:01,530
there's other examples of course I'm

00:08:59,700 --> 00:09:03,560
talking about tumbleweed and but there's

00:09:01,530 --> 00:09:05,490
sort of two other main distributions

00:09:03,560 --> 00:09:06,660
advocating this model and really pushing

00:09:05,490 --> 00:09:09,060
it is

00:09:06,660 --> 00:09:11,730
Gentoo an arch where you know quite

00:09:09,060 --> 00:09:13,290
popular especially in that enthusiastic

00:09:11,730 --> 00:09:15,810
user base area where you have people

00:09:13,290 --> 00:09:18,420
downloading it and getting the latest of

00:09:15,810 --> 00:09:20,070
everything in there and when I when I

00:09:18,420 --> 00:09:21,960
talk to people about rolling releases I

00:09:20,070 --> 00:09:24,120
always hear the same three complaints or

00:09:21,960 --> 00:09:27,780
the same three excuses of why they don't

00:09:24,120 --> 00:09:30,570
like a rolling release there's a

00:09:27,780 --> 00:09:32,400
perception that they've unstable there's

00:09:30,570 --> 00:09:34,140
a perception of the unreliable which is

00:09:32,400 --> 00:09:36,000
subtly different from being unstable and

00:09:34,140 --> 00:09:40,140
their perception that they're hard to

00:09:36,000 --> 00:09:41,610
live with in the case of unstable in

00:09:40,140 --> 00:09:44,490
this case I'm talking specifically about

00:09:41,610 --> 00:09:46,200
it's always changing the way I used my

00:09:44,490 --> 00:09:49,160
system yesterday is now different from

00:09:46,200 --> 00:09:51,960
the way I have to use my system today a

00:09:49,160 --> 00:09:53,730
fast moving codebase is going to include

00:09:51,960 --> 00:09:55,590
changes that is kind of part of the

00:09:53,730 --> 00:09:56,850
points of some of the you know there is

00:09:55,590 --> 00:09:59,370
always going to be a little bit of a

00:09:56,850 --> 00:10:01,020
change in there the you know the

00:09:59,370 --> 00:10:02,850
question sometimes is how fast and

00:10:01,020 --> 00:10:04,350
having different rolling releases at

00:10:02,850 --> 00:10:05,910
different paces is something that I

00:10:04,350 --> 00:10:09,570
think the world needs to start thinking

00:10:05,910 --> 00:10:11,130
about but to really solve this problem

00:10:09,570 --> 00:10:12,840
you need to be making sure that you're

00:10:11,130 --> 00:10:15,180
rolling releases building everything

00:10:12,840 --> 00:10:17,700
testing everything and then integrating

00:10:15,180 --> 00:10:21,690
everything in a consistent cohesive

00:10:17,700 --> 00:10:24,270
fashion constantly and then when that is

00:10:21,690 --> 00:10:26,670
end deliver to users deliver it in a way

00:10:24,270 --> 00:10:29,460
that those behavioral changes that

00:10:26,670 --> 00:10:31,890
sudden new way that that new application

00:10:29,460 --> 00:10:34,830
is behaving doesn't get in the way of

00:10:31,890 --> 00:10:36,120
the work they need to do that day it's

00:10:34,830 --> 00:10:38,700
changed they're going to have to learn

00:10:36,120 --> 00:10:40,800
it at some point but you don't want it

00:10:38,700 --> 00:10:44,610
to block that work when they need to get

00:10:40,800 --> 00:10:46,340
their work done that's somewhat

00:10:44,610 --> 00:10:49,800
different from the problem of

00:10:46,340 --> 00:10:51,710
unreliability of that the perception

00:10:49,800 --> 00:10:54,090
that rolling releases are going to break

00:10:51,710 --> 00:10:55,530
it's a fair challenge a lot of rolling

00:10:54,090 --> 00:10:58,320
distributions have this problem it is

00:10:55,530 --> 00:11:00,690
thousands of moving parts from thousands

00:10:58,320 --> 00:11:02,160
of different upstream projects and the

00:11:00,690 --> 00:11:04,550
distribution has to find some way of

00:11:02,160 --> 00:11:06,920
them getting it all working together

00:11:04,550 --> 00:11:08,360
just like resolving the stability

00:11:06,920 --> 00:11:09,860
problem you've got to build it

00:11:08,360 --> 00:11:11,810
consistently you have to test it

00:11:09,860 --> 00:11:14,570
consistently and you have to integrate

00:11:11,810 --> 00:11:16,399
it consistently but speaking from

00:11:14,570 --> 00:11:19,430
experience it isn't just a case of

00:11:16,399 --> 00:11:20,750
testing it before you ship it but

00:11:19,430 --> 00:11:23,180
actually testing at the point of

00:11:20,750 --> 00:11:24,740
submission finding as early as possible

00:11:23,180 --> 00:11:27,890
when someone is contributing to a

00:11:24,740 --> 00:11:29,630
rolling code base does this work will

00:11:27,890 --> 00:11:31,000
this break the entire build will this

00:11:29,630 --> 00:11:33,380
ruin everything

00:11:31,000 --> 00:11:36,050
testing it they're really really early

00:11:33,380 --> 00:11:38,420
getting fast feedback helps both with

00:11:36,050 --> 00:11:41,360
the kind of contribution engagement and

00:11:38,420 --> 00:11:44,839
use and then of course you have a second

00:11:41,360 --> 00:11:46,700
shield of it testing as a whole because

00:11:44,839 --> 00:11:48,860
you can't just think of a Linux

00:11:46,700 --> 00:11:51,620
distribution like a collection of

00:11:48,860 --> 00:11:53,570
packages this is the fatal flaw which I

00:11:51,620 --> 00:11:56,600
think so many other distributions get

00:11:53,570 --> 00:11:59,089
wrong and we get right is we think of

00:11:56,600 --> 00:12:01,490
our distribution like a cohesive single

00:11:59,089 --> 00:12:03,829
thing that we ship and we try and make

00:12:01,490 --> 00:12:05,570
sure that it all works together in one

00:12:03,829 --> 00:12:08,630
bit and we're not falling into the trap

00:12:05,570 --> 00:12:10,550
of distributions like arch where oh

00:12:08,630 --> 00:12:11,959
we're shipping this wonderful library

00:12:10,550 --> 00:12:13,610
right on time and they're forgetting

00:12:11,959 --> 00:12:16,339
that about the 20 other things it needs

00:12:13,610 --> 00:12:19,370
or should go with it aren't there aren't

00:12:16,339 --> 00:12:20,779
integrated and ultimately the goal with

00:12:19,370 --> 00:12:24,860
them is to make sure that you don't ship

00:12:20,779 --> 00:12:28,459
something that doesn't work talking

00:12:24,860 --> 00:12:32,209
about testing most of the distributions

00:12:28,459 --> 00:12:35,870
and rolling and regular and formally as

00:12:32,209 --> 00:12:37,579
in the past rely on passive testing with

00:12:35,870 --> 00:12:40,790
their community distributions the idea

00:12:37,579 --> 00:12:42,560
of upstream has released something we've

00:12:40,790 --> 00:12:44,120
packaged it we've thrown it in some

00:12:42,560 --> 00:12:47,180
testing branch somewhere or something

00:12:44,120 --> 00:12:49,250
like that and then we wait a bunch of

00:12:47,180 --> 00:12:50,630
days and we just trust that someone in

00:12:49,250 --> 00:12:52,610
the community is going to look at it and

00:12:50,630 --> 00:12:55,190
play with it and then it's good enough

00:12:52,610 --> 00:12:56,899
mission no one ever actually checks did

00:12:55,190 --> 00:12:59,120
anyone actually tested it they just

00:12:56,899 --> 00:13:02,290
trusted that no one fouled enough bugs

00:12:59,120 --> 00:13:05,720
that it must be fine so we shipped it

00:13:02,290 --> 00:13:07,579
the model works in some to some degree I

00:13:05,720 --> 00:13:08,930
mean the bigger the community is the

00:13:07,579 --> 00:13:10,850
less they're you know the more chance

00:13:08,930 --> 00:13:12,589
you have of finding those bugs quickly

00:13:10,850 --> 00:13:13,910
enough and you know that testing window

00:13:12,589 --> 00:13:16,319
works out okay

00:13:13,910 --> 00:13:18,480
but it's still Russian roulette at some

00:13:16,319 --> 00:13:20,369
point your users are going to get shot

00:13:18,480 --> 00:13:22,649
by something that slipped by is that

00:13:20,369 --> 00:13:25,740
approach passive testing just does not

00:13:22,649 --> 00:13:28,189
work for distributions you need to have

00:13:25,740 --> 00:13:31,439
active testing you need to have

00:13:28,189 --> 00:13:34,079
proactively confirming does this new

00:13:31,439 --> 00:13:36,329
package in this distribution break

00:13:34,079 --> 00:13:37,920
something just on its own does it work

00:13:36,329 --> 00:13:40,379
at all did the developer completely

00:13:37,920 --> 00:13:42,899
screw it up or does it work when you

00:13:40,379 --> 00:13:47,069
install it with a context of 2030 or

00:13:42,899 --> 00:13:49,019
4,000 other packages and does it che

00:13:47,069 --> 00:13:51,360
if an if it's working technically

00:13:49,019 --> 00:13:54,389
speaking does it change in a way the

00:13:51,360 --> 00:13:56,009
users don't expect and you need to be

00:13:54,389 --> 00:13:57,449
able to answer that question in order to

00:13:56,009 --> 00:13:59,100
be able to integrate everything quickly

00:13:57,449 --> 00:14:02,279
and fast and deliver it to the users

00:13:59,100 --> 00:14:05,369
fast enough before an upstream release

00:14:02,279 --> 00:14:08,040
has even made that change so you need to

00:14:05,369 --> 00:14:09,600
have a way of knowing at least you know

00:14:08,040 --> 00:14:13,139
as fast as possible after an upstream

00:14:09,600 --> 00:14:15,720
check something new in or really before

00:14:13,139 --> 00:14:17,100
they check it in you know does this

00:14:15,720 --> 00:14:20,009
change something does this break

00:14:17,100 --> 00:14:21,720
something you know so we can get working

00:14:20,009 --> 00:14:26,429
on fixing it and shielding our users

00:14:21,720 --> 00:14:29,819
from those problems and then the last

00:14:26,429 --> 00:14:32,189
problem the the hardest to live with it

00:14:29,819 --> 00:14:35,040
but you know when looking of the other

00:14:32,189 --> 00:14:37,470
voting rules you know arch arch I really

00:14:35,040 --> 00:14:39,300
respect ouch you know they they have

00:14:37,470 --> 00:14:40,829
this kind of mantra of the archway

00:14:39,300 --> 00:14:42,480
which you know gets summed up as sort of

00:14:40,829 --> 00:14:45,839
do-it-yourself it's a learning exercise

00:14:42,480 --> 00:14:48,059
not my way of doing things but you know

00:14:45,839 --> 00:14:50,730
it works the arch wiki is a wonderful

00:14:48,059 --> 00:14:52,110
bit of documentation and then of course

00:14:50,730 --> 00:14:53,879
you have the gentle way which is

00:14:52,110 --> 00:14:57,029
basically the same it just takes longer

00:14:53,879 --> 00:14:59,279
because you're compiling but that works

00:14:57,029 --> 00:15:01,230
for guides of the bleeding edge really

00:14:59,279 --> 00:15:03,509
really working on this upstream stuff it

00:15:01,230 --> 00:15:05,100
doesn't work even for most enthusiastic

00:15:03,509 --> 00:15:06,839
users you know we have too much other

00:15:05,100 --> 00:15:09,389
stuff to do we don't want to be packing

00:15:06,839 --> 00:15:10,949
around with the inner workings of our

00:15:09,389 --> 00:15:14,220
distribution we want something that we

00:15:10,949 --> 00:15:15,779
can just install work with and get the

00:15:14,220 --> 00:15:20,040
latest of everything because we want to

00:15:15,779 --> 00:15:22,139
have our cake and eat it too and we need

00:15:20,040 --> 00:15:23,759
to have some way of stopping this you

00:15:22,139 --> 00:15:25,470
know something's changed and I have to

00:15:23,759 --> 00:15:26,430
spend three days hacking around my

00:15:25,470 --> 00:15:27,960
system to fix it

00:15:26,430 --> 00:15:32,460
get it working the way you know the way

00:15:27,960 --> 00:15:34,230
it's meant to work and in openSUSE we've

00:15:32,460 --> 00:15:35,760
asked this question why do rolling

00:15:34,230 --> 00:15:39,060
releases need to be difficult

00:15:35,760 --> 00:15:41,570
and obviously with tumbleweed we think

00:15:39,060 --> 00:15:44,430
the answer is they don't

00:15:41,570 --> 00:15:47,340
but tumbler we didn't start out as the

00:15:44,430 --> 00:15:49,670
tumbleweed we now know and love it

00:15:47,340 --> 00:15:52,500
started originally by Gregor Hartman in

00:15:49,670 --> 00:15:56,490
well before 2014 I can't actually find

00:15:52,500 --> 00:15:58,380
the exact date where it started and you

00:15:56,490 --> 00:16:01,230
know as you know it's providing the

00:15:58,380 --> 00:16:03,150
latest updates the kind of key focus

00:16:01,230 --> 00:16:05,550
point now is at the pace of contribution

00:16:03,150 --> 00:16:08,010
you know tumbleweed runs as fast as our

00:16:05,550 --> 00:16:09,120
community makes it run sometimes that

00:16:08,010 --> 00:16:11,190
means incredible could it be quick

00:16:09,120 --> 00:16:12,960
quickly sometimes that means we actively

00:16:11,190 --> 00:16:14,730
decide to do things at a slower pace

00:16:12,960 --> 00:16:16,620
because we think that's the best way of

00:16:14,730 --> 00:16:20,580
handling what that upstream project is

00:16:16,620 --> 00:16:22,560
doing it's tested by open QA and in

00:16:20,580 --> 00:16:24,450
terms of that kind of user base focus

00:16:22,560 --> 00:16:27,240
with really targeting that developer

00:16:24,450 --> 00:16:29,610
community contributor enthusiast part of

00:16:27,240 --> 00:16:33,030
things because that's really where

00:16:29,610 --> 00:16:35,310
rolling releases really really shine but

00:16:33,030 --> 00:16:37,680
old tumbleweed wasn't like that at all

00:16:35,310 --> 00:16:40,890
ol tumbleweed originally started as a

00:16:37,680 --> 00:16:42,330
model of taking the base system of

00:16:40,890 --> 00:16:45,510
openSUSE we were shipping at the time

00:16:42,330 --> 00:16:47,880
and putting rolling updates on top of

00:16:45,510 --> 00:16:50,250
that so instead of having a separate

00:16:47,880 --> 00:16:53,220
release it was really an add-on for an

00:16:50,250 --> 00:16:54,930
existing release it had a very

00:16:53,220 --> 00:16:56,520
particular focus obviously Gregor

00:16:54,930 --> 00:16:58,440
Harmons a kernel hacker so he started

00:16:56,520 --> 00:17:00,000
with the kernel and then the community

00:16:58,440 --> 00:17:01,890
started building up on that and things

00:17:00,000 --> 00:17:05,130
like KDE and Gnome and some applications

00:17:01,890 --> 00:17:07,740
got in but that model of setting the two

00:17:05,130 --> 00:17:09,690
meant that the only way of delivering

00:17:07,740 --> 00:17:12,870
software would overwrite the packages

00:17:09,690 --> 00:17:14,880
from the original base system which

00:17:12,870 --> 00:17:17,100
meant every time we released a new base

00:17:14,880 --> 00:17:19,110
system a new version of openSUSE your

00:17:17,100 --> 00:17:21,750
only choice was resetting to zero

00:17:19,110 --> 00:17:24,260
everything in tumbleweed which was a

00:17:21,750 --> 00:17:26,040
really dramatic change because any

00:17:24,260 --> 00:17:27,720
customizations that had been sitting in

00:17:26,040 --> 00:17:29,160
the tumbleweed bit suddenly disappeared

00:17:27,720 --> 00:17:30,720
and vanished and you know users

00:17:29,160 --> 00:17:33,060
sometimes had their packages well

00:17:30,720 --> 00:17:36,160
backwards or just with different confer

00:17:33,060 --> 00:17:38,080
a go yeah it was always a painful mess

00:17:36,160 --> 00:17:39,850
that wasn't the only lesson we really

00:17:38,080 --> 00:17:42,580
learned from that I think the the key

00:17:39,850 --> 00:17:45,640
lesson we learnt was partially rolling

00:17:42,580 --> 00:17:47,440
distributions don't really work not in a

00:17:45,640 --> 00:17:51,040
general sense in a very narrow sense in

00:17:47,440 --> 00:17:52,690
very specific you know small narrow use

00:17:51,040 --> 00:17:54,400
case with small narrow changes I think

00:17:52,690 --> 00:17:55,750
you can make it work but in terms of a

00:17:54,400 --> 00:17:58,440
general broad general purpose

00:17:55,750 --> 00:18:01,090
distribution it just constantly fails

00:17:58,440 --> 00:18:02,950
because that rolling top constantly

00:18:01,090 --> 00:18:05,380
needs new requirements from that stable

00:18:02,950 --> 00:18:08,890
base and you can't change your stable

00:18:05,380 --> 00:18:10,810
base its stable so you end up having to

00:18:08,890 --> 00:18:12,880
come around with nasty little hacks you

00:18:10,810 --> 00:18:15,580
end up tinkering with the stable base

00:18:12,880 --> 00:18:18,040
you end up linking stuff in weird and

00:18:15,580 --> 00:18:20,170
wonderful ways and it just falls apart

00:18:18,040 --> 00:18:22,060
every single time and even if it didn't

00:18:20,170 --> 00:18:24,430
you still put that reset to zero every

00:18:22,060 --> 00:18:28,720
eight months with a new release which is

00:18:24,430 --> 00:18:31,900
brutally disruptive for users and I kind

00:18:28,720 --> 00:18:33,730
of sum up this lesson as yeah my rolling

00:18:31,900 --> 00:18:36,400
release rule which I think tumbleweed

00:18:33,730 --> 00:18:39,430
really solved better than anything else

00:18:36,400 --> 00:18:40,930
to be able to move a Linux distribution

00:18:39,430 --> 00:18:42,700
where you want to be able to move any

00:18:40,930 --> 00:18:44,290
one thing in there quickly you know

00:18:42,700 --> 00:18:46,840
you've got this massive code base and

00:18:44,290 --> 00:18:49,360
you want to move some weird library on

00:18:46,840 --> 00:18:50,920
the far end of something you've got to

00:18:49,360 --> 00:18:52,600
have your tools your processes the

00:18:50,920 --> 00:18:54,610
technology in place where you can change

00:18:52,600 --> 00:18:56,530
everything just be prepared to throw out

00:18:54,610 --> 00:18:58,570
the entire distribution start again

00:18:56,530 --> 00:19:00,850
just to get that one new library in

00:18:58,570 --> 00:19:04,120
there and we've done that with

00:19:00,850 --> 00:19:05,700
tumbleweed not just on its own because

00:19:04,120 --> 00:19:08,140
we've done that with the tools we have

00:19:05,700 --> 00:19:10,900
you know we couldn't do this without the

00:19:08,140 --> 00:19:12,760
build service you know start you know

00:19:10,900 --> 00:19:13,960
it's it's a key part of everything we're

00:19:12,760 --> 00:19:15,460
doing we just had a presentation about

00:19:13,960 --> 00:19:18,010
it earlier so I won't go on about it

00:19:15,460 --> 00:19:21,400
again but you know the key to the build

00:19:18,010 --> 00:19:23,500
service the way it works the fact that

00:19:21,400 --> 00:19:24,660
we can track all of these different

00:19:23,500 --> 00:19:27,010
dependencies in all these different

00:19:24,660 --> 00:19:30,040
locations link them all together we

00:19:27,010 --> 00:19:32,020
build them when they're needed it makes

00:19:30,040 --> 00:19:35,020
sure that you have that consistent view

00:19:32,020 --> 00:19:38,460
of the distribution built peaceably

00:19:35,020 --> 00:19:38,460
together all of the time

00:19:39,930 --> 00:19:43,720
but the wording is fine you need to make

00:19:42,580 --> 00:19:47,710
make sure it works as well

00:19:43,720 --> 00:19:51,730
and of course we have open QA originally

00:19:47,710 --> 00:19:54,010
started 2009 for sort of testing the the

00:19:51,730 --> 00:19:56,710
basic installation part of local Sousa

00:19:54,010 --> 00:19:58,780
and it's become now an absolutely key

00:19:56,710 --> 00:20:00,670
part of the tumbleweed release process a

00:19:58,780 --> 00:20:03,930
single tumbleweed update doesn't happen

00:20:00,670 --> 00:20:06,340
until it's been tested by by open QA

00:20:03,930 --> 00:20:08,200
it's also a key part of the leap process

00:20:06,340 --> 00:20:10,690
it's now also a key part of the sledge

00:20:08,200 --> 00:20:13,300
development process and it's even used

00:20:10,690 --> 00:20:14,800
by Red Hat for testing Fedora haven't

00:20:13,300 --> 00:20:19,270
got them using it for rail yet but

00:20:14,800 --> 00:20:22,150
working on that hopefully one day I'd

00:20:19,270 --> 00:20:23,740
like to steal their tests but with open

00:20:22,150 --> 00:20:25,630
QA you know you get these nice

00:20:23,740 --> 00:20:27,520
dashboards of all these different

00:20:25,630 --> 00:20:30,790
scenarios so we're not just testing you

00:20:27,520 --> 00:20:32,200
know one basic boring use case but

00:20:30,790 --> 00:20:34,240
different ways of installing the

00:20:32,200 --> 00:20:35,980
distribution different raid

00:20:34,240 --> 00:20:38,230
configurations different desktop

00:20:35,980 --> 00:20:39,460
environments different architectures

00:20:38,230 --> 00:20:45,340
although that isn't shown on the screen

00:20:39,460 --> 00:20:47,740
here in a deeper view the tests break

00:20:45,340 --> 00:20:50,380
down to you know exactly the steps being

00:20:47,740 --> 00:20:52,180
done by the test and the kind of key

00:20:50,380 --> 00:20:53,920
part here is it's not testing

00:20:52,180 --> 00:20:56,050
artificially and just poking around some

00:20:53,920 --> 00:20:58,690
api's or calling very particular scripts

00:20:56,050 --> 00:21:00,190
to do very particular things the tests

00:20:58,690 --> 00:21:02,020
are written in a way to actually test

00:21:00,190 --> 00:21:03,670
the software the same way a user is

00:21:02,020 --> 00:21:05,980
going to use it so when you're talking

00:21:03,670 --> 00:21:09,100
about that kind of conceptual problem of

00:21:05,980 --> 00:21:10,570
making sure that your software is you

00:21:09,100 --> 00:21:12,160
know you've aware when your software is

00:21:10,570 --> 00:21:12,790
changing in a way that a user might be

00:21:12,160 --> 00:21:15,070
impacted

00:21:12,790 --> 00:21:17,710
that's exactly how open QA is testing

00:21:15,070 --> 00:21:19,960
this so it can be a trivial change like

00:21:17,710 --> 00:21:22,510
a wallpaper or a login screen where

00:21:19,960 --> 00:21:26,260
we've changed the color open QA at least

00:21:22,510 --> 00:21:28,060
makes us aware that that's happened so

00:21:26,260 --> 00:21:30,430
it flags it up so we can decide is this

00:21:28,060 --> 00:21:32,220
the right thing we want or not and if it

00:21:30,430 --> 00:21:37,870
is we click Next it moves on

00:21:32,220 --> 00:21:39,700
everything's fine and that is all then

00:21:37,870 --> 00:21:41,920
tied together into the factory

00:21:39,700 --> 00:21:44,680
development process where we have this

00:21:41,920 --> 00:21:48,100
kind of pipe line of code submissions

00:21:44,680 --> 00:21:49,630
going to tumbleweed admittedly getting

00:21:48,100 --> 00:21:50,800
automatically reviewed in the build

00:21:49,630 --> 00:21:52,570
service

00:21:50,800 --> 00:21:55,780
then getting tested in a process we

00:21:52,570 --> 00:21:57,580
called staging where we make sure an

00:21:55,780 --> 00:22:01,240
isolation does this one little thing

00:21:57,580 --> 00:22:02,950
work on its own if it works fine on its

00:22:01,240 --> 00:22:04,570
own that's the point when we then start

00:22:02,950 --> 00:22:06,610
in involving humans and actually have

00:22:04,570 --> 00:22:08,290
someone looking at it and doing a prop

00:22:06,610 --> 00:22:11,140
of a view of the submission does this

00:22:08,290 --> 00:22:13,660
actually work at that point it is then

00:22:11,140 --> 00:22:16,030
put into factory so you have the sort of

00:22:13,660 --> 00:22:18,700
full large big code base ten thousand

00:22:16,030 --> 00:22:20,470
plus packages all built together or

00:22:18,700 --> 00:22:23,050
consistently you know or consistently

00:22:20,470 --> 00:22:24,940
integrated in in one big pool which we

00:22:23,050 --> 00:22:27,730
then test again and open QA in a much

00:22:24,940 --> 00:22:29,440
more intensive fashion and that then

00:22:27,730 --> 00:22:33,340
gets done and pumped out at the end as

00:22:29,440 --> 00:22:34,510
tumbleweed that means if you want to

00:22:33,340 --> 00:22:37,030
change something in tumbleweed you've

00:22:34,510 --> 00:22:40,900
basically got two very easy ways of

00:22:37,030 --> 00:22:44,860
doing that one just contribute to open

00:22:40,900 --> 00:22:46,690
QA writing a test to make sure that open

00:22:44,860 --> 00:22:49,300
QA is checking that one thing you really

00:22:46,690 --> 00:22:51,460
care about means that every single

00:22:49,300 --> 00:22:53,350
snapshot of every single tumbleweed will

00:22:51,460 --> 00:22:54,970
make sure that it behaves the way you

00:22:53,350 --> 00:22:56,740
wanted to pay about so you don't really

00:22:54,970 --> 00:22:58,270
even have to worry about packaging

00:22:56,740 --> 00:23:01,180
anything or coding anything if you can

00:22:58,270 --> 00:23:03,120
just describe in an open QA test what

00:23:01,180 --> 00:23:05,860
you want to make sure stays that way

00:23:03,120 --> 00:23:07,780
it'll stay that way or at least it'll

00:23:05,860 --> 00:23:09,280
stay that way until it breaks and then

00:23:07,780 --> 00:23:11,020
we'll figure out the best way of getting

00:23:09,280 --> 00:23:12,880
around the problem but you know it least

00:23:11,020 --> 00:23:16,090
means we're aware that that use case has

00:23:12,880 --> 00:23:18,280
changed or if you're more packaging

00:23:16,090 --> 00:23:20,200
aware the factory submission process

00:23:18,280 --> 00:23:24,760
obviously contribute to factory

00:23:20,200 --> 00:23:26,140
that is how tumbleweed works when I talk

00:23:24,760 --> 00:23:29,260
about all these toolings and process

00:23:26,140 --> 00:23:31,120
especially to upstream developers or you

00:23:29,260 --> 00:23:32,320
know new people to the project and I

00:23:31,120 --> 00:23:33,700
always get the same response if that's

00:23:32,320 --> 00:23:36,550
cool it's great you're doing all this

00:23:33,700 --> 00:23:38,200
stuff fast but I don't want to wait for

00:23:36,550 --> 00:23:39,910
that build of a test nonsense you know

00:23:38,200 --> 00:23:41,950
I'm an upstream developer I've just got

00:23:39,910 --> 00:23:44,230
my table or how can I run it really

00:23:41,950 --> 00:23:46,780
really quickly I don't want to wait for

00:23:44,230 --> 00:23:49,060
all this testing and stuff happens a lot

00:23:46,780 --> 00:23:51,840
with especially these people embracing

00:23:49,060 --> 00:23:51,840
stuff like snappy

00:23:51,880 --> 00:23:58,610
the process works at the ridiculous pace

00:23:56,210 --> 00:24:01,299
I just realized I still haven't fixed

00:23:58,610 --> 00:24:04,580
this slide I've got the number one on it

00:24:01,299 --> 00:24:06,740
number 322 is an example the upstream

00:24:04,580 --> 00:24:09,409
release of gnome came out and within

00:24:06,740 --> 00:24:11,900
foot less than 48 hours we had it fully

00:24:09,409 --> 00:24:15,679
integrated fully tested and shipped in

00:24:11,900 --> 00:24:18,470
tumbleweed every single package and it

00:24:15,679 --> 00:24:20,900
worked we had very few bugs very few

00:24:18,470 --> 00:24:23,059
issues users of you can universally

00:24:20,900 --> 00:24:25,580
happy when we did have a few issues they

00:24:23,059 --> 00:24:28,880
got fixed the next day in the case of

00:24:25,580 --> 00:24:30,440
KDE plasma 5.9 not Ford online we even

00:24:28,880 --> 00:24:32,780
actually shipped it on the upstream

00:24:30,440 --> 00:24:35,000
release day because the upstream release

00:24:32,780 --> 00:24:37,039
process for KDE we actually get the tar

00:24:35,000 --> 00:24:38,510
balls a few days earlier so we were able

00:24:37,039 --> 00:24:40,520
to do all of that testing and pre work

00:24:38,510 --> 00:24:41,570
in place there and then we just hit the

00:24:40,520 --> 00:24:45,530
button when it was ready and done

00:24:41,570 --> 00:24:47,750
straight out if that's still too slow

00:24:45,530 --> 00:24:49,520
for you thanks to the build service

00:24:47,750 --> 00:24:52,580
we've got these kind of separate

00:24:49,520 --> 00:24:54,950
incubator style projects where we can

00:24:52,580 --> 00:24:56,900
have derivatives of tumbleweed testing

00:24:54,950 --> 00:24:58,909
straight from the gate of these upstream

00:24:56,900 --> 00:25:01,850
projects so things like no next or

00:24:58,909 --> 00:25:04,120
openSUSE Krypton where every single

00:25:01,850 --> 00:25:06,549
commit in every in from KDE or from numb

00:25:04,120 --> 00:25:09,289
immediately spins out new versions

00:25:06,549 --> 00:25:14,539
tumbleweed style tested tumbleweed style

00:25:09,289 --> 00:25:16,580
and there right away and that's not not

00:25:14,539 --> 00:25:20,270
nice to brag about two simple examples

00:25:16,580 --> 00:25:22,100
it's not just a case of the you know

00:25:20,270 --> 00:25:24,890
specific stacks where we're interested

00:25:22,100 --> 00:25:26,270
in yeah I dominate here

00:25:24,890 --> 00:25:29,059
I guess not because he knows all this

00:25:26,270 --> 00:25:30,770
stuff anyway but Dominic number got a

00:25:29,059 --> 00:25:33,080
release manager for opens at the

00:25:30,770 --> 00:25:34,730
tumbleweed every week he does a report

00:25:33,080 --> 00:25:36,710
to the community of you know what's been

00:25:34,730 --> 00:25:39,110
going on in tumbleweed this week and in

00:25:36,710 --> 00:25:41,270
a year ago now you know he made this

00:25:39,110 --> 00:25:42,770
comment of it's been a quiet week there

00:25:41,270 --> 00:25:44,900
wasn't really that much and the report

00:25:42,770 --> 00:25:46,070
was shorter than usual and that kind of

00:25:44,900 --> 00:25:48,919
got me curious if you know what is a

00:25:46,070 --> 00:25:50,990
quiet week for Dominic and that week was

00:25:48,919 --> 00:25:53,480
this three snapshots that's three

00:25:50,990 --> 00:25:55,940
different software releases you know

00:25:53,480 --> 00:25:58,580
basically the equivalent of a point

00:25:55,940 --> 00:26:00,440
release of a regular distribution the

00:25:58,580 --> 00:26:03,080
indicate collectively all those releases

00:26:00,440 --> 00:26:03,649
put together we included 146 new package

00:26:03,080 --> 00:26:04,620
updates

00:26:03,649 --> 00:26:06,630
it included a new

00:26:04,620 --> 00:26:09,500
I know he changed a whole bunch of stuff

00:26:06,630 --> 00:26:12,630
on the DVDs that we ship that's quiet

00:26:09,500 --> 00:26:15,960
it's ludicrous it's an insane amount of

00:26:12,630 --> 00:26:18,930
change for one week in fact a couple of

00:26:15,960 --> 00:26:21,360
weeks later it was twice as much last

00:26:18,930 --> 00:26:22,830
week in fact two weeks ago it was three

00:26:21,360 --> 00:26:24,750
times as much as that the pace is is

00:26:22,830 --> 00:26:27,660
still accelerating the process that

00:26:24,750 --> 00:26:30,540
works it scales out because we have more

00:26:27,660 --> 00:26:33,150
people using it the tooling works so we

00:26:30,540 --> 00:26:34,770
can do huge amounts of changes in a

00:26:33,150 --> 00:26:36,630
relatively short time keep pace with all

00:26:34,770 --> 00:26:37,950
of that and still make sure we're

00:26:36,630 --> 00:26:42,240
shipping something to the users that

00:26:37,950 --> 00:26:43,500
actually works but that works from our

00:26:42,240 --> 00:26:46,110
perspective and it works from the

00:26:43,500 --> 00:26:48,510
perspective of what up streams of trying

00:26:46,110 --> 00:26:52,500
to deliver users might have different

00:26:48,510 --> 00:26:56,130
opinions but this is where we have BT

00:26:52,500 --> 00:26:58,679
ifs and snapper because we've got btrfs

00:26:56,130 --> 00:27:01,679
but as our default file system because

00:26:58,679 --> 00:27:03,380
we ship snapper as our tool for taking a

00:27:01,679 --> 00:27:06,230
snapshot every time you do an update

00:27:03,380 --> 00:27:08,460
that means the whole problem of

00:27:06,230 --> 00:27:12,809
something changed in a way I don't like

00:27:08,460 --> 00:27:14,910
is immediately immunized you can roll

00:27:12,809 --> 00:27:17,370
down tumbleweed every single day and if

00:27:14,910 --> 00:27:19,350
you then find out oh it's not working

00:27:17,370 --> 00:27:21,830
the way I wanted it to you can always

00:27:19,350 --> 00:27:24,320
roll back to yesterday's snapshot and

00:27:21,830 --> 00:27:27,240
just work from there get your job done

00:27:24,320 --> 00:27:28,980
in even if we break your machine that it

00:27:27,240 --> 00:27:30,360
happens but you know you can even do

00:27:28,980 --> 00:27:36,540
that from Grubbs so even when the

00:27:30,360 --> 00:27:39,240
system's booting it just works that's

00:27:36,540 --> 00:27:40,980
great but what about the development you

00:27:39,240 --> 00:27:43,860
know what about openSUSE factory what

00:27:40,980 --> 00:27:45,690
about the dev branch approach you know

00:27:43,860 --> 00:27:48,390
once we started putting tumbleweed

00:27:45,690 --> 00:27:50,190
together in this way as a end of rolling

00:27:48,390 --> 00:27:52,410
release you know that became the next

00:27:50,190 --> 00:27:56,130
question what do we do about Factory and

00:27:52,410 --> 00:27:58,470
we don't need a development branch we

00:27:56,130 --> 00:28:00,150
don't have a development branch in the

00:27:58,470 --> 00:28:03,360
pewte in the purest sense anymore

00:28:00,150 --> 00:28:05,490
there is no crazy rolling untested head

00:28:03,360 --> 00:28:08,480
for someone to mess around with

00:28:05,490 --> 00:28:10,830
because tumbleweed is keeping up so well

00:28:08,480 --> 00:28:12,800
we can give our developers something

00:28:10,830 --> 00:28:15,000
that actually works all the time and

00:28:12,800 --> 00:28:16,800
they're always going to be close enough

00:28:15,000 --> 00:28:18,000
to be able to know what the hell's going

00:28:16,800 --> 00:28:19,680
on and everything they're doing so

00:28:18,000 --> 00:28:23,160
they don't need to have a factory

00:28:19,680 --> 00:28:24,840
anymore so it's there still in terms of

00:28:23,160 --> 00:28:27,030
the process you know the process is the

00:28:24,840 --> 00:28:32,240
factory process but the output of that

00:28:27,030 --> 00:28:32,240
is tumbleweed that's what people use

00:28:34,070 --> 00:28:38,610
been talking about rolling releases out

00:28:36,270 --> 00:28:42,780
of this time what about an open season

00:28:38,610 --> 00:28:45,060
regular release it's a it's a simple

00:28:42,780 --> 00:28:47,430
truth that you know a couple of years

00:28:45,060 --> 00:28:49,320
ago a huge amount of our community were

00:28:47,430 --> 00:28:50,820
very much focused on the kind of

00:28:49,320 --> 00:28:52,140
concepts I've been talking about so far

00:28:50,820 --> 00:28:55,320
today you know rolling releases

00:28:52,140 --> 00:28:57,990
delivering quickly factory or tumbleweed

00:28:55,320 --> 00:29:01,010
and the enthusiasm for a tradition of

00:28:57,990 --> 00:29:05,190
owning release was kind of fading away

00:29:01,010 --> 00:29:07,140
the cool thing is because of tumbleweed

00:29:05,190 --> 00:29:10,340
we've been able to do really exciting

00:29:07,140 --> 00:29:13,440
things with the with the regular release

00:29:10,340 --> 00:29:14,610
that we were too scared or blind to

00:29:13,440 --> 00:29:17,160
think about in the first place

00:29:14,610 --> 00:29:20,280
you know with leap we're able to have

00:29:17,160 --> 00:29:22,740
that nice stable Souza's and exempt

00:29:20,280 --> 00:29:24,900
price code base at that's nice stable

00:29:22,740 --> 00:29:26,280
regular release the polar opposite of

00:29:24,900 --> 00:29:27,720
tumbleweed you know the completely

00:29:26,280 --> 00:29:30,630
different use case for completely

00:29:27,720 --> 00:29:32,150
different people and appealing also two

00:29:30,630 --> 00:29:35,580
completely different contributors and

00:29:32,150 --> 00:29:36,780
then we can still because we're using

00:29:35,580 --> 00:29:39,540
the build service because we're using

00:29:36,780 --> 00:29:40,650
open QA because we have all of these

00:29:39,540 --> 00:29:42,780
tools and techniques that we've been

00:29:40,650 --> 00:29:45,090
doing for years take parts from

00:29:42,780 --> 00:29:47,490
tumbleweed that make sense layer them on

00:29:45,090 --> 00:29:49,320
top but still do so in a process that

00:29:47,490 --> 00:29:51,920
you're not having this nasty issue of

00:29:49,320 --> 00:29:56,550
you know rolling and stable braking and

00:29:51,920 --> 00:29:57,060
shape and ice cohesively tested so it in

00:29:56,550 --> 00:29:58,530
the past

00:29:57,060 --> 00:30:00,300
openSUSE used to always seem to be split

00:29:58,530 --> 00:30:02,430
of you know we had a community where

00:30:00,300 --> 00:30:03,620
some people wanted us to go faster some

00:30:02,430 --> 00:30:06,780
wanted us to go slower

00:30:03,620 --> 00:30:10,830
we can do both now tumbleweed is the

00:30:06,780 --> 00:30:12,960
fast road leap is a stable one they both

00:30:10,830 --> 00:30:15,450
serve different users they both work

00:30:12,960 --> 00:30:17,700
perfectly fine and they both actually

00:30:15,450 --> 00:30:19,950
help each other quite well because it

00:30:17,700 --> 00:30:23,010
also helps that sley is based on what

00:30:19,950 --> 00:30:24,600
we're doing in tumbleweed so all the

00:30:23,010 --> 00:30:26,460
engineers are developing on tumbleweed

00:30:24,600 --> 00:30:27,850
and then it ends up filtering into both

00:30:26,460 --> 00:30:31,390
sleep ants and sleep

00:30:27,850 --> 00:30:34,630
that for a point of view yeah just like

00:30:31,390 --> 00:30:36,070
that slide there and so from a

00:30:34,630 --> 00:30:40,270
cross-section of the whole thing you end

00:30:36,070 --> 00:30:43,570
up with a pitch like this where you know

00:30:40,270 --> 00:30:45,160
obviously tumbleweed is well over 8,000

00:30:43,570 --> 00:30:48,429
packages it's actually over 10,000

00:30:45,160 --> 00:30:51,700
packages now as a rolling basis tum' its

00:30:48,429 --> 00:30:55,980
own unique code base and then

00:30:51,700 --> 00:31:01,860
leapin Slee sharing a shared core and

00:30:55,980 --> 00:31:04,059
overlapping between the two and then

00:31:01,860 --> 00:31:05,590
this is how things are developed and I

00:31:04,059 --> 00:31:06,820
really should have updated the slides

00:31:05,590 --> 00:31:11,200
because I've just noticed the numbers

00:31:06,820 --> 00:31:13,780
wrong but yeah tumbleweed is rolling

00:31:11,200 --> 00:31:17,289
along constantly constantly changing at

00:31:13,780 --> 00:31:19,809
its own pace and then next year like we

00:31:17,289 --> 00:31:21,789
already announced there will be a new

00:31:19,809 --> 00:31:25,809
code base to replace the current one we

00:31:21,789 --> 00:31:30,130
are using for sleep 12 SB 3 and leap 42

00:31:25,809 --> 00:31:35,010
and there will be core 15 not 13 and

00:31:30,130 --> 00:31:37,059
there will be sleep 15 and loop 15 all

00:31:35,010 --> 00:31:39,250
originating from what we're doing in

00:31:37,059 --> 00:31:43,090
tumbleweed being frozen from there

00:31:39,250 --> 00:31:44,860
polished up tightened up etc so it's

00:31:43,090 --> 00:31:47,110
great it's wonderful it's not only is it

00:31:44,860 --> 00:31:50,260
great from a rolling release perspective

00:31:47,110 --> 00:31:51,580
of you know getting things in the hands

00:31:50,260 --> 00:31:54,010
of users quickly and working with up

00:31:51,580 --> 00:31:55,120
streams fast it's a key part of how

00:31:54,010 --> 00:31:57,220
we're building the more stable

00:31:55,120 --> 00:31:59,710
Enterprise focused stuff we're doing at

00:31:57,220 --> 00:32:01,870
Susan and openSUSE it all starts in

00:31:59,710 --> 00:32:04,770
tumbleweed that's the main code base

00:32:01,870 --> 00:32:08,080
when this stuff all works it's wonderful

00:32:04,770 --> 00:32:09,880
but it's not perfect there's a few

00:32:08,080 --> 00:32:14,950
things in tumbleweed really need to get

00:32:09,880 --> 00:32:16,570
fixed to start with this is the only

00:32:14,950 --> 00:32:20,500
sensible way of patching your tumbleweed

00:32:16,570 --> 00:32:25,630
machine zippered up no allow vendor

00:32:20,500 --> 00:32:27,159
change and not not enough people know

00:32:25,630 --> 00:32:28,659
that even though it's the first thing

00:32:27,159 --> 00:32:33,789
you read on the documentation these days

00:32:28,659 --> 00:32:37,809
but you know that's mainly a knock-on

00:32:33,789 --> 00:32:41,410
effect of how tumbleweed is built and

00:32:37,809 --> 00:32:43,120
how users are using tumbleweed with OBS

00:32:41,410 --> 00:32:46,780
you know the traditional zipper up

00:32:43,120 --> 00:32:49,510
command is way too conservative it only

00:32:46,780 --> 00:32:51,370
changes you know a topo it always

00:32:49,510 --> 00:32:52,570
assumes an upgrade so it doesn't work

00:32:51,370 --> 00:32:54,700
when upstreams change their version

00:32:52,570 --> 00:32:56,800
numbering it doesn't work very

00:32:54,700 --> 00:32:58,480
comfortably if dependency chains change

00:32:56,800 --> 00:33:00,040
dramatically so you know it works fine

00:32:58,480 --> 00:33:02,200
for the regular release upgrade approach

00:33:00,040 --> 00:33:05,980
but it isn't good enough for a rolling

00:33:02,200 --> 00:33:07,840
release and zip it up which you would

00:33:05,980 --> 00:33:09,760
think would which is a distribution

00:33:07,840 --> 00:33:12,610
upgrade which you would think would be

00:33:09,760 --> 00:33:15,010
the right solution for doing you know

00:33:12,610 --> 00:33:17,980
changing a whole operating system the

00:33:15,010 --> 00:33:22,180
whole time ends up being a little bit

00:33:17,980 --> 00:33:23,710
too liberal and you know quite off

00:33:22,180 --> 00:33:25,960
especially in the presence of additional

00:33:23,710 --> 00:33:28,180
repositories there's nothing stopping

00:33:25,960 --> 00:33:29,920
zippered up from grabbing packages from

00:33:28,180 --> 00:33:31,780
another OBS repo that you've set up on

00:33:29,920 --> 00:33:33,280
your machine and then using that to

00:33:31,780 --> 00:33:36,280
overwrite all of the stuff you have from

00:33:33,280 --> 00:33:38,290
tumbleweed so zippered up Noel our

00:33:36,280 --> 00:33:41,290
vendor change is that happy medium in

00:33:38,290 --> 00:33:44,080
between of having the more loose

00:33:41,290 --> 00:33:46,120
zippered up approach of look at the

00:33:44,080 --> 00:33:49,060
latest version get the latest version

00:33:46,120 --> 00:33:51,370
put it on the system but the now allow

00:33:49,060 --> 00:33:53,020
vendor change means it's going to only

00:33:51,370 --> 00:33:56,050
do that where it's going to try the best

00:33:53,020 --> 00:33:58,150
to do that for the packages from the

00:33:56,050 --> 00:34:00,730
repositories the user has chosen to

00:33:58,150 --> 00:34:02,910
install the suppositories from so if you

00:34:00,730 --> 00:34:05,650
are only using tumbleweed repositories

00:34:02,910 --> 00:34:09,120
zip it up only pulls tumbleweed packages

00:34:05,650 --> 00:34:11,800
in if you're picking one thing from OBS

00:34:09,120 --> 00:34:13,990
zip it up no la venta change will keep

00:34:11,800 --> 00:34:15,580
pulling that one thing from OBS and not

00:34:13,990 --> 00:34:16,840
accidentally pull through the 20 other

00:34:15,580 --> 00:34:20,770
things that happen to live in the same

00:34:16,840 --> 00:34:22,419
repository but it's free to obscure and

00:34:20,770 --> 00:34:24,130
way too long to type and that's I know

00:34:22,419 --> 00:34:26,740
there's millions of tumbleweed users out

00:34:24,130 --> 00:34:28,090
there who don't do this and then their

00:34:26,740 --> 00:34:32,980
machine break and then they're on the

00:34:28,090 --> 00:34:34,330
forms yes yes and there's a zipper

00:34:32,980 --> 00:34:38,890
conversion for that I'm just getting to

00:34:34,330 --> 00:34:41,140
that part so it is obscure and too long

00:34:38,890 --> 00:34:42,910
to type I'd like us to think about

00:34:41,140 --> 00:34:45,610
change either changing the default

00:34:42,910 --> 00:34:48,310
behavior of zippered up because for

00:34:45,610 --> 00:34:49,720
example inside sleeve we also use a

00:34:48,310 --> 00:34:51,850
variation of this for the zipper

00:34:49,720 --> 00:34:53,230
migration routing now there's a few

00:34:51,850 --> 00:34:55,179
extra variables there for sleep

00:34:53,230 --> 00:34:57,550
but you know week it's clear that

00:34:55,179 --> 00:34:59,410
zippered up on its own is too liable to

00:34:57,550 --> 00:35:01,900
break stuff I'd like us to think about

00:34:59,410 --> 00:35:03,670
changing that or having a variation

00:35:01,900 --> 00:35:07,300
maybe specifically for tumbleweed

00:35:03,670 --> 00:35:09,790
something like zipper to op or like

00:35:07,300 --> 00:35:11,560
Derek said you can actually change a

00:35:09,790 --> 00:35:13,840
single line in your config file to make

00:35:11,560 --> 00:35:17,350
this the default behavior maybe we

00:35:13,840 --> 00:35:19,660
should be doing that in tumbleweed even

00:35:17,350 --> 00:35:20,920
when we solve that problem and it's not

00:35:19,660 --> 00:35:24,130
that hard to solve we just need to

00:35:20,920 --> 00:35:27,430
decide how to do it we then need to also

00:35:24,130 --> 00:35:30,220
fix or remove the graphical update tools

00:35:27,430 --> 00:35:32,770
a tumbleweed is using yeah stand package

00:35:30,220 --> 00:35:35,260
kit because right now you go to yes you

00:35:32,770 --> 00:35:36,850
try and do an update it doesn't know

00:35:35,260 --> 00:35:38,710
what to do really with it it doesn't

00:35:36,850 --> 00:35:40,000
have an equivalent of DUP it doesn't

00:35:38,710 --> 00:35:42,730
have an equivalent of double no allow

00:35:40,000 --> 00:35:45,010
vendor change it tries to do is if ur up

00:35:42,730 --> 00:35:46,420
which won't work most of the time when

00:35:45,010 --> 00:35:48,640
things are quiet but when there's big

00:35:46,420 --> 00:35:51,790
changes big dependency changes it falls

00:35:48,640 --> 00:35:54,070
over it breaks it doesn't work and

00:35:51,790 --> 00:35:56,350
package kit also you know whole nother

00:35:54,070 --> 00:35:58,630
layer of problems there so I'd really

00:35:56,350 --> 00:36:02,020
like to see as fixing those tools

00:35:58,630 --> 00:36:03,850
getting them done or if we can't get

00:36:02,020 --> 00:36:06,190
them fixed but move them so users don't

00:36:03,850 --> 00:36:08,260
get confused and start wondering you

00:36:06,190 --> 00:36:09,700
know why does my gnome update applet

00:36:08,260 --> 00:36:11,880
keep on telling me to update and then

00:36:09,700 --> 00:36:22,420
not working properly

00:36:11,880 --> 00:36:23,560
yes yeah

00:36:22,420 --> 00:36:26,140
the question is why don't we just make a

00:36:23,560 --> 00:36:28,770
script and do that that's definitely one

00:36:26,140 --> 00:36:30,850
option we could do and you know the

00:36:28,770 --> 00:36:33,369
problem there is people have quite a lot

00:36:30,850 --> 00:36:35,770
of update scripts now already like for

00:36:33,369 --> 00:36:38,740
example perfectly here in the case of

00:36:35,770 --> 00:36:41,290
transactional updates so transactional

00:36:38,740 --> 00:36:43,240
updates are a new technology which we've

00:36:41,290 --> 00:36:46,150
got in tumbleweed and you can learn much

00:36:43,240 --> 00:36:47,560
more about it in this room at 5:15 today

00:36:46,150 --> 00:36:50,260
because Torsen is going to talk about it

00:36:47,560 --> 00:36:53,230
but the the short and simple version of

00:36:50,260 --> 00:36:55,310
it is transactional updates is taking

00:36:53,230 --> 00:36:57,470
the update model we currently have

00:36:55,310 --> 00:36:58,970
and this snapshot model we currently

00:36:57,470 --> 00:37:01,370
have well you know you're changing your

00:36:58,970 --> 00:37:03,020
system taking a snapshot before what are

00:37:01,370 --> 00:37:04,610
you're updating assist you're taking a

00:37:03,020 --> 00:37:07,220
snapshot before then updating your

00:37:04,610 --> 00:37:09,140
system and taking a snapshot after so

00:37:07,220 --> 00:37:11,840
you can roll back before and after and

00:37:09,140 --> 00:37:13,760
figure out what went wrong that has a

00:37:11,840 --> 00:37:15,440
quite a few negative side effects one of

00:37:13,760 --> 00:37:18,470
them being you end up with a load of

00:37:15,440 --> 00:37:21,020
snapshots on your machine and also it's

00:37:18,470 --> 00:37:23,210
not the cleanest and Crispus way of of

00:37:21,020 --> 00:37:25,150
keeping track of what's really going on

00:37:23,210 --> 00:37:28,910
in our system with transactional updates

00:37:25,150 --> 00:37:33,530
in the simplest form it's during the

00:37:28,910 --> 00:37:35,510
update into a snapshot on btrfs so not

00:37:33,530 --> 00:37:37,850
touching the root filesystem creating a

00:37:35,510 --> 00:37:40,490
snapshot making all the changes in there

00:37:37,850 --> 00:37:41,990
and then when you reboot that's the

00:37:40,490 --> 00:37:44,000
snapshot you boot into so all your

00:37:41,990 --> 00:37:47,000
updates are there so it's completely

00:37:44,000 --> 00:37:48,560
atomic you know it either all works or

00:37:47,000 --> 00:37:51,610
if it doesn't you just roll back the

00:37:48,560 --> 00:37:54,380
whole snapshot and nothing got changed

00:37:51,610 --> 00:37:56,530
it's already in tumbleweed and in

00:37:54,380 --> 00:37:59,270
tumbleweed its implemented as a script

00:37:56,530 --> 00:38:00,920
so if we change zip it up we have to

00:37:59,270 --> 00:38:07,610
change this or you know what we can keep

00:38:00,920 --> 00:38:09,470
on using this yes yes quite often in

00:38:07,610 --> 00:38:11,810
fact the last time I wrote back was when

00:38:09,470 --> 00:38:16,040
I accidentally did RM minus RF in the

00:38:11,810 --> 00:38:17,300
wrong folder and but yeah I haven't had

00:38:16,040 --> 00:38:19,430
to roll back because of a snapshot

00:38:17,300 --> 00:38:21,470
because of a patching issue but yeah

00:38:19,430 --> 00:38:25,220
rolling back happens quite often with me

00:38:21,470 --> 00:38:26,570
actually but for transactional updates

00:38:25,220 --> 00:38:28,190
to really work which I really think

00:38:26,570 --> 00:38:29,540
actually this is this is a technology in

00:38:28,190 --> 00:38:31,130
tumbleweed that's really exciting me I'd

00:38:29,540 --> 00:38:32,900
actually like to see us think about

00:38:31,130 --> 00:38:35,810
doing this as the main update mechanism

00:38:32,900 --> 00:38:37,430
in tumbleweed one day to get there

00:38:35,810 --> 00:38:39,740
because you know Orson's talking about

00:38:37,430 --> 00:38:41,600
it in the context of Kubik a variation

00:38:39,740 --> 00:38:43,550
of tumbleweed to get there for all of

00:38:41,600 --> 00:38:46,010
tumbleweed we really need to get to the

00:38:43,550 --> 00:38:47,870
point where the packages are a little

00:38:46,010 --> 00:38:49,400
bit more compliant with our own

00:38:47,870 --> 00:38:51,320
packaging guidelines there's you know

00:38:49,400 --> 00:38:54,440
the things that break this approach are

00:38:51,320 --> 00:38:56,840
things like packages putting stuff in

00:38:54,440 --> 00:38:58,280
SRV packages messing around with user

00:38:56,840 --> 00:38:59,780
data something that isn't going to be in

00:38:58,280 --> 00:39:02,540
that snapshot when it's patching in the

00:38:59,780 --> 00:39:05,750
snapshot and that then the whole thing

00:39:02,540 --> 00:39:07,430
falls apart and everything dies it's you

00:39:05,750 --> 00:39:08,450
know we're not that far away from it in

00:39:07,430 --> 00:39:10,400
fact

00:39:08,450 --> 00:39:12,350
with the the cubic stuff we're talking

00:39:10,400 --> 00:39:14,300
about later today tumbleweed is already

00:39:12,350 --> 00:39:14,840
testing it alongside so we can see when

00:39:14,300 --> 00:39:21,230
they break

00:39:14,840 --> 00:39:23,090
um but yeah long road to go snapshots

00:39:21,230 --> 00:39:26,510
are great funny we're talking about all

00:39:23,090 --> 00:39:28,580
of that but it's only a temporary

00:39:26,510 --> 00:39:30,440
workaround once you've rolled back

00:39:28,580 --> 00:39:32,750
you're back to exactly how you were

00:39:30,440 --> 00:39:35,630
yesterday but tumbleweed still moved on

00:39:32,750 --> 00:39:37,430
so you can't install anything because

00:39:35,630 --> 00:39:39,950
you've only got the new packages in

00:39:37,430 --> 00:39:42,610
tumbleweed and not the old ones that you

00:39:39,950 --> 00:39:44,630
wanted to use yesterday

00:39:42,610 --> 00:39:46,910
I'd like to us to look at the

00:39:44,630 --> 00:39:50,330
possibility of retaining old snapshots

00:39:46,910 --> 00:39:52,550
in the tumbleweed repos not entirely

00:39:50,330 --> 00:39:56,480
sure how we do that but you know maybe

00:39:52,550 --> 00:39:58,310
have you know yeah fancy symlinks fancy

00:39:56,480 --> 00:39:59,690
divya snapshotted versions I'm like I

00:39:58,310 --> 00:40:02,990
said I'm not sure it could be a

00:39:59,690 --> 00:40:04,370
logistical nightmare but if we find a

00:40:02,990 --> 00:40:06,010
solution to this we could really have

00:40:04,370 --> 00:40:09,590
this utopian vision of you know

00:40:06,010 --> 00:40:11,660
tumbleweed moving at full pace and users

00:40:09,590 --> 00:40:13,610
able to pick what pace actually suits

00:40:11,660 --> 00:40:15,560
them for tumbleweed if they don't want

00:40:13,610 --> 00:40:18,500
to necessarily upgrade always to the

00:40:15,560 --> 00:40:20,270
latest of everything but you know want

00:40:18,500 --> 00:40:22,790
to maybe take in a week or two a month

00:40:20,270 --> 00:40:24,560
or two longer to keep up with stuff if

00:40:22,790 --> 00:40:25,700
we're keeping those old snapshots around

00:40:24,560 --> 00:40:28,430
in the build service and keeping those

00:40:25,700 --> 00:40:31,850
old snapshots around in down openSUSE to

00:40:28,430 --> 00:40:33,890
org users could still then have the

00:40:31,850 --> 00:40:35,510
version of the snapshot they want get

00:40:33,890 --> 00:40:38,360
the packages that mate that were built

00:40:35,510 --> 00:40:40,190
for that version of tumbleweed and you

00:40:38,360 --> 00:40:43,160
know best of both worlds everybody's

00:40:40,190 --> 00:40:44,840
happy or works obviously one you know

00:40:43,160 --> 00:40:45,980
dissipate the logistical issues and the

00:40:44,840 --> 00:40:48,230
fact I haven't got all the answer there

00:40:45,980 --> 00:40:49,520
how we could do this it will also mean

00:40:48,230 --> 00:40:51,980
our mirror host would have to host a

00:40:49,520 --> 00:40:53,900
huge power more packages but tumbleweed

00:40:51,980 --> 00:40:55,610
is actually surprisingly small when it

00:40:53,900 --> 00:40:58,370
comes to our mirror infrastructure um

00:40:55,610 --> 00:41:01,460
we've got four terabytes now I think

00:40:58,370 --> 00:41:03,620
generally speaking no down to this

00:41:01,460 --> 00:41:08,360
terabytes of stuff in um in our members

00:41:03,620 --> 00:41:11,330
hmm nine nine terabytes okay nine

00:41:08,360 --> 00:41:12,650
terabytes not four nine terabytes in um

00:41:11,330 --> 00:41:14,570
you know for most of our mirror

00:41:12,650 --> 00:41:17,690
infrastructure that all of OBS all of

00:41:14,570 --> 00:41:19,940
our distributions etc tumbleweed is

00:41:17,690 --> 00:41:21,720
about sixty gig of that it's relatively

00:41:19,940 --> 00:41:24,420
small it's a very fast change

00:41:21,720 --> 00:41:27,359
60 gig but it's a tiny part in

00:41:24,420 --> 00:41:30,030
comparison so doubling or tripling it

00:41:27,359 --> 00:41:32,040
especially if adding the additional size

00:41:30,030 --> 00:41:33,750
isn't going to change the churn rate too

00:41:32,040 --> 00:41:35,880
much because these are old snapshots

00:41:33,750 --> 00:41:37,440
they're not going to be changing our

00:41:35,880 --> 00:41:39,090
member the hosts shouldn't be that

00:41:37,440 --> 00:41:40,920
concerned with you know a little bit of

00:41:39,090 --> 00:41:42,990
the extra pain of having a few extra

00:41:40,920 --> 00:41:47,310
extra gigs because they're holding nine

00:41:42,990 --> 00:41:49,920
terabytes already and not something else

00:41:47,310 --> 00:41:51,780
I'd like to see fixed in tumbleweed we

00:41:49,920 --> 00:41:54,119
need more tests I already gave you the

00:41:51,780 --> 00:41:56,849
sales pitch earlier but we really really

00:41:54,119 --> 00:41:58,950
need more tests you know if you're

00:41:56,849 --> 00:42:01,950
finding something in tumbleweed you

00:41:58,950 --> 00:42:05,670
don't like a bug a behavior you dislike

00:42:01,950 --> 00:42:07,859
whatever write a test for it the

00:42:05,670 --> 00:42:10,680
documentation is there we accept pull

00:42:07,859 --> 00:42:12,450
requests it's all in github we will

00:42:10,680 --> 00:42:14,580
merge that test we will run that test on

00:42:12,450 --> 00:42:16,109
tumbleweed and that problem will never

00:42:14,580 --> 00:42:19,730
happen again without us knowing about it

00:42:16,109 --> 00:42:21,960
first that's fine for the generic stuff

00:42:19,730 --> 00:42:24,890
there is the sort of the second problem

00:42:21,960 --> 00:42:28,830
of how the heck do we test in video

00:42:24,890 --> 00:42:31,020
because open QA is typically VM based so

00:42:28,830 --> 00:42:33,750
we're you know they don't have Nvidia

00:42:31,020 --> 00:42:36,240
cards in VMs we do have some options for

00:42:33,750 --> 00:42:38,760
testing on bare metal that's normally

00:42:36,240 --> 00:42:40,380
using stuff like IPMI which means you're

00:42:38,760 --> 00:42:43,440
talking over cereal and B and C which

00:42:40,380 --> 00:42:45,810
isn't looking at in a video card so I'd

00:42:43,440 --> 00:42:48,599
love to have people thinking about how

00:42:45,810 --> 00:42:50,520
the heck can we test the Nvidia drivers

00:42:48,599 --> 00:42:51,690
Oh any graphics drivers but Nvidia is

00:42:50,520 --> 00:42:52,950
the one that breaks all the time on

00:42:51,690 --> 00:42:56,190
tumbleweeds I'm just going to pick on

00:42:52,950 --> 00:42:57,690
them it's theoretically possible you

00:42:56,190 --> 00:42:59,280
know like I said we have to support an

00:42:57,690 --> 00:43:01,920
open QA for handling different

00:42:59,280 --> 00:43:03,570
architectures handling real Hardware you

00:43:01,920 --> 00:43:06,390
know it's all flexible on the backend

00:43:03,570 --> 00:43:08,070
side of things we just need a little bit

00:43:06,390 --> 00:43:09,780
of help of figuring out how to make that

00:43:08,070 --> 00:43:11,460
happen because if we can get stuff like

00:43:09,780 --> 00:43:14,460
third-party hardware drivers being

00:43:11,460 --> 00:43:16,050
tested in open Q a tumbleweed we'll just

00:43:14,460 --> 00:43:18,060
have a whole other class of user who

00:43:16,050 --> 00:43:19,710
right now can't really touch it because

00:43:18,060 --> 00:43:23,089
they're unfortunate to have a laptop or

00:43:19,710 --> 00:43:26,310
desktop that has an Nvidia card in and

00:43:23,089 --> 00:43:28,710
then last but no means least the the

00:43:26,310 --> 00:43:30,119
kind of non-technical thing I'd like I'd

00:43:28,710 --> 00:43:32,130
like to hear how people are using

00:43:30,119 --> 00:43:33,660
tumbleweed we've got to do a better job

00:43:32,130 --> 00:43:35,080
of marketing this you know I can talk

00:43:33,660 --> 00:43:36,370
for hours about how I

00:43:35,080 --> 00:43:38,430
the process is wonderful I can talk

00:43:36,370 --> 00:43:40,810
about hours of what I'm using it for

00:43:38,430 --> 00:43:42,670
what is the rest of the world using it

00:43:40,810 --> 00:43:44,620
for because with this you've got a way

00:43:42,670 --> 00:43:47,110
of getting open-source software in the

00:43:44,620 --> 00:43:49,930
hands of users quicker than anyone else

00:43:47,110 --> 00:43:52,390
more more cohesively engineered than

00:43:49,930 --> 00:43:55,000
anyone else it's not just a server OS

00:43:52,390 --> 00:43:56,470
it's not just a desktop OS you know I

00:43:55,000 --> 00:43:57,910
know we've got people running it on

00:43:56,470 --> 00:43:59,800
raspberry PI's I know we've got people

00:43:57,910 --> 00:44:01,240
doing crazy robots and stuff like the

00:43:59,800 --> 00:44:04,030
two other talk that's happening in the

00:44:01,240 --> 00:44:05,980
room right now I want to hear about this

00:44:04,030 --> 00:44:07,360
so I can help get people writing case

00:44:05,980 --> 00:44:11,050
studies about it writing blog posts

00:44:07,360 --> 00:44:12,550
spreading the word because that's what's

00:44:11,050 --> 00:44:14,860
really exciting about tumbleweed it's

00:44:12,550 --> 00:44:17,380
really you know it's really a unique

00:44:14,860 --> 00:44:19,510
platform for doing cool stuff with so

00:44:17,380 --> 00:44:21,940
please there's my email address send me

00:44:19,510 --> 00:44:25,690
stuff I promise I will help spread the

00:44:21,940 --> 00:44:29,590
word about so in review who should be

00:44:25,690 --> 00:44:31,690
using tumbleweed developers any

00:44:29,590 --> 00:44:34,180
developer you know whatever upstream

00:44:31,690 --> 00:44:35,560
project you're working with you want to

00:44:34,180 --> 00:44:39,100
be getting the latest and greatest stuff

00:44:35,560 --> 00:44:40,750
use tumbleweed it just works it's stable

00:44:39,100 --> 00:44:43,090
if it doesn't work the way you want just

00:44:40,750 --> 00:44:44,920
roll back using snapper and if it's not

00:44:43,090 --> 00:44:47,980
quite perfect you're a developer you can

00:44:44,920 --> 00:44:52,120
help us fix it if you're an upstream

00:44:47,980 --> 00:44:54,100
develop in particular targeting

00:44:52,120 --> 00:44:55,810
tumbleweed is a great way of making sure

00:44:54,100 --> 00:44:58,270
your software is getting in the hands of

00:44:55,810 --> 00:45:02,530
users quicker and our tools with the

00:44:58,270 --> 00:45:04,510
build service with open QA are there to

00:45:02,530 --> 00:45:06,490
be able to help you not just do it with

00:45:04,510 --> 00:45:08,350
us you can do it with us first and then

00:45:06,490 --> 00:45:11,020
build it and test it on every other

00:45:08,350 --> 00:45:13,750
distribution to you know open QA isn't

00:45:11,020 --> 00:45:15,070
just an open openSUSE thing OBS is

00:45:13,750 --> 00:45:17,110
building for every other distribution

00:45:15,070 --> 00:45:20,490
we're even building app images and other

00:45:17,110 --> 00:45:24,070
containerized stuff in there now as well

00:45:20,490 --> 00:45:25,390
ultimately those tools are more work at

00:45:24,070 --> 00:45:28,390
the moment than traditional packaging

00:45:25,390 --> 00:45:29,800
when done right in OBS so why avoid

00:45:28,390 --> 00:45:34,870
traditional packaging when you can do

00:45:29,800 --> 00:45:36,670
them right in OBS and then as a user you

00:45:34,870 --> 00:45:40,660
want the latest and greatest of

00:45:36,670 --> 00:45:42,040
everything tumbleweed just works and you

00:45:40,660 --> 00:45:46,390
know we would love you as a contributor

00:45:42,040 --> 00:45:49,120
and then when you become a contributor

00:45:46,390 --> 00:45:51,220
like I've already said twice now open

00:45:49,120 --> 00:45:54,220
queuing for the open QA process and the

00:45:51,220 --> 00:45:57,160
factory process one is sort of reactive

00:45:54,220 --> 00:45:59,170
one is proactive you can make sure that

00:45:57,160 --> 00:46:02,950
tumbleweed is shaped exactly the way you

00:45:59,170 --> 00:46:05,410
want it to be and if you do that and you

00:46:02,950 --> 00:46:07,690
join us you become a direct contributor

00:46:05,410 --> 00:46:09,970
to open to tumbleweed you know it's not

00:46:07,690 --> 00:46:11,710
just going to be helping you out the

00:46:09,970 --> 00:46:12,850
tumbleweed user but downloads are going

00:46:11,710 --> 00:46:15,250
higher and higher and higher

00:46:12,850 --> 00:46:18,580
this is the last them the last few years

00:46:15,250 --> 00:46:20,500
so just to kind of explain the graph

00:46:18,580 --> 00:46:23,290
because I notice it doesn't do that well

00:46:20,500 --> 00:46:26,860
that blue line along the bottom is our

00:46:23,290 --> 00:46:29,980
old development branch the orange line

00:46:26,860 --> 00:46:32,170
is old fashioned tumbleweed the green

00:46:29,980 --> 00:46:34,090
line is the sum of both of them because

00:46:32,170 --> 00:46:35,470
you know they've branched and rolling we

00:46:34,090 --> 00:46:39,790
kind of did the two things in parallel

00:46:35,470 --> 00:46:41,410
so you know yep you know we had a few

00:46:39,790 --> 00:46:42,940
thousand users on it but not a huge

00:46:41,410 --> 00:46:45,970
amount on those two different platforms

00:46:42,940 --> 00:46:47,580
and then we merge them together then we

00:46:45,970 --> 00:46:51,970
started doing this and as you can see

00:46:47,580 --> 00:46:53,680
since the end of November 2014 it's gone

00:46:51,970 --> 00:46:55,480
crazy and I wanted to keep on going

00:46:53,680 --> 00:46:57,190
crazy I want to have more users on that

00:46:55,480 --> 00:47:00,030
I want to be able to show this graph

00:46:57,190 --> 00:47:04,180
next year that's you know twice as high

00:47:00,030 --> 00:47:06,510
so please thank you oh yeah thank you

00:47:04,180 --> 00:47:06,510
and help me

00:47:14,120 --> 00:47:21,390
does anybody have any questions yeah

00:47:18,890 --> 00:47:30,270
there's a microphone there if you want

00:47:21,390 --> 00:47:31,890
to go to yoga actually understand so

00:47:30,270 --> 00:47:34,590
it's less of a question but answering

00:47:31,890 --> 00:47:37,140
how to test Nvidia have you tried pci

00:47:34,590 --> 00:47:42,000
pass through with the virtualization

00:47:37,140 --> 00:47:43,620
solutions in theory I've messed around

00:47:42,000 --> 00:47:45,150
with it a little bit but all the open QA

00:47:43,620 --> 00:47:47,610
hardware I have doesn't have an Nvidia

00:47:45,150 --> 00:47:49,650
card in it get a haven't got the

00:47:47,610 --> 00:47:56,600
hardware for it but yeah in theory that

00:47:49,650 --> 00:48:03,020
would work any more questions comments

00:47:56,600 --> 00:48:03,020
etc cool thank you very much

00:48:07,830 --> 00:48:09,890

YouTube URL: https://www.youtube.com/watch?v=RbP9lNvmWKk


