Title: openSUSE Conference 2017 Ceph, ELK & opensuse
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1350-ceph-elk-opensuse

This talk will be held by Denys Kondratenko and Abhishek Lekshmanan to talk about Ceph and ELK (Elastic Stack) integration and current status on openSUSE (Leap and Tumbleweed).

Ceph is a distributed storage platform that is contender to become the future of software defined storage,  providing unified access to block, object and file interfaces. However like any complex systems there are various subsystems that may fail and analyzing logs is generally the first line of action. This is where  the ELK stack comes in, to search, analyze and process logs and metadata.

We will cover topics such as:
* Current status of ELK and Ceph on openSUSE (Leap and Tumbleweed)
* Metadata export to Elasticsearch - RGW Metadata Search
* Ceph logs and cluster log parsing with Logstash
* Future of the ELK for Analyzing and Alerting for Ceph
* Current status of Ceph ELK integration for openSUSE



Denis Kondratenko Abhishek Lekshmanan
Captions: 
	00:00:07,309 --> 00:00:13,740
so hello we will talk about the SF ilka

00:00:11,639 --> 00:00:15,870
and openSUSE my name is Dennis

00:00:13,740 --> 00:00:19,859
kondratenko I worked for Suzie in

00:00:15,870 --> 00:00:24,539
software-defined storage department as

00:00:19,859 --> 00:00:27,090
engineering manager so I'm Abhishek I

00:00:24,539 --> 00:00:32,359
also work on self A to Z I'm also the

00:00:27,090 --> 00:00:32,359
community release manager of SF and yeah

00:00:33,500 --> 00:00:40,590
so I think that a lot of people already

00:00:37,770 --> 00:00:43,649
know what is the self self is unified

00:00:40,590 --> 00:00:46,260
distributed storage system design it for

00:00:43,649 --> 00:00:48,809
excellent performance reliability and

00:00:46,260 --> 00:00:51,930
scalability it's actually implements

00:00:48,809 --> 00:00:54,120
object storage interface as well as

00:00:51,930 --> 00:00:57,449
block and file system interface to it

00:00:54,120 --> 00:01:00,379
distributed storage back-end design it

00:00:57,449 --> 00:01:03,390
that without a single point of failure

00:01:00,379 --> 00:01:05,909
scalable to exabyte level here you can

00:01:03,390 --> 00:01:09,479
see the picture that actually shows you

00:01:05,909 --> 00:01:12,570
a really brief set architecture ease

00:01:09,479 --> 00:01:15,060
object storage demons monitor demons as

00:01:12,570 --> 00:01:18,000
well as interfaces to safe like block

00:01:15,060 --> 00:01:22,110
storage interface file system interface

00:01:18,000 --> 00:01:24,299
and object storage interface it's

00:01:22,110 --> 00:01:28,759
actually self is the cluster of nodes

00:01:24,299 --> 00:01:32,780
and the great question comes how to

00:01:28,759 --> 00:01:35,490
monitor or log it and everything else

00:01:32,780 --> 00:01:38,880
Janka what is the yield curve probably

00:01:35,490 --> 00:01:41,130
all everyone knows as well so you'll Chi

00:01:38,880 --> 00:01:45,450
stands for the elasticsearch log stash

00:01:41,130 --> 00:01:49,850
and Cabana here listed couple of icons

00:01:45,450 --> 00:01:53,790
so log stash aggregates the data and

00:01:49,850 --> 00:01:56,909
parsad target or modify it and then push

00:01:53,790 --> 00:02:00,149
it somewhere there for example to

00:01:56,909 --> 00:02:02,610
elasticsearch yoga stores the data data

00:02:00,149 --> 00:02:05,430
index the data and provide the restful

00:02:02,610 --> 00:02:09,739
interface to the data so we can wear it

00:02:05,430 --> 00:02:12,989
and search it and Cubana actually

00:02:09,739 --> 00:02:13,870
provides you a nice interface to the

00:02:12,989 --> 00:02:16,900
data so

00:02:13,870 --> 00:02:19,959
you can easily look into it

00:02:16,900 --> 00:02:23,110
great and as well as make some graphics

00:02:19,959 --> 00:02:25,090
and analysis as well there is there more

00:02:23,110 --> 00:02:29,099
packages in the yoga stack for example

00:02:25,090 --> 00:02:29,099
Xbox let's provide some additional

00:02:29,760 --> 00:02:39,489
additional functionality like alerting

00:02:33,069 --> 00:02:41,430
and analyzing as well as machine

00:02:39,489 --> 00:02:46,239
learning

00:02:41,430 --> 00:02:49,180
openSUSE so actually we have tried

00:02:46,239 --> 00:02:51,970
openSUSE as well for this we use that

00:02:49,180 --> 00:02:54,989
for our development machines all these

00:02:51,970 --> 00:02:57,459
yield gas tax as well as safe inside the

00:02:54,989 --> 00:02:59,859
repositories notice user in the leap and

00:02:57,459 --> 00:03:01,420
tumbleweed so we can install safe as

00:02:59,859 --> 00:03:03,819
well as ilka from it

00:03:01,420 --> 00:03:07,720
thanks to Klaus he's maintains the yield

00:03:03,819 --> 00:03:11,459
cass tech and yeah it just works you can

00:03:07,720 --> 00:03:14,019
do it like in traditional IT using their

00:03:11,459 --> 00:03:16,650
yoga as well as installing docker

00:03:14,019 --> 00:03:20,950
I think they didn't Friday that was the

00:03:16,650 --> 00:03:22,829
docker talk about the Kubik so I think

00:03:20,950 --> 00:03:26,230
that's promising

00:03:22,829 --> 00:03:28,569
login why we need log so a lot of

00:03:26,230 --> 00:03:31,150
subsystem on the nodes so we have a

00:03:28,569 --> 00:03:34,590
cluster and a lot of subsystem in the

00:03:31,150 --> 00:03:38,489
dock in the nodes are logging their

00:03:34,590 --> 00:03:43,120
status and whatever issues they have or

00:03:38,489 --> 00:03:46,000
burning so current situation so it's

00:03:43,120 --> 00:03:48,489
great idea to collect those logs in some

00:03:46,000 --> 00:03:50,440
central server to actually store it in

00:03:48,489 --> 00:03:53,290
query and for traditional logs like

00:03:50,440 --> 00:03:55,419
syslog you can use our sister courses

00:03:53,290 --> 00:04:00,970
login G or other systems to forward this

00:03:55,419 --> 00:04:05,379
locks into the this central storage for

00:04:00,970 --> 00:04:09,430
the locks safe as well supports ray log

00:04:05,379 --> 00:04:11,919
format so you can easily turn that and

00:04:09,430 --> 00:04:15,209
it will store in to feel forward your

00:04:11,919 --> 00:04:19,959
logs in gel format to your external

00:04:15,209 --> 00:04:22,000
server so why we need locks the first

00:04:19,959 --> 00:04:25,120
point for us as engineers and so storage

00:04:22,000 --> 00:04:27,130
department is the troubleshooting so you

00:04:25,120 --> 00:04:27,819
can troubleshoot and find out what will

00:04:27,130 --> 00:04:30,069
they

00:04:27,819 --> 00:04:32,919
so storing that is a really good idea

00:04:30,069 --> 00:04:35,289
for us as well as you can analyze them

00:04:32,919 --> 00:04:38,800
and predict some issues so this machine

00:04:35,289 --> 00:04:42,370
learning features in keeping spark is

00:04:38,800 --> 00:04:45,280
actually really promising you can turn

00:04:42,370 --> 00:04:49,870
some rules analyze your data and find

00:04:45,280 --> 00:04:52,990
out maybe some patterns on it yes as you

00:04:49,870 --> 00:04:54,580
say as I said that syslog I used

00:04:52,990 --> 00:04:59,139
actually searched this log to forward

00:04:54,580 --> 00:05:02,380
all their syslog messages to my ill cast

00:04:59,139 --> 00:05:05,620
list a cluster to actually analyze what

00:05:02,380 --> 00:05:07,960
we have what happens in the system so I

00:05:05,620 --> 00:05:10,389
can relate that data for example there

00:05:07,960 --> 00:05:14,020
was some drivers fails or whatever

00:05:10,389 --> 00:05:16,090
kernel crashes so I can get it all

00:05:14,020 --> 00:05:20,340
together to self and then analyze the

00:05:16,090 --> 00:05:23,169
data what actually caused the problem um

00:05:20,340 --> 00:05:26,080
yeah log stash has a great support for

00:05:23,169 --> 00:05:32,169
that syslog input future as well as well

00:05:26,080 --> 00:05:35,740
as grok as well as gray log so you can

00:05:32,169 --> 00:05:38,800
turn a gray log for self its nature

00:05:35,740 --> 00:05:40,690
naturally supported in self there is the

00:05:38,800 --> 00:05:42,610
some parameters that you need in self

00:05:40,690 --> 00:05:45,820
log it's actually not documented I don't

00:05:42,610 --> 00:05:49,180
know why but is there these parameters

00:05:45,820 --> 00:05:51,880
if you will put it in self confident

00:05:49,180 --> 00:05:56,139
self will forward the messages to your

00:05:51,880 --> 00:05:57,159
external real log server and you can do

00:05:56,139 --> 00:05:58,990
it manually

00:05:57,159 --> 00:06:03,820
then you need to restart every server

00:05:58,990 --> 00:06:06,940
every service in actually good manner so

00:06:03,820 --> 00:06:11,979
not by not to not interrupt the service

00:06:06,940 --> 00:06:13,960
or you can use our deep sea software to

00:06:11,979 --> 00:06:18,810
do it automatically for you

00:06:13,960 --> 00:06:18,810
there is the examples how you can do it

00:06:19,740 --> 00:06:27,400
so yep the log stash provides a lot of

00:06:25,120 --> 00:06:30,039
functionality to parse those logs to add

00:06:27,400 --> 00:06:32,800
the tags are the indexes and forwarded

00:06:30,039 --> 00:06:35,850
to elasticsearch so we probably would

00:06:32,800 --> 00:06:37,950
like to extract some data ahead

00:06:35,850 --> 00:06:40,590
and put it in right index in your

00:06:37,950 --> 00:06:47,130
elastic search and logstash will give

00:06:40,590 --> 00:06:51,930
you this possibility and that's actually

00:06:47,130 --> 00:06:54,870
pretty easy to do this yield Gastech

00:06:51,930 --> 00:06:57,150
right now it has I'm using it in docker

00:06:54,870 --> 00:06:59,550
for my experiments it's a couple of

00:06:57,150 --> 00:07:03,240
seconds to get the Dhakal cluster for

00:06:59,550 --> 00:07:06,600
yoga and they're also as well some

00:07:03,240 --> 00:07:10,200
projects that already done it for you it

00:07:06,600 --> 00:07:12,140
sexually just give one comment and you

00:07:10,200 --> 00:07:16,920
will bring up your yoga cluster just

00:07:12,140 --> 00:07:23,550
need to add your log stash and gels

00:07:16,920 --> 00:07:27,240
parsing for self yeah that's all from my

00:07:23,550 --> 00:07:29,220
part it's ink interesting project and

00:07:27,240 --> 00:07:33,090
community already use yoga to store

00:07:29,220 --> 00:07:35,670
locks but correctly index and parse the

00:07:33,090 --> 00:07:40,050
data is the interesting and big question

00:07:35,670 --> 00:07:42,750
how to storage so you can analyze it

00:07:40,050 --> 00:07:45,990
later I will predict the issues with

00:07:42,750 --> 00:07:48,660
machine learning and yoga couldn't be

00:07:45,990 --> 00:07:50,850
could be used not only for logging as

00:07:48,660 --> 00:07:54,210
well as I seen that some application

00:07:50,850 --> 00:07:57,690
that use it for monitoring and did it

00:07:54,210 --> 00:08:00,450
successfully and another interesting

00:07:57,690 --> 00:08:02,880
application for yoga that we discovered

00:08:00,450 --> 00:08:06,210
recently is the metadata and for

00:08:02,880 --> 00:08:09,930
metadata I invite Abhishek to describe

00:08:06,210 --> 00:08:12,540
that thanks for the elects a classic

00:08:09,930 --> 00:08:14,970
search introduction Dennis so I'm going

00:08:12,540 --> 00:08:16,860
to talk about Rados gateway and made a

00:08:14,970 --> 00:08:18,420
dataset with elastic search so first

00:08:16,860 --> 00:08:21,750
I'll start with introducing what Lido's

00:08:18,420 --> 00:08:25,080
gateway itself this so radius gateway

00:08:21,750 --> 00:08:27,420
it's an object storage daemon that

00:08:25,080 --> 00:08:29,670
actually provides a HTTP you know REST

00:08:27,420 --> 00:08:31,290
API access to the safe cluster so

00:08:29,670 --> 00:08:35,130
essentially some sort of a proxy that

00:08:31,290 --> 00:08:37,410
actually release HTTP requests onto Lib

00:08:35,130 --> 00:08:41,789
radios request which is what the safe

00:08:37,410 --> 00:08:43,080
cluster actually speaks and it's highly

00:08:41,789 --> 00:08:45,870
scalable and everything it's horizontal

00:08:43,080 --> 00:08:47,310
is horizontally scalable because we

00:08:45,870 --> 00:08:48,930
don't actually maintain any state and

00:08:47,310 --> 00:08:49,290
reduce gateway as such everything is

00:08:48,930 --> 00:08:51,000
maintained

00:08:49,290 --> 00:08:53,310
this F cluster so you can actually have

00:08:51,000 --> 00:08:54,839
multiple reduce gateways running in

00:08:53,310 --> 00:08:56,940
parallel and then very the same safe

00:08:54,839 --> 00:09:00,839
cluster and you know you can scale that

00:08:56,940 --> 00:09:02,220
way and so yeah it's just a basically

00:09:00,839 --> 00:09:05,430
address will access to the safe cluster

00:09:02,220 --> 00:09:07,470
you have user accounts and then it's

00:09:05,430 --> 00:09:11,490
similar to the Amazon s3 or open stacks

00:09:07,470 --> 00:09:13,740
of sort of an API we implemented open

00:09:11,490 --> 00:09:15,209
stacks often s3 API first readers gave

00:09:13,740 --> 00:09:17,130
me mainly because like there is already

00:09:15,209 --> 00:09:19,290
a huge amount of client tooling for

00:09:17,130 --> 00:09:20,519
history and since it's been around for

00:09:19,290 --> 00:09:23,130
more than like ten years or something

00:09:20,519 --> 00:09:25,110
like this and nearly any object storage

00:09:23,130 --> 00:09:27,779
protocol would almost always be Kesley

00:09:25,110 --> 00:09:30,720
so we can always reuse the same tooling

00:09:27,779 --> 00:09:32,759
so that is the reason we actually

00:09:30,720 --> 00:09:35,459
implemented the s3 API instead of

00:09:32,759 --> 00:09:36,600
actually writing one on our own which

00:09:35,459 --> 00:09:41,459
means you would have to write your own

00:09:36,600 --> 00:09:43,529
tools for this and we support a lot of

00:09:41,459 --> 00:09:45,149
history like features and the same

00:09:43,529 --> 00:09:46,920
features can be accessed by yourself but

00:09:45,149 --> 00:09:49,019
there are some caveats

00:09:46,920 --> 00:09:50,850
so we suppose stuff like multi-part

00:09:49,019 --> 00:09:53,040
uploads object versioning you can even

00:09:50,850 --> 00:09:56,819
download the object as a torrent then

00:09:53,040 --> 00:10:00,290
you have encryption compression you have

00:09:56,819 --> 00:10:02,490
a bucket object life cycles and then

00:10:00,290 --> 00:10:04,260
newly we started introducing this

00:10:02,490 --> 00:10:07,889
feature called metadata search with

00:10:04,260 --> 00:10:09,360
elastic search and from the GL release

00:10:07,889 --> 00:10:13,319
which is the release which we have on

00:10:09,360 --> 00:10:15,360
deep 42.2 we suppose something called

00:10:13,319 --> 00:10:18,930
multi-site which allows for geographical

00:10:15,360 --> 00:10:21,149
redundancy of objects your it so as far

00:10:18,930 --> 00:10:22,889
as safe is concerned everything is

00:10:21,149 --> 00:10:24,470
actually local to this F cluster so it's

00:10:22,889 --> 00:10:27,120
like if you want to actually replicate

00:10:24,470 --> 00:10:29,720
data across data centers or something

00:10:27,120 --> 00:10:32,790
like this it's not very easy because

00:10:29,720 --> 00:10:34,920
rights are rights have to be

00:10:32,790 --> 00:10:36,389
acknowledged by every client and then

00:10:34,920 --> 00:10:39,269
that would actually take a long time if

00:10:36,389 --> 00:10:40,889
it's across geographies so we introduced

00:10:39,269 --> 00:10:42,810
this feature called multi-site where we

00:10:40,889 --> 00:10:44,310
actually asynchronously ship locks to

00:10:42,810 --> 00:10:46,079
the remote site and then we can actually

00:10:44,310 --> 00:10:49,560
a synchronously replicate data to the

00:10:46,079 --> 00:10:52,589
remote safe cluster and this elastic

00:10:49,560 --> 00:10:54,509
search has built on top of that so as

00:10:52,589 --> 00:10:56,180
far as elastic search is concerned as

00:10:54,509 --> 00:10:58,589
day that length is you know for search

00:10:56,180 --> 00:11:01,230
it's a search engine that is actually

00:10:58,589 --> 00:11:03,180
distributed what is not leastly ailable

00:11:01,230 --> 00:11:05,240
it's Kamala's and then it has a very

00:11:03,180 --> 00:11:09,000
nice recipe I'd open figured everything

00:11:05,240 --> 00:11:10,410
and it's actually the configuration is

00:11:09,000 --> 00:11:12,180
really really easy you can do everything

00:11:10,410 --> 00:11:13,500
we are the REST API and you don't have I

00:11:12,180 --> 00:11:17,000
mean you can do easy configuration

00:11:13,500 --> 00:11:17,000
without setting your hair and share

00:11:17,090 --> 00:11:21,990
so the Rados gateway metadata search

00:11:20,700 --> 00:11:26,190
with elastic sideshow what's the

00:11:21,990 --> 00:11:27,840
motivation behind this so the one I mean

00:11:26,190 --> 00:11:30,180
objects always have metadata associated

00:11:27,840 --> 00:11:32,460
with them I mean most basically the size

00:11:30,180 --> 00:11:34,020
and the M time and a time and stuff like

00:11:32,460 --> 00:11:35,700
this that's the most basic metadata you

00:11:34,020 --> 00:11:37,710
have and of course you have custom

00:11:35,700 --> 00:11:40,200
metadata in terms of file system

00:11:37,710 --> 00:11:43,140
attributes or something like this n like

00:11:40,200 --> 00:11:44,700
that so since it's an object storage you

00:11:43,140 --> 00:11:46,920
do not have any mode file system tools

00:11:44,700 --> 00:11:49,470
at your disposal as well as you're safe

00:11:46,920 --> 00:11:50,820
clusters consent and for a distributed

00:11:49,470 --> 00:11:52,980
system you know you cannot actually do a

00:11:50,820 --> 00:11:54,930
d-- you or ADF the sort of standard

00:11:52,980 --> 00:11:58,980
command-line tools you're normally

00:11:54,930 --> 00:12:01,050
accustomed to file systems currently we

00:11:58,980 --> 00:12:04,800
already have some existing support in

00:12:01,050 --> 00:12:06,210
terms of admin ops rest api but there

00:12:04,800 --> 00:12:08,460
are some problems with this in the terms

00:12:06,210 --> 00:12:10,860
of you can actually query for specific

00:12:08,460 --> 00:12:12,510
metadata with the admin of CP i right

00:12:10,860 --> 00:12:13,830
now so if you actually know what you're

00:12:12,510 --> 00:12:15,630
looking for you can actually query the

00:12:13,830 --> 00:12:17,070
writers gate week but there's another

00:12:15,630 --> 00:12:19,020
problem of you know there is no

00:12:17,070 --> 00:12:20,490
notification you know when new objects

00:12:19,020 --> 00:12:22,410
are created or new pockets are created

00:12:20,490 --> 00:12:23,670
or new users are created or anything

00:12:22,410 --> 00:12:25,650
like this so you would have to

00:12:23,670 --> 00:12:27,720
constantly pull the latest gateway and

00:12:25,650 --> 00:12:29,280
that would not be nice the other thing

00:12:27,720 --> 00:12:31,730
is it will be the same reduce gateway

00:12:29,280 --> 00:12:34,260
that is actually being publicly facing

00:12:31,730 --> 00:12:36,030
customer facing cluster that would be

00:12:34,260 --> 00:12:37,530
doing the metadata as well and we do I

00:12:36,030 --> 00:12:41,100
mean and mini sites would not want that

00:12:37,530 --> 00:12:42,330
just for the performance and as a

00:12:41,100 --> 00:12:43,910
storage administrator you would be

00:12:42,330 --> 00:12:46,140
actually interested in you know

00:12:43,910 --> 00:12:48,990
interesting queries about your data like

00:12:46,140 --> 00:12:50,640
what's your average cluster object size

00:12:48,990 --> 00:12:52,770
or you know how many uploads are there

00:12:50,640 --> 00:12:54,660
over the last few weeks or how many

00:12:52,770 --> 00:12:56,640
uploads were there like last Friday or

00:12:54,660 --> 00:12:58,590
hours we performance over the weekend

00:12:56,640 --> 00:13:00,180
and something like this and this is

00:12:58,590 --> 00:13:05,930
where your elastic search can actually

00:13:00,180 --> 00:13:08,070
greatly simplify your life so the design

00:13:05,930 --> 00:13:09,270
we actually built on top of the

00:13:08,070 --> 00:13:11,220
multi-site architecture which was

00:13:09,270 --> 00:13:13,379
introduced in the previous version of

00:13:11,220 --> 00:13:15,559
safe so since we

00:13:13,379 --> 00:13:18,449
to actually do a lot of asynchronous

00:13:15,559 --> 00:13:20,699
data shipping we could actually build on

00:13:18,449 --> 00:13:22,109
top of that itself so the click and

00:13:20,699 --> 00:13:24,149
release of Ceph which is the previous

00:13:22,109 --> 00:13:26,369
release to occur at the current one we

00:13:24,149 --> 00:13:29,359
introduced a new feature called Sync

00:13:26,369 --> 00:13:31,739
plugins which which are an interesting

00:13:29,359 --> 00:13:34,589
thing inside videos gateway which I love

00:13:31,739 --> 00:13:37,109
you to actually populate on the metadata

00:13:34,589 --> 00:13:39,299
of objects so for example whenever

00:13:37,109 --> 00:13:40,349
objects are created or objects are

00:13:39,299 --> 00:13:43,529
modified or something like this you

00:13:40,349 --> 00:13:44,729
always get a notification and this is a

00:13:43,529 --> 00:13:45,989
caressing Kronus and then you can

00:13:44,729 --> 00:13:48,359
actually act on it so you can actually

00:13:45,989 --> 00:13:50,279
write stuff the elasticsearch plug-in

00:13:48,359 --> 00:13:51,629
was written as a plug-in like that and

00:13:50,279 --> 00:13:52,649
you can actually even write more

00:13:51,629 --> 00:13:54,779
interesting stuff they can actually

00:13:52,649 --> 00:13:57,089
synchronize your objects through H to a

00:13:54,779 --> 00:13:59,759
remote cloud for example to Amazon s3

00:13:57,089 --> 00:14:03,749
itself or OpenStack safe cluster itself

00:13:59,759 --> 00:14:05,849
or something like this and so because of

00:14:03,749 --> 00:14:08,849
that you actually need multiple zones

00:14:05,849 --> 00:14:10,349
and the zones are similar to the Amazon

00:14:08,849 --> 00:14:14,519
concept of an availability zone or

00:14:10,349 --> 00:14:16,649
something like this so your requests are

00:14:14,519 --> 00:14:18,600
essentially serviced by a zone but you

00:14:16,649 --> 00:14:19,709
can actually have something called as a

00:14:18,600 --> 00:14:21,449
zone group which is actually a

00:14:19,709 --> 00:14:23,549
collection of zones which is similar to

00:14:21,449 --> 00:14:27,689
an Amazon concept of a region if you

00:14:23,549 --> 00:14:29,069
aware of it and so in this case you you

00:14:27,689 --> 00:14:30,869
can actually have isolation that way

00:14:29,069 --> 00:14:32,579
because you will have a zone which would

00:14:30,869 --> 00:14:34,679
be only doing metadata and then this

00:14:32,579 --> 00:14:36,479
would not actually be effective anyway

00:14:34,679 --> 00:14:38,159
in your data but as well as your

00:14:36,479 --> 00:14:42,329
customer request so you know any data

00:14:38,159 --> 00:14:44,179
repressor concern so there are some

00:14:42,329 --> 00:14:46,379
vocab yets with this the problem is that

00:14:44,179 --> 00:14:50,089
elastic search doesn't have an

00:14:46,379 --> 00:14:52,769
off-the-shelf authentication module so

00:14:50,089 --> 00:14:54,389
you cannot actually be exposing your

00:14:52,769 --> 00:14:56,129
elastic search cluster itself to be

00:14:54,389 --> 00:14:58,229
public because then everybody can query

00:14:56,129 --> 00:15:00,689
other metadata and you do not actually

00:14:58,229 --> 00:15:03,629
want people to actually view other

00:15:00,689 --> 00:15:05,909
people's metadata so ideally we should

00:15:03,629 --> 00:15:08,189
just have the elastic search thing

00:15:05,909 --> 00:15:11,789
endpoint only accessible to the cluster

00:15:08,189 --> 00:15:13,079
administrator and to overcome that de

00:15:11,789 --> 00:15:14,999
does get we also implemented this

00:15:13,079 --> 00:15:16,559
feature where if you are a user and you

00:15:14,999 --> 00:15:18,689
want to actually look at your metadata

00:15:16,559 --> 00:15:20,879
via elastic search we implemented a

00:15:18,689 --> 00:15:23,729
front-end for elastic search queries so

00:15:20,879 --> 00:15:25,739
that we can authenticate the user and

00:15:23,729 --> 00:15:26,880
then you know process elastic search

00:15:25,739 --> 00:15:28,080
queries which we

00:15:26,880 --> 00:15:30,750
we just forward to the elastic search

00:15:28,080 --> 00:15:33,980
and this this way we are actually

00:15:30,750 --> 00:15:35,880
circumventing the problem of

00:15:33,980 --> 00:15:38,700
authenticating the user and the use of

00:15:35,880 --> 00:15:40,590
not seeing anybody else's data and we

00:15:38,700 --> 00:15:41,790
are you know wearing the elastic search

00:15:40,590 --> 00:15:43,770
engine back in and as an administrator

00:15:41,790 --> 00:15:45,360
you can actually query the elastic

00:15:43,770 --> 00:15:46,560
search directly or you can even vary

00:15:45,360 --> 00:15:50,300
where that whiskey tree will always

00:15:46,560 --> 00:15:50,300
override in your an administrator

00:15:50,430 --> 00:15:54,810
this is exact addresses an approximate

00:15:52,680 --> 00:15:56,640
diagram of how the thing looks like so

00:15:54,810 --> 00:15:59,130
you have a primary readers gateway which

00:15:56,640 --> 00:16:00,510
should be as far as I paint user is

00:15:59,130 --> 00:16:02,040
concerned you would be only actually

00:16:00,510 --> 00:16:04,260
contacting one reduce key which as the

00:16:02,040 --> 00:16:06,480
primary radios get with that serves your

00:16:04,260 --> 00:16:09,120
data and then you would actually set up

00:16:06,480 --> 00:16:10,830
a secondary readers gateway in a remote

00:16:09,120 --> 00:16:12,510
zone you can actually even set it up in

00:16:10,830 --> 00:16:15,690
a remote safe cluster so that you can be

00:16:12,510 --> 00:16:18,090
completely isolated so for example you

00:16:15,690 --> 00:16:19,680
want a very less performant hard disk

00:16:18,090 --> 00:16:21,540
based cluster which can actually service

00:16:19,680 --> 00:16:22,860
elasticsearch requests and you can do

00:16:21,540 --> 00:16:24,330
something like that as well so you can

00:16:22,860 --> 00:16:26,700
be completely isolated and have

00:16:24,330 --> 00:16:29,450
something that just processes metadata

00:16:26,700 --> 00:16:31,800
search that this processes metadata and

00:16:29,450 --> 00:16:36,030
you know forward stuff to elasticsearch

00:16:31,800 --> 00:16:37,350
and for the end user queries itself you

00:16:36,030 --> 00:16:39,480
can actually query the radio gateway

00:16:37,350 --> 00:16:40,500
with a search in point and then that

00:16:39,480 --> 00:16:42,210
would actually redirect to the

00:16:40,500 --> 00:16:44,280
elasticsearch and ensure that you can

00:16:42,210 --> 00:16:48,170
only access your own data and you know

00:16:44,280 --> 00:16:48,170
authentication is handled at three and

00:16:49,400 --> 00:16:53,970
this is the example of the how the

00:16:51,630 --> 00:16:56,580
object metadata itself looks like at the

00:16:53,970 --> 00:16:58,860
current version so you actually have tax

00:16:56,580 --> 00:17:01,080
for the bucket which is the concept of a

00:16:58,860 --> 00:17:02,790
folder then Amazon s3 and then you

00:17:01,080 --> 00:17:03,980
actually show the owner of the object

00:17:02,790 --> 00:17:07,170
and this is how we are actually

00:17:03,980 --> 00:17:09,720
authenticating and making sure that the

00:17:07,170 --> 00:17:12,870
only user with the specific ID can

00:17:09,720 --> 00:17:14,459
access the data and then and the

00:17:12,870 --> 00:17:18,810
permissions field and then you have

00:17:14,459 --> 00:17:19,680
metadata in terms of the size m time and

00:17:18,810 --> 00:17:22,680
then

00:17:19,680 --> 00:17:25,170
Amazon suppose this concept of XA MZ

00:17:22,680 --> 00:17:26,790
meta tags similar with open sex with

00:17:25,170 --> 00:17:28,020
decimals so when you actually upload an

00:17:26,790 --> 00:17:30,330
object you can actually specify some

00:17:28,020 --> 00:17:31,890
external tax on the object so you can

00:17:30,330 --> 00:17:34,440
actually say you know this object is of

00:17:31,890 --> 00:17:35,880
color right or you know this is of

00:17:34,440 --> 00:17:38,310
customer X or something like this and

00:17:35,880 --> 00:17:39,070
this is also actually indexed in the

00:17:38,310 --> 00:17:41,240
meta

00:17:39,070 --> 00:17:43,400
so you can actually vary on your

00:17:41,240 --> 00:17:45,230
metadata for example what is a video or

00:17:43,400 --> 00:17:49,670
what is a JPEG file or something like

00:17:45,230 --> 00:17:51,200
this and for example as a cluster

00:17:49,670 --> 00:17:54,050
administrator if you want to see for

00:17:51,200 --> 00:17:55,400
example what is your average size of

00:17:54,050 --> 00:17:57,860
objects then you can actually ask

00:17:55,400 --> 00:17:59,600
elasticsearch for it and this is an

00:17:57,860 --> 00:18:02,270
example of such a pity you can ask like

00:17:59,600 --> 00:18:05,960
you know please aggregate your average

00:18:02,270 --> 00:18:07,760
size of objects and elasticsearch should

00:18:05,960 --> 00:18:10,190
let's point you with you know saying

00:18:07,760 --> 00:18:11,330
like this when you object we had a total

00:18:10,190 --> 00:18:13,460
of 22 objects and

00:18:11,330 --> 00:18:15,020
the total size was 177 bytes or

00:18:13,460 --> 00:18:18,110
something like this so this was just a

00:18:15,020 --> 00:18:20,360
toy cluster but you know this ability

00:18:18,110 --> 00:18:22,610
makes it very easy to actually have very

00:18:20,360 --> 00:18:24,470
insightful data but you're safe cluster

00:18:22,610 --> 00:18:26,690
you can actually ask varies like you

00:18:24,470 --> 00:18:29,000
know what was my uploads over the last

00:18:26,690 --> 00:18:31,160
week or how many users are there or how

00:18:29,000 --> 00:18:33,440
many users uploads objects with more

00:18:31,160 --> 00:18:35,090
than 100 megabytes in size and all these

00:18:33,440 --> 00:18:38,660
sort of things and elastic size should

00:18:35,090 --> 00:18:43,840
be very fast and respond you a nice fast

00:18:38,660 --> 00:18:47,360
a JSON with this sort of a response and

00:18:43,840 --> 00:18:49,370
the status and open SUSE in openSUSE

00:18:47,360 --> 00:18:51,610
Factory we already have Luminos twelve

00:18:49,370 --> 00:18:53,510
point zero point two and the

00:18:51,610 --> 00:18:55,580
elasticsearch plugin is already a part

00:18:53,510 --> 00:18:56,780
of it and then the official release

00:18:55,580 --> 00:18:58,790
should be out in a month or something

00:18:56,780 --> 00:19:01,520
like this so we would be actually having

00:18:58,790 --> 00:19:04,130
the latest gateway feature within pretty

00:19:01,520 --> 00:19:05,420
soon as soon as as soon as it hit

00:19:04,130 --> 00:19:07,520
factory you will actually have it in

00:19:05,420 --> 00:19:10,940
tumbleweed and leap and then the devil

00:19:07,520 --> 00:19:12,710
packages file system safe and these are

00:19:10,940 --> 00:19:14,930
the contribution links if you want to

00:19:12,710 --> 00:19:16,910
contribute so we have a wiki called open

00:19:14,930 --> 00:19:18,860
source SF which actually has some distal

00:19:16,910 --> 00:19:20,600
specific information and we have it with

00:19:18,860 --> 00:19:23,150
no specific mail English as well which

00:19:20,600 --> 00:19:24,800
is open to yourself mailing list which

00:19:23,150 --> 00:19:26,480
is specifically for destroyer related

00:19:24,800 --> 00:19:28,430
related queries and if you actually have

00:19:26,480 --> 00:19:30,410
queries related to SF itself you should

00:19:28,430 --> 00:19:33,200
probably stay up same wielding this the

00:19:30,410 --> 00:19:34,730
link below and then we also have mailing

00:19:33,200 --> 00:19:36,710
lists for the solid deployment old

00:19:34,730 --> 00:19:39,020
deep-sea and open attic which is the

00:19:36,710 --> 00:19:40,340
event ever intent for managing safe

00:19:39,020 --> 00:19:43,900
clusters and stuff like this

00:19:40,340 --> 00:19:48,679
and this is the obscene github repo and

00:19:43,900 --> 00:19:51,960
that concludes my talk with since yeah

00:19:48,679 --> 00:19:53,730
thanks so you have a lot of

00:19:51,960 --> 00:19:56,550
vacations for yoga as you see as

00:19:53,730 --> 00:19:58,830
metadata storage in search logging

00:19:56,550 --> 00:20:01,710
storage in search and that's all we are

00:19:58,830 --> 00:20:04,020
doing right now for self so it's it's

00:20:01,710 --> 00:20:07,130
not there yet and we invite everyone to

00:20:04,020 --> 00:20:16,640
participate in this project and openSUSE

00:20:07,130 --> 00:20:16,640
questions ad now thank you very much

00:20:16,660 --> 00:20:24,099

YouTube URL: https://www.youtube.com/watch?v=OkbqrvCmmHM


