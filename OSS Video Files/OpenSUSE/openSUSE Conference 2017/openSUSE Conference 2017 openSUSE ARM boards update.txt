Title: openSUSE Conference 2017 openSUSE ARM boards update
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1246-opensuse-arm-boards-update



This talk will follow-up on the corresponding 2016 talk with an update on new ARM boards enabled in openSUSE.



Andreas Färber
Captions: 
	00:00:07,760 --> 00:00:14,330
so hello my name is Andreas

00:00:11,830 --> 00:00:16,850
be giving a status update

00:00:14,330 --> 00:00:20,980
happening with the openSUSE on port in

00:00:16,850 --> 00:00:20,980
particular in terms of hardware support

00:00:21,100 --> 00:00:27,860
let's start with a small disclaimer so I

00:00:25,910 --> 00:00:29,930
will be talking about hardware in this

00:00:27,860 --> 00:00:31,670
talk but this is not supposed to be a

00:00:29,930 --> 00:00:33,530
guide for actually buying hardware I

00:00:31,670 --> 00:00:35,570
will not be going into much details of

00:00:33,530 --> 00:00:37,850
the hardware but rather into the state

00:00:35,570 --> 00:00:39,920
of what the software is looking like and

00:00:37,850 --> 00:00:43,540
we're currently things are working and

00:00:39,920 --> 00:00:43,540
where things are not yet working so well

00:00:46,780 --> 00:00:55,489
initially I'll be going through the

00:00:51,460 --> 00:00:57,790
various number of boards grouped by the

00:00:55,489 --> 00:01:00,890
architecture that they're using

00:00:57,790 --> 00:01:04,159
afterwards you can kind of think of this

00:01:00,890 --> 00:01:06,380
as covering two dimensions so on the one

00:01:04,159 --> 00:01:09,110
hand they'll keep new boards keep coming

00:01:06,380 --> 00:01:11,150
up and new boards keep getting enabled

00:01:09,110 --> 00:01:13,010
for openSUSE as well then but on the

00:01:11,150 --> 00:01:14,659
other hand there's not just drivers

00:01:13,010 --> 00:01:15,860
getting added for boards but obviously

00:01:14,659 --> 00:01:17,630
there's things that you may actually

00:01:15,860 --> 00:01:19,730
want to do with the board once you have

00:01:17,630 --> 00:01:21,620
it booting so you may want to connect

00:01:19,730 --> 00:01:26,030
additional pieces of hardware for it and

00:01:21,620 --> 00:01:29,690
I will go briefly into that topic at the

00:01:26,030 --> 00:01:31,960
end as well as covering some work for

00:01:29,690 --> 00:01:34,160
actually building software for arm

00:01:31,960 --> 00:01:36,560
additionally on your right hand side

00:01:34,160 --> 00:01:38,060
stage left you will see a number of

00:01:36,560 --> 00:01:40,370
boards that I will be talking about

00:01:38,060 --> 00:01:42,230
later on here displays so feel free to

00:01:40,370 --> 00:01:47,890
walk there either during the talk or

00:01:42,230 --> 00:01:47,890
after the talk and let's get started now

00:01:49,870 --> 00:01:55,400
one key piece that we always need when

00:01:53,990 --> 00:01:57,620
we're dealing with arm boards is

00:01:55,400 --> 00:01:59,270
information that's something that in

00:01:57,620 --> 00:02:03,670
some cases is lacking in some other

00:01:59,270 --> 00:02:06,860
cases where more people are using it is

00:02:03,670 --> 00:02:08,869
what more widely available so basically

00:02:06,860 --> 00:02:10,909
you need to know how it can be actually

00:02:08,869 --> 00:02:13,519
what do you need to put on a particular

00:02:10,909 --> 00:02:15,799
medium to actually make the hardware

00:02:13,519 --> 00:02:18,500
boot you don't have a bias usually are

00:02:15,799 --> 00:02:21,620
on there not in a UEFI firmware either

00:02:18,500 --> 00:02:22,930
on most non server boards for the

00:02:21,620 --> 00:02:24,969
community so

00:02:22,930 --> 00:02:27,579
or you may need to actually do something

00:02:24,969 --> 00:02:32,319
to get it to show something on the

00:02:27,579 --> 00:02:34,120
screen or on the serial cable and if you

00:02:32,319 --> 00:02:37,209
do not have such an advanced server

00:02:34,120 --> 00:02:39,219
firmware that provides ECPI tables even

00:02:37,209 --> 00:02:43,900
then you also need a so-called device

00:02:39,219 --> 00:02:45,670
tree next question then is does the

00:02:43,900 --> 00:02:47,620
Linux kernel in particular the open

00:02:45,670 --> 00:02:51,250
zouzou kernel already contain drivers

00:02:47,620 --> 00:02:54,310
for the various peripherals of the chip

00:02:51,250 --> 00:02:56,500
that is located on your board and not

00:02:54,310 --> 00:02:59,430
just for the system on chip itself but

00:02:56,500 --> 00:03:05,680
also for power supply and various other

00:02:59,430 --> 00:03:10,769
possibly board specific parts it may be

00:03:05,680 --> 00:03:14,109
possible that a generic juice image or

00:03:10,769 --> 00:03:17,530
DVD image can actually boot if the board

00:03:14,109 --> 00:03:19,719
has UEFI if that is the case then you're

00:03:17,530 --> 00:03:21,459
all set however if not and this is going

00:03:19,719 --> 00:03:23,439
to be the majority of the cases I'm

00:03:21,459 --> 00:03:26,169
going to cover next and then you're

00:03:23,439 --> 00:03:33,099
going to need an image that is tailored

00:03:26,169 --> 00:03:36,099
to that particular board when preparing

00:03:33,099 --> 00:03:40,180
an image for board that no one else

00:03:36,099 --> 00:03:43,169
before you has has been has enabled then

00:03:40,180 --> 00:03:46,030
you will have to take care of two stages

00:03:43,169 --> 00:03:48,849
so in particular you have to make sure

00:03:46,030 --> 00:03:51,099
that the initial init Rd contains all

00:03:48,849 --> 00:03:54,790
the driver modules that are needed for

00:03:51,099 --> 00:04:00,489
the board to come up to them the actual

00:03:54,790 --> 00:04:03,909
root of s if you have the installation

00:04:00,489 --> 00:04:06,009
DVD basically that step is not relevant

00:04:03,909 --> 00:04:09,400
however you still need to make sure that

00:04:06,009 --> 00:04:11,470
also in a second step then the init Rd

00:04:09,400 --> 00:04:13,930
that is generated from within the

00:04:11,470 --> 00:04:17,320
running system also contains again all

00:04:13,930 --> 00:04:19,150
those modules to boot for the second

00:04:17,320 --> 00:04:21,159
time again so basically that may require

00:04:19,150 --> 00:04:28,030
doing some tweaks for førde Rockwood

00:04:21,159 --> 00:04:30,400
config as I already mentioned not so

00:04:28,030 --> 00:04:33,700
many boards by numbers that are out

00:04:30,400 --> 00:04:37,040
there I'm actually contain UEFI firmware

00:04:33,700 --> 00:04:39,020
on some and flash ship on the board

00:04:37,040 --> 00:04:41,510
if that is not the case then you need

00:04:39,020 --> 00:04:44,210
such a just enough operating system

00:04:41,510 --> 00:04:46,790
image for example to get started or some

00:04:44,210 --> 00:04:48,290
customized image with am additional

00:04:46,790 --> 00:04:51,350
software that you actually want to run

00:04:48,290 --> 00:04:53,330
there as an appliance however we have

00:04:51,350 --> 00:04:55,370
found that this does not scale very well

00:04:53,330 --> 00:04:57,800
so basically on the one hand it takes

00:04:55,370 --> 00:05:00,590
time to find out how do we actually boot

00:04:57,800 --> 00:05:02,420
on a particular board then all in the

00:05:00,590 --> 00:05:05,840
necessary packages need to be accepted

00:05:02,420 --> 00:05:07,640
into factory it that needs to build

00:05:05,840 --> 00:05:10,790
building that also takes time and

00:05:07,640 --> 00:05:17,660
resources and the number of arm boards

00:05:10,790 --> 00:05:19,460
keeps growing in previous talks at last

00:05:17,660 --> 00:05:22,460
year's open to the conference here at

00:05:19,460 --> 00:05:25,180
this stage and at various other events

00:05:22,460 --> 00:05:29,380
alexander Graf has been presenting work

00:05:25,180 --> 00:05:33,140
for making the u-boot boot loader

00:05:29,380 --> 00:05:38,000
implement the UEFI and specification to

00:05:33,140 --> 00:05:41,150
some degree the idea with that is that

00:05:38,000 --> 00:05:44,180
going forward now we actually want to

00:05:41,150 --> 00:05:46,520
move towards generic installation images

00:05:44,180 --> 00:05:49,520
or generic juice images rather than

00:05:46,520 --> 00:05:53,930
board specific images so the idea here

00:05:49,520 --> 00:05:56,330
is that we would like to split the

00:05:53,930 --> 00:05:59,990
firmware parts from the operating system

00:05:56,330 --> 00:06:02,000
parts on the other hand that then leaves

00:05:59,990 --> 00:06:05,360
the question where would users actually

00:06:02,000 --> 00:06:07,220
then get in the non generic pieces of

00:06:05,360 --> 00:06:10,700
the firmware to actually boot to such a

00:06:07,220 --> 00:06:12,020
point and for that obviously OBS seems

00:06:10,700 --> 00:06:13,420
like a really nice fit what we are

00:06:12,020 --> 00:06:17,030
already doing this to some degree

00:06:13,420 --> 00:06:19,340
however we're still seeing some issues

00:06:17,030 --> 00:06:22,130
that Kiwi simply assumes that you have a

00:06:19,340 --> 00:06:23,330
relatively standard Linux configuration

00:06:22,130 --> 00:06:25,850
and that you have like a boot partition

00:06:23,330 --> 00:06:28,010
or a root of s partition on there and

00:06:25,850 --> 00:06:30,650
with lots of files being populated from

00:06:28,010 --> 00:06:33,880
from packages which would actually not

00:06:30,650 --> 00:06:36,020
be necessary for a pure firmware image

00:06:33,880 --> 00:06:38,450
so that is basically where we're

00:06:36,020 --> 00:06:42,200
currently headed as a prerequisite to

00:06:38,450 --> 00:06:46,069
what you're going to hear next let's

00:06:42,200 --> 00:06:48,559
start with the oldest generation on v6

00:06:46,069 --> 00:06:50,930
we already had the Raspberry Pi one

00:06:48,559 --> 00:06:53,240
model be working with tumbleweed last

00:06:50,930 --> 00:06:56,509
year so what's been you is that the

00:06:53,240 --> 00:06:58,520
Raspberry Pi zero is no longer a theory

00:06:56,509 --> 00:07:00,259
that no one can actually purchase but

00:06:58,520 --> 00:07:02,449
it's actually possible to get your hands

00:07:00,259 --> 00:07:06,559
on one by now at least in some regions

00:07:02,449 --> 00:07:09,699
of the world and basically the the same

00:07:06,559 --> 00:07:12,379
humid package that we're using on the

00:07:09,699 --> 00:07:14,539
Raspberry Pi one is also working for the

00:07:12,379 --> 00:07:16,759
Raspberry Pi zero them as well as the

00:07:14,539 --> 00:07:18,169
kernel and the juice image can simply be

00:07:16,759 --> 00:07:23,389
reused and are actually working

00:07:18,169 --> 00:07:26,270
including the UEFI support even you are

00:07:23,389 --> 00:07:28,610
now is the zero W which has an

00:07:26,270 --> 00:07:31,129
additional wireless chip on there

00:07:28,610 --> 00:07:33,949
unfortunately this is not working at all

00:07:31,129 --> 00:07:37,209
so basically you don't even get a

00:07:33,949 --> 00:07:41,839
circular output from from from you boot

00:07:37,209 --> 00:07:45,229
and at this point there is neither DDS

00:07:41,839 --> 00:07:47,779
file available nor any work on on that

00:07:45,229 --> 00:07:53,419
device yet does anyone here in the

00:07:47,779 --> 00:07:56,509
audience happen to have one okay a few

00:07:53,419 --> 00:07:58,699
hands okay yeah so if you find anything

00:07:56,509 --> 00:08:00,800
out about that make sure to let us know

00:07:58,699 --> 00:08:02,740
but at this point unfortunately them

00:08:00,800 --> 00:08:09,110
openSUSE is not yet running on there

00:08:02,740 --> 00:08:10,939
moving on to arm b7 then in particular

00:08:09,110 --> 00:08:12,499
here I'm very proud to present that we

00:08:10,939 --> 00:08:14,930
have another community another

00:08:12,499 --> 00:08:18,529
contribution by a community member from

00:08:14,930 --> 00:08:22,159
Koons he had this d0 nano sock board

00:08:18,529 --> 00:08:25,879
with a cycle on five sock and he's

00:08:22,159 --> 00:08:27,559
packaged jubu to run on there and UEFI

00:08:25,879 --> 00:08:28,999
just happened to work on there out of

00:08:27,559 --> 00:08:31,699
the box

00:08:28,999 --> 00:08:32,990
I believe he's using the kernel default

00:08:31,699 --> 00:08:35,269
because obviously kernel lp8 you

00:08:32,990 --> 00:08:41,300
wouldn't work and there is a factory

00:08:35,269 --> 00:08:44,089
image with the name here that you'll

00:08:41,300 --> 00:08:45,920
just have to read for yourself so

00:08:44,089 --> 00:08:47,269
basically this is all working in open to

00:08:45,920 --> 00:08:53,120
the tumbleweed by now thank you very

00:08:47,269 --> 00:08:56,019
much then an update on the Firefly

00:08:53,120 --> 00:08:56,019
rk3288

00:08:57,020 --> 00:09:01,140
there has been a bit of fluctuation on

00:08:59,460 --> 00:09:03,420
which you would versions actually boot

00:09:01,140 --> 00:09:07,110
on it the current version in factory

00:09:03,420 --> 00:09:09,930
2017 or five is working again I did have

00:09:07,110 --> 00:09:12,180
the kernel LPA II image booting on there

00:09:09,930 --> 00:09:14,010
but unfortunately we haven't been able

00:09:12,180 --> 00:09:19,800
to get the juice image working it's

00:09:14,010 --> 00:09:23,000
simply I think it gets stuck during

00:09:19,800 --> 00:09:23,000
Oerlikon already

00:09:25,680 --> 00:09:33,780
similarly oh no sorry I mixed those up

00:09:29,760 --> 00:09:37,380
so basically the Firefly and get to a

00:09:33,780 --> 00:09:41,430
point where devices actually are

00:09:37,380 --> 00:09:43,680
starting to get enumerated and loaded on

00:09:41,430 --> 00:09:47,390
cereal so basically there's probably

00:09:43,680 --> 00:09:50,370
some modules missing in the India tardy

00:09:47,390 --> 00:09:54,060
then a few people have been asking about

00:09:50,370 --> 00:09:55,890
the tinker board this is a board using

00:09:54,060 --> 00:10:00,600
the very same chip but in a Raspberry Pi

00:09:55,890 --> 00:10:01,950
form factor and by asus and we do have

00:10:00,600 --> 00:10:04,170
you boot working on there but

00:10:01,950 --> 00:10:06,300
unfortunately in this case the juice

00:10:04,170 --> 00:10:09,870
image is stuck in early con because this

00:10:06,300 --> 00:10:14,550
uses a different power management IC so

00:10:09,870 --> 00:10:18,210
basically either some modules are still

00:10:14,550 --> 00:10:20,850
missing in there or we may need to

00:10:18,210 --> 00:10:23,850
change some modules to to built-in for

00:10:20,850 --> 00:10:33,360
there does anyone in the audience here

00:10:23,850 --> 00:10:37,160
today happen to have one okay then some

00:10:33,360 --> 00:10:40,260
users had asked for the judo neo board

00:10:37,160 --> 00:10:44,370
there is you will packet for that now

00:10:40,260 --> 00:10:50,310
and I also prepared juice image but it

00:10:44,370 --> 00:10:53,130
is getting beyond the energy Rd however

00:10:50,310 --> 00:10:56,430
it hangs at some point I think after

00:10:53,130 --> 00:10:59,100
Etna VF is initialized so either it's an

00:10:56,430 --> 00:11:02,610
issue between the various models of the

00:10:59,100 --> 00:11:04,320
Union your basic board or some pin

00:11:02,610 --> 00:11:05,900
muxing or some other setting and the

00:11:04,320 --> 00:11:13,220
device tree might be

00:11:05,900 --> 00:11:18,970
wrong then an update on the guitar

00:11:13,220 --> 00:11:22,100
module last time I reported that

00:11:18,970 --> 00:11:24,290
basically nothing was mainline and opens

00:11:22,100 --> 00:11:26,270
er was not running on there this is

00:11:24,290 --> 00:11:28,820
still the case at this point however

00:11:26,270 --> 00:11:30,920
them I sat down and started writing

00:11:28,820 --> 00:11:33,110
patches in order to boot a mainline

00:11:30,920 --> 00:11:35,270
kernel on there and it at this point

00:11:33,110 --> 00:11:36,770
it's possible to boot into an inner

00:11:35,270 --> 00:11:39,740
tardy but not yet further because

00:11:36,770 --> 00:11:49,970
drivers for SD card and other devices

00:11:39,740 --> 00:11:53,720
like USB are still missing the Nano

00:11:49,970 --> 00:11:58,580
piney o is one of several sunshi devices

00:11:53,720 --> 00:12:01,190
based on the HD HD sock we have a

00:11:58,580 --> 00:12:03,320
package in factory since recently by now

00:12:01,190 --> 00:12:05,750
that is actually booting unfortunately

00:12:03,320 --> 00:12:08,240
as for most and all Wiener devices UEFI

00:12:05,750 --> 00:12:11,780
support them is not yet working inside

00:12:08,240 --> 00:12:13,280
you boot so if anyone has such devices

00:12:11,780 --> 00:12:15,680
I'm pretty sure there will be someone

00:12:13,280 --> 00:12:17,570
listening to this talk we need people

00:12:15,680 --> 00:12:19,970
that actually sit down and debug why

00:12:17,570 --> 00:12:21,770
that is adding some debug statements to

00:12:19,970 --> 00:12:26,930
you boot and possibly adding some memory

00:12:21,770 --> 00:12:29,380
reservations to make that work we have

00:12:26,930 --> 00:12:31,850
an image available it boots everything

00:12:29,380 --> 00:12:34,660
worked out of the box surprisingly for

00:12:31,850 --> 00:12:38,030
ones that was really nice experience

00:12:34,660 --> 00:12:41,450
however some users actually wanted not

00:12:38,030 --> 00:12:45,080
the new but the new air to work and that

00:12:41,450 --> 00:12:49,340
is still not working so we have an inner

00:12:45,080 --> 00:12:53,450
pioneer air package by now however the

00:12:49,340 --> 00:12:55,040
kernel does not have the device trees so

00:12:53,450 --> 00:12:56,540
the question is does the device tree

00:12:55,040 --> 00:12:58,430
that is contained in you would is

00:12:56,540 --> 00:12:59,960
sufficient for that and unfortunately I

00:12:58,430 --> 00:13:01,490
did not yet get feedback from the

00:12:59,960 --> 00:13:03,800
community on whether that is the case so

00:13:01,490 --> 00:13:06,200
if you have such a board please let us

00:13:03,800 --> 00:13:07,730
know if you sell it if you tell us that

00:13:06,200 --> 00:13:12,370
it actually works then we can enable

00:13:07,730 --> 00:13:12,370
that and juice image in tumbleweed

00:13:13,999 --> 00:13:18,899
another board of that same family which

00:13:16,619 --> 00:13:23,790
by the way you can all see over there on

00:13:18,899 --> 00:13:26,579
the tables is the m1 plus the m1 plus is

00:13:23,790 --> 00:13:28,559
based on the m1 design as far as I

00:13:26,579 --> 00:13:31,259
understand and adds Wi-Fi on top of that

00:13:28,559 --> 00:13:34,230
and there were some patches for the m1

00:13:31,259 --> 00:13:37,470
model but no work for the m1 plus at

00:13:34,230 --> 00:13:40,290
this point yet so if we get time we

00:13:37,470 --> 00:13:40,860
might actually work on that but let's

00:13:40,290 --> 00:13:49,459
see about that

00:13:40,860 --> 00:13:54,119
maybe someone else's quicker we have

00:13:49,459 --> 00:13:56,579
some orange pie image already in in open

00:13:54,119 --> 00:13:59,939
to the tumbleweed and they recently made

00:13:56,579 --> 00:14:03,480
a new model based on a very new sock by

00:13:59,939 --> 00:14:06,899
the company called RDA and it's rather

00:14:03,480 --> 00:14:11,100
low-end cortex a5 with I think only 256

00:14:06,899 --> 00:14:13,170
megabytes of RAM unfortunately as with

00:14:11,100 --> 00:14:16,769
many new socks there is absolutely no

00:14:13,170 --> 00:14:22,470
support for it and as is we can't really

00:14:16,769 --> 00:14:26,639
do anything with it however earlier this

00:14:22,470 --> 00:14:31,889
year an orange pie I 96 was announced at

00:14:26,639 --> 00:14:35,069
Leonora connect which is in the 96 ports

00:14:31,889 --> 00:14:41,490
in this case IOT Edition form form

00:14:35,069 --> 00:14:42,299
format but it is not yet clear to me

00:14:41,490 --> 00:14:44,160
whether that will be a

00:14:42,299 --> 00:14:46,589
community-supported board or an actual

00:14:44,160 --> 00:14:48,029
in our reference board so let's see how

00:14:46,589 --> 00:14:54,029
this offer support turns out going

00:14:48,029 --> 00:14:57,869
forward in a similar category in Japan

00:14:54,029 --> 00:15:02,069
there is a so called FQ 96 board by

00:14:57,869 --> 00:15:05,009
Fujitsu there are a huge patches

00:15:02,069 --> 00:15:07,350
available on top of older versions of

00:15:05,009 --> 00:15:08,879
u-boot and the kernel however that

00:15:07,350 --> 00:15:11,850
doesn't seem to be any work on making

00:15:08,879 --> 00:15:14,669
that supported in the mainline versions

00:15:11,850 --> 00:15:16,829
of kernel and u-boot so we've been in

00:15:14,669 --> 00:15:19,509
talks to

00:15:16,829 --> 00:15:21,220
improve the situation there and let's

00:15:19,509 --> 00:15:23,199
see how that pans out going forward

00:15:21,220 --> 00:15:27,179
unfortunately we did not manage to get

00:15:23,199 --> 00:15:27,179
one here in time for for the conference

00:15:27,779 --> 00:15:33,939
moving on to 64-bit territory the

00:15:31,779 --> 00:15:37,239
Raspberry Pi 3 which unfortunately we do

00:15:33,939 --> 00:15:38,679
not have here today and so unfortunately

00:15:37,239 --> 00:15:40,569
we're not able to show anything with a

00:15:38,679 --> 00:15:43,299
display that's there but we can show

00:15:40,569 --> 00:15:48,039
through the output later on after this

00:15:43,299 --> 00:15:54,189
talk we did have roughly PI images based

00:15:48,039 --> 00:15:56,109
on the 42.2 kernel around well made of

00:15:54,189 --> 00:15:58,089
last year already by now it is available

00:15:56,109 --> 00:16:00,099
and built in a factory with factory

00:15:58,089 --> 00:16:03,459
kernel there are some differences of

00:16:00,099 --> 00:16:06,549
note in particular the factory image

00:16:03,459 --> 00:16:09,549
does not contain any support for for

00:16:06,549 --> 00:16:13,679
Wi-Fi whereas the 42.2 image has back

00:16:09,549 --> 00:16:16,089
ports by zeusie that do enable this and

00:16:13,679 --> 00:16:17,619
thanks to Alexander Graff and Fabian

00:16:16,089 --> 00:16:25,959
folks in particular who have been doing

00:16:17,619 --> 00:16:29,789
a great job working on those images an

00:16:25,959 --> 00:16:32,709
update on the pine 64 so there had been

00:16:29,789 --> 00:16:35,649
community images for that in name

00:16:32,709 --> 00:16:39,309
contrib for quite some time already by

00:16:35,649 --> 00:16:42,009
now it's actually possible to boot the

00:16:39,309 --> 00:16:44,139
the tumbleweed kernel if you're willing

00:16:42,009 --> 00:16:45,819
to sacrifice a bit of functionality so

00:16:44,139 --> 00:16:47,919
in particular network was not yet

00:16:45,819 --> 00:16:49,419
working but if you have a use e to

00:16:47,919 --> 00:16:55,749
Ethernet adapter then you can easily

00:16:49,419 --> 00:16:57,819
walk around that right and be aware that

00:16:55,749 --> 00:17:03,129
there are some upcoming changes coming

00:16:57,819 --> 00:17:05,409
so currently the u-boot package that

00:17:03,129 --> 00:17:08,319
we're building in factory only contains

00:17:05,409 --> 00:17:11,559
the actual you boot binary and we're

00:17:08,319 --> 00:17:15,220
using some tools to actually make it

00:17:11,559 --> 00:17:17,589
boot with a Allwinner firmware whereas

00:17:15,220 --> 00:17:20,709
the next version of yuba that we don't

00:17:17,589 --> 00:17:22,899
have packaged yet will actually include

00:17:20,709 --> 00:17:25,209
a secondary program loader support so

00:17:22,899 --> 00:17:29,460
that basically we have an all open

00:17:25,209 --> 00:17:33,300
source solution for for the pint 64

00:17:29,460 --> 00:17:35,400
however currently we do not have the

00:17:33,300 --> 00:17:38,070
untrusted firmware packages in

00:17:35,400 --> 00:17:42,860
tumbleweed so we would be able to build

00:17:38,070 --> 00:17:46,350
a you boot pine 64 image package in

00:17:42,860 --> 00:17:48,480
factory but and that package would need

00:17:46,350 --> 00:17:51,720
to be rebuilt in the contrib in order to

00:17:48,480 --> 00:17:53,790
actually provide the the full booting

00:17:51,720 --> 00:17:58,770
support for for that new building

00:17:53,790 --> 00:18:03,660
approach based on the same sock once

00:17:58,770 --> 00:18:05,460
again there is a nano PI a 64 there's no

00:18:03,660 --> 00:18:07,380
DTS for that here it should be

00:18:05,460 --> 00:18:09,630
relatively easy to add if someone has

00:18:07,380 --> 00:18:11,220
interest and in that particular one it's

00:18:09,630 --> 00:18:14,340
simply been a matter of time in

00:18:11,220 --> 00:18:16,800
finishing a lot of enablement for for

00:18:14,340 --> 00:18:18,720
this conference but that should be

00:18:16,800 --> 00:18:24,210
possible simply based on the software

00:18:18,720 --> 00:18:26,070
that is available for the pint 64 also

00:18:24,210 --> 00:18:28,080
leveraging much of the work that we had

00:18:26,070 --> 00:18:31,730
already done for the pint 64 it's

00:18:28,080 --> 00:18:35,730
possible to boot the orange PI PC to

00:18:31,730 --> 00:18:38,160
using the pint 64 juice image simply by

00:18:35,730 --> 00:18:40,080
using a different bootloader at this

00:18:38,160 --> 00:18:41,850
point in time we do not have packages

00:18:40,080 --> 00:18:44,430
for that yet but it was possible to

00:18:41,850 --> 00:18:47,160
build that by using the upstream view

00:18:44,430 --> 00:18:50,280
good sources and adding a couple patches

00:18:47,160 --> 00:18:52,370
on top it by now it might actually work

00:18:50,280 --> 00:19:00,780
using master bond trove of your boot

00:18:52,370 --> 00:19:02,610
tree since this week I think and again

00:19:00,780 --> 00:19:06,420
we're using the same trip another board

00:19:02,610 --> 00:19:09,560
of that family there is a patch

00:19:06,420 --> 00:19:13,410
available the patch for you boot works

00:19:09,560 --> 00:19:16,320
unfortunately I've not been able to test

00:19:13,410 --> 00:19:18,690
the the juice image on there not not

00:19:16,320 --> 00:19:20,600
successfully tested I'm assuming that

00:19:18,690 --> 00:19:23,100
because a juice image is too large for

00:19:20,600 --> 00:19:25,500
512 and be bored at this point in time

00:19:23,100 --> 00:19:27,510
so if you have like an older Raspberry

00:19:25,500 --> 00:19:29,760
Pi you may want to double check that it

00:19:27,510 --> 00:19:31,050
actually still sort works for you and

00:19:29,760 --> 00:19:34,400
please let us know on the mailing list

00:19:31,050 --> 00:19:34,400
then or open a bug

00:19:35,200 --> 00:19:44,410
Road update on the geek box I have

00:19:39,270 --> 00:19:47,170
unofficial ATF packages building by now

00:19:44,410 --> 00:19:49,960
and there is the beginnings of an

00:19:47,170 --> 00:19:54,340
upstream viewboot port this is not yet

00:19:49,960 --> 00:19:59,050
in the 2017 or five version but should

00:19:54,340 --> 00:20:02,350
be in master bunch at least soon I think

00:19:59,050 --> 00:20:05,530
not yet at this point only serial works

00:20:02,350 --> 00:20:07,570
so in theory you could use mini compucom

00:20:05,530 --> 00:20:09,460
or some other tool like that in order to

00:20:07,570 --> 00:20:11,890
transfer a kernel why the serial cable

00:20:09,460 --> 00:20:13,390
but that's really no fun so I better

00:20:11,890 --> 00:20:21,040
wait and hopefully at some point we're

00:20:13,390 --> 00:20:23,320
going to have drivers for EM SD card the

00:20:21,040 --> 00:20:26,860
successor to that particular stock is

00:20:23,320 --> 00:20:30,340
the $33.99 we've been able to boot

00:20:26,860 --> 00:20:32,920
viewboot on that board yet however the

00:20:30,340 --> 00:20:36,160
number of boot devices unsupported is

00:20:32,920 --> 00:20:38,860
not yet that big emmc was working for me

00:20:36,160 --> 00:20:40,720
I also found a branch where network was

00:20:38,860 --> 00:20:43,060
working with some restrictions and I

00:20:40,720 --> 00:20:45,850
heard that I believe haiku has a branch

00:20:43,060 --> 00:20:47,290
where supposedly USB is working so yes

00:20:45,850 --> 00:20:48,970
that is just been confirmed thank you

00:20:47,290 --> 00:20:52,620
very much for that hoping that we'll

00:20:48,970 --> 00:20:52,620
soon find its way into mainline as well

00:20:55,200 --> 00:21:00,580
so last year once again I had talked

00:20:58,510 --> 00:21:01,990
about the Bubblegum 96 and I believe I

00:21:00,580 --> 00:21:04,600
was asking whether anyone in the

00:21:01,990 --> 00:21:06,970
audience had access to one that was not

00:21:04,600 --> 00:21:10,150
the case one of our Chinese colleague

00:21:06,970 --> 00:21:13,210
managed to get one one such board to to

00:21:10,150 --> 00:21:16,080
Germany and based on that I've been able

00:21:13,210 --> 00:21:19,210
to do some initial enablement for that

00:21:16,080 --> 00:21:22,240
however at this point still only booting

00:21:19,210 --> 00:21:24,880
into it into an init Rd works but

00:21:22,240 --> 00:21:31,930
there's still no drivers for for SD card

00:21:24,880 --> 00:21:35,260
or other devices again similar situation

00:21:31,930 --> 00:21:38,110
for the Andromeda box edge I did some

00:21:35,260 --> 00:21:40,810
initial upstream patches for that one

00:21:38,110 --> 00:21:44,530
could boot into an init Rd with a minor

00:21:40,810 --> 00:21:46,570
MDT hack but no open lose a yet for lack

00:21:44,530 --> 00:21:47,780
of drivers and in particular because I

00:21:46,570 --> 00:21:59,540
did not get the

00:21:47,780 --> 00:22:01,700
drivers to work yet the so-called Armada

00:21:59,540 --> 00:22:04,670
80/40 community board has been rebranded

00:22:01,700 --> 00:22:08,780
Machado bin since last year still the

00:22:04,670 --> 00:22:11,540
same layout and hardware we have a

00:22:08,780 --> 00:22:14,240
package as you would package available

00:22:11,540 --> 00:22:21,160
for that we've tested that one via train

00:22:14,240 --> 00:22:25,370
loading but unfortunately the drivers in

00:22:21,160 --> 00:22:29,000
you boot and the kernel do not match so

00:22:25,370 --> 00:22:34,610
basically I was able to install from sd

00:22:29,000 --> 00:22:39,310
card why a juice efi image onto a SATA

00:22:34,610 --> 00:22:44,450
disk however obviously in that case the

00:22:39,310 --> 00:22:46,160
kernels get installed onto the SATA disk

00:22:44,450 --> 00:22:48,400
and then our next boot you can actually

00:22:46,160 --> 00:22:51,170
access the newly installed kernel so

00:22:48,400 --> 00:22:53,630
that's still rather unhappy and let's

00:22:51,170 --> 00:22:58,400
hope that drivers make progress in Ubud

00:22:53,630 --> 00:22:59,540
for that to work or since last week or

00:22:58,400 --> 00:23:02,990
the week before there's instructions

00:22:59,540 --> 00:23:07,070
available for building a me DK to which

00:23:02,990 --> 00:23:09,040
at this point I haven't packaged yet but

00:23:07,070 --> 00:23:14,330
the kernel did work for that board and

00:23:09,040 --> 00:23:16,490
like I said the generic efi juice boots

00:23:14,330 --> 00:23:20,390
on that board and can be used only for

00:23:16,490 --> 00:23:22,970
for some of those boards not sticking to

00:23:20,390 --> 00:23:26,390
the SPS a specification it's necessary

00:23:22,970 --> 00:23:28,670
to switch the console from tty am a 0 to

00:23:26,390 --> 00:23:31,640
t 2 is 0 or whatever it is for the

00:23:28,670 --> 00:23:33,140
particular hardware if it doesn't and

00:23:31,640 --> 00:23:39,380
supply the path so that you can simply

00:23:33,140 --> 00:23:43,070
drop it a similar trip from Marvel is

00:23:39,380 --> 00:23:45,590
being used on the espresso pin however

00:23:43,070 --> 00:23:48,260
unfortunately the driver situation in

00:23:45,590 --> 00:23:51,790
you wood has been fluctuating so at some

00:23:48,260 --> 00:23:55,610
point SATA was actually working it

00:23:51,790 --> 00:23:57,530
regressed in 2017 or 5 so I'm hoping

00:23:55,610 --> 00:23:58,820
that will improve going forward so that

00:23:57,530 --> 00:24:01,090
we can actually build images for that

00:23:58,820 --> 00:24:01,090
one

00:24:02,420 --> 00:24:09,260
we also are showing an NXT base board

00:24:09,560 --> 00:24:15,240
where we have you would prepared for I'm

00:24:13,710 --> 00:24:17,130
unfortunately there is no instructions

00:24:15,240 --> 00:24:18,990
on how to actually use that with so it

00:24:17,130 --> 00:24:22,170
would be necessary to load that by a

00:24:18,990 --> 00:24:24,540
network and train loaded which is still

00:24:22,170 --> 00:24:29,930
to be tested does anyone here happen to

00:24:24,540 --> 00:24:29,930
have one the freedom board from an XP

00:24:33,470 --> 00:24:41,910
then very very new there is finally

00:24:37,080 --> 00:24:43,710
software for the poplar board I did

00:24:41,910 --> 00:24:45,630
manage to get it working just days

00:24:43,710 --> 00:24:49,110
before the conference pretty much the

00:24:45,630 --> 00:24:52,830
day before that there are some initial

00:24:49,110 --> 00:24:56,610
packages for you good and a loader

00:24:52,830 --> 00:24:58,950
available in a contrib those work there

00:24:56,610 --> 00:25:01,230
are also there's a patch available to a

00:24:58,950 --> 00:25:05,430
script in order to build an a bootable

00:25:01,230 --> 00:25:11,010
partition table and in partitions

00:25:05,430 --> 00:25:13,170
however using Linux next emmc is working

00:25:11,010 --> 00:25:14,580
so from that particular installation

00:25:13,170 --> 00:25:18,660
script you can actually boot into

00:25:14,580 --> 00:25:20,910
openSUSE I believe also SD is working in

00:25:18,660 --> 00:25:23,940
the kernel however SD was not working in

00:25:20,910 --> 00:25:26,160
in you root so using external images is

00:25:23,940 --> 00:25:32,250
still a bit tricky because you boot

00:25:26,160 --> 00:25:36,750
supports USB but the kernel at least in

00:25:32,250 --> 00:25:38,130
my bill did not support USB yet but at

00:25:36,750 --> 00:25:42,330
least it's looking much more positive

00:25:38,130 --> 00:25:43,710
than some months ago very new we have

00:25:42,330 --> 00:25:46,640
the hardware here but no openSUSE

00:25:43,710 --> 00:25:49,830
running on there yet is the Heike 960

00:25:46,640 --> 00:25:53,750
there are initial kernel patches

00:25:49,830 --> 00:25:57,030
available for that one yet however the

00:25:53,750 --> 00:25:59,490
links to to the edk firmware I just

00:25:57,030 --> 00:26:01,790
received the other day so there was not

00:25:59,490 --> 00:26:05,220
enough time to to prepare that but

00:26:01,790 --> 00:26:06,050
probably in some weeks or month we will

00:26:05,220 --> 00:26:10,630
have some

00:26:06,050 --> 00:26:10,630
initial image working on there hopefully

00:26:11,770 --> 00:26:17,150
so now for the first half hour we've

00:26:15,080 --> 00:26:19,430
been talking about development boards

00:26:17,150 --> 00:26:23,710
and I now want to take some time to look

00:26:19,430 --> 00:26:26,090
at some some other hardware as well so

00:26:23,710 --> 00:26:29,750
what other devices are that that we

00:26:26,090 --> 00:26:31,940
might run openSUSE on so when the arm

00:26:29,750 --> 00:26:34,490
port was still very early some people

00:26:31,940 --> 00:26:36,890
tried to use their arm based phones

00:26:34,490 --> 00:26:38,360
route their Android to run a change

00:26:36,890 --> 00:26:40,130
route in there with some opens with the

00:26:38,360 --> 00:26:44,180
packages in there simply to have some

00:26:40,130 --> 00:26:45,740
place to run things on it's not

00:26:44,180 --> 00:26:48,800
something that I've been personally

00:26:45,740 --> 00:26:50,780
focusing on because phones and tablets

00:26:48,800 --> 00:26:52,400
often have the problem that you don't

00:26:50,780 --> 00:26:55,070
get through the access I've tried to do

00:26:52,400 --> 00:26:57,860
that for the Nexus 9 ones but I never

00:26:55,070 --> 00:27:00,650
managed to get the disabled two to

00:26:57,860 --> 00:27:02,510
actually work limiting the things that

00:27:00,650 --> 00:27:06,680
you can then actually try with with main

00:27:02,510 --> 00:27:10,310
line kernels on there but for instance

00:27:06,680 --> 00:27:13,370
we had openSUSE running on the Samsung

00:27:10,310 --> 00:27:15,980
Chromebook the initial arm one and I got

00:27:13,370 --> 00:27:20,180
it working on the HP Chromebook 11 as

00:27:15,980 --> 00:27:22,730
well for some time at least then more

00:27:20,180 --> 00:27:24,800
recently there are some do-it-yourself

00:27:22,730 --> 00:27:29,630
kits for building your own and laptops

00:27:24,800 --> 00:27:32,450
so there are ones available based on the

00:27:29,630 --> 00:27:39,980
Raspberry Pi and there's also one

00:27:32,450 --> 00:27:46,790
available from I forget the name it's

00:27:39,980 --> 00:27:51,890
based on the on the the a 64 chip remind

00:27:46,790 --> 00:27:54,550
what the company name so the guys in

00:27:51,890 --> 00:27:54,550
Bulgaria yeah

00:27:56,510 --> 00:28:00,980
max yes right the ones with Alex or

00:27:58,940 --> 00:28:02,750
Linux in mind someone right so there's

00:28:00,980 --> 00:28:05,320
some kids like that available for

00:28:02,750 --> 00:28:08,809
building your own node and your own

00:28:05,320 --> 00:28:11,179
notebooks with with the trip that you

00:28:08,809 --> 00:28:13,100
can then actually also debug in better

00:28:11,179 --> 00:28:17,320
ways than you can with consumer devices

00:28:13,100 --> 00:28:19,760
like well Chromebooks mostly and

00:28:17,320 --> 00:28:21,590
obviously for the record there are

00:28:19,760 --> 00:28:26,990
servers that are running armed and we

00:28:21,590 --> 00:28:29,360
did see the presentation of the from

00:28:26,990 --> 00:28:31,429
from soft iron at the keynote last

00:28:29,360 --> 00:28:34,030
openSUSE conference those devices are

00:28:31,429 --> 00:28:36,470
available but well they're not exactly

00:28:34,030 --> 00:28:40,160
available for for small budgets at this

00:28:36,470 --> 00:28:41,960
point yet so they do exist and we have

00:28:40,160 --> 00:28:43,640
open those running on multiple of them

00:28:41,960 --> 00:28:45,380
but we've usually not been covering them

00:28:43,640 --> 00:28:46,730
because it's not what most people here

00:28:45,380 --> 00:28:49,820
in the audience are actually going to

00:28:46,730 --> 00:28:55,000
have access to and then to the final

00:28:49,820 --> 00:29:00,290
part routers nAES devices and TV boxes

00:28:55,000 --> 00:29:03,200
are available from lots of vendors in

00:29:00,290 --> 00:29:05,450
some cases with device trees in mainline

00:29:03,200 --> 00:29:09,650
kernel support already available and in

00:29:05,450 --> 00:29:13,750
other cases it's possible to do that in

00:29:09,650 --> 00:29:17,419
fairly easy ways when playing with us

00:29:13,750 --> 00:29:21,860
failure is always possibility so like I

00:29:17,419 --> 00:29:26,210
said doing my own electrical circuit for

00:29:21,860 --> 00:29:28,220
making the headphone output switch to a

00:29:26,210 --> 00:29:30,830
serial output on the Nexus 9 didn't

00:29:28,220 --> 00:29:34,510
quite work so I pretty much gave up

00:29:30,830 --> 00:29:40,130
those efforts I had also worked on

00:29:34,510 --> 00:29:43,520
immediate egg based Xiaomi box DB box

00:29:40,130 --> 00:29:46,120
that is I did not manage to locate the

00:29:43,520 --> 00:29:50,270
silver pins to get any output from there

00:29:46,120 --> 00:29:53,780
and then there was a Kickstarter project

00:29:50,270 --> 00:29:56,450
called the row board but unfortunately

00:29:53,780 --> 00:29:58,190
unlike the initial plans it was actually

00:29:56,450 --> 00:30:01,460
tripped in a way that no one can

00:29:58,190 --> 00:30:04,130
actually really tinker with it so there

00:30:01,460 --> 00:30:07,520
is no bootloader access to those at all

00:30:04,130 --> 00:30:08,800
there should be some draytek pins if one

00:30:07,520 --> 00:30:10,180
locates them

00:30:08,800 --> 00:30:11,860
actually wires and map and rights

00:30:10,180 --> 00:30:15,280
necessary drivers to do something with

00:30:11,860 --> 00:30:17,050
that but at this point it's not possible

00:30:15,280 --> 00:30:20,500
to run them and to run up into the on

00:30:17,050 --> 00:30:22,360
that board if you try some some of those

00:30:20,500 --> 00:30:25,390
consumer devices that are not yet

00:30:22,360 --> 00:30:27,160
documented to work obviously it transits

00:30:25,390 --> 00:30:29,110
are that people can't tell you what you

00:30:27,160 --> 00:30:31,120
need to do if you see this error or if

00:30:29,110 --> 00:30:35,230
you don't get output at all

00:30:31,120 --> 00:30:38,230
so basically use external media don't

00:30:35,230 --> 00:30:40,990
override the emmc think about what

00:30:38,230 --> 00:30:43,630
you're going to do when the kernel gets

00:30:40,990 --> 00:30:46,390
dark or you overwrite something by

00:30:43,630 --> 00:30:51,610
accident and maybe your your partition

00:30:46,390 --> 00:30:53,770
is gone do backups if you can like do a

00:30:51,610 --> 00:30:55,150
DD from an Android that is tripping on

00:30:53,770 --> 00:30:57,940
the device back that up to another

00:30:55,150 --> 00:31:00,370
device that's a fairly safe way in some

00:30:57,940 --> 00:31:02,770
cases there are USB based backup

00:31:00,370 --> 00:31:05,500
solutions we've been packaging a few

00:31:02,770 --> 00:31:08,020
tools to help with that so for there's

00:31:05,500 --> 00:31:10,420
the sunshi tools available and I've

00:31:08,020 --> 00:31:15,190
prepared an e to resubmit the orc I

00:31:10,420 --> 00:31:17,470
developed tool for frog trip so yeah you

00:31:15,190 --> 00:31:19,360
may find information what to do for

00:31:17,470 --> 00:31:21,220
certain types of devices in general but

00:31:19,360 --> 00:31:25,000
usually not specific to those devices

00:31:21,220 --> 00:31:28,330
and in particular where the vendor is

00:31:25,000 --> 00:31:30,790
located it might become difficult to sue

00:31:28,330 --> 00:31:32,350
them to actually give you all the GPL

00:31:30,790 --> 00:31:34,360
sources and instructions on how to

00:31:32,350 --> 00:31:35,950
actually make something than bootable

00:31:34,360 --> 00:31:43,000
out of those was this for particular

00:31:35,950 --> 00:31:45,280
device now I'm already last year I got

00:31:43,000 --> 00:31:48,580
my hands on this particular TV box the

00:31:45,280 --> 00:31:51,340
viga is 95 it was one of the first

00:31:48,580 --> 00:31:52,630
devices with two gigabytes running the

00:31:51,340 --> 00:31:55,060
very new at that point in time

00:31:52,630 --> 00:31:56,560
I'm logic is nano five inch if it was

00:31:55,060 --> 00:31:59,590
the first 64-bit chip from that

00:31:56,560 --> 00:32:03,640
particular vendor and in the meantime

00:31:59,590 --> 00:32:05,860
I've managed to get a train loaded

00:32:03,640 --> 00:32:08,350
mainline you boot to work on there so

00:32:05,860 --> 00:32:10,540
basically I'm loading you boot by on the

00:32:08,350 --> 00:32:12,220
network and then jumping into the new

00:32:10,540 --> 00:32:15,130
you boot so that we actually have you if

00:32:12,220 --> 00:32:17,770
I support in there and by now there is

00:32:15,130 --> 00:32:18,860
also since the 2017 or five version

00:32:17,770 --> 00:32:22,700
there is

00:32:18,860 --> 00:32:26,559
mm see support so it's possible to to

00:32:22,700 --> 00:32:29,000
load things from from an SD card

00:32:26,559 --> 00:32:33,529
tumbleweed karna is working on their

00:32:29,000 --> 00:32:35,510
out-of-the-box and just be careful that

00:32:33,529 --> 00:32:39,049
because it works on this particular

00:32:35,510 --> 00:32:41,090
board or box device does not mean that

00:32:39,049 --> 00:32:43,010
it may work on another device that you

00:32:41,090 --> 00:32:46,220
have access to that may require some

00:32:43,010 --> 00:32:47,720
some tweaks maybe they're the firmware

00:32:46,220 --> 00:32:49,100
is more restrictive does not give you a

00:32:47,720 --> 00:32:51,679
prompt to enter the necessary boot

00:32:49,100 --> 00:32:53,510
commands so it may require some some

00:32:51,679 --> 00:32:57,200
more tinkering and based on what exactly

00:32:53,510 --> 00:33:00,950
you want to do also on the next slide

00:32:57,200 --> 00:33:06,529
I'll go a bit more into how the firmware

00:33:00,950 --> 00:33:09,620
is structured in this case so the reason

00:33:06,529 --> 00:33:13,429
that I've chained loading in this case

00:33:09,620 --> 00:33:17,090
is that I have not yet successfully

00:33:13,429 --> 00:33:18,950
tested the tools to make a firmware

00:33:17,090 --> 00:33:21,380
image out of you boot that can actually

00:33:18,950 --> 00:33:25,519
be flashed on to emmc or another

00:33:21,380 --> 00:33:27,350
bootable device there again when

00:33:25,519 --> 00:33:29,809
thinking about recovery strategies one

00:33:27,350 --> 00:33:32,240
such strategy might be if the device is

00:33:29,809 --> 00:33:34,700
capable of booting on SD card either

00:33:32,240 --> 00:33:37,460
then doing such experiments on instacart

00:33:34,700 --> 00:33:42,350
but unfortunately in most cases like

00:33:37,460 --> 00:33:45,289
here the emmc comes before SD in the

00:33:42,350 --> 00:33:48,649
enumeration order so basically one would

00:33:45,289 --> 00:33:51,679
need to back up the emmc probably and

00:33:48,649 --> 00:33:58,130
then to experiment on SD or directly on

00:33:51,679 --> 00:34:01,159
MMC the good news is that besides those

00:33:58,130 --> 00:34:03,080
TV boxes there's also development boards

00:34:01,159 --> 00:34:05,809
available that have better access to

00:34:03,080 --> 00:34:08,119
pins and more documentation available so

00:34:05,809 --> 00:34:10,639
by now there is a juice image available

00:34:08,119 --> 00:34:13,159
for the Odroid C 2 it works out of the

00:34:10,639 --> 00:34:18,589
box and in order to get to this point I

00:34:13,159 --> 00:34:20,899
had to hack together some tools that are

00:34:18,589 --> 00:34:23,659
packaged as meson tools meson is the

00:34:20,899 --> 00:34:25,960
codename for this family of system on

00:34:23,659 --> 00:34:25,960
ships

00:34:26,679 --> 00:34:32,639
basically the

00:34:28,829 --> 00:34:39,319
you boot boot loader is combined with

00:34:32,639 --> 00:34:39,319
some ATF like from bread blobs and

00:34:39,469 --> 00:34:47,009
amended by certain headers that have

00:34:43,700 --> 00:34:50,129
description about offset sizes and

00:34:47,009 --> 00:34:53,129
checksums and there was a proprietary

00:34:50,129 --> 00:34:55,319
tool available from M logic for x86

00:34:53,129 --> 00:34:57,630
machines then you can find that in

00:34:55,319 --> 00:35:00,959
various github repositories them however

00:34:57,630 --> 00:35:04,349
we are building our age 64 images inside

00:35:00,959 --> 00:35:07,769
OBS on age 64 hardware so we can truly

00:35:04,349 --> 00:35:10,589
execute x86 binaries even if we were

00:35:07,769 --> 00:35:12,719
allowed to use excit 6 binaries without

00:35:10,589 --> 00:35:15,420
sources to build up our packages in

00:35:12,719 --> 00:35:16,680
there so what I did was write them a

00:35:15,420 --> 00:35:20,609
mutual called

00:35:16,680 --> 00:35:25,529
AML boot cig which basically was created

00:35:20,609 --> 00:35:28,890
by comparing binary output of input and

00:35:25,529 --> 00:35:31,859
output files of used with the original

00:35:28,890 --> 00:35:35,039
tool and then starting to to write the

00:35:31,859 --> 00:35:37,469
tool in such a way that it generates the

00:35:35,039 --> 00:35:41,009
same output or at least similar output

00:35:37,469 --> 00:35:45,269
by now M as the original proprietary

00:35:41,009 --> 00:35:46,979
tool and this is working for this

00:35:45,269 --> 00:35:50,069
particular board if you have other

00:35:46,979 --> 00:35:51,779
boards I am very happy about any

00:35:50,069 --> 00:35:53,910
feedback on whether this board works

00:35:51,779 --> 00:35:56,249
simply because there is no documentation

00:35:53,910 --> 00:35:58,709
available for this format and much of

00:35:56,249 --> 00:36:01,109
this has been guesswork including the

00:35:58,709 --> 00:36:03,180
names of struct field and what they

00:36:01,109 --> 00:36:09,359
actually mean and are I'm supposed to

00:36:03,180 --> 00:36:10,799
contain based on the same chip there's

00:36:09,359 --> 00:36:14,549
another Development Board available

00:36:10,799 --> 00:36:17,279
since recently than in a PI K 2 I send

00:36:14,549 --> 00:36:23,900
through the patches to to get it booting

00:36:17,279 --> 00:36:28,319
and it is working however there is no

00:36:23,900 --> 00:36:30,299
contrib for that yet because on the one

00:36:28,319 --> 00:36:36,810
hand we don't have a you would package

00:36:30,299 --> 00:36:41,190
yet the firma blobs are not yet packaged

00:36:36,810 --> 00:36:45,270
and what my tools are working with that

00:36:41,190 --> 00:36:48,090
but well there simply is no fully

00:36:45,270 --> 00:36:50,580
booting juice image yet but basically it

00:36:48,090 --> 00:36:54,390
sorry I keep saying that you need to

00:36:50,580 --> 00:36:58,070
combine a self built bootloader with the

00:36:54,390 --> 00:36:58,070
juice image in order to get it to boot

00:37:01,310 --> 00:37:09,240
as nano 5x is a distinct chip from s 905

00:37:06,830 --> 00:37:11,130
at this point in time there is only

00:37:09,240 --> 00:37:15,120
downstream you boot support so it's not

00:37:11,130 --> 00:37:19,590
in mainline I have not yet tested our

00:37:15,120 --> 00:37:21,030
kernel on there I do know that the

00:37:19,590 --> 00:37:22,710
Mazzone tools do not support this

00:37:21,030 --> 00:37:28,560
particular chip yet so that will require

00:37:22,710 --> 00:37:30,270
some more trial testing and because of

00:37:28,560 --> 00:37:34,890
all that obviously there is no juice

00:37:30,270 --> 00:37:38,540
image for that available yet someone on

00:37:34,890 --> 00:37:43,200
the mailing list was reporting that he

00:37:38,540 --> 00:37:46,020
simply took another linux image and

00:37:43,200 --> 00:37:48,030
simply used our Juice rudaba's table all

00:37:46,020 --> 00:37:52,140
that's obviously an option for from any

00:37:48,030 --> 00:37:53,970
of such cases but well obviously we want

00:37:52,140 --> 00:38:01,520
to have a proper solution that we can

00:37:53,970 --> 00:38:06,390
give to our users in a yes at FOSDEM I

00:38:01,520 --> 00:38:10,410
had shown a TV box running the s9 of 912

00:38:06,390 --> 00:38:13,680
chip you boot for that is not yet

00:38:10,410 --> 00:38:16,140
available mainline I have submitted

00:38:13,680 --> 00:38:17,790
patches to make the mainline kernel boot

00:38:16,140 --> 00:38:23,160
on there that was what I was showing it

00:38:17,790 --> 00:38:25,560
fast M not here today sadly and the a my

00:38:23,160 --> 00:38:32,040
boot image tool does not support the S

00:38:25,560 --> 00:38:33,900
nano 12 either at this point in time now

00:38:32,040 --> 00:38:37,230
something that I'm very proud of having

00:38:33,900 --> 00:38:40,050
accomplished is I got my hands on a TV

00:38:37,230 --> 00:38:43,410
box with a very new real tech 64-bit

00:38:40,050 --> 00:38:45,330
song there are unfortunately absolutely

00:38:43,410 --> 00:38:47,759
no sources available neither for the

00:38:45,330 --> 00:38:52,859
bootloader or nor for the kernel

00:38:47,759 --> 00:38:55,319
but by after a long time of having no

00:38:52,859 --> 00:39:01,409
success with this I found a way to

00:38:55,319 --> 00:39:04,589
actually boot a you image on there and

00:39:01,409 --> 00:39:12,569
by now it's possible to boot into an

00:39:04,589 --> 00:39:14,579
Atari and since yesterday the patches

00:39:12,569 --> 00:39:16,649
for that are also integrated into the

00:39:14,579 --> 00:39:20,929
Linux next tree and hopefully will make

00:39:16,649 --> 00:39:20,929
it either into for 12 or for 13 in

00:39:24,409 --> 00:39:28,109
addition to some of the rockchip

00:39:26,429 --> 00:39:30,779
development boards already mentioned

00:39:28,109 --> 00:39:34,439
earlier there's also TV boxes and I know

00:39:30,779 --> 00:39:39,299
that Matias paga has worked on a TV box

00:39:34,439 --> 00:39:41,909
at some point with the RK 33 68 did you

00:39:39,299 --> 00:39:45,059
have success with that yet not not fully

00:39:41,909 --> 00:39:48,269
okay I did not have success here yet

00:39:45,059 --> 00:39:51,179
either but I would wanted to mention

00:39:48,269 --> 00:39:54,029
this for completeness because at this

00:39:51,179 --> 00:39:56,789
point in time we are starting to see the

00:39:54,029 --> 00:40:00,179
first devices the first consumer devices

00:39:56,789 --> 00:40:02,669
ship with a you boot that is new enough

00:40:00,179 --> 00:40:04,619
to actually contain LX graphs UEFI

00:40:02,669 --> 00:40:10,919
support so this has a modified version

00:40:04,619 --> 00:40:14,759
of 2017 or 1 on there and it's possible

00:40:10,919 --> 00:40:16,709
to reboot into the rock USB mode and

00:40:14,759 --> 00:40:20,149
connect the board with the RK develop

00:40:16,709 --> 00:40:22,979
tool that is upcoming for factory

00:40:20,149 --> 00:40:25,739
however I have not yet managed to

00:40:22,979 --> 00:40:28,829
actually get into the mask ROM mode that

00:40:25,739 --> 00:40:31,499
would be necessary to to flesh an

00:40:28,829 --> 00:40:34,559
updated or modified version of you boot

00:40:31,499 --> 00:40:38,689
on there Heiko have you been able to

00:40:34,559 --> 00:40:38,689
play with any such devices or boards yet

00:40:39,649 --> 00:40:47,429
ok but I'm pretty sure so there is Rock

00:40:45,569 --> 00:40:50,279
trip is actively working on this and

00:40:47,429 --> 00:40:52,049
there's a it should be available and the

00:40:50,279 --> 00:40:53,729
something should be available in the

00:40:52,049 --> 00:40:55,769
upcoming you good version and then the

00:40:53,729 --> 00:40:58,009
question is how much changes might

00:40:55,769 --> 00:40:59,920
actually be necessary to make it work on

00:40:58,009 --> 00:41:02,020
not there intro

00:40:59,920 --> 00:41:06,030
reference boards but the devices that we

00:41:02,020 --> 00:41:10,960
actually have access to as mere mortals

00:41:06,030 --> 00:41:15,400
last but not least last year we had the

00:41:10,960 --> 00:41:19,270
tour's omnia in the room and that's a

00:41:15,400 --> 00:41:23,490
Wi-Fi router that was launched on on

00:41:19,270 --> 00:41:27,450
IndieGoGo and Michelle here in the room

00:41:23,490 --> 00:41:29,140
is working for the company that I did it

00:41:27,450 --> 00:41:34,750
by now

00:41:29,140 --> 00:41:36,309
I have open Zeus booting on there both

00:41:34,750 --> 00:41:40,049
me and someone else worked on upstream

00:41:36,309 --> 00:41:45,339
patches it's available in the kernel yet

00:41:40,049 --> 00:41:47,740
already however the u-boot that it was

00:41:45,339 --> 00:41:52,869
shipping did not have support for our in

00:41:47,740 --> 00:41:55,089
it Rd and since a couple of days

00:41:52,869 --> 00:41:57,910
possibly weeks there are patches for

00:41:55,089 --> 00:41:59,710
mainline available where we're still

00:41:57,910 --> 00:42:01,930
waiting for a for a second revision and

00:41:59,710 --> 00:42:04,660
then hopefully and we should start to be

00:42:01,930 --> 00:42:11,619
able to boot openSUSE on there without

00:42:04,660 --> 00:42:16,630
major hacks so far for the first part of

00:42:11,619 --> 00:42:18,430
this talk now if we're looking beyond

00:42:16,630 --> 00:42:20,200
just getting the hardware to boot our

00:42:18,430 --> 00:42:21,549
operating system and having sufficient

00:42:20,200 --> 00:42:23,950
drivers in there

00:42:21,549 --> 00:42:25,660
and many of those development boards at

00:42:23,950 --> 00:42:31,780
least have connectors where you can

00:42:25,660 --> 00:42:34,599
actually attach sensors motors and

00:42:31,780 --> 00:42:36,849
various other devices and buses if we

00:42:34,599 --> 00:42:39,970
look at the Raspberry Pi for instance

00:42:36,849 --> 00:42:42,730
then it has this originally 26 pin now a

00:42:39,970 --> 00:42:45,700
40 pin connector with various functions

00:42:42,730 --> 00:42:51,849
available and the way that it works in

00:42:45,700 --> 00:42:55,150
raspbian is that there is a number of D

00:42:51,849 --> 00:42:57,640
tbo files delivered on the boot

00:42:55,150 --> 00:43:01,150
partition and you can configure either

00:42:57,640 --> 00:43:06,040
manually via the convict text or via a

00:43:01,150 --> 00:43:09,490
tool that they are shipping to have

00:43:06,040 --> 00:43:13,410
those DTP o files applied as overlays to

00:43:09,490 --> 00:43:13,410
the base device tree

00:43:14,220 --> 00:43:22,030
whereas in the case of mainline kernels

00:43:18,130 --> 00:43:25,960
and openSUSE we do not have any DGP old

00:43:22,030 --> 00:43:28,780
files yet I've started I'm preparing

00:43:25,960 --> 00:43:31,840
some for the boards the expansion boards

00:43:28,780 --> 00:43:35,320
and in some cases external sensors or

00:43:31,840 --> 00:43:39,730
devices that I had accessible but this

00:43:35,320 --> 00:43:41,230
is not yet sorted out how this will

00:43:39,730 --> 00:43:43,000
actually move forward obviously there's

00:43:41,230 --> 00:43:47,050
questions of how can we actually

00:43:43,000 --> 00:43:49,660
plausibly reuse snippets for such device

00:43:47,050 --> 00:43:53,110
trees that on the one hand need to

00:43:49,660 --> 00:43:54,940
connect to a board specific device tree

00:43:53,110 --> 00:43:57,400
but where basically the functions that

00:43:54,940 --> 00:44:01,600
each expansion board is providing are

00:43:57,400 --> 00:44:04,270
always the same so this is not yet

00:44:01,600 --> 00:44:07,480
really solved at this point in time yet

00:44:04,270 --> 00:44:09,970
and the solution that I have been

00:44:07,480 --> 00:44:14,800
testing on openSUSE is to simply write a

00:44:09,970 --> 00:44:17,440
a boot script for you boot that after

00:44:14,800 --> 00:44:20,609
hewed has loaded the device tree the

00:44:17,440 --> 00:44:24,730
base device tree it applies a hard-coded

00:44:20,609 --> 00:44:27,820
set of trees that happen to match my

00:44:24,730 --> 00:44:30,390
hardware and afterwards the kernel can

00:44:27,820 --> 00:44:35,740
simply reuse all the devices in the tree

00:44:30,390 --> 00:44:39,190
if we look if we look further into the

00:44:35,740 --> 00:44:41,320
future then the idea is that also the

00:44:39,190 --> 00:44:43,780
kernel should be able to apply some of

00:44:41,320 --> 00:44:46,900
those device tree overlays at least when

00:44:43,780 --> 00:44:51,040
you don't need it to load something from

00:44:46,900 --> 00:44:52,840
inside your boot which is a whole nother

00:44:51,040 --> 00:44:58,810
topic it also really depends on live

00:44:52,840 --> 00:45:02,350
device tree in a new boot but for for

00:44:58,810 --> 00:45:04,480
the the standard cases the idea is that

00:45:02,350 --> 00:45:06,910
you would actually install into the

00:45:04,480 --> 00:45:09,460
Linux file system a set of D tbo files

00:45:06,910 --> 00:45:12,430
and you would configure them to be

00:45:09,460 --> 00:45:17,350
applied in some way possibly by uses

00:45:12,430 --> 00:45:20,320
p.m. a system de demon or simply by self

00:45:17,350 --> 00:45:22,119
written unit file may be long term it

00:45:20,320 --> 00:45:25,840
would be even idea to have a last module

00:45:22,119 --> 00:45:27,040
to configure such while GPIO is and

00:45:25,840 --> 00:45:30,130
expansion boards

00:45:27,040 --> 00:45:32,710
but as long as we don't know how exactly

00:45:30,130 --> 00:45:34,120
the underlying tools will look like we

00:45:32,710 --> 00:45:38,740
haven't really ventured into that

00:45:34,120 --> 00:45:40,600
territory yet so I'm going to show two

00:45:38,740 --> 00:45:44,920
projects that I've been working from

00:45:40,600 --> 00:45:48,240
just as examples of what is possible so

00:45:44,920 --> 00:45:50,740
I had access to a very small

00:45:48,240 --> 00:45:51,640
microcontroller kit that had a

00:45:50,740 --> 00:45:56,550
detachable

00:45:51,640 --> 00:45:59,050
i-square see connected sensor on it

00:45:56,550 --> 00:46:01,180
there was no mainline kernel of em

00:45:59,050 --> 00:46:04,870
mainline kernel driver available for

00:46:01,180 --> 00:46:10,570
this particular chipset and obviously if

00:46:04,870 --> 00:46:12,490
you need to to write an overlay file

00:46:10,570 --> 00:46:13,870
yourself the first thing to find out is

00:46:12,490 --> 00:46:17,530
what you actually need to write into

00:46:13,870 --> 00:46:21,220
there to make it work on the next slide

00:46:17,530 --> 00:46:25,540
I will show a bit about generic drivers

00:46:21,220 --> 00:46:28,540
there are there is an I squared C dev

00:46:25,540 --> 00:46:31,710
driver where you can generically access

00:46:28,540 --> 00:46:35,140
ice Christi devices from user space

00:46:31,710 --> 00:46:36,940
however what I was looking into was a

00:46:35,140 --> 00:46:38,530
real kernel driver for this and it's

00:46:36,940 --> 00:46:39,940
actually pretty easy to write once you

00:46:38,530 --> 00:46:42,550
actually have and the datasheet

00:46:39,940 --> 00:46:46,030
available which for those ones here is

00:46:42,550 --> 00:46:48,100
available so basically I just need to

00:46:46,030 --> 00:46:49,960
add the finishing touches and get that

00:46:48,100 --> 00:46:52,420
into mainline kernel and that is

00:46:49,960 --> 00:46:55,330
something that anyone having such boards

00:46:52,420 --> 00:47:01,240
really should look into it's easy to do

00:46:55,330 --> 00:47:05,470
in some cases and is simply the the most

00:47:01,240 --> 00:47:06,790
reliable way to use certain boards in

00:47:05,470 --> 00:47:09,850
the driver you will find lots of

00:47:06,790 --> 00:47:12,940
instructions in the web that will tell

00:47:09,850 --> 00:47:16,390
you to download particular libraries but

00:47:12,940 --> 00:47:18,130
a lot of them have licensing and also

00:47:16,390 --> 00:47:20,350
functional problems when using them with

00:47:18,130 --> 00:47:21,640
a mainline kernel and depending on what

00:47:20,350 --> 00:47:24,700
softer you actually have to then and

00:47:21,640 --> 00:47:26,440
combine it with there's more Center

00:47:24,700 --> 00:47:30,610
drivers in the same category the next

00:47:26,440 --> 00:47:32,380
one I'm still working on in theory it

00:47:30,610 --> 00:47:34,810
should be possible to use for example

00:47:32,380 --> 00:47:37,480
GPM chips from Infineon with a mainline

00:47:34,810 --> 00:47:39,940
kernel there the current generation is

00:47:37,480 --> 00:47:40,300
PI based the previous one was I Square

00:47:39,940 --> 00:47:44,170
CP

00:47:40,300 --> 00:47:45,940
unfortunately the spy based ones don't

00:47:44,170 --> 00:47:47,380
really get recognized although in this

00:47:45,940 --> 00:47:50,050
case there are main line drivers

00:47:47,380 --> 00:47:52,060
available already I'm not sure yet and

00:47:50,050 --> 00:47:54,820
hope that we can sort that out with them

00:47:52,060 --> 00:48:00,040
together there's a number of Arduino

00:47:54,820 --> 00:48:01,540
shields available and in case you are

00:48:00,040 --> 00:48:03,430
not yet aware em I've started

00:48:01,540 --> 00:48:06,640
documenting in the wiki based on

00:48:03,430 --> 00:48:10,450
suggestions from Felicia over there

00:48:06,640 --> 00:48:13,140
Michelle sonic and there are various

00:48:10,450 --> 00:48:15,640
adapters available that you can actually

00:48:13,140 --> 00:48:18,520
use for example a Raspberry Pi board

00:48:15,640 --> 00:48:20,740
with the 40 pin connector from there go

00:48:18,520 --> 00:48:23,740
to an Arduino connector and then you

00:48:20,740 --> 00:48:26,740
basically can use almost the whole range

00:48:23,740 --> 00:48:30,550
of Arduino boards that are available out

00:48:26,740 --> 00:48:33,910
there as long as the voltage levels are

00:48:30,550 --> 00:48:36,580
compatible and as long as the board that

00:48:33,910 --> 00:48:40,210
you're using it with has the right

00:48:36,580 --> 00:48:42,400
functions available on the pins so for

00:48:40,210 --> 00:48:45,280
example there are boards available that

00:48:42,400 --> 00:48:47,470
do not have spy implemented in hardware

00:48:45,280 --> 00:48:49,510
so you would need to either use a bit

00:48:47,470 --> 00:48:54,190
bamming the sorbets banging on the GPIO

00:48:49,510 --> 00:48:55,630
pins or simply use another board that

00:48:54,190 --> 00:48:57,670
actually has those functions available

00:48:55,630 --> 00:49:00,270
where a particular hardware design

00:48:57,670 --> 00:49:00,270
expects it

00:49:00,360 --> 00:49:07,090
the second project to showcase that I

00:49:05,470 --> 00:49:10,570
would have loved to talk about more but

00:49:07,090 --> 00:49:12,130
unfortunately is very slow going so in

00:49:10,570 --> 00:49:14,320
case you don't know what Laura is this

00:49:12,130 --> 00:49:17,440
is a wireless technology for low-power

00:49:14,320 --> 00:49:20,080
less wide area networks so you can go

00:49:17,440 --> 00:49:22,630
for maybe three kilometers have a signal

00:49:20,080 --> 00:49:27,640
transmitted by using a certain signal

00:49:22,630 --> 00:49:31,060
spectrum and there are there is among

00:49:27,640 --> 00:49:37,210
others protocol and available called

00:49:31,060 --> 00:49:39,880
loja one which unlike some other

00:49:37,210 --> 00:49:44,160
protocols like for example Zig fox and

00:49:39,880 --> 00:49:47,650
the new and B IOT is actually available

00:49:44,160 --> 00:49:49,150
so that you can run your own gateways so

00:49:47,650 --> 00:49:52,910
basically you can have end-to-end

00:49:49,150 --> 00:49:56,210
communication via this technology in

00:49:52,910 --> 00:49:58,760
fury all running on openSUSE and there

00:49:56,210 --> 00:50:01,280
are some various github projects to do

00:49:58,760 --> 00:50:03,290
this user space and however every time

00:50:01,280 --> 00:50:05,720
you try to use the spy def driver on

00:50:03,290 --> 00:50:07,550
mainline kernels you get a huge one on

00:50:05,720 --> 00:50:09,890
stack trace that you're not supposed to

00:50:07,550 --> 00:50:11,810
do this we had some conversations about

00:50:09,890 --> 00:50:14,210
this at Faust them with some of the spy

00:50:11,810 --> 00:50:15,680
em maintainer x' and they do not intend

00:50:14,210 --> 00:50:17,840
to change this because they are saying

00:50:15,680 --> 00:50:20,300
and that's not the right way to use spy

00:50:17,840 --> 00:50:22,610
devices unless that particular use case

00:50:20,300 --> 00:50:25,040
has been vetted to be absolutely

00:50:22,610 --> 00:50:26,900
necessary and their recommended salute

00:50:25,040 --> 00:50:31,190
the recommended walk around I won't call

00:50:26,900 --> 00:50:33,440
it solution was to reuse the device tree

00:50:31,190 --> 00:50:35,660
compatible from one of those white

00:50:33,440 --> 00:50:39,080
listed devices instead of the the one

00:50:35,660 --> 00:50:41,300
instead of the the literal spy Dev name

00:50:39,080 --> 00:50:44,150
in order to get around that but that's

00:50:41,300 --> 00:50:47,330
not really a clean solution and as

00:50:44,150 --> 00:50:49,790
already mentioned a number of in

00:50:47,330 --> 00:50:53,540
particular one very widespread Lee used

00:50:49,790 --> 00:50:57,980
em GPIO library for the Raspberry Pi is

00:50:53,540 --> 00:50:59,660
under LGPL a30 and later whereas most of

00:50:57,980 --> 00:51:02,030
the software that people are trying to

00:50:59,660 --> 00:51:04,100
use with this is under GPL to which we

00:51:02,030 --> 00:51:07,160
cannot legally package in in OBS

00:51:04,100 --> 00:51:09,620
unfortunately so basically the software

00:51:07,160 --> 00:51:13,490
for user space is not in a very great

00:51:09,620 --> 00:51:16,160
shape there's no kernel driver so I was

00:51:13,490 --> 00:51:18,380
asking about this at a large hog at

00:51:16,160 --> 00:51:21,770
Faust them apparently no one at that

00:51:18,380 --> 00:51:24,500
point in time had been working on kernel

00:51:21,770 --> 00:51:26,720
drivers for those particular chipsets so

00:51:24,500 --> 00:51:31,100
I started to do that on my own once

00:51:26,720 --> 00:51:33,890
again I'm not really a networking expert

00:51:31,100 --> 00:51:36,410
on that socket layer in in the Linux

00:51:33,890 --> 00:51:40,760
kernel so things have been a bit rough

00:51:36,410 --> 00:51:43,330
for me but I do have modules available

00:51:40,760 --> 00:51:47,210
in this particular github repository

00:51:43,330 --> 00:51:51,320
that can be compiled against then

00:51:47,210 --> 00:51:54,700
installed openSUSE kernel it's doing

00:51:51,320 --> 00:51:58,520
some weird hacks like reusing socket

00:51:54,700 --> 00:52:00,869
identifiers in order to not go beyond

00:51:58,520 --> 00:52:05,369
the list of defined protocols

00:52:00,869 --> 00:52:07,859
so some care must be taken to to not run

00:52:05,369 --> 00:52:10,979
into weird errors but it's possible to

00:52:07,859 --> 00:52:14,039
test such things also on the previous

00:52:10,979 --> 00:52:16,319
slide the the sensor driver that I

00:52:14,039 --> 00:52:19,109
developed I did that as a local kernel

00:52:16,319 --> 00:52:21,839
module in the running openSUSE system so

00:52:19,109 --> 00:52:23,969
I'm very much encouraging people that if

00:52:21,839 --> 00:52:26,099
they have a working opens with a kernel

00:52:23,969 --> 00:52:28,200
they can actually use that for them

00:52:26,099 --> 00:52:30,690
development of additional drivers or

00:52:28,200 --> 00:52:34,469
backports of the medicinal drivers on

00:52:30,690 --> 00:52:37,170
top of that as in particular KMP if you

00:52:34,469 --> 00:52:39,180
do it in in in OBS or if you do it

00:52:37,170 --> 00:52:41,969
locally you can just build the KMP and

00:52:39,180 --> 00:52:46,009
forcefully insert it it will show an

00:52:41,969 --> 00:52:46,009
ugly taint warning but it works

00:52:47,029 --> 00:52:53,279
after having spy driver prepared I also

00:52:50,160 --> 00:53:00,989
am set out to write first and their dev

00:52:53,279 --> 00:53:04,769
based driver so this is new in Fallout

00:53:00,989 --> 00:53:09,119
11 it's a way that you can actually

00:53:04,769 --> 00:53:11,099
enslave a kernel driver to a serial port

00:53:09,119 --> 00:53:13,170
so usually you would get if you have a

00:53:11,099 --> 00:53:15,809
serial port enabled in droid device tree

00:53:13,170 --> 00:53:17,819
you would get some TTY whatever device

00:53:15,809 --> 00:53:19,499
inside the kernel and then you can use

00:53:17,819 --> 00:53:22,979
user space tools to read and write from

00:53:19,499 --> 00:53:25,589
that device in this case you can have a

00:53:22,979 --> 00:53:27,989
kernel driver implementing M serial

00:53:25,589 --> 00:53:30,150
based protocols and there's initial

00:53:27,989 --> 00:53:31,739
drivers being prepared for some

00:53:30,150 --> 00:53:34,849
bluetooth chipsets that was the main

00:53:31,739 --> 00:53:38,880
driver on on various boards so on the

00:53:34,849 --> 00:53:42,359
Raspberry Pi 342 des to image them it's

00:53:38,880 --> 00:53:45,869
necessary to call em HCI attached in

00:53:42,359 --> 00:53:48,749
order to load the firmware onto the

00:53:45,869 --> 00:53:53,069
actual under the the Bluetooth module

00:53:48,749 --> 00:53:54,660
the Wi-Fi and Bluetooth module forum for

00:53:53,069 --> 00:53:57,710
Bluetooth to work and the idea is to

00:53:54,660 --> 00:54:02,759
have all this handled by the kernel

00:53:57,710 --> 00:54:08,390
similarly the pint 64 has z-wave module

00:54:02,759 --> 00:54:11,170
available for home range wireless

00:54:08,390 --> 00:54:15,220
communication

00:54:11,170 --> 00:54:16,359
in theory it should be possible to write

00:54:15,220 --> 00:54:18,220
current drivers for all those

00:54:16,359 --> 00:54:20,650
technologies wherever it makes sense to

00:54:18,220 --> 00:54:23,440
abstract a generic interface so that

00:54:20,650 --> 00:54:25,089
user space no longer needs to know which

00:54:23,440 --> 00:54:32,220
hardware exactly it is actually dealing

00:54:25,089 --> 00:54:34,470
with approaching the end of the talk

00:54:32,220 --> 00:54:36,730
cross compilers have been an issue

00:54:34,470 --> 00:54:39,789
occasionally coming up obviously you can

00:54:36,730 --> 00:54:44,289
build arm software inside OBS running on

00:54:39,789 --> 00:54:45,970
arm hardware or 32-bit and 64-bit with

00:54:44,289 --> 00:54:47,529
arm basics I would get to say that we're

00:54:45,970 --> 00:54:50,289
currently been having for some packages

00:54:47,529 --> 00:54:53,230
some emulation problems ever since July

00:54:50,289 --> 00:54:56,799
PC introduced some optimizations so you

00:54:53,230 --> 00:55:00,190
may see some weird assertions on arm v6

00:54:56,799 --> 00:55:02,230
but on v7 and on v8 should work well

00:55:00,190 --> 00:55:05,319
enough however if you're building a

00:55:02,230 --> 00:55:08,039
kernel maybe you just want to cross

00:55:05,319 --> 00:55:11,349
compile it from your x86 based notebook

00:55:08,039 --> 00:55:15,670
so there are these cross compilers

00:55:11,349 --> 00:55:18,279
available just for reference and they're

00:55:15,670 --> 00:55:21,430
only suitable for the kernel the 32-bit

00:55:18,279 --> 00:55:23,829
version is can also be used for you boot

00:55:21,430 --> 00:55:32,500
when using a new boot internal

00:55:23,829 --> 00:55:37,119
ellipticity copy I have prepared in the

00:55:32,500 --> 00:55:42,339
last days a new lip based arm cross

00:55:37,119 --> 00:55:44,799
compiler this should work for any frame

00:55:42,339 --> 00:55:47,079
by development for cortex-m devices I am

00:55:44,799 --> 00:55:50,710
NOT here true whether ahem how far it

00:55:47,079 --> 00:55:52,390
works for for cortex a so if anyone is

00:55:50,710 --> 00:55:56,170
interested in that please give it a go

00:55:52,390 --> 00:55:58,119
and the next step obviously would be to

00:55:56,170 --> 00:56:02,049
prepare also a cross compiler like this

00:55:58,119 --> 00:56:04,180
for AR 64 so that again we can also have

00:56:02,049 --> 00:56:07,690
our openSUSE cross compiler available in

00:56:04,180 --> 00:56:15,369
order to build you boot for a out 64 by

00:56:07,690 --> 00:56:17,020
a cross so that is it for this talk we

00:56:15,369 --> 00:56:19,470
still have some minutes left for your

00:56:17,020 --> 00:56:19,470
questions

00:56:21,110 --> 00:56:35,510
I know I've talked a lot don't be shy um

00:56:31,000 --> 00:56:37,310
works yes yeah you might know it but in

00:56:35,510 --> 00:56:41,180
front of you there is a nice zero box

00:56:37,310 --> 00:56:43,670
with your charming an M star MSO chip 90

00:56:41,180 --> 00:56:45,920
180 down there on the ground which is

00:56:43,670 --> 00:56:48,470
capturing the HDMI signal giving it back

00:56:45,920 --> 00:56:50,660
scale to the Beamer into our input

00:56:48,470 --> 00:56:52,550
source for recording at the moment it's

00:56:50,660 --> 00:56:55,490
running some Android with some nasty

00:56:52,550 --> 00:56:57,650
render app which is recording the HDMI

00:56:55,490 --> 00:56:59,540
and giving it all to the output I would

00:56:57,650 --> 00:57:09,470
like to see next year running on tableau

00:56:59,540 --> 00:57:11,440
it of course I think we all agree that

00:57:09,470 --> 00:57:13,490
that would be would be nice to have

00:57:11,440 --> 00:57:15,740
however this is not really a wish

00:57:13,490 --> 00:57:17,810
concert you can express your wishes but

00:57:15,740 --> 00:57:20,570
it will need someone to actually work on

00:57:17,810 --> 00:57:22,880
it it was difficult to get all the

00:57:20,570 --> 00:57:25,370
hardware that year I've worked on I'm

00:57:22,880 --> 00:57:26,870
here for this event this year and of

00:57:25,370 --> 00:57:28,730
course you can assume that it takes

00:57:26,870 --> 00:57:31,130
quite some time I'm trying to navigate

00:57:28,730 --> 00:57:35,240
back to I think that was on the failure

00:57:31,130 --> 00:57:38,060
slide so it's I did not quite catch the

00:57:35,240 --> 00:57:41,450
exact number but it sounds like a

00:57:38,060 --> 00:57:44,920
similar trip as on the row board so I

00:57:41,450 --> 00:57:47,990
would not be too hopeful so the thing is

00:57:44,920 --> 00:57:51,940
that I have actually talked to

00:57:47,990 --> 00:57:55,630
representative from M star about it and

00:57:51,940 --> 00:58:01,010
that person said that there is nothing

00:57:55,630 --> 00:58:03,590
inherently blocking other people from

00:58:01,010 --> 00:58:06,110
booting something from via their

00:58:03,590 --> 00:58:09,320
bootloader such as us as a Linux

00:58:06,110 --> 00:58:12,410
distribution however that depends on the

00:58:09,320 --> 00:58:14,660
bootloader configuration from that from

00:58:12,410 --> 00:58:17,930
the particular vendor so basically it's

00:58:14,660 --> 00:58:22,130
on a case by case basis and in addition

00:58:17,930 --> 00:58:25,250
to that there are no kernel drivers

00:58:22,130 --> 00:58:28,820
upstream for that so you'd need to get

00:58:25,250 --> 00:58:32,340
access to the sources for the device

00:58:28,820 --> 00:58:35,250
they use their own I think it's called

00:58:32,340 --> 00:58:38,280
in boot boot loader which is not related

00:58:35,250 --> 00:58:40,530
to Jeru boot so I'm not sure whether

00:58:38,280 --> 00:58:42,600
sources for that one are available and

00:58:40,530 --> 00:58:47,160
how well it's documented what exactly

00:58:42,600 --> 00:58:50,520
two of that however if you if you use

00:58:47,160 --> 00:58:53,700
Google you will find slides from I think

00:58:50,520 --> 00:58:56,400
the Nara connect 2016 where their

00:58:53,700 --> 00:59:01,590
director of 96 ports was mentioning an

00:58:56,400 --> 00:59:06,120
upcoming M star based 96 port which I

00:59:01,590 --> 00:59:08,250
think would even have a 64-bit sock on

00:59:06,120 --> 00:59:10,830
there but obviously that would not help

00:59:08,250 --> 00:59:12,450
with a particular device that you have

00:59:10,830 --> 00:59:18,150
access to the question would rather be

00:59:12,450 --> 00:59:19,890
would any of all these devices be

00:59:18,150 --> 00:59:22,740
realistic to get into a state where

00:59:19,890 --> 00:59:25,110
they're doing video input and output

00:59:22,740 --> 00:59:27,480
processing in the way that you need them

00:59:25,110 --> 00:59:29,700
for this particular use case exactly

00:59:27,480 --> 00:59:31,860
because I mean it's probably not really

00:59:29,700 --> 00:59:33,690
interesting to have tumbleweed running

00:59:31,860 --> 00:59:35,160
on the the tumbleweed kernel running and

00:59:33,690 --> 00:59:37,260
having a serial output a networked

00:59:35,160 --> 00:59:40,800
device but what you want is the HDMI

00:59:37,260 --> 00:59:43,080
input HDMI output an HP HDMI capture and

00:59:40,800 --> 00:59:45,030
hell will freeze over before you get

00:59:43,080 --> 00:59:48,780
this without clothes sauce vendor

00:59:45,030 --> 00:59:51,540
drivers I mean I have all those TV boxes

00:59:48,780 --> 00:59:54,270
that you mentioned are probably all IP

00:59:51,540 --> 00:59:57,510
TV boxes correct they don't have any

00:59:54,270 --> 01:00:00,120
funerals and some do some don't okay

00:59:57,510 --> 01:00:03,240
because I mean I'm working for about

01:00:00,120 --> 01:00:05,490
almost 15 years now with set-top boxes

01:00:03,240 --> 01:00:06,240
we set about set of boxes and you never

01:00:05,490 --> 01:00:07,470
ever

01:00:06,240 --> 01:00:09,450
the only thing where we get an

01:00:07,470 --> 01:00:12,750
open-source driver is the old T box -

01:00:09,450 --> 01:00:14,520
which was simply Hecht and so--and which

01:00:12,750 --> 01:00:16,740
was actually Hecht with with help from

01:00:14,520 --> 01:00:21,270
the hardware vendor as it's known today

01:00:16,740 --> 01:00:24,660
so all those multimedia boxes are

01:00:21,270 --> 01:00:27,780
probably hardly worth spending lots of

01:00:24,660 --> 01:00:29,790
time because I mean it's fun for for

01:00:27,780 --> 01:00:33,650
education to have the camera booting but

01:00:29,790 --> 01:00:35,490
you often cannot do really much

01:00:33,650 --> 01:00:37,569
interesting things with it because you

01:00:35,490 --> 01:00:41,369
will never be able to get

01:00:37,569 --> 01:00:44,499
or never it's unlikely that you will get

01:00:41,369 --> 01:00:45,969
video in or out there a part the only

01:00:44,499 --> 01:00:48,329
one where this really works at a

01:00:45,969 --> 01:00:54,099
raspberry PI's because they have to

01:00:48,329 --> 01:00:55,959
rather open drivers that's that's my and

01:00:54,099 --> 01:00:57,729
even there the driver situation is

01:00:55,959 --> 01:00:59,739
progressing very slowly at this point

01:00:57,729 --> 01:01:01,149
yeah but but at least you have to have

01:00:59,739 --> 01:01:02,919
access to the encoder and the decoder

01:01:01,149 --> 01:01:06,279
and stuff and so you can you can

01:01:02,919 --> 01:01:10,389
actually use this so but it's reversing

01:01:06,279 --> 01:01:12,759
and I think I forgot to mention that um

01:01:10,389 --> 01:01:16,119
after I did the the initial patch set

01:01:12,759 --> 01:01:21,130
for for the s 905 Bailey bruh was

01:01:16,119 --> 01:01:24,819
contracted to do mail and enablement for

01:01:21,130 --> 01:01:27,189
for the M logic chips that are being

01:01:24,819 --> 01:01:32,499
used in many of those Chinese TV boxes

01:01:27,189 --> 01:01:35,259
and in the photo 12 kernel HDMI I should

01:01:32,499 --> 01:01:41,009
be working as output and I believe

01:01:35,259 --> 01:01:41,009
there's also some work on on video

01:01:41,339 --> 01:01:46,239
encoding I thought but I'm not entirely

01:01:43,630 --> 01:01:48,339
sure so it really it will depend on the

01:01:46,239 --> 01:01:50,169
particular vendor so we're we've been in

01:01:48,339 --> 01:01:51,699
contact with rock trip and there are

01:01:50,169 --> 01:01:54,099
like GStreamer packages and other

01:01:51,699 --> 01:01:56,319
open-source bits available some vendors

01:01:54,099 --> 01:02:00,039
are trying real hard to to be a good

01:01:56,319 --> 01:02:01,989
open source citizen but if you buy the

01:02:00,039 --> 01:02:05,889
box that's not the state that they will

01:02:01,989 --> 01:02:08,349
actually ship at this point and well it

01:02:05,889 --> 01:02:12,069
you're right that it will take time and

01:02:08,349 --> 01:02:14,349
effort we hope on duty to be surprised

01:02:12,069 --> 01:02:16,929
in a positive way because we're actually

01:02:14,349 --> 01:02:19,149
looking for people asking me for quite

01:02:16,929 --> 01:02:21,789
some years what's an open source TV box

01:02:19,149 --> 01:02:24,149
to buy an Isaiah there is none basically

01:02:21,789 --> 01:02:27,729
I mean they're there all those all those

01:02:24,149 --> 01:02:31,599
I'm usually hiking on satellite TV

01:02:27,729 --> 01:02:34,449
set-top boxes and there are different

01:02:31,599 --> 01:02:36,339
different states of closed but they all

01:02:34,449 --> 01:02:39,429
have closed source drivers and they're

01:02:36,339 --> 01:02:42,729
all crap basically so it's it's just a

01:02:39,429 --> 01:02:46,299
selection of crap that you can get so I

01:02:42,729 --> 01:02:48,009
would be I'd like to be positively

01:02:46,299 --> 01:02:49,920
surprised but I won't hold my breath for

01:02:48,009 --> 01:02:52,590
it

01:02:49,920 --> 01:02:55,980
so yet you do have a point there and I

01:02:52,590 --> 01:02:57,990
have to maybe point out that when I'm

01:02:55,980 --> 01:03:00,090
working on some of those TV boxes I'm

01:02:57,990 --> 01:03:02,580
not working on the TV boxes in order to

01:03:00,090 --> 01:03:05,220
get video encoding or TV streaming

01:03:02,580 --> 01:03:07,950
working but rather I'm using that as a

01:03:05,220 --> 01:03:09,780
means to get early access to some of the

01:03:07,950 --> 01:03:12,780
chips as long as no development boards

01:03:09,780 --> 01:03:14,940
are available so yes my use case is

01:03:12,780 --> 01:03:19,670
naturally getting to to that full fledge

01:03:14,940 --> 01:03:22,230
system but I found that if you actually

01:03:19,670 --> 01:03:26,010
document and make initial patches

01:03:22,230 --> 01:03:28,620
available so that people can have a semi

01:03:26,010 --> 01:03:30,720
working system then more people are

01:03:28,620 --> 01:03:33,150
likely to contribute to that port then

01:03:30,720 --> 01:03:34,410
if you're just sitting for box where

01:03:33,150 --> 01:03:37,140
you're not getting where you're having a

01:03:34,410 --> 01:03:39,030
black screen on HDMI and you're not

01:03:37,140 --> 01:03:41,850
getting anything sensible coming out of

01:03:39,030 --> 01:03:43,500
the serial system so it depends on how

01:03:41,850 --> 01:03:46,290
large the community is and obviously

01:03:43,500 --> 01:03:49,020
there's a much larger Sanchi community

01:03:46,290 --> 01:03:52,320
then for for some of those others more

01:03:49,020 --> 01:03:55,170
odd vendors that I've mentioned here and

01:03:52,320 --> 01:03:57,960
well yes it depends on individuals to

01:03:55,170 --> 01:04:01,380
contribute drivers to to make things

01:03:57,960 --> 01:04:04,500
work and it's questionable whether we

01:04:01,380 --> 01:04:06,330
will ever get to 100% so one thing that

01:04:04,500 --> 01:04:08,930
I emitted from this talk simply because

01:04:06,330 --> 01:04:13,350
there's been no real progress is Molly

01:04:08,930 --> 01:04:16,530
so there's often confusion in that if

01:04:13,350 --> 01:04:18,930
you actually want to have graphic output

01:04:16,530 --> 01:04:20,490
on a board via HDMI connector or

01:04:18,930 --> 01:04:22,350
whatever the board offers you don't need

01:04:20,490 --> 01:04:25,260
to have Molly drivers Molly drivers are

01:04:22,350 --> 01:04:27,030
only for 3d acceleration and they're not

01:04:25,260 --> 01:04:30,080
currently mainline available there are

01:04:27,030 --> 01:04:35,810
GPL drivers available and I even have

01:04:30,080 --> 01:04:38,280
some of them packaged in concert Molly

01:04:35,810 --> 01:04:41,550
however they keep breaking whenever the

01:04:38,280 --> 01:04:43,890
colonel gets updated and it will require

01:04:41,550 --> 01:04:46,470
a lot of documentation and tinkering how

01:04:43,890 --> 01:04:50,280
to find out which version of the driver

01:04:46,470 --> 01:04:52,890
to combine with which device tree

01:04:50,280 --> 01:04:55,620
overlay and which binary user space

01:04:52,890 --> 01:04:59,690
download from whatever external source

01:04:55,620 --> 01:04:59,690
in order to possibly make that work

01:05:01,670 --> 01:05:06,380
have you looked into the Hylian project

01:05:04,310 --> 01:05:10,520
because while you repeat the name please

01:05:06,380 --> 01:05:13,430
Liam how do you okay

01:05:10,520 --> 01:05:14,270
hi Liam project honey is a like - you

01:05:13,430 --> 01:05:19,070
like what we eat

01:05:14,270 --> 01:05:25,160
ha Liam like in honeycomb yay hey Liam H

01:05:19,070 --> 01:05:28,040
a ll I um so the project that plasma

01:05:25,160 --> 01:05:32,000
phone and UV ports people started so

01:05:28,040 --> 01:05:35,180
that these devices well these platforms

01:05:32,000 --> 01:05:37,370
can run on different devices okay well

01:05:35,180 --> 01:05:38,630
maybe you can take a look at it it could

01:05:37,370 --> 01:05:41,030
make your life easy

01:05:38,630 --> 01:05:42,770
somehow somewhat and being friends with

01:05:41,030 --> 01:05:45,740
them useful for you maybe

01:05:42,770 --> 01:05:50,780
I mean which way could you could you

01:05:45,740 --> 01:05:52,790
describe that okay well I'm not peeking

01:05:50,780 --> 01:05:55,730
for the project right but the idea is

01:05:52,790 --> 01:06:01,900
that you you know the drivers for

01:05:55,730 --> 01:06:05,360
example and so when you try to port a

01:06:01,900 --> 01:06:07,580
Linux system into a mostly phone devices

01:06:05,360 --> 01:06:10,160
and tablet you have the problem that you

01:06:07,580 --> 01:06:12,500
get the driver for for Android but you

01:06:10,160 --> 01:06:14,210
don't get for anything else and while

01:06:12,500 --> 01:06:18,080
you've been mostly talking about how

01:06:14,210 --> 01:06:19,790
getting output from HDMI is success well

01:06:18,080 --> 01:06:22,660
in practice it's not really success

01:06:19,790 --> 01:06:25,460
unless you just want to show like a

01:06:22,660 --> 01:06:27,770
static thing right as long as you want

01:06:25,460 --> 01:06:30,460
to have humans interacting with it and a

01:06:27,770 --> 01:06:35,170
touchscreen you want to have accelerated

01:06:30,460 --> 01:06:40,490
graphics so what well

01:06:35,170 --> 01:06:44,630
Yola started doing was using hundred ml

01:06:40,490 --> 01:06:47,750
graphics drivers so basically you're

01:06:44,630 --> 01:06:51,830
saying that there is the software

01:06:47,750 --> 01:06:54,500
project is making Linux compatible user

01:06:51,830 --> 01:06:56,810
space parts available to use an Android

01:06:54,500 --> 01:06:59,000
kernel with an open to the file system

01:06:56,810 --> 01:07:01,910
plus those additions essentially so the

01:06:59,000 --> 01:07:03,860
thing is that leap hybrids for example

01:07:01,910 --> 01:07:05,930
was there for for a while but it was

01:07:03,860 --> 01:07:07,910
only available for some devices what

01:07:05,930 --> 01:07:10,100
they're trying to do is to kind of get a

01:07:07,910 --> 01:07:13,070
pool of devices mostly phones and

01:07:10,100 --> 01:07:16,910
tablets that are supported like if I

01:07:13,070 --> 01:07:19,250
told you today port plasma phone to my

01:07:16,910 --> 01:07:21,770
device you would tell me what I don't

01:07:19,250 --> 01:07:23,720
bring over to start form right and well

01:07:21,770 --> 01:07:27,440
there's going to be this kind of project

01:07:23,720 --> 01:07:31,040
that will have Halim configurations and

01:07:27,440 --> 01:07:34,310
kernel configurations so that what you

01:07:31,040 --> 01:07:36,800
can get device to boot and this kind of

01:07:34,310 --> 01:07:40,160
stuff well in a ways if you think it's

01:07:36,800 --> 01:07:41,150
interesting tell me later and I will get

01:07:40,160 --> 01:07:42,850
you in touch with the people who

01:07:41,150 --> 01:07:46,550
actually know about the project and

01:07:42,850 --> 01:07:48,020
maybe you can be friends thank you for

01:07:46,550 --> 01:07:49,430
bringing it up and assume it may be

01:07:48,020 --> 01:07:52,310
interesting to some people in the

01:07:49,430 --> 01:07:54,050
audience or viewing the the recording to

01:07:52,310 --> 01:07:55,760
me personally obviously the goal is to

01:07:54,050 --> 01:07:57,680
have openSUSE working and that in the

01:07:55,760 --> 01:07:59,600
end requires to have at some point the

01:07:57,680 --> 01:08:01,190
opens with a kernel working where I

01:07:59,600 --> 01:08:14,390
understand that would then not no longer

01:08:01,190 --> 01:08:17,120
be necessary right for the questions so

01:08:14,390 --> 01:08:21,530
you've highlighted a vast range of

01:08:17,120 --> 01:08:22,250
hardware etc and a lot of it doesn't

01:08:21,530 --> 01:08:24,440
appear to have

01:08:22,250 --> 01:08:31,690
upstream support whether it be in the

01:08:24,440 --> 01:08:36,859
kernel or you boo do you feel the arm

01:08:31,690 --> 01:08:40,720
vendors are getting better up streaming

01:08:36,859 --> 01:08:44,500
or is the situation still the same where

01:08:40,720 --> 01:08:47,710
the up streaming of platforms are still

01:08:44,500 --> 01:08:47,710
really bad

01:08:50,200 --> 01:09:00,740
and be honest I'm trying to think about

01:08:58,580 --> 01:09:02,120
the numbers in my head right now but if

01:09:00,740 --> 01:09:05,740
you if you go through my slides

01:09:02,120 --> 01:09:08,480
afterwards I think you will find quite a

01:09:05,740 --> 01:09:11,359
disappointingly high number of new

01:09:08,480 --> 01:09:14,630
boards where vendors are still sticking

01:09:11,359 --> 01:09:16,730
to the like old fire-and-forget BSP

01:09:14,630 --> 01:09:20,600
model where they do you know like you a

01:09:16,730 --> 01:09:24,230
PM you would port once based on whatever

01:09:20,600 --> 01:09:25,670
old version is what indicate in the end

01:09:24,230 --> 01:09:27,109
I think it's like a trickle-down model

01:09:25,670 --> 01:09:30,799
that is still being used in many cases

01:09:27,109 --> 01:09:33,350
so like a particular chip vendor makes a

01:09:30,799 --> 01:09:35,450
huge port he passes that on to the board

01:09:33,350 --> 01:09:37,880
manufacturer they maybe do a few were

01:09:35,450 --> 01:09:39,680
two or three changes but no major rebase

01:09:37,880 --> 01:09:41,390
is something like that and that then

01:09:39,680 --> 01:09:50,330
gets shipped and then it doesn't see any

01:09:41,390 --> 01:09:52,870
updates I have seen for example well NXP

01:09:50,330 --> 01:09:55,670
for a very long time has been active in

01:09:52,870 --> 01:09:59,330
both the huge community and the kernel

01:09:55,670 --> 01:10:01,340
community Marvel is also very active in

01:09:59,330 --> 01:10:04,340
those spaces well at least Marvel

01:10:01,340 --> 01:10:06,440
embedded business unit and there is a

01:10:04,340 --> 01:10:08,390
number of other vendors that are also

01:10:06,440 --> 01:10:10,040
doing great code in particular on the

01:10:08,390 --> 01:10:12,080
kernel obviously there are some

01:10:10,040 --> 01:10:13,700
commercial like server vendors that

01:10:12,080 --> 01:10:15,590
don't need to do any Jew woodwork

01:10:13,700 --> 01:10:17,810
because they're using like a my

01:10:15,590 --> 01:10:24,140
commercial firmware and that that simply

01:10:17,810 --> 01:10:27,250
works but I still feel that despite a

01:10:24,140 --> 01:10:30,230
lot of talks on this topic and lobbying

01:10:27,250 --> 01:10:32,840
not all companies in particular when

01:10:30,230 --> 01:10:35,630
they are like new to Linux and only

01:10:32,840 --> 01:10:38,750
doing Android or haven't really learned

01:10:35,630 --> 01:10:41,360
the lesson yet and if you see any ways

01:10:38,750 --> 01:10:43,460
how arlen arrow or any other

01:10:41,360 --> 01:10:47,900
organization maybe the linux foundation

01:10:43,460 --> 01:10:50,900
or a free software whatever can can help

01:10:47,900 --> 01:10:53,980
with that that that would be absolutely

01:10:50,900 --> 01:10:57,590
awesome on the other hand I have seen

01:10:53,980 --> 01:11:00,300
individual companies getting more

01:10:57,590 --> 01:11:03,179
involved with with open source or they

01:11:00,300 --> 01:11:07,050
certainly encouraging developments

01:11:03,179 --> 01:11:08,280
within the market like for example walk

01:11:07,050 --> 01:11:14,309
trip is getting more and more active

01:11:08,280 --> 01:11:17,219
with their new 64-bit models or in other

01:11:14,309 --> 01:11:19,770
cases you know can companies are simply

01:11:17,219 --> 01:11:22,590
seeing in need either being driven by an

01:11:19,770 --> 01:11:25,349
enterprise distributions or for whatever

01:11:22,590 --> 01:11:27,119
reasons to and contract other people to

01:11:25,349 --> 01:11:29,940
do that up streaming work for them and

01:11:27,119 --> 01:11:32,190
still doing like to some degree parallel

01:11:29,940 --> 01:11:33,690
initial in-house development that will

01:11:32,190 --> 01:11:36,300
never go upstream and then have

01:11:33,690 --> 01:11:38,520
something that will go upstream but

01:11:36,300 --> 01:11:42,090
there's in the end they're still both

01:11:38,520 --> 01:11:46,070
parts of it so things that are have been

01:11:42,090 --> 01:11:46,070
improving and things that are so bad

01:11:50,869 --> 01:12:01,110
hello and have you heard of the geek box

01:11:54,469 --> 01:12:05,969
it's a setup box with an archive 30 you

01:12:01,110 --> 01:12:07,710
have yes oh okay so um I worked on the

01:12:05,969 --> 01:12:09,480
you would port for that one there at

01:12:07,710 --> 01:12:12,000
this point in time unfortunately there

01:12:09,480 --> 01:12:13,920
is only serial output working there's a

01:12:12,000 --> 01:12:18,239
bit more drivers contributed by rock

01:12:13,920 --> 01:12:20,099
trip by now but last last time I tested

01:12:18,239 --> 01:12:22,440
it before the conference it was not yet

01:12:20,099 --> 01:12:25,489
ready to really boot openSUSE but what I

01:12:22,440 --> 01:12:28,500
have done on there is I flashed in

01:12:25,489 --> 01:12:30,630
Android style themself build kernel

01:12:28,500 --> 01:12:33,030
image using the upstream kernel onto the

01:12:30,630 --> 01:12:35,670
the boot partition and used that with an

01:12:33,030 --> 01:12:37,889
opens with a root of s filesystem so

01:12:35,670 --> 01:12:39,960
it's possible to to run openSUSE on

01:12:37,889 --> 01:12:43,619
there if you are willing to get your

01:12:39,960 --> 01:12:46,469
hands dirty okay so and the next thing

01:12:43,619 --> 01:12:50,849
is I've got a remix mini if you want you

01:12:46,469 --> 01:12:57,270
can take a look at it later on so thank

01:12:50,849 --> 01:12:58,980
you very much any further questions then

01:12:57,270 --> 01:13:00,989
thank you very much for your attention I

01:12:58,980 --> 01:13:03,389
hope that there was something for for

01:13:00,989 --> 01:13:04,800
your hardware in this talk if not come

01:13:03,389 --> 01:13:07,290
and talk to us about whether it's

01:13:04,800 --> 01:13:10,999
possible to get it supported or how

01:13:07,290 --> 01:13:13,369
likely something is to to get done and

01:13:10,999 --> 01:13:16,610
there is the openSUSE - our mailing list

01:13:13,369 --> 01:13:19,369
to ask questions or follow things that

01:13:16,610 --> 01:13:21,530
are following that happening I admit

01:13:19,369 --> 01:13:23,420
that I don't usually spam people there

01:13:21,530 --> 01:13:27,440
with all the stuff that I'm doing but

01:13:23,420 --> 01:13:30,170
you can see the category armed devices

01:13:27,440 --> 01:13:33,079
on the zoo and the opens with a wiki

01:13:30,170 --> 01:13:35,329
where most boards that have been enabled

01:13:33,079 --> 01:13:37,070
have at least some stop page that you

01:13:35,329 --> 01:13:39,920
can see someone has already been looking

01:13:37,070 --> 01:13:42,050
into it if not if you have some device

01:13:39,920 --> 01:13:45,139
and it's working please document it in

01:13:42,050 --> 01:13:46,909
the wiki and yeah contributions are

01:13:45,139 --> 01:13:49,460
always very welcome this is not a

01:13:46,909 --> 01:13:51,920
one-man show so thank you for your

01:13:49,460 --> 01:13:54,679
support in doing this also in providing

01:13:51,920 --> 01:13:58,070
test feedback as new kernels get updated

01:13:54,679 --> 01:13:59,370
or new images come out and thank you

01:13:58,070 --> 01:14:06,170
again

01:13:59,370 --> 01:14:08,230
[Applause]

01:14:06,170 --> 01:14:08,230

YouTube URL: https://www.youtube.com/watch?v=qC5y5xg9Eu0


