Title: openSUSE Conference 2017 Continuous Integration using Travis and Docker
Publication date: 2017-05-28
Playlist: openSUSE Conference 2017
Description: 
	https://media.ccc.de/v/1354-continuous-integration-using-travis-and-docker

There is no excuse for NOT using continuous integration

Do you work on an open source project? Is your source code hosted at GitHub? Do you use continuous integration or continuous deployment? Why NOT?

This short talk will be about some tricks we use in the YaST team for continuous integration. Because we need a specific environment we use the Docker containers for building and testing at Travis. This approach also decreased out maintenance effort and made the builds more reliable.

Hopefully this talk encourages you to use continuous integration also for your projects.

(Some more details can be already found in my blog https://blog.ladslezak.cz/2017/03/28/docker_at_travis/ )



Ladislav SlezÃ¡k
Captions: 
	00:00:09,059 --> 00:00:12,180
my

00:00:09,600 --> 00:00:15,930
is what is losses are a member of the

00:00:12,180 --> 00:00:19,710
esteem in Brock and in this short all I

00:00:15,930 --> 00:00:22,619
will tell you about dr. H surveys how we

00:00:19,710 --> 00:00:26,460
use it and the goal of this presentation

00:00:22,619 --> 00:00:28,770
is to show you that running continues in

00:00:26,460 --> 00:00:32,070
integration is not something difficult

00:00:28,770 --> 00:00:35,610
you can use it even for small projects

00:00:32,070 --> 00:00:42,180
and I will show you some some tricks we

00:00:35,610 --> 00:00:46,230
use in any us so the first question is

00:00:42,180 --> 00:00:52,229
supply service the obvious reason is

00:00:46,230 --> 00:00:55,050
because it's a hosted project it's it's

00:00:52,229 --> 00:00:58,409
free for open source project and it's

00:00:55,050 --> 00:01:01,620
nicely integrated with github that means

00:00:58,409 --> 00:01:04,799
if your project is hosted at github you

00:01:01,620 --> 00:01:12,450
can quite easily make running your test

00:01:04,799 --> 00:01:16,890
as Travis just some examples this is the

00:01:12,450 --> 00:01:22,170
just repository at github and as you can

00:01:16,890 --> 00:01:24,840
see the visible part is this this green

00:01:22,170 --> 00:01:28,829
icon which means that Travis Bell is

00:01:24,840 --> 00:01:36,299
passing if you click that icon you will

00:01:28,829 --> 00:01:38,869
see details and and and and you can see

00:01:36,299 --> 00:01:42,299
the full log that means what was

00:01:38,869 --> 00:01:46,979
executed on under the runner which test

00:01:42,299 --> 00:01:51,780
were failing or not and at the end you

00:01:46,979 --> 00:01:54,649
will see success so that's one point and

00:01:51,780 --> 00:01:58,979
the other point of github integration is

00:01:54,649 --> 00:02:02,189
for example showing the get the status

00:01:58,979 --> 00:02:04,829
for each commit you have in your

00:02:02,189 --> 00:02:07,740
repository so if you look at the

00:02:04,829 --> 00:02:10,619
branches there are you will see for each

00:02:07,740 --> 00:02:13,530
branch assign with if it's a green

00:02:10,619 --> 00:02:17,100
checkmark that Bell was ok and passed if

00:02:13,530 --> 00:02:19,170
there's red girls that means that the

00:02:17,100 --> 00:02:21,380
bill failed and there is some issue is

00:02:19,170 --> 00:02:21,380
that

00:02:21,660 --> 00:02:27,150
and of course the same tags are used in

00:02:24,450 --> 00:02:30,240
poor request so whenever somebody opens

00:02:27,150 --> 00:02:32,070
up requests and with some change you can

00:02:30,240 --> 00:02:35,400
immediately see whether this change

00:02:32,070 --> 00:02:38,790
passes the continuous integration or not

00:02:35,400 --> 00:02:41,940
so we can see for every comment here the

00:02:38,790 --> 00:02:45,360
status like the first one what's not so

00:02:41,940 --> 00:02:48,360
great so it failed but then it it it was

00:02:45,360 --> 00:02:51,290
fixed so right now we know that all

00:02:48,360 --> 00:02:54,930
checks have passed and we can we can

00:02:51,290 --> 00:02:57,360
match the code in into the master and we

00:02:54,930 --> 00:03:00,060
know that they will it won't buy

00:02:57,360 --> 00:03:09,890
anything it will still work the package

00:03:00,060 --> 00:03:13,730
will be struggling so let's talk about

00:03:09,890 --> 00:03:17,670
some details of the service built

00:03:13,730 --> 00:03:21,450
internally it builds the workers are

00:03:17,670 --> 00:03:25,890
running in Ubuntu virtual machines ADP

00:03:21,450 --> 00:03:27,390
size or costly but o ball of both of

00:03:25,890 --> 00:03:31,140
them are pretty old

00:03:27,390 --> 00:03:32,820
the precise actually discontinued and

00:03:31,140 --> 00:03:36,420
not support it anymore

00:03:32,820 --> 00:03:40,590
so the question is what if you need a

00:03:36,420 --> 00:03:42,510
newer compiler your libraries and what

00:03:40,590 --> 00:03:44,940
if you need completely different

00:03:42,510 --> 00:03:48,810
distribution because your software is

00:03:44,940 --> 00:03:52,459
not meant to be run on Ubuntu and

00:03:48,810 --> 00:03:55,290
another issue is that you can easily

00:03:52,459 --> 00:03:59,100
debug the build because for example if

00:03:55,290 --> 00:04:02,250
if the build fails what do you need

00:03:59,100 --> 00:04:05,790
somehow check what was wrong and it

00:04:02,250 --> 00:04:08,459
would be nice to somehow see ATF

00:04:05,790 --> 00:04:11,040
remotely so you could for example SSH or

00:04:08,459 --> 00:04:19,230
you could reproduce the issue locally

00:04:11,040 --> 00:04:19,980
but both are not possible service so why

00:04:19,230 --> 00:04:23,430
recur

00:04:19,980 --> 00:04:26,430
the doctor is the oval solution which

00:04:23,430 --> 00:04:32,880
should help you with the problems I just

00:04:26,430 --> 00:04:35,790
mentioned and it's supported out of box

00:04:32,880 --> 00:04:38,460
at a vase that means you don't need to

00:04:35,790 --> 00:04:40,980
install it configure it and anything

00:04:38,460 --> 00:04:44,340
like that it's just a little ready you

00:04:40,980 --> 00:04:48,270
just issue the deco commands and it

00:04:44,340 --> 00:04:51,660
works and another interesting or

00:04:48,270 --> 00:04:54,120
important feature which which is nice

00:04:51,660 --> 00:04:56,760
that it's container based and it's

00:04:54,120 --> 00:04:59,840
really likely that means there's no no

00:04:56,760 --> 00:05:02,850
big overhead because as I said the the

00:04:59,840 --> 00:05:05,910
various machines already runs in a

00:05:02,850 --> 00:05:09,480
virtual machine so having one layer one

00:05:05,910 --> 00:05:12,180
a one more each lacing would slowed it

00:05:09,480 --> 00:05:17,600
down and that would not work nicely so

00:05:12,180 --> 00:05:20,820
that's that's a advantage of the curve

00:05:17,600 --> 00:05:24,210
another advantage is that many base

00:05:20,820 --> 00:05:26,550
system images are available so if you

00:05:24,210 --> 00:05:31,950
don't like Ubuntu you can easily

00:05:26,550 --> 00:05:34,980
download Fedora Debbie on whatever so

00:05:31,950 --> 00:05:37,260
you can easily you can even easily build

00:05:34,980 --> 00:05:40,290
peel or your own images and over half

00:05:37,260 --> 00:05:43,400
and use them for belt so that means you

00:05:40,290 --> 00:05:49,070
can enhance the base images and yeah

00:05:43,400 --> 00:05:49,070
let's make the belt much easier I

00:05:49,970 --> 00:05:58,860
prepared two examples and first is

00:05:53,910 --> 00:06:01,430
snapper it was already mentioned in in

00:05:58,860 --> 00:06:04,530
several tools here I will just tell that

00:06:01,430 --> 00:06:08,190
it's a tool for managing file system

00:06:04,530 --> 00:06:11,400
snapshots in very in C++ band it's meant

00:06:08,190 --> 00:06:15,120
to be portable so it's it's should work

00:06:11,400 --> 00:06:18,330
in many distributions and the package we

00:06:15,120 --> 00:06:21,900
built in OBS is actually targeted for

00:06:18,330 --> 00:06:26,529
the be on Ubuntu and so on so this is

00:06:21,900 --> 00:06:29,619
the main feature and

00:06:26,529 --> 00:06:32,439
regarding to the source code it's in a

00:06:29,619 --> 00:06:44,679
single git repository and the code is

00:06:32,439 --> 00:06:49,839
not change much much often so this is

00:06:44,679 --> 00:07:00,789
the sniper repository and again we have

00:06:49,839 --> 00:07:04,209
this nice service patch so um the setup

00:07:00,789 --> 00:07:07,719
is that every built around in several

00:07:04,209 --> 00:07:10,839
docker or virtual images but we're under

00:07:07,719 --> 00:07:14,799
curse so in the end we we can run each

00:07:10,839 --> 00:07:18,279
build in a different target system so we

00:07:14,799 --> 00:07:22,469
currently built like four five different

00:07:18,279 --> 00:07:27,159
distributions that means every commit or

00:07:22,469 --> 00:07:30,610
request open to sniper will be built

00:07:27,159 --> 00:07:34,899
against an elite leap Fedora you want to

00:07:30,610 --> 00:07:38,229
end the beyond and we know before

00:07:34,899 --> 00:07:40,389
merging this per request that all these

00:07:38,229 --> 00:07:45,119
distributions that the package for all

00:07:40,389 --> 00:07:48,509
these distribution will still work so

00:07:45,119 --> 00:07:48,509
how it's done

00:07:49,539 --> 00:07:56,079
we have separate a token files for each

00:07:52,179 --> 00:07:59,739
target distribution and specific script

00:07:56,079 --> 00:08:03,179
for that and yeah the docker images are

00:07:59,739 --> 00:08:07,359
built at Travis in Empire we define a

00:08:03,179 --> 00:08:10,779
delta matrix and this bail matrix allows

00:08:07,359 --> 00:08:14,289
running each each build in a separate

00:08:10,779 --> 00:08:21,959
virtual machine which a different docker

00:08:14,289 --> 00:08:21,959
image so

00:08:22,840 --> 00:08:29,370
we have it this

00:08:24,670 --> 00:08:32,370
main service CMO file which defines the

00:08:29,370 --> 00:08:32,370
distributions

00:08:43,050 --> 00:08:45,169
and

00:09:04,910 --> 00:09:22,700
files for each each each belt so you

00:09:08,360 --> 00:09:23,570
define you use these docker files like

00:09:22,700 --> 00:09:27,770
this one

00:09:23,570 --> 00:09:30,970
unbeliev we basically based on the on

00:09:27,770 --> 00:09:33,830
the publicly available W image and

00:09:30,970 --> 00:09:44,000
additionally around zipper and install

00:09:33,830 --> 00:09:46,360
the packages we need then the the the

00:09:44,000 --> 00:09:49,160
main work is done by this tree basically

00:09:46,360 --> 00:09:54,110
again for each target distribution we

00:09:49,160 --> 00:10:00,320
have a separate one so for example for

00:09:54,110 --> 00:10:04,490
tumbleweed we run some we build a

00:10:00,320 --> 00:10:07,970
package at the end we install it and run

00:10:04,490 --> 00:10:10,370
even on the supper sniper - - version

00:10:07,970 --> 00:10:20,600
that means we verified it the install

00:10:10,370 --> 00:10:22,759
package still works so in this case the

00:10:20,600 --> 00:10:25,220
images are directed built at surveys

00:10:22,759 --> 00:10:28,220
that means we it's easier for us to

00:10:25,220 --> 00:10:30,920
maintain but it takes some more time but

00:10:28,220 --> 00:10:35,680
because the sniper is not not change

00:10:30,920 --> 00:10:35,680
much time much often it doesn't matter

00:10:36,310 --> 00:10:42,649
the the second example is yes where it

00:10:40,009 --> 00:10:47,240
which is much more complicated because

00:10:42,649 --> 00:10:49,970
it's not portable it it's targeted just

00:10:47,240 --> 00:10:52,970
for openSUSE as you say distributions

00:10:49,970 --> 00:10:55,550
and has modular design it means

00:10:52,970 --> 00:10:58,100
currently we have over 100 git

00:10:55,550 --> 00:11:00,589
repositories we have bigger development

00:10:58,100 --> 00:11:03,649
team and there are more frequent changes

00:11:00,589 --> 00:11:05,990
that means we need to somehow cope with

00:11:03,649 --> 00:11:08,630
the fact that the builds are much of

00:11:05,990 --> 00:11:14,990
them started and we need to somehow make

00:11:08,630 --> 00:11:18,199
sure that they are faster so to make it

00:11:14,990 --> 00:11:22,430
faster we we pre build to the docker

00:11:18,199 --> 00:11:26,240
images at docker hub so we have special

00:11:22,430 --> 00:11:28,639
special image design for Ruby we have

00:11:26,240 --> 00:11:31,639
second image which is designed for C++

00:11:28,639 --> 00:11:34,339
because mainly we have groups of yes

00:11:31,639 --> 00:11:36,740
packages either they are written in Ruby

00:11:34,339 --> 00:11:40,130
or some of them are written in C++ and

00:11:36,740 --> 00:11:43,009
to have separate set of packages for

00:11:40,130 --> 00:11:53,410
each group we have be a separate docker

00:11:43,009 --> 00:11:57,040
image and

00:11:53,410 --> 00:12:00,730
this this docker image image contains a

00:11:57,040 --> 00:12:03,730
common script which is used in all

00:12:00,730 --> 00:12:07,300
modules that means and it's Travis we

00:12:03,730 --> 00:12:10,000
usually just go just one single scrip

00:12:07,300 --> 00:12:13,509
which handles our modules that means the

00:12:10,000 --> 00:12:16,449
the scrip has to be a bit flexible like

00:12:13,509 --> 00:12:18,810
a note all modules support robocop so we

00:12:16,449 --> 00:12:21,850
need to check whether the model you see

00:12:18,810 --> 00:12:24,550
whether the new module uses make files

00:12:21,850 --> 00:12:27,459
or newer break file so some legacy

00:12:24,550 --> 00:12:31,779
modules are not converted to a quiet so

00:12:27,459 --> 00:12:35,379
we have to be more flexible here then we

00:12:31,779 --> 00:12:42,670
learn the test and so on so again a bell

00:12:35,379 --> 00:12:45,399
package and try installing it and to

00:12:42,670 --> 00:12:47,319
ensure that the docker image is always

00:12:45,399 --> 00:12:50,199
fresh because we build against factory

00:12:47,319 --> 00:12:54,279
we need to ensure that the factory

00:12:50,199 --> 00:12:56,529
changes are in the docker image and the

00:12:54,279 --> 00:13:00,610
docker image contains the yes packages

00:12:56,529 --> 00:13:04,689
we have a simple simple junk interrupts

00:13:00,610 --> 00:13:09,069
which just figures rebuild over the over

00:13:04,689 --> 00:13:13,389
the image at the docker hub so every

00:13:09,069 --> 00:13:15,699
like two hours we tell docker hub to

00:13:13,389 --> 00:13:17,829
rebuild the image so we have fresh

00:13:15,699 --> 00:13:25,660
packages and we are sure that we are

00:13:17,829 --> 00:13:26,810
running against the latest versions so

00:13:25,660 --> 00:13:28,940
the

00:13:26,810 --> 00:13:31,670
the original set doubles we build you

00:13:28,940 --> 00:13:35,090
won't do packages but that didn't work

00:13:31,670 --> 00:13:38,420
well because well it was it was ecstatic

00:13:35,090 --> 00:13:41,150
it was hard to maintain and it was not

00:13:38,420 --> 00:13:45,500
much reliable because the Ubuntu system

00:13:41,150 --> 00:13:48,380
is some some some different system

00:13:45,500 --> 00:13:50,510
defaults or sometimes we forget a new

00:13:48,380 --> 00:13:54,830
file into that you want two packages

00:13:50,510 --> 00:13:57,290
so either we got false positives or we

00:13:54,830 --> 00:13:59,900
missed some some some box because for

00:13:57,290 --> 00:14:02,930
example we could not build RPM packages

00:13:59,900 --> 00:14:05,390
in Ubuntu easily so we skip this so if

00:14:02,930 --> 00:14:10,060
there was a bug in the spec file this

00:14:05,390 --> 00:14:10,060
ultimate super pill could not found it

00:14:10,540 --> 00:14:17,960
with the new setup we as I said we built

00:14:14,240 --> 00:14:21,200
two docker images and the Travis could

00:14:17,960 --> 00:14:23,500
be shared so it's it's much easier for

00:14:21,200 --> 00:14:27,260
maintenance we don't need to care about

00:14:23,500 --> 00:14:30,050
about the Ubuntu there we just run the

00:14:27,260 --> 00:14:36,530
tumbleweed docker image image and yeah

00:14:30,050 --> 00:14:39,260
that's it so the summary is that now we

00:14:36,530 --> 00:14:41,570
had more reliable builds because we are

00:14:39,260 --> 00:14:45,339
building really in in in tumbleweed not

00:14:41,570 --> 00:14:48,290
not you know Ubuntu or something else

00:14:45,339 --> 00:14:50,570
it's much easier for to debug rings

00:14:48,290 --> 00:14:52,670
because you can download the docker

00:14:50,570 --> 00:14:55,460
image locally you can run the same

00:14:52,670 --> 00:14:57,920
commands which are in the indeed occur

00:14:55,460 --> 00:15:00,560
image at service and you can see what's

00:14:57,920 --> 00:15:03,290
happening there and yeah quite easily

00:15:00,560 --> 00:15:08,089
find out what's what's what's wrong

00:15:03,290 --> 00:15:11,240
and finally we are not dependent on the

00:15:08,089 --> 00:15:15,709
default system at service because for

00:15:11,240 --> 00:15:18,530
example that Ubuntu 12.04 up soon and we

00:15:15,709 --> 00:15:21,380
have to solve something we have to do

00:15:18,530 --> 00:15:25,810
something about it a device out service

00:15:21,380 --> 00:15:29,480
will not work for us so we have to

00:15:25,810 --> 00:15:32,360
switch to something newer and switching

00:15:29,480 --> 00:15:35,060
to new or even to is will not help much

00:15:32,360 --> 00:15:39,170
so we decided to switch output occur

00:15:35,060 --> 00:15:42,190
which is which makes us independent on

00:15:39,170 --> 00:15:42,190
on the device

00:15:42,820 --> 00:16:02,840
so any questions yes how long does it

00:16:00,920 --> 00:16:06,950
usually take when you submit a poor

00:16:02,840 --> 00:16:09,200
request for all the tests to finish it

00:16:06,950 --> 00:16:11,540
depends on very depends on the package

00:16:09,200 --> 00:16:14,960
but usually every package is built like

00:16:11,540 --> 00:16:18,320
in say five minutes because it depends

00:16:14,960 --> 00:16:20,930
how many plates are there how do how big

00:16:18,320 --> 00:16:24,470
the package is it is a simple simple

00:16:20,930 --> 00:16:27,800
just module which is just few files then

00:16:24,470 --> 00:16:29,660
it's a matter of yes right you know snap

00:16:27,800 --> 00:16:32,420
a snapper for example that should go

00:16:29,660 --> 00:16:40,520
quickly right we add it's like in five

00:16:32,420 --> 00:16:42,770
minutes okay thanks yeah as you can see

00:16:40,520 --> 00:16:47,390
usually about five five minutes but

00:16:42,770 --> 00:16:53,080
depends on the worker so here it's

00:16:47,390 --> 00:16:53,080
almost 8:00 but usually is about five

00:16:53,200 --> 00:17:01,520
and as I said this this these belts are

00:16:57,680 --> 00:17:04,940
running barrel so actually the real time

00:17:01,520 --> 00:17:08,600
was much much smaller than the some of

00:17:04,940 --> 00:17:09,290
this time so usually when Travis is not

00:17:08,600 --> 00:17:11,720
loaded

00:17:09,290 --> 00:17:13,820
all these built in parallel so in in

00:17:11,720 --> 00:17:19,790
five minutes you will get the results

00:17:13,820 --> 00:17:28,180
for five distributions okay any more

00:17:19,790 --> 00:17:30,400
questions so I put some

00:17:28,180 --> 00:17:34,150
which build a part of the other slides

00:17:30,400 --> 00:17:37,300
which shall I upload or you can contact

00:17:34,150 --> 00:17:40,800
us at the yes mailing list or IRC

00:17:37,300 --> 00:17:47,080
channel at any note thank you

00:17:40,800 --> 00:17:47,080

YouTube URL: https://www.youtube.com/watch?v=U1hwQJ4F8gM


