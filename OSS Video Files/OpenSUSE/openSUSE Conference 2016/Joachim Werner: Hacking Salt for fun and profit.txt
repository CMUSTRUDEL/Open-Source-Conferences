Title: Joachim Werner: Hacking Salt for fun and profit
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/876-hacking-salt-for-fun-and-profit

After the SUSE Manager team had chosen Salt as the future engine behind SUSE Manager, Joachim "Joe" Werner, the product manager for SUSE Manager, spent some time to learn the project hands-on.

This is a very personal report about that experience, from extending Salt with code to manage WIFI-controlled LED lamps for a demo at the SUSECon conference to first experiments with writing a Salt module for Snapper.

This talk is for you if you don't just want to know about using Salt for configuration management, but are more interested in contributing to it or hacking it for your own needs. Basic Python skills recommended to make sense of the example code. ;-)


Joachim Werner
Captions: 
	00:00:09,830 --> 00:00:16,650
I'm sure some will still be coming from

00:00:14,070 --> 00:00:22,110
lunch but I have a few pretty generic

00:00:16,650 --> 00:00:24,570
slides to start with so let's start with

00:00:22,110 --> 00:00:28,369
the second talk that goes into kind of

00:00:24,570 --> 00:00:35,940
the same direction as Owens but from

00:00:28,369 --> 00:00:41,250
another perspective first of all who am

00:00:35,940 --> 00:00:45,720
i father of four one of them is in the

00:00:41,250 --> 00:00:49,199
room I can't really cold I've done a lot

00:00:45,720 --> 00:00:51,089
of coding in a previous life but it was

00:00:49,199 --> 00:00:53,760
all by accident so I've got a business

00:00:51,089 --> 00:00:56,309
education and I couldn't afford the

00:00:53,760 --> 00:00:58,769
programmer so I did the stuff myself if

00:00:56,309 --> 00:01:01,290
I code then in Python because it's the

00:00:58,769 --> 00:01:04,799
only thing I can do I'm an open source

00:01:01,290 --> 00:01:08,400
for about 20 years if anyone can

00:01:04,799 --> 00:01:11,340
remember zope the the one with the Zent

00:01:08,400 --> 00:01:13,710
not the one with the SOA p yeah I was

00:01:11,340 --> 00:01:15,510
part of that community did a lot of

00:01:13,710 --> 00:01:17,220
great things that some of them are still

00:01:15,510 --> 00:01:19,620
running so we have a content management

00:01:17,220 --> 00:01:23,670
system at the city of car through that

00:01:19,620 --> 00:01:26,340
is 15 years old and a couple of weeks

00:01:23,670 --> 00:01:28,590
ago I father back in their back tracker

00:01:26,340 --> 00:01:30,750
because they had a broken page and they

00:01:28,590 --> 00:01:34,400
gave me the German way of saying it's

00:01:30,750 --> 00:01:38,670
all great they said the admins are not

00:01:34,400 --> 00:01:43,920
entirely unhappy with the solution yeah

00:01:38,670 --> 00:01:47,190
so that's yeah I'm with Susan since five

00:01:43,920 --> 00:01:51,960
to three as a user and around nine dot

00:01:47,190 --> 00:01:54,479
one as I had to look up those numbers as

00:01:51,960 --> 00:01:58,620
an employee so I had joined in 2004

00:01:54,479 --> 00:02:04,560
january 2004 and that's when we were in

00:01:58,620 --> 00:02:07,770
the last phases of releasing 9 dot 1 so

00:02:04,560 --> 00:02:13,019
that was Susan I know but not less less

00:02:07,770 --> 00:02:16,680
9 came in the same year now how did all

00:02:13,019 --> 00:02:18,870
my experience with salt started it was

00:02:16,680 --> 00:02:22,010
one day in the office some of the guys

00:02:18,870 --> 00:02:22,010
that are back in the room

00:02:22,170 --> 00:02:27,750
basically told me yeah for Susan manager

00:02:25,110 --> 00:02:32,190
for our systems management project we

00:02:27,750 --> 00:02:36,450
are going with salt and I was like what

00:02:32,190 --> 00:02:38,880
the why not share find out puppet why

00:02:36,450 --> 00:02:41,760
not see if engine ansible I mean we had

00:02:38,880 --> 00:02:45,690
been talking about all those tools other

00:02:41,760 --> 00:02:49,709
teams were using them um yeah but they

00:02:45,690 --> 00:02:52,290
came up with yet another thing well

00:02:49,709 --> 00:02:56,750
first of all I was pretty skeptical and

00:02:52,290 --> 00:02:59,580
then I realized great it's all in Python

00:02:56,750 --> 00:03:02,670
looked at it and as i said i'm not

00:02:59,580 --> 00:03:04,680
really a colder but to me it felt easy

00:03:02,670 --> 00:03:07,380
so over my summer vacation I basically

00:03:04,680 --> 00:03:09,480
took the 2,500 pages or so off

00:03:07,380 --> 00:03:11,670
documentation with me on the iPad and

00:03:09,480 --> 00:03:15,090
without a computer because I didn't

00:03:11,670 --> 00:03:18,030
bring a computer to Italy to the beach I

00:03:15,090 --> 00:03:19,709
just started reading about stuff about

00:03:18,030 --> 00:03:22,350
all those components and so on and when

00:03:19,709 --> 00:03:24,690
I came home I actually started hacking I

00:03:22,350 --> 00:03:26,670
didn't start using it because I didn't

00:03:24,690 --> 00:03:29,519
have like 10 min or 20 or 100 machines

00:03:26,670 --> 00:03:32,609
to manage but I a new bit of Python and

00:03:29,519 --> 00:03:35,820
I wanted to just heck and this is what

00:03:32,609 --> 00:03:40,440
this talk is about and yeah took this

00:03:35,820 --> 00:03:42,600
one is a movie reference I'm running out

00:03:40,440 --> 00:03:45,870
of Star Wars movie references so I went

00:03:42,600 --> 00:03:47,190
with the Casablanca salt I think this is

00:03:45,870 --> 00:03:49,769
the beginning of a beautiful friendship

00:03:47,190 --> 00:03:53,280
and that's really how my first couple of

00:03:49,769 --> 00:03:55,380
weeks felt yeah there are some parts

00:03:53,280 --> 00:03:58,019
that are hard to grab and actually the

00:03:55,380 --> 00:04:00,359
hardest part for me was getting the Yama

00:03:58,019 --> 00:04:03,150
son talks right because llamo looks easy

00:04:00,359 --> 00:04:05,160
but it has a few pitfalls and you have

00:04:03,150 --> 00:04:06,329
to it's even worse than in Python you

00:04:05,160 --> 00:04:09,359
really have to make sure your

00:04:06,329 --> 00:04:13,739
indentation levels are right but going

00:04:09,359 --> 00:04:15,329
from there it was really fun now yeah

00:04:13,739 --> 00:04:18,690
that's what we're talking about not just

00:04:15,329 --> 00:04:20,310
using it hacking it um solved in a

00:04:18,690 --> 00:04:21,840
nutshell I think you've heard most of

00:04:20,310 --> 00:04:24,530
that in previous talk so i'll keep it

00:04:21,840 --> 00:04:29,110
really short it's all about masters

00:04:24,530 --> 00:04:33,700
minions salt grains salt pillars

00:04:29,110 --> 00:04:36,010
yeah and i shamelessly just grab those

00:04:33,700 --> 00:04:38,590
from the documentation on the soft page

00:04:36,010 --> 00:04:41,580
I should have worked those slides to you

00:04:38,590 --> 00:04:44,020
Tom yeah the sole boss is of course

00:04:41,580 --> 00:04:47,310
where everything starts that's the

00:04:44,020 --> 00:04:50,830
management server the minions are are

00:04:47,310 --> 00:04:54,630
the devices that are managed they have a

00:04:50,830 --> 00:04:58,000
demon running and it's two things

00:04:54,630 --> 00:05:00,010
commands are naturally not not sent to

00:04:58,000 --> 00:05:02,650
the minion but the minion listens to the

00:05:00,010 --> 00:05:03,970
bus and grabs them from there and one of

00:05:02,650 --> 00:05:06,130
the things that I'm not sure everybody

00:05:03,970 --> 00:05:09,250
fully understands is that a lot of the

00:05:06,130 --> 00:05:11,140
filtering even works on the client so

00:05:09,250 --> 00:05:13,600
there's a lot of stuff that's just

00:05:11,140 --> 00:05:16,870
broadcast to everyone and the minion can

00:05:13,600 --> 00:05:19,270
decide ok they mean me this can have a

00:05:16,870 --> 00:05:20,710
few security-related issues so you have

00:05:19,270 --> 00:05:23,140
to be careful what you're actually

00:05:20,710 --> 00:05:25,450
broadcasting but it also makes it seem

00:05:23,140 --> 00:05:27,220
very scalable because you don't have to

00:05:25,450 --> 00:05:29,680
have an engine server site that

00:05:27,220 --> 00:05:32,230
determines for ten thousand machines ok

00:05:29,680 --> 00:05:34,120
I will address this one and I'll open as

00:05:32,230 --> 00:05:36,040
ssh port to that machine and do

00:05:34,120 --> 00:05:38,920
something with it you just broadcast it

00:05:36,040 --> 00:05:41,830
and say ok anyone who's called X who has

00:05:38,920 --> 00:05:44,460
a kernel 2.6 something or 3 point

00:05:41,830 --> 00:05:47,470
something listen this is for you guys

00:05:44,460 --> 00:05:51,540
and then the result same thing they're

00:05:47,470 --> 00:05:53,590
basically broadcast on the eventbus

00:05:51,540 --> 00:05:56,290
execution models you heard about the

00:05:53,590 --> 00:05:59,140
discussion about you know item potency

00:05:56,290 --> 00:06:03,070
or not I think it's two different things

00:05:59,140 --> 00:06:05,260
in yeah some of the modules you can

00:06:03,070 --> 00:06:09,460
write them in a way easily that that

00:06:05,260 --> 00:06:11,620
that makes them have no side effects or

00:06:09,460 --> 00:06:13,720
no bad side effects and a lot of them

00:06:11,620 --> 00:06:15,970
are about curing like I just want to

00:06:13,720 --> 00:06:17,890
know the disk usage I want to list the

00:06:15,970 --> 00:06:21,400
number of users of anything and those

00:06:17,890 --> 00:06:23,980
are safe to use any way for others like

00:06:21,400 --> 00:06:25,900
creating a user it's really that fine

00:06:23,980 --> 00:06:28,780
line do your write code that always

00:06:25,900 --> 00:06:32,800
checks or do you write code in the

00:06:28,780 --> 00:06:35,860
execution model that just tries to

00:06:32,800 --> 00:06:39,190
behave like a function do this now and

00:06:35,860 --> 00:06:41,020
fail if it's been done before and then

00:06:39,190 --> 00:06:42,049
have the state system take care of the

00:06:41,020 --> 00:06:44,999
other lot

00:06:42,049 --> 00:06:48,029
checking whether it's actually making

00:06:44,999 --> 00:06:55,889
sense to to do those I think both have

00:06:48,029 --> 00:06:57,839
their their own specific roles yes state

00:06:55,889 --> 00:07:00,860
modules and formulas that's something

00:06:57,839 --> 00:07:05,489
that I'm still starting starting to

00:07:00,860 --> 00:07:08,039
understand better a state file is really

00:07:05,489 --> 00:07:09,809
just an individual file that describes

00:07:08,039 --> 00:07:12,779
part of your state and then when you

00:07:09,809 --> 00:07:14,099
package it all up it's called formulas

00:07:12,779 --> 00:07:17,009
that's one of the things we are still

00:07:14,099 --> 00:07:19,409
working on how exactly do we prepackaged

00:07:17,009 --> 00:07:21,449
certain things like create formulas for

00:07:19,409 --> 00:07:26,069
OpenStack or create formulas for setting

00:07:21,449 --> 00:07:27,360
up a whole essay p cluster or so and how

00:07:26,069 --> 00:07:29,459
do we distribute them how to be

00:07:27,360 --> 00:07:31,969
parameterize them and what should be in

00:07:29,459 --> 00:07:35,610
this in the cold and what should be

00:07:31,969 --> 00:07:38,579
basically data that you push on top of

00:07:35,610 --> 00:07:40,829
that yeah I think we've heard most of

00:07:38,579 --> 00:07:42,959
that he already execution waters where

00:07:40,829 --> 00:07:45,329
the state models is really different

00:07:42,959 --> 00:07:49,409
kind of syntax in terms of the grammar

00:07:45,329 --> 00:07:55,309
so usually an execution module would

00:07:49,409 --> 00:08:00,809
have works like add delete kill start

00:07:55,309 --> 00:08:03,979
and at the state modules would describe

00:08:00,809 --> 00:08:08,869
a state like its present its absent its

00:08:03,979 --> 00:08:12,899
install route it's uninstalled or um or

00:08:08,869 --> 00:08:17,549
stopped or data dead or whatever now

00:08:12,899 --> 00:08:21,360
another concept that's important insult

00:08:17,549 --> 00:08:24,899
is the grains grains are ya the ideas

00:08:21,360 --> 00:08:27,419
grain of salt are just data about

00:08:24,899 --> 00:08:29,279
systems that are usually generated on

00:08:27,419 --> 00:08:33,149
the system's they've been misused a bit

00:08:29,279 --> 00:08:34,709
for using them as roles so you would

00:08:33,149 --> 00:08:36,389
have a grain that says map server I

00:08:34,709 --> 00:08:39,000
don't really like that concept but it's

00:08:36,389 --> 00:08:42,689
being misused even by some of the

00:08:39,000 --> 00:08:44,039
professional users of salt because I

00:08:42,689 --> 00:08:48,540
guess in the early days there was no

00:08:44,039 --> 00:08:52,050
other way yeah but I see a grain mostly

00:08:48,540 --> 00:08:53,910
as data coming from the system and I

00:08:52,050 --> 00:08:55,769
have a few examples here like the bios

00:08:53,910 --> 00:09:00,009
version the CPU architecture

00:08:55,769 --> 00:09:04,240
the host name Colonel release Colonel

00:09:00,009 --> 00:09:09,100
release number of CPUs full name of the

00:09:04,240 --> 00:09:11,889
u.s. so stuff that you may need to make

00:09:09,100 --> 00:09:15,040
decisions okay is this system really is

00:09:11,889 --> 00:09:17,230
use the system so should I use super

00:09:15,040 --> 00:09:18,720
that's what grains help you with and

00:09:17,230 --> 00:09:25,899
then you can use that in your code

00:09:18,720 --> 00:09:29,529
pillar data is okay pillar data is data

00:09:25,899 --> 00:09:33,189
that goes the other way top down where

00:09:29,529 --> 00:09:35,350
you want to keep things secure a very

00:09:33,189 --> 00:09:39,339
easy example is if your if you set up a

00:09:35,350 --> 00:09:43,149
database you would not want to put the

00:09:39,339 --> 00:09:46,720
username and the password for the

00:09:43,149 --> 00:09:49,019
database user into configuration files

00:09:46,720 --> 00:09:52,540
that are distributed to all the machines

00:09:49,019 --> 00:09:57,129
so you would set up a pillar that keeps

00:09:52,540 --> 00:10:00,399
those secured and only exposes them at

00:09:57,129 --> 00:10:05,259
runtime to that system that you want to

00:10:00,399 --> 00:10:07,059
expose them to ya then then finally

00:10:05,259 --> 00:10:08,920
there's the concept of at the top file

00:10:07,059 --> 00:10:14,589
is basically the master configuration

00:10:08,920 --> 00:10:16,629
think of it like the index HTML in on a

00:10:14,589 --> 00:10:18,910
web server that's when you go into that

00:10:16,629 --> 00:10:22,329
directory you want to know okay where

00:10:18,910 --> 00:10:25,230
should I go from here that's where you

00:10:22,329 --> 00:10:29,019
have this top file that would always be

00:10:25,230 --> 00:10:31,149
looked at as the default entry point and

00:10:29,019 --> 00:10:34,899
that describes how things are connected

00:10:31,149 --> 00:10:37,269
and you've seen before I think that

00:10:34,899 --> 00:10:41,110
wasn't mentioned really often whenever

00:10:37,269 --> 00:10:44,230
you see those double curly brackets

00:10:41,110 --> 00:10:47,980
that's been a very nice concept in salt

00:10:44,230 --> 00:10:50,920
cakes in the rendering those files is

00:10:47,980 --> 00:10:52,959
not done in a single step but it you can

00:10:50,920 --> 00:10:57,189
have several renderers one after the

00:10:52,959 --> 00:10:59,860
other and that's how salt really nicely

00:10:57,189 --> 00:11:02,649
separates problems so if you have the

00:10:59,860 --> 00:11:05,500
problem of writing configuration in a

00:11:02,649 --> 00:11:07,420
simple format they use llamo now if you

00:11:05,500 --> 00:11:09,110
need loops let's say you want to also

00:11:07,420 --> 00:11:11,329
create a list of servers

00:11:09,110 --> 00:11:15,019
based on some data from your load

00:11:11,329 --> 00:11:16,910
balance or whatever those looping yeah

00:11:15,019 --> 00:11:21,140
you could do it like others do it okay

00:11:16,910 --> 00:11:23,690
extend your dsl and introduce loops or

00:11:21,140 --> 00:11:26,779
introduce if then else or case or

00:11:23,690 --> 00:11:29,300
whatever no there's an existing

00:11:26,779 --> 00:11:32,480
framework for that john go to that's

00:11:29,300 --> 00:11:34,370
very established in the jungle ginger

00:11:32,480 --> 00:11:36,620
too and that's established in the jungle

00:11:34,370 --> 00:11:40,490
community for templating that kind of

00:11:36,620 --> 00:11:43,209
thing injecting code like loops like

00:11:40,490 --> 00:11:46,370
just variable replacement or so into

00:11:43,209 --> 00:11:48,140
templates and they've just reused that

00:11:46,370 --> 00:11:50,750
and you run those renderers one after

00:11:48,140 --> 00:11:51,769
the others it's if you don't change

00:11:50,750 --> 00:11:54,079
anything it would just happen

00:11:51,769 --> 00:11:56,060
automatically so first the yamel is

00:11:54,079 --> 00:12:01,610
parsed no actually the other way on

00:11:56,060 --> 00:12:03,500
first ginger does it shop and expanse

00:12:01,610 --> 00:12:05,959
all the stuff and then you've got

00:12:03,500 --> 00:12:09,529
basically and expanded llaman file

00:12:05,959 --> 00:12:13,130
that's then parsed in yeah but we wanted

00:12:09,529 --> 00:12:18,140
to actually talk about hacking it not

00:12:13,130 --> 00:12:21,070
using it first of all I guess most of

00:12:18,140 --> 00:12:24,050
you already know if you want to get salt

00:12:21,070 --> 00:12:26,360
on opensuse it's really just a super in

00:12:24,050 --> 00:12:32,690
a bay we have a stable version on

00:12:26,360 --> 00:12:35,060
opensuse both tumbleweed and leap we

00:12:32,690 --> 00:12:36,680
will also soon have it on / in the

00:12:35,060 --> 00:12:38,720
advanced systems management module and

00:12:36,680 --> 00:12:41,089
if you wanted more bleeding edge version

00:12:38,720 --> 00:12:43,070
I've got the URL on the slides and those

00:12:41,089 --> 00:12:45,769
will be uploaded to SlideShare so I

00:12:43,070 --> 00:12:47,420
think we have this project called

00:12:45,769 --> 00:12:51,350
systems management saltstack where we

00:12:47,420 --> 00:12:57,160
have pretty recent version so currently

00:12:51,350 --> 00:13:00,640
we have then twenty 16 3 there already

00:12:57,160 --> 00:13:03,949
one thing that Owen mentioned already

00:13:00,640 --> 00:13:05,810
it's really easy if you want to start

00:13:03,949 --> 00:13:09,110
experimenting with things you don't have

00:13:05,810 --> 00:13:12,589
to create your own packages clone the

00:13:09,110 --> 00:13:13,730
whole salt project tree or whatever what

00:13:12,589 --> 00:13:18,079
you can do is really use those

00:13:13,730 --> 00:13:19,910
underscore directories and put things in

00:13:18,079 --> 00:13:21,440
there that are kind of local overlays

00:13:19,910 --> 00:13:23,910
you play with them

00:13:21,440 --> 00:13:25,440
you can also use that of course with

00:13:23,910 --> 00:13:28,140
stuff that you will never open source

00:13:25,440 --> 00:13:29,760
for some reason yeah but if you want to

00:13:28,140 --> 00:13:31,170
open source it if you want to develop

00:13:29,760 --> 00:13:35,520
upstream it's always a good idea to

00:13:31,170 --> 00:13:38,330
start first playing around there and

00:13:35,520 --> 00:13:42,060
actually Duncan has created a project

00:13:38,330 --> 00:13:45,180
with salt and snapper that I'll refer to

00:13:42,060 --> 00:13:47,250
later that has a very nice example for

00:13:45,180 --> 00:13:51,780
for this kind of work style even bill

00:13:47,250 --> 00:13:54,000
vagrant a vagrant setups to use right

00:13:51,780 --> 00:13:57,060
out of the box and then you can sync

00:13:54,000 --> 00:13:59,040
those things so the singleness go grains

00:13:57,060 --> 00:14:01,860
command it only syncs the grains but you

00:13:59,040 --> 00:14:03,300
also saw on the other slide from Owen

00:14:01,860 --> 00:14:06,360
that there is a more generic one that

00:14:03,300 --> 00:14:08,370
sinks everything and those directories

00:14:06,360 --> 00:14:11,010
exist for anything all the components

00:14:08,370 --> 00:14:13,800
and so on so from beacons two engines

00:14:11,010 --> 00:14:17,990
grains modules proxies renderers

00:14:13,800 --> 00:14:21,870
whatever it all works the same way now

00:14:17,990 --> 00:14:24,450
my very first experiment was riding an

00:14:21,870 --> 00:14:25,950
old grain the idea here is ok I want an

00:14:24,450 --> 00:14:29,250
information piece of information from

00:14:25,950 --> 00:14:31,530
the system and yeah the standard grains

00:14:29,250 --> 00:14:35,310
just don't do it for me so I need to

00:14:31,530 --> 00:14:38,010
grab something this is a really simple

00:14:35,310 --> 00:14:40,230
example all those examples fit on a page

00:14:38,010 --> 00:14:44,250
they don't have any error handling

00:14:40,230 --> 00:14:46,290
logging anything so don't just use them

00:14:44,250 --> 00:14:48,330
but use them as an inspiration in this

00:14:46,290 --> 00:14:51,060
case for example of you're just using

00:14:48,330 --> 00:14:53,250
Python to run the rich command and check

00:14:51,060 --> 00:14:58,950
whether zuber is installed and if it is

00:14:53,250 --> 00:15:02,210
it will return true plus the path if not

00:14:58,950 --> 00:15:05,520
it will return an empty path and false

00:15:02,210 --> 00:15:07,760
yeah and it's easy is that so you can

00:15:05,520 --> 00:15:11,490
just call something on the command line

00:15:07,760 --> 00:15:13,740
probe for a file you know you could use

00:15:11,490 --> 00:15:16,950
anything there if you have an existing

00:15:13,740 --> 00:15:19,620
shell script or tool that knows how to

00:15:16,950 --> 00:15:21,480
figure things out or you could of course

00:15:19,620 --> 00:15:24,360
from pricing call any libraries that you

00:15:21,480 --> 00:15:27,630
have you could use of course you could

00:15:24,360 --> 00:15:31,640
just read the the proc file system or so

00:15:27,630 --> 00:15:34,910
and return and the nice thing is

00:15:31,640 --> 00:15:37,490
that basically all you have to make sure

00:15:34,910 --> 00:15:39,310
is that you return a dictionary a Python

00:15:37,490 --> 00:15:42,020
dictionary you built this dictionary

00:15:39,310 --> 00:15:47,120
with the data that you want to expose

00:15:42,020 --> 00:15:49,700
that was my very first experiment and

00:15:47,120 --> 00:15:52,610
this particular one actually fails on

00:15:49,700 --> 00:15:55,220
the sousa just enough operating system

00:15:52,610 --> 00:15:56,990
images because we are not installing

00:15:55,220 --> 00:15:59,780
which we are using the built-in bench on

00:15:56,990 --> 00:16:01,580
the bash and I just haven't found the

00:15:59,780 --> 00:16:02,930
time yet to figure out what exactly I

00:16:01,580 --> 00:16:10,190
would have to change because on the

00:16:02,930 --> 00:16:12,620
command that it would just run yeah

00:16:10,190 --> 00:16:14,690
that's basically I guess you have just

00:16:12,620 --> 00:16:16,790
not bothered too much about it because I

00:16:14,690 --> 00:16:18,620
mean this is it works if you have which

00:16:16,790 --> 00:16:21,950
as a command install it doesn't work if

00:16:18,620 --> 00:16:23,600
your hand yeah now execution models that

00:16:21,950 --> 00:16:26,360
are modules that's the next thing and

00:16:23,600 --> 00:16:31,610
again same concept you can use those

00:16:26,360 --> 00:16:35,210
underscore modules salt and snapper was

00:16:31,610 --> 00:16:38,030
what I tried first my coal is nowhere

00:16:35,210 --> 00:16:44,750
close to what Duncan and Pablo did

00:16:38,030 --> 00:16:46,700
during the the workshop we had a couple

00:16:44,750 --> 00:16:51,670
of weeks ago in that same building here

00:16:46,700 --> 00:16:55,520
for the sousa cloud and management team

00:16:51,670 --> 00:16:58,010
but um I got it running and the reason

00:16:55,520 --> 00:17:01,280
for that was mainly because snapper is

00:16:58,010 --> 00:17:04,520
such a great too so first of all snapper

00:17:01,280 --> 00:17:08,870
has done all the abstraction of how do

00:17:04,520 --> 00:17:11,720
you handle snapshotting systems from a

00:17:08,870 --> 00:17:14,570
command line really well it's well

00:17:11,720 --> 00:17:16,730
documented it has d-bus bindings built

00:17:14,570 --> 00:17:18,920
in and then I mean debug bindings from

00:17:16,730 --> 00:17:22,040
Python our chests and import deepest

00:17:18,920 --> 00:17:24,050
away that's really easy to use and it

00:17:22,040 --> 00:17:26,300
even comes with Python examples I've

00:17:24,050 --> 00:17:28,850
given you the project URL from from

00:17:26,300 --> 00:17:31,370
github as though you just go and copy

00:17:28,850 --> 00:17:35,330
like copy and paste the examples and you

00:17:31,370 --> 00:17:37,250
get it running so this is basically all

00:17:35,330 --> 00:17:39,110
you need to do to write an execution

00:17:37,250 --> 00:17:39,850
model of course this one only does one

00:17:39,110 --> 00:17:42,760
thing it lists

00:17:39,850 --> 00:17:46,020
snapshots and in this particular simple

00:17:42,760 --> 00:17:53,470
example actually I just returned the

00:17:46,020 --> 00:17:57,309
unpalatable divas called directly

00:17:53,470 --> 00:17:59,049
because it's already returning a

00:17:57,309 --> 00:18:03,190
dictionary like structure that would

00:17:59,049 --> 00:18:05,830
automatically be mangled and of course

00:18:03,190 --> 00:18:08,559
it's not nice you may want to filter it

00:18:05,830 --> 00:18:12,400
you won't want to make sure that instead

00:18:08,559 --> 00:18:14,559
of just positional information you give

00:18:12,400 --> 00:18:17,710
it nice names and so but but that's if

00:18:14,559 --> 00:18:20,440
you just want to get it running no parts

00:18:17,710 --> 00:18:23,530
pass the data pass it to the server and

00:18:20,440 --> 00:18:25,840
then do something with it it's as easy

00:18:23,530 --> 00:18:29,220
as that and that's probably true for any

00:18:25,840 --> 00:18:33,429
other commands that you could run over

00:18:29,220 --> 00:18:34,900
d-bus if there's a namespace that's the

00:18:33,429 --> 00:18:36,850
the boilerplate code you need and of

00:18:34,900 --> 00:18:38,470
course you'd need to put in some logging

00:18:36,850 --> 00:18:40,750
you need to put some error handling in

00:18:38,470 --> 00:18:42,880
there and so on and then it's probably a

00:18:40,750 --> 00:18:46,480
bit longer but that's that's really

00:18:42,880 --> 00:18:49,600
great stuff um yeah the pros do it

00:18:46,480 --> 00:18:52,090
slightly more advanced and there's a

00:18:49,600 --> 00:18:54,190
blog post from Duncan about it and

00:18:52,090 --> 00:18:56,530
there's also a github project this is

00:18:54,190 --> 00:18:58,510
not integrated into upstream sold yet

00:18:56,530 --> 00:19:01,690
because you're going to use this

00:18:58,510 --> 00:19:03,669
conference to kind of work on the design

00:19:01,690 --> 00:19:05,200
together with Thomas because we are not

00:19:03,669 --> 00:19:07,510
quite sure yet whether we are getting

00:19:05,200 --> 00:19:10,980
everything right conceptually but the

00:19:07,510 --> 00:19:15,010
cool idea behind that is we are not only

00:19:10,980 --> 00:19:20,230
using an execution module that exposes

00:19:15,010 --> 00:19:22,210
the snapper API to a remote engine we

00:19:20,230 --> 00:19:25,450
are using it for States so you can have

00:19:22,210 --> 00:19:27,100
a state that says make this machine look

00:19:25,450 --> 00:19:28,659
like this snapshot because it would just

00:19:27,100 --> 00:19:31,320
always make sure before you do anything

00:19:28,659 --> 00:19:35,770
else it applies this this snapshot

00:19:31,320 --> 00:19:37,210
actually not by snapshotting the system

00:19:35,770 --> 00:19:40,390
or rolling back and snapshot but by

00:19:37,210 --> 00:19:41,980
taking a snapshot and copying over all

00:19:40,390 --> 00:19:44,260
the files from that snapshot to the

00:19:41,980 --> 00:19:46,990
system that have changed and you can

00:19:44,260 --> 00:19:49,000
also exclude files or directories that

00:19:46,990 --> 00:19:51,389
are not relevant for your configuration

00:19:49,000 --> 00:19:54,229
management like your

00:19:51,389 --> 00:19:58,200
yet your data basically all your logs

00:19:54,229 --> 00:20:00,749
yeah another thing that I worked on and

00:19:58,200 --> 00:20:05,729
if we have time left I've set up the

00:20:00,749 --> 00:20:08,849
demo is the so called proxy minutes I

00:20:05,729 --> 00:20:10,559
mean to be really honest they a bit over

00:20:08,849 --> 00:20:12,329
song because most of the problems that

00:20:10,559 --> 00:20:14,609
you can solve their proxy means you

00:20:12,329 --> 00:20:17,669
could solve before but they are nice way

00:20:14,609 --> 00:20:19,889
of giving yet another abstraction the

00:20:17,669 --> 00:20:21,809
idea behind a proxy minion is if you

00:20:19,889 --> 00:20:24,419
have a device where you can't run a

00:20:21,809 --> 00:20:25,829
minion because it may not run python or

00:20:24,419 --> 00:20:29,489
you can't control it you only have a

00:20:25,829 --> 00:20:31,889
login into let's say a REST API or any

00:20:29,489 --> 00:20:34,320
kind of maybe you have a command-line

00:20:31,889 --> 00:20:38,159
tool that you can use to communicate

00:20:34,320 --> 00:20:41,789
with that I'm tool you basically write a

00:20:38,159 --> 00:20:45,779
proxy minion that talks that API and

00:20:41,789 --> 00:20:49,769
exposes itself to your soft master and

00:20:45,779 --> 00:20:52,349
as a proxy for those systems there are

00:20:49,769 --> 00:20:56,219
existing implementations for that for HP

00:20:52,349 --> 00:20:59,099
OneView for example or for some played

00:20:56,219 --> 00:21:02,969
center management controllers some

00:20:59,099 --> 00:21:04,979
switches and what we did is no make it

00:21:02,969 --> 00:21:07,649
happen for those Phillips light bulbs

00:21:04,979 --> 00:21:11,659
most of the heavy lifting for that was

00:21:07,649 --> 00:21:14,279
done by Bo who is also in the room today

00:21:11,659 --> 00:21:18,719
yeah so if you have time I can give you

00:21:14,279 --> 00:21:22,769
a little demo on that one later I've got

00:21:18,719 --> 00:21:25,700
yet another nice example for something

00:21:22,769 --> 00:21:31,549
really different and I think that shows

00:21:25,700 --> 00:21:35,999
the real power of how salt is so

00:21:31,549 --> 00:21:37,979
flexible but at the same time has st.

00:21:35,999 --> 00:21:41,249
defaults so you can run it out of the

00:21:37,979 --> 00:21:43,889
boxes with very little configuration

00:21:41,249 --> 00:21:45,779
just following the documentation and

00:21:43,889 --> 00:21:47,759
it's really just bringing up a minion on

00:21:45,779 --> 00:21:49,950
any server it's probably five steps all

00:21:47,759 --> 00:21:57,359
together once you've installed the

00:21:49,950 --> 00:21:59,969
software but everything is just modular

00:21:57,359 --> 00:22:03,479
you can change the way every single

00:21:59,969 --> 00:22:05,010
component works by overriding it by

00:22:03,479 --> 00:22:09,630
replacing it

00:22:05,010 --> 00:22:12,770
now what you've seen in Toms

00:22:09,630 --> 00:22:17,760
presentation you're on stage is that

00:22:12,770 --> 00:22:20,100
basically anything that you do when the

00:22:17,760 --> 00:22:23,280
states are created and rendered its it's

00:22:20,100 --> 00:22:24,870
all ending up in a big Python data

00:22:23,280 --> 00:22:27,870
structure so you have this high state

00:22:24,870 --> 00:22:32,840
that's then compile it to the low state

00:22:27,870 --> 00:22:36,210
and that's basically the input for the

00:22:32,840 --> 00:22:39,090
state engine that also means that you

00:22:36,210 --> 00:22:41,850
can do that in a different way you don't

00:22:39,090 --> 00:22:44,580
have to go from llamo no expanding the

00:22:41,850 --> 00:22:48,090
yamel using ginger to you can there's an

00:22:44,580 --> 00:22:50,130
existing high objects renderer for

00:22:48,090 --> 00:22:52,560
example we can use simplified pricing or

00:22:50,130 --> 00:22:56,600
that you can use plain Python now what I

00:22:52,560 --> 00:23:00,750
tried is we have this project called

00:22:56,600 --> 00:23:02,510
machinery that was written by a

00:23:00,750 --> 00:23:05,490
completely different team at Sousa and

00:23:02,510 --> 00:23:09,000
all the back end implementation is in

00:23:05,490 --> 00:23:11,970
Ruby but the output of machinery is a

00:23:09,000 --> 00:23:13,530
JSON file it's basically two things is a

00:23:11,970 --> 00:23:15,450
json file that describes in detail

00:23:13,530 --> 00:23:18,800
what's going on the machine so what

00:23:15,450 --> 00:23:22,590
users packages installed services

00:23:18,800 --> 00:23:24,270
running all that stuff and if you run it

00:23:22,590 --> 00:23:26,850
in full mode it would also create

00:23:24,270 --> 00:23:29,880
harbors with all the stuff that is not

00:23:26,850 --> 00:23:32,940
described well by chest X so if you have

00:23:29,880 --> 00:23:35,160
files that are not part of an RPM yeah

00:23:32,940 --> 00:23:38,640
you can tell it ok package all the crap

00:23:35,160 --> 00:23:40,680
up and and so I have overlaid tar balls

00:23:38,640 --> 00:23:42,690
I'm now talking about this chase and

00:23:40,680 --> 00:23:46,020
file and I thought it should be easy to

00:23:42,690 --> 00:23:48,050
take that JSON file and use it as input

00:23:46,020 --> 00:23:52,230
and basically write a render directly

00:23:48,050 --> 00:23:55,050
and I succeeded to some extent so that's

00:23:52,230 --> 00:23:57,510
really experimental it was like an hour

00:23:55,050 --> 00:23:59,640
of work so don't get me started about

00:23:57,510 --> 00:24:02,460
coding quality or anything and it again

00:23:59,640 --> 00:24:04,710
no logging no nothing but it was as easy

00:24:02,460 --> 00:24:06,300
as it again with the power of Python

00:24:04,710 --> 00:24:08,610
with its batteries included of course

00:24:06,300 --> 00:24:10,320
like there is a diva's module there's a

00:24:08,610 --> 00:24:11,820
chaser module that you can just use you

00:24:10,320 --> 00:24:14,610
don't have to look for it or so it's

00:24:11,820 --> 00:24:18,080
just there import Jason now what you can

00:24:14,610 --> 00:24:23,029
do is you basically load your data and

00:24:18,080 --> 00:24:26,000
you will be able to go through that and

00:24:23,029 --> 00:24:31,429
chase and data tree and in that case I'm

00:24:26,000 --> 00:24:33,799
just filtering for users and I create an

00:24:31,429 --> 00:24:36,080
output tree that has a dictionary with

00:24:33,799 --> 00:24:37,580
the user present directives and of

00:24:36,080 --> 00:24:39,769
course this is again oversimplifying

00:24:37,580 --> 00:24:44,809
because there's more data like there is

00:24:39,769 --> 00:24:46,220
of course you know use a UID group ID

00:24:44,809 --> 00:24:49,190
and all this stuff I just completely

00:24:46,220 --> 00:24:51,320
omitted that and same for packages I

00:24:49,190 --> 00:24:53,809
mean this code will actually work it

00:24:51,320 --> 00:24:55,399
will recreate all the users that are in

00:24:53,809 --> 00:24:57,529
the chase and file and it will reinstall

00:24:55,399 --> 00:24:59,980
all the packages what it doesn't do and

00:24:57,529 --> 00:25:02,630
that's really where I need more

00:24:59,980 --> 00:25:06,409
interaction with the salt assaults tech

00:25:02,630 --> 00:25:09,980
team in those cases where we have to

00:25:06,409 --> 00:25:13,010
figure out dependencies yeah because our

00:25:09,980 --> 00:25:15,500
chase and file from from a machinery

00:25:13,010 --> 00:25:17,750
doesn't really take care of dependencies

00:25:15,500 --> 00:25:20,659
like should i install that user first

00:25:17,750 --> 00:25:23,330
and then I can install the packages or

00:25:20,659 --> 00:25:24,950
can I do it the other way around or do I

00:25:23,330 --> 00:25:27,230
have something else that would take care

00:25:24,950 --> 00:25:29,179
of it like when you build images with

00:25:27,230 --> 00:25:31,179
our key the image building chain he

00:25:29,179 --> 00:25:37,789
people take care of those dependencies

00:25:31,179 --> 00:25:40,610
so I don't I just pass it in an XML file

00:25:37,789 --> 00:25:44,860
but if you are in the engine here I mean

00:25:40,610 --> 00:25:47,240
unless i specify those dependencies

00:25:44,860 --> 00:25:49,360
manually which I could do because at

00:25:47,240 --> 00:25:52,010
that point i can write my own high state

00:25:49,360 --> 00:25:56,840
however I want yeah but I have to put

00:25:52,010 --> 00:25:58,730
the logic somewhere yeah there's more

00:25:56,840 --> 00:26:01,580
stuff than others who the people are

00:25:58,730 --> 00:26:04,460
working on in the keynote I already

00:26:01,580 --> 00:26:12,529
mentioned we are maintaining Java API

00:26:04,460 --> 00:26:15,110
bindings for salt the API is helping us

00:26:12,529 --> 00:26:20,120
with really keeping concerned separate

00:26:15,110 --> 00:26:21,950
with not interfering with the salt

00:26:20,120 --> 00:26:26,299
engine too much from Susan manager

00:26:21,950 --> 00:26:29,720
keeping it all separate and um because

00:26:26,299 --> 00:26:31,570
the event mechanism is very strong in

00:26:29,720 --> 00:26:33,430
providing us a lot of

00:26:31,570 --> 00:26:37,960
data from the machines we're basically

00:26:33,430 --> 00:26:40,390
just using the Java API to listen to a

00:26:37,960 --> 00:26:44,380
lot of the stuff that's going on on the

00:26:40,390 --> 00:26:47,260
event bus and creating database entries

00:26:44,380 --> 00:26:49,450
from there like if we want to inspect

00:26:47,260 --> 00:26:52,210
the machine collect all the these

00:26:49,450 --> 00:26:54,730
software and hardware inventory it's

00:26:52,210 --> 00:26:57,790
basically working that way the other

00:26:54,730 --> 00:27:01,060
project I kind of hinted it already now

00:26:57,790 --> 00:27:03,540
ki be used to be a project written in

00:27:01,060 --> 00:27:07,620
perl the newest versions of key vr

00:27:03,540 --> 00:27:12,970
python 3 which is a bit of a problem so

00:27:07,620 --> 00:27:17,980
Paul looked at it in the last in that

00:27:12,970 --> 00:27:20,050
same workshop we succeeded in doing the

00:27:17,980 --> 00:27:23,800
salt snapper integration and he ported

00:27:20,050 --> 00:27:25,630
it back to python to as well so it will

00:27:23,800 --> 00:27:28,960
just work out of the box in the same

00:27:25,630 --> 00:27:31,660
python that currents old versions are

00:27:28,960 --> 00:27:35,230
using and now you can play with

00:27:31,660 --> 00:27:38,140
integrating salt with key be yeah so

00:27:35,230 --> 00:27:40,000
that gives you a full potential tool

00:27:38,140 --> 00:27:43,240
chain where you can go from inspecting

00:27:40,000 --> 00:27:45,370
systems to not only configuring systems

00:27:43,240 --> 00:27:47,830
but also creating images for the parts

00:27:45,370 --> 00:27:50,910
that you just want to dump into your

00:27:47,830 --> 00:27:55,210
binary and use as a as a baseline for

00:27:50,910 --> 00:27:57,610
running your stuff yeah so that was a

00:27:55,210 --> 00:28:02,260
really quick run through what you can do

00:27:57,610 --> 00:28:04,480
with extending salt my my main

00:28:02,260 --> 00:28:07,690
motivation really is to tell anybody who

00:28:04,480 --> 00:28:10,990
has some pies and knowledge or is just

00:28:07,690 --> 00:28:13,360
the basic tutorial away from acquiring

00:28:10,990 --> 00:28:16,540
that pies and knowledge it's very easy

00:28:13,360 --> 00:28:19,240
to start working with salt extending

00:28:16,540 --> 00:28:22,660
salt in almost every aspect so if you

00:28:19,240 --> 00:28:25,930
want to write your own language to

00:28:22,660 --> 00:28:28,000
describe States you can you can use

00:28:25,930 --> 00:28:30,340
chase and you can use whatever XML

00:28:28,000 --> 00:28:32,080
format you want you come up with I'm not

00:28:30,340 --> 00:28:34,780
suggesting that you should do that but

00:28:32,080 --> 00:28:37,090
if you have some existing tool and you

00:28:34,780 --> 00:28:40,720
want to try to basically make sense of

00:28:37,090 --> 00:28:44,390
an existing description from another

00:28:40,720 --> 00:28:47,060
tool you could do things like that

00:28:44,390 --> 00:28:50,000
you could write your own modules state

00:28:47,060 --> 00:28:52,040
models execution models very easily what

00:28:50,000 --> 00:28:54,170
I've kind of skipped also on the output

00:28:52,040 --> 00:28:58,460
side so all the data that comes back

00:28:54,170 --> 00:29:01,490
from the salt minions there are lots of

00:28:58,460 --> 00:29:05,750
existing projects and also ideas that we

00:29:01,490 --> 00:29:08,150
have around using tools like logstash

00:29:05,750 --> 00:29:11,840
elastic searchers so where you basically

00:29:08,150 --> 00:29:14,750
just use the data that's coming back

00:29:11,840 --> 00:29:19,340
from the minions and and put them into

00:29:14,750 --> 00:29:21,860
some no SQL database or SQL database or

00:29:19,340 --> 00:29:25,070
lock management facility do some

00:29:21,860 --> 00:29:29,720
filtering there and so on so the

00:29:25,070 --> 00:29:32,990
possibilities are really endless yeah I

00:29:29,720 --> 00:29:36,260
I have got a question slide here if you

00:29:32,990 --> 00:29:40,400
have any questions that's the point for

00:29:36,260 --> 00:29:44,560
it if not I could show you some of the

00:29:40,400 --> 00:29:44,560
Lamb stuff just because it's fun

00:29:46,360 --> 00:29:53,750
question yeah yeah I will show the lamb

00:29:51,290 --> 00:29:59,900
and I hope it's all going to work yeah

00:29:53,750 --> 00:30:08,360
so this is something that we originally

00:29:59,900 --> 00:30:12,410
did for a demo at here we go I'd suszek

00:30:08,360 --> 00:30:16,010
on in Amsterdam and then later I did a

00:30:12,410 --> 00:30:18,200
similar version um with help from John

00:30:16,010 --> 00:30:20,960
würzburg from the states and Johannes

00:30:18,200 --> 00:30:23,210
Renner from the Nuremberg Susan manager

00:30:20,960 --> 00:30:25,820
team at the salt content salt lake city

00:30:23,210 --> 00:30:28,160
for that one we didn't only have three

00:30:25,820 --> 00:30:30,920
lamps we had four lamp posts with three

00:30:28,160 --> 00:30:34,010
lamps each and a few backups so that was

00:30:30,920 --> 00:30:43,750
a much bigger show but yeah I can give

00:30:34,010 --> 00:30:45,980
you a little demo here I'll just move my

00:30:43,750 --> 00:30:49,360
shelter me on screen okay here we go

00:30:45,980 --> 00:30:49,360
yeah clear

00:30:49,690 --> 00:30:55,630
so just to explain what's going on in

00:30:52,850 --> 00:31:00,549
the background I have a machine running

00:30:55,630 --> 00:31:04,160
that is basically virtual machine that

00:31:00,549 --> 00:31:06,559
talks to the salt master as if it was

00:31:04,160 --> 00:31:09,380
assault minion but in reality it

00:31:06,559 --> 00:31:12,830
impersonates all those lamps through

00:31:09,380 --> 00:31:19,190
that little thing here that has a REST

00:31:12,830 --> 00:31:27,320
API that I can call and it's it's

00:31:19,190 --> 00:31:31,580
connected um through the network to

00:31:27,320 --> 00:31:33,669
start with I wrote on my own API call

00:31:31,580 --> 00:31:36,679
that really just was for the demo so

00:31:33,669 --> 00:31:39,200
that's not part of Bo's code that he

00:31:36,679 --> 00:31:40,760
wrote I just hacked it into it and I

00:31:39,200 --> 00:31:43,220
didn't do the underscore thing so that

00:31:40,760 --> 00:31:46,490
was just directly in the coat because it

00:31:43,220 --> 00:31:47,840
has to be had to be quick this one and

00:31:46,490 --> 00:31:52,549
I'll show you the code in a minute is

00:31:47,840 --> 00:31:55,130
basically randomizing a color and yeah

00:31:52,549 --> 00:31:57,590
assigning a color to those randomly and

00:31:55,130 --> 00:32:00,799
then sending what they call the alert

00:31:57,590 --> 00:32:02,450
command so when I run it again it should

00:32:00,799 --> 00:32:05,210
start up with a different color / lamp

00:32:02,450 --> 00:32:08,299
yeah it does so it rolls through all the

00:32:05,210 --> 00:32:10,790
colors hundreds of thousands of colors

00:32:08,299 --> 00:32:15,230
and most of them suck to be honest but

00:32:10,790 --> 00:32:19,299
yeah so that's that's that's the fun

00:32:15,230 --> 00:32:22,280
thing we were also using that for

00:32:19,299 --> 00:32:25,190
actually displaying state so what's

00:32:22,280 --> 00:32:27,470
going on on systems and I can show you

00:32:25,190 --> 00:32:30,350
some of that code if you are interested

00:32:27,470 --> 00:32:33,559
so first of all let me check where I

00:32:30,350 --> 00:32:35,990
have the yeah so I hope that's how I'm

00:32:33,559 --> 00:32:39,580
kind of readable the have fun part is

00:32:35,990 --> 00:32:39,580
really just this little method here

00:32:40,480 --> 00:32:46,760
actually the heavy lifting starts here

00:32:42,740 --> 00:32:49,450
the way that that Hugh lamp API works is

00:32:46,760 --> 00:32:53,350
basically you pass adjacent structure

00:32:49,450 --> 00:32:57,850
and you can do things like lamp on and

00:32:53,350 --> 00:33:01,640
then hue hue is the the color saturation

00:32:57,850 --> 00:33:02,269
Santa's consideration and then i use the

00:33:01,640 --> 00:33:05,989
alert

00:33:02,269 --> 00:33:08,119
yeah and you basically iterate over all

00:33:05,989 --> 00:33:12,639
the lamps that you have and there's an

00:33:08,119 --> 00:33:14,719
API call again to to query the system

00:33:12,639 --> 00:33:17,149
actually if you just want to play with

00:33:14,719 --> 00:33:19,700
it there's also something that isn't in

00:33:17,149 --> 00:33:22,429
any way related to solve but that's cool

00:33:19,700 --> 00:33:24,440
i'll show you in a minute there is a

00:33:22,429 --> 00:33:26,989
chrome plugin for it as well so i can

00:33:24,440 --> 00:33:29,059
also that's that's what we do if you do

00:33:26,989 --> 00:33:31,239
a demo and something doesn't work out we

00:33:29,059 --> 00:33:34,489
can just fake things because i can just

00:33:31,239 --> 00:33:40,159
you know go in here and that's basically

00:33:34,489 --> 00:33:43,039
a piece of JavaScript plugin that that

00:33:40,159 --> 00:33:48,019
uses the same API on you can change the

00:33:43,039 --> 00:33:49,729
color you know yeah and so on the free

00:33:48,019 --> 00:33:52,459
version doesn't let you group lamps or

00:33:49,729 --> 00:33:56,499
so but just show them but yeah for

00:33:52,459 --> 00:34:03,409
simple demos that's really cool okay

00:33:56,499 --> 00:34:05,149
good um so what we did there is when you

00:34:03,409 --> 00:34:08,960
look at so that's the manager server

00:34:05,149 --> 00:34:18,849
right of the type they go to my

00:34:08,960 --> 00:34:18,849
configuration servers reactor here we go

00:34:23,589 --> 00:34:31,579
yeah so that's just a few examples um

00:34:28,329 --> 00:34:35,750
the reactor mechanism can be configured

00:34:31,579 --> 00:34:38,240
by just putting those configuration

00:34:35,750 --> 00:34:40,490
files that are also written a novel into

00:34:38,240 --> 00:34:44,200
the system and I just bringing a one

00:34:40,490 --> 00:34:44,200
media one start for example

00:34:52,830 --> 00:34:58,410
so that one the secret

00:35:09,770 --> 00:35:24,480
yeah this one basically it's triggered

00:35:17,880 --> 00:35:33,030
by an event and it will then use the hue

00:35:24,480 --> 00:35:35,340
color Cole set color of blue and in this

00:35:33,030 --> 00:35:38,100
case it's going after lamp number three

00:35:35,340 --> 00:35:39,690
yeah yeah that was the part that was a

00:35:38,100 --> 00:35:41,670
bit hard with the demo because if you

00:35:39,690 --> 00:35:43,020
have more lamps you'll have to get all

00:35:41,670 --> 00:35:45,570
the numbers right and you'll have to

00:35:43,020 --> 00:35:47,400
have files for all that and it's a bit

00:35:45,570 --> 00:35:49,290
of a pain if you have to read number

00:35:47,400 --> 00:35:52,050
them and reassign them to the thing

00:35:49,290 --> 00:35:54,900
there's no easy way you will basically

00:35:52,050 --> 00:35:56,190
if you mess it up after LM 14 you'll

00:35:54,900 --> 00:36:02,460
have to start again because otherwise

00:35:56,190 --> 00:36:05,640
they are not in order yeah and then

00:36:02,460 --> 00:36:07,380
basically from the Susan manager code we

00:36:05,640 --> 00:36:09,480
would send events and I can give you an

00:36:07,380 --> 00:36:12,470
example I think my Susan manager should

00:36:09,480 --> 00:36:12,470
be up and running

00:36:24,430 --> 00:36:28,500
some Luckett secretary going to work you

00:36:29,250 --> 00:36:42,850
so in Sue's a manager we have those salt

00:36:37,990 --> 00:36:48,900
states in the state catalog and there if

00:36:42,850 --> 00:36:54,130
you like the alert state so this one is

00:36:48,900 --> 00:36:59,410
directly running the hue alert command

00:36:54,130 --> 00:37:03,040
on on lamps I think I've assigned it to

00:36:59,410 --> 00:37:06,670
one of the systems or if not we can just

00:37:03,040 --> 00:37:11,560
do that it's not how it's supposed to be

00:37:06,670 --> 00:37:15,750
used but it'll hopefully work so now you

00:37:11,560 --> 00:37:15,750
can assign that state

00:37:29,710 --> 00:37:48,070
true it's when I work nope but one of

00:37:45,280 --> 00:37:58,300
the other states worked i remember so if

00:37:48,070 --> 00:38:01,210
i go to my this one wasn't have you

00:37:58,300 --> 00:38:04,050
tested especially not with those those

00:38:01,210 --> 00:38:07,330
lips but i think if i just reapply the

00:38:04,050 --> 00:38:10,869
india state so that's what I've been

00:38:07,330 --> 00:38:14,770
talking about in the keynote we are not

00:38:10,869 --> 00:38:16,750
actually in most cases linking salt

00:38:14,770 --> 00:38:18,640
States directly to systems but we try to

00:38:16,750 --> 00:38:21,339
always go through those system groups

00:38:18,640 --> 00:38:24,190
because that way you're completely

00:38:21,339 --> 00:38:29,020
separating concerns and an admin could

00:38:24,190 --> 00:38:31,060
just make the connection without having

00:38:29,020 --> 00:38:33,490
to know about this all parts and this

00:38:31,060 --> 00:38:34,900
the guy who is writing the salt States

00:38:33,490 --> 00:38:39,010
doesn't have to know exactly which

00:38:34,900 --> 00:38:40,990
systems those states are supposed to be

00:38:39,010 --> 00:38:45,460
running on let me see if that one

00:38:40,990 --> 00:38:52,510
there's anything I had some effects

00:38:45,460 --> 00:38:56,830
running yesterday yeah anyway no lamps

00:38:52,510 --> 00:38:59,070
Wow final try the other one it's one

00:38:56,830 --> 00:38:59,070
more

00:39:21,359 --> 00:39:27,289
hmm ok that one doesn't work anyway

00:39:28,069 --> 00:39:35,339
another thing that may work is if I just

00:39:30,839 --> 00:39:38,190
bring up the oops I just bring up yeah

00:39:35,339 --> 00:39:40,049
uh-huh okay that's an easy one of course

00:39:38,190 --> 00:39:44,009
those the media one server doesn't run

00:39:40,049 --> 00:39:48,720
yeah so of course if the vm isn't

00:39:44,009 --> 00:39:50,700
running it's not going to do anything so

00:39:48,720 --> 00:39:52,739
let's just wait for it and maybe when

00:39:50,700 --> 00:39:59,039
they started out it looks better okay

00:39:52,739 --> 00:40:00,749
but yeah long story make sure you can do

00:39:59,039 --> 00:40:04,739
things like when the machine comes up

00:40:00,749 --> 00:40:08,220
you fire up an event I now have a raspy

00:40:04,739 --> 00:40:11,940
with the sense head that has an eight by

00:40:08,220 --> 00:40:13,739
eight so 64 RGB lamp mattrick's so I

00:40:11,940 --> 00:40:16,619
could actually read the raspy I could do

00:40:13,739 --> 00:40:19,829
things similar to that with 64 virtual

00:40:16,619 --> 00:40:22,499
servers and have it all yeah here we go

00:40:19,829 --> 00:40:25,470
so that's the load balancer coming up

00:40:22,499 --> 00:40:26,849
first lamp and in theory like if

00:40:25,470 --> 00:40:29,849
everything works according to blend the

00:40:26,849 --> 00:40:32,009
other limbs would also come up yeah you

00:40:29,849 --> 00:40:35,279
see so yeah you see it's working it's

00:40:32,009 --> 00:40:39,980
just operator error of course if the VMS

00:40:35,279 --> 00:40:44,339
are down salt will not talk to them okay

00:40:39,980 --> 00:40:47,849
so much for now I hope that inspired you

00:40:44,339 --> 00:40:49,259
as I said it's not limited to Hugh lamps

00:40:47,849 --> 00:40:51,660
you could do things with raspberry PI's

00:40:49,259 --> 00:40:53,640
for example on the rocks be there is

00:40:51,660 --> 00:40:56,130
Python so you can run it natively I

00:40:53,640 --> 00:41:00,739
think Duncan has a cluster of recipes

00:40:56,130 --> 00:41:03,180
now running salt right yeah we sold SSH

00:41:00,739 --> 00:41:05,819
another thing that I really like and

00:41:03,180 --> 00:41:08,369
that's really if the the ansible guys

00:41:05,819 --> 00:41:10,859
talk to you about where our butts salt

00:41:08,369 --> 00:41:14,999
they need the agent and it's pretty big

00:41:10,859 --> 00:41:16,829
and so on first of all we are playing

00:41:14,999 --> 00:41:20,089
with the ideas to bring down the Pisan

00:41:16,829 --> 00:41:23,249
footprint because most of the stuff that

00:41:20,089 --> 00:41:25,680
adds to the python footprint is just

00:41:23,249 --> 00:41:27,420
overhead because you have a source file

00:41:25,680 --> 00:41:28,769
and you have a compiled file and you

00:41:27,420 --> 00:41:31,019
have a lot of libraries that you'd never

00:41:28,769 --> 00:41:33,599
use all the documentation you can strip

00:41:31,019 --> 00:41:35,040
most of that and you can what that's

00:41:33,599 --> 00:41:36,960
when the state's come up

00:41:35,040 --> 00:41:40,800
and the cool thing is it's all actually

00:41:36,960 --> 00:41:42,690
waited until those machines are up and

00:41:40,800 --> 00:41:44,010
for some reason that you were so when it

00:41:42,690 --> 00:41:50,720
gets green that's when the state is

00:41:44,010 --> 00:41:53,630
applied yeah so but the salt as his age

00:41:50,720 --> 00:41:56,160
there's a simple mode where you can even

00:41:53,630 --> 00:41:59,010
execute just plain shell commands if

00:41:56,160 --> 00:42:01,980
there's nothing on the system but an ssh

00:41:59,010 --> 00:42:05,580
daemon and of course a shell yeah you

00:42:01,980 --> 00:42:08,840
need some some some bash I'm not sure

00:42:05,580 --> 00:42:13,140
about busybox an effort right there but

00:42:08,840 --> 00:42:16,530
what you can do is even basically go in

00:42:13,140 --> 00:42:20,040
and with just plain commands like rpm

00:42:16,530 --> 00:42:22,830
commands or a curl or w get or whatever

00:42:20,040 --> 00:42:25,890
you can bootstrap that system to bring

00:42:22,830 --> 00:42:28,290
up the necessary like just install

00:42:25,890 --> 00:42:30,540
Python now once Python is installed you

00:42:28,290 --> 00:42:33,570
can use salt as its age and you can use

00:42:30,540 --> 00:42:38,090
all this execution modules or state

00:42:33,570 --> 00:42:41,790
modules because salt will then basically

00:42:38,090 --> 00:42:44,490
temporarily move all the modules that it

00:42:41,790 --> 00:42:46,560
needs onto the machine use the local

00:42:44,490 --> 00:42:50,960
Python interpreter to run it and then

00:42:46,560 --> 00:42:54,450
either cleanup or cash it for later use

00:42:50,960 --> 00:42:56,190
so you can go from zero footprint to

00:42:54,450 --> 00:42:59,000
just a little footprint because you need

00:42:56,190 --> 00:43:02,490
the Python interpreter to the minion

00:42:59,000 --> 00:43:04,680
running is a demon all the time and and

00:43:02,490 --> 00:43:07,770
that's really a great combination I

00:43:04,680 --> 00:43:12,000
think yeah so you can bootstrap salt

00:43:07,770 --> 00:43:15,180
will the salt not not many tools can can

00:43:12,000 --> 00:43:18,480
say that okay thank you any more

00:43:15,180 --> 00:43:21,120
questions you can ask now or you can

00:43:18,480 --> 00:43:23,310
just grab me or send me an email my

00:43:21,120 --> 00:43:24,990
email is really easy on Joe at Souza

00:43:23,310 --> 00:43:28,560
calm my twitter handle is joao sousa

00:43:24,990 --> 00:43:32,010
calm my google email address is joao

00:43:28,560 --> 00:43:34,650
sousa calm at gmail com and I think I

00:43:32,010 --> 00:43:37,020
even have that for iCloud I'm not sure

00:43:34,650 --> 00:43:39,900
about that one yeah okay thank you and

00:43:37,020 --> 00:43:41,960
have fun the salt

00:43:39,900 --> 00:43:41,960

YouTube URL: https://www.youtube.com/watch?v=BnDFoamGXPs


