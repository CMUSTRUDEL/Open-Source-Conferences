Title: SaltStack is more than just configuration management
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/818-saltstack-is-more-than-just-configuration-management

In this presentation, Thomas Hatch, SaltStack CTO and technical founder, will provide a quick overview of the evolution of IT automation and describe his motivations for creating the Salt open source project. Thomas will also define how SaltStack is different than other systems management tools and is the first to deliver a single platform for remote execution, configuration management, cloud control and event-driven automation. Specifically Thomas will provide a glimpse at the future of event-driven automation and how it will change the way IT operations and DevOps teams deploy, control and secure data center infrastructure and application components.  

Thomas will be joined on stage by Joe Werner, SUSE product management, and Dave Boucha, SaltStack engineering. Joe will highlight how the newest version of SUSE Manager leverages Salt and why Salt was the SUSE automation platform of choice. While Dave will provide a demonstration of SaltStack event-driven automation.

rglauser
Captions: 
	00:00:07,400 --> 00:00:14,790
to also get this thing working so a few

00:00:12,300 --> 00:00:17,669
quick notes before we start the power

00:00:14,790 --> 00:00:20,400
sources will be in the front and this

00:00:17,669 --> 00:00:24,869
room and in gallery the seminar rooms

00:00:20,400 --> 00:00:27,479
are upstairs then we want to thank our

00:00:24,869 --> 00:00:32,300
sponsors so we want to thank Oracle

00:00:27,479 --> 00:00:36,150
MySQL the German u UNIX users group Guk

00:00:32,300 --> 00:00:39,840
team mix for doing our Wi-Fi and the

00:00:36,150 --> 00:00:44,490
password you will see on the doors for

00:00:39,840 --> 00:00:46,290
the network here which is openSUSE we

00:00:44,490 --> 00:00:49,800
will be having lunch there'll be a food

00:00:46,290 --> 00:00:52,770
truck coming between 12:00 and 2:00 so

00:00:49,800 --> 00:00:55,290
please find some time to go out and get

00:00:52,770 --> 00:01:02,460
some lunch that's sponsored this sponsor

00:00:55,290 --> 00:01:07,640
today by my SQL so it's my pleasure to

00:01:02,460 --> 00:01:10,049
introduce our first keynote speakers and

00:01:07,640 --> 00:01:15,210
the first person I want to talk about is

00:01:10,049 --> 00:01:18,780
Thomas Thomas is the CTO of salt salt

00:01:15,210 --> 00:01:25,229
stack and the technical co-founder of

00:01:18,780 --> 00:01:29,490
salt and he is joined today by David

00:01:25,229 --> 00:01:34,859
Boucher and David it likes to use salts

00:01:29,490 --> 00:01:37,499
as a as a tool to bend technology I

00:01:34,859 --> 00:01:39,329
guess is what is what he had said and

00:01:37,499 --> 00:01:41,850
he's going to be Joan joined by Joe

00:01:39,329 --> 00:01:44,789
garner from Sousa and they're going to

00:01:41,850 --> 00:01:48,450
bring us into the world of automation

00:01:44,789 --> 00:01:50,479
with salt so please welcome them to the

00:01:48,450 --> 00:01:50,479
stage

00:02:04,460 --> 00:02:11,160
I'm really excited to be able to kind of

00:02:08,190 --> 00:02:12,959
kick off the openSUSE conference it's

00:02:11,160 --> 00:02:16,080
it's been a lot of fun coming out here

00:02:12,959 --> 00:02:20,610
and it's also been a lot of fun to meet

00:02:16,080 --> 00:02:23,430
a lot of new or a lot of Sousa people so

00:02:20,610 --> 00:02:26,190
personally I only recently switched over

00:02:23,430 --> 00:02:28,500
to Sousa for a long time I was a big

00:02:26,190 --> 00:02:31,830
arch linux fan and used a lot of Red Hat

00:02:28,500 --> 00:02:33,540
but last year when the Sousa team

00:02:31,830 --> 00:02:36,180
reached out to me and said that they

00:02:33,540 --> 00:02:38,580
were using salt for the new Sousa

00:02:36,180 --> 00:02:41,160
manager project I thought to myself

00:02:38,580 --> 00:02:42,989
maybe I need to look at Sousa again and

00:02:41,160 --> 00:02:46,320
I hadn't looked at Sousa for many many

00:02:42,989 --> 00:02:48,600
many years and I was very very surprised

00:02:46,320 --> 00:02:51,930
at what I what I found and learned about

00:02:48,600 --> 00:02:55,320
Sousa and was instantly convinced that

00:02:51,930 --> 00:02:57,959
Sousa is hands-down the way forward in

00:02:55,320 --> 00:03:02,370
Linux distributions very very exciting

00:02:57,959 --> 00:03:07,880
stuff but what I'm here to talk to you

00:03:02,370 --> 00:03:13,079
today about is about next-generation

00:03:07,880 --> 00:03:16,170
automation so let me start by talking

00:03:13,079 --> 00:03:18,510
about just infrastructures and systems

00:03:16,170 --> 00:03:20,519
in general one of the major problems

00:03:18,510 --> 00:03:22,380
that we're running into right now inside

00:03:20,519 --> 00:03:25,230
of infrastructure deployment and

00:03:22,380 --> 00:03:27,620
development is the increasing complexity

00:03:25,230 --> 00:03:30,510
and diversity of infrastructure

00:03:27,620 --> 00:03:32,700
environments so we have more tools than

00:03:30,510 --> 00:03:34,350
ever more models than than ever for

00:03:32,700 --> 00:03:37,440
deploying and managing infrastructure

00:03:34,350 --> 00:03:40,940
but we also have more things than ever

00:03:37,440 --> 00:03:43,410
all the way up to Internet of Things and

00:03:40,940 --> 00:03:45,090
devices that are implanted all over the

00:03:43,410 --> 00:03:48,780
place we've got all these new

00:03:45,090 --> 00:03:51,299
hyper-converged data center and hardware

00:03:48,780 --> 00:03:54,540
plays as well as hybrid cloud etc etc

00:03:51,299 --> 00:03:56,070
and so what we're seeing is something

00:03:54,540 --> 00:03:59,250
which we all should definitely have

00:03:56,070 --> 00:04:02,930
expected and that is the dramatic

00:03:59,250 --> 00:04:07,109
increase in the complexity of our

00:04:02,930 --> 00:04:09,620
information systems now as we increase

00:04:07,109 --> 00:04:12,230
the complexity in these and the cuff

00:04:09,620 --> 00:04:14,390
of these information systems the

00:04:12,230 --> 00:04:16,910
question arises and says how do we deal

00:04:14,390 --> 00:04:21,620
with this new and more increasingly

00:04:16,910 --> 00:04:24,080
complex environment and this is where

00:04:21,620 --> 00:04:27,699
the model of automation that we use

00:04:24,080 --> 00:04:30,710
inside of saltstack comes into play and

00:04:27,699 --> 00:04:33,290
the model of automation that we use is

00:04:30,710 --> 00:04:35,660
one that is made to span all of these

00:04:33,290 --> 00:04:37,910
different areas normalize the access

00:04:35,660 --> 00:04:40,729
that we have across a vast array of

00:04:37,910 --> 00:04:44,750
devices and make making it very very

00:04:40,729 --> 00:04:48,350
easy to automate increasingly large and

00:04:44,750 --> 00:04:58,580
complex environments in a very very

00:04:48,350 --> 00:04:59,540
smooth and manageable way so the first

00:04:58,580 --> 00:05:03,530
thing that I want to talk about

00:04:59,540 --> 00:05:05,630
therefore is complexity when we are

00:05:03,530 --> 00:05:07,729
setting up these systems we have seen

00:05:05,630 --> 00:05:08,479
and especially over the last five five

00:05:07,729 --> 00:05:11,150
to ten years

00:05:08,479 --> 00:05:13,400
a dramatic link a dramatic increase in

00:05:11,150 --> 00:05:16,190
the complexity of the infrastructures

00:05:13,400 --> 00:05:17,510
that we are interfacing with and so I

00:05:16,190 --> 00:05:20,030
think one of the questions that we have

00:05:17,510 --> 00:05:22,520
is where is the dramatic increase in

00:05:20,030 --> 00:05:23,840
complexity coming from and I would say

00:05:22,520 --> 00:05:26,660
that it's coming from our increased

00:05:23,840 --> 00:05:28,580
availability of automation as we have

00:05:26,660 --> 00:05:30,530
more automation that is available it

00:05:28,580 --> 00:05:32,810
gives us more free time to make things

00:05:30,530 --> 00:05:35,389
more complex and more terrible but at

00:05:32,810 --> 00:05:37,340
the same time get more stuff done one

00:05:35,389 --> 00:05:40,580
thing that we see a lot of and one of my

00:05:37,340 --> 00:05:44,210
favorite examples is that we go into an

00:05:40,580 --> 00:05:48,410
organization and they say well before we

00:05:44,210 --> 00:05:52,190
introduced a DevOps and configuration

00:05:48,410 --> 00:05:55,250
management models we were deploying five

00:05:52,190 --> 00:05:57,349
apps with a team of five people and now

00:05:55,250 --> 00:05:59,690
we introduce these new automation models

00:05:57,349 --> 00:06:04,340
we're deploying 50 apps with a team of

00:05:59,690 --> 00:06:06,830
five people so if automation breeds more

00:06:04,340 --> 00:06:10,450
complexity and allows us to get more

00:06:06,830 --> 00:06:14,780
done and expose more functionality then

00:06:10,450 --> 00:06:17,599
what is what does that mean does it mean

00:06:14,780 --> 00:06:19,729
that we're moving towards a scenario

00:06:17,599 --> 00:06:21,500
where we kind of where we apex on the

00:06:19,729 --> 00:06:22,759
complexity that can be handled in an

00:06:21,500 --> 00:06:25,039
infrastructure

00:06:22,759 --> 00:06:27,559
or are we moving towards a scenario

00:06:25,039 --> 00:06:32,389
where we need to come up with new models

00:06:27,559 --> 00:06:34,150
of automation okay the next thing that I

00:06:32,389 --> 00:06:38,180
want to talk about before diving into

00:06:34,150 --> 00:06:40,460
models of automation has to do with what

00:06:38,180 --> 00:06:43,729
it means for an infrastructure to be

00:06:40,460 --> 00:06:47,029
large or complex or for a problem set to

00:06:43,729 --> 00:06:49,249
be complex back at Sault cough a few

00:06:47,029 --> 00:06:52,639
months ago I was asked what does it what

00:06:49,249 --> 00:06:54,349
does large mean to you and I explained

00:06:52,639 --> 00:06:55,969
that some of the largest infrastructure

00:06:54,349 --> 00:06:59,749
is I've seen are only a few hundred

00:06:55,969 --> 00:07:01,729
servers because of the incredible level

00:06:59,749 --> 00:07:04,339
of complexity inside of the applications

00:07:01,729 --> 00:07:06,559
that are deployed and then when we see

00:07:04,339 --> 00:07:09,159
very very large deployments of tens of

00:07:06,559 --> 00:07:11,089
thousands and even millions of servers

00:07:09,159 --> 00:07:14,509
oftentimes they have a fairly

00:07:11,089 --> 00:07:16,819
heterogeneous use use case across those

00:07:14,509 --> 00:07:18,740
servers and so I would say that

00:07:16,819 --> 00:07:20,990
something that is still small can

00:07:18,740 --> 00:07:27,439
physically it can still be large and its

00:07:20,990 --> 00:07:30,789
complexity now how do we handle this how

00:07:27,439 --> 00:07:35,389
do we handle increased complexity and

00:07:30,789 --> 00:07:38,089
larger environments so it's not a bad

00:07:35,389 --> 00:07:40,219
thing that things are more complex it's

00:07:38,089 --> 00:07:44,209
a bad thing if we cannot adequately

00:07:40,219 --> 00:07:46,520
manage those complex environments so one

00:07:44,209 --> 00:07:49,039
of the things that I go around and say

00:07:46,520 --> 00:07:53,360
is that I don't believe in revolution I

00:07:49,039 --> 00:07:56,749
believe in evolution I believe that when

00:07:53,360 --> 00:07:59,689
we develop new ideas they are developed

00:07:56,749 --> 00:08:02,629
on top of older ideas and that they

00:07:59,689 --> 00:08:05,300
therefore grow and that it's very

00:08:02,629 --> 00:08:07,839
difficult to bring in entirely fresh

00:08:05,300 --> 00:08:12,889
ideas and impose them on an existing

00:08:07,839 --> 00:08:15,490
infrastructure or culture now what does

00:08:12,889 --> 00:08:19,459
that mean then when it comes to

00:08:15,490 --> 00:08:22,129
infrastructure automation if we look at

00:08:19,459 --> 00:08:23,569
the popular ideas around infrastructure

00:08:22,129 --> 00:08:26,689
automation that have emerged in the last

00:08:23,569 --> 00:08:31,219
few years many of them stemmed back to

00:08:26,689 --> 00:08:33,019
two core ideas or concepts one of which

00:08:31,219 --> 00:08:35,000
that I want to talk about first is

00:08:33,019 --> 00:08:36,440
something that was described in some

00:08:35,000 --> 00:08:39,950
academic papers in nineteen

00:08:36,440 --> 00:08:42,080
93 by ma'am named Mark Burgess a

00:08:39,950 --> 00:08:45,920
brilliant man and the man who created a

00:08:42,080 --> 00:08:48,650
piece of software called cfengine he

00:08:45,920 --> 00:08:50,930
defined basically the concept behind

00:08:48,650 --> 00:08:54,020
what we now call configured modern

00:08:50,930 --> 00:08:56,720
configuration management this is the

00:08:54,020 --> 00:08:58,970
idea of taking what a system is and

00:08:56,720 --> 00:09:01,010
abstracting what that system is in a

00:08:58,970 --> 00:09:03,050
declarative fashion so that you can

00:09:01,010 --> 00:09:05,060
declare what the system what state the

00:09:03,050 --> 00:09:09,170
system should be in and then apply it

00:09:05,060 --> 00:09:11,330
again declaratively this is the aspect

00:09:09,170 --> 00:09:16,340
of salt for instance which we are the

00:09:11,330 --> 00:09:18,140
most well known for but as I develop

00:09:16,340 --> 00:09:22,430
salt we were certainly not the first

00:09:18,140 --> 00:09:24,350
ones to develop this concept and so I

00:09:22,430 --> 00:09:26,900
realized that there are more vectors

00:09:24,350 --> 00:09:28,790
needed for automation and the first

00:09:26,900 --> 00:09:31,180
thing that I did was look at other

00:09:28,790 --> 00:09:34,360
automation systems which exist and

00:09:31,180 --> 00:09:37,880
realize that we need not only to control

00:09:34,360 --> 00:09:41,360
the finite declarative state of systems

00:09:37,880 --> 00:09:43,910
but we also need real-time access to

00:09:41,360 --> 00:09:46,520
those systems the ability to reach out

00:09:43,910 --> 00:09:50,650
to those systems change things on the

00:09:46,520 --> 00:09:55,010
fly query those systems on the fly and

00:09:50,650 --> 00:09:58,400
apply stateful changes on the fly and so

00:09:55,010 --> 00:10:00,140
this is where I then go in and look at

00:09:58,400 --> 00:10:03,740
orchestration and remote execution

00:10:00,140 --> 00:10:08,120
models orchestration and remote

00:10:03,740 --> 00:10:09,470
execution models come back and focus

00:10:08,120 --> 00:10:13,070
around a number of their own

00:10:09,470 --> 00:10:14,870
philosophies the main focus I decided to

00:10:13,070 --> 00:10:16,400
use with Salt's remote execution was to

00:10:14,870 --> 00:10:19,550
just say I need to make it as fast as

00:10:16,400 --> 00:10:22,030
possible if it's as fast as possible and

00:10:19,550 --> 00:10:26,089
can reach all of my systems in

00:10:22,030 --> 00:10:29,050
microseconds then things like building

00:10:26,089 --> 00:10:31,339
linear orchestration models is easy

00:10:29,050 --> 00:10:32,990
linear orchestration or runbook

00:10:31,339 --> 00:10:34,630
orchestration is again something you're

00:10:32,990 --> 00:10:37,880
probably all extremely familiar with

00:10:34,630 --> 00:10:41,030
where you've got a task which runs in

00:10:37,880 --> 00:10:42,290
sequence so some of the problems that we

00:10:41,030 --> 00:10:47,150
run into though with lynnium

00:10:42,290 --> 00:10:49,280
orchestration at scale is that it can

00:10:47,150 --> 00:10:53,330
take a long time to run

00:10:49,280 --> 00:10:57,010
and those linear orchestration systems

00:10:53,330 --> 00:10:59,270
are generally also not item potent and

00:10:57,010 --> 00:11:01,070
declarative in the way in which they

00:10:59,270 --> 00:11:03,650
apply changes they're very dependent

00:11:01,070 --> 00:11:06,710
upon step one then step two then step

00:11:03,650 --> 00:11:09,620
three etc which breaks that core model

00:11:06,710 --> 00:11:11,690
which was described again by Mark

00:11:09,620 --> 00:11:14,150
Burgess originally around to having a

00:11:11,690 --> 00:11:17,120
declarative system and so we started to

00:11:14,150 --> 00:11:18,950
say well can we do better than this can

00:11:17,120 --> 00:11:21,920
we figure out a way that's better than

00:11:18,950 --> 00:11:24,800
our classical linear orchestration model

00:11:21,920 --> 00:11:27,260
and so I thought if everything is

00:11:24,800 --> 00:11:29,870
evolution then maybe we need to evolve

00:11:27,260 --> 00:11:34,610
out of experience from areas that aren't

00:11:29,870 --> 00:11:37,040
just in IT automation and so I thought

00:11:34,610 --> 00:11:41,420
back to my experience working with the

00:11:37,040 --> 00:11:45,470
US government and some time I had spent

00:11:41,420 --> 00:11:50,170
with US Naval Submarine automation when

00:11:45,470 --> 00:11:52,520
we look at robotics automation it

00:11:50,170 --> 00:11:55,580
functions very differently than what

00:11:52,520 --> 00:11:57,860
we're used to inside of IT much of the

00:11:55,580 --> 00:11:59,900
robotics automation that we see has to

00:11:57,860 --> 00:12:03,230
do with the definition of a finite rule

00:11:59,900 --> 00:12:05,030
set which declares that if scenarios

00:12:03,230 --> 00:12:08,150
occur then react to them in specific

00:12:05,030 --> 00:12:12,650
ways and then applying that finite rule

00:12:08,150 --> 00:12:15,440
set on to the actual automation platform

00:12:12,650 --> 00:12:17,060
and so there was a model inside of

00:12:15,440 --> 00:12:20,240
robotics that I became very fond of

00:12:17,060 --> 00:12:23,810
called flow programming which allows us

00:12:20,240 --> 00:12:25,160
to do just that thing say based on the

00:12:23,810 --> 00:12:29,960
information that's coming back from our

00:12:25,160 --> 00:12:31,430
sensors and based on what information is

00:12:29,960 --> 00:12:34,010
that we are aggregating from those

00:12:31,430 --> 00:12:38,810
sensors and from those events what we

00:12:34,010 --> 00:12:44,080
were able to do is define when we're

00:12:38,810 --> 00:12:50,410
going to act ok and so I asked myself

00:12:44,080 --> 00:12:54,400
could this model be used for systems

00:12:50,410 --> 00:12:54,400
automation ok

00:12:55,040 --> 00:13:01,610
and so once I brought these concepts

00:12:57,529 --> 00:13:03,500
together is where the definition of salt

00:13:01,610 --> 00:13:07,639
automation platform really became

00:13:03,500 --> 00:13:10,220
cohesive when we described what salt is

00:13:07,639 --> 00:13:14,120
is an automation platform it's primarily

00:13:10,220 --> 00:13:16,180
for things we have the remote execution

00:13:14,120 --> 00:13:18,889
platform which I talked about first

00:13:16,180 --> 00:13:20,870
we've got the configuration automation

00:13:18,889 --> 00:13:23,540
system which is again what people are

00:13:20,870 --> 00:13:25,639
most familiar with the most the whole

00:13:23,540 --> 00:13:29,420
DevOps declare your infrastructure

00:13:25,639 --> 00:13:32,060
approach we have extensive cloud control

00:13:29,420 --> 00:13:37,279
which I'm I'm kind of glossing over in

00:13:32,060 --> 00:13:39,440
this talk and then we've got the

00:13:37,279 --> 00:13:41,120
event-driven orchestration now the

00:13:39,440 --> 00:13:43,899
event-driven orchestration is something

00:13:41,120 --> 00:13:47,779
which is a lot more unique to how salt

00:13:43,899 --> 00:13:50,600
handles orchestration and automation and

00:13:47,779 --> 00:13:52,339
so let me start by actually describing

00:13:50,600 --> 00:13:54,920
for those of you who are who are not as

00:13:52,339 --> 00:14:00,440
familiar with salt some of the basics

00:13:54,920 --> 00:14:02,690
with respect to how it works so salt can

00:14:00,440 --> 00:14:07,010
operate as as you can see in an

00:14:02,690 --> 00:14:10,940
agentless or agent foot way we install

00:14:07,010 --> 00:14:12,440
an agent which we call a minion out on

00:14:10,940 --> 00:14:14,810
all of the systems that we want to

00:14:12,440 --> 00:14:17,300
manage if we have a system that we

00:14:14,810 --> 00:14:19,310
cannot install an agent on then we use

00:14:17,300 --> 00:14:23,510
one of the agentless pipelines which is

00:14:19,310 --> 00:14:26,839
either the proxy minion or salt ssh and

00:14:23,510 --> 00:14:27,110
by cannot or don't want to it doesn't

00:14:26,839 --> 00:14:29,660
matter

00:14:27,110 --> 00:14:32,029
we're we're cool anyway anyway about it

00:14:29,660 --> 00:14:34,610
and then that agent is where all of the

00:14:32,029 --> 00:14:37,550
intelligence sits one of the problems

00:14:34,610 --> 00:14:40,069
that we run into with dealing with

00:14:37,550 --> 00:14:42,560
distributed automation is that we have

00:14:40,069 --> 00:14:45,769
to consider the fact that we need to

00:14:42,560 --> 00:14:49,040
have well distributed intelligence and

00:14:45,769 --> 00:14:50,240
distributed work happening some of the

00:14:49,040 --> 00:14:52,370
problems we run into with a lot of

00:14:50,240 --> 00:14:54,370
automation platforms is that they still

00:14:52,370 --> 00:14:58,910
centralize the majority of the work

00:14:54,370 --> 00:15:00,889
which also causes scaling issues but if

00:14:58,910 --> 00:15:03,649
we distribute the work at the logic and

00:15:00,889 --> 00:15:05,750
the intelligence out to the machines

00:15:03,649 --> 00:15:08,250
which are actually being automated then

00:15:05,750 --> 00:15:11,160
that can again substantially improve

00:15:08,250 --> 00:15:12,630
our ability to scale and so all of the

00:15:11,160 --> 00:15:14,280
information all of the intelligence

00:15:12,630 --> 00:15:17,910
about how to do the automation work

00:15:14,280 --> 00:15:20,610
exists in these minions the minions are

00:15:17,910 --> 00:15:25,230
then continuously connected back up to a

00:15:20,610 --> 00:15:27,930
salt master or master cluster and then

00:15:25,230 --> 00:15:30,530
that master the work it does is limited

00:15:27,930 --> 00:15:34,140
to the coordination of those minions

00:15:30,530 --> 00:15:37,020
which again assists us in scaling out to

00:15:34,140 --> 00:15:39,660
very large scale and why we have

00:15:37,020 --> 00:15:43,020
deployments of salt which are as small

00:15:39,660 --> 00:15:45,090
as five to ten systems but as large as

00:15:43,020 --> 00:15:48,810
our largest installation right now is

00:15:45,090 --> 00:15:55,080
actually getting close to 1 million salt

00:15:48,810 --> 00:15:55,830
minions now when we so when we look at

00:15:55,080 --> 00:15:58,260
how this works

00:15:55,830 --> 00:16:01,890
the next challenge that we run into is

00:15:58,260 --> 00:16:04,500
network topology again a lot of

00:16:01,890 --> 00:16:05,960
automation systems mandate that you

00:16:04,500 --> 00:16:08,490
either need to have bi-directional

00:16:05,960 --> 00:16:12,510
communication over the network to be

00:16:08,490 --> 00:16:15,870
able to manage the end nodes or that

00:16:12,510 --> 00:16:17,960
your central point reaches out to the

00:16:15,870 --> 00:16:20,490
nodes that you're trying to manage

00:16:17,960 --> 00:16:22,940
solves approach is to make sure that we

00:16:20,490 --> 00:16:26,010
have the maximum level of topological

00:16:22,940 --> 00:16:29,880
flexibility and so the way that we do

00:16:26,010 --> 00:16:33,240
this is that the controlling master

00:16:29,880 --> 00:16:34,320
doesn't need to be aware of where any of

00:16:33,240 --> 00:16:36,270
its minions

00:16:34,320 --> 00:16:38,670
are they just need to be aware of the

00:16:36,270 --> 00:16:40,770
master and it doesn't need to be able to

00:16:38,670 --> 00:16:42,750
route to the minions the minion only

00:16:40,770 --> 00:16:46,010
needs to be able to route to the master

00:16:42,750 --> 00:16:51,810
and again this substantially simplifies

00:16:46,010 --> 00:16:54,030
the topological constraints okay so when

00:16:51,810 --> 00:16:55,770
so if I start there at the bottom with

00:16:54,030 --> 00:16:57,600
remote execution and I'll demonstrate

00:16:55,770 --> 00:17:00,180
we'll demonstrate all these things in

00:16:57,600 --> 00:17:02,010
just a few minutes when I start at the

00:17:00,180 --> 00:17:05,069
bottom with remote execution what we're

00:17:02,010 --> 00:17:07,880
looking at is that the salt master is

00:17:05,069 --> 00:17:11,130
able to send in parallel to all of these

00:17:07,880 --> 00:17:13,770
continual TCP connections which are

00:17:11,130 --> 00:17:16,470
connected concurrently to the master is

00:17:13,770 --> 00:17:19,800
able to send in parallel a tiny packet

00:17:16,470 --> 00:17:21,839
which tells the minion what to do since

00:17:19,800 --> 00:17:22,110
the minion has all the intelligence in

00:17:21,839 --> 00:17:24,929
and of

00:17:22,110 --> 00:17:26,939
self we can dramatically minimize the

00:17:24,929 --> 00:17:29,070
amount of information which needs to be

00:17:26,939 --> 00:17:30,929
sent over the wire and this is also very

00:17:29,070 --> 00:17:34,470
important when it comes to dealing with

00:17:30,929 --> 00:17:36,110
scale okay and then those minions can

00:17:34,470 --> 00:17:40,049
execute based on the remote execution

00:17:36,110 --> 00:17:42,210
pattern which they receive next when it

00:17:40,049 --> 00:17:45,390
comes to configuration configuration

00:17:42,210 --> 00:17:49,500
automation we're able to declaratively

00:17:45,390 --> 00:17:52,230
define on the master end exactly why it

00:17:49,500 --> 00:17:54,120
needs to happen to those minions or the

00:17:52,230 --> 00:17:56,130
declared state in which they need to be

00:17:54,120 --> 00:17:58,350
and then we can use there were more

00:17:56,130 --> 00:18:01,080
execution bus to tell them when to apply

00:17:58,350 --> 00:18:04,290
those states which again allows us to

00:18:01,080 --> 00:18:07,429
have an instant connection and an

00:18:04,290 --> 00:18:13,169
instant modification of those systems

00:18:07,429 --> 00:18:15,720
okay and then the hallmark here and kind

00:18:13,169 --> 00:18:16,919
of the point of the talk I'm trying to

00:18:15,720 --> 00:18:20,490
give us around the event-driven

00:18:16,919 --> 00:18:24,570
automation systems so like I was saying

00:18:20,490 --> 00:18:27,690
with robotics controls there is a model

00:18:24,570 --> 00:18:31,860
around making an event-driven automation

00:18:27,690 --> 00:18:35,309
system and that model is that we need to

00:18:31,860 --> 00:18:39,210
be able to get events or alerts from all

00:18:35,309 --> 00:18:41,850
of our controlling systems so how do we

00:18:39,210 --> 00:18:43,470
do that but we also but not only do we

00:18:41,850 --> 00:18:45,720
need to get those events those events

00:18:43,470 --> 00:18:47,940
need to be processed and once those

00:18:45,720 --> 00:18:50,010
events are processed the system

00:18:47,940 --> 00:18:53,669
processing it needs to be able to enact

00:18:50,010 --> 00:18:56,610
real change in real management on those

00:18:53,669 --> 00:18:58,350
subsequent systems and so this is where

00:18:56,610 --> 00:19:03,600
the concept of event-driven automation

00:18:58,350 --> 00:19:06,770
comes into play so that means that we

00:19:03,600 --> 00:19:09,419
need to act whenever a system is ready

00:19:06,770 --> 00:19:10,799
the defined rule set that we're dealing

00:19:09,419 --> 00:19:12,660
with needs to be capable of being

00:19:10,799 --> 00:19:16,260
declarative okay

00:19:12,660 --> 00:19:17,970
and we need to converge on these

00:19:16,260 --> 00:19:21,030
concepts of monitoring and management

00:19:17,970 --> 00:19:22,860
and so on all of the minions that we

00:19:21,030 --> 00:19:26,000
have inside of salt there's a system

00:19:22,860 --> 00:19:28,830
called beacons and the salt event bus

00:19:26,000 --> 00:19:32,220
everything the salt does gets converted

00:19:28,830 --> 00:19:35,080
into an event and the beacon system

00:19:32,220 --> 00:19:37,660
inside of salt allows us to absorb

00:19:35,080 --> 00:19:40,780
from anything that is happening on that

00:19:37,660 --> 00:19:44,770
system and maintained itself being

00:19:40,780 --> 00:19:46,840
extremely open-ended so instead of

00:19:44,770 --> 00:19:49,600
saying I'm generating events for a very

00:19:46,840 --> 00:19:51,400
specific automation purpose we're able

00:19:49,600 --> 00:19:53,170
to say I'm generating events for

00:19:51,400 --> 00:19:59,230
whatever I want to generate events for

00:19:53,170 --> 00:20:01,240
okay all right and so then if we look at

00:19:59,230 --> 00:20:03,310
this event driven automation it needs a

00:20:01,240 --> 00:20:06,870
number of building blocks and those

00:20:03,310 --> 00:20:10,320
building blocks are very much so those

00:20:06,870 --> 00:20:13,060
cornerstone components of what salt is

00:20:10,320 --> 00:20:15,750
so we need open-ended remote execution

00:20:13,060 --> 00:20:19,510
so that we've got the ability to control

00:20:15,750 --> 00:20:22,480
thermal systems that we need to react to

00:20:19,510 --> 00:20:25,330
and to manipulate we need the item

00:20:22,480 --> 00:20:27,570
potent or convergence routines that

00:20:25,330 --> 00:20:30,430
exist inside of configuration management

00:20:27,570 --> 00:20:32,950
so that reapplication of certain

00:20:30,430 --> 00:20:37,240
routines doesn't modify the system in

00:20:32,950 --> 00:20:38,560
bad ways event generation is important I

00:20:37,240 --> 00:20:40,480
just mentioned that with respect to

00:20:38,560 --> 00:20:43,330
salts beacon system but also deep

00:20:40,480 --> 00:20:45,640
integration we need to be able to talk

00:20:43,330 --> 00:20:48,570
to virtually any type of system that's

00:20:45,640 --> 00:20:51,850
out there one of the demonstrations that

00:20:48,570 --> 00:20:53,980
was done last year at Sousa Kahn was

00:20:51,850 --> 00:20:57,100
using salt to integrate with and control

00:20:53,980 --> 00:20:59,620
light bulbs and and the demonstration

00:20:57,100 --> 00:21:04,720
we're going to do today has salt

00:20:59,620 --> 00:21:08,320
integrating with text messaging using

00:21:04,720 --> 00:21:09,820
the Twilley Twilio api's okay and so

00:21:08,320 --> 00:21:11,950
that deep integration is important

00:21:09,820 --> 00:21:15,550
because the automation systems need to

00:21:11,950 --> 00:21:18,190
read from and manipulate diverse sets of

00:21:15,550 --> 00:21:21,220
systems and converge on decisions

00:21:18,190 --> 00:21:24,190
between diverse sets of systems so that

00:21:21,220 --> 00:21:27,990
what is happening with respect to a

00:21:24,190 --> 00:21:31,240
thermal gauge can be used to define

00:21:27,990 --> 00:21:33,490
potentially how server equipment is

00:21:31,240 --> 00:21:35,440
operating and likewise with storage and

00:21:33,490 --> 00:21:37,060
networking and converging those concepts

00:21:35,440 --> 00:21:39,610
together all right

00:21:37,060 --> 00:21:43,440
so the way in which this is accomplished

00:21:39,610 --> 00:21:46,800
is through a concept called

00:21:43,440 --> 00:21:49,380
through a concept called a reactor and

00:21:46,800 --> 00:21:52,040
so we have all of these events that are

00:21:49,380 --> 00:21:56,520
being generated and they are then

00:21:52,040 --> 00:21:59,910
ingested back into this reactor system

00:21:56,520 --> 00:22:03,350
that exists on the salt master okay now

00:21:59,910 --> 00:22:07,050
in salt we have defined two types of

00:22:03,350 --> 00:22:09,570
reactors there is the single event

00:22:07,050 --> 00:22:12,150
reactor the idea here is that it waits

00:22:09,570 --> 00:22:14,040
for a very specific event to come in and

00:22:12,150 --> 00:22:16,770
then it reacts to that specific event

00:22:14,040 --> 00:22:18,540
the benefits here is that it's very it's

00:22:16,770 --> 00:22:21,660
a very simple reactor it's very

00:22:18,540 --> 00:22:26,940
high-performance it's very easy to

00:22:21,660 --> 00:22:29,040
understand very easy to learn now then

00:22:26,940 --> 00:22:31,410
and it makes a lot of the simple use

00:22:29,040 --> 00:22:35,250
cases of event-driven automation also

00:22:31,410 --> 00:22:37,350
very very simple now the other type of

00:22:35,250 --> 00:22:40,200
reactor which we define is an aggregate

00:22:37,350 --> 00:22:43,560
event reactor now an aggregate event

00:22:40,200 --> 00:22:45,180
react reactor is more complicated and a

00:22:43,560 --> 00:22:47,340
little more complicated to understand

00:22:45,180 --> 00:22:51,240
but allows you to define substantially

00:22:47,340 --> 00:22:53,100
more complex rulesets so inside of salt

00:22:51,240 --> 00:22:55,080
these are expressed through these two

00:22:53,100 --> 00:22:59,310
reactors the original salt reactor which

00:22:55,080 --> 00:23:03,120
we introduced in 2013 and is extremely

00:22:59,310 --> 00:23:05,970
hardened used the world round is used to

00:23:03,120 --> 00:23:11,160
manage reactions and events spanning

00:23:05,970 --> 00:23:13,740
again tens of thousands of servers so

00:23:11,160 --> 00:23:15,570
very very hardened and then a brand new

00:23:13,740 --> 00:23:17,310
reactor which is the aggregate reactor I

00:23:15,570 --> 00:23:18,780
spent a little over a year and a half

00:23:17,310 --> 00:23:21,420
doing research trying to figure out how

00:23:18,780 --> 00:23:22,770
to build this that we very recently

00:23:21,420 --> 00:23:25,860
introduced albeit it's still

00:23:22,770 --> 00:23:29,790
experimental called the thorium reactor

00:23:25,860 --> 00:23:33,050
and this exposes this flow programming

00:23:29,790 --> 00:23:35,490
paradigm to a venturi driven reactions

00:23:33,050 --> 00:23:38,220
even in the demo that we're doing today

00:23:35,490 --> 00:23:40,380
we're still going to be using the single

00:23:38,220 --> 00:23:43,620
event reactor just because thorium is so

00:23:40,380 --> 00:23:44,910
incredibly new but the benefits are the

00:23:43,620 --> 00:23:48,690
things that we're excited about with

00:23:44,910 --> 00:23:50,580
thorium have to do with the fact that it

00:23:48,690 --> 00:23:53,100
is made to be able to aggregate large

00:23:50,580 --> 00:23:55,670
numbers of events and make extremely

00:23:53,100 --> 00:23:58,250
intelligent decisions about what to

00:23:55,670 --> 00:23:59,990
to some of the other things that's

00:23:58,250 --> 00:24:04,100
really interesting about thorium is that

00:23:59,990 --> 00:24:07,250
it's a event reactor system which is

00:24:04,100 --> 00:24:09,890
actually built on salts configuration

00:24:07,250 --> 00:24:14,780
management engine so it accomplishes the

00:24:09,890 --> 00:24:17,900
item potent and linear scheduling tasks

00:24:14,780 --> 00:24:20,690
that it does because it takes advantage

00:24:17,900 --> 00:24:22,640
of the existing salt configuration

00:24:20,690 --> 00:24:25,520
management engine which is in and of

00:24:22,640 --> 00:24:31,070
itself extremely hardened and widely

00:24:25,520 --> 00:24:33,610
used okay and so then this brings

00:24:31,070 --> 00:24:36,170
together this idea or this model of

00:24:33,610 --> 00:24:38,000
event-driven automation with

00:24:36,170 --> 00:24:40,130
event-driven automation we don't have to

00:24:38,000 --> 00:24:43,790
wait for a linear orchestration to pan

00:24:40,130 --> 00:24:48,800
out across large sets of servers we

00:24:43,790 --> 00:24:50,420
don't have to stop linear orchestrations

00:24:48,800 --> 00:24:53,180
over and over again because we can have

00:24:50,420 --> 00:24:55,700
item potent routines happening inside of

00:24:53,180 --> 00:24:58,450
those events and it also allows us again

00:24:55,700 --> 00:25:02,120
to converge on a vast array of

00:24:58,450 --> 00:25:05,090
individual components so that again we

00:25:02,120 --> 00:25:07,640
can take information from anything or

00:25:05,090 --> 00:25:10,580
any type of system which could be

00:25:07,640 --> 00:25:12,470
communicated with and then converge that

00:25:10,580 --> 00:25:15,260
information into a single decision

00:25:12,470 --> 00:25:20,950
making matrix so that all of those

00:25:15,260 --> 00:25:23,270
integrations come together all right so

00:25:20,950 --> 00:25:26,270
I'm gonna mention a couple of use cases

00:25:23,270 --> 00:25:28,100
that I'm gonna ask and as Dave Boucher

00:25:26,270 --> 00:25:31,100
to come up and he's gonna give us a

00:25:28,100 --> 00:25:33,320
demonstration but a couple of the use

00:25:31,100 --> 00:25:36,490
cases that we've got here is some of our

00:25:33,320 --> 00:25:38,900
larger installations is LinkedIn

00:25:36,490 --> 00:25:41,480
LinkedIn has been using the event-driven

00:25:38,900 --> 00:25:42,350
automation platform system for quite a

00:25:41,480 --> 00:25:44,510
few years now

00:25:42,350 --> 00:25:45,700
Danah make code rollouts to automate

00:25:44,510 --> 00:25:49,730
continuous integration and continuous

00:25:45,700 --> 00:25:53,030
deployment integrations and LinkedIn has

00:25:49,730 --> 00:25:54,560
also been used using it for the

00:25:53,030 --> 00:25:57,980
filtering and management of incoming

00:25:54,560 --> 00:25:59,840
data so that all of the information is

00:25:57,980 --> 00:26:03,030
happening in there in their data center

00:25:59,840 --> 00:26:07,790
is filtered using the reactor system

00:26:03,030 --> 00:26:12,750
and then into it which is actually I'm

00:26:07,790 --> 00:26:15,240
into it's a very American company they

00:26:12,750 --> 00:26:16,440
do they do American tax processing so

00:26:15,240 --> 00:26:20,970
your prize so you probably haven't heard

00:26:16,440 --> 00:26:23,990
of them but so they're they're a very

00:26:20,970 --> 00:26:26,400
very large organization in the US and

00:26:23,990 --> 00:26:28,320
similarly they're using of intervene

00:26:26,400 --> 00:26:31,890
automation to deploy multiple stage

00:26:28,320 --> 00:26:33,720
automation as well as continuous

00:26:31,890 --> 00:26:35,940
integration continuous deployment and

00:26:33,720 --> 00:26:37,890
we've got hundreds and arguably

00:26:35,940 --> 00:26:40,830
thousands of infrastructures making

00:26:37,890 --> 00:26:46,140
heavy use of the song reactor

00:26:40,830 --> 00:26:48,780
today let's see and so again this is a

00:26:46,140 --> 00:26:51,030
this is a model which diverges from the

00:26:48,780 --> 00:26:53,730
traditional models of orchestration and

00:26:51,030 --> 00:26:57,030
automation it's a model that allows us

00:26:53,730 --> 00:26:59,100
to be substantially more scalable allows

00:26:57,030 --> 00:27:02,670
us to function in a faster way and

00:26:59,100 --> 00:27:05,370
allows us to have a level of convergence

00:27:02,670 --> 00:27:08,910
and a distributed logic which otherwise

00:27:05,370 --> 00:27:15,150
we can't really attain using a lot of

00:27:08,910 --> 00:27:16,980
the traditional methodologies ok so Dave

00:27:15,150 --> 00:27:20,760
is going to give us a fantastic

00:27:16,980 --> 00:27:23,030
demonstration which I promise how it

00:27:20,760 --> 00:27:23,030
works

00:27:46,190 --> 00:27:53,640
okay I'm a little excited to be here so

00:27:49,740 --> 00:27:56,010
this is the rubber hits the road we're

00:27:53,640 --> 00:27:58,620
gonna do some live this is not a canned

00:27:56,010 --> 00:28:02,010
demo I tested it this morning my hotel

00:27:58,620 --> 00:28:04,290
room or great got here it was broken and

00:28:02,010 --> 00:28:07,640
it realized you know it was a networking

00:28:04,290 --> 00:28:10,560
issue so no we're good now supposedly so

00:28:07,640 --> 00:28:13,800
so when I first found out about salt I

00:28:10,560 --> 00:28:16,470
was at a Python user group in Utah and

00:28:13,800 --> 00:28:19,680
met Tom and he was talking about this

00:28:16,470 --> 00:28:23,640
new project he was building out to

00:28:19,680 --> 00:28:26,120
manage infrastructure and it's Center

00:28:23,640 --> 00:28:30,350
really exciting and so I got involved

00:28:26,120 --> 00:28:34,800
helping port the sawed minion to Windows

00:28:30,350 --> 00:28:36,690
fixing bugs I was like in the original

00:28:34,800 --> 00:28:38,100
IRC channel I think I was like the third

00:28:36,690 --> 00:28:41,370
person to join or something like that

00:28:38,100 --> 00:28:45,470
so I've seen salt kind of go from very

00:28:41,370 --> 00:28:47,400
early early stages to where it is now

00:28:45,470 --> 00:28:49,080
and one of the things that got me most

00:28:47,400 --> 00:28:51,440
like society about salt was the

00:28:49,080 --> 00:28:54,930
immediacy of

00:28:51,440 --> 00:28:57,300
interacting with your servers now

00:28:54,930 --> 00:28:59,610
instead of running report and getting a

00:28:57,300 --> 00:29:01,290
report a few minutes later or manually

00:28:59,610 --> 00:29:02,970
logging into a bunch of servers and

00:29:01,290 --> 00:29:06,450
checking this space and all stuff I

00:29:02,970 --> 00:29:07,830
could do that from one machine give all

00:29:06,450 --> 00:29:11,160
that data and then do what I want with

00:29:07,830 --> 00:29:16,320
that so right here we have a salt master

00:29:11,160 --> 00:29:20,880
with several minions so we're gonna run

00:29:16,320 --> 00:29:22,860
a little command here that will tell us

00:29:20,880 --> 00:29:24,120
this case I have four million minions

00:29:22,860 --> 00:29:28,460
here

00:29:24,120 --> 00:29:33,780
I had a sent to us six Susa 13.2 and

00:29:28,460 --> 00:29:36,720
trusty Buddha trusty server and what I

00:29:33,780 --> 00:29:38,610
just ran there was called an execution

00:29:36,720 --> 00:29:41,940
module so there's a there's actually a

00:29:38,610 --> 00:29:43,290
test by familiar with Python and there's

00:29:41,940 --> 00:29:48,020
a ping function in there that just

00:29:43,290 --> 00:29:51,600
returns true the salt ships with a whole

00:29:48,020 --> 00:29:53,100
huge library of these execution modules

00:29:51,600 --> 00:29:56,099
that do everything from managed file

00:29:53,100 --> 00:29:59,830
systems managing your databases

00:29:56,099 --> 00:30:03,519
installing configuring software managing

00:29:59,830 --> 00:30:06,999
your Ruby installation - I mean just you

00:30:03,519 --> 00:30:08,549
know sky's the limit docker Alexi just

00:30:06,999 --> 00:30:12,460
you know just all kinds of things that

00:30:08,549 --> 00:30:13,960
that you can use this test module has

00:30:12,460 --> 00:30:15,789
several things we can do like I can see

00:30:13,960 --> 00:30:18,549
what version of salt they're all running

00:30:15,789 --> 00:30:22,559
so you can see here how is the size does

00:30:18,549 --> 00:30:22,559
that can everybody see that okay

00:30:22,739 --> 00:30:27,429
so you can see you know all the versions

00:30:24,849 --> 00:30:29,679
of salt are running one thing is

00:30:27,429 --> 00:30:32,559
fantastic is we have a concept of an

00:30:29,679 --> 00:30:34,029
output or so you could change our view

00:30:32,559 --> 00:30:35,739
so we here we have a kind of a human

00:30:34,029 --> 00:30:38,469
readable view but if I want to get that

00:30:35,739 --> 00:30:40,779
in Jason so I can use that in some of

00:30:38,469 --> 00:30:42,190
some of the application I can say hey I

00:30:40,779 --> 00:30:44,109
want this in Jason that I can pipe that

00:30:42,190 --> 00:30:49,049
to another application or go file to be

00:30:44,109 --> 00:30:49,049
used elsewhere it's really handy so

00:30:49,289 --> 00:30:53,759
there's some other functions like we

00:30:51,460 --> 00:30:59,979
have a package module where we can do

00:30:53,759 --> 00:31:01,839
for example list packages so there's

00:30:59,979 --> 00:31:03,489
every piece of software on all four of

00:31:01,839 --> 00:31:06,159
those servers and the version that they

00:31:03,489 --> 00:31:09,249
have so if you need to make sure you

00:31:06,159 --> 00:31:10,719
have a certain version of software I can

00:31:09,249 --> 00:31:12,070
check what that is right now I don't

00:31:10,719 --> 00:31:14,559
have to check a database or a

00:31:12,070 --> 00:31:15,729
spreadsheet or assume we should have a

00:31:14,559 --> 00:31:19,529
certain version I can check and see

00:31:15,729 --> 00:31:19,529
what's out there right this moment

00:31:20,219 --> 00:31:28,059
there's a disk usage here there's all of

00:31:25,629 --> 00:31:30,489
the status of all the file systems on

00:31:28,059 --> 00:31:33,629
all my servers so I can check what their

00:31:30,489 --> 00:31:35,919
current status is right in his moment

00:31:33,629 --> 00:31:38,169
there's a whole you know ton of things

00:31:35,919 --> 00:31:40,119
now if we notice we have three different

00:31:38,169 --> 00:31:41,589
operating systems we're running ass I've

00:31:40,119 --> 00:31:43,599
run that command desk so just that usage

00:31:41,589 --> 00:31:49,779
is cross-platform that'll work on

00:31:43,599 --> 00:31:54,070
Windows OSX all the Linux is you can

00:31:49,779 --> 00:31:56,229
imagine in some of the older Eunice's

00:31:54,070 --> 00:31:57,909
and things like that so it's really

00:31:56,229 --> 00:32:00,159
powerful in that way it's very cost

00:31:57,909 --> 00:32:03,029
platform included things like installing

00:32:00,159 --> 00:32:03,029
packages so

00:32:06,410 --> 00:32:11,850
so here I'm gonna see what our OSS are

00:32:08,820 --> 00:32:17,610
so we have to move to servers openSUSE

00:32:11,850 --> 00:32:46,860
and sent to West so I can do a for

00:32:17,610 --> 00:32:50,790
example okay so if I have I guess all

00:32:46,860 --> 00:32:51,960
Pat you two on my Boudreau server let's

00:32:50,790 --> 00:32:57,320
come back and tell him exactly what

00:32:51,960 --> 00:32:59,370
packages were installed and there we go

00:32:57,320 --> 00:33:04,710
it's now patches installed on that

00:32:59,370 --> 00:33:10,580
server and if we use the network module

00:33:04,710 --> 00:33:10,580
I can get the IP address that server

00:33:16,340 --> 00:33:24,119
there's the default Apache web page

00:33:20,340 --> 00:33:29,580
there so again this is all live we are

00:33:24,119 --> 00:33:34,649
doing things really you know quickly and

00:33:29,580 --> 00:33:37,649
I can remove that as well okay so that's

00:33:34,649 --> 00:33:40,350
an execution module now we may not want

00:33:37,649 --> 00:33:43,740
to do everything like this

00:33:40,350 --> 00:33:47,490
live on a command line humans are you

00:33:43,740 --> 00:33:48,899
know obviously notorious for it's going

00:33:47,490 --> 00:33:51,539
to see the Apaches no longer serving

00:33:48,899 --> 00:33:54,289
there so we have a thing a thing called

00:33:51,539 --> 00:33:56,399
assault State it allows us to faithfully

00:33:54,289 --> 00:33:59,399
determine what should be installed or

00:33:56,399 --> 00:34:03,389
how we're going to manage our servers so

00:33:59,399 --> 00:34:11,399
if we go to our defaults location for

00:34:03,389 --> 00:34:14,940
our assault States I'm going to create a

00:34:11,399 --> 00:34:19,440
new assault State that will install

00:34:14,940 --> 00:34:24,000
Apache so we're going to put a package

00:34:19,440 --> 00:34:31,409
name I got installed now this is a

00:34:24,000 --> 00:34:35,809
stateful way of managing it so let's say

00:34:31,409 --> 00:34:35,809
I had the wrong package name

00:34:48,900 --> 00:35:01,600
okay it's not I'm going to run this

00:34:57,850 --> 00:35:03,820
Apache simple and it's going to come

00:35:01,600 --> 00:35:06,220
back with an error saying that unable to

00:35:03,820 --> 00:35:13,680
locate the package Apache two point

00:35:06,220 --> 00:35:17,470
three so I'm coming here remove this and

00:35:13,680 --> 00:35:22,270
I'm gonna run this in test mode it's

00:35:17,470 --> 00:35:23,440
also going to go out and say okay the

00:35:22,270 --> 00:35:23,950
following packages would have been

00:35:23,440 --> 00:35:26,020
installed

00:35:23,950 --> 00:35:36,910
Pacha tube would have been installed for

00:35:26,020 --> 00:35:43,840
us so let's go ahead and run that okay

00:35:36,910 --> 00:35:47,350
so that worked so again it's a really

00:35:43,840 --> 00:35:49,270
simple you know patch tube is installed

00:35:47,350 --> 00:35:51,660
you can complicate things a little bit

00:35:49,270 --> 00:35:55,290
so for example the example have here

00:35:51,660 --> 00:36:03,460
we're going to manage the package and

00:35:55,290 --> 00:36:05,290
the in the we have two variables there

00:36:03,460 --> 00:36:07,390
we're gonna get the path the package

00:36:05,290 --> 00:36:10,540
name so this makes this state

00:36:07,390 --> 00:36:11,740
cross-platform so we can actually tell

00:36:10,540 --> 00:36:14,740
us that uniform of boomtube we're gonna

00:36:11,740 --> 00:36:18,730
use Apache two if we're on Red Hat based

00:36:14,740 --> 00:36:21,610
system we use HTTP HTTP D and you can

00:36:18,730 --> 00:36:23,740
determine you can specify for each OS

00:36:21,610 --> 00:36:26,020
what the package name should be we're

00:36:23,740 --> 00:36:26,620
also going to manage the Apache service

00:36:26,020 --> 00:36:28,330
as well

00:36:26,620 --> 00:36:30,550
with this state so again this is

00:36:28,330 --> 00:36:33,400
stateful if the state is already there

00:36:30,550 --> 00:36:34,660
or if the package is already there salt

00:36:33,400 --> 00:36:37,870
will not do anything so I'll run the

00:36:34,660 --> 00:36:40,690
state again salt checked and they said

00:36:37,870 --> 00:36:42,100
oh the package has already been

00:36:40,690 --> 00:36:44,350
installed we're not gonna do anything at

00:36:42,100 --> 00:36:46,060
this point so that way you know you're

00:36:44,350 --> 00:36:48,660
not going to modify anything unless it's

00:36:46,060 --> 00:36:48,660
absolutely necessary

00:36:49,370 --> 00:37:00,560
okay so again this is an example of an

00:36:57,470 --> 00:37:03,260
execution module the the text file that

00:37:00,560 --> 00:37:07,220
we just saw was example of us all state

00:37:03,260 --> 00:37:10,490
and this is kind of the typical way you

00:37:07,220 --> 00:37:11,870
would manage your servers for the master

00:37:10,490 --> 00:37:14,720
with your minions we could also do this

00:37:11,870 --> 00:37:16,100
over SSH and also you could also do this

00:37:14,720 --> 00:37:20,680
without a master at all everything can

00:37:16,100 --> 00:37:20,680
have them locally just on on a minion

00:37:21,640 --> 00:37:26,920
alright so now that we have this really

00:37:23,540 --> 00:37:28,880
fast control over all of our servers

00:37:26,920 --> 00:37:31,130
there's some really interesting things

00:37:28,880 --> 00:37:33,710
we can do with that so you know again

00:37:31,130 --> 00:37:37,400
here you can see that this running this

00:37:33,710 --> 00:37:40,820
command you know took less than a second

00:37:37,400 --> 00:37:42,830
on on four servers on five thousand

00:37:40,820 --> 00:37:46,430
servers it take a few seconds and mostly

00:37:42,830 --> 00:37:49,490
that's displaying all the return data on

00:37:46,430 --> 00:37:51,380
your screen in your terminal so we have

00:37:49,490 --> 00:37:53,630
there's both fast communication between

00:37:51,380 --> 00:37:56,240
our servers and our minions they can do

00:37:53,630 --> 00:37:59,540
things with that connection so Tom

00:37:56,240 --> 00:38:01,250
mentioned beacons so beacons is a little

00:37:59,540 --> 00:38:05,660
processor runs on your minion on a

00:38:01,250 --> 00:38:08,150
server that watches something so we have

00:38:05,660 --> 00:38:09,830
beacons that will watch leaves I

00:38:08,150 --> 00:38:12,560
notified I watch a file or a directory

00:38:09,830 --> 00:38:14,360
for changes or additions of files you

00:38:12,560 --> 00:38:17,810
have a service beacon that'll watch

00:38:14,360 --> 00:38:20,390
demons that are running have demons and

00:38:17,810 --> 00:38:25,370
watch ssh logins there's a whole variety

00:38:20,390 --> 00:38:30,580
of them you can watch output of PS whole

00:38:25,370 --> 00:38:33,260
variety of things and when that beacon

00:38:30,580 --> 00:38:35,420
notices a change of some type then it'll

00:38:33,260 --> 00:38:36,890
send it in the vents on solves event bus

00:38:35,420 --> 00:38:38,840
so between the millions of the master

00:38:36,890 --> 00:38:41,860
there's an event bus where events get

00:38:38,840 --> 00:38:41,860
sent up to the master and

00:38:42,520 --> 00:38:46,850
it's kind of dumb in that it doesn't you

00:38:45,560 --> 00:38:49,250
know house really there's not a lot of

00:38:46,850 --> 00:38:50,450
intelligence it just sees whatever it

00:38:49,250 --> 00:38:54,350
watches whatever you're telling it to

00:38:50,450 --> 00:38:57,860
watch and then sends an event then on

00:38:54,350 --> 00:39:00,410
the master or on the minion you have a

00:38:57,860 --> 00:39:02,450
thing called a reactor that will watch

00:39:00,410 --> 00:39:04,430
that event bus and when it sees a

00:39:02,450 --> 00:39:06,110
specific event that you care about it

00:39:04,430 --> 00:39:08,150
will do something and that something

00:39:06,110 --> 00:39:13,130
could be anything that's all can do so

00:39:08,150 --> 00:39:16,970
see if you see an event that your maybe

00:39:13,130 --> 00:39:19,250
your CPU usage passes a certain

00:39:16,970 --> 00:39:20,990
threshold then maybe that means we need

00:39:19,250 --> 00:39:23,810
to spin up another VM or two and add

00:39:20,990 --> 00:39:25,640
that to the load balancer or maybe we

00:39:23,810 --> 00:39:27,560
need to restart some services or maybe

00:39:25,640 --> 00:39:29,360
send a notification to some notification

00:39:27,560 --> 00:39:31,160
service to be you know really anything

00:39:29,360 --> 00:39:36,410
this guy's the limit anything Saul can

00:39:31,160 --> 00:39:40,010
do salt has a REST API as well that

00:39:36,410 --> 00:39:42,970
allows you to set up a foundation for a

00:39:40,010 --> 00:39:45,950
user to send rest commands to either

00:39:42,970 --> 00:39:49,550
execute salt commands or pull data from

00:39:45,950 --> 00:39:51,770
that as part of that there is a you can

00:39:49,550 --> 00:39:53,440
you can actually stream that event the

00:39:51,770 --> 00:39:56,330
event stream that's coming through and

00:39:53,440 --> 00:39:59,270
and do something with that so the demo I

00:39:56,330 --> 00:40:02,780
have today we're going to show two

00:39:59,270 --> 00:40:04,160
different beacons one beacon is a the I

00:40:02,780 --> 00:40:08,090
notified begins we're gonna watch a

00:40:04,160 --> 00:40:10,340
directory and a file and also we're

00:40:08,090 --> 00:40:15,500
going to use the Tulio text message

00:40:10,340 --> 00:40:21,710
beacon to watch a an event bus and the

00:40:15,500 --> 00:40:25,120
message queue on Twilio so let's look

00:40:21,710 --> 00:40:25,120
look at that configuration looks like

00:40:29,620 --> 00:40:36,260
okay so here's our beacons section

00:40:33,170 --> 00:40:41,390
remember I notified beacon we're going

00:40:36,260 --> 00:40:45,980
to look for all messages or changes to

00:40:41,390 --> 00:40:48,950
this / slurve / blog txt then we're

00:40:45,980 --> 00:40:52,460
going to look for we're gonna mask off

00:40:48,950 --> 00:40:56,700
these clothes right items for the

00:40:52,460 --> 00:41:00,140
directory of / server / testing

00:40:56,700 --> 00:41:00,140
and we're going to do this recursively

00:41:00,530 --> 00:41:05,940
we're also going to set up our Tullio

00:41:03,260 --> 00:41:08,280
account information so we need our

00:41:05,940 --> 00:41:10,710
account sitter and authentication token

00:41:08,280 --> 00:41:12,510
here and then our number and then the

00:41:10,710 --> 00:41:30,180
interval that we're going to pull for

00:41:12,510 --> 00:41:33,030
that queue if I okay so now in this top

00:41:30,180 --> 00:41:49,830
terminal we're going to watch the event

00:41:33,030 --> 00:41:54,270
bus and down here if I so you can see

00:41:49,830 --> 00:41:55,770
the the event bus received an event

00:41:54,270 --> 00:41:58,590
saying there was a file that has a

00:41:55,770 --> 00:42:08,190
change of in clothes right and here's

00:41:58,590 --> 00:42:11,850
the path to that text file okay so here

00:42:08,190 --> 00:42:14,430
is a web page that's actually being it's

00:42:11,850 --> 00:42:18,060
a one it's a single page JavaScript

00:42:14,430 --> 00:42:22,080
application that salt the salt API is

00:42:18,060 --> 00:42:23,760
actually hosting for me locally and what

00:42:22,080 --> 00:42:29,150
it's doing is in the background it's

00:42:23,760 --> 00:42:31,650
listening to that that event bus and

00:42:29,150 --> 00:42:39,240
whenever it sees it's going to filter

00:42:31,650 --> 00:42:44,970
through whenever it sees a an event that

00:42:39,240 --> 00:42:48,660
matches some criteria that I've set then

00:42:44,970 --> 00:42:51,810
it is going to output information about

00:42:48,660 --> 00:42:57,920
that event to our web page here so you

00:42:51,810 --> 00:42:57,920
can see when I modify

00:43:02,609 --> 00:43:06,670
there's text fields we're just getting

00:43:05,289 --> 00:43:10,779
these events and then we're displaying

00:43:06,670 --> 00:43:16,109
these on this application so so that's

00:43:10,779 --> 00:43:16,109
the again the inotify

00:43:19,469 --> 00:43:24,459
I'm just gonna see those there now for

00:43:23,200 --> 00:43:27,339
the Twilio one we have a phone number

00:43:24,459 --> 00:43:28,029
here and if you can keep it g-rated

00:43:27,339 --> 00:43:29,890
please

00:43:28,029 --> 00:43:32,109
I guess that D rate is probably a u.s.

00:43:29,890 --> 00:43:35,319
thing so keep it suitable for children

00:43:32,109 --> 00:43:47,619
please you can send a text to this phone

00:43:35,319 --> 00:43:51,099
number here in the US and every five

00:43:47,619 --> 00:43:53,319
seconds that beacon is checking that

00:43:51,099 --> 00:43:55,329
text message queue and then sending an

00:43:53,319 --> 00:43:58,839
event on the event bus and then the salt

00:43:55,329 --> 00:44:02,190
API is watching the divided bus without

00:43:58,839 --> 00:44:02,190
putting things there

00:44:09,410 --> 00:44:14,519
this will also do MMS picture messaging

00:44:14,009 --> 00:44:22,619
as well

00:44:14,519 --> 00:44:27,390
see this is able to go through thank you

00:44:22,619 --> 00:44:30,960
somebody has sent that so this is kind

00:44:27,390 --> 00:44:32,099
of a ridiculous thing you will probably

00:44:30,960 --> 00:44:34,589
you wouldn't do this exactly in

00:44:32,099 --> 00:44:37,440
production but I put this demo together

00:44:34,589 --> 00:44:40,589
because to me it kind of shows you that

00:44:37,440 --> 00:44:44,339
you can build what you need with salt

00:44:40,589 --> 00:44:46,200
salt gives you a whole bunch of tools

00:44:44,339 --> 00:44:49,410
that you could put together to build a

00:44:46,200 --> 00:44:52,319
vector which you need salt tries very

00:44:49,410 --> 00:44:57,450
hard not to force you to modify your

00:44:52,319 --> 00:44:57,900
infrastructure to work just like salt

00:44:57,450 --> 00:45:01,200
needs you

00:44:57,900 --> 00:45:02,190
salt tries to do things in the way that

00:45:01,200 --> 00:45:03,720
you need them to happen because

00:45:02,190 --> 00:45:09,029
everybody has their own their own unique

00:45:03,720 --> 00:45:10,289
infrastructures and this allows you to

00:45:09,029 --> 00:45:13,739
build you know exactly what you need

00:45:10,289 --> 00:45:17,549
like I said so again this is a

00:45:13,739 --> 00:45:20,970
combination of beacons salt event bus

00:45:17,549 --> 00:45:26,549
and also salt rest EAP

00:45:20,970 --> 00:45:28,230
rest API here please don't send any

00:45:26,549 --> 00:45:31,220
JavaScript I'm not sure if this is all

00:45:28,230 --> 00:45:31,220
sanitized really well

00:45:31,420 --> 00:45:42,500
that could be bad so I sent the picture

00:45:38,780 --> 00:45:50,390
text but apparently it's taking a while

00:45:42,500 --> 00:45:52,370
to go through but suicide pay this extra

00:45:50,390 --> 00:45:59,330
to have these little advertisements are

00:45:52,370 --> 00:46:02,240
sending up here self okay so you can see

00:45:59,330 --> 00:46:03,980
here in this output here you can see

00:46:02,240 --> 00:46:06,320
this is the all-day events coming

00:46:03,980 --> 00:46:07,610
through again this is all just data just

00:46:06,320 --> 00:46:10,600
come across this event bus and you can

00:46:07,610 --> 00:46:18,290
do whatever you want with this so

00:46:10,600 --> 00:46:19,340
usually the beacons we've people

00:46:18,290 --> 00:46:20,930
invincibility interests and things so

00:46:19,340 --> 00:46:24,700
has somebody had this application that

00:46:20,930 --> 00:46:24,700
purchased from some private vendor

00:46:26,619 --> 00:46:31,180
there's no database involved with this

00:46:33,730 --> 00:46:37,190
but they had this application that would

00:46:35,839 --> 00:46:38,990
just chew up RAM

00:46:37,190 --> 00:46:40,280
and over the course of the week roughly

00:46:38,990 --> 00:46:41,900
once a week they had you'll actually go

00:46:40,280 --> 00:46:45,589
and like a restart this cluster of

00:46:41,900 --> 00:46:47,089
services and and the vendor knew about

00:46:45,589 --> 00:46:48,859
the problem and it was just going to be

00:46:47,089 --> 00:46:51,290
months before it was fixed so they were

00:46:48,859 --> 00:46:55,760
able to set up a beacon that would watch

00:46:51,290 --> 00:46:59,359
the RAM usage of this service and once

00:46:55,760 --> 00:47:00,859
it reached a certain threshold the

00:46:59,359 --> 00:47:03,050
beacon was send an event something saw

00:47:00,859 --> 00:47:04,849
master saying hey you know we we've

00:47:03,050 --> 00:47:07,250
passed this threshold and then this all

00:47:04,849 --> 00:47:09,140
master knew okay when this happens first

00:47:07,250 --> 00:47:11,300
we're going to send a notification to

00:47:09,140 --> 00:47:13,130
our logging server and to our

00:47:11,300 --> 00:47:15,319
notification server so people humans

00:47:13,130 --> 00:47:17,180
know about this and then we're gonna go

00:47:15,319 --> 00:47:19,609
through this cluster of servers and one

00:47:17,180 --> 00:47:26,150
by one restart this specific service to

00:47:19,609 --> 00:47:29,990
get rid of this this this service there

00:47:26,150 --> 00:47:33,740
so anyway these are some very powerful

00:47:29,990 --> 00:47:37,760
tools that solve allow you to make your

00:47:33,740 --> 00:47:41,900
infrastructure just sing and work really

00:47:37,760 --> 00:48:02,390
well so I think now we're going to pass

00:47:41,900 --> 00:48:06,830
on the time to Tom and Joe okay yeah

00:48:02,390 --> 00:48:08,540
pass the torch over to somebody that

00:48:06,830 --> 00:48:12,490
many of you already know and love and

00:48:08,540 --> 00:48:12,490
that's Joe Werner Thanks

00:48:15,190 --> 00:48:21,610
yeah

00:48:17,080 --> 00:48:21,610
good morning also on my part

00:48:22,270 --> 00:48:29,600
we've got a pretty good preparation now

00:48:25,610 --> 00:48:32,180
for arguments why to use salt actually

00:48:29,600 --> 00:48:35,150
about a year a year and a half ago so

00:48:32,180 --> 00:48:38,330
the souza manager team so the team

00:48:35,150 --> 00:48:42,020
behind our Souza systems management

00:48:38,330 --> 00:48:44,420
solution had that same problem so we

00:48:42,020 --> 00:48:47,750
were trying to figure out what is the

00:48:44,420 --> 00:48:50,090
right tool for our purposes because we

00:48:47,750 --> 00:48:52,670
ran into all the problems that Thomas

00:48:50,090 --> 00:48:55,730
mentioned you know linear execution

00:48:52,670 --> 00:48:59,570
takes a lot of time lots of systems have

00:48:55,730 --> 00:49:02,660
to be reached and our existing stack

00:48:59,570 --> 00:49:05,180
that is kind of 15 years old based on

00:49:02,660 --> 00:49:08,240
the space for project there's a lot of

00:49:05,180 --> 00:49:10,850
those things in sequence and it may take

00:49:08,240 --> 00:49:13,940
some time it's not really instantaneous

00:49:10,850 --> 00:49:15,830
so it's more of a batch processing you

00:49:13,940 --> 00:49:18,590
reach out to the system the system may

00:49:15,830 --> 00:49:20,150
come back an hour later or whenever it

00:49:18,590 --> 00:49:22,700
wants because it would just wake up

00:49:20,150 --> 00:49:24,980
every couple of minutes hours days

00:49:22,700 --> 00:49:29,090
whatever yeah so we were looking for

00:49:24,980 --> 00:49:32,630
something more instantaneous better

00:49:29,090 --> 00:49:35,030
scale and so on that's when we decided

00:49:32,630 --> 00:49:37,340
to look into lots of different systems

00:49:35,030 --> 00:49:39,560
and the decision was made to go with

00:49:37,340 --> 00:49:42,650
salt for the reasons that that Thomas is

00:49:39,560 --> 00:49:46,460
mentioned if you're not familiar with

00:49:42,650 --> 00:49:49,250
Susan manager because it's not maybe

00:49:46,460 --> 00:49:51,550
what you're using as an openSUSE user

00:49:49,250 --> 00:49:56,350
test very briefly we are trying to

00:49:51,550 --> 00:49:58,520
basically cover the whole life cycle of

00:49:56,350 --> 00:50:01,730
running operating systems and

00:49:58,520 --> 00:50:04,310
applications in data centers I'm calling

00:50:01,730 --> 00:50:06,680
this the Susan manager metric wheel so

00:50:04,310 --> 00:50:09,290
the inner part of that wheel that inner

00:50:06,680 --> 00:50:12,550
circle around the the hub of Susan

00:50:09,290 --> 00:50:16,550
manager is about all the processes from

00:50:12,550 --> 00:50:18,320
asset management to provisioning patch

00:50:16,550 --> 00:50:20,480
software configuration management of

00:50:18,320 --> 00:50:23,780
course and so on and the outer circle is

00:50:20,480 --> 00:50:26,690
is kind of the control and monitoring

00:50:23,780 --> 00:50:29,000
circle and as you've heard again salt

00:50:26,690 --> 00:50:32,630
can do both so salt can help with all

00:50:29,000 --> 00:50:35,990
those tasks executing stuff on machines

00:50:32,630 --> 00:50:38,360
keeping state but it can also help a lot

00:50:35,990 --> 00:50:40,640
with keeping track of what's going on

00:50:38,360 --> 00:50:42,440
monitoring things in real time and then

00:50:40,640 --> 00:50:49,280
combining those two things basically

00:50:42,440 --> 00:50:51,050
acting on those events yeah I like this

00:50:49,280 --> 00:50:53,270
one I had to bring it up that's how

00:50:51,050 --> 00:51:00,890
marketing kind of sums up what Susan

00:50:53,270 --> 00:51:02,480
manager can do tame your IT yeah someone

00:51:00,890 --> 00:51:04,520
mentioned that yeah you shouldn't

00:51:02,480 --> 00:51:10,700
probably use those thingies after the

00:51:04,520 --> 00:51:13,400
hair truck has used them but yeah so

00:51:10,700 --> 00:51:16,310
with Susan manager 3 the Susan manager

00:51:13,400 --> 00:51:19,880
server basically becomes assault masters

00:51:16,310 --> 00:51:22,550
all the communication to the manage

00:51:19,880 --> 00:51:27,050
systems is using that solved message bus

00:51:22,550 --> 00:51:29,330
that we saw on Tom slides and we also of

00:51:27,050 --> 00:51:33,340
course leverage the the event mechanism

00:51:29,330 --> 00:51:36,350
to collect data back from those systems

00:51:33,340 --> 00:51:38,300
this helped us solve quite a few of

00:51:36,350 --> 00:51:43,790
challenges quite a few challenges first

00:51:38,300 --> 00:51:47,800
of all better scale that one I always

00:51:43,790 --> 00:51:51,350
tried to pronounce paralyzed paralyzed

00:51:47,800 --> 00:51:54,110
terrible word for me we wanted to be

00:51:51,350 --> 00:51:55,820
able to do things in parallel at least

00:51:54,110 --> 00:51:57,980
for hundreds of systems so we don't have

00:51:55,820 --> 00:52:00,980
patches of one but can reach out to 500

00:51:57,980 --> 00:52:03,190
at a time and so on in a very short

00:52:00,980 --> 00:52:05,390
window of time you have customers

00:52:03,190 --> 00:52:07,340
running in the thousands of systems

00:52:05,390 --> 00:52:10,160
behind Susan manager and they have patch

00:52:07,340 --> 00:52:12,500
windows of maybe four hours per month or

00:52:10,160 --> 00:52:15,500
per quarter and everything has to be

00:52:12,500 --> 00:52:18,440
done within those four hours so that

00:52:15,500 --> 00:52:22,070
that was one of the challenges and then

00:52:18,440 --> 00:52:23,660
be expressive again going from this

00:52:22,070 --> 00:52:26,090
approach where you basically write

00:52:23,660 --> 00:52:27,860
scripts in a more modern way to an

00:52:26,090 --> 00:52:29,930
approach where you declare how a system

00:52:27,860 --> 00:52:32,180
should look like so go from

00:52:29,930 --> 00:52:34,069
stall this user to this user should be

00:52:32,180 --> 00:52:38,750
installed always check that it's still

00:52:34,069 --> 00:52:41,630
there if not bring it back one of the

00:52:38,750 --> 00:52:44,839
first things we did was to bridge the

00:52:41,630 --> 00:52:46,630
gap between between Zuza manager's core

00:52:44,839 --> 00:52:49,550
engine that's mainly written in Java

00:52:46,630 --> 00:52:52,460
which was not our choice but but we

00:52:49,550 --> 00:52:56,440
ended up with that legacy and it's not

00:52:52,460 --> 00:52:59,900
that bad actually to the Python based

00:52:56,440 --> 00:53:02,270
salt stack so one of the first

00:52:59,900 --> 00:53:05,059
contributions we did johannes rena was

00:53:02,270 --> 00:53:09,160
the main engineer behind that was

00:53:05,059 --> 00:53:13,250
contribute an api connector to the salt

00:53:09,160 --> 00:53:15,020
api for java this allows us to have a

00:53:13,250 --> 00:53:18,290
very loose coupling between susan

00:53:15,020 --> 00:53:20,089
manager and salt so in the in the

00:53:18,290 --> 00:53:21,650
unlikely event that we don't like it

00:53:20,089 --> 00:53:24,079
anymore we could just write a new one

00:53:21,650 --> 00:53:27,740
for something else and and drip and

00:53:24,079 --> 00:53:34,309
replace it of course that's not going to

00:53:27,740 --> 00:53:37,839
happen any time soon now i want to guide

00:53:34,309 --> 00:53:41,140
you through a few simple steps this is

00:53:37,839 --> 00:53:45,109
very similar to the demo that we did at

00:53:41,140 --> 00:53:47,839
the salt conf earlier this year where

00:53:45,109 --> 00:53:51,740
you can go from a generic just enough

00:53:47,839 --> 00:53:54,650
operating system image that you register

00:53:51,740 --> 00:53:57,290
to susan manager assign it to server

00:53:54,650 --> 00:54:00,829
groups and then apply the state so that

00:53:57,290 --> 00:54:03,799
this the overall system state that's

00:54:00,829 --> 00:54:05,780
what's all stack calls a high state so

00:54:03,799 --> 00:54:07,069
you can apply individual rules but if

00:54:05,780 --> 00:54:09,200
you want to basically get everything

00:54:07,069 --> 00:54:14,230
applied that should be applied on that

00:54:09,200 --> 00:54:14,230
machine that's the high state yeah

00:54:15,830 --> 00:54:21,210
first of all because the connection has

00:54:18,750 --> 00:54:24,990
to be secured there's some key exchange

00:54:21,210 --> 00:54:27,090
involved and in sues the manager it

00:54:24,990 --> 00:54:30,150
basically looks like this so there is a

00:54:27,090 --> 00:54:33,750
command-line tool of course for salt a

00:54:30,150 --> 00:54:36,360
minyan that comes up since a key to the

00:54:33,750 --> 00:54:38,700
master and then the master can either

00:54:36,360 --> 00:54:40,590
accept that key you can even put it like

00:54:38,700 --> 00:54:42,480
auto accept all the keys if you know

00:54:40,590 --> 00:54:44,250
your infrastructure you know let's say

00:54:42,480 --> 00:54:45,960
you have a large high performance

00:54:44,250 --> 00:54:48,240
computing environment it's completely

00:54:45,960 --> 00:54:50,730
closed the network or you own the

00:54:48,240 --> 00:54:53,700
network you can just automate this but

00:54:50,730 --> 00:54:56,820
if you want to have control you can

00:54:53,700 --> 00:55:00,440
check the fingerprint in the UI or on

00:54:56,820 --> 00:55:04,800
the command line and then you can apply

00:55:00,440 --> 00:55:07,170
you know assign those machines accept

00:55:04,800 --> 00:55:10,590
those keys that are still pending and

00:55:07,170 --> 00:55:13,020
then this will actually again use the

00:55:10,590 --> 00:55:14,850
event mechanism in the back because once

00:55:13,020 --> 00:55:16,800
the machine has accepted its key it will

00:55:14,850 --> 00:55:20,520
send an event and say well I'm here now

00:55:16,800 --> 00:55:23,190
and now Susan manager will read that on

00:55:20,520 --> 00:55:25,860
the net on the on the API pass and

00:55:23,190 --> 00:55:27,330
trigger the next step which is okay now

00:55:25,860 --> 00:55:28,980
get all the hardware data or the

00:55:27,330 --> 00:55:33,410
software data of that machine and and

00:55:28,980 --> 00:55:33,410
put it into this user manager inventory

00:55:35,900 --> 00:55:43,970
now the second step is you want to

00:55:41,580 --> 00:55:46,440
assign stay to those machines and

00:55:43,970 --> 00:55:48,510
actually more or less by accident we

00:55:46,440 --> 00:55:50,730
came up with a very powerful pattern

00:55:48,510 --> 00:55:53,970
here that combines the best of the

00:55:50,730 --> 00:55:56,580
legacy concepts we already had in the

00:55:53,970 --> 00:55:59,580
souza manager and the spacewalk project

00:55:56,580 --> 00:56:02,130
with salts state concept and I'm calling

00:55:59,580 --> 00:56:05,070
that for a lack of better name the

00:56:02,130 --> 00:56:07,710
groups and states header so this is how

00:56:05,070 --> 00:56:10,260
it works in Susan manager you can create

00:56:07,710 --> 00:56:11,790
random groups those those groups are

00:56:10,260 --> 00:56:14,040
actually more like tanks so it's not

00:56:11,790 --> 00:56:15,780
like hierarchical groups and a machine

00:56:14,040 --> 00:56:17,790
can only be in one group but you can

00:56:15,780 --> 00:56:20,340
basically have a group for your web

00:56:17,790 --> 00:56:22,380
servers a group for your service that

00:56:20,340 --> 00:56:24,450
are in a certain rack or in a certain

00:56:22,380 --> 00:56:25,660
location or that are managed by Joe or

00:56:24,450 --> 00:56:28,700
Tom

00:56:25,660 --> 00:56:32,260
man machines that are redhead systems or

00:56:28,700 --> 00:56:35,660
souza systems and then you can basically

00:56:32,260 --> 00:56:37,309
choose an you know an a union or

00:56:35,660 --> 00:56:38,960
intersection that say all the Sousa

00:56:37,309 --> 00:56:42,170
servers managed by Cho that are

00:56:38,960 --> 00:56:45,230
observers and running in Newark so these

00:56:42,170 --> 00:56:47,720
groups that's where we assign States to

00:56:45,230 --> 00:56:49,400
so let's say we want to state that the

00:56:47,720 --> 00:56:50,930
does all the stuff that you always have

00:56:49,400 --> 00:56:54,559
to do in all the web service in the

00:56:50,930 --> 00:56:56,869
company yeah so we create that state

00:56:54,559 --> 00:56:59,990
just like that little snippet that the

00:56:56,869 --> 00:57:01,670
David showed us to install the Apache

00:56:59,990 --> 00:57:03,440
server configure the Apache server and

00:57:01,670 --> 00:57:07,069
we don't assign it to a machine we

00:57:03,440 --> 00:57:08,720
assign it to that group and now we can

00:57:07,069 --> 00:57:10,640
assign systems to that group and

00:57:08,720 --> 00:57:14,000
basically by adding those systems to the

00:57:10,640 --> 00:57:16,220
group all we have to do is run the high

00:57:14,000 --> 00:57:19,609
state command so basically apply the

00:57:16,220 --> 00:57:22,010
state and for all the machines in these

00:57:19,609 --> 00:57:23,859
groups they will become web service and

00:57:22,010 --> 00:57:26,539
they will stay web service as long as we

00:57:23,859 --> 00:57:29,269
keep running the high state from time to

00:57:26,539 --> 00:57:32,119
time and that's very powerful because it

00:57:29,269 --> 00:57:35,119
completely decouples to problems a user

00:57:32,119 --> 00:57:37,940
who has no clue about how solve states

00:57:35,119 --> 00:57:41,269
work can still go into this user manager

00:57:37,940 --> 00:57:44,150
UI or use this user manager API and add

00:57:41,269 --> 00:57:50,299
a new machine to that group and it will

00:57:44,150 --> 00:57:53,539
just work now what also helps with that

00:57:50,299 --> 00:57:58,039
is that we've created three layers in

00:57:53,539 --> 00:58:00,559
both the configuration side so where can

00:57:58,039 --> 00:58:04,089
you define your soul States your soul

00:58:00,559 --> 00:58:06,890
configuration and on this user manager

00:58:04,089 --> 00:58:08,839
group side and so on so in the salt

00:58:06,890 --> 00:58:12,470
configuration first of all we have

00:58:08,839 --> 00:58:14,990
configuration that will always come with

00:58:12,470 --> 00:58:18,589
a Susan manager it's taken for granted

00:58:14,990 --> 00:58:20,900
so we have a few like piece that we have

00:58:18,589 --> 00:58:23,960
to roll out on the machine so that super

00:58:20,900 --> 00:58:27,349
knows about which rpms it should be

00:58:23,960 --> 00:58:29,269
using and so on the signing keys you

00:58:27,349 --> 00:58:30,859
can't change them you can but you would

00:58:29,269 --> 00:58:33,829
change them in a place that is read-only

00:58:30,859 --> 00:58:36,109
on the file system for use and then we

00:58:33,829 --> 00:58:38,059
have auto-generated stuff from Susan

00:58:36,109 --> 00:58:39,010
manager for example if you join such a

00:58:38,059 --> 00:58:43,630
group

00:58:39,010 --> 00:58:47,470
we will use salt Spiller mechanism which

00:58:43,630 --> 00:58:51,580
is a secure way of distributing data to

00:58:47,470 --> 00:58:55,270
your machines and just inject data from

00:58:51,580 --> 00:58:58,000
Caesar manager into those pillars this

00:58:55,270 --> 00:59:01,240
is also auto-generated states for

00:58:58,000 --> 00:59:03,760
example when we actually add a new

00:59:01,240 --> 00:59:05,680
package to remove a package what we're

00:59:03,760 --> 00:59:08,470
doing is we create a salt State for that

00:59:05,680 --> 00:59:10,540
and then finally this user generated

00:59:08,470 --> 00:59:13,900
content and that means that anything you

00:59:10,540 --> 00:59:16,390
can do with a plain salt master in your

00:59:13,900 --> 00:59:18,160
own setups you can just basically copy

00:59:16,390 --> 00:59:21,910
over to user manager there's your

00:59:18,160 --> 00:59:25,240
playground you can add stuff and these

00:59:21,910 --> 00:59:27,280
three layers allow us to integrate with

00:59:25,240 --> 00:59:29,770
existing solutions but at the same time

00:59:27,280 --> 00:59:31,270
have a lot of control about things that

00:59:29,770 --> 00:59:33,490
always have to happen because they

00:59:31,270 --> 00:59:36,760
associate defaults and things that you

00:59:33,490 --> 00:59:39,460
do from Susan manager and finally on on

00:59:36,760 --> 00:59:42,400
this user manager site we can apply

00:59:39,460 --> 00:59:44,560
States to organizations that means and

00:59:42,400 --> 00:59:47,970
anybody in the whole organization has to

00:59:44,560 --> 00:59:50,980
do that let's say you have a policy that

00:59:47,970 --> 00:59:53,230
certainly users should never be on those

00:59:50,980 --> 00:59:55,510
machines yeah or a policy that the

00:59:53,230 --> 00:59:57,640
firewall always has to be on you can do

00:59:55,510 --> 01:00:01,119
that for the whole organization and it

00:59:57,640 --> 01:00:03,790
will always be applied and then you've

01:00:01,119 --> 01:00:05,920
seen the groups so you can apply state

01:00:03,790 --> 01:00:07,869
to groups and this basically doesn't

01:00:05,920 --> 01:00:10,290
mean that there's a third that's a

01:00:07,869 --> 01:00:12,880
second layer but that's that's a whole

01:00:10,290 --> 01:00:14,950
world of layers because those groups can

01:00:12,880 --> 01:00:18,790
overlap so you can have five or six

01:00:14,950 --> 01:00:21,090
groups assigned to the same machine yeah

01:00:18,790 --> 01:00:23,859
one cave yet we haven't figured out yet

01:00:21,090 --> 01:00:25,359
what happens if they are called in

01:00:23,859 --> 01:00:27,400
different orders so that's where you

01:00:25,359 --> 01:00:29,830
have to be careful those those states

01:00:27,400 --> 01:00:32,380
would have to be written in a way that

01:00:29,830 --> 01:00:34,600
they can coexist or that you know

01:00:32,380 --> 01:00:36,790
ordering doesn't matter but we are

01:00:34,600 --> 01:00:39,160
working on that part and finally you can

01:00:36,790 --> 01:00:41,500
even override settings on an individual

01:00:39,160 --> 01:00:43,480
system so if you have 100 web service

01:00:41,500 --> 01:00:47,020
and there's this one web server that

01:00:43,480 --> 01:00:48,730
needs to have a different set up now

01:00:47,020 --> 01:00:51,579
maybe it's not running Apache but it's

01:00:48,730 --> 01:00:54,670
running and jinkx or whatever

01:00:51,579 --> 01:01:01,239
then you can do that just as an overlay

01:00:54,670 --> 01:01:04,539
and what what a what would what this

01:01:01,239 --> 01:01:07,660
helps with is if you have a set up like

01:01:04,539 --> 01:01:09,459
a medium sized web server set up where

01:01:07,660 --> 01:01:12,700
you have a load balancer you have a web

01:01:09,459 --> 01:01:16,539
server and a media server separately you

01:01:12,700 --> 01:01:18,729
can just grow that by creating twins

01:01:16,539 --> 01:01:21,099
yeah basically you add a new web server

01:01:18,729 --> 01:01:24,880
to that group you add a new media server

01:01:21,099 --> 01:01:28,269
on to the other group and just run the

01:01:24,880 --> 01:01:30,430
state and you scale out another thing of

01:01:28,269 --> 01:01:33,700
course that you can also do because of

01:01:30,430 --> 01:01:37,299
the reactor mechanism and be also did

01:01:33,700 --> 01:01:40,209
that in the demo on in in Salt Lake City

01:01:37,299 --> 01:01:42,160
is that you can make the load balancer

01:01:40,209 --> 01:01:43,539
there of those changes because the lower

01:01:42,160 --> 01:01:46,539
balancer has to know oh there's a new

01:01:43,539 --> 01:01:50,440
back-end available that I can point

01:01:46,539 --> 01:01:53,229
clients to new web server back-end or a

01:01:50,440 --> 01:01:55,359
new media server back-end so you can

01:01:53,229 --> 01:01:59,799
rewrite the load balancer configuration

01:01:55,359 --> 01:02:01,839
just based on those incoming events when

01:01:59,799 --> 01:02:03,729
a machine comes up it's configured it

01:02:01,839 --> 01:02:06,459
will send standard events but you can

01:02:03,729 --> 01:02:09,670
also in your state's fire individual

01:02:06,459 --> 01:02:12,430
events like inform load balancer and and

01:02:09,670 --> 01:02:14,890
even pass random information bit of

01:02:12,430 --> 01:02:17,829
information that you want like keywords

01:02:14,890 --> 01:02:19,809
or so and that way the load balancer can

01:02:17,829 --> 01:02:21,999
automatically be updated without any

01:02:19,809 --> 01:02:27,479
other out-of-band technology without any

01:02:21,999 --> 01:02:37,180
need for using let's say pacemaker or

01:02:27,479 --> 01:02:39,369
other h.a mechanisms yeah so there are a

01:02:37,180 --> 01:02:41,529
few more things that we put in to Susan

01:02:39,369 --> 01:02:43,150
manager with regard to the salt

01:02:41,529 --> 01:02:45,459
integration there's more to come I'm

01:02:43,150 --> 01:02:48,819
just running you through two or three of

01:02:45,459 --> 01:02:52,989
those things first of all the command

01:02:48,819 --> 01:02:56,680
line stuff that David showed us much of

01:02:52,989 --> 01:03:01,479
that can also be done from the web UI so

01:02:56,680 --> 01:03:04,900
you can use you know the this syntax

01:03:01,479 --> 01:03:06,940
using placeholders asterisks and so on

01:03:04,900 --> 01:03:09,220
to scope only in the media service like

01:03:06,940 --> 01:03:13,030
this would trigger all the service that

01:03:09,220 --> 01:03:17,710
start with media and to do simple

01:03:13,030 --> 01:03:20,740
commands in this case you'd also get the

01:03:17,710 --> 01:03:23,740
input at the output nicely formatted in

01:03:20,740 --> 01:03:25,240
the web UI for all those machines if you

01:03:23,740 --> 01:03:27,580
haven't tried out what happens if you do

01:03:25,240 --> 01:03:31,180
that to 10,000 service yet in the UI but

01:03:27,580 --> 01:03:35,470
it will work really nicely for a couple

01:03:31,180 --> 01:03:38,320
of dozen for now this is limited to one

01:03:35,470 --> 01:03:42,190
particular part of the Seoul API where

01:03:38,320 --> 01:03:44,140
you call bash commands so this is for

01:03:42,190 --> 01:03:47,500
running just basically executing batch

01:03:44,140 --> 01:03:50,500
commands we are going to expand that and

01:03:47,500 --> 01:03:52,390
also make use of the fact that Python

01:03:50,500 --> 01:03:55,750
allows through introspection so we can

01:03:52,390 --> 01:03:59,200
basically while you type expose all the

01:03:55,750 --> 01:04:03,610
options that you have for filling out

01:03:59,200 --> 01:04:06,760
stuff and so on and another thing that

01:04:03,610 --> 01:04:09,100
we did using the existing State

01:04:06,760 --> 01:04:13,060
mechanisms we basically created a simple

01:04:09,100 --> 01:04:14,500
UI for configuring your packages this

01:04:13,060 --> 01:04:16,300
was basically because we had that

01:04:14,500 --> 01:04:20,230
feature already we wanted to pull it

01:04:16,300 --> 01:04:22,150
over to the salt based mechanisms in the

01:04:20,230 --> 01:04:28,570
back this will just create a state file

01:04:22,150 --> 01:04:31,230
that says Emacs absent I think or yes I

01:04:28,570 --> 01:04:33,920
think it's not absent and whim dot

01:04:31,230 --> 01:04:35,990
present

01:04:33,920 --> 01:04:39,410
or installed yeah I'm always mixing that

01:04:35,990 --> 01:04:41,510
up yeah this is of course that's a

01:04:39,410 --> 01:04:44,480
standard setup for the oldest user

01:04:41,510 --> 01:04:46,700
service no I'm just kidding so you can

01:04:44,480 --> 01:04:48,440
do very simple things with packages like

01:04:46,700 --> 01:04:49,730
always make sure that Emacs is removed

01:04:48,440 --> 01:04:51,260
and always make sure that vim is

01:04:49,730 --> 01:04:54,160
installed with the latest version or

01:04:51,260 --> 01:05:01,040
with a random version so there are two

01:04:54,160 --> 01:05:03,710
possibilities there yeah we will dive

01:05:01,040 --> 01:05:07,340
into more of those things in the

01:05:03,710 --> 01:05:10,460
sessions during during the day my

01:05:07,340 --> 01:05:13,060
session is going to focus mostly on how

01:05:10,460 --> 01:05:15,590
you can hack salt how you can extend it

01:05:13,060 --> 01:05:17,870
like the things that Tom mentioned

01:05:15,590 --> 01:05:20,210
around managing like pipes I think we

01:05:17,870 --> 01:05:23,440
will see stuff that that's being done in

01:05:20,210 --> 01:05:26,330
the storage team as well

01:05:23,440 --> 01:05:29,780
suza enterprise storage team and a few

01:05:26,330 --> 01:05:33,650
other examples around open stack and

01:05:29,780 --> 01:05:36,530
vmware as well those talks are all

01:05:33,650 --> 01:05:37,850
happening in the gallery room I think

01:05:36,530 --> 01:05:43,040
it's over there

01:05:37,850 --> 01:05:45,620
and yeah and I hope you'll enjoy the day

01:05:43,040 --> 01:05:50,720
and you'll better understand what we are

01:05:45,620 --> 01:05:55,010
going with salt one final remark to the

01:05:50,720 --> 01:05:57,170
openSUSE guys salt is just a super inner

01:05:55,010 --> 01:05:59,780
way on openSUSE so we have the

01:05:57,170 --> 01:06:01,760
not-not-not that 2016 packages yet we

01:05:59,780 --> 01:06:05,930
are in the process of updating to the

01:06:01,760 --> 01:06:09,560
2016 packages but the 2015 808 and think

01:06:05,930 --> 01:06:12,530
packages are available on openSUSE both

01:06:09,560 --> 01:06:14,090
leap and tumbleweed patches super in and

01:06:12,530 --> 01:06:16,400
in my presentation I also have a slide

01:06:14,090 --> 01:06:19,580
to show you where you always get our

01:06:16,400 --> 01:06:21,980
latest development packages that we are

01:06:19,580 --> 01:06:27,020
using for Susan manager upstream

01:06:21,980 --> 01:06:32,660
development as well yeah thank you and I

01:06:27,020 --> 01:06:35,830
think now I'll ask doc again to the

01:06:32,660 --> 01:06:35,830
stage for some logistics

01:06:37,160 --> 01:06:48,190
and of course question and answers Tom

01:06:40,940 --> 01:06:51,789
David or myself where are we tired test

01:06:48,190 --> 01:06:51,789
any questions

01:06:56,150 --> 01:07:03,900
are we have oh there's a lot of people

01:07:02,370 --> 01:07:07,260
out there who don't come from a big

01:07:03,900 --> 01:07:11,250
systems background they may have maybe

01:07:07,260 --> 01:07:15,960
three or four servers Oh what how small

01:07:11,250 --> 01:07:18,450
can your systems that you run be and you

01:07:15,960 --> 01:07:20,580
still get enough benefit to make it

01:07:18,450 --> 01:07:25,290
worthwhile investing in a tool such as

01:07:20,580 --> 01:07:28,860
salt so really that depends on what

01:07:25,290 --> 01:07:31,080
you're doing with those systems so we

01:07:28,860 --> 01:07:33,390
definitely see scenarios where people

01:07:31,080 --> 01:07:38,520
see a lot of benefit and they are using

01:07:33,390 --> 01:07:40,200
less than five systems but usually

01:07:38,520 --> 01:07:42,210
that's along lines of where they need to

01:07:40,200 --> 01:07:45,480
they need to coordinate things that

01:07:42,210 --> 01:07:46,800
happen on a regular basis or those five

01:07:45,480 --> 01:07:48,690
systems that they have are fairly

01:07:46,800 --> 01:07:51,420
transient so they need to be set up

01:07:48,690 --> 01:07:54,090
again on a regular basis

01:07:51,420 --> 01:07:56,090
honestly if you've got three servers

01:07:54,090 --> 01:07:59,700
that you're going to statically set up

01:07:56,090 --> 01:08:04,410
then yeah you aren't necessarily going

01:07:59,700 --> 01:08:07,050
to see a lot of that value yet but it is

01:08:04,410 --> 01:08:08,760
something that even at a scale if you

01:08:07,050 --> 01:08:11,310
have a if you plan on getting bigger

01:08:08,760 --> 01:08:13,050
it's good to be able to define your

01:08:11,310 --> 01:08:15,330
systems in a declarative way so that

01:08:13,050 --> 01:08:17,640
what you have done becomes natively

01:08:15,330 --> 01:08:20,549
documented and it's something that's

01:08:17,640 --> 01:08:22,200
easy for you to transfer forward so yeah

01:08:20,549 --> 01:08:25,400
I mean it's easy to say hey I've got

01:08:22,200 --> 01:08:29,970
20-plus systems salts gonna be a benefit

01:08:25,400 --> 01:08:31,470
but yeah it does get kind of kind of

01:08:29,970 --> 01:08:33,299
tricky when you're down to really really

01:08:31,470 --> 01:08:36,029
small numbers so sometimes there's

01:08:33,299 --> 01:08:38,130
sometimes it isn't coming from Big

01:08:36,029 --> 01:08:40,140
Sisters background I usually say five

01:08:38,130 --> 01:08:46,230
once you've got five machines it's

01:08:40,140 --> 01:08:48,900
really worth it Thanks any other

01:08:46,230 --> 01:08:52,290
questions let me just add to that so

01:08:48,900 --> 01:08:54,630
Richard Brown wrote a really really nice

01:08:52,290 --> 01:08:56,430
blog post awhile ago on his kind of

01:08:54,630 --> 01:08:58,680
private set up that where he's using

01:08:56,430 --> 01:09:00,450
salt I mean sometimes it's really what

01:08:58,680 --> 01:09:03,750
what tom says about documentation about

01:09:00,450 --> 01:09:05,190
being able to just rebuild this if you

01:09:03,750 --> 01:09:06,600
let's say you go to a different provider

01:09:05,190 --> 01:09:08,940
and it's really just wanted to

01:09:06,600 --> 01:09:10,500
machines if you know it's all in my

01:09:08,940 --> 01:09:12,540
states you can just roll it out

01:09:10,500 --> 01:09:14,520
somewhere else you can replicate it you

01:09:12,540 --> 01:09:17,480
can also test it very well we are also

01:09:14,520 --> 01:09:20,820
using it in setting up the open QA

01:09:17,480 --> 01:09:22,620
infrastructure it's not hundreds of

01:09:20,820 --> 01:09:24,330
notes but it makes sure that you when

01:09:22,620 --> 01:09:26,359
you bring up the system it's all

01:09:24,330 --> 01:09:29,730
documented in code and that's one of the

01:09:26,359 --> 01:09:32,370
DevOps paradigms even if it's a small

01:09:29,730 --> 01:09:33,990
number of machines you know yeah and

01:09:32,370 --> 01:09:36,540
again I mean it's about complexity if

01:09:33,990 --> 01:09:38,130
the complexity is okay I have to add a

01:09:36,540 --> 01:09:40,560
new user or I have to change the

01:09:38,130 --> 01:09:42,240
password then don't bother but if it's

01:09:40,560 --> 01:09:43,920
about a whole bunch of things that you

01:09:42,240 --> 01:09:46,680
always have to do when you bring up that

01:09:43,920 --> 01:09:51,320
system or when you upgrade it then give

01:09:46,680 --> 01:09:51,320
it a try more questions

01:09:52,469 --> 01:10:09,760
this one I have seen that the client

01:10:04,690 --> 01:10:14,290
user privileges is it required the salt

01:10:09,760 --> 01:10:16,449
minion can run without root privileges

01:10:14,290 --> 01:10:18,929
but then of course it's very limited in

01:10:16,449 --> 01:10:23,590
what it can do that's a kind of generic

01:10:18,929 --> 01:10:29,500
problem in in linux or in all the unix's

01:10:23,590 --> 01:10:32,070
that are not like there's an i AIX allah

01:10:29,500 --> 01:10:32,070
does it differently

01:10:34,800 --> 01:10:39,520
so yeah the default setup for the minion

01:10:38,020 --> 01:10:41,650
like like Joe is saying is run as root

01:10:39,520 --> 01:10:45,070
because then it can you know do what it

01:10:41,650 --> 01:10:48,850
needs to salt does ship with a system

01:10:45,070 --> 01:10:51,940
called a pseudo executor so we added

01:10:48,850 --> 01:10:54,070
this in the 2015 date release what the

01:10:51,940 --> 01:10:56,949
pseudo executor doesn't lie to do is run

01:10:54,070 --> 01:10:59,110
the minion as non-root and then all of

01:10:56,949 --> 01:11:01,390
the execution commands which like which

01:10:59,110 --> 01:11:04,600
run on the minion are processed by sudo

01:11:01,390 --> 01:11:07,239
and so then you can use sudo as your

01:11:04,600 --> 01:11:08,590
privilege gate which means that it makes

01:11:07,239 --> 01:11:10,540
it a lot easier to be able to specify

01:11:08,590 --> 01:11:12,400
that some commands needs to do some

01:11:10,540 --> 01:11:16,080
commands don't need to do and then the

01:11:12,400 --> 01:11:18,790
minion head receives a localized narrow

01:11:16,080 --> 01:11:19,690
privilege set based specifically on what

01:11:18,790 --> 01:11:25,739
you want it to do

01:11:19,690 --> 01:11:30,340
does that answer your question okay

01:11:25,739 --> 01:11:32,830
thanks and of course conceptually we

01:11:30,340 --> 01:11:35,440
could do anything that we did that's a

01:11:32,830 --> 01:11:37,840
diva's and package kit it's not a

01:11:35,440 --> 01:11:40,750
limitation of soul it's just if you run

01:11:37,840 --> 01:11:42,790
a salt module and it has to be to do

01:11:40,750 --> 01:11:44,860
things that only root can do you have to

01:11:42,790 --> 01:11:49,270
find a way of making sure that it can

01:11:44,860 --> 01:11:50,770
yeah so I could imagine in a future

01:11:49,270 --> 01:11:53,170
release that we would implement

01:11:50,770 --> 01:11:56,469
something similar to package kit where

01:11:53,170 --> 01:11:58,929
you expose certain features to user user

01:11:56,469 --> 01:12:02,310
using D bus for example and then trigger

01:11:58,929 --> 01:12:05,060
it from salt yeah just in most cases

01:12:02,310 --> 01:12:07,760
when you talk automation

01:12:05,060 --> 01:12:09,950
you have to lock down that part of your

01:12:07,760 --> 01:12:12,200
infrastructure anyway because even if

01:12:09,950 --> 01:12:13,880
you're limiting uses to only doing

01:12:12,200 --> 01:12:15,830
certain things just be aware that

01:12:13,880 --> 01:12:18,290
there's always a chain like if you can

01:12:15,830 --> 01:12:21,380
install a package you can do anything as

01:12:18,290 --> 01:12:24,530
long as the package is installed using

01:12:21,380 --> 01:12:29,930
rpm and then rpm is running is rooted

01:12:24,530 --> 01:12:31,910
and so on it's it's very easy to be in a

01:12:29,930 --> 01:12:34,160
kind of false sense of security where

01:12:31,910 --> 01:12:36,320
you think you are secure but actually of

01:12:34,160 --> 01:12:38,240
course as user manager server or salt

01:12:36,320 --> 01:12:41,260
master if your root on that machine you

01:12:38,240 --> 01:12:43,730
rule your data center anything yeah

01:12:41,260 --> 01:12:45,740
that's that's part of the automation

01:12:43,730 --> 01:12:48,110
paradigm because you want to be able to

01:12:45,740 --> 01:12:50,510
change anything to know about anything's

01:12:48,110 --> 01:12:52,910
going on that's why you have to secure

01:12:50,510 --> 01:12:55,070
the the infrastructure that's why we're

01:12:52,910 --> 01:12:57,740
using strong encryption for all the

01:12:55,070 --> 01:12:59,990
transports and yeah you don't you

01:12:57,740 --> 01:13:02,150
shouldn't be sloppy with securing that

01:12:59,990 --> 01:13:06,500
souza manager server all that salt

01:13:02,150 --> 01:13:08,810
master yeah just joe said that

01:13:06,500 --> 01:13:10,340
fantastically and I really like the fact

01:13:08,810 --> 01:13:12,830
that he brought up that you need to be

01:13:10,340 --> 01:13:14,840
careful with security that you aren't

01:13:12,830 --> 01:13:17,060
applying layers of security that make

01:13:14,840 --> 01:13:19,850
you feel good but don't actually help in

01:13:17,060 --> 01:13:21,950
the end we see that that's a very very

01:13:19,850 --> 01:13:23,960
common thing that we went into is that

01:13:21,950 --> 01:13:25,550
people don't understand that like Joe is

01:13:23,960 --> 01:13:27,980
saying if you're allowing somebody to

01:13:25,550 --> 01:13:30,920
run an install an RPM or you're allowing

01:13:27,980 --> 01:13:32,330
somebody to shell out or even even if

01:13:30,920 --> 01:13:34,640
you feel like you're restricting other

01:13:32,330 --> 01:13:36,530
things you've still you're allowing

01:13:34,640 --> 01:13:38,780
somebody access to a system which is

01:13:36,530 --> 01:13:42,470
running that logically itself doesn't

01:13:38,780 --> 01:13:43,670
have security gates so yeah just be

01:13:42,470 --> 01:13:55,760
aware of the entire chain all the way

01:13:43,670 --> 01:13:58,610
down any other questions nope okay thank

01:13:55,760 --> 01:14:00,850
you very much gentlemen for your keynote

01:13:58,610 --> 01:14:00,850
and

01:14:07,470 --> 01:14:11,530
so the the salt sex summit is going to

01:14:10,120 --> 01:14:13,780
take place in gallery that's the other

01:14:11,530 --> 01:14:15,550
room next to the bathrooms here and then

01:14:13,780 --> 01:14:18,670
the Souza lab summit will starting here

01:14:15,550 --> 01:14:21,010
in about 15 minutes

01:14:18,670 --> 01:14:23,860
also I want to thank our sponsors

01:14:21,010 --> 01:14:26,830
coca-cola and monster so you can get

01:14:23,860 --> 01:14:29,800
those free in the back at the bar please

01:14:26,830 --> 01:14:32,080
do enjoy the beer garden at some point

01:14:29,800 --> 01:14:33,970
there is Wi-Fi access out there and the

01:14:32,080 --> 01:14:38,760
food truck is here but it will start

01:14:33,970 --> 01:14:38,760
it'll open at noon thank you

01:14:45,570 --> 01:14:47,630

YouTube URL: https://www.youtube.com/watch?v=b7pYDB8xS20


