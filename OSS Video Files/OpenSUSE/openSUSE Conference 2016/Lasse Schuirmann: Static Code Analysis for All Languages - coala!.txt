Title: Lasse Schuirmann: Static Code Analysis for All Languages - coala!
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/950-static-code-analysis-for-all-languages-coala

coala provides a common command-line interface for linting and fixing all your code, regardless of the programming languages you use.

It supports way over 30 languages in addition to language independent routines. So, instead of building new analysis tools from scratch you can now build logic only and let coala deal with the user.

This talk features a short introduction into the thoughts behind coala, it's ability to speed up research as well as increase productivity.

Lasse Schuirmann
Captions: 
	00:00:07,520 --> 00:00:17,810
I want to talk to you about koala so in

00:00:14,270 --> 00:00:20,000
a very short description koala can

00:00:17,810 --> 00:00:23,510
detect problems in your source code and

00:00:20,000 --> 00:00:26,360
can also fix some of them but in order

00:00:23,510 --> 00:00:29,380
to understand what makes koala different

00:00:26,360 --> 00:00:34,090
from all those many many tools out there

00:00:29,380 --> 00:00:37,969
let me ask you a question would you

00:00:34,090 --> 00:00:41,180
rewrite library offers only to get spell

00:00:37,969 --> 00:00:43,940
checking for Portuguese or poor German

00:00:41,180 --> 00:00:51,470
please raise your hand if you would love

00:00:43,940 --> 00:00:52,730
to do that I guess so and now let's take

00:00:51,470 --> 00:00:56,090
a look at the world of static code

00:00:52,730 --> 00:00:59,440
analysis in the world of static code

00:00:56,090 --> 00:01:02,870
analysis we have a hell lot of tools and

00:00:59,440 --> 00:01:06,259
every tool does some static code

00:01:02,870 --> 00:01:09,920
analysis for some language some also

00:01:06,259 --> 00:01:12,829
cover several languages but if you want

00:01:09,920 --> 00:01:15,979
to have your whole project coverage

00:01:12,829 --> 00:01:19,100
you're gonna need several tools or

00:01:15,979 --> 00:01:22,639
they're even exist tools that wrap all

00:01:19,100 --> 00:01:24,619
those different tools but the problem is

00:01:22,639 --> 00:01:27,829
bigger than that the problem is not only

00:01:24,619 --> 00:01:29,600
for the users who cannot use all those

00:01:27,829 --> 00:01:32,029
tools because they have to learn all of

00:01:29,600 --> 00:01:34,219
them again and again and again the

00:01:32,029 --> 00:01:36,979
problems also for the developers because

00:01:34,219 --> 00:01:41,929
the developers have to rewrite the whole

00:01:36,979 --> 00:01:44,569
tool from scratch every time and that

00:01:41,929 --> 00:01:47,509
leads to different interfaces at least

00:01:44,569 --> 00:01:50,359
also to smaller projects not covering

00:01:47,509 --> 00:01:53,359
all use cases of the users a user might

00:01:50,359 --> 00:01:55,999
want to run code analysis from his

00:01:53,359 --> 00:01:58,969
editor from the command line from the

00:01:55,999 --> 00:02:01,039
continuous integration or he wants to

00:01:58,969 --> 00:02:04,039
export it to Jason for scientific

00:02:01,039 --> 00:02:06,739
purposes if we look at static code

00:02:04,039 --> 00:02:09,229
analysis written by scientists it'll be

00:02:06,739 --> 00:02:11,180
totally unusable because they don't care

00:02:09,229 --> 00:02:14,480
about the usability they just drawn to

00:02:11,180 --> 00:02:18,990
write the logic

00:02:14,480 --> 00:02:21,690
so slowly drawn into this graphic sucked

00:02:18,990 --> 00:02:23,550
and I'm not speaking about implementing

00:02:21,690 --> 00:02:25,200
all those connections for all those

00:02:23,550 --> 00:02:28,890
different tools for all those different

00:02:25,200 --> 00:02:34,260
languages to all my tools my output

00:02:28,890 --> 00:02:38,100
formats as a user what I prefer let's

00:02:34,260 --> 00:02:41,760
enter a koala koala is one API

00:02:38,100 --> 00:02:44,220
essentially cause an API that defines

00:02:41,760 --> 00:02:48,600
how a code analysis result should look

00:02:44,220 --> 00:02:51,270
like and on top of this API koala gives

00:02:48,600 --> 00:02:54,900
you applications that cover all your use

00:02:51,270 --> 00:02:57,780
cases the cover JSON output that have a

00:02:54,900 --> 00:03:04,350
browsable HTML page of your results and

00:02:57,780 --> 00:03:08,340
all that and right now koala supports

00:03:04,350 --> 00:03:11,790
code analysis for 54 languages and that

00:03:08,340 --> 00:03:13,950
number is counting every day and because

00:03:11,790 --> 00:03:17,370
I told you the goal is to reduce the

00:03:13,950 --> 00:03:20,070
redundancy across code analysis what we

00:03:17,370 --> 00:03:24,300
do is we integrate those tools that

00:03:20,070 --> 00:03:26,490
already exist and to be sustainable we

00:03:24,300 --> 00:03:29,010
allow you to write custom code analysis

00:03:26,490 --> 00:03:32,730
routines without having to worry about

00:03:29,010 --> 00:03:35,370
anything else than just the logic we

00:03:32,730 --> 00:03:37,470
also support you if you for example 12

00:03:35,370 --> 00:03:41,040
parson ast and consume it in multiple

00:03:37,470 --> 00:03:44,310
other routines we paralyze the analysis

00:03:41,040 --> 00:03:47,070
we cash it we make it fast for the user

00:03:44,310 --> 00:03:52,920
we make it easily configurable we

00:03:47,070 --> 00:03:55,740
provide the usability so as a user you

00:03:52,920 --> 00:03:57,570
can use one tool to analyze your whole

00:03:55,740 --> 00:04:00,150
project which has five different

00:03:57,570 --> 00:04:02,310
languages and as a developer you can

00:04:00,150 --> 00:04:06,390
stop writing your tools on spending half

00:04:02,310 --> 00:04:10,140
of your time on the actual usability so

00:04:06,390 --> 00:04:12,830
we write a developer conference so let's

00:04:10,140 --> 00:04:12,830
see some code

00:04:14,530 --> 00:04:21,190
let's see how well this works so we have

00:04:18,850 --> 00:04:23,590
an example project and this example

00:04:21,190 --> 00:04:25,840
projects has several languages in this

00:04:23,590 --> 00:04:28,540
case Java and Python those are randomly

00:04:25,840 --> 00:04:32,680
picked by some contributors from Carla

00:04:28,540 --> 00:04:35,470
and if we want to perform some analysis

00:04:32,680 --> 00:04:40,840
for example on Java let's take a look at

00:04:35,470 --> 00:04:44,139
what koala does for Java we have a

00:04:40,840 --> 00:04:47,200
browsable website which shows the

00:04:44,139 --> 00:04:49,000
supported languages of koala you will

00:04:47,200 --> 00:04:50,710
see that there are some analysis

00:04:49,000 --> 00:04:53,169
routines they will work for all

00:04:50,710 --> 00:04:56,260
programming languages because there is

00:04:53,169 --> 00:04:57,790
no need to rewrite spacing routines for

00:04:56,260 --> 00:05:01,090
the new programming language you are

00:04:57,790 --> 00:05:03,520
inventing tomorrow and on the other hand

00:05:01,090 --> 00:05:06,130
you can have language dependent code

00:05:03,520 --> 00:05:09,850
analysis so let's take a look at what's

00:05:06,130 --> 00:05:12,880
there for Java we have for example the

00:05:09,850 --> 00:05:15,639
CPD bear we call our analysis routines

00:05:12,880 --> 00:05:18,280
bears because they could also collect

00:05:15,639 --> 00:05:24,310
statistics or they can provide patches

00:05:18,280 --> 00:05:26,530
to fix your problems so this is the

00:05:24,310 --> 00:05:29,650
documentation for the CPD bear we can

00:05:26,530 --> 00:05:32,020
configure it we can run it for those

00:05:29,650 --> 00:05:34,680
languages because the tool below

00:05:32,020 --> 00:05:37,900
supports it that way and it searches for

00:05:34,680 --> 00:05:40,600
redundant code it tries to find function

00:05:37,900 --> 00:05:42,880
that are basically identical and one of

00:05:40,600 --> 00:05:49,780
them should be removed let's try that

00:05:42,880 --> 00:05:53,700
that's something cool right so if we run

00:05:49,780 --> 00:05:53,700
koala it'll tell us what we need to do

00:06:03,479 --> 00:06:10,110
so let's run this

00:06:05,430 --> 00:06:12,000
d bear on all java files and apparently

00:06:10,110 --> 00:06:14,430
there's something missing the CPD bear

00:06:12,000 --> 00:06:17,730
needs some configuration from us so it

00:06:14,430 --> 00:06:22,140
will be asked from us we want to do it

00:06:17,730 --> 00:06:24,060
it for java and then we can see the

00:06:22,140 --> 00:06:25,740
results we can browse the results in

00:06:24,060 --> 00:06:30,240
this interactive command-line interface

00:06:25,740 --> 00:06:32,760
and we can say open them in an editor

00:06:30,240 --> 00:06:35,460
and see that those functions are

00:06:32,760 --> 00:06:37,380
actually the same it will also detect it

00:06:35,460 --> 00:06:41,610
they are not exactly the same and all

00:06:37,380 --> 00:06:45,150
that stuff okay that's all nice and

00:06:41,610 --> 00:06:47,490
clean but we don't want to enter a

00:06:45,150 --> 00:06:51,840
command like this every time so we need

00:06:47,490 --> 00:06:53,960
some kind of configuration koala can

00:06:51,840 --> 00:06:56,280
generate a configuration automatically

00:06:53,960 --> 00:06:59,580
when I wrote this I was very frustrated

00:06:56,280 --> 00:07:02,850
with tools like make that also are also

00:06:59,580 --> 00:07:05,610
complained about how your firewalls and

00:07:02,850 --> 00:07:08,340
they knew the solution and they just

00:07:05,610 --> 00:07:10,380
told you to apply it manually but they

00:07:08,340 --> 00:07:13,530
knew the solution so why didn't they do

00:07:10,380 --> 00:07:16,290
it automatically koala asks me for it

00:07:13,530 --> 00:07:18,180
interactively and saves it directly into

00:07:16,290 --> 00:07:24,330
the configuration file I don't need to

00:07:18,180 --> 00:07:27,000
worry about this anymore so let's take a

00:07:24,330 --> 00:07:29,790
look at the generated file we see this

00:07:27,000 --> 00:07:31,920
is an any like syntax we can specify the

00:07:29,790 --> 00:07:34,800
stuff we're going to run and we can

00:07:31,920 --> 00:07:36,600
specify settings that will be delivered

00:07:34,800 --> 00:07:42,790
to all those beers in that particular

00:07:36,600 --> 00:07:58,040
section let's add analysis for Python

00:07:42,790 --> 00:08:00,530
this is the Java section and that's the

00:07:58,040 --> 00:08:08,390
Python section we can just add new

00:08:00,530 --> 00:08:12,530
sections and when we run koala again it

00:08:08,390 --> 00:08:17,570
will run all those sections here we see

00:08:12,530 --> 00:08:20,080
that the Java section is run and now we

00:08:17,570 --> 00:08:23,960
see that the Python section is run and

00:08:20,080 --> 00:08:27,470
in case of the Python koala can also

00:08:23,960 --> 00:08:31,970
suggest a patch to make our code better

00:08:27,470 --> 00:08:34,340
automatically we could go through the

00:08:31,970 --> 00:08:36,860
results one by one if we want to we

00:08:34,340 --> 00:08:49,550
could also tell it to deploy all patches

00:08:36,860 --> 00:08:51,440
automatically so let's do that so now we

00:08:49,550 --> 00:08:55,880
see koala has corrected all our Python

00:08:51,440 --> 00:09:01,430
files this is the git diff apparently it

00:08:55,880 --> 00:09:06,620
was not paid confirmed but we can do

00:09:01,430 --> 00:09:09,470
more we can combine language dependent

00:09:06,620 --> 00:09:12,470
with language independent analysis we

00:09:09,470 --> 00:09:15,230
can say check our java source code for

00:09:12,470 --> 00:09:17,150
spaces and tops and not having to

00:09:15,230 --> 00:09:19,400
rewrite this routine for java

00:09:17,150 --> 00:09:22,280
specifically and at the same time we can

00:09:19,400 --> 00:09:24,320
check it for coach clones which is a

00:09:22,280 --> 00:09:27,220
routine that is inherently dependent on

00:09:24,320 --> 00:09:27,220
the programming language

00:09:38,530 --> 00:09:44,870
so we don't want space we want apps

00:09:41,990 --> 00:09:47,420
because we have spices and now a koala

00:09:44,870 --> 00:09:52,490
can fix all our spaces and make them

00:09:47,420 --> 00:09:54,200
tubs and at the same time yes it can

00:09:52,490 --> 00:10:06,320
tell us that we have code duplication

00:09:54,200 --> 00:10:10,460
here alright so now you basically know

00:10:06,320 --> 00:10:13,100
how to use koala you can apply a lot of

00:10:10,460 --> 00:10:16,460
static code analysis to your files you

00:10:13,100 --> 00:10:18,830
can have different sections for Python

00:10:16,460 --> 00:10:20,840
maybe you want another tap with four

00:10:18,830 --> 00:10:23,450
make files you want to use taps for meg

00:10:20,840 --> 00:10:25,580
and spices for Python just put them into

00:10:23,450 --> 00:10:27,590
different sections and you're done you

00:10:25,580 --> 00:10:29,780
have one configuration file you have

00:10:27,590 --> 00:10:32,240
only one tool to learn you have only one

00:10:29,780 --> 00:10:34,790
documentation to browse and you don't

00:10:32,240 --> 00:10:37,220
need to worry about all those tools and

00:10:34,790 --> 00:10:40,520
as a developer you don't need to rewrite

00:10:37,220 --> 00:10:44,990
all this redundant stuff I want to very

00:10:40,520 --> 00:10:47,600
very briefly show you how how a bear is

00:10:44,990 --> 00:10:49,190
actually written because that is the

00:10:47,600 --> 00:10:51,860
secret if you want to make writing

00:10:49,190 --> 00:10:55,040
static code analysis easy then you have

00:10:51,860 --> 00:10:57,440
to make it really easy and you can't

00:10:55,040 --> 00:11:03,110
just say you provide an API and somebody

00:10:57,440 --> 00:11:08,860
has to override some complicated cost so

00:11:03,110 --> 00:11:10,840
let's write a bear let's write

00:11:08,860 --> 00:11:25,390
are the checks for to deuce in my sauce

00:11:10,840 --> 00:11:43,350
good so we can do this in an

00:11:25,390 --> 00:11:46,030
object-oriented manner and koala also

00:11:43,350 --> 00:11:48,160
automatically takes care of getting the

00:11:46,030 --> 00:11:51,310
settings from the user reading in the

00:11:48,160 --> 00:12:13,780
files and I just can modify I can work

00:11:51,310 --> 00:12:15,670
with the contents right ahead and we can

00:12:13,780 --> 00:12:18,130
just yield our results and with those

00:12:15,670 --> 00:12:21,160
very few lines we have already written a

00:12:18,130 --> 00:12:23,740
piece of static code analysis if we

00:12:21,160 --> 00:12:26,020
wanted to add configurability we will

00:12:23,740 --> 00:12:28,180
just add parameter to the signature of

00:12:26,020 --> 00:12:32,340
our function there is nothing simpler

00:12:28,180 --> 00:12:34,600
than that if we want the user to see

00:12:32,340 --> 00:12:37,180
explanations about the parameters we add

00:12:34,600 --> 00:12:39,910
a documentation comment we just write

00:12:37,180 --> 00:12:41,980
one function we can also add difference

00:12:39,910 --> 00:12:45,160
if we if we want to split it up but we

00:12:41,980 --> 00:12:47,170
only have to write this thing and koala

00:12:45,160 --> 00:12:50,710
will take care of all the rest it's

00:12:47,170 --> 00:12:58,510
logic only and the user gets the full

00:12:50,710 --> 00:13:01,480
usability for free okay that is the most

00:12:58,510 --> 00:13:04,120
important stuff for a koala I want to

00:13:01,480 --> 00:13:07,120
tell you a very very short bit about get

00:13:04,120 --> 00:13:09,190
mate which is a code review bot that

00:13:07,120 --> 00:13:12,810
automatically runs call on your source

00:13:09,190 --> 00:13:12,810
code on your github projects

00:13:22,000 --> 00:13:30,440
and automatically commence on your

00:13:27,470 --> 00:13:33,320
purists so if we want to enhance your

00:13:30,440 --> 00:13:36,230
code review with static code analysis

00:13:33,320 --> 00:13:38,330
you don't want to look at the ugly see I

00:13:36,230 --> 00:13:40,250
logs every time you want to have the

00:13:38,330 --> 00:13:42,770
comments of the static code analysis in

00:13:40,250 --> 00:13:44,720
the same location as the comments from

00:13:42,770 --> 00:13:47,750
the human so the human doesn't have to

00:13:44,720 --> 00:13:49,640
do them this is just one of the

00:13:47,750 --> 00:14:03,500
possibilities that you have if you have

00:13:49,640 --> 00:14:05,720
one unified API okay that was my

00:14:03,500 --> 00:14:10,340
presentation about Carla thank you all

00:14:05,720 --> 00:14:12,410
for your attention I'm not Sherman I'm a

00:14:10,340 --> 00:14:15,380
freelance software developer if you want

00:14:12,410 --> 00:14:18,530
you can contract me or whatever I'm

00:14:15,380 --> 00:14:21,590
doing most of this in my free time this

00:14:18,530 --> 00:14:23,410
guy in the front co-founded koala he

00:14:21,590 --> 00:14:26,000
basically wrote the very first version

00:14:23,410 --> 00:14:30,160
now feel free to ask us anything you

00:14:26,000 --> 00:14:30,160
want and thank you very much

00:14:33,190 --> 00:14:35,250

YouTube URL: https://www.youtube.com/watch?v=3AO5e0VFn7Q


