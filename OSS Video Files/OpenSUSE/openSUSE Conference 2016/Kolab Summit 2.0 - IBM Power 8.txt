Title: Kolab Summit 2.0 - IBM Power 8
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/1080-kolab-summit-2-0-ibm-power-8

Dr. Wolfgang Maier
IBM

Douglas DeMaio
Captions: 
	00:00:00,000 --> 00:00:05,009
this immersive Allah all right now it's

00:00:01,949 --> 00:00:08,040
absolutely thank you very much for the

00:00:05,009 --> 00:00:12,480
invitation Thank as last time in Zurich

00:00:08,040 --> 00:00:14,400
very cool place here from alpha prospect

00:00:12,480 --> 00:00:18,869
not so much for my temperature

00:00:14,400 --> 00:00:21,930
perspective of course but I think we

00:00:18,869 --> 00:00:24,930
will get that done my name is Wolfgang

00:00:21,930 --> 00:00:28,590
Meyer I'm a head of the hardware

00:00:24,930 --> 00:00:30,900
development team in the IBM research and

00:00:28,590 --> 00:00:35,510
development lab in building him my team

00:00:30,900 --> 00:00:39,629
is about three hundred engineers mostly

00:00:35,510 --> 00:00:41,460
logic deciders and we heard about power

00:00:39,629 --> 00:00:45,270
right a little bit and this is a

00:00:41,460 --> 00:00:49,050
significant design components of the

00:00:45,270 --> 00:00:53,910
power 8 actually are developed in in my

00:00:49,050 --> 00:00:55,710
team so sometimes it's not that Bell

00:00:53,910 --> 00:00:58,170
known that a lot of processes

00:00:55,710 --> 00:01:01,530
development still down here in in

00:00:58,170 --> 00:01:05,309
germany since of course Intel as most of

00:01:01,530 --> 00:01:09,330
their development teams sitting in the

00:01:05,309 --> 00:01:11,729
US what I want to do today I want to

00:01:09,330 --> 00:01:13,200
talk a little bit about powerade I want

00:01:11,729 --> 00:01:15,740
to talk a little bit about hardware

00:01:13,200 --> 00:01:21,119
technology in common not only power 8

00:01:15,740 --> 00:01:23,250
and as we have heard before I listen to

00:01:21,119 --> 00:01:25,200
the presentation and there were two

00:01:23,250 --> 00:01:27,360
parts the first part was about these

00:01:25,200 --> 00:01:30,689
bread street stuff and the roadmap and

00:01:27,360 --> 00:01:32,790
then there was the what the developer

00:01:30,689 --> 00:01:36,390
called the fancy stuff of course and uh

00:01:32,790 --> 00:01:38,220
pretty much when I hear software guys

00:01:36,390 --> 00:01:40,680
talking about the fancy stuff there is a

00:01:38,220 --> 00:01:43,470
kind of alarm bell ringing in myself

00:01:40,680 --> 00:01:45,630
because this means ah these guys need

00:01:43,470 --> 00:01:50,159
more performance in the future as usual

00:01:45,630 --> 00:01:52,020
okay and I now if we really want to

00:01:50,159 --> 00:01:54,420
deliver more performance we have to

00:01:52,020 --> 00:01:57,420
think a little bit about Moore's law

00:01:54,420 --> 00:02:03,390
this is what I want to start because I

00:01:57,420 --> 00:02:05,820
think when we look at the last 30 years

00:02:03,390 --> 00:02:11,220
or so performance was not a big issue

00:02:05,820 --> 00:02:13,770
and the reason for that was we had very

00:02:11,220 --> 00:02:18,480
huge steps forward in semiconductor

00:02:13,770 --> 00:02:22,190
technology Gordon Moore did a bold

00:02:18,480 --> 00:02:26,310
statement in the 1960s which said okay

00:02:22,190 --> 00:02:28,890
within the next decades we can raise

00:02:26,310 --> 00:02:33,420
performance every two years by a factor

00:02:28,890 --> 00:02:36,180
of two and I think in his equation the

00:02:33,420 --> 00:02:39,140
first thing he was focusing on what

00:02:36,180 --> 00:02:42,450
number of transistors on a chip I think

00:02:39,140 --> 00:02:44,880
when we look at the projection musleh

00:02:42,450 --> 00:02:47,550
pretty much was fulfilled almost

00:02:44,880 --> 00:02:53,190
perfectly over 40 years now or almost 50

00:02:47,550 --> 00:02:55,170
years but I think one more really meant

00:02:53,190 --> 00:02:57,690
or how the Moore's Law is integrated

00:02:55,170 --> 00:02:59,730
it's not only about the technical stuff

00:02:57,690 --> 00:03:03,600
it's also about the economical stuff

00:02:59,730 --> 00:03:05,459
this means we can produce more

00:03:03,600 --> 00:03:08,880
performance actually for more or less

00:03:05,459 --> 00:03:12,780
the same price relation as we had it in

00:03:08,880 --> 00:03:15,209
the almost in the 60s and I think if we

00:03:12,780 --> 00:03:18,180
could not resolve this equation in that

00:03:15,209 --> 00:03:20,880
way the complete complete digital

00:03:18,180 --> 00:03:22,470
development of the last 34 years would

00:03:20,880 --> 00:03:25,080
not have been possible because we

00:03:22,470 --> 00:03:30,180
couldn't have for it that's I think what

00:03:25,080 --> 00:03:32,610
we should keep in mind um so that's also

00:03:30,180 --> 00:03:36,060
why I picked this von line and call it

00:03:32,610 --> 00:03:40,670
Moore's law but we see here more or less

00:03:36,060 --> 00:03:46,230
pretty much since the 1950s we could

00:03:40,670 --> 00:03:50,910
lower the cost of a single calculation

00:03:46,230 --> 00:03:53,370
more or less and / to every two years

00:03:50,910 --> 00:03:57,660
this means today whether you talk about

00:03:53,370 --> 00:03:59,940
petaflop sword or a big number of flops

00:03:57,660 --> 00:04:03,200
actually then this was only possible

00:03:59,940 --> 00:04:06,299
because we had obviously done okay now

00:04:03,200 --> 00:04:08,940
as our developer looking at that a

00:04:06,299 --> 00:04:12,570
little bit closer what we see is the

00:04:08,940 --> 00:04:17,100
patterns have changed over the last five

00:04:12,570 --> 00:04:18,959
to six years since besides the number of

00:04:17,100 --> 00:04:22,470
transistors we had on the hardware of

00:04:18,959 --> 00:04:23,100
the other strong source of performance

00:04:22,470 --> 00:04:26,700
actually

00:04:23,100 --> 00:04:28,380
the frequency frequency there have been

00:04:26,700 --> 00:04:31,050
another law which is not that popular

00:04:28,380 --> 00:04:33,090
it's the so-called Dennard low frequency

00:04:31,050 --> 00:04:35,310
could be raised because with the smaller

00:04:33,090 --> 00:04:37,640
transistors actually the power

00:04:35,310 --> 00:04:43,260
consumption of this transistor is also

00:04:37,640 --> 00:04:46,620
declined now as we are so far down in

00:04:43,260 --> 00:04:48,750
the atoms already we have to get closer

00:04:46,620 --> 00:04:54,360
to that as we are so far down in the

00:04:48,750 --> 00:04:57,120
atoms we could not raise frequency that

00:04:54,360 --> 00:04:58,740
much over the last five to ten years the

00:04:57,120 --> 00:05:01,170
reason for that is that there is a

00:04:58,740 --> 00:05:03,840
pretty strong dependency between power

00:05:01,170 --> 00:05:05,490
consumption and frequency and more or

00:05:03,840 --> 00:05:06,960
less with frequency we are we have

00:05:05,490 --> 00:05:09,450
arrived to break even something like

00:05:06,960 --> 00:05:12,090
five years ago and what you see is of

00:05:09,450 --> 00:05:13,830
course Intel is interpreting that in a

00:05:12,090 --> 00:05:15,600
little bit different than way than we do

00:05:13,830 --> 00:05:17,730
we have some special technologies but

00:05:15,600 --> 00:05:21,690
more or less between three and five

00:05:17,730 --> 00:05:23,130
gigahertz is where we have two more or

00:05:21,690 --> 00:05:26,820
less give up on the frequency like

00:05:23,130 --> 00:05:29,400
working and this means when we want to

00:05:26,820 --> 00:05:31,230
allow a development like this and raise

00:05:29,400 --> 00:05:33,660
performance and pretty much support all

00:05:31,230 --> 00:05:36,470
your creativity in the future we have to

00:05:33,660 --> 00:05:39,060
rethink a little bit how we can produce

00:05:36,470 --> 00:05:41,040
performance so that this equation will

00:05:39,060 --> 00:05:44,370
stay alive because if this equation is

00:05:41,040 --> 00:05:46,140
not alive then the affordability of all

00:05:44,370 --> 00:05:48,150
the things which we call Big Data and

00:05:46,140 --> 00:05:50,490
all the other hype is much more

00:05:48,150 --> 00:05:52,590
difficult than now we'd like to have

00:05:50,490 --> 00:05:56,520
that okay and now what I want to do

00:05:52,590 --> 00:06:00,360
today a little bit is to demonstrate and

00:05:56,520 --> 00:06:02,940
show some features some thoughts share

00:06:00,360 --> 00:06:04,980
some thoughts on how we can catch up

00:06:02,940 --> 00:06:08,160
with equation with this equation also in

00:06:04,980 --> 00:06:10,800
the future and what our our technology

00:06:08,160 --> 00:06:15,630
and IBM of course is doing in order to

00:06:10,800 --> 00:06:18,720
do that so one thing is what we see here

00:06:15,630 --> 00:06:21,470
this is a still a technology feature ok

00:06:18,720 --> 00:06:23,220
so far the maid driver always was

00:06:21,470 --> 00:06:24,980
semiconductor technology and the

00:06:23,220 --> 00:06:28,110
question is can see me conductor

00:06:24,980 --> 00:06:30,150
technology not contribute anymore to

00:06:28,110 --> 00:06:33,450
performance improvements or to post

00:06:30,150 --> 00:06:36,080
performance improvements and the NGO is

00:06:33,450 --> 00:06:38,960
well there are still some features which

00:06:36,080 --> 00:06:43,340
can help here and this is a typical one

00:06:38,960 --> 00:06:45,710
that sv cannot raise frequency we go

00:06:43,340 --> 00:06:47,979
towards parallelization hey this means

00:06:45,710 --> 00:06:51,080
you have all seen this trend we go from

00:06:47,979 --> 00:06:54,560
double core to eight core 2 12 court

00:06:51,080 --> 00:06:57,439
decides this will also continue for a

00:06:54,560 --> 00:06:59,330
certain while because we still have the

00:06:57,439 --> 00:07:02,120
Tokra fee actually which allows us to

00:06:59,330 --> 00:07:05,689
put more transistors on the chip but in

00:07:02,120 --> 00:07:08,659
order to make more course on the chip

00:07:05,689 --> 00:07:10,340
also efficient you have to build an

00:07:08,659 --> 00:07:15,590
infrastructure on the chip strip which

00:07:10,340 --> 00:07:18,440
helps you to get these to get these

00:07:15,590 --> 00:07:20,629
engines really in the mode where they

00:07:18,440 --> 00:07:23,449
can work efficiently involve our very

00:07:20,629 --> 00:07:26,330
important part in that is that you have

00:07:23,449 --> 00:07:28,759
cash structures on the chip stage

00:07:26,330 --> 00:07:30,349
cash-strapped structures actually in big

00:07:28,759 --> 00:07:34,250
cash structures okay and what we see

00:07:30,349 --> 00:07:36,409
here is a technology which allows you to

00:07:34,250 --> 00:07:38,870
build much bigger cash is actually on

00:07:36,409 --> 00:07:41,270
your trip and as you say we will see

00:07:38,870 --> 00:07:43,039
later on a little bit of course power

00:07:41,270 --> 00:07:45,529
rate for example is very famous for its

00:07:43,039 --> 00:07:47,990
cash purchase now that doesn't come by

00:07:45,529 --> 00:07:50,990
by itself this comes by this technology

00:07:47,990 --> 00:07:53,509
and this technology is something we do

00:07:50,990 --> 00:07:57,169
especially for our chips it's called

00:07:53,509 --> 00:08:00,289
deep trench and I it works in that way

00:07:57,169 --> 00:08:02,509
that usually in order to realize cash

00:08:00,289 --> 00:08:04,940
structures or chip use so-called SRAM

00:08:02,509 --> 00:08:08,120
cells and som cells consume something

00:08:04,940 --> 00:08:10,639
like six transistors okay now what we

00:08:08,120 --> 00:08:13,490
found out is if you are capable to build

00:08:10,639 --> 00:08:16,370
a relatively high capacity on a chip you

00:08:13,490 --> 00:08:19,849
can also build a cell which consumes

00:08:16,370 --> 00:08:23,210
just two transistors and so called dear

00:08:19,849 --> 00:08:25,819
M cell drm technology is used in memory

00:08:23,210 --> 00:08:27,860
so far it was not possible to integrate

00:08:25,819 --> 00:08:29,509
that directly into the chip with this

00:08:27,860 --> 00:08:33,409
technology is possible and what you do

00:08:29,509 --> 00:08:36,019
is deep trench means you you etch a

00:08:33,409 --> 00:08:39,140
relatively deep hole into the process

00:08:36,019 --> 00:08:40,789
into the silicon and with this deep hole

00:08:39,140 --> 00:08:44,149
you are capable to build a high capacity

00:08:40,789 --> 00:08:45,740
okay you blow some metal dust into that

00:08:44,149 --> 00:08:48,600
and you have a perfect capacitor and

00:08:45,740 --> 00:08:53,459
this means this allows you to

00:08:48,600 --> 00:08:55,769
these two transistor erm cells on the

00:08:53,459 --> 00:08:58,800
chip and this means you get a cash

00:08:55,769 --> 00:09:00,690
density which is a factor three compared

00:08:58,800 --> 00:09:04,470
to a sperm cell and as we will see later

00:09:00,690 --> 00:09:07,440
on in the comparison this allows us to

00:09:04,470 --> 00:09:10,470
build this extremely high caches or big

00:09:07,440 --> 00:09:13,110
caches now of course usually these

00:09:10,470 --> 00:09:15,420
equations are sometimes there is a

00:09:13,110 --> 00:09:17,610
burden you have to pay for it the burden

00:09:15,420 --> 00:09:19,350
in this case is the etching process in

00:09:17,610 --> 00:09:22,319
order to burn the whole take something

00:09:19,350 --> 00:09:24,360
like six weeks since I mean it's just

00:09:22,319 --> 00:09:27,149
for micrometer but for micro meter is a

00:09:24,360 --> 00:09:29,310
relatively cheap or not in a processor

00:09:27,149 --> 00:09:31,230
ok so this six weeks of course is

00:09:29,310 --> 00:09:33,240
something which you missing your

00:09:31,230 --> 00:09:36,360
development cycle and as we of course

00:09:33,240 --> 00:09:39,000
all start on the type to market this is

00:09:36,360 --> 00:09:42,329
something which specifically we as

00:09:39,000 --> 00:09:45,329
developers of course we love to have the

00:09:42,329 --> 00:09:47,160
big caches but we hate to pay six weeks

00:09:45,329 --> 00:09:48,720
for it actually in our development cycle

00:09:47,160 --> 00:09:51,899
so that's that's the equation we want

00:09:48,720 --> 00:09:54,720
you then of course another thing is you

00:09:51,899 --> 00:09:55,980
need to be cassius but as we have so

00:09:54,720 --> 00:09:57,120
much traffic I mean we have a

00:09:55,980 --> 00:09:59,610
superscalar are out of order

00:09:57,120 --> 00:10:02,730
architecture on these chips now with a

00:09:59,610 --> 00:10:05,310
mighty course you can imagine it's not

00:10:02,730 --> 00:10:08,880
quite simple to exchange all the data in

00:10:05,310 --> 00:10:14,310
between this morning when I pretty much

00:10:08,880 --> 00:10:18,000
travelled from Stuttgart to number and

00:10:14,310 --> 00:10:19,800
yeah I got a proof again on what it

00:10:18,000 --> 00:10:22,170
means to have congestion on the Autobahn

00:10:19,800 --> 00:10:25,380
in this case I mean you have a similar

00:10:22,170 --> 00:10:27,600
situation in a processor today okay you

00:10:25,380 --> 00:10:30,360
have several course all these course

00:10:27,600 --> 00:10:32,279
have a lot of different units and now

00:10:30,360 --> 00:10:34,439
there are a lot of guys actually who

00:10:32,279 --> 00:10:36,689
want to run their threats through this

00:10:34,439 --> 00:10:38,399
course since we do as we see later we

00:10:36,689 --> 00:10:42,480
also do simultaneous multi-threading and

00:10:38,399 --> 00:10:45,389
of course it's in extremely important to

00:10:42,480 --> 00:10:48,810
have a infrastructure in place passes in

00:10:45,389 --> 00:10:50,639
place which allows you to keep these

00:10:48,810 --> 00:10:51,870
things officials and this is also a

00:10:50,639 --> 00:10:57,870
difference actually which we have

00:10:51,870 --> 00:11:01,319
compared to other chip producers we use

00:10:57,870 --> 00:11:01,950
another stack actually but you can see

00:11:01,319 --> 00:11:06,570
on the left

00:11:01,950 --> 00:11:10,020
this is pretty much as a electron scan

00:11:06,570 --> 00:11:12,540
microscope of a chip which we have cut

00:11:10,020 --> 00:11:15,570
in the middle and you see there are 50

00:11:12,540 --> 00:11:17,370
layers of metal and pretty much down in

00:11:15,570 --> 00:11:19,950
the silicon today we have something like

00:11:17,370 --> 00:11:22,370
four billion transistors and of course

00:11:19,950 --> 00:11:24,930
the more layers you have and the faster

00:11:22,370 --> 00:11:26,640
connections you have the more efficient

00:11:24,930 --> 00:11:29,060
you can now connect these transistors

00:11:26,640 --> 00:11:31,590
with one another and we have a special

00:11:29,060 --> 00:11:35,010
copper layers in there also the stacked

00:11:31,590 --> 00:11:36,810
layers and the number of layers 50 metal

00:11:35,010 --> 00:11:38,580
layers is much higher than with other

00:11:36,810 --> 00:11:40,680
venues and we will look at the

00:11:38,580 --> 00:11:43,140
performance later on a little bit as we

00:11:40,680 --> 00:11:45,270
heard before power it is showing pretty

00:11:43,140 --> 00:11:47,580
good performance numbers that does not

00:11:45,270 --> 00:11:49,290
mean that Intel doesn't okay and we I

00:11:47,580 --> 00:11:51,750
try to explain a little bit what the

00:11:49,290 --> 00:11:53,730
difference is but this is also one of

00:11:51,750 --> 00:11:57,000
the technology reasons why we still

00:11:53,730 --> 00:12:00,720
cannot get into this good performance

00:11:57,000 --> 00:12:05,670
numbers okay then I what I mentioned

00:12:00,720 --> 00:12:08,540
before of course is we get more parallel

00:12:05,670 --> 00:12:12,270
okay this means when you don't get a

00:12:08,540 --> 00:12:14,430
usual processor well at a at a power 8

00:12:12,270 --> 00:12:16,410
core specifically because what we build

00:12:14,430 --> 00:12:20,220
these are really heavy load course okay

00:12:16,410 --> 00:12:22,650
these are not any low-power fancy stuff

00:12:20,220 --> 00:12:25,200
actually we build big machines okay

00:12:22,650 --> 00:12:27,450
that's that's our goal and that's pretty

00:12:25,200 --> 00:12:28,680
much it does not mean that a big machine

00:12:27,450 --> 00:12:31,050
all this is better than the small

00:12:28,680 --> 00:12:35,280
machine but that's how we understand our

00:12:31,050 --> 00:12:37,170
okay now usually when you when you run

00:12:35,280 --> 00:12:38,850
this mighty course of course they

00:12:37,170 --> 00:12:44,930
consume a little bit more power we see

00:12:38,850 --> 00:12:44,930
that later on but usually with today's

00:12:46,310 --> 00:12:51,480
implementations of software where we do

00:12:48,630 --> 00:12:54,840
not take a lot of emphasis on

00:12:51,480 --> 00:12:57,630
parallelization it's pretty difficult to

00:12:54,840 --> 00:12:59,190
completely utilize the complete core

00:12:57,630 --> 00:13:02,910
okay this means when you look at the

00:12:59,190 --> 00:13:05,730
picture in this in a regular processor

00:13:02,910 --> 00:13:08,640
core we have a high number of different

00:13:05,730 --> 00:13:10,950
units and now when you run are actually

00:13:08,640 --> 00:13:14,910
a threat for this software threat for

00:13:10,950 --> 00:13:17,190
this unit then mostly only allows more

00:13:14,910 --> 00:13:20,490
number of the series really utilize the

00:13:17,190 --> 00:13:23,160
other part is more or less waiting till

00:13:20,490 --> 00:13:24,840
the other guys actually are getting done

00:13:23,160 --> 00:13:26,370
with their stuff and then they get into

00:13:24,840 --> 00:13:29,790
play again with the next cycle okay

00:13:26,370 --> 00:13:31,980
that's how it usually works now of

00:13:29,790 --> 00:13:34,370
course I mean pretty simple the question

00:13:31,980 --> 00:13:39,870
is why don't you realize these resources

00:13:34,370 --> 00:13:41,460
and most of the processor vendors

00:13:39,870 --> 00:13:43,470
actually do that meanwhile it's called

00:13:41,460 --> 00:13:44,940
hyper threading the detail detail we

00:13:43,470 --> 00:13:48,420
call it a simultaneous multi-threading

00:13:44,940 --> 00:13:50,760
this means now you implement also a

00:13:48,420 --> 00:13:53,700
supervision logic actually which is

00:13:50,760 --> 00:13:57,300
watching several threads which will flow

00:13:53,700 --> 00:13:59,520
of the score okay and this is what you

00:13:57,300 --> 00:14:03,390
see on the right side you have a blue

00:13:59,520 --> 00:14:05,970
thread and you have a red thread and you

00:14:03,390 --> 00:14:11,430
can run these things in parallel now of

00:14:05,970 --> 00:14:13,590
course sounds very simple and for sure

00:14:11,430 --> 00:14:15,210
it's the right thing to do if you want

00:14:13,590 --> 00:14:18,960
to support this parallel structure spot

00:14:15,210 --> 00:14:20,580
as a user you have to use a feature like

00:14:18,960 --> 00:14:22,800
that a little bit more carefully than

00:14:20,580 --> 00:14:25,290
the things before which we have / before

00:14:22,800 --> 00:14:30,750
be caches I mean you don't have to take

00:14:25,290 --> 00:14:33,120
a lot of into regard when you write your

00:14:30,750 --> 00:14:34,710
software when you want to exploit a

00:14:33,120 --> 00:14:37,770
feature like that in the right way you

00:14:34,710 --> 00:14:39,900
have to because it does not fit into

00:14:37,770 --> 00:14:42,360
every workload approach it only fits if

00:14:39,900 --> 00:14:47,340
paralyzation fits to the workload and

00:14:42,360 --> 00:14:49,830
I'm it's also something which has to be

00:14:47,340 --> 00:14:51,990
kind of balanced in regard to the

00:14:49,830 --> 00:14:54,420
configuration cache size memory sizes

00:14:51,990 --> 00:14:58,140
and to the specific drug lords let me

00:14:54,420 --> 00:15:01,200
give an example we had a POC running

00:14:58,140 --> 00:15:04,010
with index and it is a huge Russian

00:15:01,200 --> 00:15:06,480
search engine pretty much the

00:15:04,010 --> 00:15:11,280
counterpart to Google in the more

00:15:06,480 --> 00:15:13,740
karelian letters space and they started

00:15:11,280 --> 00:15:15,870
to work with power right on their own

00:15:13,740 --> 00:15:18,930
and we're a little bit disappointed

00:15:15,870 --> 00:15:20,280
actually at the beginning to of course

00:15:18,930 --> 00:15:22,440
they could not really figure in the

00:15:20,280 --> 00:15:25,350
sweet spot for for example single time

00:15:22,440 --> 00:15:27,450
Alton so we can some POC they had to do

00:15:25,350 --> 00:15:30,540
some adjustments in their code and on

00:15:27,450 --> 00:15:33,480
top of that they had to learn that if

00:15:30,540 --> 00:15:34,950
you run on highest smt you know mode

00:15:33,480 --> 00:15:38,970
that does not mean you've got best

00:15:34,950 --> 00:15:41,880
performance okay in differentiation to

00:15:38,970 --> 00:15:45,450
Intel we have different modi you can run

00:15:41,880 --> 00:15:47,880
set1 which is pretty much non smt and

00:15:45,450 --> 00:15:51,600
it's a t2 so you can run to as an empty

00:15:47,880 --> 00:15:53,610
threats in parallel smt for and smt 8 ok

00:15:51,600 --> 00:15:56,430
and the sweet spot of course does not

00:15:53,610 --> 00:15:59,070
mean smt 8 is always the best choice in

00:15:56,430 --> 00:16:01,110
their case for example they could get to

00:15:59,070 --> 00:16:02,910
performance improvement with is a little

00:16:01,110 --> 00:16:07,830
bit wiggling in the code actually which

00:16:02,910 --> 00:16:10,410
was around factor 3 when we got to SF 38

00:16:07,830 --> 00:16:12,480
molt I tried that actually the drop down

00:16:10,410 --> 00:16:14,340
against a template something like 1.5

00:16:12,480 --> 00:16:17,910
okay so it's something you have to take

00:16:14,340 --> 00:16:23,520
into regard also at the beginning of

00:16:17,910 --> 00:16:25,220
course we got some surprises since of

00:16:23,520 --> 00:16:29,460
course you have to pay a little burden

00:16:25,220 --> 00:16:31,590
in order to keep the flats actually

00:16:29,460 --> 00:16:33,510
separate from one another this means if

00:16:31,590 --> 00:16:35,970
you have a benchmark which is focused on

00:16:33,510 --> 00:16:37,470
single thread performance you may get a

00:16:35,970 --> 00:16:39,570
little bit surprised about that because

00:16:37,470 --> 00:16:41,640
I mean because we have technology

00:16:39,570 --> 00:16:44,370
improvements and we also raise sing of

00:16:41,640 --> 00:16:46,440
your performance but in this case let me

00:16:44,370 --> 00:16:50,070
do a simple example you have two threads

00:16:46,440 --> 00:16:52,320
actually and our each thread takes one

00:16:50,070 --> 00:16:55,470
second okay so when you are in single

00:16:52,320 --> 00:16:57,600
thread mode of course the complete

00:16:55,470 --> 00:16:59,790
runtime is 1 plus 1 this is 2 seconds

00:16:57,600 --> 00:17:01,290
okay now say okay great i have a single

00:16:59,790 --> 00:17:05,400
time miss Martha feeling I flow it in

00:17:01,290 --> 00:17:07,949
this mode you get to a little bit burden

00:17:05,400 --> 00:17:11,310
and you say okay it's right now takes

00:17:07,949 --> 00:17:13,079
one point two seconds okay so it's still

00:17:11,310 --> 00:17:16,110
better I mean you got from two seconds

00:17:13,079 --> 00:17:17,459
to 1.2 seconds which is improvement now

00:17:16,110 --> 00:17:20,339
if you have a benchmark which is

00:17:17,459 --> 00:17:22,589
focusing on single thread only you will

00:17:20,339 --> 00:17:24,329
get worse okay because you got from one

00:17:22,589 --> 00:17:26,850
section to 1.2 60 you have to be very

00:17:24,329 --> 00:17:29,130
careful also when you try to leverage

00:17:26,850 --> 00:17:31,560
feature like that actually to explore it

00:17:29,130 --> 00:17:33,690
in the right way okay and I think this

00:17:31,560 --> 00:17:34,530
is also kind of the pattern we see more

00:17:33,690 --> 00:17:36,900
and more

00:17:34,530 --> 00:17:38,420
we need a stronger collaboration between

00:17:36,900 --> 00:17:41,160
software guys hardware guys

00:17:38,420 --> 00:17:43,640
virtualization guys actually because the

00:17:41,160 --> 00:17:45,660
stack function is taking no more

00:17:43,640 --> 00:17:50,760
focusing the complete performance

00:17:45,660 --> 00:17:52,350
evaluation in the efficiency ok ok so

00:17:50,760 --> 00:17:54,240
this one thing of course there are other

00:17:52,350 --> 00:17:58,290
features which maybe are a little bit

00:17:54,240 --> 00:18:00,390
easier to exploit for example like cindy

00:17:58,290 --> 00:18:02,040
engines this is just vectorization of

00:18:00,390 --> 00:18:05,910
floating-point units and things like

00:18:02,040 --> 00:18:09,060
that another very interesting area is

00:18:05,910 --> 00:18:12,660
the field of hardware acceleration this

00:18:09,060 --> 00:18:17,300
means you really implement special

00:18:12,660 --> 00:18:20,190
function components the reason why

00:18:17,300 --> 00:18:22,770
hardware acceleration has get a bigger

00:18:20,190 --> 00:18:27,750
height within the last five to ten years

00:18:22,770 --> 00:18:30,330
is one party's FPGA technology has made

00:18:27,750 --> 00:18:32,790
good progress forward and the other part

00:18:30,330 --> 00:18:34,830
is now that we have this big number of

00:18:32,790 --> 00:18:38,130
transistors available on on the

00:18:34,830 --> 00:18:41,520
processor we pull in more functions into

00:18:38,130 --> 00:18:44,330
the processor scope ok this means in the

00:18:41,520 --> 00:18:47,130
past we usually had a proprietary

00:18:44,330 --> 00:18:50,180
interface out of the process into a I

00:18:47,130 --> 00:18:52,830
ohop function which was a separate chip

00:18:50,180 --> 00:18:57,960
meanwhile we implement this chip

00:18:52,830 --> 00:19:00,570
directly into the process and our are on

00:18:57,960 --> 00:19:02,400
the step actually to include that cache

00:19:00,570 --> 00:19:06,750
coherent lead to the rest of the caches

00:19:02,400 --> 00:19:09,060
this means you've got WAY WAY faster io

00:19:06,750 --> 00:19:10,710
attachments and you got way smaller

00:19:09,060 --> 00:19:15,110
agencies and this means you can leverage

00:19:10,710 --> 00:19:18,200
these acceleration techniques much more

00:19:15,110 --> 00:19:21,870
efficiently than you put in the past ok

00:19:18,200 --> 00:19:26,030
overall I think there are different

00:19:21,870 --> 00:19:30,360
types of accelerators which we

00:19:26,030 --> 00:19:32,310
distinguish in this context accelerators

00:19:30,360 --> 00:19:34,530
in common is a big field we also have on

00:19:32,310 --> 00:19:37,320
processor development this is also a try

00:19:34,530 --> 00:19:39,780
on processor accelerator this also Trent

00:19:37,320 --> 00:19:41,580
we see there we reserve some of the

00:19:39,780 --> 00:19:43,980
transistor sexually and implementing

00:19:41,580 --> 00:19:45,570
special functions you see that on the

00:19:43,980 --> 00:19:47,460
power for example for compression

00:19:45,570 --> 00:19:49,950
purposes or for encryption

00:19:47,460 --> 00:19:54,210
is we have special acceleration inch of

00:19:49,950 --> 00:19:55,760
zexal in the school day this what I put

00:19:54,210 --> 00:19:58,289
a little bit light on here is

00:19:55,760 --> 00:20:01,770
specifically the area of cheap you

00:19:58,289 --> 00:20:04,080
attachments cheap your graphical

00:20:01,770 --> 00:20:05,520
processors have a good ecosystem this

00:20:04,080 --> 00:20:09,149
means there is a programming language

00:20:05,520 --> 00:20:11,279
you can use and there is also a more

00:20:09,149 --> 00:20:13,559
easier way actually to integrate that

00:20:11,279 --> 00:20:15,809
into your operating system flow by

00:20:13,559 --> 00:20:19,710
having device drivers all that stuff so

00:20:15,809 --> 00:20:21,809
from that perspective cheap use are very

00:20:19,710 --> 00:20:24,690
interesting right at the moment for

00:20:21,809 --> 00:20:26,700
example the photo sending really runs a

00:20:24,690 --> 00:20:29,070
huge super computing project in the

00:20:26,700 --> 00:20:34,220
human brain space where human brain

00:20:29,070 --> 00:20:37,409
functions are simulated they do a very

00:20:34,220 --> 00:20:39,960
sophisticated balancing between our

00:20:37,409 --> 00:20:43,830
eight compute power and GPU compute

00:20:39,960 --> 00:20:46,500
power for paralyzation purposes since

00:20:43,830 --> 00:20:48,570
this graphical processes they are not

00:20:46,500 --> 00:20:50,399
quite as powerful as for example power a

00:20:48,570 --> 00:20:52,830
core but of course their number is

00:20:50,399 --> 00:20:56,100
relatively high and they do not consume

00:20:52,830 --> 00:20:58,980
too much power so that's a good thing of

00:20:56,100 --> 00:21:01,919
course you need some knowledge how to to

00:20:58,980 --> 00:21:03,840
integrate that into your flow the other

00:21:01,919 --> 00:21:08,070
very interesting part is the so called

00:21:03,840 --> 00:21:11,690
fpgas fpgas are special hardware which

00:21:08,070 --> 00:21:14,220
you can program in a certain language

00:21:11,690 --> 00:21:16,279
alterra has come up with a language

00:21:14,220 --> 00:21:24,020
called opencl which from our perspective

00:21:16,279 --> 00:21:27,770
is very well suited to do quick and fast

00:21:24,020 --> 00:21:30,570
quick and dirty i would say prototype

00:21:27,770 --> 00:21:33,419
development if you want to use an fpga

00:21:30,570 --> 00:21:35,730
in a product like environment it's a

00:21:33,419 --> 00:21:38,130
little bit more difficult because

00:21:35,730 --> 00:21:39,809
they're opencl zone is not the best

00:21:38,130 --> 00:21:42,539
choice because you don't get all

00:21:39,809 --> 00:21:45,899
capabilities of the fpga there you

00:21:42,539 --> 00:21:47,789
should really use languages like VHDL

00:21:45,899 --> 00:21:50,429
over a lot because they make it more

00:21:47,789 --> 00:21:52,350
efficient at this of course means then

00:21:50,429 --> 00:21:53,909
you need some experts I mean for us as

00:21:52,350 --> 00:21:57,299
process of developers it's not a big

00:21:53,909 --> 00:22:00,029
deal but for software development guys

00:21:57,299 --> 00:22:00,540
getting in that deep kind of hardware

00:22:00,029 --> 00:22:02,250
language

00:22:00,540 --> 00:22:04,620
so cause a little bit more difficult so

00:22:02,250 --> 00:22:07,560
from that perspective the consumer

00:22:04,620 --> 00:22:12,120
bility of this is certainly a little bit

00:22:07,560 --> 00:22:14,160
more complicated than with GPUs but from

00:22:12,120 --> 00:22:18,180
an efficiency perspective you can

00:22:14,160 --> 00:22:19,890
accelerate a specific brokers fact 2000

00:22:18,180 --> 00:22:21,540
for example of for Monte Carlo

00:22:19,890 --> 00:22:24,660
simulation we have seen effects like

00:22:21,540 --> 00:22:27,380
that in the frequency trading stuff but

00:22:24,660 --> 00:22:29,540
the effort of course also is relative

00:22:27,380 --> 00:22:32,190
okay and then of course there is Mona

00:22:29,540 --> 00:22:34,380
there's some other stuff I don't want to

00:22:32,190 --> 00:22:36,420
go in too much detail and you can use

00:22:34,380 --> 00:22:39,240
these fast interfaces for a memory

00:22:36,420 --> 00:22:41,970
database processing actually for example

00:22:39,240 --> 00:22:44,850
using non-volatile storage light flesh

00:22:41,970 --> 00:22:46,770
instead of atoms and stuff like that and

00:22:44,850 --> 00:22:50,910
then there is of course a very

00:22:46,770 --> 00:22:53,550
interesting new area I just want to lose

00:22:50,910 --> 00:22:55,980
a little bit here but say some more

00:22:53,550 --> 00:22:58,650
words at the end this is the area of

00:22:55,980 --> 00:23:01,350
neurosynaptic this means there we use

00:22:58,650 --> 00:23:06,000
completely new processor architectures

00:23:01,350 --> 00:23:09,300
which don't run with I frequencies but

00:23:06,000 --> 00:23:11,070
which are very close align to the human

00:23:09,300 --> 00:23:13,350
brain function and for that reason have

00:23:11,070 --> 00:23:16,290
power efficiencies which are affected

00:23:13,350 --> 00:23:17,730
10,000 higher than the usual 49 of

00:23:16,290 --> 00:23:21,090
architecture I will talk about that a

00:23:17,730 --> 00:23:23,700
little bit later on but yeah if he is

00:23:21,090 --> 00:23:26,310
also of course to use this type of

00:23:23,700 --> 00:23:28,110
hardware then for a special hardware

00:23:26,310 --> 00:23:30,300
acceleration purposes for special work

00:23:28,110 --> 00:23:34,110
okay specifically pebbly recognition in

00:23:30,300 --> 00:23:36,420
this case okay so that's a this other

00:23:34,110 --> 00:23:39,200
the sources of these are some of the

00:23:36,420 --> 00:23:42,770
sources actually which you can use to

00:23:39,200 --> 00:23:45,630
gain more performance to resolve the

00:23:42,770 --> 00:23:48,180
Moore's law equation in in a good way

00:23:45,630 --> 00:23:50,490
now of course in power rate just

00:23:48,180 --> 00:23:52,380
examples of that all of these features

00:23:50,490 --> 00:23:55,980
are implemented I talked about big

00:23:52,380 --> 00:23:59,570
caches I talked about the SMT as I

00:23:55,980 --> 00:24:03,990
mentioned before we have smt 248 mode

00:23:59,570 --> 00:24:05,610
we're just rethinking the smt eight

00:24:03,990 --> 00:24:08,370
right at the moment we could not find a

00:24:05,610 --> 00:24:10,260
lot of applications which really use

00:24:08,370 --> 00:24:12,930
t8 so maybe it makes sense to stay

00:24:10,260 --> 00:24:15,660
somewhere at smt for we have a CD

00:24:12,930 --> 00:24:19,620
etching in of course we have extremely

00:24:15,660 --> 00:24:22,260
high memory bandwidth in order to get

00:24:19,620 --> 00:24:24,330
this memory bandwidth actually uh we

00:24:22,260 --> 00:24:28,610
have built a special chip it's up up to

00:24:24,330 --> 00:24:31,320
230 gigabyte per second I mean of course

00:24:28,610 --> 00:24:34,680
talking about sa Piana for example

00:24:31,320 --> 00:24:37,380
everyone sees that doing most of the

00:24:34,680 --> 00:24:39,090
work in directly in exchange between

00:24:37,380 --> 00:24:42,450
process where memory is getting more and

00:24:39,090 --> 00:24:46,410
more interesting so for that reason we

00:24:42,450 --> 00:24:48,480
have implemented that and then what we

00:24:46,410 --> 00:24:51,330
have done on top of that we have

00:24:48,480 --> 00:24:54,600
optimized this direct pci interface

00:24:51,330 --> 00:24:57,000
which gets out of the processor and we

00:24:54,600 --> 00:24:59,730
call that coherent accelerator process

00:24:57,000 --> 00:25:02,940
of interface we will continue to improve

00:24:59,730 --> 00:25:04,770
that in the future as we see accelerator

00:25:02,940 --> 00:25:07,650
is getting more and more importance the

00:25:04,770 --> 00:25:09,600
background on that is this usually when

00:25:07,650 --> 00:25:11,640
you run a pci interface directly from

00:25:09,600 --> 00:25:14,309
the process or you use a traditional i/o

00:25:11,640 --> 00:25:15,870
protocol which makes things a little bit

00:25:14,309 --> 00:25:18,150
slower and the latency a little bit

00:25:15,870 --> 00:25:21,000
higher because you don't have a feature

00:25:18,150 --> 00:25:23,580
like for example InfiniBand which is

00:25:21,000 --> 00:25:25,830
called our GMA you have more or less

00:25:23,580 --> 00:25:29,580
load store functions okay and these lots

00:25:25,830 --> 00:25:32,460
of functions do not allow to have real a

00:25:29,580 --> 00:25:34,740
cache coherent integration of these

00:25:32,460 --> 00:25:39,480
external components now we have

00:25:34,740 --> 00:25:43,230
integrated a protocol layer which is the

00:25:39,480 --> 00:25:47,070
kind of work around around that and this

00:25:43,230 --> 00:25:51,360
means with this vm detached processor

00:25:47,070 --> 00:25:53,490
interface you can now integrate external

00:25:51,360 --> 00:25:55,250
components and have them cache coherent

00:25:53,490 --> 00:25:58,710
lee integrated into your overall

00:25:55,250 --> 00:26:02,610
workload okay so this means you get

00:25:58,710 --> 00:26:05,820
something like factor 2 to 3 our latency

00:26:02,610 --> 00:26:07,890
improvements versus a regular just plain

00:26:05,820 --> 00:26:13,770
vanilla pc ali attachment which you have

00:26:07,890 --> 00:26:16,140
specialized ok and I'm we have come up

00:26:13,770 --> 00:26:21,540
with a power right plus version

00:26:16,140 --> 00:26:24,840
so this copy the phase in there is a lot

00:26:21,540 --> 00:26:27,150
of advantages in playing together with

00:26:24,840 --> 00:26:29,520
FPGA acceleration in order to get the

00:26:27,150 --> 00:26:31,790
same advantages also with GPU

00:26:29,520 --> 00:26:34,380
acceleration we have implemented another

00:26:31,790 --> 00:26:37,650
link which is so called in building and

00:26:34,380 --> 00:26:39,330
before in media and this for example one

00:26:37,650 --> 00:26:41,700
of the features which is massively used

00:26:39,330 --> 00:26:45,840
in this human brain board yet in the

00:26:41,700 --> 00:26:49,650
facility ok so just up to show up a

00:26:45,840 --> 00:26:53,180
little bit differences now when you when

00:26:49,650 --> 00:26:53,180
we compare that as I mentioned before

00:26:53,780 --> 00:26:58,980
first of all I mean I have a lot of

00:26:57,030 --> 00:27:00,690
respect for the Intel by Goldberg I mean

00:26:58,980 --> 00:27:06,330
they really do a good job they really

00:27:00,690 --> 00:27:12,750
give us a hard time to stay competitive

00:27:06,330 --> 00:27:14,370
but I think what's important is we have

00:27:12,750 --> 00:27:16,350
a little bit different philosophy that

00:27:14,370 --> 00:27:18,030
than intel has and i want to use this

00:27:16,350 --> 00:27:20,790
chart and also look at the performance

00:27:18,030 --> 00:27:26,220
numbers to demonstrate a little bit what

00:27:20,790 --> 00:27:29,220
you clearly see is he tell his morale

00:27:26,220 --> 00:27:32,970
has given up on our frequency at

00:27:29,220 --> 00:27:35,760
something around 3.4 gigahertz as you

00:27:32,970 --> 00:27:38,940
can see this comes in a something like

00:27:35,760 --> 00:27:40,740
150 watt in below which is doable ok and

00:27:38,940 --> 00:27:43,290
now we have a little bit different

00:27:40,740 --> 00:27:45,300
philosophy we said okay are we are

00:27:43,290 --> 00:27:46,740
capable to build system designs because

00:27:45,300 --> 00:27:51,240
we have a lot of experience in the

00:27:46,740 --> 00:27:53,970
enterprise machines we go up to 250

00:27:51,240 --> 00:27:58,560
watts we pay that but we go also up to

00:27:53,970 --> 00:28:02,240
five years so you can certainly resolve

00:27:58,560 --> 00:28:04,530
this equation in different ways intel is

00:28:02,240 --> 00:28:06,960
doing then this way we do it in the

00:28:04,530 --> 00:28:08,760
other way the reason why we can run this

00:28:06,960 --> 00:28:11,660
field for five gigahertz is what we have

00:28:08,760 --> 00:28:13,890
seen before this deep trench

00:28:11,660 --> 00:28:16,560
capabilities this deep trench features

00:28:13,890 --> 00:28:18,960
which I brought up in the context of

00:28:16,560 --> 00:28:21,060
caches you can also use that for

00:28:18,960 --> 00:28:23,160
frequency decoupling or for circuit

00:28:21,060 --> 00:28:24,800
decoupling this means if you really want

00:28:23,160 --> 00:28:27,210
to go up to five gigahertz you have to

00:28:24,800 --> 00:28:27,580
feature like that otherwise you are not

00:28:27,210 --> 00:28:30,100
allowed

00:28:27,580 --> 00:28:33,310
okay and now you also have to burn down

00:28:30,100 --> 00:28:36,100
your gate oxide stuff then you see we

00:28:33,310 --> 00:28:37,900
have different cache structures which

00:28:36,100 --> 00:28:41,800
are much bigger we have higher memory

00:28:37,900 --> 00:28:44,080
bandwidth actually we have addressable

00:28:41,800 --> 00:28:47,260
memory which is much bigger in the range

00:28:44,080 --> 00:28:50,230
of 620 by for example for the EAD system

00:28:47,260 --> 00:28:53,040
and when you pull all this together and

00:28:50,230 --> 00:28:55,870
look at that mall from a parameter

00:28:53,040 --> 00:29:00,090
perspective then our PE 2 is actually a

00:28:55,870 --> 00:29:03,400
relatively good benchmark our PE 2 uses

00:29:00,090 --> 00:29:06,100
kind of empirical data and allows you to

00:29:03,400 --> 00:29:09,660
compare intel architecture to Power

00:29:06,100 --> 00:29:13,180
Architecture and also compare it to

00:29:09,660 --> 00:29:16,360
earlier generations what you see is

00:29:13,180 --> 00:29:19,060
Intel is wearing a strategy that they

00:29:16,360 --> 00:29:22,090
say our performance more or less stays

00:29:19,060 --> 00:29:27,490
the same this is also now in the as well

00:29:22,090 --> 00:29:30,400
Broadwell transition of their seein

00:29:27,490 --> 00:29:32,200
architecture as you can see they even go

00:29:30,400 --> 00:29:35,920
a little bit lower now I 2.2 bigger

00:29:32,200 --> 00:29:40,300
hurts we are we with powerade we go up

00:29:35,920 --> 00:29:42,190
in per core performance so at the same

00:29:40,300 --> 00:29:46,480
time of course we are at somewhere at

00:29:42,190 --> 00:29:50,650
three point five gigahertz ed when you

00:29:46,480 --> 00:29:52,930
remember the chart before the philosophy

00:29:50,650 --> 00:29:55,630
of detail is to go towards a higher

00:29:52,930 --> 00:29:58,270
number of course instead of just a

00:29:55,630 --> 00:30:00,190
reason for this so yeah that's pretty

00:29:58,270 --> 00:30:03,250
much what I want to bring up here it's

00:30:00,190 --> 00:30:04,990
different different approach and with

00:30:03,250 --> 00:30:08,200
this different approach you can see that

00:30:04,990 --> 00:30:09,940
when you compare benchmarks with this

00:30:08,200 --> 00:30:12,670
different approach you get results where

00:30:09,940 --> 00:30:16,330
for some of the benchmarks which kind of

00:30:12,670 --> 00:30:19,720
reflect certain workloads you are more

00:30:16,330 --> 00:30:22,830
more or less you get a wash but then for

00:30:19,720 --> 00:30:25,390
other specific workloads you got

00:30:22,830 --> 00:30:27,490
performance increased federal point two

00:30:25,390 --> 00:30:32,380
point five and and I think the important

00:30:27,490 --> 00:30:34,750
thing is you really have to learn a

00:30:32,380 --> 00:30:37,180
little bit about power 8 in order to

00:30:34,750 --> 00:30:39,470
figure actually which is the right

00:30:37,180 --> 00:30:41,750
workload to fit to this too

00:30:39,470 --> 00:30:44,539
this ancient it's certainly not in that

00:30:41,750 --> 00:30:46,669
kid that every engine then every robot

00:30:44,539 --> 00:30:49,130
is the right thing for this engine it's

00:30:46,669 --> 00:30:51,919
you need to invest in it but if you find

00:30:49,130 --> 00:30:56,450
a workload which fits to that of course

00:30:51,919 --> 00:30:58,700
can get to way higher efficiencies other

00:30:56,450 --> 00:31:01,280
hardware for its own okay so that's what

00:30:58,700 --> 00:31:11,000
I want to bring up a little bit today so

00:31:01,280 --> 00:31:15,260
now looking forward it's getting more

00:31:11,000 --> 00:31:18,770
obvious that and you heard I talked a

00:31:15,260 --> 00:31:23,120
lot about cache sizes and frequency and

00:31:18,770 --> 00:31:25,730
all that stuff going even further

00:31:23,120 --> 00:31:30,280
actually out in the into the future I

00:31:25,730 --> 00:31:33,350
think this discussion will still be

00:31:30,280 --> 00:31:36,250
vital but there will be more and more

00:31:33,350 --> 00:31:39,470
other areas which will get more

00:31:36,250 --> 00:31:41,780
attention specifically in the

00:31:39,470 --> 00:31:44,750
microarchitecture since I mean what we

00:31:41,780 --> 00:31:46,669
think about right at the moment is to

00:31:44,750 --> 00:31:48,830
come up with more flexible structures

00:31:46,669 --> 00:31:51,080
actually you see the road map here we

00:31:48,830 --> 00:31:53,270
have also music conductor technologies

00:31:51,080 --> 00:31:56,480
but i think the real discussion right at

00:31:53,270 --> 00:31:59,870
the moment is about can you come up with

00:31:56,480 --> 00:32:04,940
a flexible Corey signs which for example

00:31:59,870 --> 00:32:07,610
allow you to combine cores in a kind of

00:32:04,940 --> 00:32:09,860
modular way because what I described

00:32:07,610 --> 00:32:13,159
before in the certain sense you have

00:32:09,860 --> 00:32:15,140
kind of resources which you can share on

00:32:13,159 --> 00:32:17,900
a processor and the question of course

00:32:15,140 --> 00:32:20,330
is how efficiently can you balance these

00:32:17,900 --> 00:32:25,520
resources against against each others

00:32:20,330 --> 00:32:28,640
and the idea is to build kind of modular

00:32:25,520 --> 00:32:30,289
course which allow you to run in a kind

00:32:28,640 --> 00:32:33,830
of one to four modes so you have a

00:32:30,289 --> 00:32:35,330
either one smaller component actually

00:32:33,830 --> 00:32:38,090
which does not get too many resources

00:32:35,330 --> 00:32:40,250
but you can combine it with other course

00:32:38,090 --> 00:32:42,919
for example pull it together as a fork

00:32:40,250 --> 00:32:45,530
or unique or which then has a higher

00:32:42,919 --> 00:32:47,990
number of resources or you can for

00:32:45,530 --> 00:32:50,130
example to use just three of these minor

00:32:47,990 --> 00:32:52,260
chords and combine it with us

00:32:50,130 --> 00:32:55,850
social purpose engine by an accelerator

00:32:52,260 --> 00:32:58,080
or stuff like that so this are the the

00:32:55,850 --> 00:33:00,090
discussions which we have which we see

00:32:58,080 --> 00:33:05,820
right at the moment for future products

00:33:00,090 --> 00:33:08,100
of course we are right at the moment we

00:33:05,820 --> 00:33:12,200
are working on the power line which is a

00:33:08,100 --> 00:33:17,040
40 nanometer chip my team fortunately

00:33:12,200 --> 00:33:21,810
released the first release to the Fed to

00:33:17,040 --> 00:33:24,300
go foundry last week and this means

00:33:21,810 --> 00:33:25,920
within the next three month we will get

00:33:24,300 --> 00:33:30,270
the first hardware and then we get into

00:33:25,920 --> 00:33:32,760
a mighty test cycle actually and so

00:33:30,270 --> 00:33:34,470
pretty much I think in the 2017 time

00:33:32,760 --> 00:33:36,720
frame then we'll see the first power

00:33:34,470 --> 00:33:39,150
nine ships in power line will already

00:33:36,720 --> 00:33:42,450
realize some of these ideas which I just

00:33:39,150 --> 00:33:46,280
alluded to okay so and going further out

00:33:42,450 --> 00:33:49,320
then of course what we call power tin

00:33:46,280 --> 00:33:53,430
there are already plants actually

00:33:49,320 --> 00:33:55,680
concepts started which then will go even

00:33:53,430 --> 00:33:58,860
more intensively into that direction

00:33:55,680 --> 00:34:01,830
okay maybe just to give you a little bit

00:33:58,860 --> 00:34:04,170
impression about such a project usually

00:34:01,830 --> 00:34:06,900
take something like four or five years

00:34:04,170 --> 00:34:09,179
to develop a process where like that

00:34:06,900 --> 00:34:12,450
they are before we get to marlenes leads

00:34:09,179 --> 00:34:14,220
you start with a concept phase for

00:34:12,450 --> 00:34:16,980
example for power 10 which then will

00:34:14,220 --> 00:34:19,590
show up somewhere around 2020 we are in

00:34:16,980 --> 00:34:22,350
concept phase right at the moment after

00:34:19,590 --> 00:34:26,480
and this takes something depends a

00:34:22,350 --> 00:34:29,190
little bit on how fast actually you can

00:34:26,480 --> 00:34:31,409
integrate all the various characters who

00:34:29,190 --> 00:34:34,409
have their opinion actually what the

00:34:31,409 --> 00:34:36,060
processes should look like after that

00:34:34,409 --> 00:34:38,340
then you go into high level design you

00:34:36,060 --> 00:34:40,620
really break it down to this is 20 core

00:34:38,340 --> 00:34:42,210
design or is this a 24 for design things

00:34:40,620 --> 00:34:45,659
like that then you get into

00:34:42,210 --> 00:34:47,220
implementation you write all a logic

00:34:45,659 --> 00:34:53,550
design which takes something like half a

00:34:47,220 --> 00:34:56,399
year and then somewhere around 18 months

00:34:53,550 --> 00:35:00,150
before you can go to market you really

00:34:56,399 --> 00:35:02,850
send the design data into the fat and at

00:35:00,150 --> 00:35:05,110
the fam of course we have a pretty

00:35:02,850 --> 00:35:09,930
complicated process actually they build

00:35:05,110 --> 00:35:13,330
mass they set up all the little porfi

00:35:09,930 --> 00:35:14,470
environment they run certain tests in

00:35:13,330 --> 00:35:18,430
order to prove with the technology

00:35:14,470 --> 00:35:21,610
really is capable to realize your chip

00:35:18,430 --> 00:35:24,700
in the end and then are you get back the

00:35:21,610 --> 00:35:27,490
first hardware you do the initial

00:35:24,700 --> 00:35:29,290
testing which takes something like three

00:35:27,490 --> 00:35:33,790
to four months and then you have one

00:35:29,290 --> 00:35:35,530
other shot before you go into GA we're

00:35:33,790 --> 00:35:37,720
actually where you can fix all the bugs

00:35:35,530 --> 00:35:40,000
you still find in such a process so this

00:35:37,720 --> 00:35:42,160
means you always have a very long lead

00:35:40,000 --> 00:35:44,050
time until you get into the market and

00:35:42,160 --> 00:35:46,600
this means right at the moment of course

00:35:44,050 --> 00:35:48,580
we run with power 8 power line is in the

00:35:46,600 --> 00:35:50,290
pipe actually in power 10 of causes

00:35:48,580 --> 00:35:55,830
intense concept by the muck just to give

00:35:50,290 --> 00:35:58,770
you a little impression about it okay so

00:35:55,830 --> 00:36:03,730
now we talked a lot about technology

00:35:58,770 --> 00:36:05,800
technical stuff but besides that there

00:36:03,730 --> 00:36:09,250
is one other thing which is very

00:36:05,800 --> 00:36:13,480
important very very important trend what

00:36:09,250 --> 00:36:15,790
we see more and more is while we have

00:36:13,480 --> 00:36:19,630
developed a lot of proprietary stuff

00:36:15,790 --> 00:36:22,120
over the last 20 30 40 years within the

00:36:19,630 --> 00:36:24,540
last 10 years we see a clear trend

00:36:22,120 --> 00:36:27,370
towards openness okay you know of course

00:36:24,540 --> 00:36:29,410
when you say when I say last 10 years

00:36:27,370 --> 00:36:31,150
guys like you you would laugh and say

00:36:29,410 --> 00:36:32,680
well we're already in the 80s we saw

00:36:31,150 --> 00:36:34,560
Linux but for the hardware this is a

00:36:32,680 --> 00:36:38,230
little bit different however had been

00:36:34,560 --> 00:36:40,810
kind of closed systems I mean they had

00:36:38,230 --> 00:36:44,140
been not too much cooperation between

00:36:40,810 --> 00:36:47,940
teams that being some competing parties

00:36:44,140 --> 00:36:51,700
but it was more difficult to cooperate

00:36:47,940 --> 00:36:54,370
now as you have seen before if you

00:36:51,700 --> 00:36:58,290
really want to realize such more

00:36:54,370 --> 00:37:02,560
solution like systems which for example

00:36:58,290 --> 00:37:04,480
leverage accelerators then I think the

00:37:02,560 --> 00:37:06,020
equation that this is done by one

00:37:04,480 --> 00:37:08,570
company is getting more and more

00:37:06,020 --> 00:37:12,380
this is what we realized for a long time

00:37:08,570 --> 00:37:15,110
and now the consequence actually is that

00:37:12,380 --> 00:37:18,470
we say well similar what we see have

00:37:15,110 --> 00:37:21,800
seen actually with Linux this could be

00:37:18,470 --> 00:37:23,660
also done in the in the hardware space

00:37:21,800 --> 00:37:25,550
you just have to demonstrate the

00:37:23,660 --> 00:37:28,130
willingness to open up your architecture

00:37:25,550 --> 00:37:31,010
actually and maybe also come up with a

00:37:28,130 --> 00:37:32,870
foundation which allows you to stronger

00:37:31,010 --> 00:37:35,320
cooperate with other partners and this

00:37:32,870 --> 00:37:39,920
is pretty much what happened in 2013

00:37:35,320 --> 00:37:43,180
when we and other properties like

00:37:39,920 --> 00:37:45,770
mellanox and like Google and Mike nvidia

00:37:43,180 --> 00:37:47,630
came up with the open power foundation

00:37:45,770 --> 00:37:52,040
and the open power foundation is a

00:37:47,630 --> 00:37:53,960
completely new flexible framework which

00:37:52,040 --> 00:37:55,460
allows you to build hardware in a

00:37:53,960 --> 00:37:57,290
totally different way than you have done

00:37:55,460 --> 00:37:59,120
in the past and it's not only about art

00:37:57,290 --> 00:38:00,740
where it's also about operating systems

00:37:59,120 --> 00:38:05,720
realizations idea where are the

00:38:00,740 --> 00:38:09,530
applications okay now the the background

00:38:05,720 --> 00:38:14,030
story on that is the following maybe you

00:38:09,530 --> 00:38:19,700
remember some way some went back in 2012

00:38:14,030 --> 00:38:24,110
we again had run this charity game with

00:38:19,700 --> 00:38:26,930
our Watson um software I think this was

00:38:24,110 --> 00:38:29,900
a little bit of step into a new era we

00:38:26,930 --> 00:38:31,960
had the deep blue which was playing

00:38:29,900 --> 00:38:36,770
chess yeah and where we could

00:38:31,960 --> 00:38:38,960
demonstrate some human capabilities of

00:38:36,770 --> 00:38:41,630
such a machine and I think geography was

00:38:38,960 --> 00:38:44,840
stepped forward and of course when we

00:38:41,630 --> 00:38:48,220
when we run that on the ust be there was

00:38:44,840 --> 00:38:51,350
a company called google which was pretty

00:38:48,220 --> 00:38:55,820
interested in what technology this is

00:38:51,350 --> 00:38:58,190
since overall when we look into the

00:38:55,820 --> 00:39:00,200
future i think this what we call

00:38:58,190 --> 00:39:02,480
cognitive approaches and all that is

00:39:00,200 --> 00:39:05,270
getting more and more interesting

00:39:02,480 --> 00:39:09,650
specifically in the research area and of

00:39:05,270 --> 00:39:12,320
course they also understood that this

00:39:09,650 --> 00:39:15,260
machine human interface specifically in

00:39:12,320 --> 00:39:17,930
this case of watson was solved in a

00:39:15,260 --> 00:39:19,730
in a pretty impressive way and so they

00:39:17,930 --> 00:39:22,130
contact it doesn't ask well what

00:39:19,730 --> 00:39:24,380
technology is that and this discussion

00:39:22,130 --> 00:39:26,060
they they also learned that for example

00:39:24,380 --> 00:39:28,280
the Washington Watson technology is

00:39:26,060 --> 00:39:31,760
completely realized in power technology

00:39:28,280 --> 00:39:35,030
and with this cooperation actually which

00:39:31,760 --> 00:39:38,330
we started with them they came up with

00:39:35,030 --> 00:39:41,960
some ideas which were very difficult for

00:39:38,330 --> 00:39:44,150
us for this new kids on the block like

00:39:41,960 --> 00:39:46,690
Google like Emerson right like rec space

00:39:44,150 --> 00:39:53,000
like Facebook which out of the sudden

00:39:46,690 --> 00:39:55,550
had been yeah very well-suited players

00:39:53,000 --> 00:39:58,220
in the indie IT landscaping that their

00:39:55,550 --> 00:40:02,060
idea was pretty much to tell us about

00:39:58,220 --> 00:40:04,910
look we have shifted the paradigm we

00:40:02,060 --> 00:40:07,100
will not buy any boxes from you as I

00:40:04,910 --> 00:40:11,030
don't know Daimler order cheap on or

00:40:07,100 --> 00:40:13,940
even in the German space will do since

00:40:11,030 --> 00:40:16,520
we build our systems ourselves ok but we

00:40:13,940 --> 00:40:18,230
can of course work together we are very

00:40:16,520 --> 00:40:20,630
interested in your technology but this

00:40:18,230 --> 00:40:22,730
would really mean you have to come up

00:40:20,630 --> 00:40:24,440
with a legal foundation which allows us

00:40:22,730 --> 00:40:26,390
to use your technology in the same

00:40:24,440 --> 00:40:28,730
context as you can do it for example but

00:40:26,390 --> 00:40:30,470
Intel and our response was okay we got

00:40:28,730 --> 00:40:32,840
the message and we will do that and we

00:40:30,470 --> 00:40:37,400
will go even one step further we will

00:40:32,840 --> 00:40:39,650
also give the possibility to open up our

00:40:37,400 --> 00:40:45,290
complete microarchitecture of the

00:40:39,650 --> 00:40:47,630
process and obviously this was the right

00:40:45,290 --> 00:40:50,780
direction we are hitting this abroad us

00:40:47,630 --> 00:40:53,210
into a POC together with Google and this

00:40:50,780 --> 00:40:55,550
means meanwhile a big part of their

00:40:53,210 --> 00:40:57,590
search engine is not running on intel

00:40:55,550 --> 00:41:00,920
x86 anymore but is running on power

00:40:57,590 --> 00:41:03,110
technology but on top of that there was

00:41:00,920 --> 00:41:06,320
a lot of notion of course about this new

00:41:03,110 --> 00:41:09,410
approach and now meanwhile we also have

00:41:06,320 --> 00:41:11,660
some technology partnerships with

00:41:09,410 --> 00:41:13,910
companies specifically in the Chinese

00:41:11,660 --> 00:41:16,280
space which come up with their own ideas

00:41:13,910 --> 00:41:18,070
on how to pull the process based on

00:41:16,280 --> 00:41:21,470
power I technology this means we have a

00:41:18,070 --> 00:41:24,980
one partner right at the moment this

00:41:21,470 --> 00:41:28,480
shusui power for chinese company they

00:41:24,980 --> 00:41:28,480
have built their own power eight

00:41:28,890 --> 00:41:33,750
a processor chip background on that of

00:41:32,400 --> 00:41:36,420
course also was a little bit about the

00:41:33,750 --> 00:41:38,010
NSA discussion they change the crypto

00:41:36,420 --> 00:41:40,110
engine they change some of the

00:41:38,010 --> 00:41:43,200
floating-point stuff into there and they

00:41:40,110 --> 00:41:45,600
come up with an hour more Chinese power

00:41:43,200 --> 00:41:47,670
flavor to actually power a processor and

00:41:45,600 --> 00:41:50,670
on top of that of course they also start

00:41:47,670 --> 00:41:52,380
to operate in this open power context

00:41:50,670 --> 00:41:55,920
and build their own systems with new

00:41:52,380 --> 00:41:59,160
companies like no cloud like moon so we

00:41:55,920 --> 00:42:02,400
see a completely open new approach

00:41:59,160 --> 00:42:04,200
actually to come up with a new server

00:42:02,400 --> 00:42:07,560
portfolio in a certain sense which of

00:42:04,200 --> 00:42:10,740
course for the architecture brings in a

00:42:07,560 --> 00:42:13,170
lot of benefits since the more y de

00:42:10,740 --> 00:42:16,410
lectures we get into that space the more

00:42:13,170 --> 00:42:18,180
we can leverage all DVD technologies

00:42:16,410 --> 00:42:20,700
which are in place we can get more

00:42:18,180 --> 00:42:22,500
experience about that the ecosystem

00:42:20,700 --> 00:42:24,330
system is growing by that so very

00:42:22,500 --> 00:42:27,000
interesting to watch right at home so

00:42:24,330 --> 00:42:32,070
that's the background actually on the

00:42:27,000 --> 00:42:34,290
idea about open power now of course as I

00:42:32,070 --> 00:42:37,880
said Google and Facebook Rackspace our

00:42:34,290 --> 00:42:41,010
companies which are dealing with that

00:42:37,880 --> 00:42:44,250
with this new capabilities and in a very

00:42:41,010 --> 00:42:47,070
interesting way that just for all you I

00:42:44,250 --> 00:42:50,310
mean while we are something like more

00:42:47,070 --> 00:42:53,120
than 200 members all over the world

00:42:50,310 --> 00:42:56,220
actually technology companies

00:42:53,120 --> 00:42:59,160
integration companies operating system

00:42:56,220 --> 00:43:02,730
companies software companies you call it

00:42:59,160 --> 00:43:06,000
so very interesting to watch interesting

00:43:02,730 --> 00:43:08,100
approach here there are other open the

00:43:06,000 --> 00:43:10,170
approaches like for example the Open

00:43:08,100 --> 00:43:12,600
Compute Project which was initiated by

00:43:10,170 --> 00:43:14,340
Facebook this is more on the system

00:43:12,600 --> 00:43:16,080
integration side this means they say

00:43:14,340 --> 00:43:18,780
well we have a very good network

00:43:16,080 --> 00:43:22,200
worldwide a lot of losers I shouldn't we

00:43:18,780 --> 00:43:24,150
just put us back into the web actually

00:43:22,200 --> 00:43:24,869
and ask if someone is interested in

00:43:24,150 --> 00:43:27,749
building

00:43:24,869 --> 00:43:29,369
computerized me on based on that speck

00:43:27,749 --> 00:43:32,039
that's what they started with open

00:43:29,369 --> 00:43:35,599
compute now this is combined with open

00:43:32,039 --> 00:43:37,799
power they build a specific messaging

00:43:35,599 --> 00:43:39,690
system actually just for their purposes

00:43:37,799 --> 00:43:42,089
and I think it's very interesting to see

00:43:39,690 --> 00:43:46,349
here how these two things how these two

00:43:42,089 --> 00:43:48,960
open movements come together same here

00:43:46,349 --> 00:43:50,880
or up between Google and rec space you

00:43:48,960 --> 00:43:54,990
think for us actually is that they

00:43:50,880 --> 00:43:56,999
already plan for power 90p use power

00:43:54,990 --> 00:43:59,910
line so far is not part of the open

00:43:56,999 --> 00:44:01,589
power foundation but as you can see as

00:43:59,910 --> 00:44:03,900
there is so much interest I mean this is

00:44:01,589 --> 00:44:06,119
probably one of the next steps that we

00:44:03,900 --> 00:44:09,210
do the announcements also from the IBM

00:44:06,119 --> 00:44:14,640
side and a lot of interest actually in

00:44:09,210 --> 00:44:17,190
order to use that ok so that's from the

00:44:14,640 --> 00:44:19,230
open power part which allows more

00:44:17,190 --> 00:44:21,839
flexibility which allows new business

00:44:19,230 --> 00:44:24,630
models which allows completely new

00:44:21,839 --> 00:44:26,400
flexible system designs which then are

00:44:24,630 --> 00:44:28,680
in better shape actually also to

00:44:26,400 --> 00:44:32,009
leverage all the capabilities such a

00:44:28,680 --> 00:44:34,109
blood phone actually can deliver the

00:44:32,009 --> 00:44:35,819
other thing I mentioned before is also

00:44:34,109 --> 00:44:42,960
interesting to watch sure it's not so

00:44:35,819 --> 00:44:45,989
much about power only but you saw we had

00:44:42,960 --> 00:44:47,549
this newer synaptic chip and in one big

00:44:45,989 --> 00:44:49,980
trend we see right at the moment now

00:44:47,549 --> 00:44:56,299
more from our IBM research perspective

00:44:49,980 --> 00:44:59,489
is that this extremely high increase of

00:44:56,299 --> 00:45:02,099
exponential row of data when you look a

00:44:59,489 --> 00:45:03,450
little bit closer actually this is you

00:45:02,099 --> 00:45:07,079
have to distinguish between the

00:45:03,450 --> 00:45:09,299
traditional IT and I think there is some

00:45:07,079 --> 00:45:11,670
linear wealth but if you look at

00:45:09,299 --> 00:45:14,279
exponential exponential growth you

00:45:11,670 --> 00:45:16,529
mainly see that the data which are

00:45:14,279 --> 00:45:18,390
really growing faster are what we call

00:45:16,529 --> 00:45:21,269
data at the edge this means out these

00:45:18,390 --> 00:45:22,710
are data produced by cameras by sensors

00:45:21,269 --> 00:45:26,910
in the

00:45:22,710 --> 00:45:30,510
gaddafi's context smartphones and and

00:45:26,910 --> 00:45:33,570
then and of course this comes defines a

00:45:30,510 --> 00:45:36,690
little bit different equation since you

00:45:33,570 --> 00:45:38,880
want to use this data and obviously some

00:45:36,690 --> 00:45:41,010
very popular players lose this very

00:45:38,880 --> 00:45:45,180
efficiently you have a link with

00:45:41,010 --> 00:45:47,760
different paradigms than the past most

00:45:45,180 --> 00:45:50,339
of these data are not used so far one of

00:45:47,760 --> 00:45:52,530
the reasons is that they are very

00:45:50,339 --> 00:45:55,589
transient this means they lose meaning

00:45:52,530 --> 00:45:56,760
within seconds or so the other part is

00:45:55,589 --> 00:45:58,140
that you don't have the bandwidth

00:45:56,760 --> 00:46:00,660
actually to get them into a browser

00:45:58,140 --> 00:46:03,270
environment and this means you really

00:46:00,660 --> 00:46:05,040
have to process them at the edge if you

00:46:03,270 --> 00:46:08,220
really want to use them okay and this

00:46:05,040 --> 00:46:10,140
brings us to a field which is very

00:46:08,220 --> 00:46:15,060
interesting right at the moment to watch

00:46:10,140 --> 00:46:18,420
more from a research perspective what we

00:46:15,060 --> 00:46:21,480
call brain inspired systems there you

00:46:18,420 --> 00:46:24,630
totally go away from us or from

00:46:21,480 --> 00:46:27,210
phenomenon architecture you build many

00:46:24,630 --> 00:46:28,980
core chips actually in the course the

00:46:27,210 --> 00:46:31,380
small little course are not designed

00:46:28,980 --> 00:46:34,680
like floating point units or anything

00:46:31,380 --> 00:46:36,570
else they are really directly aligned to

00:46:34,680 --> 00:46:38,490
the human brain function so you have a

00:46:36,570 --> 00:46:42,720
neuron functions and synapse functions

00:46:38,490 --> 00:46:44,940
realized in a network I mean they have

00:46:42,720 --> 00:46:47,220
been a trend in the 80s neural networks

00:46:44,940 --> 00:46:48,810
this is similar to that but now you have

00:46:47,220 --> 00:46:50,490
neural networks actually which are

00:46:48,810 --> 00:46:52,380
realized in a hardware structure which

00:46:50,490 --> 00:46:54,680
come up with a way number very higher

00:46:52,380 --> 00:46:57,510
number actually of new words okay

00:46:54,680 --> 00:47:02,280
there's a lot of research done around

00:46:57,510 --> 00:47:05,339
that in addition to that there is this a

00:47:02,280 --> 00:47:06,839
lot of discussion about machine

00:47:05,339 --> 00:47:09,150
intelligence in common right at the

00:47:06,839 --> 00:47:11,310
moment so this means how can we get two

00:47:09,150 --> 00:47:13,740
systems which are capable to learn

00:47:11,310 --> 00:47:17,190
instead of being programmed which is

00:47:13,740 --> 00:47:18,869
also a very interesting field and now

00:47:17,190 --> 00:47:21,950
for the specific case for the new

00:47:18,869 --> 00:47:26,160
synaptic space I name s build a chip

00:47:21,950 --> 00:47:28,410
so-called true north architecture very

00:47:26,160 --> 00:47:32,460
high number of transistors when you can

00:47:28,410 --> 00:47:35,400
run such a chip for certain workloads

00:47:32,460 --> 00:47:37,910
with an efficiency raised in the

00:47:35,400 --> 00:47:39,779
aerial something like a thousand

00:47:37,910 --> 00:47:41,700
specifically when you do pattern

00:47:39,779 --> 00:47:43,380
recognition stuff and at the same time

00:47:41,700 --> 00:47:46,470
you just consume something like

00:47:43,380 --> 00:47:49,980
effective 10,000 us our this means you

00:47:46,470 --> 00:47:51,630
can use a chip like there you know for

00:47:49,980 --> 00:47:53,339
example in a smartphone and running with

00:47:51,630 --> 00:47:55,890
a smartphone battery battery for

00:47:53,339 --> 00:47:57,960
something like a week without anything

00:47:55,890 --> 00:48:00,059
any problems and for us of course the

00:47:57,960 --> 00:48:01,740
big question now is how do we get to

00:48:00,059 --> 00:48:03,869
programming models actually how to

00:48:01,740 --> 00:48:06,210
utilize it in the best friend I'll do

00:48:03,869 --> 00:48:09,660
this self learning mechanisms look like

00:48:06,210 --> 00:48:12,559
actually to transport as a way a little

00:48:09,660 --> 00:48:15,900
bit from from just a real programming on

00:48:12,559 --> 00:48:18,839
at the moment I think this is a very

00:48:15,900 --> 00:48:21,569
much focused on research activities but

00:48:18,839 --> 00:48:23,640
I think in the next 10 to 15 years this

00:48:21,569 --> 00:48:28,770
will be very interesting to watch since

00:48:23,640 --> 00:48:30,859
from our from recent perspective this

00:48:28,770 --> 00:48:32,910
could have same capabilities as the

00:48:30,859 --> 00:48:34,859
combination between phenomenal

00:48:32,910 --> 00:48:37,529
architecture with CMOS technology the

00:48:34,859 --> 00:48:39,270
good thing is the CMOS technology is

00:48:37,529 --> 00:48:41,940
already there so we don't have to invest

00:48:39,270 --> 00:48:43,619
into that this is all about architecture

00:48:41,940 --> 00:48:47,309
and understanding how the brain function

00:48:43,619 --> 00:48:50,039
vessel ok so just wanting to put that on

00:48:47,309 --> 00:48:52,980
the table at the end but that's pretty

00:48:50,039 --> 00:48:56,010
much what I try to share today or wanted

00:48:52,980 --> 00:49:01,980
to share the baby move on Andhra are

00:48:56,010 --> 00:49:04,099
there any questions no ok thank you very

00:49:01,980 --> 00:49:04,099
much

00:49:07,180 --> 00:49:09,240

YouTube URL: https://www.youtube.com/watch?v=yNLk3Wwu82c


