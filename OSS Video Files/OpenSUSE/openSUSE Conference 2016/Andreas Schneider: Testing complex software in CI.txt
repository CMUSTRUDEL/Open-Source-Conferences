Title: Andreas Schneider: Testing complex software in CI
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/1052-testing-complex-software-in-ci

This talk will show stories from the trenches of developing tests for SSSD and 
Samba. How we developed complete integration tests that exercise all the 
capabilities of our software and run in environments without a real network 
access, without requiring root or sudo or touching the important OS 
interfaces.

The authors of this talk work on SSSD, Samba and libssh - software that 
communicates over the network, often requires root access and communicates 
through OS interfaces. In this talk, we will show how we developed complete 
integration tests that exercise all the capabilities of our software and run 
in environments without a real network access, without requiring root or sudo 
or touching the important OS interfaces.

In addition, our goal was that the tests must be easy to develop and must run 
both locally on developer's machine as well as inside popular CI engines of 
today, like Travis or Semaphore. To meet these goals, we had to leverage 
existing testing tools, but also build new ones such as pam_wrapper or 
libpamtest to be able to test OS-level PAM authentication and authorization.

This talk will be useful for developers who write tests for software that is 
normally not easy to test -- attending the talk will show you how to test 
complex software systems in isolation.

Andreas Schneider
Captions: 
	00:00:07,780 --> 00:00:15,730
we're about to start my name is a

00:00:11,920 --> 00:00:20,789
Cobra's egg this is under a Snider and

00:00:15,730 --> 00:00:25,119
out testing complex software in CI our

00:00:20,789 --> 00:00:29,259
first a bit more about us we are both

00:00:25,119 --> 00:00:32,769
our work redhead under ass works mostly

00:00:29,259 --> 00:00:35,470
on samba I often more projects like leap

00:00:32,769 --> 00:00:38,589
as a sage or a really nice see testing

00:00:35,470 --> 00:00:42,670
framework all similar I work mostly on

00:00:38,589 --> 00:00:45,489
the SSD authentication demon are done a

00:00:42,670 --> 00:00:50,320
bit to work on free IPA and also help

00:00:45,489 --> 00:00:56,920
undress with these projects okay do you

00:00:50,320 --> 00:01:01,030
remember this so running your

00:00:56,920 --> 00:01:03,129
application is like playing Tetris a new

00:01:01,030 --> 00:01:05,379
tile appearing is like an event in your

00:01:03,129 --> 00:01:08,619
application for example a user input or

00:01:05,379 --> 00:01:11,170
a network packet coming in rotating and

00:01:08,619 --> 00:01:12,910
placing a tile and teachers could you

00:01:11,170 --> 00:01:17,979
could see it as a combination of your

00:01:12,910 --> 00:01:22,149
algorithms in your software which is for

00:01:17,979 --> 00:01:24,520
example processing a network packet in

00:01:22,149 --> 00:01:28,569
teacher asst if you have a space it is

00:01:24,520 --> 00:01:31,300
like a buck in your application in

00:01:28,569 --> 00:01:34,149
Tetris the goal is aligned clear in

00:01:31,300 --> 00:01:37,780
those spaces at all in your application

00:01:34,149 --> 00:01:41,140
it is for example correctly processing a

00:01:37,780 --> 00:01:44,319
network packet so equally to here having

00:01:41,140 --> 00:01:46,929
no spaces at all so the goal is to play

00:01:44,319 --> 00:01:51,550
a perfect Tetris game without any spaces

00:01:46,929 --> 00:01:54,459
which means you should test your code to

00:01:51,550 --> 00:01:56,649
be able to play a perfect Tetris game if

00:01:54,459 --> 00:02:02,229
you do not do that something like this

00:01:56,649 --> 00:02:05,050
will help right okay so what is this

00:02:02,229 --> 00:02:10,950
talk about the opposite about teachers

00:02:05,050 --> 00:02:13,989
no unfortunately not this talk about

00:02:10,950 --> 00:02:16,720
improving your tests and making sure

00:02:13,989 --> 00:02:20,920
that even if you have a complex software

00:02:16,720 --> 00:02:22,599
that is normally hard to test and the

00:02:20,920 --> 00:02:24,819
software does stuff like communication

00:02:22,599 --> 00:02:26,799
over network or logging in users or

00:02:24,819 --> 00:02:29,530
owning files by different users we are

00:02:26,799 --> 00:02:35,560
still able to test it

00:02:29,530 --> 00:02:39,900
easily and reliably and I said complex

00:02:35,560 --> 00:02:42,700
software I mean mostly software that

00:02:39,900 --> 00:02:44,620
well nothing like like The Who am I or

00:02:42,700 --> 00:02:45,940
LS that just does one simple thing and

00:02:44,620 --> 00:02:48,850
prince who you are or prince the files

00:02:45,940 --> 00:02:51,940
in the directory i meant more software

00:02:48,850 --> 00:02:56,410
like system services stuffs that runs as

00:02:51,940 --> 00:02:59,650
root or stuff that talks over network to

00:02:56,410 --> 00:03:03,820
other demons or to clients or software

00:02:59,650 --> 00:03:06,970
that authenticates users all those

00:03:03,820 --> 00:03:09,430
programs are really much harder to test

00:03:06,970 --> 00:03:12,190
unless you want to set up the whole

00:03:09,430 --> 00:03:13,720
environment with multiple VMs multiple

00:03:12,190 --> 00:03:16,810
services and then maintain the

00:03:13,720 --> 00:03:20,340
environment and the software we work on

00:03:16,810 --> 00:03:23,620
makes testing such software much easier

00:03:20,340 --> 00:03:28,330
ok let's take a look at the problems

00:03:23,620 --> 00:03:31,390
first when testing software so often not

00:03:28,330 --> 00:03:33,579
every software offers a test suit or it

00:03:31,390 --> 00:03:35,260
only has unit tests on a functional

00:03:33,579 --> 00:03:38,290
level and doesn't provide any

00:03:35,260 --> 00:03:41,320
integration tests so no you don't have a

00:03:38,290 --> 00:03:45,519
client running which tests which is test

00:03:41,320 --> 00:03:49,570
it against your server then often it's a

00:03:45,519 --> 00:03:51,549
problem is that testitude often require

00:03:49,570 --> 00:03:55,540
machine provisioning for example setting

00:03:51,549 --> 00:03:57,100
up a vm or something like that some

00:03:55,540 --> 00:04:00,820
tests you would need a complex network

00:03:57,100 --> 00:04:02,320
to be able to test for a basic test line

00:04:00,820 --> 00:04:04,209
and so very normally you need that and

00:04:02,320 --> 00:04:07,120
if you have a multiple server

00:04:04,209 --> 00:04:10,959
architecture you need several servers to

00:04:07,120 --> 00:04:13,030
test it and this normally requires a lot

00:04:10,959 --> 00:04:18,070
of infrastructure and resources and

00:04:13,030 --> 00:04:21,720
makes it much harder to run the tests so

00:04:18,070 --> 00:04:24,190
how do we do testing a drag to head a

00:04:21,720 --> 00:04:27,370
dratted development and testing a

00:04:24,190 --> 00:04:31,229
separate Saudi developer developed our

00:04:27,370 --> 00:04:34,419
software and the better quality

00:04:31,229 --> 00:04:37,120
engineering creates normally tests and

00:04:34,419 --> 00:04:39,250
only two regression testing so backs

00:04:37,120 --> 00:04:42,610
which customer are reported they do

00:04:39,250 --> 00:04:43,220
these create these tests either on bare

00:04:42,610 --> 00:04:46,640
metal

00:04:43,220 --> 00:04:51,770
and we a mess so it's complex to set up

00:04:46,640 --> 00:04:53,990
takes a lot of time and it's not very

00:04:51,770 --> 00:04:56,360
easy to maintain so they basically

00:04:53,990 --> 00:04:59,210
create the environment that our

00:04:56,360 --> 00:05:05,380
customers would use in production and

00:04:59,210 --> 00:05:08,090
try to break it with those tests so

00:05:05,380 --> 00:05:11,060
Sandra said that there's a bunch of

00:05:08,090 --> 00:05:14,990
problems as he said the the environment

00:05:11,060 --> 00:05:17,660
is complex to set up which means that if

00:05:14,990 --> 00:05:19,430
we want to if you develop a patch try to

00:05:17,660 --> 00:05:21,800
fix something and want to make sure that

00:05:19,430 --> 00:05:24,470
we didn't break something else it takes

00:05:21,800 --> 00:05:26,150
hours to just get the test report if

00:05:24,470 --> 00:05:29,120
actually something is reported by the

00:05:26,150 --> 00:05:30,920
test then it's not easy to get into the

00:05:29,120 --> 00:05:32,930
test environment and play with the

00:05:30,920 --> 00:05:34,910
program that this means behaving for

00:05:32,930 --> 00:05:40,520
instance attached gdb or something like

00:05:34,910 --> 00:05:41,690
this and also because this process this

00:05:40,520 --> 00:05:43,460
is how testing has been done in the past

00:05:41,690 --> 00:05:45,460
it comes too late in the process we

00:05:43,460 --> 00:05:49,130
first developed new functionality and

00:05:45,460 --> 00:05:51,200
only then hand the package over to our

00:05:49,130 --> 00:05:52,850
colleagues who tested and report bugs

00:05:51,200 --> 00:05:56,860
and then we need to go back and forth

00:05:52,850 --> 00:05:56,860
and it's just too time-consuming ah

00:05:57,220 --> 00:06:01,370
least but not last this is not usable by

00:05:59,600 --> 00:06:03,979
anyone outside redhead these are really

00:06:01,370 --> 00:06:06,650
internal tests we want to have those

00:06:03,979 --> 00:06:11,960
tests in our upstream so they are usable

00:06:06,650 --> 00:06:14,450
by by anyone as developers we want to

00:06:11,960 --> 00:06:17,840
have really easy way to set up this

00:06:14,450 --> 00:06:19,700
environment are that very closely

00:06:17,840 --> 00:06:24,200
resembles what our users or customers

00:06:19,700 --> 00:06:26,030
would run and be able to play with it at

00:06:24,200 --> 00:06:29,300
edge debugger at that walgreens and so

00:06:26,030 --> 00:06:36,050
on and the projects we work on make make

00:06:29,300 --> 00:06:37,640
that very easy so what we want to do is

00:06:36,050 --> 00:06:39,770
we want to run all the tests during

00:06:37,640 --> 00:06:41,720
development so every time we take on

00:06:39,770 --> 00:06:45,320
some patch we just want to type a single

00:06:41,720 --> 00:06:50,240
command in the shell and run all the

00:06:45,320 --> 00:06:52,310
tests we want these to be as close as

00:06:50,240 --> 00:06:54,380
possible to what our users would use

00:06:52,310 --> 00:06:56,510
which might include stuff like file

00:06:54,380 --> 00:07:00,289
sharing or user logins which normally

00:06:56,510 --> 00:07:02,180
are quite hard to dust and because we

00:07:00,289 --> 00:07:03,770
are developers and we are lazy we don't

00:07:02,180 --> 00:07:05,539
want to maintain any complex this

00:07:03,770 --> 00:07:07,430
environment we just want the tools to do

00:07:05,539 --> 00:07:13,280
everything for us and we want to do it

00:07:07,430 --> 00:07:14,900
locally on our machines so what we were

00:07:13,280 --> 00:07:16,669
looking through these problems it turns

00:07:14,900 --> 00:07:19,400
out that samba had already figured this

00:07:16,669 --> 00:07:22,640
out for a long time and hundreds took

00:07:19,400 --> 00:07:28,280
the job to our opening these Samba

00:07:22,640 --> 00:07:29,990
internal projects to larger world so

00:07:28,280 --> 00:07:33,140
some are already had pretty awesome

00:07:29,990 --> 00:07:36,200
testitude which is called self test but

00:07:33,140 --> 00:07:40,250
someone needed to compile in a special

00:07:36,200 --> 00:07:43,460
mode some special libraries and these

00:07:40,250 --> 00:07:46,430
libraries got linked into each binary

00:07:43,460 --> 00:07:49,250
some are built so they were this was

00:07:46,430 --> 00:07:52,789
only usable in this product in this

00:07:49,250 --> 00:07:57,830
testing built it's a really nice thing

00:07:52,789 --> 00:08:00,020
but did not so this stuff did not

00:07:57,830 --> 00:08:03,200
require to set up any test machines or

00:08:00,020 --> 00:08:06,620
network so everything was tested on the

00:08:03,200 --> 00:08:10,460
developer machine s with privileges of

00:08:06,620 --> 00:08:12,800
the developer so the my goal was when I

00:08:10,460 --> 00:08:15,620
started this to make it usable for every

00:08:12,800 --> 00:08:18,169
proud pro checked out there so to be

00:08:15,620 --> 00:08:21,380
able to do the testing which we do at

00:08:18,169 --> 00:08:25,970
samba with other projects and that was

00:08:21,380 --> 00:08:30,620
the birth of the syrah project ok what

00:08:25,970 --> 00:08:33,700
is your appt Saradha is a set of tools

00:08:30,620 --> 00:08:37,669
to create eyes are fully isolated

00:08:33,700 --> 00:08:39,890
network and system environment to test

00:08:37,669 --> 00:08:44,089
client and server components with

00:08:39,890 --> 00:08:46,280
synthetic account information with host

00:08:44,089 --> 00:08:49,610
name resolution with privilege

00:08:46,280 --> 00:08:51,950
separation and this is done with several

00:08:49,610 --> 00:08:57,940
I bridge which can be pre-loaded to any

00:08:51,950 --> 00:09:01,370
executable which you can install yr p.m.

00:08:57,940 --> 00:09:06,529
so think of C rep like it as

00:09:01,370 --> 00:09:08,600
tricks for applications so you just

00:09:06,529 --> 00:09:10,670
heard that c-webb consists of several

00:09:08,600 --> 00:09:14,000
lightweights libraries which can be

00:09:10,670 --> 00:09:17,060
pre-loaded pre-loading is a feature of

00:09:14,000 --> 00:09:20,620
the dynamic linker it is available on

00:09:17,060 --> 00:09:24,110
most UNIX systems it loads a

00:09:20,620 --> 00:09:26,779
user-specified shared library before all

00:09:24,110 --> 00:09:29,510
others before all other shared libraries

00:09:26,779 --> 00:09:32,650
which are loaded to run an executable

00:09:29,510 --> 00:09:36,800
the library to preload is defined by an

00:09:32,650 --> 00:09:39,680
environment variable which is called el

00:09:36,800 --> 00:09:43,250
de underscore preload and then you

00:09:39,680 --> 00:09:48,320
specify the library name to load or you

00:09:43,250 --> 00:09:50,810
specify a pass to the share library the

00:09:48,320 --> 00:09:52,970
symbols of the preloaded library are

00:09:50,810 --> 00:09:57,080
bound first so the function from this

00:09:52,970 --> 00:09:59,600
library are called first so if this

00:09:57,080 --> 00:10:02,330
library provides functions from lipsy

00:09:59,600 --> 00:10:09,680
and is loaded before lipsy then these

00:10:02,330 --> 00:10:13,220
functions are called first so c rep

00:10:09,680 --> 00:10:15,980
consists of several libraries so the

00:10:13,220 --> 00:10:18,800
first one is socket repa then there is

00:10:15,980 --> 00:10:20,330
NSS wrapper uid you rapper resolve

00:10:18,800 --> 00:10:25,220
rapper and the newest one we just

00:10:20,330 --> 00:10:27,650
created this year as pam rapper ok let's

00:10:25,220 --> 00:10:31,160
look at the rappin details to understand

00:10:27,650 --> 00:10:34,640
what they are doing first there is

00:10:31,160 --> 00:10:36,589
socket repin probably one of the rappers

00:10:34,640 --> 00:10:40,700
which most of the people are using

00:10:36,589 --> 00:10:43,700
because it is really nice to test lines

00:10:40,700 --> 00:10:46,490
kind server software was it Sokka driver

00:10:43,700 --> 00:10:49,550
redirects all network communication to

00:10:46,490 --> 00:10:53,779
happen over unix sockets it supports

00:10:49,550 --> 00:10:57,560
ipv4 and ipv6 sockets and address

00:10:53,779 --> 00:10:59,959
emulation and this is completely

00:10:57,560 --> 00:11:03,529
transparent to the application itself it

00:10:59,959 --> 00:11:07,160
doesn't recognize that soccer drebber is

00:11:03,529 --> 00:11:08,570
there a really nice feature of soccer

00:11:07,160 --> 00:11:11,470
drivers although that you have the

00:11:08,570 --> 00:11:14,809
ability to capture traffic in PDF format

00:11:11,470 --> 00:11:17,220
format so you can inspect

00:11:14,809 --> 00:11:22,589
what is going on between your client and

00:11:17,220 --> 00:11:26,100
the server the idea of target repa and

00:11:22,589 --> 00:11:27,809
the first inclination was from yema with

00:11:26,100 --> 00:11:33,360
a semi team member and he wrote this in

00:11:27,809 --> 00:11:49,980
2005 so let's look how socket wrapper

00:11:33,360 --> 00:11:54,179
works sorry on the right side this is

00:11:49,980 --> 00:11:57,809
our server so I tell the system to

00:11:54,179 --> 00:12:00,350
preload socket wrapper and specify a

00:11:57,809 --> 00:12:06,119
directory here a temporary directory

00:12:00,350 --> 00:12:09,300
this is needed because socket rapid uses

00:12:06,119 --> 00:12:11,939
unique sockets so unix sockets are a

00:12:09,300 --> 00:12:14,160
file in a directory so we specify this

00:12:11,939 --> 00:12:17,759
unique circuit directory which is called

00:12:14,160 --> 00:12:21,870
socket repa director then we tell it

00:12:17,759 --> 00:12:26,999
that the default interface is 1010 means

00:12:21,870 --> 00:12:29,899
it's 127 00 10 and then we call the net

00:12:26,999 --> 00:12:38,790
cat command and tell it to listen on

00:12:29,899 --> 00:12:40,860
this IP address on part 7 as you can see

00:12:38,790 --> 00:12:42,779
now we are listening at part 7 as a

00:12:40,860 --> 00:12:44,970
privilege part normally you need root

00:12:42,779 --> 00:12:47,910
privileges to bind that part but as we

00:12:44,970 --> 00:12:52,709
are using unix sockets it's no problem

00:12:47,910 --> 00:12:53,939
to do that and s this is all transparent

00:12:52,709 --> 00:12:56,790
to the application that doesn't

00:12:53,939 --> 00:13:00,870
recognize that on the other side this is

00:12:56,790 --> 00:13:04,949
our client now so here I also preload

00:13:00,870 --> 00:13:07,799
socket wrapper and specify the directory

00:13:04,949 --> 00:13:12,259
the same directory here for the sockets

00:13:07,799 --> 00:13:14,929
tell the default interface is the 20

00:13:12,259 --> 00:13:18,839
tell it i want to write a pcap file

00:13:14,929 --> 00:13:21,439
start netcut connect to the server on

00:13:18,839 --> 00:13:21,439
pot 7

00:13:31,150 --> 00:13:38,000
as you can see now i just sent hello

00:13:34,790 --> 00:13:40,760
world and they both communicated and it

00:13:38,000 --> 00:13:43,850
is like a normal network communication

00:13:40,760 --> 00:13:46,640
you can do that with every demon and

00:13:43,850 --> 00:13:58,130
client at every client and server which

00:13:46,640 --> 00:14:01,520
is out there so the next rapper is NSS

00:13:58,130 --> 00:14:05,960
repa NSS rapper provides account

00:14:01,520 --> 00:14:09,110
information for users and groups this

00:14:05,960 --> 00:14:12,980
means you can create artificial users

00:14:09,110 --> 00:14:15,560
and resolve them in the system you can

00:14:12,980 --> 00:14:18,410
look up users look up groups create

00:14:15,560 --> 00:14:21,010
different ones even root and no group at

00:14:18,410 --> 00:14:24,410
whatever is in the system you can also

00:14:21,010 --> 00:14:28,400
create them on the fly and they will

00:14:24,410 --> 00:14:31,370
show up when you query them a soccer

00:14:28,400 --> 00:14:35,210
rabbi NSS rapper can also do network

00:14:31,370 --> 00:14:40,100
name resolutions using a hosts file so

00:14:35,210 --> 00:14:41,930
you can you can map a host name to an IP

00:14:40,100 --> 00:14:45,620
address you gave into a socket rapper

00:14:41,930 --> 00:14:48,910
and the nice thing is in sss rapper also

00:14:45,620 --> 00:14:51,740
allows loading and testing of NSS

00:14:48,910 --> 00:14:56,150
modules at the moment only for using

00:14:51,740 --> 00:14:58,310
groups not four paws modules but this is

00:14:56,150 --> 00:15:04,730
a feature we want to implement pretty

00:14:58,310 --> 00:15:07,820
soon the next one is you IDU rapa you ID

00:15:04,730 --> 00:15:11,660
wrapper allows users switching as a

00:15:07,820 --> 00:15:13,640
normal user without root privileges you

00:15:11,660 --> 00:15:18,380
can start any application and make it

00:15:13,640 --> 00:15:20,510
believe it is running as root and we

00:15:18,380 --> 00:15:22,460
have some special feature in there so we

00:15:20,510 --> 00:15:25,250
have support for using group changing in

00:15:22,460 --> 00:15:28,010
the local threat using Cisco's which is

00:15:25,250 --> 00:15:31,550
a shield special chillip ceasing and we

00:15:28,010 --> 00:15:34,130
also support that your ID wrapper is

00:15:31,550 --> 00:15:36,690
also coming out from the cemetery but he

00:15:34,130 --> 00:15:40,020
completely have completely

00:15:36,690 --> 00:15:46,710
you written it especially to support the

00:15:40,020 --> 00:15:50,910
last two features okay here is just a

00:15:46,710 --> 00:15:53,580
simple example I'm the user asn I called

00:15:50,910 --> 00:15:57,600
the ID command as you can see I'm the

00:15:53,580 --> 00:16:00,690
user asn with the UID 1000 group ID 104

00:15:57,600 --> 00:16:03,540
users find out LD preload you ID wrapper

00:16:00,690 --> 00:16:06,930
turn it on and tell it I want to be rude

00:16:03,540 --> 00:16:10,950
and call ID command you can see that it

00:16:06,930 --> 00:16:13,920
thinks I'm root and this allows you to

00:16:10,950 --> 00:16:18,150
run demons which require root and need

00:16:13,920 --> 00:16:20,400
to switch users to do that without s and

00:16:18,150 --> 00:16:25,260
you start them as a normal user but they

00:16:20,400 --> 00:16:28,140
think they are running as root alright

00:16:25,260 --> 00:16:31,370
we also added another rapper about a

00:16:28,140 --> 00:16:34,980
year ago or so ah which is called

00:16:31,370 --> 00:16:37,290
resolve rapper result of apparel helps

00:16:34,980 --> 00:16:40,980
with testing of software that deals with

00:16:37,290 --> 00:16:44,250
DNS and that's specifically the lipsy

00:16:40,980 --> 00:16:49,080
resolver because resolve wrapper allows

00:16:44,250 --> 00:16:50,670
to specify your own resolv.conf to the

00:16:49,080 --> 00:16:52,710
application under test so if you have a

00:16:50,670 --> 00:16:55,530
application that does some dns lookups

00:16:52,710 --> 00:16:58,320
and you have a dns server that you on

00:16:55,530 --> 00:17:00,630
the application to talk to you specify a

00:16:58,320 --> 00:17:03,300
special resolv.conf with developer and

00:17:00,630 --> 00:17:04,860
the application would talk to your local

00:17:03,300 --> 00:17:08,520
server without having to modify the

00:17:04,860 --> 00:17:10,110
system-wide resolv.conf the other thing

00:17:08,520 --> 00:17:12,720
that resolve rapper can do is that it

00:17:10,110 --> 00:17:15,930
can completely fake DNS queries and

00:17:12,720 --> 00:17:17,550
answers just based on text file ah so

00:17:15,930 --> 00:17:21,060
the text file is a very simple key value

00:17:17,550 --> 00:17:24,390
format the key is the DNS query like it

00:17:21,060 --> 00:17:27,689
can be a sorry query txt cname I think

00:17:24,390 --> 00:17:31,500
that's all and the value is the the

00:17:27,689 --> 00:17:34,200
answer and this feature is mostly useful

00:17:31,500 --> 00:17:35,910
for testing stuff like DNS

00:17:34,200 --> 00:17:38,130
auto-discovery for instance active

00:17:35,910 --> 00:17:40,320
directory has a ton of internal dns

00:17:38,130 --> 00:17:43,830
records that clients use to find the

00:17:40,320 --> 00:17:45,810
active directory service and using this

00:17:43,830 --> 00:17:47,760
resolve wrapper you can tell the

00:17:45,810 --> 00:17:50,340
application under test that there are

00:17:47,760 --> 00:17:50,700
some dns records that the application

00:17:50,340 --> 00:17:55,200
should

00:17:50,700 --> 00:17:57,450
just with the text file and the last

00:17:55,200 --> 00:18:02,490
wrapper that we wrote a couple of months

00:17:57,450 --> 00:18:05,640
ago our is called palm wrapper ah so

00:18:02,490 --> 00:18:08,130
first bit maybe about Ben because that's

00:18:05,640 --> 00:18:10,920
not so widely known I guess at least not

00:18:08,130 --> 00:18:13,470
the internals I'm is this some sub

00:18:10,920 --> 00:18:17,730
system that authenticates users on Linux

00:18:13,470 --> 00:18:21,420
the are every software that is able to

00:18:17,730 --> 00:18:24,660
authenticate you like sshh or su is

00:18:21,420 --> 00:18:26,250
represented by a palm service in the pub

00:18:24,660 --> 00:18:29,250
subsystem the pump service is a text

00:18:26,250 --> 00:18:34,680
file and the text file contains bomb

00:18:29,250 --> 00:18:36,600
modules palm then reads the modules from

00:18:34,680 --> 00:18:38,520
the text file and each modules represent

00:18:36,600 --> 00:18:42,480
some authentication back end there is a

00:18:38,520 --> 00:18:44,510
pump module for files like EDC password

00:18:42,480 --> 00:18:46,650
is shadow there is a module for

00:18:44,510 --> 00:18:48,210
authentication against held up against

00:18:46,650 --> 00:18:51,330
some bossman bind and so on so on

00:18:48,210 --> 00:18:54,120
there's many many modules the thing

00:18:51,330 --> 00:18:58,490
about palm is that it's really really

00:18:54,120 --> 00:18:58,490
hard to test without some some help ah

00:18:58,820 --> 00:19:06,570
um makes it harder to test with scum of

00:19:03,120 --> 00:19:12,230
several ways first the service files

00:19:06,570 --> 00:19:16,440
like / ET c / palm daddy / su or sh are

00:19:12,230 --> 00:19:18,930
are typically only readable writable by

00:19:16,440 --> 00:19:21,090
root and there is no way to tell palm to

00:19:18,930 --> 00:19:23,340
look elsewhere for the service file so

00:19:21,090 --> 00:19:29,010
only what you have on the system can be

00:19:23,340 --> 00:19:30,870
used ah the other thing is that are the

00:19:29,010 --> 00:19:32,700
palm modules that are under test are

00:19:30,870 --> 00:19:36,030
initialized by the palm library in a

00:19:32,700 --> 00:19:41,820
special way which again is not so easy

00:19:36,030 --> 00:19:44,810
to simulate and during the test of

00:19:41,820 --> 00:19:48,540
either by modules like parm unix or

00:19:44,810 --> 00:19:50,580
publications like ssh we want to that

00:19:48,540 --> 00:19:51,780
these two are kind of different with the

00:19:50,580 --> 00:19:58,080
palm application we want to make sure

00:19:51,780 --> 00:19:59,490
that if the pump module tells from from

00:19:58,080 --> 00:20:01,380
the pump stack does the application okay

00:19:59,490 --> 00:20:03,920
this user can log-in them everything

00:20:01,380 --> 00:20:06,110
works fine and the shell is open and as

00:20:03,920 --> 00:20:07,550
H allows you on the other hand with the

00:20:06,110 --> 00:20:09,560
palm module you want to make sure that

00:20:07,550 --> 00:20:12,290
for the expected input like the correct

00:20:09,560 --> 00:20:14,600
username and correct password the pump

00:20:12,290 --> 00:20:16,790
module allows the user and on the other

00:20:14,600 --> 00:20:19,550
hand if the user types in wrong password

00:20:16,790 --> 00:20:21,680
or some non-existent user then an error

00:20:19,550 --> 00:20:26,060
is returned and you are correctly denied

00:20:21,680 --> 00:20:28,040
access all these are quite hard to test

00:20:26,060 --> 00:20:30,440
unless you have something like BAM

00:20:28,040 --> 00:20:34,100
repair because Pam wrapper allows you to

00:20:30,440 --> 00:20:40,700
load your completely custom pump service

00:20:34,100 --> 00:20:42,680
files from location that you control so

00:20:40,700 --> 00:20:45,740
you can tell your application to talk to

00:20:42,680 --> 00:20:47,660
some some prepared modules as part of

00:20:45,740 --> 00:20:49,550
Pam wrapper we prepared one module that

00:20:47,660 --> 00:20:52,760
is very useful for testing it's called

00:20:49,550 --> 00:20:55,010
bomb matrix it's a kind of silly module

00:20:52,760 --> 00:20:57,290
they're only suitable for testing that

00:20:55,010 --> 00:21:00,560
authenticates users against the clear

00:20:57,290 --> 00:21:03,980
text our username password database so

00:21:00,560 --> 00:21:05,930
very simple to set up and I think

00:21:03,980 --> 00:21:11,510
address already uses it to test the

00:21:05,930 --> 00:21:13,370
passage ah because driving the whole

00:21:11,510 --> 00:21:16,220
palm conversation and the dialogue in

00:21:13,370 --> 00:21:19,340
processes are quite a lot of code it's

00:21:16,220 --> 00:21:21,260
not so easy to set it up we also wrote a

00:21:19,340 --> 00:21:25,060
library that is called lip balm test

00:21:21,260 --> 00:21:30,230
that simplifies writing of palm tests I

00:21:25,060 --> 00:21:33,080
guess I'll show you later the whole test

00:21:30,230 --> 00:21:36,080
that tries to authenticate a user with a

00:21:33,080 --> 00:21:38,750
correct or incorrect password is reduced

00:21:36,080 --> 00:21:41,240
to just three or four lines of c code

00:21:38,750 --> 00:21:44,030
with this library and this library has a

00:21:41,240 --> 00:21:46,220
capi because that's the like lowest

00:21:44,030 --> 00:21:48,680
common denominator and we also call it

00:21:46,220 --> 00:21:55,580
up a python api because that's what many

00:21:48,680 --> 00:21:57,830
tests are written in using all these

00:21:55,580 --> 00:22:00,290
rappers together we can prepare a fake

00:21:57,830 --> 00:22:04,790
environment for our application without

00:22:00,290 --> 00:22:06,920
any heavy environment like VMs the

00:22:04,790 --> 00:22:10,160
really nice thing is that if you prepare

00:22:06,920 --> 00:22:11,840
the tests using these fake rappers you

00:22:10,160 --> 00:22:12,920
can really run them everywhere you can

00:22:11,840 --> 00:22:15,290
run them on your laptop during

00:22:12,920 --> 00:22:17,280
development you can run them in our

00:22:15,290 --> 00:22:18,990
stuff like the

00:22:17,280 --> 00:22:20,910
hosted github see is that are very

00:22:18,990 --> 00:22:23,220
popular these days like Travis or

00:22:20,910 --> 00:22:25,880
semaphore usually sometimes you get

00:22:23,220 --> 00:22:28,440
through there sometimes those and these

00:22:25,880 --> 00:22:31,710
libraries can provide you with the whole

00:22:28,440 --> 00:22:33,210
environmental application needs and you

00:22:31,710 --> 00:22:35,490
can run your tests on every commit and

00:22:33,210 --> 00:22:39,150
they will do all the complex stuff that

00:22:35,490 --> 00:22:46,920
your application needs to and now it's

00:22:39,150 --> 00:22:48,410
time for some demos okay so some might

00:22:46,920 --> 00:22:51,450
has something which is called a

00:22:48,410 --> 00:22:54,060
self-test you can easily run it all you

00:22:51,450 --> 00:22:56,280
have to do is call make tests and then

00:22:54,060 --> 00:22:59,820
it starts to run all our tests we have

00:22:56,280 --> 00:23:01,860
about 1900 testitude that takes about

00:22:59,820 --> 00:23:07,290
three and a half hours we won't do that

00:23:01,860 --> 00:23:11,220
you know you can also select one test

00:23:07,290 --> 00:23:13,050
you to run then it's pretty fast if you

00:23:11,220 --> 00:23:15,050
develop a feature and there is only test

00:23:13,050 --> 00:23:19,080
one test for it you want to run that one

00:23:15,050 --> 00:23:23,490
but if you want either to write a new

00:23:19,080 --> 00:23:26,310
test or to debug a test or debugger

00:23:23,490 --> 00:23:30,720
server we have something which is called

00:23:26,310 --> 00:23:33,660
test em here I say make test them and

00:23:30,720 --> 00:23:36,330
say tell it what environment I want to

00:23:33,660 --> 00:23:39,630
have and I also tell that I'm running

00:23:36,330 --> 00:23:45,780
here in a screen so it's t max and when

00:23:39,630 --> 00:23:49,020
I use it it will set up an environment

00:23:45,780 --> 00:23:51,240
for me so here I choose the environment

00:23:49,020 --> 00:23:53,580
which is called ad member so what it

00:23:51,240 --> 00:24:00,030
does first here as you can see it is

00:23:53,580 --> 00:24:01,950
provisioning sorry here we provision an

00:24:00,030 --> 00:24:07,260
Active Directory domain controller at

00:24:01,950 --> 00:24:09,840
the moment this takes some time and when

00:24:07,260 --> 00:24:12,570
this is provisioned then we set up more

00:24:09,840 --> 00:24:19,350
or less another machine and a ad member

00:24:12,570 --> 00:24:21,960
which joins which which joins the Active

00:24:19,350 --> 00:24:28,440
Directory server and it said that sets

00:24:21,960 --> 00:24:28,860
up SMB T&M BTW and winbind and then it

00:24:28,440 --> 00:24:31,650
gives

00:24:28,860 --> 00:24:36,510
a shell you can see here and this shell

00:24:31,650 --> 00:24:39,630
is like a client think about you can

00:24:36,510 --> 00:24:42,360
think about it I set up now to virtual

00:24:39,630 --> 00:24:44,549
machines one for the ad server the

00:24:42,360 --> 00:24:48,330
second for the ad member and now I have

00:24:44,549 --> 00:24:51,630
a shell on the second vm and then this

00:24:48,330 --> 00:24:53,809
shell I I have fully working environment

00:24:51,630 --> 00:24:53,809
now

00:25:06,470 --> 00:25:15,000
and as you can see now i use k in it

00:25:11,250 --> 00:25:17,010
which is a cab or a stool I now got a

00:25:15,000 --> 00:25:19,950
Kerberos ticket from the Active

00:25:17,010 --> 00:25:24,450
Directory server as administrator and as

00:25:19,950 --> 00:25:26,730
you can see now I have a ticket granting

00:25:24,450 --> 00:25:29,730
ticket from the KDC which is running and

00:25:26,730 --> 00:25:40,559
now I can use this ticket to lock into

00:25:29,730 --> 00:25:42,840
the true a sandbar network share and as

00:25:40,559 --> 00:25:46,200
this is with cameras tickets and single

00:25:42,840 --> 00:25:51,000
sign-on you can see I'm connected to the

00:25:46,200 --> 00:25:57,240
server and I can list the shares and if

00:25:51,000 --> 00:26:03,179
I say Who am I oh ok i thought that

00:25:57,240 --> 00:26:08,130
Jeremy implemented that already yes so

00:26:03,179 --> 00:26:11,010
here Samba is a network service

00:26:08,130 --> 00:26:13,890
indicates users and needs to write files

00:26:11,010 --> 00:26:16,320
as a user so it requires to run as root

00:26:13,890 --> 00:26:18,390
normally so as we are running here with

00:26:16,320 --> 00:26:21,750
socket rapper NSS forever you ID wrapper

00:26:18,390 --> 00:26:24,059
and stuff like that it is able to be

00:26:21,750 --> 00:26:26,159
Kate we are able to start as shrewd and

00:26:24,059 --> 00:26:28,890
is able to switch to the user I of

00:26:26,159 --> 00:26:31,919
syndicate and as I'm authenticated as

00:26:28,890 --> 00:26:34,320
administrator now I'm locked in here as

00:26:31,919 --> 00:26:36,600
administrator and zamar saw that on the

00:26:34,320 --> 00:26:38,730
file system or on the system it switched

00:26:36,600 --> 00:26:41,880
to that user and this is all possible

00:26:38,730 --> 00:26:43,919
with C rep so I have just one command I

00:26:41,880 --> 00:26:46,110
need to execute and I get in a fully

00:26:43,919 --> 00:26:48,240
working environment normally I need to

00:26:46,110 --> 00:26:51,780
set up at least two virtual machines and

00:26:48,240 --> 00:26:54,720
configure them and that's done here just

00:26:51,780 --> 00:26:57,870
with one command and fusing later it is

00:26:54,720 --> 00:27:02,429
set up it makes it really really simple

00:26:57,870 --> 00:27:06,539
for a developer easy to write a test to

00:27:02,429 --> 00:27:09,240
debug a test or to run a test so it as

00:27:06,539 --> 00:27:12,059
easier it is to run the tests the more

00:27:09,240 --> 00:27:16,190
likely it is that a developer or new

00:27:12,059 --> 00:27:16,190
developer will also run the test

00:27:26,570 --> 00:27:32,460
this is too tight for two laptops or be

00:27:29,100 --> 00:27:36,360
bit on the side so this is a test we

00:27:32,460 --> 00:27:42,830
have in an SSD that actually tests the

00:27:36,360 --> 00:27:45,030
palm sss the bama system module the

00:27:42,830 --> 00:27:47,669
palaces module does some pretty complex

00:27:45,030 --> 00:27:50,039
stuff I chose tests that as you can see

00:27:47,669 --> 00:27:52,230
from the name it tests palm

00:27:50,039 --> 00:27:54,390
authentication using one-time password

00:27:52,230 --> 00:27:58,500
obviously doing tests that I want to run

00:27:54,390 --> 00:28:01,650
on my machine I don't have any RSA token

00:27:58,500 --> 00:28:05,309
or Google Authenticator to generate OTPs

00:28:01,650 --> 00:28:07,620
so I need to fake the whole the whole

00:28:05,309 --> 00:28:10,980
conversation with with Pam wrapper and

00:28:07,620 --> 00:28:14,789
what Pam rapper allows me to do is use

00:28:10,980 --> 00:28:18,330
just these two lines of C code the first

00:28:14,789 --> 00:28:21,059
line says I want to run a pump test case

00:28:18,330 --> 00:28:24,210
that will authenticate the user and I

00:28:21,059 --> 00:28:28,380
expect that test return success the

00:28:24,210 --> 00:28:30,870
other is a special lip balm a command

00:28:28,380 --> 00:28:34,169
that returns the whole palm environment

00:28:30,870 --> 00:28:37,320
so we can see what the pump module under

00:28:34,169 --> 00:28:42,270
test set or did not set I also expect it

00:28:37,320 --> 00:28:44,520
to succeed the test then prepares a pump

00:28:42,270 --> 00:28:48,330
service file for the pom-pom assistance

00:28:44,520 --> 00:28:51,630
module r which is called telstra spam

00:28:48,330 --> 00:28:54,210
assess and also was able to add more

00:28:51,630 --> 00:28:56,010
options to the module this would

00:28:54,210 --> 00:29:00,840
normally require me to write as root to

00:28:56,010 --> 00:29:03,360
the et see panty directory and as last

00:29:00,840 --> 00:29:06,289
step I call a function of our lip pump

00:29:03,360 --> 00:29:08,760
test library called ramp on test I

00:29:06,289 --> 00:29:12,870
specify the service name that I created

00:29:08,760 --> 00:29:16,020
earlier I login as an user code a user

00:29:12,870 --> 00:29:19,730
called OTP user and in this structure

00:29:16,020 --> 00:29:23,850
called conversation data I have a

00:29:19,730 --> 00:29:26,100
password and a one-time token that the

00:29:23,850 --> 00:29:27,600
mock back end that is simulating the SSD

00:29:26,100 --> 00:29:28,960
runny nose that ok this is the valid

00:29:27,600 --> 00:29:33,940
combination for the test

00:29:28,960 --> 00:29:37,779
and what it does it really execute the

00:29:33,940 --> 00:29:40,330
pump module and the pump module returns

00:29:37,779 --> 00:29:42,970
the success just like or runs the same

00:29:40,330 --> 00:29:44,500
code it would as if I actually had the

00:29:42,970 --> 00:29:45,970
RSA token and did the whole pump

00:29:44,500 --> 00:29:48,070
conversation from the command like that

00:29:45,970 --> 00:29:53,649
this is completely automated and doesn't

00:29:48,070 --> 00:29:56,710
require any privileges the maybe I can

00:29:53,649 --> 00:29:59,140
show you the other thing we have

00:29:56,710 --> 00:30:05,169
something like some but this time Venus

00:29:59,140 --> 00:30:08,559
SSD it's not as nice but ah i can run

00:30:05,169 --> 00:30:10,960
tests and in this test i inserted the

00:30:08,559 --> 00:30:13,419
break point we have function that is

00:30:10,960 --> 00:30:18,700
able to pause the tests at some point

00:30:13,419 --> 00:30:23,529
and when the break point is executed it

00:30:18,700 --> 00:30:35,460
starts a screen also so there is a seer

00:30:23,529 --> 00:30:40,750
obsession oops i can touch to it and are

00:30:35,460 --> 00:30:47,230
now again I'm thanks now we can I'm you

00:30:40,750 --> 00:30:50,950
know in a simulated environment where an

00:30:47,230 --> 00:30:54,809
ldap server is running our and this is

00:30:50,950 --> 00:30:54,809
disabled to talk to this old observer

00:31:01,140 --> 00:31:06,010
just setting up the system so it's able

00:31:03,640 --> 00:31:06,940
to resolve a user like this from an ldap

00:31:06,010 --> 00:31:10,929
server and display this information

00:31:06,940 --> 00:31:14,200
requires normally root and just running

00:31:10,929 --> 00:31:18,330
sssd I can show you the SSD processes

00:31:14,200 --> 00:31:18,330
that are running can you like

00:31:26,070 --> 00:31:31,210
so these are the SSD processes that are

00:31:29,470 --> 00:31:35,049
running on my system the first one is

00:31:31,210 --> 00:31:38,950
actually the one under test it's being

00:31:35,049 --> 00:31:41,799
executed as my new ID so this is your ID

00:31:38,950 --> 00:31:44,769
of my user on the system but as you can

00:31:41,799 --> 00:31:47,649
see the test things that we are root and

00:31:44,769 --> 00:31:51,100
the processes things that are running on

00:31:47,649 --> 00:31:52,570
the route the second sss DB process

00:31:51,100 --> 00:31:57,299
actually the one that I'm normally using

00:31:52,570 --> 00:32:00,009
on the laptop to authenticate myself so

00:31:57,299 --> 00:32:02,499
again completely synthetic environment

00:32:00,009 --> 00:32:09,009
that test stuff that normally is only

00:32:02,499 --> 00:32:20,499
possible with truth and VMS and so on is

00:32:09,009 --> 00:32:23,889
it the most okay so who uses free rap at

00:32:20,499 --> 00:32:26,740
the moment the biggest user samba then

00:32:23,889 --> 00:32:30,279
comes SSST in the business h i

00:32:26,740 --> 00:32:36,570
implemented it to run client tests

00:32:30,279 --> 00:32:40,139
against an open ssh server darker and

00:32:36,570 --> 00:32:42,879
OpenStack use NSS rapper to support

00:32:40,139 --> 00:32:45,159
arbitrary users there was a problem when

00:32:42,879 --> 00:32:49,240
they provision the environment and I

00:32:45,159 --> 00:32:51,279
think some demons to run that I can

00:32:49,240 --> 00:32:53,230
start them need some users already in

00:32:51,279 --> 00:32:55,299
the system but they don't exist yet and

00:32:53,230 --> 00:32:59,590
for that they need NSS rapper to fake

00:32:55,299 --> 00:33:04,360
that they exist then we know that not

00:32:59,590 --> 00:33:08,679
DNS is using C rep to test their dns

00:33:04,360 --> 00:33:13,960
server not the NSS used by the check

00:33:08,679 --> 00:33:17,320
root domain server and then matos gssapi

00:33:13,960 --> 00:33:21,190
for Apaches using chakra ponerse as

00:33:17,320 --> 00:33:24,220
referred to test new module then Jesus

00:33:21,190 --> 00:33:27,039
proxy which is a privilege separation

00:33:24,220 --> 00:33:31,389
for kerberos credential Cassius is using

00:33:27,039 --> 00:33:34,090
it Pam repairs used by Pam HVAC mostly

00:33:31,389 --> 00:33:39,789
at the moment and also Pam SSS

00:33:34,090 --> 00:33:45,309
and the open connect VPN server is also

00:33:39,789 --> 00:33:46,900
using it for several tests okay if you

00:33:45,309 --> 00:33:49,059
are interested in Europe there as a

00:33:46,900 --> 00:33:51,010
website which is called see rep dark we

00:33:49,059 --> 00:33:52,539
have mailing list for discussions which

00:33:51,010 --> 00:33:55,409
is the cember technical mailing list

00:33:52,539 --> 00:33:59,230
because a lot of Samba developers

00:33:55,409 --> 00:34:02,710
contribute the code and now this stuff

00:33:59,230 --> 00:34:04,330
also very well and we have a is eternal

00:34:02,710 --> 00:34:08,679
on freenode where if you have questions

00:34:04,330 --> 00:34:12,580
then you can find us there okay and

00:34:08,679 --> 00:34:34,200
that's the end so do you have any

00:34:12,580 --> 00:34:38,290
questions say it loud just yes hello yes

00:34:34,200 --> 00:34:40,960
so can you simulate latency a packet

00:34:38,290 --> 00:34:42,730
loss using the network rapper or am I

00:34:40,960 --> 00:34:46,270
thinking incorrectly about that or is

00:34:42,730 --> 00:34:48,460
that something that could be added the

00:34:46,270 --> 00:34:52,210
question was about if we can simulate

00:34:48,460 --> 00:34:54,460
packet latency and stuff like that now

00:34:52,210 --> 00:34:59,440
we don't have something like in there to

00:34:54,460 --> 00:35:02,440
inject delays i'm not sure if we want

00:34:59,440 --> 00:35:05,560
that so the thing is what you can

00:35:02,440 --> 00:35:09,070
sometimes do is as soon as you unset the

00:35:05,560 --> 00:35:11,470
socket reparatur very able all the

00:35:09,070 --> 00:35:13,150
network connections are more or less gun

00:35:11,470 --> 00:35:15,790
because it doesn't find the eunuch

00:35:13,150 --> 00:35:17,950
circuits that's something you can do but

00:35:15,790 --> 00:35:20,230
doesn't we don't have anything else and

00:35:17,950 --> 00:35:24,910
we never needed something like that till

00:35:20,230 --> 00:35:28,750
now and I guess in the same vein can you

00:35:24,910 --> 00:35:33,599
simulate DNS lookup failure or problems

00:35:28,750 --> 00:35:37,119
like that well with what do you mean was

00:35:33,599 --> 00:35:40,839
simulating sflow cups yeah so for the

00:35:37,119 --> 00:35:42,430
DNS rapper say that oh this this lookup

00:35:40,839 --> 00:35:45,660
should fail and this should succeed and

00:35:42,430 --> 00:35:45,660
give different return

00:35:45,850 --> 00:35:52,670
now this should be this should be

00:35:50,870 --> 00:35:55,550
possible to implement just not

00:35:52,670 --> 00:35:57,920
implemented yet so I'll ask on the

00:35:55,550 --> 00:36:03,760
mailing list and maybe we can we can do

00:35:57,920 --> 00:36:03,760
that or send a patch so what we are able

00:36:03,910 --> 00:36:10,790
so we can what resolve from what resolve

00:36:07,760 --> 00:36:13,850
wrapper is able to do is you can create

00:36:10,790 --> 00:36:17,330
a fake dns server by just writing a

00:36:13,850 --> 00:36:22,040
simple file and then it will serve all

00:36:17,330 --> 00:36:24,650
the queries from their query at resolve

00:36:22,040 --> 00:36:28,700
wrappers only for functions which come

00:36:24,650 --> 00:36:32,480
from lib resolve for example lip cup 5

00:36:28,700 --> 00:36:35,180
the Kerberos library does the service

00:36:32,480 --> 00:36:37,820
discovery using as a view record lookups

00:36:35,180 --> 00:36:40,970
to find the KBC and resolve wrapper is

00:36:37,820 --> 00:36:45,440
there to solve that that is able to find

00:36:40,970 --> 00:36:48,320
that other DNS queries like if you lose

00:36:45,440 --> 00:36:50,750
yet and toasts something like that that

00:36:48,320 --> 00:36:54,710
is going through NSS rapper because in s

00:36:50,750 --> 00:36:57,470
rapper as rapper has a hostess file

00:36:54,710 --> 00:37:01,400
support but we want to change that we

00:36:57,470 --> 00:37:05,090
want to also support NSS hast modules

00:37:01,400 --> 00:37:08,810
then implement NSS hosts module which

00:37:05,090 --> 00:37:12,310
then loads resolve wrapper and this way

00:37:08,810 --> 00:37:22,340
you can really go with DNS over you

00:37:12,310 --> 00:37:24,500
specify or failure right thanks um maybe

00:37:22,340 --> 00:37:28,390
just seemed in a question s so do you

00:37:24,500 --> 00:37:31,730
have any fault injection so in general

00:37:28,390 --> 00:37:34,070
implementation in that theory out we

00:37:31,730 --> 00:37:37,160
don't have any code injection yeah maybe

00:37:34,070 --> 00:37:39,460
that would be better perhaps and when I

00:37:37,160 --> 00:37:42,590
compared with arm so the normal

00:37:39,460 --> 00:37:49,040
sandboxing with a namespace then I think

00:37:42,590 --> 00:37:51,050
the one wasn't missing is a UTS so for

00:37:49,040 --> 00:37:53,339
example unsure command can just easy

00:37:51,050 --> 00:37:56,519
change the hostname and so on

00:37:53,339 --> 00:37:58,890
or times and that's all UTS things can

00:37:56,519 --> 00:38:01,469
be also implemented may be easily in

00:37:58,890 --> 00:38:02,999
that fill up so changing the hostname as

00:38:01,469 --> 00:38:05,400
possible by just setting in an

00:38:02,999 --> 00:38:08,279
environment variable which is called NSS

00:38:05,400 --> 00:38:11,700
rebel hostname okay done yeah yeah okay

00:38:08,279 --> 00:38:14,460
I'll web right in NSS possible because

00:38:11,700 --> 00:38:17,400
it's also a chilly bc call get host name

00:38:14,460 --> 00:38:19,469
normally and yes i call this rep and if

00:38:17,400 --> 00:38:22,309
you have it set then it will return what

00:38:19,469 --> 00:38:25,739
is in the environment variable yeah and

00:38:22,309 --> 00:38:28,339
one another question is here it is led

00:38:25,739 --> 00:38:31,529
pre-rolled so you cannot check that

00:38:28,339 --> 00:38:35,599
program that managed as way so pleased

00:38:31,529 --> 00:38:40,109
with LD period itself right word can we

00:38:35,599 --> 00:38:44,309
somehow become so that a program that

00:38:40,109 --> 00:38:49,109
sets a LD purely by itself then I think

00:38:44,309 --> 00:38:51,749
it's not easy to overcome yeah but which

00:38:49,109 --> 00:38:55,529
application sets LD preload by itself I

00:38:51,749 --> 00:38:58,380
mean there are the thing is one problem

00:38:55,529 --> 00:39:01,559
for example is if if the next cue table

00:38:58,380 --> 00:39:05,609
has the sui deep it's set then LD

00:39:01,559 --> 00:39:07,589
preload is not allowed now why we are

00:39:05,609 --> 00:39:10,410
deeply road is just by so we invited

00:39:07,589 --> 00:39:14,430
them environment variables so yeah it

00:39:10,410 --> 00:39:17,219
can be easily overly overwritten so if

00:39:14,430 --> 00:39:20,789
the executable already started and then

00:39:17,219 --> 00:39:24,599
says environment variable then it will

00:39:20,789 --> 00:39:28,259
only then LD preload then the libraries

00:39:24,599 --> 00:39:31,650
are already loaded and you cannot pre

00:39:28,259 --> 00:39:34,019
well you show that that well that

00:39:31,650 --> 00:39:36,450
question is if the test is only what

00:39:34,019 --> 00:39:38,910
process works as a fork that if the

00:39:36,450 --> 00:39:41,819
process itself folks and before that it

00:39:38,910 --> 00:39:44,880
resets the LDP wrote over right just

00:39:41,819 --> 00:39:48,329
just writing by yes it is by then it

00:39:44,880 --> 00:39:50,099
might not work yeah but then the

00:39:48,329 --> 00:39:53,279
application should probably read the

00:39:50,099 --> 00:39:56,819
variable first and then yeah that's the

00:39:53,279 --> 00:39:58,829
LDP Roach has a syntax that you can to

00:39:56,819 --> 00:40:00,660
just concatenate the whole different

00:39:58,829 --> 00:40:04,230
files or the application should be fixed

00:40:00,660 --> 00:40:06,450
to do that yeah

00:40:04,230 --> 00:40:09,869
okay just one comment that sound I think

00:40:06,450 --> 00:40:13,109
that really good in this ear app is that

00:40:09,869 --> 00:40:15,890
it can be run just by user space I you

00:40:13,109 --> 00:40:19,470
so use a privilege without any root

00:40:15,890 --> 00:40:22,140
privilege that's that's the biggest well

00:40:19,470 --> 00:40:23,430
I think difference from there there the

00:40:22,140 --> 00:40:25,220
other thing is that i think the

00:40:23,430 --> 00:40:28,410
namespaces our linux only thing right

00:40:25,220 --> 00:40:33,540
right and this is portable yeah so this

00:40:28,410 --> 00:40:37,160
we we test all the rappers on freebsd on

00:40:33,540 --> 00:40:39,960
solaris most of them work on our way 6

00:40:37,160 --> 00:40:41,820
it depends on what features that is

00:40:39,960 --> 00:40:44,070
available on the platform but if it is

00:40:41,820 --> 00:40:47,100
available then we normally are able to

00:40:44,070 --> 00:40:50,910
run so this works on a socket rapper at

00:40:47,100 --> 00:40:54,390
least works on freebsd openbsd solaris

00:40:50,910 --> 00:40:58,050
and neurosis yeah that's best room okay

00:40:54,390 --> 00:41:00,390
thank you and really the singers what's

00:40:58,050 --> 00:41:04,950
important for us we want to make it as

00:41:00,390 --> 00:41:07,250
easy as possible to run a test because

00:41:04,950 --> 00:41:10,500
that's the way how you can encourage

00:41:07,250 --> 00:41:12,900
developers and also do developers

00:41:10,500 --> 00:41:15,690
joining your project to actually execute

00:41:12,900 --> 00:41:18,150
the tests if it's hard if you have two

00:41:15,690 --> 00:41:20,070
pages to set up the end the test

00:41:18,150 --> 00:41:22,650
environment and someone just wants to

00:41:20,070 --> 00:41:24,600
send in a small patch they they won't do

00:41:22,650 --> 00:41:27,480
that but if you just tell them well

00:41:24,600 --> 00:41:32,730
comic test and it runs and if it

00:41:27,480 --> 00:41:37,170
succeeds we know your patch is fine hi

00:41:32,730 --> 00:41:43,920
do you do any system call interruption

00:41:37,170 --> 00:41:46,830
and basically fake system calls we we

00:41:43,920 --> 00:41:50,070
also emulate some system calls

00:41:46,830 --> 00:41:52,970
especially for a UID rappers doing that

00:41:50,070 --> 00:41:59,490
because you have the system clause for

00:41:52,970 --> 00:42:03,480
set our EU ID set re s UID and we need

00:41:59,490 --> 00:42:06,480
especially to wrap these ones to just

00:42:03,480 --> 00:42:10,200
set to switch a UID for local threat at

00:42:06,480 --> 00:42:12,869
least on Linux with Philip C so in there

00:42:10,200 --> 00:42:14,960
we are able to simulate it and also we

00:42:12,869 --> 00:42:16,910
have in the socket rapper

00:42:14,960 --> 00:42:19,780
there is one I Oh control which we're

00:42:16,910 --> 00:42:25,840
apt to read remaining bites on a socket

00:42:19,780 --> 00:42:29,420
and I f NCT our icing too I'm not sure

00:42:25,840 --> 00:42:33,380
another question how is some bar using

00:42:29,420 --> 00:42:37,210
Siri up exactly i mean is some but

00:42:33,380 --> 00:42:40,960
torture using it is is is it just

00:42:37,210 --> 00:42:45,050
testing the samba server and the client

00:42:40,960 --> 00:42:48,320
using syrup or did you use samba torture

00:42:45,050 --> 00:42:54,110
or are there advantages disadvantages to

00:42:48,320 --> 00:42:56,000
it so semih has several tests so we use

00:42:54,110 --> 00:42:57,650
it to do integration tests which means

00:42:56,000 --> 00:43:01,000
we have a binary which is called as be

00:42:57,650 --> 00:43:03,820
torture as a p torture more or less

00:43:01,000 --> 00:43:07,460
implements all the protocol behavior and

00:43:03,820 --> 00:43:09,920
we run this against isin Active

00:43:07,460 --> 00:43:12,110
Directory server assemble file server

00:43:09,920 --> 00:43:15,320
and stuff like that and all of this

00:43:12,110 --> 00:43:18,320
environment setup using C rep okay so

00:43:15,320 --> 00:43:20,450
you're using samba torture in the heart

00:43:18,320 --> 00:43:22,910
and also i mean their result there are

00:43:20,450 --> 00:43:24,770
also pilot scripts which do tests

00:43:22,910 --> 00:43:26,840
against the semi servers or Active

00:43:24,770 --> 00:43:31,520
Directory there are shell scripts which

00:43:26,840 --> 00:43:34,970
run tests or binaries all of this you

00:43:31,520 --> 00:43:36,890
said in one vm for example like you

00:43:34,970 --> 00:43:40,670
don't use multiple ones you just use a

00:43:36,890 --> 00:43:53,050
server client on the same machine yes so

00:43:40,670 --> 00:43:53,050
I can sing yeah sorry

00:43:56,200 --> 00:44:05,330
as you can see here this is active

00:44:00,980 --> 00:44:08,990
directory running which is also starting

00:44:05,330 --> 00:44:11,960
winbind and this is the ad member which

00:44:08,990 --> 00:44:14,119
starts winbindd that you are

00:44:11,960 --> 00:44:16,400
authenticated user against ad and a file

00:44:14,119 --> 00:44:19,400
server which you can connect you to the

00:44:16,400 --> 00:44:22,880
stairs and when I execute hasn't be

00:44:19,400 --> 00:44:25,640
client here and I more or less on on

00:44:22,880 --> 00:44:29,270
that IT member which is these processes

00:44:25,640 --> 00:44:30,950
I'm here and I'm connecting from here to

00:44:29,270 --> 00:44:33,290
the Active Directory server which is

00:44:30,950 --> 00:44:35,690
which are these processes but they are

00:44:33,290 --> 00:44:43,180
they are running all on the same host on

00:44:35,690 --> 00:44:43,180
my machine as my user so if I print it

00:44:48,940 --> 00:44:54,230
if I print it out then you can see it's

00:44:51,470 --> 00:44:57,220
running as a SN that's me ok thank you

00:44:54,230 --> 00:44:57,220
all each process

00:45:06,550 --> 00:45:12,480
ok that's it sank like really much for

00:45:10,360 --> 00:45:12,480

YouTube URL: https://www.youtube.com/watch?v=GUHCT94nBdk


