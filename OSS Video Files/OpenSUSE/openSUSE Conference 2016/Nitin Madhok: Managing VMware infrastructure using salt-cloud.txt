Title: Nitin Madhok: Managing VMware infrastructure using salt-cloud
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/792-managing-vmware-infrastructure-using-salt-cloud

Want to learn how to deploy VM's on the fly in your VMware infrastructure using the orchestration power of salt-cloud? Attendees will walk away from this workshop/presentation with the tools, skills and knowledge to deploy and manage VM’s in their VMware environment in a reproducible, maintainable and a manageable way using salt and salt-cloud. 

We will be explaining how VM's can be created and destroyed across multiple vCenters, how they can be easily queried and how various tasks can be performed on vCenters. We will also show you how you can perform simple tasks such as creating/removing snapshots of VM’s, starting/stopping/suspending/resuming VM's, querying VM's for information etc using salt-cloud!

This workshop/presentation is a great use case on how Clemson University has used SaltStack Software (salt, salt-cloud) to automate it's VMware environment and the day to day routine tasks performed by the VMware administrators and made it simpler for people with no prior VMware knowledge to easily deploy and manage the VM's in their environment.

For more information visit: 
Getting Started Docs: https://docs.saltstack.com/en/develop/topics/cloud/vmware.html
Available Function: http://docs.saltstack.com/en/develop/ref/clouds/all/salt.cloud.clouds.vmware.html

Nitin Madhok
Captions: 
	00:00:07,630 --> 00:00:14,950
map can be used to specify multiple VMs

00:00:10,360 --> 00:00:17,140
using the same profile in a profile you

00:00:14,950 --> 00:00:20,560
can create one profile per VMs but

00:00:17,140 --> 00:00:22,840
that's not the suggested way because a

00:00:20,560 --> 00:00:26,080
lot of the VMS are gonna share some

00:00:22,840 --> 00:00:28,630
information things like passwords or

00:00:26,080 --> 00:00:30,699
let's say you have a m2 dot large

00:00:28,630 --> 00:00:33,220
profile that you create you always want

00:00:30,699 --> 00:00:35,440
them to have the same number of CPUs and

00:00:33,220 --> 00:00:37,960
memory so you can create that as a

00:00:35,440 --> 00:00:41,160
profile and then in your map you can use

00:00:37,960 --> 00:00:43,539
that profile and then specify

00:00:41,160 --> 00:00:46,780
information that's only specific to the

00:00:43,539 --> 00:00:49,030
VM I'll go over that in the example so

00:00:46,780 --> 00:00:55,390
it will be more clear do they have any

00:00:49,030 --> 00:00:57,879
questions right now ok so the next thing

00:00:55,390 --> 00:00:59,710
is we're gonna jump into the live demo

00:00:57,879 --> 00:01:02,170
we're gonna learn how this set up

00:00:59,710 --> 00:01:05,019
configure manage the environment and

00:01:02,170 --> 00:01:09,720
deploy VMs using salt out all of the

00:01:05,019 --> 00:01:09,720
presentation content is that that URL

00:01:23,000 --> 00:01:31,540
so if anyone of you is like following

00:01:26,720 --> 00:01:33,200
whatever I'm doing I've also put

00:01:31,540 --> 00:01:34,670
tutorial file there

00:01:33,200 --> 00:01:38,660
so whatever steps I'm going to do you

00:01:34,670 --> 00:01:40,310
can follow if you miss any step so the

00:01:38,660 --> 00:01:44,360
first thing we want to do is install

00:01:40,310 --> 00:01:51,470
soar flower I've got Oracle Linux over

00:01:44,360 --> 00:01:53,720
here and I just deployed it today so I'm

00:01:51,470 --> 00:01:56,170
just going to go ahead and install sort

00:01:53,720 --> 00:01:56,170
coordinate

00:02:04,450 --> 00:02:13,900
all right one salt cloud is installed we

00:02:06,789 --> 00:02:17,590
need to install the I've ami library so

00:02:13,900 --> 00:02:22,390
that salt cloud can talk to the VMware

00:02:17,590 --> 00:02:25,959
API using the library once we've done

00:02:22,390 --> 00:02:27,849
that we have to configure the cloud

00:02:25,959 --> 00:02:32,799
provider configuration again cloud

00:02:27,849 --> 00:02:34,900
provider is the contains information

00:02:32,799 --> 00:02:39,160
that can be used to authenticate with

00:02:34,900 --> 00:02:41,560
your VMware environment so here there's

00:02:39,160 --> 00:02:45,069
an example you specify the vCenter ID

00:02:41,560 --> 00:02:48,519
the driver is VMware specify a user you

00:02:45,069 --> 00:02:50,470
can specify a password the URL for the

00:02:48,519 --> 00:02:55,720
vCenter server optionally you can

00:02:50,470 --> 00:02:57,370
specify protocol and a port and there's

00:02:55,720 --> 00:03:03,549
better documentation if you just search

00:02:57,370 --> 00:03:09,069
for salt cloud VMware and go to the

00:03:03,549 --> 00:03:11,670
first link or the second link so it

00:03:09,069 --> 00:03:14,530
talks about how to install it and what

00:03:11,670 --> 00:03:16,930
what more options you can configure so

00:03:14,530 --> 00:03:19,299
basically after you configure your

00:03:16,930 --> 00:03:21,220
provider configuration in your profile

00:03:19,299 --> 00:03:25,239
you can specify anything like number of

00:03:21,220 --> 00:03:27,880
CPUs memory you want specify the cd/dvd

00:03:25,239 --> 00:03:30,430
drive specify if you want an ISO to be

00:03:27,880 --> 00:03:33,280
mapped to that you can specify what

00:03:30,430 --> 00:03:35,560
disks if you want to resize those disks

00:03:33,280 --> 00:03:38,530
or add add them to a specific Scaasi

00:03:35,560 --> 00:03:41,500
controller in the network section you

00:03:38,530 --> 00:03:45,340
can specify network adapters if the

00:03:41,500 --> 00:03:48,730
network is a DHCP enabled then you don't

00:03:45,340 --> 00:03:52,810
have to specify a static IP so that's an

00:03:48,730 --> 00:03:55,870
example where the network is a DHCP

00:03:52,810 --> 00:03:57,609
Network if it's a static Network then

00:03:55,870 --> 00:04:02,500
you can specify IP gateway and subnet

00:03:57,609 --> 00:04:05,680
mask you can specify as Kazi controllers

00:04:02,500 --> 00:04:06,340
that you want to create specify your

00:04:05,680 --> 00:04:08,680
domain

00:04:06,340 --> 00:04:10,100
specify the DNS servers which get set

00:04:08,680 --> 00:04:14,330
using VMware to

00:04:10,100 --> 00:04:18,920
on your servers and there's a ton of

00:04:14,330 --> 00:04:21,980
other things that you can do so on the

00:04:18,920 --> 00:04:28,870
github repository I've created a sample

00:04:21,980 --> 00:04:33,230
script to set up the VMware cloud driver

00:04:28,870 --> 00:04:36,970
specific information so you can just

00:04:33,230 --> 00:04:42,770
call that file and then set your

00:04:36,970 --> 00:04:44,990
passwords and and credentials dad and I

00:04:42,770 --> 00:04:47,830
already have the file here so I'm just

00:04:44,990 --> 00:04:47,830
going to go ahead and run it

00:04:55,430 --> 00:05:00,290
as a part of the process it also

00:04:57,320 --> 00:05:02,570
restarts the swordmaster so you should

00:05:00,290 --> 00:05:04,970
see all truths and then in the end it

00:05:02,570 --> 00:05:08,450
tries to establish a connection say is

00:05:04,970 --> 00:05:12,950
the connection is successful so going

00:05:08,450 --> 00:05:14,830
back to the tutorial setting this after

00:05:12,950 --> 00:05:18,050
you set this up you can use most of the

00:05:14,830 --> 00:05:22,640
functionality that gets shipped with the

00:05:18,050 --> 00:05:25,520
driver if you go to the second link it

00:05:22,640 --> 00:05:30,710
talks about how you can how you can add

00:05:25,520 --> 00:05:34,700
hose remove toes query for data centers

00:05:30,710 --> 00:05:39,080
and other information so let's just go

00:05:34,700 --> 00:05:42,590
ahead and play around with ESX host that

00:05:39,080 --> 00:05:45,020
we have so in my VMware environment I

00:05:42,590 --> 00:05:47,870
have for ESX host right there right now

00:05:45,020 --> 00:05:58,970
in maintenance mode I am gonna go ahead

00:05:47,870 --> 00:06:02,270
and exit them so the command to do that

00:05:58,970 --> 00:06:03,650
is salt cloud - f - f is children a

00:06:02,270 --> 00:06:05,870
function across your V Center

00:06:03,650 --> 00:06:07,820
environment and then the name of the

00:06:05,870 --> 00:06:10,340
function is exit maintenance mode you

00:06:07,820 --> 00:06:12,200
specify the V Center in my case it's V

00:06:10,340 --> 00:06:14,810
Center of 3 because that's what I said

00:06:12,200 --> 00:06:21,140
it has and then you specify the host

00:06:14,810 --> 00:06:23,980
that you want to exit so let's pick ESX

00:06:21,140 --> 00:06:23,980
zero seven true

00:06:34,070 --> 00:06:38,180
and right now it's waiting for the exit

00:06:36,170 --> 00:06:44,540
maintenance more tasks to finish if we

00:06:38,180 --> 00:06:48,400
go back here refresh the task is already

00:06:44,540 --> 00:06:48,400
started and it's in progress

00:06:56,389 --> 00:07:02,810
but it's completed so now you see the

00:07:00,139 --> 00:07:06,409
hostess outside maintenance mode we can

00:07:02,810 --> 00:07:07,789
enter it back using the similar command

00:07:06,409 --> 00:07:14,770
but replacing the function with the

00:07:07,789 --> 00:07:14,770
enter maintenance mode do that

00:07:32,530 --> 00:07:41,080
right it entered the maintenance mode we

00:07:36,620 --> 00:07:44,650
can disconnect the host using disconnect

00:07:41,080 --> 00:07:44,650
underscore ghost command

00:07:56,820 --> 00:08:03,140
and then we see the hosters disconnected

00:07:59,130 --> 00:08:06,710
now we can reconnect it by using the

00:08:03,140 --> 00:08:06,710
connector underscore host

00:08:35,710 --> 00:08:41,979
alright the host is reconnected now you

00:08:39,010 --> 00:08:44,399
can similarly remove the ESXi host I'm

00:08:41,979 --> 00:08:47,380
not going to go over that last command

00:08:44,399 --> 00:08:49,300
creating a data center whatever you can

00:08:47,380 --> 00:08:51,760
do from the vCenter UI you can do from

00:08:49,300 --> 00:08:53,700
the command line client or at least most

00:08:51,760 --> 00:08:56,470
of it things like creating a data center

00:08:53,700 --> 00:08:59,170
creating a cluster and then creating a

00:08:56,470 --> 00:09:01,660
data store cluster adding ESXi host to

00:08:59,170 --> 00:09:03,610
the clusters and then adding hostess

00:09:01,660 --> 00:09:06,279
stand a standalone host and the data

00:09:03,610 --> 00:09:08,020
center instead of going over each of

00:09:06,279 --> 00:09:11,950
these commands what i did as i created a

00:09:08,020 --> 00:09:16,810
bash script which is again if you go to

00:09:11,950 --> 00:09:22,630
the samples folder there's a vmware

00:09:16,810 --> 00:09:24,250
build environment build environment you

00:09:22,630 --> 00:09:25,959
specify the vCenter name that you want

00:09:24,250 --> 00:09:28,930
to use specify a name for the data

00:09:25,959 --> 00:09:31,930
center specify the cluster name that you

00:09:28,930 --> 00:09:35,500
want created specify the ESX host that

00:09:31,930 --> 00:09:37,930
you want added to the cluster and that

00:09:35,500 --> 00:09:41,290
you want add it as standalone host and

00:09:37,930 --> 00:09:45,630
then it just loops across those hosts

00:09:41,290 --> 00:09:47,800
and runs the sort out commands so I'm

00:09:45,630 --> 00:09:49,089
instead of running over each command I'm

00:09:47,800 --> 00:09:54,430
just going to run this batch script and

00:09:49,089 --> 00:09:57,450
show you how it creates the new data

00:09:54,430 --> 00:10:00,630
center and adds these four hosts to it

00:09:57,450 --> 00:10:04,529
so before I do that I'm just going to

00:10:00,630 --> 00:10:04,529
delete this cluster

00:10:15,839 --> 00:10:23,749
and then I'm going to run the build

00:10:20,790 --> 00:10:23,749
environment script

00:10:31,279 --> 00:10:39,879
it created the data center it could

00:10:36,079 --> 00:10:39,879
hated the cluster inside the data center

00:10:42,279 --> 00:10:49,610
it's waiting to add the host systems if

00:10:46,790 --> 00:10:55,420
we go back and refresh we should see a

00:10:49,610 --> 00:11:00,790
new data center here and then we see a

00:10:55,420 --> 00:11:08,899
cluster we're going to start seeing

00:11:00,790 --> 00:11:11,029
hosts here so it had a two host to a

00:11:08,899 --> 00:11:13,249
cluster and now it's going to try to add

00:11:11,029 --> 00:11:15,999
two hosts stand-alone hosts in the

00:11:13,249 --> 00:11:15,999
Arizona

00:11:38,250 --> 00:11:44,590
so this one is a standalone host and

00:11:40,870 --> 00:11:48,420
these two in a cluster so they're going

00:11:44,590 --> 00:11:52,150
to use things like SDRs stolidly

00:11:48,420 --> 00:11:53,890
majority motion and AJ and all those

00:11:52,150 --> 00:12:03,280
capabilities that vmf provides out of

00:11:53,890 --> 00:12:07,360
the box any questions until now okay so

00:12:03,280 --> 00:12:10,980
I'm going to delete this data center now

00:12:07,360 --> 00:12:10,980
that we did most of the stuff

00:12:23,950 --> 00:12:32,470
the next part of the presentation is

00:12:27,070 --> 00:12:32,470
we're going to create virtual machines

00:12:36,310 --> 00:12:44,029
so before you create a virtual machine

00:12:38,540 --> 00:12:47,480
you need to create a profile profile

00:12:44,029 --> 00:12:49,700
contains all of the information that I

00:12:47,480 --> 00:12:54,589
explained earlier things like CPUs

00:12:49,700 --> 00:12:57,320
memory what what customization you want

00:12:54,589 --> 00:12:58,580
on it I already have a profile so I'm

00:12:57,320 --> 00:13:05,330
just going to show you what it looks

00:12:58,580 --> 00:13:09,730
like the profile is going to be specific

00:13:05,330 --> 00:13:13,210
to your environment so in this case

00:13:09,730 --> 00:13:17,140
that's the name of the profile I created

00:13:13,210 --> 00:13:21,850
three of them went for Oracle Linux 6.71

00:13:17,140 --> 00:13:27,050
for open SUSE 42.1 and one for one to

00:13:21,850 --> 00:13:31,040
14.4 and the first one I just specified

00:13:27,050 --> 00:13:35,420
use this vCenter clone from this

00:13:31,040 --> 00:13:37,520
template create the VM in that data

00:13:35,420 --> 00:13:42,830
center in that folder in that cluster

00:13:37,520 --> 00:13:47,080
used that data store cluster and use add

00:13:42,830 --> 00:13:52,070
a network adapter with that network name

00:13:47,080 --> 00:13:55,010
it's a distributed switch type make the

00:13:52,070 --> 00:13:57,050
servers have these DNS servers that's

00:13:55,010 --> 00:13:59,390
the initial password to use to install

00:13:57,050 --> 00:14:01,820
salt on the templates which of course

00:13:59,390 --> 00:14:05,240
gets changed once the highest rate is

00:14:01,820 --> 00:14:10,400
done on them and then point them back to

00:14:05,240 --> 00:14:12,920
this salt master the open-source one

00:14:10,400 --> 00:14:14,839
just extends from the initial one so it

00:14:12,920 --> 00:14:16,760
basically gets everything that's

00:14:14,839 --> 00:14:18,110
specified in the first profile and then

00:14:16,760 --> 00:14:20,510
you can specify what you want to get

00:14:18,110 --> 00:14:24,500
like override or or what you want extra

00:14:20,510 --> 00:14:28,610
so in this case I want to specify a

00:14:24,500 --> 00:14:30,500
different template and just to show like

00:14:28,610 --> 00:14:31,580
disable customization I don't want any

00:14:30,500 --> 00:14:35,090
customizations

00:14:31,580 --> 00:14:37,070
that defaults in case of Ubuntu it's

00:14:35,090 --> 00:14:40,430
going to do the customization since I by

00:14:37,070 --> 00:14:42,110
default it's true and you get the idea

00:14:40,430 --> 00:14:44,060
you can like create for Windows and

00:14:42,110 --> 00:14:47,990
create for the article Linux 7 and

00:14:44,060 --> 00:14:53,560
things like that so now we're going to

00:14:47,990 --> 00:14:53,560
look at a map that uses these profiles

00:14:58,150 --> 00:15:05,420
so in a map you specify the name of the

00:15:02,660 --> 00:15:09,770
profile that you want to use for those

00:15:05,420 --> 00:15:12,590
VMs you specify the vm name as a list

00:15:09,770 --> 00:15:16,340
and then you specify whatever you want

00:15:12,590 --> 00:15:19,520
to want that VM to have specifically

00:15:16,340 --> 00:15:23,150
things like you can specify number of

00:15:19,520 --> 00:15:25,520
CPUs and memory and disks and all of

00:15:23,150 --> 00:15:27,890
that you can specify any of that here in

00:15:25,520 --> 00:15:30,470
this case just to give you an idea i'm

00:15:27,890 --> 00:15:33,080
i'm specifying a different minion ID for

00:15:30,470 --> 00:15:37,490
each one of them by default the minion

00:15:33,080 --> 00:15:39,050
ID is the name of the vm but i wanted to

00:15:37,490 --> 00:15:42,380
be different i wanted to be the fully

00:15:39,050 --> 00:15:45,590
qualified domain name so i'm explicitly

00:15:42,380 --> 00:15:50,000
setting them here so create three

00:15:45,590 --> 00:15:54,290
servers three open two servers create to

00:15:50,000 --> 00:15:57,760
ubuntu servers and create create oracle

00:15:54,290 --> 00:16:02,150
linux servers and create ubuntu servers

00:15:57,760 --> 00:16:06,200
so now i'm going to deploy these VMs in

00:16:02,150 --> 00:16:09,040
parallel so you're going to see seven

00:16:06,200 --> 00:16:09,040
VMs created

00:16:14,410 --> 00:16:20,030
the command for that is all - flower -

00:16:17,120 --> 00:16:23,090
capital P means run it in parallel - M

00:16:20,030 --> 00:16:27,560
means use this map file to generate or

00:16:23,090 --> 00:16:31,180
reply the servers and I'm going to run

00:16:27,560 --> 00:16:35,780
it in debug mode so you can see which

00:16:31,180 --> 00:16:38,900
what's happening so the good thing about

00:16:35,780 --> 00:16:40,460
using map says it it queries your

00:16:38,900 --> 00:16:44,990
environment and it checks if those VMs

00:16:40,460 --> 00:16:46,730
already exist and in this case none of

00:16:44,990 --> 00:16:48,500
the VMS exist so it's gonna tell you

00:16:46,730 --> 00:16:51,410
that hey these VMs won't exist do you

00:16:48,500 --> 00:16:53,480
want me to create it if if there were

00:16:51,410 --> 00:16:55,940
VMs that existed it's gonna say these

00:16:53,480 --> 00:16:57,730
exist and these don't do you want me to

00:16:55,940 --> 00:17:00,710
create these that don't exist

00:16:57,730 --> 00:17:02,450
same process going goes on when you try

00:17:00,710 --> 00:17:04,340
to destroy the server it's going to say

00:17:02,450 --> 00:17:07,520
hey these VMs exist do you really want

00:17:04,340 --> 00:17:12,200
to destroy them so I'm going to press

00:17:07,520 --> 00:17:14,540
yes and then we're gonna see it's going

00:17:12,200 --> 00:17:20,600
to query the environment set set all the

00:17:14,540 --> 00:17:23,590
information it needs to set - right now

00:17:20,600 --> 00:17:23,590
it's sending the events

00:17:39,750 --> 00:17:43,700
so we see some fortune

00:17:52,000 --> 00:17:55,419
let's go back

00:18:26,130 --> 00:18:33,600
so right now it's complaining because

00:18:28,049 --> 00:18:35,490
it's we created a second data center and

00:18:33,600 --> 00:18:42,350
they both share the same data stores so

00:18:35,490 --> 00:18:42,350
I'm gonna try and remove the hosts

00:19:05,750 --> 00:19:10,480
right now I'm going to run that same

00:19:07,700 --> 00:19:10,480
sort of command

00:19:22,900 --> 00:19:29,960
no this is built into salt cloud this is

00:19:27,500 --> 00:19:32,270
built into salt flour the query process

00:19:29,960 --> 00:19:35,270
so even if you're using OpenStack

00:19:32,270 --> 00:19:37,400
provider or digitalocean or AWS it's

00:19:35,270 --> 00:19:39,170
always going to check the name of the

00:19:37,400 --> 00:19:42,679
VMs that you specified in your map or

00:19:39,170 --> 00:19:45,080
your in your Maps it doesn't do it with

00:19:42,679 --> 00:19:49,429
the profiles so if you create a VM using

00:19:45,080 --> 00:19:51,980
a profile instead of using a map it's

00:19:49,429 --> 00:19:57,200
just going to try to create it it

00:19:51,980 --> 00:19:59,059
doesn't actually query them first so now

00:19:57,200 --> 00:20:02,240
we can see it's waiting to apply the

00:19:59,059 --> 00:20:05,240
storage DRS tasks if we look at the

00:20:02,240 --> 00:20:12,669
tasks here we see all of them running in

00:20:05,240 --> 00:20:12,669
parallel one of them already completed

00:20:18,620 --> 00:20:22,159
so it takes about twenty to thirty

00:20:20,169 --> 00:20:24,320
fifteen to twenty seconds

00:20:22,159 --> 00:20:26,690
on an average if you've got a really

00:20:24,320 --> 00:20:30,950
nice data store what it's trying to do

00:20:26,690 --> 00:20:32,480
is it tries to copy the VMDK files from

00:20:30,950 --> 00:20:34,730
your template or the VM that you're

00:20:32,480 --> 00:20:38,240
trying to clone on to a different ESX

00:20:34,730 --> 00:20:40,399
host so if you've got a 10 gig link

00:20:38,240 --> 00:20:42,320
between your ESX hosts then it's going

00:20:40,399 --> 00:20:45,620
to take quicker if you really have a

00:20:42,320 --> 00:20:47,960
slow datastore and like a 1k connection

00:20:45,620 --> 00:20:52,159
or slower than that then it may take

00:20:47,960 --> 00:20:53,960
like a minute or more so the next thing

00:20:52,159 --> 00:20:57,039
it tries to do is wait for the VMware

00:20:53,960 --> 00:21:04,340
tools to be running on those VMs

00:20:57,039 --> 00:21:08,149
all the VMS now should be powered on yep

00:21:04,340 --> 00:21:16,730
they are and if we go on one of the VMS

00:21:08,149 --> 00:21:19,340
and look at the summary page right now

00:21:16,730 --> 00:21:21,769
it doesn't show us any dns names or any

00:21:19,340 --> 00:21:24,080
IP address that is because the omit

00:21:21,769 --> 00:21:26,210
rules is not running right now and after

00:21:24,080 --> 00:21:28,669
the VM boots up it takes a while for the

00:21:26,210 --> 00:21:32,499
VMware tools to come up so right now

00:21:28,669 --> 00:21:32,499
it's just waiting for that step

00:21:37,160 --> 00:21:49,790
and I did miss one step which was there

00:21:40,350 --> 00:21:53,370
in the tutorial which was to update the

00:21:49,790 --> 00:21:58,410
bootstrap script and the reason for that

00:21:53,370 --> 00:22:00,870
is the version of the bootstrap script

00:21:58,410 --> 00:22:02,930
that gets shipped that got shipped with

00:22:00,870 --> 00:22:05,760
the version of salt that's installed is

00:22:02,930 --> 00:22:07,500
has some bugs which has been fixed on

00:22:05,760 --> 00:22:12,660
the latest develop so that command

00:22:07,500 --> 00:22:17,910
updates your bootstrap script so we may

00:22:12,660 --> 00:22:21,860
see installation of salt fail on Ubuntu

00:22:17,910 --> 00:22:21,860
servers what we going to fix that

00:22:34,700 --> 00:22:41,299
so now if I didn't dare command to

00:22:36,499 --> 00:22:44,090
create the servers it says all of them

00:22:41,299 --> 00:22:50,320
are already running I can destroy these

00:22:44,090 --> 00:22:50,320
servers by specifying a - D

00:23:10,960 --> 00:23:17,370
and then recreate them since we updated

00:23:14,710 --> 00:23:17,370
the bootstrap script

00:23:24,389 --> 00:23:32,830
so the complete creation of the VM after

00:23:29,080 --> 00:23:34,929
the VM gets created in VMware it waits

00:23:32,830 --> 00:23:36,490
for VMware tools to run after VM it will

00:23:34,929 --> 00:23:39,309
start running at which for the IP to

00:23:36,490 --> 00:23:47,499
appear up in wait for the VM to get the

00:23:39,309 --> 00:23:50,470
IP and then after your VM gets IP it

00:23:47,499 --> 00:23:52,659
tries to install salt on it and you can

00:23:50,470 --> 00:23:57,789
make it do a high state when it comes

00:23:52,659 --> 00:23:59,350
comes up so with one process you can you

00:23:57,789 --> 00:24:02,460
can deploy a cluster so let's say you

00:23:59,350 --> 00:24:06,369
want to open star cluster the talk I did

00:24:02,460 --> 00:24:09,879
last year in Tokyo for OpenStack summit

00:24:06,369 --> 00:24:11,950
was used this to deploy OpenStack on top

00:24:09,879 --> 00:24:15,129
of a VM air environment and I basically

00:24:11,950 --> 00:24:18,159
had a map file with three compute nodes

00:24:15,129 --> 00:24:19,720
one controller in one network node and I

00:24:18,159 --> 00:24:22,990
deployed them all at once in VMware

00:24:19,720 --> 00:24:25,240
environment just ran one command and it

00:24:22,990 --> 00:24:28,480
did everything else it deployed the

00:24:25,240 --> 00:24:32,200
states that needed to be run on the

00:24:28,480 --> 00:24:34,450
compute nodes distributed the pillars it

00:24:32,200 --> 00:24:38,440
did all of that so you can use this

00:24:34,450 --> 00:24:40,659
process on in to deploy VMs and VMware

00:24:38,440 --> 00:24:45,820
or OpenStack or whatever environment you

00:24:40,659 --> 00:24:50,970
have while this is going on I can answer

00:24:45,820 --> 00:24:50,970
questions if there are any questions

00:24:53,580 --> 00:24:57,809
okay no questions that's good

00:25:11,029 --> 00:25:27,059
you can you can use the same process to

00:25:13,710 --> 00:25:28,830
deploy a Windows server or myself we so

00:25:27,059 --> 00:25:31,739
we do right now have a different process

00:25:28,830 --> 00:25:35,220
to deploy Windows servers but we're

00:25:31,739 --> 00:25:37,409
trying to use the sort cloud driver so

00:25:35,220 --> 00:25:39,179
that process to deploy servers is same

00:25:37,409 --> 00:25:43,320
so it's not different for Linux and

00:25:39,179 --> 00:25:46,619
Windows there are some challenges we ran

00:25:43,320 --> 00:25:49,799
into when using sort with Windows to

00:25:46,619 --> 00:25:52,230
manage them which is the reason that

00:25:49,799 --> 00:25:55,529
there is like a bunch of PowerShell

00:25:52,230 --> 00:26:07,799
scripts that we have that we use to

00:25:55,529 --> 00:26:16,139
deploy and manage them so about 60% or

00:26:07,799 --> 00:26:17,999
70% is Linux 30 to 40% as Windows all of

00:26:16,139 --> 00:26:22,799
the Linux deployments that we do use so

00:26:17,999 --> 00:26:26,279
cloud now earlier they used PowerShell

00:26:22,799 --> 00:26:32,369
scripts that were run on Windows to

00:26:26,279 --> 00:26:35,700
query the VMware API so that's why we

00:26:32,369 --> 00:26:38,899
created the driver so from a Linux you

00:26:35,700 --> 00:26:43,799
could like control your be center and

00:26:38,899 --> 00:26:45,059
run commands and master so as you can

00:26:43,799 --> 00:26:46,619
see right now it's trying to run

00:26:45,059 --> 00:26:53,100
bootstrap script and all of the servers

00:26:46,619 --> 00:26:56,009
it's trying to install salt once this

00:26:53,100 --> 00:26:58,340
process finishes I'll query all the VMS

00:26:56,009 --> 00:26:58,340
and

00:27:01,770 --> 00:27:05,370
any more questions

00:27:10,190 --> 00:27:16,519
I didn't ask about how many of you have

00:27:13,070 --> 00:27:18,740
bare metal servers I did ask about VM

00:27:16,519 --> 00:27:21,519
air and OpenStack do any one of you have

00:27:18,740 --> 00:27:21,519
bare metal servers

00:27:30,500 --> 00:27:34,750
is anybody using docker

00:27:48,450 --> 00:27:53,040
so once the server's can come out they

00:27:50,760 --> 00:27:55,560
they send an event back to the

00:27:53,040 --> 00:27:57,660
swordmaster saying hey I have deployed

00:27:55,560 --> 00:28:00,390
and I've created what do you want me to

00:27:57,660 --> 00:28:04,800
do next you can set up a reactor to

00:28:00,390 --> 00:28:08,400
watch for that event and do something

00:28:04,800 --> 00:28:13,140
else like post a message to your slack

00:28:08,400 --> 00:28:16,410
channel or update your CMDB saying this

00:28:13,140 --> 00:28:20,520
VM was created or decommissioned you can

00:28:16,410 --> 00:28:24,270
also in your in the configuration file

00:28:20,520 --> 00:28:26,940
for the for the VMS the profile or the

00:28:24,270 --> 00:28:29,310
map you can specify startup States and

00:28:26,940 --> 00:28:31,160
either specify a specific state you want

00:28:29,310 --> 00:28:33,990
to run or you can specify high state

00:28:31,160 --> 00:28:36,540
what that does is the moment it sends an

00:28:33,990 --> 00:28:40,080
event back that the VM is created it

00:28:36,540 --> 00:28:42,930
does a high state on that server so if

00:28:40,080 --> 00:28:45,600
you have like a in our in in Clemson's

00:28:42,930 --> 00:28:47,630
case we have a specific build process in

00:28:45,600 --> 00:28:51,180
a specific States that need to be done

00:28:47,630 --> 00:28:52,530
our image is pretty pretty basic it's

00:28:51,180 --> 00:28:58,970
like a golden image it doesn't have

00:28:52,530 --> 00:29:01,980
anything in it the minimum image that we

00:28:58,970 --> 00:29:04,620
minimal footprint that it has that that

00:29:01,980 --> 00:29:07,320
it can have and we try to do everything

00:29:04,620 --> 00:29:12,170
using salt on top of it so makes

00:29:07,320 --> 00:29:15,000
management pretty easy adding users

00:29:12,170 --> 00:29:19,410
installing packages setting this message

00:29:15,000 --> 00:29:21,390
of the days installing spacewalk or some

00:29:19,410 --> 00:29:24,930
sort of software management repository

00:29:21,390 --> 00:29:29,820
management software right so the process

00:29:24,930 --> 00:29:34,530
finished I'm gonna run a salt star test

00:29:29,820 --> 00:29:37,350
dot ping and we see all of them

00:29:34,530 --> 00:29:44,880
responded back I'm going to do a grain

00:29:37,350 --> 00:29:48,420
start gate was full name and there we go

00:29:44,880 --> 00:29:51,990
we've got seven servers all different

00:29:48,420 --> 00:29:54,600
environments right now they're running

00:29:51,990 --> 00:29:58,050
high States on each one of them so I

00:29:54,600 --> 00:30:01,180
told them to install a patch a and of

00:29:58,050 --> 00:30:04,000
course the it's called httpd

00:30:01,180 --> 00:30:06,700
and Apache on another so the states that

00:30:04,000 --> 00:30:09,030
are written are written in a way so they

00:30:06,700 --> 00:30:14,230
can be run across multiple environments

00:30:09,030 --> 00:30:18,100
we use ginger to to figure out what

00:30:14,230 --> 00:30:19,690
state to run on what servers if you've

00:30:18,100 --> 00:30:21,580
got a mixed environment and you use one

00:30:19,690 --> 00:30:23,950
salt master to manage all of them then

00:30:21,580 --> 00:30:26,530
like that's the better way that you use

00:30:23,950 --> 00:30:30,240
you design your states in a way so they

00:30:26,530 --> 00:30:47,770
can be run across multiple distributions

00:30:30,240 --> 00:30:52,180
any questions yes it's the idea was to

00:30:47,770 --> 00:30:54,220
have the most minimal image so we don't

00:30:52,180 --> 00:30:55,960
install any package at all like the

00:30:54,220 --> 00:30:59,080
image that we have is literally the I

00:30:55,960 --> 00:31:03,100
saw that gets shipped from vendors the

00:30:59,080 --> 00:31:06,490
minimum and we we don't even install W

00:31:03,100 --> 00:31:10,780
gate or vim on them we just let sort do

00:31:06,490 --> 00:31:18,130
all that instead pre-installing salt

00:31:10,780 --> 00:31:22,210
rpms on the VMS for some users that

00:31:18,130 --> 00:31:23,650
might make sense like some people who

00:31:22,210 --> 00:31:26,410
want to speed up the process they can

00:31:23,650 --> 00:31:27,730
pre install things on their servers but

00:31:26,410 --> 00:31:30,930
again it's a hassle when you have to

00:31:27,730 --> 00:31:33,010
like update your template every time and

00:31:30,930 --> 00:31:39,430
upgrade salt if there's a new salt

00:31:33,010 --> 00:31:42,460
version things like that but you could

00:31:39,430 --> 00:31:44,890
do that like you could have rpms

00:31:42,460 --> 00:31:46,360
pre-installed of course you still will

00:31:44,890 --> 00:31:49,180
have to need you will need to

00:31:46,360 --> 00:31:53,650
reconfigure your VMs because each VM is

00:31:49,180 --> 00:31:55,660
going to have its own key and it might

00:31:53,650 --> 00:31:58,090
have a different master Oracle point to

00:31:55,660 --> 00:32:00,420
different minion configuration things

00:31:58,090 --> 00:32:00,420
like that

00:32:08,410 --> 00:32:21,650
second you could use thought in it where

00:32:11,000 --> 00:32:28,400
it's something yes you could yeah any

00:32:21,650 --> 00:32:31,179
any other questions okay

00:32:28,400 --> 00:32:34,370
so I guess I'm just gonna finish early

00:32:31,179 --> 00:32:36,470
went too quick I can still answer

00:32:34,370 --> 00:32:40,610
questions or if there are any

00:32:36,470 --> 00:32:42,530
suggestions what we can do more with the

00:32:40,610 --> 00:32:46,610
driver if there are any features you'd

00:32:42,530 --> 00:33:06,470
like to see talk about short loud in

00:32:46,610 --> 00:33:08,720
general okay thank you guys so salt loud

00:33:06,470 --> 00:33:11,980
has different drivers and drivers are

00:33:08,720 --> 00:33:15,740
basically used to connect two different

00:33:11,980 --> 00:33:17,450
api's so VMware has a different API so

00:33:15,740 --> 00:33:24,170
you would need a VMware driver to talk

00:33:17,450 --> 00:33:27,370
to the VMware API there's OpenStack is

00:33:24,170 --> 00:33:32,630
there's a ec2 driver for AWS to talk to

00:33:27,370 --> 00:33:35,210
Amazon Google compute engine has its own

00:33:32,630 --> 00:33:38,059
driver as your has its own driver so

00:33:35,210 --> 00:33:46,720
it's just that that's what I mean by

00:33:38,059 --> 00:33:46,720

YouTube URL: https://www.youtube.com/watch?v=A3V25Xxr9pk


