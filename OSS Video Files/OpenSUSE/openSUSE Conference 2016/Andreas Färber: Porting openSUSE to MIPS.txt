Title: Andreas Färber: Porting openSUSE to MIPS
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/770-porting-opensuse-to-mips

PowerPC and ARM ports exist for some time already, as well as unofficial SPARC and Motorola 68k efforts. This talk will go into details of how to start such a port with OBS and give an update on the progress made for mipsel.

Andreas Färber
Captions: 
	00:00:07,860 --> 00:00:11,150
my name is Andres father I'm going to

00:00:10,290 --> 00:00:14,089
talk

00:00:11,150 --> 00:00:16,250
porting opensuse to MIPS this is another

00:00:14,089 --> 00:00:25,220
talk from the missing manuals category

00:00:16,250 --> 00:00:35,570
about OBS and once again it's not

00:00:25,220 --> 00:00:37,610
showing just a second that we are okay

00:00:35,570 --> 00:00:40,370
so before i start with the actual targum

00:00:37,610 --> 00:00:42,769
a few words about this talk so if you're

00:00:40,370 --> 00:00:44,869
already starting to to google for

00:00:42,769 --> 00:00:46,460
opensuse it's because you're seeing the

00:00:44,869 --> 00:00:51,650
title of this talk then you won't find

00:00:46,460 --> 00:00:54,559
any results for that yet there have been

00:00:51,650 --> 00:00:57,409
a number of previous talks about putting

00:00:54,559 --> 00:01:03,860
opensuse to architectures such as to arm

00:00:57,409 --> 00:01:07,580
v7 arm v6 and age 64 also there's yan

00:01:03,860 --> 00:01:09,560
was working on a poor to sparc64 and and

00:01:07,580 --> 00:01:13,250
rob has been maintaining a port for

00:01:09,560 --> 00:01:15,620
motorola 68 if at all then people have

00:01:13,250 --> 00:01:18,500
been talking about destroy that they

00:01:15,620 --> 00:01:20,090
have ported something in opensuse but

00:01:18,500 --> 00:01:22,070
what i was really missing is more

00:01:20,090 --> 00:01:25,040
detailed information on how do i

00:01:22,070 --> 00:01:28,400
actually port open zoo to something new

00:01:25,040 --> 00:01:30,500
so this talk will focus i am highly on

00:01:28,400 --> 00:01:37,280
the open build service and not so much

00:01:30,500 --> 00:01:38,840
on particularly mips architecture this

00:01:37,280 --> 00:01:40,640
is roughly the outline first i'm going

00:01:38,840 --> 00:01:43,580
to talk about porting opensuse in

00:01:40,640 --> 00:01:45,620
general then moving on to specifically

00:01:43,580 --> 00:01:48,320
for mips the open build server setup

00:01:45,620 --> 00:01:51,350
that i've been using and then the

00:01:48,320 --> 00:01:59,120
workers and finally the status of where

00:01:51,350 --> 00:02:00,799
i have been lately so first of all the

00:01:59,120 --> 00:02:02,720
thought why would anyone want to port

00:02:00,799 --> 00:02:04,970
opensuse to new architecture when it's

00:02:02,720 --> 00:02:07,729
working on say an Intel notebook already

00:02:04,970 --> 00:02:09,429
on arm servers and boards of all kinds

00:02:07,729 --> 00:02:12,579
well

00:02:09,429 --> 00:02:14,379
many of us really like open zoos or at

00:02:12,579 --> 00:02:16,599
least are used to open zoos and would

00:02:14,379 --> 00:02:18,519
like to run the same environment on the

00:02:16,599 --> 00:02:21,010
various hardware that we have access to

00:02:18,519 --> 00:02:23,890
and then another aspect of course is

00:02:21,010 --> 00:02:26,319
learning how opss and bootstrapping

00:02:23,890 --> 00:02:28,780
opensuse actually works and what is

00:02:26,319 --> 00:02:31,439
actually like the core that makes up the

00:02:28,780 --> 00:02:34,389
distribution that we use every day and

00:02:31,439 --> 00:02:36,760
also kind of as a side effect I was

00:02:34,389 --> 00:02:39,819
interested in having a test set up

00:02:36,760 --> 00:02:43,349
specifically for MKV my lips where I'm

00:02:39,819 --> 00:02:47,769
working on kvm on my day job and also

00:02:43,349 --> 00:02:50,980
since EMU is being used for as emulation

00:02:47,769 --> 00:02:52,870
front end 44 kb m and this also has the

00:02:50,980 --> 00:02:54,819
side effect that the linux user

00:02:52,870 --> 00:03:00,069
emulation of KM you can get some more

00:02:54,819 --> 00:03:02,200
testing when we're talking about

00:03:00,069 --> 00:03:06,069
bootstrapping a port bootstrapping

00:03:02,200 --> 00:03:08,019
opensuse then this refers to that when

00:03:06,069 --> 00:03:10,419
we want to build a particular package

00:03:08,019 --> 00:03:12,969
and I'm assuming that most of you have a

00:03:10,419 --> 00:03:16,540
rough idea about packaging regular

00:03:12,969 --> 00:03:18,430
packages for for opensuse then if you

00:03:16,540 --> 00:03:20,919
take a look at a pack of such as RPM

00:03:18,430 --> 00:03:24,239
then that package too has dependencies

00:03:20,919 --> 00:03:28,329
such as GC and probably even more

00:03:24,239 --> 00:03:30,340
whereas GCC once again depends on rpm

00:03:28,329 --> 00:03:32,530
for packaging the actual build results

00:03:30,340 --> 00:03:36,099
so we have cyclic dependencies between

00:03:32,530 --> 00:03:39,579
individual packages and the idea of a

00:03:36,099 --> 00:03:41,590
bootstrap is that we take a set of

00:03:39,579 --> 00:03:44,079
packages I'm going to come to which

00:03:41,590 --> 00:03:48,310
those are later in the talk and use

00:03:44,079 --> 00:03:51,849
those packages to rebuild those packages

00:03:48,310 --> 00:03:54,939
with the help of OBS so that we have an

00:03:51,849 --> 00:03:56,709
insurance that the package the resulting

00:03:54,939 --> 00:03:59,319
packages have actually been built from

00:03:56,709 --> 00:04:01,599
the sources that are checked into OBS

00:03:59,319 --> 00:04:04,299
and obviously once we have those core

00:04:01,599 --> 00:04:06,879
set of packages and building then OBS

00:04:04,299 --> 00:04:09,509
can do the regular work and that I guess

00:04:06,879 --> 00:04:09,509
we all know

00:04:11,620 --> 00:04:22,660
so as a first step it is possible to

00:04:18,660 --> 00:04:24,940
import binary packages into the OBS

00:04:22,660 --> 00:04:27,940
server there is documentation on that

00:04:24,940 --> 00:04:29,740
both in the wiki and a manual surfer for

00:04:27,940 --> 00:04:32,440
example if you want to build packages

00:04:29,740 --> 00:04:35,350
for a new distribution then you just can

00:04:32,440 --> 00:04:38,580
take like from a CD media all the RPM

00:04:35,350 --> 00:04:41,979
packages copy them into a specific

00:04:38,580 --> 00:04:44,919
repository sub folder on the OBS or by

00:04:41,979 --> 00:04:47,650
directory and from there on you can use

00:04:44,919 --> 00:04:51,010
those packages to build your packages

00:04:47,650 --> 00:04:53,229
against I've written down for reference

00:04:51,010 --> 00:04:55,990
the command that can be used in this

00:04:53,229 --> 00:04:59,699
particular case to import the binaries

00:04:55,990 --> 00:05:03,160
into such a colon full sub directory and

00:04:59,699 --> 00:05:06,550
this works by simply taking the actual

00:05:03,160 --> 00:05:09,190
RPM name and simplifying it to form that

00:05:06,550 --> 00:05:13,389
a Mobius expects and making sure that

00:05:09,190 --> 00:05:15,160
OBS has access rights to has the right

00:05:13,389 --> 00:05:18,760
permissions to access the files that

00:05:15,160 --> 00:05:21,580
we've imported there now obviously once

00:05:18,760 --> 00:05:23,680
we know that we can import RPM faster

00:05:21,580 --> 00:05:25,960
for this way that for the purpose of

00:05:23,680 --> 00:05:28,510
porting is the big question is where do

00:05:25,960 --> 00:05:30,370
we actually get rpm files and that we

00:05:28,510 --> 00:05:32,770
can do if the actual goal that we have

00:05:30,370 --> 00:05:36,370
is building rpm files that we can use on

00:05:32,770 --> 00:05:40,389
a particular platform so for one part

00:05:36,370 --> 00:05:43,150
nem non architectural specific packages

00:05:40,389 --> 00:05:44,710
those dot no arch rpm files can be

00:05:43,150 --> 00:05:46,599
imported right away since there is no

00:05:44,710 --> 00:05:51,340
architecture specific bits in there and

00:05:46,599 --> 00:05:55,300
then of course there's the option of

00:05:51,340 --> 00:05:58,840
packaging either foreign or cross

00:05:55,300 --> 00:06:01,389
compiled binaries as RPM that RPM can

00:05:58,840 --> 00:06:09,010
add and a BS can then continue to work

00:06:01,389 --> 00:06:10,660
with so well one example of such foreign

00:06:09,010 --> 00:06:13,180
packages would be if there is already

00:06:10,660 --> 00:06:15,340
say a Debian distribution running on an

00:06:13,180 --> 00:06:17,500
architecture such as mips might be

00:06:15,340 --> 00:06:19,360
possible to use the deb packages and

00:06:17,500 --> 00:06:22,780
just create RPM packages out of them

00:06:19,360 --> 00:06:25,960
that OBS can then continue

00:06:22,780 --> 00:06:28,660
working with alternatively there is the

00:06:25,960 --> 00:06:32,139
option of just using and the RPM tools

00:06:28,660 --> 00:06:36,790
itself for building an RPM I've tried

00:06:32,139 --> 00:06:42,150
that once or twice the example would be

00:06:36,790 --> 00:06:45,040
on this mips board here this was

00:06:42,150 --> 00:06:50,430
recently launched this is the creatress

00:06:45,040 --> 00:06:53,680
CI 20 by mips using an engine o'clock

00:06:50,430 --> 00:06:56,620
i'm going to talk about the specs slide

00:06:53,680 --> 00:06:58,360
later so if you already have such a

00:06:56,620 --> 00:07:00,250
system working then of course you have

00:06:58,360 --> 00:07:03,730
the possibility to build native packages

00:07:00,250 --> 00:07:05,680
if you have the right tools however the

00:07:03,730 --> 00:07:09,150
dependencies that you have installed on

00:07:05,680 --> 00:07:13,030
such a system might not be exactly what

00:07:09,150 --> 00:07:17,950
opensuse is expecting and also the way

00:07:13,030 --> 00:07:19,570
that the RPM tool is configured in

00:07:17,950 --> 00:07:21,340
particular the RPM build tool is

00:07:19,570 --> 00:07:24,479
configured on other distros might also

00:07:21,340 --> 00:07:29,169
not be the exact way and that our OBS

00:07:24,479 --> 00:07:33,100
opensuse setup expects but when we're

00:07:29,169 --> 00:07:34,810
looking at building packages on our own

00:07:33,100 --> 00:07:37,240
and in particular you know after their

00:07:34,810 --> 00:07:39,660
second or third package that I try to

00:07:37,240 --> 00:07:42,930
actually do this and it gets pretty

00:07:39,660 --> 00:07:45,910
boring and complicated and job and

00:07:42,930 --> 00:07:48,310
obviously then the open build service is

00:07:45,910 --> 00:07:50,800
a software that is primarily focused at

00:07:48,310 --> 00:07:54,580
building packages so here the idea is

00:07:50,800 --> 00:07:57,280
can we actually use OBS to build those

00:07:54,580 --> 00:08:00,280
base set of packages what we would need

00:07:57,280 --> 00:08:02,830
for that since the assumption is that

00:08:00,280 --> 00:08:05,880
OBS itself is not yet running on a mips

00:08:02,830 --> 00:08:09,460
architecture is to use a cross compiler

00:08:05,880 --> 00:08:14,220
but how does it actually work to use a

00:08:09,460 --> 00:08:14,220
cross compiler for such packages in OBS

00:08:16,020 --> 00:08:23,950
one approach that had been there before

00:08:19,650 --> 00:08:29,860
for the arm port was the so-called GMU

00:08:23,950 --> 00:08:32,650
excel package the idea was that we could

00:08:29,860 --> 00:08:35,479
use once we already had the bootstrap of

00:08:32,650 --> 00:08:38,240
an arm port that it was taking

00:08:35,479 --> 00:08:40,880
quite a lot of time to to emulate things

00:08:38,240 --> 00:08:50,149
and that was the reason why they tried

00:08:40,880 --> 00:08:52,639
to to inject host binaries into the the

00:08:50,149 --> 00:08:56,240
build image so this package would

00:08:52,639 --> 00:09:00,110
actually take the x86 64 binary such as

00:08:56,240 --> 00:09:04,310
a CD dash and so on some that were

00:09:00,110 --> 00:09:07,610
frequently being used and make sure that

00:09:04,310 --> 00:09:11,769
the host architectures binary were being

00:09:07,610 --> 00:09:15,800
used for the for the non-native builds

00:09:11,769 --> 00:09:19,940
they were using the ice cream em GCC

00:09:15,800 --> 00:09:23,089
compiler environment to do so and this

00:09:19,940 --> 00:09:25,639
package then gets aggregated from x86

00:09:23,089 --> 00:09:29,570
architecture repository into the in that

00:09:25,639 --> 00:09:32,029
case arm repository the question where I

00:09:29,570 --> 00:09:33,680
was not quite so sure is whether this

00:09:32,029 --> 00:09:39,620
would actually work for an initial

00:09:33,680 --> 00:09:41,389
bootstrap and I also heard from Doug and

00:09:39,620 --> 00:09:43,459
the other people who had been working on

00:09:41,389 --> 00:09:45,350
that for the arm port that it was very

00:09:43,459 --> 00:09:46,970
difficult to maintain over time so that

00:09:45,350 --> 00:09:50,470
they literally gave up on this

00:09:46,970 --> 00:09:54,769
particular approach so what other

00:09:50,470 --> 00:09:56,750
opportunity is there that's kind of see

00:09:54,769 --> 00:10:01,279
the obvious answer is to cross compile

00:09:56,750 --> 00:10:03,560
all the packages that is not quite

00:10:01,279 --> 00:10:06,079
straightforward in OBS so the approach

00:10:03,560 --> 00:10:10,550
that I've been taking is that I have I'm

00:10:06,079 --> 00:10:13,279
prepared a cross mipsel 365 compiler

00:10:10,550 --> 00:10:15,680
package I'm going to talk a bit more

00:10:13,279 --> 00:10:18,829
about cost compilers in general in the

00:10:15,680 --> 00:10:20,779
next presentation and with this

00:10:18,829 --> 00:10:22,790
particular build requires in your

00:10:20,779 --> 00:10:24,980
package you can then add to the

00:10:22,790 --> 00:10:27,620
configure command line that normally we

00:10:24,980 --> 00:10:30,980
will just use the percent configure

00:10:27,620 --> 00:10:34,130
macro we would add a dash dash host

00:10:30,980 --> 00:10:37,819
parameter to set the target to something

00:10:34,130 --> 00:10:39,620
that is not the usual bill target and in

00:10:37,819 --> 00:10:41,930
some cases depending on how the the

00:10:39,620 --> 00:10:43,600
cross compiler is configured in packages

00:10:41,930 --> 00:10:46,069
we might also need to override and

00:10:43,600 --> 00:10:46,700
something like this you see variable or

00:10:46,069 --> 00:10:49,160
some spell

00:10:46,700 --> 00:10:52,670
and package specific configure argument

00:10:49,160 --> 00:10:57,230
or make variable in order to select

00:10:52,670 --> 00:11:01,070
like--they in this case mipsel azusa

00:10:57,230 --> 00:11:03,380
linux GCC dash five package and not just

00:11:01,070 --> 00:11:08,300
with the prefix of the architecture in

00:11:03,380 --> 00:11:10,820
front of it then once we proceed to the

00:11:08,300 --> 00:11:16,520
installation stage in the spec file then

00:11:10,820 --> 00:11:18,800
instead of just using destr instead of

00:11:16,520 --> 00:11:22,490
just using death tour equals percent

00:11:18,800 --> 00:11:25,940
build rude or rpm build rude we would

00:11:22,490 --> 00:11:30,190
just add a sous route component on that

00:11:25,940 --> 00:11:32,630
that is slash USR slash and then the

00:11:30,190 --> 00:11:35,960
tribal for the particular architecture

00:11:32,630 --> 00:11:38,140
followed by / this route usually that's

00:11:35,960 --> 00:11:40,250
how our ambient utils is configured and

00:11:38,140 --> 00:11:43,010
one important thing in the installation

00:11:40,250 --> 00:11:44,810
step is also to suppress any debug info

00:11:43,010 --> 00:11:47,000
handling for one we don't actually need

00:11:44,810 --> 00:11:50,780
debug info packages for these here and

00:11:47,000 --> 00:11:54,230
the other issue is that the stripping

00:11:50,780 --> 00:11:56,330
and post-processing of those non-native

00:11:54,230 --> 00:11:59,030
binaries does not always work actually

00:11:56,330 --> 00:12:03,800
so sometimes you might end up with the

00:11:59,030 --> 00:12:09,700
broken binary is in the package in

00:12:03,800 --> 00:12:12,740
particular when you're dealing with a

00:12:09,700 --> 00:12:15,770
binary that depends on a number of

00:12:12,740 --> 00:12:17,330
libraries it makes perfect sense or even

00:12:15,770 --> 00:12:18,920
if it like libraries that depend on

00:12:17,330 --> 00:12:22,550
other cross compiled libraries it makes

00:12:18,920 --> 00:12:23,870
sense to add explicit requires for for

00:12:22,550 --> 00:12:25,820
those package names something that is

00:12:23,870 --> 00:12:30,110
usually forbidden for packages that you

00:12:25,820 --> 00:12:34,070
submit to to factory that is because rpm

00:12:30,110 --> 00:12:36,710
does provides for the library names

00:12:34,070 --> 00:12:39,590
usually but it does not understand that

00:12:36,710 --> 00:12:41,330
there are native and non-native binaries

00:12:39,590 --> 00:12:44,060
and it will add the same provides name

00:12:41,330 --> 00:12:47,720
for for both that are confusing OBS

00:12:44,060 --> 00:12:50,810
dependency handling in that same context

00:12:47,720 --> 00:12:53,870
it may also be necessary to add

00:12:50,810 --> 00:12:55,910
prefer statement to the project config

00:12:53,870 --> 00:12:57,770
and that you're in the project that

00:12:55,910 --> 00:13:00,590
you're building in so that you them

00:12:57,770 --> 00:13:02,840
still prefer the host versions of the

00:13:00,590 --> 00:13:05,870
libraries because it might otherwise say

00:13:02,840 --> 00:13:12,850
that it's got multiple packages that

00:13:05,870 --> 00:13:15,200
provide a certain SL library and this

00:13:12,850 --> 00:13:18,170
happens in particular when we are

00:13:15,200 --> 00:13:20,270
dealing with building the actual GCC

00:13:18,170 --> 00:13:25,390
compiler for the target architecture is

00:13:20,270 --> 00:13:29,360
that you will end up building the GCC

00:13:25,390 --> 00:13:33,080
dependency libraries such as mpfr MPC

00:13:29,360 --> 00:13:35,870
and some other one and then you have the

00:13:33,080 --> 00:13:38,060
that you actually the situation that you

00:13:35,870 --> 00:13:39,650
need not one or the other but you

00:13:38,060 --> 00:13:41,750
actually need both installed and that's

00:13:39,650 --> 00:13:44,240
why you need to then add MX plus it

00:13:41,750 --> 00:13:50,029
built requires for those library

00:13:44,240 --> 00:13:53,150
requires in addition to the prefers now

00:13:50,029 --> 00:13:56,300
as far as an actual cross compile

00:13:53,150 --> 00:13:58,310
package goes I have assumed that for

00:13:56,300 --> 00:14:02,780
testing purposes I might actually want

00:13:58,310 --> 00:14:05,060
to install packages for multiple target

00:14:02,780 --> 00:14:07,370
actual m for multiple target

00:14:05,060 --> 00:14:12,080
architectures in parallel so that means

00:14:07,370 --> 00:14:15,110
that you can think about you want to M

00:14:12,080 --> 00:14:16,760
cross compile for both arm and mips or

00:14:15,110 --> 00:14:18,560
even if you're thinking about mips then

00:14:16,760 --> 00:14:21,530
there may be different maybe ice that

00:14:18,560 --> 00:14:25,370
you're targeting such as mipsel MIPS

00:14:21,530 --> 00:14:27,290
MIPS 64 mips64 al or even more m

00:14:25,370 --> 00:14:29,690
depending if you look clean you know

00:14:27,290 --> 00:14:33,950
there's a maybe I differences like oh 64

00:14:29,690 --> 00:14:35,780
and 32 and so on there you might want to

00:14:33,950 --> 00:14:37,339
have those in parallel and that means

00:14:35,780 --> 00:14:39,230
that you need different naming schemes

00:14:37,339 --> 00:14:41,870
different naming schemes usually mean

00:14:39,230 --> 00:14:45,230
that you actually have to either I'm

00:14:41,870 --> 00:14:47,770
create separate packages or use scripts

00:14:45,230 --> 00:14:51,650
to generate those particular spec files

00:14:47,770 --> 00:14:54,440
and that's what I've taken here so we

00:14:51,650 --> 00:14:56,690
have as in some of the packages and

00:14:54,440 --> 00:14:58,640
opensuse that you may have seen there is

00:14:56,690 --> 00:15:02,649
a pre-check in script that takes a

00:14:58,640 --> 00:15:06,550
templated spec file this one over here

00:15:02,649 --> 00:15:09,730
and it generates several packages from

00:15:06,550 --> 00:15:13,209
it so for example we would take a cross

00:15:09,730 --> 00:15:17,470
dash sad dot spected in and create a

00:15:13,209 --> 00:15:21,910
cross dash mne mipsel dash CD dash and

00:15:17,470 --> 00:15:26,110
spec from from that one we also need to

00:15:21,910 --> 00:15:27,879
have an RPM lint or C files because

00:15:26,110 --> 00:15:30,100
otherwise there will be quite a lot of

00:15:27,879 --> 00:15:32,589
not just warning but also errors about

00:15:30,100 --> 00:15:35,920
the binary is not being in the right

00:15:32,589 --> 00:15:42,399
path and post and post unhooks missing

00:15:35,920 --> 00:15:44,889
for ldd so yes that is another component

00:15:42,399 --> 00:15:46,869
that's needed of every cross compiled

00:15:44,889 --> 00:15:50,199
package and then obviously you need to

00:15:46,869 --> 00:15:52,629
have a changes file simply too too

00:15:50,199 --> 00:15:55,360
please osc on check in and it doesn't

00:15:52,629 --> 00:15:57,189
really need to have much contents if

00:15:55,360 --> 00:15:58,569
you're doing that on your own but you

00:15:57,189 --> 00:16:00,610
need to have it there until new to you

00:15:58,569 --> 00:16:05,050
and copy it for the individual packages

00:16:00,610 --> 00:16:06,369
over by the am checking script of course

00:16:05,050 --> 00:16:09,249
whenever there's a rule there's

00:16:06,369 --> 00:16:14,949
exceptions to the rule so in this case

00:16:09,249 --> 00:16:19,389
SED is a very simple example whereas if

00:16:14,949 --> 00:16:22,569
we have the GCC package then we will

00:16:19,389 --> 00:16:25,149
actually be using the GCC 5 package to

00:16:22,569 --> 00:16:29,790
be building the cross mipsel GCC five

00:16:25,149 --> 00:16:32,230
package but if we actually owned this

00:16:29,790 --> 00:16:34,629
result in compiler would be the one that

00:16:32,230 --> 00:16:37,059
runs on the host architecture but we

00:16:34,629 --> 00:16:40,420
also want GCC compiler that runs on the

00:16:37,059 --> 00:16:42,639
target architecture so basically in

00:16:40,420 --> 00:16:45,699
addition to to the original GCC 5

00:16:42,639 --> 00:16:47,860
package I also need it across Jesus e5

00:16:45,699 --> 00:16:49,720
package and then I needed some some

00:16:47,860 --> 00:16:52,389
different name I know Canadian cross is

00:16:49,720 --> 00:16:55,179
not quite the same that's one step more

00:16:52,389 --> 00:17:00,009
complicated but I just needed a way to

00:16:55,179 --> 00:17:01,900
distinguish the two for many / M

00:17:00,009 --> 00:17:04,120
packages the ski

00:17:01,900 --> 00:17:06,100
works quite nicely however there are

00:17:04,120 --> 00:17:09,010
exceptions to that rule yet again and

00:17:06,100 --> 00:17:12,220
the most notorious one is pearl where

00:17:09,010 --> 00:17:14,710
the only way to officially build four

00:17:12,220 --> 00:17:17,650
different architecture is if you have an

00:17:14,710 --> 00:17:19,930
ssh connection to a machine of that

00:17:17,650 --> 00:17:23,520
architecture available that like your

00:17:19,930 --> 00:17:26,230
configure make files can actually

00:17:23,520 --> 00:17:29,020
connect to and get results back that

00:17:26,230 --> 00:17:32,220
have been executed natively and the

00:17:29,020 --> 00:17:35,920
solution here is that there is a github

00:17:32,220 --> 00:17:40,150
project called a pearl cross and this is

00:17:35,920 --> 00:17:44,700
for a particular version of Perl a set

00:17:40,150 --> 00:17:47,350
of patches on top that make those checks

00:17:44,700 --> 00:17:51,370
available in a way that work for four

00:17:47,350 --> 00:17:54,750
real cross compilation because as you

00:17:51,370 --> 00:17:57,880
might have experienced OBS when building

00:17:54,750 --> 00:17:59,500
runs runs the builds in the sandbox so

00:17:57,880 --> 00:18:06,430
you don't have any network connection to

00:17:59,500 --> 00:18:12,640
the outside at the end of this you would

00:18:06,430 --> 00:18:15,730
have a package called cross dash mipsel

00:18:12,640 --> 00:18:18,100
dash and then the package name now our

00:18:15,730 --> 00:18:22,600
next goal is how do we actually get this

00:18:18,100 --> 00:18:24,970
package into a form that has the right

00:18:22,600 --> 00:18:29,020
name and installs the files to the right

00:18:24,970 --> 00:18:32,850
location in particularly we don't we'll

00:18:29,020 --> 00:18:36,880
have to relocate the files from us our

00:18:32,850 --> 00:18:41,530
target rifles is rude to just the the

00:18:36,880 --> 00:18:44,260
slash route for this purpose and the

00:18:41,530 --> 00:18:46,780
setup I've chosen is to use one project

00:18:44,260 --> 00:18:51,850
/ architecture because the outcome can

00:18:46,780 --> 00:18:54,550
can always be the the X the package name

00:18:51,850 --> 00:18:57,550
that OBS and/or opensuse particularly

00:18:54,550 --> 00:18:59,650
expects which means that I can just use

00:18:57,550 --> 00:19:02,680
the project configuration to set the

00:18:59,650 --> 00:19:05,260
target architect ransom things like that

00:19:02,680 --> 00:19:07,389
and can spare myself the generation of

00:19:05,260 --> 00:19:09,969
multiple spec files

00:19:07,389 --> 00:19:12,879
I would generally just add a build

00:19:09,969 --> 00:19:16,719
requires for the cross package and then

00:19:12,879 --> 00:19:19,570
my trick here is to use or PM to first

00:19:16,719 --> 00:19:21,369
obtain and the list of the files that

00:19:19,570 --> 00:19:25,899
are actually contained in the cross

00:19:21,369 --> 00:19:29,919
package and then use that list of files

00:19:25,899 --> 00:19:33,009
in order to move them from the original

00:19:29,919 --> 00:19:37,570
location to the install location where

00:19:33,009 --> 00:19:49,450
we have them which is the instead of on

00:19:37,570 --> 00:19:51,909
the last slide where we have it right

00:19:49,450 --> 00:19:54,489
here so and we were installing to

00:19:51,909 --> 00:19:56,169
disturb build roots is rude and now we

00:19:54,489 --> 00:20:03,579
just want to install to a desk to your

00:19:56,169 --> 00:20:05,379
build root and for for simplicity I've

00:20:03,579 --> 00:20:07,450
simply made this package no of course

00:20:05,379 --> 00:20:09,789
dad's that's a fake one and also needs

00:20:07,450 --> 00:20:14,349
an RPM lint or see file to suppress any

00:20:09,789 --> 00:20:18,429
any warnings or errors for that and in

00:20:14,349 --> 00:20:21,489
some cases I've taken the step of not

00:20:18,429 --> 00:20:23,469
packaging them properly with lots of sub

00:20:21,489 --> 00:20:25,989
packages but simply packaging just and

00:20:23,469 --> 00:20:27,789
then very quickly in one package in that

00:20:25,989 --> 00:20:30,639
case I can just simply add additional

00:20:27,789 --> 00:20:34,869
provides like four develop packages or

00:20:30,639 --> 00:20:40,929
specific em lib name 01 or whatever

00:20:34,869 --> 00:20:43,259
version packages now the full set of

00:20:40,929 --> 00:20:45,999
course compiled packages is this one

00:20:43,259 --> 00:20:48,849
this is quite similar to what you can

00:20:45,999 --> 00:20:52,959
see in the web interface of OBS if you

00:20:48,849 --> 00:20:55,209
look at a project such as opensuse colon

00:20:52,959 --> 00:20:57,729
factory then if you click on a

00:20:55,209 --> 00:21:00,039
particular and built repository then it

00:20:57,729 --> 00:21:02,109
shows you a list of cycles there's more

00:21:00,039 --> 00:21:05,799
than just with one SSD the base one that

00:21:02,109 --> 00:21:07,629
I've been looking into 44 MIPS I won't

00:21:05,799 --> 00:21:09,190
read all the package names I hope you

00:21:07,629 --> 00:21:14,469
can still read it where you're sitting

00:21:09,190 --> 00:21:15,750
there are two that are in embraces here

00:21:14,469 --> 00:21:21,810
the reason is that

00:21:15,750 --> 00:21:24,720
the way that I prepared my my cross

00:21:21,810 --> 00:21:26,640
compiler I already named the packages

00:21:24,720 --> 00:21:29,490
and organized the packages in a way that

00:21:26,640 --> 00:21:32,310
I would already by building the cross

00:21:29,490 --> 00:21:36,320
compiler have the packages for for this

00:21:32,310 --> 00:21:39,660
cross compilation set up later on and

00:21:36,320 --> 00:21:41,760
also why while doing this while and some

00:21:39,660 --> 00:21:43,410
of this was well pretty stupid work on a

00:21:41,760 --> 00:21:46,290
couple of weekends and there's some of

00:21:43,410 --> 00:21:48,120
the Christmas vacation days I actually

00:21:46,290 --> 00:21:50,220
noticed that there are some core

00:21:48,120 --> 00:21:52,380
packages that we may actually want to

00:21:50,220 --> 00:21:54,210
update in factories so it seems that

00:21:52,380 --> 00:21:57,750
we're like two versions behind on some

00:21:54,210 --> 00:21:59,580
of the MSC Linux libraries I'm not sure

00:21:57,750 --> 00:22:01,230
if there's a particular reason but maybe

00:21:59,580 --> 00:22:02,460
if someone knows that would be nice and

00:22:01,230 --> 00:22:04,590
if they can bring it up whether this is

00:22:02,460 --> 00:22:07,620
worth actually submitting or whether

00:22:04,590 --> 00:22:10,320
there's a particular incompatibility

00:22:07,620 --> 00:22:13,710
that we're dealing with for now I just

00:22:10,320 --> 00:22:20,940
took the same versions as opensuse does

00:22:13,710 --> 00:22:23,340
for for safety in addition to that list

00:22:20,940 --> 00:22:27,090
of packages that you and just saw and I

00:22:23,340 --> 00:22:29,400
also took a handful of a notch packages

00:22:27,090 --> 00:22:31,920
simply from the opensuse factory

00:22:29,400 --> 00:22:37,230
published repository from the download

00:22:31,920 --> 00:22:41,610
and open source org also there were a

00:22:37,230 --> 00:22:45,470
few packages where I took the quick path

00:22:41,610 --> 00:22:47,720
that the shortcut of simply taking a

00:22:45,470 --> 00:22:50,990
package of a different architecture

00:22:47,720 --> 00:22:53,340
simply because there were no real

00:22:50,990 --> 00:22:56,400
architectural code in there but just

00:22:53,340 --> 00:22:59,520
some architectural if if arts in there

00:22:56,400 --> 00:23:03,240
for determining which config or two or

00:22:59,520 --> 00:23:06,420
text files to put in there such as is it

00:23:03,240 --> 00:23:09,590
is it a 64-bit system or is it a 32-bit

00:23:06,420 --> 00:23:12,180
system or they were like some specific

00:23:09,590 --> 00:23:13,680
configurations 4 4 s 4 90 x in there

00:23:12,180 --> 00:23:17,790
that obviously I don't need when I'm

00:23:13,680 --> 00:23:21,180
dealing with other architectures even

00:23:17,790 --> 00:23:24,380
worse than that in particular when I got

00:23:21,180 --> 00:23:30,240
to which will rebuilding packages I am

00:23:24,380 --> 00:23:33,300
instead of just rebuilding all linked

00:23:30,240 --> 00:23:35,460
packages from opensuse factory I branch

00:23:33,300 --> 00:23:39,690
particular packages into my build

00:23:35,460 --> 00:23:45,660
repository examples for a moto con foto

00:23:39,690 --> 00:23:47,750
make simply because the info the making

00:23:45,660 --> 00:23:50,940
film utility for for a building the

00:23:47,750 --> 00:23:53,730
documentation I'm also has a second

00:23:50,940 --> 00:23:57,330
cyclic dependency that I was trying to

00:23:53,730 --> 00:23:59,580
get around here and for for that reason

00:23:57,330 --> 00:24:01,730
I simply just touch packages to have

00:23:59,580 --> 00:24:05,190
less dependency so that they actually

00:24:01,730 --> 00:24:06,990
could start building with those set of

00:24:05,190 --> 00:24:16,260
cross-compile packages that I just

00:24:06,990 --> 00:24:18,300
listed and apart from apart from not

00:24:16,260 --> 00:24:20,040
starting to build packages where you

00:24:18,300 --> 00:24:23,490
already know that they cannot possibly

00:24:20,040 --> 00:24:26,310
succeed it also has the benefit that the

00:24:23,490 --> 00:24:29,550
scheduling is a little bit quicker and

00:24:26,310 --> 00:24:32,310
you may understand why I was looking

00:24:29,550 --> 00:24:35,520
into that in the next section of the

00:24:32,310 --> 00:24:37,680
talk so this is basically how I organize

00:24:35,520 --> 00:24:39,210
the packages so far and now the question

00:24:37,680 --> 00:24:43,980
is where do I actually build those

00:24:39,210 --> 00:24:46,350
packages for specifically the mailbox

00:24:43,980 --> 00:24:48,630
architecture because if you look on

00:24:46,350 --> 00:24:53,100
build dodge open to the org you will

00:24:48,630 --> 00:25:02,220
notice that we have schedulers for i586

00:24:53,100 --> 00:25:06,690
x86 64 ppc64 LEP pce ppc64 s 290x arm v6

00:25:02,220 --> 00:25:12,980
el arbi 7l & age 64 then there are no

00:25:06,690 --> 00:25:15,600
firm it's or m64 and the the

00:25:12,980 --> 00:25:17,600
hypothetical question here is well do we

00:25:15,600 --> 00:25:19,800
have resources to build everyone's

00:25:17,600 --> 00:25:21,900
favorite project so it's not really

00:25:19,800 --> 00:25:23,520
apparently provision that you know if

00:25:21,900 --> 00:25:25,890
someone says hey I want to do a port of

00:25:23,520 --> 00:25:27,960
opensuse for an architecture that hardly

00:25:25,890 --> 00:25:31,530
anyone uses that we can just get that

00:25:27,960 --> 00:25:33,240
set up on the main server and also most

00:25:31,530 --> 00:25:35,240
prominently I personally even though i

00:25:33,240 --> 00:25:36,920
work for zoos it doesn't mean that I

00:25:35,240 --> 00:25:38,720
have access to all those service that

00:25:36,920 --> 00:25:41,870
that infrastructure is running on so a

00:25:38,720 --> 00:25:44,240
conscious use the copy operation that I

00:25:41,870 --> 00:25:47,150
outlined on an earlier slide in order to

00:25:44,240 --> 00:25:48,800
import my binaries there and in some

00:25:47,150 --> 00:25:51,110
cases in case something goes wrong I may

00:25:48,800 --> 00:25:53,059
also need to mess with either updating

00:25:51,110 --> 00:25:55,880
the cumulants user packages and

00:25:53,059 --> 00:25:58,280
configuring them for the bin format miss

00:25:55,880 --> 00:26:00,380
kernel module and do other stuff that

00:25:58,280 --> 00:26:03,260
require root permissions on the

00:26:00,380 --> 00:26:06,559
particular host machine there of course

00:26:03,260 --> 00:26:08,480
is a relatively easy solution OBS has a

00:26:06,559 --> 00:26:11,720
feature called remote link which allows

00:26:08,480 --> 00:26:14,030
you to take an o BM server over your own

00:26:11,720 --> 00:26:16,220
install it wherever you are not on this

00:26:14,030 --> 00:26:19,340
is a network not necessarily and

00:26:16,220 --> 00:26:21,640
connected to the build opensuse org

00:26:19,340 --> 00:26:25,880
instance or more specifically API dot

00:26:21,640 --> 00:26:30,050
org and have them obtain packages from

00:26:25,880 --> 00:26:31,429
there and kind of monitor what track

00:26:30,050 --> 00:26:33,320
ends are being done there and

00:26:31,429 --> 00:26:36,140
automatically download all the sources

00:26:33,320 --> 00:26:40,370
and then do the building on on your own

00:26:36,140 --> 00:26:42,170
hardware that's the theory so far now as

00:26:40,370 --> 00:26:46,400
for the practice well where would I

00:26:42,170 --> 00:26:48,740
install the OBS server to do my my bills

00:26:46,400 --> 00:26:51,200
and the fastest internecine that I have

00:26:48,740 --> 00:26:53,120
accessible is well this notebook right

00:26:51,200 --> 00:26:55,190
here and for one I want to disconnect

00:26:53,120 --> 00:26:56,660
this notebook from power once it once in

00:26:55,190 --> 00:26:58,970
time and also need to do other like

00:26:56,660 --> 00:27:02,030
larger compile jobs and so on that

00:26:58,970 --> 00:27:07,280
consume CPU so I did not want to

00:27:02,030 --> 00:27:08,780
actually do this on my own notebook so

00:27:07,280 --> 00:27:10,790
some of they think this is a crazy

00:27:08,780 --> 00:27:14,000
solution for me it was a really cool

00:27:10,790 --> 00:27:15,920
thing to actually try out since I've

00:27:14,000 --> 00:27:18,830
been working on the the opens who's

00:27:15,920 --> 00:27:22,210
armed port myself I do have a lot of arm

00:27:18,830 --> 00:27:25,429
hardware I'm standing around at home and

00:27:22,210 --> 00:27:27,140
when I'm not actively working on the

00:27:25,429 --> 00:27:29,360
kernel or testing is whether something

00:27:27,140 --> 00:27:31,070
is working a broken then they're either

00:27:29,360 --> 00:27:32,929
not connected to power or they're just

00:27:31,070 --> 00:27:35,720
standing around and do nothing for

00:27:32,929 --> 00:27:37,040
example I have like a dhcp server or

00:27:35,720 --> 00:27:39,380
things like that and running on on

00:27:37,040 --> 00:27:40,910
boards but they're not really using much

00:27:39,380 --> 00:27:44,120
less thought that's like a you know a

00:27:40,910 --> 00:27:46,000
cpu resource that under some constraints

00:27:44,120 --> 00:27:50,440
might actually be usable as

00:27:46,000 --> 00:27:54,610
as obf server what I actually ended up

00:27:50,440 --> 00:27:56,950
choosing is the Firefly RK 3288 board

00:27:54,610 --> 00:28:01,420
didn't bring it along today there's

00:27:56,950 --> 00:28:03,670
probably a of that on the open seas wiki

00:28:01,420 --> 00:28:06,670
on the HDL pages if not then please bug

00:28:03,670 --> 00:28:08,470
me too and finally update that the

00:28:06,670 --> 00:28:11,830
reason I chose that particular one is

00:28:08,470 --> 00:28:13,780
simply because it's got the the only one

00:28:11,830 --> 00:28:17,230
that I had access to that has a cortex a

00:28:13,780 --> 00:28:21,940
17 CPU which in theory is the fastest

00:28:17,230 --> 00:28:24,550
32-bit cpu core that arm provides and to

00:28:21,940 --> 00:28:28,450
that I plugged an external USB hard

00:28:24,550 --> 00:28:31,000
drive not necessarily an SSD I just took

00:28:28,450 --> 00:28:32,920
a regular hard drive and connected that

00:28:31,000 --> 00:28:34,510
where I use be in this case there was no

00:28:32,920 --> 00:28:38,830
use p3 through are available so I had to

00:28:34,510 --> 00:28:40,870
take use be 20 and in case that things

00:28:38,830 --> 00:28:46,960
were going well out also had large ones

00:28:40,870 --> 00:28:50,350
prepared however when I actually had

00:28:46,960 --> 00:28:52,780
that idea there were no arm binaries

00:28:50,350 --> 00:28:55,630
available for OBS to download so I had

00:28:52,780 --> 00:28:58,840
opensuse tumbleweed running on and that

00:28:55,630 --> 00:29:02,200
particular board but no OBS so what I

00:28:58,840 --> 00:29:06,910
actually ended up doing is because the

00:29:02,200 --> 00:29:10,240
only version of OBS that at the time was

00:29:06,910 --> 00:29:13,480
supporting opensuse factory or well the

00:29:10,240 --> 00:29:16,450
tumbleweed repository was OBS server

00:29:13,480 --> 00:29:18,490
unstable so what I am took is the

00:29:16,450 --> 00:29:21,820
packages from that particular repository

00:29:18,490 --> 00:29:23,920
branch them so that they would build for

00:29:21,820 --> 00:29:28,750
a newly set up and opens with a factory

00:29:23,920 --> 00:29:33,400
arm repository for armies have now and I

00:29:28,750 --> 00:29:36,400
ended up taking some in particular ruby

00:29:33,400 --> 00:29:38,920
gem packages from opens with a

00:29:36,400 --> 00:29:42,520
tumbleweed and then adding those

00:29:38,920 --> 00:29:44,560
packages that are not in tumbleweed from

00:29:42,520 --> 00:29:47,560
the OBS server unstable repository at a

00:29:44,560 --> 00:29:50,290
time those were about twenty four

00:29:47,560 --> 00:29:51,940
packages many rubygems there was a pro

00:29:50,290 --> 00:29:57,639
BS solve

00:29:51,940 --> 00:30:00,789
and the apache mod mod x forward package

00:29:57,639 --> 00:30:03,789
i think and by now the situation has

00:30:00,789 --> 00:30:06,100
improved in that OBS server unstable is

00:30:03,789 --> 00:30:09,610
building i'm open to the factory arm for

00:30:06,100 --> 00:30:12,669
both AR 64 and RB 7l so I've been able

00:30:09,610 --> 00:30:14,649
to delete most of the bunch packages in

00:30:12,669 --> 00:30:19,779
the weeks leading up to to the

00:30:14,649 --> 00:30:21,940
conference one other aspect is that when

00:30:19,779 --> 00:30:24,960
we're looking at our boards unlike

00:30:21,940 --> 00:30:27,549
internal machines only very few

00:30:24,960 --> 00:30:30,279
unfortunately have support for for kvm

00:30:27,549 --> 00:30:32,440
and the problem is usually not on the

00:30:30,279 --> 00:30:37,870
kvm side but rather on the bootloader

00:30:32,440 --> 00:30:42,250
side that's simply there booting the the

00:30:37,870 --> 00:30:44,230
cpu in a mode that it does not have

00:30:42,250 --> 00:30:51,159
sufficient privileges to enter the

00:30:44,230 --> 00:30:54,580
hypervisor mode and so with only there's

00:30:51,159 --> 00:30:57,779
like the Sun X I boards that have kvm

00:30:54,580 --> 00:31:01,330
enabled and there's the Lawndale board

00:30:57,779 --> 00:31:04,289
some servers that are not on the market

00:31:01,330 --> 00:31:08,169
anymore from from cal sada and that's

00:31:04,289 --> 00:31:11,740
roughly it so the choice was that

00:31:08,169 --> 00:31:14,529
instead of kbm I would be using train

00:31:11,740 --> 00:31:18,309
road workers and this was not a problem

00:31:14,529 --> 00:31:20,950
because I was using a very select set of

00:31:18,309 --> 00:31:23,710
core packages where I was actually able

00:31:20,950 --> 00:31:27,549
to review that there was at least on

00:31:23,710 --> 00:31:30,070
first sight nothing maligning in there

00:31:27,549 --> 00:31:33,250
that would actually damage the security

00:31:30,070 --> 00:31:34,750
of my on board that i was using for for

00:31:33,250 --> 00:31:43,269
little more than then testing the

00:31:34,750 --> 00:31:46,330
colonel anyway specifically when using

00:31:43,269 --> 00:31:49,059
this combination of tumbleweed and OBS

00:31:46,330 --> 00:31:50,980
server unstable repository from time to

00:31:49,059 --> 00:31:56,500
time there were either packages that

00:31:50,980 --> 00:31:58,730
were newer on the osu side or on the

00:31:56,500 --> 00:32:02,669
tumbleweed side and

00:31:58,730 --> 00:32:04,620
the main thing that was affected by that

00:32:02,669 --> 00:32:07,860
was actually the only thing that was

00:32:04,620 --> 00:32:10,980
affected by that was the API server so

00:32:07,860 --> 00:32:14,100
the the back ends are written in perl

00:32:10,980 --> 00:32:17,580
mostly and just run there's a no real

00:32:14,100 --> 00:32:19,740
problems been there but the the Ruby you

00:32:17,580 --> 00:32:22,770
I would would not come up in the web

00:32:19,740 --> 00:32:26,130
browser so what I figured out that was

00:32:22,770 --> 00:32:33,240
the main issue was the gem file dot lock

00:32:26,130 --> 00:32:36,330
in this particular path here and this

00:32:33,240 --> 00:32:41,520
actually says that a dependency of the

00:32:36,330 --> 00:32:44,580
OBS dash API on project or sort of this

00:32:41,520 --> 00:32:46,409
particular web application is a package

00:32:44,580 --> 00:32:48,840
in a specific version this is now not

00:32:46,409 --> 00:32:51,059
the one that I actually tested it with

00:32:48,840 --> 00:32:54,179
this is the one that is is current so

00:32:51,059 --> 00:32:56,940
the gem file dot lock currently says

00:32:54,179 --> 00:33:00,840
that it one certain Ruby on Rails

00:32:56,940 --> 00:33:03,330
packages in version four dot-to-dot 52

00:33:00,840 --> 00:33:08,880
whereas tumbleweed provides version four

00:33:03,330 --> 00:33:12,090
to six so basically with the simple

00:33:08,880 --> 00:33:14,429
regular expressions i simply tweaked

00:33:12,090 --> 00:33:16,919
this this file to have the right

00:33:14,429 --> 00:33:19,110
versions and the way to test whether

00:33:16,919 --> 00:33:22,080
this actually works was to simply run

00:33:19,110 --> 00:33:26,460
the rake command in that directory with

00:33:22,080 --> 00:33:29,490
the right ruby version this worked

00:33:26,460 --> 00:33:33,539
pretty well initially it it totally

00:33:29,490 --> 00:33:35,400
worked then at some point mimetypes was

00:33:33,539 --> 00:33:38,610
updated in tumbleweed and then it no

00:33:35,400 --> 00:33:41,960
longer worked so the the OBS API server

00:33:38,610 --> 00:33:45,510
was using mine times in Sun one dot

00:33:41,960 --> 00:33:47,370
whatever version tumbleweed had version

00:33:45,510 --> 00:33:48,840
2 that was still worked fine and then it

00:33:47,370 --> 00:33:51,890
got updated to three and then suddenly

00:33:48,840 --> 00:33:55,740
broked thats a bit the risk in this

00:33:51,890 --> 00:34:00,750
scenario of using untested package

00:33:55,740 --> 00:34:03,760
versions and of course this risk could

00:34:00,750 --> 00:34:06,260
come from from both sides so it was

00:34:03,760 --> 00:34:08,120
the too dangerous to simply run super

00:34:06,260 --> 00:34:12,169
duper so I was very careful to usually

00:34:08,120 --> 00:34:14,179
first run zipper up to just have a much

00:34:12,169 --> 00:34:15,500
more control over which packages were

00:34:14,179 --> 00:34:17,540
coming from which repositories and

00:34:15,500 --> 00:34:19,760
avoiding that they would automatically

00:34:17,540 --> 00:34:24,110
against which the vendor from one

00:34:19,760 --> 00:34:26,300
repository to another like I said this

00:34:24,110 --> 00:34:28,820
worked fine until it broke and

00:34:26,300 --> 00:34:30,919
unfortunately it broke like one and a

00:34:28,820 --> 00:34:32,830
half weeks ago and that is unfortunately

00:34:30,919 --> 00:34:39,919
the reason why I can't show you the nice

00:34:32,830 --> 00:34:43,340
web interface in a live demo here so if

00:34:39,919 --> 00:34:47,570
you have any suggestions on how we might

00:34:43,340 --> 00:34:49,280
actually be able to continue on with

00:34:47,570 --> 00:34:51,230
this port and the most sensible way in

00:34:49,280 --> 00:34:53,379
particular since there's been at least

00:34:51,230 --> 00:34:55,580
one person that's shown interest in

00:34:53,379 --> 00:34:59,630
collaborating on this particular port

00:34:55,580 --> 00:35:02,510
during am heck week next week one idea

00:34:59,630 --> 00:35:04,220
was that we might use a test instance of

00:35:02,510 --> 00:35:06,170
OBS elsewhere but then again the

00:35:04,220 --> 00:35:10,760
question is which workers can we

00:35:06,170 --> 00:35:16,060
actually use to build the MIPS packages

00:35:10,760 --> 00:35:20,030
which happens to be the next section so

00:35:16,060 --> 00:35:25,790
as described in the section before the

00:35:20,030 --> 00:35:28,130
last I have managed to cross compile a

00:35:25,790 --> 00:35:32,450
large set of packages that are needed

00:35:28,130 --> 00:35:36,320
for an initial package building of

00:35:32,450 --> 00:35:38,600
opensuse open to the factory now how do

00:35:36,320 --> 00:35:41,060
we actually build I'm open to the

00:35:38,600 --> 00:35:44,110
factory with those particular packages

00:35:41,060 --> 00:35:48,410
for the mips architecture in particular

00:35:44,110 --> 00:35:51,440
we already have an OBS server how do we

00:35:48,410 --> 00:35:55,520
actually set up OBS build workers for

00:35:51,440 --> 00:35:58,970
mips and the main idea a very simple one

00:35:55,520 --> 00:36:02,780
naive one is to simply run OBS workers

00:35:58,970 --> 00:36:10,640
on whatever hardware and setups we am

00:36:02,780 --> 00:36:11,710
happen to have so what might that be if

00:36:10,640 --> 00:36:13,990
we

00:36:11,710 --> 00:36:17,290
take a look at a random linux

00:36:13,990 --> 00:36:19,750
distribution then chances are that there

00:36:17,290 --> 00:36:22,570
is no OBS josh walker package available

00:36:19,750 --> 00:36:25,660
which is the easy way to install workers

00:36:22,570 --> 00:36:27,520
on the opensuse distribution that works

00:36:25,660 --> 00:36:30,760
quite nicely it's also norge package

00:36:27,520 --> 00:36:34,450
with only a rather small set of

00:36:30,760 --> 00:36:36,339
dependencies unfortunately OBS server

00:36:34,450 --> 00:36:39,160
which was my first thought was you know

00:36:36,339 --> 00:36:41,010
can I just build OBS worker for another

00:36:39,160 --> 00:36:43,420
distro in the build service

00:36:41,010 --> 00:36:45,160
unfortunately it's billed as part of OBS

00:36:43,420 --> 00:36:50,380
server which has lots and lots of

00:36:45,160 --> 00:36:57,490
dependencies and can someone get Adrian

00:36:50,380 --> 00:36:59,260
a microphone I do have some more slides

00:36:57,490 --> 00:37:06,390
with work around so than the problems in

00:36:59,260 --> 00:37:06,390
case you want to comment on that not on

00:37:08,970 --> 00:37:15,760
so open so OBS workers actually only the

00:37:13,540 --> 00:37:17,950
init script it downloads the code from

00:37:15,760 --> 00:37:24,300
the server and execute it I will get to

00:37:17,950 --> 00:37:24,300
that in a minute okay sure okay okay but

00:37:24,720 --> 00:37:31,780
so because it looked as if it had a lots

00:37:28,330 --> 00:37:33,940
of dependencies I gave up on trying to

00:37:31,780 --> 00:37:38,099
build this in particular for for Debian

00:37:33,940 --> 00:37:40,300
in this case and well at least the

00:37:38,099 --> 00:37:42,070
second thought after seeing those

00:37:40,300 --> 00:37:44,349
dependencies was you know how do you

00:37:42,070 --> 00:37:45,550
actually build the package for a

00:37:44,349 --> 00:37:48,849
repository that you don't have in

00:37:45,550 --> 00:37:50,650
particular when nan and niraj and

00:37:48,849 --> 00:37:53,530
packages are involved and this is them

00:37:50,650 --> 00:37:55,869
the the creator of CI 20 package again

00:37:53,530 --> 00:37:57,640
I'm it's running if you if you just

00:37:55,869 --> 00:38:04,480
receive it it's running a debian wheezy

00:37:57,640 --> 00:38:06,430
I'm system with the mipsel and ABI I did

00:38:04,480 --> 00:38:10,510
not really see the the benefits of

00:38:06,430 --> 00:38:13,210
trying to import a whole Debian

00:38:10,510 --> 00:38:15,070
distribution into the OBS just in order

00:38:13,210 --> 00:38:16,930
to build an open zoo the distribution so

00:38:15,070 --> 00:38:18,730
I wondered whether there was a simpler

00:38:16,930 --> 00:38:25,420
way and as you already heard from

00:38:18,730 --> 00:38:27,190
Adrienne there is a simple way and the

00:38:25,420 --> 00:38:29,680
simple way is to simply learn and

00:38:27,190 --> 00:38:32,440
understand what the OBS work we actually

00:38:29,680 --> 00:38:36,130
is doing so this particular board here

00:38:32,440 --> 00:38:40,000
the crater CI 20 happens to have a

00:38:36,130 --> 00:38:43,120
gigabyte of RAM which is compared to too

00:38:40,000 --> 00:38:48,040
many other arm and devices that people

00:38:43,120 --> 00:38:54,450
like Mexican had to have been working on

00:38:48,040 --> 00:38:56,980
is quite a lot for form its purposes for

00:38:54,450 --> 00:39:01,120
reasons that I don't want to to for the

00:38:56,980 --> 00:39:02,980
go into is I upgraded from debian 722 wa

00:39:01,120 --> 00:39:05,140
to have certain package dependencies

00:39:02,980 --> 00:39:06,970
available there's instructions for this

00:39:05,140 --> 00:39:08,650
particular ward available on the you

00:39:06,970 --> 00:39:13,120
learn x.org week on the e-learning

00:39:08,650 --> 00:39:15,700
storrow quickie and then from the open

00:39:13,120 --> 00:39:20,920
through tools repository I managed to

00:39:15,700 --> 00:39:22,510
install the build and package and some

00:39:20,920 --> 00:39:24,460
of its dependencies which again was

00:39:22,510 --> 00:39:26,800
using also other dependencies that were

00:39:24,460 --> 00:39:30,670
already available in the Debian are in a

00:39:26,800 --> 00:39:34,750
distribution what it really needs to do

00:39:30,670 --> 00:39:37,600
is it simply gets the Perl code for

00:39:34,750 --> 00:39:40,690
running the worker from the repository

00:39:37,600 --> 00:39:43,330
server from your local one so you can

00:39:40,690 --> 00:39:45,160
jump Lee just look up what it does on

00:39:43,330 --> 00:39:47,230
the file system and that's pretty much

00:39:45,160 --> 00:39:56,160
the crawl command to download from this

00:39:47,230 --> 00:39:59,740
particular with the cruiser here it is

00:39:56,160 --> 00:40:02,260
to to download the code and then it is

00:39:59,740 --> 00:40:05,380
being downloaded as a cpio archive and

00:40:02,260 --> 00:40:06,780
then you just extract that to some some

00:40:05,380 --> 00:40:11,500
local temporary directory of yours

00:40:06,780 --> 00:40:13,030
there's also a few post download steps

00:40:11,500 --> 00:40:15,400
that are simply just copied from that

00:40:13,030 --> 00:40:18,640
script as well and then I used a

00:40:15,400 --> 00:40:21,040
simplified command line for the BS

00:40:18,640 --> 00:40:21,690
worker script in order to launch the

00:40:21,040 --> 00:40:25,450
local

00:40:21,690 --> 00:40:29,560
instance in this case just one since

00:40:25,450 --> 00:40:32,110
it's got a dual core set up with yes to

00:40:29,560 --> 00:40:36,370
two jobs specified for for both coils

00:40:32,110 --> 00:40:38,050
and yes those are just like local

00:40:36,370 --> 00:40:44,220
directories in the file system where

00:40:38,050 --> 00:40:44,220
various files are going to get installed

00:40:47,160 --> 00:40:55,530
so since we now know how OBS worker is

00:40:51,430 --> 00:40:58,270
actually working I had the problem and

00:40:55,530 --> 00:41:00,040
maybe Adrian I don't know if that is a

00:40:58,270 --> 00:41:02,800
problem that's already been solved or

00:41:00,040 --> 00:41:06,700
not I ran into the issue that sometimes

00:41:02,800 --> 00:41:11,820
my workers would get a bill job

00:41:06,700 --> 00:41:14,350
dispatched but instead of receiving the

00:41:11,820 --> 00:41:16,330
source code of the packages for the

00:41:14,350 --> 00:41:17,980
usual way there's like a three-step

00:41:16,330 --> 00:41:20,380
status output that they show and

00:41:17,980 --> 00:41:23,400
initially it was just getting binary

00:41:20,380 --> 00:41:28,510
garbage and in particular at times those

00:41:23,400 --> 00:41:32,370
binary sequences would also contain like

00:41:28,510 --> 00:41:35,140
the control a sequence that the screen

00:41:32,370 --> 00:41:37,110
command uses to set for instance the

00:41:35,140 --> 00:41:40,270
title or some other attributes of the

00:41:37,110 --> 00:41:42,720
running screen session and I found that

00:41:40,270 --> 00:41:45,940
very annoying and I set out to write a

00:41:42,720 --> 00:41:48,940
system tea service for that so the setup

00:41:45,940 --> 00:41:51,460
that I've tested in the package which by

00:41:48,940 --> 00:41:56,260
the way is in my home a underscore

00:41:51,460 --> 00:41:59,110
Harbor branch some think its branches

00:41:56,260 --> 00:42:02,320
OBS or unstable and available for anyone

00:41:59,110 --> 00:42:04,930
that wants to peek at that is I simply

00:42:02,320 --> 00:42:07,870
I'm separated into into to service files

00:42:04,930 --> 00:42:10,270
one for the e boot code download that we

00:42:07,870 --> 00:42:13,240
just saw and the other one for running

00:42:10,270 --> 00:42:14,740
the the actual for running the actual

00:42:13,240 --> 00:42:17,200
change food service in this particular

00:42:14,740 --> 00:42:19,900
case because I didn't actually ended up

00:42:17,200 --> 00:42:22,450
using a kvm one on my build workers I

00:42:19,900 --> 00:42:24,550
didn't set out to to set a work for

00:42:22,450 --> 00:42:26,830
those as well but I mean in theory it

00:42:24,550 --> 00:42:29,299
should all work in the same way that you

00:42:26,830 --> 00:42:32,009
configure the

00:42:29,299 --> 00:42:33,900
systemd year service unit file and the

00:42:32,009 --> 00:42:36,839
way that is appropriate for the command

00:42:33,900 --> 00:42:41,009
that you're about to to launch and then

00:42:36,839 --> 00:42:43,799
use some variables in order to have a

00:42:41,009 --> 00:42:46,319
placeholder for what it should actually

00:42:43,799 --> 00:42:48,749
be using then you can set the

00:42:46,319 --> 00:42:53,009
environment equal setting of the service

00:42:48,749 --> 00:42:54,539
unit file in order to have some defaults

00:42:53,009 --> 00:42:58,170
by the way there is a nice blog post

00:42:54,539 --> 00:42:59,880
from from derek's on Noda's org where

00:42:58,170 --> 00:43:02,969
you can read up on on some of those

00:42:59,880 --> 00:43:05,819
systemd concepts and then you can

00:43:02,969 --> 00:43:09,930
actually have a file in etsy sister d

00:43:05,819 --> 00:43:12,420
system service name dot d / in this case

00:43:09,930 --> 00:43:14,279
service conf we can override those

00:43:12,420 --> 00:43:18,390
values with me value so basically you

00:43:14,279 --> 00:43:21,719
would have like a default of local host

00:43:18,390 --> 00:43:24,420
dot 5252 and then in my case I would say

00:43:21,719 --> 00:43:28,259
that in fold of in a place of local host

00:43:24,420 --> 00:43:34,849
48 52 52 I would take fell start till I

00:43:28,259 --> 00:43:38,489
am NOT a co-owner 52 52 yes and it also

00:43:34,849 --> 00:43:40,890
gives a bit more flexibility in that you

00:43:38,489 --> 00:43:43,589
can simply use the instance name here

00:43:40,890 --> 00:43:45,269
that's what the what the @ sign in this

00:43:43,589 --> 00:43:46,949
service here is about is that you can

00:43:45,269 --> 00:43:49,459
actually have multiple instances of this

00:43:46,949 --> 00:43:53,189
running so you can either just have a

00:43:49,459 --> 00:43:55,650
change route at one as was s used to be

00:43:53,189 --> 00:43:59,539
or you could actually use a name and in

00:43:55,650 --> 00:43:59,539
theory that should work just the same

00:44:00,469 --> 00:44:05,449
any immediate comments you you have on

00:44:02,939 --> 00:44:05,449
that adriaen

00:44:16,330 --> 00:44:21,260
it's good that someone is working on

00:44:18,680 --> 00:44:23,300
system do I stick up it is great that

00:44:21,260 --> 00:44:26,720
someone is working on systemd files for

00:44:23,300 --> 00:44:30,950
that but that sounds like you're

00:44:26,720 --> 00:44:33,590
ignoring odds or configurations in EG

00:44:30,950 --> 00:44:37,610
caesars config / so it was correct yes

00:44:33,590 --> 00:44:39,800
so why do you do that I mean isn't it I

00:44:37,610 --> 00:44:43,040
mean not now you would need for each

00:44:39,800 --> 00:44:45,800
kind of virtualization we need to own

00:44:43,040 --> 00:44:49,160
service files right that make it much

00:44:45,800 --> 00:44:51,050
much more complex well basically the

00:44:49,160 --> 00:44:52,940
reason was or one of the reasons was

00:44:51,050 --> 00:44:55,040
that I did not want to run the BS worker

00:44:52,940 --> 00:44:57,470
script because it was not working as i

00:44:55,040 --> 00:45:00,350
described in particular it kept you know

00:44:57,470 --> 00:45:02,960
having with this problem that it was

00:45:00,350 --> 00:45:04,850
badly affecting the screen process which

00:45:02,960 --> 00:45:06,620
is you know what it does at the end in

00:45:04,850 --> 00:45:10,460
its bonds and therefore i couldn't reuse

00:45:06,620 --> 00:45:12,410
the BS worker script okay I've no clue

00:45:10,460 --> 00:45:14,900
about her pioneering garbage by the way

00:45:12,410 --> 00:45:17,480
it must be a bug somewhere but so in it

00:45:14,900 --> 00:45:20,690
is bugging then it might be possible to

00:45:17,480 --> 00:45:23,510
reuse the etsy assist config or BS their

00:45:20,690 --> 00:45:25,310
server file to to initialize some of

00:45:23,510 --> 00:45:27,830
that either to have like a script that

00:45:25,310 --> 00:45:30,500
takes it as an input and generates those

00:45:27,830 --> 00:45:33,500
em system via config files and Etsy or

00:45:30,500 --> 00:45:35,720
user some sibling Tim facility I just

00:45:33,500 --> 00:45:40,370
simply did not spend a lot of cycles on

00:45:35,720 --> 00:45:42,620
that I would really like to have system

00:45:40,370 --> 00:45:45,470
device but not surprised that everything

00:45:42,620 --> 00:45:47,540
is incompatible so we should really keep

00:45:45,470 --> 00:45:50,150
service conflict true but that the main

00:45:47,540 --> 00:45:53,050
thing here is that I am relying on

00:45:50,150 --> 00:45:55,940
systemd not just to have like the

00:45:53,050 --> 00:45:58,570
old-fashioned script that you already

00:45:55,940 --> 00:46:01,460
have being wrapped in assistant ii

00:45:58,570 --> 00:46:03,710
service unit but i really wanted to and

00:46:01,460 --> 00:46:06,470
think about how can we actually improve

00:46:03,710 --> 00:46:09,290
things in a only systemd world and in

00:46:06,470 --> 00:46:11,500
particular at means that in a difference

00:46:09,290 --> 00:46:14,480
to the BS worker script I've separated

00:46:11,500 --> 00:46:17,030
the boot code download which is like and

00:46:14,480 --> 00:46:19,220
if summer somewhere at the beginning of

00:46:17,030 --> 00:46:21,750
the EDPs worker script from that

00:46:19,220 --> 00:46:24,330
particular file and that also means that

00:46:21,750 --> 00:46:28,350
I thought it would be easiest to have

00:46:24,330 --> 00:46:29,970
separate service files for what the

00:46:28,350 --> 00:46:32,540
particular workers would actually be

00:46:29,970 --> 00:46:35,160
doing because there's a whole lot of

00:46:32,540 --> 00:46:37,200
configuration settings and parameters

00:46:35,160 --> 00:46:39,570
that only apply to one of them but not

00:46:37,200 --> 00:46:42,540
for the other for example if you take a

00:46:39,570 --> 00:46:44,130
look at the at the command line down

00:46:42,540 --> 00:46:46,200
here I don't need to specify any

00:46:44,130 --> 00:46:48,270
Colonels simply because for a change

00:46:46,200 --> 00:46:50,100
would i don't use any Colonels and there

00:46:48,270 --> 00:46:52,410
is i don't know like at least a handful

00:46:50,100 --> 00:46:55,790
of like variables and settings and that

00:46:52,410 --> 00:46:57,810
simply don't apply to to everything so

00:46:55,790 --> 00:47:02,790
basically what you are saying is that

00:46:57,810 --> 00:47:06,030
you would favor just an OBS dash worker

00:47:02,790 --> 00:47:08,580
at dot service or is it this split that

00:47:06,030 --> 00:47:11,520
you are also opposed to split is fine i

00:47:08,580 --> 00:47:13,890
think it's just that ice I mean you need

00:47:11,520 --> 00:47:16,980
a migration point and if you switch from

00:47:13,890 --> 00:47:18,780
sin to kvm that you rewrite all your

00:47:16,980 --> 00:47:22,310
configuration this makes no sense for me

00:47:18,780 --> 00:47:26,400
because it's same memory usage same and

00:47:22,310 --> 00:47:28,320
so on so that's yeah there might

00:47:26,400 --> 00:47:30,210
obviously be ways to simply share those

00:47:28,320 --> 00:47:32,730
environment now variables between the

00:47:30,210 --> 00:47:34,290
two services engine your question what

00:47:32,730 --> 00:47:38,790
is easier in this pace I mean there is a

00:47:34,290 --> 00:47:44,610
reason why this is a dot service file

00:47:38,790 --> 00:47:47,070
that is in my home repository and not to

00:47:44,610 --> 00:47:49,110
commit that I've made to the OBS build

00:47:47,070 --> 00:47:51,390
server and git repository so it's not

00:47:49,110 --> 00:47:54,810
really consumable by everyone but it was

00:47:51,390 --> 00:47:57,450
just a path that I have explored in

00:47:54,810 --> 00:48:00,540
order to make it easier to bring or at

00:47:57,450 --> 00:48:05,240
least more more stable to have workers

00:48:00,540 --> 00:48:05,240
running on unless some of my hosts

00:48:06,260 --> 00:48:15,480
another idea was that if I have like

00:48:10,770 --> 00:48:17,040
this 64-bit MIPS box um the was

00:48:15,480 --> 00:48:19,890
previously called on kick-started the I

00:48:17,040 --> 00:48:21,540
guardian and then it was in this case

00:48:19,890 --> 00:48:24,300
called the field by now it's called the

00:48:21,540 --> 00:48:27,030
shield pro it's running on a octi on

00:48:24,300 --> 00:48:28,200
three processor and that is one that

00:48:27,030 --> 00:48:30,300
actually supports hardware

00:48:28,200 --> 00:48:32,270
virtualization which was interesting to

00:48:30,300 --> 00:48:39,569
me as a virtualization developer

00:48:32,270 --> 00:48:41,700
and then also I recently received this

00:48:39,569 --> 00:48:45,660
particular board from from Asia RF which

00:48:41,700 --> 00:48:47,970
has a MediaTek myth sock and then I also

00:48:45,660 --> 00:48:50,849
as part of previous hack weeks that was

00:48:47,970 --> 00:48:52,710
taking apart various routers which is

00:48:50,849 --> 00:48:54,089
like the number one source of devices in

00:48:52,710 --> 00:48:57,690
the world where you find MIPS processor

00:48:54,089 --> 00:48:59,910
still and there's kind of like a range

00:48:57,690 --> 00:49:02,210
of of specs that you will find there so

00:48:59,910 --> 00:49:04,500
one gigabyte of RAM obviously is well

00:49:02,210 --> 00:49:06,240
we've we've been able to deal with that

00:49:04,500 --> 00:49:08,130
to some degree on on arm boards

00:49:06,240 --> 00:49:10,950
obviously two would be better about if

00:49:08,130 --> 00:49:13,020
we only have one that works as well 128

00:49:10,950 --> 00:49:16,650
megabytes might actually work for

00:49:13,020 --> 00:49:19,650
running opensuse at some point about 32

00:49:16,650 --> 00:49:21,240
megabytes well are probably too little

00:49:19,650 --> 00:49:23,160
not just to run on there but in

00:49:21,240 --> 00:49:25,560
particular when it's about building

00:49:23,160 --> 00:49:31,530
things like you know GCC and other large

00:49:25,560 --> 00:49:34,740
packages most of those boards come with

00:49:31,530 --> 00:49:37,440
either open wrt or just some custom

00:49:34,740 --> 00:49:39,210
busybox based system them in case you're

00:49:37,440 --> 00:49:41,730
not familiar with busybox that's like an

00:49:39,210 --> 00:49:45,030
all-in-one static executable which

00:49:41,730 --> 00:49:47,280
contains both shell functions and some

00:49:45,030 --> 00:49:50,160
of the functionality that we find in

00:49:47,280 --> 00:49:54,300
like core utils and other external

00:49:50,160 --> 00:49:56,640
packages and opensuse and it's usually

00:49:54,300 --> 00:49:58,349
means that in that set up there's very

00:49:56,640 --> 00:50:01,980
little tools available in particular you

00:49:58,349 --> 00:50:04,500
usually will not find pearl and the BS

00:50:01,980 --> 00:50:09,510
worker script obviously uses pearl to to

00:50:04,500 --> 00:50:11,190
run in various perl modules so one

00:50:09,510 --> 00:50:13,050
thought that i have not yet investigated

00:50:11,190 --> 00:50:15,839
is whether it might actually work to

00:50:13,050 --> 00:50:18,119
take the packages that i have cost

00:50:15,839 --> 00:50:21,240
compiled myself in the previous stack

00:50:18,119 --> 00:50:23,130
and just put them into such a busy box

00:50:21,240 --> 00:50:25,470
build system in order to complement the

00:50:23,130 --> 00:50:28,760
binaries or maybe just boot into that

00:50:25,470 --> 00:50:33,720
particular file system constructed from

00:50:28,760 --> 00:50:37,859
from those core packages or would it be

00:50:33,720 --> 00:50:41,069
worth to take such a busy box bay or

00:50:37,859 --> 00:50:43,770
open wrt based system and have another

00:50:41,069 --> 00:50:44,650
mips based distribution with pearl and

00:50:43,770 --> 00:50:47,410
other dependencies

00:50:44,650 --> 00:50:49,150
on there there's always you know a trade

00:50:47,410 --> 00:50:52,299
of you know how much time does it

00:50:49,150 --> 00:50:54,549
actually cost me to to learn about

00:50:52,299 --> 00:50:56,109
different dis joes and how they're set

00:50:54,549 --> 00:50:58,329
up and how things are going to work as

00:50:56,109 --> 00:51:01,029
opposed to can I just work around that

00:50:58,329 --> 00:51:03,130
on the open to the side and in

00:51:01,029 --> 00:51:05,950
particular since I happen to work on qmu

00:51:03,130 --> 00:51:08,049
it was a quite easy for me to just use

00:51:05,950 --> 00:51:12,190
em relation on a different architecture

00:51:08,049 --> 00:51:17,319
in this case on the ARM architecture to

00:51:12,190 --> 00:51:22,240
emulate MIPS binaries using in that case

00:51:17,319 --> 00:51:25,180
Q mu dash mipsel on the opensuse factory

00:51:22,240 --> 00:51:28,599
arm systems to do so i would just

00:51:25,180 --> 00:51:31,420
aggregate the hosts in the linux user

00:51:28,599 --> 00:51:34,900
package have an export folder so that it

00:51:31,420 --> 00:51:39,309
actually gets exported from amba 7hl in

00:51:34,900 --> 00:51:42,220
this case to the mips scheduler and then

00:51:39,309 --> 00:51:45,970
in the project configuration we also

00:51:42,220 --> 00:51:48,930
need to set the host architecture that a

00:51:45,970 --> 00:51:52,450
particular repository if you make a

00:51:48,930 --> 00:51:54,970
specific conditional for that actually

00:51:52,450 --> 00:51:57,789
gets dispatched to buy the OBS

00:51:54,970 --> 00:52:01,150
dispatcher and then as the next step I'm

00:51:57,789 --> 00:52:05,400
also have inside the change route the

00:52:01,150 --> 00:52:11,170
gnu linux user package pre-installed

00:52:05,400 --> 00:52:14,349
actually the build tool nags about the

00:52:11,170 --> 00:52:20,289
absence of a build in it vm arm v7

00:52:14,349 --> 00:52:21,970
either HL or l package i found that if i

00:52:20,289 --> 00:52:24,250
actually construct such a package it

00:52:21,970 --> 00:52:27,609
does not work for the very simple reason

00:52:24,250 --> 00:52:29,980
that on each start of a build job it

00:52:27,609 --> 00:52:33,730
will try to reregister all the bin

00:52:29,980 --> 00:52:36,369
format handling and that fails if there

00:52:33,730 --> 00:52:39,640
is already a handler registered for a

00:52:36,369 --> 00:52:41,069
particular elf magic stream or a so far

00:52:39,640 --> 00:52:46,089
for the name of that particular

00:52:41,069 --> 00:52:48,819
architecture so what I ended up doing is

00:52:46,089 --> 00:52:50,940
to have a simple Michelle script that

00:52:48,819 --> 00:52:55,440
was based on our

00:52:50,940 --> 00:52:57,030
GM you can't quite remember the name so

00:52:55,440 --> 00:52:59,339
in the S Pen directory there is a

00:52:57,030 --> 00:53:01,349
particular script installed by the

00:52:59,339 --> 00:53:03,030
cambie linux user package which does

00:53:01,349 --> 00:53:05,880
that i just grabbed the line which was

00:53:03,030 --> 00:53:07,829
specific to mipsel and for the very

00:53:05,880 --> 00:53:10,290
simple reason that there is a bug in

00:53:07,829 --> 00:53:15,240
that script in that two architectures

00:53:10,290 --> 00:53:16,980
think mipsel and mips and 32 or

00:53:15,240 --> 00:53:21,119
something like that or no MIPS and mips

00:53:16,980 --> 00:53:23,190
i'll actually have the same whatever

00:53:21,119 --> 00:53:24,690
exact two architects two of them had the

00:53:23,190 --> 00:53:26,280
same magic string and that made the

00:53:24,690 --> 00:53:29,099
registration fail so that's the reason

00:53:26,280 --> 00:53:31,740
why i choose a manual scrip for that and

00:53:29,099 --> 00:53:34,440
i simply use the the boot local script

00:53:31,740 --> 00:53:36,900
that's integrated into your system d to

00:53:34,440 --> 00:53:41,099
start that automatically whenever they

00:53:36,900 --> 00:53:42,569
build worker starts now finally to what

00:53:41,099 --> 00:53:45,720
you've probably been waiting for with

00:53:42,569 --> 00:53:48,440
five minutes left the status of where we

00:53:45,720 --> 00:53:52,109
are so don't be too excited about it

00:53:48,440 --> 00:53:55,650
MIPP 64 that would have been 44 this

00:53:52,109 --> 00:53:58,530
board I have not yet really focused at

00:53:55,650 --> 00:54:01,619
them simply because I don't have a full

00:53:58,530 --> 00:54:04,619
system where I can really actually test

00:54:01,619 --> 00:54:07,440
that yet I have been mostly cross

00:54:04,619 --> 00:54:10,079
compiling the mips64 packages alongside

00:54:07,440 --> 00:54:13,770
mipsel am simply because I wanted to

00:54:10,079 --> 00:54:15,569
avoid that I in the skeletons that I

00:54:13,770 --> 00:54:18,510
used for for creating all those costs

00:54:15,569 --> 00:54:20,250
compiled packages hardcode mipsel

00:54:18,510 --> 00:54:22,319
everywhere so I wanted to be able to

00:54:20,250 --> 00:54:27,440
also have like the right directly

00:54:22,319 --> 00:54:30,839
locations for for the 64-bit ones and

00:54:27,440 --> 00:54:33,900
then also I was unsure about should i be

00:54:30,839 --> 00:54:35,910
using mips64 or maybe 64 TL maybe

00:54:33,900 --> 00:54:38,700
someone in the audience has opinions on

00:54:35,910 --> 00:54:41,339
that at the end one one concern I had

00:54:38,700 --> 00:54:44,220
was that this box here has a big-endian

00:54:41,339 --> 00:54:47,550
kernel and it did not have the file

00:54:44,220 --> 00:54:50,339
utility in the the busybox file system

00:54:47,550 --> 00:54:52,200
to actually check whether the binary is

00:54:50,339 --> 00:54:55,440
that they were using were a big engine

00:54:52,200 --> 00:54:57,900
or little endian and the other concern

00:54:55,440 --> 00:55:00,900
of course is that is it a good idea to

00:54:57,900 --> 00:55:05,670
try to build big endian binaries on

00:55:00,900 --> 00:55:09,600
Indian systems such as x86 arm so let's

00:55:05,670 --> 00:55:12,030
move on to to mid sell my OBS instance

00:55:09,600 --> 00:55:14,100
before it stopped working was able to

00:55:12,030 --> 00:55:17,310
build pre-installed images so that means

00:55:14,100 --> 00:55:19,230
that like the core packages the very

00:55:17,310 --> 00:55:21,870
core set of cross-compile packages were

00:55:19,230 --> 00:55:25,680
working sufficiently enough and I could

00:55:21,870 --> 00:55:28,280
also start actual package builds I could

00:55:25,680 --> 00:55:31,440
also use the OSC utility with

00:55:28,280 --> 00:55:38,160
appropriate commands with an alternative

00:55:31,440 --> 00:55:41,090
project to choose build packages or

00:55:38,160 --> 00:55:44,520
start building packages on the ARM

00:55:41,090 --> 00:55:49,170
architecture that's where I I tried it

00:55:44,520 --> 00:55:51,240
locally and I could also use the OSC

00:55:49,170 --> 00:55:53,340
change would command and once the the

00:55:51,240 --> 00:55:55,560
build had failed in order to get into

00:55:53,340 --> 00:55:59,760
that system and interactively then play

00:55:55,560 --> 00:56:04,530
with with those packages once I had such

00:55:59,760 --> 00:56:07,080
a extracted build change rude I was also

00:56:04,530 --> 00:56:11,070
able to just transfer that build rude

00:56:07,080 --> 00:56:14,570
onto the onto this 32 bit on board here

00:56:11,070 --> 00:56:17,460
at the time I did not yet have the OBS

00:56:14,570 --> 00:56:21,360
build worker I'm running there so I just

00:56:17,460 --> 00:56:23,610
simply used SCP to transfer a hobble

00:56:21,360 --> 00:56:26,850
over there and extract that in there and

00:56:23,610 --> 00:56:29,760
do the the change would manually that

00:56:26,850 --> 00:56:33,030
also worked and the results between the

00:56:29,760 --> 00:56:34,830
emulated system on arm and the native

00:56:33,030 --> 00:56:36,450
nipple system were almost the same so it

00:56:34,830 --> 00:56:39,030
believes the only difference that I saw

00:56:36,450 --> 00:56:40,560
was that like the command line editing

00:56:39,030 --> 00:56:42,900
was working in the change would

00:56:40,560 --> 00:56:46,230
environment on armed with the emulation

00:56:42,900 --> 00:56:53,360
and it was kind of broken on on the

00:56:46,230 --> 00:56:59,310
Debian system also some easy packages

00:56:53,360 --> 00:57:00,840
were succeeding to well almost the

00:56:59,310 --> 00:57:02,820
seeding to build at least it was this

00:57:00,840 --> 00:57:05,070
Eden to build and install and were then

00:57:02,820 --> 00:57:08,580
failing with some sec fault or whatever

00:57:05,070 --> 00:57:12,240
exactly in the post build scripts

00:57:08,580 --> 00:57:15,030
and what I in particular noticed was

00:57:12,240 --> 00:57:20,180
that for example if I were taking a very

00:57:15,030 --> 00:57:24,330
simple binary such as host name I think

00:57:20,180 --> 00:57:26,580
then there were packaging issues

00:57:24,330 --> 00:57:28,350
starting to appear simply because the

00:57:26,580 --> 00:57:31,500
cost bill packages that I used initially

00:57:28,350 --> 00:57:34,500
were based on the upstream tar balls and

00:57:31,500 --> 00:57:39,120
not on the opens of the factory packages

00:57:34,500 --> 00:57:42,690
which turn out to have at least 20

00:57:39,120 --> 00:57:44,460
packages on 20 patches on top of our RPM

00:57:42,690 --> 00:57:46,170
package in order to tweak the the

00:57:44,460 --> 00:57:48,300
runtime behavior the configuration of

00:57:46,170 --> 00:57:49,860
you know what it generates automatically

00:57:48,300 --> 00:57:52,230
how it handled certain architecture

00:57:49,860 --> 00:57:53,820
names and so on so it did not

00:57:52,230 --> 00:57:57,770
immediately work so therefore I was

00:57:53,820 --> 00:58:01,140
focusing on getting the RPM package

00:57:57,770 --> 00:58:04,230
rebuild inside and this particular setup

00:58:01,140 --> 00:58:07,920
and unfortunately so far before things

00:58:04,230 --> 00:58:13,380
started to completely break I failed

00:58:07,920 --> 00:58:15,750
with the automate autumn make script

00:58:13,380 --> 00:58:17,760
simply unexpectedly returning at some

00:58:15,750 --> 00:58:20,550
point so I'm assuming that some to like

00:58:17,760 --> 00:58:27,320
a CD or something that is being invoked

00:58:20,550 --> 00:58:27,320
in there was not yet working as expected

00:58:29,120 --> 00:58:39,830
so that mostly completes this talk what

00:58:36,360 --> 00:58:39,830
questions are there

00:58:43,500 --> 00:58:50,140
heavy have you considered please do have

00:58:47,560 --> 00:58:53,950
you consider consider doing the initial

00:58:50,140 --> 00:58:55,810
bootstrap using real hardware instead

00:58:53,950 --> 00:58:59,020
and using the foreign distro mechanism

00:58:55,810 --> 00:59:01,359
instead of going cross compiling did you

00:58:59,020 --> 00:59:03,160
attend the beginning of the talk not

00:59:01,359 --> 00:59:07,300
quite I was held up it okay because I

00:59:03,160 --> 00:59:10,720
had shown slides about various

00:59:07,300 --> 00:59:13,990
approaches and one was the qme excel

00:59:10,720 --> 00:59:18,820
approach that I was speaking about and I

00:59:13,990 --> 00:59:22,050
had also looked into just using rpm

00:59:18,820 --> 00:59:26,410
build on on debian 74 building like

00:59:22,050 --> 00:59:30,730
packages but that led to imp in

00:59:26,410 --> 00:59:35,320
particular around jalebi see it was

00:59:30,730 --> 00:59:38,950
using provides and that our packages

00:59:35,320 --> 00:59:40,570
were not very happy with so it was like

00:59:38,950 --> 00:59:42,849
I knew was it using a different scheme

00:59:40,570 --> 00:59:44,230
or different versioning or as there was

00:59:42,849 --> 00:59:47,829
some different that was incompatible

00:59:44,230 --> 00:59:51,550
between you two did you mean something

00:59:47,829 --> 00:59:54,300
else no that's exactly it in fact this

00:59:51,550 --> 00:59:57,369
is the approach i was using like speak

00:59:54,300 --> 01:00:00,099
no i got i did i didn't expect anything

00:59:57,369 --> 01:00:01,839
else in fact this is the mechanism i

01:00:00,099 --> 01:00:07,510
used about four years ago when i started

01:00:01,839 --> 01:00:09,700
working on opensuse for spark yeah 11

01:00:07,510 --> 01:00:12,670
idea so under gas rob is also one of

01:00:09,700 --> 01:00:14,770
those am a handful of experts who have

01:00:12,670 --> 01:00:16,300
been using with with porting opensuse

01:00:14,770 --> 01:00:19,420
two different part of the bipod from you

01:00:16,300 --> 01:00:22,839
he was suggesting that i could just take

01:00:19,420 --> 01:00:25,240
like the operating system and just you

01:00:22,839 --> 01:00:26,770
know like throw it into one big RPM file

01:00:25,240 --> 01:00:28,869
with you know lots of provides or

01:00:26,770 --> 01:00:30,819
something like that but well the root

01:00:28,869 --> 01:00:32,530
offense that I had from debian was like

01:00:30,819 --> 01:00:35,230
two gigabytes and I didn't really feel

01:00:32,530 --> 01:00:39,390
like throwing all of that into one RPM

01:00:35,230 --> 01:00:39,390
package and then constantly install that

01:00:41,069 --> 01:00:44,579
more questions

01:00:45,080 --> 01:00:48,700
so maybe a quick survey from the the

01:00:47,210 --> 01:00:51,590
people who are sitting in the audience

01:00:48,700 --> 01:00:53,300
who either has some device that is

01:00:51,590 --> 01:00:55,370
running lips law would be interested in

01:00:53,300 --> 01:01:02,480
running opensuse on some random hips

01:00:55,370 --> 01:01:04,220
device so I'm seeing up to 30 k for four

01:01:02,480 --> 01:01:05,990
hands so obviously that's not a whole

01:01:04,220 --> 01:01:08,990
lot but yeah there were some people that

01:01:05,990 --> 01:01:11,150
that might have been interested so we'll

01:01:08,990 --> 01:01:14,540
just have to see in in which place we

01:01:11,150 --> 01:01:16,880
can I can actually transfer the the

01:01:14,540 --> 01:01:19,280
stuff that I have in order to to allow

01:01:16,880 --> 01:01:21,140
collaboration so so one idea and that

01:01:19,280 --> 01:01:22,670
agent brought up was to have like a test

01:01:21,140 --> 01:01:24,890
or be a server instance running

01:01:22,670 --> 01:01:29,510
somewhere that's separate from from the

01:01:24,890 --> 01:01:32,570
main OBS instance or some VPN or

01:01:29,510 --> 01:01:46,550
whatever set up to to to to make network

01:01:32,570 --> 01:01:48,950
in some way further questions or is an

01:01:46,550 --> 01:01:51,050
apart from yon anyone else here I'm

01:01:48,950 --> 01:01:57,560
considering doing a poor to a different

01:01:51,050 --> 01:02:00,680
architecture well the problem with

01:01:57,560 --> 01:02:05,570
porting to any other architecture than

01:02:00,680 --> 01:02:07,880
those what we already have is that a few

01:02:05,570 --> 01:02:10,670
people there is hardware is hard to get

01:02:07,880 --> 01:02:15,820
ad so either it's awfully pricey as a

01:02:10,670 --> 01:02:17,990
for hobbyists and or you get some crazy

01:02:15,820 --> 01:02:19,760
segmentation fold in the compiler which

01:02:17,990 --> 01:02:22,220
you don't know how to fix and because

01:02:19,760 --> 01:02:25,210
there's no developer either you're kind

01:02:22,220 --> 01:02:25,210
of stuck in that sense

01:02:28,300 --> 01:02:31,960
so yeah what I was kind of hinting at

01:02:30,640 --> 01:02:34,120
here so there's a couple of

01:02:31,960 --> 01:02:37,000
architectures that would be supported in

01:02:34,120 --> 01:02:38,650
qmu for long cross and protectors one

01:02:37,000 --> 01:02:40,390
that I was recently getting a bagged

01:02:38,650 --> 01:02:43,030
about with the sis emails is that

01:02:40,390 --> 01:02:45,100
someone was working on getting the tile

01:02:43,030 --> 01:02:49,780
GX emulation and PM you up to speed with

01:02:45,100 --> 01:02:54,070
the GCC test suite there's like open

01:02:49,780 --> 01:02:56,530
risk there is also k 10 m this was the

01:02:54,070 --> 01:03:00,130
current Knights landing preview

01:02:56,530 --> 01:03:02,950
something okay which is more or less x86

01:03:00,130 --> 01:03:05,740
but again there's the problem how long

01:03:02,950 --> 01:03:07,090
is it going to be supported and are you

01:03:05,740 --> 01:03:08,680
see there there's a hard to answer

01:03:07,090 --> 01:03:10,480
there's at the hardware as an

01:03:08,680 --> 01:03:12,610
interesting target or are you think

01:03:10,480 --> 01:03:14,080
there's a QM you port for that hardware

01:03:12,610 --> 01:03:16,030
as an interesting target because it's

01:03:14,080 --> 01:03:18,520
fast and you can do native builds which

01:03:16,030 --> 01:03:21,160
i think is a lot better than trying qm

01:03:18,520 --> 01:03:22,900
or in any way so i would personally also

01:03:21,160 --> 01:03:24,970
be interested in that particular one I

01:03:22,900 --> 01:03:27,870
just haven't had my hands on any night

01:03:24,970 --> 01:03:31,680
standing hardware myself do you have any

01:03:27,870 --> 01:03:31,680
no okay

01:03:36,600 --> 01:03:43,660
okay any any further questions or

01:03:39,990 --> 01:03:45,280
comments quite possible that I'm doing

01:03:43,660 --> 01:03:48,220
something totally stupid and could have

01:03:45,280 --> 01:03:49,840
spared work but this was what I came up

01:03:48,220 --> 01:03:51,880
with and like I said it's one of those

01:03:49,840 --> 01:03:53,740
topics we don't really have a whole lot

01:03:51,880 --> 01:03:56,440
of documentation on how to do this

01:03:53,740 --> 01:04:00,010
because it's not done so frequently yes

01:03:56,440 --> 01:04:02,620
please however of the auto color make

01:04:00,010 --> 01:04:06,520
feature that that makes possible to make

01:04:02,620 --> 01:04:08,170
a cache of the of the target please hold

01:04:06,520 --> 01:04:11,320
it closer to the mouth it's very hard to

01:04:08,170 --> 01:04:14,590
hear hear however that kind of configure

01:04:11,320 --> 01:04:17,560
based on the automaker is capable to

01:04:14,590 --> 01:04:21,300
create a cache of configuring results on

01:04:17,560 --> 01:04:24,400
on a host machine so you can copy a

01:04:21,300 --> 01:04:27,820
configuration to the that target machine

01:04:24,400 --> 01:04:32,740
and the configure script could raise it

01:04:27,820 --> 01:04:35,200
I believe in some cases I may have had

01:04:32,740 --> 01:04:38,290
to resort to that yes I think I put that

01:04:35,200 --> 01:04:42,730
inside the the spec file you know like

01:04:38,290 --> 01:04:44,800
having so it was definitely I think it

01:04:42,730 --> 01:04:48,990
was less than five packages out of that

01:04:44,800 --> 01:04:53,200
very long list yes it's often a broken

01:04:48,990 --> 01:04:56,140
it's often broken out of the box it's

01:04:53,200 --> 01:04:59,680
just the configure doesn't doesn't check

01:04:56,140 --> 01:05:03,460
for everything on the target and the

01:04:59,680 --> 01:05:06,580
don't use cash for it so if if anyone is

01:05:03,460 --> 01:05:08,200
like an upstream maintainer or cares

01:05:06,580 --> 01:05:11,260
about this particular topic then please

01:05:08,200 --> 01:05:13,630
feel free to patch various upstream

01:05:11,260 --> 01:05:16,300
packages to not rely on those host

01:05:13,630 --> 01:05:19,330
checks but rather to use like a taste

01:05:16,300 --> 01:05:21,040
compilation there's even very cool ways

01:05:19,330 --> 01:05:22,600
to figure out whether you're running big

01:05:21,040 --> 01:05:23,890
engine or little in the short north

01:05:22,600 --> 01:05:25,900
whether you're running little endian

01:05:23,890 --> 01:05:27,370
whether we actually building for bigger

01:05:25,900 --> 01:05:31,880
little engines simply by doing like a

01:05:27,370 --> 01:05:34,440
binary and grab for for certain

01:05:31,880 --> 01:05:36,720
I'm string or sequence of numbers that

01:05:34,440 --> 01:05:38,340
you actually used in a source code so

01:05:36,720 --> 01:05:41,820
there's examples from any of those out

01:05:38,340 --> 01:05:44,280
there if you're unsure and yeah it's

01:05:41,820 --> 01:05:49,350
definitely the the only way that that

01:05:44,280 --> 01:05:51,359
really works universally if there's no

01:05:49,350 --> 01:05:55,050
further questions then thank you very

01:05:51,359 --> 01:05:57,810
much for your interest and the next talk

01:05:55,050 --> 01:06:00,869
will be about building and making

01:05:57,810 --> 01:06:03,440
available across compilers for opens

01:06:00,869 --> 01:06:03,440

YouTube URL: https://www.youtube.com/watch?v=PbK7fcqQGkE


