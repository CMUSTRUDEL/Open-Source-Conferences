Title: Richard Brown: Distribute or Die - Arguing against Additional Repositories.
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/958-distribute-or-die-arguing-against-additional-repositories

openSUSE has a wonderful platform with OBS, and tools like software.opensuse.org and 1-Click installs make it very easy for users to get additional software on their machines.

This talk will discuss how this is quite often a very bad thing, leading to problems for users as well as extra work for maintainers in both the short and long term.
It will discuss the benefits of putting software packages in both of openSUSE's distributions (Leap & Tumbleweed) and propose concrete steps which users and responsible package maintainers can take to ensure everything is put together and working as smoothly as possible.

Finally, the session will accept the reality that putting absolutely everything in a distribution is infeasible and discuss possible criteria and guidelines for sensibly defined, maintainable additional repositories that avoid the issues raised earlier in the session.

Richard Brown
Captions: 
	00:00:07,930 --> 00:00:13,490
alright so if you don't know me I'm

00:00:11,390 --> 00:00:16,240
Richard Brown I'm the opensuse chairman

00:00:13,490 --> 00:00:18,920
and I'm going to be talking now about

00:00:16,240 --> 00:00:20,990
why we should be just building our

00:00:18,920 --> 00:00:22,700
distribution properly and really why we

00:00:20,990 --> 00:00:26,000
should be discouraging the use and the

00:00:22,700 --> 00:00:27,169
building of additional repositories this

00:00:26,000 --> 00:00:29,930
presentation is a little bit like a

00:00:27,169 --> 00:00:32,930
football match it's a game it's a slide

00:00:29,930 --> 00:00:35,750
deck with two halves there's going to be

00:00:32,930 --> 00:00:36,800
things I'm going to say that well people

00:00:35,750 --> 00:00:40,760
aren't necessarily going to agree with

00:00:36,800 --> 00:00:42,530
people might not like and I really need

00:00:40,760 --> 00:00:44,989
to ask that you know any questions any

00:00:42,530 --> 00:00:48,429
counter points please try and save it to

00:00:44,989 --> 00:00:51,980
the end there will be time for questions

00:00:48,429 --> 00:00:55,579
and hopefully we will get to a an ending

00:00:51,980 --> 00:00:59,920
that we all like but i don't really like

00:00:55,579 --> 00:01:02,390
football so I much prefer a rugby and

00:00:59,920 --> 00:01:05,690
there will be blood there are things

00:01:02,390 --> 00:01:07,220
here that we really need to fix problems

00:01:05,690 --> 00:01:10,640
that have been lingering in the project

00:01:07,220 --> 00:01:14,260
for 10 years and it's about time we did

00:01:10,640 --> 00:01:18,610
something about them and I want to start

00:01:14,260 --> 00:01:20,930
from the users perspective this fellow

00:01:18,610 --> 00:01:24,710
kind of possibly one of our typical

00:01:20,930 --> 00:01:26,690
users and you know the average typical

00:01:24,710 --> 00:01:30,590
opensuse user as we saw with the slides

00:01:26,690 --> 00:01:33,170
earlier this week is normally using leap

00:01:30,590 --> 00:01:36,440
and from the look of things not quite

00:01:33,170 --> 00:01:40,340
happy everything works you know no

00:01:36,440 --> 00:01:41,750
problems whatsoever but sooner or later

00:01:40,340 --> 00:01:43,340
they're going to find something else

00:01:41,750 --> 00:01:44,660
they want to use that for some other bit

00:01:43,340 --> 00:01:47,410
of software maybe they're looking on

00:01:44,660 --> 00:01:50,240
reddit maybe they're reading hacker news

00:01:47,410 --> 00:01:52,310
whatever some new bit of technology

00:01:50,240 --> 00:01:53,810
comes about although they just heard

00:01:52,310 --> 00:01:55,130
about it for the first time and they

00:01:53,810 --> 00:01:57,500
want to install it on their opensuse

00:01:55,130 --> 00:02:00,290
machine and when everything works

00:01:57,500 --> 00:02:02,900
properly it's a relatively easy case of

00:02:00,290 --> 00:02:05,180
finding it for example using zipper and

00:02:02,900 --> 00:02:06,230
I simple is it but if chromium will find

00:02:05,180 --> 00:02:08,629
chromium in our distribution

00:02:06,230 --> 00:02:09,940
repositories at nice and easy to install

00:02:08,629 --> 00:02:13,120
from there

00:02:09,940 --> 00:02:14,940
or the UTS or of course if you are no

00:02:13,120 --> 00:02:17,800
music we also have the gnome software

00:02:14,940 --> 00:02:20,860
application store and this is easy and

00:02:17,800 --> 00:02:23,350
it is good and then it's only one click

00:02:20,860 --> 00:02:24,910
or one commander way to install

00:02:23,350 --> 00:02:30,190
everything and everything is fine and

00:02:24,910 --> 00:02:31,660
simple and everybody is happy but what

00:02:30,190 --> 00:02:33,700
about when the package isn't in our

00:02:31,660 --> 00:02:38,170
distribution repositories when it's not

00:02:33,700 --> 00:02:41,590
there like here elasticsearch zipper if

00:02:38,170 --> 00:02:45,490
elasticsearch finds nothing what do you

00:02:41,590 --> 00:02:49,510
do next we haven't got that written down

00:02:45,490 --> 00:02:51,400
anywhere we actually have no no easy

00:02:49,510 --> 00:02:53,560
solution as the tools don't to say tell

00:02:51,400 --> 00:02:56,110
you anything there's no simple

00:02:53,560 --> 00:02:58,090
documentation we just expect our users

00:02:56,110 --> 00:03:01,180
to magically know this and this isn't

00:02:58,090 --> 00:03:05,170
just a problem that opensuse house so

00:03:01,180 --> 00:03:08,350
when talking about Slee slee 12 has a

00:03:05,170 --> 00:03:11,250
very fancy new set a new feature set in

00:03:08,350 --> 00:03:13,750
NC 12 where there are additional modules

00:03:11,250 --> 00:03:16,000
being released at a different cadence

00:03:13,750 --> 00:03:18,280
with a different support level so sleek

00:03:16,000 --> 00:03:21,010
us tomers can get certain software

00:03:18,280 --> 00:03:23,950
stacks at a faster pace things like new

00:03:21,010 --> 00:03:27,820
PHP advanced systems management tools

00:03:23,950 --> 00:03:30,730
etc etc but if you're using it from a

00:03:27,820 --> 00:03:33,070
user's perspective this is the first

00:03:30,730 --> 00:03:36,100
time you realize you need to install a

00:03:33,070 --> 00:03:40,510
module when you find it isn't in the

00:03:36,100 --> 00:03:42,880
main base distribution and if you use to

00:03:40,510 --> 00:03:46,780
stand the tools you go to yes for

00:03:42,880 --> 00:03:51,459
example there's actually nothing obvious

00:03:46,780 --> 00:03:53,050
there on even how to find the module now

00:03:51,459 --> 00:03:56,650
you might be a smart user and realize

00:03:53,050 --> 00:04:00,910
that modules are / sec so you put sec in

00:03:56,650 --> 00:04:04,110
the search box and you find nothing you

00:04:00,910 --> 00:04:06,489
might look for modules and find nothing

00:04:04,110 --> 00:04:08,080
you might look for add-on products and

00:04:06,489 --> 00:04:09,670
you find a very nice add-on products

00:04:08,080 --> 00:04:11,170
window but actually that's not the one

00:04:09,670 --> 00:04:14,739
for modules that's the one for add-on

00:04:11,170 --> 00:04:15,790
products like a che and for geo and it's

00:04:14,739 --> 00:04:17,290
only if you actually type in the

00:04:15,790 --> 00:04:20,200
registration part which luckily this bit

00:04:17,290 --> 00:04:21,290
is documented where you then find the

00:04:20,200 --> 00:04:24,350
screen

00:04:21,290 --> 00:04:27,080
for adding extensions to your slim

00:04:24,350 --> 00:04:29,360
machine but then you don't know which

00:04:27,080 --> 00:04:31,550
one to actually click on because it's

00:04:29,360 --> 00:04:34,010
absolutely nowhere do we have a list of

00:04:31,550 --> 00:04:37,730
which packages are in which edition of

00:04:34,010 --> 00:04:39,140
one of these repositories now for

00:04:37,730 --> 00:04:42,530
opensuse we share some of these problems

00:04:39,140 --> 00:04:45,700
but we have a nice magical tool as part

00:04:42,530 --> 00:04:50,540
of the software opensuse dorg search

00:04:45,700 --> 00:04:53,120
which lets you find this stuff but even

00:04:50,540 --> 00:04:56,270
then we have some very serious problems

00:04:53,120 --> 00:05:00,020
with this for example looking for

00:04:56,270 --> 00:05:02,270
elasticsearch you get one two three very

00:05:00,020 --> 00:05:03,530
clear different versions a whole bunch

00:05:02,270 --> 00:05:06,110
of extra modules when all you really

00:05:03,530 --> 00:05:07,400
wanted was actually the top one and in

00:05:06,110 --> 00:05:13,220
fact the list goes longer and longer and

00:05:07,400 --> 00:05:16,220
longer when you click on that you get

00:05:13,220 --> 00:05:17,840
this lovely page which actually has a

00:05:16,220 --> 00:05:19,550
little bit information about the package

00:05:17,840 --> 00:05:21,410
it doesn't have a screenshot because

00:05:19,550 --> 00:05:24,800
obviously it's a console application it

00:05:21,410 --> 00:05:26,420
shouldn't need one and you don't really

00:05:24,800 --> 00:05:27,800
actually get any information about what

00:05:26,420 --> 00:05:29,840
to install we're apart from this big

00:05:27,800 --> 00:05:33,710
nasty button saying show unstable

00:05:29,840 --> 00:05:35,360
packages which you then click on and you

00:05:33,710 --> 00:05:37,460
get this warning which most people

00:05:35,360 --> 00:05:38,900
ignore that you know you shouldn't

00:05:37,460 --> 00:05:40,550
really be using this you shouldn't use

00:05:38,900 --> 00:05:44,420
on the official repositories it may be

00:05:40,550 --> 00:05:46,610
unstable it may be experimental and in

00:05:44,420 --> 00:05:48,020
fact if you're using a java script

00:05:46,610 --> 00:05:50,660
blocker this will actually won't even

00:05:48,020 --> 00:05:55,460
appear so people don't know about it in

00:05:50,660 --> 00:05:58,760
many cases these days and then what this

00:05:55,460 --> 00:06:01,340
is then doing is going to OBS looking at

00:05:58,760 --> 00:06:03,350
everything we have in home repositories

00:06:01,340 --> 00:06:06,680
and develop aza trees and trying to do

00:06:03,350 --> 00:06:10,670
its best at showing what is available

00:06:06,680 --> 00:06:14,870
there and every single column on this is

00:06:10,670 --> 00:06:16,700
wrong for starters it's not ordered

00:06:14,870 --> 00:06:18,290
there's absolutely you know it's got

00:06:16,700 --> 00:06:20,720
home repositories and develop all the

00:06:18,290 --> 00:06:22,100
trees in you know pretty much a random

00:06:20,720 --> 00:06:25,010
scattering it's not alphabetically

00:06:22,100 --> 00:06:27,500
listed it's not listed by version

00:06:25,010 --> 00:06:30,650
numbers you know 175 there is a bigger

00:06:27,500 --> 00:06:31,900
is higher than 144 but 135 is listed

00:06:30,650 --> 00:06:34,729
above it

00:06:31,900 --> 00:06:36,139
the architecture column there is totally

00:06:34,729 --> 00:06:39,259
and utterly wrong devour languages

00:06:36,139 --> 00:06:42,409
Python does not only build forearm v6 it

00:06:39,259 --> 00:06:45,740
builds for everything and then at the

00:06:42,409 --> 00:06:48,620
end you have a one click install now for

00:06:45,740 --> 00:06:51,110
this example I've kind of assumed that

00:06:48,620 --> 00:06:52,759
the user in question is is a sort of a

00:06:51,110 --> 00:06:55,819
moderately skilled and experienced

00:06:52,759 --> 00:06:56,870
opensuse users so they've you know they

00:06:55,819 --> 00:06:58,490
probably know how the distribution is

00:06:56,870 --> 00:07:00,770
put together they know that a developer

00:06:58,490 --> 00:07:04,460
ject is where we're baking stuff where

00:07:00,770 --> 00:07:06,319
developers are working on stuff so in

00:07:04,460 --> 00:07:10,389
this example the user then clicks on a

00:07:06,319 --> 00:07:12,680
one click install and click number one

00:07:10,389 --> 00:07:17,059
it's obviously downloading the one-click

00:07:12,680 --> 00:07:23,389
install runner from Firefox click number

00:07:17,059 --> 00:07:24,800
two is this window where it's forcing

00:07:23,389 --> 00:07:27,499
the adding of additional above the trees

00:07:24,800 --> 00:07:29,539
to their machine now for starters the

00:07:27,499 --> 00:07:30,919
repositories it's adding er totally

00:07:29,539 --> 00:07:33,349
crazy this was run on a tumbleweed

00:07:30,919 --> 00:07:34,580
machine my 1 i've been produced it a few

00:07:33,349 --> 00:07:37,490
times to make sure that I wasn't going

00:07:34,580 --> 00:07:39,499
crazy and you can see there it's adding

00:07:37,490 --> 00:07:42,680
the tumbleweed repository again for

00:07:39,499 --> 00:07:46,580
reasons I can't explain and it's adding

00:07:42,680 --> 00:07:48,979
opensuse factory PowerPC twice two

00:07:46,580 --> 00:07:53,240
different versions of Power PC

00:07:48,979 --> 00:07:55,279
repositories on an intern machine and I

00:07:53,240 --> 00:07:57,589
have no idea why it's doing that

00:07:55,279 --> 00:08:00,529
whatsoever but it's consistently doing

00:07:57,589 --> 00:08:03,020
that at least now on the search we said

00:08:00,529 --> 00:08:04,189
it was only a only arm now when you do

00:08:03,020 --> 00:08:06,770
it you get something totally different

00:08:04,189 --> 00:08:10,759
there's a complete confusing mismatch of

00:08:06,770 --> 00:08:13,219
what's going on there at least the next

00:08:10,759 --> 00:08:14,809
screen is mostly accurate I only wanted

00:08:13,219 --> 00:08:16,129
to install elasticsearch and its board

00:08:14,809 --> 00:08:19,189
the packet information through so that

00:08:16,129 --> 00:08:20,990
is all good and great and then you get a

00:08:19,189 --> 00:08:22,430
zoo in here sort of warning you with a

00:08:20,990 --> 00:08:24,969
nice big red message you know these

00:08:22,430 --> 00:08:28,729
changes will be made to your system

00:08:24,969 --> 00:08:33,169
there's no real notice here about how

00:08:28,729 --> 00:08:34,940
broken what it is about to do is if you

00:08:33,169 --> 00:08:37,219
click next year if this worked it

00:08:34,940 --> 00:08:38,510
luckily it doesn't but if this worked

00:08:37,219 --> 00:08:41,659
you would end up with a totally and

00:08:38,510 --> 00:08:43,219
utterly broken machine and there's no

00:08:41,659 --> 00:08:45,089
real notice for that we just let them

00:08:43,219 --> 00:08:46,439
carry along quite happily

00:08:45,089 --> 00:08:48,059
add repositories it'll break their

00:08:46,439 --> 00:08:50,610
machine add a repository that they

00:08:48,059 --> 00:08:54,180
already have an installer package that

00:08:50,610 --> 00:08:55,949
isn't going to work but we've warmed

00:08:54,180 --> 00:09:00,269
them we've told them it's all on their

00:08:55,949 --> 00:09:02,129
own risk click number six of course we

00:09:00,269 --> 00:09:04,860
require root acts a REIT access to

00:09:02,129 --> 00:09:06,930
actually install anything click number

00:09:04,860 --> 00:09:08,339
seven we actually require some the gpg

00:09:06,930 --> 00:09:09,689
key for the addition of a paucity

00:09:08,339 --> 00:09:13,050
because it's not built using our

00:09:09,689 --> 00:09:14,579
standard authorized keys and click

00:09:13,050 --> 00:09:17,430
number 80s when if everything goes wrong

00:09:14,579 --> 00:09:19,350
because the repository which one click

00:09:17,430 --> 00:09:22,889
install was absolutely certain was fine

00:09:19,350 --> 00:09:25,319
doesn't actually work so then the whole

00:09:22,889 --> 00:09:28,290
thing crashes and the user doesn't get

00:09:25,319 --> 00:09:31,860
the package they want right now one

00:09:28,290 --> 00:09:32,939
click installs are broken I've tried

00:09:31,860 --> 00:09:34,680
this three or four times with different

00:09:32,939 --> 00:09:37,019
packages I wanted to actually have two

00:09:34,680 --> 00:09:38,519
or four examples this one actually ended

00:09:37,019 --> 00:09:40,199
up being the first one I tried and had

00:09:38,519 --> 00:09:41,939
covered everything broken that I could

00:09:40,199 --> 00:09:44,819
find so it's one example that kind of

00:09:41,939 --> 00:09:46,199
covers the whole mess we really need to

00:09:44,819 --> 00:09:48,389
get this fixed if we're going to have

00:09:46,199 --> 00:09:51,120
one click installs they have to install

00:09:48,389 --> 00:09:53,819
stuff in a sensible way at the correct

00:09:51,120 --> 00:09:55,740
repositories and do the best to shield

00:09:53,819 --> 00:09:58,170
our users from doing stupid stuff the

00:09:55,740 --> 00:10:00,149
breaks their machines because then they

00:09:58,170 --> 00:10:04,199
go to the forms then they go to IRC then

00:10:00,149 --> 00:10:07,259
they go to social media and moan that

00:10:04,199 --> 00:10:12,059
opensuse is broken open seas is fine

00:10:07,259 --> 00:10:13,949
this is what's broken now as I said in

00:10:12,059 --> 00:10:16,230
this example I'm assuming the user is

00:10:13,949 --> 00:10:17,579
you know moderately skilled moderately

00:10:16,230 --> 00:10:20,220
aware of what we're doing so of course

00:10:17,579 --> 00:10:23,370
if you go to OBS you can find the

00:10:20,220 --> 00:10:26,699
package in there and this is the devout

00:10:23,370 --> 00:10:28,920
languages pison project digging around

00:10:26,699 --> 00:10:30,679
OBS you can find the list of all of the

00:10:28,920 --> 00:10:32,970
repositories that it's building against

00:10:30,679 --> 00:10:36,740
which is a surprisingly big lift for

00:10:32,970 --> 00:10:41,129
develop project I mean slay 11 SB 3 SB 4

00:10:36,740 --> 00:10:43,139
3 12 sp1 and sp2 some weird bleeding

00:10:41,129 --> 00:10:46,050
factory which I have no idea what that

00:10:43,139 --> 00:10:48,480
is and a whole range of other bits and

00:10:46,050 --> 00:10:49,800
pieces but obviously in this case i'm

00:10:48,480 --> 00:10:51,130
using tumbleweed so you can click on

00:10:49,800 --> 00:10:54,070
tumbleweed

00:10:51,130 --> 00:10:56,230
you get the list of the packages from

00:10:54,070 --> 00:10:58,660
there that tiny little link is actually

00:10:56,230 --> 00:11:01,510
the only thing I'm interested in because

00:10:58,660 --> 00:11:04,810
I want to have the list of the

00:11:01,510 --> 00:11:06,700
repository URL so then I can go to

00:11:04,810 --> 00:11:10,840
zipper Horty asked and add the

00:11:06,700 --> 00:11:13,920
repository manually which I do I then do

00:11:10,840 --> 00:11:16,720
sip it in and at this point I'm happy

00:11:13,920 --> 00:11:18,880
and everything's fine it works most of

00:11:16,720 --> 00:11:20,020
the time assuming the package is

00:11:18,880 --> 00:11:21,960
actually building properly so you mean

00:11:20,020 --> 00:11:26,530
the packages develop relatively well

00:11:21,960 --> 00:11:32,080
most things are all okay and then I do a

00:11:26,530 --> 00:11:34,480
zipper up and zipper wants to warn me

00:11:32,080 --> 00:11:36,040
that there's 97 packages from devour

00:11:34,480 --> 00:11:38,830
languages python that it isn't going to

00:11:36,040 --> 00:11:40,600
touch this is what would happen if I'm

00:11:38,830 --> 00:11:43,660
we'll only if I'm a tumbleweed and I do

00:11:40,600 --> 00:11:45,010
a zippered up it doesn't tell me it's

00:11:43,660 --> 00:11:47,440
not going to do anything it tries to

00:11:45,010 --> 00:11:49,630
find a way to install the entire list of

00:11:47,440 --> 00:11:53,140
every single package in duvall and

00:11:49,630 --> 00:11:55,510
gujjus Python so my lovely tested secure

00:11:53,140 --> 00:11:57,730
tumbleweed installation where we spent

00:11:55,510 --> 00:11:59,340
times testing and testing and testing to

00:11:57,730 --> 00:12:01,990
make sure that the whole thing works

00:11:59,340 --> 00:12:04,300
consistently and comprehensively with

00:12:01,990 --> 00:12:07,540
all of the stuff the you know is for

00:12:04,300 --> 00:12:10,540
example into open QA immediately gets

00:12:07,540 --> 00:12:14,140
invalidated by package of the package

00:12:10,540 --> 00:12:17,350
after package from devour languages

00:12:14,140 --> 00:12:20,230
Python now I might be lucky all 97 of

00:12:17,350 --> 00:12:21,520
these might work but the chances are

00:12:20,230 --> 00:12:23,560
there's going to be at least one that

00:12:21,520 --> 00:12:25,930
doesn't and it's going to break some

00:12:23,560 --> 00:12:27,040
other application elsewhere make it

00:12:25,930 --> 00:12:30,130
harder for me to work with my other

00:12:27,040 --> 00:12:34,000
stuff and generally caused me problems

00:12:30,130 --> 00:12:36,580
sooner or later down the road this is

00:12:34,000 --> 00:12:39,940
what every bleep and tumbleweed a user

00:12:36,580 --> 00:12:42,880
has to deal with when that package isn't

00:12:39,940 --> 00:12:49,240
in the distribution that's the best-case

00:12:42,880 --> 00:12:51,540
that's just not good engineering but

00:12:49,240 --> 00:12:53,650
that's discretion the surface worst case

00:12:51,540 --> 00:12:55,210
we have no quality control some

00:12:53,650 --> 00:12:57,880
developers we're not meant to that

00:12:55,210 --> 00:12:59,800
development repose so build failures

00:12:57,880 --> 00:13:01,870
happen all the time everything's moving

00:12:59,800 --> 00:13:04,960
around your package might not build any

00:13:01,870 --> 00:13:07,080
more when you're working with more

00:13:04,960 --> 00:13:09,340
more dependent more more developers

00:13:07,080 --> 00:13:10,930
dependency conflicts appear more more

00:13:09,340 --> 00:13:12,160
often because we have no quality

00:13:10,930 --> 00:13:13,960
controls in there there's nothing

00:13:12,160 --> 00:13:15,580
stopping one developer having one copy

00:13:13,960 --> 00:13:18,250
of a package another developer have a

00:13:15,580 --> 00:13:20,370
different copy so you're going to end up

00:13:18,250 --> 00:13:22,930
with package conflicts happening from

00:13:20,370 --> 00:13:25,750
different repositories that you know for

00:13:22,930 --> 00:13:26,470
very sensible reasons all the opposite

00:13:25,750 --> 00:13:29,560
you end up with unresolvable

00:13:26,470 --> 00:13:31,090
dependencies because you know the devel

00:13:29,560 --> 00:13:32,980
maintainer tried to do a good job of not

00:13:31,090 --> 00:13:34,270
duplicating stuff needlessly so it only

00:13:32,980 --> 00:13:36,430
has the stuff that interested in

00:13:34,270 --> 00:13:38,020
developing in there so there's no way of

00:13:36,430 --> 00:13:40,120
installing it because it requires some

00:13:38,020 --> 00:13:42,450
other developer which isn't clearly

00:13:40,120 --> 00:13:45,520
obvious for the user to install and then

00:13:42,450 --> 00:13:48,670
even if it works even if it builds even

00:13:45,520 --> 00:13:50,800
if its dependency same the package still

00:13:48,670 --> 00:13:53,530
might be broken because that's why it's

00:13:50,800 --> 00:13:56,680
in a develop project so we can test it

00:13:53,530 --> 00:13:58,030
so we can make sure it works packages

00:13:56,680 --> 00:13:59,770
are meant to break in develop objects

00:13:58,030 --> 00:14:01,000
that's why we have them so they can

00:13:59,770 --> 00:14:05,590
break before we put it in the

00:14:01,000 --> 00:14:08,440
distribution so what I want from sort of

00:14:05,590 --> 00:14:11,730
everybody and everything is develop

00:14:08,440 --> 00:14:13,810
objects shouldn't be used by users ever

00:14:11,730 --> 00:14:15,850
because the more I think about this the

00:14:13,810 --> 00:14:16,990
more I think about how we could fix this

00:14:15,850 --> 00:14:19,960
and how the things that I'm going to

00:14:16,990 --> 00:14:22,750
suggest going forward even if we

00:14:19,960 --> 00:14:24,040
implement every single one of them we

00:14:22,750 --> 00:14:25,510
either compromise what the devel

00:14:24,040 --> 00:14:29,140
projects are meant to be for when it

00:14:25,510 --> 00:14:32,110
comes to developing stuff it or we end

00:14:29,140 --> 00:14:34,240
up shipping something broken to users so

00:14:32,110 --> 00:14:36,100
in my opinion we should keep develop

00:14:34,240 --> 00:14:38,770
projects in the role they were designed

00:14:36,100 --> 00:14:42,700
for and intended for and we need to stop

00:14:38,770 --> 00:14:47,130
users using them so how do we fix all of

00:14:42,700 --> 00:14:50,710
this and there's really two options one

00:14:47,130 --> 00:14:54,130
fix everything and there's a long list I

00:14:50,710 --> 00:14:55,480
mean so starting with OBS I know there's

00:14:54,130 --> 00:14:57,880
some features for this already but you

00:14:55,480 --> 00:14:59,560
know it also a case of how do we use OBS

00:14:57,880 --> 00:15:01,930
so maybe not actually changing how lbs

00:14:59,560 --> 00:15:04,930
works by changing the project's use of

00:15:01,930 --> 00:15:07,090
the build service but you know maybe we

00:15:04,930 --> 00:15:08,860
need to have a cross project dependency

00:15:07,090 --> 00:15:11,140
checker so we can actually see okay this

00:15:08,860 --> 00:15:12,970
developer ministerio work together is

00:15:11,140 --> 00:15:14,140
everything going to be saying is it

00:15:12,970 --> 00:15:16,230
going to work

00:15:14,140 --> 00:15:18,900
we've had issues in the past with

00:15:16,230 --> 00:15:21,430
projects publishing broken packages or

00:15:18,900 --> 00:15:22,840
packages failing to build the repo still

00:15:21,430 --> 00:15:25,600
being published in the entire thing no

00:15:22,840 --> 00:15:27,460
longer being consistent so maybe we need

00:15:25,600 --> 00:15:29,170
to have some way of freezing the

00:15:27,460 --> 00:15:33,040
publishing of a project when there's a

00:15:29,170 --> 00:15:37,150
build failure in that Reaper or or and

00:15:33,040 --> 00:15:38,500
or maybe we need a new type of repo we

00:15:37,150 --> 00:15:41,410
have officially the main official

00:15:38,500 --> 00:15:43,060
repositories we have home repose for

00:15:41,410 --> 00:15:44,320
everybody to do anything they want we

00:15:43,060 --> 00:15:47,260
have developers for building the

00:15:44,320 --> 00:15:49,810
distributions maybe we need a concept of

00:15:47,260 --> 00:15:51,670
a stable repo where we can say okay this

00:15:49,810 --> 00:15:54,970
stuff at least has been checked in some

00:15:51,670 --> 00:15:57,960
sense it's been built properly users can

00:15:54,970 --> 00:16:01,570
use stable maybe that's what we need

00:15:57,960 --> 00:16:03,180
even if we have that zipper it'll to

00:16:01,570 --> 00:16:05,770
kind of support these kind of concepts

00:16:03,180 --> 00:16:07,990
maybe we need to get rid of the will not

00:16:05,770 --> 00:16:09,730
be installed warnings the vendor concept

00:16:07,990 --> 00:16:10,990
is one of our greatest things but at the

00:16:09,730 --> 00:16:14,170
same time causes an awful lot of

00:16:10,990 --> 00:16:16,780
confusion so maybe we need to smoothen

00:16:14,170 --> 00:16:18,790
it out tidy it up maybe for example the

00:16:16,780 --> 00:16:21,790
stable repos would be built under the

00:16:18,790 --> 00:16:25,180
opensuse key maybe not because critter

00:16:21,790 --> 00:16:27,100
shaking his head at me already and of

00:16:25,180 --> 00:16:29,410
course improving the search

00:16:27,100 --> 00:16:31,450
functionality both from you know

00:16:29,410 --> 00:16:33,490
software that opensuse dog searched and

00:16:31,450 --> 00:16:35,650
the OBS web search but actually baking

00:16:33,490 --> 00:16:39,520
that ability to search into our tools

00:16:35,650 --> 00:16:41,980
into Yost into zipper so if you do a

00:16:39,520 --> 00:16:44,770
command you know maybe there should be a

00:16:41,980 --> 00:16:46,180
zipper CNF command not found zipper can

00:16:44,770 --> 00:16:48,640
tell you hey it's in this repository

00:16:46,180 --> 00:16:50,950
over them in the build service add it in

00:16:48,640 --> 00:16:52,780
there and if there's already talked

00:16:50,950 --> 00:16:54,070
about doing that for silly modules you

00:16:52,780 --> 00:16:56,620
know it's something we desperately need

00:16:54,070 --> 00:17:00,610
so users can find out where to get the

00:16:56,620 --> 00:17:01,780
stuff that they want adding that he

00:17:00,610 --> 00:17:03,420
asked of course if we're doing it in

00:17:01,780 --> 00:17:06,940
zipper we really should do it there too

00:17:03,420 --> 00:17:09,400
in the one-click install please just we

00:17:06,940 --> 00:17:11,020
need to fix everything there it needs to

00:17:09,400 --> 00:17:12,699
stop adding insane repositories to

00:17:11,020 --> 00:17:14,709
people's machines it shouldn't be doing

00:17:12,699 --> 00:17:17,230
stuff like PowerPC for Intel that's

00:17:14,709 --> 00:17:19,300
never going to work and it isn't a

00:17:17,230 --> 00:17:21,760
one-click install when it works best

00:17:19,300 --> 00:17:24,390
it's still nine so you know 9 + click

00:17:21,760 --> 00:17:27,150
install we need to you know stop

00:17:24,390 --> 00:17:29,040
just pretending that it's the fastest

00:17:27,150 --> 00:17:30,780
way of doing everything and I'll

00:17:29,040 --> 00:17:33,270
software opensuse dog search I mean this

00:17:30,780 --> 00:17:35,460
has already started moving because we

00:17:33,270 --> 00:17:36,720
had the workshop on Thursday so we

00:17:35,460 --> 00:17:39,300
already have people looking at software

00:17:36,720 --> 00:17:42,180
open City dog tidying it up simplifying

00:17:39,300 --> 00:17:43,920
it and we really should be removing home

00:17:42,180 --> 00:17:45,300
repos and develop a pose or making it

00:17:43,920 --> 00:17:46,920
incredibly hard to find it and

00:17:45,300 --> 00:17:52,800
incredibly obvious that you should be

00:17:46,920 --> 00:17:56,190
using the distribution first or we could

00:17:52,800 --> 00:17:57,930
just give up on packaging there is these

00:17:56,190 --> 00:18:03,300
wonderful things called snappy and flat

00:17:57,930 --> 00:18:05,760
pack in theory for some of these for

00:18:03,300 --> 00:18:09,350
some of the issues here so for example

00:18:05,760 --> 00:18:11,790
installing applications on top of leap

00:18:09,350 --> 00:18:14,130
there are there is some benefit there

00:18:11,790 --> 00:18:15,360
you know a leap user wants to have the

00:18:14,130 --> 00:18:17,430
latest shiniest new version of

00:18:15,360 --> 00:18:19,800
LibreOffice it's a heck of lot easier

00:18:17,430 --> 00:18:21,570
for us to put it in a flat pack with the

00:18:19,800 --> 00:18:26,340
gnome one time and all of that and have

00:18:21,570 --> 00:18:29,010
it installed but as I thought about this

00:18:26,340 --> 00:18:30,780
ad I put the slide together it's always

00:18:29,010 --> 00:18:33,120
going to be an edge case if we use it

00:18:30,780 --> 00:18:34,470
properly because you don't want to get

00:18:33,120 --> 00:18:36,750
to the point where everything in your

00:18:34,470 --> 00:18:40,050
distribution user-facing at least is in

00:18:36,750 --> 00:18:41,280
some nasty containerized beast and then

00:18:40,050 --> 00:18:43,980
you explain to users while you're

00:18:41,280 --> 00:18:46,980
minimal install is 40 gigabytes for 300

00:18:43,980 --> 00:18:48,450
packages and then there's an open SSL

00:18:46,980 --> 00:18:49,620
update and every one of those packages

00:18:48,450 --> 00:18:51,480
has to be updated and then it's

00:18:49,620 --> 00:18:56,340
certainly 40 gigabytes just to patch

00:18:51,480 --> 00:18:59,340
your machine it's not the best way of

00:18:56,340 --> 00:19:01,860
doing things but all of this stuff put

00:18:59,340 --> 00:19:03,450
together is a huge amount of work maybe

00:19:01,860 --> 00:19:05,390
you know we should go down this work we

00:19:03,450 --> 00:19:09,660
should try and fix as many many of these

00:19:05,390 --> 00:19:10,800
but there is a shortcut and you know at

00:19:09,660 --> 00:19:12,710
during the keynote we said you know

00:19:10,800 --> 00:19:15,600
which is people and our lovely swearing

00:19:12,710 --> 00:19:18,810
the easy option is to add your bloody

00:19:15,600 --> 00:19:20,550
packages to the distribution once

00:19:18,810 --> 00:19:23,190
they're there they're tested their

00:19:20,550 --> 00:19:25,800
integrated we have the tools we have the

00:19:23,190 --> 00:19:27,660
techniques we have the policies this is

00:19:25,800 --> 00:19:30,990
how we should be getting software to our

00:19:27,660 --> 00:19:33,330
users tumbleweed ously sorry tumbleweed

00:19:30,990 --> 00:19:36,940
in leap should have as many packages as

00:19:33,330 --> 00:19:40,940
we can support to all of our users

00:19:36,940 --> 00:19:42,559
we need to be doing that better even if

00:19:40,940 --> 00:19:44,179
we improve the other stuff we still need

00:19:42,559 --> 00:19:47,269
to be doing this a heck of a lot more

00:19:44,179 --> 00:19:52,100
and the best thing users can do to help

00:19:47,269 --> 00:19:55,580
us well they can help become maintained

00:19:52,100 --> 00:19:57,110
errs they can learn or they can bugger

00:19:55,580 --> 00:19:59,330
maintain us to try and get stuff in

00:19:57,110 --> 00:20:01,009
there the biggest bit of feedback I

00:19:59,330 --> 00:20:03,080
always hear is oh I didn't know anybody

00:20:01,009 --> 00:20:06,230
was using it I didn't know somebody

00:20:03,080 --> 00:20:08,509
wanted that package so please users if

00:20:06,230 --> 00:20:10,340
you're interested in a package go to the

00:20:08,509 --> 00:20:12,350
opensuse factory mailing list to try and

00:20:10,340 --> 00:20:15,559
find people to fight to package stuff

00:20:12,350 --> 00:20:17,240
try and learn to help we need to get

00:20:15,559 --> 00:20:20,809
more packages in there because that is

00:20:17,240 --> 00:20:24,879
the best smoothest and safest way of

00:20:20,809 --> 00:20:24,879
getting software in the hands of people

00:20:26,169 --> 00:20:34,279
so now kind of no less of the use of

00:20:29,240 --> 00:20:35,990
storing more the developer story why is

00:20:34,279 --> 00:20:39,070
this such a hard thing how have we got

00:20:35,990 --> 00:20:42,049
it where's where's the problem really

00:20:39,070 --> 00:20:45,049
well putting packages into the

00:20:42,049 --> 00:20:47,809
distribution is too hard everybody says

00:20:45,049 --> 00:20:52,909
that ever even me I fit as well it's

00:20:47,809 --> 00:20:54,860
sometimes true and there is some truth

00:20:52,909 --> 00:20:59,570
to that it's not trivial putting

00:20:54,860 --> 00:21:01,000
something in a distribution but when you

00:20:59,570 --> 00:21:03,649
compared to what we're doing right now

00:21:01,000 --> 00:21:05,360
this ends up actually being easier than

00:21:03,649 --> 00:21:07,909
the mess we're producing right now with

00:21:05,360 --> 00:21:09,950
our current way of doing things because

00:21:07,909 --> 00:21:13,490
if you think of for example the factory

00:21:09,950 --> 00:21:14,929
development process this is how a

00:21:13,490 --> 00:21:17,600
package goes into factory it ends up in

00:21:14,929 --> 00:21:20,539
tumbleweed right now every single one of

00:21:17,600 --> 00:21:23,360
these steps was designed because our

00:21:20,539 --> 00:21:26,299
developers are lazy and we want to make

00:21:23,360 --> 00:21:28,309
the next step less work and have less

00:21:26,299 --> 00:21:30,649
work to do in the future we have the

00:21:28,309 --> 00:21:33,049
whole the first submission is reviewed

00:21:30,649 --> 00:21:34,250
by a whole bunch of bots because we

00:21:33,049 --> 00:21:37,309
don't want to be wasting our time

00:21:34,250 --> 00:21:39,049
reviewing for trivial issues we pre

00:21:37,309 --> 00:21:41,389
integrate test everything in staging in

00:21:39,049 --> 00:21:43,519
open QA because we don't want to be

00:21:41,389 --> 00:21:45,220
bothered with having to pick up a whole

00:21:43,519 --> 00:21:47,330
mess of a complicated distribution

00:21:45,220 --> 00:21:48,710
mangling of you know package from

00:21:47,330 --> 00:21:50,809
package be it

00:21:48,710 --> 00:21:53,510
crashing when it ends up in the

00:21:50,809 --> 00:21:55,669
distribution at the end we only we've

00:21:53,510 --> 00:21:58,159
menu review you know what we have to do

00:21:55,669 --> 00:22:01,039
when we have to with the policies that

00:21:58,159 --> 00:22:03,020
make sense so factory can be kept clean

00:22:01,039 --> 00:22:05,600
consistent and moving as fast as it can

00:22:03,020 --> 00:22:07,760
and then we QA test everything as much

00:22:05,600 --> 00:22:09,380
as possible as often as possible so we

00:22:07,760 --> 00:22:11,179
have as few users moaning about stuff

00:22:09,380 --> 00:22:13,220
being broken all of this is actually to

00:22:11,179 --> 00:22:16,730
save us work well we put something in a

00:22:13,220 --> 00:22:18,529
developer we skip every bit of this so

00:22:16,730 --> 00:22:23,299
every problem that this was designed to

00:22:18,529 --> 00:22:27,110
solve is totally an ugly bypassed and in

00:22:23,299 --> 00:22:29,929
fact it produces more problems because

00:22:27,110 --> 00:22:32,390
devoted the devel project isn't just a

00:22:29,929 --> 00:22:33,470
case of oh it's a nice convenient place

00:22:32,390 --> 00:22:35,870
that there are a few things before it

00:22:33,470 --> 00:22:38,929
goes into factory every upstream is

00:22:35,870 --> 00:22:40,370
different KDE have different paces of

00:22:38,929 --> 00:22:43,250
doing things gnome have different places

00:22:40,370 --> 00:22:45,230
of doing things so the up streams all

00:22:43,250 --> 00:22:47,360
have different requirements and we need

00:22:45,230 --> 00:22:48,860
to be agile enough to be able to cope

00:22:47,360 --> 00:22:52,669
with that build it slightly differently

00:22:48,860 --> 00:22:53,990
have different processes are teams you

00:22:52,669 --> 00:22:55,279
know most of our teams are volunteers

00:22:53,990 --> 00:22:57,230
now we want to make sure that those

00:22:55,279 --> 00:22:59,330
teams are using processes and techniques

00:22:57,230 --> 00:23:01,039
that make sense to them and fit their

00:22:59,330 --> 00:23:03,559
needs and fit you know how much time

00:23:01,039 --> 00:23:05,210
they can volunteer so this is why we

00:23:03,559 --> 00:23:07,880
have the development group concept so we

00:23:05,210 --> 00:23:09,590
can have lots of different teams in the

00:23:07,880 --> 00:23:13,240
opensuse project working at their own

00:23:09,590 --> 00:23:16,220
pace in their own way and hopefully

00:23:13,240 --> 00:23:17,899
somewhat self moderating making sure

00:23:16,220 --> 00:23:20,059
that their part that they know about is

00:23:17,899 --> 00:23:22,130
very very good and then they throw it

00:23:20,059 --> 00:23:23,899
towards factory hit that process there

00:23:22,130 --> 00:23:28,000
where we then pull the whole thing

00:23:23,899 --> 00:23:31,340
together when you when you just do

00:23:28,000 --> 00:23:33,940
develop projects on their own you're

00:23:31,340 --> 00:23:36,080
building a castle on shifting sounds

00:23:33,940 --> 00:23:39,140
your project is moving at the pace that

00:23:36,080 --> 00:23:40,789
you know your projects moving in but you

00:23:39,140 --> 00:23:42,470
don't know how fast factories moving you

00:23:40,789 --> 00:23:43,700
don't know how fast that other projects

00:23:42,470 --> 00:23:45,020
moving that's going to change something

00:23:43,700 --> 00:23:48,110
in factory that's going to change your

00:23:45,020 --> 00:23:50,029
thing you might have everything working

00:23:48,110 --> 00:23:53,149
wonderfully in your develop roject you

00:23:50,029 --> 00:23:55,970
might be perfect but is everybody else

00:23:53,149 --> 00:23:58,010
and if you're working in isolation

00:23:55,970 --> 00:23:59,680
you're just going to end up causing

00:23:58,010 --> 00:24:01,900
yourself more hassle than the long

00:23:59,680 --> 00:24:03,430
when you maybe do eventually put it into

00:24:01,900 --> 00:24:05,650
factory and you do eventually submit it

00:24:03,430 --> 00:24:07,960
to a distribution and then it all goes

00:24:05,650 --> 00:24:09,520
horribly horribly wrong this was a kind

00:24:07,960 --> 00:24:11,530
of stuff that we took ended up coming up

00:24:09,520 --> 00:24:13,840
in the conversation with the KDE neon

00:24:11,530 --> 00:24:15,970
guys earlier in the week you know

00:24:13,840 --> 00:24:17,950
they're they're doing something very

00:24:15,970 --> 00:24:20,530
similar to a traditional open sea to

00:24:17,950 --> 00:24:22,420
develop project everything's fine for

00:24:20,530 --> 00:24:23,740
them now they're going to have to rebase

00:24:22,420 --> 00:24:25,780
against the new ubuntu version in the

00:24:23,740 --> 00:24:28,300
future that's going to be a huge

00:24:25,780 --> 00:24:29,860
undertaking the reason we have the

00:24:28,300 --> 00:24:32,680
factory process the reason we do

00:24:29,860 --> 00:24:35,950
tumbleweed so this can just be done in

00:24:32,680 --> 00:24:38,320
small chunks at our own pace at our own

00:24:35,950 --> 00:24:41,050
time using our own processes so you

00:24:38,320 --> 00:24:43,000
avoid big calamitous messes as a

00:24:41,050 --> 00:24:47,020
developer where you have to spend weeks

00:24:43,000 --> 00:24:52,120
and weeks picking out the mess so please

00:24:47,020 --> 00:24:54,100
stop misusing devel projects we should

00:24:52,120 --> 00:24:57,580
be using devel projects to develop for

00:24:54,100 --> 00:25:01,000
our distributions we don't support 13-1

00:24:57,580 --> 00:25:02,560
anymore evergreen maintains what it can

00:25:01,000 --> 00:25:05,230
but there's no expectation there should

00:25:02,560 --> 00:25:10,300
be no expectation for our users to have

00:25:05,230 --> 00:25:12,220
shiny latest new Python on open 13 113 2

00:25:10,300 --> 00:25:15,370
is going to be end of life in less than

00:25:12,220 --> 00:25:18,480
a year why are we still building the

00:25:15,370 --> 00:25:25,030
latest in Grayson pison on top of it

00:25:18,480 --> 00:25:26,440
button okay the battery right these are

00:25:25,030 --> 00:25:28,930
the parts of modules that they're devour

00:25:26,440 --> 00:25:30,610
language python where the pricing is

00:25:28,930 --> 00:25:33,370
actually building is worse than this I

00:25:30,610 --> 00:25:36,070
couldn't fit it all on the screen so

00:25:33,370 --> 00:25:37,990
please build only what you need in the

00:25:36,070 --> 00:25:43,390
devel project the one thing you should

00:25:37,990 --> 00:25:45,400
always have is factoring tumbleweed the

00:25:43,390 --> 00:25:48,070
next thing obviously we're developing

00:25:45,400 --> 00:25:49,510
bleep voltage cheat or two now there is

00:25:48,070 --> 00:25:52,330
the possibility that some things might

00:25:49,510 --> 00:25:54,610
want to skip ahead or jump in a move

00:25:52,330 --> 00:25:57,370
from a develop projects straight into

00:25:54,610 --> 00:26:02,230
their adding the protein to door to by

00:25:57,370 --> 00:26:04,210
adding Slee 12s be next you know is the

00:26:02,230 --> 00:26:06,730
only three things that should be in a

00:26:04,210 --> 00:26:08,380
developer eject because that's the only

00:26:06,730 --> 00:26:09,550
three targets where something might end

00:26:08,380 --> 00:26:11,200
up being sent to the submit request

00:26:09,550 --> 00:26:12,669
they're the only things we're building

00:26:11,200 --> 00:26:15,230
stuff for

00:26:12,669 --> 00:26:17,299
everything else is not suitable for a

00:26:15,230 --> 00:26:18,739
developer it's more work for you to

00:26:17,299 --> 00:26:21,109
maintain it it's more work for you to

00:26:18,739 --> 00:26:23,480
fix it when it goes wrong and it's more

00:26:21,109 --> 00:26:25,759
work for OBS to build it why are we

00:26:23,480 --> 00:26:28,940
wasting so much time and so much make

00:26:25,759 --> 00:26:32,960
effort on something that ends up being a

00:26:28,940 --> 00:26:34,279
bad thing fri uses in any way and this

00:26:32,960 --> 00:26:37,009
is kind of a labeling the point a little

00:26:34,279 --> 00:26:40,190
bit but tumble we today will become lead

00:26:37,009 --> 00:26:41,950
43 and slee 13 in the future if we

00:26:40,190 --> 00:26:44,450
follow this process now we move along

00:26:41,950 --> 00:26:46,309
after the pace of tumbleweed which is at

00:26:44,450 --> 00:26:48,350
the pace of contribution so we can set

00:26:46,309 --> 00:26:52,460
the pace that suits us with our time as

00:26:48,350 --> 00:26:54,309
volunteers or as busy susan employees we

00:26:52,460 --> 00:26:57,109
can still avoid chaos in the future

00:26:54,309 --> 00:26:58,820
leaps benefits from that sleep benefits

00:26:57,109 --> 00:27:01,129
from that it's way easy to pull the

00:26:58,820 --> 00:27:02,389
packages from being in tumbleweed for a

00:27:01,129 --> 00:27:06,289
couple of weeks and then shove them into

00:27:02,389 --> 00:27:09,230
leap and keeping the packages only in a

00:27:06,289 --> 00:27:10,850
developer hide major integration issues

00:27:09,230 --> 00:27:13,730
and then you have a huge and a hard time

00:27:10,850 --> 00:27:15,049
getting everything working now I know

00:27:13,730 --> 00:27:17,720
I'm asking everybody to do an awful lot

00:27:15,049 --> 00:27:21,529
more work or maybe seem like to do more

00:27:17,720 --> 00:27:22,820
work but you're not alone we know what

00:27:21,529 --> 00:27:24,320
we're doing with this we've been doing

00:27:22,820 --> 00:27:26,619
it for a very long time we have the

00:27:24,320 --> 00:27:29,419
experts we have the community around it

00:27:26,619 --> 00:27:31,970
opensuse factory is why you should be

00:27:29,419 --> 00:27:34,879
discussing adding new adding new

00:27:31,970 --> 00:27:36,080
packages removing packages if you're

00:27:34,879 --> 00:27:37,669
having issues and actually building a

00:27:36,080 --> 00:27:39,850
package opensuse packaging is where you

00:27:37,669 --> 00:27:44,179
can get help on the nitty-gritty of that

00:27:39,850 --> 00:27:46,009
we have our see list and obviously the

00:27:44,179 --> 00:27:47,480
opensuse release team of little bit

00:27:46,009 --> 00:27:50,799
domick in the max keeping order this

00:27:47,480 --> 00:27:54,799
clean and tidy in leap and in tumbleweed

00:27:50,799 --> 00:27:57,379
now every time I talk to anybody about

00:27:54,799 --> 00:28:01,700
this I hear the same thing our policies

00:27:57,379 --> 00:28:03,289
are too strict but they exist for damn

00:28:01,700 --> 00:28:04,730
good reasons they've all been bought

00:28:03,289 --> 00:28:06,499
they've all come from the fact that

00:28:04,730 --> 00:28:10,220
we've been doing this now for 10 years

00:28:06,499 --> 00:28:12,139
or longer and there's every single one

00:28:10,220 --> 00:28:14,239
of those rules exists for either a good

00:28:12,139 --> 00:28:16,249
engineering reason of a good community

00:28:14,239 --> 00:28:18,529
reason and the ones that I hear most

00:28:16,249 --> 00:28:19,940
people object to are the ones that are

00:28:18,529 --> 00:28:21,559
therefore actually because of the

00:28:19,940 --> 00:28:23,029
community you know as developers it's

00:28:21,559 --> 00:28:24,419
probably quite easy for as we look at it

00:28:23,029 --> 00:28:26,249
and we say okay

00:28:24,419 --> 00:28:29,970
I can see how that makes the code a high

00:28:26,249 --> 00:28:31,980
quality the policy makes sense but we're

00:28:29,970 --> 00:28:34,109
an open source project and if we're not

00:28:31,980 --> 00:28:36,450
doing stuff like making sure that our

00:28:34,109 --> 00:28:39,090
change logs are easy easy to read easily

00:28:36,450 --> 00:28:41,309
possible spec files that are actually

00:28:39,090 --> 00:28:42,600
sane so somebody else someday might be

00:28:41,309 --> 00:28:45,350
able to come over and pick it up and

00:28:42,600 --> 00:28:47,789
read it and use it and make it better

00:28:45,350 --> 00:28:49,200
those in some respects the more

00:28:47,789 --> 00:28:50,609
important policies because they're the

00:28:49,200 --> 00:28:54,869
ones that actually make opensuse

00:28:50,609 --> 00:28:58,259
sustainable in the long term so yes our

00:28:54,869 --> 00:29:00,299
policies do exist for a reason sometimes

00:28:58,259 --> 00:29:03,570
you might not necessarily get the logic

00:29:00,299 --> 00:29:04,859
behind it but they're not crazy they're

00:29:03,570 --> 00:29:07,049
not strict just for the sake of being

00:29:04,859 --> 00:29:08,429
strict this their strict for the sake of

00:29:07,049 --> 00:29:09,960
actually making it easier in the long

00:29:08,429 --> 00:29:13,710
term to keep the community moving

00:29:09,960 --> 00:29:14,909
forward and ultimately there they should

00:29:13,710 --> 00:29:16,889
have an awful lot in common with the

00:29:14,909 --> 00:29:19,529
ones use internally as souza for suse

00:29:16,889 --> 00:29:21,059
linux enterprise that you know it that's

00:29:19,529 --> 00:29:23,100
a very very good quality distribution

00:29:21,059 --> 00:29:25,259
they know what they're doing we know

00:29:23,100 --> 00:29:28,859
what we're doing we work very very well

00:29:25,259 --> 00:29:31,679
with that but no opensuse policy is set

00:29:28,859 --> 00:29:33,299
in stone we can discuss them we can

00:29:31,679 --> 00:29:44,039
adapt them if there is a sensible reason

00:29:33,299 --> 00:29:46,830
to do so let's talk about it now slides

00:29:44,039 --> 00:29:49,999
all right there we go I want to see as

00:29:46,830 --> 00:29:52,919
much as we can in the distribution but

00:29:49,999 --> 00:29:55,859
being a realist I know we can't put

00:29:52,919 --> 00:29:57,509
everything in their legal reasons

00:29:55,859 --> 00:29:59,070
engineering reasons and sometimes

00:29:57,509 --> 00:30:00,899
practical reasons have just wanted to

00:29:59,070 --> 00:30:03,179
offer something in a slightly different

00:30:00,899 --> 00:30:04,799
way doesn't mean that we can put

00:30:03,179 --> 00:30:06,629
everything in there we need to get

00:30:04,799 --> 00:30:08,340
better than what we've been doing but

00:30:06,629 --> 00:30:13,070
sometimes additional repos have to be

00:30:08,340 --> 00:30:15,690
done right and the way souza builds slee

00:30:13,070 --> 00:30:17,629
is a model we really should be

00:30:15,690 --> 00:30:22,440
considering for some of our stuff

00:30:17,629 --> 00:30:24,239
because they generally don't with the

00:30:22,440 --> 00:30:26,999
exception of package hub generally don't

00:30:24,239 --> 00:30:29,789
build a day ad on in a separate project

00:30:26,999 --> 00:30:31,859
and just hope it magically works there

00:30:29,789 --> 00:30:34,590
is inside the internal Souza belt

00:30:31,859 --> 00:30:36,450
service there is one big sleep project

00:30:34,590 --> 00:30:37,299
which is very very similar to our big

00:30:36,450 --> 00:30:40,119
factory

00:30:37,299 --> 00:30:41,889
and everything is built there and tested

00:30:40,119 --> 00:30:43,629
there and consistently made sure that it

00:30:41,889 --> 00:30:45,970
works together all cut from the same

00:30:43,629 --> 00:30:48,580
cloth and then the products are

00:30:45,970 --> 00:30:50,220
separated out and distributed

00:30:48,580 --> 00:30:54,970
differently as different repositories

00:30:50,220 --> 00:30:56,499
this works very very well because you

00:30:54,970 --> 00:30:58,059
make sure that everything's been built

00:30:56,499 --> 00:30:59,889
together it's been designed to work

00:30:58,059 --> 00:31:01,539
together it's more likely to be very

00:30:59,889 --> 00:31:03,850
easy that a customer can then add any

00:31:01,539 --> 00:31:06,009
combination of those add-ons or modules

00:31:03,850 --> 00:31:08,110
together and the thing is going to work

00:31:06,009 --> 00:31:11,649
it's a heck of a lot easier to test it

00:31:08,110 --> 00:31:13,539
together and also because ultimately all

00:31:11,649 --> 00:31:16,570
that carving up takes a little bit of

00:31:13,539 --> 00:31:18,269
work you know there's a little bit of

00:31:16,570 --> 00:31:21,070
work involved in separating this stuff

00:31:18,269 --> 00:31:24,249
it makes sure that each extension or

00:31:21,070 --> 00:31:28,659
module or add-on is as small as it needs

00:31:24,249 --> 00:31:30,100
to be and no bigger which is you know a

00:31:28,659 --> 00:31:31,450
very good thing from an engineering

00:31:30,100 --> 00:31:33,249
perspective and it also make sure that

00:31:31,450 --> 00:31:34,720
they only move when they need to the

00:31:33,249 --> 00:31:38,289
last times you move it the less times it

00:31:34,720 --> 00:31:41,259
breaks so I think when opensuse comes to

00:31:38,289 --> 00:31:42,340
thinking about add-ons we really should

00:31:41,259 --> 00:31:44,049
only be thinking about it when there's

00:31:42,340 --> 00:31:45,850
no other choice it should only it should

00:31:44,049 --> 00:31:47,859
be in the distribution by default

00:31:45,850 --> 00:31:49,539
whenever we can do it it's less

00:31:47,859 --> 00:31:51,759
complicated it's easier for our users

00:31:49,539 --> 00:31:54,489
it's easier for us to maintain in the

00:31:51,759 --> 00:31:56,230
long run so if a tumbleweed kind of my

00:31:54,489 --> 00:31:57,730
personal feeling is we should start with

00:31:56,230 --> 00:31:59,320
the concept of no add-ons there

00:31:57,730 --> 00:32:01,840
shouldn't be any need to add an

00:31:59,320 --> 00:32:03,460
additional repo for tumbleweed because

00:32:01,840 --> 00:32:05,109
the whole thing is always rolling we can

00:32:03,460 --> 00:32:08,919
always submit something new we can

00:32:05,109 --> 00:32:10,929
always change it so why bother the

00:32:08,919 --> 00:32:12,730
exception of course being proprietary

00:32:10,929 --> 00:32:14,080
kernel modules which are in a

00:32:12,730 --> 00:32:16,450
potentially technically and legally

00:32:14,080 --> 00:32:19,119
issue how to put in there and obviously

00:32:16,450 --> 00:32:23,289
sister projects like pac-man where we

00:32:19,119 --> 00:32:26,499
can't do that either but Philippe yes I

00:32:23,289 --> 00:32:29,259
think there is a case for stable project

00:32:26,499 --> 00:32:30,999
possibly you know users might want a

00:32:29,259 --> 00:32:34,989
stable version something nearer than

00:32:30,999 --> 00:32:36,700
what's been released that's really the

00:32:34,989 --> 00:32:38,859
only use case I think of where we should

00:32:36,700 --> 00:32:42,159
be spending to lot of effort thinking

00:32:38,859 --> 00:32:45,639
about this back porting new versions of

00:32:42,159 --> 00:32:48,609
stuff for leap uses and if we do do this

00:32:45,639 --> 00:32:51,070
it should be a small tightly defined

00:32:48,609 --> 00:32:54,309
Reaper just what the user

00:32:51,070 --> 00:32:56,610
to get what the user wants not every

00:32:54,309 --> 00:32:59,139
single library not every single module

00:32:56,610 --> 00:33:01,750
just the bits that are needed to get the

00:32:59,139 --> 00:33:07,149
user happy and of course it should only

00:33:01,750 --> 00:33:09,700
be built philippe because 0 13 113 2

00:33:07,149 --> 00:33:13,960
about sending support soon and slee

00:33:09,700 --> 00:33:16,149
already has package hub from a

00:33:13,960 --> 00:33:17,669
conceptual point of view I kind of see

00:33:16,149 --> 00:33:21,130
it working something like this maybe

00:33:17,669 --> 00:33:23,950
there's a develop project in tumbleweed

00:33:21,130 --> 00:33:27,429
there's already pizen that's been

00:33:23,950 --> 00:33:28,899
submitted and then we back port it take

00:33:27,429 --> 00:33:32,350
it out again have it at a stable

00:33:28,899 --> 00:33:33,940
repository full for leap because then

00:33:32,350 --> 00:33:37,929
from a user's perspective everything

00:33:33,940 --> 00:33:40,480
becomes easy again they have leap they

00:33:37,929 --> 00:33:42,399
add a reaper and because that repo is

00:33:40,480 --> 00:33:44,590
only what needs to be to get the thing

00:33:42,399 --> 00:33:46,179
in the hands of the users zippered up

00:33:44,590 --> 00:33:49,769
should be a perfectly sane and sensible

00:33:46,179 --> 00:33:52,090
way of updating it so in theory that

00:33:49,769 --> 00:33:54,100
frees of develop objects is so they're

00:33:52,090 --> 00:33:56,169
only built for development again as they

00:33:54,100 --> 00:33:58,990
should be so we're not wasting our time

00:33:56,169 --> 00:34:00,519
worrying about build failures and

00:33:58,990 --> 00:34:01,870
architectures we don't support or build

00:34:00,519 --> 00:34:05,409
Fraley's against distributions we don't

00:34:01,870 --> 00:34:07,059
support it gives users a nice clear easy

00:34:05,409 --> 00:34:10,089
way of saying okay that's a stable repo

00:34:07,059 --> 00:34:12,790
I can use that it makes it clear to

00:34:10,089 --> 00:34:14,919
users which ones are safe they tidies up

00:34:12,790 --> 00:34:16,210
a lot of mess and it should be a heck of

00:34:14,919 --> 00:34:17,619
a lot easier for the test especially

00:34:16,210 --> 00:34:20,950
because i want to put everything in open

00:34:17,619 --> 00:34:25,629
QA but this isn't a perfect concept

00:34:20,950 --> 00:34:28,300
there are still problems because how do

00:34:25,629 --> 00:34:30,639
we define small and tight and tiny you

00:34:28,300 --> 00:34:32,409
know how small is it really we haven't

00:34:30,639 --> 00:34:34,089
got any policies for that we haven't got

00:34:32,409 --> 00:34:35,109
any concept of that we need to think if

00:34:34,089 --> 00:34:37,990
we're going to do this we need to think

00:34:35,109 --> 00:34:39,970
about that and being exactly sure how we

00:34:37,990 --> 00:34:42,099
define what is narrow how do we review

00:34:39,970 --> 00:34:44,500
it how do we make sure so we can

00:34:42,099 --> 00:34:47,020
actually do this sustainable for for

00:34:44,500 --> 00:34:48,700
several years how do we solve

00:34:47,020 --> 00:34:50,710
dependencies between repos how do we

00:34:48,700 --> 00:34:52,419
make sure that someone adding stable a

00:34:50,710 --> 00:34:55,000
and stable be doesn't clash with each

00:34:52,419 --> 00:34:56,500
other how do we handle upgrades how do

00:34:55,000 --> 00:34:58,630
we handle versions of leap the change

00:34:56,500 --> 00:35:00,819
how do we handle versions of the stable

00:34:58,630 --> 00:35:02,650
repository the change do we end up with

00:35:00,819 --> 00:35:04,540
maintenance do we end up with testing

00:35:02,650 --> 00:35:04,860
and the more I think about these

00:35:04,540 --> 00:35:06,480
problems

00:35:04,860 --> 00:35:07,770
oh I go back to my earlier point adding

00:35:06,480 --> 00:35:09,390
packages that the distribution is

00:35:07,770 --> 00:35:11,490
actually easier than figuring this mess

00:35:09,390 --> 00:35:13,290
out but this is the mess we have to

00:35:11,490 --> 00:35:16,020
figure out if edition of apaza Tories

00:35:13,290 --> 00:35:22,230
are going to be sensibly usable by users

00:35:16,020 --> 00:35:26,990
in the long term so to recap maintainer

00:35:22,230 --> 00:35:30,320
please put your packages in the district

00:35:26,990 --> 00:35:32,040
Jesus please stop using develop projects

00:35:30,320 --> 00:35:35,280
because it's going to break on you

00:35:32,040 --> 00:35:37,440
sooner or later staple repositories

00:35:35,280 --> 00:35:39,420
might be a good idea but it's going to

00:35:37,440 --> 00:35:43,230
take a heck of a lot of work a lot of

00:35:39,420 --> 00:35:45,030
discussion a lot of planning but if we

00:35:43,230 --> 00:35:46,380
want to keep that concept of additional

00:35:45,030 --> 00:35:49,950
repositories with people can sort of

00:35:46,380 --> 00:35:51,450
Lego brick build their distro we you

00:35:49,950 --> 00:35:55,010
know let's collectively get together and

00:35:51,450 --> 00:36:02,910
do it we can't carry on like this

00:35:55,010 --> 00:36:10,650
questions a starless laughs can somebody

00:36:02,910 --> 00:36:12,380
get him a microphone thank you well the

00:36:10,650 --> 00:36:15,060
newest ago when we created the

00:36:12,380 --> 00:36:17,610
depositories we have been thinking about

00:36:15,060 --> 00:36:20,340
the idea that for example if you want to

00:36:17,610 --> 00:36:22,380
lightest that you don't have to

00:36:20,340 --> 00:36:25,830
install a factory but you're going to

00:36:22,380 --> 00:36:30,120
subscribe to the repository but now it

00:36:25,830 --> 00:36:32,190
looks like a bad idea I think that we we

00:36:30,120 --> 00:36:34,860
should drop most of the developer

00:36:32,190 --> 00:36:38,070
histories and keep one developers it

00:36:34,860 --> 00:36:41,660
like staging and make some reasonable

00:36:38,070 --> 00:36:45,600
exceptions like genomics or a soul

00:36:41,660 --> 00:36:50,610
because because in fact there is no

00:36:45,600 --> 00:36:55,470
reason to subscribe leave packages to to

00:36:50,610 --> 00:36:59,850
the to the repository which because it

00:36:55,470 --> 00:37:00,930
cannot break anything yeah I mean yeah

00:36:59,850 --> 00:37:02,400
you're right you can't break anything

00:37:00,930 --> 00:37:04,260
and I'm actually really thinking more

00:37:02,400 --> 00:37:05,640
bleep users so we're taking you know the

00:37:04,260 --> 00:37:07,380
version of something in a developer

00:37:05,640 --> 00:37:09,690
posit Ori before it's even cost a

00:37:07,380 --> 00:37:13,930
factory and then breaking everything

00:37:09,690 --> 00:37:17,079
that okay

00:37:13,930 --> 00:37:20,200
so one reason there is the idea of flat

00:37:17,079 --> 00:37:22,599
packs and whatever is one specific

00:37:20,200 --> 00:37:25,030
example that I'm not seeing that your

00:37:22,599 --> 00:37:27,700
proposal is solving suppose you want to

00:37:25,030 --> 00:37:30,250
support http/2 right so what do you need

00:37:27,700 --> 00:37:33,339
in order to be really HTTP to compliant

00:37:30,250 --> 00:37:35,260
is a more recent version of openssl than

00:37:33,339 --> 00:37:37,210
almost any stable distribution shipping

00:37:35,260 --> 00:37:39,760
which is one or two most modern

00:37:37,210 --> 00:37:41,740
distributions do have that but usually

00:37:39,760 --> 00:37:43,900
on service you're running sort of stable

00:37:41,740 --> 00:37:45,250
distribution for a reason so how you

00:37:43,900 --> 00:37:47,290
gonna solve that because open access

00:37:45,250 --> 00:37:49,990
have a very fundamental library now with

00:37:47,290 --> 00:37:52,690
let's say an engine takes comp out side

00:37:49,990 --> 00:37:54,220
and an phat pack with it's only open SSL

00:37:52,690 --> 00:37:56,319
that's easy but of course it's one do

00:37:54,220 --> 00:38:00,040
you want to avoid but how are you going

00:37:56,319 --> 00:38:01,930
to solve that well if there really is a

00:38:00,040 --> 00:38:04,240
use case for something like that I think

00:38:01,930 --> 00:38:06,339
there is I mean with leap we don't

00:38:04,240 --> 00:38:08,020
follow the traditional owed everything

00:38:06,339 --> 00:38:10,420
must be frozen after the point of

00:38:08,020 --> 00:38:13,569
release we can do version upgrades in

00:38:10,420 --> 00:38:16,510
the maintenance model maybe we should be

00:38:13,569 --> 00:38:18,430
doing that for openssl but you know we

00:38:16,510 --> 00:38:20,230
do have that flexibility plus with an

00:38:18,430 --> 00:38:24,190
annual release cycle it's not actually

00:38:20,230 --> 00:38:26,170
that far away to the next leap 42x when

00:38:24,190 --> 00:38:27,849
that could be done so in the case of

00:38:26,170 --> 00:38:30,160
tumbleweed it moves right through it's

00:38:27,849 --> 00:38:31,859
already there in fact in a example i

00:38:30,160 --> 00:38:34,480
think was put in a few months ago and

00:38:31,859 --> 00:38:37,660
it's going to be there now in lead 42 in

00:38:34,480 --> 00:38:39,040
november so yeah i think with the way

00:38:37,660 --> 00:38:41,040
we've already got the model there we

00:38:39,040 --> 00:38:44,650
don't brush into that issue too much

00:38:41,040 --> 00:38:50,049
when we do the backboards or flat packs

00:38:44,650 --> 00:38:52,900
are the solution to that console so i'm

00:38:50,049 --> 00:38:55,990
in fully agreement with your analysis

00:38:52,900 --> 00:38:57,970
and some part of your solution like

00:38:55,990 --> 00:39:00,849
pushing more packages to tamper with

00:38:57,970 --> 00:39:04,109
which is definitely something we should

00:39:00,849 --> 00:39:08,230
do the only problem with that is that

00:39:04,109 --> 00:39:11,380
for more or less long period of time we

00:39:08,230 --> 00:39:14,680
are keeping leap user out of the loop if

00:39:11,380 --> 00:39:17,380
for instance we push in a package in

00:39:14,680 --> 00:39:22,359
tumbleweed one months after 42 the two

00:39:17,380 --> 00:39:25,150
is released we have to handle a user on

00:39:22,359 --> 00:39:29,740
leap and I wondering

00:39:25,150 --> 00:39:34,829
if we should try to expand or tune the

00:39:29,740 --> 00:39:38,160
concept of packaged up meaning having

00:39:34,829 --> 00:39:42,220
not only backboards but new packages

00:39:38,160 --> 00:39:46,930
available as a maintenance project for

00:39:42,220 --> 00:39:49,029
Lee so that when maintainer Sphinx push

00:39:46,930 --> 00:39:53,230
packages to tumbleweeds they can also

00:39:49,029 --> 00:39:59,289
push the same packages build stable on

00:39:53,230 --> 00:40:04,450
this package up force for Foley repo it

00:39:59,289 --> 00:40:07,990
would be it won couldn't move we could

00:40:04,450 --> 00:40:10,420
do automated check on it and people

00:40:07,990 --> 00:40:12,490
would be always able to revert to this

00:40:10,420 --> 00:40:15,609
version if there is a new version coming

00:40:12,490 --> 00:40:18,490
out a bit like an update repo but for

00:40:15,609 --> 00:40:20,859
new packages and not just for new

00:40:18,490 --> 00:40:25,660
version of packages which arm lip which

00:40:20,859 --> 00:40:26,950
is i would say another problem i totally

00:40:25,660 --> 00:40:28,359
agree with you i mean that's actually

00:40:26,950 --> 00:40:30,880
one of the reasons why i put these here

00:40:28,359 --> 00:40:32,770
could kind of you know if we do this in

00:40:30,880 --> 00:40:34,630
this model that would enable that and

00:40:32,770 --> 00:40:40,630
but i'd love Scott's opinion on that

00:40:34,630 --> 00:40:42,279
just to put him on the spot actually I'm

00:40:40,630 --> 00:40:47,619
glad you brought this slide up because i

00:40:42,279 --> 00:40:51,190
had a correction for you instead of

00:40:47,619 --> 00:40:53,799
building against this lee 12 sbx if you

00:40:51,190 --> 00:40:55,359
want to build packages for sleep what we

00:40:53,799 --> 00:40:59,829
recommend now is to build against the

00:40:55,359 --> 00:41:02,349
opensuse backports colon Slee 12 because

00:40:59,829 --> 00:41:04,000
that's where we want to like for

00:41:02,349 --> 00:41:07,869
basically some of many of the same

00:41:04,000 --> 00:41:09,670
reasons that Richard talked about why it

00:41:07,869 --> 00:41:13,180
makes sense to get more things into

00:41:09,670 --> 00:41:14,650
factory into tumbleweed we found as we

00:41:13,180 --> 00:41:17,920
are trying to investigate the best ways

00:41:14,650 --> 00:41:25,480
to deliver packages for our enterprise

00:41:17,920 --> 00:41:27,730
users from OBS its it'll be better to

00:41:25,480 --> 00:41:29,349
build your package it could be much

00:41:27,730 --> 00:41:33,190
better to build your packages against

00:41:29,349 --> 00:41:36,400
this back parts project in for silly 12

00:41:33,190 --> 00:41:38,250
so that should be actually backports

00:41:36,400 --> 00:41:41,020
forget yeah okay

00:41:38,250 --> 00:41:42,880
another comment ahead is as I was also

00:41:41,020 --> 00:41:47,080
doing a bit of Investigation I also

00:41:42,880 --> 00:41:49,470
happen to look at the Python project and

00:41:47,080 --> 00:41:51,880
in Richard and I didn't even talk about

00:41:49,470 --> 00:41:54,250
his presentation or anything and I

00:41:51,880 --> 00:41:55,900
presented something quite similar in the

00:41:54,250 --> 00:41:59,260
talk I did about backports yesterday

00:41:55,900 --> 00:42:03,970
some of the same concepts but one thing

00:41:59,260 --> 00:42:05,890
you didn't mention we're pushing things

00:42:03,970 --> 00:42:07,930
into factory makes it easier for

00:42:05,890 --> 00:42:09,940
packagers I believe from what I've seen

00:42:07,930 --> 00:42:13,300
in the build service is that in like in

00:42:09,940 --> 00:42:16,540
the Python project they're doing source

00:42:13,300 --> 00:42:19,240
copies or source links from other devil

00:42:16,540 --> 00:42:22,780
projects because of dependencies they

00:42:19,240 --> 00:42:25,920
have and those packages that they have

00:42:22,780 --> 00:42:30,369
that their source copying in are not in

00:42:25,920 --> 00:42:32,380
tumbleweed so they need to maintain a

00:42:30,369 --> 00:42:34,990
copy within their own project so they

00:42:32,380 --> 00:42:36,880
can build the package now that could

00:42:34,990 --> 00:42:38,830
make it easier for them to build if it

00:42:36,880 --> 00:42:42,220
was just in tumbleweed to begin with and

00:42:38,830 --> 00:42:44,410
not only that because those dependent

00:42:42,220 --> 00:42:48,220
packages aren't in tumbleweed it blocks

00:42:44,410 --> 00:42:50,710
them from releasing their package into

00:42:48,220 --> 00:42:52,630
tumbleweeds hope the more we work on

00:42:50,710 --> 00:42:54,580
pushing the stuff into factory and

00:42:52,630 --> 00:42:56,680
tumbleweed them it should make it easier

00:42:54,580 --> 00:42:58,900
for all of us who are maintaining

00:42:56,680 --> 00:43:04,240
packages because we can more easily

00:42:58,900 --> 00:43:07,540
build upon each other's work I totally

00:43:04,240 --> 00:43:09,660
agree yeah actually we discussed this

00:43:07,540 --> 00:43:12,490
when we prepared the dumbo reits itself

00:43:09,660 --> 00:43:14,380
how to work with the devil projects and

00:43:12,490 --> 00:43:16,900
one of the items that were not ever

00:43:14,380 --> 00:43:19,119
fixed was that everything that's in

00:43:16,900 --> 00:43:21,190
devil project should be in number wheat

00:43:19,119 --> 00:43:22,180
or link to somewhere else to support

00:43:21,190 --> 00:43:24,730
building only for the other

00:43:22,180 --> 00:43:27,690
distributions but it was never finished

00:43:24,730 --> 00:43:30,730
so it's still standing there like this

00:43:27,690 --> 00:43:33,430
from my point of view yeah we should

00:43:30,730 --> 00:43:35,619
simply build against factory and for new

00:43:33,430 --> 00:43:38,650
packages new versions we still have work

00:43:35,619 --> 00:43:40,840
in maintenance projects and we accept

00:43:38,650 --> 00:43:44,790
both of those either version updates or

00:43:40,840 --> 00:43:47,260
new packages into the distribution so

00:43:44,790 --> 00:43:50,710
it's just that people never actually

00:43:47,260 --> 00:43:54,400
bother to request updates or

00:43:50,710 --> 00:43:58,109
the new packages in leap or they don't

00:43:54,400 --> 00:43:58,109
know they could request it actually I

00:43:58,920 --> 00:44:09,310
agree adrian has a question that I

00:44:05,200 --> 00:44:11,710
disagree a bit that you should not do it

00:44:09,310 --> 00:44:14,320
again stable distributions because this

00:44:11,710 --> 00:44:18,070
for my point of view this rules out that

00:44:14,320 --> 00:44:22,359
we get upstream people working directly

00:44:18,070 --> 00:44:24,220
with our there for our next

00:44:22,359 --> 00:44:26,080
distributions because they are

00:44:24,220 --> 00:44:28,930
interested in first place in the stable

00:44:26,080 --> 00:44:31,630
distributions and tumbleweed and factory

00:44:28,930 --> 00:44:34,240
and back ports are just an add-on they

00:44:31,630 --> 00:44:36,700
focus it mostly to get the a user

00:44:34,240 --> 00:44:40,540
satisfied and there you just usually on

00:44:36,700 --> 00:44:42,490
a stable version okay I could work in

00:44:40,540 --> 00:44:46,210
one project and submit to a devil

00:44:42,490 --> 00:44:50,170
project and then submit but they have

00:44:46,210 --> 00:44:51,580
usually one workplace and you just

00:44:50,170 --> 00:44:53,410
ignore it when you submit it back

00:44:51,580 --> 00:44:55,690
something I pay you have one workplace

00:44:53,410 --> 00:44:58,810
where you look at and to fix your stuff

00:44:55,690 --> 00:45:01,869
they are and I don't think this is

00:44:58,810 --> 00:45:05,470
working I mean I lately trying to put

00:45:01,869 --> 00:45:07,630
some packages to factory again and I get

00:45:05,470 --> 00:45:11,500
it the packages working with this in a

00:45:07,630 --> 00:45:14,140
day and it takes more than her months to

00:45:11,500 --> 00:45:17,230
get something to to factory and for an

00:45:14,140 --> 00:45:19,599
upstream guy who focus on the stable

00:45:17,230 --> 00:45:22,150
distributions for their users I just

00:45:19,599 --> 00:45:25,839
remove factory of a person and tumble

00:45:22,150 --> 00:45:28,300
eat but if you end up with an upstream

00:45:25,839 --> 00:45:31,589
guy targeting for example lee protease

00:45:28,300 --> 00:45:33,700
you don't want which you know has

00:45:31,589 --> 00:45:38,500
approximately one year of support left

00:45:33,700 --> 00:45:41,740
to it and then okay we could push that

00:45:38,500 --> 00:45:43,119
as a maintenance update but it's not

00:45:41,740 --> 00:45:44,859
going to benefit from any of this

00:45:43,119 --> 00:45:48,099
testing any of these steps any of the

00:45:44,859 --> 00:45:50,050
reviews you know we really want to have

00:45:48,099 --> 00:45:52,089
upstream people working with tumbleweed

00:45:50,050 --> 00:45:57,270
first because they can move that all the

00:45:52,089 --> 00:46:01,980
time my point was I think you're

00:45:57,270 --> 00:46:04,790
separating these groups unnecessarily I

00:46:01,980 --> 00:46:08,290
is to separate by not work too

00:46:04,790 --> 00:46:11,660
this upstream people also on unwanted

00:46:08,290 --> 00:46:14,660
next distribution packages but if you

00:46:11,660 --> 00:46:16,610
say these devil projects must not built

00:46:14,660 --> 00:46:19,460
for stable distributions you are holding

00:46:16,610 --> 00:46:22,010
them out you're ruling out an entire

00:46:19,460 --> 00:46:23,600
large group of developers and Riblet

00:46:22,010 --> 00:46:25,280
service but then we're going to have to

00:46:23,600 --> 00:46:27,050
do a whole bunch of duplication because

00:46:25,280 --> 00:46:29,060
they might have it working on lead 42 21

00:46:27,050 --> 00:46:30,830
it might not work on factory who's going

00:46:29,060 --> 00:46:32,300
to take care of that second part we get

00:46:30,830 --> 00:46:34,250
ourselves into those messes where we

00:46:32,300 --> 00:46:36,380
have a whole bunch of stuff that works

00:46:34,250 --> 00:46:38,180
on old district on our older distros and

00:46:36,380 --> 00:46:40,040
then we can't get the thing in factory

00:46:38,180 --> 00:46:41,840
and then it ends up being dropped in

00:46:40,040 --> 00:46:44,030
factory which is how we have weird and

00:46:41,840 --> 00:46:45,500
wonderful message like now we're factory

00:46:44,030 --> 00:46:47,420
is missing stuff that's in leap and

00:46:45,500 --> 00:46:51,500
factory is missing stuff that's in slate

00:46:47,420 --> 00:46:53,510
we need to stop that okay but you are

00:46:51,500 --> 00:46:56,000
only seeing it from the point of view of

00:46:53,510 --> 00:46:57,560
the next distributions the other groups

00:46:56,000 --> 00:47:00,740
are looking exactly from the other

00:46:57,560 --> 00:47:02,720
direction they are looking for their

00:47:00,740 --> 00:47:05,480
users for their stable distributions and

00:47:02,720 --> 00:47:07,280
and you say what you don't want them we

00:47:05,480 --> 00:47:09,560
have an upstream here who has a has a

00:47:07,280 --> 00:47:15,260
comment decisis let's see what KDE have

00:47:09,560 --> 00:47:18,260
to say on this no pressure Martin so I

00:47:15,260 --> 00:47:20,210
think app streams are not interested in

00:47:18,260 --> 00:47:21,530
providing software for distributions

00:47:20,210 --> 00:47:24,140
because there are too many distributions

00:47:21,530 --> 00:47:28,160
if they try they fail that's exactly

00:47:24,140 --> 00:47:30,260
what we see like if in own cloud case

00:47:28,160 --> 00:47:32,420
they did actually packages and the

00:47:30,260 --> 00:47:38,630
Debian developers were pissed at them

00:47:32,420 --> 00:47:40,520
because they did bad packages just like

00:47:38,630 --> 00:47:42,710
the opensuse and I think that's what we

00:47:40,520 --> 00:47:46,220
see everywhere the the upstream

00:47:42,710 --> 00:47:47,870
developers don't want to middle this 20

00:47:46,220 --> 00:47:50,270
different distributions and that's why

00:47:47,870 --> 00:47:53,420
we are there things like flat pack I

00:47:50,270 --> 00:47:56,410
think that's a way to go for upstream

00:47:53,420 --> 00:47:59,060
projects trying to get software to a

00:47:56,410 --> 00:48:01,250
stable distribution if they want to they

00:47:59,060 --> 00:48:04,280
need to stop doing package as if they do

00:48:01,250 --> 00:48:06,110
that and I think most up streams just

00:48:04,280 --> 00:48:09,320
don't care because they cannot keep up

00:48:06,110 --> 00:48:10,520
with it yeah and if they do care and

00:48:09,320 --> 00:48:11,990
they only want to work on one of our

00:48:10,520 --> 00:48:14,120
distributions I'd much rather they work

00:48:11,990 --> 00:48:16,050
on tumbleweed because that's the one

00:48:14,120 --> 00:48:21,550
that you know is the next

00:48:16,050 --> 00:48:25,119
Plus Oh surely first she gave me a micro

00:48:21,550 --> 00:48:26,619
without knowing your rules so I agree

00:48:25,119 --> 00:48:29,500
completely with either end here

00:48:26,619 --> 00:48:32,080
basically you're ignoring where the

00:48:29,500 --> 00:48:34,210
users are because just as Matt incest up

00:48:32,080 --> 00:48:36,310
streams don't care about distributions

00:48:34,210 --> 00:48:41,260
they care about users the own cloud

00:48:36,310 --> 00:48:43,690
client in OBS exists not because of leap

00:48:41,260 --> 00:48:46,480
of tumbleweed they exist because of the

00:48:43,690 --> 00:48:47,920
own cloud users that's what they have

00:48:46,480 --> 00:48:50,680
the package for and that's why the

00:48:47,920 --> 00:48:54,010
package is so bad because they'd rather

00:48:50,680 --> 00:48:56,619
the deployer workaround have yet another

00:48:54,010 --> 00:48:58,330
distribution building and having a clean

00:48:56,619 --> 00:49:03,580
package that would be acceptable for the

00:48:58,330 --> 00:49:06,250
distribution s is so and I would like to

00:49:03,580 --> 00:49:11,320
ask you what software did you use to

00:49:06,250 --> 00:49:14,950
create your blog post gentle Jack hell

00:49:11,320 --> 00:49:16,930
is this in the distribution not yet so

00:49:14,950 --> 00:49:20,050
did you ask anyone to submit it to a

00:49:16,930 --> 00:49:22,720
distribution yes did he do that he said

00:49:20,050 --> 00:49:25,990
he will did you wait for him to finish

00:49:22,720 --> 00:49:27,369
including it an institution he was a

00:49:25,990 --> 00:49:30,970
little busy helping set the conference

00:49:27,369 --> 00:49:32,770
up so basically you're saying no now I'm

00:49:30,970 --> 00:49:34,089
saying it should be in the distribution

00:49:32,770 --> 00:49:37,210
and that's what I'm going to continue

00:49:34,089 --> 00:49:40,119
pushing for but you already have it now

00:49:37,210 --> 00:49:43,270
right yeah but I don't necessarily mind

00:49:40,119 --> 00:49:45,160
that my blog might break at any time but

00:49:43,270 --> 00:49:48,220
it's not the point I was trying to make

00:49:45,160 --> 00:49:50,920
the point is people users are very very

00:49:48,220 --> 00:49:53,589
happy that there are home projects

00:49:50,920 --> 00:49:56,200
building packages that are not

00:49:53,589 --> 00:49:58,420
necessarily yet listed but that is a

00:49:56,200 --> 00:50:00,280
lame excuse we should not be doing that

00:49:58,420 --> 00:50:02,560
we shouldn't accept that as well as

00:50:00,280 --> 00:50:05,080
viable we should be doing it better than

00:50:02,560 --> 00:50:07,089
that because it ultimately it will break

00:50:05,080 --> 00:50:09,190
and then who's going to fix it for that

00:50:07,089 --> 00:50:10,480
user I can fix it for myself when it

00:50:09,190 --> 00:50:13,900
comes to jaco I can just spend the time

00:50:10,480 --> 00:50:17,380
fixing my damn package we expect all of

00:50:13,900 --> 00:50:19,240
our users to do that the problem is how

00:50:17,380 --> 00:50:22,630
many steps of those that are currently

00:50:19,240 --> 00:50:25,770
on screen are applying to Jekyll non pre

00:50:22,630 --> 00:50:27,770
integration testing no QA afterwards

00:50:25,770 --> 00:50:29,750
almost no factory

00:50:27,770 --> 00:50:33,230
permission so you basically the game of

00:50:29,750 --> 00:50:35,570
having it submitted is really having

00:50:33,230 --> 00:50:37,760
someone doing manual review and yelling

00:50:35,570 --> 00:50:39,260
at you because you put some background

00:50:37,760 --> 00:50:40,700
you're focusing on the engineering part

00:50:39,260 --> 00:50:42,560
you forgot all of that stuff with

00:50:40,700 --> 00:50:44,420
software the opensuse your organs if ur

00:50:42,560 --> 00:50:46,520
where it's a nightmare getting the damn

00:50:44,420 --> 00:50:49,280
thing in the first place but to Austin

00:50:46,520 --> 00:50:53,000
has something to say yes cool or if you

00:50:49,280 --> 00:50:55,520
say that the end users need a stable

00:50:53,000 --> 00:50:59,390
version of the devil project that's

00:50:55,520 --> 00:51:02,180
wrong because as we had thought if you

00:50:59,390 --> 00:51:03,710
add a devil project on the dissolution

00:51:02,180 --> 00:51:05,780
leap in order button and the gun

00:51:03,710 --> 00:51:08,840
zippered up most of the time you dis

00:51:05,780 --> 00:51:12,650
installations afterwards Bolton so

00:51:08,840 --> 00:51:15,260
before you though adding the stable

00:51:12,650 --> 00:51:18,170
things too they were project it's not

00:51:15,260 --> 00:51:21,710
the right way to go but creating stable

00:51:18,170 --> 00:51:23,870
repose and then at the oil stable

00:51:21,710 --> 00:51:27,440
distributions to attribute let's elect

00:51:23,870 --> 00:51:32,030
way to go could you give it allows he's

00:51:27,440 --> 00:51:34,640
been raising sorry so I have a couple of

00:51:32,030 --> 00:51:39,110
things first of all you mentioned that

00:51:34,640 --> 00:51:41,590
one click install problem we have so you

00:51:39,110 --> 00:51:46,220
say our users should be able to easily

00:51:41,590 --> 00:51:48,350
install packages from devil projects why

00:51:46,220 --> 00:51:50,470
is how it does that fit with your second

00:51:48,350 --> 00:51:53,360
answer that users should not use

00:51:50,470 --> 00:51:56,800
packages from the devil project okay a

00:51:53,360 --> 00:51:59,510
good question if we are going to offer

00:51:56,800 --> 00:52:01,760
some kind of stable repository if we are

00:51:59,510 --> 00:52:04,430
going to support some work flow where we

00:52:01,760 --> 00:52:06,920
do expect users to use additional

00:52:04,430 --> 00:52:09,560
repositories they should have some easy

00:52:06,920 --> 00:52:11,450
way of doing it so right now I think we

00:52:09,560 --> 00:52:14,090
should stop users using develop projects

00:52:11,450 --> 00:52:15,860
if we do that entirely then one click

00:52:14,090 --> 00:52:19,340
install becomes meaningless and we don't

00:52:15,860 --> 00:52:21,710
need it if we instead put in something

00:52:19,340 --> 00:52:23,240
like some stable repositories something

00:52:21,710 --> 00:52:28,490
like one-click install becomes important

00:52:23,240 --> 00:52:32,330
we have to fix it okay so you're just

00:52:28,490 --> 00:52:36,830
inventing new staging or a better stable

00:52:32,330 --> 00:52:39,050
repositories right yes okay no comment

00:52:36,830 --> 00:52:40,260
to that I just want to know who is doing

00:52:39,050 --> 00:52:42,960
the work but

00:52:40,260 --> 00:52:46,790
that's another point on the other way I

00:52:42,960 --> 00:52:50,160
totally agree with kullu and Ariane I

00:52:46,790 --> 00:52:53,520
try to keep track on all the 400 or 500

00:52:50,160 --> 00:52:56,130
packages in education and I have people

00:52:53,520 --> 00:52:59,310
from upstream working with me luckily at

00:52:56,130 --> 00:53:02,520
least 10 of them are working on their

00:52:59,310 --> 00:53:04,770
code in education most of them just care

00:53:02,520 --> 00:53:09,450
for the Debian packages or for some

00:53:04,770 --> 00:53:12,660
fedora packages so know what should i do

00:53:09,450 --> 00:53:16,380
should I try to convince them pushing

00:53:12,660 --> 00:53:19,170
all that stuff to tumbleweed they would

00:53:16,380 --> 00:53:23,160
say how many users inside the education

00:53:19,170 --> 00:53:24,870
world are using tumbleweed and I can

00:53:23,160 --> 00:53:27,330
tell you from my own experience right

00:53:24,870 --> 00:53:30,510
now during summer time and all the

00:53:27,330 --> 00:53:33,150
schools having vacation that's the time

00:53:30,510 --> 00:53:36,470
when teachers updating their systems

00:53:33,150 --> 00:53:39,600
during a whole year you see nothing but

00:53:36,470 --> 00:53:42,690
during summer time all teachers updating

00:53:39,600 --> 00:53:44,670
all their school servers in school

00:53:42,690 --> 00:53:47,700
clients to the latest and greatest

00:53:44,670 --> 00:53:50,100
version which is not tumble weed because

00:53:47,700 --> 00:53:52,710
they have students they have to rely on

00:53:50,100 --> 00:53:54,750
a stable distribution so the best case

00:53:52,710 --> 00:53:58,710
that I see always is that they are using

00:53:54,750 --> 00:54:01,320
leap right now but to be honest they

00:53:58,710 --> 00:54:05,640
still run opensuse 13 dot 1 and they

00:54:01,320 --> 00:54:07,230
still run opensuse 11 or just to keep

00:54:05,640 --> 00:54:09,150
you an idea of it and that's the reason

00:54:07,230 --> 00:54:11,940
why we in the education project for

00:54:09,150 --> 00:54:15,270
example still support such old

00:54:11,940 --> 00:54:18,510
distributions and I can fully understand

00:54:15,270 --> 00:54:20,880
them because on one side I'm as a

00:54:18,510 --> 00:54:23,460
developer want to have the latest and

00:54:20,880 --> 00:54:26,540
greatest stuff on the other side I have

00:54:23,460 --> 00:54:29,730
to agree with them they have no time to

00:54:26,540 --> 00:54:31,350
work on that all the time they have just

00:54:29,730 --> 00:54:33,870
a limited amount of time and they are

00:54:31,350 --> 00:54:37,290
happy if their system is stable enough

00:54:33,870 --> 00:54:40,290
to run their daily workload and they are

00:54:37,290 --> 00:54:43,980
just happy that they can use our devil

00:54:40,290 --> 00:54:46,110
project because there they can even find

00:54:43,980 --> 00:54:49,530
some up-to-date packages they want to

00:54:46,110 --> 00:54:50,880
use in their daily workflow but how is

00:54:49,530 --> 00:54:52,350
it going to work when that package is

00:54:50,880 --> 00:54:53,850
broken how is that going to work when

00:54:52,350 --> 00:54:56,450
the develop a kaijus program how when

00:54:53,850 --> 00:55:00,030
the project is broken is the answer

00:54:56,450 --> 00:55:04,170
here's the solution the devil maintained

00:55:00,030 --> 00:55:05,610
us that's it and we have such a mess

00:55:04,170 --> 00:55:08,100
right now because the devel maintain is

00:55:05,610 --> 00:55:11,100
can't keep that workload oh sorry yeah

00:55:08,100 --> 00:55:14,340
so you obviously have picked the most

00:55:11,100 --> 00:55:16,500
stupid example I mean adding devil

00:55:14,340 --> 00:55:18,450
languages pearl or devil languages pizen

00:55:16,500 --> 00:55:21,570
or something like that to your machine

00:55:18,450 --> 00:55:24,240
and not being a hardcore pearl developer

00:55:21,570 --> 00:55:26,910
or even then is certainly not going to

00:55:24,240 --> 00:55:29,760
work because it has some 5,000 packages

00:55:26,910 --> 00:55:32,070
in there and obviously will kill and all

00:55:29,760 --> 00:55:34,650
are affecting the base system so this

00:55:32,070 --> 00:55:36,600
will be not not working obviously for

00:55:34,650 --> 00:55:38,520
the purpose of this example I was a user

00:55:36,600 --> 00:55:40,080
who just wanted a last year search I

00:55:38,520 --> 00:55:41,670
didn't want pie thing I didn't care

00:55:40,080 --> 00:55:44,160
about the modules though all i wanted

00:55:41,670 --> 00:55:47,340
with elastic search yes so what what do

00:55:44,160 --> 00:55:50,790
we need to do maybe I mean Lars and I we

00:55:47,340 --> 00:55:53,100
are on a we are lucky because our devil

00:55:50,790 --> 00:55:55,860
repositories actually are not devil

00:55:53,100 --> 00:55:57,990
repositories because Lars is education

00:55:55,860 --> 00:56:00,390
it's not devil education it's education

00:55:57,990 --> 00:56:02,670
so it's not a devil repository my pet

00:56:00,390 --> 00:56:04,830
repository is the vdr the video disk

00:56:02,670 --> 00:56:06,870
recorder repository which is also not a

00:56:04,830 --> 00:56:08,450
devil repository by name you're just

00:56:06,870 --> 00:56:11,760
lucky because they're old enough they

00:56:08,450 --> 00:56:15,840
were created before the namespace was

00:56:11,760 --> 00:56:18,150
cluttered with devil and one example is

00:56:15,840 --> 00:56:20,430
are the vdr repositories there are two

00:56:18,150 --> 00:56:23,280
of them video and video are plugins and

00:56:20,430 --> 00:56:25,340
there's no way I'm ever going to submit

00:56:23,280 --> 00:56:30,770
a video plugins to factory because

00:56:25,340 --> 00:56:33,870
that's just too much too much

00:56:30,770 --> 00:56:36,060
humiliation I'm going to end or trying

00:56:33,870 --> 00:56:38,340
to get this code in there the code is

00:56:36,060 --> 00:56:42,120
still useful and it works and it works

00:56:38,340 --> 00:56:45,930
from sharing the to leap tumbleweed

00:56:42,120 --> 00:56:49,020
because I tested there and so maybe what

00:56:45,930 --> 00:56:51,960
we need I can follow you that we don't

00:56:49,020 --> 00:56:53,730
want the real heart die hard devil

00:56:51,960 --> 00:56:55,650
repositories added to everyone's machine

00:56:53,730 --> 00:56:57,600
but something like really we we have

00:56:55,650 --> 00:57:00,630
somewhere where people say okay this is

00:56:57,600 --> 00:57:02,250
a somewhat stable you have to trust us

00:57:00,630 --> 00:57:04,860
as developers that we keep it somewhat

00:57:02,250 --> 00:57:06,540
stable we will probably not update chill

00:57:04,860 --> 00:57:07,150
obscene or repository something like

00:57:06,540 --> 00:57:09,460
this you

00:57:07,150 --> 00:57:12,070
it's tough but it's just the education

00:57:09,460 --> 00:57:14,520
or sometimes also the games repository

00:57:12,070 --> 00:57:18,040
is one of them occasionally fix stuff

00:57:14,520 --> 00:57:19,240
I'll accept you point to into a bit

00:57:18,040 --> 00:57:21,610
because here something like the vdr

00:57:19,240 --> 00:57:23,110
repository might be a prototype for what

00:57:21,610 --> 00:57:24,850
could end up being called a staple

00:57:23,110 --> 00:57:26,670
repository in the future but then we

00:57:24,850 --> 00:57:29,050
need to stay on to these other questions

00:57:26,670 --> 00:57:30,400
you know you're you do it yourself right

00:57:29,050 --> 00:57:32,410
now and everybody's just expected to

00:57:30,400 --> 00:57:34,870
trust you no let's have some standards

00:57:32,410 --> 00:57:37,600
let's have some criteria some you know

00:57:34,870 --> 00:57:39,970
some quality controls so everybody who's

00:57:37,600 --> 00:57:44,470
saying I'm doing this in my stable

00:57:39,970 --> 00:57:46,570
repository it's good enough right um one

00:57:44,470 --> 00:57:50,050
last question I think yeah Ralph had his

00:57:46,570 --> 00:57:52,390
hand up so I have a question I think the

00:57:50,050 --> 00:57:55,090
main reason what caused problem with

00:57:52,390 --> 00:57:57,250
elastic surges that is ended up in the

00:57:55,090 --> 00:57:59,320
wrong dwelling wrong repository it

00:57:57,250 --> 00:58:02,890
should never been in a bitin repository

00:57:59,320 --> 00:58:04,680
it's java project it should be too may

00:58:02,890 --> 00:58:08,230
not be my opinion in a logging project

00:58:04,680 --> 00:58:11,200
and a thing project like I maintain also

00:58:08,230 --> 00:58:13,510
stuff in there in games in monitoring in

00:58:11,200 --> 00:58:15,910
security I think these are all useful

00:58:13,510 --> 00:58:18,190
projects and it's all yeah I agree also

00:58:15,910 --> 00:58:20,020
that it's a lot of extra work to

00:58:18,190 --> 00:58:22,180
maintain it and if you also push it up

00:58:20,020 --> 00:58:24,520
streams I mean I have a project like

00:58:22,180 --> 00:58:27,220
active and it causes a lot of work

00:58:24,520 --> 00:58:29,070
because I posted upstream now after you

00:58:27,220 --> 00:58:32,470
an update i have to update in all

00:58:29,070 --> 00:58:34,930
different opensuse versions if it would

00:58:32,470 --> 00:58:37,060
be only in monitoring monitoring it

00:58:34,930 --> 00:58:38,830
would be a lot less work for me and

00:58:37,060 --> 00:58:40,750
that's a fair point but then then we

00:58:38,830 --> 00:58:42,520
need our maintain is to stop treating

00:58:40,750 --> 00:58:43,660
develop projects just like a dumping

00:58:42,520 --> 00:58:44,920
ground like they are right now I'm

00:58:43,660 --> 00:58:46,630
making if they wanted to be used by

00:58:44,920 --> 00:58:49,330
users we need to be worrying about which

00:58:46,630 --> 00:58:50,710
one is in and you know how is somebody

00:58:49,330 --> 00:58:52,660
going to consumers how is this actually

00:58:50,710 --> 00:58:55,000
really meant to work in the real world

00:58:52,660 --> 00:58:56,410
not just on our developer machines but

00:58:55,000 --> 00:58:58,360
it is it not a tool to maintain us

00:58:56,410 --> 00:59:00,310
recite if the project belongs there i

00:58:58,360 --> 00:59:02,560
mean i think they should have rejected a

00:59:00,310 --> 00:59:09,960
request through and to do the submit

00:59:02,560 --> 00:59:09,960
request in Piketon i'm not so sure

00:59:20,820 --> 00:59:26,980
so listening carefully and I'm not a

00:59:24,130 --> 00:59:28,360
packager or a developer here so I'm

00:59:26,980 --> 00:59:30,520
definitely coming mere form from the

00:59:28,360 --> 00:59:33,430
users that I think you're trying to

00:59:30,520 --> 00:59:35,260
bring two teams or maybe even three

00:59:33,430 --> 00:59:36,790
different categories all together with

00:59:35,260 --> 00:59:39,820
one slight thick and I think that's the

00:59:36,790 --> 00:59:41,980
problem because I also can see that what

00:59:39,820 --> 00:59:44,980
an upstream maintainer ones from our

00:59:41,980 --> 00:59:46,750
tools is different and they call success

00:59:44,980 --> 00:59:48,760
different than what a developer or a

00:59:46,750 --> 00:59:51,970
distro package the developer ones and

00:59:48,760 --> 00:59:54,310
what a user ones so maybe if you change

00:59:51,970 --> 00:59:56,950
the wording a little bit not has two

00:59:54,310 --> 00:59:59,860
must or stable you know you associate

00:59:56,950 --> 01:00:01,690
with stable a lot of criteria being you

00:59:59,860 --> 01:00:03,280
know really quality stemmed and all of

01:00:01,690 --> 01:00:05,710
that and that might be too much for

01:00:03,280 --> 01:00:09,010
somebody who in his free time makes vdr

01:00:05,710 --> 01:00:10,540
work right maybe the trick is using a

01:00:09,010 --> 01:00:12,850
different term you know there's an app

01:00:10,540 --> 01:00:14,740
straightforward as a leaf package reaper

01:00:12,850 --> 01:00:16,960
because for these packages as some

01:00:14,740 --> 01:00:20,730
people said don't mess around with base

01:00:16,960 --> 01:00:23,170
dependencies and you know there is this

01:00:20,730 --> 01:00:26,110
criteria it's good enough somebody has

01:00:23,170 --> 01:00:28,570
tested it so i can install it for a leaf

01:00:26,110 --> 01:00:31,960
package i think that's fine pushing it

01:00:28,570 --> 01:00:33,400
to to factory is maybe asking for to a

01:00:31,960 --> 01:00:34,990
matter of playing although if it's a

01:00:33,400 --> 01:00:37,510
leaf package it's very easy to push the

01:00:34,990 --> 01:00:39,700
factory that's you know we are but if

01:00:37,510 --> 01:00:41,740
you don't ask for all these additional

01:00:39,700 --> 01:00:43,240
things it has to pass this thing and it

01:00:41,740 --> 01:00:46,120
has to pass all of these other things

01:00:43,240 --> 01:00:47,800
and like somebody said what is the

01:00:46,120 --> 01:00:50,590
benefit for me as the guy in the free

01:00:47,800 --> 01:00:54,850
time packages it if i don't have benefit

01:00:50,590 --> 01:00:56,650
from it then why should i do it so i can

01:00:54,850 --> 01:00:59,680
understand that at the same time i think

01:00:56,650 --> 01:01:01,870
there are really good ideas in there and

01:00:59,680 --> 01:01:03,430
and maybe not Maya Singh versus using

01:01:01,870 --> 01:01:05,830
but there is middle ground there is

01:01:03,430 --> 01:01:08,680
these leave packages and which nice to

01:01:05,830 --> 01:01:11,290
have one as many distributions as there

01:01:08,680 --> 01:01:15,660
are users for and if bill power is a

01:01:11,290 --> 01:01:18,130
problem we can talk about that but

01:01:15,660 --> 01:01:20,020
matching developer and losers yes

01:01:18,130 --> 01:01:22,630
matching developer end user and one

01:01:20,020 --> 01:01:25,300
slight tech is them difficult problem i

01:01:22,630 --> 01:01:26,860
think it is but I that the reason I did

01:01:25,300 --> 01:01:28,600
this slide deck actually because I think

01:01:26,860 --> 01:01:30,220
we've forgotten what our users are

01:01:28,600 --> 01:01:32,080
suffering because of the decisions we've

01:01:30,220 --> 01:01:37,480
made us developers so I totally agree

01:01:32,080 --> 01:01:40,000
with the first 35 slides great thank you

01:01:37,480 --> 01:01:42,540
and I've already 15 minutes officer

01:01:40,000 --> 01:01:42,540
thank you very much

01:01:48,220 --> 01:01:50,280

YouTube URL: https://www.youtube.com/watch?v=lz3whk4E_IA


