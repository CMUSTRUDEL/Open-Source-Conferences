Title: Kristoffer Grönlund: Hawk 2.0 and Beyond
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/790-hawk-2-0-and-beyond

At oSC15, I presented the hawk History Explorer. Since then I have released Hawk 2.0, already available in openSUSE Tumbleweed. In this talk I will demonstrate a live cluster running Hawk 2.0, show some of the new features in 2.0 and also some features that have been added since.

http://kri.gs/presentation-hawk-20

Kristoffer Grönlund
Captions: 
	00:00:16,590 --> 00:00:22,470
oh I woke up this morning without a

00:00:18,720 --> 00:00:27,330
voice so we'll see how this goes I've

00:00:22,470 --> 00:00:29,939
had a cold for a week I hope whoever's

00:00:27,330 --> 00:00:33,750
coming after me is it's not going to be

00:00:29,939 --> 00:00:37,650
too upset with microphone so I'm going

00:00:33,750 --> 00:00:41,550
to talk about Hawk which is the web

00:00:37,650 --> 00:00:47,580
interface that we made for the H a stack

00:00:41,550 --> 00:00:49,530
in in opensuse and also souza so it's

00:00:47,580 --> 00:00:52,110
all developed on opensuse and I'm going

00:00:49,530 --> 00:00:55,590
to demo on opensuse so this is all stuff

00:00:52,110 --> 00:01:11,840
that you can use am in tumbleweed and

00:00:55,590 --> 00:01:14,250
leap today so yeah all right okay so

00:01:11,840 --> 00:01:17,280
first of all if you want to download

00:01:14,250 --> 00:01:21,229
this presentation or I made this kind of

00:01:17,280 --> 00:01:25,979
opensuse style revealed ojs presentation

00:01:21,229 --> 00:01:29,490
theme because I didn't like the existing

00:01:25,979 --> 00:01:32,149
one if you want to follow along or want

00:01:29,490 --> 00:01:36,330
to slide so you can get them at this URL

00:01:32,149 --> 00:01:41,009
I'll make a PDF if you want that later

00:01:36,330 --> 00:01:45,899
as well so first of all high

00:01:41,009 --> 00:01:49,709
availability is kind of to sum it up

00:01:45,899 --> 00:01:52,459
briefly it's a managing services in a

00:01:49,709 --> 00:01:55,910
cluster environment and making sure that

00:01:52,459 --> 00:01:59,640
services are available regardless of

00:01:55,910 --> 00:02:05,880
software or hardware failures so servers

00:01:59,640 --> 00:02:08,819
can fail or software can crash and the

00:02:05,880 --> 00:02:13,400
high availability stack will try to make

00:02:08,819 --> 00:02:18,280
sure to keep everything up and running I

00:02:13,400 --> 00:02:20,910
should yeah okay

00:02:18,280 --> 00:02:20,910
so

00:02:21,180 --> 00:02:28,409
it's like the brief intro to a che in

00:02:24,180 --> 00:02:31,680
general you can use it for basically

00:02:28,409 --> 00:02:34,409
anything you can use it so it's commonly

00:02:31,680 --> 00:02:37,230
used for keeping web services online but

00:02:34,409 --> 00:02:40,079
also databases mail servers and the

00:02:37,230 --> 00:02:45,810
Fester's banishing virtual machines

00:02:40,079 --> 00:02:49,409
containers pretty much anything and yeah

00:02:45,810 --> 00:02:52,290
using the HH stack is really easy on

00:02:49,409 --> 00:02:55,290
opensuse all of our stuff is already in

00:02:52,290 --> 00:03:01,349
tumbleweed and lead so you can install

00:02:55,290 --> 00:03:04,530
it really easily and the thing I'm going

00:03:01,349 --> 00:03:08,939
to show today is hawk which is yeah the

00:03:04,530 --> 00:03:13,469
web interface for managing a che that's

00:03:08,939 --> 00:03:16,230
included on opensuse so if you wanna

00:03:13,469 --> 00:03:19,469
want to install on a machine it's it's

00:03:16,230 --> 00:03:21,239
really easy used super install h a

00:03:19,469 --> 00:03:22,950
cluster bootstrap and then run nature

00:03:21,239 --> 00:03:26,639
cluster in it you have a one node

00:03:22,950 --> 00:03:29,310
cluster adding more nodes it's as simple

00:03:26,639 --> 00:03:35,159
as installing the package of those and

00:03:29,310 --> 00:03:36,359
running a cluster join you can also so

00:03:35,159 --> 00:03:38,489
i'm experimenting with a docker

00:03:36,359 --> 00:03:39,989
container for hawks if you're not

00:03:38,489 --> 00:03:41,340
running opens ooh so you're running some

00:03:39,989 --> 00:03:44,549
other operating system and you want to

00:03:41,340 --> 00:03:48,780
try it out you can get the docker

00:03:44,549 --> 00:03:52,340
container that has a whole cluster stack

00:03:48,780 --> 00:03:55,259
included um with the hulking face I

00:03:52,340 --> 00:03:56,759
haven't tried it too much I I don't know

00:03:55,259 --> 00:04:00,720
if it actually works for managing

00:03:56,759 --> 00:04:05,280
services song on windows or or red hat

00:04:00,720 --> 00:04:07,590
or what have you but uh as far as I know

00:04:05,280 --> 00:04:10,560
it it should at least give you the

00:04:07,590 --> 00:04:14,729
interface so you can look at it there's

00:04:10,560 --> 00:04:19,859
also a introduction guide for setting up

00:04:14,729 --> 00:04:22,169
a cluster with hawk at this URL so if

00:04:19,859 --> 00:04:27,349
you if you're interested and want to try

00:04:22,169 --> 00:04:27,349
it out that's that's a good place to go

00:04:27,860 --> 00:04:39,710
yes so okay let's demo so on this

00:04:37,669 --> 00:04:44,240
machine i have three virtual machines

00:04:39,710 --> 00:04:50,479
running a cluster running and what you

00:04:44,240 --> 00:04:53,590
do is after installing the hawk

00:04:50,479 --> 00:04:58,340
interface will be running on port 7630

00:04:53,590 --> 00:05:01,699
as you can see at the top and you will

00:04:58,340 --> 00:05:04,729
go to that URL also as you can see by

00:05:01,699 --> 00:05:08,090
default when you install it presents a

00:05:04,729 --> 00:05:10,879
self-signed certificate this is

00:05:08,090 --> 00:05:12,889
something that if you're using it you

00:05:10,879 --> 00:05:14,599
know for bigger installation and so on

00:05:12,889 --> 00:05:18,169
you can install your own certificate so

00:05:14,599 --> 00:05:20,419
you get the nice of green check mark if

00:05:18,169 --> 00:05:22,789
you used installing and setting up

00:05:20,419 --> 00:05:24,349
you're gonna get a warning and saying

00:05:22,789 --> 00:05:26,449
you know this is self signed certificate

00:05:24,349 --> 00:05:30,319
do you really will continue you say yes

00:05:26,449 --> 00:05:34,400
and the browser is unhappy but it will

00:05:30,319 --> 00:05:37,870
let you I've been thinking of maybe

00:05:34,400 --> 00:05:40,159
using let's encrypt in some way to

00:05:37,870 --> 00:05:42,800
automatically create a valid certificate

00:05:40,159 --> 00:05:46,129
when you install but I haven't gotten

00:05:42,800 --> 00:05:47,800
that working yet and it's so let's

00:05:46,129 --> 00:05:50,280
encrypt this really nice but it's also

00:05:47,800 --> 00:05:53,560
kind of

00:05:50,280 --> 00:05:55,810
focused on setting up for Apache at the

00:05:53,560 --> 00:05:58,780
moment and using it in general is it's

00:05:55,810 --> 00:06:03,700
not that easy so we'll see but in the

00:05:58,780 --> 00:06:05,800
future maybe so when you have it up by

00:06:03,700 --> 00:06:08,910
default it creates a user called H a

00:06:05,800 --> 00:06:11,650
cluster and the password is used linux

00:06:08,910 --> 00:06:14,500
you obviously want to change that if

00:06:11,650 --> 00:06:18,690
you're actually going to use this in the

00:06:14,500 --> 00:06:23,350
wild but uh that's the default and then

00:06:18,690 --> 00:06:27,940
you log in you get the interface for

00:06:23,350 --> 00:06:29,410
Hawk and I know Thomas has also worked

00:06:27,940 --> 00:06:31,270
on it and it looks it looks a bit

00:06:29,410 --> 00:06:35,020
different from when he last saw it I

00:06:31,270 --> 00:06:37,720
think I've been changing so this is the

00:06:35,020 --> 00:06:41,820
development version which is going to be

00:06:37,720 --> 00:06:44,680
released as 2.1 any day now it's it's

00:06:41,820 --> 00:06:49,000
pretty much stable i hope we'll see how

00:06:44,680 --> 00:06:52,750
the demo goes but basically what you can

00:06:49,000 --> 00:06:54,970
see is i have a bunch of resources

00:06:52,750 --> 00:06:58,240
running so a resource is a service

00:06:54,970 --> 00:07:02,350
running in the cluster and i have three

00:06:58,240 --> 00:07:04,690
nodes so we have the web UI node the

00:07:02,350 --> 00:07:07,540
node 1 and no 2 so these are this is the

00:07:04,690 --> 00:07:18,420
entire high availability cluster at the

00:07:07,540 --> 00:07:20,680
moment so to demo today i set up let's

00:07:18,420 --> 00:07:24,490
show

00:07:20,680 --> 00:07:28,620
this one so I've set up a simple image

00:07:24,490 --> 00:07:31,780
server kind of program used to show that

00:07:28,620 --> 00:07:35,710
really you can manage kind of anything

00:07:31,780 --> 00:07:40,150
as a cluster resource so it doesn't have

00:07:35,710 --> 00:07:42,820
to be a web server or file system or any

00:07:40,150 --> 00:07:45,100
of the prepackaged like resource agents

00:07:42,820 --> 00:07:47,650
that we include using those are

00:07:45,100 --> 00:07:49,509
obviously better if you can but you can

00:07:47,650 --> 00:07:51,639
actually use it to manage all kinds of

00:07:49,509 --> 00:07:54,460
things and so one of the agents that we

00:07:51,639 --> 00:08:00,400
have is the anything agent which

00:07:54,460 --> 00:08:03,160
basically just runs a command and so we

00:08:00,400 --> 00:08:05,740
can look at the configuration for for

00:08:03,160 --> 00:08:08,830
the the image server so all it's doing

00:08:05,740 --> 00:08:10,509
is it's running the image serve command

00:08:08,830 --> 00:08:14,560
which have installed in all the cluster

00:08:10,509 --> 00:08:16,509
nodes and it's passing the folder that

00:08:14,560 --> 00:08:21,360
is supposed to look at for serving

00:08:16,509 --> 00:08:25,419
images from as a parameter and basically

00:08:21,360 --> 00:08:27,190
that's it if you have a program that it

00:08:25,419 --> 00:08:28,930
implements the server or influence

00:08:27,190 --> 00:08:33,010
software and it's a long-running so it

00:08:28,930 --> 00:08:35,310
just keeps running the this will monitor

00:08:33,010 --> 00:08:37,900
that it's still running start it

00:08:35,310 --> 00:08:40,360
restarted if it crashes restart on

00:08:37,900 --> 00:08:45,040
another note if that note goes down and

00:08:40,360 --> 00:08:48,940
so on so so to demonstrate this I will

00:08:45,040 --> 00:08:52,870
show first of all kind of so I threw

00:08:48,940 --> 00:08:57,370
together this script so this is really

00:08:52,870 --> 00:09:00,880
simple it's a Python image server that I

00:08:57,370 --> 00:09:07,000
wrote yesterday the gist serves images

00:09:00,880 --> 00:09:10,650
from a shared folder using ocfs2 that's

00:09:07,000 --> 00:09:10,650
available from all of the cluster nodes

00:09:11,730 --> 00:09:19,780
so we have

00:09:13,640 --> 00:09:19,780
oh I always do that

00:09:22,850 --> 00:09:29,510
so what I have is H a proxy running on

00:09:31,250 --> 00:09:39,870
on one of the nodes also managed by the

00:09:36,780 --> 00:09:41,430
cluster so if the node running a chip

00:09:39,870 --> 00:09:45,900
practicals done it will restart on

00:09:41,430 --> 00:09:48,720
another note and that is fronting this

00:09:45,900 --> 00:09:52,080
image server running on on some of the

00:09:48,720 --> 00:09:57,330
nose and by doing this I can have a

00:09:52,080 --> 00:09:59,490
single entry point and handle SSL and so

00:09:57,330 --> 00:10:04,680
on using a cheap proxy and then access

00:09:59,490 --> 00:10:07,220
the image server through that um so is

00:10:04,680 --> 00:10:07,220
this demo

00:10:07,490 --> 00:10:12,980
so what I'm going to show now is that

00:10:10,839 --> 00:10:17,420
you can see that this is currently

00:10:12,980 --> 00:10:24,380
serving images from node 1 and i can

00:10:17,420 --> 00:10:27,230
upload an image like this and the image

00:10:24,380 --> 00:10:32,709
is showing there i can then go into hot

00:10:27,230 --> 00:10:37,370
and turn off node 1 just as a demo and

00:10:32,709 --> 00:10:40,670
the image server will restart on another

00:10:37,370 --> 00:10:45,380
note and be serving images from there so

00:10:40,670 --> 00:10:48,740
we'll see if it works so we set that

00:10:45,380 --> 00:10:52,820
notes you stand by you can see the image

00:10:48,740 --> 00:10:56,600
server is now running an ode to em so

00:10:52,820 --> 00:10:59,420
you can see that there and if we go into

00:10:56,600 --> 00:11:02,149
H a proxy it's not saying and now saying

00:10:59,420 --> 00:11:06,980
that the second one is to one deserving

00:11:02,149 --> 00:11:10,430
and if we go back to this and reload now

00:11:06,980 --> 00:11:13,160
it's serving from no 2 and it still has

00:11:10,430 --> 00:11:17,089
the images that i uploaded so i can then

00:11:13,160 --> 00:11:21,470
upload a different image and show yeah

00:11:17,089 --> 00:11:23,580
it still has those images and i can

00:11:21,470 --> 00:11:30,810
bring

00:11:23,580 --> 00:11:32,430
this note back from standby and so right

00:11:30,810 --> 00:11:34,430
now it's still running a note too

00:11:32,430 --> 00:11:37,560
because there's no reason to switch back

00:11:34,430 --> 00:11:43,260
but if I want I can force it to go back

00:11:37,560 --> 00:11:51,780
to node 1 by choosing to migrate to node

00:11:43,260 --> 00:11:54,150
1 and it's not running a node 1 I go

00:11:51,780 --> 00:11:58,640
back and yet i'm getting the images from

00:11:54,150 --> 00:12:00,870
no one and in the background this is now

00:11:58,640 --> 00:12:05,640
restarted software running on another

00:12:00,870 --> 00:12:12,110
node so i can show a little bit more

00:12:05,640 --> 00:12:12,110
about how to set that up so in

00:12:12,660 --> 00:12:19,050
the configuration so the configuration

00:12:15,360 --> 00:12:21,839
is actually stored as XML in the cluster

00:12:19,050 --> 00:12:25,350
software but really never really had to

00:12:21,839 --> 00:12:29,879
look at the XML configuration so we have

00:12:25,350 --> 00:12:31,680
a few different ways to do to view the

00:12:29,879 --> 00:12:33,480
state of the cluster and the state of

00:12:31,680 --> 00:12:40,290
configuration that are much nicer than

00:12:33,480 --> 00:12:44,870
looking at the XML directly and see you

00:12:40,290 --> 00:12:47,360
I'm doing for time I plenty so

00:12:44,870 --> 00:12:48,800
you have a text-based format it's the

00:12:47,360 --> 00:12:50,390
same as you have on the command line

00:12:48,800 --> 00:12:54,050
tools that we have for managing the

00:12:50,390 --> 00:12:59,060
cluster so you can see all my resources

00:12:54,050 --> 00:13:04,610
and notes are defined here we have the

00:12:59,060 --> 00:13:08,410
resource for the anything service it's

00:13:04,610 --> 00:13:11,779
simply running this binary wins argument

00:13:08,410 --> 00:13:14,750
monitoring every 10 seconds to Stephen

00:13:11,779 --> 00:13:18,230
is still running if for some reason it

00:13:14,750 --> 00:13:20,660
crashes we started if it crashes crashes

00:13:18,230 --> 00:13:23,240
repeatedly on a particular node we story

00:13:20,660 --> 00:13:29,690
on a different mode all this is managed

00:13:23,240 --> 00:13:33,140
automatically using the configuration so

00:13:29,690 --> 00:13:35,960
you can also see in the form of a

00:13:33,140 --> 00:13:39,140
listing here sell their resources stuff

00:13:35,960 --> 00:13:43,040
we've defined we also have the

00:13:39,140 --> 00:13:47,260
constraints defined between resources so

00:13:43,040 --> 00:13:50,480
we can go in and see that I've said that

00:13:47,260 --> 00:13:53,660
wherever the image service is kind of

00:13:50,480 --> 00:13:55,550
low run we also need to have the cluster

00:13:53,660 --> 00:13:57,980
file system running so that you can find

00:13:55,550 --> 00:14:02,140
the files and the way that's done is by

00:13:57,980 --> 00:14:05,300
defining a constraint between these two

00:14:02,140 --> 00:14:09,589
so it's you're saying that it has to

00:14:05,300 --> 00:14:13,880
have the cluster f s resource running

00:14:09,589 --> 00:14:17,600
before it's together with the image

00:14:13,880 --> 00:14:19,130
server and we also need to find that the

00:14:17,600 --> 00:14:21,140
cluster file system needs to be mounted

00:14:19,130 --> 00:14:23,860
before we start the image server and

00:14:21,140 --> 00:14:27,709
that's done using an order constraint

00:14:23,860 --> 00:14:34,790
which is defined in a very similar way

00:14:27,709 --> 00:14:38,089
so we have the cluster f s first and

00:14:34,790 --> 00:14:40,880
then start to image server and if I only

00:14:38,089 --> 00:14:42,890
had the order constraint the cluster

00:14:40,880 --> 00:14:45,140
would be free to start the image server

00:14:42,890 --> 00:14:47,150
on one node and the cluster filesystem

00:14:45,140 --> 00:14:50,240
on another note so it's just an ordering

00:14:47,150 --> 00:14:53,120
constraint it's not a placement

00:14:50,240 --> 00:14:55,579
constraints we need to and I and

00:14:53,120 --> 00:14:57,840
separating these two constraints makes

00:14:55,579 --> 00:15:01,050
it very flexible so you can have

00:14:57,840 --> 00:15:03,270
say you have a web server that needs

00:15:01,050 --> 00:15:06,150
database but the database can be running

00:15:03,270 --> 00:15:08,520
on any node in the cluster and the web

00:15:06,150 --> 00:15:11,370
server used to access is it through an

00:15:08,520 --> 00:15:13,170
IP address and you can set that up so

00:15:11,370 --> 00:15:15,390
that the database has to be running for

00:15:13,170 --> 00:15:18,270
the web server to be up but they can run

00:15:15,390 --> 00:15:20,640
on different nodes and the cluster is

00:15:18,270 --> 00:15:25,230
free to load balance and place them as

00:15:20,640 --> 00:15:26,790
as it sees fit so this way it's really

00:15:25,230 --> 00:15:29,160
easy to set up a cluster where you have

00:15:26,790 --> 00:15:30,900
multiple nodes but you don't have notes

00:15:29,160 --> 00:15:33,210
through your strumming idol if you're

00:15:30,900 --> 00:15:35,270
you can use the resources of all the

00:15:33,210 --> 00:15:39,390
nose when you have them and then just

00:15:35,270 --> 00:15:44,250
fall back to a fewer sentinels emergency

00:15:39,390 --> 00:15:50,130
like when the Machine goes down you can

00:15:44,250 --> 00:15:52,200
also see the dashboard view if I had two

00:15:50,130 --> 00:15:55,620
screens I can show you side-by-side

00:15:52,200 --> 00:15:59,580
let's see if we can do this so you can

00:15:55,620 --> 00:16:06,480
see resources moving three nodes in real

00:15:59,580 --> 00:16:09,300
time so we have the cluster status on

00:16:06,480 --> 00:16:14,570
the command line and then I can then k

00:16:09,300 --> 00:16:14,570
say ok let's

00:16:16,950 --> 00:16:20,820
on my great that I think it's still

00:16:19,020 --> 00:16:24,470
going to stay it's still staying on

00:16:20,820 --> 00:16:29,900
node1 but I can move it then to know too

00:16:24,470 --> 00:16:32,100
so we migrate in serve to know too and

00:16:29,900 --> 00:16:34,260
yeah you can see the web interface

00:16:32,100 --> 00:16:39,000
updates instantly and shows that now

00:16:34,260 --> 00:16:41,850
it's running on no 2 so that's quite

00:16:39,000 --> 00:16:44,520
nice you can also add multiple clusters

00:16:41,850 --> 00:16:46,230
so if you have a bunch of clusters that

00:16:44,520 --> 00:16:47,670
you're managing you can add them all to

00:16:46,230 --> 00:16:51,990
the same dashboard and put that up on

00:16:47,670 --> 00:16:57,900
the on the screen and you get get them

00:16:51,990 --> 00:17:00,570
all in the same interface so I guess

00:16:57,900 --> 00:17:03,780
another kind of cool thing that we have

00:17:00,570 --> 00:17:08,510
that I think a lot of a lot of these

00:17:03,780 --> 00:17:08,510
demos and technologies kind of skip over

00:17:10,100 --> 00:17:20,699
which is what do you do when things go

00:17:12,720 --> 00:17:22,890
wrong so what if when I when when there

00:17:20,699 --> 00:17:25,610
is a failure and I want to figure out

00:17:22,890 --> 00:17:29,490
well what actually happened what do i do

00:17:25,610 --> 00:17:31,410
so for a lot of times that means used to

00:17:29,490 --> 00:17:33,090
having to go into the machines and

00:17:31,410 --> 00:17:35,490
digging around looking at the log files

00:17:33,090 --> 00:17:37,290
and trying to figure it out but I in the

00:17:35,490 --> 00:17:39,150
hawk we actually have a tool which will

00:17:37,290 --> 00:17:43,230
do all that for you and try to figure

00:17:39,150 --> 00:17:45,150
out what happened and display used the

00:17:43,230 --> 00:17:48,180
basic information that you need to

00:17:45,150 --> 00:17:50,010
figure everything out so what i can do

00:17:48,180 --> 00:17:52,320
is i can look at the history of this

00:17:50,010 --> 00:17:55,230
cluster for a certain time period and

00:17:52,320 --> 00:17:58,170
then see what actually happened during

00:17:55,230 --> 00:18:00,980
that time so if we then go in and look

00:17:58,170 --> 00:18:05,210
at so i think this is the last hour and

00:18:00,980 --> 00:18:08,400
see what's happened during that hour

00:18:05,210 --> 00:18:11,280
what is now doing isn't going in in the

00:18:08,400 --> 00:18:13,230
background to each cluster node fetch

00:18:11,280 --> 00:18:15,930
fetching all the logs and information

00:18:13,230 --> 00:18:20,580
for the last hour and then analyzing

00:18:15,930 --> 00:18:24,540
that to see what actually happened so in

00:18:20,580 --> 00:18:26,910
this case as you can see we have nine

00:18:24,540 --> 00:18:29,500
transitions which means there were nine

00:18:26,910 --> 00:18:33,190
kind of events in the cluster you do

00:18:29,500 --> 00:18:35,170
the time span I can scroll around at the

00:18:33,190 --> 00:18:39,640
time and see when these events occurred

00:18:35,170 --> 00:18:41,650
so I'm guessing this is when I started

00:18:39,640 --> 00:18:45,100
these virtual machines and set up this

00:18:41,650 --> 00:18:50,770
cluster and so we can go in and see at

00:18:45,100 --> 00:18:53,350
this point yeah at this point only one

00:18:50,770 --> 00:18:57,130
machine was online and the other two

00:18:53,350 --> 00:19:02,530
were offline and if we go to the next

00:18:57,130 --> 00:19:07,420
event we have two notes online one node

00:19:02,530 --> 00:19:10,960
still offline and then finally all three

00:19:07,420 --> 00:19:13,060
notes are online and it's starting the

00:19:10,960 --> 00:19:16,810
services an old machine so here you can

00:19:13,060 --> 00:19:19,150
also see the decision that the cluster

00:19:16,810 --> 00:19:21,330
is making at that point so you can see

00:19:19,150 --> 00:19:24,940
what it's going to do it's going to move

00:19:21,330 --> 00:19:28,570
one web server instance from web UI to

00:19:24,940 --> 00:19:33,070
know too it's going to restart the

00:19:28,570 --> 00:19:36,640
another instance not exactly sure why

00:19:33,070 --> 00:19:38,530
but i'm sure it knows why and then it's

00:19:36,640 --> 00:19:42,610
going to start resources start starting

00:19:38,530 --> 00:19:45,220
up resources on note 2 and there's all

00:19:42,610 --> 00:19:47,560
all of these decisions then trigger

00:19:45,220 --> 00:19:48,970
actions on the nodes and you can see the

00:19:47,560 --> 00:19:53,470
actions that is tricky so it's actually

00:19:48,970 --> 00:19:55,330
then monitoring all the resources making

00:19:53,470 --> 00:19:56,680
sure that they're not running on notes

00:19:55,330 --> 00:19:58,090
we're not supposed to be running make

00:19:56,680 --> 00:19:59,350
sure that they are running on those

00:19:58,090 --> 00:20:03,670
where they are supposed to be running

00:19:59,350 --> 00:20:05,770
and then taking care to react to the

00:20:03,670 --> 00:20:11,290
answer she gets back to start and stop

00:20:05,770 --> 00:20:13,530
resources as needed and you also get log

00:20:11,290 --> 00:20:13,530
output

00:20:14,260 --> 00:20:20,680
and all this stuff you can also see so

00:20:17,440 --> 00:20:23,080
you get this can be a little bit

00:20:20,680 --> 00:20:26,070
difficult to interpret but it's

00:20:23,080 --> 00:20:29,310
basically a graph view showing

00:20:26,070 --> 00:20:31,770
the way the actions are going to happen

00:20:29,310 --> 00:20:33,420
in the cluster so because it can do a

00:20:31,770 --> 00:20:36,420
bunch of things in parallel on different

00:20:33,420 --> 00:20:39,570
nodes it figures out you know what needs

00:20:36,420 --> 00:20:41,810
to happen in sequence and then tries to

00:20:39,570 --> 00:20:45,060
paralyze as much as possible so

00:20:41,810 --> 00:20:48,330
basically when we have so here we have a

00:20:45,060 --> 00:20:51,570
base clone resource which is the the

00:20:48,330 --> 00:20:53,280
cluster file system lock manager once

00:20:51,570 --> 00:20:55,410
that started we can start doing a bunch

00:20:53,280 --> 00:20:58,440
of other things in parallels we at the

00:20:55,410 --> 00:20:59,850
same time we get back a confirmation

00:20:58,440 --> 00:21:02,720
that this was successful we're going to

00:20:59,850 --> 00:21:05,700
start a different resource on node 2 and

00:21:02,720 --> 00:21:10,680
we're going to start the cluster file

00:21:05,700 --> 00:21:12,930
system on on the all the nodes and yeah

00:21:10,680 --> 00:21:15,870
this there's bunch of things happening

00:21:12,930 --> 00:21:18,180
all at once hopefully you don't have to

00:21:15,870 --> 00:21:19,680
figure out the all the all the

00:21:18,180 --> 00:21:23,490
information that you need to figure out

00:21:19,680 --> 00:21:25,770
okay what actually went on is there and

00:21:23,490 --> 00:21:27,870
so that we can see this is still like

00:21:25,770 --> 00:21:29,880
setting up and there are standing up

00:21:27,870 --> 00:21:33,780
here at a time where I was just sitting

00:21:29,880 --> 00:21:36,000
here looking at the previous speaker and

00:21:33,780 --> 00:21:40,580
then when I started messing around with

00:21:36,000 --> 00:21:40,580
things we get new events which is then

00:21:40,640 --> 00:21:48,640
resource is basically moving between the

00:21:43,230 --> 00:21:53,710
nodes so if we

00:21:48,640 --> 00:21:59,580
you see which one am I out now yes i'm

00:21:53,710 --> 00:21:59,580
at this one you can see here

00:22:01,179 --> 00:22:08,780
yes so what I did is I went and then I

00:22:04,700 --> 00:22:11,900
said note one to stand by and that then

00:22:08,780 --> 00:22:13,490
is triggering events to make sure that

00:22:11,900 --> 00:22:16,429
the resources that were running on node1

00:22:13,490 --> 00:22:18,080
aren't running anymore and anything that

00:22:16,429 --> 00:22:22,040
would need to restart on a different

00:22:18,080 --> 00:22:23,929
note is restarted there so we have the

00:22:22,040 --> 00:22:27,010
image servers start download one so

00:22:23,929 --> 00:22:34,429
that's going to have to move to no.2 and

00:22:27,010 --> 00:22:36,770
and this is all basically decisions made

00:22:34,429 --> 00:22:39,950
by the cluster so the cool thing is that

00:22:36,770 --> 00:22:41,929
you can actually simulate all of this so

00:22:39,950 --> 00:22:43,880
instead of having to use set node one to

00:22:41,929 --> 00:22:46,210
stand by and see what happens you can

00:22:43,880 --> 00:22:51,590
get this kind of information beforehand

00:22:46,210 --> 00:22:55,250
to know what's going to what what's

00:22:51,590 --> 00:22:57,440
going to be the result of any changes

00:22:55,250 --> 00:23:00,360
that I make and the way this works in

00:22:57,440 --> 00:23:03,630
Hawk is through the batch mode

00:23:00,360 --> 00:23:06,690
which is a new feature host two point oh

00:23:03,630 --> 00:23:08,880
so this is going to be in 2.1 so

00:23:06,690 --> 00:23:12,210
previously we had a simulator which did

00:23:08,880 --> 00:23:15,000
that but I've move that into a unified

00:23:12,210 --> 00:23:18,000
way to make multiple configuration

00:23:15,000 --> 00:23:19,860
changes all in one batch and then see

00:23:18,000 --> 00:23:22,020
exactly what's what the changes are

00:23:19,860 --> 00:23:24,660
going to be what the effects of the

00:23:22,020 --> 00:23:26,040
changes is going to be and then decide

00:23:24,660 --> 00:23:28,980
if you want to actually apply the

00:23:26,040 --> 00:23:33,390
changes or not so the way we do that we

00:23:28,980 --> 00:23:36,870
see we go into batch mode and then I can

00:23:33,390 --> 00:23:42,900
go in and say okay so right now I have

00:23:36,870 --> 00:23:46,140
the note the note 2 migrated to note the

00:23:42,900 --> 00:23:51,299
image server not mega is no 2 I can go

00:23:46,140 --> 00:23:53,040
in and remove the migration so is the

00:23:51,299 --> 00:23:55,080
unmai Gration thing is a little bit

00:23:53,040 --> 00:23:57,450
weird but what it's doing is setting a

00:23:55,080 --> 00:24:02,429
constraint permanently saying that okay

00:23:57,450 --> 00:24:04,590
image server has to run on 02 if if you

00:24:02,429 --> 00:24:06,870
no longer wanted to be forced to know to

00:24:04,590 --> 00:24:08,580
but you want to cluster to manage it and

00:24:06,870 --> 00:24:11,900
say okay you can run anywhere you have

00:24:08,580 --> 00:24:13,799
to go in and remove that constraint so

00:24:11,900 --> 00:24:17,100
that doesn't mean it's going to move

00:24:13,799 --> 00:24:18,870
back that's a configuration issue you

00:24:17,100 --> 00:24:21,360
can you can configure it to prefer a

00:24:18,870 --> 00:24:22,830
certain note so when there is no no

00:24:21,360 --> 00:24:26,070
other constraints it will always move

00:24:22,830 --> 00:24:28,320
back to node 1 if it's possible but in

00:24:26,070 --> 00:24:31,440
this case it just I needed to run if you

00:24:28,320 --> 00:24:33,540
run anywhere it doesn't really matter so

00:24:31,440 --> 00:24:35,090
but I can then go in and say okay but I

00:24:33,540 --> 00:24:38,190
don't want to move I want to move it

00:24:35,090 --> 00:24:42,059
somewhere else it's not here I can do

00:24:38,190 --> 00:24:44,010
that you can see now it's saying that

00:24:42,059 --> 00:24:46,080
it's running an old one but since we're

00:24:44,010 --> 00:24:49,559
in the batch mode Oh everything I'm

00:24:46,080 --> 00:24:53,250
doing is just simulated at this point so

00:24:49,559 --> 00:24:55,710
you can see the changes in the

00:24:53,250 --> 00:24:58,710
configuration actually what I'm doing so

00:24:55,710 --> 00:25:01,679
I've removed the constraint that says it

00:24:58,710 --> 00:25:03,210
has to run on load to and put in the

00:25:01,679 --> 00:25:05,190
constraint the size its can absolutely

00:25:03,210 --> 00:25:08,520
not runnin no to we can run anywhere

00:25:05,190 --> 00:25:10,250
else but not on 02 and then I can go

00:25:08,520 --> 00:25:13,970
into the simulator

00:25:10,250 --> 00:25:15,710
and see exactly what that means so here

00:25:13,970 --> 00:25:17,560
is showing exactly the same view as in

00:25:15,710 --> 00:25:20,240
the history report we was showing

00:25:17,560 --> 00:25:23,540
previous events that happened at some

00:25:20,240 --> 00:25:26,390
point in time but it's actually showing

00:25:23,540 --> 00:25:29,120
a simulation of what it's going to do if

00:25:26,390 --> 00:25:31,280
I make the changes tonight then I was

00:25:29,120 --> 00:25:33,890
making so in this case you can see that

00:25:31,280 --> 00:25:36,260
the current state is that the image

00:25:33,890 --> 00:25:38,000
server is running a note 2 and the

00:25:36,260 --> 00:25:39,800
decision it makes is that it needs to

00:25:38,000 --> 00:25:45,620
move the image server from no 2 to node

00:25:39,800 --> 00:25:48,440
1 and that has the effect of forcing no

00:25:45,620 --> 00:25:50,810
image server to stop on no 2 and then to

00:25:48,440 --> 00:25:53,630
start unload one and then to start

00:25:50,810 --> 00:25:57,770
monitoring the resource on node1 so

00:25:53,630 --> 00:26:00,680
that's kind of the the way that Hawk

00:25:57,770 --> 00:26:02,780
helps you to manage the cluster software

00:26:00,680 --> 00:26:05,300
and then that makes it really easy to

00:26:02,780 --> 00:26:08,150
manage your the software that you run in

00:26:05,300 --> 00:26:12,500
the cluster and yeah this is all

00:26:08,150 --> 00:26:14,330
available on opensuse today so if you

00:26:12,500 --> 00:26:16,790
have a web server or something running

00:26:14,330 --> 00:26:19,430
on opensuse you want to have high

00:26:16,790 --> 00:26:20,570
availability for it everything all the

00:26:19,430 --> 00:26:25,610
pieces you need are already there

00:26:20,570 --> 00:26:31,970
already the latest version and so on so

00:26:25,610 --> 00:26:35,800
yeah that's my demo and I think I have

00:26:31,970 --> 00:26:38,990
four minutes for questions if anyone has

00:26:35,800 --> 00:26:45,070
any so I'm gonna skip all the packaging

00:26:38,990 --> 00:26:45,070
details yeah all right questions

00:26:46,740 --> 00:26:57,300
yes what happens if the node crashes

00:26:53,520 --> 00:26:59,610
that serves the hawk so hawk is actually

00:26:57,300 --> 00:27:02,190
running on all of the nodes so what I

00:26:59,610 --> 00:27:05,550
did was I went in to one of the nodes

00:27:02,190 --> 00:27:08,280
which is Hawk is provided on port 7630

00:27:05,550 --> 00:27:10,320
on all cluster nodes if that notes

00:27:08,280 --> 00:27:13,920
crashes while I'm using it I'm going to

00:27:10,320 --> 00:27:16,230
lose my connection I can then go to

00:27:13,920 --> 00:27:18,660
another node or what I can do which we

00:27:16,230 --> 00:27:21,809
usually do is set up virtual IP as a

00:27:18,660 --> 00:27:23,850
resource in the cluster and then used to

00:27:21,809 --> 00:27:26,070
connect to that connect the hawk on the

00:27:23,850 --> 00:27:28,800
virtual IP because if the note that i'm

00:27:26,070 --> 00:27:30,570
connecting to fails the virtual IP will

00:27:28,800 --> 00:27:32,760
move to another node as a cluster

00:27:30,570 --> 00:27:35,370
resource and i can continue to use hawk

00:27:32,760 --> 00:27:36,929
there so we just you know I just reload

00:27:35,370 --> 00:27:38,880
I'm now on the other node but I don't

00:27:36,929 --> 00:27:40,800
even know this because the cluster is

00:27:38,880 --> 00:27:43,100
managed everything so that's kind of

00:27:40,800 --> 00:27:43,100
works

00:27:45,059 --> 00:27:47,120
you

00:27:47,399 --> 00:27:54,299
yeah so that's kind of one of the

00:27:49,879 --> 00:27:56,639
special things about the pacemaker and H

00:27:54,299 --> 00:27:59,369
a stack that we have is that there is no

00:27:56,639 --> 00:28:01,440
master node there is no controlling node

00:27:59,369 --> 00:28:03,469
that you configure and that if that

00:28:01,440 --> 00:28:06,269
crashes you can't access your cluster or

00:28:03,469 --> 00:28:08,399
everything gets difficult every node is

00:28:06,269 --> 00:28:10,679
like an equal member so the cluster

00:28:08,399 --> 00:28:12,149
itself will decide on one no that's the

00:28:10,679 --> 00:28:13,830
master right now but it will

00:28:12,149 --> 00:28:15,299
automatically move to another node and

00:28:13,830 --> 00:28:16,710
you don't have to connect that node to

00:28:15,299 --> 00:28:18,359
configure anything you can connect to

00:28:16,710 --> 00:28:21,359
any node and the configuration is

00:28:18,359 --> 00:28:23,940
automatically moved down on all the

00:28:21,359 --> 00:28:28,190
notes at once so it's all transactional

00:28:23,940 --> 00:28:28,190
and and clean that way yeah

00:28:30,310 --> 00:28:34,330
you

00:28:31,700 --> 00:28:34,330
alright

00:28:34,990 --> 00:28:41,320
ok that's it done any other questions

00:28:38,440 --> 00:28:44,200
that you have I mean this is all open

00:28:41,320 --> 00:28:49,720
source on github as well so it's all in

00:28:44,200 --> 00:28:53,230
in in the open sue sir so we we have the

00:28:49,720 --> 00:28:57,820
devil project there you can file issues

00:28:53,230 --> 00:29:03,610
on github or via the Susa buggy maxilla

00:28:57,820 --> 00:29:06,429
and we have mailing lists and wikis and

00:29:03,610 --> 00:29:15,179
forums and all that kind of stuff if you

00:29:06,429 --> 00:29:15,179
have any questions all right thanks

00:29:24,419 --> 00:29:26,480

YouTube URL: https://www.youtube.com/watch?v=9ZBCuXQe4Oo


