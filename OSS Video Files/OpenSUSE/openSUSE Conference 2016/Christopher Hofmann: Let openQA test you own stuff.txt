Title: Christopher Hofmann: Let openQA test you own stuff
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/986-let-openqa-test-you-own-stuff

OpenQA is openSUSE's powerful installation testing environment. It normally tests whole ISO images that need to be mastered first it is not very straightforward to check single packages within the development process of new features or bug fixes. I'll show you how we managed to test our stuff as early as possible without mastering whole ISOs and how we enabled our developers to easily adapt existing openQA tests to changes in YaST's behaviour and user interface to be able to deliver updated openQA tests along with updated YaST versions.

Christopher Hofmann
Captions: 
	00:00:09,620 --> 00:00:16,049
my name is Christopher Othman i'm

00:00:13,430 --> 00:00:25,460
working for Susie for quite a while now

00:00:16,049 --> 00:00:28,470
it's actually 16 years now and after I

00:00:25,460 --> 00:00:33,290
spent a while in different other teams

00:00:28,470 --> 00:00:36,540
for example also the opensuse team I

00:00:33,290 --> 00:00:40,499
think it was about four years ago when

00:00:36,540 --> 00:00:43,559
we kind of started a continued

00:00:40,499 --> 00:00:48,769
developing also open to a we took it

00:00:43,559 --> 00:00:53,329
over phone banner ad man and after I

00:00:48,769 --> 00:00:57,870
change to the Y US team two years ago

00:00:53,329 --> 00:01:02,699
was kind of good coincidence that we

00:00:57,870 --> 00:01:07,290
also decided in the US team to use open

00:01:02,699 --> 00:01:15,049
QA a bit so as actually this talk should

00:01:07,290 --> 00:01:19,350
not be about basics of open QA it's just

00:01:15,049 --> 00:01:23,399
to explain it in a nutshell evacuate has

00:01:19,350 --> 00:01:27,780
our installation process and more less

00:01:23,399 --> 00:01:30,810
does this by just sending key presses to

00:01:27,780 --> 00:01:36,799
QA more instance where an installation

00:01:30,810 --> 00:01:39,689
is running and it takes back if whether

00:01:36,799 --> 00:01:43,289
that happens what should happen by

00:01:39,689 --> 00:01:45,810
matching screenshots this is more or

00:01:43,289 --> 00:01:54,829
less like the famous monkey and a

00:01:45,810 --> 00:01:57,929
typewriter more or less and since the

00:01:54,829 --> 00:02:01,890
installation process is let's say nearly

00:01:57,929 --> 00:02:03,570
one hundred percent just we as the US

00:02:01,890 --> 00:02:08,940
team and what we are diwali up

00:02:03,570 --> 00:02:12,990
developing effects a test run of open

00:02:08,940 --> 00:02:17,610
Claire quite a lot so whenever we change

00:02:12,990 --> 00:02:18,970
something it is most likely that we even

00:02:17,610 --> 00:02:22,720
break a test

00:02:18,970 --> 00:02:25,810
in open QA because even a slight change

00:02:22,720 --> 00:02:32,260
in the UI for example let's test run

00:02:25,810 --> 00:02:36,280
fail and since we are in the meanwhile

00:02:32,260 --> 00:02:39,520
also working together with the with a UI

00:02:36,280 --> 00:02:48,430
design team this happens quite often

00:02:39,520 --> 00:02:52,450
that we change actually a UI and what to

00:02:48,430 --> 00:02:55,150
do now what how to avoid those breakages

00:02:52,450 --> 00:03:01,030
as much as possible and had our help our

00:02:55,150 --> 00:03:04,420
QA department we should test as soon as

00:03:01,030 --> 00:03:08,320
possible so if we change something in

00:03:04,420 --> 00:03:12,490
just then we should even always keep in

00:03:08,320 --> 00:03:17,160
mind that this might somehow affect open

00:03:12,490 --> 00:03:22,570
QA and QA department and so we can even

00:03:17,160 --> 00:03:25,750
kind of worn and the people from QA that

00:03:22,570 --> 00:03:32,830
we changed something what they should

00:03:25,750 --> 00:03:36,730
expect to break test run and what we

00:03:32,830 --> 00:03:41,489
also try to do is that we can even maybe

00:03:36,730 --> 00:03:45,070
deliver an adopted test run or the

00:03:41,489 --> 00:03:58,900
matching screenshots together with a new

00:03:45,070 --> 00:04:01,870
feature yeah so to be able to test what

00:03:58,900 --> 00:04:04,180
we changed we of course need to get our

00:04:01,870 --> 00:04:09,130
new software on your packages into us

00:04:04,180 --> 00:04:14,500
into the open QA since open q 8s iso

00:04:09,130 --> 00:04:17,680
images the obvious thing would be let's

00:04:14,500 --> 00:04:20,229
create iso images and test it and maybe

00:04:17,680 --> 00:04:23,830
even on every package submission of any

00:04:20,229 --> 00:04:27,270
just package but since mastering a DVD

00:04:23,830 --> 00:04:31,470
image takes quite some time and this

00:04:27,270 --> 00:04:34,169
need some resources maybe the better

00:04:31,470 --> 00:04:36,449
approach would be just packed together

00:04:34,169 --> 00:04:40,650
what we changed put it in a dr update

00:04:36,449 --> 00:04:45,120
disk i hope you know this feature

00:04:40,650 --> 00:04:47,940
actually you can yeah i'll show you

00:04:45,120 --> 00:04:51,599
later you put all the changed stuff on

00:04:47,940 --> 00:04:54,539
the driver / disk and this just contains

00:04:51,599 --> 00:04:58,759
a few packages it's easily to master all

00:04:54,539 --> 00:05:06,090
easy to master and then you can feed it

00:04:58,759 --> 00:05:09,270
into open QA and this is yeah to create

00:05:06,090 --> 00:05:12,300
such a driver play disc there's a nice

00:05:09,270 --> 00:05:14,849
command it's actually developed by one

00:05:12,300 --> 00:05:18,990
of our team members and there's extra

00:05:14,849 --> 00:05:23,250
package for that just use this command

00:05:18,990 --> 00:05:27,449
line then you drive up it is falls out

00:05:23,250 --> 00:05:29,659
put it on an ftp server and then if you

00:05:27,449 --> 00:05:32,990
are kind of familiar with open QA

00:05:29,659 --> 00:05:37,020
schedule a test run with this parameter

00:05:32,990 --> 00:05:44,190
to let in just include the driver update

00:05:37,020 --> 00:05:51,150
disk into into the boot into the

00:05:44,190 --> 00:05:54,240
instances sorry to do this you of course

00:05:51,150 --> 00:05:57,509
need a shell access to the machine who

00:05:54,240 --> 00:06:00,919
actually runs the test and if we would

00:05:57,509 --> 00:06:03,630
use the official instances of open QA

00:06:00,919 --> 00:06:05,520
and if every developer who wants to test

00:06:03,630 --> 00:06:09,229
something needs access to that machine

00:06:05,520 --> 00:06:09,229
and this is obviously not a good idea

00:06:10,250 --> 00:06:20,400
and to develop tests and enhance tests

00:06:17,669 --> 00:06:25,740
you need this access more or less anyway

00:06:20,400 --> 00:06:27,779
so most the most obvious most best idea

00:06:25,740 --> 00:06:31,560
would be just run your own open QA

00:06:27,779 --> 00:06:36,199
instance on your machine but if you

00:06:31,560 --> 00:06:36,199
don't develop open creators that much

00:06:36,550 --> 00:06:43,450
you don't need it that often and after a

00:06:40,450 --> 00:06:48,490
while of not using it you need to update

00:06:43,450 --> 00:06:51,070
everything let's say after 22 months you

00:06:48,490 --> 00:06:52,960
need to update everything the testing

00:06:51,070 --> 00:06:55,810
software itself and the test runs and

00:06:52,960 --> 00:06:59,890
all the needles and this is annoying

00:06:55,810 --> 00:07:07,450
effort that not everyone has to do on

00:06:59,890 --> 00:07:10,480
its own so what we did in our team we

00:07:07,450 --> 00:07:15,280
decided to get a known of it weighs over

00:07:10,480 --> 00:07:18,550
for our team where we can always offer

00:07:15,280 --> 00:07:20,650
our team members running open clear

00:07:18,550 --> 00:07:24,160
instance where they also can go and

00:07:20,650 --> 00:07:27,490
develop develop and the side effect is

00:07:24,160 --> 00:07:29,620
that is much more powerful than most of

00:07:27,490 --> 00:07:35,830
the desk of pershing in CF on your on

00:07:29,620 --> 00:07:41,020
your desk so it was maybe a bit fast

00:07:35,830 --> 00:07:45,010
with this slide but how can one develop

00:07:41,020 --> 00:07:46,600
tests on a machine or how can several

00:07:45,010 --> 00:07:48,840
people together develop tests on a

00:07:46,600 --> 00:07:53,490
machine without breaking the other guys

00:07:48,840 --> 00:07:58,030
stuff because the installation process

00:07:53,490 --> 00:07:59,860
needs a specific order of tests two more

00:07:58,030 --> 00:08:02,730
less get a running system out of it and

00:07:59,860 --> 00:08:06,820
if at some point it breaks for example

00:08:02,730 --> 00:08:09,820
if it breaks in the timezone selection

00:08:06,820 --> 00:08:13,300
the installation cannot continue and

00:08:09,820 --> 00:08:15,910
this if I change the time zone tests and

00:08:13,300 --> 00:08:18,850
it breaks for a reason someone else that

00:08:15,910 --> 00:08:21,190
wants to change another test cannot test

00:08:18,850 --> 00:08:26,440
his own stuff because he doesn't get to

00:08:21,190 --> 00:08:29,470
that point so we need we needed a way

00:08:26,440 --> 00:08:32,550
how several people can have their own

00:08:29,470 --> 00:08:35,710
code on the same open QA instance and

00:08:32,550 --> 00:08:39,280
there's a nice feature in open QA that

00:08:35,710 --> 00:08:41,790
we of course obviously need we can test

00:08:39,280 --> 00:08:44,230
several distributions there in parallel

00:08:41,790 --> 00:08:45,550
which have owned their own test

00:08:44,230 --> 00:08:46,800
repositories their own kneeled

00:08:45,550 --> 00:08:51,510
repositories

00:08:46,800 --> 00:08:55,940
and we can abuse this just to create

00:08:51,510 --> 00:09:02,430
kind of a fake distribution per user

00:08:55,940 --> 00:09:07,709
where we can in parallel develop without

00:09:02,430 --> 00:09:12,300
affecting each other and okay this this

00:09:07,709 --> 00:09:14,850
console output might be a bit strange

00:09:12,300 --> 00:09:17,820
but it small as the directory structure

00:09:14,850 --> 00:09:21,779
of open carry all the tests on the test

00:09:17,820 --> 00:09:23,640
directory and let's say a user can he

00:09:21,779 --> 00:09:25,920
wants to create his own distribution for

00:09:23,640 --> 00:09:29,959
himself to develop he creates just the

00:09:25,920 --> 00:09:33,779
directory in this test directory where

00:09:29,959 --> 00:09:36,089
for example has also the opensuse

00:09:33,779 --> 00:09:39,000
ainsley are the racial distributions we

00:09:36,089 --> 00:09:46,040
are usually testing and so kenny creates

00:09:39,000 --> 00:09:49,640
his own distribution even can fork the

00:09:46,040 --> 00:09:53,579
tests of Oban clay and his own

00:09:49,640 --> 00:09:56,810
repository where he can develop and

00:09:53,579 --> 00:10:01,700
after he finished his development he can

00:09:56,810 --> 00:10:01,700
open a poll request to upstream open QA

00:10:04,760 --> 00:10:12,480
after cloning all that stuff in there is

00:10:10,020 --> 00:10:16,079
still left to create a few other

00:10:12,480 --> 00:10:19,550
directories which is somehow not so

00:10:16,079 --> 00:10:22,770
straightforward but it's as it works

00:10:19,550 --> 00:10:27,000
stick create also a subdirectory under

00:10:22,770 --> 00:10:31,339
the products subdirectory where the main

00:10:27,000 --> 00:10:34,350
km which is the main schedule of open QA

00:10:31,339 --> 00:10:36,630
needs to be copied from the distribution

00:10:34,350 --> 00:10:39,630
you want to base your stuff on which in

00:10:36,630 --> 00:10:42,570
this case is opensuse and then you also

00:10:39,630 --> 00:10:45,120
need the needles directory short

00:10:42,570 --> 00:10:47,130
explanation the needles are those things

00:10:45,120 --> 00:10:51,920
that you try to find a nun haystack

00:10:47,130 --> 00:10:54,480
which means those are the screenshots

00:10:51,920 --> 00:10:57,690
who you compare

00:10:54,480 --> 00:11:01,500
the screen output of QM were with to

00:10:57,690 --> 00:11:05,310
find out whether you see what you

00:11:01,500 --> 00:11:08,459
expected to see and those are obviously

00:11:05,310 --> 00:11:10,980
this different between those main

00:11:08,459 --> 00:11:12,630
distributions slee and opensuse because

00:11:10,980 --> 00:11:16,199
we have a different key cleaning their

00:11:12,630 --> 00:11:19,199
the just on less black background and

00:11:16,199 --> 00:11:21,360
the one and opensuse is until now at

00:11:19,199 --> 00:11:23,010
least gray background it so we have

00:11:21,360 --> 00:11:25,470
different screen shots for different

00:11:23,010 --> 00:11:28,860
distributions and so if you want to base

00:11:25,470 --> 00:11:34,760
a base you take this debut shin on that

00:11:28,860 --> 00:11:39,170
in this case use the opensuse needles

00:11:34,760 --> 00:11:48,329
and this is what the result of all this

00:11:39,170 --> 00:11:51,149
and after you created your fake

00:11:48,329 --> 00:11:57,060
distribution you can use the you can

00:11:51,149 --> 00:11:59,760
schedule chops in this case the best

00:11:57,060 --> 00:12:04,829
offer is usually the tool clone shop

00:11:59,760 --> 00:12:08,490
which I clones already existing old test

00:12:04,829 --> 00:12:11,490
runs with some tuned value variables in

00:12:08,490 --> 00:12:15,139
this case you have to you clone the

00:12:11,490 --> 00:12:22,800
existing already old existing test run

00:12:15,139 --> 00:12:26,610
171 and overwrite the parameter history

00:12:22,800 --> 00:12:31,470
with the new own distribution name which

00:12:26,610 --> 00:12:32,970
is Kenny and so you cover the open

00:12:31,470 --> 00:12:37,019
source of distribution you want to test

00:12:32,970 --> 00:12:40,050
with your own that it uses its on your

00:12:37,019 --> 00:12:44,880
own test directory your own needles and

00:12:40,050 --> 00:12:47,120
your own tests and you get a nice test

00:12:44,880 --> 00:12:47,120
run

00:12:48,110 --> 00:13:01,700
yeah let me just check where I am and so

00:12:57,110 --> 00:13:09,589
we can share one machine to for several

00:13:01,700 --> 00:13:14,300
people to develop death of course this

00:13:09,589 --> 00:13:18,769
is not the only thing what we definitely

00:13:14,300 --> 00:13:22,040
are what help does a lot is that we talk

00:13:18,769 --> 00:13:26,630
much more to with open headed QA

00:13:22,040 --> 00:13:29,959
Department so in all of our print

00:13:26,630 --> 00:13:32,899
meetings in so means sprint planning

00:13:29,959 --> 00:13:35,120
sprint EVO review meetings and stand-up

00:13:32,899 --> 00:13:37,940
meetings we have someone from the QA

00:13:35,120 --> 00:13:43,930
department that we can really directly

00:13:37,940 --> 00:13:48,040
contact is this guy here your fav and

00:13:43,930 --> 00:13:51,140
this helped us also a lot to avoid

00:13:48,040 --> 00:13:53,750
duplicates in work also this doesn't

00:13:51,140 --> 00:13:56,240
work everywhere we had this case where

00:13:53,750 --> 00:13:58,790
two recently this case we're actually QA

00:13:56,240 --> 00:14:04,540
and our self develop the same test but

00:13:58,790 --> 00:14:09,350
we found this out is quite early yeah

00:14:04,540 --> 00:14:13,910
then what else can we do with this with

00:14:09,350 --> 00:14:15,440
our own testing machine of course if you

00:14:13,910 --> 00:14:17,870
have a powerful machine you want to do

00:14:15,440 --> 00:14:19,910
you want to automate stuff what I'm

00:14:17,870 --> 00:14:22,610
planning for the future is actually i

00:14:19,910 --> 00:14:25,970
also want to i want to create those

00:14:22,610 --> 00:14:29,930
drive up the disk in an automatic way as

00:14:25,970 --> 00:14:33,170
soon maybe even but uncheck in so

00:14:29,930 --> 00:14:35,480
something with Jenkins that we create a

00:14:33,170 --> 00:14:38,990
drive up there disk and feed this

00:14:35,480 --> 00:14:43,640
automatically to our test runs this

00:14:38,990 --> 00:14:47,029
might help us in have even less work

00:14:43,640 --> 00:14:51,160
with testing and support QA department

00:14:47,029 --> 00:14:51,160
with that but I'm not yet at this point

00:14:52,990 --> 00:15:00,769
another side to this so i was a bit

00:14:57,139 --> 00:15:03,860
faster than expected that I guess you

00:15:00,769 --> 00:15:12,769
have some questions about that and feel

00:15:03,860 --> 00:15:16,089
free to ask them now and oh yeah someone

00:15:12,769 --> 00:15:16,089
needs a microphone

00:15:25,990 --> 00:15:30,820
you can also use sign language if you

00:15:28,610 --> 00:15:30,820
want

00:15:45,850 --> 00:15:59,590
so Hannah is off okay the maybe the PA

00:15:54,530 --> 00:16:03,080
guy can't rise the slider I was working

00:15:59,590 --> 00:16:04,580
so I'm not too familiar with open QA but

00:16:03,080 --> 00:16:07,040
I was wondering if it's able to test

00:16:04,580 --> 00:16:10,220
things which are not big installation

00:16:07,040 --> 00:16:12,590
but rather for example web application

00:16:10,220 --> 00:16:17,330
running in a browser can you simulate a

00:16:12,590 --> 00:16:19,370
test of clicking and using a web

00:16:17,330 --> 00:16:24,770
application within this operating system

00:16:19,370 --> 00:16:26,660
so with the from the yes side filming

00:16:24,770 --> 00:16:28,580
ask you actually we only care about

00:16:26,660 --> 00:16:31,610
installation Wallace and this that the

00:16:28,580 --> 00:16:34,580
system is usable open clay if you ever

00:16:31,610 --> 00:16:37,850
checked it I've never if you checked our

00:16:34,580 --> 00:16:42,470
instances the even test applications one

00:16:37,850 --> 00:16:44,930
of them is also Firefox but testing a

00:16:42,470 --> 00:16:50,060
web application would actually include

00:16:44,930 --> 00:16:53,570
something like use boot at existing

00:16:50,060 --> 00:16:55,640
installed image this is possible start

00:16:53,570 --> 00:16:57,800
your application and then tried to use

00:16:55,640 --> 00:17:00,860
your web application but mouse clicks is

00:16:57,800 --> 00:17:02,600
something we did not use yet it does

00:17:00,860 --> 00:17:03,980
support mouse clicks it does work we

00:17:02,600 --> 00:17:06,620
have used it for testing the open

00:17:03,980 --> 00:17:08,810
queuing web UI so okay you can't do the

00:17:06,620 --> 00:17:10,670
short answer is apparently you do back

00:17:08,810 --> 00:17:13,850
then when I was when we develop that

00:17:10,670 --> 00:17:16,160
mouse was not really good to use it had

00:17:13,850 --> 00:17:22,699
its bad days but it's better than you

00:17:16,160 --> 00:17:25,069
had a question culo has questions what

00:17:22,699 --> 00:17:26,480
are wondering is on who is responsible

00:17:25,069 --> 00:17:28,850
and on what schedule are you updating

00:17:26,480 --> 00:17:31,490
the instance and the tests your face

00:17:28,850 --> 00:17:33,230
your development on so it's Colin a

00:17:31,490 --> 00:17:37,580
deteriorating sprint meetings or you're

00:17:33,230 --> 00:17:39,410
just floating the point is that I did

00:17:37,580 --> 00:17:42,190
not really very good understand you

00:17:39,410 --> 00:17:42,190
because the speakers

00:17:45,250 --> 00:17:53,419
on what on what time frame and who are

00:17:50,480 --> 00:17:55,400
you coordinating the updating of the

00:17:53,419 --> 00:17:59,750
system and the tests that you are

00:17:55,400 --> 00:18:01,789
developing on the test development is

00:17:59,750 --> 00:18:04,850
more or less just a manual thing so

00:18:01,789 --> 00:18:07,340
someone gets the chop someone in our

00:18:04,850 --> 00:18:10,100
team gets the chop you implemented a

00:18:07,340 --> 00:18:11,929
feature please write a test for it and

00:18:10,100 --> 00:18:14,000
then someone needs a test and pass this

00:18:11,929 --> 00:18:16,580
manually so and after men we are

00:18:14,000 --> 00:18:18,590
scheduling manually testing developing

00:18:16,580 --> 00:18:21,049
and testing the test can do to your

00:18:18,590 --> 00:18:23,659
submit request that's not that we

00:18:21,049 --> 00:18:25,429
automatically use it for now what I want

00:18:23,659 --> 00:18:27,380
to do is in future of course it's doing

00:18:25,429 --> 00:18:32,860
something like that it is not yet the

00:18:27,380 --> 00:18:35,960
case but the system like the open QE

00:18:32,860 --> 00:18:37,940
insulation you mean how I update the

00:18:35,960 --> 00:18:41,179
urban core installation yeah who does

00:18:37,940 --> 00:18:49,490
this and it's also coordinating sin the

00:18:41,179 --> 00:18:51,950
team usually so far I do this and the we

00:18:49,490 --> 00:18:53,870
have a crunch up for for the needle for

00:18:51,950 --> 00:18:56,659
fitting using fetch needles this stuff

00:18:53,870 --> 00:18:59,690
is updated a kind of every 15 minutes

00:18:56,659 --> 00:19:02,210
something like that but the open carry

00:18:59,690 --> 00:19:04,610
itself I update when I see it as

00:19:02,210 --> 00:19:12,380
appropriate which was recently the case

00:19:04,610 --> 00:19:13,970
when you changed the UI a bit as soon as

00:19:12,380 --> 00:19:16,039
we notice that something does not work

00:19:13,970 --> 00:19:17,929
as expected or different than on the

00:19:16,039 --> 00:19:21,020
official instance I know that I need to

00:19:17,929 --> 00:19:32,830
update something but the tests and the

00:19:21,020 --> 00:19:32,830
nails are always up to date no one else

00:19:35,580 --> 00:19:54,090
okay then I'm still a bit early but so

00:19:54,510 --> 00:20:02,440
thank you for listening my top join the

00:19:58,330 --> 00:20:05,860
conversation as the presentation

00:20:02,440 --> 00:20:08,070
templates are just have a lot of fun in

00:20:05,860 --> 00:20:08,070

YouTube URL: https://www.youtube.com/watch?v=mBgXoRWXuRs


