Title: Richard Brown: openQA - Avoiding Disasters of Biblical Proportions
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/956-openqa-avoiding-disasters-of-biblical-proportions

What do we mean, biblical? 40 years of darkness, earthquakes, volcanos, human sacrifice, mass hysteria, dogs and cats living together... and on that note, did you know that openQA is used by both openSUSE and Fedora? What is so awesome about this tool that traditional distribution enemies are now working together?

openQA is an automated testing tool, capable of full system, console, and graphical application testing. This session will give an introduction to openQA's capabilities, share how it is used by openSUSE for the testing of Tumbleweed and Leap, and suggest ideas to attendees as how it could be used for testing their software, operating systems, or virtual machine images.

Richard Brown
Captions: 
	00:00:07,560 --> 00:00:15,930
Halon great i'll start so thanks

00:00:11,850 --> 00:00:19,380
everyone for coming I'm Richard Brown

00:00:15,930 --> 00:00:22,410
and cue a technical lead for Souza with

00:00:19,380 --> 00:00:27,720
open QA and I'm going to talk today

00:00:22,410 --> 00:00:29,340
about open QA how we're using it and how

00:00:27,720 --> 00:00:32,160
other projects could also be using it

00:00:29,340 --> 00:00:33,510
for testing their stuff and first I kind

00:00:32,160 --> 00:00:35,610
of have to address the elephant in the

00:00:33,510 --> 00:00:37,260
room you might have noticed this

00:00:35,610 --> 00:00:40,470
presentation doesn't just have an open

00:00:37,260 --> 00:00:42,059
Souza logo on it I'm kind of doubling

00:00:40,470 --> 00:00:44,580
here because I first did this

00:00:42,059 --> 00:00:48,780
presentation with a fellow from Red Hat

00:00:44,580 --> 00:00:51,030
Adam Williamson who is also using open

00:00:48,780 --> 00:00:54,360
QA they're using it for for testing

00:00:51,030 --> 00:00:57,360
fedora and so things are a little bit

00:00:54,360 --> 00:00:59,930
different than the olden days where you

00:00:57,360 --> 00:01:02,670
know everything used to be like this and

00:00:59,930 --> 00:01:05,460
instead life is actually much more like

00:01:02,670 --> 00:01:10,320
this these days and how the heck did we

00:01:05,460 --> 00:01:12,750
get there what the heck is going on what

00:01:10,320 --> 00:01:14,899
could possibly bring these two great

00:01:12,750 --> 00:01:19,549
enemies of open source together and

00:01:14,899 --> 00:01:22,500
ultimately the starting point of it is

00:01:19,549 --> 00:01:25,520
testing is hard everybody who's ever

00:01:22,500 --> 00:01:27,690
done anything with any software ever

00:01:25,520 --> 00:01:29,280
reaches some point where they realize

00:01:27,690 --> 00:01:31,890
it's impossible for them to test

00:01:29,280 --> 00:01:33,780
everything everything they need to test

00:01:31,890 --> 00:01:35,250
everything they want to test and yet

00:01:33,780 --> 00:01:39,930
somehow they still have to deliver this

00:01:35,250 --> 00:01:42,630
software at equality that works and when

00:01:39,930 --> 00:01:44,850
you're looking at a scale of not just a

00:01:42,630 --> 00:01:48,090
did not just a single software project

00:01:44,850 --> 00:01:50,040
but a distribution it gets even more

00:01:48,090 --> 00:01:53,549
complicated it gets even worse in fact

00:01:50,040 --> 00:01:55,259
it's absolutely downright terrible and

00:01:53,549 --> 00:01:56,640
first I'm going to blame the upstream

00:01:55,259 --> 00:02:00,869
because I just saw Martin from Katie you

00:01:56,640 --> 00:02:03,630
walk in upstream projects are moving

00:02:00,869 --> 00:02:06,210
fast really fast you know the colonel

00:02:03,630 --> 00:02:08,690
colonel for that basically pumping out a

00:02:06,210 --> 00:02:11,430
new minor version every three months

00:02:08,690 --> 00:02:14,760
noam pumping out their new versions

00:02:11,430 --> 00:02:16,110
every six months Katie every or three

00:02:14,760 --> 00:02:19,890
months for plasma two months for

00:02:16,110 --> 00:02:21,970
frameworks I lose track hmm one month or

00:02:19,890 --> 00:02:24,880
framework see even faster

00:02:21,970 --> 00:02:26,650
and that's incredibly hard to track all

00:02:24,880 --> 00:02:27,940
of that stuff every time something

00:02:26,650 --> 00:02:31,120
changes you have to worry about all the

00:02:27,940 --> 00:02:33,120
potential integration points even when

00:02:31,120 --> 00:02:35,920
those up streams are being incredibly

00:02:33,120 --> 00:02:37,660
responsible and reliable there's lots of

00:02:35,920 --> 00:02:39,370
stuff that they will be out of their

00:02:37,660 --> 00:02:43,120
scope which others distribution projects

00:02:39,370 --> 00:02:45,880
have to worry about and when it's moving

00:02:43,120 --> 00:02:47,260
that quickly you're testing framework

00:02:45,880 --> 00:02:48,810
has to be able to keep up your testing

00:02:47,260 --> 00:02:51,430
tools have to be able to keep up and

00:02:48,810 --> 00:02:55,870
that is an exceptionally hard place to

00:02:51,430 --> 00:02:58,180
work out at the same time many of our

00:02:55,870 --> 00:03:00,430
users expectations are equally moving

00:02:58,180 --> 00:03:01,810
faster and faster this is the thing that

00:03:00,430 --> 00:03:04,810
killed a KDE are trying to deal with

00:03:01,810 --> 00:03:06,640
with things like neon where there are

00:03:04,810 --> 00:03:08,320
definitely users out there who want to

00:03:06,640 --> 00:03:11,530
the latest and greatest of everything as

00:03:08,320 --> 00:03:13,900
fast as they possibly can we try and

00:03:11,530 --> 00:03:16,120
solve that with tumbleweed are to solve

00:03:13,900 --> 00:03:18,040
that with us Linux and then of course

00:03:16,120 --> 00:03:22,660
there's a lot of other various different

00:03:18,040 --> 00:03:25,360
means out there OBS copper PPA aur for

00:03:22,660 --> 00:03:27,010
adding additional stuff on top to get

00:03:25,360 --> 00:03:30,010
that kind of piece of software delivery

00:03:27,010 --> 00:03:31,239
that uses a very often asking for you

00:03:30,010 --> 00:03:33,640
also have a bunch of users who don't

00:03:31,239 --> 00:03:37,959
want that and like it's slower that's a

00:03:33,640 --> 00:03:40,870
different story and partly as a result

00:03:37,959 --> 00:03:42,940
of these two factors but I think also

00:03:40,870 --> 00:03:44,380
maybe because you know we're developers

00:03:42,940 --> 00:03:46,000
and we just have a really bad habit of

00:03:44,380 --> 00:03:48,610
doing fun stuff because we find it

00:03:46,000 --> 00:03:50,320
interesting distribution projects in

00:03:48,610 --> 00:03:53,980
particular are offering more more stuff

00:03:50,320 --> 00:03:55,420
in more different ways things like

00:03:53,980 --> 00:03:56,950
fedora with their three different

00:03:55,420 --> 00:03:58,690
editions for workstation cloud and

00:03:56,950 --> 00:04:01,570
server because that's their way of

00:03:58,690 --> 00:04:03,010
thinking they can model these problems

00:04:01,570 --> 00:04:05,170
of different users wanting different

00:04:03,010 --> 00:04:07,450
things at a different pace we do it as

00:04:05,170 --> 00:04:11,230
well we have leap and we have tumbleweed

00:04:07,450 --> 00:04:13,630
and even beyond that looking at things

00:04:11,230 --> 00:04:16,750
like modularization in this case I mean

00:04:13,630 --> 00:04:18,669
like the Fedora idea of modular ization

00:04:16,750 --> 00:04:20,680
where everything is kind of built as a

00:04:18,669 --> 00:04:22,150
module when you basically Lego bricks is

00:04:20,680 --> 00:04:26,500
how people should be consuming this

00:04:22,150 --> 00:04:29,229
thing containers docker juice or add

00:04:26,500 --> 00:04:32,140
extra layers to this suz's module in as

00:04:29,229 --> 00:04:34,390
well adds a whole nother complete

00:04:32,140 --> 00:04:34,580
spectrum of potential ways that all of

00:04:34,390 --> 00:04:37,220
the

00:04:34,580 --> 00:04:39,470
software is going to be delivered and is

00:04:37,220 --> 00:04:43,550
meant to work together and so you end up

00:04:39,470 --> 00:04:45,349
with something like this which when I

00:04:43,550 --> 00:04:47,030
first put this slide together that was

00:04:45,349 --> 00:04:51,409
basically my interpretation of my test

00:04:47,030 --> 00:04:53,300
plan but in fact it's also the same

00:04:51,409 --> 00:04:55,009
interpretation of most of our product

00:04:53,300 --> 00:04:58,069
requirement documents and most of our

00:04:55,009 --> 00:05:00,979
feature sets now all of these things all

00:04:58,069 --> 00:05:02,719
have to somehow work together and we're

00:05:00,979 --> 00:05:04,159
not doing our job right if we can't make

00:05:02,719 --> 00:05:07,250
sure that we're actually delivering

00:05:04,159 --> 00:05:10,090
something that works like that and

00:05:07,250 --> 00:05:13,069
that's an absolute nightmare because

00:05:10,090 --> 00:05:14,870
you've you know you've got a test every

00:05:13,069 --> 00:05:17,270
possible permutation that could possibly

00:05:14,870 --> 00:05:20,990
be there and it's pretty much impossible

00:05:17,270 --> 00:05:22,699
but whenever I talk to this to establish

00:05:20,990 --> 00:05:24,020
guys out in the field day you say well

00:05:22,699 --> 00:05:26,270
we have all these wonderful new

00:05:24,020 --> 00:05:28,909
technologies and methodologies and

00:05:26,270 --> 00:05:30,529
concepts and just you know follow the

00:05:28,909 --> 00:05:32,360
follow these ideas that you know the

00:05:30,529 --> 00:05:36,080
DevOps guys are doing use containers for

00:05:32,360 --> 00:05:38,330
everything Youth Jenkins use you know

00:05:36,080 --> 00:05:41,960
traditional CI tues you used you know

00:05:38,330 --> 00:05:48,710
Garrett use docker use docker use docker

00:05:41,960 --> 00:05:51,159
use docker and these tools are great but

00:05:48,710 --> 00:05:54,440
they typically solve problems for

00:05:51,159 --> 00:05:55,879
application and library developers the

00:05:54,440 --> 00:05:57,500
sort of the bleeding edge that the first

00:05:55,879 --> 00:05:59,719
line the ones are at Leon the upstream

00:05:57,500 --> 00:06:02,659
is in many cases of you know they're

00:05:59,719 --> 00:06:05,509
working on their one thing and they need

00:06:02,659 --> 00:06:07,099
to test that one thing I tested in a

00:06:05,509 --> 00:06:08,719
nice environment which is why something

00:06:07,099 --> 00:06:11,900
like dr. in particular really gets a lot

00:06:08,719 --> 00:06:14,360
of attention but when we're building

00:06:11,900 --> 00:06:15,729
distributions as much as we like to

00:06:14,360 --> 00:06:18,949
think of ourselves as developers we

00:06:15,729 --> 00:06:20,839
don't really write code that's not our

00:06:18,949 --> 00:06:22,460
first and primary purpose we are

00:06:20,839 --> 00:06:26,000
distribution engineers we build

00:06:22,460 --> 00:06:27,919
distributions and ultimately that's also

00:06:26,000 --> 00:06:29,060
what I users want us to do that's not

00:06:27,919 --> 00:06:30,349
what they're paying us for it's what

00:06:29,060 --> 00:06:33,020
they're downloading our distributions

00:06:30,349 --> 00:06:36,110
for they don't care if the code we

00:06:33,020 --> 00:06:38,870
deliver works they care if it only works

00:06:36,110 --> 00:06:40,159
as part of that distribution and so we

00:06:38,870 --> 00:06:43,039
have this responsibility to make sure

00:06:40,159 --> 00:06:45,770
that it's going to work in that scope

00:06:43,039 --> 00:06:47,300
that we're delivering it in so if we're

00:06:45,770 --> 00:06:48,320
deciding to deliver it in some fancy

00:06:47,300 --> 00:06:50,360
different way

00:06:48,320 --> 00:06:52,310
we have to make sure it works in that

00:06:50,360 --> 00:06:53,690
fancy different way and if that fancy

00:06:52,310 --> 00:06:55,600
different way has 20 different ways of

00:06:53,690 --> 00:06:59,150
integrating with other modules and

00:06:55,600 --> 00:07:00,560
add-ons and God knows what else we have

00:06:59,150 --> 00:07:02,660
to find a way of making sure that it

00:07:00,560 --> 00:07:05,150
works which means we have to find a way

00:07:02,660 --> 00:07:07,310
of testing it which means we need to

00:07:05,150 --> 00:07:09,920
have a testing tool that can test not

00:07:07,310 --> 00:07:12,410
just the individual little chunks but

00:07:09,920 --> 00:07:18,080
the entire OS the entire stack as a

00:07:12,410 --> 00:07:20,780
cohesive product and this is my open QA

00:07:18,080 --> 00:07:22,850
comes into the rescue so open qac

00:07:20,780 --> 00:07:26,060
started by Bernard who I can't see in

00:07:22,850 --> 00:07:30,140
the room and my slide Decker than what

00:07:26,060 --> 00:07:32,360
there we go in 2009 and its original

00:07:30,140 --> 00:07:34,940
goal was to primarily test operating

00:07:32,360 --> 00:07:37,220
systems in fact the github project is

00:07:34,940 --> 00:07:39,550
still called OS auto industry she was

00:07:37,220 --> 00:07:41,720
basically opensuse Auto installing and

00:07:39,550 --> 00:07:44,720
that was it sort of heart and soul

00:07:41,720 --> 00:07:46,880
initially from there it developed into

00:07:44,720 --> 00:07:49,400
sort of more console testing more GUI

00:07:46,880 --> 00:07:51,220
testing and in this day and age we're

00:07:49,400 --> 00:07:54,230
now using it for testing openSUSE leap

00:07:51,220 --> 00:07:56,960
tumbleweed Slee and of course fedora

00:07:54,230 --> 00:07:58,370
using it for fedora and the main things

00:07:56,960 --> 00:08:02,030
that set it apart from all the other

00:07:58,370 --> 00:08:06,860
tools out there is one of these four

00:08:02,030 --> 00:08:09,080
main things it tests like a user it

00:08:06,860 --> 00:08:11,300
thinks like a user or we make it think

00:08:09,080 --> 00:08:13,070
like a user with our test Suites and it

00:08:11,300 --> 00:08:15,620
primarily approaches the product under

00:08:13,070 --> 00:08:17,630
testing the same way a user is going to

00:08:15,620 --> 00:08:19,400
approach it it doesn't touch any

00:08:17,630 --> 00:08:20,960
software directly you don't need to know

00:08:19,400 --> 00:08:22,400
teach at the api's you don't need to

00:08:20,960 --> 00:08:26,000
teach it some libraries or some

00:08:22,400 --> 00:08:27,440
framework or cute or gtk it controls the

00:08:26,000 --> 00:08:29,990
keyboard and the mouse the same way a

00:08:27,440 --> 00:08:31,580
user is going to want to use it when

00:08:29,990 --> 00:08:35,390
it's in their in their hands actually

00:08:31,580 --> 00:08:37,790
running in order to actually figure out

00:08:35,390 --> 00:08:40,460
what the hell's going on especially with

00:08:37,790 --> 00:08:42,110
the graphical stuff we use opencv to

00:08:40,460 --> 00:08:44,180
actually read the screen output and

00:08:42,110 --> 00:08:46,880
compare that to this concept that we

00:08:44,180 --> 00:08:49,220
have of predefined needles the simplest

00:08:46,880 --> 00:08:51,770
way of describing it is it's a

00:08:49,220 --> 00:08:54,410
screenshot compare but in reality it's a

00:08:51,770 --> 00:08:56,810
little more nuanced because that

00:08:54,410 --> 00:08:58,790
screenshot compared can just select the

00:08:56,810 --> 00:09:00,720
areas of interest which we the test

00:08:58,790 --> 00:09:03,509
writers have said we want to know that

00:09:00,720 --> 00:09:05,970
thing is there and that is what open qi

00:09:03,509 --> 00:09:08,220
compares against make sure it's there

00:09:05,970 --> 00:09:12,240
because we're using opencv this can be

00:09:08,220 --> 00:09:15,029
very very fuzzy and even that means that

00:09:12,240 --> 00:09:18,300
if you have a failure that is below your

00:09:15,029 --> 00:09:21,540
margin of acceptance but a good enough

00:09:18,300 --> 00:09:23,730
that opencv can actually find something

00:09:21,540 --> 00:09:26,819
similar to what it was looking for open

00:09:23,730 --> 00:09:28,350
puree basically also handles the oh this

00:09:26,819 --> 00:09:29,759
has changed but i think it's now this

00:09:28,350 --> 00:09:32,339
could you just confirm and it really

00:09:29,759 --> 00:09:34,620
kind of keeps that whole managing of

00:09:32,339 --> 00:09:36,389
screenshots that you would otherwise

00:09:34,620 --> 00:09:37,620
drive crazy when you have developers

00:09:36,389 --> 00:09:40,139
constantly changing how they you I

00:09:37,620 --> 00:09:43,129
looked keeps that workload down so it's

00:09:40,139 --> 00:09:45,569
very easy to move everything along and

00:09:43,129 --> 00:09:47,970
in addition to all the graphical stuff

00:09:45,569 --> 00:09:50,490
just like any decent testing framework

00:09:47,970 --> 00:09:52,620
should open QA can read plaintexts off

00:09:50,490 --> 00:09:55,230
of a serial console and reg ex is a

00:09:52,620 --> 00:09:59,459
wonderful so here's an example of a

00:09:55,230 --> 00:10:02,720
needle sorry about the example but the

00:09:59,459 --> 00:10:05,040
desktop selection screen in leap and

00:10:02,720 --> 00:10:06,779
this is actually how it works when

00:10:05,040 --> 00:10:09,600
testing and gnome installation of

00:10:06,779 --> 00:10:11,970
openSUSE leap it gets to this point in

00:10:09,600 --> 00:10:13,740
the test it's press the appropriate

00:10:11,970 --> 00:10:18,149
keyboard shortcuts in this case to make

00:10:13,740 --> 00:10:20,490
sure that gnome is selected that is all

00:10:18,149 --> 00:10:23,040
it's looking for that green box or the

00:10:20,490 --> 00:10:24,809
contents of that green box if they're

00:10:23,040 --> 00:10:25,769
not there the test fails if they're

00:10:24,809 --> 00:10:29,910
there when they don't quite look right

00:10:25,769 --> 00:10:33,269
the test fails but it doesn't care about

00:10:29,910 --> 00:10:36,389
all that other stuff so if our designers

00:10:33,269 --> 00:10:37,860
go and change the text at the top the

00:10:36,389 --> 00:10:39,779
test doesn't care at this point the user

00:10:37,860 --> 00:10:41,309
isn't necessarily going to care

00:10:39,779 --> 00:10:43,410
occasionally we have a look at make sure

00:10:41,309 --> 00:10:45,300
that hasn't gone completely wrong but

00:10:43,410 --> 00:10:46,649
the important part is we're testing can

00:10:45,300 --> 00:10:49,199
they select the thing we want them to

00:10:46,649 --> 00:10:53,699
select a quick you and make sure it's

00:10:49,199 --> 00:10:56,939
there and the test moves on but like I

00:10:53,699 --> 00:10:58,620
said not just the graphical testing we

00:10:56,939 --> 00:11:00,350
talk about this stuff because it's cool

00:10:58,620 --> 00:11:02,759
and nobody else does anything like it

00:11:00,350 --> 00:11:06,180
but in the real world not everything is

00:11:02,759 --> 00:11:08,160
graphical and therefore we do have

00:11:06,180 --> 00:11:12,209
pretty extensive support for testing

00:11:08,160 --> 00:11:14,069
console tests on a system under test we

00:11:12,209 --> 00:11:14,550
basically have three kind of main ways

00:11:14,069 --> 00:11:18,180
of right

00:11:14,550 --> 00:11:22,019
so open q8 test language is effectively

00:11:18,180 --> 00:11:23,550
its own dsl these days so its power

00:11:22,019 --> 00:11:25,500
based but we've basically written so

00:11:23,550 --> 00:11:27,870
many API functions now that very rarely

00:11:25,500 --> 00:11:30,120
touch proper pearl and you can write

00:11:27,870 --> 00:11:31,589
your scripts in that till up and QA the

00:11:30,120 --> 00:11:33,690
steps that you would do on the console

00:11:31,589 --> 00:11:35,970
and then open QA will do those steps on

00:11:33,690 --> 00:11:37,260
the console and just check over the

00:11:35,970 --> 00:11:40,050
serial that the outputs of what it

00:11:37,260 --> 00:11:43,140
expects however you don't want to bother

00:11:40,050 --> 00:11:45,899
learning all of that stuff you can just

00:11:43,140 --> 00:11:49,079
give open QA arbitrary bash Perl Python

00:11:45,899 --> 00:11:50,940
whatever script you want an open QA can

00:11:49,079 --> 00:11:52,529
deliver that with one or two commands

00:11:50,940 --> 00:11:55,769
very simply implement it into a test

00:11:52,529 --> 00:11:57,450
suite to the system under test so it

00:11:55,769 --> 00:11:59,220
effectively will download it will run

00:11:57,450 --> 00:12:01,980
that script and then can look for the

00:11:59,220 --> 00:12:03,690
output from that script so very easy way

00:12:01,980 --> 00:12:04,890
of just doing stuff in the languages

00:12:03,690 --> 00:12:07,529
you're comfortable with rather than

00:12:04,890 --> 00:12:09,029
having to learn our own and kind of as

00:12:07,529 --> 00:12:12,990
an extra variation of that you can

00:12:09,029 --> 00:12:15,420
always do something nasty like a cold

00:12:12,990 --> 00:12:17,160
pipe bash and you know one that which

00:12:15,420 --> 00:12:19,320
for testing you know isn't necessarily a

00:12:17,160 --> 00:12:25,589
bad thing and that's the dirt at the

00:12:19,320 --> 00:12:27,990
bottom when it comes to then analyzing

00:12:25,589 --> 00:12:29,790
the outputs of those scripts you've got

00:12:27,990 --> 00:12:31,770
multiple options open Qi has simple

00:12:29,790 --> 00:12:34,470
functions already there for simple

00:12:31,770 --> 00:12:37,079
string comparison if your test strips

00:12:34,470 --> 00:12:39,690
produce j unit open q i can already

00:12:37,079 --> 00:12:42,060
parse that j unit and treat it like it

00:12:39,690 --> 00:12:43,860
was a native open cure a test result you

00:12:42,060 --> 00:12:46,529
just see it on the dashboards and the

00:12:43,860 --> 00:12:49,170
tooling without any difference at all or

00:12:46,529 --> 00:12:51,630
if you want to be really fancy or you

00:12:49,170 --> 00:12:53,579
have a really complicated script then

00:12:51,630 --> 00:12:55,709
there's nothing stopping you writing

00:12:53,579 --> 00:12:57,690
custom results analysis into the open

00:12:55,709 --> 00:13:01,320
curate dsl so when your test unit runs

00:12:57,690 --> 00:13:03,390
it runs a script figures out all the

00:13:01,320 --> 00:13:04,949
output that is interested in and then

00:13:03,390 --> 00:13:07,560
you just teach open QA okay this is a

00:13:04,949 --> 00:13:10,410
pass this is a failure this is a soft

00:13:07,560 --> 00:13:14,339
failure whatever so to have a simple

00:13:10,410 --> 00:13:15,930
example hopefully this will work yep so

00:13:14,339 --> 00:13:18,750
this is like the simplest example I

00:13:15,930 --> 00:13:21,949
could find where T telling up and QA to

00:13:18,750 --> 00:13:24,149
pick the root console is that one line

00:13:21,949 --> 00:13:28,060
you teach it to run a script like in

00:13:24,149 --> 00:13:30,490
this case zipper minus n in a TPS

00:13:28,060 --> 00:13:32,170
it will do that and because it's in a

00:13:30,490 --> 00:13:34,300
search script run open cure will not

00:13:32,170 --> 00:13:35,710
just confirm that it ran it but confirm

00:13:34,300 --> 00:13:38,590
that it ran its successfully with no

00:13:35,710 --> 00:13:39,940
error conditions so already got a little

00:13:38,590 --> 00:13:40,900
bit of handling there to make sure that

00:13:39,940 --> 00:13:44,590
the package actually gets installed

00:13:40,900 --> 00:13:46,810
properly then we have another script run

00:13:44,590 --> 00:13:50,410
here where we're just curling souza calm

00:13:46,810 --> 00:13:53,200
I'm checking the HTML output and then

00:13:50,410 --> 00:13:54,490
we're running a 2 p.s against that doing

00:13:53,200 --> 00:13:57,280
a little bit of magic and making sure

00:13:54,490 --> 00:13:58,600
the thing actually work properly so if

00:13:57,280 --> 00:14:00,760
there's only one thing you take away

00:13:58,600 --> 00:14:03,250
from this presentation today please no

00:14:00,760 --> 00:14:05,530
open q8 doesn't only do graphical

00:14:03,250 --> 00:14:07,930
testing it can do whatever the heck you

00:14:05,530 --> 00:14:10,890
want the graphical testing is just the

00:14:07,930 --> 00:14:13,360
cool part we talk about the most and

00:14:10,890 --> 00:14:14,410
there's no point just testing it you've

00:14:13,360 --> 00:14:15,610
got a way about actually how do you

00:14:14,410 --> 00:14:19,210
analyze and report the results

00:14:15,610 --> 00:14:20,980
afterwards and open QA has quite a lot

00:14:19,210 --> 00:14:24,070
of work done in this area in the last

00:14:20,980 --> 00:14:25,270
two or three years so obviously if

00:14:24,070 --> 00:14:28,090
you're taking screenshots of analysis

00:14:25,270 --> 00:14:29,200
and you're doing scripts you want to

00:14:28,090 --> 00:14:31,720
have a look at those screenshots you

00:14:29,200 --> 00:14:35,500
want to have those logs all of those can

00:14:31,720 --> 00:14:39,100
be stored into open Qi every single test

00:14:35,500 --> 00:14:40,540
run also gets video recorded so nice

00:14:39,100 --> 00:14:43,000
enough uneffective doing the screenshots

00:14:40,540 --> 00:14:44,740
analysis we can just touch open QA yeah

00:14:43,000 --> 00:14:47,200
record all those frames record it at

00:14:44,740 --> 00:14:50,740
this pace and then encode it at the end

00:14:47,200 --> 00:14:52,900
so that is an incredibly useful and fun

00:14:50,740 --> 00:14:55,920
not going to be fun debugging tool but

00:14:52,900 --> 00:14:57,850
it yeah incredibly useful tool for

00:14:55,920 --> 00:14:59,140
figuring out those weird error

00:14:57,850 --> 00:15:01,690
conditions that you are never prepared

00:14:59,140 --> 00:15:03,130
to catch open QA will do a very good job

00:15:01,690 --> 00:15:05,710
of saying okay something's wrong here

00:15:03,130 --> 00:15:07,990
but you might not necessarily know

00:15:05,710 --> 00:15:09,160
exactly where it went wrong especially

00:15:07,990 --> 00:15:11,380
if your needle is looking at something

00:15:09,160 --> 00:15:13,450
at you know point2 20 and it really

00:15:11,380 --> 00:15:15,490
broke at point 10 and you just didn't

00:15:13,450 --> 00:15:16,960
notice so running the video through

00:15:15,490 --> 00:15:19,450
where you can actually see everything

00:15:16,960 --> 00:15:21,970
that opened QA did every key press every

00:15:19,450 --> 00:15:24,580
mouse click you can see exactly what's

00:15:21,970 --> 00:15:26,020
going on where it's going wrong and it's

00:15:24,580 --> 00:15:27,280
also then really good when you report

00:15:26,020 --> 00:15:29,350
the book and the developer girls know

00:15:27,280 --> 00:15:33,610
works for me and you sable is the video

00:15:29,350 --> 00:15:35,230
that shows it's broken but of course not

00:15:33,610 --> 00:15:36,370
just showing off to them you need to

00:15:35,230 --> 00:15:39,570
give the developer way of actually

00:15:36,370 --> 00:15:41,600
looking at it and reproducing it too so

00:15:39,570 --> 00:15:43,250
regardless of which builds

00:15:41,600 --> 00:15:46,579
system you're talking with open QA war

00:15:43,250 --> 00:15:50,029
you know OBS or I've forgotten the name

00:15:46,579 --> 00:15:53,360
of the Fedora one then open QA we'll

00:15:50,029 --> 00:15:56,000
keep a copy of the ISOs or the disk

00:15:53,360 --> 00:15:59,000
images that it's using and that it's

00:15:56,000 --> 00:16:01,459
producing so with open QA we do a lot of

00:15:59,000 --> 00:16:03,380
testing with VMs an open Qi will

00:16:01,459 --> 00:16:05,750
actually store the disk images

00:16:03,380 --> 00:16:08,180
afterwards so you can then have a nav

00:16:05,750 --> 00:16:10,250
another look at them do movie production

00:16:08,180 --> 00:16:12,350
work on them have a developer figure out

00:16:10,250 --> 00:16:15,470
what's going wrong and then ultimately

00:16:12,350 --> 00:16:17,779
for managers release managers release

00:16:15,470 --> 00:16:20,329
engineers we have a very nice dashboard

00:16:17,779 --> 00:16:23,029
for checking fan of the entire status of

00:16:20,329 --> 00:16:24,589
the whole product as being declared an

00:16:23,029 --> 00:16:28,490
open Curie from the thought of test plan

00:16:24,589 --> 00:16:31,759
perspective the example for Philippe is

00:16:28,490 --> 00:16:33,949
this and yeah I took this a few weeks

00:16:31,759 --> 00:16:36,050
ago now and unfortunately we've

00:16:33,949 --> 00:16:37,910
completely an ugly revamp all of this so

00:16:36,050 --> 00:16:40,430
it's completely changed in terms of the

00:16:37,910 --> 00:16:41,990
color coding and the structure and the

00:16:40,430 --> 00:16:45,500
fonts and blah but I couldn't be

00:16:41,990 --> 00:16:46,939
bothered to redo it but generally

00:16:45,500 --> 00:16:49,339
speaking is still the same thing so we

00:16:46,939 --> 00:16:53,810
have various different products under

00:16:49,339 --> 00:16:56,600
test so sweet well f 3 12 opensuse 4201

00:16:53,810 --> 00:16:58,220
maintenance which is just testing

00:16:56,600 --> 00:17:00,339
individual maintenance updates going

00:16:58,220 --> 00:17:04,400
into the opensuse maintenance process

00:17:00,339 --> 00:17:06,919
this is testing all of the test updates

00:17:04,400 --> 00:17:08,480
in the channel in one go so it's a

00:17:06,919 --> 00:17:10,039
complete it effectively treated as a

00:17:08,480 --> 00:17:12,110
different product in order to give it a

00:17:10,039 --> 00:17:14,839
different test plan in a different way

00:17:12,110 --> 00:17:18,439
of doing things these are the ones we've

00:17:14,839 --> 00:17:20,150
released and yes when I took this we had

00:17:18,439 --> 00:17:22,520
everything fine in testing but are we

00:17:20,150 --> 00:17:26,959
released it something broke and then at

00:17:22,520 --> 00:17:28,760
the bottom there's tumbleweed and as new

00:17:26,959 --> 00:17:31,000
builds are produced as OBS produces new

00:17:28,760 --> 00:17:34,789
icers this is constantly being updated

00:17:31,000 --> 00:17:36,830
test start test run tests pass and test

00:17:34,789 --> 00:17:38,450
fails so very easy just have a quick

00:17:36,830 --> 00:17:40,039
look and you see a complete overview of

00:17:38,450 --> 00:17:43,159
the status of all your products under

00:17:40,039 --> 00:17:45,950
testing of course you don't really

00:17:43,159 --> 00:17:47,809
necessarily care about historical stuff

00:17:45,950 --> 00:17:50,960
you really want to know what's in that

00:17:47,809 --> 00:17:53,480
latest build of that latest product

00:17:50,960 --> 00:17:57,230
and this is a copy of silly 12 sp2 right

00:17:53,480 --> 00:17:59,990
now just about where we actually have

00:17:57,230 --> 00:18:05,000
multiple architectures so we've got our

00:17:59,990 --> 00:18:07,940
64 on the testing powerpc s390 and x86

00:18:05,000 --> 00:18:10,010
64 open QA can handle all those

00:18:07,940 --> 00:18:13,130
different architectures in VMs or

00:18:10,010 --> 00:18:15,049
against real hardware and whenever we

00:18:13,130 --> 00:18:16,700
can do all of them with the same test

00:18:15,049 --> 00:18:18,980
with exactly the same test that's

00:18:16,700 --> 00:18:22,730
exactly what we do so we're quite happy

00:18:18,980 --> 00:18:24,169
testing raid 0 red one raid 10 on all

00:18:22,730 --> 00:18:27,230
the architectures where we can easily

00:18:24,169 --> 00:18:28,970
run it and easily support it and then

00:18:27,230 --> 00:18:32,390
that's great because when one of these

00:18:28,970 --> 00:18:33,890
green dots turns into red or orange but

00:18:32,390 --> 00:18:35,510
only in one architecture then you know

00:18:33,890 --> 00:18:38,059
immediately you have an architecture

00:18:35,510 --> 00:18:42,590
specific a bug regardless of where it

00:18:38,059 --> 00:18:44,929
happened and then testing things like

00:18:42,590 --> 00:18:49,940
all patterns automatic upgrades will

00:18:44,929 --> 00:18:51,980
open with auto yes etc etc etc one thing

00:18:49,940 --> 00:18:54,529
that's really nice to note here is when

00:18:51,980 --> 00:18:56,450
something goes wrong open Qi will be

00:18:54,529 --> 00:18:58,549
able to tell you which test module it

00:18:56,450 --> 00:19:00,919
went wrong in so you can immediately

00:18:58,549 --> 00:19:03,080
jump and say okay the installation

00:19:00,919 --> 00:19:05,899
overview here is broken on all patterns

00:19:03,080 --> 00:19:10,730
on s390 without even clicking into the

00:19:05,899 --> 00:19:12,320
thing but if you do click into it you go

00:19:10,730 --> 00:19:14,090
down one level deeper and you get this

00:19:12,320 --> 00:19:17,179
nice view of the actual results for that

00:19:14,090 --> 00:19:18,590
specific test run and this also recently

00:19:17,179 --> 00:19:21,020
got updated but it's mostly just a

00:19:18,590 --> 00:19:24,590
polish and a tidy up with the fonts

00:19:21,020 --> 00:19:26,659
colors etc where you can see the

00:19:24,590 --> 00:19:28,039
screenshots involved if there was

00:19:26,659 --> 00:19:30,409
console tests I didn't actually have any

00:19:28,039 --> 00:19:32,510
in this example the console test would

00:19:30,409 --> 00:19:35,840
actually appear here and you get the

00:19:32,510 --> 00:19:38,840
texts net snippet of the the console bit

00:19:35,840 --> 00:19:40,669
in question and you can see all the

00:19:38,840 --> 00:19:43,010
screenshots you can see these ones with

00:19:40,669 --> 00:19:44,960
the green border they're the ones where

00:19:43,010 --> 00:19:47,120
the needles were checked the needles are

00:19:44,960 --> 00:19:48,260
matched and everything's fine for those

00:19:47,120 --> 00:19:50,179
times where we just want to take a

00:19:48,260 --> 00:19:52,429
screenshot for you know basic analysis

00:19:50,179 --> 00:19:54,559
purposes there's the support there for

00:19:52,429 --> 00:19:56,059
that so we can just keep an eye on

00:19:54,559 --> 00:20:00,380
things but we won't actually tell up and

00:19:56,059 --> 00:20:01,990
QA to do a needle analysis when

00:20:00,380 --> 00:20:04,390
something goes wrong

00:20:01,990 --> 00:20:07,530
you can then to dig one level deeper and

00:20:04,390 --> 00:20:10,720
you get this lovely visual diff feature

00:20:07,530 --> 00:20:13,780
so in this example here we have an open

00:20:10,720 --> 00:20:17,320
suse elite 42 to machine it's this is

00:20:13,780 --> 00:20:19,960
what the screenshot says and this needle

00:20:17,320 --> 00:20:21,820
has failed it wasn't what was expected

00:20:19,960 --> 00:20:25,570
open q is declared this is wrong and

00:20:21,820 --> 00:20:27,850
stop the test after this and but it

00:20:25,570 --> 00:20:28,990
looks fine you know you can't see

00:20:27,850 --> 00:20:31,240
anything wrong with it it's a grub

00:20:28,990 --> 00:20:34,150
window this boot from hard this is

00:20:31,240 --> 00:20:36,160
installation and in the area in the gray

00:20:34,150 --> 00:20:38,020
which is outside of the needle area

00:20:36,160 --> 00:20:39,580
where it's looking you can still even

00:20:38,020 --> 00:20:42,070
see the upgrade menu items so everything

00:20:39,580 --> 00:20:43,330
looks fine and this kind of stuff

00:20:42,070 --> 00:20:46,150
confuses people when they first get it

00:20:43,330 --> 00:20:48,880
up and purified why did that fail well

00:20:46,150 --> 00:20:51,929
that orange bar at the end can be

00:20:48,880 --> 00:20:55,179
dragged along and as you drag it along

00:20:51,929 --> 00:20:56,650
you see on the left hand side the needle

00:20:55,179 --> 00:20:58,720
of the reference screenshot that open QA

00:20:56,650 --> 00:21:01,059
was expecting and on the right hand side

00:20:58,720 --> 00:21:03,520
you see what it found and the fact it

00:21:01,059 --> 00:21:04,600
was a sixty-seven percent match and if

00:21:03,520 --> 00:21:07,210
you move it a little bit further along

00:21:04,600 --> 00:21:10,090
you see exactly what the problem is in

00:21:07,210 --> 00:21:11,530
this test run I tested leap when I was

00:21:10,090 --> 00:21:13,630
telling open curated meant to be testing

00:21:11,530 --> 00:21:15,160
tumbleweed so it was expecting a

00:21:13,630 --> 00:21:17,910
tumbleweed screenshot it was expecting

00:21:15,160 --> 00:21:20,800
tumbleweed version of Nome of grub and

00:21:17,910 --> 00:21:23,770
so it got the wrong thing it failed it

00:21:20,800 --> 00:21:27,880
stopped this kind of thing is incredibly

00:21:23,770 --> 00:21:31,090
useful but like I say not just the

00:21:27,880 --> 00:21:34,210
visual stuff so we also have all of the

00:21:31,090 --> 00:21:36,309
logs recorded here and we actually have

00:21:34,210 --> 00:21:38,800
API calls in open curiae to arbitrarily

00:21:36,309 --> 00:21:41,200
add additional log information and

00:21:38,800 --> 00:21:43,809
upload it here so for example anytime

00:21:41,200 --> 00:21:46,240
you ask crashes ever or has does

00:21:43,809 --> 00:21:48,490
anything we don't expect it'll upload a

00:21:46,240 --> 00:21:49,990
version of the yeah the why two lobes

00:21:48,490 --> 00:21:52,690
which contain everything I asked

00:21:49,990 --> 00:21:55,090
developers ever need up take a copy of

00:21:52,690 --> 00:21:58,540
it upload it there and then tag it with

00:21:55,090 --> 00:21:59,679
that specific module where failed so we

00:21:58,540 --> 00:22:02,050
can have a test mode you'll keep on

00:21:59,679 --> 00:22:04,000
going test twenty different things in

00:22:02,050 --> 00:22:05,460
yest and just up at the looks for the

00:22:04,000 --> 00:22:09,730
four or five things that it found broken

00:22:05,460 --> 00:22:11,800
and as well at the bottom there the

00:22:09,730 --> 00:22:14,520
assets so you can actually see the exact

00:22:11,800 --> 00:22:16,770
I so that we used in testing

00:22:14,520 --> 00:22:18,930
this is really important with tumbleweed

00:22:16,770 --> 00:22:21,840
and with Slee because we quite often

00:22:18,930 --> 00:22:23,900
have a case where those code bases are

00:22:21,840 --> 00:22:26,280
moving quicker than we can really test

00:22:23,900 --> 00:22:29,100
so as we're testing useless getting

00:22:26,280 --> 00:22:31,200
checked in then you know that I took our

00:22:29,100 --> 00:22:33,540
build services discarded the outbuilding

00:22:31,200 --> 00:22:35,070
care about what we still might want to

00:22:33,540 --> 00:22:36,930
reproduce something on there so open

00:22:35,070 --> 00:22:39,780
carry takes a copy keeps it stored

00:22:36,930 --> 00:22:41,720
inside up and QA so all of this stuff

00:22:39,780 --> 00:22:44,100
ends up being quite a complicated

00:22:41,720 --> 00:22:47,270
infrastructure but we've done our best

00:22:44,100 --> 00:22:51,420
to make it as simple as possible and

00:22:47,270 --> 00:22:54,300
this is basically how it looks you can

00:22:51,420 --> 00:22:57,480
install this one on one machine but it's

00:22:54,300 --> 00:22:59,460
designed to be distributed so the open

00:22:57,480 --> 00:23:02,070
Qi package that you see in fedora or

00:22:59,460 --> 00:23:04,830
opensuse it's basically the web

00:23:02,070 --> 00:23:08,040
application and the rest api and the

00:23:04,830 --> 00:23:09,510
scheduler and that's where you go to see

00:23:08,040 --> 00:23:12,000
the results it's where you go to set up

00:23:09,510 --> 00:23:14,940
a test plan and that's where the

00:23:12,000 --> 00:23:18,480
database is stored which can be sequel

00:23:14,940 --> 00:23:21,930
plus or postgres then you actually have

00:23:18,480 --> 00:23:24,720
separately workers which are systemd

00:23:21,930 --> 00:23:27,390
services which are responsible for

00:23:24,720 --> 00:23:29,610
talking to the web application to figure

00:23:27,390 --> 00:23:31,890
out what needs to be done what needs to

00:23:29,610 --> 00:23:33,210
be tested and you can have many many

00:23:31,890 --> 00:23:35,340
workers and they can be distributed

00:23:33,210 --> 00:23:37,560
across any number of machines that you

00:23:35,340 --> 00:23:40,800
want on any architecture that we support

00:23:37,560 --> 00:23:42,570
and they're primarily doing that

00:23:40,800 --> 00:23:45,920
communication figuring out do they have

00:23:42,570 --> 00:23:48,830
jobs to run if they do have jobs to run

00:23:45,920 --> 00:23:53,340
they will then start OS auto industry

00:23:48,830 --> 00:23:56,160
which is basically the test run and oh

00:23:53,340 --> 00:23:58,700
it's auto ins will then take the tests

00:23:56,160 --> 00:24:03,120
for that tab there for that test run and

00:23:58,700 --> 00:24:04,740
then connect to the system under test in

00:24:03,120 --> 00:24:07,680
this example here I've kept it simple

00:24:04,740 --> 00:24:09,510
and just put Kira at the bottom it's

00:24:07,680 --> 00:24:11,940
also the backend that we use the most in

00:24:09,510 --> 00:24:15,870
open QA so we basically have these

00:24:11,940 --> 00:24:17,550
workers firing up key movie ms testing

00:24:15,870 --> 00:24:19,550
in there and the reason we pick EMU

00:24:17,550 --> 00:24:23,130
rather than you know a particular

00:24:19,550 --> 00:24:24,870
libvirt or other configuration is this

00:24:23,130 --> 00:24:26,540
means we have tons of flexibility to do

00:24:24,870 --> 00:24:29,120
fancy stuff like

00:24:26,540 --> 00:24:31,760
add random devices remover and devices

00:24:29,120 --> 00:24:33,530
tested and wonderful stuff all we have

00:24:31,760 --> 00:24:35,780
to do is teach our sort of in just what

00:24:33,530 --> 00:24:38,140
we're interested in testing but in

00:24:35,780 --> 00:24:43,550
addition to that we have support for

00:24:38,140 --> 00:24:46,220
perfect next slide for testing on real

00:24:43,550 --> 00:24:49,340
hardware so instead of using chemo we

00:24:46,220 --> 00:24:53,480
you can use ipmi or talk to IP kvm

00:24:49,340 --> 00:24:55,550
devices we also have support for s390 so

00:24:53,480 --> 00:24:58,760
in that case we're using x3 270 and

00:24:55,550 --> 00:25:00,140
talking to z vm guests so all

00:24:58,760 --> 00:25:03,260
collectively we have support for

00:25:00,140 --> 00:25:07,130
multiple architectures over intel pbc

00:25:03,260 --> 00:25:09,320
s390 and arch we can do multi machine

00:25:07,130 --> 00:25:11,870
testing especially with the chemo back

00:25:09,320 --> 00:25:15,320
end where we can say you know five up

00:25:11,870 --> 00:25:16,730
two or three VMs use open V switch link

00:25:15,320 --> 00:25:18,140
these together in a bridge make a

00:25:16,730 --> 00:25:19,730
network and then start running your

00:25:18,140 --> 00:25:23,870
tests and synchronize them between each

00:25:19,730 --> 00:25:26,480
other we even have a lock API so one

00:25:23,870 --> 00:25:28,400
test can orchestrate the steps in

00:25:26,480 --> 00:25:30,170
another test run so you know machine a

00:25:28,400 --> 00:25:32,240
you can be told to get to a certain

00:25:30,170 --> 00:25:34,820
point and wait until machine B is ready

00:25:32,240 --> 00:25:37,520
and a machine be will unlock machine a

00:25:34,820 --> 00:25:39,350
and carry forward so all of that can be

00:25:37,520 --> 00:25:43,400
handled in a rather complicated test

00:25:39,350 --> 00:25:44,990
runs you also have support for chaining

00:25:43,400 --> 00:25:47,180
tests running stuff in parallel

00:25:44,990 --> 00:25:51,560
many-to-many mappings all that kind of

00:25:47,180 --> 00:25:53,300
mad stuff for complicated scenarios we

00:25:51,560 --> 00:25:54,860
have support for fed message which is

00:25:53,300 --> 00:25:58,520
the fedora message bus that they use for

00:25:54,860 --> 00:26:00,980
all of the infrastructure and we also

00:25:58,520 --> 00:26:03,350
have support for or creating disk images

00:26:00,980 --> 00:26:05,720
which we use not just for reproduction

00:26:03,350 --> 00:26:07,910
now but also for aiding and test

00:26:05,720 --> 00:26:10,430
orchestration so for example you might

00:26:07,910 --> 00:26:13,070
do an installation test make sure that's

00:26:10,430 --> 00:26:16,250
clean and valid give it a green mark if

00:26:13,070 --> 00:26:17,900
it's green you save that as a disk image

00:26:16,250 --> 00:26:20,570
which open QA can then use for stoppers

00:26:17,900 --> 00:26:22,190
contrasting and either internally to

00:26:20,570 --> 00:26:24,770
open QA or in fact we publish those

00:26:22,190 --> 00:26:26,500
image publicly now so developers can

00:26:24,770 --> 00:26:29,720
just download them and constantly get

00:26:26,500 --> 00:26:31,460
last known good sleep tumbleweed of

00:26:29,720 --> 00:26:35,240
course is that all the time that's

00:26:31,460 --> 00:26:37,040
helped tumbleweed works and that also

00:26:35,240 --> 00:26:38,330
means we're now using similar stuff for

00:26:37,040 --> 00:26:39,110
that for some of the multi hypervisor

00:26:38,330 --> 00:26:42,830
testing we have

00:26:39,110 --> 00:26:46,070
of where we can test on kvm on Zen on

00:26:42,830 --> 00:26:49,940
VMware on this kbm fuzzy system to

00:26:46,070 --> 00:26:51,080
hyper-v mostly using Lippert one of the

00:26:49,940 --> 00:26:54,470
other new features we spent a little

00:26:51,080 --> 00:26:58,010
time on lately is tagging and we just

00:26:54,470 --> 00:27:00,350
tag everything now because having a

00:26:58,010 --> 00:27:02,809
dashboard is great we're open QA has

00:27:00,350 --> 00:27:04,610
detected something but you always need a

00:27:02,809 --> 00:27:06,830
little bit more information from a human

00:27:04,610 --> 00:27:09,380
at some point to figure out what's

00:27:06,830 --> 00:27:11,750
really gone wrong here is this a bug is

00:27:09,380 --> 00:27:16,370
the bug in the product is it a bug in

00:27:11,750 --> 00:27:17,660
open QA and therefore we've at you have

00:27:16,370 --> 00:27:19,610
taken their different get up and

00:27:17,660 --> 00:27:22,760
basically have the concept of tagging

00:27:19,610 --> 00:27:25,160
individual results in open QA as well as

00:27:22,760 --> 00:27:28,280
tagging builds so we can say you know

00:27:25,160 --> 00:27:30,080
this this test run is you know it's fine

00:27:28,280 --> 00:27:32,780
and its weight broken because of these

00:27:30,080 --> 00:27:34,610
bugs these issues are all open qas

00:27:32,780 --> 00:27:37,580
fulton they're being trapped in this

00:27:34,610 --> 00:27:39,740
tracker we can also then taking the

00:27:37,580 --> 00:27:42,770
entire build and say this is an

00:27:39,740 --> 00:27:44,840
important build this is a milestone we

00:27:42,770 --> 00:27:47,240
have an automatic infrastructure cleanup

00:27:44,840 --> 00:27:49,490
process and open quiere to tidy up old

00:27:47,240 --> 00:27:50,540
builds we don't care about anymore so it

00:27:49,490 --> 00:27:52,070
looks at that tag to make sure it

00:27:50,540 --> 00:27:55,040
doesn't clean up stuff that we still

00:27:52,070 --> 00:27:57,140
need and yeah basically make sure that

00:27:55,040 --> 00:27:59,540
everything stays clean and clear and

00:27:57,140 --> 00:28:02,299
well-documented so you can see that not

00:27:59,540 --> 00:28:03,860
only is open curate on its job but QA is

00:28:02,299 --> 00:28:06,320
doing its job and making sure that this

00:28:03,860 --> 00:28:09,410
stuff actually works so back to this

00:28:06,320 --> 00:28:11,030
example here I love this example because

00:28:09,410 --> 00:28:13,070
I hadn't seen one of these for ages and

00:28:11,030 --> 00:28:15,290
that little lightning bolt is a symbol

00:28:13,070 --> 00:28:17,000
we use for when open QA has a bug and so

00:28:15,290 --> 00:28:19,760
that test run failed because I broke

00:28:17,000 --> 00:28:21,980
something this test one also felt

00:28:19,760 --> 00:28:23,799
because I broke something so did that

00:28:21,980 --> 00:28:25,940
one I really had a good day that day and

00:28:23,799 --> 00:28:28,760
this one here is the only bug in the

00:28:25,940 --> 00:28:31,130
product right on the end just fitting on

00:28:28,760 --> 00:28:33,470
there which was the one legitimate bug

00:28:31,130 --> 00:28:35,510
that open QA found and then of course

00:28:33,470 --> 00:28:38,780
the nice thing with this is also open QA

00:28:35,510 --> 00:28:41,960
e can be aware of that bugs it found in

00:28:38,780 --> 00:28:43,970
previous test runs so in the next build

00:28:41,960 --> 00:28:46,460
it's going to run all this stuff again

00:28:43,970 --> 00:28:48,160
and if the same thing happens at the

00:28:46,460 --> 00:28:50,090
same point because it's figured out Oh

00:28:48,160 --> 00:28:50,550
installation overviews when I failed or

00:28:50,090 --> 00:28:52,860
whatever

00:28:50,550 --> 00:28:54,240
open QA can carry forward that tag

00:28:52,860 --> 00:28:55,920
automatically so you're not having to

00:28:54,240 --> 00:28:58,860
spend all your time met with manual

00:28:55,920 --> 00:29:00,780
reviewing going through checking okay is

00:28:58,860 --> 00:29:03,750
this the same bug did it happen the same

00:29:00,780 --> 00:29:06,180
way whenever open QA can it'll carry

00:29:03,750 --> 00:29:08,640
that stuff forward so you can see nice

00:29:06,180 --> 00:29:11,670
and quickly yes fine they haven't fixed

00:29:08,640 --> 00:29:15,780
that issue in open QA or yeah yes they

00:29:11,670 --> 00:29:17,040
fix the issue in the product and now I'm

00:29:15,780 --> 00:29:20,610
going to talk about four doors a little

00:29:17,040 --> 00:29:22,860
bit Fedora is a web project and I can

00:29:20,610 --> 00:29:24,000
say that because that's what Adam said

00:29:22,860 --> 00:29:26,640
on stage when he was did this

00:29:24,000 --> 00:29:30,030
presentation the first time they love

00:29:26,640 --> 00:29:33,450
their wiki their entire project does

00:29:30,030 --> 00:29:36,180
everything in their wiki every feature

00:29:33,450 --> 00:29:39,750
requests every discussion about that

00:29:36,180 --> 00:29:43,710
feature requests a huge amount of their

00:29:39,750 --> 00:29:45,990
internal planning plotting and QA

00:29:43,710 --> 00:29:47,310
including the test plan and the results

00:29:45,990 --> 00:29:49,860
of the test plan and the discussion

00:29:47,310 --> 00:29:52,470
about the test plan is done on lots and

00:29:49,860 --> 00:29:55,980
lots and lots and lots of wiki pages and

00:29:52,470 --> 00:29:59,250
this is what they used to spend a huge

00:29:55,980 --> 00:30:03,510
amount of their time doing with tracking

00:29:59,250 --> 00:30:06,390
all their manual testing in a wiki so

00:30:03,510 --> 00:30:07,830
with open QA they can now go to the

00:30:06,390 --> 00:30:10,110
point where about forty percent of their

00:30:07,830 --> 00:30:12,660
validation tests which fedora 14 all of

00:30:10,110 --> 00:30:14,970
their builds are now fully automated no

00:30:12,660 --> 00:30:16,890
kinky way exactly the same stuff they

00:30:14,970 --> 00:30:20,190
were doing testing their installer

00:30:16,890 --> 00:30:22,380
testing their OS but completely in open

00:30:20,190 --> 00:30:23,820
QA and not using any of that lovely

00:30:22,380 --> 00:30:25,850
dashboard stuff I showed you they

00:30:23,820 --> 00:30:28,370
instead copy it back into their wiki

00:30:25,850 --> 00:30:31,410
because that's how they like to do it

00:30:28,370 --> 00:30:32,850
which is fine I don't get it but it

00:30:31,410 --> 00:30:34,500
makes them happy and they have pretty

00:30:32,850 --> 00:30:36,930
much the same kind of concepts now when

00:30:34,500 --> 00:30:38,880
it comes to the links and the status is

00:30:36,930 --> 00:30:40,590
they haven't figured out a way of

00:30:38,880 --> 00:30:44,010
putting through tagging yet I think but

00:30:40,590 --> 00:30:46,940
I'm sure they're working on that and so

00:30:44,010 --> 00:30:49,950
for them where they're mainly working on

00:30:46,940 --> 00:30:52,830
rawhide and branched so rawhide is the

00:30:49,950 --> 00:30:54,990
nearest equivalent to what we used to

00:30:52,830 --> 00:30:57,270
have as factory so a rolling development

00:30:54,990 --> 00:31:00,150
code base that isn't really ever

00:30:57,270 --> 00:31:03,350
designed to be working properly whereas

00:31:00,150 --> 00:31:05,419
branched is there forked version of

00:31:03,350 --> 00:31:07,490
whoa I'd which is what they are

00:31:05,419 --> 00:31:09,799
stabilizing ready for the next version

00:31:07,490 --> 00:31:11,410
of the doors effectively Fodor next but

00:31:09,799 --> 00:31:13,549
that's a different term for them and

00:31:11,410 --> 00:31:16,309
they're building that constantly in

00:31:13,549 --> 00:31:18,830
their build systems and nightly

00:31:16,309 --> 00:31:22,030
producing a composer their term for a

00:31:18,830 --> 00:31:24,470
build that uses fed message to produce

00:31:22,030 --> 00:31:28,700
email results that fire everything out

00:31:24,470 --> 00:31:31,700
and while they haven't got gating which

00:31:28,700 --> 00:31:33,980
is what we call it staging which is a

00:31:31,700 --> 00:31:36,500
concept that we use they're talking

00:31:33,980 --> 00:31:41,030
about it but at the moment they're

00:31:36,500 --> 00:31:43,159
primarily using it as a monitor to see

00:31:41,030 --> 00:31:45,890
how well are their nightly built

00:31:43,159 --> 00:31:49,429
actually working and they've ported all

00:31:45,890 --> 00:31:51,110
of this out into this web page that on

00:31:49,429 --> 00:31:52,970
the left hand side you have an email you

00:31:51,110 --> 00:31:54,380
can subscribe to a mailing left and the

00:31:52,970 --> 00:31:56,360
right hand side you have a nice web page

00:31:54,380 --> 00:31:59,150
the admins put together for the nightly

00:31:56,360 --> 00:32:02,059
compose finder which basically shows you

00:31:59,150 --> 00:32:06,710
the last known good for door build every

00:32:02,059 --> 00:32:10,250
every night hopefully in fact what they

00:32:06,710 --> 00:32:11,659
find is quite often the nightly compose

00:32:10,250 --> 00:32:14,720
will say you know the last known good

00:32:11,659 --> 00:32:15,950
one was three or four weeks ago and you

00:32:14,720 --> 00:32:17,570
know then they have then they realize

00:32:15,950 --> 00:32:19,100
okay have to go back find where these

00:32:17,570 --> 00:32:21,350
bugs aren't tidy everything up and

00:32:19,100 --> 00:32:23,980
that's why they're interested in the

00:32:21,350 --> 00:32:26,000
gating or staging concept which we use

00:32:23,980 --> 00:32:29,090
so that's one of the big things that

00:32:26,000 --> 00:32:30,860
thinking of a new direction they're also

00:32:29,090 --> 00:32:33,070
looking at testing their update images

00:32:30,860 --> 00:32:35,480
which is how they do all their patches

00:32:33,070 --> 00:32:36,710
they're working on kickstart tests which

00:32:35,480 --> 00:32:40,730
are very similar to our auto you have

00:32:36,710 --> 00:32:42,799
stuff installing updates and I have a

00:32:40,730 --> 00:32:44,570
really interesting concept of testing as

00:32:42,799 --> 00:32:46,750
a service and kind of expanding open

00:32:44,570 --> 00:32:49,909
keyways current feature set so

00:32:46,750 --> 00:32:52,370
developers can more easily submit their

00:32:49,909 --> 00:32:54,799
tests to open QA direct without going

00:32:52,370 --> 00:32:56,809
through any kind of open pure a vetting

00:32:54,799 --> 00:32:58,850
process and sort of using open queuing

00:32:56,809 --> 00:33:01,220
as a service for developers to work on

00:32:58,850 --> 00:33:03,350
their stuff it's just a concept right

00:33:01,220 --> 00:33:05,179
now but they're sharing some ideas with

00:33:03,350 --> 00:33:06,890
us and it's really quite interesting how

00:33:05,179 --> 00:33:09,289
they're thinking of handling that stuff

00:33:06,890 --> 00:33:10,700
especially with how they handle package

00:33:09,289 --> 00:33:12,590
update inside for door and stuff like

00:33:10,700 --> 00:33:14,140
that and we'll see how that works in the

00:33:12,590 --> 00:33:16,610
future

00:33:14,140 --> 00:33:18,920
when it comes to installing open QA on

00:33:16,610 --> 00:33:20,510
fedora unlike us they actually have it

00:33:18,920 --> 00:33:21,650
in the distribution we're still being

00:33:20,510 --> 00:33:23,840
rather naughty and leaving it in a

00:33:21,650 --> 00:33:25,520
develop object so if you're running

00:33:23,840 --> 00:33:29,360
fedora 23 and above you can actually

00:33:25,520 --> 00:33:31,670
install it just by doing a dnf in they

00:33:29,360 --> 00:33:33,350
have both the they have two versions

00:33:31,670 --> 00:33:35,210
they're running they're running a

00:33:33,350 --> 00:33:38,840
staging system and a production system

00:33:35,210 --> 00:33:40,880
in the Fedora data center they've met

00:33:38,840 --> 00:33:43,280
they've done everything in ansibles so

00:33:40,880 --> 00:33:46,010
they can very easily destroy their

00:33:43,280 --> 00:33:47,510
infrastructure add new workers add new

00:33:46,010 --> 00:33:49,580
servers and just deployed or with that

00:33:47,510 --> 00:33:54,410
so they can yet rebuild it from scratch

00:33:49,580 --> 00:33:56,750
it well and also in theory people can

00:33:54,410 --> 00:33:58,910
take their anta belays and set up their

00:33:56,750 --> 00:34:00,920
own exact clone copy which is very

00:33:58,910 --> 00:34:02,270
similar to what we've done with our salt

00:34:00,920 --> 00:34:05,510
profiles which is what we're using

00:34:02,270 --> 00:34:08,990
inside of open QA and their schedule is

00:34:05,510 --> 00:34:10,070
driven by fed message some of the

00:34:08,990 --> 00:34:12,889
features that they worked with us on

00:34:10,070 --> 00:34:15,440
lately Asset downloading and extracting

00:34:12,889 --> 00:34:17,740
which with our haven't got the slide

00:34:15,440 --> 00:34:20,090
closed but with our infrastructure our

00:34:17,740 --> 00:34:23,600
workers are primarily all on the same

00:34:20,090 --> 00:34:25,580
network or using the same nfa sure in

00:34:23,600 --> 00:34:27,139
the case of the door they really didn't

00:34:25,580 --> 00:34:29,750
want to do that I wanted to distribute

00:34:27,139 --> 00:34:31,850
as much of the ISO handling in the image

00:34:29,750 --> 00:34:33,919
handling onto the work of machines

00:34:31,850 --> 00:34:35,870
themselves wherever they are so in order

00:34:33,919 --> 00:34:37,850
for that to work we've added that we've

00:34:35,870 --> 00:34:39,950
worked with them on the features to have

00:34:37,850 --> 00:34:42,830
asset downloading so as you said as the

00:34:39,950 --> 00:34:45,379
test gets it as the test gets shedule on

00:34:42,830 --> 00:34:48,440
a worker the worker downloads the assets

00:34:45,379 --> 00:34:49,940
in question runs everything locally as I

00:34:48,440 --> 00:34:51,139
mentioned a few times now we have fed

00:34:49,940 --> 00:34:53,060
message supporters is actually the

00:34:51,139 --> 00:34:54,879
emitter so open curate can tell fed

00:34:53,060 --> 00:34:57,290
message it's finished testing something

00:34:54,879 --> 00:34:58,430
they've worked on docker rising it so

00:34:57,290 --> 00:35:01,250
you can install open curating this

00:34:58,430 --> 00:35:02,660
docker container we've both worked on

00:35:01,250 --> 00:35:04,370
packaging improvements because we be

00:35:02,660 --> 00:35:05,840
used rpms we kind of normalized and

00:35:04,370 --> 00:35:07,640
standardised everything there and

00:35:05,840 --> 00:35:09,530
there's been a really good collaboration

00:35:07,640 --> 00:35:14,270
over bugs and bug fixes inside our comp

00:35:09,530 --> 00:35:17,900
you a but now back to opensuse actually

00:35:14,270 --> 00:35:21,320
to sleeve first and slee is now using

00:35:17,900 --> 00:35:24,430
open QA for testing every sleeve early

00:35:21,320 --> 00:35:28,750
since Lee 11 sp4

00:35:24,430 --> 00:35:31,690
and currently it's sort of full stack

00:35:28,750 --> 00:35:33,599
testing from beginning to end every

00:35:31,690 --> 00:35:37,290
package that mission growing into Slee

00:35:33,599 --> 00:35:40,180
gets staged and that staging concept is

00:35:37,290 --> 00:35:41,859
taking a submission in tip from OBS if

00:35:40,180 --> 00:35:43,290
anyone who booked a fat for factory

00:35:41,859 --> 00:35:45,190
knows this is exactly the same

00:35:43,290 --> 00:35:47,800
something's being submitted into the

00:35:45,190 --> 00:35:50,339
build service taken into a different

00:35:47,800 --> 00:35:53,349
project staged they're built separately

00:35:50,339 --> 00:35:55,930
run very very quickly in a subset of the

00:35:53,349 --> 00:35:57,819
sounded open QA tests and then that is

00:35:55,930 --> 00:35:59,740
what's used to aid the reviewers when

00:35:57,819 --> 00:36:01,930
they were viewing the submission so

00:35:59,740 --> 00:36:04,030
before the the new packages got anywhere

00:36:01,930 --> 00:36:05,890
near the codebase we know that it isn't

00:36:04,030 --> 00:36:08,200
going to invalidate the entire code base

00:36:05,890 --> 00:36:11,109
and blow up like the very basics of does

00:36:08,200 --> 00:36:14,050
it install does it start etc so then

00:36:11,109 --> 00:36:17,680
it's accepted it goes into sort of silly

00:36:14,050 --> 00:36:19,900
proper a build is produced that build is

00:36:17,680 --> 00:36:23,290
then validated in the past with manual

00:36:19,900 --> 00:36:26,200
testing QA would typically primarily

00:36:23,290 --> 00:36:28,240
only validate the builds that were going

00:36:26,200 --> 00:36:29,980
to be milestones so you'd have a

00:36:28,240 --> 00:36:32,170
milestone like an alpha beta every

00:36:29,980 --> 00:36:34,770
couple of weeks and we would only

00:36:32,170 --> 00:36:37,270
manually test that well with open QA

00:36:34,770 --> 00:36:39,130
less humans are involved we validate

00:36:37,270 --> 00:36:40,960
everything that we can so we're

00:36:39,130 --> 00:36:43,630
constantly validating every potential

00:36:40,960 --> 00:36:47,170
build we still have the concept of

00:36:43,630 --> 00:36:48,640
milestones in slee and with leap so when

00:36:47,170 --> 00:36:51,309
the validation is sufficiently good

00:36:48,640 --> 00:36:53,920
enough and the time is coming for an

00:36:51,309 --> 00:36:55,720
hour for a beat or etc what those builds

00:36:53,920 --> 00:36:57,760
will then be declared as a milestone and

00:36:55,720 --> 00:36:59,500
open q i can run additional testing on

00:36:57,760 --> 00:37:02,490
that afterwards as well so we have sort

00:36:59,500 --> 00:37:05,140
of TIR testing of quick fast 30 stuff

00:37:02,490 --> 00:37:06,700
the core base stuff of all the main

00:37:05,140 --> 00:37:08,770
functionality that we're interested in

00:37:06,700 --> 00:37:10,480
keeping running all the time and then we

00:37:08,770 --> 00:37:14,349
do have some really nasty long running

00:37:10,480 --> 00:37:16,380
tests that we use for post-renovation

00:37:14,349 --> 00:37:18,730
the picture of two or three days to run

00:37:16,380 --> 00:37:20,200
to be honest actually this post

00:37:18,730 --> 00:37:21,490
validation line quite often when I can

00:37:20,200 --> 00:37:23,470
get away with it I run it all the time

00:37:21,490 --> 00:37:25,960
anyway we just don't care about the

00:37:23,470 --> 00:37:30,849
results how much until the milestones

00:37:25,960 --> 00:37:33,490
hit with leap everything's a little bit

00:37:30,849 --> 00:37:35,569
more complicated because we have the

00:37:33,490 --> 00:37:38,449
season with enterprise code base

00:37:35,569 --> 00:37:39,979
as part of the core of leap and we have

00:37:38,449 --> 00:37:42,049
all of our opensuse stuff from

00:37:39,979 --> 00:37:44,359
tumbleweed or from previous versions of

00:37:42,049 --> 00:37:46,519
loop so you've got to code bases but

00:37:44,359 --> 00:37:48,920
only one distribution which is a bit of

00:37:46,519 --> 00:37:50,440
a testing nightmare really because

00:37:48,920 --> 00:37:52,309
you've got you know all these different

00:37:50,440 --> 00:37:53,390
potential changes coming from different

00:37:52,309 --> 00:37:58,579
locations coming from different

00:37:53,390 --> 00:38:02,709
developers but we found that the using

00:37:58,579 --> 00:38:04,910
open QA either in a ski esque style way

00:38:02,709 --> 00:38:07,369
or sometimes even just a little bit

00:38:04,910 --> 00:38:08,599
lighter is actually all we've needed to

00:38:07,369 --> 00:38:10,279
kind of keep track of all this stuff

00:38:08,599 --> 00:38:12,829
because of course tumbleweed is being

00:38:10,279 --> 00:38:16,309
tested in open QA sleeves being tested

00:38:12,829 --> 00:38:17,869
open QA so the quality is good we just

00:38:16,309 --> 00:38:19,219
need to make sure that then second time

00:38:17,869 --> 00:38:21,369
around we put it together again in a

00:38:19,219 --> 00:38:24,880
different way it still works together

00:38:21,369 --> 00:38:27,589
and then my one true love tumbleweed

00:38:24,880 --> 00:38:31,099
with always changing always working is

00:38:27,589 --> 00:38:32,269
really the the place where open QA

00:38:31,099 --> 00:38:34,640
turned into stripes and also the place

00:38:32,269 --> 00:38:37,579
where open play really we have really

00:38:34,640 --> 00:38:40,549
started because tumbleweed is open

00:38:37,579 --> 00:38:42,979
Suzie's rolling release and without open

00:38:40,549 --> 00:38:44,630
QA it wouldn't be a rolling release it

00:38:42,979 --> 00:38:47,150
would be some nasty development code

00:38:44,630 --> 00:38:48,410
base like factory used to be but you

00:38:47,150 --> 00:38:49,640
know we want to make sure this thing

00:38:48,410 --> 00:38:52,339
works we want to make sure people can

00:38:49,640 --> 00:38:55,459
use it and rely on it as their developer

00:38:52,339 --> 00:38:57,170
moschino their power user machine and so

00:38:55,459 --> 00:38:59,660
open QA he's doing all of that in depth

00:38:57,170 --> 00:39:02,869
testing all of the time every day as

00:38:59,660 --> 00:39:04,910
tumbleweed is moving on and ran about

00:39:02,869 --> 00:39:06,829
now actually Dominic is this right two

00:39:04,910 --> 00:39:10,969
or three days roughly between each

00:39:06,829 --> 00:39:12,319
snapshot back today so yeah every every

00:39:10,969 --> 00:39:15,109
two days we typically release a new

00:39:12,319 --> 00:39:16,279
tumbleweed snapshot and simply put the

00:39:15,109 --> 00:39:18,289
tumbleweeds an applet isn't that

00:39:16,279 --> 00:39:20,420
dissimilar from a full-blown operating

00:39:18,289 --> 00:39:23,479
system release it has a different ftp

00:39:20,420 --> 00:39:25,069
tree has a different iso with different

00:39:23,479 --> 00:39:26,989
version numbers it's a full-blown

00:39:25,069 --> 00:39:30,140
distribution release but we've cut it

00:39:26,989 --> 00:39:31,640
down to two days and picking on Dominic

00:39:30,140 --> 00:39:35,180
again because every week Dominic does

00:39:31,640 --> 00:39:36,499
his lovely tumbleweed reviews where he

00:39:35,180 --> 00:39:37,849
started kind of covering what's the

00:39:36,499 --> 00:39:39,829
community been doing and what stumble

00:39:37,849 --> 00:39:41,359
we've been changing and a few months

00:39:39,829 --> 00:39:43,539
back he made the lovely mistake of

00:39:41,359 --> 00:39:46,759
saying oh it's a really quiet week

00:39:43,539 --> 00:39:48,140
nobody really did anything and he didn't

00:39:46,759 --> 00:39:48,690
actually go into great detail about what

00:39:48,140 --> 00:39:49,800
everyone

00:39:48,690 --> 00:39:51,869
just you know a few things here and

00:39:49,800 --> 00:39:54,359
there so I had a look at action what

00:39:51,869 --> 00:39:56,310
went on in OBS now a week and we had

00:39:54,359 --> 00:39:58,950
three snapshots which is still you know

00:39:56,310 --> 00:40:00,510
basically one every two days with a

00:39:58,950 --> 00:40:02,369
hundred and forty-six package updates

00:40:00,510 --> 00:40:05,339
that with new packages that was new

00:40:02,369 --> 00:40:07,710
versions that was bug fixes 146 changes

00:40:05,339 --> 00:40:09,569
to the distribution in order to fit all

00:40:07,710 --> 00:40:11,220
of that on the DVD or to fit the

00:40:09,569 --> 00:40:14,220
important stuff on the DVD we had to fit

00:40:11,220 --> 00:40:16,230
15 new packages on there we had to find

00:40:14,220 --> 00:40:18,540
38 to remove that didn't need to be

00:40:16,230 --> 00:40:22,109
there and that included the kernel

00:40:18,540 --> 00:40:23,400
update with that it's 118 test runs in

00:40:22,109 --> 00:40:26,990
order to get all of that stuff out in

00:40:23,400 --> 00:40:32,250
the hands of users dude that's not quiet

00:40:26,990 --> 00:40:34,079
really just isn't quiet at all and this

00:40:32,250 --> 00:40:37,230
is actually more what a typical week is

00:40:34,079 --> 00:40:38,790
like at the moment five snapshots isn't

00:40:37,230 --> 00:40:42,540
that far off what we normally what we

00:40:38,790 --> 00:40:45,420
normally doing 370 package updates is

00:40:42,540 --> 00:40:46,859
kind of normal for us now two kernels is

00:40:45,420 --> 00:40:50,640
a little bit low we've had weeks with

00:40:46,859 --> 00:40:52,260
three or four and known to be 20 did

00:40:50,640 --> 00:40:55,800
their upstream release and we had it in

00:40:52,260 --> 00:40:58,589
there in tumbleweed fully tested a week

00:40:55,800 --> 00:41:00,750
after that valise we actually had had it

00:40:58,589 --> 00:41:02,369
in staging the week before but you know

00:41:00,750 --> 00:41:05,010
we found some bugs that was the point

00:41:02,369 --> 00:41:07,349
and so he had ended up with 118

00:41:05,010 --> 00:41:09,480
different installations all over there

00:41:07,349 --> 00:41:14,310
so if you look at the kind of whole

00:41:09,480 --> 00:41:17,490
family of souza and opensuse now this is

00:41:14,310 --> 00:41:19,980
this is how everything is we have Susan

00:41:17,490 --> 00:41:21,810
Witts enterprise the nice refined

00:41:19,980 --> 00:41:24,690
enterprise distribution or tested with

00:41:21,810 --> 00:41:27,420
open QA we have leap which includes

00:41:24,690 --> 00:41:29,670
stuff from tumbleweed as well as the

00:41:27,420 --> 00:41:32,460
shared core and we have tumbleweed

00:41:29,670 --> 00:41:35,460
rolling at a constant pace with lots and

00:41:32,460 --> 00:41:38,130
lots of stuff so thinking about the

00:41:35,460 --> 00:41:42,060
future we've got a lot of stuff on the

00:41:38,130 --> 00:41:43,829
drawing board at the moment we with the

00:41:42,060 --> 00:41:46,260
ipmi back-end we're currently only

00:41:43,829 --> 00:41:48,480
supporting very specific super micro

00:41:46,260 --> 00:41:49,859
devices because we really had to reverse

00:41:48,480 --> 00:41:52,560
engineer their protocol because it

00:41:49,859 --> 00:41:54,750
wasn't that well documented so you can

00:41:52,560 --> 00:41:56,609
take certain Super Micro Machines tell

00:41:54,750 --> 00:41:58,290
up and grey hair go here have fun and it

00:41:56,609 --> 00:42:00,450
will get the video output and get double

00:41:58,290 --> 00:42:02,090
the seal and everything's fine we want

00:42:00,450 --> 00:42:03,620
to keep on extending that

00:42:02,090 --> 00:42:07,130
so we want to add more Super Micro

00:42:03,620 --> 00:42:09,410
Devices more I drag stuff we have an

00:42:07,130 --> 00:42:10,520
interactive mode I didn't share it in

00:42:09,410 --> 00:42:14,960
the web UI because we've just recently

00:42:10,520 --> 00:42:16,220
completely redone it but still not quite

00:42:14,960 --> 00:42:18,500
ready so I'm still going to keep this

00:42:16,220 --> 00:42:20,300
slide but the interactive mode at the

00:42:18,500 --> 00:42:22,430
moment is primarily a needling

00:42:20,300 --> 00:42:24,170
interactive mode so the idea is as you

00:42:22,430 --> 00:42:26,840
have a new build with some being some

00:42:24,170 --> 00:42:29,360
big design change you can basically tell

00:42:26,840 --> 00:42:31,340
open QA to run in sort of a semi

00:42:29,360 --> 00:42:32,990
interactive state where it'll run

00:42:31,340 --> 00:42:34,520
through the tests until it gets to that

00:42:32,990 --> 00:42:37,250
point where it was looking for a needle

00:42:34,520 --> 00:42:38,570
if the needle doesn't match instead of

00:42:37,250 --> 00:42:41,150
freaking out and closing the testers

00:42:38,570 --> 00:42:43,340
failure it'll just stop and let the

00:42:41,150 --> 00:42:45,200
developer then pop in say okay that's

00:42:43,340 --> 00:42:47,330
needles definitely then carry on and

00:42:45,200 --> 00:42:50,060
keep on going forward so you can do sort

00:42:47,330 --> 00:42:52,430
of a mass redesign needling effort very

00:42:50,060 --> 00:42:55,220
very quickly and this is cool but it's

00:42:52,430 --> 00:42:57,230
only really cool for open QA guys and I

00:42:55,220 --> 00:43:01,100
really like the idea of expanding on it

00:42:57,230 --> 00:43:03,380
so we can use interactive mode for being

00:43:01,100 --> 00:43:05,750
a service for developers and for QA to

00:43:03,380 --> 00:43:07,790
actually reproduce the bugs so follow

00:43:05,750 --> 00:43:10,460
through the same thing but instead of

00:43:07,790 --> 00:43:12,530
waiting for a needle to fail maybe have

00:43:10,460 --> 00:43:13,850
an arbitrarily defined break point where

00:43:12,530 --> 00:43:15,580
you know you have a developer says okay

00:43:13,850 --> 00:43:17,810
I want to have a look at that one thing

00:43:15,580 --> 00:43:20,150
over QA can get to that point

00:43:17,810 --> 00:43:22,640
automatically it could stop there or

00:43:20,150 --> 00:43:24,530
pause there more accurately and then

00:43:22,640 --> 00:43:27,590
with open QA we've already got the

00:43:24,530 --> 00:43:29,090
serial the ssh etc hand that all over to

00:43:27,590 --> 00:43:30,710
the developer they could pop into the

00:43:29,090 --> 00:43:33,140
machine do whatever the heck they want

00:43:30,710 --> 00:43:34,940
with it throw it all away at the end

00:43:33,140 --> 00:43:36,080
because we just don't care that's

00:43:34,940 --> 00:43:38,120
something that I really want to see as

00:43:36,080 --> 00:43:41,690
expand them you can kind of hack it

00:43:38,120 --> 00:43:42,710
around already now inside souza because

00:43:41,690 --> 00:43:45,530
you have accessed with the sousa

00:43:42,710 --> 00:43:47,450
infrastructure but inside opensuse

00:43:45,530 --> 00:43:49,550
obviously we have other complications

00:43:47,450 --> 00:43:51,890
because we're running on a nice secure

00:43:49,550 --> 00:43:54,620
network you don't have directive VNC or

00:43:51,890 --> 00:43:55,940
ssh access to the worker machines so

00:43:54,620 --> 00:43:59,330
we're trying to figure out ways of

00:43:55,940 --> 00:44:02,200
handling that proxies authentication all

00:43:59,330 --> 00:44:04,280
of our kind of role management stuff I

00:44:02,200 --> 00:44:06,380
really like the idea of an OpenStack

00:44:04,280 --> 00:44:07,760
back end even though I've said all the

00:44:06,380 --> 00:44:10,610
nice stuff about the key move back end

00:44:07,760 --> 00:44:12,770
and the other backends we have not just

00:44:10,610 --> 00:44:13,580
because souza have products user cloud

00:44:12,770 --> 00:44:16,160
and OpenStack

00:44:13,580 --> 00:44:17,750
very interesting technology which we

00:44:16,160 --> 00:44:19,760
need to test stuff on so you know do

00:44:17,750 --> 00:44:23,780
these distributions work in a cloud

00:44:19,760 --> 00:44:25,940
environment but also you know we're

00:44:23,780 --> 00:44:27,950
limited by Hardware always always going

00:44:25,940 --> 00:44:30,290
to be limited by Hardware having a

00:44:27,950 --> 00:44:31,760
calving the ability to take tests that

00:44:30,290 --> 00:44:33,680
don't need to be checking certain

00:44:31,760 --> 00:44:36,380
hardware things test that you know could

00:44:33,680 --> 00:44:38,240
just run in any cloud environment throw

00:44:36,380 --> 00:44:40,490
it to a cloud let it spin up the VMS it

00:44:38,240 --> 00:44:43,370
needs let it throw it away I really like

00:44:40,490 --> 00:44:44,630
that idea the course I'm doing something

00:44:43,370 --> 00:44:47,420
like that let's why not do something

00:44:44,630 --> 00:44:51,140
similar with Cuba Nettie's or why not

00:44:47,420 --> 00:44:53,540
test dakka dakka dakka dakka i canna you

00:44:51,140 --> 00:44:55,250
know we could is anybody interested in

00:44:53,540 --> 00:44:57,020
writing it and if you are interested in

00:44:55,250 --> 00:45:00,080
writing it this is everything you need

00:44:57,020 --> 00:45:04,430
to know the website oh which is now

00:45:00,080 --> 00:45:08,750
wrong okay the main domain for open QA

00:45:04,430 --> 00:45:10,750
is now a HTTP open QA which is a lot

00:45:08,750 --> 00:45:12,500
easier to remember than that old string

00:45:10,750 --> 00:45:15,050
that's also where we have the

00:45:12,500 --> 00:45:17,990
documentation and at the moment we're

00:45:15,050 --> 00:45:21,140
still using progress that opensuse dorg

00:45:17,990 --> 00:45:24,500
as the main feature bug reporter for

00:45:21,140 --> 00:45:25,430
opensuse open QA and we're still trying

00:45:24,500 --> 00:45:28,010
to figure out what we're going to do

00:45:25,430 --> 00:45:31,580
with that and with that i have ten

00:45:28,010 --> 00:45:38,660
minutes for questions does anybody have

00:45:31,580 --> 00:45:39,830
any Martin oh um so if anybody does have

00:45:38,660 --> 00:45:41,720
questions could you use that microphone

00:45:39,830 --> 00:45:51,500
stand over there so it gets on the

00:45:41,720 --> 00:45:54,950
recording great do you support touch

00:45:51,500 --> 00:46:00,470
events ever always heard only mouse and

00:45:54,950 --> 00:46:03,020
keyboard where the way we've modeled the

00:46:00,470 --> 00:46:05,810
mouse events you could probably get away

00:46:03,020 --> 00:46:09,110
with treating that like touch so you

00:46:05,810 --> 00:46:11,120
know the witness I accidentally want to

00:46:09,110 --> 00:46:12,530
test at a forty two button Mouse so we

00:46:11,120 --> 00:46:16,640
can do 42 buttons on a mouse you can

00:46:12,530 --> 00:46:17,810
what we do five fingers so yeah it we'd

00:46:16,640 --> 00:46:19,790
probably need a little bit of work on

00:46:17,810 --> 00:46:24,020
the API to handle sort of the the multi

00:46:19,790 --> 00:46:25,210
gestures and in most cases we're passing

00:46:24,020 --> 00:46:27,520
through those events via via

00:46:25,210 --> 00:46:30,970
see so could you pass with a Jessie

00:46:27,520 --> 00:46:32,470
stuff via VNC or do you just do

00:46:30,970 --> 00:46:34,630
something natively for a change and not

00:46:32,470 --> 00:46:37,600
do it in the BNC stuff we use the VNC

00:46:34,630 --> 00:46:40,090
stuff like crazy because it's easy but

00:46:37,600 --> 00:46:41,590
there's no reason why you couldn't you

00:46:40,090 --> 00:46:43,810
know couldn't handle a different console

00:46:41,590 --> 00:46:45,970
that that one example I gave of the

00:46:43,810 --> 00:46:49,150
silicon so we've abstracted all of that

00:46:45,970 --> 00:46:52,600
various console nonsense away that's how

00:46:49,150 --> 00:46:54,850
we handle the VNC the ipmi stuff so so

00:46:52,600 --> 00:46:57,400
we how we handle things like mainframe

00:46:54,850 --> 00:47:01,960
not having a TTY like a nice extra

00:46:57,400 --> 00:47:08,010
lighting machine so yeah any other

00:47:01,960 --> 00:47:15,040
questions comments flames suggestions oh

00:47:08,010 --> 00:47:19,150
I really shouldn't have said that what's

00:47:15,040 --> 00:47:20,800
broken now you don't want to know one

00:47:19,150 --> 00:47:22,960
question you talked about testing

00:47:20,800 --> 00:47:28,840
software there yeah I'll do your test

00:47:22,960 --> 00:47:29,680
open QA we test open QA in open QA we

00:47:28,840 --> 00:47:31,450
don't actually have it running in

00:47:29,680 --> 00:47:33,580
production right now because I haven't

00:47:31,450 --> 00:47:35,050
had the time but we did it I did it a

00:47:33,580 --> 00:47:38,010
few hack weeks ago and I really want to

00:47:35,050 --> 00:47:41,350
see it done you know very very soon so

00:47:38,010 --> 00:47:43,540
open QA e can test itself very very

00:47:41,350 --> 00:47:46,590
comfortably just taking a disk image

00:47:43,540 --> 00:47:49,060
with opensuse or sling installed

00:47:46,590 --> 00:47:51,970
installing the packages making sure they

00:47:49,060 --> 00:47:53,920
work loading up the web UI making sure

00:47:51,970 --> 00:47:56,710
that's all they're actually shedding a

00:47:53,920 --> 00:47:59,020
job checking it's all running it's that

00:47:56,710 --> 00:48:01,860
was why yeah you kind of need to make

00:47:59,020 --> 00:48:03,940
sure that your test tool can test itself

00:48:01,860 --> 00:48:12,040
if you can do that you can prob ly test

00:48:03,940 --> 00:48:14,250
anything anything else no good thank you

00:48:12,040 --> 00:48:14,250
very much

00:48:16,530 --> 00:48:18,590

YouTube URL: https://www.youtube.com/watch?v=NEocMUOd5_k


