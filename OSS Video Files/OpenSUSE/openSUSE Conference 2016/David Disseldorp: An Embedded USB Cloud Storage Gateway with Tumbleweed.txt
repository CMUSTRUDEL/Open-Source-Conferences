Title: David Disseldorp: An Embedded USB Cloud Storage Gateway with Tumbleweed
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/934-an-embedded-usb-cloud-storage-gateway-with-tumbleweed

Scale-out block storage offerings, such as Ceph RADOS Block Devices, offer a number of desirable features including fault tolerance, thin-provisioning, online resize and snapshots.
Exposing such storage for access via an embedded USB storage gadget can solve a number of factors limiting adoption, namely:
- Interoperability
  + Cloud storage can now be consumed by almost any system with a USB port
- Ease of use
  + Configure once, then plug and play anywhere
- Security
  + Encryption can be performed on the USB device itself, reducing reliance on cloud storage providers

This presentation will introduce and demonstrate a USB cloud storage gateway prototype developed during SUSE Hack Week, running on an ARM board with openSUSE Tumbleweed.

David Disseldorp
Captions: 
	00:00:08,090 --> 00:00:15,200
okay thanks for coming so I'm David

00:00:12,750 --> 00:00:17,720
dusseldorp and I'm going to talk about

00:00:15,200 --> 00:00:26,300
a hike week project I worked on which is

00:00:17,720 --> 00:00:29,450
a safe USB gateway so just a quick

00:00:26,300 --> 00:00:31,640
agenda for starters so yeah just start

00:00:29,450 --> 00:00:35,390
off with a brief introduction to the

00:00:31,640 --> 00:00:37,850
project I then move on to SEF just give

00:00:35,390 --> 00:00:41,510
a quick overview of SEF and sort of how

00:00:37,850 --> 00:00:44,570
it works then onto the USB storage

00:00:41,510 --> 00:00:47,540
stacking colonel so what I've basically

00:00:44,570 --> 00:00:54,140
made use of there and we'll finish off

00:00:47,540 --> 00:00:57,050
with a demonstration so this project

00:00:54,140 --> 00:01:00,560
started the end of last year during hack

00:00:57,050 --> 00:01:04,280
week 13 so if you don't know hack week

00:01:00,560 --> 00:01:08,180
14 starts today so happy hacking next

00:01:04,280 --> 00:01:10,579
week but anyway back to last year I was

00:01:08,180 --> 00:01:14,090
considering what to work on for hack

00:01:10,579 --> 00:01:16,640
week and I had a an onboard gathering

00:01:14,090 --> 00:01:19,789
dust in the corner and thought okay I'd

00:01:16,640 --> 00:01:22,549
like to do something with this board my

00:01:19,789 --> 00:01:25,520
day job is is Seph so I thought okay

00:01:22,549 --> 00:01:30,039
I'll put these two things together and I

00:01:25,520 --> 00:01:33,229
will work on a SEF USB storage gateway

00:01:30,039 --> 00:01:35,840
and so the idea with this is we have our

00:01:33,229 --> 00:01:38,270
storage cluster potentially you know at

00:01:35,840 --> 00:01:40,819
home in our basement and we'd like to

00:01:38,270 --> 00:01:43,999
access that storage somehow from you

00:01:40,819 --> 00:01:46,999
know from mobile phones from Smart TVs

00:01:43,999 --> 00:01:49,819
from whatever device with a USB port and

00:01:46,999 --> 00:01:53,240
the idea is that I can then just plug in

00:01:49,819 --> 00:01:58,810
my USB gateway and access my self

00:01:53,240 --> 00:01:58,810
storage cluster with with that utility

00:01:59,740 --> 00:02:05,630
so yes as mentioned that the goals of

00:02:02,329 --> 00:02:07,520
the project or the main goal is just to

00:02:05,630 --> 00:02:12,800
allow this safe storage to be accessed

00:02:07,520 --> 00:02:15,590
by any device with a USB port the

00:02:12,800 --> 00:02:18,819
secondary goal was also to be able to to

00:02:15,590 --> 00:02:22,400
boot from a rather Spock device image so

00:02:18,819 --> 00:02:24,439
yeah most laptops can boot from USB so

00:02:22,400 --> 00:02:26,960
this means yeah basically it should just

00:02:24,439 --> 00:02:30,520
be a matter of connecting this device

00:02:26,960 --> 00:02:33,800
and I can boot from the safe cluster

00:02:30,520 --> 00:02:35,750
yeah one other goal was just that the

00:02:33,800 --> 00:02:38,330
configuration would be sort of as

00:02:35,750 --> 00:02:40,250
straightforward and easy as possible so

00:02:38,330 --> 00:02:42,740
you know I didn't want to have to log

00:02:40,250 --> 00:02:49,610
into the board just to if I change a key

00:02:42,740 --> 00:02:52,370
ring or a configuration parameter so now

00:02:49,610 --> 00:02:55,160
on to Seth hopefully most of you saw

00:02:52,370 --> 00:02:58,910
Owens talk yesterday I don't really want

00:02:55,160 --> 00:03:01,400
to go into two big detail but yeah Seth

00:02:58,910 --> 00:03:05,480
is basically an amazing open source

00:03:01,400 --> 00:03:08,770
project which allows allows you to yeah

00:03:05,480 --> 00:03:11,000
pull storage across a number of nodes

00:03:08,770 --> 00:03:13,520
and that storage is then highly

00:03:11,000 --> 00:03:15,260
available so that if anything dies

00:03:13,520 --> 00:03:18,140
within those nodes you know potentially

00:03:15,260 --> 00:03:21,640
you have a pal power failure or a disk

00:03:18,140 --> 00:03:25,360
dies you retain access to your storage

00:03:21,640 --> 00:03:27,800
yeah so it's all open source

00:03:25,360 --> 00:03:30,380
self-managing self-healing in that you

00:03:27,800 --> 00:03:32,930
know if you do have a failure will then

00:03:30,380 --> 00:03:34,820
you know reconstruct your your data with

00:03:32,930 --> 00:03:39,250
the amount of redundancies you require

00:03:34,820 --> 00:03:42,500
and it's also incredibly scalable so

00:03:39,250 --> 00:03:43,790
yeah you know you can run petabyte or

00:03:42,500 --> 00:03:51,200
you can store petabytes of information

00:03:43,790 --> 00:03:53,690
on on Seth so on the user access side

00:03:51,200 --> 00:03:58,430
surf is generally broken up into sort of

00:03:53,690 --> 00:04:00,890
three main protocols or components so we

00:03:58,430 --> 00:04:05,240
have on the left there the write-offs

00:04:00,890 --> 00:04:08,590
gateway and this is basically supports

00:04:05,240 --> 00:04:12,230
the restful protocols so amazon s3 or

00:04:08,590 --> 00:04:15,140
OpenStack Swift we have the write-offs

00:04:12,230 --> 00:04:17,960
block device interface which is is what

00:04:15,140 --> 00:04:21,320
I'm using for this project and that's

00:04:17,960 --> 00:04:23,720
basically a block device image which is

00:04:21,320 --> 00:04:27,260
then backed by objects on the safe

00:04:23,720 --> 00:04:30,350
cluster and finally on the right there's

00:04:27,260 --> 00:04:33,710
the ceph file system which is yeah POSIX

00:04:30,350 --> 00:04:38,750
file system on top of other SEF object

00:04:33,710 --> 00:04:40,500
store so a bit more on rattles block

00:04:38,750 --> 00:04:43,200
device or rbd

00:04:40,500 --> 00:04:45,750
and with this we have as mentioned a

00:04:43,200 --> 00:04:48,900
block device image which is then stored

00:04:45,750 --> 00:04:51,330
across the South cluster so obviously

00:04:48,900 --> 00:04:55,590
that inherits the reliability and

00:04:51,330 --> 00:04:58,200
scalability aspects of SEF has another

00:04:55,590 --> 00:05:00,420
number of other neat features so they're

00:04:58,200 --> 00:05:03,810
thin provisioned you can resize them

00:05:00,420 --> 00:05:06,000
online grow and shrink they support or

00:05:03,810 --> 00:05:10,230
you can do snapshots and clones of those

00:05:06,000 --> 00:05:14,520
images and on the access side we have

00:05:10,230 --> 00:05:16,620
the Linux kernel so from the colonel we

00:05:14,520 --> 00:05:18,980
can locally map a rather Spock device

00:05:16,620 --> 00:05:22,800
image that appears as a local device and

00:05:18,980 --> 00:05:26,610
then use it like any other disk and we

00:05:22,800 --> 00:05:32,010
have user space clients as well for

00:05:26,610 --> 00:05:35,310
other applications so now on to the the

00:05:32,010 --> 00:05:46,080
hardware I use for this project yeah

00:05:35,310 --> 00:05:50,070
actually I've got one yeah so basically

00:05:46,080 --> 00:05:55,560
i'm using a QB truck which is just a

00:05:50,070 --> 00:05:58,919
low-end arm v7 cpu dual-core with two

00:05:55,560 --> 00:06:03,030
gigabytes ram they're just sort of

00:05:58,919 --> 00:06:06,419
pretty slow cheap board but this is all

00:06:03,030 --> 00:06:12,750
I had access to so he's also capable of

00:06:06,419 --> 00:06:15,240
doing the job my main requirement for

00:06:12,750 --> 00:06:18,000
the hardware was that it had mainline

00:06:15,240 --> 00:06:21,900
kernel support so obviously I didn't

00:06:18,000 --> 00:06:25,440
want to be playing with ya rewriting new

00:06:21,900 --> 00:06:28,340
USB driver code so yeah the good thing

00:06:25,440 --> 00:06:30,780
about the QB truck is that the sun sea

00:06:28,340 --> 00:06:33,150
community have done a lot of work

00:06:30,780 --> 00:06:37,080
upstream to get basically all the

00:06:33,150 --> 00:06:40,320
components on the board working there's

00:06:37,080 --> 00:06:43,680
also a tumbleweed port so thanks to the

00:06:40,320 --> 00:06:46,080
the arm guys andreas Turk Alex they've

00:06:43,680 --> 00:06:51,539
done great work getting the tumbleweed

00:06:46,080 --> 00:06:53,130
poured up for that it is sort of a bit

00:06:51,539 --> 00:06:53,490
large for something which I'd hoped

00:06:53,130 --> 00:06:57,090
would

00:06:53,490 --> 00:06:59,130
a USB key very they're probably half the

00:06:57,090 --> 00:07:02,310
components on the board aren't needed

00:06:59,130 --> 00:07:09,270
for this project but yeah it's what I

00:07:02,310 --> 00:07:11,460
had access to just a quick look at a

00:07:09,270 --> 00:07:15,960
couple of alternatives so there's an

00:07:11,460 --> 00:07:18,330
open source hardware chip computer which

00:07:15,960 --> 00:07:24,060
has just been released by next thing ho

00:07:18,330 --> 00:07:27,300
and there's on the right yeah mips embed

00:07:24,060 --> 00:07:30,509
aboard both of which can run linux and

00:07:27,300 --> 00:07:32,580
should be basically potential options

00:07:30,509 --> 00:07:34,289
for this project and both are also

00:07:32,580 --> 00:07:40,409
around the 10 euro mark which is

00:07:34,289 --> 00:07:43,199
obviously benefit so now onto USB

00:07:40,409 --> 00:07:45,680
storage so sort of covered the the safe

00:07:43,199 --> 00:07:49,759
side and what i was using for hardware

00:07:45,680 --> 00:07:53,130
next was just plumbing in the USB side

00:07:49,759 --> 00:07:55,789
so within linux there are sort of a

00:07:53,130 --> 00:07:59,490
couple of options there so there's the

00:07:55,789 --> 00:08:02,550
mass storage kernel module and the TCM

00:07:59,490 --> 00:08:07,770
kernel module both are basically the the

00:08:02,550 --> 00:08:13,130
storage USB gadget layers an a then

00:08:07,770 --> 00:08:16,860
support yeah the two scuzzy over USB

00:08:13,130 --> 00:08:20,280
standards so we have support for some of

00:08:16,860 --> 00:08:23,069
the interesting performance based

00:08:20,280 --> 00:08:26,639
features so high speed support means

00:08:23,069 --> 00:08:30,719
queuing command queuing on the device

00:08:26,639 --> 00:08:35,209
and SuperSpeed i think is also out of

00:08:30,719 --> 00:08:37,320
order completion so there yeah there's

00:08:35,209 --> 00:08:41,180
impressive support on the colonel side

00:08:37,320 --> 00:08:43,440
for for acting as a USB storage device i

00:08:41,180 --> 00:08:45,570
should mention at this stage here that i

00:08:43,440 --> 00:08:47,520
had to sew some of these features won't

00:08:45,570 --> 00:08:50,790
a nut weren't enabled on the tumbleweed

00:08:47,520 --> 00:08:52,950
colonel so i did pull down a recent

00:08:50,790 --> 00:08:59,670
mainline kernel and basically just ran

00:08:52,950 --> 00:09:01,800
that on the board so now on to how that

00:08:59,670 --> 00:09:04,579
the board is basically put together or

00:09:01,800 --> 00:09:08,779
have the boot sequence of the board

00:09:04,579 --> 00:09:11,660
so the idea is you have your board you

00:09:08,779 --> 00:09:14,179
plug it into your machine you then need

00:09:11,660 --> 00:09:16,850
to point this board at your self cluster

00:09:14,179 --> 00:09:18,619
so that involves getting the ceph

00:09:16,850 --> 00:09:22,129
configuration and key ring for

00:09:18,619 --> 00:09:24,980
authentication and also telling it which

00:09:22,129 --> 00:09:28,790
image should be mapped or exposed by the

00:09:24,980 --> 00:09:32,779
board as a USB storage device once

00:09:28,790 --> 00:09:34,489
that's done so this is handled via a you

00:09:32,779 --> 00:09:38,509
know what I call a configuration file

00:09:34,489 --> 00:09:41,989
system so basically I I provision a ram

00:09:38,509 --> 00:09:43,759
disk format it with fat so it can be you

00:09:41,989 --> 00:09:47,379
know handled on Windows or Linux and

00:09:43,759 --> 00:09:51,110
then the user can then copy those

00:09:47,379 --> 00:09:53,569
configuration files onto the board once

00:09:51,110 --> 00:09:57,019
that's ejected and so we intercept or

00:09:53,569 --> 00:09:59,420
detect the eject event and then we can

00:09:57,019 --> 00:10:02,029
go ahead and connect our or map our

00:09:59,420 --> 00:10:09,139
rather splock device image and expose it

00:10:02,029 --> 00:10:13,160
via USB so with that I'd like to move on

00:10:09,139 --> 00:10:16,069
to the demonstration so with this I have

00:10:13,160 --> 00:10:21,919
or my setup here is I have on my laptop

00:10:16,069 --> 00:10:25,129
a SEF cluster running with a few OS DS

00:10:21,919 --> 00:10:28,699
and a monitor node so this is yeah then

00:10:25,129 --> 00:10:33,709
my backing SEF cluster at the front here

00:10:28,699 --> 00:10:35,899
i have my QB truck board and these QB

00:10:33,709 --> 00:10:39,399
truck is then connected by a network to

00:10:35,899 --> 00:10:44,179
the safe cluster being the laptop and

00:10:39,399 --> 00:10:47,839
finally on the USB side the board has a

00:10:44,179 --> 00:10:52,369
USB on-the-go port which is then acting

00:10:47,839 --> 00:10:54,169
in our device mode or slave mode so

00:10:52,369 --> 00:10:57,439
first off I'll just show how this is

00:10:54,169 --> 00:11:00,309
actually configured so we'll plug this

00:10:57,439 --> 00:11:00,309
into my laptop

00:11:07,710 --> 00:11:24,190
and I'll bring up the configuration file

00:11:11,860 --> 00:11:27,490
system so there you can see basically

00:11:24,190 --> 00:11:30,610
this config drive so this is backed by a

00:11:27,490 --> 00:11:33,370
ramdisk on the board so here we have our

00:11:30,610 --> 00:11:36,060
self configuration the key ring to

00:11:33,370 --> 00:11:40,180
actually access the SEF cluster and

00:11:36,060 --> 00:11:42,670
finally this USB config and that

00:11:40,180 --> 00:11:48,430
basically says okay the the image that I

00:11:42,670 --> 00:11:52,720
want to expose buy a USB is this USB

00:11:48,430 --> 00:11:58,860
named image in the rbd pool on the SEF

00:11:52,720 --> 00:12:02,380
cluster so once we are happy with that

00:11:58,860 --> 00:12:04,529
which it all looks good I've copied the

00:12:02,380 --> 00:12:08,110
key ring and come feet from my cluster

00:12:04,529 --> 00:12:12,180
so I can go ahead and eject the device

00:12:08,110 --> 00:12:24,490
and what we do then is on the board

00:12:12,180 --> 00:12:27,220
intercept the eject and hopefully if

00:12:24,490 --> 00:12:31,000
you'd like to see demo come by the table

00:12:27,220 --> 00:12:34,260
later it looks like I must have done

00:12:31,000 --> 00:12:38,170
something wrong with the confit there

00:12:34,260 --> 00:12:40,900
okay so once normally once the

00:12:38,170 --> 00:12:44,110
configuration is ejected we then map the

00:12:40,900 --> 00:12:48,100
rudder Spock device image locally and it

00:12:44,110 --> 00:12:50,290
comes up as USB storage device I was

00:12:48,100 --> 00:12:53,529
then going to show my android phone

00:12:50,290 --> 00:12:56,829
connected and copy a photo from the

00:12:53,529 --> 00:13:00,670
phone onto this device onto my SEF

00:12:56,829 --> 00:13:02,440
cluster yeah if you'd like to see the

00:13:00,670 --> 00:13:05,310
demo just come by later was working

00:13:02,440 --> 00:13:05,310
seconds ago so

00:13:15,439 --> 00:13:21,949
otherwise yeah a few other options for

00:13:18,870 --> 00:13:26,480
the project so on the performance side

00:13:21,949 --> 00:13:29,730
as you'd expect with so this is a USB to

00:13:26,480 --> 00:13:33,180
interface it's it's not great I was sort

00:13:29,730 --> 00:13:37,439
of seeing around 35 megabytes per second

00:13:33,180 --> 00:13:41,339
in and out and so the USB is seems to be

00:13:37,439 --> 00:13:43,740
the bottleneck there on the boot side

00:13:41,339 --> 00:13:45,899
obviously you want the board to be

00:13:43,740 --> 00:13:48,959
booting as quickly as possible and so

00:13:45,899 --> 00:13:52,290
that the storage is exposed as soon as

00:13:48,959 --> 00:13:55,879
possible in terms of speeding that up I

00:13:52,290 --> 00:13:59,790
looked at or I did play with running the

00:13:55,879 --> 00:14:02,040
or exposing the USB device from inner

00:13:59,790 --> 00:14:04,589
daddy so basically not booting into the

00:14:02,040 --> 00:14:06,389
full operating system just booting the

00:14:04,589 --> 00:14:09,240
inner daddy and doing everything from

00:14:06,389 --> 00:14:14,129
there that works works well and sort of

00:14:09,240 --> 00:14:16,499
speeds up the boot time a lot yeah for

00:14:14,129 --> 00:14:20,220
the TCM modules so currently i'm using

00:14:16,499 --> 00:14:23,819
the mass storage kernel module which has

00:14:20,220 --> 00:14:26,699
its own scuzzy emulation i would have

00:14:23,819 --> 00:14:31,079
liked to have used the TCM module which

00:14:26,699 --> 00:14:35,850
then makes use of the l io scuzzy stack

00:14:31,079 --> 00:14:39,000
so more mature were thoroughly used

00:14:35,850 --> 00:14:40,829
scuzzy stack in the colonel I couldn't

00:14:39,000 --> 00:14:42,829
get that working with this Hardware I

00:14:40,829 --> 00:14:46,399
did get it working in my vm so

00:14:42,829 --> 00:14:49,050
something's wrong there otherwise a

00:14:46,399 --> 00:14:52,649
couple of other potential improvements

00:14:49,050 --> 00:14:55,559
so this has 4 gigabytes of mount on

00:14:52,649 --> 00:14:59,040
board so we could make use of that for

00:14:55,559 --> 00:15:02,370
vocation so potentially running DMK

00:14:59,040 --> 00:15:06,389
shore or BK shoe on the board 22 case

00:15:02,370 --> 00:15:08,339
locally another option would be DM

00:15:06,389 --> 00:15:10,769
Krypton the board itself as well and I'm

00:15:08,339 --> 00:15:13,319
so transparently handling compression oh

00:15:10,769 --> 00:15:20,759
sorry encryption of data going in and

00:15:13,319 --> 00:15:22,279
out otherwise yeah any questions sorry

00:15:20,759 --> 00:15:25,459
about the demo

00:15:22,279 --> 00:15:36,399
it was working moments ago so please

00:15:25,459 --> 00:15:36,399
just come by and take a look yes Alex

00:15:38,949 --> 00:15:46,490
yep this time the real Alex um so do you

00:15:43,999 --> 00:15:47,899
actually have images made of open to

00:15:46,490 --> 00:15:49,699
users and your tools and everything just

00:15:47,899 --> 00:15:51,290
assemble together so I can just take it

00:15:49,699 --> 00:15:54,259
down or they put it on my board inhibit

00:15:51,290 --> 00:15:57,589
money know so I have basically the

00:15:54,259 --> 00:16:00,680
scripts I used to expose the the config

00:15:57,589 --> 00:16:02,329
FS and the image are in this repo but

00:16:00,680 --> 00:16:08,149
otherwise you do have to build your own

00:16:02,329 --> 00:16:10,670
kernel with those USB gadget or with USB

00:16:08,149 --> 00:16:13,519
gadgets support so yes I would like to

00:16:10,670 --> 00:16:16,339
get that into the standard QB truck

00:16:13,519 --> 00:16:18,470
config if that's possible law if if you

00:16:16,339 --> 00:16:20,120
guys would be interested totally yeah

00:16:18,470 --> 00:16:22,220
let's just make sure that all this works

00:16:20,120 --> 00:16:24,800
out of the box on all systems and then

00:16:22,220 --> 00:16:26,509
create images out of it cool it I don't

00:16:24,800 --> 00:16:28,309
see any reason why we shouldn't and then

00:16:26,509 --> 00:16:30,290
people can just go and take it on their

00:16:28,309 --> 00:16:34,550
boards that have happened to support OTG

00:16:30,290 --> 00:16:38,449
and just expose them SF clusters sounds

00:16:34,550 --> 00:16:41,629
good I should also say I managed to

00:16:38,449 --> 00:16:44,000
brick one board while I was working on

00:16:41,629 --> 00:16:47,059
this playing with lithium batteries so

00:16:44,000 --> 00:16:51,139
if anyone wants a bricked cube attract

00:16:47,059 --> 00:16:54,910
boys I think it's just the pmu so yeah

00:16:51,139 --> 00:16:54,910
just come see me if you want it

00:16:56,410 --> 00:17:01,629
otherwise yeah thanks for attending

00:17:06,089 --> 00:17:08,150

YouTube URL: https://www.youtube.com/watch?v=rn47iqFP9LE


