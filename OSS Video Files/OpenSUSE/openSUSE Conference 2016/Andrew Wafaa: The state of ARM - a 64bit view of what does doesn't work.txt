Title: Andrew Wafaa: The state of ARM - a 64bit view of what does doesn't work
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/802-the-state-of-arm-a-64bit-view-of-what-does-doesn-t-work

The AArch64 port is now in pretty good shape with most things ported and built. However we know that there is plenty of software that is not optimised and some may not actually work at all. Please come along and moan about anything you have found which doesn't work as well on AArch64 as it does on x86. We (Linaro, ARM and openSUSE) want your feedback on where to direct effort next.

This talk will cover the current status of the port with both and upstream and openSUSE specific view, and crucially hardware availability. Only a few things are completely missing, but we know that a lot of software is using the basic 'fallback support' where other architectures have specific optimisations. Some stuff is probably building, but not actually working right. We are keen to fix things that are actively getting in the way of using AArch64 in real systems, but to do that we need feedback from users on what to look at next as we move from mostly enablement to mostly optimisation. GCC, OpenJDK, & LLVM are known to be in good shape, but there is a pile of other stuff that probably isn't. It's very hard to test 'all the software in the world', so please tell us about stuff you've noticed not working well, or incredibly slowly, or that you suspect might be a problem and need work.

Andrew Wafaa
Captions: 
	00:00:07,740 --> 00:00:13,560
so thanks for coming I'm going to talk

00:00:11,350 --> 00:00:17,640
about the state of armed

00:00:13,560 --> 00:00:21,390
and a 64-bit view of what does doesn't

00:00:17,640 --> 00:00:24,360
work the intentions for this to be a

00:00:21,390 --> 00:00:26,850
little bit more interactive I'll go

00:00:24,360 --> 00:00:33,420
through a few points and try and spur

00:00:26,850 --> 00:00:36,270
some discussion so Who am I my day job

00:00:33,420 --> 00:00:39,290
I'm a senior principal engineer at at

00:00:36,270 --> 00:00:43,370
arm I focus on open source so

00:00:39,290 --> 00:00:46,740
distributions upstream projects and

00:00:43,370 --> 00:00:51,540
dancing consumers of open source are my

00:00:46,740 --> 00:00:54,660
primary focuses I've been involved with

00:00:51,540 --> 00:00:59,010
opensuse for quite a long time six dot 2

00:00:54,660 --> 00:01:03,120
is my first distro and unfortunately

00:00:59,010 --> 00:01:08,250
I've not been able to get away since

00:01:03,120 --> 00:01:14,670
then I'm also known to have some

00:01:08,250 --> 00:01:20,759
questionable fashion choices kind of

00:01:14,670 --> 00:01:23,070
goes on through different events and my

00:01:20,759 --> 00:01:26,549
homemade mankini that's a bit difficult

00:01:23,070 --> 00:01:34,399
to see on the screen was my last design

00:01:26,549 --> 00:01:40,069
outfit but I'm also European in spite of

00:01:34,399 --> 00:01:43,079
fifty two percent of my compatriots so

00:01:40,069 --> 00:01:46,469
that's about me Oh what else am I going

00:01:43,079 --> 00:01:50,939
to talk about I'm going to cover briefly

00:01:46,469 --> 00:01:54,590
what about 64 otherwise known as I'm 64

00:01:50,939 --> 00:01:57,749
is give an overview of software status

00:01:54,590 --> 00:01:58,950
things that we know do work things have

00:01:57,749 --> 00:02:04,799
been optimized things that we know are

00:01:58,950 --> 00:02:08,550
broken we don't necessarily know what's

00:02:04,799 --> 00:02:10,520
missing because without a bit of

00:02:08,550 --> 00:02:13,520
feedback we can't do anything about it

00:02:10,520 --> 00:02:13,520
brief

00:02:13,719 --> 00:02:20,329
overview of the current hardware status

00:02:16,840 --> 00:02:25,359
and going to touch briefly on

00:02:20,329 --> 00:02:29,299
benchmarking as well and then there's

00:02:25,359 --> 00:02:32,959
next steps which is kind of where you

00:02:29,299 --> 00:02:35,810
guys come in for the discussion part so

00:02:32,959 --> 00:02:40,669
for those that aren't aware of what AR

00:02:35,810 --> 00:02:45,290
64 is it's also known as I'm 64 the

00:02:40,669 --> 00:02:47,840
kernel space it's our charm 64 debian

00:02:45,290 --> 00:02:51,919
and ubuntu use arm 64 moniker rather

00:02:47,840 --> 00:02:53,780
than a are 64 it's part of the eighth

00:02:51,919 --> 00:02:58,250
revision of the ARM architecture known

00:02:53,780 --> 00:03:02,359
as I'm v8 it was a ground-up design of

00:02:58,250 --> 00:03:05,239
the architecture but ensuring that those

00:03:02,359 --> 00:03:10,370
backwards compatibility an arm have come

00:03:05,239 --> 00:03:16,090
out with three 64-bit CPU designs so far

00:03:10,370 --> 00:03:20,509
it's the cortex a53 the 857 and the a 72

00:03:16,090 --> 00:03:24,229
and the diagram there just shows the

00:03:20,509 --> 00:03:26,900
evolution from arm v5 all the way

00:03:24,229 --> 00:03:29,209
through with the new features being

00:03:26,900 --> 00:03:31,090
added in each revision and ensuring that

00:03:29,209 --> 00:03:36,079
there's always backwards compatibility

00:03:31,090 --> 00:03:42,049
you'll notice that under arm v8 there is

00:03:36,079 --> 00:03:43,579
a 9 32 and a 64 8 32 is the 32-bit

00:03:42,049 --> 00:03:47,120
implementation of the arm v8

00:03:43,579 --> 00:03:53,989
architecture and we recently announced

00:03:47,120 --> 00:04:01,040
the cortex a 35 i believe it is which is

00:03:53,989 --> 00:04:06,349
a pure 32-bit implementation so what's

00:04:01,040 --> 00:04:09,409
the software status alarm 64 it's mostly

00:04:06,349 --> 00:04:15,620
working basically almost everything

00:04:09,409 --> 00:04:21,159
builds so as I overheard not too long

00:04:15,620 --> 00:04:21,159
ago if it builds it's done

00:04:23,500 --> 00:04:33,919
not quite so if you look at OBS there's

00:04:29,720 --> 00:04:42,169
a bit of disparity between x86 and AR 64

00:04:33,919 --> 00:04:43,970
there but we are pretty close so what we

00:04:42,169 --> 00:04:49,490
know is that the obvious things that

00:04:43,970 --> 00:04:51,470
people care about are done and because

00:04:49,490 --> 00:04:55,220
that is the large chunk of software out

00:04:51,470 --> 00:04:59,090
there the items that need to be ported

00:04:55,220 --> 00:05:01,220
are smaller but part of the reason is

00:04:59,090 --> 00:05:04,340
that they're also much harder to port

00:05:01,220 --> 00:05:09,169
the low-hanging fruit has now pretty

00:05:04,340 --> 00:05:12,890
much been picked so that's great

00:05:09,169 --> 00:05:15,740
software supported but does it run if

00:05:12,890 --> 00:05:19,669
it's got integrated unit tests it should

00:05:15,740 --> 00:05:24,380
run a lot of the software hasn't

00:05:19,669 --> 00:05:26,510
necessarily been tested because not

00:05:24,380 --> 00:05:29,180
everyone runs all the software that's

00:05:26,510 --> 00:05:32,770
available and some people that run some

00:05:29,180 --> 00:05:38,750
of those niche case software workloads

00:05:32,770 --> 00:05:41,600
may not have tried it on arm yet even if

00:05:38,750 --> 00:05:43,789
it does run there's a large chance that

00:05:41,600 --> 00:05:45,860
it may not run optimally so you're not

00:05:43,789 --> 00:05:49,820
going to get the best out of that

00:05:45,860 --> 00:05:55,370
software but if we look at what has been

00:05:49,820 --> 00:06:02,800
optimized to run well on arm most the

00:05:55,370 --> 00:06:10,070
key languages are there openjdk C C++

00:06:02,800 --> 00:06:13,669
know Jas is there obviously the

00:06:10,070 --> 00:06:16,450
compilers both GCC and llvm have been

00:06:13,669 --> 00:06:18,560
optimized the Colonel's had a lot of

00:06:16,450 --> 00:06:22,039
optimization at its work especially in

00:06:18,560 --> 00:06:24,320
the areas of crypto raid 6 and there's

00:06:22,039 --> 00:06:27,289
continual work going on obviously in the

00:06:24,320 --> 00:06:30,830
kernel to ensure that more is optimized

00:06:27,289 --> 00:06:32,860
to run as well as possible and if you

00:06:30,830 --> 00:06:35,030
look further up the stack

00:06:32,860 --> 00:06:42,380
actual applications thanks you've got

00:06:35,030 --> 00:06:46,540
openssl SEF Hadoop and Zen have all been

00:06:42,380 --> 00:06:51,530
added cephan Hadoop especially have

00:06:46,540 --> 00:06:55,250
improved CRC performance and the zen

00:06:51,530 --> 00:07:01,000
code base on arm 64 is much smaller than

00:06:55,250 --> 00:07:04,389
it is on x86 it was a relatively fresh

00:07:01,000 --> 00:07:04,389
implementation of the Xen hypervisor

00:07:04,600 --> 00:07:10,370
well that's all good but what's the

00:07:07,280 --> 00:07:14,750
difference really on optimized code

00:07:10,370 --> 00:07:16,490
versus straight out of the box so if we

00:07:14,750 --> 00:07:20,020
look at what some of our friends over in

00:07:16,490 --> 00:07:24,229
debian have done using their boch

00:07:20,020 --> 00:07:28,130
application it's part of their QA side

00:07:24,229 --> 00:07:33,950
of things it's written no camel and if

00:07:28,130 --> 00:07:37,820
you use the fallback see implementation

00:07:33,950 --> 00:07:40,479
about camel it runs in just under five

00:07:37,820 --> 00:07:44,270
hours but if you using the native

00:07:40,479 --> 00:07:47,419
optimized o camel it only runs in 1 hour

00:07:44,270 --> 00:07:50,260
and 15 so there is vast performance

00:07:47,419 --> 00:07:53,270
improvement using optimized native code

00:07:50,260 --> 00:07:56,450
may not be rocket science that some

00:07:53,270 --> 00:08:01,460
people don't actually grasp the

00:07:56,450 --> 00:08:06,310
relevance there so there's quite a bit

00:08:01,460 --> 00:08:15,680
that has been ported but not twice yet

00:08:06,310 --> 00:08:19,100
Lua rust golang they've not quite had

00:08:15,680 --> 00:08:24,590
the care and attention needed to get the

00:08:19,100 --> 00:08:28,660
most out of them recently mano had been

00:08:24,590 --> 00:08:31,659
released upstream with full on 64 sport

00:08:28,660 --> 00:08:36,520
so that's probably one of the newer

00:08:31,659 --> 00:08:36,520
porting additions to the the stack

00:08:37,419 --> 00:08:43,849
rookie who works at arm and is also a

00:08:40,490 --> 00:08:44,649
linaro assignee spends his life dealing

00:08:43,849 --> 00:08:49,720
with

00:08:44,649 --> 00:08:52,089
I'm 64 builds and at linaro a couple of

00:08:49,720 --> 00:08:58,689
years ago they spend almost the full

00:08:52,089 --> 00:09:02,800
year on going through assembler code to

00:08:58,689 --> 00:09:04,240
find out which software packages how

00:09:02,800 --> 00:09:06,459
December in there that we're just

00:09:04,240 --> 00:09:09,910
getting in the way and rather than

00:09:06,459 --> 00:09:12,699
trying to fix the assembler code it's

00:09:09,910 --> 00:09:16,559
much easier much cleaner just to remove

00:09:12,699 --> 00:09:16,559
it a lot of the time it's superfluous

00:09:16,589 --> 00:09:25,029
linaro are running a competition if you

00:09:22,209 --> 00:09:29,079
go to perform stockland are a dog for

00:09:25,029 --> 00:09:37,540
helping in performing improving even the

00:09:29,079 --> 00:09:43,240
performance of software alarm 64 so what

00:09:37,540 --> 00:09:46,889
pieces do we know a missing and we know

00:09:43,240 --> 00:09:50,470
luige it still does not run on arm 64

00:09:46,889 --> 00:09:53,499
there's quite a few network related

00:09:50,470 --> 00:09:57,579
applications that leverage luige it now

00:09:53,499 --> 00:09:59,079
and that is being worked on linaro is

00:09:57,579 --> 00:10:03,999
working with upstream to try and drive

00:09:59,079 --> 00:10:07,529
that through go wang currently is moving

00:10:03,999 --> 00:10:10,029
to an SS a back-end for the go compiler

00:10:07,529 --> 00:10:15,850
when that gets released in one dot seven

00:10:10,029 --> 00:10:19,389
it will not have support for arm 64 it

00:10:15,850 --> 00:10:23,790
will fall back to the existing version 1

00:10:19,389 --> 00:10:27,790
dot six but we are working with upstream

00:10:23,790 --> 00:10:31,329
to get the essay back imported across to

00:10:27,790 --> 00:10:35,709
arm that's expected in golang 1ba date

00:10:31,329 --> 00:10:37,779
which is due next year i believe and as

00:10:35,709 --> 00:10:40,529
i mentioned Manos being ported but with

00:10:37,779 --> 00:10:44,499
in opensuse it's not been packaged yet

00:10:40,529 --> 00:10:49,209
so a lot of the unresolvable that i

00:10:44,499 --> 00:10:53,110
showed earlier on are mono dependencies

00:10:49,209 --> 00:10:55,779
and so that should hopefully bring us

00:10:53,110 --> 00:11:01,180
much much closer now to

00:10:55,779 --> 00:11:07,810
what's available in x86 so soft was all

00:11:01,180 --> 00:11:09,999
good but can you run on anything it

00:11:07,810 --> 00:11:12,850
depends so if you've not got out in

00:11:09,999 --> 00:11:19,089
space what do you do can you use an ec2

00:11:12,850 --> 00:11:25,329
instance or something yes run above from

00:11:19,089 --> 00:11:29,649
OVH use Thunder X systems and so you can

00:11:25,329 --> 00:11:34,290
get VMs on there if you want to use them

00:11:29,649 --> 00:11:39,459
as build house that have them as your

00:11:34,290 --> 00:11:41,889
VPS and of course you can use the OBS to

00:11:39,459 --> 00:11:45,300
build your software that's running a

00:11:41,889 --> 00:11:53,069
mixture of applied micro x-gene ones and

00:11:45,300 --> 00:11:57,550
Seattle 1100 so you've got a choice of

00:11:53,069 --> 00:12:02,259
cloud-based infrastructure if you wish

00:11:57,550 --> 00:12:05,939
but you've got a big desk and you like

00:12:02,259 --> 00:12:09,220
to see blinky lights it's quite soothing

00:12:05,939 --> 00:12:12,069
to help with your bug reports there's a

00:12:09,220 --> 00:12:15,370
wide variety now of hardware that you

00:12:12,069 --> 00:12:21,129
can get that running on this running a

00:12:15,370 --> 00:12:24,699
are 64 so it depends on out of that list

00:12:21,129 --> 00:12:28,139
what your budget is if you won the

00:12:24,699 --> 00:12:30,399
lottery you could go for an HP moonshot

00:12:28,139 --> 00:12:34,589
kind of sitting around just over 10

00:12:30,399 --> 00:12:38,379
grand you can go a little bit lower and

00:12:34,589 --> 00:12:41,259
go for the gigabyte 8270 surround the

00:12:38,379 --> 00:12:46,480
five thousand dollar mark that's for

00:12:41,259 --> 00:12:48,639
sleds each with two sockets each sockets

00:12:46,480 --> 00:12:55,870
forty-eight chords so that's 96 kors

00:12:48,639 --> 00:12:59,649
purse led it's 384 cause roughly if my

00:12:55,870 --> 00:13:02,350
math works out that's still a little bit

00:12:59,649 --> 00:13:05,370
too expensive that's fine we can go a

00:13:02,350 --> 00:13:09,059
little bit lower 3,000 for dual socket

00:13:05,370 --> 00:13:13,259
96 cause bit more disk space etc

00:13:09,059 --> 00:13:16,289
still a bit on the pricey side we can go

00:13:13,259 --> 00:13:23,549
for softball in overdrive 3000 and I've

00:13:16,289 --> 00:13:27,089
got one and it runs beautifully or you

00:13:23,549 --> 00:13:30,539
can go for an applied micro xe1 def

00:13:27,089 --> 00:13:35,999
platform a little bit more desktop sighs

00:13:30,539 --> 00:13:38,939
form factor or you can go for a single

00:13:35,999 --> 00:13:44,309
socket when you serve from gigabyte

00:13:38,939 --> 00:13:48,599
running Thunder X and even smaller still

00:13:44,309 --> 00:13:53,369
service form factor is the are 120 as

00:13:48,599 --> 00:13:58,499
well which again runs under ex produced

00:13:53,369 --> 00:14:02,069
by gigabyte if you're not keen on form

00:13:58,499 --> 00:14:04,739
factor you can buy the mp3 from gigabyte

00:14:02,069 --> 00:14:07,619
running x-gene one and put that in

00:14:04,739 --> 00:14:12,419
whatever chassis you desire you can put

00:14:07,619 --> 00:14:15,509
it in your desktop system and put in a

00:14:12,419 --> 00:14:21,569
pci graphics card and you can use that

00:14:15,509 --> 00:14:25,739
as your desktop the overdrive 1000 just

00:14:21,569 --> 00:14:31,709
announced there's a nice small desktop

00:14:25,739 --> 00:14:35,009
form factor grateful testing software ow

00:14:31,709 --> 00:14:40,889
writing code on running users a home

00:14:35,009 --> 00:14:46,289
server it's up to you more bare bones is

00:14:40,889 --> 00:14:50,429
the 96 boards cello from la maker that's

00:14:46,289 --> 00:14:54,479
very similar to the overdrive 1000 it

00:14:50,429 --> 00:14:58,289
has a few additional pieces like an

00:14:54,479 --> 00:15:01,079
exposed pci slot but it's just a single

00:14:58,289 --> 00:15:04,279
board computer you don't get any hard

00:15:01,079 --> 00:15:09,989
drive any case etc so it's kind of

00:15:04,279 --> 00:15:12,959
BeagleBone esque but grown up we can go

00:15:09,989 --> 00:15:14,969
for some of the smaller 96 boards like

00:15:12,959 --> 00:15:18,209
the Heike which comes in two variations

00:15:14,969 --> 00:15:20,339
from la maker one gig at some five

00:15:18,209 --> 00:15:21,360
dollars or a two gig version at nine

00:15:20,339 --> 00:15:27,870
dollars

00:15:21,360 --> 00:15:33,540
and it's very much targeted at the more

00:15:27,870 --> 00:15:36,860
embedded side of usage and the same with

00:15:33,540 --> 00:15:42,839
Qualcomm is drawing board for 10 c from

00:15:36,860 --> 00:15:45,690
96 boards that again $75 or you can go a

00:15:42,839 --> 00:15:50,910
little bit less $35 you get the

00:15:45,690 --> 00:15:55,529
raspberry pi 3 and probably the cheapest

00:15:50,910 --> 00:15:57,570
one at the minute is the pine 64 two

00:15:55,529 --> 00:16:00,060
variations half a gig or a gig of ram

00:15:57,570 --> 00:16:06,360
and it depends on your budget fifteen

00:16:00,060 --> 00:16:09,300
thirty dollars so I've got my hardware

00:16:06,360 --> 00:16:14,160
I've got my software how do i test how

00:16:09,300 --> 00:16:19,410
well it all performs benchmarking is not

00:16:14,160 --> 00:16:22,040
simple it's very easy to gain you need

00:16:19,410 --> 00:16:24,779
to ensure that you have equivalent

00:16:22,040 --> 00:16:30,180
platforms if you want to do comparisons

00:16:24,779 --> 00:16:33,240
if it's not like for like or as close as

00:16:30,180 --> 00:16:36,570
possible there's not much point in doing

00:16:33,240 --> 00:16:39,420
a comparison and when you're doing your

00:16:36,570 --> 00:16:43,260
benchmarking all your tests make sure

00:16:39,420 --> 00:16:48,959
you do it over a set period of time

00:16:43,260 --> 00:16:52,290
longer than one minute it's you will

00:16:48,959 --> 00:16:54,899
find variations as you repeat your tests

00:16:52,290 --> 00:16:58,290
over and over and over again so you'll

00:16:54,899 --> 00:16:59,880
need to amortize your results you can't

00:16:58,290 --> 00:17:03,149
just take where that looks like the best

00:16:59,880 --> 00:17:06,900
1 i'll just take that one and you need

00:17:03,149 --> 00:17:08,189
to pick a real world metric and one

00:17:06,900 --> 00:17:10,020
that's common across all the platforms

00:17:08,189 --> 00:17:11,939
that you want to look at if you're just

00:17:10,020 --> 00:17:15,179
going to pick something that's specific

00:17:11,939 --> 00:17:18,480
to arm yet you want to compare it

00:17:15,179 --> 00:17:21,449
against Power MIPS x86 whatever or a

00:17:18,480 --> 00:17:24,770
different arm platform you need to

00:17:21,449 --> 00:17:28,830
ensure that that metric is common across

00:17:24,770 --> 00:17:30,630
platforms that you want to test and at

00:17:28,830 --> 00:17:33,279
the end of the day if you know of good

00:17:30,630 --> 00:17:38,419
benchmarks please let me know

00:17:33,279 --> 00:17:42,830
because there's a wealth of benchmarks

00:17:38,419 --> 00:17:44,419
out there spec in spec you know etc but

00:17:42,830 --> 00:17:48,049
they're not really representative of

00:17:44,419 --> 00:17:54,289
real world use cases if an application

00:17:48,049 --> 00:17:55,840
has a good benchmarking setup please let

00:17:54,289 --> 00:17:58,070
me know that'd be great to find out

00:17:55,840 --> 00:18:02,330
there have been a couple of articles on

00:17:58,070 --> 00:18:03,830
benchmarking since cavium publicly

00:18:02,330 --> 00:18:07,429
announced production availability of the

00:18:03,830 --> 00:18:10,220
thunder x platforms one was by intel

00:18:07,429 --> 00:18:13,190
where they went through a third party to

00:18:10,220 --> 00:18:15,230
obtain a system and within that they

00:18:13,190 --> 00:18:18,200
openly admitted that they have no idea

00:18:15,230 --> 00:18:20,750
how to tune the system so yeah your

00:18:18,200 --> 00:18:22,639
mileage may vary but we know how to tune

00:18:20,750 --> 00:18:24,019
our Intel systems and when we turn our

00:18:22,639 --> 00:18:27,590
Intel systems and run this software

00:18:24,019 --> 00:18:29,960
workload it looks much better than these

00:18:27,590 --> 00:18:33,169
really crappy numbers that you can get

00:18:29,960 --> 00:18:38,809
on this Thunder platform not quite like

00:18:33,169 --> 00:18:40,730
for like and there has been another one

00:18:38,809 --> 00:18:44,779
where it's a little bit more evenly

00:18:40,730 --> 00:18:50,990
balanced so recommend you read the the

00:18:44,779 --> 00:18:54,830
next platform on that so that's my brief

00:18:50,990 --> 00:18:59,570
run-through of what the current status

00:18:54,830 --> 00:19:06,529
is where we know we're at now this is

00:18:59,570 --> 00:19:09,620
where the interaction comes so does

00:19:06,529 --> 00:19:11,360
anybody have any questions or does

00:19:09,620 --> 00:19:13,720
everybody want to get outside to the

00:19:11,360 --> 00:19:13,720
paddling pool

00:19:23,120 --> 00:19:31,790
so the question was how much open

00:19:26,790 --> 00:19:31,790
sources in the stack and is there any

00:19:31,880 --> 00:19:41,180
black spots that I would rather not

00:19:34,230 --> 00:19:44,910
cover so with the design of arm VA and

00:19:41,180 --> 00:19:48,420
the concerted targeting of the

00:19:44,910 --> 00:19:50,300
enterprise space because as a normal

00:19:48,420 --> 00:19:56,900
trace mentioned that we're traditionally

00:19:50,300 --> 00:19:59,040
mobile space which is very black boxy

00:19:56,900 --> 00:20:02,790
when you find while moving into the

00:19:59,040 --> 00:20:06,120
enterprise space we need to be as close

00:20:02,790 --> 00:20:10,320
as possible to existing architectures so

00:20:06,120 --> 00:20:14,700
that for people to migrate to implement

00:20:10,320 --> 00:20:18,240
arm arm servers it needs to be as

00:20:14,700 --> 00:20:23,840
seamless a move as possible so the stack

00:20:18,240 --> 00:20:27,830
is as open as possible we have open

00:20:23,840 --> 00:20:33,660
specifications for based server systems

00:20:27,830 --> 00:20:38,400
so that dictates to be compliant you

00:20:33,660 --> 00:20:41,100
must ensure that you use efi etcetera

00:20:38,400 --> 00:20:43,200
and that other standard policy based

00:20:41,100 --> 00:20:46,830
things we've all gone one step further

00:20:43,200 --> 00:20:49,410
with server-based boot recommendations

00:20:46,830 --> 00:20:53,390
where we make some recommendations on

00:20:49,410 --> 00:20:56,790
what you should do for your boot process

00:20:53,390 --> 00:21:03,740
not everyone agrees with that which is

00:20:56,790 --> 00:21:08,910
fine but there's open firmware available

00:21:03,740 --> 00:21:11,600
there's you know we push everything that

00:21:08,910 --> 00:21:17,660
arm does which we push that upstream

00:21:11,600 --> 00:21:20,910
linaro who arm work with who's a

00:21:17,660 --> 00:21:23,940
non-profit engineering organization that

00:21:20,910 --> 00:21:26,070
is made up of lots of armed partners and

00:21:23,940 --> 00:21:28,440
lots of different segments they push as

00:21:26,070 --> 00:21:30,930
much as they can upstream I think

00:21:28,440 --> 00:21:33,900
they're in the top five linux kernel

00:21:30,930 --> 00:21:40,520
contributions now having for a year or

00:21:33,900 --> 00:21:45,420
so and they work in multiple areas both

00:21:40,520 --> 00:21:48,390
low-level stack and higher up in user

00:21:45,420 --> 00:21:51,920
space so we try and keep everything as

00:21:48,390 --> 00:21:57,270
open as possible because we know it will

00:21:51,920 --> 00:22:00,870
bite us squarely if we don't we may not

00:21:57,270 --> 00:22:08,790
be as quickly as one would like but we

00:22:00,870 --> 00:22:17,400
do our best could you say a few words

00:22:08,790 --> 00:22:19,790
about the West African country no

00:22:17,400 --> 00:22:19,790
comment

00:22:28,090 --> 00:22:40,179
are there any plans to provide an a

00:22:30,980 --> 00:22:40,179
arched ready to build on opensuse so

00:22:40,570 --> 00:22:51,049
possibly nothing has been decided

00:22:46,240 --> 00:22:53,870
obviously with leap moving to 64-bit so

00:22:51,049 --> 00:22:56,779
leap is only on a art 64 but there's

00:22:53,870 --> 00:22:59,750
nothing stopping anybody maintaining a

00:22:56,779 --> 00:23:02,740
32-bit version of leap if they wanted to

00:22:59,750 --> 00:23:02,740
but it's going to be a lot of hard work

00:23:04,240 --> 00:23:13,340
okay so work in progress thank you so

00:23:09,679 --> 00:23:16,130
for an AR 32 build it still yeah it's

00:23:13,340 --> 00:23:21,190
certainly possible there's no way arts

00:23:16,130 --> 00:23:29,779
32 hardware yet available in the market

00:23:21,190 --> 00:23:34,340
but that will be coming pretty soon so

00:23:29,779 --> 00:23:37,330
one question for everyone here is does

00:23:34,340 --> 00:23:44,860
anybody know of software that does not

00:23:37,330 --> 00:23:44,860
work on they are 64 that they would like

00:23:46,929 --> 00:23:57,289
quicken excellent so we're all good

00:23:51,590 --> 00:24:04,899
there works for me yeah any other

00:23:57,289 --> 00:24:04,899
questions comments flames love

00:24:10,980 --> 00:24:15,750
nope perfect thanks

00:24:21,350 --> 00:24:23,410

YouTube URL: https://www.youtube.com/watch?v=erBIW-gEErY


