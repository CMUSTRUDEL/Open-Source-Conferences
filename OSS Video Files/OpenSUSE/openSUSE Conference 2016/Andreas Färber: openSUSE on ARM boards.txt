Title: Andreas Färber: openSUSE on ARM boards
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/920-opensuse-on-arm-boards

A lot of work has been going on around the openSUSE ARM port. Which hardware is new? Where is openSUSE running? What has improved in the past year? Whom can you contact? Where are things headed? Expect answers to these and more questions around ARM hardware.

Andreas Färber
Captions: 
	00:00:08,280 --> 00:00:12,430
so we're going to start with the the

00:00:10,780 --> 00:00:15,790
next presentation my name is Angie

00:00:12,430 --> 00:00:20,170
estaba and following up to Andrews talk

00:00:15,790 --> 00:00:22,840
about the software user space side of

00:00:20,170 --> 00:00:26,349
64-bit ARM I'm going to talk a bit about

00:00:22,840 --> 00:00:29,380
the hardware side of arm boards in

00:00:26,349 --> 00:00:35,079
particular focusing on the kernel for

00:00:29,380 --> 00:00:36,790
both 32-bit and 64-bit I'm speaking a

00:00:35,079 --> 00:00:38,469
bit slowly so that those that are

00:00:36,790 --> 00:00:47,080
interested in attending the tour can

00:00:38,469 --> 00:00:57,090
still come in hello we are talking with

00:00:47,080 --> 00:01:01,720
we're starting with a dog okay so

00:00:57,090 --> 00:01:04,809
opensuse factory is being built in a

00:01:01,720 --> 00:01:07,170
sub-project opensuse factory arm we have

00:01:04,809 --> 00:01:14,320
three architectures available for this

00:01:07,170 --> 00:01:17,950
arm v6 l RM v 7l & age 64 we have open

00:01:14,320 --> 00:01:20,020
QA running for a are 64 unfortunately

00:01:17,950 --> 00:01:24,970
not for for the other ones at this point

00:01:20,020 --> 00:01:27,190
in time and we have that working for kvm

00:01:24,970 --> 00:01:30,250
only so that means that any bits that

00:01:27,190 --> 00:01:33,760
are specific to a particular board as

00:01:30,250 --> 00:01:37,540
far as booting goes might occasionally

00:01:33,760 --> 00:01:39,369
work or not work in particular the

00:01:37,540 --> 00:01:42,790
Raspberry Pi users have experienced that

00:01:39,369 --> 00:01:44,799
in the last year unfortunately there has

00:01:42,790 --> 00:01:48,150
been a lot of progress on various fronts

00:01:44,799 --> 00:01:51,040
for enabling arm hardware for opensuse

00:01:48,150 --> 00:01:53,729
there is a lot more boards that we can

00:01:51,040 --> 00:01:56,560
squeeze into this half hours so for one

00:01:53,729 --> 00:01:57,970
if I don't mention a boat here it

00:01:56,560 --> 00:01:59,850
probably means that it was working

00:01:57,970 --> 00:02:03,759
before and there is not much change to

00:01:59,850 --> 00:02:05,380
report on or if you think that i missed

00:02:03,759 --> 00:02:07,869
something that's new or worth mentioning

00:02:05,380 --> 00:02:11,980
then please raise it at the end of the

00:02:07,869 --> 00:02:13,870
talk i'm also going to mention some new

00:02:11,980 --> 00:02:19,120
ones even if andrea has already

00:02:13,870 --> 00:02:21,040
mentioned some 44 64 bit before so let's

00:02:19,120 --> 00:02:25,030
start with arm v6

00:02:21,040 --> 00:02:28,719
the arm 11 processor in this case with a

00:02:25,030 --> 00:02:30,760
broadcom BCM 2835 sock I'm not going to

00:02:28,719 --> 00:02:34,150
read all the details so the main changes

00:02:30,760 --> 00:02:37,120
here are that we have managed to get the

00:02:34,150 --> 00:02:43,000
Raspberry Pi Raspberry Pi dash firmware

00:02:37,120 --> 00:02:44,859
package accepted cleaned up into I'm

00:02:43,000 --> 00:02:58,269
seeing different slides here so let me

00:02:44,859 --> 00:02:59,530
check okay so that's what i was talking

00:02:58,269 --> 00:03:01,810
about for you to read sorry about that

00:02:59,530 --> 00:03:04,209
we have the Raspberry Pi firmware

00:03:01,810 --> 00:03:09,159
package accepted into tumbleweed we also

00:03:04,209 --> 00:03:12,419
have slightly just rearranged the config

00:03:09,159 --> 00:03:15,849
continue sub-project just this week

00:03:12,419 --> 00:03:18,400
there is a UEFI enablement for the huge

00:03:15,849 --> 00:03:21,540
up high package the colonel default is

00:03:18,400 --> 00:03:23,739
booting and very well with whatever is

00:03:21,540 --> 00:03:26,669
available driver-wise in the mainline

00:03:23,739 --> 00:03:30,549
kernel and there is a juice Raspberry Pi

00:03:26,669 --> 00:03:33,489
since this last year building in factory

00:03:30,549 --> 00:03:35,560
and no longer as a contra project there

00:03:33,489 --> 00:03:37,299
should also be Mesa acceleration through

00:03:35,560 --> 00:03:39,159
the acceleration for the VC for

00:03:37,299 --> 00:03:41,290
available I haven't been able to

00:03:39,159 --> 00:03:44,680
personally test it for this talk so if

00:03:41,290 --> 00:03:47,220
anyone has played with that please speak

00:03:44,680 --> 00:03:47,220
up later on

00:03:55,100 --> 00:04:03,740
okay so this is working now there's not

00:04:01,820 --> 00:04:06,530
much to say about the BeagleBone except

00:04:03,740 --> 00:04:08,450
that there has been a change in the

00:04:06,530 --> 00:04:11,260
mainland linux kernel switching it from

00:04:08,450 --> 00:04:13,910
TTYL Oh for the serial console to ttys

00:04:11,260 --> 00:04:15,470
if you're downloading a new image then

00:04:13,910 --> 00:04:18,080
you should notice about that if you've

00:04:15,470 --> 00:04:19,790
been updating the colonel on your new

00:04:18,080 --> 00:04:21,860
image or planning to then this is a

00:04:19,790 --> 00:04:28,130
change that you may need to make in the

00:04:21,860 --> 00:04:32,660
boot script moving on to the raspberry

00:04:28,130 --> 00:04:35,390
pi 2 so it is possible to use the

00:04:32,660 --> 00:04:38,060
colonel default for 6 from a tumbleweed

00:04:35,390 --> 00:04:41,150
to boot into the device unfortunately

00:04:38,060 --> 00:04:42,920
not colonel LP IE but there are some

00:04:41,150 --> 00:04:45,950
drivers still missing or not working

00:04:42,920 --> 00:04:54,130
there so for now you still need to use

00:04:45,950 --> 00:04:57,820
the account rib for the Jetson tk1 board

00:04:54,130 --> 00:05:00,890
we also have a UEFI enablement available

00:04:57,820 --> 00:05:04,210
in the u-boot package which needs to be

00:05:00,890 --> 00:05:06,800
flashed separately on the board the

00:05:04,210 --> 00:05:09,740
tumbleweed colonel finally is working

00:05:06,800 --> 00:05:14,230
also with networking now but what we're

00:05:09,740 --> 00:05:17,540
still lacking is a 32-bit Druce image

00:05:14,230 --> 00:05:20,360
with the lpa eternal that also includes

00:05:17,540 --> 00:05:22,310
the TTP when we have it right now so

00:05:20,360 --> 00:05:29,660
currently that is only available for a

00:05:22,310 --> 00:05:31,790
64-bit the Firefly r-ky 3288 board is

00:05:29,660 --> 00:05:34,670
running the opens with the tumbleweed

00:05:31,790 --> 00:05:38,030
colonel by now there is still some

00:05:34,670 --> 00:05:40,910
issues with the juubi bootloader so well

00:05:38,030 --> 00:05:43,220
since we did the UEFI enablement it was

00:05:40,910 --> 00:05:46,010
not working so well I've needed to

00:05:43,220 --> 00:05:50,350
manually disable that but apart from

00:05:46,010 --> 00:05:53,900
that things are working quite fine there

00:05:50,350 --> 00:05:58,730
the o droid c1 has been making some

00:05:53,900 --> 00:06:01,450
progress on getting main line as far as

00:05:58,730 --> 00:06:04,040
the colonel goes unfortunately so the

00:06:01,450 --> 00:06:07,190
MMC drivers should have gone into the

00:06:04,040 --> 00:06:09,500
Linux next colonel like my

00:06:07,190 --> 00:06:14,650
a couple of weeks ago but we don't have

00:06:09,500 --> 00:06:18,980
a juice image that includes those yet

00:06:14,650 --> 00:06:21,560
then there's been a new guitar board or

00:06:18,980 --> 00:06:24,530
module with a board unfortunately

00:06:21,560 --> 00:06:27,680
nothing is a main line from that so I've

00:06:24,530 --> 00:06:31,610
not managed to get that running opensuse

00:06:27,680 --> 00:06:35,300
easily yet in particular no no

00:06:31,610 --> 00:06:37,340
ready-made juice image again if anyone

00:06:35,300 --> 00:06:39,410
else has been able to get something

00:06:37,340 --> 00:06:45,230
working on there please bring it up

00:06:39,410 --> 00:06:47,120
later then Marvel has publicly announced

00:06:45,230 --> 00:06:49,100
that it will be working with the zoos

00:06:47,120 --> 00:06:51,320
and open zoos and enabling its board and

00:06:49,100 --> 00:06:54,280
the first board that we've been working

00:06:51,320 --> 00:06:57,470
on has been the clear fog from solid run

00:06:54,280 --> 00:07:00,800
we have a humid package for that

00:06:57,470 --> 00:07:04,850
available unfortunately Hugh boot is

00:07:00,800 --> 00:07:08,680
still lacking the the particular boot

00:07:04,850 --> 00:07:11,710
scripts to allow our colonel to boot

00:07:08,680 --> 00:07:13,790
immediately so there's some

00:07:11,710 --> 00:07:16,790
configuration variables that one needs

00:07:13,790 --> 00:07:21,340
to to set manually it is possible to

00:07:16,790 --> 00:07:24,470
boot into the grub to boot loader and

00:07:21,340 --> 00:07:27,650
unfortunately since we're unable to have

00:07:24,470 --> 00:07:31,010
a GPT partition table for for this

00:07:27,650 --> 00:07:32,900
particular trip set our grub package

00:07:31,010 --> 00:07:35,360
currently does not have the modules

00:07:32,900 --> 00:07:37,790
available for them actually accessing

00:07:35,360 --> 00:07:40,580
the fat partition soil via the MBR

00:07:37,790 --> 00:07:47,600
partitions but the colonel is fully

00:07:40,580 --> 00:07:49,880
Mayline including the dts we've also had

00:07:47,600 --> 00:07:51,740
the chance to play with an early version

00:07:49,880 --> 00:07:55,880
of the Torah's omnia which you can see

00:07:51,740 --> 00:08:00,110
on your right hand side over there it is

00:07:55,880 --> 00:08:02,919
running a very similar sock the u-boot

00:08:00,110 --> 00:08:06,440
is a not yet in mainline the colonel

00:08:02,919 --> 00:08:12,590
similarly should work except that the

00:08:06,440 --> 00:08:15,800
DTS file is not yet there then there's a

00:08:12,590 --> 00:08:19,370
new board that we've just received with

00:08:15,800 --> 00:08:21,699
a media check chipset it appears that

00:08:19,370 --> 00:08:25,699
the colonel support for that is there

00:08:21,699 --> 00:08:28,310
but the DTS file is still missing and it

00:08:25,699 --> 00:08:31,729
looked at is the u-boot was was not

00:08:28,310 --> 00:08:36,680
mainline but I couldn't fully test that

00:08:31,729 --> 00:08:40,849
out yet moving on to the 64-bit on the

00:08:36,680 --> 00:08:46,450
eight boards there's the raspberry pi 3

00:08:40,849 --> 00:08:49,490
which was already shown early on since

00:08:46,450 --> 00:08:52,550
this week two days ago we have a

00:08:49,490 --> 00:08:57,050
Raspberry Pi firmware package also with

00:08:52,550 --> 00:09:02,330
a prepared conflict or txt file that has

00:08:57,050 --> 00:09:05,600
the enablement for 64-bit kernels there

00:09:02,330 --> 00:09:09,890
is a 64-bit you would obviously package

00:09:05,600 --> 00:09:12,910
available I tried testing one of the

00:09:09,890 --> 00:09:17,450
Linux next kernels and that was not yet

00:09:12,910 --> 00:09:20,810
booting but we do have a juice Raspberry

00:09:17,450 --> 00:09:23,450
Pi 3a on 64 image available as a contrib

00:09:20,810 --> 00:09:27,430
and that one is using a 42 door to

00:09:23,450 --> 00:09:27,430
colonel and was working very well

00:09:27,520 --> 00:09:36,380
there's the high keyboard personally I

00:09:30,589 --> 00:09:38,360
can't say too much about that so the arm

00:09:36,380 --> 00:09:40,520
trusted Rome bear should be available in

00:09:38,360 --> 00:09:42,950
mainline you boot is available and

00:09:40,520 --> 00:09:47,029
mainline there's also its is trippin

00:09:42,950 --> 00:09:50,000
with a tiana core on there so UEFI the

00:09:47,029 --> 00:09:52,390
colonel is mainline we do have a juice

00:09:50,000 --> 00:09:55,790
image available but I didn't manage to

00:09:52,390 --> 00:09:57,830
test that in time for this talk so if

00:09:55,790 --> 00:10:00,610
anyone can give us a status update and

00:09:57,830 --> 00:10:04,400
after the talk that would be appreciated

00:10:00,610 --> 00:10:07,610
then there's the dragon board also shown

00:10:04,400 --> 00:10:10,310
by Andrew there is an issue with

00:10:07,610 --> 00:10:12,410
building and SD card because there is

00:10:10,310 --> 00:10:14,600
still using the well they're they're

00:10:12,410 --> 00:10:17,209
using a couple of Qualcomm specific

00:10:14,600 --> 00:10:19,339
bootloaders as well as the Android lk

00:10:17,209 --> 00:10:22,610
bootloader and it is necessary to

00:10:19,339 --> 00:10:25,100
actually patch the bootloader to make it

00:10:22,610 --> 00:10:26,130
boot from sdcard verify a.m. instead of

00:10:25,100 --> 00:10:32,640
the internal

00:10:26,130 --> 00:10:34,500
MMC and the year is if we take the

00:10:32,640 --> 00:10:37,400
existing one on the emmc then we can

00:10:34,500 --> 00:10:40,860
take a train loaded ubud and with that

00:10:37,400 --> 00:10:43,200
not get into you if I yet but it's

00:10:40,860 --> 00:10:45,630
possible to build to use at least

00:10:43,200 --> 00:10:48,000
mainline kernels unfortunately the

00:10:45,630 --> 00:10:52,560
colonel LP was a not yet booting when I

00:10:48,000 --> 00:10:54,780
last tested it there's also a music in

00:10:52,560 --> 00:10:57,540
96 port that Andrew did not show in his

00:10:54,780 --> 00:11:01,320
talk I believe that's within actions as

00:10:57,540 --> 00:11:06,330
ninety sock we did not yet get access to

00:11:01,320 --> 00:11:08,370
that again if anyone knows anything more

00:11:06,330 --> 00:11:10,050
about that apart from that what

00:11:08,370 --> 00:11:12,720
obviously the colonel is not yet

00:11:10,050 --> 00:11:18,840
mainline then please let us know after

00:11:12,720 --> 00:11:22,340
the talk there are both the flamenco

00:11:18,840 --> 00:11:26,310
trello 96 board and announced today

00:11:22,340 --> 00:11:29,130
software and overdrive 1000 board which

00:11:26,310 --> 00:11:31,260
are based on an AMD processor the

00:11:29,130 --> 00:11:33,840
colonel should be all main line and the

00:11:31,260 --> 00:11:36,600
existing efi juice image should just

00:11:33,840 --> 00:11:39,510
work and as we heard today the overdrive

00:11:36,600 --> 00:11:41,340
1000 even ships with Lee pre-installed

00:11:39,510 --> 00:11:47,700
which is a pretty cool thing thank you

00:11:41,340 --> 00:11:49,530
very much then there's also in the

00:11:47,700 --> 00:11:52,740
ninety six boats form factor the

00:11:49,530 --> 00:11:54,810
Andromeda box edge from Marvel it

00:11:52,740 --> 00:11:57,090
appeared as if there were no you boot

00:11:54,810 --> 00:11:59,660
sources available which I found quite

00:11:57,090 --> 00:12:02,370
disturbing since that is a GPL project

00:11:59,660 --> 00:12:04,650
the kernel for that did not seem to be

00:12:02,370 --> 00:12:07,530
main line yet and unfortunately the one

00:12:04,650 --> 00:12:09,600
board that we had available actually we

00:12:07,530 --> 00:12:11,910
managed to brick apparently while

00:12:09,600 --> 00:12:14,040
soldering Andre tech connector so if

00:12:11,910 --> 00:12:20,340
anyone has had more success than we do

00:12:14,040 --> 00:12:24,170
then please let us know we've played a

00:12:20,340 --> 00:12:28,260
little with the Jetson tx1 board within

00:12:24,170 --> 00:12:30,990
sixty four-bit nvidia stock we have a

00:12:28,260 --> 00:12:33,720
huge package available it's got some

00:12:30,990 --> 00:12:35,420
weird p and a four letter name a code

00:12:33,720 --> 00:12:38,460
the only one of that

00:12:35,420 --> 00:12:40,710
the colonel was still in the process of

00:12:38,460 --> 00:12:42,900
being main light and Linux next was not

00:12:40,710 --> 00:12:47,750
fully working the last time we tested it

00:12:42,900 --> 00:12:47,750
but that's already couple weeks back

00:12:48,080 --> 00:12:53,790
similarly there's the O droid see to

00:12:51,360 --> 00:12:58,020
board that has come out with a 64-bit M

00:12:53,790 --> 00:13:01,770
logic processor there has been since the

00:12:58,020 --> 00:13:07,200
last two but release mainlining of a new

00:13:01,770 --> 00:13:09,720
boot boot loader but the main lining of

00:13:07,200 --> 00:13:16,020
the colonel is still in quite early

00:13:09,720 --> 00:13:20,190
stages at for stem I showed the geek box

00:13:16,020 --> 00:13:22,290
board with a rock trip 64-bit sock by

00:13:20,190 --> 00:13:26,010
now the arm trusted from before that one

00:13:22,290 --> 00:13:27,960
is a mainline you boot unfortunately is

00:13:26,010 --> 00:13:31,260
not hit mainland which makes it a little

00:13:27,960 --> 00:13:34,560
hard to to boot opensuse kernels but it

00:13:31,260 --> 00:13:37,500
is possible to boot at least and the

00:13:34,560 --> 00:13:40,170
mainline Linux next kernel and it should

00:13:37,500 --> 00:13:43,170
probably be possible to build the

00:13:40,170 --> 00:13:48,410
colonel head antutu to make the colonel

00:13:43,170 --> 00:13:53,520
head work on that one for the pine 64

00:13:48,410 --> 00:13:55,920
mainlining is still in progress there is

00:13:53,520 --> 00:13:59,010
a juice image available as a contra but

00:13:55,920 --> 00:14:01,470
unfortunately at this time it got stuck

00:13:59,010 --> 00:14:03,540
during boot it supposedly worked at one

00:14:01,470 --> 00:14:05,850
point and there is one with a downstream

00:14:03,540 --> 00:14:07,710
kernel and that should work a little

00:14:05,850 --> 00:14:11,850
better but not yet with the mainline

00:14:07,710 --> 00:14:14,430
kernel and then one board that we just

00:14:11,850 --> 00:14:17,370
received with a samsung 64-bit processor

00:14:14,430 --> 00:14:20,300
it appears that the software for that

00:14:17,370 --> 00:14:22,830
one is a not yet mainline either and

00:14:20,300 --> 00:14:24,540
we've not been really able to prepare

00:14:22,830 --> 00:14:28,740
anything for that yet since it's just

00:14:24,540 --> 00:14:34,730
out and just announced is a new board

00:14:28,740 --> 00:14:37,380
from from RL it appears that the colonel

00:14:34,730 --> 00:14:40,350
definitely was already in in progress

00:14:37,380 --> 00:14:42,450
from mainlining you boot not yet to my

00:14:40,350 --> 00:14:45,680
knowledge and obviously the board is not

00:14:42,450 --> 00:14:45,680
yet physically available

00:14:49,230 --> 00:14:56,370
so for for you guys as a tumbleweed

00:14:54,120 --> 00:14:58,350
users whenever I was mentioning on my

00:14:56,370 --> 00:15:00,210
slides that something is not mainline

00:14:58,350 --> 00:15:02,760
that means that you will not find

00:15:00,210 --> 00:15:08,100
support for that board in the official

00:15:02,760 --> 00:15:11,250
tumbleweed distribution and images in

00:15:08,100 --> 00:15:13,950
particular I always remind people that

00:15:11,250 --> 00:15:16,500
tumbleweed is not just a set of user

00:15:13,950 --> 00:15:19,560
space packages it also includes the

00:15:16,500 --> 00:15:23,550
kernel and one difficulty that arises in

00:15:19,560 --> 00:15:25,800
particular when using some old Android

00:15:23,550 --> 00:15:28,410
kernels on by vendors on on certain

00:15:25,800 --> 00:15:31,680
boards then packages like tumbleweed at

00:15:28,410 --> 00:15:34,620
sorry that packages like systemd might

00:15:31,680 --> 00:15:37,950
actually run into trouble with iocked

00:15:34,620 --> 00:15:42,240
holds or as is called not implemented in

00:15:37,950 --> 00:15:46,140
the particular colonel if you have such

00:15:42,240 --> 00:15:49,520
a case then you can use the roof root of

00:15:46,140 --> 00:15:52,910
s which is just the user space parts and

00:15:49,520 --> 00:15:55,710
in some cases people have created

00:15:52,910 --> 00:16:00,090
subprojects under adabelle arm factory

00:15:55,710 --> 00:16:02,730
contrib where a separate colonel their

00:16:00,090 --> 00:16:06,510
source package with a particular kernels

00:16:02,730 --> 00:16:08,520
flavor is a package that can be combined

00:16:06,510 --> 00:16:11,360
with the regular tumbleweed user space

00:16:08,520 --> 00:16:14,250
or possibly with additional firmware or

00:16:11,360 --> 00:16:17,670
other versions of user space packages to

00:16:14,250 --> 00:16:20,130
make something boot at all obviously

00:16:17,670 --> 00:16:22,350
that means that any Colonels in those

00:16:20,130 --> 00:16:25,020
concepts sub packages don't get a

00:16:22,350 --> 00:16:28,530
terrible lot of love and so you will not

00:16:25,020 --> 00:16:30,450
get security updates there may be from

00:16:28,530 --> 00:16:33,840
time to time they might get updated but

00:16:30,450 --> 00:16:37,050
only as far as the contributors take

00:16:33,840 --> 00:16:40,770
care of that and the suzerainty opensuse

00:16:37,050 --> 00:16:42,600
colonel team does not maintain those in

00:16:40,770 --> 00:16:44,520
theory depending on which kernel it is

00:16:42,600 --> 00:16:45,840
so if it's like a linux next Conal that

00:16:44,520 --> 00:16:48,000
we've packaged there with additional

00:16:45,840 --> 00:16:50,700
patches then that would be a system that

00:16:48,000 --> 00:16:55,530
you can easily just an update to the

00:16:50,700 --> 00:16:58,080
latest kernel whereas if it's say 30

00:16:55,530 --> 00:16:58,880
Colonel 343 eight through ten whatever

00:16:58,080 --> 00:17:01,970
em comes

00:16:58,880 --> 00:17:04,010
certain Android flavors then chances are

00:17:01,970 --> 00:17:07,040
that there will be disruptive changes if

00:17:04,010 --> 00:17:12,130
at some point mainline support gets

00:17:07,040 --> 00:17:14,740
added for a particular board so yeah

00:17:12,130 --> 00:17:17,240
some packages simply there get

00:17:14,740 --> 00:17:19,339
contributed and start a bit rod some

00:17:17,240 --> 00:17:20,900
some help with that would be appreciated

00:17:19,339 --> 00:17:25,010
and in some cases like the Raspberry Pi

00:17:20,900 --> 00:17:27,680
I've taken pity and seemed to getting

00:17:25,010 --> 00:17:29,960
them into the hardware repository or

00:17:27,680 --> 00:17:34,070
what are the other repositories those

00:17:29,960 --> 00:17:39,530
packages might live as in like live in

00:17:34,070 --> 00:17:42,620
as a develop project if something is not

00:17:39,530 --> 00:17:44,090
quite working in the tumbleweed kernel

00:17:42,620 --> 00:17:47,180
and the official one then there's always

00:17:44,090 --> 00:17:49,460
the colonel head to check at least once

00:17:47,180 --> 00:17:52,520
we've updated the colonel em conflict so

00:17:49,460 --> 00:17:56,030
that it builds again should be 464 but

00:17:52,520 --> 00:17:58,900
not yet for a 32-bit and in theory there

00:17:56,030 --> 00:18:02,150
would also be a colonel linux next

00:17:58,900 --> 00:18:04,250
available and for builds unfortunately

00:18:02,150 --> 00:18:07,130
what we do not have for the lungs next

00:18:04,250 --> 00:18:13,640
colonel at this point in time is a dtp

00:18:07,130 --> 00:18:15,980
packages so here's a quick graphic about

00:18:13,640 --> 00:18:19,880
how all those colonel repository is

00:18:15,980 --> 00:18:25,760
relate so see ya do we have a mouse

00:18:19,880 --> 00:18:28,580
pointer over there here it is okay so

00:18:25,760 --> 00:18:33,160
this is the kernel.org clinics git

00:18:28,580 --> 00:18:35,690
repository any new main line development

00:18:33,160 --> 00:18:38,090
get goes in to their through through

00:18:35,690 --> 00:18:39,680
pull requests obviously into linux next

00:18:38,090 --> 00:18:42,680
first as a staging or some particular

00:18:39,680 --> 00:18:45,140
maintain errs a repository first and at

00:18:42,680 --> 00:18:47,990
some point once a kernel is released

00:18:45,140 --> 00:18:51,290
then maintenance releases will end up in

00:18:47,990 --> 00:18:53,330
the linux stable git repository and at

00:18:51,290 --> 00:18:56,690
some point together with the conflicts

00:18:53,330 --> 00:19:00,980
that sit in the epizootic specific

00:18:56,690 --> 00:19:04,310
kernel source git repository we will end

00:19:00,980 --> 00:19:08,870
up with a get tree combined also with

00:19:04,310 --> 00:19:11,720
some patches of ours and that then ends

00:19:08,870 --> 00:19:14,390
up in the kernel head repository it

00:19:11,720 --> 00:19:17,960
at some point submitted to Colonel

00:19:14,390 --> 00:19:20,090
Colonel stable and then to open to the

00:19:17,960 --> 00:19:22,940
factory and from there on we inherit it

00:19:20,090 --> 00:19:26,780
into opens with a factory arm now what

00:19:22,940 --> 00:19:31,250
does this mean for the vendors it means

00:19:26,780 --> 00:19:34,640
that if you are manufacturing an arm

00:19:31,250 --> 00:19:38,270
chip on our board based on such a chip

00:19:34,640 --> 00:19:40,400
then please don't just put your your

00:19:38,270 --> 00:19:42,559
resources somewhere on github or

00:19:40,400 --> 00:19:43,909
elsewhere in the internet and that's not

00:19:42,559 --> 00:19:46,850
the way how we will get them into

00:19:43,909 --> 00:19:48,650
tumbleweed current patches need to be

00:19:46,850 --> 00:19:50,650
submitted to the main on linux kernel

00:19:48,650 --> 00:19:54,830
kernel.org the particular mailing lists

00:19:50,650 --> 00:19:57,260
and also please understand that we do

00:19:54,830 --> 00:20:00,500
not use the DEFCON fix so it's not

00:19:57,260 --> 00:20:03,110
sufficient just to enable things in the

00:20:00,500 --> 00:20:05,450
mainline kernels I'm configs but we are

00:20:03,110 --> 00:20:08,390
maintaining our own kernel convicts and

00:20:05,450 --> 00:20:10,640
need to have not just the the particular

00:20:08,390 --> 00:20:13,610
stock but also all the Emperor of El

00:20:10,640 --> 00:20:17,840
drivers enabled in our own repository

00:20:13,610 --> 00:20:20,510
and depending on whether you have your

00:20:17,840 --> 00:20:23,299
bootloader in flash storage or I'm

00:20:20,510 --> 00:20:25,250
honest on a medium such as an SD card

00:20:23,299 --> 00:20:27,620
then we also need to deliver that

00:20:25,250 --> 00:20:29,450
particular bootloader to our users so

00:20:27,620 --> 00:20:31,580
that means that we need to have that

00:20:29,450 --> 00:20:33,740
bootloader sources available in

00:20:31,580 --> 00:20:36,620
tumbleweed as well and the only way to

00:20:33,740 --> 00:20:38,169
get that done is to submit the enabling

00:20:36,620 --> 00:20:41,299
patches for your particular hardware

00:20:38,169 --> 00:20:43,100
into and the respective upstream

00:20:41,299 --> 00:20:46,820
projects such as the mainline you boot

00:20:43,100 --> 00:20:52,070
and from there on we can then inherit it

00:20:46,820 --> 00:20:56,780
with the next release version I did

00:20:52,070 --> 00:21:01,190
mention UEFI a couple of times there is

00:20:56,780 --> 00:21:02,809
a talk in seven minutes about that

00:21:01,190 --> 00:21:07,520
particular topic that i'm referring to

00:21:02,809 --> 00:21:13,429
buy eggs and a graph and with that i am

00:21:07,520 --> 00:21:15,799
moving on to the questions i know that i

00:21:13,429 --> 00:21:20,330
spoke very quickly to to fit all this

00:21:15,799 --> 00:21:24,250
into the talk do you have any questions

00:21:20,330 --> 00:21:29,870
about what I've said or any additions

00:21:24,250 --> 00:21:33,550
you know do we have anyone that can

00:21:29,870 --> 00:21:33,550
provide a microphone to Andrew

00:21:47,650 --> 00:21:56,710
is there anywhere on the wiki for a sort

00:21:53,410 --> 00:22:00,780
of low-hanging fruit to get better

00:21:56,710 --> 00:22:04,990
enablement for some of these platforms

00:22:00,780 --> 00:22:07,690
where we know Kate there are certain

00:22:04,990 --> 00:22:11,110
corner cases that need fixing on some of

00:22:07,690 --> 00:22:12,700
these platforms but because of the vast

00:22:11,110 --> 00:22:14,860
number of platforms that you're trying

00:22:12,700 --> 00:22:17,500
to enable you're just doing the the

00:22:14,860 --> 00:22:21,430
basic nament if you will and if somebody

00:22:17,500 --> 00:22:24,820
could help to tidy the mess up a little

00:22:21,430 --> 00:22:31,780
bit more that would ensure that users

00:22:24,820 --> 00:22:34,300
can have a much smoother experience so

00:22:31,780 --> 00:22:37,510
I've moved on to to the next slide which

00:22:34,300 --> 00:22:39,160
actually has a address into the wiki and

00:22:37,510 --> 00:22:42,610
from there on or through the category

00:22:39,160 --> 00:22:44,410
arm devices you can find all our boards

00:22:42,610 --> 00:22:46,990
that have actually been documented in

00:22:44,410 --> 00:22:49,780
our wiki I usually try to at least start

00:22:46,990 --> 00:22:52,300
a page with the technical data and the

00:22:49,780 --> 00:22:54,790
initial colonel status but it's true

00:22:52,300 --> 00:22:57,150
that from time to time we forget to

00:22:54,790 --> 00:23:04,630
update it with the latest information so

00:22:57,150 --> 00:23:06,850
I think we do not have a particular list

00:23:04,630 --> 00:23:11,020
of like low-hanging fruits of you know

00:23:06,850 --> 00:23:16,240
like what change or package or something

00:23:11,020 --> 00:23:23,140
could be done by say eh eh eh Newby 22

00:23:16,240 --> 00:23:25,300
opensuse but me and a few others have

00:23:23,140 --> 00:23:28,780
been involved in working with the

00:23:25,300 --> 00:23:32,080
various upstream projects for instance I

00:23:28,780 --> 00:23:35,080
have done the initial upstream colonel

00:23:32,080 --> 00:23:38,560
enablement for the amlogic GXP be that's

00:23:35,080 --> 00:23:41,500
the s 905 and that was just you know

00:23:38,560 --> 00:23:44,730
very small changes to actually get get

00:23:41,500 --> 00:23:47,080
that particular work done based on a

00:23:44,730 --> 00:23:51,780
Avengers key tree so obviously if

00:23:47,080 --> 00:23:51,780
someone has a board and is

00:23:52,030 --> 00:23:57,440
motivated enough to do some word

00:23:54,320 --> 00:23:59,929
themselves then obviously the old kernel

00:23:57,440 --> 00:24:01,700
code that most old vendors provide can

00:23:59,929 --> 00:24:05,690
be used as a base to get something

00:24:01,700 --> 00:24:07,850
working in main line and obviously there

00:24:05,690 --> 00:24:09,710
there can be some some help given in

00:24:07,850 --> 00:24:13,250
doing so but it requires a bit of

00:24:09,710 --> 00:24:16,880
courage and motivation i believe for I'm

00:24:13,250 --> 00:24:18,350
64 it's slightly easier than four 4 32

00:24:16,880 --> 00:24:21,020
bit in particular if there was like a

00:24:18,350 --> 00:24:22,730
related 32 bit and platform already

00:24:21,020 --> 00:24:24,110
available with something like a serial

00:24:22,730 --> 00:24:28,400
driver that then only needs you know

00:24:24,110 --> 00:24:30,679
like a bit of K config changes or you

00:24:28,400 --> 00:24:32,630
know some special handling for in my

00:24:30,679 --> 00:24:34,970
case it was you know that some different

00:24:32,630 --> 00:24:39,740
clock frequency needed to be taken care

00:24:34,970 --> 00:24:41,929
of it's definitely something that I

00:24:39,740 --> 00:24:46,460
always encourage people to to help out

00:24:41,929 --> 00:24:49,789
with yes so on the one hand it's a

00:24:46,460 --> 00:24:52,070
warning to people on this whatever I

00:24:49,789 --> 00:24:54,020
shown earlier on this talk that certain

00:24:52,070 --> 00:24:56,059
things will not yet work out of the box

00:24:54,020 --> 00:24:58,510
even if they're you know available for

00:24:56,059 --> 00:25:01,070
sale and you know we reasonably priced

00:24:58,510 --> 00:25:03,080
but on the other hand you could also see

00:25:01,070 --> 00:25:04,640
that as like a list of opportunities

00:25:03,080 --> 00:25:08,330
where you can actually actively

00:25:04,640 --> 00:25:15,500
contribute did that answer the question

00:25:08,330 --> 00:25:18,460
or did you yeah okay was some question

00:25:15,500 --> 00:25:18,460
in that area there

00:25:21,900 --> 00:25:30,610
pardon my ignorance talking about the

00:25:24,730 --> 00:25:32,410
lib raspy do we have Jimmy yeah about

00:25:30,610 --> 00:25:35,530
talking about what the right raspberry

00:25:32,410 --> 00:25:38,380
opium do we have all the user land

00:25:35,530 --> 00:25:39,730
packages like the Python libraries for

00:25:38,380 --> 00:25:42,430
the sense head that's the one I'm

00:25:39,730 --> 00:25:45,280
playing wit at the moment somewhere in

00:25:42,430 --> 00:25:46,840
in the opensuse repose or are they the

00:25:45,280 --> 00:25:48,760
parts where we would still have to do

00:25:46,840 --> 00:25:51,130
more work so if let's say a student

00:25:48,760 --> 00:25:54,430
wants to go with our images instead of

00:25:51,130 --> 00:25:57,130
the raspbian ones they would still like

00:25:54,430 --> 00:26:00,190
need extra extra read holes or getting

00:25:57,130 --> 00:26:05,010
things packaged up first that's a good

00:26:00,190 --> 00:26:09,070
question so obviously there are certain

00:26:05,010 --> 00:26:11,080
base packages like obviously the colonel

00:26:09,070 --> 00:26:14,740
and Q boot that get taken care of first

00:26:11,080 --> 00:26:16,510
in order to get into a HL at all and if

00:26:14,740 --> 00:26:21,070
we're lucky also into you know network

00:26:16,510 --> 00:26:23,980
and use bien and whatnot but there was a

00:26:21,070 --> 00:26:31,780
post on the opensuse dash or mailing

00:26:23,980 --> 00:26:38,500
list as seen here about some Python gpio

00:26:31,780 --> 00:26:40,630
library on the one hand missing and when

00:26:38,500 --> 00:26:43,750
it was getting packaged that it was not

00:26:40,630 --> 00:26:48,100
fully working so oh that is actually a

00:26:43,750 --> 00:26:52,360
very good point so in particular when we

00:26:48,100 --> 00:26:54,970
are dealing with boards that did their

00:26:52,360 --> 00:26:59,220
own kernel like the Raspberry Pi on you

00:26:54,970 --> 00:27:02,170
know some some older fork then there is

00:26:59,220 --> 00:27:04,570
some divergence and how the drivers

00:27:02,170 --> 00:27:06,400
actually look like when they get into

00:27:04,570 --> 00:27:09,280
main line and apparently that was the

00:27:06,400 --> 00:27:11,530
case for the GPIO driver so apparently

00:27:09,280 --> 00:27:13,870
there is a different numbering and also

00:27:11,530 --> 00:27:15,610
you know maybe locations are naming

00:27:13,870 --> 00:27:18,850
might might differ between the two so on

00:27:15,610 --> 00:27:23,140
the one hand and it would be about those

00:27:18,850 --> 00:27:27,490
people that need a particular library to

00:27:23,140 --> 00:27:30,040
just read up on the Python and packaging

00:27:27,490 --> 00:27:32,350
guidelines if you need to and just

00:27:30,040 --> 00:27:36,429
submit such packages to

00:27:32,350 --> 00:27:40,899
the rebuild service so there is like our

00:27:36,429 --> 00:27:43,880
well rather small core opensuse arm team

00:27:40,899 --> 00:27:47,059
does not really go about and search the

00:27:43,880 --> 00:27:50,840
web for available software packages that

00:27:47,059 --> 00:27:52,669
might be useful to some user out there

00:27:50,840 --> 00:27:55,039
them in particular if we don't really

00:27:52,669 --> 00:27:57,470
know how to to package them so this is

00:27:55,039 --> 00:27:59,390
very much user driven both the the

00:27:57,470 --> 00:28:03,100
hardware enablement for certain boards

00:27:59,390 --> 00:28:03,100
as well as the user space pods

00:28:19,760 --> 00:28:30,650
very quickly is that is a channel on

00:28:23,000 --> 00:28:35,630
freenode I believe so yes it should also

00:28:30,650 --> 00:28:41,420
be linked or at least written in the on

00:28:35,630 --> 00:28:44,420
the other wiki yes if there are no

00:28:41,420 --> 00:28:47,270
further questions then I conclude this

00:28:44,420 --> 00:28:50,290
talk and invite Alex on for the next

00:28:47,270 --> 00:28:50,290

YouTube URL: https://www.youtube.com/watch?v=yv_iyYtckmQ


