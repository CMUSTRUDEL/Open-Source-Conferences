Title: Kolab Summit 2.0 - The Kolab Experience â€“ The Exciting Future of Next Generation cli
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/1072-kolab-summit-2-0-the-kolab-experience-the-exciting-future-of-next-generation-clients

Jeroen van Meeuwen
SYSTEMS ARCHITECT

Douglas DeMaio
Captions: 
	00:00:21,550 --> 00:00:27,609
so hi I'm Christian I'm responsible for

00:00:25,269 --> 00:00:30,849
the desktop lighting collab systems

00:00:27,609 --> 00:00:34,090
which so far used to be contact or

00:00:30,849 --> 00:00:35,980
Silius contact actually today I want to

00:00:34,090 --> 00:00:38,829
talk about the next generation client

00:00:35,980 --> 00:00:42,129
that we're currently working on and show

00:00:38,829 --> 00:00:49,320
tell you a bit how why are why we're

00:00:42,129 --> 00:00:51,570
doing this and what this is all about so

00:00:49,320 --> 00:00:54,460
cube is are the next generation

00:00:51,570 --> 00:00:56,410
collaboration and communication implying

00:00:54,460 --> 00:00:59,019
that we're currently building it's aimed

00:00:56,410 --> 00:01:04,839
at offline capable devices like laptops

00:00:59,019 --> 00:01:07,479
and mobile devices we're looking at

00:01:04,839 --> 00:01:09,630
making it very maintainable and that we

00:01:07,479 --> 00:01:12,100
can move fast forward without

00:01:09,630 --> 00:01:16,899
sacrificing quality on the way so that

00:01:12,100 --> 00:01:18,399
we can do quick iterations we look that

00:01:16,899 --> 00:01:20,979
it's very deployable in various

00:01:18,399 --> 00:01:23,110
scenarios because we have we have

00:01:20,979 --> 00:01:25,690
enterprise customers we have private

00:01:23,110 --> 00:01:27,220
customers so we need to be able to

00:01:25,690 --> 00:01:30,759
integrate in various deployment

00:01:27,220 --> 00:01:35,649
scenarios and this also includes mobile

00:01:30,759 --> 00:01:38,920
devices it's supposed to be a high

00:01:35,649 --> 00:01:41,770
performance and low resource using

00:01:38,920 --> 00:01:44,259
components so it really can support you

00:01:41,770 --> 00:01:45,970
from the background and you don't spin

00:01:44,259 --> 00:01:51,369
up your CPU basically because you want

00:01:45,970 --> 00:01:54,910
to read a male so we're from from the

00:01:51,369 --> 00:01:58,209
design we are trying hard to to ensure

00:01:54,910 --> 00:02:00,280
that it is the way that it should be

00:01:58,209 --> 00:02:03,039
that that you just really can quickly

00:02:00,280 --> 00:02:05,530
start it and stop it again and you don't

00:02:03,039 --> 00:02:09,489
have to worry about that it uses too

00:02:05,530 --> 00:02:12,640
much RAM or anything like that last but

00:02:09,489 --> 00:02:15,970
not least of course we're we're working

00:02:12,640 --> 00:02:22,750
on a pretty useful user interface that

00:02:15,970 --> 00:02:25,599
actually also remains useful so you may

00:02:22,750 --> 00:02:28,569
wonder why are we doing this given that

00:02:25,599 --> 00:02:30,920
we have contact which is a large and

00:02:28,569 --> 00:02:36,410
very powerful application and it's

00:02:30,920 --> 00:02:39,260
a lot of effort to sort of redo that the

00:02:36,410 --> 00:02:41,510
first reason for me as somebody who has

00:02:39,260 --> 00:02:44,360
worked for the last six years on

00:02:41,510 --> 00:02:51,020
improving contact as a full-time job

00:02:44,360 --> 00:02:53,810
largely is that it replaces contact we

00:02:51,020 --> 00:02:58,610
had a we have a lot of complexity issues

00:02:53,810 --> 00:03:00,230
which just really showed over the last

00:02:58,610 --> 00:03:03,530
couple of years as we try to add new

00:03:00,230 --> 00:03:06,739
features that process was just so slow

00:03:03,530 --> 00:03:10,250
and cumbersome and it was so hard to get

00:03:06,739 --> 00:03:14,090
the quality to a a state that where we

00:03:10,250 --> 00:03:16,360
needed to be that I just realized that

00:03:14,090 --> 00:03:19,010
some bites something must be wrong

00:03:16,360 --> 00:03:21,950
similarly we have large performance

00:03:19,010 --> 00:03:24,380
issues which then again trigger a lot of

00:03:21,950 --> 00:03:27,769
workarounds in trying to do caching and

00:03:24,380 --> 00:03:32,360
other optimizations which again

00:03:27,769 --> 00:03:36,320
increases the complexity so contact in

00:03:32,360 --> 00:03:39,070
many ways often sort of resembles a Rube

00:03:36,320 --> 00:03:42,079
Goldberg machine you have many different

00:03:39,070 --> 00:03:45,859
components that interact with each other

00:03:42,079 --> 00:03:49,489
a synchronously so that makes it very

00:03:45,859 --> 00:03:52,130
hard to reason about the state of the

00:03:49,489 --> 00:03:54,250
application and try to test it because

00:03:52,130 --> 00:03:59,450
you have so many different and

00:03:54,250 --> 00:04:03,500
combinations of those components so that

00:03:59,450 --> 00:04:08,510
is to a large degree why it's so complex

00:04:03,500 --> 00:04:10,940
and white so hard to test so with cube

00:04:08,510 --> 00:04:14,510
we initially just started thinking about

00:04:10,940 --> 00:04:19,039
why how can we changed the architecture

00:04:14,510 --> 00:04:25,090
of contact in a way that we can combat

00:04:19,039 --> 00:04:28,039
those problems what we ended up with was

00:04:25,090 --> 00:04:30,590
so far away from from contact that it

00:04:28,039 --> 00:04:34,190
just showed it would it makes more sense

00:04:30,590 --> 00:04:36,139
to sort of start over on a clean slate

00:04:34,190 --> 00:04:38,389
at least design-wise that doesn't mean

00:04:36,139 --> 00:04:40,310
we're rewriting everything but design

00:04:38,389 --> 00:04:43,610
wise we started on a clean slate try to

00:04:40,310 --> 00:04:44,060
get that right and then see how we can

00:04:43,610 --> 00:04:49,460
get

00:04:44,060 --> 00:04:52,250
contact to this new architecture so in

00:04:49,460 --> 00:04:55,910
the new architecture if you're familiar

00:04:52,250 --> 00:04:57,740
with contact at all we used to have the

00:04:55,910 --> 00:05:02,510
application then we have a central

00:04:57,740 --> 00:05:04,430
server that talks to my sequel database

00:05:02,510 --> 00:05:06,889
and then we have different back-end

00:05:04,430 --> 00:05:08,900
processes for instance 49 map resource

00:05:06,889 --> 00:05:15,590
for a male deer resource to get access

00:05:08,900 --> 00:05:19,870
to your data in cube we removed that

00:05:15,590 --> 00:05:24,830
central server you still have different

00:05:19,870 --> 00:05:26,419
back-end plugins this is first of useful

00:05:24,830 --> 00:05:28,010
because these are background processes

00:05:26,419 --> 00:05:31,190
that synchronize a lot of data do a lot

00:05:28,010 --> 00:05:35,090
of work so you don't necessarily want it

00:05:31,190 --> 00:05:37,639
directly in your main application it

00:05:35,090 --> 00:05:41,440
also isolates of course against crashes

00:05:37,639 --> 00:05:43,820
so because this is a plug-in system so

00:05:41,440 --> 00:05:47,600
you can have people write different

00:05:43,820 --> 00:05:49,940
plugins for different backends if one is

00:05:47,600 --> 00:05:52,910
of not the highest quality and it

00:05:49,940 --> 00:05:57,680
crashes it doesn't take down your client

00:05:52,910 --> 00:06:01,070
application this week all the data

00:05:57,680 --> 00:06:06,110
access layer sync so that's sort of yeah

00:06:01,070 --> 00:06:08,930
kannadi replacement so you have now this

00:06:06,110 --> 00:06:12,889
library that knows how to talk to the

00:06:08,930 --> 00:06:15,770
different backends and then the client

00:06:12,889 --> 00:06:18,370
application which is cube so far but

00:06:15,770 --> 00:06:22,940
could be more applications of course

00:06:18,370 --> 00:06:26,660
then directly accesses the database in

00:06:22,940 --> 00:06:29,030
process and just talks to the resources

00:06:26,660 --> 00:06:34,430
because it's a single writer multi

00:06:29,030 --> 00:06:40,490
reader I'm system if we look a bit

00:06:34,430 --> 00:06:45,070
closer at the resource that is built

00:06:40,490 --> 00:06:45,070
somewhat like see

00:06:47,109 --> 00:06:53,479
so you basically have cube here and then

00:06:50,749 --> 00:06:56,149
you have a communication to the backend

00:06:53,479 --> 00:06:59,479
process over a socket that just writes

00:06:56,149 --> 00:07:03,499
commands to the resource which the

00:06:59,479 --> 00:07:06,139
resource initially simply queues I'm a

00:07:03,499 --> 00:07:10,459
very central piece of the resources than

00:07:06,139 --> 00:07:13,479
the pipeline which just accuse the queue

00:07:10,459 --> 00:07:15,259
continuously and processes these items

00:07:13,479 --> 00:07:17,479
eventually they'll end up in the

00:07:15,259 --> 00:07:20,509
database so in here we can do stuff like

00:07:17,479 --> 00:07:23,449
indexing and filtering what not just any

00:07:20,509 --> 00:07:25,369
processing that needs to be applied to

00:07:23,449 --> 00:07:31,279
every modification that we have to store

00:07:25,369 --> 00:07:33,409
and then the resource simply emits a

00:07:31,279 --> 00:07:35,749
notification that the rotation of the

00:07:33,409 --> 00:07:40,239
store has now changed and all clients

00:07:35,749 --> 00:07:47,089
can update to that this gives us a very

00:07:40,239 --> 00:07:50,089
nice loop of how how the data flows so

00:07:47,089 --> 00:07:53,209
clients always just write that way and

00:07:50,089 --> 00:07:55,249
on the other way around they simply

00:07:53,209 --> 00:07:58,699
render the state of what you have in the

00:07:55,249 --> 00:07:59,929
database so it becomes very testable

00:07:58,699 --> 00:08:02,329
because you don't really have any

00:07:59,929 --> 00:08:06,619
intermediate state states that you try

00:08:02,329 --> 00:08:10,189
to synchronize you you essentially just

00:08:06,619 --> 00:08:12,079
render what you have in the database it

00:08:10,189 --> 00:08:14,059
looks very similar on the other side

00:08:12,079 --> 00:08:16,939
where we have the synchronization to the

00:08:14,059 --> 00:08:20,569
soup source so this could be your imap

00:08:16,939 --> 00:08:22,189
server you have a synchronizer process

00:08:20,569 --> 00:08:24,259
that simply tries to figure out what has

00:08:22,189 --> 00:08:27,409
changed on the server maybe you have

00:08:24,259 --> 00:08:29,989
some protocol support like Yuri sync or

00:08:27,409 --> 00:08:32,509
so which direct directly conceded if

00:08:29,989 --> 00:08:33,769
maybe your back-end sucks and you have

00:08:32,509 --> 00:08:36,949
to do a full day if it doesn't really

00:08:33,769 --> 00:08:38,779
matter the synchronizer simply tries to

00:08:36,949 --> 00:08:41,389
figure out as fast as possible what has

00:08:38,779 --> 00:08:44,990
changed traits the modifications accuse

00:08:41,389 --> 00:08:48,889
them and that's then processed by the

00:08:44,990 --> 00:08:50,360
very simple pipeline I'm having 2 q's

00:08:48,889 --> 00:08:52,629
here just make sure that we can

00:08:50,360 --> 00:08:55,579
prioritize for instance local

00:08:52,629 --> 00:08:57,529
modifications over a background sync

00:08:55,579 --> 00:09:01,790
process where you don't really care

00:08:57,529 --> 00:09:04,129
when it finishes and then the right back

00:09:01,790 --> 00:09:06,079
uses the exact same mechanism it gets

00:09:04,129 --> 00:09:09,019
notified that something has changed and

00:09:06,079 --> 00:09:13,550
then it just replays revisions to the

00:09:09,019 --> 00:09:18,649
source yeah so that way we have these

00:09:13,550 --> 00:09:22,759
loops in in both directions and as you

00:09:18,649 --> 00:09:26,990
can see this of course builds right into

00:09:22,759 --> 00:09:29,420
into the design that that we store that

00:09:26,990 --> 00:09:31,399
we have an offline stored that you can

00:09:29,420 --> 00:09:33,559
work against even if you have no

00:09:31,399 --> 00:09:45,819
internet connection and you can replay

00:09:33,559 --> 00:09:47,899
changes at any later stage what we also

00:09:45,819 --> 00:09:53,449
made sure is that we have the right

00:09:47,899 --> 00:09:55,910
place for extensions so in contact we

00:09:53,449 --> 00:09:59,809
have often these fold on extensions that

00:09:55,910 --> 00:10:01,910
are in somewhat weird places like a scam

00:09:59,809 --> 00:10:03,829
detection in your email viewer which

00:10:01,910 --> 00:10:07,189
means it has to be done every time you

00:10:03,829 --> 00:10:10,040
look at that email but the pipeline we

00:10:07,189 --> 00:10:13,220
have a nice place where we where we can

00:10:10,040 --> 00:10:16,490
guarantee that this this preprocessor is

00:10:13,220 --> 00:10:18,559
always processed before it enters the

00:10:16,490 --> 00:10:22,779
system for the rest of the client so we

00:10:18,559 --> 00:10:25,990
can do stuff like spam detection we can

00:10:22,779 --> 00:10:29,059
we can of course do various indexing and

00:10:25,990 --> 00:10:31,189
tasks we can do filtering we can do

00:10:29,059 --> 00:10:33,800
filtering in a way that we can filter it

00:10:31,189 --> 00:10:36,290
before it enters the system so you don't

00:10:33,800 --> 00:10:38,089
have an email that pops up in your inbox

00:10:36,290 --> 00:10:43,339
and then suddenly vanishes to pop up

00:10:38,089 --> 00:10:44,990
somewhere else we have course the

00:10:43,339 --> 00:10:48,589
pluggable back end so you can add

00:10:44,990 --> 00:10:53,209
support for new a trooper servers or

00:10:48,589 --> 00:10:56,860
whatever and then we have a we have

00:10:53,209 --> 00:11:01,009
composable UI components on the UI side

00:10:56,860 --> 00:11:05,209
which will eventually allow us to to do

00:11:01,009 --> 00:11:07,250
more mashups of different views and get

00:11:05,209 --> 00:11:08,270
a bit of way of you have your email

00:11:07,250 --> 00:11:10,460
client over here

00:11:08,270 --> 00:11:12,470
and your calendar over here and your

00:11:10,460 --> 00:11:15,910
notes application somewhere else and

00:11:12,470 --> 00:11:15,910
they can't interact with each other

00:11:17,680 --> 00:11:24,260
because we don't want to rewrite

00:11:22,490 --> 00:11:28,610
everything from scratch that would take

00:11:24,260 --> 00:11:32,480
years obviously we of course try to

00:11:28,610 --> 00:11:34,010
reuse as much as we can from from

00:11:32,480 --> 00:11:36,200
contact and KD p.m. so we try to

00:11:34,010 --> 00:11:39,050
refactor self into libraries that we

00:11:36,200 --> 00:11:43,070
know we can share with them contact so

00:11:39,050 --> 00:11:48,830
we can Co maintain it and this allows us

00:11:43,070 --> 00:11:51,650
to move much faster than if we just went

00:11:48,830 --> 00:11:55,130
and wrote the client from scratch it of

00:11:51,650 --> 00:11:57,500
course also allows us to learn the

00:11:55,130 --> 00:11:59,360
lessons to be learned that we have a lot

00:11:57,500 --> 00:12:01,340
of experience with the contact obey so

00:11:59,360 --> 00:12:05,180
we know where everything is implemented

00:12:01,340 --> 00:12:13,870
we know what what problems we faced with

00:12:05,180 --> 00:12:20,030
that so we can build on that another

00:12:13,870 --> 00:12:25,250
large topic is performance so in in

00:12:20,030 --> 00:12:28,550
contact we have many performance

00:12:25,250 --> 00:12:35,270
problems by design sort of one of its

00:12:28,550 --> 00:12:37,400
poor concepts is that it it doesn't know

00:12:35,270 --> 00:12:40,250
what its doors so you can freely extend

00:12:37,400 --> 00:12:43,790
it with whatever however that also means

00:12:40,250 --> 00:12:46,160
you can't query for any data which leads

00:12:43,790 --> 00:12:48,410
to somewhat ridiculous results and

00:12:46,160 --> 00:12:52,040
sometimes because if you want to show a

00:12:48,410 --> 00:12:54,320
week in your calendar what we have to do

00:12:52,040 --> 00:12:57,230
and there's no way around that we have

00:12:54,320 --> 00:13:00,560
to load all your calendar data process

00:12:57,230 --> 00:13:04,190
it in memory throw 99% of that data way

00:13:00,560 --> 00:13:06,050
because we don't care and that

00:13:04,190 --> 00:13:09,350
essentially every time you look at your

00:13:06,050 --> 00:13:11,810
calendar same goes for email threading

00:13:09,350 --> 00:13:14,540
and we can't worry for emails by day

00:13:11,810 --> 00:13:16,910
then in a threaded fashion so we load

00:13:14,540 --> 00:13:18,170
the full folder if you have two hundred

00:13:16,910 --> 00:13:19,059
thousand emails below two hundred

00:13:18,170 --> 00:13:22,179
thousand

00:13:19,059 --> 00:13:24,429
Elle's in memory and then we figure out

00:13:22,179 --> 00:13:27,609
the sorting and because that is very

00:13:24,429 --> 00:13:31,059
expensive we have various caching layers

00:13:27,609 --> 00:13:33,119
that try to somehow fix that but that

00:13:31,059 --> 00:13:35,859
adds a huge amount of complexity because

00:13:33,119 --> 00:13:38,709
the caches are also somewhat expensive

00:13:35,859 --> 00:13:42,219
to build so we store them to disk now

00:13:38,709 --> 00:13:47,319
even and yeah it just becomes somewhat

00:13:42,219 --> 00:13:50,169
insane you also have this you have this

00:13:47,319 --> 00:13:52,929
disconnect between the where your date

00:13:50,169 --> 00:13:56,919
days and where your application is and

00:13:52,929 --> 00:14:00,549
you have a protocol to fetch data but if

00:13:56,919 --> 00:14:02,469
you if you need too much data for what

00:14:00,549 --> 00:14:03,819
you're trying to figure out you fetch

00:14:02,469 --> 00:14:05,799
too much you have to load that all in

00:14:03,819 --> 00:14:09,159
memory at some point this becomes a

00:14:05,799 --> 00:14:11,819
problem if you don't fetch enough you

00:14:09,159 --> 00:14:14,529
have too many round trips this one scale

00:14:11,819 --> 00:14:17,949
so you're always trying to find this

00:14:14,529 --> 00:14:20,079
middle ground on what works and with Q

00:14:17,949 --> 00:14:23,289
we get rid of all those problems because

00:14:20,079 --> 00:14:25,899
you have your your database is a memory

00:14:23,289 --> 00:14:28,509
mapped file on disk directly in process

00:14:25,899 --> 00:14:31,029
you can just read whatever you need and

00:14:28,509 --> 00:14:33,129
throw away whatever you need it it's

00:14:31,029 --> 00:14:35,349
very cheap to do multiple reads because

00:14:33,129 --> 00:14:38,589
you're just accessing a memory mapped

00:14:35,349 --> 00:14:45,329
files essentially we just use a key

00:14:38,589 --> 00:14:47,679
value store as a as the database so and

00:14:45,329 --> 00:14:50,049
then of course there comes the whole

00:14:47,679 --> 00:14:52,209
like the startup performance and stuff

00:14:50,049 --> 00:14:54,459
we don't have any external process that

00:14:52,209 --> 00:14:56,589
we have to start resources only have to

00:14:54,459 --> 00:14:58,359
be started if you actually want you to

00:14:56,589 --> 00:14:59,859
synchronize your update or somehow if

00:14:58,359 --> 00:15:03,999
you want to read only access you just

00:14:59,859 --> 00:15:07,629
have everything in process so that

00:15:03,999 --> 00:15:09,969
allows us just to solve many of those

00:15:07,629 --> 00:15:18,729
problems where we work so hard before in

00:15:09,969 --> 00:15:24,189
working around the design constraints on

00:15:18,729 --> 00:15:27,639
the UI side we have the UI completely

00:15:24,189 --> 00:15:30,849
written in cute quick so we we hope to

00:15:27,639 --> 00:15:32,000
be to be able to do much faster

00:15:30,849 --> 00:15:34,460
iterations and

00:15:32,000 --> 00:15:36,890
try more to figure out what users

00:15:34,460 --> 00:15:39,530
actually what are the use cases that we

00:15:36,890 --> 00:15:42,380
actually want to solve and we want to do

00:15:39,530 --> 00:15:47,650
more on a user-centered design approach

00:15:42,380 --> 00:15:51,320
not necessarily the official methodology

00:15:47,650 --> 00:15:53,060
but we don't want to just implement

00:15:51,320 --> 00:15:55,400
features because there used to be this

00:15:53,060 --> 00:15:59,180
feature at some point somewhere we want

00:15:55,400 --> 00:16:04,430
to support workflows we're working a lot

00:15:59,180 --> 00:16:07,070
together with the UX guys from ke de the

00:16:04,430 --> 00:16:10,490
ke vdg and of course the people that we

00:16:07,070 --> 00:16:13,670
have in at collab systems in the future

00:16:10,490 --> 00:16:15,950
we will do more on really testing with

00:16:13,670 --> 00:16:18,320
users and try to evolve that slowly but

00:16:15,950 --> 00:16:20,840
we're also really trying to focus on not

00:16:18,320 --> 00:16:29,900
just dumping too many features in there

00:16:20,840 --> 00:16:32,750
for the sake of it overall we build a

00:16:29,900 --> 00:16:35,660
platform for the future and with Q this

00:16:32,750 --> 00:16:37,970
is initially of course hard to get

00:16:35,660 --> 00:16:43,120
started until you're at the point where

00:16:37,970 --> 00:16:43,120
you have the your minimal feature set

00:16:43,570 --> 00:16:50,960
but this will then allow us to move much

00:16:47,750 --> 00:16:54,530
more freely in the future and actually

00:16:50,960 --> 00:16:57,740
get the client forward and not just try

00:16:54,530 --> 00:17:03,080
to play catch-up with microsoft exchange

00:16:57,740 --> 00:17:05,630
or whatever we since we also want to go

00:17:03,080 --> 00:17:08,240
on on mobile platforms we also make sure

00:17:05,630 --> 00:17:11,420
that the whole software stack remains

00:17:08,240 --> 00:17:14,680
very portable and controllable so in

00:17:11,420 --> 00:17:18,800
contact we have a huge dependency chain

00:17:14,680 --> 00:17:20,750
with cube we restrict that much more

00:17:18,800 --> 00:17:23,480
which is of course not to say that we

00:17:20,750 --> 00:17:27,350
don't have dependencies we use

00:17:23,480 --> 00:17:29,960
dependencies that make sense but if if

00:17:27,350 --> 00:17:32,960
we can avoid it dependency reasonably

00:17:29,960 --> 00:17:36,470
easy and that improves portability then

00:17:32,960 --> 00:17:40,550
we'll go for that we also make sure that

00:17:36,470 --> 00:17:41,720
the whole system remains testable so we

00:17:40,550 --> 00:17:44,270
have

00:17:41,720 --> 00:17:48,380
test suites for resources for instance

00:17:44,270 --> 00:17:50,990
that you can that sort of you resources

00:17:48,380 --> 00:17:53,179
have capabilities and if a a resource

00:17:50,990 --> 00:17:55,840
says I know how to deal with drafts and

00:17:53,179 --> 00:17:57,980
emails we have a test for that that is a

00:17:55,840 --> 00:18:00,380
standardized test if you write a new

00:17:57,980 --> 00:18:02,860
resource and say well my resource can do

00:18:00,380 --> 00:18:05,960
that now then we can verify

00:18:02,860 --> 00:18:08,299
automatically everything that we expect

00:18:05,960 --> 00:18:11,000
from the client side of course you have

00:18:08,299 --> 00:18:17,059
to take care yourself that the back end

00:18:11,000 --> 00:18:18,830
actually works and then with a platform

00:18:17,059 --> 00:18:20,990
we also have these composable UI

00:18:18,830 --> 00:18:23,240
components that will eventually allow us

00:18:20,990 --> 00:18:27,020
because we're doing the whole UI in qml

00:18:23,240 --> 00:18:29,960
and then these qml components know how

00:18:27,020 --> 00:18:32,740
to access their data it becomes much

00:18:29,960 --> 00:18:36,110
easier to do integrations things like

00:18:32,740 --> 00:18:39,590
that in the email you you show the

00:18:36,110 --> 00:18:41,510
actual address book component and that

00:18:39,590 --> 00:18:44,929
directly gives you access to all the day

00:18:41,510 --> 00:18:48,080
then all the all the actions that you

00:18:44,929 --> 00:18:54,679
expect from your address book component

00:18:48,080 --> 00:18:56,809
as well and we can also use that

00:18:54,679 --> 00:18:59,630
directly for for desktop integration of

00:18:56,809 --> 00:19:03,740
course we could directly show the cube

00:18:59,630 --> 00:19:09,100
calendar with all the functionality that

00:19:03,740 --> 00:19:11,570
you're used to on a plasmoid in KD

00:19:09,100 --> 00:19:14,210
without having to re-implement any of

00:19:11,570 --> 00:19:16,370
the functionality so this allows for

00:19:14,210 --> 00:19:25,370
much better much better and much easier

00:19:16,370 --> 00:19:29,320
and desktop integration so from the

00:19:25,370 --> 00:19:35,299
roadmap we currently focus on email only

00:19:29,320 --> 00:19:38,330
because its first it's it's from many of

00:19:35,299 --> 00:19:41,419
the data types are list based so the

00:19:38,330 --> 00:19:42,950
email view gives us sort of the worst

00:19:41,419 --> 00:19:47,150
case scenario for that because there's

00:19:42,950 --> 00:19:48,919
lots of data it's also a performance

00:19:47,150 --> 00:19:53,809
wise the worst case because there's lots

00:19:48,919 --> 00:19:55,960
of data and that way we can get

00:19:53,809 --> 00:19:59,710
reasonably fast way you

00:19:55,960 --> 00:20:01,930
product and we can be sure that our

00:19:59,710 --> 00:20:04,960
design decisions make sense because it

00:20:01,930 --> 00:20:11,440
actually scales to the use case that is

00:20:04,960 --> 00:20:17,140
the hardest we aim for a and user ready

00:20:11,440 --> 00:20:21,310
I'm release by end of the year we focus

00:20:17,140 --> 00:20:23,440
on getting the minimum necessary feature

00:20:21,310 --> 00:20:25,630
set in there and then rather focus on

00:20:23,440 --> 00:20:27,310
polishing that to ensure that we can

00:20:25,630 --> 00:20:32,650
actually reach the quality that we

00:20:27,310 --> 00:20:35,680
aspire to reach so we try to restrict

00:20:32,650 --> 00:20:39,760
ourselves a bit in going too crazy with

00:20:35,680 --> 00:20:42,280
the features and then over the next year

00:20:39,760 --> 00:20:44,470
we expect to add the other group air

00:20:42,280 --> 00:20:46,030
component so you have your calendar will

00:20:44,470 --> 00:20:48,580
probably have an address book of course

00:20:46,030 --> 00:20:52,540
with email client but then we like

00:20:48,580 --> 00:20:54,760
blender and notes and task management we

00:20:52,540 --> 00:20:58,150
might already have that in a preview

00:20:54,760 --> 00:21:01,140
version by end of the year but that's

00:20:58,150 --> 00:21:03,850
not necessarily the focus right now and

00:21:01,140 --> 00:21:07,900
then from there on I hope we can really

00:21:03,850 --> 00:21:09,220
move forward in also pushing what we can

00:21:07,900 --> 00:21:11,610
do with the client and what it actually

00:21:09,220 --> 00:21:15,930
is and that instant messaging and other

00:21:11,610 --> 00:21:21,580
features and focus more on on workflows

00:21:15,930 --> 00:21:23,680
rather than these isolated features that

00:21:21,580 --> 00:21:25,660
we so far had so we can for instance

00:21:23,680 --> 00:21:28,950
support you in having meetings which

00:21:25,660 --> 00:21:32,170
involves calendaring and email and

00:21:28,950 --> 00:21:34,810
having a chat and then doing notes and

00:21:32,170 --> 00:21:36,970
and whatnot so we want to really support

00:21:34,810 --> 00:21:44,890
the user more in what he's actually

00:21:36,970 --> 00:21:47,100
trying to do so with that we got to the

00:21:44,890 --> 00:21:47,100
demo

00:22:11,309 --> 00:22:19,840
interesting so that's how it currently

00:22:16,539 --> 00:22:24,039
looks of course it has still many you I

00:22:19,840 --> 00:22:25,659
problems but what we can see here is

00:22:24,039 --> 00:22:28,600
that if I switch for instance between

00:22:25,659 --> 00:22:31,929
these lists we don't do any cash in a

00:22:28,600 --> 00:22:34,630
read of any sorts in indy GUI so in

00:22:31,929 --> 00:22:38,639
contact we use to cash every list every

00:22:34,630 --> 00:22:41,440
time because it was very expensive to do

00:22:38,639 --> 00:22:43,840
with because here we build the right

00:22:41,440 --> 00:22:45,220
indexes so we only have the query for

00:22:43,840 --> 00:22:47,590
what we actually want to show which is a

00:22:45,220 --> 00:22:49,299
bunch of emails that's not that hard so

00:22:47,590 --> 00:22:54,340
we can just do that in in real time

00:22:49,299 --> 00:22:56,830
which keeps the code very simple yeah if

00:22:54,340 --> 00:22:59,049
you switch emails then what's know is

00:22:56,830 --> 00:23:03,250
that this is HTML and has to load some

00:22:59,049 --> 00:23:07,539
images from the internet so that also

00:23:03,250 --> 00:23:10,240
shows of course in India application

00:23:07,539 --> 00:23:12,610
startup time because it's essentially

00:23:10,240 --> 00:23:17,830
instant because it doesn't really have

00:23:12,610 --> 00:23:20,320
to do anything in the background it

00:23:17,830 --> 00:23:22,809
starts the resource process so it's

00:23:20,320 --> 00:23:25,179
aware if updates come in if the client

00:23:22,809 --> 00:23:26,889
is close the resource process just dies

00:23:25,179 --> 00:23:31,419
because it has no clients anymore so

00:23:26,889 --> 00:23:35,860
there's no point what we see here is

00:23:31,419 --> 00:23:40,360
also if I scroll down you if you watch

00:23:35,860 --> 00:23:42,760
the scroll bar as I go down it gets

00:23:40,360 --> 00:23:46,389
smaller which will have to fix you I

00:23:42,760 --> 00:23:48,639
wise but the point is we even if you

00:23:46,389 --> 00:23:51,399
have a hundred thousand emails in your

00:23:48,639 --> 00:23:54,490
folder we're only loading like the first

00:23:51,399 --> 00:23:56,799
thousand or so right now and then as you

00:23:54,490 --> 00:24:00,700
get to the bottom we fetch more because

00:23:56,799 --> 00:24:03,220
we have a sorted by date index right

00:24:00,700 --> 00:24:04,840
into the storage so that allows us to

00:24:03,220 --> 00:24:13,440
efficiently just retreat what we

00:24:04,840 --> 00:24:19,000
actually need yeah so then you can

00:24:13,440 --> 00:24:22,649
compose email and stuff but that's of

00:24:19,000 --> 00:24:22,649
course very heavily working progress

00:24:38,340 --> 00:24:44,560
so I just finished the packages for the

00:24:42,580 --> 00:24:48,370
summit so you can actually try this

00:24:44,560 --> 00:24:51,160
yourself if if you like it's obviously

00:24:48,370 --> 00:24:56,710
not ready for production I expect it to

00:24:51,160 --> 00:24:58,690
be usable within the next month for for

00:24:56,710 --> 00:25:00,490
your email reading essentially that you

00:24:58,690 --> 00:25:04,360
can watch you can mark emails as read

00:25:00,490 --> 00:25:07,090
and you can move into trash but of

00:25:04,360 --> 00:25:09,340
course it's entirely possible that it

00:25:07,090 --> 00:25:11,590
breaks over time we don't take any care

00:25:09,340 --> 00:25:14,190
right now that it works between versions

00:25:11,590 --> 00:25:19,810
so you sort of have to view your data

00:25:14,190 --> 00:25:23,770
sometimes it's available as packages for

00:25:19,810 --> 00:25:28,440
fedora 23 and we have from so from our

00:25:23,770 --> 00:25:33,640
obeisance ins and we have a flat pack

00:25:28,440 --> 00:25:35,200
definition file in the AE flat pack I'm

00:25:33,640 --> 00:25:38,890
application so you can build it yourself

00:25:35,200 --> 00:25:41,500
and give it a try if you like the

00:25:38,890 --> 00:25:44,170
development planning is happening on the

00:25:41,500 --> 00:25:46,600
kds fabricator instance so there you can

00:25:44,170 --> 00:25:49,080
follow along in what we're doing there

00:25:46,600 --> 00:25:51,520
are different projects for the UX and

00:25:49,080 --> 00:25:55,620
people where they mostly work on

00:25:51,520 --> 00:25:58,780
mock-ups and then there's the technical

00:25:55,620 --> 00:26:00,640
144 sink and cube which follows more the

00:25:58,780 --> 00:26:10,870
implementation there's the roadmap that

00:26:00,640 --> 00:26:16,570
you can follow yeah that's it so Aaron

00:26:10,870 --> 00:26:20,520
will say a few words on roundcube next

00:26:16,570 --> 00:26:24,720
unless should we do questions later now

00:26:20,520 --> 00:26:24,720
are there questions

00:26:39,230 --> 00:26:45,060
so the question was whether we plan on

00:26:42,120 --> 00:26:47,970
integrating gpg support and stuff for

00:26:45,060 --> 00:26:51,840
encryption so the answer to this it to

00:26:47,970 --> 00:26:54,690
that is yes so the cube is one of the

00:26:51,840 --> 00:26:57,390
reasons for cube is that this will allow

00:26:54,690 --> 00:27:00,270
us to get end-to-end encryption to

00:26:57,390 --> 00:27:05,130
mobile devices as well which we

00:27:00,270 --> 00:27:09,330
currently can't do over the web so we

00:27:05,130 --> 00:27:11,910
already we got gpg support read-only for

00:27:09,330 --> 00:27:13,830
free because we root using the KDP a

00:27:11,910 --> 00:27:16,080
message to your component which has

00:27:13,830 --> 00:27:17,880
already that stuff built in we don't

00:27:16,080 --> 00:27:21,240
have any key management right now and

00:27:17,880 --> 00:27:23,610
there are various plans and also

00:27:21,240 --> 00:27:25,620
improving the usability of the whole key

00:27:23,610 --> 00:27:27,570
management stuff better that you have

00:27:25,620 --> 00:27:29,100
for instance directly in the address

00:27:27,570 --> 00:27:31,500
book can indicate whether you actually

00:27:29,100 --> 00:27:35,580
are able to have a secure establish a

00:27:31,500 --> 00:27:37,140
secure connection to that person so yes

00:27:35,580 --> 00:27:39,650
that's definitely something we're

00:27:37,140 --> 00:27:39,650
working on

00:27:52,720 --> 00:27:57,470
yeah so the question was what all

00:27:55,309 --> 00:28:00,139
platforms means for the release by in

00:27:57,470 --> 00:28:04,909
fear and all platforms for that release

00:28:00,139 --> 00:28:07,970
means linux windows mac OS x it does not

00:28:04,909 --> 00:28:11,059
include the mobile platforms yet for the

00:28:07,970 --> 00:28:14,240
mobile platforms we will write an

00:28:11,059 --> 00:28:16,820
entirely different UI that adapts to the

00:28:14,240 --> 00:28:18,320
form factor so that's also reason why we

00:28:16,820 --> 00:28:22,909
have this very clear separation between

00:28:18,320 --> 00:28:25,159
the UI and the logic and which we're

00:28:22,909 --> 00:28:27,620
forced to do of course by by cute quick

00:28:25,159 --> 00:28:30,529
but that allows us to sort of just slap

00:28:27,620 --> 00:28:40,700
on a new UI that is actually tailored

00:28:30,529 --> 00:28:45,789
for towards the form factor start on

00:28:40,700 --> 00:28:45,789
Exmoor san projects

00:29:02,640 --> 00:29:07,990
Christian is taller than I am I only

00:29:06,850 --> 00:29:13,810
notice that once I stepped up to the mic

00:29:07,990 --> 00:29:18,970
um yes so obviously we're doing a lot of

00:29:13,810 --> 00:29:21,970
exciting work with cube and if you're

00:29:18,970 --> 00:29:24,330
wondering where the name came from this

00:29:21,970 --> 00:29:28,230
was actually an intentional call back or

00:29:24,330 --> 00:29:31,450
reference to roundcube which is the web

00:29:28,230 --> 00:29:33,520
app that we use with colab in which

00:29:31,450 --> 00:29:36,100
we've been the primary developer of for

00:29:33,520 --> 00:29:38,440
many years now in fact there's one young

00:29:36,100 --> 00:29:42,780
fellow right there who is a responsible

00:29:38,440 --> 00:29:42,780
for quite a bit of roundcube as well so

00:29:42,960 --> 00:29:48,820
we run into some you know some kind of

00:29:46,390 --> 00:29:52,570
endpoint issues with with roundcube one

00:29:48,820 --> 00:29:54,300
and in the last year or so it's a great

00:29:52,570 --> 00:29:57,670
application it's used around the world

00:29:54,300 --> 00:30:00,610
most popular open source web mail app

00:29:57,670 --> 00:30:03,400
out there but to do the things we want

00:30:00,610 --> 00:30:05,980
to do with it the developers looked at

00:30:03,400 --> 00:30:07,450
it when I it's we can't really

00:30:05,980 --> 00:30:11,340
accomplish what we want to accomplish

00:30:07,450 --> 00:30:14,650
which is things like being able to

00:30:11,340 --> 00:30:17,800
extend it more easily for integration

00:30:14,650 --> 00:30:22,000
into corporate workflows and being able

00:30:17,800 --> 00:30:23,290
to have a UI that adapts if you're on a

00:30:22,000 --> 00:30:25,330
tablet for instance you may have noticed

00:30:23,290 --> 00:30:27,970
that roundcube is not overly useful on a

00:30:25,330 --> 00:30:31,090
touchscreen device especially one with

00:30:27,970 --> 00:30:33,910
the smaller screen and we wanted to be

00:30:31,090 --> 00:30:36,700
able to get rid of the page.reload so I

00:30:33,910 --> 00:30:38,650
wanted a very nice modern application

00:30:36,700 --> 00:30:41,770
which is a seamless you load it once and

00:30:38,650 --> 00:30:46,300
and you're done so some of the more

00:30:41,770 --> 00:30:48,850
recent mail applications on the web have

00:30:46,300 --> 00:30:51,850
all done now gone that approach that

00:30:48,850 --> 00:30:54,430
single page web app no reloads just the

00:30:51,850 --> 00:30:56,080
data coming across and and it enables

00:30:54,430 --> 00:30:58,240
them to do quite a few nifty little

00:30:56,080 --> 00:31:00,460
things that we also want to do but

00:30:58,240 --> 00:31:02,470
roundcube one was based on or is built

00:31:00,460 --> 00:31:06,520
around the concept of server-side

00:31:02,470 --> 00:31:09,160
rendered templates and then you get the

00:31:06,520 --> 00:31:10,440
and results shipped to you as HTML and

00:31:09,160 --> 00:31:13,240
JavaScript

00:31:10,440 --> 00:31:16,060
but it still relies very heavily on this

00:31:13,240 --> 00:31:18,430
concept of server-side templating so

00:31:16,060 --> 00:31:21,280
around cube next and makes a slight

00:31:18,430 --> 00:31:23,350
departure from this and instead moves

00:31:21,280 --> 00:31:25,420
the application entirely into the

00:31:23,350 --> 00:31:27,820
client-side web browser so you have a

00:31:25,420 --> 00:31:30,130
single page web app that delivers

00:31:27,820 --> 00:31:32,410
essentially the same functionality but

00:31:30,130 --> 00:31:35,710
without the server-side templating so

00:31:32,410 --> 00:31:37,000
you get zero page reload access to all

00:31:35,710 --> 00:31:40,390
of your data whether that's your

00:31:37,000 --> 00:31:44,020
calendar or your mail or whatnot and it

00:31:40,390 --> 00:31:48,310
also allows us to extend what we can do

00:31:44,020 --> 00:31:50,020
with the web app so along with with cube

00:31:48,310 --> 00:31:52,780
which has very similar name for good

00:31:50,020 --> 00:31:54,280
reason there's a clear separation out

00:31:52,780 --> 00:31:58,030
between the UI or clear separation

00:31:54,280 --> 00:32:00,870
between the UI and the data as normally

00:31:58,030 --> 00:32:03,910
allows us to in future add specific

00:32:00,870 --> 00:32:06,160
plugins and components for various use

00:32:03,910 --> 00:32:10,150
cases without having to rewrite the

00:32:06,160 --> 00:32:12,670
entire the business logic behind it but

00:32:10,150 --> 00:32:14,710
it allows us to do things that should be

00:32:12,670 --> 00:32:16,720
quite trivial such as if you have used

00:32:14,710 --> 00:32:18,370
roundcube right now with colab you

00:32:16,720 --> 00:32:21,220
notice we have a feature for tagging and

00:32:18,370 --> 00:32:23,200
the tagging box appears in different

00:32:21,220 --> 00:32:26,530
parts of the screen depending on which

00:32:23,200 --> 00:32:30,040
app you're using notifications are

00:32:26,530 --> 00:32:31,270
always in the browser and if we want to

00:32:30,040 --> 00:32:33,250
change how notifications are done we

00:32:31,270 --> 00:32:36,100
have to go around and and adjust the

00:32:33,250 --> 00:32:38,440
calls and everywhere that's made there's

00:32:36,100 --> 00:32:40,570
a lot of duplication of effort and in

00:32:38,440 --> 00:32:44,620
roundcube next there's the concept of

00:32:40,570 --> 00:32:49,300
apps so we're using ember.js to actually

00:32:44,620 --> 00:32:51,070
do the creation of the of the assets and

00:32:49,300 --> 00:32:53,530
we don't need to run know to run around

00:32:51,070 --> 00:32:57,070
cube next but just to build it and to

00:32:53,530 --> 00:32:59,620
develop with it but this allows us to do

00:32:57,070 --> 00:33:01,930
things like having a app that does

00:32:59,620 --> 00:33:04,330
notifications so there's a pub sub a

00:33:01,930 --> 00:33:06,940
publish-subscribe bus around cube next

00:33:04,330 --> 00:33:09,130
that such apps can well subscribe to and

00:33:06,940 --> 00:33:12,040
publish to so an application say I have

00:33:09,130 --> 00:33:14,770
a notification and the notification app

00:33:12,040 --> 00:33:16,330
can subscribe to those messages and then

00:33:14,770 --> 00:33:17,950
do whatever is necessary for

00:33:16,330 --> 00:33:21,040
notifications be that made of desktop

00:33:17,950 --> 00:33:22,050
app native desktop notifications or in

00:33:21,040 --> 00:33:24,540
browser notification

00:33:22,050 --> 00:33:27,230
ends or whatnot and all of that code and

00:33:24,540 --> 00:33:30,000
all that logic can then be put in one

00:33:27,230 --> 00:33:31,800
replaceable and reusable component that

00:33:30,000 --> 00:33:35,610
lives within the the larger round cube

00:33:31,800 --> 00:33:37,560
next world so in addition to that the

00:33:35,610 --> 00:33:39,210
other really exciting thing I I feel

00:33:37,560 --> 00:33:41,040
about Tim roundcube next and cube is

00:33:39,210 --> 00:33:44,580
that we're designing both of the UI's

00:33:41,040 --> 00:33:46,980
together so we're right now if you have

00:33:44,580 --> 00:33:49,530
contact on on one screen and you have

00:33:46,980 --> 00:33:52,850
roundcube on the other screen you'll

00:33:49,530 --> 00:33:52,850
notice they look somewhat different

00:33:53,120 --> 00:33:58,080
we're doing the visual design the

00:33:55,860 --> 00:34:00,630
workflow concepts and all of that for

00:33:58,080 --> 00:34:03,030
both applications in tandem and with the

00:34:00,630 --> 00:34:06,240
same with with overlap in the developers

00:34:03,030 --> 00:34:09,470
and design team so that's when we have

00:34:06,240 --> 00:34:13,020
roundcube next and cube both ready for

00:34:09,470 --> 00:34:14,820
production use you'll have cube on one

00:34:13,020 --> 00:34:16,830
screen or multiple screens and you'll

00:34:14,820 --> 00:34:18,960
have roundcube next on your other

00:34:16,830 --> 00:34:20,310
screens and they'll actually look like

00:34:18,960 --> 00:34:21,870
they belong together you'll be able to

00:34:20,310 --> 00:34:24,630
take some of your work flow from one and

00:34:21,870 --> 00:34:27,450
used in the other so the usability will

00:34:24,630 --> 00:34:28,950
improve across the board and you'll be

00:34:27,450 --> 00:34:31,470
able to learn one way of doing things

00:34:28,950 --> 00:34:35,340
and just apply that to all of your

00:34:31,470 --> 00:34:37,980
applications so along with with cube the

00:34:35,340 --> 00:34:41,630
goal we have for roundcube next is we

00:34:37,980 --> 00:34:44,610
will deliver a usable mail application

00:34:41,630 --> 00:34:46,590
at the end of the year so that people

00:34:44,610 --> 00:34:49,350
can start actually poking it with a

00:34:46,590 --> 00:34:50,850
stick with us and then from there we

00:34:49,350 --> 00:34:52,919
will iterate forward feature by feature

00:34:50,850 --> 00:34:55,470
by feature by feature until we have a

00:34:52,919 --> 00:34:58,110
complete replacement for roundcube one's

00:34:55,470 --> 00:34:59,760
current functionality with colab and

00:34:58,110 --> 00:35:02,010
hopefully quite a bit further than that

00:34:59,760 --> 00:35:05,730
so that in a nutshell is what we're

00:35:02,010 --> 00:35:09,540
doing with them with roundcube next and

00:35:05,730 --> 00:35:12,210
on the UI side on the server side the

00:35:09,540 --> 00:35:15,150
day delivery side we are working with a

00:35:12,210 --> 00:35:19,080
number of companies in great open-source

00:35:15,150 --> 00:35:20,730
fashion on a protocol called J map which

00:35:19,080 --> 00:35:23,640
basically takes the horrible thing known

00:35:20,730 --> 00:35:27,480
as imap and makes it a lot easier to

00:35:23,640 --> 00:35:29,670
consume from a modern style web

00:35:27,480 --> 00:35:33,420
application that includes things like

00:35:29,670 --> 00:35:35,340
having a long running update socket so

00:35:33,420 --> 00:35:37,460
that you can see without having to

00:35:35,340 --> 00:35:39,960
seriously Paul or build that in on to

00:35:37,460 --> 00:35:41,460
some bespoke thing on the server be nice

00:35:39,960 --> 00:35:43,350
you get your updates so what new males

00:35:41,460 --> 00:35:46,110
arrived immediately these kind of little

00:35:43,350 --> 00:35:48,540
features and also just remove a lot of

00:35:46,110 --> 00:35:50,940
the imap insanity from your code base

00:35:48,540 --> 00:35:53,250
and you just speak this NATO the J

00:35:50,940 --> 00:35:55,380
stands for JSON right so it's it's

00:35:53,250 --> 00:35:58,940
really built for for the modern web and

00:35:55,380 --> 00:36:02,400
making it easy to use so to that end and

00:35:58,940 --> 00:36:05,160
we plan on delivering a J map proxy that

00:36:02,400 --> 00:36:06,450
you can run on the server side that will

00:36:05,160 --> 00:36:09,900
sit in front of whatever your imap

00:36:06,450 --> 00:36:12,810
server is there's also work on going to

00:36:09,900 --> 00:36:15,150
actually even put 2j map support

00:36:12,810 --> 00:36:17,910
directly into the imap server as well

00:36:15,150 --> 00:36:20,250
that we use Cyrus I map so at some point

00:36:17,910 --> 00:36:23,430
you'll be able to just speak directly to

00:36:20,250 --> 00:36:26,130
the imap server city spiders speaking J

00:36:23,430 --> 00:36:29,400
map to it but in between now then

00:36:26,130 --> 00:36:33,060
refusing a random imap server say you're

00:36:29,400 --> 00:36:36,150
redirecting around cube to google mail

00:36:33,060 --> 00:36:38,610
or whatever you can use the the proxy

00:36:36,150 --> 00:36:40,650
for that otherwise there's not a whole

00:36:38,610 --> 00:36:43,200
lot of server-side code and that's one

00:36:40,650 --> 00:36:45,720
of the nice improvements there that

00:36:43,200 --> 00:36:49,140
allows us to really lower the the amount

00:36:45,720 --> 00:36:51,180
of weight that is placed on the server

00:36:49,140 --> 00:36:53,430
side and the complexity of management

00:36:51,180 --> 00:36:57,240
and deployment by moving all of that you

00:36:53,430 --> 00:36:59,880
I to the client so we expect with that

00:36:57,240 --> 00:37:02,190
design as well increases in our

00:36:59,880 --> 00:37:03,720
improvements in scalability which is

00:37:02,190 --> 00:37:07,080
great for those who are using it and say

00:37:03,720 --> 00:37:09,330
an is PRI air asp type environment or

00:37:07,080 --> 00:37:12,570
large corporate and government

00:37:09,330 --> 00:37:14,100
deployments for that matter would so I

00:37:12,570 --> 00:37:16,970
don't have a demo I'm not round tube

00:37:14,100 --> 00:37:22,040
developer so I can only talk about it

00:37:16,970 --> 00:37:22,040
but are there any questions from that

00:37:24,260 --> 00:37:30,480
nope cool great and so in that case I'll

00:37:29,220 --> 00:37:34,230
fill the time a little bit more since

00:37:30,480 --> 00:37:38,780
you asked about gpg support there is the

00:37:34,230 --> 00:37:41,970
a plugin for roundcube one that does a

00:37:38,780 --> 00:37:42,930
gpg through Melva lope and this is

00:37:41,970 --> 00:37:45,950
something we also be bringing to

00:37:42,930 --> 00:37:47,109
roundcube next and probably rather nicer

00:37:45,950 --> 00:37:50,730
and

00:37:47,109 --> 00:37:54,249
that way we have across the board your

00:37:50,730 --> 00:37:55,630
your security and Jen encryption regards

00:37:54,249 --> 00:37:57,400
to what application you're using at the

00:37:55,630 --> 00:37:59,859
time of course your key management is

00:37:57,400 --> 00:38:01,630
still local right with the web app so we

00:37:59,859 --> 00:38:04,539
don't want your keys you don't want us

00:38:01,630 --> 00:38:06,039
to have your keys so there is still that

00:38:04,539 --> 00:38:09,569
copy up you'll be able to access at at

00:38:06,039 --> 00:38:15,119
least five that route in that direction

00:38:09,569 --> 00:38:15,119

YouTube URL: https://www.youtube.com/watch?v=KlZWZNtEptk


