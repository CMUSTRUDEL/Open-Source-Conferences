Title: h01ger: Reproducible builds everywhere and beyond
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/996-reproducible-builds-everywhere-and-beyond

The presentation will describe how the Debian reproducible builds team made 85% of the Debian archive reproducible, what steps are left to reach 100% and what steps are needed beyond reproducible builds, so that every user can easily and meaningful benefit from them.

While the presentation will be largely about the Debian work on the area, it will also portray many other projects collaborative work on reproducible builds, as our goal is to make reproducible builds the norm for free software: "It's not free software if it's not reproducible." 

https://reproducible-builds.org

h01ger
Captions: 
	00:00:07,680 --> 00:00:11,400
alright so I'm hoga I'm happy to be here

00:00:09,840 --> 00:00:16,470
I will talk about

00:00:11,400 --> 00:00:22,860
so this ecosystem about why it's useful

00:00:16,470 --> 00:00:26,400
and what we've been doing um I've been

00:00:22,860 --> 00:00:29,099
doing i'm using debian since 20 years i

00:00:26,400 --> 00:00:31,910
started with souza because loser came

00:00:29,099 --> 00:00:34,379
with a book in the middle of the 90s and

00:00:31,910 --> 00:00:37,500
I've done lots of things have done

00:00:34,379 --> 00:00:39,390
debian QA that's where i met Bernhardt

00:00:37,500 --> 00:00:48,150
five years ago where he told me about

00:00:39,390 --> 00:00:50,220
opensuse qaid yeah and I'm also funded

00:00:48,150 --> 00:00:52,440
by the Linux for I was funded by the

00:00:50,220 --> 00:00:56,689
Linux Foundation to work on reproducible

00:00:52,440 --> 00:00:59,489
builds together with Luna we have

00:00:56,689 --> 00:01:02,280
applied for new funding which was in the

00:00:59,489 --> 00:01:04,439
works and i really don't know loser so

00:01:02,280 --> 00:01:06,869
if i make mistakes please forgive me

00:01:04,439 --> 00:01:12,960
donÃ­t will explain this was a parts

00:01:06,869 --> 00:01:14,850
later and it's also i present the work

00:01:12,960 --> 00:01:18,210
but it's what I really present is the

00:01:14,850 --> 00:01:21,300
work of all these people so I'm just one

00:01:18,210 --> 00:01:27,030
of them there are many people who have

00:01:21,300 --> 00:01:29,490
worked on this which is also now we've

00:01:27,030 --> 00:01:32,370
we've have a Jenkins set up for the test

00:01:29,490 --> 00:01:35,010
and these are the contributors to this

00:01:32,370 --> 00:01:36,750
Debbie and Jenkins but all these red

00:01:35,010 --> 00:01:38,850
people are not from debian who

00:01:36,750 --> 00:01:41,310
contributed to this debian thing to do

00:01:38,850 --> 00:01:46,200
reproducible tests so it's really a

00:01:41,310 --> 00:01:48,720
cross district project by now arm so I'd

00:01:46,200 --> 00:01:52,830
like to know a bit about you who of you

00:01:48,720 --> 00:01:56,880
as contributing to free software yay

00:01:52,830 --> 00:02:00,120
thank you and who has seen a talk about

00:01:56,880 --> 00:02:06,299
reproducible bills already also some

00:02:00,120 --> 00:02:11,370
great so I start a bit with the

00:02:06,299 --> 00:02:14,400
motivation why we do this and basically

00:02:11,370 --> 00:02:15,550
I refer to this talk from mike carey and

00:02:14,400 --> 00:02:19,330
section

00:02:15,550 --> 00:02:22,450
Congress CCC Congress in 2014 where they

00:02:19,330 --> 00:02:27,790
really describe the problem in very deep

00:02:22,450 --> 00:02:30,100
detail I just give some highlights from

00:02:27,790 --> 00:02:32,910
the talk nor what i recommend what's

00:02:30,100 --> 00:02:38,200
this talk is really really good

00:02:32,910 --> 00:02:40,600
reproducible this 2014 ccc congress so

00:02:38,200 --> 00:02:43,420
they had an example of a remote root

00:02:40,600 --> 00:02:46,300
exploit in ssh where the difference was

00:02:43,420 --> 00:02:48,850
only one single bit in the binary there

00:02:46,300 --> 00:02:51,280
was an error the comparison was greater

00:02:48,850 --> 00:02:53,500
and it should have been greater equal

00:02:51,280 --> 00:02:55,660
and the difference in the binary is one

00:02:53,500 --> 00:02:57,100
bit and one bit in five hundred

00:02:55,660 --> 00:03:00,310
kilobytes decides whether you have

00:02:57,100 --> 00:03:02,470
remote root or not so you cannot find

00:03:00,310 --> 00:03:06,250
problems by just looking at the binary

00:03:02,470 --> 00:03:09,190
probably they also had a live demo where

00:03:06,250 --> 00:03:11,860
they modified the sources in memory when

00:03:09,190 --> 00:03:14,380
compiling the sources while the source

00:03:11,860 --> 00:03:15,910
on the disk wasn't still the same so you

00:03:14,380 --> 00:03:18,250
look at the source the source is

00:03:15,910 --> 00:03:21,070
perfectly fine you built the source and

00:03:18,250 --> 00:03:23,140
you get a trillion binary they have done

00:03:21,070 --> 00:03:28,060
this as a live demo at Congress this is

00:03:23,140 --> 00:03:30,700
doable and there's financial insensitive

00:03:28,060 --> 00:03:32,950
to crack developer machines you take a

00:03:30,700 --> 00:03:34,690
developer and you don't you don't care

00:03:32,950 --> 00:03:36,390
about the developer but the developer

00:03:34,690 --> 00:03:39,070
ships the software to millions of users

00:03:36,390 --> 00:03:40,989
so by taking the developers you can hack

00:03:39,070 --> 00:03:45,430
people you can get make money lots of

00:03:40,989 --> 00:03:47,200
money and securing the computer it's not

00:03:45,430 --> 00:03:49,570
only about that the computer has to be

00:03:47,200 --> 00:03:52,930
secured today there's to be secure all

00:03:49,570 --> 00:03:56,680
the lifetime with physical access it's

00:03:52,930 --> 00:03:59,080
very easy to hack a computer so you can

00:03:56,680 --> 00:04:01,450
not really be sure what's running on

00:03:59,080 --> 00:04:06,100
your computer more and even less on a

00:04:01,450 --> 00:04:08,230
bit network and so open build system

00:04:06,100 --> 00:04:10,090
from Souza is a very nice target you

00:04:08,230 --> 00:04:13,780
attack it and you all immediately own

00:04:10,090 --> 00:04:16,870
millions of people and it's not really

00:04:13,780 --> 00:04:18,669
expensive like paying five or ten

00:04:16,870 --> 00:04:20,620
million dollar is not much money for

00:04:18,669 --> 00:04:23,440
state-sponsored attacker or large

00:04:20,620 --> 00:04:25,380
criminal organizations if you want to or

00:04:23,440 --> 00:04:27,360
whatever the German government uses

00:04:25,380 --> 00:04:31,140
then ten-million-dollar to attack the

00:04:27,360 --> 00:04:34,110
German government is nothing so watch

00:04:31,140 --> 00:04:38,070
the talk from Congress if you still

00:04:34,110 --> 00:04:41,370
don't think this is usable um oh that

00:04:38,070 --> 00:04:44,430
another example the CIA had from the

00:04:41,370 --> 00:04:49,200
Snowden documents they had a design of

00:04:44,430 --> 00:04:51,300
the of compromising SDK which developers

00:04:49,200 --> 00:04:53,610
download so they can attack the users

00:04:51,300 --> 00:04:56,550
the CIA described in a white paper how

00:04:53,610 --> 00:04:59,490
they would do it and you can say others

00:04:56,550 --> 00:05:02,400
he might not do it but this has X course

00:04:59,490 --> 00:05:06,240
goals happened last year was somebody

00:05:02,400 --> 00:05:08,070
put for the iOS SDK and they compromised

00:05:06,240 --> 00:05:09,960
that put it on faster service in China

00:05:08,070 --> 00:05:12,450
where the download speed was better for

00:05:09,960 --> 00:05:15,390
the Chinese developers so they use that

00:05:12,450 --> 00:05:19,860
SDK and 20 million applications were

00:05:15,390 --> 00:05:26,100
true yet so this is the problem we are

00:05:19,860 --> 00:05:28,590
at protecting against because the

00:05:26,100 --> 00:05:31,530
problem is really free software is great

00:05:28,590 --> 00:05:35,160
you can share it modify user pass it on

00:05:31,530 --> 00:05:39,390
but nobody uses the source we all use

00:05:35,160 --> 00:05:42,960
binaries and there's no way to see what

00:05:39,390 --> 00:05:44,850
the binary comes from all the freedoms

00:05:42,960 --> 00:05:48,960
from free software go for sources but we

00:05:44,850 --> 00:05:51,480
all use binaries so our solution to this

00:05:48,960 --> 00:05:54,960
is that we promise that you can oh if

00:05:51,480 --> 00:05:57,330
anyone can always read regenerate they

00:05:54,960 --> 00:06:00,270
accept bit by bit identical binaries

00:05:57,330 --> 00:06:03,360
from the same source if you can do this

00:06:00,270 --> 00:06:04,980
then you know the binary comes from this

00:06:03,360 --> 00:06:08,970
Ross and looking at the source makes

00:06:04,980 --> 00:06:14,010
sense and we call this reproducible

00:06:08,970 --> 00:06:16,140
bills it's not in the lesson the I think

00:06:14,010 --> 00:06:18,450
in the open bit system there's

00:06:16,140 --> 00:06:21,030
reproducible in the way that you can

00:06:18,450 --> 00:06:22,680
repeat it and this is the same the

00:06:21,030 --> 00:06:25,200
Debian back tracking system as the same

00:06:22,680 --> 00:06:27,810
reproducible bucks there are things

00:06:25,200 --> 00:06:30,240
which you can do again but we're when we

00:06:27,810 --> 00:06:32,510
say reproducible birds we really mean

00:06:30,240 --> 00:06:34,700
this bit by bit identical

00:06:32,510 --> 00:06:46,100
that is reproducible in the sense I'm

00:06:34,700 --> 00:06:48,500
talking about and there's a demo so this

00:06:46,100 --> 00:06:51,500
now billets the Debian package five x

00:06:48,500 --> 00:06:54,110
plus building it takes 20 seconds I

00:06:51,500 --> 00:06:56,450
think and you will see at the end test

00:06:54,110 --> 00:07:04,370
that will check sums and the check sums

00:06:56,450 --> 00:07:09,800
will be different for the binaries so he

00:07:04,370 --> 00:07:11,330
what yeah here are the check sums of the

00:07:09,800 --> 00:07:12,790
hashes and they're all different for the

00:07:11,330 --> 00:07:15,610
depths the depths are the binary

00:07:12,790 --> 00:07:26,140
packages the others are the sources and

00:07:15,610 --> 00:07:29,300
if I repeat this now in our see it rude

00:07:26,140 --> 00:07:31,970
this compiles the exact same sources

00:07:29,300 --> 00:07:34,400
five times with some modifications we

00:07:31,970 --> 00:07:38,200
made to get reproducible binaries and

00:07:34,400 --> 00:07:40,820
you will see the entries I who have five

00:07:38,200 --> 00:07:49,000
Debian packages which are the same have

00:07:40,820 --> 00:07:49,000
the same hash yeah the hashes identical

00:07:51,280 --> 00:07:59,840
give it yeah can you hear me am i

00:07:57,950 --> 00:08:04,130
speaking too fast because the acoustics

00:07:59,840 --> 00:08:06,380
is quite bad standing up here okay so

00:08:04,130 --> 00:08:08,840
this this is what we want we want always

00:08:06,380 --> 00:08:15,530
the same binary packages they were built

00:08:08,840 --> 00:08:19,880
five times and they are the same and we

00:08:15,530 --> 00:08:21,830
think this should become the norm and we

00:08:19,880 --> 00:08:24,050
want to change the meaning of free

00:08:21,830 --> 00:08:26,360
software that it's only free software if

00:08:24,050 --> 00:08:29,720
it's reproducible because it's its

00:08:26,360 --> 00:08:32,150
software but I think free software

00:08:29,720 --> 00:08:34,670
should always be reproducible because

00:08:32,150 --> 00:08:36,590
you can only be sure that a binary comes

00:08:34,670 --> 00:08:39,770
from the source if you can reproduce it

00:08:36,590 --> 00:08:43,570
as you need to believe somebody and good

00:08:39,770 --> 00:08:43,570
leaving is for churches or something

00:08:51,060 --> 00:09:01,420
so this idea is really really knew there

00:08:55,570 --> 00:09:04,270
were some discussions before the year

00:09:01,420 --> 00:09:06,970
2000s and maybe one or two projects who

00:09:04,270 --> 00:09:10,720
did in academia but nothing really took

00:09:06,970 --> 00:09:12,490
off in debian there was a male in two

00:09:10,720 --> 00:09:14,170
thousand on the developer less than two

00:09:12,490 --> 00:09:15,550
thousand seven where somebody said we

00:09:14,170 --> 00:09:19,630
should do this and people said business

00:09:15,550 --> 00:09:22,180
more possible and then in 2012 was

00:09:19,630 --> 00:09:25,330
bitcoin and tor browser made their

00:09:22,180 --> 00:09:28,210
software reproducible the bitcoin people

00:09:25,330 --> 00:09:29,950
were afraid they'd bitcoin has him had a

00:09:28,210 --> 00:09:32,440
market capitalization of four billion

00:09:29,950 --> 00:09:34,870
dollars and they were afraid if a

00:09:32,440 --> 00:09:36,580
troyian binary would show up and the

00:09:34,870 --> 00:09:39,130
money would go away to some Bitcoin

00:09:36,580 --> 00:09:41,410
wallet that the developers could not say

00:09:39,130 --> 00:09:43,090
it wasn't us was somebody else who did

00:09:41,410 --> 00:09:45,730
it so they made their software

00:09:43,090 --> 00:09:48,250
irreducible so they could prove we ship

00:09:45,730 --> 00:09:53,260
what we say we are shipping and tor

00:09:48,250 --> 00:09:56,620
browser for similar reasons in 2013 post

00:09:53,260 --> 00:10:00,370
debian and freebsd started working on

00:09:56,620 --> 00:10:03,340
this the previously efforts were largely

00:10:00,370 --> 00:10:06,010
unnoticed in a wiki Debian Luna made

00:10:03,340 --> 00:10:08,980
some talks which gathered what people

00:10:06,010 --> 00:10:12,010
interested including I became interested

00:10:08,980 --> 00:10:14,680
at the end of 2014 and set up

00:10:12,010 --> 00:10:16,330
reproducible devion net which is just a

00:10:14,680 --> 00:10:20,530
test setup which I'll explain shortly

00:10:16,330 --> 00:10:23,290
and then in 2015 this really took up we

00:10:20,530 --> 00:10:25,240
gave lots of talk we started to go away

00:10:23,290 --> 00:10:28,600
from this reproducible Debian net web

00:10:25,240 --> 00:10:30,970
page to reproducible this all and we had

00:10:28,600 --> 00:10:33,610
a meeting and Athens with from 16

00:10:30,970 --> 00:10:35,290
projects I think the only major projects

00:10:33,610 --> 00:10:38,860
who were not there were 12 and Zhu Zhu

00:10:35,290 --> 00:10:42,310
there were fedora or the BSD open wrt

00:10:38,860 --> 00:10:43,960
several mech ports and we hope to have a

00:10:42,310 --> 00:10:45,700
meeting and we invited bruiser but

00:10:43,960 --> 00:10:47,800
there's other people we reach out didn't

00:10:45,700 --> 00:10:49,780
have time and we'll have a meeting this

00:10:47,800 --> 00:10:58,210
year again and hopefully some of you

00:10:49,780 --> 00:11:00,870
will be there so what with what we have

00:10:58,210 --> 00:11:05,279
now the talk is now a bit

00:11:00,870 --> 00:11:07,890
it serves complex topics i'm starting

00:11:05,279 --> 00:11:11,130
with what we have we have now this web

00:11:07,890 --> 00:11:13,320
page reproducible bills or where we

00:11:11,130 --> 00:11:15,540
describe the concept describe common

00:11:13,320 --> 00:11:17,640
problems common solutions for this

00:11:15,540 --> 00:11:20,339
problem where projects are listed i

00:11:17,640 --> 00:11:23,279
added zuza as a participating project

00:11:20,339 --> 00:11:25,589
today because of panels talk mostly and

00:11:23,279 --> 00:11:28,800
this is really the URL you should

00:11:25,589 --> 00:11:30,420
remember everything is linked there we

00:11:28,800 --> 00:11:31,890
used to have a deputy in wiki with lots

00:11:30,420 --> 00:11:33,540
of information we but we've moved it

00:11:31,890 --> 00:11:37,529
from the Debian wiki to this web page

00:11:33,540 --> 00:11:39,839
and we have test reproduce about this or

00:11:37,529 --> 00:11:44,190
which is the test setup which is this

00:11:39,839 --> 00:11:47,100
Jenkins we are continuously testing

00:11:44,190 --> 00:11:52,260
debian unstable testing and experimented

00:11:47,100 --> 00:11:55,080
on amd64 I 3d6 an arm hf we are also

00:11:52,260 --> 00:11:57,630
testing open wrt coreboot net PSD

00:11:55,080 --> 00:12:00,450
freebsd zuza through the arch linux

00:11:57,630 --> 00:12:05,010
fedora and f droid is not really working

00:12:00,450 --> 00:12:07,589
and testing in this case means we build

00:12:05,010 --> 00:12:09,900
at once we build it then we modify the

00:12:07,589 --> 00:12:13,110
environment and then we build it again

00:12:09,900 --> 00:12:16,700
and compare this is the testing we do so

00:12:13,110 --> 00:12:22,290
we build twice badly and we built about

00:12:16,700 --> 00:12:25,860
10,000 packages a day twice we have 300

00:12:22,290 --> 00:12:30,240
Jenkins drops running on 30 host it's

00:12:25,860 --> 00:12:34,010
mostly pison court and bash and it's 30

00:12:30,240 --> 00:12:37,380
contributors to this Jenkins setup and

00:12:34,010 --> 00:12:41,130
if the result is static web pages and

00:12:37,380 --> 00:12:43,320
the JS so that's I just spoke with bare

00:12:41,130 --> 00:12:45,600
not before the talk also if zuza would

00:12:43,320 --> 00:12:47,430
not use this you could if you just feed

00:12:45,600 --> 00:12:49,110
us a jason we could integrate it into

00:12:47,430 --> 00:12:53,010
the same web page so that we have all

00:12:49,110 --> 00:12:57,240
reproducible projects into one why this

00:12:53,010 --> 00:13:00,420
is useful explain in a second yeah we

00:12:57,240 --> 00:13:03,060
have lots of resources 300 gigs of ram

00:13:00,420 --> 00:13:05,459
100 course thanks for profit bricks who

00:13:03,060 --> 00:13:08,970
are really nice sponsoring this since 4

00:13:05,459 --> 00:13:12,170
years now and we have zoo of armed notes

00:13:08,970 --> 00:13:17,980
20 small boards banana pie raspa

00:13:12,170 --> 00:13:23,000
Oh parks whatever which is arm stuff and

00:13:17,980 --> 00:13:27,260
we'll get on 64 boards this year we were

00:13:23,000 --> 00:13:31,160
waiting for the hardware so when we bid

00:13:27,260 --> 00:13:33,560
debian we've got these variations so we

00:13:31,160 --> 00:13:37,310
vary the hostname between the birds the

00:13:33,560 --> 00:13:41,029
domain the timezone the locale the

00:13:37,310 --> 00:13:45,170
username the dash the shell the user

00:13:41,029 --> 00:13:48,320
shell is also very very the colonel we

00:13:45,170 --> 00:13:51,709
are working on varying the cpu type as

00:13:48,320 --> 00:13:56,360
well on i386 we won spirit was on 32-bit

00:13:51,709 --> 00:13:58,699
colonel once was a 64-bit kernel with

00:13:56,360 --> 00:14:02,449
the fire system is also important

00:13:58,699 --> 00:14:04,279
because the order Riccio the retail

00:14:02,449 --> 00:14:08,329
order is not deterministic the

00:14:04,279 --> 00:14:10,850
difference from the file system and we

00:14:08,329 --> 00:14:13,699
defer the time so we have one built

00:14:10,850 --> 00:14:15,980
bills today and the other is running 400

00:14:13,699 --> 00:14:19,579
days ahead some other year months and

00:14:15,980 --> 00:14:22,070
day is different and these are the

00:14:19,579 --> 00:14:24,940
variations we have for Debian for the

00:14:22,070 --> 00:14:28,610
other tests we have a bit less variation

00:14:24,940 --> 00:14:31,310
the corsets it's just work to do and

00:14:28,610 --> 00:14:33,860
it's mostly it's a lot me doing this and

00:14:31,310 --> 00:14:36,829
i'm working on eight distributions of it

00:14:33,860 --> 00:14:39,529
too much so i always ask for patches and

00:14:36,829 --> 00:14:42,440
people helping me works as freebsd open

00:14:39,529 --> 00:14:49,970
WT it works nicely with others not so

00:14:42,440 --> 00:14:53,269
nice and we know it settles already so

00:14:49,970 --> 00:14:56,360
the problems we found it's mostly time

00:14:53,269 --> 00:14:59,029
stems it's really time stems time stems

00:14:56,360 --> 00:15:01,310
all over and it's not so much time stems

00:14:59,029 --> 00:15:03,649
from the compilers but what time stems

00:15:01,310 --> 00:15:05,690
from documentation system every

00:15:03,649 --> 00:15:08,990
documentation system thinks it's a good

00:15:05,690 --> 00:15:10,910
idea to put the bill time stem or most

00:15:08,990 --> 00:15:13,160
of them bill times them in and often

00:15:10,910 --> 00:15:16,279
these time stem vary by the time so

00:15:13,160 --> 00:15:18,079
which is really annoying if you want to

00:15:16,279 --> 00:15:20,680
bid in different time since i'm not sure

00:15:18,079 --> 00:15:23,200
if you want to do this but we do this

00:15:20,680 --> 00:15:26,110
or timezone is the other common thing

00:15:23,200 --> 00:15:29,410
and locales locates also end up in the

00:15:26,110 --> 00:15:32,170
build heshes assorted differently by

00:15:29,410 --> 00:15:34,149
Birds sort order is different by Loki of

00:15:32,170 --> 00:15:36,490
different language has sought things

00:15:34,149 --> 00:15:39,910
differently not the alphabet but the

00:15:36,490 --> 00:15:45,779
other letters so and this all goes into

00:15:39,910 --> 00:15:48,220
the bid and everything else but

00:15:45,779 --> 00:15:50,320
everything ages maybe ten percent of the

00:15:48,220 --> 00:15:55,660
cases it's mostly as really simple stuff

00:15:50,320 --> 00:15:58,720
but it's just a lot of stuff and Luna

00:15:55,660 --> 00:16:02,709
gave a talk at the last CCC camp where

00:15:58,720 --> 00:16:10,630
he gave 30 examples of common problems

00:16:02,709 --> 00:16:12,880
like gzip normally has also puts lokale

00:16:10,630 --> 00:16:15,190
i think in there and you can just use d

00:16:12,880 --> 00:16:17,410
sub minus m and all these tricks what to

00:16:15,190 --> 00:16:19,959
do hourly not gonna stalk from there

00:16:17,410 --> 00:16:24,730
which has really good examples or in our

00:16:19,959 --> 00:16:27,010
documentation we also maybe I should go

00:16:24,730 --> 00:16:31,060
no I don't go first let's start with

00:16:27,010 --> 00:16:33,910
this one and then we wrote a tool differ

00:16:31,060 --> 00:16:37,440
scope differ scopus the tool we use to

00:16:33,910 --> 00:16:42,430
analyze the difference between two birds

00:16:37,440 --> 00:16:45,220
so it recurs recursively unpacks Debian

00:16:42,430 --> 00:16:48,010
package the debt which includes an R and

00:16:45,220 --> 00:16:50,170
inside we are our fires whatever there's

00:16:48,010 --> 00:16:54,010
a PDF in there so it goes into the PDF

00:16:50,170 --> 00:16:57,660
and finds the P&G in the PDF and gostrey

00:16:54,010 --> 00:17:01,390
cursor recursively thus comparison

00:16:57,660 --> 00:17:05,790
presents it nicely an HTML and it falls

00:17:01,390 --> 00:17:09,309
back to binary comparison um it's

00:17:05,790 --> 00:17:12,059
available in all major distributions I'm

00:17:09,309 --> 00:17:18,880
not sure whether it's in Susa already

00:17:12,059 --> 00:17:22,270
it's Tekkit for Susan yeah so and you

00:17:18,880 --> 00:17:25,300
can differ scope or is the main webpage

00:17:22,270 --> 00:17:27,250
and this is how the first group looks

00:17:25,300 --> 00:17:29,200
like those on the left is the first

00:17:27,250 --> 00:17:30,870
played on the others the second bit and

00:17:29,200 --> 00:17:33,150
you can see

00:17:30,870 --> 00:17:35,460
yes the version number leaked in there

00:17:33,150 --> 00:17:38,490
in the bottom and it were really nicely

00:17:35,460 --> 00:17:42,180
show it you can go to try different

00:17:38,490 --> 00:17:44,160
scope talk and just try it and in the

00:17:42,180 --> 00:17:45,800
beginning different scope was for Debian

00:17:44,160 --> 00:17:49,500
packages but now you can give it to

00:17:45,800 --> 00:17:52,770
objects you can give it to rpms to CD

00:17:49,500 --> 00:17:54,270
images to directories to PDFs given two

00:17:52,770 --> 00:17:57,030
things of the same type and it will

00:17:54,270 --> 00:17:59,490
compare it so dif coupe is also useful

00:17:57,030 --> 00:18:01,200
which is a byproduct if you have a new

00:17:59,490 --> 00:18:03,000
version of something and you want to see

00:18:01,200 --> 00:18:05,190
whether the difference in the binary is

00:18:03,000 --> 00:18:09,170
what you expect it is so it can also

00:18:05,190 --> 00:18:11,760
compare two different versions of it and

00:18:09,170 --> 00:18:15,750
different scope is just a tool for

00:18:11,760 --> 00:18:18,540
debugging but if you want reproduce the

00:18:15,750 --> 00:18:20,940
bullet means bit by bit identically so

00:18:18,540 --> 00:18:23,640
you don't analyze the difference you

00:18:20,940 --> 00:18:26,130
just the head of the binder of the

00:18:23,640 --> 00:18:28,620
object and if the head is not identical

00:18:26,130 --> 00:18:30,630
it's not reproducible and we only care

00:18:28,620 --> 00:18:32,400
for debugging using different school but

00:18:30,630 --> 00:18:34,020
really for the you for the question

00:18:32,400 --> 00:18:41,460
whether it's something reproducible or

00:18:34,020 --> 00:18:47,670
not just use sha256 some these LEDs are

00:18:41,460 --> 00:18:51,480
still hot so the other the main problem

00:18:47,670 --> 00:18:54,059
we have our time stems and Bill time

00:18:51,480 --> 00:18:58,170
stems are usually not really useful for

00:18:54,059 --> 00:19:00,300
the user because if you can build it at

00:18:58,170 --> 00:19:01,500
any time and you get the same result and

00:19:00,300 --> 00:19:05,850
the only difference is the big time

00:19:01,500 --> 00:19:07,980
stamp in there it's meaningless so we

00:19:05,850 --> 00:19:12,630
came up with saw state epoch which is

00:19:07,980 --> 00:19:15,390
the modifiable which towards the last

00:19:12,630 --> 00:19:18,540
modification of the source as I epoch

00:19:15,390 --> 00:19:20,820
since 1970 and this can be used instead

00:19:18,540 --> 00:19:22,860
of the current age because this is

00:19:20,820 --> 00:19:26,400
really what matters from when the

00:19:22,860 --> 00:19:32,040
sources it can also be used to feed

00:19:26,400 --> 00:19:36,050
random sins um and Debian we set it from

00:19:32,040 --> 00:19:36,050
the last debian change log entry

00:19:36,650 --> 00:19:41,660
in other cases it's been the last

00:19:39,710 --> 00:19:49,520
modification of the git repository or

00:19:41,660 --> 00:19:53,810
whatever metrics they are to set it but

00:19:49,520 --> 00:19:55,490
there's one thing wrong and because the

00:19:53,810 --> 00:19:58,040
other thing which you also need besides

00:19:55,490 --> 00:20:00,590
the date is the environment in which

00:19:58,040 --> 00:20:03,260
this biz so what's when you put it in

00:20:00,590 --> 00:20:05,000
his in the past when you put a big date

00:20:03,260 --> 00:20:07,850
in there you also wanted to make sure I

00:20:05,000 --> 00:20:10,550
built it on this date to express these

00:20:07,850 --> 00:20:12,950
libraries were used but we are recording

00:20:10,550 --> 00:20:17,870
the built environment anyway so this is

00:20:12,950 --> 00:20:20,960
also not useful for us and we had some

00:20:17,870 --> 00:20:24,890
success getting so state epoch accepted

00:20:20,960 --> 00:20:29,780
by other projects GCC is now using it

00:20:24,890 --> 00:20:31,970
for daytime Mac Pro's si Lang we also

00:20:29,780 --> 00:20:34,460
have a pet there's some documentation

00:20:31,970 --> 00:20:38,150
system have it we have patches for rpm

00:20:34,460 --> 00:20:40,790
it's the freebsd bill says freebsd build

00:20:38,150 --> 00:20:45,260
system is using it now so saw state

00:20:40,790 --> 00:20:47,750
epoch has been adapted i could say we

00:20:45,260 --> 00:20:50,270
wrote a specification the specification

00:20:47,750 --> 00:20:52,940
is two or three kilobyte X is really

00:20:50,270 --> 00:20:55,070
really short and which defines how it's

00:20:52,940 --> 00:20:57,700
defined how you should say that you can

00:20:55,070 --> 00:21:05,840
go to this specular I'll and read it

00:20:57,700 --> 00:21:09,650
it's it's it's um yeah suspect so what

00:21:05,840 --> 00:21:12,460
we did in debian this is the graph some

00:21:09,650 --> 00:21:17,560
of you might have seen in some point and

00:21:12,460 --> 00:21:22,070
as of yesterday where 89% reproducible

00:21:17,560 --> 00:21:24,350
in debian testing on i am only 64 the

00:21:22,070 --> 00:21:26,510
green ones are the reproducible ones the

00:21:24,350 --> 00:21:28,820
orange ones are the unrep reducible ones

00:21:26,510 --> 00:21:32,030
and the red are failing to build from

00:21:28,820 --> 00:21:33,620
source and the blacks are depends are

00:21:32,030 --> 00:21:35,360
not ready or the architecture the

00:21:33,620 --> 00:21:39,260
package is not for the architecture or

00:21:35,360 --> 00:21:41,240
something so and in testing we are even

00:21:39,260 --> 00:21:44,630
over ninety percent reproducible

00:21:41,240 --> 00:21:45,049
packages now which sounds nice but it

00:21:44,630 --> 00:21:47,779
still

00:21:45,049 --> 00:21:49,249
means that there's almost 3,000 packages

00:21:47,779 --> 00:21:55,340
which are not reproducible source

00:21:49,249 --> 00:21:59,980
packages and we have we categorized

00:21:55,340 --> 00:22:03,649
issues when we find them so we have a

00:21:59,980 --> 00:22:06,559
git repository in notes punkette where

00:22:03,649 --> 00:22:10,580
we have 206 different issues and I just

00:22:06,559 --> 00:22:14,840
checked out of these 200 693 are

00:22:10,580 --> 00:22:17,480
timestamp related and 39 are local and

00:22:14,840 --> 00:22:20,929
the 70 others are I don't know so we

00:22:17,480 --> 00:22:26,029
have 3216 nodes which are some issues we

00:22:20,929 --> 00:22:28,519
found on packages and we have 1800 and

00:22:26,029 --> 00:22:31,759
reproducible packages and sit but only

00:22:28,519 --> 00:22:33,320
200 without a note all the others we

00:22:31,759 --> 00:22:35,690
already looked at and put a note in

00:22:33,320 --> 00:22:38,749
there describing what the problem is or

00:22:35,690 --> 00:22:40,249
maybe some problem and the same for the

00:22:38,749 --> 00:22:43,399
packages which failed to build from

00:22:40,249 --> 00:22:45,440
source we maintain this in in a git

00:22:43,399 --> 00:22:48,889
repository as a simple young will file

00:22:45,440 --> 00:22:51,259
and at the moment it's Debian only but

00:22:48,889 --> 00:22:52,940
we've just made the specification how to

00:22:51,259 --> 00:22:54,859
change the syntax so that we can have

00:22:52,940 --> 00:22:57,259
crossed distro notes so I guess the next

00:22:54,859 --> 00:22:59,330
will be FreeBSD that previously puts in

00:22:57,259 --> 00:23:01,789
the notes because many issues are the

00:22:59,330 --> 00:23:03,710
same and different distribution there

00:23:01,789 --> 00:23:06,590
there are some which are specific to

00:23:03,710 --> 00:23:08,149
Debian specific to freebsd but most of

00:23:06,590 --> 00:23:10,730
them are the same because it's thus

00:23:08,149 --> 00:23:13,009
upstream problem so we want to merge

00:23:10,730 --> 00:23:22,149
this so that we can benefit from each

00:23:13,009 --> 00:23:25,369
other's work so these are examples of

00:23:22,149 --> 00:23:27,769
issues we found and I really I picked

00:23:25,369 --> 00:23:31,129
them randomly and as you can see it's

00:23:27,769 --> 00:23:33,830
time stamps x times timestamps and the

00:23:31,129 --> 00:23:36,350
other is face to build from source and

00:23:33,830 --> 00:23:39,980
an uninvestigated test failures because

00:23:36,350 --> 00:23:41,960
we constantly Debian we also find lots

00:23:39,980 --> 00:23:43,700
of lots of bucks packages failing to

00:23:41,960 --> 00:23:47,330
build from source against nua libraries

00:23:43,700 --> 00:23:50,269
we have a category for this so far we

00:23:47,330 --> 00:23:52,249
fired three thousand bucks I thing and

00:23:50,269 --> 00:23:54,600
half of them are fails to build from

00:23:52,249 --> 00:23:57,360
source more than half of them

00:23:54,600 --> 00:24:01,520
and we fired about thousand bucks about

00:23:57,360 --> 00:24:05,010
reproducible issues with patches more

00:24:01,520 --> 00:24:09,960
examples time stems in documentation

00:24:05,010 --> 00:24:14,520
system randomness and ICC color profiles

00:24:09,960 --> 00:24:17,730
who would think of that so for Debian

00:24:14,520 --> 00:24:20,549
you can just go to this URL it also

00:24:17,730 --> 00:24:21,900
works with a new one / sauce package

00:24:20,549 --> 00:24:23,880
name and it will show you how

00:24:21,900 --> 00:24:26,820
reproducible it is so if you go to

00:24:23,880 --> 00:24:29,010
reproducible Debian net / Firefox it

00:24:26,820 --> 00:24:30,809
will show you firefox the whole 50

00:24:29,010 --> 00:24:33,960
megabyte or what it is is bit by bit

00:24:30,809 --> 00:24:35,100
identical if you go to linux kernel you

00:24:33,960 --> 00:24:37,590
will see the difference cope has

00:24:35,100 --> 00:24:41,510
problems understanding the death but you

00:24:37,590 --> 00:24:47,360
can go to any package mysql whatever

00:24:41,510 --> 00:24:50,010
have a look and because debian has

00:24:47,360 --> 00:24:53,490
24,000 package service these are too

00:24:50,010 --> 00:24:57,419
many we have package sets so we have 42

00:24:53,490 --> 00:24:59,490
package sets now so we have required

00:24:57,419 --> 00:25:01,919
which is the base system in debian we

00:24:59,490 --> 00:25:04,289
have bit essential key packages another

00:25:01,919 --> 00:25:06,590
package set is all packages which ever

00:25:04,289 --> 00:25:10,140
had a security issue it's another thing

00:25:06,590 --> 00:25:13,260
we have to KDE you know'm we have all of

00:25:10,140 --> 00:25:16,650
camel or Java or note or whatever

00:25:13,260 --> 00:25:23,039
packages Haskell is also nice all is

00:25:16,650 --> 00:25:25,530
good with 90 / 95 reproducible and yeah

00:25:23,039 --> 00:25:27,900
required we have there's 10 packages

00:25:25,530 --> 00:25:30,570
missing where we have patches for

00:25:27,900 --> 00:25:32,880
another interesting thing is the Debian

00:25:30,570 --> 00:25:34,980
packages key packages are the ones

00:25:32,880 --> 00:25:37,080
running on the Debian infrastructure and

00:25:34,980 --> 00:25:42,659
being used to create the cds and are on

00:25:37,080 --> 00:25:44,730
the CD and I've there's 50 and a half

00:25:42,659 --> 00:25:47,520
thousand keep a coach's so quite a lot

00:25:44,730 --> 00:25:50,039
and you see it's a bit less than average

00:25:47,520 --> 00:25:52,650
because the good average comes from huge

00:25:50,039 --> 00:25:55,470
package collection like a pearl or the

00:25:52,650 --> 00:25:57,200
our packages which are all reproduce

00:25:55,470 --> 00:26:01,290
herbal so lame

00:25:57,200 --> 00:26:02,790
glories in the statistic a bit and the

00:26:01,290 --> 00:26:07,620
other problem is eighty-six percent

00:26:02,790 --> 00:26:09,870
sounds cool but 437 packages to fix is

00:26:07,620 --> 00:26:14,310
really lot because the author of these

00:26:09,870 --> 00:26:17,160
400 probably 40 are really hard and four

00:26:14,310 --> 00:26:21,360
are insanely hard i would guess just by

00:26:17,160 --> 00:26:25,020
guessing so there's four this is 400

00:26:21,360 --> 00:26:37,110
uploads to achieve that and still 40 are

00:26:25,020 --> 00:26:47,490
real hard problems I can repeat but you

00:26:37,110 --> 00:26:50,250
can also repeat hello just understand

00:26:47,490 --> 00:26:53,040
the graph so this means the key package

00:26:50,250 --> 00:26:55,830
is if it's on your infrastructure and

00:26:53,040 --> 00:26:59,270
it's green here is awesome package build

00:26:55,830 --> 00:27:01,650
testing which is key packagers trusts a

00:26:59,270 --> 00:27:03,420
specific set of packages which are

00:27:01,650 --> 00:27:06,120
important which are key to debbie is

00:27:03,420 --> 00:27:08,070
armed and these are all source packages

00:27:06,120 --> 00:27:10,770
and in general we have these package

00:27:08,070 --> 00:27:13,590
sets which have some areas like organ or

00:27:10,770 --> 00:27:16,440
packages I always thought and I'm

00:27:13,590 --> 00:27:19,800
wondering with what makes me this is

00:27:16,440 --> 00:27:22,290
does this mean this is already be

00:27:19,800 --> 00:27:24,510
deployed and from within the

00:27:22,290 --> 00:27:27,810
distribution is no this is at the moment

00:27:24,510 --> 00:27:29,880
we are all only doing QA i'll explain

00:27:27,810 --> 00:27:31,770
that in a second we are not really in

00:27:29,880 --> 00:27:35,660
debian yet but we can get these results

00:27:31,770 --> 00:27:39,240
and debian with three petrus basically

00:27:35,660 --> 00:27:43,260
and my point is just hear that there's

00:27:39,240 --> 00:27:46,680
400 packages doesn't sound too much but

00:27:43,260 --> 00:27:48,300
it's 400 packages sorts of other my

00:27:46,680 --> 00:27:52,910
point is eighty-six percent sounds great

00:27:48,300 --> 00:27:57,360
but 400 packages are still a lot and

00:27:52,910 --> 00:27:59,910
this is the debian bug tracker so we are

00:27:57,360 --> 00:28:02,280
we didn't we only fired thousand six

00:27:59,910 --> 00:28:03,059
hundred but these are the ones without

00:28:02,280 --> 00:28:04,740
face

00:28:03,059 --> 00:28:07,999
it from source so these are the bucks

00:28:04,740 --> 00:28:11,460
which are reproducible issues so it's

00:28:07,999 --> 00:28:14,009
1,600 bucks we've fired and roughly

00:28:11,460 --> 00:28:17,279
thousand are fixed and 600 patches are

00:28:14,009 --> 00:28:19,080
still waiting and then we fired more

00:28:17,279 --> 00:28:21,690
than thousand other bucks which are not

00:28:19,080 --> 00:28:24,419
in this graph about just come on fails

00:28:21,690 --> 00:28:27,419
to go from source issues and we try to

00:28:24,419 --> 00:28:29,549
always fire box with patches because at

00:28:27,419 --> 00:28:32,279
the moment it's just QA and it's just

00:28:29,549 --> 00:28:33,870
wish list so we just say yes the patch

00:28:32,279 --> 00:28:35,490
could you please apply it which I we

00:28:33,870 --> 00:28:39,029
don't file a buck this package is

00:28:35,490 --> 00:28:40,799
unreviewed rusev it better we only file

00:28:39,029 --> 00:28:44,809
it with you have a patch because if it

00:28:40,799 --> 00:28:44,809
son reproduce able it's visible anyway

00:28:45,139 --> 00:28:53,070
so what we did to achieve that we agreed

00:28:49,440 --> 00:28:55,649
on a fixed bill pass because many

00:28:53,070 --> 00:28:57,840
compilers embed the bait location in the

00:28:55,649 --> 00:28:59,639
product and Debian historically builds

00:28:57,840 --> 00:29:03,690
in a random location and we made it

00:28:59,639 --> 00:29:06,389
fixed to fix this decimal patch for GCC

00:29:03,690 --> 00:29:08,820
the GCC creates the same objects in

00:29:06,389 --> 00:29:10,710
arbitrary passes but other compilers

00:29:08,820 --> 00:29:13,470
don't do that so we'll have to stay with

00:29:10,710 --> 00:29:15,539
it for some time we record the built

00:29:13,470 --> 00:29:18,899
environment and built in for files I'll

00:29:15,539 --> 00:29:21,600
explain that in a second and we wrote

00:29:18,899 --> 00:29:24,749
strip non-determinism which is the tool

00:29:21,600 --> 00:29:28,019
which recognizes time stems mostly and

00:29:24,749 --> 00:29:30,090
removes them if they are if they are

00:29:28,019 --> 00:29:31,879
newer than the saw state I post because

00:29:30,090 --> 00:29:34,259
then they must come from the build

00:29:31,879 --> 00:29:36,539
banner has also packaged strip

00:29:34,259 --> 00:29:39,119
non-determinism forces are now so you

00:29:36,539 --> 00:29:42,119
could use that we have difference cope

00:29:39,119 --> 00:29:45,869
as a tool to analyze what the difference

00:29:42,119 --> 00:29:48,029
come from Shah said April ahead disorder

00:29:45,869 --> 00:29:51,539
FS is another testing tool which is a

00:29:48,029 --> 00:29:54,559
fun if user file system which returns

00:29:51,539 --> 00:29:57,570
random order of Riccio so you can test

00:29:54,559 --> 00:30:02,009
use this for testing and see whether it

00:29:57,570 --> 00:30:04,830
builds with different file system and we

00:30:02,009 --> 00:30:07,470
have now two packages modified in the

00:30:04,830 --> 00:30:11,549
archive which is oxygen and de package

00:30:07,470 --> 00:30:13,559
typically the rest is pure debian so we

00:30:11,549 --> 00:30:14,020
are not yet in debian fully we have

00:30:13,559 --> 00:30:16,480
these

00:30:14,020 --> 00:30:23,860
two packages modified we hope to get

00:30:16,480 --> 00:30:26,050
there this year so reproducible builds

00:30:23,860 --> 00:30:29,890
demanded defined build environment

00:30:26,050 --> 00:30:31,960
because and it's mandatory that it's

00:30:29,890 --> 00:30:33,190
possible to create the spirit

00:30:31,960 --> 00:30:37,090
environment because if you have

00:30:33,190 --> 00:30:39,490
different 2 chainz then its sheer luck

00:30:37,090 --> 00:30:42,670
whether you can recreate the same binary

00:30:39,490 --> 00:30:45,370
it might be that a different GCC version

00:30:42,670 --> 00:30:47,170
creates the same object but maybe not so

00:30:45,370 --> 00:30:52,020
you can only be sure if you install the

00:30:47,170 --> 00:30:56,800
exact same dependencies and so we

00:30:52,020 --> 00:30:58,720
created these bit info files verified

00:30:56,800 --> 00:31:02,230
this works for Debian was the spirit

00:30:58,720 --> 00:31:05,140
info files I know that code reform RPM

00:31:02,230 --> 00:31:07,330
is designed also to be able to recreate

00:31:05,140 --> 00:31:09,490
the exact same built environment I've

00:31:07,330 --> 00:31:11,620
not verified this and the quarry

00:31:09,490 --> 00:31:16,110
developer said we need documentation for

00:31:11,620 --> 00:31:18,970
that week's or geeks is another

00:31:16,110 --> 00:31:21,640
distribution kind of thing where this

00:31:18,970 --> 00:31:25,830
was a design goal and it works for them

00:31:21,640 --> 00:31:29,080
and I'd like to hear other stories about

00:31:25,830 --> 00:31:31,950
how it's done and other projects to

00:31:29,080 --> 00:31:35,950
explain this bit info file has the

00:31:31,950 --> 00:31:38,110
source files and the sexums has the the

00:31:35,950 --> 00:31:40,290
binaries and the check sums and the

00:31:38,110 --> 00:31:42,850
collections of the install dependencies

00:31:40,290 --> 00:31:45,910
so the idea is to take this bill info

00:31:42,850 --> 00:31:47,980
file recreate the exact same environment

00:31:45,910 --> 00:31:51,130
and then rebuild the binary and get the

00:31:47,980 --> 00:31:52,750
same results for Debian we are lucky

00:31:51,130 --> 00:31:54,940
because everything which was ever

00:31:52,750 --> 00:31:57,280
uploaded even if it was only updated for

00:31:54,940 --> 00:32:00,670
half a day is on snapshot debian org

00:31:57,280 --> 00:32:05,320
snapshot debian orc has 20 terabytes or

00:32:00,670 --> 00:32:10,390
something and it's has everything i know

00:32:05,320 --> 00:32:13,270
not every project has everything but i'm

00:32:10,390 --> 00:32:16,600
doing the debian work but it's clear

00:32:13,270 --> 00:32:19,960
that we have to solve it and this it's

00:32:16,600 --> 00:32:20,770
also the other thing is i'll leave the

00:32:19,960 --> 00:32:23,410
zone

00:32:20,770 --> 00:32:27,730
so--but info file is in the Debian case

00:32:23,410 --> 00:32:30,220
just the RCA 22 file as a format has the

00:32:27,730 --> 00:32:33,610
source package name binary architecture

00:32:30,220 --> 00:32:35,680
sources and here are the depends in this

00:32:33,610 --> 00:32:42,910
example the depends don't have checked

00:32:35,680 --> 00:32:46,120
Sam's they will get sexums as well we

00:32:42,910 --> 00:32:48,910
have not built in for sorry Debian

00:32:46,120 --> 00:32:51,430
invention but it's clear that other

00:32:48,910 --> 00:32:53,620
projects needs the same I would

00:32:51,430 --> 00:32:55,960
recommend to also call them build info

00:32:53,620 --> 00:32:59,280
fires as a different contents of the

00:32:55,960 --> 00:33:02,400
format but the principal will be same

00:32:59,280 --> 00:33:06,100
and it's clear that it needs to be done

00:33:02,400 --> 00:33:07,990
because you need to describe the input

00:33:06,100 --> 00:33:10,690
you give to the system and the output to

00:33:07,990 --> 00:33:12,580
be able to compare it so the bit and for

00:33:10,690 --> 00:33:15,280
files are the ones which users later

00:33:12,580 --> 00:33:17,470
download and can use to take the source

00:33:15,280 --> 00:33:24,160
and see if the binaries they create is

00:33:17,470 --> 00:33:27,190
the same so what else we have done we be

00:33:24,160 --> 00:33:30,700
right in weekly reports since may 2015

00:33:27,190 --> 00:33:32,890
so we had we put 60 just published which

00:33:30,700 --> 00:33:35,230
is the progress in debian but we also

00:33:32,890 --> 00:33:38,980
now include freebsd and upstream things

00:33:35,230 --> 00:33:40,990
in it we had the summit and a themes

00:33:38,980 --> 00:33:43,870
already talked about it we have another

00:33:40,990 --> 00:33:47,380
one this year again in europe maybe in

00:33:43,870 --> 00:33:49,510
germany if it's in summer and last year

00:33:47,380 --> 00:33:52,510
we had to google Summer of Code students

00:33:49,510 --> 00:33:55,270
this year we have 4g sock and outreach

00:33:52,510 --> 00:34:01,180
to students is really good contributions

00:33:55,270 --> 00:34:04,450
it's really nice that there are exist so

00:34:01,180 --> 00:34:08,159
Debian policy this is where we want to

00:34:04,450 --> 00:34:11,950
go sources must be reproducible binaries

00:34:08,159 --> 00:34:15,520
but will open this will happen after

00:34:11,950 --> 00:34:21,730
stretch and stretch this 2017 so this is

00:34:15,520 --> 00:34:24,280
I hope 2000 18 or 19 for now we want to

00:34:21,730 --> 00:34:30,580
have this child rapid with shall create

00:34:24,280 --> 00:34:32,230
reproducible binaries yeah and

00:34:30,580 --> 00:34:34,750
this is really just a proof of concept

00:34:32,230 --> 00:34:40,170
at the moment the moment debian is still

00:34:34,750 --> 00:34:42,700
zero percent reproducible it's just

00:34:40,170 --> 00:34:45,250
three or four patches but these patches

00:34:42,700 --> 00:34:49,090
are not merged for the fries we need to

00:34:45,250 --> 00:34:53,050
merge them now and also then the problem

00:34:49,090 --> 00:34:55,000
is debian doesn't rebuild the archives a

00:34:53,050 --> 00:34:57,070
duster so when we have this patches

00:34:55,000 --> 00:34:58,660
inside we still have zero percent

00:34:57,070 --> 00:35:01,240
reproducible because everything will

00:34:58,660 --> 00:35:04,480
need to be rebuilt to create this bit in

00:35:01,240 --> 00:35:06,970
for fire so other people can confirm

00:35:04,480 --> 00:35:12,010
this so without bid info fires there's

00:35:06,970 --> 00:35:14,230
nothing so we'll see I hope that debian

00:35:12,010 --> 00:35:18,540
stretch will be partially reproducible

00:35:14,230 --> 00:35:18,540
in a meaningful way whatever that means

00:35:22,080 --> 00:35:29,080
but then there's also the other thing

00:35:24,550 --> 00:35:31,990
how to reword bit info fire signing user

00:35:29,080 --> 00:35:35,500
twist this all need still needs design

00:35:31,990 --> 00:35:39,880
and code I explain bit more than a

00:35:35,500 --> 00:35:47,830
second but what time are signed we do I

00:35:39,880 --> 00:35:50,790
have time to so the first thing we did

00:35:47,830 --> 00:35:53,890
was a boot Corps boot as a free bios and

00:35:50,790 --> 00:35:57,550
it's now a hundred percent reproducible

00:35:53,890 --> 00:35:59,560
with the sea bios payload soco boot is a

00:35:57,550 --> 00:36:04,210
bios thing and lately load some Palos

00:35:59,560 --> 00:36:07,480
and with one with a usual payload or 250

00:36:04,210 --> 00:36:09,880
something different co boot by biases

00:36:07,480 --> 00:36:11,560
are hundred percent reproducible the

00:36:09,880 --> 00:36:14,110
problem is Prabhu doesn't release

00:36:11,560 --> 00:36:20,830
binaries so it's not here what to do

00:36:14,110 --> 00:36:23,590
there open wrt is also quite good the

00:36:20,830 --> 00:36:28,180
patches were up streamed and then open

00:36:23,590 --> 00:36:32,410
wrt decided to renew itself into this

00:36:28,180 --> 00:36:37,030
lead project so that is that stored

00:36:32,410 --> 00:36:39,790
their net PSD is also there are some

00:36:37,030 --> 00:36:40,870
patches accepted and this tomas klausner

00:36:39,790 --> 00:36:43,190
who did it

00:36:40,870 --> 00:36:48,700
was busy with other things though it's

00:36:43,190 --> 00:36:51,740
dog there but it's partly doable freebsd

00:36:48,700 --> 00:36:55,040
the base system the base system is the

00:36:51,740 --> 00:36:57,380
freebsd basic userland it's 250

00:36:55,040 --> 00:36:59,690
megabytes and there are three or four

00:36:57,380 --> 00:37:03,230
bits which are not reproducible but they

00:36:59,690 --> 00:37:05,570
have patches in 2013 somebody already

00:37:03,230 --> 00:37:07,550
did a test with their ports which are

00:37:05,570 --> 00:37:09,950
packages and they have sixty-three

00:37:07,550 --> 00:37:11,900
percent reproducible but then they

00:37:09,950 --> 00:37:16,130
stopped working on it and only last

00:37:11,900 --> 00:37:18,650
autumn it must pick this up and it will

00:37:16,130 --> 00:37:20,840
also soon build all the packages or the

00:37:18,650 --> 00:37:25,120
ports on this test set up so we have

00:37:20,840 --> 00:37:28,670
other numbers and more cooperation there

00:37:25,120 --> 00:37:31,820
fedora I set up simple tests of fedora

00:37:28,670 --> 00:37:33,920
but the RPM petras we are not there and

00:37:31,820 --> 00:37:37,400
I was too busy with other stuff so I

00:37:33,920 --> 00:37:39,500
left it there I know that the RPM format

00:37:37,400 --> 00:37:42,980
includes the bill time and the built

00:37:39,500 --> 00:37:45,980
host and a signature in the format so

00:37:42,980 --> 00:37:48,290
they need to be set to niall or other

00:37:45,980 --> 00:37:53,660
values bernard has some solution there

00:37:48,290 --> 00:38:01,670
and yeah I hope that I can take some

00:37:53,660 --> 00:38:04,310
pitches home and arch linux f droid is I

00:38:01,670 --> 00:38:06,230
leave it there's too many the zuzo

00:38:04,310 --> 00:38:08,840
starters you will hear very soon from

00:38:06,230 --> 00:38:12,650
bear not very much looking forward to

00:38:08,840 --> 00:38:15,620
that and there are more projects with

00:38:12,650 --> 00:38:19,550
known activities bitcoin and TOA explain

00:38:15,620 --> 00:38:22,240
signal also months ago made a blog post

00:38:19,550 --> 00:38:24,920
a tweet saying they were reproducible

00:38:22,240 --> 00:38:26,660
want to contact at us but window is

00:38:24,920 --> 00:38:29,600
waiting for the steep package patch to

00:38:26,660 --> 00:38:32,840
be matched geeks or nick so as electro

00:38:29,600 --> 00:38:36,020
bsd is a fork from freebsd which is

00:38:32,840 --> 00:38:38,330
reproducible already cubes tail sap

00:38:36,020 --> 00:38:41,180
before as they are all looking into this

00:38:38,330 --> 00:38:43,700
and there's also commercial for pilot

00:38:41,180 --> 00:38:46,820
every software which is doing this which

00:38:43,700 --> 00:38:48,520
is really funny guess which is that

00:38:46,820 --> 00:38:51,760
windows the source code is available

00:38:48,520 --> 00:38:54,040
medical devices in your body

00:38:51,760 --> 00:38:59,560
arms critical infrastructure like power

00:38:54,040 --> 00:39:03,280
plants cars gambling machines because

00:38:59,560 --> 00:39:06,670
the state collects Texas that's why and

00:39:03,280 --> 00:39:09,340
i think the other things medical devices

00:39:06,670 --> 00:39:11,940
safe driving cars power plants reproduce

00:39:09,340 --> 00:39:16,450
over boots would be really a good idea

00:39:11,940 --> 00:39:21,850
okay i don't know about openbsd and then

00:39:16,450 --> 00:39:24,100
too so what the future work the problem

00:39:21,850 --> 00:39:27,220
with these build info files we need bid

00:39:24,100 --> 00:39:29,410
info fights in the debian case for

00:39:27,220 --> 00:39:32,890
20,000 source packages for 10

00:39:29,410 --> 00:39:35,080
architectures and oil are any source

00:39:32,890 --> 00:39:37,690
probably hundred thousand new fires

00:39:35,080 --> 00:39:40,210
which is fifty percent fighting increase

00:39:37,690 --> 00:39:43,480
of the fires on the Morrow's which is a

00:39:40,210 --> 00:39:45,550
problem with the inodes and so it's just

00:39:43,480 --> 00:39:48,880
amount of fires and we need to find we

00:39:45,550 --> 00:39:51,340
want to distribute them also and we need

00:39:48,880 --> 00:39:53,650
detached signatures and we want several

00:39:51,340 --> 00:39:55,660
entities to sign it so i rebuild it and

00:39:53,650 --> 00:39:57,430
sign the bill info fire saying yes I

00:39:55,660 --> 00:40:00,400
could recreated you build it and sign it

00:39:57,430 --> 00:40:04,660
and we need to find a way revoking also

00:40:00,400 --> 00:40:06,850
and also this rebuild as thing has not

00:40:04,660 --> 00:40:12,490
really been thought how we do it that's

00:40:06,850 --> 00:40:14,170
basically no work done there's we could

00:40:12,490 --> 00:40:17,050
maybe thing in the Debian case

00:40:14,170 --> 00:40:19,960
individual developers sign some things

00:40:17,050 --> 00:40:21,600
but I don't think this will scare other

00:40:19,960 --> 00:40:24,370
thing we have rebuild us by large

00:40:21,600 --> 00:40:27,580
organizations pick your poison pick your

00:40:24,370 --> 00:40:29,080
friends whatever and and this thing is

00:40:27,580 --> 00:40:31,300
the good thing is we have different

00:40:29,080 --> 00:40:34,480
entities so the of the NSA and nays are

00:40:31,300 --> 00:40:36,430
and CCC and whatever or we could just to

00:40:34,480 --> 00:40:39,160
feed all of our rebuilds debian and

00:40:36,430 --> 00:40:43,120
Debian rivers opensuse and Zula rebuilds

00:40:39,160 --> 00:40:46,240
net PSD we need to think what is a good

00:40:43,120 --> 00:40:48,700
solution there and we need end user

00:40:46,240 --> 00:40:52,000
tools do you really want to install this

00:40:48,700 --> 00:40:53,920
unruh producible software do you want to

00:40:52,000 --> 00:40:56,740
bake those packages which unconfirmed

00:40:53,920 --> 00:40:58,330
sexums before installing and confirm

00:40:56,740 --> 00:41:00,850
it's reproducible

00:40:58,330 --> 00:41:04,690
how many science exams do you require to

00:41:00,850 --> 00:41:09,910
call a package reproducible and this

00:41:04,690 --> 00:41:13,270
this will differ and by whom it's so

00:41:09,910 --> 00:41:16,150
we've come a long way what we are still

00:41:13,270 --> 00:41:18,970
not there where we are is that we can

00:41:16,150 --> 00:41:22,840
probably do reproducible builds now but

00:41:18,970 --> 00:41:24,820
everything behind is open and it's not

00:41:22,840 --> 00:41:28,080
even really clear where we need to go

00:41:24,820 --> 00:41:34,060
and how do we get there but at least

00:41:28,080 --> 00:41:38,500
it's a possible road now yeah there's

00:41:34,060 --> 00:41:40,330
still lots of things to do so if you

00:41:38,500 --> 00:41:43,560
want to get involved as a software

00:41:40,330 --> 00:41:46,990
developer please merge our patches let's

00:41:43,560 --> 00:41:51,850
stop using Bill Gates please read about

00:41:46,990 --> 00:41:54,160
Sasuke depot you can also just what

00:41:51,850 --> 00:41:56,310
banner the test for yourself there's

00:41:54,160 --> 00:42:00,610
something twice compare the results

00:41:56,310 --> 00:42:03,850
there's lots of documentation we have

00:42:00,610 --> 00:42:06,670
two different IRC chat channels now we

00:42:03,850 --> 00:42:08,530
have one debian reproducible one

00:42:06,670 --> 00:42:10,270
reproducible builds but in general will

00:42:08,530 --> 00:42:12,340
come to the debian thing and we are

00:42:10,270 --> 00:42:14,800
happy to help anybody with anything

00:42:12,340 --> 00:42:18,340
reproducible we are not really Debbie

00:42:14,800 --> 00:42:20,860
and focused and you can also join the

00:42:18,340 --> 00:42:23,650
existing team it's really lots of fun

00:42:20,860 --> 00:42:27,130
it's very diverse group working on very

00:42:23,650 --> 00:42:28,990
different things like I should have said

00:42:27,130 --> 00:42:30,850
this I've not done any work on these

00:42:28,990 --> 00:42:32,980
pictures i wrote i think one or two

00:42:30,850 --> 00:42:34,240
patches doing reproducible things so i

00:42:32,980 --> 00:42:37,150
just work on this test infrastructure

00:42:34,240 --> 00:42:39,370
and gives talks and doing purchases done

00:42:37,150 --> 00:42:43,810
by other people who are not working on

00:42:39,370 --> 00:42:51,720
the infrastructure and there's many

00:42:43,810 --> 00:42:55,680
things to do so do you have questions

00:42:51,720 --> 00:42:55,680
these are the URLs

00:42:59,440 --> 00:43:06,590
the question how much respect we got not

00:43:03,470 --> 00:43:08,360
so much there's quite frequent there

00:43:06,590 --> 00:43:11,420
people but I want my birthday it's

00:43:08,360 --> 00:43:14,300
important but then you explain them yeah

00:43:11,420 --> 00:43:16,160
well we have it it's not meaningful the

00:43:14,300 --> 00:43:21,260
birth date and you explain it and

00:43:16,160 --> 00:43:23,990
usually people understand so I would not

00:43:21,260 --> 00:43:26,090
say we have much pushback avada we have

00:43:23,990 --> 00:43:28,670
lots of lots of people join English and

00:43:26,090 --> 00:43:32,320
we have thousand patches accepted which

00:43:28,670 --> 00:43:32,320
in debian context was quite a lot

00:43:33,310 --> 00:43:40,400
question if i get it built info is not

00:43:37,340 --> 00:43:43,760
part of the package right so my question

00:43:40,400 --> 00:43:46,900
is why it should be the question was

00:43:43,760 --> 00:43:51,650
whether why built info is not part yeah

00:43:46,900 --> 00:43:55,280
did in for is a perpetually road for de

00:43:51,650 --> 00:43:58,670
package and the de packets maintainer is

00:43:55,280 --> 00:44:01,160
very careful cause de packet is used by

00:43:58,670 --> 00:44:04,930
other projects not only 12 but many

00:44:01,160 --> 00:44:09,100
other products so he wants to have it

00:44:04,930 --> 00:44:12,950
detailed first and he's really really

00:44:09,100 --> 00:44:15,110
slow to accept pictures he took half of

00:44:12,950 --> 00:44:19,880
hot hatches already there's a name new

00:44:15,110 --> 00:44:21,710
release coming soon and and it's also in

00:44:19,880 --> 00:44:24,950
the beginning we had this bit info fires

00:44:21,710 --> 00:44:26,630
recording the information I had on the

00:44:24,950 --> 00:44:28,520
slides and we have now come that we also

00:44:26,630 --> 00:44:33,950
might want to record more of the

00:44:28,520 --> 00:44:37,580
environment and so he isn't very careful

00:44:33,950 --> 00:44:39,560
and I think the agreement we have now is

00:44:37,580 --> 00:44:42,460
that he will include this baton for

00:44:39,560 --> 00:44:44,930
files and they bit of a files have a

00:44:42,460 --> 00:44:48,290
format version and that would be format

00:44:44,930 --> 00:44:51,650
version i don't know 0.1 or something so

00:44:48,290 --> 00:44:54,980
that we get but as we have to be

00:44:51,650 --> 00:44:58,640
discussing with sims since last August

00:44:54,980 --> 00:45:00,770
it's June also since 10 months and I

00:44:58,640 --> 00:45:03,410
could also say I'm a bit disappointed

00:45:00,770 --> 00:45:05,720
about how fast these patches are merged

00:45:03,410 --> 00:45:08,420
but i still hope these patches will get

00:45:05,720 --> 00:45:10,070
in in the next four months it's the

00:45:08,420 --> 00:45:10,970
problem is in debian de packet is

00:45:10,070 --> 00:45:14,300
maintained by

00:45:10,970 --> 00:45:18,290
person and that person is not as fast as

00:45:14,300 --> 00:45:21,050
we would like so plan is to include it

00:45:18,290 --> 00:45:22,790
into the packages it will be included

00:45:21,050 --> 00:45:25,280
yes he's also in favor of it in

00:45:22,790 --> 00:45:36,020
principle at us the pet should be nicer

00:45:25,280 --> 00:45:38,900
here there okay thank you okay you're

00:45:36,020 --> 00:45:42,200
there did you ask it should be part of

00:45:38,900 --> 00:45:46,060
that package or now that the big debate

00:45:42,200 --> 00:45:49,220
info will be part of the build reside

00:45:46,060 --> 00:45:51,800
when you build a Debian package now you

00:45:49,220 --> 00:45:54,170
get dep fires with other binary packages

00:45:51,800 --> 00:45:56,480
and you get one changes file which

00:45:54,170 --> 00:45:59,810
describes the build resides as the check

00:45:56,480 --> 00:46:01,970
sum of all of this and so in future when

00:45:59,810 --> 00:46:05,330
you build you will get depths it changes

00:46:01,970 --> 00:46:06,590
file and a bit info file but I was just

00:46:05,330 --> 00:46:13,010
pulling out you are your answer a

00:46:06,590 --> 00:46:17,270
different question I know you cannot do

00:46:13,010 --> 00:46:22,940
that because then you would modify the

00:46:17,270 --> 00:46:26,300
binary file I think it's what was yeah

00:46:22,940 --> 00:46:30,400
of course the big info fire describes

00:46:26,300 --> 00:46:30,400
the binaries that cannot be part of it

00:46:33,440 --> 00:46:38,760
no it has to check some of the result so

00:46:36,810 --> 00:46:43,020
if you included that would modify the

00:46:38,760 --> 00:46:45,540
checksum yeah so only kick some of

00:46:43,020 --> 00:46:47,610
result is it's tricky part let's solve

00:46:45,540 --> 00:46:49,380
this later at the bar it's but it's

00:46:47,610 --> 00:47:01,080
technically not possible to include it

00:46:49,380 --> 00:47:03,120
yeah yeah final chick zombies oh right

00:47:01,080 --> 00:47:04,890
we also have a Twitter account now for

00:47:03,120 --> 00:47:08,130
those into twitter you can follow us

00:47:04,890 --> 00:47:10,710
there Twitter well our food I would

00:47:08,130 --> 00:47:12,600
like to point out that in rpm packages

00:47:10,710 --> 00:47:15,090
we also put the checksum off the package

00:47:12,600 --> 00:47:17,970
itself into the package so it definitely

00:47:15,090 --> 00:47:20,310
does work for something where you but

00:47:17,970 --> 00:47:24,030
that's the check some of the content in

00:47:20,310 --> 00:47:25,800
the RP it's not that it doesn't include

00:47:24,030 --> 00:47:28,080
the other check son but we can really

00:47:25,800 --> 00:47:30,570
indeed in packages you only in a debian

00:47:28,080 --> 00:47:33,030
file you have to separate fun just like

00:47:30,570 --> 00:47:36,380
the control part and the data part and

00:47:33,030 --> 00:47:39,780
you could just build ejections of those

00:47:36,380 --> 00:47:42,690
no because we want the binaries I'd

00:47:39,780 --> 00:47:45,420
should be the same what what what we can

00:47:42,690 --> 00:47:47,670
do in the Susa are in the RPM case which

00:47:45,420 --> 00:47:49,530
includes these signatures and which are

00:47:47,670 --> 00:47:52,020
private sicknesses so if you want to

00:47:49,530 --> 00:47:54,030
reapply them you can just use the

00:47:52,020 --> 00:48:00,290
detached signature and put them against

00:47:54,030 --> 00:48:02,870
but you cannot do the other thing I'm

00:48:00,290 --> 00:48:06,710
happy to discuss this later but I

00:48:02,870 --> 00:48:06,710
sweating and I would like to get off

00:48:14,620 --> 00:48:18,610

YouTube URL: https://www.youtube.com/watch?v=65eDYwNqW-I


