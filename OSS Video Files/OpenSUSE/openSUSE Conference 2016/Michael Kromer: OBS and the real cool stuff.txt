Title: Michael Kromer: OBS and the real cool stuff
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/852-obs-and-the-real-cool-stuff

OBS (Open Build Service) is an awesome piece of software which is yet unmatched by other available software suites. This talk shows how Kopano approached the change in their build system, and how they integrated fully fledged build requirements into OBS. From adding real custom distributions such as Collax (just using DEB, without bootstrapping at all) to integrating with Atlassian Stash - All this is possible with OBS and much more. How did we make OBS accessible for Windows users (using osc), how did we make sure we can make a sane structure based on build-time requirements for packages and not just include everything for distribution in the end? Where can I use curl requests, and how are they structured. And did you know there are authentication tokens? This talk delivers the answers to these questions. This talk will include a QA session in the end with the chance to give an answer on many (unfortunately also undocumented) features.

Michael Kromer
Captions: 
	00:00:07,860 --> 00:00:15,760
okay yeah thanks for coming on glad to

00:00:13,719 --> 00:00:20,140
hear I extra put my shirt with a tie on

00:00:15,760 --> 00:00:23,770
so I really wanted to look good fashion

00:00:20,140 --> 00:00:26,470
for you so my talk is about OBS and the

00:00:23,770 --> 00:00:30,160
real cool stuff I must say I'm quite

00:00:26,470 --> 00:00:35,320
biased because i really love OBS and

00:00:30,160 --> 00:00:36,850
what is capable of and we as copano we

00:00:35,320 --> 00:00:38,559
were in a search of a new build system

00:00:36,850 --> 00:00:42,579
which is efficient and fulfills our

00:00:38,559 --> 00:00:45,969
requirements and yeah it was not hard to

00:00:42,579 --> 00:00:48,460
choose OBS in that regard so smart small

00:00:45,969 --> 00:00:51,190
agenda so I want to show you what who is

00:00:48,460 --> 00:00:53,949
copÃ¡n and what we're actually doing what

00:00:51,190 --> 00:00:57,879
our requirements were what we did before

00:00:53,949 --> 00:01:00,639
which is quite funny yeah why we're

00:00:57,879 --> 00:01:03,459
using OBS what is really awesome about

00:01:00,639 --> 00:01:06,310
it and cool stuff you might not know so

00:01:03,459 --> 00:01:08,140
I'm certain does this opensuse

00:01:06,310 --> 00:01:10,630
conference right so a lot of developers

00:01:08,140 --> 00:01:13,960
here was likely a dhryn is also sitting

00:01:10,630 --> 00:01:16,030
somewhere and many others I bet there

00:01:13,960 --> 00:01:20,200
are people here that know more about OBS

00:01:16,030 --> 00:01:24,700
than i do but it's I think quite a good

00:01:20,200 --> 00:01:27,340
insight and I must add that is one thing

00:01:24,700 --> 00:01:29,140
you can call it a running gag which I

00:01:27,340 --> 00:01:32,560
even encountered two days ago here at

00:01:29,140 --> 00:01:34,990
the conference was like guys what about

00:01:32,560 --> 00:01:37,450
documentation there's a big question

00:01:34,990 --> 00:01:40,510
mark behind it so there is so much not

00:01:37,450 --> 00:01:42,910
really documented of OBS which is very

00:01:40,510 --> 00:01:46,960
unfortunate and also one of the reasons

00:01:42,910 --> 00:01:49,750
why yeah I try to find some ways in

00:01:46,960 --> 00:01:51,520
getting this better yeah it always

00:01:49,750 --> 00:01:53,530
starts with yourself so I offered myself

00:01:51,520 --> 00:01:55,659
here for help as well and I think this

00:01:53,530 --> 00:02:01,390
product really deserves it you'll see it

00:01:55,659 --> 00:02:03,550
so yeah we use OBS what our requirements

00:02:01,390 --> 00:02:07,510
so essentially we're now in the

00:02:03,550 --> 00:02:09,789
communication world for ya close over 10

00:02:07,510 --> 00:02:11,260
years now we're the only open source map

00:02:09,789 --> 00:02:13,120
implementation in the world and I'm

00:02:11,260 --> 00:02:15,099
talking real mapi so everything

00:02:13,120 --> 00:02:16,780
regarding moppy attributes the whole not

00:02:15,099 --> 00:02:18,970
be based structure

00:02:16,780 --> 00:02:21,790
all the map he attributes that you can

00:02:18,970 --> 00:02:24,730
literally set for an object that's one

00:02:21,790 --> 00:02:27,670
hundred percent in our solution our

00:02:24,730 --> 00:02:30,069
motto is like sharing a communications

00:02:27,670 --> 00:02:31,810
offer for professionals so yeah everyone

00:02:30,069 --> 00:02:33,840
can set up a tough cut and just have

00:02:31,810 --> 00:02:36,970
like a Thunderbird slab to it but

00:02:33,840 --> 00:02:38,200
traditionally yeah the more efficient

00:02:36,970 --> 00:02:40,270
you want to get the more features you

00:02:38,200 --> 00:02:42,069
need as in calendaring and really

00:02:40,270 --> 00:02:45,520
professional calendaring with invites

00:02:42,069 --> 00:02:49,269
and with time zone problems that you

00:02:45,520 --> 00:02:51,580
have to come over and I'm saying this

00:02:49,269 --> 00:02:54,630
because capanna core or copano in

00:02:51,580 --> 00:02:58,120
general is just what is rafa used to be

00:02:54,630 --> 00:02:59,590
at least for open source so we had quite

00:02:58,120 --> 00:03:01,630
some clothes source components

00:02:59,590 --> 00:03:03,760
beforehand and now literally almost

00:03:01,630 --> 00:03:07,720
everything is open source now completely

00:03:03,760 --> 00:03:10,569
under a GPL and our business model

00:03:07,720 --> 00:03:12,010
essentially yeah subscription base just

00:03:10,569 --> 00:03:14,440
likes user just like red hat nothing

00:03:12,010 --> 00:03:16,569
special here so we provide support

00:03:14,440 --> 00:03:20,680
professional services tested binaries

00:03:16,569 --> 00:03:25,480
and extras so since we exist now for 10

00:03:20,680 --> 00:03:28,120
years all kinds of people have yeah

00:03:25,480 --> 00:03:29,980
Pacific requirements I mean it's very

00:03:28,120 --> 00:03:32,709
hard to go to to an environment and say

00:03:29,980 --> 00:03:35,019
yeah you can only sell your product

00:03:32,709 --> 00:03:36,670
potentially to one platform of course

00:03:35,019 --> 00:03:40,269
that would make life easier right if you

00:03:36,670 --> 00:03:44,560
just provide rpms but we have such a

00:03:40,269 --> 00:03:47,109
diverse yep diverse customer base that

00:03:44,560 --> 00:03:50,019
we literally have to come up with all

00:03:47,109 --> 00:03:52,390
kinds of funny things from a debian of

00:03:50,019 --> 00:03:55,180
course which is not funny but really

00:03:52,390 --> 00:03:57,190
rels less a boon to everything and even

00:03:55,180 --> 00:03:59,709
to special things which is kool x + 1 a

00:03:57,190 --> 00:04:04,570
just just a question to the audience

00:03:59,709 --> 00:04:07,680
does anyone know here what call axes so

00:04:04,570 --> 00:04:10,570
it does anyone know what univ engine is

00:04:07,680 --> 00:04:13,450
okay there's more so you know vention

00:04:10,570 --> 00:04:15,519
and coax have some similarities so it's

00:04:13,450 --> 00:04:18,039
an own spin of your own type of

00:04:15,519 --> 00:04:20,200
distribution the problem is it is not

00:04:18,039 --> 00:04:21,850
comparable from a from a spread

00:04:20,200 --> 00:04:24,700
perspective yet we do have a good

00:04:21,850 --> 00:04:27,130
partnership with call X and this product

00:04:24,700 --> 00:04:28,430
in in general it's it's not so bad but

00:04:27,130 --> 00:04:31,310
it has its own

00:04:28,430 --> 00:04:34,970
own archives has has everything on its

00:04:31,310 --> 00:04:37,610
own it's not using just like plain based

00:04:34,970 --> 00:04:40,460
on debian things so you have to do

00:04:37,610 --> 00:04:42,500
certain things to support that and we

00:04:40,460 --> 00:04:44,060
also have one distributor in the

00:04:42,500 --> 00:04:46,699
netherlands actually very good partner

00:04:44,060 --> 00:04:50,690
of ours they for whatever reason don't

00:04:46,699 --> 00:04:53,000
ask me chosen slackware as a platform so

00:04:50,690 --> 00:04:54,650
slackware is like everything put

00:04:53,000 --> 00:04:56,030
everything into tar.gz ettes and just

00:04:54,650 --> 00:04:58,880
unpacked them to the target and you good

00:04:56,030 --> 00:05:00,380
so that's like see me package management

00:04:58,880 --> 00:05:02,810
and of course you want to build

00:05:00,380 --> 00:05:06,289
something for that as well our goal was

00:05:02,810 --> 00:05:07,880
to find things that we can you know that

00:05:06,289 --> 00:05:09,229
we don't have a build system that builds

00:05:07,880 --> 00:05:11,150
like for these platforms and these

00:05:09,229 --> 00:05:13,580
platforms and these platforms want to

00:05:11,150 --> 00:05:15,349
have a unified solution so yeah this

00:05:13,580 --> 00:05:18,410
sounds a little bit like bingo

00:05:15,349 --> 00:05:20,090
but if you execute on this you do quite

00:05:18,410 --> 00:05:23,780
a good job and you can deliver quite

00:05:20,090 --> 00:05:25,400
good on quality so continuous

00:05:23,780 --> 00:05:27,289
integration as in really that you have

00:05:25,400 --> 00:05:29,090
your your development steps in your

00:05:27,289 --> 00:05:31,910
process well defined and well-executed

00:05:29,090 --> 00:05:33,349
continuous delivery as in you deploy

00:05:31,910 --> 00:05:36,710
your software in such a way that when

00:05:33,349 --> 00:05:39,919
you yeah provide a patch that it's quite

00:05:36,710 --> 00:05:41,870
available instantly one problem that we

00:05:39,919 --> 00:05:46,099
really had was 100% reproducible build

00:05:41,870 --> 00:05:47,900
and yeah the tizen with the change route

00:05:46,099 --> 00:05:49,970
build environment and we want to have it

00:05:47,900 --> 00:05:53,750
scalable and fast because we seriously

00:05:49,970 --> 00:05:57,849
had scalability issues so what do we

00:05:53,750 --> 00:06:00,289
have two years ago and just this list

00:05:57,849 --> 00:06:03,860
doesn't look that long but you can

00:06:00,289 --> 00:06:06,800
expect that it was heck a lot of work so

00:06:03,860 --> 00:06:10,130
yeah indeed we exist now for over 10

00:06:06,800 --> 00:06:12,139
years so we started with svn and our

00:06:10,130 --> 00:06:16,759
problem is is that we also have parts

00:06:12,139 --> 00:06:19,789
that are built from windows and the only

00:06:16,759 --> 00:06:22,460
way how you can really yeah control it

00:06:19,789 --> 00:06:25,759
really well as is that you use svn or at

00:06:22,460 --> 00:06:29,810
the time I mean I mean get ten years ago

00:06:25,759 --> 00:06:31,699
think about it and then we had really

00:06:29,810 --> 00:06:33,169
manually created change route

00:06:31,699 --> 00:06:35,270
environments so essentially when a new

00:06:33,169 --> 00:06:37,610
release came out when r l 7 popped out

00:06:35,270 --> 00:06:40,130
of the bottom we just make like an

00:06:37,610 --> 00:06:41,630
install we got this change route and we

00:06:40,130 --> 00:06:42,830
executed everything in those

00:06:41,630 --> 00:06:44,720
change route builds a little bit like

00:06:42,830 --> 00:06:46,970
the principle of what lbs actually does

00:06:44,720 --> 00:06:50,270
but just an aesthetic wait so we do it

00:06:46,970 --> 00:06:52,310
once not with every build that was a

00:06:50,270 --> 00:06:54,650
heck a lot of error prone I mean we're

00:06:52,310 --> 00:06:56,930
talking about a developer new oh I I

00:06:54,650 --> 00:06:58,970
just updated G proof tools for instance

00:06:56,930 --> 00:07:01,820
but he forgot one distribution and so

00:06:58,970 --> 00:07:03,200
you got diverse diverse results at the

00:07:01,820 --> 00:07:06,170
customer and of course this isn't

00:07:03,200 --> 00:07:08,270
something that you really don't want we

00:07:06,170 --> 00:07:10,190
didn't have any repositories yeah we

00:07:08,270 --> 00:07:13,010
could have provided them as an extra

00:07:10,190 --> 00:07:16,160
extra extra step behind are all of our

00:07:13,010 --> 00:07:17,510
bills but you know in our delivery we

00:07:16,160 --> 00:07:20,450
didn't have this continuous delivery

00:07:17,510 --> 00:07:23,570
mentality so why making repositories if

00:07:20,450 --> 00:07:27,290
you don't deliver really as as you would

00:07:23,570 --> 00:07:29,900
expect nowadays also what was quite a

00:07:27,290 --> 00:07:32,360
problem was that we had entirely

00:07:29,900 --> 00:07:34,160
separated builds that is we have a

00:07:32,360 --> 00:07:37,730
component called archiver for instance

00:07:34,160 --> 00:07:40,370
so archiver and core shares some

00:07:37,730 --> 00:07:43,010
libraries and when these two components

00:07:40,370 --> 00:07:45,650
are built as in chronically because you

00:07:43,010 --> 00:07:48,230
they're still separate products but same

00:07:45,650 --> 00:07:50,810
library shared libraries so when you up

00:07:48,230 --> 00:07:53,510
when you when you say build this now

00:07:50,810 --> 00:07:55,880
build archiver and you have a core which

00:07:53,510 --> 00:07:58,010
is not released in tandem then you could

00:07:55,880 --> 00:07:59,480
get into issues regarding changes of

00:07:58,010 --> 00:08:02,660
those libraries of course is something

00:07:59,480 --> 00:08:04,760
that you want to prevent yeah for every

00:08:02,660 --> 00:08:06,800
release we have a huge amount of manual

00:08:04,760 --> 00:08:10,430
labor that we had to do and a huge

00:08:06,800 --> 00:08:13,430
checklist as well and we had no OBS

00:08:10,430 --> 00:08:18,200
whatsoever also the problem regarding

00:08:13,430 --> 00:08:21,650
OBS is a little bit of cited OBS loves

00:08:18,200 --> 00:08:25,070
Suzy obviously the problem is is that in

00:08:21,650 --> 00:08:28,520
our company they're like two people who

00:08:25,070 --> 00:08:32,120
really do Susie stuff nobody else and

00:08:28,520 --> 00:08:34,310
that is quite a problem to you know so

00:08:32,120 --> 00:08:36,590
people this is awesome you really gotta

00:08:34,310 --> 00:08:38,840
use it and they say like us it soothes

00:08:36,590 --> 00:08:40,490
right yeah it's not that they say they

00:08:38,840 --> 00:08:43,640
don't like Susie but they never touched

00:08:40,490 --> 00:08:47,690
it really so there was quite some work

00:08:43,640 --> 00:08:49,760
to do there so let's go through a little

00:08:47,690 --> 00:08:51,470
bit the requirements here's a little bit

00:08:49,760 --> 00:08:52,850
an overview I do I know it looks a

00:08:51,470 --> 00:08:54,180
little bit cluttered and a lot but

00:08:52,850 --> 00:08:57,060
that's also the strength

00:08:54,180 --> 00:09:00,029
kapaa no because it has this extreme

00:08:57,060 --> 00:09:02,360
modularity we have customers with 50 60

00:09:00,029 --> 00:09:04,860
thousand users running in parallel and

00:09:02,360 --> 00:09:07,529
you can only make that happen by

00:09:04,860 --> 00:09:09,450
splitting up certain roles so did you

00:09:07,529 --> 00:09:11,490
say that for instance that the mail

00:09:09,450 --> 00:09:13,500
delivery from spooler and DEA agent or

00:09:11,490 --> 00:09:16,880
separate two different nodes that you

00:09:13,500 --> 00:09:19,380
have your mobile devices actually on a

00:09:16,880 --> 00:09:21,470
different endpoint web server because I

00:09:19,380 --> 00:09:24,320
mean when we're talking 50,000 users

00:09:21,470 --> 00:09:26,970
concurrent then you must know that

00:09:24,320 --> 00:09:29,250
50,000 TCP sessions web server you're

00:09:26,970 --> 00:09:32,010
getting a problem so you need to have to

00:09:29,250 --> 00:09:33,570
have this ability of distribution the

00:09:32,010 --> 00:09:35,279
good thing about this is is that

00:09:33,570 --> 00:09:37,470
everything you can see here can also run

00:09:35,279 --> 00:09:39,870
on one node easily I can mean this can

00:09:37,470 --> 00:09:41,850
even run on an arm just a Raspberry Pi

00:09:39,870 --> 00:09:44,010
fire it up and you're good but the

00:09:41,850 --> 00:09:45,540
problem but but the idea is is is still

00:09:44,010 --> 00:09:47,010
that you have a lot of components and

00:09:45,540 --> 00:09:50,040
you have to have the relations to them

00:09:47,010 --> 00:09:51,990
you have to have two shared libraries

00:09:50,040 --> 00:09:55,110
working with each other and a binary is

00:09:51,990 --> 00:09:57,570
using them so our requirement was we

00:09:55,110 --> 00:10:00,720
want to have something that does a lot

00:09:57,570 --> 00:10:02,459
for us and in fact OBS does that by

00:10:00,720 --> 00:10:05,250
essentially having automatic requires

00:10:02,459 --> 00:10:06,779
simple visibilities and many other

00:10:05,250 --> 00:10:08,550
mechanisms where you can really just

00:10:06,779 --> 00:10:11,880
make sure that or that the tags that

00:10:08,550 --> 00:10:16,290
you're using match to each other so here

00:10:11,880 --> 00:10:19,440
we good next thing was we were primarily

00:10:16,290 --> 00:10:25,459
only on the 64 bit stream and 64 and 32

00:10:19,440 --> 00:10:29,610
bit obviously so I 56 i586 and X 686 64

00:10:25,459 --> 00:10:31,980
but our goal was also to ya be able at

00:10:29,610 --> 00:10:33,900
least at least for community reasons to

00:10:31,980 --> 00:10:35,790
provide builds for other platforms as

00:10:33,900 --> 00:10:37,709
well here you can see power 8 here you

00:10:35,790 --> 00:10:41,010
can see arm you can see even mainframe

00:10:37,709 --> 00:10:44,100
and this is actually just a snapshot

00:10:41,010 --> 00:10:46,829
that I made tonight so yeah not much

00:10:44,100 --> 00:10:48,480
happening tonight but in fact we really

00:10:46,829 --> 00:10:52,860
need this power so there are quite some

00:10:48,480 --> 00:10:56,520
good quite some good workers there so

00:10:52,860 --> 00:10:59,399
architectures yes no problem the next

00:10:56,520 --> 00:11:02,160
thing was we have a real communication

00:10:59,399 --> 00:11:06,120
stack and this communication stack is

00:11:02,160 --> 00:11:07,440
defined also by sink single products so

00:11:06,120 --> 00:11:09,390
for instance

00:11:07,440 --> 00:11:13,080
we have a product called archiver an

00:11:09,390 --> 00:11:14,910
archiver you don't necessarily need it's

00:11:13,080 --> 00:11:17,430
just something that someone needs when

00:11:14,910 --> 00:11:19,350
he's archiving so it's literally for us

00:11:17,430 --> 00:11:21,450
it's like a separate product we don't

00:11:19,350 --> 00:11:23,130
say you have to install our cover is not

00:11:21,450 --> 00:11:24,330
a necessity to install this component

00:11:23,130 --> 00:11:26,730
and that's why I probably provide

00:11:24,330 --> 00:11:29,850
separate repositories for these and it

00:11:26,730 --> 00:11:32,880
also allows us to have a straightforward

00:11:29,850 --> 00:11:35,400
and independent release management

00:11:32,880 --> 00:11:38,370
meaning a web app for instance is quite

00:11:35,400 --> 00:11:41,970
fast in development terms so web always

00:11:38,370 --> 00:11:44,250
get reese's quite fast updates and

00:11:41,970 --> 00:11:47,190
course sometimes lacks a little bit

00:11:44,250 --> 00:11:49,260
behind in that regard so we are able

00:11:47,190 --> 00:11:51,960
like to release web app independently

00:11:49,260 --> 00:11:53,520
from core in a quite good way and we

00:11:51,960 --> 00:11:56,310
wanted to have this like in a

00:11:53,520 --> 00:11:58,650
product-based scheme because our team is

00:11:56,310 --> 00:12:00,600
quite distributed you could compare it

00:11:58,650 --> 00:12:04,020
if you take the suited terminology like

00:12:00,600 --> 00:12:06,390
Suzy linux enterprise server and high

00:12:04,020 --> 00:12:08,280
availability extension they are also

00:12:06,390 --> 00:12:12,480
released in tandems but the updates are

00:12:08,280 --> 00:12:15,720
separately released so that was also

00:12:12,480 --> 00:12:18,930
quite good now we come to the special

00:12:15,720 --> 00:12:21,900
requirements collection slackware

00:12:18,930 --> 00:12:24,290
believe me that was quite a nightmare in

00:12:21,900 --> 00:12:28,590
the beginning but in the end it was like

00:12:24,290 --> 00:12:32,340
awesome then we used a hole at lation

00:12:28,590 --> 00:12:34,170
stack so at lation is I mean they have

00:12:32,340 --> 00:12:36,300
great products we use Jarrah we use

00:12:34,170 --> 00:12:40,200
confluence we use stash which is now

00:12:36,300 --> 00:12:42,300
called bitbucket and we wanted to

00:12:40,200 --> 00:12:45,150
integrate it in a most sane way so

00:12:42,300 --> 00:12:46,680
continuous delivery and or continuous

00:12:45,150 --> 00:12:49,050
integration is defined by the fact that

00:12:46,680 --> 00:12:51,089
when you commit something you instantly

00:12:49,050 --> 00:12:52,980
want to know what's the result so our

00:12:51,089 --> 00:12:55,230
code based just to give you an idea just

00:12:52,980 --> 00:12:58,190
core nothing else is 600 thousand lines

00:12:55,230 --> 00:13:02,760
of code of all kinds of C++ and Python

00:12:58,190 --> 00:13:06,300
so it is the DD effects that a single

00:13:02,760 --> 00:13:08,450
commit can have and can can be drastic

00:13:06,300 --> 00:13:11,260
depending on of course what you touch

00:13:08,450 --> 00:13:14,080
then we have also

00:13:11,260 --> 00:13:16,150
not yet but we're working on that at the

00:13:14,080 --> 00:13:18,430
moment the the requirement to say we

00:13:16,150 --> 00:13:20,740
want to build images and we don't want

00:13:18,430 --> 00:13:22,930
to use like every distributions

00:13:20,740 --> 00:13:24,730
independent tool set for that so we're

00:13:22,930 --> 00:13:29,890
talking here clearly keavy which is

00:13:24,730 --> 00:13:31,930
perfectly integrated into OBS also the

00:13:29,890 --> 00:13:33,730
underscore service file which helps you

00:13:31,930 --> 00:13:35,230
a lot in versioning so you don't have to

00:13:33,730 --> 00:13:37,090
do everything yourself like version

00:13:35,230 --> 00:13:38,530
tagging and so on you have one place to

00:13:37,090 --> 00:13:41,950
do that and that's new get ripple

00:13:38,530 --> 00:13:43,690
nowhere else one of the curry

00:13:41,950 --> 00:13:46,420
requirements also was to be really

00:13:43,690 --> 00:13:48,370
really really really really fast so just

00:13:46,420 --> 00:13:50,590
to give you an idea we had beforehand

00:13:48,370 --> 00:13:52,570
like builds that were taking hours and

00:13:50,590 --> 00:13:56,710
now we got them down to in the worst

00:13:52,570 --> 00:13:58,690
case scenario of ten minutes ah maybe 12

00:13:56,710 --> 00:14:01,240
13 but that's really the worst case so

00:13:58,690 --> 00:14:04,990
normally we can make it within 500

00:14:01,240 --> 00:14:07,330
seconds yeah and do QA that really

00:14:04,990 --> 00:14:09,310
matters so we needed to build up a quite

00:14:07,330 --> 00:14:11,440
new chain also that helps us of course

00:14:09,310 --> 00:14:14,260
not to do everything in manual labor

00:14:11,440 --> 00:14:15,880
there's in communication software it's

00:14:14,260 --> 00:14:17,410
quite hard to do everything automate it

00:14:15,880 --> 00:14:20,290
because you have so many potential

00:14:17,410 --> 00:14:22,350
issues so the checklist is still still

00:14:20,290 --> 00:14:24,760
exists and you need to have it and

00:14:22,350 --> 00:14:26,110
that's that's our model essentially so

00:14:24,760 --> 00:14:28,840
that's that's what you're paying a

00:14:26,110 --> 00:14:30,730
subscription for so now I think I bored

00:14:28,840 --> 00:14:31,960
you a lot with with stuff so I want to

00:14:30,730 --> 00:14:34,360
show you a little bit hard I worked out

00:14:31,960 --> 00:14:36,250
so here on the right hand side you can

00:14:34,360 --> 00:14:40,210
see the commits that was necessary to be

00:14:36,250 --> 00:14:42,340
done in OBS that allows you essentially

00:14:40,210 --> 00:14:45,520
to pick up the build collects file which

00:14:42,340 --> 00:14:48,040
we had here so it's nothing super

00:14:45,520 --> 00:14:49,480
special it's available in 2 dot 7 but

00:14:48,040 --> 00:14:51,040
the awesome thing is is that you

00:14:49,480 --> 00:14:53,050
literally just have sort of a bash

00:14:51,040 --> 00:14:56,830
script which just execute to think of it

00:14:53,050 --> 00:14:58,420
own type of spec file you we could have

00:14:56,830 --> 00:15:01,480
you know developed sort of like a

00:14:58,420 --> 00:15:04,270
compatibility to spec or or a debian

00:15:01,480 --> 00:15:05,770
file but it was simply not necessary so

00:15:04,270 --> 00:15:07,900
the only thing that we needed to do is

00:15:05,770 --> 00:15:10,030
essentially look for the built call X

00:15:07,900 --> 00:15:12,100
file and you can build for that the cool

00:15:10,030 --> 00:15:14,080
thing about that is not only call X you

00:15:12,100 --> 00:15:18,040
can do all kinds of funny things with oh

00:15:14,080 --> 00:15:20,740
yes so in the end just a one liner with

00:15:18,040 --> 00:15:22,990
actually adding something to be listened

00:15:20,740 --> 00:15:23,279
to and you can go for your whole the

00:15:22,990 --> 00:15:25,339
square

00:15:23,279 --> 00:15:27,689
set on how to build for that platform

00:15:25,339 --> 00:15:29,459
very straightforward nothing special to

00:15:27,689 --> 00:15:31,769
do so what do you got to do you make a

00:15:29,459 --> 00:15:35,040
binary import here's the link by the way

00:15:31,769 --> 00:15:38,009
I think documentation this can be done a

00:15:35,040 --> 00:15:40,110
bit better thinking of a little bit

00:15:38,009 --> 00:15:44,129
documenting it also from our side way

00:15:40,110 --> 00:15:47,220
better but it's it's helpful so you'll

00:15:44,129 --> 00:15:49,589
find your way I bet and make your local

00:15:47,220 --> 00:15:51,779
build collects file I gave you a real

00:15:49,589 --> 00:15:53,819
world example directly on paste opensuse

00:15:51,779 --> 00:15:57,120
work which you can just fetch and yeah

00:15:53,819 --> 00:15:58,769
use it yeah change it to your needs of

00:15:57,120 --> 00:16:02,120
course if you don't want to build copan

00:15:58,769 --> 00:16:07,350
oh yeah the next thing was black where

00:16:02,120 --> 00:16:09,420
that is to be honest quite a the

00:16:07,350 --> 00:16:11,129
problem is is that slackware does

00:16:09,420 --> 00:16:12,870
everything attar Jesus they don't know

00:16:11,129 --> 00:16:16,709
anything else but that so what they do

00:16:12,870 --> 00:16:19,620
is this essentially day the Fetchit are

00:16:16,709 --> 00:16:22,439
they compile it they the result

00:16:19,620 --> 00:16:24,720
of course and they used literally yeah

00:16:22,439 --> 00:16:26,759
this tar file as the binaries and these

00:16:24,720 --> 00:16:30,300
binaries are executed to that or

00:16:26,759 --> 00:16:34,139
unpacked on that target system in

00:16:30,300 --> 00:16:35,850
general not that complicated so OBS is

00:16:34,139 --> 00:16:38,550
capable of doing so the only thing why

00:16:35,850 --> 00:16:43,199
we didn't do it is for two reasons or

00:16:38,550 --> 00:16:45,870
three reasons actually one reason was we

00:16:43,199 --> 00:16:48,689
haven't we checked forums we haven't

00:16:45,870 --> 00:16:50,250
seen one request doing slackware so we

00:16:48,689 --> 00:16:53,959
thought might not interesting for

00:16:50,250 --> 00:16:57,360
upstream second thing was that we've

00:16:53,959 --> 00:16:59,399
essentially hijacked the functionality

00:16:57,360 --> 00:17:01,529
of arch linux in that regard so in OBS

00:16:59,399 --> 00:17:03,089
you have two awesome possibility just

00:17:01,529 --> 00:17:09,030
selecting the repositories are just

00:17:03,089 --> 00:17:11,909
pointing to them on Bo and therefore

00:17:09,030 --> 00:17:13,890
when we you know hurt arch just to get

00:17:11,909 --> 00:17:16,169
the stuff done what we want to because

00:17:13,890 --> 00:17:18,329
we simply don't need arch at least not

00:17:16,169 --> 00:17:19,620
yet and therefore we just hijacked it so

00:17:18,329 --> 00:17:22,679
the patches that are required for that

00:17:19,620 --> 00:17:24,329
is are also here if you think you have a

00:17:22,679 --> 00:17:26,429
better idea on how to integrate it or

00:17:24,329 --> 00:17:29,039
make like a separate target like a build

00:17:26,429 --> 00:17:31,260
collects go for it that's why I wanted

00:17:29,039 --> 00:17:33,720
to share this

00:17:31,260 --> 00:17:35,310
yeah so the the binary import is

00:17:33,720 --> 00:17:37,050
literally the same as with colleagues

00:17:35,310 --> 00:17:39,450
just with the difference really just

00:17:37,050 --> 00:17:41,370
take the tar.gz at files because the

00:17:39,450 --> 00:17:44,340
patch sets also realize oh ok I gotta

00:17:41,370 --> 00:17:46,140
unpack them directly with tar and I then

00:17:44,340 --> 00:17:48,030
in the end take the result repack them

00:17:46,140 --> 00:17:52,380
and that's the whole workflow behind it

00:17:48,030 --> 00:17:54,360
so it's quite simple and here below you

00:17:52,380 --> 00:17:56,880
also have a link which you can just

00:17:54,360 --> 00:17:58,950
simply use with this link you have a

00:17:56,880 --> 00:18:01,500
description but you can just take one by

00:17:58,950 --> 00:18:04,560
one what arch does so we didn't have

00:18:01,500 --> 00:18:06,960
like this format thing with colleagues

00:18:04,560 --> 00:18:08,940
it was quite natural because they have

00:18:06,960 --> 00:18:11,250
sort of a special packaging mechanism

00:18:08,940 --> 00:18:14,220
just taking dpkg for instance would work

00:18:11,250 --> 00:18:16,080
for them so therefore we decided here we

00:18:14,220 --> 00:18:22,560
can just hijack it from this other

00:18:16,080 --> 00:18:24,870
distribution this is quite awesome to

00:18:22,560 --> 00:18:30,860
integrate with stash or a bit bucket or

00:18:24,870 --> 00:18:32,940
any name of of whatever code management

00:18:30,860 --> 00:18:34,500
service that you have so you can also

00:18:32,940 --> 00:18:37,800
integrate with subversion we even had

00:18:34,500 --> 00:18:39,510
that like a post commit hook so when you

00:18:37,800 --> 00:18:41,070
really want to make sure that every bill

00:18:39,510 --> 00:18:43,440
that you're building no matter and what

00:18:41,070 --> 00:18:45,570
branch no matter in what area you can

00:18:43,440 --> 00:18:48,720
just create a so-called post receive

00:18:45,570 --> 00:18:51,570
hook and stash sorry bitbucket it's

00:18:48,720 --> 00:18:54,120
called now so essentially what you need

00:18:51,570 --> 00:18:55,320
to do is just set up a curl i have here

00:18:54,120 --> 00:18:57,720
dash dash insecure if you have a

00:18:55,320 --> 00:18:59,880
self-signed ssl certificate you're

00:18:57,720 --> 00:19:01,830
sending up a post and you're using a

00:18:59,880 --> 00:19:03,930
token and this token has to be created

00:19:01,830 --> 00:19:05,640
for further hands so this token is

00:19:03,930 --> 00:19:07,050
really awesome because you don't have to

00:19:05,640 --> 00:19:08,400
have username passwords and share them

00:19:07,050 --> 00:19:10,920
all through around of course you can use

00:19:08,400 --> 00:19:13,260
that as well so just in the URL you

00:19:10,920 --> 00:19:15,030
could you replace it by that but if you

00:19:13,260 --> 00:19:17,160
want to have something like service is

00:19:15,030 --> 00:19:20,240
doing your job then you don't want to

00:19:17,160 --> 00:19:23,250
yeah tinker around with all kinds of

00:19:20,240 --> 00:19:24,870
usernames and password combinations so

00:19:23,250 --> 00:19:27,090
therefore this token is is quite

00:19:24,870 --> 00:19:29,400
efficient this is like OSC service RR

00:19:27,090 --> 00:19:30,870
which is remote run and essentially

00:19:29,400 --> 00:19:33,390
that's what's happening so you're

00:19:30,870 --> 00:19:36,120
committing something stash has a post

00:19:33,390 --> 00:19:40,140
receive hook sends it back and then OBS

00:19:36,120 --> 00:19:44,550
rebuilds automatically the good thing

00:19:40,140 --> 00:19:44,960
about that is is you really yeah that's

00:19:44,550 --> 00:19:46,970
like

00:19:44,960 --> 00:19:48,320
first first step of continuous

00:19:46,970 --> 00:19:49,760
integration so every build that you're

00:19:48,320 --> 00:19:51,740
doing you have your first step

00:19:49,760 --> 00:19:55,309
everything that is done I have a build

00:19:51,740 --> 00:19:58,640
for it then the next step for us is

00:19:55,309 --> 00:20:01,159
Jenkins so in our opinion you cannot

00:19:58,640 --> 00:20:03,110
mean we used Jenkins beforehand by the

00:20:01,159 --> 00:20:04,789
way so we had change routes static

00:20:03,110 --> 00:20:06,679
change rules we inserted all the builds

00:20:04,789 --> 00:20:09,350
there so the source code that we made

00:20:06,679 --> 00:20:11,659
was like pact was sent to one of the

00:20:09,350 --> 00:20:15,289
nodes and it was unpacked compiled

00:20:11,659 --> 00:20:19,460
results we got and UPI a so Jenkins is

00:20:15,289 --> 00:20:21,080
very powerful but it lacks certain areas

00:20:19,460 --> 00:20:24,020
like the scalability yes you can add

00:20:21,080 --> 00:20:26,929
worker notes to it as well but it's not

00:20:24,020 --> 00:20:28,789
not really the same like oh yes because

00:20:26,929 --> 00:20:31,100
you have to set up all your sources

00:20:28,789 --> 00:20:32,690
everything you have you have to manually

00:20:31,100 --> 00:20:34,789
set up every distribution for your own

00:20:32,690 --> 00:20:38,120
and that's just in our opinion was

00:20:34,789 --> 00:20:40,429
stupid so in the end integrating with

00:20:38,120 --> 00:20:43,549
Jenkins was for us the next step so we

00:20:40,429 --> 00:20:45,890
have code we have the bills but what

00:20:43,549 --> 00:20:47,480
happens next and what happens next is

00:20:45,890 --> 00:20:53,990
that we just wanted to make sure that

00:20:47,480 --> 00:20:55,580
for instance unit tests and in the

00:20:53,990 --> 00:20:58,580
beginning unit tests and I'm coming to

00:20:55,580 --> 00:21:00,230
that later and selenium for instance

00:20:58,580 --> 00:21:03,380
because we also have web app a lot of

00:21:00,230 --> 00:21:06,110
JavaScript there so we wanted to have

00:21:03,380 --> 00:21:08,299
sort of a hook or we're looking for a

00:21:06,110 --> 00:21:10,610
sort of a hook which can when you have

00:21:08,299 --> 00:21:13,399
published builds successfully built that

00:21:10,610 --> 00:21:15,710
they take the next step so that's step 3

00:21:13,399 --> 00:21:18,140
essentially in Jenkins you create your

00:21:15,710 --> 00:21:19,940
job you create a bill token there that's

00:21:18,140 --> 00:21:23,630
built in nothing special to do you can

00:21:19,940 --> 00:21:26,450
just just search for token there and in

00:21:23,630 --> 00:21:29,390
a job which you want to create and then

00:21:26,450 --> 00:21:31,520
in user lip OBS server BS config just

00:21:29,390 --> 00:21:33,529
add this line for all the ripples that

00:21:31,520 --> 00:21:35,029
you have so it's literally just an array

00:21:33,529 --> 00:21:38,360
so you can add as many as you want to

00:21:35,029 --> 00:21:41,720
that's just an example here and you can

00:21:38,360 --> 00:21:43,159
create your reference job of course you

00:21:41,720 --> 00:21:45,350
can make that parametrized I mean

00:21:43,159 --> 00:21:47,210
developers can do it whatever they want

00:21:45,350 --> 00:21:49,549
to but this is just an example to say

00:21:47,210 --> 00:21:52,700
hey in the end I'm just doing a curl

00:21:49,549 --> 00:21:55,070
request this curl request is sent to

00:21:52,700 --> 00:21:57,679
Jenkins so we

00:21:55,070 --> 00:21:59,419
tinkering around around quite a lot of

00:21:57,679 --> 00:22:02,299
time because we were thinking like yeah

00:21:59,419 --> 00:22:05,240
you can just monitor the OBS build right

00:22:02,299 --> 00:22:07,460
so you can just OSCR see what's going on

00:22:05,240 --> 00:22:09,049
and just wait but that's like more

00:22:07,460 --> 00:22:11,240
pulling principle and we don't like

00:22:09,049 --> 00:22:13,100
polling we think an event is way more

00:22:11,240 --> 00:22:16,009
efficient and doesn't use that many

00:22:13,100 --> 00:22:19,130
resources and just makes things also

00:22:16,009 --> 00:22:23,779
less error-prone so that was the way how

00:22:19,130 --> 00:22:26,570
we did it yeah next thing what do you do

00:22:23,779 --> 00:22:29,600
when you have everything in your Jenkins

00:22:26,570 --> 00:22:30,769
which you can trigger all sorts of tests

00:22:29,600 --> 00:22:35,840
on you also want to make sure that you

00:22:30,769 --> 00:22:37,850
have images so the cool thing is it's a

00:22:35,840 --> 00:22:40,879
no-brainer actually you can just take

00:22:37,850 --> 00:22:42,679
like the standard TV files that are in

00:22:40,879 --> 00:22:45,350
the github repository which you can see

00:22:42,679 --> 00:22:46,759
here there are a lot of a lot of

00:22:45,350 --> 00:22:51,139
standard templates that you can use for

00:22:46,759 --> 00:22:53,570
rel and for opensuse and they are yeah

00:22:51,139 --> 00:22:54,980
you sometimes have to change when you

00:22:53,570 --> 00:22:56,750
have your own private instance you have

00:22:54,980 --> 00:22:59,179
to change the URLs because they just

00:22:56,750 --> 00:23:01,490
point to OBS repositories but if you in

00:22:59,179 --> 00:23:03,379
fact have multiple times like the same

00:23:01,490 --> 00:23:05,179
product then you don't want to use it

00:23:03,379 --> 00:23:08,720
like that way you just want to specify a

00:23:05,179 --> 00:23:11,090
certain project or a certain package in

00:23:08,720 --> 00:23:13,669
a project and therefore it makes sense

00:23:11,090 --> 00:23:17,990
to specifically look at the repositories

00:23:13,669 --> 00:23:19,399
area in your key vxml I just learned

00:23:17,990 --> 00:23:23,809
here at the conference actually that

00:23:19,399 --> 00:23:25,610
gambling was busy with life build and

00:23:23,809 --> 00:23:28,820
OBS integration which is super awesome

00:23:25,610 --> 00:23:30,769
because we've been looking for that so

00:23:28,820 --> 00:23:32,809
this is one of our next things that is

00:23:30,769 --> 00:23:34,789
on a list to really make also debian and

00:23:32,809 --> 00:23:38,539
ubuntu images and therefore you have all

00:23:34,789 --> 00:23:41,419
major players right so that's that helps

00:23:38,539 --> 00:23:43,490
us of course to transport the product

00:23:41,419 --> 00:23:44,960
that we have in an easy same way because

00:23:43,490 --> 00:23:47,779
kiwi gives you a lot of possibilities

00:23:44,960 --> 00:23:50,600
also to integrate like logic in terms of

00:23:47,779 --> 00:23:53,450
conflicts that you want to deploy for

00:23:50,600 --> 00:23:56,360
instance using copano with a standard

00:23:53,450 --> 00:24:00,529
mysql isn't yeah it works but it's not

00:23:56,360 --> 00:24:02,450
super good idea because you have many

00:24:00,529 --> 00:24:05,059
ways to improve performance just by

00:24:02,450 --> 00:24:07,309
adding two or three parameters and

00:24:05,059 --> 00:24:11,570
you have like magnitudes of better

00:24:07,309 --> 00:24:15,679
performance without any any danger data

00:24:11,570 --> 00:24:19,220
endangerment so the next thing was

00:24:15,679 --> 00:24:22,249
obviously for the trigger to run you

00:24:19,220 --> 00:24:25,870
should use service files and I must say

00:24:22,249 --> 00:24:28,129
from what I see also on Bo oh I'm quite

00:24:25,870 --> 00:24:30,049
astonished that service is not really

00:24:28,129 --> 00:24:33,259
used that much though it's such a great

00:24:30,049 --> 00:24:36,710
architecture so it's pluggable literally

00:24:33,259 --> 00:24:40,480
you have all these tar like tar SCM and

00:24:36,710 --> 00:24:43,100
recompress you have all these service

00:24:40,480 --> 00:24:45,470
projects in github which are really

00:24:43,100 --> 00:24:48,710
great and you can just add a service

00:24:45,470 --> 00:24:50,659
name one after another by block and here

00:24:48,710 --> 00:24:53,149
you can see a real example except for a

00:24:50,659 --> 00:24:55,369
username and password you can see really

00:24:53,149 --> 00:24:57,379
everything that we're doing so we get a

00:24:55,369 --> 00:24:58,909
master revision for every build that

00:24:57,379 --> 00:25:01,100
we're doing of course we're not

00:24:58,909 --> 00:25:03,799
releasing master directly to the public

00:25:01,100 --> 00:25:07,129
as a release so we have other jobs where

00:25:03,799 --> 00:25:09,289
it's like tagged specifically where we

00:25:07,129 --> 00:25:12,769
set like the correct tag that should be

00:25:09,289 --> 00:25:17,299
checked out and of course re compressing

00:25:12,769 --> 00:25:20,779
it use exit for size and set version

00:25:17,299 --> 00:25:23,179
which is by the way really awesome also

00:25:20,779 --> 00:25:27,350
the changes that i showed you regarding

00:25:23,179 --> 00:25:29,360
1a and kolaks they also can support set

00:25:27,350 --> 00:25:31,039
version which is really good because it

00:25:29,360 --> 00:25:33,110
just gets like the version numbering

00:25:31,039 --> 00:25:35,149
that you have from your source code

00:25:33,110 --> 00:25:37,249
management tool it just sets that

00:25:35,149 --> 00:25:38,929
diamond it dynamically for a DSC files

00:25:37,249 --> 00:25:43,940
back file build collects file whatever

00:25:38,929 --> 00:25:46,100
you have the next thing was that's a

00:25:43,940 --> 00:25:48,799
little bit the convincing part where

00:25:46,100 --> 00:25:52,519
like yeah we'll see i see that's

00:25:48,799 --> 00:25:54,529
opensuse commander and not saying that

00:25:52,519 --> 00:25:57,710
that's in our company we don't like

00:25:54,529 --> 00:26:01,220
opens or that there's anyone who doesn't

00:25:57,710 --> 00:26:03,080
like it but they simply don't know and

00:26:01,220 --> 00:26:05,019
the first thing was i can't what is osei

00:26:03,080 --> 00:26:07,850
don't know it i haven't touched it and

00:26:05,019 --> 00:26:09,379
the excuse was yeah dats opensuse right

00:26:07,850 --> 00:26:12,470
i don't have done in debian so there's

00:26:09,379 --> 00:26:14,330
no excuses essentially and I have to

00:26:12,470 --> 00:26:17,159
apologize this is a windows laptop here

00:26:14,330 --> 00:26:18,659
so I because we're in

00:26:17,159 --> 00:26:22,710
education world and communication world

00:26:18,659 --> 00:26:24,960
outlook is also deal so there you go but

00:26:22,710 --> 00:26:28,889
you can easily get osc even to run on

00:26:24,960 --> 00:26:30,570
windows with cygwin the only thing with

00:26:28,889 --> 00:26:34,499
what i recommend you to do is really

00:26:30,570 --> 00:26:37,999
followed us how to because the native

00:26:34,499 --> 00:26:41,909
installed python that you have with

00:26:37,999 --> 00:26:45,539
cygwin at the moment at least is without

00:26:41,909 --> 00:26:47,129
SSL support so the curl pie curl there

00:26:45,539 --> 00:26:51,210
is without SSL support and that's

00:26:47,129 --> 00:26:54,440
obviously not a good idea yeah so with

00:26:51,210 --> 00:26:57,379
these instructions you can get started

00:26:54,440 --> 00:27:00,419
yeah be fast very very fast so I

00:26:57,379 --> 00:27:01,950
mentioned when you do build for every

00:27:00,419 --> 00:27:03,269
commit and you have a lot of developers

00:27:01,950 --> 00:27:05,279
then you want to make sure that your

00:27:03,269 --> 00:27:09,479
bills are fast the cool thing about that

00:27:05,279 --> 00:27:12,419
and really awesome point is you can kill

00:27:09,479 --> 00:27:14,999
everything in OBS with hardware so it's

00:27:12,419 --> 00:27:16,440
slow and you have a lot of builds you

00:27:14,999 --> 00:27:19,109
have a lot of distributions you seen the

00:27:16,440 --> 00:27:21,659
list that we have beforehand then you

00:27:19,109 --> 00:27:24,119
must know every distribution heavy

00:27:21,659 --> 00:27:26,519
architecture means rebuilt from scratch

00:27:24,119 --> 00:27:30,269
rebuilt a full operate or reinstall the

00:27:26,519 --> 00:27:32,549
full operating system put your artifacts

00:27:30,269 --> 00:27:34,799
in there compile it get to build results

00:27:32,549 --> 00:27:36,989
push them and that for every

00:27:34,799 --> 00:27:40,590
distribution so every commit that is

00:27:36,989 --> 00:27:42,479
issued at copano generates 25 from

00:27:40,590 --> 00:27:44,789
scratch compilations of six hundred

00:27:42,479 --> 00:27:46,799
thousand lines of code you need hardware

00:27:44,789 --> 00:27:49,109
for that so one of the things that we

00:27:46,799 --> 00:27:51,299
actually did was really to build

00:27:49,109 --> 00:27:54,179
everything in temp offense that works

00:27:51,299 --> 00:27:56,970
quite well the only thing what we also

00:27:54,179 --> 00:27:59,309
realized because Rafa and copano we are

00:27:56,970 --> 00:28:01,169
also involved in the Iridium project

00:27:59,309 --> 00:28:06,149
that's a spin-off of the chromium

00:28:01,169 --> 00:28:08,720
browser which is just very secure but

00:28:06,149 --> 00:28:11,609
we're talking here huge source code and

00:28:08,720 --> 00:28:14,159
they're this size doesn't isn't enough

00:28:11,609 --> 00:28:16,590
anymore so 64 gigabytes or 60 gigabytes

00:28:14,159 --> 00:28:18,539
is not enough there anymore but for us

00:28:16,590 --> 00:28:20,009
of of course that's also cool and you

00:28:18,539 --> 00:28:23,190
can tune it actually because every

00:28:20,009 --> 00:28:26,519
worker has like when you have a system

00:28:23,190 --> 00:28:29,290
let's say 16 cores you could say let's

00:28:26,519 --> 00:28:31,990
take eight workers running there

00:28:29,290 --> 00:28:34,330
and that means at full load literally

00:28:31,990 --> 00:28:38,260
every job would have fools two CPUs

00:28:34,330 --> 00:28:39,400
available and you can size by you can

00:28:38,260 --> 00:28:40,830
see how much sighs you're using

00:28:39,400 --> 00:28:44,440
literally because it's just like

00:28:40,830 --> 00:28:46,690
checking out your DF output on how much

00:28:44,440 --> 00:28:49,090
is really used at the time and then you

00:28:46,690 --> 00:28:50,650
can tune it and see how much template su

00:28:49,090 --> 00:28:52,810
actually really neat because you don't

00:28:50,650 --> 00:28:54,430
really need it all the time but of

00:28:52,810 --> 00:28:56,380
course you're installing the full distro

00:28:54,430 --> 00:29:00,790
in there and therefore you need some

00:28:56,380 --> 00:29:03,160
size also since we have some some

00:29:00,790 --> 00:29:06,010
separated worker notes so they're not

00:29:03,160 --> 00:29:08,020
all at one location really use OBS

00:29:06,010 --> 00:29:10,840
cashiering cache size it really helps

00:29:08,020 --> 00:29:14,230
specifically for not like super

00:29:10,840 --> 00:29:16,900
bandwidth locations so that is really

00:29:14,230 --> 00:29:19,090
really good and the foot printing and to

00:29:16,900 --> 00:29:22,060
check something we never have issues

00:29:19,090 --> 00:29:25,060
with that so I really recommend to do

00:29:22,060 --> 00:29:26,530
that and what we also did is we did some

00:29:25,060 --> 00:29:30,010
benchmarks regarding like

00:29:26,530 --> 00:29:34,590
over-committing so to give you back the

00:29:30,010 --> 00:29:38,110
idea we had like these 10 nodes I think

00:29:34,590 --> 00:29:41,500
every note has with us i think these 16

00:29:38,110 --> 00:29:44,050
cores and we have eight workers on there

00:29:41,500 --> 00:29:45,580
so potentially thinking two cpus for

00:29:44,050 --> 00:29:47,770
each and every so you would say make

00:29:45,580 --> 00:29:50,680
make j2 or so and then you have a full

00:29:47,770 --> 00:29:52,360
oh but that's quite stupid because when

00:29:50,680 --> 00:29:55,150
you say like that you only have one or

00:29:52,360 --> 00:29:56,470
two signal rebuilds did you say a

00:29:55,150 --> 00:29:58,120
developer is just you know checking

00:29:56,470 --> 00:29:59,800
something out for a specific platform

00:29:58,120 --> 00:30:02,950
just want to see the current log of it

00:29:59,800 --> 00:30:04,830
and it can make a specific targeted

00:30:02,950 --> 00:30:07,810
rebuild for only one distribution and

00:30:04,830 --> 00:30:09,700
then that node would just utilize two

00:30:07,810 --> 00:30:11,380
CPUs even though it would be available

00:30:09,700 --> 00:30:14,800
potentially on we're on which note it is

00:30:11,380 --> 00:30:18,610
distributed therefore just make them

00:30:14,800 --> 00:30:22,510
full make a make j with all the worker

00:30:18,610 --> 00:30:24,790
cpu counts that you have broad and yeah

00:30:22,510 --> 00:30:27,550
just let them fight for cpu cycles in

00:30:24,790 --> 00:30:33,520
the end the benchmarks look very good so

00:30:27,550 --> 00:30:38,500
in total you win yeah do QA that matters

00:30:33,520 --> 00:30:41,530
so we had the thing regarding unit tests

00:30:38,500 --> 00:30:42,720
so we have quite an amount of it because

00:30:41,530 --> 00:30:45,870
map he is

00:30:42,720 --> 00:30:49,080
a complicated a description of

00:30:45,870 --> 00:30:51,659
Technology let's call it that so moppy

00:30:49,080 --> 00:30:53,130
with timezone issues with all kinds of

00:30:51,659 --> 00:30:57,120
my properties with all kinds of

00:30:53,130 --> 00:30:58,980
operations like deleting moving it is it

00:30:57,120 --> 00:31:00,799
is necessary absolutely that you have

00:30:58,980 --> 00:31:04,200
unit tests for a product like that

00:31:00,799 --> 00:31:05,909
therefore our ideas is to make like the

00:31:04,200 --> 00:31:08,370
make tests happen on OBS workers as well

00:31:05,909 --> 00:31:10,710
because that scale super well and also

00:31:08,370 --> 00:31:12,059
with these tests you also take all the

00:31:10,710 --> 00:31:13,620
components and all the dependencies of

00:31:12,059 --> 00:31:17,340
that certain distribution into account

00:31:13,620 --> 00:31:20,010
so beforehand we did like yeah 11 note

00:31:17,340 --> 00:31:22,409
or one Jenkins job do the unit tests in

00:31:20,010 --> 00:31:25,710
there and it was debian-based or it is

00:31:22,409 --> 00:31:27,179
dead n based actually still and then you

00:31:25,710 --> 00:31:28,679
fire it off and then you know yeah my

00:31:27,179 --> 00:31:30,299
unit tests are working on debian but you

00:31:28,679 --> 00:31:31,799
don't know if they're working on Suzy

00:31:30,299 --> 00:31:36,049
you don't know after working on redhead

00:31:31,799 --> 00:31:38,760
that's that's just doesn't make sense

00:31:36,049 --> 00:31:40,169
yeah our the example that I already

00:31:38,760 --> 00:31:43,590
brought to integrate with a published

00:31:40,169 --> 00:31:45,840
hook that is really really the best

00:31:43,590 --> 00:31:47,909
really it's it's it's so awesome because

00:31:45,840 --> 00:31:50,760
you can really make sure that you're not

00:31:47,909 --> 00:31:52,919
missing out on any commit and you get

00:31:50,760 --> 00:31:54,690
the results for every commit of course

00:31:52,919 --> 00:31:57,179
you have to hit it by hardware but in

00:31:54,690 --> 00:31:59,640
the end if quality gains from that and

00:31:57,179 --> 00:32:01,169
actually developers also learn from that

00:31:59,640 --> 00:32:03,179
because in the beginning we had also

00:32:01,169 --> 00:32:05,690
issues where like there were like 10 20

00:32:03,179 --> 00:32:07,980
commits in the meanwhile happening and

00:32:05,690 --> 00:32:09,990
then we're thinking like hey dammit we

00:32:07,980 --> 00:32:12,179
touched that three times which commits

00:32:09,990 --> 00:32:16,140
is it now which is up literally

00:32:12,179 --> 00:32:18,809
the test so the point is if you have

00:32:16,140 --> 00:32:22,470
that for every build you are increasing

00:32:18,809 --> 00:32:24,059
quality and your developers are also

00:32:22,470 --> 00:32:26,010
learning from it because they really

00:32:24,059 --> 00:32:30,990
pinpoint and you're saving time in the

00:32:26,010 --> 00:32:33,960
end also and yeah Sookie V is also what

00:32:30,990 --> 00:32:37,409
is very very much not perceived really

00:32:33,960 --> 00:32:40,110
well as we had also with this host Rafa

00:32:37,409 --> 00:32:43,950
and copano thing where we essentially

00:32:40,110 --> 00:32:47,240
all the services are now Capano named we

00:32:43,950 --> 00:32:50,000
had to issue with you know upgrading and

00:32:47,240 --> 00:32:53,780
you know having dependency issues from

00:32:50,000 --> 00:32:56,360
packaged package to package so what we

00:32:53,780 --> 00:32:58,010
had was essentially we installed like

00:32:56,360 --> 00:32:59,990
eighty percent everything correct in the

00:32:58,010 --> 00:33:02,570
beginning and then we realized oh dammit

00:32:59,990 --> 00:33:05,690
they're like two or three older packages

00:33:02,570 --> 00:33:07,790
actually but they are not included

00:33:05,690 --> 00:33:09,710
really well and they asked for

00:33:07,790 --> 00:33:11,900
dependencies because we also sort of

00:33:09,710 --> 00:33:15,410
have to have manual references or manual

00:33:11,900 --> 00:33:17,900
requires in a spec files so TV is a

00:33:15,410 --> 00:33:19,820
perfect automation tool for all your

00:33:17,900 --> 00:33:22,730
installations so if you want to install

00:33:19,820 --> 00:33:24,470
something and you define like just your

00:33:22,730 --> 00:33:26,420
target we have a meta package called

00:33:24,470 --> 00:33:28,070
copano server packages if you just want

00:33:26,420 --> 00:33:29,540
to install that and you know that your

00:33:28,070 --> 00:33:31,429
build is running then you know you have

00:33:29,540 --> 00:33:33,679
no dependency issues because it's

00:33:31,429 --> 00:33:35,929
installing so therefore no install

00:33:33,679 --> 00:33:37,550
issues whatsoever of course you can take

00:33:35,929 --> 00:33:38,780
it forward that you say what is with the

00:33:37,550 --> 00:33:40,580
next version if you change like a

00:33:38,780 --> 00:33:43,100
library to be contained in a different

00:33:40,580 --> 00:33:45,230
package then you have to think of hmmm

00:33:43,100 --> 00:33:49,550
then I have to have upgrade tests as

00:33:45,230 --> 00:33:51,290
well coming to that later so yeah open

00:33:49,550 --> 00:33:53,450
QA is there and it is really great we

00:33:51,290 --> 00:33:56,540
really took our time to look at it but

00:33:53,450 --> 00:33:58,100
for us it is really like this making a

00:33:56,540 --> 00:34:01,250
screenshot comparing a screenshot with

00:33:58,100 --> 00:34:02,870
another it works in many cases but not

00:34:01,250 --> 00:34:07,130
the ones that are important for us at

00:34:02,870 --> 00:34:10,940
least so the we actually evaluate our

00:34:07,130 --> 00:34:12,770
test output and this output is for us

00:34:10,940 --> 00:34:16,609
quite important so we make a little bit

00:34:12,770 --> 00:34:18,919
magic around that and we just rate that

00:34:16,609 --> 00:34:20,450
for us at least way more efficient not

00:34:18,919 --> 00:34:21,800
saying that open QA is bad really I

00:34:20,450 --> 00:34:26,810
don't want to say that but for us it was

00:34:21,800 --> 00:34:28,580
not a perfect match so do platform

00:34:26,810 --> 00:34:32,510
related test is also a very very good

00:34:28,580 --> 00:34:35,629
and important thing we also Jenkins

00:34:32,510 --> 00:34:38,659
thought like yeah let's just do the unit

00:34:35,629 --> 00:34:40,460
tests initially as I mentioned and one

00:34:38,659 --> 00:34:42,530
of the facts that were left behind is

00:34:40,460 --> 00:34:44,780
also PHP because PHP also different

00:34:42,530 --> 00:34:46,490
major versions and with this broad

00:34:44,780 --> 00:34:47,960
number of all kinds of different

00:34:46,490 --> 00:34:49,159
distributions you have to make sure that

00:34:47,960 --> 00:34:51,379
the unit tests also run on every

00:34:49,159 --> 00:34:56,270
platform so everything that is depending

00:34:51,379 --> 00:34:59,430
or platform related something that obeah

00:34:56,270 --> 00:35:01,980
scan Charlie make make work for you

00:34:59,430 --> 00:35:04,050
and also which is quite nice to

00:35:01,980 --> 00:35:05,490
published it which I already mentioned

00:35:04,050 --> 00:35:07,609
that i love it it also worked for

00:35:05,490 --> 00:35:11,130
everything that is key view related so

00:35:07,609 --> 00:35:12,960
to get the full chain developer commit

00:35:11,130 --> 00:35:14,760
something when a developer commit

00:35:12,960 --> 00:35:16,740
something obvious automatically picks it

00:35:14,760 --> 00:35:20,309
up because we have this hook that's the

00:35:16,740 --> 00:35:21,599
build system OBS starts OBS uses

00:35:20,309 --> 00:35:23,690
underscore service files to

00:35:21,599 --> 00:35:27,410
automatically grab it from the source

00:35:23,690 --> 00:35:29,819
from the SEM from our kit and

00:35:27,410 --> 00:35:32,460
automatically deploys it on a worker

00:35:29,819 --> 00:35:35,130
rebuilds it when it's rebuilt it

00:35:32,460 --> 00:35:37,200
automatically tells Jenkins hey guy you

00:35:35,130 --> 00:35:39,180
have something to do in parallel it also

00:35:37,200 --> 00:35:41,160
tells OBS by the way I have a new

00:35:39,180 --> 00:35:45,059
package for it is and I want to have an

00:35:41,160 --> 00:35:48,329
image of it so Jenkins is one ball part

00:35:45,059 --> 00:35:53,010
where we put all the other all the other

00:35:48,329 --> 00:35:56,130
QA jobs into it here I go here we have

00:35:53,010 --> 00:35:58,440
everything that is regarding nah no BS

00:35:56,130 --> 00:36:01,319
QA related jobs and there are some for

00:35:58,440 --> 00:36:04,020
instance we use valid Ryan also and the

00:36:01,319 --> 00:36:05,460
grind running on an unrealistic system

00:36:04,020 --> 00:36:07,049
that you pull that you're really

00:36:05,460 --> 00:36:09,869
footprinting or so it just simply

00:36:07,049 --> 00:36:12,240
doesn't make any sense so therefore you

00:36:09,869 --> 00:36:15,299
have this full chain developer commit

00:36:12,240 --> 00:36:18,329
something obvious takes on it Jenkins is

00:36:15,299 --> 00:36:21,030
notified hey we have we have something

00:36:18,329 --> 00:36:22,619
new Jenkins is also by the way the guy

00:36:21,030 --> 00:36:24,180
who takes care of all the translations

00:36:22,619 --> 00:36:26,609
right so when somebody translate

00:36:24,180 --> 00:36:27,839
something we have a job jet that just

00:36:26,609 --> 00:36:29,910
recurring Lee picks up all the

00:36:27,839 --> 00:36:31,650
translations puts them into bitbucket

00:36:29,910 --> 00:36:34,619
back in a separate branch and a

00:36:31,650 --> 00:36:38,190
developer can just merge it so in the

00:36:34,619 --> 00:36:41,309
end here with Jenkins taking taking next

00:36:38,190 --> 00:36:42,990
steps we have this nun OV sqa jobs which

00:36:41,309 --> 00:36:45,809
simply don't make sense doing them in

00:36:42,990 --> 00:36:49,650
OBS then we have like the manual part

00:36:45,809 --> 00:36:52,049
where we say hey there's some sort of QA

00:36:49,650 --> 00:36:53,250
that that comes behind here to be honest

00:36:52,049 --> 00:36:57,089
we cannot do it for every committee

00:36:53,250 --> 00:36:59,160
ously but already this chain of our unit

00:36:57,089 --> 00:37:00,809
tests for instance being executed in

00:36:59,160 --> 00:37:04,260
line with every build that's already a

00:37:00,809 --> 00:37:06,420
big relief yeah and if QA is not happy

00:37:04,260 --> 00:37:08,880
you can see like this not happy software

00:37:06,420 --> 00:37:11,530
tester he is upset because of your code

00:37:08,880 --> 00:37:13,660
is below if you cannot read it

00:37:11,530 --> 00:37:19,390
yeah so that's that's the whole chain

00:37:13,660 --> 00:37:21,850
that we established yeah I think great

00:37:19,390 --> 00:37:23,590
if you want to know what capano is all

00:37:21,850 --> 00:37:26,680
about just out of curiosity I have

00:37:23,590 --> 00:37:28,660
tomorrow workshop three hours where you

00:37:26,680 --> 00:37:30,160
can really see a full set up from

00:37:28,660 --> 00:37:33,820
scratch if you take a laptop with you

00:37:30,160 --> 00:37:35,620
virtualbox whatever we can we can set it

00:37:33,820 --> 00:37:37,060
up together and you would have a real

00:37:35,620 --> 00:37:38,710
full communication stack which

00:37:37,060 --> 00:37:43,140
communicates with your mobile phones and

00:37:38,710 --> 00:37:45,430
outlook and so on yeah i think that

00:37:43,140 --> 00:37:54,850
quite shows how we use all we ask

00:37:45,430 --> 00:37:57,190
questions nope all right I'm still

00:37:54,850 --> 00:37:59,470
hanging around so if there's anything

00:37:57,190 --> 00:38:02,760
that you want to come up with just

00:37:59,470 --> 00:38:02,760
approached me thanks

00:38:08,210 --> 00:38:10,270

YouTube URL: https://www.youtube.com/watch?v=ZpZ2q91GZGI


