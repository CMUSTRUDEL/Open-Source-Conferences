Title: Stefan Behlert: openSUSE and SUSE Linux Enterprise
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/984-opensuse-and-suse-linux-enterprise

Content:
        Leap and the SUSE Linux Enterprise products share
        a lot of things in common. At the same time, they vary in a lot of
        aspects. Some of them are caused by fundamental differences in the
        philosophy and the basic properties of the projects.
        With the upcoming SP2 of CODE 12 of SUSE Linux Enterprise it's time to look at
        those differences and similarities, as the codebases will be getting closer again.


Stefan Behlert
Captions: 
	00:00:08,790 --> 00:00:15,129
hello everybody I hope you ate a good

00:00:11,440 --> 00:00:20,220
lunch if not there's something left grab

00:00:15,129 --> 00:00:23,320
it so my name is Stefan Villard i'm

00:00:20,220 --> 00:00:27,189
working for Souza as a project manager

00:00:23,320 --> 00:00:31,000
on the enterprise side and I want to

00:00:27,189 --> 00:00:33,460
talk it to you and with you a little bit

00:00:31,000 --> 00:00:39,670
about opensuse and the enterprise part

00:00:33,460 --> 00:00:43,170
of the company so we have a big team of

00:00:39,670 --> 00:00:46,390
project managers working on these

00:00:43,170 --> 00:00:48,430
enterprise products so if you have

00:00:46,390 --> 00:00:50,620
questions don't hesitate to ask I may

00:00:48,430 --> 00:00:54,850
not be able to answer all of them but i

00:00:50,620 --> 00:00:58,440
try i will talk a little bit about

00:00:54,850 --> 00:01:01,120
opensuse and the enterprise university

00:00:58,440 --> 00:01:04,210
universe and the similarities and

00:01:01,120 --> 00:01:07,750
differences you have there and in the

00:01:04,210 --> 00:01:09,670
end I stands your spotlight but it will

00:01:07,750 --> 00:01:13,390
be a little bit more or a bit a little

00:01:09,670 --> 00:01:15,940
bit less depending on how you see it as

00:01:13,390 --> 00:01:20,320
you can see i solve this picture

00:01:15,940 --> 00:01:22,960
recently in one of our offices all of

00:01:20,320 --> 00:01:27,760
these r ER keiko's but they are a little

00:01:22,960 --> 00:01:29,260
bit different they are not the same they

00:01:27,760 --> 00:01:33,850
have a little bit of different coloring

00:01:29,260 --> 00:01:37,930
a little bit of a different form but all

00:01:33,850 --> 00:01:41,260
of them have four feet and a head and a

00:01:37,930 --> 00:01:49,020
tail so there are similarities as well

00:01:41,260 --> 00:01:52,299
as differences what you see here is a

00:01:49,020 --> 00:01:55,299
rough overview of how it looks like

00:01:52,299 --> 00:02:00,460
currently in the universe you see here

00:01:55,299 --> 00:02:02,200
tumbleweed with its yeah more than 8,000

00:02:00,460 --> 00:02:04,180
packages i'm not sure what the current

00:02:02,200 --> 00:02:05,130
count is please don't namely down on

00:02:04,180 --> 00:02:09,229
numbers

00:02:05,130 --> 00:02:12,060
the rolling release you see here leap

00:02:09,229 --> 00:02:16,980
with the car it gets from this is

00:02:12,060 --> 00:02:19,380
elena's Enterprise 6,000 packages you

00:02:16,980 --> 00:02:22,050
may be surprised that there is no number

00:02:19,380 --> 00:02:26,040
here the reason is simply that it's not

00:02:22,050 --> 00:02:30,209
so easy to count it I tried it before

00:02:26,040 --> 00:02:35,459
that talk and it's roughly 2,000 source

00:02:30,209 --> 00:02:40,500
packages and between 3000 and 4000

00:02:35,459 --> 00:02:43,680
binary packages the reason why it's not

00:02:40,500 --> 00:02:48,060
so easy to count is that the enterprise

00:02:43,680 --> 00:02:52,880
product it's not one product so what you

00:02:48,060 --> 00:02:57,680
see here with the server side we have

00:02:52,880 --> 00:03:02,269
extensions we have a kind of yeah

00:02:57,680 --> 00:03:02,269
virtual products with the support side

00:03:02,299 --> 00:03:09,930
virtualization the cloud product

00:03:05,390 --> 00:03:12,500
products that are for managing and last

00:03:09,930 --> 00:03:20,970
but not least the desktop product and

00:03:12,500 --> 00:03:24,359
all of these are based on the same code

00:03:20,970 --> 00:03:27,180
base but have a different selection of

00:03:24,359 --> 00:03:30,989
packages have sometimes additional

00:03:27,180 --> 00:03:34,130
packages sometimes the same packages for

00:03:30,989 --> 00:03:37,250
example if you look here the server

00:03:34,130 --> 00:03:40,620
products of course have the same kernel

00:03:37,250 --> 00:03:42,920
but the server products don't have for

00:03:40,620 --> 00:03:45,840
example the open office or the

00:03:42,920 --> 00:03:51,239
LibreOffice packages that the desktop

00:03:45,840 --> 00:03:55,109
has so all of this makes up the

00:03:51,239 --> 00:03:57,150
enterprise portfolio and on top of that

00:03:55,109 --> 00:03:59,790
and it's not in that picture because I

00:03:57,150 --> 00:04:02,220
had no idea how to bring it in we have

00:03:59,790 --> 00:04:05,750
also something separate which I would

00:04:02,220 --> 00:04:05,750
talk to you later

00:04:07,800 --> 00:04:15,490
so whenever I talk about Slee that means

00:04:12,280 --> 00:04:17,230
that whole code base it's not just one

00:04:15,490 --> 00:04:22,120
product but it might be different

00:04:17,230 --> 00:04:24,280
product and you see here or you have

00:04:22,120 --> 00:04:30,400
seen that slide also when Lou truck

00:04:24,280 --> 00:04:34,000
talked yesterday the leap product is

00:04:30,400 --> 00:04:41,230
build on the core and on leap packages

00:04:34,000 --> 00:04:46,120
as well as Lee and the core all of that

00:04:41,230 --> 00:04:49,870
gets feed I opensuse tumbleweed so

00:04:46,120 --> 00:04:53,110
whatever is done here and sooner or

00:04:49,870 --> 00:04:56,950
later here of course not for all

00:04:53,110 --> 00:05:01,510
packages because 8000 packages you

00:04:56,950 --> 00:05:06,670
remember 4,000 packages roughly here so

00:05:01,510 --> 00:05:08,530
not everything ends up there so you may

00:05:06,670 --> 00:05:13,780
ask what are the main difference is now

00:05:08,530 --> 00:05:16,960
between the enterprise and what we do in

00:05:13,780 --> 00:05:21,060
the opensuse side oh by the way if I say

00:05:16,960 --> 00:05:23,650
opensuse it mostly includes all of that

00:05:21,060 --> 00:05:25,870
I'm an enterprise guy I'm a little bit

00:05:23,650 --> 00:05:27,640
sloppy on that I'm accustomed to say

00:05:25,870 --> 00:05:31,140
sleeve when we mean all of the code

00:05:27,640 --> 00:05:35,140
paste so if i say opensuse it means that

00:05:31,140 --> 00:05:37,030
part of the picture and it's not to

00:05:35,140 --> 00:05:42,450
mention for one of those specifically

00:05:37,030 --> 00:05:42,450
beer with me here i'm an enterprise guy

00:05:43,020 --> 00:05:49,300
on the difference is i've listed here

00:05:46,840 --> 00:05:51,820
some which i will talk to you in the

00:05:49,300 --> 00:05:55,660
next few minutes there are two i will

00:05:51,820 --> 00:05:58,150
not go into detail the first two we will

00:05:55,660 --> 00:05:59,919
come to later partitioning an

00:05:58,150 --> 00:06:01,990
installation workflow it's quite

00:05:59,919 --> 00:06:04,710
different between the opensuse products

00:06:01,990 --> 00:06:08,620
and the enterprise stuff we have

00:06:04,710 --> 00:06:11,380
different workflows there different

00:06:08,620 --> 00:06:13,930
kinds of installation the partitioning

00:06:11,380 --> 00:06:15,880
is done quite differently mostly to fit

00:06:13,930 --> 00:06:19,200
the needs of the enterprise customers

00:06:15,880 --> 00:06:19,200
especially the server guys

00:06:19,470 --> 00:06:28,870
when it comes to platforms yeah frankly

00:06:25,659 --> 00:06:30,370
speaking that these two lines are

00:06:28,870 --> 00:06:35,889
correct and they are wrong at the same

00:06:30,370 --> 00:06:38,370
time because opensuse you have leap you

00:06:35,889 --> 00:06:41,349
have tumbleweed you have the ports and

00:06:38,370 --> 00:06:43,180
the stuff that is produced and on the

00:06:41,349 --> 00:06:45,069
enterprise side you have several

00:06:43,180 --> 00:06:49,000
products and not all products are

00:06:45,069 --> 00:06:53,469
available for everything you may wonder

00:06:49,000 --> 00:06:57,520
why I have here a are 64 in brackets the

00:06:53,469 --> 00:07:03,009
reason is very simple we've slid 12 sp2

00:06:57,520 --> 00:07:05,229
we start to produce a are 64 images that

00:07:03,009 --> 00:07:08,289
are supported but we are only doing so

00:07:05,229 --> 00:07:13,120
for selected hardware you may be aware

00:07:08,289 --> 00:07:15,729
that the AR 64 platform is not one but

00:07:13,120 --> 00:07:18,069
very specific and they are small but

00:07:15,729 --> 00:07:19,900
significant differences between the

00:07:18,069 --> 00:07:26,440
various product the vendors put out

00:07:19,900 --> 00:07:30,279
there so with the sp2 now we will add

00:07:26,440 --> 00:07:33,969
that we have no as you can see 32-bit

00:07:30,279 --> 00:07:37,599
our support here any longer with sleet

00:07:33,969 --> 00:07:44,310
12 we added with Slee 11 but we dropped

00:07:37,599 --> 00:07:48,940
it on the code 12 side and that's also a

00:07:44,310 --> 00:07:55,719
slight difference so let's look a little

00:07:48,940 --> 00:07:58,210
bit at the lifecycle openSUSE leap yeah

00:07:55,719 --> 00:08:02,319
regularly releases you know it we use

00:07:58,210 --> 00:08:07,029
the core sources from the enterprise the

00:08:02,319 --> 00:08:10,659
advantage there clear stability it's

00:08:07,029 --> 00:08:13,150
well tested we have our GA looking at

00:08:10,659 --> 00:08:16,750
that stuff very closely in the course of

00:08:13,150 --> 00:08:19,029
developing this lee products you see

00:08:16,750 --> 00:08:23,039
here the major leap releases are

00:08:19,029 --> 00:08:23,039
supported for at least thirty six months

00:08:23,279 --> 00:08:28,490
the minor releases yeah

00:08:26,390 --> 00:08:30,950
it's mentioned here to be released

00:08:28,490 --> 00:08:38,240
annually we follow here on the leap side

00:08:30,950 --> 00:08:41,120
this Lee release cycle on the other side

00:08:38,240 --> 00:08:42,950
while this may look complicated it even

00:08:41,120 --> 00:08:45,170
gets more complicated if you come to the

00:08:42,950 --> 00:08:48,800
enterprise side where it's relatively

00:08:45,170 --> 00:08:51,200
easy when we talk about a code stream we

00:08:48,800 --> 00:08:55,910
are talking about 10 plus years of

00:08:51,200 --> 00:09:00,470
support though that means whatever we

00:08:55,910 --> 00:09:05,120
bring out as code 12 SP 0 it will not

00:09:00,470 --> 00:09:07,660
die before that time has ended we are

00:09:05,120 --> 00:09:13,600
currently with code 12 bringing out

00:09:07,660 --> 00:09:20,300
annually service packs currently we are

00:09:13,600 --> 00:09:22,280
here we are working on sp2 so you see if

00:09:20,300 --> 00:09:24,620
you count now down you will see when we

00:09:22,280 --> 00:09:30,440
had released Slee 12 and we are still

00:09:24,620 --> 00:09:32,530
supporting it of course 10 years general

00:09:30,440 --> 00:09:35,120
support that means we are actively

00:09:32,530 --> 00:09:38,360
producing a lot of maintenance update

00:09:35,120 --> 00:09:41,360
fixes supporting it and then there's

00:09:38,360 --> 00:09:45,140
three year of extended support as well

00:09:41,360 --> 00:09:48,260
as LTSs where I should mention that for

00:09:45,140 --> 00:09:52,700
LTSs you have to pay additional fees and

00:09:48,260 --> 00:09:56,960
then you get a prolonged lifetime so you

00:09:52,700 --> 00:10:00,620
could even nowaday if you look at the

00:09:56,960 --> 00:10:02,450
top line with sp2 out we would normally

00:10:00,620 --> 00:10:07,910
not support you if you're running on the

00:10:02,450 --> 00:10:11,060
arm GA version but if you bought LTSs

00:10:07,910 --> 00:10:14,690
you will still be supported until way

00:10:11,060 --> 00:10:18,560
after sp2 is out and sp3 has been

00:10:14,690 --> 00:10:20,420
developed which adds of course a certain

00:10:18,560 --> 00:10:23,020
amount of burden to us and our

00:10:20,420 --> 00:10:23,020
developers

00:10:23,459 --> 00:10:29,519
just to give you an impression think

00:10:25,290 --> 00:10:32,069
about of Firefox 10 years ago how it

00:10:29,519 --> 00:10:34,290
looked like and how the code was or take

00:10:32,069 --> 00:10:38,639
the project you're working on am using

00:10:34,290 --> 00:10:41,910
most ly all day arm 10 years ago long

00:10:38,639 --> 00:10:47,220
time think of you have to fix a back

00:10:41,910 --> 00:10:52,519
there now immediately in a day so you

00:10:47,220 --> 00:10:55,290
can imagine that makes it very hard and

00:10:52,519 --> 00:10:58,740
that's quite a lot of burden and that's

00:10:55,290 --> 00:11:00,660
why we have very strict rules and why we

00:10:58,740 --> 00:11:02,939
are very selective on what packages we

00:11:00,660 --> 00:11:05,939
add you don't want to have a package

00:11:02,939 --> 00:11:08,819
there where you have constant bug fixes

00:11:05,939 --> 00:11:10,889
root exploit or anything else you don't

00:11:08,819 --> 00:11:18,029
want anything there that's unstable and

00:11:10,889 --> 00:11:22,769
causes your system to crash remember

00:11:18,029 --> 00:11:25,439
what we have seen there are a lot of

00:11:22,769 --> 00:11:28,589
service packs but not all of these

00:11:25,439 --> 00:11:31,649
service packs are equal so we've code 12

00:11:28,589 --> 00:11:35,910
we have switched a little bit from what

00:11:31,649 --> 00:11:39,899
we had in code 11 and we have now two

00:11:35,910 --> 00:11:42,119
types of service packs we call them

00:11:39,899 --> 00:11:46,679
refresh releases and consolidation

00:11:42,119 --> 00:11:49,980
releases why do we do this look at this

00:11:46,679 --> 00:11:52,619
you see every year a new service pack

00:11:49,980 --> 00:11:55,379
imagine you have tens of thousands of

00:11:52,619 --> 00:11:59,490
servers and we ask you every year to

00:11:55,379 --> 00:12:03,389
update all of them you can imagine what

00:11:59,490 --> 00:12:06,329
the ends of that would be I personally

00:12:03,389 --> 00:12:09,689
don't want to do that but on the other

00:12:06,329 --> 00:12:12,449
side there are things where you need new

00:12:09,689 --> 00:12:13,980
stuff where you need a new kernel for

00:12:12,449 --> 00:12:17,850
hardware support fire and everything

00:12:13,980 --> 00:12:20,660
else so we splitted this up in refresh

00:12:17,850 --> 00:12:23,690
releases and consolidation releases

00:12:20,660 --> 00:12:27,649
well the refresh releases all the big

00:12:23,690 --> 00:12:29,870
service packs that means we do for

00:12:27,649 --> 00:12:35,149
example a colonel major version update

00:12:29,870 --> 00:12:37,610
upgrade the X upgrade several versions

00:12:35,149 --> 00:12:40,730
of critical components I mentioned here

00:12:37,610 --> 00:12:44,060
system d because it's always a little

00:12:40,730 --> 00:12:48,050
bit of painful there your 30 yesterday

00:12:44,060 --> 00:12:51,139
about the gnome update from Frederick so

00:12:48,050 --> 00:12:54,620
you should be aware currently sp2 is one

00:12:51,139 --> 00:12:56,750
of these refresh releases and we have

00:12:54,620 --> 00:12:59,870
the consolidation releases where we try

00:12:56,750 --> 00:13:04,579
to stabilize what we have to fix all the

00:12:59,870 --> 00:13:10,879
bugs that are open and to make the

00:13:04,579 --> 00:13:15,670
system overall yeah fit to stay in that

00:13:10,879 --> 00:13:18,680
amount or in that degree to a long time

00:13:15,670 --> 00:13:21,110
currently the sp1 that is out is one of

00:13:18,680 --> 00:13:24,529
these consolidation releases where we

00:13:21,110 --> 00:13:26,660
have stabilized and put the emphasis on

00:13:24,529 --> 00:13:29,630
bug fixing but of course we are

00:13:26,660 --> 00:13:31,759
engineers so a few features always one

00:13:29,630 --> 00:13:35,660
day in that refresh release and the

00:13:31,759 --> 00:13:40,310
consolidation releases so it's not so

00:13:35,660 --> 00:13:43,009
strict and be aware the bug fix for one

00:13:40,310 --> 00:13:44,899
customer is a feature for the next

00:13:43,009 --> 00:13:47,660
customer and the other way around

00:13:44,899 --> 00:13:52,130
sometimes it's not quite clear is it now

00:13:47,660 --> 00:13:54,410
a bug fix or is it a new feature so yeah

00:13:52,130 --> 00:13:58,180
we solve this by saying we allow a

00:13:54,410 --> 00:13:58,180
certain amount of new features their

00:13:58,630 --> 00:14:07,430
package selections I talked about that

00:14:01,220 --> 00:14:11,180
already a little bit customers have a

00:14:07,430 --> 00:14:13,370
very simple view of the world they want

00:14:11,180 --> 00:14:15,050
everything the same except of that

00:14:13,370 --> 00:14:17,089
things that matters to them and that

00:14:15,050 --> 00:14:21,709
they want refreshed but everything else

00:14:17,089 --> 00:14:25,250
should stay the same they want fewer box

00:14:21,709 --> 00:14:27,259
at least if possible non or in things

00:14:25,250 --> 00:14:29,209
they don't use they want stable

00:14:27,259 --> 00:14:31,939
interfaces because their application

00:14:29,209 --> 00:14:35,389
that they have should go and work

00:14:31,939 --> 00:14:37,489
um they want to know when a fix is

00:14:35,389 --> 00:14:41,569
available if they have stumbled over

00:14:37,489 --> 00:14:43,399
something they hate regressions so if we

00:14:41,569 --> 00:14:45,909
do a service pack update and something

00:14:43,399 --> 00:14:53,059
is no longer working afterwards

00:14:45,909 --> 00:14:55,089
catastrophe yeah they want a huge number

00:14:53,059 --> 00:14:58,399
of applications that we should support

00:14:55,089 --> 00:15:00,169
best everything that they use even if we

00:14:58,399 --> 00:15:05,389
have no control about it even if its

00:15:00,169 --> 00:15:07,939
proprietary software and there they want

00:15:05,389 --> 00:15:12,769
to own a lot of these customers are very

00:15:07,939 --> 00:15:15,259
conservative so updates or changes not

00:15:12,769 --> 00:15:20,239
good except for that one application

00:15:15,259 --> 00:15:24,349
that they need on the other side they

00:15:20,239 --> 00:15:25,999
want us also to be very fast to support

00:15:24,349 --> 00:15:30,979
the latest hardware that's out there

00:15:25,999 --> 00:15:33,499
best before it's available they want us

00:15:30,979 --> 00:15:35,959
to be innovative so the latest and

00:15:33,499 --> 00:15:39,859
greatest stuff being there but it should

00:15:35,959 --> 00:15:44,329
be stable they have feature requests

00:15:39,859 --> 00:15:46,579
that go in every direction different

00:15:44,329 --> 00:15:49,669
form factors remember when we had that

00:15:46,579 --> 00:15:53,739
change from the desktops to the tablets

00:15:49,669 --> 00:15:58,429
to the smartphones there's newer

00:15:53,739 --> 00:16:00,259
requests coming in day by day and think

00:15:58,429 --> 00:16:02,359
about also about the virtualization

00:16:00,259 --> 00:16:07,309
which is for a lot of these customers

00:16:02,359 --> 00:16:10,489
just a kind of form factor yeah and stay

00:16:07,309 --> 00:16:15,799
current the last thing they want the

00:16:10,489 --> 00:16:20,029
latest and greatest now you remember we

00:16:15,799 --> 00:16:22,629
had that long support lifetime that is a

00:16:20,029 --> 00:16:25,909
little bit of a problem here because

00:16:22,629 --> 00:16:28,429
always updating producing the latest and

00:16:25,909 --> 00:16:31,399
greatest and keeping the same old stuff

00:16:28,429 --> 00:16:33,080
at the same time is difficult so we

00:16:31,399 --> 00:16:37,700
looked about that

00:16:33,080 --> 00:16:43,070
and our solution to that was that we

00:16:37,700 --> 00:16:44,900
came up with the concept of modules you

00:16:43,070 --> 00:16:47,900
will now say modules I haven't read that

00:16:44,900 --> 00:16:51,020
on the arm product overview at the

00:16:47,900 --> 00:16:53,480
beginning that's correct because these

00:16:51,020 --> 00:16:56,000
modules are components of the life of

00:16:53,480 --> 00:16:58,490
the server product so if you buy a

00:16:56,000 --> 00:17:00,890
server product and you register it you

00:16:58,490 --> 00:17:04,310
get these components for free on top of

00:17:00,890 --> 00:17:06,860
it they are fully supported they are

00:17:04,310 --> 00:17:10,490
only delivered online so you can get an

00:17:06,860 --> 00:17:13,580
ISO image download somewhere they have a

00:17:10,490 --> 00:17:16,940
flexible life cycle you will see later

00:17:13,580 --> 00:17:19,070
in one of the slides what that means but

00:17:16,940 --> 00:17:22,160
in the end it means we can put their

00:17:19,070 --> 00:17:26,630
stuff that changes very rapidly think

00:17:22,160 --> 00:17:29,360
about of some scripting languages think

00:17:26,630 --> 00:17:31,580
about of packages where we want the

00:17:29,360 --> 00:17:35,900
customers to be able to move to newer

00:17:31,580 --> 00:17:39,320
ones for example old send mail or old

00:17:35,900 --> 00:17:41,330
Java versions if you have still the need

00:17:39,320 --> 00:17:44,390
for an old Java version and cannot go to

00:17:41,330 --> 00:17:47,510
the latest and greatest there this is

00:17:44,390 --> 00:17:50,120
our way of providing it where we say you

00:17:47,510 --> 00:17:52,150
have a certain amount of time where is a

00:17:50,120 --> 00:17:55,520
little bit from module to module and

00:17:52,150 --> 00:17:57,530
then you should have migrated your

00:17:55,520 --> 00:18:06,380
applications to a newer version and

00:17:57,530 --> 00:18:08,630
tested if it works or not you may ask

00:18:06,380 --> 00:18:10,190
what is a module a module is nothing

00:18:08,630 --> 00:18:14,180
more than a collection of software

00:18:10,190 --> 00:18:17,060
packages simply put it's a repository

00:18:14,180 --> 00:18:21,040
that you simply add I think tomorrow or

00:18:17,060 --> 00:18:21,040
the day after that you will hear from

00:18:21,520 --> 00:18:26,360
one of the colleagues about what he

00:18:25,040 --> 00:18:32,900
thinks about adding more and more

00:18:26,360 --> 00:18:35,170
repositories but we tried to make it

00:18:32,900 --> 00:18:38,000
very easy for the customers to get these

00:18:35,170 --> 00:18:40,040
packages and the most easiest way is

00:18:38,000 --> 00:18:43,220
adding a repository and make it very

00:18:40,040 --> 00:18:45,770
transparent so that you can handle it in

00:18:43,220 --> 00:18:46,340
your package manager like the rest of us

00:18:45,770 --> 00:18:49,549
or one

00:18:46,340 --> 00:18:51,110
it's enabled you won't see a difference

00:18:49,549 --> 00:18:56,570
there if it comes from this or that

00:18:51,110 --> 00:18:58,250
repository the modules are set up that

00:18:56,570 --> 00:19:00,770
they are independent of each other so

00:18:58,250 --> 00:19:04,640
you can decide to use one and ignore the

00:19:00,770 --> 00:19:07,700
rest or you can add all of them however

00:19:04,640 --> 00:19:09,860
you do it it doesn't matter it's

00:19:07,700 --> 00:19:13,909
currently only available for the suse

00:19:09,860 --> 00:19:16,520
linux enterprise we are discussing of

00:19:13,909 --> 00:19:18,890
adding some of those also to other of

00:19:16,520 --> 00:19:21,740
the base products but at the time being

00:19:18,890 --> 00:19:27,260
we have from our customer requests only

00:19:21,740 --> 00:19:30,710
a need here on the server side important

00:19:27,260 --> 00:19:34,730
the last part here the different life

00:19:30,710 --> 00:19:36,500
cycle of the core product so that's

00:19:34,730 --> 00:19:42,260
important for us as well as our

00:19:36,500 --> 00:19:44,929
customers on the implementation side

00:19:42,260 --> 00:19:47,350
it's very transparent either you edit

00:19:44,929 --> 00:19:49,970
doing the installation of the product or

00:19:47,350 --> 00:19:52,700
you can do it later in an installed

00:19:49,970 --> 00:19:55,130
system Isis rust or to Souza connect

00:19:52,700 --> 00:19:58,909
it's only available online I already

00:19:55,130 --> 00:20:02,899
said this it's not a pattern and it's

00:19:58,909 --> 00:20:08,659
not a product so you can't buy that you

00:20:02,899 --> 00:20:12,409
just get it for free I fear a small list

00:20:08,659 --> 00:20:18,470
of the available modules and I admit

00:20:12,409 --> 00:20:20,600
that one is missing so you see here we

00:20:18,470 --> 00:20:25,010
have for example right at the top the

00:20:20,600 --> 00:20:33,470
advanced systems management module which

00:20:25,010 --> 00:20:39,080
arm contains for example the CF engine

00:20:33,470 --> 00:20:42,789
puppet the machinery tool and we are

00:20:39,080 --> 00:20:47,659
currently discussing of adding salt here

00:20:42,789 --> 00:20:50,809
so this is for those that need these

00:20:47,659 --> 00:20:53,809
types of relatively fast changing

00:20:50,809 --> 00:20:56,330
systems frankly speaking I would not

00:20:53,809 --> 00:20:58,429
like to have a puppet or a CF engine in

00:20:56,330 --> 00:20:59,990
the main core media where we have

00:20:58,429 --> 00:21:03,170
certain years of support

00:20:59,990 --> 00:21:06,700
where we need to be very careful of what

00:21:03,170 --> 00:21:09,470
we had and how often we upgrade arm

00:21:06,700 --> 00:21:11,660
therefore we have put it outside in a

00:21:09,470 --> 00:21:14,360
module the container module where we

00:21:11,660 --> 00:21:18,710
have all the current additional stuff

00:21:14,360 --> 00:21:20,300
that includes for example also images

00:21:18,710 --> 00:21:23,000
that are prepared for the darker side

00:21:20,300 --> 00:21:26,030
and the good thing is if you download

00:21:23,000 --> 00:21:29,360
the base system this less site and you

00:21:26,030 --> 00:21:31,700
don't need anything of that you don't

00:21:29,360 --> 00:21:33,890
have to download it so it's just on

00:21:31,700 --> 00:21:37,280
demand if you need it and that's very

00:21:33,890 --> 00:21:39,800
important for a lot of our customers the

00:21:37,280 --> 00:21:43,030
legacy module you see here old send mail

00:21:39,800 --> 00:21:45,200
chavez deck things like that and

00:21:43,030 --> 00:21:48,350
important here we have a different life

00:21:45,200 --> 00:21:51,410
cycle for each of these so we have a

00:21:48,350 --> 00:21:53,990
kind of in continuous integration here

00:21:51,410 --> 00:21:56,780
for the first two you see where we

00:21:53,990 --> 00:21:59,630
expect a lot of fast coming changes and

00:21:56,780 --> 00:22:02,360
we want our customers to be able to get

00:21:59,630 --> 00:22:05,950
that but on the other side the legacy

00:22:02,360 --> 00:22:08,570
module where we have the old cha side

00:22:05,950 --> 00:22:10,750
you don't want to have or you don't

00:22:08,570 --> 00:22:13,220
expect you to have updates every month

00:22:10,750 --> 00:22:17,090
you expect them if there is a serious

00:22:13,220 --> 00:22:19,220
security issue but beside of that this

00:22:17,090 --> 00:22:21,230
will be supported for three years which

00:22:19,220 --> 00:22:25,850
gives the customers enough time to

00:22:21,230 --> 00:22:27,800
migrate to the newer stuff important

00:22:25,850 --> 00:22:31,040
here also the toolchain module if you

00:22:27,800 --> 00:22:35,630
have always wondered why has the server

00:22:31,040 --> 00:22:38,450
the old GCC 48 well it's easy we want

00:22:35,630 --> 00:22:42,770
the backward compatibility we don't want

00:22:38,450 --> 00:22:45,320
to have any breakages there but on the

00:22:42,770 --> 00:22:48,400
runtime side we are able to run stuff

00:22:45,320 --> 00:22:52,790
that has been compiled with GCC 5 or

00:22:48,400 --> 00:22:58,040
soon GCC 6 the toolchain module has the

00:22:52,790 --> 00:23:00,650
compiler for GCC 5 currently it will

00:22:58,040 --> 00:23:04,490
have like that this year the GCC six

00:23:00,650 --> 00:23:06,630
compiler but the run time will be

00:23:04,490 --> 00:23:11,820
delivered also for the base products

00:23:06,630 --> 00:23:15,240
a short overview how this all fits

00:23:11,820 --> 00:23:21,290
together I've left out a few things so

00:23:15,240 --> 00:23:25,350
the solid driver program is for partners

00:23:21,290 --> 00:23:29,220
providing driver updates drivers for

00:23:25,350 --> 00:23:32,970
specific hardware we have less and the

00:23:29,220 --> 00:23:36,630
product here with the modules we have

00:23:32,970 --> 00:23:39,300
the SDK and we have the package hub I

00:23:36,630 --> 00:23:41,670
will not say anything about that because

00:23:39,300 --> 00:23:46,830
Scott will have a presentation i think

00:23:41,670 --> 00:23:49,680
tomorrow right shot i recommend that

00:23:46,830 --> 00:23:53,220
really it's our solution to add things

00:23:49,680 --> 00:23:55,350
to the enterprise universe that we

00:23:53,220 --> 00:24:01,500
cannot provide at the moment with the

00:23:55,350 --> 00:24:03,210
current structure so if you look at the

00:24:01,500 --> 00:24:08,070
differences we have between the

00:24:03,210 --> 00:24:11,640
enterprise universe and the opensuse for

00:24:08,070 --> 00:24:15,300
one thing it's across the stability NT

00:24:11,640 --> 00:24:19,310
the enterprise hardening our enterprise

00:24:15,300 --> 00:24:22,640
customers ask for a lot of testing I

00:24:19,310 --> 00:24:25,350
have a lot of complicated sin areas that

00:24:22,640 --> 00:24:30,030
most of the home users will never ever

00:24:25,350 --> 00:24:33,230
see complex scenarios be it from the

00:24:30,030 --> 00:24:37,050
network side up to us stacked

00:24:33,230 --> 00:24:40,410
virtualization machines and other things

00:24:37,050 --> 00:24:44,210
so we do hear a lot of testing also

00:24:40,410 --> 00:24:51,420
together with our partners so if you buy

00:24:44,210 --> 00:24:54,540
an IBM machine iBM has tested the store

00:24:51,420 --> 00:24:57,900
their stuff there the drivers are tested

00:24:54,540 --> 00:25:02,340
everything is hopefully in a very good

00:24:57,900 --> 00:25:05,360
state and that's something that's very

00:25:02,340 --> 00:25:09,990
important for the customers outside

00:25:05,360 --> 00:25:12,030
certifications don't nail me on the 6000

00:25:09,990 --> 00:25:14,850
commercial packages here it might be

00:25:12,030 --> 00:25:18,150
more or less depends a little bit on the

00:25:14,850 --> 00:25:19,539
code stream so for cody 11 it's more for

00:25:18,150 --> 00:25:24,820
code 12

00:25:19,539 --> 00:25:27,159
it should be around that um we have

00:25:24,820 --> 00:25:30,340
certification but a hardware specific as

00:25:27,159 --> 00:25:35,200
well as certifications that are specific

00:25:30,340 --> 00:25:38,700
to software like the fifth certification

00:25:35,200 --> 00:25:42,220
that's important on government site or

00:25:38,700 --> 00:25:47,679
other things which are hardware-specific

00:25:42,220 --> 00:25:50,409
then indemnification you know it

00:25:47,679 --> 00:25:54,749
sometimes people threaten to sue the

00:25:50,409 --> 00:26:00,460
open source world with various loss mute

00:25:54,749 --> 00:26:01,989
we protect our customers here and that's

00:26:00,460 --> 00:26:06,700
something we only offer for the

00:26:01,989 --> 00:26:09,279
enterprise product and very important

00:26:06,700 --> 00:26:11,529
also the guaranteed response time for

00:26:09,279 --> 00:26:13,960
else Reeboks so if one of our customer

00:26:11,529 --> 00:26:16,359
comes and says oh my system that serves

00:26:13,960 --> 00:26:19,299
10,000 service is down can you help me

00:26:16,359 --> 00:26:27,220
we have a back here we do so and we do

00:26:19,299 --> 00:26:29,229
it in a timely manner and very fast the

00:26:27,220 --> 00:26:31,869
default configuration in the runtime is

00:26:29,229 --> 00:26:39,909
also different between opensuse ainsley

00:26:31,869 --> 00:26:41,799
but that's I think a natural thing but

00:26:39,909 --> 00:26:45,519
there are also things where we where we

00:26:41,799 --> 00:26:48,999
don't differ so much so we're using the

00:26:45,519 --> 00:26:51,369
same tools to prove use the stuff we use

00:26:48,999 --> 00:26:54,489
the build service we use open QA views

00:26:51,369 --> 00:26:57,999
bugzilla the first two we just have

00:26:54,489 --> 00:26:59,710
different instances so the best the open

00:26:57,999 --> 00:27:01,960
build service and there's an internal

00:26:59,710 --> 00:27:03,789
build service which is simply due to the

00:27:01,960 --> 00:27:09,179
fact that we have different platforms as

00:27:03,789 --> 00:27:11,950
well as that we need a certain amount of

00:27:09,179 --> 00:27:15,239
response time when building so we have

00:27:11,950 --> 00:27:17,919
reserved machines they're open QA of

00:27:15,239 --> 00:27:19,570
course two different instances because

00:27:17,919 --> 00:27:22,210
we have completely different sets of

00:27:19,570 --> 00:27:26,290
hardware different sets of

00:27:22,210 --> 00:27:29,460
cases that we run but we profit on both

00:27:26,290 --> 00:27:34,270
sides for that because tests that are

00:27:29,460 --> 00:27:37,090
able to run on both are run on both and

00:27:34,270 --> 00:27:39,070
of course we try to use the findings

00:27:37,090 --> 00:27:40,870
that we find out in the open suicide as

00:27:39,070 --> 00:27:46,090
well on this lee side and the other way

00:27:40,870 --> 00:27:49,540
around sometimes we forgot about it but

00:27:46,090 --> 00:27:51,670
it's very important that opensuse is the

00:27:49,540 --> 00:27:54,970
base of the enterprise product so

00:27:51,670 --> 00:27:57,220
everything you do in tumbleweed sooner

00:27:54,970 --> 00:28:00,040
or later ends up in an enterprise

00:27:57,220 --> 00:28:05,980
product give or take the package

00:28:00,040 --> 00:28:09,960
selection so opensuse and its products

00:28:05,980 --> 00:28:12,760
are upstream for us which is good

00:28:09,960 --> 00:28:14,740
sometimes we suffer then from the same

00:28:12,760 --> 00:28:19,090
problems that everybody suffers with

00:28:14,740 --> 00:28:23,350
upstream but since we are based on the

00:28:19,090 --> 00:28:26,380
same code base and if we go further than

00:28:23,350 --> 00:28:27,700
dope Susan the same upstream product we

00:28:26,380 --> 00:28:29,590
have a lot of things in common and

00:28:27,700 --> 00:28:32,020
that's very very good we are diverting

00:28:29,590 --> 00:28:36,130
later a little bit because you have seen

00:28:32,020 --> 00:28:38,800
with that long lifetime that means also

00:28:36,130 --> 00:28:40,600
we are very reluctant of going with the

00:28:38,800 --> 00:28:43,930
latest and greatest version I had it

00:28:40,600 --> 00:28:46,570
this morning a discussion about version

00:28:43,930 --> 00:28:49,170
and upgrades of version we have to be

00:28:46,570 --> 00:28:54,370
very careful if you do a version upgrade

00:28:49,170 --> 00:28:57,670
simply because we want the stability we

00:28:54,370 --> 00:29:00,190
want no regressions and customers get

00:28:57,670 --> 00:29:04,270
very nervous if they see a big change on

00:29:00,190 --> 00:29:07,890
the version numbers that doesn't mean we

00:29:04,270 --> 00:29:07,890
don't do it but we're careful

00:29:08,700 --> 00:29:17,490
and very important every package submit

00:29:14,760 --> 00:29:21,620
we do on this lee code base is going

00:29:17,490 --> 00:29:25,770
through a review just like it's done on

00:29:21,620 --> 00:29:27,720
opensuse but we have any requirement

00:29:25,770 --> 00:29:30,510
that everything you submit their also

00:29:27,720 --> 00:29:33,920
goes into the respective devil project

00:29:30,510 --> 00:29:38,310
or factory project outside on the OBS

00:29:33,920 --> 00:29:44,850
that means if a developer gets a back

00:29:38,310 --> 00:29:47,730
for less 12 sp1 fixes it submits it we

00:29:44,850 --> 00:29:50,250
have we look at it we check if the same

00:29:47,730 --> 00:29:53,940
fix is already an upstream which for us

00:29:50,250 --> 00:29:57,960
is opensuse and check is that in the

00:29:53,940 --> 00:30:00,600
devil project or maybe already in one of

00:29:57,960 --> 00:30:04,950
the products if it is everything is fine

00:30:00,600 --> 00:30:10,050
we accept it case closed if it's not it

00:30:04,950 --> 00:30:11,970
gets complicated there are fixes that

00:30:10,050 --> 00:30:13,640
doesn't make sense to have it outside

00:30:11,970 --> 00:30:16,350
either because they are very

00:30:13,640 --> 00:30:20,000
platform-specific where is Lee specific

00:30:16,350 --> 00:30:23,430
think of a fix for a configuration there

00:30:20,000 --> 00:30:26,880
there are fixes where we say we have

00:30:23,430 --> 00:30:30,300
diverted so much that we need to look

00:30:26,880 --> 00:30:32,220
carefully is it sensible to edit to open

00:30:30,300 --> 00:30:34,770
suse it or don't they suffer from it

00:30:32,220 --> 00:30:38,310
because they are already 15 version

00:30:34,770 --> 00:30:41,100
further ahead in that package it will

00:30:38,310 --> 00:30:42,630
never suffer from it and there are few

00:30:41,100 --> 00:30:44,970
things where we have diverted in the

00:30:42,630 --> 00:30:47,430
past so much that we are still

00:30:44,970 --> 00:30:49,470
struggling to get it re-emerged together

00:30:47,430 --> 00:30:52,590
with what we have here on the open

00:30:49,470 --> 00:30:55,200
suicide in an ideal world everything

00:30:52,590 --> 00:30:58,560
that we get submitted to slee will also

00:30:55,200 --> 00:31:03,360
end up in opensuse we are not there yet

00:30:58,560 --> 00:31:07,860
but we are very close to it so we are

00:31:03,360 --> 00:31:09,420
doing a good job in my opinion of making

00:31:07,860 --> 00:31:12,130
sure for that

00:31:09,420 --> 00:31:15,250
the biggest problem we currently see

00:31:12,130 --> 00:31:18,490
here is we just check that there is a

00:31:15,250 --> 00:31:20,530
submission to the devil project but we

00:31:18,490 --> 00:31:24,760
cannot of course make sure that it ends

00:31:20,530 --> 00:31:26,620
up then in the factory project the devil

00:31:24,760 --> 00:31:32,260
project of the respective package in

00:31:26,620 --> 00:31:36,640
case you're wondering we are also facing

00:31:32,260 --> 00:31:41,200
the same problems in opensuse if your

00:31:36,640 --> 00:31:43,450
package maintainer the upstream project

00:31:41,200 --> 00:31:47,440
if you are knotted yourself sometimes

00:31:43,450 --> 00:31:50,440
makes decision that you don't like let's

00:31:47,440 --> 00:31:53,740
say it in that way and we are facing on

00:31:50,440 --> 00:31:56,230
this lee side that even more because if

00:31:53,740 --> 00:31:59,679
there's a decision done for tumbleweed

00:31:56,230 --> 00:32:03,010
of what direction to go of were to spend

00:31:59,679 --> 00:32:05,500
time with development it could be

00:32:03,010 --> 00:32:07,750
something let's take as example the

00:32:05,500 --> 00:32:09,280
desktop we had yesterday what will be

00:32:07,750 --> 00:32:12,130
the default desktop which will be

00:32:09,280 --> 00:32:16,480
concentrate if you would decide now we

00:32:12,130 --> 00:32:18,610
drop gnome completely from tumbleweed it

00:32:16,480 --> 00:32:21,760
would be a little bit of problematic for

00:32:18,610 --> 00:32:25,179
us I don't think you do that it's that's

00:32:21,760 --> 00:32:27,340
why I use that example we all know that

00:32:25,179 --> 00:32:29,950
it can be tricky to influence upstream

00:32:27,340 --> 00:32:32,860
of course the enterprise guys want to

00:32:29,950 --> 00:32:34,480
influence also the opensuse guys to go a

00:32:32,860 --> 00:32:38,970
little bit in one direction or the other

00:32:34,480 --> 00:32:42,190
way we think it's useful to do so and

00:32:38,970 --> 00:32:45,610
you know how it is with communities the

00:32:42,190 --> 00:32:48,100
opinions there are widespread so if we

00:32:45,610 --> 00:32:49,960
say we would like to see this that

00:32:48,100 --> 00:32:52,390
doesn't mean that everybody sees it that

00:32:49,960 --> 00:32:55,000
way not even inside of the enterprise

00:32:52,390 --> 00:32:58,540
community so we are struggling there and

00:32:55,000 --> 00:33:03,940
we have the same problems in both worlds

00:32:58,540 --> 00:33:06,940
with the fact that we are all humans and

00:33:03,940 --> 00:33:11,980
when I looked at it then I came up with

00:33:06,940 --> 00:33:14,330
a third type of things or points

00:33:11,980 --> 00:33:17,270
well I'm not sure if we are similar or

00:33:14,330 --> 00:33:19,670
if you're different because on a certain

00:33:17,270 --> 00:33:24,370
degree we are different but on the other

00:33:19,670 --> 00:33:27,080
side we are not so different package

00:33:24,370 --> 00:33:31,850
reviews submit reviews I mentioned it

00:33:27,080 --> 00:33:35,030
earlier they are done for opensuse they

00:33:31,850 --> 00:33:38,480
are done for the sleep products mostly

00:33:35,030 --> 00:33:40,040
the same rules apply so if you wonder

00:33:38,480 --> 00:33:43,490
what are the rules on the enterprise

00:33:40,040 --> 00:33:46,520
site to get a fix submitted look at the

00:33:43,490 --> 00:33:49,460
opensuse rules most of them are

00:33:46,520 --> 00:33:52,370
identical we have a few ones where we

00:33:49,460 --> 00:33:55,790
are more strict and where we are more

00:33:52,370 --> 00:33:59,120
relaxed but in the end they are nearly

00:33:55,790 --> 00:34:02,600
similar one of the things we for example

00:33:59,120 --> 00:34:05,180
ask for is is back numbers fate numbers

00:34:02,600 --> 00:34:08,179
but there are cases where we also say no

00:34:05,180 --> 00:34:09,830
we don't need them it's okay in that way

00:34:08,179 --> 00:34:15,230
because it's just a bill to fix or

00:34:09,830 --> 00:34:18,260
something like that arm on the packages

00:34:15,230 --> 00:34:20,810
that get submitted for example if you

00:34:18,260 --> 00:34:23,240
rebase your packages you don't need to

00:34:20,810 --> 00:34:25,010
mention all the packages I petrus there

00:34:23,240 --> 00:34:27,500
in the package that you have rebased

00:34:25,010 --> 00:34:29,450
it's enough if you say we did it if you

00:34:27,500 --> 00:34:32,540
do a big version update we are fine with

00:34:29,450 --> 00:34:37,000
having said we have a new version update

00:34:32,540 --> 00:34:42,260
we drop all the pictures we accept that

00:34:37,000 --> 00:34:44,179
and of course the interpretation of all

00:34:42,260 --> 00:34:46,520
these rules is a little bit different

00:34:44,179 --> 00:34:49,700
between opensuse reviewers and sleeve

00:34:46,520 --> 00:34:52,640
reviewers I admit hear that it's also

00:34:49,700 --> 00:34:55,730
different by the sleeve reviewers inside

00:34:52,640 --> 00:34:57,560
so depending on who does it it might be

00:34:55,730 --> 00:35:03,050
that one thing is okay and the other not

00:34:57,560 --> 00:35:05,120
but we try to be very harm much on the

00:35:03,050 --> 00:35:07,790
same level they at least inside of the

00:35:05,120 --> 00:35:11,770
much smallest lee review group that we

00:35:07,790 --> 00:35:15,410
have compared to Susan

00:35:11,770 --> 00:35:18,859
the configuration options it's natural

00:35:15,410 --> 00:35:21,109
it doesn't mean the change for the

00:35:18,859 --> 00:35:25,220
building time he will say of course they

00:35:21,109 --> 00:35:29,359
do but sometimes develop a forget about

00:35:25,220 --> 00:35:33,460
that for example opensuse Wayland do we

00:35:29,359 --> 00:35:36,319
have it on or off who would know that

00:35:33,460 --> 00:35:40,760
currently it's on as far as I know on

00:35:36,319 --> 00:35:43,609
the flea side we've disabled it which

00:35:40,760 --> 00:35:45,349
gives you on some builds completely

00:35:43,609 --> 00:35:49,579
different problems than you have never

00:35:45,349 --> 00:35:53,270
seen before and that makes it all so

00:35:49,579 --> 00:35:59,390
different and sometimes hard for us to

00:35:53,270 --> 00:36:02,260
work and of course the s390x platform i

00:35:59,390 --> 00:36:05,150
mentioned it because I've colleagues for

00:36:02,260 --> 00:36:09,290
driving very much the project to get

00:36:05,150 --> 00:36:11,750
this also on the OBS working it will

00:36:09,290 --> 00:36:16,579
come sooner or later we would like to

00:36:11,750 --> 00:36:18,380
see it we see their problems and things

00:36:16,579 --> 00:36:21,589
that are good that we would like to give

00:36:18,380 --> 00:36:23,420
you to the outside too but I'm pretty

00:36:21,589 --> 00:36:31,010
sure most of you that are here don't

00:36:23,420 --> 00:36:32,630
have an s390x at home a short outlook

00:36:31,010 --> 00:36:36,079
and it will be really short because

00:36:32,630 --> 00:36:38,420
otherwise I will run out of time you see

00:36:36,079 --> 00:36:40,760
here the timeline Ludwick talked

00:36:38,420 --> 00:36:44,750
yesterday about where he is with the

00:36:40,760 --> 00:36:52,190
fleet we have released on this lee side

00:36:44,750 --> 00:36:54,760
for SP 2 Peter 3 last week and in one

00:36:52,190 --> 00:37:00,560
and a half weeks we will release beta 4

00:36:54,760 --> 00:37:02,420
so we are currently going towards the RC

00:37:00,560 --> 00:37:05,420
face where we are very strict with what

00:37:02,420 --> 00:37:08,569
we apply and what we do I already

00:37:05,420 --> 00:37:10,849
mentioned it as p2 is a refresh release

00:37:08,569 --> 00:37:13,250
so it means we have a kernel version

00:37:10,849 --> 00:37:16,490
upgrade with a system the upgrade

00:37:13,250 --> 00:37:17,890
hardware is recertifications should stay

00:37:16,490 --> 00:37:21,090
stable

00:37:17,890 --> 00:37:24,220
a little bit on the details you have

00:37:21,090 --> 00:37:28,420
seen it most likely on the leap releases

00:37:24,220 --> 00:37:33,190
already we use on Slee currently Colonel

00:37:28,420 --> 00:37:37,560
fought for heavily patched with stuff

00:37:33,190 --> 00:37:42,130
from four or five four dot six and

00:37:37,560 --> 00:37:46,960
sometimes even beyond we will support

00:37:42,130 --> 00:37:51,160
nvm as a test preview into omni pass we

00:37:46,960 --> 00:37:54,100
have sent for dot seven included SB 2

00:37:51,160 --> 00:37:58,960
will be the first one with TP m2 dot

00:37:54,100 --> 00:38:04,690
zero support which is very much in

00:37:58,960 --> 00:38:08,100
demand by our customers but hair still

00:38:04,690 --> 00:38:13,930
quite some culprits on the upstream side

00:38:08,100 --> 00:38:17,200
systemd 288 I mentioned this because it

00:38:13,930 --> 00:38:19,690
costs right some discussion recently we

00:38:17,200 --> 00:38:21,670
are using wicked in the enterprise

00:38:19,690 --> 00:38:25,630
products we are not using system d

00:38:21,670 --> 00:38:27,970
network d please let us not discuss why

00:38:25,630 --> 00:38:30,550
we do it all that we simply said we

00:38:27,970 --> 00:38:34,270
cannot support system d network d in a

00:38:30,550 --> 00:38:36,880
way that we currently would need and we

00:38:34,270 --> 00:38:40,080
think that wicked is the better solution

00:38:36,880 --> 00:38:40,080
currently for our enterprise customers

00:38:40,950 --> 00:38:47,380
software-defined anything is currently

00:38:43,780 --> 00:38:49,600
the big buzzword and we are preparing

00:38:47,380 --> 00:38:52,600
our system here for software-defined

00:38:49,600 --> 00:38:55,150
networking we have added the data plane

00:38:52,600 --> 00:38:57,400
development kit as well as integration

00:38:55,150 --> 00:39:01,930
of that into the open we switch package

00:38:57,400 --> 00:39:05,260
this is something where a lot of the

00:39:01,930 --> 00:39:08,170
telecoms are looking forward to and we

00:39:05,260 --> 00:39:12,400
plan to invest here more with future

00:39:08,170 --> 00:39:16,119
service packs and i mentioned it

00:39:12,400 --> 00:39:18,849
on the arm side a are 64 for selected

00:39:16,119 --> 00:39:24,460
hardware will be first time supported

00:39:18,849 --> 00:39:27,490
with sp2 Frederick mentioned yesterday

00:39:24,460 --> 00:39:31,150
gnome sweet or 20 we have also updated

00:39:27,490 --> 00:39:33,849
quite a lot of fonts which you hopefully

00:39:31,150 --> 00:39:36,099
will not see but in some cases might so

00:39:33,849 --> 00:39:39,099
your monitor is not broken there but

00:39:36,099 --> 00:39:42,160
it's a different font and one thing that

00:39:39,099 --> 00:39:44,799
is important for our customers we have

00:39:42,160 --> 00:39:47,520
now support for skipping a service pack

00:39:44,799 --> 00:39:49,869
so if you want to go from a

00:39:47,520 --> 00:39:52,150
consolidation service pack 2 a

00:39:49,869 --> 00:39:55,420
consolidation service pack you can do it

00:39:52,150 --> 00:39:59,220
and skip the refresh or if you want only

00:39:55,420 --> 00:40:01,630
the Refresh ones you can do that also in

00:39:59,220 --> 00:40:04,270
former times you have to go through all

00:40:01,630 --> 00:40:06,849
of the service packs that means if you

00:40:04,270 --> 00:40:11,849
were still on service pack 0 you have to

00:40:06,849 --> 00:40:15,339
go 21 22 23 24 now you can skip which

00:40:11,849 --> 00:40:18,789
sounds more easier than in reality it is

00:40:15,339 --> 00:40:21,010
if you consider how much packages and

00:40:18,789 --> 00:40:24,089
configuration change if you think about

00:40:21,010 --> 00:40:28,270
package splits if you think about

00:40:24,089 --> 00:40:34,660
package mergers and the requirements

00:40:28,270 --> 00:40:38,440
there and we had on the enterprise side

00:40:34,660 --> 00:40:40,779
always beta programs running these were

00:40:38,440 --> 00:40:45,480
very close betas for selected partners

00:40:40,779 --> 00:40:49,299
customers yet to apply for it with sp2

00:40:45,480 --> 00:40:51,730
we decided to be much more open to make

00:40:49,299 --> 00:40:54,160
an experiment and open up the public

00:40:51,730 --> 00:40:56,680
pitas that means everybody who is

00:40:54,160 --> 00:41:02,049
sitting here can join the public beta

00:40:56,680 --> 00:41:06,760
program if you are interested in that go

00:41:02,049 --> 00:41:10,839
to the zoo zecom webpage on look for the

00:41:06,760 --> 00:41:13,539
beta program you need to fill out a

00:41:10,839 --> 00:41:15,910
little bit of stuff but otherwise you

00:41:13,539 --> 00:41:18,540
can join it and there's no restriction

00:41:15,910 --> 00:41:20,670
there it's

00:41:18,540 --> 00:41:22,950
a big step forward for us because the

00:41:20,670 --> 00:41:26,820
infrastructure to support all of those

00:41:22,950 --> 00:41:29,880
people that will join is significant and

00:41:26,820 --> 00:41:33,390
we want also your back reports that are

00:41:29,880 --> 00:41:36,140
coming in to not go down in a big pile

00:41:33,390 --> 00:41:38,790
of pack reports but to process them and

00:41:36,140 --> 00:41:41,490
currently ever coping with that I would

00:41:38,790 --> 00:41:43,740
be happy if we are no longer being able

00:41:41,490 --> 00:41:47,460
to that because all of your joining have

00:41:43,740 --> 00:41:52,800
so many back reports and fixes so please

00:41:47,460 --> 00:41:54,630
join looking a little bit beyond what we

00:41:52,800 --> 00:41:59,760
currently had you remember that picture

00:41:54,630 --> 00:42:03,840
here there's one part missing and that's

00:41:59,760 --> 00:42:08,190
at the end of the leap when it comes to

00:42:03,840 --> 00:42:10,740
the next code stream I think there are

00:42:08,190 --> 00:42:12,870
some parts where we are still lacking in

00:42:10,740 --> 00:42:16,350
our cooperation between the enterprise

00:42:12,870 --> 00:42:18,000
and the opensuse part so we are

00:42:16,350 --> 00:42:20,820
currently doing a bad job of getting

00:42:18,000 --> 00:42:24,510
patches that go to a factory into the

00:42:20,820 --> 00:42:28,230
enterprise universe there is currently

00:42:24,510 --> 00:42:30,390
no way that the reviewer in the opensuse

00:42:28,230 --> 00:42:33,360
world can see if that patch has been

00:42:30,390 --> 00:42:36,360
submitted to the enterprise if it's

00:42:33,360 --> 00:42:42,510
relevant there or to make note on that

00:42:36,360 --> 00:42:44,130
to the enterprise developers I don't

00:42:42,510 --> 00:42:45,780
have an answer for that to be honest I

00:42:44,130 --> 00:42:52,440
don't know how to solve it is one of you

00:42:45,780 --> 00:42:58,800
have a good genial idea speak up I would

00:42:52,440 --> 00:43:00,360
like to hear IDs here speed ups I'm not

00:42:58,800 --> 00:43:03,630
sure how much it's true but one

00:43:00,360 --> 00:43:06,990
complaint we often hear as project

00:43:03,630 --> 00:43:08,520
managers is that the time until a pet or

00:43:06,990 --> 00:43:13,680
a submission gets reviewed on the

00:43:08,520 --> 00:43:18,210
opposite side is too long on the other

00:43:13,680 --> 00:43:20,970
side we are also seeing a big queue on

00:43:18,210 --> 00:43:23,490
the legal review side that we have under

00:43:20,970 --> 00:43:27,120
control and we need to see what we can

00:43:23,490 --> 00:43:30,540
do to speed that up we have a very pushy

00:43:27,120 --> 00:43:31,660
/ release manager who always dreams of

00:43:30,540 --> 00:43:34,299
having a pet

00:43:31,660 --> 00:43:36,819
being submitted and one hour later he

00:43:34,299 --> 00:43:40,990
has a completely tested new image out of

00:43:36,819 --> 00:43:43,030
the system available and I can tell you

00:43:40,990 --> 00:43:45,400
that's not working at we tell that to

00:43:43,030 --> 00:43:47,680
him every day the fastest we are

00:43:45,400 --> 00:43:51,339
currently on the open on this lee side

00:43:47,680 --> 00:43:54,099
is four hours it takes four hours until

00:43:51,339 --> 00:43:58,809
a patch has been submitted pre-tested

00:43:54,099 --> 00:44:03,309
for submission everything built fallen

00:43:58,809 --> 00:44:10,500
out and retest it and that's the fastest

00:44:03,309 --> 00:44:10,500
we can get currently which is improvable

00:44:10,950 --> 00:44:18,220
dependencies if you're looking forward

00:44:15,880 --> 00:44:22,180
for the next code stream called certain

00:44:18,220 --> 00:44:24,490
and others have you ever looked at our

00:44:22,180 --> 00:44:26,890
built requires an hour requires in the

00:44:24,490 --> 00:44:29,559
packages if your package maintainer

00:44:26,890 --> 00:44:31,359
please have a look at that we need to

00:44:29,559 --> 00:44:34,480
clean that up we need to reduce the

00:44:31,359 --> 00:44:38,400
complexity here the complexity currently

00:44:34,480 --> 00:44:41,710
is really really big we added recently i

00:44:38,400 --> 00:44:45,029
think it was xrdp package that got

00:44:41,710 --> 00:44:47,890
submitted and it triggers LibreOffice I

00:44:45,029 --> 00:44:50,910
mean that's a natural connection right

00:44:47,890 --> 00:44:55,299
you have an axe rdp and you build an

00:44:50,910 --> 00:44:57,910
office suite it's simply because the

00:44:55,299 --> 00:45:02,260
bill requires are relatively lacks there

00:44:57,910 --> 00:45:05,170
and they require that if it submitted

00:45:02,260 --> 00:45:08,710
the LibreOffice new it doesn't make any

00:45:05,170 --> 00:45:10,990
difference but please do it and we have

00:45:08,710 --> 00:45:14,230
hundreds literally of these connections

00:45:10,990 --> 00:45:17,559
inside that makes it hard also for

00:45:14,230 --> 00:45:19,869
opensuse to build in a fast way that

00:45:17,559 --> 00:45:21,970
blocks the build service and it makes it

00:45:19,869 --> 00:45:24,640
very hard for us on the enterprise side

00:45:21,970 --> 00:45:28,119
where we have or we try to reduce the

00:45:24,640 --> 00:45:30,970
number of packages that we have and we

00:45:28,119 --> 00:45:33,670
want in the next few months to reduce

00:45:30,970 --> 00:45:36,130
that a little bit so the enterprise guys

00:45:33,670 --> 00:45:39,069
will look at that and you will see

00:45:36,130 --> 00:45:41,469
patches coming also to the opensuse

00:45:39,069 --> 00:45:43,660
let's I say drop this bill requires or

00:45:41,469 --> 00:45:46,809
drop this requires because it's no

00:45:43,660 --> 00:45:52,329
longer needed we find with every release

00:45:46,809 --> 00:45:54,249
we do left overs from from ancient times

00:45:52,329 --> 00:45:56,130
where we still have requires or built

00:45:54,249 --> 00:45:59,829
requests that are no longer needed and

00:45:56,130 --> 00:46:04,089
every of these that we remove helps us

00:45:59,829 --> 00:46:07,479
tremendously and going even further do

00:46:04,089 --> 00:46:11,739
we really need a requirement on some

00:46:07,479 --> 00:46:15,099
place to build the 750 plug-in for a

00:46:11,739 --> 00:46:18,989
program is anybody using that or is it

00:46:15,099 --> 00:46:21,880
just that we edit because it's there I

00:46:18,989 --> 00:46:23,529
would like to see us thinking about that

00:46:21,880 --> 00:46:25,269
a little bit if you're a package

00:46:23,529 --> 00:46:27,369
maintainer do you really need all the

00:46:25,269 --> 00:46:29,380
plugins that you have been able is it

00:46:27,369 --> 00:46:32,829
really needed that we add all of those

00:46:29,380 --> 00:46:37,289
because with every dependency we add the

00:46:32,829 --> 00:46:43,630
complexity goes up quite tremendously

00:46:37,289 --> 00:46:47,499
and last but not least join us we have

00:46:43,630 --> 00:46:50,739
open jobs there's a lot of jobs open for

00:46:47,499 --> 00:46:52,900
everybody and we would like to see you

00:46:50,739 --> 00:46:58,779
if you're not already a Suzy employee to

00:46:52,900 --> 00:47:00,999
join us and to strengthen our team with

00:46:58,779 --> 00:47:04,150
that I would now be open for questions

00:47:00,999 --> 00:47:07,449
and discussions because I think we

00:47:04,150 --> 00:47:10,029
cannot just live each on our own the

00:47:07,449 --> 00:47:12,519
opensuse world here this lee world here

00:47:10,029 --> 00:47:15,759
but it's an interaction and we'll flip

00:47:12,519 --> 00:47:18,160
we have come closer together but they

00:47:15,759 --> 00:47:23,380
are still quite a lot of things that we

00:47:18,160 --> 00:47:30,999
can do to improve so that's it from our

00:47:23,380 --> 00:47:34,449
side are there questions how often do we

00:47:30,999 --> 00:47:37,809
get major releases it where isn't

00:47:34,449 --> 00:47:42,519
anything have up out of it you mean on

00:47:37,809 --> 00:47:45,050
the enterprise side both um on the

00:47:42,519 --> 00:47:47,790
enterprise side

00:47:45,050 --> 00:47:50,510
and I'm being careful here so that no

00:47:47,790 --> 00:47:53,370
product manager will kill me afterwards

00:47:50,510 --> 00:47:55,770
it's roughly currently three and a half

00:47:53,370 --> 00:48:00,030
years between the major releases but we

00:47:55,770 --> 00:48:03,270
target for we were a little bit bit more

00:48:00,030 --> 00:48:05,390
time between code 11 and 12 but for code

00:48:03,270 --> 00:48:08,790
searching we are currently armed

00:48:05,390 --> 00:48:12,260
thinking about that time frame so for

00:48:08,790 --> 00:48:16,650
the leap releases that would mean also

00:48:12,260 --> 00:48:19,590
that for this we would then be most

00:48:16,650 --> 00:48:24,180
likely three and a half roughly years

00:48:19,590 --> 00:48:26,010
after that but that's just an official

00:48:24,180 --> 00:48:30,360
number because we have not agreed on

00:48:26,010 --> 00:48:32,130
that yet the project managers are

00:48:30,360 --> 00:48:34,860
discussing this with the product

00:48:32,130 --> 00:48:37,410
managers currently how to do it best on

00:48:34,860 --> 00:48:38,940
the schedule because that's always a

00:48:37,410 --> 00:48:50,510
little bit tricky but three and a half

00:48:38,940 --> 00:48:54,330
is round about it other questions if not

00:48:50,510 --> 00:48:57,900
then thank you everybody and as

00:48:54,330 --> 00:49:00,990
mentioned we have chops and look out for

00:48:57,900 --> 00:49:04,020
our beta program or beta program manager

00:49:00,990 --> 00:49:06,000
is happy to add everybody who bonds so

00:49:04,020 --> 00:49:08,240
feel free to apply there thank you very

00:49:06,000 --> 00:49:08,240
much

00:49:10,380 --> 00:49:12,440

YouTube URL: https://www.youtube.com/watch?v=Dt9XGt0B_Ow


