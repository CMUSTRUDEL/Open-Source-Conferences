Title: Oliver Neukum: The type C connector and USB 3.1
Publication date: 2016-06-26
Playlist: openSUSE Conference 2016
Description: 
	https://media.ccc.de/v/836-the-type-c-connector-and-usb-3-1

The talk is intended to give an overview about the technology used for the type C connector and USB 3.1. I will cover USB role switching, selection of alternate modes and USB Power Delivery. An overview over the driver support is given. APIs are introduced and explained.
The conceptual difficulties of USB Power Delivery are shown. The missing infrastructure in the kernel and user space is identified. The frame work of a solution is discussed.
http://www.slideshare.net/OliverNeukum/osc16-63284110

Oliver Neukum
Captions: 
	00:00:08,840 --> 00:00:16,049
somebody give me some yes ok let's start

00:00:12,930 --> 00:00:18,929
belated but start I'll be

00:00:16,049 --> 00:00:25,380
faster then okay I'm talking today about

00:00:18,929 --> 00:00:27,809
the type-c plug and USB 3 1 and the main

00:00:25,380 --> 00:00:31,769
part will be indeed the type-c connector

00:00:27,809 --> 00:00:35,070
because USB 3 dot one is boring it's

00:00:31,769 --> 00:00:43,640
just a minor revision basically faster

00:00:35,070 --> 00:00:47,280
nothing more so the type-c connector is

00:00:43,640 --> 00:00:50,160
well it's a connector but why another

00:00:47,280 --> 00:00:54,120
connector firstly it's faster and faster

00:00:50,160 --> 00:00:57,300
is always better it's smaller smaller

00:00:54,120 --> 00:00:58,949
than a conventional USB connector not

00:00:57,300 --> 00:01:03,359
really smaller than a micro USB

00:00:58,949 --> 00:01:08,310
connector but its main feature it's its

00:01:03,359 --> 00:01:13,410
versatility it can do more than just USB

00:01:08,310 --> 00:01:15,240
and that is the reason people like it it

00:01:13,410 --> 00:01:19,350
can do power and it can do other things

00:01:15,240 --> 00:01:22,979
and it can do a lot of power the obvious

00:01:19,350 --> 00:01:24,780
plan of that company which makes a lot

00:01:22,979 --> 00:01:28,440
of products whose name starts with an

00:01:24,780 --> 00:01:34,170
eye is more or less to make a universal

00:01:28,440 --> 00:01:37,979
connector so what can I do for us be

00:01:34,170 --> 00:01:41,550
twice as much it provides these things

00:01:37,979 --> 00:01:45,379
calls the alternate modes this is we run

00:01:41,550 --> 00:01:49,289
something else than USB / the connector

00:01:45,379 --> 00:01:52,890
it also provides support for something

00:01:49,289 --> 00:01:55,200
which is called an accessory which is

00:01:52,890 --> 00:01:57,720
another way to run something else about

00:01:55,200 --> 00:02:01,129
the connector in this case mainly sound

00:01:57,720 --> 00:02:03,149
it's just cheaper again a feature

00:02:01,129 --> 00:02:07,349
incorporated for the company whose

00:02:03,149 --> 00:02:10,440
products start with I and you can put a

00:02:07,349 --> 00:02:14,459
lot of power over it in fact 100 watts

00:02:10,440 --> 00:02:19,349
at the maximum so it is also designed to

00:02:14,459 --> 00:02:22,680
unify and get rid of power connectors it

00:02:19,349 --> 00:02:26,180
uses three main technologies for that

00:02:22,680 --> 00:02:29,820
the type-c connector itself

00:02:26,180 --> 00:02:32,010
usb3 dot one which is interwoven in the

00:02:29,820 --> 00:02:36,840
specification in a rather complicated

00:02:32,010 --> 00:02:39,870
manner and a USB power delivery which is

00:02:36,840 --> 00:02:42,830
not strictly speaking limited to the

00:02:39,870 --> 00:02:45,900
type-c connector but in practice is and

00:02:42,830 --> 00:02:49,050
is indispensable for the operation of

00:02:45,900 --> 00:02:54,780
the connector in alternate modes for USB

00:02:49,050 --> 00:02:58,580
it works with that what does the connect

00:02:54,780 --> 00:03:01,860
to do it gets you a lot of data lines

00:02:58,580 --> 00:03:04,620
different kinds of data lines USB 3 and

00:03:01,860 --> 00:03:11,760
faster and us / 22 are physically

00:03:04,620 --> 00:03:15,570
separated it gets you some pins

00:03:11,760 --> 00:03:20,310
dedicated to alternate modes and it gets

00:03:15,570 --> 00:03:22,920
you a very diverse power supply there is

00:03:20,310 --> 00:03:26,570
a power supply for the bus itself and

00:03:22,920 --> 00:03:29,460
one for the cable because the cables

00:03:26,570 --> 00:03:33,750
become actually active components on

00:03:29,460 --> 00:03:35,520
that type C for most use cases you can

00:03:33,750 --> 00:03:37,410
build a conventional capable out of

00:03:35,520 --> 00:03:40,470
copper which is connected through and it

00:03:37,410 --> 00:03:42,690
will work for us be and maybe alternate

00:03:40,470 --> 00:03:46,350
modes if it's very short but that's it

00:03:42,690 --> 00:03:48,950
so under type C the cable stem cells

00:03:46,350 --> 00:03:55,560
become gadgets and can be talked to in

00:03:48,950 --> 00:03:57,950
quite a bell ring manner of ways this

00:03:55,560 --> 00:04:01,250
connector is quite flexible it can

00:03:57,950 --> 00:04:04,200
switch almost everything again

00:04:01,250 --> 00:04:06,840
optionally you can switch the

00:04:04,200 --> 00:04:09,240
communication mode you can switch the

00:04:06,840 --> 00:04:11,460
mode in the sense of the alternate modes

00:04:09,240 --> 00:04:15,030
the protocol you run over this thing and

00:04:11,460 --> 00:04:18,989
it can switch the way you supply power

00:04:15,030 --> 00:04:22,470
in it and during all this switching it

00:04:18,989 --> 00:04:27,930
still retains a minimum USB 2 dot 0

00:04:22,470 --> 00:04:31,830
connection um USB as you I hope know is

00:04:27,930 --> 00:04:34,240
a strict master and slave protocol that

00:04:31,830 --> 00:04:37,750
property is retained

00:04:34,240 --> 00:04:40,479
there is just a manner a method to

00:04:37,750 --> 00:04:45,460
switch between master and slave on the

00:04:40,479 --> 00:04:48,669
fly and the master is also that part of

00:04:45,460 --> 00:04:52,500
the connection which decides which mode

00:04:48,669 --> 00:04:55,660
is to be run over the connector the

00:04:52,500 --> 00:05:00,009
sloth and the slave says what it can do

00:04:55,660 --> 00:05:03,880
and the master selects and also has to

00:05:00,009 --> 00:05:08,229
to make sure that the cable actually can

00:05:03,880 --> 00:05:11,590
do what it is required to do in the

00:05:08,229 --> 00:05:14,830
power supply mode under USB it is

00:05:11,590 --> 00:05:18,520
clearly defined the the master provides

00:05:14,830 --> 00:05:21,099
the energy and the slave if it wants it

00:05:18,520 --> 00:05:23,949
can take it if not then it has to

00:05:21,099 --> 00:05:27,970
provide its own energy and the master in

00:05:23,949 --> 00:05:30,840
every case has to provide its energy on

00:05:27,970 --> 00:05:35,319
the type-c connector and this is

00:05:30,840 --> 00:05:38,259
independent of USB those roads can be

00:05:35,319 --> 00:05:41,139
men switched over so it is possible to

00:05:38,259 --> 00:05:49,360
power a laptop let's say from the

00:05:41,139 --> 00:05:52,960
monitor let's get to use p30 pick 3 dot

00:05:49,360 --> 00:05:55,360
1 i'm sorry because it can be quickly

00:05:52,960 --> 00:06:01,090
done the raw speed it's doubled and

00:05:55,360 --> 00:06:04,900
that's it the type-c connector is not

00:06:01,090 --> 00:06:07,000
limited to USB 3 dot one super speed but

00:06:04,900 --> 00:06:09,310
super speed is limited to the type-c

00:06:07,000 --> 00:06:11,560
connector so if you want to full 10

00:06:09,310 --> 00:06:15,789
gigabits per second you need a type-c

00:06:11,560 --> 00:06:20,349
connector in other features it provides

00:06:15,789 --> 00:06:25,360
a bit more of what we already have there

00:06:20,349 --> 00:06:27,340
is one major news thing but that I can't

00:06:25,360 --> 00:06:29,969
cover because it's too new and has too

00:06:27,340 --> 00:06:33,539
many implications that is authentication

00:06:29,969 --> 00:06:37,300
you can check that the device is

00:06:33,539 --> 00:06:40,860
actually what it claims to be but I

00:06:37,300 --> 00:06:40,860
won't touch that now um

00:06:41,510 --> 00:06:48,420
to be noted is that master and slave are

00:06:44,790 --> 00:06:51,450
still distinct so USB is obviously not

00:06:48,420 --> 00:06:54,630
peer-to-peer but it would be possible or

00:06:51,450 --> 00:06:57,450
thinkable to have a device to be master

00:06:54,630 --> 00:07:00,000
and slave at the same time but know that

00:06:57,450 --> 00:07:03,480
it's not how its works you can exchange

00:07:00,000 --> 00:07:08,010
the roads but it only has one role at a

00:07:03,480 --> 00:07:10,860
time the main technology and the most

00:07:08,010 --> 00:07:15,770
troublesome part of the standard is

00:07:10,860 --> 00:07:19,530
actually USB power delivery which

00:07:15,770 --> 00:07:23,460
technically is not limited to a type-c

00:07:19,530 --> 00:07:27,090
connector it is defined for the usual a

00:07:23,460 --> 00:07:31,050
B connector but deprecated so in

00:07:27,090 --> 00:07:35,460
practice I doubt we'll see it and it is

00:07:31,050 --> 00:07:40,200
not limited to USB it is also used for

00:07:35,460 --> 00:07:43,310
power bricks and if they are to deliver

00:07:40,200 --> 00:07:47,640
more than 15 watts it's not just

00:07:43,310 --> 00:07:50,040
available it's done mandatory if you use

00:07:47,640 --> 00:07:53,970
it and are ready to ramp up the voltage

00:07:50,040 --> 00:07:56,850
then your limit is 100 watts if you do

00:07:53,970 --> 00:08:01,110
the math that's 5 amps if the cable does

00:07:56,850 --> 00:08:04,350
it but we'll come to that so it is also

00:08:01,110 --> 00:08:07,680
used in those famous alternate modes

00:08:04,350 --> 00:08:10,500
which I will come to so it's but let's

00:08:07,680 --> 00:08:13,950
explain one of those alternate modes is

00:08:10,500 --> 00:08:16,410
display port so you can run the

00:08:13,950 --> 00:08:20,430
DisplayPort protocol over type-c cable

00:08:16,410 --> 00:08:25,230
and still use the power brick of your

00:08:20,430 --> 00:08:30,060
monitor as the source of your power

00:08:25,230 --> 00:08:32,370
supply for your system and then the

00:08:30,060 --> 00:08:35,729
monitor and the system must negotiate

00:08:32,370 --> 00:08:38,690
what's called the power contract so that

00:08:35,729 --> 00:08:41,010
the monitor can probably a properly a

00:08:38,690 --> 00:08:42,810
budget its power and share it out

00:08:41,010 --> 00:08:45,690
because the monitor might also contain

00:08:42,810 --> 00:08:48,620
they use be hub or something which then

00:08:45,690 --> 00:08:48,620
would also be driven

00:08:48,720 --> 00:08:55,360
if you use it for USB the power

00:08:52,839 --> 00:08:58,779
budgeting goes down the whole tree over

00:08:55,360 --> 00:09:02,170
the hops if you use the alternate modes

00:08:58,779 --> 00:09:07,000
that's not the case with the one

00:09:02,170 --> 00:09:10,870
exception of USB bridging which allows

00:09:07,000 --> 00:09:13,390
you to run a subset of the power

00:09:10,870 --> 00:09:19,779
delivery protocol to the next level in a

00:09:13,390 --> 00:09:22,029
hub that will come to that the hops and

00:09:19,779 --> 00:09:24,670
that's the nice one about a protocol you

00:09:22,029 --> 00:09:27,670
can ignore the feature than the hubs are

00:09:24,670 --> 00:09:32,740
on their own and must implement a

00:09:27,670 --> 00:09:34,480
limited amount of power budgeting and if

00:09:32,740 --> 00:09:37,330
you don't like that you can switch the

00:09:34,480 --> 00:09:39,880
hops to the fully dependent mode and

00:09:37,330 --> 00:09:43,150
then every request is rerouted to the

00:09:39,880 --> 00:09:47,580
host and it has full control over the

00:09:43,150 --> 00:09:51,880
power budget in the system as a whole

00:09:47,580 --> 00:09:55,690
how does it work the power delivery

00:09:51,880 --> 00:09:58,000
thing on a technical level is most

00:09:55,690 --> 00:10:02,200
similar actually to a very primitive

00:09:58,000 --> 00:10:04,870
Ethernet it's implemented technically as

00:10:02,200 --> 00:10:07,410
a frequency modulation on top of either

00:10:04,870 --> 00:10:12,760
the power supply or a control cable so

00:10:07,410 --> 00:10:15,160
arcane it is in contrast to USB it's

00:10:12,760 --> 00:10:18,760
really peer-to-peer thing from the

00:10:15,160 --> 00:10:22,360
protocol every partner on that wire can

00:10:18,760 --> 00:10:26,560
talk to the other one and there is at a

00:10:22,360 --> 00:10:30,160
maximum actually four partners on each

00:10:26,560 --> 00:10:32,529
connection yes it is point-to-point but

00:10:30,160 --> 00:10:35,980
one partner is the host the second is

00:10:32,529 --> 00:10:40,089
the device and this is not a joke both

00:10:35,980 --> 00:10:46,480
ends of the cable which results in a

00:10:40,089 --> 00:10:51,089
maximum of four partners yes each

00:10:46,480 --> 00:10:54,400
command is immediately replied to in a

00:10:51,089 --> 00:10:57,059
an acknowledgement which just means

00:10:54,400 --> 00:11:01,919
understood there's a CFC involved

00:10:57,059 --> 00:11:05,729
and the graphics I showed you was more

00:11:01,919 --> 00:11:11,839
or less the most simple exchange there

00:11:05,729 --> 00:11:14,669
is a command and a response the

00:11:11,839 --> 00:11:18,119
understood message has a very tight time

00:11:14,669 --> 00:11:22,289
limit 15 milliseconds so we absolutely

00:11:18,119 --> 00:11:24,089
cannot do that in user space and because

00:11:22,289 --> 00:11:25,739
the failure to meet that time response

00:11:24,089 --> 00:11:27,779
leads into the error handling and this

00:11:25,739 --> 00:11:31,469
has very serious consequences we don't

00:11:27,779 --> 00:11:34,979
want that so this is either in criminals

00:11:31,469 --> 00:11:37,289
by in many implementations we have a

00:11:34,979 --> 00:11:41,609
part of the power deliver late protocol

00:11:37,289 --> 00:11:47,009
in firmware on an ACP I embedded

00:11:41,609 --> 00:11:49,169
controller or something similar that is

00:11:47,009 --> 00:11:54,499
something we have to keep in mind when

00:11:49,169 --> 00:12:00,539
we come to the tapi we can make but

00:11:54,499 --> 00:12:05,309
let's go to this later um there is for

00:12:00,539 --> 00:12:07,979
the API design a further nothing that we

00:12:05,309 --> 00:12:12,839
have to keep in mind the response is

00:12:07,979 --> 00:12:17,099
usually yes no or later yes and no our

00:12:12,839 --> 00:12:19,349
other obvious the later part allows us

00:12:17,099 --> 00:12:22,259
to make a call back from the colonel

00:12:19,349 --> 00:12:26,399
into user space and let user space set a

00:12:22,259 --> 00:12:30,809
policy or to delay the Colonel's action

00:12:26,399 --> 00:12:36,359
until user space has set a limit app or

00:12:30,809 --> 00:12:40,559
policy what does USB power delivery do

00:12:36,359 --> 00:12:45,449
it defines ways of controlling how power

00:12:40,559 --> 00:12:48,029
is distributed and delivered one of the

00:12:45,449 --> 00:12:54,529
features is that we can go over the 5

00:12:48,029 --> 00:12:59,189
volts a USB m.c cable is in every case

00:12:54,529 --> 00:13:01,919
limited to 5 amps so if you to do the

00:12:59,189 --> 00:13:05,159
math if you stay at 5 volts you arrive

00:13:01,919 --> 00:13:08,039
at 25 watts and if you ramped it up all

00:13:05,159 --> 00:13:09,510
the way to the maximum allowed voltage

00:13:08,039 --> 00:13:15,000
of 20 volt your

00:13:09,510 --> 00:13:20,460
at the whopping 100 watts the actual

00:13:15,000 --> 00:13:23,430
selection is done by finding dill well

00:13:20,460 --> 00:13:26,610
greatest common denominator between the

00:13:23,430 --> 00:13:29,700
host and device we're both sides

00:13:26,610 --> 00:13:33,210
advertise what they can do and the

00:13:29,700 --> 00:13:37,790
actual choice is done on the device side

00:13:33,210 --> 00:13:40,710
and the host then has the choice between

00:13:37,790 --> 00:13:44,820
taking the offer or rejecting it and

00:13:40,710 --> 00:13:50,970
then start new negotiations or to let it

00:13:44,820 --> 00:13:54,780
fail it is also used for switching the

00:13:50,970 --> 00:13:58,380
data roles on the type-c cable so you

00:13:54,780 --> 00:14:01,700
have to implement USB power delivery

00:13:58,380 --> 00:14:04,860
even in for that most basic feature

00:14:01,700 --> 00:14:09,900
beyond the simple faster connection to

00:14:04,860 --> 00:14:13,110
cryptography mmm the authentication is

00:14:09,900 --> 00:14:16,080
again not limited to USB it can be done

00:14:13,110 --> 00:14:19,380
also in the alternate modes and indeed

00:14:16,080 --> 00:14:22,110
in theory you can authenticate that your

00:14:19,380 --> 00:14:26,340
power brick is indeed your power brick

00:14:22,110 --> 00:14:30,180
for whatever that may be useful I have

00:14:26,340 --> 00:14:33,180
no idea but it's possible and believe it

00:14:30,180 --> 00:14:38,420
or not you can use USB power delivery to

00:14:33,180 --> 00:14:38,420
update the firmware of your power brick

00:14:39,650 --> 00:14:51,510
yep it but still in fact you can update

00:14:46,830 --> 00:14:56,700
the firmware of a cable yes sorry but

00:14:51,510 --> 00:14:58,890
that's the spec power delivery is also

00:14:56,700 --> 00:15:04,290
used to enter and leave for the

00:14:58,890 --> 00:15:07,440
alternate modes it also does the not so

00:15:04,290 --> 00:15:09,750
hard part of the error handling and it's

00:15:07,440 --> 00:15:12,090
used to ask the cable about its

00:15:09,750 --> 00:15:15,600
capabilities which is how much power can

00:15:12,090 --> 00:15:20,190
you deliver which alternate modes to

00:15:15,600 --> 00:15:22,770
your support and this is not actually so

00:15:20,190 --> 00:15:26,700
trivial because the spec also defines

00:15:22,770 --> 00:15:33,030
now optical cables for USB so we need to

00:15:26,700 --> 00:15:36,600
know that power delivery has the main

00:15:33,030 --> 00:15:41,060
function of well not main but according

00:15:36,600 --> 00:15:41,060
to its name function of providing power

00:15:41,390 --> 00:15:46,590
power management with the type-c

00:15:44,970 --> 00:15:49,710
connector is different from power

00:15:46,590 --> 00:15:51,600
management with early a USB in our

00:15:49,710 --> 00:15:55,530
runtime power management with earlier

00:15:51,600 --> 00:15:57,600
USB we are can consider concerned with

00:15:55,530 --> 00:16:01,410
conserving power

00:15:57,600 --> 00:16:05,339
it's good if we can save power but still

00:16:01,410 --> 00:16:08,220
the system has to work without it with

00:16:05,339 --> 00:16:10,769
type see if you get all your power over

00:16:08,220 --> 00:16:12,839
a type-c connector you can obviously not

00:16:10,769 --> 00:16:15,810
deliver the same amount of power over

00:16:12,839 --> 00:16:18,690
more than one type c connector in fact s

00:16:15,810 --> 00:16:20,519
you yourself will consume some power you

00:16:18,690 --> 00:16:24,540
can't even deliver the same amount of

00:16:20,519 --> 00:16:27,660
power or if you don't go to the highest

00:16:24,540 --> 00:16:30,329
voltage your laptop is not going to

00:16:27,660 --> 00:16:33,660
provide say we have six ports and each

00:16:30,329 --> 00:16:35,310
is supposed to provide 15 watts not in

00:16:33,660 --> 00:16:40,470
battery mode I'm sorry not going to

00:16:35,310 --> 00:16:43,290
happen so we negotiate what is called

00:16:40,470 --> 00:16:53,779
the power contract between the master

00:16:43,290 --> 00:16:56,190
and the slave which again is done by

00:16:53,779 --> 00:16:59,579
comparing offers and letting the slave

00:16:56,190 --> 00:17:02,279
decide on which to select and the master

00:16:59,579 --> 00:17:06,299
decide on whether to take this or start

00:17:02,279 --> 00:17:08,549
some new connection negotiation the

00:17:06,299 --> 00:17:12,480
master must you be sure that its

00:17:08,549 --> 00:17:16,140
commitments do not exceed its

00:17:12,480 --> 00:17:19,880
capabilities which would be trivial

00:17:16,140 --> 00:17:23,360
except for a one additional complication

00:17:19,880 --> 00:17:27,809
it just be power delivery device it can

00:17:23,360 --> 00:17:31,950
express its maximum energy need and its

00:17:27,809 --> 00:17:34,650
current energy needs which means that is

00:17:31,950 --> 00:17:39,480
in principle possible to overcommit

00:17:34,650 --> 00:17:46,200
power and manage this on the fly this is

00:17:39,480 --> 00:17:48,690
a feature the host must negotiate a must

00:17:46,200 --> 00:17:50,940
guarantee or leave to the hops in case

00:17:48,690 --> 00:17:54,360
of ups but it has very serious

00:17:50,940 --> 00:17:57,030
consequences for the architecture if we

00:17:54,360 --> 00:18:01,390
decide to use this feature

00:17:57,030 --> 00:18:04,450
we have obviously a can decide not to do

00:18:01,390 --> 00:18:07,030
over commit but then we risk that our

00:18:04,450 --> 00:18:13,300
devices won't run because we can't meet

00:18:07,030 --> 00:18:17,680
the combined maximum power limit they

00:18:13,300 --> 00:18:20,670
also can say we use this much power at

00:18:17,680 --> 00:18:23,230
the present but we are able to rapidly

00:18:20,670 --> 00:18:26,350
decrease our power needs this is

00:18:23,230 --> 00:18:29,140
intended for devices which are charging

00:18:26,350 --> 00:18:33,010
their internal batteries from power

00:18:29,140 --> 00:18:37,750
delivery and this feature can be used in

00:18:33,010 --> 00:18:40,420
kernel space and in user space to power

00:18:37,750 --> 00:18:42,640
down some devices to meet the power

00:18:40,420 --> 00:18:46,420
consumption of another device if it goes

00:18:42,640 --> 00:18:51,520
into peak mode the policy for that is a

00:18:46,420 --> 00:18:55,660
bit involved so alternate modes and this

00:18:51,520 --> 00:18:58,090
is in my opinion and probably most

00:18:55,660 --> 00:19:03,010
people's opinion the killer feature of

00:18:58,090 --> 00:19:06,220
the type-c connector this is designed to

00:19:03,010 --> 00:19:09,030
provide a universal connector we've seen

00:19:06,220 --> 00:19:12,640
it does faster USB which is good but

00:19:09,030 --> 00:19:16,120
wouldn't be a sensation it can be used

00:19:12,640 --> 00:19:21,540
to to get rid of of proprietary power

00:19:16,120 --> 00:19:25,980
plugs also nice not a sensation but I

00:19:21,540 --> 00:19:30,400
think in the long run we will see that

00:19:25,980 --> 00:19:34,740
we will that most connector types other

00:19:30,400 --> 00:19:37,660
than the type C will die because it's

00:19:34,740 --> 00:19:40,060
rather expensive to develop something

00:19:37,660 --> 00:19:43,360
which is hot pluggable fast durable and

00:19:40,060 --> 00:19:47,200
so on so there has to be a reason for

00:19:43,360 --> 00:19:51,140
somebody to spend that much money and it

00:19:47,200 --> 00:19:54,320
has to provide an additional benefit

00:19:51,140 --> 00:19:58,550
if you can run your protocol over the

00:19:54,320 --> 00:20:01,370
type-c connector then I guess there's

00:19:58,550 --> 00:20:03,410
not much point in that so if I have to

00:20:01,370 --> 00:20:05,750
make a prediction now and I'm going to

00:20:03,410 --> 00:20:08,450
do so voluntarily I'd say type C will

00:20:05,750 --> 00:20:12,290
survive type a will survive because it's

00:20:08,450 --> 00:20:14,930
much cheaper and nobody really cares

00:20:12,290 --> 00:20:17,180
about his mouse it's got to work no no

00:20:14,930 --> 00:20:21,560
reason to do fancy power delivery or so

00:20:17,180 --> 00:20:23,780
I guess the the ethernet connector will

00:20:21,560 --> 00:20:26,090
also survived and probably the Express

00:20:23,780 --> 00:20:29,780
card connector but beyond that i'm

00:20:26,090 --> 00:20:34,000
actually skeptical anyway so which are

00:20:29,780 --> 00:20:38,780
protocols are defined for now

00:20:34,000 --> 00:20:43,280
displayport a thunderbolt pci and MHL

00:20:38,780 --> 00:20:45,860
MHL is actually and don't be

00:20:43,280 --> 00:20:49,430
disappointed i had to look that that up

00:20:45,860 --> 00:20:53,450
myself is a video protocol which more or

00:20:49,430 --> 00:20:56,890
less ends up in hdmi it's for used to

00:20:53,450 --> 00:21:02,000
connect mobile phones to TV sets but ok

00:20:56,890 --> 00:21:06,200
so the physical protocol is run over the

00:21:02,000 --> 00:21:10,040
wires in the cable they can be switched

00:21:06,200 --> 00:21:12,550
there is a national multiplexer in the

00:21:10,040 --> 00:21:15,580
type c assembly on your motherboard

00:21:12,550 --> 00:21:20,090
which allows you to physically rear out

00:21:15,580 --> 00:21:22,460
the cable or parts of it so you get a

00:21:20,090 --> 00:21:25,520
direct connection from let's say your

00:21:22,460 --> 00:21:29,120
GPU or your Thunderbolt connector to the

00:21:25,520 --> 00:21:32,630
other side of the type-c cable and how

00:21:29,120 --> 00:21:38,600
this is controlled I will come to in a

00:21:32,630 --> 00:21:41,210
moment so it is not in all cases defined

00:21:38,600 --> 00:21:44,210
to have a type-c connector for this it

00:21:41,210 --> 00:21:47,210
is defined now for Thunderbolt 3 where

00:21:44,210 --> 00:21:50,900
is mandatory and it is defined for

00:21:47,210 --> 00:21:54,680
display port for the other cases we have

00:21:50,900 --> 00:21:58,070
what we are calling the alternate mode

00:21:54,680 --> 00:22:00,770
adapter which is kind of a type C to

00:21:58,070 --> 00:22:03,920
something else cable like

00:22:00,770 --> 00:22:08,420
a real displayport or or an older

00:22:03,920 --> 00:22:11,780
Thunderbolt Thunderbolt so we have this

00:22:08,420 --> 00:22:14,390
kind of cable where we are talking to

00:22:11,780 --> 00:22:19,370
the plug instead of the device with the

00:22:14,390 --> 00:22:23,510
USB power delivery let's see how and

00:22:19,370 --> 00:22:26,390
time ok on the architecture level we

00:22:23,510 --> 00:22:31,040
have more or less decided to see the

00:22:26,390 --> 00:22:36,260
type C thing as a bus as a bus without I

00:22:31,040 --> 00:22:40,580
oh and what we use it for is more or

00:22:36,260 --> 00:22:42,800
less the hot plugging and the interrupt

00:22:40,580 --> 00:22:45,980
and error handling capability and the

00:22:42,800 --> 00:22:49,970
power management capability of a real

00:22:45,980 --> 00:22:55,190
bus in the device model so if you switch

00:22:49,970 --> 00:22:58,370
your port to an alternate mode let's say

00:22:55,190 --> 00:23:00,830
DisplayPort you will get an a real

00:22:58,370 --> 00:23:07,790
Colonel hot-plug event for you now

00:23:00,830 --> 00:23:12,740
display fault monitor so how do we

00:23:07,790 --> 00:23:16,040
control this goodness there is basically

00:23:12,740 --> 00:23:20,600
an infinite amount of possibilities

00:23:16,040 --> 00:23:23,690
which doesn't make it good so the

00:23:20,600 --> 00:23:27,070
easiest thing would be to use a CPI

00:23:23,690 --> 00:23:31,100
there is a standard called the UCS I

00:23:27,070 --> 00:23:36,140
which allows us to use most but not all

00:23:31,100 --> 00:23:41,240
features of to the power delivery

00:23:36,140 --> 00:23:46,310
protocol then there is we can go to the

00:23:41,240 --> 00:23:49,220
really defined bare bones of the

00:23:46,310 --> 00:23:51,950
hardware which is an i2c bus which

00:23:49,220 --> 00:23:55,310
connects all the ports to one master

00:23:51,950 --> 00:23:59,060
controller has defined commands and so

00:23:55,310 --> 00:24:02,120
on the problem here is if we do the

00:23:59,060 --> 00:24:06,350
voltage selection wrong then we have a

00:24:02,120 --> 00:24:09,590
real problem devices are supposed to

00:24:06,350 --> 00:24:13,380
with stand 20 volts but i am quite

00:24:09,590 --> 00:24:17,340
reluctant to put this theory to the test

00:24:13,380 --> 00:24:21,590
and the few type-c drivers we have

00:24:17,340 --> 00:24:21,590
actually seen besides you si si

00:24:21,920 --> 00:24:28,130
unfortunately of yet another kind they

00:24:24,750 --> 00:24:31,350
are a mixture of additional

00:24:28,130 --> 00:24:34,820
vendor-specific registers on xhci

00:24:31,350 --> 00:24:39,750
controllers and platform devices and

00:24:34,820 --> 00:24:41,970
okay not good but we will probably end

00:24:39,750 --> 00:24:45,990
up with a half a dozen or so at a

00:24:41,970 --> 00:24:51,090
minimum type-c drivers which will plug

00:24:45,990 --> 00:24:54,660
into and into the kernel into the

00:24:51,090 --> 00:24:57,240
generic layer okay then let's see in the

00:24:54,660 --> 00:25:01,470
chronolog what do we have okay the good

00:24:57,240 --> 00:25:04,470
news USB 3 dot one is finished there are

00:25:01,470 --> 00:25:08,220
bugs left obviously and it's not quite

00:25:04,470 --> 00:25:12,270
so stable but it's there it works the

00:25:08,220 --> 00:25:19,320
user space support is also they're done

00:25:12,270 --> 00:25:22,290
right big cool that is good but not

00:25:19,320 --> 00:25:28,710
interesting so the type-c connector

00:25:22,290 --> 00:25:32,970
itself we have the UCS I driver I hope

00:25:28,710 --> 00:25:37,560
and presume that intel has tested it but

00:25:32,970 --> 00:25:44,430
nobody obviously without a firmware can

00:25:37,560 --> 00:25:49,350
test it so it does the basic job

00:25:44,430 --> 00:25:53,700
and that's it TC p.m. now we will have

00:25:49,350 --> 00:25:56,519
to do this but this is going to take

00:25:53,700 --> 00:26:00,389
some discussion

00:25:56,519 --> 00:26:04,399
there is a generic type c bus type which

00:26:00,389 --> 00:26:08,519
is in the colonel there's the plug in to

00:26:04,399 --> 00:26:11,570
the individual drivers which at least

00:26:08,519 --> 00:26:16,139
for what intel has now is working and

00:26:11,570 --> 00:26:23,339
there is an API to use a space for using

00:26:16,139 --> 00:26:29,519
this old stuff so what possibilities do

00:26:23,339 --> 00:26:32,070
we have we have now decided to split the

00:26:29,519 --> 00:26:36,869
alternate mode and the power delivery

00:26:32,070 --> 00:26:42,359
stuff in the narrow sense into and to

00:26:36,869 --> 00:26:45,169
implement only dumb the mode selection

00:26:42,359 --> 00:26:49,469
and the data roll selection and so on

00:26:45,169 --> 00:26:51,779
under the type c bus because this is a

00:26:49,469 --> 00:26:54,570
split that is more or less forced upon

00:26:51,779 --> 00:27:00,479
us by the UCS I driver that's how it

00:26:54,570 --> 00:27:02,609
works and if we are going to see power

00:27:00,479 --> 00:27:05,099
delivery in the narrow sense being

00:27:02,609 --> 00:27:08,989
implemented in microcontrollers we

00:27:05,099 --> 00:27:12,570
cannot put this into this directory and

00:27:08,989 --> 00:27:15,839
frankly we are not at the point where we

00:27:12,570 --> 00:27:20,129
could set an API for this install so we

00:27:15,839 --> 00:27:23,459
don't do it power delivery is quite hot

00:27:20,129 --> 00:27:26,729
because and the one hand it has got

00:27:23,459 --> 00:27:29,519
nothing to do with USB and on the other

00:27:26,729 --> 00:27:36,389
hand it is implemented in USP because

00:27:29,519 --> 00:27:38,399
the hops do it so we are facing the ugly

00:27:36,389 --> 00:27:41,190
choice here of implementing it more or

00:27:38,399 --> 00:27:43,320
less with two api's that is implementing

00:27:41,190 --> 00:27:47,399
it in the root up as an emulation like

00:27:43,320 --> 00:27:52,229
we do for root apps in USB in general or

00:27:47,399 --> 00:27:54,839
to do something else so any input here

00:27:52,229 --> 00:27:57,839
is appreciated but I must say we are

00:27:54,839 --> 00:28:01,079
even now discussing the final touches of

00:27:57,839 --> 00:28:03,180
the alternate mode API so power delivery

00:28:01,079 --> 00:28:08,460
API will have to wait

00:28:03,180 --> 00:28:12,390
um it also imposes on us a policy

00:28:08,460 --> 00:28:14,940
problem there are several ways to get

00:28:12,390 --> 00:28:17,970
more power for our system we can

00:28:14,940 --> 00:28:21,510
obviously request more from our power

00:28:17,970 --> 00:28:25,470
source if that is power delivery we can

00:28:21,510 --> 00:28:28,500
tell devices to use less power or if

00:28:25,470 --> 00:28:31,980
this is a peak load we can even wait and

00:28:28,500 --> 00:28:33,900
hope that the second peak load won't be

00:28:31,980 --> 00:28:36,720
necessary until the first peak load goes

00:28:33,900 --> 00:28:39,570
away and if that's not the case wait for

00:28:36,720 --> 00:28:42,570
it to pass so this needs to be

00:28:39,570 --> 00:28:46,560
implemented talked in the beginning

00:28:42,570 --> 00:28:52,560
about accessories and we've decided to

00:28:46,560 --> 00:28:59,880
leave this to Elsa I see a head shaking

00:28:52,560 --> 00:29:02,520
their could have thought so anyway there

00:28:59,880 --> 00:29:09,060
is also a debauch accessory which is

00:29:02,520 --> 00:29:12,330
quite ill defined no idea these are

00:29:09,060 --> 00:29:14,580
basically clutches invented for the

00:29:12,330 --> 00:29:16,790
company whose name I don't use here so

00:29:14,580 --> 00:29:21,150
they can make very cheap headphones for

00:29:16,790 --> 00:29:29,900
for their phones but it's part of the

00:29:21,150 --> 00:29:34,200
standard so our API what do we have

00:29:29,900 --> 00:29:36,690
nothing in the sense that of what is in

00:29:34,200 --> 00:29:42,470
the colonel then there is a really big

00:29:36,690 --> 00:29:47,420
nothing we have an API draft which is

00:29:42,470 --> 00:29:50,490
almost finished and could go into 4.8

00:29:47,420 --> 00:29:54,570
which is an API for the alternate modes

00:29:50,490 --> 00:29:57,049
the mode switching and so on that is

00:29:54,570 --> 00:30:00,539
working

00:29:57,049 --> 00:30:03,690
for now it looks like we are going with

00:30:00,539 --> 00:30:06,900
this split of the api's if somebody

00:30:03,690 --> 00:30:11,059
wants something else he should speak up

00:30:06,900 --> 00:30:15,390
this week or it's too late more or less

00:30:11,059 --> 00:30:18,630
we have not yet decided how we do the

00:30:15,390 --> 00:30:22,049
other way round that is not tell the

00:30:18,630 --> 00:30:24,440
colonel to do things but to be notified

00:30:22,049 --> 00:30:28,200
from the colonel about what's happening

00:30:24,440 --> 00:30:32,789
what's happening on the bus is errors

00:30:28,200 --> 00:30:37,380
and the bus has a virtual in principle

00:30:32,789 --> 00:30:40,110
even vectored interrupt capability in

00:30:37,380 --> 00:30:43,080
that case we've not even decided whether

00:30:40,110 --> 00:30:49,320
we should export this to userspace the

00:30:43,080 --> 00:30:58,260
current thinking is no we should not the

00:30:49,320 --> 00:31:00,150
same thing goes about resets so but we

00:30:58,260 --> 00:31:03,510
do have a lot of things which are more

00:31:00,150 --> 00:31:06,900
or less decided and the whole thing is

00:31:03,510 --> 00:31:09,419
to be built in Sisyphus if we can avoid

00:31:06,900 --> 00:31:14,400
it there will won't be an alternate

00:31:09,419 --> 00:31:16,710
modes tool or a USB pd tool if at all

00:31:14,400 --> 00:31:19,530
possible we are going to leave this in

00:31:16,710 --> 00:31:22,080
user space and if we are going to write

00:31:19,530 --> 00:31:27,059
such a tool it's strictly for

00:31:22,080 --> 00:31:30,450
convenience not really necessary we're

00:31:27,059 --> 00:31:33,539
going to export this as directories

00:31:30,450 --> 00:31:39,470
purport with a lot of sub directories

00:31:33,539 --> 00:31:42,990
which will listen the list the the

00:31:39,470 --> 00:31:47,070
available modes the attributes and so on

00:31:42,990 --> 00:31:50,190
and the power delivery attributes we've

00:31:47,070 --> 00:31:53,700
also decided and this is a bit

00:31:50,190 --> 00:31:57,690
problematic in the graphics case that an

00:31:53,700 --> 00:32:00,960
alternate mode will in every case need a

00:31:57,690 --> 00:32:03,419
kernel driver which is responsible for

00:32:00,960 --> 00:32:04,530
power management error handling and hot

00:32:03,419 --> 00:32:08,460
plug

00:32:04,530 --> 00:32:11,250
that means that we have to find a way to

00:32:08,460 --> 00:32:14,270
get at least hot-plug events from four

00:32:11,250 --> 00:32:24,570
monitors from this driver into the

00:32:14,270 --> 00:32:27,840
graphics drivers that much is clear what

00:32:24,570 --> 00:32:32,220
is also not set it a set in stone is the

00:32:27,840 --> 00:32:35,070
problem with the booting we as a

00:32:32,220 --> 00:32:38,940
distribution probably want to be a

00:32:35,070 --> 00:32:41,820
master but that's not something we can

00:32:38,940 --> 00:32:44,970
put into the generic colonel at the same

00:32:41,820 --> 00:32:47,940
time USB ports have to be enumerated

00:32:44,970 --> 00:32:50,220
before we load the inner daddy at least

00:32:47,940 --> 00:32:52,110
in potential this is possible you can

00:32:50,220 --> 00:32:54,000
statically compile the USB core module

00:32:52,110 --> 00:32:59,970
and that's a feature that's going to

00:32:54,000 --> 00:33:05,610
stay so we need to to express to the

00:32:59,970 --> 00:33:08,640
colonel at that stage what do we prefer

00:33:05,610 --> 00:33:11,280
do we want to be a master if we can't do

00:33:08,640 --> 00:33:14,550
or do we insist on being a master and

00:33:11,280 --> 00:33:16,830
reject the other side if it also insists

00:33:14,550 --> 00:33:18,840
on being a master these are

00:33:16,830 --> 00:33:21,330
possibilities which we need to express

00:33:18,840 --> 00:33:23,850
and this probably means we are going to

00:33:21,330 --> 00:33:29,520
introduce module parameters which is not

00:33:23,850 --> 00:33:33,300
nice but I see no other option we are

00:33:29,520 --> 00:33:36,900
also missing a good deal of stuff in

00:33:33,300 --> 00:33:42,320
user space the object the thing is

00:33:36,900 --> 00:33:44,940
gooeys there are is the possibility that

00:33:42,320 --> 00:33:49,590
we want to deviate from the deep of

00:33:44,940 --> 00:33:51,420
default in the data role or in the

00:33:49,590 --> 00:33:56,190
alternate mode that needs a user

00:33:51,420 --> 00:34:00,840
interface and we is distro how am I on

00:33:56,190 --> 00:34:03,660
time okay well this will be faced with

00:34:00,840 --> 00:34:06,550
the fact that we will end up as a slave

00:34:03,660 --> 00:34:09,460
in some too

00:34:06,550 --> 00:34:11,950
places because people will insist on

00:34:09,460 --> 00:34:14,980
linking their laptops with type C cables

00:34:11,950 --> 00:34:16,929
and then somebody has to be the slave we

00:34:14,980 --> 00:34:20,290
need to do something sensible in that

00:34:16,929 --> 00:34:22,570
case that's not yet decided but not a

00:34:20,290 --> 00:34:27,660
question far upstream rather than for

00:34:22,570 --> 00:34:31,270
the distress in the alternate modes

00:34:27,660 --> 00:34:33,490
devices are more or less called for

00:34:31,270 --> 00:34:36,720
actually required but we've seen

00:34:33,490 --> 00:34:40,750
requirements to implement a small

00:34:36,720 --> 00:34:44,080
rudimentary USB 2 0 device which is

00:34:40,750 --> 00:34:47,320
capable of telling the host what it

00:34:44,080 --> 00:34:51,910
wants to be in terms of alternate mode

00:34:47,320 --> 00:34:55,480
and we need to implement a driver for

00:34:51,910 --> 00:34:59,760
this until recently we wanted to have

00:34:55,480 --> 00:34:59,760
this handled by you deaf and the GUI

00:35:00,030 --> 00:35:05,380
considerations about the boot process

00:35:02,580 --> 00:35:08,580
put this into doubt we might actually

00:35:05,380 --> 00:35:12,220
need a kernel driver for this and

00:35:08,580 --> 00:35:15,400
obviously we need still in addition you

00:35:12,220 --> 00:35:19,360
dev rules the problem here is again

00:35:15,400 --> 00:35:22,440
graphics I will come to that and we have

00:35:19,360 --> 00:35:25,810
to come to the fact that we will

00:35:22,440 --> 00:35:29,020
sometimes end up as not the power

00:35:25,810 --> 00:35:31,780
provider but the power sink and then we

00:35:29,020 --> 00:35:34,420
might be asked to give back power or to

00:35:31,780 --> 00:35:37,360
renegotiate our power contract we need

00:35:34,420 --> 00:35:43,000
some user space component for this this

00:35:37,360 --> 00:35:46,180
is asking too much of our kernel in

00:35:43,000 --> 00:35:51,220
addition we need a a power budgeting

00:35:46,180 --> 00:35:54,100
mechanism we can decide to not overcome

00:35:51,220 --> 00:35:58,930
it but I doubt in the long run this is

00:35:54,100 --> 00:36:01,540
viable so we need first something in the

00:35:58,930 --> 00:36:05,680
kernel which implements this and then

00:36:01,540 --> 00:36:10,510
something in user space which decides

00:36:05,680 --> 00:36:13,690
the policy for this and even worse we

00:36:10,510 --> 00:36:18,760
need if we for example are to give back

00:36:13,690 --> 00:36:22,330
power we need a way to switch off

00:36:18,760 --> 00:36:25,870
charging the battery so we need power

00:36:22,330 --> 00:36:28,000
limiters and budget us from other parts

00:36:25,870 --> 00:36:32,160
in the kernel integrated in this power

00:36:28,000 --> 00:36:35,440
budgeting demon singing controller

00:36:32,160 --> 00:36:39,150
however we call it and there is

00:36:35,440 --> 00:36:44,050
something worse we are talking about

00:36:39,150 --> 00:36:47,260
Thunderbolt here and pci and USB 2 in

00:36:44,050 --> 00:36:50,680
the case of the storage thing are parts

00:36:47,260 --> 00:36:52,510
of the block layer now I know many

00:36:50,680 --> 00:36:55,900
people here would like to see power

00:36:52,510 --> 00:36:59,160
limiting only be done in user space the

00:36:55,900 --> 00:37:02,230
problem with this is it is in principle

00:36:59,160 --> 00:37:05,170
impossible this is not even a question

00:37:02,230 --> 00:37:09,570
of system design it is a feature of

00:37:05,170 --> 00:37:13,300
using virtual memory you cannot do this

00:37:09,570 --> 00:37:17,290
you will inevitably deadlock because

00:37:13,300 --> 00:37:19,960
time is short is here anybody who

00:37:17,290 --> 00:37:29,040
insists on a full explanation of why

00:37:19,960 --> 00:37:32,580
this is impossible okay so the actual

00:37:29,040 --> 00:37:35,970
implementation will have to look

00:37:32,580 --> 00:37:35,970
something like this

00:37:37,520 --> 00:37:47,180
and we need further more to come up with

00:37:41,330 --> 00:37:52,130
a sensible boot process because there is

00:37:47,180 --> 00:37:56,960
a problem if display prod really dies as

00:37:52,130 --> 00:38:00,980
a connector we may end up with a systems

00:37:56,960 --> 00:38:05,180
who need the type C to work during the

00:38:00,980 --> 00:38:09,050
boot process to see something and that

00:38:05,180 --> 00:38:12,830
is a problem we haven't even started

00:38:09,050 --> 00:38:19,100
thinking about properly so we are short

00:38:12,830 --> 00:39:09,830
in time any more questions somebody had

00:38:19,100 --> 00:39:12,740
this manner a microphone it is supposed

00:39:09,830 --> 00:39:14,390
to be designed as durable this is my

00:39:12,740 --> 00:39:17,680
only device i'm not going to do a

00:39:14,390 --> 00:39:17,680
torture test on this so

00:39:24,550 --> 00:39:39,520
more questions so are you overwhelmed

00:39:34,880 --> 00:39:49,250
discussed it combination of this

00:39:39,520 --> 00:39:52,990
surprised hungry I'm rather surprised

00:39:49,250 --> 00:39:52,990
either I was totally incomprehensible

00:39:56,110 --> 00:40:04,130
okay who invented the spec was it the AC

00:40:00,350 --> 00:40:06,920
aight guys i guess it was a kind of

00:40:04,130 --> 00:40:10,580
conspiracy between Apple Microsoft

00:40:06,920 --> 00:40:12,320
Google and Intel but if if Apple was

00:40:10,580 --> 00:40:14,390
involved why didn't they use the

00:40:12,320 --> 00:40:17,420
Lightning connector which is not half as

00:40:14,390 --> 00:40:42,310
broken as this one I guess because the

00:40:17,420 --> 00:40:47,140
other side was also involved anymore

00:40:42,310 --> 00:40:47,140

YouTube URL: https://www.youtube.com/watch?v=fEODFoRSI5g


