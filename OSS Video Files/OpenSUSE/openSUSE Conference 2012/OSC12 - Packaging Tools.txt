Title: OSC12 - Packaging Tools
Publication date: 2012-10-24
Playlist: openSUSE Conference 2012
Description: 
	OSC12 - Packaging Tools from openSUSE. Like this? Watch the latest episode of openSUSE on Blip! http://blip.tv/opensuse/watch 

Speaker: Daniel Lovasko
Room: Riker

See all episodes of openSUSE http://blip.tv/opensuse#EpisodeArchive
Visit openSUSE's series page http://blip.tv/opensuse
Captions: 
	00:00:00,000 --> 00:00:08,990
the presentation packaging tool who have

00:00:03,600 --> 00:00:12,360
daily lovasco he is here yesterday a

00:00:08,990 --> 00:00:15,780
plan of this day has been changed a

00:00:12,360 --> 00:00:19,650
little bit we have this presentation

00:00:15,780 --> 00:00:23,189
half an hour and two half past ten and

00:00:19,650 --> 00:00:26,760
afterward we will have a break of half

00:00:23,189 --> 00:00:31,610
an hour and at eleven o'clock Hannah's

00:00:26,760 --> 00:00:36,300
Reineke tales about megasis and cereals

00:00:31,610 --> 00:00:41,600
cue the cuckoo emo device pass through

00:00:36,300 --> 00:00:51,570
with v F io when your plan is outside

00:00:41,600 --> 00:00:54,750
too okay hi my name is Daniel and I will

00:00:51,570 --> 00:00:57,170
talk here about the packaging tools so

00:00:54,750 --> 00:01:03,059
you are right here for this presentation

00:00:57,170 --> 00:01:06,630
so first question maybe what is it what

00:01:03,059 --> 00:01:11,970
are the packaging tools so it's a set of

00:01:06,630 --> 00:01:16,470
scripts we're out here in Prague that

00:01:11,970 --> 00:01:21,180
make your packaging tasks a more quick

00:01:16,470 --> 00:01:23,880
and they make it easier for you to do

00:01:21,180 --> 00:01:30,659
all these things that have something to

00:01:23,880 --> 00:01:35,240
do with a packaging work or workflow so

00:01:30,659 --> 00:01:39,509
i will talk first about the motivation

00:01:35,240 --> 00:01:43,200
why I developed these tools and then oh

00:01:39,509 --> 00:01:46,340
why I use them my motivation to use them

00:01:43,200 --> 00:01:50,220
and that may be also your motivation to

00:01:46,340 --> 00:01:55,470
look these tools up and maybe give them

00:01:50,220 --> 00:02:01,110
a try then I will talk about how to use

00:01:55,470 --> 00:02:03,630
them with our them and in third third

00:02:01,110 --> 00:02:06,509
part I will talk about how to use these

00:02:03,630 --> 00:02:09,959
how to use these tools not by the human

00:02:06,509 --> 00:02:13,110
but by some another script to automate

00:02:09,959 --> 00:02:16,530
some things that don't need

00:02:13,110 --> 00:02:19,260
some maintainer to work and then there

00:02:16,530 --> 00:02:23,280
will be part when you can ask me and I

00:02:19,260 --> 00:02:29,040
will hopefully answer you so the first

00:02:23,280 --> 00:02:32,180
part the motivation so first there's

00:02:29,040 --> 00:02:35,250
this basic one that I wanted to remove

00:02:32,180 --> 00:02:36,630
repetitive and boring tasks that come

00:02:35,250 --> 00:02:39,780
along when you're working with the

00:02:36,630 --> 00:02:43,470
packages this is really really the basic

00:02:39,780 --> 00:02:46,500
motivation and its really maybe the most

00:02:43,470 --> 00:02:49,440
important one secondly there is this

00:02:46,500 --> 00:02:53,459
establishing standard you know what when

00:02:49,440 --> 00:02:56,190
I've write some scripts for package a

00:02:53,459 --> 00:03:00,900
and my friend my colleague writes a

00:02:56,190 --> 00:03:03,209
script for package B and we we share

00:03:00,900 --> 00:03:07,380
each other's each other scripts and you

00:03:03,209 --> 00:03:09,690
know I I have no a no idea what it is

00:03:07,380 --> 00:03:12,600
you know he uses his own functions in

00:03:09,690 --> 00:03:17,070
its own his own stuff and I have like no

00:03:12,600 --> 00:03:21,780
idea and and if we both used the same

00:03:17,070 --> 00:03:23,549
tools for example mine we can we can

00:03:21,780 --> 00:03:27,750
easily understand that you know so

00:03:23,549 --> 00:03:30,150
standard is really important the third

00:03:27,750 --> 00:03:33,840
thing is to deal with flaws in some

00:03:30,150 --> 00:03:37,650
tools lying underneath this stuff for

00:03:33,840 --> 00:03:42,360
example the comment line interface to

00:03:37,650 --> 00:03:46,530
the build service or the RPM speed files

00:03:42,360 --> 00:03:51,000
they are not that great and I think by

00:03:46,530 --> 00:03:56,850
my tools can help with that and the last

00:03:51,000 --> 00:04:01,080
one is to is to put the package in the

00:03:56,850 --> 00:04:02,340
center of the work you do not not other

00:04:01,080 --> 00:04:05,700
things just the package you know you

00:04:02,340 --> 00:04:07,290
work with packages and you want to do

00:04:05,700 --> 00:04:11,420
your stuff with a package so it's really

00:04:07,290 --> 00:04:14,700
important it's like a buzz word here so

00:04:11,420 --> 00:04:18,090
the the maintenance work load so now we

00:04:14,700 --> 00:04:23,460
can describe what is like to abstract it

00:04:18,090 --> 00:04:26,250
somehow on one level more so first you

00:04:23,460 --> 00:04:26,680
want to to branch your package or check

00:04:26,250 --> 00:04:31,479
it out

00:04:26,680 --> 00:04:34,150
from the from the build service and when

00:04:31,479 --> 00:04:39,490
you're maintaining something for the /

00:04:34,150 --> 00:04:42,729
or for opens use it so again you need to

00:04:39,490 --> 00:04:46,060
work package centric so my tools does

00:04:42,729 --> 00:04:48,759
that for both Oh second one you want to

00:04:46,060 --> 00:04:50,979
the unpacked sources and for example

00:04:48,759 --> 00:04:53,919
when you're working with some patch

00:04:50,979 --> 00:04:56,289
stack their quilt is really important

00:04:53,919 --> 00:05:02,979
for you so you want to build some quill

00:04:56,289 --> 00:05:05,289
series 13 is to then is the part which I

00:05:02,979 --> 00:05:09,280
can't help you with is just updating the

00:05:05,289 --> 00:05:14,020
package or fixing some bug and there is

00:05:09,280 --> 00:05:17,099
no help for that so after that you want

00:05:14,020 --> 00:05:20,500
to make some changes to your space file

00:05:17,099 --> 00:05:23,470
you want to add the patch is there you

00:05:20,500 --> 00:05:25,509
want to change version you want to

00:05:23,470 --> 00:05:28,630
change some file name and all the stuff

00:05:25,509 --> 00:05:30,789
and my toes can help with that and the

00:05:28,630 --> 00:05:33,659
last one is you want to submit your

00:05:30,789 --> 00:05:37,180
changes back to the server which can be

00:05:33,659 --> 00:05:38,860
sometimes really really annoying when

00:05:37,180 --> 00:05:41,229
for example you are doing something in

00:05:38,860 --> 00:05:43,240
your home branch then you have to submit

00:05:41,229 --> 00:05:46,270
it to the devil project then build it

00:05:43,240 --> 00:05:48,220
there then to the factory so there is a

00:05:46,270 --> 00:05:54,159
way to make these things better to make

00:05:48,220 --> 00:05:56,860
to how to make them and so the important

00:05:54,159 --> 00:06:00,909
question here is how can these tools

00:05:56,860 --> 00:06:04,509
help you or any package maintain your

00:06:00,909 --> 00:06:09,009
out there to do there to do their job so

00:06:04,509 --> 00:06:12,820
here's the answer first first thing we

00:06:09,009 --> 00:06:17,110
made is a get back command which is some

00:06:12,820 --> 00:06:20,289
kind of reincarnation of the old one old

00:06:17,110 --> 00:06:23,970
get back which you may remember so what

00:06:20,289 --> 00:06:29,470
it does that it download the package in

00:06:23,970 --> 00:06:32,199
all maintained products so oh that means

00:06:29,470 --> 00:06:34,960
it will download it for all the all the

00:06:32,199 --> 00:06:39,159
open shoes and all those layers that are

00:06:34,960 --> 00:06:40,120
that contain this package and the second

00:06:39,159 --> 00:06:43,720
thing is

00:06:40,120 --> 00:06:46,419
creates nice and clean directory

00:06:43,720 --> 00:06:49,840
structure which is the dog is not

00:06:46,419 --> 00:06:55,360
capable of as my opinion in my opinion

00:06:49,840 --> 00:06:57,639
and there is so ability to remotely

00:06:55,360 --> 00:07:00,220
delete some files so when i know i'm

00:06:57,639 --> 00:07:02,199
updating just some terrible and the

00:07:00,220 --> 00:07:04,870
terrible is really huge and i have no

00:07:02,199 --> 00:07:07,240
time for downloading it for every

00:07:04,870 --> 00:07:11,380
maintained project i might also want

00:07:07,240 --> 00:07:14,440
like only branch the branch the package

00:07:11,380 --> 00:07:17,979
on the on the server then delete the

00:07:14,440 --> 00:07:20,530
files before they download because i

00:07:17,979 --> 00:07:23,080
know i immediately after i will download

00:07:20,530 --> 00:07:28,000
them i will i will remove them so it's

00:07:23,080 --> 00:07:31,060
really pointless to to download them and

00:07:28,000 --> 00:07:36,130
just do nothing with them so this is to

00:07:31,060 --> 00:07:39,250
prevent this wasting of network and then

00:07:36,130 --> 00:07:42,729
I made some also best completion which I

00:07:39,250 --> 00:07:46,330
will talk about later so so this is how

00:07:42,729 --> 00:07:48,729
it looks you right there is some kind of

00:07:46,330 --> 00:07:52,360
master command behind all this like when

00:07:48,729 --> 00:07:55,720
you use git or this kind of stuffs you

00:07:52,360 --> 00:07:58,530
just it's called a pc in PE ce k so it's

00:07:55,720 --> 00:08:02,860
just like for package or because a

00:07:58,530 --> 00:08:07,120
Pikachu was taken so if i get back and

00:08:02,860 --> 00:08:11,130
the package name there are some options

00:08:07,120 --> 00:08:14,889
for example i can i can write shoes and

00:08:11,130 --> 00:08:17,590
then some regular expression which says

00:08:14,889 --> 00:08:21,400
that i want only these versions of the

00:08:17,590 --> 00:08:23,080
package in these shoes maintain products

00:08:21,400 --> 00:08:28,389
so for example when I've right there

00:08:23,080 --> 00:08:33,130
like one and all this all this wild card

00:08:28,389 --> 00:08:43,510
stuff in left and right I will end up

00:08:33,130 --> 00:08:45,610
with only / like 10 and 11 the same goes

00:08:43,510 --> 00:08:48,579
with the open shoes then there is a

00:08:45,610 --> 00:08:50,950
special option for factory and the

00:08:48,579 --> 00:08:53,750
branch there means that when I'm without

00:08:50,950 --> 00:08:56,420
a maintainer of it in the devil project

00:08:53,750 --> 00:09:00,680
I might want to only check out the

00:08:56,420 --> 00:09:04,070
package not to branch it also but there

00:09:00,680 --> 00:09:07,730
were some requests that sometimes it is

00:09:04,070 --> 00:09:10,040
it I need to branch it also not only

00:09:07,730 --> 00:09:14,360
check it out so there is like some force

00:09:10,040 --> 00:09:17,780
option to branch it and then the delete

00:09:14,360 --> 00:09:19,930
pattern again some regular expression to

00:09:17,780 --> 00:09:24,890
say which files i'm going to download

00:09:19,930 --> 00:09:27,770
which i'm not going to download so here

00:09:24,890 --> 00:09:30,980
is the the directory structure it create

00:09:27,770 --> 00:09:34,790
so let's imagine i've wrote the get back

00:09:30,980 --> 00:09:37,940
said the line editor and what it creates

00:09:34,790 --> 00:09:40,280
is like the set directory and then there

00:09:37,940 --> 00:09:44,440
are these nicely named directories

00:09:40,280 --> 00:09:47,060
android in the directory tree that all

00:09:44,440 --> 00:09:50,200
are simply more useful and this is the

00:09:47,060 --> 00:09:54,080
example of package centric approach

00:09:50,200 --> 00:09:55,940
anything so when I when I'm working with

00:09:54,080 --> 00:09:57,860
some package I want them all in one

00:09:55,940 --> 00:10:01,070
director which which for example when I

00:09:57,860 --> 00:10:04,610
do m branch it gives me the 11 for

00:10:01,070 --> 00:10:06,500
version in my 11 for a directory with

00:10:04,610 --> 00:10:09,860
all those packages and when I'm working

00:10:06,500 --> 00:10:12,200
on on one package mostly well I'm not

00:10:09,860 --> 00:10:15,680
working on like five of them in one time

00:10:12,200 --> 00:10:17,630
so thing is I working on one package and

00:10:15,680 --> 00:10:20,060
I want all my versions to be in the same

00:10:17,630 --> 00:10:22,250
directory so I can easily do some

00:10:20,060 --> 00:10:26,120
operations on it like like for example

00:10:22,250 --> 00:10:31,450
find which is really easier to do when I

00:10:26,120 --> 00:10:34,490
have them in 13 sew and this

00:10:31,450 --> 00:10:39,500
completion that I talked about when I

00:10:34,490 --> 00:10:43,820
write the pc k get back and then I for

00:10:39,500 --> 00:10:47,240
example for god I want to I want to not

00:10:43,820 --> 00:10:50,180
to waste time it completes the package

00:10:47,240 --> 00:10:51,690
names from the oversee my my package

00:10:50,180 --> 00:10:54,660
list

00:10:51,690 --> 00:10:59,940
which are the packages that you are

00:10:54,660 --> 00:11:02,160
maintained their off so next thing this

00:10:59,940 --> 00:11:05,340
is the ability to to delete those files

00:11:02,160 --> 00:11:11,250
so for example and I want to delete all

00:11:05,340 --> 00:11:15,600
the zip star balls I just write regular

00:11:11,250 --> 00:11:17,220
expression like this and they before

00:11:15,600 --> 00:11:20,370
before the final checkout they are

00:11:17,220 --> 00:11:23,700
deleted so i can replace them with like

00:11:20,370 --> 00:11:25,590
some of my own or the new version okay

00:11:23,700 --> 00:11:28,170
the second thing is you want to unpack

00:11:25,590 --> 00:11:31,170
your sources and quilt set up is the

00:11:28,170 --> 00:11:36,080
thing you you've probably used for that

00:11:31,170 --> 00:11:38,070
and it is somehow slow because of the

00:11:36,080 --> 00:11:39,450
sometimes you don't want that much

00:11:38,070 --> 00:11:41,820
security when you're working with your

00:11:39,450 --> 00:11:44,370
own package now you trust your own

00:11:41,820 --> 00:11:46,320
package you only are you or some of your

00:11:44,370 --> 00:11:51,420
colleagues then you know make make

00:11:46,320 --> 00:11:55,050
changes to this package and there is

00:11:51,420 --> 00:11:58,110
like no reason not to trust it and quilt

00:11:55,050 --> 00:12:03,150
thus the thing that it unpacks the

00:11:58,110 --> 00:12:06,090
Tarble two times and when the tower ball

00:12:03,150 --> 00:12:08,100
is really really big huge and you have

00:12:06,090 --> 00:12:11,970
to do it twice it really slows you down

00:12:08,100 --> 00:12:16,110
and there is another flaw with the quilt

00:12:11,970 --> 00:12:19,920
set up that when in your in your page

00:12:16,110 --> 00:12:22,740
lists one of them fails your quilt

00:12:19,920 --> 00:12:25,290
series is not created you know you get

00:12:22,740 --> 00:12:30,350
unpacked sources but no patch is applied

00:12:25,290 --> 00:12:34,320
and what is done here that we wrote it I

00:12:30,350 --> 00:12:37,290
wrote some replacement for the quilt set

00:12:34,320 --> 00:12:40,740
up and we called it fast re which is

00:12:37,290 --> 00:12:44,339
again some word play for the for the

00:12:40,740 --> 00:12:46,380
comment used before the re and the first

00:12:44,339 --> 00:12:49,410
word is to really say that it's it's

00:12:46,380 --> 00:12:51,780
really faster than the the quilt because

00:12:49,410 --> 00:12:54,089
it's just the unpacking just once and

00:12:51,780 --> 00:12:59,910
there are many packages that this is

00:12:54,089 --> 00:13:02,280
really crucial for so the another really

00:12:59,910 --> 00:13:04,330
important thing is that even if one of

00:13:02,280 --> 00:13:07,040
your patch is

00:13:04,330 --> 00:13:11,870
let's imagine we have like 20 pages in

00:13:07,040 --> 00:13:17,269
our series and we need and the tenth of

00:13:11,870 --> 00:13:19,880
them just he won't apply now what our

00:13:17,269 --> 00:13:24,980
thing does work our script does that it

00:13:19,880 --> 00:13:27,920
applies a nine of the patches to the

00:13:24,980 --> 00:13:30,500
series and then wait for you to apply

00:13:27,920 --> 00:13:34,459
the tenth you know to to fix those

00:13:30,500 --> 00:13:39,250
rejects there so this is really really

00:13:34,459 --> 00:13:43,010
important thing that is not in quilt

00:13:39,250 --> 00:13:45,320
third thing is to detect when your

00:13:43,010 --> 00:13:48,709
package contains the directory patches

00:13:45,320 --> 00:13:52,070
or the file series for example package

00:13:48,709 --> 00:13:55,610
amanda has that and quilt has problem

00:13:52,070 --> 00:14:00,050
with that he won't he won't be able to

00:13:55,610 --> 00:14:01,790
unpack that and there is the thing I

00:14:00,050 --> 00:14:04,730
talk about that every table gets

00:14:01,790 --> 00:14:09,050
expanded just two ones which improves

00:14:04,730 --> 00:14:13,730
the performance all then making making

00:14:09,050 --> 00:14:17,180
changes to the space file so first thing

00:14:13,730 --> 00:14:20,770
is a really common thing to do when you

00:14:17,180 --> 00:14:23,270
do the packaging workflow you add

00:14:20,770 --> 00:14:26,329
patches there you know that that means

00:14:23,270 --> 00:14:29,089
you add the tag the tag with the name of

00:14:26,329 --> 00:14:32,180
the patch and then to the prep section

00:14:29,089 --> 00:14:34,459
of the of the file you add the micro

00:14:32,180 --> 00:14:37,880
patch and what does this comment you

00:14:34,459 --> 00:14:40,339
just write a PC case pads which is the

00:14:37,880 --> 00:14:44,360
comment that how that does all these and

00:14:40,339 --> 00:14:47,270
you write a at patch and then the the

00:14:44,360 --> 00:14:51,110
patch name and it the magic is done it

00:14:47,270 --> 00:14:56,600
will be inserted into the it will be

00:14:51,110 --> 00:14:59,180
inserted into the the tag and also to do

00:14:56,600 --> 00:15:01,519
the prep section then there is this easy

00:14:59,180 --> 00:15:06,769
way that you can write and read text an

00:15:01,519 --> 00:15:09,310
hour at all the whole prep or every

00:15:06,769 --> 00:15:12,230
every section you just right there oh

00:15:09,310 --> 00:15:15,350
the thing is that is really really

00:15:12,230 --> 00:15:17,420
amazing is to read these things across

00:15:15,350 --> 00:15:23,000
all maintained versions

00:15:17,420 --> 00:15:26,420
so when I when I for example asked what

00:15:23,000 --> 00:15:28,700
is the version of bash in every every

00:15:26,420 --> 00:15:31,970
mountain project product so i will get

00:15:28,700 --> 00:15:34,040
list like this which content like in the

00:15:31,970 --> 00:15:35,510
factory this version for two so when i'm

00:15:34,040 --> 00:15:39,590
maintaining something and i know that

00:15:35,510 --> 00:15:42,230
there is this problem with this i need

00:15:39,590 --> 00:15:47,150
to fix this inversions tree and higher I

00:15:42,230 --> 00:15:50,690
just I just look at this and I know that

00:15:47,150 --> 00:15:53,450
there is no need for me to fix it for or

00:15:50,690 --> 00:15:56,870
you know what I mean that just you can

00:15:53,450 --> 00:15:59,150
you can easily see without versions and

00:15:56,870 --> 00:16:04,670
then you can focus on the product there

00:15:59,150 --> 00:16:06,800
are in some cut or broken and think I

00:16:04,670 --> 00:16:08,990
haven't spoke about is the merging of

00:16:06,800 --> 00:16:11,660
conflicting patches so let's imagine I

00:16:08,990 --> 00:16:16,100
have to purchase a and B and both end

00:16:11,660 --> 00:16:19,160
with a page number eight and that is a

00:16:16,100 --> 00:16:23,540
problem and there is a solution for this

00:16:19,160 --> 00:16:27,740
problem the merge the merge thing here

00:16:23,540 --> 00:16:30,830
is that the first the first file you put

00:16:27,740 --> 00:16:34,430
their get the priority and the second

00:16:30,830 --> 00:16:39,890
one is moved to the patch nine and also

00:16:34,430 --> 00:16:42,050
it is renamed in the prep section so the

00:16:39,890 --> 00:16:46,460
submitting bed as I talk there is this

00:16:42,050 --> 00:16:51,770
comment we call it no basically bubble

00:16:46,460 --> 00:16:56,000
some kind of bubbling up on the tree so

00:16:51,770 --> 00:16:58,790
the when you when you develop something

00:16:56,000 --> 00:17:01,970
for the factory as I told earlier you

00:16:58,790 --> 00:17:05,420
have your branch then you have to submit

00:17:01,970 --> 00:17:09,620
it to the devil project and you have to

00:17:05,420 --> 00:17:11,890
wait for successful build and after that

00:17:09,620 --> 00:17:15,560
you have to submit it to the factory and

00:17:11,890 --> 00:17:18,890
then wait for the built there and this

00:17:15,560 --> 00:17:26,060
can be automated so let's do that with

00:17:18,890 --> 00:17:28,550
this command so did was this is all this

00:17:26,060 --> 00:17:30,770
is all for the for the tools that you

00:17:28,550 --> 00:17:33,920
can use there are some more

00:17:30,770 --> 00:17:35,900
some more special ones that fix some

00:17:33,920 --> 00:17:39,670
problems other but they're not just

00:17:35,900 --> 00:17:44,540
important but when you'll when you look

00:17:39,670 --> 00:17:47,090
in our page that will show later you can

00:17:44,540 --> 00:17:49,310
find those tools also there and the last

00:17:47,090 --> 00:17:55,420
thing I will talk about here is the

00:17:49,310 --> 00:17:59,960
update creation which uses these tools

00:17:55,420 --> 00:18:06,410
like I I describe the the packaging

00:17:59,960 --> 00:18:09,400
workflow and when the except for the bug

00:18:06,410 --> 00:18:12,440
fixing part we we have it all here and

00:18:09,400 --> 00:18:15,020
when you're updating some binary package

00:18:12,440 --> 00:18:18,070
or some package that only you just

00:18:15,020 --> 00:18:22,160
update the tarball again again again

00:18:18,070 --> 00:18:25,730
there is a no need for package

00:18:22,160 --> 00:18:28,580
maintainer to lose time to lose this

00:18:25,730 --> 00:18:33,020
time with this this repetitive and

00:18:28,580 --> 00:18:37,640
somehow boring thing so we can use these

00:18:33,020 --> 00:18:42,590
tools for for just get packing all the

00:18:37,640 --> 00:18:45,290
all the maintenance we then do some md5

00:18:42,590 --> 00:18:48,260
hash of the new terrible of the author

00:18:45,290 --> 00:18:49,790
of the turbo we downloaded of the turbo

00:18:48,260 --> 00:18:53,420
we branched with the get back comment

00:18:49,790 --> 00:18:55,910
and then we can see is it new yes we can

00:18:53,420 --> 00:19:00,280
we can put it there we make some changes

00:18:55,910 --> 00:19:04,040
automatically to the space file and we

00:19:00,280 --> 00:19:06,740
bubble it up to the to the factory or we

00:19:04,040 --> 00:19:14,840
just submit request it to the to the

00:19:06,740 --> 00:19:18,350
appropriate Oh repository so that's all

00:19:14,840 --> 00:19:21,470
so if you want to help me or help us

00:19:18,350 --> 00:19:25,730
with these tools there is this guitarist

00:19:21,470 --> 00:19:29,260
project in Peters orc opens use Peck

00:19:25,730 --> 00:19:34,190
tools and also we've submitted this

00:19:29,260 --> 00:19:37,040
there is also in a package for this in

00:19:34,190 --> 00:19:42,200
utilities project which will be soon I

00:19:37,040 --> 00:19:43,820
hope accepted for the factory so thank

00:19:42,200 --> 00:19:46,460
you very much for listening

00:19:43,820 --> 00:19:50,740
now is the time for your questions and

00:19:46,460 --> 00:19:50,740
then hopefully I can answer them

00:20:02,680 --> 00:20:09,460
oh yes the are delete yes it will it

00:20:06,520 --> 00:20:11,680
will delete it from it and but it's just

00:20:09,460 --> 00:20:14,920
your branch you know jus so it's it's

00:20:11,680 --> 00:20:23,350
it's okay and then you can replace it

00:20:14,920 --> 00:20:26,890
with the new n ok so probably they are

00:20:23,350 --> 00:20:29,460
no more questions so thank you for

00:20:26,890 --> 00:20:29,460

YouTube URL: https://www.youtube.com/watch?v=JXcZBVc7t_s


