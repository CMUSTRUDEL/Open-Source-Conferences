Title: osc12: Scanny â€” Ruby on Rails Security Scanner
Publication date: 2012-10-24
Playlist: openSUSE Conference 2012
Description: 
	osc12: Scanny ? Ruby on Rails Security Scanner from openSUSE. Like this? Watch the latest episode of openSUSE on Blip! http://blip.tv/opensuse/watch 

Speaker: David Majda
Room: Spock

See all episodes of openSUSE http://blip.tv/opensuse#EpisodeArchive
Visit openSUSE's series page http://blip.tv/opensuse
Captions: 
	00:00:09,440 --> 00:00:16,020
okay so welcome again my name is David

00:00:13,559 --> 00:00:18,390
mida i'm working in Souza and Sue's a

00:00:16,020 --> 00:00:22,340
studio team and today I will talk about

00:00:18,390 --> 00:00:26,130
Kenny ruby-on-rails security scanner so

00:00:22,340 --> 00:00:30,240
first let's have a look at web security

00:00:26,130 --> 00:00:31,830
in general so there is this organization

00:00:30,240 --> 00:00:34,350
called web application security cons

00:00:31,830 --> 00:00:37,579
ozium that does some web security

00:00:34,350 --> 00:00:41,010
projects and produces some report and in

00:00:37,579 --> 00:00:44,280
208 they did some testing of about

00:00:41,010 --> 00:00:45,920
twelve thousand websites various kinds

00:00:44,280 --> 00:00:49,800
of testing various kinds of websites and

00:00:45,920 --> 00:00:51,480
they found quite disturbing results so

00:00:49,800 --> 00:00:54,300
sixty-five percent of the websites

00:00:51,480 --> 00:00:55,860
contain some form of information leakage

00:00:54,300 --> 00:00:58,969
meaning some users can access

00:00:55,860 --> 00:01:01,230
information which they shouldn't

00:00:58,969 --> 00:01:04,040
thirty-eight percent websites are

00:01:01,230 --> 00:01:06,119
vulnerable to cross-site scripting

00:01:04,040 --> 00:01:08,100
meaning that you can inject some

00:01:06,119 --> 00:01:12,630
JavaScript somewhere which does some

00:01:08,100 --> 00:01:17,119
harmful things for users thirty-four

00:01:12,630 --> 00:01:20,009
percent of the website got problems with

00:01:17,119 --> 00:01:23,340
HTTPS configuration and other transport

00:01:20,009 --> 00:01:25,229
layer settings for one third of the

00:01:23,340 --> 00:01:27,000
websites you could identify the software

00:01:25,229 --> 00:01:28,140
that runs there and then you could of

00:01:27,000 --> 00:01:30,119
course attack specific vulnerabilities

00:01:28,140 --> 00:01:34,110
in the specific versions of the software

00:01:30,119 --> 00:01:35,939
and of course then forget the usual SQL

00:01:34,110 --> 00:01:39,090
injection problems which affected

00:01:35,939 --> 00:01:40,710
thirteen percent of the website so when

00:01:39,090 --> 00:01:42,720
you look at these numbers they are quite

00:01:40,710 --> 00:01:45,360
disturbing and I don't know how the

00:01:42,720 --> 00:01:47,009
report is really accurate because this

00:01:45,360 --> 00:01:48,840
is how to verify but even if these

00:01:47,009 --> 00:01:51,329
numbers were like one half or one-third

00:01:48,840 --> 00:01:55,920
that means still thats web security is

00:01:51,329 --> 00:01:59,759
quite a big problem in Suzy we have

00:01:55,920 --> 00:02:01,710
quite some web applications and in

00:01:59,759 --> 00:02:04,829
opensuse to you so we have success to do

00:02:01,710 --> 00:02:08,190
which I work on we have phobias which is

00:02:04,829 --> 00:02:10,229
a web based configuration to we have SMS

00:02:08,190 --> 00:02:13,050
which provides updates for appliance is

00:02:10,229 --> 00:02:13,930
created by studio we have Susan manager

00:02:13,050 --> 00:02:17,409
which is yet

00:02:13,930 --> 00:02:19,599
other configuration tool and opensuse

00:02:17,409 --> 00:02:21,969
has also some projects like the build

00:02:19,599 --> 00:02:26,290
service and probably many others which I

00:02:21,969 --> 00:02:28,870
don't know even and for one thing that's

00:02:26,290 --> 00:02:32,019
common for these applications is that

00:02:28,870 --> 00:02:33,670
most of them are written in Ruby or from

00:02:32,019 --> 00:02:37,650
the ones on the lists all except those

00:02:33,670 --> 00:02:40,420
who say manager for example so when we

00:02:37,650 --> 00:02:44,609
try to deal with web application

00:02:40,420 --> 00:02:47,650
security in Suzie we focused on Ruby and

00:02:44,609 --> 00:02:51,010
we dealt with security by doing security

00:02:47,650 --> 00:02:54,099
audits and this is kind of a tedious

00:02:51,010 --> 00:02:58,169
manual work so we try to automate it at

00:02:54,099 --> 00:03:01,180
least to some degree so our security

00:02:58,169 --> 00:03:04,959
researcher Thomas began came up with a

00:03:01,180 --> 00:03:07,090
parallel scanner which scanned the

00:03:04,959 --> 00:03:10,629
source code for some suspicious patterns

00:03:07,090 --> 00:03:14,290
that he could then look in more details

00:03:10,629 --> 00:03:17,230
so the scanner was really primitive it

00:03:14,290 --> 00:03:20,829
just basically was a girl if a glorified

00:03:17,230 --> 00:03:26,440
crap it here you can see an example of

00:03:20,829 --> 00:03:29,859
patterns that it tried to scan in the

00:03:26,440 --> 00:03:32,109
code so you see that it's quite a messy

00:03:29,859 --> 00:03:36,699
thing and it doesn't understand Ruby

00:03:32,109 --> 00:03:38,739
properly so a year ago me and another

00:03:36,699 --> 00:03:42,060
developer Flavio castelli decided to

00:03:38,739 --> 00:03:46,959
create a new tool we call it skinny and

00:03:42,060 --> 00:03:49,060
replace the old peril based scanner the

00:03:46,959 --> 00:03:52,989
important property of this tool is that

00:03:49,060 --> 00:03:54,669
it contains proper Ruby parser if you

00:03:52,989 --> 00:03:56,530
know there will be Walt a bit you know

00:03:54,669 --> 00:03:58,930
that parsing robeson trivial and there

00:03:56,530 --> 00:04:01,479
are a lot of solutions which are some

00:03:58,930 --> 00:04:04,120
are good some are bad so we chose after

00:04:01,479 --> 00:04:06,150
some deliberation to use Ruby Gnaeus

00:04:04,120 --> 00:04:08,049
because that's an alternative

00:04:06,150 --> 00:04:13,780
implementation of Ruby which contains

00:04:08,049 --> 00:04:15,790
quite nice parser nice being meaning

00:04:13,780 --> 00:04:20,019
mostly that the output of the passer the

00:04:15,790 --> 00:04:23,770
syntax tree is in format that's easy to

00:04:20,019 --> 00:04:25,949
work with we decided to make scan a

00:04:23,770 --> 00:04:29,440
modular

00:04:25,949 --> 00:04:31,900
meaning that all it's split into

00:04:29,440 --> 00:04:34,479
separate checks and each check checks

00:04:31,900 --> 00:04:36,550
just one thing for example some current

00:04:34,479 --> 00:04:39,550
site scripting issue or possible SQL

00:04:36,550 --> 00:04:42,780
injection issue and so on and each of

00:04:39,550 --> 00:04:46,509
these checks is in separate file and

00:04:42,780 --> 00:04:48,669
it's quite easy to understand these

00:04:46,509 --> 00:04:50,680
checks and to add the new checks if you

00:04:48,669 --> 00:04:56,310
have some custom code custom tools which

00:04:50,680 --> 00:05:00,820
you also need to check with the tool so

00:04:56,310 --> 00:05:03,160
skinny works in quite simple way it

00:05:00,820 --> 00:05:06,190
passes the Ruby gets the syntax tree and

00:05:03,160 --> 00:05:09,280
then finds patterns inside so we quickly

00:05:06,190 --> 00:05:12,389
discovered that looking for patterns and

00:05:09,280 --> 00:05:15,789
a syntax free just by iterating over and

00:05:12,389 --> 00:05:18,039
doing all in the code is quite tedious

00:05:15,789 --> 00:05:21,099
and the code isn't very well maintained

00:05:18,039 --> 00:05:24,250
by so we created a special query

00:05:21,099 --> 00:05:26,940
language called machete which is

00:05:24,250 --> 00:05:30,759
specialized in searching for patterns in

00:05:26,940 --> 00:05:33,070
Ruby knees source trees so this is

00:05:30,759 --> 00:05:35,770
completely separate project you can use

00:05:33,070 --> 00:05:38,830
it for other tools you can find it on

00:05:35,770 --> 00:05:46,530
github but it's used as underlying

00:05:38,830 --> 00:05:48,940
underlying library in scanning so after

00:05:46,530 --> 00:05:53,110
the as I said the project was started

00:05:48,940 --> 00:05:55,599
about a year ago and unfortunately we

00:05:53,110 --> 00:05:59,080
got distracted and didn't have much time

00:05:55,599 --> 00:06:04,389
to work on skinny during after the

00:05:59,080 --> 00:06:06,460
initial few months but James who is

00:06:04,389 --> 00:06:09,669
sitting over there proposed that we

00:06:06,460 --> 00:06:12,270
should put that up on google summer of

00:06:09,669 --> 00:06:14,409
code as a google Summer of Code project

00:06:12,270 --> 00:06:16,090
could you please raise your hands who is

00:06:14,409 --> 00:06:19,419
familiar with google Summer of Code how

00:06:16,090 --> 00:06:23,080
that works okay so there are some point

00:06:19,419 --> 00:06:28,659
people who are not now it was just a

00:06:23,080 --> 00:06:30,460
pole so basically there are some

00:06:28,659 --> 00:06:34,659
organizations opensuse is one of these

00:06:30,460 --> 00:06:37,479
organizations and they create some

00:06:34,659 --> 00:06:39,110
projects or proposals for projects and

00:06:37,479 --> 00:06:40,640
then they seek students

00:06:39,110 --> 00:06:44,930
to work on these projects during one

00:06:40,640 --> 00:06:46,340
summer and they pair up with students

00:06:44,930 --> 00:06:48,620
and these students work on these

00:06:46,340 --> 00:06:51,100
projects and Google paste them for that

00:06:48,620 --> 00:06:54,320
so Google supports open-source this way

00:06:51,100 --> 00:06:57,170
so we put up skinny as a summer of code

00:06:54,320 --> 00:07:00,020
project this year and we found a good

00:06:57,170 --> 00:07:02,570
student peotone Yelich knee from Poland

00:07:00,020 --> 00:07:06,380
who was interested in that so I worked

00:07:02,570 --> 00:07:11,750
with him during the summer to improve

00:07:06,380 --> 00:07:13,970
the scanner so he added basically he

00:07:11,750 --> 00:07:17,750
ported all the checks from the old peril

00:07:13,970 --> 00:07:20,630
based scanner to scan II he also added a

00:07:17,750 --> 00:07:25,210
command-line interface too skinny so

00:07:20,630 --> 00:07:27,710
that it's actually usable he also

00:07:25,210 --> 00:07:30,140
prepared integration into continuous

00:07:27,710 --> 00:07:34,490
integration servers like Jenkins and

00:07:30,140 --> 00:07:36,710
Travis CI he also created a ruby dsl for

00:07:34,490 --> 00:07:40,220
the machete language and did a lot of

00:07:36,710 --> 00:07:42,490
other smaller things so the end result

00:07:40,220 --> 00:07:45,380
of the summer of code was that skinny

00:07:42,490 --> 00:07:52,250
actually can scan for vulnerabilities

00:07:45,380 --> 00:07:55,730
and is approaching usable state so what

00:07:52,250 --> 00:07:58,760
kind of things it checks for mostly it's

00:07:55,730 --> 00:08:01,160
the the stuff that was in a list at the

00:07:58,760 --> 00:08:04,970
beginning so it's cross-site scripting

00:08:01,160 --> 00:08:07,070
SQL injection issues HTTP header

00:08:04,970 --> 00:08:10,640
manipulation where you can sneak in some

00:08:07,070 --> 00:08:13,730
bad values it checks that you don't miss

00:08:10,640 --> 00:08:16,790
configure SSL it checks for shell

00:08:13,730 --> 00:08:22,160
expansion meaning you pass some stuff

00:08:16,790 --> 00:08:24,830
from the user to shell and you could he

00:08:22,160 --> 00:08:28,280
is clever he can run commands there if

00:08:24,830 --> 00:08:34,250
you have these bugs and a lot of other

00:08:28,280 --> 00:08:40,000
smaller issues so I will just do a quick

00:08:34,250 --> 00:08:43,550
demo how this works so here i have a

00:08:40,000 --> 00:08:47,900
small controller in a small rails

00:08:43,550 --> 00:08:50,720
application so if i run scanning on this

00:08:47,900 --> 00:08:52,490
controller you know come online it finds

00:08:50,720 --> 00:08:52,830
no issues because all the bad code is

00:08:52,490 --> 00:08:56,790
comment

00:08:52,830 --> 00:08:59,820
it out but if I uncomment for example

00:08:56,790 --> 00:09:02,340
this SQL injection code so you can see

00:08:59,820 --> 00:09:05,670
that you are trying to find something by

00:09:02,340 --> 00:09:09,240
SQL and in the SQL you are embedding

00:09:05,670 --> 00:09:13,170
some value which is directly coming from

00:09:09,240 --> 00:09:19,850
the user which is obviously dangerous so

00:09:13,170 --> 00:09:22,620
if I save this and rerun the scan it

00:09:19,850 --> 00:09:25,140
reports that use of external parameters

00:09:22,620 --> 00:09:29,940
increase to the database can lead to SQL

00:09:25,140 --> 00:09:33,210
injection issue example you see that you

00:09:29,940 --> 00:09:35,940
see here the CVE number cve number is a

00:09:33,210 --> 00:09:37,590
index into a database of common problems

00:09:35,940 --> 00:09:40,340
that web applications or other

00:09:37,590 --> 00:09:43,890
applications have so for example if the

00:09:40,340 --> 00:09:46,080
user of skinny doesn't understand what

00:09:43,890 --> 00:09:48,480
the message means what or is he can look

00:09:46,080 --> 00:09:50,550
up this issue in the database and there

00:09:48,480 --> 00:09:53,000
is usually quite big article with a lot

00:09:50,550 --> 00:09:58,410
of examples and description of the issue

00:09:53,000 --> 00:10:00,630
so that's quite useful thing so let's

00:09:58,410 --> 00:10:04,130
try something else this is tricky issue

00:10:00,630 --> 00:10:06,840
but regular expressions so in Ruby

00:10:04,130 --> 00:10:09,840
regular expressions work in weird way in

00:10:06,840 --> 00:10:13,470
that the caret sign doesn't by default

00:10:09,840 --> 00:10:16,530
match beginning of a string but just

00:10:13,470 --> 00:10:18,180
beginning of a line and the same thing

00:10:16,530 --> 00:10:19,950
is with the dollar it doesn't match end

00:10:18,180 --> 00:10:24,660
of a string but just end of the line in

00:10:19,950 --> 00:10:27,570
a string so it means that Ruby regular

00:10:24,660 --> 00:10:30,960
expressions work in multi line mode by

00:10:27,570 --> 00:10:32,910
default and if you really want to match

00:10:30,960 --> 00:10:34,920
beginning of a string or end of a string

00:10:32,910 --> 00:10:37,560
you need to use back /a or backs like

00:10:34,920 --> 00:10:40,200
that and this is something that people

00:10:37,560 --> 00:10:43,380
no no and this is very important because

00:10:40,200 --> 00:10:47,840
for example here we try to validate some

00:10:43,380 --> 00:10:51,090
parameter to make sure that it's

00:10:47,840 --> 00:10:54,480
composed only of letters and numbers but

00:10:51,090 --> 00:10:56,520
this actually only validates that it

00:10:54,480 --> 00:10:59,280
contains one line composed of letters

00:10:56,520 --> 00:11:02,100
and numbers so again users can sneak in

00:10:59,280 --> 00:11:05,080
some bad values which can do some

00:11:02,100 --> 00:11:08,610
something in your application so

00:11:05,080 --> 00:11:11,470
ends when you run skinny on this input

00:11:08,610 --> 00:11:13,960
it says that possible improper like your

00:11:11,470 --> 00:11:16,750
regular expression usage and again

00:11:13,960 --> 00:11:23,800
references the CVS that deal with this

00:11:16,750 --> 00:11:28,360
issue last thing I can show is shall

00:11:23,800 --> 00:11:31,030
expansion so here we try to execute some

00:11:28,360 --> 00:11:34,210
command and nice again some input in

00:11:31,030 --> 00:11:35,680
this case it's not it doesn't matter for

00:11:34,210 --> 00:11:37,510
the scanning purposes that it's some

00:11:35,680 --> 00:11:41,950
input from user it's just that we are

00:11:37,510 --> 00:11:44,770
interpolating some string here and what

00:11:41,950 --> 00:11:48,940
can happen that we don't use an escaping

00:11:44,770 --> 00:11:50,740
here so if this string would contain

00:11:48,940 --> 00:11:53,440
something like semicolon and other

00:11:50,740 --> 00:11:56,380
command this would get executed by the

00:11:53,440 --> 00:12:03,910
shell and this way user can take over

00:11:56,380 --> 00:12:07,240
your machine quite easily so again you

00:12:03,910 --> 00:12:09,610
run it and you see that the systematic

00:12:07,240 --> 00:12:13,540
passes the execute command through your

00:12:09,610 --> 00:12:16,260
expansion and here there is a quite

00:12:13,540 --> 00:12:20,470
interesting because when you run a

00:12:16,260 --> 00:12:23,680
system call with just one string it

00:12:20,470 --> 00:12:26,800
means it gets passed to the shell but if

00:12:23,680 --> 00:12:31,060
you run it with multiple strings like

00:12:26,800 --> 00:12:34,600
this it means it is not really passed to

00:12:31,060 --> 00:12:36,700
the shell it's just it means that the

00:12:34,600 --> 00:12:38,740
first string is a is a command and the

00:12:36,700 --> 00:12:41,230
rest are its arguments so this is also

00:12:38,740 --> 00:12:44,350
valid it does the same thing but it

00:12:41,230 --> 00:12:46,570
doesn't pass through the expansion so

00:12:44,350 --> 00:12:49,930
it's kinda is able to detect that and

00:12:46,570 --> 00:12:53,020
consider this user correct so it doesn't

00:12:49,930 --> 00:12:56,140
find any issues with this code this is

00:12:53,020 --> 00:12:58,780
something that the Pearl to couldn't do

00:12:56,140 --> 00:13:01,810
before because it couldn't it was hard

00:12:58,780 --> 00:13:03,370
to express that there is a method call

00:13:01,810 --> 00:13:06,280
with such-and-such number of parameters

00:13:03,370 --> 00:13:08,470
and so on and when you have a proper

00:13:06,280 --> 00:13:10,050
Ruby parser it's quite easy to express

00:13:08,470 --> 00:13:17,720
that

00:13:10,050 --> 00:13:20,220
so that way the scanning scanning

00:13:17,720 --> 00:13:32,930
eliminates many of false positives of

00:13:20,220 --> 00:13:36,300
the peril too so now I okay so okay so

00:13:32,930 --> 00:13:39,959
I'll just skip this section about

00:13:36,300 --> 00:13:41,220
creating checks just few words that if

00:13:39,959 --> 00:13:43,230
you want to create a new check you

00:13:41,220 --> 00:13:46,649
create a class with just two methods one

00:13:43,230 --> 00:13:48,630
that searches contains the matcha tea

00:13:46,649 --> 00:13:50,550
pattern which searches for the notes

00:13:48,630 --> 00:13:53,519
that you are interested in and another

00:13:50,550 --> 00:13:57,329
one that gets past the interesting notes

00:13:53,519 --> 00:13:59,850
and that will raise the issues or do

00:13:57,329 --> 00:14:02,970
some additional examining of the nodes

00:13:59,850 --> 00:14:05,700
and so on so simple check is something

00:14:02,970 --> 00:14:09,000
like 20 lines of code so what if you

00:14:05,700 --> 00:14:11,010
want to try scanning first you need to

00:14:09,000 --> 00:14:14,459
install Rubinius as I said it will use

00:14:11,010 --> 00:14:16,470
this use this Rubinius parser and then

00:14:14,459 --> 00:14:20,910
you can install scanning regular

00:14:16,470 --> 00:14:24,060
regularly as a gem so like any any other

00:14:20,910 --> 00:14:26,730
movie based program and of course you

00:14:24,060 --> 00:14:32,880
can check out the newest code in in

00:14:26,730 --> 00:14:34,920
github in the opensuse repositories so

00:14:32,880 --> 00:14:38,490
the current state is that the checks are

00:14:34,920 --> 00:14:41,970
reported the scanner kind of works but

00:14:38,490 --> 00:14:43,950
it still needs some polishing some

00:14:41,970 --> 00:14:46,200
tweaking you notice that there are some

00:14:43,950 --> 00:14:50,940
impact levels whether the issue is

00:14:46,200 --> 00:14:53,610
important and how much and the messages

00:14:50,940 --> 00:14:55,800
need some improvement from usability

00:14:53,610 --> 00:14:58,709
point of view so they tell more to

00:14:55,800 --> 00:15:00,690
programmer and so on so we want to do

00:14:58,709 --> 00:15:03,270
that in the following weeks and months

00:15:00,690 --> 00:15:05,610
in souza and then we want to deploy the

00:15:03,270 --> 00:15:08,459
tool internally for our own projects

00:15:05,610 --> 00:15:12,839
which I think will force us to do even

00:15:08,459 --> 00:15:14,910
more improvement so the status it's

00:15:12,839 --> 00:15:17,670
usable but there is still a lot of work

00:15:14,910 --> 00:15:20,399
needed on the tool so if anyone is

00:15:17,670 --> 00:15:22,000
interested in Ruby and insecurity I

00:15:20,399 --> 00:15:27,310
welcome any

00:15:22,000 --> 00:15:34,500
with this so that's all I have and it's

00:15:27,310 --> 00:15:34,500
time for questions yes

00:15:43,680 --> 00:15:51,040
see what false positives from other

00:15:46,840 --> 00:15:55,770
tools are identified we didn't run any

00:15:51,040 --> 00:15:55,770
such scans so I don't have such results

00:15:57,630 --> 00:16:05,430
yes so the question was that whether i

00:16:01,420 --> 00:16:08,200
compared scanning with other tools and

00:16:05,430 --> 00:16:10,120
whether i correlated the results and

00:16:08,200 --> 00:16:18,580
false positives and so on so mine says

00:16:10,120 --> 00:16:23,290
no i didn't do that and for looking up

00:16:18,580 --> 00:16:25,300
the cv the cwe values how did you to

00:16:23,290 --> 00:16:30,330
drill down in a database or something

00:16:25,300 --> 00:16:33,490
like that or how does that work this is

00:16:30,330 --> 00:16:37,000
accessible on the web so all the whole

00:16:33,490 --> 00:16:40,510
database the web pages so i think we

00:16:37,000 --> 00:16:41,620
will include some the TV numbers are

00:16:40,510 --> 00:16:44,050
hard-coded in the in the checks

00:16:41,620 --> 00:16:48,760
themselves so we check knows what cve

00:16:44,050 --> 00:16:53,260
number it's linked to it and i suppose

00:16:48,760 --> 00:16:55,210
we will introduce some reports modes

00:16:53,260 --> 00:16:56,800
like HTML where you will get direct

00:16:55,210 --> 00:17:03,250
links to other web pages describing the

00:16:56,800 --> 00:17:07,720
cv issues and so on this okay we have to

00:17:03,250 --> 00:17:14,280
finish the stream now thank you that you

00:17:07,720 --> 00:17:17,280
have given best presentation and we were

00:17:14,280 --> 00:17:17,280

YouTube URL: https://www.youtube.com/watch?v=2sPWu5Kwp94


