Title: osc12: dev_printk revisited
Publication date: 2012-10-24
Playlist: openSUSE Conference 2012
Description: 
	osc12: dev_printk revisited from openSUSE. Like this? Watch the latest episode of openSUSE on Blip! http://blip.tv/opensuse/watch 

dev_printk revisited: structured kernel message logging and the SCSI mess
Speaker: Hannes Reinecke
Room: Riker

See all episodes of openSUSE http://blip.tv/opensuse#EpisodeArchive
Visit openSUSE's series page http://blip.tv/opensuse
Captions: 
	00:00:00,000 --> 00:00:14,130
ok right ok the next talk this is one of

00:00:10,889 --> 00:00:19,050
the things I've been wanting to work on

00:00:14,130 --> 00:00:24,119
for quite a long time which is cleaning

00:00:19,050 --> 00:00:26,119
up the scuzzy logging and I've been

00:00:24,119 --> 00:00:29,070
working on this one on and off for all

00:00:26,119 --> 00:00:30,720
several years now always trying to

00:00:29,070 --> 00:00:32,520
figure out all right what could we do

00:00:30,720 --> 00:00:34,559
and will doesn't look good and then

00:00:32,520 --> 00:00:36,630
discarding this attempt and this is

00:00:34,559 --> 00:00:38,370
finally the last or the great most

00:00:36,630 --> 00:00:43,649
recent one which actually looks quite

00:00:38,370 --> 00:00:46,440
promising so the problem here tryn k

00:00:43,649 --> 00:00:48,300
everyone knows cranky yeah sure I mean

00:00:46,440 --> 00:00:52,379
trick a simple you just do drink a and

00:00:48,300 --> 00:00:55,289
then it prints so it's actually a dead

00:00:52,379 --> 00:00:58,430
simple interface you just have the login

00:00:55,289 --> 00:01:02,789
level which actually is just a string

00:00:58,430 --> 00:01:04,559
which when then will we just concatenate

00:01:02,789 --> 00:01:09,390
it with the other with the information

00:01:04,559 --> 00:01:11,790
next to it and print it out so the long

00:01:09,390 --> 00:01:13,290
level itself is a string in the message

00:01:11,790 --> 00:01:16,619
and will be interviewed by this is 40

00:01:13,290 --> 00:01:21,479
min user land that's the default level

00:01:16,619 --> 00:01:24,299
ok the important thing is that messages

00:01:21,479 --> 00:01:27,930
are normally flushed out after if you

00:01:24,299 --> 00:01:30,180
insert a new line which can be used for

00:01:27,930 --> 00:01:32,340
a concatenation so if you don't insert a

00:01:30,180 --> 00:01:33,960
new line measure the message won't be

00:01:32,340 --> 00:01:40,680
flushed so you can actually concat

00:01:33,960 --> 00:01:43,350
concatenate things then as most of you

00:01:40,680 --> 00:01:48,390
know there's def print k which is just a

00:01:43,350 --> 00:01:52,829
convenient function which allows you to

00:01:48,390 --> 00:01:55,380
pass in the log level as a separate

00:01:52,829 --> 00:01:58,020
argument and you can also pass in the

00:01:55,380 --> 00:02:00,570
device which is a struct device in this

00:01:58,020 --> 00:02:03,060
case which then will be nicely formatted

00:02:00,570 --> 00:02:04,439
and you have it automatically in your

00:02:03,060 --> 00:02:06,180
sister lock message and you don't have

00:02:04,439 --> 00:02:08,610
to worry about or where again do I get

00:02:06,180 --> 00:02:11,280
the name of this device as you can see I

00:02:08,610 --> 00:02:13,130
mean this is a bit awkward to print and

00:02:11,280 --> 00:02:15,140
of course you've got tons and tons

00:02:13,130 --> 00:02:17,420
derivative of this one like a stiff

00:02:15,140 --> 00:02:19,130
drink a USB port on every one every

00:02:17,420 --> 00:02:29,060
subsidized he has done derivative for

00:02:19,130 --> 00:02:33,710
that one okay but with deaf print k you

00:02:29,060 --> 00:02:39,860
can we cannot really do a concatenation

00:02:33,710 --> 00:02:44,780
and mrs. look so both do the same

00:02:39,860 --> 00:02:51,170
message so why bother well there's one

00:02:44,780 --> 00:02:54,860
important thing with three dot seven KY

00:02:51,170 --> 00:02:59,840
Sivas managed to update the print k

00:02:54,860 --> 00:03:04,610
subsystem previously it was just a ring

00:02:59,840 --> 00:03:07,550
buffer containing string messages and he

00:03:04,610 --> 00:03:10,460
replaced the ring buffer with a ring

00:03:07,550 --> 00:03:12,590
buffer buffer of structured messages so

00:03:10,460 --> 00:03:15,860
it's not a plain stringbuffer anymore

00:03:12,590 --> 00:03:19,850
but rather it has a contact has to fix

00:03:15,860 --> 00:03:22,010
format with a binary header on top

00:03:19,850 --> 00:03:26,390
telling you what message war what it

00:03:22,010 --> 00:03:29,920
belongs to bought or whatnot so the main

00:03:26,390 --> 00:03:32,750
trick here was that he removed the old

00:03:29,920 --> 00:03:34,880
time stamp which was the string insert

00:03:32,750 --> 00:03:38,690
in front of the message and who plays

00:03:34,880 --> 00:03:40,370
with his binary header reformatting and

00:03:38,690 --> 00:03:43,670
just inserting three times them as a

00:03:40,370 --> 00:03:45,410
baniar valley so all the space is saved

00:03:43,670 --> 00:03:47,060
by doing just using this binary value

00:03:45,410 --> 00:03:54,110
you could you reuse father for something

00:03:47,060 --> 00:03:56,540
else and in addition as you now have a

00:03:54,110 --> 00:03:58,490
binary header which can connect on they

00:03:56,540 --> 00:04:00,200
can contain some structure things you

00:03:58,490 --> 00:04:05,600
can actually insert the dictionary here

00:04:00,200 --> 00:04:08,270
so you can insert a structure message in

00:04:05,600 --> 00:04:11,630
there which allows you to parse addition

00:04:08,270 --> 00:04:12,920
information so not only they're not only

00:04:11,630 --> 00:04:15,549
having the string but also some

00:04:12,920 --> 00:04:19,400
additional information to that message

00:04:15,549 --> 00:04:21,049
the dictionary is similarly organized

00:04:19,400 --> 00:04:24,530
like the you event structure so you have

00:04:21,049 --> 00:04:25,639
a length of which and then so you have a

00:04:24,530 --> 00:04:28,060
length of dictionary

00:04:25,639 --> 00:04:32,479
than individual entries each several x

00:04:28,060 --> 00:04:35,060
SQ 0 and obviously if you want to

00:04:32,479 --> 00:04:36,919
transfer binary data with that you do

00:04:35,060 --> 00:04:40,430
need to escape it Oh transpose it all

00:04:36,919 --> 00:04:46,270
together so that's what it looks like

00:04:40,430 --> 00:04:49,580
now so first is the child in nanoseconds

00:04:46,270 --> 00:04:51,349
then it's the length of the record the

00:04:49,580 --> 00:04:56,270
length of the text and the length of the

00:04:51,349 --> 00:04:58,879
dictionary this is the long level the

00:04:56,270 --> 00:05:03,080
facility and the level and this is the

00:04:58,879 --> 00:05:05,870
actual string and here this one is the

00:05:03,080 --> 00:05:08,689
dictionary this is here you see that's

00:05:05,870 --> 00:05:13,340
the 0 so that's device b2b for block

00:05:08,689 --> 00:05:19,129
it's so it's scuzzy asda to in this case

00:05:13,340 --> 00:05:25,129
and driver whatever but it says anyway

00:05:19,129 --> 00:05:28,189
so that's what it looks like and you can

00:05:25,129 --> 00:05:32,509
actually see this one via the new device

00:05:28,189 --> 00:05:34,430
or def que mÃ¡s que mask which gives you

00:05:32,509 --> 00:05:37,759
an ASCII output of the printer before

00:05:34,430 --> 00:05:39,439
including the dictionary so it can

00:05:37,759 --> 00:05:41,089
actually see about what the message was

00:05:39,439 --> 00:05:45,229
and what the dictionary is will to it

00:05:41,089 --> 00:05:48,680
which goes with that message which is

00:05:45,229 --> 00:05:51,080
quite handy because you can then have a

00:05:48,680 --> 00:05:52,969
user space longing demon which not only

00:05:51,080 --> 00:05:56,569
allows you to log it but also to allows

00:05:52,969 --> 00:05:58,580
you to zoom into the matter two messages

00:05:56,569 --> 00:06:00,409
for individual devices because you know

00:05:58,580 --> 00:06:03,740
now exactly which devices they this

00:06:00,409 --> 00:06:06,680
message belongs to so you can tag the

00:06:03,740 --> 00:06:09,279
message with the device and just filter

00:06:06,680 --> 00:06:14,659
out those messages for these devices

00:06:09,279 --> 00:06:17,629
which is quite neat so I thought hey

00:06:14,659 --> 00:06:19,569
that's a good concert really bummer

00:06:17,629 --> 00:06:25,180
right I said hey that's a cool concept

00:06:19,569 --> 00:06:28,210
let's see what scuzzy does yes so um

00:06:25,180 --> 00:06:31,159
skazhi has its own logging system via

00:06:28,210 --> 00:06:32,990
proxy steps kazi logging level as you

00:06:31,159 --> 00:06:37,009
can see that's a rather old interface

00:06:32,990 --> 00:06:38,270
because that's the this is the only

00:06:37,009 --> 00:06:41,780
entry in

00:06:38,270 --> 00:06:43,760
into sis def Scotty is the only entry

00:06:41,780 --> 00:06:46,370
into death and logging level is the only

00:06:43,760 --> 00:06:48,920
entry in discussing so it's not once

00:06:46,370 --> 00:06:54,470
obsolete but twice three times awfully

00:06:48,920 --> 00:06:56,180
in this case a me because I that's neat

00:06:54,470 --> 00:06:58,040
indeed yeah but though you still have to

00:06:56,180 --> 00:07:01,640
remember the metric entry point which

00:06:58,040 --> 00:07:03,530
was assessed yes indeed so right so then

00:07:01,640 --> 00:07:07,280
if you enable this it prints out a

00:07:03,530 --> 00:07:09,500
different message to the what you say

00:07:07,280 --> 00:07:11,720
what you did what the command was what

00:07:09,500 --> 00:07:14,000
the command poof was what the result is

00:07:11,720 --> 00:07:18,830
blah blah blah yadda yadda okay that

00:07:14,000 --> 00:07:22,340
looks nice however if you have several

00:07:18,830 --> 00:07:25,520
devices and more of them faster it looks

00:07:22,340 --> 00:07:29,060
like this so you have the same

00:07:25,520 --> 00:07:30,890
information but hmm here should have

00:07:29,060 --> 00:07:32,360
been in concocted a concatenation but

00:07:30,890 --> 00:07:34,640
then an interrupt came in and

00:07:32,360 --> 00:07:38,020
interrupted this print of that one so

00:07:34,640 --> 00:07:42,260
this one actually belongs on that line

00:07:38,020 --> 00:07:44,330
obviously same goes here so here the

00:07:42,260 --> 00:07:46,100
interrupt came in but then he send it

00:07:44,330 --> 00:07:50,150
another one so this year actually

00:07:46,100 --> 00:07:53,150
belongs to here and each of these bites

00:07:50,150 --> 00:07:55,010
obviously individual in case so under

00:07:53,150 --> 00:07:56,810
really high load even that when it split

00:07:55,010 --> 00:07:59,270
up and you got random numbers blether

00:07:56,810 --> 00:08:03,920
across the entire sea slugs ring makes

00:07:59,270 --> 00:08:05,810
wonders for debugging and this was the

00:08:03,920 --> 00:08:09,700
nice output because on three dot seven

00:08:05,810 --> 00:08:12,160
the rules for concatenation got somewhat

00:08:09,700 --> 00:08:15,980
tightened so now it looks like this

00:08:12,160 --> 00:08:19,220
every time so you have to send and then

00:08:15,980 --> 00:08:21,130
there's the the pointer CD be followed

00:08:19,220 --> 00:08:23,810
by the string and so on and so forth if

00:08:21,130 --> 00:08:25,790
you have under high load this impossible

00:08:23,810 --> 00:08:29,360
to debug you have no idea what's going

00:08:25,790 --> 00:08:31,250
on and then obviously there are some

00:08:29,360 --> 00:08:33,320
drivers which do not attach attach any

00:08:31,250 --> 00:08:35,210
information at all just print all right

00:08:33,320 --> 00:08:40,690
I did this I did that I detach all right

00:08:35,210 --> 00:08:40,690
nice but which device again hmm

00:08:42,700 --> 00:08:50,510
so I said all right this cannot be like

00:08:49,100 --> 00:08:53,089
this because at the end of the day if

00:08:50,510 --> 00:08:58,760
that ever becomes a standard con I have

00:08:53,089 --> 00:09:00,890
to debug it no so we could use their

00:08:58,760 --> 00:09:03,200
friend Kay here so just use their

00:09:00,890 --> 00:09:06,170
printer and actually prefix it with a

00:09:03,200 --> 00:09:12,560
device and suddenly you see it's that

00:09:06,170 --> 00:09:14,839
yeah you should have told me so and the

00:09:12,560 --> 00:09:16,040
other thing really painful thing you

00:09:14,839 --> 00:09:17,720
have to get rid of all the implicit

00:09:16,040 --> 00:09:21,350
concatenation so you basically have to

00:09:17,720 --> 00:09:23,930
allocate a separate buffer write the

00:09:21,350 --> 00:09:27,560
entire message in the Android out in one

00:09:23,930 --> 00:09:31,670
go with one print k because then that's

00:09:27,560 --> 00:09:36,320
the only way how it could avoid any any

00:09:31,670 --> 00:09:37,850
device if any message interruption under

00:09:36,320 --> 00:09:42,380
high loads we have to print out one girl

00:09:37,850 --> 00:09:45,710
and there's even some nice trim k

00:09:42,380 --> 00:09:48,320
formats like % 6 ph does anyone know

00:09:45,710 --> 00:09:50,060
what that means anyone seen ever seen

00:09:48,320 --> 00:09:58,820
this everyone anyone ever saw ever used

00:09:50,060 --> 00:10:02,029
it good right now print k actually have

00:09:58,820 --> 00:10:04,160
some advanced formats so you can print I

00:10:02,029 --> 00:10:07,550
can't remember all nifty things like

00:10:04,160 --> 00:10:09,790
Colonel pointers the functions the

00:10:07,550 --> 00:10:12,320
counter pointers references to the

00:10:09,790 --> 00:10:14,450
resources being print as we saw sources

00:10:12,320 --> 00:10:19,040
and so on and so forth so if anyone ever

00:10:14,450 --> 00:10:21,800
does some print k things look in lipid

00:10:19,040 --> 00:10:24,050
syempre death there's all the formats

00:10:21,800 --> 00:10:28,630
that are all the forms listed what you

00:10:24,050 --> 00:10:32,209
can do with really helpful so use a

00:10:28,630 --> 00:10:37,600
print k message here and then it

00:10:32,209 --> 00:10:39,770
suddenly becomes nice and readable and

00:10:37,600 --> 00:10:42,170
the other thing is you could actually

00:10:39,770 --> 00:10:44,680
yeah there's a missing example okay

00:10:42,170 --> 00:10:47,209
right and so you could actually do a

00:10:44,680 --> 00:10:50,170
format the sense code Scott each stars

00:10:47,209 --> 00:10:52,670
of command has and additional

00:10:50,170 --> 00:10:54,860
information if this or if the one went

00:10:52,670 --> 00:10:58,450
wrong which is called a sense code and

00:10:54,860 --> 00:11:01,210
this you can just add as a dictionary to

00:10:58,450 --> 00:11:04,340
provide structure access to this which

00:11:01,210 --> 00:11:06,350
has to now so once it's nicely formatted

00:11:04,340 --> 00:11:10,610
and on the other time it can also be or

00:11:06,350 --> 00:11:14,150
a valid from user space so with that hey

00:11:10,610 --> 00:11:17,630
we're there I've posted this better

00:11:14,150 --> 00:11:20,540
dispatch that two weeks ago and so far

00:11:17,630 --> 00:11:22,520
response have to be nice well the bourne

00:11:20,540 --> 00:11:24,290
response I got well okay and the other

00:11:22,520 --> 00:11:29,030
route so and I'm waiting what happens

00:11:24,290 --> 00:11:31,400
next probably nothing so next things

00:11:29,030 --> 00:11:33,200
what could we do with this the one thing

00:11:31,400 --> 00:11:35,510
is you could actually have a demon now

00:11:33,200 --> 00:11:37,880
because we could have a demon listening

00:11:35,510 --> 00:11:40,190
on the chemist thing and grabs out all

00:11:37,880 --> 00:11:44,900
the sense messages and does trigger some

00:11:40,190 --> 00:11:46,670
action or fat and we could have a look

00:11:44,900 --> 00:11:49,550
at this cataloging system because

00:11:46,670 --> 00:11:51,530
currently discussing logging is global

00:11:49,550 --> 00:11:53,210
so we either enable it or you don't and

00:11:51,530 --> 00:11:56,960
if you enabled you enable for all

00:11:53,210 --> 00:11:59,270
devices so which is really really

00:11:56,960 --> 00:12:01,280
annoying if you have asked as the only

00:11:59,270 --> 00:12:05,570
machine because if your neighborhood you

00:12:01,280 --> 00:12:08,000
will log the logging because then it'll

00:12:05,570 --> 00:12:09,530
look or commands it needs to print out

00:12:08,000 --> 00:12:12,890
the lock which just told them to print

00:12:09,530 --> 00:12:15,590
so it really really getting really

00:12:12,890 --> 00:12:18,440
really long fast just so because it

00:12:15,590 --> 00:12:20,270
looks the logging so normally what I end

00:12:18,440 --> 00:12:23,030
up doing is just switch off syslog and

00:12:20,270 --> 00:12:24,740
then do another measurement which means

00:12:23,030 --> 00:12:28,070
that I don't really have is just like so

00:12:24,740 --> 00:12:32,390
i can't really store what's going on

00:12:28,070 --> 00:12:35,270
which is a bit annoying so what i want

00:12:32,390 --> 00:12:38,480
to do here is to move that into the

00:12:35,270 --> 00:12:40,520
device so that it becomes the property

00:12:38,480 --> 00:12:44,050
of the device so that you can enable

00:12:40,520 --> 00:12:50,120
logging per device and not just globally

00:12:44,050 --> 00:12:52,900
so with that undone and up to questions

00:12:50,120 --> 00:12:52,900
yes

00:12:57,140 --> 00:13:01,920
so now that trace events are essentially

00:12:59,520 --> 00:13:04,590
free on why couldn't use those instead

00:13:01,920 --> 00:13:05,700
and then you get rid of the performance

00:13:04,590 --> 00:13:07,590
impact that you have when you're running

00:13:05,700 --> 00:13:08,670
it especially when you have you know a

00:13:07,590 --> 00:13:10,950
console it's going to be dumping

00:13:08,670 --> 00:13:13,260
everything yeah well this is just

00:13:10,950 --> 00:13:16,230
because that's the existing

00:13:13,260 --> 00:13:19,230
infrastructure because it well this is

00:13:16,230 --> 00:13:20,760
what we tell the customer to enable if

00:13:19,230 --> 00:13:23,580
we want to trace if you want to debug

00:13:20,760 --> 00:13:25,920
something and as you've seen with 307

00:13:23,580 --> 00:13:27,720
it's completely unreadable yeah so it

00:13:25,920 --> 00:13:29,070
needs to be converted anyway yeah I'm

00:13:27,720 --> 00:13:31,070
just thinking about it from the

00:13:29,070 --> 00:13:33,690
perspective of you want to have a

00:13:31,070 --> 00:13:35,400
complete you want to be able to dump all

00:13:33,690 --> 00:13:38,760
this information from a scuzzy command

00:13:35,400 --> 00:13:40,830
and if you do it with trace events then

00:13:38,760 --> 00:13:43,470
it's it's all just saving off field

00:13:40,830 --> 00:13:44,370
values at the point where you're dumping

00:13:43,470 --> 00:13:45,750
the event and then when you're actually

00:13:44,370 --> 00:13:47,430
reading it then it's going to do all the

00:13:45,750 --> 00:13:50,220
printing so you can sort of do that out

00:13:47,430 --> 00:13:52,080
of band and then you end up not quite

00:13:50,220 --> 00:13:55,860
such a load ennis probably but again I

00:13:52,080 --> 00:13:58,170
mean the infrastructure is there and if

00:13:55,860 --> 00:14:02,400
we will go ahead and convert this we

00:13:58,170 --> 00:14:04,020
have to be really careful to discuss

00:14:02,400 --> 00:14:05,610
each step with the community because

00:14:04,020 --> 00:14:08,070
there are some who have a really strong

00:14:05,610 --> 00:14:10,140
idea how it should look like so yes

00:14:08,070 --> 00:14:12,060
trace event would be a good idea but try

00:14:10,140 --> 00:14:15,630
to convince them J's botany from that

00:14:12,060 --> 00:14:29,490
I'm not sure we get very far with it so

00:14:15,630 --> 00:14:31,440
I believe that another question yep I

00:14:29,490 --> 00:14:33,810
thought it's possible for the key

00:14:31,440 --> 00:14:36,990
message buffer to wrap around is it

00:14:33,810 --> 00:14:38,910
still the case yeah so if you user

00:14:36,990 --> 00:14:41,960
spaces is too slow would it be a good

00:14:38,910 --> 00:14:45,330
idea like that sense d- you were

00:14:41,960 --> 00:14:47,700
speaking about talking about it would be

00:14:45,330 --> 00:14:54,080
possible for it to those events in kinds

00:14:47,700 --> 00:14:56,880
of well i think this is the most little

00:14:54,080 --> 00:15:01,310
question like the person now me the

00:14:56,880 --> 00:15:03,440
problem is is slightly different here so

00:15:01,310 --> 00:15:06,250
you will have to

00:15:03,440 --> 00:15:12,350
an efficient mechanism for logging

00:15:06,250 --> 00:15:15,830
obviously so you simply cannot allocate

00:15:12,350 --> 00:15:18,590
memory if you do log in because if you

00:15:15,830 --> 00:15:21,530
do that you might not able to have

00:15:18,590 --> 00:15:24,260
memory to allocate it from so you might

00:15:21,530 --> 00:15:26,270
not be able to lock so you need to

00:15:24,260 --> 00:15:29,720
pre-allocate log memory anyway

00:15:26,270 --> 00:15:34,970
regardless what you're doing so you

00:15:29,720 --> 00:15:37,310
inevitably have a fixed space again

00:15:34,970 --> 00:15:39,020
independent of which mechanism at all

00:15:37,310 --> 00:15:40,670
you're thinking of you have to allocate

00:15:39,020 --> 00:15:42,770
a fixed page which will always rub

00:15:40,670 --> 00:15:44,900
around giving enough messages so the

00:15:42,770 --> 00:15:47,150
only thing that you can do is reduce the

00:15:44,900 --> 00:15:50,240
amount of messages you have or picked up

00:15:47,150 --> 00:15:52,670
fast enough or live with whether that

00:15:50,240 --> 00:16:07,220
some message will be lost yes that is

00:15:52,670 --> 00:16:08,930
true but currently yeah but still yeah

00:16:07,220 --> 00:16:11,120
exactly you can I mean that's what you

00:16:08,930 --> 00:16:13,880
would normally do you would just say oh

00:16:11,120 --> 00:16:15,440
just measure alright how many message do

00:16:13,880 --> 00:16:17,690
I get worse case and make buffalo

00:16:15,440 --> 00:16:20,060
janazah yeah sure office that's what you

00:16:17,690 --> 00:16:21,710
do but still it is not a hundred percent

00:16:20,060 --> 00:16:23,750
guarantee that you will that buffer

00:16:21,710 --> 00:16:25,430
won't be wrapped round so you always

00:16:23,750 --> 00:16:27,080
have to live with the fact yeah I might

00:16:25,430 --> 00:16:28,820
be losing some messages but yeah hell

00:16:27,080 --> 00:16:31,010
that's life I'm not doing anything with

00:16:28,820 --> 00:16:34,130
mess a message curly so kind of get

00:16:31,010 --> 00:16:39,020
better can I so but yes you're right yes

00:16:34,130 --> 00:16:41,000
we will be losing messages and we can

00:16:39,020 --> 00:16:44,990
only hope these weren't any important

00:16:41,000 --> 00:16:46,550
messages or I don't guess that maybe

00:16:44,990 --> 00:16:55,220
there might be better ideas but Corellia

00:16:46,550 --> 00:16:59,210
don't have it anymore you could attempt

00:16:55,220 --> 00:17:02,180
to lock to a separate device or network

00:16:59,210 --> 00:17:03,890
zero console because then you have a

00:17:02,180 --> 00:17:08,660
separate machine that can always

00:17:03,890 --> 00:17:11,689
consumed the messages yes you can

00:17:08,660 --> 00:17:15,319
attempt to but then if you log by a

00:17:11,689 --> 00:17:16,559
network you need memory if you look

00:17:15,319 --> 00:17:21,689
where's your console

00:17:16,559 --> 00:17:29,009
unit interrupt so the only real choice

00:17:21,689 --> 00:17:30,899
you have is to the real the the really

00:17:29,009 --> 00:17:33,929
really sick the most secure method you

00:17:30,899 --> 00:17:35,999
have is dumb to vga because with that

00:17:33,929 --> 00:17:38,970
you always have vga memory you don't

00:17:35,999 --> 00:17:41,519
need interrupts some machines don't a

00:17:38,970 --> 00:17:43,320
vga which is a bit bad yeah right but

00:17:41,519 --> 00:17:45,749
still I mean that's literally the only

00:17:43,320 --> 00:17:49,080
reliable choice you have if you want to

00:17:45,749 --> 00:17:52,320
do if you care about this otherwise you

00:17:49,080 --> 00:17:54,029
always end up with some difficulties

00:17:52,320 --> 00:17:56,580
like networking for network you do need

00:17:54,029 --> 00:17:59,490
memory to log things because you do need

00:17:56,580 --> 00:18:05,220
marriages and packages and in most cases

00:17:59,490 --> 00:18:07,710
and 40 you do need interrupts we can

00:18:05,220 --> 00:18:10,590
talk afterwards with many interesting

00:18:07,710 --> 00:18:12,269
things okay or calls we had with this

00:18:10,590 --> 00:18:18,919
serial console locking up on the high

00:18:12,269 --> 00:18:18,919
load hmm so yeah now it's tricky

00:18:29,010 --> 00:18:37,640
so any more questions and thank you very

00:18:34,110 --> 00:18:37,640

YouTube URL: https://www.youtube.com/watch?v=_2ns7R7Ll6U


