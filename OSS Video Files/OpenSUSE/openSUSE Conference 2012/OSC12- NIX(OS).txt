Title: OSC12- NIX(OS)
Publication date: 2012-10-24
Playlist: openSUSE Conference 2012
Description: 
	OSC12- NIX(OS) from openSUSE. Like this? Watch the latest episode of openSUSE on Blip! http://blip.tv/opensuse/watch 

Speaker: Vladim?r ?un?t
Room: Spock

See all episodes of openSUSE http://blip.tv/opensuse#EpisodeArchive
Visit openSUSE's series page http://blip.tv/opensuse
Captions: 
	00:00:00,000 --> 00:00:06,600
I come to our next presentation but vets

00:00:04,319 --> 00:00:09,000
has been named Nick's OS poorly

00:00:06,600 --> 00:00:14,759
functional package management our

00:00:09,000 --> 00:00:18,029
present hater is Vladimir York unit we

00:00:14,759 --> 00:00:26,039
can sad okay thank you for introducing

00:00:18,029 --> 00:00:30,900
me so I'm going to talk about package

00:00:26,039 --> 00:00:34,350
management and distribution called built

00:00:30,900 --> 00:00:38,760
on top of it and well I'm sure you have

00:00:34,350 --> 00:00:44,280
seen thousands of distributions limbs is

00:00:38,760 --> 00:00:48,059
famous for this I will try to convince

00:00:44,280 --> 00:00:52,739
you that this view of package management

00:00:48,059 --> 00:01:00,809
is quite different and it gives us

00:00:52,739 --> 00:01:03,660
something more than we usually get an

00:01:00,809 --> 00:01:07,580
example motivation from my life or

00:01:03,660 --> 00:01:11,580
actually my sister's so she shows

00:01:07,580 --> 00:01:16,880
upgrading ubuntu and there was kind of

00:01:11,580 --> 00:01:21,000
hardware problem it was interrupted and

00:01:16,880 --> 00:01:24,390
the result was that the system booted

00:01:21,000 --> 00:01:27,479
but the xserver wouldn't start and that

00:01:24,390 --> 00:01:30,570
was a bad problem because she doesn't

00:01:27,479 --> 00:01:33,420
know what command line is and well where

00:01:30,570 --> 00:01:38,790
she was completely unable to face so it

00:01:33,420 --> 00:01:43,740
or do anything about it and that's I'm

00:01:38,790 --> 00:01:48,360
not sure how other distributions solve

00:01:43,740 --> 00:01:55,729
this but certainly for 12 this doesn't

00:01:48,360 --> 00:02:00,060
work we're well it can happen and okay

00:01:55,729 --> 00:02:04,950
so that's one thing we would like to

00:02:00,060 --> 00:02:07,200
have atomic switching of versions it's

00:02:04,950 --> 00:02:12,000
certainly useful but there are many

00:02:07,200 --> 00:02:16,620
other useful properties that

00:02:12,000 --> 00:02:20,910
also later so how can we achieve atomic

00:02:16,620 --> 00:02:25,050
switching well certainly if you think

00:02:20,910 --> 00:02:27,600
about it at the switching moment we need

00:02:25,050 --> 00:02:33,360
to have both the versions in a valid

00:02:27,600 --> 00:02:37,680
state so did we need to have them at

00:02:33,360 --> 00:02:42,570
once but if some configuration changes

00:02:37,680 --> 00:02:49,550
like libraries on something they can't

00:02:42,570 --> 00:02:59,300
be on the same path so if we well we

00:02:49,550 --> 00:03:01,950
want to use a complete a common a common

00:02:59,300 --> 00:03:06,270
file system you know common and

00:03:01,950 --> 00:03:08,250
namespace sort of files and not some

00:03:06,270 --> 00:03:11,250
virtual thing that is different for

00:03:08,250 --> 00:03:14,610
different processes then we certainly

00:03:11,250 --> 00:03:18,000
can't have packages on standard paths

00:03:14,610 --> 00:03:20,510
especially libraries we can't have that

00:03:18,000 --> 00:03:25,260
and that is quite a diversion from

00:03:20,510 --> 00:03:28,530
traditional distributions because well

00:03:25,260 --> 00:03:32,310
it's not very common to have different

00:03:28,530 --> 00:03:37,709
than the standard paths but we can't

00:03:32,310 --> 00:03:43,260
avoid it if we want to really ensure

00:03:37,709 --> 00:03:45,000
some properties so what makes does and

00:03:43,260 --> 00:03:47,820
that's not so special many other or

00:03:45,000 --> 00:03:50,280
distributions that is that we have

00:03:47,820 --> 00:03:54,620
separate directory per every package

00:03:50,280 --> 00:04:02,010
build so every instance of a package is

00:03:54,620 --> 00:04:06,630
on a different place and and it never

00:04:02,010 --> 00:04:09,030
changes so the the well the thing is

00:04:06,630 --> 00:04:11,430
that when we change some dependencies we

00:04:09,030 --> 00:04:15,350
could potentially break the package we

00:04:11,430 --> 00:04:20,690
don't really know whoever depends on us

00:04:15,350 --> 00:04:22,660
so we need to use absolute paths for it

00:04:20,690 --> 00:04:27,190
so the

00:04:22,660 --> 00:04:31,540
pictures don't get changed and we'll do

00:04:27,190 --> 00:04:39,070
another totally well anyway okay so

00:04:31,540 --> 00:04:44,800
that's one thing and another is well

00:04:39,070 --> 00:04:47,800
when we have any two versions at the

00:04:44,800 --> 00:04:51,160
time same time when we switch on an

00:04:47,800 --> 00:04:53,500
upgrade well it's quite naturally it

00:04:51,160 --> 00:04:57,520
doesn't cost us more to be able to have

00:04:53,500 --> 00:05:01,660
any number of different configurations

00:04:57,520 --> 00:05:05,680
at once on the system and being able to

00:05:01,660 --> 00:05:08,500
switch among them and when there are so

00:05:05,680 --> 00:05:15,370
many things there it's not very sure

00:05:08,500 --> 00:05:19,960
clear how to create names the past okay

00:05:15,370 --> 00:05:22,780
so here we use anything where the hash

00:05:19,960 --> 00:05:27,810
encodes all the configuration of the

00:05:22,780 --> 00:05:36,220
build concrete built of some package oh

00:05:27,810 --> 00:05:39,490
this for example here there is ok some

00:05:36,220 --> 00:05:43,060
common prefix to the store for packages

00:05:39,490 --> 00:05:45,640
the hash which is quite long and then

00:05:43,060 --> 00:05:52,000
the standards things like name with

00:05:45,640 --> 00:05:55,450
version and three of the package the

00:05:52,000 --> 00:06:02,380
dashing has the advantage that whenever

00:05:55,450 --> 00:06:05,380
we have the exactly same configuration

00:06:02,380 --> 00:06:09,480
it gives us the same hash and so the

00:06:05,380 --> 00:06:15,970
same path and we can reuse the build

00:06:09,480 --> 00:06:21,340
okay so that was a basic idea how it is

00:06:15,970 --> 00:06:25,840
done but now I should tell something

00:06:21,340 --> 00:06:34,200
more about what is next package or how

00:06:25,840 --> 00:06:38,440
we model it how we view it we well

00:06:34,200 --> 00:06:41,110
for these packages and configurations we

00:06:38,440 --> 00:06:45,480
use a simple purely functional language

00:06:41,110 --> 00:06:48,940
I should say what do I mean by the

00:06:45,480 --> 00:06:58,780
purely functional in case you don't know

00:06:48,940 --> 00:07:01,570
it it's well it's well it's connected to

00:06:58,780 --> 00:07:07,170
the things I've already bit mentioned

00:07:01,570 --> 00:07:10,200
that we have a referential transparency

00:07:07,170 --> 00:07:13,720
that is whenever we allocate some memory

00:07:10,200 --> 00:07:22,410
we define its contents and we never

00:07:13,720 --> 00:07:25,570
change it anymore and so so because some

00:07:22,410 --> 00:07:29,530
others may have pointers to it and they

00:07:25,570 --> 00:07:35,860
don't expect to change it it could break

00:07:29,530 --> 00:07:38,440
them so the only way oh this gets

00:07:35,860 --> 00:07:40,660
deleted is when everyone will lose these

00:07:38,440 --> 00:07:49,570
connections to it and it can be garbage

00:07:40,660 --> 00:07:53,320
collected stir and that's a essential

00:07:49,570 --> 00:07:58,410
property and so packaged in this

00:07:53,320 --> 00:08:01,830
language is just a simple function a

00:07:58,410 --> 00:08:04,720
function and they take some parameters

00:08:01,830 --> 00:08:08,230
horse and these are the build time

00:08:04,720 --> 00:08:12,790
dependencies options and other such

00:08:08,230 --> 00:08:18,070
things and the most important thing here

00:08:12,790 --> 00:08:21,430
is the purity so the this is the fact

00:08:18,070 --> 00:08:24,370
that the only way we can change the

00:08:21,430 --> 00:08:28,510
output of a function is by changing

00:08:24,370 --> 00:08:31,330
parameters or well obviously changing

00:08:28,510 --> 00:08:34,479
the function or also changes or can

00:08:31,330 --> 00:08:38,469
change the output so it's these are

00:08:34,479 --> 00:08:40,890
functions in mathematical way so there

00:08:38,469 --> 00:08:43,890
are no side effects and similar things

00:08:40,890 --> 00:08:43,890
so

00:08:45,560 --> 00:08:57,180
the well one important advantage of this

00:08:51,930 --> 00:09:00,029
is that we get a deterministic built

00:08:57,180 --> 00:09:02,579
recipe so we were very supply all the

00:09:00,029 --> 00:09:08,180
parameters that's the library's

00:09:02,579 --> 00:09:08,180
configuration ads etc we should get a

00:09:09,320 --> 00:09:16,649
recipe that completely describes how

00:09:12,630 --> 00:09:27,180
exactly the build occurs and it

00:09:16,649 --> 00:09:29,790
determines the output uniquely oh okay

00:09:27,180 --> 00:09:33,889
well an example what does the it look

00:09:29,790 --> 00:09:37,050
like I hope it can be seen a bit so

00:09:33,889 --> 00:09:39,060
here's an example how they're in the

00:09:37,050 --> 00:09:47,060
links language a package could look like

00:09:39,060 --> 00:09:53,850
it's well quite similar to some other

00:09:47,060 --> 00:10:01,529
things like if you saw this gen to a

00:09:53,850 --> 00:10:05,040
built or open build service of use so

00:10:01,529 --> 00:10:07,320
that there are some parameters as the

00:10:05,040 --> 00:10:14,329
standard built environment something

00:10:07,320 --> 00:10:29,300
that fetches us the sources and we just

00:10:14,329 --> 00:10:29,300
simple description dark well

00:10:29,579 --> 00:10:39,070
the simple description also some kind of

00:10:34,450 --> 00:10:42,839
name chosen we fetch the source check is

00:10:39,070 --> 00:10:45,760
hash supply the built-in puts which

00:10:42,839 --> 00:10:49,060
results in to setting some environment

00:10:45,760 --> 00:10:53,470
variables like include pass library pass

00:10:49,060 --> 00:10:56,800
and so on we could do much more supply

00:10:53,470 --> 00:11:05,560
patches configure flags and some other

00:10:56,800 --> 00:11:12,339
actions quite almost anything and also

00:11:05,560 --> 00:11:17,740
some metadata okay so as a package it's

00:11:12,339 --> 00:11:20,709
pure function and well why do we even

00:11:17,740 --> 00:11:24,810
bother with these properties what do we

00:11:20,709 --> 00:11:29,800
get from them that's so very important

00:11:24,810 --> 00:11:34,360
because that's why we do it the purity

00:11:29,800 --> 00:11:38,140
of bills gives us the faith at all the

00:11:34,360 --> 00:11:41,230
belts are reproducible deterministic and

00:11:38,140 --> 00:11:45,459
independent that is we take the recipe

00:11:41,230 --> 00:11:48,220
and send it to some machine far away

00:11:45,459 --> 00:11:52,630
that's for computations for building and

00:11:48,220 --> 00:11:55,390
it and it sends us the output we can be

00:11:52,630 --> 00:11:58,540
quite sure that the output is the same

00:11:55,390 --> 00:12:01,740
as we build it on our machines or

00:11:58,540 --> 00:12:04,810
anywhere else it's always the same and

00:12:01,740 --> 00:12:06,370
it doesn't matter on the state of our

00:12:04,810 --> 00:12:10,209
system if you have some additional

00:12:06,370 --> 00:12:15,910
packages installed or whatever it's

00:12:10,209 --> 00:12:19,899
always the same we also get implicit

00:12:15,910 --> 00:12:22,600
sharing why the hash is if the things

00:12:19,899 --> 00:12:26,350
are the same the paths are the same we

00:12:22,600 --> 00:12:30,730
can share it and safely because well to

00:12:26,350 --> 00:12:33,819
forge the cryptography crashes is well

00:12:30,730 --> 00:12:39,320
very hard for it it is not known to be

00:12:33,819 --> 00:12:44,780
possible so that's also good thing

00:12:39,320 --> 00:12:48,290
and one important thing is track ability

00:12:44,780 --> 00:12:52,850
of dependencies all the dependencies are

00:12:48,290 --> 00:12:55,760
are declared if the the Builder doesn't

00:12:52,850 --> 00:12:57,680
see anything else than its built-in put

00:12:55,760 --> 00:13:00,200
the parameters if there are some other

00:12:57,680 --> 00:13:03,500
packages it does not see that and that's

00:13:00,200 --> 00:13:08,690
important then we know we know what we

00:13:03,500 --> 00:13:13,280
depend on that also I've seen this to be

00:13:08,690 --> 00:13:17,720
a problem that well in case we fail to

00:13:13,280 --> 00:13:20,930
supply something the Builder fails often

00:13:17,720 --> 00:13:24,020
on many systems like energen to portage

00:13:20,930 --> 00:13:28,640
or somewhere else to build just succeeds

00:13:24,020 --> 00:13:31,910
because we occasionally by luck have the

00:13:28,640 --> 00:13:35,500
necessary package on the system but we

00:13:31,910 --> 00:13:39,860
don't know it that it is necessary and

00:13:35,500 --> 00:13:45,110
that can be a problem unspotted problem

00:13:39,860 --> 00:13:49,600
at that's bad okay so for example this

00:13:45,110 --> 00:13:53,900
gives us advantage in easy deploying so

00:13:49,600 --> 00:13:57,020
suppose I have some my tuned built of

00:13:53,900 --> 00:13:59,950
firefox on my machine and I want to use

00:13:57,020 --> 00:14:05,380
it on my other machine somewhere else

00:13:59,950 --> 00:14:08,420
well since we have the exact

00:14:05,380 --> 00:14:11,720
dependencies and everything encoded we

00:14:08,420 --> 00:14:16,090
track it it's as simple as this one

00:14:11,720 --> 00:14:18,800
command okay so we just copy the closure

00:14:16,090 --> 00:14:25,610
everything that is missing on the target

00:14:18,800 --> 00:14:31,430
machine and it's there and another

00:14:25,610 --> 00:14:33,820
important set of things is safety with

00:14:31,430 --> 00:14:36,950
this independence of the packages and

00:14:33,820 --> 00:14:40,220
they're switching we can do atomic

00:14:36,950 --> 00:14:44,630
switching and we can instantly roll back

00:14:40,220 --> 00:14:47,390
easily any any changes because the the

00:14:44,630 --> 00:14:51,100
state is still there until we garbage

00:14:47,390 --> 00:14:53,260
collected we lose some pointers we

00:14:51,100 --> 00:14:55,980
can have pointers to some older states

00:14:53,260 --> 00:15:00,220
just in case we found out that our

00:14:55,980 --> 00:15:05,920
update wasn't as successful as it seemed

00:15:00,220 --> 00:15:09,130
to be and from this we can allow any

00:15:05,920 --> 00:15:12,460
user to install anything because it

00:15:09,130 --> 00:15:15,400
can't affect the other users if one

00:15:12,460 --> 00:15:18,820
installs into his environment something

00:15:15,400 --> 00:15:20,830
it doesn't change the other users and if

00:15:18,820 --> 00:15:26,400
it happens that they install exactly the

00:15:20,830 --> 00:15:31,210
same thing well due to the reusing they

00:15:26,400 --> 00:15:33,850
reuse the same paths so they are

00:15:31,210 --> 00:15:39,610
implicitly shirt and that's also good

00:15:33,850 --> 00:15:43,480
and all this purity gives us also a

00:15:39,610 --> 00:15:46,720
transparent way of binary deployment as

00:15:43,480 --> 00:15:50,440
I said we can build everything on a farm

00:15:46,720 --> 00:15:57,010
and we know that is the same as if we

00:15:50,440 --> 00:15:59,980
build it ourselves and we can we can do

00:15:57,010 --> 00:16:02,170
changes the system noted that the farm

00:15:59,980 --> 00:16:08,530
doesn't have the way and we build what

00:16:02,170 --> 00:16:12,220
we need in addition but it's possible

00:16:08,530 --> 00:16:16,530
and well the binary patching that's

00:16:12,220 --> 00:16:21,600
quite recent quite standard thing so

00:16:16,530 --> 00:16:25,740
nothing special at the moment it was

00:16:21,600 --> 00:16:31,630
yesterday I believe we had something

00:16:25,740 --> 00:16:34,030
almost 20,000 successful build of the

00:16:31,630 --> 00:16:37,330
but these are only successful bells of

00:16:34,030 --> 00:16:40,870
the most recent versions of the trunk

00:16:37,330 --> 00:16:45,910
the most recent recent version there is

00:16:40,870 --> 00:16:48,570
much more so that it's the it it saves a

00:16:45,910 --> 00:16:51,070
lot of time for example compared to

00:16:48,570 --> 00:16:55,330
Gentoo building which is fantastic with

00:16:51,070 --> 00:16:57,400
its configurability but if if I don't

00:16:55,330 --> 00:17:00,370
want anything special one the same as

00:16:57,400 --> 00:17:02,100
many other people why not share the bill

00:17:00,370 --> 00:17:07,510
time

00:17:02,100 --> 00:17:10,750
okay so that was how we view package

00:17:07,510 --> 00:17:12,819
management but when we have these nice

00:17:10,750 --> 00:17:16,990
properties why not extend it to the

00:17:12,819 --> 00:17:19,809
whole operating system yeah well we can

00:17:16,990 --> 00:17:22,600
have stateless operating system where

00:17:19,809 --> 00:17:26,380
everything all the configurations of

00:17:22,600 --> 00:17:30,690
demons etc is generated from a set of

00:17:26,380 --> 00:17:32,950
configuration files and the result well

00:17:30,690 --> 00:17:35,740
that's our ability recipe the

00:17:32,950 --> 00:17:40,840
configuration files from which we build

00:17:35,740 --> 00:17:44,139
the whole system by pure expressions in

00:17:40,840 --> 00:17:48,159
the same language and that's really nice

00:17:44,139 --> 00:17:51,820
because it's again deterministic the

00:17:48,159 --> 00:17:54,340
result and we can just send the recipe

00:17:51,820 --> 00:17:57,370
to another machine redeploy it or send

00:17:54,340 --> 00:17:59,139
binaries and again we get banners from

00:17:57,370 --> 00:18:03,610
the build farm that there is not much

00:17:59,139 --> 00:18:06,309
work needed and the most the the best

00:18:03,610 --> 00:18:08,940
painting is atomic switching we have

00:18:06,309 --> 00:18:12,370
another version of the operating system

00:18:08,940 --> 00:18:14,169
we just switch it and there's nothing in

00:18:12,370 --> 00:18:19,690
between that there's not the crash from

00:18:14,169 --> 00:18:22,480
beginning yeah so we have this even in

00:18:19,690 --> 00:18:25,210
the bootloader so you can choose if the

00:18:22,480 --> 00:18:28,240
configuration doesn't work anymore you

00:18:25,210 --> 00:18:30,820
choose any of the previous until you

00:18:28,240 --> 00:18:34,570
delete them or their garbage collector

00:18:30,820 --> 00:18:36,730
it or you can even test them in a

00:18:34,570 --> 00:18:40,450
virtual machine just a simple command

00:18:36,730 --> 00:18:42,700
rebuild in build vm you get an image in

00:18:40,450 --> 00:18:45,970
the virtual machine you can test your

00:18:42,700 --> 00:18:51,460
configuration before you switch to it

00:18:45,970 --> 00:18:54,519
and all back even you can switch it

00:18:51,460 --> 00:18:59,529
without rebooting so as much as it is

00:18:54,519 --> 00:19:02,320
possible because carol can be exchanged

00:18:59,529 --> 00:19:06,090
and certain time and also we usually

00:19:02,320 --> 00:19:11,590
don't want to restart x server and

00:19:06,090 --> 00:19:14,770
similar things so but much of services

00:19:11,590 --> 00:19:20,299
can be restarted so

00:19:14,770 --> 00:19:25,640
just really nicely scales and its really

00:19:20,299 --> 00:19:31,220
practical the principle okay so what are

00:19:25,640 --> 00:19:33,860
the main points here of next that was

00:19:31,220 --> 00:19:39,309
the purity and trade sexual behavior so

00:19:33,860 --> 00:19:43,580
do we have some belt recipes that we

00:19:39,309 --> 00:19:46,510
edit and it's not just the configuration

00:19:43,580 --> 00:19:50,330
it's it's a complete language function

00:19:46,510 --> 00:19:56,240
but it's a tweak especially that it is

00:19:50,330 --> 00:20:00,350
easy to write this recipes like there's

00:19:56,240 --> 00:20:04,340
nice uri syntax and and small and we

00:20:00,350 --> 00:20:07,789
have transactional behaviors we can the

00:20:04,340 --> 00:20:11,000
the bills built is automatically made

00:20:07,789 --> 00:20:14,870
valid when it finishes and when it fails

00:20:11,000 --> 00:20:18,650
that there's just some garbage temporary

00:20:14,870 --> 00:20:22,220
files but nothing else and it gives us

00:20:18,650 --> 00:20:24,830
easy combining on officers and binary

00:20:22,220 --> 00:20:29,659
deployment through the build farm and

00:20:24,830 --> 00:20:32,419
that really saves a lot of time but

00:20:29,659 --> 00:20:35,150
still we maintained gentle-like

00:20:32,419 --> 00:20:37,520
customers ability all the packages are

00:20:35,150 --> 00:20:40,030
functions any parameters can be easily

00:20:37,520 --> 00:20:42,830
customized you can create your own

00:20:40,030 --> 00:20:44,960
helper functions because functional

00:20:42,830 --> 00:20:49,580
language you if you know that there's a

00:20:44,960 --> 00:20:54,380
lot of power in it so you share as much

00:20:49,580 --> 00:20:56,450
as you as you can and whatever you want

00:20:54,380 --> 00:21:02,360
differently you build it but nothing

00:20:56,450 --> 00:21:08,210
more and there's quite good or I find it

00:21:02,360 --> 00:21:13,039
good but once a much more so the current

00:21:08,210 --> 00:21:15,350
state is that makes annex OS it's cold

00:21:13,039 --> 00:21:18,740
experimental but it's already highly

00:21:15,350 --> 00:21:22,340
usable many of us use it as the main

00:21:18,740 --> 00:21:24,700
systems on many computers and for years

00:21:22,340 --> 00:21:24,700
now

00:21:24,779 --> 00:21:31,870
well duh why doesn't it really matter

00:21:29,260 --> 00:21:34,029
that it is experimental and we can use

00:21:31,870 --> 00:21:36,789
it is the safety thing whenever

00:21:34,029 --> 00:21:39,340
something gets wrong we can get back to

00:21:36,789 --> 00:21:45,250
any working state and that is just

00:21:39,340 --> 00:21:48,669
wonderful I have well when I started

00:21:45,250 --> 00:21:51,580
really using clinics I started with

00:21:48,669 --> 00:21:56,890
gentle which was really wonderful for

00:21:51,580 --> 00:21:59,820
learning clinics but I there was much of

00:21:56,890 --> 00:22:03,250
time when the system was just unworkable

00:21:59,820 --> 00:22:10,000
because I had only one processor which

00:22:03,250 --> 00:22:12,399
wasn't too fast and well I often broke

00:22:10,000 --> 00:22:16,750
the system it wasn't really easy to get

00:22:12,399 --> 00:22:19,630
back or forward or anywhere so it is

00:22:16,750 --> 00:22:23,950
possible to you to run this distribution

00:22:19,630 --> 00:22:27,880
with thousands of build packages in

00:22:23,950 --> 00:22:32,049
about 10 significant contributors which

00:22:27,880 --> 00:22:35,860
do it in the free time this seems quite

00:22:32,049 --> 00:22:39,010
good and now we are gathering developing

00:22:35,860 --> 00:22:42,669
speed the upgrading updating of packages

00:22:39,010 --> 00:22:46,980
and so on by moving the workflow to git

00:22:42,669 --> 00:22:52,539
hub which seems to have helped a lot

00:22:46,980 --> 00:22:56,649
because it makes much easier to review

00:22:52,539 --> 00:22:59,950
the changes by others and much easier

00:22:56,649 --> 00:23:02,320
for others to contribute the work they

00:22:59,950 --> 00:23:07,000
do just for themselves because they need

00:23:02,320 --> 00:23:10,799
it but they are willing to share the

00:23:07,000 --> 00:23:16,059
work so that's these are the main points

00:23:10,799 --> 00:23:19,110
so and the I'm i invite you to the

00:23:16,059 --> 00:23:25,059
resources on leaks or torque or and

00:23:19,110 --> 00:23:27,179
eventually you can join us ok any

00:23:25,059 --> 00:23:27,179
questions

00:23:30,300 --> 00:23:38,040
at the microphone probably I would like

00:23:34,470 --> 00:23:40,920
I would last like to ask how do you

00:23:38,040 --> 00:23:44,490
handle multiple installation of single

00:23:40,920 --> 00:23:46,430
package like engine to you have for

00:23:44,490 --> 00:23:49,790
example Python packages that have

00:23:46,430 --> 00:23:52,560
installation in various versions and

00:23:49,790 --> 00:23:54,900
currently for example it is not possible

00:23:52,560 --> 00:23:58,290
to have different configurations for

00:23:54,900 --> 00:24:01,560
them yes that's I didn't stress it but

00:23:58,290 --> 00:24:03,510
that's one over the important advantages

00:24:01,560 --> 00:24:05,880
you can have any number of

00:24:03,510 --> 00:24:07,410
configurations of any package in any

00:24:05,880 --> 00:24:09,750
number of versions it doesn't really

00:24:07,410 --> 00:24:12,630
matter the hash gets different and

00:24:09,750 --> 00:24:15,390
change the configuration of asian and it

00:24:12,630 --> 00:24:18,900
gets into another directory and you pull

00:24:15,390 --> 00:24:22,920
into your environment anything you want

00:24:18,900 --> 00:24:29,460
just now so you can have any number of

00:24:22,920 --> 00:24:37,410
versions it doesn't interfere okay

00:24:29,460 --> 00:24:39,480
here's probably some i guess on the same

00:24:37,410 --> 00:24:43,140
topic of having multiple versions of

00:24:39,480 --> 00:24:44,790
packages installed i guess for rolling

00:24:43,140 --> 00:24:47,310
release distributions that may be

00:24:44,790 --> 00:24:49,830
average users aren't running but maybe a

00:24:47,310 --> 00:24:52,650
lot of people here might or whatnot you

00:24:49,830 --> 00:24:55,140
were maybe getting a lot of packages of

00:24:52,650 --> 00:24:56,580
the same the same package different

00:24:55,140 --> 00:24:58,200
version is installed at the same time

00:24:56,580 --> 00:25:00,660
unless this feature is disabled by

00:24:58,200 --> 00:25:05,280
default so I guess I'm kind of wondering

00:25:00,660 --> 00:25:07,200
I don't know with with environments

00:25:05,280 --> 00:25:09,150
where people are running flash drives

00:25:07,200 --> 00:25:11,850
are solid state storage or embedded

00:25:09,150 --> 00:25:15,240
systems like having this pile up in

00:25:11,850 --> 00:25:16,710
space usage or for example if like I

00:25:15,240 --> 00:25:19,020
have multiple versions of Apache

00:25:16,710 --> 00:25:21,960
installed because I'm getting like new

00:25:19,020 --> 00:25:26,100
versions with security fixes which one

00:25:21,960 --> 00:25:28,590
is I don't know which one is running up

00:25:26,100 --> 00:25:30,240
at startup or like how this is how this

00:25:28,590 --> 00:25:32,280
would be handled it seems like a fairly

00:25:30,240 --> 00:25:36,120
complex issue actually even though it's

00:25:32,280 --> 00:25:39,030
technically a nice feature to have I'm

00:25:36,120 --> 00:25:43,270
not really sure what was the main

00:25:39,030 --> 00:25:45,430
question the blow up in space

00:25:43,270 --> 00:25:48,370
that's like one of the multiple thing

00:25:45,430 --> 00:25:50,680
like things that might be an issue like

00:25:48,370 --> 00:25:52,570
for example in Nick's OS which I haven't

00:25:50,680 --> 00:25:54,510
run is is this feature enabled by

00:25:52,570 --> 00:25:58,060
default that when you upgrade your

00:25:54,510 --> 00:26:01,780
package it maintained it keeps the older

00:25:58,060 --> 00:26:04,810
versions also installed you always keep

00:26:01,780 --> 00:26:09,040
the versions of before because you don't

00:26:04,810 --> 00:26:11,680
know the other user can use it he can

00:26:09,040 --> 00:26:14,880
have it in your Eva in his environment a

00:26:11,680 --> 00:26:18,130
and you you can't affect him so you can

00:26:14,880 --> 00:26:22,150
run your garbage collector afterwards so

00:26:18,130 --> 00:26:26,140
it might be deleted immediately if you

00:26:22,150 --> 00:26:28,480
don't want to keep it and there's well

00:26:26,140 --> 00:26:33,340
usually money for example when you

00:26:28,480 --> 00:26:36,160
upgrade lipsy everything changes yes

00:26:33,340 --> 00:26:39,130
well the heshes changes the issues

00:26:36,160 --> 00:26:41,590
change but the most of the files remain

00:26:39,130 --> 00:26:44,710
the same and because they never get

00:26:41,590 --> 00:26:47,530
changed they can be hard linked or sim

00:26:44,710 --> 00:26:49,840
linked and then they are in mixels so

00:26:47,530 --> 00:26:52,570
the the blow up in space isn't that

00:26:49,840 --> 00:26:58,450
large and from the bill farm you get

00:26:52,570 --> 00:27:00,580
binary packages so by binary diffs so it

00:26:58,450 --> 00:27:04,750
doesn't take much bandwidth anyway so

00:27:00,580 --> 00:27:09,580
that's we have to finish the session now

00:27:04,750 --> 00:27:13,390
sorry okay however we have our next

00:27:09,580 --> 00:27:16,270
presentation with Peter sanuk of a

00:27:13,390 --> 00:27:20,190
famous why proper logging is important

00:27:16,270 --> 00:27:20,190

YouTube URL: https://www.youtube.com/watch?v=EjawnxLgDN4


