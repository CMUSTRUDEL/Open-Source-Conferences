Title: OSC12 - openSUSE on SPARC
Publication date: 2012-10-24
Playlist: openSUSE Conference 2012
Description: 
	OSC12 - openSUSE on SPARC from openSUSE. Like this? Watch the latest episode of openSUSE on Blip! http://blip.tv/opensuse/watch 

Speaker: Jan Engelhardt
Room: Spock

See all episodes of openSUSE http://blip.tv/opensuse#EpisodeArchive
Visit openSUSE's series page http://blip.tv/opensuse
Captions: 
	00:00:00,000 --> 00:00:05,940
I'm here today as a opensuse community

00:00:02,879 --> 00:00:08,880
member and for the last three years I've

00:00:05,940 --> 00:00:11,990
been tinkering around with a spark port

00:00:08,880 --> 00:00:14,610
for opensuse and today I will present

00:00:11,990 --> 00:00:22,619
the current status and how I actually

00:00:14,610 --> 00:00:26,070
got to this port so the spark 9 version

00:00:22,619 --> 00:00:29,010
9 is a was specified in 1994 it was a 60

00:00:26,070 --> 00:00:31,529
it is a 64-bit is a which means you have

00:00:29,010 --> 00:00:35,700
64-bit registers and also instructions

00:00:31,529 --> 00:00:38,700
to do computations on the 64-bit values

00:00:35,700 --> 00:00:40,680
it's still a risk machineries and the

00:00:38,700 --> 00:00:44,370
instructions are relatively short with

00:00:40,680 --> 00:00:47,100
only 32 bits each which means if you

00:00:44,370 --> 00:00:49,680
have constants to load into registers

00:00:47,100 --> 00:00:52,550
you need multiple instructions for

00:00:49,680 --> 00:00:55,649
example it's the same with PowerPC

00:00:52,550 --> 00:00:58,109
prominent manufacturers of spark

00:00:55,649 --> 00:01:04,519
hardware included son formerly son now

00:00:58,109 --> 00:01:06,659
Oracle and Fujitsu and they both have a

00:01:04,519 --> 00:01:08,369
cross-licensing cross binding agreement

00:01:06,659 --> 00:01:15,000
so you will find machines that are

00:01:08,369 --> 00:01:18,000
colored both black and silver ear it mmm

00:01:15,000 --> 00:01:20,490
there are also emulators available

00:01:18,000 --> 00:01:23,790
there's qemu which has a sparc64

00:01:20,490 --> 00:01:25,650
emulation mode however unfortunately

00:01:23,790 --> 00:01:28,439
this doesn't seem to boot the latest

00:01:25,650 --> 00:01:34,140
kernel for example from a debian version

00:01:28,439 --> 00:01:37,079
6 is 0 so that doesn't quite work the

00:01:34,140 --> 00:01:41,119
system's from Sun and Fujitsu also come

00:01:37,079 --> 00:01:46,200
with the remote console for diagnostics

00:01:41,119 --> 00:01:51,509
and management it's a separate chip

00:01:46,200 --> 00:01:55,740
which dry runs vxworks I think and later

00:01:51,509 --> 00:02:00,649
linux on a PPC ship and i wanted to do a

00:01:55,740 --> 00:02:00,649
short demo of how this actually looks

00:02:37,350 --> 00:02:42,860
okay so this is for example the

00:02:39,410 --> 00:02:46,590
management console of a t-1000 machine

00:02:42,860 --> 00:02:49,460
where you can inspect environmental

00:02:46,590 --> 00:02:52,260
parameters and memory folds and so on

00:02:49,460 --> 00:02:57,540
this is on the separate chip and if you

00:02:52,260 --> 00:03:00,480
start the console you get the open boot

00:02:57,540 --> 00:03:05,750
fair firmware prompt which you can also

00:03:00,480 --> 00:03:08,040
find on PPC machines so there's a lot of

00:03:05,750 --> 00:03:09,990
common properties between these two

00:03:08,040 --> 00:03:12,420
architectures we will hear about power

00:03:09,990 --> 00:03:15,360
in the next session so that is that and

00:03:12,420 --> 00:03:18,600
this is actually how the open boot from

00:03:15,360 --> 00:03:24,900
looks it can do simple mathematics for

00:03:18,600 --> 00:03:27,810
example that's 5 and 5 equals 10 it's 08

00:03:24,900 --> 00:03:34,050
and hex so kind of interesting to see

00:03:27,810 --> 00:03:36,000
that what these things can do so this

00:03:34,050 --> 00:03:38,010
conference is about bootstrapping and of

00:03:36,000 --> 00:03:41,220
course i had to bootstrap in a way the

00:03:38,010 --> 00:03:45,270
pork pot for opensuse and what we need

00:03:41,220 --> 00:03:47,760
and want to have is RPM packages that we

00:03:45,270 --> 00:03:52,560
can install with zipper or preferably

00:03:47,760 --> 00:03:54,810
for a start with plain RPM there's many

00:03:52,560 --> 00:03:57,630
ways to get there you can do a cross

00:03:54,810 --> 00:04:01,620
compile or a native compiling and even

00:03:57,630 --> 00:04:07,200
there there's some differences on how

00:04:01,620 --> 00:04:12,600
you can actually go there when you try

00:04:07,200 --> 00:04:15,480
to cross compile their own job there's

00:04:12,600 --> 00:04:17,370
sort of a pitfalls that we have one that

00:04:15,480 --> 00:04:19,859
I originally ran into is that you just

00:04:17,370 --> 00:04:21,900
don't have the headers from the Linux

00:04:19,859 --> 00:04:23,970
kernel installed and user include that

00:04:21,900 --> 00:04:28,140
has now been fixed in at least opensuse

00:04:23,970 --> 00:04:30,180
and a different problem is that you

00:04:28,140 --> 00:04:33,600
cannot run just build executables this

00:04:30,180 --> 00:04:35,970
is very important if you have if these

00:04:33,600 --> 00:04:37,830
just build executables are used to

00:04:35,970 --> 00:04:40,710
generate further sources to be compiled

00:04:37,830 --> 00:04:42,720
this is the example for example in

00:04:40,710 --> 00:04:46,260
Western this is the case and also i

00:04:42,720 --> 00:04:49,460
think in xorg which generates its

00:04:46,260 --> 00:04:52,220
protocol descriptions from xml files

00:04:49,460 --> 00:04:55,250
and because of that you just couldn't

00:04:52,220 --> 00:05:00,229
cross compile these but you can do that

00:04:55,250 --> 00:05:08,240
for the toolchain binutils in jesusÃ­ but

00:05:00,229 --> 00:05:11,360
it quickly gets very hairy if you um for

00:05:08,240 --> 00:05:13,940
it when you try to compile G lip CI a--

00:05:11,360 --> 00:05:16,130
always ran into some strange error and I

00:05:13,940 --> 00:05:18,770
just fought I leave that to the experts

00:05:16,130 --> 00:05:23,060
that do cross compiling winders new and

00:05:18,770 --> 00:05:28,910
a really new architecture coming out and

00:05:23,060 --> 00:05:31,940
they can do that programs that are

00:05:28,910 --> 00:05:34,250
called by configured AC or whatever else

00:05:31,940 --> 00:05:37,729
you like also only reflect the host

00:05:34,250 --> 00:05:41,000
status and not the actual actual target

00:05:37,729 --> 00:05:45,590
architecture so there's always problems

00:05:41,000 --> 00:05:48,380
dumb the most often seen problem is that

00:05:45,590 --> 00:05:52,130
people call you name dash M or something

00:05:48,380 --> 00:05:55,490
and that always goes wrong it also goes

00:05:52,130 --> 00:05:58,820
wrong on spark itself which is sad to

00:05:55,490 --> 00:06:00,949
see the problem lies within the source

00:05:58,820 --> 00:06:06,289
packages of course because you shouldn't

00:06:00,949 --> 00:06:08,900
be calling you name and that's why we

00:06:06,289 --> 00:06:11,590
should aim for a native compilation even

00:06:08,900 --> 00:06:14,870
opensuse the opensuse arm sub-project

00:06:11,590 --> 00:06:18,770
does use native looking compilation

00:06:14,870 --> 00:06:20,719
using ki q mu as an emulator so go

00:06:18,770 --> 00:06:23,900
native if you can also because it's

00:06:20,719 --> 00:06:28,520
faster for most of the speedier chips

00:06:23,900 --> 00:06:31,009
out there arm is a low-power hardware so

00:06:28,520 --> 00:06:36,560
maybe q mu is faster if you run it on a

00:06:31,009 --> 00:06:41,060
high-end x86 button k not anymore not

00:06:36,560 --> 00:06:45,919
anymore that's great so you know native

00:06:41,060 --> 00:06:48,949
is very good however so the last spark

00:06:45,919 --> 00:06:51,349
release opens a den suse linux made was

00:06:48,949 --> 00:06:54,199
were than 7.3 to the best of my

00:06:51,349 --> 00:06:58,279
knowledge to set a 24 kernel and a very

00:06:54,199 --> 00:07:00,650
old GCC that if you tried to compile a

00:06:58,279 --> 00:07:03,100
recent Jesus you with this very old one

00:07:00,650 --> 00:07:05,440
you immediately ran into a

00:07:03,100 --> 00:07:09,340
because it expected something some

00:07:05,440 --> 00:07:11,800
definitions form GCC free I believe it

00:07:09,340 --> 00:07:15,780
has been a few years that I actually

00:07:11,800 --> 00:07:19,960
tried to native cross compile from 24

00:07:15,780 --> 00:07:23,350
2826 system that hasn't gone very well

00:07:19,960 --> 00:07:25,180
so a modern tool chain is very highly

00:07:23,350 --> 00:07:30,160
desirable even if it means that you have

00:07:25,180 --> 00:07:32,800
to be unfaithful for a while so I went

00:07:30,160 --> 00:07:35,620
through a separate a different linux

00:07:32,800 --> 00:07:37,870
distribution there are a handful to

00:07:35,620 --> 00:07:40,890
choose from for example deaveon has or

00:07:37,870 --> 00:07:44,950
quad I believe again to those as well

00:07:40,890 --> 00:07:49,600
and Fedora also had one sort of in the

00:07:44,950 --> 00:07:51,610
backyard like my project is now which is

00:07:49,600 --> 00:07:59,020
what I eventually picked because it has

00:07:51,610 --> 00:08:01,570
RPM available um yeah it's reasonably

00:07:59,020 --> 00:08:05,190
close to the sousa products with RPM I

00:08:01,570 --> 00:08:09,070
might have also I could have also chosen

00:08:05,190 --> 00:08:11,380
deviant again to as a base and start

00:08:09,070 --> 00:08:16,300
compiling RPM itself there because it

00:08:11,380 --> 00:08:20,230
wouldn't enter an RPM program binary

00:08:16,300 --> 00:08:22,690
compiled on a DB no gentoo would have

00:08:20,230 --> 00:08:24,250
been an option because RPM isn't used as

00:08:22,690 --> 00:08:27,820
the normal package management so it

00:08:24,250 --> 00:08:30,640
would not interfere in case of aurora

00:08:27,820 --> 00:08:35,680
linux or it's now integrated into fedora

00:08:30,640 --> 00:08:38,380
halfway um the obstacles are that you

00:08:35,680 --> 00:08:40,570
have conflicting macro definitions or

00:08:38,380 --> 00:08:42,760
Susan specific macros that the fedora

00:08:40,570 --> 00:08:46,570
RPM program doesn't know about and

00:08:42,760 --> 00:08:49,060
that's probably one case we're using a

00:08:46,570 --> 00:08:52,810
different distribution would have been

00:08:49,060 --> 00:08:55,230
an option I chose to go with fedora

00:08:52,810 --> 00:09:00,240
anyway and that worked reasonably well

00:08:55,230 --> 00:09:04,590
you start by producing rpms from the

00:09:00,240 --> 00:09:07,660
every effort from the Fedora environment

00:09:04,590 --> 00:09:10,510
it needs a bit of tinkering because of

00:09:07,660 --> 00:09:14,620
conflicting files and so you'll need to

00:09:10,510 --> 00:09:18,400
force your way around so to speak

00:09:14,620 --> 00:09:21,180
and so when you have your first rpm

00:09:18,400 --> 00:09:24,340
produced in the original federal system

00:09:21,180 --> 00:09:27,160
you start building up at a HEA root

00:09:24,340 --> 00:09:30,610
image in a separate directory also with

00:09:27,160 --> 00:09:33,730
F with fedora and then start replacing

00:09:30,610 --> 00:09:36,190
packages one by one usually you start

00:09:33,730 --> 00:09:40,000
with I think file system in a eight

00:09:36,190 --> 00:09:43,350
underscore base and progressively

00:09:40,000 --> 00:09:49,510
continue through gzip correo tools and

00:09:43,350 --> 00:09:54,640
these are small packages to the 2g lipsy

00:09:49,510 --> 00:09:58,690
and the compiler itself and you repeat

00:09:54,640 --> 00:10:03,250
this process incited change route as

00:09:58,690 --> 00:10:06,310
well until you have until you have a sub

00:10:03,250 --> 00:10:14,010
filesystem media of made only of souza

00:10:06,310 --> 00:10:16,720
rpm packages from there you want to

00:10:14,010 --> 00:10:19,150
reasonably quickly get a build servers

00:10:16,720 --> 00:10:21,820
instance running because the automated

00:10:19,150 --> 00:10:25,860
package build and rebuild of the d build

00:10:21,820 --> 00:10:30,010
service offers over plane RPM bolt is

00:10:25,860 --> 00:10:32,440
golden so to speak many packages compile

00:10:30,010 --> 00:10:35,020
without any changes whatsoever which

00:10:32,440 --> 00:10:39,390
means I was in fact able to compile I

00:10:35,020 --> 00:10:42,280
think 2000 or 3000 packages of factory

00:10:39,390 --> 00:10:47,190
without much effort in a handful of

00:10:42,280 --> 00:10:51,160
weeks depending on the speed of the CPU

00:10:47,190 --> 00:10:54,400
for the most the tool chain itself takes

00:10:51,160 --> 00:10:57,850
the most time because G lipsy and Jesus

00:10:54,400 --> 00:10:59,490
you are rather big packages just like

00:10:57,850 --> 00:11:03,460
the Linux kernel and they have a 10

00:10:59,490 --> 00:11:06,100
tendency to compile fail sometimes or

00:11:03,460 --> 00:11:09,220
the test suite runs afoul of one test

00:11:06,100 --> 00:11:11,440
and then you don't know what to do you

00:11:09,220 --> 00:11:15,930
try around and have to wait again until

00:11:11,440 --> 00:11:19,360
the entire package completes again and a

00:11:15,930 --> 00:11:24,760
kernel compile on the t one cpu takes

00:11:19,360 --> 00:11:27,070
about 52 minutes and i think it was all

00:11:24,760 --> 00:11:28,450
mod configure the standard souza config

00:11:27,070 --> 00:11:31,360
so the speed is not that

00:11:28,450 --> 00:11:38,140
stell are it's an old machine that I

00:11:31,360 --> 00:11:40,660
have the model was produced 2005 so well

00:11:38,140 --> 00:11:43,600
I had time so I did it anyway and I'd

00:11:40,660 --> 00:11:46,690
succeeded the modifications I had to

00:11:43,600 --> 00:11:49,600
make to the build service code that is

00:11:46,690 --> 00:11:52,870
the build script and the actual web

00:11:49,600 --> 00:12:01,630
interface and so on are already upstream

00:11:52,870 --> 00:12:05,680
by me within the last year's in building

00:12:01,630 --> 00:12:08,470
we will have or will produce two targets

00:12:05,680 --> 00:12:15,130
one is called spark v9 and the other

00:12:08,470 --> 00:12:18,130
sparc64 as I said before this bug v9 is

00:12:15,130 --> 00:12:22,980
a is a 64-bit architecture however

00:12:18,130 --> 00:12:27,820
because the CPUs are not as efficient as

00:12:22,980 --> 00:12:30,160
x86 to compute 64-bit results people

00:12:27,820 --> 00:12:33,520
prefer to use a 32-bit user space

00:12:30,160 --> 00:12:37,740
environment for reduced point Assizes

00:12:33,520 --> 00:12:37,740
memory footprint and so on and so on and

00:12:38,580 --> 00:12:48,400
Spock v9 is the RPM target that I use

00:12:43,750 --> 00:12:50,950
for these 32-bit packages in fact other

00:12:48,400 --> 00:12:52,920
distributions do the same debian for

00:12:50,950 --> 00:12:58,710
example you will also see they have

00:12:52,920 --> 00:13:02,080
mostly if not all 32-bit elf images

00:12:58,710 --> 00:13:04,090
programs into distribution perhaps save

00:13:02,080 --> 00:13:07,420
for the colonel and a few extra programs

00:13:04,090 --> 00:13:09,990
and that's all and it's once again the

00:13:07,420 --> 00:13:13,240
same for powerpc where you also have

00:13:09,990 --> 00:13:15,190
mainly a 32-bit user space I mean the

00:13:13,240 --> 00:13:19,050
old PowerPC for example that you will

00:13:15,190 --> 00:13:25,120
also find in the apple xserve g5 machine

00:13:19,050 --> 00:13:29,050
which has a PPC 970 also almost more

00:13:25,120 --> 00:13:32,560
than half a decade old by now but that's

00:13:29,050 --> 00:13:37,460
the things that people can actually get

00:13:32,560 --> 00:13:41,760
off ebay and not lose all their savings

00:13:37,460 --> 00:13:46,520
so M sparc64 is the other target type

00:13:41,760 --> 00:13:49,200
this is for 64-bit LF programs a few

00:13:46,520 --> 00:13:50,790
programs really need this type for

00:13:49,200 --> 00:13:55,020
example the kernel itself of course you

00:13:50,790 --> 00:13:59,250
want to address more than 4 gigabytes

00:13:55,020 --> 00:14:05,130
from not only that but there's also a

00:13:59,250 --> 00:14:07,530
hardware difference here other programs

00:14:05,130 --> 00:14:11,040
that need to be 64-bit are for example

00:14:07,530 --> 00:14:13,770
gdb and estrace everything that uses

00:14:11,040 --> 00:14:18,900
ptrace because for some reason you need

00:14:13,770 --> 00:14:24,420
a 64-bit watching program to actually

00:14:18,900 --> 00:14:28,070
watch a 64-bit program and I call this a

00:14:24,420 --> 00:14:31,080
duality you can actually have a purely

00:14:28,070 --> 00:14:33,870
32-bit user space or a pure leaf 64-bit

00:14:31,080 --> 00:14:39,780
user space or you can actually mix both

00:14:33,870 --> 00:14:44,880
of them hmm so if you for example

00:14:39,780 --> 00:14:48,000
installed GCC dot MGCCC dash 472 dot

00:14:44,880 --> 00:14:52,620
spark v 92 RPM your GCC defaults to

00:14:48,000 --> 00:14:54,660
producing l32 binaries and you can

00:14:52,620 --> 00:14:59,720
install a pack an extra package called

00:14:54,660 --> 00:15:02,070
GCC dash 64-bit that makes available the

00:14:59,720 --> 00:15:06,540
64-bit option you can also turn it

00:15:02,070 --> 00:15:09,630
around maybe I yeah I could show a demo

00:15:06,540 --> 00:15:11,900
of that soon however sip doesn't

00:15:09,630 --> 00:15:14,940
actually cope with this duality yet

00:15:11,900 --> 00:15:17,490
zipper always looks at the you name I

00:15:14,940 --> 00:15:21,840
believe there may be a config option by

00:15:17,490 --> 00:15:23,940
now to tune it I don't know and it will

00:15:21,840 --> 00:15:25,950
always pick this box 64 packages which

00:15:23,940 --> 00:15:33,110
it may not be what the user actually

00:15:25,950 --> 00:15:33,110
expects yes

00:15:38,769 --> 00:15:43,689
yeah so we're told the solver always

00:15:41,649 --> 00:15:46,389
choose the best architecture but as you

00:15:43,689 --> 00:15:51,819
know there there is no best you pick the

00:15:46,389 --> 00:15:55,389
one that you like most he says it's

00:15:51,819 --> 00:15:58,689
configurable that's good this also was

00:15:55,389 --> 00:16:00,939
kind of irritating because on powerpc

00:15:58,689 --> 00:16:05,499
you basically have the same issue and

00:16:00,939 --> 00:16:08,259
the opensuse PPC release installs 32-bit

00:16:05,499 --> 00:16:10,089
packages by default and also super does

00:16:08,259 --> 00:16:13,110
that as well so it gets it right there

00:16:10,089 --> 00:16:20,410
but i will leave yours less PPC is a

00:16:13,110 --> 00:16:24,389
64-bit user space is it not the 14 zip

00:16:20,410 --> 00:16:24,389
systems no not that one

00:16:31,100 --> 00:16:39,200
yeah and yeah and you run the move 64bit

00:16:34,580 --> 00:16:42,530
packages in userspace yeah so it seems

00:16:39,200 --> 00:16:48,110
solved for PPC it isn't yet the case for

00:16:42,530 --> 00:16:56,060
spark will have to I will ask on the

00:16:48,110 --> 00:17:02,150
mailing list as you suggest right where

00:16:56,060 --> 00:17:05,300
was I I have a handful of issues some

00:17:02,150 --> 00:17:08,480
minor some more pressing for example GCC

00:17:05,300 --> 00:17:11,600
doesn't produce actual v9 instructions

00:17:08,480 --> 00:17:13,550
for the 32-bit target which I don't know

00:17:11,600 --> 00:17:17,450
why it's not doing that I filed a bug

00:17:13,550 --> 00:17:19,010
report thought out as well ah so far it

00:17:17,450 --> 00:17:22,700
doesn't seem like anybody has replied

00:17:19,010 --> 00:17:25,400
which is a bit sad but nevertheless I we

00:17:22,700 --> 00:17:28,280
can produce 32-bit packages they are

00:17:25,400 --> 00:17:31,550
called VA plus so it's like last decade

00:17:28,280 --> 00:17:34,430
but it works everybody else also

00:17:31,550 --> 00:17:38,840
produces VA plus packages so I think I'm

00:17:34,430 --> 00:17:42,380
fine on that occasion there are certain

00:17:38,840 --> 00:17:47,270
limitations of the from interface this

00:17:42,380 --> 00:17:50,450
little thing for example it can own when

00:17:47,270 --> 00:17:52,100
it downloads packages know when it

00:17:50,450 --> 00:17:54,770
downloads the colonel from the network

00:17:52,100 --> 00:17:58,880
to boot it there's a limitation of 10

00:17:54,770 --> 00:18:00,860
megabytes on the Apple PPC ugly it's

00:17:58,880 --> 00:18:05,150
somewhere same in the ballpark maybe

00:18:00,860 --> 00:18:08,450
even less maybe a little more even on p

00:18:05,150 --> 00:18:10,870
series and this is very problematic

00:18:08,450 --> 00:18:13,490
because this is the PPC instala is like

00:18:10,870 --> 00:18:15,320
more than 30 megabytes in size and you

00:18:13,490 --> 00:18:20,420
just can't boot it over network which is

00:18:15,320 --> 00:18:23,210
sad even more so because the t1000 the

00:18:20,420 --> 00:18:25,400
only the one that i have is it doesn't

00:18:23,210 --> 00:18:29,540
have any cd-rom drive nor does it have

00:18:25,400 --> 00:18:32,930
an USB so i basically have to prepare a

00:18:29,540 --> 00:18:36,080
hard disk before inserting these into a

00:18:32,930 --> 00:18:37,910
machine and that makes testing the

00:18:36,080 --> 00:18:40,910
Installer should I ever get to it I

00:18:37,910 --> 00:18:44,570
don't have a Kiwi image yet makes

00:18:40,910 --> 00:18:47,929
testing very difficult at least to say

00:18:44,570 --> 00:18:50,059
and sometimes i also have a very very

00:18:47,929 --> 00:18:52,429
strange compile failure that only

00:18:50,059 --> 00:18:56,179
happened this is this is a current issue

00:18:52,429 --> 00:18:59,929
actually it only happens if GCC is run

00:18:56,179 --> 00:19:02,450
under G lipsy to 16 and it happens

00:18:59,929 --> 00:19:03,830
randomly and it's not a memory error

00:19:02,450 --> 00:19:06,769
because I would see that indeed

00:19:03,830 --> 00:19:10,039
diagnostics begin its its ECC memory and

00:19:06,769 --> 00:19:13,279
all that and it also only happens if i

00:19:10,039 --> 00:19:16,009
compile using the set up g lipsy itself

00:19:13,279 --> 00:19:17,419
or jesusÃ­ itself if I stress test the

00:19:16,009 --> 00:19:19,549
colonel compile this doesn't have a

00:19:17,419 --> 00:19:26,299
minute haven't yet figured out wider

00:19:19,549 --> 00:19:27,950
this an extra problem is the latin see

00:19:26,299 --> 00:19:32,720
with the build service as you all know

00:19:27,950 --> 00:19:37,279
its britain and pearl there it also

00:19:32,720 --> 00:19:39,500
embeds the sips oval which is in c++ but

00:19:37,279 --> 00:19:44,570
there's still a lot of perl code in

00:19:39,500 --> 00:19:49,940
there and that executes even more slowly

00:19:44,570 --> 00:19:54,110
than on x86 and an additional problem is

00:19:49,940 --> 00:19:57,169
the network latency at first I made

00:19:54,110 --> 00:19:59,450
package links the underscore link to

00:19:57,169 --> 00:20:02,450
factory using build servers remote

00:19:59,450 --> 00:20:04,610
linkage and that meant on every cold

00:20:02,450 --> 00:20:06,409
start of the scheduler all the

00:20:04,610 --> 00:20:09,320
architectures that I had started the

00:20:06,409 --> 00:20:12,679
scheduler for would download or would

00:20:09,320 --> 00:20:15,590
request more than 8,000 meter data

00:20:12,679 --> 00:20:19,159
requests to the upstream build server

00:20:15,590 --> 00:20:23,120
that's located in earn back and so I had

00:20:19,159 --> 00:20:27,950
about a cold start delay of 30 minutes

00:20:23,120 --> 00:20:30,649
45 minutes formerly 8000 packages I that

00:20:27,950 --> 00:20:33,620
wasn't going very well so eventually i

00:20:30,649 --> 00:20:39,019
replaced everything by importing whole

00:20:33,620 --> 00:20:42,639
sources whole source packages and that

00:20:39,019 --> 00:20:42,639
went sort of a way with that

00:20:43,920 --> 00:20:53,770
so here's a little okay so the last

00:20:50,710 --> 00:20:56,710
successful build I have is an 11-point

00:20:53,770 --> 00:20:59,050
free image there should be about 3,000

00:20:56,710 --> 00:21:02,470
binary rpms somewhere in that ballpark

00:20:59,050 --> 00:21:05,200
as I said many packages compiled fine

00:21:02,470 --> 00:21:08,440
without any modifications some needed

00:21:05,200 --> 00:21:12,160
our extra patches contacting the

00:21:08,440 --> 00:21:16,420
developers for example mano has had some

00:21:12,160 --> 00:21:20,260
strange source code issue where a macro

00:21:16,420 --> 00:21:22,900
wasn't defined or not probably properly

00:21:20,260 --> 00:21:26,740
tested so that it wouldn't build on the

00:21:22,900 --> 00:21:30,610
v9 but that has been sorted out other

00:21:26,740 --> 00:21:32,770
problems include very big toolkits java

00:21:30,610 --> 00:21:38,740
for example i didn't get compiled at all

00:21:32,770 --> 00:21:44,140
because at that time the open G it just

00:21:38,740 --> 00:21:48,210
didn't work you know about thank you

00:21:44,140 --> 00:21:52,630
what architecture for our my belief mmm

00:21:48,210 --> 00:21:54,460
yeah I hope that language dies so

00:21:52,630 --> 00:21:58,110
currently i'm in the process of getting

00:21:54,460 --> 00:22:03,220
a 12.2 the sub-project known as base

00:21:58,110 --> 00:22:05,920
colon build built out with most welcome

00:22:03,220 --> 00:22:09,520
all Adam mostly with success as I said G

00:22:05,920 --> 00:22:14,500
lipsy and GCC currently fail which is

00:22:09,520 --> 00:22:19,870
sort of bad and now I have here the demo

00:22:14,500 --> 00:22:22,150
of the installed system that I have so

00:22:19,870 --> 00:22:24,100
from the bootloader it will read a a

00:22:22,150 --> 00:22:28,120
small boot sector from the disk and so

00:22:24,100 --> 00:22:34,090
on and then you get the sea lo

00:22:28,120 --> 00:22:38,010
bootloader which is um not based on lido

00:22:34,090 --> 00:22:40,870
it's just spark and proof loader and

00:22:38,010 --> 00:22:42,910
that then can load kernels of any size

00:22:40,870 --> 00:22:48,970
so if you have a hard disk you can boot

00:22:42,910 --> 00:22:51,010
the machine it's not dead iron yet I can

00:22:48,970 --> 00:22:52,720
boot from network if Colonel and you

00:22:51,010 --> 00:22:55,040
need our day together are less than 10

00:22:52,720 --> 00:22:58,040
megabytes which is

00:22:55,040 --> 00:22:58,040
from

00:23:01,120 --> 00:23:05,710
yabuta has a limit of 26 megabytes a

00:23:04,210 --> 00:23:08,110
belief wasn't source code it still

00:23:05,710 --> 00:23:12,340
wasn't enough I tried to raise the yeah

00:23:08,110 --> 00:23:20,320
but-- limit to 64 megabytes and this is

00:23:12,340 --> 00:23:22,540
cee lo yes it uses open film firmware

00:23:20,320 --> 00:23:24,910
like a boot to download the image the

00:23:22,540 --> 00:23:29,070
problem is if I remember correctly that

00:23:24,910 --> 00:23:31,390
the firmware only allocates region of a

00:23:29,070 --> 00:23:35,890
handful of megabytes 10 megabytes in

00:23:31,390 --> 00:23:38,830
case of spark and if you need more you

00:23:35,890 --> 00:23:41,700
probably need to install extra page

00:23:38,830 --> 00:23:44,620
tables or something in that kind so I

00:23:41,700 --> 00:23:48,990
look forward to trying grub to seeing if

00:23:44,620 --> 00:23:48,990
it can do that also on TV see

00:23:53,890 --> 00:23:58,570
I could but unfortunately i'm not that

00:23:56,500 --> 00:24:02,700
versed in the law all of the hard work

00:23:58,570 --> 00:24:05,230
programming yet as you can see i

00:24:02,700 --> 00:24:09,400
actually do open through the peg

00:24:05,230 --> 00:24:10,930
addressed very much so there is a check

00:24:09,400 --> 00:24:13,810
force because i just resetted the

00:24:10,930 --> 00:24:20,830
machine before to do the demo so we

00:24:13,810 --> 00:24:24,340
can't see anything on that yet so the

00:24:20,830 --> 00:24:28,870
repository URL is there and i also have

00:24:24,340 --> 00:24:31,570
a almost empty page on black eres de

00:24:28,870 --> 00:24:34,260
that's the code name I chose for the

00:24:31,570 --> 00:24:34,260
small project

00:24:45,950 --> 00:24:54,169
okay that doesn't work and that would be

00:24:50,260 --> 00:25:08,539
so far the end are there any questions

00:24:54,169 --> 00:25:10,279
or contributions donations displeased my

00:25:08,539 --> 00:25:12,260
question would be so you are running a

00:25:10,279 --> 00:25:15,980
private bill service instance if I write

00:25:12,260 --> 00:25:19,460
because the non-bank server doesn't have

00:25:15,980 --> 00:25:21,080
anyone has work I run at the schedule so

00:25:19,460 --> 00:25:23,899
my question is can we actually see the

00:25:21,080 --> 00:25:27,470
build failures for your architectures so

00:25:23,899 --> 00:25:30,860
yes if I mean is it publicly visible der

00:25:27,470 --> 00:25:33,620
Bilt service instance unfortunately not

00:25:30,860 --> 00:25:37,279
because i meanwhile i also have used the

00:25:33,620 --> 00:25:41,840
this instance for projects of my

00:25:37,279 --> 00:25:44,659
employer and the rights management of

00:25:41,840 --> 00:25:49,010
build service 2.1 wasn't yet their way I

00:25:44,659 --> 00:25:52,970
wanted it to be okay but I can give out

00:25:49,010 --> 00:25:55,490
any logs and the RPM packages are also

00:25:52,970 --> 00:25:57,590
up there yeah and I'm just asking

00:25:55,490 --> 00:25:59,450
because sometimes forearm it's quite

00:25:57,590 --> 00:26:02,149
interesting to see if it fails also on

00:25:59,450 --> 00:26:05,029
power orange park so we often see a

00:26:02,149 --> 00:26:07,460
pattern that and it helps often to find

00:26:05,029 --> 00:26:10,549
a problem and maybe if it builds on

00:26:07,460 --> 00:26:12,320
power of you know okay for example Dina

00:26:10,549 --> 00:26:13,880
has already found a problem fixed it and

00:26:12,320 --> 00:26:16,519
it's much easier to fix it in for

00:26:13,880 --> 00:26:18,320
another architecture as well usually so

00:26:16,519 --> 00:26:20,659
some kind of collaboration would be

00:26:18,320 --> 00:26:22,279
probably nice yeah I have worked

00:26:20,659 --> 00:26:24,260
together with David Miller who's the

00:26:22,279 --> 00:26:27,200
maintainer of the spork kernel port and

00:26:24,260 --> 00:26:30,590
he has been very helpful in dealing with

00:26:27,200 --> 00:26:34,220
some of the bugs one for example was

00:26:30,590 --> 00:26:36,679
that Souza defaults to bind now which

00:26:34,220 --> 00:26:39,559
was just wasn't implemented in the more

00:26:36,679 --> 00:26:44,980
recent G lipsy and it was like souza

00:26:39,559 --> 00:26:44,980
what are you doing Jessie thanks

00:26:55,350 --> 00:26:58,870
it's that thing that's really pressing

00:26:57,309 --> 00:27:03,220
me all the time and I'm still wondering

00:26:58,870 --> 00:27:05,019
um the why do you do you want to revive

00:27:03,220 --> 00:27:07,539
your old hardware to actually won

00:27:05,019 --> 00:27:08,980
something useful on it or is it more of

00:27:07,539 --> 00:27:13,889
a hobby project to learn how all that

00:27:08,980 --> 00:27:17,950
well all that works yeah it's a hobby to

00:27:13,889 --> 00:27:20,350
be a little exotic on architectures so

00:27:17,950 --> 00:27:24,100
almost nobody has spark hardware lying

00:27:20,350 --> 00:27:29,230
around and you de Souza spark world had

00:27:24,100 --> 00:27:32,440
languished since the last release and so

00:27:29,230 --> 00:27:35,830
yeah so you're not using any spark

00:27:32,440 --> 00:27:37,630
hardware in production well I use this

00:27:35,830 --> 00:27:39,970
machine in production so to speak it's

00:27:37,630 --> 00:27:42,639
build servers for our for my employer as

00:27:39,970 --> 00:27:45,399
well okay that's because there are some

00:27:42,639 --> 00:27:46,929
people still using spug in in space

00:27:45,399 --> 00:27:48,909
missions and stuff so that actually is

00:27:46,929 --> 00:27:51,700
some use case for for building and spa

00:27:48,909 --> 00:27:54,970
yes I've i think the space missions that

00:27:51,700 --> 00:27:57,639
you're talking about use it 32-bit lay

00:27:54,970 --> 00:28:01,480
on processor which isn't targeted by any

00:27:57,639 --> 00:28:05,610
current distribution simply because ad

00:28:01,480 --> 00:28:08,080
hardware is virtually non-existent and

00:28:05,610 --> 00:28:11,620
second all the maintainer have stepped

00:28:08,080 --> 00:28:15,220
off the spark 32 kernel port which is

00:28:11,620 --> 00:28:20,230
also because the old hardware just like

00:28:15,220 --> 00:28:22,480
early 386 s had a lot of hardware

00:28:20,230 --> 00:28:29,220
problems didn't have all the discovery

00:28:22,480 --> 00:28:32,049
of devices and so on ok so I do

00:28:29,220 --> 00:28:35,529
tinkering with exotic architectures as

00:28:32,049 --> 00:28:39,399
well i also have I tried and I succeeded

00:28:35,529 --> 00:28:42,789
part way are rebuilding the PPC part of

00:28:39,399 --> 00:28:46,710
opensuse to do an experiment with this

00:28:42,789 --> 00:28:49,929
duality meanwhile the PPC machine died

00:28:46,710 --> 00:28:51,340
we actually have full PPC build server

00:28:49,929 --> 00:28:53,740
support now so you can be yes but you

00:28:51,340 --> 00:28:55,690
don't shift the ppc64 on the build

00:28:53,740 --> 00:28:57,669
service first and just build everything

00:28:55,690 --> 00:28:59,620
on the public build service on your own

00:28:57,669 --> 00:29:03,370
because all the machines are publicly

00:28:59,620 --> 00:29:04,809
usable now I know budget you can build

00:29:03,370 --> 00:29:06,309
your own repo on the

00:29:04,809 --> 00:29:08,169
on the public build service and just

00:29:06,309 --> 00:29:16,679
build whatever you like there yes but

00:29:08,169 --> 00:29:16,679
the it's often congested sometimes yeah

00:29:34,800 --> 00:29:36,860

YouTube URL: https://www.youtube.com/watch?v=vjGCQ2WI-xM


