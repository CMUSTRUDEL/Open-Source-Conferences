Title: Plugin Oriented Programming
Publication date: 2020-05-27
Playlist: openSUSE Virtual Summit 2020
Description: 
	Limitless Potential: Using Modularity in Programming to Spur and Sustain Open Source Innovation 

Slides ►https://bit.ly/3cdonna
Intro to Plugin Oriented Programming ►https://pop-book.readthedocs.io/en/latest/

Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,030 --> 00:00:08,250
okay I'll just dive in then okay

00:00:05,270 --> 00:00:10,530
so plugin oriented programming is a very

00:00:08,250 --> 00:00:13,530
new concept and a concept that again I'm

00:00:10,530 --> 00:00:17,070
assuming is is new to the folks inside

00:00:13,530 --> 00:00:18,920
of this call it's we've been talking

00:00:17,070 --> 00:00:22,109
about it only if only for a few months

00:00:18,920 --> 00:00:25,949
and we've got insults tack has produced

00:00:22,109 --> 00:00:28,529
a number of open source projects using

00:00:25,949 --> 00:00:30,090
plugin oriented programming and we're

00:00:28,529 --> 00:00:33,420
really we're really just loving it so

00:00:30,090 --> 00:00:38,300
far so otherwise I would be talking

00:00:33,420 --> 00:00:41,820
about it would be handy backpedaling so

00:00:38,300 --> 00:00:47,370
plugin oriented programming I created it

00:00:41,820 --> 00:00:49,230
because well I created it because I

00:00:47,370 --> 00:00:52,110
began to see a lot of problems and

00:00:49,230 --> 00:00:54,030
burdens with maintaining open source

00:00:52,110 --> 00:00:58,170
code especially open source code as it

00:00:54,030 --> 00:01:02,039
becomes larger and taking a good hard

00:00:58,170 --> 00:01:04,700
look at scaling open source development

00:01:02,039 --> 00:01:08,100
and distributing open source development

00:01:04,700 --> 00:01:11,100
recently lenez Torvalds had this

00:01:08,100 --> 00:01:13,260
fantastic quote where he said I don't

00:01:11,100 --> 00:01:16,619
develop anymore my job is really just to

00:01:13,260 --> 00:01:21,180
tell people no as he explained to a

00:01:16,619 --> 00:01:24,990
reporter recently that what he does

00:01:21,180 --> 00:01:27,330
write his life isn't to produce software

00:01:24,990 --> 00:01:30,689
his life is to review other people's

00:01:27,330 --> 00:01:37,079
code and deal with a very large

00:01:30,689 --> 00:01:38,610
community and we therefore have one of

00:01:37,079 --> 00:01:43,649
the world's best software engineers who

00:01:38,610 --> 00:01:47,250
have been reduced to just basically

00:01:43,649 --> 00:01:50,970
herding cats which I have to admit I

00:01:47,250 --> 00:01:54,590
don't think is a fantastic reward for

00:01:50,970 --> 00:02:01,649
someone being as prolific and capable as

00:01:54,590 --> 00:02:06,750
Linus and so can we progress and so when

00:02:01,649 --> 00:02:11,310
I looked at what I had created with pop

00:02:06,750 --> 00:02:13,240
I realized that plugin oriented

00:02:11,310 --> 00:02:15,130
programming made it so that

00:02:13,240 --> 00:02:19,740
it became very very easy to create a

00:02:15,130 --> 00:02:23,370
software platform that someone else can

00:02:19,740 --> 00:02:27,250
extend and modify but they can do it

00:02:23,370 --> 00:02:30,640
externally they don't have to give me

00:02:27,250 --> 00:02:33,010
code to review they can modify it

00:02:30,640 --> 00:02:36,670
themselves very very easily through this

00:02:33,010 --> 00:02:41,110
universal plugin layer that's far more

00:02:36,670 --> 00:02:43,810
powerful I inclusive than plug-in layers

00:02:41,110 --> 00:02:48,280
that are you know just plug-in layers

00:02:43,810 --> 00:02:51,910
and so I realized that I'd be able to

00:02:48,280 --> 00:02:54,100
create software platforms where I didn't

00:02:51,910 --> 00:02:57,520
need to review everybody else's code all

00:02:54,100 --> 00:03:01,270
of the time and then my blessing on that

00:02:57,520 --> 00:03:05,500
code isn't what makes that code good or

00:03:01,270 --> 00:03:07,810
bad what the contributor is able to do

00:03:05,500 --> 00:03:11,050
is independently write software that

00:03:07,810 --> 00:03:13,720
augments and extends a platform another

00:03:11,050 --> 00:03:15,910
developer has produced and their

00:03:13,720 --> 00:03:18,970
extensions and augmentations to that

00:03:15,910 --> 00:03:21,180
platform are able to gain merit on their

00:03:18,970 --> 00:03:25,630
own and in their own right but also

00:03:21,180 --> 00:03:27,790
seamlessly merge into into other pieces

00:03:25,630 --> 00:03:31,570
of software and subsequently be

00:03:27,790 --> 00:03:35,860
seamlessly merger Bowl into future

00:03:31,570 --> 00:03:39,910
pieces of software and so as we move

00:03:35,860 --> 00:03:42,070
forward one of the things that I'm

00:03:39,910 --> 00:03:44,140
excited about is we've already even

00:03:42,070 --> 00:03:47,260
though pop was a pop was announced last

00:03:44,140 --> 00:03:47,890
November and even though pop is not very

00:03:47,260 --> 00:03:50,290
old

00:03:47,890 --> 00:03:53,500
on the next slide I've got a great quote

00:03:50,290 --> 00:03:55,840
from Daniel Robbins Daniel Robbins who

00:03:53,500 --> 00:03:59,590
has become a good friend just over the

00:03:55,840 --> 00:04:02,560
last few months has started to

00:03:59,590 --> 00:04:05,830
incorporate the use of pot in many of

00:04:02,560 --> 00:04:07,930
the core tools that are used by the fun

00:04:05,830 --> 00:04:11,590
tube project and subsequently also by

00:04:07,930 --> 00:04:13,360
the Gentoo project and I love what he

00:04:11,590 --> 00:04:15,280
says when he said pop is becoming a

00:04:13,360 --> 00:04:17,950
virus because it's taking over my code

00:04:15,280 --> 00:04:19,420
and killing off weak patterns I have a

00:04:17,950 --> 00:04:20,980
lot of code that sort of reached its

00:04:19,420 --> 00:04:23,350
potential with my modules and classes

00:04:20,980 --> 00:04:26,400
and was just sitting there waiting for

00:04:23,350 --> 00:04:26,400
something like this

00:04:27,050 --> 00:04:38,190
so pop again introduces a new paradigm a

00:04:31,200 --> 00:04:41,310
new approach and really a whole new way

00:04:38,190 --> 00:04:44,490
of writing software which again even in

00:04:41,310 --> 00:04:47,550
the last few months since we announced

00:04:44,490 --> 00:04:49,740
it in November we've got a significant

00:04:47,550 --> 00:04:53,280
number of projects that saltstack has

00:04:49,740 --> 00:04:56,640
created but also we're already starting

00:04:53,280 --> 00:05:01,320
to see it emerge in a few influential

00:04:56,640 --> 00:05:06,420
places ok can we advance the slide

00:05:01,320 --> 00:05:08,610
please thank you so Who am I why should

00:05:06,420 --> 00:05:11,040
you bother listening to me I think that

00:05:08,610 --> 00:05:14,130
that's a valid question my name is

00:05:11,040 --> 00:05:17,730
Thomas hatch I am the creator of salt

00:05:14,130 --> 00:05:19,110
and the founder of salt stack I also

00:05:17,730 --> 00:05:21,350
used to work for the US intelligence

00:05:19,110 --> 00:05:23,220
community has I've spent my career

00:05:21,350 --> 00:05:25,980
building and automating some of the

00:05:23,220 --> 00:05:27,510
world's largest infrastructures I have

00:05:25,980 --> 00:05:30,210
helped build and consult on

00:05:27,510 --> 00:05:33,320
infrastructures that are backing some of

00:05:30,210 --> 00:05:33,320
the world's largest clouds

00:05:33,390 --> 00:05:38,450
some of the world's largest financial

00:05:34,620 --> 00:05:41,400
institutions and online retailers and

00:05:38,450 --> 00:05:44,490
I'm very accustomed to building very

00:05:41,400 --> 00:05:46,680
large pieces of software also from the

00:05:44,490 --> 00:05:49,770
perspective of large open source

00:05:46,680 --> 00:05:51,090
communities the salt community is still

00:05:49,770 --> 00:05:53,130
one of the largest open source

00:05:51,090 --> 00:05:56,780
communities in the world and much of

00:05:53,130 --> 00:05:59,730
what I put into pop is learning from

00:05:56,780 --> 00:06:03,630
managing and working with an extremely

00:05:59,730 --> 00:06:05,880
large open source community and so

00:06:03,630 --> 00:06:08,090
hopefully as I stand in front of you and

00:06:05,880 --> 00:06:11,100
say I invented a programming paradigm

00:06:08,090 --> 00:06:13,830
I've got hopefully just just enough

00:06:11,100 --> 00:06:17,000
credibility that it's worth listening to

00:06:13,830 --> 00:06:19,640
a madman who made a programming paradigm

00:06:17,000 --> 00:06:23,730
can we advance the slide please

00:06:19,640 --> 00:06:26,010
ok so if we take a brief look at the

00:06:23,730 --> 00:06:29,520
history of computing and I'm going to

00:06:26,010 --> 00:06:32,400
make this as brief as possible early

00:06:29,520 --> 00:06:38,070
software was really developed to do math

00:06:32,400 --> 00:06:39,330
and if we go back into the 60s build the

00:06:38,070 --> 00:06:41,909
the building of

00:06:39,330 --> 00:06:46,590
the world's first to lose term operating

00:06:41,909 --> 00:06:50,210
systems UNIX came about at the end of

00:06:46,590 --> 00:06:53,520
the 60s and matured in the early 70s and

00:06:50,210 --> 00:06:56,969
with it we got the UNIX philosophy now

00:06:53,520 --> 00:07:00,740
at that time software was interacted

00:06:56,969 --> 00:07:03,990
with through a shell almost entirely and

00:07:00,740 --> 00:07:06,930
the for a programming paradigm

00:07:03,990 --> 00:07:09,060
perspective what we were looking at was

00:07:06,930 --> 00:07:14,039
procedural and functional programming

00:07:09,060 --> 00:07:17,310
largely if almost completely and that

00:07:14,039 --> 00:07:21,419
the UNIX philosophy became a really

00:07:17,310 --> 00:07:23,699
fantastic way to write software in that

00:07:21,419 --> 00:07:25,770
we were able to make pieces of software

00:07:23,699 --> 00:07:27,810
that you could chain together because of

00:07:25,770 --> 00:07:31,020
the simplicity of the concept of a shell

00:07:27,810 --> 00:07:35,550
as that base interface that we're

00:07:31,020 --> 00:07:38,490
working with but as we enter into the

00:07:35,550 --> 00:07:41,550
late 80s and the 90s we have the rise of

00:07:38,490 --> 00:07:43,020
the GUI and with the rise of the GUI we

00:07:41,550 --> 00:07:43,860
have the rise of object-oriented

00:07:43,020 --> 00:07:45,090
programming

00:07:43,860 --> 00:07:47,300
now of course object-oriented

00:07:45,090 --> 00:07:50,250
programming was developed before the GUI

00:07:47,300 --> 00:07:52,340
but the Gili is really when we started

00:07:50,250 --> 00:07:56,699
to see object-oriented programming

00:07:52,340 --> 00:07:59,849
become very very widely used and the

00:07:56,699 --> 00:08:03,900
push for the desktop application era of

00:07:59,849 --> 00:08:06,440
the desktop application as it emerged in

00:08:03,900 --> 00:08:11,129
the early 90s and evolved through the

00:08:06,440 --> 00:08:12,629
mid-2000s really that became that

00:08:11,129 --> 00:08:18,000
dominant paradigm and this is where we

00:08:12,629 --> 00:08:22,050
see the evolution of Java and QT and GUI

00:08:18,000 --> 00:08:23,909
toolkits but also windows and the Mart

00:08:22,050 --> 00:08:27,960
and the dominance of Windows as a

00:08:23,909 --> 00:08:30,240
provider of that platform for graphical

00:08:27,960 --> 00:08:32,339
applications it's also the time where we

00:08:30,240 --> 00:08:35,729
used to say every year this will be the

00:08:32,339 --> 00:08:39,089
year of the Linux desktop something

00:08:35,729 --> 00:08:41,130
which I still be mone that KDE has not

00:08:39,089 --> 00:08:43,279
achieved the dominance that I feel it

00:08:41,130 --> 00:08:43,279
deserves

00:08:44,120 --> 00:08:48,779
so with this though object-oriented

00:08:47,100 --> 00:08:51,540
programming became very dominant and

00:08:48,779 --> 00:08:52,830
that was the focus of a sigh again a

00:08:51,540 --> 00:08:55,500
huge amount

00:08:52,830 --> 00:08:58,110
of software engineering but the modern

00:08:55,500 --> 00:09:01,110
world as it has evolved in the last ten

00:08:58,110 --> 00:09:05,700
to fifteen years has seen a shift to

00:09:01,110 --> 00:09:08,940
sass and a dramatic shift into leaning

00:09:05,700 --> 00:09:11,220
in to open source software if it wasn't

00:09:08,940 --> 00:09:14,310
for open source software the platform's

00:09:11,220 --> 00:09:19,170
of today would we certainly would not be

00:09:14,310 --> 00:09:21,600
able to create them and so I feel as

00:09:19,170 --> 00:09:23,940
though there are new challenges that we

00:09:21,600 --> 00:09:26,130
need to approach and new ways of

00:09:23,940 --> 00:09:28,200
thinking about software the very way in

00:09:26,130 --> 00:09:30,240
which we develop software has changed so

00:09:28,200 --> 00:09:33,480
dramatically in the last ten years that

00:09:30,240 --> 00:09:36,180
we no longer think of software as a

00:09:33,480 --> 00:09:38,610
single office full of engineers who are

00:09:36,180 --> 00:09:40,980
working on monoliths but we think of

00:09:38,610 --> 00:09:43,620
software following many of the

00:09:40,980 --> 00:09:45,540
principles of the UNIX philosophy lots

00:09:43,620 --> 00:09:47,250
of small pieces of software which

00:09:45,540 --> 00:09:51,740
hopefully have beneficial to one another

00:09:47,250 --> 00:09:56,900
and this again is my motivation behind

00:09:51,740 --> 00:09:59,910
pop-can we advance the slide please and

00:09:56,900 --> 00:10:02,160
so object-oriented programming has

00:09:59,910 --> 00:10:04,830
limitations when it comes to scaling

00:10:02,160 --> 00:10:06,570
software it becomes very difficult when

00:10:04,830 --> 00:10:10,050
you have large object-oriented

00:10:06,570 --> 00:10:12,510
programming applications to hand those

00:10:10,050 --> 00:10:14,960
applications off to new maintainer and

00:10:12,510 --> 00:10:18,510
to share the load of maintainer ship

00:10:14,960 --> 00:10:22,100
therefore it's very good at and focuses

00:10:18,510 --> 00:10:25,650
on building proprietary style monoliths

00:10:22,100 --> 00:10:27,780
when I say proprietary style I also want

00:10:25,650 --> 00:10:31,500
to mention the fact that proprietary

00:10:27,780 --> 00:10:33,060
style monoliths are also have emerged an

00:10:31,500 --> 00:10:35,340
open source especially over the last

00:10:33,060 --> 00:10:38,370
decade as we've seen significant

00:10:35,340 --> 00:10:41,190
investments from venture capital as well

00:10:38,370 --> 00:10:43,650
as corporate investments flow into open

00:10:41,190 --> 00:10:46,680
source software we've seen more open

00:10:43,650 --> 00:10:51,120
source software platforms become large

00:10:46,680 --> 00:10:54,660
monoliths and leave the concepts of that

00:10:51,120 --> 00:10:56,550
UNIX philosophy behind another thing

00:10:54,660 --> 00:11:00,000
that I mentioned briefly before is that

00:10:56,550 --> 00:11:03,630
while I love contributions don't get me

00:11:00,000 --> 00:11:06,690
wrong but when you're having to process

00:11:03,630 --> 00:11:09,450
between 80 to 200 pull requests

00:11:06,690 --> 00:11:12,780
a day it becomes quite onerous and

00:11:09,450 --> 00:11:14,520
difficult to maintain quality of code it

00:11:12,780 --> 00:11:17,310
also becomes onerous and different and

00:11:14,520 --> 00:11:21,450
difficult to stay on top of the demands

00:11:17,310 --> 00:11:23,310
and needs of a large community even as

00:11:21,450 --> 00:11:25,440
you distribute that work among many

00:11:23,310 --> 00:11:28,830
contributors and over the years I've

00:11:25,440 --> 00:11:32,070
certainly seen this the probability of

00:11:28,830 --> 00:11:35,070
bad code getting into a project goes up

00:11:32,070 --> 00:11:39,030
and up and it becomes exponentially more

00:11:35,070 --> 00:11:40,890
difficult to maintain that PRQ testing

00:11:39,030 --> 00:11:44,580
of monolithic software has also become a

00:11:40,890 --> 00:11:46,770
serious issue we could talk for hours on

00:11:44,580 --> 00:11:50,640
end about large software projects that

00:11:46,770 --> 00:11:53,580
take hours sometimes literally days to

00:11:50,640 --> 00:11:56,460
test any change which slows down and

00:11:53,580 --> 00:11:59,370
impedes all of our attempts to release

00:11:56,460 --> 00:12:01,470
and deliver software quickly the last

00:11:59,370 --> 00:12:03,810
thing or the second last thing I wanted

00:12:01,470 --> 00:12:06,710
to mention is that back in 1974 there

00:12:03,810 --> 00:12:09,480
was this fantastic book that came out

00:12:06,710 --> 00:12:12,240
called the mythical man-month the

00:12:09,480 --> 00:12:14,910
mythical man-month suggested that you

00:12:12,240 --> 00:12:18,770
can't hire more engineers and get the

00:12:14,910 --> 00:12:22,050
same linear output of more engineers and

00:12:18,770 --> 00:12:25,080
I feel that plugin oriented programming

00:12:22,050 --> 00:12:27,450
can address this problem bifurcating and

00:12:25,080 --> 00:12:30,270
making applications smaller and merge

00:12:27,450 --> 00:12:32,190
about means that it's easier to take

00:12:30,270 --> 00:12:34,080
small groups of engineers to work on

00:12:32,190 --> 00:12:37,440
targeted applications and targeted

00:12:34,080 --> 00:12:40,140
components and those small groups can

00:12:37,440 --> 00:12:42,780
then bring those components together in

00:12:40,140 --> 00:12:45,780
a more seamless way that that approach

00:12:42,780 --> 00:12:47,520
should allow us to overcome the mythical

00:12:45,780 --> 00:12:50,130
man-month something which we still

00:12:47,520 --> 00:12:53,339
struggle with today and arguably in a

00:12:50,130 --> 00:12:56,790
much bigger way than when that book was

00:12:53,339 --> 00:12:59,010
published in 1974 and the last thing I

00:12:56,790 --> 00:13:01,140
want to mention here is that there's

00:12:59,010 --> 00:13:04,110
more to freedom I should change

00:13:01,140 --> 00:13:05,880
I shouldn't say freedom is the light is

00:13:04,110 --> 00:13:09,900
not a license I should say there's more

00:13:05,880 --> 00:13:11,670
to freedom than a license just because

00:13:09,900 --> 00:13:13,530
we make something open-source it doesn't

00:13:11,670 --> 00:13:16,589
necessarily mean that we deliver freedom

00:13:13,530 --> 00:13:19,080
to the developer in the last thirty

00:13:16,589 --> 00:13:20,220
years we've seen some open-source

00:13:19,080 --> 00:13:22,350
developers

00:13:20,220 --> 00:13:24,060
fantastic careers while I have to admit

00:13:22,350 --> 00:13:26,390
that the other on the other spectrum

00:13:24,060 --> 00:13:30,300
we've seen many open-source developers

00:13:26,390 --> 00:13:32,610
succumb to what can be described as

00:13:30,300 --> 00:13:35,340
nothing less than mental illness the

00:13:32,610 --> 00:13:37,260
amount of stress that we put on and the

00:13:35,340 --> 00:13:40,350
onus that we place on open-source

00:13:37,260 --> 00:13:44,250
developers in comparison to the rule to

00:13:40,350 --> 00:13:47,280
the reward often given is the opposite

00:13:44,250 --> 00:13:51,300
of freedom it is bondage by the means of

00:13:47,280 --> 00:13:53,490
their own creations and I fear that that

00:13:51,300 --> 00:13:56,070
is something which can have a seriously

00:13:53,490 --> 00:13:58,350
negative impact on our ability to

00:13:56,070 --> 00:14:01,200
sustain open-source in the long run if

00:13:58,350 --> 00:14:04,490
we have a way to write software that

00:14:01,200 --> 00:14:08,550
lowers the burden of maintainer ship and

00:14:04,490 --> 00:14:10,920
spreads the ability to extend and

00:14:08,550 --> 00:14:13,770
enhance software in a more independent

00:14:10,920 --> 00:14:15,990
fashion I feel that we can overcome many

00:14:13,770 --> 00:14:19,050
of the hurdles that we have ahead of us

00:14:15,990 --> 00:14:23,220
when it comes to maintaining extremely

00:14:19,050 --> 00:14:25,310
large software platforms next slide

00:14:23,220 --> 00:14:25,310
please

00:14:26,150 --> 00:14:31,050
so again the hope is that plugin

00:14:28,350 --> 00:14:33,390
oriented programming brings an answer to

00:14:31,050 --> 00:14:36,660
this that we are able to address the

00:14:33,390 --> 00:14:39,900
UNIX philosophy in a new way that we are

00:14:36,660 --> 00:14:42,780
able to approach software in a way in

00:14:39,900 --> 00:14:46,020
which we can always have softwares small

00:14:42,780 --> 00:14:48,870
compartmentalized individual testable

00:14:46,020 --> 00:14:52,680
components that are easily merged and

00:14:48,870 --> 00:14:54,600
combined with one another and that at

00:14:52,680 --> 00:14:56,280
the end of the day what we get is not

00:14:54,600 --> 00:14:58,770
only better software but also more

00:14:56,280 --> 00:15:01,340
freedom for the developers more

00:14:58,770 --> 00:15:04,530
flexibility from a business perspective

00:15:01,340 --> 00:15:07,080
as well as more flexibility and the

00:15:04,530 --> 00:15:11,660
ability to maintain software platforms

00:15:07,080 --> 00:15:11,660
in the long run next slide please

00:15:12,080 --> 00:15:18,060
so I want to revive the UNIX philosophy

00:15:15,710 --> 00:15:20,850
the first two things are basically

00:15:18,060 --> 00:15:23,490
unchanged we do one thing program does

00:15:20,850 --> 00:15:25,590
one thing and does it well next programs

00:15:23,490 --> 00:15:27,720
works together programs need to be

00:15:25,590 --> 00:15:30,330
written in such a way that they can

00:15:27,720 --> 00:15:33,180
communicate with one another in a

00:15:30,330 --> 00:15:35,460
completely standard way

00:15:33,180 --> 00:15:37,950
then finally the original UNIX

00:15:35,460 --> 00:15:40,170
philosophy said that we write programs

00:15:37,950 --> 00:15:42,660
that communicate over text it's because

00:15:40,170 --> 00:15:44,070
it's the universal interface my argument

00:15:42,660 --> 00:15:46,440
with plugin oriented programming is that

00:15:44,070 --> 00:15:49,950
now we can write programs that expose a

00:15:46,440 --> 00:15:51,960
consistent mirja belen tur face so that

00:15:49,950 --> 00:15:55,290
those applications can be completely

00:15:51,960 --> 00:15:57,410
merged one one with another next slide

00:15:55,290 --> 00:15:57,410
please

00:15:57,530 --> 00:16:03,690
so where did the idea of plug-in

00:16:00,480 --> 00:16:06,240
oriented programming come from so I

00:16:03,690 --> 00:16:09,200
wrote salt and inside of salt there's a

00:16:06,240 --> 00:16:13,560
concept called the salt loader its salts

00:16:09,200 --> 00:16:16,560
plug-in system and so a salt plug-in

00:16:13,560 --> 00:16:19,740
system allows you to have plugins in

00:16:16,560 --> 00:16:22,380
salt and only after the within the first

00:16:19,740 --> 00:16:23,670
few years of salt development we had

00:16:22,380 --> 00:16:25,710
many people who are coming back and

00:16:23,670 --> 00:16:28,680
saying that the flexibility and the

00:16:25,710 --> 00:16:30,150
power of salt plug-in system was really

00:16:28,680 --> 00:16:34,260
the biggest benefit that it was

00:16:30,150 --> 00:16:35,550
delivering and I thought that it was

00:16:34,260 --> 00:16:37,380
really interesting that people were

00:16:35,550 --> 00:16:39,960
gravitating towards what I hadn't given

00:16:37,380 --> 00:16:41,130
a whole lot of stock at first and so I

00:16:39,960 --> 00:16:43,530
thought to myself what would it look

00:16:41,130 --> 00:16:48,540
like if I built a standalone plug-in

00:16:43,530 --> 00:16:52,200
system and so I basically forked the

00:16:48,540 --> 00:16:55,170
salt loader and create a plug-in system

00:16:52,200 --> 00:16:57,540
and thought hey this is really nice this

00:16:55,170 --> 00:17:00,210
is a good idea now that I'm not trying

00:16:57,540 --> 00:17:01,590
to support the concepts inside of salt I

00:17:00,210 --> 00:17:05,520
can actually break some things and

00:17:01,590 --> 00:17:07,230
improve some things so I made a new

00:17:05,520 --> 00:17:09,750
plug-in system and didn't like it and

00:17:07,230 --> 00:17:12,500
then re implemented the idea in a number

00:17:09,750 --> 00:17:15,270
of different programming languages and

00:17:12,500 --> 00:17:17,550
eventually I wrote it in Julia and when

00:17:15,270 --> 00:17:21,120
I wrote it in Julia my eyes were opened

00:17:17,550 --> 00:17:22,800
in a lot of different ways and so then I

00:17:21,120 --> 00:17:26,400
came back and reimplemented it from

00:17:22,800 --> 00:17:28,980
scratch in Python again at which point

00:17:26,400 --> 00:17:30,600
was when I realized that I had actually

00:17:28,980 --> 00:17:32,670
created a programming paradigm through

00:17:30,600 --> 00:17:35,670
my journey of just trying to make a

00:17:32,670 --> 00:17:37,920
really cool plug-in system I realized

00:17:35,670 --> 00:17:40,440
that what I had produced was a paradigm

00:17:37,920 --> 00:17:42,300
I didn't set out to build the

00:17:40,440 --> 00:17:45,720
programming paradigm the programming

00:17:42,300 --> 00:17:49,470
paradigm is is what I ended up with

00:17:45,720 --> 00:17:52,380
as I created a platform where 100% of

00:17:49,470 --> 00:17:55,230
the software can be pluggable and then I

00:17:52,380 --> 00:17:59,970
realized that not only was it a paradigm

00:17:55,230 --> 00:18:03,000
but it was also a paradigm which frankly

00:17:59,970 --> 00:18:04,980
and arguably I think is much easier to

00:18:03,000 --> 00:18:09,510
learn than object-oriented programming

00:18:04,980 --> 00:18:11,640
much easier to follow and creates much

00:18:09,510 --> 00:18:15,150
more made much more maintainable code

00:18:11,640 --> 00:18:18,710
and enforces that all code maintains

00:18:15,150 --> 00:18:22,440
plug ability on the next slide please

00:18:18,710 --> 00:18:26,730
and so if we start with a plugin

00:18:22,440 --> 00:18:29,490
oriented programming project you first

00:18:26,730 --> 00:18:31,169
install pop so pop is an application and

00:18:29,490 --> 00:18:34,950
that you can install via pi PI

00:18:31,169 --> 00:18:38,900
all your standard Python goodness is in

00:18:34,950 --> 00:18:43,650
place it requires Python 3.6 or higher

00:18:38,900 --> 00:18:46,070
currently and once you install pop you

00:18:43,650 --> 00:18:49,440
get a little application called pop C

00:18:46,070 --> 00:18:54,150
pop seed sets up the basic structure of

00:18:49,440 --> 00:18:58,590
a pop project now in doing so 90% of

00:18:54,150 --> 00:19:01,230
that structure is setting up a set up

00:18:58,590 --> 00:19:03,150
top I and just creating a few basic

00:19:01,230 --> 00:19:04,500
folders it still looks and feels like

00:19:03,150 --> 00:19:07,110
you're writing you know you're still

00:19:04,500 --> 00:19:09,900
writing software in Python and obviously

00:19:07,110 --> 00:19:11,880
the pop concepts and ecosystem are built

00:19:09,900 --> 00:19:13,710
to leverage the ecosystem and the

00:19:11,880 --> 00:19:17,100
capabilities that are already exist in

00:19:13,710 --> 00:19:20,340
Python one can think of plugin oriented

00:19:17,100 --> 00:19:23,580
programming in a similar way in that

00:19:20,340 --> 00:19:27,450
it's built on top of Python in a similar

00:19:23,580 --> 00:19:29,070
way that C++ is built on top of C if you

00:19:27,450 --> 00:19:32,270
pick what I would argue is the best

00:19:29,070 --> 00:19:35,360
language of the day and I'd pick Python

00:19:32,270 --> 00:19:39,480
we can have a debate about that later

00:19:35,360 --> 00:19:41,340
since it's a very difficult challenge so

00:19:39,480 --> 00:19:44,520
you run the pop scene application and it

00:19:41,340 --> 00:19:46,140
gives you a set up top hi that's nice

00:19:44,520 --> 00:19:48,120
and crisp and generic that will

00:19:46,140 --> 00:19:51,120
automatically detect everything that you

00:19:48,120 --> 00:19:53,400
put inside of your plugin inside of your

00:19:51,120 --> 00:19:57,630
pop project so it shouldn't need to be

00:19:53,400 --> 00:19:58,919
modified very much but it also sets up

00:19:57,630 --> 00:20:02,899
some hooks for

00:19:58,919 --> 00:20:04,950
running blackout project and it enables

00:20:02,899 --> 00:20:07,619
one of the other things that's really

00:20:04,950 --> 00:20:09,570
important here which is a new build

00:20:07,619 --> 00:20:13,220
system that we've got along with pop as

00:20:09,570 --> 00:20:13,220
well next slide please

00:20:17,330 --> 00:20:26,850
okay so pop seed lets you start but the

00:20:22,679 --> 00:20:28,619
next concept in here is I just touted

00:20:26,850 --> 00:20:32,009
that I've got a platform that you can

00:20:28,619 --> 00:20:35,730
have two completely separate apps that

00:20:32,009 --> 00:20:38,399
are 100% applications and you can

00:20:35,730 --> 00:20:43,470
seamlessly merge those applications

00:20:38,399 --> 00:20:45,570
together how does that work and so that

00:20:43,470 --> 00:20:48,600
works through two concepts that are

00:20:45,570 --> 00:20:54,619
really important one is configuration

00:20:48,600 --> 00:20:54,619
loading and another is app merging

00:20:54,710 --> 00:21:02,779
advanced likelies so if we want to be

00:21:00,899 --> 00:21:06,720
able to merge two applications together

00:21:02,779 --> 00:21:10,830
we have to be able to take care of and

00:21:06,720 --> 00:21:13,230
facilitate the mechanism for the startup

00:21:10,830 --> 00:21:16,559
of those applications so that if I write

00:21:13,230 --> 00:21:20,070
an application over here and it runs and

00:21:16,559 --> 00:21:22,529
has merit and objectivity on its own it

00:21:20,070 --> 00:21:24,869
needs to be able to be executed it means

00:21:22,529 --> 00:21:27,720
CLI options and all those things and

00:21:24,869 --> 00:21:29,609
I've got another application with zone

00:21:27,720 --> 00:21:32,429
options and I can merge them together

00:21:29,609 --> 00:21:37,019
onto a third application or merge or

00:21:32,429 --> 00:21:38,220
have one application that means means

00:21:37,019 --> 00:21:40,739
all the functionality of another

00:21:38,220 --> 00:21:44,549
application all of that configuration

00:21:40,739 --> 00:21:46,710
input needs to also be portable and so

00:21:44,549 --> 00:21:49,289
pop comes with a system called pop

00:21:46,710 --> 00:21:52,830
config that allows to merge application

00:21:49,289 --> 00:21:54,840
configuration dynamically without the

00:21:52,830 --> 00:21:57,359
developer having to frankly really do

00:21:54,840 --> 00:21:58,919
anything all they've got to do is say

00:21:57,359 --> 00:22:02,580
yeah I'm gonna merge with this other

00:21:58,919 --> 00:22:05,580
application and the CLI for the most

00:22:02,580 --> 00:22:08,129
part is dynamically generated the config

00:22:05,580 --> 00:22:10,080
loading is completely capable and all of

00:22:08,129 --> 00:22:11,960
your config information gets loaded into

00:22:10,080 --> 00:22:15,050
the new application

00:22:11,960 --> 00:22:17,150
support all merged applications now to

00:22:15,050 --> 00:22:18,860
build a CLI management system you've got

00:22:17,150 --> 00:22:21,260
a bunch of problems that are solved in

00:22:18,860 --> 00:22:23,750
pop config he's going to take options

00:22:21,260 --> 00:22:26,120
from the CLI from environment variables

00:22:23,750 --> 00:22:29,120
from config files and defaults they have

00:22:26,120 --> 00:22:30,520
to be loaded in the right order and then

00:22:29,120 --> 00:22:32,540
you want to be able to define

00:22:30,520 --> 00:22:34,070
documentation and all these things in a

00:22:32,540 --> 00:22:36,140
single place

00:22:34,070 --> 00:22:40,390
pop config does all that that's a whole

00:22:36,140 --> 00:22:40,390
other discussion next slide please

00:22:41,980 --> 00:22:48,680
the next concept is that if we're

00:22:45,800 --> 00:22:51,800
building applications I really felt a

00:22:48,680 --> 00:22:54,560
strong need to frankly try and put a

00:22:51,800 --> 00:22:58,570
nail in the coffin of how hard it is to

00:22:54,560 --> 00:23:00,740
deploy Python applications to end-users

00:22:58,570 --> 00:23:03,230
we're all very familiar with the fact

00:23:00,740 --> 00:23:06,020
that in Python it can be quite difficult

00:23:03,230 --> 00:23:09,470
to write an application and then deploy

00:23:06,020 --> 00:23:11,270
it to an end-user system because you're

00:23:09,470 --> 00:23:14,780
dependent on one version of Python they

00:23:11,270 --> 00:23:17,120
have installed what dependencies they

00:23:14,780 --> 00:23:20,540
have are important you have to share a

00:23:17,120 --> 00:23:24,140
very large set of dependencies with

00:23:20,540 --> 00:23:26,540
multiple other applications and so it

00:23:24,140 --> 00:23:29,480
can make it very cumbersome to deploy

00:23:26,540 --> 00:23:31,940
applications in Python as they grow and

00:23:29,480 --> 00:23:34,610
one of the big reasons I'm going to

00:23:31,940 --> 00:23:37,340
argue that go has done so well is

00:23:34,610 --> 00:23:40,970
because they are able to deploy these

00:23:37,340 --> 00:23:43,940
single binary applications now this has

00:23:40,970 --> 00:23:47,150
been attempted numerous times in Python

00:23:43,940 --> 00:23:50,390
to create single binary applications but

00:23:47,150 --> 00:23:54,080
there's always been a challenge with

00:23:50,390 --> 00:23:56,360
making a way that it's really generic -

00:23:54,080 --> 00:23:58,400
that is really generic to produce those

00:23:56,360 --> 00:24:01,970
binaries another thing that I would

00:23:58,400 --> 00:24:05,810
argue about Python binary build systems

00:24:01,970 --> 00:24:07,580
is that they generally requires a

00:24:05,810 --> 00:24:11,180
genuine generally require you to run

00:24:07,580 --> 00:24:13,790
them post install and they always end up

00:24:11,180 --> 00:24:17,620
with some silly caveat that makes things

00:24:13,790 --> 00:24:21,850
rather difficult and so for this reason

00:24:17,620 --> 00:24:24,029
we also have a tool called pop build

00:24:21,850 --> 00:24:30,419
advanced light please

00:24:24,029 --> 00:24:33,179
pop build is created in such a way that

00:24:30,419 --> 00:24:35,970
it leverages how Python packaging

00:24:33,179 --> 00:24:38,279
natively works in any way so that you

00:24:35,970 --> 00:24:42,240
can extend the Python packaging system

00:24:38,279 --> 00:24:46,350
and pip to be able to very very easily

00:24:42,240 --> 00:24:51,419
run pop build and spin out a binary of

00:24:46,350 --> 00:24:55,590
that of that Python project and that you

00:24:51,419 --> 00:25:00,029
don't need to modify that project so

00:24:55,590 --> 00:25:02,070
that it can run under using pop build so

00:25:00,029 --> 00:25:04,110
we've solved many of the problems that

00:25:02,070 --> 00:25:07,830
have persisted inside of pi installer

00:25:04,110 --> 00:25:10,289
with pop build we still use this pi

00:25:07,830 --> 00:25:14,610
installer because those guys do a

00:25:10,289 --> 00:25:16,559
fantastic job but again it makes it

00:25:14,610 --> 00:25:20,190
incredibly easy you can pick almost any

00:25:16,559 --> 00:25:22,500
Python project write an entry point for

00:25:20,190 --> 00:25:25,500
the project which is usually anywhere

00:25:22,500 --> 00:25:29,639
from two to four lines of Python run pop

00:25:25,500 --> 00:25:31,649
build and bam you get a working single

00:25:29,639 --> 00:25:36,570
binary that includes Python and is

00:25:31,649 --> 00:25:40,259
portable to two other distributions or

00:25:36,570 --> 00:25:49,379
other other platforms next slide please

00:25:40,259 --> 00:25:50,539
oh I already covered this so next slide

00:25:49,379 --> 00:25:54,360
please

00:25:50,539 --> 00:25:56,070
okay now I'm almost out of time and so

00:25:54,360 --> 00:25:58,679
the last thing that I want to mention is

00:25:56,070 --> 00:26:01,590
application merging so this is an

00:25:58,679 --> 00:26:04,710
introduction talk this isn't a big

00:26:01,590 --> 00:26:07,549
course on how to use plain oreo in

00:26:04,710 --> 00:26:10,559
programming but at merging comes in to

00:26:07,549 --> 00:26:12,299
two forms one is called vertical

00:26:10,559 --> 00:26:15,929
application merging another horizontal

00:26:12,299 --> 00:26:17,940
application version so horizontal

00:26:15,929 --> 00:26:20,659
application merging means that we take

00:26:17,940 --> 00:26:23,639
two applications and merge them together

00:26:20,659 --> 00:26:26,009
horizontally so to speak the other way

00:26:23,639 --> 00:26:28,740
is that you've got a plug-in subsystem

00:26:26,009 --> 00:26:31,490
and that plug-in subsystem or that

00:26:28,740 --> 00:26:35,549
collection of plugins can be extended by

00:26:31,490 --> 00:26:37,650
an external application and again if I

00:26:35,549 --> 00:26:39,660
have more time I would give you

00:26:37,650 --> 00:26:42,960
as a bunch of examples and

00:26:39,660 --> 00:26:46,050
demonstrations along these lines it

00:26:42,960 --> 00:26:48,000
seems that I tried to pack a little too

00:26:46,050 --> 00:26:49,800
much information into the time allotted

00:26:48,000 --> 00:26:53,460
I apologize I'm usually pretty good at

00:26:49,800 --> 00:26:54,930
not doing that if you are in if you are

00:26:53,460 --> 00:26:57,590
interested in plugin oriented

00:26:54,930 --> 00:26:57,590
programming

00:26:57,920 --> 00:27:04,200
there is a book that is available on

00:27:00,660 --> 00:27:07,170
read the docs that it's a it's a brief

00:27:04,200 --> 00:27:09,570
book it's about 50 pages that gives an

00:27:07,170 --> 00:27:11,820
overview of the ideas behind plugin

00:27:09,570 --> 00:27:15,720
oriented programming where the concept

00:27:11,820 --> 00:27:17,670
came from as well as how to use the core

00:27:15,720 --> 00:27:20,700
components of plugin Orion programming

00:27:17,670 --> 00:27:24,390
so that you can have a purging config

00:27:20,700 --> 00:27:29,850
merging plug-in building using pop build

00:27:24,390 --> 00:27:33,780
and coming to this ecosystem I tried to

00:27:29,850 --> 00:27:36,540
make it as brief a read as I could while

00:27:33,780 --> 00:27:38,790
conveying and getting across hey this is

00:27:36,540 --> 00:27:40,080
this is how to engage with plugin

00:27:38,790 --> 00:27:42,240
oriented programming i've already had

00:27:40,080 --> 00:27:43,770
quite a few folks who were working with

00:27:42,240 --> 00:27:46,800
us early on this book has only been out

00:27:43,770 --> 00:27:48,810
for about three weeks come back and be

00:27:46,800 --> 00:27:50,040
very very excited about the book it

00:27:48,810 --> 00:27:53,070
answers a lot of the questions that

00:27:50,040 --> 00:27:55,320
they've had again trying to bootstrap a

00:27:53,070 --> 00:27:58,260
programming paradigms kind of a mess but

00:27:55,320 --> 00:28:02,370
that's located a pop book dot read the

00:27:58,260 --> 00:28:04,770
docs dot IO as I'm out of time I'll ask

00:28:02,370 --> 00:28:07,170
does anybody have any questions comments

00:28:04,770 --> 00:28:10,610
arguments or rebuttals because I've

00:28:07,170 --> 00:28:10,610
thrown a doozy out there

00:28:16,300 --> 00:28:22,399
[Music]

00:28:18,759 --> 00:28:26,120
so we can all stay in this in this

00:28:22,399 --> 00:28:28,190
session here for the time for the time

00:28:26,120 --> 00:28:31,009
being because Thomas you you were the

00:28:28,190 --> 00:28:33,230
last speaker and that in the in the

00:28:31,009 --> 00:28:38,720
program we had so if anyone has a

00:28:33,230 --> 00:28:40,460
question go ahead and ask Thomas and if

00:28:38,720 --> 00:28:42,080
you want to continue we could also

00:28:40,460 --> 00:28:45,860
continue with your slides if you want

00:28:42,080 --> 00:28:48,830
it's still recording now I mean that's

00:28:45,860 --> 00:28:58,460
okay I don't know I don't want to over

00:28:48,830 --> 00:29:00,019
do anybody I've used my time I will I'm

00:28:58,460 --> 00:29:04,370
only quiet because I'm looking out the

00:29:00,019 --> 00:29:10,850
book this is very interesting very

00:29:04,370 --> 00:29:13,009
interesting proposal I like it yeah I

00:29:10,850 --> 00:29:15,860
appreciate that and really I mean my

00:29:13,009 --> 00:29:19,490
motivation here was that the the salt

00:29:15,860 --> 00:29:21,230
system works really well with lots of

00:29:19,490 --> 00:29:23,570
plug-in systems which is why we've got

00:29:21,230 --> 00:29:25,669
over 35 plug-in subsystems inside of

00:29:23,570 --> 00:29:30,080
salt and and I kept looking at it going

00:29:25,669 --> 00:29:34,129
I literally have 15 products inside of

00:29:30,080 --> 00:29:35,990
salt and as and from a development

00:29:34,129 --> 00:29:37,669
perspective a community perspective and

00:29:35,990 --> 00:29:41,029
a business perspective I keep looking at

00:29:37,669 --> 00:29:43,039
it going oh I wish that I'd broken all

00:29:41,029 --> 00:29:47,210
of these out I wish that I'd had a

00:29:43,039 --> 00:29:50,120
platform in a way of doing that and

00:29:47,210 --> 00:29:53,149
subsequently with with pop we've started

00:29:50,120 --> 00:29:54,679
to instead of thought stack who started

00:29:53,149 --> 00:29:56,929
to break a few those pieces out so

00:29:54,679 --> 00:29:59,779
grains for instance we've broken grains

00:29:56,929 --> 00:30:01,789
out we haven't taken it out of salt yet

00:29:59,779 --> 00:30:05,990
we're we're looking at doing that but

00:30:01,789 --> 00:30:08,480
we've created a mechanism with pop that

00:30:05,990 --> 00:30:10,669
makes it really easy to extend the

00:30:08,480 --> 00:30:12,139
grains system as it exists inside of

00:30:10,669 --> 00:30:13,909
salt we hope to get that and now in the

00:30:12,139 --> 00:30:17,179
upcoming sodium release of solvent in

00:30:13,909 --> 00:30:20,110
the magnesium release similarly there's

00:30:17,179 --> 00:30:22,940
a now a standalone version of the salt

00:30:20,110 --> 00:30:24,919
config management runtime which is

00:30:22,940 --> 00:30:26,629
actually got already become more feature

00:30:24,919 --> 00:30:27,919
'full then salts config management

00:30:26,629 --> 00:30:28,350
runtime even though I've been working on

00:30:27,919 --> 00:30:32,250
it for

00:30:28,350 --> 00:30:35,370
months I'm called item which is kind of

00:30:32,250 --> 00:30:37,320
short for idempotent so yeah I'm trying

00:30:35,370 --> 00:30:43,710
to prove the model instead of just

00:30:37,320 --> 00:30:45,470
peddling a blind model no it looks very

00:30:43,710 --> 00:30:50,220
interesting

00:30:45,470 --> 00:30:51,960
what's the the yarol the book the URL of

00:30:50,220 --> 00:30:55,350
the book is there chat in here

00:30:51,960 --> 00:30:59,700
no unfortunately there's a telegram

00:30:55,350 --> 00:31:04,760
channel that which might be better so it

00:30:59,700 --> 00:31:08,669
is pop - book dot read the docs dot IO

00:31:04,760 --> 00:31:13,350
okay yeah and the source is for to run

00:31:08,669 --> 00:31:19,830
get labs / salt sexton saltstack / pop /

00:31:13,350 --> 00:31:22,890
pop book yeah goodness I would I would

00:31:19,830 --> 00:31:27,380
love feedback and I mean sorry go ahead

00:31:22,890 --> 00:31:29,490
no no that's just picking that mouth

00:31:27,380 --> 00:31:31,440
yeah I'd love feedback because I'm

00:31:29,490 --> 00:31:33,840
really at this point just saying hey I

00:31:31,440 --> 00:31:37,110
think this is useful and if other people

00:31:33,840 --> 00:31:42,350
think it's useful that's great it's

00:31:37,110 --> 00:31:44,429
already enough that you know I'm on it

00:31:42,350 --> 00:31:50,870
but if other people want to bet on that

00:31:44,429 --> 00:31:54,120
great yeah I'll just paste that into the

00:31:50,870 --> 00:31:58,669
into the telegram could you put it in

00:31:54,120 --> 00:31:58,669
the ether pad to Patrick

00:32:07,150 --> 00:32:10,670
and this is actually one of the

00:32:08,900 --> 00:32:12,200
challenges that I run into I've only

00:32:10,670 --> 00:32:14,360
given this talk a handful of times but I

00:32:12,200 --> 00:32:17,780
get at the end and there are very few

00:32:14,360 --> 00:32:19,880
questions primarily because it's hey

00:32:17,780 --> 00:32:21,940
guys here's totally freaking out in left

00:32:19,880 --> 00:32:21,940
field

00:32:22,150 --> 00:32:28,010
yeah but it does follow a lot of

00:32:24,410 --> 00:32:31,640
concepts of micro-services but with the

00:32:28,010 --> 00:32:33,710
idea that deployment of the artifact or

00:32:31,640 --> 00:32:35,720
the result is significantly simplified

00:32:33,710 --> 00:32:37,520
because you can still develop an

00:32:35,720 --> 00:32:40,580
micro-service fashion but you get the

00:32:37,520 --> 00:32:43,100
benefits of a monolithic deployment and

00:32:40,580 --> 00:32:46,510
you could still use pop to deploy in a

00:32:43,100 --> 00:32:46,510
micro-service fashion as well of course

00:32:48,670 --> 00:32:59,600
so you compile the the that the Python

00:32:54,560 --> 00:33:02,270
into into binary code so the Python is

00:32:59,600 --> 00:33:09,080
the Python works like Python it can be

00:33:02,270 --> 00:33:12,440
pip installed and so it's direct direct

00:33:09,080 --> 00:33:16,990
continuation of just good old Python you

00:33:12,440 --> 00:33:20,600
publish to pi PI all that good stuff but

00:33:16,990 --> 00:33:23,450
the pop build option is there to produce

00:33:20,600 --> 00:33:25,430
either a single binary or a single

00:33:23,450 --> 00:33:29,180
directory full of all of the binary

00:33:25,430 --> 00:33:31,190
components again including Python it

00:33:29,180 --> 00:33:37,700
uses PI installer under the hood but

00:33:31,190 --> 00:33:39,260
what we do is kind of fiddle around with

00:33:37,700 --> 00:33:41,390
PI installer a little bit so that were

00:33:39,260 --> 00:33:45,590
able to maintain code paths inside of

00:33:41,390 --> 00:33:47,090
the binary that allows us to still be

00:33:45,590 --> 00:33:51,790
able to do things like dynamically

00:33:47,090 --> 00:33:54,110
lookup plug-in locations okay

00:33:51,790 --> 00:33:56,060
the other thing I should mention is that

00:33:54,110 --> 00:34:00,020
I originally wrote pop build to build

00:33:56,060 --> 00:34:04,670
pop stuff but I've been able to

00:34:00,020 --> 00:34:09,260
arbitrarily compile virtually any Python

00:34:04,670 --> 00:34:12,490
project and it's looking up we've used

00:34:09,260 --> 00:34:16,909
the Python compiler

00:34:12,490 --> 00:34:23,950
let's try know what it's cold PI

00:34:16,909 --> 00:34:28,220
installer my nice baby freeze is going

00:34:23,950 --> 00:34:29,710
Nootka Onew it I love new it cut it's

00:34:28,220 --> 00:34:32,060
very here isn't it

00:34:29,710 --> 00:34:37,940
yeah I'm not using new it code new

00:34:32,060 --> 00:34:40,639
there's that takes it takes everything

00:34:37,940 --> 00:34:42,649
back to C++ and then compositor C

00:34:40,639 --> 00:34:46,399
doesn't it yeah yeah I knew it could

00:34:42,649 --> 00:34:50,750
does a transpile and as such so again I

00:34:46,399 --> 00:34:53,630
love new Inca but when you use new it

00:34:50,750 --> 00:34:56,630
you actually lose a number of features

00:34:53,630 --> 00:34:59,030
from Python and so your code really has

00:34:56,630 --> 00:35:00,500
to really in the end it has to be geared

00:34:59,030 --> 00:35:02,560
towards new Atika I wanted something

00:35:00,500 --> 00:35:05,090
there's a little more Universal yeah I

00:35:02,560 --> 00:35:10,910
also had a hard time figuring out how to

00:35:05,090 --> 00:35:12,620
how to trace plug-in loading when all

00:35:10,910 --> 00:35:14,950
the components had been statically

00:35:12,620 --> 00:35:20,420
compiled that way it was really hard to

00:35:14,950 --> 00:35:23,150
to detect plug-in organization yeah well

00:35:20,420 --> 00:35:27,790
then it said again kind of to be blunt

00:35:23,150 --> 00:35:30,710
I'd rather use new it cuz approach em

00:35:27,790 --> 00:35:38,570
but at the same time I don't think I've

00:35:30,710 --> 00:35:43,490
got the two years I'd need to does right

00:35:38,570 --> 00:35:44,330
I should say and I'm not saying that to

00:35:43,490 --> 00:35:48,140
make new it could work

00:35:44,330 --> 00:35:51,350
new it works I love it but to make the

00:35:48,140 --> 00:35:55,040
to make the plug-in dynamic loading that

00:35:51,350 --> 00:35:56,510
whole thing work reliably new it guys my

00:35:55,040 --> 00:35:59,000
conclusion was this is going to take

00:35:56,510 --> 00:36:02,300
anywhere from six months to two years of

00:35:59,000 --> 00:36:04,790
me doing nothing else and yeah yeah you

00:36:02,300 --> 00:36:08,030
know I was I had I had one particular

00:36:04,790 --> 00:36:11,510
project we had to come up with a binary

00:36:08,030 --> 00:36:13,760
source so buy a binary I build for and I

00:36:11,510 --> 00:36:16,670
found on the thought this is pretty good

00:36:13,760 --> 00:36:19,310
and it's pretty fast as well and we can

00:36:16,670 --> 00:36:24,670
you and I would did work out ways to

00:36:19,310 --> 00:36:24,670
include weakness I have us a

00:36:24,680 --> 00:36:28,369
certain Python files which wouldn't have

00:36:26,660 --> 00:36:32,349
it compiled bit

00:36:28,369 --> 00:36:32,349
you just think include them and they

00:36:33,579 --> 00:36:37,369
yeah no it's good it's good

00:36:35,780 --> 00:36:40,130
I'll be definitely taking a look at your

00:36:37,369 --> 00:36:42,710
stuff and I appreciate my not that I

00:36:40,130 --> 00:36:45,349
don't know you about salt and having you

00:36:42,710 --> 00:36:48,829
salty because I have and that's very

00:36:45,349 --> 00:36:51,170
good as well thank you

00:36:48,829 --> 00:36:53,510
yeah but I mean even just taking a look

00:36:51,170 --> 00:36:55,940
that's that's what I'm talking about it

00:36:53,510 --> 00:36:59,390
yeah see if I get feedback see if people

00:36:55,940 --> 00:37:01,790
can help me find more edge cases so it

00:36:59,390 --> 00:37:04,849
can so it can grow up into a more hey

00:37:01,790 --> 00:37:09,849
this is a totally legit mature paradigm

00:37:04,849 --> 00:37:09,849

YouTube URL: https://www.youtube.com/watch?v=IyI6rmVFfUM


