Title: openSUSE Leap: The Current and Future Strategy (May 1, 2020)
Publication date: 2020-05-27
Playlist: openSUSE Virtual Summit 2020
Description: 
	Slides ►https://bit.ly/3cCWTIr

Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,000 --> 00:00:03,919
uh please feel free to interrupt me uh

00:00:02,879 --> 00:00:06,879
at any point

00:00:03,919 --> 00:00:07,279
uh let's just it's like 25 slides so we

00:00:06,879 --> 00:00:09,760
have

00:00:07,279 --> 00:00:12,400
uh 45 minutes i would like to do like uh

00:00:09,760 --> 00:00:15,599
maybe half an hour talk a 15 minutes uh

00:00:12,400 --> 00:00:18,960
conversation rather or discussion

00:00:15,599 --> 00:00:20,640
so uh the talk is called open

00:00:18,960 --> 00:00:22,240
choose a leap the current and future

00:00:20,640 --> 00:00:24,720
strategy it could be also

00:00:22,240 --> 00:00:25,279
called the current and and future plan

00:00:24,720 --> 00:00:28,080
um

00:00:25,279 --> 00:00:29,599
by current i mean 15-2 and future next

00:00:28,080 --> 00:00:32,960
release 15-3

00:00:29,599 --> 00:00:35,920
so we are talking in 2020 2021

00:00:32,960 --> 00:00:38,800
um i'm lubosch i'm the new release

00:00:35,920 --> 00:00:41,840
measure for open siza leap

00:00:38,800 --> 00:00:44,879
since first of january i believe so

00:00:41,840 --> 00:00:46,399
let's have a look at the agenda uh i i

00:00:44,879 --> 00:00:47,920
kind of defined four pillars that i

00:00:46,399 --> 00:00:50,640
would like to touch here

00:00:47,920 --> 00:00:51,920
so one is to revisit the open society

00:00:50,640 --> 00:00:54,399
introduction

00:00:51,920 --> 00:00:56,320
see what we claim uh you know who do we

00:00:54,399 --> 00:00:58,719
actually aim at

00:00:56,320 --> 00:00:59,760
who what was the strong sides of open

00:00:58,719 --> 00:01:02,800
source elip

00:00:59,760 --> 00:01:04,400
how can we improve it then uh you know

00:01:02,800 --> 00:01:06,080
every section will be like where we are

00:01:04,400 --> 00:01:09,280
now and what can we do better

00:01:06,080 --> 00:01:10,640
sort of uh that's that's the take the

00:01:09,280 --> 00:01:12,720
second would be how do we develop

00:01:10,640 --> 00:01:14,479
opensuse leap that means uh from from

00:01:12,720 --> 00:01:17,040
engineering point of view like uh you

00:01:14,479 --> 00:01:18,960
know from submitters contributors

00:01:17,040 --> 00:01:21,200
uh what's hindering us how can we be

00:01:18,960 --> 00:01:22,720
better at what we believe are our strong

00:01:21,200 --> 00:01:24,320
side

00:01:22,720 --> 00:01:26,320
the next section will be how do we build

00:01:24,320 --> 00:01:27,280
distribution that may touch uh touch or

00:01:26,320 --> 00:01:29,040
require the

00:01:27,280 --> 00:01:30,880
knowledge of previous topic the jump

00:01:29,040 --> 00:01:33,759
presented by adrian so i have a

00:01:30,880 --> 00:01:35,200
very short summary on one page if you

00:01:33,759 --> 00:01:38,400
haven't seen the presentation it should

00:01:35,200 --> 00:01:40,240
be sufficient to understand the idea

00:01:38,400 --> 00:01:41,600
and then the last section if we will

00:01:40,240 --> 00:01:42,159
have time to go for it i'll be more than

00:01:41,600 --> 00:01:44,240
happy but

00:01:42,159 --> 00:01:45,280
uh i i'm afraid that maybe it will take

00:01:44,240 --> 00:01:46,880
too much time

00:01:45,280 --> 00:01:48,479
but generally i would like to revisit

00:01:46,880 --> 00:01:50,479
what what what do we want to

00:01:48,479 --> 00:01:52,000
what do we have in 152 you know from

00:01:50,479 --> 00:01:55,119
from desktop perspective

00:01:52,000 --> 00:01:55,680
virtualization and do we plan to add

00:01:55,119 --> 00:01:57,520
anything

00:01:55,680 --> 00:01:59,040
new to the box uh that will be like last

00:01:57,520 --> 00:02:00,799
two slides or three slides uh some

00:01:59,040 --> 00:02:03,920
topics that i feel i

00:02:00,799 --> 00:02:07,280
like are very worth investigating

00:02:03,920 --> 00:02:10,800
uh so we have some open opportunities so

00:02:07,280 --> 00:02:13,520
uh i took this long text from the

00:02:10,800 --> 00:02:15,360
wiki for opensuse alipa so essentially

00:02:13,520 --> 00:02:17,599
we don't have to read it all

00:02:15,360 --> 00:02:18,800
but uh what we are saying is that

00:02:17,599 --> 00:02:20,879
opensuse leave

00:02:18,800 --> 00:02:22,000
is a new type of distribution it's a

00:02:20,879 --> 00:02:24,400
hybrid distribution which

00:02:22,000 --> 00:02:26,080
tries to connect the enterprise world

00:02:24,400 --> 00:02:29,360
from suse linux enterprise

00:02:26,080 --> 00:02:29,920
and guarantees stability and reliability

00:02:29,360 --> 00:02:31,440
um

00:02:29,920 --> 00:02:33,840
which we believe is summation by other

00:02:31,440 --> 00:02:36,879
distributions but we still actually

00:02:33,840 --> 00:02:39,599
uh try to you know like uh

00:02:36,879 --> 00:02:40,800
do a continuation for the faster pace

00:02:39,599 --> 00:02:43,040
distribution which is open to the

00:02:40,800 --> 00:02:45,120
tumbleweed and we try to get as much

00:02:43,040 --> 00:02:46,400
updates from tumbleweed as possible

00:02:45,120 --> 00:02:48,239
but we have challenges to get this

00:02:46,400 --> 00:02:49,440
working you know together so we have to

00:02:48,239 --> 00:02:51,519
do the best effort

00:02:49,440 --> 00:02:52,560
and uh later i will cover whether we can

00:02:51,519 --> 00:02:55,760
do better uh

00:02:52,560 --> 00:02:56,959
better than we are doing now and uh so

00:02:55,760 --> 00:02:58,400
so it's sort of bridging between

00:02:56,959 --> 00:02:59,200
enterprise and community this is what

00:02:58,400 --> 00:03:01,120
the slide does

00:02:59,200 --> 00:03:03,120
this about and i feel this is still a

00:03:01,120 --> 00:03:03,680
good match this is what i feel as well

00:03:03,120 --> 00:03:05,760
from

00:03:03,680 --> 00:03:07,599
you know from these few months that i'm

00:03:05,760 --> 00:03:10,720
on the distribution

00:03:07,599 --> 00:03:12,640
um so

00:03:10,720 --> 00:03:14,480
so the mission seems to be to bridge

00:03:12,640 --> 00:03:17,280
community enterprise uh

00:03:14,480 --> 00:03:18,159
you know as i said there are some issues

00:03:17,280 --> 00:03:20,239
you've already

00:03:18,159 --> 00:03:21,280
heard it raised on on the question part

00:03:20,239 --> 00:03:23,040
for adrian

00:03:21,280 --> 00:03:24,480
how do i you know like process my

00:03:23,040 --> 00:03:27,599
submission which is

00:03:24,480 --> 00:03:29,599
somehow hindered by maybe slee so

00:03:27,599 --> 00:03:30,879
uh i would like to revisit this further

00:03:29,599 --> 00:03:33,200
as well and

00:03:30,879 --> 00:03:35,200
uh generally like i would like to have a

00:03:33,200 --> 00:03:35,680
look at you and discuss what can we do

00:03:35,200 --> 00:03:37,519
better

00:03:35,680 --> 00:03:39,280
to to be able to keep up with the new

00:03:37,519 --> 00:03:40,959
technologies which are coming

00:03:39,280 --> 00:03:42,400
and still deliver the stability that's

00:03:40,959 --> 00:03:47,040
being asked for

00:03:42,400 --> 00:03:49,280
so let's have a look and

00:03:47,040 --> 00:03:51,280
from the contributor point of view how

00:03:49,280 --> 00:03:55,519
do we develop open source elite

00:03:51,280 --> 00:03:56,720
so um the distribution is essentially

00:03:55,519 --> 00:03:58,319
one third enterprise

00:03:56,720 --> 00:04:00,560
this is the four thousand packages which

00:03:58,319 --> 00:04:03,760
come from sleeves linux enterprise

00:04:00,560 --> 00:04:05,120
and uh essentially even nowadays every

00:04:03,760 --> 00:04:08,239
single submission which comes

00:04:05,120 --> 00:04:10,159
to these packages is reviewed by origin

00:04:08,239 --> 00:04:11,840
or there is an origin review actually

00:04:10,159 --> 00:04:14,879
review that that's being done by

00:04:11,840 --> 00:04:15,360
origin reviewers team and uh we have to

00:04:14,879 --> 00:04:18,079
watch

00:04:15,360 --> 00:04:18,880
if it's a sleazy submission and in such

00:04:18,079 --> 00:04:20,560
case we

00:04:18,880 --> 00:04:21,919
really need to ensure that this uh that

00:04:20,560 --> 00:04:23,759
the code change comes

00:04:21,919 --> 00:04:25,600
from the three side we can do some

00:04:23,759 --> 00:04:26,639
intermediate steps such as create a fork

00:04:25,600 --> 00:04:28,080
if you know that you know

00:04:26,639 --> 00:04:30,000
the submission will be delayed but it's

00:04:28,080 --> 00:04:31,280
on the right path or we can keep the

00:04:30,000 --> 00:04:32,960
fork in case that we

00:04:31,280 --> 00:04:34,960
already disagree about the functionality

00:04:32,960 --> 00:04:37,440
and it's required for leave

00:04:34,960 --> 00:04:38,160
so this is the current role that we have

00:04:37,440 --> 00:04:40,639
and and

00:04:38,160 --> 00:04:42,240
you know it sort of gets in certain

00:04:40,639 --> 00:04:45,520
areas more more

00:04:42,240 --> 00:04:45,919
visible with jam but i don't feel like

00:04:45,520 --> 00:04:48,000
the

00:04:45,919 --> 00:04:49,040
jump is bringing any new issues that we

00:04:48,000 --> 00:04:52,000
wouldn't already have

00:04:49,040 --> 00:04:53,759
uh i will touch that later on so the

00:04:52,000 --> 00:04:56,880
remaining 8000 packages are

00:04:53,759 --> 00:04:59,280
coming from community so

00:04:56,880 --> 00:05:00,880
to say so uh our best effort currently

00:04:59,280 --> 00:05:02,960
is to make sure that we can update as

00:05:00,880 --> 00:05:04,560
much as we can to the version from opens

00:05:02,960 --> 00:05:06,479
as a factory right it's it's also the

00:05:04,560 --> 00:05:06,960
cheapest for maintenance because we we

00:05:06,479 --> 00:05:08,560
actually

00:05:06,960 --> 00:05:10,639
limit the amount of coastings that we

00:05:08,560 --> 00:05:12,080
have to maintain it's also

00:05:10,639 --> 00:05:13,840
easier to update these packages

00:05:12,080 --> 00:05:16,479
afterwards but

00:05:13,840 --> 00:05:17,759
the the problem here is that we still

00:05:16,479 --> 00:05:18,960
need to make sure that these updates

00:05:17,759 --> 00:05:20,800
actually work with the

00:05:18,960 --> 00:05:23,360
one-third which is coming from slee and

00:05:20,800 --> 00:05:25,919
there the versions are kind of fixed

00:05:23,360 --> 00:05:27,600
so so you may not be able to to you know

00:05:25,919 --> 00:05:29,919
update all of them

00:05:27,600 --> 00:05:31,360
so and on the next slide i would like to

00:05:29,919 --> 00:05:33,680
see what i

00:05:31,360 --> 00:05:37,199
think or what i think we can do in order

00:05:33,680 --> 00:05:37,199
to be better at both of these

00:05:37,680 --> 00:05:42,720
so as i said the hybrid model which is

00:05:41,039 --> 00:05:43,360
you know enterprise to community

00:05:42,720 --> 00:05:46,240
relation

00:05:43,360 --> 00:05:46,800
comes with a process endurance and uh so

00:05:46,240 --> 00:05:50,160
to say

00:05:46,800 --> 00:05:51,520
we do not really have a

00:05:50,160 --> 00:05:53,280
process in place that would be fully

00:05:51,520 --> 00:05:56,479
transparent would be sufficient

00:05:53,280 --> 00:05:58,319
enough to to to actually fast-pace these

00:05:56,479 --> 00:06:00,240
submissions like right now

00:05:58,319 --> 00:06:01,600
usually what happens is that we reject

00:06:00,240 --> 00:06:02,720
the submission because we say hey this

00:06:01,600 --> 00:06:04,560
is a sleeve origin

00:06:02,720 --> 00:06:06,160
we may create a sleeve feature do a

00:06:04,560 --> 00:06:06,960
little bit of communication report it

00:06:06,160 --> 00:06:09,039
back but it's

00:06:06,960 --> 00:06:10,400
all through people you know which are

00:06:09,039 --> 00:06:12,240
just a middleman

00:06:10,400 --> 00:06:13,919
and the original requester is sometimes

00:06:12,240 --> 00:06:15,199
you know in limbo and he just blindly

00:06:13,919 --> 00:06:18,720
waits for updates

00:06:15,199 --> 00:06:18,720
and i feel this is not good

00:06:18,840 --> 00:06:22,240
so we are lacking transparent process uh

00:06:21,840 --> 00:06:24,479
it's

00:06:22,240 --> 00:06:26,240
not a new issue and jumps is actually

00:06:24,479 --> 00:06:28,400
making it more visible because there you

00:06:26,240 --> 00:06:31,919
know we actually import binaries

00:06:28,400 --> 00:06:34,319
so so creating forks is kind of uh

00:06:31,919 --> 00:06:35,440
a little bit going against the idea so

00:06:34,319 --> 00:06:36,800
so it gets more

00:06:35,440 --> 00:06:38,639
more and more important to make sure

00:06:36,800 --> 00:06:40,240
that everything's working as expected

00:06:38,639 --> 00:06:42,160
everything you know comes properly from

00:06:40,240 --> 00:06:44,080
slee and we have a nice way how to

00:06:42,160 --> 00:06:46,479
modify these packages

00:06:44,080 --> 00:06:47,520
uh so so the current effort that before

00:06:46,479 --> 00:06:49,680
they took is

00:06:47,520 --> 00:06:51,120
start to document stuff like uh most of

00:06:49,680 --> 00:06:52,080
this process you know how to actually

00:06:51,120 --> 00:06:54,080
submit something from

00:06:52,080 --> 00:06:55,599
uh to sleeve was unofficial it was

00:06:54,080 --> 00:06:57,440
usually best effort of people you know

00:06:55,599 --> 00:06:59,280
maybe creating temporary fork

00:06:57,440 --> 00:07:00,639
uh wait for the feature or create a bug

00:06:59,280 --> 00:07:03,039
you know to try to sneak it

00:07:00,639 --> 00:07:03,840
sneak it over but uh like it's

00:07:03,039 --> 00:07:05,919
unofficial

00:07:03,840 --> 00:07:07,440
and uh i did agree with product

00:07:05,919 --> 00:07:09,759
management to actually

00:07:07,440 --> 00:07:10,560
fix this this year unrelated from jump

00:07:09,759 --> 00:07:13,199
no matter whether

00:07:10,560 --> 00:07:13,840
it happens or not and and simply have a

00:07:13,199 --> 00:07:16,720
process

00:07:13,840 --> 00:07:17,599
in place by autumn 2020 what i mean by

00:07:16,720 --> 00:07:20,000
process is that

00:07:17,599 --> 00:07:20,720
we have a plan on what to do with the

00:07:20,000 --> 00:07:22,960
submission

00:07:20,720 --> 00:07:24,560
on the open source leap site rather than

00:07:22,960 --> 00:07:25,280
reject it there should be some action

00:07:24,560 --> 00:07:27,680
item with it

00:07:25,280 --> 00:07:28,479
either separate you know or reuse it if

00:07:27,680 --> 00:07:30,319
possible

00:07:28,479 --> 00:07:31,840
but not reject because i feel like this

00:07:30,319 --> 00:07:35,440
is a strong word

00:07:31,840 --> 00:07:36,960
um and it's currently happening so uh

00:07:35,440 --> 00:07:38,720
it covers the submission and it covers

00:07:36,960 --> 00:07:40,720
the updates about the process of

00:07:38,720 --> 00:07:42,639
your submission on the enterprise side

00:07:40,720 --> 00:07:44,479
you know on this behind the scenes

00:07:42,639 --> 00:07:45,919
so we want to make sure that you as a

00:07:44,479 --> 00:07:47,520
contributor can actually

00:07:45,919 --> 00:07:50,400
by yourself without you know contacting

00:07:47,520 --> 00:07:52,400
me or somebody else see the progress

00:07:50,400 --> 00:07:54,160
so uh i feel like this is already

00:07:52,400 --> 00:07:56,080
helping a lot because we can

00:07:54,160 --> 00:07:58,479
get contribution to this one-third of

00:07:56,080 --> 00:08:00,400
packages easier and

00:07:58,479 --> 00:08:01,840
you know like unless demotivating i

00:08:00,400 --> 00:08:03,520
would say

00:08:01,840 --> 00:08:05,120
um so they kind of were to actually

00:08:03,520 --> 00:08:07,039
document it the link can be found on the

00:08:05,120 --> 00:08:11,039
bottom of the page if you are interested

00:08:07,039 --> 00:08:13,039
um and uh why did i

00:08:11,039 --> 00:08:14,080
reference the release team did i mention

00:08:13,039 --> 00:08:15,919
it anywhere

00:08:14,080 --> 00:08:17,520
it should be probably for the next slide

00:08:15,919 --> 00:08:19,599
so please read it through i feel like

00:08:17,520 --> 00:08:21,680
it's useful i also covered some sort of

00:08:19,599 --> 00:08:23,520
typical use cases of where the process

00:08:21,680 --> 00:08:24,479
is actually hindering the contributors

00:08:23,520 --> 00:08:26,319
the most

00:08:24,479 --> 00:08:28,080
um you know in some cases this can be

00:08:26,319 --> 00:08:29,680
really tricky if you are

00:08:28,080 --> 00:08:31,440
touching not just the sleek code but

00:08:29,680 --> 00:08:33,200
maybe a code for one of the products

00:08:31,440 --> 00:08:36,640
which is based on top of sleep

00:08:33,200 --> 00:08:40,479
such as storage or or you know

00:08:36,640 --> 00:08:42,399
cusp and i feel like these persons are

00:08:40,479 --> 00:08:44,320
kind of really showing nicely where

00:08:42,399 --> 00:08:46,160
what is literally problematic it also

00:08:44,320 --> 00:08:47,200
shows uh the problem with plate features

00:08:46,160 --> 00:08:50,000
you know which require

00:08:47,200 --> 00:08:51,600
extra approvals and early features so

00:08:50,000 --> 00:08:53,440
all should be described there if

00:08:51,600 --> 00:08:55,440
if the page is not understandable enough

00:08:53,440 --> 00:08:56,320
please trace it on factory i can try to

00:08:55,440 --> 00:08:59,600
make it a little bit

00:08:56,320 --> 00:09:02,720
you know easier to read through

00:08:59,600 --> 00:09:04,880
so the other part um

00:09:02,720 --> 00:09:06,560
so this is regarding you know like how

00:09:04,880 --> 00:09:08,160
to improve the the

00:09:06,560 --> 00:09:09,600
the first part was mainly how to improve

00:09:08,160 --> 00:09:10,480
the situation on the one third of the

00:09:09,600 --> 00:09:12,240
packages right

00:09:10,480 --> 00:09:14,160
so if we can make it more transparent

00:09:12,240 --> 00:09:16,240
maybe less hindering

00:09:14,160 --> 00:09:17,519
you know less demotivating i feel like

00:09:16,240 --> 00:09:20,800
we can do better job there

00:09:17,519 --> 00:09:22,240
so what about the other two thirds so uh

00:09:20,800 --> 00:09:24,959
these two threads are representing the

00:09:22,240 --> 00:09:28,720
community part of the lead distribution

00:09:24,959 --> 00:09:30,640
so uh when i was thinking uh

00:09:28,720 --> 00:09:32,480
we are kind of limited by time right now

00:09:30,640 --> 00:09:33,760
tomasz clattel and max are doing great

00:09:32,480 --> 00:09:35,440
job at refreshing the

00:09:33,760 --> 00:09:36,959
two thirds of the distribution and take

00:09:35,440 --> 00:09:39,120
for example the entire pythons

00:09:36,959 --> 00:09:41,279
python stack from factory which was

00:09:39,120 --> 00:09:43,120
effort for i believe a few months

00:09:41,279 --> 00:09:44,560
and uh you know we are not that many so

00:09:43,120 --> 00:09:47,760
we have limited resources

00:09:44,560 --> 00:09:50,160
and also time right so

00:09:47,760 --> 00:09:51,200
basically the way what i see is that if

00:09:50,160 --> 00:09:53,120
we could

00:09:51,200 --> 00:09:55,040
unify the resources you know like

00:09:53,120 --> 00:09:56,560
essentially backwards people are working

00:09:55,040 --> 00:09:58,000
on the very same submissions and they

00:09:56,560 --> 00:09:58,560
have to get them to their projects so

00:09:58,000 --> 00:10:00,399
they

00:09:58,560 --> 00:10:02,000
kind of do some sort of integration

00:10:00,399 --> 00:10:04,000
testing as well

00:10:02,000 --> 00:10:05,279
even when it's not equal to staging

00:10:04,000 --> 00:10:06,480
which is happening on leave

00:10:05,279 --> 00:10:08,480
but if we would actually join the

00:10:06,480 --> 00:10:09,519
resources uh join our efforts you know

00:10:08,480 --> 00:10:11,279
and resources

00:10:09,519 --> 00:10:12,560
as far as people go we could we could do

00:10:11,279 --> 00:10:14,320
a little bit better on that we would

00:10:12,560 --> 00:10:15,920
instantly gain extra two people or three

00:10:14,320 --> 00:10:16,800
people you know in open source elite

00:10:15,920 --> 00:10:18,399
team

00:10:16,800 --> 00:10:20,399
and i believe that would help so we

00:10:18,399 --> 00:10:21,120
would be you know better at doing these

00:10:20,399 --> 00:10:24,079
refreshes

00:10:21,120 --> 00:10:25,839
so to say and also we would actually

00:10:24,079 --> 00:10:27,920
avoid that duplication

00:10:25,839 --> 00:10:29,200
on the pre-integration part because it

00:10:27,920 --> 00:10:30,959
wouldn't happen twice you know for

00:10:29,200 --> 00:10:33,200
backwards and leave so to say

00:10:30,959 --> 00:10:34,640
so also save some time there therefore

00:10:33,200 --> 00:10:37,519
have more resources

00:10:34,640 --> 00:10:39,120
so uh one one one nice highlight that i

00:10:37,519 --> 00:10:40,000
would like to mention and i feel like

00:10:39,120 --> 00:10:42,880
jump would fix

00:10:40,000 --> 00:10:43,519
it maybe also with help you know like uh

00:10:42,880 --> 00:10:45,600
from from

00:10:43,519 --> 00:10:48,240
from the process side is that when we

00:10:45,600 --> 00:10:50,640
were accepting gnome update in in leap

00:10:48,240 --> 00:10:52,640
like in this version of leap it took us

00:10:50,640 --> 00:10:54,560
six weeks to get it into leap after it

00:10:52,640 --> 00:10:56,560
was already accepted in slee

00:10:54,560 --> 00:10:58,720
and and part of it was that it was you

00:10:56,560 --> 00:11:00,320
know problematic on the open qa side we

00:10:58,720 --> 00:11:02,240
had to refresh all the needles

00:11:00,320 --> 00:11:04,240
uh part of it was that max had also for

00:11:02,240 --> 00:11:06,079
fury's vacation so i had to back him up

00:11:04,240 --> 00:11:07,519
and i was not so you know feminine with

00:11:06,079 --> 00:11:09,200
open q a and so on

00:11:07,519 --> 00:11:10,959
but uh generally like there was also a

00:11:09,200 --> 00:11:12,240
lot of ocean issues with reintegration

00:11:10,959 --> 00:11:14,320
we had to fix uh

00:11:12,240 --> 00:11:16,320
several install check issues and so on

00:11:14,320 --> 00:11:18,240
and it was literally six weeks uh

00:11:16,320 --> 00:11:20,399
and uh with chump if you just think it

00:11:18,240 --> 00:11:22,720
over take it as it is

00:11:20,399 --> 00:11:24,320
uh and have a simplified pre-integration

00:11:22,720 --> 00:11:25,920
testing it could be almost instant so it

00:11:24,320 --> 00:11:27,040
would save six weeks just on the gnome

00:11:25,920 --> 00:11:28,720
update

00:11:27,040 --> 00:11:30,320
and that would that would also account

00:11:28,720 --> 00:11:31,680
for every other you know package that

00:11:30,320 --> 00:11:33,680
coming from slee

00:11:31,680 --> 00:11:35,360
so i feel like that would help us a

00:11:33,680 --> 00:11:36,959
little bit more to focus on not on the

00:11:35,360 --> 00:11:39,360
enterprise part which which

00:11:36,959 --> 00:11:40,880
you know would come for free so to say

00:11:39,360 --> 00:11:42,959
but we would be able to focus on the

00:11:40,880 --> 00:11:44,160
community part of the distribution

00:11:42,959 --> 00:11:45,839
because we wouldn't have to care about

00:11:44,160 --> 00:11:48,079
the enterprise part and this is where i

00:11:45,839 --> 00:11:51,120
see that we could really improve

00:11:48,079 --> 00:11:52,399
and it would help so it's just an idea

00:11:51,120 --> 00:11:55,120
again it's it's all

00:11:52,399 --> 00:11:56,000
driven by results of champ like how it

00:11:55,120 --> 00:11:57,839
works uh

00:11:56,000 --> 00:12:00,399
so far we are pretty early we have a

00:11:57,839 --> 00:12:03,920
fpp3 build but that's that's it

00:12:00,399 --> 00:12:06,560
and uh so let's see so

00:12:03,920 --> 00:12:07,839
next topic uh would be regarding

00:12:06,560 --> 00:12:08,399
building of the distribution i was

00:12:07,839 --> 00:12:10,480
trying to

00:12:08,399 --> 00:12:12,480
cover you know the path from maintainer

00:12:10,480 --> 00:12:14,079
to to distribution now

00:12:12,480 --> 00:12:16,480
let's talk about the part that happens

00:12:14,079 --> 00:12:16,480
after

00:12:16,560 --> 00:12:21,519
so how do we currently build open

00:12:19,680 --> 00:12:22,320
society distribution right we are using

00:12:21,519 --> 00:12:23,839
obs

00:12:22,320 --> 00:12:25,760
it's a very high level so so don't

00:12:23,839 --> 00:12:27,200
expect any deep deep dive for that i

00:12:25,760 --> 00:12:28,959
have a link on the other page

00:12:27,200 --> 00:12:30,480
about how to contribute to opensuse so

00:12:28,959 --> 00:12:32,639
this is really high level

00:12:30,480 --> 00:12:34,800
and so so our you know base building

00:12:32,639 --> 00:12:36,880
block is obs which allows us to rebuild

00:12:34,800 --> 00:12:38,480
packages on any change which is relevant

00:12:36,880 --> 00:12:39,920
right it detects what i just need to be

00:12:38,480 --> 00:12:40,639
rebuilding so when i feel like this is

00:12:39,920 --> 00:12:43,120
where

00:12:40,639 --> 00:12:45,680
where we we have huge benefit compared

00:12:43,120 --> 00:12:48,079
to let's see some other distributions

00:12:45,680 --> 00:12:48,880
um the other part is opens to the

00:12:48,079 --> 00:12:50,399
release team

00:12:48,880 --> 00:12:52,000
because we have to handle you know it's

00:12:50,399 --> 00:12:54,480
it's people who have to process the

00:12:52,000 --> 00:12:55,920
sub and request to every single package

00:12:54,480 --> 00:12:56,639
which is not something that i'm used to

00:12:55,920 --> 00:12:58,800
from from

00:12:56,639 --> 00:13:01,120
other distributions but here we do that

00:12:58,800 --> 00:13:02,800
with help with help of some uh

00:13:01,120 --> 00:13:03,839
actually bots which are helping us with

00:13:02,800 --> 00:13:05,519
reviews you know they may actually

00:13:03,839 --> 00:13:06,720
reject the review right away if it

00:13:05,519 --> 00:13:08,639
doesn't meet certain

00:13:06,720 --> 00:13:10,160
requirements and so on essentially it's

00:13:08,639 --> 00:13:11,839
people who have to review it you know i

00:13:10,160 --> 00:13:12,320
have to check origin reviews max has to

00:13:11,839 --> 00:13:13,680
check

00:13:12,320 --> 00:13:16,720
original reviews whether it comes from

00:13:13,680 --> 00:13:19,279
sli or or or factory or libra then

00:13:16,720 --> 00:13:19,920
and so on so it's actually also the one

00:13:19,279 --> 00:13:22,639
of the bottleneck

00:13:19,920 --> 00:13:24,560
is people right then then uh a big part

00:13:22,639 --> 00:13:25,519
is pre-integration testing where i feel

00:13:24,560 --> 00:13:27,440
we are also

00:13:25,519 --> 00:13:28,720
you know like in some ways ahead of

00:13:27,440 --> 00:13:30,000
other competitions because we are

00:13:28,720 --> 00:13:31,920
actually able to detect

00:13:30,000 --> 00:13:33,440
breakage before it happens like i'm not

00:13:31,920 --> 00:13:34,160
used to it from the other company let's

00:13:33,440 --> 00:13:35,839
say

00:13:34,160 --> 00:13:37,360
where where we were testing the change

00:13:35,839 --> 00:13:38,480
after it landed in the you know in the

00:13:37,360 --> 00:13:40,240
nightly let's say

00:13:38,480 --> 00:13:41,519
a nightly build of the product so this

00:13:40,240 --> 00:13:43,440
is something amazing but

00:13:41,519 --> 00:13:45,040
then again like the jump makes you

00:13:43,440 --> 00:13:45,839
reduce a little bit of pre-integration

00:13:45,040 --> 00:13:48,240
so it really

00:13:45,839 --> 00:13:49,040
you know it's important to do this right

00:13:48,240 --> 00:13:51,120
uh

00:13:49,040 --> 00:13:52,480
and and find a way how to not compromise

00:13:51,120 --> 00:13:53,920
on quality

00:13:52,480 --> 00:13:55,920
and then the last part which i think

00:13:53,920 --> 00:13:57,519
feel is also unique and big advantage is

00:13:55,920 --> 00:13:59,839
open qa usage so

00:13:57,519 --> 00:14:01,199
uh essentially you know we have a huge

00:13:59,839 --> 00:14:02,720
amount of testing being done

00:14:01,199 --> 00:14:03,279
automatically on every single build

00:14:02,720 --> 00:14:05,839
which

00:14:03,279 --> 00:14:07,040
also doesn't happen for free on other

00:14:05,839 --> 00:14:08,720
distributions

00:14:07,040 --> 00:14:10,399
and this is also very important so this

00:14:08,720 --> 00:14:12,079
is essentially four building blocks

00:14:10,399 --> 00:14:16,079
which for me are the most important part

00:14:12,079 --> 00:14:20,880
of how we build sleep

00:14:16,079 --> 00:14:22,399
uh so i would not call this uh

00:14:20,880 --> 00:14:24,240
necessarily improvement but i would call

00:14:22,399 --> 00:14:25,040
it like how can we move forward you know

00:14:24,240 --> 00:14:26,880
like uh and

00:14:25,040 --> 00:14:28,800
and and change this to to the way that

00:14:26,880 --> 00:14:29,040
we would we would be better at what's

00:14:28,800 --> 00:14:30,240
the

00:14:29,040 --> 00:14:32,320
mission for the product which is like

00:14:30,240 --> 00:14:33,760
joining enterprise and community

00:14:32,320 --> 00:14:35,279
and then provide a solution that works

00:14:33,760 --> 00:14:36,560
for you know for people who look

00:14:35,279 --> 00:14:38,800
stability but also

00:14:36,560 --> 00:14:40,560
want to want to appreciate new up newer

00:14:38,800 --> 00:14:44,160
versions of packages

00:14:40,560 --> 00:14:46,000
so um again adrian mentioned jump jump

00:14:44,160 --> 00:14:47,519
is essentially a proposal to use three

00:14:46,000 --> 00:14:50,800
binaries uh

00:14:47,519 --> 00:14:52,639
in leap for packages which are equal um

00:14:50,800 --> 00:14:53,920
i will talk about the equality a little

00:14:52,639 --> 00:14:55,839
bit on the other other

00:14:53,920 --> 00:14:57,600
part so essentially one third of the

00:14:55,839 --> 00:15:01,279
distribution would come from sli

00:14:57,600 --> 00:15:04,320
binary wise we could skip

00:15:01,279 --> 00:15:06,160
review we could skip pre-integration

00:15:04,320 --> 00:15:07,920
so uh because it would be already done

00:15:06,160 --> 00:15:09,680
for sleep and if the packages are equal

00:15:07,920 --> 00:15:11,760
i would expect equal results right

00:15:09,680 --> 00:15:13,519
may not be the case if if leap has like

00:15:11,760 --> 00:15:15,040
deep deeper test suit which is not

00:15:13,519 --> 00:15:16,000
instantly so this is something that we

00:15:15,040 --> 00:15:17,519
need to make uh

00:15:16,000 --> 00:15:19,120
sure that that doesn't happen you know

00:15:17,519 --> 00:15:20,639
that we are testing the same thing so we

00:15:19,120 --> 00:15:22,880
are not surprised

00:15:20,639 --> 00:15:24,480
uh but generally like we can save a lot

00:15:22,880 --> 00:15:25,040
of time on this and you can see that

00:15:24,480 --> 00:15:26,800
this is

00:15:25,040 --> 00:15:28,160
also a few bottlenecks for current opens

00:15:26,800 --> 00:15:31,040
with the leap development so

00:15:28,160 --> 00:15:32,639
um this is where i see a benefit also

00:15:31,040 --> 00:15:34,000
there are some compromises right on the

00:15:32,639 --> 00:15:35,360
right buildability of the packages

00:15:34,000 --> 00:15:37,199
adrian said this is something that we

00:15:35,360 --> 00:15:39,360
are looking into you need to make sure

00:15:37,199 --> 00:15:42,320
that product can be still rebuilt

00:15:39,360 --> 00:15:43,920
so i linked two links which i believe

00:15:42,320 --> 00:15:45,920
will give you the most information

00:15:43,920 --> 00:15:47,920
that we have currently available online

00:15:45,920 --> 00:15:49,360
so one is the faq for closing the leap

00:15:47,920 --> 00:15:51,600
gap we just also mentioned

00:15:49,360 --> 00:15:53,680
in the email original email which was

00:15:51,600 --> 00:15:54,639
announcing the proposal so so feel free

00:15:53,680 --> 00:15:56,639
to check both but

00:15:54,639 --> 00:15:58,399
uh essentially the first link is part of

00:15:56,639 --> 00:16:01,519
the email

00:15:58,399 --> 00:16:03,199
so that's about jump uh let's talk about

00:16:01,519 --> 00:16:05,360
something outside of the jump

00:16:03,199 --> 00:16:06,240
so maybe you are aware maybe you are not

00:16:05,360 --> 00:16:07,839
aware but

00:16:06,240 --> 00:16:09,839
the entire student is currently busy and

00:16:07,839 --> 00:16:11,279
they are busy with sinking to coast

00:16:09,839 --> 00:16:12,959
streams uh

00:16:11,279 --> 00:16:14,399
it's also prerequisite for the champ

00:16:12,959 --> 00:16:15,839
because without this it would not be

00:16:14,399 --> 00:16:17,600
possible but it's also something that

00:16:15,839 --> 00:16:19,600
should have happened long time ago

00:16:17,600 --> 00:16:21,440
i believe uh because right now we

00:16:19,600 --> 00:16:23,519
actually really really fight

00:16:21,440 --> 00:16:24,880
with with differences and and it's

00:16:23,519 --> 00:16:27,360
hindering us as well

00:16:24,880 --> 00:16:28,000
so uh in numbers there's 150 packages

00:16:27,360 --> 00:16:29,920
which have

00:16:28,000 --> 00:16:31,440
functional differences could be support

00:16:29,920 --> 00:16:32,800
of different back ends like

00:16:31,440 --> 00:16:34,240
invert measure it's glass strapless

00:16:32,800 --> 00:16:34,880
which is not in sleeves in leave and so

00:16:34,240 --> 00:16:36,800
on

00:16:34,880 --> 00:16:38,880
for a real-time support which is in the

00:16:36,800 --> 00:16:41,279
sleaze side in some packages it's not uh

00:16:38,880 --> 00:16:42,399
on leap side and so on it could be

00:16:41,279 --> 00:16:44,800
different uh

00:16:42,399 --> 00:16:46,800
settings for kernel also regarding

00:16:44,800 --> 00:16:49,360
preamp in real time

00:16:46,800 --> 00:16:50,880
it could be the way how we handle build

00:16:49,360 --> 00:16:53,440
time translation

00:16:50,880 --> 00:16:54,160
missing support of chango in inslas and

00:16:53,440 --> 00:16:55,440
so on

00:16:54,160 --> 00:16:57,519
and i can tell you that the entire

00:16:55,440 --> 00:16:59,279
company is working on it uh we have a

00:16:57,519 --> 00:17:02,079
mission to to have this

00:16:59,279 --> 00:17:03,519
unification have done in 15 30 time

00:17:02,079 --> 00:17:05,679
frame so so

00:17:03,519 --> 00:17:06,559
um i believe for 15k we still have few

00:17:05,679 --> 00:17:08,240
weeks to go

00:17:06,559 --> 00:17:10,319
but then we will stop and we will resume

00:17:08,240 --> 00:17:11,919
in 153 where this is the end goal

00:17:10,319 --> 00:17:13,919
we really want to have the same code

00:17:11,919 --> 00:17:15,439
stream but it's not possible we will

00:17:13,919 --> 00:17:17,199
make sure that we will find solution how

00:17:15,439 --> 00:17:18,000
to not compromise any features on leap

00:17:17,199 --> 00:17:21,120
side

00:17:18,000 --> 00:17:22,240
uh so don't be worried uh i've seen some

00:17:21,120 --> 00:17:23,679
features being dropped but

00:17:22,240 --> 00:17:25,600
these were back-ends for packages which

00:17:23,679 --> 00:17:27,360
are no longer updated and so on

00:17:25,600 --> 00:17:29,440
and initially should have been dropped

00:17:27,360 --> 00:17:31,200
long time ago so so such things happen

00:17:29,440 --> 00:17:32,000
but we have this under control if you

00:17:31,200 --> 00:17:33,840
would feel like you

00:17:32,000 --> 00:17:35,200
need to be more in the loop please make

00:17:33,840 --> 00:17:37,200
sure to read

00:17:35,200 --> 00:17:38,960
the weekly minutes for closing the lead

00:17:37,200 --> 00:17:40,640
gap they are being sent to factory so

00:17:38,960 --> 00:17:44,400
you can be on the track with the

00:17:40,640 --> 00:17:46,320
latest changes i feel like this is also

00:17:44,400 --> 00:17:48,240
exciting because again it will save some

00:17:46,320 --> 00:17:51,760
resources on the leap side at least

00:17:48,240 --> 00:17:53,520
specifically engineering uh let me let

00:17:51,760 --> 00:17:55,679
me share a road map since i've mentioned

00:17:53,520 --> 00:17:57,280
that we want to be done with 15.3

00:17:55,679 --> 00:17:59,039
so this is currently proposed roadmap

00:17:57,280 --> 00:18:00,240
it's not final at least for 15 to its

00:17:59,039 --> 00:18:03,120
final but everything

00:18:00,240 --> 00:18:05,600
beyond 15-2 is currently optional and it

00:18:03,120 --> 00:18:08,160
really depends on our research with jam

00:18:05,600 --> 00:18:08,640
and the work which is done by adrian so

00:18:08,160 --> 00:18:10,720
so

00:18:08,640 --> 00:18:13,520
you may have already noticed that but

00:18:10,720 --> 00:18:15,280
the 15k was delayed by eight weeks

00:18:13,520 --> 00:18:17,280
and the reason is these thinking of

00:18:15,280 --> 00:18:19,360
course teams we actually want ubs able

00:18:17,280 --> 00:18:21,840
to do in 152 time frame

00:18:19,360 --> 00:18:23,760
and uh you know like we had great bits

00:18:21,840 --> 00:18:25,039
decide to invest into this for extra

00:18:23,760 --> 00:18:26,559
eight weeks so so

00:18:25,039 --> 00:18:28,799
this is why it's then i feel like it's

00:18:26,559 --> 00:18:30,799
beneficial for both worlds

00:18:28,799 --> 00:18:32,880
and no matter whether a closing leap gap

00:18:30,799 --> 00:18:35,919
happens uh sorry jump happens or not

00:18:32,880 --> 00:18:38,160
like this this part is important so

00:18:35,919 --> 00:18:40,000
if we would be done with the jump

00:18:38,160 --> 00:18:42,000
proposal in reasonable time

00:18:40,000 --> 00:18:43,840
and we will feel secure i've seen it

00:18:42,000 --> 00:18:46,799
also being raised on open source

00:18:43,840 --> 00:18:48,480
factory from community not not from susa

00:18:46,799 --> 00:18:49,440
why don't we like do some intermediate

00:18:48,480 --> 00:18:51,280
release

00:18:49,440 --> 00:18:52,880
and uh there is that option i want to

00:18:51,280 --> 00:18:54,480
raise it uh the current

00:18:52,880 --> 00:18:56,720
agreement for the naming scheme will be

00:18:54,480 --> 00:18:58,720
15 2.1

00:18:56,720 --> 00:19:00,400
and it's totally dependent on the status

00:18:58,720 --> 00:19:00,960
of jump like if we are not stable enough

00:19:00,400 --> 00:19:02,559
if we have

00:19:00,960 --> 00:19:04,240
any you know if we are not sure it's not

00:19:02,559 --> 00:19:06,640
going to happen

00:19:04,240 --> 00:19:08,000
and but if we are able to succeed and

00:19:06,640 --> 00:19:10,480
then this would be first

00:19:08,000 --> 00:19:12,559
hybrid release which is actually built

00:19:10,480 --> 00:19:14,320
with usage of sleep binaries

00:19:12,559 --> 00:19:16,000
it wouldn't use all of the binaries

00:19:14,320 --> 00:19:16,720
because we simply don't have enough time

00:19:16,000 --> 00:19:18,559
to do

00:19:16,720 --> 00:19:20,160
you know these code stream unification

00:19:18,559 --> 00:19:22,080
and there would be still a lot of lead

00:19:20,160 --> 00:19:24,640
forex for this you know one third of

00:19:22,080 --> 00:19:26,799
enterprise packages and uh

00:19:24,640 --> 00:19:28,080
then next release with open source

00:19:26,799 --> 00:19:29,840
differently you

00:19:28,080 --> 00:19:31,440
you know if everything goes well you

00:19:29,840 --> 00:19:34,320
would like to have the the

00:19:31,440 --> 00:19:37,360
lead which is at this one third of

00:19:34,320 --> 00:19:39,360
packages identical with sleeve

00:19:37,360 --> 00:19:41,520
and uh there's a lot of challenges that

00:19:39,360 --> 00:19:42,640
i see and they are being addressed and

00:19:41,520 --> 00:19:44,640
if you are interested

00:19:42,640 --> 00:19:46,160
and and if you would like to maybe

00:19:44,640 --> 00:19:47,039
receive more information feel free to

00:19:46,160 --> 00:19:48,720
reach out to us

00:19:47,039 --> 00:19:50,880
a lot of discussion happens at the open

00:19:48,720 --> 00:19:52,640
source release engineering hall

00:19:50,880 --> 00:19:54,799
again the other other part of discussion

00:19:52,640 --> 00:19:56,960
is closing the leap weekly meetings

00:19:54,799 --> 00:19:58,880
uh factory receives receives updates

00:19:56,960 --> 00:20:01,160
from both every week one is on wednesday

00:19:58,880 --> 00:20:04,279
the other is on friday

00:20:01,160 --> 00:20:04,279
[Music]

00:20:04,840 --> 00:20:07,840
um

00:20:13,600 --> 00:20:18,960
i think we will make a release here in

00:20:17,280 --> 00:20:22,080
any case based on jump

00:20:18,960 --> 00:20:25,919
but it's a complete open if

00:20:22,080 --> 00:20:28,320
if you think and v means v v inside

00:20:25,919 --> 00:20:30,240
of opensuse means if it's a stable

00:20:28,320 --> 00:20:33,520
release or an experimental one if it's

00:20:30,240 --> 00:20:36,000
something in parallel to 15.2

00:20:33,520 --> 00:20:37,600
or something on some side fork so this

00:20:36,000 --> 00:20:38,240
is something what we will need to

00:20:37,600 --> 00:20:40,559
discuss

00:20:38,240 --> 00:20:42,240
later this year when we have something

00:20:40,559 --> 00:20:43,120
the reason why we need a release is

00:20:42,240 --> 00:20:45,520
because we need

00:20:43,120 --> 00:20:46,720
also to test all the maintenance work

00:20:45,520 --> 00:20:48,159
afterwards

00:20:46,720 --> 00:20:50,159
because it's one thing to build a

00:20:48,159 --> 00:20:52,799
distribution but it's another thing

00:20:50,159 --> 00:20:54,000
to maintain the distribution afterwards

00:20:52,799 --> 00:20:56,880
and therefore we must

00:20:54,000 --> 00:20:59,200
do a release to to learn also if our

00:20:56,880 --> 00:21:02,320
maintenance work and workflows

00:20:59,200 --> 00:21:05,039
is still working um

00:21:02,320 --> 00:21:06,559
so yeah so there will be a release in

00:21:05,039 --> 00:21:09,360
any case

00:21:06,559 --> 00:21:11,120
i would like to say but it's completely

00:21:09,360 --> 00:21:14,840
open if this is a successor

00:21:11,120 --> 00:21:19,360
of of leap 15 2 or something completely

00:21:14,840 --> 00:21:23,200
different thank you adrian

00:21:19,360 --> 00:21:25,919
uh so let me go to the next slide

00:21:23,200 --> 00:21:29,200
so uh available architecture so so since

00:21:25,919 --> 00:21:31,520
we are syncing binaries from sli

00:21:29,200 --> 00:21:33,039
nowadays uh you may not be aware of it

00:21:31,520 --> 00:21:34,400
or you've heard it from adrian but we

00:21:33,039 --> 00:21:36,000
actually do have listings

00:21:34,400 --> 00:21:37,520
all with few exceptions such as life

00:21:36,000 --> 00:21:40,640
patching but fully sing

00:21:37,520 --> 00:21:42,960
sleaze structure in public obs

00:21:40,640 --> 00:21:44,720
it also you know brings us some

00:21:42,960 --> 00:21:46,000
opportunities and that can be seen on

00:21:44,720 --> 00:21:47,760
the 15.3

00:21:46,000 --> 00:21:50,000
but uh aside from that there is an

00:21:47,760 --> 00:21:52,240
effort uh from release team to actually

00:21:50,000 --> 00:21:55,919
consider whether we could track uh

00:21:52,240 --> 00:21:58,880
the 64-bit arm as a primary architecture

00:21:55,919 --> 00:21:59,919
so uh i have promised gilm that i will

00:21:58,880 --> 00:22:02,080
look into it uh

00:21:59,919 --> 00:22:04,320
the the big story behind is that we

00:22:02,080 --> 00:22:07,120
would like uh organ would like to have

00:22:04,320 --> 00:22:08,080
a arm deliverables isos available on the

00:22:07,120 --> 00:22:09,840
main page

00:22:08,080 --> 00:22:11,280
and uh we just want to make sure you

00:22:09,840 --> 00:22:12,080
know this is that's a strong statement

00:22:11,280 --> 00:22:15,039
right it

00:22:12,080 --> 00:22:16,880
essentially places equal next to intel

00:22:15,039 --> 00:22:18,240
and we would like to see whether we are

00:22:16,880 --> 00:22:21,280
ready to do that

00:22:18,240 --> 00:22:23,520
uh so if if we would go for for the jump

00:22:21,280 --> 00:22:24,559
proposal there is one big benefit the

00:22:23,520 --> 00:22:25,840
entire

00:22:24,559 --> 00:22:27,600
one-third of distribution would be

00:22:25,840 --> 00:22:29,840
string from slash

00:22:27,600 --> 00:22:31,520
which actually supports arm it's really

00:22:29,840 --> 00:22:33,600
separated architecture but you know like

00:22:31,520 --> 00:22:35,679
we are not less right we are way more

00:22:33,600 --> 00:22:37,200
so um the statement here is also to make

00:22:35,679 --> 00:22:38,000
sure whether the community parts such as

00:22:37,200 --> 00:22:39,760
kde

00:22:38,000 --> 00:22:42,000
by the way i received confirmation that

00:22:39,760 --> 00:22:44,159
kde is able to support arm

00:22:42,000 --> 00:22:45,919
and other components are also able to

00:22:44,159 --> 00:22:48,240
support arm and the policy should also

00:22:45,919 --> 00:22:50,720
define like what do we actually consider

00:22:48,240 --> 00:22:51,280
to be supportable if the architecture is

00:22:50,720 --> 00:22:52,960
called

00:22:51,280 --> 00:22:55,039
primary like is it just the content of

00:22:52,960 --> 00:22:57,280
the image is it is it data below is it

00:22:55,039 --> 00:22:58,480
like uh all the default components in in

00:22:57,280 --> 00:22:59,919
backzilla and so on

00:22:58,480 --> 00:23:02,000
so we are looking into it dirk is

00:22:59,919 --> 00:23:04,240
writing the policy for i call it first

00:23:02,000 --> 00:23:06,880
class it is an artifact or deliverable

00:23:04,240 --> 00:23:07,600
uh it's currently in progress uh feel

00:23:06,880 --> 00:23:10,640
free to read

00:23:07,600 --> 00:23:13,360
release engineering meeting minutes

00:23:10,640 --> 00:23:13,760
and as i mentioned i'm already asking uh

00:23:13,360 --> 00:23:15,679
other

00:23:13,760 --> 00:23:17,440
components aside from the c components

00:23:15,679 --> 00:23:18,880
whether they are able to support support

00:23:17,440 --> 00:23:20,559
you know if somebody opens back and he

00:23:18,880 --> 00:23:22,159
says it doesn't work on arm are they

00:23:20,559 --> 00:23:24,080
even able to work on it so that's the

00:23:22,159 --> 00:23:26,080
main idea like are we able to do that

00:23:24,080 --> 00:23:29,600
and that's that's actually

00:23:26,080 --> 00:23:31,440
uh that's very very cool topic to me um

00:23:29,600 --> 00:23:32,880
so in the next release uh if we actually

00:23:31,440 --> 00:23:34,080
sing sleep binaries and let's say that

00:23:32,880 --> 00:23:37,200
we would base chum

00:23:34,080 --> 00:23:38,799
uh bass leap on jump approach uh so we

00:23:37,200 --> 00:23:40,960
would reuse the binaries we actually get

00:23:38,799 --> 00:23:41,679
s390 binaries for free as part of the

00:23:40,960 --> 00:23:44,400
sink

00:23:41,679 --> 00:23:46,159
and uh i am placing question mark it you

00:23:44,400 --> 00:23:48,080
know because it also takes some extra

00:23:46,159 --> 00:23:49,679
efforts right and you know we have to we

00:23:48,080 --> 00:23:51,520
have to make sure that this works put

00:23:49,679 --> 00:23:53,039
images together and so on

00:23:51,520 --> 00:23:54,640
and i would like to investigate whether

00:23:53,039 --> 00:23:57,120
it makes sense for a leap actually to to

00:23:54,640 --> 00:24:00,159
have this architecture available

00:23:57,120 --> 00:24:01,919
so as i would like to make sure that uh

00:24:00,159 --> 00:24:04,159
everybody is aware that we do not plan

00:24:01,919 --> 00:24:06,640
to drop any architecture like we have uh

00:24:04,159 --> 00:24:07,520
we will have changes with arm with 7

00:24:06,640 --> 00:24:08,960
32-bit

00:24:07,520 --> 00:24:10,640
and risk 5 which is something that

00:24:08,960 --> 00:24:12,400
adrian didn't mention but

00:24:10,640 --> 00:24:14,080
we do not plan to drop them we just need

00:24:12,400 --> 00:24:15,760
to figure out how to handle them

00:24:14,080 --> 00:24:17,120
uh so there are several approaches one

00:24:15,760 --> 00:24:18,559
of them is that we actually have to

00:24:17,120 --> 00:24:20,000
build them in separate project which

00:24:18,559 --> 00:24:21,760
would require a lot of efforts that's

00:24:20,000 --> 00:24:22,320
something that adrian indirectly already

00:24:21,760 --> 00:24:23,840
said

00:24:22,320 --> 00:24:27,200
but we would like to see if there is

00:24:23,840 --> 00:24:30,400
something else that we can do as well

00:24:27,200 --> 00:24:32,559
uh so

00:24:30,400 --> 00:24:34,159
what's in the box so this uh do do we

00:24:32,559 --> 00:24:35,520
have enough time i'm not sure like let

00:24:34,159 --> 00:24:39,120
me check the time

00:24:35,520 --> 00:24:42,320
okay so we still have about 15 minutes

00:24:39,120 --> 00:24:45,200
so this is this category sorry did

00:24:42,320 --> 00:24:45,200
anybody say anything

00:24:46,159 --> 00:24:51,840
you can go um you can go 20 if you want

00:24:49,279 --> 00:24:53,440
you know but okay yeah discussion is

00:24:51,840 --> 00:24:54,400
more important than these slides trust

00:24:53,440 --> 00:24:55,840
me like from this

00:24:54,400 --> 00:24:57,279
from this starting point i feel like

00:24:55,840 --> 00:24:59,360
discussion will get more and more

00:24:57,279 --> 00:25:01,279
important and then the content

00:24:59,360 --> 00:25:02,799
so what's in the box uh i would like to

00:25:01,279 --> 00:25:04,799
touch uh two topics like what do we have

00:25:02,799 --> 00:25:07,679
in the books now and is there anything

00:25:04,799 --> 00:25:09,440
uh that we would like to add to the box

00:25:07,679 --> 00:25:11,200
like maybe in next release so because

00:25:09,440 --> 00:25:12,320
this is also some future plan right so

00:25:11,200 --> 00:25:13,919
where

00:25:12,320 --> 00:25:15,600
what would be actually what what seems

00:25:13,919 --> 00:25:18,799
to be the way for leap in next let's say

00:25:15,600 --> 00:25:19,360
one year uh kde highlights uh so i feel

00:25:18,799 --> 00:25:22,080
like

00:25:19,360 --> 00:25:23,200
leap is a special place for kde uh a lot

00:25:22,080 --> 00:25:25,360
of users actually

00:25:23,200 --> 00:25:27,120
use leap because of the kde as well on

00:25:25,360 --> 00:25:29,279
desktop

00:25:27,120 --> 00:25:30,880
so i i contacted antonio arusa he

00:25:29,279 --> 00:25:32,400
provided me an amazing summary of the

00:25:30,880 --> 00:25:33,520
features so i will not read them all you

00:25:32,400 --> 00:25:35,120
can all see them

00:25:33,520 --> 00:25:36,559
so so you can see that this is not just

00:25:35,120 --> 00:25:38,400
a maintenance update like we really

00:25:36,559 --> 00:25:40,480
bring a new feature new tools

00:25:38,400 --> 00:25:41,440
uh if you are interested in all of the

00:25:40,480 --> 00:25:43,919
changelog from

00:25:41,440 --> 00:25:45,279
antonio feel free to see the link it's

00:25:43,919 --> 00:25:48,400
linked in the

00:25:45,279 --> 00:25:48,799
uh main leap landing page on wiki so go

00:25:48,400 --> 00:25:50,480
there

00:25:48,799 --> 00:25:52,000
click on on changes you will see a link

00:25:50,480 --> 00:25:54,960
to katie i've already placed it there

00:25:52,000 --> 00:25:56,080
i think yesterday so uh that's it

00:25:54,960 --> 00:25:57,760
regarding kde

00:25:56,080 --> 00:25:59,440
uh yeah and the highlights like what do

00:25:57,760 --> 00:26:01,039
we want to do for the future right so

00:25:59,440 --> 00:26:02,480
i've asked him hey antonio what's the

00:26:01,039 --> 00:26:04,320
plan for the next release

00:26:02,480 --> 00:26:05,520
and uh anthony said it's pretty easy

00:26:04,320 --> 00:26:07,120
let's make sure that we deliver the

00:26:05,520 --> 00:26:09,679
latest kde version which is available

00:26:07,120 --> 00:26:11,520
today to the release date of leap

00:26:09,679 --> 00:26:13,360
and uh and do our best job also have

00:26:11,520 --> 00:26:15,120
mentioned that the current kde is not

00:26:13,360 --> 00:26:16,240
sub uh doesn't have valence default

00:26:15,120 --> 00:26:17,760
option

00:26:16,240 --> 00:26:19,679
so in the next release he would like to

00:26:17,760 --> 00:26:22,240
see that so uh

00:26:19,679 --> 00:26:24,159
if you are valent then you should expect

00:26:22,240 --> 00:26:25,440
kde to be by default running on weyland

00:26:24,159 --> 00:26:28,559
in the next release

00:26:25,440 --> 00:26:30,000
at least this is his wish so uh since we

00:26:28,559 --> 00:26:31,039
are mentioning kde i would like to cover

00:26:30,000 --> 00:26:33,039
gnome as well

00:26:31,039 --> 00:26:34,720
uh norm is a little bit tricky because

00:26:33,039 --> 00:26:34,960
uh with gnome we are actually dependent

00:26:34,720 --> 00:26:37,039
on

00:26:34,960 --> 00:26:39,360
the on on sleeve right because the

00:26:37,039 --> 00:26:40,799
version update at least in 152 landed in

00:26:39,360 --> 00:26:43,120
sleeve first and then it got to

00:26:40,799 --> 00:26:44,720
to to leave you've heard it took us six

00:26:43,120 --> 00:26:46,159
weeks which is something that we have to

00:26:44,720 --> 00:26:47,039
address that's something that shouldn't

00:26:46,159 --> 00:26:50,240
happen

00:26:47,039 --> 00:26:52,240
uh the changes again like uh now we have

00:26:50,240 --> 00:26:57,120
valent enabled by defaulting down

00:26:52,240 --> 00:26:59,440
in in 15.2 their

00:26:57,120 --> 00:27:00,799
internal update uh gnome is one of the

00:26:59,440 --> 00:27:03,360
subsystems which

00:27:00,799 --> 00:27:04,880
are actually subject to the uh feature

00:27:03,360 --> 00:27:07,919
sync let's quite like that because we

00:27:04,880 --> 00:27:10,480
differentiate in in many few details

00:27:07,919 --> 00:27:12,400
uh in some cases branding is very

00:27:10,480 --> 00:27:13,039
problematic to make sure that we can

00:27:12,400 --> 00:27:14,799
actually

00:27:13,039 --> 00:27:16,720
you know build the same code and leave

00:27:14,799 --> 00:27:18,880
and see and produces the same content

00:27:16,720 --> 00:27:22,000
without branding

00:27:18,880 --> 00:27:23,840
so i would like to actually highlight an

00:27:22,000 --> 00:27:25,520
iphone 74 because dark team is really

00:27:23,840 --> 00:27:26,320
doing a lot of effort to get this all

00:27:25,520 --> 00:27:27,919
together

00:27:26,320 --> 00:27:29,600
and make sure that that we have unified

00:27:27,919 --> 00:27:31,679
source for libensley

00:27:29,600 --> 00:27:33,840
so uh the goal is actually not to do all

00:27:31,679 --> 00:27:35,679
of it in 15.2 because we just don't have

00:27:33,840 --> 00:27:36,880
capacity for it and the timing also

00:27:35,679 --> 00:27:39,120
isn't like the best

00:27:36,880 --> 00:27:41,440
so again it's it's it's once we release

00:27:39,120 --> 00:27:43,120
or we get to the freeze for 52 with

00:27:41,440 --> 00:27:45,039
public rc2 they will stop with the

00:27:43,120 --> 00:27:46,640
effort and we will resume in 153 when

00:27:45,039 --> 00:27:48,000
the goal is to have actually to be able

00:27:46,640 --> 00:27:49,840
to reuse the binaries

00:27:48,000 --> 00:27:51,600
and then have just separate branding

00:27:49,840 --> 00:27:52,640
packages for leap this is the goal for

00:27:51,600 --> 00:27:54,799
gnome

00:27:52,640 --> 00:27:56,880
and the plan for 153 so whatever sli

00:27:54,799 --> 00:27:59,440
updates to we need to be there as well

00:27:56,880 --> 00:28:00,799
and we want to be identical i feel like

00:27:59,440 --> 00:28:03,360
this this is this is already a

00:28:00,799 --> 00:28:06,399
challenging goal

00:28:03,360 --> 00:28:08,559
uh for example just to say like

00:28:06,399 --> 00:28:09,600
why identical is important so when i was

00:28:08,559 --> 00:28:11,520
processing uh

00:28:09,600 --> 00:28:13,200
open view results for gnome it took me

00:28:11,520 --> 00:28:16,159
literally days actually to get

00:28:13,200 --> 00:28:17,760
you know results green it was just

00:28:16,159 --> 00:28:19,360
refreshing needles refreshing needles

00:28:17,760 --> 00:28:21,440
refreshing needless and then maybe

00:28:19,360 --> 00:28:22,399
you know like fixing a few tests or

00:28:21,440 --> 00:28:24,480
asking

00:28:22,399 --> 00:28:26,080
our quality issuance team to fix it but

00:28:24,480 --> 00:28:27,360
it's it's quite an effort and i feel

00:28:26,080 --> 00:28:29,760
like the identically

00:28:27,360 --> 00:28:31,200
identical thing could actually make leap

00:28:29,760 --> 00:28:34,320
you know

00:28:31,200 --> 00:28:37,039
better fast follower in in this regard

00:28:34,320 --> 00:28:38,080
which is important so uh some highlights

00:28:37,039 --> 00:28:41,360
for virtualization

00:28:38,080 --> 00:28:42,240
uh so thanks to effort of wslt mainly

00:28:41,360 --> 00:28:45,440
ludwig

00:28:42,240 --> 00:28:46,880
scott and jeff we do have wsr 2.0

00:28:45,440 --> 00:28:47,360
support we are building in the devil

00:28:46,880 --> 00:28:49,520
project

00:28:47,360 --> 00:28:50,559
it will be ready to link within you uh

00:28:49,520 --> 00:28:53,120
shortly

00:28:50,559 --> 00:28:55,360
um what's what's kind of interesting

00:28:53,120 --> 00:28:56,000
about this is topic that that maybe many

00:28:55,360 --> 00:28:57,760
people

00:28:56,000 --> 00:28:59,520
you know on this presentation may not be

00:28:57,760 --> 00:29:01,200
interested in but we actually

00:28:59,520 --> 00:29:02,960
based on the double uh windows store

00:29:01,200 --> 00:29:05,039
statistics we have more than 30 000

00:29:02,960 --> 00:29:05,919
downloads of the opensuse elite 151

00:29:05,039 --> 00:29:09,520
image

00:29:05,919 --> 00:29:10,159
and that's quite a lot and we don't you

00:29:09,520 --> 00:29:13,679
know like

00:29:10,159 --> 00:29:15,840
we don't actually test open qa

00:29:13,679 --> 00:29:16,960
or or the wsl in open qra it's not

00:29:15,840 --> 00:29:18,480
tested by pulling

00:29:16,960 --> 00:29:19,760
image from windows store so we are not

00:29:18,480 --> 00:29:21,120
faking these results it's actually

00:29:19,760 --> 00:29:22,320
people or individuals who are featuring

00:29:21,120 --> 00:29:24,720
the images

00:29:22,320 --> 00:29:26,240
so i feel like this is a topic that we

00:29:24,720 --> 00:29:28,640
should exploit a lot and

00:29:26,240 --> 00:29:29,279
and see how we can be better i know that

00:29:28,640 --> 00:29:30,960
we will have

00:29:29,279 --> 00:29:32,880
the entire team actually who is willing

00:29:30,960 --> 00:29:34,799
to test dwsl

00:29:32,880 --> 00:29:37,039
in suse or at least it will not be

00:29:34,799 --> 00:29:38,559
effort of one quality assurance engineer

00:29:37,039 --> 00:29:40,000
it will be actually multiple which is

00:29:38,559 --> 00:29:42,640
great news

00:29:40,000 --> 00:29:44,399
we are also looking for uh for a

00:29:42,640 --> 00:29:46,880
permanent resource for engineering

00:29:44,399 --> 00:29:48,720
um so that's that's i see a great great

00:29:46,880 --> 00:29:50,559
you know future for wsl

00:29:48,720 --> 00:29:51,760
at least when it comes to opensuse also

00:29:50,559 --> 00:29:52,480
i was told that we are the most

00:29:51,760 --> 00:29:54,799
up-to-date

00:29:52,480 --> 00:29:56,399
distribution on the portal i mean

00:29:54,799 --> 00:29:58,240
windows store sorry

00:29:56,399 --> 00:29:59,200
so next thing is kubernetes tech that's

00:29:58,240 --> 00:30:01,039
that's what i would like to thank

00:29:59,200 --> 00:30:03,120
richard and community for for trying to

00:30:01,039 --> 00:30:05,520
get it to leap we are almost done i

00:30:03,120 --> 00:30:06,480
you know to my knowledge uh everything

00:30:05,520 --> 00:30:08,080
is just blocking

00:30:06,480 --> 00:30:09,840
the effort to get it to leave is now

00:30:08,080 --> 00:30:10,399
unblocked and then we should actually

00:30:09,840 --> 00:30:14,159
get

00:30:10,399 --> 00:30:17,600
the last missing piece into sli

00:30:14,159 --> 00:30:20,320
mid next week and uh then

00:30:17,600 --> 00:30:20,960
lip is green so so i'm excited for that

00:30:20,320 --> 00:30:22,880
um

00:30:20,960 --> 00:30:25,440
i've also on the another highlight the

00:30:22,880 --> 00:30:28,720
sleep containers come on

00:30:25,440 --> 00:30:33,039
so that that's for the virtualization

00:30:28,720 --> 00:30:34,559
and uh plans so again virtualization is

00:30:33,039 --> 00:30:36,320
a big group of packages which are

00:30:34,559 --> 00:30:38,240
affected by the feature differences

00:30:36,320 --> 00:30:39,919
i already mentioned that we have a

00:30:38,240 --> 00:30:42,960
cluster fs support in

00:30:39,919 --> 00:30:44,880
in leap while uh

00:30:42,960 --> 00:30:46,720
it's it may be challenging to support it

00:30:44,880 --> 00:30:48,399
on suse's side so so we are looking on

00:30:46,720 --> 00:30:50,480
the alternatives as well

00:30:48,399 --> 00:30:52,080
so perhaps we can separate the package

00:30:50,480 --> 00:30:52,880
um you know like have the function

00:30:52,080 --> 00:30:54,720
within a separate

00:30:52,880 --> 00:30:56,000
srpm which would be available in leap

00:30:54,720 --> 00:30:58,320
only

00:30:56,000 --> 00:30:59,919
and handle it like a branding package or

00:30:58,320 --> 00:31:02,880
or see if there are any other ways how

00:30:59,919 --> 00:31:04,480
we can do that on the obs side

00:31:02,880 --> 00:31:06,159
so this is being looked into there are

00:31:04,480 --> 00:31:06,399
also some features on side which may not

00:31:06,159 --> 00:31:08,480
be

00:31:06,399 --> 00:31:10,240
available in leap so so i feel like this

00:31:08,480 --> 00:31:12,880
entire stack will have

00:31:10,240 --> 00:31:13,440
some nice definition in the next release

00:31:12,880 --> 00:31:14,880
uh we

00:31:13,440 --> 00:31:16,640
we've agreed that we will not be able to

00:31:14,880 --> 00:31:18,399
do much for 15 q because this is really

00:31:16,640 --> 00:31:19,600
heavy topic and most of it will happen

00:31:18,399 --> 00:31:21,760
in the next series

00:31:19,600 --> 00:31:24,799
so stay tuned we will have definitely

00:31:21,760 --> 00:31:26,960
more enterprise tech in leap

00:31:24,799 --> 00:31:29,200
and i feel like the just the technical

00:31:26,960 --> 00:31:31,039
you know implementation of how do we

00:31:29,200 --> 00:31:32,559
deal with the differences and still make

00:31:31,039 --> 00:31:35,600
it like identical

00:31:32,559 --> 00:31:38,559
is is just interesting by itself so so

00:31:35,600 --> 00:31:41,919
let's see how this ends

00:31:38,559 --> 00:31:43,600
uh and this would be towards like the

00:31:41,919 --> 00:31:46,640
content of the box i know that

00:31:43,600 --> 00:31:48,720
we we've added the recently the

00:31:46,640 --> 00:31:50,240
uh lightweight openvpn and so on today

00:31:48,720 --> 00:31:52,080
but uh i would like to focus a little

00:31:50,240 --> 00:31:53,440
bit more on like what what what is the

00:31:52,080 --> 00:31:55,840
open areas for lee

00:31:53,440 --> 00:31:56,720
for leave where i see like either the

00:31:55,840 --> 00:31:58,720
new

00:31:56,720 --> 00:32:00,080
relationship with suzet you know can

00:31:58,720 --> 00:32:01,200
actually take us or or

00:32:00,080 --> 00:32:02,720
generally what's something that we

00:32:01,200 --> 00:32:04,320
should investigate for leap or

00:32:02,720 --> 00:32:07,600
tumbleweed as well

00:32:04,320 --> 00:32:09,200
um so there's one highlight that i

00:32:07,600 --> 00:32:11,840
believe that could raise uh opensuse

00:32:09,200 --> 00:32:14,720
elite visibility in media and so on

00:32:11,840 --> 00:32:16,159
and that's and this is confirmed with

00:32:14,720 --> 00:32:18,240
with developer community i actually

00:32:16,159 --> 00:32:20,000
synced up with them before this talk

00:32:18,240 --> 00:32:20,799
about about what we are going to say

00:32:20,000 --> 00:32:24,399
here

00:32:20,799 --> 00:32:26,320
and uh the the developer community

00:32:24,399 --> 00:32:27,519
program from sousa is really excited

00:32:26,320 --> 00:32:30,159
about like making

00:32:27,519 --> 00:32:30,799
identical platforms have to say because

00:32:30,159 --> 00:32:32,559
uh

00:32:30,799 --> 00:32:34,799
you know like open source elite can be

00:32:32,559 --> 00:32:37,279
advertised as a free

00:32:34,799 --> 00:32:37,919
identical development platform to to

00:32:37,279 --> 00:32:41,200
sleep

00:32:37,919 --> 00:32:42,720
right and uh i'm not sure if you've

00:32:41,200 --> 00:32:44,240
checked the user developer portal

00:32:42,720 --> 00:32:44,640
recently but they have sent books which

00:32:44,240 --> 00:32:46,640
is like

00:32:44,640 --> 00:32:48,399
essentially hey you know you can you can

00:32:46,640 --> 00:32:49,440
run your workload on our containers for

00:32:48,399 --> 00:32:51,600
free you know if you are the

00:32:49,440 --> 00:32:53,679
part of developer community and and play

00:32:51,600 --> 00:32:55,679
with it and i feel like this is a huge

00:32:53,679 --> 00:32:56,799
space for leap and i expect also that

00:32:55,679 --> 00:32:59,440
you know there will be several blog

00:32:56,799 --> 00:33:01,679
posts also putting some light on leap

00:32:59,440 --> 00:33:03,120
which otherwise wouldn't happen so like

00:33:01,679 --> 00:33:05,279
at least from this point of view

00:33:03,120 --> 00:33:07,600
i think it's very very useful for for

00:33:05,279 --> 00:33:09,200
open source visibility so this this new

00:33:07,600 --> 00:33:12,080
relationship that we will have that

00:33:09,200 --> 00:33:15,039
didn't exist before uh i mean with the

00:33:12,080 --> 00:33:18,080
developer community not susan

00:33:15,039 --> 00:33:20,720
will bring some goods i'm sure of that

00:33:18,080 --> 00:33:22,000
another another area which is now being

00:33:20,720 --> 00:33:24,480
opened by the

00:33:22,000 --> 00:33:25,279
sink of sleep in race is the real time

00:33:24,480 --> 00:33:27,279
so um

00:33:25,279 --> 00:33:29,600
there will be a later today presentation

00:33:27,279 --> 00:33:32,159
about uh

00:33:29,600 --> 00:33:33,840
micro s i believe um i'm not sure if

00:33:32,159 --> 00:33:36,000
they will cover leap or not but

00:33:33,840 --> 00:33:38,080
no matter what deep on micro selection

00:33:36,000 --> 00:33:40,000
in the kernel rt so we

00:33:38,080 --> 00:33:41,840
will sink over the kernel rt from the

00:33:40,000 --> 00:33:45,120
real time product in sousa

00:33:41,840 --> 00:33:47,039
to public obs and uh now

00:33:45,120 --> 00:33:49,200
this is the area where i believe it's an

00:33:47,039 --> 00:33:50,240
opportunity for libya and to decide to

00:33:49,200 --> 00:33:52,159
use it

00:33:50,240 --> 00:33:53,679
and have it available just to let you

00:33:52,159 --> 00:33:55,360
know the the current current that we

00:33:53,679 --> 00:33:55,760
have in leap is kind of better suited

00:33:55,360 --> 00:33:57,919
for

00:33:55,760 --> 00:33:58,960
real time than than the default stock

00:33:57,919 --> 00:34:01,039
slash kernel

00:33:58,960 --> 00:34:02,720
so um really we're kind of nice used

00:34:01,039 --> 00:34:06,159
nice uh

00:34:02,720 --> 00:34:08,079
comparison as in reception where you

00:34:06,159 --> 00:34:10,399
know in one case you actually

00:34:08,079 --> 00:34:11,679
you you may not get receptionist in in

00:34:10,399 --> 00:34:12,159
the first two minutes but it's always

00:34:11,679 --> 00:34:14,000
going to

00:34:12,159 --> 00:34:15,839
to arrive there in these two minutes and

00:34:14,000 --> 00:34:16,240
is it okay for you you know in another

00:34:15,839 --> 00:34:17,679
case

00:34:16,240 --> 00:34:19,919
the receptionist will be there always

00:34:17,679 --> 00:34:21,679
within 15 seconds uh are you okay with

00:34:19,919 --> 00:34:22,639
waiting for 15 seconds if you know that

00:34:21,679 --> 00:34:24,159
she will appear

00:34:22,639 --> 00:34:25,760
and in the last case it's there

00:34:24,159 --> 00:34:27,200
constantly and it can always be there

00:34:25,760 --> 00:34:28,960
for you if you need anything

00:34:27,200 --> 00:34:30,639
so still leave would be the second

00:34:28,960 --> 00:34:31,520
category the slee-default kernel is the

00:34:30,639 --> 00:34:33,839
first category

00:34:31,520 --> 00:34:34,639
and and the third category is the kernel

00:34:33,839 --> 00:34:37,599
rt which

00:34:34,639 --> 00:34:39,119
we may consider adding to leap uh so far

00:34:37,599 --> 00:34:40,639
it's it's open topic like there is

00:34:39,119 --> 00:34:42,639
nothing set in stone we know it will be

00:34:40,639 --> 00:34:44,639
in leap micro s that's for sure

00:34:42,639 --> 00:34:45,919
but whether to use it in leap or not uh

00:34:44,639 --> 00:34:47,520
that's another question

00:34:45,919 --> 00:34:49,040
if we would actually accept it there is

00:34:47,520 --> 00:34:52,000
a several other packages which

00:34:49,040 --> 00:34:52,879
actually have rt capabilities uh enabled

00:34:52,000 --> 00:34:54,480
in uh

00:34:52,879 --> 00:34:55,919
in celeste but not in leap and they are

00:34:54,480 --> 00:34:58,640
also part of the you know

00:34:55,919 --> 00:35:00,079
source code unification uh lt tng

00:34:58,640 --> 00:35:01,440
modules and crash to my knowledge there

00:35:00,079 --> 00:35:03,040
will be probably more

00:35:01,440 --> 00:35:04,240
and we also have to decide what to do

00:35:03,040 --> 00:35:05,040
with them in limb do we want the

00:35:04,240 --> 00:35:06,880
features for

00:35:05,040 --> 00:35:09,359
real time but we also need the real time

00:35:06,880 --> 00:35:11,440
kernel or do we not want that

00:35:09,359 --> 00:35:13,119
so i see this is another topic that we

00:35:11,440 --> 00:35:15,200
can exploit for for leap

00:35:13,119 --> 00:35:16,560
uh something else that came to my mind

00:35:15,200 --> 00:35:18,240
and it's not really good candidate for

00:35:16,560 --> 00:35:18,960
leap but maybe it could be if you would

00:35:18,240 --> 00:35:20,960
agree to

00:35:18,960 --> 00:35:22,800
to add some experimental support for it

00:35:20,960 --> 00:35:25,359
and that's the new snapdragon

00:35:22,800 --> 00:35:27,280
laptop wave so you may have noticed the

00:35:25,359 --> 00:35:28,880
r64 laptops i i am

00:35:27,280 --> 00:35:30,560
aware that fedora was pretty active

00:35:28,880 --> 00:35:32,480
there but uh

00:35:30,560 --> 00:35:33,680
so to say i wasn't able to find any open

00:35:32,480 --> 00:35:36,320
source

00:35:33,680 --> 00:35:37,599
involvement at all if if i'm wrong

00:35:36,320 --> 00:35:40,079
please correct me

00:35:37,599 --> 00:35:41,520
but i would be really interested to know

00:35:40,079 --> 00:35:43,280
whether there is somebody else from open

00:35:41,520 --> 00:35:45,280
source community who would like to be

00:35:43,280 --> 00:35:47,359
willing to invest into that area

00:35:45,280 --> 00:35:49,040
or has already the you know snapdragon

00:35:47,359 --> 00:35:50,000
based hardware that he would like to try

00:35:49,040 --> 00:35:51,520
to run leap on

00:35:50,000 --> 00:35:53,040
or or tumble with more likely because of

00:35:51,520 --> 00:35:54,720
the new newer kernel

00:35:53,040 --> 00:35:56,560
currently doesn't have a new enough

00:35:54,720 --> 00:35:58,400
kernel to actually support this hardware

00:35:56,560 --> 00:36:00,240
but it may happen that may change the

00:35:58,400 --> 00:36:02,160
next release or the release after

00:36:00,240 --> 00:36:04,880
so i would be really interested to know

00:36:02,160 --> 00:36:08,160
your feedback on this one

00:36:04,880 --> 00:36:10,720
and uh with this i believe that we've

00:36:08,160 --> 00:36:13,119
kind of met the time

00:36:10,720 --> 00:36:15,359
let me see something got stuck in

00:36:13,119 --> 00:36:17,359
library office because i cannot move to

00:36:15,359 --> 00:36:18,800
next slide but the next slide yeah okay

00:36:17,359 --> 00:36:21,599
now i can

00:36:18,800 --> 00:36:23,119
any questions uh so i would expect some

00:36:21,599 --> 00:36:24,480
discussion to happen like if there is

00:36:23,119 --> 00:36:26,079
something that you would like to see in

00:36:24,480 --> 00:36:27,599
leap or if you are not okay with where

00:36:26,079 --> 00:36:29,440
leap is going or if you would like to

00:36:27,599 --> 00:36:31,280
see some new area being uh

00:36:29,440 --> 00:36:32,560
you know export by by leap where it's

00:36:31,280 --> 00:36:35,599
currently not

00:36:32,560 --> 00:36:36,880
or it's not good enough yet

00:36:35,599 --> 00:36:40,960
so anything that you would like to

00:36:36,880 --> 00:36:43,280
highlight or any concerns

00:36:40,960 --> 00:36:44,960
what may have what may help is that you

00:36:43,280 --> 00:36:46,800
know all the proposals that you've seen

00:36:44,960 --> 00:36:50,000
on opensuse factory

00:36:46,800 --> 00:36:50,480
may be public byzan may be jumped maybe

00:36:50,000 --> 00:36:52,960
the

00:36:50,480 --> 00:36:54,800
causing the leap gap which jump actually

00:36:52,960 --> 00:36:56,480
is part of but it's not just jump it's

00:36:54,800 --> 00:36:57,119
also you know like the process part

00:36:56,480 --> 00:36:59,520
right

00:36:57,119 --> 00:37:00,320
it's bringing the codes together and so

00:36:59,520 --> 00:37:02,960
on

00:37:00,320 --> 00:37:04,720
uh the migration part uh which adrian

00:37:02,960 --> 00:37:06,480
already mentioned

00:37:04,720 --> 00:37:08,240
so these are all in progress right it's

00:37:06,480 --> 00:37:10,160
not set in stone and we have a

00:37:08,240 --> 00:37:11,920
i feel like we are in a you know we

00:37:10,160 --> 00:37:13,359
still have an option to actually steer

00:37:11,920 --> 00:37:16,560
it where we want

00:37:13,359 --> 00:37:17,839
if it doesn't work for us like i i i'm

00:37:16,560 --> 00:37:19,760
really happy that i have some background

00:37:17,839 --> 00:37:20,160
from sleep because i see the processes i

00:37:19,760 --> 00:37:22,800
see

00:37:20,160 --> 00:37:24,400
the parts right hinderly as well so i

00:37:22,800 --> 00:37:26,079
see a chance where this can be

00:37:24,400 --> 00:37:27,920
changed towards you know being more

00:37:26,079 --> 00:37:31,280
friendly to leap as well

00:37:27,920 --> 00:37:33,359
um so i'm very optimistic i'm not

00:37:31,280 --> 00:37:35,440
like i personally feel like it's going

00:37:33,359 --> 00:37:38,320
to bring more good than that

00:37:35,440 --> 00:37:38,320
so what about you

00:37:45,920 --> 00:37:53,599
either mics are muted or no questions

00:37:50,320 --> 00:37:56,320
i mean you were very very

00:37:53,599 --> 00:37:58,160
comprehensive on this so i feel like you

00:37:56,320 --> 00:38:00,640
answered everything i could possibly ask

00:37:58,160 --> 00:38:00,640
about this

00:38:01,440 --> 00:38:04,640
well we'll see it's not just me right

00:38:03,920 --> 00:38:06,560
it's also

00:38:04,640 --> 00:38:07,680
uh you have to make sure that it works

00:38:06,560 --> 00:38:10,560
with other teams

00:38:07,680 --> 00:38:11,280
um so to say there is a lot of areas

00:38:10,560 --> 00:38:13,200
that we will have to

00:38:11,280 --> 00:38:15,040
explore like maintenance you know like

00:38:13,200 --> 00:38:16,640
can we make maintenance updates easier

00:38:15,040 --> 00:38:18,160
for leap with the new approach

00:38:16,640 --> 00:38:19,680
if we could release them just once let's

00:38:18,160 --> 00:38:21,839
say and so on

00:38:19,680 --> 00:38:22,800
so it's it's uh there is a lot of puzzle

00:38:21,839 --> 00:38:25,119
pieces and

00:38:22,800 --> 00:38:26,160
you know we can try to affect them and

00:38:25,119 --> 00:38:27,839
in some cases

00:38:26,160 --> 00:38:30,480
we will be able to in some cases we

00:38:27,839 --> 00:38:33,359
won't be so i guess one thing that's

00:38:30,480 --> 00:38:34,400
uh somewhat uh confusing for me with

00:38:33,359 --> 00:38:36,480
this is like

00:38:34,400 --> 00:38:38,000
out of this future strategy for leap

00:38:36,480 --> 00:38:39,040
involves the jump thing that was

00:38:38,000 --> 00:38:41,520
announced just a little bit

00:38:39,040 --> 00:38:43,280
just not just i would say causing the

00:38:41,520 --> 00:38:43,920
lead gap as the effort more than just

00:38:43,280 --> 00:38:45,520
jump because

00:38:43,920 --> 00:38:47,359
it's multiple pieces it's public

00:38:45,520 --> 00:38:48,079
bugzilla processes improvement like

00:38:47,359 --> 00:38:50,160
reducing

00:38:48,079 --> 00:38:51,760
you know the inner like you know when we

00:38:50,160 --> 00:38:53,359
block currently users to contribute to

00:38:51,760 --> 00:38:53,760
sleep packages that's not jump that's

00:38:53,359 --> 00:38:55,920
that's

00:38:53,760 --> 00:38:58,240
existing problem right so it's right but

00:38:55,920 --> 00:39:00,240
jump jump maybe answer to many of these

00:38:58,240 --> 00:39:02,000
uh or not just the only answer but part

00:39:00,240 --> 00:39:06,160
of the answer

00:39:02,000 --> 00:39:09,119
so i guess is one of the end state goals

00:39:06,160 --> 00:39:10,560
is that when people want to make fixes

00:39:09,119 --> 00:39:12,640
to sleep packages

00:39:10,560 --> 00:39:14,079
they can send this sr straight to the

00:39:12,640 --> 00:39:15,839
sleeve project

00:39:14,079 --> 00:39:17,440
and it won't just get auto closed and

00:39:15,839 --> 00:39:20,000
denied so

00:39:17,440 --> 00:39:22,560
my goal and what i actually also also

00:39:20,000 --> 00:39:24,400
mentioned i believe in in the faq

00:39:22,560 --> 00:39:26,240
or the sleep process request i'm not

00:39:24,400 --> 00:39:28,480
sure if you've seen the link uh

00:39:26,240 --> 00:39:29,280
since the feature requests and personas

00:39:28,480 --> 00:39:31,520
specifically

00:39:29,280 --> 00:39:33,119
is that i don't like personally the the

00:39:31,520 --> 00:39:34,560
reject statement i think it's a very

00:39:33,119 --> 00:39:36,960
strong statement

00:39:34,560 --> 00:39:37,920
and i i feel like it's the motivating

00:39:36,960 --> 00:39:39,520
statement right if

00:39:37,920 --> 00:39:41,520
we just keep on rejecting every single

00:39:39,520 --> 00:39:42,800
submission which is being sent and yes

00:39:41,520 --> 00:39:44,400
something happens on the other side

00:39:42,800 --> 00:39:46,400
behind the wall with no clear updates

00:39:44,400 --> 00:39:48,320
like this is not the way we want to take

00:39:46,400 --> 00:39:49,680
so i would personally like to you know

00:39:48,320 --> 00:39:50,800
like for me if

00:39:49,680 --> 00:39:52,720
if the change needs to happen on the

00:39:50,800 --> 00:39:54,240
other side no matter what and we are

00:39:52,720 --> 00:39:56,160
able to transport that submission

00:39:54,240 --> 00:39:58,240
without rejecting it maybe with some new

00:39:56,160 --> 00:39:58,720
state in obs or maybe some proceeded

00:39:58,240 --> 00:40:01,280
which

00:39:58,720 --> 00:40:03,280
already is not as bad as as reject i

00:40:01,280 --> 00:40:05,520
would be more open towards this way

00:40:03,280 --> 00:40:06,960
but i feel like in october which is the

00:40:05,520 --> 00:40:09,839
deadline for the process

00:40:06,960 --> 00:40:10,880
this reject is unacceptable so that will

00:40:09,839 --> 00:40:12,400
not happen

00:40:10,880 --> 00:40:14,960
we just need to figure out how to date

00:40:12,400 --> 00:40:17,839
not you know like nicely

00:40:14,960 --> 00:40:17,839
right that you know

00:40:18,079 --> 00:40:21,599
it's two instances right let's not let's

00:40:19,920 --> 00:40:22,160
be honest like and we have to figure out

00:40:21,599 --> 00:40:24,720
how to

00:40:22,160 --> 00:40:26,079
sync state or or do it kind of in a way

00:40:24,720 --> 00:40:27,440
that you get updates from the other

00:40:26,079 --> 00:40:29,200
instance could be through through

00:40:27,440 --> 00:40:31,040
existing jira that we have for partners

00:40:29,200 --> 00:40:34,000
could be through some other tool

00:40:31,040 --> 00:40:36,839
i don't know answer to that tool yet but

00:40:34,000 --> 00:40:39,040
i know it's not going to be

00:40:36,839 --> 00:40:42,160
rejected would like that

00:40:39,040 --> 00:40:43,760
i mean the technical implementation is

00:40:42,160 --> 00:40:46,240
most likely that we

00:40:43,760 --> 00:40:48,560
i mean when you create a submit request

00:40:46,240 --> 00:40:51,440
to to jump or the new

00:40:48,560 --> 00:40:52,000
futurely you would see that it actually

00:40:51,440 --> 00:40:55,119
goes to

00:40:52,000 --> 00:40:59,040
the zeus lee projects

00:40:55,119 --> 00:41:02,319
and yeah so that and we could

00:40:59,040 --> 00:41:05,760
give feedback on this request here but

00:41:02,319 --> 00:41:07,040
so the technical part from the obs side

00:41:05,760 --> 00:41:10,880
is relative easy

00:41:07,040 --> 00:41:12,960
the hard part is um to discuss with all

00:41:10,880 --> 00:41:14,480
the lease managers and all code owners

00:41:12,960 --> 00:41:19,280
and so on um

00:41:14,480 --> 00:41:21,839
that this actually also um

00:41:19,280 --> 00:41:23,359
yeah commitment to uh to work on these

00:41:21,839 --> 00:41:26,000
and

00:41:23,359 --> 00:41:26,800
so this is something what you need to do

00:41:26,000 --> 00:41:28,240
and especially

00:41:26,800 --> 00:41:31,280
because it's maintenance updates or

00:41:28,240 --> 00:41:34,480
maintenance will be here a very big part

00:41:31,280 --> 00:41:37,839
but i have also to say maintenance team

00:41:34,480 --> 00:41:41,599
themselves is very open so they are also

00:41:37,839 --> 00:41:45,280
already thinking about how to test the

00:41:41,599 --> 00:41:48,400
updates lay updates including the jump

00:41:45,280 --> 00:41:49,839
because they know that if these a slay

00:41:48,400 --> 00:41:52,160
update it will also be

00:41:49,839 --> 00:41:53,680
used in jump so that they include in the

00:41:52,160 --> 00:41:57,599
slave testing also jump

00:41:53,680 --> 00:41:57,599
so this is also an ongoing discussion

00:41:57,680 --> 00:42:01,359
i also would like to highlight one thing

00:41:59,359 --> 00:42:02,160
which may not be obvious because like

00:42:01,359 --> 00:42:04,560
leap is

00:42:02,160 --> 00:42:06,400
built in completely different way so uh

00:42:04,560 --> 00:42:08,160
when we say maintenance update

00:42:06,400 --> 00:42:09,920
and let's say you would like to send a

00:42:08,160 --> 00:42:11,839
beta submission for leap

00:42:09,920 --> 00:42:13,760
like that beta submission for leave

00:42:11,839 --> 00:42:15,440
which is you know targeting one of the

00:42:13,760 --> 00:42:16,960
packages in the first threat of the

00:42:15,440 --> 00:42:18,160
enterprise packages can be maintenance

00:42:16,960 --> 00:42:21,280
update as well

00:42:18,160 --> 00:42:24,000
and this is solely done by the fact that

00:42:21,280 --> 00:42:25,760
the suse linux enterprise is using the

00:42:24,000 --> 00:42:27,680
inheritance model where

00:42:25,760 --> 00:42:29,520
essentially the service pack 2 you know

00:42:27,680 --> 00:42:31,520
the equivalent of 15.2

00:42:29,520 --> 00:42:32,880
may actually inherit package from one of

00:42:31,520 --> 00:42:35,520
the update streams

00:42:32,880 --> 00:42:36,400
so in fact the solution for accepting

00:42:35,520 --> 00:42:38,720
the submission

00:42:36,400 --> 00:42:39,520
is to release let's say an update to 15

00:42:38,720 --> 00:42:41,839
1 and then

00:42:39,520 --> 00:42:42,720
service pack 2 sorry 15 sp1 and then

00:42:41,839 --> 00:42:44,560
service pack 2

00:42:42,720 --> 00:42:46,720
inherits this submission you know the

00:42:44,560 --> 00:42:47,599
another option is to fork it but uh this

00:42:46,720 --> 00:42:49,760
is going

00:42:47,599 --> 00:42:51,040
you know like this makes the maintenance

00:42:49,760 --> 00:42:52,000
more complicated because you have to

00:42:51,040 --> 00:42:54,319
check multiple

00:42:52,000 --> 00:42:55,920
you know origins of the package right so

00:42:54,319 --> 00:42:57,440
this is something that may be unclear

00:42:55,920 --> 00:42:58,800
and it's not just that if we will

00:42:57,440 --> 00:43:00,480
receive a late submission you know it

00:42:58,800 --> 00:43:02,240
will be maintenance of it maybe also

00:43:00,480 --> 00:43:04,319
very early submission

00:43:02,240 --> 00:43:06,079
so this this this makes it a little bit

00:43:04,319 --> 00:43:08,720
more complex i have to say

00:43:06,079 --> 00:43:09,280
so so i've recently uh did an effort to

00:43:08,720 --> 00:43:10,960
document

00:43:09,280 --> 00:43:12,800
i think like it was five cases in the

00:43:10,960 --> 00:43:14,560
end what can happen with this submission

00:43:12,800 --> 00:43:15,920
and maintenance team is involved

00:43:14,560 --> 00:43:19,200
involved in three options

00:43:15,920 --> 00:43:20,800
so yeah it's it's tricky

00:43:19,200 --> 00:43:22,720
so by the way the document will make it

00:43:20,800 --> 00:43:25,760
public i think hopefully next week

00:43:22,720 --> 00:43:29,760
just it's still being cooked uh

00:43:25,760 --> 00:43:31,359
inside so anything else

00:43:29,760 --> 00:43:33,760
and also i'm not sure if we've answered

00:43:31,359 --> 00:43:36,640
you neil

00:43:33,760 --> 00:43:37,599
i i feel like you kind of did uh like

00:43:36,640 --> 00:43:39,920
the

00:43:37,599 --> 00:43:40,960
i guess part of it is like i just want

00:43:39,920 --> 00:43:44,400
to see that

00:43:40,960 --> 00:43:46,560
when all of this is put together that me

00:43:44,400 --> 00:43:48,640
as an external contributor whenever i

00:43:46,560 --> 00:43:49,680
find a plug in a package that is managed

00:43:48,640 --> 00:43:52,240
by susa

00:43:49,680 --> 00:43:53,119
i'm not screwed on trying to fix it and

00:43:52,240 --> 00:43:55,680
then waiting

00:43:53,119 --> 00:43:58,160
for months on end for a fix to be going

00:43:55,680 --> 00:44:01,280
through some black hole

00:43:58,160 --> 00:44:02,960
yeah so uh there's like one situation

00:44:01,280 --> 00:44:04,480
where i feel like this may happen and

00:44:02,960 --> 00:44:07,440
this is still i don't have like

00:44:04,480 --> 00:44:09,520
even like idea about how to solve it in

00:44:07,440 --> 00:44:11,359
the way that could work for everyone

00:44:09,520 --> 00:44:13,200
and i've already seen one submission

00:44:11,359 --> 00:44:13,520
like that i think it was even for from

00:44:13,200 --> 00:44:15,520
you

00:44:13,520 --> 00:44:17,680
it was the python this steps uh support

00:44:15,520 --> 00:44:19,839
in rpm which required rebuild of

00:44:17,680 --> 00:44:20,880
several python packages and we are

00:44:19,839 --> 00:44:23,520
willing to do this

00:44:20,880 --> 00:44:24,960
uh actually i did con i think that we've

00:44:23,520 --> 00:44:26,720
agreed with tomas that we will do it but

00:44:24,960 --> 00:44:27,920
we will not do it in 152 because it's

00:44:26,720 --> 00:44:29,359
already like in rc

00:44:27,920 --> 00:44:30,560
you know leap is a little bit shifted so

00:44:29,359 --> 00:44:31,280
we are not there yet they are already

00:44:30,560 --> 00:44:33,599
there

00:44:31,280 --> 00:44:35,119
and for for st it's unacceptable to

00:44:33,599 --> 00:44:35,680
rebuild a lot of packages in maintenance

00:44:35,119 --> 00:44:37,440
stream

00:44:35,680 --> 00:44:38,880
at this point so we would like we would

00:44:37,440 --> 00:44:39,920
probably have to fold these packages in

00:44:38,880 --> 00:44:41,280
next release

00:44:39,920 --> 00:44:43,119
and this is something which is not

00:44:41,280 --> 00:44:43,920
transparent and therefore it's confusing

00:44:43,119 --> 00:44:46,880
and you know like

00:44:43,920 --> 00:44:47,599
kind of annoying as well so uh we need

00:44:46,880 --> 00:44:49,359
to figure out

00:44:47,599 --> 00:44:51,119
the way how to make this transparent and

00:44:49,359 --> 00:44:52,240
say yes let's do it you know like these

00:44:51,119 --> 00:44:53,760
are the problems

00:44:52,240 --> 00:44:55,200
and with this option if you know that

00:44:53,760 --> 00:44:56,480
this change is going to happen like is

00:44:55,200 --> 00:44:57,839
there any workaround that we can do on

00:44:56,480 --> 00:44:59,280
the leap side because this is going to

00:44:57,839 --> 00:45:01,599
happen we have a confirmation

00:44:59,280 --> 00:45:03,359
can we keep a temporary fork and then

00:45:01,599 --> 00:45:05,520
you know it complicates the maintenance

00:45:03,359 --> 00:45:06,720
uh set up and then you know like we will

00:45:05,520 --> 00:45:08,560
have to release a separate maintenance

00:45:06,720 --> 00:45:11,119
update for this and so on

00:45:08,560 --> 00:45:12,240
so it's quite complex topic but uh i

00:45:11,119 --> 00:45:14,800
would like to find a

00:45:12,240 --> 00:45:16,640
you know if if the next release is fine

00:45:14,800 --> 00:45:18,000
if we open it post beta

00:45:16,640 --> 00:45:19,680
you know in early phase it could still

00:45:18,000 --> 00:45:21,680
happen but if you open it post beta such

00:45:19,680 --> 00:45:22,560
request and is it okay to fix it in next

00:45:21,680 --> 00:45:24,319
three days

00:45:22,560 --> 00:45:26,000
or do we have to do intermediate step to

00:45:24,319 --> 00:45:27,920
have it done in leap sooner

00:45:26,000 --> 00:45:29,520
is it blocking any extra work you know

00:45:27,920 --> 00:45:30,720
which is which is expecting this change

00:45:29,520 --> 00:45:33,040
to be in place

00:45:30,720 --> 00:45:34,319
so i feel like we should have a plan to

00:45:33,040 --> 00:45:37,760
do to have some sort of

00:45:34,319 --> 00:45:39,599
solution that works for all but

00:45:37,760 --> 00:45:41,280
right if you want the enterprise we

00:45:39,599 --> 00:45:43,280
still have to you know respect the

00:45:41,280 --> 00:45:45,280
the individual phases of the product and

00:45:43,280 --> 00:45:47,839
do not you know do a dramatic changes in

00:45:45,280 --> 00:45:50,079
in rcp so it's it's it's complex stuff

00:45:47,839 --> 00:45:50,079
okay

00:45:50,560 --> 00:45:53,599
and yeah i get all of that it's just

00:45:52,319 --> 00:45:57,440
it's kind of

00:45:53,599 --> 00:45:57,440
it's just too opaque at the end

00:45:58,839 --> 00:46:02,319
right

00:46:00,720 --> 00:46:04,720
so let's see that i hope that we can

00:46:02,319 --> 00:46:06,640
improve and i believe that we can so

00:46:04,720 --> 00:46:08,720
don't it only depends whether you know

00:46:06,640 --> 00:46:12,079
we can take that path and whether it's

00:46:08,720 --> 00:46:12,079
okay with everyone yeah

00:46:12,560 --> 00:46:14,800

YouTube URL: https://www.youtube.com/watch?v=CC9xZDCuUyg


