Title: Flexible and Fast Software Delivery with OBS
Publication date: 2020-05-26
Playlist: openSUSE Virtual Summit 2020
Description: 
	Slides ► https://bit.ly/2XsfAbz


Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,000 --> 00:00:04,440
and so my name is Neil complement DevOps

00:00:03,000 --> 00:00:06,420
engineer at Daddo and I'm here to talk

00:00:04,440 --> 00:00:09,870
about you know software delivery with

00:00:06,420 --> 00:00:11,809
OBS so a little bit about Who I am I

00:00:09,870 --> 00:00:15,330
like to call myself a professional

00:00:11,809 --> 00:00:18,720
technologist I've been a Linux user for

00:00:15,330 --> 00:00:19,289
actually over 15 years now I shouldn't

00:00:18,720 --> 00:00:21,390
fix that

00:00:19,289 --> 00:00:23,130
oh well I've been a little accuser for

00:00:21,390 --> 00:00:24,990
over 15 years I'm contributor and a

00:00:23,130 --> 00:00:27,810
developer in fedora mafia

00:00:24,990 --> 00:00:29,130
openSUSE open Mandriva distributions and

00:00:27,810 --> 00:00:30,750
there are a few others here and there

00:00:29,130 --> 00:00:34,500
and contributed to some I'm a

00:00:30,750 --> 00:00:36,510
contributor to rpm DNF various related

00:00:34,500 --> 00:00:39,719
projects to that to that software

00:00:36,510 --> 00:00:41,460
management stack like koji build system

00:00:39,719 --> 00:00:43,950
the open build service and other things

00:00:41,460 --> 00:00:45,899
like that of course as I said earlier

00:00:43,950 --> 00:00:49,530
I'm a DevOps engineer that's my day job

00:00:45,899 --> 00:00:51,360
I love orchestral symphonic music anime

00:00:49,530 --> 00:00:55,320
and manga global history and linguistics

00:00:51,360 --> 00:00:56,520
but overly spicy food not so much and of

00:00:55,320 --> 00:00:58,770
course if you want to reach me at any

00:00:56,520 --> 00:01:06,600
point like my Twitter and email address

00:00:58,770 --> 00:01:08,040
there so a little bit about about why we

00:01:06,600 --> 00:01:10,470
got to obs like i want to talk about

00:01:08,040 --> 00:01:12,659
like how we how data as a company

00:01:10,470 --> 00:01:16,799
started in this software delivery space

00:01:12,659 --> 00:01:19,049
so like most modern software development

00:01:16,799 --> 00:01:21,060
companies they use a Linux based system

00:01:19,049 --> 00:01:22,650
we we use a bun too on our

00:01:21,060 --> 00:01:24,119
infrastructure and a nard but in our

00:01:22,650 --> 00:01:26,340
equipment and things like that

00:01:24,119 --> 00:01:30,180
but the general focus historically like

00:01:26,340 --> 00:01:32,100
pre my era was often about just making a

00:01:30,180 --> 00:01:34,409
software rather than shipping it when it

00:01:32,100 --> 00:01:36,600
came time to actually get the software

00:01:34,409 --> 00:01:38,880
to servers and spices and things like

00:01:36,600 --> 00:01:40,710
that we used to do things like you know

00:01:38,880 --> 00:01:43,170
if I'm being charitable I call it the

00:01:40,710 --> 00:01:44,759
kind of bad way we wrapped everything in

00:01:43,170 --> 00:01:46,560
zip archives we pushed them and made

00:01:44,759 --> 00:01:49,380
made the systems remotely unpacked them

00:01:46,560 --> 00:01:50,759
onto the file system over time this

00:01:49,380 --> 00:01:53,790
became more and more complicated as

00:01:50,759 --> 00:01:56,820
setup tasks were needed to do various

00:01:53,790 --> 00:01:59,610
changes as we got more complicated the

00:01:56,820 --> 00:02:01,200
software it led to a very humongous

00:01:59,610 --> 00:02:05,630
mechanism that a lot of people in the

00:02:01,200 --> 00:02:08,399
company collectively called check in and

00:02:05,630 --> 00:02:09,929
this really stopped working about the

00:02:08,399 --> 00:02:11,610
second time we had to upgrade all the

00:02:09,929 --> 00:02:13,560
server and devices so like when we went

00:02:11,610 --> 00:02:20,130
from you know 1004

00:02:13,560 --> 00:02:22,980
to 12:04 - then 1404 that that stopped

00:02:20,130 --> 00:02:26,069
being good so as a company we made the

00:02:22,980 --> 00:02:27,630
transition to using somewhat good Linux

00:02:26,069 --> 00:02:29,760
packaging for our software to handle

00:02:27,630 --> 00:02:31,920
this more smoothly our system for

00:02:29,760 --> 00:02:32,790
handling it was unfortunately a custom

00:02:31,920 --> 00:02:34,470
monstrosity

00:02:32,790 --> 00:02:36,959
was also very limited in what it could

00:02:34,470 --> 00:02:39,870
do it was very very tightly scoped to

00:02:36,959 --> 00:02:42,630
handling that particular use case back

00:02:39,870 --> 00:02:46,530
then but it worked and everything was

00:02:42,630 --> 00:02:49,530
kind of ok until introduced the data

00:02:46,530 --> 00:02:53,819
Linux agent was introduced in datacom 15

00:02:49,530 --> 00:02:56,940
which is data Conn is dados corporate

00:02:53,819 --> 00:03:00,810
you know event in the same way like how

00:02:56,940 --> 00:03:02,910
Souza Khan is for Souza and we we

00:03:00,810 --> 00:03:05,610
announced the data Linux backup agent in

00:03:02,910 --> 00:03:08,340
them and there were a number of issues

00:03:05,610 --> 00:03:10,380
that we mostly had hand waved that this

00:03:08,340 --> 00:03:12,750
brought forth like we couldn't rebuild

00:03:10,380 --> 00:03:14,519
we couldn't build dependent packages and

00:03:12,750 --> 00:03:16,530
chain off

00:03:14,519 --> 00:03:19,370
we were restricted to only one

00:03:16,530 --> 00:03:22,049
distribution family you know a bun - and

00:03:19,370 --> 00:03:24,299
the setup was very fragile we had to go

00:03:22,049 --> 00:03:26,820
in and edit the code to add a new

00:03:24,299 --> 00:03:29,549
package to the build logic and then have

00:03:26,820 --> 00:03:32,400
it chained up with custom setups and it

00:03:29,549 --> 00:03:34,350
was it usually took about a day or so to

00:03:32,400 --> 00:03:36,810
actually get a package registered and

00:03:34,350 --> 00:03:39,840
working and so that was it was a pretty

00:03:36,810 --> 00:03:41,579
miserable experience at launch the data

00:03:39,840 --> 00:03:44,760
Linux agent supported fedora

00:03:41,579 --> 00:03:47,489
Red Hat Enterprise Linux CentOS Debian

00:03:44,760 --> 00:03:49,319
and the bloom - LTS and there were plans

00:03:47,489 --> 00:03:51,150
to add SUSE Linux Enterprise openSUSE

00:03:49,319 --> 00:03:52,500
later because of the wider range of

00:03:51,150 --> 00:03:54,750
distributions and dependency

00:03:52,500 --> 00:03:57,510
requirements because the dad old Linux

00:03:54,750 --> 00:03:59,250
agent had multiple packages that were

00:03:57,510 --> 00:04:02,069
chained on each other to do have

00:03:59,250 --> 00:04:04,829
libraries and kernel module features and

00:04:02,069 --> 00:04:07,230
things like that it was it was really

00:04:04,829 --> 00:04:09,900
bad I was forced to build every Linux

00:04:07,230 --> 00:04:11,819
agent release by hand I spent a week to

00:04:09,900 --> 00:04:14,250
actually build and validate them at the

00:04:11,819 --> 00:04:16,760
time and this was again at the beginning

00:04:14,250 --> 00:04:21,659
so they were like 18 builds each time

00:04:16,760 --> 00:04:23,550
and this was when I was this wasn't my

00:04:21,659 --> 00:04:25,340
job back then I was actually just a QA

00:04:23,550 --> 00:04:27,919
engineer back then

00:04:25,340 --> 00:04:29,480
and it meant that every time we were

00:04:27,919 --> 00:04:31,070
doing this I spent a whole week doing

00:04:29,480 --> 00:04:32,960
something that technically wasn't my job

00:04:31,070 --> 00:04:35,900
but we needed to do it to get it out the

00:04:32,960 --> 00:04:38,150
door and I did it because of that this

00:04:35,900 --> 00:04:41,150
was basically destroying me because I

00:04:38,150 --> 00:04:44,000
was not able to do other things and like

00:04:41,150 --> 00:04:46,460
getting one thing wrong in the manual

00:04:44,000 --> 00:04:49,729
process back then um each time we did a

00:04:46,460 --> 00:04:53,060
release was just a miserable experience

00:04:49,729 --> 00:04:54,620
and so I started looking at fixing this

00:04:53,060 --> 00:04:56,840
situation because it wasn't gonna scale

00:04:54,620 --> 00:04:58,820
and as we add more distributions it was

00:04:56,840 --> 00:05:01,310
just going to get worse and worse and

00:04:58,820 --> 00:05:02,630
worse so I looked at the problem on the

00:05:01,310 --> 00:05:04,280
internet and examined what some others

00:05:02,630 --> 00:05:06,979
had done I came up with three major

00:05:04,280 --> 00:05:08,900
alternatives the first one I thought of

00:05:06,979 --> 00:05:11,510
was building a brand new custom system

00:05:08,900 --> 00:05:12,919
using buildbot and adding some

00:05:11,510 --> 00:05:14,690
extensions for handing dependency

00:05:12,919 --> 00:05:18,139
resolution using the hockey module

00:05:14,690 --> 00:05:22,610
hockey for those of you who may or may

00:05:18,139 --> 00:05:25,130
not be aware was a high level API on top

00:05:22,610 --> 00:05:28,060
of the lip solve library to make it

00:05:25,130 --> 00:05:31,639
easier to interface with and do things

00:05:28,060 --> 00:05:33,590
it used to be part of the DNF package

00:05:31,639 --> 00:05:37,490
manager it has since been replaced with

00:05:33,590 --> 00:05:41,030
lib DNF and then another alternative was

00:05:37,490 --> 00:05:42,560
to adapt fedoras mock and Koji to extend

00:05:41,030 --> 00:05:44,510
it to support Debian and Ubuntu builds

00:05:42,560 --> 00:05:46,610
there were a few patches on the internet

00:05:44,510 --> 00:05:49,190
already at the time for doing basic

00:05:46,610 --> 00:05:51,950
support for handling debian builds with

00:05:49,190 --> 00:05:55,130
Koji and I had considered taking that

00:05:51,950 --> 00:05:58,430
path extending it and and using it for

00:05:55,130 --> 00:06:00,979
for arts our tooling and then of course

00:05:58,430 --> 00:06:04,610
the last option was using Susan's open

00:06:00,979 --> 00:06:06,889
built surface for for our needs and

00:06:04,610 --> 00:06:08,150
after a deeper examination of looking at

00:06:06,889 --> 00:06:09,380
like what it could take and how to do

00:06:08,150 --> 00:06:12,380
all this stuff I decided to deploy

00:06:09,380 --> 00:06:14,510
Tobias instance and go from there so why

00:06:12,380 --> 00:06:17,000
did I go with the open build service so

00:06:14,510 --> 00:06:18,919
the open build service you know to kind

00:06:17,000 --> 00:06:20,990
of review a little bit is a software

00:06:18,919 --> 00:06:22,669
solution that was created by Sousa to

00:06:20,990 --> 00:06:24,740
build and manage the open Susan Suzu

00:06:22,669 --> 00:06:26,450
Linux Enterprise distributions and it

00:06:24,740 --> 00:06:28,160
was also designed to support a wide

00:06:26,450 --> 00:06:30,590
variety of other distributions so like

00:06:28,160 --> 00:06:32,330
red hat fedora and you know the bun too

00:06:30,590 --> 00:06:35,419
as well and there's a hosted version of

00:06:32,330 --> 00:06:36,979
the appliance and as the openSUSE build

00:06:35,419 --> 00:06:38,930
service and then of course you can get

00:06:36,979 --> 00:06:41,479
the appliance to down

00:06:38,930 --> 00:06:44,930
and put onto your own systems and that

00:06:41,479 --> 00:06:47,690
went pretty well and we managed to get

00:06:44,930 --> 00:06:49,160
it set up with integrating with vcs's

00:06:47,690 --> 00:06:53,120
which actually turned out to be quite

00:06:49,160 --> 00:06:55,160
useful so we used it set up with pulling

00:06:53,120 --> 00:06:57,860
or receiving code and it has the inputs

00:06:55,160 --> 00:07:00,199
and it can fire off processes to trigger

00:06:57,860 --> 00:07:01,490
automated events failures can also

00:07:00,199 --> 00:07:03,199
trigger events and notifications

00:07:01,490 --> 00:07:05,419
depending on your configuration like

00:07:03,199 --> 00:07:07,580
this is how the openSUSE workflow works

00:07:05,419 --> 00:07:10,070
all of it is chained off of like you

00:07:07,580 --> 00:07:11,780
make a request you merge it in then it

00:07:10,070 --> 00:07:14,360
gets built and then once the build

00:07:11,780 --> 00:07:16,460
succeeds it fires an advantage of AMQP

00:07:14,360 --> 00:07:19,940
and does other stuff that's how the

00:07:16,460 --> 00:07:21,860
pipeline works for that the unique

00:07:19,940 --> 00:07:24,410
features of the input flexibility the

00:07:21,860 --> 00:07:26,150
different build engines the build

00:07:24,410 --> 00:07:29,539
environment set up with pre-install

00:07:26,150 --> 00:07:31,460
images and the the real big thing the

00:07:29,539 --> 00:07:33,560
real winner was the automatic reverse

00:07:31,460 --> 00:07:36,680
dependency rebuilding on package updates

00:07:33,560 --> 00:07:39,800
the the fact that there was a guarantee

00:07:36,680 --> 00:07:42,530
of end result consistency was a huge

00:07:39,800 --> 00:07:45,620
deal and it made things so much easier

00:07:42,530 --> 00:07:47,449
because then people weren't having to

00:07:45,620 --> 00:07:51,830
handhold everything through all the

00:07:47,449 --> 00:07:54,340
other levels like for a team of one at

00:07:51,830 --> 00:07:58,370
the time who was managing this system

00:07:54,340 --> 00:08:00,800
there was no way that I was going to be

00:07:58,370 --> 00:08:02,720
able to deal with having to rebuild

00:08:00,800 --> 00:08:04,940
everybody else's packages all the time

00:08:02,720 --> 00:08:08,210
and the rest of the company didn't care

00:08:04,940 --> 00:08:10,250
at the time and so why why put myself

00:08:08,210 --> 00:08:12,169
through that pain if I don't have to so

00:08:10,250 --> 00:08:13,669
I wasn't going to and we have

00:08:12,169 --> 00:08:18,259
customizable build environments which

00:08:13,669 --> 00:08:20,599
was just a nice cherry on top so how do

00:08:18,259 --> 00:08:22,220
we use it we've got it deployed with the

00:08:20,599 --> 00:08:24,830
official appliance provided the website

00:08:22,220 --> 00:08:26,810
on an all-in-one configuration the

00:08:24,830 --> 00:08:28,460
plants runs in a VM without nested

00:08:26,810 --> 00:08:30,770
virtualization so container environments

00:08:28,460 --> 00:08:32,450
are used so we primarily targeted them

00:08:30,770 --> 00:08:34,700
to for most of our software that we

00:08:32,450 --> 00:08:37,339
build all of our software with RPM spec

00:08:34,700 --> 00:08:39,440
files using the OBS spec builder engine

00:08:37,339 --> 00:08:41,360
and the tool called Deb build and the

00:08:39,440 --> 00:08:44,720
end result is even though we're building

00:08:41,360 --> 00:08:46,399
using standard or common rpm practices

00:08:44,720 --> 00:08:48,920
and structures and things like that

00:08:46,399 --> 00:08:51,410
the end result are native mostly proper

00:08:48,920 --> 00:08:53,270
Debian packages and if I take the care

00:08:51,410 --> 00:08:54,829
to do it they even more or less fully

00:08:53,270 --> 00:08:57,410
comply with Debian policy

00:08:54,829 --> 00:08:58,700
it isn't horribly difficult and it

00:08:57,410 --> 00:09:01,490
doesn't make you feel like you hurt

00:08:58,700 --> 00:09:06,440
yourself trying to build a debian

00:09:01,490 --> 00:09:08,720
package and we currently build over 500

00:09:06,440 --> 00:09:11,959
packages across nearly 350 projects with

00:09:08,720 --> 00:09:13,640
over 1100 repos on the last Masri build

00:09:11,959 --> 00:09:15,920
them we did with us took approximately

00:09:13,640 --> 00:09:18,560
eight ish hours across six builders on

00:09:15,920 --> 00:09:20,240
the single machine most projects target

00:09:18,560 --> 00:09:22,370
at least two distribution families and

00:09:20,240 --> 00:09:26,029
produce native packages for both using

00:09:22,370 --> 00:09:27,860
the same RPM spec file the data linux

00:09:26,029 --> 00:09:29,959
agent is a little bit on the special

00:09:27,860 --> 00:09:31,910
side this has been built for over 50

00:09:29,959 --> 00:09:34,490
different Linux distribution targets

00:09:31,910 --> 00:09:38,570
across all versions and it has ever

00:09:34,490 --> 00:09:40,940
existed on the Red Hat souza and Debian

00:09:38,570 --> 00:09:42,829
families at this point in time we cook

00:09:40,940 --> 00:09:46,699
we support a little under half that with

00:09:42,829 --> 00:09:49,760
the most current versions so that's like

00:09:46,699 --> 00:09:51,709
we what would have taken me like if I'd

00:09:49,760 --> 00:09:55,699
gone the old way it would have taken me

00:09:51,709 --> 00:09:57,199
a month to make a release like I don't I

00:09:55,699 --> 00:09:59,329
don't know if anyone would have been

00:09:57,199 --> 00:10:04,130
willing to accept me spending one month

00:09:59,329 --> 00:10:06,620
working on one thing like that that's

00:10:04,130 --> 00:10:08,300
asking for a lot from anybody also it's

00:10:06,620 --> 00:10:10,839
not even something I like doing I don't

00:10:08,300 --> 00:10:13,490
like manually building everything so

00:10:10,839 --> 00:10:17,300
that that was no fun and I'm happy that

00:10:13,490 --> 00:10:18,980
I don't do that so a little I want to

00:10:17,300 --> 00:10:26,150
show you a little bit of like how this

00:10:18,980 --> 00:10:29,630
system kind of works for us and let's go

00:10:26,150 --> 00:10:31,790
over here so I've got here a git server

00:10:29,630 --> 00:10:35,449
so like all of our workflow is get

00:10:31,790 --> 00:10:39,709
oriented so we do everything through a

00:10:35,449 --> 00:10:43,010
git server and then our infrastructure

00:10:39,709 --> 00:10:45,440
around this we'll push those into the

00:10:43,010 --> 00:10:50,779
build system and make make it happen so

00:10:45,440 --> 00:10:53,360
like I did most recently I did go line

00:10:50,779 --> 00:10:57,550
here so like I won't go and push it it

00:10:53,360 --> 00:10:57,550
out so this is the go line package

00:11:01,329 --> 00:11:07,329
and one of the things that we do is that

00:11:04,149 --> 00:11:09,759
in for most of the packages we're

00:11:07,329 --> 00:11:11,679
getting from that we're back boarding or

00:11:09,759 --> 00:11:13,449
14 from a distribution or introducing

00:11:11,679 --> 00:11:15,850
that isn't available in a dip or bun -

00:11:13,449 --> 00:11:19,449
we actually forked the package from

00:11:15,850 --> 00:11:21,279
fedoras and we used that as our starting

00:11:19,449 --> 00:11:22,809
point for our own packaging and if we

00:11:21,279 --> 00:11:24,790
create new packages of open-source

00:11:22,809 --> 00:11:27,790
software we contributed also back into

00:11:24,790 --> 00:11:31,629
the Donora while maintaining a tiny

00:11:27,790 --> 00:11:34,329
Delta for the debian bunches so like it

00:11:31,629 --> 00:11:38,049
has our total history it's we have

00:11:34,329 --> 00:11:40,509
branches or managing each time we do

00:11:38,049 --> 00:11:45,699
free bases and all the trees of all the

00:11:40,509 --> 00:11:48,399
versions we've ever done and let's go

00:11:45,699 --> 00:11:50,170
back to the commits view here and to

00:11:48,399 --> 00:11:52,179
kind of give you an idea of like what

00:11:50,170 --> 00:11:54,730
was actually required to do this this

00:11:52,179 --> 00:11:57,610
dip shows you know just some of the

00:11:54,730 --> 00:11:59,350
changes we made mostly it was I I turned

00:11:57,610 --> 00:12:01,829
off the tasks because they don't work in

00:11:59,350 --> 00:12:07,019
OBS and the go compiler is awful

00:12:01,829 --> 00:12:09,519
like that's just an unfortunate reality

00:12:07,019 --> 00:12:10,989
set up some conditionals here it's just

00:12:09,519 --> 00:12:13,569
basically dealing with the differences

00:12:10,989 --> 00:12:15,959
between a dev and an RPM build so deb

00:12:13,569 --> 00:12:19,059
build while it does provide you this

00:12:15,959 --> 00:12:21,790
abstraction at this common abstraction

00:12:19,059 --> 00:12:23,769
and a common interface sorry of being

00:12:21,790 --> 00:12:26,679
able to structure how you do a package

00:12:23,769 --> 00:12:28,899
at all it does not hide the differences

00:12:26,679 --> 00:12:31,929
between distributions so you do still

00:12:28,899 --> 00:12:33,850
need to know stuff but it's hopefully

00:12:31,929 --> 00:12:35,649
minimize because you can leverage a lot

00:12:33,850 --> 00:12:38,649
of what is common among linux

00:12:35,649 --> 00:12:40,919
distributions so like with alternatives

00:12:38,649 --> 00:12:43,419
being in different places arm

00:12:40,919 --> 00:12:46,949
architectures getting rid of

00:12:43,419 --> 00:12:49,209
conditionals that don't make sense

00:12:46,949 --> 00:12:52,839
debian requires you to have a group and

00:12:49,209 --> 00:12:56,139
a packager tag so they're set then you

00:12:52,839 --> 00:12:58,269
see these Ubuntu and Debian macro

00:12:56,139 --> 00:13:00,220
conditionals like if you had with Sousa

00:12:58,269 --> 00:13:02,049
versions and whatnot and then the rest

00:13:00,220 --> 00:13:04,449
of its adding provides to be backwards

00:13:02,049 --> 00:13:06,040
compatible to packages that expect the

00:13:04,449 --> 00:13:09,639
normal debian package names for

00:13:06,040 --> 00:13:12,879
everything and so like it's it actually

00:13:09,639 --> 00:13:14,110
is really simple most of the time it

00:13:12,879 --> 00:13:14,860
takes a lot of testing to make sure

00:13:14,110 --> 00:13:16,000
everything's fine

00:13:14,860 --> 00:13:18,910
because sometimes there's just

00:13:16,000 --> 00:13:20,470
unexpected things like I had to omit a

00:13:18,910 --> 00:13:24,390
particular source from being installed

00:13:20,470 --> 00:13:27,940
because it doesn't make sense there and

00:13:24,390 --> 00:13:30,070
then just adjusting you know the

00:13:27,940 --> 00:13:32,620
scriptlets work differently so like RPM

00:13:30,070 --> 00:13:36,310
does or the first argument it passes a

00:13:32,620 --> 00:13:39,310
number well d package password and it's

00:13:36,310 --> 00:13:41,590
a it's the action that it is doing so

00:13:39,310 --> 00:13:44,040
you have to deal with that difference

00:13:41,590 --> 00:13:46,750
but otherwise it's it's pretty much fine

00:13:44,040 --> 00:13:50,380
and then of course just doing that and

00:13:46,750 --> 00:13:57,250
then from the OBS side like we can see

00:13:50,380 --> 00:14:00,600
here so the Fedora 31 build is done you

00:13:57,250 --> 00:14:02,920
can see it's the same spec file here and

00:14:00,600 --> 00:14:04,870
the spec file looks like how it would if

00:14:02,920 --> 00:14:10,480
you were using OBS of course just even

00:14:04,870 --> 00:14:13,120
in openSUSE and on here it's building

00:14:10,480 --> 00:14:16,300
the build route and actually starting to

00:14:13,120 --> 00:14:18,520
build the go compiler here it applies

00:14:16,300 --> 00:14:21,400
the patches it runs through the steps it

00:14:18,520 --> 00:14:23,370
does the go Arch setup and like

00:14:21,400 --> 00:14:28,080
everything is actually correctly bad and

00:14:23,370 --> 00:14:30,160
it will it'll build the package properly

00:14:28,080 --> 00:14:31,540
let's see if we've got some that have

00:14:30,160 --> 00:14:34,540
actually completed so the other one I

00:14:31,540 --> 00:14:36,340
pulled over was no js' and here we

00:14:34,540 --> 00:14:38,170
actually have all the Abunda packages

00:14:36,340 --> 00:14:41,620
built and it's still building through

00:14:38,170 --> 00:14:45,880
the fedora build chain and so like if I

00:14:41,620 --> 00:14:49,750
go into let's go to node J s and go into

00:14:45,880 --> 00:14:51,610
a bun to 1804 you can see deb build

00:14:49,750 --> 00:14:54,070
produces an artifact called an s deb

00:14:51,610 --> 00:14:57,280
similar to the source RPM and it's just

00:14:54,070 --> 00:15:02,230
the sources and specs folders tarred up

00:14:57,280 --> 00:15:04,720
inside but like you have the the library

00:15:02,230 --> 00:15:07,870
packages you have the interpreter the

00:15:04,720 --> 00:15:11,740
NPM build and they have all those things

00:15:07,870 --> 00:15:15,910
set up and then if i look here you can

00:15:11,740 --> 00:15:18,340
see i mean it's it's your normal RPM

00:15:15,910 --> 00:15:21,370
build blog up until it reaches kind at

00:15:18,340 --> 00:15:24,370
the end where it says it's where it's

00:15:21,370 --> 00:15:25,900
got a package creation stage and that's

00:15:24,370 --> 00:15:28,030
where it's making the Deb's

00:15:25,900 --> 00:15:32,020
so creating packages

00:15:28,030 --> 00:15:35,730
and like most the time the the changes

00:15:32,020 --> 00:15:42,060
that we have to make from Fedora 2 to

00:15:35,730 --> 00:15:42,060
Ubuntu or Debian free are really minimal

00:15:49,290 --> 00:15:58,600
can can I just remind everyone to mute

00:15:52,810 --> 00:16:04,750
their microphones on their system thank

00:15:58,600 --> 00:16:06,580
you so so that's a little bit about like

00:16:04,750 --> 00:16:09,900
how data uses OBS and that's how it kind

00:16:06,580 --> 00:16:12,610
of looks like who else

00:16:09,900 --> 00:16:14,350
obviously openSUSE does since have made

00:16:12,610 --> 00:16:17,530
the build system so I sure hope they use

00:16:14,350 --> 00:16:20,250
it also another one it's pac-man which

00:16:17,530 --> 00:16:23,110
in the if you're if you're familiar with

00:16:20,250 --> 00:16:26,140
in in the fedora world they have RPM

00:16:23,110 --> 00:16:28,660
fusion pac-man is openSUSE equivalent it

00:16:26,140 --> 00:16:32,460
is the place where stuff that can't go

00:16:28,660 --> 00:16:35,650
into openSUSE lives for various reasons

00:16:32,460 --> 00:16:37,900
the mayor project or I think they're now

00:16:35,650 --> 00:16:39,250
called sailfish OS now a sailfish OS

00:16:37,900 --> 00:16:41,830
core or something like that

00:16:39,250 --> 00:16:43,750
Tizen from the Linux Foundation and

00:16:41,830 --> 00:16:46,360
Lennar Oh does a lot of their arm stuff

00:16:43,750 --> 00:16:49,960
in a no BS instance Dell has a

00:16:46,360 --> 00:16:51,760
non-public OBS that they use for

00:16:49,960 --> 00:16:54,460
building the packages that they ship for

00:16:51,760 --> 00:16:59,290
souza distributions and and rent at

00:16:54,460 --> 00:17:01,210
distributions collabora they that

00:16:59,290 --> 00:17:04,660
company almost entirely operates in the

00:17:01,210 --> 00:17:06,790
Debian world but they use OBS as well

00:17:04,660 --> 00:17:09,730
and they maintain their own Fork of OBS

00:17:06,790 --> 00:17:11,890
from for handling their very specific

00:17:09,730 --> 00:17:15,459
use cases for their build system video

00:17:11,890 --> 00:17:20,230
land uses an internal OBS instance for

00:17:15,459 --> 00:17:23,319
their Souza packaged builds and I think

00:17:20,230 --> 00:17:26,170
they also have a stripped-down version

00:17:23,319 --> 00:17:28,810
of software down openSUSE org to

00:17:26,170 --> 00:17:31,450
actually set up that page because it

00:17:28,810 --> 00:17:37,440
looks very similar to how it software o

00:17:31,450 --> 00:17:39,520
used to look so yeah OBS is awesome and

00:17:37,440 --> 00:17:41,350
if you're interested working on this

00:17:39,520 --> 00:17:41,860
kind of stuff with us hey where's we're

00:17:41,350 --> 00:17:44,679
hiring

00:17:41,860 --> 00:17:46,600
you know check us out and there's some

00:17:44,679 --> 00:17:50,590
references the build service website and

00:17:46,600 --> 00:17:53,080
the dead build project and of course the

00:17:50,590 --> 00:17:54,280
documentation which has improved a lot

00:17:53,080 --> 00:17:56,140
in recent years and it's made things

00:17:54,280 --> 00:18:01,290
quite a bit helpful quite a bit more

00:17:56,140 --> 00:18:10,570
helpful so if you've got any questions I

00:18:01,290 --> 00:18:19,710
I'm happy to answer nothing at all

00:18:10,570 --> 00:18:28,150
I also think the Ericsson uses OBS

00:18:19,710 --> 00:18:30,370
really okay I think so for me it's kind

00:18:28,150 --> 00:18:32,919
of super cool to hear it because I used

00:18:30,370 --> 00:18:35,410
to work with you know both Koji and OBS

00:18:32,919 --> 00:18:41,070
and it's kind of nice to see why you go

00:18:35,410 --> 00:18:43,840
for one and the other yeah no you know

00:18:41,070 --> 00:18:46,510
OBS has been very awesome to us and it

00:18:43,840 --> 00:18:48,340
has made a lot of those stuff I do so

00:18:46,510 --> 00:18:50,650
much easier it's one of the more stable

00:18:48,340 --> 00:18:52,030
pieces of our infrastructure in the

00:18:50,650 --> 00:18:58,390
sense that it's very predictable and

00:18:52,030 --> 00:19:00,490
reliable I it's not the if I were to

00:18:58,390 --> 00:19:02,890
compare between Koji and OBS since you

00:19:00,490 --> 00:19:04,480
did bring up the - the way I would

00:19:02,890 --> 00:19:07,330
describe the difference between the two

00:19:04,480 --> 00:19:11,860
is that Koji aims for environmental

00:19:07,330 --> 00:19:13,750
reproducibility and OBS aims for so

00:19:11,860 --> 00:19:15,780
Total Environment reproducibility with

00:19:13,750 --> 00:19:23,710
sources and binaries and everything and

00:19:15,780 --> 00:19:26,140
and OBS aims for by end binary

00:19:23,710 --> 00:19:29,980
consistency so like it really doesn't

00:19:26,140 --> 00:19:32,620
care about the binary packages insofar

00:19:29,980 --> 00:19:34,299
as you know are they built from the

00:19:32,620 --> 00:19:36,940
latest set of from the sources that you

00:19:34,299 --> 00:19:38,980
have and like does it has the rebuilds

00:19:36,940 --> 00:19:41,080
been queued and whatever like its goal

00:19:38,980 --> 00:19:43,450
is to make it so that you reach an end

00:19:41,080 --> 00:19:44,950
very consistent state and the

00:19:43,450 --> 00:19:47,860
intermediate states in the earlier

00:19:44,950 --> 00:19:50,080
States all just don't matter so from

00:19:47,860 --> 00:19:52,300
that perspective it also means that you

00:19:50,080 --> 00:19:54,250
can't really cherry-pick packages from

00:19:52,300 --> 00:19:55,330
older releases or older builds or

00:19:54,250 --> 00:19:57,010
intermediate builds or

00:19:55,330 --> 00:19:58,390
whatever like you don't have that you

00:19:57,010 --> 00:20:01,270
can do that in Kochi you can't do that

00:19:58,390 --> 00:20:02,980
in OBS but OBS also lets you but OBS

00:20:01,270 --> 00:20:04,660
will also just auto rebuild all your

00:20:02,980 --> 00:20:06,850
packages and make sure that they're all

00:20:04,660 --> 00:20:11,230
linked with the right stuff you know and

00:20:06,850 --> 00:20:14,500
you and that trade-off for our

00:20:11,230 --> 00:20:16,720
particular case was worth it I have

00:20:14,500 --> 00:20:21,760
rarely felt like I needed the other

00:20:16,720 --> 00:20:23,410
alternative and fortunately and I think

00:20:21,760 --> 00:20:29,080
I'm okay with with the way that things

00:20:23,410 --> 00:20:31,270
have kind of laid out so if I could

00:20:29,080 --> 00:20:34,420
share one thing that I kind of you know

00:20:31,270 --> 00:20:37,990
what I miss in OBS and I kind of had in

00:20:34,420 --> 00:20:40,240
and Kochi and vice-versa then what coach

00:20:37,990 --> 00:20:41,920
it would be the decoupling of the source

00:20:40,240 --> 00:20:44,290
code management from build system right

00:20:41,920 --> 00:20:46,480
because because you know I prefer get

00:20:44,290 --> 00:20:47,980
let's be honest so that's one thing that

00:20:46,480 --> 00:20:49,990
I kind of missed from Kochi and the

00:20:47,980 --> 00:20:52,390
other thing is people kind of raised

00:20:49,990 --> 00:20:54,790
that Kochi can really replicate build

00:20:52,390 --> 00:20:57,220
you know but it also depends so when I

00:20:54,790 --> 00:20:59,470
actually had a task to reproduce the

00:20:57,220 --> 00:21:02,020
very same rail build that I did not see

00:20:59,470 --> 00:21:03,370
month ago I actually figured out that

00:21:02,020 --> 00:21:05,500
there is a there is a problem because

00:21:03,370 --> 00:21:06,730
you have like config files for certain

00:21:05,500 --> 00:21:08,380
things coming into place which are

00:21:06,730 --> 00:21:10,240
managed in certain git repository they

00:21:08,380 --> 00:21:12,070
change you know especially if it's like

00:21:10,240 --> 00:21:14,350
shared you know Google style git repo

00:21:12,070 --> 00:21:16,180
with everything in it you have to pick

00:21:14,350 --> 00:21:18,940
combination of two files from two

00:21:16,180 --> 00:21:20,710
different revisions not so easy so it

00:21:18,940 --> 00:21:23,200
was quite an effort and also you have to

00:21:20,710 --> 00:21:26,280
clone the tags so I think that it took

00:21:23,200 --> 00:21:28,510
me like two hours at least to get to the

00:21:26,280 --> 00:21:30,100
configuration which enables me to

00:21:28,510 --> 00:21:31,450
rebuild the build sir it's not also

00:21:30,100 --> 00:21:34,060
coming for free its it's also

00:21:31,450 --> 00:21:35,650
challenging sure all right I mean I'm

00:21:34,060 --> 00:21:37,810
not saying that it's an easy or free

00:21:35,650 --> 00:21:41,080
thing to be able to do it but the fact

00:21:37,810 --> 00:21:45,100
that it's possible is is very powerful

00:21:41,080 --> 00:21:46,960
time DB yep and and speaking about the

00:21:45,100 --> 00:21:49,270
get in the version control system at

00:21:46,960 --> 00:21:51,820
data we just don't rely on the OBS

00:21:49,270 --> 00:21:54,430
version control system like at all the

00:21:51,820 --> 00:21:57,520
way that we the way that we tend to

00:21:54,430 --> 00:22:01,480
operate this is all of the operations

00:21:57,520 --> 00:22:04,000
happen via our git server this is not

00:22:01,480 --> 00:22:05,830
our git server this is a separate git

00:22:04,000 --> 00:22:08,050
server that I exported the stuff I

00:22:05,830 --> 00:22:09,010
wanted to show but like in our get

00:22:08,050 --> 00:22:11,710
server we do

00:22:09,010 --> 00:22:14,860
this and we do merge requests and pull

00:22:11,710 --> 00:22:17,650
requests or whatever and when the and as

00:22:14,860 --> 00:22:19,660
part of our NCI pipelines it'll do

00:22:17,650 --> 00:22:21,880
something that I kind of miss from Kochi

00:22:19,660 --> 00:22:23,680
which is scratch builds so it'll do a

00:22:21,880 --> 00:22:24,310
build in the CI environment that'll get

00:22:23,680 --> 00:22:26,410
it run away

00:22:24,310 --> 00:22:29,440
it'll let us verify that the the changes

00:22:26,410 --> 00:22:32,170
aren't broken and that's and when we

00:22:29,440 --> 00:22:34,060
merge and then it's tagged then the tag

00:22:32,170 --> 00:22:35,620
triggers another event to send it to the

00:22:34,060 --> 00:22:37,480
build system and then the build system

00:22:35,620 --> 00:22:39,340
builds and publishes it for real and

00:22:37,480 --> 00:22:42,070
then we have infrastructure supporting

00:22:39,340 --> 00:22:45,250
that to send it off to everything else

00:22:42,070 --> 00:22:47,740
and like one of the things I hope to

00:22:45,250 --> 00:22:49,960
eventually do is like this setup that I

00:22:47,740 --> 00:22:52,330
have here that I'm showing I want to

00:22:49,960 --> 00:22:54,820
replicate this in openSUSE I want to

00:22:52,330 --> 00:22:58,120
make this kind of workflow meaningfully

00:22:54,820 --> 00:23:01,960
possible with open free and open source

00:22:58,120 --> 00:23:03,580
tools that are lightweight and easy to

00:23:01,960 --> 00:23:05,440
replicate for everyone because I know

00:23:03,580 --> 00:23:07,330
that's a feature that I care about I

00:23:05,440 --> 00:23:09,910
used to pray agree about a scratch

00:23:07,330 --> 00:23:10,990
builds like essentially every single

00:23:09,910 --> 00:23:12,730
time when I received a test button

00:23:10,990 --> 00:23:14,200
somebody asked me whether I can spin a

00:23:12,730 --> 00:23:15,760
roll image with it I couldn't because

00:23:14,200 --> 00:23:17,470
the doesn't have build ID therefore you

00:23:15,760 --> 00:23:19,620
cannot really use it in the build system

00:23:17,470 --> 00:23:24,010
so completely through here and I agree

00:23:19,620 --> 00:23:26,290
right and so the the other piece you

00:23:24,010 --> 00:23:28,030
were mentioning about the environment

00:23:26,290 --> 00:23:31,390
reproducibility I think that's one of

00:23:28,030 --> 00:23:33,460
the reasons why I just in general

00:23:31,390 --> 00:23:35,640
strongly discourage the usage of mana

00:23:33,460 --> 00:23:39,160
repose for this kind of stuff because

00:23:35,640 --> 00:23:42,280
Monterey pills provide you yes it's a

00:23:39,160 --> 00:23:44,020
lot easier to make you know wide changes

00:23:42,280 --> 00:23:45,850
across everything but it makes it

00:23:44,020 --> 00:23:47,950
functionally impossible for you to pick

00:23:45,850 --> 00:23:49,840
and choose and recompose an exact

00:23:47,950 --> 00:23:52,870
environment based on like how artifacts

00:23:49,840 --> 00:23:55,900
have changed so like generally speaking

00:23:52,870 --> 00:23:57,520
I would say configuration for specific

00:23:55,900 --> 00:23:59,530
things break it apart into separate

00:23:57,520 --> 00:24:01,780
repos if you're and if you're git server

00:23:59,530 --> 00:24:03,430
is anything like Packer where you can

00:24:01,780 --> 00:24:05,620
set up the structures however you like

00:24:03,430 --> 00:24:08,860
you can set up custom hooks underneath

00:24:05,620 --> 00:24:11,710
it you can do you can do a venting and

00:24:08,860 --> 00:24:13,570
stuff like that then you can you can be

00:24:11,710 --> 00:24:15,160
very you can make it so that every

00:24:13,570 --> 00:24:18,910
there's a full chain of traceability

00:24:15,160 --> 00:24:22,809
from the git commit all the way to to

00:24:18,910 --> 00:24:24,309
the published RPM and this is

00:24:22,809 --> 00:24:27,279
something that we try very hard to have

00:24:24,309 --> 00:24:30,039
and to emulate it at Daddo I mean we

00:24:27,279 --> 00:24:33,669
don't we're not as good as it sa like

00:24:30,039 --> 00:24:36,279
fedora is but we get very close and and

00:24:33,669 --> 00:24:38,110
with the compromises that we've made I

00:24:36,279 --> 00:24:46,779
think we've still made we've made a

00:24:38,110 --> 00:24:48,279
decent infrastructure out of it so I

00:24:46,779 --> 00:24:50,200
have one more question but is there

00:24:48,279 --> 00:24:56,320
anybody else who wants to ask because we

00:24:50,200 --> 00:25:00,509
could easily fill the time come on guys

00:24:56,320 --> 00:25:02,830
race it could have been cool right like

00:25:00,509 --> 00:25:09,869
nobody nobody thinks anything is

00:25:02,830 --> 00:25:09,869
interesting about this go on devotions

00:25:14,850 --> 00:25:19,360
so like I'm not sure if you've covered

00:25:17,619 --> 00:25:21,340
it those varieties I don't have it in my

00:25:19,360 --> 00:25:23,139
mind right now but how do you do any

00:25:21,340 --> 00:25:25,090
sort of pre integration testing so you

00:25:23,139 --> 00:25:29,139
have a you know something like we do on

00:25:25,090 --> 00:25:33,519
staging on leave do you have any so we

00:25:29,139 --> 00:25:36,490
currently don't partly because it was so

00:25:33,519 --> 00:25:39,340
that's not true we we actually do have a

00:25:36,490 --> 00:25:42,220
way to do this so right now our image

00:25:39,340 --> 00:25:44,200
composition process is outside of OBS I

00:25:42,220 --> 00:25:45,700
am actually investigating how to bring

00:25:44,200 --> 00:25:48,759
that into the build service so that we

00:25:45,700 --> 00:25:51,100
can do our staging time is that image

00:25:48,759 --> 00:25:52,749
compose rather than at rpm build time so

00:25:51,100 --> 00:25:56,049
we integrate at the image and then run

00:25:52,749 --> 00:25:58,990
tests on that so right now that process

00:25:56,049 --> 00:26:02,470
exists outside of all of this part and

00:25:58,990 --> 00:26:04,690
part of it and a large reason for that

00:26:02,470 --> 00:26:07,269
is just lots of legacy to untangle it

00:26:04,690 --> 00:26:09,340
and fix but the way that we do it is

00:26:07,269 --> 00:26:12,669
that all the packages get built they get

00:26:09,340 --> 00:26:14,379
dumped into a into a into what we we've

00:26:12,669 --> 00:26:16,509
called colloquially as a package server

00:26:14,379 --> 00:26:20,409
a server then post package repos and

00:26:16,509 --> 00:26:23,169
then there's a when we do image composes

00:26:20,409 --> 00:26:25,960
it includes a manifest that has the

00:26:23,169 --> 00:26:27,999
packages that should be pulled in and it

00:26:25,960 --> 00:26:30,820
attempts it does a build of that image

00:26:27,999 --> 00:26:33,070
set the set of images and then goes

00:26:30,820 --> 00:26:35,110
through and and we pass it through to

00:26:33,070 --> 00:26:36,279
either human testing or automated

00:26:35,110 --> 00:26:38,350
testing

00:26:36,279 --> 00:26:39,549
at one point we had an open QA instance

00:26:38,350 --> 00:26:42,490
that was actually doing things like

00:26:39,549 --> 00:26:44,320
booting up the image clicking through

00:26:42,490 --> 00:26:46,600
things and setting it up and then making

00:26:44,320 --> 00:26:48,159
sure that like workflows work across

00:26:46,600 --> 00:26:50,440
reboots and things like that because we

00:26:48,159 --> 00:26:53,500
were testing USB sticks with persistence

00:26:50,440 --> 00:26:55,090
and things like that and so and then

00:26:53,500 --> 00:26:57,460
there's a lot of the human testing to

00:26:55,090 --> 00:26:59,320
make sure things like web workflows work

00:26:57,460 --> 00:27:01,120
that authentication flows work things

00:26:59,320 --> 00:27:02,950
like that that aren't so easy to

00:27:01,120 --> 00:27:05,500
simulate with automation and then we

00:27:02,950 --> 00:27:07,840
have batteries of functional system

00:27:05,500 --> 00:27:09,759
tests that we run in a separate

00:27:07,840 --> 00:27:12,789
apparatus that we'll just go through and

00:27:09,759 --> 00:27:15,700
just do workflows through automation to

00:27:12,789 --> 00:27:17,799
see how they work as well so I'm trying

00:27:15,700 --> 00:27:19,690
to bring some of that all back into like

00:27:17,799 --> 00:27:22,059
the build service itself that we have

00:27:19,690 --> 00:27:23,860
deployed and wire it back into our git

00:27:22,059 --> 00:27:26,799
server because a lot of our philosophy

00:27:23,860 --> 00:27:28,600
has been we want our gift server to be

00:27:26,799 --> 00:27:31,149
the place where people can figure out

00:27:28,600 --> 00:27:32,289
what's going on and kind of move from

00:27:31,149 --> 00:27:36,429
there

00:27:32,289 --> 00:27:38,500
and so that that's kind of the model

00:27:36,429 --> 00:27:41,830
we're increasingly moving towards like

00:27:38,500 --> 00:27:46,000
as we go through this we want to you

00:27:41,830 --> 00:27:47,860
know further go towards that ideal and I

00:27:46,000 --> 00:27:49,659
think actually I'm a little bit of a

00:27:47,860 --> 00:27:52,539
comment for you lavash so I you were

00:27:49,659 --> 00:27:55,379
talking earlier in your in your talk

00:27:52,539 --> 00:27:58,450
about bridging leap and Slee together

00:27:55,379 --> 00:27:59,919
and one of the things you were talking

00:27:58,450 --> 00:28:02,440
about it's like how do we make it so

00:27:59,919 --> 00:28:05,289
that things carry over from internal to

00:28:02,440 --> 00:28:07,210
external and stuff like yeah so one of

00:28:05,289 --> 00:28:08,710
the ways that you know we have to deal

00:28:07,210 --> 00:28:10,120
with that problem at data as well like

00:28:08,710 --> 00:28:13,600
we were crossing the bridge back and

00:28:10,120 --> 00:28:17,049
forth between fedora and and internally

00:28:13,600 --> 00:28:18,970
at Daddo and like having it gets and we

00:28:17,049 --> 00:28:20,580
do that with the git version control and

00:28:18,970 --> 00:28:23,620
being able to have like the history

00:28:20,580 --> 00:28:24,940
unblemished across the tree or if it

00:28:23,620 --> 00:28:27,639
needs to be cleaned up it can be and

00:28:24,940 --> 00:28:29,289
then sent along the line this is

00:28:27,639 --> 00:28:31,149
something that perhaps you could you you

00:28:29,289 --> 00:28:33,100
could explore for some of the stuff I

00:28:31,149 --> 00:28:35,559
don't know how much you could do in the

00:28:33,100 --> 00:28:37,360
next year but like a longer-term goal

00:28:35,559 --> 00:28:39,279
would be maybe something like having

00:28:37,360 --> 00:28:41,830
Packer instances internal and external

00:28:39,279 --> 00:28:45,190
and using the remote PR feature to send

00:28:41,830 --> 00:28:47,740
things along so that people can so that

00:28:45,190 --> 00:28:49,470
it can cross the git servers and the

00:28:47,740 --> 00:28:52,020
history can be mostly unblemished

00:28:49,470 --> 00:28:53,400
like if a community contributor sends

00:28:52,020 --> 00:28:55,169
something then it can just be

00:28:53,400 --> 00:28:57,210
automatically sent also into the

00:28:55,169 --> 00:29:00,240
internal system and then when accepted

00:28:57,210 --> 00:29:01,980
it syncs back and stuff like that so I I

00:29:00,240 --> 00:29:03,929
see what you mean have you seen the

00:29:01,980 --> 00:29:05,640
checkouts of packages on github under

00:29:03,929 --> 00:29:07,110
open who's actually I believe that

00:29:05,640 --> 00:29:08,880
somebody is spending effort to make sure

00:29:07,110 --> 00:29:14,100
that everything is in OBS is also in

00:29:08,880 --> 00:29:17,520
github so what I'd like to do maybe is

00:29:14,100 --> 00:29:19,470
that perhaps if we set up a small Packer

00:29:17,520 --> 00:29:22,020
instance in openSUSE infrastructure and

00:29:19,470 --> 00:29:25,230
retarget that export make it so that it

00:29:22,020 --> 00:29:27,270
builds like actual packaged source repos

00:29:25,230 --> 00:29:29,460
for each package individually instead of

00:29:27,270 --> 00:29:31,230
in one big repo and then maybe start

00:29:29,460 --> 00:29:32,880
looking at experimenting with that kind

00:29:31,230 --> 00:29:35,340
of model because I think it'd be very

00:29:32,880 --> 00:29:37,650
cool and it'd be a major benefit for

00:29:35,340 --> 00:29:39,960
like how the workflow for contributing

00:29:37,650 --> 00:29:42,419
and downstream and upstream and side

00:29:39,960 --> 00:29:45,600
stream models within the openSUSE

00:29:42,419 --> 00:29:46,950
community yeah I agree it's something

00:29:45,600 --> 00:29:48,419
that Lubich would support as well

00:29:46,950 --> 00:29:50,100
because I remember that he liked it on

00:29:48,419 --> 00:29:51,960
the you know last year presentation and

00:29:50,100 --> 00:29:53,520
I am used to use partners so I liked it

00:29:51,960 --> 00:29:58,350
as well but you know it's it's bigger

00:29:53,520 --> 00:30:00,390
than leap so we ought to start somewhere

00:29:58,350 --> 00:30:01,799
every journey of a single step and all

00:30:00,390 --> 00:30:03,929
that agreed yeah

00:30:01,799 --> 00:30:05,700
so we have give up effort so I guess

00:30:03,929 --> 00:30:08,490
that we can revisit it and see what we

00:30:05,700 --> 00:30:10,289
can do sure sure make sure to race it on

00:30:08,490 --> 00:30:12,770
factory I guess that's that's a good

00:30:10,289 --> 00:30:14,520
starting point

00:30:12,770 --> 00:30:16,799
anything else

00:30:14,520 --> 00:30:20,490
I just went on a random tangent feel

00:30:16,799 --> 00:30:23,490
free to to ask me about that too oh yeah

00:30:20,490 --> 00:30:25,500
can you hear me sorry I yeah okay

00:30:23,490 --> 00:30:28,470
chef Anne's I but here we we know each

00:30:25,500 --> 00:30:31,830
other from the from the key VHL and I'm

00:30:28,470 --> 00:30:33,720
also running a big private of open pill

00:30:31,830 --> 00:30:35,970
service instance and I'm actually also

00:30:33,720 --> 00:30:39,000
looking into putting stuff into into our

00:30:35,970 --> 00:30:41,520
local kid hub instance and I'm actually

00:30:39,000 --> 00:30:44,460
working so that people do not even need

00:30:41,520 --> 00:30:48,600
a no BS account anymore right basically

00:30:44,460 --> 00:30:51,000
I mean by my customers to tell us my

00:30:48,600 --> 00:30:53,940
colleagues they don't know much about

00:30:51,000 --> 00:30:56,490
packaging they do software often it's

00:30:53,940 --> 00:30:59,340
just small packages and then I just I

00:30:56,490 --> 00:31:02,669
just put the spec file into the into the

00:30:59,340 --> 00:31:03,210
kitchen I pour in a typically into the

00:31:02,669 --> 00:31:05,460
specs up

00:31:03,210 --> 00:31:07,169
directory and and get it out with with

00:31:05,460 --> 00:31:10,620
the source service and everything else

00:31:07,169 --> 00:31:12,450
triggered and and even some of them do

00:31:10,620 --> 00:31:15,600
not want to trigger with every commit

00:31:12,450 --> 00:31:20,850
but then the the the token feature of

00:31:15,600 --> 00:31:23,279
the so a token triggered service run is

00:31:20,850 --> 00:31:25,049
a good thing to do it actually they do

00:31:23,279 --> 00:31:28,409
not even need to install always see if

00:31:25,049 --> 00:31:30,779
they're just on Windows services for

00:31:28,409 --> 00:31:33,120
Linux or maybe even just cygwin I just

00:31:30,779 --> 00:31:35,490
made a small script that just curled

00:31:33,120 --> 00:31:37,919
stay API and and allow us to trigger the

00:31:35,490 --> 00:31:41,220
build with a trigger a build and the

00:31:37,919 --> 00:31:42,809
release usually I do a testing repo and

00:31:41,220 --> 00:31:45,330
a release target where packages already

00:31:42,809 --> 00:31:48,000
and so that's stuff where you can get

00:31:45,330 --> 00:31:51,480
people to use OBS without even knowing

00:31:48,000 --> 00:31:54,390
basically sure that was a big part of

00:31:51,480 --> 00:31:57,029
this because most people don't don't

00:31:54,390 --> 00:31:58,590
really want to interface with the build

00:31:57,029 --> 00:32:00,149
service side of things they just want to

00:31:58,590 --> 00:32:02,539
work with the code and that's fine and

00:32:00,149 --> 00:32:05,279
for a lot of our internal packages of

00:32:02,539 --> 00:32:07,409
software we make that is the model that

00:32:05,279 --> 00:32:10,230
we use however one difference between

00:32:07,409 --> 00:32:14,070
what you do and what we do is we don't

00:32:10,230 --> 00:32:15,659
actually allow OBS to pull anything part

00:32:14,070 --> 00:32:18,990
of the problem with having OBS pull

00:32:15,659 --> 00:32:21,419
stuff it doesn't blind we cannot tell

00:32:18,990 --> 00:32:23,760
it's not like copper which has native

00:32:21,419 --> 00:32:26,250
understanding of git and can do things

00:32:23,760 --> 00:32:28,260
like hey if you pass me a web hook with

00:32:26,250 --> 00:32:30,390
details in it I can use those deep

00:32:28,260 --> 00:32:32,159
details to do the correct check out OBS

00:32:30,390 --> 00:32:35,510
does not know how to do that and there

00:32:32,159 --> 00:32:38,399
is no easy way to make that possible so

00:32:35,510 --> 00:32:41,340
we flipped our model to pushing and we

00:32:38,399 --> 00:32:42,809
wrote some I have some tools and scripts

00:32:41,340 --> 00:32:44,970
that I'm in the process of cleaning up

00:32:42,809 --> 00:32:48,450
and and I'm planning to publish that

00:32:44,970 --> 00:32:50,880
will that also make this workflow easier

00:32:48,450 --> 00:32:52,500
and my hope is that once I have all this

00:32:50,880 --> 00:32:54,840
kind of cleaned up and ready to go I can

00:32:52,500 --> 00:32:57,029
also have it with like a demo setup that

00:32:54,840 --> 00:33:00,149
kind of shows how this model would work

00:32:57,029 --> 00:33:02,789
and it's basically we do them scratch

00:33:00,149 --> 00:33:04,919
builds and then we can also we do pushes

00:33:02,789 --> 00:33:07,500
to the OBS VCS and that triggers builds

00:33:04,919 --> 00:33:09,330
and then we listen on the event bus and

00:33:07,500 --> 00:33:12,750
then that lets us update status and

00:33:09,330 --> 00:33:14,899
things like that it that's that's kind

00:33:12,750 --> 00:33:16,679
of the the aim we've gone for because

00:33:14,899 --> 00:33:18,600
because we cannot

00:33:16,679 --> 00:33:20,340
crack we cannot make OBS pick a

00:33:18,600 --> 00:33:23,629
particular commit it always just pick

00:33:20,340 --> 00:33:25,889
something that is not good enough for

00:33:23,629 --> 00:33:28,499
for if you want to have any kind of

00:33:25,889 --> 00:33:31,559
source tracking and reproducibility in

00:33:28,499 --> 00:33:33,389
the in that vein so we kind of flip it

00:33:31,559 --> 00:33:36,409
the other way but it's still it still

00:33:33,389 --> 00:33:39,330
works out pretty well yep

00:33:36,409 --> 00:33:40,799
so what's really interesting it's how

00:33:39,330 --> 00:33:42,090
you are using it it's always good to see

00:33:40,799 --> 00:33:44,940
how other people are using the same

00:33:42,090 --> 00:33:49,350
tools and I quite got some ideas from

00:33:44,940 --> 00:33:51,740
that thanks for the presentation it was

00:33:49,350 --> 00:33:51,740

YouTube URL: https://www.youtube.com/watch?v=Xtv7bq0EPr8


