Title: openSUSE Summit 2020 - MicroOS - The OS that does "just one job"
Publication date: 2020-05-05
Playlist: openSUSE Virtual Summit 2020
Description: 
	As operating systems get used in more and more places, from VMs and Cloud to IoT and Edge and everything in between, there is a simple problem - no one wants to deal with maintaining all of this new stuff.

And yet, most distributions today are expected to be maintained the same way as they were a decade ago. Sure there are nicer tools to automate things, but that's still a lot of work that someone, be a sysadmin or a tool developer, has to take care of.

Given many of these newer use cases involve an operating system being deployed to do 'just one job', do we always need to deploy distros that could be a swiss-army knife capable of doing anything?

openSUSE MicroOS answers this with a clear 'no', providing a 'general purpose but single service' distribution.

Deploy it, set it up to do what you need, and then forget about it while it will patch, reboot, and repair itself.

NOTE: Sorry the questions are cut off at the end, forgot to record the audio feed also.
Captions: 
	00:00:00,609 --> 00:00:07,330
right then hello everybody welcome to my

00:00:03,340 --> 00:00:09,099
session be talking about micro ask the

00:00:07,330 --> 00:00:11,019
new kid on the block when it comes to

00:00:09,099 --> 00:00:12,400
openSUSE distributions although I

00:00:11,019 --> 00:00:14,740
realized today like I've talked about

00:00:12,400 --> 00:00:18,910
this for like two years in a row so it's

00:00:14,740 --> 00:00:20,710
not quite quite so new I mean I've lost

00:00:18,910 --> 00:00:22,930
my mouse for a second there we go um

00:00:20,710 --> 00:00:24,699
first yeah little bit about me just in

00:00:22,930 --> 00:00:26,529
case you didn't know who I was like I've

00:00:24,699 --> 00:00:28,810
been involved in a consumer for like 15

00:00:26,529 --> 00:00:30,189
years and other open source stuff as

00:00:28,810 --> 00:00:32,349
well

00:00:30,189 --> 00:00:35,440
in five years at Sousa over five years

00:00:32,349 --> 00:00:38,200
at Sousa now I'm part of the the future

00:00:35,440 --> 00:00:40,630
technology team which is a team doing

00:00:38,200 --> 00:00:42,670
kind of all of the yeah the latest

00:00:40,630 --> 00:00:45,070
bleeding edge stuff that maybe might

00:00:42,670 --> 00:00:49,120
become some product eating someday in

00:00:45,070 --> 00:00:51,340
the future and that means for the me

00:00:49,120 --> 00:00:53,470
right now I'm mostly looking at this

00:00:51,340 --> 00:00:57,300
topic openSUSE micro RS and it's its

00:00:53,470 --> 00:00:57,300
sister distribution Kubik

00:00:57,640 --> 00:01:01,630
for the the talk today I decided to kind

00:01:00,520 --> 00:01:03,100
of flip it on its head from what I

00:01:01,630 --> 00:01:05,379
normally do and actually start by like

00:01:03,100 --> 00:01:06,670
talking about what micro s isn't because

00:01:05,379 --> 00:01:08,800
you know it's been around a little bit

00:01:06,670 --> 00:01:10,330
now people under some people some of you

00:01:08,800 --> 00:01:11,920
probably have you know maybe even looked

00:01:10,330 --> 00:01:14,020
at it or at least have some idea of what

00:01:11,920 --> 00:01:16,380
it's about and I wanted a Savannah

00:01:14,020 --> 00:01:18,100
bust the myths and sort of some

00:01:16,380 --> 00:01:19,900
misunderstandings that are out there

00:01:18,100 --> 00:01:22,479
then I'll go into greater detail about

00:01:19,900 --> 00:01:25,330
what micros actually is the mindset

00:01:22,479 --> 00:01:28,210
behind it the philosophy what it does

00:01:25,330 --> 00:01:30,160
what it's good for etc and what could be

00:01:28,210 --> 00:01:31,660
sort of next on the agenda for micro s

00:01:30,160 --> 00:01:32,860
and hopefully I've timed this or

00:01:31,660 --> 00:01:34,330
property that'll be enough of time for

00:01:32,860 --> 00:01:37,420
questions that's stuff at the end as

00:01:34,330 --> 00:01:42,450
well so yeah like I said until Conor

00:01:37,420 --> 00:01:45,009
bust some myths about what micro s is

00:01:42,450 --> 00:01:47,290
micro s is not a container operating

00:01:45,009 --> 00:01:49,780
system by that I mean it is not an

00:01:47,290 --> 00:01:51,880
operating system intended for putting

00:01:49,780 --> 00:01:53,680
inside containers so if you think a sort

00:01:51,880 --> 00:01:57,130
of the big wide world of the container

00:01:53,680 --> 00:01:59,830
ecosystem you know there's you know lots

00:01:57,130 --> 00:02:01,840
of containers out there based on alpine

00:01:59,830 --> 00:02:05,020
lots of containers out there based on a

00:02:01,840 --> 00:02:08,049
pun to I'm you know micro s is not there

00:02:05,020 --> 00:02:09,929
to be a distribution where you you know

00:02:08,049 --> 00:02:12,549
you base your containers on my career s

00:02:09,929 --> 00:02:15,040
in fact there's there's no point because

00:02:12,549 --> 00:02:17,260
you know tumbleweed does that better

00:02:15,040 --> 00:02:20,380
than everything else I just mentioned by

00:02:17,260 --> 00:02:21,430
miles already if you look at the the

00:02:20,380 --> 00:02:23,290
registry which I'll be talking about

00:02:21,430 --> 00:02:25,660
later you know we have these are the

00:02:23,290 --> 00:02:27,160
addresses for the official openSUSE

00:02:25,660 --> 00:02:29,920
tumbleweed container and the openSUSE

00:02:27,160 --> 00:02:31,510
busybox container the busybox container

00:02:29,920 --> 00:02:34,600
is just a tumbleweed container that's

00:02:31,510 --> 00:02:36,310
like squished down to ridiculously tiny

00:02:34,600 --> 00:02:39,100
levels you know you're talking about

00:02:36,310 --> 00:02:41,080
containers there which are fully

00:02:39,100 --> 00:02:43,209
featured they can do everything they're

00:02:41,080 --> 00:02:45,790
always updating they're always tested in

00:02:43,209 --> 00:02:47,860
open QA you know they're officially part

00:02:45,790 --> 00:02:50,410
of the openSUSE release process and you

00:02:47,860 --> 00:02:53,290
know beta 19 Megan 9 make together like

00:02:50,410 --> 00:02:55,090
there's there's there's no reason to use

00:02:53,290 --> 00:02:57,790
any other container in my opinion as

00:02:55,090 --> 00:02:59,019
your base container although if you

00:02:57,790 --> 00:03:00,459
don't want to update as often this

00:02:59,019 --> 00:03:03,730
tumbleweed does you know there is a leap

00:03:00,459 --> 00:03:05,019
container as well and so yeah that's

00:03:03,730 --> 00:03:06,760
what you should be using when it comes

00:03:05,019 --> 00:03:10,050
to things like Porter man build docker

00:03:06,760 --> 00:03:12,570
build build okie we just yeah

00:03:10,050 --> 00:03:15,260
micro s well we use the containers but

00:03:12,570 --> 00:03:18,600
we're not the base for the containers

00:03:15,260 --> 00:03:20,520
one thing that's you know the name gives

00:03:18,600 --> 00:03:23,370
it away you know it micro s is trying to

00:03:20,520 --> 00:03:25,500
be small because you know size does

00:03:23,370 --> 00:03:26,880
matter you know it does make something

00:03:25,500 --> 00:03:29,900
like this you know easy to deploy

00:03:26,880 --> 00:03:32,940
there's fewer updates that's less risk

00:03:29,900 --> 00:03:34,200
because if you were updates but it

00:03:32,940 --> 00:03:36,270
doesn't it isn't a case of sort of being

00:03:34,200 --> 00:03:37,320
tiny at any cost you know we're not

00:03:36,270 --> 00:03:39,660
trying to sort of squeeze this down

00:03:37,320 --> 00:03:43,410
again like Alpine where you know it's

00:03:39,660 --> 00:03:45,960
the absolute minimal system it's meant

00:03:43,410 --> 00:03:48,510
to be as small as possible while

00:03:45,960 --> 00:03:50,220
fulfilling its job without compromises

00:03:48,510 --> 00:03:52,680
so there's there's always a little bit

00:03:50,220 --> 00:03:54,390
of a balancing act that said you know

00:03:52,680 --> 00:03:57,030
it's still pretty small and getting

00:03:54,390 --> 00:03:58,530
smaller so like I say without those

00:03:57,030 --> 00:04:00,810
compromises you know when you want to

00:03:58,530 --> 00:04:03,450
install on bare metal we have to include

00:04:00,810 --> 00:04:05,520
stuff like the default girl because the

00:04:03,450 --> 00:04:08,100
default kernel has all of the firmware

00:04:05,520 --> 00:04:09,210
and drivers etc that we need for all the

00:04:08,100 --> 00:04:12,330
hardware that's going to be on bare

00:04:09,210 --> 00:04:14,700
metal so you know the the micro s

00:04:12,330 --> 00:04:16,260
installation without any services

00:04:14,700 --> 00:04:17,940
without even a container one time so

00:04:16,260 --> 00:04:20,989
just like a completely bare micros

00:04:17,940 --> 00:04:22,800
installation is about 620 Meg and

00:04:20,989 --> 00:04:25,860
shrinking and a good chunk of that is

00:04:22,800 --> 00:04:27,330
like I say the colonel if for the VM

00:04:25,860 --> 00:04:29,669
image is you know where we have the

00:04:27,330 --> 00:04:31,290
luxury of knowing we don't need to have

00:04:29,669 --> 00:04:33,480
that hardware support because it's a VM

00:04:31,290 --> 00:04:36,750
so we just have to support the the V but

00:04:33,480 --> 00:04:38,910
what hardware is in the VM you know then

00:04:36,750 --> 00:04:40,680
that shrinks down to you know under 400

00:04:38,910 --> 00:04:45,270
Meg and and you know we're constantly

00:04:40,680 --> 00:04:49,980
optimizing it and tuning matter and I'm

00:04:45,270 --> 00:04:52,410
kind of last you know on this micro RS

00:04:49,980 --> 00:04:56,220
isn't the same as juice or transactional

00:04:52,410 --> 00:04:58,230
so from a code based perspective you

00:04:56,220 --> 00:04:59,850
know micro RS everything in my career is

00:04:58,230 --> 00:05:02,340
in tumbleweed so you know if we're going

00:04:59,850 --> 00:05:04,650
to be like technical about it you know

00:05:02,340 --> 00:05:06,330
yeah everything I'm gonna talk about

00:05:04,650 --> 00:05:08,130
next about what we do in micro s and

00:05:06,330 --> 00:05:10,470
what you can do yes you can recreate it

00:05:08,130 --> 00:05:14,280
in juice and yes you can recreate it in

00:05:10,470 --> 00:05:16,350
transexual server but you know the if

00:05:14,280 --> 00:05:19,410
the difference when it comes to what

00:05:16,350 --> 00:05:20,310
micro s is is really one of of mindset

00:05:19,410 --> 00:05:23,639
and intent

00:05:20,310 --> 00:05:26,159
you know juice is intended to be a rug

00:05:23,639 --> 00:05:28,650
openSUSE deployed from a very small

00:05:26,159 --> 00:05:30,419
image but we expect it to grow to be a

00:05:28,650 --> 00:05:32,340
typical multi-purpose system you know it

00:05:30,419 --> 00:05:35,069
can be your webserver and your mail

00:05:32,340 --> 00:05:36,810
server and yeah and the desktop as well

00:05:35,069 --> 00:05:38,819
if you want and you can do all of that

00:05:36,810 --> 00:05:40,590
you need just its juice because you

00:05:38,819 --> 00:05:42,659
started off very small there isn't that

00:05:40,590 --> 00:05:45,870
kind of expectation of staying very

00:05:42,659 --> 00:05:47,699
small and the same goes for the

00:05:45,870 --> 00:05:49,409
transactional server you know it's got a

00:05:47,699 --> 00:05:51,870
read-only root filesystem it she has a

00:05:49,409 --> 00:05:53,729
lot of the same ideas as we're going to

00:05:51,870 --> 00:05:55,939
talk about with micro s but it's

00:05:53,729 --> 00:05:58,439
expected to you know be that kind of

00:05:55,939 --> 00:06:00,439
openSUSE flexible

00:05:58,439 --> 00:06:03,419
Swiss Army knife that can do everything

00:06:00,439 --> 00:06:04,830
and everything at once and and that's

00:06:03,419 --> 00:06:07,169
not what we're trying to set out to do

00:06:04,830 --> 00:06:08,819
here with my grass you know calling it

00:06:07,169 --> 00:06:10,830
something very different and positioning

00:06:08,819 --> 00:06:12,270
it is something very different because

00:06:10,830 --> 00:06:15,569
that's the whole point to kind of

00:06:12,270 --> 00:06:18,330
optimize for this different view on the

00:06:15,569 --> 00:06:19,979
world that you know the other view of

00:06:18,330 --> 00:06:21,839
the world is already handled perfectly

00:06:19,979 --> 00:06:25,080
fine with what we already have in open

00:06:21,839 --> 00:06:26,759
Susan and so what is micro s well I

00:06:25,080 --> 00:06:28,759
guess the better question is why is

00:06:26,759 --> 00:06:31,949
micro s you know what are we trying to

00:06:28,759 --> 00:06:35,449
achieve by building another distribution

00:06:31,949 --> 00:06:38,460
and throwing it into the openSUSE family

00:06:35,449 --> 00:06:40,139
well it had its heart like computers

00:06:38,460 --> 00:06:42,270
aren't just laptops desktops and servers

00:06:40,139 --> 00:06:44,399
anymore you know that that's you know if

00:06:42,270 --> 00:06:46,589
you've got a whole bunch more devices

00:06:44,399 --> 00:06:49,250
out there that our computers are our

00:06:46,589 --> 00:06:51,990
machines that are x86 easy for machines

00:06:49,250 --> 00:06:53,789
and even when you kind of get past that

00:06:51,990 --> 00:06:55,649
and we want to have an operating system

00:06:53,789 --> 00:06:58,169
that optimized for that all that other

00:06:55,649 --> 00:06:59,879
range of hardware yeah people don't even

00:06:58,169 --> 00:07:01,919
use their laptops desktops and service

00:06:59,879 --> 00:07:03,620
the way they used to and I'll explain a

00:07:01,919 --> 00:07:06,089
little more what I mean about that later

00:07:03,620 --> 00:07:07,229
but you know it's sort of this this

00:07:06,089 --> 00:07:08,909
whole world of you know everything's

00:07:07,229 --> 00:07:10,259
interconnected you can generally assume

00:07:08,909 --> 00:07:11,580
there's a network connection these days

00:07:10,259 --> 00:07:13,529
you can generally assume there's some

00:07:11,580 --> 00:07:18,509
kind of internet connection on that

00:07:13,529 --> 00:07:20,879
network connection and yeah people had a

00:07:18,509 --> 00:07:22,080
poor approaching sort of Linux fresh

00:07:20,879 --> 00:07:24,020
quite often have this sort of

00:07:22,080 --> 00:07:26,250
expectation that it's just gonna work

00:07:24,020 --> 00:07:28,039
and in some ways you know the old

00:07:26,250 --> 00:07:30,509
openSUSE way of doing things

00:07:28,039 --> 00:07:33,269
it doesn't necessarily fit that kind of

00:07:30,509 --> 00:07:35,310
more modern view of looking at that but

00:07:33,269 --> 00:07:37,289
also you've got things like you know IP

00:07:35,310 --> 00:07:37,789
webcams you know these are devices out

00:07:37,289 --> 00:07:40,520
there

00:07:37,789 --> 00:07:41,629
with Linux in them and you know

00:07:40,520 --> 00:07:43,400
everybody's got one

00:07:41,629 --> 00:07:45,740
in fact I'm coming during this session

00:07:43,400 --> 00:07:49,309
on one of course has anybody ever

00:07:45,740 --> 00:07:50,749
updated it most of the cases they

00:07:49,309 --> 00:07:52,309
haven't because most cases of

00:07:50,749 --> 00:07:55,639
manufacturers don't have a decent way of

00:07:52,309 --> 00:07:57,319
doing the updates you know most of the

00:07:55,639 --> 00:07:59,150
malware out there these days isn't

00:07:57,319 --> 00:08:00,860
targeting people's laptops desktops or

00:07:59,150 --> 00:08:02,930
servers anymore it's targeting devices

00:08:00,860 --> 00:08:04,159
like this because you know they're there

00:08:02,930 --> 00:08:06,529
they've got a cone or they can have a

00:08:04,159 --> 00:08:07,939
field day with it no one's patching it

00:08:06,529 --> 00:08:10,399
it's a nightmare to patch what you do

00:08:07,939 --> 00:08:12,770
because if you mess that up there up

00:08:10,399 --> 00:08:14,270
you've just ripped somebody's device you

00:08:12,770 --> 00:08:16,939
know their webcam won't work anymore

00:08:14,270 --> 00:08:19,249
their Rooter won't work anymore the

00:08:16,939 --> 00:08:22,719
worst the best slash worst example of

00:08:19,249 --> 00:08:26,779
this was like oh - in the UK actually

00:08:22,719 --> 00:08:30,529
2018-2019 where they did one of these

00:08:26,779 --> 00:08:34,099
over-the-air updates - literally all of

00:08:30,529 --> 00:08:37,399
their cell towers in the UK and that up

00:08:34,099 --> 00:08:40,010
they broke all of the cell towers 402 in

00:08:37,399 --> 00:08:41,719
the UK and that update also therefore

00:08:40,010 --> 00:08:43,849
broke the network stack that they were

00:08:41,719 --> 00:08:46,339
using for the over-the-air updates so

00:08:43,849 --> 00:08:48,319
they couldn't update any of their

00:08:46,339 --> 00:08:50,870
devices that they just brick so you know

00:08:48,319 --> 00:08:53,000
every single customer couldn't get their

00:08:50,870 --> 00:08:55,490
phone working and they had to send our

00:08:53,000 --> 00:08:57,649
engineers to every single cell tower

00:08:55,490 --> 00:09:00,680
with a laptop to plug into the thing and

00:08:57,649 --> 00:09:05,089
manually fix the thing you know this is

00:09:00,680 --> 00:09:06,889
sort of the worst case example of what

00:09:05,089 --> 00:09:09,860
can go horribly wrong when you've got

00:09:06,889 --> 00:09:12,350
all of these smart devices out there you

00:09:09,860 --> 00:09:15,110
really need to have some way of updating

00:09:12,350 --> 00:09:16,610
it that you know you can get it back to

00:09:15,110 --> 00:09:19,010
a functioning state if something goes

00:09:16,610 --> 00:09:21,860
wrong because you know repairing it it's

00:09:19,010 --> 00:09:23,480
just an absolute nightmare if it doesn't

00:09:21,860 --> 00:09:25,670
and yet you don't want sort of your your

00:09:23,480 --> 00:09:27,500
Lego house to fall into it useless pile

00:09:25,670 --> 00:09:31,940
of bricks you want to keep it all stuck

00:09:27,500 --> 00:09:35,300
together so this this new world you know

00:09:31,940 --> 00:09:37,490
has you know far more yeah this has sort

00:09:35,300 --> 00:09:39,740
of some baked in expectations that come

00:09:37,490 --> 00:09:41,500
with it especially when you're thinking

00:09:39,740 --> 00:09:45,260
you heard of the service side of things

00:09:41,500 --> 00:09:48,050
you know cloud does just mean that

00:09:45,260 --> 00:09:50,089
people can you know to add more hardware

00:09:48,050 --> 00:09:53,779
to their infrastructure at just a credit

00:09:50,089 --> 00:09:55,640
card cost away you've got all these IOT

00:09:53,779 --> 00:09:57,860
devices which you know typically are

00:09:55,640 --> 00:09:59,420
pretty beefy machines these days you

00:09:57,860 --> 00:10:03,110
know things you know they can do a great

00:09:59,420 --> 00:10:05,240
deal but they're focused on being doing

00:10:03,110 --> 00:10:06,290
a single purpose despite what if I'm

00:10:05,240 --> 00:10:08,560
having a general purpose operating

00:10:06,290 --> 00:10:11,649
system underneath it

00:10:08,560 --> 00:10:13,449
virtualization you know in especially in

00:10:11,649 --> 00:10:17,620
this world brings that you know kind of

00:10:13,449 --> 00:10:19,569
even brings that kind of ease of more

00:10:17,620 --> 00:10:21,879
Hardware you know even motor light you

00:10:19,569 --> 00:10:23,199
know if you need more services you just

00:10:21,879 --> 00:10:24,819
throw more VMs at it you don't

00:10:23,199 --> 00:10:26,649
necessarily you know if you've got more

00:10:24,819 --> 00:10:28,329
capacity on your existing hardware you

00:10:26,649 --> 00:10:29,709
don't even have to worry about doing

00:10:28,329 --> 00:10:32,800
your credit card to your cloud container

00:10:29,709 --> 00:10:35,829
your cloud provider and on the container

00:10:32,800 --> 00:10:37,540
side of things you know you've got this

00:10:35,829 --> 00:10:39,279
lovely tool that kind of lean limit

00:10:37,540 --> 00:10:41,680
incompatibilities makes it far more

00:10:39,279 --> 00:10:43,870
easier to just add more services to your

00:10:41,680 --> 00:10:46,029
infrastructure and everything keeps

00:10:43,870 --> 00:10:48,129
working because but everything a buffer

00:10:46,029 --> 00:10:49,779
maybe that service keeps working because

00:10:48,129 --> 00:10:51,850
it's isolated from everything else far

00:10:49,779 --> 00:10:53,920
more than a traditional binary running

00:10:51,850 --> 00:10:59,410
on Linux

00:10:53,920 --> 00:11:00,639
and there we go um regular Linux isn't

00:10:59,410 --> 00:11:02,440
really good enough for this world

00:11:00,639 --> 00:11:03,420
I mean it's used everywhere for it but

00:11:02,440 --> 00:11:05,889
if you kind of look at it objectively

00:11:03,420 --> 00:11:07,600
you know we haven't built the

00:11:05,889 --> 00:11:09,339
traditional Linux distribution with this

00:11:07,600 --> 00:11:11,050
kind of stuff in mind you know we build

00:11:09,339 --> 00:11:13,449
our regular Linux distro boots to be the

00:11:11,050 --> 00:11:14,769
sort of Swiss Army knives so you've got

00:11:13,449 --> 00:11:17,139
a whole bunch of services you've got a

00:11:14,769 --> 00:11:18,699
whole bunch of features in even in a

00:11:17,139 --> 00:11:20,290
well-tested distribution like tumbleweed

00:11:18,699 --> 00:11:21,699
or leap you know that there's always a

00:11:20,290 --> 00:11:24,070
chance of you know if you install

00:11:21,699 --> 00:11:25,420
package X and package Y then they might

00:11:24,070 --> 00:11:28,750
not necessarily work in the way you

00:11:25,420 --> 00:11:30,279
expected them to and even when they do

00:11:28,750 --> 00:11:32,050
all kind of work together you know when

00:11:30,279 --> 00:11:34,029
something goes wrong it's really easy

00:11:32,050 --> 00:11:36,250
for you know a situation where you know

00:11:34,029 --> 00:11:38,529
one service over there you know goes

00:11:36,250 --> 00:11:40,209
crazy starts going nuts and ends up

00:11:38,529 --> 00:11:41,829
breaking your mail server and your web

00:11:40,209 --> 00:11:45,070
server and this and that with the other

00:11:41,829 --> 00:11:46,690
all at the same time but this is kind of

00:11:45,070 --> 00:11:48,519
the world that everybody lives in right

00:11:46,690 --> 00:11:49,660
now when they're doing this on their

00:11:48,519 --> 00:11:51,820
infrastructure you know they take

00:11:49,660 --> 00:11:53,320
regular looks and they have all of these

00:11:51,820 --> 00:11:56,529
problems so you know the way they

00:11:53,320 --> 00:11:58,540
generally mitigate it is like hand brew

00:11:56,529 --> 00:12:00,850
their Linux installation to be like a

00:11:58,540 --> 00:12:04,120
single purpose system yes they deploy

00:12:00,850 --> 00:12:06,970
enum openSUSE or Slee or 1/2 or whatever

00:12:04,120 --> 00:12:09,880
and you know manually trim it down as a

00:12:06,970 --> 00:12:11,740
VM as a cloud instance or cram it into

00:12:09,880 --> 00:12:15,070
an IOT device you know just to do that

00:12:11,740 --> 00:12:16,720
one job you know so they yeah quite

00:12:15,070 --> 00:12:18,550
often you know rip out everything they

00:12:16,720 --> 00:12:21,070
don't need and kind of keep a minimal

00:12:18,550 --> 00:12:22,750
amount of services in there quite often

00:12:21,070 --> 00:12:25,180
they kind of just ignore patching

00:12:22,750 --> 00:12:27,040
entirely you know just who cares though

00:12:25,180 --> 00:12:29,320
when they're ready for a new update

00:12:27,040 --> 00:12:32,199
they'll deploy a whole new version and

00:12:29,320 --> 00:12:33,820
rip and replace everything and you know

00:12:32,199 --> 00:12:35,019
in a kind of more diverse arrangement

00:12:33,820 --> 00:12:37,149
where you've got sort of lots of these

00:12:35,019 --> 00:12:39,310
instances during you know lots of

00:12:37,149 --> 00:12:41,050
different services you know quite often

00:12:39,310 --> 00:12:43,180
in the olden days we would you know just

00:12:41,050 --> 00:12:46,720
add another rpm to an existing system

00:12:43,180 --> 00:12:48,220
and on some service on there in this day

00:12:46,720 --> 00:12:49,750
in you know in this world you typically

00:12:48,220 --> 00:12:51,940
see you know if someone needs an email

00:12:49,750 --> 00:12:53,589
server they don't add a mouse over to an

00:12:51,940 --> 00:12:56,380
existing system they just deploy a new

00:12:53,589 --> 00:12:58,990
VM or just deploy a new cloud and so

00:12:56,380 --> 00:13:02,170
yeah a new device

00:12:58,990 --> 00:13:03,820
but you know this handcrafting of

00:13:02,170 --> 00:13:07,630
single-purpose systems you know is a

00:13:03,820 --> 00:13:09,250
heck of a lot of work and the nexus

00:13:07,630 --> 00:13:12,190
deviations generally don't have a great

00:13:09,250 --> 00:13:13,540
answer for it you know even even people

00:13:12,190 --> 00:13:15,010
who know how to do this you know they

00:13:13,540 --> 00:13:16,390
have to do the work themselves they have

00:13:15,010 --> 00:13:18,130
to then maintain it themselves

00:13:16,390 --> 00:13:19,630
he's quite often have issues with

00:13:18,130 --> 00:13:22,210
configuration management boasting kind

00:13:19,630 --> 00:13:24,160
of the the big version of that word like

00:13:22,210 --> 00:13:26,680
like Pao was just talking about with uni

00:13:24,160 --> 00:13:27,820
but also kind of in this the small sense

00:13:26,680 --> 00:13:30,160
of the word of just like they're keeping

00:13:27,820 --> 00:13:31,930
all of these machines like having a

00:13:30,160 --> 00:13:33,520
sense of what configuration and keeping

00:13:31,930 --> 00:13:36,030
the configuration like in sync with

00:13:33,520 --> 00:13:39,250
whatever version of whatever's around

00:13:36,030 --> 00:13:40,840
all that kind of issue yeah issues and

00:13:39,250 --> 00:13:42,250
efforts and you know like you say a lot

00:13:40,840 --> 00:13:43,930
of people just forget about the patching

00:13:42,250 --> 00:13:45,970
and throw everything out there but you

00:13:43,930 --> 00:13:47,980
know realistically to do this properly

00:13:45,970 --> 00:13:50,890
you need to keep these systems patched

00:13:47,980 --> 00:13:53,680
maintained and optimizing all of this

00:13:50,890 --> 00:13:57,160
for you know the right amount of RAM CPU

00:13:53,680 --> 00:13:58,840
disk is is hard um you know because not

00:13:57,160 --> 00:14:01,620
necessary everybody knows how this stuff

00:13:58,840 --> 00:14:06,970
you know all works underneath the hood

00:14:01,620 --> 00:14:08,740
um also you know it's a sad facts you

00:14:06,970 --> 00:14:11,110
know even openSUSE and even slate you

00:14:08,740 --> 00:14:13,000
know nobody is perfect you know so you

00:14:11,110 --> 00:14:14,440
know both on the sysadmin side and and

00:14:13,000 --> 00:14:16,240
on the operating system side you know

00:14:14,440 --> 00:14:18,070
the best maintains and best design

00:14:16,240 --> 00:14:23,230
systems are cannot have flaws at some

00:14:18,070 --> 00:14:25,990
point from some vector somewhere and you

00:14:23,230 --> 00:14:28,930
know these need to be well these need to

00:14:25,990 --> 00:14:30,670
be implemented in a way where you know

00:14:28,930 --> 00:14:32,320
they they can be prevented from actually

00:14:30,670 --> 00:14:34,030
impacting the service you know the

00:14:32,320 --> 00:14:35,860
service is what's important but whatever

00:14:34,030 --> 00:14:37,630
you're providing to your users build a

00:14:35,860 --> 00:14:40,030
desktop of a server or a mouse server or

00:14:37,630 --> 00:14:42,610
whatever you know it needs to just work

00:14:40,030 --> 00:14:44,470
for them and quite often it's it's not

00:14:42,610 --> 00:14:46,000
been a topic that many of other

00:14:44,470 --> 00:14:47,290
districts have looked at it's one that a

00:14:46,000 --> 00:14:49,030
Sousa we've looked at for a really long

00:14:47,290 --> 00:14:50,770
time but you know it's kind of worth

00:14:49,030 --> 00:14:51,850
mentioning that is something that's

00:14:50,770 --> 00:14:54,820
really at the heart of what we're

00:14:51,850 --> 00:14:56,500
looking at with micro RS and it kind of

00:14:54,820 --> 00:14:58,570
comes with that philosophy of like if

00:14:56,500 --> 00:15:00,520
something is worth doing it's probably

00:14:58,570 --> 00:15:02,440
worth being able to undo you know if

00:15:00,520 --> 00:15:03,970
you're changing a system if you're

00:15:02,440 --> 00:15:05,320
patching it if you're updating it if

00:15:03,970 --> 00:15:07,480
you're changing a configuration you need

00:15:05,320 --> 00:15:09,460
to be able to undo that because it's a

00:15:07,480 --> 00:15:11,320
retic it happens somebody who just

00:15:09,460 --> 00:15:12,070
joined I think has their microphone open

00:15:11,320 --> 00:15:14,680
protecting him

00:15:12,070 --> 00:15:16,829
self that we could just mute now be

00:15:14,680 --> 00:15:18,869
great

00:15:16,829 --> 00:15:21,029
and of course keeping in mind as well

00:15:18,869 --> 00:15:22,919
sort of the sysadmin mantra you know no

00:15:21,029 --> 00:15:25,319
sysadmin in the world ever wants to such

00:15:22,919 --> 00:15:26,549
a running system and yet every sysadmin

00:15:25,319 --> 00:15:28,109
in the world is running an operating

00:15:26,549 --> 00:15:31,679
system which needs you to touch the

00:15:28,109 --> 00:15:34,469
running system and so with micro RS

00:15:31,679 --> 00:15:35,729
we've you know we've taken apart that

00:15:34,469 --> 00:15:37,649
there's been in the open seas of stock

00:15:35,729 --> 00:15:39,149
for a while now and you know this is

00:15:37,649 --> 00:15:41,549
this concept of transactional updates

00:15:39,149 --> 00:15:43,109
where you know and East any change to a

00:15:41,549 --> 00:15:45,599
system should be applied in a way that's

00:15:43,109 --> 00:15:47,339
like totally reliable totally

00:15:45,599 --> 00:15:49,259
reproducible so if you have all your

00:15:47,339 --> 00:15:52,049
machines they ocean update the same way

00:15:49,259 --> 00:15:53,369
and also reversible so we have the

00:15:52,049 --> 00:15:54,989
transaction or update stack I'm not

00:15:53,369 --> 00:15:55,319
going to go into great detail about it

00:15:54,989 --> 00:15:57,389
here

00:15:55,319 --> 00:15:58,889
but you know transactional updates in

00:15:57,389 --> 00:16:02,159
openSUSE you know are totally enough the

00:15:58,889 --> 00:16:04,379
atomic they easily means in a very the

00:16:02,159 --> 00:16:06,209
fully apply the in all the update with

00:16:04,379 --> 00:16:09,149
all of the rpms and all the patches all

00:16:06,209 --> 00:16:12,029
apply it together or nothing changes on

00:16:09,149 --> 00:16:13,679
the system at all and if something goes

00:16:12,029 --> 00:16:16,259
wrong it's easy to reverse anything

00:16:13,679 --> 00:16:18,569
there and all of that is applied in a

00:16:16,259 --> 00:16:20,729
way where the running system is just not

00:16:18,569 --> 00:16:21,839
impacted in any way manner or form you

00:16:20,729 --> 00:16:23,539
know the running system is running

00:16:21,839 --> 00:16:26,789
perfectly fine transactional updates

00:16:23,539 --> 00:16:28,289
happen in the background and then you

00:16:26,789 --> 00:16:29,939
know when the system next to reboots

00:16:28,289 --> 00:16:32,819
that's actually when the the

00:16:29,939 --> 00:16:34,169
transactional update applies so yeah the

00:16:32,819 --> 00:16:36,979
system isn't running when it's rebooting

00:16:34,169 --> 00:16:42,190
so it's a perfectly safe appointed to

00:16:36,979 --> 00:16:44,580
commit that atomic transaction

00:16:42,190 --> 00:16:47,800
we also have our health checking tool

00:16:44,580 --> 00:16:49,600
which is is there to kind of mom cover

00:16:47,800 --> 00:16:51,970
it for when things don't necessarily go

00:16:49,600 --> 00:16:53,770
wrong so you know looking for errors you

00:16:51,970 --> 00:16:55,450
know during the boot phase so you know

00:16:53,770 --> 00:16:56,740
you've got your transactional updates

00:16:55,450 --> 00:16:58,870
you've applied your update the update

00:16:56,740 --> 00:17:01,210
applied fine you know all the RPMs think

00:16:58,870 --> 00:17:03,040
everything is okay and then on your next

00:17:01,210 --> 00:17:04,780
boot you realize you know that critical

00:17:03,040 --> 00:17:06,189
service that you desperately needs you

00:17:04,780 --> 00:17:07,839
know your container runtime your web

00:17:06,189 --> 00:17:09,790
service whatever you know certainly

00:17:07,839 --> 00:17:12,310
doesn't start so you know health check

00:17:09,790 --> 00:17:13,770
is there for checking with that if the

00:17:12,310 --> 00:17:16,660
error happened with the new snapshot

00:17:13,770 --> 00:17:17,860
which is probably when it happened you

00:17:16,660 --> 00:17:20,370
know health check will automatically

00:17:17,860 --> 00:17:22,839
roll back to the last working snapshot

00:17:20,370 --> 00:17:24,310
if it already you know if you've got an

00:17:22,839 --> 00:17:25,990
issue where actually it booted find

00:17:24,310 --> 00:17:28,569
first time and then like the second time

00:17:25,990 --> 00:17:30,490
it didn't work then health check will

00:17:28,569 --> 00:17:31,930
actually go and automatically people to

00:17:30,490 --> 00:17:34,900
gain you know maybe it'll work the third

00:17:31,930 --> 00:17:36,610
time and if it doesn't then you know

00:17:34,900 --> 00:17:38,070
actually informs the admin at that point

00:17:36,610 --> 00:17:39,880
that you've got like something

00:17:38,070 --> 00:17:41,860
mysterious you know health check doesn't

00:17:39,880 --> 00:17:43,540
want to you know it doesn't want to

00:17:41,860 --> 00:17:45,850
automatically we're back at that point

00:17:43,540 --> 00:17:47,490
because it knows it worked once but you

00:17:45,850 --> 00:17:49,800
obviously your system is you know

00:17:47,490 --> 00:17:52,240
somewhat intermittently misbehaving so

00:17:49,800 --> 00:17:55,240
rather than try and predict the future

00:17:52,240 --> 00:17:56,530
it actually informs the admin health

00:17:55,240 --> 00:17:58,600
check is a magic you know it needs

00:17:56,530 --> 00:18:00,190
access of the hard disk so if the hard

00:17:58,600 --> 00:18:01,660
disk isn't working you know your system

00:18:00,190 --> 00:18:05,470
isn't booting health check can run with

00:18:01,660 --> 00:18:07,180
them yeah but cuff is pretty much the

00:18:05,470 --> 00:18:11,500
vast majority of cases you're gonna have

00:18:07,180 --> 00:18:13,540
where an update breaks your system and

00:18:11,500 --> 00:18:14,890
so this kind of all of these stuff these

00:18:13,540 --> 00:18:17,500
requirements and the tools we already

00:18:14,890 --> 00:18:19,440
have sort of mashed all together so with

00:18:17,500 --> 00:18:23,140
with salt and read-only root file system

00:18:19,440 --> 00:18:24,160
handling become at the the configuration

00:18:23,140 --> 00:18:25,860
management side of things you know

00:18:24,160 --> 00:18:28,240
things can't drift if it's read-only

00:18:25,860 --> 00:18:29,590
with the transaction of updates handling

00:18:28,240 --> 00:18:31,390
the update and afterwards in the

00:18:29,590 --> 00:18:33,520
footprint inna that's that's how we've

00:18:31,390 --> 00:18:38,169
built micro s this sort of perfect

00:18:33,520 --> 00:18:39,690
single service focused operating system

00:18:38,169 --> 00:18:42,610
-

00:18:39,690 --> 00:18:44,440
the tumbleweed microwave s of the one

00:18:42,610 --> 00:18:46,149
everybody knows and loves right now them

00:18:44,440 --> 00:18:48,070
we're thinking of changing the name to

00:18:46,149 --> 00:18:50,139
be a little more specific that it's on

00:18:48,070 --> 00:18:52,659
tumbleweed you know it's a rolling

00:18:50,139 --> 00:18:54,580
release based on tumbleweed it's it's

00:18:52,659 --> 00:18:56,049
part it's fully part of the tumbleweed

00:18:54,580 --> 00:18:58,509
to release process so even though it

00:18:56,049 --> 00:19:00,220
produces separate installation media and

00:18:58,509 --> 00:19:03,399
separate VM images and has a separate

00:19:00,220 --> 00:19:05,440
name you know it's totally part of the

00:19:03,399 --> 00:19:07,360
tumbleweed project in OBS so it's built

00:19:05,440 --> 00:19:09,669
along built as part of it it's developed

00:19:07,360 --> 00:19:11,860
as part of it let's test it is part of

00:19:09,669 --> 00:19:13,720
it and therefore if anything goes wrong

00:19:11,860 --> 00:19:15,639
with micro RS then tumbleweed doesn't

00:19:13,720 --> 00:19:16,899
release which keeps me honest and vice

00:19:15,639 --> 00:19:18,730
versa if anything goes wrong in

00:19:16,899 --> 00:19:20,919
tumbleweed then then micros doesn't

00:19:18,730 --> 00:19:22,379
beliefs so both those distributions get

00:19:20,919 --> 00:19:25,240
blocked whenever there's an issue just

00:19:22,379 --> 00:19:27,659
to make sure we don't diverge in any way

00:19:25,240 --> 00:19:27,659
manner or form

00:19:28,310 --> 00:19:32,450
the hardware requirements you know the

00:19:29,660 --> 00:19:34,730
the main architecture supported on my

00:19:32,450 --> 00:19:36,500
career are arm but she's you know kind

00:19:34,730 --> 00:19:39,050
of in some respects the main one I mean

00:19:36,500 --> 00:19:40,460
it's you know I actually use it on X 56

00:19:39,050 --> 00:19:42,170
64 but you know there's a lot of

00:19:40,460 --> 00:19:44,030
interest on the arm side of things and

00:19:42,170 --> 00:19:47,570
arm themselves contribute directly to

00:19:44,030 --> 00:19:50,990
micro RS and basically near-60 for

00:19:47,570 --> 00:19:52,880
hardware is fully supported either you

00:19:50,990 --> 00:19:56,480
boot firmware anything with the air fine

00:19:52,880 --> 00:19:58,160
just there it an on the x86 64 sides we

00:19:56,480 --> 00:19:59,990
don't care quite so much you know it can

00:19:58,160 --> 00:20:03,680
be UEFI which secure boot or it can be

00:19:59,990 --> 00:20:05,330
legacy bias and the memory footprint

00:20:03,680 --> 00:20:09,080
remember your comments a better to be

00:20:05,330 --> 00:20:11,420
small basically in a 512 megabytes of

00:20:09,080 --> 00:20:14,150
RAM so as my slightest little it needs a

00:20:11,420 --> 00:20:16,460
bit of an update from the a factor of

00:20:14,150 --> 00:20:18,410
negative Ram for the operating system

00:20:16,460 --> 00:20:21,400
plus whatever you need for the workload

00:20:18,410 --> 00:20:24,890
and then four gigabytes of disk space

00:20:21,400 --> 00:20:26,180
although you saw you know the the actual

00:20:24,890 --> 00:20:27,950
footprint is a little bit less than that

00:20:26,180 --> 00:20:30,860
we say four gigabytes of course to give

00:20:27,950 --> 00:20:33,350
us some Headroom for cab covering things

00:20:30,860 --> 00:20:36,500
like snapshots and backups blog this is

00:20:33,350 --> 00:20:38,840
my kind of there's a whole bunch of

00:20:36,500 --> 00:20:40,040
different ways to deploying micro RS you

00:20:38,840 --> 00:20:43,130
know you've got your traditional sort of

00:20:40,040 --> 00:20:45,020
DVD net ISOs with the ash which is you

00:20:43,130 --> 00:20:47,990
know the super customizable way where

00:20:45,020 --> 00:20:52,040
you can tweak and tune everything you've

00:20:47,990 --> 00:20:54,260
got the various VM Cloud pie images and

00:20:52,040 --> 00:20:56,930
now vagrant images or they're sort of

00:20:54,260 --> 00:20:58,750
pre-configured ready to use home you

00:20:56,930 --> 00:21:01,100
have Yummie which was mentioned in the

00:20:58,750 --> 00:21:02,720
Uni talk which you know directly

00:21:01,100 --> 00:21:06,140
installing sort of from the network

00:21:02,720 --> 00:21:08,000
using a salt snack and we have ignition

00:21:06,140 --> 00:21:11,030
which I will go into a little bit more

00:21:08,000 --> 00:21:12,980
in a second Yami's awesome so awesome

00:21:11,030 --> 00:21:14,510
that I could probably like talk about it

00:21:12,980 --> 00:21:16,940
for like half an hour here but I don't

00:21:14,510 --> 00:21:19,430
have half an hour here so I just was

00:21:16,940 --> 00:21:21,050
gonna suggest anybody who's remotely

00:21:19,430 --> 00:21:22,820
interested in it look at that Burt hoods

00:21:21,050 --> 00:21:25,910
talk from the openSUSE conference last

00:21:22,820 --> 00:21:28,490
year it's on YouTube it's great and

00:21:25,910 --> 00:21:31,190
explains how that magical stack works

00:21:28,490 --> 00:21:33,200
better than I could anyway

00:21:31,190 --> 00:21:35,600
on the ignition side of things anyone

00:21:33,200 --> 00:21:37,400
who knows is kind of cloud in it you

00:21:35,600 --> 00:21:39,440
know or you know then done like a lot of

00:21:37,400 --> 00:21:42,230
stuff is like with VM images in Kyle

00:21:39,440 --> 00:21:43,760
tolling and and they're like you know

00:21:42,230 --> 00:21:45,920
you always have this issue of you know

00:21:43,760 --> 00:21:47,810
you've got the lovely VM image but you

00:21:45,920 --> 00:21:50,930
know when you deploy it to your cloud

00:21:47,810 --> 00:21:53,300
provider then how the heck do you

00:21:50,930 --> 00:21:54,650
actually configure it like specifically

00:21:53,300 --> 00:21:56,270
for your environment things like the

00:21:54,650 --> 00:21:56,860
network things like partitioning the

00:21:56,270 --> 00:21:59,060
disks

00:21:56,860 --> 00:22:01,250
you know formatting the partitions

00:21:59,060 --> 00:22:04,640
getting the disk layout the way you want

00:22:01,250 --> 00:22:06,920
etc we're still using cloud in it for

00:22:04,640 --> 00:22:09,170
some cloud providers with with microbes

00:22:06,920 --> 00:22:10,430
but typically for everything else where

00:22:09,170 --> 00:22:12,680
you want to take these images and

00:22:10,430 --> 00:22:14,360
configure them on first boot in ignition

00:22:12,680 --> 00:22:16,940
is the way to go

00:22:14,360 --> 00:22:19,280
it does a much better job of handling

00:22:16,940 --> 00:22:20,540
those enabling the services configuring

00:22:19,280 --> 00:22:23,480
the users all that kind of pre boot

00:22:20,540 --> 00:22:25,160
stuff you need and you know the main

00:22:23,480 --> 00:22:26,990
reason I love it is it doesn't go and do

00:22:25,160 --> 00:22:28,550
like cloud in it and like randomly touch

00:22:26,990 --> 00:22:29,810
stuff that I shouldn't like it only

00:22:28,550 --> 00:22:31,250
configures the stuff that you've

00:22:29,810 --> 00:22:34,130
configured in the configuration file

00:22:31,250 --> 00:22:37,740
which keeps me much more sane than cloud

00:22:34,130 --> 00:22:40,070
in it ever did and so

00:22:37,740 --> 00:22:43,470
you kind of got these sort of broad

00:22:40,070 --> 00:22:45,300
example use cases where you know it can

00:22:43,470 --> 00:22:48,090
kind of do anything especially on the

00:22:45,300 --> 00:22:51,830
server side of things so you know IOT

00:22:48,090 --> 00:22:56,309
devices contain a host single service VM

00:22:51,830 --> 00:22:58,020
appliances cluster nodes etc they are

00:22:56,309 --> 00:22:59,580
going to a little more detail about the

00:22:58,020 --> 00:23:02,250
container stuff later but you know the

00:22:59,580 --> 00:23:03,660
nice thing with with micros is because

00:23:02,250 --> 00:23:06,420
of the transactional update stack in

00:23:03,660 --> 00:23:08,250
there you know the default images we

00:23:06,420 --> 00:23:10,080
have you know vanilla it boots an

00:23:08,250 --> 00:23:13,320
operating system that can cut it with

00:23:10,080 --> 00:23:17,309
nothing but your just a transactional

00:23:13,320 --> 00:23:20,250
update pkg in away from instantly

00:23:17,309 --> 00:23:24,150
getting whatever additional rpm you want

00:23:20,250 --> 00:23:25,800
from tumbleweed so you kind of the you

00:23:24,150 --> 00:23:28,320
know the the the limit of what you can

00:23:25,800 --> 00:23:30,150
do is the limit of your imagination

00:23:28,320 --> 00:23:32,100
really you know do you want to you know

00:23:30,150 --> 00:23:33,270
have it as a web server find deployed as

00:23:32,100 --> 00:23:35,210
that you wanna have it was a mail server

00:23:33,270 --> 00:23:38,700
fine deployed is that you know whatever

00:23:35,210 --> 00:23:41,160
whatever you know yeah yeah a monitoring

00:23:38,700 --> 00:23:44,520
box yeah yeah lights whatever I mean

00:23:41,160 --> 00:23:45,750
yeah it really can do anything but the

00:23:44,520 --> 00:23:47,250
expectation when it comes to the like

00:23:45,750 --> 00:23:48,450
the support so you know you file a bug

00:23:47,250 --> 00:23:50,190
in you say you know I installed a

00:23:48,450 --> 00:23:52,500
microvest machine and I installed this

00:23:50,190 --> 00:23:53,760
rpm and this rpm and this rpm in this RP

00:23:52,500 --> 00:23:56,340
I'm trying to make it do everything at

00:23:53,760 --> 00:23:58,830
once you know you're less likely to get

00:23:56,340 --> 00:24:00,600
a sympathetic response from me because

00:23:58,830 --> 00:24:04,920
the the focus of this is really to try

00:24:00,600 --> 00:24:06,860
and focus on doing just one thing which

00:24:04,920 --> 00:24:09,929
is where kind of containers come in

00:24:06,860 --> 00:24:11,760
because micros you know containers make

00:24:09,929 --> 00:24:13,679
it really really easy because you know

00:24:11,760 --> 00:24:15,350
they separate the service in the

00:24:13,679 --> 00:24:18,240
application from the operating system

00:24:15,350 --> 00:24:20,630
and so if that one thing the micros is

00:24:18,240 --> 00:24:25,260
doing is just being your container host

00:24:20,630 --> 00:24:27,300
then actually you can throw containers

00:24:25,260 --> 00:24:28,650
to do three four five six seven eight

00:24:27,300 --> 00:24:30,150
things because they're not going to

00:24:28,650 --> 00:24:31,740
impede in the operating system they're

00:24:30,150 --> 00:24:34,770
not going to interact with each other in

00:24:31,740 --> 00:24:37,800
any way that me as the micro RS maintain

00:24:34,770 --> 00:24:39,690
a kind of cares about it also fits in

00:24:37,800 --> 00:24:41,340
nicely with you know users typically

00:24:39,690 --> 00:24:43,980
care about the service so you know they

00:24:41,340 --> 00:24:45,690
can worry about patching the container

00:24:43,980 --> 00:24:48,120
or picking the perfect container for

00:24:45,690 --> 00:24:49,650
their job or if they want in a handcraft

00:24:48,120 --> 00:24:50,240
in the container for whatever they want

00:24:49,650 --> 00:24:52,580
to do

00:24:50,240 --> 00:24:55,400
and then under the hood you know micro s

00:24:52,580 --> 00:24:58,790
with its self caring self updating auto

00:24:55,400 --> 00:25:00,410
updating Auto rolling back just kind of

00:24:58,790 --> 00:25:03,050
means that you can deploy micro s is

00:25:00,410 --> 00:25:04,400
your container host and throw your

00:25:03,050 --> 00:25:06,500
containers on it and then kind of just

00:25:04,400 --> 00:25:09,260
forget micro s was there you know it

00:25:06,500 --> 00:25:10,100
just takes care of itself and then you

00:25:09,260 --> 00:25:11,750
know if you've configured your

00:25:10,100 --> 00:25:13,640
containers to auto update then they take

00:25:11,750 --> 00:25:17,290
care of themselves and then you can be a

00:25:13,640 --> 00:25:20,120
really really lazy sis happen um oh and

00:25:17,290 --> 00:25:22,970
you know my PDF output of this is bring

00:25:20,120 --> 00:25:25,910
to the slide sadly um we love quad man

00:25:22,970 --> 00:25:28,160
for doing this container stuff it's an

00:25:25,910 --> 00:25:29,900
alternative to docker but I don't like

00:25:28,160 --> 00:25:31,460
using the word docker in slides because

00:25:29,900 --> 00:25:33,200
docker have like really restrictive

00:25:31,460 --> 00:25:38,030
copyright rules so you know a tentative

00:25:33,200 --> 00:25:40,309
did that thing I can't mention for being

00:25:38,030 --> 00:25:41,720
a standalone container who's so

00:25:40,309 --> 00:25:43,400
late about you know clustered contain a

00:25:41,720 --> 00:25:45,260
host at kubernetes but you know for your

00:25:43,400 --> 00:25:48,500
regular container use just on your

00:25:45,260 --> 00:25:52,160
machine you know doing development or

00:25:48,500 --> 00:25:54,920
just running on one box pod man is the

00:25:52,160 --> 00:25:57,200
best thing since sliced bread it's got

00:25:54,920 --> 00:25:58,940
all of the features of docker and quite

00:25:57,200 --> 00:26:02,090
often all of the same command-line tool

00:25:58,940 --> 00:26:04,790
there the syntax is docker but kind of

00:26:02,090 --> 00:26:07,280
none of the flaws really you know it

00:26:04,790 --> 00:26:09,770
updates it a much more healthy pace with

00:26:07,280 --> 00:26:12,050
upstream it has a lot of nice little UI

00:26:09,770 --> 00:26:14,000
in your UX fixes like being able to

00:26:12,050 --> 00:26:16,550
delete every container and delete every

00:26:14,000 --> 00:26:18,710
image without you having to like type

00:26:16,550 --> 00:26:20,990
one command back into another to tell

00:26:18,710 --> 00:26:23,150
docker you know to read its own

00:26:20,990 --> 00:26:26,150
configuration about how to delete stuff

00:26:23,150 --> 00:26:29,059
it's really stupid and in addition to

00:26:26,150 --> 00:26:31,130
all of that you know there's no demon to

00:26:29,059 --> 00:26:32,990
crash so you know docker everything goes

00:26:31,130 --> 00:26:34,220
through this single docker demon service

00:26:32,990 --> 00:26:35,360
and if something goes wrong with that

00:26:34,220 --> 00:26:37,100
then kind of all your containers

00:26:35,360 --> 00:26:38,780
suddenly become either broken or

00:26:37,100 --> 00:26:39,550
unmanageable which means they might as

00:26:38,780 --> 00:26:41,809
well be broken

00:26:39,550 --> 00:26:43,760
whereas with pot man you know everything

00:26:41,809 --> 00:26:46,130
just architectural II is is its own

00:26:43,760 --> 00:26:48,320
separate instance so far healthier way

00:26:46,130 --> 00:26:51,890
to do it and also you have the ability

00:26:48,320 --> 00:26:54,200
of running containers in pods which is a

00:26:51,890 --> 00:26:56,450
term coming from the kubernetes world

00:26:54,200 --> 00:26:59,059
way you typically would have in a

00:26:56,450 --> 00:27:00,530
multiple containers working together but

00:26:59,059 --> 00:27:02,929
that can still be kind of a useful thing

00:27:00,530 --> 00:27:03,620
you know if you're doing messy trying to

00:27:02,929 --> 00:27:05,809
turn a micro

00:27:03,620 --> 00:27:09,260
so sensibly into a multi-purpose machine

00:27:05,809 --> 00:27:11,840
you know having everything described in

00:27:09,260 --> 00:27:13,370
a single pod Jason vowel like you would

00:27:11,840 --> 00:27:14,900
have in kubernetes and then just running

00:27:13,370 --> 00:27:17,690
it on that one box so you know it

00:27:14,900 --> 00:27:19,390
automatically fires up your database in

00:27:17,690 --> 00:27:21,650
your web front-end and your your

00:27:19,390 --> 00:27:23,690
application server for some service and

00:27:21,650 --> 00:27:26,530
then keeps it running together as one

00:27:23,690 --> 00:27:29,210
thing it's a it's a really nice way of

00:27:26,530 --> 00:27:31,309
living life in the docker world you see

00:27:29,210 --> 00:27:33,980
that it was like docker compose but you

00:27:31,309 --> 00:27:38,700
know with the kubernetes pod man world

00:27:33,980 --> 00:27:42,809
you've also y have something specific

00:27:38,700 --> 00:27:43,830
yeah in my case if you're using my

00:27:42,809 --> 00:27:45,389
caressing you're using it for minor

00:27:43,830 --> 00:27:46,259
containers you know the first place you

00:27:45,389 --> 00:27:47,850
tweak you should be thinking about

00:27:46,259 --> 00:27:49,559
getting containers is not docker hub

00:27:47,850 --> 00:27:51,480
although we support it isn't there's no

00:27:49,559 --> 00:27:54,179
reason why you can't run containers from

00:27:51,480 --> 00:27:56,549
docker hub on a micro roast but we have

00:27:54,179 --> 00:27:58,830
registry to openSUSE to org it's awesome

00:27:56,549 --> 00:28:00,299
it you know it you've got all of the

00:27:58,830 --> 00:28:01,830
packet it containers being built to

00:28:00,299 --> 00:28:04,350
straight from OBS there we have an

00:28:01,830 --> 00:28:09,570
ever-growing family of official

00:28:04,350 --> 00:28:11,850
containers things like bind DNS DHCP web

00:28:09,570 --> 00:28:13,259
servers engine I think we have Apache

00:28:11,850 --> 00:28:16,919
now def I don't know I've always just

00:28:13,259 --> 00:28:19,230
used the nginx container and yeah I

00:28:16,919 --> 00:28:21,720
should be adding more of my own personal

00:28:19,230 --> 00:28:23,909
containers to that got things like cert

00:28:21,720 --> 00:28:25,379
but another bits and pieces I've built

00:28:23,909 --> 00:28:28,409
for myself and keep on forgetting to

00:28:25,379 --> 00:28:29,700
submit to factory because they're part

00:28:28,409 --> 00:28:31,529
of factory because I bought a tumbleweed

00:28:29,700 --> 00:28:33,570
or part of leap in the case of the leap

00:28:31,529 --> 00:28:35,220
container you know they're all built

00:28:33,570 --> 00:28:37,590
automobiles automatically so they're

00:28:35,220 --> 00:28:40,619
always fresh they're always Auto updated

00:28:37,590 --> 00:28:42,779
so in most cases you can just do like

00:28:40,619 --> 00:28:44,190
you know a pod man pull whatever and you

00:28:42,779 --> 00:28:46,200
always get the latest version of

00:28:44,190 --> 00:28:47,999
everything and they're signed and

00:28:46,200 --> 00:28:50,489
notarized I mean it easy to trust at the

00:28:47,999 --> 00:28:53,669
random container for random of the place

00:28:50,489 --> 00:28:56,129
and the two main official containers

00:28:53,669 --> 00:28:57,779
have listed there do the openSUSE

00:28:56,129 --> 00:29:00,059
tumbleweed Netflix a leap one although

00:28:57,779 --> 00:29:01,529
if you want something small then the

00:29:00,059 --> 00:29:04,259
open suits are busy box containers the

00:29:01,529 --> 00:29:06,179
way to go which to be honest I'm

00:29:04,259 --> 00:29:08,399
thinking now I think the Oakland Sousa

00:29:06,179 --> 00:29:11,369
bitty box container is like the default

00:29:08,399 --> 00:29:12,989
but almost every container we use it's

00:29:11,369 --> 00:29:15,539
the easiest place to start like you know

00:29:12,989 --> 00:29:18,899
it has everything you need to run that

00:29:15,539 --> 00:29:20,159
kind of one service home and it's only

00:29:18,899 --> 00:29:21,809
if you've got like some really quirky

00:29:20,159 --> 00:29:23,580
service that ends up needing like a

00:29:21,809 --> 00:29:25,710
whole bunch of other stuff from the base

00:29:23,580 --> 00:29:27,810
system that we use to slightly heavier

00:29:25,710 --> 00:29:30,540
containers

00:29:27,810 --> 00:29:31,620
and because of that like my life now has

00:29:30,540 --> 00:29:34,740
become like totally and utterly

00:29:31,620 --> 00:29:37,260
dominated by micro s not just work-wise

00:29:34,740 --> 00:29:40,440
like personally speaking I I use my

00:29:37,260 --> 00:29:41,910
caress for like everything apart from my

00:29:40,440 --> 00:29:45,360
desktop and I'll be talking about that

00:29:41,910 --> 00:29:48,840
in a minute too so my personal next

00:29:45,360 --> 00:29:51,690
cloud my blog if you read that my TV is

00:29:48,840 --> 00:29:55,590
running emulation station with retro

00:29:51,690 --> 00:29:57,510
games running on a micro machine my my

00:29:55,590 --> 00:29:59,040
route in fact yeah my my setup here

00:29:57,510 --> 00:30:03,270
that's doing all of this with my home

00:29:59,040 --> 00:30:05,730
server that's a micro rest box as well I

00:30:03,270 --> 00:30:07,620
don't yeah I don't really use anything

00:30:05,730 --> 00:30:10,320
else but my career I see from my micro

00:30:07,620 --> 00:30:13,050
servers running micronus either using

00:30:10,320 --> 00:30:15,210
containers built on registry openSUSE to

00:30:13,050 --> 00:30:17,490
org sometimes using the upstream

00:30:15,210 --> 00:30:21,150
containers and sometimes using OBS

00:30:17,490 --> 00:30:22,950
containers I've built myself but the the

00:30:21,150 --> 00:30:25,200
building myself ones kind of there's not

00:30:22,950 --> 00:30:27,450
really much left almost everything is

00:30:25,200 --> 00:30:29,930
covered now by the official containers

00:30:27,450 --> 00:30:29,930
in open SUSE

00:30:30,250 --> 00:30:34,570
um if you're doing this one thing that

00:30:32,680 --> 00:30:36,760
always comes up is how do you debug a

00:30:34,570 --> 00:30:39,640
system like this like you know the the

00:30:36,760 --> 00:30:41,110
system is read-only you know so you know

00:30:39,640 --> 00:30:42,550
the root filesystem is read-only you can

00:30:41,110 --> 00:30:44,350
edit the configuration but you can't

00:30:42,550 --> 00:30:47,260
gotta get down and dirty into things

00:30:44,350 --> 00:30:50,290
like us are been messing around with

00:30:47,260 --> 00:30:52,240
binaries and installing new libs or yeah

00:30:50,290 --> 00:30:54,280
installing a new debugging tool unless

00:30:52,240 --> 00:30:57,520
you want to reboot which but if you do

00:30:54,280 --> 00:31:00,280
then if we've changed the system from

00:30:57,520 --> 00:31:02,080
one state to another so either yeah you

00:31:00,280 --> 00:31:04,720
kind of a bit of a Schrodinger system

00:31:02,080 --> 00:31:06,310
issue where yeah you've added a new tool

00:31:04,720 --> 00:31:07,770
to debug the system and therefore the

00:31:06,310 --> 00:31:10,030
system is different than it was before

00:31:07,770 --> 00:31:11,590
can you be sure you're looking at the

00:31:10,030 --> 00:31:14,830
system as it really was in the Berk of

00:31:11,590 --> 00:31:17,100
the state so in in micros we have this

00:31:14,830 --> 00:31:19,710
absolutely awesome tool called toolbox

00:31:17,100 --> 00:31:22,120
which basically wanted bunches a

00:31:19,710 --> 00:31:24,730
McCreight a small privileged container

00:31:22,120 --> 00:31:26,800
so the container kind of runs this route

00:31:24,730 --> 00:31:28,270
so it's dangerous but you know oh you

00:31:26,800 --> 00:31:31,240
can run it without root but then it's

00:31:28,270 --> 00:31:33,040
kind of somewhat less useful and has

00:31:31,240 --> 00:31:35,160
full access to the root filesystem so

00:31:33,040 --> 00:31:39,280
you know you can use that for

00:31:35,160 --> 00:31:41,260
interrogating the system live while it's

00:31:39,280 --> 00:31:43,270
running and of course the container

00:31:41,260 --> 00:31:44,530
isn't to read Oh me because you know

00:31:43,270 --> 00:31:46,480
it's a it's got its own readwrite

00:31:44,530 --> 00:31:49,180
filesystem so there you can add a long

00:31:46,480 --> 00:31:51,940
time install the necessary tools you'd

00:31:49,180 --> 00:31:54,700
want and still stay persistent between

00:31:51,940 --> 00:31:56,950
usages so if you if you want to keep it

00:31:54,700 --> 00:31:59,080
that way in my case I typically use two

00:31:56,950 --> 00:32:01,150
books and then delete the container and

00:31:59,080 --> 00:32:03,520
then a couple of days later use tool box

00:32:01,150 --> 00:32:05,050
again and install everything fresh but

00:32:03,520 --> 00:32:07,780
another way of doing it would be just

00:32:05,050 --> 00:32:10,150
yeah treat it to your toolboxes a sort

00:32:07,780 --> 00:32:11,680
of a small micro debugging system where

00:32:10,150 --> 00:32:12,940
you know occasionally remember to do has

00:32:11,680 --> 00:32:16,120
if add up inside it and keep it

00:32:12,940 --> 00:32:18,670
up-to-date and yeah and you've always

00:32:16,120 --> 00:32:20,380
got that sort of nice traditional

00:32:18,670 --> 00:32:23,140
read/write environment so you don't have

00:32:20,380 --> 00:32:24,910
to yeah either one so the read-only

00:32:23,140 --> 00:32:26,050
environment that is nice and secure and

00:32:24,910 --> 00:32:28,200
where everything's running from doesn't

00:32:26,050 --> 00:32:30,179
actually get in the way of anything

00:32:28,200 --> 00:32:31,889
and because of that like in my life now

00:32:30,179 --> 00:32:35,279
like despite being like the guy who

00:32:31,889 --> 00:32:38,279
announced bleep when it began i I don't

00:32:35,279 --> 00:32:40,649
easily in my life like anywhere like it

00:32:38,279 --> 00:32:42,690
was awesome it was great but like micro

00:32:40,649 --> 00:32:44,580
s is now like taking over everything I

00:32:42,690 --> 00:32:47,309
was using late for all of the machines

00:32:44,580 --> 00:32:50,010
where I wanted stability and if leave it

00:32:47,309 --> 00:32:52,169
running and forget about it but my

00:32:50,010 --> 00:32:54,419
caress it installs it leaves it running

00:32:52,169 --> 00:32:56,309
and I can forget about it so in fact I

00:32:54,419 --> 00:32:57,779
had one leap machine left a couple of

00:32:56,309 --> 00:32:59,639
weeks ago yeah a couple of months ago

00:32:57,779 --> 00:33:01,799
and I realized I was spending more time

00:32:59,639 --> 00:33:03,059
on that than like all of the five looks

00:33:01,799 --> 00:33:05,850
like other microbots machines ahead

00:33:03,059 --> 00:33:08,700
running um so yeah that was the last one

00:33:05,850 --> 00:33:10,679
it's gone now so if you want you can

00:33:08,700 --> 00:33:12,299
really kind of go whole hog into this

00:33:10,679 --> 00:33:14,880
micro RS world and just do everything

00:33:12,299 --> 00:33:16,470
that way and I'd recommend it the amount

00:33:14,880 --> 00:33:19,590
of work you have to do to maintain it

00:33:16,470 --> 00:33:22,409
once it's deployed is less and it's also

00:33:19,590 --> 00:33:24,630
easier to add something you were

00:33:22,409 --> 00:33:26,039
reapered or you know bootstrap a new

00:33:24,630 --> 00:33:28,110
system when you need it so you know I

00:33:26,039 --> 00:33:30,929
admit all this new stuff in this sort of

00:33:28,110 --> 00:33:33,480
new mindset it takes a little bit of bit

00:33:30,929 --> 00:33:35,519
of a mindset change a bit of education

00:33:33,480 --> 00:33:37,350
and getting to know it but once you're

00:33:35,519 --> 00:33:40,409
there like it's just so much easier if

00:33:37,350 --> 00:33:43,230
like okay I need a new system can I do a

00:33:40,409 --> 00:33:45,330
container on an existing host yes done

00:33:43,230 --> 00:33:47,760
fine or if not you know spinning up a

00:33:45,330 --> 00:33:49,740
new system on on a heart on a bit of

00:33:47,760 --> 00:33:52,159
hardware on at UVM like just takes no

00:33:49,740 --> 00:33:52,159
time at all

00:33:52,480 --> 00:33:57,669
one thing that's yeah micro has started

00:33:55,510 --> 00:33:59,440
from was this at this other distribution

00:33:57,669 --> 00:34:01,090
called cubic where you know micros is

00:33:59,440 --> 00:34:01,630
how kind of spun out from it at its own

00:34:01,090 --> 00:34:03,820
thing

00:34:01,630 --> 00:34:05,640
I'm becki becki still very much a thing

00:34:03,820 --> 00:34:07,870
so I wanted to kind of explain that here

00:34:05,640 --> 00:34:10,270
so cubic is now best described as a

00:34:07,870 --> 00:34:13,570
micro SD riveted like okay technically

00:34:10,270 --> 00:34:16,540
speaking cubic was first but yeah micro

00:34:13,570 --> 00:34:18,460
s is the base you know micro s does all

00:34:16,540 --> 00:34:21,909
this single service stuff but you know

00:34:18,460 --> 00:34:25,030
kubernetes is kind of special so with

00:34:21,909 --> 00:34:27,159
cubic we have a focused micro s variant

00:34:25,030 --> 00:34:29,889
just for doing containers and just for

00:34:27,159 --> 00:34:31,480
doing kubernetes like micro s it's

00:34:29,889 --> 00:34:33,790
totally built as part of the whole

00:34:31,480 --> 00:34:35,590
tumbleweed release process and I see

00:34:33,790 --> 00:34:37,600
because like humanities is like stupidly

00:34:35,590 --> 00:34:38,950
special like it's you know it does

00:34:37,600 --> 00:34:40,030
containers and everyone can think of it

00:34:38,950 --> 00:34:41,710
containers but it's like you're talking

00:34:40,030 --> 00:34:43,540
about like containers running like

00:34:41,710 --> 00:34:45,760
hundreds or thousands of them at a time

00:34:43,540 --> 00:34:47,530
and you're talking about like these

00:34:45,760 --> 00:34:50,290
large clusters where you've got at least

00:34:47,530 --> 00:34:51,609
you know even a small system is gonna be

00:34:50,290 --> 00:34:52,780
using like four or five machines and

00:34:51,609 --> 00:34:55,750
like you're typically talking about

00:34:52,780 --> 00:34:58,150
dozens or hundreds of VMs or working

00:34:55,750 --> 00:35:00,040
together with some custom networking and

00:34:58,150 --> 00:35:01,750
all this other stuff that needs to work

00:35:00,040 --> 00:35:03,880
perfectly smooth otherwise the clusters

00:35:01,750 --> 00:35:05,170
useless and there's like a whole bunch

00:35:03,880 --> 00:35:08,020
of moving parts you know you've got the

00:35:05,170 --> 00:35:09,490
operating system bit you know micros

00:35:08,020 --> 00:35:11,470
takes care of because it updates itself

00:35:09,490 --> 00:35:13,270
but then you've got this whole the

00:35:11,470 --> 00:35:17,020
container one time side of things and

00:35:13,270 --> 00:35:18,970
then you know with kubernetes your your

00:35:17,020 --> 00:35:20,109
kubernetes stack itself is then running

00:35:18,970 --> 00:35:21,700
in a whole bunch of containers

00:35:20,109 --> 00:35:23,470
everything there has to be coordinated

00:35:21,700 --> 00:35:25,900
perfectly properly that the based

00:35:23,470 --> 00:35:28,510
operating system updates right the

00:35:25,900 --> 00:35:29,980
container ups runtime updates right and

00:35:28,510 --> 00:35:32,680
then kubernetes does all of that stuff

00:35:29,980 --> 00:35:34,750
on top it's a complete nightmare and

00:35:32,680 --> 00:35:36,490
doing that as part of just as part of

00:35:34,750 --> 00:35:38,080
micro s we just can kind of confuse it

00:35:36,490 --> 00:35:40,420
and kind of spoil that nice message we

00:35:38,080 --> 00:35:43,030
have of like it just does any single

00:35:40,420 --> 00:35:46,420
service you want so yeah we made cubic

00:35:43,030 --> 00:35:49,330
and keep in cubic as a separate side

00:35:46,420 --> 00:35:50,890
project to that and it means we also get

00:35:49,330 --> 00:35:52,510
to focus for a kippah comically being

00:35:50,890 --> 00:35:55,510
this sort of perfect cuban that his

00:35:52,510 --> 00:35:57,820
operating system so we can do things

00:35:55,510 --> 00:36:00,310
like fully integrate cube ATM which is

00:35:57,820 --> 00:36:03,220
the the upstream kubernetes which

00:36:00,310 --> 00:36:04,780
nothing to and in a set of using pod man

00:36:03,220 --> 00:36:07,750
which is the

00:36:04,780 --> 00:36:10,840
best for user interactivity in doing

00:36:07,750 --> 00:36:12,190
things like docker you know cryo really

00:36:10,840 --> 00:36:14,530
doesn't have a command-line interface at

00:36:12,190 --> 00:36:17,590
all it's just an API for doing

00:36:14,530 --> 00:36:19,180
containers but for cuba Nettie's so you

00:36:17,590 --> 00:36:22,390
know we have yeah we can focus it on

00:36:19,180 --> 00:36:24,880
that because that's there um we also

00:36:22,390 --> 00:36:26,050
have in instead of free boot manager but

00:36:24,880 --> 00:36:28,030
I didn't mention where we be manager

00:36:26,050 --> 00:36:30,610
which is the tool in micro s4 rebooting

00:36:28,030 --> 00:36:32,920
automatically in your defined

00:36:30,610 --> 00:36:34,480
maintenance window well if that happens

00:36:32,920 --> 00:36:35,680
on your cuban i t's cluster you know you

00:36:34,480 --> 00:36:36,880
have certainly have this machine that

00:36:35,680 --> 00:36:40,120
was running a whole bunch of services

00:36:36,880 --> 00:36:42,280
and you know it looks like it died so

00:36:40,120 --> 00:36:44,620
with cuba query instead using cured

00:36:42,280 --> 00:36:46,450
where your kubernetes cluster basically

00:36:44,620 --> 00:36:47,740
decides okay you've oh you've already

00:36:46,450 --> 00:36:50,760
updated you've already had your

00:36:47,740 --> 00:36:53,170
transaction or update yeah so cured will

00:36:50,760 --> 00:36:56,050
decide that's a time for the cluster

00:36:53,170 --> 00:36:57,460
node to restart and also we have cuba

00:36:56,050 --> 00:37:00,310
control which is basically a fancy

00:36:57,460 --> 00:37:01,840
wrapper around cube ATM and like

00:37:00,310 --> 00:37:04,600
leveraging the fact that we've got salt

00:37:01,840 --> 00:37:06,730
under the hood of there as well so just

00:37:04,600 --> 00:37:08,200
makes things even easier than doing

00:37:06,730 --> 00:37:10,570
things a traditional wafer for

00:37:08,200 --> 00:37:12,280
kubernetes and all that together ends up

00:37:10,570 --> 00:37:15,160
being like a really nice in fact it's

00:37:12,280 --> 00:37:17,050
one of the few community certified

00:37:15,160 --> 00:37:19,390
kubernetes of Debu shion's out there

00:37:17,050 --> 00:37:22,000
most certified kubernetes options so you

00:37:19,390 --> 00:37:23,410
know these big corporate offerings but

00:37:22,000 --> 00:37:26,620
with micro has seen everywhere we're

00:37:23,410 --> 00:37:27,970
there too which is kind of cool um and

00:37:26,620 --> 00:37:29,470
like you said this is this is you know

00:37:27,970 --> 00:37:30,790
i've talked a lot about service in all

00:37:29,470 --> 00:37:32,500
of this today you know all of this makes

00:37:30,790 --> 00:37:34,810
perfect sense for that why why not

00:37:32,500 --> 00:37:36,220
desktop switch yeah i kind of made the

00:37:34,810 --> 00:37:39,700
mistake of talking about last year at

00:37:36,220 --> 00:37:41,230
the openSUSE conference because the idea

00:37:39,700 --> 00:37:43,570
is actually awesome you know if you've

00:37:41,230 --> 00:37:45,370
got this you know perfect this idea of

00:37:43,570 --> 00:37:46,990
having a perfectly automatic updating

00:37:45,370 --> 00:37:49,750
based operating system you know plus

00:37:46,990 --> 00:37:53,680
your desktop environment so plus k2 e

00:37:49,750 --> 00:37:55,840
plus gnome but without you know all of

00:37:53,680 --> 00:37:57,610
the apps that you would typically expect

00:37:55,840 --> 00:37:59,290
from a traditional openSUSE desktop

00:37:57,610 --> 00:38:01,390
because you don't need to necessarily

00:37:59,290 --> 00:38:02,830
get them from your operating system

00:38:01,390 --> 00:38:05,380
anymore you know why do we have to

00:38:02,830 --> 00:38:08,620
package Firefox when there is now a flat

00:38:05,380 --> 00:38:12,250
pack 5 yeah upstream packaged

00:38:08,620 --> 00:38:13,600
flat pack from fire for Firefox you know

00:38:12,250 --> 00:38:15,190
why

00:38:13,600 --> 00:38:17,680
I bother reinventing the wheel and doing

00:38:15,190 --> 00:38:19,510
everything twice when you can actually

00:38:17,680 --> 00:38:21,400
have these upstream flat packs

00:38:19,510 --> 00:38:23,590
maintained by the upstream developers

00:38:21,400 --> 00:38:27,040
keeping up to date with that stuff being

00:38:23,590 --> 00:38:29,650
maintained by them flat packs immortal

00:38:27,040 --> 00:38:31,360
of security means you know we don't have

00:38:29,650 --> 00:38:32,530
to avoid too much from the the operating

00:38:31,360 --> 00:38:34,480
system side about you know things

00:38:32,530 --> 00:38:37,240
interacting nastily or breaking things

00:38:34,480 --> 00:38:40,000
um and yeah so my crystal tapas is going

00:38:37,240 --> 00:38:41,830
well I'm not using it as my daily driver

00:38:40,000 --> 00:38:43,450
yet but there's been people who've been

00:38:41,830 --> 00:38:48,190
messing around with it it's currently in

00:38:43,450 --> 00:38:49,900
alpha and I don't know what I'm doing on

00:38:48,190 --> 00:38:52,810
my own but let them on my own there's

00:38:49,900 --> 00:38:54,310
other contributors now so please if

00:38:52,810 --> 00:38:56,140
you're interested in this idea you know

00:38:54,310 --> 00:38:58,600
you can download my Christ now you can

00:38:56,140 --> 00:39:00,640
install it and play around with it it's

00:38:58,600 --> 00:39:04,270
pretty straightforward it both for KDE

00:39:00,640 --> 00:39:06,040
and Gnome and then anything that's wrong

00:39:04,270 --> 00:39:08,980
or broken or you want to improve just

00:39:06,040 --> 00:39:12,520
send submit request in OBS I haven't

00:39:08,980 --> 00:39:14,110
rejected one yet and I you know but I

00:39:12,520 --> 00:39:15,700
don't have much time in my spare time to

00:39:14,110 --> 00:39:17,170
to really drive this forward so this is

00:39:15,700 --> 00:39:19,540
one of those that like it's an awesome

00:39:17,170 --> 00:39:22,540
idea I want to see it really take off

00:39:19,540 --> 00:39:27,370
but I need help with it so yeah

00:39:22,540 --> 00:39:29,650
please join in contribute um yeah this I

00:39:27,370 --> 00:39:31,810
I want that to be my next desktop for

00:39:29,650 --> 00:39:32,950
pretty much most of my machines like I

00:39:31,810 --> 00:39:35,800
think I'll keep one traditional

00:39:32,950 --> 00:39:37,360
tumbleweed machine lying around and the

00:39:35,800 --> 00:39:39,520
kind of the one that I think of is all

00:39:37,360 --> 00:39:41,500
of the time with various other services

00:39:39,520 --> 00:39:44,580
but most the time you know I know what

00:39:41,500 --> 00:39:46,870
applications I want to use because I've

00:39:44,580 --> 00:39:49,450
yeah I've been doing it for 15 years and

00:39:46,870 --> 00:39:51,010
I've got stuck in my ways and so most of

00:39:49,450 --> 00:39:52,750
my systems now like I manage them

00:39:51,010 --> 00:39:54,550
automatically with with salt always

00:39:52,750 --> 00:39:57,760
deploying the same RPMs on every machine

00:39:54,550 --> 00:40:00,220
well if I had my chorus I could just

00:39:57,760 --> 00:40:02,080
have that image and have it done and

00:40:00,220 --> 00:40:07,060
then never touch my desktop again which

00:40:02,080 --> 00:40:09,010
is a really exciting idea um and yeah

00:40:07,060 --> 00:40:10,150
like like I mentioned and like the new

00:40:09,010 --> 00:40:11,950
Bosch like other people have mentioned

00:40:10,150 --> 00:40:13,960
earlier today you know micro RS

00:40:11,950 --> 00:40:16,570
currently is kind of a tumbleweed

00:40:13,960 --> 00:40:21,760
centric thing but we now soon have a

00:40:16,570 --> 00:40:24,730
micro s coming again for ya for liek

00:40:21,760 --> 00:40:26,200
15.2 and like just religious about

00:40:24,730 --> 00:40:27,490
microwaves rom on this light is really

00:40:26,200 --> 00:40:30,880
embarrassing

00:40:27,490 --> 00:40:32,170
um the the idea there is is really or

00:40:30,880 --> 00:40:34,150
part of the kind of whole closing the

00:40:32,170 --> 00:40:37,720
loop cap thing there is also talking

00:40:34,150 --> 00:40:38,980
suzhou having a commercial Microsoft so

00:40:37,720 --> 00:40:40,180
you know in the commercial micro

00:40:38,980 --> 00:40:42,100
suffering is likely to be aligned with

00:40:40,180 --> 00:40:43,930
Slee so you know with the whole kind of

00:40:42,100 --> 00:40:46,840
jump leap closing the leap gap like

00:40:43,930 --> 00:40:50,440
doing a micro s on only 15.2 it just

00:40:46,840 --> 00:40:51,990
makes perfect sense and also like we was

00:40:50,440 --> 00:40:54,490
talking about with the real-time kernel

00:40:51,990 --> 00:40:56,710
you know for the the people we expect

00:40:54,490 --> 00:40:58,510
wanting to be using this who want to you

00:40:56,710 --> 00:40:59,980
know potentially have a stack that has

00:40:58,510 --> 00:41:01,690
all this really really cool stuff but

00:40:59,980 --> 00:41:04,000
maybe doesn't quite update as fast as

00:41:01,690 --> 00:41:05,320
tumbleweed does one thing they most

00:41:04,000 --> 00:41:08,200
certainly want is like the real-time

00:41:05,320 --> 00:41:10,570
kernel and you know the tumbleweed cut

00:41:08,200 --> 00:41:12,910
yeah version it's kind of three

00:41:10,570 --> 00:41:15,840
different ways of doing responsiveness

00:41:12,910 --> 00:41:19,119
and reliability and real time nests in

00:41:15,840 --> 00:41:21,100
kernels you know this there's thusly way

00:41:19,119 --> 00:41:22,869
there's the tumbleweed way and then

00:41:21,100 --> 00:41:27,220
there's what we know is the real-time

00:41:22,869 --> 00:41:29,380
way one thing that microsleep 15 got a

00:41:27,220 --> 00:41:31,810
were like let us do is yeah do the the

00:41:29,380 --> 00:41:33,850
art eternal in there as it's probably

00:41:31,810 --> 00:41:36,310
this main Colonel look if it fits in

00:41:33,850 --> 00:41:39,609
nicely whereas I don't see us doing that

00:41:36,310 --> 00:41:41,950
in micro s on tumbleweed mostly because

00:41:39,609 --> 00:41:44,200
that kernel doesn't necessarily keep up

00:41:41,950 --> 00:41:46,780
with upstream I haven't seen have the

00:41:44,200 --> 00:41:48,460
compromise balanced performance that we

00:41:46,780 --> 00:41:50,330
have in tumbleweed covers that perfectly

00:41:48,460 --> 00:41:53,300
fine as well

00:41:50,330 --> 00:41:55,400
and so with that I see I think I've hit

00:41:53,300 --> 00:41:58,810
it perfectly fine for time I've got like

00:41:55,400 --> 00:41:58,810
three minutes left for questions

00:41:59,820 --> 00:42:02,840

YouTube URL: https://www.youtube.com/watch?v=idZEJ0OYfWU


