Title: Hans de Raad - Webapplication security audits (Part 2) - openSUSE Conference 2013
Publication date: 2013-07-22
Playlist: openSUSE Conference 2013
Description: 
	(Second part after the talk had to change rooms)

When developing and deploying web applications, the final result is a collection of software all carefully combined to offer a coherent platform.
This platform however consists of several loosely coupled items which can, on various levels, offer possibilities of manipulating the deployment.

This session offers an analysis of these items and offers some insight in the possible attack vectors these might offer.

Focus is not on actually hacking the components but on hardening them, by putting prevention measures (like mod_security) in place.

This presentation is derived from a standard auditprocedure which the author follows on a regular basis.
Captions: 
	00:00:01,220 --> 00:00:07,020
all right and somehow I see we have

00:00:05,190 --> 00:00:10,410
managed to lose about half the audience

00:00:07,020 --> 00:00:12,389
we just have which basically means we

00:00:10,410 --> 00:00:15,210
now have a really comfortable amount of

00:00:12,389 --> 00:00:21,449
space in this room I think somebody

00:00:15,210 --> 00:00:24,210
could lie down if they want to I am just

00:00:21,449 --> 00:00:26,789
going to wait for a couple of seconds

00:00:24,210 --> 00:00:33,890
for the guys outside to wrap everybody

00:00:26,789 --> 00:00:33,890
up and get them inside here all right

00:00:33,950 --> 00:00:39,559
let's see who turns up

00:00:56,829 --> 00:01:00,179
the air conditioning off

00:01:09,140 --> 00:01:17,000
I having two hours oh so he started now

00:01:13,170 --> 00:01:22,170
then it should be other way somewhere

00:01:17,000 --> 00:01:24,380
yeah cool thing actually I prefer awake

00:01:22,170 --> 00:01:24,380
on

00:01:37,050 --> 00:01:43,870
hospitality that wasn't actually do

00:01:41,950 --> 00:01:48,090
commission for hanging out yeah you got

00:01:43,870 --> 00:01:51,420
that right which I of course we have

00:01:48,090 --> 00:01:51,420
recognized hello

00:01:59,070 --> 00:02:05,770
I like you know what I'm just going to

00:02:02,229 --> 00:02:09,670
continue because if people come in then

00:02:05,770 --> 00:02:14,110
well they just have to catch up again

00:02:09,670 --> 00:02:17,530
welcome nice that you're here actually

00:02:14,110 --> 00:02:19,269
in the other room we have come so far as

00:02:17,530 --> 00:02:21,970
the introduction so basically I'm just

00:02:19,269 --> 00:02:27,209
going to continue from there because

00:02:21,970 --> 00:02:27,209
actually I haven't told that much yet

00:02:27,480 --> 00:02:34,690
web applications actually a couple of

00:02:32,290 --> 00:02:37,630
years ago not even that long in human

00:02:34,690 --> 00:02:39,760
standards but H ages in computer

00:02:37,630 --> 00:02:43,120
standard there were things called web

00:02:39,760 --> 00:02:45,730
pages they were individual HTML pages

00:02:43,120 --> 00:02:48,430
not doing that much just giving

00:02:45,730 --> 00:02:52,140
information interaction was really

00:02:48,430 --> 00:02:54,849
limited maybe to just a couple of a

00:02:52,140 --> 00:02:59,549
couple of small forums for like leaf

00:02:54,849 --> 00:03:02,620
contact information stuff like that

00:02:59,549 --> 00:03:04,930
since then web applications have

00:03:02,620 --> 00:03:07,359
occurred and they have evolved actually

00:03:04,930 --> 00:03:10,209
a nowadays a web application is

00:03:07,359 --> 00:03:14,859
basically more or less an API instead of

00:03:10,209 --> 00:03:18,670
a page rendering device pages get loaded

00:03:14,859 --> 00:03:20,530
by loading an HTML skeleton all the

00:03:18,670 --> 00:03:23,459
individual items on a page get loaded

00:03:20,530 --> 00:03:28,180
through JavaScript to asynchronous calls

00:03:23,459 --> 00:03:30,329
so basically it's a lot harder for a CMS

00:03:28,180 --> 00:03:36,069
or an application to keep track of

00:03:30,329 --> 00:03:38,560
everything also web applications are

00:03:36,069 --> 00:03:40,780
just the top layer they're just the

00:03:38,560 --> 00:03:43,090
outside looking part of an entire

00:03:40,780 --> 00:03:45,040
infrastructure and this infrastructure

00:03:43,090 --> 00:03:47,319
consists of course of an operating

00:03:45,040 --> 00:03:49,209
system which usually in my case is

00:03:47,319 --> 00:03:53,829
opensuse and which I'm sure you share

00:03:49,209 --> 00:03:55,299
with me database servers usually in web

00:03:53,829 --> 00:03:58,959
environments that's going to be my SQL

00:03:55,299 --> 00:04:01,030
or Maria to be like nowadays and a web

00:03:58,959 --> 00:04:05,739
server which has a pretty good chance of

00:04:01,030 --> 00:04:07,750
being Apache actually all these

00:04:05,739 --> 00:04:09,280
components interconnect with each other

00:04:07,750 --> 00:04:11,560
and all these components

00:04:09,280 --> 00:04:13,950
interfaces towards each other going back

00:04:11,560 --> 00:04:17,919
and forth which all have very nice

00:04:13,950 --> 00:04:19,930
intersection points which a possible

00:04:17,919 --> 00:04:30,010
attacker could tap into to get

00:04:19,930 --> 00:04:32,440
information not again for some reason my

00:04:30,010 --> 00:04:35,110
laptop is suffering from monday morning

00:04:32,440 --> 00:04:38,760
ism i think so i'm going to do a reboot

00:04:35,110 --> 00:04:38,760
again and see how far we come this time

00:04:44,380 --> 00:04:51,470
actually I've experienced that recent

00:04:49,100 --> 00:04:53,300
KDE versions do not handle this place

00:04:51,470 --> 00:04:55,580
which is that well at least not in case

00:04:53,300 --> 00:04:58,370
of my laptop so basically that might

00:04:55,580 --> 00:05:02,300
just be because well as I've

00:04:58,370 --> 00:05:08,090
demonstrated I run opensuse all right

00:05:02,300 --> 00:05:10,150
thank you guys my two maybe got a pretty

00:05:08,090 --> 00:05:20,450
good indication for being here actually

00:05:10,150 --> 00:05:24,170
so yeah yeah it's actually annoying it's

00:05:20,450 --> 00:05:27,470
only the ex session that freezes and the

00:05:24,170 --> 00:05:30,080
rest just keeps going on but for some

00:05:27,470 --> 00:05:34,970
reason it's completely unable to recover

00:05:30,080 --> 00:05:38,870
itself it's well I consider this to be

00:05:34,970 --> 00:05:42,200
just a nice pause on road to a lot of

00:05:38,870 --> 00:05:43,940
information so you can digest it and I

00:05:42,200 --> 00:05:47,870
can speak about it in a little bit

00:05:43,940 --> 00:06:01,360
slower and more controlled fashion right

00:05:47,870 --> 00:06:01,360
we're here again oh it should be good

00:06:17,380 --> 00:06:28,720
alright that looks familiar I think by

00:06:22,780 --> 00:06:34,710
now this also looks familiar to you here

00:06:28,720 --> 00:06:38,080
we go multiple interconnected components

00:06:34,710 --> 00:06:40,780
which basically mean more connections or

00:06:38,080 --> 00:06:43,420
more complexity and more doors to knock

00:06:40,780 --> 00:06:46,360
on every interfacing point in your

00:06:43,420 --> 00:06:49,930
application could be a potential attack

00:06:46,360 --> 00:06:53,260
factor start something to be scared of

00:06:49,930 --> 00:06:55,780
well no I mean I got a lot of colleagues

00:06:53,260 --> 00:06:59,560
in the security field who will don't

00:06:55,780 --> 00:07:02,440
customers with thousand possible attack

00:06:59,560 --> 00:07:04,150
vectors in their application and how

00:07:02,440 --> 00:07:06,160
they should be scared to death that

00:07:04,150 --> 00:07:09,580
somebody will steal information and such

00:07:06,160 --> 00:07:11,230
well I don't think it's that much to be

00:07:09,580 --> 00:07:14,230
scared about I think you should be aware

00:07:11,230 --> 00:07:16,750
of it so I should I think you should at

00:07:14,230 --> 00:07:20,650
every level in the architecture of your

00:07:16,750 --> 00:07:23,920
application take measures to prevent at

00:07:20,650 --> 00:07:26,110
least to the best possible extent the

00:07:23,920 --> 00:07:28,860
fact that somebody could get around the

00:07:26,110 --> 00:07:31,660
means that you try to put in place I

00:07:28,860 --> 00:07:33,400
will talk about some of the possible

00:07:31,660 --> 00:07:37,620
heartening stuff like much security app

00:07:33,400 --> 00:07:40,930
armor later in this talk so bear with me

00:07:37,620 --> 00:07:43,810
actually what I usually preach is doing

00:07:40,930 --> 00:07:47,980
a risk-based approach risk-based that is

00:07:43,810 --> 00:07:51,070
from the customer risk aspect because

00:07:47,980 --> 00:07:52,930
you can simply secure everything if you

00:07:51,070 --> 00:07:56,110
want to if you want to you can run every

00:07:52,930 --> 00:07:58,300
server with Si Linux and basically this

00:07:56,110 --> 00:08:03,370
we would become an entirely unmanageable

00:07:58,300 --> 00:08:05,950
mess so first of all what I do is try to

00:08:03,370 --> 00:08:11,620
determine what would be the actual worst

00:08:05,950 --> 00:08:13,390
thing to happen to any part of the of

00:08:11,620 --> 00:08:15,730
the infrastructure and the effect that

00:08:13,390 --> 00:08:18,730
would have on the web application well

00:08:15,730 --> 00:08:20,380
if you look at infrastructure mostly the

00:08:18,730 --> 00:08:22,300
web server or operating system that

00:08:20,380 --> 00:08:24,550
would mean it the application wouldn't

00:08:22,300 --> 00:08:27,640
work well it's not necessarily a bad

00:08:24,550 --> 00:08:29,290
thing yet sure it's not desirable but if

00:08:27,640 --> 00:08:32,150
it goes down x

00:08:29,290 --> 00:08:35,270
there's not much that can be go wrong

00:08:32,150 --> 00:08:36,890
with it it's not like an application

00:08:35,270 --> 00:08:39,890
which goes down can be hacked at that

00:08:36,890 --> 00:08:41,960
time it's just not working this could

00:08:39,890 --> 00:08:45,530
also be a countermeasure I will get into

00:08:41,960 --> 00:08:47,420
that same with a database server if that

00:08:45,530 --> 00:08:49,610
goes down well you usually get some kind

00:08:47,420 --> 00:08:51,050
of error of course you should limit the

00:08:49,610 --> 00:08:54,440
amount of information you give in the

00:08:51,050 --> 00:08:59,270
error but basically this would not mean

00:08:54,440 --> 00:09:03,650
that much actually what is what could be

00:08:59,270 --> 00:09:06,620
more intrusive it's actually the web

00:09:03,650 --> 00:09:09,050
application being hacked itself because

00:09:06,620 --> 00:09:11,420
that could actually potentially change

00:09:09,050 --> 00:09:14,510
the communication you have from the

00:09:11,420 --> 00:09:16,610
website to the customer let's take an

00:09:14,510 --> 00:09:20,600
extreme example if you are a government

00:09:16,610 --> 00:09:23,270
agency working with refugees and you

00:09:20,600 --> 00:09:27,040
have a website you basically would not

00:09:23,270 --> 00:09:29,870
want some like extreme right

00:09:27,040 --> 00:09:31,550
organization hack into that website and

00:09:29,870 --> 00:09:34,760
put something like a swastika on it that

00:09:31,550 --> 00:09:37,220
might be considered bad so and this also

00:09:34,760 --> 00:09:38,930
works for custom for for shops or

00:09:37,220 --> 00:09:42,770
something like that I mean if you have

00:09:38,930 --> 00:09:44,630
this web shop and it get hacked not

00:09:42,770 --> 00:09:46,370
necessarily that is only to do about

00:09:44,630 --> 00:09:49,580
customer information but this could also

00:09:46,370 --> 00:09:51,410
be simply some disgruntled ex customer

00:09:49,580 --> 00:09:54,590
trying to damage your business by

00:09:51,410 --> 00:09:56,960
putting up like porn or something which

00:09:54,590 --> 00:10:01,220
at least for web shops might be

00:09:56,960 --> 00:10:04,130
considered bad second identify the

00:10:01,220 --> 00:10:07,300
possibilities why your application could

00:10:04,130 --> 00:10:09,890
be a target are you using personal

00:10:07,300 --> 00:10:12,770
identifiable information are you storing

00:10:09,890 --> 00:10:17,990
like bank information are you handling

00:10:12,770 --> 00:10:21,010
money basically the level of personally

00:10:17,990 --> 00:10:23,900
identifiable information pretty much

00:10:21,010 --> 00:10:25,520
determines which level of security you

00:10:23,900 --> 00:10:28,880
shoot them force on your application and

00:10:25,520 --> 00:10:31,160
actually there are pretty much obligated

00:10:28,880 --> 00:10:33,830
by law actually in the European Union it

00:10:31,160 --> 00:10:35,930
will become legislation very soon that

00:10:33,830 --> 00:10:38,510
if you handle personal information and

00:10:35,930 --> 00:10:40,310
anything gets leaked you be obligated by

00:10:38,510 --> 00:10:42,769
law to actually inform your customers

00:10:40,310 --> 00:10:46,329
about that so it's going to be one big

00:10:42,769 --> 00:10:49,569
very nice public naming and shaming game

00:10:46,329 --> 00:10:52,839
key words here are availability

00:10:49,569 --> 00:10:56,899
confidentiality and integrity

00:10:52,839 --> 00:10:58,670
availability simply because if you're a

00:10:56,899 --> 00:11:02,059
web shop your website should be

00:10:58,670 --> 00:11:04,670
reachable confidentiality well if you're

00:11:02,059 --> 00:11:06,829
preparing a very nice customer campaign

00:11:04,670 --> 00:11:08,899
you basically don't want it to leak up

00:11:06,829 --> 00:11:11,689
before it's started or if you for

00:11:08,899 --> 00:11:13,819
instance el reduction coupons you don't

00:11:11,689 --> 00:11:17,239
want them to end up on Facebook before

00:11:13,819 --> 00:11:20,739
the actual campaign starts and integrity

00:11:17,239 --> 00:11:23,629
if your complete order database is

00:11:20,739 --> 00:11:26,089
mangled you also have fiscal problems

00:11:23,629 --> 00:11:30,679
because you cannot reproduce the actual

00:11:26,089 --> 00:11:35,779
transactions that you did well why is

00:11:30,679 --> 00:11:38,749
this a problem then because usually when

00:11:35,779 --> 00:11:40,970
I talk to clients and I explain them the

00:11:38,749 --> 00:11:43,639
first like okay let's take a risk-based

00:11:40,970 --> 00:11:46,249
approach then usually a client is able

00:11:43,639 --> 00:11:50,689
to actually identify this risk and

00:11:46,249 --> 00:11:52,579
mostly see the reasoning but actually it

00:11:50,689 --> 00:11:56,749
becomes interesting if you translate it

00:11:52,579 --> 00:12:00,589
into direct consequences for this client

00:11:56,749 --> 00:12:03,350
so like loss of revenue your Web Store

00:12:00,589 --> 00:12:05,629
is offline which basically means people

00:12:03,350 --> 00:12:09,799
will not be able to do transactions with

00:12:05,629 --> 00:12:12,730
you which in turn might lose might cause

00:12:09,799 --> 00:12:16,100
the loss of potential customers but also

00:12:12,730 --> 00:12:18,529
that publicity actually that last part

00:12:16,100 --> 00:12:21,319
might be even the worst part because the

00:12:18,529 --> 00:12:23,839
internet never forgets and anybody who

00:12:21,319 --> 00:12:25,850
will Google your website will find this

00:12:23,839 --> 00:12:28,419
bad information years and years and

00:12:25,850 --> 00:12:32,089
years later that is actually really bad

00:12:28,419 --> 00:12:35,949
but also in from incorrect information

00:12:32,089 --> 00:12:39,739
could lead to serious problems in your

00:12:35,949 --> 00:12:45,129
logistics processes not only logistics

00:12:39,739 --> 00:12:47,869
but even worse if a web application

00:12:45,129 --> 00:12:49,519
contains like pharmaceutical information

00:12:47,869 --> 00:12:51,410
regarding medicine users and stuff like

00:12:49,519 --> 00:12:53,419
that which in the Netherlands actually

00:12:51,410 --> 00:12:55,340
is quite a hot topic because everybody

00:12:53,419 --> 00:13:01,340
seems to be evaluating

00:12:55,340 --> 00:13:05,270
online patient dossiers I really am a

00:13:01,340 --> 00:13:07,490
bit scared that if an application and

00:13:05,270 --> 00:13:10,520
this goes much to the integrity part

00:13:07,490 --> 00:13:12,920
gets hacked or gets malfunctioning and

00:13:10,520 --> 00:13:14,630
referential integrity might be lost you

00:13:12,920 --> 00:13:18,230
might have end up with wrong medication

00:13:14,630 --> 00:13:20,810
with potentially can cause problems and

00:13:18,230 --> 00:13:23,540
this is actually a pretty new way of

00:13:20,810 --> 00:13:27,520
using web applications I mean like five

00:13:23,540 --> 00:13:30,440
or six years ago even even that's short

00:13:27,520 --> 00:13:32,450
web applications were almost not

00:13:30,440 --> 00:13:36,290
considered for that type of sensitive

00:13:32,450 --> 00:13:38,390
information but nowadays when you look

00:13:36,290 --> 00:13:40,460
at hospitals they're mostly connected to

00:13:38,390 --> 00:13:44,000
universities have large-scale IT

00:13:40,460 --> 00:13:46,870
networks and web applications seem to be

00:13:44,000 --> 00:13:52,120
the way to go but also this mostly are

00:13:46,870 --> 00:13:55,010
publicly available system so actually I

00:13:52,120 --> 00:13:57,890
usually am not scared about web

00:13:55,010 --> 00:14:00,680
applications going down or simply

00:13:57,890 --> 00:14:02,900
stopped working in any way at all the

00:14:00,680 --> 00:14:06,800
thing I would be scared about most is

00:14:02,900 --> 00:14:10,610
integrity issues ms information could

00:14:06,800 --> 00:14:11,930
also overload processes to give you an

00:14:10,610 --> 00:14:14,720
example we had in the Netherlands

00:14:11,930 --> 00:14:17,390
recently an issue with something called

00:14:14,720 --> 00:14:19,820
a project X party which was in this

00:14:17,390 --> 00:14:21,080
little town in hiren which is in

00:14:19,820 --> 00:14:23,630
Groningen which is completely

00:14:21,080 --> 00:14:28,760
unpronounceable but all right actually a

00:14:23,630 --> 00:14:32,870
girl of 15 years old of course usually

00:14:28,760 --> 00:14:36,500
turns into 16 throws a party analysis it

00:14:32,870 --> 00:14:40,090
on Facebook forgets that she should have

00:14:36,500 --> 00:14:44,750
crossed the private option there and

00:14:40,090 --> 00:14:47,780
more than 10,000 people showed up in a

00:14:44,750 --> 00:14:50,420
village which has only just about 4,000

00:14:47,780 --> 00:14:53,330
people living there which have like two

00:14:50,420 --> 00:14:56,030
and a half cup or something so that was

00:14:53,330 --> 00:14:58,580
completely out of control that is also a

00:14:56,030 --> 00:15:00,680
problem in web application or

00:14:58,580 --> 00:15:02,660
application in general it's not only the

00:15:00,680 --> 00:15:04,400
fact that you could be targeted by a

00:15:02,660 --> 00:15:07,540
hacker it's also the fact that your user

00:15:04,400 --> 00:15:09,470
can do stuff that you don't predict or

00:15:07,540 --> 00:15:11,960
just after year

00:15:09,470 --> 00:15:13,760
user does has consequences completely

00:15:11,960 --> 00:15:18,740
outside of the scope which they can

00:15:13,760 --> 00:15:21,500
imagine so that's basically is that a

00:15:18,740 --> 00:15:24,500
hack is that an attack mode not in the

00:15:21,500 --> 00:15:26,240
traditional sense of the word but if you

00:15:24,500 --> 00:15:27,530
look at the consequences actually this

00:15:26,240 --> 00:15:30,590
little village of higher and had

00:15:27,530 --> 00:15:34,210
millions and millions of damage well I

00:15:30,590 --> 00:15:38,750
pretty much consider that a problem

00:15:34,210 --> 00:15:41,030
right what is a hack and or a tech and

00:15:38,750 --> 00:15:44,810
or incident and or anything you want it

00:15:41,030 --> 00:15:48,230
to call it actually it's just about

00:15:44,810 --> 00:15:51,550
anything which is aimed to disrupt the

00:15:48,230 --> 00:15:54,350
normal functioning of a process or

00:15:51,550 --> 00:15:57,950
application for that matter overloading

00:15:54,350 --> 00:16:00,260
with misinformation overloading with

00:15:57,950 --> 00:16:05,000
false requests DDoS attacks for instance

00:16:00,260 --> 00:16:07,700
and trying to find entrances into a

00:16:05,000 --> 00:16:09,590
system which usually are supposed to be

00:16:07,700 --> 00:16:12,440
behind some kind of authorization

00:16:09,590 --> 00:16:14,330
mechanism actually that doesn't that

00:16:12,440 --> 00:16:15,980
different differ that much from

00:16:14,330 --> 00:16:18,200
traditional physical security mean you

00:16:15,980 --> 00:16:19,550
have server rooms which have big logs

00:16:18,200 --> 00:16:22,720
would have key cards which have

00:16:19,550 --> 00:16:25,610
fingerprinting and stuff like that

00:16:22,720 --> 00:16:29,660
basically it's the same but the only

00:16:25,610 --> 00:16:31,730
problem is with the web that it gets out

00:16:29,660 --> 00:16:36,200
really fast news gets out really fast

00:16:31,730 --> 00:16:39,740
and simply it's out of your control all

00:16:36,200 --> 00:16:44,030
right top ten attack vectors everybody

00:16:39,740 --> 00:16:48,160
know OS i see one hand rest is a sleeper

00:16:44,030 --> 00:16:52,570
all right cool welcome back OS is a

00:16:48,160 --> 00:16:57,280
foundation which basically is formed to

00:16:52,570 --> 00:16:59,720
get people aware of internet security or

00:16:57,280 --> 00:17:02,570
electronic security and they keep this

00:16:59,720 --> 00:17:05,840
very nice list they have a top ten of

00:17:02,570 --> 00:17:07,970
attack factors injection cross-site

00:17:05,840 --> 00:17:10,040
scripting broken authentication and

00:17:07,970 --> 00:17:11,660
session management insecure direct

00:17:10,040 --> 00:17:13,070
object references the rest you can read

00:17:11,660 --> 00:17:14,600
up there and my voice is already bad so

00:17:13,070 --> 00:17:18,410
I'm going to leave it at that but I'm

00:17:14,600 --> 00:17:22,540
going to go into each of them to explore

00:17:18,410 --> 00:17:22,540
them a bit more alright

00:17:22,669 --> 00:17:29,370
like I said this presentation basically

00:17:25,620 --> 00:17:32,999
is a brain dump of a process that I

00:17:29,370 --> 00:17:35,399
usually follow to test applications so

00:17:32,999 --> 00:17:36,690
I'm sorry but sometimes the sheets are

00:17:35,399 --> 00:17:37,950
going to be really filled with text but

00:17:36,690 --> 00:17:40,440
I'm going to go through them and you can

00:17:37,950 --> 00:17:45,149
look at them later they'll be put online

00:17:40,440 --> 00:17:51,809
at least I hope injection what is that

00:17:45,149 --> 00:17:53,850
Oh s always has a definition part which

00:17:51,809 --> 00:17:58,139
I simply copied because they're really

00:17:53,850 --> 00:18:00,509
informative basically it says that

00:17:58,139 --> 00:18:04,200
injection occurs when untrusted data is

00:18:00,509 --> 00:18:07,440
sent to an interpreter as part as a of a

00:18:04,200 --> 00:18:10,200
command or query the attackers hostile

00:18:07,440 --> 00:18:12,080
data and trick the interpreter into

00:18:10,200 --> 00:18:15,269
executing unintended commands or

00:18:12,080 --> 00:18:19,740
exercising unauthorized data I think

00:18:15,269 --> 00:18:25,309
most of you have seen examples of SQL

00:18:19,740 --> 00:18:30,559
injections like adding comparators to

00:18:25,309 --> 00:18:33,210
queries it's actually amazing because

00:18:30,559 --> 00:18:35,399
SQL injection has been as old as there

00:18:33,210 --> 00:18:39,659
have been databases that this is still a

00:18:35,399 --> 00:18:42,059
problem but actually a lot of custom

00:18:39,659 --> 00:18:46,679
built applications are still pretty much

00:18:42,059 --> 00:18:49,350
fun durable to this basically you should

00:18:46,679 --> 00:18:54,659
test an application if it does this by

00:18:49,350 --> 00:18:57,720
simply using a login form for our

00:18:54,659 --> 00:19:01,429
instance and adding some SQL to it just

00:18:57,720 --> 00:19:04,200
see what it does it you'd be amazed what

00:19:01,429 --> 00:19:07,320
to do against it well actually there is

00:19:04,200 --> 00:19:10,440
this basic paradigm in IT security is

00:19:07,320 --> 00:19:12,929
simply don't trust any data that comes

00:19:10,440 --> 00:19:16,799
from a source outside of the actual code

00:19:12,929 --> 00:19:19,139
of your application simple even if

00:19:16,799 --> 00:19:21,360
information comes from the file system

00:19:19,139 --> 00:19:23,309
in files that you may have stored

00:19:21,360 --> 00:19:25,470
session files or something this can be

00:19:23,309 --> 00:19:29,279
altered this can be doctored this can be

00:19:25,470 --> 00:19:32,610
filled with Mel information or at least

00:19:29,279 --> 00:19:35,450
they reside outside of the scope of

00:19:32,610 --> 00:19:41,049
control of your application and that

00:19:35,450 --> 00:19:44,690
is something to be aware of you can also

00:19:41,049 --> 00:19:46,909
simply interpret this as follows you

00:19:44,690 --> 00:19:50,139
should validate anything that goes in

00:19:46,909 --> 00:19:55,029
and filter anything that goes out

00:19:50,139 --> 00:19:57,559
because actually filled ring of

00:19:55,029 --> 00:19:59,809
information going out of your

00:19:57,559 --> 00:20:01,669
application I'm going to go into that a

00:19:59,809 --> 00:20:03,110
bit more in other attack vectors like

00:20:01,669 --> 00:20:07,330
cross-site scripting and stuff like that

00:20:03,110 --> 00:20:12,250
it's just as important but basically

00:20:07,330 --> 00:20:16,279
injection is pretty easy to mitigate

00:20:12,250 --> 00:20:18,649
actually one of the basic fantastic

00:20:16,279 --> 00:20:22,820
features about PHP it's that its type

00:20:18,649 --> 00:20:26,419
unsafe or unsafe at least it's flexible

00:20:22,820 --> 00:20:27,889
about it that's great because you don't

00:20:26,419 --> 00:20:30,440
have to catch your fireballs every time

00:20:27,889 --> 00:20:35,210
you don't have to exactly know what a

00:20:30,440 --> 00:20:38,630
variable is going to be cool but since

00:20:35,210 --> 00:20:41,960
just about any other system or component

00:20:38,630 --> 00:20:45,049
in your application will not be type and

00:20:41,960 --> 00:20:46,690
safe actually when communicating to that

00:20:45,049 --> 00:20:51,620
you have to do a lot of stuff yourself

00:20:46,690 --> 00:20:53,480
old Sal MySQL drivers for PHP had the

00:20:51,620 --> 00:20:56,480
fantastic feature they would do a lot of

00:20:53,480 --> 00:20:57,529
typecasting yes fantastic so now I

00:20:56,480 --> 00:21:00,590
really don't know what's going on

00:20:57,529 --> 00:21:03,080
anymore basically what you should do any

00:21:00,590 --> 00:21:06,649
time you interact with a database is

00:21:03,080 --> 00:21:09,889
simply casting information to the type

00:21:06,649 --> 00:21:14,149
you want to use it which can be very

00:21:09,889 --> 00:21:19,309
easy because usually CMS's for instance

00:21:14,149 --> 00:21:21,559
have integer based IDs of pages well if

00:21:19,309 --> 00:21:25,039
you already know that something is going

00:21:21,559 --> 00:21:28,159
to be an integer simply cast it to end

00:21:25,039 --> 00:21:30,950
do that because you would not need any

00:21:28,159 --> 00:21:32,870
other information the worst part that

00:21:30,950 --> 00:21:34,730
can happen if you catch something to end

00:21:32,870 --> 00:21:37,960
you get a 0 or you get a 1 or something

00:21:34,730 --> 00:21:40,700
but still it would not possibly be

00:21:37,960 --> 00:21:42,519
injection it will simply be something

00:21:40,700 --> 00:21:47,389
else which I'm going to go into broken

00:21:42,519 --> 00:21:48,659
authentications also check the size of

00:21:47,389 --> 00:21:51,659
your input

00:21:48,659 --> 00:21:55,559
normally a database field would simply

00:21:51,659 --> 00:21:58,590
have in case of a bar chart have a

00:21:55,559 --> 00:22:01,919
length of 255 characters well simply

00:21:58,590 --> 00:22:03,720
limit your input to that and also raise

00:22:01,919 --> 00:22:06,149
an error if it exceeds that input

00:22:03,720 --> 00:22:07,409
because you also want to educate your

00:22:06,149 --> 00:22:09,739
user for doing something with the

00:22:07,409 --> 00:22:12,210
application that it's not designed for

00:22:09,739 --> 00:22:15,840
basically you can also do this very

00:22:12,210 --> 00:22:19,229
simple by doing a described table query

00:22:15,840 --> 00:22:21,239
before you handle form data look at some

00:22:19,229 --> 00:22:23,759
of the constraints like length and

00:22:21,239 --> 00:22:25,879
simply do that dynamically you don't

00:22:23,759 --> 00:22:32,190
have to order any every form for that

00:22:25,879 --> 00:22:35,999
and use whitelist validation instead of

00:22:32,190 --> 00:22:39,899
filtering out stuff one of the basic

00:22:35,999 --> 00:22:42,989
problems with PHP is the strip tags

00:22:39,899 --> 00:22:46,619
function because it actually doesn't

00:22:42,989 --> 00:22:48,989
strip tags like looks for a fellow

00:22:46,619 --> 00:22:51,210
heading HTML tags and strips it out no

00:22:48,989 --> 00:22:55,080
it looks for a pattern which consists of

00:22:51,210 --> 00:22:59,609
an opening and closing character and has

00:22:55,080 --> 00:23:01,769
no sense of tags at all so you should

00:22:59,609 --> 00:23:05,340
test it actually like put these kind of

00:23:01,769 --> 00:23:07,440
operator or characters in a string put

00:23:05,340 --> 00:23:10,950
it through strip tags and see what it

00:23:07,440 --> 00:23:14,220
does it's it's horrible actually it's

00:23:10,950 --> 00:23:17,129
that bad that if you rely on that to

00:23:14,220 --> 00:23:19,889
like filter user data you end up almost

00:23:17,129 --> 00:23:22,039
certainly with malformed HTML which

00:23:19,889 --> 00:23:25,259
screws up the rest of your application

00:23:22,039 --> 00:23:27,509
use something like HTML purifier or

00:23:25,259 --> 00:23:30,419
something it's it's white listing based

00:23:27,509 --> 00:23:34,080
approach you can simply specify which

00:23:30,419 --> 00:23:36,359
tags a user may or may not use and if

00:23:34,080 --> 00:23:38,460
you audit this you should look for you

00:23:36,359 --> 00:23:41,279
to city of that actually I I usually do

00:23:38,460 --> 00:23:43,889
a simple search through the sword source

00:23:41,279 --> 00:23:47,070
code of an application if strip tags if

00:23:43,889 --> 00:23:50,279
used that if strip tags is used that is

00:23:47,070 --> 00:23:52,320
a red light for me to dive into the

00:23:50,279 --> 00:23:54,239
application more because actually this

00:23:52,320 --> 00:23:56,879
usually means that a person is at least

00:23:54,239 --> 00:24:00,779
aware of some of the concepts of input

00:23:56,879 --> 00:24:02,290
validation but probably doesn't know

00:24:00,779 --> 00:24:04,870
very much what he's doing or

00:24:02,290 --> 00:24:13,020
she is doing for that matter that might

00:24:04,870 --> 00:24:16,540
also be the case also you could actually

00:24:13,020 --> 00:24:22,150
consider adding honey pots if you are a

00:24:16,540 --> 00:24:26,410
website owner and you are experiencing

00:24:22,150 --> 00:24:29,980
high traffic due to attacks then it's

00:24:26,410 --> 00:24:32,850
pretty easy to filter out patterns if

00:24:29,980 --> 00:24:38,170
you see that your application is being

00:24:32,850 --> 00:24:42,280
tried from certain URLs actually you can

00:24:38,170 --> 00:24:44,260
simply store those requests maybe by

00:24:42,280 --> 00:24:48,460
even hashing them or something the

00:24:44,260 --> 00:24:49,960
string and if you actually have that

00:24:48,460 --> 00:24:51,610
information it could be interesting

00:24:49,960 --> 00:24:54,010
because then you can test for that

00:24:51,610 --> 00:24:56,530
information and lead this possible

00:24:54,010 --> 00:24:58,830
attacker to something entirely else like

00:24:56,530 --> 00:25:00,970
a static HTML page or something which

00:24:58,830 --> 00:25:02,890
basically looks like your site but

00:25:00,970 --> 00:25:07,600
doesn't do anything at all much fun with

00:25:02,890 --> 00:25:11,080
that how to audit injection prevention

00:25:07,600 --> 00:25:13,660
actually what I do is I do a search for

00:25:11,080 --> 00:25:15,970
the usage of the raw get post and

00:25:13,660 --> 00:25:19,330
request variables as you may have

00:25:15,970 --> 00:25:22,090
noticed this in this audit is basically

00:25:19,330 --> 00:25:24,820
done for PHP applications but this

00:25:22,090 --> 00:25:28,290
basically this methodology works for

00:25:24,820 --> 00:25:31,300
just about any language all of them have

00:25:28,290 --> 00:25:35,200
methods of accessing raw post or get

00:25:31,300 --> 00:25:39,490
data check that look for that and see if

00:25:35,200 --> 00:25:43,380
it's done if forms are actually

00:25:39,490 --> 00:25:47,920
validated and not only like tested for

00:25:43,380 --> 00:25:52,450
empty or is set or other intelligence

00:25:47,920 --> 00:25:56,230
stuff like that check if a recent

00:25:52,450 --> 00:26:00,160
database driver is used like PDO or the

00:25:56,230 --> 00:26:02,170
old fell my sequel database driver

00:26:00,160 --> 00:26:05,770
because PDO actually out of the box

00:26:02,170 --> 00:26:08,680
doesn't allow more than one query / /

00:26:05,770 --> 00:26:12,010
action so if an attacker tries to inject

00:26:08,680 --> 00:26:15,110
SQL commands into an application video

00:26:12,010 --> 00:26:18,890
by default will simply ignore it

00:26:15,110 --> 00:26:22,040
most we do not take this for granted by

00:26:18,890 --> 00:26:24,590
the way but still check how queries are

00:26:22,040 --> 00:26:26,690
constructed check if it works with

00:26:24,590 --> 00:26:28,970
placeholders if it works with prepared

00:26:26,690 --> 00:26:30,620
statements stuff like that that is

00:26:28,970 --> 00:26:32,299
usually a pretty good indication if the

00:26:30,620 --> 00:26:35,120
application was designed by a person

00:26:32,299 --> 00:26:40,370
actually aware of best practices in a

00:26:35,120 --> 00:26:43,700
language and also if simply basic sanity

00:26:40,370 --> 00:26:46,700
is applied on input validation check if

00:26:43,700 --> 00:26:48,919
the magic quotes are off because if

00:26:46,700 --> 00:26:53,809
they're on I simply would suggest you do

00:26:48,919 --> 00:26:56,000
a shift delete and run away that also

00:26:53,809 --> 00:27:00,080
goes for a thing called safe mode

00:26:56,000 --> 00:27:03,770
anybody ever encountered that trust me

00:27:00,080 --> 00:27:07,520
if you see that switched on run also and

00:27:03,770 --> 00:27:10,309
simply test what happens simply put a

00:27:07,520 --> 00:27:12,140
delete from users or something if you do

00:27:10,309 --> 00:27:14,360
black box testing you would not have any

00:27:12,140 --> 00:27:17,059
knowledge about the database model

00:27:14,360 --> 00:27:18,710
behind it but you'd be probably not

00:27:17,059 --> 00:27:21,790
surprised that a lot of applications

00:27:18,710 --> 00:27:24,620
have a table called user or users or

00:27:21,790 --> 00:27:27,350
profiles or something like that well

00:27:24,620 --> 00:27:33,320
simply do it delete from that table and

00:27:27,350 --> 00:27:37,340
see what happens and also test if form

00:27:33,320 --> 00:27:41,990
data is stored in a database unfiltered

00:27:37,340 --> 00:27:44,390
or unencoded it's not evil to store HTML

00:27:41,990 --> 00:27:46,309
in a database or something it is however

00:27:44,390 --> 00:27:50,179
if you do it unfollowed ated or uncoated

00:27:46,309 --> 00:27:53,480
or anything at all I've seen some bit

00:27:50,179 --> 00:27:55,850
paranoid but okay go so far as to base64

00:27:53,480 --> 00:27:59,120
encode everything before putting it in a

00:27:55,850 --> 00:28:01,309
database to at least prevent that type

00:27:59,120 --> 00:28:04,910
of alphatec I don't actually think

00:28:01,309 --> 00:28:08,350
that's much sense but still okay all

00:28:04,910 --> 00:28:11,120
right number two cross-site scripting

00:28:08,350 --> 00:28:12,410
that actually is fun because actually a

00:28:11,120 --> 00:28:14,000
lot of applications are also vulnerable

00:28:12,410 --> 00:28:18,290
to that and it offers you the

00:28:14,000 --> 00:28:19,429
possibility of actually injecting stuff

00:28:18,290 --> 00:28:21,830
on the website to make it look

00:28:19,429 --> 00:28:23,660
differently in the Netherlands but we

00:28:21,830 --> 00:28:26,390
had this really nice incident with a

00:28:23,660 --> 00:28:27,820
right-wing politician a bit extremist

00:28:26,390 --> 00:28:30,370
right-wing who

00:28:27,820 --> 00:28:31,900
his website probably built by his nephew

00:28:30,370 --> 00:28:34,180
in his garage or something I don't know

00:28:31,900 --> 00:28:38,250
because actually the title of the page

00:28:34,180 --> 00:28:42,280
would be embedded in the get in the URL

00:28:38,250 --> 00:28:46,780
so if you would call that site and that

00:28:42,280 --> 00:28:48,460
page with another title in the URL you

00:28:46,780 --> 00:28:50,380
would actually get pretty funny results

00:28:48,460 --> 00:28:52,600
because since this guy's only issue

00:28:50,380 --> 00:28:54,940
politically is like he hates Islam and

00:28:52,600 --> 00:28:57,580
should think everybody should go away

00:28:54,940 --> 00:29:00,540
there was this whole campaign of Google

00:28:57,580 --> 00:29:04,390
bombing him with a title i love islam

00:29:00,540 --> 00:29:07,150
which basically was a bit embarrassing

00:29:04,390 --> 00:29:09,760
for this guy who actually is an

00:29:07,150 --> 00:29:13,870
embarrassment anyway so let's not go

00:29:09,760 --> 00:29:16,900
into that actually cross-site scripting

00:29:13,870 --> 00:29:19,420
can be remedied remedied in just about

00:29:16,900 --> 00:29:21,130
the same way you do injection because

00:29:19,420 --> 00:29:23,920
basically cross-site scripting is just

00:29:21,130 --> 00:29:27,610
another type of injection but actually

00:29:23,920 --> 00:29:31,300
it's the result of injection so simply

00:29:27,610 --> 00:29:33,430
do not trust any input by default even

00:29:31,300 --> 00:29:36,550
if it has pleased with previously been

00:29:33,430 --> 00:29:38,260
stored in a database or even in a simple

00:29:36,550 --> 00:29:43,510
file or something you should check

00:29:38,260 --> 00:29:48,340
everything then also do not allow for

00:29:43,510 --> 00:29:50,980
external input external references to be

00:29:48,340 --> 00:29:54,120
used I like a nice example of that is

00:29:50,980 --> 00:29:57,400
image files like avatars a lot of

00:29:54,120 --> 00:29:59,470
applications previously like PHP BB had

00:29:57,400 --> 00:30:03,790
the option that you could provide an URL

00:29:59,470 --> 00:30:06,430
to an image and then when you would be

00:30:03,790 --> 00:30:09,310
displayed in a PHP BB page it would

00:30:06,430 --> 00:30:12,880
actually access this URL to input your

00:30:09,310 --> 00:30:16,480
image into that page which basically was

00:30:12,880 --> 00:30:19,510
fantastic because um PHP BB would have

00:30:16,480 --> 00:30:23,530
this authentication mechanism which was

00:30:19,510 --> 00:30:25,210
not very well but still actually you

00:30:23,530 --> 00:30:28,990
know that you can dynamically generate

00:30:25,210 --> 00:30:30,700
images through PHP right this is cool

00:30:28,990 --> 00:30:35,440
because actually what you could do was

00:30:30,700 --> 00:30:38,170
simply offer a link to a PHP file which

00:30:35,440 --> 00:30:41,410
while serving a image at the same time

00:30:38,170 --> 00:30:48,160
hijacked the user session of the PSP

00:30:41,410 --> 00:30:50,380
BB user well voila that is not exactly

00:30:48,160 --> 00:30:55,150
cross-site scripting in the usual sense

00:30:50,380 --> 00:30:57,850
but it can be like I said information

00:30:55,150 --> 00:31:01,870
like session cookies or something like

00:30:57,850 --> 00:31:06,580
that they can simply be used to take

00:31:01,870 --> 00:31:12,730
over a user session also be careful

00:31:06,580 --> 00:31:15,370
because actually if you also if you

00:31:12,730 --> 00:31:17,410
download an externally referenced file

00:31:15,370 --> 00:31:19,660
this could create really nice

00:31:17,410 --> 00:31:23,500
possibilities because HTTP protocol

00:31:19,660 --> 00:31:27,280
supports redirection the fact that the

00:31:23,500 --> 00:31:29,740
initial URL you get from your user seems

00:31:27,280 --> 00:31:32,140
entirely legitimate does not internet

00:31:29,740 --> 00:31:34,090
does not mean that the curl command

00:31:32,140 --> 00:31:35,830
afterwards we'll end up at the same page

00:31:34,090 --> 00:31:37,840
because if there is a redirect after

00:31:35,830 --> 00:31:44,110
that you end up somewhere completely

00:31:37,840 --> 00:31:46,150
different this is also bad so you scroll

00:31:44,110 --> 00:31:48,310
anyway and disable redirects if you want

00:31:46,150 --> 00:31:50,380
to import anything from externally

00:31:48,310 --> 00:31:52,270
references and sources you should simply

00:31:50,380 --> 00:31:54,490
only accept something that it's actually

00:31:52,270 --> 00:31:57,940
there at the time you want to download

00:31:54,490 --> 00:32:02,590
it and i'll simply bailout and code

00:31:57,940 --> 00:32:07,560
input just like that be careful with

00:32:02,590 --> 00:32:07,560
strip tags like i said before actually

00:32:08,400 --> 00:32:14,470
really look into HTML purifier anyway so

00:32:11,170 --> 00:32:18,880
basically who of you already knows HTML

00:32:14,470 --> 00:32:20,290
purifier is every using it cool well I

00:32:18,880 --> 00:32:21,540
hope you will look into it because it's

00:32:20,290 --> 00:32:28,380
really nice you can do a lot of

00:32:21,540 --> 00:32:32,950
whitelisted filtering with that and also

00:32:28,380 --> 00:32:36,880
look for the usage of server the soup

00:32:32,950 --> 00:32:39,670
superglobal actually the server

00:32:36,880 --> 00:32:42,850
superglobal contains unfiltered data

00:32:39,670 --> 00:32:44,790
from your web server which basically to

00:32:42,850 --> 00:32:49,590
your application is an external source

00:32:44,790 --> 00:32:52,810
so just like i said before filter it up

00:32:49,590 --> 00:32:54,759
how to audit is well basically it's

00:32:52,810 --> 00:32:56,379
similar to

00:32:54,759 --> 00:32:59,649
SQL injection or any kind of other

00:32:56,379 --> 00:33:01,599
injection and also look for the users of

00:32:59,649 --> 00:33:05,769
server variables because they can also

00:33:01,599 --> 00:33:08,859
be over right written the PHP self for

00:33:05,769 --> 00:33:13,509
instance is a variety is pretty easily

00:33:08,859 --> 00:33:15,989
alterable if you supply Apache with the

00:33:13,509 --> 00:33:19,349
the right information and I get a

00:33:15,989 --> 00:33:23,079
statement look for that online it's cool

00:33:19,349 --> 00:33:25,949
number three broken authentication and

00:33:23,079 --> 00:33:28,479
session management's what is it well

00:33:25,949 --> 00:33:30,459
functions related to authentication and

00:33:28,479 --> 00:33:34,929
session management are often not

00:33:30,459 --> 00:33:36,669
implemented collect correctly what do I

00:33:34,929 --> 00:33:40,239
mean with that a lot of application

00:33:36,669 --> 00:33:42,729
basically only guard the front door they

00:33:40,239 --> 00:33:45,519
only protect login forums they only

00:33:42,729 --> 00:33:48,940
protect information directly reachable

00:33:45,519 --> 00:33:54,579
through the application but not very

00:33:48,940 --> 00:33:57,489
much use any protection on third-party

00:33:54,579 --> 00:34:02,589
items like files or images or something

00:33:57,489 --> 00:34:08,289
like that birkin authentication and

00:34:02,589 --> 00:34:11,740
session management also means that you

00:34:08,289 --> 00:34:16,450
should have at least basic understanding

00:34:11,740 --> 00:34:18,940
of how to use like redirect variables

00:34:16,450 --> 00:34:21,849
redirect URLs and stuff like that to

00:34:18,940 --> 00:34:23,740
actually test for the source your user

00:34:21,849 --> 00:34:28,000
came from it's it's not perfect but

00:34:23,740 --> 00:34:29,710
security basically is not making every

00:34:28,000 --> 00:34:31,809
aspect of your application perfect

00:34:29,710 --> 00:34:34,329
security is actually building up a layer

00:34:31,809 --> 00:34:36,250
cake of so many steps that a potential

00:34:34,329 --> 00:34:37,960
attacker should walk through before

00:34:36,250 --> 00:34:39,639
reaching your application that somewhere

00:34:37,960 --> 00:34:42,669
in the meantime he goes frustrated or

00:34:39,639 --> 00:34:44,859
and leave or he goes back to his client

00:34:42,669 --> 00:34:47,889
and says well that I've done 16

00:34:44,859 --> 00:34:49,450
hours of testing and I still not any in

00:34:47,889 --> 00:34:50,919
this application this is going to cost

00:34:49,450 --> 00:34:54,639
you money this is actually what you

00:34:50,919 --> 00:34:57,220
basically want I hear a bit but that's

00:34:54,639 --> 00:35:02,259
not me for instance for no finally my

00:34:57,220 --> 00:35:05,019
laptop is still running also if you

00:35:02,259 --> 00:35:07,369
orders from sorry if you ordered an

00:35:05,019 --> 00:35:10,880
application look for

00:35:07,369 --> 00:35:15,279
two simple validations like session

00:35:10,880 --> 00:35:18,380
logged in you'd be amazed how many

00:35:15,279 --> 00:35:21,710
applications simply do an authentication

00:35:18,380 --> 00:35:25,160
and then set a session variable hey I'm

00:35:21,710 --> 00:35:32,569
logged in now so just anything I do yeah

00:35:25,160 --> 00:35:35,960
cool so because this also can be forced

00:35:32,569 --> 00:35:38,299
pretty easily and also if you run such

00:35:35,960 --> 00:35:40,099
or military applications from the same

00:35:38,299 --> 00:35:41,630
web root this can overwrite each other

00:35:40,099 --> 00:35:47,029
and stuff like that it's really nasty

00:35:41,630 --> 00:35:50,089
what you should do is check if an

00:35:47,029 --> 00:35:53,450
application not directly checks

00:35:50,089 --> 00:35:55,279
something in the session like if session

00:35:53,450 --> 00:35:59,630
logged in show confidential information

00:35:55,279 --> 00:36:01,940
but if it uses some kind of standardized

00:35:59,630 --> 00:36:05,990
method to do that but actually also

00:36:01,940 --> 00:36:08,150
looks to some context you can make a

00:36:05,990 --> 00:36:11,960
function in an application or look for a

00:36:08,150 --> 00:36:14,180
function is logged in which checks also

00:36:11,960 --> 00:36:19,150
for a session variable but which also

00:36:14,180 --> 00:36:22,339
may check for stuff like refer a URL or

00:36:19,150 --> 00:36:26,150
previous encounters with the side

00:36:22,339 --> 00:36:28,700
basically checking if a session exists

00:36:26,150 --> 00:36:32,499
should not be in your application logic

00:36:28,700 --> 00:36:34,970
flow but should be as specific

00:36:32,499 --> 00:36:39,670
standardized components handling that

00:36:34,970 --> 00:36:43,519
and you can check for that also

00:36:39,670 --> 00:36:45,559
basically don't use integers as user or

00:36:43,519 --> 00:36:48,410
profile ideas because you can do a lot

00:36:45,559 --> 00:36:52,130
of nice traversing stuff without and

00:36:48,410 --> 00:36:54,559
also may be mostly user ID one

00:36:52,130 --> 00:36:55,940
represents the global administrator so

00:36:54,559 --> 00:36:59,769
if you have some kind of session

00:36:55,940 --> 00:37:02,180
hijacking which can elevate to user one

00:36:59,769 --> 00:37:05,239
specifically like in Drupal the user one

00:37:02,180 --> 00:37:08,660
is God in the application it can do

00:37:05,239 --> 00:37:12,710
everything you should use something

00:37:08,660 --> 00:37:14,809
something hashed or uuid as a user ID

00:37:12,710 --> 00:37:18,440
because it's a lot less predictable you

00:37:14,809 --> 00:37:21,180
can to audit that test for that how to

00:37:18,440 --> 00:37:24,420
test or how to audit both

00:37:21,180 --> 00:37:27,450
actually it's pretty tricky but also

00:37:24,420 --> 00:37:30,809
check what I call hear the background or

00:37:27,450 --> 00:37:33,960
the back office namely if your session

00:37:30,809 --> 00:37:36,000
data is stored securely PHP sessions are

00:37:33,960 --> 00:37:38,460
basically stored in flat files in your

00:37:36,000 --> 00:37:40,950
file system without that much of checks

00:37:38,460 --> 00:37:44,940
and validations about their input so

00:37:40,950 --> 00:37:47,250
actually if a hacker gets to the temp

00:37:44,940 --> 00:37:49,559
folder of your server which mostly is

00:37:47,250 --> 00:37:52,500
like public readable or writable anyway

00:37:49,559 --> 00:37:54,540
it's not that hard to retrieve the

00:37:52,500 --> 00:37:59,609
session and ultra information in that

00:37:54,540 --> 00:38:04,589
session also make sure session cookies

00:37:59,609 --> 00:38:06,240
are ace to be only which prevents basic

00:38:04,589 --> 00:38:09,630
the possibility of JavaScript

00:38:06,240 --> 00:38:12,030
interacting with the session cookie of

00:38:09,630 --> 00:38:15,000
course this is a client-side measure so

00:38:12,030 --> 00:38:17,730
it's not perfect but again security is

00:38:15,000 --> 00:38:19,290
not by making each its item perfect

00:38:17,730 --> 00:38:21,599
securities by raising the bar high

00:38:19,290 --> 00:38:24,750
enough to simply make somebody

00:38:21,599 --> 00:38:28,799
demotivated and check which is really

00:38:24,750 --> 00:38:32,069
fun to do check with a debugger what is

00:38:28,799 --> 00:38:36,059
actually in the session you'd be amazed

00:38:32,069 --> 00:38:38,339
a lot of applications simply swamp the

00:38:36,059 --> 00:38:41,490
session they just keep adding and adding

00:38:38,339 --> 00:38:44,579
and adding information and this is not

00:38:41,490 --> 00:38:46,770
only a problem because of its really

00:38:44,579 --> 00:38:49,589
inefficient I mean the PHP interpreter

00:38:46,770 --> 00:38:52,470
must parse all this information on each

00:38:49,589 --> 00:38:55,670
request which get pretty ugly it's also

00:38:52,470 --> 00:38:57,720
a perfect source of information about

00:38:55,670 --> 00:39:00,630
clients for instance if you run an

00:38:57,720 --> 00:39:04,859
e-commerce solution like let's say

00:39:00,630 --> 00:39:06,900
something old like OS commerce look into

00:39:04,859 --> 00:39:09,599
this session actually there's personal

00:39:06,900 --> 00:39:11,220
information stored in there there's

00:39:09,599 --> 00:39:13,559
references to addresses to bank

00:39:11,220 --> 00:39:15,480
information it mind-blowing how much

00:39:13,559 --> 00:39:18,750
information is actually in that session

00:39:15,480 --> 00:39:21,390
so the best part about that being an

00:39:18,750 --> 00:39:24,180
attacker could be that hey I do not need

00:39:21,390 --> 00:39:27,720
to hack the actual application I simply

00:39:24,180 --> 00:39:32,810
get all the session data and I'll parse

00:39:27,720 --> 00:39:35,360
my way through that which

00:39:32,810 --> 00:39:39,070
effectively is a nice bridge to this

00:39:35,360 --> 00:39:42,050
subject insecure direct object axis

00:39:39,070 --> 00:39:45,260
actually what is it it's the possibility

00:39:42,050 --> 00:39:47,990
of an outside party to access something

00:39:45,260 --> 00:39:50,950
in your application that is usually only

00:39:47,990 --> 00:39:52,880
available through authentication by

00:39:50,950 --> 00:39:58,100
authenticated measures and stuff like

00:39:52,880 --> 00:40:04,880
that this could be uploaded files from a

00:39:58,100 --> 00:40:07,160
user images stuff like that what to do

00:40:04,880 --> 00:40:09,290
against it well yet the htaccess files

00:40:07,160 --> 00:40:11,570
of course which should you should simply

00:40:09,290 --> 00:40:13,940
not use that much because there are

00:40:11,570 --> 00:40:15,710
performance penalty which can actually

00:40:13,940 --> 00:40:17,780
cause problems by themselves but still

00:40:15,710 --> 00:40:21,890
if you're on shared hosting it's mostly

00:40:17,780 --> 00:40:24,590
the only thing you have but your basic

00:40:21,890 --> 00:40:26,900
paradigm should be to test and also

00:40:24,590 --> 00:40:30,350
design your applications to not store

00:40:26,900 --> 00:40:33,770
anything remotely private in the actual

00:40:30,350 --> 00:40:37,070
web root because by design the Apache

00:40:33,770 --> 00:40:39,290
web root or any web server web root for

00:40:37,070 --> 00:40:41,000
instance is public should be public

00:40:39,290 --> 00:40:44,000
actually because else it will be in a

00:40:41,000 --> 00:40:47,060
web root a lot of modern web

00:40:44,000 --> 00:40:50,390
applications like Drupal or WordPress or

00:40:47,060 --> 00:40:53,060
Magento or you name it they actually

00:40:50,390 --> 00:40:56,120
have configuration options to store

00:40:53,060 --> 00:41:01,270
private files outside of the web boot do

00:40:56,120 --> 00:41:05,060
that and you can audit for that as well

00:41:01,270 --> 00:41:07,040
also you can use things like open

00:41:05,060 --> 00:41:13,640
basedir how many of you have heard of

00:41:07,040 --> 00:41:16,580
open basedir in PHP again new topic open

00:41:13,640 --> 00:41:20,750
basedir effectively limits in the PHP

00:41:16,580 --> 00:41:23,090
configuration the scope of where the PHP

00:41:20,750 --> 00:41:25,340
interpreter during runtime can look for

00:41:23,090 --> 00:41:28,270
files so you can simply restrict it to

00:41:25,340 --> 00:41:33,290
the web root and to some private files

00:41:28,270 --> 00:41:35,000
folder any application should always run

00:41:33,290 --> 00:41:37,880
with the minimum set of permissions

00:41:35,000 --> 00:41:40,160
needed you can also use a balma for that

00:41:37,880 --> 00:41:43,490
a primer is actually pretty nice it's

00:41:40,160 --> 00:41:45,710
also whitelisted stuff like that I'll go

00:41:43,490 --> 00:41:47,330
into that later but

00:41:45,710 --> 00:41:49,910
they are simply how to audit check

00:41:47,330 --> 00:41:52,420
actually if anything private is being

00:41:49,910 --> 00:41:55,790
stored in the webroot at all and if so

00:41:52,420 --> 00:41:59,599
make sure it gets gets out of there oh

00:41:55,790 --> 00:42:03,349
yeah symlinks usually are also a bad

00:41:59,599 --> 00:42:05,720
idea because if you encounter symlinks

00:42:03,349 --> 00:42:07,820
in a web brute effectively that means

00:42:05,720 --> 00:42:10,730
that some other part of your system is

00:42:07,820 --> 00:42:13,040
also reachable and the beauty about that

00:42:10,730 --> 00:42:15,619
is that this other part of the system

00:42:13,040 --> 00:42:17,950
might be a part that your client might

00:42:15,619 --> 00:42:20,599
not perceive as potentially public

00:42:17,950 --> 00:42:22,940
because it's outside of the web mood so

00:42:20,599 --> 00:42:30,050
check for symbolic links and stuff like

00:42:22,940 --> 00:42:33,470
that cross-site request forgery yeah

00:42:30,050 --> 00:42:35,780
it's it's it's basically also something

00:42:33,470 --> 00:42:43,339
that actually is pretty close to

00:42:35,780 --> 00:42:47,270
cross-site scripting but then done let's

00:42:43,339 --> 00:42:49,880
say from a different application to

00:42:47,270 --> 00:42:52,310
ward's your website so instead of inside

00:42:49,880 --> 00:42:54,290
out it's coming outside in what this

00:42:52,310 --> 00:42:56,750
basically means is that somebody is

00:42:54,290 --> 00:42:59,420
trying to pretend to access your

00:42:56,750 --> 00:43:02,630
application as with your application

00:42:59,420 --> 00:43:07,700
normally do itself why is this a bad

00:43:02,630 --> 00:43:09,859
thing well actually usually if an

00:43:07,700 --> 00:43:12,349
application receives a requests then it

00:43:09,859 --> 00:43:14,750
gives a response in it in this response

00:43:12,349 --> 00:43:18,020
there could be a lot of interesting

00:43:14,750 --> 00:43:24,500
information like session data session

00:43:18,020 --> 00:43:29,030
IDs and this also allows an attacker to

00:43:24,500 --> 00:43:31,010
force requests towards an application

00:43:29,030 --> 00:43:33,980
which the application perceives us being

00:43:31,010 --> 00:43:35,599
legitimate by the user but in fact it's

00:43:33,980 --> 00:43:38,320
not by the user it's by some remotely

00:43:35,599 --> 00:43:42,680
controlled script which is trying to

00:43:38,320 --> 00:43:45,740
access the server what to do against it

00:43:42,680 --> 00:43:50,330
well again never use anything else than

00:43:45,740 --> 00:43:52,040
HTTP only session cookies at all and see

00:43:50,330 --> 00:43:56,780
the previous points regarding cross-site

00:43:52,040 --> 00:43:58,400
scripting and injection look also for in

00:43:56,780 --> 00:44:01,910
forums

00:43:58,400 --> 00:44:05,710
if the form actually has some kind of

00:44:01,910 --> 00:44:09,109
risk request response validation like an

00:44:05,710 --> 00:44:15,220
assault or a hash code being added as a

00:44:09,109 --> 00:44:18,200
hidden element to a form because this

00:44:15,220 --> 00:44:20,990
salt or this hash code you can generate

00:44:18,200 --> 00:44:24,200
when generating the form you can store

00:44:20,990 --> 00:44:26,539
this in a session you can test when the

00:44:24,200 --> 00:44:28,910
form information comes in from the user

00:44:26,539 --> 00:44:31,730
when the post request is done if the

00:44:28,910 --> 00:44:33,529
correct salt is there and if it's not

00:44:31,730 --> 00:44:35,480
there then the request did not came from

00:44:33,529 --> 00:44:39,170
your application so you can simply

00:44:35,480 --> 00:44:42,740
ignore it look into that it's it's

00:44:39,170 --> 00:44:45,680
pretty easily doable especially what I

00:44:42,740 --> 00:44:49,730
also check when I out in an application

00:44:45,680 --> 00:44:52,369
is if the application uses standardized

00:44:49,730 --> 00:44:55,250
form generators like zend framework

00:44:52,369 --> 00:44:59,329
forum generator which actually is pretty

00:44:55,250 --> 00:45:05,180
horrible but still it does add hashing

00:44:59,329 --> 00:45:07,700
to forums check at the very least if

00:45:05,180 --> 00:45:10,549
forms are being made by a general

00:45:07,700 --> 00:45:14,000
component which does form generation and

00:45:10,549 --> 00:45:16,849
input validation or if forms are being

00:45:14,000 --> 00:45:20,289
made dynamically or also nowadays if

00:45:16,849 --> 00:45:22,250
forums are being generated client-side

00:45:20,289 --> 00:45:24,289
because a lot of jumping script

00:45:22,250 --> 00:45:26,089
libraries nowadays are pretty well

00:45:24,289 --> 00:45:29,150
capable of simply rendering forums

00:45:26,089 --> 00:45:31,250
there's themselves so there's not much

00:45:29,150 --> 00:45:34,400
server-side interaction going on until

00:45:31,250 --> 00:45:40,220
you receive a request you shoot it at

00:45:34,400 --> 00:45:42,529
least also then try and embed some kind

00:45:40,220 --> 00:45:45,680
of hashing and validation or at the very

00:45:42,529 --> 00:45:48,220
least check for the referrer URL where

00:45:45,680 --> 00:45:52,910
an actual input came from or at least

00:45:48,220 --> 00:45:55,400
just as long as that's it actually it

00:45:52,910 --> 00:45:57,289
goes back to the first part injection

00:45:55,400 --> 00:46:01,400
know where your data is coming from

00:45:57,289 --> 00:46:05,270
filter it validated simply do not trust

00:46:01,400 --> 00:46:06,829
data from outside by default another

00:46:05,270 --> 00:46:09,950
attack vector security miss

00:46:06,829 --> 00:46:11,680
configuration which is pretty close

00:46:09,950 --> 00:46:17,500
actually also to the

00:46:11,680 --> 00:46:20,079
aspect of unauthenticated object access

00:46:17,500 --> 00:46:21,760
and going to take a zip of water because

00:46:20,079 --> 00:46:29,579
my throat is starting to feel like a

00:46:21,760 --> 00:46:34,690
desert security miss configuration

00:46:29,579 --> 00:46:38,680
actually most software you will install

00:46:34,690 --> 00:46:40,829
with opensuse or with some other obscure

00:46:38,680 --> 00:46:45,400
Linux distribution like fedora or

00:46:40,829 --> 00:46:48,579
something out of the box on installation

00:46:45,400 --> 00:46:49,960
it's not being configured to be used in

00:46:48,579 --> 00:46:51,880
a production environment actually it's

00:46:49,960 --> 00:46:54,490
mostly configured to be used in a

00:46:51,880 --> 00:46:56,980
development environment which basically

00:46:54,490 --> 00:46:59,069
means that it gives back a lot of

00:46:56,980 --> 00:47:02,530
information about the installment about

00:46:59,069 --> 00:47:05,440
the actual errors about error codes but

00:47:02,530 --> 00:47:09,390
at least a lot more information which to

00:47:05,440 --> 00:47:14,670
the regular user is not relevant at all

00:47:09,390 --> 00:47:17,290
but it's yeah it's simply on by default

00:47:14,670 --> 00:47:20,790
basically security misinformation can be

00:47:17,290 --> 00:47:23,619
mitigated by simply check the

00:47:20,790 --> 00:47:27,910
configuration of all your items like in

00:47:23,619 --> 00:47:32,559
the PHP any file check if exposed PHP is

00:47:27,910 --> 00:47:34,990
off if display errors is of stuff like

00:47:32,559 --> 00:47:37,150
that if you have errors in your PHP code

00:47:34,990 --> 00:47:39,750
it should not be visible to the user it

00:47:37,150 --> 00:47:41,770
should go to some kind of log file

00:47:39,750 --> 00:47:44,470
basically this is a lot easier actually

00:47:41,770 --> 00:47:46,569
to look at it because if it's in a

00:47:44,470 --> 00:47:48,400
locked file you can look it up and if

00:47:46,569 --> 00:47:56,079
only the user sees it you will not know

00:47:48,400 --> 00:47:57,579
the error and also stack up a line of

00:47:56,079 --> 00:48:02,099
defense here we go again with the layer

00:47:57,579 --> 00:48:07,180
cake on a basic OS level use a firewall

00:48:02,099 --> 00:48:08,980
dot simply open only the parts that you

00:48:07,180 --> 00:48:12,220
actually are willing to expose to the

00:48:08,980 --> 00:48:15,700
world if you're on shared hosting this

00:48:12,220 --> 00:48:19,200
is usually being bummed but even then

00:48:15,700 --> 00:48:22,000
check it but if you do check this on a

00:48:19,200 --> 00:48:23,619
hosted environment you should inform the

00:48:22,000 --> 00:48:24,890
hosting provider about that because you

00:48:23,619 --> 00:48:26,390
used we will not be

00:48:24,890 --> 00:48:29,360
be happy if somebody does a port scan

00:48:26,390 --> 00:48:33,470
unannounced this could basically destroy

00:48:29,360 --> 00:48:37,640
your contract use a web application

00:48:33,470 --> 00:48:41,420
firewall like much security I will go

00:48:37,640 --> 00:48:46,330
into that later but at the very least

00:48:41,420 --> 00:48:49,370
and opensuse does a good job on this use

00:48:46,330 --> 00:48:52,730
specific user accounts for running

00:48:49,370 --> 00:48:59,030
services which do not need global ex's

00:48:52,730 --> 00:49:02,540
like if you run a web server or if you

00:48:59,030 --> 00:49:05,000
use a database server then simply have a

00:49:02,540 --> 00:49:08,420
separate user for that which only is

00:49:05,000 --> 00:49:10,370
allowed to touch and alter what it's

00:49:08,420 --> 00:49:12,770
supposed to do a partner can help you

00:49:10,370 --> 00:49:15,590
with this also but basically it's good

00:49:12,770 --> 00:49:17,900
practice and this also is important

00:49:15,590 --> 00:49:20,150
inside the application you would not

00:49:17,900 --> 00:49:22,640
know how many times I see web

00:49:20,150 --> 00:49:26,060
applications with which run with the

00:49:22,640 --> 00:49:28,580
mysql root user and somebody would be

00:49:26,060 --> 00:49:31,310
like on shared hosting and every

00:49:28,580 --> 00:49:37,100
application would use the same login

00:49:31,310 --> 00:49:39,830
information for the database why do

00:49:37,100 --> 00:49:41,600
these applications even need to have

00:49:39,830 --> 00:49:44,500
access to each other's data well usually

00:49:41,600 --> 00:49:48,050
not and the only thing you actually are

00:49:44,500 --> 00:49:52,160
doing is enforcing or at least opening

00:49:48,050 --> 00:49:57,140
up possible trouble database update

00:49:52,160 --> 00:49:58,670
scripts if you run like more multiple

00:49:57,140 --> 00:50:01,460
instances of a content management system

00:49:58,670 --> 00:50:03,230
like drupal on the same web server and

00:50:01,460 --> 00:50:06,200
you all run them with the same mysql

00:50:03,230 --> 00:50:07,640
user and everything yeah well that's a

00:50:06,200 --> 00:50:09,590
disaster waiting to happen because if

00:50:07,640 --> 00:50:11,300
one of them goes updating your schema

00:50:09,590 --> 00:50:13,940
database schema might change and you're

00:50:11,300 --> 00:50:16,790
screwed too so security miss

00:50:13,940 --> 00:50:18,890
congregation basically mean know what is

00:50:16,790 --> 00:50:21,020
running on your server and how it is

00:50:18,890 --> 00:50:26,330
running and how it is configured check

00:50:21,020 --> 00:50:29,300
it in secure cryptographic storage well

00:50:26,330 --> 00:50:35,680
this is hard this is an area which is

00:50:29,300 --> 00:50:38,420
basically very hard to enforce because

00:50:35,680 --> 00:50:43,000
most of us at least

00:50:38,420 --> 00:50:46,130
we personally have no in-depth technical

00:50:43,000 --> 00:50:50,740
knowledge of cryptography other than how

00:50:46,130 --> 00:50:54,220
to use it I have basic understanding how

00:50:50,740 --> 00:50:57,890
cryptography algorithms work of course

00:50:54,220 --> 00:51:01,130
we all read security blogs and stuff of

00:50:57,890 --> 00:51:07,760
course but it's hard to test this but

00:51:01,130 --> 00:51:10,309
anything anything you can do against it

00:51:07,760 --> 00:51:14,290
is again put up a little bit of offense

00:51:10,309 --> 00:51:17,809
and make sure that it's not directly

00:51:14,290 --> 00:51:19,970
evident what is actually doing this also

00:51:17,809 --> 00:51:24,099
is not only for cryptographic storing

00:51:19,970 --> 00:51:27,380
this is for hashing too because md5

00:51:24,099 --> 00:51:30,440
which is mostly the default hashing

00:51:27,380 --> 00:51:32,869
algorithm you have this fantastic

00:51:30,440 --> 00:51:34,549
phenomenon called rainbow tables you

00:51:32,869 --> 00:51:36,619
have a lot of websites actually where

00:51:34,549 --> 00:51:40,069
you can input an md5 hash and you'd be

00:51:36,619 --> 00:51:43,970
surprised how many are actually resolved

00:51:40,069 --> 00:51:48,790
in a matter of milliseconds so add

00:51:43,970 --> 00:51:52,640
hashing add salts I mean to hashing

00:51:48,790 --> 00:51:54,799
salts can and I hope everybody is

00:51:52,640 --> 00:51:58,280
familiar with the concept of salting but

00:51:54,799 --> 00:52:00,410
simply add something that is configured

00:51:58,280 --> 00:52:06,020
on the application level to like a

00:52:00,410 --> 00:52:09,470
password basically encrypt privacy or

00:52:06,020 --> 00:52:11,420
financially related data a lot of

00:52:09,470 --> 00:52:14,540
countries actually require this from you

00:52:11,420 --> 00:52:17,390
and yeah maybe to get this out of the

00:52:14,540 --> 00:52:19,369
way base64 encoding is not encryption

00:52:17,390 --> 00:52:26,839
it's up for skating but at the very

00:52:19,369 --> 00:52:29,869
least it is something and also don't

00:52:26,839 --> 00:52:31,760
store data that might become relevant in

00:52:29,869 --> 00:52:35,500
some particular one in a million use

00:52:31,760 --> 00:52:40,089
case at some time applications or

00:52:35,500 --> 00:52:42,710
application developers tend to have the

00:52:40,089 --> 00:52:45,020
feeling that they should just log

00:52:42,710 --> 00:52:49,579
anything should ask a client for

00:52:45,020 --> 00:52:52,160
anything well I wouldn't do that for

00:52:49,579 --> 00:52:54,380
instance like payment service

00:52:52,160 --> 00:52:56,420
Gateway's exist for a reason namely that

00:52:54,380 --> 00:52:58,849
you do not need to see store bank

00:52:56,420 --> 00:53:00,470
information of a user so don't ask a

00:52:58,849 --> 00:53:02,990
user for their bank account number if

00:53:00,470 --> 00:53:05,000
you are using something like PayPal to

00:53:02,990 --> 00:53:08,329
handle the actual transaction why would

00:53:05,000 --> 00:53:10,039
you do that mostly I get answers back

00:53:08,329 --> 00:53:15,200
like yeah but but the field is already

00:53:10,039 --> 00:53:17,809
in the Commerce system so i simply leave

00:53:15,200 --> 00:53:20,569
it there yet the problem is if you have

00:53:17,809 --> 00:53:25,130
this information you are responsible for

00:53:20,569 --> 00:53:27,490
it and your client is too but that's a

00:53:25,130 --> 00:53:30,680
whole different concept because actually

00:53:27,490 --> 00:53:33,680
if you as an application developer or

00:53:30,680 --> 00:53:36,740
security auditor or any kind of expert

00:53:33,680 --> 00:53:40,220
role in that matter do an audit for a

00:53:36,740 --> 00:53:41,950
client and you should really tell the

00:53:40,220 --> 00:53:45,200
client that he's storing information

00:53:41,950 --> 00:53:48,049
that he is actually required by law to

00:53:45,200 --> 00:53:50,359
take precautions for if you don't do

00:53:48,049 --> 00:53:52,460
that you could be held accountable if

00:53:50,359 --> 00:53:57,440
something goes wrong so be really

00:53:52,460 --> 00:53:59,150
careful with that simply don't store

00:53:57,440 --> 00:54:01,700
what you need directly to facilitate

00:53:59,150 --> 00:54:05,839
your logistic process or authentication

00:54:01,700 --> 00:54:10,069
or something at all failure to restrict

00:54:05,839 --> 00:54:14,569
URL axes well I love this one actually

00:54:10,069 --> 00:54:17,480
you know why this is actually the attack

00:54:14,569 --> 00:54:20,359
factor that made Google the biggest porn

00:54:17,480 --> 00:54:24,710
indexer in the world because what this

00:54:20,359 --> 00:54:27,440
is is URL axis URLs have IDs brought

00:54:24,710 --> 00:54:31,520
mostly of pages encrypted in them if you

00:54:27,440 --> 00:54:33,170
track traverse these page IDs you'd be

00:54:31,520 --> 00:54:38,630
amazed how many system would allow you

00:54:33,170 --> 00:54:41,119
to actually see pages that are not meant

00:54:38,630 --> 00:54:43,819
for public display but like I said

00:54:41,119 --> 00:54:47,599
before mostly only the login page has

00:54:43,819 --> 00:54:51,140
some kind of authentication and the rest

00:54:47,599 --> 00:54:52,460
could be just static HTML HTML well this

00:54:51,140 --> 00:54:54,619
is basically what most search engines

00:54:52,460 --> 00:54:58,549
did but a lot of sites with some

00:54:54,619 --> 00:55:00,230
interesting biology they simply went on

00:54:58,549 --> 00:55:04,930
and on and on on and just indexed

00:55:00,230 --> 00:55:04,930
everything behind page 1 and

00:55:05,660 --> 00:55:12,900
everything you output to a user should

00:55:10,020 --> 00:55:17,220
only be done after you have actually

00:55:12,900 --> 00:55:20,970
validated that this user is authorized

00:55:17,220 --> 00:55:24,840
so simply do not assume because the user

00:55:20,970 --> 00:55:29,280
knows some unique URL even if you used

00:55:24,840 --> 00:55:32,910
you you do univ ii sorry youyou IDs

00:55:29,280 --> 00:55:35,550
thank you instead of integers that that

00:55:32,910 --> 00:55:40,760
it's impossible to guess a page it is

00:55:35,550 --> 00:55:44,670
possible not only that it's very real

00:55:40,760 --> 00:55:48,840
that a user will not actually perceive a

00:55:44,670 --> 00:55:51,450
page as being confidential and copy and

00:55:48,840 --> 00:55:55,680
paste the URL in an email send it to

00:55:51,450 --> 00:55:57,540
another user and here you go at the best

00:55:55,680 --> 00:56:01,020
part actually our applications which

00:55:57,540 --> 00:56:03,270
store the session identifiers in the URL

00:56:01,020 --> 00:56:06,480
this is beautiful because when a user

00:56:03,270 --> 00:56:08,130
actually copy and paste that URL puts it

00:56:06,480 --> 00:56:10,680
in an email effectively he has created

00:56:08,130 --> 00:56:12,900
his own session hijacking because the

00:56:10,680 --> 00:56:15,690
user which will open the email access

00:56:12,900 --> 00:56:22,380
the URL will have the session identifier

00:56:15,690 --> 00:56:25,800
of the other user and bingo insufficient

00:56:22,380 --> 00:56:28,650
transport layer protection this is hard

00:56:25,800 --> 00:56:31,080
because actually the transport layer is

00:56:28,650 --> 00:56:33,660
every piece of infrastructure between

00:56:31,080 --> 00:56:36,210
your web server and the client and you

00:56:33,660 --> 00:56:39,109
can never be in control of that whole

00:56:36,210 --> 00:56:42,320
cycle even if your country name is Iran

00:56:39,109 --> 00:56:48,330
you cannot be in full control of that

00:56:42,320 --> 00:56:50,910
well what you actually can do is if you

00:56:48,330 --> 00:56:55,920
communicate through channels which

00:56:50,910 --> 00:56:57,690
require encryption test actually that

00:56:55,920 --> 00:57:01,020
you are actually using this encryption

00:56:57,690 --> 00:57:03,270
and not only by looking at PHP self to

00:57:01,020 --> 00:57:08,400
see if ur there's this little s behind

00:57:03,270 --> 00:57:11,790
HTTP actually test if Apache has a PS

00:57:08,400 --> 00:57:13,950
has an SSL service a session running at

00:57:11,790 --> 00:57:17,250
that time I've seen many applications

00:57:13,950 --> 00:57:18,450
which actually do test if they run HTTPS

00:57:17,250 --> 00:57:23,060
by simply looking

00:57:18,450 --> 00:57:28,320
the URL if it starts with an HTTPS yeah

00:57:23,060 --> 00:57:34,589
it's cute but doesn't mean anything but

00:57:28,320 --> 00:57:38,810
still it's hard if however SSL message

00:57:34,589 --> 00:57:42,180
message measures are taken also check

00:57:38,810 --> 00:57:45,540
actually if they are up to a certain

00:57:42,180 --> 00:57:49,740
level of standard and you can use like n

00:57:45,540 --> 00:57:53,810
is T or in Europe we have Aneesa which

00:57:49,740 --> 00:57:57,810
is a agency of the European Union which

00:57:53,810 --> 00:58:00,420
provides a lot of good information best

00:57:57,810 --> 00:58:02,490
practices on what is actually strong

00:58:00,420 --> 00:58:04,530
enough encryption for certain types of

00:58:02,490 --> 00:58:08,790
information and also offer information

00:58:04,530 --> 00:58:09,990
on how to validate that and also check

00:58:08,790 --> 00:58:12,300
if your certificates are up-to-date

00:58:09,990 --> 00:58:17,369
that's also something that goes wrong a

00:58:12,300 --> 00:58:22,560
lot next one unvalidated redirects and

00:58:17,369 --> 00:58:26,970
forwards web applications point users to

00:58:22,560 --> 00:58:30,349
other places than the own application

00:58:26,970 --> 00:58:34,260
and this is again something that you can

00:58:30,349 --> 00:58:42,349
share under the under the topic of

00:58:34,260 --> 00:58:44,880
injection or cross-site trouble actually

00:58:42,349 --> 00:58:47,010
what you can do against it is simply

00:58:44,880 --> 00:58:50,190
implement the countermeasures I've

00:58:47,010 --> 00:58:51,990
discussed before in url access

00:58:50,190 --> 00:58:58,109
restriction and authentication and

00:58:51,990 --> 00:59:00,450
everything just be sure of what you send

00:58:58,109 --> 00:59:02,880
your user to and this also goes again

00:59:00,450 --> 00:59:06,119
back to the redirection issue because if

00:59:02,880 --> 00:59:11,940
you have users who have like profile

00:59:06,119 --> 00:59:16,079
pages on social media I would really

00:59:11,940 --> 00:59:18,329
suggest that if you allow a user to have

00:59:16,079 --> 00:59:22,079
a personal profile page with a linkedin

00:59:18,329 --> 00:59:25,050
profile well let them only enter his

00:59:22,079 --> 00:59:28,710
linkedin username for instance for

00:59:25,050 --> 00:59:31,390
accessing the his or her page or simply

00:59:28,710 --> 00:59:35,049
the final piece of the URL construct

00:59:31,390 --> 00:59:37,359
ww linkedin com / do that yourself

00:59:35,049 --> 00:59:40,960
because then you're pretty much okay

00:59:37,359 --> 00:59:44,589
where a user is going because what is

00:59:40,960 --> 00:59:47,289
pretty easily done again is that a user

00:59:44,589 --> 00:59:50,349
provides a URL which looks valid at

00:59:47,289 --> 00:59:58,420
first point but then is redirected to

00:59:50,349 --> 01:00:01,089
all kinds of other crap so test yes at

00:59:58,420 --> 01:00:03,190
all and actually we're just about half

01:00:01,089 --> 01:00:07,900
way I think from also going to have a

01:00:03,190 --> 01:00:11,230
look at the time all right also timewise

01:00:07,900 --> 01:00:14,890
we're halfway so bear with me is it all

01:00:11,230 --> 01:00:17,079
know there's a lot more to talk about in

01:00:14,890 --> 01:00:19,480
security but I think it's a good start

01:00:17,079 --> 01:00:22,329
that you should at least be aware of

01:00:19,480 --> 01:00:25,269
these vectors and know how to at least

01:00:22,329 --> 01:00:29,079
identify possible scenarios in which

01:00:25,269 --> 01:00:30,910
they encounter but like I said is it not

01:00:29,079 --> 01:00:32,799
written that being secure is looking a

01:00:30,910 --> 01:00:36,039
little less insecure than your direct

01:00:32,799 --> 01:00:39,160
neighbors well it is written because it

01:00:36,039 --> 01:00:43,059
stands there but actually the same is

01:00:39,160 --> 01:00:44,920
for airport security if you work in

01:00:43,059 --> 01:00:48,160
physical security like airport security

01:00:44,920 --> 01:00:50,559
it's impossible to secure everything if

01:00:48,160 --> 01:00:51,970
you have ever tried to take in a flight

01:00:50,559 --> 01:00:54,490
in the States you will know what I mean

01:00:51,970 --> 01:00:56,769
you have to go to full body scanners you

01:00:54,490 --> 01:01:00,789
have to go through just basically about

01:00:56,769 --> 01:01:05,319
anything which has an x-ray or something

01:01:00,789 --> 01:01:08,049
and still it is possible to bring

01:01:05,319 --> 01:01:11,259
something in which might be used as

01:01:08,049 --> 01:01:13,839
harmful if it were not the black belt of

01:01:11,259 --> 01:01:17,289
karate of somebody you know it's pretty

01:01:13,839 --> 01:01:21,460
hard to take that out but actually the

01:01:17,289 --> 01:01:25,509
point of security testing and security

01:01:21,460 --> 01:01:28,990
measure implementation is mostly simply

01:01:25,509 --> 01:01:31,809
making it very unlikable for a possible

01:01:28,990 --> 01:01:34,089
attacker to attack your surface make

01:01:31,809 --> 01:01:36,009
sure this attacker is completely

01:01:34,089 --> 01:01:38,289
frustrated after like a couple of hours

01:01:36,009 --> 01:01:40,559
and says okay i have now

01:01:38,289 --> 01:01:45,359
encountered like measure number 26 i'm

01:01:40,559 --> 01:01:49,869
done and also a lot of hacks

01:01:45,359 --> 01:01:51,489
are being done in a some kind of

01:01:49,869 --> 01:01:54,940
freelance way actually you can actually

01:01:51,489 --> 01:01:57,819
hire Russian or Eastern Europe or

01:01:54,940 --> 01:02:01,299
Chinese hackers for a pretty decent hour

01:01:57,819 --> 01:02:05,140
rate actually to simply bombard an

01:02:01,299 --> 01:02:07,660
application with with crap but these all

01:02:05,140 --> 01:02:09,849
these guys work with simple or fixed

01:02:07,660 --> 01:02:12,130
price or our rates so basically if

01:02:09,849 --> 01:02:15,160
they've spent their time and the client

01:02:12,130 --> 01:02:18,130
doesn't pay any more d attack stops so

01:02:15,160 --> 01:02:21,009
make sure you stand up long enough to

01:02:18,130 --> 01:02:23,799
survive something like that d das

01:02:21,009 --> 01:02:25,509
attacking well that's basically a

01:02:23,799 --> 01:02:27,220
different kind of show because that is

01:02:25,509 --> 01:02:32,039
simply something you have to sit out and

01:02:27,220 --> 01:02:38,529
just put down your web server and wait

01:02:32,039 --> 01:02:41,470
not a lot you can do against that but if

01:02:38,529 --> 01:02:44,289
you don't use custom applications or if

01:02:41,470 --> 01:02:45,839
you do use off-the-shelf applications

01:02:44,289 --> 01:02:48,069
and you do not want to change them

01:02:45,839 --> 01:02:49,269
there's also a lot you can do and

01:02:48,069 --> 01:02:53,920
actually I think there's a lot you

01:02:49,269 --> 01:02:55,690
should do anyway because your web

01:02:53,920 --> 01:02:57,430
application is only one part in your

01:02:55,690 --> 01:02:58,960
infrastructure and infrastructure is

01:02:57,430 --> 01:03:01,359
always a layered cake of multi

01:02:58,960 --> 01:03:03,029
components and not well off repeated

01:03:01,359 --> 01:03:07,299
this meant for a couple of times now

01:03:03,029 --> 01:03:09,279
heartening I'm going to talk now a bit

01:03:07,299 --> 01:03:12,059
about Drupal hardening and why Drupal

01:03:09,279 --> 01:03:15,460
well because it's one of the most used

01:03:12,059 --> 01:03:16,420
CMS platforms and I feel like I have to

01:03:15,460 --> 01:03:18,369
explain it's a little bit more because

01:03:16,420 --> 01:03:22,809
if you look at the general uses web

01:03:18,369 --> 01:03:27,880
stats of CMS's you will see it's like

01:03:22,809 --> 01:03:31,809
WordPress eighty percent joomla some

01:03:27,880 --> 01:03:35,049
percent Drupal some percent okay but

01:03:31,809 --> 01:03:37,529
this is a bit of a false picture because

01:03:35,049 --> 01:03:39,880
actually if you look at like the top

01:03:37,529 --> 01:03:42,069
thousand biggest websites in the world

01:03:39,880 --> 01:03:43,900
enterprise websites government websites

01:03:42,069 --> 01:03:46,960
you will actually see that Drupal does

01:03:43,900 --> 01:03:48,549
at least half or more of those so

01:03:46,960 --> 01:03:53,230
actually Drupal is one of the systems

01:03:48,549 --> 01:03:55,119
who is mostly under attack and also

01:03:53,230 --> 01:03:56,880
Drupal is usually used for complex web

01:03:55,119 --> 01:03:58,690
sites i mean you can build anything

01:03:56,880 --> 01:04:01,720
complex also in where

01:03:58,690 --> 01:04:04,150
press but you can basically also drive

01:04:01,720 --> 01:04:07,410
the 24 hours of lamont on a skelter

01:04:04,150 --> 01:04:12,520
which is also another good idea so

01:04:07,410 --> 01:04:16,210
Drupal actually it provides quite dirt

01:04:12,520 --> 01:04:18,460
out of the box security level any actual

01:04:16,210 --> 01:04:20,710
framework because there's a forum API

01:04:18,460 --> 01:04:24,579
which does a lot of the input validation

01:04:20,710 --> 01:04:27,910
which does a lot of the basic tear out

01:04:24,579 --> 01:04:30,280
 stuff there's different levels or

01:04:27,910 --> 01:04:34,329
profiles of input flexibility you can

01:04:30,280 --> 01:04:37,300
whitelist what tax users can use in like

01:04:34,329 --> 01:04:39,400
WYSIWYG editors stuff like that it does

01:04:37,300 --> 01:04:41,260
input validation and output filtering

01:04:39,400 --> 01:04:42,640
very nice it has an active QA and

01:04:41,260 --> 01:04:44,349
security team but all right I'm not

01:04:42,640 --> 01:04:48,430
going to do a drupal advertisement talk

01:04:44,349 --> 01:04:52,000
here I'm just going to go into a little

01:04:48,430 --> 01:04:54,849
bit of how to actually harden the

01:04:52,000 --> 01:04:58,990
different pieces at the different layers

01:04:54,849 --> 01:05:00,910
of an infrastructure so we have just

01:04:58,990 --> 01:05:03,339
successfully concluded like the

01:05:00,910 --> 01:05:07,480
theoretical part now we're going to go

01:05:03,339 --> 01:05:13,200
look at the practical part server and os

01:05:07,480 --> 01:05:17,890
hardening first only install or enable

01:05:13,200 --> 01:05:20,230
something that you actually use actually

01:05:17,890 --> 01:05:24,040
ftp is just about the worst service you

01:05:20,230 --> 01:05:26,380
can have access enabled on a server

01:05:24,040 --> 01:05:30,880
which has any kind of security because

01:05:26,380 --> 01:05:35,319
ftp by default well it was simply made

01:05:30,880 --> 01:05:39,700
to do very little checking and

01:05:35,319 --> 01:05:42,599
validation so disable it if you need it

01:05:39,700 --> 01:05:45,040
you can always log in through ssh and

01:05:42,599 --> 01:05:46,599
enable it for the period of time that

01:05:45,040 --> 01:05:49,089
you actually use it then disable it

01:05:46,599 --> 01:05:50,980
again or simply upload your files to an

01:05:49,089 --> 01:05:56,290
SSH tunnel which is actually pretty much

01:05:50,980 --> 01:05:59,770
secure use a firewall I don't think that

01:05:56,290 --> 01:06:01,150
I need any explanation of that but

01:05:59,770 --> 01:06:04,690
actually what you can do with the

01:06:01,150 --> 01:06:06,869
firewall also is enable administration

01:06:04,690 --> 01:06:10,990
functionality to a limited range of

01:06:06,869 --> 01:06:16,580
hosts of our guests

01:06:10,990 --> 01:06:19,910
mostly you will be updating your site

01:06:16,580 --> 01:06:24,590
from or at least your system from a very

01:06:19,910 --> 01:06:27,080
limited set of locations so why on earth

01:06:24,590 --> 01:06:30,320
should your administration functionality

01:06:27,080 --> 01:06:33,109
like also SSH or your admin pages for

01:06:30,320 --> 01:06:35,180
that matter the world accessible well I

01:06:33,109 --> 01:06:37,070
really want to know and of course IP

01:06:35,180 --> 01:06:39,710
spoofing can be done pretty easily

01:06:37,070 --> 01:06:41,869
actually but it's again another measure

01:06:39,710 --> 01:06:47,090
and another measure which you can pretty

01:06:41,869 --> 01:06:49,910
easily take refuse pings by default for

01:06:47,090 --> 01:06:53,390
instance I do that instantly because

01:06:49,910 --> 01:06:58,160
ping can actually also be used to create

01:06:53,390 --> 01:06:59,930
details nasty stuff if your website is

01:06:58,160 --> 01:07:03,350
reachable then chances are pretty big

01:06:59,930 --> 01:07:07,520
you don't knee pain also use hardening

01:07:03,350 --> 01:07:12,320
of your administration features like SSH

01:07:07,520 --> 01:07:16,280
you can use something like fail2ban to

01:07:12,320 --> 01:07:18,500
if a user account is misused or if

01:07:16,280 --> 01:07:20,780
somebody tries to brute-force dictionary

01:07:18,500 --> 01:07:23,780
attack a certain login it simply

01:07:20,780 --> 01:07:25,730
enforces a band for that IP address for

01:07:23,780 --> 01:07:27,680
a certain amount of time and it will

01:07:25,730 --> 01:07:32,690
simply reduce the likelihood of actually

01:07:27,680 --> 01:07:37,220
having a result also it uses non

01:07:32,690 --> 01:07:41,840
standard port for ssh use like 50,000 I

01:07:37,220 --> 01:07:45,859
don't know it's pretty annoying for a

01:07:41,840 --> 01:07:49,820
hacker to look at for use monitoring and

01:07:45,859 --> 01:07:51,800
validation tools like intrusion

01:07:49,820 --> 01:07:57,109
detection systems if you are really

01:07:51,800 --> 01:08:00,410
really working with sensitive data but

01:07:57,109 --> 01:08:03,080
also actually use monitoring tools to

01:08:00,410 --> 01:08:05,330
look at the logs that your CMS is just

01:08:03,080 --> 01:08:07,880
generating actually boosts most CMS's

01:08:05,330 --> 01:08:09,560
and also Apache generate pretty decent

01:08:07,880 --> 01:08:11,600
log files which can be interpreted with

01:08:09,560 --> 01:08:13,460
automatic tools and which can simply

01:08:11,600 --> 01:08:16,400
filter out anything that says warning or

01:08:13,460 --> 01:08:20,060
like disaster something like that you

01:08:16,400 --> 01:08:21,680
should check for that or if you want to

01:08:20,060 --> 01:08:24,060
be lazy you can use irregularity

01:08:21,680 --> 01:08:27,630
scanning tools which can actually

01:08:24,060 --> 01:08:29,160
or SMS you if some anomaly occurs I mean

01:08:27,630 --> 01:08:31,560
you can be as lazy as you want to be

01:08:29,160 --> 01:08:34,980
these tools can run anyway and you still

01:08:31,560 --> 01:08:39,680
be informed earlier you'll still be

01:08:34,980 --> 01:08:42,480
informed about any kind of miss usage

01:08:39,680 --> 01:08:46,290
what you actually do need to check if

01:08:42,480 --> 01:08:49,170
you use those tools if actually they

01:08:46,290 --> 01:08:51,569
work periodically because it would not

01:08:49,170 --> 01:08:53,760
be the first time that system is

01:08:51,569 --> 01:08:56,220
installed at a client and some says

01:08:53,760 --> 01:08:58,020
admin changes the web server or the mail

01:08:56,220 --> 01:09:00,210
server for that instance and suddenly

01:08:58,020 --> 01:09:02,550
the locking mechanism does not email

01:09:00,210 --> 01:09:04,440
anymore and you feel completely warm

01:09:02,550 --> 01:09:05,819
comfortable and fuzzy in the knowledge

01:09:04,440 --> 01:09:07,530
that your application is not under

01:09:05,819 --> 01:09:09,690
attack while in the meanwhile you're

01:09:07,530 --> 01:09:11,370
monitoring mechanism is trying to send

01:09:09,690 --> 01:09:15,750
mail like crazy because it's actually

01:09:11,370 --> 01:09:22,680
just has been hacked make sure your

01:09:15,750 --> 01:09:24,480
software is up to date but the UM again

01:09:22,680 --> 01:09:27,030
you specifics you users for the

01:09:24,480 --> 01:09:28,560
different services so that actual

01:09:27,030 --> 01:09:30,600
authorization in the system can be

01:09:28,560 --> 01:09:35,460
restricted to anything this user

01:09:30,600 --> 01:09:38,730
actually needs to do use sandboxing like

01:09:35,460 --> 01:09:40,560
a parmer it's pretty easy for most

01:09:38,730 --> 01:09:42,780
standard services like Apache it's

01:09:40,560 --> 01:09:46,290
actually it has default profiles in

01:09:42,780 --> 01:09:50,460
opensuse anyway it works pretty well and

01:09:46,290 --> 01:09:52,830
it simply is another barrier if your web

01:09:50,460 --> 01:09:55,860
application is compromised in any way or

01:09:52,830 --> 01:09:57,660
if anybody can upload anything not

01:09:55,860 --> 01:10:00,170
really nice to your web server that at

01:09:57,660 --> 01:10:04,590
least you can restrict the damage and

01:10:00,170 --> 01:10:07,230
that's also important salvaging what you

01:10:04,590 --> 01:10:11,610
can use on the web server side first of

01:10:07,230 --> 01:10:14,480
all disabled unused HTTP methods here we

01:10:11,610 --> 01:10:18,630
go again security milks configuration

01:10:14,480 --> 01:10:23,490
you should try just out of curiosity to

01:10:18,630 --> 01:10:27,510
configure like put the put HB method and

01:10:23,490 --> 01:10:29,190
try to put data into a PHP file on the

01:10:27,510 --> 01:10:32,850
server by default the file gets

01:10:29,190 --> 01:10:35,370
overwritten wait you do that with a

01:10:32,850 --> 01:10:36,750
standard HTTP command okay you can of

01:10:35,370 --> 01:10:37,890
course limit that so that the apache

01:10:36,750 --> 01:10:40,350
user doesn't actually

01:10:37,890 --> 01:10:43,650
had to change the files of course but

01:10:40,350 --> 01:10:48,720
still disabled or not install anything

01:10:43,650 --> 01:10:51,390
that you are not actually using don't

01:10:48,720 --> 01:10:53,670
include software names and absolutely do

01:10:51,390 --> 01:10:56,760
not include version number in HTTP

01:10:53,670 --> 01:10:59,190
headers why on earth would you actually

01:10:56,760 --> 01:11:02,610
send that information it's a misuse of

01:10:59,190 --> 01:11:04,410
bandwidth your client is probably really

01:11:02,610 --> 01:11:07,860
not interested in the fact that you're

01:11:04,410 --> 01:11:13,320
running apache 2.2 with PHP 5.4 dot I

01:11:07,860 --> 01:11:17,250
don't know again turn it off do not

01:11:13,320 --> 01:11:22,080
enable directory listings really don't

01:11:17,250 --> 01:11:25,590
do it only return error code or generic

01:11:22,080 --> 01:11:30,870
error pages because you can do this on a

01:11:25,590 --> 01:11:34,260
web server level as well if you have a

01:11:30,870 --> 01:11:36,690
system like drupal generate a 404 or 403

01:11:34,260 --> 01:11:39,120
page this actually is a normal page of

01:11:36,690 --> 01:11:42,300
the CMS which requires the bootstrapping

01:11:39,120 --> 01:11:44,490
of the whole CMS tech contacting the

01:11:42,300 --> 01:11:48,330
database getting information rendering a

01:11:44,490 --> 01:11:51,240
template that's a waste of time install

01:11:48,330 --> 01:11:55,050
something like fast 404 for Drupal which

01:11:51,240 --> 01:11:57,300
effectively simply detects very early in

01:11:55,050 --> 01:12:00,210
bootstrapping if some actually action is

01:11:57,300 --> 01:12:02,400
actually allowed or not and returns a

01:12:00,210 --> 01:12:08,940
cached page it does not have to go

01:12:02,400 --> 01:12:13,950
through all the other steps actually d

01:12:08,940 --> 01:12:18,650
dos attacks usually use random arrangers

01:12:13,950 --> 01:12:22,050
of page ids to simply bombard aside and

01:12:18,650 --> 01:12:27,330
evade the blocking of certain pages when

01:12:22,050 --> 01:12:32,010
over being overused something like fast

01:12:27,330 --> 01:12:34,740
404 or 403 actually prevents a little

01:12:32,010 --> 01:12:40,350
bit or mitigates the impact that a dos

01:12:34,740 --> 01:12:44,810
attack could have on that disabled flow

01:12:40,350 --> 01:12:47,820
symlinks also disabled webroot there's

01:12:44,810 --> 01:12:50,490
directories for users I don't know does

01:12:47,820 --> 01:12:53,380
anybody even use them

01:12:50,490 --> 01:12:55,540
does anybody of you is aware actually

01:12:53,380 --> 01:12:58,090
that the default user template of also

01:12:55,540 --> 01:13:01,090
opensuse includes a public HTML there

01:12:58,090 --> 01:13:02,230
for users and user on the system can

01:13:01,090 --> 01:13:04,030
have their data this used to be

01:13:02,230 --> 01:13:06,100
fantastic in academic environments where

01:13:04,030 --> 01:13:09,210
everybody could simply put their thesis

01:13:06,100 --> 01:13:11,680
and all kinds of other brilliant

01:13:09,210 --> 01:13:13,870
information in that folder and it would

01:13:11,680 --> 01:13:15,310
become real readable in current days

01:13:13,870 --> 01:13:21,610
it's simply another place that you can

01:13:15,310 --> 01:13:24,070
store also and here is the

01:13:21,610 --> 01:13:27,970
white listing mantra again ensure that

01:13:24,070 --> 01:13:32,200
only the files or at least file

01:13:27,970 --> 01:13:34,660
extensions are shown directly like PDF

01:13:32,200 --> 01:13:36,640
or doc and stuff like that that those

01:13:34,660 --> 01:13:40,200
are typically files you want to or I'm

01:13:36,640 --> 01:13:43,450
sorry did I say doc I meant ODT sorry

01:13:40,200 --> 01:13:46,270
those are the kind of files that you

01:13:43,450 --> 01:13:49,690
would generally want the user to access

01:13:46,270 --> 01:13:52,300
directly and make sure everything else

01:13:49,690 --> 01:13:54,040
gets redirected to the PHP interpreter

01:13:52,300 --> 01:13:57,820
so that your application can actually do

01:13:54,040 --> 01:14:00,880
some validation on it and this also

01:13:57,820 --> 01:14:02,410
prevents also a very nice feature of any

01:14:00,880 --> 01:14:04,420
files as the fact that there are text

01:14:02,410 --> 01:14:06,850
files and if your server configuration

01:14:04,420 --> 01:14:08,860
is wrong and your user or your attacker

01:14:06,850 --> 01:14:13,180
knows where to look for an any file like

01:14:08,860 --> 01:14:15,580
in sites default config any try to

01:14:13,180 --> 01:14:18,220
access that file it will nicely output

01:14:15,580 --> 01:14:20,020
the database login information the

01:14:18,220 --> 01:14:22,300
database server stuffing like that I

01:14:20,020 --> 01:14:24,300
love that when I try to penetrate an

01:14:22,300 --> 01:14:26,980
application or something like that I

01:14:24,300 --> 01:14:34,420
check first if configuration files are

01:14:26,980 --> 01:14:37,600
writable that makes my job so easy also

01:14:34,420 --> 01:14:41,110
if you run virtual directories which

01:14:37,600 --> 01:14:43,870
basically everybody does do not forget

01:14:41,110 --> 01:14:47,080
to change all this also for the default

01:14:43,870 --> 01:14:50,530
directory or have that not active

01:14:47,080 --> 01:14:54,310
because you would not be I'm usually

01:14:50,530 --> 01:14:56,110
surprised of the amount of web servers

01:14:54,310 --> 01:14:59,230
which actually have a virtual directory

01:14:56,110 --> 01:15:04,440
which also is the default directory and

01:14:59,230 --> 01:15:09,060
well you have to enable

01:15:04,440 --> 01:15:11,830
measures for all of them PHP hardening

01:15:09,060 --> 01:15:15,130
some people think that this is a

01:15:11,830 --> 01:15:18,910
contradiction in terms I actually don't

01:15:15,130 --> 01:15:21,660
PHP is pretty secure actually it's not

01:15:18,910 --> 01:15:26,470
less secure than any other type of

01:15:21,660 --> 01:15:29,500
language or interpreter but you can do

01:15:26,470 --> 01:15:31,480
some stuff in the configuration of PHP

01:15:29,500 --> 01:15:34,540
which effectively open up the whole

01:15:31,480 --> 01:15:37,210
world so you should at least go past a

01:15:34,540 --> 01:15:39,330
couple of configuration options and

01:15:37,210 --> 01:15:43,180
actually these configuration options I

01:15:39,330 --> 01:15:47,020
did not per se think of myself the PHP

01:15:43,180 --> 01:15:49,750
project and for instance a lot of open

01:15:47,020 --> 01:15:52,120
source projects have decent wiki pages

01:15:49,750 --> 01:15:55,120
put up with security best practices

01:15:52,120 --> 01:15:56,830
check them out because actually the

01:15:55,120 --> 01:15:58,870
information there is usually pretty good

01:15:56,830 --> 01:16:02,140
I mean Drupal has like a 16-page

01:15:58,870 --> 01:16:04,810
security manual of becks best practices

01:16:02,140 --> 01:16:10,420
which is apart from unreadable also very

01:16:04,810 --> 01:16:12,850
informative but PHP hardening maximum

01:16:10,420 --> 01:16:15,220
execution time you're on a web server so

01:16:12,850 --> 01:16:18,580
don't do stuff forever if you have to

01:16:15,220 --> 01:16:20,860
process large amount of data use gearbox

01:16:18,580 --> 01:16:23,260
or something like that upload or sorry

01:16:20,860 --> 01:16:25,420
gear man or some else some other

01:16:23,260 --> 01:16:29,620
queueing mechanism which can do it

01:16:25,420 --> 01:16:32,920
asynchronously max input time also why

01:16:29,620 --> 01:16:35,140
would you want to have your user open up

01:16:32,920 --> 01:16:41,550
a session or open up a request forever

01:16:35,140 --> 01:16:44,830
don't do it basically look for these

01:16:41,550 --> 01:16:47,530
options most of them I've discussed

01:16:44,830 --> 01:16:49,410
before and they'll be in the slides my

01:16:47,530 --> 01:16:53,410
skull hardening yeah it is also possible

01:16:49,410 --> 01:16:56,680
first of all do not use MySQL as root

01:16:53,410 --> 01:16:58,960
and do not use the Mexico root user for

01:16:56,680 --> 01:17:06,490
any application under any circumstance

01:16:58,960 --> 01:17:08,020
ever did I say ever I'm end up also

01:17:06,490 --> 01:17:12,220
assign multiple user profiles to

01:17:08,020 --> 01:17:15,940
applications I mean webs are CMS is like

01:17:12,220 --> 01:17:17,860
Drupal usually run with only one user

01:17:15,940 --> 01:17:20,830
who can also do database

01:17:17,860 --> 01:17:22,960
kemah updates as well as content updates

01:17:20,830 --> 01:17:25,719
why is that even necessary i mean a

01:17:22,960 --> 01:17:31,409
normal operating website does not have

01:17:25,719 --> 01:17:34,389
to have like create alter or drop

01:17:31,409 --> 01:17:37,690
authorization it simply doesn't use it

01:17:34,389 --> 01:17:40,810
so don't have it enabled and run a

01:17:37,690 --> 01:17:43,750
separate database user for tool like do

01:17:40,810 --> 01:17:45,909
rush which is a command-line interface

01:17:43,750 --> 01:17:49,719
to doing a lot of technical stuff with a

01:17:45,909 --> 01:17:51,760
Drupal implementation because simply if

01:17:49,719 --> 01:17:54,639
you don't enable the permission it

01:17:51,760 --> 01:17:59,260
cannot be misused or at least it offers

01:17:54,639 --> 01:18:02,920
another barrier restrict MySQL listening

01:17:59,260 --> 01:18:06,190
to only the web servers IP or the

01:18:02,920 --> 01:18:11,340
localhost why would your database need

01:18:06,190 --> 01:18:15,820
to be world reachable I have no idea oh

01:18:11,340 --> 01:18:19,119
yeah do not I repeat do not use PHP

01:18:15,820 --> 01:18:22,300
myadmin or severely restrict access to

01:18:19,119 --> 01:18:24,460
it not necessarily because PHP myadmin

01:18:22,300 --> 01:18:27,730
is a bad tool it's a fantastic tool and

01:18:24,460 --> 01:18:30,520
it's really functional but you can

01:18:27,730 --> 01:18:32,679
effectively bypass any mechanism your

01:18:30,520 --> 01:18:34,690
web application has in place for

01:18:32,679 --> 01:18:36,550
authorization filtering and anything you

01:18:34,690 --> 01:18:41,409
can simply go into the database directly

01:18:36,550 --> 01:18:43,360
and PHP myadmin out of the box has very

01:18:41,409 --> 01:18:44,679
little protection for like brute force

01:18:43,360 --> 01:18:50,469
dictionary attacks and stuff like that

01:18:44,679 --> 01:18:53,440
so if you do use PHP myadmin simply

01:18:50,469 --> 01:18:56,080
restrict IPS or put much security in

01:18:53,440 --> 01:18:57,699
place to prevent brute force I will go

01:18:56,080 --> 01:18:59,320
in too much security a bit later but

01:18:57,699 --> 01:19:01,900
what you can do with that is for

01:18:59,320 --> 01:19:05,350
instance tell much security to simply

01:19:01,900 --> 01:19:08,380
protect the PHP my admin login page so

01:19:05,350 --> 01:19:11,020
that any false login attempt from a

01:19:08,380 --> 01:19:12,969
certain IP address after three times of

01:19:11,020 --> 01:19:14,290
false logins the user is banned for a

01:19:12,969 --> 01:19:16,389
day or something like that you can do

01:19:14,290 --> 01:19:19,449
that with much security without having

01:19:16,389 --> 01:19:23,739
to depend on PHP myadmin look into that

01:19:19,449 --> 01:19:25,960
it's really good also of course prevent

01:19:23,739 --> 01:19:30,130
direct access to database files and

01:19:25,960 --> 01:19:35,050
stuff like that have backup routines as

01:19:30,130 --> 01:19:39,070
sure we all have backups daily it's

01:19:35,050 --> 01:19:45,780
really quiet and do not rely on my skull

01:19:39,070 --> 01:19:48,310
replication as a backup strategy or yep

01:19:45,780 --> 01:19:50,920
application harding drupal for this

01:19:48,310 --> 01:19:53,590
matter it actually again a lot of the

01:19:50,920 --> 01:19:55,270
mechanisms are quite universal for also

01:19:53,590 --> 01:19:58,330
other applications like wordpress or

01:19:55,270 --> 01:20:00,340
joomla but drupal has a lot of modules

01:19:58,330 --> 01:20:03,070
which actually do a lot of out of the

01:20:00,340 --> 01:20:05,949
box configuration work like secure

01:20:03,070 --> 01:20:07,900
permissions which has a very nice

01:20:05,949 --> 01:20:11,409
lockdown of the basic permissions set

01:20:07,900 --> 01:20:13,750
you have a secure login you have two

01:20:11,409 --> 01:20:15,760
security review module which gives you a

01:20:13,750 --> 01:20:17,230
very nice indication whether your file

01:20:15,760 --> 01:20:19,150
system is being configured correctly

01:20:17,230 --> 01:20:21,929
with permissions and stuff like that if

01:20:19,150 --> 01:20:26,790
your Drupal installation is up to date

01:20:21,929 --> 01:20:29,380
you can use a flood control to prevent

01:20:26,790 --> 01:20:32,110
dictionary checking of the login page

01:20:29,380 --> 01:20:37,630
but it's something like Phil to bend for

01:20:32,110 --> 01:20:42,300
ssh and also here we go again with the

01:20:37,630 --> 01:20:46,090
user ID one user ID one in Drupal is

01:20:42,300 --> 01:20:48,610
absolutely God he can do anything you

01:20:46,090 --> 01:20:51,449
basically do not want to have user ID

01:20:48,610 --> 01:20:56,550
one enabled on an important system

01:20:51,449 --> 01:20:58,659
simply have an account which is also

01:20:56,550 --> 01:21:00,909
given all the permissions an

01:20:58,659 --> 01:21:02,830
administrator one but simply do not have

01:21:00,909 --> 01:21:04,750
it have user ID one I know its security

01:21:02,830 --> 01:21:08,800
through obscurity but at least it raises

01:21:04,750 --> 01:21:10,300
the bar again use a bomber and actually

01:21:08,800 --> 01:21:12,790
the good news is I'm going to check my

01:21:10,300 --> 01:21:17,020
clock again we're actually pretty much

01:21:12,790 --> 01:21:20,620
on schedule here um app armor and if you

01:21:17,020 --> 01:21:22,989
use it for a web server and techniques

01:21:20,620 --> 01:21:27,070
because actually the good part about app

01:21:22,989 --> 01:21:30,310
armor is you can use it on a per virtual

01:21:27,070 --> 01:21:32,650
directory base so actually you can have

01:21:30,310 --> 01:21:36,730
different sides with different security

01:21:32,650 --> 01:21:38,320
profiles running things hua parmer but

01:21:36,730 --> 01:21:43,810
directly configured to the virtual

01:21:38,320 --> 01:21:46,540
directory also it is really nice

01:21:43,810 --> 01:21:48,010
it has this like profile recording

01:21:46,540 --> 01:21:49,810
feature so anytime you have a new

01:21:48,010 --> 01:21:51,910
application you want to add to your

01:21:49,810 --> 01:21:54,310
virtual server you can simply record all

01:21:51,910 --> 01:21:55,720
the permissions that the profile need

01:21:54,310 --> 01:21:59,380
like access to the temp directory or

01:21:55,720 --> 01:22:01,870
access to some other thing and you don't

01:21:59,380 --> 01:22:05,830
really have to do much manual

01:22:01,870 --> 01:22:13,750
configuration on it at least not as much

01:22:05,830 --> 01:22:16,170
as as I Linux requires but and the best

01:22:13,750 --> 01:22:19,450
part actually is it's integrated with

01:22:16,170 --> 01:22:24,340
opensuse and just so you have very nice

01:22:19,450 --> 01:22:26,710
control sets use much security much

01:22:24,340 --> 01:22:29,400
security actually is a project of this

01:22:26,710 --> 01:22:33,340
owasp thing I was referring to earlier

01:22:29,400 --> 01:22:36,060
and basically modsecurity is a web

01:22:33,340 --> 01:22:38,850
application firewall for just about any

01:22:36,060 --> 01:22:41,530
web server available currently like I

01:22:38,850 --> 01:22:46,510
Internet Information Services has a mod

01:22:41,530 --> 01:22:50,170
security plug in Apache husband etc it's

01:22:46,510 --> 01:22:53,530
the best part is it's a rule-based fire

01:22:50,170 --> 01:22:57,730
balling mechanism which you can really

01:22:53,530 --> 01:23:00,750
tailor and configure to mitigate all

01:22:57,730 --> 01:23:05,700
kinds of attacks on your application

01:23:00,750 --> 01:23:08,650
basic protection includes htp protection

01:23:05,700 --> 01:23:10,990
blacklist lookups like if an RP is

01:23:08,650 --> 01:23:14,950
actually on some kind of spamming

01:23:10,990 --> 01:23:17,130
blacklist or DDoS blacklist malware

01:23:14,950 --> 01:23:20,500
detection up into a certain level it can

01:23:17,130 --> 01:23:24,120
check against a google safebrowsing api

01:23:20,500 --> 01:23:27,700
for instance if a URL that's in a

01:23:24,120 --> 01:23:35,320
request or in a get or post variable

01:23:27,700 --> 01:23:37,750
could be problematic it offers a common

01:23:35,320 --> 01:23:41,710
web attacks protection which means it

01:23:37,750 --> 01:23:45,160
looks for like SQL commands in get and

01:23:41,710 --> 01:23:47,530
post requests which is I think pretty

01:23:45,160 --> 01:23:51,430
useful because normally you would not

01:23:47,530 --> 01:23:55,090
allow a user to use like SQL language in

01:23:51,430 --> 01:23:57,670
any kind of statement anyway except of

01:23:55,090 --> 01:24:04,989
course for PHP my admin

01:23:57,670 --> 01:24:07,120
perhaps it can detect most bots and

01:24:04,989 --> 01:24:10,800
crawlers and and and stuff like that by

01:24:07,120 --> 01:24:14,710
simply looking at the client identifier

01:24:10,800 --> 01:24:17,050
you can integrate it with antivirus

01:24:14,710 --> 01:24:20,380
scanning which is nice so you can like

01:24:17,050 --> 01:24:25,150
automatically scan uploaded files or at

01:24:20,380 --> 01:24:27,460
least have protection against that a lot

01:24:25,150 --> 01:24:33,520
more really look into it it's a

01:24:27,460 --> 01:24:37,179
fantastic module but to be honest it

01:24:33,520 --> 01:24:39,670
does require a lot of work to get

01:24:37,179 --> 01:24:42,010
running reliably if you have a Drupal

01:24:39,670 --> 01:24:46,060
instance for instance with a WYSIWYG

01:24:42,010 --> 01:24:48,610
editor what you should basically due to

01:24:46,060 --> 01:24:50,800
implement much security is enable all

01:24:48,610 --> 01:24:53,380
rules and put it in detection only

01:24:50,800 --> 01:24:55,780
motors just a bit like recording a

01:24:53,380 --> 01:24:58,000
profile with a barmer actually then you

01:24:55,780 --> 01:25:00,250
should run a complete set of functional

01:24:58,000 --> 01:25:02,110
tests and actions on your web

01:25:00,250 --> 01:25:04,150
applications you should enter content

01:25:02,110 --> 01:25:07,210
you should upload files you should use

01:25:04,150 --> 01:25:11,440
the search function you should add users

01:25:07,210 --> 01:25:14,080
change permissions what not then you

01:25:11,440 --> 01:25:20,050
should lo look at the log file of mudd

01:25:14,080 --> 01:25:22,030
security which rules are triggered

01:25:20,050 --> 01:25:25,080
because most likely these are false

01:25:22,030 --> 01:25:27,460
positives then you disable these rules

01:25:25,080 --> 01:25:29,140
pretty simple through configuration and

01:25:27,460 --> 01:25:32,730
then you put Mott security out of

01:25:29,140 --> 01:25:37,060
detection only motors into real scanning

01:25:32,730 --> 01:25:39,699
you can also on a per IP basis for

01:25:37,060 --> 01:25:42,820
instance or IP range basis disable not

01:25:39,699 --> 01:25:46,380
security for certain IP ranges this

01:25:42,820 --> 01:25:50,410
could be useful if you have like a very

01:25:46,380 --> 01:25:52,239
sending only type of website so you can

01:25:50,410 --> 01:25:55,110
simply have a very strong security

01:25:52,239 --> 01:26:00,250
profile for anything except your

01:25:55,110 --> 01:26:04,390
administration users but actually much

01:26:00,250 --> 01:26:06,550
security is a I I encounter it more

01:26:04,390 --> 01:26:09,889
often each year actually it's becoming

01:26:06,550 --> 01:26:16,880
pretty much the de facto

01:26:09,889 --> 01:26:23,899
standard well I'm actually quite done

01:26:16,880 --> 01:26:25,249
for now so are there any questions I see

01:26:23,899 --> 01:26:33,559
some hands all right I'm going to let

01:26:25,249 --> 01:26:38,719
you I have a question to all ten

01:26:33,559 --> 01:26:42,860
tification / / RP what what what you do

01:26:38,719 --> 01:26:46,579
if you give employee or anybody else and

01:26:42,860 --> 01:26:52,840
I use our count and he used that for

01:26:46,579 --> 01:26:56,449
attack first of all I'd sue his ass and

01:26:52,840 --> 01:26:59,959
second of all yeah there is always the

01:26:56,449 --> 01:27:02,059
human factor what you actually should

01:26:59,959 --> 01:27:04,610
have also in place next to technical

01:27:02,059 --> 01:27:10,659
measures is procedural matin measures

01:27:04,610 --> 01:27:13,780
like having passwords updated regularly

01:27:10,659 --> 01:27:16,219
having a good identity management

01:27:13,780 --> 01:27:21,559
lifecycle management solution in place

01:27:16,219 --> 01:27:23,030
to disable accounts for users which do

01:27:21,559 --> 01:27:26,899
not work for your organization anymore

01:27:23,030 --> 01:27:29,590
but yeah you're basically asking the

01:27:26,899 --> 01:27:33,439
ultimate nightmare question of every

01:27:29,590 --> 01:27:35,769
corporation what if an insider decides

01:27:33,439 --> 01:27:40,579
to screw up my business well basically

01:27:35,769 --> 01:27:42,469
you're screwed but then back to the

01:27:40,579 --> 01:27:44,389
backup part which of course everybody

01:27:42,469 --> 01:27:48,949
does you can always restore something

01:27:44,389 --> 01:27:51,499
and get back to a previous situation I

01:27:48,949 --> 01:27:54,829
know it's very unsatisfactory answerable

01:27:51,499 --> 01:28:00,949
I'm afraid it's the only one anybody

01:27:54,829 --> 01:28:06,139
else you in the pink shirt and I see

01:28:00,949 --> 01:28:08,239
some hands on there too wait white light

01:28:06,139 --> 01:28:13,099
which one do you consider the most

01:28:08,239 --> 01:28:15,409
secure CMS you mentioned I know

01:28:13,099 --> 01:28:17,329
personally both in terms of default

01:28:15,409 --> 01:28:21,709
settings and how easy can get it to be

01:28:17,329 --> 01:28:23,139
more secure let's narrow down that

01:28:21,709 --> 01:28:25,689
question a little bit

01:28:23,139 --> 01:28:28,119
well WordPress Joomla like PHP based

01:28:25,689 --> 01:28:29,889
CMS's you can start install on a shared

01:28:28,119 --> 01:28:31,989
hosting environment yeah personally I'd

01:28:29,889 --> 01:28:35,139
go for Drupal anyway because it simply

01:28:31,989 --> 01:28:39,070
is out of the box it's pretty secure it

01:28:35,139 --> 01:28:42,459
has very good community audit process of

01:28:39,070 --> 01:28:44,309
module testing Drupal has a lot of

01:28:42,459 --> 01:28:48,880
contributed modules which are actually

01:28:44,309 --> 01:28:51,459
looked at by a team of not only code

01:28:48,880 --> 01:28:53,499
quality but also security reviewers so

01:28:51,459 --> 01:29:00,760
basically the whole package is is pretty

01:28:53,499 --> 01:29:02,800
good but to be honest it depends on your

01:29:00,760 --> 01:29:05,139
situation and it also depends on the

01:29:02,800 --> 01:29:07,659
level of interaction you want a user to

01:29:05,139 --> 01:29:11,619
have with the side because if you have a

01:29:07,659 --> 01:29:14,340
very basic like information only type of

01:29:11,619 --> 01:29:17,349
website like a news blog or something

01:29:14,340 --> 01:29:21,729
yeah them then WordPress is also pretty

01:29:17,349 --> 01:29:24,449
alright but personally my company has

01:29:21,729 --> 01:29:27,550
most expertise with Drupal and I

01:29:24,449 --> 01:29:31,059
personally like the fact that not only

01:29:27,550 --> 01:29:34,030
code quality is checked security quality

01:29:31,059 --> 01:29:36,489
is also high and they have an active and

01:29:34,030 --> 01:29:39,659
responsive security team which actually

01:29:36,489 --> 01:29:42,849
has a role in the release management so

01:29:39,659 --> 01:29:46,059
I'd go for Drupal but I am NOT the most

01:29:42,849 --> 01:29:48,849
neutral person to ask so thank you all

01:29:46,059 --> 01:29:53,070
right also you mentioned to open basedir

01:29:48,849 --> 01:29:57,309
in the apartment and are there any

01:29:53,070 --> 01:30:00,070
performance issues concerns we should

01:29:57,309 --> 01:30:03,699
have other HD accesses as a performance

01:30:00,070 --> 01:30:06,070
penalty yeah does it that's up apparmor

01:30:03,699 --> 01:30:08,139
no pervaiz dear have any similar

01:30:06,070 --> 01:30:09,459
concerns actually open basedir does not

01:30:08,139 --> 01:30:13,929
have a performance penalty at all

01:30:09,459 --> 01:30:20,999
because it's simply a yeah a constant in

01:30:13,929 --> 01:30:24,909
the PHP interpreter and no it's really

01:30:20,999 --> 01:30:27,749
nothing app armor yeah it adds a little

01:30:24,909 --> 01:30:30,550
bit of overhead but really minimal

01:30:27,749 --> 01:30:33,219
because actually it is simply a

01:30:30,550 --> 01:30:34,900
pass-through mechanism filtering type of

01:30:33,219 --> 01:30:36,610
thing

01:30:34,900 --> 01:30:40,090
and because it works with white

01:30:36,610 --> 01:30:42,520
listening it's pretty narrow in what it

01:30:40,090 --> 01:30:46,120
has to check so it's pretty lean much

01:30:42,520 --> 01:30:49,449
security also is pretty lean yeah it

01:30:46,120 --> 01:30:53,140
does add a bit of overhead but these are

01:30:49,449 --> 01:30:56,980
like in the 0 to 1 percent performance

01:30:53,140 --> 01:31:01,060
penalty ranges and actually mot security

01:30:56,980 --> 01:31:04,650
it's invaluable when it comes to like

01:31:01,060 --> 01:31:07,570
brute force attacks and stuff like that

01:31:04,650 --> 01:31:11,050
you'd be amazed how many websites are

01:31:07,570 --> 01:31:14,159
being scanned for potential flaws on a

01:31:11,050 --> 01:31:18,760
daily basis if you are on a regular

01:31:14,159 --> 01:31:22,690
dot-com domain or a NL or something like

01:31:18,760 --> 01:31:27,550
that you can expect just about a monthly

01:31:22,690 --> 01:31:31,270
or weekly passing by of some interested

01:31:27,550 --> 01:31:33,730
party from for instance the Far East or

01:31:31,270 --> 01:31:36,360
something and actually much security

01:31:33,730 --> 01:31:40,030
what it then does is simply bought these

01:31:36,360 --> 01:31:41,650
brute force range attacks so actually

01:31:40,030 --> 01:31:43,150
this has a positive impact on your

01:31:41,650 --> 01:31:45,340
performance because it simply doesn't

01:31:43,150 --> 01:31:47,800
have to handle that kind of but

01:31:45,340 --> 01:31:50,380
yeah security measures are whether

01:31:47,800 --> 01:31:54,640
they're technical or procedural they

01:31:50,380 --> 01:31:57,520
always raise a little bit DD amount of

01:31:54,640 --> 01:32:00,760
effort the web server has to perform but

01:31:57,520 --> 01:32:03,159
also a user has to login which is also a

01:32:00,760 --> 01:32:07,469
little bit of a procedural performance

01:32:03,159 --> 01:32:09,969
penalty but in my experience actually

01:32:07,469 --> 01:32:11,670
using like a farmer and mott security

01:32:09,969 --> 01:32:17,440
and open basedir and stuff like that

01:32:11,670 --> 01:32:19,840
it's not noticeable at all hey thanks

01:32:17,440 --> 01:32:23,620
alright another question doesn't make

01:32:19,840 --> 01:32:26,620
sense to the change more popular

01:32:23,620 --> 01:32:31,140
applications like apache and mysql for

01:32:26,620 --> 01:32:38,080
less popular ones like ingenious or

01:32:31,140 --> 01:32:39,520
postgresql no no i don't think so you

01:32:38,080 --> 01:32:41,469
might have a performance reasons however

01:32:39,520 --> 01:32:43,600
especially engine and engine acts of

01:32:41,469 --> 01:32:46,659
course it is it's been written with only

01:32:43,600 --> 01:32:47,490
one goal it's being blazingly fast so

01:32:46,659 --> 01:32:48,960
you might have

01:32:47,490 --> 01:32:51,960
for reasons but from a security point of

01:32:48,960 --> 01:32:53,970
view no it's all software which is

01:32:51,960 --> 01:32:59,070
pretty popular and which has a pretty

01:32:53,970 --> 01:33:02,400
decent QA process behind it basically

01:32:59,070 --> 01:33:05,480
what you should look into is restricting

01:33:02,400 --> 01:33:07,800
the amount of impact an actual attack

01:33:05,480 --> 01:33:12,990
successful attack can have on your

01:33:07,800 --> 01:33:16,140
system by sandboxing stuff like that if

01:33:12,990 --> 01:33:19,470
you do that basically you're good thanks

01:33:16,140 --> 01:33:29,250
what I saw a hand behind there it's

01:33:19,470 --> 01:33:36,830
still waving hello there I have can you

01:33:29,250 --> 01:33:39,840
live my hello can you speak up a bit and

01:33:36,830 --> 01:33:42,600
some applications and there is a

01:33:39,840 --> 01:33:46,560
tendency in web two point oh that the

01:33:42,600 --> 01:33:50,280
web applications tend to be thin clients

01:33:46,560 --> 01:33:54,540
for service-oriented applications so we

01:33:50,280 --> 01:33:59,430
may we have clients that are using our

01:33:54,540 --> 01:34:02,880
application through a web UI like a web

01:33:59,430 --> 01:34:05,370
page all they hear they build smart

01:34:02,880 --> 01:34:08,310
clients who use directly our web

01:34:05,370 --> 01:34:14,490
services and how is it possible to

01:34:08,310 --> 01:34:19,260
secure our back office Webster a web

01:34:14,490 --> 01:34:24,740
service an application in order to track

01:34:19,260 --> 01:34:29,730
the those actions because I think that

01:34:24,740 --> 01:34:32,490
in a slide you said that we have to be

01:34:29,730 --> 01:34:37,590
careful with session cookies and session

01:34:32,490 --> 01:34:43,020
variables and to track the path that led

01:34:37,590 --> 01:34:45,570
to this session variable creation and

01:34:43,020 --> 01:34:49,380
when we have those kind of applications

01:34:45,570 --> 01:34:53,820
when we have both classical classic web

01:34:49,380 --> 01:34:59,199
pages but also web service clients how

01:34:53,820 --> 01:35:04,909
can we be sure to assure about this

01:34:59,199 --> 01:35:07,730
safety uh well pretty much the same way

01:35:04,909 --> 01:35:10,310
as you would go at web pages actually

01:35:07,730 --> 01:35:13,219
from architecture point of view if you

01:35:10,310 --> 01:35:15,110
look at an application the only

01:35:13,219 --> 01:35:18,770
difference between using an actual web

01:35:15,110 --> 01:35:20,750
browser or using a API client is the

01:35:18,770 --> 01:35:23,330
fact that the application doesn't need

01:35:20,750 --> 01:35:24,710
to render a full-fledged HTML page but

01:35:23,330 --> 01:35:26,900
apart from that the bootstrapping

01:35:24,710 --> 01:35:29,360
mechanism is just about identical the

01:35:26,900 --> 01:35:31,010
authentication layer is also just about

01:35:29,360 --> 01:35:32,630
identical actually the only thing that

01:35:31,010 --> 01:35:35,750
it doesn't need to do is like produce

01:35:32,630 --> 01:35:42,650
HTML it has to output like XML or JSON

01:35:35,750 --> 01:35:44,330
or something like that so if you if you

01:35:42,650 --> 01:35:47,480
know that I mean it's like all going

01:35:44,330 --> 01:35:50,300
through this one way down only has

01:35:47,480 --> 01:35:54,350
different heads then you should focus on

01:35:50,300 --> 01:35:58,460
how the actual interaction part can

01:35:54,350 --> 01:36:02,199
identify indeed the session or something

01:35:58,460 --> 01:36:06,440
like that basically what you can do is

01:36:02,199 --> 01:36:09,830
also implement since it's the HTTP

01:36:06,440 --> 01:36:14,420
protocol it's pretty trivial to embed

01:36:09,830 --> 01:36:19,550
session IDs in your here we go again in

01:36:14,420 --> 01:36:21,440
your requests and it's not like back

01:36:19,550 --> 01:36:25,489
practice to have different type of

01:36:21,440 --> 01:36:28,580
session identifiers for your different

01:36:25,489 --> 01:36:30,409
front ends as long as the actual session

01:36:28,580 --> 01:36:32,199
and the actual filtering and validation

01:36:30,409 --> 01:36:35,090
passes through your application

01:36:32,199 --> 01:36:38,929
architecture you can pretty much use

01:36:35,090 --> 01:36:41,090
something else what you can also and and

01:36:38,929 --> 01:36:45,560
that's actually a good thing about smart

01:36:41,090 --> 01:36:48,739
clients or like API consumers is you can

01:36:45,560 --> 01:36:50,900
also embed your own type of challenge

01:36:48,739 --> 01:36:52,760
response mechanisms stuff like that and

01:36:50,900 --> 01:36:54,710
that's something you can pretty much not

01:36:52,760 --> 01:36:57,100
do with a regular web browser because

01:36:54,710 --> 01:37:00,889
yeah well that's pretty much limited to

01:36:57,100 --> 01:37:03,290
JavaScript and cookies and most of the

01:37:00,889 --> 01:37:06,050
times session data or IDs will be stored

01:37:03,290 --> 01:37:07,699
in cookies and these session IDs you

01:37:06,050 --> 01:37:09,790
basically do not want to be reachable

01:37:07,699 --> 01:37:12,710
from JavaScript because then they can be

01:37:09,790 --> 01:37:17,920
hijacked by some other

01:37:12,710 --> 01:37:21,140
browser script in intelligent clients or

01:37:17,920 --> 01:37:23,870
API consumers you can have all types of

01:37:21,140 --> 01:37:27,080
different authentication basic mechanism

01:37:23,870 --> 01:37:32,750
you can also also use ssl certificates

01:37:27,080 --> 01:37:37,480
for instance but actually I think that

01:37:32,750 --> 01:37:40,550
whether you use a web browser session or

01:37:37,480 --> 01:37:42,800
custom made application since actually

01:37:40,550 --> 01:37:46,460
did the whole workflow of validating

01:37:42,800 --> 01:37:49,640
input filtering output authentication

01:37:46,460 --> 01:37:53,570
checking should be done by standard

01:37:49,640 --> 01:37:55,730
components in the application I think

01:37:53,570 --> 01:37:58,880
that that basically is not that much of

01:37:55,730 --> 01:38:00,500
an issue did I answer your question

01:37:58,880 --> 01:38:02,870
satisfactory with us yes thank you very

01:38:00,500 --> 01:38:08,090
much quite cool you're welcome anybody

01:38:02,870 --> 01:38:11,690
else feels lucky then I would very much

01:38:08,090 --> 01:38:15,590
like or did you have a question or did

01:38:11,690 --> 01:38:17,719
you just yawn alright cool I would like

01:38:15,590 --> 01:38:22,489
to thank you for being here and

01:38:17,719 --> 01:38:24,320
listening to me here it's been a

01:38:22,489 --> 01:38:25,940
pleasure to be here at the opensuse

01:38:24,320 --> 01:38:29,600
conference with all your great people

01:38:25,940 --> 01:38:32,739
and I hope to see you again in future

01:38:29,600 --> 01:38:32,739
sessions thank you

01:38:52,180 --> 01:38:54,240

YouTube URL: https://www.youtube.com/watch?v=dmReSYmEgTU


