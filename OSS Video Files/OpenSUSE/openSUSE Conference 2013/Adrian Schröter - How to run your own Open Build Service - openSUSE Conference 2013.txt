Title: Adrian SchrÃ¶ter - How to run your own Open Build Service - openSUSE Conference 2013
Publication date: 2013-07-22
Playlist: openSUSE Conference 2013
Description: 
	Initially we will show the current state of Open Build Service (OBS) and it's concept.

The main focus of the session will show how to run an own instance of OBS on your real or virtual hardware.
We will also demonstrate how to reuse resources from other OBS instances.

Furthermore we will demonstrate setups which are useful to
* Build for multiple Linux distributions
* Test intrusive changes which have a deep inpact into the distribution
* Port openSUSE to another hardware architecture
* Rebuild packages in a different flavor.
Captions: 
	00:00:00,050 --> 00:00:07,620
okay thank you yeah I marlin and humane

00:00:04,200 --> 00:00:10,170
know me from former conferences or where

00:00:07,620 --> 00:00:12,240
I spoke about the boot service always

00:00:10,170 --> 00:00:15,450
presenting what it is and what it does

00:00:12,240 --> 00:00:19,340
and I guess I saw it at least that it

00:00:15,450 --> 00:00:22,080
becomes boring over time so I wanted to

00:00:19,340 --> 00:00:26,099
speak about what it can what else it can

00:00:22,080 --> 00:00:30,510
do and why you may could consider to run

00:00:26,099 --> 00:00:36,770
your own instance assuming that you all

00:00:30,510 --> 00:00:36,770
know what OBS is who knows what OBS is

00:00:37,399 --> 00:00:46,050
okay with package something already okay

00:00:43,320 --> 00:00:48,300
not too many good thing is when you want

00:00:46,050 --> 00:00:51,210
to learn how to package with OBS and you

00:00:48,300 --> 00:00:55,410
can visit n s talk tomorrow or his

00:00:51,210 --> 00:00:58,920
workshop so he is guiding you through

00:00:55,410 --> 00:01:00,809
all steps now to make a package and get

00:00:58,920 --> 00:01:08,250
it in the build service for Jews and

00:01:00,809 --> 00:01:11,630
non-jews er distributions I hope I want

00:01:08,250 --> 00:01:17,009
to dig into a bit more complex stuff and

00:01:11,630 --> 00:01:23,189
some examples but people out there are

00:01:17,009 --> 00:01:26,640
doing disappeared service yeah so many

00:01:23,189 --> 00:01:29,340
wonder why why should they run their own

00:01:26,640 --> 00:01:31,530
bills to others at all yourself I mean

00:01:29,340 --> 00:01:35,700
the S boutot open to the orc everybody

00:01:31,530 --> 00:01:37,049
can go there can upload sources the

00:01:35,700 --> 00:01:39,270
build service were built it and

00:01:37,049 --> 00:01:43,820
everybody can download it so what else

00:01:39,270 --> 00:01:46,320
would you need it'sit's oh well

00:01:43,820 --> 00:01:49,500
depending how you see it but 18

00:01:46,320 --> 00:01:52,020
terabytes data which is constantly

00:01:49,500 --> 00:01:55,409
rebuilding and hosted and backup it's

00:01:52,020 --> 00:02:02,219
and as this we got 18 terabytes are

00:01:55,409 --> 00:02:05,009
quite a lot we have depending on the

00:02:02,219 --> 00:02:08,280
times and so on between 304 networker

00:02:05,009 --> 00:02:10,830
instances running so so we not and for

00:02:08,280 --> 00:02:13,640
her not virtual machines are building

00:02:10,830 --> 00:02:18,560
some package compiling stuff

00:02:13,640 --> 00:02:21,560
and because the opensuse project is such

00:02:18,560 --> 00:02:23,750
a demanding project we rarely running

00:02:21,560 --> 00:02:27,290
this official stable version of the

00:02:23,750 --> 00:02:29,870
billet service be usually most of the

00:02:27,290 --> 00:02:32,150
time we have some they have to get

00:02:29,870 --> 00:02:36,080
master branch deployed basically which

00:02:32,150 --> 00:02:41,000
is also available as packages so we eat

00:02:36,080 --> 00:02:43,940
our own dog food people like Hulu are

00:02:41,000 --> 00:02:46,190
working kudos policemen shop opens loser

00:02:43,940 --> 00:02:48,080
so he needs something and the good thing

00:02:46,190 --> 00:02:52,310
is that he is not only complaining but

00:02:48,080 --> 00:02:57,500
he's also pushing stuff to us helping us

00:02:52,310 --> 00:02:59,510
working on to build service so they said

00:02:57,500 --> 00:03:02,480
it's an instance everybody can go and

00:02:59,510 --> 00:03:04,250
everybody can use and even better I mean

00:03:02,480 --> 00:03:07,070
just absolute perfect up in two mins was

00:03:04,250 --> 00:03:12,140
never ever down everything can be put

00:03:07,070 --> 00:03:15,620
there and it had never load problems so

00:03:12,140 --> 00:03:18,769
if you have not used it right okay so

00:03:15,620 --> 00:03:23,030
you know it's lie of course these are

00:03:18,769 --> 00:03:25,340
lies because we want the latest features

00:03:23,030 --> 00:03:27,560
sometimes they are breakages I mean we

00:03:25,340 --> 00:03:30,100
had not really I can't remember a point

00:03:27,560 --> 00:03:34,220
of time where we had to loss of sources

00:03:30,100 --> 00:03:37,489
and all the binaries are rebuildable but

00:03:34,220 --> 00:03:41,810
sometimes it's it's not reachable most

00:03:37,489 --> 00:03:43,910
of the time it works our perfect admin

00:03:41,810 --> 00:03:45,739
team bulk it's hosted in a location

00:03:43,910 --> 00:03:48,290
where we don't have a twenty four seven

00:03:45,739 --> 00:03:53,030
support so if it breaks down on weekend

00:03:48,290 --> 00:03:57,560
and in many open-source projects working

00:03:53,030 --> 00:03:59,690
heavily on the weekends same yeah they

00:03:57,560 --> 00:04:01,549
may need to worst case i need to evade

00:03:59,690 --> 00:04:03,769
until monday usually someone is driving

00:04:01,549 --> 00:04:07,700
in and fixing it but there's no promise

00:04:03,769 --> 00:04:12,709
for that and everything can be hosted

00:04:07,700 --> 00:04:14,780
say up well everybody can upload

00:04:12,709 --> 00:04:16,729
everything shows it's true but the

00:04:14,780 --> 00:04:18,650
Okaloosa project is an open source

00:04:16,729 --> 00:04:22,099
project in first place so the Okaloosa

00:04:18,650 --> 00:04:24,650
project has policies and by default the

00:04:22,099 --> 00:04:26,800
only one to have software hostage there

00:04:24,650 --> 00:04:29,830
which follows the open source who

00:04:26,800 --> 00:04:33,699
so only OSI approved licenses as they

00:04:29,830 --> 00:04:38,050
are we make some exceptions for instance

00:04:33,699 --> 00:04:40,720
for flash player and some other binary

00:04:38,050 --> 00:04:43,870
only start which are quite popular but

00:04:40,720 --> 00:04:46,479
this has to follow special words so if

00:04:43,870 --> 00:04:49,720
you are just building your own private

00:04:46,479 --> 00:04:52,060
closed source application you need to

00:04:49,720 --> 00:04:53,560
would need to ask for permission and if

00:04:52,060 --> 00:04:55,780
it's not important for the open do the

00:04:53,560 --> 00:05:00,430
project it's not very likely that they

00:04:55,780 --> 00:05:07,360
will approve it yeah and the load Peaks

00:05:00,430 --> 00:05:14,379
I mean there's a monito page and you can

00:05:07,360 --> 00:05:18,789
clearly say when Europe became a vague

00:05:14,379 --> 00:05:24,490
and when the Americans stand up in

00:05:18,789 --> 00:05:27,879
addition to set so there's it just has

00:05:24,490 --> 00:05:30,250
to build suddenly plenty of packages and

00:05:27,879 --> 00:05:32,469
some point of time of course also it's

00:05:30,250 --> 00:05:34,000
scriptable it has an API so everybody

00:05:32,469 --> 00:05:37,509
can easily script it and push a new

00:05:34,000 --> 00:05:41,130
stuff so there are peaks and the poor

00:05:37,509 --> 00:05:41,130
build service and need to handle them

00:05:41,490 --> 00:05:51,729
even worse arm our scenarios culo our

00:05:48,539 --> 00:05:56,169
google is manager is doing was creating

00:05:51,729 --> 00:05:58,389
lots of peaks because he often sets up

00:05:56,169 --> 00:06:00,370
temporary projects to test something for

00:05:58,389 --> 00:06:03,250
instance a new compiler what does it

00:06:00,370 --> 00:06:06,879
break before he wants to be before he's

00:06:03,250 --> 00:06:09,180
checking in into factory and making now

00:06:06,879 --> 00:06:12,310
every developer developing for opensuse

00:06:09,180 --> 00:06:15,310
impossible he wants to try out it

00:06:12,310 --> 00:06:19,000
prefers he creates a separate project

00:06:15,310 --> 00:06:23,129
and suddenly in parallel 12,000 packages

00:06:19,000 --> 00:06:27,219
needs to be built so it's it's just load

00:06:23,129 --> 00:06:28,690
some of these packages are large but for

00:06:27,219 --> 00:06:31,330
the main server actually is a bigger

00:06:28,690 --> 00:06:34,779
problem as a plenty in small packages he

00:06:31,330 --> 00:06:36,610
had all the slow heart vendor in the

00:06:34,779 --> 00:06:39,669
beginning so we tuned our workers very

00:06:36,610 --> 00:06:40,870
much and nowadays we have added hot

00:06:39,669 --> 00:06:44,020
stuff workers and

00:06:40,870 --> 00:06:46,630
problem is done well in five minutes it

00:06:44,020 --> 00:06:49,240
builds several thousand packages and the

00:06:46,630 --> 00:06:51,370
main server has to has to get super

00:06:49,240 --> 00:06:54,070
zayats back and the the one gigabyte

00:06:51,370 --> 00:06:55,540
network interfaces already saturating in

00:06:54,070 --> 00:06:57,400
surprises them saturating just by

00:06:55,540 --> 00:07:00,100
reading the desires of the debate

00:06:57,400 --> 00:07:05,350
resides and then it needs to reschedule

00:07:00,100 --> 00:07:08,650
the new bids so luckily we will improve

00:07:05,350 --> 00:07:13,060
set soon we will set a second binary

00:07:08,650 --> 00:07:14,560
back end so when you noticed that the

00:07:13,060 --> 00:07:17,830
scheduling state for instance is not

00:07:14,560 --> 00:07:20,460
changing for a longer time often caused

00:07:17,830 --> 00:07:23,110
by cooler by his temporary projects

00:07:20,460 --> 00:07:26,110
that's the reason by we've set a second

00:07:23,110 --> 00:07:28,090
binary interface behind so cool has his

00:07:26,110 --> 00:07:32,020
playground and services of all of the

00:07:28,090 --> 00:07:34,660
world can still go despite of cool he's

00:07:32,020 --> 00:07:36,280
not so only good in guy but and here's a

00:07:34,660 --> 00:07:38,800
valid reason it's not a dos attack it's

00:07:36,280 --> 00:07:42,780
just plenty of them so this will come in

00:07:38,800 --> 00:07:42,780
the next few weeks

00:07:47,489 --> 00:07:53,799
still you might want to say still not

00:07:50,829 --> 00:07:55,269
makes sense for me to to build to set up

00:07:53,799 --> 00:07:58,599
my own build service instance because

00:07:55,269 --> 00:08:00,459
maybe it's faster than but I want to

00:07:58,599 --> 00:08:03,069
collaborate with others so I want to use

00:08:00,459 --> 00:08:05,589
the open bid service and people go there

00:08:03,069 --> 00:08:08,649
because they find communities because

00:08:05,589 --> 00:08:12,099
they can show their work other people

00:08:08,649 --> 00:08:14,559
and I get contributions neck so again

00:08:12,099 --> 00:08:18,939
you're right at least the private

00:08:14,559 --> 00:08:25,209
instances then not an option for you but

00:08:18,939 --> 00:08:27,609
still also as a nope you loser developer

00:08:25,209 --> 00:08:35,050
it makes it can make sense to set up

00:08:27,609 --> 00:08:36,610
your own instance for instance well of

00:08:35,050 --> 00:08:40,169
course there are obvious reasons there

00:08:36,610 --> 00:08:43,959
are eyes vs out the average boots

00:08:40,169 --> 00:08:47,230
product and say don't want to gets a

00:08:43,959 --> 00:08:51,279
sauce out of the house so we have

00:08:47,230 --> 00:08:56,920
mechanics so to hide projects that you

00:08:51,279 --> 00:08:58,600
can't access them but we don't want it

00:08:56,920 --> 00:09:02,730
in the open to the project or visually

00:08:58,600 --> 00:09:05,050
so that it would be an invalid reason to

00:09:02,730 --> 00:09:07,839
to install a known build service

00:09:05,050 --> 00:09:12,220
instance and then there are different

00:09:07,839 --> 00:09:14,439
kinds of people i know some who really

00:09:12,220 --> 00:09:16,720
don't want that their brute service is

00:09:14,439 --> 00:09:19,089
talking at all this anything on the

00:09:16,720 --> 00:09:21,309
internet no matter whom so they really

00:09:19,089 --> 00:09:23,410
have to reimpose the base distribution

00:09:21,309 --> 00:09:26,259
and so we set up it so it's quite some I

00:09:23,410 --> 00:09:27,939
thought plenty of others just setting up

00:09:26,259 --> 00:09:30,819
their build servers at their house and

00:09:27,939 --> 00:09:33,009
can connect to our instance so bill

00:09:30,819 --> 00:09:35,679
service has a feature where you

00:09:33,009 --> 00:09:40,569
configure in the web interface with

00:09:35,679 --> 00:09:42,309
mouse click to reuse the sources from

00:09:40,569 --> 00:09:46,449
another build service instance and this

00:09:42,309 --> 00:09:49,149
is a default you can just set up you two

00:09:46,449 --> 00:09:51,220
instance at your place build and

00:09:49,149 --> 00:09:53,939
whatever is needed it downloads from our

00:09:51,220 --> 00:09:53,939
instance for instance

00:09:56,910 --> 00:10:02,010
any questions so far it's okay to open

00:10:05,920 --> 00:10:13,690
yeah this is a is fast issue when you

00:10:10,930 --> 00:10:17,380
stand up in Europe at six o'clock in the

00:10:13,690 --> 00:10:19,870
morning it's wonderful fast and when you

00:10:17,380 --> 00:10:26,380
work then for six hours it's not so fast

00:10:19,870 --> 00:10:28,480
anymore so people set up their own

00:10:26,380 --> 00:10:30,339
instance and then they are I know it

00:10:28,480 --> 00:10:37,120
from some ice fees from some companies

00:10:30,339 --> 00:10:40,029
who test the software visit one extreme

00:10:37,120 --> 00:10:44,170
I know one company really reboots there

00:10:40,029 --> 00:10:46,360
i believe about 300 packages i have in

00:10:44,170 --> 00:10:48,279
their product and they rebuild really

00:10:46,360 --> 00:10:51,190
the entire product for each good commit

00:10:48,279 --> 00:10:53,110
so they have some stuff around build

00:10:51,190 --> 00:10:57,970
service which creates a new product a

00:10:53,110 --> 00:11:00,220
project and rebuilds the entire source

00:10:57,970 --> 00:11:02,620
for each git commit and they have quite

00:11:00,220 --> 00:11:05,470
I believe two of three on our developers

00:11:02,620 --> 00:11:12,339
so they have quite a number of get

00:11:05,470 --> 00:11:14,410
commits and yeah each time the entire

00:11:12,339 --> 00:11:18,640
sink mat must be rebuilt I don't know

00:11:14,410 --> 00:11:26,970
exactly how long it takes them but it

00:11:18,640 --> 00:11:34,180
creates lots lots of build load so let's

00:11:26,970 --> 00:11:36,370
now that's an example you can you know

00:11:34,180 --> 00:11:39,130
the food services organized in projects

00:11:36,370 --> 00:11:41,740
so you have a project then you put

00:11:39,130 --> 00:11:43,329
plenty of sources inside and you say I

00:11:41,740 --> 00:11:50,410
want to build it for zoo so that a

00:11:43,329 --> 00:11:54,339
debian different flavors and yeah you

00:11:50,410 --> 00:11:56,199
can automate this it'sit's we have a

00:11:54,339 --> 00:11:57,819
command line client which you can use in

00:11:56,199 --> 00:12:03,819
shared scripts or you use directly the

00:11:57,819 --> 00:12:07,620
API who wanted to ask for the forgetting

00:12:03,819 --> 00:12:10,030
integration usually someone wants to ask

00:12:07,620 --> 00:12:13,190
no one

00:12:10,030 --> 00:12:17,680
usually people are asking when people

00:12:13,190 --> 00:12:17,680
use it directly in the bird service and

00:12:17,920 --> 00:12:24,710
since three years the answer is yeah you

00:12:21,560 --> 00:12:28,550
know it's just work it's fine to do it

00:12:24,710 --> 00:12:32,450
it's just work for two years ago we say

00:12:28,550 --> 00:12:34,310
it well we sort about it and written

00:12:32,450 --> 00:12:38,180
down what needs to be done everybody can

00:12:34,310 --> 00:12:40,250
start it until today no one has started

00:12:38,180 --> 00:12:43,550
so everybody wants something about no

00:12:40,250 --> 00:12:46,190
one started yet so I can't tell you when

00:12:43,550 --> 00:12:48,800
we will have full get integration if

00:12:46,190 --> 00:12:50,800
someone wants to work on this I'm what

00:12:48,800 --> 00:12:56,720
we are happy really happy to help

00:12:50,800 --> 00:13:00,740
provide also some code so one so far no

00:12:56,720 --> 00:13:07,100
one showed up I guess it will happen

00:13:00,740 --> 00:13:11,800
sometime but yeah so back to this

00:13:07,100 --> 00:13:16,820
example what this extreme company does

00:13:11,800 --> 00:13:18,560
it sets up then projects on top of it

00:13:16,820 --> 00:13:22,100
and the nice thing of the build service

00:13:18,560 --> 00:13:25,100
is it you can reuse resources so you can

00:13:22,100 --> 00:13:29,090
say this project takes all these

00:13:25,100 --> 00:13:31,580
packages but I replace this one for

00:13:29,090 --> 00:13:35,180
instance of compiler and then you

00:13:31,580 --> 00:13:38,210
configure your repository it's a bit

00:13:35,180 --> 00:13:40,760
cryptical down there with link below go

00:13:38,210 --> 00:13:46,100
Deb that means it builds this package

00:13:40,760 --> 00:13:49,700
and then it checks when this package

00:13:46,100 --> 00:13:51,590
would have been submitted their what

00:13:49,700 --> 00:13:54,290
other pictures are affected and at

00:13:51,590 --> 00:13:57,440
people's only them so ideally for

00:13:54,290 --> 00:13:59,680
instance you put QT library inside it

00:13:57,440 --> 00:14:02,330
will completely compile or acute

00:13:59,680 --> 00:14:06,080
libraries and cicadas stuff and nothing

00:14:02,330 --> 00:14:08,120
else and yeah and sometimes you have

00:14:06,080 --> 00:14:11,360
surprises here because suddenly it

00:14:08,120 --> 00:14:13,100
starts to recompile the corner and you

00:14:11,360 --> 00:14:17,510
check no the colonel does not link

00:14:13,100 --> 00:14:20,390
against UT but then you can find out

00:14:17,510 --> 00:14:22,580
later on okay but this other package is

00:14:20,390 --> 00:14:23,540
using us building a cutie plugin and

00:14:22,580 --> 00:14:25,490
just

00:14:23,540 --> 00:14:27,470
provides a program which generates

00:14:25,490 --> 00:14:30,259
documentation and this one is used by

00:14:27,470 --> 00:14:32,570
Aiza Khan oh so you these are the kinds

00:14:30,259 --> 00:14:34,040
of stuff which you don't notice in first

00:14:32,570 --> 00:14:36,769
hand but you really need to try out

00:14:34,040 --> 00:14:38,089
because changes there I have don't

00:14:36,769 --> 00:14:41,360
happen directly so I have them

00:14:38,089 --> 00:14:46,220
indirectly all those kinds of stuff and

00:14:41,360 --> 00:14:48,940
um you know in rpm JSC scripts and and

00:14:46,220 --> 00:14:51,620
tools which automatically find out about

00:14:48,940 --> 00:14:54,230
provides and requires of packages so

00:14:51,620 --> 00:14:57,500
when you have a pearl package it

00:14:54,230 --> 00:14:59,480
automatically adds provides and requires

00:14:57,500 --> 00:15:02,029
settings to the package and then you

00:14:59,480 --> 00:15:04,310
tune this you have absolutely no idea

00:15:02,029 --> 00:15:06,110
what will happen because it happened so

00:15:04,310 --> 00:15:08,029
indirectly is when you need to try it

00:15:06,110 --> 00:15:11,509
out and you don't want to test it in

00:15:08,029 --> 00:15:13,220
factory because one easy mr. 11

00:15:11,509 --> 00:15:15,889
overlooked and the entire Factory is not

00:15:13,220 --> 00:15:17,690
usable for all other developers so that

00:15:15,889 --> 00:15:21,980
sets examples where these kinds of

00:15:17,690 --> 00:15:25,220
setups are used and yeah and to build

00:15:21,980 --> 00:15:27,740
service itself so open zuzubin instance

00:15:25,220 --> 00:15:29,569
you can do it all you can do all the

00:15:27,740 --> 00:15:32,529
same but if you want to be fast then you

00:15:29,569 --> 00:15:35,389
have enough power at your place it's

00:15:32,529 --> 00:15:37,550
maybe better doing in a set up your own

00:15:35,389 --> 00:15:39,050
instance and use your local resources

00:15:37,550 --> 00:15:47,750
and you don't need too late for our

00:15:39,050 --> 00:15:49,579
other abilities yeah this is actually

00:15:47,750 --> 00:15:51,170
the example I was speaking about this

00:15:49,579 --> 00:15:56,800
miss pearl so there's this devil

00:15:51,170 --> 00:16:02,480
languages pearl package I believe it's a

00:15:56,800 --> 00:16:06,920
it's also some hectic project where many

00:16:02,480 --> 00:16:09,649
but by far not every packages from Sipan

00:16:06,920 --> 00:16:16,180
got imported automatically so it's

00:16:09,649 --> 00:16:18,800
relatively large 2377 source packages

00:16:16,180 --> 00:16:20,980
there is another project they are really

00:16:18,800 --> 00:16:25,040
every Sipan packages inside

00:16:20,980 --> 00:16:27,529
automatically scripted and this is by

00:16:25,040 --> 00:16:29,180
far even more packages but many of them

00:16:27,529 --> 00:16:33,529
are not building because they are just

00:16:29,180 --> 00:16:36,079
broken these are already the hand

00:16:33,529 --> 00:16:37,230
selected packages which we consider to

00:16:36,079 --> 00:16:39,750
be more useful

00:16:37,230 --> 00:16:42,600
and they are collected in this devil

00:16:39,750 --> 00:16:44,490
languages Pro project and sent since it

00:16:42,600 --> 00:16:48,390
builds for many distributions you see

00:16:44,490 --> 00:16:51,000
from these two thousand source packages

00:16:48,390 --> 00:16:56,910
these when we want to rebuild everything

00:16:51,000 --> 00:16:58,980
we start about 95,000 spirit tasks so a

00:16:56,910 --> 00:17:02,940
deep change there for instance a new

00:16:58,980 --> 00:17:07,530
Perl interpreter or some something some

00:17:02,940 --> 00:17:11,460
base package we changed its its launches

00:17:07,530 --> 00:17:13,680
so many boo tasks and for me as a build

00:17:11,460 --> 00:17:17,010
service administrator as a per package

00:17:13,680 --> 00:17:19,230
is much worse than let's say que tu de

00:17:17,010 --> 00:17:21,480
libre office because katie and

00:17:19,230 --> 00:17:24,180
libreoffice packages boot long so there

00:17:21,480 --> 00:17:26,700
are only a few packages and they buried

00:17:24,180 --> 00:17:31,640
long and developed it's understandable

00:17:26,700 --> 00:17:35,430
time this project builds fast actually

00:17:31,640 --> 00:17:38,790
on the fastest systems we have i think

00:17:35,430 --> 00:17:42,750
we could tune it up to 20 seconds that a

00:17:38,790 --> 00:17:44,550
build result comes but then the main

00:17:42,750 --> 00:17:48,360
server needs to recalculate and avi or

00:17:44,550 --> 00:17:50,550
write and publish it and yeah the tools

00:17:48,360 --> 00:17:53,160
like equate vapor which are creating the

00:17:50,550 --> 00:17:55,080
metadata so it's a standard tool for

00:17:53,160 --> 00:17:57,540
creating the metadata it's a super and

00:17:55,080 --> 00:18:01,050
human so on understands it they are so

00:17:57,540 --> 00:18:05,510
slow and so inefficient that the

00:18:01,050 --> 00:18:05,510
publishing can take hours

00:18:09,610 --> 00:18:14,220
No

00:18:11,840 --> 00:18:18,650
so

00:18:14,220 --> 00:18:21,570
okay emboss two fastest my mouth so to

00:18:18,650 --> 00:18:27,179
test this again you would make a PO

00:18:21,570 --> 00:18:29,490
check link you link a project and this

00:18:27,179 --> 00:18:31,230
nice thing is that it works not only

00:18:29,490 --> 00:18:34,230
inside a bit service instance that the

00:18:31,230 --> 00:18:36,780
works also via remote instances so you

00:18:34,230 --> 00:18:38,610
have your own local instance say I want

00:18:36,780 --> 00:18:40,440
to have all sources from this other

00:18:38,610 --> 00:18:42,690
project without the need to copy it

00:18:40,440 --> 00:18:46,200
manually so it's just one line in XML to

00:18:42,690 --> 00:18:54,299
defines us then you at your package

00:18:46,200 --> 00:18:55,919
there and say yeah rebuild it this is

00:18:54,299 --> 00:19:01,380
special parameter link will glide slope

00:18:55,919 --> 00:19:03,539
yep so if you are lucky and you edit a

00:19:01,380 --> 00:19:05,580
package which influences no other

00:19:03,539 --> 00:19:07,799
packages you just get one boot beside

00:19:05,580 --> 00:19:10,169
everything is fast and easy and fine if

00:19:07,799 --> 00:19:18,090
you are unlucky and everything needs to

00:19:10,169 --> 00:19:20,340
be rebuilt you will notice as well now

00:19:18,090 --> 00:19:24,240
then there's another example verbs what

00:19:20,340 --> 00:19:26,669
could be done this is mechanics I don't

00:19:24,240 --> 00:19:29,630
know how it is increase in Germany has

00:19:26,669 --> 00:19:32,659
quite a lot of talk about the prison and

00:19:29,630 --> 00:19:36,919
yeah all the back doors which are in

00:19:32,659 --> 00:19:39,539
what kind of software and no one knows

00:19:36,919 --> 00:19:44,100
the good thing is open losses open

00:19:39,539 --> 00:19:46,470
source and the even better sing in

00:19:44,100 --> 00:19:48,960
opensuse is set unlikely some other

00:19:46,470 --> 00:19:52,710
distributions which are also open source

00:19:48,960 --> 00:19:56,510
itself but they don't give an say

00:19:52,710 --> 00:19:58,710
toolchain easily ave so for instance

00:19:56,510 --> 00:20:01,559
canonical has launch pad also open

00:19:58,710 --> 00:20:05,669
source but i have never heard of anybody

00:20:01,559 --> 00:20:08,600
who managed to install it i am not aware

00:20:05,669 --> 00:20:11,419
of any running launch pet installation

00:20:08,600 --> 00:20:13,710
outside of canonical if someone knows it

00:20:11,419 --> 00:20:20,880
please tell me but i am not aware that

00:20:13,710 --> 00:20:25,620
anyone ever managed that is opensuse VAV

00:20:20,880 --> 00:20:27,929
also open source development stack name

00:20:25,620 --> 00:20:28,200
user build servers in a vase that really

00:20:27,929 --> 00:20:30,419
ever

00:20:28,200 --> 00:20:34,230
bodycon running it so everybody can run

00:20:30,419 --> 00:20:36,899
the build service and many do and you

00:20:34,230 --> 00:20:41,029
can rebuild the opensuse distribution

00:20:36,899 --> 00:20:44,130
our sources and then one could compare

00:20:41,029 --> 00:20:50,549
as an it would easier to compare all the

00:20:44,130 --> 00:20:52,409
binary packages because of course when

00:20:50,549 --> 00:20:55,919
you submit sources to opensuse you need

00:20:52,409 --> 00:20:57,510
to trust people like me that you don't

00:20:55,919 --> 00:20:59,760
fiddle around with our servers and

00:20:57,510 --> 00:21:02,760
inject a complete different binary I

00:20:59,760 --> 00:21:05,279
mean you upload nice sources who will

00:21:02,760 --> 00:21:10,950
open SSL source so it snow in the source

00:21:05,279 --> 00:21:15,510
you will not find any any Secret Service

00:21:10,950 --> 00:21:18,350
heck but I could of course just to the

00:21:15,510 --> 00:21:21,419
very different package back who knows

00:21:18,350 --> 00:21:23,700
but signaling this this elusive project

00:21:21,419 --> 00:21:26,429
is always open to setup is someone

00:21:23,700 --> 00:21:28,380
outside could prove it someone outside

00:21:26,429 --> 00:21:30,870
could really rebuild the sources and

00:21:28,380 --> 00:21:34,260
compare the binaries that is of course

00:21:30,870 --> 00:21:36,600
not easy but it's not that hard as it

00:21:34,260 --> 00:21:39,389
sounds because they have also this build

00:21:36,600 --> 00:21:41,460
compare script which is used in first

00:21:39,389 --> 00:21:44,100
place to speed up the birds so we have

00:21:41,460 --> 00:21:47,070
already code which compares to our pms

00:21:44,100 --> 00:21:52,950
and decides if servos really a change or

00:21:47,070 --> 00:21:57,269
not the usage in first place get your

00:21:52,950 --> 00:22:00,269
reduced amount of builds or the Jews the

00:21:57,269 --> 00:22:02,070
packages which which we needed to

00:22:00,269 --> 00:22:04,230
rebuild because we can't say but

00:22:02,070 --> 00:22:06,510
automatically that there is no influence

00:22:04,230 --> 00:22:09,210
but you don't want to publish it so that

00:22:06,510 --> 00:22:13,260
everybody needs to need to download

00:22:09,210 --> 00:22:16,889
install it and this build compare is

00:22:13,260 --> 00:22:19,470
there and this does this work already so

00:22:16,889 --> 00:22:23,820
if someone more trusted persons and me

00:22:19,470 --> 00:22:26,130
would set it up in the same way the

00:22:23,820 --> 00:22:29,220
rebuild would be already automated and

00:22:26,130 --> 00:22:31,080
and one could also could use at least

00:22:29,220 --> 00:22:35,750
the amount of packages which needs to be

00:22:31,080 --> 00:22:39,690
reviewed I mean I would really able

00:22:35,750 --> 00:22:41,450
really looking forward positives someone

00:22:39,690 --> 00:22:45,409
tries it because it would put

00:22:41,450 --> 00:22:47,029
I mean investigate some official

00:22:45,409 --> 00:22:49,100
organization would do it and we would

00:22:47,029 --> 00:22:57,289
get some sort kinds of certification of

00:22:49,100 --> 00:23:00,260
being not back thought but yeah the

00:22:57,289 --> 00:23:03,320
point is that only was open loser I

00:23:00,260 --> 00:23:08,510
think it's even possible at or maybe

00:23:03,320 --> 00:23:09,889
also a Steve Ian the point is why it I

00:23:08,510 --> 00:23:12,019
think it's easier this open sorceress

00:23:09,889 --> 00:23:14,659
with debian you need to find the oil

00:23:12,019 --> 00:23:17,600
binaries they don't have a clean rebuild

00:23:14,659 --> 00:23:19,850
SE rebuild own is a package which they

00:23:17,600 --> 00:23:23,269
things i need to rebuild but that means

00:23:19,850 --> 00:23:25,760
that it's not easy automatable as its

00:23:23,269 --> 00:23:28,250
you need to point these binaries from

00:23:25,760 --> 00:23:31,639
that point of time at penn's i build

00:23:28,250 --> 00:23:33,230
another one to have a similar finally to

00:23:31,639 --> 00:23:41,029
be able to compare it that's not the

00:23:33,230 --> 00:23:44,029
case was open susan now just for the

00:23:41,029 --> 00:23:46,220
example same setup would be sinker

00:23:44,029 --> 00:23:50,179
Berbers opensuse you make a project link

00:23:46,220 --> 00:23:52,130
say what link build local dependencies

00:23:50,179 --> 00:23:54,110
battling at all because you have no

00:23:52,130 --> 00:23:57,289
change you just want to rebuild it

00:23:54,110 --> 00:23:59,389
identically it's it's basically two

00:23:57,289 --> 00:24:04,669
lines xml in the project configuration

00:23:59,389 --> 00:24:08,950
to do it it's it's really easy to create

00:24:04,669 --> 00:24:08,950
plenty of build loaders of it serves

00:24:11,640 --> 00:24:17,210
No

00:24:13,100 --> 00:24:21,679
sounds complicated now the setup is easy

00:24:17,210 --> 00:24:25,419
observed projects as i said the build

00:24:21,679 --> 00:24:28,460
server setup of the main server though

00:24:25,419 --> 00:24:31,160
if you're really running a large good

00:24:28,460 --> 00:24:33,320
service which plenty of users yes it

00:24:31,160 --> 00:24:35,240
will become complicate because you need

00:24:33,320 --> 00:24:39,559
to consider some load balancing backups

00:24:35,240 --> 00:24:41,480
and so on but most people nowadays start

00:24:39,559 --> 00:24:43,720
with their blinds and suppliant has

00:24:41,480 --> 00:24:47,360
everything so it's just downloading the

00:24:43,720 --> 00:24:49,970
image starting it and if you have an

00:24:47,360 --> 00:24:52,280
dhcp server on your network it gets a

00:24:49,970 --> 00:24:54,049
dns name then you can configure the

00:24:52,280 --> 00:24:57,470
apache and all the stuff automatically

00:24:54,049 --> 00:25:03,620
and it's just once so it's really a one

00:24:57,470 --> 00:25:06,470
button click installer asian dead most

00:25:03,620 --> 00:25:09,080
people try for many people try to

00:25:06,470 --> 00:25:10,760
install it from get stares is not that

00:25:09,080 --> 00:25:14,809
easy because you need to get the right

00:25:10,760 --> 00:25:21,020
will be gem versions and let's harder

00:25:14,809 --> 00:25:23,510
it's doable but it's harder the 'pliance

00:25:21,020 --> 00:25:26,750
is also good i mean many people think

00:25:23,510 --> 00:25:28,850
those appliances always well this is

00:25:26,750 --> 00:25:31,429
kind of a live CD it's okay for testing

00:25:28,850 --> 00:25:33,860
but you can't use in productive setups

00:25:31,429 --> 00:25:36,230
and luckily this changes this was always

00:25:33,860 --> 00:25:41,960
a cloud infrastructure and what we have

00:25:36,230 --> 00:25:44,750
done is created some logic that build

00:25:41,960 --> 00:25:47,570
service appliance looks for a volume

00:25:44,750 --> 00:25:52,190
poopin lvm volume group and if it exists

00:25:47,570 --> 00:25:55,970
then it uses this as a data volume the

00:25:52,190 --> 00:25:59,020
advantage here is you can solve a your

00:25:55,970 --> 00:26:01,580
entire image and install the new one and

00:25:59,020 --> 00:26:04,429
on the next boot it will just migrate

00:26:01,580 --> 00:26:06,049
the data to the next port rule to be

00:26:04,429 --> 00:26:10,159
prepared for the next bill service

00:26:06,049 --> 00:26:12,919
version you couldn't you also do the

00:26:10,159 --> 00:26:16,400
super DAP updates it's a bit more hand

00:26:12,919 --> 00:26:19,880
work but it's also looking of course but

00:26:16,400 --> 00:26:22,730
I see it as kind of a prototype for

00:26:19,880 --> 00:26:25,970
something like and you have really live

00:26:22,730 --> 00:26:27,059
data in the cloud because today many

00:26:25,970 --> 00:26:30,419
clouds are just

00:26:27,059 --> 00:26:32,039
well you install it once and then you

00:26:30,419 --> 00:26:34,669
need to lift with this image all the

00:26:32,039 --> 00:26:37,379
time but you can't restart this is

00:26:34,669 --> 00:26:40,529
Mission ISM you can really throw away

00:26:37,379 --> 00:26:43,230
the entire entire hood image just use a

00:26:40,529 --> 00:26:45,360
new one which is good cleanly from

00:26:43,230 --> 00:26:46,799
scratch using the build service because

00:26:45,360 --> 00:26:52,529
the build service itself but it's about

00:26:46,799 --> 00:26:55,789
service appliance and yeah uhit's a new

00:26:52,529 --> 00:26:59,509
version and hopefully everything is

00:26:55,789 --> 00:26:59,509
correct updated

00:27:01,740 --> 00:27:06,650
any questions so this is a kitten slide

00:27:07,130 --> 00:27:14,880
you don't have questions I will tell you

00:27:09,870 --> 00:27:17,690
what we play our do next but it's okay

00:27:14,880 --> 00:27:17,690
to have questions

00:27:22,650 --> 00:27:26,690
ok

00:27:24,679 --> 00:27:35,720
didn't you expect something else some

00:27:26,690 --> 00:27:42,499
other talk always a bit confused if

00:27:35,720 --> 00:27:51,350
there are no questions okay what what we

00:27:42,499 --> 00:27:53,059
will do this year as I said we get the

00:27:51,350 --> 00:27:56,169
second scheduler backend which hopefully

00:27:53,059 --> 00:28:03,499
makes a good service more responsive

00:27:56,169 --> 00:28:06,610
especially the scheduling x micro

00:28:03,499 --> 00:28:09,169
schroeder is already working on its

00:28:06,610 --> 00:28:12,350
supporting zayas more transparent binary

00:28:09,169 --> 00:28:14,389
handling that that are all the Flex was

00:28:12,350 --> 00:28:18,590
publishing and used for built and so on

00:28:14,389 --> 00:28:20,779
if you have tried them that goes back to

00:28:18,590 --> 00:28:23,119
some design decisions we made in the

00:28:20,779 --> 00:28:27,950
beginning on how these doors binaries

00:28:23,119 --> 00:28:29,919
and how he updates them and there are

00:28:27,950 --> 00:28:32,659
there are some problems and he basically

00:28:29,919 --> 00:28:34,669
is currently implementing a new method

00:28:32,659 --> 00:28:36,559
how to store these binaries to be more

00:28:34,669 --> 00:28:40,669
flexible and more transparent when a

00:28:36,559 --> 00:28:42,169
package will be used and we're not then

00:28:40,669 --> 00:28:44,690
we have already some release management

00:28:42,169 --> 00:28:48,529
features so that's good for people who

00:28:44,690 --> 00:28:51,379
want to build packages first in one

00:28:48,529 --> 00:28:54,350
project or in one repository test it

00:28:51,379 --> 00:28:57,799
there and if it's if it's fine if it's

00:28:54,350 --> 00:29:01,179
good then it's possible in our to Belize

00:28:57,799 --> 00:29:04,249
sources and binaries with a command to

00:29:01,179 --> 00:29:07,970
another project and repository if it's

00:29:04,249 --> 00:29:09,320
out rebuilding it so it's it's actually

00:29:07,970 --> 00:29:14,960
a side effect from the maintenance

00:29:09,320 --> 00:29:19,039
features we did yeah and there's an API

00:29:14,960 --> 00:29:22,190
call now for executing this the moody's

00:29:19,039 --> 00:29:26,259
backfire support means if you have a

00:29:22,190 --> 00:29:29,059
source package source where multiple

00:29:26,259 --> 00:29:32,509
spec fights are inside because you

00:29:29,059 --> 00:29:35,779
compile this tar boil once this one

00:29:32,509 --> 00:29:37,730
compiler option and another time listen

00:29:35,779 --> 00:29:38,330
oh there's a different one so you have

00:29:37,730 --> 00:29:40,120
different

00:29:38,330 --> 00:29:42,740
Davis based on the same tarball

00:29:40,120 --> 00:29:49,460
currently this is also possible but you

00:29:42,740 --> 00:29:51,409
need to make package links to said oil

00:29:49,460 --> 00:29:56,179
builds are running and people have a

00:29:51,409 --> 00:29:59,450
flag that as you automatically can say

00:29:56,179 --> 00:30:02,299
just build everything all this and then

00:29:59,450 --> 00:30:07,460
all these linked packages go away which

00:30:02,299 --> 00:30:14,269
can cause some problems there's also a

00:30:07,460 --> 00:30:15,919
better TV image build integration it's

00:30:14,269 --> 00:30:19,340
half implemented currently what's

00:30:15,919 --> 00:30:24,350
possible now is that you can say in the

00:30:19,340 --> 00:30:28,360
keavy fire or other way around currently

00:30:24,350 --> 00:30:31,760
you have the problems that you define

00:30:28,360 --> 00:30:34,570
for keavy images the positives you want

00:30:31,760 --> 00:30:37,850
to use not only in the project but also

00:30:34,570 --> 00:30:41,779
in the keavy fire and that is fine

00:30:37,850 --> 00:30:46,100
because you can say okay I want to build

00:30:41,779 --> 00:30:49,070
this image using opensuse turf not three

00:30:46,100 --> 00:30:52,100
but my built result should be 12 dot too

00:30:49,070 --> 00:30:56,360
so it's good but the problem is when you

00:30:52,100 --> 00:30:59,240
have then you have also such a staging

00:30:56,360 --> 00:31:00,950
project where you test your new packages

00:30:59,240 --> 00:31:03,860
your development packages you want or

00:31:00,950 --> 00:31:06,200
I've also a test appliance and then you

00:31:03,860 --> 00:31:08,659
then make changes to the appliance and

00:31:06,200 --> 00:31:11,570
want to submit this TV file from project

00:31:08,659 --> 00:31:15,230
a to project be you would need to modify

00:31:11,570 --> 00:31:19,130
each time the repository list because in

00:31:15,230 --> 00:31:20,960
one case you want to include the

00:31:19,130 --> 00:31:25,039
development repository into India does

00:31:20,960 --> 00:31:27,470
not and this is support which is X which

00:31:25,039 --> 00:31:31,250
does exist in the git tree already is

00:31:27,470 --> 00:31:34,279
you can say just use the compositor ESS

00:31:31,250 --> 00:31:36,169
they are defined in the project so then

00:31:34,279 --> 00:31:40,159
you have always the same host and target

00:31:36,169 --> 00:31:42,169
project gas system but it just follows

00:31:40,159 --> 00:31:44,299
then the definition in the project and

00:31:42,169 --> 00:31:46,070
you can just submit to your TV fights or

00:31:44,299 --> 00:31:50,049
copy your cue files around in the pizza

00:31:46,070 --> 00:31:50,049
without taking care

00:31:50,630 --> 00:31:59,610
to modify to modify it and the last

00:31:55,710 --> 00:32:04,770
thing is most likely not so interesting

00:31:59,610 --> 00:32:07,230
for opensuse product and package

00:32:04,770 --> 00:32:10,950
tracking means that the boot surface

00:32:07,230 --> 00:32:16,980
will be i get a database that it really

00:32:10,950 --> 00:32:19,410
knows when a binary package but added to

00:32:16,980 --> 00:32:21,510
which product and when it got shipped to

00:32:19,410 --> 00:32:23,250
which customer this is something that we

00:32:21,510 --> 00:32:25,620
need in first place for our internal

00:32:23,250 --> 00:32:27,300
instance of course we build it

00:32:25,620 --> 00:32:31,020
implemented in the build server so it

00:32:27,300 --> 00:32:33,180
will be open sourced but yeah i'm not i

00:32:31,020 --> 00:32:41,820
think no one else up beside us will use

00:32:33,180 --> 00:32:45,510
it but i get surprised sometimes okay i

00:32:41,820 --> 00:32:48,660
have no slides about jobs as user i hope

00:32:45,510 --> 00:32:52,700
you are not surprised but not not

00:32:48,660 --> 00:32:55,800
disappoint but yeah these two just

00:32:52,700 --> 00:33:04,320
didn't edit it so but there's this job

00:32:55,800 --> 00:33:08,670
so of course any other questions any

00:33:04,320 --> 00:33:17,310
problems which stop you from using the

00:33:08,670 --> 00:33:22,950
build service you're just hungry or I

00:33:17,310 --> 00:33:25,440
don't speak clearly enough no questions

00:33:22,950 --> 00:33:28,220
okay then we have support problem solved

00:33:25,440 --> 00:33:28,220

YouTube URL: https://www.youtube.com/watch?v=jFrqHgk2258


