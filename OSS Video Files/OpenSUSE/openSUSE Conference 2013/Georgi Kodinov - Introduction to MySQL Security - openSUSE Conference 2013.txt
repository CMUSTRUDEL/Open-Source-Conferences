Title: Georgi Kodinov - Introduction to MySQL Security - openSUSE Conference 2013
Publication date: 2013-07-22
Playlist: openSUSE Conference 2013
Description: 
	What's new in 5.6

We'll go over the MySQL security model. How to get started with the MySQL security features. Rationale and walk through the authentication process. Steps to increase security of your installations. Security Dos and Don'ts. How to use plugins to extend authentication options. Overview of the new security features in MySQL 5.6.
Captions: 
	00:00:00,000 --> 00:00:08,460
ah okay hello do you hear me like that

00:00:05,930 --> 00:00:13,349
everybody even the gentleman on the back

00:00:08,460 --> 00:00:18,300
great okay so my name is gurgi covino I

00:00:13,349 --> 00:00:28,820
am working for the for the my in the

00:00:18,300 --> 00:00:28,820
Moscow server team hello welcome welcome

00:00:28,970 --> 00:00:37,260
ok so I've been working with my scale

00:00:32,969 --> 00:00:40,920
since 2006 so I remember the times where

00:00:37,260 --> 00:00:46,500
it's well was this little Swedish

00:00:40,920 --> 00:00:49,739
company that will started it all so it's

00:00:46,500 --> 00:00:52,530
been an interesting ride system but well

00:00:49,739 --> 00:00:55,020
I ended up from an ordinary developer

00:00:52,530 --> 00:00:58,649
being a team lead to one of the mysql

00:00:55,020 --> 00:01:03,930
server developer teams that's the server

00:00:58,649 --> 00:01:05,700
general team so what we do is we take

00:01:03,930 --> 00:01:09,119
care of monitoring performance

00:01:05,700 --> 00:01:12,720
monitoring in mysql mysql security and

00:01:09,119 --> 00:01:15,960
the client-server protocol and the

00:01:12,720 --> 00:01:21,799
client library that we ship the sea

00:01:15,960 --> 00:01:25,950
client library that's lit mysql ok so

00:01:21,799 --> 00:01:28,619
well that's the normal slide we'll be

00:01:25,950 --> 00:01:31,829
talking today about one of my favorite

00:01:28,619 --> 00:01:38,189
topics that's security in general and

00:01:31,829 --> 00:01:41,250
mysql security is specific well so my

00:01:38,189 --> 00:01:43,829
scalp is traditionally considered as

00:01:41,250 --> 00:01:48,180
being not really secure I mean I've seen

00:01:43,829 --> 00:01:53,340
enterprise guys that would ask questions

00:01:48,180 --> 00:01:56,600
like okay isn't a scale just a toy but I

00:01:53,340 --> 00:02:00,390
think it might be Oh guess enough

00:01:56,600 --> 00:02:02,820
features especially with with additional

00:02:00,390 --> 00:02:06,780
Enterprise modules that we are creating

00:02:02,820 --> 00:02:11,030
for it too well take its place in the

00:02:06,780 --> 00:02:15,080
enterprise and serve your users

00:02:11,030 --> 00:02:17,780
well and cover their security needs now

00:02:15,080 --> 00:02:19,670
of course it's not a sitting target that

00:02:17,780 --> 00:02:23,120
we are constantly developing that part

00:02:19,670 --> 00:02:29,989
of my SQL so we will also cover what is

00:02:23,120 --> 00:02:34,850
their new in our latest GA version okay

00:02:29,989 --> 00:02:40,120
so MySQL security now we'll start with

00:02:34,850 --> 00:02:45,650
the with the logical model of it so on a

00:02:40,120 --> 00:02:48,050
logical level Moscow has obviously user

00:02:45,650 --> 00:02:51,050
accounts and it's important to remember

00:02:48,050 --> 00:02:53,930
that those user accounts are actually

00:02:51,050 --> 00:02:57,980
consisting of two parts those of you are

00:02:53,930 --> 00:03:00,170
familiar with other databases probably

00:02:57,980 --> 00:03:02,780
expect that the usernames are just a

00:03:00,170 --> 00:03:05,060
single name but that's not the case in

00:03:02,780 --> 00:03:09,440
MySQL they always come in couples it's

00:03:05,060 --> 00:03:15,560
the username and the hostname so the

00:03:09,440 --> 00:03:17,900
thing is not working okay so you need to

00:03:15,560 --> 00:03:20,060
be really careful because all your

00:03:17,900 --> 00:03:22,100
permissions that are granted to to your

00:03:20,060 --> 00:03:25,840
user accounts will always be granted to

00:03:22,100 --> 00:03:28,610
a combination of a host in a username so

00:03:25,840 --> 00:03:31,790
that is a source of really nasty

00:03:28,610 --> 00:03:33,709
surprises for for the database

00:03:31,790 --> 00:03:38,170
administrators because because they

00:03:33,709 --> 00:03:42,350
would say okay I granted access to user

00:03:38,170 --> 00:03:45,260
to user fool but user full logging king

00:03:42,350 --> 00:03:47,570
does not get those permissions and

00:03:45,260 --> 00:03:51,799
that's because probably because they've

00:03:47,570 --> 00:03:54,320
granted it as the user full logging in

00:03:51,799 --> 00:03:57,950
from the wrong host or well they are not

00:03:54,320 --> 00:04:01,700
covering the host that that this user is

00:03:57,950 --> 00:04:05,390
logging from of course we have wild

00:04:01,700 --> 00:04:08,480
cards in host names so it is possible to

00:04:05,390 --> 00:04:13,340
grant permissions to user fool no matter

00:04:08,480 --> 00:04:15,470
where he is logging in from but you need

00:04:13,340 --> 00:04:18,320
to be careful with that and grant your

00:04:15,470 --> 00:04:21,669
permissions properly to to all the host

00:04:18,320 --> 00:04:24,770
names that you plan to grant them on so

00:04:21,669 --> 00:04:25,260
another thing about host names is that

00:04:24,770 --> 00:04:28,560
they can

00:04:25,260 --> 00:04:32,670
also be IP addresses and they can also

00:04:28,560 --> 00:04:37,230
be masks net-net masks so you can for

00:04:32,670 --> 00:04:40,560
example grants permission to your local

00:04:37,230 --> 00:04:45,080
network users that differ from from your

00:04:40,560 --> 00:04:45,080
well remote network users for example

00:04:45,200 --> 00:04:51,720
the other interesting part about the

00:04:48,750 --> 00:04:55,260
user accounts in mysql is that since

00:04:51,720 --> 00:04:59,190
mask you 55 all the user accounts are

00:04:55,260 --> 00:05:02,700
actually perform their authentication

00:04:59,190 --> 00:05:04,620
through plugins so of course we have

00:05:02,700 --> 00:05:06,480
internal plugins and we have external

00:05:04,620 --> 00:05:08,640
plugins the internal plugins are

00:05:06,480 --> 00:05:12,860
compiled into the mask a server code

00:05:08,640 --> 00:05:16,290
itself but there's two plugins so

00:05:12,860 --> 00:05:18,470
basically the server does not really

00:05:16,290 --> 00:05:21,870
know how to authenticate the user

00:05:18,470 --> 00:05:24,990
without the help of one such plugin so

00:05:21,870 --> 00:05:28,830
you need to be aware of the plugins that

00:05:24,990 --> 00:05:32,060
your server uses your or call them

00:05:28,830 --> 00:05:35,100
authentication methods if you like and

00:05:32,060 --> 00:05:38,070
make sure that you are picking the right

00:05:35,100 --> 00:05:42,210
one and the one that is most suited for

00:05:38,070 --> 00:05:44,490
your needs we in MySQL provide of course

00:05:42,210 --> 00:05:47,130
the traditional authentication plugin

00:05:44,490 --> 00:05:50,280
that reads the mask user table and 12

00:05:47,130 --> 00:05:53,670
grants access based on that but there's

00:05:50,280 --> 00:05:56,880
also others so if you want to plug into

00:05:53,670 --> 00:05:59,220
your pump set up or if you want to plug

00:05:56,880 --> 00:06:04,200
into your LDAP set up you can now do

00:05:59,220 --> 00:06:07,410
that through those plugins okay so the

00:06:04,200 --> 00:06:10,230
other important aspect is that there are

00:06:07,410 --> 00:06:18,260
no passwords stored into the mask user

00:06:10,230 --> 00:06:22,200
tables we always store hashes so it is

00:06:18,260 --> 00:06:26,820
relatively safer to basically lose your

00:06:22,200 --> 00:06:31,250
mysql user table because this only cash

00:06:26,820 --> 00:06:34,800
is there so one can't really restore the

00:06:31,250 --> 00:06:36,510
the passwords out of that of course it

00:06:34,800 --> 00:06:39,190
all depends on your authentication

00:06:36,510 --> 00:06:41,380
method if you are using your own plugin

00:06:39,190 --> 00:06:43,900
then it will be different but the

00:06:41,380 --> 00:06:48,340
defaults plugins that we supply that's

00:06:43,900 --> 00:06:50,980
what they do okay so another interesting

00:06:48,340 --> 00:06:53,350
part that sets maskell apart from all

00:06:50,980 --> 00:06:55,540
the other databases is that you don't

00:06:53,350 --> 00:06:58,150
actually need to create user accounts

00:06:55,540 --> 00:07:02,530
the grant statements can create those

00:06:58,150 --> 00:07:04,680
for you so if you grant something to to

00:07:02,530 --> 00:07:09,790
some user account that you've misspelled

00:07:04,680 --> 00:07:13,330
it will be created so be careful with

00:07:09,790 --> 00:07:16,120
that you may end up well with surprises

00:07:13,330 --> 00:07:19,660
in your mysql user table like that if

00:07:16,120 --> 00:07:25,480
you well just do grant comments to to

00:07:19,660 --> 00:07:28,600
users that don't exist of course there's

00:07:25,480 --> 00:07:32,890
the normal create user comments which I

00:07:28,600 --> 00:07:34,870
highly recommend using because it well

00:07:32,890 --> 00:07:36,910
has additional options over the grant

00:07:34,870 --> 00:07:40,960
syntax but still that's there for

00:07:36,910 --> 00:07:44,440
backward compatibility reasons okay

00:07:40,960 --> 00:07:47,050
another important topic is that ssl is a

00:07:44,440 --> 00:07:52,919
separate layer in the mask yo protocol

00:07:47,050 --> 00:07:56,490
so what goes over the wire is can be

00:07:52,919 --> 00:07:58,810
super siddity or wrapped in an ssl

00:07:56,490 --> 00:08:01,750
context and that's agnostic of the

00:07:58,810 --> 00:08:03,940
logical mask your protocol so all

00:08:01,750 --> 00:08:08,230
connections to the mask you server they

00:08:03,940 --> 00:08:11,770
started as an unencrypted connection and

00:08:08,230 --> 00:08:15,510
then later on based on the capabilities

00:08:11,770 --> 00:08:18,430
of the server and the client when such

00:08:15,510 --> 00:08:22,690
encrypted connection can be established

00:08:18,430 --> 00:08:24,970
later there are there are ways to check

00:08:22,690 --> 00:08:28,660
if your connection is encrypted and

00:08:24,970 --> 00:08:33,010
there is a way to ensure that your

00:08:28,660 --> 00:08:34,870
connection is encrypted like if it's not

00:08:33,010 --> 00:08:37,210
then it would just disconnect that

00:08:34,870 --> 00:08:43,810
particular users but we'll come to that

00:08:37,210 --> 00:08:47,290
later okay so speaking about ssl the

00:08:43,810 --> 00:08:51,010
MySQL client and server combination

00:08:47,290 --> 00:08:52,600
covers most of the SSL I couldn't trust

00:08:51,010 --> 00:08:57,519
levels but well

00:08:52,600 --> 00:09:01,810
the proper word is probably verification

00:08:57,519 --> 00:09:04,029
levels I don't know so it all starts

00:09:01,810 --> 00:09:06,130
with an unencrypted connection where

00:09:04,029 --> 00:09:10,720
when both the client and the server are

00:09:06,130 --> 00:09:13,180
not really prepared to do as a cell so

00:09:10,720 --> 00:09:15,459
that's when you don't get encryption you

00:09:13,180 --> 00:09:18,519
don't get your keys checked neither on

00:09:15,459 --> 00:09:21,970
the client nor on the server side then

00:09:18,519 --> 00:09:28,089
if you supply a key a key pair to the

00:09:21,970 --> 00:09:31,540
server there's options for that then the

00:09:28,089 --> 00:09:34,889
server will be able establishing SSL

00:09:31,540 --> 00:09:40,889
connections and handling SSL connections

00:09:34,889 --> 00:09:43,089
you will also eventually need

00:09:40,889 --> 00:09:46,120
certification Authority file on the

00:09:43,089 --> 00:09:51,000
client just to check your server

00:09:46,120 --> 00:09:53,889
certificates that's optional and that

00:09:51,000 --> 00:09:57,130
well but it's a good idea to have it if

00:09:53,889 --> 00:09:59,319
somebody is doing this man in the middle

00:09:57,130 --> 00:10:03,459
attack to your SSL connections that's

00:09:59,319 --> 00:10:06,610
the way to stop it so whenever you

00:10:03,459 --> 00:10:10,120
supply a key pair to your servers please

00:10:06,610 --> 00:10:11,649
try to use certification authorities of

00:10:10,120 --> 00:10:13,540
your clients just to check the

00:10:11,649 --> 00:10:16,959
certificate otherwise it's just an

00:10:13,540 --> 00:10:19,870
encryption and not really preventing

00:10:16,959 --> 00:10:26,490
man-in-the-middle attacks so be careful

00:10:19,870 --> 00:10:29,560
with that okay so of course if you force

00:10:26,490 --> 00:10:31,930
your connection to be SSL just I might

00:10:29,560 --> 00:10:36,189
just like I mentioned a few minutes ago

00:10:31,930 --> 00:10:40,180
that's done true require the required

00:10:36,189 --> 00:10:42,610
per parts or optional elements of the

00:10:40,180 --> 00:10:44,920
create user command so you can say for

00:10:42,610 --> 00:10:47,949
your user accounts i want this user to

00:10:44,920 --> 00:10:50,110
connect in no other way but encrypted

00:10:47,949 --> 00:10:55,569
through an encrypted connection and that

00:10:50,110 --> 00:11:01,660
you say by saying require whatever some

00:10:55,569 --> 00:11:05,329
parts of the ssl x509certificate so then

00:11:01,660 --> 00:11:10,579
you get on top of that you get

00:11:05,329 --> 00:11:13,529
uninsured encryption of your connection

00:11:10,579 --> 00:11:16,019
so that's the benefit of doing that of

00:11:13,529 --> 00:11:19,230
course if you can also go further and

00:11:16,019 --> 00:11:21,660
check your certificates now you do that

00:11:19,230 --> 00:11:24,660
by requiring subject so each certificate

00:11:21,660 --> 00:11:28,709
to from issued from people that you

00:11:24,660 --> 00:11:31,019
trust will have a subject that you

00:11:28,709 --> 00:11:33,629
should recognize and when you recognize

00:11:31,019 --> 00:11:36,000
that basically it means that this

00:11:33,629 --> 00:11:39,329
certificate is valid for for the purpose

00:11:36,000 --> 00:11:41,759
of logging hidden to mysql and that

00:11:39,329 --> 00:11:44,189
gives you an additional benefit that the

00:11:41,759 --> 00:11:47,250
cry that the server would know who the

00:11:44,189 --> 00:11:49,620
client is and has ways to verify that

00:11:47,250 --> 00:11:53,009
based on the trust levels in the

00:11:49,620 --> 00:11:56,220
certificates and of course the last

00:11:53,009 --> 00:11:59,699
level that is the strongest level is

00:11:56,220 --> 00:12:02,790
that you specify this additional

00:11:59,699 --> 00:12:05,399
argument verify server certificate there

00:12:02,790 --> 00:12:09,089
is an option for that on the client that

00:12:05,399 --> 00:12:13,589
will also validate your server server

00:12:09,089 --> 00:12:17,790
keeper okay so lot of options and be

00:12:13,589 --> 00:12:21,810
careful SSL is well not really trivial

00:12:17,790 --> 00:12:26,699
to set up it's a bit complicated so you

00:12:21,810 --> 00:12:32,790
need to be careful there okay so plugins

00:12:26,699 --> 00:12:36,060
how how do we work with plugins mysql is

00:12:32,790 --> 00:12:38,100
built with the assumption that there is

00:12:36,060 --> 00:12:41,279
this core that provides the basic

00:12:38,100 --> 00:12:43,829
functionality and it can it relies on

00:12:41,279 --> 00:12:48,509
plugins to do some specific stuff for it

00:12:43,829 --> 00:12:51,029
so for example one such plugin is the

00:12:48,509 --> 00:12:53,550
storage engine it's a way to greet and

00:12:51,029 --> 00:12:55,680
write your data from this and that is

00:12:53,550 --> 00:12:58,079
something that mask you obstructs out

00:12:55,680 --> 00:13:00,720
and that's what it is doing with

00:12:58,079 --> 00:13:04,910
authentication since maski of 55 so

00:13:00,720 --> 00:13:07,910
that's that's a real change in the

00:13:04,910 --> 00:13:11,129
authentication protocol compared to 51

00:13:07,910 --> 00:13:14,939
basically it is extendable now and it's

00:13:11,129 --> 00:13:17,910
not fixed as it used to be in 51 so if

00:13:14,939 --> 00:13:18,380
you have your own clients that implement

00:13:17,910 --> 00:13:21,740
the mask

00:13:18,380 --> 00:13:24,980
a server protocol they may need to to

00:13:21,740 --> 00:13:29,870
evolve to fully support 55 and all

00:13:24,980 --> 00:13:32,690
unknown words because well obviously

00:13:29,870 --> 00:13:34,580
each authentication exchange can be

00:13:32,690 --> 00:13:38,450
different depending on how the server

00:13:34,580 --> 00:13:41,120
plugin is defined for that user and

00:13:38,450 --> 00:13:45,140
that's a problem for some other clients

00:13:41,120 --> 00:13:47,480
we need my SQL we try to bundle some of

00:13:45,140 --> 00:13:49,540
the plugins because they come in pairs

00:13:47,480 --> 00:13:52,220
that's the important part of it

00:13:49,540 --> 00:13:54,740
basically the North the server neither

00:13:52,220 --> 00:13:57,320
the server not the client knows how to

00:13:54,740 --> 00:13:59,900
authenticate what they do is they know

00:13:57,320 --> 00:14:03,890
which plugin to use to authenticate and

00:13:59,900 --> 00:14:06,110
the pair of plugins takes the takes over

00:14:03,890 --> 00:14:09,680
the network connection and can agree by

00:14:06,110 --> 00:14:12,830
themselves to whether this user should

00:14:09,680 --> 00:14:15,770
authenticate or not so that makes it

00:14:12,830 --> 00:14:18,710
similar to pump which basically works

00:14:15,770 --> 00:14:22,310
like that it asks questions and receives

00:14:18,710 --> 00:14:24,470
answers and really really flexible

00:14:22,310 --> 00:14:26,060
because well it can that can be an

00:14:24,470 --> 00:14:28,640
arbitrary exchange that can be a

00:14:26,060 --> 00:14:31,160
third-party trusted third-party exchange

00:14:28,640 --> 00:14:34,280
and so on so a lot of possibilities

00:14:31,160 --> 00:14:38,570
there's with with the authentication

00:14:34,280 --> 00:14:41,780
plugins okay so it's the server that

00:14:38,570 --> 00:14:44,270
picks the right pair because if I'm a

00:14:41,780 --> 00:14:46,070
rock client I can go to the server and

00:14:44,270 --> 00:14:48,200
say okay I want to authenticate using

00:14:46,070 --> 00:14:50,990
this authentication method and that's

00:14:48,200 --> 00:14:53,120
all I can do and if the server accepts

00:14:50,990 --> 00:14:55,820
that and this authentication method is

00:14:53,120 --> 00:14:59,030
float then basically i would have hacked

00:14:55,820 --> 00:15:02,300
the server so that's why the server

00:14:59,030 --> 00:15:05,210
needs to know the plugin that each user

00:15:02,300 --> 00:15:07,610
should use to authenticate and the

00:15:05,210 --> 00:15:09,800
client can only provide that

00:15:07,610 --> 00:15:15,170
authentication exchange or both

00:15:09,800 --> 00:15:17,980
disconnect of course so you need to be

00:15:15,170 --> 00:15:20,270
careful with other clients when you

00:15:17,980 --> 00:15:23,180
experiment with one of the newer

00:15:20,270 --> 00:15:27,400
authentication methods and double-check

00:15:23,180 --> 00:15:31,490
the dose other clients they supported so

00:15:27,400 --> 00:15:31,730
the default that the default in 55 the

00:15:31,490 --> 00:15:36,529
diff

00:15:31,730 --> 00:15:40,430
plugin is whatever it used to be in 51

00:15:36,529 --> 00:15:43,070
so it is backward compatible but in 56

00:15:40,430 --> 00:15:45,860
we have a new and better authentication

00:15:43,070 --> 00:15:48,190
method so basically we are using our own

00:15:45,860 --> 00:15:52,060
infrastructure to introduce better

00:15:48,190 --> 00:15:55,550
authentication like that without well

00:15:52,060 --> 00:16:00,199
irreversibly changing the mask your

00:15:55,550 --> 00:16:03,380
protocol okay so one other important

00:16:00,199 --> 00:16:07,639
part is if you have a lot of users and

00:16:03,380 --> 00:16:11,860
you need to manage those users in in

00:16:07,639 --> 00:16:14,540
groups like for example you want to be

00:16:11,860 --> 00:16:20,209
handling your users in an LDAP directory

00:16:14,540 --> 00:16:22,540
and define your log is there and not

00:16:20,209 --> 00:16:25,730
even deal with the mask your server

00:16:22,540 --> 00:16:28,550
definitions then you can do that through

00:16:25,730 --> 00:16:30,860
plugins because they can go and check

00:16:28,550 --> 00:16:32,660
this external directory but the

00:16:30,860 --> 00:16:35,120
interesting part is that they can also

00:16:32,660 --> 00:16:38,569
return a username which is different

00:16:35,120 --> 00:16:41,000
from the one that locks in I have some

00:16:38,569 --> 00:16:44,420
pictures to show you later but well just

00:16:41,000 --> 00:16:52,699
some something for you to consider oops

00:16:44,420 --> 00:16:55,550
sorry wrong button okay so another part

00:16:52,699 --> 00:16:57,949
that is unique to the MySQL securities

00:16:55,550 --> 00:17:00,560
the notion of the locked in and the

00:16:57,949 --> 00:17:04,669
current user IDs and how are they

00:17:00,560 --> 00:17:07,669
different okay so with traditional

00:17:04,669 --> 00:17:10,480
servers basically you supply a login

00:17:07,669 --> 00:17:13,669
name and you get your authentication

00:17:10,480 --> 00:17:16,220
success or failure assuming that you get

00:17:13,669 --> 00:17:19,939
a success then your log logged in name

00:17:16,220 --> 00:17:26,959
becomes your well your name that you are

00:17:19,939 --> 00:17:29,660
known to the system by so basically if

00:17:26,959 --> 00:17:33,320
you log in as joe you will be Joe for

00:17:29,660 --> 00:17:36,919
the duration of your SQL session connect

00:17:33,320 --> 00:17:39,710
a client session that is a bit different

00:17:36,919 --> 00:17:42,409
in MySQL because of these two part names

00:17:39,710 --> 00:17:45,470
that we have so for example if you log

00:17:42,409 --> 00:17:49,340
in as joe from localhost

00:17:45,470 --> 00:17:52,490
you will be you may end up finding the

00:17:49,340 --> 00:17:55,400
finding that the row in my SQL user

00:17:52,490 --> 00:17:58,039
table that corresponds to Joe from all

00:17:55,400 --> 00:18:01,100
hosts so there is an immediate

00:17:58,039 --> 00:18:03,289
distinction you log in as joe from

00:18:01,100 --> 00:18:08,120
localhost but you end up using the

00:18:03,289 --> 00:18:14,240
privileges of joe from all hosts from

00:18:08,120 --> 00:18:16,130
all costs so that's the difference

00:18:14,240 --> 00:18:18,710
between the locked in and the current

00:18:16,130 --> 00:18:20,539
user the current user is the set of

00:18:18,710 --> 00:18:23,450
authentication permission that your

00:18:20,539 --> 00:18:25,370
session is using whereas the logged in

00:18:23,450 --> 00:18:29,929
user is the login name that you've

00:18:25,370 --> 00:18:33,140
supplied when you locked in ok so that's

00:18:29,929 --> 00:18:36,289
how it works there there is a picture so

00:18:33,140 --> 00:18:45,039
basically Joe locks in and then he ends

00:18:36,289 --> 00:18:50,390
up using the wild cards permission

00:18:45,039 --> 00:18:54,140
definition everybody at data entry so

00:18:50,390 --> 00:18:57,409
basically job gets to use that set of

00:18:54,140 --> 00:19:02,140
permissions and of course my SQL

00:18:57,409 --> 00:19:07,520
provides SQL functions to read those two

00:19:02,140 --> 00:19:10,220
user IDs so be careful which one to use

00:19:07,520 --> 00:19:12,799
in your applications and always use the

00:19:10,220 --> 00:19:14,780
right one because there can be a

00:19:12,799 --> 00:19:19,130
difference between user and a current

00:19:14,780 --> 00:19:25,460
user ok it gets even more complicated

00:19:19,130 --> 00:19:28,820
than that so the authentication plugins

00:19:25,460 --> 00:19:31,400
at the notion of proxy users a proxy

00:19:28,820 --> 00:19:34,909
user is really convenient when you want

00:19:31,400 --> 00:19:38,720
to manipulate your users in by their

00:19:34,909 --> 00:19:41,210
roles practically basically you want to

00:19:38,720 --> 00:19:43,840
be in your application when you are

00:19:41,210 --> 00:19:46,610
writing it you want to be granting

00:19:43,840 --> 00:19:50,539
individual permissions not to every

00:19:46,610 --> 00:19:52,820
accountant in your organization but to

00:19:50,539 --> 00:19:54,980
accountants in general and then when you

00:19:52,820 --> 00:19:57,470
hire a new accountant you just want to

00:19:54,980 --> 00:19:58,160
say ok this guy here that I've hired

00:19:57,470 --> 00:20:00,920
this

00:19:58,160 --> 00:20:04,610
accountant and that will automatically

00:20:00,920 --> 00:20:07,580
grant this person the access rights so

00:20:04,610 --> 00:20:11,570
that's what proxy users are for in your

00:20:07,580 --> 00:20:15,860
application so again Joe connects to the

00:20:11,570 --> 00:20:20,210
server that's how it all starts and he

00:20:15,860 --> 00:20:24,200
gets to find his set of permissions

00:20:20,210 --> 00:20:26,570
basically the wild-card the wild-card

00:20:24,200 --> 00:20:29,800
row in the mask yo user table that

00:20:26,570 --> 00:20:32,660
corresponds to his login ID and his host

00:20:29,800 --> 00:20:40,040
but the difference here is that the

00:20:32,660 --> 00:20:43,610
plug-in that the log in the the locket

00:20:40,040 --> 00:20:47,740
the login name uses is defined in such a

00:20:43,610 --> 00:20:51,470
way that it returns another name and

00:20:47,740 --> 00:20:55,790
that other name is clerks at data entry

00:20:51,470 --> 00:20:58,910
in this picture here so basically Joe

00:20:55,790 --> 00:21:02,350
ends up using all the privileges defined

00:20:58,910 --> 00:21:04,580
not to everybody a data entry but

00:21:02,350 --> 00:21:11,360
specifically for the clerks in data

00:21:04,580 --> 00:21:13,790
entry so that way you can grant your

00:21:11,360 --> 00:21:16,610
permissions in your application just to

00:21:13,790 --> 00:21:18,740
a few named users which are not really

00:21:16,610 --> 00:21:22,310
users they arose because you cannot

00:21:18,740 --> 00:21:27,470
login to them if you define your

00:21:22,310 --> 00:21:30,740
permissions right but so and then have

00:21:27,470 --> 00:21:33,650
an external directory handle the mapping

00:21:30,740 --> 00:21:37,120
between your login name and your group

00:21:33,650 --> 00:21:40,340
name in MySQL so in this way you can

00:21:37,120 --> 00:21:43,220
have all of your users in some external

00:21:40,340 --> 00:21:45,500
directory and map them from there and

00:21:43,220 --> 00:21:48,170
just define them and remove them all

00:21:45,500 --> 00:21:51,640
their login IDs from there like held up

00:21:48,170 --> 00:21:55,730
for example and of course we are

00:21:51,640 --> 00:21:59,180
providing ways for you to check all

00:21:55,730 --> 00:22:01,340
these names the new thing here in

00:21:59,180 --> 00:22:04,940
addition to user and current user which

00:22:01,340 --> 00:22:08,420
are well logical and they are they that

00:22:04,940 --> 00:22:11,380
we've seen in the previous slide there

00:22:08,420 --> 00:22:14,140
is this proxy user part here that's

00:22:11,380 --> 00:22:16,960
system variable so this system variable

00:22:14,140 --> 00:22:20,500
returns the proxy account that was used

00:22:16,960 --> 00:22:23,050
to authenticate Joe it is empty if no

00:22:20,500 --> 00:22:26,320
proxy ink was used but if there is

00:22:23,050 --> 00:22:31,960
proxying there was proxy you will get

00:22:26,320 --> 00:22:36,460
this system variable set okay so that's

00:22:31,960 --> 00:22:38,290
all 55 stuff it works in 55 but of

00:22:36,460 --> 00:22:43,060
course it works in all subsequent

00:22:38,290 --> 00:22:47,400
versions okay now that we covered the

00:22:43,060 --> 00:22:52,270
mask you'll specify the authentication

00:22:47,400 --> 00:22:54,190
and the logical privileges model that's

00:22:52,270 --> 00:22:56,680
the more traditional part I hope

00:22:54,190 --> 00:22:59,500
everybody's familiar with stuff like

00:22:56,680 --> 00:23:02,260
that I mean that's how you grant your

00:22:59,500 --> 00:23:05,350
access to your individual objects being

00:23:02,260 --> 00:23:08,680
on the server level well to all of your

00:23:05,350 --> 00:23:12,880
tables to a database to a specific table

00:23:08,680 --> 00:23:16,210
down to a column and of course there is

00:23:12,880 --> 00:23:19,540
also set of privileges for executing or

00:23:16,210 --> 00:23:23,590
changing stores routines and there is

00:23:19,540 --> 00:23:25,840
one in kind of specific mask a specific

00:23:23,590 --> 00:23:28,650
privilege that's the proxy privilege

00:23:25,840 --> 00:23:31,840
igri you granted to users so nobody can

00:23:28,650 --> 00:23:34,900
just create a proxy for you and start

00:23:31,840 --> 00:23:38,110
doing this external mapping without you

00:23:34,900 --> 00:23:40,420
as a mascot DBA enabling that for that

00:23:38,110 --> 00:23:43,090
account so there is this additional

00:23:40,420 --> 00:23:49,030
privilege check which is well done in a

00:23:43,090 --> 00:23:51,690
typical privilege check style okay so

00:23:49,030 --> 00:23:55,360
some notes about granting privileges

00:23:51,690 --> 00:23:57,460
again don't forget that you are granting

00:23:55,360 --> 00:24:02,140
privileges on the combination between a

00:23:57,460 --> 00:24:04,810
username and host name that is mostly

00:24:02,140 --> 00:24:07,360
what time ask your support is dealing

00:24:04,810 --> 00:24:10,690
with when people get confused about

00:24:07,360 --> 00:24:13,540
their privileges so be careful and

00:24:10,690 --> 00:24:16,570
remember that it is the combination not

00:24:13,540 --> 00:24:17,950
just the username it can be just the

00:24:16,570 --> 00:24:23,080
username but you need to make it

00:24:17,950 --> 00:24:25,230
explicitly that way okay so only the

00:24:23,080 --> 00:24:27,909
drop user comment is

00:24:25,230 --> 00:24:30,130
guaranteed to clean up all of your

00:24:27,909 --> 00:24:32,770
definitions if you just go and delete

00:24:30,130 --> 00:24:36,190
the row from the mask yo user table and

00:24:32,770 --> 00:24:38,260
then do flush privileges your grants

00:24:36,190 --> 00:24:40,870
will stay orphan in the rest of the

00:24:38,260 --> 00:24:44,080
system table and that will eventually

00:24:40,870 --> 00:24:46,480
lead to problems or well exploitations

00:24:44,080 --> 00:24:50,580
is if somebody creates a user with the

00:24:46,480 --> 00:24:54,370
same name so please use the SQL commands

00:24:50,580 --> 00:24:57,399
even if directly fiddling with the

00:24:54,370 --> 00:24:59,320
system table seems more convenient but

00:24:57,399 --> 00:25:01,450
well they are here for a reason so

00:24:59,320 --> 00:25:07,120
please consider using them in your

00:25:01,450 --> 00:25:09,100
applications also one interesting mysql

00:25:07,120 --> 00:25:11,200
specific bitties day that the insert

00:25:09,100 --> 00:25:13,720
privilege can be granted on a subset of

00:25:11,200 --> 00:25:16,179
columns if you don't want people

00:25:13,720 --> 00:25:18,820
inserting into certain columns in your

00:25:16,179 --> 00:25:21,340
table and you won't always to get the

00:25:18,820 --> 00:25:22,870
defaults there then that's the way to do

00:25:21,340 --> 00:25:26,760
it you just grant them in certain

00:25:22,870 --> 00:25:30,760
specific columns and then they only can

00:25:26,760 --> 00:25:32,919
call those columns when inserting okay

00:25:30,760 --> 00:25:34,929
so privileges are checked against

00:25:32,919 --> 00:25:38,950
whatever the current user returns and

00:25:34,929 --> 00:25:42,429
the user function is returning the login

00:25:38,950 --> 00:25:44,500
name and those are different so be sure

00:25:42,429 --> 00:25:50,169
to use the right function when you are

00:25:44,500 --> 00:25:55,779
checking what the current user is ok

00:25:50,169 --> 00:26:02,470
that covers the logical model any

00:25:55,779 --> 00:26:07,059
questions so far No ok so that now the

00:26:02,470 --> 00:26:12,940
physical model is a bit more now well

00:26:07,059 --> 00:26:15,580
not that I highly logical the physical

00:26:12,940 --> 00:26:18,250
model consists of the authentication

00:26:15,580 --> 00:26:20,380
table so that's where your the

00:26:18,250 --> 00:26:24,850
information needed to authenticate your

00:26:20,380 --> 00:26:29,279
users is stored it all starts with the

00:26:24,850 --> 00:26:32,350
mask user table but of course since

00:26:29,279 --> 00:26:35,200
there are plugins and the authentication

00:26:32,350 --> 00:26:36,850
process needs them I've listed here the

00:26:35,200 --> 00:26:39,520
plug-in table that's the mask your

00:26:36,850 --> 00:26:42,160
plug-in table so basically

00:26:39,520 --> 00:26:45,400
the combination of the two defines how

00:26:42,160 --> 00:26:49,360
your users will login it used to be only

00:26:45,400 --> 00:26:51,750
the mask a user table but since 55 it

00:26:49,360 --> 00:26:54,660
also relates to the plugins table so

00:26:51,750 --> 00:26:59,880
those are the two system tables that

00:26:54,660 --> 00:27:03,700
will define how your users connect and

00:26:59,880 --> 00:27:06,630
those are the authorization tables so

00:27:03,700 --> 00:27:09,640
that's where all the grants are start a

00:27:06,630 --> 00:27:12,340
user level grunts those are grants to

00:27:09,640 --> 00:27:15,130
every object in your database are stored

00:27:12,340 --> 00:27:18,060
in the mysql user table database level

00:27:15,130 --> 00:27:21,580
grants are starting to the mysql DB

00:27:18,060 --> 00:27:24,340
table level callum level procedure level

00:27:21,580 --> 00:27:28,120
and proxies so we have system tables for

00:27:24,340 --> 00:27:31,450
all this they all have well foreign key

00:27:28,120 --> 00:27:33,460
to to the user table so that's how you

00:27:31,450 --> 00:27:36,190
find them and the primary key of the

00:27:33,460 --> 00:27:40,360
user table is the username and the host

00:27:36,190 --> 00:27:42,160
name so that's how you build the logical

00:27:40,360 --> 00:27:45,460
model there if you need to read the

00:27:42,160 --> 00:27:48,040
system table of course system tables

00:27:45,460 --> 00:27:51,100
being what they are they are subject to

00:27:48,040 --> 00:27:54,490
change between versions they are subject

00:27:51,100 --> 00:27:59,410
to adding more system table so removing

00:27:54,490 --> 00:28:01,990
some or reorganizing some so well you

00:27:59,410 --> 00:28:04,900
have the information schema if you just

00:28:01,990 --> 00:28:08,650
need to read your easel your user

00:28:04,900 --> 00:28:12,520
definitions and there are the SQL

00:28:08,650 --> 00:28:16,120
comments if you want to change them so

00:28:12,520 --> 00:28:18,790
that's a combination that changes much

00:28:16,120 --> 00:28:22,210
less frequently than the the system

00:28:18,790 --> 00:28:25,180
tables be aware of that and try to use

00:28:22,210 --> 00:28:27,390
the thing that will carry your

00:28:25,180 --> 00:28:32,590
application through more versions

00:28:27,390 --> 00:28:35,910
compared to the alternative okay so one

00:28:32,590 --> 00:28:38,410
interesting part of how the

00:28:35,910 --> 00:28:42,520
authentication model works in in the

00:28:38,410 --> 00:28:44,560
mask US server so basically all the

00:28:42,520 --> 00:28:47,200
definitions of all the users and

00:28:44,560 --> 00:28:50,920
privileges are stored in the system

00:28:47,200 --> 00:28:53,270
memory they are read whenever the server

00:28:50,920 --> 00:28:56,750
starts and they are stored in

00:28:53,270 --> 00:29:01,520
in a cache in memory hash table or set

00:28:56,750 --> 00:29:04,370
of crashes so all the checks are done

00:29:01,520 --> 00:29:10,540
inside memory only we don't even go and

00:29:04,370 --> 00:29:14,860
treat the system tables so that's what

00:29:10,540 --> 00:29:18,830
happens when a user accesses the

00:29:14,860 --> 00:29:21,860
authentication data inside the memory it

00:29:18,830 --> 00:29:25,160
just reads from the server memory no no

00:29:21,860 --> 00:29:27,650
relation to tables whatsoever so now

00:29:25,160 --> 00:29:32,450
when the user wants to change something

00:29:27,650 --> 00:29:34,490
it's totally the opposite way it alters

00:29:32,450 --> 00:29:36,860
the user manipulation comments they

00:29:34,490 --> 00:29:39,860
first go into right into the sea into

00:29:36,860 --> 00:29:42,830
the tables on the disk and then what

00:29:39,860 --> 00:29:46,910
they do is reread or refresh the

00:29:42,830 --> 00:29:49,220
in-memory cache of course it's automatic

00:29:46,910 --> 00:29:50,990
with the user manipulation comment so

00:29:49,220 --> 00:29:53,510
you don't need to do that last part

00:29:50,990 --> 00:29:56,270
flush privileges but if you are

00:29:53,510 --> 00:29:58,550
manipulating your system tables you need

00:29:56,270 --> 00:30:01,460
to do for flush privileges that's the

00:29:58,550 --> 00:30:07,400
price you pay when you will manipulate

00:30:01,460 --> 00:30:12,050
directly the system tables okay so

00:30:07,400 --> 00:30:15,110
basically discovers the physical model

00:30:12,050 --> 00:30:18,080
of the authentication so what are we

00:30:15,110 --> 00:30:22,370
doing to extend all that in in our

00:30:18,080 --> 00:30:29,660
newest the GI release that's 56 it has

00:30:22,370 --> 00:30:34,490
been released well this year right this

00:30:29,660 --> 00:30:37,580
spring really so we are adding a new

00:30:34,490 --> 00:30:41,390
authentication method the authentication

00:30:37,580 --> 00:30:44,600
method that was being used in 55 as

00:30:41,390 --> 00:30:50,300
default has been with MySQL since mask

00:30:44,600 --> 00:30:55,070
yo for one and that well is probably ten

00:30:50,300 --> 00:31:01,940
years now so in 10 years a lot has

00:30:55,070 --> 00:31:05,210
happened into the well secure algorithms

00:31:01,940 --> 00:31:06,890
front and that's what we are trying to

00:31:05,210 --> 00:31:10,340
address here

00:31:06,890 --> 00:31:13,310
by using modern caching algorithms in

00:31:10,340 --> 00:31:17,750
instead of sha one which has known

00:31:13,310 --> 00:31:22,000
problems as of now so we are using this

00:31:17,750 --> 00:31:26,090
better and more secure hashing algorithm

00:31:22,000 --> 00:31:30,440
sha-256 that's much much better and well

00:31:26,090 --> 00:31:33,920
more robust and we hope it also makes

00:31:30,440 --> 00:31:37,940
use of mask yo can make use of hardware

00:31:33,920 --> 00:31:42,320
acceleration so if you are doing a lot

00:31:37,940 --> 00:31:44,540
of SSL stuff or a lot of caching and to

00:31:42,320 --> 00:31:49,400
user definitions and changing users and

00:31:44,540 --> 00:31:51,260
so on you can think about it helping to

00:31:49,400 --> 00:31:54,790
the server with some specialized

00:31:51,260 --> 00:31:57,500
hardware now we are using libraries

00:31:54,790 --> 00:32:00,290
encryption libraries industry standard

00:31:57,500 --> 00:32:04,630
encryption libraries so we can well reap

00:32:00,290 --> 00:32:04,630
all the benefits that they provide and

00:32:04,660 --> 00:32:12,320
we also make sure that the your

00:32:10,430 --> 00:32:15,290
passwords because this new

00:32:12,320 --> 00:32:22,010
authentication method it is transmitted

00:32:15,290 --> 00:32:24,500
right it is transmitting passwords over

00:32:22,010 --> 00:32:27,620
the network not just hashes as the old

00:32:24,500 --> 00:32:30,440
one does because well it needs to solve

00:32:27,620 --> 00:32:36,290
them with the session Cashin with the

00:32:30,440 --> 00:32:38,750
user hush so we use encryption for the

00:32:36,290 --> 00:32:41,360
channel and if there is no ssl

00:32:38,750 --> 00:32:43,520
encryption on the channel as we seen

00:32:41,360 --> 00:32:46,610
it's a separate layer before that we

00:32:43,520 --> 00:32:49,250
fall back to to using car SI quis to

00:32:46,610 --> 00:32:54,620
transmit your passwords so well that

00:32:49,250 --> 00:32:57,100
makes them secure again okay so that's a

00:32:54,620 --> 00:33:00,440
quick demonstration of how this new

00:32:57,100 --> 00:33:05,480
authentication mechanism works so the

00:33:00,440 --> 00:33:08,360
server is sending random random value to

00:33:05,480 --> 00:33:11,570
the client and the client uses that

00:33:08,360 --> 00:33:14,270
random value to encrypt the password

00:33:11,570 --> 00:33:16,850
together with that random value and send

00:33:14,270 --> 00:33:19,940
it over the wire so that's the technique

00:33:16,850 --> 00:33:21,639
is called salting and this

00:33:19,940 --> 00:33:25,940
guarantees that if you replay the

00:33:21,639 --> 00:33:27,649
session you will not it will not work so

00:33:25,940 --> 00:33:31,129
you cannot just record the session and

00:33:27,649 --> 00:33:34,129
replay it and get a login what the

00:33:31,129 --> 00:33:38,710
silver does then it reads from the

00:33:34,129 --> 00:33:38,710
system table in the password which is

00:33:38,830 --> 00:33:44,720
salted again with the user salt because

00:33:41,840 --> 00:33:47,330
in the traditional mysql authentication

00:33:44,720 --> 00:33:49,399
if to users have the same password they

00:33:47,330 --> 00:33:52,070
will end up with the same value in the

00:33:49,399 --> 00:33:54,559
mask UL user table for password and

00:33:52,070 --> 00:33:58,250
that's telling because if you have this

00:33:54,559 --> 00:34:02,480
well unprivileged account that happens

00:33:58,250 --> 00:34:04,610
too much the row of some DBA then you

00:34:02,480 --> 00:34:06,529
know the password of the DBA that's no

00:34:04,610 --> 00:34:09,319
longer true with the with the new

00:34:06,529 --> 00:34:12,490
authentication method because there is

00:34:09,319 --> 00:34:15,200
this user salt that we used to solve the

00:34:12,490 --> 00:34:17,450
values that we store in the system table

00:34:15,200 --> 00:34:19,879
so that's why we need the password

00:34:17,450 --> 00:34:21,740
because there's two souls now and we

00:34:19,879 --> 00:34:27,940
need the password to calculate the hush

00:34:21,740 --> 00:34:31,159
that we read from the system table ok so

00:34:27,940 --> 00:34:34,280
we eat those too much basically what the

00:34:31,159 --> 00:34:36,409
server does is calculates the the salted

00:34:34,280 --> 00:34:38,659
password hash and compares that to the

00:34:36,409 --> 00:34:42,679
one start in the user table and tip

00:34:38,659 --> 00:34:44,419
those too much then it's a success ok

00:34:42,679 --> 00:34:47,119
the other interesting part is that you

00:34:44,419 --> 00:34:50,960
can now force your users to change their

00:34:47,119 --> 00:34:53,450
passwords that's really as stupid as it

00:34:50,960 --> 00:34:55,250
is but mass qo wasn't providing that

00:34:53,450 --> 00:34:58,460
information so now we have this special

00:34:55,250 --> 00:35:01,160
flag for the user that you can say ok

00:34:58,460 --> 00:35:03,109
please make sure that those guys will

00:35:01,160 --> 00:35:08,869
change their password and the server

00:35:03,109 --> 00:35:11,359
will force them to do that ok so we also

00:35:08,869 --> 00:35:14,630
are adding counting on the password

00:35:11,359 --> 00:35:17,260
security the server will now know which

00:35:14,630 --> 00:35:21,440
password is strong and which isn't and

00:35:17,260 --> 00:35:24,109
we'll possibly even reject those based

00:35:21,440 --> 00:35:27,109
on a dictionary file it's all done in a

00:35:24,109 --> 00:35:29,329
plug-in again so if you don't like the

00:35:27,109 --> 00:35:31,069
the current policy that we implement

00:35:29,329 --> 00:35:33,830
with the plug-in you're free to write

00:35:31,069 --> 00:35:37,400
your own and that's easy

00:35:33,830 --> 00:35:41,120
as examples to that and we also provide

00:35:37,400 --> 00:35:43,610
help for the GUI clients if you want to

00:35:41,120 --> 00:35:45,680
display this nice password strength

00:35:43,610 --> 00:35:47,660
meter now there is a special function

00:35:45,680 --> 00:35:49,940
that will go to the current password

00:35:47,660 --> 00:35:53,540
policy and evaluate the strength of your

00:35:49,940 --> 00:35:55,460
password so really helpful there I've

00:35:53,540 --> 00:35:58,010
seen all kinds of interpretations of

00:35:55,460 --> 00:36:05,000
what a strong password is in mysql and

00:35:58,010 --> 00:36:09,380
that is hoping to unify them all ok so

00:36:05,000 --> 00:36:14,630
we also created an auditing plugin it

00:36:09,380 --> 00:36:17,600
stores data in XML it does it can have

00:36:14,630 --> 00:36:20,870
an adjustable impact the more well

00:36:17,600 --> 00:36:23,030
impacted you the more performance kit

00:36:20,870 --> 00:36:25,280
you are ready to take the better and

00:36:23,030 --> 00:36:27,980
complete your login will be but there's

00:36:25,280 --> 00:36:30,140
levels to that so it can be slightly a

00:36:27,980 --> 00:36:32,660
synchronous really synchronous and

00:36:30,140 --> 00:36:36,250
synchronous that's the options there and

00:36:32,660 --> 00:36:39,410
it also supports log file rotation and

00:36:36,250 --> 00:36:43,370
now it's a bit the normal basic stuff

00:36:39,410 --> 00:36:45,620
that you find with auditing it's not

00:36:43,370 --> 00:36:48,680
there's no filtering yet in any

00:36:45,620 --> 00:36:54,350
meaningful way but well we are looking

00:36:48,680 --> 00:36:57,620
into that okay so another important part

00:36:54,350 --> 00:37:02,120
is that we now provide an alternative

00:36:57,620 --> 00:37:04,370
for your scripts typically when you log

00:37:02,120 --> 00:37:06,920
into a user you need to supply the

00:37:04,370 --> 00:37:09,320
password and you were doing that on the

00:37:06,920 --> 00:37:13,760
comment line and there's all sorts of

00:37:09,320 --> 00:37:17,030
reasons why this is bad and we are now

00:37:13,760 --> 00:37:20,060
providing an alternative there is a new

00:37:17,030 --> 00:37:23,150
option to the mask yo client that

00:37:20,060 --> 00:37:26,030
basically serves to as a reference to a

00:37:23,150 --> 00:37:28,610
set of user name and password stored in

00:37:26,030 --> 00:37:32,720
a file in your user directory retour

00:37:28,610 --> 00:37:35,600
about it it's really interesting ok and

00:37:32,720 --> 00:37:37,730
the last tidbit is that we now have

00:37:35,600 --> 00:37:41,060
connection strings if you if your

00:37:37,730 --> 00:37:43,850
application wants to track some metadata

00:37:41,060 --> 00:37:46,430
for the clients that log into it there

00:37:43,850 --> 00:37:47,400
is a way to transfer the dose metadata

00:37:46,430 --> 00:37:51,480
from the Cline

00:37:47,400 --> 00:37:53,819
in the login RPC itself directly to your

00:37:51,480 --> 00:37:57,450
server and there is a system table that

00:37:53,819 --> 00:38:00,839
stores and reads dot dot information so

00:37:57,450 --> 00:38:02,819
you are now free to make metadata in in

00:38:00,839 --> 00:38:06,180
your own applications the server would

00:38:02,819 --> 00:38:09,420
provide for it and of course the usual

00:38:06,180 --> 00:38:12,569
set of refactoring we are moving towards

00:38:09,420 --> 00:38:14,880
standard libraries standard random

00:38:12,569 --> 00:38:17,160
generators proven implementations that

00:38:14,880 --> 00:38:20,130
are cryptographically strong and known

00:38:17,160 --> 00:38:23,190
to be searched compared to the homegrown

00:38:20,130 --> 00:38:26,670
solutions that we used to have and we

00:38:23,190 --> 00:38:29,299
also support some parts that were

00:38:26,670 --> 00:38:34,160
uncovered by the by the ssl

00:38:29,299 --> 00:38:37,849
implementation and that's it okay so

00:38:34,160 --> 00:38:37,849
questions anybody

00:38:43,089 --> 00:38:52,170
no okay great then you have been a great

00:38:48,099 --> 00:38:52,170
audience thank you for your time yeah

00:39:06,960 --> 00:39:11,810
can you hear me good

00:39:16,490 --> 00:39:23,570
about the newer versions like you know

00:39:20,530 --> 00:39:26,450
to create a site like joomla and drupal

00:39:23,570 --> 00:39:36,200
and all this stuff how's the connection

00:39:26,450 --> 00:39:39,560
how security with mysql so basically it

00:39:36,200 --> 00:39:42,350
works like that the joomla the PHP

00:39:39,560 --> 00:39:44,750
connects to your mysql server and that's

00:39:42,350 --> 00:39:48,619
where all the securities so the user

00:39:44,750 --> 00:39:50,480
model in joomla has probably I are not

00:39:48,619 --> 00:39:54,440
really familiar how this works but just

00:39:50,480 --> 00:39:56,570
in principle basically your user model

00:39:54,440 --> 00:39:59,000
in your PHP application may not

00:39:56,570 --> 00:40:00,590
necessarily correspond to the user model

00:39:59,000 --> 00:40:03,890
that you are using to access your

00:40:00,590 --> 00:40:06,380
database typically in my blog my

00:40:03,890 --> 00:40:08,810
personal blog installation WordPress

00:40:06,380 --> 00:40:12,730
there is a single user that reads

00:40:08,810 --> 00:40:16,700
everything from the database which is

00:40:12,730 --> 00:40:19,670
interesting but well a bit scary because

00:40:16,700 --> 00:40:23,420
that user users password is stored there

00:40:19,670 --> 00:40:25,820
and well it can do anything and so I

00:40:23,420 --> 00:40:28,130
really hope that PHP applications will

00:40:25,820 --> 00:40:30,470
do better than that and provide some

00:40:28,130 --> 00:40:33,430
mapping between their user model and the

00:40:30,470 --> 00:40:33,430
mask user model

00:40:37,400 --> 00:40:48,710
questions more questions anybody I was

00:40:45,800 --> 00:40:51,440
wondering where you can get into some

00:40:48,710 --> 00:40:55,730
more details for this alternative about

00:40:51,440 --> 00:40:58,130
the passwords in script sure okay so the

00:40:55,730 --> 00:41:00,350
way it works is the following in in your

00:40:58,130 --> 00:41:02,840
scripts you would typically provide the

00:41:00,350 --> 00:41:04,960
pair a username and a password and you

00:41:02,840 --> 00:41:08,120
store that in your script file which is

00:41:04,960 --> 00:41:10,160
not a good idea you need to handle your

00:41:08,120 --> 00:41:12,860
script files with care and will protect

00:41:10,160 --> 00:41:15,950
them and all that instead what you are

00:41:12,860 --> 00:41:19,310
or what we are offering is yet another

00:41:15,950 --> 00:41:22,640
option you specify that option instead

00:41:19,310 --> 00:41:26,150
of your username and password and it

00:41:22,640 --> 00:41:29,780
goes that's a named spot it's a name

00:41:26,150 --> 00:41:32,210
that you define and by that name in a

00:41:29,780 --> 00:41:34,190
certain file that you can protect and

00:41:32,210 --> 00:41:37,520
it's it's privately in your home

00:41:34,190 --> 00:41:40,190
directory that's where the username and

00:41:37,520 --> 00:41:43,730
passwords are stored so the client will

00:41:40,190 --> 00:41:45,830
do one look up in that file read the

00:41:43,730 --> 00:41:47,570
username and password for you and then

00:41:45,830 --> 00:41:50,270
supply them to the server instead of

00:41:47,570 --> 00:41:52,370
having to do that in your own script so

00:41:50,270 --> 00:41:55,790
that's the difference of course if

00:41:52,370 --> 00:41:58,160
somebody compromises this file it's the

00:41:55,790 --> 00:42:01,040
same as compromising your scripts so

00:41:58,160 --> 00:42:03,320
there's no added security really but

00:42:01,040 --> 00:42:05,870
there is ease of maintenance because

00:42:03,320 --> 00:42:12,550
it's a single file that you can now put

00:42:05,870 --> 00:42:12,550
efforts to protect properly thank you

00:42:13,580 --> 00:42:24,410
okay anybody else know right thanks

00:42:22,200 --> 00:42:24,410

YouTube URL: https://www.youtube.com/watch?v=-d3rBlmqEmQ


