Title: osc14: Michal Hrusecky,  How to write osc plugins
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	OSC can be extended using plugins written in Python. Plugins are good example of how a user can extend the functionality of OBS through the client side of the equation. For example, we are extending OBS to support Staging projects management. In this talk we will learn how to create plugings that are useful for the daily work as a contributor.
Captions: 
	00:00:01,790 --> 00:00:11,130
so hi everybody my name is not Alberto

00:00:06,690 --> 00:00:14,309
planas yeah I have a first question I

00:00:11,130 --> 00:00:16,830
have I even haven't started yet and I

00:00:14,309 --> 00:00:19,670
already have a question ok tell it to

00:00:16,830 --> 00:00:23,400
microphone so it will be on the scene

00:00:19,670 --> 00:00:28,170
that's nice hey your slide is saying OBS

00:00:23,400 --> 00:00:33,450
plugin wasn't it osc plug in some same

00:00:28,170 --> 00:00:37,739
thing do you know yeah I guess it should

00:00:33,450 --> 00:00:48,420
be 0 SE plugging so after the talk I

00:00:37,739 --> 00:00:50,969
will commit a batch so ok I ended up

00:00:48,420 --> 00:00:54,809
with that with the introduction before

00:00:50,969 --> 00:01:03,949
the question ok looks like question was

00:00:54,809 --> 00:01:07,110
answered and oh you're not leaving ok so

00:01:03,949 --> 00:01:10,500
my name is Makaha jet ski I'm not a

00:01:07,110 --> 00:01:13,500
Beretta planners he was he was planned

00:01:10,500 --> 00:01:15,630
to this to do this presentation but

00:01:13,500 --> 00:01:19,560
unfortunately he couldn't come so I

00:01:15,630 --> 00:01:22,470
stepped in and i will be talking what he

00:01:19,560 --> 00:01:25,890
was supposed to talk about and hopefully

00:01:22,470 --> 00:01:32,159
i will be at least half a decent as he

00:01:25,890 --> 00:01:35,820
was so let's start with a little bit

00:01:32,159 --> 00:01:38,850
interaction so this is a little bit

00:01:35,820 --> 00:01:42,930
picture there is this OBS dinghy and

00:01:38,850 --> 00:01:45,420
there is this osc ose is command line

00:01:42,930 --> 00:01:49,409
client for OBS which is our build

00:01:45,420 --> 00:01:53,250
service and that's what the first

00:01:49,409 --> 00:01:56,670
question was about ose is the thing up

00:01:53,250 --> 00:02:01,200
there and that can be extended with

00:01:56,670 --> 00:02:03,750
plugins OBS is the thing on our servers

00:02:01,200 --> 00:02:08,600
and I don't know whether it can be

00:02:03,750 --> 00:02:08,600
extended by plugins adapt

00:02:08,840 --> 00:02:14,629
and we will be talking about how to

00:02:10,450 --> 00:02:17,629
write plug-in for the OSC basically to

00:02:14,629 --> 00:02:24,200
help you out my ultimate eyes some of

00:02:17,629 --> 00:02:26,560
the stuff that you do so as I said or C

00:02:24,200 --> 00:02:30,260
is one of the interfaces to the OBS and

00:02:26,560 --> 00:02:35,209
you can be extended OBS actually has a

00:02:30,260 --> 00:02:48,500
API that you can use it uses some rest

00:02:35,209 --> 00:02:51,620
like protocol what go ahead oh okay it's

00:02:48,500 --> 00:02:54,019
it's protocol there are some there are

00:02:51,620 --> 00:03:01,430
some comments about not being really

00:02:54,019 --> 00:03:06,410
rest or like or something so let's say

00:03:01,430 --> 00:03:12,739
it's protocol it uses HTTP requests that

00:03:06,410 --> 00:03:18,829
the part is right and results are

00:03:12,739 --> 00:03:22,030
usually in kind of XML sometimes there

00:03:18,829 --> 00:03:25,849
are results sometimes they are not and

00:03:22,030 --> 00:03:33,109
osc is written in Python Alberto was

00:03:25,849 --> 00:03:36,019
excited about this part me not but it's

00:03:33,109 --> 00:03:40,190
written in Python many people speak

00:03:36,019 --> 00:03:43,220
button probably more than pearl at least

00:03:40,190 --> 00:03:46,010
well actually yeah it's the other way

00:03:43,220 --> 00:03:47,959
around but can be spoken but it cannot

00:03:46,010 --> 00:03:51,440
be distant or read or something like

00:03:47,959 --> 00:03:57,650
that so yeah Python can be both written

00:03:51,440 --> 00:04:00,609
and read so let's start with some basic

00:03:57,650 --> 00:04:06,040
example that Alberto provided for us

00:04:00,609 --> 00:04:06,040
this is how simple plug-in can look like

00:04:07,120 --> 00:04:10,120
wow

00:04:10,650 --> 00:04:17,280
really nice colors on the projector okay

00:04:17,910 --> 00:04:29,110
so if you understand button who have you

00:04:22,930 --> 00:04:36,310
no bitin pretty much most of us most of

00:04:29,110 --> 00:04:38,919
you okay so you can use ose import some

00:04:36,310 --> 00:04:42,820
stuff and then you can write your own

00:04:38,919 --> 00:04:47,350
command it will be explained a little

00:04:42,820 --> 00:04:49,690
bit more in details later and when you

00:04:47,350 --> 00:04:52,720
write your plug-in you have to somehow

00:04:49,690 --> 00:04:57,190
deploy it and that's down quite easily

00:04:52,720 --> 00:05:00,820
you just copy it or link it to osc

00:04:57,190 --> 00:05:03,760
plugins directory in your home then if

00:05:00,820 --> 00:05:08,050
you write it correctly you can use it

00:05:03,760 --> 00:05:13,600
from OS see if you use OS e minus minus

00:05:08,050 --> 00:05:16,450
help it will show your command and it

00:05:13,600 --> 00:05:19,900
will even show the help for the command

00:05:16,450 --> 00:05:23,530
if you use ose command minus minus help

00:05:19,900 --> 00:05:28,229
if you wrote it wrong it will break your

00:05:23,530 --> 00:05:32,770
OS e there is actually environment

00:05:28,229 --> 00:05:35,889
variable that you can use to prevent it

00:05:32,770 --> 00:05:38,260
from breaking oh se but by default if

00:05:35,889 --> 00:05:41,080
you break your plug-in it will break

00:05:38,260 --> 00:05:46,690
your OS e and you have to fix it before

00:05:41,080 --> 00:05:47,950
you continue working so if your or C is

00:05:46,690 --> 00:05:49,990
not working and you were playing with

00:05:47,950 --> 00:05:52,000
some plugins check your plugins

00:05:49,990 --> 00:05:59,530
directory and try deleting stuff from

00:05:52,000 --> 00:06:02,919
there so every plug-in consists of entry

00:05:59,530 --> 00:06:06,789
point this is this do something stuff

00:06:02,919 --> 00:06:10,330
it's unbounded method which I was

00:06:06,789 --> 00:06:13,510
explained that it means that it's a

00:06:10,330 --> 00:06:16,180
method that is actually not part of the

00:06:13,510 --> 00:06:19,719
class initially but it's added to the

00:06:16,180 --> 00:06:22,380
class lighter somehow I hope I'm

00:06:19,719 --> 00:06:22,380
partially correct

00:06:23,490 --> 00:06:30,640
then there is a function decorator to

00:06:27,490 --> 00:06:37,150
set parameters and alyas that's the

00:06:30,640 --> 00:06:39,490
stuff that we saw up on top of the

00:06:37,150 --> 00:06:43,540
function that actually specified how to

00:06:39,490 --> 00:06:46,660
call it then there is a doc string that

00:06:43,540 --> 00:06:54,100
was the shining green eating with the

00:06:46,660 --> 00:07:02,010
help and then it accesses OBS via this

00:06:54,100 --> 00:07:10,390
HTTP GET and post and put and delete

00:07:02,010 --> 00:07:16,360
this is default yep well I know this for

00:07:10,390 --> 00:07:22,570
but you said it's not fully rest so okay

00:07:16,360 --> 00:07:25,810
so and if you want to extend the some

00:07:22,570 --> 00:07:29,730
functionality you can use functions that

00:07:25,810 --> 00:07:32,320
are already available in OC core and

00:07:29,730 --> 00:07:36,100
when you get the result back if you get

00:07:32,320 --> 00:07:41,110
some result back you can use elementary

00:07:36,100 --> 00:07:44,530
for parsing this XML one thing to be

00:07:41,110 --> 00:07:46,990
raped a little bit cautious about not

00:07:44,530 --> 00:07:50,620
all functions that you can find in OSC

00:07:46,990 --> 00:07:52,960
are very suitable for being used from

00:07:50,620 --> 00:07:55,330
plug-in because some of them has some

00:07:52,960 --> 00:07:59,160
side effects like printing to the screen

00:07:55,330 --> 00:08:02,830
and opening editors and stuff like that

00:07:59,160 --> 00:08:05,440
so make sure that the stuff that you

00:08:02,830 --> 00:08:08,260
want to use actually that's only the

00:08:05,440 --> 00:08:11,080
things that you really want to use want

00:08:08,260 --> 00:08:16,080
to do and doesn't have any unpleasant

00:08:11,080 --> 00:08:21,210
side effects that could surprise you so

00:08:16,080 --> 00:08:28,690
plug in entry point unbounded method and

00:08:21,210 --> 00:08:31,930
this is the decorator dinghy and you can

00:08:28,690 --> 00:08:34,779
see how you can create a new command in

00:08:31,930 --> 00:08:39,550
this case its command V are

00:08:34,779 --> 00:08:43,569
and it has some options it uses same

00:08:39,550 --> 00:08:46,749
syntax as button old parks library that

00:08:43,569 --> 00:08:52,870
you probably are familiar as you said

00:08:46,749 --> 00:08:56,769
that you know python and then there is

00:08:52,870 --> 00:09:03,240
this dog string that will appear in the

00:08:56,769 --> 00:09:06,249
help some useful commands from the osc

00:09:03,240 --> 00:09:10,420
make you I'll will help you constant

00:09:06,249 --> 00:09:15,970
beer out to be used later and HTTP

00:09:10,420 --> 00:09:18,939
underscore get post put delete it will

00:09:15,970 --> 00:09:20,559
help you to create HTTP requests so you

00:09:18,939 --> 00:09:25,420
can actually communicate with build

00:09:20,559 --> 00:09:29,259
service and not from ose but from Python

00:09:25,420 --> 00:09:33,180
itself element three parts to actually

00:09:29,259 --> 00:09:36,910
create structure from XML to be able

00:09:33,180 --> 00:09:42,189
more easily to access data that OBS

00:09:36,910 --> 00:09:50,230
return for you so here's the example how

00:09:42,189 --> 00:09:53,829
you can actually call something and this

00:09:50,230 --> 00:09:57,779
is a little bit more complex example how

00:09:53,829 --> 00:10:04,540
to request something from the service

00:09:57,779 --> 00:10:10,079
this is declining review request I

00:10:04,540 --> 00:10:10,079
believe so

00:10:10,600 --> 00:10:18,380
yeah it's declining review these are the

00:10:15,170 --> 00:10:21,050
parameters then it contract income it

00:10:18,380 --> 00:10:26,660
constructs URL for the from the

00:10:21,050 --> 00:10:31,160
parameters then it calls the belt

00:10:26,660 --> 00:10:36,980
service via HTTP POST and we hit some

00:10:31,160 --> 00:10:42,370
something back parsed XML and we check

00:10:36,980 --> 00:10:45,530
what is the code attribute in there and

00:10:42,370 --> 00:10:49,670
that's all if there is any error we

00:10:45,530 --> 00:10:52,310
print something that's the one of the

00:10:49,670 --> 00:11:08,230
easiest or se plugins that you can try

00:10:52,310 --> 00:11:08,230
to write yeah question so what's goat

00:11:08,980 --> 00:11:24,440
yeah to go this part of the XML and yeah

00:11:21,860 --> 00:11:27,110
question was what's what's the code and

00:11:24,440 --> 00:11:34,580
yeah it's just stuff that builds every

00:11:27,110 --> 00:11:40,790
say turns as set from gula it's in this

00:11:34,580 --> 00:11:44,090
case probably okay and in general when

00:11:40,790 --> 00:11:49,550
we were developing plug-in at least what

00:11:44,090 --> 00:11:52,700
I did was trying always just calling the

00:11:49,550 --> 00:11:56,570
stuff and looking at the result XML and

00:11:52,700 --> 00:11:58,910
trying to figure out what does elements

00:11:56,570 --> 00:12:04,010
and attributes in there mean and which

00:11:58,910 --> 00:12:06,770
ones are interesting for me there is osc

00:12:04,010 --> 00:12:09,940
apical command that you can use to

00:12:06,770 --> 00:12:13,970
actually go directly URL and it will

00:12:09,940 --> 00:12:18,170
return the XML that you would get so you

00:12:13,970 --> 00:12:27,800
can simulate the progress of writing

00:12:18,170 --> 00:12:31,790
your plug in this way so this is another

00:12:27,800 --> 00:12:38,900
example where you can get some

00:12:31,790 --> 00:12:45,320
information about some persons again

00:12:38,900 --> 00:12:48,500
make URL using the API URL API URL is

00:12:45,320 --> 00:12:51,470
defined in your for example it can be

00:12:48,500 --> 00:12:53,870
defined on command line or it can it is

00:12:51,470 --> 00:12:57,590
defined in your configuration file from

00:12:53,870 --> 00:13:01,070
OSC and it will construct the you I'll

00:12:57,590 --> 00:13:04,670
get the information you will get xml 3

00:13:01,070 --> 00:13:08,260
and then you will find some of the

00:13:04,670 --> 00:13:08,260
elements i believe

00:13:12,360 --> 00:13:19,380
some other high-level functions that can

00:13:16,260 --> 00:13:22,140
be useful again if you want to do

00:13:19,380 --> 00:13:26,790
something more complicated it's very

00:13:22,140 --> 00:13:29,730
useful to just go to the OSC find out

00:13:26,790 --> 00:13:33,180
what functions might be helpful for you

00:13:29,730 --> 00:13:35,730
and check that they actually do what

00:13:33,180 --> 00:13:41,610
only the stuff that you want to do and

00:13:35,730 --> 00:13:45,089
nothing more and now I were to provided

00:13:41,610 --> 00:13:50,190
us with some example which I put

00:13:45,089 --> 00:13:55,670
somewhere and is it visible yeah this

00:13:50,190 --> 00:13:55,670
one looks almost ok now we'll just

00:14:02,290 --> 00:14:10,720
so this is hole plug in as was said in

00:14:07,120 --> 00:14:15,160
the presentation there is this entry

00:14:10,720 --> 00:14:20,769
point this doufu which is unbounded

00:14:15,160 --> 00:14:26,889
method decide these decorators which

00:14:20,769 --> 00:14:31,170
specifies the command you will call it

00:14:26,889 --> 00:14:35,380
by using OSC either bug report or BR and

00:14:31,170 --> 00:14:38,380
then there are this options that will

00:14:35,380 --> 00:14:42,069
allow you to specify something else if

00:14:38,380 --> 00:14:44,050
you ask for the help for this plugin it

00:14:42,069 --> 00:14:48,990
will show you the stuff that is written

00:14:44,050 --> 00:14:51,399
hack written here in this dog string

00:14:48,990 --> 00:14:54,490
from what I understood this is usually

00:14:51,399 --> 00:14:58,060
how you document your functions in

00:14:54,490 --> 00:15:06,730
Python so it shouldn't be something new

00:14:58,060 --> 00:15:11,019
for you then we just start parsing some

00:15:06,730 --> 00:15:15,790
arguments get api URL which references

00:15:11,019 --> 00:15:22,589
the osc object that this method is

00:15:15,790 --> 00:15:28,680
unbounded to or form or something and

00:15:22,589 --> 00:15:35,230
then it does actual stuff it close

00:15:28,680 --> 00:15:37,750
method that is part of OSE so a better

00:15:35,230 --> 00:15:41,380
in this example doesn't use directly

00:15:37,750 --> 00:15:46,860
HTTP request he uses some method that is

00:15:41,380 --> 00:15:53,139
already part of OSE to get stuff and

00:15:46,860 --> 00:15:56,740
then he uses expert to find the correct

00:15:53,139 --> 00:16:01,230
stuff that he is interested in if we

00:15:56,740 --> 00:16:05,380
scroll up here is some helper functions

00:16:01,230 --> 00:16:09,699
which are really long well not really

00:16:05,380 --> 00:16:12,490
but for this screen it's long and on on

00:16:09,699 --> 00:16:15,300
the top you can see the functions that

00:16:12,490 --> 00:16:19,110
he actually used to import

00:16:15,300 --> 00:16:21,089
he imported from ose court and he uses

00:16:19,110 --> 00:16:25,760
in his plugin to actually provide the

00:16:21,089 --> 00:16:25,760
functionality that he was interested in

00:16:26,600 --> 00:16:41,300
and if you want to learn more about this

00:16:33,810 --> 00:16:45,360
stuff there is a wiki page on our wiki

00:16:41,300 --> 00:16:49,019
there is already 0 SE co op plugging

00:16:45,360 --> 00:16:58,490
that Vincent's poked about I believe

00:16:49,019 --> 00:17:01,620
yesterday right ok just before me so and

00:16:58,490 --> 00:17:07,380
what we actually date was that we write

00:17:01,620 --> 00:17:09,660
our own plugin it was meant to it's

00:17:07,380 --> 00:17:13,199
meant to help of it staking plugging

00:17:09,660 --> 00:17:16,470
staging project and it's meant to help

00:17:13,199 --> 00:17:19,380
guillot to manage factory you can take a

00:17:16,470 --> 00:17:21,600
look at that we have even some tests to

00:17:19,380 --> 00:17:25,679
it written so you can get inspiration

00:17:21,600 --> 00:17:32,570
even for writing tests for your plugin

00:17:25,679 --> 00:17:35,730
and that was all what i wanted to say

00:17:32,570 --> 00:17:40,800
one more thing if you want to join us

00:17:35,730 --> 00:17:44,970
join us and now time for your questions

00:17:40,800 --> 00:17:50,910
and thank you for attention sorry for

00:17:44,970 --> 00:17:53,460
not being good alberto and while i will

00:17:50,910 --> 00:17:56,130
be trying to ask for the question there

00:17:53,460 --> 00:17:57,990
is plenty of skilled people in the

00:17:56,130 --> 00:18:01,350
audience that can help with as well

00:17:57,990 --> 00:18:03,870
include the question so i might redirect

00:18:01,350 --> 00:18:06,530
some questions to them so let's start

00:18:03,870 --> 00:18:06,530
with the questions

00:18:15,370 --> 00:18:23,870
so I guess my first question would be

00:18:21,400 --> 00:18:27,680
when when should you write a plug-in

00:18:23,870 --> 00:18:31,700
versus actually writing something that

00:18:27,680 --> 00:18:34,460
goes in osc core because I over in a

00:18:31,700 --> 00:18:36,980
couple of plugins and one I ended up

00:18:34,460 --> 00:18:40,370
putting in the core afterwards the other

00:18:36,980 --> 00:18:43,400
one I haven't yet and I guess there are

00:18:40,370 --> 00:18:46,340
some advantages to pushing it to the

00:18:43,400 --> 00:18:49,220
core and some disadvantages and I was

00:18:46,340 --> 00:18:51,590
wondering if one of those advantages or

00:18:49,220 --> 00:18:56,420
disadvantages might be to do with osc2

00:18:51,590 --> 00:19:07,900
and whether plugins written for OSC will

00:18:56,420 --> 00:19:10,250
work for RC 2 so we had this discussion

00:19:07,900 --> 00:19:15,200
rust recently with the swiffer checker

00:19:10,250 --> 00:19:17,930
thing because the the general idea is

00:19:15,200 --> 00:19:23,020
that plugins are something for you or

00:19:17,930 --> 00:19:23,020
your team and if its general

00:19:23,830 --> 00:19:30,260
functionality that can be used no matter

00:19:27,320 --> 00:19:33,200
where then it's feasible to go into core

00:19:30,260 --> 00:19:37,690
and I think or C 2 has a completely

00:19:33,200 --> 00:19:41,200
different architecture and actually the

00:19:37,690 --> 00:19:49,160
the current way of writing plugins is

00:19:41,200 --> 00:19:52,160
really happy because he agrees so is it

00:19:49,160 --> 00:19:55,160
the big problem with this approach of

00:19:52,160 --> 00:19:57,200
this unbounded method as I learned is

00:19:55,160 --> 00:20:00,230
that they run in the namespace of

00:19:57,200 --> 00:20:05,680
oversee so some variables you can't use

00:20:00,230 --> 00:20:09,890
even though it's very far from clear why

00:20:05,680 --> 00:20:11,660
and others are there without any

00:20:09,890 --> 00:20:14,480
documentation you have to dig them in

00:20:11,660 --> 00:20:17,000
the core and stuff like that so I think

00:20:14,480 --> 00:20:18,920
I did not look into it but I think that

00:20:17,000 --> 00:20:21,830
an idea of where C 2 was to have a

00:20:18,920 --> 00:20:22,960
library to use for plugins and then a

00:20:21,830 --> 00:20:24,899
driver and

00:20:22,960 --> 00:20:27,010
stuff like that so basically a real

00:20:24,899 --> 00:20:30,399
plug-in architecture the plugins

00:20:27,010 --> 00:20:38,890
currently are just just like sourced in

00:20:30,399 --> 00:20:41,399
batch files so the thing I'm slightly

00:20:38,890 --> 00:20:44,409
worried about is spending effort

00:20:41,399 --> 00:20:46,960
developing stuff oh I see whether it's a

00:20:44,409 --> 00:20:50,110
plug-in or in the core and then at some

00:20:46,960 --> 00:20:55,750
point osc2 comes along and we have to

00:20:50,110 --> 00:20:57,880
start again for one was he too is I

00:20:55,750 --> 00:21:01,510
think the force here and development now

00:20:57,880 --> 00:21:05,620
and the other thing is the hardest part

00:21:01,510 --> 00:21:10,840
is actually finding the OBS API the

00:21:05,620 --> 00:21:13,210
right OBS API of digesting the XML and

00:21:10,840 --> 00:21:19,690
stuff and I guess this part will stay

00:21:13,210 --> 00:21:22,570
but I only guessing so just give an

00:21:19,690 --> 00:21:25,390
example with the collab plug in the code

00:21:22,570 --> 00:21:27,429
of the collab plane well ugly is still

00:21:25,390 --> 00:21:30,700
supposed to be organized like properly

00:21:27,429 --> 00:21:32,679
so you have classes and so on and this

00:21:30,700 --> 00:21:34,960
can actually be moved to a c2 whenever

00:21:32,679 --> 00:21:37,809
we need it the integration with the way

00:21:34,960 --> 00:21:43,090
see itself is just this tiny bit all the

00:21:37,809 --> 00:21:55,899
logic is the difficult part I have a

00:21:43,090 --> 00:21:58,260
question is OSC core yes oh you need the

00:21:55,899 --> 00:21:58,260
microphone

00:22:05,010 --> 00:22:10,840
what do you mean were forest like

00:22:07,870 --> 00:22:20,740
protocol do you mean soap or what is

00:22:10,840 --> 00:22:33,490
that so cool you will answer this

00:22:20,740 --> 00:22:37,720
question so soap is I think it's jason

00:22:33,490 --> 00:22:40,630
over something and rest means i think

00:22:37,720 --> 00:22:46,029
also jason about you over something so

00:22:40,630 --> 00:22:48,490
and rest like is in form created to

00:22:46,029 --> 00:22:50,740
describe this kind of api that OBS uses

00:22:48,490 --> 00:22:53,260
but has nothing to do with rest actually

00:22:50,740 --> 00:22:56,710
it's basically the correct term i guess

00:22:53,260 --> 00:23:01,809
would be inspired by rest api so rest is

00:22:56,710 --> 00:23:04,210
basically a standard at this is let us

00:23:01,809 --> 00:23:08,679
mean something but I don't know it a

00:23:04,210 --> 00:23:11,679
song represent youngest dad and remember

00:23:08,679 --> 00:23:13,690
any way you can generate objects you can

00:23:11,679 --> 00:23:16,019
update them you can delete them in a

00:23:13,690 --> 00:23:18,429
defined way in a predictable way

00:23:16,019 --> 00:23:23,399
unfortunately the predictable part falls

00:23:18,429 --> 00:23:27,429
away in OBS API the main idea in rest is

00:23:23,399 --> 00:23:30,190
ducking in other protocols or parodying

00:23:27,429 --> 00:23:33,880
like soap you are adding layers in top

00:23:30,190 --> 00:23:35,950
of HTTP to do anything so you are adding

00:23:33,880 --> 00:23:38,789
your own definition to what everything

00:23:35,950 --> 00:23:43,899
means and another layer on top

00:23:38,789 --> 00:23:46,210
rest-based API is just use the pure HTTP

00:23:43,899 --> 00:23:50,620
four methods where they are more than

00:23:46,210 --> 00:23:53,470
four but use for the gatepost delayed so

00:23:50,620 --> 00:23:56,190
it's it's not creating new layers you

00:23:53,470 --> 00:23:59,559
simply have to define some resources

00:23:56,190 --> 00:24:02,889
like web pages for example and you have

00:23:59,559 --> 00:24:05,320
different representation that the r is

00:24:02,889 --> 00:24:07,289
for that i don't remember the rest but

00:24:05,320 --> 00:24:09,279
they written the they are is forward

00:24:07,289 --> 00:24:11,549
because you can have several

00:24:09,279 --> 00:24:14,050
representation right so it's like a

00:24:11,549 --> 00:24:16,390
streamlined version of so

00:24:14,050 --> 00:24:18,940
and all this stuff trying to be so

00:24:16,390 --> 00:24:21,490
straightforward as possible removing all

00:24:18,940 --> 00:24:35,520
the extra thinking that was not that

00:24:21,490 --> 00:24:35,520
necessary and in the end oh yeah

00:24:50,989 --> 00:25:04,409
so no other questions hola and the rest

00:25:00,269 --> 00:25:10,559
i forgot but it ended with alberta

00:25:04,409 --> 00:25:16,940
planners unfortunately I don't I I can't

00:25:10,559 --> 00:25:22,590
speak Spanish not yet but cool can yeah

00:25:16,940 --> 00:25:27,950
few deep thoughts from cool I'm not

00:25:22,590 --> 00:25:34,259
prepared come on you do it every day I

00:25:27,950 --> 00:25:36,299
prepared every day you can repeat that

00:25:34,259 --> 00:25:38,759
they'd they haven't heard you on on

00:25:36,299 --> 00:25:46,019
Monday or Tuesday you can repeat

00:25:38,759 --> 00:25:55,350
something that you did okay so no clever

00:25:46,019 --> 00:25:56,999
Spanish talks from culo now oh so go to

00:25:55,350 --> 00:26:01,409
see ghosts or he will be speaking

00:25:56,999 --> 00:26:04,009
Spanish there so yeah if there are no

00:26:01,409 --> 00:26:08,070
other clever questions or stupid ones

00:26:04,009 --> 00:26:11,629
thank you for your attention and have a

00:26:08,070 --> 00:26:11,629

YouTube URL: https://www.youtube.com/watch?v=ki0xNXWOZmE


