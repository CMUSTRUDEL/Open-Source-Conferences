Title: osc14: Davor Guttierrez, Optimizing Linux Servers (10min Audio Silence)
Publication date: 2014-04-27
Playlist: openSUSE Conference 2014
Description: 
	Linux Server is optimized for average workloads. With most servers you can gain much by optimizing performance and make some tweaking. In this session you will learn how to optimize your server's performance by tuning kernel parameters, exclude unneeded system services and make some more tweaking with disks, memory and kernel.
Captions: 
	00:09:26,540 --> 00:09:32,750
average indicates the average cpu load

00:09:29,630 --> 00:09:36,050
over a space a specific time period on

00:09:32,750 --> 00:09:39,410
Linux load average is displayed for

00:09:36,050 --> 00:09:46,730
least one minute five minute and 15

00:09:39,410 --> 00:09:50,000
minutes this is these numbers you see

00:09:46,730 --> 00:09:53,270
first line load average zero point well

00:09:50,000 --> 00:09:57,890
one minute 0.8 in five minutes 0 point

00:09:53,270 --> 00:10:00,680
15 15 minute and that means load average

00:09:57,890 --> 00:10:02,870
zero point when 25 one point twenty one

00:10:00,680 --> 00:10:07,550
point ninety indicates that the load on

00:10:02,870 --> 00:10:09,770
the system is coming down 0.5 25 is the

00:10:07,550 --> 00:10:12,290
load average in the last one minute one

00:10:09,770 --> 00:10:14,810
point 20 s is the load average in the

00:10:12,290 --> 00:10:16,670
last five minutes and 190 is the load

00:10:14,810 --> 00:10:19,760
average in the last fifteen minute and

00:10:16,670 --> 00:10:21,980
load average is going down this load

00:10:19,760 --> 00:10:24,200
average is calculated by combining both

00:10:21,980 --> 00:10:25,850
the total number of protests in the

00:10:24,200 --> 00:10:31,000
queue and the total number of the

00:10:25,850 --> 00:10:34,430
process in uninterruptible task status

00:10:31,000 --> 00:10:38,150
then when we are talking about this guy

00:10:34,430 --> 00:10:42,140
optimization all our Linux operate all

00:10:38,150 --> 00:10:44,750
the linux distributions ships with four

00:10:42,140 --> 00:10:48,590
different io schedulers they are

00:10:44,750 --> 00:10:51,290
deadlines and on noop anticipatory and c

00:10:48,590 --> 00:10:54,140
fq there are many differences between to

00:10:51,290 --> 00:10:56,990
settle scheduling algorithms the default

00:10:54,140 --> 00:11:00,140
scheduling algorithm is cfq this is

00:10:56,990 --> 00:11:02,360
default in most linux distribution it

00:11:00,140 --> 00:11:05,150
attempts to distribute all i/o bandwidth

00:11:02,360 --> 00:11:07,790
evenly among all processes requesting

00:11:05,150 --> 00:11:11,420
aisle and it's ideal for most purposes

00:11:07,790 --> 00:11:15,350
if you try if you check on your laptop

00:11:11,420 --> 00:11:19,820
on your client PC which algorithm you

00:11:15,350 --> 00:11:21,860
use it will be cfq then noop this

00:11:19,820 --> 00:11:26,210
algorithm attempts to use as little CPI

00:11:21,860 --> 00:11:28,280
as possible it acts as a basic first-in

00:11:26,210 --> 00:11:30,260
first-out q expecting the hardware

00:11:28,280 --> 00:11:32,960
controller to handle the performance

00:11:30,260 --> 00:11:37,340
operation of the request if you have

00:11:32,960 --> 00:11:40,050
notebook server whatever with solid

00:11:37,340 --> 00:11:44,269
state disk drive use this

00:11:40,050 --> 00:11:49,560
you're the computer will be much more

00:11:44,269 --> 00:11:51,420
faster try it anticipatory this

00:11:49,560 --> 00:11:53,550
algorithm attempts to reorder all these

00:11:51,420 --> 00:11:55,649
kind of operations to optimize disk six

00:11:53,550 --> 00:11:58,410
it's designed to increase performance

00:11:55,649 --> 00:12:02,010
and system that have slowed disk okay if

00:11:58,410 --> 00:12:07,230
you really have a slow disc in your

00:12:02,010 --> 00:12:11,790
computer in your notebook with 54 rpms

00:12:07,230 --> 00:12:16,190
try this it will be much more faster

00:12:11,790 --> 00:12:20,490
than cfq if you have disk with seven

00:12:16,190 --> 00:12:23,220
7200rpm then just use cfq or deadlines

00:12:20,490 --> 00:12:25,890
and default deadline this scheduling

00:12:23,220 --> 00:12:28,470
algorithm places I all requests in a

00:12:25,890 --> 00:12:30,269
priority queue so each is guaranteed to

00:12:28,470 --> 00:12:31,769
be round within a certain time it's

00:12:30,269 --> 00:12:34,829
often used in a real-time operating

00:12:31,769 --> 00:12:38,700
system in company well where I work we

00:12:34,829 --> 00:12:44,430
have a lot of work with oracle databases

00:12:38,700 --> 00:12:48,570
and oracle web application servers and

00:12:44,430 --> 00:12:50,990
we always use deadline algorithm how to

00:12:48,570 --> 00:12:55,680
check which algorithm are you using

00:12:50,990 --> 00:12:59,240
simple cat this block is sdh or your

00:12:55,680 --> 00:12:59,240
disk q scheduler

00:13:05,150 --> 00:13:14,450
I'm using this one in brackets cfq on

00:13:09,770 --> 00:13:19,850
this computer if you want to change it

00:13:14,450 --> 00:13:23,690
just put this comment line or if you are

00:13:19,850 --> 00:13:26,780
using suse linux or open suse linux you

00:13:23,690 --> 00:13:31,400
can do this in yes we are Colonel

00:13:26,780 --> 00:13:34,010
settings changing schedulers on-the-fly

00:13:31,400 --> 00:13:36,880
allows you to test and benchmark the

00:13:34,010 --> 00:13:40,130
algorithms for your specific application

00:13:36,880 --> 00:13:42,500
once the change is issued any current I

00:13:40,130 --> 00:13:44,750
operations will be executed before the

00:13:42,500 --> 00:13:46,850
new scheduler goes into effect so the

00:13:44,750 --> 00:13:51,500
change will not be instant you must wait

00:13:46,850 --> 00:13:55,160
maybe 15 seconds one minute but it will

00:13:51,500 --> 00:13:57,140
be quick also remember that once one is

00:13:55,160 --> 00:13:58,780
set and performs to your liking be sure

00:13:57,140 --> 00:14:04,340
to set the change to be applied on

00:13:58,780 --> 00:14:06,200
subsequent to reboot it's often

00:14:04,340 --> 00:14:09,530
recommended to use a no-no appear or

00:14:06,200 --> 00:14:12,890
deadlines on any SSD drive as I said if

00:14:09,530 --> 00:14:16,340
you have SSD Drive try an LP it's really

00:14:12,890 --> 00:14:19,070
fast on Linux con conference last year

00:14:16,340 --> 00:14:21,800
in Edinburgh I have talked with some

00:14:19,070 --> 00:14:26,480
guys from Israel they have all servers

00:14:21,800 --> 00:14:29,420
with system on SSD drives and he brought

00:14:26,480 --> 00:14:33,170
me mail one month after conference and

00:14:29,420 --> 00:14:36,110
he said that it's really quicker and

00:14:33,170 --> 00:14:38,690
faster access to the disk there is

00:14:36,110 --> 00:14:41,350
usually no definitive answer to which

00:14:38,690 --> 00:14:44,450
algorithm to use you must write

00:14:41,350 --> 00:14:47,300
benchmarking each one will be your best

00:14:44,450 --> 00:14:49,190
option there are cases where cfq may not

00:14:47,300 --> 00:14:53,060
be the best scheduler for your system or

00:14:49,190 --> 00:14:56,930
applications as I said cfq is default

00:14:53,060 --> 00:14:59,540
algorithm on your computer and it's not

00:14:56,930 --> 00:15:01,820
always the best choice an example is if

00:14:59,540 --> 00:15:04,370
you are running a raid disk array with

00:15:01,820 --> 00:15:06,470
cash and credit controller if you have

00:15:04,370 --> 00:15:11,870
cash credit controller in hardware

00:15:06,470 --> 00:15:15,430
controller computer will set that cfq is

00:15:11,870 --> 00:15:18,410
the best but this last one deadline is

00:15:15,430 --> 00:15:22,590
always better choice

00:15:18,410 --> 00:15:25,710
I optimization iowait is the amount of

00:15:22,590 --> 00:15:29,160
time CPU is waiting for i 0 if you see

00:15:25,710 --> 00:15:31,290
consistent high I'll wait on your system

00:15:29,160 --> 00:15:34,680
it indicates a problem in the disk

00:15:31,290 --> 00:15:37,410
subsystem you should also monitor reach

00:15:34,680 --> 00:15:40,320
second and right second this is measured

00:15:37,410 --> 00:15:43,200
in blocks number of blocks to read/write

00:15:40,320 --> 00:15:46,320
per second there are also referred us by

00:15:43,200 --> 00:15:48,420
and Bowl block in and block out TPS

00:15:46,320 --> 00:15:51,000
indicates total two resurrections per

00:15:48,420 --> 00:15:53,760
second which is some of return section

00:15:51,000 --> 00:15:59,910
per second and right transaction per

00:15:53,760 --> 00:16:02,910
second then always choose the quickest

00:15:59,910 --> 00:16:06,300
file system you can choose between xt2

00:16:02,910 --> 00:16:10,830
ok it's very old it has no journaling

00:16:06,300 --> 00:16:13,140
then we have xt3 it's still default in

00:16:10,830 --> 00:16:15,870
some older distribution then if you

00:16:13,140 --> 00:16:20,880
choose if you install maybe it's less

00:16:15,870 --> 00:16:23,940
than the default file system is less

00:16:20,880 --> 00:16:29,850
than is still a riser FS don't use it

00:16:23,940 --> 00:16:32,700
it's not developing anymore we all know

00:16:29,850 --> 00:16:35,760
what is with hands on either so choose

00:16:32,700 --> 00:16:39,510
xt 3 is less than then if you are using

00:16:35,760 --> 00:16:42,150
this newer distribution slice 11 red

00:16:39,510 --> 00:16:46,760
hair to boone to use egg state for all

00:16:42,150 --> 00:16:53,300
or you can use btrfs in a slice 11 but

00:16:46,760 --> 00:16:56,490
bit btrfs is quick but it's not

00:16:53,300 --> 00:17:00,230
supported by some third party program

00:16:56,490 --> 00:17:02,760
vendors like oracle if you will use

00:17:00,230 --> 00:17:05,670
database server the web application

00:17:02,760 --> 00:17:10,380
server on btrfs they will set such this

00:17:05,670 --> 00:17:14,150
is not supported and you always you can

00:17:10,380 --> 00:17:19,440
always tune file system options in fstab

00:17:14,150 --> 00:17:22,860
you can always choose options like no

00:17:19,440 --> 00:17:26,880
time no dear a time and your file system

00:17:22,860 --> 00:17:29,070
will be act much faster then when we are

00:17:26,880 --> 00:17:31,860
talking about this guy optimization we

00:17:29,070 --> 00:17:36,810
are talking about trade

00:17:31,860 --> 00:17:40,630
software or hardware raid many of us are

00:17:36,810 --> 00:17:46,210
still using software rate because

00:17:40,630 --> 00:17:49,600
hardware it is maybe not implemented in

00:17:46,210 --> 00:17:51,930
Colonel from our right vendor so you can

00:17:49,600 --> 00:17:54,640
use rate to zero okay this is not

00:17:51,930 --> 00:17:58,120
mirroring this is driving then the right

00:17:54,640 --> 00:18:00,700
one never use rate five it's not

00:17:58,120 --> 00:18:03,760
recommended it's very slow if you want

00:18:00,700 --> 00:18:07,900
to use something like 85 it's better to

00:18:03,760 --> 00:18:10,120
use rate 6 and right then is the best

00:18:07,900 --> 00:18:14,560
choice but you will lose half of your

00:18:10,120 --> 00:18:17,220
disk capabilities when we are talking

00:18:14,560 --> 00:18:21,670
about disc optimization you must always

00:18:17,220 --> 00:18:27,610
use benchmark programs like maybe Bonnie

00:18:21,670 --> 00:18:30,790
+ + to measure disk speed of disk you

00:18:27,610 --> 00:18:33,700
can use HD parm as the parm you can

00:18:30,790 --> 00:18:37,720
always upgrade bios of your server and

00:18:33,700 --> 00:18:41,910
firmer of your disk and check if your

00:18:37,720 --> 00:18:45,010
disk is maybe park your head ok the

00:18:41,910 --> 00:18:48,010
parking the head it's not think on

00:18:45,010 --> 00:18:52,450
server disk it's much more thing on

00:18:48,010 --> 00:18:55,540
desktop disk if you have maybe disk this

00:18:52,450 --> 00:18:57,900
western digital green or this series it

00:18:55,540 --> 00:19:03,190
will park your head it will park at and

00:18:57,900 --> 00:19:06,220
this startup will be much slower but on

00:19:03,190 --> 00:19:10,860
you can always change firmware of your

00:19:06,220 --> 00:19:14,560
disk and change this disk parking

00:19:10,860 --> 00:19:20,200
settings that these discs will not park

00:19:14,560 --> 00:19:22,600
the head ok about network tuning a good

00:19:20,200 --> 00:19:25,570
understanding of tcp/ip concept is

00:19:22,600 --> 00:19:28,780
helpful while analyzing any network

00:19:25,570 --> 00:19:30,810
issues for network interfaces you should

00:19:28,780 --> 00:19:34,030
monitor total number of packets received

00:19:30,810 --> 00:19:37,510
and sent through the interfaces number

00:19:34,030 --> 00:19:40,840
of dropped packets and so on in a

00:19:37,510 --> 00:19:43,600
company where I work we recently I think

00:19:40,840 --> 00:19:44,860
one or maybe two months ago but Oracle

00:19:43,600 --> 00:19:48,790
Exadata

00:19:44,860 --> 00:19:51,940
and cisco ucs servers for oracle exadata

00:19:48,790 --> 00:19:54,730
for storing information like date of our

00:19:51,940 --> 00:19:59,470
house and cisco with eight blade cisco

00:19:54,730 --> 00:20:03,910
ucs blades for virtualization we have

00:19:59,470 --> 00:20:07,750
measured the cisco has to 10 gig switch

00:20:03,910 --> 00:20:11,380
switches and we have measured network

00:20:07,750 --> 00:20:14,620
performance from oracle exadata 232

00:20:11,380 --> 00:20:18,640
through these 10 gig switches two blades

00:20:14,620 --> 00:20:23,650
on which are running on the UCS on a 10

00:20:18,640 --> 00:20:29,919
geek Network the maximum throughput was

00:20:23,650 --> 00:20:34,480
three gigs not good so why linux from

00:20:29,919 --> 00:20:38,500
itself I hope the two cities Linux for

00:20:34,480 --> 00:20:42,970
it sells it's not made this network IP

00:20:38,500 --> 00:20:49,090
stake is not made for 10 gig network but

00:20:42,970 --> 00:20:53,260
if you change these variables in a proc

00:20:49,090 --> 00:20:56,049
file system you can expect bandwidth

00:20:53,260 --> 00:21:00,040
will increase from three geeks to six or

00:20:56,049 --> 00:21:03,070
six six or seven gigs and these

00:21:00,040 --> 00:21:05,650
variables are ideal for servers that are

00:21:03,070 --> 00:21:08,140
serving up huge numbers of concurrent

00:21:05,650 --> 00:21:11,230
sessions there are some TCP options that

00:21:08,140 --> 00:21:13,450
should probably be enabled with a large

00:21:11,230 --> 00:21:15,070
number of clients doing their best to

00:21:13,450 --> 00:21:17,290
kill the server it's probably not

00:21:15,070 --> 00:21:20,140
uncommon for the server to have twenty

00:21:17,290 --> 00:21:22,419
thousand or more open sockets you can

00:21:20,140 --> 00:21:28,299
change these settings and your network

00:21:22,419 --> 00:21:32,640
will be much faster even on 100 to make

00:21:28,299 --> 00:21:36,970
switches but if you are using 10 geek

00:21:32,640 --> 00:21:40,510
switches and 10 week network art it's

00:21:36,970 --> 00:21:43,210
always the best idea to increase tcp

00:21:40,510 --> 00:21:46,330
mugs buffer size increase linux out

00:21:43,210 --> 00:21:48,700
attuning tcp buffer limit increase the

00:21:46,330 --> 00:21:51,400
length of processor input queue and the

00:21:48,700 --> 00:21:55,419
most important recommended the default

00:21:51,400 --> 00:21:56,910
congestion control to change it to HTTP

00:21:55,419 --> 00:22:03,580
and

00:21:56,910 --> 00:22:07,950
to enable the if you have enabled jumbo

00:22:03,580 --> 00:22:13,870
frames is the best to change MTU probing

00:22:07,950 --> 00:22:16,660
ok if you are using 10 gig switch it's

00:22:13,870 --> 00:22:20,260
always the best that you are using jumbo

00:22:16,660 --> 00:22:25,630
frames that means that you are you must

00:22:20,260 --> 00:22:31,060
use MTU 9000 we have determined this I

00:22:25,630 --> 00:22:35,380
think two weeks ago but if you are using

00:22:31,060 --> 00:22:37,570
jumbo frames or until nine thousand your

00:22:35,380 --> 00:22:43,080
switches and other equipment and other

00:22:37,570 --> 00:22:45,690
servers must support this the this

00:22:43,080 --> 00:22:49,090
recommend the default congestion control

00:22:45,690 --> 00:22:52,980
what is congestion control TCP

00:22:49,090 --> 00:22:56,860
congestion avoidance algorithms we have

00:22:52,980 --> 00:23:01,120
56 algorithms the default algorithm in

00:22:56,860 --> 00:23:03,100
all linux and unix and all computers and

00:23:01,120 --> 00:23:06,730
the windows computer windows operating

00:23:03,100 --> 00:23:09,520
system to is reno traditional tcp used

00:23:06,730 --> 00:23:14,320
by almost all operating system then we

00:23:09,520 --> 00:23:17,800
have cubic cubic tcp be icy vict CP h

00:23:14,320 --> 00:23:19,870
tcp hamilton tcp which is the best

00:23:17,800 --> 00:23:23,830
solution if you have 10 geek or faster

00:23:19,870 --> 00:23:26,320
need Nick Vegas tcp Vegas and westwood

00:23:23,830 --> 00:23:30,910
optimal which is optimized for lose

00:23:26,320 --> 00:23:34,840
networks so if you are using 10 gigs

00:23:30,910 --> 00:23:39,520
switches use hamilton tcp how to

00:23:34,840 --> 00:23:47,920
determine which are you using just write

00:23:39,520 --> 00:23:50,680
down this comment you will i'm using

00:23:47,920 --> 00:23:53,710
Cuba canary note this is some mixture in

00:23:50,680 --> 00:23:59,050
a newest linux distribution but if you

00:23:53,710 --> 00:24:06,640
use 10 gigs which just change it to HTC

00:23:59,050 --> 00:24:09,670
p ok next slide about memory

00:24:06,640 --> 00:24:12,790
optimization if you have six

00:24:09,670 --> 00:24:15,010
geek from installed in your servers you

00:24:12,790 --> 00:24:18,490
have ceased in a 16 gig of physical

00:24:15,010 --> 00:24:21,310
memory virtual memory it's swap space

00:24:18,490 --> 00:24:23,650
available on the disk + physical memory

00:24:21,310 --> 00:24:25,900
the virtual memory contains both user

00:24:23,650 --> 00:24:28,750
space and kernel space using either

00:24:25,900 --> 00:24:31,210
32-bit or 64-bit systems makes a big

00:24:28,750 --> 00:24:35,590
difference in how much memory approaches

00:24:31,210 --> 00:24:37,240
can utilize on a 30 Pete sister 32-bit

00:24:35,590 --> 00:24:40,330
system a process can only access a

00:24:37,240 --> 00:24:43,510
maximum of forgive forgive of virtual

00:24:40,330 --> 00:24:47,290
memory and on 64-bit system there is no

00:24:43,510 --> 00:24:53,080
such limitation when we are all using

00:24:47,290 --> 00:24:57,250
32-bit system it's a it has always been

00:24:53,080 --> 00:25:01,300
problem with swap space they have said

00:24:57,250 --> 00:25:05,470
okay we have two gigs of ram and i have

00:25:01,300 --> 00:25:07,750
installed one software for commercial

00:25:05,470 --> 00:25:11,730
software for proxy servers I don't

00:25:07,750 --> 00:25:15,280
remember which one it's and tasted okay

00:25:11,730 --> 00:25:20,770
you need to two gigs of ram and 10 gigs

00:25:15,280 --> 00:25:24,490
of swap space but yeah oil trend micro

00:25:20,770 --> 00:25:28,600
one trend micro proxy servers but don't

00:25:24,490 --> 00:25:33,750
know which one and it's not going you

00:25:28,600 --> 00:25:37,570
cannot use more than four gigs ram on

00:25:33,750 --> 00:25:41,170
32-bit system so what you can do just

00:25:37,570 --> 00:25:43,960
make two for geeks partition and two two

00:25:41,170 --> 00:25:48,970
gig partition of swap space but this is

00:25:43,960 --> 00:25:52,150
history unused memory will be used as

00:25:48,970 --> 00:25:53,890
file system cache by the kernel linux

00:25:52,150 --> 00:25:57,460
system will swap when it needs more

00:25:53,890 --> 00:26:01,300
memory when it needs more memory and the

00:25:57,460 --> 00:26:02,890
tenth physical memory he has when it

00:26:01,300 --> 00:26:04,630
swaps you to provide the list used

00:26:02,890 --> 00:26:06,640
memory pages from the bay physical

00:26:04,630 --> 00:26:10,000
memory to describe swap space on the

00:26:06,640 --> 00:26:12,430
disk but it's slow a lot of swapping can

00:26:10,000 --> 00:26:13,960
use can cause performance issues as the

00:26:12,430 --> 00:26:16,360
disk is much slower than the physical

00:26:13,960 --> 00:26:20,410
memory and it takes time to swap the

00:26:16,360 --> 00:26:23,120
memory pages from memory to disk when we

00:26:20,410 --> 00:26:29,210
are talking about memory optimization

00:26:23,120 --> 00:26:32,380
in past years 23 years ago we have new

00:26:29,210 --> 00:26:36,260
technique dance memory we have Numa

00:26:32,380 --> 00:26:39,620
non-uniform memory access we all know

00:26:36,260 --> 00:26:43,280
huge pages and we can manage virtual

00:26:39,620 --> 00:26:48,110
memory pages with flashing dirty pages

00:26:43,280 --> 00:26:52,220
in and to change swapping behavior okay

00:26:48,110 --> 00:26:54,980
nomads have anyone heard of new mod no

00:26:52,220 --> 00:26:57,410
Matty's one demon its user level demon

00:26:54,980 --> 00:26:59,780
to automatically improve out-of-the-box

00:26:57,410 --> 00:27:03,160
Numa system performance it's available

00:26:59,780 --> 00:27:08,570
in fedora 17 Red Hat Enterprise Linux

00:27:03,160 --> 00:27:13,790
6.3 ok SUSE Linux Enterprise Server 11

00:27:08,570 --> 00:27:17,870
and opensuse I think 12 it's not enabled

00:27:13,790 --> 00:27:20,300
by default these women monitors

00:27:17,870 --> 00:27:23,960
available system resources on a per node

00:27:20,300 --> 00:27:25,700
basis and assigns significant consumer

00:27:23,960 --> 00:27:28,580
processes to align the resources for

00:27:25,700 --> 00:27:31,220
optimum Numa performance it rebalances

00:27:28,580 --> 00:27:33,320
when necessary and it provides

00:27:31,220 --> 00:27:34,790
replacement advice for the best initial

00:27:33,320 --> 00:27:39,260
purchase placement in a resource

00:27:34,790 --> 00:27:42,980
affinity if your servers is some kind of

00:27:39,260 --> 00:27:47,900
hyper visor for kvm xn or such

00:27:42,980 --> 00:27:50,559
open-source virtualization switch on a

00:27:47,900 --> 00:27:56,240
new mod just switch it on because

00:27:50,559 --> 00:28:00,320
default it's not enabled by default then

00:27:56,240 --> 00:28:03,020
huge pages to make pages vs. 4k standard

00:28:00,320 --> 00:28:08,240
clinics pages virtual to physical page

00:28:03,020 --> 00:28:10,460
map is 512 times smaller till we can map

00:28:08,240 --> 00:28:14,630
more physical pages resulting in fewer

00:28:10,460 --> 00:28:17,360
mrs. traditional huge pace just always

00:28:14,630 --> 00:28:20,690
paint transparent huge pages are

00:28:17,360 --> 00:28:25,910
available in Red Hat Enterprise Linux 6

00:28:20,690 --> 00:28:28,370
and / 11 as in opensuse to most

00:28:25,910 --> 00:28:30,740
databases support huge pages if you

00:28:28,370 --> 00:28:33,280
install Oracle database it will always

00:28:30,740 --> 00:28:36,150
write that you must enable huge pages

00:28:33,280 --> 00:28:39,420
long geek pages supported

00:28:36,150 --> 00:28:44,640
it's supported the newer hardware how to

00:28:39,420 --> 00:28:47,460
configure huge pages to 16 or here on 28

00:28:44,640 --> 00:28:52,500
gigs just going to proc file system and

00:28:47,460 --> 00:28:59,940
you will use huge pages or this comment

00:28:52,500 --> 00:29:04,170
in CTL flashing cash or cash we can drop

00:28:59,940 --> 00:29:06,720
a new sketch freeze unused memory file

00:29:04,170 --> 00:29:10,590
cache if the database use cash may

00:29:06,720 --> 00:29:14,340
notice slow slow down how can we free

00:29:10,590 --> 00:29:18,840
page cache just a whole one to drop

00:29:14,340 --> 00:29:23,310
caches how can we free slap cash just a

00:29:18,840 --> 00:29:26,190
hoe to to drop caches and a hoe treif to

00:29:23,310 --> 00:29:29,820
drop caches to free page cache and slap

00:29:26,190 --> 00:29:33,390
cash in at the same time this will not

00:29:29,820 --> 00:29:37,680
happen instantly we must wait a few

00:29:33,390 --> 00:29:42,510
seconds or few minutes and it doesn't

00:29:37,680 --> 00:29:44,370
help always so happiness happiness

00:29:42,510 --> 00:29:47,670
controls how aggressively the system

00:29:44,370 --> 00:29:52,770
reclaims mapped memory defaults weapon

00:29:47,670 --> 00:29:56,130
asan opens who said the and all linux

00:29:52,770 --> 00:29:58,650
distributions is about 60 decreasing

00:29:56,130 --> 00:30:00,890
sixty percent decrease in this number

00:29:58,650 --> 00:30:04,260
means more aggressive reclaiming of

00:30:00,890 --> 00:30:06,420
unmapped page cache memory increasing

00:30:04,260 --> 00:30:08,640
this number means more aggressive

00:30:06,420 --> 00:30:12,390
swapping of mapped memory which is the

00:30:08,640 --> 00:30:15,000
best you must write you must try in

00:30:12,390 --> 00:30:18,240
benchmarking it depends of what kind of

00:30:15,000 --> 00:30:20,670
server is hardware specific server for

00:30:18,240 --> 00:30:24,090
what purposes you are using your server

00:30:20,670 --> 00:30:27,180
and so on when we are talking about

00:30:24,090 --> 00:30:30,450
optimizing we must always remember the

00:30:27,180 --> 00:30:32,370
18-20 rule that means eighty percent of

00:30:30,450 --> 00:30:34,440
the performance improvement comes from

00:30:32,370 --> 00:30:37,020
tuning the application and the rest

00:30:34,440 --> 00:30:43,230
20-person come from tuning the

00:30:37,020 --> 00:30:46,590
infrastructure components which are the

00:30:43,230 --> 00:30:49,700
best system monitoring tools you know

00:30:46,590 --> 00:30:52,760
all this tool vmstat nets that p

00:30:49,700 --> 00:30:57,559
stop a top H stop em top Iowa State and

00:30:52,760 --> 00:31:00,380
it's always view nothing specific then

00:30:57,559 --> 00:31:05,570
Colonel tuning hmm when we are talking

00:31:00,380 --> 00:31:07,460
about Colonel tuning it's always good

00:31:05,570 --> 00:31:10,340
solution to recompile your Crennel to

00:31:07,460 --> 00:31:13,610
make your color nail small smaller but

00:31:10,340 --> 00:31:16,039
if you recompile your cornell excluding

00:31:13,610 --> 00:31:18,500
needed modules on enterprise

00:31:16,039 --> 00:31:20,620
distribution like red hat enterprise

00:31:18,500 --> 00:31:24,590
linux or suse linux enterprise server

00:31:20,620 --> 00:31:27,760
then your vendor Sue's novell suse and

00:31:24,590 --> 00:31:31,669
the redhead will not support your

00:31:27,760 --> 00:31:35,360
recompiled colonel you can buy from them

00:31:31,669 --> 00:31:40,100
real time Colonel but real tank Colonel

00:31:35,360 --> 00:31:45,620
options on redhead and Suzy are not

00:31:40,100 --> 00:31:49,360
cheap so if you want to recompile your

00:31:45,620 --> 00:31:54,980
Colonel I have just a second i have one

00:31:49,360 --> 00:31:57,880
PDF where you can see which are the best

00:31:54,980 --> 00:31:57,880
options for

00:32:33,559 --> 00:32:40,710
this is these are Grinnell configuration

00:32:37,620 --> 00:32:44,750
options this is common lined options

00:32:40,710 --> 00:32:48,650
when IAM are making make config and

00:32:44,750 --> 00:32:52,860
which are default options and which

00:32:48,650 --> 00:32:57,480
options you must change to use small

00:32:52,860 --> 00:33:00,179
kernel options q some kernel data says

00:32:57,480 --> 00:33:03,990
is tuned some net related data set is to

00:33:00,179 --> 00:33:07,020
turn on k malik accounting print out all

00:33:03,990 --> 00:33:10,940
bootman publications and so on and these

00:33:07,020 --> 00:33:15,210
options are it's not so many options but

00:33:10,940 --> 00:33:19,710
your kernel will be smaller and will be

00:33:15,210 --> 00:33:24,720
much faster you can buy realtime kernel

00:33:19,710 --> 00:33:32,309
from your vendor it will license cause

00:33:24,720 --> 00:33:37,080
our 10 or 20 times higher than the

00:33:32,309 --> 00:33:43,110
ordinary colonel but you can do the same

00:33:37,080 --> 00:33:48,659
thing with this and it will take your 15

00:33:43,110 --> 00:33:52,500
or 30 minute of your time I will put

00:33:48,659 --> 00:34:02,220
this slide also on conference link that

00:33:52,500 --> 00:34:04,770
you can grab grab them then okay when we

00:34:02,220 --> 00:34:07,849
are talking about tuning yes we can

00:34:04,770 --> 00:34:10,230
always tuning some applications like

00:34:07,849 --> 00:34:14,760
samba file and print shall shower

00:34:10,230 --> 00:34:17,790
sharing we can enable III all this is

00:34:14,760 --> 00:34:19,530
extreme options we can roll user all

00:34:17,790 --> 00:34:22,710
read and write we can turn on

00:34:19,530 --> 00:34:27,899
opportunistic locking we can switch off

00:34:22,710 --> 00:34:32,550
or use smaller lock level and if we are

00:34:27,899 --> 00:34:35,070
using old version of samba maybe version

00:34:32,550 --> 00:34:38,879
to just switch it to version four it's

00:34:35,070 --> 00:34:40,970
not hard and it's much faster okay we

00:34:38,879 --> 00:34:43,859
whenever we are talking about database

00:34:40,970 --> 00:34:46,860
optimization and you if you are using

00:34:43,859 --> 00:34:50,370
MySQL then you can use MySQL

00:34:46,860 --> 00:34:54,600
applications I have a lot of web hosting

00:34:50,370 --> 00:34:59,460
services one of really fine you too Liz

00:34:54,600 --> 00:35:03,840
mysql tuner it will watch your weapon

00:34:59,460 --> 00:35:06,660
mysql server for 24 or 48 hours and he

00:35:03,840 --> 00:35:10,140
will say to what options you need to

00:35:06,660 --> 00:35:13,460
change in my dot CFN configuration you

00:35:10,140 --> 00:35:17,760
can optimize table to maybe look which

00:35:13,460 --> 00:35:22,140
the tables are using maybe change

00:35:17,760 --> 00:35:25,710
database ok when we are talking about

00:35:22,140 --> 00:35:27,960
opinel dieppe tuning the most important

00:35:25,710 --> 00:35:29,460
unique aspect 40 Penelope is deciding

00:35:27,960 --> 00:35:33,810
what attributes you want to build

00:35:29,460 --> 00:35:36,120
indexes on this is one example if you

00:35:33,810 --> 00:35:39,780
add the following parameters to select

00:35:36,120 --> 00:35:41,940
calm before entering the info into the

00:35:39,780 --> 00:35:45,690
database table or get index it and

00:35:41,940 --> 00:35:49,710
performance will increase then when we

00:35:45,690 --> 00:35:52,170
are talking about apache make sure you

00:35:49,710 --> 00:35:54,630
are starting a ton of initial demons if

00:35:52,170 --> 00:35:57,690
you want good benchmark scores you can

00:35:54,630 --> 00:36:03,060
change this in httpd.conf or default

00:35:57,690 --> 00:36:06,600
conf if your web sites are slow on

00:36:03,060 --> 00:36:10,560
apache server use optimizers use

00:36:06,600 --> 00:36:12,720
memcache jr apache minimize numbers of

00:36:10,560 --> 00:36:15,300
apache modules don't use unneeded

00:36:12,720 --> 00:36:17,310
modules maybe try to change apache for

00:36:15,300 --> 00:36:21,570
engines which is in some occasions

00:36:17,310 --> 00:36:24,060
faster then when we are talking about

00:36:21,570 --> 00:36:26,910
benchmark a good set of benchmarking

00:36:24,060 --> 00:36:29,370
utilities are often very helpful in

00:36:26,910 --> 00:36:31,440
doing systems tuning work it is

00:36:29,370 --> 00:36:34,560
impossible to duplicate real-world

00:36:31,440 --> 00:36:37,560
situations but that isn't really the

00:36:34,560 --> 00:36:39,720
goal of a goon bed benchmarking a goon

00:36:37,560 --> 00:36:41,670
the benchmark typically tries to measure

00:36:39,720 --> 00:36:44,970
the performance of one particular thing

00:36:41,670 --> 00:36:46,920
very accurately if you understand what

00:36:44,970 --> 00:36:51,720
the benchmarks are doing they can be

00:36:46,920 --> 00:36:55,590
very useful tools benchmarking tools

00:36:51,720 --> 00:36:57,270
Bonnie plus plus plus it's a free file

00:36:55,590 --> 00:37:00,180
system benchmarking tool for unix-like

00:36:57,270 --> 00:37:00,549
operating operating systems DB bench is

00:37:00,180 --> 00:37:04,119
a total

00:37:00,549 --> 00:37:07,569
gaynor generate I over clothes HTTP load

00:37:04,119 --> 00:37:11,319
run multiple HTTP HTTP fetches in

00:37:07,569 --> 00:37:12,910
parallel DK ftp bench like DB bench tile

00:37:11,319 --> 00:37:15,819
bench is a multi tree that I'll

00:37:12,910 --> 00:37:18,539
benchmark TT CP utility program for

00:37:15,819 --> 00:37:20,920
measuring network throughput net pair

00:37:18,539 --> 00:37:23,859
networking performance performance

00:37:20,920 --> 00:37:26,979
tester and I perv network performance

00:37:23,859 --> 00:37:30,039
tester this is my favorite I perv it

00:37:26,979 --> 00:37:35,019
will run I perv server and I perv client

00:37:30,039 --> 00:37:37,449
to taste network speed okay I didn't

00:37:35,019 --> 00:37:40,599
identify and solve performance issues

00:37:37,449 --> 00:37:41,920
you must understand the problem half of

00:37:40,599 --> 00:37:44,769
the problem is solved when you clearly

00:37:41,920 --> 00:37:47,349
understand what the problem is monitor

00:37:44,769 --> 00:37:49,359
and collect data after defining the

00:37:47,349 --> 00:37:50,979
problem clearly monitor the system and

00:37:49,359 --> 00:37:56,549
try to collect as much data as possible

00:37:50,979 --> 00:37:59,519
on various subsystems eliminate a narrow

00:37:56,549 --> 00:38:02,259
down issues after having a list of

00:37:59,519 --> 00:38:05,069
potential issues dive into each one of

00:38:02,259 --> 00:38:08,679
them and eliminate any non issues and

00:38:05,069 --> 00:38:09,999
the most important make one change at

00:38:08,679 --> 00:38:14,489
the time don't try to make multiple

00:38:09,999 --> 00:38:17,859
multiple changes at one time we have

00:38:14,489 --> 00:38:21,779
started to optimize servers in our

00:38:17,859 --> 00:38:28,359
company I think now 23 years ago we have

00:38:21,779 --> 00:38:33,039
lots of virtualized servers on kvm and I

00:38:28,359 --> 00:38:36,880
think now all things are running very

00:38:33,039 --> 00:38:42,369
smoothly but we really need a lot of

00:38:36,880 --> 00:38:47,099
time to make servers to be optimized at

00:38:42,369 --> 00:38:51,849
as much as we can that was all for today

00:38:47,099 --> 00:38:56,319
for if anyone has questions you can ask

00:38:51,849 --> 00:39:03,059
now we have in 15 minutes you can write

00:38:56,319 --> 00:39:03,059
me an email so any questions

00:39:18,460 --> 00:39:27,820
I'm most of your advices I fully agree

00:39:23,910 --> 00:39:30,130
compiling the colonel I do not

00:39:27,820 --> 00:39:32,500
understand fully what you want to save

00:39:30,130 --> 00:39:36,849
their because of course the new kernel

00:39:32,500 --> 00:39:39,910
will be smaller but on a server the

00:39:36,849 --> 00:39:43,300
space the colonel needs is neglected in

00:39:39,910 --> 00:39:46,150
my experience so what of course then you

00:39:43,300 --> 00:39:48,490
have a bit better locality but I really

00:39:46,150 --> 00:39:51,609
don't think that's measurable efforts do

00:39:48,490 --> 00:39:54,970
you have a measurable enhancement do you

00:39:51,609 --> 00:39:57,280
have examples that you really get

00:39:54,970 --> 00:39:59,710
measurable improvements on a big server

00:39:57,280 --> 00:40:13,060
by the kernel on embedded it's complete

00:39:59,710 --> 00:40:16,540
different story by ton servers which are

00:40:13,060 --> 00:40:22,630
using which must use real time Colonel

00:40:16,540 --> 00:40:25,780
but this compiling colonel are still

00:40:22,630 --> 00:40:30,880
from 10 years ago 15 years ago I have

00:40:25,780 --> 00:40:32,530
started with Linux in 1993 1994 10 the

00:40:30,880 --> 00:40:35,190
first thing when you installed linux on

00:40:32,530 --> 00:40:39,670
server Russ I must compile this kernel

00:40:35,190 --> 00:40:44,440
now okay now you don't need to recompile

00:40:39,670 --> 00:40:47,200
your Colonel but I always said that all

00:40:44,440 --> 00:40:53,530
kernels have too many more modules

00:40:47,200 --> 00:40:57,910
included that all kernels have is made

00:40:53,530 --> 00:41:01,210
for many servers it's not and if you

00:40:57,910 --> 00:41:04,060
compile your new kernel you can compile

00:41:01,210 --> 00:41:06,040
it that it will run smoothly and the

00:41:04,060 --> 00:41:10,619
best on your servers you will not gain

00:41:06,040 --> 00:41:14,200
any really high performance issues but

00:41:10,619 --> 00:41:21,119
maybe on some old systems or for your

00:41:14,200 --> 00:41:21,119
own fate anyone else

00:41:28,289 --> 00:41:34,059
okay then thanks for your patience I

00:41:31,240 --> 00:41:37,450
will be here today tomorrow and on

00:41:34,059 --> 00:41:39,569
Monday and you can ask everything thank

00:41:37,450 --> 00:41:39,569

YouTube URL: https://www.youtube.com/watch?v=65tjRPi-x94


