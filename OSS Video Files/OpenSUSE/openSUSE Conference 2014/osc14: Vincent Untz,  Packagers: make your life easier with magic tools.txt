Title: osc14: Vincent Untz,  Packagers: make your life easier with magic tools
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	One of the main area of contributions to openSUSE is the packages, and we have a great amount of amazing packagers. Still, working on the packages can be a painful task when it becomes repetitive. Good news! It turns out that there are tools to help you for this, and for some reason, they're not as used as they should be, which means that some of us are still suffering more pain than they need to.

Come to this session to learn about some of these tools (osc collab! obs services!) or to share your tips with others.
Captions: 
	00:00:00,000 --> 00:00:06,509
okay ah so you have to suffer 30 minutes

00:00:03,810 --> 00:00:11,519
with me I see that cool left is a smart

00:00:06,509 --> 00:00:13,710
guy so I'm going to talk about some

00:00:11,519 --> 00:00:15,599
tools that I've used in my life of

00:00:13,710 --> 00:00:18,869
packager that's my best life now I'm

00:00:15,599 --> 00:00:21,660
doing nothing and that made my life much

00:00:18,869 --> 00:00:23,550
easier but uh I think it's actually some

00:00:21,660 --> 00:00:26,910
tools well some of you already know them

00:00:23,550 --> 00:00:31,080
obviously some you might not know yet

00:00:26,910 --> 00:00:32,910
and we'll see the reason I wanted to

00:00:31,080 --> 00:00:36,000
discuss about all that is that packaging

00:00:32,910 --> 00:00:38,790
is obviously a cool part of what we do

00:00:36,000 --> 00:00:40,260
in opensuse because the biggest project

00:00:38,790 --> 00:00:42,239
inside the project is the distribution

00:00:40,260 --> 00:00:45,059
and you will see what we need for the

00:00:42,239 --> 00:00:46,500
distribution is backers so it's

00:00:45,059 --> 00:00:48,300
something that we really need and we

00:00:46,500 --> 00:00:51,600
need to make it easy for people to do

00:00:48,300 --> 00:00:55,170
and usually when you do packaging for

00:00:51,600 --> 00:00:58,320
like one month two months 6 months 1

00:00:55,170 --> 00:01:01,199
year two years five years at some point

00:00:58,320 --> 00:01:02,879
you find that there are a lot of things

00:01:01,199 --> 00:01:04,830
that are pretty boring to do and that

00:01:02,879 --> 00:01:08,700
you don't want to do manually and that

00:01:04,830 --> 00:01:10,320
you want to just stop doing and so

00:01:08,700 --> 00:01:12,060
packaging can be pretty boring and

00:01:10,320 --> 00:01:13,890
annoying it's also challenging and very

00:01:12,060 --> 00:01:15,659
interesting values ways but there's a

00:01:13,890 --> 00:01:17,340
big part which can be pretty boring and

00:01:15,659 --> 00:01:20,700
that's the pub where we can make life

00:01:17,340 --> 00:01:23,130
easier for people so I'll just assume

00:01:20,700 --> 00:01:27,840
that everybody knows what is a spec file

00:01:23,130 --> 00:01:29,490
I won't introduce that right now but one

00:01:27,840 --> 00:01:32,720
of the first thing I realized when I

00:01:29,490 --> 00:01:35,670
started to do packaging is that

00:01:32,720 --> 00:01:38,850
obviously everybody has its own style

00:01:35,670 --> 00:01:41,130
and does things differently but it's

00:01:38,850 --> 00:01:43,860
much easier if there's some kind of

00:01:41,130 --> 00:01:47,220
standard guideline for how to do a a

00:01:43,860 --> 00:01:49,590
spec file like um well I should have

00:01:47,220 --> 00:01:52,920
taken another screenshot but you can

00:01:49,590 --> 00:01:56,670
have like a million way to write this

00:01:52,920 --> 00:01:58,799
and when you look at this and you review

00:01:56,670 --> 00:02:00,270
things and you just change it back it's

00:01:58,799 --> 00:02:02,219
done by somebody else if it looks

00:02:00,270 --> 00:02:05,310
different it takes you a lot of time to

00:02:02,219 --> 00:02:08,250
analyze and understand correctly and so

00:02:05,310 --> 00:02:10,229
one of the first thing that I realized

00:02:08,250 --> 00:02:13,460
when i started doing packaging that this

00:02:10,229 --> 00:02:15,770
was really painful and so

00:02:13,460 --> 00:02:18,110
all was knocking myself started doing a

00:02:15,770 --> 00:02:20,350
project called spec cleaner that some

00:02:18,110 --> 00:02:22,640
other people have taken since then and

00:02:20,350 --> 00:02:26,240
hopefully improved because it was a

00:02:22,640 --> 00:02:29,420
huggly hack but it was very useful

00:02:26,240 --> 00:02:31,100
because you just ran that on what we can

00:02:29,420 --> 00:02:35,300
still run it so you just run this on a

00:02:31,100 --> 00:02:39,530
spec file and it actually reformats

00:02:35,300 --> 00:02:42,380
everything the way it looks well the way

00:02:39,530 --> 00:02:45,890
it should be according to me but I think

00:02:42,380 --> 00:02:48,320
it's a like what should be one of the

00:02:45,890 --> 00:02:51,220
the current guidelines for false Picard

00:02:48,320 --> 00:02:54,080
formatting and this helps a lot because

00:02:51,220 --> 00:02:56,000
once you do that you need to do it only

00:02:54,080 --> 00:02:59,050
once and then you you really learn how

00:02:56,000 --> 00:03:02,990
to properly organized the spec file and

00:02:59,050 --> 00:03:04,670
it helps everybody in it just helps not

00:03:02,990 --> 00:03:06,200
just you but also all the people

00:03:04,670 --> 00:03:08,840
reviewing the package which are on all

00:03:06,200 --> 00:03:12,650
the people also stepping in and do doing

00:03:08,840 --> 00:03:15,830
further changes so that's a really small

00:03:12,650 --> 00:03:18,730
tool it's available in opensuse just

00:03:15,830 --> 00:03:21,140
install it with this zipper and run it

00:03:18,730 --> 00:03:23,050
it's quite convenient there's a mode

00:03:21,140 --> 00:03:27,080
where you can just diff the hold a

00:03:23,050 --> 00:03:28,820
version and the clean version so you can

00:03:27,080 --> 00:03:31,040
see what is different it's obviously bug

00:03:28,820 --> 00:03:33,700
in different ways all right because it

00:03:31,040 --> 00:03:39,020
cannot be perfect but it's pretty nice

00:03:33,700 --> 00:03:42,170
um and there was I talked about it

00:03:39,020 --> 00:03:46,420
yesterday yeah so if you missed it well

00:03:42,170 --> 00:03:51,950
you missed it i guess it was recorded so

00:03:46,420 --> 00:03:54,530
i also won't talk about OBS so you know

00:03:51,950 --> 00:03:56,720
if you don't know what OBS is i guess

00:03:54,530 --> 00:04:04,400
you need to attend a full session about

00:03:56,720 --> 00:04:07,250
it what it's not the same one there yeah

00:04:04,400 --> 00:04:10,840
we can discuss colors if you want I mean

00:04:07,250 --> 00:04:10,840
it's probably more interesting I agree

00:04:13,810 --> 00:04:21,440
so OBS so yeah if you don't know yes

00:04:19,009 --> 00:04:23,630
that's really the basic we the basic

00:04:21,440 --> 00:04:26,840
tool we need and we use in opensuse to

00:04:23,630 --> 00:04:29,419
build the whole distribution go look for

00:04:26,840 --> 00:04:31,100
documentation online talk online just

00:04:29,419 --> 00:04:33,470
watch it it's there's a lot of things

00:04:31,100 --> 00:04:35,180
one thing which is pretty important and

00:04:33,470 --> 00:04:38,479
that's what you see in the bottom

00:04:35,180 --> 00:04:40,460
screenshot is that we walk with reviews

00:04:38,479 --> 00:04:43,100
so we submit a change and people are

00:04:40,460 --> 00:04:47,260
reviewing reviewing it accepting it

00:04:43,100 --> 00:04:49,880
commenting on it or rejecting it and

00:04:47,260 --> 00:04:52,310
this is this is pretty important

00:04:49,880 --> 00:04:55,910
obviously for the quality but it's also

00:04:52,310 --> 00:05:00,650
a way to make sure that the style gets

00:04:55,910 --> 00:05:03,020
uniform over time and all of this

00:05:00,650 --> 00:05:06,169
reduced thing means that we have

00:05:03,020 --> 00:05:08,270
branches so people are doing the change

00:05:06,169 --> 00:05:10,220
in their own branch and it means that

00:05:08,270 --> 00:05:13,520
there are a lot of things that in the

00:05:10,220 --> 00:05:16,699
end we need to do to make life easier so

00:05:13,520 --> 00:05:18,830
we will see some some tools for that so

00:05:16,699 --> 00:05:21,789
obviously OSC that's the come online

00:05:18,830 --> 00:05:25,699
tool for OBS again I won't introduce OSC

00:05:21,789 --> 00:05:28,760
just a few comments that people might

00:05:25,699 --> 00:05:33,080
not know and that are really handy first

00:05:28,760 --> 00:05:36,199
one is OS CVC which is so one thing we

00:05:33,080 --> 00:05:39,830
do with packages that we have log of all

00:05:36,199 --> 00:05:42,740
the change that we do and it has a

00:05:39,830 --> 00:05:45,110
format with like should have put a

00:05:42,740 --> 00:05:47,690
screen shot but you'll your email

00:05:45,110 --> 00:05:49,370
address the date and so on and it's

00:05:47,690 --> 00:05:53,270
actually painful to type manually and

00:05:49,370 --> 00:05:55,580
just launching this will start you your

00:05:53,270 --> 00:06:01,300
preferred editor or we hopefully it's VI

00:05:55,580 --> 00:06:01,300
and then you can just type the change so

00:06:01,810 --> 00:06:11,060
it's not about religion it's just VI so

00:06:07,000 --> 00:06:14,960
that's really a handy comment over time

00:06:11,060 --> 00:06:17,449
we also realized that people are

00:06:14,960 --> 00:06:19,820
committing stuff of packages that are

00:06:17,449 --> 00:06:23,090
broken for different reasons and so

00:06:19,820 --> 00:06:24,289
there were some tools integrated to osc

00:06:23,090 --> 00:06:27,889
that were

00:06:24,289 --> 00:06:31,099
to prevent that so a really simple

00:06:27,889 --> 00:06:33,409
example is that if you reference a patch

00:06:31,099 --> 00:06:36,229
in the in the spec file and the patch

00:06:33,409 --> 00:06:38,569
doesn't exist when you try to commit it

00:06:36,229 --> 00:06:43,009
doesn't let you commit and that actually

00:06:38,569 --> 00:06:45,649
helps a lot well that removes a lot of

00:06:43,009 --> 00:06:48,439
stupid mistakes that people always do

00:06:45,649 --> 00:06:50,210
because they they walk too fast and that

00:06:48,439 --> 00:06:52,189
would make life easier more difficult

00:06:50,210 --> 00:06:55,360
for reviewers so there are a lot of

00:06:52,189 --> 00:06:59,899
small helpers like that in USC and

00:06:55,360 --> 00:07:02,779
another one which is nice I think and

00:06:59,899 --> 00:07:06,589
because I wrote it so it's probably the

00:07:02,779 --> 00:07:09,589
reason it's nice is a PDF so that's

00:07:06,589 --> 00:07:13,249
something I needed actually when I

00:07:09,589 --> 00:07:15,229
wanted to review a lot of things so when

00:07:13,249 --> 00:07:17,289
you are in your branch and you want to

00:07:15,229 --> 00:07:19,999
see the difference with the package you

00:07:17,289 --> 00:07:24,379
had to type this long command like OS

00:07:19,999 --> 00:07:28,009
erdf all project name of package and

00:07:24,379 --> 00:07:32,360
your project and it gets quickly painful

00:07:28,009 --> 00:07:35,029
and PDF is just a short way to say give

00:07:32,360 --> 00:07:37,719
me the diff between my package and where

00:07:35,029 --> 00:07:40,639
it comes from and it's very handy

00:07:37,719 --> 00:07:44,930
nothing to just type that and you have

00:07:40,639 --> 00:07:47,839
the diff so it's quite nice and so

00:07:44,930 --> 00:07:51,199
pitiful as actually first written as a

00:07:47,839 --> 00:07:53,240
plug-in and so OSC is extendable with

00:07:51,199 --> 00:07:56,809
plugins and its really nifty because you

00:07:53,240 --> 00:07:58,159
can do a lot of crazy stuff so there is

00:07:56,809 --> 00:08:01,009
a session just after this one about

00:07:58,159 --> 00:08:04,159
writing with C plugins I think it's

00:08:01,009 --> 00:08:06,080
misha who is doing it so i encourage you

00:08:04,159 --> 00:08:08,240
to stay just to learn about that because

00:08:06,080 --> 00:08:10,699
you can do crazy stuff with that and one

00:08:08,240 --> 00:08:14,659
good example of crazy stuff is the

00:08:10,699 --> 00:08:17,409
collab plugin which is totally huge and

00:08:14,659 --> 00:08:21,349
a lot of things it does a lot of things

00:08:17,409 --> 00:08:23,059
so that's a plug-in that we started to

00:08:21,349 --> 00:08:25,990
use in the gloom team years ago because

00:08:23,059 --> 00:08:29,749
we the dome team is maintaining like

00:08:25,990 --> 00:08:32,269
400-500 packages and it's a team of

00:08:29,749 --> 00:08:35,689
people working together so let's

00:08:32,269 --> 00:08:37,790
collaboration and very fast we realized

00:08:35,689 --> 00:08:39,890
that people were doing this

00:08:37,790 --> 00:08:44,060
thing in parallel and just duplicating a

00:08:39,890 --> 00:08:46,040
walk and so that was bad and we also

00:08:44,060 --> 00:08:48,490
realized that there's a lot of things

00:08:46,040 --> 00:08:51,800
that we could just make easier somewhat

00:08:48,490 --> 00:08:55,070
so there are a lot of handy commencing

00:08:51,800 --> 00:08:57,980
in to collab to first one and this is

00:08:55,070 --> 00:09:00,380
really small so you cannot treat it but

00:08:57,980 --> 00:09:02,570
it's there's a small way to add comments

00:09:00,380 --> 00:09:05,150
to a package which are temporary

00:09:02,570 --> 00:09:08,540
comments and the way we use it in the

00:09:05,150 --> 00:09:10,430
chrome team is to say well don't update

00:09:08,540 --> 00:09:12,350
to the new version for this package

00:09:10,430 --> 00:09:15,020
right now we know it's broken so leave

00:09:12,350 --> 00:09:17,630
it away we wait for the new version and

00:09:15,020 --> 00:09:19,460
so it's a simple way to tell something

00:09:17,630 --> 00:09:21,370
about a package or a new version of a

00:09:19,460 --> 00:09:24,770
package to everybody in the team

00:09:21,370 --> 00:09:27,890
obviously it only works if everybody in

00:09:24,770 --> 00:09:32,140
the team is using collab so that's a

00:09:27,890 --> 00:09:35,570
limitation obviously similarly there's a

00:09:32,140 --> 00:09:39,530
way to I would call that advice or relax

00:09:35,570 --> 00:09:41,810
to really tell the people i'm walking on

00:09:39,530 --> 00:09:43,190
this package you might not want to

00:09:41,810 --> 00:09:46,550
change it because otherwise we will

00:09:43,190 --> 00:09:50,630
conflict so that's a system of

00:09:46,550 --> 00:09:52,730
reservation you can just say iris of the

00:09:50,630 --> 00:09:56,740
package i will walk on it and then you

00:09:52,730 --> 00:09:59,420
can reserve it and otherwise you'll

00:09:56,740 --> 00:10:02,930
temporary loc is is that way after i

00:09:59,420 --> 00:10:07,310
think it's a two days or three days so

00:10:02,930 --> 00:10:10,070
it's quite nice especially when there's

00:10:07,310 --> 00:10:12,890
a new version of chrome going out we had

00:10:10,070 --> 00:10:15,370
a lot of people walking on all the

00:10:12,890 --> 00:10:17,660
updates together at the same point and

00:10:15,370 --> 00:10:19,250
there were always conflicting each other

00:10:17,660 --> 00:10:21,290
and doing the same package because you

00:10:19,250 --> 00:10:23,030
know when you update hugely sub package

00:10:21,290 --> 00:10:27,020
you take the alphabetical order and so

00:10:23,030 --> 00:10:32,660
justly conflict so we use that and its

00:10:27,020 --> 00:10:36,410
really really good for that the next one

00:10:32,660 --> 00:10:38,000
is the to do command and so this is one

00:10:36,410 --> 00:10:41,150
of the command which is the most use I

00:10:38,000 --> 00:10:45,350
guess for for the collab plugin this one

00:10:41,150 --> 00:10:48,560
is readable cool so what we have in this

00:10:45,350 --> 00:10:50,070
list is really a list of package where

00:10:48,560 --> 00:10:53,040
we need to do something

00:10:50,070 --> 00:10:56,210
so it could be improved a lot because I

00:10:53,040 --> 00:10:59,220
think we could we could had many other

00:10:56,210 --> 00:11:01,800
input sources but right now the main

00:10:59,220 --> 00:11:03,240
thing you we tell people that you can

00:11:01,800 --> 00:11:05,610
walk on this package because there's a

00:11:03,240 --> 00:11:09,930
new version and so you probably want to

00:11:05,610 --> 00:11:12,570
get to the new version so that's what we

00:11:09,930 --> 00:11:14,310
have if you look closely you have four

00:11:12,570 --> 00:11:16,950
coulombs the first one is name of the

00:11:14,310 --> 00:11:19,200
packages the second one is the version

00:11:16,950 --> 00:11:20,970
in the parent project so folk

00:11:19,200 --> 00:11:23,520
non-factory it would be open to the

00:11:20,970 --> 00:11:25,710
factory for instance you have the

00:11:23,520 --> 00:11:27,210
version in the developed project so

00:11:25,710 --> 00:11:29,430
don't fight or even sense and you have

00:11:27,210 --> 00:11:36,120
the upstream version and what you can

00:11:29,430 --> 00:11:38,910
all see also see is letters which means

00:11:36,120 --> 00:11:40,560
that s means there's a submission for

00:11:38,910 --> 00:11:43,650
this package so you might want to review

00:11:40,560 --> 00:11:46,140
it C means that there's a command for

00:11:43,650 --> 00:11:47,750
this package so maybe I don't update to

00:11:46,140 --> 00:11:51,300
the new version but read that went first

00:11:47,750 --> 00:11:54,300
the there's also you can reserve you see

00:11:51,300 --> 00:11:57,620
when a package is reserved and so on and

00:11:54,300 --> 00:12:00,900
so on so this is really handy because

00:11:57,620 --> 00:12:03,330
when you have free time you wonder when

00:12:00,900 --> 00:12:05,040
you have no bug left fix you wonder what

00:12:03,330 --> 00:12:08,580
to do you can just type that and see

00:12:05,040 --> 00:12:11,220
what you can do and the next natural

00:12:08,580 --> 00:12:14,130
step is that when you update the package

00:12:11,220 --> 00:12:18,080
for new version oh well you can use the

00:12:14,130 --> 00:12:21,240
update comment so this one is actually

00:12:18,080 --> 00:12:23,610
the really crazy one and the really

00:12:21,240 --> 00:12:26,670
magic one because it will just fetch the

00:12:23,610 --> 00:12:28,920
new towel it will unpack it to just

00:12:26,670 --> 00:12:31,140
extract what's new in the towel and it

00:12:28,920 --> 00:12:34,050
will show you that it will add the new

00:12:31,140 --> 00:12:38,460
files remove the old towel and so on it

00:12:34,050 --> 00:12:41,700
will start creating the change entry and

00:12:38,460 --> 00:12:45,120
so it's pretty cool because all of the

00:12:41,700 --> 00:12:47,310
things which are actually i would say

00:12:45,120 --> 00:12:50,520
boring in the update it automates for

00:12:47,310 --> 00:12:52,800
you and what's left is just checking the

00:12:50,520 --> 00:12:54,930
diff so that you can see what is your

00:12:52,800 --> 00:12:58,050
friend you can double-check you you want

00:12:54,930 --> 00:13:00,600
the update there's no nothing bad you

00:12:58,050 --> 00:13:02,370
can see the difference in the

00:13:00,600 --> 00:13:03,540
dependencies also so you can update the

00:13:02,370 --> 00:13:06,509
spec file

00:13:03,540 --> 00:13:08,130
and so it's it's pretty cool that's

00:13:06,509 --> 00:13:09,540
really what makes it easy for the gnome

00:13:08,130 --> 00:13:13,110
team to update all the packages ready

00:13:09,540 --> 00:13:15,779
fast in the end I can do a demo if we

00:13:13,110 --> 00:13:17,699
have some time I will see and after

00:13:15,779 --> 00:13:20,550
updating a packet what we use is built

00:13:17,699 --> 00:13:23,819
submit so what this does is actually it

00:13:20,550 --> 00:13:25,800
commits your change to your project it

00:13:23,819 --> 00:13:28,380
starts a built on the build service and

00:13:25,800 --> 00:13:29,940
it monitors the build if the building's

00:13:28,380 --> 00:13:34,380
succeeding it would just submit the

00:13:29,940 --> 00:13:37,230
package so in the end uh what we usually

00:13:34,380 --> 00:13:40,980
do is just 0 's equal up to do pick a

00:13:37,230 --> 00:13:43,139
package basically update change the spec

00:13:40,980 --> 00:13:45,959
file a bit if needed change update the

00:13:43,139 --> 00:13:47,519
change entry and then build submit and

00:13:45,959 --> 00:13:52,680
then you can go grab a coffee and you

00:13:47,519 --> 00:13:54,569
happy that's really cool so for the

00:13:52,680 --> 00:13:58,470
collab tool there's a web page that

00:13:54,569 --> 00:14:02,610
allows you to show all the data that the

00:13:58,470 --> 00:14:05,130
collab is using so this is hosted on the

00:14:02,610 --> 00:14:07,019
open sea servers which is really cool

00:14:05,130 --> 00:14:09,899
because it was hosted on my server

00:14:07,019 --> 00:14:12,750
before which was not reliable and so now

00:14:09,899 --> 00:14:15,300
it's much better and so you can also see

00:14:12,750 --> 00:14:16,980
all the packages you can see the version

00:14:15,300 --> 00:14:18,750
in the projects in the different

00:14:16,980 --> 00:14:21,060
projects you can see the extreme version

00:14:18,750 --> 00:14:26,940
if we have this information and a lot of

00:14:21,060 --> 00:14:31,380
things but it's it's pretty basic so

00:14:26,940 --> 00:14:33,720
oops all of this the collab plug-in

00:14:31,380 --> 00:14:35,760
lives in github people are welcome to

00:14:33,720 --> 00:14:37,260
change it and one of the most important

00:14:35,760 --> 00:14:39,930
thing that people can do is actually

00:14:37,260 --> 00:14:43,260
feel the information about how to find a

00:14:39,930 --> 00:14:45,600
new upstream version for each package so

00:14:43,260 --> 00:14:48,029
for that you have a set of files there

00:14:45,600 --> 00:14:50,459
it's actually just adding a few lines

00:14:48,029 --> 00:14:53,730
for each for each file usually just one

00:14:50,459 --> 00:14:56,639
line and you just like say this is on

00:14:53,730 --> 00:14:58,829
this web page I'll grab all the tables

00:14:56,639 --> 00:15:03,269
and you will just it will just figure it

00:14:58,829 --> 00:15:05,759
out in the end so you can it submit

00:15:03,269 --> 00:15:10,110
a change I will merge it and this will

00:15:05,759 --> 00:15:12,750
just feel fine the next thing which i

00:15:10,110 --> 00:15:16,050
think is really nice is the services on

00:15:12,750 --> 00:15:16,889
lbs this is something that a lot of

00:15:16,050 --> 00:15:21,089
people don't know

00:15:16,889 --> 00:15:23,639
actually and in the team that is

00:15:21,089 --> 00:15:26,730
packaging OpenStack we we started to

00:15:23,639 --> 00:15:29,100
used actually heavily it makes our life

00:15:26,730 --> 00:15:33,509
so much easier that I think more people

00:15:29,100 --> 00:15:36,749
should really use that so um services

00:15:33,509 --> 00:15:38,790
can be used either like they can be

00:15:36,749 --> 00:15:41,939
disabled and then you run then manually

00:15:38,790 --> 00:15:44,549
or they can be run automatically and so

00:15:41,939 --> 00:15:47,730
on so you can just look at the help of

00:15:44,549 --> 00:15:50,689
the USC supplement for that they can be

00:15:47,730 --> 00:15:53,369
around seven side client side and so on

00:15:50,689 --> 00:15:56,149
what's interesting is looking at a few

00:15:53,369 --> 00:15:58,799
examples so this is a simple example of

00:15:56,149 --> 00:16:02,009
the glance component of OpenStack how we

00:15:58,799 --> 00:16:04,499
package it so what upstream is doing is

00:16:02,009 --> 00:16:10,829
that they have a double which is called

00:16:04,499 --> 00:16:13,109
glance a master Winston's gjz and you

00:16:10,829 --> 00:16:15,809
just fetch that and it's always the the

00:16:13,109 --> 00:16:19,049
master version of OpenStack it's updated

00:16:15,809 --> 00:16:21,480
every night and so on so what we use is

00:16:19,049 --> 00:16:24,779
a service which is called Donald Donald

00:16:21,480 --> 00:16:27,600
files it will download that and then you

00:16:24,779 --> 00:16:30,299
can chain services so the sugan service

00:16:27,600 --> 00:16:32,160
we use is the set version 1 it will find

00:16:30,299 --> 00:16:36,089
a version from the table and update the

00:16:32,160 --> 00:16:38,459
spec file with that version are so that

00:16:36,089 --> 00:16:41,749
means that we can really automatically

00:16:38,459 --> 00:16:44,459
update the whole package for that and

00:16:41,749 --> 00:16:48,689
then we use also a service which is

00:16:44,459 --> 00:16:51,089
called refresh patches this one is used

00:16:48,689 --> 00:16:53,850
to that if you had a patch that was

00:16:51,089 --> 00:16:55,860
merged upstream so if you have that in

00:16:53,850 --> 00:16:58,019
the package it actually gets dropped

00:16:55,860 --> 00:16:59,639
automatically it gets removed and the

00:16:58,019 --> 00:17:04,860
package can keep building for instance

00:16:59,639 --> 00:17:07,139
and if you look closely up there I don't

00:17:04,860 --> 00:17:09,149
want to jump so i will point it out but

00:17:07,139 --> 00:17:12,809
there's the change generic generate line

00:17:09,149 --> 00:17:15,449
which will actually generate the change

00:17:12,809 --> 00:17:19,620
entry for you so what you can do is just

00:17:15,449 --> 00:17:21,319
have that run it automatically and your

00:17:19,620 --> 00:17:25,709
package will stay updated all the time

00:17:21,319 --> 00:17:28,199
this is really nice so what we do I'll

00:17:25,709 --> 00:17:29,980
show you that after is that we run that

00:17:28,199 --> 00:17:33,280
in Jenkins every night

00:17:29,980 --> 00:17:37,120
and that way we have packages which are

00:17:33,280 --> 00:17:43,240
we don't touch actually the second

00:17:37,120 --> 00:17:46,290
example is this one so this is opens a

00:17:43,240 --> 00:17:49,150
quick start well that's just an example

00:17:46,290 --> 00:17:52,000
there what we do is that we we package

00:17:49,150 --> 00:17:54,580
directly from get so we don't have a tab

00:17:52,000 --> 00:17:57,700
wall upstream for that we just take it

00:17:54,580 --> 00:17:59,890
and the service will grab the latest

00:17:57,700 --> 00:18:02,740
version engage in the branch that we

00:17:59,890 --> 00:18:07,660
specify it will create a version based

00:18:02,740 --> 00:18:10,080
on the get of the get ash and so that's

00:18:07,660 --> 00:18:13,480
it actually then after that you can

00:18:10,080 --> 00:18:15,790
recompress so because what da SCM does

00:18:13,480 --> 00:18:18,040
is create a file so you usually want to

00:18:15,790 --> 00:18:21,160
compress it and then you usually call

00:18:18,040 --> 00:18:23,740
set version again and refresh patches so

00:18:21,160 --> 00:18:27,549
with that it's the exact same thing that

00:18:23,740 --> 00:18:29,620
we did with a previous example except

00:18:27,549 --> 00:18:32,950
that it takes not a double upstream but

00:18:29,620 --> 00:18:36,280
get triple and so yeah it works pretty

00:18:32,950 --> 00:18:38,950
well so in the end what we do is that we

00:18:36,280 --> 00:18:41,110
put all that in Jenkins so we have a job

00:18:38,950 --> 00:18:44,470
in Jenkins it's triggered every night

00:18:41,110 --> 00:18:46,299
and we update all of our packages like

00:18:44,470 --> 00:18:49,270
that and you can see some red bubbles

00:18:46,299 --> 00:18:52,210
which means that usually something needs

00:18:49,270 --> 00:18:55,419
to be done so in that case a red bubble

00:18:52,210 --> 00:18:58,570
means either that the service was not

00:18:55,419 --> 00:19:00,970
able to run correctly that could be for

00:18:58,570 --> 00:19:03,940
example the Refresh batch of service

00:19:00,970 --> 00:19:05,470
which didn't work out because it was not

00:19:03,940 --> 00:19:09,820
able to determine if a patch should be

00:19:05,470 --> 00:19:12,280
kept or not oh that could be something

00:19:09,820 --> 00:19:14,049
so what the job is doing is running the

00:19:12,280 --> 00:19:17,410
services and then building the package

00:19:14,049 --> 00:19:19,360
and if it builds then it commits so if

00:19:17,410 --> 00:19:21,160
it's red that could be that it was not

00:19:19,360 --> 00:19:23,590
able to successfully build the package

00:19:21,160 --> 00:19:27,549
so in that case it means that somebody

00:19:23,590 --> 00:19:29,530
needs to look at it and in the end what

00:19:27,549 --> 00:19:32,530
it really means is that we have all of

00:19:29,530 --> 00:19:35,980
these packages so that's this list is

00:19:32,530 --> 00:19:38,290
just like a half of it I guess maybe a

00:19:35,980 --> 00:19:41,710
bit less and we have Hoey of these

00:19:38,290 --> 00:19:43,750
packages in 3 different versions that we

00:19:41,710 --> 00:19:45,070
packaged and we actually don't have

00:19:43,750 --> 00:19:46,960
here of that much of all then we know

00:19:45,070 --> 00:19:49,630
that it's going to be correct the only

00:19:46,960 --> 00:19:52,260
thing that we need to be doing and that

00:19:49,630 --> 00:19:54,670
is not being done by the services is

00:19:52,260 --> 00:19:57,160
really to make sure that the

00:19:54,670 --> 00:19:58,840
dependencies are updated from time to

00:19:57,160 --> 00:20:02,590
time so it's something that we need to

00:19:58,840 --> 00:20:05,320
manually do from time to time this is

00:20:02,590 --> 00:20:08,200
really useful I mean that means that for

00:20:05,320 --> 00:20:13,150
all of the packaging it just done

00:20:08,200 --> 00:20:14,860
without us really looking at that so

00:20:13,150 --> 00:20:16,750
that's really the examples I wanted to

00:20:14,860 --> 00:20:19,960
share I'm pretty sure that many other

00:20:16,750 --> 00:20:22,930
people know about some small comments

00:20:19,960 --> 00:20:24,250
that make their life easier so if you

00:20:22,930 --> 00:20:27,820
have anything that you would like to

00:20:24,250 --> 00:20:30,280
share with anybody just now take the

00:20:27,820 --> 00:20:40,410
microphone ensure that i guess i'll show

00:20:30,280 --> 00:20:40,410

YouTube URL: https://www.youtube.com/watch?v=JYYBYkemeD4


