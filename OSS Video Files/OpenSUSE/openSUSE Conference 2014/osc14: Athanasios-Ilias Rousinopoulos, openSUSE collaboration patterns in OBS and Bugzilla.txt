Title: osc14: Athanasios-Ilias Rousinopoulos, openSUSE collaboration patterns in OBS and Bugzilla
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	Software repository mining and collaborative software engineering are part of my ongoing research in Software Engineering Research Group. During 2013 my paper with title "An early empirical sentiment analysis of openSUSE Factory Developers and Users" [1] was accepted and then presented to WSL 2013 [Porto Alegre,Brasil,July 4th - 5th, 2013].
This presentation is about studying openSUSE Factory data in relation to the Bugzilla and OBS. A concrete quantitative analysis of the openSUSE Factory data over the last 3 years is presented, with focus on the possible correlation between the number of accepted requests in OBS and the openSUSE Factory bugs in the Bugzilla.
Captions: 
	00:00:00,079 --> 00:00:05,430
good morning everybody this is the first

00:00:03,120 --> 00:00:07,799
presentation on this room so I would

00:00:05,430 --> 00:00:11,190
like to welcome everybody here to my

00:00:07,799 --> 00:00:13,950
presentation my presentation is

00:00:11,190 --> 00:00:18,600
different from the others as you can see

00:00:13,950 --> 00:00:23,279
from this long title so I want first to

00:00:18,600 --> 00:00:27,420
clarify it mainly it's called scientific

00:00:23,279 --> 00:00:31,080
analysis of collaboration patterns in

00:00:27,420 --> 00:00:35,130
open build service and bugzilla with

00:00:31,080 --> 00:00:38,160
focus on the history of merging requests

00:00:35,130 --> 00:00:42,000
in fact o repository nope until service

00:00:38,160 --> 00:00:47,820
and the history of back reports in our

00:00:42,000 --> 00:00:50,610
bugzilla so my name is Athena sicilian

00:00:47,820 --> 00:00:53,940
applause for those hundred that they

00:00:50,610 --> 00:00:58,050
know me I'm zumiez simpler than my name

00:00:53,940 --> 00:01:01,800
and my surname and I'm a PhD candidate

00:00:58,050 --> 00:01:06,470
in Alpena Trent University in Austria so

00:01:01,800 --> 00:01:09,330
this presentation is part of my research

00:01:06,470 --> 00:01:16,880
in software engineering or software

00:01:09,330 --> 00:01:18,930
engineer research group so why do I this

00:01:16,880 --> 00:01:23,040
presentation which is the motivation

00:01:18,930 --> 00:01:26,509
behind such a presentation the main

00:01:23,040 --> 00:01:29,880
motivation is that in the past I'm

00:01:26,509 --> 00:01:34,350
member of the community the last close

00:01:29,880 --> 00:01:36,180
to three years so we had rumors we were

00:01:34,350 --> 00:01:38,970
listening or reading in the mailing list

00:01:36,180 --> 00:01:41,990
there are few people working on the

00:01:38,970 --> 00:01:45,049
review process or accepting requests

00:01:41,990 --> 00:01:50,189
open build service especially in factory

00:01:45,049 --> 00:01:51,990
but all these were rumors rumors so we

00:01:50,189 --> 00:01:54,600
wanted to observe what's going on with

00:01:51,990 --> 00:01:58,320
the data is that true is that not true

00:01:54,600 --> 00:02:00,450
are there more people behind open build

00:01:58,320 --> 00:02:06,990
service and especially on openness

00:02:00,450 --> 00:02:10,069
factor development then as part of my

00:02:06,990 --> 00:02:13,099
ongoing research which is dedicated to

00:02:10,069 --> 00:02:16,609
software repository mining among with my

00:02:13,099 --> 00:02:20,659
professor martin pinsker we thought that

00:02:16,609 --> 00:02:23,359
it's a good idea to make a piece of

00:02:20,659 --> 00:02:30,349
research for the community and see

00:02:23,359 --> 00:02:33,319
what's behind the data apart from that I

00:02:30,349 --> 00:02:36,290
thought that this could be helpful also

00:02:33,319 --> 00:02:38,659
for the community to know how to know

00:02:36,290 --> 00:02:41,989
what's going on on the development

00:02:38,659 --> 00:02:46,430
process or for instance if it's a good

00:02:41,989 --> 00:02:48,799
idea to reduce or increase the amount of

00:02:46,430 --> 00:02:51,319
months for the development process and

00:02:48,799 --> 00:03:01,060
toward the uncle working opensuse

00:02:51,319 --> 00:03:07,099
factory project so the goals of the work

00:03:01,060 --> 00:03:11,599
are to mine the data from open juice

00:03:07,099 --> 00:03:14,689
factory this includes submitted requests

00:03:11,599 --> 00:03:17,739
in open build service and also submitted

00:03:14,689 --> 00:03:23,569
bug reports in bugzilla for open tues

00:03:17,739 --> 00:03:27,019
factory then after mining the data comes

00:03:23,569 --> 00:03:29,689
the analysis part so what can we see

00:03:27,019 --> 00:03:33,829
what can we observe if that is this is

00:03:29,689 --> 00:03:39,949
useful for the community members or may

00:03:33,829 --> 00:03:44,720
also for the company the other part of

00:03:39,949 --> 00:03:47,359
the goals is the correlation between the

00:03:44,720 --> 00:03:50,419
submitted and accepted requests in

00:03:47,359 --> 00:03:54,319
opensuse factory with the submitted bugs

00:03:50,419 --> 00:03:57,620
or back reports on bugzilla for instance

00:03:54,319 --> 00:04:03,680
to see if a higher amount of submitted

00:03:57,620 --> 00:04:09,099
requests produce we increase the amount

00:04:03,680 --> 00:04:14,120
of bug submitted in bugzilla and finally

00:04:09,099 --> 00:04:18,320
publish the source code so everybody

00:04:14,120 --> 00:04:22,340
from the community can contribute and

00:04:18,320 --> 00:04:23,050
also reproduce results and also work

00:04:22,340 --> 00:04:32,710
with other

00:04:23,050 --> 00:04:37,659
I open build service projects talking

00:04:32,710 --> 00:04:44,949
about data it's good to declare what

00:04:37,659 --> 00:04:49,360
data did we mine so remind data for

00:04:44,949 --> 00:04:53,250
three years from 2011 until the end from

00:04:49,360 --> 00:04:56,620
the beginning of 2011 until the end of

00:04:53,250 --> 00:05:02,169
2013 in order to have higher range of

00:04:56,620 --> 00:05:07,240
data and make better observations as I

00:05:02,169 --> 00:05:09,250
point out before our work focused on the

00:05:07,240 --> 00:05:13,090
submitted requests on opensuse factory

00:05:09,250 --> 00:05:21,300
repository in open pool service and on

00:05:13,090 --> 00:05:21,300
the submitted bugs on bugzilla so

00:05:21,719 --> 00:05:33,819
bugzilla when i first started mining the

00:05:29,800 --> 00:05:36,159
data my question was if people from

00:05:33,819 --> 00:05:38,800
community they do use bugzilla for

00:05:36,159 --> 00:05:43,300
submitting reports especially for open

00:05:38,800 --> 00:05:46,150
juice factory where in at the same time

00:05:43,300 --> 00:05:48,729
they do contribute in they do contribute

00:05:46,150 --> 00:05:53,009
or their project on open dual service

00:05:48,729 --> 00:06:00,310
and submit requests in open bill service

00:05:53,009 --> 00:06:03,629
so we use that all called bit on which

00:06:00,310 --> 00:06:07,599
is a tool for parsing each trackers and

00:06:03,629 --> 00:06:09,310
bugzilla and stores the data in the

00:06:07,599 --> 00:06:12,190
database it's an open source project

00:06:09,310 --> 00:06:17,580
which is also available on github and

00:06:12,190 --> 00:06:22,620
you can download it we mined eight

00:06:17,580 --> 00:06:26,620
bugzilla products in our bugzilla and

00:06:22,620 --> 00:06:31,990
that consisted from six projects which

00:06:26,620 --> 00:06:34,840
are Apache KD genome pay system kernel

00:06:31,990 --> 00:06:38,500
and xfc

00:06:34,840 --> 00:06:43,180
from the six projects that we mind i

00:06:38,500 --> 00:06:51,660
will present here two of them with our

00:06:43,180 --> 00:06:56,139
TD and genome so after we mine the data

00:06:51,660 --> 00:06:59,410
we so we saw that there are not enough

00:06:56,139 --> 00:07:06,330
data in bugzilla to make such a

00:06:59,410 --> 00:07:09,220
correlation so we we skip we stopped the

00:07:06,330 --> 00:07:17,620
the recess or the all going work on this

00:07:09,220 --> 00:07:20,860
part and we continue to open bills open

00:07:17,620 --> 00:07:30,760
bit service factory and more especially

00:07:20,860 --> 00:07:33,070
on the submitted requests so for that

00:07:30,760 --> 00:07:39,010
pepper purpose we developed a tool

00:07:33,070 --> 00:07:42,310
called obvious parser which download the

00:07:39,010 --> 00:07:47,260
data from open build service by using

00:07:42,310 --> 00:07:52,660
the old BS API command and export the

00:07:47,260 --> 00:07:55,599
data in XML format after that the parser

00:07:52,660 --> 00:08:00,690
stores all the parts the data from the

00:07:55,599 --> 00:08:05,289
xml file stores the data in in my sigil

00:08:00,690 --> 00:08:11,200
database so for a user for developer it

00:08:05,289 --> 00:08:14,880
be easier to plot some graphs or type

00:08:11,200 --> 00:08:14,880
some SQL query

00:08:19,710 --> 00:08:26,100
so the next the next step was to define

00:08:24,000 --> 00:08:28,860
some matrices that could be also

00:08:26,100 --> 00:08:33,240
interested not only for the research but

00:08:28,860 --> 00:08:36,420
also for the community these matrices

00:08:33,240 --> 00:08:40,800
are consisting of the sub the number of

00:08:36,420 --> 00:08:43,770
submitted requests the number of people

00:08:40,800 --> 00:08:47,490
who submitted these requests so we can

00:08:43,770 --> 00:08:49,470
call them requesters or submitters the

00:08:47,490 --> 00:08:52,680
number of reviews that have been done on

00:08:49,470 --> 00:08:56,580
this request the number of people who

00:08:52,680 --> 00:08:59,670
reviewed this request the number of

00:08:56,580 --> 00:09:03,300
packages of the project that we were

00:08:59,670 --> 00:09:07,590
examining the people that accepted all

00:09:03,300 --> 00:09:11,720
this request and also the time

00:09:07,590 --> 00:09:14,550
difference between the moment that

00:09:11,720 --> 00:09:17,120
developer user submits a request to open

00:09:14,550 --> 00:09:20,400
this factory until the moment that a

00:09:17,120 --> 00:09:31,980
developer or a user accept this request

00:09:20,400 --> 00:09:36,330
on open built service okay here we can

00:09:31,980 --> 00:09:39,720
see all a data summary of the data that

00:09:36,330 --> 00:09:42,840
we mined for genome facto repository and

00:09:39,720 --> 00:09:47,180
for KD digital factory repository in

00:09:42,840 --> 00:09:50,430
open duel service so we can see that

00:09:47,180 --> 00:09:54,030
genome factory has closed to twenty-five

00:09:50,430 --> 00:09:58,680
percent more requests than kdd so

00:09:54,030 --> 00:10:01,880
factory but has close to forty percent

00:09:58,680 --> 00:10:06,840
close to thirty percent less reviews

00:10:01,880 --> 00:10:12,260
done by users also has less reviewers

00:10:06,840 --> 00:10:16,230
and but on the other hand has more

00:10:12,260 --> 00:10:19,200
packet is close to twenty-seven percent

00:10:16,230 --> 00:10:22,890
of in comparison with jetty distro

00:10:19,200 --> 00:10:29,090
Factory on the other side kdd store

00:10:22,890 --> 00:10:30,670
factory has less submitted requests

00:10:29,090 --> 00:10:35,290
close to four

00:10:30,670 --> 00:10:40,710
% as I said before reviews done by

00:10:35,290 --> 00:10:44,890
reviewers I has two more reviewers and

00:10:40,710 --> 00:10:54,370
close to thirty percent less packages in

00:10:44,890 --> 00:10:56,620
comparison with genome factory so now

00:10:54,370 --> 00:11:01,330
we'll see what's going on on genome

00:10:56,620 --> 00:11:08,050
factory repository by following also the

00:11:01,330 --> 00:11:13,860
matrices that we have declared first of

00:11:08,050 --> 00:11:18,970
all this is a plot which represents the

00:11:13,860 --> 00:11:23,050
distribution of requests categorized per

00:11:18,970 --> 00:11:25,900
state so this here you can see that the

00:11:23,050 --> 00:11:28,870
majority of the submitted requests have

00:11:25,900 --> 00:11:34,050
been accepted where few of them have

00:11:28,870 --> 00:11:48,340
been invoked and fewer have been super

00:11:34,050 --> 00:11:50,560
sabido so it's good to know that people

00:11:48,340 --> 00:11:53,350
submitted requests but it's better know

00:11:50,560 --> 00:11:57,430
who submitted all this amount of

00:11:53,350 --> 00:12:00,610
requests as we can see in the pot the

00:11:57,430 --> 00:12:05,140
core team of submitters if we can call

00:12:00,610 --> 00:12:10,690
it we are two people with who submitted

00:12:05,140 --> 00:12:13,170
more than two thousand requests it so

00:12:10,690 --> 00:12:20,190
the rest eight people did not operate

00:12:13,170 --> 00:12:20,190
the limit of 10 or 20 submitted requests

00:12:24,339 --> 00:12:29,740
on the other hand we see the people that

00:12:27,490 --> 00:12:34,600
review to all these requests submitted

00:12:29,740 --> 00:12:39,129
on genome factory the first two bars are

00:12:34,600 --> 00:12:42,389
the automatic response from open build

00:12:39,129 --> 00:12:46,749
service concerning the reviews from for

00:12:42,389 --> 00:12:51,220
license compatibility and for build

00:12:46,749 --> 00:12:53,829
compatibility so excluding this ones

00:12:51,220 --> 00:12:56,470
which are the automatic responses we see

00:12:53,829 --> 00:13:01,350
that three people are the are the main

00:12:56,470 --> 00:13:01,350
reviewers of the submitted requests

00:13:08,910 --> 00:13:17,220
before having a look on the details of

00:13:14,010 --> 00:13:20,340
the reviewing process our question was

00:13:17,220 --> 00:13:23,700
if all the requests are being reviewed

00:13:20,340 --> 00:13:27,890
or they are being accepted directly from

00:13:23,700 --> 00:13:31,490
a developer what we can see here is that

00:13:27,890 --> 00:13:35,360
more than half of the submitted requests

00:13:31,490 --> 00:13:38,640
you haven't been reviewed but accepted

00:13:35,360 --> 00:13:41,430
so this plot rupees represents the

00:13:38,640 --> 00:13:45,720
amount of not reviewed and reviewed

00:13:41,430 --> 00:13:48,930
request of the accepted request and we

00:13:45,720 --> 00:13:59,640
see a few amount less than the half that

00:13:48,930 --> 00:14:02,070
have been reviewed since we'll have

00:13:59,640 --> 00:14:05,190
people who submitted we will have people

00:14:02,070 --> 00:14:10,920
who reviewed the request now have people

00:14:05,190 --> 00:14:13,650
who accept this request by having a look

00:14:10,920 --> 00:14:16,590
we see that also here we'll have three

00:14:13,650 --> 00:14:21,270
people were the core team of accepting

00:14:16,590 --> 00:14:23,760
requests since we three human humans so

00:14:21,270 --> 00:14:27,060
if we don't include auto bild which is

00:14:23,760 --> 00:14:29,520
an automatic response from open build

00:14:27,060 --> 00:14:35,400
service we can see that three people who

00:14:29,520 --> 00:14:39,270
are accepting the request and more

00:14:35,400 --> 00:14:48,180
especially the other ones do not operate

00:14:39,270 --> 00:14:50,340
the limit of 500 excited requests so the

00:14:48,180 --> 00:14:55,110
next step was to see how many time is

00:14:50,340 --> 00:14:58,470
being spent between or what is the time

00:14:55,110 --> 00:15:01,770
difference between the submission of the

00:14:58,470 --> 00:15:05,340
request and the acceptance of the

00:15:01,770 --> 00:15:09,230
clients of requests for that purpose we

00:15:05,340 --> 00:15:14,720
want to represent the review the history

00:15:09,230 --> 00:15:18,030
part which is also available on online

00:15:14,720 --> 00:15:21,120
but we wanted to do or to store this

00:15:18,030 --> 00:15:22,110
information in the database so some

00:15:21,120 --> 00:15:25,769
cloud will

00:15:22,110 --> 00:15:27,779
I did the lock of the request so first

00:15:25,769 --> 00:15:29,579
the developer submits a request then

00:15:27,779 --> 00:15:31,649
there are some reviews or they're not

00:15:29,579 --> 00:15:36,350
reviews as we saw before and then

00:15:31,649 --> 00:15:40,230
somebody accepts the requests in case of

00:15:36,350 --> 00:15:43,740
genome factory we see that seven to ten

00:15:40,230 --> 00:15:46,800
request clothes are being accepted in

00:15:43,740 --> 00:15:49,890
less than 24 hours there is a high

00:15:46,800 --> 00:15:54,209
amount of requests which is being

00:15:49,890 --> 00:16:14,310
accepted in one day and the other amount

00:15:54,209 --> 00:16:31,410
the other requests oh yes yes yes that's

00:16:14,310 --> 00:16:33,540
true question which one the question I

00:16:31,410 --> 00:16:36,449
asked was if the seventy-four percent

00:16:33,540 --> 00:16:39,540
also includes the requests that were not

00:16:36,449 --> 00:16:47,100
or barely revealed as you show an

00:16:39,540 --> 00:16:52,550
earlier chart cool that works yeah it's

00:16:47,100 --> 00:16:55,829
um on okay here we see the requests that

00:16:52,550 --> 00:16:58,490
are also being reviewed and not being

00:16:55,829 --> 00:16:58,490
reviewed

00:17:16,110 --> 00:17:24,789
okay so a the answer is that here we see

00:17:22,419 --> 00:17:30,190
the requests that are being reviewed but

00:17:24,789 --> 00:17:33,669
also not being reviewed so the

00:17:30,190 --> 00:17:37,659
acceptance time for only the reviewed

00:17:33,669 --> 00:17:44,679
request could it would be different and

00:17:37,659 --> 00:17:47,559
just make an assumption so the next part

00:17:44,679 --> 00:17:50,049
is what is going on with KD distro

00:17:47,559 --> 00:17:53,200
factory repository we just followed the

00:17:50,049 --> 00:17:55,630
same way the same procedure for mind the

00:17:53,200 --> 00:18:02,559
data store the data in the database and

00:17:55,630 --> 00:18:06,600
to gather the same matrices so here we

00:18:02,559 --> 00:18:09,130
see that there is a higher amount of

00:18:06,600 --> 00:18:14,740
superseded requests in comparison with

00:18:09,130 --> 00:18:17,730
genome factory where the revoked

00:18:14,740 --> 00:18:20,649
requests remain exactly the same and

00:18:17,730 --> 00:18:29,190
they accepted request the amount of

00:18:20,649 --> 00:18:32,289
accepted request is being reduced as

00:18:29,190 --> 00:18:34,769
before we see the people that submitted

00:18:32,289 --> 00:18:39,880
the request to KD disto factory

00:18:34,769 --> 00:18:44,980
repository and we see that four of 10

00:18:39,880 --> 00:18:50,850
people are the main okay the core team

00:18:44,980 --> 00:18:57,510
of submitters the rest of them are

00:18:50,850 --> 00:18:57,510
submitted less than 3 or 4 300 requests

00:19:00,620 --> 00:19:08,350
the same one with reviewers we see that

00:19:03,500 --> 00:19:08,350
three people are the core reviewers of

00:19:08,590 --> 00:19:15,170
fkd distro factory since the first two

00:19:12,410 --> 00:19:18,830
bars represents the we represent excuse

00:19:15,170 --> 00:19:23,180
me the automatic responses from the

00:19:18,830 --> 00:19:34,640
system and the other developers reviewed

00:19:23,180 --> 00:19:39,800
made less than 1000 reviews in Zenon

00:19:34,640 --> 00:19:41,870
factory we see we saw that the non not

00:19:39,800 --> 00:19:45,650
reviewed requests are more than the

00:19:41,870 --> 00:19:50,210
reviewed request but in KD disco factory

00:19:45,650 --> 00:19:54,110
we observed that the number of reviewed

00:19:50,210 --> 00:19:59,450
requests are more than genome factory

00:19:54,110 --> 00:20:01,640
and are the majority of our data were in

00:19:59,450 --> 00:20:09,309
the other hand then non not reviewed

00:20:01,640 --> 00:20:09,309
requests are less than fifteen percent

00:20:12,250 --> 00:20:21,380
here we see that two people we can call

00:20:17,660 --> 00:20:24,260
them the core team of the acceptor the

00:20:21,380 --> 00:20:26,480
people who accepted the request but

00:20:24,260 --> 00:20:29,420
among the two people that are accepting

00:20:26,480 --> 00:20:32,330
the request there is a very there is a

00:20:29,420 --> 00:20:35,410
high different where the first of them

00:20:32,330 --> 00:20:40,250
the first one of them accepted more than

00:20:35,410 --> 00:20:46,570
seven thousand requests and the other

00:20:40,250 --> 00:20:46,570
ones accepted less than 100 requests

00:20:52,520 --> 00:20:58,530
since we had different data with

00:20:55,160 --> 00:21:01,050
reviewing and the reviewing process and

00:20:58,530 --> 00:21:04,910
that the reviews that have been done you

00:21:01,050 --> 00:21:07,710
have different data in the time that

00:21:04,910 --> 00:21:10,890
developers and users suspended to accept

00:21:07,710 --> 00:21:12,270
the request so here we can see that less

00:21:10,890 --> 00:21:16,260
than the half of the requests have been

00:21:12,270 --> 00:21:18,360
accepted in less than 24 hours there is

00:21:16,260 --> 00:21:23,000
a hyper sentence of accepting requests

00:21:18,360 --> 00:21:28,140
within a day also within two days and

00:21:23,000 --> 00:21:31,320
until the limit of 10 days who have also

00:21:28,140 --> 00:21:34,590
submitted accepted requests but the

00:21:31,320 --> 00:21:39,500
majority are less than 24 hours more

00:21:34,590 --> 00:21:39,500
than 24 hours and less than 48 hours

00:21:41,630 --> 00:21:50,400
okay we made this study but as I defined

00:21:45,120 --> 00:21:53,010
in the Gulf part our last call goes to

00:21:50,400 --> 00:21:59,670
publish the source code and so the

00:21:53,010 --> 00:22:07,590
community can interact with it so the

00:21:59,670 --> 00:22:10,320
source code is in alpha version and it

00:22:07,590 --> 00:22:13,350
is available on github so you go on it

00:22:10,320 --> 00:22:17,310
happened search for obvious parser you

00:22:13,350 --> 00:22:26,190
can find and clone the source code and

00:22:17,310 --> 00:22:28,500
also reproduce the result like every

00:22:26,190 --> 00:22:32,310
presentation its presentation we made

00:22:28,500 --> 00:22:37,890
some conclusions and these conclusions

00:22:32,310 --> 00:22:40,020
they do consist of that if people submit

00:22:37,890 --> 00:22:42,540
more bugs on bugzilla it could be

00:22:40,020 --> 00:22:45,420
possible to correlate they accept the

00:22:42,540 --> 00:22:49,770
request with the number of packs in open

00:22:45,420 --> 00:22:54,180
juice factory distribution apart from

00:22:49,770 --> 00:22:56,310
that we saw that people they're the same

00:22:54,180 --> 00:22:59,940
people could submit the request review

00:22:56,310 --> 00:23:02,520
request and then accept the request but

00:22:59,940 --> 00:23:03,810
also we saw that the people who accept

00:23:02,520 --> 00:23:07,170
the request in

00:23:03,810 --> 00:23:12,750
the two projects presented are the core

00:23:07,170 --> 00:23:15,270
team is is exactly the same then as I

00:23:12,750 --> 00:23:18,030
mentioned before we had to show that

00:23:15,270 --> 00:23:20,550
there is a high amount of non-reviewed

00:23:18,030 --> 00:23:24,960
requests in one of our projects that we

00:23:20,550 --> 00:23:29,820
study with which could have some impact

00:23:24,960 --> 00:23:36,690
or not we just made an observation of

00:23:29,820 --> 00:23:39,150
the data and we present them here since

00:23:36,690 --> 00:23:41,040
we don't have any data enough data from

00:23:39,150 --> 00:23:45,740
bugzilla walk and see if it's this leave

00:23:41,040 --> 00:23:45,740
this is battle good for the project and

00:23:46,940 --> 00:24:04,260
now comes the question part what is it

00:23:59,040 --> 00:24:08,370
will be able to for example review the

00:24:04,260 --> 00:24:12,060
time and the matrix between opening a

00:24:08,370 --> 00:24:14,760
bug and getting maintenance requests

00:24:12,060 --> 00:24:18,210
done and published inside the

00:24:14,760 --> 00:24:23,880
maintenance so we can show how fast or

00:24:18,210 --> 00:24:27,930
how slow we are dude or not to fix a bug

00:24:23,880 --> 00:24:34,140
on a release repository for example 4 04

00:24:27,930 --> 00:24:36,510
13 one of next 13 2 he actually there

00:24:34,140 --> 00:24:38,880
two tools so the tool that mines the

00:24:36,510 --> 00:24:41,370
bugzilla can give these kind of matrices

00:24:38,880 --> 00:24:45,000
when a bucket is submitted and when bank

00:24:41,370 --> 00:24:47,880
is is big solved or marked as and solved

00:24:45,000 --> 00:24:51,390
or change the state of the the bug yeah

00:24:47,880 --> 00:24:53,970
because normally actually we we have the

00:24:51,390 --> 00:24:56,960
bag number inside the submit request for

00:24:53,970 --> 00:24:59,820
the maintenance which is again

00:24:56,960 --> 00:25:02,360
automatically reported inside the bag so

00:24:59,820 --> 00:25:06,090
I think we we should be able to cross

00:25:02,360 --> 00:25:07,590
link to information yes but for this

00:25:06,090 --> 00:25:12,810
purpose I have to parse the sense

00:25:07,590 --> 00:25:14,250
history which is not which i did not get

00:25:12,810 --> 00:25:17,230
Anya yeah

00:25:14,250 --> 00:25:25,180
not yet here you have tomorrow we can

00:25:17,230 --> 00:25:27,270
start tomorrow of course what was the

00:25:25,180 --> 00:25:29,950
exact problem that prevented you from

00:25:27,270 --> 00:25:33,520
mining the bugzilla data to little box

00:25:29,950 --> 00:25:36,000
or something missing too little bugs for

00:25:33,520 --> 00:25:36,000
three years

00:25:55,200 --> 00:26:05,170
just for the missing bugs it is because

00:26:01,140 --> 00:26:09,910
it's a category about when we say oh I

00:26:05,170 --> 00:26:12,280
found a bug about against Apache or gig

00:26:09,910 --> 00:26:16,840
e or something like this it is it

00:26:12,280 --> 00:26:18,820
category inside bugzilla that are not

00:26:16,840 --> 00:26:25,540
really linked it to the different

00:26:18,820 --> 00:26:28,540
project we have on OBS it just not

00:26:25,540 --> 00:26:32,980
enough that Latinos bug reported by

00:26:28,540 --> 00:26:34,930
users the structure of bugzilla gives a

00:26:32,980 --> 00:26:36,550
product called top and juice factory and

00:26:34,930 --> 00:26:40,000
then gives con components which are

00:26:36,550 --> 00:26:43,000
called oh papa Apache KD genome so we

00:26:40,000 --> 00:26:46,480
assume that the people that had that

00:26:43,000 --> 00:26:49,270
have a problem that have found the back

00:26:46,480 --> 00:26:51,730
on num ops for instance they will submit

00:26:49,270 --> 00:26:54,100
this back on the genome component in

00:26:51,730 --> 00:26:58,060
bugzilla who made us that assumption to

00:26:54,100 --> 00:27:00,190
grow aggravate the data otherwise it

00:26:58,060 --> 00:27:03,910
wouldn't be possible to say okay this is

00:27:00,190 --> 00:27:06,070
back for this project and find exactly

00:27:03,910 --> 00:27:10,320
the same project in an open built

00:27:06,070 --> 00:27:14,230
service to say okay we have 10 bucks in

00:27:10,320 --> 00:27:17,230
Napa mock for instance but we don't have

00:27:14,230 --> 00:27:20,910
an apple project on open build service

00:27:17,230 --> 00:27:34,350
or who have two or three project a

00:27:20,910 --> 00:27:34,350
repository excuse me to be nice you

00:27:39,640 --> 00:27:48,440
yeah but I'm done yeah so if you don't

00:27:45,350 --> 00:27:50,240
have any other questions I would like to

00:27:48,440 --> 00:27:53,690
thank everybody for attending my

00:27:50,240 --> 00:27:56,230
presentation and giving feedback and the

00:27:53,690 --> 00:27:56,230

YouTube URL: https://www.youtube.com/watch?v=ySyf_WaoqTI


