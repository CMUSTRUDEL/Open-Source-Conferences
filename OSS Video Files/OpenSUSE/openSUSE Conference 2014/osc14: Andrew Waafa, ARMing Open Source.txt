Title: osc14: Andrew Waafa, ARMing Open Source
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	ARM is an IP company, who produce no physical products. Yet we are in the hands and machines of many of us all around the world. Open Source software is at the heart of many of the products that ship with our IP. This session will show how ARM works with Open Source.
Captions: 
	00:00:00,290 --> 00:00:11,840
uh-huh oh right thanks for coming my

00:00:07,080 --> 00:00:14,610
name is Andy Wafaa I work for arm is

00:00:11,840 --> 00:00:20,390
principal engineer for open source what

00:00:14,610 --> 00:00:23,310
does that mean yes in nutshell I am

00:00:20,390 --> 00:00:27,210
concerned with enabling yoked source

00:00:23,310 --> 00:00:32,120
community to be able to leverage the ARM

00:00:27,210 --> 00:00:37,190
architecture as best as possible so

00:00:32,120 --> 00:00:47,430
anybody able to tell me who that is

00:00:37,190 --> 00:00:52,440
thank you you are old so who are we who

00:00:47,430 --> 00:00:55,610
is armed well we're a an IP company so

00:00:52,440 --> 00:00:58,969
we come up with architectural designs

00:00:55,610 --> 00:01:03,390
focus primarily on cpu and GPU

00:00:58,969 --> 00:01:07,229
technology we don't actually make

00:01:03,390 --> 00:01:10,350
anything we do designs and then we

00:01:07,229 --> 00:01:15,689
license those designs to partners so

00:01:10,350 --> 00:01:18,020
Samsung Qualcomm etc etc we're a global

00:01:15,689 --> 00:01:23,600
company based in Cambridge in the UK

00:01:18,020 --> 00:01:28,040
although we are relatively small sized

00:01:23,600 --> 00:01:28,040
considering the the reach that we have

00:01:28,490 --> 00:01:36,659
somewhat oldish started off in or it

00:01:33,780 --> 00:01:40,520
dates back to nineteen ninety with acorn

00:01:36,659 --> 00:01:43,950
computers in the UK spun out into

00:01:40,520 --> 00:01:47,970
advanced risk machines which then turned

00:01:43,950 --> 00:01:54,060
into our arm doesn't actually mean

00:01:47,970 --> 00:01:57,229
anything anymore it's just arm one

00:01:54,060 --> 00:02:04,789
question how many people here have

00:01:57,229 --> 00:02:11,489
mobile phone SD card hard drives anybody

00:02:04,789 --> 00:02:18,650
cars motorbikes you'll find an arm

00:02:11,489 --> 00:02:22,049
design chipset in all those or a arm

00:02:18,650 --> 00:02:24,180
designed processor of some sort whether

00:02:22,049 --> 00:02:28,379
it be my controller application

00:02:24,180 --> 00:02:30,480
processor recently arm shipped or arm

00:02:28,379 --> 00:02:35,790
the arm partner ecosystem the shipped

00:02:30,480 --> 00:02:44,450
over 50 billion processes so it's not a

00:02:35,790 --> 00:02:49,519
small number so that's who we are now

00:02:44,450 --> 00:02:53,340
what what do we do with open source how

00:02:49,519 --> 00:02:55,650
do we leverage the open source

00:02:53,340 --> 00:03:01,549
communities how can the open source

00:02:55,650 --> 00:03:07,170
communities Libra jar so if we take the

00:03:01,549 --> 00:03:12,530
design for CPU or GPU or something like

00:03:07,170 --> 00:03:18,810
that and use the analogy of a house so

00:03:12,530 --> 00:03:24,989
you've got foundations fray windows

00:03:18,810 --> 00:03:30,000
doors etc silicon partners like Samsung

00:03:24,989 --> 00:03:33,599
Qualcomm mediatek AMD etc they are

00:03:30,000 --> 00:03:36,630
looking after the frame communities

00:03:33,599 --> 00:03:41,239
companies I speeds etc they can be

00:03:36,630 --> 00:03:46,349
looking after the doors windows roof etc

00:03:41,239 --> 00:03:53,010
we're arm comes in is that small grey

00:03:46,349 --> 00:03:59,359
bit at the bottom foundation so to be

00:03:53,010 --> 00:04:02,930
able to have a good house successful

00:03:59,359 --> 00:04:07,919
long-standing you need solid foundations

00:04:02,930 --> 00:04:11,549
so our focus is on making sure that the

00:04:07,919 --> 00:04:15,170
core components to enable an operating

00:04:11,549 --> 00:04:16,980
system to work are there so

00:04:15,170 --> 00:04:19,770
foundations from our perspective it

00:04:16,980 --> 00:04:24,410
includes things like firmware platinum

00:04:19,770 --> 00:04:28,200
description colonel and tool chain and

00:04:24,410 --> 00:04:31,380
things like that so from firmware and

00:04:28,200 --> 00:04:38,780
platform description see there you've

00:04:31,380 --> 00:04:38,780
got a CPI we are part of the acpi

00:04:40,160 --> 00:04:48,860
consortium fuel it's an ongoing task

00:04:44,400 --> 00:04:53,460
it's focused on the upcoming arm v8

00:04:48,860 --> 00:04:59,600
64-bit platform which should be we

00:04:53,460 --> 00:05:03,840
should be seeing very soon it's still a

00:04:59,600 --> 00:05:05,460
long way from being complete some would

00:05:03,840 --> 00:05:10,880
say that it's not quite complete on x86

00:05:05,460 --> 00:05:13,620
yet but we're trying to ensure that we

00:05:10,880 --> 00:05:16,290
implement as much of the specifications

00:05:13,620 --> 00:05:22,860
as possible and ensure we do it right

00:05:16,290 --> 00:05:26,160
from the start UEFI again we're part of

00:05:22,860 --> 00:05:30,210
the UF I consortium which a CPR falls

00:05:26,160 --> 00:05:34,350
under now and we're trying to ensure

00:05:30,210 --> 00:05:36,240
that our platforms are standard there's

00:05:34,350 --> 00:05:40,650
no fragmentation standard way of booting

00:05:36,240 --> 00:05:44,460
things people that are coming from x86

00:05:40,650 --> 00:05:49,010
world know how systems boo that used to

00:05:44,460 --> 00:05:52,460
UEFI secure boot with UEFI as well is

00:05:49,010 --> 00:05:56,420
kind of critical in a lot of places now

00:05:52,460 --> 00:06:02,910
you boot is predominantly used on

00:05:56,420 --> 00:06:06,420
existing arm v7 platforms a preference

00:06:02,910 --> 00:06:09,210
for v8 is to use you fi it's not

00:06:06,420 --> 00:06:12,990
mandatory but it's the recommendation

00:06:09,210 --> 00:06:15,900
and so we are working with the u-boot

00:06:12,990 --> 00:06:20,430
community to ensure the sum of the core

00:06:15,900 --> 00:06:22,620
level components actually work we're not

00:06:20,430 --> 00:06:26,790
that active within you boot anymore as

00:06:22,620 --> 00:06:28,860
you boots very well established and

00:06:26,790 --> 00:06:33,720
a lot of our partners do a lot of the

00:06:28,860 --> 00:06:41,070
work as well trusted firmware and falls

00:06:33,720 --> 00:06:44,240
into the mva bucket that's a project

00:06:41,070 --> 00:06:46,380
that we've started to ensure that

00:06:44,240 --> 00:06:50,790
trusted execution environment is

00:06:46,380 --> 00:06:54,150
available and works and is uniform and

00:06:50,790 --> 00:06:58,980
standard again across all platforms and

00:06:54,150 --> 00:07:02,210
then there's device tree which is the

00:06:58,980 --> 00:07:06,750
current platform description method

00:07:02,210 --> 00:07:11,760
that's used on arm v7 and it will most

00:07:06,750 --> 00:07:15,510
likely be used for arm v8 for initial

00:07:11,760 --> 00:07:18,660
batch and then with the transitional

00:07:15,510 --> 00:07:24,380
period over to a CPI as the platform

00:07:18,660 --> 00:07:27,960
description it's not a quick and easy

00:07:24,380 --> 00:07:30,420
task of ensuring that device tree is

00:07:27,960 --> 00:07:33,770
clean and so it's it's a long process

00:07:30,420 --> 00:07:36,030
and it's taken us three years to get to

00:07:33,770 --> 00:07:39,200
the state that we're in where it's

00:07:36,030 --> 00:07:42,390
relatively uniform and partners

00:07:39,200 --> 00:07:49,680
understand how their platform should be

00:07:42,390 --> 00:07:53,310
described so moving on from the firmware

00:07:49,680 --> 00:07:58,130
come on to colonel most of our

00:07:53,310 --> 00:08:02,040
outsourced focus is on linux so it's

00:07:58,130 --> 00:08:06,330
where a lot of our efforts there so what

00:08:02,040 --> 00:08:11,640
do we do with the colonel we enable the

00:08:06,330 --> 00:08:16,170
RM IP blocks upstream so when it comes

00:08:11,640 --> 00:08:17,970
to bringing the device art etc you

00:08:16,170 --> 00:08:22,890
should be able to just take main line

00:08:17,970 --> 00:08:25,760
and it should in theory work I'm not

00:08:22,890 --> 00:08:29,520
going to say it will but that's the plan

00:08:25,760 --> 00:08:33,840
and we also work on connecting our IP

00:08:29,520 --> 00:08:37,710
blocks with third-party components so a

00:08:33,840 --> 00:08:40,110
CP is a prime example it's not something

00:08:37,710 --> 00:08:41,089
that arm has developed but it needs to

00:08:40,110 --> 00:08:44,039
talk to the

00:08:41,089 --> 00:08:45,449
and in his talk two aspects where we

00:08:44,039 --> 00:08:50,100
have enabled components within the

00:08:45,449 --> 00:08:55,160
kernel and then there's ensuring that

00:08:50,100 --> 00:08:59,089
our community and partners can still

00:08:55,160 --> 00:09:03,149
work if they come up against bugs issues

00:08:59,089 --> 00:09:05,970
need some guidance of I'm advice we're

00:09:03,149 --> 00:09:08,910
there to help try and steer them in the

00:09:05,970 --> 00:09:11,399
right direction and then there's always

00:09:08,910 --> 00:09:15,749
the whole performance testing

00:09:11,399 --> 00:09:20,720
regressions optimizations improving

00:09:15,749 --> 00:09:25,379
what's up there already as part of our

00:09:20,720 --> 00:09:29,670
kernel work we also hold maintainer ship

00:09:25,379 --> 00:09:35,819
in multiple areas so we have the

00:09:29,670 --> 00:09:39,839
maintainer ship for arm v8 and also for

00:09:35,819 --> 00:09:47,040
kvm on arm v8 as well as being co

00:09:39,839 --> 00:09:50,220
maintain us for kb m 97 development

00:09:47,040 --> 00:09:57,600
tools well there's multiple tool chains

00:09:50,220 --> 00:10:03,089
available which one should we pick why

00:09:57,600 --> 00:10:04,980
pick one GCC is the incumbent so

00:10:03,089 --> 00:10:11,240
naturally we're going to ensure that we

00:10:04,980 --> 00:10:15,839
support GCC llvm is growing in usage

00:10:11,240 --> 00:10:19,649
especially within the graphics world so

00:10:15,839 --> 00:10:25,110
our GP you guys a lot of stuff in trying

00:10:19,649 --> 00:10:29,629
to lv m we been very active than the

00:10:25,110 --> 00:10:32,699
llvm community helping foster it we are

00:10:29,629 --> 00:10:35,490
we with drivers behind the llvm european

00:10:32,699 --> 00:10:38,579
conference the last few years that's now

00:10:35,490 --> 00:10:41,040
transitioning into its own body which is

00:10:38,579 --> 00:10:45,269
great to see and the community's taking

00:10:41,040 --> 00:10:51,149
over the steerage of the lvm european

00:10:45,269 --> 00:10:52,649
conference so and not only that llvm is

00:10:51,149 --> 00:10:57,499
now

00:10:52,649 --> 00:11:02,249
with the new arm compiler six is the

00:10:57,499 --> 00:11:05,699
default bakit so we not only support

00:11:02,249 --> 00:11:08,819
community we're actually using a lot of

00:11:05,699 --> 00:11:11,249
the output there as well so within

00:11:08,819 --> 00:11:14,879
development tools we're doing pretty

00:11:11,249 --> 00:11:17,550
much the same sort of thing as we do

00:11:14,879 --> 00:11:21,269
with the colonel so it's all you know

00:11:17,550 --> 00:11:24,350
enabling three families of arm

00:11:21,269 --> 00:11:26,369
processors we've got the a-class

00:11:24,350 --> 00:11:30,290
application processes which you'll see

00:11:26,369 --> 00:11:33,589
in phones tablets media devices etc

00:11:30,290 --> 00:11:37,019
we've got the m-class which is

00:11:33,589 --> 00:11:42,809
microcontrollers which is powering a lot

00:11:37,019 --> 00:11:48,420
of embedded class products and then the

00:11:42,809 --> 00:11:50,990
art class is real-time family which

00:11:48,420 --> 00:11:55,319
you'll see in hard drives and other

00:11:50,990 --> 00:11:58,399
devices like that so ensuring connect

00:11:55,319 --> 00:12:02,779
the correctness of each compiler

00:11:58,399 --> 00:12:06,949
ensuring that it generates right Co

00:12:02,779 --> 00:12:13,339
again performance regression testing a

00:12:06,949 --> 00:12:17,279
key item as with the colonel we hold

00:12:13,339 --> 00:12:19,649
maintainer ship roles so ensure they

00:12:17,279 --> 00:12:23,490
include the arm back ends for various

00:12:19,649 --> 00:12:29,300
compilers and also supporting the

00:12:23,490 --> 00:12:31,620
community through various means so

00:12:29,300 --> 00:12:37,259
that's the foundation where do we go on

00:12:31,620 --> 00:12:42,809
from there the open source world is very

00:12:37,259 --> 00:12:47,660
wide varied so now that the foundation

00:12:42,809 --> 00:12:51,420
has been laid we can look at enabling

00:12:47,660 --> 00:12:53,970
other components that would then build

00:12:51,420 --> 00:12:59,249
on top of that so looking up different

00:12:53,970 --> 00:13:01,679
application frameworks ensuring that

00:12:59,249 --> 00:13:03,740
they're all working correctly the

00:13:01,679 --> 00:13:07,520
performance in comparisons

00:13:03,740 --> 00:13:09,860
the alternative architectures but it's

00:13:07,520 --> 00:13:13,190
not just application frameworks it's

00:13:09,860 --> 00:13:17,570
also alternative operating systems so

00:13:13,190 --> 00:13:19,670
we're starting to to work up freebsd

00:13:17,570 --> 00:13:24,770
community we'll work up with the freebsd

00:13:19,670 --> 00:13:27,740
community to enable freebsd amar the

00:13:24,770 --> 00:13:30,440
community there has done a lot of work

00:13:27,740 --> 00:13:33,400
but they still need some help and some

00:13:30,440 --> 00:13:40,940
guidance on how to move things forward

00:13:33,400 --> 00:13:46,280
and working on android to ensure that it

00:13:40,940 --> 00:13:52,340
again is performing and is supporting

00:13:46,280 --> 00:13:58,330
our architectures arm ported google's v8

00:13:52,340 --> 00:14:03,440
JavaScript engine to our armed the eight

00:13:58,330 --> 00:14:08,000
that's now upstream as of version 3.2

00:14:03,440 --> 00:14:11,960
five so it's all up there to ensure that

00:14:08,000 --> 00:14:14,750
again the web technologies that libra

00:14:11,960 --> 00:14:22,250
javascript and v8 can actually perform

00:14:14,750 --> 00:14:25,120
well so that's us working with external

00:14:22,250 --> 00:14:29,480
projects we also have some of our own

00:14:25,120 --> 00:14:32,720
projects which are I'm source ne-10 is

00:14:29,480 --> 00:14:35,090
one of the bigger ones we've got Vic cyl

00:14:32,720 --> 00:14:39,320
and as I previously mentioned trust

00:14:35,090 --> 00:14:42,230
Fermi ne-10 is an outsourced library

00:14:39,320 --> 00:14:51,380
that helps to maximize the utilization

00:14:42,230 --> 00:15:00,460
of the neon simdi engine the engine

00:14:51,380 --> 00:15:04,090
itself as being quite useful for

00:15:00,460 --> 00:15:10,430
inflexible at doing a lot of

00:15:04,090 --> 00:15:13,680
mathematical transactions and is quite

00:15:10,430 --> 00:15:17,790
adapt adept at

00:15:13,680 --> 00:15:23,610
webwork so canvas and things like that

00:15:17,790 --> 00:15:33,370
Vic cyl is dynamic cogeneration tool a

00:15:23,610 --> 00:15:36,190
merrily it jits so Python mono etc could

00:15:33,370 --> 00:15:43,300
benefit from utilizing Vic cyl for

00:15:36,190 --> 00:15:46,150
porting to arm v8 so arms being

00:15:43,300 --> 00:15:50,830
historically seen as an embedded

00:15:46,150 --> 00:15:54,700
processor architecture so embedded is

00:15:50,830 --> 00:16:01,720
evolving and Internet of Things is the

00:15:54,700 --> 00:16:04,780
next big thing so with the internet

00:16:01,720 --> 00:16:07,690
things arm have created a project called

00:16:04,780 --> 00:16:19,030
embed working with a lot of our silicon

00:16:07,690 --> 00:16:24,330
partners it's a cross-platform embedded

00:16:19,030 --> 00:16:28,900
system based on the m-class family

00:16:24,330 --> 00:16:36,460
everything's done through a browser lot

00:16:28,900 --> 00:16:39,010
of codes on github so the intention is

00:16:36,460 --> 00:16:43,980
you write once for the M bed platform

00:16:39,010 --> 00:16:48,130
and it will run across a wide range of

00:16:43,980 --> 00:16:54,460
platforms for my partners from nxp pre

00:16:48,130 --> 00:16:57,900
scale SE micro you can get an embed

00:16:54,460 --> 00:17:02,490
certify platform for about ten euros

00:16:57,900 --> 00:17:07,380
that includes your sensors could have

00:17:02,490 --> 00:17:10,270
temperature sensor have Wi-Fi on there

00:17:07,380 --> 00:17:16,120
people have started doing projects like

00:17:10,270 --> 00:17:20,290
a gardening monitoring station check pH

00:17:16,120 --> 00:17:22,150
levels check water all those sort of

00:17:20,290 --> 00:17:25,650
things and it reports back to the

00:17:22,150 --> 00:17:29,750
browser back to web you can

00:17:25,650 --> 00:17:35,580
on the trip from your phone desktop etc

00:17:29,750 --> 00:17:37,770
so as I said so it's a component library

00:17:35,580 --> 00:17:40,260
so you write once and it's there

00:17:37,770 --> 00:17:42,900
available can be reused from one

00:17:40,260 --> 00:17:52,740
platform to the other talking to web

00:17:42,900 --> 00:17:56,040
services large scale things there's as a

00:17:52,740 --> 00:18:00,390
use case scenario for instance you could

00:17:56,040 --> 00:18:03,060
have a local authority want to try and

00:18:00,390 --> 00:18:05,340
cut down their electricity on street

00:18:03,060 --> 00:18:07,500
lighting currently most of the time

00:18:05,340 --> 00:18:11,700
street lighting comes on based on a

00:18:07,500 --> 00:18:16,140
timer not necessarily the most efficient

00:18:11,700 --> 00:18:20,040
way of lighting be much better if it was

00:18:16,140 --> 00:18:27,840
more responsive to and safer for users

00:18:20,040 --> 00:18:30,960
if it responded to light circumstances

00:18:27,840 --> 00:18:33,750
so if it's very cloudy etc it needs to

00:18:30,960 --> 00:18:37,590
come on earlier tonight summers day so

00:18:33,750 --> 00:18:40,650
it's light later it adjusts dynamically

00:18:37,590 --> 00:18:44,700
it reports its usage back to back-end

00:18:40,650 --> 00:18:47,390
server and you can monitor it there from

00:18:44,700 --> 00:18:47,390
an enterprise perspective

00:18:51,350 --> 00:18:58,750
as with most things without sauce

00:18:53,240 --> 00:19:02,210
there's a legal component licensing is

00:18:58,750 --> 00:19:05,179
much more at forefront now a lot of

00:19:02,210 --> 00:19:09,530
projects it's not something that you go

00:19:05,179 --> 00:19:15,260
I'm not a lawyer now just pick that

00:19:09,530 --> 00:19:18,440
license it kind of sounds nice so with

00:19:15,260 --> 00:19:22,190
the gauss legal and licensing and comes

00:19:18,440 --> 00:19:26,000
to the project that arm creates like any

00:19:22,190 --> 00:19:30,559
ten vixa let cetera we prefer more

00:19:26,000 --> 00:19:37,340
permissive licenses for us open sourcing

00:19:30,559 --> 00:19:40,400
a project isn't a means to go well we've

00:19:37,340 --> 00:19:42,289
kind of got most out that whatever there

00:19:40,400 --> 00:19:47,990
you go you might find it useful whoever

00:19:42,289 --> 00:19:51,980
we open source projects to try and build

00:19:47,990 --> 00:19:57,080
up a community around that project we

00:19:51,980 --> 00:20:00,500
want to get people involved a lot of our

00:19:57,080 --> 00:20:06,669
partners are quite twitchy when it comes

00:20:00,500 --> 00:20:09,250
to a more copyleft style licensing

00:20:06,669 --> 00:20:13,190
because they have a lot of proprietary

00:20:09,250 --> 00:20:14,750
code etc so to try and get them involved

00:20:13,190 --> 00:20:17,960
within those projects having a

00:20:14,750 --> 00:20:22,070
permissive license like BSD or Apache

00:20:17,960 --> 00:20:29,000
etc is a way of getting them to get

00:20:22,070 --> 00:20:31,610
involved into those projects so as an

00:20:29,000 --> 00:20:36,220
example as you can see their trusty

00:20:31,610 --> 00:20:40,669
firmware any ten Bixel bsd equals 3 and

00:20:36,220 --> 00:20:43,750
embeds apache2 license when it comes to

00:20:40,669 --> 00:20:48,080
working with external projects we prefer

00:20:43,750 --> 00:20:49,580
OSI approved licenses if it's not notice

00:20:48,080 --> 00:20:52,280
I approved license then at the very

00:20:49,580 --> 00:20:57,940
least it's a well known well understood

00:20:52,280 --> 00:20:59,960
licensed by the community our legal team

00:20:57,940 --> 00:21:01,400
does a lot of collaboration with

00:20:59,960 --> 00:21:03,740
internal groups

00:21:01,400 --> 00:21:06,130
and a lot of education within internal

00:21:03,740 --> 00:21:12,290
groups when it comes to open source

00:21:06,130 --> 00:21:16,940
usage licensing etc and provides regular

00:21:12,290 --> 00:21:19,340
gardens and workshops on how to do it

00:21:16,940 --> 00:21:23,710
properly and ensure that as an IP

00:21:19,340 --> 00:21:27,310
company we are still protected and

00:21:23,710 --> 00:21:31,520
there's no potential infringement etc

00:21:27,310 --> 00:21:35,780
our legal department is actually quite

00:21:31,520 --> 00:21:37,760
knowledgeable when with NASA open source

00:21:35,780 --> 00:21:40,300
and they're quite comfortable with

00:21:37,760 --> 00:21:42,740
working within the open source community

00:21:40,300 --> 00:21:48,350
we're involved in numerous linux

00:21:42,740 --> 00:21:51,770
foundation based legal initiatives s pdx

00:21:48,350 --> 00:21:59,450
being one of them we're co-chair of the

00:21:51,770 --> 00:22:01,790
SPD X initiative having an open-source

00:21:59,450 --> 00:22:03,820
savvy legal department has been

00:22:01,790 --> 00:22:07,880
acknowledged by Linux Foundation is

00:22:03,820 --> 00:22:11,450
something that needs to grow there's not

00:22:07,880 --> 00:22:13,760
enough depart companies that have a

00:22:11,450 --> 00:22:18,350
legal department that understands the

00:22:13,760 --> 00:22:21,530
open-source way of working so we're

00:22:18,350 --> 00:22:25,400
quite lucky in that respect and we try

00:22:21,530 --> 00:22:33,380
and leverage that advantage to the best

00:22:25,400 --> 00:22:40,280
fat use so as a company just like Sousa

00:22:33,380 --> 00:22:41,740
and other corporates we are trying to be

00:22:40,280 --> 00:22:45,820
active within the open source community

00:22:41,740 --> 00:22:50,780
and part of that activity involves

00:22:45,820 --> 00:22:58,030
membership of numerous foundations work

00:22:50,780 --> 00:23:00,800
groups etc so just this an example of

00:22:58,030 --> 00:23:03,410
some of the groups that were involved in

00:23:00,800 --> 00:23:07,010
Linux Foundation we're on the Zen

00:23:03,410 --> 00:23:12,640
advisory board xen hypervisor we're

00:23:07,010 --> 00:23:14,480
member of the open ocean alliance ufi

00:23:12,640 --> 00:23:23,840
committee

00:23:14,480 --> 00:23:26,630
and also a member of linaro so what is

00:23:23,840 --> 00:23:31,010
linara I think most people know linux

00:23:26,630 --> 00:23:33,880
foundation xem projects a subset of the

00:23:31,010 --> 00:23:39,820
next foundation ufite fairly well known

00:23:33,880 --> 00:23:43,390
whose linaro well linaro is a non-profit

00:23:39,820 --> 00:23:48,410
engineering organization based in the UK

00:23:43,390 --> 00:23:50,299
and their goals are there for you sorry

00:23:48,410 --> 00:23:52,130
if I'm not going to reiterate each

00:23:50,299 --> 00:23:57,799
bullet point but the intention there is

00:23:52,130 --> 00:24:03,380
for us to grow with our partners and

00:23:57,799 --> 00:24:06,940
ensure that arm is a good oats all

00:24:03,380 --> 00:24:11,780
citizen a code is upstream how it works

00:24:06,940 --> 00:24:14,240
it's comparable to other architectures

00:24:11,780 --> 00:24:16,150
when it comes to Linux support so

00:24:14,240 --> 00:24:20,360
there's lots of aspects there that need

00:24:16,150 --> 00:24:25,179
work as I mentioned earlier arms a small

00:24:20,360 --> 00:24:31,870
company with built upon a partnership

00:24:25,179 --> 00:24:37,040
with our ecosystem so having linaro as a

00:24:31,870 --> 00:24:40,130
independent body if you will able to

00:24:37,040 --> 00:24:48,140
bring all those competitors together to

00:24:40,130 --> 00:24:52,450
improve things so some of the members of

00:24:48,140 --> 00:24:59,090
linaro you can see there it ranges from

00:24:52,450 --> 00:25:03,260
CPU vendors to OEMs to web services

00:24:59,090 --> 00:25:06,950
companies etc there's a wide variety of

00:25:03,260 --> 00:25:10,330
people involved there and that variety

00:25:06,950 --> 00:25:14,450
actually helps bring in knowledge from

00:25:10,330 --> 00:25:16,570
different areas to improve the state of

00:25:14,450 --> 00:25:16,570
affairs

00:25:18,800 --> 00:25:28,640
so arm as many people is recruiting

00:25:23,900 --> 00:25:31,670
we've got over 220 vacancies if you go

00:25:28,640 --> 00:25:34,310
to arm back home / careers you can see

00:25:31,670 --> 00:25:39,290
the full list we've got openings from

00:25:34,310 --> 00:25:42,920
the US on the west coast to Japan in the

00:25:39,290 --> 00:25:48,800
east and most points in between we've

00:25:42,920 --> 00:25:52,100
got key offices in san jose and austin

00:25:48,800 --> 00:25:55,310
in the u.s. we also have an office in

00:25:52,100 --> 00:25:59,110
seattle our head office is in cambridge

00:25:55,310 --> 00:26:02,900
we've got other sites within the UK

00:25:59,110 --> 00:26:06,550
maidenhead sheffield being two of them

00:26:02,900 --> 00:26:11,630
we've got a couple of offices in france

00:26:06,550 --> 00:26:15,740
we've got germany you name it we are in

00:26:11,630 --> 00:26:19,550
a lot of places so if you want to get

00:26:15,740 --> 00:26:25,840
involved all means please do put my name

00:26:19,550 --> 00:26:25,840
down there may be a nice incentive there

00:26:31,830 --> 00:26:46,140
it should be what's working two years

00:26:37,710 --> 00:26:50,130
ago ESU's libre office when you're

00:26:46,140 --> 00:26:54,870
applying we also have internships

00:26:50,130 --> 00:26:57,899
available and we've got a fairly good

00:26:54,870 --> 00:27:00,600
and successful graduate program so if

00:26:57,899 --> 00:27:02,700
you know any students that are looking

00:27:00,600 --> 00:27:07,220
at getting into open source

00:27:02,700 --> 00:27:16,500
professionally then please tell them to

00:27:07,220 --> 00:27:29,659
to apply so with that time to make up a

00:27:16,500 --> 00:27:35,580
bit of time any questions mr. Meeks in

00:27:29,659 --> 00:27:39,480
comparison to a reach if you will and

00:27:35,580 --> 00:27:44,460
our penetration within market I think

00:27:39,480 --> 00:27:46,970
3,000 fairly small considering 50

00:27:44,460 --> 00:27:50,690
billion units have been shipped we're in

00:27:46,970 --> 00:27:54,600
over ninety-five percent mobile phones

00:27:50,690 --> 00:27:59,220
etc etc and when you look at some of our

00:27:54,600 --> 00:28:02,940
partners for to take Qualcomm as an

00:27:59,220 --> 00:28:05,519
example we are significantly smaller and

00:28:02,940 --> 00:28:10,710
if you take some of our competitors that

00:28:05,519 --> 00:28:14,940
work in processes and GPUs again we are

00:28:10,710 --> 00:28:17,899
much smaller so that it's a relative

00:28:14,940 --> 00:28:17,899
figure

00:28:19,480 --> 00:28:39,060
I didn't see anything and I said several

00:28:35,440 --> 00:28:39,060
times don't bother bring me the micro

00:28:40,830 --> 00:28:57,700
any other questions you mentioned

00:28:52,510 --> 00:28:59,770
compilers we are working of course on no

00:28:57,700 --> 00:29:04,300
ma'am b8 not such new stuff some

00:28:59,770 --> 00:29:07,000
existing stuff arm v7 and our compiler

00:29:04,300 --> 00:29:11,080
read something like me go two thousand

00:29:07,000 --> 00:29:13,600
ten or so and about being a small

00:29:11,080 --> 00:29:16,930
project there is no time to investigate

00:29:13,600 --> 00:29:18,700
a better one and it's a huge part huge

00:29:16,930 --> 00:29:20,320
amount of packages and nobody wants to

00:29:18,700 --> 00:29:23,380
take the risk to build everything again

00:29:20,320 --> 00:29:25,620
well oops we'll build it but and then

00:29:23,380 --> 00:29:29,650
how will it work and who will test it

00:29:25,620 --> 00:29:32,200
how how do we pick a new compiler can

00:29:29,650 --> 00:29:34,360
build if you take the newest well first

00:29:32,200 --> 00:29:37,300
if we take the newest tool in our radar

00:29:34,360 --> 00:29:39,400
or one for example will it work well I

00:29:37,300 --> 00:29:41,740
everything compile that compiled with

00:29:39,400 --> 00:29:44,460
the old one and there we see a

00:29:41,740 --> 00:29:49,630
difference maybe do these two questions

00:29:44,460 --> 00:29:54,390
so yes you should be able to take the

00:29:49,630 --> 00:29:59,320
license or a compiler and it shouldn't

00:29:54,390 --> 00:30:01,150
break any arm v7 because it's still

00:29:59,320 --> 00:30:05,260
tested against arm v7 because v7 is

00:30:01,150 --> 00:30:10,600
still the existing architecture it's the

00:30:05,260 --> 00:30:14,320
dominant one so it should it shouldn't

00:30:10,600 --> 00:30:16,060
break anything I can't guarantee that

00:30:14,320 --> 00:30:17,970
because you do get breakages from time

00:30:16,060 --> 00:30:22,420
to time from on you know for instance

00:30:17,970 --> 00:30:31,180
moving from GCC for 7248 there were some

00:30:22,420 --> 00:30:32,910
breakages so it should work and it does

00:30:31,180 --> 00:30:35,860
get tested

00:30:32,910 --> 00:30:39,250
with regards to your second question of

00:30:35,860 --> 00:30:43,150
should you see a difference I would like

00:30:39,250 --> 00:30:48,250
to say yes I can't honestly guarantee

00:30:43,150 --> 00:30:50,620
you would but we do feed in optimization

00:30:48,250 --> 00:30:52,960
improvement etc and especially if you're

00:30:50,620 --> 00:30:57,460
going to be using the linaro compiler it

00:30:52,960 --> 00:31:00,160
is running very close to tip so it

00:30:57,460 --> 00:31:04,419
should have the latest and greatest with

00:31:00,160 --> 00:31:07,900
each release that gets back ported and

00:31:04,419 --> 00:31:13,179
tested so yeah i would i would recommend

00:31:07,900 --> 00:31:16,900
using compiler from linaro if you don't

00:31:13,179 --> 00:31:19,390
want to be running tip or if you don't

00:31:16,900 --> 00:31:21,520
have for instance if you're running on

00:31:19,390 --> 00:31:28,270
v7 we always recommend to use the the

00:31:21,520 --> 00:31:34,110
latest release so 483 I think available

00:31:28,270 --> 00:31:34,110
so yeah thank you

00:31:37,789 --> 00:31:41,229
any other question

00:31:47,929 --> 00:31:57,450
hello his arm making any effort in

00:31:52,730 --> 00:32:01,049
making some modules let's say for

00:31:57,450 --> 00:32:03,840
example if I would like to run and linux

00:32:01,049 --> 00:32:06,000
on my mobile phone which has an ARM

00:32:03,840 --> 00:32:09,720
processor but usually there is a lot of

00:32:06,000 --> 00:32:12,389
problems with pro priority models inside

00:32:09,720 --> 00:32:15,509
and I can basically boot it but I cannot

00:32:12,389 --> 00:32:17,759
actually do anything with it he's

00:32:15,509 --> 00:32:21,529
undoing anything in in that direction

00:32:17,759 --> 00:32:24,889
maybe trying to establish some kind of

00:32:21,529 --> 00:32:32,000
let's say a ball does something to make

00:32:24,889 --> 00:32:35,940
modules more standard more open hahaha

00:32:32,000 --> 00:32:40,649
we we work with a lot of our silicon

00:32:35,940 --> 00:32:44,490
partners trying and we try and advise

00:32:40,649 --> 00:32:47,179
them on certain aspects but we can't

00:32:44,490 --> 00:32:50,240
tell them what they must mustn't do

00:32:47,179 --> 00:32:52,669
because there's always a business

00:32:50,240 --> 00:32:56,960
component to their in it to make money

00:32:52,669 --> 00:33:04,740
much the same way we are in all honesty

00:32:56,960 --> 00:33:09,870
but in theory with arm v8 if that makes

00:33:04,740 --> 00:33:12,419
it into mobile phones etc you should be

00:33:09,870 --> 00:33:14,269
able to get most of the way but you're

00:33:12,419 --> 00:33:21,870
going to be looking at components like

00:33:14,269 --> 00:33:30,210
Bluetooth wireless etcetera where we

00:33:21,870 --> 00:33:35,220
don't have any control over so it's it's

00:33:30,210 --> 00:33:39,889
one of those situations where we want to

00:33:35,220 --> 00:33:39,889
to help but I hands are somewhat tied

00:33:40,279 --> 00:33:48,710
yes pick pick and choose really at the

00:33:46,590 --> 00:33:50,820
end of the day if if you're looking at

00:33:48,710 --> 00:33:52,500
building the hardware if you're looking

00:33:50,820 --> 00:33:56,159
at building a mobile platform for

00:33:52,500 --> 00:33:57,460
instance then you can select components

00:33:56,159 --> 00:34:02,080
that are more

00:33:57,460 --> 00:34:04,360
burnet Sandra some vendors whilst not

00:34:02,080 --> 00:34:07,510
being open source they do have binary

00:34:04,360 --> 00:34:09,429
blobs available others don't even have

00:34:07,510 --> 00:34:13,109
the the binaries available for you to

00:34:09,429 --> 00:34:17,339
use and there are numerous efforts

00:34:13,109 --> 00:34:21,040
within the community to open-source

00:34:17,339 --> 00:34:23,129
certain aspects of different silicon

00:34:21,040 --> 00:34:23,129
vendors

00:34:33,100 --> 00:34:37,340
seguin yes I think things are improving

00:34:35,420 --> 00:34:39,290
slowly so you can buy hardware that's

00:34:37,340 --> 00:34:41,870
fairly open now if you get a plays live

00:34:39,290 --> 00:34:44,570
board that's everything on there you can

00:34:41,870 --> 00:34:46,550
get at and it's got a Molly GPU which is

00:34:44,570 --> 00:34:47,930
largely reverse engineered although you

00:34:46,550 --> 00:34:49,910
can actually get an ex driver to install

00:34:47,930 --> 00:34:53,810
today yet because I don't know people

00:34:49,910 --> 00:34:55,520
and and the colonel story on there has

00:34:53,810 --> 00:34:57,590
been a bit of a mess but again that's

00:34:55,520 --> 00:34:59,570
working its way through i think 315

00:34:57,590 --> 00:35:01,460
should be pretty good and have most of

00:34:59,570 --> 00:35:02,990
the things working and that's supposed

00:35:01,460 --> 00:35:05,090
to be what's going to a KDE plasma

00:35:02,990 --> 00:35:08,390
tablet thing real soon now but we're all

00:35:05,090 --> 00:35:10,400
still waiting for that Nexus is good

00:35:08,390 --> 00:35:15,110
hardware except for the GPU and air

00:35:10,400 --> 00:35:17,330
which is awful you can't do anything but

00:35:15,110 --> 00:35:19,130
increasingly the current GPU versions

00:35:17,330 --> 00:35:21,500
have Colonel shim so you don't have to

00:35:19,130 --> 00:35:22,820
have the exact same kernel version that

00:35:21,500 --> 00:35:25,940
the phone shipped with you can upgrade

00:35:22,820 --> 00:35:27,380
things and stuff will still work so yeah

00:35:25,940 --> 00:35:28,910
you know if you pick your hardware

00:35:27,380 --> 00:35:31,310
reasonably carefully you can do most of

00:35:28,910 --> 00:35:34,600
what you wanted to do but the situation

00:35:31,310 --> 00:35:34,600
is still embarrassing in many ways

00:35:39,210 --> 00:35:51,690
anything else going once going twice so

00:35:49,029 --> 00:35:51,690

YouTube URL: https://www.youtube.com/watch?v=h8cxUVj1-ps


