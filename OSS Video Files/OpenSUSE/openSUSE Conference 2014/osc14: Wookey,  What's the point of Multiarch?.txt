Title: osc14: Wookey,  What's the point of Multiarch?
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	Multiarch is a fundamentally simple idea that extends the basic lib / lib64 idea to allow arbitrary architecture combinations. This co-installability of software of different ABIs and architectures, has obvious applications in emulation, cross-building, legacy binaries and cross-grading. It has been initially implemented in the Debian ecosystem, and may never make it to RPMworld, but it's an important concept that nevertheless deserves wider understanding across distros. Having used it for a couple of years I have been impressed at how useful it is, and find the orthogonality of the design very pleasing. This talk will explain how it works and show how it's used, but also use it as an example in the wider context of making big and disruptive changes like this in the ecosystem, reviewing what went well and what didn't. https://wiki.debian.org/Multiarch
Captions: 
	00:00:00,140 --> 00:00:11,099
well expect you can hear me it's not so

00:00:05,120 --> 00:00:14,429
hello as Andy wafer said I'm a debian

00:00:11,099 --> 00:00:15,690
imposter I have come here to talk to you

00:00:14,429 --> 00:00:17,609
all so I'm assuming you don't really

00:00:15,690 --> 00:00:21,080
know who I am I've been doing free

00:00:17,609 --> 00:00:24,750
software for quite a long time now and

00:00:21,080 --> 00:00:28,080
doing arm stuff for my pretty much

00:00:24,750 --> 00:00:30,150
entire professional career and got

00:00:28,080 --> 00:00:31,880
involved with debian in back in two

00:00:30,150 --> 00:00:38,520
thousand mostly because they had an arm

00:00:31,880 --> 00:00:39,960
distro to work on so and since I started

00:00:38,520 --> 00:00:41,070
working for the narrow which is what

00:00:39,960 --> 00:00:43,469
I've been doing for the last four years

00:00:41,070 --> 00:00:45,000
since it was created I've been doing

00:00:43,469 --> 00:00:47,250
some abun two things as well I used to

00:00:45,000 --> 00:00:48,809
ignore it before that but canonical was

00:00:47,250 --> 00:00:50,550
heavily involved at the start of linaro

00:00:48,809 --> 00:00:53,070
so that was the default destroy so I got

00:00:50,550 --> 00:00:55,050
to find out how bundu works as well and

00:00:53,070 --> 00:00:57,120
it came to appreciate that a bunt 0 and

00:00:55,050 --> 00:01:00,780
Debian in nearly the same thing at the

00:00:57,120 --> 00:01:05,400
lower levels at least so yes I've come

00:01:00,780 --> 00:01:08,130
here to try and break down some silos we

00:01:05,400 --> 00:01:09,780
all operate in our little segments node

00:01:08,130 --> 00:01:12,960
talk to each other very much so I

00:01:09,780 --> 00:01:15,030
thought it was useful to come and talk

00:01:12,960 --> 00:01:17,960
about primarily about multi arch

00:01:15,030 --> 00:01:21,420
although I'm actually also interested in

00:01:17,960 --> 00:01:22,500
any arm stuff particularly arm 64 which

00:01:21,420 --> 00:01:26,270
I've been working on the last four years

00:01:22,500 --> 00:01:28,740
across building OBS and all that stuff

00:01:26,270 --> 00:01:30,750
so this talk comes in two halves there's

00:01:28,740 --> 00:01:33,020
the technical aspect of what multi arch

00:01:30,750 --> 00:01:35,909
is and what it does and how it works and

00:01:33,020 --> 00:01:40,350
possibly more interesting the social

00:01:35,909 --> 00:01:44,100
aspect of how you make big and difficult

00:01:40,350 --> 00:01:45,930
changes in a distro like this and what

00:01:44,100 --> 00:01:48,530
when well we did right and what we

00:01:45,930 --> 00:01:53,220
didn't do right and it didn't go so well

00:01:48,530 --> 00:01:54,630
I always put the slide in because I got

00:01:53,220 --> 00:01:57,210
into this because of cross building and

00:01:54,630 --> 00:01:58,409
then the Menk lecture is confusing to

00:01:57,210 --> 00:02:01,890
anybody who doesn't do this all the time

00:01:58,409 --> 00:02:03,030
and i will use this so just so you know

00:02:01,890 --> 00:02:04,229
what i'm talking about the build machine

00:02:03,030 --> 00:02:06,030
is a machine you're building all not the

00:02:04,229 --> 00:02:08,429
machine you're building for the host

00:02:06,030 --> 00:02:10,649
machine is the machine you're building

00:02:08,429 --> 00:02:12,140
packages for not the host your building

00:02:10,649 --> 00:02:14,420
on and

00:02:12,140 --> 00:02:17,240
target is not finger building for it's

00:02:14,420 --> 00:02:21,670
the architecture of generate code from

00:02:17,240 --> 00:02:25,000
tools like compilers that generate code

00:02:21,670 --> 00:02:27,740
so what is this multi-arts thing

00:02:25,000 --> 00:02:29,900
fundamentally it's a very simple thing

00:02:27,740 --> 00:02:31,490
is just a general mechanism for

00:02:29,900 --> 00:02:35,800
installing libraries of multiple

00:02:31,490 --> 00:02:35,800
architectures in the same file system

00:02:36,220 --> 00:02:41,239
that's a be eyes when I say architecture

00:02:38,900 --> 00:02:43,520
so application binary interface the

00:02:41,239 --> 00:02:46,340
calling conventions I thing that has to

00:02:43,520 --> 00:02:49,580
match up in all your libraries in order

00:02:46,340 --> 00:02:52,340
for stuff to work and so you're probably

00:02:49,580 --> 00:02:54,050
all familiar with / liban / lip 64 which

00:02:52,340 --> 00:02:56,300
has been true in x86 world for a long

00:02:54,050 --> 00:02:57,920
time that's the same thing but that's

00:02:56,300 --> 00:03:01,090
the poor man's version that only does

00:02:57,920 --> 00:03:03,019
two things though it's two bit 64-bit

00:03:01,090 --> 00:03:05,900
that's it you can't install any other

00:03:03,019 --> 00:03:07,519
architectures that covers ninety percent

00:03:05,900 --> 00:03:09,050
of what people mostly want to do so

00:03:07,519 --> 00:03:11,600
that's what most people been using for a

00:03:09,050 --> 00:03:16,250
long time and but it doesn't really

00:03:11,600 --> 00:03:18,410
solve all the problems so fundamentally

00:03:16,250 --> 00:03:20,209
this is dead simple but because it's a

00:03:18,410 --> 00:03:24,049
really cool thing you know it's

00:03:20,209 --> 00:03:27,110
difficult to change so the basic point

00:03:24,049 --> 00:03:29,959
here is that you're if you install lib

00:03:27,110 --> 00:03:33,079
foo on different architecture machines

00:03:29,959 --> 00:03:36,590
they also go in the same place so you

00:03:33,079 --> 00:03:41,120
can't install the I 306 and rhf on the

00:03:36,590 --> 00:03:43,370
same box because they clash you might

00:03:41,120 --> 00:03:45,350
argue why would you want to but with

00:03:43,370 --> 00:03:48,290
multi arch you just put things in

00:03:45,350 --> 00:03:50,360
triplet known directories so each of

00:03:48,290 --> 00:03:52,670
these things has a place and they can

00:03:50,360 --> 00:03:54,110
all go on same system and you just have

00:03:52,670 --> 00:03:56,480
to tell the Linux the seed library

00:03:54,110 --> 00:03:59,269
loader that the default library path has

00:03:56,480 --> 00:04:03,410
changed and everything just works fairly

00:03:59,269 --> 00:04:05,269
straightforward so the important thing

00:04:03,410 --> 00:04:06,500
is that this is this is a simple thing

00:04:05,269 --> 00:04:08,500
but it's quite powerful because

00:04:06,500 --> 00:04:10,400
everything now has a canonical path

00:04:08,500 --> 00:04:12,709
doesn't matter what you're doing you

00:04:10,400 --> 00:04:14,150
might be cross building and native

00:04:12,709 --> 00:04:16,760
architectures non-native architectures

00:04:14,150 --> 00:04:19,609
emulating all those things there is just

00:04:16,760 --> 00:04:23,030
a place where their architectures

00:04:19,609 --> 00:04:24,800
libraries and headers are found

00:04:23,030 --> 00:04:26,180
and this pattern ever changes and new

00:04:24,800 --> 00:04:28,639
package the stuff up install the

00:04:26,180 --> 00:04:30,350
packages just is you haven't got to go

00:04:28,639 --> 00:04:31,700
or installing it for emulation purposes

00:04:30,350 --> 00:04:33,110
or I'm doing cross building now Sony

00:04:31,700 --> 00:04:37,340
look somewhere different all that goes

00:04:33,110 --> 00:04:38,510
away which is why having done this you

00:04:37,340 --> 00:04:40,010
don't really use this routes much

00:04:38,510 --> 00:04:42,050
anymore there are circumstances when you

00:04:40,010 --> 00:04:45,800
still need them and similarly multi lib

00:04:42,050 --> 00:04:49,850
serves a different purpose so Debian

00:04:45,800 --> 00:04:51,080
never use / lib 64 which may seem odd to

00:04:49,850 --> 00:04:54,290
distros they've been doing it that way

00:04:51,080 --> 00:04:56,800
for 15 years we always thought that

00:04:54,290 --> 00:04:59,990
native libraries should live in / lib

00:04:56,800 --> 00:05:02,240
and that was always true even on the

00:04:59,990 --> 00:05:06,680
older 64-bit architectures like alpha

00:05:02,240 --> 00:05:08,930
and I 64 and s390 and it was only the

00:05:06,680 --> 00:05:10,400
amd64 people who went well that's no

00:05:08,930 --> 00:05:12,560
good we want to install 32-bit and

00:05:10,400 --> 00:05:14,720
64-bit stuff so we'll invent a new / lib

00:05:12,560 --> 00:05:17,990
and we'll put that stuff in there and

00:05:14,720 --> 00:05:20,990
leave the old 32-bit stuff in / lib and

00:05:17,990 --> 00:05:23,210
that convention has since been used for

00:05:20,990 --> 00:05:24,919
neo 64-bit architectures as well so and

00:05:23,210 --> 00:05:26,960
then you can tell when this will went

00:05:24,919 --> 00:05:30,470
wrong when the x32 came out because this

00:05:26,960 --> 00:05:32,419
is clearly madness so this is just poor

00:05:30,470 --> 00:05:33,830
man's multi-artist yeah we go Oh Oh a

00:05:32,419 --> 00:05:36,770
new thing we'll have to invent a new top

00:05:33,830 --> 00:05:41,660
level directory to put it in which seems

00:05:36,770 --> 00:05:43,550
a bit poor rly it works so in debian

00:05:41,660 --> 00:05:46,669
world we've been building 32-bit

00:05:43,550 --> 00:05:48,890
compatibility libraries as dasho I 386

00:05:46,669 --> 00:05:51,979
packages so package build build 64 and

00:05:48,890 --> 00:05:54,560
32 where you need them and most of its

00:05:51,979 --> 00:05:56,180
gone into a massive source package with

00:05:54,560 --> 00:05:59,510
all the libraries that you wanted 32-bit

00:05:56,180 --> 00:06:00,770
versions of and called I 32 lips which

00:05:59,510 --> 00:06:03,380
is what you install if you need to

00:06:00,770 --> 00:06:06,289
install any 32-bit stuff on a 64-bit

00:06:03,380 --> 00:06:07,850
system this is a bit of a hack but we

00:06:06,289 --> 00:06:10,150
thought well we'll fix this / lib

00:06:07,850 --> 00:06:12,470
problem and this will do in the meantime

00:06:10,150 --> 00:06:14,539
but that was like two thousand one and

00:06:12,470 --> 00:06:18,169
it grew and it grew as there were more

00:06:14,539 --> 00:06:19,729
and more things you needed so by 2005 it

00:06:18,169 --> 00:06:21,220
was the biggest source package in debian

00:06:19,729 --> 00:06:23,780
at three hundred and forty megabytes

00:06:21,220 --> 00:06:26,060
last year i finished up with 240 Meg

00:06:23,780 --> 00:06:27,289
before we finally killed it with 128

00:06:26,060 --> 00:06:28,700
libraries in it and it was always an

00:06:27,289 --> 00:06:30,770
ugly thing it was horrible to maintain

00:06:28,700 --> 00:06:32,210
so that was getting rid of this was the

00:06:30,770 --> 00:06:34,460
main driver for going we need to do

00:06:32,210 --> 00:06:36,320
multi arch properly let's fix this once

00:06:34,460 --> 00:06:39,330
and for all

00:06:36,320 --> 00:06:43,200
but it took a long time because these

00:06:39,330 --> 00:06:45,810
things are difficult so what you get if

00:06:43,200 --> 00:06:48,330
you do this is you can have an arbitrary

00:06:45,810 --> 00:06:50,400
mix of 64 and 32-bit apps you don't care

00:06:48,330 --> 00:06:52,710
no because now there's nothing special

00:06:50,400 --> 00:06:55,680
you can install as many 64-bit all those

00:06:52,710 --> 00:06:57,450
two-bit apps as you like you can cross

00:06:55,680 --> 00:06:58,620
great easily between architectures now I

00:06:57,450 --> 00:07:00,360
have no idea whether you can already do

00:06:58,620 --> 00:07:02,520
all these things in souza we shall

00:07:00,360 --> 00:07:04,020
hopefully come to that later and some of

00:07:02,520 --> 00:07:05,400
these things you might go at school some

00:07:04,020 --> 00:07:09,390
of them might go yeah we've being able

00:07:05,400 --> 00:07:12,750
to do that for years so so cross grading

00:07:09,390 --> 00:07:17,760
between architectures becomes pretty

00:07:12,750 --> 00:07:20,520
much trivial which is quite nice it's

00:07:17,760 --> 00:07:22,170
easy to install some of the stuff for a

00:07:20,520 --> 00:07:26,240
random architecture that you can't run

00:07:22,170 --> 00:07:29,550
except with say qemu and i'll just work

00:07:26,240 --> 00:07:32,640
cross compilation is perhaps the biggest

00:07:29,550 --> 00:07:34,440
change it's now because the paths are

00:07:32,640 --> 00:07:38,030
canonical you don't have different paths

00:07:34,440 --> 00:07:40,410
for compiling and from runtime and so

00:07:38,030 --> 00:07:42,480
stuff just works and you already got all

00:07:40,410 --> 00:07:45,450
the dependencies installing the

00:07:42,480 --> 00:07:47,840
dependencies for cross builds just

00:07:45,450 --> 00:07:51,060
happens as part of the normal package

00:07:47,840 --> 00:07:52,980
management system and you can get rid of

00:07:51,060 --> 00:07:55,440
all the packages that built a 64-bit and

00:07:52,980 --> 00:07:57,510
32-bit version you don't do that anymore

00:07:55,440 --> 00:07:59,130
you just build a native version of every

00:07:57,510 --> 00:08:02,040
package and then you can install them

00:07:59,130 --> 00:08:04,650
side by side if you need both or more

00:08:02,040 --> 00:08:06,810
and of course the main driver for this

00:08:04,650 --> 00:08:09,560
as I say was proprietary binary stuff

00:08:06,810 --> 00:08:15,600
that even Debian people need to install

00:08:09,560 --> 00:08:20,490
and having that work nicely so things it

00:08:15,600 --> 00:08:22,680
isn't it is not a way of installing 32

00:08:20,490 --> 00:08:24,660
and 64-bit versions of application level

00:08:22,680 --> 00:08:26,940
stuff at the same time you get to

00:08:24,660 --> 00:08:28,140
install one or the other because it's

00:08:26,940 --> 00:08:29,790
only dealing with the library part of

00:08:28,140 --> 00:08:32,729
this now you could deal with binaries as

00:08:29,790 --> 00:08:37,410
well but we haven't done that yet and

00:08:32,729 --> 00:08:39,210
I'll come on to why mostly that's

00:08:37,410 --> 00:08:40,290
sufficient for people and there are a

00:08:39,210 --> 00:08:45,360
few people who'd like to be able to do

00:08:40,290 --> 00:08:48,780
that as well this is about a B is not

00:08:45,360 --> 00:08:49,380
bounce ISAs instruction set differences

00:08:48,780 --> 00:08:51,680
so

00:08:49,380 --> 00:08:54,180
a lot of people get confused about this

00:08:51,680 --> 00:08:56,810
ABI is just the calling conventions and

00:08:54,180 --> 00:09:00,120
the library stuff that has to match up

00:08:56,810 --> 00:09:02,010
within an architecture it's not about

00:09:00,120 --> 00:09:04,320
have we got seem of or not have we

00:09:02,010 --> 00:09:06,030
gotten an X have we got whatever extra

00:09:04,320 --> 00:09:08,040
instructions that newer versions the

00:09:06,030 --> 00:09:09,390
architecture have so in general those

00:09:08,040 --> 00:09:10,620
things are forward compatible if you

00:09:09,390 --> 00:09:12,390
build the old stuff it'll still run on

00:09:10,620 --> 00:09:14,490
the newer stuff but if you feel if you

00:09:12,390 --> 00:09:16,530
optimize for new instructions you can't

00:09:14,490 --> 00:09:18,810
run out on the older machines so it is

00:09:16,530 --> 00:09:21,630
sterling compatible but it's it's an

00:09:18,810 --> 00:09:25,380
optimization rather than fundamental

00:09:21,630 --> 00:09:27,150
change in the ABI so that's when multi

00:09:25,380 --> 00:09:29,790
live is still useful because multi live

00:09:27,150 --> 00:09:32,430
lets you install the multiple flavors of

00:09:29,790 --> 00:09:37,800
the same ABI optimized for different

00:09:32,430 --> 00:09:39,960
CPUs should you need to do that there's

00:09:37,800 --> 00:09:41,160
other things you could do which we

00:09:39,960 --> 00:09:46,410
haven't done yet or are in the process

00:09:41,160 --> 00:09:48,150
of doing so partial architectures is not

00:09:46,410 --> 00:09:50,670
building all the packages for an

00:09:48,150 --> 00:09:56,210
architecture just a few in a different

00:09:50,670 --> 00:09:59,010
ABI so the most obvious case is ppc64

00:09:56,210 --> 00:10:03,480
it's pointless building all of Debian

00:09:59,010 --> 00:10:06,720
for ppc64 only want to do some stuff so

00:10:03,480 --> 00:10:08,310
I'm told I know nothing about a pc and

00:10:06,720 --> 00:10:09,660
you might as well just use all the

00:10:08,310 --> 00:10:11,550
existing threats to bit stuff and just

00:10:09,660 --> 00:10:13,290
build some 64-bit stuff and if you can

00:10:11,550 --> 00:10:15,210
just install them together that's neat

00:10:13,290 --> 00:10:16,500
it saves you building 20,000 packages

00:10:15,210 --> 00:10:18,690
and having to store them all on mirrors

00:10:16,500 --> 00:10:19,680
and all the usual stuff if no one was

00:10:18,690 --> 00:10:21,990
ever going to install any of that

00:10:19,680 --> 00:10:26,160
because it was pointless so partial

00:10:21,990 --> 00:10:27,330
architectures are useful but we haven't

00:10:26,160 --> 00:10:31,080
actually done it yet it's also useful

00:10:27,330 --> 00:10:32,820
for Windows win32 stuff and cross

00:10:31,080 --> 00:10:34,770
dependencies so one of the things about

00:10:32,820 --> 00:10:38,490
dependencies i assume is true in souza

00:10:34,770 --> 00:10:41,760
as well as Debian world is that the set

00:10:38,490 --> 00:10:43,740
is closed within the architecture so all

00:10:41,760 --> 00:10:45,660
you can install every package in the

00:10:43,740 --> 00:10:47,520
architecture using only packages from

00:10:45,660 --> 00:10:48,720
the architecture you don't need packages

00:10:47,520 --> 00:10:52,500
from other architectures to satify

00:10:48,720 --> 00:10:53,880
dependencies and cross compiles are a

00:10:52,500 --> 00:10:55,800
bit special in this regard because you

00:10:53,880 --> 00:10:57,990
need the C library of the host

00:10:55,800 --> 00:10:59,280
architecture and instead should c

00:10:57,990 --> 00:11:01,200
library and various other bits and bobs

00:10:59,280 --> 00:11:02,040
normally you build a separate version

00:11:01,200 --> 00:11:02,819
those and then packaged you're

00:11:02,040 --> 00:11:05,100
pretending it's

00:11:02,819 --> 00:11:06,029
for the build architecture but actually

00:11:05,100 --> 00:11:08,850
you could just use the one you already

00:11:06,029 --> 00:11:10,859
built for the host architecture and

00:11:08,850 --> 00:11:12,329
which actually simplifies your compiler

00:11:10,859 --> 00:11:14,549
builds enormously your cross compiler

00:11:12,329 --> 00:11:17,729
builds which is a painful subject of

00:11:14,549 --> 00:11:19,619
everything to do with it and so we're

00:11:17,729 --> 00:11:22,979
just in the process of doing that at the

00:11:19,619 --> 00:11:24,479
moment you can also Co install compilers

00:11:22,979 --> 00:11:28,499
you think why would I need to do that I

00:11:24,479 --> 00:11:33,089
can just do dash m32 and use the 32-bit

00:11:28,499 --> 00:11:37,199
back end which is true in x86 world the

00:11:33,089 --> 00:11:40,529
the particular use case that came up is

00:11:37,199 --> 00:11:45,379
if you need to build haskell stuff big

00:11:40,529 --> 00:11:52,169
haskell stuff on underpowered I 386 box

00:11:45,379 --> 00:11:54,929
sorry md 64 box anyway if you're having

00:11:52,169 --> 00:11:57,089
a brunch memory the 64-bit version of

00:11:54,929 --> 00:11:59,039
the compiler uses an awful lot more ram

00:11:57,089 --> 00:12:00,689
than 32 bit because Haskell's all

00:11:59,039 --> 00:12:03,600
pointers and they're all twice as big so

00:12:00,689 --> 00:12:06,109
you can still build stuff if you install

00:12:03,600 --> 00:12:10,669
the i386 compiler on the amd64 machine

00:12:06,109 --> 00:12:14,699
that you can't build on your low memory

00:12:10,669 --> 00:12:17,850
amd64 box sorry md 64 in debian speak is

00:12:14,699 --> 00:12:22,799
x86 underscore 64 in the rest of the

00:12:17,850 --> 00:12:24,299
world so people want to do this and if

00:12:22,799 --> 00:12:26,689
you arrange your compilers properly you

00:12:24,299 --> 00:12:29,939
can actually install them side by side

00:12:26,689 --> 00:12:31,709
again that's currently underway mostly

00:12:29,939 --> 00:12:33,209
by the guy who had this GHC problem he's

00:12:31,709 --> 00:12:37,970
decided to do the work and you again

00:12:33,209 --> 00:12:40,769
fair enough and mostly people don't care

00:12:37,970 --> 00:12:42,779
poor bootstrapping something that's

00:12:40,769 --> 00:12:44,579
always been painful in debian world it

00:12:42,779 --> 00:12:49,739
seems to work a lot more easily in souza

00:12:44,579 --> 00:12:52,350
world and and multi arch helps because

00:12:49,739 --> 00:12:53,549
lets you automate the first part

00:12:52,350 --> 00:12:55,799
bootstrap where you have to cross build

00:12:53,549 --> 00:12:58,109
everything you also have to have this

00:12:55,799 --> 00:12:59,909
build profile thing to remove all

00:12:58,109 --> 00:13:02,879
circular dependencies which also make

00:12:59,909 --> 00:13:04,350
bootstrapping difficult and once you can

00:13:02,879 --> 00:13:06,779
install arbitrary architectures together

00:13:04,350 --> 00:13:08,579
on a box you can think of all sorts of

00:13:06,779 --> 00:13:12,149
other increasingly def things that you

00:13:08,579 --> 00:13:14,499
might your you know can do and may or

00:13:12,149 --> 00:13:18,219
may not actually want to

00:13:14,499 --> 00:13:23,559
so as I said we install things in use

00:13:18,219 --> 00:13:25,839
lib triplet instead of user lib now when

00:13:23,559 --> 00:13:29,709
we spec this up the problem is that

00:13:25,839 --> 00:13:31,869
triplets are not ABI unique they mostly

00:13:29,709 --> 00:13:34,509
are except where they aren't and that's

00:13:31,869 --> 00:13:37,179
mostly x86 world where you have by 386 I

00:13:34,509 --> 00:13:39,129
46 I 560 686 willing to know that all

00:13:37,179 --> 00:13:43,619
the same ABI but they have different new

00:13:39,129 --> 00:13:46,359
triplets just ice of variations

00:13:43,619 --> 00:13:49,509
optimizations really and that's kind of

00:13:46,359 --> 00:13:51,099
annoying you don't want to install your

00:13:49,509 --> 00:13:59,169
libraries to different you're compatible

00:13:51,099 --> 00:14:03,399
libraries of different paths yes you

00:13:59,169 --> 00:14:05,769
don't do it yes so we invented a new

00:14:03,399 --> 00:14:07,839
tuple scheme to specify these all

00:14:05,769 --> 00:14:08,919
properly and then ended up in a big

00:14:07,839 --> 00:14:10,359
argument about whether that was a good

00:14:08,919 --> 00:14:12,429
idea or not and the only got rejected

00:14:10,359 --> 00:14:16,449
and we went back to New triplets just

00:14:12,429 --> 00:14:18,159
normalized to I 3864 bet ABI and it

00:14:16,449 --> 00:14:19,479
didn't matter which flavor and that

00:14:18,159 --> 00:14:23,909
always go in that directory so that

00:14:19,479 --> 00:14:27,429
you'd have a matching set now the the

00:14:23,909 --> 00:14:29,769
way this works at the moment is you ask

00:14:27,429 --> 00:14:32,439
d package the low level packaging tool

00:14:29,769 --> 00:14:33,579
what is the correct multi arch name for

00:14:32,439 --> 00:14:35,259
this architecture so it's always

00:14:33,579 --> 00:14:37,119
translated between Debian names and

00:14:35,259 --> 00:14:40,239
canoe names and now it translates

00:14:37,119 --> 00:14:41,349
between multi large names as well the

00:14:40,239 --> 00:14:43,239
problem of that course is that only

00:14:41,349 --> 00:14:45,369
works in debian worlds the fallow use in

00:14:43,239 --> 00:14:48,429
the rest of the world saying this needs

00:14:45,369 --> 00:14:51,609
to move up to the LSB or some upstream

00:14:48,429 --> 00:14:56,829
tool virtually written one as a

00:14:51,609 --> 00:14:58,149
demonstration to go in LSB yeah but for

00:14:56,829 --> 00:15:02,889
reasons I'll come to later that's kind

00:14:58,149 --> 00:15:03,970
of stalled at the moment so that's

00:15:02,889 --> 00:15:08,609
something that still he's doing to

00:15:03,970 --> 00:15:10,929
spread this to a wider audience so the

00:15:08,609 --> 00:15:12,999
way the co install ability and

00:15:10,929 --> 00:15:15,339
dependency between packages actually

00:15:12,999 --> 00:15:17,979
works is we add an extra feel to each

00:15:15,339 --> 00:15:20,199
package called multi arch which

00:15:17,979 --> 00:15:24,849
basically says is this a library is this

00:15:20,199 --> 00:15:27,369
a tool or accounted decide so the names

00:15:24,849 --> 00:15:28,540
come from the dependency name so if this

00:15:27,369 --> 00:15:30,770
library needs

00:15:28,540 --> 00:15:32,690
to depend on something of the same

00:15:30,770 --> 00:15:36,200
architecture then it's called multi

00:15:32,690 --> 00:15:38,390
large same if it's the dependency can be

00:15:36,200 --> 00:15:39,950
satisfied by a foreign binary so you

00:15:38,390 --> 00:15:41,690
know auto make you don't care which

00:15:39,950 --> 00:15:45,500
architecture the automaker's for a

00:15:41,690 --> 00:15:49,190
deform on the works so that's multi arch

00:15:45,500 --> 00:15:50,630
foreign and something's allowed then it

00:15:49,190 --> 00:15:52,610
depends on what you're depending in some

00:15:50,630 --> 00:15:55,430
packages have both libraries in them and

00:15:52,610 --> 00:15:57,230
tools in them and it depends what you're

00:15:55,430 --> 00:16:00,230
using them for in this particular bill

00:15:57,230 --> 00:16:02,630
dependency which one you want it so some

00:16:00,230 --> 00:16:05,240
packages have to be marked both allowed

00:16:02,630 --> 00:16:08,480
and then the dependency specifies which

00:16:05,240 --> 00:16:11,690
architects you wanted it for and of

00:16:08,480 --> 00:16:14,270
course not all the files in a package

00:16:11,690 --> 00:16:17,149
our architecture dependent and all

00:16:14,270 --> 00:16:18,920
actual iso files there'll be a copyright

00:16:17,149 --> 00:16:23,990
file and maybe changelog maybe a whole

00:16:18,920 --> 00:16:25,490
load of stuff indeed header files mm so

00:16:23,990 --> 00:16:27,830
the package manager actually does

00:16:25,490 --> 00:16:28,970
reference counting to save install three

00:16:27,830 --> 00:16:31,220
this package three different times for

00:16:28,970 --> 00:16:32,630
three different architectures so don't

00:16:31,220 --> 00:16:34,640
take the changelog away until you've

00:16:32,630 --> 00:16:35,750
actually removed them all that does of

00:16:34,640 --> 00:16:38,480
course mean that they actually have to

00:16:35,750 --> 00:16:40,760
be the same across architectures yeah we

00:16:38,480 --> 00:16:42,230
used to not care if for some reason if

00:16:40,760 --> 00:16:45,620
you say says it usually there's a date

00:16:42,230 --> 00:16:46,550
in a help file if they get built on

00:16:45,620 --> 00:16:47,810
different days they end up with

00:16:46,550 --> 00:16:49,459
different dates in and now they're not

00:16:47,810 --> 00:16:51,740
quite identical and this all explodes

00:16:49,459 --> 00:16:56,360
and so we've suddenly had to stop caring

00:16:51,740 --> 00:16:57,830
about that stuff and fixing it up um so

00:16:56,360 --> 00:17:00,050
we you actually use this stead simple

00:16:57,830 --> 00:17:02,540
the low-level package manager d package

00:17:00,050 --> 00:17:04,910
is responsible for what is the native

00:17:02,540 --> 00:17:06,829
architecture so you just say d package

00:17:04,910 --> 00:17:09,559
add architecture some other foreign

00:17:06,829 --> 00:17:12,410
architecture and you can add as many as

00:17:09,559 --> 00:17:14,179
you like and you remove them the same

00:17:12,410 --> 00:17:17,270
way now you can't actually remove them

00:17:14,179 --> 00:17:20,540
until you've taken away all the packages

00:17:17,270 --> 00:17:21,949
of that type so if an architecture has

00:17:20,540 --> 00:17:25,630
to be enabled if there's still packages

00:17:21,949 --> 00:17:25,630
of that type it installed on the system

00:17:28,240 --> 00:17:35,280
so an apt is the high level package

00:17:31,820 --> 00:17:38,160
manager equivalent to zipper

00:17:35,280 --> 00:17:40,170
and you tell that where it can get

00:17:38,160 --> 00:17:42,360
packages of different architectures

00:17:40,170 --> 00:17:43,920
because not every repository has all the

00:17:42,360 --> 00:17:45,540
available architectures and especially

00:17:43,920 --> 00:17:48,000
if you're doing a new one it's only

00:17:45,540 --> 00:17:49,980
available in your crazy bootstrap repo

00:17:48,000 --> 00:17:54,000
that you've just invented and a bun too

00:17:49,980 --> 00:17:57,960
has always split its stuff up into x86

00:17:54,000 --> 00:18:00,540
archive and everything else at ports so

00:17:57,960 --> 00:18:01,620
you have to tell apt where it can find

00:18:00,540 --> 00:18:02,790
things or where it should look for

00:18:01,620 --> 00:18:04,470
things that little still work if you

00:18:02,790 --> 00:18:06,000
don't you just get a lot couldn't find

00:18:04,470 --> 00:18:11,400
file such and such because the indexes

00:18:06,000 --> 00:18:14,180
are missing so this works if you've got

00:18:11,400 --> 00:18:18,120
a machine we've already installed later

00:18:14,180 --> 00:18:20,970
seen this is a AMD 64 machine 64-bit

00:18:18,120 --> 00:18:23,460
machine if you just ask first all the

00:18:20,970 --> 00:18:25,800
i386 version it will install that and

00:18:23,460 --> 00:18:26,910
the corresponding lipsy dev and the

00:18:25,800 --> 00:18:29,460
corresponding library and the

00:18:26,910 --> 00:18:31,440
corresponding lipsy dependencies just

00:18:29,460 --> 00:18:34,200
get solved automatically because this

00:18:31,440 --> 00:18:37,230
depends and the dependency is propagated

00:18:34,200 --> 00:18:41,790
through that architecture and that

00:18:37,230 --> 00:18:44,040
simple so yes I should apologize for the

00:18:41,790 --> 00:18:45,510
fact that all this is written in debian

00:18:44,040 --> 00:18:49,590
terminology because i have no idea what

00:18:45,510 --> 00:18:52,710
they are p.m. and zipper equivalents

00:18:49,590 --> 00:18:55,200
would be but you basically so this this

00:18:52,710 --> 00:18:58,350
is the case that the original work was

00:18:55,200 --> 00:19:00,540
done to solve you just certain new

00:18:58,350 --> 00:19:04,230
architecture updates your lists of

00:19:00,540 --> 00:19:06,000
what's available download a deb that

00:19:04,230 --> 00:19:08,910
some bend or has currently can't be

00:19:06,000 --> 00:19:10,560
provided and install it and then app get

00:19:08,910 --> 00:19:12,410
will just sort out the dependencies and

00:19:10,560 --> 00:19:14,730
install all the 32-bit libraries that

00:19:12,410 --> 00:19:16,550
skype needs because they only supply

00:19:14,730 --> 00:19:20,820
that stupid version or least they did

00:19:16,550 --> 00:19:22,680
hmm and if they put it in a repo then

00:19:20,820 --> 00:19:26,220
it's even simpler you can just apt-get

00:19:22,680 --> 00:19:29,430
install something colon i386 and so this

00:19:26,220 --> 00:19:31,980
is quite cool once we have that working

00:19:29,430 --> 00:19:34,470
for flash plugin about three years ago

00:19:31,980 --> 00:19:39,870
now that was kind of the initial stage

00:19:34,470 --> 00:19:44,610
of this deemed working cross grading is

00:19:39,870 --> 00:19:46,440
also cool the thing that defines what

00:19:44,610 --> 00:19:47,950
the native architecture is is the

00:19:46,440 --> 00:19:52,149
version of d package on the cyst

00:19:47,950 --> 00:19:54,010
in fact something has to what it's not

00:19:52,149 --> 00:19:55,690
the colonel because we're habitually for

00:19:54,010 --> 00:19:59,860
years we've all run 64-bit girls and

00:19:55,690 --> 00:20:01,240
32-bit user spaces so it's the version

00:19:59,860 --> 00:20:02,830
of the package mouse the architecture

00:20:01,240 --> 00:20:08,080
the package manager defines what the

00:20:02,830 --> 00:20:11,380
native architecture is so if you want to

00:20:08,080 --> 00:20:12,820
cross grade you just download a new

00:20:11,380 --> 00:20:16,570
version of D package a new version of

00:20:12,820 --> 00:20:18,399
apt and stall them and we do it in this

00:20:16,570 --> 00:20:21,159
download only way and then install them

00:20:18,399 --> 00:20:22,929
sort of by hand because I've stopped at

00:20:21,159 --> 00:20:24,460
exploding and getting confused and

00:20:22,929 --> 00:20:26,710
trying to replace everything of itself

00:20:24,460 --> 00:20:28,149
for another architecture all at once so

00:20:26,710 --> 00:20:30,279
this used to blow up when it tried to

00:20:28,149 --> 00:20:31,840
replace the tar that D package was using

00:20:30,279 --> 00:20:33,519
underneath itself as it unpacked the new

00:20:31,840 --> 00:20:34,659
one got confused about which

00:20:33,519 --> 00:20:36,940
architecture you should be running but

00:20:34,659 --> 00:20:38,740
we fix that now so this is nice because

00:20:36,940 --> 00:20:40,360
people have been installing 32 years

00:20:38,740 --> 00:20:45,340
basis for years and quite often 12 a

00:20:40,360 --> 00:20:48,779
grade these days that's no easy cross

00:20:45,340 --> 00:20:52,570
building that's what got me into this

00:20:48,779 --> 00:20:56,649
there's three major things you have to

00:20:52,570 --> 00:20:58,450
worry about installing bill dependencies

00:20:56,649 --> 00:21:00,490
is the thing I spent a lot of time on

00:20:58,450 --> 00:21:04,090
over the years if you want to cross

00:21:00,490 --> 00:21:05,830
build whatever it needs a whole load of

00:21:04,090 --> 00:21:10,539
stuff for the build architecture for

00:21:05,830 --> 00:21:11,740
tools at runtime possibly tests and need

00:21:10,539 --> 00:21:14,289
a whole load of libraries and headers

00:21:11,740 --> 00:21:16,899
for the host architecture and working

00:21:14,289 --> 00:21:21,399
out which build dependencies of which

00:21:16,899 --> 00:21:24,820
architecture is a problem I'll come on

00:21:21,399 --> 00:21:27,130
to that later linking libraries is a bit

00:21:24,820 --> 00:21:31,059
of a pain I'll gonna come to that later

00:21:27,130 --> 00:21:32,289
and running tools of which you've just

00:21:31,059 --> 00:21:33,610
built during the builder of the wrong

00:21:32,289 --> 00:21:36,549
architecture is the other thing that

00:21:33,610 --> 00:21:38,769
tends to catch you out and multi arch

00:21:36,549 --> 00:21:43,870
helps to varying degrees with all of

00:21:38,769 --> 00:21:46,570
these so let's take a nice simple

00:21:43,870 --> 00:21:52,299
example ACL which just depends basically

00:21:46,570 --> 00:21:54,010
on the batter and thus on lipsy so it

00:21:52,299 --> 00:21:55,960
got build a pen see list like this Deb

00:21:54,010 --> 00:21:58,299
helper autocom for titles dev Deepak is

00:21:55,960 --> 00:22:01,130
dev and live after a dev yeah so it's

00:21:58,299 --> 00:22:03,020
not obvious that this last one

00:22:01,130 --> 00:22:05,120
the batter is needed you need the host

00:22:03,020 --> 00:22:07,580
architecture version but the fact is dev

00:22:05,120 --> 00:22:08,900
and also tools dev are things you need

00:22:07,580 --> 00:22:10,010
for the build architect because they're

00:22:08,900 --> 00:22:13,790
actually build tools even though they

00:22:10,010 --> 00:22:15,680
end in dash dev so I helped with a tool

00:22:13,790 --> 00:22:18,290
called X Deb which were used for some

00:22:15,680 --> 00:22:19,700
years which did this the dim way by

00:22:18,290 --> 00:22:21,890
looking at the list and going well it's

00:22:19,700 --> 00:22:24,050
called dash dev it's probably a live at

00:22:21,890 --> 00:22:25,340
development package with headers in so I

00:22:24,050 --> 00:22:26,810
should install the host version oh

00:22:25,340 --> 00:22:29,000
except for this long list of exceptions

00:22:26,810 --> 00:22:30,200
and if it starts with live something

00:22:29,000 --> 00:22:31,790
then it's probably a library and I

00:22:30,200 --> 00:22:33,320
should do the same thing except for this

00:22:31,790 --> 00:22:36,100
long list whose so it was pretty thick

00:22:33,320 --> 00:22:38,660
but I mean I should that work quite well

00:22:36,100 --> 00:22:41,840
once you had most of the important

00:22:38,660 --> 00:22:43,310
exceptions in the list but this because

00:22:41,840 --> 00:22:45,560
we've put it into the system and the

00:22:43,310 --> 00:22:48,020
dependencies just are it all works very

00:22:45,560 --> 00:22:49,720
nicely once enough packages have been

00:22:48,020 --> 00:22:52,970
annotated with multi large information

00:22:49,720 --> 00:22:54,800
so now you just say so AB get bill dep

00:22:52,970 --> 00:22:56,900
package name is the way we install the

00:22:54,800 --> 00:22:59,510
bill dependencies for a package so now

00:22:56,900 --> 00:23:02,320
you can say app get for architecture in

00:22:59,510 --> 00:23:07,130
this case I'm 64 we're building for that

00:23:02,320 --> 00:23:10,940
on any machine build eps for ACL and it

00:23:07,130 --> 00:23:14,900
goes okay so we need arm 64 versions of

00:23:10,940 --> 00:23:18,560
lipsy and the batter and lib GCC and GCC

00:23:14,900 --> 00:23:20,420
4.8 base and build architecture versions

00:23:18,560 --> 00:23:22,550
of anything else except apparently need

00:23:20,420 --> 00:23:24,170
linux lipsy dev as well so it just works

00:23:22,550 --> 00:23:26,390
and this is the point at which i went

00:23:24,170 --> 00:23:29,390
this is cool actually I'm starting to be

00:23:26,390 --> 00:23:31,340
impressed with this it's really really

00:23:29,390 --> 00:23:36,110
nice having struggled as problem for

00:23:31,340 --> 00:23:41,990
years it's just solved it's correct I'm

00:23:36,110 --> 00:23:46,340
very impressed library paths so this

00:23:41,990 --> 00:23:48,980
used to be somewhat painful so the kind

00:23:46,340 --> 00:23:52,850
of classic cross-compiling scheme things

00:23:48,980 --> 00:23:55,000
used to go and use a triplet lib even

00:23:52,850 --> 00:23:57,110
when they were normally news a lib and

00:23:55,000 --> 00:24:02,500
correspondingly headers went in user

00:23:57,110 --> 00:24:04,760
triplet include um but obviously so the

00:24:02,500 --> 00:24:07,460
link time path is different from the

00:24:04,760 --> 00:24:10,230
runtime path and similarly with sister

00:24:07,460 --> 00:24:12,660
routes although robin ball regularly

00:24:10,230 --> 00:24:14,940
you have just a prefix and then it will

00:24:12,660 --> 00:24:16,169
looks the same underneath that and which

00:24:14,940 --> 00:24:20,790
is pretty much everyone does things

00:24:16,169 --> 00:24:22,950
these days and the multi arch the link

00:24:20,790 --> 00:24:25,110
time and runtime paths are just the same

00:24:22,950 --> 00:24:27,120
doesn't change it's a lot easier to get

00:24:25,110 --> 00:24:28,230
it right removes all the opportunities

00:24:27,120 --> 00:24:30,630
libtool had to make your life miserable

00:24:28,230 --> 00:24:32,910
by getting it wrong which if you've ever

00:24:30,630 --> 00:24:34,890
having to do with it your discovery does

00:24:32,910 --> 00:24:36,809
regularly in fact lib tools pretty much

00:24:34,890 --> 00:24:38,309
irrelevant once you've got system like

00:24:36,809 --> 00:24:39,900
this obviously it still tends to get

00:24:38,309 --> 00:24:42,030
used and waste a whole lot of CPU cycles

00:24:39,900 --> 00:24:44,669
running massive pointless shell scripts

00:24:42,030 --> 00:24:50,330
but the net result is that it does

00:24:44,669 --> 00:24:53,730
nothing and the said the problem of

00:24:50,330 --> 00:24:55,650
random build time things so I'm a fan of

00:24:53,730 --> 00:24:57,150
proper cross-compiling way you try not

00:24:55,650 --> 00:24:58,710
to run things of the wrong architecture

00:24:57,150 --> 00:25:01,530
at Build time but it's increasingly

00:24:58,710 --> 00:25:03,690
difficult and certainly be just being

00:25:01,530 --> 00:25:08,100
able to if you've installed them is

00:25:03,690 --> 00:25:10,980
handy and glosses over a lot of

00:25:08,100 --> 00:25:13,799
imperfections in various peoples across

00:25:10,980 --> 00:25:17,010
build food obviously the dependencies

00:25:13,799 --> 00:25:18,510
just get solved automatically so and

00:25:17,010 --> 00:25:22,169
this kind of gives you quite a lot of

00:25:18,510 --> 00:25:25,290
what scratch box did but in a more

00:25:22,169 --> 00:25:29,250
orthogonal way so you can choose whether

00:25:25,290 --> 00:25:30,750
to put a certain amount of host

00:25:29,250 --> 00:25:32,820
architecture stuff which is only being

00:25:30,750 --> 00:25:34,260
run with cream you into a system or have

00:25:32,820 --> 00:25:37,559
real native packages you can just mix

00:25:34,260 --> 00:25:39,210
them up and by and large stuff works

00:25:37,559 --> 00:25:40,410
gotta be a little bit careful doing that

00:25:39,210 --> 00:25:44,880
there's various things that can go wrong

00:25:40,410 --> 00:25:47,490
but you can now do that so cross

00:25:44,880 --> 00:25:49,590
building is now pleasingly simple to be

00:25:47,490 --> 00:25:51,179
fair this is actually working nicely in

00:25:49,590 --> 00:25:54,000
a bun to at the moment it is not working

00:25:51,179 --> 00:25:56,669
nicely in debian yet because a few key

00:25:54,000 --> 00:26:01,919
things like libtool have not been

00:25:56,669 --> 00:26:05,730
converted so in fact very few packages

00:26:01,919 --> 00:26:07,350
will work just like this right now but

00:26:05,730 --> 00:26:10,410
in ubuntu hundreds and hundreds well

00:26:07,350 --> 00:26:11,940
thousands probably so you just cross

00:26:10,410 --> 00:26:13,530
build-essential is a package as the meta

00:26:11,940 --> 00:26:15,059
package we made up to install the tool

00:26:13,530 --> 00:26:17,150
chain and the lipsy of the host

00:26:15,059 --> 00:26:19,530
architecture and a few bits and bobs

00:26:17,150 --> 00:26:22,400
which make sure you have all the auto

00:26:19,530 --> 00:26:24,210
foo for the host architecture configured

00:26:22,400 --> 00:26:27,510
so you just install the bill

00:26:24,210 --> 00:26:29,880
tips for the host architecture get the

00:26:27,510 --> 00:26:32,280
source and build it for the house

00:26:29,880 --> 00:26:33,540
d'architecture absolutely the standard

00:26:32,280 --> 00:26:34,860
tools you know it's not a special

00:26:33,540 --> 00:26:36,330
version out gets not a special version

00:26:34,860 --> 00:26:38,730
of Deepak is your package just the

00:26:36,330 --> 00:26:39,930
normal stuff and now it just knows about

00:26:38,730 --> 00:26:42,960
different architectures and does the

00:26:39,930 --> 00:26:44,280
right thing very sweet obviously for

00:26:42,960 --> 00:26:46,950
real cross building you often want to

00:26:44,280 --> 00:26:48,240
turn off tests because so no check is

00:26:46,950 --> 00:26:50,250
the standard way of saying don't run the

00:26:48,240 --> 00:26:52,230
tests because if they're just going to

00:26:50,250 --> 00:26:53,340
run all the stuff you built okay you

00:26:52,230 --> 00:26:56,640
could run out of the kootenai but that's

00:26:53,340 --> 00:26:58,620
usually pointless and you do usually

00:26:56,640 --> 00:27:01,170
need to tell also comfort I got packages

00:26:58,620 --> 00:27:03,840
where to find its how big is a float

00:27:01,170 --> 00:27:06,860
type info that it can't generate at

00:27:03,840 --> 00:27:08,880
runtime and so that the standard or

00:27:06,860 --> 00:27:10,440
practice you don't usually do that you

00:27:08,880 --> 00:27:12,720
just use s build which is our standard

00:27:10,440 --> 00:27:14,400
build this package so now you can say

00:27:12,720 --> 00:27:20,880
build this package of 4 architecture

00:27:14,400 --> 00:27:22,410
blah it's all quite slick and so in

00:27:20,880 --> 00:27:24,840
order for all that cross stuff to work

00:27:22,410 --> 00:27:26,520
as well as doing library multi RT and we

00:27:24,840 --> 00:27:29,840
have to do header multi arching so that

00:27:26,520 --> 00:27:36,330
was actually a second part of the spec

00:27:29,840 --> 00:27:39,060
but it's I was done under a slightly

00:27:36,330 --> 00:27:40,140
separate specification and there's a few

00:27:39,060 --> 00:27:42,450
other bits and bobs you have to deal

00:27:40,140 --> 00:27:44,070
with so a smaller number of dev packages

00:27:42,450 --> 00:27:46,260
have been converted but quite a lot I've

00:27:44,070 --> 00:27:50,160
been done so in order to make all this

00:27:46,260 --> 00:27:52,320
work and you've got to change a fairly

00:27:50,160 --> 00:27:53,730
small number of core tools but slightly

00:27:52,320 --> 00:27:55,980
more we're expecting and principal is

00:27:53,730 --> 00:27:57,390
just the C library loader is the only

00:27:55,980 --> 00:27:59,010
thing that has to know that all the

00:27:57,390 --> 00:28:00,330
libraries come from a new place the

00:27:59,010 --> 00:28:01,890
package managers need to understand

00:28:00,330 --> 00:28:04,140
about the new dependency arrangements

00:28:01,890 --> 00:28:06,870
and the compilers need to have new

00:28:04,140 --> 00:28:08,100
default librarian header paths actually

00:28:06,870 --> 00:28:10,320
it turns out those are the things like

00:28:08,100 --> 00:28:12,000
make has the special bash shell syntax

00:28:10,320 --> 00:28:14,480
knows where libraries are so you have to

00:28:12,000 --> 00:28:17,990
tell it and all the other makes and

00:28:14,480 --> 00:28:20,790
various of our tools and things like

00:28:17,990 --> 00:28:23,820
libraries other languages that link with

00:28:20,790 --> 00:28:25,290
C so live je na is the Java thing for

00:28:23,820 --> 00:28:26,850
linking the sea libraries which needs to

00:28:25,290 --> 00:28:28,140
know where the libraries are so there's

00:28:26,850 --> 00:28:30,000
quite a lot of telling things that the

00:28:28,140 --> 00:28:31,260
default library path has moved in

00:28:30,000 --> 00:28:32,910
various packages once you've done a lot

00:28:31,260 --> 00:28:34,410
lot pretty much everything as long as

00:28:32,910 --> 00:28:36,170
you ask the compiler and doesn't try to

00:28:34,410 --> 00:28:38,040
work it out itself just works so

00:28:36,170 --> 00:28:39,600
upstream generally don't

00:28:38,040 --> 00:28:41,190
change at all unless they were doing

00:28:39,600 --> 00:28:44,340
evil stuff anyway which was probably

00:28:41,190 --> 00:28:46,800
wrong there's other things you could do

00:28:44,340 --> 00:28:50,130
with this so as I said it doesn't do

00:28:46,800 --> 00:28:52,580
binaries only libraries you could think

00:28:50,130 --> 00:28:54,870
of a scheme for that it's kind of thorny

00:28:52,580 --> 00:28:58,860
so far not enough people have cared to

00:28:54,870 --> 00:29:00,060
worry about doing that maybe one day one

00:28:58,860 --> 00:29:02,760
thing that is interesting is doing this

00:29:00,060 --> 00:29:08,670
for windows a lot of people build a lot

00:29:02,760 --> 00:29:10,500
of Windows software on Linux and just

00:29:08,670 --> 00:29:11,820
making it another architecture and

00:29:10,500 --> 00:29:13,170
having a place to install the libraries

00:29:11,820 --> 00:29:16,680
and using the standard package managers

00:29:13,170 --> 00:29:19,320
to deal with the dependencies and having

00:29:16,680 --> 00:29:23,130
normal packages which you can install is

00:29:19,320 --> 00:29:24,960
all quite attractive the main problem is

00:29:23,130 --> 00:29:26,460
that it's not POSIX architecture so it's

00:29:24,960 --> 00:29:29,970
a bit more different than the others

00:29:26,460 --> 00:29:33,840
which means that for example your user

00:29:29,970 --> 00:29:35,850
include headers used to be architecture

00:29:33,840 --> 00:29:37,380
independent is too if you if you add a

00:29:35,850 --> 00:29:38,550
non POSIX stuff that changes the

00:29:37,380 --> 00:29:41,340
definition of what architecture

00:29:38,550 --> 00:29:42,930
independent means so more things have to

00:29:41,340 --> 00:29:45,570
be put in the architecture sub

00:29:42,930 --> 00:29:48,800
directories instead of in the common the

00:29:45,570 --> 00:29:52,230
same everywhere because that says shrunk

00:29:48,800 --> 00:29:54,720
so Steven kit is keen to make this work

00:29:52,230 --> 00:29:56,970
and everybody else cares so I gather

00:29:54,720 --> 00:29:59,040
that Sousa actually has more packages

00:29:56,970 --> 00:30:01,050
which build just windows binaries than

00:29:59,040 --> 00:30:02,820
any other distro I'm aware of hundreds

00:30:01,050 --> 00:30:04,080
of them you could throw those away

00:30:02,820 --> 00:30:06,450
because you just build them from the

00:30:04,080 --> 00:30:12,060
standard packages and that may or may

00:30:06,450 --> 00:30:15,180
not be attractive um now it isn't quite

00:30:12,060 --> 00:30:17,700
perfect so there are some architectures

00:30:15,180 --> 00:30:21,480
you can't go install only because

00:30:17,700 --> 00:30:23,010
there's one file which crashes but it's

00:30:21,480 --> 00:30:24,630
the one file you can't change because

00:30:23,010 --> 00:30:26,340
it's the one file bake it into every

00:30:24,630 --> 00:30:31,140
binary ever built for that architecture

00:30:26,340 --> 00:30:33,180
which is where the loader lives so back

00:30:31,140 --> 00:30:35,520
in the day load has always lived in lib

00:30:33,180 --> 00:30:36,930
LDS o dot one so there's a range of

00:30:35,520 --> 00:30:41,280
architectures they're still using that

00:30:36,930 --> 00:30:43,470
and and so you can't install m68k on an

00:30:41,280 --> 00:30:45,000
HP PA system you can stall every other

00:30:43,470 --> 00:30:46,800
package in the system but there's only

00:30:45,000 --> 00:30:50,100
one loader and it's got to be one of the

00:30:46,800 --> 00:30:51,389
other and that's a pain fortunately the

00:30:50,100 --> 00:30:53,879
combinations that don't work

00:30:51,389 --> 00:30:55,859
ones that nobody cares about so actually

00:30:53,879 --> 00:30:57,359
this isn't a real problem in the real

00:30:55,859 --> 00:30:58,859
world it is unfortunate and you could

00:30:57,359 --> 00:31:03,329
fix it by making the load of smart

00:30:58,859 --> 00:31:05,940
enough somehow so we have got through to

00:31:03,329 --> 00:31:08,669
the lipsy people that making sure all

00:31:05,940 --> 00:31:12,389
new loader paths are unique is a really

00:31:08,669 --> 00:31:14,700
good idea and we've done that in I'm 64

00:31:12,389 --> 00:31:17,039
and PPC e l and all the more recently

00:31:14,700 --> 00:31:20,669
architectures there's now a nice list of

00:31:17,039 --> 00:31:22,249
all of these like URL it used to be

00:31:20,669 --> 00:31:27,029
quite a hard thing to discover what

00:31:22,249 --> 00:31:28,229
wasn't what was already used so the

00:31:27,029 --> 00:31:31,320
other thing that's a little bit broken

00:31:28,229 --> 00:31:33,239
is that this was designed assuming that

00:31:31,320 --> 00:31:35,429
libraries always needed other libraries

00:31:33,239 --> 00:31:37,469
of the same architecture that's

00:31:35,429 --> 00:31:40,559
perfectly true in kind of C C++ world

00:31:37,469 --> 00:31:42,239
but if you have embedded languages you

00:31:40,559 --> 00:31:43,440
can have they can have modules which are

00:31:42,239 --> 00:31:44,789
either architecture dependent or

00:31:43,440 --> 00:31:48,389
architecture independent because they're

00:31:44,789 --> 00:31:50,099
entirely interpreted and you can get a

00:31:48,389 --> 00:31:53,429
situation where you have a module a

00:31:50,099 --> 00:31:55,739
which is for an architecture which

00:31:53,429 --> 00:31:58,349
depends on module B which is all just

00:31:55,739 --> 00:32:00,929
Python say but then that depends on

00:31:58,349 --> 00:32:03,989
something else which is C again or

00:32:00,929 --> 00:32:05,249
linked to see and that needs to be the

00:32:03,989 --> 00:32:06,659
same architecture as the first thing and

00:32:05,249 --> 00:32:09,869
it doesn't propagate down under the

00:32:06,659 --> 00:32:11,700
existing scheme so we've had to think

00:32:09,869 --> 00:32:13,349
about that very hard we had a brain

00:32:11,700 --> 00:32:14,759
melting session of the last Deb conf

00:32:13,349 --> 00:32:15,869
with but the eight people in the world

00:32:14,759 --> 00:32:18,419
who actually understand this year we're

00:32:15,869 --> 00:32:20,639
going watches as my head hurts we think

00:32:18,419 --> 00:32:22,379
we have a plan that so the question was

00:32:20,639 --> 00:32:23,940
did we have to actually expand the spec

00:32:22,379 --> 00:32:25,320
to deal with this or could we just deal

00:32:23,940 --> 00:32:27,089
with it by being a bit smarter about how

00:32:25,320 --> 00:32:29,579
advances don't think we can just be a

00:32:27,089 --> 00:32:33,029
bit smarter in practice this happens

00:32:29,579 --> 00:32:34,659
very rarely so and we have a multi arch

00:32:33,029 --> 00:32:37,779
python and

00:32:34,659 --> 00:32:40,330
in ubuntu for a couple of years and

00:32:37,779 --> 00:32:46,869
nothing important breaks you can go

00:32:40,330 --> 00:32:50,080
around it so um some idea of how this

00:32:46,869 --> 00:32:51,669
came about as I say back when amd64 came

00:32:50,080 --> 00:32:53,889
out was the original we didn't like that

00:32:51,669 --> 00:32:55,899
very much we should fix this but it took

00:32:53,889 --> 00:32:57,669
a while for people to really start to do

00:32:55,899 --> 00:33:01,059
anything about it but it's 2004 we

00:32:57,669 --> 00:33:05,470
started so it took kind of seven years

00:33:01,059 --> 00:33:10,239
to get it into a distro and it's going

00:33:05,470 --> 00:33:13,599
to be well it was in debian last stable

00:33:10,239 --> 00:33:15,519
release last year so whatever those nine

00:33:13,599 --> 00:33:18,399
years it takes a while to get these

00:33:15,519 --> 00:33:20,200
things done and part of the problem was

00:33:18,399 --> 00:33:21,700
the set of people that understand the

00:33:20,200 --> 00:33:23,470
problem like this and can spec up a

00:33:21,700 --> 00:33:25,210
spare that's actually gonna work a busy

00:33:23,470 --> 00:33:27,639
people who haven't actually almost time

00:33:25,210 --> 00:33:29,470
to work on it and so it got talked about

00:33:27,639 --> 00:33:30,789
for a long time before somebody actually

00:33:29,470 --> 00:33:33,639
went no no we need to write some code

00:33:30,789 --> 00:33:36,549
and fix all this and then said there was

00:33:33,639 --> 00:33:38,249
D package patch first in 2008 if you see

00:33:36,549 --> 00:33:41,529
here it didn't actually get uploaded

00:33:38,249 --> 00:33:43,090
until 2011 and that was mostly due to

00:33:41,529 --> 00:33:45,220
the D package maintain of being a pain

00:33:43,090 --> 00:33:47,619
in the ass and not liking what we've

00:33:45,220 --> 00:33:49,869
done with the tuple names and I would go

00:33:47,619 --> 00:33:52,090
back to triplets arguing back and forth

00:33:49,869 --> 00:33:53,739
and also simply going yes it will do

00:33:52,090 --> 00:33:56,590
that and then not doing it for about a

00:33:53,739 --> 00:33:59,169
year and as one problems with debian is

00:33:56,590 --> 00:34:01,149
that package maintained errs have pretty

00:33:59,169 --> 00:34:02,320
much have a veto on their packages you

00:34:01,149 --> 00:34:04,299
know in theory other people can upload

00:34:02,320 --> 00:34:07,479
them but in practice we just don't if

00:34:04,299 --> 00:34:08,919
agreement hasn't been reached and so it

00:34:07,479 --> 00:34:10,629
stalled for a long time till linaro

00:34:08,919 --> 00:34:12,339
stepped up and paid somebody else to

00:34:10,629 --> 00:34:13,929
write the code and argue with the

00:34:12,339 --> 00:34:19,629
maintainer for another three months to

00:34:13,929 --> 00:34:22,419
get it in and so that didn't help but to

00:34:19,629 --> 00:34:25,169
be fair the implementation was better as

00:34:22,419 --> 00:34:28,049
a result of that argument you know

00:34:25,169 --> 00:34:31,210
maintain it was right about some things

00:34:28,049 --> 00:34:32,679
so you know this this produces very high

00:34:31,210 --> 00:34:36,700
quality code that's protest it's just

00:34:32,679 --> 00:34:40,630
really slow so yes so it was first

00:34:36,700 --> 00:34:43,380
working in ubuntu precise in 2011

00:34:40,630 --> 00:34:47,940
the last Debian release had multi arch

00:34:43,380 --> 00:34:51,130
and some packages in fact yes a list so

00:34:47,940 --> 00:34:54,100
the core stuff was done in precise and

00:34:51,130 --> 00:34:55,740
then we had solved 359 quite understand

00:34:54,100 --> 00:34:57,700
why there's so many more libraries in

00:34:55,740 --> 00:35:03,250
raring than they were in precise but

00:34:57,700 --> 00:35:05,740
apparently there are we have 700 awed by

00:35:03,250 --> 00:35:07,630
a stable release last year and we're up

00:35:05,740 --> 00:35:08,860
to over a thousand now and we'll

00:35:07,630 --> 00:35:10,540
probably have basically all the

00:35:08,860 --> 00:35:12,520
libraries done so as you can see this

00:35:10,540 --> 00:35:14,110
affects all your libraries but only a

00:35:12,520 --> 00:35:16,540
relatively small fraction of the rest of

00:35:14,110 --> 00:35:19,210
the system especially the build tools

00:35:16,540 --> 00:35:21,040
set anything is the leaf package never

00:35:19,210 --> 00:35:22,090
needs to say what multi arch it is

00:35:21,040 --> 00:35:25,090
because it doesn't matter it's just the

00:35:22,090 --> 00:35:26,500
leaf package as the whole load of stuff

00:35:25,090 --> 00:35:27,850
is not really involved so I don't know

00:35:26,500 --> 00:35:30,850
what percentage you will eventually be

00:35:27,850 --> 00:35:34,480
touched maybe ten percent of the archive

00:35:30,850 --> 00:35:39,520
or something but it is all the stuff

00:35:34,480 --> 00:35:43,660
people actually use so on to the social

00:35:39,520 --> 00:35:48,280
aspect of this it's a very good example

00:35:43,660 --> 00:35:50,830
of a difficult distro wide change to you

00:35:48,280 --> 00:35:53,800
know not just distro but the Linux file

00:35:50,830 --> 00:35:57,790
system hierarchy how do you make a

00:35:53,800 --> 00:35:59,950
change like this cuz nearly everyone

00:35:57,790 --> 00:36:01,330
will go really do we have to change that

00:35:59,950 --> 00:36:04,870
it's been like this for long time you

00:36:01,330 --> 00:36:07,030
know so one of things we live was that

00:36:04,870 --> 00:36:09,100
writing down a speck was amazingly

00:36:07,030 --> 00:36:11,590
helpful we didn't do that for years we

00:36:09,100 --> 00:36:13,150
have meetings and wrote minutes but we

00:36:11,590 --> 00:36:15,460
didn't write down so the problem is that

00:36:13,150 --> 00:36:17,080
the our typical free software meeting

00:36:15,460 --> 00:36:18,160
looks like this and some people stand

00:36:17,080 --> 00:36:19,630
around they talk to each other and they

00:36:18,160 --> 00:36:21,130
might even agree on some things or at

00:36:19,630 --> 00:36:22,480
least you know these three did and those

00:36:21,130 --> 00:36:25,030
two did and there isn't necessarily be

00:36:22,480 --> 00:36:27,070
on the same things and none of them went

00:36:25,030 --> 00:36:28,810
down and wrote it down in a proper spec

00:36:27,070 --> 00:36:32,560
afterwards they might hit a wiki page

00:36:28,810 --> 00:36:35,170
but it was a bit vague so one of the

00:36:32,560 --> 00:36:37,060
things that happened in 2009 was writing

00:36:35,170 --> 00:36:38,080
down an actual specification but the

00:36:37,060 --> 00:36:40,840
other thing is because you need to go to

00:36:38,080 --> 00:36:42,220
the your package maintainer people and

00:36:40,840 --> 00:36:45,370
so right we want you to implement this

00:36:42,220 --> 00:36:48,370
and they all walks actly exactly happens

00:36:45,370 --> 00:36:50,020
about this than the other so a good spec

00:36:48,370 --> 00:36:52,570
was enormously helpful and actually got

00:36:50,020 --> 00:36:54,460
the thing done in the end

00:36:52,570 --> 00:36:56,290
limiting the scope was the other thing

00:36:54,460 --> 00:36:58,000
that was important for a long time this

00:36:56,290 --> 00:36:59,320
third discussion was all about or we

00:36:58,000 --> 00:37:01,540
could multi touch the world we could go

00:36:59,320 --> 00:37:03,250
crazy we could have their elbows

00:37:01,540 --> 00:37:05,590
anything's possible and yeah it's all

00:37:03,250 --> 00:37:08,110
possible but if we want to do it this

00:37:05,590 --> 00:37:12,460
century maybe we should just kind of

00:37:08,110 --> 00:37:13,810
just do the library part for you know

00:37:12,460 --> 00:37:16,030
and not worry about the cross building

00:37:13,810 --> 00:37:18,820
part and the we could multi actual the

00:37:16,030 --> 00:37:20,320
binaries as well so limiting that helps

00:37:18,820 --> 00:37:24,150
great deal to make this something that

00:37:20,320 --> 00:37:26,320
only took ten years rather than 20 and

00:37:24,150 --> 00:37:27,670
getting everybody involved as the other

00:37:26,320 --> 00:37:29,560
things absolutely critical it's going to

00:37:27,670 --> 00:37:31,060
be seriously affected so that when

00:37:29,560 --> 00:37:33,310
you've got an agreement it's actually

00:37:31,060 --> 00:37:34,750
something that you can defend you know

00:37:33,310 --> 00:37:36,970
get someone coming on later saying uh

00:37:34,750 --> 00:37:40,360
but it doesn't work for X there you go

00:37:36,970 --> 00:37:43,000
bollocks really so we did pretty good

00:37:40,360 --> 00:37:45,490
job of that and splitting at work into

00:37:43,000 --> 00:37:47,110
pieces again working within a distro you

00:37:45,490 --> 00:37:49,690
can't break it for a year until

00:37:47,110 --> 00:37:53,830
everything's changed that's hopeless so

00:37:49,690 --> 00:37:57,910
you can't have like days and also making

00:37:53,830 --> 00:37:59,350
the providing good info for everybody

00:37:57,910 --> 00:38:04,240
else right although basically eight

00:37:59,350 --> 00:38:07,180
people did this the other 992 w

00:38:04,240 --> 00:38:08,740
developers didn't really care except

00:38:07,180 --> 00:38:10,480
insofar as their packages broke and had

00:38:08,740 --> 00:38:12,610
to change stuff and they'd like it to be

00:38:10,480 --> 00:38:14,200
as simple as possible so we've wrote

00:38:12,610 --> 00:38:16,390
pretty good doc saying if your package

00:38:14,200 --> 00:38:20,140
is built with this tool you need to

00:38:16,390 --> 00:38:23,140
change this and for most packages most

00:38:20,140 --> 00:38:24,910
library packages it's pretty boilerplate

00:38:23,140 --> 00:38:27,040
stuff actually you have to add a star

00:38:24,910 --> 00:38:29,320
slash star in a couple of places and and

00:38:27,040 --> 00:38:31,120
change your Deb helper compatibility

00:38:29,320 --> 00:38:34,630
level 29 and it would automatically do

00:38:31,120 --> 00:38:36,100
the right thing so giving people's clear

00:38:34,630 --> 00:38:38,710
instructions saying if you do that if

00:38:36,100 --> 00:38:39,670
you use this do this most people happy

00:38:38,710 --> 00:38:41,950
that and they just did what they were

00:38:39,670 --> 00:38:42,940
told and takes qalam time to fill

00:38:41,950 --> 00:38:45,100
through the system waiting for new

00:38:42,940 --> 00:38:47,080
uploads and so on but I've had all work

00:38:45,100 --> 00:38:49,000
pretty well and we didn't get a whole

00:38:47,080 --> 00:38:50,110
load of complaining about this craziness

00:38:49,000 --> 00:38:55,090
so the small amount complaining about

00:38:50,110 --> 00:38:57,120
the craziness but not much so that all

00:38:55,090 --> 00:39:00,430
went well but as you may have observed

00:38:57,120 --> 00:39:01,960
this has only been implemented in the

00:39:00,430 --> 00:39:04,610
Debian X system pretty much debian

00:39:01,960 --> 00:39:08,660
ubuntu and derivatives whole RPM world

00:39:04,610 --> 00:39:11,600
basically ignored it that was never the

00:39:08,660 --> 00:39:13,220
plan now the work was done within a

00:39:11,600 --> 00:39:15,170
distro because there was a set of people

00:39:13,220 --> 00:39:17,450
who cared enough to get it done and you

00:39:15,170 --> 00:39:19,250
know that's the unit of what you work in

00:39:17,450 --> 00:39:22,580
and you can't try and change all the

00:39:19,250 --> 00:39:24,230
distros at once unless you can do it

00:39:22,580 --> 00:39:27,380
upstream first and a change light is

00:39:24,230 --> 00:39:28,490
very hard to do upstream first because

00:39:27,380 --> 00:39:31,040
people can't get our date and believe

00:39:28,490 --> 00:39:36,950
this is going to work it'll just all

00:39:31,040 --> 00:39:39,050
break go away so so we did this and

00:39:36,950 --> 00:39:41,870
actually when we tried to extreme things

00:39:39,050 --> 00:39:46,730
we found that we hadn't quite got

00:39:41,870 --> 00:39:51,350
everyone involved we had the GCC people

00:39:46,730 --> 00:39:53,540
and the lipsy people and various tool

00:39:51,350 --> 00:39:54,830
chain and auto conf and a lot of

00:39:53,540 --> 00:39:56,540
packaged people and cross building

00:39:54,830 --> 00:39:59,240
people and so on and that was all good

00:39:56,540 --> 00:40:02,180
and but problems that we have the Debian

00:39:59,240 --> 00:40:04,280
GCC and EG tipsy people and an actual

00:40:02,180 --> 00:40:07,850
fact it turns out most of that work is

00:40:04,280 --> 00:40:10,790
done by Red Hat and maybe you guys I

00:40:07,850 --> 00:40:13,730
don't know I thought about it I've only

00:40:10,790 --> 00:40:16,460
ever met one lipsy person who wasn't the

00:40:13,730 --> 00:40:17,720
Debian guy in 15 years ago to

00:40:16,460 --> 00:40:19,130
conferences like that so you know I've

00:40:17,720 --> 00:40:20,990
never told those people and I think that

00:40:19,130 --> 00:40:22,280
was true of most of us so we didn't even

00:40:20,990 --> 00:40:24,290
realize we weren't talking to the right

00:40:22,280 --> 00:40:25,430
people until quite late when we

00:40:24,290 --> 00:40:27,680
presented all this stuff when they were

00:40:25,430 --> 00:40:29,090
what is this craziness there's foot from

00:40:27,680 --> 00:40:32,090
their point of view this has just come

00:40:29,090 --> 00:40:34,010
out of the blue and it was madness and

00:40:32,090 --> 00:40:35,420
so they were quite grumpy about that and

00:40:34,010 --> 00:40:40,250
said no we're not putting that in go

00:40:35,420 --> 00:40:42,980
away so in fact arm hit this problem

00:40:40,250 --> 00:40:45,290
they decided to use multi arch for the

00:40:42,980 --> 00:40:46,520
out 64 port from the beginning because

00:40:45,290 --> 00:40:48,040
it seemed like the future and the way

00:40:46,520 --> 00:40:50,750
forward in a sensible way to do things

00:40:48,040 --> 00:40:53,480
and then when they try to extreme things

00:40:50,750 --> 00:40:58,130
that you can't do that we're not having

00:40:53,480 --> 00:41:00,770
a lead affolter path of lib triplet LDS

00:40:58,130 --> 00:41:03,080
oh it's just stupid you know it's not

00:41:00,770 --> 00:41:04,970
it's pretty sensible take it out so

00:41:03,080 --> 00:41:06,590
sadly that didn't happen but they did

00:41:04,970 --> 00:41:08,210
get to keep / leave instead of such lib

00:41:06,590 --> 00:41:11,330
64 which is good from our point of view

00:41:08,210 --> 00:41:13,580
and so yeah so we ended up with a bit of

00:41:11,330 --> 00:41:15,620
a fight and the thing kind of stalled so

00:41:13,580 --> 00:41:17,150
we didn't get into the LSB and some

00:41:15,620 --> 00:41:18,020
patches are in GCC but not everything

00:41:17,150 --> 00:41:21,050
there's still a Deb

00:41:18,020 --> 00:41:23,990
in Delta and so basically that was a

00:41:21,050 --> 00:41:25,790
failure you know this did not go quite

00:41:23,990 --> 00:41:28,490
the way we planned and it was almost

00:41:25,790 --> 00:41:31,340
entirely because early meetings back in

00:41:28,490 --> 00:41:34,180
two thousand eight nine ten did not have

00:41:31,340 --> 00:41:36,770
the right G lipsy and GCC people there

00:41:34,180 --> 00:41:38,000
and you know they didn't get to hear

00:41:36,770 --> 00:41:41,810
about it for another two or three years

00:41:38,000 --> 00:41:43,970
which was too late so lesson learned

00:41:41,810 --> 00:41:45,500
that was a problem and it's caused this

00:41:43,970 --> 00:41:47,840
all to kind of get it's got as far as it

00:41:45,500 --> 00:41:49,640
has and it's very good we like it but

00:41:47,840 --> 00:41:51,920
it's not used everywhere and it's now

00:41:49,640 --> 00:41:53,390
awkward if you want to upstream changes

00:41:51,920 --> 00:41:56,000
about this to kind of change upstream

00:41:53,390 --> 00:41:59,690
defaults that's a bit difficult to do

00:41:56,000 --> 00:42:00,920
because most people still feel kind of

00:41:59,690 --> 00:42:02,990
multi lib way of doing things because

00:42:00,920 --> 00:42:05,360
multi arch replaces part of multi lib

00:42:02,990 --> 00:42:07,060
you can kind of use either to get the

00:42:05,360 --> 00:42:09,350
same effect for many purposes and you

00:42:07,060 --> 00:42:13,550
know GCC people quite like their multi

00:42:09,350 --> 00:42:15,890
lip stuff but you know we don't use it

00:42:13,550 --> 00:42:17,450
for that so you get some friction there

00:42:15,890 --> 00:42:18,710
about which way an upstream are kind of

00:42:17,450 --> 00:42:20,660
going well add a war which configure

00:42:18,710 --> 00:42:23,390
options values I nobody care what's the

00:42:20,660 --> 00:42:26,750
right thing so what are the defaults so

00:42:23,390 --> 00:42:28,490
that's kind of where we've got to so

00:42:26,750 --> 00:42:31,070
yeah I'm so I meant so yeah I'm not here

00:42:28,490 --> 00:42:34,700
to persuade all you lot no it's not that

00:42:31,070 --> 00:42:38,120
many all and that you should adopt this

00:42:34,700 --> 00:42:40,160
but I did want people to understand why

00:42:38,120 --> 00:42:42,380
we thought it was worth the effort and

00:42:40,160 --> 00:42:44,960
there it is quite interesting and mostly

00:42:42,380 --> 00:42:49,070
not to that if we can get better

00:42:44,960 --> 00:42:50,780
understanding of this issue and we

00:42:49,070 --> 00:42:53,360
should at least have less trouble with

00:42:50,780 --> 00:42:55,220
up streaming stuff so really these

00:42:53,360 --> 00:42:58,640
changes need to go into GFC now and

00:42:55,220 --> 00:42:59,690
we're working on that but some people

00:42:58,640 --> 00:43:01,100
like it and some people don't and

00:42:59,690 --> 00:43:04,970
there's there's a question about whether

00:43:01,100 --> 00:43:07,340
it should become defaults for anything

00:43:04,970 --> 00:43:09,470
you know or how configure should work to

00:43:07,340 --> 00:43:12,530
decide which which way you're building

00:43:09,470 --> 00:43:16,040
stuff and at least if if other people

00:43:12,530 --> 00:43:18,890
aren't saying no and understanding why

00:43:16,040 --> 00:43:23,180
it's useful that will help get things

00:43:18,890 --> 00:43:26,720
done upstream and so yes that's where

00:43:23,180 --> 00:43:28,580
we're at so I said you don't need multi

00:43:26,720 --> 00:43:30,240
arch because you can do nearly all these

00:43:28,580 --> 00:43:34,830
things some other way you can you

00:43:30,240 --> 00:43:36,930
use this roots or you can use a small

00:43:34,830 --> 00:43:41,630
subset of / lib top-level directories

00:43:36,930 --> 00:43:43,740
you can use / ml directories and so on

00:43:41,630 --> 00:43:46,230
but multi I have to cut all of those

00:43:43,740 --> 00:43:47,940
things at once in a nicely orthogonal

00:43:46,230 --> 00:43:49,230
kind of way and then having used it for

00:43:47,940 --> 00:43:51,060
a bit I've been really impressed at that

00:43:49,230 --> 00:43:52,200
part just feels like the right way to do

00:43:51,060 --> 00:43:54,480
these things and the only reason we

00:43:52,200 --> 00:43:55,530
didn't was because it was easier to do

00:43:54,480 --> 00:43:57,810
something else for each of these

00:43:55,530 --> 00:43:59,490
problems as we went along so now we've

00:43:57,810 --> 00:44:02,220
actually done it right it will be nice

00:43:59,490 --> 00:44:05,160
if we could get this spread through the

00:44:02,220 --> 00:44:08,850
rest of the world but I am no idea how

00:44:05,160 --> 00:44:26,720
to get there from here so yeah I shut up

00:44:08,850 --> 00:44:31,050
now does anyone else have to say and one

00:44:26,720 --> 00:44:35,030
potential issue is that i'm susie

00:44:31,050 --> 00:44:40,859
requires or opensuse would like to be

00:44:35,030 --> 00:44:45,420
binary compatible to an extent with RPM

00:44:40,859 --> 00:44:48,410
counterparts so you get people certain

00:44:45,420 --> 00:44:53,700
software vendors that will generate a

00:44:48,410 --> 00:44:58,050
Deb and an RPM that's at this produced

00:44:53,700 --> 00:45:04,410
two binaries one for Dave in bunt 0 and

00:44:58,050 --> 00:45:14,970
one for fedora Oakes's say opensuse dots

00:45:04,410 --> 00:45:19,710
multi arch how would that impact that

00:45:14,970 --> 00:45:21,690
scenario so you don't bake the the only

00:45:19,710 --> 00:45:23,820
thing you baked into the binary is the

00:45:21,690 --> 00:45:25,500
loader path and that's why we've gone to

00:45:23,820 --> 00:45:28,350
a lot of trouble to agree the loader

00:45:25,500 --> 00:45:31,170
paths sorry to agree the loader paths

00:45:28,350 --> 00:45:33,720
for architectures across distros so on a

00:45:31,170 --> 00:45:38,010
out 64 everybody uses the same linux

00:45:33,720 --> 00:45:40,650
loader path and alarm hf and everywhere

00:45:38,010 --> 00:45:41,940
else as far as i know and they the

00:45:40,650 --> 00:45:42,289
loader and knows where to look for the

00:45:41,940 --> 00:45:45,049
rest

00:45:42,289 --> 00:45:46,369
libraries so it doesn't matter if you've

00:45:45,049 --> 00:45:49,249
moved all your library that's why LD

00:45:46,369 --> 00:45:52,009
preload works and so on you can you can

00:45:49,249 --> 00:45:54,679
change the library path that's not

00:45:52,009 --> 00:45:56,269
problem at all building stuff is a

00:45:54,679 --> 00:45:59,329
little bit more involved because that

00:45:56,269 --> 00:46:00,910
affects your compiler setup but for just

00:45:59,329 --> 00:46:08,229
delivering binaries no problem till

00:46:00,910 --> 00:46:11,599
shouldn't matter right so I mean

00:46:08,229 --> 00:46:15,799
somewhere along the line I still fail to

00:46:11,599 --> 00:46:20,419
see the actual problem that you're

00:46:15,799 --> 00:46:22,849
solving right I mean so now i can have

00:46:20,419 --> 00:46:29,199
libraries but i can't have the binaries

00:46:22,849 --> 00:46:32,029
so that means i cannot use one disk and

00:46:29,199 --> 00:46:36,169
mount that as the root file system of

00:46:32,029 --> 00:46:39,380
power box and an x86 box because the

00:46:36,169 --> 00:46:41,329
binaries are still not separated so i'm

00:46:39,380 --> 00:46:45,069
still tied to having only one

00:46:41,329 --> 00:46:48,919
architecture / root filesystem one

00:46:45,069 --> 00:46:50,989
primary architecture yes right right so

00:46:48,919 --> 00:46:53,419
yes as I said that is a secondary thing

00:46:50,989 --> 00:46:57,289
which could be done but nobody has cared

00:46:53,419 --> 00:47:01,489
enough to do that but like so this is

00:46:57,289 --> 00:47:04,219
still useful for the various things i

00:47:01,489 --> 00:47:06,439
have mentioned cross building and it

00:47:04,219 --> 00:47:08,239
makes your build set up a lot simpler i

00:47:06,439 --> 00:47:11,569
mean again you know you've already fixed

00:47:08,239 --> 00:47:14,919
it once with you know special casing /

00:47:11,569 --> 00:47:18,289
lip 64 for some architectures and

00:47:14,919 --> 00:47:20,749
knowing to look in other paths for

00:47:18,289 --> 00:47:22,459
emulation libraries and so on so yeah

00:47:20,749 --> 00:47:25,369
you know you you're right that it

00:47:22,459 --> 00:47:28,729
doesn't it doesn't have a killer thing

00:47:25,369 --> 00:47:29,539
that makes it amazingly better right and

00:47:28,729 --> 00:47:31,880
we've already solved these problems

00:47:29,539 --> 00:47:33,140
different ways right and I mean the most

00:47:31,880 --> 00:47:35,449
of that's Croft and some of its really

00:47:33,140 --> 00:47:38,900
hacky yeah but I mean the lib the lib

00:47:35,449 --> 00:47:42,799
lib 64 stuff was fixed I don't know 20

00:47:38,900 --> 00:47:45,019
years ago by 10 15 actually yeah his

00:47:42,799 --> 00:47:47,630
cousin dish wasn't involved more than

00:47:45,019 --> 00:47:51,140
that right okay bye I Rick's and may I

00:47:47,630 --> 00:47:53,390
ex when they started being 64 and 32 a

00:47:51,140 --> 00:47:55,279
bit right I mean that's where those

00:47:53,390 --> 00:47:57,349
architectures still used lip

00:47:55,279 --> 00:47:59,209
it was amd64 it was the first one that

00:47:57,349 --> 00:48:02,390
decided in why did different direct no

00:47:59,209 --> 00:48:05,359
no no in the UNIX world we had lip and

00:48:02,390 --> 00:48:07,130
lick 664 okay maybe that was where it

00:48:05,359 --> 00:48:09,679
came AMD didn't but we never had a

00:48:07,130 --> 00:48:12,140
debian I ryx released so I didn't know

00:48:09,679 --> 00:48:15,559
that right but no but I mean so I r

00:48:12,140 --> 00:48:18,169
excited spark had it you know solaris

00:48:15,559 --> 00:48:21,109
whatever it's called so I mean that

00:48:18,169 --> 00:48:24,650
problem is really I mean that goes way

00:48:21,109 --> 00:48:26,839
back and I guess I mean we just adopted

00:48:24,650 --> 00:48:28,279
that in the end right in in the linux

00:48:26,839 --> 00:48:32,539
world I because that's the way it was

00:48:28,279 --> 00:48:34,699
done in UNIX and so yeah I mean you know

00:48:32,539 --> 00:48:37,669
I see I don't see the killer feature

00:48:34,699 --> 00:48:39,079
this has and and for the building I mean

00:48:37,669 --> 00:48:41,479
that's something that we as developers

00:48:39,079 --> 00:48:44,779
have to worry about but the users in the

00:48:41,479 --> 00:48:46,549
end they couldn't care less right so if

00:48:44,779 --> 00:48:49,309
I can go to user and say look you can

00:48:46,549 --> 00:48:52,130
mount one root filesystem on your power

00:48:49,309 --> 00:48:55,069
box and x86 and an N and it's all the

00:48:52,130 --> 00:48:57,679
same root filesystem then maybe maybe

00:48:55,069 --> 00:49:00,859
then I can have user draw but without

00:48:57,679 --> 00:49:03,140
the user draw I don't see that your

00:49:00,859 --> 00:49:04,579
lowest developers would go through my

00:49:03,140 --> 00:49:07,729
effort that you guys went through I mean

00:49:04,579 --> 00:49:11,539
this is crazy most of the most of the

00:49:07,729 --> 00:49:13,039
benefit accrues to the developers as a

00:49:11,539 --> 00:49:14,359
holiday crafts you can take out because

00:49:13,039 --> 00:49:16,279
the problem is you can't ask to take it

00:49:14,359 --> 00:49:18,859
out if you've only done it in part of

00:49:16,279 --> 00:49:20,929
the ecosystem so upstream now just has

00:49:18,859 --> 00:49:22,249
two versions of everything lastly it

00:49:20,929 --> 00:49:23,989
mostly doesn't affect upstream because

00:49:22,249 --> 00:49:27,079
you pretty much just configure with desh

00:49:23,989 --> 00:49:28,640
desh libery calls blah you know normally

00:49:27,079 --> 00:49:30,799
you configure with user lib now you can

00:49:28,640 --> 00:49:32,659
figure the user load triplet so you know

00:49:30,799 --> 00:49:34,640
for most upstream packages doesn't make

00:49:32,659 --> 00:49:39,140
much difference it's it's the toolchain

00:49:34,640 --> 00:49:41,059
stuff that's messy and yes you know when

00:49:39,140 --> 00:49:44,869
you start going old now we want x32 so

00:49:41,059 --> 00:49:47,869
we'll add a / x 32 and can you kind of

00:49:44,869 --> 00:49:51,049
go yes well kind of make sense once

00:49:47,869 --> 00:49:52,609
you've headed down this path but yeah

00:49:51,049 --> 00:49:54,259
you're right most of the benefit though

00:49:52,609 --> 00:49:56,509
there isn't there isn't any user benefit

00:49:54,259 --> 00:50:00,079
well said that having everything

00:49:56,509 --> 00:50:03,439
available for the other architecture so

00:50:00,079 --> 00:50:05,779
you know for I 306 am 64 you've got to

00:50:03,439 --> 00:50:08,790
build every package that you want to

00:50:05,779 --> 00:50:12,480
have a 32-bit version available off

00:50:08,790 --> 00:50:14,940
that on 64-bit systems somebody has to

00:50:12,480 --> 00:50:16,470
do the packaging for that right it

00:50:14,940 --> 00:50:20,820
doesn't just you don't get it for free

00:50:16,470 --> 00:50:23,100
maybe you do but where we have a base

00:50:20,820 --> 00:50:27,360
lips confer you just see if I built this

00:50:23,100 --> 00:50:28,920
I 586 package also creates a 32-bit

00:50:27,360 --> 00:50:34,110
package for me so it just copies the

00:50:28,920 --> 00:50:36,840
fights we don't build it twice so you

00:50:34,110 --> 00:50:40,530
copy out of the 32-bit build yet into

00:50:36,840 --> 00:50:42,210
the 64-bit build the later on yes and so

00:50:40,530 --> 00:50:43,980
it bends a repository will be copied

00:50:42,210 --> 00:50:45,750
over right ok so i guess that's sick of

00:50:43,980 --> 00:50:47,610
the debian zhdi package cross which

00:50:45,750 --> 00:50:50,070
takes an architecture bungees it into a

00:50:47,610 --> 00:50:54,090
different path in a bit another package

00:50:50,070 --> 00:50:57,960
yep ok um so my question would be how

00:50:54,090 --> 00:51:00,540
would you solve the binary site whole

00:50:57,960 --> 00:51:04,110
deer I have not sat down and thought

00:51:00,540 --> 00:51:06,420
about that at all also the prefix paths

00:51:04,110 --> 00:51:09,420
or suffixes on the bike yeah I mean

00:51:06,420 --> 00:51:10,620
something's level with paths but it's a

00:51:09,420 --> 00:51:14,430
bit tricky because a lot of things

00:51:10,620 --> 00:51:17,070
better for paths you know all those all

00:51:14,430 --> 00:51:18,810
those hash bank paths that's the bit

00:51:17,070 --> 00:51:21,720
that you can I go read about that and

00:51:18,810 --> 00:51:24,180
yeah there isn't an obvious painless

00:51:21,720 --> 00:51:26,090
that yet the library thing was was

00:51:24,180 --> 00:51:31,680
nicely contained within the loader

00:51:26,090 --> 00:51:35,130
pretty much and so that was easy binary

00:51:31,680 --> 00:51:38,040
is definitely harder you could just

00:51:35,130 --> 00:51:41,640
change it you'd have to I guess you'd

00:51:38,040 --> 00:51:45,240
need to teach things that red with a

00:51:41,640 --> 00:51:47,130
bang paths to go well I'll look here now

00:51:45,240 --> 00:51:50,100
all your bank mode some specific

00:51:47,130 --> 00:51:51,390
directory yes so it's not something I've

00:51:50,100 --> 00:51:53,490
sat down talked about so i'm not going

00:51:51,390 --> 00:51:56,010
to pontificate hear about what you might

00:51:53,490 --> 00:51:57,510
do i don't know OPI be happy to talk

00:51:56,010 --> 00:52:02,430
about with you but i've never really

00:51:57,510 --> 00:52:05,090
thought about it because we want to get

00:52:02,430 --> 00:52:05,090
this bit done first

00:52:05,119 --> 00:52:10,460
on the Lord of math I mean I mean the

00:52:08,720 --> 00:52:12,619
loader has to move there's no way

00:52:10,460 --> 00:52:16,999
there's no other way the loader would

00:52:12,619 --> 00:52:20,420
have to move if you use if you would if

00:52:16,999 --> 00:52:22,549
you were able to use the same root

00:52:20,420 --> 00:52:24,710
filesystem on multiple machines the

00:52:22,549 --> 00:52:27,049
loader would have to move so that you

00:52:24,710 --> 00:52:29,569
find the right binary loader for that

00:52:27,049 --> 00:52:31,160
architecture so the loader has to move

00:52:29,569 --> 00:52:35,299
and you have to do tricks with the

00:52:31,160 --> 00:52:39,890
binary well if you if you say you have

00:52:35,299 --> 00:52:41,960
user been like use that triplet bin and

00:52:39,890 --> 00:52:45,140
your bind mounted to use a pin you could

00:52:41,960 --> 00:52:46,910
do the same for /live since Leslie would

00:52:45,140 --> 00:52:53,380
be just a bank mount or the I specific

00:52:46,910 --> 00:52:57,109
directory inner daddy say no daddy

00:52:53,380 --> 00:52:58,579
Bettis a specific yeah it has to be some

00:52:57,109 --> 00:53:01,099
kind of the right architecture at the

00:52:58,579 --> 00:53:05,150
beginning to actually run or whatever

00:53:01,099 --> 00:53:06,859
Hardware you've put it on is the you

00:53:05,150 --> 00:53:08,779
have to inner diva dress are specific

00:53:06,859 --> 00:53:10,880
that doesn't bite man's ok right yes

00:53:08,779 --> 00:53:13,339
he's supplying tardiness of the bright

00:53:10,880 --> 00:53:16,160
architecture which can then do the right

00:53:13,339 --> 00:53:19,220
things yeah and I would work so the only

00:53:16,160 --> 00:53:21,259
eventual potentially seeds without much

00:53:19,220 --> 00:53:22,400
paint and we've already pretty much made

00:53:21,259 --> 00:53:25,279
a world where nothing works unless

00:53:22,400 --> 00:53:34,519
you've gotten it rd anyway so that's not

00:53:25,279 --> 00:53:37,940
a big fight anymore yes you morph

00:53:34,519 --> 00:53:41,690
anymore well thank you listening to my

00:53:37,940 --> 00:53:45,970
craziness and if anyone wants to talk

00:53:41,690 --> 00:53:45,970

YouTube URL: https://www.youtube.com/watch?v=fR7qdCbgGXA


