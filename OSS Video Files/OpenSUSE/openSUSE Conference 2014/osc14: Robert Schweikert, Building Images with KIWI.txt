Title: osc14: Robert Schweikert, Building Images with KIWI
Publication date: 2014-04-28
Playlist: openSUSE Conference 2014
Description: 
	KIWI is the image build system for SUSE Studio and is used to create all openSUSE and SUSE media.This session covers the basics of KIWI image building. We will discuss in detail what it takes to build an image with KIWI, look at the configuration file, develop an understanding of what goes on behind the scene and build a basic image using the kiwi command line.
Captions: 
	00:00:00,000 --> 00:00:05,790
and it is Monday and we're coming to the

00:00:03,510 --> 00:00:08,010
end of the conference and so if you

00:00:05,790 --> 00:00:13,519
don't know me by now then you've done

00:00:08,010 --> 00:00:16,770
something wrong now so more seriously

00:00:13,519 --> 00:00:20,820
Kiwi hands on that's really what I mean

00:00:16,770 --> 00:00:26,390
hands on um the idea is that I have

00:00:20,820 --> 00:00:30,119
about 60 to 70 minutes of yakking and

00:00:26,390 --> 00:00:33,570
the rest of the plan schedule is really

00:00:30,119 --> 00:00:38,219
for people to load whatever is on that

00:00:33,570 --> 00:00:40,969
stick and fiddle with it learning by

00:00:38,219 --> 00:00:43,410
doing okay so what I want to talk about

00:00:40,969 --> 00:00:47,360
introduction about me which is basically

00:00:43,410 --> 00:00:51,420
the same that I had to my other talk and

00:00:47,360 --> 00:00:55,980
then I want to talk what is Kiwi bout

00:00:51,420 --> 00:01:00,239
will look at prerequisites install your

00:00:55,980 --> 00:01:03,210
image I have my yakking to do and then

00:01:00,239 --> 00:01:05,250
the plan would be that you fiddle with

00:01:03,210 --> 00:01:07,470
stuff and then at the end we can talk

00:01:05,250 --> 00:01:13,890
about social studio OBS and integrated

00:01:07,470 --> 00:01:16,320
systems okay introduction that uh that's

00:01:13,890 --> 00:01:20,460
me I work in the isley engineering team

00:01:16,320 --> 00:01:22,880
at Souza they bestowed on me the title

00:01:20,460 --> 00:01:25,200
of public cloud architect that means I

00:01:22,880 --> 00:01:26,850
fiddled with all the stuff versus the

00:01:25,200 --> 00:01:31,079
lumix enterprises in the public cloud

00:01:26,850 --> 00:01:34,799
such as amazon HP google windows azure

00:01:31,079 --> 00:01:37,619
and some others that were working on i

00:01:34,799 --> 00:01:39,450
am also the IBM software group liaison

00:01:37,619 --> 00:01:41,759
that means i work with the IBM software

00:01:39,450 --> 00:01:43,649
group to make sure everything operates

00:01:41,759 --> 00:01:46,100
properly and susan and if they have

00:01:43,649 --> 00:01:48,360
questions they know where to find me

00:01:46,100 --> 00:01:50,970
integrated systems means that i work

00:01:48,360 --> 00:01:53,970
with other people that write software

00:01:50,970 --> 00:01:55,920
that you know may run on top of souza

00:01:53,970 --> 00:01:57,840
and the idea there is to build

00:01:55,920 --> 00:02:00,810
appliances and that's where kiwi comes

00:01:57,840 --> 00:02:03,810
in the place basically they bundle the

00:02:00,810 --> 00:02:05,729
application with the US and then make

00:02:03,810 --> 00:02:08,619
that available to their customers I

00:02:05,729 --> 00:02:12,260
contribute to Kiwi

00:02:08,619 --> 00:02:14,330
due to my cloudy things has gotten a

00:02:12,260 --> 00:02:16,790
little less that I want it to be but I

00:02:14,330 --> 00:02:18,380
write code tests documentation I work on

00:02:16,790 --> 00:02:21,850
the architecture so anything net a

00:02:18,380 --> 00:02:24,920
project needs I contribute to opensuse

00:02:21,850 --> 00:02:28,930
maintaining packages I'm happen to be a

00:02:24,920 --> 00:02:32,690
board member and will run for reelection

00:02:28,930 --> 00:02:35,239
coming november and i am passionate

00:02:32,690 --> 00:02:38,510
about motorcycling and soccer so any day

00:02:35,239 --> 00:02:42,410
when it's nice and it's the weekend you

00:02:38,510 --> 00:02:45,880
will not find me on IRC because i will

00:02:42,410 --> 00:02:49,820
be out on the roads okay what is kiwi

00:02:45,880 --> 00:02:52,130
let's not go there just yet ok so i

00:02:49,820 --> 00:02:54,830
recently read a book and in that book

00:02:52,130 --> 00:02:57,680
that said it is best to start at the

00:02:54,830 --> 00:03:04,239
beginning at the very beginning and this

00:02:57,680 --> 00:03:09,170
is why we will start in the middle and

00:03:04,239 --> 00:03:13,400
we will start in the middle right come

00:03:09,170 --> 00:03:21,019
on click click here fingers on the

00:03:13,400 --> 00:03:23,989
keyboard ok so to do the workshop you

00:03:21,019 --> 00:03:28,120
should be running opensuse 13 one on a

00:03:23,989 --> 00:03:32,840
recently new machine with virtual

00:03:28,120 --> 00:03:34,540
instruction set you want to start a

00:03:32,840 --> 00:03:39,680
terminal session login this rule

00:03:34,540 --> 00:03:42,110
installed it work packages because will

00:03:39,680 --> 00:03:46,400
you want to run network minute you want

00:03:42,110 --> 00:03:50,239
to run a verte manager install word

00:03:46,400 --> 00:03:52,720
manager package lipper copy the stuff

00:03:50,239 --> 00:03:56,209
that's on the stick that I hand it out

00:03:52,720 --> 00:03:58,610
onto your machine I promise it's not

00:03:56,209 --> 00:04:00,530
going to damage your machine or you can

00:03:58,610 --> 00:04:02,209
install Kiwi directly on your machine if

00:04:00,530 --> 00:04:06,560
you want to work on your machine that is

00:04:02,209 --> 00:04:08,840
fine too but I prepared the stick so

00:04:06,560 --> 00:04:11,120
that you wouldn't have to do that I do

00:04:08,840 --> 00:04:15,140
need two sticks back please I promise to

00:04:11,120 --> 00:04:17,120
give them back because they are intended

00:04:15,140 --> 00:04:19,500
to go into booth boxes for marketing

00:04:17,120 --> 00:04:25,860
materials or i'd like to get them back

00:04:19,500 --> 00:04:28,620
and then when that's all done then you

00:04:25,860 --> 00:04:33,920
just start with Bert and that goes with

00:04:28,620 --> 00:04:36,870
system control star Lippert DDOT service

00:04:33,920 --> 00:04:40,680
okay then the next step would be you

00:04:36,870 --> 00:04:45,330
start work manager you connect to the

00:04:40,680 --> 00:04:50,070
local host and then you create a virtual

00:04:45,330 --> 00:04:54,120
machine enter a name for the machine

00:04:50,070 --> 00:04:59,790
cube lab for example select local

00:04:54,120 --> 00:05:02,880
install media click forward and then you

00:04:59,790 --> 00:05:07,410
would browse to wherever you copied this

00:05:02,880 --> 00:05:12,120
file Kiwi training lab x86 64 110

00:05:07,410 --> 00:05:18,030
install ISIL and then you click forward

00:05:12,120 --> 00:05:20,370
again select as much RAM as you can

00:05:18,030 --> 00:05:23,190
spare on your machine so if you have a

00:05:20,370 --> 00:05:28,890
lot of RAM then that's good that make

00:05:23,190 --> 00:05:30,450
the virtual machine run faster you want

00:05:28,890 --> 00:05:33,630
to set about do you want to set up about

00:05:30,450 --> 00:05:35,550
30 gigabytes of storage and then you

00:05:33,630 --> 00:05:38,490
just use the virtual network default and

00:05:35,550 --> 00:05:40,710
click finish and then word manager will

00:05:38,490 --> 00:05:42,419
do the magic network stuff behind your

00:05:40,710 --> 00:05:45,090
back and you don't really have to know

00:05:42,419 --> 00:05:49,140
all the main magic incantations to set

00:05:45,090 --> 00:05:52,050
it up yourself okay and then after that

00:05:49,140 --> 00:05:54,300
you can watch the magic happen which

00:05:52,050 --> 00:05:57,510
means you will actually be installing an

00:05:54,300 --> 00:05:59,729
image that got built with keely so you

00:05:57,510 --> 00:06:02,400
will be running the lap on an image to

00:05:59,729 --> 00:06:08,790
build with Kiwi while you're learning

00:06:02,400 --> 00:06:11,790
Kimmy and that's that and then in the vm

00:06:08,790 --> 00:06:13,919
once the machine is installed can login

00:06:11,790 --> 00:06:18,270
as root the root password is Kiwi lab

00:06:13,919 --> 00:06:20,669
and start an xfce terminal and then you

00:06:18,270 --> 00:06:22,530
can you know run I have conflict to find

00:06:20,669 --> 00:06:25,740
out the IP address of your virtual

00:06:22,530 --> 00:06:30,630
machine and then you can just copy the

00:06:25,740 --> 00:06:31,930
iso image into the virtual machine in

00:06:30,630 --> 00:06:34,570
this location

00:06:31,930 --> 00:06:37,840
and then we will be ready to do the labs

00:06:34,570 --> 00:06:39,370
and now we are ready to start the

00:06:37,840 --> 00:06:41,199
beginning at the very beginning because

00:06:39,370 --> 00:06:44,229
that is the best place to start when you

00:06:41,199 --> 00:06:46,360
have a story to tell and the story that

00:06:44,229 --> 00:06:50,860
I have to tell is that Kiwi is a

00:06:46,360 --> 00:06:54,039
wonderful tool it's a fruit how we all

00:06:50,860 --> 00:06:57,490
know that it is also burn that little

00:06:54,039 --> 00:07:00,340
guy there that's a kiwi bird and as far

00:06:57,490 --> 00:07:03,220
as I know it only exists in New Zealand

00:07:00,340 --> 00:07:08,349
and the New Zealanders have the nickname

00:07:03,220 --> 00:07:11,800
of being Kiwis q is also a linux image

00:07:08,349 --> 00:07:14,220
build system it is hosted on github

00:07:11,800 --> 00:07:18,280
right there pit-a-pat com opensuse

00:07:14,220 --> 00:07:22,060
license is gplv2 mostly written in perl

00:07:18,280 --> 00:07:25,240
is also shell code in there and some

00:07:22,060 --> 00:07:27,550
utilities or see the project itself is

00:07:25,240 --> 00:07:31,930
sponsored by Souza started by Marcus

00:07:27,550 --> 00:07:36,159
Schaefer a while ago and between Marcus

00:07:31,930 --> 00:07:38,490
and myself we are the top contributors

00:07:36,159 --> 00:07:44,349
Marcus is doing a lot more than i am and

00:07:38,490 --> 00:07:46,210
sorry Marcus I'll cut back and kiwis

00:07:44,349 --> 00:07:50,260
also back end of such a studio on which

00:07:46,210 --> 00:07:52,720
you can find there www studio com Souza

00:07:50,260 --> 00:07:56,729
studio is a point-and-click way to use

00:07:52,720 --> 00:08:00,460
Kiwi Kiwi itself is a command line tool

00:07:56,729 --> 00:08:05,050
okay so if you want to point and click

00:08:00,460 --> 00:08:07,570
uses a studio it's easy if you're like

00:08:05,050 --> 00:08:08,919
me and you think a command line is the

00:08:07,570 --> 00:08:13,900
right way to interact with a computer

00:08:08,919 --> 00:08:16,169
then Kiwi is the right tool for you most

00:08:13,900 --> 00:08:18,639
Kiwi commands require root privileges

00:08:16,169 --> 00:08:20,440
quite simply because we need access to

00:08:18,639 --> 00:08:26,020
package management user management

00:08:20,440 --> 00:08:27,669
system configuration so obviously those

00:08:26,020 --> 00:08:30,550
who are working the lab you have a

00:08:27,669 --> 00:08:33,789
virtual machine so when you mess that up

00:08:30,550 --> 00:08:37,719
it's not that big of a deal but if you

00:08:33,789 --> 00:08:42,610
run Kiwi on your system and you want to

00:08:37,719 --> 00:08:44,120
be careful because our M dash RF / is

00:08:42,610 --> 00:08:48,950
the really

00:08:44,120 --> 00:08:51,830
thing to do so and your route and so you

00:08:48,950 --> 00:08:54,260
got to be careful um you can protect

00:08:51,830 --> 00:08:57,950
self by you know building in a dedicated

00:08:54,260 --> 00:09:03,250
vm which is what you will be doing here

00:08:57,950 --> 00:09:05,720
for for the lab okay other stuff

00:09:03,250 --> 00:09:07,940
documentation there's a user's manual or

00:09:05,720 --> 00:09:12,290
cookbook that you can find on dr. at

00:09:07,940 --> 00:09:14,120
opensuse org projects Kiwi doc that is

00:09:12,290 --> 00:09:17,380
always the latest and greatest so that

00:09:14,120 --> 00:09:21,680
reflects the development tree status and

00:09:17,380 --> 00:09:23,450
there is also a PDF of that thing but

00:09:21,680 --> 00:09:27,920
that matches the version that you might

00:09:23,450 --> 00:09:31,310
install on your system and that comes in

00:09:27,920 --> 00:09:34,070
the Kiwi doc package our Kiwi itself is

00:09:31,310 --> 00:09:38,930
part is it's in factory it's in opensuse

00:09:34,070 --> 00:09:42,110
13-1 it's in suse linux enterprise then

00:09:38,930 --> 00:09:45,800
there are examples on the wiki portal

00:09:42,110 --> 00:09:49,900
Kiwi they could use some love and care

00:09:45,800 --> 00:09:52,400
but they still most of them still work

00:09:49,900 --> 00:09:55,279
the configuration file schema is

00:09:52,400 --> 00:09:57,620
documented right there also doc opensuse

00:09:55,279 --> 00:10:01,580
org then there's a mailing list which is

00:09:57,620 --> 00:10:04,880
a google group kiwi images you can

00:10:01,580 --> 00:10:08,779
subscribe there and send us mail or you

00:10:04,880 --> 00:10:12,830
can find us on IRC free note that opens

00:10:08,779 --> 00:10:15,020
was a kiwi channel alright so how does

00:10:12,830 --> 00:10:17,900
it work this is what he does as a two

00:10:15,020 --> 00:10:21,350
step process in the first step we

00:10:17,900 --> 00:10:25,670
prepare images in the second step which

00:10:21,350 --> 00:10:27,890
is the create step we finish up the

00:10:25,670 --> 00:10:30,050
image and then you get the result of

00:10:27,890 --> 00:10:36,140
whatever image type your building so it

00:10:30,050 --> 00:10:37,970
works in that we have the and if I would

00:10:36,140 --> 00:10:41,589
know where the laser pointer is on this

00:10:37,970 --> 00:10:48,790
thing and it will be good let's see

00:10:41,589 --> 00:10:48,790
maybe this nope this OOP

00:10:49,779 --> 00:11:01,269
shows you how often I use it okay I know

00:10:55,759 --> 00:11:04,250
there's a pointer on here anyway so

00:11:01,269 --> 00:11:08,199
there's an image description as you can

00:11:04,250 --> 00:11:10,519
see right there that is a directory and

00:11:08,199 --> 00:11:12,350
inside of the directory are a bunch of

00:11:10,519 --> 00:11:15,579
files we look at one of those which is

00:11:12,350 --> 00:11:18,980
an XML file and in there you have the

00:11:15,579 --> 00:11:20,660
repositories configured so between the

00:11:18,980 --> 00:11:23,060
stuff that's in the image direct in the

00:11:20,660 --> 00:11:26,209
image description directory and the

00:11:23,060 --> 00:11:29,120
repository you run key we prepare and

00:11:26,209 --> 00:11:35,380
out pops what we call an unpacked image

00:11:29,120 --> 00:11:35,380
tree that unpacked image tree is

00:11:35,889 --> 00:11:40,639
basically a change route environment so

00:11:38,449 --> 00:11:43,009
you can use it to change the look into

00:11:40,639 --> 00:11:45,620
that environment but any changes that

00:11:43,009 --> 00:11:48,110
you make in there will be overwritten

00:11:45,620 --> 00:11:50,990
the next time you run prepare of course

00:11:48,110 --> 00:11:52,819
so it is not recommended that you go in

00:11:50,990 --> 00:11:54,290
there and fiddle with stuff okay

00:11:52,819 --> 00:11:57,050
everything that you want to fiddle with

00:11:54,290 --> 00:12:00,829
should always be from your image

00:11:57,050 --> 00:12:03,079
description in the prepare step we also

00:12:00,829 --> 00:12:04,939
copy the image description or what we

00:12:03,079 --> 00:12:07,459
need from the image description into the

00:12:04,939 --> 00:12:10,430
unpacked image tree and so then when you

00:12:07,459 --> 00:12:15,410
create basically we're looking at a copy

00:12:10,430 --> 00:12:17,360
of the image description and we'll look

00:12:15,410 --> 00:12:20,750
at the unpacked image directory we

00:12:17,360 --> 00:12:23,300
create the image for certain image types

00:12:20,750 --> 00:12:26,509
we need an in a dirty or most image

00:12:23,300 --> 00:12:29,209
stripes you need an in the dirty and in

00:12:26,509 --> 00:12:32,240
Italy is a key we created in a dirty

00:12:29,209 --> 00:12:34,310
which is a description just like one

00:12:32,240 --> 00:12:36,740
that you create but one that we created

00:12:34,310 --> 00:12:38,810
so you don't have to worry about it so

00:12:36,740 --> 00:12:42,709
the descriptions for the in attorney's

00:12:38,810 --> 00:12:44,180
come along with kiwi and in the creates

00:12:42,709 --> 00:12:46,939
that we built in it already basically

00:12:44,180 --> 00:12:48,709
following the same procedure we stick it

00:12:46,939 --> 00:12:54,860
into the image and then the image can be

00:12:48,709 --> 00:12:56,600
booted okay what else yep so that's what

00:12:54,860 --> 00:12:59,750
I basically just went through we read

00:12:56,600 --> 00:13:01,010
the configuration tree we initialize the

00:12:59,750 --> 00:13:04,130
repositories when

00:13:01,010 --> 00:13:06,140
to all the packages we apply overlay

00:13:04,130 --> 00:13:10,610
files and what that means is I'll get to

00:13:06,140 --> 00:13:14,840
in a minute we execute the shell script

00:13:10,610 --> 00:13:17,150
which is called convicted SH and then we

00:13:14,840 --> 00:13:20,000
have the unpacked image tree okay and

00:13:17,150 --> 00:13:22,790
this is the generic command key we dash

00:13:20,000 --> 00:13:25,580
dash prepare the path to your

00:13:22,790 --> 00:13:28,370
configuration directory and then dash

00:13:25,580 --> 00:13:33,200
dash root a path to where you want that

00:13:28,370 --> 00:13:35,690
unpackaged image tree to live okay so in

00:13:33,200 --> 00:13:37,190
the create step key we reach the

00:13:35,690 --> 00:13:41,180
information from the configuration tree

00:13:37,190 --> 00:13:44,300
as I said um we access the unpackaging

00:13:41,180 --> 00:13:45,950
mystery we execute images that is H so

00:13:44,300 --> 00:13:49,400
another shell script where you can do

00:13:45,950 --> 00:13:51,140
custom stuff we create a boot image or

00:13:49,400 --> 00:13:54,500
an it rd which is a description that

00:13:51,140 --> 00:13:56,930
kiwi provides those packet those

00:13:54,500 --> 00:14:01,090
descriptions are provided in Kiwi

00:13:56,930 --> 00:14:03,290
description star boot so star means

00:14:01,090 --> 00:14:07,490
there are special descriptions for

00:14:03,290 --> 00:14:09,500
virtual machines for OEM and things like

00:14:07,490 --> 00:14:16,370
that what all this mean I'll talk about

00:14:09,500 --> 00:14:18,350
in a minute and then we create the the

00:14:16,370 --> 00:14:20,840
final image and the command line for

00:14:18,350 --> 00:14:23,860
that will be Kiwi dash dash create paths

00:14:20,840 --> 00:14:28,100
to the unpackaged imagery dash D and

00:14:23,860 --> 00:14:32,300
then a path where you would want the

00:14:28,100 --> 00:14:34,400
final image to show up okay so let's

00:14:32,300 --> 00:14:37,250
take a look at what's in the

00:14:34,400 --> 00:14:40,100
configuration tree okay the

00:14:37,250 --> 00:14:44,750
configuration tree may contain these

00:14:40,100 --> 00:14:47,960
files config that XML must exist config

00:14:44,750 --> 00:14:53,330
that Sh images that Sh archives and root

00:14:47,960 --> 00:14:55,790
are optional and what they all are we

00:14:53,330 --> 00:15:00,110
will talk about in detail through each

00:14:55,790 --> 00:15:02,600
one of those ok so config that XML is

00:15:00,110 --> 00:15:05,840
required it's the configuration file ok

00:15:02,600 --> 00:15:10,370
as the extension indicates it's an XML

00:15:05,840 --> 00:15:12,760
file whoo it has information in it about

00:15:10,370 --> 00:15:16,350
the repositories and about the path

00:15:12,760 --> 00:15:18,880
that you want in your target image

00:15:16,350 --> 00:15:22,570
information about users you want to have

00:15:18,880 --> 00:15:24,640
set up in the system config that is H is

00:15:22,570 --> 00:15:28,290
a shell script that's executed at the

00:15:24,640 --> 00:15:31,570
root level of the target directory so

00:15:28,290 --> 00:15:34,180
that gets copied into the unpacked image

00:15:31,570 --> 00:15:37,900
tree and then execute it at the root

00:15:34,180 --> 00:15:41,260
level there okay so you can put in there

00:15:37,900 --> 00:15:43,270
anything you want okay you can if you

00:15:41,260 --> 00:15:46,360
install pearl into your image you can

00:15:43,270 --> 00:15:49,030
run a perl script from there or program

00:15:46,360 --> 00:15:53,980
program or python ruby or you can

00:15:49,030 --> 00:15:55,300
execute c code whatever you want okay so

00:15:53,980 --> 00:16:01,030
depending of course on what you

00:15:55,300 --> 00:16:05,070
installed excuse me yes it will run

00:16:01,030 --> 00:16:08,800
under change for images as age is also

00:16:05,070 --> 00:16:10,690
optional it's also shell script that

00:16:08,800 --> 00:16:14,620
shell script gets executed at the

00:16:10,690 --> 00:16:16,810
beginning of the create step so with

00:16:14,620 --> 00:16:20,490
kiwi what you can do is you can prepare

00:16:16,810 --> 00:16:23,170
an image once and then create multiple

00:16:20,490 --> 00:16:26,650
different types of target images from

00:16:23,170 --> 00:16:31,150
the same prepared root so this may run

00:16:26,650 --> 00:16:33,010
multiple times okay so when you write if

00:16:31,150 --> 00:16:35,470
you write that then you need to be aware

00:16:33,010 --> 00:16:38,560
that well once you copy something away

00:16:35,470 --> 00:16:40,720
or you remove it and then you run create

00:16:38,560 --> 00:16:43,630
again whatever your removed is gone it's

00:16:40,720 --> 00:16:47,020
not magically coming back okay so you

00:16:43,630 --> 00:16:49,330
just have to be aware of that also

00:16:47,020 --> 00:16:52,240
executed at the root level okay then

00:16:49,330 --> 00:16:55,960
archives archives are pretty much

00:16:52,240 --> 00:16:59,020
anything that we don't par par GC to RBC

00:16:55,960 --> 00:17:01,360
to what happens is that we take that

00:16:59,020 --> 00:17:04,060
archive and we copy the to the root tree

00:17:01,360 --> 00:17:06,790
and then we unpackage it at the root

00:17:04,060 --> 00:17:10,000
level so whatever is in there will

00:17:06,790 --> 00:17:12,010
clobber whatever you have install the

00:17:10,000 --> 00:17:14,980
packages okay so this is a great way to

00:17:12,010 --> 00:17:18,490
customize your image if you already have

00:17:14,980 --> 00:17:20,170
existing firewall rules for example then

00:17:18,490 --> 00:17:22,540
you can take them and just put them in

00:17:20,170 --> 00:17:24,730
the tar ball and stick them in there

00:17:22,540 --> 00:17:27,490
and then they're just in your image okay

00:17:24,730 --> 00:17:30,400
or other things application sit in our

00:17:27,490 --> 00:17:33,430
package at rpm format that have a

00:17:30,400 --> 00:17:35,860
non-interactive installer you can stick

00:17:33,430 --> 00:17:37,510
them in there copy them over run the

00:17:35,860 --> 00:17:40,810
non-interactive installer and then

00:17:37,510 --> 00:17:44,380
they're there where they belong okay and

00:17:40,810 --> 00:17:48,340
then there is the root which is a

00:17:44,380 --> 00:17:50,980
directory and it is a reflection of the

00:17:48,340 --> 00:17:54,520
root tree in the target image okay so

00:17:50,980 --> 00:17:56,380
this is a little complicated but so the

00:17:54,520 --> 00:17:58,270
root tree in the target image is just

00:17:56,380 --> 00:18:01,690
like a regular group at the root

00:17:58,270 --> 00:18:03,580
filesystem so / and this represents that

00:18:01,690 --> 00:18:06,670
file system so anything that's India

00:18:03,580 --> 00:18:09,040
gets copied verbatim into the target

00:18:06,670 --> 00:18:14,560
directory so it's again another overlay

00:18:09,040 --> 00:18:16,960
mechanism here you would for example put

00:18:14,560 --> 00:18:18,670
network configuration stuff or something

00:18:16,960 --> 00:18:21,910
like that I usually put that in the

00:18:18,670 --> 00:18:31,510
overlay tree and then the network is

00:18:21,910 --> 00:18:37,180
configured ok so the will get to the

00:18:31,510 --> 00:18:44,790
order ok what happens is that the guitar

00:18:37,180 --> 00:18:47,860
ball gets unpacked then ok so you can

00:18:44,790 --> 00:18:49,900
play silly games there too with the

00:18:47,860 --> 00:18:55,180
tarball and the root tree and stuff like

00:18:49,900 --> 00:18:58,060
that so ok they're convicted XML as i

00:18:55,180 --> 00:19:01,180
said is its next mail file it gets

00:18:58,060 --> 00:19:03,340
validated against the schema it is also

00:19:01,180 --> 00:19:06,610
checked for consistency of the data ok

00:19:03,340 --> 00:19:10,780
so if you if you're familiar with XML

00:19:06,610 --> 00:19:12,340
the the biggest quote-unquote problem

00:19:10,780 --> 00:19:14,680
with XML is that you can't do

00:19:12,340 --> 00:19:16,300
consistency checking ok in the schema

00:19:14,680 --> 00:19:21,130
there is no way for you to set up if

00:19:16,300 --> 00:19:22,960
then else conditions and we have that ok

00:19:21,130 --> 00:19:25,600
certain things make don't make sense

00:19:22,960 --> 00:19:28,600
when they're put together and so we have

00:19:25,600 --> 00:19:30,580
a consistency checker that runs that is

00:19:28,600 --> 00:19:30,960
written in perl they reached the XML and

00:19:30,580 --> 00:19:33,809
then

00:19:30,960 --> 00:19:35,779
it will complain and yell at you when

00:19:33,809 --> 00:19:46,049
there's an inconsistency in the data

00:19:35,779 --> 00:19:48,179
okay this image changes generally we try

00:19:46,049 --> 00:19:53,270
not to break compatibility and we have

00:19:48,179 --> 00:19:58,890
we use xslt to automatically upgrade the

00:19:53,270 --> 00:20:01,320
the xml file unfortunately we did have

00:19:58,890 --> 00:20:03,870
to break compatibility just recently

00:20:01,320 --> 00:20:06,809
when we were dealing with ec2 the way we

00:20:03,870 --> 00:20:09,390
built easy two images but that has been

00:20:06,809 --> 00:20:13,080
the only one so far over the years where

00:20:09,390 --> 00:20:14,820
we actually broke our compatibility the

00:20:13,080 --> 00:20:17,100
upgrade is automatic but we don't change

00:20:14,820 --> 00:20:18,840
your file so we upgrade it and we make

00:20:17,100 --> 00:20:21,390
we make the copy of the of your

00:20:18,840 --> 00:20:24,929
configure XML file we automatically

00:20:21,390 --> 00:20:27,990
upgrade it and then we work on that okay

00:20:24,929 --> 00:20:30,630
so now let's look what's in there okay

00:20:27,990 --> 00:20:35,370
it's an XML file as I said boohoo starts

00:20:30,630 --> 00:20:37,649
with XML tag then we want you to give us

00:20:35,370 --> 00:20:40,500
the schema version against what do you

00:20:37,649 --> 00:20:44,279
think your XML file should comply to

00:20:40,500 --> 00:20:48,570
okay the current version of the schema i

00:20:44,279 --> 00:20:53,340
think is six something then you give us

00:20:48,570 --> 00:20:56,940
a name then we like you to tell us who

00:20:53,340 --> 00:21:00,809
you are um basically we put that in so

00:20:56,940 --> 00:21:05,549
that nobody can commit any anonymous

00:21:00,809 --> 00:21:07,950
crimes put in your name and your contact

00:21:05,549 --> 00:21:11,970
and write a little something about what

00:21:07,950 --> 00:21:13,770
the image is for okay this is so your

00:21:11,970 --> 00:21:17,789
colleagues can find you and yell at you

00:21:13,770 --> 00:21:24,090
and say hey you created an image that

00:21:17,789 --> 00:21:29,640
doesn't work for me because I don't

00:21:24,090 --> 00:21:35,190
create images that work so that's about

00:21:29,640 --> 00:21:37,409
you as you can see the the system the

00:21:35,190 --> 00:21:39,840
description tag has a type attribute

00:21:37,409 --> 00:21:43,500
that says system okay this is what you

00:21:39,840 --> 00:21:44,519
create there is also another value for

00:21:43,500 --> 00:21:46,849
type which is what

00:21:44,519 --> 00:21:48,989
we use in the in the boot images

00:21:46,849 --> 00:21:50,549
generally you don't have to worry about

00:21:48,989 --> 00:21:52,859
that so when you're building something

00:21:50,549 --> 00:21:56,070
you will always you should always put

00:21:52,859 --> 00:21:57,959
the system in there yes if you're an

00:21:56,070 --> 00:22:00,389
advanced user and you think you have to

00:21:57,959 --> 00:22:04,830
create your own in a dirty feel free but

00:22:00,389 --> 00:22:08,999
if it doesn't work don't call us okay

00:22:04,830 --> 00:22:13,709
then excuse me then a preferences

00:22:08,999 --> 00:22:17,009
element it has a type element is a child

00:22:13,709 --> 00:22:18,929
and this is where you specify what kind

00:22:17,009 --> 00:22:22,259
of image you're building whether it's a

00:22:18,929 --> 00:22:24,529
vm or OEM image and so on and what those

00:22:22,259 --> 00:22:27,539
are we'll talk about in a little while

00:22:24,529 --> 00:22:29,279
then there's subversion you tell us the

00:22:27,539 --> 00:22:30,659
package manager you want to use and

00:22:29,279 --> 00:22:32,909
obviously if you're building a Souza

00:22:30,659 --> 00:22:35,549
image then you would want to use zipper

00:22:32,909 --> 00:22:40,379
because it is the best package manager

00:22:35,549 --> 00:22:45,059
around yeah then we generally turn off

00:22:40,379 --> 00:22:47,159
RPM signature check because the place

00:22:45,059 --> 00:22:50,609
that we're installing into which is the

00:22:47,159 --> 00:22:55,169
target directory does not have the keys

00:22:50,609 --> 00:22:58,619
of the repositories and so if you don't

00:22:55,169 --> 00:23:03,239
turn that off then well it will fail

00:22:58,619 --> 00:23:05,219
okay then we install we forcefully

00:23:03,239 --> 00:23:10,529
install and then you can set up the

00:23:05,219 --> 00:23:14,269
locale and your key table map alright

00:23:10,529 --> 00:23:19,559
next what else you need to route a user

00:23:14,269 --> 00:23:22,859
okay no user no login so you always want

00:23:19,559 --> 00:23:25,619
to configure the root user in in the

00:23:22,859 --> 00:23:27,719
image if you add any other users that's

00:23:25,619 --> 00:23:31,049
of course up to you but you need to have

00:23:27,719 --> 00:23:33,869
at least the root user so you need to

00:23:31,049 --> 00:23:36,989
configure that you give the password and

00:23:33,869 --> 00:23:42,239
actually this has changed it's no longer

00:23:36,989 --> 00:23:43,919
called pewds called a password then you

00:23:42,239 --> 00:23:46,289
have to give the home directory in the

00:23:43,919 --> 00:23:48,419
name the password you can give in

00:23:46,289 --> 00:23:50,099
encrypted format which is the default or

00:23:48,419 --> 00:23:50,680
you can give it in plain text and then

00:23:50,099 --> 00:23:52,420
add

00:23:50,680 --> 00:23:54,400
attribute to tell us that it's in plain

00:23:52,420 --> 00:23:58,540
text and then kiwi will encrypt it for

00:23:54,400 --> 00:24:01,000
you then you specify the repositories

00:23:58,540 --> 00:24:02,860
that looks like that so there are

00:24:01,000 --> 00:24:05,680
various types of repositories that are

00:24:02,860 --> 00:24:11,850
supported so yeah Stu is a repository

00:24:05,680 --> 00:24:16,870
type that you have on the ISIL image the

00:24:11,850 --> 00:24:19,840
repository types on download open 20 or

00:24:16,870 --> 00:24:23,650
from the bill service they're all RPM md

00:24:19,840 --> 00:24:26,410
types metadata so that's important for

00:24:23,650 --> 00:24:29,410
us to know and then the next thing is

00:24:26,410 --> 00:24:31,750
you describe the sections of in the next

00:24:29,410 --> 00:24:35,020
section you tell us what packages you

00:24:31,750 --> 00:24:38,170
want in the image so from there should

00:24:35,020 --> 00:24:40,090
be pretty straightforward and at the

00:24:38,170 --> 00:24:43,270
bottom you tell us what packages you

00:24:40,090 --> 00:24:45,760
knew you need to bootstrap the image

00:24:43,270 --> 00:24:48,400
okay so what happens is this bootstrap

00:24:45,760 --> 00:24:49,930
section tells us we want these two

00:24:48,400 --> 00:24:53,590
packages and their dependencies

00:24:49,930 --> 00:24:55,660
installed into the target directory that

00:24:53,590 --> 00:24:59,110
means that happens from the package

00:24:55,660 --> 00:25:02,500
manager that is on your machine and then

00:24:59,110 --> 00:25:04,990
after this section is complete then we

00:25:02,500 --> 00:25:08,020
change route into the target and run the

00:25:04,990 --> 00:25:22,780
packager manager that is inside of that

00:25:08,020 --> 00:25:28,300
directory ok so the xml schema there is

00:25:22,780 --> 00:25:31,900
on the packages type there's an

00:25:28,300 --> 00:25:36,910
attribute that you can send to plus

00:25:31,900 --> 00:25:40,930
recommend it or required only so the

00:25:36,910 --> 00:25:46,390
default is plus welcome no the default

00:25:40,930 --> 00:25:49,240
is required only mmm-maybe is plus

00:25:46,390 --> 00:25:52,960
recommended I don't know anyway there's

00:25:49,240 --> 00:25:54,070
a default that's documented and but

00:25:52,960 --> 00:25:57,960
there's an attribute where you can

00:25:54,070 --> 00:26:02,870
control that ok so

00:25:57,960 --> 00:26:09,299
the schema is written in relaxing okay

00:26:02,870 --> 00:26:11,520
compact notation and we use that because

00:26:09,299 --> 00:26:15,029
there are some reasonably good

00:26:11,520 --> 00:26:16,679
validating parsers available for that if

00:26:15,029 --> 00:26:18,690
you don't know anything about relaxing

00:26:16,679 --> 00:26:22,289
you can learn something about it in

00:26:18,690 --> 00:26:24,120
these tutorials there tutorial then

00:26:22,289 --> 00:26:27,179
there's of course wikipedia tells you

00:26:24,120 --> 00:26:29,220
something about it the scheme itself is

00:26:27,179 --> 00:26:31,679
located right there usershare kiwi

00:26:29,220 --> 00:26:34,309
modules kiwi schema at rnc so you can

00:26:31,679 --> 00:26:37,980
dig around in the efficient take a look

00:26:34,309 --> 00:26:42,179
the schema is also documented we

00:26:37,980 --> 00:26:47,700
automatically generate a web page where

00:26:42,179 --> 00:26:49,559
you can look at the schema and it is

00:26:47,700 --> 00:26:51,360
installed as part of the kiwi package

00:26:49,559 --> 00:26:56,250
because we need it so we can validate

00:26:51,360 --> 00:26:58,770
your XML okay the parser itself

00:26:56,250 --> 00:27:03,169
generally is not all that useful so if

00:26:58,770 --> 00:27:05,399
you have an error in your XML file the

00:27:03,169 --> 00:27:08,539
messages that you get from the parser

00:27:05,399 --> 00:27:12,179
are most of the time relatively cryptid

00:27:08,539 --> 00:27:15,419
there is a gene tool which is a java

00:27:12,179 --> 00:27:18,270
tool it produces nice output error

00:27:15,419 --> 00:27:21,809
messages but it drags along the Java

00:27:18,270 --> 00:27:24,059
Runtime environment so if you hate Java

00:27:21,809 --> 00:27:27,720
then you might just want to live with

00:27:24,059 --> 00:27:29,730
the not-so-nice messages from the parser

00:27:27,720 --> 00:27:32,399
and if you don't mind having java on

00:27:29,730 --> 00:27:35,730
your machine then this is the way to go

00:27:32,399 --> 00:27:37,260
um kiwi looks watching if we find it

00:27:35,730 --> 00:27:38,669
we'll use it to give you a good error

00:27:37,260 --> 00:27:42,870
message and if we don't then you just

00:27:38,669 --> 00:27:46,279
get the parser error message okay image

00:27:42,870 --> 00:27:50,039
types so now it becomes interesting um

00:27:46,279 --> 00:27:53,309
the image types okey we can build a ton

00:27:50,039 --> 00:27:55,260
of different images the image is that

00:27:53,309 --> 00:27:57,169
the type of the image is specified with

00:27:55,260 --> 00:28:00,330
the image attribute of the type element

00:27:57,169 --> 00:28:02,340
okay and now I'm just going to go

00:28:00,330 --> 00:28:04,890
through all the image types this is a

00:28:02,340 --> 00:28:07,830
rather long list and I hope I won't put

00:28:04,890 --> 00:28:11,140
you to sleep on going through that so

00:28:07,830 --> 00:28:13,690
we'll start with amazon so Amazon ec2

00:28:11,140 --> 00:28:19,150
the compute cloud so that's an image

00:28:13,690 --> 00:28:23,920
that's specific for Amazon we support

00:28:19,150 --> 00:28:29,010
both s3 and EBS so s 3 is the simple

00:28:23,920 --> 00:28:32,800
storage service that's an object storage

00:28:29,010 --> 00:28:35,140
implementation that amazon offers and

00:28:32,800 --> 00:28:37,300
you can actually have an image there and

00:28:35,140 --> 00:28:41,080
that you think and launch as an instance

00:28:37,300 --> 00:28:45,250
okay things that are s3 based are not

00:28:41,080 --> 00:28:49,120
persistent so when you start an image

00:28:45,250 --> 00:28:51,940
that is from the s3 storage even if you

00:28:49,120 --> 00:28:55,450
so if you install new packages and so on

00:28:51,940 --> 00:29:00,550
if you stop the image then all of that

00:28:55,450 --> 00:29:02,800
goes away okay in EBS which is elastic

00:29:00,550 --> 00:29:05,760
box storage that's more like a real

00:29:02,800 --> 00:29:08,350
computer so the storage is persistent

00:29:05,760 --> 00:29:10,530
when you fire up the instance and you

00:29:08,350 --> 00:29:15,300
install new packages and make changes

00:29:10,530 --> 00:29:18,640
then those changes are persisted on disk

00:29:15,300 --> 00:29:21,030
and as long as you don't delete so if

00:29:18,640 --> 00:29:23,680
you terminate the image then by default

00:29:21,030 --> 00:29:26,200
your storage goes away as well so

00:29:23,680 --> 00:29:27,850
obviously then your changes are lost but

00:29:26,200 --> 00:29:29,950
if you just stop the image instead of

00:29:27,850 --> 00:29:36,610
terminating it and then your changes are

00:29:29,950 --> 00:29:39,970
persistent so you also whoa this is old

00:29:36,610 --> 00:29:42,370
okay so we no longer have an ec2 config

00:29:39,970 --> 00:29:44,440
element we used to have that where you

00:29:42,370 --> 00:29:46,330
give us the account number and then we

00:29:44,440 --> 00:29:48,790
can create the bundle for you and we

00:29:46,330 --> 00:29:51,400
decided that we shouldn't really do that

00:29:48,790 --> 00:29:53,710
and people didn't like it to have their

00:29:51,400 --> 00:29:56,170
account credentials in the kiwi file and

00:29:53,710 --> 00:29:58,360
so we just remove dead options actually

00:29:56,170 --> 00:30:02,770
quite recently and so obviously this so

00:29:58,360 --> 00:30:06,400
now okay we require you will want to

00:30:02,770 --> 00:30:08,320
have an account for Amazon of course if

00:30:06,400 --> 00:30:12,370
you want to build such an image so you

00:30:08,320 --> 00:30:15,040
can actually actually upload it and use

00:30:12,370 --> 00:30:17,530
it and there is also no longer

00:30:15,040 --> 00:30:19,720
requirement for DD rescue because we

00:30:17,530 --> 00:30:22,360
changed the way we built the image DD

00:30:19,720 --> 00:30:23,710
will do just fine ok so you don't need

00:30:22,360 --> 00:30:28,249
that

00:30:23,710 --> 00:30:34,749
to anymore either I obviously have to

00:30:28,249 --> 00:30:37,369
update my slide okay so containers

00:30:34,749 --> 00:30:41,360
containers are all arranged Doctor Who

00:30:37,369 --> 00:30:43,460
and yeah well not really all that fancy

00:30:41,360 --> 00:30:47,450
we've been building Glynis containers in

00:30:43,460 --> 00:30:50,679
Kiwi for almost two years now when I

00:30:47,450 --> 00:30:53,389
implemented it maybe maybe longer okay

00:30:50,679 --> 00:30:56,539
hey container is just the change fruit

00:30:53,389 --> 00:31:01,669
environment on steroids it has access

00:30:56,539 --> 00:31:05,299
control and it uses control groups

00:31:01,669 --> 00:31:09,259
within the colonel to separate it from

00:31:05,299 --> 00:31:11,570
the rest of the system okay so Kiwi

00:31:09,259 --> 00:31:14,840
bills a Linux container which basically

00:31:11,570 --> 00:31:17,840
is mostly the change route environment

00:31:14,840 --> 00:31:19,730
of the unpacked image tree we wrap that

00:31:17,840 --> 00:31:22,840
up nicely for you in a tarball we

00:31:19,730 --> 00:31:25,730
generate a configuration file that is

00:31:22,840 --> 00:31:29,299
reasonable with reasonable permissions

00:31:25,730 --> 00:31:33,289
that we think is a good idea and then we

00:31:29,299 --> 00:31:35,179
present that to you as a tarball that

00:31:33,289 --> 00:31:37,039
tarball you would carry them you can

00:31:35,179 --> 00:31:39,320
then carry to any machine where you want

00:31:37,039 --> 00:31:42,169
to run that container unpack it at the

00:31:39,320 --> 00:31:43,669
root level and kiwi will put the

00:31:42,169 --> 00:31:46,129
container and the container

00:31:43,669 --> 00:31:51,919
configuration file in the correct places

00:31:46,129 --> 00:31:54,350
and then you can run it so the

00:31:51,919 --> 00:31:56,779
configuration file ends up in its elxsi

00:31:54,350 --> 00:32:00,529
and the container ends up in bar lip

00:31:56,779 --> 00:32:05,480
Alex see exactly where containers are

00:32:00,529 --> 00:32:07,789
expected to live all right om what is an

00:32:05,480 --> 00:32:12,220
oem amisha no image is what is on the

00:32:07,789 --> 00:32:16,460
stick okay it is a self installing image

00:32:12,220 --> 00:32:18,919
that can be presented as an iso or can't

00:32:16,460 --> 00:32:22,340
be presented on a USB stick okay so

00:32:18,919 --> 00:32:24,230
basically i can make a USB stick that

00:32:22,340 --> 00:32:26,239
can plug into this machine then boot

00:32:24,230 --> 00:32:28,549
from the stick and then my image that i

00:32:26,239 --> 00:32:31,639
built will automatically install itself

00:32:28,549 --> 00:32:34,580
okay the way that works is that kiwi

00:32:31,639 --> 00:32:36,070
builds a live image and wraps the image

00:32:34,580 --> 00:32:38,020
that you built

00:32:36,070 --> 00:32:40,720
so the life image is wrapped around the

00:32:38,020 --> 00:32:43,810
image that you built okay the life image

00:32:40,720 --> 00:32:45,610
does the installation during the

00:32:43,810 --> 00:32:48,220
installation we expand the file system

00:32:45,610 --> 00:32:49,750
to take up the disk if you want us to do

00:32:48,220 --> 00:32:53,770
that there's a configuration for that

00:32:49,750 --> 00:32:58,570
and then we do kaic second and we're

00:32:53,770 --> 00:33:14,440
into that system that you built okay so

00:32:58,570 --> 00:33:18,340
that's an oem image excuse me not

00:33:14,440 --> 00:33:24,340
necessarily so some are some aren't it

00:33:18,340 --> 00:33:29,680
depends Oh be the OBS yeah the orzo I

00:33:24,340 --> 00:33:33,160
think yeah I think the OBS is an OEM is

00:33:29,680 --> 00:33:35,470
built as an oem image but you can build

00:33:33,160 --> 00:33:37,780
any image type within the build service

00:33:35,470 --> 00:33:40,780
so it's just you know that's just the

00:33:37,780 --> 00:33:49,150
way Adrian set those up but there's no

00:33:40,780 --> 00:33:52,180
that is Yeah right yeah yeah so they're

00:33:49,150 --> 00:33:54,220
set up as a as an oem image that's

00:33:52,180 --> 00:33:56,500
correct but that doesn't mean that you

00:33:54,220 --> 00:33:59,230
have to build OEM images inside the

00:33:56,500 --> 00:34:01,450
builders so kiwi is tied with the build

00:33:59,230 --> 00:34:06,430
service but you can build any image

00:34:01,450 --> 00:34:10,210
right there yeah yeah okay yeah right

00:34:06,430 --> 00:34:12,940
yeah so yeah so the OBS build images are

00:34:10,210 --> 00:34:18,210
OEM images okay and as I said you can

00:34:12,940 --> 00:34:21,190
install and create a USB stick or CD DVD

00:34:18,210 --> 00:34:23,590
okay what else do we have Kiwi supports

00:34:21,190 --> 00:34:26,710
the bill network install images or pixi

00:34:23,590 --> 00:34:28,810
boot okay so you can create a pixie

00:34:26,710 --> 00:34:33,220
image with kiwi and then stick it on

00:34:28,810 --> 00:34:35,650
your pixie server and off you go nothing

00:34:33,220 --> 00:34:39,280
really magic about this here what else

00:34:35,650 --> 00:34:42,190
we have life images okay life images

00:34:39,280 --> 00:34:45,160
such as our wonderful DVDs that we hand

00:34:42,190 --> 00:34:48,360
out also build with kiwi in the build

00:34:45,160 --> 00:34:52,570
service okay all of our media

00:34:48,360 --> 00:34:54,490
is built with kiwi not just opensuse but

00:34:52,570 --> 00:35:00,730
also suse linux enterprise everything is

00:34:54,490 --> 00:35:05,470
built kiwi so we can build life ISOs or

00:35:00,730 --> 00:35:07,360
you can build life USB sticks okay what

00:35:05,470 --> 00:35:09,300
else then you can build virtual images

00:35:07,360 --> 00:35:14,020
of course ec2 we already talked about

00:35:09,300 --> 00:35:17,710
you can also build obf ova q car to vmdk

00:35:14,020 --> 00:35:19,270
a vhd vhe fixed and raw images okay

00:35:17,710 --> 00:35:21,670
those are all the virtual formats that

00:35:19,270 --> 00:35:23,560
are supported and actually the trick

00:35:21,670 --> 00:35:27,310
here is that kiwi always builds a raw

00:35:23,560 --> 00:35:30,970
disk image and then we call qmu image

00:35:27,310 --> 00:35:33,130
convert and we get one of those out okay

00:35:30,970 --> 00:35:35,530
so Kiva doesn't really do any magic

00:35:33,130 --> 00:35:41,280
tricks here we just use qmu to get all

00:35:35,530 --> 00:35:43,360
these other things out okay and in

00:35:41,280 --> 00:35:45,550
hopefully not too distant future I'll

00:35:43,360 --> 00:35:48,940
get time to implement the google to

00:35:45,550 --> 00:35:50,770
google stuff okay what else do we have

00:35:48,940 --> 00:35:54,250
we can build Zen images we can build

00:35:50,770 --> 00:35:58,810
send hosts or guests if you built as a

00:35:54,250 --> 00:36:01,900
host which means dom0 okay then you need

00:35:58,810 --> 00:36:04,270
to set special attributes boot profile

00:36:01,900 --> 00:36:07,810
attribute needs to be Zen your boot

00:36:04,270 --> 00:36:10,420
colonel needs to be sin k and you need

00:36:07,810 --> 00:36:12,700
to set the domain on Zen convicted on 0

00:36:10,420 --> 00:36:15,220
those are the magic incantations that

00:36:12,700 --> 00:36:18,850
you must have if you want to build a Zen

00:36:15,220 --> 00:36:21,010
host okay by default key we will build a

00:36:18,850 --> 00:36:24,190
send guests so if you just set the image

00:36:21,010 --> 00:36:26,500
to Zen image type twos and then you will

00:36:24,190 --> 00:36:29,200
get a guest image okay that's not useful

00:36:26,500 --> 00:36:33,040
to run stuff on top it's just a guess

00:36:29,200 --> 00:36:35,980
okay Kiwi also generates the same config

00:36:33,040 --> 00:36:41,260
file if you're building a guest but

00:36:35,980 --> 00:36:43,120
because we don't know where in what your

00:36:41,260 --> 00:36:45,070
virtual target environment is if you

00:36:43,120 --> 00:36:48,010
have a Zen host you will have to edit

00:36:45,070 --> 00:36:50,710
that to fix the path to the same image

00:36:48,010 --> 00:36:54,040
okay because we don't know where where

00:36:50,710 --> 00:36:56,580
it's going to live ultimately all right

00:36:54,040 --> 00:37:01,030
now let's talk about convicted as H

00:36:56,580 --> 00:37:01,440
that's a shell script and it is executed

00:37:01,030 --> 00:37:03,569
a true

00:37:01,440 --> 00:37:06,599
level of the unpacked image tree at the

00:37:03,569 --> 00:37:10,260
end okay at the very end of the prepare

00:37:06,599 --> 00:37:13,200
step so anything that you packed in your

00:37:10,260 --> 00:37:16,770
tar ball or in your overlay tree can be

00:37:13,200 --> 00:37:19,170
accessed from convicted Sh okay so if

00:37:16,770 --> 00:37:23,420
you have as I said earlier if you have

00:37:19,170 --> 00:37:28,440
an application that is not in rpm format

00:37:23,420 --> 00:37:31,560
but has a non-interactive installer you

00:37:28,440 --> 00:37:34,319
can stick that in the tar ball and then

00:37:31,560 --> 00:37:36,800
can call the installer from conflictive

00:37:34,319 --> 00:37:42,210
Sh okay because that horrible gets

00:37:36,800 --> 00:37:44,730
unpacked earlier then there are certain

00:37:42,210 --> 00:37:47,660
functions available to modify and

00:37:44,730 --> 00:37:52,470
customize image so for example we have a

00:37:47,660 --> 00:37:54,000
Souza service system service enable or

00:37:52,470 --> 00:37:59,030
something like that that's a function

00:37:54,000 --> 00:38:01,829
that works with sis 5 in it and system d

00:37:59,030 --> 00:38:04,319
so you just tell us the name of whatever

00:38:01,829 --> 00:38:06,630
you want to enable for example sshd and

00:38:04,319 --> 00:38:10,349
then key we will do the right thing

00:38:06,630 --> 00:38:13,349
whether it's a system v file or system

00:38:10,349 --> 00:38:16,710
pipe in it okay so currently in suse

00:38:13,349 --> 00:38:18,180
linux enterprise 11 is still system 5 is

00:38:16,710 --> 00:38:22,859
the init system and of course in

00:38:18,180 --> 00:38:26,130
opensuse we switched over to system d if

00:38:22,859 --> 00:38:28,440
you exit from there with a nonzero exit

00:38:26,130 --> 00:38:31,680
status then key we will generate a build

00:38:28,440 --> 00:38:35,609
failure okay so when you put stuff into

00:38:31,680 --> 00:38:41,310
that into that file check your exit

00:38:35,609 --> 00:38:44,250
codes and then return appropriately so

00:38:41,310 --> 00:38:49,140
this is what it looks like at the

00:38:44,250 --> 00:38:52,849
beginning you will source Kate Kate kiwi

00:38:49,140 --> 00:38:55,440
config so dot k config and don't profile

00:38:52,849 --> 00:38:57,839
these create the functions and variables

00:38:55,440 --> 00:39:01,079
that you can then use inside your shell

00:38:57,839 --> 00:39:05,310
script and then this is what it looks

00:39:01,079 --> 00:39:09,950
like to activate services so there's a

00:39:05,310 --> 00:39:11,900
list of default services and then

00:39:09,950 --> 00:39:15,680
sousa insert service in this case would

00:39:11,900 --> 00:39:18,320
be boot device mapper but as I said so

00:39:15,680 --> 00:39:20,869
this kid then this could then be sshd or

00:39:18,320 --> 00:39:23,300
Apache or my sequel you know whatever

00:39:20,869 --> 00:39:27,310
service you want to start so that is

00:39:23,300 --> 00:39:30,200
actually relatively straightforward okay

00:39:27,310 --> 00:39:33,410
then as far as configuration is

00:39:30,200 --> 00:39:35,359
concerned so for example here we have a

00:39:33,410 --> 00:39:39,050
function that's called base update sis

00:39:35,359 --> 00:39:41,570
config so you tell us where what file

00:39:39,050 --> 00:39:43,670
you want to change what the variable is

00:39:41,570 --> 00:39:46,660
and what the value should be and then

00:39:43,670 --> 00:39:51,829
key we will do that ok and then

00:39:46,660 --> 00:39:56,150
obviously in Susa config itself has gone

00:39:51,829 --> 00:39:57,710
away so there's a there's a function in

00:39:56,150 --> 00:40:00,650
Kiwi that's called sizzurp config as

00:39:57,710 --> 00:40:02,780
well and that abstracts that as well ok

00:40:00,650 --> 00:40:05,480
so in opensuse we also used a half a

00:40:02,780 --> 00:40:08,720
souza config command as we still have it

00:40:05,480 --> 00:40:13,070
since less 11 but that's now gone away

00:40:08,720 --> 00:40:14,990
so in opensuse 13 1 and i think 12 dot 3

00:40:13,070 --> 00:40:20,359
already souza config was on its way out

00:40:14,990 --> 00:40:22,250
um but and so that function basically

00:40:20,359 --> 00:40:23,569
abstracts of the way for you and you

00:40:22,250 --> 00:40:26,030
don't have to worry about if i'm

00:40:23,569 --> 00:40:27,650
building 31 and i want it and if I not

00:40:26,030 --> 00:40:30,920
been or don't want it so you can just

00:40:27,650 --> 00:40:34,700
call that function and then at the end

00:40:30,920 --> 00:40:38,690
you would clean up and again exit 0 and

00:40:34,700 --> 00:40:41,720
then key we will continue yep what's

00:40:38,690 --> 00:40:44,810
next images that is H ok so images that

00:40:41,720 --> 00:40:51,109
is H is executed at the top level of the

00:40:44,810 --> 00:40:54,640
root of the target tree um when we run

00:40:51,109 --> 00:40:57,260
create so this happens very early on

00:40:54,640 --> 00:41:00,650
images that is H is a great way for you

00:40:57,260 --> 00:41:04,490
to let's say fiddle with Colonel drivers

00:41:00,650 --> 00:41:06,859
so if you're building an image for

00:41:04,490 --> 00:41:09,680
certain target let's say you're building

00:41:06,859 --> 00:41:13,220
a virtual image you may not need to love

00:41:09,680 --> 00:41:15,109
for me or is the end drivers or whatever

00:41:13,220 --> 00:41:18,410
stuff is in the kernel still these days

00:41:15,109 --> 00:41:20,660
right so an image to stop SH you can

00:41:18,410 --> 00:41:21,680
clean that up if you you know if you

00:41:20,660 --> 00:41:25,339
want to cut down on

00:41:21,680 --> 00:41:27,380
size of your image again non exits that

00:41:25,339 --> 00:41:30,440
none zero X is Travis triggers a key we

00:41:27,380 --> 00:41:34,040
built failure okay um but as I mentioned

00:41:30,440 --> 00:41:37,160
earlier be aware if you create multiple

00:41:34,040 --> 00:41:39,079
images from the same route tree this

00:41:37,160 --> 00:41:41,300
script will be executed multiple times

00:41:39,079 --> 00:41:43,309
okay and so if you're building an oem

00:41:41,300 --> 00:41:46,069
image is where you do one denies the end

00:41:43,309 --> 00:41:48,050
driver in and you're building a virtual

00:41:46,069 --> 00:41:52,069
image was with the same packages and you

00:41:48,050 --> 00:41:54,829
don't want the ISDN driver in so if you

00:41:52,069 --> 00:41:56,450
remove it in one and then you build the

00:41:54,829 --> 00:42:01,430
other one it's going to be gone there as

00:41:56,450 --> 00:42:06,650
well so so just keep that in mind okay

00:42:01,430 --> 00:42:11,869
and now we are where we started fingers

00:42:06,650 --> 00:42:20,470
on the keyboard didn't work for you to

00:42:11,869 --> 00:42:20,470
give up it's okay now

00:42:22,050 --> 00:42:38,710
yeah that's not gonna that's not gonna

00:42:24,550 --> 00:42:46,710
do it so okay okay all right so um I

00:42:38,710 --> 00:43:04,930
guess then we are pretty much at the end

00:42:46,710 --> 00:43:07,360
um so um this is just right well so in

00:43:04,930 --> 00:43:11,740
this in this case I gave you a virtual

00:43:07,360 --> 00:43:32,890
machine Sookie meself doesn't need a lot

00:43:11,740 --> 00:43:36,970
of memory okay yeah well this word this

00:43:32,890 --> 00:43:40,540
virtual machine that I created prepare

00:43:36,970 --> 00:43:43,660
does run x it has xfc in it which is

00:43:40,540 --> 00:43:46,780
relatively small but i would say you

00:43:43,660 --> 00:43:48,610
want a gig you want to run a gig mate

00:43:46,780 --> 00:43:54,370
well you won't probably want to run a

00:43:48,610 --> 00:43:57,430
gig for that virtual machine yeah so

00:43:54,370 --> 00:44:00,070
within a gig maybe it may work but it

00:43:57,430 --> 00:44:03,910
would be slow anyway so let's just go

00:44:00,070 --> 00:44:08,040
through the related topics so there's

00:44:03,910 --> 00:44:12,900
Souza studio hostess isuzu studio com

00:44:08,040 --> 00:44:12,900
it's also available as a product that

00:44:13,350 --> 00:44:18,490
you can then run behind your firewall if

00:44:16,030 --> 00:44:20,020
you care to it's a web app so it's

00:44:18,490 --> 00:44:23,770
point-and-click it's written in ruby on

00:44:20,020 --> 00:44:25,630
its uses ruby on rails framework kiwis

00:44:23,770 --> 00:44:27,940
the backend image builder what happens

00:44:25,630 --> 00:44:29,890
there is within studio we have what we

00:44:27,940 --> 00:44:32,590
call it's a containment so that's a

00:44:29,890 --> 00:44:33,530
prepared a prepared virtual machine very

00:44:32,590 --> 00:44:35,840
similar to what

00:44:33,530 --> 00:44:38,600
have set up there but of course they

00:44:35,840 --> 00:44:40,490
don't have xoc and what they do is they

00:44:38,600 --> 00:44:43,460
fire up the virtual machine they inject

00:44:40,490 --> 00:44:45,230
the kiwi configuration into that virtual

00:44:43,460 --> 00:44:50,210
machine and then they kick off a kiwi

00:44:45,230 --> 00:44:52,070
build okay the web interface does not

00:44:50,210 --> 00:44:54,320
support all the features that Kiwi does

00:44:52,070 --> 00:44:56,440
in the configuration file okay very

00:44:54,320 --> 00:45:00,230
simply the web interface is targeted for

00:44:56,440 --> 00:45:02,240
quick and simple you go through and then

00:45:00,230 --> 00:45:05,900
you have your image okay so for example

00:45:02,240 --> 00:45:08,090
in Kiwi you can use pretty much any file

00:45:05,900 --> 00:45:10,910
system type for your images that we

00:45:08,090 --> 00:45:14,000
support in opensuse or suse linux

00:45:10,910 --> 00:45:16,580
enterprise with studio you can only

00:45:14,000 --> 00:45:19,400
build ext3 file system images for

00:45:16,580 --> 00:45:22,430
example at this point okay so it's not

00:45:19,400 --> 00:45:25,160
complete a feature complete compared to

00:45:22,430 --> 00:45:27,350
kiwi but if that's not the goal either

00:45:25,160 --> 00:45:28,670
okay so if there's something in stew if

00:45:27,350 --> 00:45:30,080
you want to use studio and there's

00:45:28,670 --> 00:45:32,450
something missing that you think we

00:45:30,080 --> 00:45:35,300
definitely have to have you can file a

00:45:32,450 --> 00:45:37,130
request and that will be considered but

00:45:35,300 --> 00:45:40,580
feature completeness is not the goal of

00:45:37,130 --> 00:45:42,380
Susa studio okay then we have the

00:45:40,580 --> 00:45:47,030
opensuse bill service or the open build

00:45:42,380 --> 00:45:55,340
service Oh build that opensuse at work

00:45:47,030 --> 00:45:57,050
is an instance of OBS you can find Kiwi

00:45:55,340 --> 00:46:00,500
there and all the packages that make up

00:45:57,050 --> 00:46:03,500
opensuse Kiwi is fully integrated in OBS

00:46:00,500 --> 00:46:08,000
so that means you can build kiwi images

00:46:03,500 --> 00:46:11,840
inside of OBS and do BS the OBS images

00:46:08,000 --> 00:46:14,210
are built with kiwi in OBS okay and so

00:46:11,840 --> 00:46:17,290
the public cloud images that we have for

00:46:14,210 --> 00:46:19,610
open source of example also build in OBS

00:46:17,290 --> 00:46:21,700
there are a few quirks in the

00:46:19,610 --> 00:46:24,500
configuration file when you build in OBS

00:46:21,700 --> 00:46:28,190
it's not necessarily for the faint of

00:46:24,500 --> 00:46:30,200
heart because there are a few things

00:46:28,190 --> 00:46:32,870
that you have to consider but it is

00:46:30,200 --> 00:46:37,270
possible and it can be learned even I'm

00:46:32,870 --> 00:46:39,620
learning okay what is an appliance

00:46:37,270 --> 00:46:43,130
appliances are basically images that is

00:46:39,620 --> 00:46:46,460
an OS and an application and that a

00:46:43,130 --> 00:46:46,880
vendor an isv somebody else can

00:46:46,460 --> 00:46:50,000
basically

00:46:46,880 --> 00:46:51,410
give to that customer and it's finished

00:46:50,000 --> 00:46:54,619
then the customer doesn't have to

00:46:51,410 --> 00:46:57,259
struggle with installation of the

00:46:54,619 --> 00:47:00,740
application they don't have to struggle

00:46:57,259 --> 00:47:03,259
through turn to any tuning if that needs

00:47:00,740 --> 00:47:07,369
to be done and then it just you know it

00:47:03,259 --> 00:47:10,369
just works generally there are studies

00:47:07,369 --> 00:47:12,529
that most application support calls our

00:47:10,369 --> 00:47:14,480
installation related something on the

00:47:12,529 --> 00:47:18,170
order of sixty or seventy percent which

00:47:14,480 --> 00:47:20,750
is quite crazy so I is fees that go that

00:47:18,170 --> 00:47:24,710
route can cut down on their support

00:47:20,750 --> 00:47:27,470
calls by quite a good chunk all right

00:47:24,710 --> 00:47:29,690
quick summary okay Kiwi is very flexible

00:47:27,470 --> 00:47:32,299
image built to this command line driven

00:47:29,690 --> 00:47:34,940
easy to integrating in existing build

00:47:32,299 --> 00:47:37,819
processes so if you build an application

00:47:34,940 --> 00:47:40,190
and you want to make an appliance out of

00:47:37,819 --> 00:47:44,180
that at the end of your build process

00:47:40,190 --> 00:47:47,900
you just type in Kiwi Kiwi prepare and

00:47:44,180 --> 00:47:52,089
kiwi kiwi create and then you don't ok

00:47:47,900 --> 00:47:55,009
and we support many image formats gplv2

00:47:52,089 --> 00:47:57,920
it's the license the mailing list is

00:47:55,009 --> 00:47:59,660
Kiwi images and you can find for the

00:47:57,920 --> 00:48:03,769
most part you can find Marcus and me

00:47:59,660 --> 00:48:06,829
hanging out on opensuse Kiwi IRC free

00:48:03,769 --> 00:48:10,910
note and with that thank you very much

00:48:06,829 --> 00:48:14,019
and sorry the building didn't work

00:48:10,910 --> 00:48:17,470
though and if you have any questions

00:48:14,019 --> 00:48:17,470
please feel free

00:48:21,250 --> 00:48:29,960
okay where can we find the lab and

00:48:25,039 --> 00:48:40,789
documentation it steps to try tomm this

00:48:29,960 --> 00:48:44,480
club yes so you have the files right and

00:48:40,789 --> 00:48:49,690
the lab is everything is recorded so you

00:48:44,480 --> 00:48:53,329
can go to you tube top opensuse TV and

00:48:49,690 --> 00:48:58,339
then you can watch me again and again

00:48:53,329 --> 00:49:06,470
and again and again okay so anything

00:48:58,339 --> 00:49:08,420
else other questions all right then and

00:49:06,470 --> 00:49:12,640
we're done already thank you your relief

00:49:08,420 --> 00:49:12,640

YouTube URL: https://www.youtube.com/watch?v=Zy3ZjvQuzUs


