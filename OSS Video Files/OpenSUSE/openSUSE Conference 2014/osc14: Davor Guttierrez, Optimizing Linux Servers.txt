Title: osc14: Davor Guttierrez, Optimizing Linux Servers
Publication date: 2014-04-27
Playlist: openSUSE Conference 2014
Description: 
	Linux Server is optimized for average workloads. With most servers you can gain much by optimizing performance and make some tweaking. In this session you will learn how to optimize your server's performance by tuning kernel parameters, exclude unneeded system services and make some more tweaking with disks, memory and kernel.
Captions: 
	00:00:00,000 --> 00:00:05,879
it's the average CP a lot over us as a

00:00:03,060 --> 00:00:09,450
specific time period on Linux load

00:00:05,879 --> 00:00:12,780
average is displayed for least one

00:00:09,450 --> 00:00:19,949
minute five minute and 15 minutes this

00:00:12,780 --> 00:00:23,340
is these numbers you see first line load

00:00:19,949 --> 00:00:27,000
average zero point well one minute 0.8

00:00:23,340 --> 00:00:30,900
in five minutes 0 point 15 15 minutes

00:00:27,000 --> 00:00:32,969
and that means load average zero point

00:00:30,900 --> 00:00:35,100
when t5 one point twenty one point

00:00:32,969 --> 00:00:39,719
ninety indicates that the load on the

00:00:35,100 --> 00:00:42,059
system is coming down 0.5 25 is the load

00:00:39,719 --> 00:00:44,520
average in the last one minute one point

00:00:42,059 --> 00:00:47,070
20 s is the load average in the last

00:00:44,520 --> 00:00:49,829
five minutes and 190 is the load average

00:00:47,070 --> 00:00:52,379
in the last 15 minute and load average

00:00:49,829 --> 00:00:54,570
is going down this load average is

00:00:52,379 --> 00:00:56,969
calculated by combining both the total

00:00:54,570 --> 00:00:58,670
number of protests in the queue and the

00:00:56,969 --> 00:01:04,799
total number of the process in

00:00:58,670 --> 00:01:07,520
uninterruptible task status then when we

00:01:04,799 --> 00:01:10,770
are talking about disk I optimization

00:01:07,520 --> 00:01:14,369
all our Linux operate on linux

00:01:10,770 --> 00:01:18,030
distributions ships with four different

00:01:14,369 --> 00:01:21,810
io schedulers they are deadlines and on

00:01:18,030 --> 00:01:23,540
noop anticipatory and c fq there are

00:01:21,810 --> 00:01:26,070
many differences between these

00:01:23,540 --> 00:01:29,009
scheduling algorithms the default

00:01:26,070 --> 00:01:32,159
scheduling algorithm is cfq this is

00:01:29,009 --> 00:01:34,350
default in most linux distribution it

00:01:32,159 --> 00:01:37,350
attempts to distribute all i/o bandwidth

00:01:34,350 --> 00:01:40,590
evenly among all processes requesting I

00:01:37,350 --> 00:01:43,979
oh and it's ideal for most purposes if

00:01:40,590 --> 00:01:47,549
you try if you check on your laptop on

00:01:43,979 --> 00:01:51,810
your client PC which algorithm you use

00:01:47,549 --> 00:01:53,909
it will be CF you then noop this

00:01:51,810 --> 00:01:57,229
algorithm attempts to use as little CPR

00:01:53,909 --> 00:01:59,880
as possible it a it acts as a basic

00:01:57,229 --> 00:02:01,380
first-in first-out q expecting the

00:01:59,880 --> 00:02:04,320
hardware controller to handle the

00:02:01,380 --> 00:02:08,429
performance operation of the request if

00:02:04,320 --> 00:02:12,910
you have notebook server whatever with

00:02:08,429 --> 00:02:19,890
solid state disk drive use this your

00:02:12,910 --> 00:02:22,600
computer will be much more faster try it

00:02:19,890 --> 00:02:24,490
anticipatory this algorithm attempts to

00:02:22,600 --> 00:02:27,040
reorder all these kind of operations to

00:02:24,490 --> 00:02:28,810
optimize disk six it's designed to

00:02:27,040 --> 00:02:32,400
increase performance and system that

00:02:28,810 --> 00:02:35,820
have slowed disk okay if you really have

00:02:32,400 --> 00:02:41,350
slowed disk in your computer in your

00:02:35,820 --> 00:02:45,700
notebook with 54 rpms try this it will

00:02:41,350 --> 00:02:51,010
be much more faster than cfq if you have

00:02:45,700 --> 00:02:53,980
disk with seven 7200rpm then just use

00:02:51,010 --> 00:02:57,160
cfq or deadlines and default deadline

00:02:53,980 --> 00:02:59,470
this scheduling algorithm places I

00:02:57,160 --> 00:03:01,660
request in a priority queues so each is

00:02:59,470 --> 00:03:03,220
guaranteed to be round within a certain

00:03:01,660 --> 00:03:05,950
time it's often used in a real-time

00:03:03,220 --> 00:03:10,180
operating system in company well where I

00:03:05,950 --> 00:03:15,850
work we have a lot of work with oracle

00:03:10,180 --> 00:03:18,750
databases and oracle web application

00:03:15,850 --> 00:03:21,730
servers and we always use deadline

00:03:18,750 --> 00:03:25,870
algorithm how to check which algorithm

00:03:21,730 --> 00:03:38,530
are you using simple cat this block is

00:03:25,870 --> 00:03:42,250
sdh or your disk q scheduler i'm using

00:03:38,530 --> 00:03:48,870
this one in brackets cfq on this

00:03:42,250 --> 00:03:51,850
computer if you want to change it just

00:03:48,870 --> 00:03:55,690
put this comment line or if you are

00:03:51,850 --> 00:03:58,780
using suse linux or open suse linux you

00:03:55,690 --> 00:04:03,400
can do this in yes we are Colonel

00:03:58,780 --> 00:04:06,010
settings changing schedulers on-the-fly

00:04:03,400 --> 00:04:08,880
allows you to test and benchmark the

00:04:06,010 --> 00:04:12,130
algorithms for your specific application

00:04:08,880 --> 00:04:14,500
once the change is issued any current I

00:04:12,130 --> 00:04:16,750
operations will be executed before the

00:04:14,500 --> 00:04:18,850
new scheduler goes into effect so the

00:04:16,750 --> 00:04:23,200
change will not be instant you must wait

00:04:18,850 --> 00:04:26,200
maybe 15 seconds one minute but this

00:04:23,200 --> 00:04:28,780
will be quick also remember that one

00:04:26,200 --> 00:04:30,520
one is set and performs to your liking

00:04:28,780 --> 00:04:36,220
be sure to set the change to be applied

00:04:30,520 --> 00:04:38,200
on subsequent to reboot it's often

00:04:36,220 --> 00:04:41,560
recommend to use a no-no appear or

00:04:38,200 --> 00:04:44,500
deadlines on any SSD drive as I said if

00:04:41,560 --> 00:04:48,130
you have SSD Drive triana now or be it's

00:04:44,500 --> 00:04:50,830
really fast on Linux con conference last

00:04:48,130 --> 00:04:53,170
year in Edinburgh I have talked with

00:04:50,830 --> 00:04:58,240
some guys from Israel they have all

00:04:53,170 --> 00:05:00,280
servers with system on SSD drives and he

00:04:58,240 --> 00:05:03,750
brought me mail one month after

00:05:00,280 --> 00:05:06,960
conference and he said that it's really

00:05:03,750 --> 00:05:10,510
quicker and faster access to the disk

00:05:06,960 --> 00:05:13,380
there is usually no definitive answer to

00:05:10,510 --> 00:05:16,450
which algorithm to use you must write

00:05:13,380 --> 00:05:19,300
benchmarking each one will be your best

00:05:16,450 --> 00:05:21,190
option there are cases where cfq may not

00:05:19,300 --> 00:05:25,060
be the best scheduler for your system or

00:05:21,190 --> 00:05:28,960
applications as I said cfq is default

00:05:25,060 --> 00:05:31,540
algorithm on your computer and it's not

00:05:28,960 --> 00:05:33,820
always the best choice an example is if

00:05:31,540 --> 00:05:36,370
you are running a red disk array with

00:05:33,820 --> 00:05:38,470
cash and credit controller if you have

00:05:36,370 --> 00:05:43,690
cash credit controller in hardware

00:05:38,470 --> 00:05:47,110
controller computer wheel sets that cfq

00:05:43,690 --> 00:05:52,630
is the best but this last one deadline

00:05:47,110 --> 00:05:55,660
is always better choice I optimization

00:05:52,630 --> 00:05:58,720
iowait is the amount of time CPU is

00:05:55,660 --> 00:06:01,420
waiting for i 0 if you see consistent

00:05:58,720 --> 00:06:03,310
high I oh wait on your system it

00:06:01,420 --> 00:06:06,670
indicates a problem in the disk

00:06:03,310 --> 00:06:09,430
subsystem you should also monitor reach

00:06:06,670 --> 00:06:12,340
second and right second this is measured

00:06:09,430 --> 00:06:15,220
in blocks number of blocks to read/write

00:06:12,340 --> 00:06:18,340
per second terrell also referred us by

00:06:15,220 --> 00:06:20,860
and ball blocking and block out TPS

00:06:18,340 --> 00:06:23,260
indicates total transactions per second

00:06:20,860 --> 00:06:26,850
which is some of which transactions per

00:06:23,260 --> 00:06:32,200
second and write transaction per second

00:06:26,850 --> 00:06:35,710
then always choose the quickest file

00:06:32,200 --> 00:06:38,890
system you can choose between xt2 okay

00:06:35,710 --> 00:06:40,000
it's very old it has no journaling then

00:06:38,890 --> 00:06:43,570
we have x2

00:06:40,000 --> 00:06:46,240
me it's still default in some older

00:06:43,570 --> 00:06:51,120
distribution then if you choose if you

00:06:46,240 --> 00:06:53,530
install maybe it's less than the default

00:06:51,120 --> 00:06:58,740
file system is less than it's still

00:06:53,530 --> 00:06:58,740
arise at FS don't use it it's not

00:06:58,830 --> 00:07:05,770
developing anymore we all know what is

00:07:02,320 --> 00:07:08,440
with cancer either so just xt3 is less

00:07:05,770 --> 00:07:12,220
then then if you are using this newer

00:07:08,440 --> 00:07:15,690
distribution slice 11 red hair to boon

00:07:12,220 --> 00:07:22,780
to use a state for all or you can use

00:07:15,690 --> 00:07:26,669
btrfs in a slice 11 but bit btrfs is

00:07:22,780 --> 00:07:30,070
quick but it's not supported by some

00:07:26,669 --> 00:07:34,150
third party program vendors like oracle

00:07:30,070 --> 00:07:36,640
if you will use database server the web

00:07:34,150 --> 00:07:41,260
application server on btrfs they will

00:07:36,640 --> 00:07:44,290
set such this is not supported and you

00:07:41,260 --> 00:07:49,680
always you can always tune file system

00:07:44,290 --> 00:07:53,440
options in fstab you can always choose

00:07:49,680 --> 00:07:57,240
options like no time no dear a time and

00:07:53,440 --> 00:08:00,070
your file system will be act much faster

00:07:57,240 --> 00:08:03,810
then when we are talking about this guy

00:08:00,070 --> 00:08:07,830
optimization we are talking about trade

00:08:03,810 --> 00:08:12,640
software or hardware raid many of us are

00:08:07,830 --> 00:08:18,220
are still using software rate because

00:08:12,640 --> 00:08:21,580
hardware it is maybe not implemented in

00:08:18,220 --> 00:08:23,910
colonel from our right vendor so you can

00:08:21,580 --> 00:08:26,650
use rate to zero okay this is not

00:08:23,910 --> 00:08:30,130
mirroring this is striping then the red

00:08:26,650 --> 00:08:32,710
one never use rate 5 it's not

00:08:30,130 --> 00:08:34,960
recommended it's very slow if you want

00:08:32,710 --> 00:08:38,950
to use something like a raid 5 it's

00:08:34,960 --> 00:08:40,719
better that you to use rate 6 and right

00:08:38,950 --> 00:08:46,000
then it's the best choice but you will

00:08:40,719 --> 00:08:48,040
lose half of your disk capabilities when

00:08:46,000 --> 00:08:52,270
we are talking about disc optimization

00:08:48,040 --> 00:08:53,370
you must always use benchmark programs

00:08:52,270 --> 00:08:59,130
like maybe

00:08:53,370 --> 00:09:02,790
Bonnie + + to measure disk speed of disk

00:08:59,130 --> 00:09:05,700
you can use HD parm as the parm you can

00:09:02,790 --> 00:09:09,720
always upgrade bios of your server and

00:09:05,700 --> 00:09:13,910
firmer of your disk and check if your

00:09:09,720 --> 00:09:17,040
disk is maybe park your head ok the

00:09:13,910 --> 00:09:20,010
parking the head it's not think on

00:09:17,040 --> 00:09:24,480
server disk it's much more thing on

00:09:20,010 --> 00:09:27,570
desktop disk if you have maybe disk this

00:09:24,480 --> 00:09:29,870
western digital green or this series it

00:09:27,570 --> 00:09:35,190
will park your head it will park it and

00:09:29,870 --> 00:09:38,220
this startup will be much slower but on

00:09:35,190 --> 00:09:42,860
you can always change firmware of your

00:09:38,220 --> 00:09:46,589
disk and change this disk parking

00:09:42,860 --> 00:09:52,200
settings that these discs will not park

00:09:46,589 --> 00:09:54,600
the head ok about network tuning a good

00:09:52,200 --> 00:09:57,570
understanding of tcp/ip concept is

00:09:54,600 --> 00:10:00,779
helpful while analyzing any network

00:09:57,570 --> 00:10:02,839
issues for network interfaces you should

00:10:00,779 --> 00:10:06,060
monitor total number of packets received

00:10:02,839 --> 00:10:09,510
and sent through the interfaces number

00:10:06,060 --> 00:10:12,839
of dropped packets and so on in a

00:10:09,510 --> 00:10:15,630
company where I work we recently I think

00:10:12,839 --> 00:10:20,430
one or maybe two months ago but Oracle

00:10:15,630 --> 00:10:23,010
Exadata and Cisco UCS servers for Oracle

00:10:20,430 --> 00:10:25,500
Exadata for storing information like

00:10:23,010 --> 00:10:29,510
date of our house and cisco with eight

00:10:25,500 --> 00:10:33,660
blade cisco ucs blades for

00:10:29,510 --> 00:10:37,800
virtualization we have measured cisco

00:10:33,660 --> 00:10:40,709
has to 10 gig switch switches and we

00:10:37,800 --> 00:10:44,880
have measured network performance from

00:10:40,709 --> 00:10:48,270
oracle exadata 232 through these 10 gig

00:10:44,880 --> 00:10:54,120
switches two blades on which are running

00:10:48,270 --> 00:10:57,720
on the UCS on a 10 geek network the

00:10:54,120 --> 00:11:05,100
maximum throughput was three gigs not

00:10:57,720 --> 00:11:07,240
good so why linux from itself I hope the

00:11:05,100 --> 00:11:11,050
two cities linux for it sells

00:11:07,240 --> 00:11:15,670
it's not made this network IP steak is

00:11:11,050 --> 00:11:21,370
not made for 10 gig network but if you

00:11:15,670 --> 00:11:25,779
change these variables in a proc file

00:11:21,370 --> 00:11:28,630
system you can expect bandwidth will

00:11:25,779 --> 00:11:32,589
increase from three geeks to six or six

00:11:28,630 --> 00:11:35,589
six or seven gigs and these variables

00:11:32,589 --> 00:11:37,899
are ideal for servers that are serving

00:11:35,589 --> 00:11:40,360
up huge numbers of concurrent sessions

00:11:37,899 --> 00:11:43,660
there are some TCP options that should

00:11:40,360 --> 00:11:45,970
probably be enabled with a large number

00:11:43,660 --> 00:11:47,860
of clients doing their best to kill the

00:11:45,970 --> 00:11:49,779
server it's probably not uncommon for

00:11:47,860 --> 00:11:52,600
the server to have twenty thousand or

00:11:49,779 --> 00:11:56,050
more open sockets you can change these

00:11:52,600 --> 00:12:01,750
settings and your network will be much

00:11:56,050 --> 00:12:05,830
faster even on 100 to make switches but

00:12:01,750 --> 00:12:10,720
if you are using then geek switches and

00:12:05,830 --> 00:12:13,300
ten week network art it's always the

00:12:10,720 --> 00:12:16,149
best idea to increase TCP mugs buffer

00:12:13,300 --> 00:12:18,670
size increase linux alta tuning tcp

00:12:16,149 --> 00:12:20,890
buffer limit increase the length of

00:12:18,670 --> 00:12:23,380
processor input queue and the most

00:12:20,890 --> 00:12:27,399
important recommended the default

00:12:23,380 --> 00:12:34,589
congestion control to change it to HTC p

00:12:27,399 --> 00:12:38,589
and to enable the if you have enabled

00:12:34,589 --> 00:12:45,010
jumbo frames is the best to change MTU

00:12:38,589 --> 00:12:47,920
probing ok if you are using 10 gig

00:12:45,010 --> 00:12:51,130
switch it's always the best that you are

00:12:47,920 --> 00:12:55,990
using jumbo frames that means that you

00:12:51,130 --> 00:12:59,370
are you must use MTU 9000 we have

00:12:55,990 --> 00:13:04,630
determined this I think two weeks ago

00:12:59,370 --> 00:13:08,170
but if you are using jumbo frames or

00:13:04,630 --> 00:13:10,390
until nine thousand your switches and

00:13:08,170 --> 00:13:16,180
other equipment and other servers must

00:13:10,390 --> 00:13:19,710
support this the kiss recommend the

00:13:16,180 --> 00:13:21,720
default congestion control what is

00:13:19,710 --> 00:13:27,420
control TCP congestion avoidance

00:13:21,720 --> 00:13:30,510
algorithms we have 46 algorithms the

00:13:27,420 --> 00:13:33,990
default algorithm in all linux and unix

00:13:30,510 --> 00:13:36,510
and all computers and the windows

00:13:33,990 --> 00:13:39,480
computer windows operating system to is

00:13:36,510 --> 00:13:42,300
reno traditional tcp used by almost all

00:13:39,480 --> 00:13:47,730
operating system then we have cubic

00:13:42,300 --> 00:13:50,430
cubic tcp be I see vict CP HTTP Hamilton

00:13:47,730 --> 00:13:53,820
TCP which is the best solution if you

00:13:50,430 --> 00:13:56,930
have 10 gig or faster need Nick Vegas

00:13:53,820 --> 00:14:00,390
tcp Vegas and westwood optimal which is

00:13:56,930 --> 00:14:05,100
optimized for loozer networks so if you

00:14:00,390 --> 00:14:09,200
are using 10 gigs switches use hamilton

00:14:05,100 --> 00:14:18,540
tcp how to determine which are you using

00:14:09,200 --> 00:14:21,990
just write down this comment you will

00:14:18,540 --> 00:14:24,540
i'm using Cuba canary note this is some

00:14:21,990 --> 00:14:30,000
mixture in a newest linux distribution

00:14:24,540 --> 00:14:38,640
but if you use 10 gig switch just change

00:14:30,000 --> 00:14:42,450
it to hdcp okay next slide about memory

00:14:38,640 --> 00:14:46,110
optimization if you have 16 gig of ram

00:14:42,450 --> 00:14:49,680
installed in your servers you have 16 16

00:14:46,110 --> 00:14:52,350
gig of physical memory virtual memory it

00:14:49,680 --> 00:14:54,540
swap space available on the disk +

00:14:52,350 --> 00:14:56,550
physical memory the virtual memory

00:14:54,540 --> 00:14:59,220
contains both user space and kernel

00:14:56,550 --> 00:15:01,620
space using either 32-bit or 64-bit

00:14:59,220 --> 00:15:05,040
systems makes a big difference in how

00:15:01,620 --> 00:15:08,460
much memory approaches can utilize on a

00:15:05,040 --> 00:15:10,710
30 feet system 32 bit system approaches

00:15:08,460 --> 00:15:14,730
can only access a maximum of forgive

00:15:10,710 --> 00:15:18,240
forgive of virtual memory and on 64-bit

00:15:14,730 --> 00:15:22,130
system there is no such limitation when

00:15:18,240 --> 00:15:26,130
we are all using 32-bit to beat system

00:15:22,130 --> 00:15:31,500
it's a it has always been problem with

00:15:26,130 --> 00:15:32,880
swap space they have said ok we have 2

00:15:31,500 --> 00:15:36,470
gigs of ram

00:15:32,880 --> 00:15:39,300
I have installed one software for

00:15:36,470 --> 00:15:42,870
commercial software for proxy servers I

00:15:39,300 --> 00:15:47,070
don't remember which one it's and tasted

00:15:42,870 --> 00:15:52,320
okay you need to two gigs of ram and 10

00:15:47,070 --> 00:15:55,530
gigs of swap space but yeah oil trend

00:15:52,320 --> 00:15:59,940
micro one of trend micro proxy servers

00:15:55,530 --> 00:16:03,960
but don't know which one and it's not

00:15:59,940 --> 00:16:08,630
going you cannot use more than four gigs

00:16:03,960 --> 00:16:12,240
ram on 32-bit system so what you can do

00:16:08,630 --> 00:16:15,240
just make two for geeks partition and

00:16:12,240 --> 00:16:20,460
two two gig partition of swap space but

00:16:15,240 --> 00:16:23,150
this is history unused memory will be

00:16:20,460 --> 00:16:25,680
used as file system cache by the kernel

00:16:23,150 --> 00:16:28,260
linux system will swap when it needs

00:16:25,680 --> 00:16:32,250
more memory when it needs more memory

00:16:28,260 --> 00:16:34,890
and the tenth physical memory he has

00:16:32,250 --> 00:16:37,140
when it swaps it's bright the list used

00:16:34,890 --> 00:16:39,870
memory pages from the physical memory to

00:16:37,140 --> 00:16:42,810
describe swap space on to disk but it is

00:16:39,870 --> 00:16:45,000
slow a lot of swapping can use can cause

00:16:42,810 --> 00:16:47,160
performance issues as the disk is much

00:16:45,000 --> 00:16:49,380
slower than the physical memory and it

00:16:47,160 --> 00:16:53,130
takes time to swap the memory pages from

00:16:49,380 --> 00:16:58,230
memory to disk when we are talking about

00:16:53,130 --> 00:17:02,460
memory optimization in past years 23

00:16:58,230 --> 00:17:05,490
years ago we have new technique dance

00:17:02,460 --> 00:17:10,829
memory we have Numa non-uniform memory

00:17:05,490 --> 00:17:13,230
access we all know huge pages and we can

00:17:10,829 --> 00:17:17,220
manage virtual memory pages with

00:17:13,230 --> 00:17:21,540
flashing dirty pages in and to change

00:17:17,220 --> 00:17:25,170
swapping behavior okay nomads have

00:17:21,540 --> 00:17:27,390
anyone hurt of new month new matt is one

00:17:25,170 --> 00:17:29,400
demon its user level demon to

00:17:27,390 --> 00:17:31,620
automatically improve out-of-the-box

00:17:29,400 --> 00:17:35,150
Numa system performance it's available

00:17:31,620 --> 00:17:40,560
in fedora 17 Red Hat Enterprise Linux

00:17:35,150 --> 00:17:45,810
6.3 ok SUSE Linux Enterprise Server 11

00:17:40,560 --> 00:17:46,710
and opensuse I think 12 it's not enabled

00:17:45,810 --> 00:17:50,730
by default

00:17:46,710 --> 00:17:52,980
these demon monitors available system

00:17:50,730 --> 00:17:56,490
resources on a per node basis and

00:17:52,980 --> 00:17:58,590
assigns significant consumer processes

00:17:56,490 --> 00:18:01,919
to align the resources for optimum Numa

00:17:58,590 --> 00:18:04,620
performance it rebalances when necessary

00:18:01,919 --> 00:18:06,450
and it provides replacement advice for

00:18:04,620 --> 00:18:09,860
the best initial process placement in a

00:18:06,450 --> 00:18:14,159
resource affinity if your service is

00:18:09,860 --> 00:18:19,740
some kind of hyper visor for kvm xn or

00:18:14,159 --> 00:18:22,549
such open source virtualization switch

00:18:19,740 --> 00:18:28,230
on a new mod just switch it on because

00:18:22,549 --> 00:18:31,919
default it's not enabled by default then

00:18:28,230 --> 00:18:34,230
huge pages to make pages versus 4k

00:18:31,919 --> 00:18:38,659
standard clinics pages virtual to

00:18:34,230 --> 00:18:41,250
physical page map is 512 times smaller

00:18:38,659 --> 00:18:44,580
till we can map more physical pages

00:18:41,250 --> 00:18:48,659
resulting in fewer mrs. traditional huge

00:18:44,580 --> 00:18:51,659
pace just always paint transparent huge

00:18:48,659 --> 00:18:56,399
pages are available in Red Hat

00:18:51,659 --> 00:18:59,279
Enterprise Linux 6 and / 11 as in

00:18:56,399 --> 00:19:02,130
opensuse to most databases support huge

00:18:59,279 --> 00:19:04,440
pages if you install Oracle database it

00:19:02,130 --> 00:19:07,520
will always write that you must enable

00:19:04,440 --> 00:19:11,429
huge pages long geek pages supported

00:19:07,520 --> 00:19:16,620
it's supported the newer hardware how to

00:19:11,429 --> 00:19:19,440
configure huge pages to 16 or here on 28

00:19:16,620 --> 00:19:24,480
gigs just going to proc file system and

00:19:19,440 --> 00:19:32,159
you will use huge pages or this comment

00:19:24,480 --> 00:19:36,179
in CTL flashing cash cash we can drop a

00:19:32,159 --> 00:19:38,730
new sketch freeze unused memory file

00:19:36,179 --> 00:19:42,600
cache if the database you sketch may

00:19:38,730 --> 00:19:46,350
notice slow slow down how can we free

00:19:42,600 --> 00:19:50,850
page cache just a whole one to drop

00:19:46,350 --> 00:19:55,320
caches how can be free slap cash just a

00:19:50,850 --> 00:19:58,169
02 to drop caches and a hoe treif to

00:19:55,320 --> 00:20:00,400
drop caches to free page cache and slap

00:19:58,169 --> 00:20:03,340
cash in at the same time

00:20:00,400 --> 00:20:07,450
this will not happen instantly we've

00:20:03,340 --> 00:20:13,530
must wait a few seconds or few minutes

00:20:07,450 --> 00:20:16,030
and it doesn't help always so happiness

00:20:13,530 --> 00:20:19,300
happiness controls how aggressively the

00:20:16,030 --> 00:20:24,430
system reclaims mapped memory defaults

00:20:19,300 --> 00:20:27,120
weapon s on opens who said the and all

00:20:24,430 --> 00:20:30,130
linux distributions is about 60

00:20:27,120 --> 00:20:32,260
decreasing to sixty percent decreasing

00:20:30,130 --> 00:20:35,250
this number means more aggressive

00:20:32,260 --> 00:20:37,930
reclaiming of unmapped page cache memory

00:20:35,250 --> 00:20:39,850
increasing this number means more

00:20:37,930 --> 00:20:43,810
aggressive swapping of mapped memory

00:20:39,850 --> 00:20:46,150
which is the best you must write you

00:20:43,810 --> 00:20:49,330
must try in benchmarking it depends of

00:20:46,150 --> 00:20:52,060
what kind of server is hardware specific

00:20:49,330 --> 00:20:55,630
server for what purposes you are using

00:20:52,060 --> 00:20:57,850
your server and so on when we are

00:20:55,630 --> 00:21:01,780
talking about optimizing we must always

00:20:57,850 --> 00:21:03,850
remember the 1820 rule that means eighty

00:21:01,780 --> 00:21:05,740
percent of the performance improvement

00:21:03,850 --> 00:21:09,010
comes from tuning the application and

00:21:05,740 --> 00:21:15,250
the rest 20-person come from tuning the

00:21:09,010 --> 00:21:18,610
infrastructure components which are the

00:21:15,250 --> 00:21:22,360
best system monitoring tools you know

00:21:18,610 --> 00:21:25,330
all these tools vmstat netstat PA stop a

00:21:22,360 --> 00:21:29,590
top H stop em top I estate and it's

00:21:25,330 --> 00:21:32,560
always view nothing specific then

00:21:29,590 --> 00:21:37,570
Colonel tuning hmm when we are talking

00:21:32,560 --> 00:21:39,490
about Colonel tuning it's always good

00:21:37,570 --> 00:21:42,340
solution to recompile your kernel to

00:21:39,490 --> 00:21:45,430
make your color nail small smaller but

00:21:42,340 --> 00:21:48,040
if you recompile your kernel exclude

00:21:45,430 --> 00:21:50,500
unneeded modules on enterprise

00:21:48,040 --> 00:21:52,620
distribution like red hat enterprise

00:21:50,500 --> 00:21:56,590
linux or suse linux enterprise server

00:21:52,620 --> 00:21:59,640
then your vendors whose novell suse and

00:21:56,590 --> 00:22:03,670
the redhead will not support your

00:21:59,640 --> 00:22:07,360
recompile colonel you can buy from them

00:22:03,670 --> 00:22:12,130
realtime kernel but real tank rental

00:22:07,360 --> 00:22:13,180
options on redhead and Suzy are not

00:22:12,130 --> 00:22:18,040
cheap

00:22:13,180 --> 00:22:22,890
so if you want to recompile your cornell

00:22:18,040 --> 00:22:26,980
i have just a second i have one PDF

00:22:22,890 --> 00:22:29,880
where you can see which are the best

00:22:26,980 --> 00:22:29,880
options for

00:23:05,550 --> 00:23:12,700
this is these are Grinnell configuration

00:23:09,640 --> 00:23:16,770
options this is common lined options

00:23:12,700 --> 00:23:20,640
when you are making make config and

00:23:16,770 --> 00:23:24,850
which are default options and which

00:23:20,640 --> 00:23:29,170
options you must change to use small

00:23:24,850 --> 00:23:31,750
kernel options tune some Crennel data

00:23:29,170 --> 00:23:35,950
says is doing some net related data set

00:23:31,750 --> 00:23:38,050
is to turn on k malik accounting print a

00:23:35,950 --> 00:23:41,950
little bootman publications and so on

00:23:38,050 --> 00:23:45,309
and these options are it's not so many

00:23:41,950 --> 00:23:50,620
options but your kernel will be smaller

00:23:45,309 --> 00:23:55,530
and will be much faster you can buy

00:23:50,620 --> 00:24:03,309
realtime kernel from your vendor it will

00:23:55,530 --> 00:24:08,890
license cause our 10 or 20 times higher

00:24:03,309 --> 00:24:13,440
than ordinary colonel but you can do the

00:24:08,890 --> 00:24:20,320
same thing with this and it will take

00:24:13,440 --> 00:24:24,070
your 15 or 30 minute of your time I will

00:24:20,320 --> 00:24:33,090
put this slide also on conference link

00:24:24,070 --> 00:24:36,610
that you can grab grab them then okay

00:24:33,090 --> 00:24:39,870
when we are talking about tuning yes we

00:24:36,610 --> 00:24:42,220
can always tuning some applications like

00:24:39,870 --> 00:24:46,750
samba file and print shall shower

00:24:42,220 --> 00:24:49,780
sharing we can enable III all this is

00:24:46,750 --> 00:24:51,520
extreme options we can roll user all

00:24:49,780 --> 00:24:54,700
read and write we can turn on

00:24:51,520 --> 00:24:59,920
opportunistic locking we can switch off

00:24:54,700 --> 00:25:04,570
or use smaller lock level and if we are

00:24:59,920 --> 00:25:07,090
using old version of samba maybe version

00:25:04,570 --> 00:25:10,900
to just switch it to version four it's

00:25:07,090 --> 00:25:12,990
not hard and it's much faster okay we

00:25:10,900 --> 00:25:15,880
whenever we are talking about database

00:25:12,990 --> 00:25:18,850
optimization and you if you are using

00:25:15,880 --> 00:25:21,970
MySQL then you can use MySQL

00:25:18,850 --> 00:25:25,330
tuning applications I have a lot of web

00:25:21,970 --> 00:25:30,270
hosting services one of really fine you

00:25:25,330 --> 00:25:35,020
too Liz mysql tuner it will watch your

00:25:30,270 --> 00:25:38,410
web mysql server for 24 hours 48 hours

00:25:35,020 --> 00:25:41,770
and he will set to what options you need

00:25:38,410 --> 00:25:44,980
to change in my dot CFN configuration

00:25:41,770 --> 00:25:49,590
you can optimize table to maybe look

00:25:44,980 --> 00:25:54,130
which the tables are using maybe change

00:25:49,590 --> 00:25:57,730
database ok when we are talking about

00:25:54,130 --> 00:25:59,980
opinel dieppe tuning the most important

00:25:57,730 --> 00:26:01,450
unique aspect for open ldp is deciding

00:25:59,980 --> 00:26:05,800
what attributes you want to build

00:26:01,450 --> 00:26:08,140
indexes on this is one example if you

00:26:05,800 --> 00:26:11,770
add the following parameters to slept

00:26:08,140 --> 00:26:13,930
calm before entering the info into the

00:26:11,770 --> 00:26:17,710
database they will all get index it and

00:26:13,930 --> 00:26:21,730
performance will increase then when we

00:26:17,710 --> 00:26:24,190
are talking about apache make sure you

00:26:21,730 --> 00:26:26,620
are starting a ton of initial demons if

00:26:24,190 --> 00:26:29,710
you want good benchmark scores you can

00:26:26,620 --> 00:26:35,080
change this in httpd.conf or default

00:26:29,710 --> 00:26:38,590
conf if your web sites are slow on

00:26:35,080 --> 00:26:42,370
apache server use optimizers use

00:26:38,590 --> 00:26:44,710
memcache junior apache minimize numbers

00:26:42,370 --> 00:26:47,320
of a patch modules don't use unneeded

00:26:44,710 --> 00:26:49,300
modules maybe try to change apache for

00:26:47,320 --> 00:26:53,560
engines which is in some occasions

00:26:49,300 --> 00:26:56,080
faster then when we are talking about

00:26:53,560 --> 00:26:58,930
benchmark a good set of benchmarking

00:26:56,080 --> 00:27:01,360
utilities are often very helpful in

00:26:58,930 --> 00:27:03,670
doing systems tuning work it is

00:27:01,360 --> 00:27:06,580
impossible to duplicate real-world

00:27:03,670 --> 00:27:09,550
situations but that isn't really the

00:27:06,580 --> 00:27:11,740
goal of a goon bed benchmarking a goon

00:27:09,550 --> 00:27:13,960
the benchmark typically tries to measure

00:27:11,740 --> 00:27:16,990
the performance of one particular think

00:27:13,960 --> 00:27:18,910
very accurately if you understand what

00:27:16,990 --> 00:27:23,740
the benchmarks are doing they can be

00:27:18,910 --> 00:27:27,580
very usable tools benchmarking tools

00:27:23,740 --> 00:27:29,290
Bonnie plus a plus plus it's a free file

00:27:27,580 --> 00:27:32,170
system benchmarking tool for unix-like

00:27:29,290 --> 00:27:32,559
operating operating systems DB bench is

00:27:32,170 --> 00:27:36,129
a total

00:27:32,559 --> 00:27:39,580
gaynor generate I over clouds HTTP load

00:27:36,129 --> 00:27:43,330
run multiple HTTP HTTP fetches in

00:27:39,580 --> 00:27:44,889
parallel DK ftp bench like DB bench tile

00:27:43,330 --> 00:27:47,830
bench is a multi tree that I'll

00:27:44,889 --> 00:27:50,669
benchmark TT CP utility program for

00:27:47,830 --> 00:27:52,929
measuring network throughput net pair

00:27:50,669 --> 00:27:55,870
networking performance performance

00:27:52,929 --> 00:27:58,990
tester and I perv network performance

00:27:55,870 --> 00:28:02,049
tester this is my favorite I perv it

00:27:58,990 --> 00:28:06,999
will run I per server and I perv client

00:28:02,049 --> 00:28:09,460
to test network speed okay I didn't

00:28:06,999 --> 00:28:12,429
identify and solve performance issues

00:28:09,460 --> 00:28:13,659
you must understand the problem hot half

00:28:12,429 --> 00:28:15,749
of the problem is solved when you

00:28:13,659 --> 00:28:19,059
clearly understand what the problem is

00:28:15,749 --> 00:28:21,249
monitor and collect data after defining

00:28:19,059 --> 00:28:22,869
the problem clearly monitor the system

00:28:21,249 --> 00:28:27,639
and try to collect as much data as

00:28:22,869 --> 00:28:31,240
possible on various subsystems eliminate

00:28:27,639 --> 00:28:34,029
a narrow down issues after having a list

00:28:31,240 --> 00:28:37,080
of potential issues dive into each one

00:28:34,029 --> 00:28:40,690
of them and eliminate any non issues and

00:28:37,080 --> 00:28:42,009
the most important make one change at

00:28:40,690 --> 00:28:46,740
the time don't try to make multiple

00:28:42,009 --> 00:28:49,869
multiple changes at one time we have

00:28:46,740 --> 00:28:53,789
started to optimize servers in our

00:28:49,869 --> 00:29:00,340
company I think now 23 years ago we have

00:28:53,789 --> 00:29:05,049
lots of virtualized servers on kvm and I

00:29:00,340 --> 00:29:08,740
think now all things are running very

00:29:05,049 --> 00:29:14,379
smoothly but we really need a lot of

00:29:08,740 --> 00:29:19,080
time to make servers to be optimized at

00:29:14,379 --> 00:29:23,860
as much as we can that was all for today

00:29:19,080 --> 00:29:28,090
for if anyone has questions you can ask

00:29:23,860 --> 00:29:35,039
now we have I think 15 minutes you can

00:29:28,090 --> 00:29:35,039
write me an email so any questions

00:29:50,010 --> 00:29:59,830
I'm most of your advices I fully agree

00:29:55,919 --> 00:30:02,140
compiling the colonel I do not

00:29:59,830 --> 00:30:04,480
understand fully what you want to save

00:30:02,140 --> 00:30:08,830
their because of course the new kernel

00:30:04,480 --> 00:30:11,890
will be smaller but on a server the

00:30:08,830 --> 00:30:15,309
space the colonel needs is neglected in

00:30:11,890 --> 00:30:18,130
my experience so what of course then you

00:30:15,309 --> 00:30:20,500
have a bit better locality but I really

00:30:18,130 --> 00:30:23,590
don't think that's measurable efforts do

00:30:20,500 --> 00:30:26,980
you have measurable enhancement do you

00:30:23,590 --> 00:30:29,289
have examples that you really get

00:30:26,980 --> 00:30:31,690
measurable improvements on a big server

00:30:29,289 --> 00:30:45,070
by the kernel on embedded it's complete

00:30:31,690 --> 00:30:48,520
different story by ton servers which are

00:30:45,070 --> 00:30:54,640
using which must use real time Colonel

00:30:48,520 --> 00:30:57,789
but this compiling colonel are still

00:30:54,640 --> 00:31:02,890
from 10 years ago 15 years ago I have

00:30:57,789 --> 00:31:04,539
started with Linux in 1993 1994 10 the

00:31:02,890 --> 00:31:07,200
first thing when you installed linux on

00:31:04,539 --> 00:31:11,679
server Russ I must compile this kernel

00:31:07,200 --> 00:31:16,419
now okay now you don't need to recompile

00:31:11,679 --> 00:31:19,179
your Colonel but I always said that all

00:31:16,419 --> 00:31:25,510
kernels have too many more modules

00:31:19,179 --> 00:31:29,890
included that all kernels have is made

00:31:25,510 --> 00:31:33,190
for many servers it's not and if you

00:31:29,890 --> 00:31:36,070
compile your new kernel you can compile

00:31:33,190 --> 00:31:38,049
it that it will run smoothly and the

00:31:36,070 --> 00:31:42,630
best on your servers you will not gain

00:31:38,049 --> 00:31:46,210
any really high performance issues but

00:31:42,630 --> 00:31:49,920
maybe on some old systems or for your

00:31:46,210 --> 00:31:53,130
own faith

00:31:49,920 --> 00:31:53,130
anyone else

00:32:00,290 --> 00:32:06,060
okay then thanks for your patience I

00:32:03,240 --> 00:32:09,450
will be here today tomorrow and on

00:32:06,060 --> 00:32:11,570
Monday and you can ask everything thank

00:32:09,450 --> 00:32:11,570

YouTube URL: https://www.youtube.com/watch?v=BomUXsss_GI


