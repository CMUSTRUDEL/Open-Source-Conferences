Title: osc14: Stephan Kulow, A Ring of Fire live on Stagings
Publication date: 2014-04-27
Playlist: openSUSE Conference 2014
Description: 
	In this talk I want to present what tools our team worked on to improve the development process of openSUSE:Factory
to get higher quality for openSUSE. The development process of Factory is actually the development process of openSUSE,
so it's of high importance and a lot of things changed since my last openSUSE conference presentation and still a lot of things
are planned to change.

The proposal of the new workflow was posted to the factory mailing list November 2013: http://lists.opensuse.org/opensuse-factory/2013-11/msg00920.html
and this talk is about the changes derived from it.
Captions: 
	00:00:00,740 --> 00:00:09,540
welcome my name is stefan cool or just

00:00:05,089 --> 00:00:12,540
cool oh i will be enough I'm work for

00:00:09,540 --> 00:00:15,210
zoo zoos in the opensuse team as the

00:00:12,540 --> 00:00:18,570
release manager of the open to the

00:00:15,210 --> 00:00:21,420
distribution for almost seven years now

00:00:18,570 --> 00:00:26,820
I think in July it will be seven years

00:00:21,420 --> 00:00:29,820
and I want to talk about actually about

00:00:26,820 --> 00:00:34,170
better factory and what we did over the

00:00:29,820 --> 00:00:39,360
last couple of months to improve the

00:00:34,170 --> 00:00:42,020
usability of factory and so what is the

00:00:39,360 --> 00:00:44,760
actual problem that we faced the problem

00:00:42,020 --> 00:00:47,270
might not be too obvious if you just

00:00:44,760 --> 00:00:49,680
used opensuse releases that we release

00:00:47,270 --> 00:00:54,710
used to release every eight months

00:00:49,680 --> 00:00:59,219
because they were okay they were ok but

00:00:54,710 --> 00:01:00,870
the problem is that the factory which is

00:00:59,219 --> 00:01:04,260
the development version of it that we

00:01:00,870 --> 00:01:07,830
release it from is growing over the

00:01:04,260 --> 00:01:12,060
years and actually it's growing a lot

00:01:07,830 --> 00:01:13,640
since like three years and underlying

00:01:12,060 --> 00:01:20,009
problem is that we use the same

00:01:13,640 --> 00:01:25,860
development process for here and for

00:01:20,009 --> 00:01:28,860
here and for here and at some point we

00:01:25,860 --> 00:01:31,490
have to realize that we have to change

00:01:28,860 --> 00:01:34,890
the development model a bit so we can

00:01:31,490 --> 00:01:41,700
adopt to the new gradient this curve has

00:01:34,890 --> 00:01:45,689
now and the big problem is that the

00:01:41,700 --> 00:01:54,530
change is done to factory are not too

00:01:45,689 --> 00:01:57,200
well tested so the the I don't imply bad

00:01:54,530 --> 00:02:01,290
intentions by the people but in the end

00:01:57,200 --> 00:02:04,680
the better they will test the changes

00:02:01,290 --> 00:02:09,360
the better the end product would be but

00:02:04,680 --> 00:02:11,930
it's not and the thing is we have a lot

00:02:09,360 --> 00:02:13,090
of these changes there used to be a time

00:02:11,930 --> 00:02:15,640
when

00:02:13,090 --> 00:02:19,540
it was normal that we have 200 changes a

00:02:15,640 --> 00:02:22,959
week like this by the way changes per

00:02:19,540 --> 00:02:26,319
week by now we are happy if we below 600

00:02:22,959 --> 00:02:29,739
a week so this is also a number that has

00:02:26,319 --> 00:02:34,299
grown over the years it is significantly

00:02:29,739 --> 00:02:40,510
more difficult to handle with the

00:02:34,299 --> 00:02:42,269
current development process so over the

00:02:40,510 --> 00:02:49,200
last year's we introduced several

00:02:42,269 --> 00:02:52,120
mechanisms that try to help we have some

00:02:49,200 --> 00:02:55,180
script that is called factory auto which

00:02:52,120 --> 00:02:59,079
is reviewing parts of the sources so

00:02:55,180 --> 00:03:02,349
that the the small and mistakes are

00:02:59,079 --> 00:03:03,849
already seen by a machine at the source

00:03:02,349 --> 00:03:08,170
URL is valid that the patches are

00:03:03,849 --> 00:03:10,299
applied that the that there's no set

00:03:08,170 --> 00:03:12,459
badness in the FPM Linda see stuff like

00:03:10,299 --> 00:03:14,319
that that humans always have to change

00:03:12,459 --> 00:03:16,299
check like robots so we actually

00:03:14,319 --> 00:03:20,220
introduced a robot so that human beings

00:03:16,299 --> 00:03:22,900
have more time for quality reviews we

00:03:20,220 --> 00:03:25,959
introduced a bot that is called legal

00:03:22,900 --> 00:03:28,799
auto that checks the submissions for

00:03:25,959 --> 00:03:32,560
changed licenses and if the license is

00:03:28,799 --> 00:03:37,540
in compliance to our policies I mean for

00:03:32,560 --> 00:03:41,790
example being GPL or MIT or PSD and what

00:03:37,540 --> 00:03:41,790
else the open source world has to offer

00:03:41,940 --> 00:03:50,250
we have a call so called a paper checker

00:03:46,060 --> 00:03:52,480
that checks the submitted package to

00:03:50,250 --> 00:03:54,010
that is actually build and they're

00:03:52,480 --> 00:03:57,419
submitted in the project it was

00:03:54,010 --> 00:04:02,349
submitted from and smaller stuff and

00:03:57,419 --> 00:04:06,069
lately also this repo checker will try

00:04:02,349 --> 00:04:08,410
to install the package on an factory and

00:04:06,069 --> 00:04:11,319
see if the package have dependency

00:04:08,410 --> 00:04:14,139
problems of high conflicts or something

00:04:11,319 --> 00:04:17,919
that is actually pretty hard to find for

00:04:14,139 --> 00:04:20,049
human repackage am so very often it's

00:04:17,919 --> 00:04:21,640
just the package that it just did not

00:04:20,049 --> 00:04:24,159
know that it's not impossible that is

00:04:21,640 --> 00:04:26,510
impossible to install because he added a

00:04:24,159 --> 00:04:29,270
requirement to a package he has but as

00:04:26,510 --> 00:04:31,370
yet in factory or fire conflict even

00:04:29,270 --> 00:04:33,470
easier to introduce to some packets you

00:04:31,370 --> 00:04:38,300
don't even know exists and stuff like

00:04:33,470 --> 00:04:40,820
that so so and in the end we have the

00:04:38,300 --> 00:04:46,700
opens of the review team which is seven

00:04:40,820 --> 00:04:50,540
by now I lately up stuff did a bit who

00:04:46,700 --> 00:04:52,700
do review submissions for packaging box

00:04:50,540 --> 00:04:59,830
so they actually do look at the at the

00:04:52,700 --> 00:04:59,830
div and try to to see the problems and

00:05:00,520 --> 00:05:07,400
after all that we our current mechanisms

00:05:05,030 --> 00:05:10,630
are gone so that's basically all we have

00:05:07,400 --> 00:05:13,750
right now so we rely on the packager and

00:05:10,630 --> 00:05:17,030
basically the one submitted the package

00:05:13,750 --> 00:05:20,330
but the problem is that those guys if

00:05:17,030 --> 00:05:23,870
you ask them it's they are fine with the

00:05:20,330 --> 00:05:26,480
package they they knew they know what

00:05:23,870 --> 00:05:31,370
they did and they it's perfectly fine

00:05:26,480 --> 00:05:33,950
that's one of the basic problems so then

00:05:31,370 --> 00:05:38,680
my job after all these reviews is to put

00:05:33,950 --> 00:05:43,040
600 changes a week I remember you in one

00:05:38,680 --> 00:05:47,210
bottle mix it and try to make a nice

00:05:43,040 --> 00:05:50,480
juice out of it and it's really hard to

00:05:47,210 --> 00:05:53,630
know if it will work out or not but the

00:05:50,480 --> 00:05:55,310
user the factory user will use the juice

00:05:53,630 --> 00:05:58,280
right out out of the bottle so I

00:05:55,310 --> 00:06:00,860
basically I pick the ingredients put it

00:05:58,280 --> 00:06:02,660
in the bottle mix it and then give it a

00:06:00,860 --> 00:06:07,030
month to drink this is basically what

00:06:02,660 --> 00:06:10,070
you have to imagine and so it's really

00:06:07,030 --> 00:06:16,100
amazing that we got so far to feel

00:06:10,070 --> 00:06:19,820
monthly so I take what I get it's

00:06:16,100 --> 00:06:23,390
reviewed I accept it I put it in factory

00:06:19,820 --> 00:06:29,060
I wait for factory to to finish building

00:06:23,390 --> 00:06:33,290
the the mix the images see it in QA and

00:06:29,060 --> 00:06:35,060
then see so sometimes the package does

00:06:33,290 --> 00:06:36,380
not even built in factory even though it

00:06:35,060 --> 00:06:39,170
built in the

00:06:36,380 --> 00:06:40,760
project was submitted from which can

00:06:39,170 --> 00:06:45,380
have several reasons I don't want to go

00:06:40,760 --> 00:06:48,560
into sometimes other packages that are

00:06:45,380 --> 00:06:52,700
on first glance unrelated to it fail to

00:06:48,560 --> 00:06:56,650
build like a pipe update breaks vin out

00:06:52,700 --> 00:07:00,890
of out of the blue because women has

00:06:56,650 --> 00:07:04,130
python bindings that are very specific

00:07:00,890 --> 00:07:09,170
to the Python version sometimes it's

00:07:04,130 --> 00:07:11,810
impossible to install because some some

00:07:09,170 --> 00:07:15,590
library interfaces changed without the

00:07:11,810 --> 00:07:19,610
repo checker noticing and sometimes it's

00:07:15,590 --> 00:07:24,970
just like that so it's just basically my

00:07:19,610 --> 00:07:28,040
picture for a bloody mess sometimes I

00:07:24,970 --> 00:07:33,980
get up and look what happened overnight

00:07:28,040 --> 00:07:41,210
and I think yeah basically speechless in

00:07:33,980 --> 00:07:44,930
my thoughts and the the ways that fact

00:07:41,210 --> 00:07:48,080
we can break are endless I had to learn

00:07:44,930 --> 00:07:50,090
that and it whenever I thought I have

00:07:48,080 --> 00:07:55,010
seen everything then something new comes

00:07:50,090 --> 00:07:58,760
along and so the problem is if you

00:07:55,010 --> 00:08:00,950
accepted 600 changes mixed it gave it

00:07:58,760 --> 00:08:03,770
someone to drink and he said mmm it's a

00:08:00,950 --> 00:08:05,570
bit salty and you have to find out which

00:08:03,770 --> 00:08:11,510
of the ingredients which of the

00:08:05,570 --> 00:08:13,610
ingredients cause that it is it requires

00:08:11,510 --> 00:08:19,910
a lot of experience to get at all and

00:08:13,610 --> 00:08:25,010
even then it's pretty hard so just one

00:08:19,910 --> 00:08:28,130
example that comes to my mind is the GMP

00:08:25,010 --> 00:08:31,370
library I don't know who you who often

00:08:28,130 --> 00:08:35,570
you know that it's some some math math

00:08:31,370 --> 00:08:39,620
stuff was changed very slightly just

00:08:35,570 --> 00:08:42,260
some optimization enablement and all of

00:08:39,620 --> 00:08:44,620
factory-built fine but the live cds did

00:08:42,260 --> 00:08:46,940
not boot oh I actually I should have

00:08:44,620 --> 00:08:48,310
actually I should have told the story

00:08:46,940 --> 00:08:51,279
from the other way

00:08:48,310 --> 00:08:54,040
but you you figure it like the the thing

00:08:51,279 --> 00:08:58,529
was that the tool that generates the

00:08:54,040 --> 00:09:01,029
live CD ii need addies used some

00:08:58,529 --> 00:09:03,460
mathematical expression to calculate how

00:09:01,029 --> 00:09:07,000
much free space it should reserve while

00:09:03,460 --> 00:09:10,750
booting and this always return 0 because

00:09:07,000 --> 00:09:16,810
of back in that in the tool that use the

00:09:10,750 --> 00:09:19,000
library so but my my task is always

00:09:16,810 --> 00:09:20,860
finding out why the live CDs don't build

00:09:19,000 --> 00:09:23,350
and then I have to dig into all the

00:09:20,860 --> 00:09:24,730
pieces and in the end when I'm done I

00:09:23,350 --> 00:09:28,300
can tell the one who submitted the

00:09:24,730 --> 00:09:30,339
library here your library cost the lives

00:09:28,300 --> 00:09:32,890
it is no longer to build and then he

00:09:30,339 --> 00:09:35,770
will tell me that it's yeah that he knew

00:09:32,890 --> 00:09:37,870
that already but that the back can can

00:09:35,770 --> 00:09:41,680
be cost but he did not expect anyone to

00:09:37,870 --> 00:09:48,220
use that function but it's already done

00:09:41,680 --> 00:09:50,230
then so the solutions I came up with and

00:09:48,220 --> 00:09:52,089
interestingly enough fedora at the same

00:09:50,230 --> 00:09:57,730
time independently of each other I

00:09:52,089 --> 00:10:02,740
assume what we both call rings and it

00:09:57,730 --> 00:10:09,250
means splitting the huge factory base

00:10:02,740 --> 00:10:15,310
into subsets and so the first actually

00:10:09,250 --> 00:10:20,800
is the zeroth and ring is the bootstrap

00:10:15,310 --> 00:10:25,950
of opensuse it contains of 96 packages

00:10:20,800 --> 00:10:30,310
like GCC binutils G lipsy ticker bash

00:10:25,950 --> 00:10:33,160
really the root of all evil you can't

00:10:30,310 --> 00:10:37,300
remove any of them without causing the

00:10:33,160 --> 00:10:40,330
bootstraps hiker to fail but this it is

00:10:37,300 --> 00:10:41,770
building in a cycle so it's really you

00:10:40,330 --> 00:10:43,870
can't say where it starts and where it

00:10:41,770 --> 00:10:45,760
ends at the build server some when

00:10:43,870 --> 00:10:48,850
decides that it's now done with building

00:10:45,760 --> 00:10:53,770
this but it's again it can build for a

00:10:48,850 --> 00:10:57,459
while and on top of that there's the the

00:10:53,770 --> 00:10:59,340
ring one that is minimal X it generates

00:10:57,459 --> 00:11:02,490
a test DVD with an

00:10:59,340 --> 00:11:06,410
with a very minimal X that basically can

00:11:02,490 --> 00:11:11,610
run an xterm on ice vm and it contains

00:11:06,410 --> 00:11:14,430
several I mean 941 extra packages the ex

00:11:11,610 --> 00:11:19,860
staff yes staff the staff needed for the

00:11:14,430 --> 00:11:23,970
DVD a TV for example to build ability

00:11:19,860 --> 00:11:28,500
actual DVD plenty of pipes and plenty of

00:11:23,970 --> 00:11:30,420
pearl and stuff like that so it's this

00:11:28,500 --> 00:11:34,800
is the graph of how long it takes to

00:11:30,420 --> 00:11:37,970
rebuild that pack adapt project and this

00:11:34,800 --> 00:11:42,420
actually does start somewhere somewhere

00:11:37,970 --> 00:11:44,850
here and it's done after almost six

00:11:42,420 --> 00:11:48,920
hours if we rebuild this from scratch

00:11:44,850 --> 00:11:54,660
and with having unlimited workers which

00:11:48,920 --> 00:11:59,640
it's unlikely so on top of these two

00:11:54,660 --> 00:12:04,800
there's two more rings that I create it

00:11:59,640 --> 00:12:09,360
but only in a very raw state that is

00:12:04,800 --> 00:12:13,350
main desktops and DVD the first

00:12:09,360 --> 00:12:18,510
mentioned has 875 packages and contains

00:12:13,350 --> 00:12:20,430
KDE and gnome stuff that is used to were

00:12:18,510 --> 00:12:23,430
required to build the current norm and

00:12:20,430 --> 00:12:28,320
Katie live CDs and on top of that I

00:12:23,430 --> 00:12:30,570
another almost 2,000 packages no 1200

00:12:28,320 --> 00:12:33,450
packages that are required to build the

00:12:30,570 --> 00:12:39,630
current opens with a DVD that is the one

00:12:33,450 --> 00:12:43,620
we ship as my stone 0a1 so but if you do

00:12:39,630 --> 00:12:48,300
your mouth this leaves over set over

00:12:43,620 --> 00:12:51,480
4,000 packages as nice to have as

00:12:48,300 --> 00:12:54,180
contrib as actually removing one of them

00:12:51,480 --> 00:12:57,120
would not be noticed by that many people

00:12:54,180 --> 00:13:02,490
but they are still there and they still

00:12:57,120 --> 00:13:06,420
can break but the consequence is we have

00:13:02,490 --> 00:13:11,730
to limit our scope if we want to

00:13:06,420 --> 00:13:12,680
continue growing that number so the idea

00:13:11,730 --> 00:13:15,740
was

00:13:12,680 --> 00:13:21,860
that we have just one ring of fire

00:13:15,740 --> 00:13:26,120
that's actually some some us attraction

00:13:21,860 --> 00:13:30,230
and limit our testing to the ones that

00:13:26,120 --> 00:13:34,209
are really important and create

00:13:30,230 --> 00:13:36,560
so-called staging projects these are

00:13:34,209 --> 00:13:39,800
project in the build service that start

00:13:36,560 --> 00:13:45,709
with opens with a factory staging and

00:13:39,800 --> 00:13:48,620
then currently have a letter it's two to

00:13:45,709 --> 00:13:50,570
talk to each other if some of em

00:13:48,620 --> 00:13:56,230
something breaks it breaks in a or in

00:13:50,570 --> 00:13:59,330
beo and see and I need cues submissions

00:13:56,230 --> 00:14:02,720
independently of each other and creates

00:13:59,330 --> 00:14:05,120
groups of submissions that are reviewed

00:14:02,720 --> 00:14:07,070
together are tested together and are and

00:14:05,120 --> 00:14:10,670
that's the most important part accepted

00:14:07,070 --> 00:14:13,640
together so if I for example the first

00:14:10,670 --> 00:14:16,760
one this is the only one that also

00:14:13,640 --> 00:14:19,550
includes the bootstrap packages if I

00:14:16,760 --> 00:14:21,800
test bash you I'd ncurses together in

00:14:19,550 --> 00:14:24,500
one staging project it means it has

00:14:21,800 --> 00:14:28,250
built one test DVD with one minimal eggs

00:14:24,500 --> 00:14:31,610
and it was tested that one that one DVD

00:14:28,250 --> 00:14:33,830
was tested and I can't say that what

00:14:31,610 --> 00:14:35,360
accepting them individually would be

00:14:33,830 --> 00:14:37,670
good enough because i only tested this

00:14:35,360 --> 00:14:41,630
mix so i also accept them as this mix

00:14:37,670 --> 00:14:45,560
and you see there are some empty ones

00:14:41,630 --> 00:14:49,220
and some more some larger ones this has

00:14:45,560 --> 00:14:52,550
to do with how how interconnected the

00:14:49,220 --> 00:14:59,540
packages are thus for example in this

00:14:52,550 --> 00:15:02,779
scenario here we had the c1 was adopting

00:14:59,540 --> 00:15:06,800
yes to the new system d and we have the

00:15:02,779 --> 00:15:09,649
h1 which is adopting just to the new

00:15:06,800 --> 00:15:12,860
branding and all these components of

00:15:09,649 --> 00:15:18,440
just have to be changed for the

00:15:12,860 --> 00:15:21,529
installation to work again it's it's

00:15:18,440 --> 00:15:24,140
pretty hard to believe that it's so many

00:15:21,529 --> 00:15:25,050
different aspects of a distribution that

00:15:24,140 --> 00:15:27,750
have to

00:15:25,050 --> 00:15:30,480
fight together but it's actually the

00:15:27,750 --> 00:15:32,490
problem we had before that it's that you

00:15:30,480 --> 00:15:33,660
take one and then it's broken and then

00:15:32,490 --> 00:15:36,420
you have to wait for another one then

00:15:33,660 --> 00:15:38,700
it's broken again then go on and go on

00:15:36,420 --> 00:15:40,500
go on and in this scenario with the

00:15:38,700 --> 00:15:42,500
staging projects we have a broken

00:15:40,500 --> 00:15:46,170
staging project and we leave these

00:15:42,500 --> 00:15:50,579
packages they are till we have a mix

00:15:46,170 --> 00:15:53,279
that works as a whole and only then we

00:15:50,579 --> 00:15:55,170
go into factory and then we have a new

00:15:53,279 --> 00:15:58,410
base that the new staging project is

00:15:55,170 --> 00:16:03,899
projects work on these staging projects

00:15:58,410 --> 00:16:06,209
have actually copies a factory they they

00:16:03,899 --> 00:16:07,649
are not affected by factory changes so

00:16:06,209 --> 00:16:11,839
they basically are branches at a

00:16:07,649 --> 00:16:15,870
specific point in time and we have a

00:16:11,839 --> 00:16:18,870
good and tested factory base we fork the

00:16:15,870 --> 00:16:21,600
thousand something pepper 941 packages

00:16:18,870 --> 00:16:23,100
test the changes on top of them and if

00:16:21,600 --> 00:16:27,300
it's good enough we merge that branch

00:16:23,100 --> 00:16:33,120
and for each of these letters we do it

00:16:27,300 --> 00:16:37,050
individually so how it was done in

00:16:33,120 --> 00:16:41,750
detail is that factory submissions get a

00:16:37,050 --> 00:16:44,459
new reviewer it's an yes concept and

00:16:41,750 --> 00:16:48,660
this review is called factory staging

00:16:44,459 --> 00:16:56,839
this is currently me and tomorrow trial

00:16:48,660 --> 00:17:02,130
yeah it's a group of people and the

00:16:56,839 --> 00:17:04,559
staging plugin it's lists what does up

00:17:02,130 --> 00:17:08,490
what submissions to ring packages are

00:17:04,559 --> 00:17:12,809
pending and then one of us has to pick a

00:17:08,490 --> 00:17:14,819
letter basically so we you look at the

00:17:12,809 --> 00:17:19,290
screen and then I say okay yes country

00:17:14,819 --> 00:17:23,429
belongs to the last XE so I put just to

00:17:19,290 --> 00:17:26,400
country and see an a base and a and ntp

00:17:23,429 --> 00:17:29,790
gets in d because it's free the staging

00:17:26,400 --> 00:17:32,429
project and so I we have a queue of

00:17:29,790 --> 00:17:35,130
submissions I swat them into one of the

00:17:32,429 --> 00:17:36,740
staging projects and then the machine

00:17:35,130 --> 00:17:41,330
the machine

00:17:36,740 --> 00:17:44,059
news after that so the staging project

00:17:41,330 --> 00:17:47,210
built DVDs as I mentioned already these

00:17:44,059 --> 00:17:52,100
dvds are automatically fetched into open

00:17:47,210 --> 00:17:55,100
QA open so dark and they are tested as a

00:17:52,100 --> 00:17:56,750
staging DVD and we only have one test

00:17:55,100 --> 00:18:01,429
for them running there is minimal X

00:17:56,750 --> 00:18:04,730
which it's it's a bit biased here

00:18:01,429 --> 00:18:07,250
because it's always eat IM see that is

00:18:04,730 --> 00:18:09,410
wet here but usually it's only one or

00:18:07,250 --> 00:18:15,160
two staging projects that are red and

00:18:09,410 --> 00:18:21,340
the rest of screen and but you can see

00:18:15,160 --> 00:18:26,780
here you trying to let us again CB d I a

00:18:21,340 --> 00:18:32,450
and so you can see what staging projects

00:18:26,780 --> 00:18:35,750
are show what problems so i would go now

00:18:32,450 --> 00:18:38,270
and check what is broken in h if it's a

00:18:35,750 --> 00:18:42,050
yes trash or an X crash or whatever and

00:18:38,270 --> 00:18:45,280
then try to yeah do it back report of

00:18:42,050 --> 00:18:45,280
something so I question

00:18:53,549 --> 00:18:58,240
so you use a letter one of these

00:18:56,080 --> 00:19:01,360
projects for a set of stuff you want to

00:18:58,240 --> 00:19:04,389
test together do you and then once

00:19:01,360 --> 00:19:06,580
that's done that's kind of done and you

00:19:04,389 --> 00:19:09,700
can reuse that letter for the next set

00:19:06,580 --> 00:19:13,179
of stuff that's how you do yeah so I

00:19:09,700 --> 00:19:17,259
started with having meaningful names for

00:19:13,179 --> 00:19:20,080
these projects and then I had to throw

00:19:17,259 --> 00:19:23,799
away everything in them and do something

00:19:20,080 --> 00:19:29,470
else but in the end I we came around

00:19:23,799 --> 00:19:31,809
with letters and I also rebrand them

00:19:29,470 --> 00:19:34,419
once they are accepted or merged into

00:19:31,809 --> 00:19:40,450
factory I i we branch factory and then

00:19:34,419 --> 00:19:44,200
put new chains on top so for acceptance

00:19:40,450 --> 00:19:47,499
the ring packages need more than the non

00:19:44,200 --> 00:19:50,820
ring packages so the non ring packages

00:19:47,499 --> 00:19:53,730
are right now those that are not in

00:19:50,820 --> 00:19:57,730
bootstrap or minimal eggs those are

00:19:53,730 --> 00:20:01,019
ignored they they just take what we have

00:19:57,730 --> 00:20:06,159
before what I mentioned the Autobots and

00:20:01,019 --> 00:20:09,129
the the ring packages have to have to

00:20:06,159 --> 00:20:11,470
fulfill several requires that is that

00:20:09,129 --> 00:20:16,659
all packages in that project have to

00:20:11,470 --> 00:20:20,559
build I mean like all of them then the

00:20:16,659 --> 00:20:23,409
test DVD has to build the test DVD has

00:20:20,559 --> 00:20:30,639
also to pass open QA tests one hundred

00:20:23,409 --> 00:20:33,039
percent and there can't be any requests

00:20:30,639 --> 00:20:36,279
some can't be new a request for the pack

00:20:33,039 --> 00:20:38,860
for the package that's in in OBS terms

00:20:36,279 --> 00:20:43,570
this is called superseded superseding

00:20:38,860 --> 00:20:46,559
requests so if some bash is submitted it

00:20:43,570 --> 00:20:50,379
is tested but if then a new bash is

00:20:46,559 --> 00:20:56,279
submitted it invalidates the old patch

00:20:50,379 --> 00:20:56,279
and then I can't accept the a

00:20:56,640 --> 00:21:04,050
so we have some dashboard I actually put

00:20:59,460 --> 00:21:09,240
it an e/m in there but you see in italic

00:21:04,050 --> 00:21:11,250
there so it's it's just a script and the

00:21:09,240 --> 00:21:13,890
color code is actually added just for

00:21:11,250 --> 00:21:17,580
the presentation so but we have it

00:21:13,890 --> 00:21:22,650
checks the letters and you can see in f4

00:21:17,580 --> 00:21:24,630
example there's the packet the project

00:21:22,650 --> 00:21:27,000
has built the project has been tested

00:21:24,630 --> 00:21:30,510
but they are still reviews pending from

00:21:27,000 --> 00:21:33,420
the from the reviewers I talked about

00:21:30,510 --> 00:21:35,040
the g is acceptable everything all of

00:21:33,420 --> 00:21:39,630
the conditions i just mentioned are

00:21:35,040 --> 00:21:42,150
fulfilled and h shows not just failed

00:21:39,630 --> 00:21:45,030
packages and then build failures but

00:21:42,150 --> 00:21:49,410
also test areas in open QA s what the

00:21:45,030 --> 00:21:54,090
tool tells me and then i can i can or

00:21:49,410 --> 00:21:57,480
cannot look into details why so and then

00:21:54,090 --> 00:21:59,910
i would go seeing g is acceptable and

00:21:57,480 --> 00:22:10,590
actually accepted and then it's merged

00:21:59,910 --> 00:22:12,930
into factory or five as once so so this

00:22:10,590 --> 00:22:16,500
basically means that my role is no

00:22:12,930 --> 00:22:18,900
longer the one mixing the bottle but I'm

00:22:16,500 --> 00:22:23,460
actually the one who says most of the

00:22:18,900 --> 00:22:26,160
time no but because I I have the

00:22:23,460 --> 00:22:29,460
informations now I can actually tell

00:22:26,160 --> 00:22:31,110
them it is not working I can actually

00:22:29,460 --> 00:22:33,480
fill it around bit with the staging

00:22:31,110 --> 00:22:36,720
project if I accepted 10 in one project

00:22:33,480 --> 00:22:39,930
I can look at the failures and split out

00:22:36,720 --> 00:22:42,300
those that are most likely the cause and

00:22:39,930 --> 00:22:45,120
put them in an extra letter and then can

00:22:42,300 --> 00:22:49,170
accept the other one if they succeed

00:22:45,120 --> 00:22:51,540
without the disturbing factor and I can

00:22:49,170 --> 00:22:53,550
just decline things and tell them here's

00:22:51,540 --> 00:22:56,550
the open q8 has that failed check

00:22:53,550 --> 00:22:58,890
yourself download the iso install them

00:22:56,550 --> 00:23:01,280
locally whatever you'd want to do but

00:22:58,890 --> 00:23:06,140
it's not going into factory and that's

00:23:01,280 --> 00:23:07,740
lead to the fact that we have no

00:23:06,140 --> 00:23:12,390
regressions

00:23:07,740 --> 00:23:15,210
in factory worth mentioning in 2014 even

00:23:12,390 --> 00:23:18,270
though I have to admit that after i put

00:23:15,210 --> 00:23:23,900
this slide into my presentation my

00:23:18,270 --> 00:23:30,090
laptop kainis behaves cursed but as

00:23:23,900 --> 00:23:34,650
unrelated I tell you that so the user

00:23:30,090 --> 00:23:39,030
exactly another thing is there are

00:23:34,650 --> 00:23:43,200
several sorry so are we done with this

00:23:39,030 --> 00:23:47,640
whole is factory usable again what is

00:23:43,200 --> 00:23:51,330
wrong sorry is usability of factory

00:23:47,640 --> 00:23:54,120
improved unfortunately we are not even

00:23:51,330 --> 00:23:58,070
close to it because they can as I just

00:23:54,120 --> 00:23:58,070
mentioned still so many things go wrong

00:24:00,320 --> 00:24:07,590
actually as I mentioned we only run one

00:24:03,120 --> 00:24:11,190
test for this test DVD but for for

00:24:07,590 --> 00:24:14,480
rolling release for a factory you we

00:24:11,190 --> 00:24:18,240
have to test a lot more and this is the

00:24:14,480 --> 00:24:21,059
open QA display of the current the

00:24:18,240 --> 00:24:23,460
previous snapshot or factory and you

00:24:21,059 --> 00:24:27,000
show you see there's a lot of red all

00:24:23,460 --> 00:24:30,840
the DVD tests what you don't know is

00:24:27,000 --> 00:24:33,929
that the the number to reach something

00:24:30,840 --> 00:24:37,590
like 40 and it reaches like 10 after 10

00:24:33,929 --> 00:24:41,910
tests that it finds a fatal test and

00:24:37,590 --> 00:24:45,540
exits because something is fishy in the

00:24:41,910 --> 00:24:47,940
in the actual installation process once

00:24:45,540 --> 00:24:50,610
there is a slide show and just but we

00:24:47,940 --> 00:24:53,610
don't know because the minimal X test

00:24:50,610 --> 00:24:56,160
does not check the slide show but the

00:24:53,610 --> 00:24:58,920
open QA test for the real thing test

00:24:56,160 --> 00:25:02,790
that and so there are thumb green and

00:24:58,920 --> 00:25:07,559
there are some some gray actually like

00:25:02,790 --> 00:25:10,080
44 45 and there's yeah but in the end

00:25:07,559 --> 00:25:13,410
it's still not good enough to be

00:25:10,080 --> 00:25:19,580
released as a milestone 20 at least not

00:25:13,410 --> 00:25:21,920
I I come to this later so

00:25:19,580 --> 00:25:24,560
what can go wrong still is that Katie

00:25:21,920 --> 00:25:27,020
and no man up or and even more are not

00:25:24,560 --> 00:25:28,970
part of the staging project so they are

00:25:27,020 --> 00:25:31,580
not tested so we just ignore them and

00:25:28,970 --> 00:25:33,980
accept them just as we used to we don't

00:25:31,580 --> 00:25:36,140
test ftp installations we don't test

00:25:33,980 --> 00:25:39,080
life and citations we don't test

00:25:36,140 --> 00:25:41,710
applications in general like firefox

00:25:39,080 --> 00:25:43,760
camp can we be completely busted Oh

00:25:41,710 --> 00:25:47,030
legal office can be completely busted

00:25:43,760 --> 00:25:50,450
stuff like that all will appear in

00:25:47,030 --> 00:25:52,640
factory and still be broken and in the

00:25:50,450 --> 00:25:55,550
end for me as a factory user this is by

00:25:52,640 --> 00:25:57,950
the way a factory laptop it does not

00:25:55,550 --> 00:26:00,080
really matter if the installation where

00:25:57,950 --> 00:26:02,210
the reinstallation would work because if

00:26:00,080 --> 00:26:04,040
if I can't show you this presentation

00:26:02,210 --> 00:26:05,330
right now I can't show you the

00:26:04,040 --> 00:26:11,690
presentation no matter what the reason

00:26:05,330 --> 00:26:14,090
was and the whole mixture of two staging

00:26:11,690 --> 00:26:16,760
projects that work green on their own

00:26:14,090 --> 00:26:20,540
can still go wrong even though the

00:26:16,760 --> 00:26:23,390
chances are much much much less but

00:26:20,540 --> 00:26:27,770
still because we branch at some point

00:26:23,390 --> 00:26:33,230
and then rebase there's an open window

00:26:27,770 --> 00:26:37,340
to for regressions to slip in so so what

00:26:33,230 --> 00:26:39,950
we need is more hands-on open QA as you

00:26:37,340 --> 00:26:43,790
can see open ke tarah you can't see it

00:26:39,950 --> 00:26:48,980
here but here there's a lot of tests

00:26:43,790 --> 00:26:52,150
that need to be to be checked and then

00:26:48,980 --> 00:26:54,950
needs to be more tests actually we have

00:26:52,150 --> 00:26:57,260
panhard i already had a quite good

00:26:54,950 --> 00:27:00,770
coverage and the opens of the team

00:26:57,260 --> 00:27:03,710
increased it but it still has a lot of

00:27:00,770 --> 00:27:05,330
potential and I think Ludwick will have

00:27:03,710 --> 00:27:08,050
a workshop tomorrow on how to write

00:27:05,330 --> 00:27:11,360
tests i invite you to to join that

00:27:08,050 --> 00:27:14,320
because this is if you know a bit pearl

00:27:11,360 --> 00:27:18,740
it's really easy to write a test and

00:27:14,320 --> 00:27:21,170
it's everything that we test before it's

00:27:18,740 --> 00:27:25,600
released does not is not will not be

00:27:21,170 --> 00:27:26,720
buggy i plain you tell you that and

00:27:25,600 --> 00:27:28,490
warmth

00:27:26,720 --> 00:27:31,190
tests have been run they need to be

00:27:28,490 --> 00:27:33,289
reported for fire tinder box Allah and

00:27:31,190 --> 00:27:41,809
most of the time I don't have the time

00:27:33,289 --> 00:27:45,020
so I just leave them and the the real

00:27:41,809 --> 00:27:48,620
problem is that it's you need to really

00:27:45,020 --> 00:27:52,490
look at the tests and and see if open QA

00:27:48,620 --> 00:27:54,710
is the problem or if the if the code is

00:27:52,490 --> 00:27:58,909
the problem because the way open QA

00:27:54,710 --> 00:28:03,620
works can go wrong at Point so it checks

00:27:58,909 --> 00:28:06,620
the screenshot and the mine and if the

00:28:03,620 --> 00:28:09,049
screenshot looks different then it will

00:28:06,620 --> 00:28:12,169
be a failure but this might not mean

00:28:09,049 --> 00:28:14,179
that the failure is only because the

00:28:12,169 --> 00:28:16,760
screen changed in a way that the human

00:28:14,179 --> 00:28:18,500
being would not would not consider a

00:28:16,760 --> 00:28:22,309
buck for example right now they ask

00:28:18,500 --> 00:28:26,870
theme changed from greater black on grey

00:28:22,309 --> 00:28:28,760
to white on black or something I ok no

00:28:26,870 --> 00:28:33,080
Lisa no designers here I can call it

00:28:28,760 --> 00:28:35,390
white that the this is not actually a

00:28:33,080 --> 00:28:37,669
back by the feature but open case is

00:28:35,390 --> 00:28:40,850
that a failure and you need to adopt the

00:28:37,669 --> 00:28:43,039
screenshot needles or the needles is

00:28:40,850 --> 00:28:48,700
there open you a time for for their part

00:28:43,039 --> 00:28:53,230
of the screen so what the next steps are

00:28:48,700 --> 00:28:56,659
is or the next steps are that we

00:28:53,230 --> 00:28:59,750
actually replace factory with a tested

00:28:56,659 --> 00:29:04,039
factory and have the what we have right

00:28:59,750 --> 00:29:06,289
now as factory as an interim state we

00:29:04,039 --> 00:29:10,490
have an opens with a factory to test

00:29:06,289 --> 00:29:12,620
project that factory releases into that

00:29:10,490 --> 00:29:15,049
is tested and from there it will be

00:29:12,620 --> 00:29:17,510
published into the to the repository

00:29:15,049 --> 00:29:22,549
that users would actually use but only

00:29:17,510 --> 00:29:25,580
some one some requirements on that

00:29:22,549 --> 00:29:29,690
snapshot are fulfilled like open QA

00:29:25,580 --> 00:29:31,760
being green and we won't having a nice

00:29:29,690 --> 00:29:34,159
dashboard that you can see as a factory

00:29:31,760 --> 00:29:36,980
user how factor it looks like at the

00:29:34,159 --> 00:29:40,230
moment where whether what the problems

00:29:36,980 --> 00:29:41,760
with the current reviews are what

00:29:40,230 --> 00:29:44,280
what the weather what the number of

00:29:41,760 --> 00:29:46,230
requests are what the number of failed

00:29:44,280 --> 00:29:48,510
tests were and stuff like that so we

00:29:46,230 --> 00:29:52,020
think everything you need to use factory

00:29:48,510 --> 00:29:55,110
which is not so much and I'm made a

00:29:52,020 --> 00:30:00,600
smaller graph this morning so it's just

00:29:55,110 --> 00:30:04,200
a joke so to summarize what we've done

00:30:00,600 --> 00:30:07,290
is that the the Rings splitting factory

00:30:04,200 --> 00:30:14,790
in two rings has proven to be really to

00:30:07,290 --> 00:30:16,620
be really worth guelph it we have no we

00:30:14,790 --> 00:30:19,530
have no factory tested yet but we

00:30:16,620 --> 00:30:23,370
believe that it's really not too far

00:30:19,530 --> 00:30:26,100
away so we have so we reached the the

00:30:23,370 --> 00:30:29,190
the the deadline was that we have a

00:30:26,100 --> 00:30:32,580
public open 28 testing factory and

00:30:29,190 --> 00:30:35,190
showing what what it means and discuss

00:30:32,580 --> 00:30:38,610
here what it means to have a factory

00:30:35,190 --> 00:30:40,320
tested just I mean what what are the

00:30:38,610 --> 00:30:47,340
requirements we need your feedback on

00:30:40,320 --> 00:30:51,240
that and we need more hands more people

00:30:47,340 --> 00:30:55,049
to understand the general workflow and

00:30:51,240 --> 00:30:58,320
the general open the queue anus of that

00:30:55,049 --> 00:31:03,150
process because the we have we need

00:30:58,320 --> 00:31:06,630
packages and end users to to wear our

00:31:03,150 --> 00:31:12,480
and let me turn it differently we have

00:31:06,630 --> 00:31:16,950
to move package shares from from from

00:31:12,480 --> 00:31:20,669
Williams to to actual contributors and

00:31:16,950 --> 00:31:23,130
users from victims to pack reporters

00:31:20,669 --> 00:31:28,830
basically eat everyone in that process

00:31:23,130 --> 00:31:31,020
has to shift this role a bit and yeah

00:31:28,830 --> 00:31:37,580
this is the Spanish I promised in the

00:31:31,020 --> 00:31:37,580
previous talk and no spaniels here huh

00:31:38,510 --> 00:31:47,030
this means a mover like all cool alized

00:31:42,240 --> 00:31:52,909
means move your ass basically so just to

00:31:47,030 --> 00:31:53,970
get your connection to so are there any

00:31:52,909 --> 00:31:58,890
question

00:31:53,970 --> 00:32:05,790
or feedback or offers to help or praises

00:31:58,890 --> 00:32:07,440
or so yeah the Rings is an interesting

00:32:05,790 --> 00:32:09,150
idea we have the same problem of too

00:32:07,440 --> 00:32:11,010
many packages and some of which aren't

00:32:09,150 --> 00:32:14,040
very important and everything treated

00:32:11,010 --> 00:32:16,200
the same where's the metadata for that

00:32:14,040 --> 00:32:19,020
living do you put it in packages saying

00:32:16,200 --> 00:32:20,730
this packages part ring 0 and above what

00:32:19,020 --> 00:32:22,710
you just have package lists and if you

00:32:20,730 --> 00:32:24,270
just have lists how do you make sure

00:32:22,710 --> 00:32:27,800
they're internally consistent when

00:32:24,270 --> 00:32:27,800
dependencies change later

00:32:36,820 --> 00:32:44,240
so I after the build service and these

00:32:39,980 --> 00:32:50,779
rings I actually built service project

00:32:44,240 --> 00:32:53,570
and the bootstrap project is a project

00:32:50,779 --> 00:33:03,049
of 96 packages and this is basically the

00:32:53,570 --> 00:33:07,150
metadata and the mini mix is a project

00:33:03,049 --> 00:33:10,730
of 941 packages bank and they they build

00:33:07,150 --> 00:33:13,399
this project builds and as such it's

00:33:10,730 --> 00:33:16,309
guaranteed that it's consistent and I

00:33:13,399 --> 00:33:18,169
haven't mall helper that removes things

00:33:16,309 --> 00:33:22,100
that are no longer necessary sometimes

00:33:18,169 --> 00:33:24,679
requires are dropped so they are so I

00:33:22,100 --> 00:33:26,179
try to keep this minimal as possible so

00:33:24,679 --> 00:33:28,490
package doesn't know what ring it's in

00:33:26,179 --> 00:33:32,690
it's just to find it the project letters

00:33:28,490 --> 00:33:35,990
okay do you use lib dough's or si UD f

00:33:32,690 --> 00:33:38,630
or any of those analysis tools for doing

00:33:35,990 --> 00:33:41,000
dependency sets the bill service offers

00:33:38,630 --> 00:33:42,919
that for me yeah but what is it used

00:33:41,000 --> 00:33:47,059
because it's an np-complete problem it's

00:33:42,919 --> 00:33:50,210
it's hard to do package dependency set

00:33:47,059 --> 00:33:54,649
sums okay I just need the minimal set of

00:33:50,210 --> 00:33:56,210
things so I can use the connected to RAF

00:33:54,649 --> 00:33:58,010
and remove every edge that is not

00:33:56,210 --> 00:34:01,580
connected and then I have an minimum

00:33:58,010 --> 00:34:03,890
it's I don't need in the best subset

00:34:01,580 --> 00:34:07,000
because I know that is I know the

00:34:03,890 --> 00:34:07,000
optimized function right

00:34:14,050 --> 00:34:30,000
I actually left quite some room for

00:34:16,750 --> 00:34:30,000
discussion and questions no further

00:34:38,860 --> 00:34:50,280
so my name is stefan culo so actually my

00:34:47,230 --> 00:34:56,980
talk is I won't be able to publish

00:34:50,280 --> 00:35:02,020
slides for obvious reasons but this is

00:34:56,980 --> 00:35:04,870
the URL of my talk if you want to see

00:35:02,020 --> 00:35:16,780
the slides but you can also check the

00:35:04,870 --> 00:35:19,300
video ok how much more work is said

00:35:16,780 --> 00:35:22,270
causing for you or is it even less

00:35:19,300 --> 00:35:34,690
because you have not backed too many big

00:35:22,270 --> 00:35:37,630
package piles it is a bit actually it's

00:35:34,690 --> 00:35:39,100
used to be a lot more work because I had

00:35:37,630 --> 00:35:43,210
to dig into all kind of different

00:35:39,100 --> 00:35:46,510
formations but now that the dashboard

00:35:43,210 --> 00:35:48,670
script is there I basically called twice

00:35:46,510 --> 00:35:50,980
today these scripts and separate this

00:35:48,670 --> 00:35:55,710
and then i have to debug staging

00:35:50,980 --> 00:35:59,110
projects that I that used to be factory

00:35:55,710 --> 00:36:00,850
debugging and so it's I would say it's

00:35:59,110 --> 00:36:04,900
actually less work because open tray is

00:36:00,850 --> 00:36:07,930
already included in the in the check-in

00:36:04,900 --> 00:36:13,150
process basically so but initially it

00:36:07,930 --> 00:36:15,610
was indeed more work but it's I think it

00:36:13,150 --> 00:36:17,800
will be even less if the tools become

00:36:15,610 --> 00:36:19,930
better and better for example I already

00:36:17,800 --> 00:36:22,600
consider getting an email automatically

00:36:19,930 --> 00:36:25,330
if a staging project becomes acceptable

00:36:22,600 --> 00:36:27,700
or it's definitely failed because right

00:36:25,330 --> 00:36:31,120
now I have to pull it quite some time

00:36:27,700 --> 00:36:32,620
today to see if some something changed

00:36:31,120 --> 00:36:38,070
or some some you feel I have a little

00:36:32,620 --> 00:36:41,970
stuff like that so as you mentioned when

00:36:38,070 --> 00:36:44,740
things finally come together in factory

00:36:41,970 --> 00:36:48,820
although things work in station project

00:36:44,740 --> 00:36:50,980
a and B there's a remaining risk that it

00:36:48,820 --> 00:36:56,369
blows up when they finally merge

00:36:50,980 --> 00:36:59,340
um are you just accepting that s the

00:36:56,369 --> 00:37:03,190
well leftover risk to deal with it or

00:36:59,340 --> 00:37:04,980
are you looking at eventually

00:37:03,190 --> 00:37:08,010
serializing the process and saying

00:37:04,980 --> 00:37:10,780
things don't go into factory until there

00:37:08,010 --> 00:37:17,050
until there is another final build with

00:37:10,780 --> 00:37:24,330
the two merged ranges let me show this

00:37:17,050 --> 00:37:27,160
slide you will not let see it takes

00:37:24,330 --> 00:37:31,660
theoretically the minimum time to build

00:37:27,160 --> 00:37:34,660
a ring is about six hours and that does

00:37:31,660 --> 00:37:38,410
not include the testing and does not

00:37:34,660 --> 00:37:40,830
include my polling so the what you're

00:37:38,410 --> 00:37:44,140
asking for would mean to wait another

00:37:40,830 --> 00:37:46,960
day for something to accept it never let

00:37:44,140 --> 00:37:51,880
me finish and the the main problem is

00:37:46,960 --> 00:37:53,920
that while this goes on the developers

00:37:51,880 --> 00:37:56,730
are actually working on it so the

00:37:53,920 --> 00:37:59,050
chances are high that I get a new yes

00:37:56,730 --> 00:38:02,740
why this is going on and then I have to

00:37:59,050 --> 00:38:04,960
discard everything again and then wait

00:38:02,740 --> 00:38:07,660
another two days that might in these two

00:38:04,960 --> 00:38:10,359
days there might be see finished and

00:38:07,660 --> 00:38:12,310
then I would have to start over again so

00:38:10,359 --> 00:38:16,240
I would never finish and that that is

00:38:12,310 --> 00:38:18,400
way too much to ask for for a very small

00:38:16,240 --> 00:38:20,619
risk actually right I mean that's I'm

00:38:18,400 --> 00:38:22,150
very familiar with these problems of of

00:38:20,619 --> 00:38:24,940
staging and stuff so that's why I'm

00:38:22,150 --> 00:38:28,390
asking are we just accepting this final

00:38:24,940 --> 00:38:30,750
risk as this is the cost of the staging

00:38:28,390 --> 00:38:37,359
model and will live with it and then

00:38:30,750 --> 00:38:39,880
somebody probably you will fix the

00:38:37,359 --> 00:38:42,369
carnage of the explosion when it happens

00:38:39,880 --> 00:38:44,320
although it will happen probably less

00:38:42,369 --> 00:38:48,280
often than we had in the old model I

00:38:44,320 --> 00:38:52,660
grant that but somebody will still have

00:38:48,280 --> 00:38:56,220
to clean up when those two things come

00:38:52,660 --> 00:39:00,010
together and it does explode yes the

00:38:56,220 --> 00:39:05,740
other thing is that the

00:39:00,010 --> 00:39:10,570
the if it happens I still I still know

00:39:05,740 --> 00:39:14,770
what letters were accepted and keine can

00:39:10,570 --> 00:39:17,430
backtrack more easily what happened

00:39:14,770 --> 00:39:20,190
because I have the Rings the Rings are

00:39:17,430 --> 00:39:23,650
basically independent of the staging

00:39:20,190 --> 00:39:27,580
project because I still don't have to

00:39:23,650 --> 00:39:32,770
check all of them I can still say I mean

00:39:27,580 --> 00:39:35,590
I was I think two weeks ago openssl

00:39:32,770 --> 00:39:37,450
change that removed some symbols and it

00:39:35,590 --> 00:39:39,790
was perfectly fine in staging project

00:39:37,450 --> 00:39:41,950
that rebuilds everything but a broken

00:39:39,790 --> 00:39:44,650
factory because factory does not rebuild

00:39:41,950 --> 00:39:47,140
everything so there are still a lot of

00:39:44,650 --> 00:39:49,540
tweaks here and there to do and there's

00:39:47,140 --> 00:39:51,520
osbourne go away but the confidence

00:39:49,540 --> 00:39:54,250
level I have in this whole thing

00:39:51,520 --> 00:39:57,610
increased like nine hundred percent and

00:39:54,250 --> 00:40:01,090
this is I'm not and it will be it will

00:39:57,610 --> 00:40:03,460
be even more for users when when they

00:40:01,090 --> 00:40:05,560
only get what's tested right so but

00:40:03,460 --> 00:40:07,240
because this is only helping me in the

00:40:05,560 --> 00:40:09,340
end this is helping me and they're

00:40:07,240 --> 00:40:13,090
helping me and my communication with the

00:40:09,340 --> 00:40:17,170
developers right so I you is there a

00:40:13,090 --> 00:40:20,860
plan to add functionality where you can

00:40:17,170 --> 00:40:23,560
pull out the last spring or one of the

00:40:20,860 --> 00:40:26,350
two branches that you merged so if you

00:40:23,560 --> 00:40:30,880
if you're merging a and B staging trees

00:40:26,350 --> 00:40:33,220
a and B and then the result is toxic can

00:40:30,880 --> 00:40:35,500
you pull out one of those and then get

00:40:33,220 --> 00:40:38,410
basically immediately back to a good

00:40:35,500 --> 00:40:41,650
state and say sorry be you're gonna have

00:40:38,410 --> 00:40:47,680
to try again or are you planning to just

00:40:41,650 --> 00:40:50,320
fix that in factory then I assume how it

00:40:47,680 --> 00:40:52,180
never happened so far this toxic

00:40:50,320 --> 00:40:55,510
situation and I don't plan to optimize

00:40:52,180 --> 00:40:58,200
for that and so my answer would be we

00:40:55,510 --> 00:40:58,200
wait and see

00:41:00,900 --> 00:41:06,580
so you said you're not you haven't got

00:41:03,820 --> 00:41:11,770
rings for gnome and KDE yet any

00:41:06,580 --> 00:41:15,160
particular reason why the reason why is

00:41:11,770 --> 00:41:18,220
that I want to work down up or from the

00:41:15,160 --> 00:41:21,940
from the base up so I wanted to have

00:41:18,220 --> 00:41:24,670
this process running before I think

00:41:21,940 --> 00:41:28,330
about next steps and the next steps

00:41:24,670 --> 00:41:32,070
don't necessarily have to be KDE and

00:41:28,330 --> 00:41:35,650
gnome because KD ink normal mean another

00:41:32,070 --> 00:41:41,650
19 hours to build and even more to test

00:41:35,650 --> 00:41:43,840
the next steps could also be to do more

00:41:41,650 --> 00:41:46,810
tests with he stayed in liver dvds for

00:41:43,840 --> 00:41:49,450
example the i'm not sure if you were

00:41:46,810 --> 00:41:52,390
served but i just i mentioned that my

00:41:49,450 --> 00:41:56,040
laptop behave weird and the reason it

00:41:52,390 --> 00:42:00,460
behaved behaved was that the update of

00:41:56,040 --> 00:42:04,150
fire of drug food left my clipped a vm

00:42:00,460 --> 00:42:06,390
of my club set up on a vm broken because

00:42:04,150 --> 00:42:10,000
it did not include the driver for

00:42:06,390 --> 00:42:11,980
something in the inner daddy and this is

00:42:10,000 --> 00:42:14,470
something that we do not test with the

00:42:11,980 --> 00:42:18,100
staging dvds and that we only test with

00:42:14,470 --> 00:42:21,910
the factory tested so we could do this

00:42:18,100 --> 00:42:24,760
earlier to catch these bugs earlier but

00:42:21,910 --> 00:42:27,300
we can also say that we rely on the next

00:42:24,760 --> 00:42:30,940
step because the packs will only hit the

00:42:27,300 --> 00:42:33,700
users if it ends in factory tested but

00:42:30,940 --> 00:42:36,460
then again if we catch too few bucks in

00:42:33,700 --> 00:42:38,050
that in the early state we will never

00:42:36,460 --> 00:42:41,230
get a new factory tested and have

00:42:38,050 --> 00:42:48,070
basically just move the level of problem

00:42:41,230 --> 00:42:50,470
we have but the this these these

00:42:48,070 --> 00:42:52,360
thoughts and these these solutions

00:42:50,470 --> 00:42:54,670
solutions to these problems i wanted to

00:42:52,360 --> 00:42:57,510
first discuss once these problem is done

00:42:54,670 --> 00:43:00,490
and this means having the tools for that

00:42:57,510 --> 00:43:03,000
basically running fine and it's we're

00:43:00,490 --> 00:43:03,000
getting there

00:43:15,470 --> 00:43:21,569
so how did you decide what your ring

00:43:18,539 --> 00:43:25,499
sets were is it just you decided nobody

00:43:21,569 --> 00:43:31,519
else gets to choose oh just like with

00:43:25,499 --> 00:43:36,450
everything else ya know it's aight aight

00:43:31,519 --> 00:43:42,480
i push the idea to the factory mailing

00:43:36,450 --> 00:43:46,289
list on on what rings might be and did

00:43:42,480 --> 00:43:48,690
not get any alternative suggestions so i

00:43:46,289 --> 00:43:51,720
tried them and it worked out pretty well

00:43:48,690 --> 00:43:55,109
at least these two I'm not actually the

00:43:51,720 --> 00:43:57,809
the next ring it might make sense to

00:43:55,109 --> 00:44:00,660
split it into first KDE or a first Nome

00:43:57,809 --> 00:44:04,170
and then KDE so yet that you can have

00:44:00,660 --> 00:44:06,420
one stage earlier to see that it failed

00:44:04,170 --> 00:44:08,819
there's the presently quite a big range

00:44:06,420 --> 00:44:10,950
between the minimal serve KD they would

00:44:08,819 --> 00:44:12,839
boot and everything that normally goes

00:44:10,950 --> 00:44:17,549
into the whole desktop it's a whole pile

00:44:12,839 --> 00:44:20,190
of applications sailing yeah it's the

00:44:17,549 --> 00:44:24,390
biggest problem with the next string is

00:44:20,190 --> 00:44:26,549
that it introduced Java and Java is at

00:44:24,390 --> 00:44:29,039
the moment in opensuse impossible to

00:44:26,549 --> 00:44:32,249
bootstrap you have to have java to build

00:44:29,039 --> 00:44:34,289
Java which introduces another problem

00:44:32,249 --> 00:44:36,180
that I don't have a good solution for

00:44:34,289 --> 00:44:38,400
that I discussed it with the Java

00:44:36,180 --> 00:44:47,329
packager and he left the company out

00:44:38,400 --> 00:44:54,150
shortly afterwards so yeah there but

00:44:47,329 --> 00:44:56,450
this is something that I would target at

00:44:54,150 --> 00:44:59,779
some point that to answer that question

00:44:56,450 --> 00:44:59,779
perhaps next year

00:45:05,829 --> 00:45:13,059
ok no more questions then thank you for

00:45:10,790 --> 00:45:13,059

YouTube URL: https://www.youtube.com/watch?v=K-wTVGqKFR8


