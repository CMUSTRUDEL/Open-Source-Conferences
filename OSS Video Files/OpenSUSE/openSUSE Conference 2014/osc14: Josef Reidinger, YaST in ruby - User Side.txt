Title: osc14: Josef Reidinger, YaST in ruby - User Side
Publication date: 2014-04-26
Playlist: openSUSE Conference 2014
Description: 
	I think you already heard that YaST was converted from YCP to ruby. It brings many advantages to developers, but what advantage it brings to YaST users? We will look at better tested code, improved error handling and of course possible improvements that this step allows to do, but that are not yet implemented.
Captions: 
	00:00:00,000 --> 00:00:12,929
okay so I start expect that most of you

00:00:08,610 --> 00:00:21,810
knows that just was converted from ycp

00:00:12,929 --> 00:00:26,490
to obey ycp was open source but property

00:00:21,810 --> 00:00:29,429
used only forest so it's very limited

00:00:26,490 --> 00:00:34,380
language a language that we need to

00:00:29,429 --> 00:00:37,920
maintain there is many benefits for

00:00:34,380 --> 00:00:41,460
developers but I want to talk here about

00:00:37,920 --> 00:00:46,559
benefits for users especially just users

00:00:41,460 --> 00:00:50,520
and show that there is some connections

00:00:46,559 --> 00:00:54,780
between benefits for developers and for

00:00:50,520 --> 00:00:57,329
users probably first thing you may

00:00:54,780 --> 00:01:02,250
notice is that the conversion is almost

00:00:57,329 --> 00:01:07,110
without box we do not add any iPhone

00:01:02,250 --> 00:01:09,240
just two new box that be fixed of course

00:01:07,110 --> 00:01:12,180
at the old box in the US doesn't

00:01:09,240 --> 00:01:16,189
disappear so it's still there but we do

00:01:12,180 --> 00:01:16,189
not increase the mess

00:01:23,270 --> 00:01:34,100
ah ok so the first thing is that apple

00:01:27,920 --> 00:01:37,250
developer means that user vein probably

00:01:34,100 --> 00:01:41,409
you know that just is mostly developed

00:01:37,250 --> 00:01:44,810
by Susa developers I think currently is

00:01:41,409 --> 00:01:52,549
almost only by Susa developers there's

00:01:44,810 --> 00:01:57,679
almost no community members and it's not

00:01:52,549 --> 00:02:00,890
much fun to write in code ycp and what's

00:01:57,679 --> 00:02:04,310
worse if some developer goes the other

00:02:00,890 --> 00:02:08,119
team or left company and it's not so

00:02:04,310 --> 00:02:13,360
easy to find new developers because no

00:02:08,119 --> 00:02:13,360
why outside of the US team knows ycp and

00:02:13,780 --> 00:02:19,579
also whether i want to say we've happy

00:02:16,790 --> 00:02:21,950
developer if developer is really

00:02:19,579 --> 00:02:24,769
dissatisfied with the language and with

00:02:21,950 --> 00:02:27,560
the code he can left even if suicide

00:02:24,769 --> 00:02:30,680
paid him money is not everything and

00:02:27,560 --> 00:02:34,639
sometimes developing guest is early pain

00:02:30,680 --> 00:02:37,400
so we try to minimize this pain and it

00:02:34,639 --> 00:02:41,870
means that you're so vain if we can

00:02:37,400 --> 00:02:45,850
attract new developers both for Susa

00:02:41,870 --> 00:02:49,850
team or the community one it means that

00:02:45,850 --> 00:02:54,170
just will be better and less box more

00:02:49,850 --> 00:02:57,200
features i touch it also in next slide

00:02:54,170 --> 00:03:01,040
because her Bay is known that it allows

00:02:57,200 --> 00:03:03,560
quite fast prototyping that's quite

00:03:01,040 --> 00:03:06,579
opposite to old ycp which is quite

00:03:03,560 --> 00:03:09,380
formal it have types it it it has some

00:03:06,579 --> 00:03:11,510
well-defined structures it's not so easy

00:03:09,380 --> 00:03:14,930
to just start coding you need to create

00:03:11,510 --> 00:03:17,810
some structure you start in orbit it's

00:03:14,930 --> 00:03:21,650
quite easy I will show it on the

00:03:17,810 --> 00:03:25,340
workshop this afternoon about writing

00:03:21,650 --> 00:03:28,310
new urban module just to get impression

00:03:25,340 --> 00:03:31,280
in a ruby in pure obey I it took me

00:03:28,310 --> 00:03:34,310
around two minutes to create module that

00:03:31,280 --> 00:03:36,819
just show some button and and do

00:03:34,310 --> 00:03:39,200
something just as a start and

00:03:36,819 --> 00:03:41,840
just to start for a workshop so it's

00:03:39,200 --> 00:03:44,420
very fast and you know the ICP all of us

00:03:41,840 --> 00:03:48,920
took me some time because there's some

00:03:44,420 --> 00:03:51,860
other stuff that's not so elegant like

00:03:48,920 --> 00:03:55,670
auto tools that almost makes me pain

00:03:51,860 --> 00:03:58,579
because it's not much intuitive language

00:03:55,670 --> 00:04:06,769
m for which is just used in our two

00:03:58,579 --> 00:04:09,950
tools so as I said it's again less box

00:04:06,769 --> 00:04:14,090
because you can quickly fix it and also

00:04:09,950 --> 00:04:20,989
more features we can write it more

00:04:14,090 --> 00:04:24,850
quickly the next step that's change or

00:04:20,989 --> 00:04:27,590
user site is exceptions because old ycp

00:04:24,850 --> 00:04:30,820
doesn't exceptions it always used the

00:04:27,590 --> 00:04:37,610
return code it's a similar like old

00:04:30,820 --> 00:04:40,160
c-in-c you always return but states in

00:04:37,610 --> 00:04:44,360
the return code and sometimes you said

00:04:40,160 --> 00:04:47,570
some our number and so on but the main

00:04:44,360 --> 00:04:49,010
point is that if you want to check if

00:04:47,570 --> 00:04:51,979
something goes wrong you need to

00:04:49,010 --> 00:04:55,190
explicitly check the return value and if

00:04:51,979 --> 00:04:58,789
you forget then you continue and

00:04:55,190 --> 00:05:02,090
probably it breaks later or what is

00:04:58,789 --> 00:05:05,150
sometimes worse in last it doesn't break

00:05:02,090 --> 00:05:08,720
at all so it means everything is fine we

00:05:05,150 --> 00:05:12,409
just finish setting and then you try it

00:05:08,720 --> 00:05:15,560
and you see it's completely garbage and

00:05:12,409 --> 00:05:18,130
you say yes doesn't work maybe the not

00:05:15,560 --> 00:05:22,520
to it maybe just some small bug that

00:05:18,130 --> 00:05:25,669
break something but you don't see it the

00:05:22,520 --> 00:05:29,659
exception the situation is opposite you

00:05:25,669 --> 00:05:33,550
raise exception and if you forget to

00:05:29,659 --> 00:05:37,729
catch it then it goes to top level and

00:05:33,550 --> 00:05:39,409
you asked there is top level catcher of

00:05:37,729 --> 00:05:41,750
exceptions and it shows some right

00:05:39,409 --> 00:05:44,030
window there's internal error some

00:05:41,750 --> 00:05:48,560
exception goes so you already see that

00:05:44,030 --> 00:05:50,440
something is wrong and it have one more

00:05:48,560 --> 00:05:54,460
nice benefit it's

00:05:50,440 --> 00:05:57,760
integration with open QA because in open

00:05:54,460 --> 00:06:02,890
view a you do some settings in installer

00:05:57,760 --> 00:06:06,340
and then do some other tests and with

00:06:02,890 --> 00:06:08,410
old code you just do something and it's

00:06:06,340 --> 00:06:10,150
not so easy to verified it it's early

00:06:08,410 --> 00:06:12,460
correctly set you need to manually

00:06:10,150 --> 00:06:15,100
verify that all software is installed

00:06:12,460 --> 00:06:18,550
everything be set up as expected it's

00:06:15,100 --> 00:06:22,150
correct or localized and so on a lot of

00:06:18,550 --> 00:06:24,880
exceptions if we do not catch the

00:06:22,150 --> 00:06:29,190
exception and handle it somehow then it

00:06:24,880 --> 00:06:32,950
showed her ID window and open q se s so

00:06:29,190 --> 00:06:35,620
hey there is a red pop up we don't have

00:06:32,950 --> 00:06:38,170
it usually so something is wrong and

00:06:35,620 --> 00:06:41,590
that's the time when cooler send me

00:06:38,170 --> 00:06:44,250
email or ping me on IRC and said well

00:06:41,590 --> 00:06:47,920
something is wrong you probably broke

00:06:44,250 --> 00:06:52,600
this module so we do not accept it it

00:06:47,920 --> 00:06:55,060
early helps with catching arrows and the

00:06:52,600 --> 00:06:59,190
benefit for user is there is no hidden

00:06:55,060 --> 00:07:02,380
box if you use exceptions of course in

00:06:59,190 --> 00:07:05,230
when we convert the code we want to

00:07:02,380 --> 00:07:08,200
behave the same so the old code still

00:07:05,230 --> 00:07:10,350
use the return value but if we change

00:07:08,200 --> 00:07:13,540
something and there is a problem in

00:07:10,350 --> 00:07:15,790
Roubaix then it erase exception and we

00:07:13,540 --> 00:07:20,580
see it and we start to use it quite a

00:07:15,790 --> 00:07:20,580
lot exceptions just for this benefit

00:07:22,680 --> 00:07:33,190
other benefit is the turbo is quite well

00:07:26,650 --> 00:07:37,180
known what it means for by CP we write

00:07:33,190 --> 00:07:42,190
the language ourself so we must maintain

00:07:37,180 --> 00:07:45,880
it and to be honest there's there was

00:07:42,190 --> 00:07:48,940
some box and we found it when someone

00:07:45,880 --> 00:07:54,930
new comes to the team I think michalka

00:07:48,940 --> 00:07:57,880
joined the team see ago Sears before and

00:07:54,930 --> 00:08:01,180
as eldest then he tries some features of

00:07:57,880 --> 00:08:04,330
ICP and it doesn't work because there is

00:08:01,180 --> 00:08:09,189
a box some is quite serious

00:08:04,330 --> 00:08:11,139
that can cause the segfault in early

00:08:09,189 --> 00:08:13,780
this situation is different or base used

00:08:11,139 --> 00:08:17,669
for many projects and it's used quite

00:08:13,780 --> 00:08:20,949
heavily in web development with rails so

00:08:17,669 --> 00:08:24,099
the number of bucks are really slow in

00:08:20,949 --> 00:08:27,639
the core library and it's a very good

00:08:24,099 --> 00:08:29,889
tested by community before every release

00:08:27,639 --> 00:08:33,700
there is a lot of guys that tried for

00:08:29,889 --> 00:08:36,370
their web pages today's last less box in

00:08:33,700 --> 00:08:40,209
color library and that's the benefit

00:08:36,370 --> 00:08:41,950
also for acid we can focus on the

00:08:40,209 --> 00:08:45,820
modules and we do not focus on

00:08:41,950 --> 00:08:49,390
developing language just quite nice

00:08:45,820 --> 00:08:52,350
advantage it also means that we can

00:08:49,390 --> 00:08:56,320
attract more more developers because

00:08:52,350 --> 00:08:58,600
when we now hiring new guy for a steam

00:08:56,320 --> 00:09:01,180
you can say we need someone who knows

00:08:58,600 --> 00:09:04,120
will be in the past we cannot say

00:09:01,180 --> 00:09:08,620
someone who knows ycp because we do not

00:09:04,120 --> 00:09:10,959
hire anybody make maybe some old test

00:09:08,620 --> 00:09:14,800
hackers and that left the company and

00:09:10,959 --> 00:09:18,579
want to join but that's a very smaller

00:09:14,800 --> 00:09:22,329
group than Ruby developers and we also

00:09:18,579 --> 00:09:26,380
hope that it attracts some community

00:09:22,329 --> 00:09:29,470
developers because community of fun want

00:09:26,380 --> 00:09:32,320
to learn something and if we offer him

00:09:29,470 --> 00:09:35,230
learn ycp it's cool language but you

00:09:32,320 --> 00:09:38,170
don't use it anywhere it's not so nice

00:09:35,230 --> 00:09:42,279
like if he said hey do something for a

00:09:38,170 --> 00:09:46,180
stand we learn you how to write nice or

00:09:42,279 --> 00:09:50,019
be code and then you can use it for your

00:09:46,180 --> 00:09:52,540
web pages many companies hiring people

00:09:50,019 --> 00:09:58,980
with roby knowledge and it can help you

00:09:52,540 --> 00:10:03,610
in the future and last but not least if

00:09:58,980 --> 00:10:06,970
you just won't be sponsored by Souza if

00:10:03,610 --> 00:10:09,010
she decided to stop sponsoring yes

00:10:06,970 --> 00:10:12,089
development there is bigger chance that

00:10:09,010 --> 00:10:17,710
community can take over the project

00:10:12,089 --> 00:10:19,720
because Ruby it's enough if you know

00:10:17,710 --> 00:10:22,960
how configure system you don't need to

00:10:19,720 --> 00:10:27,000
learn another language so we minimize

00:10:22,960 --> 00:10:27,000
the obstacles for development

00:10:31,480 --> 00:10:37,329
it's quite interesting part that there

00:10:34,240 --> 00:10:40,240
is some language is one part you have

00:10:37,329 --> 00:10:44,410
some language it can be better worse it

00:10:40,240 --> 00:10:50,139
can be more native to write in it or it

00:10:44,410 --> 00:10:52,839
can be some strange paths or but what

00:10:50,139 --> 00:10:55,570
makes the programming language good is

00:10:52,839 --> 00:10:57,550
the ecosystem around if you have

00:10:55,570 --> 00:11:02,610
language it's perfect but you don't have

00:10:57,550 --> 00:11:10,870
debugger you don't have a fire no IDE if

00:11:02,610 --> 00:11:14,440
you don't have the runtime support more

00:11:10,870 --> 00:11:17,829
libraries then that language is almost

00:11:14,440 --> 00:11:23,680
dead because it's just language and

00:11:17,829 --> 00:11:27,100
nothing more and for ycp I think it took

00:11:23,680 --> 00:11:31,199
10 hours just to write debugger for such

00:11:27,100 --> 00:11:34,870
language but very quite horrible and

00:11:31,199 --> 00:11:37,899
with Ruby we get a lot of this stuff for

00:11:34,870 --> 00:11:41,980
free because we are not the one who must

00:11:37,899 --> 00:11:44,649
write it so with Ruby we have Ruby

00:11:41,980 --> 00:11:49,930
debugger there is a lot of profilers

00:11:44,649 --> 00:11:52,750
allows us to optimize the code i can say

00:11:49,930 --> 00:11:56,440
do the story that you get some bug

00:11:52,750 --> 00:12:01,269
report for bootloader that it took eight

00:11:56,440 --> 00:12:03,880
hours to install boot code or a whole

00:12:01,269 --> 00:12:07,720
installation but the booting part that

00:12:03,880 --> 00:12:10,569
took eight hours in installation and

00:12:07,720 --> 00:12:15,819
cost the customer slightly complain that

00:12:10,569 --> 00:12:18,459
it's not so nice and it was early hell

00:12:15,819 --> 00:12:20,019
really hard to debug it because i need

00:12:18,459 --> 00:12:21,940
to check the logs and see the

00:12:20,019 --> 00:12:24,880
differences while this function is

00:12:21,940 --> 00:12:27,550
around at the morning and business at

00:12:24,880 --> 00:12:31,690
the evening so what's happened before at

00:12:27,550 --> 00:12:34,959
the end we found that we do some stupid

00:12:31,690 --> 00:12:39,490
logging with disk and this machine have

00:12:34,959 --> 00:12:43,050
in 10,000 disks so it's slightly special

00:12:39,490 --> 00:12:45,060
but it's a real pain to debug it

00:12:43,050 --> 00:12:47,010
and with Ruby you have the profile you

00:12:45,060 --> 00:12:50,250
can set the customers I have this

00:12:47,010 --> 00:12:53,040
suspicion just run this command and see

00:12:50,250 --> 00:12:55,560
how long it takes or you can integrate

00:12:53,040 --> 00:12:57,930
it profiler so we generate some some

00:12:55,560 --> 00:13:03,149
report and send me and I see what

00:12:57,930 --> 00:13:05,550
functions take so long also would have

00:13:03,149 --> 00:13:12,779
the rubbery and the yzb doesn't have is

00:13:05,550 --> 00:13:15,510
a interactive shell it's IRB maybe you

00:13:12,779 --> 00:13:18,180
know it it allows you to to write some

00:13:15,510 --> 00:13:21,839
comments and I often do it with

00:13:18,180 --> 00:13:25,470
supporting some guys that I need to

00:13:21,839 --> 00:13:27,870
check something so i'll set type RB and

00:13:25,470 --> 00:13:32,430
run these recommends and it shows you

00:13:27,870 --> 00:13:35,550
the results so i see what happened ycp

00:13:32,430 --> 00:13:38,519
it's quite hard and you need to write

00:13:35,550 --> 00:13:41,279
some special client and iron it in

00:13:38,519 --> 00:13:43,529
special way and then attach the logs

00:13:41,279 --> 00:13:48,779
because everything from by CP is written

00:13:43,529 --> 00:13:51,480
to log there is no direct output so it's

00:13:48,779 --> 00:13:54,420
early big improvement and what it means

00:13:51,480 --> 00:13:57,089
for users this infrastructure again

00:13:54,420 --> 00:14:00,870
either debugging so it means faster

00:13:57,089 --> 00:14:03,600
fixing bugs and also improvement of the

00:14:00,870 --> 00:14:06,029
code that means for example speed

00:14:03,600 --> 00:14:08,730
improvement if you complain that some

00:14:06,029 --> 00:14:11,520
modules took ages to write something

00:14:08,730 --> 00:14:14,279
then we can look at it and it's much

00:14:11,520 --> 00:14:16,459
easier to see various exactly the

00:14:14,279 --> 00:14:16,459
problem

00:14:21,240 --> 00:14:29,190
well sharing code is quite big topic

00:14:25,140 --> 00:14:31,190
because there's much products even even

00:14:29,190 --> 00:14:36,240
in the su said that can benefit from

00:14:31,190 --> 00:14:39,740
just quote just lifts for a long time so

00:14:36,240 --> 00:14:43,350
we'd have it handler many corner cases

00:14:39,740 --> 00:14:46,160
like there is some special disc that

00:14:43,350 --> 00:14:49,200
needs some special bit set up in its

00:14:46,160 --> 00:14:51,959
fancy table or there's something but

00:14:49,200 --> 00:14:55,050
notebooks that have some specific MBR

00:14:51,959 --> 00:14:57,690
section of things like that and just

00:14:55,050 --> 00:15:01,160
already contain such code and handle

00:14:57,690 --> 00:15:04,890
such situations so so if you need it

00:15:01,160 --> 00:15:07,589
then you want to reuse this

00:15:04,890 --> 00:15:11,270
functionality and with all the ICP is

00:15:07,589 --> 00:15:14,910
not so easy we do some attempts that

00:15:11,270 --> 00:15:19,260
with exporting why are parallel we had

00:15:14,910 --> 00:15:21,690
via d bus but it's not so easy and there

00:15:19,260 --> 00:15:24,120
is quite a lot of bugs because it's

00:15:21,690 --> 00:15:31,950
another layer it's just layer above

00:15:24,120 --> 00:15:34,170
common just code even yes team goes into

00:15:31,950 --> 00:15:36,089
such troubles because we want to reuse

00:15:34,170 --> 00:15:40,020
functionality between us and we're

00:15:36,089 --> 00:15:42,660
biased and there's a lot of bugs in the

00:15:40,020 --> 00:15:46,560
layer between because we do not call

00:15:42,660 --> 00:15:49,800
directly us but via d bus and it's not

00:15:46,560 --> 00:15:53,399
so easy so if ur b it's much easier to

00:15:49,800 --> 00:15:56,579
share growth you can create module it

00:15:53,399 --> 00:15:58,920
have some nice functionality Rios you

00:15:56,579 --> 00:16:01,680
can set well maybe maybe someone else

00:15:58,920 --> 00:16:04,829
can I use it so I create from it or bear

00:16:01,680 --> 00:16:07,980
library that's used from just module and

00:16:04,829 --> 00:16:12,500
this herbal library can use also the

00:16:07,980 --> 00:16:14,760
other people we already use it for

00:16:12,500 --> 00:16:17,610
registration which is not so interesting

00:16:14,760 --> 00:16:19,829
for opensuse part because you deny just

00:16:17,610 --> 00:16:22,350
open to say but we hope that in future

00:16:19,829 --> 00:16:26,820
more modules will be available as

00:16:22,350 --> 00:16:29,670
library that can be reused and again the

00:16:26,820 --> 00:16:32,699
benefit for users is if the code is used

00:16:29,670 --> 00:16:34,140
by more users by more product it means

00:16:32,699 --> 00:16:37,680
less code

00:16:34,140 --> 00:16:42,090
more time investment in it that means

00:16:37,680 --> 00:16:45,240
also the faster code some features can

00:16:42,090 --> 00:16:47,850
be implemented but by other team because

00:16:45,240 --> 00:16:53,700
they need it so you can get almost for

00:16:47,850 --> 00:16:56,310
free and asked and let's help especially

00:16:53,700 --> 00:16:59,400
asked us s team because we are quite

00:16:56,310 --> 00:17:01,410
small team and there is some other

00:16:59,400 --> 00:17:05,510
things that are bigger and can help us

00:17:01,410 --> 00:17:11,970
with this task if improving the code

00:17:05,510 --> 00:17:15,449
configure stuff yeah and the last part

00:17:11,970 --> 00:17:18,390
is performance there is some discussions

00:17:15,449 --> 00:17:22,589
on this devil mailing list or opens a

00:17:18,390 --> 00:17:26,640
factorial really announced conversion of

00:17:22,589 --> 00:17:32,880
you asked that wow it's that Ruby it's

00:17:26,640 --> 00:17:38,700
low it's 2 gigabytes of memory and many

00:17:32,880 --> 00:17:40,950
other stuff so what was the result we do

00:17:38,700 --> 00:17:43,470
measurement only for memory because

00:17:40,950 --> 00:17:48,120
that's the most interesting stuff for us

00:17:43,470 --> 00:17:53,270
because we have a requirement to allow

00:17:48,120 --> 00:17:57,690
graphical installation in 512 megabytes

00:17:53,270 --> 00:18:00,000
so if you have notebook with such memory

00:17:57,690 --> 00:18:02,640
you can install it opensuse in graphic

00:18:00,000 --> 00:18:05,550
mode there so we measure it and there is

00:18:02,640 --> 00:18:08,790
slightly increase of memory footprint

00:18:05,550 --> 00:18:10,830
but it still fits into it and code is

00:18:08,790 --> 00:18:15,000
not the biggest part usually the most

00:18:10,830 --> 00:18:17,640
memory takes insist which lives in a ram

00:18:15,000 --> 00:18:20,190
and there's some images and so on so

00:18:17,640 --> 00:18:24,540
that usually takes the most of the rum

00:18:20,190 --> 00:18:27,650
in I think it's 300 megabytes to the

00:18:24,540 --> 00:18:33,500
images and some style sheets and in such

00:18:27,650 --> 00:18:33,500
design stuff in graphic installation and

00:18:33,920 --> 00:18:43,680
performance from the time side I think

00:18:40,250 --> 00:18:46,620
feedback is mostly that no one see the

00:18:43,680 --> 00:18:47,789
difference and if someone sees a

00:18:46,620 --> 00:18:50,100
difference it's

00:18:47,789 --> 00:18:54,320
mostly the positive one so it means that

00:18:50,100 --> 00:18:57,869
just runs faster my suspicions

00:18:54,320 --> 00:19:02,960
suspicious is that it's caused by memory

00:18:57,869 --> 00:19:06,389
management because although ICP when you

00:19:02,960 --> 00:19:10,529
last use the some structure it's

00:19:06,389 --> 00:19:13,320
immediately removed from memory but Ruby

00:19:10,529 --> 00:19:16,169
do it in steps so it means it just a

00:19:13,320 --> 00:19:19,799
neural on and then clean post updates

00:19:16,169 --> 00:19:22,799
not needed so I think that for some

00:19:19,799 --> 00:19:24,629
parts varies quite a lot of allocation

00:19:22,799 --> 00:19:27,269
in the local asian it can speed up

00:19:24,629 --> 00:19:31,049
things of course the other side it's

00:19:27,269 --> 00:19:33,149
like increased memory size because you

00:19:31,049 --> 00:19:39,409
just allocate allocate and then they

00:19:33,149 --> 00:19:42,269
locate and destroy it in one step and

00:19:39,409 --> 00:19:46,129
maybe one interesting part why is

00:19:42,269 --> 00:19:50,099
performance in important for opensuse if

00:19:46,129 --> 00:19:53,789
opensuse want to replace windows XP

00:19:50,099 --> 00:19:55,799
that's expired now then I think it's

00:19:53,789 --> 00:20:00,210
perfect case if someone have machine

00:19:55,799 --> 00:20:04,229
with 512 megabytes ram because the next

00:20:00,210 --> 00:20:06,869
windows vista and it's almost impossible

00:20:04,229 --> 00:20:10,440
to run it on such configuration i think

00:20:06,869 --> 00:20:13,349
even one gigabytes of ram is quite pain

00:20:10,440 --> 00:20:17,460
and my notebook at four gigabytes and

00:20:13,349 --> 00:20:20,099
sometimes I still feel that the in

00:20:17,460 --> 00:20:22,799
performance is not great so that's

00:20:20,099 --> 00:20:25,440
reason and maybe we can somehow

00:20:22,799 --> 00:20:29,609
propagated for such machines it's open

00:20:25,440 --> 00:20:33,830
source a good replacement and can helps

00:20:29,609 --> 00:20:37,220
users maybe we can increase our user

00:20:33,830 --> 00:20:37,220
user base

00:20:39,809 --> 00:20:45,580
okay so that's everything I want to see

00:20:42,850 --> 00:20:48,760
you here's some contacts for a steam if

00:20:45,580 --> 00:20:51,789
you are interested in anything or have

00:20:48,760 --> 00:20:56,110
some questions feel free to ask on IRC

00:20:51,789 --> 00:20:58,720
or mailing list we we are quite actively

00:20:56,110 --> 00:21:03,549
responding there so there's almost

00:20:58,720 --> 00:21:06,190
always someone who writes you answer or

00:21:03,549 --> 00:21:09,429
say who is the right person from Team

00:21:06,190 --> 00:21:14,520
can dance for you so thanks for your

00:21:09,429 --> 00:21:14,520
attention and is there some questions

00:21:30,530 --> 00:21:36,780
what has happened to this in famous just

00:21:34,230 --> 00:21:42,920
lock thing you always attached all your

00:21:36,780 --> 00:21:45,510
stocks that box yeah it looks still live

00:21:42,920 --> 00:21:49,920
reason is that the big converter code

00:21:45,510 --> 00:21:52,050
and our goal is to don't rewrite the

00:21:49,920 --> 00:21:54,720
code just change the language of

00:21:52,050 --> 00:22:00,330
implementation so locks are still there

00:21:54,720 --> 00:22:03,300
we have some stuff there and I think our

00:22:00,330 --> 00:22:07,050
intention is to write the interesting

00:22:03,300 --> 00:22:11,130
stuff for users in you I directly and in

00:22:07,050 --> 00:22:13,920
logs have just some internal ones so if

00:22:11,130 --> 00:22:19,440
there is some error like that your file

00:22:13,920 --> 00:22:22,020
have broken syntax I expect that just

00:22:19,440 --> 00:22:24,390
should write your file is broken you

00:22:22,020 --> 00:22:28,620
probably manually edit it and break

00:22:24,390 --> 00:22:32,670
something and do not hide it in lock but

00:22:28,620 --> 00:22:35,070
currently it's evolution we do not make

00:22:32,670 --> 00:22:36,810
a revolution that we said throw

00:22:35,070 --> 00:22:39,450
everything and write it from scratch

00:22:36,810 --> 00:22:41,610
from Ruby it's almost impossible so we

00:22:39,450 --> 00:22:47,280
just convert old coat it behave exactly

00:22:41,610 --> 00:22:49,710
same us like ycp and we just start when

00:22:47,280 --> 00:22:57,210
we touch something with try to improve

00:22:49,710 --> 00:22:59,100
it and use benefits of or be so locks is

00:22:57,210 --> 00:23:07,130
still there and you should attach it to

00:22:59,100 --> 00:23:07,130
every buck ok some more questions

00:23:11,309 --> 00:23:16,070

YouTube URL: https://www.youtube.com/watch?v=HgBQEjzqHhE


