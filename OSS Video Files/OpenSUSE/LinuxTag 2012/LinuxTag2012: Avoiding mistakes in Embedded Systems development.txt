Title: LinuxTag2012: Avoiding mistakes in Embedded Systems development
Publication date: 2012-05-27
Playlist: LinuxTag 2012
Description: 
	Hans-J?rgen Koch (hjk engineering)
Captions: 
	                              so that come back on a better track                               sorry for the missing talk we hadn't any                               information that the speaker didn't                               arrive here so he didn't even write mail                               to us so sorry about that but now we                               have hands on here from Antioch                               engineering and here's a long time                               history as a kernel contributor he                               started kernel development in                                          driver for video for linux RDS chip he                                has to maintain off user space I oh and                                he is or was the maintainer of the                                Taylor chips on platform so please                                welcome han ji young he had to talk                                about avoiding mistakes in embedded                                systems development ok ok thanks Manu um                                yeah my name is an Theo van Gogh and I                                want to talk a little bit about embedded                                systems and what can go wrong with them                                so what is an embedded system that might                                not be clear to everybody because you                                normally don't really notice them in                                everyday life so I've cut here I                                borrowed an example from the guys from                                penghu tronix from their booth down                                there thank you very much to them so                                this is an example what could be an                                embedded device doesn't really look like                                a computer for most but in fact it has                                many elements of a computer in fact it                                has all elements of a computer it has a                                cpu it has memory it has the usual                                connections we see here this one what                                does it have it it has network it has                                USP here we have an SD card                                another USB slot everything that you                                find in a normal PC sometimes even more                                hardware because some of these chips are                                usually connected through from some                                buses like I square C or SPI us things                                like that where you normally don't have                                to deal with in normal computers so if                                you do want to do development for such a                                such an embedded device you know you                                have to here are a few examples what in                                what an embedded device could be for                                example we have DVD players we have                                navigation system smartphones dsl                                reuters routers or car electronics                                you'll find them in automation it's                                machine control and things like that and                                often you don't even notice that you                                have one for example in car electronics                                there might be such an embedded device                                behind your dash pot and you don't even                                know that it is there and in your DVD                                player at home users usually don't see                                that as in as a computer it's it's a DVD                                player and even even smartphones where                                you can even install apps or things like                                that are usually not seen as a computer                                it's it's it's a device and but I'm I'm                                very sure that each one of you here in                                this room has at least one embedded                                device in his household where he already                                found a bug that something doesn't work                                as expected that it suddenly crashes and                                it doesn't work and you have to reboot                                it or turn it off and on again or                                something like that so that it works                                again or for example a DVD player at                                home and my DVD player if I that in his                                minutes menu if I turn it on default                                length language english I can only watch                                movies in English if I want to switch                                back to German or two French or                                something like that it doesn't                                work I first have to go to the menu and                                switch back over to another language so                                many of these devices have have really                                serious bugs and especially smartphones                                for example the last few issue CT                                magazine they wrote articles about that                                that that usually each each new android                                version has instant introduces new bugs                                or navigation systems that crash or                                whatever so we and that's the surprising                                thing there is that that usually such an                                embedded devices just made for one                                purpose so you could think it should be                                easy to to make that that one back free                                because you don't run hundreds of                                applications like you do on a normal PC                                but you have just one application for                                that is the one task to be a navigation                                system or a DVD player and it shouldn't                                be too difficult to get that one right                                but still it seems to be quite                                complicated and yeah and at the last                                 number that I've heard is that here in                                 Germany at least eighty percent of all                                 new embedded systems are done with Linux                                 reason for that is that we have here                                 more and more hardware features and ten                                 years ago nobody thought about having a                                 coffee maker or something like that that                                 has a USB connection meanwhile each TV                                 set and has a network interface for                                 example and and it has to and it has to                                 work properly because you want to                                 connect it to the internet and so you                                 run in all the risks that you that you                                 also have with a PC about viruses and                                 attacks from outside so in for example                                 you need a really really good network                                 stack not just something                                 that just makes it work it you need all                                 the features all the abilities of a                                 modern desktop or server operating                                 system the applications also offer more                                 and more features that you for example                                 you can control suave music or video                                 from the internet or you can execute                                 from executables that you execute on                                 your on your device and that that means                                 you need all the abilities of a modern                                 operating system and and that excludes                                 all these special embedded operating                                 systems that you that you had years ago                                 like like windows ce e or things like                                 that and Linux the Linux kernel                                 especially scales very well you use the                                 same kernel on on embedded devices and                                 on on big servers supercomputers it's                                 it's in effect the same kernel just                                 configured differently so if you want to                                 have a feature that that you have on                                 your server for example you consider you                                 can easily have it on your on your                                 embedded device as well so a current an                                 embedded system in the end consists of                                 of course the hardware at the bottom you                                 need a kernel for that then we need some                                 some system applications we usually call                                 it a root file system where you have to                                 stand out things like like a shell or                                 the system programs like an ssh server                                 or and different libraries you need and                                 then off top of top of that you have                                 your application the application usually                                 defines what the device will be if it is                                 a DVD player or is it a navigation                                 system or or anything else so if                                 somebody develops for for an embedded                                 system it is important for him to first                                 consider what who what's my company                                 doing what is our core competence                                 it's often companies are mainly the                                 application developers because in that                                 application there's the whole the whole                                 knowledge of that company if somebody                                 knows how to has developed an algorithm                                 for machine control that is his core                                 competencies special knowledge that that                                 that makes it makes him different from                                 his competitors if somebody has                                 developed an algorithm for a navigation                                 system that's his core competence so he                                 that company will put that in an                                 application and and will probably maybe                                 buy this device from another company who                                 specialized on for example hardware                                 development so if your core competencies                                 application you wouldn't you wouldn't go                                 and develop your heart your own hardware                                 because you don't have the specialized                                 developers who are experienced in that                                 area on the other hand there are several                                 companies who are really specialized on                                 hardware development and know nothing                                 about application in that that seems to                                 be quite obvious but what often happens                                 is that that for example companies who                                 write the application they buy some                                 hardware but but are not satisfied here                                 with E or don't have it this system and                                 Colonel part and then they tell their                                 programmers oh you're a programmer you                                 can do that as well and that usually                                 that's usually bound to fail because you                                 really need special and knowledge in                                 that low-level area and that developers                                 usually have the special knowledge you                                 need here so I am personally I am a very                                 bad application developer I'm coming                                 here from i started with hardware                                 development and then Colonel and and a                                 bit system development main no I'm                                 mainly doing colonel things and so I                                 wouldn't try to to to write an                                 application and and it's really                                 important to to think about that                                 and to find out what do I I want to do                                 and what do i do I want to outsource                                 okay but we talk about that later ok now                                 we we know we have an embedded system                                 and we want to use linux on it linux is                                 open source software also the most of                                 the system system files are also usually                                 open source systems and so let's have a                                 look at what open source is that is a                                 unfortunately not very good picture of                                 bruce parents I I was lucky to meet him                                 in                                                                       gave a good talk they are about open                                 source he sometimes credited by having                                 invented the term open source at least                                 he was one of the very first who used it                                 and he's also very good programmer he                                 was the original author of busy box for                                 example and he gave a good talk there                                 and and after his talk I wanted to ask                                 him some questions so I went there in                                 durham was of course very nervous and                                 asked him could ask a few questions and                                 and he said oh well yes of course but i                                 just wanted to go to lunch just why                                 don't why don't we go together under so                                 i was lucky to have lunch with Bruce                                 parents and and he explained a lot of                                 things especially about what is open                                 source and where can we use closed                                 source that is I want to mention that                                 because here especially on linux tag we                                 usually a favor open source and that                                 often leaves the impression that                                 everything has to be open source and                                 close sauce is evil but even Bruce                                 parents were set you just have to decide                                 what what to do where and when and why                                 and what he calls it differentiating                                 reaches that means on an Impala or                                 embedded device you have a few features                                 that really make a user visible                                 difference between your product and the                                 competitors product hopefully if you                                 don't if there are no differences                                 between your product and those of the                                 competitors it's probably bound to fail                                 anyway and then if you if you have no                                 difference if there's a software that                                 makes no difference then always use open                                 source that is for example the colonel                                 the colonel on an embedded devices never                                 something that the user will see it                                 doesn't matter for the user with which                                 kernel you use most of the users to even                                 don't care if it's a linux kernel or                                 Windows kernel or whatever so it really                                 doesn't matter and so this is one                                 element where where the user sees no                                 difference and that's why you should use                                 open source software like Linux but if                                 you have an application and the                                 application is usually that thing that                                 makes the difference that's visible to                                 the user and that application usually                                 contains your core knowledge you all                                 know how your algorithms that you wrote                                 and where you think that you are better                                 there than your competitors and and it's                                 perfectly legal to make that closed                                 source that is your you're good right                                 and and I think that should also be                                 mentioned it is important to see and to                                 make the difference what do I have to                                 make open source or should make open                                 source and then as one application and                                 I'm I will do that I make that closed                                 source for this in this reason and and                                 it's it's important to be clear in on                                 that point and and also inform yourself                                 about the licenses if you have want to                                 make it closed source license                                 you're for your application you must not                                 use for example GPL libraries and they                                 have to be LG pls and obst or something                                 like that ok so that is one thing that                                 should be made clear many companies make                                 a are not clear up in this at that point                                 let's say oh we have to pay all of our                                 source code has to be closed or even                                 kernel code you know the the writer                                 kernel driver and say ok it has to be                                 GPL work but we cannot give it away                                 because we paid money for it and Balan                                 and on competitors also know how we deal                                 with our SD card or whatever that's yeah                                 not the right way to do it ok talking                                 about open source software what does                                 open source mean you often hear                                 arguments like this here it's doesn't                                 cost anything it's more secure it has                                 better code and and we can change it or                                 things like that that might or might not                                 be true dependent depending on what                                 we're talking about but in my opinion                                 the main thing that why why the sauce is                                 open is that that people can work                                 together on it but was the original                                 reason when richard stallman defined the                                 GPL was that that all developers can                                 work together on on the source code and                                 that there's not one developer somewhere                                 in between who can just steal the code                                 and do something else with it and so in                                 the term open source in fact describes                                 the development process we develop sort                                 of software in an open-source way and so                                 in fact if we use open source of                                 software we can we hopefully become part                                 of that development process even if                                 we're just the user we still can have                                 back reports or if you if you walk                                 around here and Linux talk and you go to                                 the booth of one project and you say hey                                 I use that program of yours and I have                                 that and that problem then you're                                 already part of the development process                                 because you                                 talking directly to the programmers that                                 means open source means communication                                 you are you had can have direct contact                                 with programmers you have mailing lists                                 where you can can write one male and                                 address a whole community of maybe a few                                 thousand people you have IRC channels                                 for chat for fast communication wages                                 can ask a question and five seconds                                 later somebody tells you what you're                                 doing wrong something like that that is                                 something that you that you never have                                 enclosed source software and cannot have                                 in closed source software wherever you                                 are dealing with closed-source software                                 you come to a service hotline with a                                 nice girl who read through the manual                                 that you already read ten times okay                                 that means in if you're the if you are                                 in the company and developing for                                 embedded systems you should allow                                 communication with the community and and                                 in fact become a bit part of the                                 community that is often a difficulty in                                 companies because usually or often in                                 companies you don't even have a male                                 client with which you can post on a                                 mailing list I mean you if you want to                                 send a patch or something like that it                                 won't work with Outlook or lotus notes                                 or whatever and and often the the ports                                 usually need it for that for example                                 what is IRC                                                                                                                                      in most companies so if you want to take                                 part in the IRC channel compute                                 community won't work and that's a that's                                 a pretty bad thing because but that yeah                                 katsu really offer from the community                                 let's have a look at the as an adjust as                                 an example for an open source                                 development process and Colonel because                                 I take I'd like to take that as an                                 example because the colonel is a very                                 high quality piece of software it it has                                 to be because because it runs on every                                 linux device so it has hundreds of                                 millions of users and and a bug in there                                 is quite a bad thing and if you look at                                 the if you take part in the kernel                                 development process you know hope you'll                                 notice that we're always talking about                                 code it's all centered around code if we                                 develop we have okay each developer uses                                 an editor and we have some of course                                 some debug helper programs we also do                                 some function tests of course but it's                                 but it's not the central thing we're                                 always talking about code if somebody                                 makes if somebody has a question he                                 posts code and says why doesn't this why                                 does it not work or if he has a                                 suggestion why can't we do it this way                                 he posts some patch as an example and                                 says I'd like to do it like that do you                                 agree or whatever so we are always                                 talking about code and and if some code                                 is written and and will be X and seems                                 to be should be can be accepted then it                                 goes through a review process that is a                                 very important thing without without                                 passing the review by the maintenance of                                 the subsystem it won't it will never get                                 into the repository in the mainline                                 kernel tree so that's how we do quality                                 assurance here by reviewing the code and                                 by only talking about code in contrast                                 okay that's what I just said in contrast                                 the industry development process the                                 focuses mostly on tools they before                                 starting to talk about coat they say oh                                 we have to develop it with this in this                                 IDE like Microsoft Visual Studio we have                                 to use eclipse or whatever the the first                                 talking about the IDE and what editor                                 and what debugger and what version                                 control system and blah blah and                                 modeling the software with uml before                                 and so that they have very much focus on                                 on tools and encode is something that                                 yeah that's it's somewhere in between                                 you know that don't really like to talk                                 about it and and then in the end that                                 they have again the large function tests                                 because function test that is something                                 that that can be defined in a quality                                 assurance manual they say okay we have                                 to define this test case and this test                                 case in this test case and if to the                                 software all passes passes all tests                                 than it is good and the problem with                                 that approach is that you can never test                                 everything that's pretty clear I mean                                 you will never find a bug that this sort                                 of parts that that come only once a week                                 or so or not not reproducible just run                                 the test again and then it's okay and                                 passed the test and encode review is                                 usually never never really done in                                 industry because it's more difficult                                 there on the linux kernel mailing list                                 we can tell each other whatever we want                                 i can i can tell my friends there hey I                                 find your code is although I                                 tell me that they find my coat                                 you cannot do that in industry if you if                                 you're sitting in a meeting in industry                                 and say about what that guy wrote that's                                 complete how can you say that                                 and there's so you can can't really                                 criticize in an open way that is a big                                 problem                                 and yeah we have no no code review                                 another problem is that that cause code                                 goes into a repository often in a very                                 random way that you have for some some                                 developers and each one has write access                                 to the repository and can just push his                                 stuff in and the noble you often have                                 large programs where there are lots of                                 lines of code that only one person has                                 ever seen the one who has written them                                 nobody ever reviewed them it just                                 happened to accidentally pass the                                 function testers and so it's they say                                 okay it's good it works and the colonel                                 if somebody tells me Mike yeah but my                                 code works and i just say i don't care                                 if your code works I that's what I                                 assume otherwise you wouldn't post it I                                 don't want to have code that works i                                 want to have beautiful code but that                                 your beautiful code cannot really be                                 defined in a quality assurance manual                                 and in the colonel we simply define it                                 like that beautiful is when if the                                 maintainer says it's beautiful it's not                                 a democratic process and different                                 maintenance have have different opinions                                 about what is beautiful but if I if you                                 send a patch for the uio subsystem then                                 you are really depending on what I find                                 beautiful if I send a patch to somebody                                 else's subsystem I'll get it back                                 because he doesn't find my coat                                 beautiful okay that's it I have to do it                                 in the way he likes it and this is a is                                 a system that really works and the                                 colonel is a beautiful piece of software                                 have a look at it okay again this this                                 picture here we'll have let's have a                                 look at a few examples about this four                                 pieces of or at least at the bottom                                 three in hardware development it's a                                 good idea before you start before you                                 start to check the kernel for supported                                 chips or BOTS                                 it's often we often had the case that                                 that somebody puts puts a certain trip                                 into his bought because he found a data                                 sheet and found that's that's a nice                                 chip and let's use it and but there's no                                 support of it for it in the colonel so                                 you have to have to write a driver if                                 they look before that they could have                                 chosen another chip that may be at the                                 same price that is already supported and                                 saves a lot of money and has already a                                 gutin and stable and tested driver it's                                 often often you get vendor support                                 packages you buy you buy such a fat                                 report from the heart such a bot from                                 the hardware manufacturer and and on                                 their homepage they they have a big of                                 tar ball or zip file and whether say                                 that's the support Ford for that port                                 there's usually an ancient Colonel from                                 two years ago with lots of patches on it                                 that never made it to mainline and                                 whenever really whenever reviewed don't                                 don't be very careful if somebody says                                 our bot is supported for has linux                                 support linux support means that the                                 device is in the mainline kernel and                                 anything else is not linux support if                                 somebody says yeah you can you download                                 this and download that i really hate the                                 word download in that context you should                                 never you should never download kernel                                 code if it's not in main line which is                                 perfectly okay then somebody has to                                 bring it to main line before you should                                 tell your your embedded device if                                 anything else is it's just playing                                 around and you should really use the                                 offer of the colonel maintain us to                                 review your code there they're reviewing                                 your code for free and I and don't never                                 understand why companies don't use that                                 you get the offer that of the best                                 Colonel X experts you get a free review                                 of your code                                 and its coat that is not a                                 differentiating feature for the customer                                 you can make your connection it's open                                 source anyway so you don't lose anything                                 you can just gain they will say oh don't                                 want it in there really it as barrier                                 somehow between industry and the kernel                                 developers and that is that is one of                                 the reasons was awkward often fails then                                 this is also an important thing here                                 with well you shouldn't save money try                                 to save money whatever the cost in                                 calculations you often find that they                                 say oh I can have a smaller flash chip                                 and that's I saves me fifty cents but                                 then if you look at them they are                                 selling planning on selling a thousand                                 pieces per year or so so they'll save                                                                                                       cause that you have to to make your your                                 root filesystem smaller which takes you                                 a few weeks of engineering and then it's                                 certainly not worth it okay we had it                                 unfortunately in an example in the                                 kernel development you might have heard                                 of that when Android developers behind                                 my work behind closed doors for a long                                 time and and wrote some important                                 Colonel call stuff like Lisa spent                                 blockers wakelocks let me know have have                                 really great difficulties because they                                 have to maintain their code out of tree                                 it's quite it's in fact it's a fork and                                 they have to maintain it they lose they                                 lost the complete support of the colonel                                 community at that point and on our                                 hearts trying to get their stuff back to                                 main line you shouldn't do that always                                 use the mainline kernel never download                                 kernel code and if you're not sure in on                                 any point ask on the mailing lists if                                 you can get the idea really you can get                                 the opinion of important kernel                                 developers for free use it                                 and that's what one last point here and                                 that that I wanted to mention you should                                 never ever write a character device                                 driver I mentioned that because if you                                 start kernel development you usually buy                                 a book about linux kernel driver                                 development and in each of these books                                 the first hello world driver is some raw                                 character device driver but it's nice                                 but you never needed a in six years of                                 kernel development and driver                                 development I never brought a rock on a                                 character device driver and you don't                                 need it there's always a subsystem where                                 it where you stuff fits in and you                                 should really do that in system                                 development please avoid embedded                                 distributions that is also a thing that                                 I frequently see that that people use                                 think oh it's an embedded system now I                                 have to use openembedded or PTX test                                 sorry penghu tronics guys but but it                                 won't work or at least it makes it makes                                 it more difficult debian now has a                                 thousand maintain us and the                                        packages no no other distribution and no                                 embedded distribution can compete with                                 that if you have any of these                                 distributions they have packages that                                 that haven't seen any any maintenance in                                 one year or two years or so and and you                                 frequently run into the situation where                                 you have okay I see my time is over to                                 be a bit faster that that one package is                                 missing and then you have to start                                 compiling your package yourself so                                 please use a large distribution like                                 debian you can get if you can get a                                 debian system in                                                        a standard installer but we will have to                                 help it a bit but but you can have your                                 root file system within a few days and                                 with an embedded distribution goods                                 only need weeks and and what comes out                                 is worse so you should never compile                                 your own root filesystem unless you have                                 a really very special occasion where it                                 has to fit into four megabytes or flash                                 or so but now we have we are in the                                 gigabyte flash times and you don't                                 actually need it and and another thing                                 for your own application never cross                                 compile it if you're working for arm for                                 example do not cross compile make a                                 virtual machine with using huy move                                 something like that and and cross                                 compile and compile it natively in a                                 virtual machine okay that's some                                 conclusions for these parts that that                                 you don't that you cannot have do you                                 know for anything you should always try                                 to hire good good programmers if you're                                 if application is your stuff and hire                                 good application programmers if you need                                 to to do something else that is not                                 within your core competence then gets                                 outsourced should never outsource source                                 core competence but you should outsource                                 those things that are not your core core                                 competence go to some for example if you                                 need to do kernel development and you                                 cannot do it yourself consider hiring                                 some consultant there are some companies                                 and freelancers available who do that me                                 for example in Oh tronix or Pengo                                 Tronics and many others and otherwise in                                 open source of their try to become part                                 of the community participate in mailing                                 lists talk to the people discuss your                                 problems on the IRC channels try to make                                 your code quality as important as us                                 just a function function tests and so                                 make code review standard the standard                                 procedure in your development process                                 and and try to stick to standards avoid                                 an unofficial code but don't use some                                 embedded distributions in some some                                 vendor kernels and Wendell drivers don't                                 write your own algorithms if they're                                 available in free libraries and so on                                 use brains not tools and I think the                                 conclusion ok any questions very much                                 for your talk and ziering and for a real                                 good conclusion so are there any                                 questions i think we are over time but                                 we can allow one or two yeah well what                                 do you think about arduino and the whole                                 hype around it the development the                                 arduino boards the small embedded boards                                 i didn't i didn't actually use them                                 personally but i think it's quite nice                                 and women do if you find if you find                                 several small boards at look at low                                 prices and and it's certainly a good                                 thing i mean if they if they support                                 what you need and when you feel free to                                 use it I'm really glad that it developed                                 a bit in that way that for example texas                                 instruments or at millers that they                                 offer boards at quite low prices for                                 Marvel after one started offering his                                 $                                                                     had to do it a bit too you know and and                                 i find it good and I mean if you always                                 have to have to have a look if it has                                 the features that you need for your                                 project if it has the features then                                 please do feel free to do so okay one                                 more question oh I try to bring you the                                 microphone                                 why are you so critical about cross                                 compiling because because most backward                                 or many packages are not made for it if                                 you there are some that but that really                                 cross compile very fine for example like                                 I was able to cross compile a complete                                 GT kg lip system within a few few hours                                 or one day or something like that but                                 but other packages you really can spend                                 days and weeks until you fix the                                 makefile so that it compiles correctly                                 the main problem is in if you if it has                                 a configure make make install using the                                 auto tools the configure script                                 sometimes generates a little piece of C                                 code and once to compile it to Ted to                                 make certain tests and that it often                                 confuses the host compiler with a cross                                 compiler so it it uses for example if it                                 uses the cross compiler to make the test                                 then tries to run the compiled code on                                 the host it won't work and tries to                                 execute arm code on x                                                 their midst your configure script fails                                 and you can really spend hours until you                                 are fixed that yes but yeah but of                                 course it of course it is but but that                                 doesn't help you if you just have to                                 want to compile all the packages                                 now i'm not i'm not talking about I'm                                 not talking about Debbie encode Debbie                                 uncaught code that is a different thing                                 because Debbie are never cross compiles                                 they all they always do it in natively I                                 just the main reason if you cross                                 compile is for example your own                                 application I mean if you mess that up                                 it's your own problem but for example if                                 somebody downloads and x server or                                 something like that and because he wants                                 to compile it to enable certain features                                 or disable others to make it smaller or                                 something like that then I would compile                                 it natively now and not not doing cross                                 compiling it's it's just a hint it's my                                 personal experience if somebody likes to                                 do cross compiling and it's ok and feel                                 free to do so I just in my experience I                                 did it for several years I compiled                                 complete root file systems by cross                                 compiling and I don't want to do it                                 anymore it's as simple as that ok so                                 thank you handsome for your talk and                                 questions I'm sure if you have any more                                 questions to answer is present here                                 round or outside and you can ask him but                                 we don't trust a little bit in a hurry                                 now so please thank hun tiangco for this                                 excellent talk ok I thank you for your                                 attention thanks for listening
YouTube URL: https://www.youtube.com/watch?v=Ifer6dNEu1E


