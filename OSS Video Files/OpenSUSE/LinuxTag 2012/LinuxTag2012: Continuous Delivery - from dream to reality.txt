Title: LinuxTag2012: Continuous Delivery - from dream to reality
Publication date: 2012-05-24
Playlist: LinuxTag 2012
Description: 
	Clement Escoffier (akquinet AG)
Captions: 
	                              I thanks everybody for coming the next                               presentation is from Clement let's go                               Faye from aqua net based in Berlin and                               it's going to be about continuous                               delivery to reality thank you so hello                               I'm Clemens Kofi I'm working for a                               quinet it's a german company based in                               belen NV number ugh all right I come                               from Berlin I just have a question a                                couple of questions first gouken from                                the Java world who confirm the PHP rails                                a bit ok so I work since seven years in                                what we call modular software so it's                                software that we divide in small pieces                                because we are thinking that it's more                                easy to develop but I call it's much                                harder to build and to deploy and doing                                my experience we I see a lot of                                evolution in the build processes I saw                                maven one I so maven to a bit better I                                saw maven three all right okay and it                                always as a weird I also know well                                feeling about those tools because                                actually it's really make a difference                                if you are developer or if you really                                want to deploy something so what I will                                describe and discuss today is based on                                nothing well it just from my experience                                so if I work for you now so I will just                                tell a story which is more or less you                                can get you can realize that you are                                more or less inside well as earning the                                pair i will take a project or for                                regular size so your project might be                                bigger smaller it's not very important                                but this is a use case which is quite                                common today so running for two years                                not that long but well two years in                                software development is not that bad                                either                                                                  for scrum and agile development a                                java-based will see the tools that they                                are using on such kind of project but                                yeah and one                                you see such kind of project so bill                                discotic so what does that mean that                                means that somebody which is arriving                                and try to understand all the build is                                working not the software just build well                                to build the software or to get it                                running or to see what change our or you                                can contribute something it would just                                take one or two days well actually it's                                kind of weird because the build is not                                the business logic of the system it                                should be immediately ready to write                                some business code not spending time to                                do that but yeah so what I named Celtic                                and here you will maybe a recognized                                your project taking forever two years                                ago if we take a quite famous project                                glassfish if you want it to build it                                from your computer it was taking two                                hours that's quite a lot intermittent                                failures everything which is a                                synchronous and so on and you always                                have oh yeah your computer is faster                                than mine so you will have to add some                                shredded sleep or weight or whatever                                this is order because it's definitely                                not reliable I saw so many project where                                on the developer machine and on the CIA                                use different parameters because the CPU                                is different or all the memories                                different also billabong we see                                different and so on inconsistent output                                that's the last things you have a bit                                especially in the maven world it's so                                famous you have a build which depend on                                snapshots we will discuss that later so                                it's today I been I get one output it's                                tomorrow I built I get something                                different I didn't change anything but I                                got something different because somebody                                has committed and it's deployed on                                another repository and so on it can                                change a lot of things and you don't                                know because while you was working on                                your feature and no nothing is working                                again so that also the neural produce it                                build issues I'm the last one the last                                one is probably what take me today is a                                master part of my time authorization                                failure there is so many difference                                between the development                                a continuous integration system or your                                production system that you always have                                some logging fail cannot access                                resources or blah blah so your maven                                 repository is doesn't you don't have the                                 good credential you cannot commit                                 because of you see you see I does not                                 have the right credential to push                                 something on your git repository Oh to                                 come in something in your eyes VN so all                                 those issues so and one thing when you                                 are working in projects you need to                                 release I want one of time your customer                                 or your company say well no it's time to                                 get something live and to sell something                                 and to get money out of that well                                 actually releasing is worrying a lot of                                 stress in the software development team                                 it's because while you cannot delay in                                 you cannot postpone you really need to                                 have something working and the delivery                                 genera really really a war on why                                 because your development environment is                                 pretty pretty different of the                                 production environment that just says                                 the database is not the same by using a                                 worker you are using paws grave my                                 secure so such kind of difference can                                 really matter some big systems so it's                                 involved delays a lot of delays while                                 their lies doesn't make the customer                                 happy                                                               customer comes with birds that you fixed                                 you two weeks ago and you cannot                                 reproduce and so on so it's bad for the                                 team because I have a lot of pressure                                 they really something that was not                                 really ready the customer get delays and                                 so it's not happy and so on so the next                                 step is pretty simple so trust failed                                 you company your boss and some start                                 seeking a why why are you not done its                                 wealth estimation was six day and you                                 spend already                                                          the trust failed we had more pressure on                                 the development team so what will be                                 more when we have pressure on the                                 development team will move the tests the                                 first things that would work well who                                 cares about testing actually                                 so we reduce the quality of the taste                                 the coverage and so on and so on and so                                 the technical depth increase so that                                 means for the next iteration of the next                                 evolution of the project the maintenance                                 will cost more money and you don't want                                 to really develop any more on this                                 project because you know that some parts                                 are broken / design but why because at                                 the beginning he was just trying to                                 religion to deliver your software that's                                 kind of free so I saw that in my career                                 at least three or four times two months                                 such kind of situation and so we reach                                 in something that I call non-optimal                                 project situation that we can summarize                                 by it's a big mess so big males because                                 you software that you have developed is                                 not the quality you would like to have                                 you have delays your customer is not                                 very happy or your company is not very                                 happy so we had pressure and so on so                                 it's not a sane environment to develop a                                 good software and what we are doing here                                 and we all want to develop good software                                 which is cool using good technology and                                 so on so once upon a time a little bit                                 later there is something called                                 escalation meeting so all the type or                                 are meeting in a room and say yeah where                                 we need to find a solution Laura you                                 have promised me this and I don't have                                 that so at the end of such kind of                                 meetings at you say hey let's deliver                                 version every day that's interesting                                 because before was the delivering of                                 software we swim on six months while                                 depend on few settings that were and                                 here because we want to restore trust                                 because we want to fix all those issues                                 we will make the issues even more bigger                                 we want to deliver every day whoa so                                 okay but what do I mean by delivering so                                 it depends your context if you are in a                                 web app Hawaii while you can imagine see                                 an open training system that you can                                 check it's maybe your prediction system                                 I speak about delivery so it can be                                 prediction or not it's up to you in                                 mobile hub it's generally downloadable                                 or in a market can be under in market                                 your own custom market or absolutely for                                 example or anything or i wear with                                 engines with the upper store it's a bit                                 more tricky because it takes two weeks                                 but yeah or for desktop application you                                 may want to provide an installer or                                 market now it is this true or not to                                 update mechanism where it will                                 automatically update something and so on                                 and everything is done on the system so                                 in addition of the software that you                                 were trying to develop we add some more                                 complexity because this is not easy to                                 get so when you after this meeting when                                 the next project management project                                 meeting the developers say well that                                 means one oral is a day they are really                                 not happy so who is using maven here I'm                                 not that much who are never include any                                 from maven user and releases you using                                 maven as a release some even define as a                                 plug-in for realism so they try to have                                 a process which is quite interesting so                                 they get your software zinc reservation                                 number they run tests they create a tag                                 and then psych read the artifacts so                                 it's quite clear quite clean it's seem                                 simple but every time I have to do a                                 release something get wrong every time                                 yesterday I found a bug in the latest                                 two dots regression on megan three or                                 four so just yesterday whoa so more                                 release is not good for developer well                                 as the project manager have frozen it's                                 more paper works yes I need to go to the                                 bug tracker to check every day what it's                                 done and so on so they are not happy and                                 for the prediction guy to say well it's                                 more challenged before you was providing                                 one Benari every six months and now it                                 will be every day so every day I need to                                 do my manipulation                                 copying the unzipping and so on yeah                                 that's won't work so that's a challenge                                 if you're in such kind of situation and                                 we say well we really want to have                                 continuous delivery it will be a                                 seamless descriptive change it's pretty                                 hard to convince people to say hey let's                                 do that karate but at some time it has a                                 lot of advantage and we'll season so                                 first                                                                  this quote it from one of our project                                 manager you decide yeah let's hold                                 commit to a continuous delivery model or                                 where every commit will go in                                 predictions that would be so cool and so                                 everything will automate it but what's                                 the transitioning so where we work and                                 that was a hot pad so that means we have                                 a team system for six people they don't                                 want to change absolutely nothing on all                                 they are working so they means                                 developing on their own system                                 committing to the same svn not reaction                                 change and so on and definitely not                                 doing a release every day so that's how                                 let's define some principle in                                 continuous delivery know who has already                                 implemented it at least for try or                                 something nobody sweet okay who knows at                                 least who already read about it it seems                                 to be a kind of buzzword right now it                                 exists since                                                             first reference to something close to                                 continuous delivery was at least in                                      and service probably's sings close to                                 that a long time before so the first                                 thing the first idea of continuous                                 delivery is to understand what times the                                 delivery aunty patterns that we are all                                 doing for years no manual software                                 building and deployment you are running                                 the build or you have a release manager                                 and this release manager is getting the                                 reasons own laptop Apache so a purchase                                 of transformation is promoting this                                 model                                 so each project or so depend on the                                 project but for example in Apache Felix                                 you have a release manager per component                                 and when we care to release manager                                 catch it on his laptop upload the                                 artifact to a repository ok and then we                                 do some voting and stuff like that and                                 then we close this repository and say ok                                 we have the release but the interesting                                 thing is that we are copying those                                 artifacts to another application nothing                                 avoid that we modified something in                                 those artifacts and we already saw that                                 a couple of times at some Apache project                                 have broken releases even if there was                                 tested and so on so many web software                                 building is not a good idea deploying in                                 prediction or in prediction like                                 environment only after releasing that's                                 where the procedure hardest part because                                 we don't have access to the production                                 environment when we are developing and                                 that make sense because why we don't                                 want to have access to the production                                 database the important thing is is a                                 projection like is to have something as                                 close as possible and to be sure that                                 all the difference are not important or                                 not impacting your software finally the                                 configuration and the of the environment                                 well if you are when you develop or when                                 you deploy your system if you have to                                 connect on your host using SSH or                                 whatever editing some configuration file                                 this looks bad at least smell pretty                                 pretty bad because that means that                                 somebody will in the next release do                                 exactly the same thing but pouring may                                 not have the knowledge or whatever so if                                 you are quitting for this team or if you                                 have doing something else then somebody                                 else that will do all those manual steps                                 and you can be sure that something will                                 go wrong in a project from my company I                                 saw somebody on the Sunday afternoon                                 trying to fix some hosts file on a                                 production system what is this sunday is                                 good because the customer is not there                                 so he cannot see it well that's                                 interesting                                 anyway continuous delivery while it's                                 pretty simple it's we just want to have                                 some process which will take the corn                                 sauce every time after every change and                                 we try to build a software and making                                 working and deploy it somewhere so I'll                                 delivers around somewhere so for web app                                 for example it would be a running system                                 that you can check that the customer can                                 check it's very interesting for teams                                 where you have a version and you are                                 working on your features and you can                                 immediately see that your features is                                 walking in prediction it's for the                                 motivation it's really good you already                                 see that for the customers are from the                                 people for will you developed it's good                                 too because he sees that you are already                                 working and not running                                              Facebook or Twitter or whatever it is a                                 change live so the overall the idea is                                 to simplify software delivery and the                                 key word is automation also its                                 responsibility because its                                 responsibility from the developer to                                 commit to this model and to just say                                 okay if i push something or if I commit                                 something on the tranka on my source                                 repository this something will go will                                 be seen by somebody else so if you just                                 have a system out or even worse on a web                                 page where you just say blah to do or                                 something of that that means that this                                 to do will be seen by somebody else so                                 you generally try to avoid typo or stuff                                 like that it's an interesting way                                 because you say well it's mark                                 responsibility and I don't want to have                                 as a project software developer                                 responsibility but I can lead this is                                 accepted pretty well and the pipeline so                                 we will explain what is a pipeline later                                 so what so ever lqr this automation you                                 need to automate absolutely everything                                 and you can't worry about some part are                                 to automate I                                 from the Java world so I cannot wait to                                 turn about PHP will be and so on but at                                 least for web app or even for desktop                                 app you can Musti test everything you                                 say you are you I well you can test you                                 why there is for desktop swing you have                                 fast swing something like that where you                                 can Welch make clear that everything                                 work for web app you have selenium okay                                 people doesn't really like selenium but                                 you have jab which works pretty well and                                 so you have a lot of frameworks which                                 are available today which are easy to                                 learn to test mostly everything capacity                                 and so on or performance then look at                                 what g-meter is doing or Gatling and so                                 on so that you have tools for that so                                 automate everything that means okay                                 bootstrap configuration all your tests                                 so that means you need integration                                 acceptance you I capacity performance                                 smoke every company has its own                                 vocabulary so I try to cover most of                                 them ah oughta make you release automate                                 your deployment and for people using                                 database your revolution and that's must                                 have a tu deja of the spot is this in                                 case of BBQ but we will come to that                                 later so the second big point is a                                 pipeline so pipeline is this I think                                 it's it's one which is now arriving in                                 in Germany no one's from Russia to to                                 Germany so it's a wire it's a pipe like                                 that where we will do several steps so                                 first step second step and so on and so                                 on and so on and you cannot chop it                                 that's really important you cannot go                                 from here good to hear you have to go                                 through the complete pipeline so                                 pipeline a pipeline in software                                 development at least it this is a                                 simplified version it will look like                                 that so it will be a process where we                                 start here so you are a developer you                                 are working on                                 project you commit and then you have                                 something automated which will take what                                 you commit and we'll test it with one                                 unit test and package it generally what                                 you have at the end of the committee                                 stage it's a package that you can use                                 for all the frozen steppes so then you                                 can do the excerpts on stairs the UI                                 tells the deployment test on auto order                                 is depend capacity test and at the end                                 we'll leave and so on so that means that                                 every steps will be automated and we                                 will do them in the right order but                                 don't forget something even if you're a                                 developer is not only source code zoosk                                 only just one quarter of what we are                                 doing we have the source we have the                                 data we have the configuration and we                                 have the environment so everything need                                 to be handled by your pipeline if you                                 consider that your pipeline is done as                                 soon as you have or you source to a                                 package you are missing something so                                 data will be all your test data or your                                 provision data if you are running on a                                 on a system which is from scratch that                                 would be here all the configurations you                                 okay Apache configuration your database                                 configuration all your users that you                                 need like your application is probably                                 not running as good or whatever                                 everything need to be described and then                                 we are not where we will be masters and                                 sing configuration is no application                                 specific words environment will define                                 okay you need this package you need                                 these services and so on so you will                                 need bill tools and you will need a                                 build process son bill tools have is                                 plenty make we have aunt we have maven                                 we have GCC and so on so it's combining                                 all of them are quite good even the                                 newest one like builder SBT grader you                                 can do what we will explain right now                                 with those tools I'm come from the maven                                 world and I'm contribute a lot to maven                                 so I                                 speak more about maven but yeah the                                 important thing is you need a process                                 and this process need to be clarified                                 with all your team and all people that                                 will participate and saying okay it's oh                                 it will work it's not only while we will                                 package it's a package so test the                                 different phase of tests so we'll use                                 possess the deployment and so on that's                                 pretty important to cover everything so                                 first thing checking everything you are                                 writing something a script inside jcm                                 you are adding a picture for tests added                                 to the sem well before                                                 years ago then we'll say yeah as a disk                                 space and so on while c'mon today the                                 disk space is so cheap that you can                                 checking everything right now I'm                                 working on a project where we have                                 our pictures documentation everything is                                 inside our I see em and you can't                                 believe how good it is to say where it                                 is why I know it's always at the same                                 place it since I may seem so in that                                 case it since I'm a git repository so I                                 know that I have absolutely everything I                                 know that I can always find what I did                                 and people are of my team also automate                                 hoods that we are building can get it so                                 everything means so scarred deployment                                 script data database evolutions so if if                                 you are using a liquid base for example                                 configurations environment descriptions                                 and Bill script so here all your                                 configuration log and so on here if you                                 are using tools like pop art or anything                                 then it will be here and all your build                                 scripts something important it's a                                 traceability that means that you need to                                 be sure that your process will generate                                 some things that you cannot produce why                                 because don't worry continuous delivery                                 does not only may eliminate bugs so you                                 will have bugs for sure and you will                                 have you need a way to reproduce them                                 if you stop doing implementing                                 continuous delivery and your build is                                 not for producible that means that if                                 you take a specific provision of your                                 software you cannot reproduce exactly                                 the same artifact in the same bag then                                 something is wrong so for maven users                                 that means not snapshot is something                                 that you need to forbid well but I said                                 just before we must not change the way                                 we're developer are working ah ok so                                 we'll come to that later so unique                                 captioning human readable because I got                                 good reaction are not human readable                                 that's it it's a sha-                                                 just proves too complex for me having                                 tags for everything that you can vary                                 trace and see was done what                                 notifications something that wrong get                                 to notification can be what is email                                 jabber phone call or whatever for                                 example in a companies are in boston                                 they are sending text message that's                                 interesting the middle of the night                                 that's what yeah well it was a are using                                 it must be aunt respectable so you go to                                 your life system you need to know                                 exactly which version you are using of                                 everything so just before coming i saw a                                 demo of yet yet there are in the                                 exhibition room and they have this you                                 see exactly the version of what you have                                 and it must be my producer second big                                 france if continuous integration so who                                 is using continuous integration i hope                                 that i will have good yeah okay rankings                                 teamcity bamboo ah oh somebody has tried                                 Travis okay so Travis is a new one I                                 never tried it so I have no idea which                                 works ok so is on the tip so the                                 continuous integration in continuous                                 delivery smart as you cannot stop so the                                 first ID you automate everything and you                                 have one one thing that will be                                 responsible                                 everything is this so it will be                                 drinking so whatever instance probably                                 more way but it will do and execute all                                 your process so we will find some                                 pattern like commit often avoid one                                 cheese haha that will use brands by                                 abstraction hmm every branch is why                                 because what you will deploy except if                                 you have unlimited money and you have                                 unlimited prediction Oh store qar store                                 whatever then you probably will                                 integrate and deploy only one point so                                 if you start having ten branch or                                 whatever only one will be quite                                 integrating and deployed so it's kind of                                 bad so we are moving in a model where we                                 have one main branch trunk master                                 whatever you have feature branch but                                 Zeus which ones are shocked when their                                 life is short so no more than three to                                 five days and actually or well the rules                                 is more time you spend in your branch                                 more time you will spend to merit                                 because if you are in a team except if                                 you are alone in your teams and it's ok                                 but if you are working even if you are                                 too then you can be sure that something                                 pretty bad will happen while you are                                 working on your branch and you will then                                 use amount will be complex and so on so                                 one pattern which is developed which                                 start to be quite use now its bounds by                                 abstraction that's interesting because                                 it has nothing to do with punch bonds by                                 instruction is well we will add some in                                 direction to make a refractor wing                                 hidden let's say so basic example you                                 have ibis and you want to switch to I                                 Burnett while all new entities will be                                 in I burnet and as soon as I touch one                                 thing I will make out to I Burnett but                                 from all the other layers that should                                 not see anything we don't change the                                 signature we don't change anything so                                 it's fresh its internal design pattern                                 so large it's I said strategy and so on                                 but it won't stop working quite well and                                 big project like Apache Felix you are                                 using that since five years and we never                                 heard it in issues so we only have the                                 trunk but we try to make it clean and                                 clear and it works quite well so we                                 avoid disruptive change I clearly so in                                 the second half we have comprehensive                                 test so test everything make them                                 understand the bar so if you have some                                 project while you test on em test a test                                 be test three that's not good actually                                 for that we now have something called                                 behavior-driven testing or just mean GBA                                 whatever it's coke amber it first you to                                 write some more documentation in your                                 test because you are we will have to                                 write some sentences and so on it's                                 really good it's really good because you                                 see that everybody can understand your                                 test on at least actually know what is                                 broken um two weeks ago I was on a new                                 project I did some stuff obviously I                                 break something I'm break everything                                 every time so don't give me a project                                 well the test that was feeling was test                                 three easy PFF something like that I was                                 ready with that I had no idea what                                 reverse meaning actually it was a GN I                                 issue that I was not loading the right                                 library if it was like a test a journey                                 java library can be loaded correctly                                 driving so simple and i would have                                 checked that I would just miss one flag                                 when I was executing the test because                                 i'm using a Mac no I spent two hours to                                 try to understand what this time where                                 this name was meaning such as this and                                 fast feedback is the last point if you                                 have a test shoot which take more than                                 six hours to execute that's kind of bad                                 tricky thing that you need to think that                                 until you commit something until you get                                 to mail saying hey everything is fine                                 you mind you cannot really focus on any                                 you also task we are human and wear or                                 like that so we are always working                                 together I cross my fingers that I                                 didn't break anything and so fast or is                                 this feedback better ages even if it's                                 not a complete feedback like well you                                 didn't forget to add any file inside                                 your svn i did this mistake on yeah my                                 check my Apache Felix you will check my                                 last committed forget forgot to add a                                 file so that was exactly that I got the                                 feedback pretty early automate tests                                 well that's pretty simple but all type                                 of test unit tests you can use group                                 integration test UI test deployment test                                 system test and so on that's important                                 deployment test development test I mean                                 two things test that you can beat and                                 you have described it correctly                                 environment and you can provision it                                 correctly and tell that all your systems                                 that you require are there correct our                                 install quality let's imagine that you                                 are developing a new cooler application                                 using MongoDB while one pretty simple                                 test deployment test is to check that                                 the MongoDB services running so here if                                 you have some production ganser yeah                                 it's not just not just is doing that for                                 me integrated integrated that if you                                 promise your new systems that everything                                 is running correctly system test is                                 where all the once is deployed checking                                 that you system is really working                                 correctly automate deployment again                                 everything need to be automated so the                                 deployment to so describe your                                 environment always deploys the same way                                 that's really important how many people                                 are running their own tomcat or whatever                                 in their own machine which is a complete                                 different version of what they used in                                 prediction because believe me in                                 predictions are not using the latest                                 cool tom cat I'm with a new niño system                                 no no no no they're using tomcat                                      for that you say well it's hard because                                 i'm not using the same okra                                 system and not using the same way of                                 deploying for me yet I have eclipse on                                 my IDE I just do the bergens and that's                                 it yeah actually yeah but in prediction                                 it doesn't work like that so you may                                 have issues that you cannot discover                                 because you are not really using the                                 same diplomat way I don't say that what                                 you are doing is bad you should do it                                 but before being sure and say well i'm                                 done where i deploy so our way say yeah                                 but I don't have the prediction system                                 but today you have a lot of cool tools                                 for that vagrant we use vagrant already                                 used fragment not that much we want is a                                 tools on the top of virtual box which is                                 an Oracle project that i bought from sun                                 which virtualization system for your                                 desktop where you can describe and                                 script a vm and then you can deploy                                 using puppet or chef or shell script and                                 it works very very well so i have right                                 now i don't know maybe                                          different vacuum box on or my project                                 and its production like environment so I                                 have my project I'd build it I test it                                 i'm pretty happy but i will just try to                                 deploy it using the same deployment                                 script on my rag one vm and check that                                 it's keep working even better if you                                 have this a complex system using MongoDB                                 and so on then you can use exactly the                                 same system to avoid people and staining                                 their own version just do some pottery                                 forwarding vagrancy product and that's                                 it so if he talks do it frequently and                                 generate deployment health so it's                                 better if you do it every day every time                                 they manage configuration ok test and                                 plant wall backs that's pretty important                                 everything you do must be able to be a                                 wall back and this really really hard                                 especially for data migration there is                                 no really big cool tools for that maybe                                 the code base is not bad but where                                 something that you need to plan                                 beforehand                                 implement us test strategy so let's                                 imagine that seats our pipeline                                 acceptance su a test on and on and so on                                 you commit a filtration boom you come                                 into a second version oh except on test                                 boom well it's no more maybe you felt                                 something and so on you did a subversion                                 then this seduction cross a complete                                 pipeline and Israelis ready it's really                                 important so you have v                                              works so rarely it's quite simple you                                 have your source repository the first                                 step is what we call commit stage into                                 maven clean style it's a make and so on                                 so it will just create a version v                                      then inside and banana repository we                                 deployed it and then all further tests                                 will use this version till the promotion                                 or we'll leave stage which means we are                                 ready we can cut a release we can give                                 something or even better it might be                                 deployed so the current stage is mostly                                 the Muslim it's one of the most                                 important it must be really fast and it                                 will do a lot of things so package and                                 drag strips and so on so depend of you                                 project but you may have this quirky one                                 walls build only one distribution                                 distribution is a package why we have                                 your configuration new de Provence with                                 everything in one it's really important                                 because then you know what you have and                                 you have a new one thing to download and                                 this package will be used by all the                                 test phase this package nothing else we                                 don't we build it if you are we're doing                                 a maven clean and start or something is                                 wrong describe your environment puppet                                 chef vagrant oh whatever there is no                                 plenty of tools to describe your                                 environment as a good not necessary he's                                 each one down at the first place or yet                                 but do it seriously it's better than you                                 have many first you have a file and                                 everybody can discuss                                 hey if we change that and so on and this                                 is only one goal is to reduce the                                 distance between your development                                 environment your laptop and what is                                 really happening in production always                                 deploys the same way with vagrant and so                                 now it's possible okay back on our                                 project so in term of SCM i use all of                                 those and it never fade builders i'm                                 generally using maven so you say well                                 all the wine manage snapshots we'll just                                 see i use a specific plug-in that i did                                 its continues rationing maven plugin                                 plus the maven release plugin i will                                 explain why i'm using that and i use                                 drinking's nexus and yeah so and while                                 you probably have some what's the same                                 kind of environment you just change                                 different technologies so in terms of                                 development remember developer doesn't                                 want the way they change they walk so                                 you snapshots Wow but we say that we                                 don't want stem cells because it's not                                 your labor yeah but actually they are                                 used to snap shut ins I want to use snap                                 shot so well we will see and use vagrant                                 because they work on my machine is                                 something that I that today it's too                                 expensive so I gradually add you to                                 avoid that I just discover I ground two                                 months ago and since I'm really using                                 everywhere it's really impressive what                                 they did so with vagrant you can                                 provision your system using a shell                                 script / pet manifest chef recipes and                                 so on and you can execute those one on                                 new computer or it should deployment                                 script so if the deployment script is                                 not something that only the operating                                 guys can use and can execute you can do                                 it too and that's really interesting so                                 how does that work commit stage so I do                                 we may even kingdom star I have a one                                 order snapshot it doesn't go to the                                 artifact repository because there is a                                 snapshot then I have something called                                 fast release which is compute ok which                                 computes a unique number                                 VIN number thus underscore                                           release out of that and go in my                                 artifact repository or i compute this                                 number that's pretty simple you are                                 using svn take your revision number you                                 are using get compute the number of                                 commits you have in the corn branch it's                                 always increasing simple actually you                                 can do the same thing on svn but while                                 energy and we are used to revision the                                 plug in the continues continues                                 rationing maven plugin is doing that for                                 you so if we compute it prepare the                                 release and you have nothing to do so no                                 that means that all threads are test                                 will use the                                                          that if you get the tag there is                                 absolutely no snapshots inside its                                 proposed usable but for the developers                                 it doesn't change anything because I                                 used to snapshot on their snapshot why                                 underscore because if you take the                                 versioning the ordering of mavin version                                 this is a really weird character you                                 need to read the algorithm to understand                                 that but when I discovers our algorithm                                 okay the plus and the underscore I've                                 different and ! doing some understand                                 words sting but as a good point is                                     its superior to                                                          snapshot is superior is greater than                                     underscore                                                               still walk and you will use your own                                 version and so on and you won't be in                                 you won't get any problem with this so                                 that's why we are using a dusker for                                 that okay testing stage well integration                                 test then we generally creative and one                                 box or whatever we do the deployment we                                 do all the UI on that one don't forget                                 that we have the                                                     then we continue we do the same thing on                                 a well staging system so no well host                                 that one is a vm so if something goes                                 wrong it's not a big deal we can just                                 crash it and we started from scratch and                                 a on the staging system it's a well                                 system so you need to be more careful                                 that's why we do that on the box before                                 you need to be sure to                                 to do something that works when you                                 arrive on a live system because if you                                 have to connect and to repair it it's                                 kind of bad and so on so the releasing                                 actually if you worry do continuous                                 delivery you will do promoting that                                 means you take the current version and                                 instead of cutting a release you will so                                 say well this was my release candidate                                 and i know i decorate global                                 availability GGA ji bus where that and                                 so on are using this it was and you                                 don't have to rebuild it you have a live                                 system that works you happy with that                                 you just say well it's my release so to                                 link quickly you will have the slide so                                 any fragment is awesome but you can use                                 your toolbox or whatever if depend on                                 what you have and on your project any I                                 never tried Travis so I don't know                                 that's why it's not on the same line but                                 i did it with all of those and i never                                 had any issue actually the latest bamboo                                 as pipeline support natively in terms of                                 configuration management system while                                 shell pepper chef whatever yard now you                                 have plenty of tools just use them they                                 are not easy to learn but its treaty on                                 first which was code is very good                                 because you can test it for your                                 application you can use whatever you                                 want so yet you will do it you can use                                 it / /                                                               want to java web don't forget the mix                                 it's hall it's pretty hard but you've                                 works really well and it's not used                                 enough today i think that's it if you                                 want if you have the need to go to                                 continuous deliveries then try to do it                                 right because it can be ready a                                 nightmare and you need to be sure that                                 you developer understand the new                                 responsibilities they have it's not an                                 additional task you just making things a                                 little bit clearer and more robust                                 follow the rules never shop cards of                                 pipeline never one of the good aspect is                                 a trusted back you trust your project                                 because you see what you are changing                                 and the customer are you the project or                                 product owner see that you are really                                 working I it's unbelievable the number                                 of people saying one but my teams are                                 just spending their time on Twitter or                                 playing to the latest cool games on                                 facebook and so on well actually start                                 walking just like check your svn log and                                 you will see that they're walking but                                 yeah then uses a chance so it's really                                 good for motivation and for the trust                                 and you always been already you always                                 have something to show you our eyes have                                 something that you can deploy in                                 prediction and you know where you are                                 even if you kill me                                                    exactly why you are and this is pretty                                 important and the last point is trite                                 and visualize everything then is more                                 the dashboard lights kind of things use                                 graphic use any dashboard system but                                 check exactly where you are and what you                                 do you do release write it somewhere you                                 do deployment you have a log explosion                                 write it somewhere that's it thank you                                 okay I people give about one minute or                                 two for questions anybody how does                                 continuous delivery fit to scrum sprints                                 that's an interesting question I'd                                 mention it at the beginning that i was                                 using scrum scrum as this print                                 iteration model which does not                                 necessarily fit really well with                                 continuous delivery as you are                                 delivering some all time a day or anyway                                 what I so so far is when you are                                 starting doing continuous delivery for                                 business reason then you development                                 model change and mcgrath in mix between                                 scrum and Kanban which is a bit better                                 on it fit better so it will be a mix                                 anyway never trust such kind of                                 methodologies per se and it's not a                                 Bible or whatever adapt it for you need                                 so if you only want this                                 then Kanban will fit a little bit better                                 but you still have to adapt it to your                                 team soothe process need to be done for                                 you to depend on your size and so on if                                 I out okay thank you
YouTube URL: https://www.youtube.com/watch?v=TvC-l8omR7M


