Title: openSUSE Virtual Conference 2021 - MirrorCache - future backend of download.opensuse.org ?
Publication date: 2021-06-19
Playlist: openSUSE Virtual Conference 2021
Description: 
	https://media.ccc.de/v/3547-mirrorcache-future-backend-of-download-opensuse-org

MirrorCache - mirror redirector

In past months an alternative approach for the backend of download.opensuse.org has been investigated. MirrorCache shows promising results so far and it may become live as the backend of download.opensuse.org in Summer 2021. 
Please join this short talk to briefly hear about the reasons behind the change, how you can prepare for it and how you can help it.

In past months an alternative approach for the backend of download.opensuse.org has been investigated. MirrorCache shows promising results so far and it may become live as the backend of download.opensuse.org in Summer 2021. 
Please join this short talk to briefly hear about the reasons behind the change, how you can prepare for it and how you can help it.

Andrii Nikitin
Captions: 
	00:00:01,580 --> 00:00:05,850
[Music]

00:00:08,559 --> 00:00:12,480
hello

00:00:09,280 --> 00:00:16,160
and welcome to presentation about

00:00:12,480 --> 00:00:17,279
mirror cache my name is andrini keaton i

00:00:16,160 --> 00:00:20,800
am a member

00:00:17,279 --> 00:00:25,680
of build obs team my team

00:00:20,800 --> 00:00:29,199
is responsible for infrastructure behind

00:00:25,680 --> 00:00:32,399
open build service and its

00:00:29,199 --> 00:00:35,920
open source and internal system

00:00:32,399 --> 00:00:37,280
so mirror cache mirror caches mirror

00:00:35,920 --> 00:00:41,440
redirector

00:00:37,280 --> 00:00:45,120
it means that it has a list of

00:00:41,440 --> 00:00:47,360
mirrors configured and it accepts client

00:00:45,120 --> 00:00:50,640
requests and for each request

00:00:47,360 --> 00:00:54,640
it tries to find suitable mirror

00:00:50,640 --> 00:00:57,360
it should consider several

00:00:54,640 --> 00:00:58,480
aspects when selecting suitable mirrors

00:00:57,360 --> 00:01:01,600
first of all it

00:00:58,480 --> 00:01:05,840
must be sure that mirror has

00:01:01,600 --> 00:01:08,320
a requested resource it should

00:01:05,840 --> 00:01:09,520
consider geographical location so the

00:01:08,320 --> 00:01:13,439
mirror is

00:01:09,520 --> 00:01:16,640
the closest to client as possible

00:01:13,439 --> 00:01:19,680
i should consider request type so

00:01:16,640 --> 00:01:20,560
if request comes over secure protocol it

00:01:19,680 --> 00:01:24,080
must

00:01:20,560 --> 00:01:26,720
be sure that mirror can

00:01:24,080 --> 00:01:28,400
operate with this secure protocol

00:01:26,720 --> 00:01:30,640
because sometimes

00:01:28,400 --> 00:01:32,799
some mirrors they can serve requests

00:01:30,640 --> 00:01:34,720
only over http

00:01:32,799 --> 00:01:36,159
sometimes some mirrors they have

00:01:34,720 --> 00:01:39,200
certificates

00:01:36,159 --> 00:01:44,720
expired so but they still use it for

00:01:39,200 --> 00:01:47,520
for http handling etc

00:01:44,720 --> 00:01:48,880
it also should consider stability of

00:01:47,520 --> 00:01:52,399
mirrors so if mirror

00:01:48,880 --> 00:01:55,600
is on and off it is probably not

00:01:52,399 --> 00:01:56,240
redirect request to it and if no

00:01:55,600 --> 00:02:00,000
suitable

00:01:56,240 --> 00:02:03,040
mirror found then sometimes

00:02:00,000 --> 00:02:06,479
the redirector can serve request

00:02:03,040 --> 00:02:09,599
on itself and sometimes it has its

00:02:06,479 --> 00:02:12,640
default configured

00:02:09,599 --> 00:02:17,200
and it redirects the request

00:02:12,640 --> 00:02:20,959
there now regarding

00:02:17,200 --> 00:02:24,000
open source and package updates

00:02:20,959 --> 00:02:24,879
and they are happening with super

00:02:24,000 --> 00:02:27,920
utility

00:02:24,879 --> 00:02:29,760
and super communicates with download

00:02:27,920 --> 00:02:33,840
open source.org

00:02:29,760 --> 00:02:37,040
and below you can see

00:02:33,840 --> 00:02:38,560
request which is very similar to what

00:02:37,040 --> 00:02:41,599
zipper does

00:02:38,560 --> 00:02:44,640
you can try it and your command line

00:02:41,599 --> 00:02:49,200
and in this

00:02:44,640 --> 00:02:50,720
case download opensuse.org replies with

00:02:49,200 --> 00:02:53,599
redirection

00:02:50,720 --> 00:02:54,879
status code so basically the request

00:02:53,599 --> 00:02:58,560
it's redirected

00:02:54,879 --> 00:03:00,959
to a mirror that it's actually german

00:02:58,560 --> 00:03:02,319
mirror if you try the same request in

00:03:00,959 --> 00:03:05,599
your country

00:03:02,319 --> 00:03:08,319
you can be redirect probably to another

00:03:05,599 --> 00:03:11,440
mirror that is close to you

00:03:08,319 --> 00:03:16,000
and we must say that this system is very

00:03:11,440 --> 00:03:19,280
dynamic uh there's a lot of packages

00:03:16,000 --> 00:03:22,319
a lot of different projects and

00:03:19,280 --> 00:03:25,519
new packages released every hour

00:03:22,319 --> 00:03:28,640
and they are synced some

00:03:25,519 --> 00:03:30,480
mirrors get updates faster some mirrors

00:03:28,640 --> 00:03:33,280
get updates slower

00:03:30,480 --> 00:03:33,680
some errors go down some mirrors return

00:03:33,280 --> 00:03:37,760
up

00:03:33,680 --> 00:03:41,599
so it's quite a challenge to

00:03:37,760 --> 00:03:46,480
have all information intact and

00:03:41,599 --> 00:03:49,680
serve requests in optimal way

00:03:46,480 --> 00:03:52,959
and this regardless of mention

00:03:49,680 --> 00:03:57,840
life cycle basically of package it gets

00:03:52,959 --> 00:04:01,519
built uh in open build servers

00:03:57,840 --> 00:04:03,519
and build open source org then it slowly

00:04:01,519 --> 00:04:06,159
sync to all the mirrors

00:04:03,519 --> 00:04:06,879
then it eventually discovered by special

00:04:06,159 --> 00:04:10,239
scripts

00:04:06,879 --> 00:04:12,560
and then registered in database

00:04:10,239 --> 00:04:13,680
i will mention about this discovery a

00:04:12,560 --> 00:04:17,600
bit later

00:04:13,680 --> 00:04:20,720
and after

00:04:17,600 --> 00:04:22,479
package is registered in database for

00:04:20,720 --> 00:04:26,960
particular mirror that mirror

00:04:22,479 --> 00:04:29,440
is ready to serve request and forge your

00:04:26,960 --> 00:04:31,440
requests from client can be redirected

00:04:29,440 --> 00:04:34,880
to

00:04:31,440 --> 00:04:37,759
this mirror and

00:04:34,880 --> 00:04:39,520
also we must mention this topic that

00:04:37,759 --> 00:04:42,240
zipper uses special

00:04:39,520 --> 00:04:45,360
metal link format when it expects

00:04:42,240 --> 00:04:48,080
replies from download opensuse.org

00:04:45,360 --> 00:04:50,479
it doesn't change much uh the the only

00:04:48,080 --> 00:04:51,120
difference that it has metadata and a

00:04:50,479 --> 00:04:53,440
list of

00:04:51,120 --> 00:04:54,960
mirrors but if you are on these

00:04:53,440 --> 00:04:57,840
presentations

00:04:54,960 --> 00:04:59,120
in this presentation you probably better

00:04:57,840 --> 00:05:03,199
to know what

00:04:59,120 --> 00:05:07,600
what is metaling and that super uses

00:05:03,199 --> 00:05:10,160
it here comes mirror brain it is

00:05:07,600 --> 00:05:11,680
current bacon behind download open

00:05:10,160 --> 00:05:15,120
source.org

00:05:11,680 --> 00:05:16,880
that is responsible for communication

00:05:15,120 --> 00:05:20,960
with super

00:05:16,880 --> 00:05:24,560
and it has it is basically

00:05:20,960 --> 00:05:27,600
a batches model

00:05:24,560 --> 00:05:31,840
on that communication database

00:05:27,600 --> 00:05:34,880
and it also has scanner script that goes

00:05:31,840 --> 00:05:38,400
all over the mirrors

00:05:34,880 --> 00:05:41,039
and register updates

00:05:38,400 --> 00:05:43,840
in database this is discovery that was

00:05:41,039 --> 00:05:43,840
mentioned before

00:05:44,080 --> 00:05:51,600
so mirror brain is very simple and

00:05:48,800 --> 00:05:52,000
it has simple approach and good project

00:05:51,600 --> 00:05:55,440
that was

00:05:52,000 --> 00:05:56,720
servant for years but there were reasons

00:05:55,440 --> 00:06:00,560
complex reasons

00:05:56,720 --> 00:06:04,240
to look into alternative solution

00:06:00,560 --> 00:06:07,120
and they're so complex that i

00:06:04,240 --> 00:06:09,039
can deliver a dedicated presentation

00:06:07,120 --> 00:06:12,479
about it so i will skip

00:06:09,039 --> 00:06:16,639
at this point and we will have a look

00:06:12,479 --> 00:06:19,919
what mirror cache brings into play

00:06:16,639 --> 00:06:22,000
samira is also mirrorless director and

00:06:19,919 --> 00:06:25,840
its planet began to replace

00:06:22,000 --> 00:06:28,880
mirror brain mirror cache brings

00:06:25,840 --> 00:06:32,800
job q um

00:06:28,880 --> 00:06:33,759
so it will have workers new workers can

00:06:32,800 --> 00:06:37,199
be added if

00:06:33,759 --> 00:06:40,479
needed all the workers will pick up

00:06:37,199 --> 00:06:42,080
jobs according to priority maybe to some

00:06:40,479 --> 00:06:45,120
other parameters

00:06:42,080 --> 00:06:47,759
jobs will have own status so it's easy

00:06:45,120 --> 00:06:49,120
to see failure jobs it is easy to retry

00:06:47,759 --> 00:06:52,400
jobs it is easy

00:06:49,120 --> 00:06:56,000
to reproduce jobs

00:06:52,400 --> 00:06:59,000
or maybe cancel some jobs

00:06:56,000 --> 00:07:01,039
and it's more suitable in

00:06:59,000 --> 00:07:04,080
troubleshooting

00:07:01,039 --> 00:07:07,039
to see what what's going on

00:07:04,080 --> 00:07:08,000
so basically it's the tool that brings

00:07:07,039 --> 00:07:11,360
confidence

00:07:08,000 --> 00:07:14,720
and allows to

00:07:11,360 --> 00:07:14,720
manage uh

00:07:14,960 --> 00:07:20,000
but manage things more smoothly because

00:07:18,080 --> 00:07:23,680
it's a lot of going on

00:07:20,000 --> 00:07:27,840
and it's sometimes quite hard to

00:07:23,680 --> 00:07:31,680
find which errors are relevant

00:07:27,840 --> 00:07:34,720
and um to understand

00:07:31,680 --> 00:07:38,479
where the problems come from

00:07:34,720 --> 00:07:39,440
so this also makes miracash less

00:07:38,479 --> 00:07:44,560
dependent

00:07:39,440 --> 00:07:47,680
on rescan of mirrors because

00:07:44,560 --> 00:07:50,000
mirror brain currently scans over and

00:07:47,680 --> 00:07:53,270
over huge locations that

00:07:50,000 --> 00:07:55,280
basically never updated and

00:07:53,270 --> 00:07:58,400
[Music]

00:07:55,280 --> 00:08:02,080
it is waste of resources and with

00:07:58,400 --> 00:08:03,759
mirror cache it more reacts on what's

00:08:02,080 --> 00:08:07,599
going on on front end

00:08:03,759 --> 00:08:08,080
so if clients request some unknown files

00:08:07,599 --> 00:08:10,560
that

00:08:08,080 --> 00:08:13,199
neural cache is not aware of it will

00:08:10,560 --> 00:08:14,960
automatically schedule some jobs that

00:08:13,199 --> 00:08:18,400
will fix and register

00:08:14,960 --> 00:08:22,319
those files uh i will mention the

00:08:18,400 --> 00:08:25,360
about this automatic discovery on

00:08:22,319 --> 00:08:26,000
the next slide also mirror cache brings

00:08:25,360 --> 00:08:30,879
proper

00:08:26,000 --> 00:08:33,680
handling of https and ipv6 requests

00:08:30,879 --> 00:08:34,959
it is something with which mirror cache

00:08:33,680 --> 00:08:37,680
struggles with

00:08:34,959 --> 00:08:40,080
all the mirror neural brain struggles

00:08:37,680 --> 00:08:43,279
neural cache is a rich web application

00:08:40,080 --> 00:08:47,040
so it it has some forms

00:08:43,279 --> 00:08:49,360
web forms for editing or adding new

00:08:47,040 --> 00:08:52,080
mirrors

00:08:49,360 --> 00:08:53,360
it also has some forms from for

00:08:52,080 --> 00:08:55,839
statistics

00:08:53,360 --> 00:08:55,839
or

00:08:58,720 --> 00:09:06,399
maybe troubleshooting or

00:09:01,839 --> 00:09:08,560
logging and all the mirror cache by

00:09:06,399 --> 00:09:12,160
designing doesn't need to have

00:09:08,560 --> 00:09:15,360
access file system access to

00:09:12,160 --> 00:09:17,760
files that are served uh mirror brain

00:09:15,360 --> 00:09:22,080
also has this option but it is more like

00:09:17,760 --> 00:09:25,440
work around and in mirror cache it comes

00:09:22,080 --> 00:09:27,760
its core feature and also since

00:09:25,440 --> 00:09:29,440
mirror cache does not require to have

00:09:27,760 --> 00:09:32,080
access physical access

00:09:29,440 --> 00:09:35,600
to all the files that are served it is

00:09:32,080 --> 00:09:38,959
possible to spawn your cache instance in

00:09:35,600 --> 00:09:41,920
anywhere in the world and it brings

00:09:38,959 --> 00:09:43,120
possibility to have geographical cluster

00:09:41,920 --> 00:09:46,880
i will stop on

00:09:43,120 --> 00:09:49,950
it a bit later as well

00:09:46,880 --> 00:09:52,399
so this diagram shows

00:09:49,950 --> 00:09:57,120
[Music]

00:09:52,399 --> 00:09:57,120
more about automatic scheduling of jobs

00:09:57,760 --> 00:10:00,959
the main thing that it has background

00:09:59,839 --> 00:10:04,079
jobs and

00:10:00,959 --> 00:10:06,800
some of them monitor what's going on

00:10:04,079 --> 00:10:08,959
on the front end and if there is some

00:10:06,800 --> 00:10:10,800
requests to unknown files it will

00:10:08,959 --> 00:10:13,200
schedule

00:10:10,800 --> 00:10:14,800
special jobs that will discover those

00:10:13,200 --> 00:10:18,560
files and register

00:10:14,800 --> 00:10:21,440
them properly and scan all the mirrors

00:10:18,560 --> 00:10:21,440
that are needed

00:10:22,000 --> 00:10:25,360
so current state there's three pilot

00:10:24,560 --> 00:10:30,880
instances

00:10:25,360 --> 00:10:34,399
one is europe with european mirrors only

00:10:30,880 --> 00:10:35,440
one is with north america mirrors only

00:10:34,399 --> 00:10:39,279
in one instance

00:10:35,440 --> 00:10:40,880
is kind of gateway that has all the rest

00:10:39,279 --> 00:10:43,920
mirrors so whenever

00:10:40,880 --> 00:10:46,959
european or north america

00:10:43,920 --> 00:10:48,480
uh clients request something from neural

00:10:46,959 --> 00:10:51,600
cache opensuse.org

00:10:48,480 --> 00:10:53,440
their request gets redirected to one of

00:10:51,600 --> 00:10:56,480
local instances

00:10:53,440 --> 00:10:57,920
and that instance will try to find a

00:10:56,480 --> 00:11:00,959
suitable mirror

00:10:57,920 --> 00:11:01,440
and all other countries will be served

00:11:00,959 --> 00:11:05,360
by

00:11:01,440 --> 00:11:08,000
your cash open suse or there's also some

00:11:05,360 --> 00:11:11,600
community instance that you can try

00:11:08,000 --> 00:11:14,240
um currently all these instances run

00:11:11,600 --> 00:11:14,880
in test mode but there's no known

00:11:14,240 --> 00:11:18,480
critical

00:11:14,880 --> 00:11:22,000
issues feel free to use them for package

00:11:18,480 --> 00:11:25,440
updates i do use them

00:11:22,000 --> 00:11:29,440
on my machines in in my tests

00:11:25,440 --> 00:11:32,399
in ci

00:11:29,440 --> 00:11:33,279
i have nothing to complain the only

00:11:32,399 --> 00:11:36,079
thing that they

00:11:33,279 --> 00:11:37,839
don't have powerful hardware yet and

00:11:36,079 --> 00:11:41,360
they are not optimized

00:11:37,839 --> 00:11:42,560
for high load this is same something to

00:11:41,360 --> 00:11:45,279
be

00:11:42,560 --> 00:11:46,959
implemented and of course when it's

00:11:45,279 --> 00:11:49,839
production rate then

00:11:46,959 --> 00:11:50,639
most probably every continent will get

00:11:49,839 --> 00:11:54,160
all

00:11:50,639 --> 00:11:55,440
mirror cache instance so in the best

00:11:54,160 --> 00:11:58,320
case scenario

00:11:55,440 --> 00:11:59,040
requests from one continent will not

00:11:58,320 --> 00:12:02,480
leave

00:11:59,040 --> 00:12:04,639
that continent and will be served

00:12:02,480 --> 00:12:05,920
locked by local instance because

00:12:04,639 --> 00:12:09,120
currently machine

00:12:05,920 --> 00:12:12,079
in australia for example in japan it's

00:12:09,120 --> 00:12:15,839
constantly communicates with the

00:12:12,079 --> 00:12:19,680
main server in nuremberg

00:12:15,839 --> 00:12:20,800
and which redirects them back to some of

00:12:19,680 --> 00:12:25,839
local mirrors

00:12:20,800 --> 00:12:25,839
if possible um

00:12:26,079 --> 00:12:32,160
so outside of open source

00:12:29,360 --> 00:12:32,800
infrastructure mirror cache can be

00:12:32,160 --> 00:12:36,079
usable

00:12:32,800 --> 00:12:36,959
also in some cases when mirror

00:12:36,079 --> 00:12:40,000
redirector

00:12:36,959 --> 00:12:43,680
is needed and then automatic discovery

00:12:40,000 --> 00:12:47,360
of what mirrors have is

00:12:43,680 --> 00:12:48,639
needed so feel free to evaluate if you

00:12:47,360 --> 00:12:51,760
have such scenario

00:12:48,639 --> 00:12:53,760
in mind this concludes this short

00:12:51,760 --> 00:12:55,760
presentation about mirror cache

00:12:53,760 --> 00:12:57,680
special thanks to modulations web

00:12:55,760 --> 00:13:00,750
framework and minion job

00:12:57,680 --> 00:13:02,240
q i found these projects fun to

00:13:00,750 --> 00:13:07,839
[Music]

00:13:02,240 --> 00:13:07,839

YouTube URL: https://www.youtube.com/watch?v=e0Cf4QMHmug


