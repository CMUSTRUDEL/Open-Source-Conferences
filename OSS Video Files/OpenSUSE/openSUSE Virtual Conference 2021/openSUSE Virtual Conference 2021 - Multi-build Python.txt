Title: openSUSE Virtual Conference 2021 - Multi-build Python
Publication date: 2021-06-19
Playlist: openSUSE Virtual Conference 2021
Description: 
	https://media.ccc.de/v/3538-multi-build-python

Shipping modules for multiple version of Python, all at once

openSUSE Tumbleweed now provides the Python interpreter and packages built for Python 3.6, 3.8 and 3.9. In this talk, I'll go through broadly how the interpreter is packaged, how module packages are built, how packagers can use the provided macros to their benefit, some sharp edges to watch out for, and what future plans we have.

Please note: I am on the East Coast of Australia, so please be aware of that when scheduling.

openSUSE Tumbleweed now provides the Python interpreter and packages built for Python 3.6, 3.8 and 3.9. In this talk, I'll go through broadly how the interpreter is packaged, how module packages are built, how packagers can use the provided macros to their benefit, some sharp edges to watch out for, and what future plans we have.

Please note: I am on the East Coast of Australia, so please be aware of that when scheduling.

StevenK
Captions: 
	00:00:01,580 --> 00:00:05,850
[Music]

00:00:10,559 --> 00:00:13,840
good morning

00:00:11,280 --> 00:00:15,120
good afternoon or good evening wherever

00:00:13,840 --> 00:00:17,199
you are in the world

00:00:15,120 --> 00:00:18,320
and welcome to my talk about multi-bill

00:00:17,199 --> 00:00:22,880
python

00:00:18,320 --> 00:00:26,000
here in this beautiful 2020 continuation

00:00:22,880 --> 00:00:26,720
uh so first a little bit about me i live

00:00:26,000 --> 00:00:29,119
in sydney

00:00:26,720 --> 00:00:31,760
australia surrounded by wildlife that

00:00:29,119 --> 00:00:34,640
wants to kill or maim me

00:00:31,760 --> 00:00:36,719
and i have roughly 20 years experience

00:00:34,640 --> 00:00:39,600
with packaging software

00:00:36,719 --> 00:00:41,520
most of that is debian based but a lot

00:00:39,600 --> 00:00:44,800
of the concepts remain the same

00:00:41,520 --> 00:00:47,200
across disciplines and distributions

00:00:44,800 --> 00:00:48,640
i started with python in roughly the

00:00:47,200 --> 00:00:51,360
year 2001

00:00:48,640 --> 00:00:52,879
and i quickly fell in love with it so

00:00:51,360 --> 00:00:56,399
i've been following along with it

00:00:52,879 --> 00:00:58,559
from the early days of 1.4 i've been at

00:00:56,399 --> 00:01:01,039
souza now for coming up to five years

00:00:58,559 --> 00:01:02,719
and i've spent just over a year on the

00:01:01,039 --> 00:01:06,320
python packaging team

00:01:02,719 --> 00:01:08,159
with a few others

00:01:06,320 --> 00:01:10,240
so i'm going to assume that you have

00:01:08,159 --> 00:01:11,439
some familiarity with the rpm build

00:01:10,240 --> 00:01:14,479
system

00:01:11,439 --> 00:01:17,520
how macro expansion works and a tiny bit

00:01:14,479 --> 00:01:19,360
of knowledge about obs

00:01:17,520 --> 00:01:21,600
so which version should we ship

00:01:19,360 --> 00:01:22,240
tumbleweed currently ships the full

00:01:21,600 --> 00:01:25,520
stack

00:01:22,240 --> 00:01:28,560
for python 3.6 3.8 and

00:01:25,520 --> 00:01:30,320
3.9 so this means we make every effort

00:01:28,560 --> 00:01:33,439
to fix build failures

00:01:30,320 --> 00:01:36,159
for leaf packages in for those versions

00:01:33,439 --> 00:01:38,560
we also currently ship python 2.7 intel

00:01:36,159 --> 00:01:41,360
void but we're trying to remove it

00:01:38,560 --> 00:01:42,640
and disentangling it is is quite hard

00:01:41,360 --> 00:01:46,079
work

00:01:42,640 --> 00:01:47,920
we don't build any leaf packages for 2.7

00:01:46,079 --> 00:01:50,320
uh and a lot of upstreams are shifting

00:01:47,920 --> 00:01:53,439
their focus away from it obviously

00:01:50,320 --> 00:01:55,680
uh the main version of python so that is

00:01:53,439 --> 00:01:57,119
what you get when you run user bin

00:01:55,680 --> 00:02:00,479
python 3

00:01:57,119 --> 00:02:05,040
is currently 3.8

00:02:00,479 --> 00:02:07,360
leap 15 ships 2.7 and 3.6

00:02:05,040 --> 00:02:08,160
as its fully supported versions so we

00:02:07,360 --> 00:02:12,080
build

00:02:08,160 --> 00:02:14,879
packages there for 2.7 and 3.6

00:02:12,080 --> 00:02:15,920
we do ship later versions uh but only

00:02:14,879 --> 00:02:18,000
with the interpreter

00:02:15,920 --> 00:02:19,200
pip and setup tools and so we don't

00:02:18,000 --> 00:02:22,640
build leaf packages

00:02:19,200 --> 00:02:24,560
for those later versions

00:02:22,640 --> 00:02:27,360
so there's this disconnect between

00:02:24,560 --> 00:02:30,720
python base and the python package

00:02:27,360 --> 00:02:33,040
python base ships the actual binary

00:02:30,720 --> 00:02:34,239
and the parts of the standard library

00:02:33,040 --> 00:02:36,800
that don't require

00:02:34,239 --> 00:02:39,120
external dependencies because it's

00:02:36,800 --> 00:02:41,200
contained in ring one

00:02:39,120 --> 00:02:42,720
the python package contains everything

00:02:41,200 --> 00:02:45,120
else

00:02:42,720 --> 00:02:48,000
because some modules require external c

00:02:45,120 --> 00:02:49,760
libraries and things like that

00:02:48,000 --> 00:02:51,760
that's a little bit of a lie too because

00:02:49,760 --> 00:02:53,440
python base requires bluetooth but we

00:02:51,760 --> 00:02:55,360
get around that

00:02:53,440 --> 00:02:57,280
uh python devel includes the header

00:02:55,360 --> 00:02:59,599
files like python.h

00:02:57,280 --> 00:03:01,680
and we of course build documentation in

00:02:59,599 --> 00:03:04,640
the python docs package

00:03:01,680 --> 00:03:07,280
python as a bare word in our in in

00:03:04,640 --> 00:03:11,360
package names means python 2

00:03:07,280 --> 00:03:13,360
whereas python 3 has the version name

00:03:11,360 --> 00:03:15,040
uh the version number in the name such

00:03:13,360 --> 00:03:18,879
as python 38 devel

00:03:15,040 --> 00:03:21,599
or python 39 base

00:03:18,879 --> 00:03:24,319
so the macros i'm going to talk about

00:03:21,599 --> 00:03:26,720
are contained in this package

00:03:24,319 --> 00:03:28,640
they're standard rpm macros and that

00:03:26,720 --> 00:03:31,519
means they're written in lua and not

00:03:28,640 --> 00:03:34,000
python so i'm going to skip over the

00:03:31,519 --> 00:03:34,000
internals

00:03:34,480 --> 00:03:39,200
so i introduced this macro first because

00:03:37,040 --> 00:03:42,720
pretty much every other macro uses

00:03:39,200 --> 00:03:43,760
it we set this macro in the tumbleweed

00:03:42,720 --> 00:03:46,959
project config

00:03:43,760 --> 00:03:48,720
and the leap project config

00:03:46,959 --> 00:03:51,120
to which versions of python we want to

00:03:48,720 --> 00:03:53,680
build modules for

00:03:51,120 --> 00:03:54,319
so this is currently set to python 3 6

00:03:53,680 --> 00:03:57,439
python 3

00:03:54,319 --> 00:03:59,599
8 and python 3 9 for tomboy

00:03:57,439 --> 00:04:01,840
if you don't specifically override it

00:03:59,599 --> 00:04:04,959
that's what you'll get

00:04:01,840 --> 00:04:06,720
you can override it if you wish and

00:04:04,959 --> 00:04:08,239
if you only want to build for a specific

00:04:06,720 --> 00:04:11,280
version of python

00:04:08,239 --> 00:04:11,920
you can set this to python 3 and we call

00:04:11,280 --> 00:04:14,879
this

00:04:11,920 --> 00:04:17,519
single spec so you'll only build for

00:04:14,879 --> 00:04:20,079
whatever the main version of python is

00:04:17,519 --> 00:04:21,519
when it's built uh so some complex

00:04:20,079 --> 00:04:25,520
packages do this like

00:04:21,519 --> 00:04:27,520
tensorflow so python build and python

00:04:25,520 --> 00:04:30,639
install these two macros

00:04:27,520 --> 00:04:33,280
both just basically call setup pi uh

00:04:30,639 --> 00:04:34,800
for each version python build called

00:04:33,280 --> 00:04:37,759
setup pi build

00:04:34,800 --> 00:04:38,880
and python install does the same thing

00:04:37,759 --> 00:04:43,120
and calls pi

00:04:38,880 --> 00:04:45,280
set up pi install so python expand

00:04:43,120 --> 00:04:46,240
loops over whatever is defined in

00:04:45,280 --> 00:04:48,560
percent python

00:04:46,240 --> 00:04:49,759
so you can run things for each version

00:04:48,560 --> 00:04:52,000
of python

00:04:49,759 --> 00:04:53,040
for instance you may wish to remove

00:04:52,000 --> 00:04:56,320
something in each

00:04:53,040 --> 00:04:58,160
site package directory or a run it run a

00:04:56,320 --> 00:05:01,680
custom test runner

00:04:58,160 --> 00:05:04,080
or run f dupes or or something i

00:05:01,680 --> 00:05:05,360
include this macro fairly early because

00:05:04,080 --> 00:05:06,800
a lot of the macros

00:05:05,360 --> 00:05:10,560
that i mentioned further on down the

00:05:06,800 --> 00:05:13,360
track use this internally

00:05:10,560 --> 00:05:14,960
so from time to time you may need to

00:05:13,360 --> 00:05:16,880
know what version of python you're

00:05:14,960 --> 00:05:18,800
building under

00:05:16,880 --> 00:05:20,880
so you can for example on the build

00:05:18,800 --> 00:05:23,919
require on a module

00:05:20,880 --> 00:05:26,479
for one version of python only

00:05:23,919 --> 00:05:27,360
so these two macros help with that so

00:05:26,479 --> 00:05:31,680
python

00:05:27,360 --> 00:05:33,919
version returns the minor version so 3.6

00:05:31,680 --> 00:05:34,960
and the no dots variant returns a whole

00:05:33,919 --> 00:05:38,000
number so

00:05:34,960 --> 00:05:40,560
36. so

00:05:38,000 --> 00:05:41,520
skip python is a definition and not a

00:05:40,560 --> 00:05:44,720
macro

00:05:41,520 --> 00:05:47,120
uh set it to one and that will instruct

00:05:44,720 --> 00:05:48,639
uh other macros such as python expand

00:05:47,120 --> 00:05:51,840
that they should skip

00:05:48,639 --> 00:05:52,560
this version so for example percent

00:05:51,840 --> 00:05:56,319
define

00:05:52,560 --> 00:05:58,639
skip underscore python36 one

00:05:56,319 --> 00:06:00,720
uh you could specify it multiple times

00:05:58,639 --> 00:06:02,240
but any more than two

00:06:00,720 --> 00:06:03,919
you should probably think about setting

00:06:02,240 --> 00:06:05,840
percent pythons

00:06:03,919 --> 00:06:07,440
uh and you can't use this definition to

00:06:05,840 --> 00:06:09,120
switch to single spec

00:06:07,440 --> 00:06:10,960
because if you do then the package

00:06:09,120 --> 00:06:13,280
you're left with will

00:06:10,960 --> 00:06:15,360
contain that version and not be called

00:06:13,280 --> 00:06:16,080
for example python 3. it will be python

00:06:15,360 --> 00:06:19,680
3 8

00:06:16,080 --> 00:06:20,560
something uh so python module we use

00:06:19,680 --> 00:06:23,360
this

00:06:20,560 --> 00:06:25,919
in build requires uh it will add on

00:06:23,360 --> 00:06:26,800
python dash for you and we'll also loop

00:06:25,919 --> 00:06:30,479
over

00:06:26,800 --> 00:06:33,280
every version in pythons so

00:06:30,479 --> 00:06:34,319
build requires python underscore module

00:06:33,280 --> 00:06:38,880
requests

00:06:34,319 --> 00:06:41,919
will install python36 requests python38

00:06:38,880 --> 00:06:44,080
requests and python 39 requests

00:06:41,919 --> 00:06:46,319
um this can also get a little awkward

00:06:44,080 --> 00:06:47,120
when modules already have python in the

00:06:46,319 --> 00:06:49,360
names

00:06:47,120 --> 00:06:51,000
so you get things like build requires

00:06:49,360 --> 00:06:53,840
python module

00:06:51,000 --> 00:06:55,919
python-fu

00:06:53,840 --> 00:06:57,039
and due to the way this expansion works

00:06:55,919 --> 00:07:00,400
you can specify

00:06:57,039 --> 00:07:04,400
python module devel which will pull in

00:07:00,400 --> 00:07:06,800
for example python38 devel

00:07:04,400 --> 00:07:08,080
uh so this line noise exists in a lot of

00:07:06,800 --> 00:07:10,960
spec files

00:07:08,080 --> 00:07:13,120
uh it defines an expansion for python

00:07:10,960 --> 00:07:15,360
module if it doesn't exist

00:07:13,120 --> 00:07:16,160
uh so that it will pull in python foo

00:07:15,360 --> 00:07:19,360
and

00:07:16,160 --> 00:07:20,479
python 3 foo if your spec file is really

00:07:19,360 --> 00:07:22,960
only for tumbleweed

00:07:20,479 --> 00:07:23,680
and it won't go anywhere older then you

00:07:22,960 --> 00:07:26,479
can

00:07:23,680 --> 00:07:28,479
you don't need this you can remove it

00:07:26,479 --> 00:07:31,280
but it also doesn't hurt because it will

00:07:28,479 --> 00:07:33,759
only take effect if python module isn't

00:07:31,280 --> 00:07:33,759
defined

00:07:34,160 --> 00:07:38,960
so python cell packages python files

00:07:36,000 --> 00:07:42,160
this will expand your source package

00:07:38,960 --> 00:07:45,280
to pythonx name so

00:07:42,160 --> 00:07:48,639
for example django where it includes

00:07:45,280 --> 00:07:50,800
the version number uh the macro

00:07:48,639 --> 00:07:52,479
effectively generates new spec files for

00:07:50,800 --> 00:07:55,919
each version it encounters

00:07:52,479 --> 00:07:58,160
and along with its friend python files

00:07:55,919 --> 00:07:59,280
and that expands the percent file

00:07:58,160 --> 00:08:01,039
section

00:07:59,280 --> 00:08:02,879
i've listed these macros together

00:08:01,039 --> 00:08:03,360
because you have to use them together if

00:08:02,879 --> 00:08:04,879
you

00:08:03,360 --> 00:08:07,199
if you have one without the other you'll

00:08:04,879 --> 00:08:09,199
get errors

00:08:07,199 --> 00:08:11,360
uh so since a fair number of packages

00:08:09,199 --> 00:08:13,280
ship entry points that are installed

00:08:11,360 --> 00:08:14,800
into user bin

00:08:13,280 --> 00:08:16,800
this means we need to specifically

00:08:14,800 --> 00:08:18,400
handle that case when we build packages

00:08:16,800 --> 00:08:20,879
for multiple versions

00:08:18,400 --> 00:08:21,440
since we're not able to ship the same

00:08:20,879 --> 00:08:24,879
file

00:08:21,440 --> 00:08:26,000
in multiple packages twisted is a really

00:08:24,879 --> 00:08:28,560
nice complex example

00:08:26,000 --> 00:08:30,080
of of this because it ships a lot of

00:08:28,560 --> 00:08:32,959
entry points

00:08:30,080 --> 00:08:34,479
so we we use clone to clone the script

00:08:32,959 --> 00:08:37,120
which moves it

00:08:34,479 --> 00:08:38,320
from script name to script name dash

00:08:37,120 --> 00:08:40,800
version

00:08:38,320 --> 00:08:42,640
and then in the file section we mark it

00:08:40,800 --> 00:08:46,240
as an alternative

00:08:42,640 --> 00:08:49,200
uh don't forget to requires post

00:08:46,240 --> 00:08:49,839
update alternatives as well as requires

00:08:49,200 --> 00:08:52,800
post on

00:08:49,839 --> 00:08:54,640
update alternatives uh and be sure to

00:08:52,800 --> 00:08:57,279
add python yeah install

00:08:54,640 --> 00:08:58,959
alternative and its opposite python

00:08:57,279 --> 00:09:01,920
uninstall alternative

00:08:58,959 --> 00:09:03,279
to the post and post on sections don't

00:09:01,920 --> 00:09:06,800
worry if you missed uh

00:09:03,279 --> 00:09:08,880
all of this it will come up later

00:09:06,800 --> 00:09:10,399
so python site lib python side arch

00:09:08,880 --> 00:09:13,680
they're expand

00:09:10,399 --> 00:09:16,800
to the uh firstly to the arc

00:09:13,680 --> 00:09:19,839
arch independent site packages uh so

00:09:16,800 --> 00:09:22,880
disk utils calls this uh puber lib

00:09:19,839 --> 00:09:24,480
as in modules that are pure python uh

00:09:22,880 --> 00:09:26,480
and that's most often used because most

00:09:24,480 --> 00:09:29,360
modules are pure python

00:09:26,480 --> 00:09:31,200
and the arch dependent one disk utils

00:09:29,360 --> 00:09:32,959
calls this plat lib

00:09:31,200 --> 00:09:34,640
and you'll use that for packages that

00:09:32,959 --> 00:09:38,720
build a shared object

00:09:34,640 --> 00:09:44,000
a dot so file or use something like

00:09:38,720 --> 00:09:47,600
cffi so these testing macros so python

00:09:44,000 --> 00:09:49,360
pi unit test and its architecture cousin

00:09:47,600 --> 00:09:52,480
they set the python path environment

00:09:49,360 --> 00:09:55,519
variable and then call python minus m

00:09:52,480 --> 00:09:59,040
unit test discover which discovers

00:09:55,519 --> 00:10:01,360
tests and then runs them percent pi

00:09:59,040 --> 00:10:02,480
test and its arch dependent cousin

00:10:01,360 --> 00:10:05,440
percent

00:10:02,480 --> 00:10:06,480
pi test underscore arch sets the python

00:10:05,440 --> 00:10:08,880
path

00:10:06,480 --> 00:10:10,240
uh and then calls pi tests to do the

00:10:08,880 --> 00:10:12,399
same

00:10:10,240 --> 00:10:13,839
uh some packages still call the last one

00:10:12,399 --> 00:10:17,040
on the list

00:10:13,839 --> 00:10:20,480
but upstream setup tools has deprecated

00:10:17,040 --> 00:10:22,160
that use of setup pie and so you should

00:10:20,480 --> 00:10:24,560
update them to use the first

00:10:22,160 --> 00:10:27,200
macro but also you shouldn't feel the

00:10:24,560 --> 00:10:29,920
need to be constrained by these macros

00:10:27,200 --> 00:10:30,560
only to pick on twisted again it for

00:10:29,920 --> 00:10:34,240
example

00:10:30,560 --> 00:10:36,480
uses a trial in its uh check section to

00:10:34,240 --> 00:10:39,200
run tests

00:10:36,480 --> 00:10:41,279
so let's let's put this all together so

00:10:39,200 --> 00:10:43,920
we have a a simple example

00:10:41,279 --> 00:10:44,720
uh python crayons i've trimmed down the

00:10:43,920 --> 00:10:47,440
spec file

00:10:44,720 --> 00:10:48,240
uh so it'll fit on screen i've dropped

00:10:47,440 --> 00:10:51,360
things like

00:10:48,240 --> 00:10:52,640
version release description and the prep

00:10:51,360 --> 00:10:55,519
section

00:10:52,640 --> 00:10:57,120
so you can see we only really require

00:10:55,519 --> 00:11:00,160
setup tools python

00:10:57,120 --> 00:11:01,440
module and the rpm macros package to

00:11:00,160 --> 00:11:03,839
build it

00:11:01,440 --> 00:11:06,240
so this package also contains no tests

00:11:03,839 --> 00:11:09,920
so there's no checks action

00:11:06,240 --> 00:11:11,040
but this shows how python module python

00:11:09,920 --> 00:11:14,720
sub packages

00:11:11,040 --> 00:11:16,800
python build python install python files

00:11:14,720 --> 00:11:19,519
and the python site led macros all work

00:11:16,800 --> 00:11:21,440
together in one spec file

00:11:19,519 --> 00:11:24,079
so if we build it it gives us the source

00:11:21,440 --> 00:11:24,560
rpm and the three binary packages for

00:11:24,079 --> 00:11:27,839
each

00:11:24,560 --> 00:11:29,600
python version and if we pick on

00:11:27,839 --> 00:11:32,800
python39 crayons

00:11:29,600 --> 00:11:36,000
you can see it ships the pi cache files

00:11:32,800 --> 00:11:39,760
the egg info the crayons module itself

00:11:36,000 --> 00:11:42,160
uh it's readme and the license

00:11:39,760 --> 00:11:43,040
so this is a more complex example python

00:11:42,160 --> 00:11:44,560
raven

00:11:43,040 --> 00:11:47,120
i've had to trim it down a lot more

00:11:44,560 --> 00:11:48,959
because it's a lot larger

00:11:47,120 --> 00:11:50,560
you can see that we're using version

00:11:48,959 --> 00:11:53,519
qualifiers in

00:11:50,560 --> 00:11:55,519
python module bird requires and this is

00:11:53,519 --> 00:11:56,320
the update alternatives requirement that

00:11:55,519 --> 00:11:59,920
i mentioned

00:11:56,320 --> 00:12:02,399
before so build is very simple here

00:11:59,920 --> 00:12:03,680
uh but during install we need to clone

00:12:02,399 --> 00:12:07,680
the raven ci

00:12:03,680 --> 00:12:09,920
cr cli tool and run ftubes

00:12:07,680 --> 00:12:11,600
during check we export an environment

00:12:09,920 --> 00:12:13,440
variable for django's benefit

00:12:11,600 --> 00:12:15,680
and then we use the percent pi test

00:12:13,440 --> 00:12:18,079
macro and as you can see

00:12:15,680 --> 00:12:20,880
we can pass command line arguments to pi

00:12:18,079 --> 00:12:23,040
test using the other macro

00:12:20,880 --> 00:12:25,040
so here we install and uninstall the

00:12:23,040 --> 00:12:27,440
alternative and we also

00:12:25,040 --> 00:12:29,360
mark it as an alternative in the files

00:12:27,440 --> 00:12:33,200
section

00:12:29,360 --> 00:12:35,760
as a bonus example from python talks

00:12:33,200 --> 00:12:37,120
we can see here if guards for a build

00:12:35,760 --> 00:12:39,519
requires

00:12:37,120 --> 00:12:41,040
we can't use python module here because

00:12:39,519 --> 00:12:43,600
that will expand

00:12:41,040 --> 00:12:44,560
against pythons and we can't do that

00:12:43,600 --> 00:12:47,440
since

00:12:44,560 --> 00:12:49,600
uh import the metadata only exists for

00:12:47,440 --> 00:12:51,680
python 3.6

00:12:49,600 --> 00:12:54,399
we also need to check for both python 3

00:12:51,680 --> 00:12:55,519
base and python 3 6 base so we handle

00:12:54,399 --> 00:12:59,279
both tumbleweed and

00:12:55,519 --> 00:13:02,560
leap since this may be backported

00:12:59,279 --> 00:13:04,880
to either distribution

00:13:02,560 --> 00:13:07,040
uh so future plans that we have with

00:13:04,880 --> 00:13:07,760
where we're discussing allowing user

00:13:07,040 --> 00:13:10,079
control

00:13:07,760 --> 00:13:12,320
over which version of python is run for

00:13:10,079 --> 00:13:15,920
user bin python 3

00:13:12,320 --> 00:13:19,760
but this gets a bit complicated and

00:13:15,920 --> 00:13:20,000
may in fact not work out well for things

00:13:19,760 --> 00:13:22,320
like

00:13:20,000 --> 00:13:24,720
single spec and things like that and

00:13:22,320 --> 00:13:27,360
we'd also very much like to remove

00:13:24,720 --> 00:13:29,040
python 2 from tumbleweed uh but it's

00:13:27,360 --> 00:13:30,639
pretty firmly wedged in there with uh

00:13:29,040 --> 00:13:33,839
with a lot of things

00:13:30,639 --> 00:13:36,160
unfortunately still requiring

00:13:33,839 --> 00:13:39,120
so would you like to help you can of

00:13:36,160 --> 00:13:41,519
course file bugs on any packages

00:13:39,120 --> 00:13:42,720
you can send us a submit request to our

00:13:41,519 --> 00:13:46,160
development projects

00:13:42,720 --> 00:13:47,680
in obs which is uh devel languages

00:13:46,160 --> 00:13:50,560
python

00:13:47,680 --> 00:13:51,920
or it's sub projects and we have an ic

00:13:50,560 --> 00:13:54,959
channel on libra chat

00:13:51,920 --> 00:13:58,240
which is uh percent uh

00:13:54,959 --> 00:14:00,320
hash open suse python

00:13:58,240 --> 00:14:03,839
and uh thank you for listening are there

00:14:00,320 --> 00:14:03,839

YouTube URL: https://www.youtube.com/watch?v=5NDfkwluG1A


