Title: openSUSE Virtual Conference 2021 - Uyuni - The movie
Publication date: 2021-06-19
Playlist: openSUSE Virtual Conference 2021
Description: 
	https://media.ccc.de/v/3485-uyuni-the-movie

Where are we and what's next

Brief introduction to Uyuni from the user point of view (how Uyuni helps in your day to day), rather than from the product features point of view.

Uyuni is a software-defined infrastructure and configuration management solution. You can use it to bootstrap physical servers, deploy and update packages and patches -even with content lifecycle management features- create VMs for virtualization and cloud, builds container images, tracks what runs on your Kubernetes clusters, CVE audit your machines and containers, etc. All using Salt under the hood. Starting with Uyuni 2021.05, Ansible is also supported.

Brief introduction to Uyuni from the user point of view (how Uyuni helps in your day to day), rather than from the product features point of view.

Uyuni is a software-defined infrastructure and configuration management solution. You can use it to bootstrap physical servers, deploy and update packages and patches -even with content lifecycle management features- create VMs for virtualization and cloud, builds container images, tracks what runs on your Kubernetes clusters, CVE audit your machines and containers, etc. All using Salt under the hood. Starting with Uyuni 2021.05, Ansible is also supported.

Pau Garcia Quiles
Captions: 
	00:00:01,580 --> 00:00:05,850
[Music]

00:00:08,240 --> 00:00:14,080
hello and welcome to this presentation

00:00:11,280 --> 00:00:15,759
you need the movie this is a bit of a

00:00:14,080 --> 00:00:16,240
different presentation on what do you

00:00:15,759 --> 00:00:19,039
need

00:00:16,240 --> 00:00:19,920
typically i do the presentation by

00:00:19,039 --> 00:00:22,720
enumerating

00:00:19,920 --> 00:00:24,720
all the features that uni has what it

00:00:22,720 --> 00:00:27,760
can do what it cannot do

00:00:24,720 --> 00:00:29,359
what it runs the clients and it's a very

00:00:27,760 --> 00:00:31,519
technical presentation that

00:00:29,359 --> 00:00:33,440
is mainly useful for people who already

00:00:31,519 --> 00:00:34,719
know a lot of the technical stuff

00:00:33,440 --> 00:00:37,680
involved in being

00:00:34,719 --> 00:00:39,520
a systems administrator today i'm going

00:00:37,680 --> 00:00:42,719
to do a different presentation

00:00:39,520 --> 00:00:44,719
i'm going to try to explain how

00:00:42,719 --> 00:00:46,640
wi-uni is used in your day-to-day as a

00:00:44,719 --> 00:00:48,719
systems administrator

00:00:46,640 --> 00:00:50,640
you will see that uh in the in the

00:00:48,719 --> 00:00:53,120
slides i mentioned also

00:00:50,640 --> 00:00:55,600
what are the features that support your

00:00:53,120 --> 00:00:58,800
day-to-day

00:00:55,600 --> 00:01:00,800
let's go for it

00:00:58,800 --> 00:01:02,800
let me introduce myself my name is paw

00:01:00,800 --> 00:01:04,400
garcia i'm the product owner and

00:01:02,800 --> 00:01:05,199
technical project manager of sushi

00:01:04,400 --> 00:01:08,479
manager

00:01:05,199 --> 00:01:11,439
i work for souza and since two years ago

00:01:08,479 --> 00:01:12,720
i'm essentially the guy who decides what

00:01:11,439 --> 00:01:15,200
the development team

00:01:12,720 --> 00:01:18,240
and qa team and documentation team will

00:01:15,200 --> 00:01:19,840
do over the next few weeks

00:01:18,240 --> 00:01:22,320
in close collaboration with our product

00:01:19,840 --> 00:01:26,320
managers of course

00:01:22,320 --> 00:01:29,040
this in turn gives me a let's say

00:01:26,320 --> 00:01:31,520
the figure of a benevolent dictator of

00:01:29,040 --> 00:01:31,520
uni

00:01:34,799 --> 00:01:37,840
let's start with with today's landscape

00:01:37,119 --> 00:01:41,680
what we see

00:01:37,840 --> 00:01:46,880
in enterprise at linux is present

00:01:41,680 --> 00:01:50,320
in almost 100 percent of the enterprises

00:01:46,880 --> 00:01:51,680
um in some places it's 50 percent in

00:01:50,320 --> 00:01:55,360
some places it's

00:01:51,680 --> 00:01:58,560
95 like the clouds

00:01:55,360 --> 00:02:02,000
uh another thing that we have seen is

00:01:58,560 --> 00:02:04,000
many most of the enterprise users

00:02:02,000 --> 00:02:06,960
are not only addressing one cloud but

00:02:04,000 --> 00:02:06,960
multiple clouds

00:02:07,040 --> 00:02:13,440
and many many users have experienced

00:02:10,160 --> 00:02:16,959
also problems security breaches

00:02:13,440 --> 00:02:19,360
most of the times because they haven't

00:02:16,959 --> 00:02:21,120
patched or configured properly their

00:02:19,360 --> 00:02:23,280
systems

00:02:21,120 --> 00:02:25,599
and the complexity of the 80 is not

00:02:23,280 --> 00:02:29,440
diminishing but on the contrary

00:02:25,599 --> 00:02:29,440
every day it's increasing

00:02:32,160 --> 00:02:36,319
let's see what are the the main

00:02:33,440 --> 00:02:38,640
challenges of i.t complexity

00:02:36,319 --> 00:02:40,720
i have split these in two parts one is

00:02:38,640 --> 00:02:41,040
what we call the day zero and what we

00:02:40,720 --> 00:02:44,160
call

00:02:41,040 --> 00:02:46,800
day two day zero is before you start

00:02:44,160 --> 00:02:47,200
using operating your systems and day two

00:02:46,800 --> 00:02:49,680
is

00:02:47,200 --> 00:02:51,680
once the those systems are in operation

00:02:49,680 --> 00:02:54,480
the challenges of day zero

00:02:51,680 --> 00:02:55,519
are provisioning which commonly is done

00:02:54,480 --> 00:02:58,800
manually which is

00:02:55,519 --> 00:03:00,560
slow and also inconsistent

00:02:58,800 --> 00:03:02,159
there's sometimes the configuration is

00:03:00,560 --> 00:03:04,800
not applied equally because

00:03:02,159 --> 00:03:05,519
you are following instructions in some

00:03:04,800 --> 00:03:08,800
notebook

00:03:05,519 --> 00:03:12,000
or or just by memory

00:03:08,800 --> 00:03:12,640
this in turn leads to misconfiguration

00:03:12,000 --> 00:03:14,879
to

00:03:12,640 --> 00:03:16,560
bad performance to some systems not

00:03:14,879 --> 00:03:18,000
being compliant just because someone

00:03:16,560 --> 00:03:20,000
forgot to do something

00:03:18,000 --> 00:03:21,440
for that specific case and it also

00:03:20,000 --> 00:03:25,200
requires a lot

00:03:21,440 --> 00:03:27,599
of labor of effort

00:03:25,200 --> 00:03:29,200
also the deployments yeah you will

00:03:27,599 --> 00:03:32,239
deploy something today and

00:03:29,200 --> 00:03:35,280
tomorrow it's probably the same but

00:03:32,239 --> 00:03:35,599
what if it is slightly different so it's

00:03:35,280 --> 00:03:37,519
not

00:03:35,599 --> 00:03:39,040
easy to repeat the same thing that

00:03:37,519 --> 00:03:40,799
you're doing that you were doing in the

00:03:39,040 --> 00:03:43,120
past

00:03:40,799 --> 00:03:44,560
and then once your systems are actually

00:03:43,120 --> 00:03:46,720
put in production

00:03:44,560 --> 00:03:48,400
and you start operating them you of

00:03:46,720 --> 00:03:51,280
course need to

00:03:48,400 --> 00:03:54,480
patch and update your systems and many

00:03:51,280 --> 00:03:57,519
sysadmins are still doing that manually

00:03:54,480 --> 00:03:58,799
this leads it down to an irregular patch

00:03:57,519 --> 00:04:00,640
cadence

00:03:58,799 --> 00:04:02,720
instead of doing this every week every

00:04:00,640 --> 00:04:06,319
month every quarter which are the most

00:04:02,720 --> 00:04:07,280
typical uh patch cycles they do it when

00:04:06,319 --> 00:04:09,760
they have the time

00:04:07,280 --> 00:04:11,360
or once they remember because they are

00:04:09,760 --> 00:04:14,879
busy or vacation or

00:04:11,360 --> 00:04:17,280
who knows what this causes is different

00:04:14,879 --> 00:04:19,040
patch levels across systems even when

00:04:17,280 --> 00:04:22,320
those systems are part of

00:04:19,040 --> 00:04:25,360
the same application maybe some of the

00:04:22,320 --> 00:04:28,000
web servers in your your website

00:04:25,360 --> 00:04:29,680
are running one version of apache other

00:04:28,000 --> 00:04:30,800
systems will be running another

00:04:29,680 --> 00:04:33,919
slightly different version of the

00:04:30,800 --> 00:04:35,520
patches in other patch level

00:04:33,919 --> 00:04:38,880
and you are doing that all the time

00:04:35,520 --> 00:04:38,880
which is very repetitive

00:04:39,280 --> 00:04:43,680
another important factor of course is i

00:04:42,000 --> 00:04:45,520
talked about security breaches

00:04:43,680 --> 00:04:46,720
in the previous slide well security

00:04:45,520 --> 00:04:49,600
compliance

00:04:46,720 --> 00:04:51,919
is very important vulnerabilities

00:04:49,600 --> 00:04:52,160
systems which are outdated and therefore

00:04:51,919 --> 00:04:54,800
are

00:04:52,160 --> 00:04:56,320
at risk or maybe you are not even

00:04:54,800 --> 00:04:59,520
meeting your internal

00:04:56,320 --> 00:05:02,320
compliance requirements or

00:04:59,520 --> 00:05:04,960
if you are in a regulated industry like

00:05:02,320 --> 00:05:07,919
banking for instance or military

00:05:04,960 --> 00:05:09,120
doing that manually is a lot of pain and

00:05:07,919 --> 00:05:11,120
risk

00:05:09,120 --> 00:05:12,479
and of course you want to to monitor the

00:05:11,120 --> 00:05:15,360
health of your systems

00:05:12,479 --> 00:05:16,240
because what if one of your servers goes

00:05:15,360 --> 00:05:17,759
down and then

00:05:16,240 --> 00:05:20,240
the whole application and the whole

00:05:17,759 --> 00:05:20,240
system

00:05:20,479 --> 00:05:24,479
is paralyzed your company cannot

00:05:22,479 --> 00:05:27,600
continue operating normally

00:05:24,479 --> 00:05:30,639
that downtime costs a lot of money

00:05:27,600 --> 00:05:32,240
so what we have found is configuration

00:05:30,639 --> 00:05:33,280
and patch management is typically an

00:05:32,240 --> 00:05:35,199
afterthought

00:05:33,280 --> 00:05:36,880
everybody thinks of developing the

00:05:35,199 --> 00:05:38,880
application everybody thinks of

00:05:36,880 --> 00:05:42,160
hey let's put the system in production

00:05:38,880 --> 00:05:45,199
but then the normal operation

00:05:42,160 --> 00:05:48,560
not so popular they remember

00:05:45,199 --> 00:05:48,560
when something has gone wrong

00:05:48,720 --> 00:05:53,199
and this is exactly where uni can help

00:05:51,360 --> 00:05:55,199
uni is the best in class open source

00:05:53,199 --> 00:05:57,680
infrastructure management solution

00:05:55,199 --> 00:06:00,639
designed to help you in your enterprise

00:05:57,680 --> 00:06:02,720
develops and it operations

00:06:00,639 --> 00:06:04,880
it will help you reduce costs reduce

00:06:02,720 --> 00:06:05,360
complexity and regain control of your

00:06:04,880 --> 00:06:08,160
i.t

00:06:05,360 --> 00:06:09,520
sets and also it will help you to ensure

00:06:08,160 --> 00:06:11,680
compliance with your

00:06:09,520 --> 00:06:13,759
internal security policies and even

00:06:11,680 --> 00:06:16,400
external regulations

00:06:13,759 --> 00:06:17,440
one good thing about the uni is it's one

00:06:16,400 --> 00:06:18,840
solution to manage

00:06:17,440 --> 00:06:21,120
all your enterprise living

00:06:18,840 --> 00:06:23,120
infrastructure it doesn't matter if it's

00:06:21,120 --> 00:06:23,840
on private cloud or public cloud hybrid

00:06:23,120 --> 00:06:26,400
cloud

00:06:23,840 --> 00:06:27,199
in different clouds it doesn't matter if

00:06:26,400 --> 00:06:29,680
you need

00:06:27,199 --> 00:06:32,840
provisioning patch management building

00:06:29,680 --> 00:06:35,840
operating system images or containers

00:06:32,840 --> 00:06:36,720
virtualization the uni can help you with

00:06:35,840 --> 00:06:40,000
everything

00:06:36,720 --> 00:06:40,800
configuration management everything's in

00:06:40,000 --> 00:06:42,639
your uni

00:06:40,800 --> 00:06:44,160
it covers i would say i typically say

00:06:42,639 --> 00:06:47,680
it's 80

00:06:44,160 --> 00:06:50,560
of your day-to-day the architecture of

00:06:47,680 --> 00:06:52,160
uni is the very typical client server

00:06:50,560 --> 00:06:56,639
architecture

00:06:52,160 --> 00:06:59,120
so there's the uni server here

00:06:56,639 --> 00:07:01,759
which it can be connected if yours is a

00:06:59,120 --> 00:07:03,599
customer to the suse customer center

00:07:01,759 --> 00:07:04,800
or it also connects to third-party

00:07:03,599 --> 00:07:06,639
public reporters

00:07:04,800 --> 00:07:07,919
for instance in the case of divian or

00:07:06,639 --> 00:07:11,440
ubuntu

00:07:07,919 --> 00:07:13,440
or centos or alma linux for instance

00:07:11,440 --> 00:07:14,880
so you have this the uni server and then

00:07:13,440 --> 00:07:17,840
you have optionally

00:07:14,880 --> 00:07:19,120
the proxy elements these are here in

00:07:17,840 --> 00:07:21,520
case you need

00:07:19,120 --> 00:07:22,400
to have a very large deployment when you

00:07:21,520 --> 00:07:26,160
are when you go

00:07:22,400 --> 00:07:28,960
over 5000 managed systems we advise you

00:07:26,160 --> 00:07:30,080
to use proxies to offload some of the

00:07:28,960 --> 00:07:33,680
network

00:07:30,080 --> 00:07:36,880
and and first contact uh work

00:07:33,680 --> 00:07:37,280
load from the the uni server you can of

00:07:36,880 --> 00:07:39,759
course

00:07:37,280 --> 00:07:41,840
attach systems directly to the uni

00:07:39,759 --> 00:07:46,240
server if you have only a few hundred or

00:07:41,840 --> 00:07:46,240
just a few thousand systems

00:07:47,440 --> 00:07:51,520
that was a summary let's now talk about

00:07:49,680 --> 00:07:54,479
uni your day-to-day

00:07:51,520 --> 00:07:55,919
and for that say hello to joe he's a

00:07:54,479 --> 00:07:59,280
fictional character

00:07:55,919 --> 00:08:01,840
and he's going to help us uh go through

00:07:59,280 --> 00:08:01,840
a story

00:08:03,120 --> 00:08:07,680
our friend joe is responsible for a zlas

00:08:05,840 --> 00:08:10,400
15 sp2 system

00:08:07,680 --> 00:08:11,919
which runs some applications i mean line

00:08:10,400 --> 00:08:13,120
of business application which is not

00:08:11,919 --> 00:08:15,360
even

00:08:13,120 --> 00:08:17,360
important for the sake of the history of

00:08:15,360 --> 00:08:20,240
this story

00:08:17,360 --> 00:08:21,039
in fact joe is not just responsible for

00:08:20,240 --> 00:08:22,479
one system

00:08:21,039 --> 00:08:25,440
he is responsible for a number of

00:08:22,479 --> 00:08:27,440
servers which he has organized in

00:08:25,440 --> 00:08:29,120
one organization per internal department

00:08:27,440 --> 00:08:32,000
so because uni

00:08:29,120 --> 00:08:33,279
is multi-tenant so you can have

00:08:32,000 --> 00:08:35,680
different

00:08:33,279 --> 00:08:37,519
uni organizations one per department and

00:08:35,680 --> 00:08:38,719
that way you split your systems very

00:08:37,519 --> 00:08:41,200
well

00:08:38,719 --> 00:08:44,159
or your system groups even in in the in

00:08:41,200 --> 00:08:44,159
the same organization

00:08:45,200 --> 00:08:48,560
not all servers run on the same physical

00:08:47,519 --> 00:08:50,640
location so

00:08:48,560 --> 00:08:52,640
some systems that joe manages are on

00:08:50,640 --> 00:08:52,959
premise some are on public cloud some

00:08:52,640 --> 00:08:56,240
are

00:08:52,959 --> 00:08:57,839
private cloud services and bare metal as

00:08:56,240 --> 00:08:59,440
our own premiums virtual machines

00:08:57,839 --> 00:09:02,320
running on a new unit manage

00:08:59,440 --> 00:09:05,920
kbm server some are virtual machines

00:09:02,320 --> 00:09:08,560
running on cloud or vmware or

00:09:05,920 --> 00:09:09,680
but joe does not really care where his

00:09:08,560 --> 00:09:11,680
servers are

00:09:09,680 --> 00:09:13,519
since uni is completely platform

00:09:11,680 --> 00:09:16,080
agnostic so with a single

00:09:13,519 --> 00:09:16,720
uni server he can discover and manage

00:09:16,080 --> 00:09:19,600
clients

00:09:16,720 --> 00:09:22,000
everywhere even clients coming from the

00:09:19,600 --> 00:09:25,120
outside world from aws from azure

00:09:22,000 --> 00:09:28,240
for google cloud vmware nutanix then

00:09:25,120 --> 00:09:31,600
everything supported

00:09:28,240 --> 00:09:34,480
by uni and the good thing is uni worked

00:09:31,600 --> 00:09:34,480
exactly the same

00:09:34,839 --> 00:09:39,279
everywhere

00:09:36,720 --> 00:09:40,399
now let's talk a bit about a very common

00:09:39,279 --> 00:09:43,200
workload

00:09:40,399 --> 00:09:44,880
sap if you are in the enterprise world

00:09:43,200 --> 00:09:48,880
you probably know

00:09:44,880 --> 00:09:51,519
this erp it's very very well known

00:09:48,880 --> 00:09:53,839
and the the operating system that sap

00:09:51,519 --> 00:09:54,399
typically recommends is less for zp for

00:09:53,839 --> 00:09:56,959
by

00:09:54,399 --> 00:09:59,440
from from so everybody knows it's the

00:09:56,959 --> 00:10:00,880
best operating system for sap workloads

00:09:59,440 --> 00:10:02,720
and everybody knows also that this

00:10:00,880 --> 00:10:05,680
layout is the best linux and

00:10:02,720 --> 00:10:08,000
opensuse is the best open source linux

00:10:05,680 --> 00:10:08,000
right

00:10:08,880 --> 00:10:13,519
but sometimes an application is not

00:10:10,640 --> 00:10:15,839
certified for pencils or forceless

00:10:13,519 --> 00:10:16,800
or you inherited an application that

00:10:15,839 --> 00:10:19,760
someone

00:10:16,800 --> 00:10:21,600
your predecessor put in production or

00:10:19,760 --> 00:10:24,720
yeah for some other reason

00:10:21,600 --> 00:10:25,839
you need to use some other linux not a

00:10:24,720 --> 00:10:28,240
problem

00:10:25,839 --> 00:10:29,600
with uni you can manage every enterprise

00:10:28,240 --> 00:10:32,880
linux out there

00:10:29,600 --> 00:10:36,240
it doesn't matter if it's souza it's

00:10:32,880 --> 00:10:39,440
red hat centos oracle linux ubuntu

00:10:36,240 --> 00:10:43,680
astral linux alma linux amazon

00:10:39,440 --> 00:10:44,720
alibaba every every enterprise linux is

00:10:43,680 --> 00:10:48,160
supported

00:10:44,720 --> 00:10:49,279
and even this embedded stuff like sleep

00:10:48,160 --> 00:10:52,480
micro

00:10:49,279 --> 00:10:55,120
everything supported by union single

00:10:52,480 --> 00:10:57,600
management tool many different operating

00:10:55,120 --> 00:10:57,600
systems

00:10:58,079 --> 00:11:02,079
the good thing of this is to joe to a

00:11:00,880 --> 00:11:03,839
friend joe

00:11:02,079 --> 00:11:06,640
all the servers no matter the optics

00:11:03,839 --> 00:11:09,680
system look exactly the same

00:11:06,640 --> 00:11:14,079
they are managed servers

00:11:09,680 --> 00:11:16,560
under control peace of mind

00:11:14,079 --> 00:11:17,920
and indeed a friend joe can manage a ton

00:11:16,560 --> 00:11:20,560
of clients

00:11:17,920 --> 00:11:22,160
with a single server 10 000 clients is

00:11:20,560 --> 00:11:24,480
perfectly doable

00:11:22,160 --> 00:11:28,000
and that's complexity just imagine if

00:11:24,480 --> 00:11:29,920
you had to do that manually

00:11:28,000 --> 00:11:31,839
joe needs of course asset management to

00:11:29,920 --> 00:11:33,760
keep an overview of what he has

00:11:31,839 --> 00:11:36,000
like visualizing the asset landscape

00:11:33,760 --> 00:11:39,120
assigning subscriptions in the case of

00:11:36,000 --> 00:11:40,000
paid for linux operating systems you

00:11:39,120 --> 00:11:42,880
want to

00:11:40,000 --> 00:11:44,480
to subscription mat your clients to your

00:11:42,880 --> 00:11:47,680
succession pools

00:11:44,480 --> 00:11:50,720
compliance is a very important part of

00:11:47,680 --> 00:11:53,680
any enterprise company and uni

00:11:50,720 --> 00:11:54,160
helps you and helps joe to easily

00:11:53,680 --> 00:11:56,639
prepare

00:11:54,160 --> 00:11:59,519
and prove compliance for license audits

00:11:56,639 --> 00:11:59,519
and requirements

00:12:01,760 --> 00:12:08,000
let's go to a very real case like say

00:12:04,880 --> 00:12:08,639
let's say joe is using a new uni server

00:12:08,000 --> 00:12:11,360
with three

00:12:08,639 --> 00:12:12,160
uniproxy servers to offload the network

00:12:11,360 --> 00:12:14,399
and disks

00:12:12,160 --> 00:12:15,440
from the server right and then we have

00:12:14,399 --> 00:12:17,839
all of these

00:12:15,440 --> 00:12:19,200
client operating systems mines here

00:12:17,839 --> 00:12:20,959
there's this less that's let's expand

00:12:19,200 --> 00:12:22,000
the support center as open source oracle

00:12:20,959 --> 00:12:24,800
linux

00:12:22,000 --> 00:12:25,600
red hat enterprise linux alibaba amazon

00:12:24,800 --> 00:12:28,639
let's face it

00:12:25,600 --> 00:12:32,880
alma and i'm even missing here ubuntu

00:12:28,639 --> 00:12:32,880
and debian and yeah a few more

00:12:35,360 --> 00:12:40,959
we have reports of 35 000 clients with a

00:12:38,880 --> 00:12:41,760
single uni server and a few proxies of

00:12:40,959 --> 00:12:46,480
course

00:12:41,760 --> 00:12:49,200
but uh typically we we would advise joe

00:12:46,480 --> 00:12:50,399
to use the uni hub which is the

00:12:49,200 --> 00:12:52,720
multi-server

00:12:50,399 --> 00:12:53,760
architecture where you have an uni hub

00:12:52,720 --> 00:12:56,800
server

00:12:53,760 --> 00:12:59,200
with a uni peripheral servers and then

00:12:56,800 --> 00:13:00,560
proxies or client zero attached to those

00:12:59,200 --> 00:13:02,000
proxies

00:13:00,560 --> 00:13:03,839
with this kind of architecture

00:13:02,000 --> 00:13:06,160
multi-server architecture

00:13:03,839 --> 00:13:07,519
you can manage hundreds of thousands of

00:13:06,160 --> 00:13:09,440
clients

00:13:07,519 --> 00:13:12,480
all centralized and all with the same

00:13:09,440 --> 00:13:12,480
tool with uni

00:13:13,680 --> 00:13:18,720
joe is using unit to do his day-to-day

00:13:16,000 --> 00:13:21,279
like deposit software patching servers

00:13:18,720 --> 00:13:23,760
installing new software he can schedule

00:13:21,279 --> 00:13:26,880
actions run remote commands

00:13:23,760 --> 00:13:29,519
combine commands in action chains to

00:13:26,880 --> 00:13:32,079
make sure that they are executed at once

00:13:29,519 --> 00:13:34,160
uh he can describe the system in a

00:13:32,079 --> 00:13:38,160
single salt state so that he

00:13:34,160 --> 00:13:42,079
he can preserve this the state and force

00:13:38,160 --> 00:13:44,560
some state to to be preserved by salt

00:13:42,079 --> 00:13:46,399
and well of course you could still use

00:13:44,560 --> 00:13:47,360
the the old school actions and action

00:13:46,399 --> 00:13:49,519
chains and running

00:13:47,360 --> 00:13:50,639
commands usually but we advise you to

00:13:49,519 --> 00:13:54,880
use salt really it's

00:13:50,639 --> 00:13:54,880
with solid states everything is easier

00:13:55,760 --> 00:14:00,639
he really likes that thanks to this

00:13:58,079 --> 00:14:03,120
content-like cycle management

00:14:00,639 --> 00:14:04,720
he can create projects and filters and

00:14:03,120 --> 00:14:07,600
he's in full control

00:14:04,720 --> 00:14:09,600
of whatsoever each client has he can

00:14:07,600 --> 00:14:10,480
define these three typical environments

00:14:09,600 --> 00:14:13,199
development

00:14:10,480 --> 00:14:13,760
testing and production and then he

00:14:13,199 --> 00:14:16,000
filters

00:14:13,760 --> 00:14:17,839
out what the software and filters in

00:14:16,000 --> 00:14:19,040
what he can combine different channels

00:14:17,839 --> 00:14:21,519
and sources

00:14:19,040 --> 00:14:23,120
and once he has tested in his

00:14:21,519 --> 00:14:26,480
development

00:14:23,120 --> 00:14:29,760
clients he promotes the software channel

00:14:26,480 --> 00:14:30,959
to test into qa then after careful

00:14:29,760 --> 00:14:32,800
testing he can

00:14:30,959 --> 00:14:34,639
for instance quarterly promote the

00:14:32,800 --> 00:14:36,560
software to production

00:14:34,639 --> 00:14:38,079
on all the systems at once such as

00:14:36,560 --> 00:14:39,440
subscribing channels that are

00:14:38,079 --> 00:14:44,160
automatically created

00:14:39,440 --> 00:14:46,000
by the content license feature

00:14:44,160 --> 00:14:48,240
another typical patch cycle is the

00:14:46,000 --> 00:14:50,000
monthly patch cycle

00:14:48,240 --> 00:14:51,680
you can define your counterless cycle

00:14:50,000 --> 00:14:53,519
management project for that

00:14:51,680 --> 00:14:55,680
and then you can leverage the recurring

00:14:53,519 --> 00:14:58,000
estates feature to deliver updates

00:14:55,680 --> 00:14:59,199
every month to your clients another

00:14:58,000 --> 00:15:03,040
possibility you can

00:14:59,199 --> 00:15:04,800
say okay how to install the updates

00:15:03,040 --> 00:15:06,639
when they are ready when they're they

00:15:04,800 --> 00:15:07,920
are available in the channels and making

00:15:06,639 --> 00:15:09,839
the server available in the channel is

00:15:07,920 --> 00:15:10,560
something that you decide no one decides

00:15:09,839 --> 00:15:14,399
for you

00:15:10,560 --> 00:15:14,399
so you kind can state the contents

00:15:15,279 --> 00:15:19,440
joe spears at the sap department also

00:15:17,680 --> 00:15:21,279
use uni

00:15:19,440 --> 00:15:23,360
they love the ability of the content

00:15:21,279 --> 00:15:25,040
like cycle engine to filter patches that

00:15:23,360 --> 00:15:28,240
require a reboot

00:15:25,040 --> 00:15:32,959
saving reboots is a great

00:15:28,240 --> 00:15:35,839
great thing reboots cost a ton of money

00:15:32,959 --> 00:15:37,440
just saving one free boot a year in a

00:15:35,839 --> 00:15:40,480
critical application such as

00:15:37,440 --> 00:15:42,399
sap pays for sushi manchester which is

00:15:40,480 --> 00:15:44,880
the supported version of uni

00:15:42,399 --> 00:15:46,399
for the whole year our friend joe has

00:15:44,880 --> 00:15:49,519
done his math and he knows

00:15:46,399 --> 00:15:53,199
that sometimes you have to pay to have

00:15:49,519 --> 00:15:56,160
kind of uh insurance to have

00:15:53,199 --> 00:15:56,160
someone to help you

00:15:56,800 --> 00:16:01,120
in fact thanks to life patching and

00:15:58,880 --> 00:16:04,800
contactless accounting filters

00:16:01,120 --> 00:16:07,920
you can achieve 99.999

00:16:04,800 --> 00:16:08,800
uptime by rebooting only once a year and

00:16:07,920 --> 00:16:12,079
those are

00:16:08,800 --> 00:16:14,240
real cases not just something i'm making

00:16:12,079 --> 00:16:16,399
up now

00:16:14,240 --> 00:16:18,480
of course client systems do not just

00:16:16,399 --> 00:16:20,079
appear out of thin air

00:16:18,480 --> 00:16:22,000
but with the unit there's no magic

00:16:20,079 --> 00:16:23,920
required to deploy new clients

00:16:22,000 --> 00:16:25,680
virtual machines using uni

00:16:23,920 --> 00:16:28,320
virtualization features

00:16:25,680 --> 00:16:29,440
where you can use kvm or zen you can

00:16:28,320 --> 00:16:31,680
even deploy an

00:16:29,440 --> 00:16:33,759
hiv tradition cluster with live

00:16:31,680 --> 00:16:36,079
migration and everything

00:16:33,759 --> 00:16:37,759
or to bear metal in the case of uni

00:16:36,079 --> 00:16:38,480
there's no real difference you can power

00:16:37,759 --> 00:16:41,600
on

00:16:38,480 --> 00:16:42,480
with ipmi or with redfish and then how

00:16:41,600 --> 00:16:45,600
to install

00:16:42,480 --> 00:16:47,519
over the network those client systems

00:16:45,600 --> 00:16:51,600
on bare metal or in virtual machines you

00:16:47,519 --> 00:16:54,079
don't care it's the same

00:16:51,600 --> 00:16:55,199
but just one qualification when i say

00:16:54,079 --> 00:16:57,519
deploy

00:16:55,199 --> 00:16:59,360
it doesn't mean that a friend joe sits

00:16:57,519 --> 00:17:01,279
in front of the web ui

00:16:59,360 --> 00:17:03,199
and points and click to to deploy

00:17:01,279 --> 00:17:05,919
several hundreds of client systems and

00:17:03,199 --> 00:17:07,600
that wouldn't make any sense right joe

00:17:05,919 --> 00:17:10,000
is a systems programmer

00:17:07,600 --> 00:17:11,120
so he has his own scripts that leverage

00:17:10,000 --> 00:17:14,720
the uni api

00:17:11,120 --> 00:17:17,360
so everything in uni is manageable

00:17:14,720 --> 00:17:18,000
using the api or the web ui or the

00:17:17,360 --> 00:17:20,640
command line

00:17:18,000 --> 00:17:21,120
tools you have the three possibilities

00:17:20,640 --> 00:17:23,520
what we

00:17:21,120 --> 00:17:25,600
typically find is users style with the

00:17:23,520 --> 00:17:26,240
web ui and once they've learned their

00:17:25,600 --> 00:17:28,480
way

00:17:26,240 --> 00:17:29,360
through uni they start using the command

00:17:28,480 --> 00:17:32,559
line tools

00:17:29,360 --> 00:17:35,919
and in the end script around the api

00:17:32,559 --> 00:17:38,960
and integrate more than just uh the

00:17:35,919 --> 00:17:40,720
uni uh functionality they integrate with

00:17:38,960 --> 00:17:44,000
even with their own

00:17:40,720 --> 00:17:48,480
itsm or ticket creation

00:17:44,000 --> 00:17:50,559
or service manager other tools

00:17:48,480 --> 00:17:51,520
sometimes our friend joe even uses so

00:17:50,559 --> 00:17:53,679
directly

00:17:51,520 --> 00:17:55,760
he's still learning this technology but

00:17:53,679 --> 00:17:58,320
he thinks the automation capabilities

00:17:55,760 --> 00:17:58,320
are awesome

00:17:58,480 --> 00:18:02,640
that's salt right it's very popular but

00:18:01,039 --> 00:18:05,200
you have probably heard about

00:18:02,640 --> 00:18:07,280
another automation framework called

00:18:05,200 --> 00:18:10,640
ansible

00:18:07,280 --> 00:18:14,160
uni now provides ansible too so that

00:18:10,640 --> 00:18:17,120
moving to to from a red world let's say

00:18:14,160 --> 00:18:17,120
to a green world

00:18:17,200 --> 00:18:21,360
is is now a lot easier you don't need to

00:18:19,280 --> 00:18:24,400
rewrite all your automation

00:18:21,360 --> 00:18:26,640
to start using uni you can still keep

00:18:24,400 --> 00:18:29,039
your ansible automation

00:18:26,640 --> 00:18:31,280
integrate your ansible control nodes and

00:18:29,039 --> 00:18:31,280
then

00:18:31,919 --> 00:18:36,080
manage everything with uni of course i

00:18:34,640 --> 00:18:38,400
think that after

00:18:36,080 --> 00:18:39,919
a while of using unit you will also

00:18:38,400 --> 00:18:42,720
start using salt

00:18:39,919 --> 00:18:43,840
and then you will leave your ansible

00:18:42,720 --> 00:18:46,799
stuff

00:18:43,840 --> 00:18:47,600
behind you will keep it because

00:18:46,799 --> 00:18:49,600
rewriting

00:18:47,600 --> 00:18:50,640
takes a lot of effort and time and money

00:18:49,600 --> 00:18:53,039
in the end

00:18:50,640 --> 00:18:54,320
but the new stuff you probably want sold

00:18:53,039 --> 00:18:56,720
because the great thing about

00:18:54,320 --> 00:18:58,320
this is it's declarative and you say

00:18:56,720 --> 00:19:00,480
okay keep this state

00:18:58,320 --> 00:19:02,160
and so will take care of everything

00:19:00,480 --> 00:19:04,960
contrary to ansible where you have to

00:19:02,160 --> 00:19:06,400
start to execute the same playbook and

00:19:04,960 --> 00:19:08,799
to take care of maintaining the state

00:19:06,400 --> 00:19:08,799
yourself

00:19:09,440 --> 00:19:12,799
maintenance windows is another great

00:19:11,600 --> 00:19:16,160
feature that we introduced

00:19:12,799 --> 00:19:18,480
uh over a year ago in uni which the

00:19:16,160 --> 00:19:19,760
the the too long didn't read of

00:19:18,480 --> 00:19:21,440
maintenance windows is

00:19:19,760 --> 00:19:23,039
changes are only allowed during a

00:19:21,440 --> 00:19:25,280
limited period of time

00:19:23,039 --> 00:19:26,640
which you have typically agreed or has

00:19:25,280 --> 00:19:28,720
been agreed for you

00:19:26,640 --> 00:19:29,760
by the change approval board in your

00:19:28,720 --> 00:19:31,600
company

00:19:29,760 --> 00:19:34,000
so you define calendars you define a

00:19:31,600 --> 00:19:36,000
slots a few small time slots

00:19:34,000 --> 00:19:38,640
where you are allowed to to make changes

00:19:36,000 --> 00:19:40,320
and then you deploy

00:19:38,640 --> 00:19:42,720
on on all the servers that you have

00:19:40,320 --> 00:19:45,679
assigned to that maintenance window

00:19:42,720 --> 00:19:47,840
that avoids human mistakes which cost a

00:19:45,679 --> 00:19:50,400
lot of money

00:19:47,840 --> 00:19:51,039
even the large hyperscalers have

00:19:50,400 --> 00:19:53,200
suffered

00:19:51,039 --> 00:19:54,640
from time to time for human mistakes

00:19:53,200 --> 00:19:58,720
where they have deployed

00:19:54,640 --> 00:20:01,840
to production in during

00:19:58,720 --> 00:20:04,159
operational hours you can with

00:20:01,840 --> 00:20:05,679
uni you can avoid this kind of mistakes

00:20:04,159 --> 00:20:08,240
you just need to define your maintenance

00:20:05,679 --> 00:20:09,120
windows with any tool even your itsm

00:20:08,240 --> 00:20:11,679
tool

00:20:09,120 --> 00:20:11,679
and that's it

00:20:12,480 --> 00:20:22,080
a very nice feature of uni is yomi

00:20:17,520 --> 00:20:25,679
if you have ever tried to how to install

00:20:22,080 --> 00:20:28,320
systems with kickstart of auto just

00:20:25,679 --> 00:20:30,080
you know that this is very complex those

00:20:28,320 --> 00:20:31,919
xml files that you have to write are

00:20:30,080 --> 00:20:33,280
very very complex and very tricky to

00:20:31,919 --> 00:20:37,280
write

00:20:33,280 --> 00:20:39,440
yumi is sold based and we provide

00:20:37,280 --> 00:20:41,520
xiaomi formula so that you have a ui

00:20:39,440 --> 00:20:43,760
where you can with just point and click

00:20:41,520 --> 00:20:44,880
you can define what's the software that

00:20:43,760 --> 00:20:47,440
you want to auto

00:20:44,880 --> 00:20:48,000
to install on some system how to

00:20:47,440 --> 00:20:50,720
partition

00:20:48,000 --> 00:20:52,240
the disk how to network boot everything

00:20:50,720 --> 00:20:55,520
and then you save that and you say okay

00:20:52,240 --> 00:20:58,159
now apply this to this 300 systems

00:20:55,520 --> 00:21:00,720
and you didn't have to write a single

00:20:58,159 --> 00:21:00,720
xml

00:21:00,840 --> 00:21:03,840
line

00:21:04,640 --> 00:21:11,280
oops so another great feature of uni is

00:21:09,520 --> 00:21:12,640
building operating system images of

00:21:11,280 --> 00:21:14,159
course you want to

00:21:12,640 --> 00:21:15,760
to deploy something but what do you

00:21:14,159 --> 00:21:19,600
deploy well

00:21:15,760 --> 00:21:21,520
if you are going to to repetitively

00:21:19,600 --> 00:21:23,440
deploy the same thing over and over and

00:21:21,520 --> 00:21:25,679
over maybe what you want to do is

00:21:23,440 --> 00:21:27,200
create a virtual machine definition with

00:21:25,679 --> 00:21:30,720
kiwi

00:21:27,200 --> 00:21:32,559
you put it in a git repository and then

00:21:30,720 --> 00:21:34,480
you build an operating system image and

00:21:32,559 --> 00:21:37,600
that then you use that as a template

00:21:34,480 --> 00:21:37,600
that's very common also

00:21:38,159 --> 00:21:41,840
and after deploying the image that you

00:21:40,320 --> 00:21:43,600
have created as a template

00:21:41,840 --> 00:21:46,400
you just use configuration management

00:21:43,600 --> 00:21:49,760
with either salt or ansible

00:21:46,400 --> 00:21:53,200
to deploy the right configuration files

00:21:49,760 --> 00:21:55,200
or the right configuration settings

00:21:53,200 --> 00:21:56,320
to the to the clone templates and then

00:21:55,200 --> 00:21:59,600
you're done

00:21:56,320 --> 00:22:00,320
that's it so you deploy you created a

00:21:59,600 --> 00:22:01,919
template

00:22:00,320 --> 00:22:03,120
you deploy the template and then you

00:22:01,919 --> 00:22:04,720
configure the template with the

00:22:03,120 --> 00:22:08,159
specifics of that

00:22:04,720 --> 00:22:12,880
of those 10 or 5 or 100 servers

00:22:08,159 --> 00:22:15,679
and that's it

00:22:12,880 --> 00:22:17,600
and um i have talked earlier about

00:22:15,679 --> 00:22:20,080
container cycle management

00:22:17,600 --> 00:22:21,200
the main uh attractive of a container

00:22:20,080 --> 00:22:22,960
second management is

00:22:21,200 --> 00:22:24,240
you typically do not want to assign what

00:22:22,960 --> 00:22:27,679
we call the vendor channels

00:22:24,240 --> 00:22:30,880
the vendor is coming from the upstream

00:22:27,679 --> 00:22:32,320
uh centos or red hat or suse

00:22:30,880 --> 00:22:34,720
directly to the systems you typically

00:22:32,320 --> 00:22:35,520
want to filter some software to make

00:22:34,720 --> 00:22:37,840
sure that this

00:22:35,520 --> 00:22:39,600
is not installed that this is on version

00:22:37,840 --> 00:22:42,720
x that you know that works currently

00:22:39,600 --> 00:22:44,400
with your application or to add for

00:22:42,720 --> 00:22:45,440
instance monitoring software coming from

00:22:44,400 --> 00:22:47,840
an external

00:22:45,440 --> 00:22:48,960
vendor and then you you need to deploy

00:22:47,840 --> 00:22:53,039
that so you create your own

00:22:48,960 --> 00:22:54,720
software channels right now

00:22:53,039 --> 00:22:56,159
you can use the same approach to build

00:22:54,720 --> 00:22:58,080
containers from so

00:22:56,159 --> 00:22:59,760
from that software those software

00:22:58,080 --> 00:23:01,679
channels that are vetted

00:22:59,760 --> 00:23:03,360
already that are exactly what you want

00:23:01,679 --> 00:23:05,360
to do what your

00:23:03,360 --> 00:23:07,280
it department has decided that is the

00:23:05,360 --> 00:23:11,919
right software combination

00:23:07,280 --> 00:23:14,320
you can now say build be a container

00:23:11,919 --> 00:23:15,679
and using docker that's what will happen

00:23:14,320 --> 00:23:17,360
and then those containers can be

00:23:15,679 --> 00:23:19,840
deployed

00:23:17,360 --> 00:23:21,440
the same way that we deploy operating

00:23:19,840 --> 00:23:23,440
system images

00:23:21,440 --> 00:23:25,440
or or built-up machine templates that

00:23:23,440 --> 00:23:28,159
you can build with your uni so

00:23:25,440 --> 00:23:28,880
there's many possibilities of what uni

00:23:28,159 --> 00:23:32,080
can do

00:23:28,880 --> 00:23:33,280
for you or you can just say okay use

00:23:32,080 --> 00:23:36,720
this uh

00:23:33,280 --> 00:23:39,760
kickstart or autoisto yumi a file

00:23:36,720 --> 00:23:43,200
or configuration to install

00:23:39,760 --> 00:23:43,200
actually the operating system

00:23:44,480 --> 00:23:48,159
joe can even build the software channels

00:23:46,640 --> 00:23:50,480
himself and then

00:23:48,159 --> 00:23:52,799
let other uni users build whatever

00:23:50,480 --> 00:23:56,159
containers or operating system images

00:23:52,799 --> 00:23:57,520
or anything else they want so here's

00:23:56,159 --> 00:23:58,960
that let's say the top level

00:23:57,520 --> 00:24:01,200
administrator of the

00:23:58,960 --> 00:24:02,080
uni server or of the organization and

00:24:01,200 --> 00:24:04,640
then there are

00:24:02,080 --> 00:24:06,720
other roles and users that will take

00:24:04,640 --> 00:24:10,400
care of let's say

00:24:06,720 --> 00:24:12,240
less dangerous functionality

00:24:10,400 --> 00:24:14,720
because our friend joe always keeps an

00:24:12,240 --> 00:24:18,720
eye on security issues

00:24:14,720 --> 00:24:20,480
cbe 2021-12356 has been reported

00:24:18,720 --> 00:24:21,840
and you you immediately want to know are

00:24:20,480 --> 00:24:24,640
my systems affected

00:24:21,840 --> 00:24:26,480
all my container images or my build for

00:24:24,640 --> 00:24:28,960
my operating system images

00:24:26,480 --> 00:24:30,640
well uni will tell you that because

00:24:28,960 --> 00:24:31,440
units continuously synchronize the

00:24:30,640 --> 00:24:34,000
software

00:24:31,440 --> 00:24:35,440
the the cv information and we'll tell

00:24:34,000 --> 00:24:38,480
you hey you have a

00:24:35,440 --> 00:24:40,320
security uh potential security bridge

00:24:38,480 --> 00:24:42,320
source security risk here

00:24:40,320 --> 00:24:43,360
in this system or in this image or in

00:24:42,320 --> 00:24:46,320
this container

00:24:43,360 --> 00:24:48,000
so that you can quickly fix this by

00:24:46,320 --> 00:24:50,559
deploying a new version of

00:24:48,000 --> 00:24:54,080
and they will even recommend you what's

00:24:50,559 --> 00:24:55,600
the version that will fix the problem

00:24:54,080 --> 00:24:59,120
another functionality in the uni is

00:24:55,600 --> 00:25:02,320
monitoring we have uh we are shipping

00:24:59,120 --> 00:25:05,120
the what's has come the cloud native

00:25:02,320 --> 00:25:06,400
industry standard today prometheus and

00:25:05,120 --> 00:25:09,120
grafana

00:25:06,400 --> 00:25:10,080
um we can auto configure with formulas

00:25:09,120 --> 00:25:12,000
with forms

00:25:10,080 --> 00:25:14,559
so with the ui or of course from the

00:25:12,000 --> 00:25:16,480
command line if you want that

00:25:14,559 --> 00:25:17,760
promisive exporters prognosis service

00:25:16,480 --> 00:25:21,360
graphana server

00:25:17,760 --> 00:25:24,480
we will when you register a client

00:25:21,360 --> 00:25:26,400
to uni to put it under uni management it

00:25:24,480 --> 00:25:29,760
will automatically discover that

00:25:26,400 --> 00:25:31,840
in prometheus and in grafana and it will

00:25:29,760 --> 00:25:34,240
save you time

00:25:31,840 --> 00:25:36,159
that's a service discovery that we

00:25:34,240 --> 00:25:38,240
implemented

00:25:36,159 --> 00:25:39,840
then in case that that you have for

00:25:38,240 --> 00:25:42,240
instance many different

00:25:39,840 --> 00:25:43,520
locations like many different branches

00:25:42,240 --> 00:25:44,799
you could use something called

00:25:43,520 --> 00:25:49,200
prometheus federation

00:25:44,799 --> 00:25:51,600
and then for each of your remote sites

00:25:49,200 --> 00:25:52,799
you can federate all of those metrics

00:25:51,600 --> 00:25:56,240
coming from the different

00:25:52,799 --> 00:25:58,799
grafanas into a single grafanas and then

00:25:56,240 --> 00:26:00,559
from different prometheus servers into a

00:25:58,799 --> 00:26:01,120
single promising server and then put

00:26:00,559 --> 00:26:03,200
that

00:26:01,120 --> 00:26:05,039
and have a single pane of glass to all

00:26:03,200 --> 00:26:06,559
your systems no matter if they are on

00:26:05,039 --> 00:26:08,480
this cloud that cloud

00:26:06,559 --> 00:26:10,400
this location that location and you

00:26:08,480 --> 00:26:11,919
could the case for this surprising

00:26:10,400 --> 00:26:14,799
solution is not just

00:26:11,919 --> 00:26:16,000
about uh physical location or remote

00:26:14,799 --> 00:26:17,200
location it's also for instance for

00:26:16,000 --> 00:26:18,799
different products

00:26:17,200 --> 00:26:20,400
imagine that you are in a data center

00:26:18,799 --> 00:26:22,799
where you have a an

00:26:20,400 --> 00:26:23,679
application that offers monitoring with

00:26:22,799 --> 00:26:27,120
prometheus

00:26:23,679 --> 00:26:29,600
such as let's say printer by suzette

00:26:27,120 --> 00:26:30,960
and then you have also your clients your

00:26:29,600 --> 00:26:32,159
your basic systems and you want to

00:26:30,960 --> 00:26:34,960
monitor

00:26:32,159 --> 00:26:37,200
their the the clients and then you can

00:26:34,960 --> 00:26:38,799
federate the promises coming from

00:26:37,200 --> 00:26:40,880
grafana from

00:26:38,799 --> 00:26:42,400
a rancher from the prometheus coming

00:26:40,880 --> 00:26:45,279
from uni and put that

00:26:42,400 --> 00:26:47,360
in a single grafana single pane of glass

00:26:45,279 --> 00:26:48,960
and that's the powerfulness

00:26:47,360 --> 00:26:52,880
of promising federation there's many

00:26:48,960 --> 00:26:55,039
many different cases for this

00:26:52,880 --> 00:26:55,919
advanced ninja skills that you can also

00:26:55,039 --> 00:26:57,840
use

00:26:55,919 --> 00:26:59,520
salt beakers and reactors so because

00:26:57,840 --> 00:27:00,240
what they do is they inspect the system

00:26:59,520 --> 00:27:02,159
they are

00:27:00,240 --> 00:27:03,279
they are continuously running on some

00:27:02,159 --> 00:27:05,840
system

00:27:03,279 --> 00:27:08,159
and then when they notice an event they

00:27:05,840 --> 00:27:10,480
will contact the the unit server

00:27:08,159 --> 00:27:12,799
and then you can react you can define

00:27:10,480 --> 00:27:15,919
for this beacon for this event react

00:27:12,799 --> 00:27:16,720
like this for instance could be if

00:27:15,919 --> 00:27:20,480
someone

00:27:16,720 --> 00:27:23,279
tries to change the password of some

00:27:20,480 --> 00:27:25,760
user or to change the configuration of

00:27:23,279 --> 00:27:26,640
of my web server or my database server

00:27:25,760 --> 00:27:30,159
or whatever

00:27:26,640 --> 00:27:30,799
not only disallow that but also react by

00:27:30,159 --> 00:27:34,000
sending

00:27:30,799 --> 00:27:36,720
me an email or if this

00:27:34,000 --> 00:27:37,679
system is down for more than one minute

00:27:36,720 --> 00:27:40,399
react

00:27:37,679 --> 00:27:41,760
by sending a notification with picture

00:27:40,399 --> 00:27:45,039
duty or something

00:27:41,760 --> 00:27:49,840
like that all of this is is provided by

00:27:45,039 --> 00:27:49,840
sultan with grafana with prometheus

00:27:52,159 --> 00:27:56,480
i have been talking about joe but what's

00:27:54,559 --> 00:27:58,799
joe's job

00:27:56,480 --> 00:28:00,799
well let's say he he is doing he's in

00:27:58,799 --> 00:28:02,000
the same sector that i was before

00:28:00,799 --> 00:28:05,120
joining souza

00:28:02,000 --> 00:28:06,320
i used to work in banking and if you are

00:28:05,120 --> 00:28:08,640
in europe

00:28:06,320 --> 00:28:10,320
it happens that there are very strict

00:28:08,640 --> 00:28:11,279
rules coming from the european central

00:28:10,320 --> 00:28:13,200
bank on

00:28:11,279 --> 00:28:15,120
what your downtime can be and when

00:28:13,200 --> 00:28:17,840
exactly if you are

00:28:15,120 --> 00:28:19,840
not following that you will be fined

00:28:17,840 --> 00:28:23,039
with very very hefty

00:28:19,840 --> 00:28:23,760
uh sanctions from the european central

00:28:23,039 --> 00:28:25,840
bank

00:28:23,760 --> 00:28:26,880
joe knows perfectly and that's why he

00:28:25,840 --> 00:28:28,799
defines and signed

00:28:26,880 --> 00:28:30,480
those maintenance windows to all his

00:28:28,799 --> 00:28:32,000
client systems remember that i mentioned

00:28:30,480 --> 00:28:34,399
that maintenance windows

00:28:32,000 --> 00:28:35,200
it's about avoiding human mistakes but

00:28:34,399 --> 00:28:38,080
also about

00:28:35,200 --> 00:28:40,720
saving money and not and not violating

00:28:38,080 --> 00:28:40,720
regulations

00:28:42,480 --> 00:28:49,520
i think have you ever heard of this it's

00:28:45,760 --> 00:28:51,600
the most common um used i.t

00:28:49,520 --> 00:28:52,880
framework or methodology it's not real

00:28:51,600 --> 00:28:56,080
methodology but

00:28:52,880 --> 00:28:58,080
everybody calls it methodology in it

00:28:56,080 --> 00:29:00,880
operation right it's the it information

00:28:58,080 --> 00:29:01,440
library and for me the most important

00:29:00,880 --> 00:29:04,799
process

00:29:01,440 --> 00:29:07,679
is the process called change management

00:29:04,799 --> 00:29:09,440
so uh typically you will have everything

00:29:07,679 --> 00:29:09,840
connected to your active directory or

00:29:09,440 --> 00:29:13,440
your

00:29:09,840 --> 00:29:16,480
company directory then users will

00:29:13,440 --> 00:29:17,760
open a change request in your itsm tool

00:29:16,480 --> 00:29:21,440
for instance servicenow

00:29:17,760 --> 00:29:24,240
or vmc or whatever then

00:29:21,440 --> 00:29:25,440
some people will review that approved to

00:29:24,240 --> 00:29:28,320
deploy on

00:29:25,440 --> 00:29:32,480
testing environment probably using

00:29:28,320 --> 00:29:35,600
jenkins or some other ci cd integration

00:29:32,480 --> 00:29:38,480
and then once it's deployed you uh

00:29:35,600 --> 00:29:40,880
you you have tested this you want to

00:29:38,480 --> 00:29:43,279
deploy that a few days later a few weeks

00:29:40,880 --> 00:29:43,760
later in production so again you promote

00:29:43,279 --> 00:29:45,919
this

00:29:43,760 --> 00:29:48,240
service now to let's now deploy in

00:29:45,919 --> 00:29:51,120
production and service now can

00:29:48,240 --> 00:29:52,399
connect to to uni and here it says to

00:29:51,120 --> 00:29:54,080
the match but it's really

00:29:52,399 --> 00:29:56,000
uni it's it's there's no difference

00:29:54,080 --> 00:29:59,440
between susie imagine uni

00:29:56,000 --> 00:30:02,880
and and then you can do the whole cycle

00:29:59,440 --> 00:30:04,640
in in in your itsm tool and it's all

00:30:02,880 --> 00:30:07,760
connected and it can be reviewed and

00:30:04,640 --> 00:30:10,480
there's no need for minimal intervention

00:30:07,760 --> 00:30:12,720
so the change approval board approves an

00:30:10,480 --> 00:30:14,399
itsm tool in servicenow

00:30:12,720 --> 00:30:16,799
and when it's reviewed and approved it

00:30:14,399 --> 00:30:18,399
is automatically added to uni and

00:30:16,799 --> 00:30:21,679
execute it

00:30:18,399 --> 00:30:24,000
so no need to even so unica can run

00:30:21,679 --> 00:30:26,080
behind the scenes in your company and

00:30:24,000 --> 00:30:30,480
you never know that

00:30:26,080 --> 00:30:30,480
and there's many cases for this like

00:30:30,720 --> 00:30:34,559
you could even how to generate so

00:30:33,520 --> 00:30:36,880
remember i said that

00:30:34,559 --> 00:30:38,640
uni is continuously synchronizing

00:30:36,880 --> 00:30:39,760
software patches from the upstream

00:30:38,640 --> 00:30:43,039
vendors from

00:30:39,760 --> 00:30:46,240
red hat from uni from

00:30:43,039 --> 00:30:48,480
ubuntu from suse

00:30:46,240 --> 00:30:50,320
then when there's a cv that affects one

00:30:48,480 --> 00:30:53,360
of your systems you could tell you need

00:30:50,320 --> 00:30:55,360
automatically create a servicenow

00:30:53,360 --> 00:30:57,360
request

00:30:55,360 --> 00:30:58,880
to deploy this in a development

00:30:57,360 --> 00:31:01,279
environment than in in a testing

00:30:58,880 --> 00:31:03,360
environment in a production environment

00:31:01,279 --> 00:31:04,399
and send me an email notifying that you

00:31:03,360 --> 00:31:06,159
have created that

00:31:04,399 --> 00:31:08,480
so you don't need to do the work

00:31:06,159 --> 00:31:11,279
yourself uni will do it for you

00:31:08,480 --> 00:31:13,039
you just need some glue scripts to

00:31:11,279 --> 00:31:16,080
connect your itsm tool

00:31:13,039 --> 00:31:19,760
servicenow ivanti jira

00:31:16,080 --> 00:31:22,399
itsm vmc whatever so

00:31:19,760 --> 00:31:25,440
the possibilities of automation with uni

00:31:22,399 --> 00:31:28,000
and integration with other tools are

00:31:25,440 --> 00:31:28,000
thousands

00:31:29,039 --> 00:31:34,480
so in summary we could say that

00:31:32,080 --> 00:31:36,960
uh uni works for everyone it doesn't

00:31:34,480 --> 00:31:40,640
matter if you have 50 systems or

00:31:36,960 --> 00:31:42,240
25 000 or even 250 000 systems because

00:31:40,640 --> 00:31:44,159
in that case you will go to

00:31:42,240 --> 00:31:46,559
a hub server with a multi-server

00:31:44,159 --> 00:31:49,840
architecture it's multi-tenant

00:31:46,559 --> 00:31:50,960
so it covers the cases where you want to

00:31:49,840 --> 00:31:51,760
have everything in one single

00:31:50,960 --> 00:31:54,320
organization or

00:31:51,760 --> 00:31:57,600
where you want to organize in multiple

00:31:54,320 --> 00:31:59,840
organizations in multiple system groups

00:31:57,600 --> 00:32:00,880
we uni is the best tool to manage your

00:31:59,840 --> 00:32:02,960
sap workloads

00:32:00,880 --> 00:32:04,720
we offer container segment management

00:32:02,960 --> 00:32:06,559
live patching facilities

00:32:04,720 --> 00:32:08,559
we have even a quick start guide for

00:32:06,559 --> 00:32:10,320
this very common use case which is sap

00:32:08,559 --> 00:32:13,440
we have formulas with forms

00:32:10,320 --> 00:32:15,120
to deploy hana netweaver replication

00:32:13,440 --> 00:32:17,600
with drvd

00:32:15,120 --> 00:32:18,960
high availability and we have graphene

00:32:17,600 --> 00:32:21,360
dashboards specific for

00:32:18,960 --> 00:32:21,360
sap

00:32:22,080 --> 00:32:27,919
there's even a retail version of uni

00:32:25,279 --> 00:32:29,200
and also of suse manager of course and i

00:32:27,919 --> 00:32:30,799
will explain why and talk

00:32:29,200 --> 00:32:33,600
i keep talking about unions to the

00:32:30,799 --> 00:32:36,559
manager that you can use for uh

00:32:33,600 --> 00:32:39,440
retail for banking for the places where

00:32:36,559 --> 00:32:42,880
you have a lot of endpoints that are

00:32:39,440 --> 00:32:45,200
let's say not really used by humans um

00:32:42,880 --> 00:32:46,799
like a desktop or like a server but

00:32:45,200 --> 00:32:49,919
running some kind of

00:32:46,799 --> 00:32:49,919
embedded application

00:32:50,240 --> 00:32:54,240
for instance we have seen uh many

00:32:52,880 --> 00:32:57,279
customers using

00:32:54,240 --> 00:33:00,159
the retail version for atms

00:32:57,279 --> 00:33:00,799
and yeah you say okay so how is atms and

00:33:00,159 --> 00:33:02,640
banking

00:33:00,799 --> 00:33:04,000
retail indeed it's the same it's

00:33:02,640 --> 00:33:04,960
endpoints and you need an operating

00:33:04,000 --> 00:33:07,519
system

00:33:04,960 --> 00:33:08,720
that has a long cycle a long life cycle

00:33:07,519 --> 00:33:11,600
not just

00:33:08,720 --> 00:33:12,480
two or three years for that case so they

00:33:11,600 --> 00:33:13,760
offer something called

00:33:12,480 --> 00:33:15,440
switzerland's enterprise point of

00:33:13,760 --> 00:33:17,840
service with seven years seven and a

00:33:15,440 --> 00:33:20,000
half years actually

00:33:17,840 --> 00:33:22,880
and offers some specific functionality

00:33:20,000 --> 00:33:25,679
like dhcp dns

00:33:22,880 --> 00:33:27,039
and some templates to build your images

00:33:25,679 --> 00:33:29,919
open suse or

00:33:27,039 --> 00:33:32,320
slash images that will make your life

00:33:29,919 --> 00:33:32,320
easier

00:33:32,480 --> 00:33:35,840
in the end uni provides a proactive

00:33:34,320 --> 00:33:37,279
approach to your it infrastructure

00:33:35,840 --> 00:33:38,159
management it helps you regain

00:33:37,279 --> 00:33:40,559
complexity

00:33:38,159 --> 00:33:42,240
to control complexity in heterogeneous

00:33:40,559 --> 00:33:43,200
linux i.t environments which are the

00:33:42,240 --> 00:33:46,320
day-to-day

00:33:43,200 --> 00:33:48,000
it's it's very rare these days to find

00:33:46,320 --> 00:33:50,559
that there's a single linux

00:33:48,000 --> 00:33:52,320
that rules everything there's ubuntu and

00:33:50,559 --> 00:33:53,840
the centos and there's oracle linux and

00:33:52,320 --> 00:33:56,480
there's slayers

00:33:53,840 --> 00:33:57,279
and that's the the day-to-day of most of

00:33:56,480 --> 00:34:00,320
you

00:33:57,279 --> 00:34:02,559
attending this session today this

00:34:00,320 --> 00:34:04,880
in turn saves costs and improves the

00:34:02,559 --> 00:34:08,560
productivity of your i.t people

00:34:04,880 --> 00:34:10,639
reduces errors and reduces complexity

00:34:08,560 --> 00:34:12,960
through the the simplified management

00:34:10,639 --> 00:34:16,159
via the web ui the the command line

00:34:12,960 --> 00:34:16,159
tools or the api

00:34:16,560 --> 00:34:20,320
and of course there's the enhanced

00:34:18,320 --> 00:34:23,599
security and compliance that

00:34:20,320 --> 00:34:23,599
uni gives you

00:34:24,240 --> 00:34:28,720
summary of everything is anywhere linux

00:34:26,879 --> 00:34:29,040
runs or unimages it doesn't matter if

00:34:28,720 --> 00:34:31,679
it's

00:34:29,040 --> 00:34:32,159
it's data center or cloud we uni is the

00:34:31,679 --> 00:34:33,760
only

00:34:32,159 --> 00:34:36,399
linux management tool that's combined

00:34:33,760 --> 00:34:37,919
software container cycle management

00:34:36,399 --> 00:34:39,440
class being configuration management

00:34:37,919 --> 00:34:41,520
with salt and ansible

00:34:39,440 --> 00:34:44,000
and automation for all the major linear

00:34:41,520 --> 00:34:45,839
distributions

00:34:44,000 --> 00:34:47,599
let me explain now why i was talking

00:34:45,839 --> 00:34:49,839
about uni and suse major

00:34:47,599 --> 00:34:50,800
uni is the upstream project for sushi

00:34:49,839 --> 00:34:54,159
manager

00:34:50,800 --> 00:34:55,599
if you need support for uni then uh the

00:34:54,159 --> 00:34:56,720
product you want is just a matter of

00:34:55,599 --> 00:35:00,400
contact your salespeople

00:34:56,720 --> 00:35:02,160
in in souza other than that

00:35:00,400 --> 00:35:03,520
the the only differences between the

00:35:02,160 --> 00:35:05,680
union system manager is

00:35:03,520 --> 00:35:06,720
the units committee supported we have a

00:35:05,680 --> 00:35:09,280
meeting every month

00:35:06,720 --> 00:35:10,640
last friday of the month at 4 00 pm

00:35:09,280 --> 00:35:12,960
european time

00:35:10,640 --> 00:35:14,160
we uni runs on opensuse leap while

00:35:12,960 --> 00:35:16,880
supermarket runs on

00:35:14,160 --> 00:35:17,920
switzerland's enterprise there's monthly

00:35:16,880 --> 00:35:21,280
releases of both

00:35:17,920 --> 00:35:23,040
union suse manager the difference is

00:35:21,280 --> 00:35:24,960
with user manager the patches are

00:35:23,040 --> 00:35:28,000
provided for older versions

00:35:24,960 --> 00:35:31,040
while for uni the message we'll get is

00:35:28,000 --> 00:35:33,359
just move to the newer version

00:35:31,040 --> 00:35:35,839
there's also some minor differences

00:35:33,359 --> 00:35:37,839
about the ui and the translations

00:35:35,839 --> 00:35:39,200
where the transactions in suse manager

00:35:37,839 --> 00:35:42,960
are

00:35:39,200 --> 00:35:44,800
reviewed or bettered by suse and in

00:35:42,960 --> 00:35:46,560
the uni we just enabled everything by

00:35:44,800 --> 00:35:49,520
default and yeah some of them

00:35:46,560 --> 00:35:50,160
might not be that complete so i would

00:35:49,520 --> 00:35:53,680
tell you

00:35:50,160 --> 00:35:55,839
just join us at the uniproject.org

00:35:53,680 --> 00:35:57,200
follow us in twitter we have a youtube

00:35:55,839 --> 00:36:01,440
channel which is linked from

00:35:57,200 --> 00:36:03,839
uni project we have chat with guitar

00:36:01,440 --> 00:36:05,200
and yeah you have feature requests

00:36:03,839 --> 00:36:07,599
you've identified bugs

00:36:05,200 --> 00:36:09,440
please come to our github project and

00:36:07,599 --> 00:36:13,599
report them

00:36:09,440 --> 00:36:27,119
we are always there to help you

00:36:13,599 --> 00:36:29,200
thank you very much

00:36:27,119 --> 00:36:29,200

YouTube URL: https://www.youtube.com/watch?v=wZxnmruV_Uo


