Title: openSUSE Virtual Conference 2021 - Keynote by Sheng Liang from SUSE
Publication date: 2021-06-20
Playlist: openSUSE Virtual Conference 2021
Description: 
	https://media.ccc.de/v/3522-keynote-by-sheng-liang-from-suse



Sheng Liang is the President of Engineering & Innovation for SUSE and is the Co-Founder of Rancher Labs. He has a PhD from Yale University in Computer Science and did his undergraduate degree at the University of Science and Technology of China. 

Sheng Liang is the President of Engineering & Innovation for SUSE and is the Co-Founder of Rancher Labs. He has a PhD from Yale University in Computer Science and did his undergraduate degree at the University of Science and Technology of China. 

Douglas DeMaio
Captions: 
	00:00:01,580 --> 00:00:05,850
[Music]

00:00:09,120 --> 00:00:13,679
hi

00:00:11,040 --> 00:00:16,640
good afternoon good morning wherever you

00:00:13,679 --> 00:00:20,240
are in the world thank you

00:00:16,640 --> 00:00:21,680
for joining my talk at the open souza

00:00:20,240 --> 00:00:24,240
conference

00:00:21,680 --> 00:00:24,960
in this talk i'm going to be covering

00:00:24,240 --> 00:00:28,000
linux

00:00:24,960 --> 00:00:30,960
and kubernetes innovations at souza

00:00:28,000 --> 00:00:32,960
i'm chen liang president of engineering

00:00:30,960 --> 00:00:35,520
and innovation at souza

00:00:32,960 --> 00:00:37,200
i joined souza last year with the

00:00:35,520 --> 00:00:39,840
acquisition of

00:00:37,200 --> 00:00:42,480
rancher where i was the co-founder and

00:00:39,840 --> 00:00:42,480
ceo

00:00:42,879 --> 00:00:49,680
since this is a open souza conference

00:00:46,160 --> 00:00:52,879
all of you guys are intimately familiar

00:00:49,680 --> 00:00:55,039
with linux uh many of you

00:00:52,879 --> 00:00:55,920
might be familiar with kubernetes as

00:00:55,039 --> 00:00:59,280
well

00:00:55,920 --> 00:01:02,719
and linux and kubernetes really

00:00:59,280 --> 00:01:05,760
go hand in hand they cannot be separated

00:01:02,719 --> 00:01:07,840
for the purpose of this talk it would be

00:01:05,760 --> 00:01:10,640
impossible for me to cover

00:01:07,840 --> 00:01:11,280
everything that's going on at souza in a

00:01:10,640 --> 00:01:14,560
mere

00:01:11,280 --> 00:01:17,439
you know 20 30 minutes so i have a

00:01:14,560 --> 00:01:17,840
i'm going to focus most of my attention

00:01:17,439 --> 00:01:22,000
on

00:01:17,840 --> 00:01:24,840
kubernetes and um in fact on a specific

00:01:22,000 --> 00:01:26,000
project uh that we're doing called

00:01:24,840 --> 00:01:28,560
harvester

00:01:26,000 --> 00:01:30,479
that marries a lot of strength of

00:01:28,560 --> 00:01:33,200
kubernetes with linux

00:01:30,479 --> 00:01:33,520
and linux virtualization but i'll give

00:01:33,200 --> 00:01:36,960
you

00:01:33,520 --> 00:01:39,439
a general context of kubernetes as well

00:01:36,960 --> 00:01:41,040
and toward the end i'm also going to

00:01:39,439 --> 00:01:43,840
give you a very quick

00:01:41,040 --> 00:01:45,119
overview of some of the other open

00:01:43,840 --> 00:01:47,600
source initiatives

00:01:45,119 --> 00:01:48,560
uh innovative projects really exciting

00:01:47,600 --> 00:01:51,520
stuff

00:01:48,560 --> 00:01:52,479
that's going on at souza hopefully your

00:01:51,520 --> 00:01:56,159
that will give you

00:01:52,479 --> 00:01:56,799
uh some idea and it would interest some

00:01:56,159 --> 00:01:59,200
of you

00:01:56,799 --> 00:02:00,479
to looking to and perhaps even

00:01:59,200 --> 00:02:05,439
participate

00:02:00,479 --> 00:02:05,439
in some of those projects first of all

00:02:06,000 --> 00:02:11,920
why kubernetes why is kubernetes so

00:02:09,360 --> 00:02:13,360
important because kubernetes is

00:02:11,920 --> 00:02:18,080
everywhere kubernetes

00:02:13,360 --> 00:02:21,040
is practically going wherever linux goes

00:02:18,080 --> 00:02:22,080
and as we know linux is everywhere linux

00:02:21,040 --> 00:02:25,280
runs on

00:02:22,080 --> 00:02:26,640
developer laptop it runs in corporate

00:02:25,280 --> 00:02:30,080
data centers

00:02:26,640 --> 00:02:30,879
it runs in the cloud it runs in branch

00:02:30,080 --> 00:02:33,360
offices

00:02:30,879 --> 00:02:35,040
powering both you know the back office

00:02:33,360 --> 00:02:37,920
as well as

00:02:35,040 --> 00:02:38,959
in some cases say front office cash

00:02:37,920 --> 00:02:42,480
registers

00:02:38,959 --> 00:02:44,480
and linux is very popular in edge and

00:02:42,480 --> 00:02:46,959
embedded environments

00:02:44,480 --> 00:02:49,519
and kubernetes is going to all of these

00:02:46,959 --> 00:02:53,200
places as well

00:02:49,519 --> 00:02:56,400
for example uh developers use

00:02:53,200 --> 00:02:58,879
uh platforms like minicube or docker

00:02:56,400 --> 00:03:01,200
desktop which has long since

00:02:58,879 --> 00:03:03,840
embedded the kubernetes runtime and more

00:03:01,200 --> 00:03:05,599
recently there's a project that

00:03:03,840 --> 00:03:07,440
we've been working on called rancher

00:03:05,599 --> 00:03:11,040
desktop that brings

00:03:07,440 --> 00:03:14,720
extremely easy to use experience

00:03:11,040 --> 00:03:17,920
for get developers access to kubernetes

00:03:14,720 --> 00:03:21,040
in the enterprise data center there are

00:03:17,920 --> 00:03:24,400
many many kubernetes distros

00:03:21,040 --> 00:03:26,799
that would enable companies to set up

00:03:24,400 --> 00:03:27,680
kubernetes clusters either on bare metal

00:03:26,799 --> 00:03:31,280
servers

00:03:27,680 --> 00:03:34,159
or on vsphere or nutanix clusters

00:03:31,280 --> 00:03:34,799
rke that's a product from an open source

00:03:34,159 --> 00:03:37,680
project from

00:03:34,799 --> 00:03:39,120
souza openshift that's a project from a

00:03:37,680 --> 00:03:41,920
competitor of souza

00:03:39,120 --> 00:03:42,879
so those are probably the best known in

00:03:41,920 --> 00:03:45,360
the cloud

00:03:42,879 --> 00:03:46,799
kubernetes services are table stakes

00:03:45,360 --> 00:03:50,720
today

00:03:46,799 --> 00:03:54,959
amazon eks google gke

00:03:50,720 --> 00:03:58,080
azure aks those allow you to run

00:03:54,959 --> 00:04:00,799
kubernetes practically for free

00:03:58,080 --> 00:04:01,439
you still pay for the underlying you

00:04:00,799 --> 00:04:03,920
know

00:04:01,439 --> 00:04:06,080
compute infrastructure that's needed to

00:04:03,920 --> 00:04:09,599
run your kubernetes workload

00:04:06,080 --> 00:04:12,720
but these cloud providers have

00:04:09,599 --> 00:04:15,920
pretty much decided to use kubernetes

00:04:12,720 --> 00:04:17,120
as a you know as almost a draw as a loss

00:04:15,920 --> 00:04:20,079
leader to draw as

00:04:17,120 --> 00:04:20,880
much workload as possible into their

00:04:20,079 --> 00:04:24,639
cloud

00:04:20,880 --> 00:04:27,680
last but not the least projects like

00:04:24,639 --> 00:04:30,639
k3s and some of the other projects from

00:04:27,680 --> 00:04:31,440
other vendors in the space but k3s is no

00:04:30,639 --> 00:04:34,639
doubt

00:04:31,440 --> 00:04:35,600
uh the de facto industry standard that

00:04:34,639 --> 00:04:38,639
has brought

00:04:35,600 --> 00:04:40,880
kubernetes from you know the proven data

00:04:38,639 --> 00:04:43,840
center and cloud use cases

00:04:40,880 --> 00:04:44,960
to raspberry pi surveillance cameras

00:04:43,840 --> 00:04:48,160
automobiles

00:04:44,960 --> 00:04:52,000
energy platforms branch offices

00:04:48,160 --> 00:04:54,880
of all the edge and branch use cases for

00:04:52,000 --> 00:04:58,479
kubernetes today are primarily powered

00:04:54,880 --> 00:04:59,759
by technologies like k3s so with all of

00:04:58,479 --> 00:05:03,280
these technologies

00:04:59,759 --> 00:05:06,080
kubernetes is is going anywhere that

00:05:03,280 --> 00:05:06,080
linux goes

00:05:06,720 --> 00:05:12,880
a fundamental reason why kubernetes

00:05:10,160 --> 00:05:15,680
is so important is because just like

00:05:12,880 --> 00:05:16,320
linux it enables a common compute

00:05:15,680 --> 00:05:18,400
platform

00:05:16,320 --> 00:05:20,400
across any infrastructure by

00:05:18,400 --> 00:05:21,199
infrastructure i mean developer desktop

00:05:20,400 --> 00:05:24,320
data center

00:05:21,199 --> 00:05:27,759
cloud you know branch machines and

00:05:24,320 --> 00:05:29,680
and engine embedded devices and

00:05:27,759 --> 00:05:31,440
the the difference between linux and

00:05:29,680 --> 00:05:34,320
kubernetes is while

00:05:31,440 --> 00:05:36,400
linux typically you know provides the

00:05:34,320 --> 00:05:39,919
essential operating systems

00:05:36,400 --> 00:05:42,720
services required to run applications on

00:05:39,919 --> 00:05:43,919
one server of course we also have linux

00:05:42,720 --> 00:05:46,880
clustering but

00:05:43,919 --> 00:05:48,000
but that aside i mean operating system

00:05:46,880 --> 00:05:50,639
primarily

00:05:48,000 --> 00:05:52,320
manages resources and run applications

00:05:50,639 --> 00:05:55,520
on one computer

00:05:52,320 --> 00:05:56,080
kubernetes provides an added set of

00:05:55,520 --> 00:05:58,560
features

00:05:56,080 --> 00:06:00,319
very much complementary to the base

00:05:58,560 --> 00:06:04,080
linux operating system

00:06:00,319 --> 00:06:07,120
so it enables a massively scalable and

00:06:04,080 --> 00:06:09,680
micro services structured application

00:06:07,120 --> 00:06:10,639
that could run our cluster and in some

00:06:09,680 --> 00:06:14,160
cases you know

00:06:10,639 --> 00:06:16,479
upwards of tens hundreds

00:06:14,160 --> 00:06:17,520
thousands or even tens of thousands of

00:06:16,479 --> 00:06:19,520
machines

00:06:17,520 --> 00:06:20,720
and and these are some of the

00:06:19,520 --> 00:06:23,759
capabilities

00:06:20,720 --> 00:06:27,039
uh i listed here on the slide should be

00:06:23,759 --> 00:06:30,560
very familiar to you you know kubernetes

00:06:27,039 --> 00:06:32,960
by implementing kubernetes all these

00:06:30,560 --> 00:06:33,680
compute platforms can implement a common

00:06:32,960 --> 00:06:36,560
api

00:06:33,680 --> 00:06:39,199
and pathogen standard it can perform

00:06:36,560 --> 00:06:41,199
health checks and aha for applications

00:06:39,199 --> 00:06:42,560
it implements or integrates with load

00:06:41,199 --> 00:06:44,880
balancing

00:06:42,560 --> 00:06:46,840
it integrates with networking or

00:06:44,880 --> 00:06:49,360
implement the basic form of overlay

00:06:46,840 --> 00:06:51,759
networking it allows you to apply

00:06:49,360 --> 00:06:52,479
network security policies to keep your

00:06:51,759 --> 00:06:55,840
application

00:06:52,479 --> 00:06:59,520
secure it allows you to implement

00:06:55,840 --> 00:07:01,199
backup and recovery practices for both

00:06:59,520 --> 00:07:03,360
your applications as well as the

00:07:01,199 --> 00:07:04,400
infrastructure services used to run the

00:07:03,360 --> 00:07:06,720
applications

00:07:04,400 --> 00:07:08,160
it allows you to automatically scale up

00:07:06,720 --> 00:07:10,000
and scale down

00:07:08,160 --> 00:07:11,840
the infrastructure that's required to

00:07:10,000 --> 00:07:13,199
run the application based on the

00:07:11,840 --> 00:07:15,919
workload demand

00:07:13,199 --> 00:07:16,960
and it performs service discovery across

00:07:15,919 --> 00:07:19,520
multiple micro

00:07:16,960 --> 00:07:20,639
services and it provides finally

00:07:19,520 --> 00:07:23,520
provides

00:07:20,639 --> 00:07:24,880
the networking as well as room based

00:07:23,520 --> 00:07:28,479
access control

00:07:24,880 --> 00:07:31,759
for running your application securely

00:07:28,479 --> 00:07:33,280
so this you get it out of the box for

00:07:31,759 --> 00:07:35,599
kubernetes and that's why

00:07:33,280 --> 00:07:36,560
kubernetes is going everywhere all of

00:07:35,599 --> 00:07:38,639
these uh

00:07:36,560 --> 00:07:39,680
capabilities as you can imagine are

00:07:38,639 --> 00:07:43,039
essential

00:07:39,680 --> 00:07:46,160
for developing modern applications and

00:07:43,039 --> 00:07:49,120
the products uh souza has a very

00:07:46,160 --> 00:07:49,840
uh coherent and established product line

00:07:49,120 --> 00:07:52,160
that

00:07:49,840 --> 00:07:53,759
serves the exact needs of these modern

00:07:52,160 --> 00:07:55,759
empress enterprises

00:07:53,759 --> 00:07:57,280
looking to either modernize their

00:07:55,759 --> 00:08:00,479
traditional workload

00:07:57,280 --> 00:08:03,919
or develop new cloud-native workload

00:08:00,479 --> 00:08:06,319
for the future and and suse

00:08:03,919 --> 00:08:08,560
products are designed to run across the

00:08:06,319 --> 00:08:12,400
hybrid any form of hybrid cross

00:08:08,560 --> 00:08:13,039
cloud infrastructure with linux serving

00:08:12,400 --> 00:08:15,440
as the

00:08:13,039 --> 00:08:16,560
suse linux serving sd which is based on

00:08:15,440 --> 00:08:19,759
open souza

00:08:16,560 --> 00:08:22,960
of course as all of us know as the

00:08:19,759 --> 00:08:26,160
linux computing product family

00:08:22,960 --> 00:08:28,000
and kubernetes that is covered by our

00:08:26,160 --> 00:08:30,720
rancher product family

00:08:28,000 --> 00:08:31,599
and uh the i'm not gonna i'm not gonna

00:08:30,720 --> 00:08:34,159
get too much

00:08:31,599 --> 00:08:36,000
into details of the linux product family

00:08:34,159 --> 00:08:38,479
you all know about that

00:08:36,000 --> 00:08:39,200
uh and and rancher is fundamentally a

00:08:38,479 --> 00:08:41,839
platform

00:08:39,200 --> 00:08:42,719
for managing all of those kubernetes

00:08:41,839 --> 00:08:44,560
digitals

00:08:42,719 --> 00:08:46,000
some of these kubernetes distros are

00:08:44,560 --> 00:08:49,680
created by souza

00:08:46,000 --> 00:08:52,000
like rke and k3s some kubernetes distros

00:08:49,680 --> 00:08:53,200
may be created by the cloud providers

00:08:52,000 --> 00:08:57,200
like gke and

00:08:53,200 --> 00:09:00,640
aks and eks suse also

00:08:57,200 --> 00:09:00,640
develops and supports

00:09:00,720 --> 00:09:04,480
container storage technologies like

00:09:02,800 --> 00:09:07,519
longhorn so together

00:09:04,480 --> 00:09:09,760
the rancho product family and the souza

00:09:07,519 --> 00:09:13,120
linux enterprise product family

00:09:09,760 --> 00:09:14,560
form the foundation of the modern i.t

00:09:13,120 --> 00:09:17,600
stack and that's

00:09:14,560 --> 00:09:18,560
where hundreds thousands tens of

00:09:17,600 --> 00:09:21,519
thousands of

00:09:18,560 --> 00:09:22,560
customers rely on this software stack

00:09:21,519 --> 00:09:26,880
every day

00:09:22,560 --> 00:09:29,600
to power their mission critical workload

00:09:26,880 --> 00:09:31,279
so with that as the basis with

00:09:29,600 --> 00:09:34,160
kubernetes now achieving

00:09:31,279 --> 00:09:35,360
clear mainstream adoption what are some

00:09:34,160 --> 00:09:37,920
of the

00:09:35,360 --> 00:09:39,600
innovative technologies we can still

00:09:37,920 --> 00:09:43,279
develop from here

00:09:39,600 --> 00:09:45,440
so i'll start with one and then i'll ask

00:09:43,279 --> 00:09:47,279
i'll briefly talk about some of the

00:09:45,440 --> 00:09:47,839
other projects that we're also working

00:09:47,279 --> 00:09:51,279
on

00:09:47,839 --> 00:09:54,080
so a particularly interesting project

00:09:51,279 --> 00:09:54,560
actually lies in the area of data center

00:09:54,080 --> 00:09:57,680
so

00:09:54,560 --> 00:09:59,440
as we as we know the data center

00:09:57,680 --> 00:10:02,480
industry has gone through

00:09:59,440 --> 00:10:04,399
tremendous amount of transformation in

00:10:02,480 --> 00:10:07,040
the last few years

00:10:04,399 --> 00:10:07,839
a lot of the growth of the traditional

00:10:07,040 --> 00:10:09,760
data center

00:10:07,839 --> 00:10:11,600
nowadays is actually happening in the

00:10:09,760 --> 00:10:14,959
cloud but that doesn't mean

00:10:11,600 --> 00:10:17,120
enterprises do not continue to invest in

00:10:14,959 --> 00:10:20,880
the data center in fact

00:10:17,120 --> 00:10:22,800
companies like vmware and nutanix as

00:10:20,880 --> 00:10:24,320
in particular are seeing tremendous

00:10:22,800 --> 00:10:27,040
amount of growth

00:10:24,320 --> 00:10:28,480
with their private cloud offerings and

00:10:27,040 --> 00:10:31,760
these days the private

00:10:28,480 --> 00:10:34,079
cloud offering is no longer

00:10:31,760 --> 00:10:35,120
implemented using technologies like

00:10:34,079 --> 00:10:37,760
openstack

00:10:35,120 --> 00:10:39,320
they're increasingly implemented using a

00:10:37,760 --> 00:10:41,760
piece of technology called

00:10:39,320 --> 00:10:44,079
hyper-converged infrastructure so let's

00:10:41,760 --> 00:10:46,720
first talk about that

00:10:44,079 --> 00:10:48,160
at souza we have an innovative project

00:10:46,720 --> 00:10:50,560
open source project called

00:10:48,160 --> 00:10:52,959
harvester which is open source

00:10:50,560 --> 00:10:56,160
hyper-converged infrastructure

00:10:52,959 --> 00:10:58,480
and how is this new open source

00:10:56,160 --> 00:11:02,079
hyper-converged infrastructure

00:10:58,480 --> 00:11:04,079
harvester different from the hci

00:11:02,079 --> 00:11:05,120
or hyper-converged infrastructure we all

00:11:04,079 --> 00:11:07,200
know today

00:11:05,120 --> 00:11:09,120
which we call the traditional

00:11:07,200 --> 00:11:12,160
hyper-converged infrastructure

00:11:09,120 --> 00:11:15,200
what we call hci 1.0 so

00:11:12,160 --> 00:11:16,079
hci 1.0 that's you know represented by

00:11:15,200 --> 00:11:18,640
vendors like

00:11:16,079 --> 00:11:19,600
vmware and nutanix is very well

00:11:18,640 --> 00:11:23,200
established

00:11:19,600 --> 00:11:25,760
it's a great product hdi is great

00:11:23,200 --> 00:11:28,399
because it greatly simplifies

00:11:25,760 --> 00:11:29,519
how data center can be managed and

00:11:28,399 --> 00:11:33,360
consumed

00:11:29,519 --> 00:11:38,000
it integrates networking storage

00:11:33,360 --> 00:11:40,720
and virtualization as a turnkey

00:11:38,000 --> 00:11:42,079
software appliance experience all

00:11:40,720 --> 00:11:45,360
supported behind

00:11:42,079 --> 00:11:48,000
a api a coherent api and ui

00:11:45,360 --> 00:11:48,640
so it's essentially data center in a box

00:11:48,000 --> 00:11:51,519
you know as

00:11:48,640 --> 00:11:52,880
a as the as the founder of nutanix used

00:11:51,519 --> 00:11:55,519
to call it it's like

00:11:52,880 --> 00:11:58,320
data center shipped as an iphone so

00:11:55,519 --> 00:12:01,680
internally you might be using kvm

00:11:58,320 --> 00:12:03,839
or these vmware or particular type of

00:12:01,680 --> 00:12:06,560
nas or send technology

00:12:03,839 --> 00:12:07,519
but the customer doesn't care all he

00:12:06,560 --> 00:12:09,760
cares about

00:12:07,519 --> 00:12:10,880
is through an api which is typically

00:12:09,760 --> 00:12:14,160
proprietary

00:12:10,880 --> 00:12:15,120
or in the ui to deploy uh you know these

00:12:14,160 --> 00:12:16,959
applications

00:12:15,120 --> 00:12:19,200
typically these are traditional

00:12:16,959 --> 00:12:22,160
applications but modern applications

00:12:19,200 --> 00:12:25,600
work as well so hci 1.0

00:12:22,160 --> 00:12:28,880
is data center in a box um

00:12:25,600 --> 00:12:29,680
we believe hci is right for open source

00:12:28,880 --> 00:12:31,920
adopt uh

00:12:29,680 --> 00:12:33,120
disruption as of right now there's

00:12:31,920 --> 00:12:35,600
really no

00:12:33,120 --> 00:12:36,639
uh a clear viable open source

00:12:35,600 --> 00:12:39,760
alternative

00:12:36,639 --> 00:12:42,480
to converged infrastructure so just like

00:12:39,760 --> 00:12:44,800
linux disrupted you know the the world

00:12:42,480 --> 00:12:48,480
of windows and solaris

00:12:44,800 --> 00:12:51,920
and hpux we believe

00:12:48,480 --> 00:12:52,560
each hci is right for this disruption as

00:12:51,920 --> 00:12:54,959
well

00:12:52,560 --> 00:12:56,959
and it's it's it's not just open source

00:12:54,959 --> 00:13:01,680
but the technology itself

00:12:56,959 --> 00:13:05,200
is also under um a great deal of

00:13:01,680 --> 00:13:06,560
change one of the big changes now we

00:13:05,200 --> 00:13:09,360
have kubernetes

00:13:06,560 --> 00:13:11,040
so that we can conceivably build a

00:13:09,360 --> 00:13:12,079
hyper-converged infrastructure

00:13:11,040 --> 00:13:15,519
experience

00:13:12,079 --> 00:13:18,000
that doesn't rely on proprietary api

00:13:15,519 --> 00:13:19,680
but build on the industry standard

00:13:18,000 --> 00:13:21,839
kubernetes api

00:13:19,680 --> 00:13:23,279
and then by also by building on

00:13:21,839 --> 00:13:24,639
kubernetes api

00:13:23,279 --> 00:13:26,800
we get the ability for the

00:13:24,639 --> 00:13:29,600
hyper-converged infrastructure to manage

00:13:26,800 --> 00:13:31,839
both containers and virtual machines

00:13:29,600 --> 00:13:32,839
and that is how we believe we can

00:13:31,839 --> 00:13:35,920
modernize

00:13:32,839 --> 00:13:40,399
uh hyper-converged infrastructure

00:13:35,920 --> 00:13:45,199
and turn hci 1.0 to hci 2.0

00:13:40,399 --> 00:13:48,240
and one of the great things about a

00:13:45,199 --> 00:13:51,920
hci 2.0 project like harvester

00:13:48,240 --> 00:13:55,120
is by leveraging kubernetes we can

00:13:51,920 --> 00:13:58,079
and we can seamlessly extend

00:13:55,120 --> 00:13:59,519
the same experience from on-premise data

00:13:58,079 --> 00:14:03,680
center to the edge

00:13:59,519 --> 00:14:05,680
and cloud why because as i said

00:14:03,680 --> 00:14:08,639
if project harvester is built on

00:14:05,680 --> 00:14:10,800
kubernetes and kubernetes api is

00:14:08,639 --> 00:14:11,680
everywhere so with a platform like a

00:14:10,800 --> 00:14:15,040
rancher

00:14:11,680 --> 00:14:16,880
who can manage which can manage any type

00:14:15,040 --> 00:14:19,600
of kubernetes clusters

00:14:16,880 --> 00:14:20,720
rancher can help tie together project

00:14:19,600 --> 00:14:23,680
harvester

00:14:20,720 --> 00:14:26,959
with you know proprietary cloud services

00:14:23,680 --> 00:14:27,600
like aks gke and eks that runs in the

00:14:26,959 --> 00:14:30,880
cloud

00:14:27,600 --> 00:14:33,360
and then truly provide a hybrid cloud

00:14:30,880 --> 00:14:35,120
experience a consistent coherent

00:14:33,360 --> 00:14:37,600
hybrid cloud experience for the

00:14:35,120 --> 00:14:38,480
enterprise so that they can deploy these

00:14:37,600 --> 00:14:41,120
applications

00:14:38,480 --> 00:14:42,800
seamlessly whatever infrastructure they

00:14:41,120 --> 00:14:46,240
choose to run

00:14:42,800 --> 00:14:48,560
uh harvester is built on

00:14:46,240 --> 00:14:49,279
not just one technology but it's built

00:14:48,560 --> 00:14:51,600
on a

00:14:49,279 --> 00:14:52,720
pretty large collection of cloud-native

00:14:51,600 --> 00:14:55,680
technologies

00:14:52,720 --> 00:14:58,000
many of which are built by rancher and

00:14:55,680 --> 00:14:58,720
asusa and rancher but some of them are

00:14:58,000 --> 00:15:01,360
not

00:14:58,720 --> 00:15:02,399
so it uses the longhorn storage

00:15:01,360 --> 00:15:04,720
technology

00:15:02,399 --> 00:15:08,800
it uses quick word virtualization

00:15:04,720 --> 00:15:11,440
wrapper it uses kvm as the fundamental

00:15:08,800 --> 00:15:12,639
hypervisor technology of course it uses

00:15:11,440 --> 00:15:15,279
kubernetes

00:15:12,639 --> 00:15:16,480
as the overall orchestration framework

00:15:15,279 --> 00:15:19,600
then it uses

00:15:16,480 --> 00:15:22,959
networking uh plugins like

00:15:19,600 --> 00:15:24,000
multus which is a plug-in cni plug-in to

00:15:22,959 --> 00:15:26,880
kubernetes

00:15:24,000 --> 00:15:27,360
and at the end you get fully 100 open

00:15:26,880 --> 00:15:30,639
source

00:15:27,360 --> 00:15:32,320
hci software and it combines all these

00:15:30,639 --> 00:15:35,839
cloud native

00:15:32,320 --> 00:15:39,440
technologies into a single coherent

00:15:35,839 --> 00:15:42,079
api and that being uh hci

00:15:39,440 --> 00:15:44,480
software of course it's designed to run

00:15:42,079 --> 00:15:47,920
on the bare metal

00:15:44,480 --> 00:15:50,800
uh it has a very uh complete feature set

00:15:47,920 --> 00:15:52,160
it it is still in beta it's it's

00:15:50,800 --> 00:15:56,160
targeted to ga

00:15:52,160 --> 00:15:58,880
later this year it has you know complete

00:15:56,160 --> 00:16:00,800
vm lifecycle management primarily built

00:15:58,880 --> 00:16:02,480
around the cooper technology

00:16:00,800 --> 00:16:05,839
but you don't interact with cooper

00:16:02,480 --> 00:16:05,839
directly uh you know

00:16:06,000 --> 00:16:11,920
harvester has its own ui and api it

00:16:09,279 --> 00:16:13,920
uh it has integrated distributed block

00:16:11,920 --> 00:16:16,959
storage built using long-form

00:16:13,920 --> 00:16:18,560
and it it relies on multus and as well

00:16:16,959 --> 00:16:21,440
as vlan networking

00:16:18,560 --> 00:16:23,040
supports both a software-defined

00:16:21,440 --> 00:16:26,399
networking and vlan

00:16:23,040 --> 00:16:28,639
hardware-defined networking for uh for

00:16:26,399 --> 00:16:29,440
for for multi-tenant uh network

00:16:28,639 --> 00:16:32,560
management

00:16:29,440 --> 00:16:37,839
and it has a built-in object store for

00:16:32,560 --> 00:16:37,839
for managing uh vm disk images

00:16:38,240 --> 00:16:42,480
with harvester of course everything

00:16:40,160 --> 00:16:45,199
starts from these bare metal nodes

00:16:42,480 --> 00:16:46,399
and you would install linux slash

00:16:45,199 --> 00:16:49,519
opensuse works

00:16:46,399 --> 00:16:53,120
really well and it's actually with sles

00:16:49,519 --> 00:16:55,120
we're able to leverage the microsoft

00:16:53,120 --> 00:16:57,199
windows server virtualization

00:16:55,120 --> 00:16:59,920
certification so not only

00:16:57,199 --> 00:17:00,880
linux vm but windows vm could also be

00:16:59,920 --> 00:17:04,160
supported

00:17:00,880 --> 00:17:07,760
and and as you know by now the windows

00:17:04,160 --> 00:17:10,799
are uh slash and and open source are now

00:17:07,760 --> 00:17:12,720
binary compatible binary the same so

00:17:10,799 --> 00:17:14,240
so pretty much you can you know you can

00:17:12,720 --> 00:17:17,280
swap uh

00:17:14,240 --> 00:17:19,839
celes you can you can swapping open the

00:17:17,280 --> 00:17:22,480
first lesson everything will work

00:17:19,839 --> 00:17:24,240
the same way as well but a harvester as

00:17:22,480 --> 00:17:26,559
a as an open source project

00:17:24,240 --> 00:17:29,360
is actually os agnostic so it is not

00:17:26,559 --> 00:17:32,880
really just designed for open source

00:17:29,360 --> 00:17:36,880
and slash it works with rail center os

00:17:32,880 --> 00:17:38,320
ubuntu as well and every node will run a

00:17:36,880 --> 00:17:40,240
long horn

00:17:38,320 --> 00:17:41,679
run the longhorn service as well as the

00:17:40,240 --> 00:17:45,280
cool world service

00:17:41,679 --> 00:17:48,080
then these virtual machines gets created

00:17:45,280 --> 00:17:50,559
on the host essentially gets created on

00:17:48,080 --> 00:17:53,440
the host operating systems kvm

00:17:50,559 --> 00:17:55,280
uh each vm can we you know we can create

00:17:53,440 --> 00:17:58,000
these different networks i think

00:17:55,280 --> 00:17:59,440
each vm by default gets connected to a

00:17:58,000 --> 00:18:00,480
management network which is a

00:17:59,440 --> 00:18:03,280
software-defined

00:18:00,480 --> 00:18:04,480
network and and then you you can also

00:18:03,280 --> 00:18:07,520
optionally have

00:18:04,480 --> 00:18:07,840
additional mix uh to connect these vms

00:18:07,520 --> 00:18:10,960
to

00:18:07,840 --> 00:18:14,080
you know hardware-based uh vlan networks

00:18:10,960 --> 00:18:15,840
and and and that that that enables the

00:18:14,080 --> 00:18:17,120
greatest degree of control and

00:18:15,840 --> 00:18:19,360
flexibility

00:18:17,120 --> 00:18:21,919
in in deploying these virtual machines

00:18:19,360 --> 00:18:25,600
in uh enterprise production

00:18:21,919 --> 00:18:27,679
uh now that i've introduced

00:18:25,600 --> 00:18:29,600
i've introduced project harvester

00:18:27,679 --> 00:18:33,039
project harvester is just

00:18:29,600 --> 00:18:35,120
one of many many projects open source

00:18:33,039 --> 00:18:37,679
innovative projects that's happening at

00:18:35,120 --> 00:18:40,320
souza so i don't really have time

00:18:37,679 --> 00:18:41,200
to go through every one of these

00:18:40,320 --> 00:18:43,520
projects

00:18:41,200 --> 00:18:45,200
in this short talk if you want to find

00:18:43,520 --> 00:18:50,240
out more about those projects

00:18:45,200 --> 00:18:52,640
please go to souzaprojects.github.io

00:18:50,240 --> 00:18:53,919
and i'll just quickly skim through them

00:18:52,640 --> 00:18:56,960
i think i

00:18:53,919 --> 00:18:58,400
mentioned quickly rent your desktop on

00:18:56,960 --> 00:19:00,799
the very first slide

00:18:58,400 --> 00:19:03,200
a wrench your desktop is basically

00:19:00,799 --> 00:19:06,000
designed to be a replacement

00:19:03,200 --> 00:19:07,520
a more kubernetes friendly replacement

00:19:06,000 --> 00:19:10,080
to docker desktop

00:19:07,520 --> 00:19:11,280
as you know docker desktop was primarily

00:19:10,080 --> 00:19:13,440
designed to

00:19:11,280 --> 00:19:16,000
run allow you to run docker for

00:19:13,440 --> 00:19:18,000
developers to interact with docker

00:19:16,000 --> 00:19:20,480
and and since then they've integrated

00:19:18,000 --> 00:19:20,960
kubernetes into docker desktop which is

00:19:20,480 --> 00:19:23,440
great

00:19:20,960 --> 00:19:24,400
but the ranger desktop is purposefully

00:19:23,440 --> 00:19:27,440
designed

00:19:24,400 --> 00:19:29,840
to run uh let developers run kubernetes

00:19:27,440 --> 00:19:31,679
on their desktop and you can choose

00:19:29,840 --> 00:19:33,760
one of the great features of wrench or

00:19:31,679 --> 00:19:35,840
desktop is you get a pick and choose

00:19:33,760 --> 00:19:38,400
whatever kubernetes versions you want to

00:19:35,840 --> 00:19:40,160
use and it will like switch for you very

00:19:38,400 --> 00:19:42,160
quickly for developers it's very

00:19:40,160 --> 00:19:44,400
important

00:19:42,160 --> 00:19:46,320
another project that a lot of developers

00:19:44,400 --> 00:19:48,880
use today

00:19:46,320 --> 00:19:49,679
is in the same space it's called mini

00:19:48,880 --> 00:19:51,679
cube

00:19:49,679 --> 00:19:52,799
mini cube is great i mean a lot of our

00:19:51,679 --> 00:19:55,440
developers use

00:19:52,799 --> 00:19:57,120
mini cube as well but we believe still

00:19:55,440 --> 00:19:59,440
it could be made a little bit easier to

00:19:57,120 --> 00:20:01,039
use and a little bit more user friendly

00:19:59,440 --> 00:20:02,720
and and a little bit more powerful and

00:20:01,039 --> 00:20:05,039
that's what docker was

00:20:02,720 --> 00:20:07,120
that's what venture desktop is about

00:20:05,039 --> 00:20:09,039
harvester already talked about so

00:20:07,120 --> 00:20:10,480
it's open source hyper-converged

00:20:09,039 --> 00:20:12,480
infrastructure software

00:20:10,480 --> 00:20:14,799
i'm not going to spend any more time

00:20:12,480 --> 00:20:17,919
here the third project

00:20:14,799 --> 00:20:19,200
on this list is called coupe warden it

00:20:17,919 --> 00:20:22,720
is a

00:20:19,200 --> 00:20:25,760
it is a mission control

00:20:22,720 --> 00:20:27,679
admission controller written

00:20:25,760 --> 00:20:30,000
that allows you to write it using web

00:20:27,679 --> 00:20:32,799
assembly so

00:20:30,000 --> 00:20:33,600
this is very important because

00:20:32,799 --> 00:20:35,919
kubernetes

00:20:33,600 --> 00:20:37,600
mission controller is used to implement

00:20:35,919 --> 00:20:42,480
very sophisticated

00:20:37,600 --> 00:20:45,840
uh policies and access control policies

00:20:42,480 --> 00:20:47,520
and uh governance policies for deploying

00:20:45,840 --> 00:20:50,559
kubernetes in

00:20:47,520 --> 00:20:50,880
secure or regulated environments there's

00:20:50,559 --> 00:20:54,159
a

00:20:50,880 --> 00:20:56,159
if you're involving in some of the cncf

00:20:54,159 --> 00:21:00,159
projects you might have heard of a

00:20:56,159 --> 00:21:03,520
a project called opa open policy engine

00:21:00,159 --> 00:21:07,200
an open policy engine uses a uh

00:21:03,520 --> 00:21:11,039
a declarative uh logic programming like

00:21:07,200 --> 00:21:11,919
language to to code up uh the policy

00:21:11,039 --> 00:21:14,320
which is quite

00:21:11,919 --> 00:21:15,120
powerful but that's not necessarily a

00:21:14,320 --> 00:21:17,760
language that

00:21:15,120 --> 00:21:20,720
a lot of people know how to coding so in

00:21:17,760 --> 00:21:24,080
most cases opa users end up just

00:21:20,720 --> 00:21:26,320
using a few can out-of-the-box policies

00:21:24,080 --> 00:21:28,400
so the great thing with cooper warden is

00:21:26,320 --> 00:21:31,280
it's kind of works like opa

00:21:28,400 --> 00:21:33,440
except that you can code up the the

00:21:31,280 --> 00:21:35,360
policy in whatever language you want as

00:21:33,440 --> 00:21:37,440
long as it can be compiled

00:21:35,360 --> 00:21:39,200
uh into web standards so i'm very

00:21:37,440 --> 00:21:42,080
excited about this project

00:21:39,200 --> 00:21:42,400
looking forward to integrating it into

00:21:42,080 --> 00:21:45,200
uh

00:21:42,400 --> 00:21:46,480
into you know the rancho product someday

00:21:45,200 --> 00:21:49,360
uh hipper

00:21:46,480 --> 00:21:52,080
is a you know comes from for the for the

00:21:49,360 --> 00:21:55,280
open souza world it should ring about

00:21:52,080 --> 00:21:57,200
it it basically comes from uh the idea

00:21:55,280 --> 00:22:00,240
of a helm zipper

00:21:57,200 --> 00:22:02,480
so the the the idea is

00:22:00,240 --> 00:22:04,159
in you know in the linux world you have

00:22:02,480 --> 00:22:07,200
rpms which are

00:22:04,159 --> 00:22:10,960
uh application packages so helm is the

00:22:07,200 --> 00:22:13,039
corresponding uh concept in the in the

00:22:10,960 --> 00:22:13,600
kubernetes space a lot of applications

00:22:13,039 --> 00:22:16,720
are

00:22:13,600 --> 00:22:18,960
packaged as a as a helm chart but helm

00:22:16,720 --> 00:22:21,919
chart typically only

00:22:18,960 --> 00:22:22,559
only packages one application but as you

00:22:21,919 --> 00:22:24,000
know if i

00:22:22,559 --> 00:22:26,080
a lot of times if i install an

00:22:24,000 --> 00:22:27,039
application i also want to make sure its

00:22:26,080 --> 00:22:29,360
dependencies

00:22:27,039 --> 00:22:30,480
also installed and that's where just

00:22:29,360 --> 00:22:33,440
like zipper

00:22:30,480 --> 00:22:35,440
or young takes care of dependencies

00:22:33,440 --> 00:22:37,679
between rpm packages

00:22:35,440 --> 00:22:38,480
hipper takes care of dependencies

00:22:37,679 --> 00:22:42,480
between

00:22:38,480 --> 00:22:44,559
helm packages and this is a project

00:22:42,480 --> 00:22:45,840
we started at souza since the

00:22:44,559 --> 00:22:48,400
acquisition and it's

00:22:45,840 --> 00:22:48,880
it's going very very well the the next

00:22:48,400 --> 00:22:51,919
project

00:22:48,880 --> 00:22:52,720
at pmeo it's a it's still an early stage

00:22:51,919 --> 00:22:56,720
project

00:22:52,720 --> 00:22:57,840
it's designed to be a a a modernized

00:22:56,720 --> 00:23:00,720
simplified

00:22:57,840 --> 00:23:01,919
uh platform as a service platform

00:23:00,720 --> 00:23:05,200
software so

00:23:01,919 --> 00:23:07,760
as we all know uh souza used to be a uh

00:23:05,200 --> 00:23:10,159
used to have a cloud foundry product and

00:23:07,760 --> 00:23:10,960
it we've had some degree of success but

00:23:10,159 --> 00:23:14,559
it hasn't

00:23:10,960 --> 00:23:17,679
cloud foundry has has pretty much failed

00:23:14,559 --> 00:23:19,760
to uh to take over the world as the

00:23:17,679 --> 00:23:20,720
computing platform of choice for the

00:23:19,760 --> 00:23:23,039
enterprise

00:23:20,720 --> 00:23:25,520
and there's a big reason is it's just

00:23:23,039 --> 00:23:28,640
very heavyweight very complicated

00:23:25,520 --> 00:23:32,000
with kubernetes

00:23:28,640 --> 00:23:34,559
the game has changed much of what

00:23:32,000 --> 00:23:36,000
cloud foundry used to do nowadays done

00:23:34,559 --> 00:23:39,039
by kubernetes already

00:23:36,000 --> 00:23:41,360
so what opinio did is it took the best

00:23:39,039 --> 00:23:42,480
out of cloud foundry in terms of user

00:23:41,360 --> 00:23:46,240
experience

00:23:42,480 --> 00:23:48,880
in terms of uh ease of deployment

00:23:46,240 --> 00:23:49,360
then it ease of application deployment

00:23:48,880 --> 00:23:52,720
and

00:23:49,360 --> 00:23:53,919
the github integration then it it it

00:23:52,720 --> 00:23:56,480
kind of ported that

00:23:53,919 --> 00:23:57,919
made it run on top of kubernetes so it's

00:23:56,480 --> 00:23:59,760
extremely lightweight

00:23:57,919 --> 00:24:01,279
and extremely easy to use and it

00:23:59,760 --> 00:24:04,640
provides a natural

00:24:01,279 --> 00:24:07,760
upgrade path for for folks who you know

00:24:04,640 --> 00:24:09,840
who who were running on cloud foundry or

00:24:07,760 --> 00:24:11,200
who are still looking for a platform as

00:24:09,840 --> 00:24:14,159
a service layer

00:24:11,200 --> 00:24:16,559
and uh look forward to opinion getting

00:24:14,159 --> 00:24:17,679
mature and being productized in the near

00:24:16,559 --> 00:24:22,080
future

00:24:17,679 --> 00:24:25,200
next project opening that is our aiops

00:24:22,080 --> 00:24:28,279
is aiml driven anomaly detection which

00:24:25,200 --> 00:24:29,760
in another world is ai ops aiops is a

00:24:28,279 --> 00:24:31,919
tremendously

00:24:29,760 --> 00:24:34,240
popular area of innovation in the

00:24:31,919 --> 00:24:36,679
industry today

00:24:34,240 --> 00:24:37,919
companies nowadays are investing

00:24:36,679 --> 00:24:41,120
increasingly

00:24:37,919 --> 00:24:44,559
heavy amount of resources into devops

00:24:41,120 --> 00:24:46,480
into operation i.t ops and

00:24:44,559 --> 00:24:49,200
these teams they have to deal with you

00:24:46,480 --> 00:24:52,880
know increasingly large amount of data

00:24:49,200 --> 00:24:55,200
alerts audit logs uh and it's

00:24:52,880 --> 00:24:56,159
the the volume is such that the

00:24:55,200 --> 00:24:59,279
traditional

00:24:56,159 --> 00:25:01,679
uh monitoring tools and and and

00:24:59,279 --> 00:25:02,320
the manual process just simply not able

00:25:01,679 --> 00:25:04,799
to

00:25:02,320 --> 00:25:05,600
to to handle their way too many false

00:25:04,799 --> 00:25:07,760
positives

00:25:05,600 --> 00:25:08,640
so what uh what a project like opne is

00:25:07,760 --> 00:25:12,400
able to do is

00:25:08,640 --> 00:25:15,919
it it enables uh these organizations to

00:25:12,400 --> 00:25:19,200
uh using the using ai technology to

00:25:15,919 --> 00:25:19,679
uh dramatically narrow down uh the the

00:25:19,200 --> 00:25:23,200
the

00:25:19,679 --> 00:25:25,679
the set of anomalies that uh

00:25:23,200 --> 00:25:27,279
that humans have to those human

00:25:25,679 --> 00:25:29,600
operators have to look at

00:25:27,279 --> 00:25:30,960
therefore greatly reduce the workload

00:25:29,600 --> 00:25:34,159
and resource requirements

00:25:30,960 --> 00:25:36,640
for for for for for the operations team

00:25:34,159 --> 00:25:38,799
so we you know we've had discussions

00:25:36,640 --> 00:25:41,039
with potential customers about it

00:25:38,799 --> 00:25:43,679
it's it's it's everyone's extremely

00:25:41,039 --> 00:25:47,120
excited it's a heavily anticipated

00:25:43,679 --> 00:25:51,520
uh product on the rancho road map

00:25:47,120 --> 00:25:53,679
then the next uh the next three projects

00:25:51,520 --> 00:25:56,240
did not come out of a rancher they come

00:25:53,679 --> 00:25:58,480
from the souza side but nonetheless

00:25:56,240 --> 00:25:59,760
uh they come from the linux side

00:25:58,480 --> 00:26:02,880
extremely exciting

00:25:59,760 --> 00:26:06,559
you know uh first sleep eci uh

00:26:02,880 --> 00:26:08,400
cbci is an alternative to red hat ubi

00:26:06,559 --> 00:26:10,559
which is you know the unified based

00:26:08,400 --> 00:26:12,559
image that's a

00:26:10,559 --> 00:26:14,960
base container image that's free to

00:26:12,559 --> 00:26:18,880
distribute but the problem with red hat

00:26:14,960 --> 00:26:21,600
ubi is is it's only supported on

00:26:18,880 --> 00:26:22,400
the red hat enterprise linux operating

00:26:21,600 --> 00:26:26,000
system

00:26:22,400 --> 00:26:26,480
whereas the the sleep bci is it's built

00:26:26,000 --> 00:26:29,440
out

00:26:26,480 --> 00:26:30,799
out of the same you know uh open scissor

00:26:29,440 --> 00:26:33,279
and sleep packages

00:26:30,799 --> 00:26:34,559
it's fully supported on any linux

00:26:33,279 --> 00:26:38,000
operating system and

00:26:34,559 --> 00:26:42,400
again uh that speaks to susan's openness

00:26:38,000 --> 00:26:46,080
to the market and our attitude toward

00:26:42,400 --> 00:26:48,799
giving users a choice when it comes to

00:26:46,080 --> 00:26:52,000
picking technologies at every level

00:26:48,799 --> 00:26:55,039
trento is a

00:26:52,000 --> 00:26:58,159
is a new project that we started at

00:26:55,039 --> 00:27:01,600
souza to improve the ways of

00:26:58,159 --> 00:27:04,880
uh uh how you deploy sap on

00:27:01,600 --> 00:27:05,440
on slash and and uh on slash operating

00:27:04,880 --> 00:27:08,480
system

00:27:05,440 --> 00:27:11,520
it's a it is sap

00:27:08,480 --> 00:27:14,720
is one of the you know more complex uh

00:27:11,520 --> 00:27:15,520
application packages uh that folks have

00:27:14,720 --> 00:27:17,919
to deploy

00:27:15,520 --> 00:27:18,720
manage and upgrade and try to make that

00:27:17,919 --> 00:27:22,240
process

00:27:18,720 --> 00:27:24,080
very easy sap and susa have a long

00:27:22,240 --> 00:27:26,559
history of collaboration

00:27:24,080 --> 00:27:27,360
uh majority of sap deployments in the

00:27:26,559 --> 00:27:30,000
world

00:27:27,360 --> 00:27:30,799
runs out runs on the slash operating

00:27:30,000 --> 00:27:34,320
system

00:27:30,799 --> 00:27:37,440
and trento solidifies uh susan's

00:27:34,320 --> 00:27:38,240
leadership in that area last but not the

00:27:37,440 --> 00:27:40,720
least

00:27:38,240 --> 00:27:42,880
is probably one of the you know more

00:27:40,720 --> 00:27:45,919
earlier stage

00:27:42,880 --> 00:27:48,000
uh open source software

00:27:45,919 --> 00:27:50,159
project and it doesn't even have a logo

00:27:48,000 --> 00:27:55,200
yet it's called aquarium

00:27:50,159 --> 00:27:58,880
aquarium is our new effort to productize

00:27:55,200 --> 00:28:01,520
staff souza used to have a

00:27:58,880 --> 00:28:02,480
set based storage product but that

00:28:01,520 --> 00:28:06,000
product

00:28:02,480 --> 00:28:09,440
did uh uh is basically a package

00:28:06,000 --> 00:28:13,279
of the upstream self distribution

00:28:09,440 --> 00:28:16,559
uh with we realized that kind of

00:28:13,279 --> 00:28:19,520
storage product simply was not

00:28:16,559 --> 00:28:21,200
easy to consume because it gives users

00:28:19,520 --> 00:28:24,320
too many

00:28:21,200 --> 00:28:26,960
degree of flexibility when it comes to

00:28:24,320 --> 00:28:29,279
how to deploy and configure

00:28:26,960 --> 00:28:31,039
the the the staff storage technology

00:28:29,279 --> 00:28:33,200
self-storage technologies

00:28:31,039 --> 00:28:34,799
is very good but it needs to be more

00:28:33,200 --> 00:28:36,000
constrained it needs to be more

00:28:34,799 --> 00:28:39,120
opinionated

00:28:36,000 --> 00:28:40,880
and and the folks should you know people

00:28:39,120 --> 00:28:42,240
shouldn't have to deal with the basic

00:28:40,880 --> 00:28:45,440
staff concepts

00:28:42,240 --> 00:28:46,559
instead uh the storage admins should be

00:28:45,440 --> 00:28:49,679
able to specify

00:28:46,559 --> 00:28:50,159
exactly what they want as a storage and

00:28:49,679 --> 00:28:52,399
uh

00:28:50,159 --> 00:28:54,159
and and then leave the basic leave the

00:28:52,399 --> 00:28:56,840
detailed implementation

00:28:54,159 --> 00:28:59,279
to staff to provide an enterprise-grade

00:28:56,840 --> 00:29:02,640
reliable

00:28:59,279 --> 00:29:06,000
storage appliance so aquarium is

00:29:02,640 --> 00:29:08,799
a software-based storage appliance

00:29:06,000 --> 00:29:09,360
implemented using ceph technology so

00:29:08,799 --> 00:29:12,480
here i

00:29:09,360 --> 00:29:15,440
quickly have gone through uh

00:29:12,480 --> 00:29:16,080
many of these open source projects that

00:29:15,440 --> 00:29:20,159
uh

00:29:16,080 --> 00:29:23,039
we we we we started and we branded souza

00:29:20,159 --> 00:29:24,399
where uh these projects have uh cleared

00:29:23,039 --> 00:29:26,480
a reasonably

00:29:24,399 --> 00:29:28,159
uh they've done gone through enough

00:29:26,480 --> 00:29:30,880
internal investing so they

00:29:28,159 --> 00:29:32,240
i think all of them are uh are publicly

00:29:30,880 --> 00:29:35,200
accessible now

00:29:32,240 --> 00:29:37,600
i encourage all of you based on your own

00:29:35,200 --> 00:29:40,000
personal interest to go on to the souza

00:29:37,600 --> 00:29:42,880
dash projects at github.io

00:29:40,000 --> 00:29:44,720
which then contains links to all of

00:29:42,880 --> 00:29:48,159
these projects they're all public

00:29:44,720 --> 00:29:49,679
please take a look download them look at

00:29:48,159 --> 00:29:51,840
the source code

00:29:49,679 --> 00:29:52,960
let us know what you think we love to

00:29:51,840 --> 00:29:56,799
work with you

00:29:52,960 --> 00:29:58,720
as we continue to uh to improve these

00:29:56,799 --> 00:30:00,960
projects hopefully one day

00:29:58,720 --> 00:30:02,480
you'll be either become a contributor or

00:30:00,960 --> 00:30:05,039
a user and you

00:30:02,480 --> 00:30:06,240
you'll be able to join the community of

00:30:05,039 --> 00:30:09,200
these projects

00:30:06,240 --> 00:30:10,399
just like uh uh how you've been engaged

00:30:09,200 --> 00:30:12,880
with opensuse

00:30:10,399 --> 00:30:13,919
opensuse is a great community and now

00:30:12,880 --> 00:30:15,919
we're gonna

00:30:13,919 --> 00:30:17,919
of course all of these projects can work

00:30:15,919 --> 00:30:20,320
they work with open souza

00:30:17,919 --> 00:30:21,679
and and they strengthen the opensuse

00:30:20,320 --> 00:30:24,559
community and i

00:30:21,679 --> 00:30:26,640
fully anticipate you know that they also

00:30:24,559 --> 00:30:28,120
bring in new community members and i

00:30:26,640 --> 00:30:30,000
expect there's going to be a lot of

00:30:28,120 --> 00:30:32,000
cross-pollination between

00:30:30,000 --> 00:30:34,880
open source community and all of these

00:30:32,000 --> 00:30:38,000
kubernetes uh community and all these uh

00:30:34,880 --> 00:30:38,399
open source project communities really

00:30:38,000 --> 00:30:41,919
look

00:30:38,399 --> 00:30:43,039
forward to either continue to work with

00:30:41,919 --> 00:30:44,960
you or start a

00:30:43,039 --> 00:30:47,120
new working relationship with you in the

00:30:44,960 --> 00:30:49,039
context of of those projects

00:30:47,120 --> 00:30:50,399
so thank you very much thanks for

00:30:49,039 --> 00:30:52,960
attending my call

00:30:50,399 --> 00:30:54,399
and have a great have a have a great

00:30:52,960 --> 00:31:03,919
afternoon have a great day

00:30:54,399 --> 00:31:03,919

YouTube URL: https://www.youtube.com/watch?v=RUSelAmbRQ4


