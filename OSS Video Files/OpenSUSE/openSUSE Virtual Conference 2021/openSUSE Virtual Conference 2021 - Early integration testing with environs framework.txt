Title: openSUSE Virtual Conference 2021 - Early integration testing with environs framework
Publication date: 2021-06-19
Playlist: openSUSE Virtual Conference 2021
Description: 
	https://media.ccc.de/v/3550-early-integration-testing-with-environs-framework

Shareable scripting cross-product scenarios

Do you know difference between starting mariadb vs postgres server as a regular user? Or apache vs nginx? Or maybe want to know specifics of working example of starting rsync server? 

There is no difference and no specifics - just use generated start / status / stop scripts. And there is more: (spawn as many services as needed(\*), configure ssl for cluster, build services from source, ...) - without affecting your system(*).

environs framework suggests a universal approach for managing various services by generating bash wrappers, with following benefits:

- object oriented approach - it hides internal specifics of service handling and allows an easy way to review and tweak them;
- brief scripts for complex scenarios in complex topologies, without privileged access to the system;
- easy to compare behavior of verious topologies;
- demonstrate "how-to" behavior, share reproducible cross-product scripted scenarios in bug reports or TDD / BDD;
- no OS flavor limit - run everywhere where shell is(*);
- no extra dependencies - run in cloud, container, VM, CI or local machine.

The main goal behind environs framework it to cover early integration testing and provide a way to script and share cross-product behavioral scenarios without root access to the system. So far the framework includes scripting possibility for postgresql, apache, nginx, rsync , mariadb(*), openQA, MirrorBrain, MirrorCache, zypper.

Do you know difference between starting mariadb vs postgres server as a regular user? Or apache vs nginx? Or maybe want to know specifics of working example of starting rsync server? 

There is no difference and no specifics - just use generated start / status / stop scripts. And there is more: (spawn as many services as needed(\*), configure ssl for cluster, build services from source, ...) - without affecting your system(*).

environs framework suggests a universal approach for managing various services by generating bash wrappers, with following benefits:

- object oriented approach - it hides internal specifics of service handling and allows an easy way to review and tweak them;
- brief scripts for complex scenarios in complex topologies, without privileged access to the system;
- easy to compare behavior of verious topologies;
- demonstrate "how-to" behavior, share reproducible cross-product scripted scenarios in bug reports or TDD / BDD;
- no OS flavor limit - run everywhere where shell is(*);
- no extra dependencies - run in cloud, container, VM, CI or local machine.

The main goal behind environs framework it to cover early integration testing and provide a way to script and share cross-product behavioral scenarios without root access to the system. So far the framework includes scripting possibility for postgresql, apache, nginx, rsync , mariadb(*), openQA, MirrorBrain, MirrorCache, zypper.

Andrii Nikitin
Captions: 
	00:00:01,580 --> 00:00:05,850
[Music]

00:00:07,919 --> 00:00:11,280
hello

00:00:08,480 --> 00:00:13,200
and welcome to presentation about

00:00:11,280 --> 00:00:16,000
integration testing

00:00:13,200 --> 00:00:17,199
with environs framework my name is

00:00:16,000 --> 00:00:20,640
andreani kitchen

00:00:17,199 --> 00:00:23,920
i am member of build obs team at suse

00:00:20,640 --> 00:00:28,840
and my team takes responsibility for

00:00:23,920 --> 00:00:31,439
infrastructure behind open build

00:00:28,840 --> 00:00:33,680
service

00:00:31,439 --> 00:00:34,559
okay i understand that integration

00:00:33,680 --> 00:00:38,239
testing is

00:00:34,559 --> 00:00:41,680
a very wide and it's quite complex area

00:00:38,239 --> 00:00:44,239
and then

00:00:41,680 --> 00:00:44,960
for me the biggest problem here is that

00:00:44,239 --> 00:00:48,160
there are no

00:00:44,960 --> 00:00:51,520
common tool no common way to

00:00:48,160 --> 00:00:54,000
communicate to integrate different

00:00:51,520 --> 00:00:54,960
products or at least to demonstrate that

00:00:54,000 --> 00:00:58,800
different products

00:00:54,960 --> 00:00:59,440
can work together sometimes it's easy to

00:00:58,800 --> 00:01:02,480
do but

00:00:59,440 --> 00:01:05,920
sometimes very hard to do and

00:01:02,480 --> 00:01:08,320
again there is no common approach or

00:01:05,920 --> 00:01:10,000
that that we can follow to understand to

00:01:08,320 --> 00:01:13,200
easily understand each other

00:01:10,000 --> 00:01:14,159
so what means cross product here uh it

00:01:13,200 --> 00:01:16,240
means that

00:01:14,159 --> 00:01:19,680
there's several products each product

00:01:16,240 --> 00:01:23,119
has maybe online cycle it has own teams

00:01:19,680 --> 00:01:26,640
it has own quality control um

00:01:23,119 --> 00:01:29,280
and the estimate is a good quality but

00:01:26,640 --> 00:01:30,320
it's hard to prove that several products

00:01:29,280 --> 00:01:33,119
can communicate

00:01:30,320 --> 00:01:33,520
together or at least it's hard to screen

00:01:33,119 --> 00:01:36,240
these

00:01:33,520 --> 00:01:36,640
scenarios and usually there is no expert

00:01:36,240 --> 00:01:40,079
that

00:01:36,640 --> 00:01:44,479
can cover all involved products

00:01:40,079 --> 00:01:47,200
at the same level and so we i i think

00:01:44,479 --> 00:01:48,720
we are lacking at the moment too that we

00:01:47,200 --> 00:01:52,479
can define

00:01:48,720 --> 00:01:53,040
how we script uh some complex scenario

00:01:52,479 --> 00:01:56,079
of cross

00:01:53,040 --> 00:01:59,119
product communication

00:01:56,079 --> 00:02:00,560
okay so when i speak about cross about

00:01:59,119 --> 00:02:03,360
integration testing

00:02:00,560 --> 00:02:04,159
we of course speak about some test

00:02:03,360 --> 00:02:07,280
scenarios

00:02:04,159 --> 00:02:10,399
and testing errors they usually can run

00:02:07,280 --> 00:02:13,680
on some product topology

00:02:10,399 --> 00:02:16,319
um this means that there is a

00:02:13,680 --> 00:02:17,040
list of products involved the each of

00:02:16,319 --> 00:02:19,040
them is

00:02:17,040 --> 00:02:20,879
some particular version maybe it's

00:02:19,040 --> 00:02:24,640
distribution type maybe

00:02:20,879 --> 00:02:25,360
we it may be some fork so maybe custom

00:02:24,640 --> 00:02:29,120
build

00:02:25,360 --> 00:02:31,200
etc also it's a very

00:02:29,120 --> 00:02:32,160
complex topic is dependency management

00:02:31,200 --> 00:02:34,400
because for

00:02:32,160 --> 00:02:36,800
each product definition maybe we need

00:02:34,400 --> 00:02:39,360
some tricks and how to satisfy

00:02:36,800 --> 00:02:42,480
dependencies and of course there are

00:02:39,360 --> 00:02:42,480
test scenarios that

00:02:43,840 --> 00:02:48,720
basically define expected behavior or

00:02:46,000 --> 00:02:52,560
maybe they demonstrate some problem

00:02:48,720 --> 00:02:55,599
in this cross-product communication

00:02:52,560 --> 00:02:58,239
uh below is one example of

00:02:55,599 --> 00:02:58,879
product topology definition for example

00:02:58,239 --> 00:03:01,440
we have

00:02:58,879 --> 00:03:02,959
web server apache observer particular

00:03:01,440 --> 00:03:04,480
version we have database of particular

00:03:02,959 --> 00:03:06,159
versions and we have some project that

00:03:04,480 --> 00:03:08,800
we are currently working on

00:03:06,159 --> 00:03:09,440
so we want to run some script scenarios

00:03:08,800 --> 00:03:12,959
on this

00:03:09,440 --> 00:03:16,159
topology and see outcome and now

00:03:12,959 --> 00:03:18,959
uh comes dream

00:03:16,159 --> 00:03:20,080
dream framework requirements because i

00:03:18,959 --> 00:03:23,200
did spend quite

00:03:20,080 --> 00:03:24,480
a lot of time uh on integration testing

00:03:23,200 --> 00:03:27,519
on cross-product

00:03:24,480 --> 00:03:31,280
communication and um

00:03:27,519 --> 00:03:32,480
i find that the the test framework that

00:03:31,280 --> 00:03:34,239
runs tests it

00:03:32,480 --> 00:03:36,000
should not actually care about how

00:03:34,239 --> 00:03:40,159
dependencies are satisfied

00:03:36,000 --> 00:03:44,879
this means it's different

00:03:40,159 --> 00:03:47,120
dimension because

00:03:44,879 --> 00:03:49,360
no matter how we satisfy dependencies we

00:03:47,120 --> 00:03:50,720
should be able to run some script and

00:03:49,360 --> 00:03:53,200
see whether

00:03:50,720 --> 00:03:55,280
a product work or not maybe it's because

00:03:53,200 --> 00:03:57,120
of dependency maybe not but we are still

00:03:55,280 --> 00:03:59,040
should be able to run scripts so

00:03:57,120 --> 00:04:00,000
dependency management is optional it

00:03:59,040 --> 00:04:03,120
should be done on

00:04:00,000 --> 00:04:06,560
different level of

00:04:03,120 --> 00:04:09,840
of testing or maybe it's it's

00:04:06,560 --> 00:04:12,080
not the part of testing itself

00:04:09,840 --> 00:04:12,879
uh also the test framework should not

00:04:12,080 --> 00:04:14,640
enforce

00:04:12,879 --> 00:04:15,920
how we deliver the products maybe we

00:04:14,640 --> 00:04:17,519
build them from source

00:04:15,920 --> 00:04:19,919
maybe we give it to some default

00:04:17,519 --> 00:04:23,600
packages so maybe we get it from

00:04:19,919 --> 00:04:26,639
some particular distribution and again

00:04:23,600 --> 00:04:31,440
the test framework it should it should

00:04:26,639 --> 00:04:33,520
be able to use binaries to test

00:04:31,440 --> 00:04:35,199
artifacts from different kinds of

00:04:33,520 --> 00:04:37,680
distributions

00:04:35,199 --> 00:04:40,320
then the test framework should not have

00:04:37,680 --> 00:04:44,080
privileged access to the system

00:04:40,320 --> 00:04:46,960
um because we can start database

00:04:44,080 --> 00:04:48,560
servers without privileged access we can

00:04:46,960 --> 00:04:49,919
start web service without privileged

00:04:48,560 --> 00:04:51,840
access we can

00:04:49,919 --> 00:04:52,960
most of tools they run without

00:04:51,840 --> 00:04:55,680
privileged access

00:04:52,960 --> 00:04:56,160
and it simplifies troubleshooting so

00:04:55,680 --> 00:05:00,800
much

00:04:56,160 --> 00:05:04,720
when all the services involved in

00:05:00,800 --> 00:05:06,000
in this scenario they run under single

00:05:04,720 --> 00:05:08,240
user

00:05:06,000 --> 00:05:09,039
uh it doesn't cover all the scenarios

00:05:08,240 --> 00:05:12,800
but

00:05:09,039 --> 00:05:16,560
at least it is possible to test

00:05:12,800 --> 00:05:19,840
99 of use cases with in single

00:05:16,560 --> 00:05:22,400
user uh environment and

00:05:19,840 --> 00:05:24,800
it helps so much that we don't care

00:05:22,400 --> 00:05:27,520
about permissions in this cross-product

00:05:24,800 --> 00:05:29,360
communications and again the goal here

00:05:27,520 --> 00:05:30,320
is to show that at least in some

00:05:29,360 --> 00:05:33,360
scenario

00:05:30,320 --> 00:05:35,360
uh products can communicate properly and

00:05:33,360 --> 00:05:38,800
again if it covers 99 of

00:05:35,360 --> 00:05:42,000
all test cases then it's good

00:05:38,800 --> 00:05:44,960
it's a good framework

00:05:42,000 --> 00:05:45,919
so the the script test centers they may

00:05:44,960 --> 00:05:49,039
be flat

00:05:45,919 --> 00:05:53,759
show comments um they should not

00:05:49,039 --> 00:05:55,440
bring extra complex dependencies because

00:05:53,759 --> 00:05:57,759
we should not spend time on

00:05:55,440 --> 00:06:00,000
troubleshooting dependencies that

00:05:57,759 --> 00:06:01,440
are required for testing framework

00:06:00,000 --> 00:06:05,039
because it's not the time we

00:06:01,440 --> 00:06:08,479
want to spend too and again the

00:06:05,039 --> 00:06:09,600
topology can be input parameter to this

00:06:08,479 --> 00:06:12,720
scenario so

00:06:09,600 --> 00:06:14,880
we can run the same test scenario or

00:06:12,720 --> 00:06:16,880
maybe on different version pro

00:06:14,880 --> 00:06:18,720
database server or maybe database server

00:06:16,880 --> 00:06:20,240
is built from source and some batches

00:06:18,720 --> 00:06:23,440
are applied and we

00:06:20,240 --> 00:06:24,639
we want to make sure that a new test

00:06:23,440 --> 00:06:27,680
scenario that

00:06:24,639 --> 00:06:29,680
uh that it works well

00:06:27,680 --> 00:06:32,639
on different topologies for the problem

00:06:29,680 --> 00:06:36,000
is fixed in one topology or

00:06:32,639 --> 00:06:39,360
the problem is introduced or

00:06:36,000 --> 00:06:39,360
speed is better whatever

00:06:40,400 --> 00:06:47,120
and this dream framework it will

00:06:43,919 --> 00:06:50,319
bring new level of communication if we

00:06:47,120 --> 00:06:53,280
can find a way to satisfy all these

00:06:50,319 --> 00:06:56,880
requirements for dream test

00:06:53,280 --> 00:06:58,960
framework um then it will be

00:06:56,880 --> 00:07:00,960
very easy to describe again complex

00:06:58,960 --> 00:07:03,440
scenario reports and tutorials

00:07:00,960 --> 00:07:06,080
maybe an automated tasting maybe some

00:07:03,440 --> 00:07:10,720
proof of concept

00:07:06,080 --> 00:07:10,720
and improve cross team communication

00:07:10,880 --> 00:07:16,080
and to be able to handle

00:07:14,400 --> 00:07:18,000
different versions of the same product

00:07:16,080 --> 00:07:18,720
or maybe different distribution type or

00:07:18,000 --> 00:07:20,720
maybe

00:07:18,720 --> 00:07:23,039
there are some quarks we need to

00:07:20,720 --> 00:07:25,759
introduce a new abstraction layer

00:07:23,039 --> 00:07:26,800
um that will hide all details specific

00:07:25,759 --> 00:07:30,800
to

00:07:26,800 --> 00:07:33,919
these different versions

00:07:30,800 --> 00:07:37,120
um so mid

00:07:33,919 --> 00:07:40,000
environments environs is special folder

00:07:37,120 --> 00:07:41,360
with some script generated executable

00:07:40,000 --> 00:07:44,240
scripts

00:07:41,360 --> 00:07:45,680
generated inside this command so in this

00:07:44,240 --> 00:07:48,720
example we have

00:07:45,680 --> 00:07:50,479
environment called mydb and it has start

00:07:48,720 --> 00:07:53,360
script and if we use

00:07:50,479 --> 00:07:54,160
such folder in our script uh we

00:07:53,360 --> 00:07:57,520
basically don't

00:07:54,160 --> 00:07:59,759
care what's inside that start command

00:07:57,520 --> 00:08:01,840
we can look of course into it if we need

00:07:59,759 --> 00:08:05,199
all the details but if we write

00:08:01,840 --> 00:08:06,479
right um script scenario it's just my db

00:08:05,199 --> 00:08:09,440
start and we know that

00:08:06,479 --> 00:08:10,840
there is we started some database server

00:08:09,440 --> 00:08:13,680
and how we started it

00:08:10,840 --> 00:08:14,479
and what exactly database server is

00:08:13,680 --> 00:08:16,879
there

00:08:14,479 --> 00:08:18,080
it's not that important it's input

00:08:16,879 --> 00:08:21,360
parameters so

00:08:18,080 --> 00:08:23,599
in every next round can be different and

00:08:21,360 --> 00:08:26,639
we can all be cares about to compare

00:08:23,599 --> 00:08:30,479
behavior of products of different

00:08:26,639 --> 00:08:32,959
versions or maybe different vendors

00:08:30,479 --> 00:08:34,159
so again there's command starts there

00:08:32,959 --> 00:08:37,279
start stop

00:08:34,159 --> 00:08:39,200
status also we can execute sql command

00:08:37,279 --> 00:08:42,560
and that

00:08:39,200 --> 00:08:44,640
database then we can compare output

00:08:42,560 --> 00:08:45,760
and the same we can do not for database

00:08:44,640 --> 00:08:48,160
here we can do it for

00:08:45,760 --> 00:08:50,399
web server and again it can be apache

00:08:48,160 --> 00:08:51,279
web server maybe it's some nginx or some

00:08:50,399 --> 00:08:53,120
different

00:08:51,279 --> 00:08:54,959
all we care if we have wrappers

00:08:53,120 --> 00:08:55,760
generated for it we can start that

00:08:54,959 --> 00:09:00,800
server we can

00:08:55,760 --> 00:09:00,800
check status we can query some

00:09:00,959 --> 00:09:04,720
resource inside that web server using

00:09:03,440 --> 00:09:08,720
cool command

00:09:04,720 --> 00:09:11,519
and then we can stop uh

00:09:08,720 --> 00:09:13,279
so the idea is to have these folders

00:09:11,519 --> 00:09:16,000
with script generated for

00:09:13,279 --> 00:09:17,519
each topology that is defined as in

00:09:16,000 --> 00:09:20,480
parameter

00:09:17,519 --> 00:09:22,080
and moreover it is not one only one

00:09:20,480 --> 00:09:25,760
instance that we can use there's some

00:09:22,080 --> 00:09:26,560
several slots that we can use so we can

00:09:25,760 --> 00:09:28,640
generate

00:09:26,560 --> 00:09:30,160
three database servers they can be of

00:09:28,640 --> 00:09:31,360
the same topology i mean the same

00:09:30,160 --> 00:09:33,120
version the same

00:09:31,360 --> 00:09:34,560
distribution that would be maybe

00:09:33,120 --> 00:09:36,800
completely different

00:09:34,560 --> 00:09:38,480
and again we can run this scenario and

00:09:36,800 --> 00:09:41,120
see outcome if it changes

00:09:38,480 --> 00:09:43,200
or not maybe we will use them in some

00:09:41,120 --> 00:09:43,440
load balancer or maybe combining cluster

00:09:43,200 --> 00:09:45,440
or

00:09:43,440 --> 00:09:46,800
maybe try replication and see if it

00:09:45,440 --> 00:09:48,959
works for

00:09:46,800 --> 00:09:50,880
particular input topology for example

00:09:48,959 --> 00:09:52,560
replication between different versions

00:09:50,880 --> 00:09:54,800
or chain replication between

00:09:52,560 --> 00:09:57,120
three versions or application between

00:09:54,800 --> 00:10:00,160
servers of different vendors

00:09:57,120 --> 00:10:02,800
we have one script that covers them all

00:10:00,160 --> 00:10:04,160
and topology is input parameter to to

00:10:02,800 --> 00:10:05,839
this scenario

00:10:04,160 --> 00:10:07,279
and the same as web server we can start

00:10:05,839 --> 00:10:10,240
several web servers and

00:10:07,279 --> 00:10:13,360
use them independently or together maybe

00:10:10,240 --> 00:10:13,360
some load balancer

00:10:14,480 --> 00:10:17,680
etc and again

00:10:16,380 --> 00:10:20,880
[Music]

00:10:17,680 --> 00:10:24,320
one of aspects that we

00:10:20,880 --> 00:10:25,360
use for this environment is distribution

00:10:24,320 --> 00:10:28,240
type so

00:10:25,360 --> 00:10:29,440
either we use default packages that are

00:10:28,240 --> 00:10:33,220
installed on system like

00:10:29,440 --> 00:10:34,560
the first command or maybe we can

00:10:33,220 --> 00:10:37,360
[Music]

00:10:34,560 --> 00:10:38,000
generate environment that can work with

00:10:37,360 --> 00:10:41,920
a

00:10:38,000 --> 00:10:46,000
product that is built from source code

00:10:41,920 --> 00:10:49,600
then we specify a location basically to

00:10:46,000 --> 00:10:50,399
source location location of source of

00:10:49,600 --> 00:10:52,480
this product

00:10:50,399 --> 00:10:54,720
and this environment will be able to

00:10:52,480 --> 00:10:55,760
basically build this product and prepare

00:10:54,720 --> 00:10:57,680
it for using

00:10:55,760 --> 00:10:59,279
or maybe we can use some target

00:10:57,680 --> 00:11:03,200
distribution

00:10:59,279 --> 00:11:05,040
and want to compare to it

00:11:03,200 --> 00:11:06,720
want to compare behavior between version

00:11:05,040 --> 00:11:10,000
or maybe with source code

00:11:06,720 --> 00:11:10,000
that we applied patches

00:11:12,079 --> 00:11:16,160
so and each environment it will cover

00:11:14,880 --> 00:11:19,440
specifics

00:11:16,160 --> 00:11:21,120
that needed to handle this particular

00:11:19,440 --> 00:11:22,880
distribution type in this particular

00:11:21,120 --> 00:11:25,680
version

00:11:22,880 --> 00:11:26,560
so environments not most like framework

00:11:25,680 --> 00:11:29,519
that we

00:11:26,560 --> 00:11:30,560
can use for any product it's more an

00:11:29,519 --> 00:11:33,440
approach

00:11:30,560 --> 00:11:33,920
for using so if you have one product

00:11:33,440 --> 00:11:35,279
that has

00:11:33,920 --> 00:11:38,959
all the environments and second product

00:11:35,279 --> 00:11:42,240
that has only environment we can

00:11:38,959 --> 00:11:44,880
either yeah build script that

00:11:42,240 --> 00:11:45,440
shows interaction between these products

00:11:44,880 --> 00:11:49,839
and then

00:11:45,440 --> 00:11:56,959
put input parameters version or maybe

00:11:49,839 --> 00:11:59,839
build it from source code etc and then

00:11:56,959 --> 00:12:02,880
so this example is kind of useless but

00:11:59,839 --> 00:12:06,000
again it demonstrates i think powerful

00:12:02,880 --> 00:12:07,200
how powerful this approach is so let's

00:12:06,000 --> 00:12:11,040
start

00:12:07,200 --> 00:12:13,440
uh randomly either apache or nginx web

00:12:11,040 --> 00:12:13,440
server

00:12:14,320 --> 00:12:18,480
we generate this is bash script so we

00:12:17,120 --> 00:12:22,639
generate the number

00:12:18,480 --> 00:12:25,839
between 10 and 5 and between 1 and

00:12:22,639 --> 00:12:27,600
0 and 10 and then randomly either create

00:12:25,839 --> 00:12:28,800
a patch environment this is special code

00:12:27,600 --> 00:12:31,600
that is used

00:12:28,800 --> 00:12:33,040
in this this repository for nginx

00:12:31,600 --> 00:12:34,320
environment and then we start that

00:12:33,040 --> 00:12:37,600
environment here we don't know

00:12:34,320 --> 00:12:40,560
maybe a patch on it maybe nginx then we

00:12:37,600 --> 00:12:41,440
create some file in special folder that

00:12:40,560 --> 00:12:44,000
is

00:12:41,440 --> 00:12:46,079
predefined in this environs and then we

00:12:44,000 --> 00:12:48,079
query this file and basically yeah we

00:12:46,079 --> 00:12:49,200
did this testing i can check that when

00:12:48,079 --> 00:12:52,800
we query we get

00:12:49,200 --> 00:12:54,720
string my test and we can do an infinite

00:12:52,800 --> 00:12:56,000
loop if we want or we can complicate

00:12:54,720 --> 00:12:58,560
this scenario

00:12:56,000 --> 00:13:00,079
uh as much as we want and without

00:12:58,560 --> 00:13:01,440
environments i believe that either the

00:13:00,079 --> 00:13:04,959
script would be

00:13:01,440 --> 00:13:06,959
much more complex or

00:13:04,959 --> 00:13:08,399
it will introduce some abstractions that

00:13:06,959 --> 00:13:12,240
again it's hard to maintain

00:13:08,399 --> 00:13:15,680
and hard to keep in mind all the details

00:13:12,240 --> 00:13:18,079
that are going on and

00:13:15,680 --> 00:13:19,040
one important aspect that they can use

00:13:18,079 --> 00:13:21,440
the same

00:13:19,040 --> 00:13:23,200
commands in script and we can use them

00:13:21,440 --> 00:13:25,279
from terminal when we

00:13:23,200 --> 00:13:26,399
like do some scenario manually when we

00:13:25,279 --> 00:13:29,120
start some services

00:13:26,399 --> 00:13:30,399
or try some comments we execute the same

00:13:29,120 --> 00:13:32,720
comments in

00:13:30,399 --> 00:13:34,320
command line and we use that completion

00:13:32,720 --> 00:13:36,880
to see these comments

00:13:34,320 --> 00:13:38,399
another real life example is open k it's

00:13:36,880 --> 00:13:41,279
very hard to

00:13:38,399 --> 00:13:42,959
get open key started and with environs

00:13:41,279 --> 00:13:44,880
it is like few comments

00:13:42,959 --> 00:13:46,399
again it realized that all dependencies

00:13:44,880 --> 00:13:48,399
are satisfied but again

00:13:46,399 --> 00:13:50,240
once you make sure that dependencies are

00:13:48,399 --> 00:13:50,880
satisfied and you see that this script

00:13:50,240 --> 00:13:54,000
doesn't work

00:13:50,880 --> 00:13:57,839
you have something to ask okay get these

00:13:54,000 --> 00:13:59,440
um comments and for another person that

00:13:57,839 --> 00:14:00,639
tries to help for example it's more

00:13:59,440 --> 00:14:03,040
clear what's going on

00:14:00,639 --> 00:14:04,240
and then they'll ask specific logs that

00:14:03,040 --> 00:14:06,000
they no longer use it in this

00:14:04,240 --> 00:14:08,639
environment

00:14:06,000 --> 00:14:10,000
another example is mirror cache this is

00:14:08,639 --> 00:14:13,120
quite complex scenario it

00:14:10,000 --> 00:14:14,959
starts for apache instances and one

00:14:13,120 --> 00:14:17,760
mirror cache instance mirror cache is

00:14:14,959 --> 00:14:21,040
mirror redirector so it accepts

00:14:17,760 --> 00:14:24,320
requests and tries to redirect it based

00:14:21,040 --> 00:14:28,399
on location from request gaming

00:14:24,320 --> 00:14:30,160
it uses some basically yeah

00:14:28,399 --> 00:14:32,320
here it retreats that specific address

00:14:30,160 --> 00:14:35,519
redirected to a specific

00:14:32,320 --> 00:14:37,839
apache server according to how

00:14:35,519 --> 00:14:40,480
mirrors were defined in your cache

00:14:37,839 --> 00:14:40,480
database

00:14:41,040 --> 00:14:47,120
so this concludes my presentation my

00:14:43,680 --> 00:14:58,560
experience i hope you find it useful

00:14:47,120 --> 00:14:58,560

YouTube URL: https://www.youtube.com/watch?v=WFqm_X5x1U0


