Title: Regular Releases are Wrong, Roll for your life
Publication date: 2020-10-16
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,240 --> 00:00:03,760
in theory rolling yes rolling rolling

00:00:02,080 --> 00:00:05,359
rolling that is what i am here to talk

00:00:03,760 --> 00:00:08,400
about today

00:00:05,359 --> 00:00:10,320
um yes my name is richard brown

00:00:08,400 --> 00:00:11,440
um in fact i have an entire slide about

00:00:10,320 --> 00:00:13,440
who i am

00:00:11,440 --> 00:00:14,719
but i hope most of you know who i am

00:00:13,440 --> 00:00:16,880
these days you know i've been in

00:00:14,719 --> 00:00:18,720
opensuse since it began

00:00:16,880 --> 00:00:20,080
i'm a real passionate advocate for

00:00:18,720 --> 00:00:21,840
rolling releases

00:00:20,080 --> 00:00:23,920
i build two of them in the future

00:00:21,840 --> 00:00:25,760
technology team at souza

00:00:23,920 --> 00:00:27,599
and i'm here to talk to you really today

00:00:25,760 --> 00:00:30,160
about

00:00:27,599 --> 00:00:32,000
well my opinions on this topic this is a

00:00:30,160 --> 00:00:33,520
very opinionated presentation i don't

00:00:32,000 --> 00:00:36,079
normally put disclaimers in front of

00:00:33,520 --> 00:00:37,840
my in my talks i hold really strong

00:00:36,079 --> 00:00:39,360
opinions on this topic i might offend

00:00:37,840 --> 00:00:42,079
some of you i apologize

00:00:39,360 --> 00:00:44,160
these are my views not the views of my

00:00:42,079 --> 00:00:46,239
employer or like any project or group

00:00:44,160 --> 00:00:47,760
i've ever been affiliated with

00:00:46,239 --> 00:00:49,680
and it's perfectly fine if you disagree

00:00:47,760 --> 00:00:51,199
with me you know even if i'm

00:00:49,680 --> 00:00:52,960
rather forthright with my views in this

00:00:51,199 --> 00:00:54,559
session um

00:00:52,960 --> 00:00:56,239
yeah and you know we can talk about that

00:00:54,559 --> 00:00:58,160
afterwards i i

00:00:56,239 --> 00:00:59,520
we've got the break at the end which is

00:00:58,160 --> 00:01:00,559
great because i've got an awful lot of

00:00:59,520 --> 00:01:02,000
slides here so i'm

00:01:00,559 --> 00:01:03,120
hopefully not going to eat too much into

00:01:02,000 --> 00:01:05,439
the breaks and then we can keep on

00:01:03,120 --> 00:01:10,240
talking afterwards anyway

00:01:05,439 --> 00:01:12,720
um at at to start at the very beginning

00:01:10,240 --> 00:01:14,640
uh one of the the things i've

00:01:12,720 --> 00:01:18,080
increasingly realized

00:01:14,640 --> 00:01:20,240
is upstream projects change quickly

00:01:18,080 --> 00:01:21,600
you know even conservative upstream

00:01:20,240 --> 00:01:24,799
projects

00:01:21,600 --> 00:01:25,600
change very quickly you know the kernel

00:01:24,799 --> 00:01:27,600
every three months

00:01:25,600 --> 00:01:28,960
kubernetes every three months salt stack

00:01:27,600 --> 00:01:32,880
every six months you know

00:01:28,960 --> 00:01:34,560
nothing is ever staying still and

00:01:32,880 --> 00:01:36,000
you know our develop the developers

00:01:34,560 --> 00:01:39,600
we're working with upstream

00:01:36,000 --> 00:01:41,520
aren't staying still and our users

00:01:39,600 --> 00:01:43,280
don't want to stay still either because

00:01:41,520 --> 00:01:46,399
they see this shiny new stuff upstream

00:01:43,280 --> 00:01:46,399
and they want it to

00:01:47,119 --> 00:01:50,640
it gets even worse when you then think

00:01:48,560 --> 00:01:52,560
of actually like what do upstream like

00:01:50,640 --> 00:01:54,799
actually support you know the the

00:01:52,560 --> 00:01:57,040
standard upstream kernel the stable

00:01:54,799 --> 00:01:59,600
release you know is unlucky if it lasts

00:01:57,040 --> 00:02:01,759
four months yeah because it's basically

00:01:59,600 --> 00:02:04,479
where the next one comes out

00:02:01,759 --> 00:02:06,000
even the lts release you know is only

00:02:04,479 --> 00:02:08,560
six or seven years which

00:02:06,000 --> 00:02:10,160
is why like greg krugman says these days

00:02:08,560 --> 00:02:11,680
even though he's a maintainer of the lts

00:02:10,160 --> 00:02:14,959
release like

00:02:11,680 --> 00:02:16,640
you know use the distro one first

00:02:14,959 --> 00:02:18,480
because if you want something longer

00:02:16,640 --> 00:02:19,920
supported

00:02:18,480 --> 00:02:22,720
that's going to be done better than even

00:02:19,920 --> 00:02:23,200
all of upstream can do kubernetes you

00:02:22,720 --> 00:02:25,440
know the

00:02:23,200 --> 00:02:26,239
incredibly popular just uh you know new

00:02:25,440 --> 00:02:28,239
service you know

00:02:26,239 --> 00:02:29,360
it can just about handle a year of

00:02:28,239 --> 00:02:31,440
updates like

00:02:29,360 --> 00:02:33,280
you know it was a year of support after

00:02:31,440 --> 00:02:34,640
a release you know and that's only in

00:02:33,280 --> 00:02:36,560
the latest release i only put in

00:02:34,640 --> 00:02:39,120
tumbleweed a couple of weeks ago

00:02:36,560 --> 00:02:41,200
before that it was nine months um and

00:02:39,120 --> 00:02:42,640
yeah salt stack yes it's one and a half

00:02:41,200 --> 00:02:44,000
years which is kind of the longest i

00:02:42,640 --> 00:02:46,640
could really find like

00:02:44,000 --> 00:02:47,760
generally like some things will support

00:02:46,640 --> 00:02:49,040
themselves for like two or three

00:02:47,760 --> 00:02:50,640
versions so when they're being released

00:02:49,040 --> 00:02:52,400
every six months one and a half years

00:02:50,640 --> 00:02:53,760
kind of comes around

00:02:52,400 --> 00:02:55,760
but even in the case of salt snack you

00:02:53,760 --> 00:02:57,840
know they're frozen after six months

00:02:55,760 --> 00:02:59,440
and like seth is like the longest

00:02:57,840 --> 00:03:01,200
upstream support thing i could really

00:02:59,440 --> 00:03:03,360
find that you know we're using heavily

00:03:01,200 --> 00:03:05,280
in in any of the sort of sousa ecosystem

00:03:03,360 --> 00:03:08,480
and you know that's two years which

00:03:05,280 --> 00:03:10,959
is still way shorter than even the

00:03:08,480 --> 00:03:14,080
shortest open source release

00:03:10,959 --> 00:03:16,159
besides the rolling ones of course

00:03:14,080 --> 00:03:18,239
as a project as well we have a whole

00:03:16,159 --> 00:03:20,480
bunch more upstreams too so not only are

00:03:18,239 --> 00:03:22,879
all these upstreams moving quickly

00:03:20,480 --> 00:03:24,959
and quicker you know we we aren't just

00:03:22,879 --> 00:03:27,200
doing one regular release these days

00:03:24,959 --> 00:03:29,120
we're doing leap and jump hopefully

00:03:27,200 --> 00:03:31,120
it'll just be one of them soon

00:03:29,120 --> 00:03:32,319
we're doing tumbleweed we're doing uni

00:03:31,120 --> 00:03:34,319
we're doing microarrests we're doing

00:03:32,319 --> 00:03:35,599
cubic we're doing like 20 30 other

00:03:34,319 --> 00:03:37,120
things i didn't bother mentioning on

00:03:35,599 --> 00:03:39,280
this slide

00:03:37,120 --> 00:03:41,280
because you know all of these projects

00:03:39,280 --> 00:03:42,400
in open sousa have a whole bunch of

00:03:41,280 --> 00:03:44,959
upstreams

00:03:42,400 --> 00:03:46,000
that they're working with themselves too

00:03:44,959 --> 00:03:47,920
and if you look at like

00:03:46,000 --> 00:03:51,120
cubic as an example you know the whole

00:03:47,920 --> 00:03:52,959
kind of cloud native container ecosystem

00:03:51,120 --> 00:03:54,879
the cloud native computing foundation is

00:03:52,959 --> 00:03:55,120
kind enough to put all of that together

00:03:54,879 --> 00:03:57,439
in

00:03:55,120 --> 00:03:59,040
in one fancy graph and oh my god it's

00:03:57,439 --> 00:04:02,400
horrific

00:03:59,040 --> 00:04:03,200
you know this is these are the projects

00:04:02,400 --> 00:04:05,360
which

00:04:03,200 --> 00:04:07,920
as as the cubic maintainer i have to

00:04:05,360 --> 00:04:11,200
worry about you know integrating with

00:04:07,920 --> 00:04:12,319
co-working with and every box on that

00:04:11,200 --> 00:04:14,799
graph that isn't

00:04:12,319 --> 00:04:16,160
bright white is well every box in the

00:04:14,799 --> 00:04:17,840
graph that is gray

00:04:16,160 --> 00:04:19,519
is a closed source project too so it's

00:04:17,840 --> 00:04:20,320
not something that is like just trivial

00:04:19,519 --> 00:04:22,240
for me to

00:04:20,320 --> 00:04:23,919
you know throw into obs and build it

00:04:22,240 --> 00:04:27,520
myself and test it myself you know

00:04:23,919 --> 00:04:30,720
become interoperability is

00:04:27,520 --> 00:04:32,240
you know a case of of not just working

00:04:30,720 --> 00:04:35,360
oh a minute i've just lost the slides

00:04:32,240 --> 00:04:35,360
can everybody else still see them

00:04:36,479 --> 00:04:39,120
yeah oh

00:04:39,919 --> 00:04:42,639
yeah fine for some reason the slides

00:04:41,440 --> 00:04:44,479
have disappeared for me but as long as

00:04:42,639 --> 00:04:48,240
everyone else can see them cool

00:04:44,479 --> 00:04:49,520
um then yeah you know it's it's crazy

00:04:48,240 --> 00:04:51,360
it's complicated and

00:04:49,520 --> 00:04:53,280
yeah in order to into operate with this

00:04:51,360 --> 00:04:53,759
you know we have to move to keep working

00:04:53,280 --> 00:04:55,199
with it

00:04:53,759 --> 00:04:56,479
especially when like the closed source

00:04:55,199 --> 00:04:58,560
stuff you know we have no way of

00:04:56,479 --> 00:05:00,560
influencing it you know it's an upstream

00:04:58,560 --> 00:05:01,840
which we have to work with but we can't

00:05:00,560 --> 00:05:03,919
see their code we can't send full

00:05:01,840 --> 00:05:05,759
requests we can't backport anything

00:05:03,919 --> 00:05:07,199
and you know we're just sort of slaves

00:05:05,759 --> 00:05:09,120
to them moving

00:05:07,199 --> 00:05:10,800
and this is the world we live in equal

00:05:09,120 --> 00:05:13,199
more more you know

00:05:10,800 --> 00:05:14,720
things have to work even outside of our

00:05:13,199 --> 00:05:16,080
open source bubble i mean you're seeing

00:05:14,720 --> 00:05:17,280
this on the factory mailing list right

00:05:16,080 --> 00:05:20,960
now with discussions with

00:05:17,280 --> 00:05:23,680
nvidia um yeah

00:05:20,960 --> 00:05:24,160
and yeah even the projects we've had for

00:05:23,680 --> 00:05:25,600
a while

00:05:24,160 --> 00:05:27,280
you know they're getting bigger and

00:05:25,600 --> 00:05:29,360
bigger and bigger you know the kernel is

00:05:27,280 --> 00:05:31,520
not shrinking anytime soon

00:05:29,360 --> 00:05:33,120
and you know as this article pointed out

00:05:31,520 --> 00:05:34,880
you know the kernel isn't getting any

00:05:33,120 --> 00:05:35,680
smaller but the number of contributors

00:05:34,880 --> 00:05:39,360
we have to it

00:05:35,680 --> 00:05:39,919
are starts worrying me you know do we

00:05:39,360 --> 00:05:42,240
have enough

00:05:39,919 --> 00:05:43,360
are we are we are we sustainable are we

00:05:42,240 --> 00:05:45,120
really

00:05:43,360 --> 00:05:46,479
doing things the way we are right now is

00:05:45,120 --> 00:05:48,479
this really going to last us for the

00:05:46,479 --> 00:05:49,759
next 10 15 years

00:05:48,479 --> 00:05:51,680
especially when you look also at the

00:05:49,759 --> 00:05:53,520
other projects like again kubernetes you

00:05:51,680 --> 00:05:54,240
know that's growing both in terms of

00:05:53,520 --> 00:05:57,680
files and

00:05:54,240 --> 00:06:00,000
lines of code and yeah

00:05:57,680 --> 00:06:01,600
at their heart i know regular releases

00:06:00,000 --> 00:06:03,199
mean well so you know please don't get

00:06:01,600 --> 00:06:04,560
too offended about all the nasty stuff

00:06:03,199 --> 00:06:06,720
i'm about to say

00:06:04,560 --> 00:06:08,319
you know because you know at the heart

00:06:06,720 --> 00:06:08,880
we all try to solve the same problem you

00:06:08,319 --> 00:06:10,880
know you've got

00:06:08,880 --> 00:06:12,479
thousands of moving parts from thousands

00:06:10,880 --> 00:06:13,199
of different upstreams and at the end of

00:06:12,479 --> 00:06:17,360
the day

00:06:13,199 --> 00:06:18,960
as a distribution developer we want to

00:06:17,360 --> 00:06:20,479
find some way of putting this in the

00:06:18,960 --> 00:06:22,000
hands of people

00:06:20,479 --> 00:06:24,000
so in a way they can actually use the

00:06:22,000 --> 00:06:26,560
damn thing um

00:06:24,000 --> 00:06:27,680
and you know everybody is nervous of

00:06:26,560 --> 00:06:28,639
change developers

00:06:27,680 --> 00:06:30,560
you know the people building the

00:06:28,639 --> 00:06:32,000
distribution as developers we're nervous

00:06:30,560 --> 00:06:34,160
about changing it

00:06:32,000 --> 00:06:36,000
and users don't want to you know have

00:06:34,160 --> 00:06:36,880
their systems break have their systems

00:06:36,000 --> 00:06:38,639
change

00:06:36,880 --> 00:06:40,400
and you know you can't break anything if

00:06:38,639 --> 00:06:45,199
you don't change it

00:06:40,400 --> 00:06:45,199
um which is yeah weird but true

00:06:45,360 --> 00:06:49,840
oh wonderful

00:06:55,759 --> 00:07:00,800
yeah so change is dangerous you can't

00:06:57,440 --> 00:07:02,639
break anything if you don't change it

00:07:00,800 --> 00:07:04,080
but even regular releases need a heck of

00:07:02,639 --> 00:07:06,880
a lot of change

00:07:04,080 --> 00:07:07,840
and so you know most of these regular

00:07:06,880 --> 00:07:09,759
distributions

00:07:07,840 --> 00:07:11,280
you know we've we've all kind of asked

00:07:09,759 --> 00:07:12,639
ourselves what's the best way of

00:07:11,280 --> 00:07:14,160
avoiding that and you know

00:07:12,639 --> 00:07:15,520
we'll just make the smallest amount of

00:07:14,160 --> 00:07:16,080
changes as possible because you know

00:07:15,520 --> 00:07:20,000
minimum

00:07:16,080 --> 00:07:22,639
changes are safer right well

00:07:20,000 --> 00:07:23,039
no because what we end up doing is you

00:07:22,639 --> 00:07:24,960
know

00:07:23,039 --> 00:07:27,120
taking some of that stuff from from

00:07:24,960 --> 00:07:28,639
upstream and you know at a certain point

00:07:27,120 --> 00:07:30,720
and then we freeze it

00:07:28,639 --> 00:07:33,120
um and at the point when it was released

00:07:30,720 --> 00:07:35,199
it was you know designed and tested by

00:07:33,120 --> 00:07:37,039
upstream with with the whole ecosystem

00:07:35,199 --> 00:07:38,319
of dependencies that it needed at that

00:07:37,039 --> 00:07:40,240
time

00:07:38,319 --> 00:07:41,440
and then we freeze that one thing and

00:07:40,240 --> 00:07:42,560
then we decided okay we're not going to

00:07:41,440 --> 00:07:44,479
touch this for

00:07:42,560 --> 00:07:46,479
four or five years or six or seven or

00:07:44,479 --> 00:07:48,400
fifteen if it's slee

00:07:46,479 --> 00:07:50,080
um but then other stuff still needs to

00:07:48,400 --> 00:07:51,120
change you know security updates still

00:07:50,080 --> 00:07:54,000
need to happen

00:07:51,120 --> 00:07:56,240
and then but we don't want to change

00:07:54,000 --> 00:07:58,240
make a too big a change to that package

00:07:56,240 --> 00:07:59,360
so we backboard and we just make minor

00:07:58,240 --> 00:08:01,599
little backboards

00:07:59,360 --> 00:08:03,360
on top of that one thing but that minor

00:08:01,599 --> 00:08:05,440
backboard you know wasn't tested with

00:08:03,360 --> 00:08:08,160
that entire ecosystem of other stuff

00:08:05,440 --> 00:08:09,680
that made the distribution up so we end

00:08:08,160 --> 00:08:11,680
up creating sort of this this lovely

00:08:09,680 --> 00:08:13,120
sort of frankenstein's monster of a

00:08:11,680 --> 00:08:16,800
distribution

00:08:13,120 --> 00:08:19,599
where we have to be certain ourselves

00:08:16,800 --> 00:08:21,520
that everything we have put together

00:08:19,599 --> 00:08:23,360
is built properly is working properly

00:08:21,520 --> 00:08:25,599
and you know it was never designed to be

00:08:23,360 --> 00:08:27,280
done in that way you know it's not safer

00:08:25,599 --> 00:08:28,720
in in the period because it's not really

00:08:27,280 --> 00:08:30,319
engineered to be

00:08:28,720 --> 00:08:32,159
done that way we're just kind of hacking

00:08:30,319 --> 00:08:35,599
around the fact that

00:08:32,159 --> 00:08:37,279
we've decided to go slower and so

00:08:35,599 --> 00:08:38,719
you know inherently regular

00:08:37,279 --> 00:08:41,120
distributions are

00:08:38,719 --> 00:08:43,360
frankenstein distributions and and that

00:08:41,120 --> 00:08:46,000
that really terrifies me

00:08:43,360 --> 00:08:46,959
um and also fundamentally it doesn't

00:08:46,000 --> 00:08:49,279
even work

00:08:46,959 --> 00:08:50,399
you can see this by looking at sleep 15

00:08:49,279 --> 00:08:51,680
you know which is you know it's an

00:08:50,399 --> 00:08:53,600
enterprise distribution it's one of the

00:08:51,680 --> 00:08:55,360
most conservative distributions you can

00:08:53,600 --> 00:08:57,200
get it's going to be supported for 13

00:08:55,360 --> 00:08:59,120
years since its release

00:08:57,200 --> 00:09:01,680
sleep 15 has been out now for three

00:08:59,120 --> 00:09:06,000
years you know in those three years

00:09:01,680 --> 00:09:07,839
they've changed 13 000 packages

00:09:06,000 --> 00:09:09,680
and and not just like minor little back

00:09:07,839 --> 00:09:10,480
ports either that actually includes like

00:09:09,680 --> 00:09:13,600
over 2

00:09:10,480 --> 00:09:15,120
700 actual package version changes in

00:09:13,600 --> 00:09:16,640
the service packs

00:09:15,120 --> 00:09:18,560
and the entire code base is less than

00:09:16,640 --> 00:09:20,240
three and a half thousand packages so

00:09:18,560 --> 00:09:21,920
i mean those numbers don't think like

00:09:20,240 --> 00:09:22,959
they've replaced the entire code base

00:09:21,920 --> 00:09:24,720
four times like

00:09:22,959 --> 00:09:26,640
a lot of the changes happened in very

00:09:24,720 --> 00:09:29,519
specific areas

00:09:26,640 --> 00:09:31,519
but that's a huge amount of change which

00:09:29,519 --> 00:09:33,519
which just kind of proves that this this

00:09:31,519 --> 00:09:35,760
mentality of you know oh a stable

00:09:33,519 --> 00:09:37,760
distribution can be done

00:09:35,760 --> 00:09:39,279
isn't actually true and therefore what

00:09:37,760 --> 00:09:40,160
we end up doing is actually hacking

00:09:39,279 --> 00:09:41,920
around it and

00:09:40,160 --> 00:09:44,480
pretending to ourselves putting into our

00:09:41,920 --> 00:09:46,320
users that you know we're stable

00:09:44,480 --> 00:09:48,240
when in fact we're just rolling just

00:09:46,320 --> 00:09:49,519
kind of rolling badly and lying to

00:09:48,240 --> 00:09:51,360
ourselves

00:09:49,519 --> 00:09:53,040
um and this isn't including like the 10

00:09:51,360 --> 00:09:54,000
000 packages that are in package up like

00:09:53,040 --> 00:09:57,360
this is just

00:09:54,000 --> 00:09:59,040
the slee pure pure code base so you know

00:09:57,360 --> 00:10:00,720
if you look at something like jump or

00:09:59,040 --> 00:10:02,240
leap you know those numbers are even

00:10:00,720 --> 00:10:05,279
bigger there's even more change that

00:10:02,240 --> 00:10:07,680
needs to happen there

00:10:05,279 --> 00:10:08,800
and i i was looking when i was putting

00:10:07,680 --> 00:10:10,800
together these slides i also wanted to

00:10:08,800 --> 00:10:13,920
kind of think a little bit about the

00:10:10,800 --> 00:10:17,279
the psychology and and the the

00:10:13,920 --> 00:10:18,720
um the appeal beyond our little bubble

00:10:17,279 --> 00:10:20,240
of as developers and as

00:10:18,720 --> 00:10:21,600
open source as open source contributors

00:10:20,240 --> 00:10:22,000
and the bubble we have right now in open

00:10:21,600 --> 00:10:25,120
source

00:10:22,000 --> 00:10:27,360
because you know i think inside souza

00:10:25,120 --> 00:10:29,040
and open souza you know we typically

00:10:27,360 --> 00:10:30,959
you know lean towards the conservative

00:10:29,040 --> 00:10:32,000
side of things um so you know on this

00:10:30,959 --> 00:10:35,120
graph it would be just

00:10:32,000 --> 00:10:38,160
um if this is a kind of model

00:10:35,120 --> 00:10:40,240
of uh market adoption and which kind of

00:10:38,160 --> 00:10:42,560
people adopt new products at what kind

00:10:40,240 --> 00:10:43,760
of pace and when in in a life cycle of a

00:10:42,560 --> 00:10:45,920
product

00:10:43,760 --> 00:10:46,959
and typically speaking you know you know

00:10:45,920 --> 00:10:48,560
we probably

00:10:46,959 --> 00:10:50,320
lean to the second half of that belt

00:10:48,560 --> 00:10:51,600
curve you know we have lots of people

00:10:50,320 --> 00:10:53,920
who are conservative

00:10:51,600 --> 00:10:55,680
and you know happy being part of the

00:10:53,920 --> 00:10:57,040
late majority or the laggards to a

00:10:55,680 --> 00:10:58,640
technology they're not necessarily that

00:10:57,040 --> 00:11:00,240
keen to be first

00:10:58,640 --> 00:11:01,920
and that's fine if you're one of those

00:11:00,240 --> 00:11:04,560
like a but you know

00:11:01,920 --> 00:11:06,240
fundamentally as an open source project

00:11:04,560 --> 00:11:07,440
when you start looking into the sort of

00:11:06,240 --> 00:11:09,760
typical

00:11:07,440 --> 00:11:10,959
traits of those people those aren't the

00:11:09,760 --> 00:11:13,120
people who

00:11:10,959 --> 00:11:14,000
are that enthusiastic about technology

00:11:13,120 --> 00:11:15,839
they are unlikely

00:11:14,000 --> 00:11:17,120
to be heavily engaged with that

00:11:15,839 --> 00:11:18,640
technology they're unlikely to

00:11:17,120 --> 00:11:20,079
contribute back to that technology

00:11:18,640 --> 00:11:21,440
they're also unlikely to have lots of

00:11:20,079 --> 00:11:23,600
spare money to

00:11:21,440 --> 00:11:25,440
invest into that technology or yet to

00:11:23,600 --> 00:11:26,880
contribute back financially

00:11:25,440 --> 00:11:29,440
and so when i think of like what does

00:11:26,880 --> 00:11:31,440
open season need to be you know as

00:11:29,440 --> 00:11:32,959
you know as we keep on going as we keep

00:11:31,440 --> 00:11:34,959
on moving forward

00:11:32,959 --> 00:11:36,000
um you know i realize you know we need

00:11:34,959 --> 00:11:37,760
to start appealing

00:11:36,000 --> 00:11:40,079
more to that left-hand side of that belt

00:11:37,760 --> 00:11:41,920
curve too getting hold of sort of

00:11:40,079 --> 00:11:43,760
far earlier adopters for earlier

00:11:41,920 --> 00:11:45,040
innovators get them dragged into the

00:11:43,760 --> 00:11:47,440
project

00:11:45,040 --> 00:11:48,800
move yeah move them into the project

00:11:47,440 --> 00:11:50,240
encourage them to be part of it

00:11:48,800 --> 00:11:51,200
encourage them to contribute back

00:11:50,240 --> 00:11:53,279
they're going to be more likely to

00:11:51,200 --> 00:11:54,639
contribute back um and you know

00:11:53,279 --> 00:11:56,800
potentially encourage them to

00:11:54,639 --> 00:11:59,600
invest and support and donate all that

00:11:56,800 --> 00:11:59,600
other good stuff too

00:12:00,000 --> 00:12:04,240
and yeah so ultimately you know slow

00:12:02,320 --> 00:12:06,399
regular releases are not a more

00:12:04,240 --> 00:12:07,839
sustainable way of distributing software

00:12:06,399 --> 00:12:08,720
you know every upstream is getting

00:12:07,839 --> 00:12:11,279
bigger

00:12:08,720 --> 00:12:13,360
we're getting more upstreams every time

00:12:11,279 --> 00:12:15,440
we freeze or diverge from that upstream

00:12:13,360 --> 00:12:16,800
that's more work for us and and we're

00:12:15,440 --> 00:12:18,320
not getting that much bigger we're not

00:12:16,800 --> 00:12:20,079
getting a huge pile of contributors

00:12:18,320 --> 00:12:21,839
we're not getting more spare time to

00:12:20,079 --> 00:12:24,079
work on this stuff

00:12:21,839 --> 00:12:26,800
um so you know we're just risking

00:12:24,079 --> 00:12:28,639
burning ourselves out every time we

00:12:26,800 --> 00:12:30,079
do anything in a regular release as

00:12:28,639 --> 00:12:31,519
these regulations get bigger and bigger

00:12:30,079 --> 00:12:34,959
and bigger

00:12:31,519 --> 00:12:37,279
um and ultimately like first principles

00:12:34,959 --> 00:12:38,720
of open source like the whole

00:12:37,279 --> 00:12:40,160
premise of open source is you know we're

00:12:38,720 --> 00:12:41,680
meant to be doing all of this stuff

00:12:40,160 --> 00:12:43,279
bigger as a community you know like

00:12:41,680 --> 00:12:45,519
linus's law states you know given enough

00:12:43,279 --> 00:12:47,200
eyeballs all bugs are shallow

00:12:45,519 --> 00:12:49,120
and yet every single regular release

00:12:47,200 --> 00:12:52,240
like throws almost all of those eyes

00:12:49,120 --> 00:12:54,320
away so you're left with a tiny stub of

00:12:52,240 --> 00:12:56,079
a small subset of contributors who are

00:12:54,320 --> 00:12:57,680
just working on your regular release and

00:12:56,079 --> 00:12:59,440
just working on

00:12:57,680 --> 00:13:01,440
the specific packages in this regular

00:12:59,440 --> 00:13:04,480
release and so

00:13:01,440 --> 00:13:07,519
the whole premise of this open source

00:13:04,480 --> 00:13:09,600
movement is is you know left to

00:13:07,519 --> 00:13:10,720
not actually benefit us you know all

00:13:09,600 --> 00:13:12,079
bugs are suddenly deep

00:13:10,720 --> 00:13:13,680
because we've packaged a different

00:13:12,079 --> 00:13:14,560
version from everybody else and we're

00:13:13,680 --> 00:13:15,519
using it against

00:13:14,560 --> 00:13:18,160
libraries that are different from

00:13:15,519 --> 00:13:18,639
everybody else and therefore we're on

00:13:18,160 --> 00:13:20,480
our own

00:13:18,639 --> 00:13:23,760
when the whole point of this is meant to

00:13:20,480 --> 00:13:23,760
be we're working with others right

00:13:23,920 --> 00:13:26,639
and whenever i talk about this stuff the

00:13:25,519 --> 00:13:28,560
first thing that everyone throws back in

00:13:26,639 --> 00:13:29,839
my face is like okay fine like

00:13:28,560 --> 00:13:31,360
we get you richard we know where you're

00:13:29,839 --> 00:13:32,639
coming so why not like have a

00:13:31,360 --> 00:13:35,279
distribution which is like

00:13:32,639 --> 00:13:36,639
partially slow or partially rolling

00:13:35,279 --> 00:13:38,720
because i want to have something stable

00:13:36,639 --> 00:13:40,480
but i want to have some things moving

00:13:38,720 --> 00:13:41,920
um and i have to point out this this

00:13:40,480 --> 00:13:43,920
example because you know this is where

00:13:41,920 --> 00:13:45,360
tumbleweed started back in 2010 when

00:13:43,920 --> 00:13:47,440
gregor home and started it that's

00:13:45,360 --> 00:13:49,120
exactly what greg was doing

00:13:47,440 --> 00:13:50,480
building a regular base on top of open

00:13:49,120 --> 00:13:51,680
source releases and actually since i

00:13:50,480 --> 00:13:52,079
first talked about this i even heard

00:13:51,680 --> 00:13:54,000
there was

00:13:52,079 --> 00:13:55,760
like even earlier experiments internally

00:13:54,000 --> 00:13:56,959
at souza where they tried it too

00:13:55,760 --> 00:13:58,800
and it always ended up in the same

00:13:56,959 --> 00:14:01,839
result like you know

00:13:58,800 --> 00:14:02,639
whatever you did with that rolling base

00:14:01,839 --> 00:14:04,160
you know whenever

00:14:02,639 --> 00:14:07,600
you'd end up having to overwrite and

00:14:04,160 --> 00:14:08,959
supersede packages from that stable part

00:14:07,600 --> 00:14:10,639
um and then you'd have to have some way

00:14:08,959 --> 00:14:12,320
of like rebasing it or resetting it to

00:14:10,639 --> 00:14:14,000
zero every release

00:14:12,320 --> 00:14:15,920
and the impact on users and the impact

00:14:14,000 --> 00:14:17,440
on engineering was an absolute nightmare

00:14:15,920 --> 00:14:18,800
you know just building it became an

00:14:17,440 --> 00:14:21,040
absolute pain because as

00:14:18,800 --> 00:14:22,240
as the chasm grew between the stable bit

00:14:21,040 --> 00:14:24,160
and the rolling bit

00:14:22,240 --> 00:14:26,079
you constantly had new breakages that no

00:14:24,160 --> 00:14:27,680
one again had tested for like even worse

00:14:26,079 --> 00:14:29,199
than the

00:14:27,680 --> 00:14:30,959
the stable version because you had more

00:14:29,199 --> 00:14:32,399
change because you yeah

00:14:30,959 --> 00:14:34,000
so you know even worse than keeping

00:14:32,399 --> 00:14:35,760
things stable and backwarding everything

00:14:34,000 --> 00:14:38,160
you had sort of that element plus the

00:14:35,760 --> 00:14:40,160
fact you were trying to move faster

00:14:38,160 --> 00:14:42,320
and then when you did try and fix those

00:14:40,160 --> 00:14:44,079
issues by like ad hoc tinkering or

00:14:42,320 --> 00:14:46,000
superseding inside the stable

00:14:44,079 --> 00:14:47,680
base then it stopped the stable base

00:14:46,000 --> 00:14:50,000
being stable

00:14:47,680 --> 00:14:51,279
um and then yeah resetting everything to

00:14:50,000 --> 00:14:52,800
zero

00:14:51,279 --> 00:14:54,399
it was brutally disruptive to users

00:14:52,800 --> 00:14:56,079
because no matter how much we tried we

00:14:54,399 --> 00:14:57,680
always ended up with like

00:14:56,079 --> 00:14:58,880
the regular the rolling base going in

00:14:57,680 --> 00:15:00,240
with the rolling part going in one

00:14:58,880 --> 00:15:01,600
direction the stable base going in

00:15:00,240 --> 00:15:02,800
another and then like everything got

00:15:01,600 --> 00:15:05,279
mashed together

00:15:02,800 --> 00:15:06,480
and yeah users suddenly found they had a

00:15:05,279 --> 00:15:09,839
completely different system for what

00:15:06,480 --> 00:15:09,839
they were expecting every eight months

00:15:10,240 --> 00:15:13,360
parallel to this though we were trying

00:15:11,760 --> 00:15:14,320
to find ways of making tumbleweed more

00:15:13,360 --> 00:15:17,360
stable

00:15:14,320 --> 00:15:19,519
uh sorry factory more stable and

00:15:17,360 --> 00:15:21,839
you know factory in the in the build

00:15:19,519 --> 00:15:24,160
service like we've always built it

00:15:21,839 --> 00:15:25,040
building everything together one code

00:15:24,160 --> 00:15:26,800
base

00:15:25,040 --> 00:15:28,560
rebuilding the entire dependency tree as

00:15:26,800 --> 00:15:31,360
stuff is added

00:15:28,560 --> 00:15:33,360
and with yeah at the time we were then

00:15:31,360 --> 00:15:34,800
also adding open qa and making open qa

00:15:33,360 --> 00:15:35,040
key part of the release system so you

00:15:34,800 --> 00:15:36,959
know

00:15:35,040 --> 00:15:38,959
testing it the way users want to use it

00:15:36,959 --> 00:15:39,680
leveraging open qa ldp and all those

00:15:38,959 --> 00:15:41,440
other stuff and

00:15:39,680 --> 00:15:43,279
only shipping when it's all green or

00:15:41,440 --> 00:15:45,759
green enough

00:15:43,279 --> 00:15:46,880
and then it's just you know well then

00:15:45,759 --> 00:15:49,199
you know that

00:15:46,880 --> 00:15:51,519
process has worked we've proven it to be

00:15:49,199 --> 00:15:52,639
a very sustainable and reliable way of

00:15:51,519 --> 00:15:54,720
doing things you know

00:15:52,639 --> 00:15:56,160
tumbleweed this tumbleweed is now six

00:15:54,720 --> 00:15:58,079
years old

00:15:56,160 --> 00:15:59,759
it's still sustainable it still works

00:15:58,079 --> 00:16:02,000
for its target audience

00:15:59,759 --> 00:16:03,519
more about that later the other thing

00:16:02,000 --> 00:16:04,880
that people throw at me whenever i talk

00:16:03,519 --> 00:16:06,240
about this stuff is okay fine

00:16:04,880 --> 00:16:08,160
you know you could have a rolling bay

00:16:06,240 --> 00:16:09,600
system and then just you know containers

00:16:08,160 --> 00:16:10,800
will fix everything anyway richard so

00:16:09,600 --> 00:16:13,120
why are you even worrying about this

00:16:10,800 --> 00:16:15,680
operating system stuff anymore

00:16:13,120 --> 00:16:16,480
um and so yeah starting with with app

00:16:15,680 --> 00:16:18,399
image

00:16:16,480 --> 00:16:19,759
which you know is kind of a fun example

00:16:18,399 --> 00:16:21,040
because the desktop example so you

00:16:19,759 --> 00:16:22,560
always get like graphics and you know

00:16:21,040 --> 00:16:24,399
people are more likely in this group to

00:16:22,560 --> 00:16:26,320
be hands-on with it

00:16:24,399 --> 00:16:27,519
and you know it promises to be a

00:16:26,320 --> 00:16:30,320
portable format where

00:16:27,519 --> 00:16:31,759
you know your linux app can run anywhere

00:16:30,320 --> 00:16:33,199
and there's plenty of up streams using

00:16:31,759 --> 00:16:35,279
it yes i know there was a libreoffice

00:16:33,199 --> 00:16:37,199
talk about app image here today

00:16:35,279 --> 00:16:38,480
there's one problem like promise to run

00:16:37,199 --> 00:16:40,079
everywhere apart from

00:16:38,480 --> 00:16:41,680
it doesn't run everywhere and they even

00:16:40,079 --> 00:16:43,360
document that it doesn't run everywhere

00:16:41,680 --> 00:16:45,360
because you have to cram all the system

00:16:43,360 --> 00:16:47,519
dependencies for every distribution you

00:16:45,360 --> 00:16:48,959
possibly could want to run it on

00:16:47,519 --> 00:16:50,480
into the app image so if you don't want

00:16:48,959 --> 00:16:52,480
to make an app image that is a couple of

00:16:50,480 --> 00:16:54,240
terabytes in size

00:16:52,480 --> 00:16:55,839
exaggerating slightly for effect but you

00:16:54,240 --> 00:16:57,440
get the idea

00:16:55,839 --> 00:16:59,040
you know then it's it's going to be a

00:16:57,440 --> 00:17:00,000
subset of distributions it works on

00:16:59,040 --> 00:17:00,720
there's going to be a subset of

00:17:00,000 --> 00:17:03,920
distributions

00:17:00,720 --> 00:17:05,360
it doesn't work on and this isn't just

00:17:03,920 --> 00:17:06,799
me you know bashing on that image

00:17:05,360 --> 00:17:08,240
because i really don't like it

00:17:06,799 --> 00:17:10,959
you know this is true with with all

00:17:08,240 --> 00:17:13,760
containers everywhere um you know even

00:17:10,959 --> 00:17:15,120
my beloved baby cubic where i'm running

00:17:13,760 --> 00:17:17,039
kubernetes

00:17:15,120 --> 00:17:18,480
you know you have a situation there

00:17:17,039 --> 00:17:19,839
which i won't go and delete too much

00:17:18,480 --> 00:17:21,919
because i could probably talk about that

00:17:19,839 --> 00:17:24,400
for half an hour on its own

00:17:21,919 --> 00:17:25,280
but you know the containers running on a

00:17:24,400 --> 00:17:27,839
host

00:17:25,280 --> 00:17:29,200
still have dependencies from a host you

00:17:27,839 --> 00:17:30,640
know they still have to have the right

00:17:29,200 --> 00:17:33,120
container one time they still have to

00:17:30,640 --> 00:17:34,799
have the right cubelet in this case

00:17:33,120 --> 00:17:36,160
so when you need to upgrade your

00:17:34,799 --> 00:17:37,440
containers

00:17:36,160 --> 00:17:39,200
there's times where you need to make

00:17:37,440 --> 00:17:40,480
sure the containers get updated first

00:17:39,200 --> 00:17:42,240
before the software on the

00:17:40,480 --> 00:17:44,080
host operating system does otherwise

00:17:42,240 --> 00:17:45,520
they stop talking to each other

00:17:44,080 --> 00:17:46,559
and there's sometimes the inverse too

00:17:45,520 --> 00:17:48,080
where you have to make sure the base

00:17:46,559 --> 00:17:49,360
system is updated

00:17:48,080 --> 00:17:51,360
before the contain the before the

00:17:49,360 --> 00:17:53,120
containers are you know but

00:17:51,360 --> 00:17:54,960
zipper doesn't know about that no

00:17:53,120 --> 00:17:58,640
package manager knows about that so that

00:17:54,960 --> 00:17:58,640
becomes you know a fun complicated

00:17:58,840 --> 00:18:01,919
challenge so

00:18:00,480 --> 00:18:03,360
basically at its heart this idea that

00:18:01,919 --> 00:18:05,039
like containers are like totally

00:18:03,360 --> 00:18:06,480
distribution neutral and you can run any

00:18:05,039 --> 00:18:08,320
container on any machine and it's all

00:18:06,480 --> 00:18:09,840
wonderfully isolated is a meth

00:18:08,320 --> 00:18:11,440
you know it's there are some cases where

00:18:09,840 --> 00:18:13,200
it's true but

00:18:11,440 --> 00:18:15,120
you still if you're doing containers

00:18:13,200 --> 00:18:16,880
properly you still need to

00:18:15,120 --> 00:18:18,320
at least think about it the same way you

00:18:16,880 --> 00:18:20,080
think about a traditional distribution

00:18:18,320 --> 00:18:21,600
you know build everything properly test

00:18:20,080 --> 00:18:23,360
everything properly release it all

00:18:21,600 --> 00:18:25,280
aligned together

00:18:23,360 --> 00:18:26,799
and doing that with traditional rpms is

00:18:25,280 --> 00:18:27,840
what we've been doing in cubic and we

00:18:26,799 --> 00:18:30,640
found it it just works

00:18:27,840 --> 00:18:31,440
really really smoothly um part of that

00:18:30,640 --> 00:18:33,200
like you say is because

00:18:31,440 --> 00:18:35,280
containers can be like really unfair and

00:18:33,200 --> 00:18:36,799
like require stuff from the host which

00:18:35,280 --> 00:18:38,400
might not exist on your system if you're

00:18:36,799 --> 00:18:41,520
not careful

00:18:38,400 --> 00:18:42,080
so yeah that used to be taken into

00:18:41,520 --> 00:18:43,679
account

00:18:42,080 --> 00:18:45,919
if you take it into account you actually

00:18:43,679 --> 00:18:48,160
end up with a weird situation

00:18:45,919 --> 00:18:49,440
where because containers do try and

00:18:48,160 --> 00:18:50,799
isolate themselves from the host

00:18:49,440 --> 00:18:51,760
and because you're testing everything

00:18:50,799 --> 00:18:52,960
and because you're building it or

00:18:51,760 --> 00:18:54,240
consistently

00:18:52,960 --> 00:18:55,840
you kind of know where those fracture

00:18:54,240 --> 00:18:57,760
points are going to be things like when

00:18:55,840 --> 00:18:59,360
there's a new glibc library popped in

00:18:57,760 --> 00:19:00,799
and therefore you know all your

00:18:59,360 --> 00:19:02,320
containers are building differently than

00:19:00,799 --> 00:19:05,200
they used to

00:19:02,320 --> 00:19:06,480
um so once you're aware of those kind of

00:19:05,200 --> 00:19:07,280
fracture points or like in the case of

00:19:06,480 --> 00:19:09,840
cubic actually

00:19:07,280 --> 00:19:12,160
kubernetes versions do this every time

00:19:09,840 --> 00:19:14,080
once you know where those risks are

00:19:12,160 --> 00:19:15,840
you can actually be more liberal

00:19:14,080 --> 00:19:17,679
elsewhere so you can have a situation

00:19:15,840 --> 00:19:20,320
where you do have the base system moving

00:19:17,679 --> 00:19:21,440
at a different pace from the containers

00:19:20,320 --> 00:19:22,880
but it's only going to work with

00:19:21,440 --> 00:19:24,160
specific containers it's only going to

00:19:22,880 --> 00:19:25,039
work with specific containers at

00:19:24,160 --> 00:19:28,559
specific times

00:19:25,039 --> 00:19:28,559
you can't treat everything equally

00:19:29,440 --> 00:19:32,640
uh so when it comes to building releases

00:19:31,520 --> 00:19:34,640
this is this is something that i've been

00:19:32,640 --> 00:19:37,760
talking about for a while

00:19:34,640 --> 00:19:39,600
there is this well i now consider a kind

00:19:37,760 --> 00:19:41,360
of fundamental axiom with with

00:19:39,600 --> 00:19:43,280
rolling distributions if you want to be

00:19:41,360 --> 00:19:45,360
able to move any part of a complicated

00:19:43,280 --> 00:19:46,640
system like a distribution

00:19:45,360 --> 00:19:49,039
you need to have a process in place

00:19:46,640 --> 00:19:50,960
where you can change everything

00:19:49,039 --> 00:19:52,720
and this is where like obs helps this is

00:19:50,960 --> 00:19:55,039
where open qa helps this is where our

00:19:52,720 --> 00:19:56,960
release process in tumbleweed helps

00:19:55,039 --> 00:19:58,400
you know where you know the process and

00:19:56,960 --> 00:19:59,520
the tooling is there now where we can

00:19:58,400 --> 00:20:01,120
literally have someone

00:19:59,520 --> 00:20:02,799
strolling off the street tomorrow want

00:20:01,120 --> 00:20:05,760
to change the entire distribution

00:20:02,799 --> 00:20:07,679
and we say yeah go ahead you know we can

00:20:05,760 --> 00:20:09,600
trust we can try that

00:20:07,679 --> 00:20:12,080
if you don't have that you know this

00:20:09,600 --> 00:20:13,520
this idea is going to fall on its face

00:20:12,080 --> 00:20:15,280
initially so you know being able you

00:20:13,520 --> 00:20:16,880
really need to make sure that you

00:20:15,280 --> 00:20:18,799
are open to the possibility that

00:20:16,880 --> 00:20:20,080
everything changes but that doesn't

00:20:18,799 --> 00:20:20,640
necessarily mean you have to change

00:20:20,080 --> 00:20:23,679
everything

00:20:20,640 --> 00:20:23,679
all the time all at once

00:20:24,000 --> 00:20:28,159
and there's real benefits from doing

00:20:25,760 --> 00:20:29,840
doing it this way you know the more

00:20:28,159 --> 00:20:31,200
rolling you when you're rolling the

00:20:29,840 --> 00:20:32,880
closer you are to upstream

00:20:31,200 --> 00:20:34,559
the better it is for everybody it's

00:20:32,880 --> 00:20:36,159
easier for distribution builders because

00:20:34,559 --> 00:20:37,679
we can benefit from what everybody else

00:20:36,159 --> 00:20:39,360
is doing upstream

00:20:37,679 --> 00:20:41,360
we have an easier time talking to those

00:20:39,360 --> 00:20:43,039
upstreams we have an easy time

00:20:41,360 --> 00:20:44,640
contributing back to them

00:20:43,039 --> 00:20:46,159
that also means we have an easy time for

00:20:44,640 --> 00:20:47,760
our users too you know our users are

00:20:46,159 --> 00:20:49,440
going to have more information that is

00:20:47,760 --> 00:20:50,799
accurate about the current version of

00:20:49,440 --> 00:20:52,400
stuff that's running

00:20:50,799 --> 00:20:54,240
when they need help there's more people

00:20:52,400 --> 00:20:56,720
that can help them

00:20:54,240 --> 00:20:57,520
and for no it reduces a whole bunch of

00:20:56,720 --> 00:20:59,760
double work

00:20:57,520 --> 00:21:01,600
retesting or like this this never ending

00:20:59,760 --> 00:21:02,080
death spiral of like back ports that

00:21:01,600 --> 00:21:03,760
require

00:21:02,080 --> 00:21:05,360
backboards that require backboards and

00:21:03,760 --> 00:21:07,440
then

00:21:05,360 --> 00:21:09,120
yeah then people wonder why it takes so

00:21:07,440 --> 00:21:12,559
long sometimes to release a patch in

00:21:09,120 --> 00:21:13,440
something like leap but change is still

00:21:12,559 --> 00:21:15,039
scary

00:21:13,440 --> 00:21:16,880
and not everybody wants to go at the

00:21:15,039 --> 00:21:18,880
speed of tumbleweed you know

00:21:16,880 --> 00:21:20,400
you know as fast as everybody else does

00:21:18,880 --> 00:21:21,760
and not every upstream is necessarily

00:21:20,400 --> 00:21:23,280
aligned even with the

00:21:21,760 --> 00:21:24,799
stuff they're using themselves so like i

00:21:23,280 --> 00:21:26,480
really wish that was true or like every

00:21:24,799 --> 00:21:28,320
distribution took care and

00:21:26,480 --> 00:21:29,600
every upstream took care and when

00:21:28,320 --> 00:21:31,120
they're dependent on something they like

00:21:29,600 --> 00:21:32,640
talk to each other and make sure they

00:21:31,120 --> 00:21:35,280
all kind of release things

00:21:32,640 --> 00:21:36,080
reasonably aligned but it doesn't happen

00:21:35,280 --> 00:21:38,400
and you know

00:21:36,080 --> 00:21:39,840
we don't live in a perfect world um and

00:21:38,400 --> 00:21:43,200
that gives us therefore a little bit of

00:21:39,840 --> 00:21:45,600
work to worry about or to take care

00:21:43,200 --> 00:21:46,799
um and yeah i think i've already

00:21:45,600 --> 00:21:49,360
mentioned this but

00:21:46,799 --> 00:21:51,120
you know speed is an element of rolling

00:21:49,360 --> 00:21:53,280
releases but it's not necessarily the

00:21:51,120 --> 00:21:55,679
defining part of it

00:21:53,280 --> 00:21:57,760
you know full speed is not the only

00:21:55,679 --> 00:22:00,080
speed right now with tumbleweed we've

00:21:57,760 --> 00:22:00,640
proven we can go as fast as upstreams

00:22:00,080 --> 00:22:01,840
we've

00:22:00,640 --> 00:22:04,080
proven we can go as fast as

00:22:01,840 --> 00:22:06,240
contributions um

00:22:04,080 --> 00:22:09,520
i think rolling releases is the answer

00:22:06,240 --> 00:22:12,320
at any speed where our users want to be

00:22:09,520 --> 00:22:14,799
i don't think regular releases are the

00:22:12,320 --> 00:22:18,000
right way of doing software in 2020

00:22:14,799 --> 00:22:19,840
full stop the end um and so you know if

00:22:18,000 --> 00:22:23,120
tumbleweed is too fast for you

00:22:19,840 --> 00:22:23,679
fine you know then let's look at answers

00:22:23,120 --> 00:22:25,600
where

00:22:23,679 --> 00:22:26,880
you know we find a better balance that

00:22:25,600 --> 00:22:28,240
takes everything we know from the

00:22:26,880 --> 00:22:30,159
process and everything we know from the

00:22:28,240 --> 00:22:33,280
ability to move quickly

00:22:30,159 --> 00:22:35,120
and slow it down at a pace which

00:22:33,280 --> 00:22:37,200
you know doesn't scare too many users

00:22:35,120 --> 00:22:38,880
away doesn't let us drift too far from

00:22:37,200 --> 00:22:40,640
upstream you know maybe there is like

00:22:38,880 --> 00:22:42,400
this lovely goldilocks point that

00:22:40,640 --> 00:22:45,679
no one's found yet like a rolling

00:22:42,400 --> 00:22:48,080
release that's just fast enough

00:22:45,679 --> 00:22:49,440
um i i'm really keen in exploring that i

00:22:48,080 --> 00:22:51,919
did

00:22:49,440 --> 00:22:53,200
um in some ways i already am kind of

00:22:51,919 --> 00:22:54,799
exploring that idea you know

00:22:53,200 --> 00:22:56,640
with micro s which i was talking about

00:22:54,799 --> 00:22:58,960
in my earlier session

00:22:56,640 --> 00:23:00,000
you know we already have a distribution

00:22:58,960 --> 00:23:02,880
where

00:23:00,000 --> 00:23:04,559
the the amount of change that happens to

00:23:02,880 --> 00:23:06,520
micro os is less than the rest of

00:23:04,559 --> 00:23:08,080
tumbleweed so even though it's built on

00:23:06,520 --> 00:23:09,600
tumbleweed um

00:23:08,080 --> 00:23:11,919
you know micros is a smaller

00:23:09,600 --> 00:23:13,200
distribution it's just there to run one

00:23:11,919 --> 00:23:15,360
thing in this case i'm going to say it's

00:23:13,200 --> 00:23:16,960
just there to run containers

00:23:15,360 --> 00:23:18,400
and if it's just running containers you

00:23:16,960 --> 00:23:20,240
know there isn't that much to change you

00:23:18,400 --> 00:23:22,640
know kernel pod man it's kind of it

00:23:20,240 --> 00:23:24,000
it's all it does um so you don't get

00:23:22,640 --> 00:23:25,520
quite so many updates you don't have

00:23:24,000 --> 00:23:28,000
quite so much risk

00:23:25,520 --> 00:23:29,440
the risk gets mitigated by the fact that

00:23:28,000 --> 00:23:30,880
it's immutable anyway

00:23:29,440 --> 00:23:33,360
so you know while it's running it's not

00:23:30,880 --> 00:23:34,640
going to change when it reboots well you

00:23:33,360 --> 00:23:35,919
know when it reboots

00:23:34,640 --> 00:23:37,679
you know exactly what services are

00:23:35,919 --> 00:23:40,000
running on there just podman so

00:23:37,679 --> 00:23:41,440
it's trivial for open for microwave

00:23:40,000 --> 00:23:42,960
itself to figure out is my

00:23:41,440 --> 00:23:44,720
are my podman container still running

00:23:42,960 --> 00:23:47,200
and if they're not then automatically

00:23:44,720 --> 00:23:50,400
fix itself and roll yourself back

00:23:47,200 --> 00:23:51,840
so you know you can keep the code base

00:23:50,400 --> 00:23:54,080
running at full speed but

00:23:51,840 --> 00:23:55,919
actually ship something that's so much

00:23:54,080 --> 00:23:57,840
smaller that the fact that the code base

00:23:55,919 --> 00:23:59,200
is going really really quickly

00:23:57,840 --> 00:24:02,080
doesn't really matter because the only

00:23:59,200 --> 00:24:04,640
parts that the use of it's exposed to is

00:24:02,080 --> 00:24:06,240
yeah this relatively small a couple of

00:24:04,640 --> 00:24:08,000
hundred packages and you know

00:24:06,240 --> 00:24:10,320
well if they test it well and touch wood

00:24:08,000 --> 00:24:12,960
i do a pretty good job of testing them

00:24:10,320 --> 00:24:13,440
it always works it's just as stable as

00:24:12,960 --> 00:24:15,520
bleep

00:24:13,440 --> 00:24:17,200
or something even more conservative um

00:24:15,520 --> 00:24:18,640
and in my case that's

00:24:17,200 --> 00:24:20,880
why i actually started doing that wanted

00:24:18,640 --> 00:24:22,320
to do this presentation you know i don't

00:24:20,880 --> 00:24:24,159
use any regular releases in my

00:24:22,320 --> 00:24:28,320
distribution now my next cloud

00:24:24,159 --> 00:24:30,799
my emulation station everything

00:24:28,320 --> 00:24:34,159
is now you know yeah my minecraft server

00:24:30,799 --> 00:24:34,159
everything is now running on leap

00:24:34,640 --> 00:24:37,679
um someone just asked a question

00:24:36,159 --> 00:24:40,240
automated updates can be dangerous on

00:24:37,679 --> 00:24:43,039
changes of major versions of a package

00:24:40,240 --> 00:24:44,159
any option to pin a package to a major

00:24:43,039 --> 00:24:47,279
version would be really helpful

00:24:44,159 --> 00:24:47,840
any ideas plans about that um but you

00:24:47,279 --> 00:24:49,919
can

00:24:47,840 --> 00:24:50,960
theoretically pin something i would

00:24:49,919 --> 00:24:53,039
argue that

00:24:50,960 --> 00:24:55,039
it's the wrong way to think about it you

00:24:53,039 --> 00:24:58,159
know in the case of micro os

00:24:55,039 --> 00:24:59,120
have the update happen and have your

00:24:58,159 --> 00:25:00,799
health checker run

00:24:59,120 --> 00:25:02,400
you know if house if health checker says

00:25:00,799 --> 00:25:03,600
it's running fine then it's running fine

00:25:02,400 --> 00:25:05,120
if else trick is said it's not running

00:25:03,600 --> 00:25:06,640
fine it's going to vote itself back and

00:25:05,120 --> 00:25:09,840
pin itself

00:25:06,640 --> 00:25:11,600
so manually interacting with the package

00:25:09,840 --> 00:25:13,120
manager to figure out what version is

00:25:11,600 --> 00:25:14,320
running where like that's

00:25:13,120 --> 00:25:15,840
that's not something you should be

00:25:14,320 --> 00:25:16,799
worrying about on the base system now

00:25:15,840 --> 00:25:17,440
that might be something you want to

00:25:16,799 --> 00:25:19,039
worry about

00:25:17,440 --> 00:25:20,720
on the service you're running like for

00:25:19,039 --> 00:25:23,760
my next cloud yeah sure i

00:25:20,720 --> 00:25:24,400
i pin my next cloud to the stable stream

00:25:23,760 --> 00:25:25,760
because the

00:25:24,400 --> 00:25:27,840
the beta stream is horrifically

00:25:25,760 --> 00:25:29,120
dangerous but that's something that you

00:25:27,840 --> 00:25:30,960
do in containers

00:25:29,120 --> 00:25:32,159
that's just deciding which container

00:25:30,960 --> 00:25:33,679
pools that's that's not

00:25:32,159 --> 00:25:35,360
anything to do with the operating system

00:25:33,679 --> 00:25:39,760
that's you know that's

00:25:35,360 --> 00:25:41,279
now user space and with this concept not

00:25:39,760 --> 00:25:42,480
not something i have to worry about as a

00:25:41,279 --> 00:25:46,000
distribution engineer you can run

00:25:42,480 --> 00:25:46,000
whichever version of next cloud you want

00:25:47,200 --> 00:25:50,320
um and that kind of actually leads me

00:25:48,880 --> 00:25:52,080
nicely to this this

00:25:50,320 --> 00:25:53,840
epiphany that i had when i gave a

00:25:52,080 --> 00:25:56,080
version of this talk last week so

00:25:53,840 --> 00:25:57,039
unfortunately i know it at half past i'm

00:25:56,080 --> 00:26:00,480
going to go on for like

00:25:57,039 --> 00:26:02,799
five ten minutes i'm afraid sorry um

00:26:00,480 --> 00:26:04,159
that's you know is everybody doing

00:26:02,799 --> 00:26:06,000
everything wrong

00:26:04,159 --> 00:26:07,279
um you know we know that rpms are great

00:26:06,000 --> 00:26:09,760
for building you know we've been doing

00:26:07,279 --> 00:26:13,039
it for years obs is great all is good

00:26:09,760 --> 00:26:14,480
but it can be painful for users

00:26:13,039 --> 00:26:16,080
why do we still make users deal with

00:26:14,480 --> 00:26:18,720
packages you know

00:26:16,080 --> 00:26:20,240
why you know containers are a real thing

00:26:18,720 --> 00:26:22,080
people more people know how to use

00:26:20,240 --> 00:26:24,000
containers you know

00:26:22,080 --> 00:26:25,440
back to that ridiculous graph i showed

00:26:24,000 --> 00:26:26,799
earlier you know there's plenty of

00:26:25,440 --> 00:26:27,840
projects out there that only do

00:26:26,799 --> 00:26:29,279
containers

00:26:27,840 --> 00:26:30,880
and when you look at that ridiculous

00:26:29,279 --> 00:26:32,080
graph you realize

00:26:30,880 --> 00:26:34,400
there's all these projects that are

00:26:32,080 --> 00:26:36,400
container first but there isn't actually

00:26:34,400 --> 00:26:39,200
a container first operating system out

00:26:36,400 --> 00:26:41,279
there like not one that's really thought

00:26:39,200 --> 00:26:42,880
what should we look like if we still

00:26:41,279 --> 00:26:44,400
wanted to be interactive we still wanted

00:26:42,880 --> 00:26:45,279
to have users work with it like they

00:26:44,400 --> 00:26:48,320
work with a

00:26:45,279 --> 00:26:49,440
you know open souza or other server

00:26:48,320 --> 00:26:52,640
distribution

00:26:49,440 --> 00:26:54,720
um but you know didn't give help didn't

00:26:52,640 --> 00:26:56,159
have rpms didn't have packages you know

00:26:54,720 --> 00:26:57,679
didn't have a package manager that you

00:26:56,159 --> 00:26:59,360
interacted with in the same way

00:26:57,679 --> 00:27:01,840
you just use containers and only

00:26:59,360 --> 00:27:03,840
containers um

00:27:01,840 --> 00:27:05,120
because yeah again contentious point

00:27:03,840 --> 00:27:06,559
maybe but i don't think developers or

00:27:05,120 --> 00:27:08,080
systems really want to care about

00:27:06,559 --> 00:27:09,679
packages you know they just want

00:27:08,080 --> 00:27:12,400
either their service that they want to

00:27:09,679 --> 00:27:14,000
run or if they're a developer or devops

00:27:12,400 --> 00:27:15,520
engineer you know maybe the languages or

00:27:14,000 --> 00:27:17,600
the libraries they care about for the

00:27:15,520 --> 00:27:20,559
thing they want to build against

00:27:17,600 --> 00:27:22,159
um well containers are really a really

00:27:20,559 --> 00:27:23,919
easy way to actually

00:27:22,159 --> 00:27:26,240
sort of translate all of the stuff we've

00:27:23,919 --> 00:27:29,840
been doing for the last 20 odd years

00:27:26,240 --> 00:27:32,559
um and offered users our software

00:27:29,840 --> 00:27:34,080
in a new format which is actually better

00:27:32,559 --> 00:27:35,679
aligned with that way of thinking

00:27:34,080 --> 00:27:37,360
you know just give people the services

00:27:35,679 --> 00:27:38,960
they want just give people the languages

00:27:37,360 --> 00:27:41,200
and libraries they want

00:27:38,960 --> 00:27:42,320
and don't have them faffing about with

00:27:41,200 --> 00:27:45,679
packages and

00:27:42,320 --> 00:27:48,159
yeah worrying about all that stuff

00:27:45,679 --> 00:27:49,440
so this is a crazy concept so crazy

00:27:48,159 --> 00:27:51,200
concept for me normally end up with a

00:27:49,440 --> 00:27:52,720
bad name attached to it and then the bad

00:27:51,200 --> 00:27:54,480
name has a habit of sticking maybe this

00:27:52,720 --> 00:27:57,679
one will hopefully not

00:27:54,480 --> 00:27:59,440
um i'm calling this idea cool you know

00:27:57,679 --> 00:28:02,000
what about if we had an operating

00:27:59,440 --> 00:28:02,960
layer you know a container only system

00:28:02,000 --> 00:28:04,480
that

00:28:02,960 --> 00:28:07,039
just did nothing but containers

00:28:04,480 --> 00:28:08,559
basically something like micro os

00:28:07,039 --> 00:28:10,159
but actually having like a whole

00:28:08,559 --> 00:28:11,919
ecosystem of containers

00:28:10,159 --> 00:28:13,919
ready to use that were built together

00:28:11,919 --> 00:28:15,440
that were tested together because

00:28:13,919 --> 00:28:18,080
you know i do accept the fact that the

00:28:15,440 --> 00:28:19,600
outside wide world of containers isn't

00:28:18,080 --> 00:28:21,039
necessarily the best way you want to be

00:28:19,600 --> 00:28:22,480
encouraging people to consume all of

00:28:21,039 --> 00:28:24,640
that stuff some of those containers out

00:28:22,480 --> 00:28:27,360
there are heavy broken

00:28:24,640 --> 00:28:28,399
um yeah and like just like brett is

00:28:27,360 --> 00:28:29,679
saying in the chapter right now you know

00:28:28,399 --> 00:28:30,000
containers are kind of augmented because

00:28:29,679 --> 00:28:32,159
they're not

00:28:30,000 --> 00:28:34,480
curated like system packages are he's

00:28:32,159 --> 00:28:37,279
right this is where this idea comes in

00:28:34,480 --> 00:28:38,240
you know what if we had a curated

00:28:37,279 --> 00:28:42,159
collection of libra

00:28:38,240 --> 00:28:44,000
of containers really handled for what

00:28:42,159 --> 00:28:45,360
people want to use these days like

00:28:44,000 --> 00:28:46,880
i've called this concept runtimes

00:28:45,360 --> 00:28:48,640
because i like flat packs i've copied

00:28:46,880 --> 00:28:50,240
the idea from them basically

00:28:48,640 --> 00:28:52,240
you know why not have a bunch of runtime

00:28:50,240 --> 00:28:52,880
containers that contain the language

00:28:52,240 --> 00:28:54,399
libraries

00:28:52,880 --> 00:28:56,080
the tool chain all bundled together so

00:28:54,399 --> 00:28:57,120
you know you'd have a python runtime

00:28:56,080 --> 00:28:59,600
you'd have a golang

00:28:57,120 --> 00:29:00,399
time and then after that you know you'd

00:28:59,600 --> 00:29:03,039
have

00:29:00,399 --> 00:29:03,919
apps you know basic proper service

00:29:03,039 --> 00:29:05,360
containers

00:29:03,919 --> 00:29:07,120
that are ready to go with the actual

00:29:05,360 --> 00:29:08,960
thing that you know sysadmins whatever

00:29:07,120 --> 00:29:12,080
you know apache movie db

00:29:08,960 --> 00:29:14,320
whatever dhcp etc

00:29:12,080 --> 00:29:15,840
you know running the apps would be a

00:29:14,320 --> 00:29:19,120
simple

00:29:15,840 --> 00:29:21,279
you know podman pool you know some nice

00:29:19,120 --> 00:29:23,120
simple short name running from registry

00:29:21,279 --> 00:29:25,760
to opensuse.org

00:29:23,120 --> 00:29:27,039
and you know building your own service

00:29:25,760 --> 00:29:28,880
based on an existing one would be a

00:29:27,039 --> 00:29:30,720
simple case of like using builder or you

00:29:28,880 --> 00:29:33,520
know docker with a dockerfile

00:29:30,720 --> 00:29:36,240
and just you know pulling that from that

00:29:33,520 --> 00:29:36,240
same service

00:29:36,720 --> 00:29:40,159
same would go for the runtimes you know

00:29:38,480 --> 00:29:41,760
this would be an incredibly easy

00:29:40,159 --> 00:29:43,200
simple platform for anybody doing

00:29:41,760 --> 00:29:44,799
anything containers to just you know

00:29:43,200 --> 00:29:46,640
pull their runtime and they'll get

00:29:44,799 --> 00:29:49,039
python3 and they won't necessarily

00:29:46,640 --> 00:29:50,159
need to care about exactly which unless

00:29:49,039 --> 00:29:52,080
they want to then in which case they can

00:29:50,159 --> 00:29:53,200
change the version number at the end

00:29:52,080 --> 00:29:55,200
but they shouldn't need to care about

00:29:53,200 --> 00:29:57,279
exactly which version of python are they

00:29:55,200 --> 00:29:58,880
working on you know they should just be

00:29:57,279 --> 00:30:00,159
to pull it down have everything they

00:29:58,880 --> 00:30:02,159
need in there

00:30:00,159 --> 00:30:04,240
have have here have the pricing command

00:30:02,159 --> 00:30:05,600
line have all the libraries ready to go

00:30:04,240 --> 00:30:08,159
and then just base their container

00:30:05,600 --> 00:30:10,320
alongside it so they can you know

00:30:08,159 --> 00:30:11,840
have have their builder from i don't

00:30:10,320 --> 00:30:12,960
just build a pool there but i meant

00:30:11,840 --> 00:30:14,880
builder from

00:30:12,960 --> 00:30:16,960
golang and build the container alongside

00:30:14,880 --> 00:30:16,960
it

00:30:18,320 --> 00:30:23,120
um this is how users would see it you

00:30:21,440 --> 00:30:26,320
know nice simple

00:30:23,120 --> 00:30:28,399
very container cloud native friendly

00:30:26,320 --> 00:30:29,520
but actually behind the scenes i think

00:30:28,399 --> 00:30:31,120
i've got a good idea how we could build

00:30:29,520 --> 00:30:32,000
this whole thing in obs like relatively

00:30:31,120 --> 00:30:34,399
quickly

00:30:32,000 --> 00:30:35,840
um using obs for what it's really good

00:30:34,399 --> 00:30:36,559
for and actually having a whole bunch of

00:30:35,840 --> 00:30:39,440
sub projects

00:30:36,559 --> 00:30:41,919
so you know you'd have a master project

00:30:39,440 --> 00:30:46,159
i'm calling it cool in this example here

00:30:41,919 --> 00:30:47,679
um have these runtime sub projects have

00:30:46,159 --> 00:30:49,279
sub projects for things like python

00:30:47,679 --> 00:30:51,440
specific versions

00:30:49,279 --> 00:30:53,360
and then have the packages dependent on

00:30:51,440 --> 00:30:55,279
those also built separately there so you

00:30:53,360 --> 00:30:56,480
you'd be building rpms very similar to

00:30:55,279 --> 00:30:58,159
how we do

00:30:56,480 --> 00:31:00,240
current rpm builds the difference is

00:30:58,159 --> 00:31:01,440
you'd have an interesting nesting of

00:31:00,240 --> 00:31:02,480
subprojects

00:31:01,440 --> 00:31:03,600
but everything would still be put

00:31:02,480 --> 00:31:05,360
together we're not talking about like

00:31:03,600 --> 00:31:07,440
freezing these sub projects

00:31:05,360 --> 00:31:08,960
artificially like we do with with

00:31:07,440 --> 00:31:11,039
regular releases

00:31:08,960 --> 00:31:12,480
you know so you know every new thing

00:31:11,039 --> 00:31:14,480
gets into the base system

00:31:12,480 --> 00:31:15,760
everything can rebuild get a whole bunch

00:31:14,480 --> 00:31:18,960
of new containers

00:31:15,760 --> 00:31:21,360
um you know yeah so you're still

00:31:18,960 --> 00:31:23,120
honoring the kind of build together part

00:31:21,360 --> 00:31:25,679
um the testing together again

00:31:23,120 --> 00:31:26,960
same kind of thing the shipping together

00:31:25,679 --> 00:31:28,080
again same kind of thing we're doing

00:31:26,960 --> 00:31:30,159
with tumbleweed

00:31:28,080 --> 00:31:31,919
but there will be times when things need

00:31:30,159 --> 00:31:32,399
to diverge there'll be times we do want

00:31:31,919 --> 00:31:34,559
to pin

00:31:32,399 --> 00:31:35,760
a python runtime to something or

00:31:34,559 --> 00:31:37,360
there'll be a time when something might

00:31:35,760 --> 00:31:38,720
break a little bit

00:31:37,360 --> 00:31:40,880
and this way we'd actually be in a

00:31:38,720 --> 00:31:43,360
position to allow that to happen

00:31:40,880 --> 00:31:44,880
you know we could actually release the

00:31:43,360 --> 00:31:46,320
the other runtimes that are fine we

00:31:44,880 --> 00:31:48,640
could release the basis in the define

00:31:46,320 --> 00:31:50,799
and we can leave the containers there

00:31:48,640 --> 00:31:51,679
until we get around to fixing it or

00:31:50,799 --> 00:31:53,519
until the

00:31:51,679 --> 00:31:55,120
support life cycle is down so you know

00:31:53,519 --> 00:31:56,640
we don't always necessarily need to move

00:31:55,120 --> 00:31:58,159
everything at warp speed we could speed

00:31:56,640 --> 00:32:00,399
things up or slow things down unless you

00:31:58,159 --> 00:32:02,399
know as we need to um

00:32:00,399 --> 00:32:03,919
and you know this might be built in a

00:32:02,399 --> 00:32:06,159
really complicated way in obs

00:32:03,919 --> 00:32:08,000
but users would just see this in like

00:32:06,159 --> 00:32:10,480
the examples i gave earlier

00:32:08,000 --> 00:32:11,519
a nice simple layered in registry to

00:32:10,480 --> 00:32:12,960
open scissors or

00:32:11,519 --> 00:32:15,360
we flatten it all down and keep it

00:32:12,960 --> 00:32:17,120
simple which is kind of what we're doing

00:32:15,360 --> 00:32:17,360
already when you look at the micro risks

00:32:17,120 --> 00:32:19,039
and

00:32:17,360 --> 00:32:20,399
and other containers that we have in the

00:32:19,039 --> 00:32:21,120
opensuse name space you know they're

00:32:20,399 --> 00:32:23,919
built

00:32:21,120 --> 00:32:25,200
in a multitude of different ways and yet

00:32:23,919 --> 00:32:27,120
they just appear as like

00:32:25,200 --> 00:32:29,120
open source or tumbleweed oil consumer

00:32:27,120 --> 00:32:32,960
micro os that's an open souser

00:32:29,120 --> 00:32:34,159
busy box um so yeah keeps it simple

00:32:32,960 --> 00:32:36,240
we don't want things to be complicated

00:32:34,159 --> 00:32:37,440
for people to use somebody asked what

00:32:36,240 --> 00:32:38,480
about the desktop which is really cool

00:32:37,440 --> 00:32:39,120
because i already put a slide in for

00:32:38,480 --> 00:32:40,840
that

00:32:39,120 --> 00:32:42,320
um i already did a talk about the micros

00:32:40,840 --> 00:32:45,440
desktop

00:32:42,320 --> 00:32:47,200
um this is a vet the cool idea is a very

00:32:45,440 --> 00:32:49,039
server orientated idea

00:32:47,200 --> 00:32:50,799
um i think for the desktop side of

00:32:49,039 --> 00:32:52,159
things the micros desktop is kind of

00:32:50,799 --> 00:32:54,080
already on track for that

00:32:52,159 --> 00:32:55,360
um so and i already that's what that

00:32:54,080 --> 00:32:56,159
wants to be the rolling release that i

00:32:55,360 --> 00:32:58,159
use

00:32:56,159 --> 00:32:59,360
so please my video for my last session

00:32:58,159 --> 00:33:01,279
is already

00:32:59,360 --> 00:33:03,440
uh already on youtube you can watch that

00:33:01,279 --> 00:33:04,559
talk already um or you can go to this

00:33:03,440 --> 00:33:06,240
talk tomorrow

00:33:04,559 --> 00:33:08,399
where davio is actually talking about

00:33:06,240 --> 00:33:10,799
like how he is actually using the micros

00:33:08,399 --> 00:33:13,279
desktop and his daily driver so

00:33:10,799 --> 00:33:14,960
you could already argue the desktop side

00:33:13,279 --> 00:33:16,559
of this equation is already wet on the

00:33:14,960 --> 00:33:19,840
way to being fixed

00:33:16,559 --> 00:33:22,559
and this like this cool idea is

00:33:19,840 --> 00:33:24,320
yeah figuring out how to give a similar

00:33:22,559 --> 00:33:27,679
kind of curated

00:33:24,320 --> 00:33:28,799
solution for the server container side

00:33:27,679 --> 00:33:30,640
of things

00:33:28,799 --> 00:33:32,159
now i've run eight minutes over there's

00:33:30,640 --> 00:33:34,159
been a whole bunch of questions in the

00:33:32,159 --> 00:33:35,039
chat i will try my best to snipe a few

00:33:34,159 --> 00:33:40,559
out before i

00:33:35,039 --> 00:33:40,559
stop i addressed brett's thing

00:33:40,880 --> 00:33:48,240
i agree with that answered pet roasting

00:33:45,039 --> 00:33:48,240
sorry sorry sorry

00:33:48,720 --> 00:33:51,679
axel yeah you have to worry about the

00:33:50,320 --> 00:33:53,039
software that runs on the system not in

00:33:51,679 --> 00:33:54,720
the container that's the point of this

00:33:53,039 --> 00:33:56,480
that's you know let's use that for all

00:33:54,720 --> 00:33:56,960
that's worse so we can worry about less

00:33:56,480 --> 00:33:59,279
stuff

00:33:56,960 --> 00:34:00,880
that's part of my goal here as well you

00:33:59,279 --> 00:34:02,799
know not only moving stuff quicker and

00:34:00,880 --> 00:34:04,880
being more aligned with upstream

00:34:02,799 --> 00:34:06,240
but also cutting down on the amount of

00:34:04,880 --> 00:34:08,000
stuff we have to look after

00:34:06,240 --> 00:34:09,359
if upstreams are taking care of stuff

00:34:08,000 --> 00:34:11,520
well you know

00:34:09,359 --> 00:34:12,960
then there's not there might be a case

00:34:11,520 --> 00:34:16,560
of no even need to

00:34:12,960 --> 00:34:18,000
curate them and put them into cool um

00:34:16,560 --> 00:34:19,599
but if they're not doing it well if the

00:34:18,000 --> 00:34:21,839
curation is needed

00:34:19,599 --> 00:34:22,800
then you know let's do it properly

00:34:21,839 --> 00:34:25,599
rather than just

00:34:22,800 --> 00:34:27,200
putting things yeah all over the place

00:34:25,599 --> 00:34:30,000
upstream can never be trusted

00:34:27,200 --> 00:34:31,359
um yeah this times upstream can do a

00:34:30,000 --> 00:34:34,399
better job than we can

00:34:31,359 --> 00:34:35,359
we can't always be trusted either and

00:34:34,399 --> 00:34:37,919
yeah that's

00:34:35,359 --> 00:34:38,480
it any other questions for the chat or

00:34:37,919 --> 00:34:41,760
voice

00:34:38,480 --> 00:34:42,879
before we call it today

00:34:41,760 --> 00:34:49,119
because i don't want to take any more of

00:34:42,879 --> 00:34:51,040
your break

00:34:49,119 --> 00:34:53,119
no cool if anybody really likes this

00:34:51,040 --> 00:34:57,040
idea please like ping me in

00:34:53,119 --> 00:35:00,079
uh well irc or chat or

00:34:57,040 --> 00:35:02,079
email or factory or whatever

00:35:00,079 --> 00:35:03,520
um you know you're likely to see this is

00:35:02,079 --> 00:35:05,599
my hack week project next time susan

00:35:03,520 --> 00:35:08,160
have a hack week

00:35:05,599 --> 00:35:09,680
um because i i think i could even start

00:35:08,160 --> 00:35:11,520
bootstrapping this stuff alongside

00:35:09,680 --> 00:35:12,720
tumbleweed um i want to see how far this

00:35:11,520 --> 00:35:14,839
idea goes but

00:35:12,720 --> 00:35:17,839
yeah if other people like it too let's

00:35:14,839 --> 00:35:17,839
go

00:35:18,320 --> 00:35:23,560
cool pun intended okay thank you

00:35:21,440 --> 00:35:26,560
everybody

00:35:23,560 --> 00:35:26,560

YouTube URL: https://www.youtube.com/watch?v=i8c0mg_mS7U


