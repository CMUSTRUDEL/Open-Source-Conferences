Title: Integration testing framework for YaST modules
Publication date: 2020-11-04
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,160 --> 00:00:04,880
configuration tools which are shipped

00:00:02,159 --> 00:00:07,919
with the suse products um

00:00:04,880 --> 00:00:11,599
and also in opensuse and

00:00:07,919 --> 00:00:14,799
basically they um

00:00:11,599 --> 00:00:15,519
they give us the ui to configure the

00:00:14,799 --> 00:00:18,080
system

00:00:15,519 --> 00:00:19,279
and underneath it use the libraries and

00:00:18,080 --> 00:00:20,640
the tools

00:00:19,279 --> 00:00:22,400
which you would normally use from the

00:00:20,640 --> 00:00:26,160
command line

00:00:22,400 --> 00:00:26,480
for those ui modules underneath it uses

00:00:26,160 --> 00:00:30,240
the

00:00:26,480 --> 00:00:33,120
live yui which is the interface engine

00:00:30,240 --> 00:00:35,120
which provides the abstraction layer um

00:00:33,120 --> 00:00:35,680
i can develop your application in c plus

00:00:35,120 --> 00:00:38,160
plus

00:00:35,680 --> 00:00:39,280
or ruby write it once and then your

00:00:38,160 --> 00:00:42,399
application

00:00:39,280 --> 00:00:46,399
will work in qt jtk which is

00:00:42,399 --> 00:00:48,640
at the moment the development is um

00:00:46,399 --> 00:00:49,840
kind of slowed down and that's why for

00:00:48,640 --> 00:00:52,480
rest api

00:00:49,840 --> 00:00:54,879
uh we don't support it and and curses

00:00:52,480 --> 00:00:55,760
and so you basically implement the ui

00:00:54,879 --> 00:00:57,840
ones

00:00:55,760 --> 00:00:59,760
using this abstraction layer and then

00:00:57,840 --> 00:01:03,680
you can run your application

00:00:59,760 --> 00:01:05,280
uh on the servers or also like on the

00:01:03,680 --> 00:01:06,960
desktop installations where you would

00:01:05,280 --> 00:01:10,159
have um

00:01:06,960 --> 00:01:13,040
gnome installed for instance um

00:01:10,159 --> 00:01:15,040
so what how it's currently uh the yes

00:01:13,040 --> 00:01:16,799
components are tested we have the unit

00:01:15,040 --> 00:01:19,119
tests um

00:01:16,799 --> 00:01:20,000
uh which are using their spec framework

00:01:19,119 --> 00:01:23,680
so that uh

00:01:20,000 --> 00:01:26,560
explains the um our choice because we

00:01:23,680 --> 00:01:27,040
also start with the r spec and we plan

00:01:26,560 --> 00:01:30,640
to

00:01:27,040 --> 00:01:32,400
um run those integration tests also with

00:01:30,640 --> 00:01:34,560
r spec as a part of the

00:01:32,400 --> 00:01:36,479
uh ci basically on this on the same

00:01:34,560 --> 00:01:40,000
phase when the unit tests are also

00:01:36,479 --> 00:01:42,399
running and then we have the integration

00:01:40,000 --> 00:01:43,360
the system testing which are um running

00:01:42,399 --> 00:01:45,360
in the open k

00:01:43,360 --> 00:01:46,399
um you might have heard about this tool

00:01:45,360 --> 00:01:49,439
basically

00:01:46,399 --> 00:01:52,479
uh it's yeah uh can be compared to the

00:01:49,439 --> 00:01:52,799
swiss army knife where so it's capable

00:01:52,479 --> 00:01:56,000
of

00:01:52,799 --> 00:01:57,759
many things but for some tasks it

00:01:56,000 --> 00:01:59,280
performs then

00:01:57,759 --> 00:02:01,040
not that well because yeah you don't

00:01:59,280 --> 00:02:02,960
want to use the screwdriver from the

00:02:01,040 --> 00:02:04,399
swiss army knife all the time sometimes

00:02:02,960 --> 00:02:07,439
you want the full-size

00:02:04,399 --> 00:02:10,560
screwdriver and that was

00:02:07,439 --> 00:02:13,920
exactly the case uh for us um

00:02:10,560 --> 00:02:14,720
because um uh first of all to run those

00:02:13,920 --> 00:02:17,840
tasks

00:02:14,720 --> 00:02:19,200
open k is heavily uh heavy and uh for

00:02:17,840 --> 00:02:20,720
developers they will have to spawn the

00:02:19,200 --> 00:02:25,040
whole environment

00:02:20,720 --> 00:02:28,640
um to just run the test it's also

00:02:25,040 --> 00:02:32,000
use the screen based

00:02:28,640 --> 00:02:35,120
mechanism which are

00:02:32,000 --> 00:02:36,000
very costly to maintain in case there

00:02:35,120 --> 00:02:38,239
are phone changes

00:02:36,000 --> 00:02:40,080
or there are some changes in the ui

00:02:38,239 --> 00:02:42,480
therefore um

00:02:40,080 --> 00:02:43,599
we came up with our solution so briefly

00:02:42,480 --> 00:02:46,319
to describe

00:02:43,599 --> 00:02:48,160
what is our spec basically um we have

00:02:46,319 --> 00:02:51,599
driven development framework

00:02:48,160 --> 00:02:53,440
you can write the code um

00:02:51,599 --> 00:02:54,640
there so it provides the marking

00:02:53,440 --> 00:02:56,640
mechanism and

00:02:54,640 --> 00:02:57,680
all other of the different assertion

00:02:56,640 --> 00:03:00,959
mechanisms so

00:02:57,680 --> 00:03:04,239
it's pretty uh rich in that sense

00:03:00,959 --> 00:03:07,440
so yeah it can be used easily for

00:03:04,239 --> 00:03:09,680
unit integration testing in the

00:03:07,440 --> 00:03:11,599
terminology we have just mentioned and

00:03:09,680 --> 00:03:14,879
it also already has the built-in

00:03:11,599 --> 00:03:18,800
reporting capabilities um so

00:03:14,879 --> 00:03:19,360
uh pretty useful um so to the rest api

00:03:18,800 --> 00:03:22,879
basically

00:03:19,360 --> 00:03:26,080
so we have the uh our ui

00:03:22,879 --> 00:03:29,280
and we want to operate it um

00:03:26,080 --> 00:03:32,319
and not rely on this some script-based

00:03:29,280 --> 00:03:35,440
tooling so what we have developed

00:03:32,319 --> 00:03:38,879
is that we have the run the server side

00:03:35,440 --> 00:03:41,280
on the uh application so uh it's

00:03:38,879 --> 00:03:42,319
dynamically loaded plug-in uh developed

00:03:41,280 --> 00:03:45,440
in c plus plus

00:03:42,319 --> 00:03:46,319
uh which then starts the http server

00:03:45,440 --> 00:03:50,480
where you can

00:03:46,319 --> 00:03:53,840
send the request and operate on the ui

00:03:50,480 --> 00:03:56,000
and then in this library we will just

00:03:53,840 --> 00:03:57,360
generate event to simulate the user

00:03:56,000 --> 00:04:00,720
input so

00:03:57,360 --> 00:04:01,599
it also includes some of the um flows

00:04:00,720 --> 00:04:04,799
like uh

00:04:01,599 --> 00:04:06,080
that's um as many of those frameworks do

00:04:04,799 --> 00:04:09,040
that

00:04:06,080 --> 00:04:10,319
originally you can also operate on some

00:04:09,040 --> 00:04:12,879
controls which are

00:04:10,319 --> 00:04:13,599
actually disabled in the code so

00:04:12,879 --> 00:04:15,040
sometimes

00:04:13,599 --> 00:04:17,120
in some cases it provides more

00:04:15,040 --> 00:04:17,919
capabilities than uh the normal user

00:04:17,120 --> 00:04:20,160
would have

00:04:17,919 --> 00:04:22,720
so obviously yeah we still need to cover

00:04:20,160 --> 00:04:25,840
that part uh somewhere else and not to

00:04:22,720 --> 00:04:28,560
miss the regressions in this field um

00:04:25,840 --> 00:04:30,400
so it provides not only the way to

00:04:28,560 --> 00:04:30,720
operate on the controls but also to read

00:04:30,400 --> 00:04:32,639
the

00:04:30,720 --> 00:04:34,639
state of the properties which is uh

00:04:32,639 --> 00:04:36,000
mentor for testing so here you can see

00:04:34,639 --> 00:04:38,639
the example for

00:04:36,000 --> 00:04:39,520
some sample application with this table

00:04:38,639 --> 00:04:43,120
in it

00:04:39,520 --> 00:04:45,440
um so it lists the items um

00:04:43,120 --> 00:04:47,120
which are currently displayed there is

00:04:45,440 --> 00:04:50,320
also like the property

00:04:47,120 --> 00:04:52,080
uh i'm not sure if it's big enough uh

00:04:50,320 --> 00:04:54,560
which shows if the

00:04:52,080 --> 00:04:56,000
um which entry is currently selected so

00:04:54,560 --> 00:04:59,759
you can verify those

00:04:56,000 --> 00:05:03,440
and also operate that we'll

00:04:59,759 --> 00:05:05,440
see later uh so um

00:05:03,440 --> 00:05:06,800
besides the uh server side we also have

00:05:05,440 --> 00:05:09,280
developed the client side

00:05:06,800 --> 00:05:09,919
so to run the uh to write the tests in

00:05:09,280 --> 00:05:13,759
the uh

00:05:09,919 --> 00:05:15,360
our spec um and yeah so we started with

00:05:13,759 --> 00:05:18,320
the ruby uh

00:05:15,360 --> 00:05:19,120
i will mention the 30 steps plan to do

00:05:18,320 --> 00:05:20,960
um

00:05:19,120 --> 00:05:23,120
so yeah we just basically use the

00:05:20,960 --> 00:05:25,440
functionality of their spec

00:05:23,120 --> 00:05:27,680
and the advantage here that yeah we just

00:05:25,440 --> 00:05:28,880
use the ids of the controls uh you can

00:05:27,680 --> 00:05:31,759
route the test

00:05:28,880 --> 00:05:32,240
uh besides some small exceptions uh your

00:05:31,759 --> 00:05:35,039
tests

00:05:32,240 --> 00:05:35,759
uh can be run executed in qt and n

00:05:35,039 --> 00:05:39,199
courses so

00:05:35,759 --> 00:05:42,400
you basically can test both things um

00:05:39,199 --> 00:05:44,080
at the same time without no extra codes

00:05:42,400 --> 00:05:47,520
for development

00:05:44,080 --> 00:05:50,800
um so yeah let me just demo

00:05:47,520 --> 00:05:53,360
um briefly what do we have so i've

00:05:50,800 --> 00:05:54,160
written small tests um to just

00:05:53,360 --> 00:05:56,639
demonstrate the

00:05:54,160 --> 00:05:58,639
capabilities so there are some yeah it's

00:05:56,639 --> 00:06:00,479
not ideal test

00:05:58,639 --> 00:06:02,720
so we have the uh yes module which

00:06:00,479 --> 00:06:05,520
basically just um

00:06:02,720 --> 00:06:07,360
demonstrates the content of the etc and

00:06:05,520 --> 00:06:10,000
allows to edit it

00:06:07,360 --> 00:06:11,360
and there are three uh tests and one

00:06:10,000 --> 00:06:14,560
just verifies that there is

00:06:11,360 --> 00:06:17,360
a local host entry with the loopback

00:06:14,560 --> 00:06:20,720
interface ip address

00:06:17,360 --> 00:06:22,960
and the one which adds the new entry and

00:06:20,720 --> 00:06:25,199
then the one which deletes it so we just

00:06:22,960 --> 00:06:26,319
can execute the status i've introduced

00:06:25,199 --> 00:06:29,360
some um

00:06:26,319 --> 00:06:31,600
slips into um

00:06:29,360 --> 00:06:33,520
so that we can uh see that because

00:06:31,600 --> 00:06:35,360
otherwise it would run really fast so

00:06:33,520 --> 00:06:38,479
you can see that yeah we have entered

00:06:35,360 --> 00:06:41,199
the entrance here uh in this

00:06:38,479 --> 00:06:42,560
text fields then we press ok so then re

00:06:41,199 --> 00:06:44,560
appeared here

00:06:42,560 --> 00:06:46,960
uh then yeah we'll just press the delete

00:06:44,560 --> 00:06:50,080
button and then close the application

00:06:46,960 --> 00:06:52,720
um and then uh we basically can do

00:06:50,080 --> 00:06:54,400
uh the running and courses by just uh

00:06:52,720 --> 00:06:56,160
starting it

00:06:54,400 --> 00:06:57,919
there are like tricky parts and in

00:06:56,160 --> 00:06:59,039
wrapping it so in case there are

00:06:57,919 --> 00:07:01,680
questions

00:06:59,039 --> 00:07:03,039
uh i can answer more details about this

00:07:01,680 --> 00:07:07,360
um

00:07:03,039 --> 00:07:10,080
and uh yeah as always during the

00:07:07,360 --> 00:07:10,960
presentation something didn't work um

00:07:10,080 --> 00:07:13,599
yeah and basically

00:07:10,960 --> 00:07:14,319
we can run the same application in uh n

00:07:13,599 --> 00:07:17,680
courses

00:07:14,319 --> 00:07:21,280
uh the same testing and courses

00:07:17,680 --> 00:07:24,240
and they do do the same test um

00:07:21,280 --> 00:07:24,639
right so uh for the 30 steps i will

00:07:24,240 --> 00:07:26,080
start

00:07:24,639 --> 00:07:28,240
yeah there are a lot of things to

00:07:26,080 --> 00:07:30,560
develop so basically uh we want

00:07:28,240 --> 00:07:32,160
is to start benefiting from uh this

00:07:30,560 --> 00:07:35,360
framework already now

00:07:32,160 --> 00:07:37,280
um so we have um quite some

00:07:35,360 --> 00:07:39,039
items to to implement including the

00:07:37,280 --> 00:07:42,319
support of https

00:07:39,039 --> 00:07:43,360
and uh also as the in open k our tests

00:07:42,319 --> 00:07:46,240
are mainly written

00:07:43,360 --> 00:07:46,960
in perl we develop we plan to develop

00:07:46,240 --> 00:07:50,080
also the

00:07:46,960 --> 00:07:51,520
uh perl module for the client side

00:07:50,080 --> 00:07:55,120
support

00:07:51,520 --> 00:07:57,120
um so yeah i've added some references

00:07:55,120 --> 00:07:58,319
in case you're interested because we aim

00:07:57,120 --> 00:07:59,919
here else to

00:07:58,319 --> 00:08:01,199
advertise a bit of this framework and if

00:07:59,919 --> 00:08:02,319
there will be some open source

00:08:01,199 --> 00:08:05,520
communities around it

00:08:02,319 --> 00:08:08,720
uh that will be really um

00:08:05,520 --> 00:08:10,879
we'll really appreciate that so yeah

00:08:08,720 --> 00:08:12,240
thank you for your attention so are

00:08:10,879 --> 00:08:15,440
there any questions

00:08:12,240 --> 00:08:17,360
yeah i guess like i'm right on time so

00:08:15,440 --> 00:08:18,720
but there is no other talk afterwards i

00:08:17,360 --> 00:08:19,919
guess maybe we can spend a couple of

00:08:18,720 --> 00:08:21,759
minutes i know

00:08:19,919 --> 00:08:23,680
yeah actually there is yeah we had

00:08:21,759 --> 00:08:26,720
rescheduled service there yeah

00:08:23,680 --> 00:08:28,000
so uh thank you uh if you do have any

00:08:26,720 --> 00:08:31,199
questions um

00:08:28,000 --> 00:08:33,519
uh for radon uh just uh

00:08:31,199 --> 00:08:35,760
probably ping him on telegram uh i

00:08:33,519 --> 00:08:39,200
assume you're on that right

00:08:35,760 --> 00:08:41,680
uh i will join yeah cool

00:08:39,200 --> 00:08:43,360
so and sarah's talk is up next and then

00:08:41,680 --> 00:08:44,959
we'll be right on schedule and we'll

00:08:43,360 --> 00:08:46,959
have like a 15-minute break

00:08:44,959 --> 00:08:48,880
between her talk and the other talk that

00:08:46,959 --> 00:08:52,240
would i believe start

00:08:48,880 --> 00:08:55,680
so yeah sound good

00:08:52,240 --> 00:08:57,360
can you go ahead and uh right on the

00:08:55,680 --> 00:09:00,640
stop sharing your screen and sarah could

00:08:57,360 --> 00:09:00,640

YouTube URL: https://www.youtube.com/watch?v=bc2sjnwRSCI


