Title: Getting started with Podman
Publication date: 2020-11-06
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Learn about containers & what they are made of... 



Podman is an open source container management tool that allows the creation and management of OCI compliant containers. In this presentation, we will cover quick basics of containers, get an overview of the building blocks (e.g Linux namespaces), look at the OCI Image Manifest Specification and conclude by looking at a few Podman commands that will enable us to build & run containers.

The presentation will be an improvement over the previous presentation which I did for the openSUSE Asia Summit about openSUSE MicroOS - Managing Pods & Containers. It will borrow some ideas from the previous presentation and then build up on those for users to have a better understanding on how containers are able to do the magic that they do.



Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,000 --> 00:00:03,520
so how do we do that

00:00:08,720 --> 00:00:11,519
okay

00:00:12,639 --> 00:00:16,480
all right guys uh can you confirm that

00:00:14,400 --> 00:00:20,720
my screen is fine can you see

00:00:16,480 --> 00:00:23,279
the slide yeah quite fine okay so okay

00:00:20,720 --> 00:00:24,640
so i'm right on time so i'm not gonna

00:00:23,279 --> 00:00:27,199
waste

00:00:24,640 --> 00:00:27,920
any more minute and i'm gonna start so

00:00:27,199 --> 00:00:31,039
once again

00:00:27,920 --> 00:00:34,239
uh good afternoon everybody my name is

00:00:31,039 --> 00:00:35,760
sukhan i'm from mauritius i work in the

00:00:34,239 --> 00:00:39,280
media company here

00:00:35,760 --> 00:00:40,480
and i must say this is my third time

00:00:39,280 --> 00:00:43,520
doing a presentation

00:00:40,480 --> 00:00:45,360
in opensuse conference and the first

00:00:43,520 --> 00:00:48,079
time doing a presentation

00:00:45,360 --> 00:00:48,879
uh at a liberal office uh conference so

00:00:48,079 --> 00:00:52,239
uh just

00:00:48,879 --> 00:00:54,000
be patient with me so yeah uh

00:00:52,239 --> 00:00:55,520
this presentation is going to be about

00:00:54,000 --> 00:00:58,239
uh about podman

00:00:55,520 --> 00:00:58,960
but it's gonna be very introductory

00:00:58,239 --> 00:01:01,920
level

00:00:58,960 --> 00:01:03,280
uh so if somebody knows nothing about uh

00:01:01,920 --> 00:01:05,760
containers

00:01:03,280 --> 00:01:07,680
this is the place to be uh because

00:01:05,760 --> 00:01:09,360
that's what we're gonna look at and then

00:01:07,680 --> 00:01:11,600
we're gonna head towards so

00:01:09,360 --> 00:01:11,600
uh

00:01:14,250 --> 00:01:19,680
[Music]

00:01:16,479 --> 00:01:20,720
containers i usually tell people that

00:01:19,680 --> 00:01:23,439
before

00:01:20,720 --> 00:01:25,040
you start learning about computers start

00:01:23,439 --> 00:01:27,600
learning about

00:01:25,040 --> 00:01:29,360
container management be it with a

00:01:27,600 --> 00:01:32,159
birdman with docker or any other

00:01:29,360 --> 00:01:32,159
container engine

00:01:32,720 --> 00:01:37,680
do something go ahead and read about

00:01:36,240 --> 00:01:41,040
linux namespaces

00:01:37,680 --> 00:01:44,000
because these are the building blocks of

00:01:41,040 --> 00:01:45,119
containers if you really want to be

00:01:44,000 --> 00:01:46,640
comfortable

00:01:45,119 --> 00:01:48,720
understanding containers how they

00:01:46,640 --> 00:01:52,079
perform what they are made of

00:01:48,720 --> 00:01:52,960
then do you find uh something to read

00:01:52,079 --> 00:01:54,640
about

00:01:52,960 --> 00:01:56,399
from the internet there are plenty of

00:01:54,640 --> 00:01:58,079
documentation online

00:01:56,399 --> 00:01:59,759
but uh in this presentation in a

00:01:58,079 --> 00:02:03,119
nutshell what i'm going to

00:01:59,759 --> 00:02:06,079
show is that um uh if you go

00:02:03,119 --> 00:02:08,000
about it to find linux namespaces there

00:02:06,079 --> 00:02:08,720
are basically eight namespaces that you

00:02:08,000 --> 00:02:11,120
need to know

00:02:08,720 --> 00:02:12,879
well in total there are eight namespaces

00:02:11,120 --> 00:02:17,360
and that's all that you need to know

00:02:12,879 --> 00:02:20,720
and what are namespaces uh well uh

00:02:17,360 --> 00:02:22,879
again in a nutshell uh these namespaces

00:02:20,720 --> 00:02:25,520
allow the segregation of resources

00:02:22,879 --> 00:02:28,160
that is resources such as cpu memory

00:02:25,520 --> 00:02:31,280
file system etc

00:02:28,160 --> 00:02:34,319
they are segregated in such a way

00:02:31,280 --> 00:02:35,200
that some process can see a certain set

00:02:34,319 --> 00:02:37,599
of resources

00:02:35,200 --> 00:02:38,400
and others cannot and if you want to

00:02:37,599 --> 00:02:40,319
play around

00:02:38,400 --> 00:02:42,720
or just look at this slide on the bottom

00:02:40,319 --> 00:02:45,840
left there's a linux command called

00:02:42,720 --> 00:02:46,239
unshare read about it and you can use it

00:02:45,840 --> 00:02:49,360
to

00:02:46,239 --> 00:02:52,239
it's a small program

00:02:49,360 --> 00:02:52,640
which allows you to separate namespaces

00:02:52,239 --> 00:02:54,400
uh

00:02:52,640 --> 00:02:56,239
to run a program with a separate

00:02:54,400 --> 00:02:59,599
namespaces a namespace

00:02:56,239 --> 00:03:01,440
than its parent uh

00:02:59,599 --> 00:03:03,200
staying on the topic of namespaces

00:03:01,440 --> 00:03:04,080
there's one more command that i would

00:03:03,200 --> 00:03:06,720
like to share with you

00:03:04,080 --> 00:03:08,720
and it is lsns so you have your running

00:03:06,720 --> 00:03:11,599
linux system right now you do not have

00:03:08,720 --> 00:03:12,800
uh any container engine running but you

00:03:11,599 --> 00:03:14,560
want to learn about

00:03:12,800 --> 00:03:16,560
namespaces how they function what they

00:03:14,560 --> 00:03:19,360
do or

00:03:16,560 --> 00:03:20,239
all you have to do just type lsns and

00:03:19,360 --> 00:03:23,920
you will find

00:03:20,239 --> 00:03:27,120
the list of all the current

00:03:23,920 --> 00:03:30,239
currently available namespace on your

00:03:27,120 --> 00:03:32,480
system okay this is just a brave

00:03:30,239 --> 00:03:33,360
so you will find plenty of documentation

00:03:32,480 --> 00:03:36,720
talking about

00:03:33,360 --> 00:03:38,560
about name spaces uh read

00:03:36,720 --> 00:03:41,680
and then you will be ready for your

00:03:38,560 --> 00:03:43,680
adventure about containers

00:03:41,680 --> 00:03:46,159
so yes when your container when your

00:03:43,680 --> 00:03:46,959
adventure starts with containers uh you

00:03:46,159 --> 00:03:49,680
will find

00:03:46,959 --> 00:03:51,760
that there are plenty of container and

00:03:49,680 --> 00:03:53,920
times container engines out there

00:03:51,760 --> 00:03:55,680
you will hear about container d about

00:03:53,920 --> 00:03:59,040
docker about casa containers

00:03:55,680 --> 00:04:02,000
lx lx3 many more

00:03:59,040 --> 00:04:03,280
and now with uh with the hype of

00:04:02,000 --> 00:04:05,840
kubernetes it

00:04:03,280 --> 00:04:06,799
has become even more complex for

00:04:05,840 --> 00:04:10,159
somebody to just

00:04:06,799 --> 00:04:12,480
start using containers and see all the

00:04:10,159 --> 00:04:13,599
complex things uh that people are doing

00:04:12,480 --> 00:04:16,720
with that

00:04:13,599 --> 00:04:18,959
so the list here is not enough

00:04:16,720 --> 00:04:20,560
is in alphabetical order it's not in

00:04:18,959 --> 00:04:23,199
private priority order

00:04:20,560 --> 00:04:24,080
so just go around uh do some googling

00:04:23,199 --> 00:04:28,720
and

00:04:24,080 --> 00:04:30,560
yeah read about them uh again before we

00:04:28,720 --> 00:04:31,360
come to padman i would like to talk to

00:04:30,560 --> 00:04:35,680
you

00:04:31,360 --> 00:04:38,800
about uh what a container is made of

00:04:35,680 --> 00:04:40,479
so uh when i usually talk to two people

00:04:38,800 --> 00:04:43,040
especially developers

00:04:40,479 --> 00:04:44,960
uh i come from a systematic background

00:04:43,040 --> 00:04:45,840
so i have the tendency to try to

00:04:44,960 --> 00:04:48,160
understand

00:04:45,840 --> 00:04:49,840
how something works rather than just you

00:04:48,160 --> 00:04:52,160
know typing a command and it works and

00:04:49,840 --> 00:04:54,720
i'm i clap my hands and say hey it works

00:04:52,160 --> 00:04:55,680
no i try to understand how it works so

00:04:54,720 --> 00:04:59,120
before you start

00:04:55,680 --> 00:05:02,000
using containers it's very good uh

00:04:59,120 --> 00:05:02,960
to do some background research to do

00:05:02,000 --> 00:05:04,639
some reading

00:05:02,960 --> 00:05:06,080
and some experiments to understand what

00:05:04,639 --> 00:05:09,759
a container is made of

00:05:06,080 --> 00:05:13,039
so here i show i shared with you

00:05:09,759 --> 00:05:15,759
a small uh program called scorpio

00:05:13,039 --> 00:05:16,800
uh which is very handy if you wanna if

00:05:15,759 --> 00:05:19,840
you wanna really

00:05:16,800 --> 00:05:23,199
look inside and be inside of containers

00:05:19,840 --> 00:05:24,720
so scorpio asks you to inspect a remote

00:05:23,199 --> 00:05:27,440
container

00:05:24,720 --> 00:05:29,919
a remote container image sorry uh late

00:05:27,440 --> 00:05:31,919
in the slides we will we will see about

00:05:29,919 --> 00:05:33,840
what is the meaning of a local image

00:05:31,919 --> 00:05:36,000
registry and what a remote registry

00:05:33,840 --> 00:05:38,560
right now just understand that uh if

00:05:36,000 --> 00:05:41,360
somebody says hey okay uh

00:05:38,560 --> 00:05:43,520
pull uh an open suse leap containing

00:05:41,360 --> 00:05:45,039
image on your system and run a container

00:05:43,520 --> 00:05:48,240
but before doing that you wanna you

00:05:45,039 --> 00:05:49,680
wanna look uh you wanna know

00:05:48,240 --> 00:05:51,840
you wanna find more information about

00:05:49,680 --> 00:05:52,880
the container you can use the scorpio

00:05:51,840 --> 00:05:55,520
inspect command

00:05:52,880 --> 00:05:57,440
so uh style is like this you type

00:05:55,520 --> 00:05:59,199
scorpio you start inspect

00:05:57,440 --> 00:06:01,520
you type docker because here docker's

00:05:59,199 --> 00:06:05,680
not the program but it's the transport

00:06:01,520 --> 00:06:08,880
so uh it's a docker and then you specify

00:06:05,680 --> 00:06:11,039
the path of the uh

00:06:08,880 --> 00:06:12,160
container image in this case opensuse

00:06:11,039 --> 00:06:15,280
delete

00:06:12,160 --> 00:06:16,720
is the buff on docker dot io slash open

00:06:15,280 --> 00:06:19,199
sources lastly

00:06:16,720 --> 00:06:21,039
uh well again i might sound a bit

00:06:19,199 --> 00:06:22,880
confusing when i'm saying this but in

00:06:21,039 --> 00:06:24,080
the later slides you will find that this

00:06:22,880 --> 00:06:26,960
is

00:06:24,080 --> 00:06:29,039
something really easy to understand so

00:06:26,960 --> 00:06:32,160
when you you inspect

00:06:29,039 --> 00:06:34,240
let me just pull okay

00:06:32,160 --> 00:06:36,240
i just hope that you can see this as

00:06:34,240 --> 00:06:38,639
well and it's not very small

00:06:36,240 --> 00:06:39,280
so i'm gonna make it a bit big all right

00:06:38,639 --> 00:06:41,360
so

00:06:39,280 --> 00:06:42,880
let us see what happens if you do this

00:06:41,360 --> 00:06:46,720
uh okay

00:06:42,880 --> 00:06:47,199
you docker you say open chooser and you

00:06:46,720 --> 00:06:51,360
say

00:06:47,199 --> 00:06:52,880
lay so if my internet connection is good

00:06:51,360 --> 00:06:57,680
you should get the

00:06:52,880 --> 00:06:57,680
details in just a few seconds

00:06:58,560 --> 00:07:02,639
okay so this is the kind of information

00:07:01,199 --> 00:07:04,960
that you get you will find

00:07:02,639 --> 00:07:07,199
all the repo tags uh so all the

00:07:04,960 --> 00:07:10,080
different uh

00:07:07,199 --> 00:07:12,080
versions of this container image

00:07:10,080 --> 00:07:15,680
available

00:07:12,080 --> 00:07:18,639
that are your open source leave and

00:07:15,680 --> 00:07:19,440
if you do not ever specify the version

00:07:18,639 --> 00:07:22,560
by default

00:07:19,440 --> 00:07:23,360
it will sorry by default it will use the

00:07:22,560 --> 00:07:26,400
latest start

00:07:23,360 --> 00:07:29,360
like you can see here so

00:07:26,400 --> 00:07:30,000
how do you use scorpio to dig into a

00:07:29,360 --> 00:07:32,319
container

00:07:30,000 --> 00:07:33,199
image all right the next three commands

00:07:32,319 --> 00:07:35,599
of

00:07:33,199 --> 00:07:36,960
how we're going to do it first let's say

00:07:35,599 --> 00:07:40,080
we want to dig into

00:07:36,960 --> 00:07:43,360
the nginx uh container image so

00:07:40,080 --> 00:07:46,240
we create a directory call it nginx

00:07:43,360 --> 00:07:47,759
we use scorpio and we say copy so it's

00:07:46,240 --> 00:07:51,360
going to copy the remote

00:07:47,759 --> 00:07:53,840
container image into the directory nginx

00:07:51,360 --> 00:07:56,160
next we just type simple command 3 nginx

00:07:53,840 --> 00:07:59,840
to see

00:07:56,160 --> 00:08:01,919
how it is organized uh inside

00:07:59,840 --> 00:08:04,319
so here we see a bunch of long

00:08:01,919 --> 00:08:07,680
characters not knowing what they are

00:08:04,319 --> 00:08:10,160
actually each of these lines here are

00:08:07,680 --> 00:08:11,039
compressed layers and each of these

00:08:10,160 --> 00:08:15,919
layers

00:08:11,039 --> 00:08:20,080
contain several files and directories

00:08:15,919 --> 00:08:20,639
inside of them so use the below commands

00:08:20,080 --> 00:08:23,039
and

00:08:20,639 --> 00:08:24,400
decompress the different layers and peek

00:08:23,039 --> 00:08:26,639
ins inside of that

00:08:24,400 --> 00:08:28,560
you you you will be surprised to see

00:08:26,639 --> 00:08:31,199
that a container image

00:08:28,560 --> 00:08:32,800
is nothing more than just a bunch of

00:08:31,199 --> 00:08:35,039
directories and files

00:08:32,800 --> 00:08:36,560
but those files and directories are

00:08:35,039 --> 00:08:39,680
going to be very similar

00:08:36,560 --> 00:08:42,399
uh going to be very familiar to you

00:08:39,680 --> 00:08:44,080
if you're used to linux systems uh if

00:08:42,399 --> 00:08:46,000
you're used to the linux file system

00:08:44,080 --> 00:08:47,920
hierarchy standard

00:08:46,000 --> 00:08:49,200
so this is a little experiment that i

00:08:47,920 --> 00:08:53,600
will advise you to do

00:08:49,200 --> 00:08:55,519
and uh now let us come to birdman

00:08:53,600 --> 00:08:57,440
so after your experiments now that you

00:08:55,519 --> 00:09:00,320
know what a container is made of

00:08:57,440 --> 00:09:01,440
what are linux name spaces how the magic

00:09:00,320 --> 00:09:03,360
of containers happen

00:09:01,440 --> 00:09:04,959
that is using a bunch of directories and

00:09:03,360 --> 00:09:08,959
files and

00:09:04,959 --> 00:09:12,640
namespaces containers or boards

00:09:08,959 --> 00:09:16,240
so in the earlier uh slide we saw that

00:09:12,640 --> 00:09:18,320
there are a lot of a few dozens of

00:09:16,240 --> 00:09:19,200
container engines and container enzymes

00:09:18,320 --> 00:09:22,480
that will allow

00:09:19,200 --> 00:09:24,480
you to to create run

00:09:22,480 --> 00:09:25,519
and manage containers podman is one of

00:09:24,480 --> 00:09:29,200
them

00:09:25,519 --> 00:09:31,360
and um in the bottom you will see two

00:09:29,200 --> 00:09:32,240
commands here the first one is very

00:09:31,360 --> 00:09:36,000
simple

00:09:32,240 --> 00:09:38,800
i'm just using podman to run uh an nginx

00:09:36,000 --> 00:09:40,080
container and here i'm doing very

00:09:38,800 --> 00:09:44,080
something very simple

00:09:40,080 --> 00:09:46,880
so i say run if the if there is no

00:09:44,080 --> 00:09:48,880
nginx container image on my system what

00:09:46,880 --> 00:09:49,600
birdman is going to do it is going to

00:09:48,880 --> 00:09:52,320
query

00:09:49,600 --> 00:09:53,680
my container registry which is defined

00:09:52,320 --> 00:09:55,519
in a configuration file

00:09:53,680 --> 00:09:57,519
and then it will say hey i need the

00:09:55,519 --> 00:09:59,600
latest uh

00:09:57,519 --> 00:10:00,640
container image of nginx and it's gonna

00:09:59,600 --> 00:10:04,399
pull it

00:10:00,640 --> 00:10:07,920
and here it's gonna run it and expose uh

00:10:04,399 --> 00:10:08,640
the containers port 80 to my local

00:10:07,920 --> 00:10:12,000
systems

00:10:08,640 --> 00:10:14,000
8080 uh port

00:10:12,000 --> 00:10:15,839
and when it's running you you won't say

00:10:14,000 --> 00:10:17,519
anything on your terminal it will just

00:10:15,839 --> 00:10:21,120
give you the prompt again because

00:10:17,519 --> 00:10:22,880
i've said uh i i've put minus d

00:10:21,120 --> 00:10:24,240
there minus the means to run the

00:10:22,880 --> 00:10:26,800
container in a detached mode

00:10:24,240 --> 00:10:28,079
which means once the cont the command

00:10:26,800 --> 00:10:30,560
completes successfully

00:10:28,079 --> 00:10:33,040
it's gonna return to the prompt so then

00:10:30,560 --> 00:10:34,880
i can just recall localhost 8080 and i

00:10:33,040 --> 00:10:37,120
will see the html

00:10:34,880 --> 00:10:38,399
code from the default static page of

00:10:37,120 --> 00:10:41,519
nginx so

00:10:38,399 --> 00:10:44,160
very basic people who are from a docker

00:10:41,519 --> 00:10:45,279
background uh might find these options

00:10:44,160 --> 00:10:49,200
and flags uh

00:10:45,279 --> 00:10:51,680
very similar uh very common

00:10:49,200 --> 00:10:53,519
all right so where does padman is still

00:10:51,680 --> 00:10:55,519
information this is a very handy command

00:10:53,519 --> 00:10:56,160
to start putman info and you will get a

00:10:55,519 --> 00:10:59,600
bunch of

00:10:56,160 --> 00:11:00,800
uh information where are the storage

00:10:59,600 --> 00:11:02,399
configuration

00:11:00,800 --> 00:11:04,399
where are the files of the different

00:11:02,399 --> 00:11:04,959
containers stored like uh on the right

00:11:04,399 --> 00:11:06,959
side and

00:11:04,959 --> 00:11:08,959
screenshot you can see and the last line

00:11:06,959 --> 00:11:11,600
is volume path so this is where

00:11:08,959 --> 00:11:12,800
if you're going to do put mine you're

00:11:11,600 --> 00:11:14,480
going to create a volume

00:11:12,800 --> 00:11:16,240
so this is where the volumes are going

00:11:14,480 --> 00:11:19,760
to be stored so

00:11:16,240 --> 00:11:23,519
this is a very handy one and uh

00:11:19,760 --> 00:11:25,600
now coming back to to what i was saying

00:11:23,519 --> 00:11:27,040
about container image registries

00:11:25,600 --> 00:11:28,880
so if you are running pokemon for the

00:11:27,040 --> 00:11:29,600
first time it's gonna check on your

00:11:28,880 --> 00:11:32,320
system

00:11:29,600 --> 00:11:34,160
whether a container images exist for

00:11:32,320 --> 00:11:35,440
example if i'm running nginx it's gonna

00:11:34,160 --> 00:11:38,560
check

00:11:35,440 --> 00:11:42,000
do i have the nginx image

00:11:38,560 --> 00:11:43,200
on my local repository if i do not i'm

00:11:42,000 --> 00:11:46,240
going to contact

00:11:43,200 --> 00:11:46,240
a remote

00:11:46,800 --> 00:11:51,600
regis registry and see whether they have

00:11:49,920 --> 00:11:54,720
the images

00:11:51,600 --> 00:11:56,959
so where do we define these registries

00:11:54,720 --> 00:11:58,320
you go into etc or containers

00:11:56,959 --> 00:12:00,680
registries.com

00:11:58,320 --> 00:12:02,160
you find the line where it is it says

00:12:00,680 --> 00:12:04,480
registries.search

00:12:02,160 --> 00:12:06,480
there you are you have registries equal

00:12:04,480 --> 00:12:07,680
to and between the square brackets you

00:12:06,480 --> 00:12:10,079
are going to define

00:12:07,680 --> 00:12:10,880
all the remote registries that you want

00:12:10,079 --> 00:12:13,680
to query

00:12:10,880 --> 00:12:14,720
whenever you type birdman search but man

00:12:13,680 --> 00:12:18,079
run open

00:12:14,720 --> 00:12:20,240
pull like you see here if we do a run

00:12:18,079 --> 00:12:22,320
it's it's going to pull the image and

00:12:20,240 --> 00:12:25,279
then create a container from that

00:12:22,320 --> 00:12:25,680
if you do upload for example next cloud

00:12:25,279 --> 00:12:27,600
it's

00:12:25,680 --> 00:12:29,279
uh first it's going to check whether

00:12:27,600 --> 00:12:31,000
there is a next cloud

00:12:29,279 --> 00:12:32,639
or container image on

00:12:31,000 --> 00:12:34,320
registry.opensuse.org

00:12:32,639 --> 00:12:35,839
if not then it's going to query

00:12:34,320 --> 00:12:38,480
docker.io and see

00:12:35,839 --> 00:12:39,360
whether there is an xcloud container

00:12:38,480 --> 00:12:41,600
image there

00:12:39,360 --> 00:12:42,560
and it's going to pull it now that you

00:12:41,600 --> 00:12:45,440
have pulled to

00:12:42,560 --> 00:12:46,160
your images you want to see the list of

00:12:45,440 --> 00:12:48,480
images

00:12:46,160 --> 00:12:49,360
in your local registry you just have to

00:12:48,480 --> 00:12:53,279
type

00:12:49,360 --> 00:12:56,399
admin images very simple okay

00:12:53,279 --> 00:12:58,240
uh a few more things about image

00:12:56,399 --> 00:13:01,440
registries is that

00:12:58,240 --> 00:13:04,240
earlier i said that when you're

00:13:01,440 --> 00:13:05,519
pulling an image you can if you do not

00:13:04,240 --> 00:13:08,639
specify

00:13:05,519 --> 00:13:10,639
the registry it's gonna check one by one

00:13:08,639 --> 00:13:12,079
depending on how you have defined your

00:13:10,639 --> 00:13:14,720
registries here

00:13:12,079 --> 00:13:16,800
or else you can in your command itself

00:13:14,720 --> 00:13:19,440
you can specify the name of the registry

00:13:16,800 --> 00:13:22,880
in this case it's registry.opensuse.org

00:13:19,440 --> 00:13:25,360
and i'm specifying which uh version

00:13:22,880 --> 00:13:26,959
of the container image to pull in this

00:13:25,360 --> 00:13:28,800
case if i do not put in

00:13:26,959 --> 00:13:30,160
if i do not put anything by default it's

00:13:28,800 --> 00:13:33,279
gonna use latest

00:13:30,160 --> 00:13:36,399
or else like we saw uh

00:13:33,279 --> 00:13:39,839
oh sorry uh that was here

00:13:36,399 --> 00:13:40,560
like we saw if i use scorpio i inspect

00:13:39,839 --> 00:13:43,279
the image

00:13:40,560 --> 00:13:43,839
i can see all the ripple charts and then

00:13:43,279 --> 00:13:46,560
uh

00:13:43,839 --> 00:13:47,680
whenever i'm pulling the image i can

00:13:46,560 --> 00:13:49,600
specify like

00:13:47,680 --> 00:13:51,680
like here in the nginx i can give the

00:13:49,600 --> 00:13:52,800
definition uh sorry another definition i

00:13:51,680 --> 00:13:55,120
can specify

00:13:52,800 --> 00:13:56,000
the tag from the information that i

00:13:55,120 --> 00:13:59,360
found using

00:13:56,000 --> 00:14:02,639
scopu all right uh

00:13:59,360 --> 00:14:05,279
well the last line was just about that

00:14:02,639 --> 00:14:06,399
okay these are common uh some common

00:14:05,279 --> 00:14:10,240
options and flags

00:14:06,399 --> 00:14:13,519
uh whenever you want to run uh

00:14:10,240 --> 00:14:17,600
a container and you want to mount

00:14:13,519 --> 00:14:20,079
a volume and i'm looking at the time at

00:14:17,600 --> 00:14:21,600
the same time

00:14:20,079 --> 00:14:24,240
i've already used 15 minutes so i'm

00:14:21,600 --> 00:14:26,880
gonna go pretty quick on this one

00:14:24,240 --> 00:14:28,880
so anyway i'm going to share the slides

00:14:26,880 --> 00:14:32,079
so you guys can have a look at this

00:14:28,880 --> 00:14:34,240
so you will notice that the point one

00:14:32,079 --> 00:14:35,440
options and flags are pretty similar to

00:14:34,240 --> 00:14:39,440
what we have

00:14:35,440 --> 00:14:42,560
uh with docker and

00:14:39,440 --> 00:14:45,120
a bunch of more information here which

00:14:42,560 --> 00:14:49,040
is very easy to find if you do put man

00:14:45,120 --> 00:14:52,079
help uh what i'm going to to very

00:14:49,040 --> 00:14:55,120
quickly go about is understanding pods

00:14:52,079 --> 00:14:57,199
so yes the good feature about pods

00:14:55,120 --> 00:14:59,040
uh about third man which you won't find

00:14:57,199 --> 00:15:01,680
in docker is this

00:14:59,040 --> 00:15:02,560
uh with uh pokemon you're also able to

00:15:01,680 --> 00:15:06,000
create a pod

00:15:02,560 --> 00:15:09,120
now what is a pod a pod is

00:15:06,000 --> 00:15:12,720
uh you defined

00:15:09,120 --> 00:15:14,880
uh you segregate let's say

00:15:12,720 --> 00:15:16,320
a set of resources and then all the

00:15:14,880 --> 00:15:18,720
containers that you're going

00:15:16,320 --> 00:15:20,800
to create within this pod they're going

00:15:18,720 --> 00:15:24,399
to share the same name space

00:15:20,800 --> 00:15:25,199
so for example uh here i'm creating a

00:15:24,399 --> 00:15:27,360
pod

00:15:25,199 --> 00:15:29,920
and i'm going to name it web app and i'm

00:15:27,360 --> 00:15:32,959
going to expose my port 80

00:15:29,920 --> 00:15:36,399
uh map my port 80 with my

00:15:32,959 --> 00:15:38,079
my host 8080 so

00:15:36,399 --> 00:15:40,079
all the containers that i'm going to

00:15:38,079 --> 00:15:42,720
create in

00:15:40,079 --> 00:15:43,839
inside this pod they will be sharing the

00:15:42,720 --> 00:15:47,600
same

00:15:43,839 --> 00:15:49,759
uh network namespace the same file

00:15:47,600 --> 00:15:52,880
system namespace and everything

00:15:49,759 --> 00:15:53,440
so in the tool the second and third

00:15:52,880 --> 00:15:56,079
command

00:15:53,440 --> 00:15:58,079
you see that i'm running also an nginx

00:15:56,079 --> 00:16:00,560
which will be accessible

00:15:58,079 --> 00:16:02,000
from my host on port 8080 and i'm

00:16:00,560 --> 00:16:04,000
running a mariadb

00:16:02,000 --> 00:16:05,519
now when my engine x let's say i have

00:16:04,000 --> 00:16:07,519
some application running

00:16:05,519 --> 00:16:09,040
in that container and it needs to talk

00:16:07,519 --> 00:16:11,360
to the database

00:16:09,040 --> 00:16:13,360
and my rdb database i don't need to

00:16:11,360 --> 00:16:16,480
communicate with it over

00:16:13,360 --> 00:16:16,959
a a remote ip address or something like

00:16:16,480 --> 00:16:20,000
that

00:16:16,959 --> 00:16:23,120
i can simply call on localhost

00:16:20,000 --> 00:16:25,279
and put 330 of mario

00:16:23,120 --> 00:16:27,279
server and it's going to be accessible

00:16:25,279 --> 00:16:30,560
yes i know you're going to say

00:16:27,279 --> 00:16:34,320
time so right

00:16:30,560 --> 00:16:37,839
i think somebody was talking guys

00:16:34,320 --> 00:16:37,839
did somebody try to stop me

00:16:38,560 --> 00:16:42,160
don't think so okay okay maybe i heard a

00:16:41,759 --> 00:16:45,199
ghost

00:16:42,160 --> 00:16:47,279
you should just write yes

00:16:45,199 --> 00:16:48,320
i i'm wrapping up on on this particular

00:16:47,279 --> 00:16:50,880
slide so

00:16:48,320 --> 00:16:52,560
yeah so this is the one cool feature

00:16:50,880 --> 00:16:54,880
that i was saying that birdman has

00:16:52,560 --> 00:16:55,759
that you won't find with with docker

00:16:54,880 --> 00:16:57,759
unless you're

00:16:55,759 --> 00:16:59,839
trying to use something more complicated

00:16:57,759 --> 00:17:00,880
so you can create a pod you can put as

00:16:59,839 --> 00:17:03,519
many containers

00:17:00,880 --> 00:17:05,439
uh as you need inside that pod and all

00:17:03,519 --> 00:17:06,640
those containers are going to use the

00:17:05,439 --> 00:17:09,679
same

00:17:06,640 --> 00:17:13,120
uh name spaces and it's very secure

00:17:09,679 --> 00:17:15,839
very easy to use so guys like i said uh

00:17:13,120 --> 00:17:16,880
i've crossed my 15 minutes the rest of

00:17:15,839 --> 00:17:18,799
these

00:17:16,880 --> 00:17:20,319
there was nothing much i'm going to

00:17:18,799 --> 00:17:23,679
share uh

00:17:20,319 --> 00:17:24,559
these slides in the chat and if you have

00:17:23,679 --> 00:17:28,640
any questions

00:17:24,559 --> 00:17:30,880
anything uh that you would like to ask

00:17:28,640 --> 00:17:32,480
just leave me a tweet i will leave some

00:17:30,880 --> 00:17:35,360
details in the chat

00:17:32,480 --> 00:17:36,799
thank you very much and keep enjoying

00:17:35,360 --> 00:17:42,880
the first day of

00:17:36,799 --> 00:17:42,880

YouTube URL: https://www.youtube.com/watch?v=FKDmdiGf60Y


