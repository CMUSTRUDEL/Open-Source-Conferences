Title: Open Build Service at Datto   The Good, The Bad and The Ugly
Publication date: 2021-05-07
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,640 --> 00:00:04,480
all right i think i'm ready to start now

00:00:03,120 --> 00:00:06,080
and i think we've given a couple of

00:00:04,480 --> 00:00:07,359
minutes for everyone else to potentially

00:00:06,080 --> 00:00:12,400
show up if they needed to

00:00:07,359 --> 00:00:15,839
so i'm going to well i guess get started

00:00:12,400 --> 00:00:19,279
uh so hello all um

00:00:15,839 --> 00:00:20,880
my name is neil gompa uh and

00:00:19,279 --> 00:00:22,480
i'm here to talk about the good the bad

00:00:20,880 --> 00:00:25,199
and the ugly at datto

00:00:22,480 --> 00:00:26,640
for the open build service of course not

00:00:25,199 --> 00:00:27,599
not at data of the company the open

00:00:26,640 --> 00:00:30,880
build service

00:00:27,599 --> 00:00:33,200
so who am i uh i am what i'd like to

00:00:30,880 --> 00:00:36,000
call myself a professional technologist

00:00:33,200 --> 00:00:37,280
i've been a linux user for over 15 years

00:00:36,000 --> 00:00:39,440
i'm a contributor and developer in

00:00:37,280 --> 00:00:41,760
fedora open souza maggie and open

00:00:39,440 --> 00:00:44,239
mandriva linux distributions

00:00:41,760 --> 00:00:46,239
uh i'm a contributor to rpm dnf and

00:00:44,239 --> 00:00:48,640
various related projects

00:00:46,239 --> 00:00:50,399
uh i'm a devops engineer at datto so

00:00:48,640 --> 00:00:52,800
that's that's typically what i do

00:00:50,399 --> 00:00:54,719
and so a little bit about datto um it

00:00:52,800 --> 00:00:57,680
was founded in 2007

00:00:54,719 --> 00:00:59,120
we have 17 000 plus managed service

00:00:57,680 --> 00:01:02,320
providers we operate

00:00:59,120 --> 00:01:04,400
in what's known as the chat the um the

00:01:02,320 --> 00:01:06,080
managed service provider channel so we

00:01:04,400 --> 00:01:07,520
don't sell directly we sell to

00:01:06,080 --> 00:01:09,280
other companies that then turn and

00:01:07,520 --> 00:01:12,400
resell our services

00:01:09,280 --> 00:01:14,000
um to their clients customers we have 23

00:01:12,400 --> 00:01:17,520
offices around the world

00:01:14,000 --> 00:01:20,560
and we're you know we're 1800

00:01:17,520 --> 00:01:23,040
strong and growing so

00:01:20,560 --> 00:01:25,119
we offer a wide array of services along

00:01:23,040 --> 00:01:26,400
the lines of unified continuity so

00:01:25,119 --> 00:01:28,880
disaster recovery

00:01:26,400 --> 00:01:31,040
backups restores things like that

00:01:28,880 --> 00:01:33,600
networking infrastructure services

00:01:31,040 --> 00:01:36,240
and products for supporting things like

00:01:33,600 --> 00:01:38,960
small offices and such like that

00:01:36,240 --> 00:01:39,439
file sync and share product and we do a

00:01:38,960 --> 00:01:41,520
lot of

00:01:39,439 --> 00:01:43,119
professional services business

00:01:41,520 --> 00:01:45,040
intelligence and management stuff as

00:01:43,119 --> 00:01:47,759
well as remote machine management

00:01:45,040 --> 00:01:49,360
so what i'm here to talk about is like

00:01:47,759 --> 00:01:51,040
one of our infrastructure services that

00:01:49,360 --> 00:01:52,960
we actually use to support developing

00:01:51,040 --> 00:01:55,040
these products and services which is

00:01:52,960 --> 00:01:56,320
of course the open build service at

00:01:55,040 --> 00:02:00,000
datto

00:01:56,320 --> 00:02:02,719
um so just kind of a super quick

00:02:00,000 --> 00:02:04,960
recap because we don't exactly have all

00:02:02,719 --> 00:02:06,399
the time in the world to talk about it

00:02:04,960 --> 00:02:08,319
so the open build service that data has

00:02:06,399 --> 00:02:09,759
been in service for over five years now

00:02:08,319 --> 00:02:11,440
it's deployed using the official

00:02:09,759 --> 00:02:13,040
appliance provided on the website in an

00:02:11,440 --> 00:02:14,720
all-in-one configuration

00:02:13,040 --> 00:02:16,080
it runs in a virtual machine using

00:02:14,720 --> 00:02:19,040
container build environments

00:02:16,080 --> 00:02:20,959
uh for mostly for efficiency and and

00:02:19,040 --> 00:02:23,360
resource reasons

00:02:20,959 --> 00:02:24,319
most of our software runs on ubuntu so

00:02:23,360 --> 00:02:25,920
we target that

00:02:24,319 --> 00:02:27,760
however we build all of our software

00:02:25,920 --> 00:02:28,720
with rpm spec files using a tool called

00:02:27,760 --> 00:02:31,120
dev build

00:02:28,720 --> 00:02:32,560
and there and the output packages are

00:02:31,120 --> 00:02:35,040
native mostly proper

00:02:32,560 --> 00:02:37,760
debian packages um we're building a

00:02:35,040 --> 00:02:39,920
library of rpm macros to port packages

00:02:37,760 --> 00:02:42,160
from fedora unopensusa

00:02:39,920 --> 00:02:42,959
to debian ubuntu using the dev build

00:02:42,160 --> 00:02:45,200
macros

00:02:42,959 --> 00:02:46,239
uh which is a project that we have where

00:02:45,200 --> 00:02:49,200
we're just

00:02:46,239 --> 00:02:50,480
filling in writing uh macros to support

00:02:49,200 --> 00:02:52,720
the debian way

00:02:50,480 --> 00:02:54,319
while providing the same consistent rpm

00:02:52,720 --> 00:02:56,000
interfaces that are common on rpm

00:02:54,319 --> 00:02:57,680
distributions

00:02:56,000 --> 00:02:59,120
we built the data linux agent which is

00:02:57,680 --> 00:03:02,000
our backup agent for our unified

00:02:59,120 --> 00:03:04,800
continuity products

00:03:02,000 --> 00:03:07,120
so the agent that's used to run back to

00:03:04,800 --> 00:03:10,239
send backups from a particular machine

00:03:07,120 --> 00:03:12,000
to our appliances we've built them for

00:03:10,239 --> 00:03:13,599
over 50 distribution releases across the

00:03:12,000 --> 00:03:15,519
red hat fedora debbie and ubuntu and

00:03:13,599 --> 00:03:17,360
susan families using obs

00:03:15,519 --> 00:03:19,920
we've got quite a bit more info about

00:03:17,360 --> 00:03:22,159
how we do this in our blog post

00:03:19,920 --> 00:03:23,599
and the talk i gave at the open souza

00:03:22,159 --> 00:03:26,000
virtual summit um

00:03:23,599 --> 00:03:27,519
back in may so if you want to check get

00:03:26,000 --> 00:03:28,080
more details about that you can check

00:03:27,519 --> 00:03:30,400
those out

00:03:28,080 --> 00:03:34,080
and and the links are in the slides that

00:03:30,400 --> 00:03:36,720
you know will be published shortly after

00:03:34,080 --> 00:03:38,080
so let's talk a little bit about the

00:03:36,720 --> 00:03:40,720
good that we've had with

00:03:38,080 --> 00:03:41,360
with obs so the open build service has

00:03:40,720 --> 00:03:43,920
actually done

00:03:41,360 --> 00:03:46,239
wonders for us it's made our it's made

00:03:43,920 --> 00:03:48,400
it possible for us to really

00:03:46,239 --> 00:03:49,840
make sure every single piece of software

00:03:48,400 --> 00:03:52,319
that we actually deliver

00:03:49,840 --> 00:03:53,920
um to our internal infrastructure as

00:03:52,319 --> 00:03:56,720
well as to our products

00:03:53,920 --> 00:03:57,920
uh and to the services that we run it

00:03:56,720 --> 00:04:00,159
makes it possible for us to do it

00:03:57,920 --> 00:04:02,799
consistently and reproducibly

00:04:00,159 --> 00:04:04,959
and it's great because like as resources

00:04:02,799 --> 00:04:07,519
grow and we need to actually as

00:04:04,959 --> 00:04:08,319
needs for building out software grows we

00:04:07,519 --> 00:04:10,000
can scale

00:04:08,319 --> 00:04:11,439
the back end through adding additional

00:04:10,000 --> 00:04:13,280
obs workers

00:04:11,439 --> 00:04:15,519
that automatically detect the map the

00:04:13,280 --> 00:04:17,359
orchestrator and auto connect

00:04:15,519 --> 00:04:19,199
um and we don't really have to think a

00:04:17,359 --> 00:04:20,880
whole lot about maintaining the

00:04:19,199 --> 00:04:21,840
consistency of the enti of all the

00:04:20,880 --> 00:04:24,000
packages

00:04:21,840 --> 00:04:25,600
because it automatically tracks all the

00:04:24,000 --> 00:04:27,120
reverse dependencies and rebuilds the

00:04:25,600 --> 00:04:28,720
packages on updates

00:04:27,120 --> 00:04:30,560
to ensure that dependencies are linked

00:04:28,720 --> 00:04:32,240
correctly and

00:04:30,560 --> 00:04:34,400
because it's so easy to deploy and get

00:04:32,240 --> 00:04:36,400
started with pretty much

00:04:34,400 --> 00:04:37,440
you know it's just you know grab and go

00:04:36,400 --> 00:04:39,199
when it comes to the production

00:04:37,440 --> 00:04:41,759
environment but also it means that

00:04:39,199 --> 00:04:42,800
it's really really easy for us to deploy

00:04:41,759 --> 00:04:44,479
staging

00:04:42,800 --> 00:04:46,080
and development environments for us to

00:04:44,479 --> 00:04:48,720
experiment with new features

00:04:46,080 --> 00:04:50,639
and new workflows without impairing the

00:04:48,720 --> 00:04:52,320
production infrastructure which is

00:04:50,639 --> 00:04:54,240
something that's a bit of a rarity these

00:04:52,320 --> 00:04:54,800
days with a lot of different services

00:04:54,240 --> 00:04:57,440
that are

00:04:54,800 --> 00:04:59,120
the people you know push especially in

00:04:57,440 --> 00:05:00,240
this cloud native era where a lot of

00:04:59,120 --> 00:05:03,360
services are just

00:05:00,240 --> 00:05:05,120
uber complicated for not particularly

00:05:03,360 --> 00:05:08,400
great reasons other than

00:05:05,120 --> 00:05:11,120
it makes it look great which okay

00:05:08,400 --> 00:05:13,199
um but it important most importantly

00:05:11,120 --> 00:05:14,800
lets us build packages natively for rpm

00:05:13,199 --> 00:05:15,600
and debian distributions using the rpm

00:05:14,800 --> 00:05:17,440
spec files

00:05:15,600 --> 00:05:18,800
as i said before with dev build and the

00:05:17,440 --> 00:05:21,600
dead build macros

00:05:18,800 --> 00:05:22,080
which anyone can use those are actually

00:05:21,600 --> 00:05:24,160
in

00:05:22,080 --> 00:05:25,280
the open souza build service and anyone

00:05:24,160 --> 00:05:26,800
can

00:05:25,280 --> 00:05:30,320
essentially configure their projects to

00:05:26,800 --> 00:05:32,160
use those for building debian packages

00:05:30,320 --> 00:05:34,240
but it's not all sunshine and rainbows

00:05:32,160 --> 00:05:36,000
unfortunately so there's there is some

00:05:34,240 --> 00:05:37,680
some issues that we've we've had over

00:05:36,000 --> 00:05:40,720
the years and

00:05:37,680 --> 00:05:41,360
frankly this is this has been very

00:05:40,720 --> 00:05:44,160
painful

00:05:41,360 --> 00:05:45,919
so the obs api is mostly undocumented

00:05:44,160 --> 00:05:46,720
and it's extremely difficult to interact

00:05:45,919 --> 00:05:48,400
with

00:05:46,720 --> 00:05:49,759
uh you know in the in the beginning when

00:05:48,400 --> 00:05:51,039
i was first writing a lot of our

00:05:49,759 --> 00:05:53,280
integration

00:05:51,039 --> 00:05:54,320
for the build service into our into our

00:05:53,280 --> 00:05:57,039
infrastructure

00:05:54,320 --> 00:05:58,080
you know i tried to use the api directly

00:05:57,039 --> 00:06:00,560
because you know

00:05:58,080 --> 00:06:02,240
i figured it'd be faster i'd be able to

00:06:00,560 --> 00:06:04,479
get it like more purpose driven and in

00:06:02,240 --> 00:06:09,120
theory it's a published api but

00:06:04,479 --> 00:06:12,400
the problem is that most the api is

00:06:09,120 --> 00:06:15,440
functionally useless the the they do

00:06:12,400 --> 00:06:16,720
exist of course but the documentation is

00:06:15,440 --> 00:06:19,280
either

00:06:16,720 --> 00:06:20,800
empty or very minimal so it doesn't

00:06:19,280 --> 00:06:22,479
really tell you things like

00:06:20,800 --> 00:06:24,639
well how do you use this and what's the

00:06:22,479 --> 00:06:26,560
sequence of api calls

00:06:24,639 --> 00:06:28,319
and things like that in the beginning i

00:06:26,560 --> 00:06:29,759
tried to just kind of reverse engineer

00:06:28,319 --> 00:06:31,199
this by looking at

00:06:29,759 --> 00:06:33,319
you know the interaction flows that are

00:06:31,199 --> 00:06:36,800
done by tools like osc you know running

00:06:33,319 --> 00:06:38,800
osc-d to see all those things

00:06:36,800 --> 00:06:40,800
i gave up after a little while and

00:06:38,800 --> 00:06:43,360
decided that this was not worth the pain

00:06:40,800 --> 00:06:46,960
and agony i was inflicting on myself

00:06:43,360 --> 00:06:48,000
and i wrapped i i instead decided to

00:06:46,960 --> 00:06:51,280
have our tools wrap

00:06:48,000 --> 00:06:54,720
osc itself this is bad

00:06:51,280 --> 00:06:56,560
not great either because um

00:06:54,720 --> 00:06:59,199
it doesn't have a stable api either and

00:06:56,560 --> 00:07:01,280
it has broken us a couple of times as

00:06:59,199 --> 00:07:02,960
new versions have come out like some of

00:07:01,280 --> 00:07:05,120
its behaviors have changed in ways that

00:07:02,960 --> 00:07:08,000
have previously broken our behaviors

00:07:05,120 --> 00:07:10,000
consequently i maintain a few patches on

00:07:08,000 --> 00:07:13,520
top of osc for our use

00:07:10,000 --> 00:07:14,639
so that i don't have to think about this

00:07:13,520 --> 00:07:16,240
problem anymore

00:07:14,639 --> 00:07:17,759
and that our behave the behaviors remain

00:07:16,240 --> 00:07:20,319
consistent um

00:07:17,759 --> 00:07:20,880
it is it is extremely unfortunate but

00:07:20,319 --> 00:07:23,360
that is

00:07:20,880 --> 00:07:25,680
that is unfortunately the way it is and

00:07:23,360 --> 00:07:29,280
like trying to fix these things has

00:07:25,680 --> 00:07:32,639
been um less than ideal because

00:07:29,280 --> 00:07:34,000
uh you know the the the folks

00:07:32,639 --> 00:07:36,000
maintaining osc they do

00:07:34,000 --> 00:07:38,080
they do a lot of work and they try very

00:07:36,000 --> 00:07:38,880
hard but there's only really one and a

00:07:38,080 --> 00:07:41,680
half of them

00:07:38,880 --> 00:07:41,680
and and

00:07:42,080 --> 00:07:46,080
review times aren't that fast and and it

00:07:44,720 --> 00:07:49,120
it makes it

00:07:46,080 --> 00:07:49,520
i i've had to make the hard decision of

00:07:49,120 --> 00:07:52,160
just

00:07:49,520 --> 00:07:53,599
shipping shipping essentially a forked

00:07:52,160 --> 00:07:57,440
version of osc

00:07:53,599 --> 00:07:59,520
to to deal with that problem and

00:07:57,440 --> 00:08:01,039
i wish this was better because i don't

00:07:59,520 --> 00:08:04,319
like having to do that

00:08:01,039 --> 00:08:07,440
um so on the next issue that we

00:08:04,319 --> 00:08:09,120
actually wound up having hit us over and

00:08:07,440 --> 00:08:10,720
over again in the face was that source

00:08:09,120 --> 00:08:13,440
services are unusable

00:08:10,720 --> 00:08:14,720
in a get to obs workflow there's a

00:08:13,440 --> 00:08:15,520
couple of issues with this the most

00:08:14,720 --> 00:08:17,120
serious one

00:08:15,520 --> 00:08:19,680
is that there's no support for get web

00:08:17,120 --> 00:08:22,319
hook data to be used to configure source

00:08:19,680 --> 00:08:26,080
services so

00:08:22,319 --> 00:08:28,080
in in our workflow we actually do

00:08:26,080 --> 00:08:29,360
you know we we maintain all the sources

00:08:28,080 --> 00:08:33,279
in in git

00:08:29,360 --> 00:08:35,200
and you know when a when a

00:08:33,279 --> 00:08:36,959
pull request or a merge request you know

00:08:35,200 --> 00:08:40,159
whatever term you'd like to use

00:08:36,959 --> 00:08:42,959
is is made uh

00:08:40,159 --> 00:08:43,680
it attempts to test all of the changes

00:08:42,959 --> 00:08:46,959
and

00:08:43,680 --> 00:08:49,040
and then once it's merged and tagged

00:08:46,959 --> 00:08:51,279
then we want it to be uh we want it to

00:08:49,040 --> 00:08:54,399
be done on on the build service

00:08:51,279 --> 00:08:56,000
but we can't use we can't use web hooks

00:08:54,399 --> 00:08:59,279
to do this properly

00:08:56,000 --> 00:09:00,000
and consequently we we we've had to do

00:08:59,279 --> 00:09:02,480
some other

00:09:00,000 --> 00:09:04,640
um interesting work arounds which i'll

00:09:02,480 --> 00:09:08,160
get to in a little bit to

00:09:04,640 --> 00:09:11,200
to make that um work at all

00:09:08,160 --> 00:09:12,160
and uh so consequently we just don't use

00:09:11,200 --> 00:09:15,440
serve services

00:09:12,160 --> 00:09:16,080
for much of anything at um in data's obs

00:09:15,440 --> 00:09:18,959
i think we

00:09:16,080 --> 00:09:20,640
we primarily use it for if we've got a

00:09:18,959 --> 00:09:22,560
spec file that we're having a third

00:09:20,640 --> 00:09:24,240
party package um

00:09:22,560 --> 00:09:26,240
we will use the download file source

00:09:24,240 --> 00:09:27,760
service to download this guitar ball

00:09:26,240 --> 00:09:29,279
because it's from the internet and stuff

00:09:27,760 --> 00:09:31,360
and who cares

00:09:29,279 --> 00:09:33,200
uh but beyond that we really don't use

00:09:31,360 --> 00:09:36,240
source services because

00:09:33,200 --> 00:09:39,519
they're just too inflexible

00:09:36,240 --> 00:09:40,880
and too painful um there's something

00:09:39,519 --> 00:09:42,720
that's actually come up a little bit

00:09:40,880 --> 00:09:43,440
more recently like within the last year

00:09:42,720 --> 00:09:45,440
or so

00:09:43,440 --> 00:09:47,040
there's no support for evaluating module

00:09:45,440 --> 00:09:48,959
dependencies for built environments this

00:09:47,040 --> 00:09:51,279
is particularly crucial

00:09:48,959 --> 00:09:53,360
for when we're building for red hat

00:09:51,279 --> 00:09:55,360
distributions such as red hat enterprise

00:09:53,360 --> 00:09:57,920
linux 8 or centos 8.

00:09:55,360 --> 00:10:00,080
um there's a technology called

00:09:57,920 --> 00:10:01,600
application streams or app streams

00:10:00,080 --> 00:10:03,200
you know depending on what you're seeing

00:10:01,600 --> 00:10:04,800
this is based on a technology called

00:10:03,200 --> 00:10:08,480
fedora modularity

00:10:04,800 --> 00:10:11,920
and what this fundamentally is is a

00:10:08,480 --> 00:10:14,959
extra metadata file for rpm repos

00:10:11,920 --> 00:10:18,240
that declares collections

00:10:14,959 --> 00:10:21,120
with filter rules that are that are

00:10:18,240 --> 00:10:22,480
expressed by the package manager to make

00:10:21,120 --> 00:10:24,240
sure that you can have

00:10:22,480 --> 00:10:26,560
multiple sets of packages you know

00:10:24,240 --> 00:10:29,920
essentially using the same name spaces

00:10:26,560 --> 00:10:31,519
but um they the package manager enforces

00:10:29,920 --> 00:10:33,440
that they cannot collide in the sense

00:10:31,519 --> 00:10:36,480
that you can't mix and match

00:10:33,440 --> 00:10:39,680
in um in broken ways

00:10:36,480 --> 00:10:40,800
uh but at the at that metadata level

00:10:39,680 --> 00:10:42,720
there's also a way of saying

00:10:40,800 --> 00:10:44,560
well this module requires the activation

00:10:42,720 --> 00:10:46,079
of this other module and these packages

00:10:44,560 --> 00:10:48,640
inside this module for

00:10:46,079 --> 00:10:50,480
this to work obs does not actually

00:10:48,640 --> 00:10:53,760
support this right now

00:10:50,480 --> 00:10:56,079
for modular repos and so

00:10:53,760 --> 00:10:58,079
you have to manually figure out which

00:10:56,079 --> 00:11:00,079
modules need to be enabled

00:10:58,079 --> 00:11:03,200
and then turn them on one by one until

00:11:00,079 --> 00:11:06,480
you're onto your builds work

00:11:03,200 --> 00:11:09,200
not fun i i have a i'm

00:11:06,480 --> 00:11:10,560
writing small scripts to to essentially

00:11:09,200 --> 00:11:12,720
generate me that list so i can just

00:11:10,560 --> 00:11:16,079
paste it into the project config

00:11:12,720 --> 00:11:19,600
for an obs project but i mean

00:11:16,079 --> 00:11:21,680
at least it can be worked around um

00:11:19,600 --> 00:11:23,600
but the the one that's extremely

00:11:21,680 --> 00:11:25,920
irritating is that there's no support

00:11:23,600 --> 00:11:29,360
for evaluating file dependency properly

00:11:25,920 --> 00:11:31,839
in rpm builds now technically

00:11:29,360 --> 00:11:33,680
obs can do this the the it's not like

00:11:31,839 --> 00:11:36,240
libsall doesn't know how to do it

00:11:33,680 --> 00:11:38,560
um however the build service dependency

00:11:36,240 --> 00:11:42,640
resolver has this completely turned off

00:11:38,560 --> 00:11:44,560
um the reasoning i got a few years ago i

00:11:42,640 --> 00:11:46,640
think it was like two or three years ago

00:11:44,560 --> 00:11:47,600
was that um it would cause memory

00:11:46,640 --> 00:11:52,240
exhaustion

00:11:47,600 --> 00:11:55,839
but i don't know if i believe that um

00:11:52,240 --> 00:11:57,440
so you know for now what it requires is

00:11:55,839 --> 00:12:00,480
that any time i have to encounter

00:11:57,440 --> 00:12:03,200
file dependencies i need to

00:12:00,480 --> 00:12:03,519
manually reap a query them with and and

00:12:03,200 --> 00:12:07,200
then

00:12:03,519 --> 00:12:10,240
fill them in into the project config um

00:12:07,200 --> 00:12:12,720
this is not good this also makes it

00:12:10,240 --> 00:12:14,720
extremely difficult for me to write

00:12:12,720 --> 00:12:16,800
portable packages that actually just

00:12:14,720 --> 00:12:19,360
work across distributions

00:12:16,800 --> 00:12:21,120
we in our packaging style which to some

00:12:19,360 --> 00:12:21,519
degree is derived from fedoras but with

00:12:21,120 --> 00:12:24,000
some

00:12:21,519 --> 00:12:25,920
extra twists here and there we rely on

00:12:24,000 --> 00:12:28,639
file dependencies a lot more

00:12:25,920 --> 00:12:30,240
because then i then it's a lot easier to

00:12:28,639 --> 00:12:31,680
make sure things actually work across

00:12:30,240 --> 00:12:33,120
different distributions

00:12:31,680 --> 00:12:36,079
it's basically the only type of

00:12:33,120 --> 00:12:38,959
dependency rpm has that i can guarantee

00:12:36,079 --> 00:12:40,320
is a usable way to request something or

00:12:38,959 --> 00:12:43,680
request a resource

00:12:40,320 --> 00:12:45,200
at installation time and the fact that

00:12:43,680 --> 00:12:48,240
obs

00:12:45,200 --> 00:12:50,959
really cripples this feature is

00:12:48,240 --> 00:12:52,000
awful unfortunately there's not a whole

00:12:50,959 --> 00:12:54,720
lot that can be done

00:12:52,000 --> 00:12:55,120
to to to deal with that right now but

00:12:54,720 --> 00:12:58,320
that's

00:12:55,120 --> 00:13:00,000
that's that's made some uh that's led

00:12:58,320 --> 00:13:01,200
for some interesting compromises where

00:13:00,000 --> 00:13:03,279
i've i've had to write some

00:13:01,200 --> 00:13:04,639
uh i've had some workflows where i have

00:13:03,279 --> 00:13:05,920
to you know populate these file

00:13:04,639 --> 00:13:07,360
dependencies whenever i discover that

00:13:05,920 --> 00:13:09,600
this is a problem

00:13:07,360 --> 00:13:09,600
um

00:13:11,600 --> 00:13:16,800
now you know that that's

00:13:15,279 --> 00:13:18,320
that's the bad parts but you know

00:13:16,800 --> 00:13:20,000
there's also the the fun

00:13:18,320 --> 00:13:21,600
ugly parts where it's not necessarily

00:13:20,000 --> 00:13:23,600
good and not necessarily bad some of

00:13:21,600 --> 00:13:26,160
it's bad as a consequence of good

00:13:23,600 --> 00:13:27,920
which is weird so that's that's where

00:13:26,160 --> 00:13:31,760
the third category comes from

00:13:27,920 --> 00:13:33,600
so obs is very popular in terms of our

00:13:31,760 --> 00:13:37,120
infrastructure

00:13:33,600 --> 00:13:38,720
at datto and to the point that we now

00:13:37,120 --> 00:13:39,839
have so many requests hitting our api

00:13:38,720 --> 00:13:42,959
servers that we

00:13:39,839 --> 00:13:44,880
for the obs server that we see 503

00:13:42,959 --> 00:13:48,079
requests to the api a lot

00:13:44,880 --> 00:13:51,040
it it happens more than i wish it would

00:13:48,079 --> 00:13:52,959
um more or less on i think like a

00:13:51,040 --> 00:13:56,000
monthly or so basis at least one

00:13:52,959 --> 00:13:58,560
at least that probably more frequently i

00:13:56,000 --> 00:13:59,839
haven't been keeping track explicitly so

00:13:58,560 --> 00:14:03,360
um

00:13:59,839 --> 00:14:04,079
and it's and because of so much api

00:14:03,360 --> 00:14:06,160
demands

00:14:04,079 --> 00:14:07,760
and my inability to find any useful and

00:14:06,160 --> 00:14:09,279
from useful information

00:14:07,760 --> 00:14:11,519
or get any useful information from

00:14:09,279 --> 00:14:14,320
anyone about how to scale this

00:14:11,519 --> 00:14:16,079
um it it gets a lot slower and like

00:14:14,320 --> 00:14:20,399
things become an issue

00:14:16,079 --> 00:14:22,320
um obs api tokens

00:14:20,399 --> 00:14:24,800
are something that i was hoping would be

00:14:22,320 --> 00:14:27,440
useful and then turns out to not be

00:14:24,800 --> 00:14:28,639
they can only be used for triggering

00:14:27,440 --> 00:14:31,600
source services

00:14:28,639 --> 00:14:34,000
which i don't use so they're not usable

00:14:31,600 --> 00:14:37,680
and so what we wound up having to do

00:14:34,000 --> 00:14:38,880
is create a specially special user that

00:14:37,680 --> 00:14:41,279
is carefully managed

00:14:38,880 --> 00:14:42,800
for for our ci infrastructure to use the

00:14:41,279 --> 00:14:46,320
obs api

00:14:42,800 --> 00:14:48,320
um and that has

00:14:46,320 --> 00:14:49,519
unfortunate consequences too but

00:14:48,320 --> 00:14:52,079
fortunately

00:14:49,519 --> 00:14:53,600
it hasn't it hasn't been too bad it's

00:14:52,079 --> 00:14:56,560
just irritating

00:14:53,600 --> 00:14:57,040
um there's no way for source services to

00:14:56,560 --> 00:14:58,720
access

00:14:57,040 --> 00:15:00,720
authenticated servers so what i mean by

00:14:58,720 --> 00:15:03,360
this is like

00:15:00,720 --> 00:15:05,440
we our git server is authenticated you

00:15:03,360 --> 00:15:06,320
cannot do anonymous checkouts of any

00:15:05,440 --> 00:15:08,560
kind

00:15:06,320 --> 00:15:10,320
but unfortunately the source services

00:15:08,560 --> 00:15:13,680
cannot be configured

00:15:10,320 --> 00:15:15,519
with either ssh or https credentials of

00:15:13,680 --> 00:15:19,199
any kind so

00:15:15,519 --> 00:15:22,480
it can't be done you can't use have obs

00:15:19,199 --> 00:15:24,639
pull the code rather than having so we

00:15:22,480 --> 00:15:26,320
we have our ci systems just push the

00:15:24,639 --> 00:15:28,800
code into obs which

00:15:26,320 --> 00:15:29,600
it works it's fine it's just annoying

00:15:28,800 --> 00:15:33,040
because

00:15:29,600 --> 00:15:33,680
that means that the ci side needs to

00:15:33,040 --> 00:15:37,199
know

00:15:33,680 --> 00:15:39,759
a way to access the obs api

00:15:37,199 --> 00:15:40,959
rather than obs just you know randomly

00:15:39,759 --> 00:15:44,560
pulling

00:15:40,959 --> 00:15:48,560
uh the stuff from from our git server

00:15:44,560 --> 00:15:50,000
which would be a lot less painful um

00:15:48,560 --> 00:15:51,600
and of course as i said earlier about

00:15:50,000 --> 00:15:53,279
modules the sport's not great

00:15:51,600 --> 00:15:54,880
this kind of goes forward that you can't

00:15:53,279 --> 00:15:58,399
actually publish

00:15:54,880 --> 00:16:00,160
or produce modular repos you can consume

00:15:58,399 --> 00:16:01,600
them as i said earlier but you can't

00:16:00,160 --> 00:16:05,920
really produce any

00:16:01,600 --> 00:16:06,800
and as this becomes more of an issue

00:16:05,920 --> 00:16:08,720
with

00:16:06,800 --> 00:16:10,320
red hat enterprise linux doubling down

00:16:08,720 --> 00:16:13,120
on modularity technology

00:16:10,320 --> 00:16:15,120
and using it for more and more things

00:16:13,120 --> 00:16:17,040
this becomes more and more of a problem

00:16:15,120 --> 00:16:18,959
um i'm hoping that this will be

00:16:17,040 --> 00:16:20,839
something that will get resolved in

00:16:18,959 --> 00:16:23,600
the near future but that's that's an

00:16:20,839 --> 00:16:27,279
issue um

00:16:23,600 --> 00:16:30,800
the obs version control system is

00:16:27,279 --> 00:16:32,880
awful it is unwanted and

00:16:30,800 --> 00:16:34,480
it has interesting quirks like if you

00:16:32,880 --> 00:16:37,839
branch and merge

00:16:34,480 --> 00:16:39,839
you lose the history in between uh

00:16:37,839 --> 00:16:41,519
this is one of the reasons why the open

00:16:39,839 --> 00:16:44,959
source infrastructure

00:16:41,519 --> 00:16:47,120
uh or sorry the opensuse uh project

00:16:44,959 --> 00:16:48,639
has changes files still despite having a

00:16:47,120 --> 00:16:50,079
version control in every action going

00:16:48,639 --> 00:16:52,399
through version control

00:16:50,079 --> 00:16:54,000
because that is not a reliable way to

00:16:52,399 --> 00:16:56,880
generate a change log

00:16:54,000 --> 00:16:58,800
um that's not true with you know git

00:16:56,880 --> 00:17:02,160
because you can merge and produ

00:16:58,800 --> 00:17:04,480
preserve history across merges

00:17:02,160 --> 00:17:06,880
so we mostly ignore it i mean it's not a

00:17:04,480 --> 00:17:10,000
big deal we just don't think about it

00:17:06,880 --> 00:17:11,919
um and so we wind up using git

00:17:10,000 --> 00:17:13,679
as our source of truth and we've written

00:17:11,919 --> 00:17:16,240
a whole bunch of scripts and tooling

00:17:13,679 --> 00:17:19,439
around um essentially implementing the

00:17:16,240 --> 00:17:23,120
fedora style diskit model

00:17:19,439 --> 00:17:26,959
for supporting our packaging workflows

00:17:23,120 --> 00:17:30,000
um and it occurs to me with the

00:17:26,959 --> 00:17:31,360
uh with the there is one last thing hey

00:17:30,000 --> 00:17:32,880
you get a special point that's not on

00:17:31,360 --> 00:17:36,320
slides yay

00:17:32,880 --> 00:17:39,360
um when it comes to the

00:17:36,320 --> 00:17:43,200
when it comes to the uh

00:17:39,360 --> 00:17:47,039
the interactions with uh with obs

00:17:43,200 --> 00:17:50,320
api and and builders and stuff it's

00:17:47,039 --> 00:17:53,440
it's quite difficult for

00:17:50,320 --> 00:17:57,760
us to keep it

00:17:53,440 --> 00:18:00,559
working if the interconnect goes down

00:17:57,760 --> 00:18:02,880
so this is a semi-related piece the

00:18:00,559 --> 00:18:05,120
interconnect build.opensuse.org

00:18:02,880 --> 00:18:06,720
is what we rely on to make sure we have

00:18:05,120 --> 00:18:07,919
our distribution configurations and have

00:18:06,720 --> 00:18:10,240
those populated and have everything

00:18:07,919 --> 00:18:13,280
working

00:18:10,240 --> 00:18:16,880
in when that goes down

00:18:13,280 --> 00:18:20,799
obs doesn't have a fallback to

00:18:16,880 --> 00:18:22,559
to keep running with like stale data

00:18:20,799 --> 00:18:24,000
it downloads everything over and over

00:18:22,559 --> 00:18:25,120
again it doesn't know the meaning of

00:18:24,000 --> 00:18:27,440
caching

00:18:25,120 --> 00:18:28,640
and so we wind up in a situation where

00:18:27,440 --> 00:18:32,640
like even though there's

00:18:28,640 --> 00:18:37,120
previous records of cached rpms and devs

00:18:32,640 --> 00:18:40,480
cache repository solver data cached

00:18:37,120 --> 00:18:43,760
build configs and stuff like that

00:18:40,480 --> 00:18:45,679
and and resolver settings uh it

00:18:43,760 --> 00:18:47,520
it just throws it away and tries to

00:18:45,679 --> 00:18:47,919
fetch again and fail when it fails it

00:18:47,520 --> 00:18:51,520
just

00:18:47,919 --> 00:18:53,280
stops building not building isn't

00:18:51,520 --> 00:18:54,480
necessarily the worst thing in this

00:18:53,280 --> 00:18:56,799
in the world because we still have

00:18:54,480 --> 00:19:00,799
everything that we did before but it's

00:18:56,799 --> 00:19:02,559
pretty bad if you can't move forward in

00:19:00,799 --> 00:19:04,400
and so like this has an interesting

00:19:02,559 --> 00:19:07,039
consequence that we don't

00:19:04,400 --> 00:19:08,320
we try very hard to not rely on a lot of

00:19:07,039 --> 00:19:10,080
the magic

00:19:08,320 --> 00:19:11,360
functionality of obs so we don't do

00:19:10,080 --> 00:19:13,919
things like substitutes

00:19:11,360 --> 00:19:15,600
we don't use multiversion multi-flavors

00:19:13,919 --> 00:19:17,120
we don't use any of those features which

00:19:15,600 --> 00:19:18,480
rewrite spec files

00:19:17,120 --> 00:19:20,160
except for the release field because you

00:19:18,480 --> 00:19:23,520
can't really turn that off

00:19:20,160 --> 00:19:24,320
um so we use we try to minimize our

00:19:23,520 --> 00:19:28,320
reliance

00:19:24,320 --> 00:19:31,120
on the obs magic features

00:19:28,320 --> 00:19:31,840
so that if i need to build them manually

00:19:31,120 --> 00:19:35,039
by hand

00:19:31,840 --> 00:19:37,280
i can do it and that has had to happen a

00:19:35,039 --> 00:19:39,840
couple of times

00:19:37,280 --> 00:19:42,000
but fortunately not too often but it

00:19:39,840 --> 00:19:45,039
would be really nice if someday this

00:19:42,000 --> 00:19:46,160
this was something that we had a

00:19:45,039 --> 00:19:49,520
solution for

00:19:46,160 --> 00:19:52,559
um like maybe build in a proxy or like

00:19:49,520 --> 00:19:53,679
handle some kind of cache and validation

00:19:52,559 --> 00:19:54,080
mechanism so you don't have to keep

00:19:53,679 --> 00:19:56,320
hitting

00:19:54,080 --> 00:19:58,640
interconnect i don't know there's

00:19:56,320 --> 00:20:02,799
something

00:19:58,640 --> 00:20:05,200
but yeah it's with all that it's said

00:20:02,799 --> 00:20:08,159
like obs has actually been pretty solid

00:20:05,200 --> 00:20:10,320
for us and

00:20:08,159 --> 00:20:12,159
i want to make sure make it clear that

00:20:10,320 --> 00:20:14,000
while there have been these kinds of

00:20:12,159 --> 00:20:15,120
problems and this is really just a very

00:20:14,000 --> 00:20:18,640
short talk

00:20:15,120 --> 00:20:21,039
about our experience of trying uh of

00:20:18,640 --> 00:20:22,240
using obs at scale for years and trying

00:20:21,039 --> 00:20:25,039
to

00:20:22,240 --> 00:20:26,880
really make this something useful for uh

00:20:25,039 --> 00:20:30,240
for our company

00:20:26,880 --> 00:20:32,400
that's interesting apparently i can't

00:20:30,240 --> 00:20:35,280
say nice things about obs before it it

00:20:32,400 --> 00:20:36,640
starts doing that uh

00:20:35,280 --> 00:20:38,880
i don't know what that says about my

00:20:36,640 --> 00:20:40,159
karma

00:20:38,880 --> 00:20:42,000
i don't know but obviously you're

00:20:40,159 --> 00:20:46,000
displeasing some

00:20:42,000 --> 00:20:49,520
french raper fan yeah

00:20:46,000 --> 00:20:50,480
well in the end like obs has been pretty

00:20:49,520 --> 00:20:53,120
awesome for us

00:20:50,480 --> 00:20:54,640
it's just these are the highlights of

00:20:53,120 --> 00:20:57,360
like

00:20:54,640 --> 00:20:58,480
hopefully a more a kind of balanced view

00:20:57,360 --> 00:21:02,240
of

00:20:58,480 --> 00:21:03,760
you know where has it fallen down for us

00:21:02,240 --> 00:21:05,280
in the where it's done well and where

00:21:03,760 --> 00:21:05,919
it's fallen down for us in the past five

00:21:05,280 --> 00:21:09,039
years

00:21:05,919 --> 00:21:09,919
so that so that people you know in the

00:21:09,039 --> 00:21:11,760
obs team and the

00:21:09,919 --> 00:21:13,440
scissor community and others can you

00:21:11,760 --> 00:21:15,919
know build upon that experience

00:21:13,440 --> 00:21:16,799
and you know make it an even better

00:21:15,919 --> 00:21:21,360
solution

00:21:16,799 --> 00:21:21,360
for the next five to ten years so

00:21:21,520 --> 00:21:31,840
uh any questions from

00:21:24,640 --> 00:21:31,840
the community

00:21:34,880 --> 00:21:41,440
so uh how are you actually wrapping

00:21:37,919 --> 00:21:44,799
osc so oh comparison

00:21:41,440 --> 00:21:47,200
std out no no no no

00:21:44,799 --> 00:21:48,240
no that's the i do that for exactly one

00:21:47,200 --> 00:21:51,120
thing and that's for

00:21:48,240 --> 00:21:51,679
actually running so in our workflow and

00:21:51,120 --> 00:21:53,280
i mentioned

00:21:51,679 --> 00:21:54,880
in my in my talk back in the opens is a

00:21:53,280 --> 00:21:56,559
virtual summit we do we have a concept

00:21:54,880 --> 00:21:59,440
of scratch builds which is

00:21:56,559 --> 00:22:00,080
more or less coming from koji's uh model

00:21:59,440 --> 00:22:02,080
of

00:22:00,080 --> 00:22:03,679
you can request from the api all the

00:22:02,080 --> 00:22:05,280
things you need to be able to build

00:22:03,679 --> 00:22:07,200
the package locally and then you do the

00:22:05,280 --> 00:22:08,880
package built locally and

00:22:07,200 --> 00:22:10,480
or you can do the package build remotely

00:22:08,880 --> 00:22:13,679
and throw away the result

00:22:10,480 --> 00:22:14,880
um we i attempt to mimic this in our ci

00:22:13,679 --> 00:22:17,919
infrastructure

00:22:14,880 --> 00:22:19,600
uh and with the um

00:22:17,919 --> 00:22:21,840
that is the only piece where we actually

00:22:19,600 --> 00:22:25,440
shell out to osc because as it turns out

00:22:21,840 --> 00:22:27,919
the all the python api inside is broken

00:22:25,440 --> 00:22:29,280
and you can't use it but for everything

00:22:27,919 --> 00:22:31,679
else we actually

00:22:29,280 --> 00:22:32,480
import osc and start and use functions

00:22:31,679 --> 00:22:35,600
inside

00:22:32,480 --> 00:22:36,799
i have a little shop of horrors of

00:22:35,600 --> 00:22:41,360
wrappers

00:22:36,799 --> 00:22:44,960
uh around osc's api the python api of

00:22:41,360 --> 00:22:48,480
the osc python program uh to

00:22:44,960 --> 00:22:49,919
do things like check out um into an

00:22:48,480 --> 00:22:52,640
arbitrary directory

00:22:49,919 --> 00:22:54,080
replace all the files and commit set the

00:22:52,640 --> 00:22:57,280
commit message

00:22:54,080 --> 00:22:59,120
uh things like that um and even have it

00:22:57,280 --> 00:23:00,559
do certain behaviors that the osce

00:22:59,120 --> 00:23:02,559
client itself won't allow

00:23:00,559 --> 00:23:05,200
which is for example work inside of a

00:23:02,559 --> 00:23:08,720
git working directory

00:23:05,200 --> 00:23:10,480
because osc broke that some time ago and

00:23:08,720 --> 00:23:14,480
i had to work around it

00:23:10,480 --> 00:23:17,760
um so those are so like i'm actually

00:23:14,480 --> 00:23:19,039
using the completely unstable api inside

00:23:17,760 --> 00:23:22,240
of the osc

00:23:19,039 --> 00:23:24,159
python code

00:23:22,240 --> 00:23:25,840
because that's pretty much the only way

00:23:24,159 --> 00:23:26,960
you can do that properly because shell

00:23:25,840 --> 00:23:29,919
parsing

00:23:26,960 --> 00:23:31,120
is even worse of an idea because the

00:23:29,919 --> 00:23:36,640
output is

00:23:31,120 --> 00:23:39,360
less stable

00:23:36,640 --> 00:23:40,559
so does that answer your question dan

00:23:39,360 --> 00:23:43,600
yeah definitely

00:23:40,559 --> 00:23:46,320
so i won't try that don't

00:23:43,600 --> 00:23:47,679
just don't try that uh what i would

00:23:46,320 --> 00:23:48,960
personally what i was hoping for like a

00:23:47,679 --> 00:23:50,080
few years ago when i was first starting

00:23:48,960 --> 00:23:52,880
to write these tools

00:23:50,080 --> 00:23:53,679
there was this project called osc2 and

00:23:52,880 --> 00:23:56,720
the idea

00:23:53,679 --> 00:24:01,039
that that project was supposed to make

00:23:56,720 --> 00:24:04,159
a proper python wrapper library

00:24:01,039 --> 00:24:05,919
for interacting with the obs api but

00:24:04,159 --> 00:24:06,799
nobody cared about it enough for it to

00:24:05,919 --> 00:24:09,039
keep going

00:24:06,799 --> 00:24:10,559
and so it didn't and with the lack of

00:24:09,039 --> 00:24:13,200
documentation

00:24:10,559 --> 00:24:14,559
in the obs api itself that project would

00:24:13,200 --> 00:24:16,080
net would not succeed without the

00:24:14,559 --> 00:24:18,640
backing of the obs team

00:24:16,080 --> 00:24:21,760
and the obs team didn't care about it

00:24:18,640 --> 00:24:21,760
enough to keep it going

00:24:23,610 --> 00:24:33,120
[Music]

00:24:26,799 --> 00:24:36,559
so uh yeah

00:24:33,120 --> 00:24:37,440
any other questions or did i just kind

00:24:36,559 --> 00:24:39,279
of

00:24:37,440 --> 00:24:42,640
ram some terrible down everyone's

00:24:39,279 --> 00:24:42,640
throats and nobody wants to hear it

00:24:44,840 --> 00:24:49,440
anymore

00:24:46,720 --> 00:24:50,559
uh oh somebody pointed out in the chat

00:24:49,440 --> 00:24:53,840
something called obs

00:24:50,559 --> 00:24:57,120
kit oh yeah from uh uh

00:24:53,840 --> 00:24:59,200
what is it uh alberto planus right from

00:24:57,120 --> 00:25:01,360
yeah i know him he was uh he works with

00:24:59,200 --> 00:25:03,600
us the fedora rustig

00:25:01,360 --> 00:25:04,880
uh yeah this is actually quite

00:25:03,600 --> 00:25:08,000
interesting

00:25:04,880 --> 00:25:11,279
because uh

00:25:08,000 --> 00:25:13,120
this attempts to pull the obs data back

00:25:11,279 --> 00:25:14,640
out into a git repo

00:25:13,120 --> 00:25:16,720
and that's something that i've wanted to

00:25:14,640 --> 00:25:20,720
see for years and years and years

00:25:16,720 --> 00:25:25,200
um but yeah this is very similar to

00:25:20,720 --> 00:25:27,440
one of the tools that i wrote for um

00:25:25,200 --> 00:25:28,480
for the fedora rust sig so that um igor

00:25:27,440 --> 00:25:30,320
netenko

00:25:28,480 --> 00:25:32,400
or now igor raids he changed his name

00:25:30,320 --> 00:25:35,520
after he got married um

00:25:32,400 --> 00:25:38,080
uh igor rates uh wanted to

00:25:35,520 --> 00:25:40,480
be able to commit from fedora's diskette

00:25:38,080 --> 00:25:41,120
straight into obs and build stings from

00:25:40,480 --> 00:25:46,320
fedora

00:25:41,120 --> 00:25:49,919
in obs i wrote a similar script

00:25:46,320 --> 00:25:52,159
that allows you to

00:25:49,919 --> 00:25:53,440
basically say if you've got a disk it

00:25:52,159 --> 00:25:56,720
set up

00:25:53,440 --> 00:26:00,240
it can just automatically

00:25:56,720 --> 00:26:03,039
push it back into uh into obs

00:26:00,240 --> 00:26:04,720
and this is based on this some early

00:26:03,039 --> 00:26:05,840
version of the code that we use at work

00:26:04,720 --> 00:26:09,679
internally

00:26:05,840 --> 00:26:12,720
um that i wrote adapted to fedora's

00:26:09,679 --> 00:26:14,240
git server and so you can see from there

00:26:12,720 --> 00:26:14,799
dan you can actually see example of how

00:26:14,240 --> 00:26:24,400
i

00:26:14,799 --> 00:26:27,600
manipulate the osc api

00:26:24,400 --> 00:26:29,279
but that's like one bit of some of the

00:26:27,600 --> 00:26:31,520
wrappers that i've written in

00:26:29,279 --> 00:26:34,640
we have a whole program now called obs

00:26:31,520 --> 00:26:37,440
ctl or obs controller

00:26:34,640 --> 00:26:38,960
that i'm working through cleaning up and

00:26:37,440 --> 00:26:40,720
open and hopefully planning to open

00:26:38,960 --> 00:26:42,480
source and then we can

00:26:40,720 --> 00:26:43,919
and then hopefully other people can see

00:26:42,480 --> 00:26:47,600
you know what i had to do

00:26:43,919 --> 00:26:47,600
to to make it work for our workflows

00:26:48,559 --> 00:26:56,640
so so just another question since you

00:26:52,559 --> 00:26:59,760
mentioned that there's some parts of obs

00:26:56,640 --> 00:27:03,919
that you you as a uh

00:26:59,760 --> 00:27:07,039
as a power user company are not really

00:27:03,919 --> 00:27:10,159
happy with have you have you or your

00:27:07,039 --> 00:27:13,360
management considered to you know

00:27:10,159 --> 00:27:15,360
play by the open source spirit and hire

00:27:13,360 --> 00:27:17,120
a developer and

00:27:15,360 --> 00:27:19,039
implement this feature and try to

00:27:17,120 --> 00:27:22,559
upstream it

00:27:19,039 --> 00:27:24,080
um it

00:27:22,559 --> 00:27:25,840
i don't know about the higher the hiring

00:27:24,080 --> 00:27:30,640
developer part but

00:27:25,840 --> 00:27:34,080
but i do um as part of the time i spend

00:27:30,640 --> 00:27:37,919
for my job actually do work on

00:27:34,080 --> 00:27:39,679
uh obs uh upstream like so i've done

00:27:37,919 --> 00:27:41,679
i've i've done work in the upstream

00:27:39,679 --> 00:27:44,080
project the

00:27:41,679 --> 00:27:44,720
i've done some testing i i'm actually

00:27:44,080 --> 00:27:47,919
working

00:27:44,720 --> 00:27:48,320
slowly working through some uh effort to

00:27:47,919 --> 00:27:52,159
port

00:27:48,320 --> 00:27:55,760
obs to run on fedora um because

00:27:52,159 --> 00:27:57,919
uh um another thing that's kind of an

00:27:55,760 --> 00:28:00,399
ugly kind of thing is that opensuse

00:27:57,919 --> 00:28:04,240
elite is not fresh enough

00:28:00,399 --> 00:28:05,840
for us to be able to run the builders um

00:28:04,240 --> 00:28:07,760
at certain points in time when like a

00:28:05,840 --> 00:28:09,039
new ubuntu release comes out that we

00:28:07,760 --> 00:28:12,320
need to support

00:28:09,039 --> 00:28:15,760
or in some cases a new fedora release um

00:28:12,320 --> 00:28:16,960
open souza leap 15 is not fresh enough

00:28:15,760 --> 00:28:18,960
or doesn't have

00:28:16,960 --> 00:28:20,640
the working functionality and the obs

00:28:18,960 --> 00:28:22,399
team hasn't done

00:28:20,640 --> 00:28:24,320
its own shop of horrors to backboard

00:28:22,399 --> 00:28:26,480
stuff and so

00:28:24,320 --> 00:28:29,039
it would be easier for us if we could

00:28:26,480 --> 00:28:31,120
run our builders on fedora for example

00:28:29,039 --> 00:28:32,159
because then we have the newer stack

00:28:31,120 --> 00:28:34,880
fresher

00:28:32,159 --> 00:28:36,399
uh newer rpm newer d package all that

00:28:34,880 --> 00:28:37,279
sorts of things so like we don't run

00:28:36,399 --> 00:28:39,679
into

00:28:37,279 --> 00:28:41,440
weird problems when the compression

00:28:39,679 --> 00:28:43,360
format changes or the repository

00:28:41,440 --> 00:28:45,679
metadata format changes

00:28:43,360 --> 00:28:47,520
or you know some features haven't been

00:28:45,679 --> 00:28:50,240
turned on in create repo

00:28:47,520 --> 00:28:51,679
or stuff like that which just which

00:28:50,240 --> 00:28:53,279
break our use cases

00:28:51,679 --> 00:28:54,640
because what i don't want to have to do

00:28:53,279 --> 00:28:56,080
is maintain a whole bunch of fork

00:28:54,640 --> 00:28:57,679
packages

00:28:56,080 --> 00:29:00,320
i would much rather have them part of

00:28:57,679 --> 00:29:02,799
the mainline tree inside a factory

00:29:00,320 --> 00:29:03,600
but or in leap or whatever and i try my

00:29:02,799 --> 00:29:05,440
best to do that

00:29:03,600 --> 00:29:08,080
i mean i'm the maintainer of create

00:29:05,440 --> 00:29:12,480
reposi and open souza for this reason

00:29:08,080 --> 00:29:16,240
um i i do a fair bit of work

00:29:12,480 --> 00:29:19,760
um for this kind of stuff

00:29:16,240 --> 00:29:21,760
and so yeah like from that perspective

00:29:19,760 --> 00:29:23,279
yes we are in the open source spirit way

00:29:21,760 --> 00:29:24,159
actually contributing to the upstream

00:29:23,279 --> 00:29:26,399
projects

00:29:24,159 --> 00:29:27,360
my involvement in the opensuse project

00:29:26,399 --> 00:29:29,120
more or less

00:29:27,360 --> 00:29:30,960
restarted because we were starting to

00:29:29,120 --> 00:29:33,919
use obs at datto

00:29:30,960 --> 00:29:36,320
and i was trying to fix things that were

00:29:33,919 --> 00:29:36,320
broken

00:29:36,640 --> 00:29:41,520
so like for example the fact that uh

00:29:39,919 --> 00:29:42,880
full author identities are now in

00:29:41,520 --> 00:29:46,000
changes files

00:29:42,880 --> 00:29:48,799
that was because at work we did not like

00:29:46,000 --> 00:29:52,320
the fact that we couldn't attribute

00:29:48,799 --> 00:29:54,000
any changes people made because email

00:29:52,320 --> 00:29:56,320
addresses aren't enough

00:29:54,000 --> 00:29:58,000
people can have email addresses and

00:29:56,320 --> 00:30:00,159
those can get reassigned or they can

00:29:58,000 --> 00:30:01,840
become invalid or whatever

00:30:00,159 --> 00:30:03,360
or they could be aliases for example

00:30:01,840 --> 00:30:08,000
like there's somebody who has

00:30:03,360 --> 00:30:10,159
like the bossman at food.org

00:30:08,000 --> 00:30:11,679
well that's not helpful that doesn't

00:30:10,159 --> 00:30:12,960
tell you anything about who that person

00:30:11,679 --> 00:30:16,159
was

00:30:12,960 --> 00:30:18,480
and so uh

00:30:16,159 --> 00:30:20,559
we i went through the effort of fixing

00:30:18,480 --> 00:30:23,840
the changes files and stuff like that

00:30:20,559 --> 00:30:26,320
to make it so that it

00:30:23,840 --> 00:30:28,240
produces for full names and so that's

00:30:26,320 --> 00:30:31,120
why we have full identities

00:30:28,240 --> 00:30:31,840
uh anyway uh with all that i'm pretty

00:30:31,120 --> 00:30:35,600
much done

00:30:31,840 --> 00:30:43,120
and out of time so thank you all for

00:30:35,600 --> 00:30:43,120

YouTube URL: https://www.youtube.com/watch?v=1ZWbKtHrWEg


