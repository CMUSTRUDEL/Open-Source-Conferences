Title: The state of open source licensing clarity
Publication date: 2020-11-05
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	And how to make FOSS license discovery a non-issue


In an ideal world, the provenance and open source license of third-party software would be available as easy-to-discover structured data. We are not there yet! We will review a detailed study on the clarity of licenses documentation practices in 5,000 popular open source software packages and infer the state of licensing clarity globally gained from the insights and statistics of the ClearlyDefined project data gained from massive license scans with the scancode-toolkit. And we will discuss what can be done to improve this situation.

I will present the state of the license documentation clarity in the open source community at large through the lens of:

    the introduction to the license clarity metrics we designed for ClearlyDefined and in the scancode-toolkit

    the presentation of a study of the license clarity of 5000 popular open source projects across multiple programming languages and ecosystems

    an overview of the statistics on license clarity across 10M packages

    a specific review of the licensing practices and license clarity statistics in openSUSE packages


Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:01,439 --> 00:00:05,920
and please tell me can someone tell me

00:00:03,679 --> 00:00:09,040
if you can hear me all right and and

00:00:05,920 --> 00:00:12,480
see my screen yes it works properly

00:00:09,040 --> 00:00:16,320
okay good right let's start

00:00:12,480 --> 00:00:16,720
so i'm going to talk about the state of

00:00:16,320 --> 00:00:20,000
uh

00:00:16,720 --> 00:00:22,640
open source license clarity and

00:00:20,000 --> 00:00:24,480
eventually how to to help in in a small

00:00:22,640 --> 00:00:27,199
way to make

00:00:24,480 --> 00:00:28,080
open source license discovery less of a

00:00:27,199 --> 00:00:31,920
problem and

00:00:28,080 --> 00:00:35,840
possibly an issue so

00:00:31,920 --> 00:00:36,559
i'm about to me i'm a software licensed

00:00:35,840 --> 00:00:40,079
nerd

00:00:36,559 --> 00:00:43,760
um i'm also a code hoarder

00:00:40,079 --> 00:00:44,160
and that's probably related i used to

00:00:43,760 --> 00:00:47,360
have

00:00:44,160 --> 00:00:50,559
60 000 forks on github

00:00:47,360 --> 00:00:53,120
and i only have about 20 now

00:00:50,559 --> 00:00:54,640
just because it's very easy to click and

00:00:53,120 --> 00:00:58,079
and fork

00:00:54,640 --> 00:01:01,520
and you may wonder why but it's

00:00:58,079 --> 00:01:04,559
he as i'm dealing a lot with uh

00:01:01,520 --> 00:01:05,600
the analysis of code i like to keep the

00:01:04,559 --> 00:01:08,159
code around too so

00:01:05,600 --> 00:01:09,520
keeping give me a fork is good and and

00:01:08,159 --> 00:01:13,840
fast way when you

00:01:09,520 --> 00:01:13,840
find a package and stumble on a project

00:01:15,280 --> 00:01:21,439
um and by the way on on the license

00:01:18,960 --> 00:01:23,040
side i'm also co-founder of a project

00:01:21,439 --> 00:01:27,040
the linux foundation called

00:01:23,040 --> 00:01:29,439
spdx and uh i'm ending quite a few tools

00:01:27,040 --> 00:01:32,400
in that space so

00:01:29,439 --> 00:01:34,880
i'm a licensed nerd and i really do that

00:01:32,400 --> 00:01:36,400
day in and day out

00:01:34,880 --> 00:01:38,079
so we're going to talk about license

00:01:36,400 --> 00:01:41,600
clarity and

00:01:38,079 --> 00:01:44,799
first a bit what's the problem

00:01:41,600 --> 00:01:48,640
what we mean by clarity and how to

00:01:44,799 --> 00:01:51,119
create license clarity metrics

00:01:48,640 --> 00:01:52,960
and how do we deal first with the

00:01:51,119 --> 00:01:55,600
license detection

00:01:52,960 --> 00:01:56,159
and then look at some clarity statistics

00:01:55,600 --> 00:02:00,000
and

00:01:56,159 --> 00:02:03,520
and how we could help fix this stuff

00:02:00,000 --> 00:02:07,119
in the future so

00:02:03,520 --> 00:02:08,319
in an ideal world we shouldn't be having

00:02:07,119 --> 00:02:10,319
this discussion at all

00:02:08,319 --> 00:02:11,920
right it's it's a pure waste of your

00:02:10,319 --> 00:02:15,200
time and my time to discuss about

00:02:11,920 --> 00:02:17,280
licensing even though i i love licenses

00:02:15,200 --> 00:02:19,680
we shouldn't be there the provenance

00:02:17,280 --> 00:02:22,480
licensing of all the third party

00:02:19,680 --> 00:02:24,720
software packages would be available in

00:02:22,480 --> 00:02:27,840
an easy to discover structured

00:02:24,720 --> 00:02:30,959
data format and

00:02:27,840 --> 00:02:34,239
if some of you are maintainers of

00:02:30,959 --> 00:02:37,760
of package for open suse

00:02:34,239 --> 00:02:39,440
you know it's difficult and i'm

00:02:37,760 --> 00:02:41,440
immensely grateful of the work that

00:02:39,440 --> 00:02:44,879
package maintainers do to

00:02:41,440 --> 00:02:46,800
provide a bit of order to to the mess

00:02:44,879 --> 00:02:49,120
that exists upstream

00:02:46,800 --> 00:02:50,239
but we're not there there we're not yet

00:02:49,120 --> 00:02:54,560
there and

00:02:50,239 --> 00:02:57,840
we we are very far from knowing it all

00:02:54,560 --> 00:03:01,519
and in fact so some of the the stats

00:02:57,840 --> 00:03:04,560
and cd i did on

00:03:01,519 --> 00:03:06,000
5000 popular application packages

00:03:04,560 --> 00:03:07,840
i i don't have unfortunately i was

00:03:06,000 --> 00:03:09,599
hoping to to have the time to compute

00:03:07,840 --> 00:03:13,040
stats on on the pen suzy and more

00:03:09,599 --> 00:03:13,040
digital package and i don't have them

00:03:13,200 --> 00:03:16,560
but looking at application packages less

00:03:16,000 --> 00:03:19,599
than

00:03:16,560 --> 00:03:23,360
five percent of these

00:03:19,599 --> 00:03:23,360
5000 popular packages

00:03:23,680 --> 00:03:27,040
contain what i would call to be complete

00:03:26,640 --> 00:03:30,879
and

00:03:27,040 --> 00:03:34,000
unambiguous that means really clear

00:03:30,879 --> 00:03:36,720
licensed documentation so that's

00:03:34,000 --> 00:03:37,120
that's not much and and i'm sure if

00:03:36,720 --> 00:03:38,400
you're

00:03:37,120 --> 00:03:40,239
if you're maintaining package that you

00:03:38,400 --> 00:03:42,640
understand what it is about because

00:03:40,239 --> 00:03:44,879
you have to deal downstream with that

00:03:42,640 --> 00:03:44,879
mess

00:03:45,599 --> 00:03:51,360
so nowadays we

00:03:48,640 --> 00:03:52,879
we all know i mean we assemble complex

00:03:51,360 --> 00:03:55,519
software from

00:03:52,879 --> 00:03:56,799
eventually thousands of components think

00:03:55,519 --> 00:03:58,959
about

00:03:56,799 --> 00:04:00,239
a node based application with npm

00:03:58,959 --> 00:04:03,120
packages

00:04:00,239 --> 00:04:05,200
very quickly you have a few hundreds or

00:04:03,120 --> 00:04:07,280
a few thousand packages in

00:04:05,200 --> 00:04:08,640
in a few with just a few lines of

00:04:07,280 --> 00:04:12,000
dependencies

00:04:08,640 --> 00:04:15,840
and that means eventually you have

00:04:12,000 --> 00:04:19,519
as many copyright holders and licenses

00:04:15,840 --> 00:04:21,040
and it's it's really harder and harder

00:04:19,519 --> 00:04:24,240
for the users

00:04:21,040 --> 00:04:27,600
and and eventually redistributors be the

00:04:24,240 --> 00:04:31,600
open source project or

00:04:27,600 --> 00:04:33,919
software companies to to actually

00:04:31,600 --> 00:04:36,000
be able to cope with the volume and the

00:04:33,919 --> 00:04:39,199
complexity we have there

00:04:36,000 --> 00:04:43,280
um and this this eventually demands

00:04:39,199 --> 00:04:46,639
automation so being able to fix clarity

00:04:43,280 --> 00:04:50,400
is uh probably the only practical way

00:04:46,639 --> 00:04:52,320
to achieve any kind of compliance with a

00:04:50,400 --> 00:04:55,520
free open source software license

00:04:52,320 --> 00:04:57,600
at any scale and if you care about

00:04:55,520 --> 00:05:00,479
these licenses and you care about having

00:04:57,600 --> 00:05:03,840
some minimal respect for them

00:05:00,479 --> 00:05:03,840
it's important to be able to comply

00:05:04,560 --> 00:05:12,400
and so just just a few anecdotes

00:05:08,960 --> 00:05:15,759
on what the problem can be

00:05:12,400 --> 00:05:17,919
i'm sure you've seen a bit less lately

00:05:15,759 --> 00:05:20,400
but you've seen some uh

00:05:17,919 --> 00:05:20,960
distro packages that had license that

00:05:20,400 --> 00:05:24,320
says

00:05:20,960 --> 00:05:28,000
it's redistributable that's great right

00:05:24,320 --> 00:05:30,160
that means a lot whatever it is it's

00:05:28,000 --> 00:05:32,479
not really reassuring about the exact

00:05:30,160 --> 00:05:35,759
terms and conditions of the license

00:05:32,479 --> 00:05:39,759
it's pretty pretty fuzzy well it's very

00:05:35,759 --> 00:05:42,479
common to see repositories

00:05:39,759 --> 00:05:42,960
maybe not the most popular ones but to

00:05:42,479 --> 00:05:45,600
see

00:05:42,960 --> 00:05:48,639
packages that upstream that don't have

00:05:45,600 --> 00:05:48,639
any license information

00:05:48,960 --> 00:05:54,240
or we can also have funny or hidden

00:05:52,320 --> 00:05:57,600
licenses

00:05:54,240 --> 00:05:59,600
this is an example in a slightly older

00:05:57,600 --> 00:06:02,080
kernel driver something i discovered

00:05:59,600 --> 00:06:07,840
which has been fixed since

00:06:02,080 --> 00:06:10,800
where you have a thermal driver

00:06:07,840 --> 00:06:11,199
which was distributed under the therms

00:06:10,800 --> 00:06:14,240
of

00:06:11,199 --> 00:06:16,479
the gpl and just as an aside

00:06:14,240 --> 00:06:18,160
when we started doing some work i

00:06:16,479 --> 00:06:21,440
started doing some work to

00:06:18,160 --> 00:06:26,080
help clean up licensing in the kernel

00:06:21,440 --> 00:06:29,600
there were about 800 different

00:06:26,080 --> 00:06:31,360
ways to say this file is under the gpl

00:06:29,600 --> 00:06:33,759
just in the kernel so the kernel is big

00:06:31,360 --> 00:06:37,199
it has long history

00:06:33,759 --> 00:06:39,360
and we found a lot of weird and

00:06:37,199 --> 00:06:40,479
dusty license in the corners and a lot

00:06:39,360 --> 00:06:42,240
of cobwebs we

00:06:40,479 --> 00:06:45,600
that eventually were cleaned by the

00:06:42,240 --> 00:06:45,600
maintenance one by one

00:06:46,400 --> 00:06:52,800
but if you think about a

00:06:49,440 --> 00:06:57,759
funny uh license like that

00:06:52,800 --> 00:07:01,039
that's a pain or just one module license

00:06:57,759 --> 00:07:06,000
written by someone which was likely gpl

00:07:01,039 --> 00:07:09,759
shy where gpl v2 is written

00:07:06,000 --> 00:07:13,039
in ascii as opposed to plain text in

00:07:09,759 --> 00:07:16,400
with ascii codes which is really

00:07:13,039 --> 00:07:19,759
a way to hide the fact it was on the gpl

00:07:16,400 --> 00:07:21,039
so this is the kind of things which are

00:07:19,759 --> 00:07:23,280
problematic

00:07:21,039 --> 00:07:25,520
it's just a few anecdotes but at scale

00:07:23,280 --> 00:07:28,840
it's a total mess

00:07:25,520 --> 00:07:30,000
now where do we get license and origin

00:07:28,840 --> 00:07:33,680
from

00:07:30,000 --> 00:07:35,680
we get it from package manifest

00:07:33,680 --> 00:07:37,360
and build script so when i mean package

00:07:35,680 --> 00:07:40,960
manifest that could be

00:07:37,360 --> 00:07:43,120
a spec file for an rpm

00:07:40,960 --> 00:07:44,400
the controller copyright files the

00:07:43,120 --> 00:07:48,000
debian packages

00:07:44,400 --> 00:07:50,240
deviant package all the various

00:07:48,000 --> 00:07:53,520
package format that exists for

00:07:50,240 --> 00:07:57,039
application packages like

00:07:53,520 --> 00:07:59,120
cargo for rust package json

00:07:57,039 --> 00:08:00,319
up that pie and set up the tfg for

00:07:59,120 --> 00:08:03,520
python

00:08:00,319 --> 00:08:07,120
ruby ruby gems spec files and

00:08:03,520 --> 00:08:11,520
and so on and so on so that's one

00:08:07,120 --> 00:08:14,560
one great source because it may come

00:08:11,520 --> 00:08:17,120
sometimes structured some projects and

00:08:14,560 --> 00:08:18,960
suzy in particular is trying to use now

00:08:17,120 --> 00:08:22,319
spdx licenses

00:08:18,960 --> 00:08:27,759
npm is doing that too and that helps

00:08:22,319 --> 00:08:30,400
bring a bit of order and clarity

00:08:27,759 --> 00:08:32,159
at least it helps pinpoint the exact

00:08:30,400 --> 00:08:34,719
place even if the

00:08:32,159 --> 00:08:36,399
content is not structured it helps to

00:08:34,719 --> 00:08:38,560
know that this field contains

00:08:36,399 --> 00:08:39,599
the license information that's already a

00:08:38,560 --> 00:08:41,440
big thing

00:08:39,599 --> 00:08:43,200
and beyond that there's a bunch of

00:08:41,440 --> 00:08:46,399
license notice tags

00:08:43,200 --> 00:08:47,360
text mentions that exist a bit in any

00:08:46,399 --> 00:08:49,519
kind of

00:08:47,360 --> 00:08:51,360
way and shape you could think of you

00:08:49,519 --> 00:08:52,959
named it some of the examples i just

00:08:51,360 --> 00:08:55,040
showed

00:08:52,959 --> 00:08:56,640
are actually interesting in terms of

00:08:55,040 --> 00:09:00,080
variety of notices

00:08:56,640 --> 00:09:04,880
and there's a lot of indirect clues

00:09:00,080 --> 00:09:07,920
which may help pinpoint uh on

00:09:04,880 --> 00:09:09,120
and provide insight about the actual

00:09:07,920 --> 00:09:11,600
origin

00:09:09,120 --> 00:09:13,200
uh beyond explicit information could be

00:09:11,600 --> 00:09:17,680
email's url

00:09:13,200 --> 00:09:20,800
think about the link to a stock overflow

00:09:17,680 --> 00:09:22,000
article question answerer or snippet or

00:09:20,800 --> 00:09:25,600
a guest

00:09:22,000 --> 00:09:27,440
uh basebean these kind of things uh

00:09:25,600 --> 00:09:28,959
which could be all clues that could be

00:09:27,440 --> 00:09:31,600
used to

00:09:28,959 --> 00:09:32,800
infer where the code comes from and once

00:09:31,600 --> 00:09:33,920
you know where the code comes from you

00:09:32,800 --> 00:09:35,200
have a better chance to figure out the

00:09:33,920 --> 00:09:37,839
license when there's no license

00:09:35,200 --> 00:09:37,839
permission

00:09:38,959 --> 00:09:42,320
and so parsing license from package

00:09:40,880 --> 00:09:45,440
manifest it's

00:09:42,320 --> 00:09:50,080
it's a pretty simple technique

00:09:45,440 --> 00:09:53,600
at a high level

00:09:50,080 --> 00:09:55,040
assuming you have a package that comes

00:09:53,600 --> 00:09:56,959
with structured provenance

00:09:55,040 --> 00:09:58,959
and license formation and that's the

00:09:56,959 --> 00:10:01,440
case nowadays for many repositories so

00:09:58,959 --> 00:10:04,800
we talked about pi pi but ruby gems

00:10:01,440 --> 00:10:06,959
of course suse

00:10:04,800 --> 00:10:08,560
and red hat distros and debian and

00:10:06,959 --> 00:10:12,079
ubuntu also provide

00:10:08,560 --> 00:10:12,079
structured package manifest

00:10:13,200 --> 00:10:16,800
but if you look at scale and especially

00:10:15,600 --> 00:10:19,920
on the side of

00:10:16,800 --> 00:10:24,240
application package only a subset

00:10:19,920 --> 00:10:27,920
of the package may contain actual

00:10:24,240 --> 00:10:31,600
declared license and provenance data

00:10:27,920 --> 00:10:34,240
when i say only a subset out of the 5

00:10:31,600 --> 00:10:37,040
000 package we i've been looking at

00:10:34,240 --> 00:10:39,040
the overall median average license

00:10:37,040 --> 00:10:42,720
clarity is about

00:10:39,040 --> 00:10:45,920
45 out of 100 and we'll see in a second

00:10:42,720 --> 00:10:49,920
what the clarity means but

00:10:45,920 --> 00:10:52,079
there's really only a handful of this

00:10:49,920 --> 00:10:53,440
roughly 5 000 package about less than

00:10:52,079 --> 00:10:56,480
00:10:53,440 --> 00:10:59,839
that had license clarity score

00:10:56,480 --> 00:11:00,399
that you would consider as not perfect

00:10:59,839 --> 00:11:02,800
but

00:11:00,399 --> 00:11:04,640
pretty good enough in in most cases to

00:11:02,800 --> 00:11:08,160
to go and run with it

00:11:04,640 --> 00:11:09,839
in terms of the availability of license

00:11:08,160 --> 00:11:11,360
documentation

00:11:09,839 --> 00:11:13,440
this stage i want just to pause for a

00:11:11,360 --> 00:11:14,160
second to make sure that everybody can

00:11:13,440 --> 00:11:16,959
hear me

00:11:14,160 --> 00:11:19,920
all right and if somebody can confirm it

00:11:16,959 --> 00:11:23,200
with voice i want to make sure we're not

00:11:19,920 --> 00:11:23,200
thanks good

00:11:23,519 --> 00:11:29,839
yesterday i've been disconnected when i

00:11:26,959 --> 00:11:29,839
was making a presentation

00:11:29,920 --> 00:11:35,200
and i've been talking alone for

00:11:33,279 --> 00:11:37,600
20 25 minutes i want to make sure it

00:11:35,200 --> 00:11:40,640
doesn't happen again

00:11:37,600 --> 00:11:41,680
okay so the second side of the equation

00:11:40,640 --> 00:11:44,640
is looking at

00:11:41,680 --> 00:11:45,600
licenses not in structured field of

00:11:44,640 --> 00:11:48,800
manifest

00:11:45,600 --> 00:11:51,760
but as they may exist in the code

00:11:48,800 --> 00:11:53,120
and there's various ways pattern

00:11:51,760 --> 00:11:55,040
matching

00:11:53,120 --> 00:11:56,639
probabilistic text messaging it's

00:11:55,040 --> 00:11:57,680
essentially it's it's a problem of text

00:11:56,639 --> 00:12:00,639
matching

00:11:57,680 --> 00:12:00,639
and um

00:12:00,800 --> 00:12:04,560
the the most comprehensive way would be

00:12:03,440 --> 00:12:07,920
to do diff

00:12:04,560 --> 00:12:09,200
and and using genomic inspite techniques

00:12:07,920 --> 00:12:11,920
of

00:12:09,200 --> 00:12:12,800
multiple text sequence alignments and

00:12:11,920 --> 00:12:16,160
eventually

00:12:12,800 --> 00:12:17,600
uh the tools the tool i'm building which

00:12:16,160 --> 00:12:20,000
is called scan code toolkit

00:12:17,600 --> 00:12:21,200
is using the the third technique and a

00:12:20,000 --> 00:12:24,000
bit of the others

00:12:21,200 --> 00:12:26,320
most everyone else in that well that's

00:12:24,000 --> 00:12:28,880
the only tool i know that does that

00:12:26,320 --> 00:12:30,320
uh it's hard to do at scale but that's

00:12:28,880 --> 00:12:31,360
the only one that provides that can

00:12:30,320 --> 00:12:33,360
provide really

00:12:31,360 --> 00:12:35,600
a correct approach pretty much everyone

00:12:33,360 --> 00:12:37,360
use either approximate

00:12:35,600 --> 00:12:38,800
techniques using probabilities

00:12:37,360 --> 00:12:42,560
probabilistic approach

00:12:38,800 --> 00:12:45,279
and or finding small patterns

00:12:42,560 --> 00:12:48,399
which may be a telltale that this is

00:12:45,279 --> 00:12:48,399
this or that license

00:12:48,480 --> 00:12:55,839
so what do we mean by license clarity

00:12:53,760 --> 00:12:57,360
if you think for a second and you're

00:12:55,839 --> 00:13:00,959
you're about to use

00:12:57,360 --> 00:13:02,639
a new repository or new package

00:13:00,959 --> 00:13:04,320
say it doesn't come from a distro one

00:13:02,639 --> 00:13:07,600
you want to make sure

00:13:04,320 --> 00:13:11,360
that there's no license issue so

00:13:07,600 --> 00:13:13,680
if there's a license that's present at

00:13:11,360 --> 00:13:16,560
the top level

00:13:13,680 --> 00:13:18,079
ideally in a package manifest so say in

00:13:16,560 --> 00:13:20,320
package.json

00:13:18,079 --> 00:13:23,040
or in a readme that's very clear on a

00:13:20,320 --> 00:13:26,399
file called copying

00:13:23,040 --> 00:13:29,920
that's what i call a

00:13:26,399 --> 00:13:33,760
declared license at the top level

00:13:29,920 --> 00:13:35,760
right and clear would mean that

00:13:33,760 --> 00:13:37,680
there's no ambiguity of what the license

00:13:35,760 --> 00:13:39,920
is it's it's actually detectable by a

00:13:37,680 --> 00:13:39,920
tool

00:13:40,639 --> 00:13:46,000
the second criteria would be if there's

00:13:43,519 --> 00:13:48,639
license information license notice

00:13:46,000 --> 00:13:50,720
or spdx license identifiers present in

00:13:48,639 --> 00:13:53,839
the source code

00:13:50,720 --> 00:13:56,079
so there's no ambiguity especially

00:13:53,839 --> 00:13:57,680
when you have multiple licenses that

00:13:56,079 --> 00:14:00,079
apply to package

00:13:57,680 --> 00:14:02,480
which files there which license it's if

00:14:00,079 --> 00:14:06,639
you think about something like gcc

00:14:02,480 --> 00:14:09,120
which has i don't know many files but

00:14:06,639 --> 00:14:10,639
probably not far from the size of the

00:14:09,120 --> 00:14:13,920
the kernel overall

00:14:10,639 --> 00:14:16,480
uh in terms of a volume of code

00:14:13,920 --> 00:14:16,959
it uses stands of difference of licenses

00:14:16,480 --> 00:14:20,480
and

00:14:16,959 --> 00:14:22,320
being able to know which license

00:14:20,480 --> 00:14:24,000
applied to which file or which group of

00:14:22,320 --> 00:14:25,360
files you may have come online tools you

00:14:24,000 --> 00:14:28,720
may have libraries that

00:14:25,360 --> 00:14:29,600
are under lgpl and so on and so on so

00:14:28,720 --> 00:14:32,880
it's important

00:14:29,600 --> 00:14:34,480
to know at the file level that it also

00:14:32,880 --> 00:14:37,920
helps

00:14:34,480 --> 00:14:40,880
to reuse the code for your users

00:14:37,920 --> 00:14:45,839
uh file by file if they want to because

00:14:40,880 --> 00:14:47,440
license stays with the code then

00:14:45,839 --> 00:14:49,440
the answer important things here you

00:14:47,440 --> 00:14:50,079
want to make sure that the information

00:14:49,440 --> 00:14:52,720
you have at the

00:14:50,079 --> 00:14:54,399
file source code level matches the thing

00:14:52,720 --> 00:14:57,519
you have

00:14:54,399 --> 00:14:59,120
at the top level declare level

00:14:57,519 --> 00:15:00,720
you know there's a descript you want

00:14:59,120 --> 00:15:01,519
this to be consistent otherwise that's a

00:15:00,720 --> 00:15:03,199
mess

00:15:01,519 --> 00:15:04,959
and and that's unfortunately pretty

00:15:03,199 --> 00:15:08,720
pretty pretty current pretty

00:15:04,959 --> 00:15:10,720
pretty uh pretty common as a case

00:15:08,720 --> 00:15:12,720
the other thing is you want to to have

00:15:10,720 --> 00:15:14,560
well-known licenses you don't want to

00:15:12,720 --> 00:15:17,760
have to scratch your head

00:15:14,560 --> 00:15:21,360
one of the big benefits of

00:15:17,760 --> 00:15:22,959
what we've been able to achieve as

00:15:21,360 --> 00:15:24,639
an open source and free software

00:15:22,959 --> 00:15:27,920
community at large

00:15:24,639 --> 00:15:29,120
is to agree on a certain number of

00:15:27,920 --> 00:15:32,160
common licenses

00:15:29,120 --> 00:15:35,839
which are the the gpl gpa

00:15:32,160 --> 00:15:37,360
mit bsd and apache of the world there's

00:15:35,839 --> 00:15:39,120
a lot more but

00:15:37,360 --> 00:15:41,440
there's a handful and if you look at the

00:15:39,120 --> 00:15:43,680
complexity and the variety

00:15:41,440 --> 00:15:45,600
of license in the commercial and

00:15:43,680 --> 00:15:48,639
preparatory world

00:15:45,600 --> 00:15:50,320
we've done great because frankly

00:15:48,639 --> 00:15:52,320
the property world is a total mess

00:15:50,320 --> 00:15:55,759
there's not

00:15:52,320 --> 00:15:59,519
one oh it's it's almost like every

00:15:55,759 --> 00:16:02,959
uh contract is a different license

00:15:59,519 --> 00:16:05,440
so having well-known license which are

00:16:02,959 --> 00:16:07,519
not head scratcher which don't require

00:16:05,440 --> 00:16:08,880
uh interpretation which are well known

00:16:07,519 --> 00:16:10,720
quantity is important

00:16:08,880 --> 00:16:13,040
the the thing we use there as a proxy is

00:16:10,720 --> 00:16:16,639
to say it's a license

00:16:13,040 --> 00:16:19,680
that's been referenced and is known

00:16:16,639 --> 00:16:21,600
at the spdx project

00:16:19,680 --> 00:16:22,800
it's not a great thing i mean there's

00:16:21,600 --> 00:16:24,480
maybe some

00:16:22,800 --> 00:16:26,079
license which may not be referenced

00:16:24,480 --> 00:16:28,000
there which should uh

00:16:26,079 --> 00:16:29,680
but eventually over time there would be

00:16:28,000 --> 00:16:32,720
it's definitely

00:16:29,680 --> 00:16:34,399
a good neutral proxy to say hey if the

00:16:32,720 --> 00:16:38,560
license is known there then

00:16:34,399 --> 00:16:40,079
it's well enough known as a quantity

00:16:38,560 --> 00:16:41,600
and the last thing is that most of the

00:16:40,079 --> 00:16:44,160
license require

00:16:41,600 --> 00:16:44,959
somehow to produce the license tax for

00:16:44,160 --> 00:16:46,480
attribution

00:16:44,959 --> 00:16:48,160
you want to make sure the license takes

00:16:46,480 --> 00:16:50,160
is present

00:16:48,160 --> 00:16:51,600
and that's that these are our five

00:16:50,160 --> 00:16:54,240
criterias

00:16:51,600 --> 00:16:56,000
and on top of that we build the clarity

00:16:54,240 --> 00:16:58,800
score

00:16:56,000 --> 00:17:00,240
where each of the elements is receiving

00:16:58,800 --> 00:17:03,199
a weight

00:17:00,240 --> 00:17:04,959
the presence of file level license and

00:17:03,199 --> 00:17:07,439
copyright is progressive

00:17:04,959 --> 00:17:08,319
because it's we're we're looking at a

00:17:07,439 --> 00:17:11,199
ratio

00:17:08,319 --> 00:17:13,039
how many files have a license how many

00:17:11,199 --> 00:17:15,360
files have a copyright

00:17:13,039 --> 00:17:16,079
out of the total of the files present in

00:17:15,360 --> 00:17:18,400
in

00:17:16,079 --> 00:17:20,559
the package and all the other ones are

00:17:18,400 --> 00:17:22,079
binary in the sense that

00:17:20,559 --> 00:17:24,319
either you are consistent or

00:17:22,079 --> 00:17:25,760
inconsistent in terms of license either

00:17:24,319 --> 00:17:27,439
using standard or you're not using

00:17:25,760 --> 00:17:28,880
standard

00:17:27,439 --> 00:17:31,280
or you have license decks are not

00:17:28,880 --> 00:17:34,640
licensed so it's uh

00:17:31,280 --> 00:17:38,160
there's a bit of a ratchet effect uh

00:17:34,640 --> 00:17:42,960
but in practice it proved to be

00:17:38,160 --> 00:17:46,240
fairly well related to

00:17:42,960 --> 00:17:50,480
what i would like to see when i see a

00:17:46,240 --> 00:17:53,600
a project a licensed documentation

00:17:50,480 --> 00:17:56,240
now if we look at the scores we have on

00:17:53,600 --> 00:17:57,919
5 000 application package they're sorted

00:17:56,240 --> 00:17:59,840
by

00:17:57,919 --> 00:18:01,120
well they're grouped by package types so

00:17:59,840 --> 00:18:04,880
we have jam mevens

00:18:01,120 --> 00:18:07,360
npm nougat and pie pie here

00:18:04,880 --> 00:18:09,840
that's the one we picked as an example

00:18:07,360 --> 00:18:12,320
and you see the median score

00:18:09,840 --> 00:18:13,520
and the average and you see it's pretty

00:18:12,320 --> 00:18:16,880
poor in many cases

00:18:13,520 --> 00:18:19,679
right maven in many cases

00:18:16,880 --> 00:18:22,640
is extremely poor in fact the fact that

00:18:19,679 --> 00:18:22,640
meven has so many

00:18:23,039 --> 00:18:26,720
binary only packages and little

00:18:25,760 --> 00:18:28,559
documentation

00:18:26,720 --> 00:18:30,960
if any that comes with the binary

00:18:28,559 --> 00:18:34,480
packages makes it really difficult

00:18:30,960 --> 00:18:37,840
nougat same so

00:18:34,480 --> 00:18:40,480
mostly uh dll libraries

00:18:37,840 --> 00:18:42,720
for for windows sensing pretty pretty

00:18:40,480 --> 00:18:45,600
poor

00:18:42,720 --> 00:18:46,559
gem and p.m and maeve and pie pie a bit

00:18:45,600 --> 00:18:49,360
more mature

00:18:46,559 --> 00:18:50,160
and and well traveled doing definitely

00:18:49,360 --> 00:18:52,400
better

00:18:50,160 --> 00:18:55,039
but there's a lot of differences and

00:18:52,400 --> 00:18:57,840
discrepancy when you look in the

00:18:55,039 --> 00:18:57,840
the small

00:18:58,720 --> 00:19:05,760
for instance npm which is

00:19:01,760 --> 00:19:09,760
reasonably more recent than pi pi

00:19:05,760 --> 00:19:13,120
and has made it a standard to use

00:19:09,760 --> 00:19:15,840
spdx license expression to document

00:19:13,120 --> 00:19:16,400
top-level licenses as a result he is

00:19:15,840 --> 00:19:19,520
using

00:19:16,400 --> 00:19:20,880
many more licensed well-known spdx

00:19:19,520 --> 00:19:25,840
licenses than

00:19:20,880 --> 00:19:25,840
say pipe

00:19:27,039 --> 00:19:31,840
yet you see that there's a big problem

00:19:30,240 --> 00:19:34,320
of consistency

00:19:31,840 --> 00:19:35,360
where we may have a high level of

00:19:34,320 --> 00:19:40,320
declaration

00:19:35,360 --> 00:19:43,520
almost 968 of 970 packages

00:19:40,320 --> 00:19:47,120
have a top-level declutt license

00:19:43,520 --> 00:19:49,280
but they have almost

00:19:47,120 --> 00:19:51,520
only eight percent of the files that

00:19:49,280 --> 00:19:55,440
carry any kind of license formation

00:19:51,520 --> 00:19:58,880
and and the corresponding consistency

00:19:55,440 --> 00:20:01,280
really lacks quite a bit even worse

00:19:58,880 --> 00:20:01,280
would be

00:20:02,640 --> 00:20:07,760
gems for whatever reason folks sorry

00:20:05,840 --> 00:20:09,120
folks that rightfully don't like to

00:20:07,760 --> 00:20:11,280
write

00:20:09,120 --> 00:20:12,640
comments at all and don't put any

00:20:11,280 --> 00:20:15,840
comment at all

00:20:12,640 --> 00:20:19,360
and even less so license related

00:20:15,840 --> 00:20:19,360
not system commands in the source code

00:20:19,520 --> 00:20:23,679
um so there's a few more statistics

00:20:21,840 --> 00:20:25,360
which present that

00:20:23,679 --> 00:20:26,960
the percentage for each of these scoring

00:20:25,360 --> 00:20:30,400
elements

00:20:26,960 --> 00:20:35,360
but in this case uh

00:20:30,400 --> 00:20:37,760
the the top level uh package that have

00:20:35,360 --> 00:20:38,400
a percentage for instance with this pdx

00:20:37,760 --> 00:20:40,960
we see

00:20:38,400 --> 00:20:43,200
more clearly here as a percentage the

00:20:40,960 --> 00:20:46,559
case of npm

00:20:43,200 --> 00:20:47,520
or how early enough and that's a good

00:20:46,559 --> 00:20:50,159
thing

00:20:47,520 --> 00:20:51,679
you have about 26 percent of python

00:20:50,159 --> 00:20:54,720
package that provide

00:20:51,679 --> 00:20:55,440
the license of the package and this may

00:20:54,720 --> 00:20:59,360
be

00:20:55,440 --> 00:21:01,039
because it's actually a standard thing

00:20:59,360 --> 00:21:01,760
when you build the source distribution

00:21:01,039 --> 00:21:05,840
with the

00:21:01,760 --> 00:21:08,880
pipeline and python

00:21:05,840 --> 00:21:10,640
for pipeline that it includes and will

00:21:08,880 --> 00:21:12,960
automatically pick

00:21:10,640 --> 00:21:13,840
licensed text with a well-known name to

00:21:12,960 --> 00:21:17,120
be present

00:21:13,840 --> 00:21:18,240
in the source distribution that's built

00:21:17,120 --> 00:21:20,320
and then upload to the package

00:21:18,240 --> 00:21:23,360
repository

00:21:20,320 --> 00:21:25,280
so that's it there's much more to be

00:21:23,360 --> 00:21:26,480
said about the details there's a full

00:21:25,280 --> 00:21:29,520
report

00:21:26,480 --> 00:21:30,159
that's i will upload also there which is

00:21:29,520 --> 00:21:33,520
available

00:21:30,159 --> 00:21:34,960
on on github a lot of that has been done

00:21:33,520 --> 00:21:38,559
as part of a project

00:21:34,960 --> 00:21:38,559
called the clearly defined

00:21:38,880 --> 00:21:44,400
which is at the osi and the heavy div

00:21:42,880 --> 00:21:48,559
sponsored by

00:21:44,400 --> 00:21:51,440
by microsoft and on my side

00:21:48,559 --> 00:21:54,159
i'm maintaining these tools i'm not

00:21:51,440 --> 00:21:54,159
microsoft

00:21:54,240 --> 00:22:02,960
which are used there to do scans

00:21:57,840 --> 00:22:05,280
in particular that's a joke

00:22:02,960 --> 00:22:05,280
um

00:22:06,000 --> 00:22:12,400
okay well scan code provides a lot

00:22:09,039 --> 00:22:15,360
of features to to scan npms and what you

00:22:12,400 --> 00:22:18,799
see here is that uh

00:22:15,360 --> 00:22:21,039
github made the stupid alert

00:22:18,799 --> 00:22:22,799
because we have a bunch of test files

00:22:21,039 --> 00:22:25,039
which are node

00:22:22,799 --> 00:22:27,840
node packages and and they're completely

00:22:25,039 --> 00:22:27,840
uh

00:22:28,080 --> 00:22:32,000
completely useless sorry sorry for the

00:22:30,240 --> 00:22:36,400
the the segue there

00:22:32,000 --> 00:22:38,000
so uh check check out scan code toolkit

00:22:36,400 --> 00:22:40,400
what we're what we're trying to do in

00:22:38,000 --> 00:22:42,799
terms of next step is practically

00:22:40,400 --> 00:22:44,159
a couple of things we're building a scan

00:22:42,799 --> 00:22:47,440
code io service

00:22:44,159 --> 00:22:50,240
all with free code and data to help

00:22:47,440 --> 00:22:51,760
scan and compute this licensing score

00:22:50,240 --> 00:22:54,159
and make it more easily

00:22:51,760 --> 00:22:55,120
readily available to to everyone

00:22:54,159 --> 00:22:56,559
eventually

00:22:55,120 --> 00:22:58,960
there was a presentation a couple days

00:22:56,559 --> 00:23:01,679
ago by one of the maintainer

00:22:58,960 --> 00:23:03,200
of release monitoring that could be

00:23:01,679 --> 00:23:04,159
something that could be integrated right

00:23:03,200 --> 00:23:07,520
away there

00:23:04,159 --> 00:23:09,840
so as a maintainer builds

00:23:07,520 --> 00:23:11,600
a package or a new package version

00:23:09,840 --> 00:23:13,360
having the license information right on

00:23:11,600 --> 00:23:16,480
hand and understanding

00:23:13,360 --> 00:23:17,520
how good or how bad is the license

00:23:16,480 --> 00:23:21,039
documentation would be

00:23:17,520 --> 00:23:22,000
really useful the other thing we're

00:23:21,039 --> 00:23:25,120
doing is

00:23:22,000 --> 00:23:27,919
leverage and leverage means rather than

00:23:25,120 --> 00:23:30,320
trying to fix one package at a time

00:23:27,919 --> 00:23:32,240
which i'm doing and so the folks from

00:23:30,320 --> 00:23:35,600
clear define are doing quite a bit too

00:23:32,240 --> 00:23:36,000
they're trying to create and in some

00:23:35,600 --> 00:23:39,840
cases

00:23:36,000 --> 00:23:42,640
help upstream to to fix their stuff

00:23:39,840 --> 00:23:43,679
is uh work with communities to fix

00:23:42,640 --> 00:23:46,720
things at large so

00:23:43,679 --> 00:23:50,480
i've been working for a while on a

00:23:46,720 --> 00:23:50,480
a pep

00:23:52,400 --> 00:23:58,960
for python which is being submitted now

00:23:56,400 --> 00:24:02,840
and reviewed as a draft

00:23:58,960 --> 00:24:06,720
the goal is to help a structure

00:24:02,840 --> 00:24:08,720
the license field used in python package

00:24:06,720 --> 00:24:11,200
metadata

00:24:08,720 --> 00:24:12,480
such that we can use structured spdx

00:24:11,200 --> 00:24:14,640
license expression which is something

00:24:12,480 --> 00:24:18,480
which you'll already use in open suse

00:24:14,640 --> 00:24:21,919
but it can go a very long way to provide

00:24:18,480 --> 00:24:25,600
again clarity uh in the

00:24:21,919 --> 00:24:27,840
license declaration and third is uh

00:24:25,600 --> 00:24:28,799
trying to to to do some outreach to

00:24:27,840 --> 00:24:32,240
like-minded

00:24:28,799 --> 00:24:34,159
like-minded licensed nerds um there's

00:24:32,240 --> 00:24:35,679
there's a group at the linux foundation

00:24:34,159 --> 00:24:37,919
for the earpenshin project

00:24:35,679 --> 00:24:38,960
and around spdx also which are there so

00:24:37,919 --> 00:24:40,720
we're trying to build a bit of a

00:24:38,960 --> 00:24:44,000
community around that to

00:24:40,720 --> 00:24:44,640
eventually help make this a non-issue

00:24:44,000 --> 00:24:48,320
and

00:24:44,640 --> 00:24:49,360
and sometimes maybe a couple years from

00:24:48,320 --> 00:24:50,880
now i could come and

00:24:49,360 --> 00:24:52,320
make the same presentation saying it's

00:24:50,880 --> 00:24:53,279
the very last time we're talking about

00:24:52,320 --> 00:24:58,080
license because

00:24:53,279 --> 00:24:58,080
it's longer an issue and

00:24:59,039 --> 00:25:05,520
that's that's it so now

00:25:02,159 --> 00:25:05,520
i'm gonna take some questions

00:25:07,279 --> 00:25:15,840
if if there are questions

00:25:16,480 --> 00:25:20,640
uh so richard braun is asking have you

00:25:19,120 --> 00:25:23,840
looked at cavill

00:25:20,640 --> 00:25:26,159
i'm pretty sure i have a fork of cavill

00:25:23,840 --> 00:25:27,600
but again i'm a code hoarder and i have

00:25:26,159 --> 00:25:30,159
20 000

00:25:27,600 --> 00:25:31,279
plus fork i've looked at cavilla i know

00:25:30,159 --> 00:25:34,640
cavill

00:25:31,279 --> 00:25:35,520
and if we look at here oh no i don't

00:25:34,640 --> 00:25:38,480
have a fork

00:25:35,520 --> 00:25:39,760
i'm sorry um i should have one but i'm

00:25:38,480 --> 00:25:42,400
pretty sure i have a clone if i don't

00:25:39,760 --> 00:25:42,400
have a fork

00:25:45,360 --> 00:25:49,039
yeah so cavill if i yeah if i recall i

00:25:47,840 --> 00:25:51,039
looked at it

00:25:49,039 --> 00:25:53,600
even recently actually it's built in by

00:25:51,039 --> 00:25:53,600
in perl

00:25:54,000 --> 00:25:57,520
i i think the the the thing about cavial

00:25:56,640 --> 00:25:59,200
would be great

00:25:57,520 --> 00:26:00,880
if you were to consider using for

00:25:59,200 --> 00:26:03,120
instance uh

00:26:00,880 --> 00:26:04,480
scan code toolkit as an engine for the

00:26:03,120 --> 00:26:05,600
license detection probably would be

00:26:04,480 --> 00:26:08,000
great

00:26:05,600 --> 00:26:09,440
uh because it will help you probably get

00:26:08,000 --> 00:26:11,120
a better

00:26:09,440 --> 00:26:13,600
set of license actions and what you can

00:26:11,120 --> 00:26:15,279
get there i may be

00:26:13,600 --> 00:26:16,960
having a lot of free breeze and saying

00:26:15,279 --> 00:26:19,840
it's going to be better

00:26:16,960 --> 00:26:21,279
but i think it's going to be better um i

00:26:19,840 --> 00:26:25,840
cannot prove it

00:26:21,279 --> 00:26:27,679
well i tested it a while back and cavill

00:26:25,840 --> 00:26:30,000
out sean especially with those lovely

00:26:27,679 --> 00:26:31,440
complicated ones where you've got

00:26:30,000 --> 00:26:33,440
you know like the examples you gave

00:26:31,440 --> 00:26:34,000
where you know declared license is one

00:26:33,440 --> 00:26:37,679
thing

00:26:34,000 --> 00:26:40,240
actual licenses like 20 different things

00:26:37,679 --> 00:26:41,600
but you know it wasn't like you know

00:26:40,240 --> 00:26:42,799
yeah i mean they're both aiming to do

00:26:41,600 --> 00:26:44,559
the same kind of thing

00:26:42,799 --> 00:26:46,480
yeah it's it's really worth having a

00:26:44,559 --> 00:26:48,400
look uh if anything

00:26:46,480 --> 00:26:49,600
uh the the things you can scavenge from

00:26:48,400 --> 00:26:52,799
scan code if you

00:26:49,600 --> 00:26:56,240
even if you don't want to use it

00:26:52,799 --> 00:26:59,600
to give you an id we we have a database

00:26:56,240 --> 00:27:03,520
here of 20

00:26:59,600 --> 00:27:06,799
plus thousand licensed texts and

00:27:03,520 --> 00:27:08,720
license notices which is what drives the

00:27:06,799 --> 00:27:10,480
detection and the div that scan code

00:27:08,720 --> 00:27:13,600
does

00:27:10,480 --> 00:27:17,600
sorry not the text

00:27:13,600 --> 00:27:17,600
where is it here and

00:27:18,559 --> 00:27:25,520
so you have a pair

00:27:21,679 --> 00:27:26,000
of a text file with a dot roll extension

00:27:25,520 --> 00:27:29,440
and a

00:27:26,000 --> 00:27:31,440
ml file so that's an example of a small

00:27:29,440 --> 00:27:34,640
license which is

00:27:31,440 --> 00:27:37,840
something that you found for whatever

00:27:34,640 --> 00:27:39,679
x binary in the it looks as

00:27:37,840 --> 00:27:41,600
pretty much as a bsd license but it

00:27:39,679 --> 00:27:43,679
happens to be its own license and you

00:27:41,600 --> 00:27:48,000
have a small yaml file side by side so

00:27:43,679 --> 00:27:49,919
you have about 20 000 each of them

00:27:48,000 --> 00:27:52,240
which can be useful in their own respect

00:27:49,919 --> 00:27:55,360
if you have any kind of pattern matching

00:27:52,240 --> 00:27:57,520
but the tool is uh is not too shabby it

00:27:55,360 --> 00:28:00,880
was selected by linux kernel maintainers

00:27:57,520 --> 00:28:02,640
uh in particular thomas gleissner

00:28:00,880 --> 00:28:04,320
after having checked everything else

00:28:02,640 --> 00:28:08,000
because it found it was

00:28:04,320 --> 00:28:10,080
doing the best uh there and um

00:28:08,000 --> 00:28:12,000
so cavill i'm not looking details but

00:28:10,080 --> 00:28:15,279
definitely if you want to

00:28:12,000 --> 00:28:16,000
to to discuss richard i i look forward

00:28:15,279 --> 00:28:19,440
to it and

00:28:16,000 --> 00:28:19,440
if if there's any way i can help

00:28:21,440 --> 00:28:25,520
there uh i'll be glad to

00:28:26,720 --> 00:28:31,840
any any other question

00:28:44,720 --> 00:28:48,399
okay so i can take a minute to fork

00:28:47,279 --> 00:28:51,679
cavill

00:28:48,399 --> 00:28:56,080
i'm pretty sure i have a i have

00:28:51,679 --> 00:28:57,520
a the

00:28:56,080 --> 00:28:58,559
the machine learning element of it now

00:28:57,520 --> 00:29:00,000
so there's a whole machine learning

00:28:58,559 --> 00:29:03,039
engine in there too

00:29:00,000 --> 00:29:04,720
um that that does wonders now for like

00:29:03,039 --> 00:29:06,399
especially those complicated ones

00:29:04,720 --> 00:29:08,640
so yeah figures out what previous

00:29:06,399 --> 00:29:10,240
reviews would were marked as if you know

00:29:08,640 --> 00:29:13,279
acceptable or not acceptable and

00:29:10,240 --> 00:29:14,320
does like a whole bunch of assessment

00:29:13,279 --> 00:29:17,600
itself which is

00:29:14,320 --> 00:29:18,559
scarily good good well that's great i

00:29:17,600 --> 00:29:21,120
look forward to

00:29:18,559 --> 00:29:21,760
to dive into it so the approach of scan

00:29:21,120 --> 00:29:25,840
code is

00:29:21,760 --> 00:29:29,760
is pretty brutal which is to

00:29:25,840 --> 00:29:33,520
do a pairwise diff between

00:29:29,760 --> 00:29:37,919
all the license we have here

00:29:33,520 --> 00:29:41,520
against and licensed or licensed notices

00:29:37,919 --> 00:29:43,360
against all the files that you scan

00:29:41,520 --> 00:29:44,880
and do it multiple times because you can

00:29:43,360 --> 00:29:47,200
have a

00:29:44,880 --> 00:29:49,279
license that show up more than once and

00:29:47,200 --> 00:29:51,679
you can have more than once

00:29:49,279 --> 00:29:53,360
one license in the file and one license

00:29:51,679 --> 00:29:56,320
may show up more than once

00:29:53,360 --> 00:29:58,880
and so the only trick there is if you

00:29:56,320 --> 00:29:58,880
think about

00:30:01,520 --> 00:30:07,760
there's there's about 20 000

00:30:04,559 --> 00:30:11,200
license files and notices the kernel

00:30:07,760 --> 00:30:14,559
which has about 60 000 files

00:30:11,200 --> 00:30:17,480
before it was uh converted to spdx

00:30:14,559 --> 00:30:18,559
identifiers you would have to do

00:30:17,480 --> 00:30:22,399
[Music]

00:30:18,559 --> 00:30:24,240
60 000 time 20 000 diffs

00:30:22,399 --> 00:30:25,520
but you want to do it more than once so

00:30:24,240 --> 00:30:29,440
yes say you do

00:30:25,520 --> 00:30:31,919
200 000 times 60 000 diff

00:30:29,440 --> 00:30:34,080
and and which would mean even with a

00:30:31,919 --> 00:30:37,200
super fast diff you could take

00:30:34,080 --> 00:30:40,000
a couple months and

00:30:37,200 --> 00:30:42,000
or you could have a thousand machines

00:30:40,000 --> 00:30:43,919
and do that in a couple hours

00:30:42,000 --> 00:30:45,440
which both cases is not practical so the

00:30:43,919 --> 00:30:47,039
whole trick there is to be able to do

00:30:45,440 --> 00:30:49,120
this kind of diff

00:30:47,039 --> 00:30:51,039
and and escu any any kind of

00:30:49,120 --> 00:30:53,840
probabilistic approach

00:30:51,039 --> 00:30:56,000
but do it in a reasonably efficient way

00:30:53,840 --> 00:30:56,880
in the very specialized case of license

00:30:56,000 --> 00:31:00,559
detection

00:30:56,880 --> 00:31:04,320
now on top of that if you have a way to

00:31:00,559 --> 00:31:06,720
do disambiguation with machine learning

00:31:04,320 --> 00:31:08,159
i think that could be helpful even in

00:31:06,720 --> 00:31:10,480
this case because

00:31:08,159 --> 00:31:19,840
you'd get more data and more labeled

00:31:10,480 --> 00:31:19,840
data as an input to your models

00:31:30,840 --> 00:31:35,440
okay

00:31:32,880 --> 00:31:36,399
okay so danielle is asking a question

00:31:35,440 --> 00:31:39,679
and says don't

00:31:36,399 --> 00:31:41,760
push doesn't push the honest onto

00:31:39,679 --> 00:31:42,559
developer to reverse parse the spdx

00:31:41,760 --> 00:31:46,000
stacks

00:31:42,559 --> 00:31:49,760
to read the license the code is under

00:31:46,000 --> 00:31:52,720
well yes and no

00:31:49,760 --> 00:31:54,880
take take this license we're just

00:31:52,720 --> 00:31:59,039
looking at for a second

00:31:54,880 --> 00:32:01,279
right whatever is this 3m microcode

00:31:59,039 --> 00:32:02,960
license about

00:32:01,279 --> 00:32:06,640
it doesn't have a well-known name right

00:32:02,960 --> 00:32:10,240
if you see something which says okay

00:32:06,640 --> 00:32:12,559
stricom microcode that's not something

00:32:10,240 --> 00:32:14,480
that rings a bell

00:32:12,559 --> 00:32:16,399
on the other hand if you see uh

00:32:14,480 --> 00:32:18,799
something which has a well-defined

00:32:16,399 --> 00:32:20,880
bsd3 closed bsd2 closed there's no

00:32:18,799 --> 00:32:23,919
beauty about it

00:32:20,880 --> 00:32:26,840
so being able to label a whole license

00:32:23,919 --> 00:32:28,640
uh i think makes it easier cleaner

00:32:26,840 --> 00:32:32,080
simpler

00:32:28,640 --> 00:32:34,799
in the end it's not much different than

00:32:32,080 --> 00:32:34,799
doing a

00:32:35,120 --> 00:32:38,240
when you use variable in the programming

00:32:36,399 --> 00:32:41,120
language you substituted

00:32:38,240 --> 00:32:42,799
the whole license text by a variable and

00:32:41,120 --> 00:32:44,799
and you ensure that

00:32:42,799 --> 00:32:46,720
you use the variable name as opposed to

00:32:44,799 --> 00:32:48,960
to use the full text or notices and

00:32:46,720 --> 00:32:51,600
variants of that

00:32:48,960 --> 00:32:53,760
the thing that if you think about what

00:32:51,600 --> 00:32:55,360
you have today so if you don't have an

00:32:53,760 --> 00:32:58,960
identifier

00:32:55,360 --> 00:33:01,039
or tool to detect that if you see this

00:32:58,960 --> 00:33:01,840
license your first reaction to say when

00:33:01,039 --> 00:33:05,039
i read that

00:33:01,840 --> 00:33:08,640
just at the first glance is to say oh

00:33:05,039 --> 00:33:10,559
this is a bsd yeah three closed bsd

00:33:08,640 --> 00:33:13,870
looks pretty straightforward

00:33:10,559 --> 00:33:15,679
blend no problem except that

00:33:13,870 --> 00:33:19,679
[Music]

00:33:15,679 --> 00:33:23,200
okay that's really easy that looks at it

00:33:19,679 --> 00:33:26,640
and oh okay

00:33:23,200 --> 00:33:28,559
and then you have whatever here

00:33:26,640 --> 00:33:30,640
is something specific about tricom so

00:33:28,559 --> 00:33:33,039
which three cam which is by the way

00:33:30,640 --> 00:33:34,000
that company but there's something which

00:33:33,039 --> 00:33:37,600
i have no idea

00:33:34,000 --> 00:33:38,159
is about where i need to sign probably

00:33:37,600 --> 00:33:41,840
my

00:33:38,159 --> 00:33:44,080
third-born child to strike

00:33:41,840 --> 00:33:45,919
to meet this this requirement so that's

00:33:44,080 --> 00:33:49,039
that's the purpose there

00:33:45,919 --> 00:33:52,080
using shorter code i think

00:33:49,039 --> 00:33:55,840
will always be easier than

00:33:52,080 --> 00:33:55,840
using longer text

00:33:56,240 --> 00:34:07,840
and it's a way to avoid reading the

00:33:57,919 --> 00:34:11,040
license text

00:34:07,840 --> 00:34:11,040
so that makes sense danielle

00:34:17,359 --> 00:34:22,639
okay so i'm

00:34:20,399 --> 00:34:23,520
if there's a question i'm i'm here

00:34:22,639 --> 00:34:26,560
otherwise

00:34:23,520 --> 00:34:28,800
uh i think it's late for a lot of us so

00:34:26,560 --> 00:34:28,800
uh

00:34:29,070 --> 00:34:31,679
[Music]

00:34:30,159 --> 00:34:35,839
we want new code to be under a good

00:34:31,679 --> 00:34:35,839
license yes yes we definitely want

00:34:38,399 --> 00:34:42,240
yes yeah so

00:34:45,119 --> 00:34:48,560
yeah so i'm gonna i'm gonna look at the

00:34:47,359 --> 00:34:51,520
drivers uh

00:34:48,560 --> 00:34:52,399
uh there's there's been are you talking

00:34:51,520 --> 00:34:55,599
specifically

00:34:52,399 --> 00:34:57,040
daniella yes so you're talking

00:34:55,599 --> 00:35:02,160
specifically about the kernel

00:34:57,040 --> 00:35:05,680
right i see

00:35:02,160 --> 00:35:07,040
so let me check um let's see if my mic

00:35:05,680 --> 00:35:10,960
works

00:35:07,040 --> 00:35:12,400
can you hear me yes okay

00:35:10,960 --> 00:35:14,560
i found the unmute button might be

00:35:12,400 --> 00:35:17,119
quicker than typing no i just jumped in

00:35:14,560 --> 00:35:19,599
because you know user source linux is uh

00:35:17,119 --> 00:35:21,119
is on my laptop uh and just looking

00:35:19,599 --> 00:35:23,920
there you know that

00:35:21,119 --> 00:35:24,960
and doing a grep for the tags that file

00:35:23,920 --> 00:35:30,720
just has

00:35:24,960 --> 00:35:33,119
that sp dx tag and says gpl 2.0 which

00:35:30,720 --> 00:35:34,800
is very clear for a machine but for

00:35:33,119 --> 00:35:37,200
someone taking a piece of code

00:35:34,800 --> 00:35:38,960
and using that as an inspiration to

00:35:37,200 --> 00:35:41,680
develop something else

00:35:38,960 --> 00:35:42,800
which means that that in this case viral

00:35:41,680 --> 00:35:45,200
gpl

00:35:42,800 --> 00:35:46,400
must be propagated onto the successor

00:35:45,200 --> 00:35:48,880
code

00:35:46,400 --> 00:35:49,839
i'm i'm slightly wary that some

00:35:48,880 --> 00:35:52,480
developers maybe

00:35:49,839 --> 00:35:54,880
will will not understand the

00:35:52,480 --> 00:35:57,680
ramifications of taking a free license

00:35:54,880 --> 00:35:58,000
and how they should make sure that their

00:35:57,680 --> 00:36:01,200
code

00:35:58,000 --> 00:36:03,359
is is similarly licensed as a derivative

00:36:01,200 --> 00:36:06,000
yeah you you have a good point but

00:36:03,359 --> 00:36:08,000
there's i i've already

00:36:06,000 --> 00:36:09,680
i've heard a few folks having the same

00:36:08,000 --> 00:36:13,920
the same problem there

00:36:09,680 --> 00:36:16,079
which is um if you think about

00:36:13,920 --> 00:36:17,520
well probably not that make file which

00:36:16,079 --> 00:36:20,320
probably didn't have that

00:36:17,520 --> 00:36:22,160
at all but if we look at the bigger file

00:36:20,320 --> 00:36:26,640
like that

00:36:22,160 --> 00:36:29,920
and i look at the

00:36:26,640 --> 00:36:29,920
the log for this

00:36:30,240 --> 00:36:40,960
and we look uh sufficiently far back

00:36:35,119 --> 00:36:43,200
maybe here if we're lucky um

00:36:40,960 --> 00:36:45,200
sorry my screen is not updating it are

00:36:43,200 --> 00:36:48,240
you updating your screen

00:36:45,200 --> 00:36:49,280
oh let me make sure i share i stopped

00:36:48,240 --> 00:36:52,160
sharing sorry

00:36:49,280 --> 00:36:53,599
so just have a big finish thank you yeah

00:36:52,160 --> 00:36:56,079
that's that wasn't me

00:36:53,599 --> 00:36:57,040
that's uh the previous talk too if you

00:36:56,079 --> 00:36:59,200
look at my screen

00:36:57,040 --> 00:37:00,720
you're probably able to see it right now

00:36:59,200 --> 00:37:04,880
yes i do now yep

00:37:00,720 --> 00:37:04,880
and if we're lucky uh

00:37:05,440 --> 00:37:12,720
oh that was already in spdx thing but so

00:37:08,640 --> 00:37:16,720
in the past you had a lot of

00:37:12,720 --> 00:37:19,200
longer notices and

00:37:16,720 --> 00:37:22,320
and so they have and they had you could

00:37:19,200 --> 00:37:25,440
say definitely an educative

00:37:22,320 --> 00:37:27,440
quality and value which is to inform

00:37:25,440 --> 00:37:30,480
more permanently about the fact it's a

00:37:27,440 --> 00:37:30,480
free software license

00:37:30,880 --> 00:37:34,960
so definitely that's that's a bit lost

00:37:35,200 --> 00:37:38,880
what's lost also is all the boilerplate

00:37:37,280 --> 00:37:44,320
about licensing

00:37:38,880 --> 00:37:44,320
uh which i have no love

00:37:44,800 --> 00:37:50,480
i have no love for in a sense uh

00:37:47,839 --> 00:37:52,960
so here there's no comment but more

00:37:50,480 --> 00:37:56,960
often it's more interesting to have

00:37:52,960 --> 00:37:58,960
a bit of blob that explains what uh

00:37:56,960 --> 00:38:01,280
what the code is about than having a

00:37:58,960 --> 00:38:02,640
long description of the license

00:38:01,280 --> 00:38:04,960
and the other thing in the case of the

00:38:02,640 --> 00:38:08,079
kernel is that they were

00:38:04,960 --> 00:38:10,880
a truckload and

00:38:08,079 --> 00:38:12,079
i won't use french words truckloads of

00:38:10,880 --> 00:38:16,880
licenses and really

00:38:12,079 --> 00:38:20,000
weird stuff and and so avoiding variety

00:38:16,880 --> 00:38:23,520
i think it's easier to understand

00:38:20,000 --> 00:38:26,160
so the other thing is that there's

00:38:23,520 --> 00:38:27,599
a project that's been working closely

00:38:26,160 --> 00:38:28,880
with that is a project from the free

00:38:27,599 --> 00:38:32,720
software foundation europe

00:38:28,880 --> 00:38:36,320
called reuse dot software

00:38:32,720 --> 00:38:39,359
which provides a bit more than just

00:38:36,320 --> 00:38:42,480
the the way to use spdx identifier but

00:38:39,359 --> 00:38:44,560
how to also provide

00:38:42,480 --> 00:38:45,760
documentation for the different licenses

00:38:44,560 --> 00:38:49,860
some of them which

00:38:45,760 --> 00:38:51,599
may not be known from spdx

00:38:49,860 --> 00:38:54,079
[Music]

00:38:51,599 --> 00:38:55,440
and so that's all documented in the

00:38:54,079 --> 00:38:57,040
documentation of the kernel and the

00:38:55,440 --> 00:38:58,839
process documentation

00:38:57,040 --> 00:39:01,839
you have what's called preferred

00:38:58,839 --> 00:39:05,040
licenses

00:39:01,839 --> 00:39:06,720
and you have other weird licenses no

00:39:05,040 --> 00:39:08,640
gpl one also there's quite a bit of them

00:39:06,720 --> 00:39:11,119
unfortunately

00:39:08,640 --> 00:39:13,200
which is the default when there's no

00:39:11,119 --> 00:39:13,760
version specified that's what the gpl

00:39:13,200 --> 00:39:16,720
says an

00:39:13,760 --> 00:39:18,320
older mpl11 and a bunch of exceptions

00:39:16,720 --> 00:39:20,960
and these these are the

00:39:18,320 --> 00:39:23,359
common licenses there's many more than

00:39:20,960 --> 00:39:26,160
these

00:39:23,359 --> 00:39:26,880
but in the documentation you have uh

00:39:26,160 --> 00:39:29,839
where is it in

00:39:26,880 --> 00:39:29,839
the process

00:39:30,560 --> 00:39:37,359
and license role so you have a whole

00:39:34,960 --> 00:39:38,560
document here which explains how it's

00:39:37,359 --> 00:39:42,880
being used

00:39:38,560 --> 00:39:45,839
and i i think it's

00:39:42,880 --> 00:39:46,400
it's it's better to have it in one place

00:39:45,839 --> 00:39:50,000
than in

00:39:46,400 --> 00:39:51,760
in 60 000 place frankly i cannot i

00:39:50,000 --> 00:39:54,880
cannot fathom one

00:39:51,760 --> 00:39:56,880
one reason why well the one

00:39:54,880 --> 00:39:58,160
you made is a good point which is you're

00:39:56,880 --> 00:40:02,480
losing a bit of the

00:39:58,160 --> 00:40:04,560
education educative quality um

00:40:02,480 --> 00:40:05,839
but in the case of the kernel where you

00:40:04,560 --> 00:40:07,839
have

00:40:05,839 --> 00:40:09,119
so many contributors i think it's it's a

00:40:07,839 --> 00:40:12,640
good thing to have

00:40:09,119 --> 00:40:15,760
something which is more uh structured

00:40:12,640 --> 00:40:15,760
than free form text

00:40:16,160 --> 00:40:21,680
the ultimate kind of defense to this or

00:40:19,359 --> 00:40:22,880
the big stick if you like is having seen

00:40:21,680 --> 00:40:26,079
the number of

00:40:22,880 --> 00:40:28,240
um of our peers who have been bought

00:40:26,079 --> 00:40:31,680
over the years that when

00:40:28,240 --> 00:40:34,960
company a gets acquired by company b

00:40:31,680 --> 00:40:37,440
company b's very expensive lawyers

00:40:34,960 --> 00:40:38,800
then make company a prove the provenance

00:40:37,440 --> 00:40:40,160
of every license

00:40:38,800 --> 00:40:42,800
and every piece of software that they've

00:40:40,160 --> 00:40:44,800
got in-house because company b

00:40:42,800 --> 00:40:46,400
is very very afraid that they will buy a

00:40:44,800 --> 00:40:48,960
real can of worms

00:40:46,400 --> 00:40:49,920
and i think that's why things like black

00:40:48,960 --> 00:40:52,640
deck for example

00:40:49,920 --> 00:40:55,520
in the kind of commercial space have

00:40:52,640 --> 00:40:57,359
become a lot more um

00:40:55,520 --> 00:40:58,880
widely known and widely used at that

00:40:57,359 --> 00:41:00,480
acquisition point

00:40:58,880 --> 00:41:02,400
so yeah if somebody's then robbed a bit

00:41:00,480 --> 00:41:05,680
of gpl2 code

00:41:02,400 --> 00:41:07,599
um made it their own

00:41:05,680 --> 00:41:09,200
deleted all of the headers or whatever

00:41:07,599 --> 00:41:11,359
something like that will

00:41:09,200 --> 00:41:12,880
will throw a big spanner in an

00:41:11,359 --> 00:41:15,280
acquisition

00:41:12,880 --> 00:41:16,160
yeah yeah that's that's a good point in

00:41:15,280 --> 00:41:19,359
practice you know

00:41:16,160 --> 00:41:21,520
the uh i've been involved quite a bit in

00:41:19,359 --> 00:41:24,319
in merchant acquisition due diligence

00:41:21,520 --> 00:41:24,319
for open source

00:41:24,640 --> 00:41:27,920
and we're we're competing against the

00:41:26,160 --> 00:41:30,000
company you're talking about

00:41:27,920 --> 00:41:32,400
but we're competing with free and open

00:41:30,000 --> 00:41:34,720
source tools

00:41:32,400 --> 00:41:36,160
which is rather different so we have

00:41:34,720 --> 00:41:40,000
also a very different approach

00:41:36,160 --> 00:41:44,240
on the way we we address the problem

00:41:40,000 --> 00:41:46,720
in practice what you see is

00:41:44,240 --> 00:41:48,800
really there's really a big issue of

00:41:46,720 --> 00:41:53,440
people borrowing and removing

00:41:48,800 --> 00:41:55,520
gpa headers it's it's a very rare event

00:41:53,440 --> 00:41:57,040
what happens more often than not is you

00:41:55,520 --> 00:42:00,079
have developers that

00:41:57,040 --> 00:42:00,079
are either

00:42:01,040 --> 00:42:07,040
so there's not much malice it's either

00:42:04,400 --> 00:42:09,280
incompetence or ignorance or a bit of

00:42:07,040 --> 00:42:09,280
both

00:42:09,440 --> 00:42:12,480
and usually when when you have things

00:42:11,440 --> 00:42:14,800
like that it's

00:42:12,480 --> 00:42:16,079
it's mostly that most of the time what

00:42:14,800 --> 00:42:18,400
you see is is

00:42:16,079 --> 00:42:19,520
people when they don't know about the

00:42:18,400 --> 00:42:21,920
license you know they

00:42:19,520 --> 00:42:23,520
they they leave a telltale they say oh i

00:42:21,920 --> 00:42:26,720
got this code from there

00:42:23,520 --> 00:42:27,200
i don't know what what it is or and but

00:42:26,720 --> 00:42:28,800
at least

00:42:27,200 --> 00:42:31,839
you know where it's from and you can

00:42:28,800 --> 00:42:31,839
then further the

00:42:32,800 --> 00:42:37,200
when you have incompetence and or

00:42:34,800 --> 00:42:40,800
ignorance it can be a problem because

00:42:37,200 --> 00:42:43,280
i've seen for instance companies that

00:42:40,800 --> 00:42:45,119
wanted to keep

00:42:43,280 --> 00:42:46,480
the drivers they were building for the

00:42:45,119 --> 00:42:48,480
hardware proprietary

00:42:46,480 --> 00:42:50,000
which i don't subscribe to but that's

00:42:48,480 --> 00:42:52,560
what they wanted to

00:42:50,000 --> 00:42:53,680
but then they they were building

00:42:52,560 --> 00:42:56,560
everything

00:42:53,680 --> 00:42:59,359
uh in kernel space where they could have

00:42:56,560 --> 00:43:00,880
done a bit more code in user space

00:42:59,359 --> 00:43:03,040
and not benefit maybe of all the

00:43:00,880 --> 00:43:05,359
performance of kernel space but

00:43:03,040 --> 00:43:07,920
be able to keep their property status

00:43:05,359 --> 00:43:07,920
there which is

00:43:09,119 --> 00:43:16,480
so ignorance and being able to to

00:43:12,880 --> 00:43:18,880
make the right choice then this case is

00:43:16,480 --> 00:43:21,920
is usually the biggest problem very

00:43:18,880 --> 00:43:21,920
rarely malice

00:43:22,240 --> 00:43:25,520
and the thing today is not even ignorant

00:43:24,480 --> 00:43:28,720
somalis is

00:43:25,520 --> 00:43:31,280
frankly the the speed at which

00:43:28,720 --> 00:43:32,319
everybody is releasing new software and

00:43:31,280 --> 00:43:35,200
the volume

00:43:32,319 --> 00:43:35,760
of packages that are being used means

00:43:35,200 --> 00:43:38,880
that

00:43:35,760 --> 00:43:41,520
it's it's a numbers game

00:43:38,880 --> 00:43:42,400
you want to make sure that at large you

00:43:41,520 --> 00:43:44,079
know more or less

00:43:42,400 --> 00:43:45,760
what you have and more or less what the

00:43:44,079 --> 00:43:47,440
license is and if you're able to do that

00:43:45,760 --> 00:43:50,160
that's pretty good enough

00:43:47,440 --> 00:43:50,800
in many cases and it's pretty hard to to

00:43:50,160 --> 00:43:54,640
achieve

00:43:50,800 --> 00:43:57,680
quite a fun

00:43:54,640 --> 00:43:57,680
okay thank you very much

00:43:57,839 --> 00:44:06,240
okay and i think it's uh it's really

00:44:01,119 --> 00:44:09,520
the end of the day uh oh

00:44:06,240 --> 00:44:11,040
ben cotton

00:44:09,520 --> 00:44:13,200
he says that's weird that it's still

00:44:11,040 --> 00:44:16,560
showing my last slide okay

00:44:13,200 --> 00:44:19,359
yeah uh yeah but uh

00:44:16,560 --> 00:44:20,960
you can see my screen too i hope so i

00:44:19,359 --> 00:44:24,240
guess that's it

00:44:20,960 --> 00:44:25,280
everyone thank you very much for your

00:44:24,240 --> 00:44:28,400
time

00:44:25,280 --> 00:44:29,119
and i wish you all a great day great

00:44:28,400 --> 00:44:32,000
evening

00:44:29,119 --> 00:44:32,000
or good night

00:44:32,400 --> 00:44:39,920
bye now

00:44:37,839 --> 00:44:39,920

YouTube URL: https://www.youtube.com/watch?v=SBO1c19E-sA


