Title: How to debug Writer, forwards and backwards
Publication date: 2020-11-04
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe â–ºhttp://bit.ly/1G2KKZl

Offical Website â–ºhttps://www.opensuse.org
Follow us on Twitter â–º https://twitter.com/openSUSE
Like us on Facebook â–º https://www.facebook.com/en.openSUSE
Captions: 
	00:00:01,839 --> 00:00:06,960
so we are going to

00:00:03,840 --> 00:00:09,440
try and debug some non-trivial

00:00:06,960 --> 00:00:10,000
writer back and we are going to do this

00:00:09,440 --> 00:00:13,920
by

00:00:10,000 --> 00:00:17,119
recording the execution of writer

00:00:13,920 --> 00:00:20,800
um where we first

00:00:17,119 --> 00:00:24,320
reproduce the bug and

00:00:20,800 --> 00:00:26,160
uh this is some

00:00:24,320 --> 00:00:28,160
video which i've recorded a couple of

00:00:26,160 --> 00:00:28,800
months ago and now i'm trying to

00:00:28,160 --> 00:00:33,039
remember

00:00:28,800 --> 00:00:33,039
what was going on so

00:00:33,200 --> 00:00:40,000
to reproduce the bug we select

00:00:36,719 --> 00:00:40,000
the entire document

00:00:40,399 --> 00:00:47,760
and then we copy the document

00:00:44,079 --> 00:00:51,120
and paste it while everything is still

00:00:47,760 --> 00:00:52,879
selected which will replace the entire

00:00:51,120 --> 00:00:56,160
content

00:00:52,879 --> 00:00:56,160
and then we

00:00:56,239 --> 00:01:02,399
push the unknow button and it's going to

00:01:00,000 --> 00:01:02,399
crash

00:01:03,280 --> 00:01:10,080
so now

00:01:06,720 --> 00:01:13,600
we use

00:01:10,080 --> 00:01:17,280
the r replay command to replay

00:01:13,600 --> 00:01:20,720
what we have recorded and this puts us

00:01:17,280 --> 00:01:23,840
at the gdp prompt

00:01:20,720 --> 00:01:27,439
and now we start to

00:01:23,840 --> 00:01:29,119
set a few well since it was crashing in

00:01:27,439 --> 00:01:32,479
undo we set a breakpoint

00:01:29,119 --> 00:01:36,000
on when anu actions are created

00:01:32,479 --> 00:01:39,040
in writer and now

00:01:36,000 --> 00:01:41,920
we um

00:01:39,040 --> 00:01:43,200
just continue the replay which is going

00:01:41,920 --> 00:01:46,320
to take a while

00:01:43,200 --> 00:01:47,840
by the way i've cut out uh quite a few

00:01:46,320 --> 00:01:49,759
chunks of the video where nothing

00:01:47,840 --> 00:01:53,600
interesting was happening

00:01:49,759 --> 00:01:56,640
so um yeah this sort of thing

00:01:53,600 --> 00:01:59,680
probably took longer and

00:01:56,640 --> 00:02:01,840
now we are at the

00:01:59,680 --> 00:02:04,560
point in time where the first undo

00:02:01,840 --> 00:02:07,040
action was created

00:02:04,560 --> 00:02:08,399
now we turn on logging about which more

00:02:07,040 --> 00:02:12,080
later

00:02:08,399 --> 00:02:15,440
and the back trace of

00:02:12,080 --> 00:02:17,680
uh the breakpoint indicates that

00:02:15,440 --> 00:02:18,959
this is a delete under action which

00:02:17,680 --> 00:02:20,560
makes sense

00:02:18,959 --> 00:02:22,239
as the first thing that actually

00:02:20,560 --> 00:02:26,000
modifies the document

00:02:22,239 --> 00:02:30,160
is that the selection

00:02:26,000 --> 00:02:34,800
that we pasted into is deleted

00:02:30,160 --> 00:02:37,519
so um the next undo action

00:02:34,800 --> 00:02:38,640
turns out that there are some uh flies

00:02:37,519 --> 00:02:42,080
that is floating

00:02:38,640 --> 00:02:43,840
um objects uh inside the document and

00:02:42,080 --> 00:02:47,440
for every one of these

00:02:43,840 --> 00:02:50,400
we get another an own

00:02:47,440 --> 00:02:52,480
undo action that is stored inside of the

00:02:50,400 --> 00:02:55,519
delete action

00:02:52,480 --> 00:02:59,360
which you can still see on the stack

00:02:55,519 --> 00:03:03,120
at frame six so yeah

00:02:59,360 --> 00:03:03,120
there are several of these

00:03:03,200 --> 00:03:09,840
and they will turn out to be quite

00:03:06,480 --> 00:03:09,840
uninteresting for this bug

00:03:10,560 --> 00:03:19,840
but yeah i'll have to wait through them

00:03:40,959 --> 00:03:44,480
and now we are an at another interesting

00:03:44,000 --> 00:03:47,200
point

00:03:44,480 --> 00:03:48,560
where the undo action for the paste is

00:03:47,200 --> 00:03:52,799
being created

00:03:48,560 --> 00:03:56,080
now the document is basically empty

00:03:52,799 --> 00:03:56,720
and the content from the clipboard

00:03:56,080 --> 00:04:01,840
document

00:03:56,720 --> 00:04:01,840
is being pasted

00:04:03,920 --> 00:04:08,080
and then we arrive at another under

00:04:07,040 --> 00:04:12,000
action

00:04:08,080 --> 00:04:12,720
which is again about fly objects that

00:04:12,000 --> 00:04:16,320
are being

00:04:12,720 --> 00:04:19,519
pasted this time and

00:04:16,320 --> 00:04:23,040
yeah at this point we um

00:04:19,519 --> 00:04:25,759
just express our disinterest

00:04:23,040 --> 00:04:27,199
in floating objects by disabling this

00:04:25,759 --> 00:04:32,400
breakpoint

00:04:27,199 --> 00:04:35,600
and now we continue and we arrive at the

00:04:32,400 --> 00:04:38,240
position where the crash happens

00:04:35,600 --> 00:04:40,639
which in this case is an assertion

00:04:38,240 --> 00:04:40,639
failure

00:04:41,280 --> 00:04:48,880
so now we look at the back trace

00:04:45,360 --> 00:04:52,560
to see where we crashed and

00:04:48,880 --> 00:04:55,440
if you look at frame number four we are

00:04:52,560 --> 00:04:57,680
currently trying to set a field mark

00:04:55,440 --> 00:05:00,720
into the document

00:04:57,680 --> 00:05:01,840
and the field mark is a kind of bookmark

00:05:00,720 --> 00:05:06,160
that represents

00:05:01,840 --> 00:05:06,160
a word compatible text field

00:05:07,360 --> 00:05:11,919
so now we are going to look at this

00:05:10,160 --> 00:05:14,160
object in detail

00:05:11,919 --> 00:05:15,120
and the most interesting bits here are

00:05:14,160 --> 00:05:18,400
the s

00:05:15,120 --> 00:05:19,360
m and start node and m and start content

00:05:18,400 --> 00:05:22,800
members

00:05:19,360 --> 00:05:26,880
these indicate the position um

00:05:22,800 --> 00:05:31,600
where the field mark is being inserted

00:05:26,880 --> 00:05:31,600
and also endnote and and content

00:05:35,199 --> 00:05:41,199
now we are trying to have a look at

00:05:38,400 --> 00:05:42,800
what is actually there in the document

00:05:41,199 --> 00:05:45,360
at this position

00:05:42,800 --> 00:05:45,840
and it turns out that the node there is

00:05:45,360 --> 00:05:49,280
an

00:05:45,840 --> 00:05:53,840
endnote which is obviously incorrect

00:05:49,280 --> 00:05:53,840
because an endnote cannot contain

00:05:54,000 --> 00:06:01,120
field marks or any text at all

00:05:58,000 --> 00:06:04,800
so now the question is

00:06:01,120 --> 00:06:07,759
where is this object being created

00:06:04,800 --> 00:06:08,720
what was the state at that point and to

00:06:07,759 --> 00:06:11,440
find out

00:06:08,720 --> 00:06:12,080
we are going to use a very interesting

00:06:11,440 --> 00:06:16,000
feature of

00:06:12,080 --> 00:06:18,400
r um which is we are going to set a

00:06:16,000 --> 00:06:18,840
breakpoint conditional on the address of

00:06:18,400 --> 00:06:21,759
the

00:06:18,840 --> 00:06:23,039
object and then we are going to reverse

00:06:21,759 --> 00:06:26,400
continue

00:06:23,039 --> 00:06:28,800
which is extremely useful

00:06:26,400 --> 00:06:30,240
so this basically runs the program in

00:06:28,800 --> 00:06:33,520
reverse

00:06:30,240 --> 00:06:35,199
and every time when we switch the

00:06:33,520 --> 00:06:36,880
direction which the program has been

00:06:35,199 --> 00:06:38,720
being executed we

00:06:36,880 --> 00:06:41,680
it will just the first time stop

00:06:38,720 --> 00:06:44,960
immediately at the position where away

00:06:41,680 --> 00:06:45,680
where you already are so you have to do

00:06:44,960 --> 00:06:48,800
it twice

00:06:45,680 --> 00:06:52,240
in that case and well

00:06:48,800 --> 00:06:55,280
we end up at

00:06:52,240 --> 00:06:58,800
the uh in the constructor of this

00:06:55,280 --> 00:07:02,240
object that was later causing the crash

00:06:58,800 --> 00:07:02,800
and now we see that in frame number

00:07:02,240 --> 00:07:05,840
three

00:07:02,800 --> 00:07:06,800
is sw undo delete so this object is

00:07:05,840 --> 00:07:12,000
being created

00:07:06,800 --> 00:07:12,000
as part of the delete undo object

00:07:14,880 --> 00:07:23,199
and now we switch to gdb's text

00:07:19,280 --> 00:07:30,319
user interface tui to

00:07:23,199 --> 00:07:34,319
step through the code a little bit um

00:07:30,319 --> 00:07:34,319
you can switch with control a

00:07:37,120 --> 00:07:40,319
and now that the object is initialized

00:07:39,680 --> 00:07:42,479
we

00:07:40,319 --> 00:07:43,520
print its members and we see that they

00:07:42,479 --> 00:07:45,840
have exactly

00:07:43,520 --> 00:07:49,280
the same value that they had at the

00:07:45,840 --> 00:07:49,280
point when the crash happened

00:07:51,440 --> 00:07:58,879
and then we look at the node

00:07:54,960 --> 00:08:03,280
that is at this index

00:07:58,879 --> 00:08:06,400
and for sure it's not an end node

00:08:03,280 --> 00:08:08,879
it turns out it is a text node

00:08:06,400 --> 00:08:09,919
so at this point in time the document

00:08:08,879 --> 00:08:13,840
looked different

00:08:09,919 --> 00:08:13,840
than at the time when the crash happened

00:08:14,080 --> 00:08:19,599
and now we try to look at the actual

00:08:16,400 --> 00:08:22,400
text in the text node

00:08:19,599 --> 00:08:24,479
um unfortunately this is not as

00:08:22,400 --> 00:08:26,400
convenient as it could be

00:08:24,479 --> 00:08:29,440
and we see here the three magic

00:08:26,400 --> 00:08:31,919
characters ctrl a

00:08:29,440 --> 00:08:32,800
ctrl whatever that is and ctrl b at the

00:08:31,919 --> 00:08:36,320
end

00:08:32,800 --> 00:08:37,680
that uh indicate the start position

00:08:36,320 --> 00:08:41,760
separator position

00:08:37,680 --> 00:08:43,839
and end position of a field mark in text

00:08:41,760 --> 00:08:45,760
now we're going to take a look at the

00:08:43,839 --> 00:08:47,120
most important data structure of a

00:08:45,760 --> 00:08:50,640
writer document

00:08:47,120 --> 00:08:54,000
the nodes array and

00:08:50,640 --> 00:08:56,959
because this is a very large document

00:08:54,000 --> 00:08:57,600
it's going to be quite inconvenient to

00:08:56,959 --> 00:09:01,120
look at it

00:08:57,600 --> 00:09:03,920
in the terminal so that's why we

00:09:01,120 --> 00:09:05,120
turned on the logging in gdb so we can

00:09:03,920 --> 00:09:08,399
now look at the log

00:09:05,120 --> 00:09:11,519
in a text editor which has far more

00:09:08,399 --> 00:09:14,720
useful search features

00:09:11,519 --> 00:09:17,760
and we quickly find the

00:09:14,720 --> 00:09:22,000
node that contains the field mark

00:09:17,760 --> 00:09:24,640
by searching for its index and um

00:09:22,000 --> 00:09:27,200
here we can see that it's surrounded by

00:09:24,640 --> 00:09:30,880
start nodes and endnotes

00:09:27,200 --> 00:09:33,120
and um the nodes array contains

00:09:30,880 --> 00:09:35,200
a tree structure essentially that is

00:09:33,120 --> 00:09:38,000
encoded into the array

00:09:35,200 --> 00:09:39,839
via start nodes and endnotes that

00:09:38,000 --> 00:09:43,680
indicate the nesting level

00:09:39,839 --> 00:09:46,080
so typically in this case

00:09:43,680 --> 00:09:47,680
what you are looking at is a table and

00:09:46,080 --> 00:09:51,120
the start nodes and endnotes

00:09:47,680 --> 00:09:53,839
are table cells now we have continued to

00:09:51,120 --> 00:09:55,680
the place where the crash happens and

00:09:53,839 --> 00:09:59,279
printed the nodes array

00:09:55,680 --> 00:10:03,920
at that time and now we can compare

00:09:59,279 --> 00:10:06,800
these two node arrays in the

00:10:03,920 --> 00:10:07,440
text editor from the log file and we can

00:10:06,800 --> 00:10:10,560
see

00:10:07,440 --> 00:10:13,920
that yes indeed the index

00:10:10,560 --> 00:10:17,440
of this text node is different than

00:10:13,920 --> 00:10:17,440
what it used to be previously

00:10:17,600 --> 00:10:24,000
and now we are going to

00:10:20,720 --> 00:10:26,480
um take a look um

00:10:24,000 --> 00:10:27,519
to see what other difference there might

00:10:26,480 --> 00:10:30,000
be

00:10:27,519 --> 00:10:32,240
and the first question is what about

00:10:30,000 --> 00:10:36,079
this table does it still start

00:10:32,240 --> 00:10:40,320
in the same position and we can see that

00:10:36,079 --> 00:10:46,560
the table node is also

00:10:40,320 --> 00:10:49,760
shifted by one position

00:10:46,560 --> 00:10:53,839
apparently um the

00:10:49,760 --> 00:10:57,200
previous table which you can see

00:10:53,839 --> 00:11:01,040
up here its last text node is

00:10:57,200 --> 00:11:03,200
still at the same position as before

00:11:01,040 --> 00:11:04,079
and it's followed by three end nodes

00:11:03,200 --> 00:11:07,279
that

00:11:04,079 --> 00:11:10,720
indicate the end of the table

00:11:07,279 --> 00:11:14,000
and then we have this

00:11:10,720 --> 00:11:17,440
here section node which existed

00:11:14,000 --> 00:11:21,120
previously but now when the crash

00:11:17,440 --> 00:11:24,320
happens there is no section node anymore

00:11:21,120 --> 00:11:28,560
and this is the difference

00:11:24,320 --> 00:11:31,440
why it's crashing so

00:11:28,560 --> 00:11:33,040
now the question is why is there no

00:11:31,440 --> 00:11:36,240
section note anymore

00:11:33,040 --> 00:11:36,640
and if there is a section node there

00:11:36,240 --> 00:11:40,000
should

00:11:36,640 --> 00:11:43,360
also be a matching endnote somewhere

00:11:40,000 --> 00:11:46,399
so we are going to have a look at the

00:11:43,360 --> 00:11:51,120
end of the document now

00:11:46,399 --> 00:11:51,120
to see what the situation is like there

00:11:51,279 --> 00:11:55,200
and we see that the size of the document

00:11:54,480 --> 00:12:00,079
differs

00:11:55,200 --> 00:12:00,079
by just one node

00:12:04,000 --> 00:12:08,800
and there is actually a section node

00:12:08,839 --> 00:12:15,839
there

00:12:11,839 --> 00:12:19,200
so another interesting question is what

00:12:15,839 --> 00:12:22,240
did the document look like

00:12:19,200 --> 00:12:25,279
at the start

00:12:22,240 --> 00:12:28,560
of the delete undo actions

00:12:25,279 --> 00:12:39,839
undo so we are going to

00:12:28,560 --> 00:12:39,839
take a look at that next

00:12:43,519 --> 00:12:49,920
and by the way this notes array

00:12:46,880 --> 00:12:53,040
is printed by some hundred lines of

00:12:49,920 --> 00:12:57,920
custom python code that is

00:12:53,040 --> 00:13:01,360
loaded by gdb it creates this nice

00:12:57,920 --> 00:13:07,839
indentation to indicate the nesting

00:13:01,360 --> 00:13:11,519
level of the nodes

00:13:07,839 --> 00:13:16,770
so we reverse continue to the

00:13:11,519 --> 00:13:18,839
start of the undo execution

00:13:16,770 --> 00:13:21,839
[Music]

00:13:18,839 --> 00:13:25,839
and

00:13:21,839 --> 00:13:35,839
it turns out that

00:13:25,839 --> 00:13:35,839
we see here a section note at index 19.

00:13:41,680 --> 00:13:48,639
now we look if this is

00:13:45,600 --> 00:13:50,240
the same section node as we can see in

00:13:48,639 --> 00:13:55,600
the

00:13:50,240 --> 00:13:59,920
other points in time

00:13:55,600 --> 00:13:59,920
and we see that yes indeed it is

00:14:00,079 --> 00:14:03,440
and that the difference between these

00:14:02,800 --> 00:14:06,959
two

00:14:03,440 --> 00:14:10,160
is that it used to be

00:14:06,959 --> 00:14:13,120
before the table but

00:14:10,160 --> 00:14:17,839
at the time where it crashes it is after

00:14:13,120 --> 00:14:17,839
the table

00:14:29,440 --> 00:14:34,639
and then what actually is the difference

00:14:31,600 --> 00:14:34,639
here between these two

00:14:36,320 --> 00:14:44,240
if you look at the lower document

00:14:40,240 --> 00:14:47,680
then it has an additional text node

00:14:44,240 --> 00:14:59,839
just previews

00:14:47,680 --> 00:14:59,839
to the section node

00:15:28,560 --> 00:15:35,279
and if we search for this node pointer

00:15:31,839 --> 00:15:38,320
then we don't find it anywhere except

00:15:35,279 --> 00:15:41,600
here so it looks like this

00:15:38,320 --> 00:15:44,639
is indeed a the

00:15:41,600 --> 00:15:47,040
the extra node that is also part of the

00:15:44,639 --> 00:15:47,040
problem

00:15:52,839 --> 00:15:55,839
here

00:16:05,519 --> 00:16:10,240
so a few general points about the notes

00:16:08,320 --> 00:16:13,360
array if you look at the one that is

00:16:10,240 --> 00:16:16,800
visible in the terminal then the

00:16:13,360 --> 00:16:20,880
body text starts at node

00:16:16,800 --> 00:16:24,399
17 and goes until node

00:16:20,880 --> 00:16:26,959
22 and there's just

00:16:24,399 --> 00:16:28,320
two text notes and a section in the body

00:16:26,959 --> 00:16:31,759
of the document

00:16:28,320 --> 00:16:34,959
everything preceding that is special

00:16:31,759 --> 00:16:37,920
things like text frames and

00:16:34,959 --> 00:16:39,600
um there is an only node in there so

00:16:37,920 --> 00:16:43,199
that that means there is some

00:16:39,600 --> 00:16:43,199
embedded object in the document

00:16:43,279 --> 00:16:47,279
the other special top level sections

00:16:45,839 --> 00:16:51,040
might contain things like

00:16:47,279 --> 00:16:53,680
footnotes or tracked changes

00:16:51,040 --> 00:16:56,240
but there are no such things in this

00:16:53,680 --> 00:16:56,240
document

00:16:58,480 --> 00:17:05,120
so what are we going to do next

00:17:02,320 --> 00:17:05,600
we are going to have a bit of a look at

00:17:05,120 --> 00:17:08,720
the

00:17:05,600 --> 00:17:12,640
code inside of the undo

00:17:08,720 --> 00:17:15,760
implementation for sw undo delete

00:17:12,640 --> 00:17:20,240
and see um

00:17:15,760 --> 00:17:20,240
the many interesting things that it does

00:17:23,839 --> 00:17:27,120
so this is the point at which it

00:17:26,079 --> 00:17:30,799
restores the

00:17:27,120 --> 00:17:31,679
sw history which contains various things

00:17:30,799 --> 00:17:35,120
such as

00:17:31,679 --> 00:17:38,559
deleted flies

00:17:35,120 --> 00:17:41,760
and bookmarks and whatnot

00:17:38,559 --> 00:17:42,400
and here this was the code that handled

00:17:41,760 --> 00:17:44,960
the start

00:17:42,400 --> 00:17:46,559
node and here is some code handling

00:17:44,960 --> 00:17:50,000
special cases

00:17:46,559 --> 00:17:53,360
where sections are being inserted

00:17:50,000 --> 00:17:56,559
or deleted and here is

00:17:53,360 --> 00:18:01,840
another yet different case that handles

00:17:56,559 --> 00:18:01,840
section nodes

00:18:04,080 --> 00:18:09,039
and this is the part that handles the

00:18:06,480 --> 00:18:09,039
end node

00:18:11,600 --> 00:18:14,720
and there are a couple of different

00:18:13,840 --> 00:18:18,240
members

00:18:14,720 --> 00:18:29,840
that are in the sw unl delete object

00:18:18,240 --> 00:18:29,840
that are for these various special cases

00:18:32,080 --> 00:18:43,760
here once the model has been updated

00:18:36,240 --> 00:18:45,679
the layer is being recreated

00:18:43,760 --> 00:18:49,679
but well we didn't even get to that

00:18:45,679 --> 00:18:49,679
point so that's not where the bug is

00:18:54,840 --> 00:18:57,840
anyway

00:19:02,640 --> 00:19:08,240
so now we look at the object itself and

00:19:05,760 --> 00:19:08,240
we see

00:19:08,840 --> 00:19:13,600
that

00:19:10,160 --> 00:19:16,880
this would be one of these special cases

00:19:13,600 --> 00:19:21,280
we don't have

00:19:16,880 --> 00:19:21,280
a valid pointer here

00:19:21,600 --> 00:19:24,640
and we see there are these members like

00:19:23,760 --> 00:19:27,919
mnsect

00:19:24,640 --> 00:19:31,760
diff mn replace dummy and

00:19:27,919 --> 00:19:33,280
so on and this table there last note and

00:19:31,760 --> 00:19:36,840
del full power

00:19:33,280 --> 00:19:39,840
and none of these special cases are

00:19:36,840 --> 00:19:39,840
active

00:19:43,760 --> 00:19:53,840
so it looks like a plain ordinary delete

00:20:03,679 --> 00:20:09,440
the delete undo has lots of

00:20:06,880 --> 00:20:10,640
individual steps and they all have to be

00:20:09,440 --> 00:20:13,039
done in

00:20:10,640 --> 00:20:14,720
a particular order because some of them

00:20:13,039 --> 00:20:18,400
depend on previous steps

00:20:14,720 --> 00:20:19,440
and yeah if the order is not the right

00:20:18,400 --> 00:20:23,280
one then

00:20:19,440 --> 00:20:23,280
you'll have problems

00:20:23,679 --> 00:20:31,440
um yeah but um

00:20:27,200 --> 00:20:31,440
another interesting question here is

00:20:31,760 --> 00:20:38,000
about this notes array at the start of

00:20:35,280 --> 00:20:38,000
the undo

00:20:39,919 --> 00:20:46,559
is it actually looking plausible

00:20:43,360 --> 00:20:49,919
or not because

00:20:46,559 --> 00:20:51,840
that would indicate whether the delete

00:20:49,919 --> 00:20:54,159
under action

00:20:51,840 --> 00:20:55,200
is the one that has the problem or

00:20:54,159 --> 00:20:58,480
whether the

00:20:55,200 --> 00:21:00,400
um paste undo action is the one that has

00:20:58,480 --> 00:21:03,520
the problem

00:21:00,400 --> 00:21:06,640
and if you look at it here now in

00:21:03,520 --> 00:21:11,440
the lower pane of the

00:21:06,640 --> 00:21:15,280
text editor then we see that there are

00:21:11,440 --> 00:21:17,840
um two text notes

00:21:15,280 --> 00:21:19,120
in the body of the document one is

00:21:17,840 --> 00:21:22,159
inside of a section

00:21:19,120 --> 00:21:25,600
and the other one is outside of sec

00:21:22,159 --> 00:21:29,440
of the section and this

00:21:25,600 --> 00:21:32,480
is maybe

00:21:29,440 --> 00:21:36,559
a bit suspicious because

00:21:32,480 --> 00:21:42,000
um the paste

00:21:36,559 --> 00:21:45,120
would have been executed after the

00:21:42,000 --> 00:21:47,360
after the document has been deleted

00:21:45,120 --> 00:21:50,559
completely and at that point

00:21:47,360 --> 00:21:52,240
there should really be only one text

00:21:50,559 --> 00:21:55,520
node in the document

00:21:52,240 --> 00:21:59,440
left over and if the

00:21:55,520 --> 00:22:02,720
undo of the um paste

00:21:59,440 --> 00:22:07,280
has created a notes array which has two

00:22:02,720 --> 00:22:10,080
text notes then it is a bit suspicious

00:22:07,280 --> 00:22:10,960
so now we are going to look at the

00:22:10,080 --> 00:22:14,000
situation

00:22:10,960 --> 00:22:19,760
when the undo

00:22:14,000 --> 00:22:19,760
action for the paste was created

00:22:20,480 --> 00:22:27,120
and we go a bit up the stack to

00:22:23,600 --> 00:22:30,559
see the code that

00:22:27,120 --> 00:22:31,440
is in sw dock that creates this a new

00:22:30,559 --> 00:22:34,960
action it is

00:22:31,440 --> 00:22:38,240
created before the paste

00:22:34,960 --> 00:22:41,840
is executed so before anything is

00:22:38,240 --> 00:22:41,840
inserted into the document

00:22:43,760 --> 00:22:47,520
and it has passed just the insert

00:22:46,320 --> 00:22:50,880
position

00:22:47,520 --> 00:22:53,120
and the way it works is that

00:22:50,880 --> 00:22:54,400
there is a separate update function for

00:22:53,120 --> 00:22:58,000
this under object

00:22:54,400 --> 00:22:58,640
that is called later after the content

00:22:58,000 --> 00:23:01,280
has been

00:22:58,640 --> 00:23:01,280
inserted

00:23:02,480 --> 00:23:06,240
and at this point in time before

00:23:05,039 --> 00:23:08,960
anything is inserted

00:23:06,240 --> 00:23:09,679
the nodes array looks like this so we

00:23:08,960 --> 00:23:13,280
see that

00:23:09,679 --> 00:23:14,000
in the body there is just one text node

00:23:13,280 --> 00:23:17,520
inside of

00:23:14,000 --> 00:23:20,960
a section node so there there is

00:23:17,520 --> 00:23:24,720
no um text node preceding

00:23:20,960 --> 00:23:26,000
the section node but still inside the

00:23:24,720 --> 00:23:28,960
body

00:23:26,000 --> 00:23:29,679
the only other text node is node number

00:23:28,960 --> 00:23:34,159
6 which

00:23:29,679 --> 00:23:34,159
is in some sort of text frame

00:23:35,440 --> 00:23:37,840
so

00:23:38,640 --> 00:23:43,039
we have continued until the paste has

00:23:42,240 --> 00:23:44,880
been

00:23:43,039 --> 00:23:46,240
executed and the content has been

00:23:44,880 --> 00:23:50,080
inserted into

00:23:46,240 --> 00:23:52,640
the document now we have the

00:23:50,080 --> 00:23:53,679
situation uh before the content was

00:23:52,640 --> 00:23:56,880
inserted

00:23:53,679 --> 00:24:00,240
in the bottom viewport of the editor

00:23:56,880 --> 00:24:03,279
and we want to look at

00:24:00,240 --> 00:24:06,559
the situation now

00:24:03,279 --> 00:24:07,200
that the content has been inserted so we

00:24:06,559 --> 00:24:19,840
print

00:24:07,200 --> 00:24:19,840
the notes array again

00:24:36,400 --> 00:24:40,159
and now we look at the nodes

00:24:40,960 --> 00:24:50,799
we try to find our node there and

00:24:46,960 --> 00:24:53,279
well it's not there

00:24:50,799 --> 00:24:55,760
somehow we find the previous notes

00:24:53,279 --> 00:24:55,760
arrays

00:24:56,080 --> 00:25:01,840
this is weird

00:25:05,600 --> 00:25:08,799
so somehow there are lots of nodes in

00:25:07,760 --> 00:25:11,120
this document

00:25:08,799 --> 00:25:11,120
but

00:25:12,640 --> 00:25:19,600
the node addresses are not the same

00:25:15,760 --> 00:25:19,600
as previously

00:25:24,320 --> 00:25:30,799
oh well the problem was that we

00:25:28,320 --> 00:25:32,559
were looking at the wrong documents

00:25:30,799 --> 00:25:35,520
notes array

00:25:32,559 --> 00:25:36,799
this is the notes area of the temporary

00:25:35,520 --> 00:25:40,320
clipboard document

00:25:36,799 --> 00:25:44,080
and not of the real document

00:25:40,320 --> 00:25:44,960
so yeah well sorry for wasting a bit of

00:25:44,080 --> 00:25:46,799
time but

00:25:44,960 --> 00:25:48,480
uh this sort of thing tends to happen

00:25:46,799 --> 00:25:51,440
when debugging

00:25:48,480 --> 00:25:52,320
so now we need to look where we can get

00:25:51,440 --> 00:25:57,840
the

00:25:52,320 --> 00:25:57,840
real notary from

00:25:58,320 --> 00:26:02,080
and apparently this copy function is

00:26:00,960 --> 00:26:06,559
called

00:26:02,080 --> 00:26:10,400
on the sw dock of the

00:26:06,559 --> 00:26:14,000
source documents but the insert position

00:26:10,400 --> 00:26:16,480
parameter must of course know the target

00:26:14,000 --> 00:26:25,840
document

00:26:16,480 --> 00:26:25,840
now we take a look at what is going on

00:26:30,559 --> 00:26:34,320
and we see that inside the body the very

00:26:33,840 --> 00:26:37,760
first

00:26:34,320 --> 00:26:41,039
node is a text node preceding

00:26:37,760 --> 00:26:41,039
a section node

00:26:43,039 --> 00:26:47,360
and then at the end of the document

00:26:51,039 --> 00:26:55,440
there is a text node followed by a

00:26:53,840 --> 00:27:07,840
section node followed by

00:26:55,440 --> 00:27:07,840
another text node inside the section

00:27:14,559 --> 00:27:22,399
and if you look closely at the address

00:27:17,679 --> 00:27:26,480
of this text node with index 3760

00:27:22,399 --> 00:27:30,799
it also exists in the

00:27:26,480 --> 00:27:33,520
middle nodes array but it does not

00:27:30,799 --> 00:27:36,080
exist in the one that is a second from

00:27:33,520 --> 00:27:36,080
the bottom

00:27:39,520 --> 00:27:48,559
so it was inserted by this paste

00:27:43,440 --> 00:27:52,320
operation and the middle

00:27:48,559 --> 00:27:55,360
viewport was from the time when

00:27:52,320 --> 00:28:00,840
the undo of the

00:27:55,360 --> 00:28:03,440
sw inserts had run had finished

00:28:00,840 --> 00:28:06,880
and it's still there

00:28:03,440 --> 00:28:17,840
so it was not deleted by the undo

00:28:06,880 --> 00:28:17,840
of sw undo inserts

00:28:18,159 --> 00:28:25,120
now we continue until

00:28:22,080 --> 00:28:29,520
the time when the unlu of the

00:28:25,120 --> 00:28:30,159
paste is executed so that we can have a

00:28:29,520 --> 00:28:34,480
look

00:28:30,159 --> 00:28:34,480
at what is going on there

00:28:40,000 --> 00:28:45,840
and we step through the code

00:29:06,399 --> 00:29:12,640
start to take a look at the member

00:29:08,960 --> 00:29:16,360
variables of the object

00:29:12,640 --> 00:29:19,360
we see the node index

00:29:16,360 --> 00:29:19,360
00:29:20,480 --> 00:29:26,799
as the end position of the insert

00:29:23,679 --> 00:29:30,480
so this would presumably be the last

00:29:26,799 --> 00:29:30,480
note that has been inserted

00:29:36,320 --> 00:29:43,679
but it is also a node that has been

00:29:40,080 --> 00:29:55,840
inserted it did not exist

00:29:43,679 --> 00:29:55,840
previous to the insertion

00:30:11,679 --> 00:30:19,440
so here the nodes

00:30:15,279 --> 00:30:21,600
are moved from the documents nodes array

00:30:19,440 --> 00:30:25,120
into a separate nodes array

00:30:21,600 --> 00:30:37,840
that stores content that is preserved

00:30:25,120 --> 00:30:37,840
for undo

00:30:46,320 --> 00:30:48,880
and here

00:30:49,440 --> 00:31:05,840
one of the nodes is being deleted

00:31:09,279 --> 00:31:14,320
and this would be a text node that is

00:31:11,519 --> 00:31:14,320
being deleted

00:31:16,000 --> 00:31:20,559
now we want to step backward a bit to

00:31:18,799 --> 00:31:24,159
see

00:31:20,559 --> 00:31:24,159
which node it was

00:31:30,880 --> 00:31:47,840
reverse next is a bit slower than

00:31:33,919 --> 00:31:47,840
next but it does work

00:31:55,600 --> 00:32:01,840
now the node that is being deleted is

00:31:57,919 --> 00:32:01,840
the one with index 18.

00:32:13,919 --> 00:32:20,480
so it is the one at the start

00:32:17,120 --> 00:32:24,559
of the um andu

00:32:20,480 --> 00:32:26,640
range that we saw printed earlier if you

00:32:24,559 --> 00:32:30,000
remember the sw

00:32:26,640 --> 00:32:33,360
and orange base class

00:32:30,000 --> 00:32:43,840
of the sw undo inserts

00:32:33,360 --> 00:32:43,840
and its members

00:33:08,480 --> 00:33:11,840
now we try to find the node in our

00:33:11,200 --> 00:33:15,120
previous

00:33:11,840 --> 00:33:18,320
print out but it

00:33:15,120 --> 00:33:20,720
does exist despite us not finding it and

00:33:18,320 --> 00:33:21,840
the explanation for this is multiple

00:33:20,720 --> 00:33:23,600
inheritance

00:33:21,840 --> 00:33:26,480
the top level node class is not the

00:33:23,600 --> 00:33:28,960
first base class of sw text node

00:33:26,480 --> 00:33:30,640
and here we want to set a breakpoint in

00:33:28,960 --> 00:33:34,080
the constructor

00:33:30,640 --> 00:33:38,080
a conditional on the node address and

00:33:34,080 --> 00:33:41,679
it is important to set this

00:33:38,080 --> 00:33:46,320
on the sw note constructor and not

00:33:41,679 --> 00:33:50,320
on its subclasses because

00:33:46,320 --> 00:33:53,919
um the addresses that are printed here

00:33:50,320 --> 00:33:55,360
in the uh from the sw notes array rsw

00:33:53,919 --> 00:33:58,960
node addresses and these

00:33:55,360 --> 00:33:59,600
um these types use multiple inheritance

00:33:58,960 --> 00:34:01,600
so the

00:33:59,600 --> 00:34:04,640
subclasses don't necessarily have the

00:34:01,600 --> 00:34:04,640
same this pointer

00:34:05,120 --> 00:34:08,720
now we reverse continue to where this

00:34:08,079 --> 00:34:11,599
node

00:34:08,720 --> 00:34:11,599
was created

00:34:18,720 --> 00:34:23,599
and we see that unsurprisingly it was

00:34:22,800 --> 00:34:26,879
created

00:34:23,599 --> 00:34:30,560
while um inserting

00:34:26,879 --> 00:34:34,000
the clipboard content

00:34:30,560 --> 00:34:36,800
inside of the copy impul

00:34:34,000 --> 00:34:36,800
impul function

00:34:37,919 --> 00:34:41,119
in this piece of code

00:34:41,679 --> 00:34:46,159
if there is no text node at the

00:34:44,639 --> 00:34:49,280
destination the

00:34:46,159 --> 00:34:53,839
p dust text node variable is null

00:34:49,280 --> 00:34:53,839
then a text node is created

00:34:56,639 --> 00:35:01,680
and what is at the

00:34:59,920 --> 00:35:03,839
insert position what kind of node is

00:35:01,680 --> 00:35:03,839
there

00:35:04,320 --> 00:35:07,680
it is index 18

00:35:08,160 --> 00:35:13,839
and we expect to find the section node

00:35:14,839 --> 00:35:17,839
there

00:35:20,480 --> 00:35:31,839
so the clipboard content is inserted

00:35:24,160 --> 00:35:31,839
before the section node

00:35:46,320 --> 00:35:53,040
and as we have seen the

00:35:49,680 --> 00:35:56,839
sw undo inserts does not

00:35:53,040 --> 00:35:59,839
delete this text node that was inserted

00:35:56,839 --> 00:35:59,839
here

00:36:01,760 --> 00:36:08,880
so now we investigate

00:36:05,520 --> 00:36:11,440
the code in a bit more detail how it

00:36:08,880 --> 00:36:13,680
undoes the insertion to see if we find

00:36:11,440 --> 00:36:18,240
anything interesting

00:36:13,680 --> 00:36:18,240
that looks like it would delete inserted

00:36:24,839 --> 00:36:27,839
nodes

00:36:32,160 --> 00:36:36,320
and there is this bit of code that does

00:36:35,599 --> 00:36:39,680
indeed

00:36:36,320 --> 00:36:41,839
delete an inserted node which is a text

00:36:39,680 --> 00:36:41,839
node

00:36:42,400 --> 00:36:50,079
but we did see this code

00:36:46,480 --> 00:36:53,760
being executed in the debugger

00:36:50,079 --> 00:37:09,839
and it did not delete this text node

00:36:53,760 --> 00:37:09,839
it deleted a different text node

00:37:34,640 --> 00:37:38,000
and the else branch in this case

00:37:36,400 --> 00:37:40,720
wouldn't do anything much

00:37:38,000 --> 00:37:51,839
different it would just delete the text

00:37:40,720 --> 00:37:51,839
note in a different way

00:38:05,440 --> 00:38:10,560
so now we want to find out more about

00:38:07,359 --> 00:38:14,400
this variable mp text format call

00:38:10,560 --> 00:38:17,440
like how it is initialized

00:38:14,400 --> 00:38:21,200
and we see that it gets

00:38:17,440 --> 00:38:25,440
value if the point of the

00:38:21,200 --> 00:38:28,960
rpm parameter is on a text node

00:38:25,440 --> 00:38:30,160
so that means the start node is a text

00:38:28,960 --> 00:38:33,280
node

00:38:30,160 --> 00:38:35,839
start of the insertion range and the

00:38:33,280 --> 00:38:38,000
text node always has a paragraph style

00:38:35,839 --> 00:38:39,280
associated with it so in that case it's

00:38:38,000 --> 00:38:42,320
not null

00:38:39,280 --> 00:38:47,839
if we manage to get into this branch and

00:38:42,320 --> 00:38:47,839
assign it

00:39:07,760 --> 00:39:14,720
and now we look a bit at the

00:39:11,520 --> 00:39:18,240
code which inserts

00:39:14,720 --> 00:39:29,839
the clipboard content here the undo

00:39:18,240 --> 00:39:29,839
object is being created

00:39:46,240 --> 00:39:51,520
and we see that this variable is even

00:39:49,200 --> 00:39:54,880
initialized depending on

00:39:51,520 --> 00:39:54,880
the source

00:39:55,440 --> 00:40:03,359
text node and not anything that's

00:39:58,480 --> 00:40:03,359
at the target insert location

00:40:07,520 --> 00:40:11,839
so still nothing terribly interesting

00:40:20,400 --> 00:40:24,240
now this set inside range function is

00:40:22,880 --> 00:40:27,520
called

00:40:24,240 --> 00:40:31,040
after the content has been inserted

00:40:27,520 --> 00:40:34,240
and it updates various member variables

00:40:31,040 --> 00:40:39,839
of the unknown object

00:40:34,240 --> 00:40:39,839
such as the end position

00:41:20,800 --> 00:41:25,760
and now we take a look at the copy

00:41:32,839 --> 00:41:35,839
function

00:41:57,200 --> 00:42:00,640
it does not do a whole lot before it

00:42:00,079 --> 00:42:03,839
creates

00:42:00,640 --> 00:42:03,839
the undo object

00:42:04,079 --> 00:42:11,280
it is passed the parameters are pum

00:42:07,599 --> 00:42:11,839
which is the source range that is being

00:42:11,280 --> 00:42:14,839
copied

00:42:11,839 --> 00:42:17,359
and our pause which is the insert

00:42:14,839 --> 00:42:21,200
position

00:42:17,359 --> 00:42:25,599
and the variable speed start and p

00:42:21,200 --> 00:42:31,839
end point to the start and end

00:42:25,599 --> 00:42:31,839
position of the source range

00:42:42,560 --> 00:42:46,560
there is some code to handle special

00:42:44,800 --> 00:42:49,680
cases like

00:42:46,560 --> 00:42:53,040
um if there's no text

00:42:49,680 --> 00:42:59,839
node where the cursor can move

00:42:53,040 --> 00:42:59,839
forward or backward into

00:43:02,880 --> 00:43:06,800
here we have one of writer's favorite

00:43:04,960 --> 00:43:09,359
quote patterns the do while

00:43:06,800 --> 00:43:11,599
false loop with a break in the middle

00:43:09,359 --> 00:43:15,520
but what we are actually interested in

00:43:11,599 --> 00:43:18,640
is places that

00:43:15,520 --> 00:43:19,040
use or manipulate the a inspose variable

00:43:18,640 --> 00:43:27,839
which

00:43:19,040 --> 00:43:27,839
is the insert position

00:43:32,240 --> 00:43:38,839
and we can see here a temporary text

00:43:36,240 --> 00:43:41,839
node is being

00:43:38,839 --> 00:43:41,839
inserted

00:43:42,720 --> 00:43:48,079
in case the destination position does

00:43:46,480 --> 00:43:55,839
not have a text node

00:43:48,079 --> 00:43:55,839
but some other node

00:44:15,119 --> 00:44:22,000
and as we can see the source range did

00:44:17,760 --> 00:44:26,079
have a text node at the start

00:44:22,000 --> 00:44:28,960
but the pdstxnode variable is null in

00:44:26,079 --> 00:44:37,839
our case so that's why we create

00:44:28,960 --> 00:44:37,839
a text node at the insert position

00:45:00,160 --> 00:45:06,160
and now we want to actually step through

00:45:03,520 --> 00:45:06,160
this code

00:45:16,400 --> 00:45:21,520
and let's see why did we skip that

00:45:18,640 --> 00:45:21,520
previous block

00:45:21,839 --> 00:45:24,880
so we certainly don't have b column cell

00:45:24,160 --> 00:45:27,680
true

00:45:24,880 --> 00:45:29,599
so maybe it's because the start position

00:45:27,680 --> 00:45:32,640
is at the start of a paragraph

00:45:29,599 --> 00:45:35,440
that's the third part of the condition

00:45:32,640 --> 00:45:36,720
now the endnote of the source range is a

00:45:35,440 --> 00:45:40,800
text node

00:45:36,720 --> 00:45:40,800
that's why we get into this branch

00:45:45,280 --> 00:45:51,040
so the top that's the branch we have

00:45:48,720 --> 00:45:51,920
taken if we hadn't taken that branch we

00:45:51,040 --> 00:45:54,160
would have

00:45:51,920 --> 00:45:56,160
split the text node at the insert

00:45:54,160 --> 00:46:00,400
position

00:45:56,160 --> 00:46:03,359
and so on but that is entirely

00:46:00,400 --> 00:46:03,359
hypothetical

00:46:09,040 --> 00:46:15,839
and this is another branch not taken

00:46:34,880 --> 00:46:42,319
now here the source

00:46:38,720 --> 00:46:45,359
and text it node

00:46:42,319 --> 00:46:45,839
the text to the destination text note

00:46:45,359 --> 00:46:49,200
that

00:46:45,839 --> 00:46:49,200
was just created

00:46:50,240 --> 00:46:55,440
and there is this very interesting

00:46:52,720 --> 00:46:59,440
comment before that

00:46:55,440 --> 00:47:02,720
which says something about the uh insert

00:46:59,440 --> 00:47:05,440
note being deleted doing undo which

00:47:02,720 --> 00:47:11,119
kind of sounds like something we would

00:47:05,440 --> 00:47:17,200
like to happen so there is this

00:47:11,119 --> 00:47:17,200
variable that is indicated here

00:47:18,000 --> 00:47:25,839
and it is indeed passed on to the under

00:47:20,800 --> 00:47:25,839
object later

00:47:30,720 --> 00:47:35,920
and what does the end of the object do

00:47:33,520 --> 00:47:35,920
with it

00:47:37,119 --> 00:47:44,960
it sets this boolean variable

00:47:41,599 --> 00:47:49,920
to false and increments

00:47:44,960 --> 00:47:49,920
the one of its positions

00:47:51,520 --> 00:47:56,160
and it says something about a table

00:47:53,520 --> 00:47:56,160
selection

00:47:56,960 --> 00:48:07,839
clearly we don't have a table selection

00:47:59,520 --> 00:48:07,839
in this case

00:48:09,119 --> 00:48:16,319
so this point

00:48:12,720 --> 00:48:21,839
it's kind of curious

00:48:16,319 --> 00:48:21,839
why this code exists why it was added

00:48:30,079 --> 00:48:39,040
and the rest of what this function does

00:48:34,240 --> 00:48:39,040
is not interesting at this point

00:48:42,800 --> 00:48:47,200
now we try to look for places where this

00:48:44,960 --> 00:48:49,760
variable would be set to true

00:48:47,200 --> 00:48:51,760
and the first place is where it's being

00:48:49,760 --> 00:48:54,880
declared it's set to true if

00:48:51,760 --> 00:48:56,240
this start node of the source range is a

00:48:54,880 --> 00:48:59,200
text node

00:48:56,240 --> 00:48:59,760
which is the case here and the second

00:48:59,200 --> 00:49:02,079
place

00:48:59,760 --> 00:49:03,839
we don't hit that one and we hit the

00:49:02,079 --> 00:49:06,559
third place this here

00:49:03,839 --> 00:49:06,880
if the destination position does not

00:49:06,559 --> 00:49:10,000
have

00:49:06,880 --> 00:49:12,640
a text node and

00:49:10,000 --> 00:49:13,839
here we even have this puzzle ensure

00:49:12,640 --> 00:49:17,440
insertion

00:49:13,839 --> 00:49:21,520
to check that the variable is not

00:49:17,440 --> 00:49:21,520
set to true twice basically

00:49:24,319 --> 00:49:31,440
so now we take a look at the

00:49:27,680 --> 00:49:31,920
git log of the unknown implementation

00:49:31,440 --> 00:49:35,119
here

00:49:31,920 --> 00:49:37,839
to see if there is um

00:49:35,119 --> 00:49:39,040
anything interesting there why this code

00:49:37,839 --> 00:49:41,839
was added

00:49:39,040 --> 00:49:45,920
so we see one commit where it was

00:49:41,839 --> 00:49:49,200
translated from the klingon original

00:49:45,920 --> 00:49:52,720
to english and the

00:49:49,200 --> 00:49:55,359
original comment was added in the

00:49:52,720 --> 00:49:56,640
initial import commit cvs from the year

00:49:55,359 --> 00:50:00,720
00:49:56,640 --> 00:50:05,119
so that code was always like this so we

00:50:00,720 --> 00:50:05,119
found out not very much here

00:50:07,440 --> 00:50:11,200
but clearly it's very suspicious that we

00:50:10,640 --> 00:50:14,079
had

00:50:11,200 --> 00:50:15,599
two places in the code that want to set

00:50:14,079 --> 00:50:19,520
this boolean variable to

00:50:15,599 --> 00:50:22,880
true if there is this assertion about

00:50:19,520 --> 00:50:25,119
that causing problems in undo

00:50:22,880 --> 00:50:26,400
because in every place where this

00:50:25,119 --> 00:50:29,520
variable is set to

00:50:26,400 --> 00:50:32,880
true a text node is being

00:50:29,520 --> 00:50:40,079
inserted or an existing text node is

00:50:32,880 --> 00:50:43,760
being split into two

00:50:40,079 --> 00:50:47,119
so now we try to look at the git log

00:50:43,760 --> 00:50:55,839
of the

00:50:47,119 --> 00:50:55,839
copy code

00:51:04,079 --> 00:51:11,440
and we see that this was

00:51:07,520 --> 00:51:16,559
actually not added in the initial import

00:51:11,440 --> 00:51:16,559
it was added in some

00:51:16,640 --> 00:51:23,040
in the year 2003 at a time when

00:51:20,000 --> 00:51:37,839
star office releases had some

00:51:23,040 --> 00:51:37,839
code name from star wars or something

00:51:41,839 --> 00:51:48,680
and there are two bugs

00:51:45,119 --> 00:51:52,160
cited here but

00:51:48,680 --> 00:51:56,160
unfortunately these ids

00:51:52,160 --> 00:51:59,359
are for the star office internal

00:51:56,160 --> 00:52:03,200
bug tracker that has been

00:51:59,359 --> 00:52:04,319
lost forever now so they are also

00:52:03,200 --> 00:52:06,960
useless to us

00:52:04,319 --> 00:52:07,599
we won't find out what the scenario was

00:52:06,960 --> 00:52:11,280
that was

00:52:07,599 --> 00:52:13,520
fixed by this commit

00:52:11,280 --> 00:52:14,800
one often finds interesting things in

00:52:13,520 --> 00:52:19,839
the git log

00:52:14,800 --> 00:52:19,839
but unfortunately not this time

00:52:54,000 --> 00:52:57,200
so now we take a bit of a look at the

00:52:56,720 --> 00:53:01,280
undo

00:52:57,200 --> 00:53:04,319
code to see if we

00:53:01,280 --> 00:53:07,119
could learn anything from there

00:53:04,319 --> 00:53:10,720
given our improved understanding of the

00:53:07,119 --> 00:53:10,720
copy code that we have now

00:53:12,640 --> 00:53:17,839
and in particular if this condition

00:53:15,760 --> 00:53:21,760
would have

00:53:17,839 --> 00:53:21,760
any effect there

00:53:27,599 --> 00:53:32,880
so here we see this boolean member and

00:53:30,079 --> 00:53:35,920
we start was text node is checked

00:53:32,880 --> 00:53:37,920
but it does not result in deleting any

00:53:35,920 --> 00:53:43,839
additional notes or anything like that

00:53:37,920 --> 00:53:43,839
it just moves the cursor

00:53:49,200 --> 00:53:57,839
here again is the code that deletes one

00:53:53,839 --> 00:53:57,839
text node

00:54:08,400 --> 00:54:11,920
but clearly there's no way for this undo

00:54:11,359 --> 00:54:14,960
code

00:54:11,920 --> 00:54:25,839
to delete more than one text node which

00:54:14,960 --> 00:54:25,839
is what we would need here

00:54:29,440 --> 00:54:33,680
and here we actually saw the first line

00:54:31,680 --> 00:54:39,839
of of this debug output was

00:54:33,680 --> 00:54:39,839
the ozo ensure being printed

00:54:41,680 --> 00:54:46,559
so now we step through the undo code

00:54:47,520 --> 00:54:51,520
and we check what exactly is being moved

00:54:50,480 --> 00:54:54,000
here

00:54:51,520 --> 00:54:55,520
and by the way i'm positively surprised

00:54:54,000 --> 00:54:58,400
that this also ensure

00:54:55,520 --> 00:54:59,359
was actually an indicator of a real

00:54:58,400 --> 00:55:01,680
problem

00:54:59,359 --> 00:55:02,400
because a lot of these old assertions

00:55:01,680 --> 00:55:05,040
are just

00:55:02,400 --> 00:55:07,839
noise based on basically wishful

00:55:05,040 --> 00:55:07,839
thinking

00:55:09,599 --> 00:55:21,839
and we are again at the place where the

00:55:12,559 --> 00:55:21,839
text node is being deleted

00:55:32,960 --> 00:55:38,400
and we see there are two text nodes

00:55:36,079 --> 00:55:40,720
before these action node

00:55:38,400 --> 00:55:42,240
and then we mess up with the keyboard

00:55:40,720 --> 00:55:46,839
and accidentally

00:55:42,240 --> 00:55:49,839
suspend our debugger but that can be

00:55:46,839 --> 00:55:49,839
fixed

00:56:04,640 --> 00:56:08,480
so clearly the problem here is that in

00:56:07,359 --> 00:56:11,599
this situation

00:56:08,480 --> 00:56:16,319
where the paste

00:56:11,599 --> 00:56:19,760
inserts two text nodes the

00:56:16,319 --> 00:56:22,400
undo must delete two text nodes and not

00:56:19,760 --> 00:56:22,400
only one

00:56:24,000 --> 00:56:31,040
if you want to find how we fixed this

00:56:27,680 --> 00:56:34,799
bug then you can just

00:56:31,040 --> 00:56:38,720
search for the issue id in the

00:56:34,799 --> 00:56:38,720
git log and look at the patch

00:56:41,839 --> 00:56:45,599
thank you for your attention if you made

00:56:44,160 --> 00:56:49,599
it this far

00:56:45,599 --> 00:56:52,720
and i hope i was able to convince you

00:56:49,599 --> 00:56:56,240
that record replay debugging

00:56:52,720 --> 00:57:00,000
and the reverse continue feature

00:56:56,240 --> 00:57:03,040
is really quite useful when figuring out

00:57:00,000 --> 00:57:06,160
tricky problems such as this

00:57:03,040 --> 00:57:07,920
and we even managed to do it in a single

00:57:06,160 --> 00:57:10,960
gdb session

00:57:07,920 --> 00:57:13,680
this time there is one more

00:57:10,960 --> 00:57:15,440
very useful trick that we didn't get to

00:57:13,680 --> 00:57:18,480
use this time

00:57:15,440 --> 00:57:20,319
which is that you can set a watchpoint

00:57:18,480 --> 00:57:23,920
on a variable with gdb

00:57:20,319 --> 00:57:41,839
and then reverse continue and then stop

00:57:23,920 --> 00:57:41,839
when this variable got its current value

00:58:18,240 --> 00:58:20,319

YouTube URL: https://www.youtube.com/watch?v=noA-n5o8VOw


