Title: Why Should Companies be interested in the next version of openSUSE Leap
Publication date: 2020-10-22
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,160 --> 00:00:03,040
can you just confirm that you can see my

00:00:02,240 --> 00:00:06,000
screen

00:00:03,040 --> 00:00:06,560
it's turning into presentation mode now

00:00:06,000 --> 00:00:09,040
yes

00:00:06,560 --> 00:00:09,679
yes we can yes we can see it perfect

00:00:09,040 --> 00:00:11,920
perfect

00:00:09,679 --> 00:00:13,280
so let me let me give you some idea why

00:00:11,920 --> 00:00:14,880
do i even make this call

00:00:13,280 --> 00:00:16,560
uh this this presentation i was not

00:00:14,880 --> 00:00:18,320
really sure about it but i feel like it

00:00:16,560 --> 00:00:20,080
makes sense uh

00:00:18,320 --> 00:00:22,000
so um this is more like gathering of

00:00:20,080 --> 00:00:22,880
ideas and i would like to hear also your

00:00:22,000 --> 00:00:24,480
input

00:00:22,880 --> 00:00:26,240
and it's it's it's something that i've

00:00:24,480 --> 00:00:27,599
discussed like with friends like what do

00:00:26,240 --> 00:00:30,320
they see as you know like

00:00:27,599 --> 00:00:32,399
new opportunities even when i was

00:00:30,320 --> 00:00:34,800
talking my boss like maybe a year ago

00:00:32,399 --> 00:00:36,880
about like what could be done with leap

00:00:34,800 --> 00:00:38,800
and you know like uh

00:00:36,880 --> 00:00:40,320
where i feel like maybe the true power

00:00:38,800 --> 00:00:42,640
is not really used or i don't see it or

00:00:40,320 --> 00:00:45,440
i don't get the feedback from from users

00:00:42,640 --> 00:00:46,160
um i i feel like this is the right way

00:00:45,440 --> 00:00:47,840
to take

00:00:46,160 --> 00:00:49,200
so this is also why i would like to talk

00:00:47,840 --> 00:00:50,320
about this and this topic a little bit

00:00:49,200 --> 00:00:53,039
more often

00:00:50,320 --> 00:00:54,480
and um you could call it uh you know i

00:00:53,039 --> 00:00:55,760
didn't want to call them partners like

00:00:54,480 --> 00:00:57,039
for lead that sounds like a little bit

00:00:55,760 --> 00:00:59,039
like sushi partners like

00:00:57,039 --> 00:01:01,039
you know for us it's community right so

00:00:59,039 --> 00:01:02,800
uh and then community

00:01:01,039 --> 00:01:04,559
can be also represented by companies

00:01:02,800 --> 00:01:05,760
behind like gotham with neil for example

00:01:04,559 --> 00:01:07,200
and so on so this is

00:01:05,760 --> 00:01:10,080
this is you know what i mean by

00:01:07,200 --> 00:01:13,200
companies hi

00:01:10,080 --> 00:01:15,040
hello neil and uh

00:01:13,200 --> 00:01:16,720
so so why should be the next version of

00:01:15,040 --> 00:01:18,400
leaping interesting for them like what

00:01:16,720 --> 00:01:20,080
what what could they get you know

00:01:18,400 --> 00:01:22,640
and they don't get like the current

00:01:20,080 --> 00:01:24,560
release which is you know fifteen two

00:01:22,640 --> 00:01:26,960
so you you've probably already heard

00:01:24,560 --> 00:01:28,799
about me sam lubos kutzman uh yeah the

00:01:26,960 --> 00:01:29,200
surname is tricky in german in english

00:01:28,799 --> 00:01:32,640
so

00:01:29,200 --> 00:01:34,320
uh yeah it's scotsman i am

00:01:32,640 --> 00:01:35,840
researcher for open source elite since

00:01:34,320 --> 00:01:39,040
first of first this year

00:01:35,840 --> 00:01:40,240
and i used to work on rail before and

00:01:39,040 --> 00:01:41,520
you know like on high school i was

00:01:40,240 --> 00:01:42,880
really interested in open studies where

00:01:41,520 --> 00:01:46,720
i i was leading the uh

00:01:42,880 --> 00:01:47,119
local user group so um the agenda i told

00:01:46,720 --> 00:01:48,399
you

00:01:47,119 --> 00:01:50,720
about closing the leap map on the

00:01:48,399 --> 00:01:52,079
previous slide here i will just repeat

00:01:50,720 --> 00:01:52,840
it in case that you haven't seen the

00:01:52,079 --> 00:01:55,600
previous

00:01:52,840 --> 00:01:56,320
presentation uh it's just one slide here

00:01:55,600 --> 00:01:58,000
and then i will

00:01:56,320 --> 00:01:59,759
talk about the opportunities it's it's

00:01:58,000 --> 00:02:02,000
like six slides and then the discussion

00:01:59,759 --> 00:02:04,799
okay so uh

00:02:02,000 --> 00:02:06,399
closing the leap gap so as spoken before

00:02:04,799 --> 00:02:08,399
for those who didn't hear it it's it's

00:02:06,399 --> 00:02:11,120
it's an effort driven by souza to

00:02:08,399 --> 00:02:12,800
bring slee and leap closer together and

00:02:11,120 --> 00:02:14,640
and by closer

00:02:12,800 --> 00:02:16,319
we mean actually that we will base sleep

00:02:14,640 --> 00:02:18,000
on sleep binaries

00:02:16,319 --> 00:02:19,840
um so this was the outcome of the

00:02:18,000 --> 00:02:21,440
research and and the jump prototype that

00:02:19,840 --> 00:02:23,440
we came up with

00:02:21,440 --> 00:02:24,480
so right now you have a distribution

00:02:23,440 --> 00:02:25,760
which you can already download it's

00:02:24,480 --> 00:02:26,959
called opensuse jump and

00:02:25,760 --> 00:02:28,720
it's basically a concept or

00:02:26,959 --> 00:02:30,400
implementation of the concept that

00:02:28,720 --> 00:02:31,360
should be enrolled in opensuse leap in

00:02:30,400 --> 00:02:34,400
future versions

00:02:31,360 --> 00:02:36,879
like either 15 to 1 or 153

00:02:34,400 --> 00:02:39,040
if you watch the previous slides we will

00:02:36,879 --> 00:02:41,280
know next tuesday where we have go no go

00:02:39,040 --> 00:02:42,640
for whether we may be 15 to 1 release or

00:02:41,280 --> 00:02:46,400
not

00:02:42,640 --> 00:02:47,280
and uh i would like to talk a little bit

00:02:46,400 --> 00:02:49,280
about like

00:02:47,280 --> 00:02:51,280
what opportunities do we get with the

00:02:49,280 --> 00:02:51,840
new concept and you know like we will

00:02:51,280 --> 00:02:53,360
have

00:02:51,840 --> 00:02:55,599
unified code streams we will have the

00:02:53,360 --> 00:02:57,280
exactly same binaries uh on both

00:02:55,599 --> 00:02:58,800
distributions when it comes to 4000

00:02:57,280 --> 00:02:59,760
packages which are actually shipped into

00:02:58,800 --> 00:03:02,640
the linux enterprise

00:02:59,760 --> 00:03:04,560
i'm not talking rpms i'm talking about

00:03:02,640 --> 00:03:06,400
like let's let's call it srpns maybe

00:03:04,560 --> 00:03:09,120
that's that's that's better

00:03:06,400 --> 00:03:10,239
um you know the concept of building the

00:03:09,120 --> 00:03:12,480
distribution

00:03:10,239 --> 00:03:14,080
we will get s390 which which i was

00:03:12,480 --> 00:03:15,519
already contacted by one company that

00:03:14,080 --> 00:03:17,440
it's kind of really fitting their

00:03:15,519 --> 00:03:19,040
workflow for testing applications that

00:03:17,440 --> 00:03:21,040
they start on lead then they actually

00:03:19,040 --> 00:03:21,680
test test some let's say do some smoke

00:03:21,040 --> 00:03:23,599
testing

00:03:21,680 --> 00:03:25,840
then they actually migrate to c and they

00:03:23,599 --> 00:03:27,360
finish uh they finish some more testing

00:03:25,840 --> 00:03:28,720
and you know because the smoke testing

00:03:27,360 --> 00:03:30,239
happens a little bit more often they

00:03:28,720 --> 00:03:31,680
actually want to remove the burden of

00:03:30,239 --> 00:03:32,720
registration which doesn't happen on the

00:03:31,680 --> 00:03:35,360
leap slide

00:03:32,720 --> 00:03:36,879
and since the binaries will be identical

00:03:35,360 --> 00:03:37,440
for their scope it's enough because they

00:03:36,879 --> 00:03:38,879
have

00:03:37,440 --> 00:03:41,840
applications that don't need anything

00:03:38,879 --> 00:03:44,239
that wouldn't be in sleep um

00:03:41,840 --> 00:03:45,760
you know like they can really use it and

00:03:44,239 --> 00:03:47,120
and for them it's it's kind of very

00:03:45,760 --> 00:03:49,040
beneficial and when they heard that it's

00:03:47,120 --> 00:03:50,480
coming you know s390 is coming they were

00:03:49,040 --> 00:03:52,239
really surprised because then they can

00:03:50,480 --> 00:03:54,319
have the same workflow for everything

00:03:52,239 --> 00:03:55,439
so this is a big big plus that i see and

00:03:54,319 --> 00:03:56,959
you know the tools that will be

00:03:55,439 --> 00:03:58,319
available to community members

00:03:56,959 --> 00:04:00,640
will be also available to these

00:03:58,319 --> 00:04:01,840
companies right so when neil has access

00:04:00,640 --> 00:04:03,599
to jira you know

00:04:01,840 --> 00:04:05,120
suse.com and he can raise features that

00:04:03,599 --> 00:04:06,319
means that that can technically raise

00:04:05,120 --> 00:04:09,120
features right

00:04:06,319 --> 00:04:10,879
and um i feel like this is uh the

00:04:09,120 --> 00:04:12,480
investment into leap can actually pay

00:04:10,879 --> 00:04:13,120
off for these companies and you know

00:04:12,480 --> 00:04:14,799
like

00:04:13,120 --> 00:04:16,320
yeah let's talk about it a little bit

00:04:14,799 --> 00:04:17,440
more on the next slide so i will not

00:04:16,320 --> 00:04:20,079
spoil it

00:04:17,440 --> 00:04:21,280
so um the first that i can see is the

00:04:20,079 --> 00:04:23,919
identical development

00:04:21,280 --> 00:04:24,560
development platform um and you know

00:04:23,919 --> 00:04:26,960
like

00:04:24,560 --> 00:04:29,120
i would say that you have a lot of

00:04:26,960 --> 00:04:30,960
people and companies that may be on

00:04:29,120 --> 00:04:32,160
budget and just just paying for you know

00:04:30,960 --> 00:04:34,160
like

00:04:32,160 --> 00:04:36,160
um sleep licenses for every everybody

00:04:34,160 --> 00:04:37,680
may not be like a good option for them

00:04:36,160 --> 00:04:40,080
like you have a lot of companies that

00:04:37,680 --> 00:04:43,040
can afford it but also a lot that can't

00:04:40,080 --> 00:04:44,400
and um you know uh if they want to make

00:04:43,040 --> 00:04:45,919
application may be available to leave

00:04:44,400 --> 00:04:47,120
and sleep maybe a little bit more effort

00:04:45,919 --> 00:04:49,600
on both sides

00:04:47,120 --> 00:04:51,759
and since since it's identical i believe

00:04:49,600 --> 00:04:54,479
that developing one application

00:04:51,759 --> 00:04:56,160
that kind of runs on both as long as you

00:04:54,479 --> 00:04:57,919
stick with the 4000 packages you know

00:04:56,160 --> 00:04:59,360
which are coming from slee

00:04:57,919 --> 00:05:01,440
it has never been easier because you

00:04:59,360 --> 00:05:03,680
know it will work and uh for

00:05:01,440 --> 00:05:04,560
for the differences uh which actually

00:05:03,680 --> 00:05:06,479
appear in between these two

00:05:04,560 --> 00:05:08,160
distributions and there are some you can

00:05:06,479 --> 00:05:09,440
you know if you run the installer you

00:05:08,160 --> 00:05:10,400
will see that in live you can actually

00:05:09,440 --> 00:05:12,080
choose kde

00:05:10,400 --> 00:05:13,600
which is not the case in c right we have

00:05:12,080 --> 00:05:15,600
a slightly different branding we have

00:05:13,600 --> 00:05:16,240
fbc compiler separate and gdb test

00:05:15,600 --> 00:05:17,600
results

00:05:16,240 --> 00:05:20,639
we have slightly different install

00:05:17,600 --> 00:05:22,639
images uh you know

00:05:20,639 --> 00:05:24,000
and there will be few more icos like but

00:05:22,639 --> 00:05:25,680
you can see that the list is relatively

00:05:24,000 --> 00:05:26,240
small and it can be kept on single wiki

00:05:25,680 --> 00:05:27,759
page

00:05:26,240 --> 00:05:29,440
and we can go relatively into depth

00:05:27,759 --> 00:05:31,120
what's actually different and if you

00:05:29,440 --> 00:05:32,320
know what to expect that is different i

00:05:31,120 --> 00:05:33,840
believe that you know

00:05:32,320 --> 00:05:36,080
you can really build like a reliable

00:05:33,840 --> 00:05:37,520
platform uh for testing or development

00:05:36,080 --> 00:05:38,240
and you know it will run honestly as

00:05:37,520 --> 00:05:40,240
well

00:05:38,240 --> 00:05:41,919
uh what's kind of interesting and i feel

00:05:40,240 --> 00:05:43,600
like nobody covered it is that

00:05:41,919 --> 00:05:45,120
we are still discussing the kernel

00:05:43,600 --> 00:05:47,840
flavors right for

00:05:45,120 --> 00:05:48,479
for a new leap um we have a bunch of

00:05:47,840 --> 00:05:51,199
options

00:05:48,479 --> 00:05:52,639
uh we are still undecided like you could

00:05:51,199 --> 00:05:54,240
have like unified kernel which would be

00:05:52,639 --> 00:05:55,919
same for slee or for leave

00:05:54,240 --> 00:05:58,479
you could have different kernel for sli

00:05:55,919 --> 00:06:00,080
as server and and leap you know you

00:05:58,479 --> 00:06:01,520
maybe you could reuse the leap kernel on

00:06:00,080 --> 00:06:02,240
desktop because it's slightly better

00:06:01,520 --> 00:06:04,880
tuned for

00:06:02,240 --> 00:06:06,639
application responsiveness and um so

00:06:04,880 --> 00:06:08,319
this is still kind of

00:06:06,639 --> 00:06:10,000
you know undecided but like we are

00:06:08,319 --> 00:06:12,080
working and working it out it will be

00:06:10,000 --> 00:06:12,960
definitely solved in 153 you can expect

00:06:12,080 --> 00:06:16,000
that

00:06:12,960 --> 00:06:17,680
um so i believe that uh

00:06:16,000 --> 00:06:19,039
and you will always have an option that

00:06:17,680 --> 00:06:20,639
we know that if there will be two

00:06:19,039 --> 00:06:22,479
kernels that you will have option to

00:06:20,639 --> 00:06:24,800
install the sleek kernel okay

00:06:22,479 --> 00:06:26,400
so if it matters like you will be able

00:06:24,800 --> 00:06:28,080
to use the same kernel and

00:06:26,400 --> 00:06:29,680
that i believe will make it an ideal

00:06:28,080 --> 00:06:31,120
development platform

00:06:29,680 --> 00:06:32,800
uh for companies on budget or

00:06:31,120 --> 00:06:35,759
individuals for you know

00:06:32,800 --> 00:06:37,680
they wouldn't normally buy the let's say

00:06:35,759 --> 00:06:39,600
subscription for sleep but in this way

00:06:37,680 --> 00:06:40,720
they basically get identical content if

00:06:39,600 --> 00:06:42,800
you don't count

00:06:40,720 --> 00:06:45,840
the branding and so on and you can leave

00:06:42,800 --> 00:06:49,199
it out to the support

00:06:45,840 --> 00:06:52,160
so um the making app available

00:06:49,199 --> 00:06:53,919
for both and slee for both slee and lib

00:06:52,160 --> 00:06:54,800
has never been easier so what does it

00:06:53,919 --> 00:06:57,039
mean

00:06:54,800 --> 00:06:58,560
um so we were talking about building

00:06:57,039 --> 00:06:59,759
that you build once essentially and you

00:06:58,560 --> 00:07:00,880
know that it should be the same

00:06:59,759 --> 00:07:02,880
libraries and so on

00:07:00,880 --> 00:07:04,000
i mean binary identical library is not

00:07:02,880 --> 00:07:07,440
just the same

00:07:04,000 --> 00:07:09,599
when it comes to apis but identical and

00:07:07,440 --> 00:07:11,440
the publishing is also something that i

00:07:09,599 --> 00:07:12,720
would like to embrace like you may say

00:07:11,440 --> 00:07:13,680
well that you can already do that with

00:07:12,720 --> 00:07:15,919
packagehub

00:07:13,680 --> 00:07:17,039
but right now if you submit something

00:07:15,919 --> 00:07:18,800
for lead

00:07:17,039 --> 00:07:20,080
built it gets built and leave it gets

00:07:18,800 --> 00:07:21,280
shipped and leave but you

00:07:20,080 --> 00:07:22,800
you know there is an automated

00:07:21,280 --> 00:07:24,240
submission or manual submission to

00:07:22,800 --> 00:07:26,000
backboards

00:07:24,240 --> 00:07:27,599
where it gets built you know maybe there

00:07:26,000 --> 00:07:29,199
is a conflict with some of the sleep

00:07:27,599 --> 00:07:30,080
package maybe it doesn't you know maybe

00:07:29,199 --> 00:07:32,080
somebody has to work

00:07:30,080 --> 00:07:33,440
work it out like fix some things first

00:07:32,080 --> 00:07:35,039
before it can be available

00:07:33,440 --> 00:07:37,360
unfortunately this part is still going

00:07:35,039 --> 00:07:37,840
to be problematic but now you actually

00:07:37,360 --> 00:07:39,759
don't

00:07:37,840 --> 00:07:41,840
have to make a separate submission for

00:07:39,759 --> 00:07:42,800
backboards in in order to have it in

00:07:41,840 --> 00:07:44,560
package hub

00:07:42,800 --> 00:07:46,319
because opensis elite will actually

00:07:44,560 --> 00:07:47,520
consolidate backboards i mean the next

00:07:46,319 --> 00:07:50,160
version of leap

00:07:47,520 --> 00:07:51,599
so submission if you actually submit

00:07:50,160 --> 00:07:53,520
let's say package i don't know

00:07:51,599 --> 00:07:55,520
uh maybe some cute binaries are actually

00:07:53,520 --> 00:07:57,360
in slee uh

00:07:55,520 --> 00:07:58,720
let me think of yeah maybe python cube

00:07:57,360 --> 00:07:59,440
let's see that python queue wouldn't be

00:07:58,720 --> 00:08:01,840
instantly

00:07:59,440 --> 00:08:03,360
if it is but you would like to submit an

00:08:01,840 --> 00:08:05,599
update to jump or

00:08:03,360 --> 00:08:07,280
future leap for python cued and

00:08:05,599 --> 00:08:08,800
therefore you submit submission for jump

00:08:07,280 --> 00:08:10,319
and if it's actually coming from back

00:08:08,800 --> 00:08:12,080
parts you know it will be redirected to

00:08:10,319 --> 00:08:14,240
backwards it will be processed there so

00:08:12,080 --> 00:08:15,120
one submission will be accepted built

00:08:14,240 --> 00:08:17,280
once

00:08:15,120 --> 00:08:18,479
in package hub i know that we have the

00:08:17,280 --> 00:08:19,919
continuous threadboard but

00:08:18,479 --> 00:08:21,840
you know what i mean is that you you you

00:08:19,919 --> 00:08:24,639
build it just in one project

00:08:21,840 --> 00:08:26,160
and it actually gets delivered to slee

00:08:24,639 --> 00:08:27,840
and leave

00:08:26,160 --> 00:08:29,360
right so there should be less effort so

00:08:27,840 --> 00:08:31,280
we just handle the submission once and

00:08:29,360 --> 00:08:33,760
we know that it will work for both

00:08:31,280 --> 00:08:35,680
which i see is a big benefit and also it

00:08:33,760 --> 00:08:37,200
it allows us to join forces with package

00:08:35,680 --> 00:08:39,200
hub people and maybe they can focus a

00:08:37,200 --> 00:08:41,200
little bit on the delivery to

00:08:39,200 --> 00:08:42,560
uh and and we can focus on actually the

00:08:41,200 --> 00:08:44,240
elite part the traditional you know

00:08:42,560 --> 00:08:44,720
processing of submissions going for open

00:08:44,240 --> 00:08:48,000
qa

00:08:44,720 --> 00:08:49,839
and then and so on um

00:08:48,000 --> 00:08:51,920
so i feel like this is this is this is

00:08:49,839 --> 00:08:53,360
really cool at least to me and i can see

00:08:51,920 --> 00:08:54,959
it already because i'm hitting some

00:08:53,360 --> 00:08:56,640
requests to add packages to package hub

00:08:54,959 --> 00:08:57,360
and i see the problematic parts and so

00:08:56,640 --> 00:08:59,040
on

00:08:57,360 --> 00:09:00,720
and you know like since i'm now closer

00:08:59,040 --> 00:09:02,160
to it than ever like you know i'm

00:09:00,720 --> 00:09:03,200
getting some more knowledge on that area

00:09:02,160 --> 00:09:04,080
as well and i feel like this is

00:09:03,200 --> 00:09:06,160
beneficial for

00:09:04,080 --> 00:09:07,680
way more people because package hub team

00:09:06,160 --> 00:09:09,440
is kind of relatively small

00:09:07,680 --> 00:09:11,040
and and you know having extra resources

00:09:09,440 --> 00:09:12,399
from from release team will be

00:09:11,040 --> 00:09:15,680
definitely

00:09:12,399 --> 00:09:17,360
beneficial for both sides um

00:09:15,680 --> 00:09:18,640
yeah the little letters if you can't

00:09:17,360 --> 00:09:20,399
read them that's the mentioning of the

00:09:18,640 --> 00:09:22,000
conflicts with such as sleep packages

00:09:20,399 --> 00:09:23,519
imagine that you want to add new package

00:09:22,000 --> 00:09:25,360
but it provides the same files so we

00:09:23,519 --> 00:09:27,920
have to work it out in the end

00:09:25,360 --> 00:09:28,959
um so unfortunately this one this

00:09:27,920 --> 00:09:30,640
problem

00:09:28,959 --> 00:09:32,720
won't disappear and i i see it's

00:09:30,640 --> 00:09:34,560
currently painful you know just to let

00:09:32,720 --> 00:09:36,480
you know that backwards are using rpm

00:09:34,560 --> 00:09:37,519
lane which you know like has access to

00:09:36,480 --> 00:09:40,000
what files are

00:09:37,519 --> 00:09:41,440
basically provided by sleep packages and

00:09:40,000 --> 00:09:42,959
you know like if there is some conflict

00:09:41,440 --> 00:09:45,519
it basically blocks the submission

00:09:42,959 --> 00:09:46,160
on and you know package is not built and

00:09:45,519 --> 00:09:49,040
it's not

00:09:46,160 --> 00:09:51,839
released so um this is some sort of

00:09:49,040 --> 00:09:51,839
sanity checking

00:09:52,399 --> 00:09:55,680
so uh next topic is the effortless

00:09:54,240 --> 00:09:57,440
migration i already mentioned on my

00:09:55,680 --> 00:09:58,240
previous talk maybe even here at the

00:09:57,440 --> 00:10:00,080
beginning

00:09:58,240 --> 00:10:01,680
that the expectation for migration is

00:10:00,080 --> 00:10:02,880
that you install you know next

00:10:01,680 --> 00:10:04,720
generation leap

00:10:02,880 --> 00:10:06,160
and if you want to migrate to sleep you

00:10:04,720 --> 00:10:08,560
exchange branding packages

00:10:06,160 --> 00:10:09,519
you you enable a bunch of reports from

00:10:08,560 --> 00:10:11,120
scc which will

00:10:09,519 --> 00:10:12,800
get automatically enabled by zipper

00:10:11,120 --> 00:10:15,839
migrate or or you know

00:10:12,800 --> 00:10:17,760
just migrate and you are done so you

00:10:15,839 --> 00:10:19,519
should be talking about like maybe like

00:10:17,760 --> 00:10:21,519
two minutes or maybe even less you know

00:10:19,519 --> 00:10:24,240
in certain cases if you use zipper

00:10:21,519 --> 00:10:25,680
um instead of maybe half an hour of

00:10:24,240 --> 00:10:27,279
downloading i don't know like updates

00:10:25,680 --> 00:10:29,440
for 4000 packages or

00:10:27,279 --> 00:10:30,720
more because you know like the checksum

00:10:29,440 --> 00:10:31,600
is different the release is different

00:10:30,720 --> 00:10:34,720
and so on

00:10:31,600 --> 00:10:37,440
this will not be the case so

00:10:34,720 --> 00:10:39,120
uh again i've seen one company that

00:10:37,440 --> 00:10:39,920
described me how to use sleep and

00:10:39,120 --> 00:10:41,680
basically what

00:10:39,920 --> 00:10:43,200
uh i will not name the company but what

00:10:41,680 --> 00:10:45,360
they said is that they do smoke testing

00:10:43,200 --> 00:10:47,040
on leap and then at certain part

00:10:45,360 --> 00:10:48,320
you know part of the workflow if the

00:10:47,040 --> 00:10:49,839
smoke testing passes they actually

00:10:48,320 --> 00:10:53,360
initiate migration

00:10:49,839 --> 00:10:56,399
to sleep and then they continue and um

00:10:53,360 --> 00:10:57,839
since it's identical now and uh

00:10:56,399 --> 00:10:59,360
you know like don't don't take me like

00:10:57,839 --> 00:11:00,000
that you could certify that application

00:10:59,360 --> 00:11:01,680
only that's not

00:11:00,000 --> 00:11:03,040
happening but if you want you know like

00:11:01,680 --> 00:11:04,959
testing had to happen

00:11:03,040 --> 00:11:07,040
and you want to really like make it

00:11:04,959 --> 00:11:09,040
really short maybe maybe run it like

00:11:07,040 --> 00:11:09,839
1000 times a day and so when i feel like

00:11:09,040 --> 00:11:11,760
uh

00:11:09,839 --> 00:11:12,880
the quick migration now can actually

00:11:11,760 --> 00:11:16,000
make this workflow

00:11:12,880 --> 00:11:16,399
very effective also before i knew that

00:11:16,000 --> 00:11:19,839
the

00:11:16,399 --> 00:11:22,000
migration migration

00:11:19,839 --> 00:11:23,120
had struggled with the vendor changes

00:11:22,000 --> 00:11:25,040
you know so if you actually

00:11:23,120 --> 00:11:26,800
like replace uh opensuse assigned

00:11:25,040 --> 00:11:28,160
package with suse llc signed package

00:11:26,800 --> 00:11:28,880
like you actually have to come from it

00:11:28,160 --> 00:11:30,560
and so on

00:11:28,880 --> 00:11:31,920
we are currently struggling with it in

00:11:30,560 --> 00:11:33,839
jump as well but the

00:11:31,920 --> 00:11:35,839
the end result that we expect in 15 30

00:11:33,839 --> 00:11:38,240
and 15 to 1 if it gets released

00:11:35,839 --> 00:11:39,519
is that there are no like no no problems

00:11:38,240 --> 00:11:42,640
and the exchange is actually white

00:11:39,519 --> 00:11:44,399
listed like we actually really you know

00:11:42,640 --> 00:11:45,839
the vendor change needs to be enabled

00:11:44,399 --> 00:11:47,600
and you know like basically

00:11:45,839 --> 00:11:49,040
be invisible to user because this is the

00:11:47,600 --> 00:11:50,240
entire concept like if you decide to

00:11:49,040 --> 00:11:52,240
fork package and leave

00:11:50,240 --> 00:11:54,160
or if the package from that used to be

00:11:52,240 --> 00:11:54,880
let's say in in backwards is moved to

00:11:54,160 --> 00:11:56,639
slee

00:11:54,880 --> 00:11:58,079
these changes will happen all the time

00:11:56,639 --> 00:11:59,760
and you know like we don't want to

00:11:58,079 --> 00:12:02,880
you know like back user about them it

00:11:59,760 --> 00:12:06,079
just needs to be very seamless

00:12:02,880 --> 00:12:07,519
so uh and what i feel

00:12:06,079 --> 00:12:09,279
that this is a great fit if you know

00:12:07,519 --> 00:12:10,959
that you are working with binary

00:12:09,279 --> 00:12:12,079
identical distribution maybe you are a

00:12:10,959 --> 00:12:14,959
small startup

00:12:12,079 --> 00:12:16,800
and you know maybe an area where souza

00:12:14,959 --> 00:12:18,160
is kind of winning

00:12:16,800 --> 00:12:19,600
and you know that in the future you

00:12:18,160 --> 00:12:20,880
would consider migration i feel like

00:12:19,600 --> 00:12:22,560
this is the ideal platform that you

00:12:20,880 --> 00:12:24,480
should start with because like you know

00:12:22,560 --> 00:12:28,800
it will be super seamless

00:12:24,480 --> 00:12:31,600
um so this is one big benefit that i see

00:12:28,800 --> 00:12:32,880
um again like and this one is my

00:12:31,600 --> 00:12:36,399
favorite to be honest

00:12:32,880 --> 00:12:38,079
out of what you see um so let's say that

00:12:36,399 --> 00:12:40,959
you are company you want to influence

00:12:38,079 --> 00:12:42,800
lee and leap but like maybe you are too

00:12:40,959 --> 00:12:44,720
small to become choose a partner

00:12:42,800 --> 00:12:46,880
uh or you know like you are not there

00:12:44,720 --> 00:12:48,800
yet uh i know that it comes with certain

00:12:46,880 --> 00:12:51,760
responsibilities and so on

00:12:48,800 --> 00:12:52,560
but um if you take maybe case of neil

00:12:51,760 --> 00:12:54,560
here

00:12:52,560 --> 00:12:55,920
and you will actually become contributor

00:12:54,560 --> 00:12:57,279
to leap and you want to make sure that

00:12:55,920 --> 00:13:00,160
your abstech works on

00:12:57,279 --> 00:13:01,440
leap um the future generation of leap or

00:13:00,160 --> 00:13:02,240
you know leave next whatever you want to

00:13:01,440 --> 00:13:04,240
call it

00:13:02,240 --> 00:13:06,079
and you have the ability to send

00:13:04,240 --> 00:13:07,839
submissions to suse linux enterprise

00:13:06,079 --> 00:13:09,360
you know through the redirection and

00:13:07,839 --> 00:13:11,120
mirroring as i was talking

00:13:09,360 --> 00:13:13,279
you have option to actually open feature

00:13:11,120 --> 00:13:13,839
request uh open to the partner request

00:13:13,279 --> 00:13:16,959
features

00:13:13,839 --> 00:13:20,480
against linux enterprise like you know

00:13:16,959 --> 00:13:22,079
you are basically a partner um but

00:13:20,480 --> 00:13:23,920
you know in this this case you are also

00:13:22,079 --> 00:13:25,519
lead contributor where i see benefit on

00:13:23,920 --> 00:13:28,560
both sides and this is what

00:13:25,519 --> 00:13:30,240
i find like really cool i know that neil

00:13:28,560 --> 00:13:31,920
mentioned in the past that oh

00:13:30,240 --> 00:13:34,240
but you know like how do i test that it

00:13:31,920 --> 00:13:36,079
actually really works honestly um

00:13:34,240 --> 00:13:37,519
developers.com may be the answer i will

00:13:36,079 --> 00:13:40,079
not tell details because i

00:13:37,519 --> 00:13:41,440
shouldn't i guess but uh if you study it

00:13:40,079 --> 00:13:42,639
like you will figure out that maybe

00:13:41,440 --> 00:13:45,839
there is a way

00:13:42,639 --> 00:13:47,839
to solve the problem so uh

00:13:45,839 --> 00:13:49,600
again what tools i'm talking about is

00:13:47,839 --> 00:13:50,959
the jira access is the mirroring of

00:13:49,600 --> 00:13:53,279
submissions

00:13:50,959 --> 00:13:54,880
um so i hope that this is interesting

00:13:53,279 --> 00:13:55,920
for you if you work for a company that

00:13:54,880 --> 00:13:57,760
may want to influence

00:13:55,920 --> 00:13:59,600
lee and you know it's not a partner but

00:13:57,760 --> 00:14:03,839
leap seems to be a

00:13:59,600 --> 00:14:05,839
viable way to go

00:14:03,839 --> 00:14:07,680
also in the video that was linked in the

00:14:05,839 --> 00:14:09,120
previous slide or maybe even before yeah

00:14:07,680 --> 00:14:12,240
here

00:14:09,120 --> 00:14:14,320
uh you will see how the actual

00:14:12,240 --> 00:14:15,680
mirroring works um i mean there's a

00:14:14,320 --> 00:14:18,240
bunch of screenshots if you would be

00:14:15,680 --> 00:14:18,240
interested

00:14:19,600 --> 00:14:23,600
maybe interesting part to say is that

00:14:21,600 --> 00:14:24,560
the when the submission is mirrored in

00:14:23,600 --> 00:14:27,360
obs uh

00:14:24,560 --> 00:14:29,120
you know like you actually see the

00:14:27,360 --> 00:14:30,560
person who approved the submission as

00:14:29,120 --> 00:14:33,279
the creator of the submission

00:14:30,560 --> 00:14:33,920
in honsley side but like you can click

00:14:33,279 --> 00:14:35,199
through and

00:14:33,920 --> 00:14:36,720
you can actually see the original

00:14:35,199 --> 00:14:36,959
submission so you can figure out who was

00:14:36,720 --> 00:14:38,959
the

00:14:36,959 --> 00:14:40,720
uh who was the person who opened it and

00:14:38,959 --> 00:14:42,399
there you will get like uh you know

00:14:40,720 --> 00:14:44,560
if you if you write a comment it has to

00:14:42,399 --> 00:14:45,040
be anonymous because of whatever works

00:14:44,560 --> 00:14:48,560
cancel

00:14:45,040 --> 00:14:49,920
gdpr uh rules but you know you will be

00:14:48,560 --> 00:14:53,040
able to have conversation with the

00:14:49,920 --> 00:14:53,040
maintainer in this way

00:14:53,199 --> 00:14:57,680
so uh the next thing that i would like

00:14:55,600 --> 00:14:59,440
to mention is the s3 ntx availability i

00:14:57,680 --> 00:15:00,800
said it was interesting for one company

00:14:59,440 --> 00:15:03,760
i believe it may be interested

00:15:00,800 --> 00:15:04,240
interesting isn't interesting for others

00:15:03,760 --> 00:15:06,399
uh

00:15:04,240 --> 00:15:08,560
again like in various workflows

00:15:06,399 --> 00:15:11,360
deployment testing and so on where

00:15:08,560 --> 00:15:12,079
you know this this can find use i was

00:15:11,360 --> 00:15:14,320
actually surprised

00:15:12,079 --> 00:15:16,560
i thought like okay i feel like this may

00:15:14,320 --> 00:15:18,720
be not exactly like round four lead

00:15:16,560 --> 00:15:19,760
and i was surprised just by the first

00:15:18,720 --> 00:15:20,880
campaign that reached out to me

00:15:19,760 --> 00:15:23,360
regarding this effort

00:15:20,880 --> 00:15:24,959
that they would find useful one thing

00:15:23,360 --> 00:15:26,720
that people don't really talk about and

00:15:24,959 --> 00:15:27,920
i feel like it's only fair to mention it

00:15:26,720 --> 00:15:30,079
to the community is that

00:15:27,920 --> 00:15:32,079
you know we get extra s 390 x but like

00:15:30,079 --> 00:15:34,560
aren't we seven to 32-bit one

00:15:32,079 --> 00:15:36,000
is not really uh you know there is no

00:15:34,560 --> 00:15:37,839
support for it and sleep

00:15:36,000 --> 00:15:38,959
we have to work out how to how to do

00:15:37,839 --> 00:15:40,800
that so if there would be an

00:15:38,959 --> 00:15:42,560
intermediate release we decided that rmv

00:15:40,800 --> 00:15:44,399
7 would be skipped here

00:15:42,560 --> 00:15:45,920
therefore arm v7 would be would have

00:15:44,399 --> 00:15:47,440
only 15 too

00:15:45,920 --> 00:15:49,440
and then you know we would we would

00:15:47,440 --> 00:15:51,040
actually enable the support in 53 again

00:15:49,440 --> 00:15:53,040
and it would have to be probably worked

00:15:51,040 --> 00:15:55,839
out as a separate project

00:15:53,040 --> 00:15:58,000
but this is not yet set in stone so the

00:15:55,839 --> 00:15:59,519
rv7 is still a question for lead

00:15:58,000 --> 00:16:00,720
like we know that we probably want to do

00:15:59,519 --> 00:16:02,480
that um you know we don't want to

00:16:00,720 --> 00:16:06,399
disappoint people who use it

00:16:02,480 --> 00:16:08,240
but uh how it will be done like i mean

00:16:06,399 --> 00:16:10,480
how it will be built specifically now be

00:16:08,240 --> 00:16:12,160
a system open question

00:16:10,480 --> 00:16:13,440
maybe we should revisit the use cases

00:16:12,160 --> 00:16:14,880
and figure out whether maybe some

00:16:13,440 --> 00:16:15,600
combination with factory would make

00:16:14,880 --> 00:16:17,440
sense uh

00:16:15,600 --> 00:16:19,680
i i guess the puns are still open if

00:16:17,440 --> 00:16:22,079
rmv7 isn't interesting for you

00:16:19,680 --> 00:16:23,600
i recommend to reach out to to us maybe

00:16:22,079 --> 00:16:23,839
you want to reach out to dirk miller or

00:16:23,600 --> 00:16:25,600
or

00:16:23,839 --> 00:16:27,600
gilm uh who is part of the open

00:16:25,600 --> 00:16:28,320
socialist team and you want to actually

00:16:27,600 --> 00:16:29,920
raise like

00:16:28,320 --> 00:16:31,360
you know your use cases so we can make

00:16:29,920 --> 00:16:34,480
sure that you know whatever we do with

00:16:31,360 --> 00:16:37,279
rv7 matches your company as well

00:16:34,480 --> 00:16:38,480
so um this is basically all i told you i

00:16:37,279 --> 00:16:39,920
will have a few use cases which i

00:16:38,480 --> 00:16:41,120
believe are interesting or you know i

00:16:39,920 --> 00:16:42,480
was thinking about them in the last few

00:16:41,120 --> 00:16:44,000
weeks and i was thinking that that could

00:16:42,480 --> 00:16:44,240
be it like these aren't the areas where

00:16:44,000 --> 00:16:47,040
we

00:16:44,240 --> 00:16:47,839
definitely improve um do you see any

00:16:47,040 --> 00:16:50,000
other use

00:16:47,839 --> 00:16:50,959
of how ctlg can help you or you know

00:16:50,000 --> 00:16:52,800
maybe doesn't

00:16:50,959 --> 00:16:54,000
like she does the exact opposite like

00:16:52,800 --> 00:16:59,600
feel free to raise any

00:16:54,000 --> 00:16:59,600

YouTube URL: https://www.youtube.com/watch?v=sTh1FKCgyMw


