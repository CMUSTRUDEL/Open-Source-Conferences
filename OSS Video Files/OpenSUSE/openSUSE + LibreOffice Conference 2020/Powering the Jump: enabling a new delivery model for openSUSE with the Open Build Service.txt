Title: Powering the Jump: enabling a new delivery model for openSUSE with the Open Build Service
Publication date: 2020-11-06
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,160 --> 00:00:03,600
hello and this is marcus can you hear me

00:00:02,320 --> 00:00:06,560
all right

00:00:03,600 --> 00:00:08,400
yes no can you i can see your screen and

00:00:06,560 --> 00:00:09,519
you should see a green screen at this

00:00:08,400 --> 00:00:11,599
moment

00:00:09,519 --> 00:00:13,200
yep yes yes i can see it it was the

00:00:11,599 --> 00:00:15,120
loading

00:00:13,200 --> 00:00:17,600
fabulous so glad that we have that

00:00:15,120 --> 00:00:20,240
sorted well welcome everybody

00:00:17,600 --> 00:00:21,920
i'm very glad to be speaking i'm very

00:00:20,240 --> 00:00:24,400
honored to be speaking

00:00:21,920 --> 00:00:25,760
um at this open sousa deeper office

00:00:24,400 --> 00:00:27,920
conference

00:00:25,760 --> 00:00:29,279
and the surgery of my talk will be

00:00:27,920 --> 00:00:32,239
powering the jump

00:00:29,279 --> 00:00:34,800
on how we enable a new delivery model um

00:00:32,239 --> 00:00:36,079
for what opensuse is looking to achieve

00:00:34,800 --> 00:00:38,480
with jump

00:00:36,079 --> 00:00:39,280
um with the help of the open build

00:00:38,480 --> 00:00:41,840
service

00:00:39,280 --> 00:00:44,160
my name is marcus noga i'm a relatively

00:00:41,840 --> 00:00:47,360
new joiner to sousa i'm vice president

00:00:44,160 --> 00:00:50,879
for solutions technology my group looks

00:00:47,360 --> 00:00:53,520
after everything that includes

00:00:50,879 --> 00:00:56,000
solutions for end customers as well as

00:00:53,520 --> 00:00:58,239
all the base technology including

00:00:56,000 --> 00:00:59,600
the build service itself um but also

00:00:58,239 --> 00:01:02,320
level three support

00:00:59,600 --> 00:01:04,239
security certifications um and

00:01:02,320 --> 00:01:06,400
everything we do for technical partners

00:01:04,239 --> 00:01:08,960
and technical partner certification

00:01:06,400 --> 00:01:11,760
i'm i'm proud and honored um to be here

00:01:08,960 --> 00:01:13,920
today with all of you

00:01:11,760 --> 00:01:15,840
talk a little bit about the open build

00:01:13,920 --> 00:01:18,960
service its history

00:01:15,840 --> 00:01:21,200
and how it pertains to containers

00:01:18,960 --> 00:01:22,159
um the open build service is something

00:01:21,200 --> 00:01:24,479
that

00:01:22,159 --> 00:01:26,080
many of us just take for granted because

00:01:24,479 --> 00:01:27,119
it's there it's invisible in the

00:01:26,080 --> 00:01:29,520
background

00:01:27,119 --> 00:01:31,520
it does its job and it helps us turn

00:01:29,520 --> 00:01:34,560
source code into something that

00:01:31,520 --> 00:01:37,439
users trust and administrators

00:01:34,560 --> 00:01:39,360
trust and install on their system which

00:01:37,439 --> 00:01:41,600
is binary executables

00:01:39,360 --> 00:01:44,000
that everybody can work with and the

00:01:41,600 --> 00:01:46,399
open build service has historically

00:01:44,000 --> 00:01:47,040
been about openness in any shape and

00:01:46,399 --> 00:01:49,840
form

00:01:47,040 --> 00:01:51,840
on whether we target rpms whether we

00:01:49,840 --> 00:01:53,360
target the buying images whether we

00:01:51,840 --> 00:01:55,920
target isos

00:01:53,360 --> 00:01:58,159
or other new formats like containers

00:01:55,920 --> 00:01:59,520
that are upcoming and gaining a lot of

00:01:58,159 --> 00:02:02,000
traction

00:01:59,520 --> 00:02:02,880
um so the open build service has

00:02:02,000 --> 00:02:06,240
completed

00:02:02,880 --> 00:02:09,280
a longer journey um for adding container

00:02:06,240 --> 00:02:12,879
support as a first-class citizen

00:02:09,280 --> 00:02:15,599
and that journey began in 2017

00:02:12,879 --> 00:02:16,160
so three years ago when container

00:02:15,599 --> 00:02:18,720
building

00:02:16,160 --> 00:02:21,760
um and the first capabilities to churn

00:02:18,720 --> 00:02:25,120
out container images on the basis of on

00:02:21,760 --> 00:02:28,520
packages was added to the tool

00:02:25,120 --> 00:02:29,920
um and that led to a second milestone in

00:02:28,520 --> 00:02:33,120
00:02:29,920 --> 00:02:33,920
um when we figured out that all these

00:02:33,120 --> 00:02:36,000
containers

00:02:33,920 --> 00:02:37,840
also need to be registered somewhere

00:02:36,000 --> 00:02:38,720
they need to become discoverable they

00:02:37,840 --> 00:02:41,599
need to become

00:02:38,720 --> 00:02:42,480
downloadable in an easy way um so open

00:02:41,599 --> 00:02:45,040
build service

00:02:42,480 --> 00:02:47,440
added a built-in container registry with

00:02:45,040 --> 00:02:50,800
automated publishing potential

00:02:47,440 --> 00:02:53,519
um and fast forward to 2020 i'm very

00:02:50,800 --> 00:02:54,319
happy that we've also added helm chart

00:02:53,519 --> 00:02:56,480
support

00:02:54,319 --> 00:02:57,440
so we can't just put out individual

00:02:56,480 --> 00:03:00,159
containers

00:02:57,440 --> 00:03:00,879
but entire assemblies of containers into

00:03:00,159 --> 00:03:03,840
services

00:03:00,879 --> 00:03:05,440
and into applications and that the first

00:03:03,840 --> 00:03:07,920
v3 helm chart

00:03:05,440 --> 00:03:08,879
is actually public and available on our

00:03:07,920 --> 00:03:12,000
registry

00:03:08,879 --> 00:03:12,000
at this very moment

00:03:12,959 --> 00:03:17,920
the address of the registry of the open

00:03:15,920 --> 00:03:20,400
build service registry which you also

00:03:17,920 --> 00:03:24,319
see screenshotting on this document

00:03:20,400 --> 00:03:27,120
is registry under opensuse.org

00:03:24,319 --> 00:03:27,680
and at the moment um we have about a

00:03:27,120 --> 00:03:30,560
thousand

00:03:27,680 --> 00:03:31,280
one hundred containers in this registry

00:03:30,560 --> 00:03:34,400
okay

00:03:31,280 --> 00:03:37,920
slightly i think it's 1089 but that's

00:03:34,400 --> 00:03:40,720
close enough to 1100 to make that claim

00:03:37,920 --> 00:03:42,159
um we're also running about 3 000

00:03:40,720 --> 00:03:44,799
container builds

00:03:42,159 --> 00:03:46,000
every single day because the build

00:03:44,799 --> 00:03:48,560
service includes

00:03:46,000 --> 00:03:50,560
automated dependency management so

00:03:48,560 --> 00:03:52,959
whenever a package

00:03:50,560 --> 00:03:54,080
um that a container has a dependency on

00:03:52,959 --> 00:03:56,560
gets updated

00:03:54,080 --> 00:03:57,760
obs will automatically rebuild that

00:03:56,560 --> 00:04:00,480
container image

00:03:57,760 --> 00:04:02,480
and make it available on the registry

00:04:00,480 --> 00:04:05,680
for all supported architectures

00:04:02,480 --> 00:04:08,959
whether that's arm 32-bit

00:04:05,680 --> 00:04:13,519
arm 64-bit the power pc solutions

00:04:08,959 --> 00:04:16,000
intel 64-bit and other platforms

00:04:13,519 --> 00:04:16,880
the open build service registry supports

00:04:16,000 --> 00:04:19,600
all flavors

00:04:16,880 --> 00:04:20,239
of container target architectures and at

00:04:19,600 --> 00:04:23,440
the moment

00:04:20,239 --> 00:04:25,919
um we have about 48 gigabytes of images

00:04:23,440 --> 00:04:27,600
under management um with the open build

00:04:25,919 --> 00:04:30,880
service registry

00:04:27,600 --> 00:04:34,960
it's easily accessible for you at the

00:04:30,880 --> 00:04:37,120
url in the headline via podman commands

00:04:34,960 --> 00:04:39,360
that are also available from the comment

00:04:37,120 --> 00:04:39,360
line

00:04:39,759 --> 00:04:44,320
what makes the open build service so

00:04:41,919 --> 00:04:47,919
strong in a container environment

00:04:44,320 --> 00:04:51,199
and in a trusted environment

00:04:47,919 --> 00:04:52,880
is that it really engenders trust in the

00:04:51,199 --> 00:04:55,520
form of a secure

00:04:52,880 --> 00:04:57,759
software supply chain so when you double

00:04:55,520 --> 00:04:59,919
click on any particular package

00:04:57,759 --> 00:05:01,039
and i'll continue with the example of

00:04:59,919 --> 00:05:03,120
mariadb

00:05:01,039 --> 00:05:05,199
which was also depicted on the prior

00:05:03,120 --> 00:05:08,000
patch when you go and double click

00:05:05,199 --> 00:05:08,720
on any particular package you can be

00:05:08,000 --> 00:05:11,039
sure

00:05:08,720 --> 00:05:12,080
that that package is trustworthy because

00:05:11,039 --> 00:05:14,720
it's been signed

00:05:12,080 --> 00:05:16,400
i'm using both notary and open container

00:05:14,720 --> 00:05:19,199
initiative conventions

00:05:16,400 --> 00:05:21,360
so that we have a rooted trust for where

00:05:19,199 --> 00:05:25,120
on the binary comes from

00:05:21,360 --> 00:05:27,680
you're also able um to transparently see

00:05:25,120 --> 00:05:29,759
what went into the cake now we will show

00:05:27,680 --> 00:05:31,919
you how the sausage is made

00:05:29,759 --> 00:05:32,880
on the build instructions for that very

00:05:31,919 --> 00:05:35,120
container

00:05:32,880 --> 00:05:36,800
are accessible from the repository you

00:05:35,120 --> 00:05:38,880
can see the scripts you can see the

00:05:36,800 --> 00:05:41,759
templates that created it

00:05:38,880 --> 00:05:43,039
and you have the snapshot sources for

00:05:41,759 --> 00:05:45,680
each container

00:05:43,039 --> 00:05:47,680
available at the point of build and this

00:05:45,680 --> 00:05:51,360
is a very important part

00:05:47,680 --> 00:05:53,919
of software trust which cios today

00:05:51,360 --> 00:05:55,440
really have transparency about their

00:05:53,919 --> 00:05:57,520
container landscape

00:05:55,440 --> 00:05:58,800
which of them are able to say with

00:05:57,520 --> 00:06:01,680
certainty

00:05:58,800 --> 00:06:02,479
all my containers are patched against

00:06:01,680 --> 00:06:06,240
the latest

00:06:02,479 --> 00:06:07,360
vulnerability okay maybe not the very

00:06:06,240 --> 00:06:10,240
latest because

00:06:07,360 --> 00:06:11,520
of the bluetooth vulnerability that

00:06:10,240 --> 00:06:14,240
became transparent

00:06:11,520 --> 00:06:15,919
yesterday night doesn't hit servers but

00:06:14,240 --> 00:06:18,000
the second latest which might be

00:06:15,919 --> 00:06:20,639
boothole or another prominent

00:06:18,000 --> 00:06:22,319
vulnerability how do you see that your

00:06:20,639 --> 00:06:25,360
images are actually

00:06:22,319 --> 00:06:27,919
proof against these it's only by having

00:06:25,360 --> 00:06:29,600
a root of trust by having transparency

00:06:27,919 --> 00:06:30,560
about what went into building the

00:06:29,600 --> 00:06:32,160
container

00:06:30,560 --> 00:06:34,639
and by having drill down and

00:06:32,160 --> 00:06:35,840
transparency on the sources for each of

00:06:34,639 --> 00:06:37,759
these containers

00:06:35,840 --> 00:06:39,120
and this is where the build service is

00:06:37,759 --> 00:06:40,880
extremely strong

00:06:39,120 --> 00:06:43,199
um because there's no outside

00:06:40,880 --> 00:06:46,319
dependencies and we're able to rebuild

00:06:43,199 --> 00:06:49,280
even extremely old packages

00:06:46,319 --> 00:06:50,160
based on that root of trust and open

00:06:49,280 --> 00:06:51,759
source

00:06:50,160 --> 00:06:53,280
source code and build instruction

00:06:51,759 --> 00:06:56,639
repository approach

00:06:53,280 --> 00:06:56,639
that the obs takes

00:06:56,960 --> 00:07:03,199
how do these images get built um when we

00:07:00,240 --> 00:07:06,000
further double click on the mariadb

00:07:03,199 --> 00:07:07,680
example here you can see that the

00:07:06,000 --> 00:07:10,720
built-in structures

00:07:07,680 --> 00:07:13,599
for that container um come

00:07:10,720 --> 00:07:14,599
in the form of tv instructions on the

00:07:13,599 --> 00:07:18,400
civ

00:07:14,599 --> 00:07:20,240
xml description file on this page which

00:07:18,400 --> 00:07:22,880
shows us the author which shows the

00:07:20,240 --> 00:07:24,960
contact details the specification

00:07:22,880 --> 00:07:27,520
and then the kind of image that we use

00:07:24,960 --> 00:07:30,800
in order to create that particular

00:07:27,520 --> 00:07:33,599
that particular binary and

00:07:30,800 --> 00:07:34,400
the build instructions for this can

00:07:33,599 --> 00:07:36,800
support

00:07:34,400 --> 00:07:38,479
all possible targets in modern

00:07:36,800 --> 00:07:41,440
enterprise compute

00:07:38,479 --> 00:07:43,039
whether it's azure images aws images

00:07:41,440 --> 00:07:46,400
virtual machine images

00:07:43,039 --> 00:07:49,039
whether that's isos um or containers

00:07:46,400 --> 00:07:50,319
um tv allows you and the open build

00:07:49,039 --> 00:07:53,120
service allows you

00:07:50,319 --> 00:07:54,400
to create a multitude of targets

00:07:53,120 --> 00:07:56,639
automatically

00:07:54,400 --> 00:07:57,440
on whenever sources get updated and

00:07:56,639 --> 00:08:00,319
committed

00:07:57,440 --> 00:08:00,960
um based on that description at that

00:08:00,319 --> 00:08:04,000
matrix

00:08:00,960 --> 00:08:04,400
of targets and sources the neat thing

00:08:04,000 --> 00:08:07,039
about

00:08:04,400 --> 00:08:08,240
building with tv is also um that you're

00:08:07,039 --> 00:08:11,360
able to create

00:08:08,240 --> 00:08:12,319
base containers which have no problem in

00:08:11,360 --> 00:08:14,400
the docker

00:08:12,319 --> 00:08:16,960
file which have no base container that

00:08:14,400 --> 00:08:18,319
they rely on they can become the base of

00:08:16,960 --> 00:08:20,800
an entire system

00:08:18,319 --> 00:08:22,240
which gets interesting for example with

00:08:20,800 --> 00:08:24,960
distro-less approaches

00:08:22,240 --> 00:08:26,879
to software distribution a lot of people

00:08:24,960 --> 00:08:28,000
i'm in the golang communities for

00:08:26,879 --> 00:08:30,720
example

00:08:28,000 --> 00:08:31,599
um i'm following static leading binary

00:08:30,720 --> 00:08:33,519
approaches

00:08:31,599 --> 00:08:35,200
should see the strengths of this fairly

00:08:33,519 --> 00:08:37,919
immediately

00:08:35,200 --> 00:08:40,159
of course on tv is not the only path and

00:08:37,919 --> 00:08:42,959
it's not a mandatory path

00:08:40,159 --> 00:08:42,959
our open builds

00:08:43,519 --> 00:08:49,360
is built templates with a few

00:08:46,720 --> 00:08:50,399
extra features and capabilities to take

00:08:49,360 --> 00:08:54,320
the manual

00:08:50,399 --> 00:08:57,200
out of operating docker needing to tag

00:08:54,320 --> 00:08:59,279
um your containers with build tags um

00:08:57,200 --> 00:09:01,279
that's something we have extensions for

00:08:59,279 --> 00:09:03,440
and you can assign build tags or

00:09:01,279 --> 00:09:06,160
repositories automatically

00:09:03,440 --> 00:09:07,760
and you're also able to choose whether

00:09:06,160 --> 00:09:11,200
in that docker container

00:09:07,760 --> 00:09:12,880
you would like to reuse rpms um

00:09:11,200 --> 00:09:15,120
with the zipper run command that's

00:09:12,880 --> 00:09:17,360
commented out here on line 11

00:09:15,120 --> 00:09:20,560
or whether you would like to put files

00:09:17,360 --> 00:09:23,760
indirectly or compile files directly

00:09:20,560 --> 00:09:25,279
with the um added names or copy lines in

00:09:23,760 --> 00:09:27,839
line 14 and 15

00:09:25,279 --> 00:09:29,040
of this example file um so you get full

00:09:27,839 --> 00:09:32,080
flexibility

00:09:29,040 --> 00:09:32,640
in an open world um where it's any kind

00:09:32,080 --> 00:09:35,279
of

00:09:32,640 --> 00:09:36,080
um package distribution format any kind

00:09:35,279 --> 00:09:38,320
of container

00:09:36,080 --> 00:09:39,760
format i mean the ability to

00:09:38,320 --> 00:09:42,160
transparently create

00:09:39,760 --> 00:09:43,360
from your sources for your project for

00:09:42,160 --> 00:09:46,320
your package

00:09:43,360 --> 00:09:48,959
on that broad variety of dependent

00:09:46,320 --> 00:09:51,680
binary outputs

00:09:48,959 --> 00:09:52,720
why should you do that um because you

00:09:51,680 --> 00:09:55,600
get automated

00:09:52,720 --> 00:09:56,640
rebuilds for free um including always

00:09:55,600 --> 00:09:59,360
latest updates

00:09:56,640 --> 00:10:00,320
on based on dependent packages in a

00:09:59,360 --> 00:10:02,640
container world

00:10:00,320 --> 00:10:04,320
it's also very convenient to see the

00:10:02,640 --> 00:10:07,120
full dependency graph

00:10:04,320 --> 00:10:09,760
what are the affected containers for my

00:10:07,120 --> 00:10:11,839
package update who's actually using this

00:10:09,760 --> 00:10:14,079
and what do my downstream users look

00:10:11,839 --> 00:10:17,760
like for library package

00:10:14,079 --> 00:10:20,160
um for a service package or for anything

00:10:17,760 --> 00:10:21,680
that goes into a broader appliance-like

00:10:20,160 --> 00:10:24,560
container

00:10:21,680 --> 00:10:26,640
you can also very easily see and inspect

00:10:24,560 --> 00:10:27,600
images for build origins to have

00:10:26,640 --> 00:10:30,880
traceability

00:10:27,600 --> 00:10:33,120
in that secure software supply chain

00:10:30,880 --> 00:10:33,920
and auto-generated change locks that

00:10:33,120 --> 00:10:37,040
enable you

00:10:33,920 --> 00:10:39,040
to visually and you you mainly inspect

00:10:37,040 --> 00:10:40,560
um what's going on with container

00:10:39,040 --> 00:10:43,279
updates

00:10:40,560 --> 00:10:45,200
we're not alone i'm in putting out this

00:10:43,279 --> 00:10:46,240
out i'm so at this point i want to give

00:10:45,200 --> 00:10:49,040
a big shout out

00:10:46,240 --> 00:10:49,920
thanks to our community the open build

00:10:49,040 --> 00:10:52,240
service team

00:10:49,920 --> 00:10:53,040
would explicitly like to thank marcus

00:10:52,240 --> 00:10:56,480
hoover

00:10:53,040 --> 00:10:59,040
tina miller berthold riven oleg gerko

00:10:56,480 --> 00:11:00,320
and neil gompa for their strong

00:10:59,040 --> 00:11:03,839
contributions

00:11:00,320 --> 00:11:04,959
to the open build service um it's only

00:11:03,839 --> 00:11:07,600
with contributors

00:11:04,959 --> 00:11:09,680
and with an active and engaged community

00:11:07,600 --> 00:11:12,160
on that a platform like this

00:11:09,680 --> 00:11:12,959
can continue to evolve and continue to

00:11:12,160 --> 00:11:16,079
address

00:11:12,959 --> 00:11:17,279
everybody's needs so thank you um very

00:11:16,079 --> 00:11:19,760
very well done

00:11:17,279 --> 00:11:22,000
and we really appreciate your

00:11:19,760 --> 00:11:24,560
contributions

00:11:22,000 --> 00:11:27,360
with that i want to switch over a bit in

00:11:24,560 --> 00:11:29,519
the direction of building opensuse

00:11:27,360 --> 00:11:31,120
and what are the changes and what are

00:11:29,519 --> 00:11:33,680
the new developments

00:11:31,120 --> 00:11:34,800
that this entails if we embark on a

00:11:33,680 --> 00:11:36,959
journey together

00:11:34,800 --> 00:11:38,399
that's currently proposed under the code

00:11:36,959 --> 00:11:42,160
name opensuse

00:11:38,399 --> 00:11:45,600
jump so let's have a quick look at how

00:11:42,160 --> 00:11:48,000
opensuse actually gets built today

00:11:45,600 --> 00:11:48,959
what are some challenges about that and

00:11:48,000 --> 00:11:51,600
what could we do

00:11:48,959 --> 00:11:52,800
to address that to become even better

00:11:51,600 --> 00:11:55,760
even stronger

00:11:52,800 --> 00:11:58,480
and dare i say slightly greener in all

00:11:55,760 --> 00:12:01,680
of this together

00:11:58,480 --> 00:12:05,600
so this is how opensuse gets

00:12:01,680 --> 00:12:08,800
built today it's really a single project

00:12:05,600 --> 00:12:11,680
built we're taking all the sources

00:12:08,800 --> 00:12:12,560
from the enterprise distributions linux

00:12:11,680 --> 00:12:15,440
enterprise

00:12:12,560 --> 00:12:16,800
from the opensuse factory and we take

00:12:15,440 --> 00:12:20,320
all of these sources

00:12:16,800 --> 00:12:23,360
and inject them into an opensuse leap or

00:12:20,320 --> 00:12:25,360
opensuse tumbleweed environment um

00:12:23,360 --> 00:12:27,680
and there's additional layers of

00:12:25,360 --> 00:12:30,079
projects that go on top of this

00:12:27,680 --> 00:12:32,160
for example for the arm environments in

00:12:30,079 --> 00:12:35,279
the 32 and 64 bit

00:12:32,160 --> 00:12:38,720
or for the power pc environment

00:12:35,279 --> 00:12:42,399
that's a grand total of more than 12 000

00:12:38,720 --> 00:12:43,200
packages that get compiled with various

00:12:42,399 --> 00:12:46,560
flags

00:12:43,200 --> 00:12:47,480
and sort of configurations into roughly

00:12:46,560 --> 00:12:51,519
00:12:47,480 --> 00:12:54,800
071 000 packages per architecture

00:12:51,519 --> 00:12:55,680
um and that compiled process then gets

00:12:54,800 --> 00:12:58,800
frozen

00:12:55,680 --> 00:13:01,120
um once we release and

00:12:58,800 --> 00:13:03,120
we continue to do back ports we continue

00:13:01,120 --> 00:13:06,000
to do maintenance updates

00:13:03,120 --> 00:13:08,480
um the back ports particularly a service

00:13:06,000 --> 00:13:10,880
for three customers

00:13:08,480 --> 00:13:12,639
now you could look at this and say well

00:13:10,880 --> 00:13:14,959
this is very open this is very

00:13:12,639 --> 00:13:17,279
transparent we just take all the sources

00:13:14,959 --> 00:13:18,800
we use that fantastic open build service

00:13:17,279 --> 00:13:21,440
engine that we have

00:13:18,800 --> 00:13:22,720
and we churn out the binaries that are

00:13:21,440 --> 00:13:26,000
required to run this

00:13:22,720 --> 00:13:29,279
on any architecture what's there

00:13:26,000 --> 00:13:29,680
not to like well it turns out that there

00:13:29,279 --> 00:13:32,560
are

00:13:29,680 --> 00:13:33,279
a couple challenges and issues around us

00:13:32,560 --> 00:13:36,160
that i want to

00:13:33,279 --> 00:13:38,079
have a look at together with you so one

00:13:36,160 --> 00:13:39,920
of these challenges is

00:13:38,079 --> 00:13:42,240
we really don't have binary

00:13:39,920 --> 00:13:44,959
compatibility between open source

00:13:42,240 --> 00:13:46,000
and speak um because we're compiling

00:13:44,959 --> 00:13:48,800
slightly different

00:13:46,000 --> 00:13:49,519
change slightly different compiler

00:13:48,800 --> 00:13:52,320
versions

00:13:49,519 --> 00:13:53,279
slightly different layers that get added

00:13:52,320 --> 00:13:56,880
so there's no

00:13:53,279 --> 00:13:59,600
clear one-on-one bitwise compatibility

00:13:56,880 --> 00:14:01,519
between the two and that's actually a

00:13:59,600 --> 00:14:04,320
bit of a disadvantage here

00:14:01,519 --> 00:14:06,720
end users who would like to use open

00:14:04,320 --> 00:14:08,800
universe packages for example

00:14:06,720 --> 00:14:10,000
um have a bit of a challenge doing that

00:14:08,800 --> 00:14:12,639
and the experience for

00:14:10,000 --> 00:14:13,120
end users could be better it's hard to

00:14:12,639 --> 00:14:15,440
them

00:14:13,120 --> 00:14:16,639
to explain to them on why the packages

00:14:15,440 --> 00:14:19,519
shouldn't directly

00:14:16,639 --> 00:14:21,040
binarily work together on the same thing

00:14:19,519 --> 00:14:21,519
is we have a bit of duplication and

00:14:21,040 --> 00:14:23,519
effort

00:14:21,519 --> 00:14:25,120
for the package developers for the

00:14:23,519 --> 00:14:27,839
container maintainers

00:14:25,120 --> 00:14:28,959
and more because we need to configure

00:14:27,839 --> 00:14:31,760
and set things up

00:14:28,959 --> 00:14:34,000
so that they work in both environments

00:14:31,760 --> 00:14:36,800
we also have a bit of an echo issue

00:14:34,000 --> 00:14:37,839
because we're going to compute and

00:14:36,800 --> 00:14:40,000
compile

00:14:37,839 --> 00:14:41,839
everything twice we're going to store

00:14:40,000 --> 00:14:44,160
everything twice

00:14:41,839 --> 00:14:46,320
and with the many many gigabytes under

00:14:44,160 --> 00:14:47,920
management and the many many thousands

00:14:46,320 --> 00:14:51,199
of compiles per day

00:14:47,920 --> 00:14:53,519
um we have over 200 workers for example

00:14:51,199 --> 00:14:55,199
um running and making these compiles and

00:14:53,519 --> 00:14:56,320
there's also a bit of an echo footprint

00:14:55,199 --> 00:14:58,720
issue

00:14:56,320 --> 00:15:00,320
um so the proposed approach with an

00:14:58,720 --> 00:15:03,360
opensuse jump

00:15:00,320 --> 00:15:04,720
um makes this interlink much much more

00:15:03,360 --> 00:15:07,440
explicitly

00:15:04,720 --> 00:15:09,600
we take this susan internal component

00:15:07,440 --> 00:15:10,240
the binaries and we mirror these to the

00:15:09,600 --> 00:15:13,839
public

00:15:10,240 --> 00:15:15,600
opensuse instance that's a huge one

00:15:13,839 --> 00:15:17,519
because suddenly we get binary

00:15:15,600 --> 00:15:20,399
compatibility because we can work

00:15:17,519 --> 00:15:22,320
directly with the binary this also means

00:15:20,399 --> 00:15:23,040
that submissions to susan linux

00:15:22,320 --> 00:15:26,079
enterprise

00:15:23,040 --> 00:15:28,720
can be triggered directly from opensuse

00:15:26,079 --> 00:15:29,839
making slee the first enterprise

00:15:28,720 --> 00:15:32,560
distribution

00:15:29,839 --> 00:15:33,440
that can really be developed in the

00:15:32,560 --> 00:15:36,399
public

00:15:33,440 --> 00:15:37,839
thanks to all of you i want to say at

00:15:36,399 --> 00:15:41,040
this point that

00:15:37,839 --> 00:15:43,440
this isn't 100 possible for the

00:15:41,040 --> 00:15:45,600
entire sleep distribution we couldn't

00:15:43,440 --> 00:15:46,399
take that completely public at that

00:15:45,600 --> 00:15:49,120
point

00:15:46,399 --> 00:15:51,040
because of certain requirements around

00:15:49,120 --> 00:15:53,360
software certifications

00:15:51,040 --> 00:15:54,399
it's not just the software product that

00:15:53,360 --> 00:15:55,920
gets certified

00:15:54,399 --> 00:15:58,000
for certain kinds of federal and

00:15:55,920 --> 00:16:00,000
regulated and government users

00:15:58,000 --> 00:16:01,839
it's also the software development

00:16:00,000 --> 00:16:04,480
process that gets certified

00:16:01,839 --> 00:16:05,040
so we can't take the entirely and open

00:16:04,480 --> 00:16:07,120
it up

00:16:05,040 --> 00:16:08,720
but this is the best step that we can

00:16:07,120 --> 00:16:11,600
take to become

00:16:08,720 --> 00:16:12,240
ever more open and to remain ever more

00:16:11,600 --> 00:16:14,560
open

00:16:12,240 --> 00:16:15,360
i'm in an environment that brings open

00:16:14,560 --> 00:16:18,560
susa

00:16:15,360 --> 00:16:19,839
and sleep much closer together by making

00:16:18,560 --> 00:16:22,160
that jump

00:16:19,839 --> 00:16:24,000
so what does that look like on the build

00:16:22,160 --> 00:16:27,360
service and what does that look like

00:16:24,000 --> 00:16:30,560
um from a build approach perspective

00:16:27,360 --> 00:16:31,279
uh here's what opensuse jump will look

00:16:30,560 --> 00:16:33,920
like

00:16:31,279 --> 00:16:34,639
from that build perspective so we're

00:16:33,920 --> 00:16:37,920
going to use

00:16:34,639 --> 00:16:41,279
multiple projects and these projects

00:16:37,920 --> 00:16:44,959
will aggregate into an opensuse jump

00:16:41,279 --> 00:16:47,519
on a binary level we can bring in c15

00:16:44,959 --> 00:16:48,639
we can bring in internal build service

00:16:47,519 --> 00:16:52,000
packages

00:16:48,639 --> 00:16:55,519
we can bring in back ports from opensuse

00:16:52,000 --> 00:16:58,880
more or less directly um in a binary

00:16:55,519 --> 00:17:01,440
form as that black dotted binary stream

00:16:58,880 --> 00:17:03,440
and at the same time we can push

00:17:01,440 --> 00:17:06,400
requests and content

00:17:03,440 --> 00:17:07,360
um sort of in the form of sources back

00:17:06,400 --> 00:17:09,679
into all these

00:17:07,360 --> 00:17:11,280
channels that's the red arrows going the

00:17:09,679 --> 00:17:13,439
opposite direction

00:17:11,280 --> 00:17:14,480
and that's this sort of two-pronged

00:17:13,439 --> 00:17:17,120
interaction

00:17:14,480 --> 00:17:18,400
where we open up everything we can

00:17:17,120 --> 00:17:21,679
except for that

00:17:18,400 --> 00:17:24,799
certified software development process

00:17:21,679 --> 00:17:27,679
we move opensuse and sleep

00:17:24,799 --> 00:17:29,360
much closer together and we achieve that

00:17:27,679 --> 00:17:32,080
binary compatibility

00:17:29,360 --> 00:17:34,240
which makes the world a lot easier for

00:17:32,080 --> 00:17:36,880
end users that consume the software

00:17:34,240 --> 00:17:38,960
for administrators that work with it um

00:17:36,880 --> 00:17:41,520
and from the storage and footprint and

00:17:38,960 --> 00:17:44,480
general simplicity perspective

00:17:41,520 --> 00:17:45,039
and that in the end gets installed on a

00:17:44,480 --> 00:17:48,799
system

00:17:45,039 --> 00:17:49,520
that can consume updates in a consistent

00:17:48,799 --> 00:17:52,000
form

00:17:49,520 --> 00:17:54,320
from any of the channels whether it's

00:17:52,000 --> 00:17:55,520
jump whether it's back ports or whether

00:17:54,320 --> 00:17:58,640
it's the proper slee

00:17:55,520 --> 00:18:01,600
itself the power of this

00:17:58,640 --> 00:18:02,480
really means that end users have more

00:18:01,600 --> 00:18:05,600
choice

00:18:02,480 --> 00:18:06,480
with less complexity um and with more

00:18:05,600 --> 00:18:08,080
ease of mind

00:18:06,480 --> 00:18:10,559
because they know everything works

00:18:08,080 --> 00:18:10,559
together

00:18:10,880 --> 00:18:16,400
we're happy to support us thanks to

00:18:14,160 --> 00:18:18,320
the power of the build service which is

00:18:16,400 --> 00:18:19,760
running as an open build service for

00:18:18,320 --> 00:18:22,160
everything opensuse

00:18:19,760 --> 00:18:24,000
and which is running as soos as internal

00:18:22,160 --> 00:18:27,200
version of the build service called

00:18:24,000 --> 00:18:28,000
ibs um to power the c distribution

00:18:27,200 --> 00:18:29,919
itself

00:18:28,000 --> 00:18:31,679
and it's actually the same software the

00:18:29,919 --> 00:18:34,000
same build environment

00:18:31,679 --> 00:18:35,039
that powers both of them in two separate

00:18:34,000 --> 00:18:38,000
instances

00:18:35,039 --> 00:18:40,240
again for certification reasons um we'd

00:18:38,000 --> 00:18:41,760
love to make that jump together with you

00:18:40,240 --> 00:18:44,160
and i know it's being discussed

00:18:41,760 --> 00:18:47,039
intensively at this conference

00:18:44,160 --> 00:18:49,280
so here's the outlook you can learn more

00:18:47,039 --> 00:18:52,720
in additional conference sessions

00:18:49,280 --> 00:18:53,440
on leap and why both developers and

00:18:52,720 --> 00:18:55,360
companies

00:18:53,440 --> 00:18:57,280
should be interested in the leap

00:18:55,360 --> 00:18:59,600
approach my colleague blue bosch

00:18:57,280 --> 00:19:00,880
is giving these talks today and i

00:18:59,600 --> 00:19:02,400
believe tomorrow

00:19:00,880 --> 00:19:03,919
there should also be recordings

00:19:02,400 --> 00:19:05,840
available

00:19:03,919 --> 00:19:08,320
the next thing you can do is to keep

00:19:05,840 --> 00:19:09,919
current by joining the opensuse project

00:19:08,320 --> 00:19:12,799
mailing list

00:19:09,919 --> 00:19:13,760
where you will be involved in a vigorous

00:19:12,799 --> 00:19:16,960
discussion

00:19:13,760 --> 00:19:19,200
and involved in information flow on

00:19:16,960 --> 00:19:19,679
everything concerning opensuse and the

00:19:19,200 --> 00:19:21,600
way

00:19:19,679 --> 00:19:23,280
we propose to build and the way we

00:19:21,600 --> 00:19:25,600
propose to integrate

00:19:23,280 --> 00:19:26,480
and last but not least if you're at this

00:19:25,600 --> 00:19:29,039
conference

00:19:26,480 --> 00:19:31,120
because deeper offers is what interests

00:19:29,039 --> 00:19:32,960
you and what you thrive on

00:19:31,120 --> 00:19:34,400
consider becoming an open source

00:19:32,960 --> 00:19:37,840
developer as well

00:19:34,400 --> 00:19:39,520
it's by your contributions that opensuse

00:19:37,840 --> 00:19:42,000
the open build service

00:19:39,520 --> 00:19:43,039
and the general open source environment

00:19:42,000 --> 00:19:46,000
here in europe

00:19:43,039 --> 00:19:46,880
can thrive and sort of continue to

00:19:46,000 --> 00:19:49,600
prosper

00:19:46,880 --> 00:19:50,480
in future thank you very much and i'd be

00:19:49,600 --> 00:20:07,600
very happy

00:19:50,480 --> 00:20:10,080
to open up for questions at this point

00:20:07,600 --> 00:20:12,320
now you have to hit that button labeled

00:20:10,080 --> 00:20:15,919
unmute if you would like to ask a

00:20:12,320 --> 00:20:15,919
question in a big forum like this

00:20:18,400 --> 00:20:21,840
well i'm pretty happy to see how well

00:20:20,720 --> 00:20:25,120
this is going

00:20:21,840 --> 00:20:28,240
um so with this

00:20:25,120 --> 00:20:28,880
this seemingly uh interesting ambition

00:20:28,240 --> 00:20:32,000
of

00:20:28,880 --> 00:20:34,720
with opensuse jump um

00:20:32,000 --> 00:20:35,440
what do you what do you hope you'll get

00:20:34,720 --> 00:20:37,440
from this

00:20:35,440 --> 00:20:39,280
in the end what what do you ex what do

00:20:37,440 --> 00:20:44,159
you want to achieve

00:20:39,280 --> 00:20:47,360
with this new uh sleep leap fusion

00:20:44,159 --> 00:20:51,200
yeah um i think the biggest thing

00:20:47,360 --> 00:20:54,240
is probably simplicity for end users

00:20:51,200 --> 00:20:56,159
now i'm passionate about user experience

00:20:54,240 --> 00:20:58,640
and customer experience

00:20:56,159 --> 00:21:00,799
and whenever i meet with my teams to

00:20:58,640 --> 00:21:02,720
look at demos to look at new things that

00:21:00,799 --> 00:21:04,720
they've created or new things from

00:21:02,720 --> 00:21:06,240
upstream that they've incorporated and

00:21:04,720 --> 00:21:08,480
packaged

00:21:06,240 --> 00:21:09,280
i will put myself in the shoes of the

00:21:08,480 --> 00:21:13,520
end user and

00:21:09,280 --> 00:21:16,880
ask is this simple is it easy would my

00:21:13,520 --> 00:21:18,960
79 year old with a history of

00:21:16,880 --> 00:21:21,039
being challenged with it systems

00:21:18,960 --> 00:21:21,600
actually understand this could she use

00:21:21,039 --> 00:21:24,240
this

00:21:21,600 --> 00:21:24,880
what's the potential for tripping up and

00:21:24,240 --> 00:21:27,280
i believe

00:21:24,880 --> 00:21:28,960
by getting binary compatibility between

00:21:27,280 --> 00:21:31,760
the distributions

00:21:28,960 --> 00:21:32,960
we're removing a lot of potential for

00:21:31,760 --> 00:21:36,159
tripping up

00:21:32,960 --> 00:21:39,120
in an age where more and more users

00:21:36,159 --> 00:21:40,240
are coming into linux environments again

00:21:39,120 --> 00:21:42,720
more and more cost

00:21:40,240 --> 00:21:45,280
constrained households adding secondary

00:21:42,720 --> 00:21:48,480
and tertiary devices for children

00:21:45,280 --> 00:21:50,240
more and more enterprises going towards

00:21:48,480 --> 00:21:52,880
a linux environment

00:21:50,240 --> 00:21:54,000
and windows administrators facing all

00:21:52,880 --> 00:21:56,559
kinds of challenges

00:21:54,000 --> 00:21:58,640
having to retrain and relearn to for

00:21:56,559 --> 00:22:01,600
example deploy their enterprise

00:21:58,640 --> 00:22:02,080
applications on a linux stack making

00:22:01,600 --> 00:22:04,960
things

00:22:02,080 --> 00:22:05,840
easy foolproof and fail safe because

00:22:04,960 --> 00:22:08,320
stuff just

00:22:05,840 --> 00:22:10,000
works together out of the box is

00:22:08,320 --> 00:22:12,720
probably the biggest price

00:22:10,000 --> 00:22:14,960
that we can shoot for now put yourselves

00:22:12,720 --> 00:22:17,840
into the shoes of a

00:22:14,960 --> 00:22:19,360
recent college graduate half a year into

00:22:17,840 --> 00:22:21,679
the job

00:22:19,360 --> 00:22:23,039
living in mumbai working for a large

00:22:21,679 --> 00:22:26,960
system integrator

00:22:23,039 --> 00:22:29,200
and having a 20 000 best practice guide

00:22:26,960 --> 00:22:31,200
to install and configure something

00:22:29,200 --> 00:22:33,039
you're going to make mistakes you're

00:22:31,200 --> 00:22:34,640
going to look bad in front of your boss

00:22:33,039 --> 00:22:37,840
and in front of the customer

00:22:34,640 --> 00:22:39,360
the more stumbling blocks we move out of

00:22:37,840 --> 00:22:41,760
these people's ways

00:22:39,360 --> 00:22:43,600
the more adoption will get and that

00:22:41,760 --> 00:22:44,400
grows the power of open source for

00:22:43,600 --> 00:22:46,640
everyone

00:22:44,400 --> 00:22:47,760
so removing these stumbling blocks

00:22:46,640 --> 00:22:50,640
simplifying

00:22:47,760 --> 00:22:51,280
and making the consumption experience as

00:22:50,640 --> 00:22:53,200
easy

00:22:51,280 --> 00:22:55,600
as sort of downloading something from an

00:22:53,200 --> 00:22:56,960
app store i think that's the main price

00:22:55,600 --> 00:22:59,200
that we can go for

00:22:56,960 --> 00:23:01,200
the fact that we will also cut the echo

00:22:59,200 --> 00:23:04,560
footprint of what we do in half

00:23:01,200 --> 00:23:06,480
is a pleasant side effect

00:23:04,560 --> 00:23:08,400
[Music]

00:23:06,480 --> 00:23:09,600
wow that's i think quite a bit more than

00:23:08,400 --> 00:23:13,280
i expected to hear

00:23:09,600 --> 00:23:16,320
on this um but yeah no

00:23:13,280 --> 00:23:18,080
it makes sense to me uh i'm

00:23:16,320 --> 00:23:20,799
looking forward to seeing how how well

00:23:18,080 --> 00:23:23,360
has this been going so far

00:23:20,799 --> 00:23:24,240
um so right now this is being discussed

00:23:23,360 --> 00:23:27,039
intensively

00:23:24,240 --> 00:23:27,440
um and i believe the proposal is being

00:23:27,039 --> 00:23:30,400
um

00:23:27,440 --> 00:23:31,120
um debated um in various parts of the

00:23:30,400 --> 00:23:35,280
open source

00:23:31,120 --> 00:23:36,640
project as well as in suse itself um i

00:23:35,280 --> 00:23:40,000
have my fingers crossed

00:23:36,640 --> 00:23:43,360
for this actually becoming reality

00:23:40,000 --> 00:23:46,400
may i comment on this one please jump in

00:23:43,360 --> 00:23:48,480
thank you this is lubos speaking hi

00:23:46,400 --> 00:23:50,080
very glad to have you here okay thank

00:23:48,480 --> 00:23:51,039
you for the talk it was really

00:23:50,080 --> 00:23:54,080
interesting

00:23:51,039 --> 00:23:56,080
uh so uh regarding the progress my

00:23:54,080 --> 00:23:57,679
slides will have a little bit of what

00:23:56,080 --> 00:23:59,279
you are asking neil um

00:23:57,679 --> 00:24:00,720
i will summarize where we are what are

00:23:59,279 --> 00:24:02,159
the problematic parts there are some

00:24:00,720 --> 00:24:04,480
problematic parts there are some parts

00:24:02,159 --> 00:24:07,600
where we are fine

00:24:04,480 --> 00:24:09,360
and there should be a sign off

00:24:07,600 --> 00:24:10,559
let's say go now go next week whether we

00:24:09,360 --> 00:24:12,640
would like to proceed with the

00:24:10,559 --> 00:24:14,400
intermediate release d1521 and

00:24:12,640 --> 00:24:17,279
basically enroll this into production

00:24:14,400 --> 00:24:18,880
before the lead 153 is released

00:24:17,279 --> 00:24:20,400
or whether we postpone it to the next

00:24:18,880 --> 00:24:22,480
release so

00:24:20,400 --> 00:24:24,240
that may actually answer exactly what

00:24:22,480 --> 00:24:25,679
you are saying based on that meeting we

00:24:24,240 --> 00:24:27,840
will see where we are

00:24:25,679 --> 00:24:29,679
there is a bunch of conditions that we

00:24:27,840 --> 00:24:30,799
have to align with in order to actually

00:24:29,679 --> 00:24:33,440
proceed

00:24:30,799 --> 00:24:35,279
uh i can share a link if you want to but

00:24:33,440 --> 00:24:37,919
i will i will also make it part of my

00:24:35,279 --> 00:24:37,919
presentation

00:24:38,559 --> 00:24:42,640
you can also see uh the confirmation of

00:24:41,200 --> 00:24:44,400
stakeholders for the decision on the

00:24:42,640 --> 00:24:46,960
opensuse project on factory

00:24:44,400 --> 00:24:46,960

YouTube URL: https://www.youtube.com/watch?v=KVL4vFnYkUE


