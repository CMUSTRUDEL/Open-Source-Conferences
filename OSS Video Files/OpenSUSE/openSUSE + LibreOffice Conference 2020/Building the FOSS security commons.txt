Title: Building the FOSS security commons
Publication date: 2020-11-06
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Why Is There No Free and Open Software Vulnerability Database? 

Something is not right: databases of known FOSS software vulnerabilities are mostly proprietary and privately maintained. Why is there no free and open data solution alternative? After all this is all about FOSS code. Security data is too important to not be free.

"Using Components with Known Vulnerabilities" is one of the OWASP Top 10 Most Critical Web Application Security Risks. Identifying such vulnerable components is currently hindered by data structures and tools that are (1) designed primarily for proprietary software components and (2) incomplete and too dependent on voluntary submissions to the National Vulnerability Database sponsored by the US government.

With the explosion of FOSS usage we need a new approach to efficiently catalog and identify FOSS security vulnerabilities based on open data and FOSS tools.

Find how about the FOSS tools we have built to aggregate, relate together and curate software component vulnerability data from multiple sources and automate the search for FOSS component security vulnerabilities.

Help us build the security commons and improve the security of software applications with open tools and data for everyone. 

Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,880 --> 00:00:06,560
all right so i think it's

00:00:03,520 --> 00:00:10,480
uh it's my slot now so we're it's

00:00:06,560 --> 00:00:14,240
good to go and start right away yes

00:00:10,480 --> 00:00:17,039
all right so um

00:00:14,240 --> 00:00:17,520
i'm going to talk a bit about security

00:00:17,039 --> 00:00:22,480
and

00:00:17,520 --> 00:00:22,480
security vulnerability database

00:00:24,400 --> 00:00:30,080
and let me make sure i

00:00:27,599 --> 00:00:30,720
hide that stuff i hope you can see the

00:00:30,080 --> 00:00:33,040
screen

00:00:30,720 --> 00:00:33,840
at the moment you can is it this chair

00:00:33,040 --> 00:00:37,680
right

00:00:33,840 --> 00:00:40,960
yes good um

00:00:37,680 --> 00:00:44,320
so just one fun fact about me i'm

00:00:40,960 --> 00:00:46,399
my my claim to fame is that

00:00:44,320 --> 00:00:48,320
i i've probably one of the person that

00:00:46,399 --> 00:00:49,760
has deleted the most code in the linux

00:00:48,320 --> 00:00:52,079
kernel

00:00:49,760 --> 00:00:54,160
and i didn't write a line there i'm only

00:00:52,079 --> 00:00:54,800
deleting deleted code and contribute

00:00:54,160 --> 00:00:56,840
deletion

00:00:54,800 --> 00:00:58,640
actually this was not even code it was

00:00:56,840 --> 00:01:01,039
comment

00:00:58,640 --> 00:01:02,320
but tens of thousands of lines of

00:01:01,039 --> 00:01:05,439
comment

00:01:02,320 --> 00:01:06,720
and and the fun fact is that this was to

00:01:05,439 --> 00:01:09,280
to actually inject

00:01:06,720 --> 00:01:10,840
spdx license expression in the kernel

00:01:09,280 --> 00:01:14,560
and replace

00:01:10,840 --> 00:01:19,439
uh boilerplate license notices

00:01:14,560 --> 00:01:22,479
that something will help with all right

00:01:19,439 --> 00:01:26,000
so what we'll be talking today about

00:01:22,479 --> 00:01:28,000
is the problem of security

00:01:26,000 --> 00:01:30,079
vulnerability database and information

00:01:28,000 --> 00:01:33,520
about

00:01:30,079 --> 00:01:36,799
vulnerable packages basically

00:01:33,520 --> 00:01:38,799
and there's something weird today is

00:01:36,799 --> 00:01:41,680
that

00:01:38,799 --> 00:01:43,119
most of the software vulnerabilities

00:01:41,680 --> 00:01:46,479
database

00:01:43,119 --> 00:01:47,200
uh about known free and open source

00:01:46,479 --> 00:01:50,159
software

00:01:47,200 --> 00:01:53,119
packages are actually privately

00:01:50,159 --> 00:01:55,600
maintained and proprietary

00:01:53,119 --> 00:01:56,240
which is surprising right after all or

00:01:55,600 --> 00:01:58,880
or

00:01:56,240 --> 00:02:02,000
the our code is is free why why wouldn't

00:01:58,880 --> 00:02:03,840
data about that could be free too

00:02:02,000 --> 00:02:05,280
and so what we're what we're working on

00:02:03,840 --> 00:02:08,879
is building

00:02:05,280 --> 00:02:10,239
a new set of force tool and database to

00:02:08,879 --> 00:02:12,400
to actually

00:02:10,239 --> 00:02:13,360
help fill that gap and ensure that we

00:02:12,400 --> 00:02:16,560
can have

00:02:13,360 --> 00:02:20,080
a accessible and useful

00:02:16,560 --> 00:02:22,480
and usable set of data

00:02:20,080 --> 00:02:23,360
about which package has the

00:02:22,480 --> 00:02:25,840
vulnerability

00:02:23,360 --> 00:02:27,280
and and how to find out about that

00:02:25,840 --> 00:02:31,120
that's the digital um

00:02:27,280 --> 00:02:31,120
let me get you access

00:02:31,200 --> 00:02:33,440
sure

00:02:35,120 --> 00:02:42,080
okay um so

00:02:38,160 --> 00:02:45,280
why does it matter first having

00:02:42,080 --> 00:02:47,519
component packages libraries that have

00:02:45,280 --> 00:02:48,840
known software vulnerabilities is a

00:02:47,519 --> 00:02:51,760
service yes

00:02:48,840 --> 00:02:54,000
interrupting uh i think uh

00:02:51,760 --> 00:02:55,920
you are sharing the presentation in

00:02:54,000 --> 00:02:59,040
presentation mode but we are still

00:02:55,920 --> 00:03:01,280
uh yeah so

00:02:59,040 --> 00:03:03,040
i was not sharing the right thing okay

00:03:01,280 --> 00:03:05,040
fair enough

00:03:03,040 --> 00:03:09,040
thanks for the thing okay so let me get

00:03:05,040 --> 00:03:10,800
back to sharing the things correctly

00:03:09,040 --> 00:03:13,920
i'm gonna share my whole desktop that's

00:03:10,800 --> 00:03:13,920
gonna be much easier

00:03:14,560 --> 00:03:18,720
all right i was not sharing the entire

00:03:16,640 --> 00:03:21,280
screen and

00:03:18,720 --> 00:03:21,280
that showed

00:03:22,959 --> 00:03:25,360
and

00:03:26,000 --> 00:03:29,599
we should be able to see the whole thing

00:03:27,680 --> 00:03:33,840
now yeah right here we are

00:03:29,599 --> 00:03:37,920
thanks okay so the agenda

00:03:33,840 --> 00:03:39,440
are present the problem and context and

00:03:37,920 --> 00:03:42,799
the the element of solution we're

00:03:39,440 --> 00:03:44,319
working on and

00:03:42,799 --> 00:03:46,560
this is what i was talking about a

00:03:44,319 --> 00:03:50,319
second ago so the the problem

00:03:46,560 --> 00:03:51,440
is that most of the database that

00:03:50,319 --> 00:03:54,480
there's a

00:03:51,440 --> 00:03:55,840
industry of proprietary commercial

00:03:54,480 --> 00:03:57,280
software that'll be software

00:03:55,840 --> 00:03:58,239
vulnerability database for open source

00:03:57,280 --> 00:04:00,080
software

00:03:58,239 --> 00:04:01,760
which also covers proprietary software

00:04:00,080 --> 00:04:04,640
but it's it's really weird that

00:04:01,760 --> 00:04:05,360
it's not done with open data and open

00:04:04,640 --> 00:04:07,519
code

00:04:05,360 --> 00:04:09,120
and that's the thing we're trying to

00:04:07,519 --> 00:04:11,519
solve here

00:04:09,120 --> 00:04:12,959
um especially one thing that i feel is

00:04:11,519 --> 00:04:16,160
really important

00:04:12,959 --> 00:04:17,120
is if you think of it security data is a

00:04:16,160 --> 00:04:20,400
bit like uh

00:04:17,120 --> 00:04:21,440
like oxygen you don't want to put a tax

00:04:20,400 --> 00:04:24,400
on oxygen

00:04:21,440 --> 00:04:24,800
uh you want it to be free for everyone

00:04:24,400 --> 00:04:26,960
and

00:04:24,800 --> 00:04:28,880
that's probably more important than

00:04:26,960 --> 00:04:31,199
anything else

00:04:28,880 --> 00:04:32,800
i could go as far as saying that even if

00:04:31,199 --> 00:04:36,160
the software

00:04:32,800 --> 00:04:38,639
wasn't free as in free software

00:04:36,160 --> 00:04:39,360
you'd want steal the data about software

00:04:38,639 --> 00:04:42,960
security

00:04:39,360 --> 00:04:47,440
and vulnerabilities being free itself

00:04:42,960 --> 00:04:49,520
so why does it matter of course um

00:04:47,440 --> 00:04:51,199
using vulnerable software is problematic

00:04:49,520 --> 00:04:55,199
there's there's a new vulnerability

00:04:51,199 --> 00:04:57,360
that popped up today on on lwn

00:04:55,199 --> 00:04:58,880
and and there was a discussion around

00:04:57,360 --> 00:05:02,240
the kernel which is

00:04:58,880 --> 00:05:05,520
a evolve between the bluetooth dac

00:05:02,240 --> 00:05:08,639
which on linux which is

00:05:05,520 --> 00:05:11,120
super easily exploitable so if you're

00:05:08,639 --> 00:05:13,440
using bluetooth on your laptop today

00:05:11,120 --> 00:05:15,039
uh you want to make sure you either use

00:05:13,440 --> 00:05:16,240
the bleeding edge kernel or get the

00:05:15,039 --> 00:05:18,000
patches which

00:05:16,240 --> 00:05:19,759
may not have landed in all distros

00:05:18,000 --> 00:05:22,800
probably not in dublin tuesday yet

00:05:19,759 --> 00:05:24,479
or turn off bluetooth so that's the kind

00:05:22,800 --> 00:05:26,639
of things you you

00:05:24,479 --> 00:05:27,759
you you want to care about it's

00:05:26,639 --> 00:05:30,560
considered

00:05:27,759 --> 00:05:32,320
as one of the test 10 most critical uh

00:05:30,560 --> 00:05:35,280
issue

00:05:32,320 --> 00:05:38,320
by o wasp and it's one of the top

00:05:35,280 --> 00:05:42,160
actually um

00:05:38,320 --> 00:05:44,720
and the the difficulty is that uh

00:05:42,160 --> 00:05:46,720
we we have as i said independent uh

00:05:44,720 --> 00:05:48,560
proprietary database on on the one end

00:05:46,720 --> 00:05:49,919
but not only these databases our friend

00:05:48,560 --> 00:05:53,840
proprietary the

00:05:49,919 --> 00:05:56,800
underpinning data are often

00:05:53,840 --> 00:05:57,280
and the design of this data was often

00:05:56,800 --> 00:05:59,440
done

00:05:57,280 --> 00:06:01,520
for proprietary software in mind so

00:05:59,440 --> 00:06:04,639
there's concept like

00:06:01,520 --> 00:06:06,639
vendors which is great when you're

00:06:04,639 --> 00:06:09,199
actually selling software

00:06:06,639 --> 00:06:10,160
it doesn't work very well for a library

00:06:09,199 --> 00:06:13,520
for instance

00:06:10,160 --> 00:06:15,120
wu is the vendor of xelipe or the vendor

00:06:13,520 --> 00:06:16,720
of open ssl

00:06:15,120 --> 00:06:18,560
it really depends there's no such thing

00:06:16,720 --> 00:06:21,520
as like one vendor

00:06:18,560 --> 00:06:24,240
and i'm not sure it's for sale anyway

00:06:21,520 --> 00:06:26,800
the other problem is that

00:06:24,240 --> 00:06:27,520
too often the information is uh

00:06:26,800 --> 00:06:29,680
scattered

00:06:27,520 --> 00:06:32,560
and and there's no comprehensive place

00:06:29,680 --> 00:06:32,560
where you can get it all

00:06:32,960 --> 00:06:38,400
and the main thing that resembles

00:06:36,319 --> 00:06:39,520
some kind of a shared database something

00:06:38,400 --> 00:06:42,639
called the national value

00:06:39,520 --> 00:06:43,120
database in the us which is maintained

00:06:42,639 --> 00:06:47,360
by the

00:06:43,120 --> 00:06:50,160
the department of commerce and

00:06:47,360 --> 00:06:50,800
has contracted the company called mitre

00:06:50,160 --> 00:06:53,440
um

00:06:50,800 --> 00:06:54,080
to to actually maintain that data but

00:06:53,440 --> 00:06:57,120
that

00:06:54,080 --> 00:06:59,919
is essentially dependent on national on

00:06:57,120 --> 00:07:00,800
voluntary submissions and that makes it

00:06:59,919 --> 00:07:04,479
difficult because

00:07:00,800 --> 00:07:06,240
you know very often there's not

00:07:04,479 --> 00:07:07,680
either lack of knowledge about the

00:07:06,240 --> 00:07:09,199
existence and the need to do these

00:07:07,680 --> 00:07:12,400
submissions

00:07:09,199 --> 00:07:14,000
and on the other hand also

00:07:12,400 --> 00:07:16,000
if it's a voluntary submission that's

00:07:14,000 --> 00:07:19,120
difficult because you rely

00:07:16,000 --> 00:07:19,120
on the good will of people

00:07:19,919 --> 00:07:25,520
and and so we all know that

00:07:23,599 --> 00:07:27,280
usage of 300 pencil software has been

00:07:25,520 --> 00:07:30,560
exploding and really

00:07:27,280 --> 00:07:33,280
what we need is something which is a new

00:07:30,560 --> 00:07:35,759
and efficient approach to identify

00:07:33,280 --> 00:07:38,800
software security vulnerabilities

00:07:35,759 --> 00:07:40,319
so ideally if you have a kernel before

00:07:38,800 --> 00:07:42,639
version five nine

00:07:40,319 --> 00:07:43,520
you'd want to know that there is a

00:07:42,639 --> 00:07:45,759
vulnerability

00:07:43,520 --> 00:07:47,199
in the kernel in the bluetooth stack

00:07:45,759 --> 00:07:51,280
that you can fix

00:07:47,199 --> 00:07:52,960
by upgrading with uh to kernel

00:07:51,280 --> 00:07:54,639
whatever version really right now i

00:07:52,960 --> 00:07:55,440
don't know because it sits actually in

00:07:54,639 --> 00:07:58,080
the tree and it's

00:07:55,440 --> 00:07:59,199
not been merged yet but that's the kind

00:07:58,080 --> 00:07:59,680
of thing you'd like to know and you'll

00:07:59,199 --> 00:08:02,319
be able

00:07:59,680 --> 00:08:04,639
you want to know quickly and efficiently

00:08:02,319 --> 00:08:07,680
and not only for the kernel but for

00:08:04,639 --> 00:08:10,160
the thousands of package that run on any

00:08:07,680 --> 00:08:12,240
server or desktop we run today and

00:08:10,160 --> 00:08:14,240
there's a lot of them

00:08:12,240 --> 00:08:15,280
so i talked briefly about the nvd

00:08:14,240 --> 00:08:16,960
national events

00:08:15,280 --> 00:08:19,440
base for those that don't know about

00:08:16,960 --> 00:08:22,800
that it it really predates

00:08:19,440 --> 00:08:24,400
uh the existence of free software uh by

00:08:22,800 --> 00:08:26,000
quite a bit of margin or maybe not

00:08:24,400 --> 00:08:28,479
exactly but it didn't care

00:08:26,000 --> 00:08:29,120
too much about that it's been mostly

00:08:28,479 --> 00:08:31,280
centered

00:08:29,120 --> 00:08:32,880
originally in terms of its design on

00:08:31,280 --> 00:08:35,519
dealing with

00:08:32,880 --> 00:08:37,760
vulnerabilities in windows for instance

00:08:35,519 --> 00:08:40,320
or acrobats reader

00:08:37,760 --> 00:08:41,760
and and this kind of thing so very much

00:08:40,320 --> 00:08:44,959
centered around

00:08:41,760 --> 00:08:48,640
the the ways and means of

00:08:44,959 --> 00:08:48,640
uh proprietary software

00:08:48,800 --> 00:08:52,839
and it's also able to to handle things

00:08:51,200 --> 00:08:55,920
like hardware

00:08:52,839 --> 00:08:58,880
uh which is interesting

00:08:55,920 --> 00:08:59,440
i'm sure for for many but it's very far

00:08:58,880 --> 00:09:02,560
from

00:08:59,440 --> 00:09:05,920
using a node package or a

00:09:02,560 --> 00:09:10,560
ruby gem or python wheel in

00:09:05,920 --> 00:09:10,560
a modern software application um

00:09:10,720 --> 00:09:15,600
and it's it's they use a way to identify

00:09:13,519 --> 00:09:19,600
software component which is called cp

00:09:15,600 --> 00:09:20,880
for command platform enumeration

00:09:19,600 --> 00:09:23,200
which really makes it difficult to

00:09:20,880 --> 00:09:25,760
relate to software component and library

00:09:23,200 --> 00:09:27,279
and it's well-known problem so much so

00:09:25,760 --> 00:09:31,279
that

00:09:27,279 --> 00:09:32,959
there there's there's work going on and

00:09:31,279 --> 00:09:36,959
the ntia to actually find

00:09:32,959 --> 00:09:39,920
replacement for for the cp because it's

00:09:36,959 --> 00:09:41,040
it has quite a bit of impedance mismatch

00:09:39,920 --> 00:09:43,360
with the way we

00:09:41,040 --> 00:09:44,720
deal with software again the notion of

00:09:43,360 --> 00:09:46,880
vendor is one

00:09:44,720 --> 00:09:48,160
um there's a certain number of

00:09:46,880 --> 00:09:51,440
assumptions which are

00:09:48,160 --> 00:09:53,839
made about also the way

00:09:51,440 --> 00:09:55,760
versions are dealt with and we all know

00:09:53,839 --> 00:09:58,720
versions is difficult

00:09:55,760 --> 00:10:00,080
when you deal with distro being able to

00:09:58,720 --> 00:10:02,160
handle consistently

00:10:00,080 --> 00:10:03,839
version numbers across all the different

00:10:02,160 --> 00:10:04,640
packages which all have a different

00:10:03,839 --> 00:10:08,399
version scheme

00:10:04,640 --> 00:10:11,600
is a difficult thing and as i said it's

00:10:08,399 --> 00:10:14,880
only a subset of non-vulnerabilities

00:10:11,600 --> 00:10:17,600
and it's very possible that

00:10:14,880 --> 00:10:18,399
you have your own open source project

00:10:17,600 --> 00:10:20,160
and

00:10:18,399 --> 00:10:21,600
you have a vulnerability issue you're

00:10:20,160 --> 00:10:22,560
going to have a ticket in the back

00:10:21,600 --> 00:10:25,680
tracker

00:10:22,560 --> 00:10:27,360
you're going to solve it maybe you'll

00:10:25,680 --> 00:10:30,880
put a note in the change log

00:10:27,360 --> 00:10:34,399
if it's major or not and really

00:10:30,880 --> 00:10:36,079
this information that there was a bug

00:10:34,399 --> 00:10:37,519
that has a secret impact on the point of

00:10:36,079 --> 00:10:40,399
time and it's been fixed

00:10:37,519 --> 00:10:41,440
is buried somewhere in your back tracker

00:10:40,399 --> 00:10:45,600
and nowhere else

00:10:41,440 --> 00:10:47,519
available and there's also

00:10:45,600 --> 00:10:49,440
a lot of fragmented data source i mean

00:10:47,519 --> 00:10:53,600
there's there's data from

00:10:49,440 --> 00:10:56,959
uh for suse and upon suse there's from

00:10:53,600 --> 00:11:00,000
red hat and fedora and debian and ubuntu

00:10:56,959 --> 00:11:02,560
and jungle has its own security

00:11:00,000 --> 00:11:04,000
tracker and there's a another thing for

00:11:02,560 --> 00:11:05,600
up in ssl

00:11:04,000 --> 00:11:07,200
and and so on and so on and there's

00:11:05,600 --> 00:11:10,720
really a lot

00:11:07,200 --> 00:11:13,839
of fragmentation there as a result

00:11:10,720 --> 00:11:15,200
there's been the emergence of a data

00:11:13,839 --> 00:11:17,440
aggregation

00:11:15,200 --> 00:11:18,320
industry which has been essentially

00:11:17,440 --> 00:11:21,279
commercial which

00:11:18,320 --> 00:11:23,360
are trying to collect all these data and

00:11:21,279 --> 00:11:26,640
and resell it

00:11:23,360 --> 00:11:29,839
commercially so

00:11:26,640 --> 00:11:31,519
our solution is simple is to intimately

00:11:29,839 --> 00:11:32,959
independently aggregate many software

00:11:31,519 --> 00:11:36,079
vulnerabilities that are sourced

00:11:32,959 --> 00:11:39,600
in one single database such

00:11:36,079 --> 00:11:42,720
it can be really easily recreated and

00:11:39,600 --> 00:11:46,959
centralized and correlated together

00:11:42,720 --> 00:11:49,120
and to have a a new and practical

00:11:46,959 --> 00:11:50,720
uniform software package identification

00:11:49,120 --> 00:11:54,399
which is based on something called

00:11:50,720 --> 00:11:55,360
package url you can check it on on

00:11:54,399 --> 00:11:57,519
github it's a

00:11:55,360 --> 00:11:59,519
shared specs the project that we started

00:11:57,519 --> 00:12:02,639
but happens to be also used by

00:11:59,519 --> 00:12:05,600
owasp projects now uh

00:12:02,639 --> 00:12:06,240
folks at red hat have been using it

00:12:05,600 --> 00:12:09,279
folks at

00:12:06,240 --> 00:12:10,720
snaptype on maven there's a project the

00:12:09,279 --> 00:12:11,279
linux foundation that's considering

00:12:10,720 --> 00:12:13,120
using it

00:12:11,279 --> 00:12:15,680
and so on so it's it's a very simple

00:12:13,120 --> 00:12:16,720
scheme to identify package based on its

00:12:15,680 --> 00:12:18,240
name and version

00:12:16,720 --> 00:12:20,880
and there's not much more to it than

00:12:18,240 --> 00:12:24,720
that and a type so for instance

00:12:20,880 --> 00:12:28,480
a package from suse

00:12:24,720 --> 00:12:30,800
would be identified as type rpm

00:12:28,480 --> 00:12:32,639
and being from susie as a distribution

00:12:30,800 --> 00:12:35,040
and then would have a name

00:12:32,639 --> 00:12:36,079
and a version so nothing worked at

00:12:35,040 --> 00:12:38,240
science but it's

00:12:36,079 --> 00:12:40,160
it's it's it's clicking with a lot of

00:12:38,240 --> 00:12:42,320
people because it's just fills a void

00:12:40,160 --> 00:12:44,240
and and there was nothing really to deal

00:12:42,320 --> 00:12:46,399
with a way to

00:12:44,240 --> 00:12:47,600
identify this package in the uniform way

00:12:46,399 --> 00:12:48,800
and that's really important because

00:12:47,600 --> 00:12:51,760
again

00:12:48,800 --> 00:12:52,000
you want to know which package you have

00:12:51,760 --> 00:12:56,399
and

00:12:52,000 --> 00:13:01,040
which one is subject to a security issue

00:12:56,399 --> 00:13:04,959
then on top of that we're providing a

00:13:01,040 --> 00:13:07,040
search to be able to find if

00:13:04,959 --> 00:13:09,440
we have non-packaged that have

00:13:07,040 --> 00:13:11,600
vulnerabilities and later on we will be

00:13:09,440 --> 00:13:13,360
looking at crowdsourcing and doing peer

00:13:11,600 --> 00:13:15,040
review and classification

00:13:13,360 --> 00:13:17,040
which is another problem this industry

00:13:15,040 --> 00:13:18,959
also because it's been

00:13:17,040 --> 00:13:20,320
essentially driven by commercial

00:13:18,959 --> 00:13:21,839
interest there's there's a strong

00:13:20,320 --> 00:13:24,880
interest to have

00:13:21,839 --> 00:13:28,320
more vulnerabilities bigger is better

00:13:24,880 --> 00:13:28,880
in practice bigger is not better i don't

00:13:28,320 --> 00:13:32,160
care

00:13:28,880 --> 00:13:35,279
about a secretive vulnerability that's

00:13:32,160 --> 00:13:38,399
not exploitable ever or

00:13:35,279 --> 00:13:39,199
i would care about it uh maybe in some

00:13:38,399 --> 00:13:41,199
cases but

00:13:39,199 --> 00:13:43,279
i'd like to know what's the severity of

00:13:41,199 --> 00:13:45,040
it in practical terms and it's

00:13:43,279 --> 00:13:48,560
today that's that's something that's

00:13:45,040 --> 00:13:48,560
been essentially delegated to

00:13:48,959 --> 00:13:57,199
mitre paid work by by the

00:13:53,600 --> 00:13:58,800
national the u.s commerce department on

00:13:57,199 --> 00:14:01,360
the national warranty database

00:13:58,800 --> 00:14:02,880
and it's been a pipeline that's been

00:14:01,360 --> 00:14:05,760
severely clubbed

00:14:02,880 --> 00:14:07,040
um and it's also highly subjective so i

00:14:05,760 --> 00:14:08,320
think it would be much better to have

00:14:07,040 --> 00:14:10,560
actually developers

00:14:08,320 --> 00:14:12,000
and the authors and users of the

00:14:10,560 --> 00:14:13,760
software and software libraries and

00:14:12,000 --> 00:14:15,440
package being able to do

00:14:13,760 --> 00:14:17,040
this classification and share this

00:14:15,440 --> 00:14:19,040
information because

00:14:17,040 --> 00:14:20,160
that's in everyone's best interest to

00:14:19,040 --> 00:14:22,560
know that

00:14:20,160 --> 00:14:24,480
as an example there's a well-known

00:14:22,560 --> 00:14:26,000
vulnerability for jungle

00:14:24,480 --> 00:14:30,399
which is rated as the highest

00:14:26,000 --> 00:14:33,279
vulnerability severity and criticality

00:14:30,399 --> 00:14:33,760
except it only happens if you run drongo

00:14:33,279 --> 00:14:37,120
in

00:14:33,760 --> 00:14:38,959
debug mode there's you need to have

00:14:37,120 --> 00:14:40,959
your debug mode enabled which is

00:14:38,959 --> 00:14:45,199
unlikely in production unless

00:14:40,959 --> 00:14:46,959
you're you're really careless

00:14:45,199 --> 00:14:48,880
all the all the other case doesn't

00:14:46,959 --> 00:14:49,440
happen but it would show up if you just

00:14:48,880 --> 00:14:51,199
detect

00:14:49,440 --> 00:14:53,199
jungle as being installed what what you

00:14:51,199 --> 00:14:55,120
want to do eventually later on is

00:14:53,199 --> 00:14:57,040
also figure out that okay you have

00:14:55,120 --> 00:15:00,399
jungle installed

00:14:57,040 --> 00:15:02,399
and it has this setting enabled which

00:15:00,399 --> 00:15:03,600
means that you have debug enabled in

00:15:02,399 --> 00:15:06,000
which case the

00:15:03,600 --> 00:15:07,760
security validity applies otherwise it

00:15:06,000 --> 00:15:10,800
shouldn't be even mentioned

00:15:07,760 --> 00:15:10,800
that there's such thing

00:15:11,199 --> 00:15:17,279
so um

00:15:14,880 --> 00:15:18,720
the way we we're going at it is uh

00:15:17,279 --> 00:15:19,680
building of course free and open source

00:15:18,720 --> 00:15:23,360
software

00:15:19,680 --> 00:15:27,040
and what we we care for

00:15:23,360 --> 00:15:29,279
is uh to work based on data that

00:15:27,040 --> 00:15:32,720
is the data that identify packages

00:15:29,279 --> 00:15:36,320
either found in package manifest

00:15:32,720 --> 00:15:40,240
such as a package.json

00:15:36,320 --> 00:15:41,920
or the fact it's an avenger or usually

00:15:40,240 --> 00:15:44,880
you wouldn't see that typically but it

00:15:41,920 --> 00:15:47,120
could be an rpm header in a binary rpm

00:15:44,880 --> 00:15:49,199
but more typically install package

00:15:47,120 --> 00:15:52,399
database whether it's

00:15:49,199 --> 00:15:53,040
in containers virtual machine or other

00:15:52,399 --> 00:15:56,639
type of

00:15:53,040 --> 00:15:59,920
root file system and

00:15:56,639 --> 00:16:01,920
being able to leverage to and detect

00:15:59,920 --> 00:16:03,600
uh leverage any of the tools that can

00:16:01,920 --> 00:16:05,680
detect and report these package errors

00:16:03,600 --> 00:16:07,519
i've talked about

00:16:05,680 --> 00:16:08,880
one of my tools called scan code does

00:16:07,519 --> 00:16:11,040
that but that's not the only one

00:16:08,880 --> 00:16:13,440
nowadays

00:16:11,040 --> 00:16:14,639
and next what we're working on is to to

00:16:13,440 --> 00:16:17,920
be able to

00:16:14,639 --> 00:16:20,320
correlate uh vulnerabilities between

00:16:17,920 --> 00:16:21,519
different software package by mining the

00:16:20,320 --> 00:16:25,199
graph we have there

00:16:21,519 --> 00:16:27,199
very practically if i know that open ssl

00:16:25,199 --> 00:16:29,360
upstream has a vulnerability and it's

00:16:27,199 --> 00:16:31,680
also available

00:16:29,360 --> 00:16:33,360
in opensuse so it's pretty

00:16:31,680 --> 00:16:36,880
straightforward very simple

00:16:33,360 --> 00:16:40,320
but it may also be bundled in

00:16:36,880 --> 00:16:42,000
a node package in javascript that

00:16:40,320 --> 00:16:44,720
contains

00:16:42,000 --> 00:16:46,639
openssl bundled and vendored and

00:16:44,720 --> 00:16:48,320
statically laying there

00:16:46,639 --> 00:16:50,480
and that's the kind of thing you want to

00:16:48,320 --> 00:16:52,480
know and being able to say okay if i

00:16:50,480 --> 00:16:54,880
have this vulnerability up in ssl then

00:16:52,480 --> 00:16:55,519
it also may impact javascript package

00:16:54,880 --> 00:16:57,120
which

00:16:55,519 --> 00:16:58,959
there's nothing obvious about that at

00:16:57,120 --> 00:17:01,519
first

00:16:58,959 --> 00:17:02,079
it's probably much easier to to deal

00:17:01,519 --> 00:17:04,959
with it

00:17:02,079 --> 00:17:06,400
in the context of distro package because

00:17:04,959 --> 00:17:07,760
we know what's upstream and there were

00:17:06,400 --> 00:17:09,679
some presentation earlier on on the

00:17:07,760 --> 00:17:11,919
topic

00:17:09,679 --> 00:17:13,199
but in the case of application package

00:17:11,919 --> 00:17:16,640
packages things are

00:17:13,199 --> 00:17:18,559
much more murky so package urls

00:17:16,640 --> 00:17:20,720
i've talked a bit about it quite a bit

00:17:18,559 --> 00:17:23,919
actually um

00:17:20,720 --> 00:17:25,039
this is what it looks like it has a pkg

00:17:23,919 --> 00:17:28,640
prefix

00:17:25,039 --> 00:17:31,200
a column a type a slash

00:17:28,640 --> 00:17:32,559
and then possibly namespace or no

00:17:31,200 --> 00:17:35,200
namespace and just a name

00:17:32,559 --> 00:17:36,720
and that sign and a version and there's

00:17:35,200 --> 00:17:37,360
more subtilities that that but that's

00:17:36,720 --> 00:17:39,919
registered

00:17:37,360 --> 00:17:41,360
it's it's obvious it's simple it's clear

00:17:39,919 --> 00:17:44,640
it's

00:17:41,360 --> 00:17:47,520
self-evident what it means uh and and

00:17:44,640 --> 00:17:48,240
it's pretty useful and powerful to

00:17:47,520 --> 00:17:52,000
identify

00:17:48,240 --> 00:17:52,000
packages on a large scale

00:17:53,120 --> 00:17:56,799
so what we do in terms of being able to

00:17:55,679 --> 00:17:59,360
collect data we

00:17:56,799 --> 00:18:00,480
aggregate and collect and parse data

00:17:59,360 --> 00:18:03,120
from any source

00:18:00,480 --> 00:18:05,039
so we have a common data model to

00:18:03,120 --> 00:18:08,320
minimally identify packages

00:18:05,039 --> 00:18:10,720
and minimally identify vulnerabilities

00:18:08,320 --> 00:18:13,919
and we essentially building correlation

00:18:10,720 --> 00:18:14,480
and cross-references to to build a graph

00:18:13,919 --> 00:18:16,640
and

00:18:14,480 --> 00:18:18,240
the data we're going after are first and

00:18:16,640 --> 00:18:20,640
foremost the national

00:18:18,240 --> 00:18:22,240
database at the bottom but also we're

00:18:20,640 --> 00:18:24,640
looking at bug trackers

00:18:22,240 --> 00:18:26,000
eventually change logs project specific

00:18:24,640 --> 00:18:28,400
trackers you know

00:18:26,000 --> 00:18:30,240
openssl publishes an xml file that

00:18:28,400 --> 00:18:31,919
contains its non-vulnerabilities

00:18:30,240 --> 00:18:33,679
there's also application package

00:18:31,919 --> 00:18:35,360
trackers

00:18:33,679 --> 00:18:37,600
which provide security information and

00:18:35,360 --> 00:18:40,320
later on we'll go also after their

00:18:37,600 --> 00:18:42,559
issue trackers and change logs if we

00:18:40,320 --> 00:18:45,600
don't have a full

00:18:42,559 --> 00:18:49,200
information available directly in the

00:18:45,600 --> 00:18:51,039
uh in these trackers and of course the

00:18:49,200 --> 00:18:52,000
the distro trackers and suzy being one

00:18:51,039 --> 00:18:54,720
on one

00:18:52,000 --> 00:18:56,400
one of them which in some cases use a

00:18:54,720 --> 00:18:59,200
command format welcome to that

00:18:56,400 --> 00:19:01,360
there is a something called tvrf command

00:18:59,200 --> 00:19:04,480
vulnerability reporting format

00:19:01,360 --> 00:19:06,080
and oval which is uh open volunteer

00:19:04,480 --> 00:19:10,640
assessment language

00:19:06,080 --> 00:19:12,320
both derive more or less from the

00:19:10,640 --> 00:19:14,720
the realm of the national advantage

00:19:12,320 --> 00:19:17,520
database which are xml-based formats

00:19:14,720 --> 00:19:19,120
which provides some level of

00:19:17,520 --> 00:19:21,280
standardization but they're not

00:19:19,120 --> 00:19:24,480
like universally adopted they're adopted

00:19:21,280 --> 00:19:29,039
by major distro like susie redhat

00:19:24,480 --> 00:19:32,240
and some so that's a lot of data

00:19:29,039 --> 00:19:34,720
the data model is decisively simple

00:19:32,240 --> 00:19:36,320
we have a vulnerability where we keep

00:19:34,720 --> 00:19:39,200
really minimal information

00:19:36,320 --> 00:19:41,360
and many references to many places where

00:19:39,200 --> 00:19:43,600
this vulnerability may exist

00:19:41,360 --> 00:19:45,120
and where we have details information

00:19:43,600 --> 00:19:47,360
about

00:19:45,120 --> 00:19:47,360
its

00:19:49,280 --> 00:19:56,320
it's well whatever it's history how it

00:19:52,960 --> 00:19:58,720
was detected we detected it and so on

00:19:56,320 --> 00:20:00,080
and what we really care for is the fact

00:19:58,720 --> 00:20:02,159
that there's a package

00:20:00,080 --> 00:20:05,360
identified by a package url eventually a

00:20:02,159 --> 00:20:08,480
range or a series of package

00:20:05,360 --> 00:20:12,320
that is related to a vulnerability and

00:20:08,480 --> 00:20:15,679
we know which vulnerability a package

00:20:12,320 --> 00:20:20,080
is vulnerable to and when a package

00:20:15,679 --> 00:20:21,679
is fixed and no longer vulnerable

00:20:20,080 --> 00:20:23,919
and so the project's called vulnerable

00:20:21,679 --> 00:20:23,919
code

00:20:26,159 --> 00:20:34,320
it's it's there's a gear channel

00:20:30,320 --> 00:20:36,240
and also it's also accessible via irc

00:20:34,320 --> 00:20:38,159
it was started with an initial grant of

00:20:36,240 --> 00:20:40,320
the european union actually

00:20:38,159 --> 00:20:41,840
it started by as a google summer of code

00:20:40,320 --> 00:20:43,520
project

00:20:41,840 --> 00:20:45,520
then we received a bit of a grant from

00:20:43,520 --> 00:20:48,080
the european union well enough we're a

00:20:45,520 --> 00:20:49,919
u.s based company but

00:20:48,080 --> 00:20:51,440
they really like what we what we had to

00:20:49,919 --> 00:20:54,480
do there as

00:20:51,440 --> 00:20:57,200
a an open and free both

00:20:54,480 --> 00:21:00,480
software and data solution and sponsored

00:20:57,200 --> 00:21:00,480
by amazon company 2.

00:21:00,720 --> 00:21:04,000
and what we're doing there is very

00:21:03,120 --> 00:21:07,679
simply we

00:21:04,000 --> 00:21:10,000
were able to answer questions saying is

00:21:07,679 --> 00:21:11,280
through version one is it known to raw

00:21:10,000 --> 00:21:12,159
to be vulnerable what's the

00:21:11,280 --> 00:21:14,640
vulnerability

00:21:12,159 --> 00:21:17,360
what's the severity and if there's a

00:21:14,640 --> 00:21:20,159
validity that's known there

00:21:17,360 --> 00:21:21,679
which version has a fix because very

00:21:20,159 --> 00:21:25,120
practically in the

00:21:21,679 --> 00:21:27,760
vast majority of the case uh

00:21:25,120 --> 00:21:28,960
upgrading is is most of the time to cure

00:21:27,760 --> 00:21:32,000
i mean you could back port

00:21:28,960 --> 00:21:35,280
fixes and patches and and that's

00:21:32,000 --> 00:21:38,080
what software distribution

00:21:35,280 --> 00:21:38,960
distributors uh packaged so distro

00:21:38,080 --> 00:21:40,880
maintenance

00:21:38,960 --> 00:21:42,720
and package maintenance do which is to

00:21:40,880 --> 00:21:45,600
backport fix

00:21:42,720 --> 00:21:47,120
quite often very often it's it's really

00:21:45,600 --> 00:21:49,039
upgrading to the letters and greatest

00:21:47,120 --> 00:21:50,799
is the solution it's not always possible

00:21:49,039 --> 00:21:53,600
but that's the solution

00:21:50,799 --> 00:21:54,559
in the future uh we also want to

00:21:53,600 --> 00:21:56,720
introduce

00:21:54,559 --> 00:21:59,120
and know very precisely what is the

00:21:56,720 --> 00:22:02,159
commit that introduced the bug

00:21:59,120 --> 00:22:04,000
on the one end and which one is the fix

00:22:02,159 --> 00:22:06,000
and that has a lot of potential

00:22:04,000 --> 00:22:08,080
applications such as

00:22:06,000 --> 00:22:09,679
uh there's a project we started

00:22:08,080 --> 00:22:11,039
collaborating with that eclipse called

00:22:09,679 --> 00:22:14,320
eclipse study

00:22:11,039 --> 00:22:15,760
such as being able to find in binaries

00:22:14,320 --> 00:22:19,120
and and doing code

00:22:15,760 --> 00:22:22,720
execution analysis also if a certain

00:22:19,120 --> 00:22:24,880
vulnerable code pass is being

00:22:22,720 --> 00:22:26,080
traversed or not at execution which is

00:22:24,880 --> 00:22:27,760
really important i mean if

00:22:26,080 --> 00:22:29,679
if you can know that you're never using

00:22:27,760 --> 00:22:31,919
a piece of code that is vulnerable

00:22:29,679 --> 00:22:33,919
then there's really no vulnerability and

00:22:31,919 --> 00:22:37,440
the other thing is uh

00:22:33,919 --> 00:22:39,120
looking at yara rules yara is a

00:22:37,440 --> 00:22:40,960
pattern matcher essentially a

00:22:39,120 --> 00:22:44,640
programmable

00:22:40,960 --> 00:22:48,400
virus detector detection engine

00:22:44,640 --> 00:22:51,600
and you could think of a vulnerability

00:22:48,400 --> 00:22:54,159
at the binary level when it's compiled

00:22:51,600 --> 00:22:55,679
literally as a virus conceptually it's

00:22:54,159 --> 00:22:56,880
it's the same kind of thing it's a

00:22:55,679 --> 00:22:58,559
problem in your code

00:22:56,880 --> 00:23:00,320
and being able to identify it with this

00:22:58,559 --> 00:23:03,360
kind of tool would be

00:23:00,320 --> 00:23:03,360
a really useful

00:23:03,440 --> 00:23:07,919
we're not yet there but in the future we

00:23:05,760 --> 00:23:08,640
will expose the public data creation

00:23:07,919 --> 00:23:11,120
queue

00:23:08,640 --> 00:23:13,600
for community to review and being able

00:23:11,120 --> 00:23:16,320
to validate that there's vulnerability

00:23:13,600 --> 00:23:17,520
which package it applies to being able

00:23:16,320 --> 00:23:20,320
to

00:23:17,520 --> 00:23:21,919
review the severity and the scoring and

00:23:20,320 --> 00:23:22,799
what are the actual commits are all

00:23:21,919 --> 00:23:25,679
things that

00:23:22,799 --> 00:23:27,520
have to be done by actual real humans

00:23:25,679 --> 00:23:30,480
and persons

00:23:27,520 --> 00:23:32,480
so some of the challenge we have there

00:23:30,480 --> 00:23:36,240
there's many data sources and

00:23:32,480 --> 00:23:39,520
there are many case where this data is

00:23:36,240 --> 00:23:42,880
redundant and structured messy and

00:23:39,520 --> 00:23:43,120
frankly we thought you know with a lot

00:23:42,880 --> 00:23:46,720
of

00:23:43,120 --> 00:23:48,480
viewers that were being exploited by

00:23:46,720 --> 00:23:50,000
commercial vendors in the space but we

00:23:48,480 --> 00:23:50,559
really appreciate more the complexity of

00:23:50,000 --> 00:23:53,120
the task

00:23:50,559 --> 00:23:54,960
and why there's been commercial vendors

00:23:53,120 --> 00:23:58,559
there it's a lot of work it's complex

00:23:54,960 --> 00:24:00,559
it's everything but easy

00:23:58,559 --> 00:24:02,880
and there's the other thing also is that

00:24:00,559 --> 00:24:07,279
as i said there's a lot of

00:24:02,880 --> 00:24:10,000
tenancy to go with bigger and better

00:24:07,279 --> 00:24:11,039
i'm sorry bigger database and it's not

00:24:10,000 --> 00:24:14,080
always better

00:24:11,039 --> 00:24:15,279
for instance keeping all vulnerabilities

00:24:14,080 --> 00:24:18,240
on windows 95

00:24:15,279 --> 00:24:19,600
is is really useless i mean nobody cares

00:24:18,240 --> 00:24:21,919
for that

00:24:19,600 --> 00:24:23,039
so you can claim that if you have 5 000

00:24:21,919 --> 00:24:24,799
vulnerabilities on

00:24:23,039 --> 00:24:27,120
on windows 95 that you have a bigger

00:24:24,799 --> 00:24:28,559
database of non-vulnerabilities but it's

00:24:27,120 --> 00:24:30,799
not really useful

00:24:28,559 --> 00:24:33,039
and and same thing we don't care about

00:24:30,799 --> 00:24:35,039
hardware we don't care about commercial

00:24:33,039 --> 00:24:36,799
only software we would care about things

00:24:35,039 --> 00:24:40,159
which would be a kind of alpha enough

00:24:36,799 --> 00:24:44,080
like mysql would be a good example

00:24:40,159 --> 00:24:45,760
we may care about software development

00:24:44,080 --> 00:24:47,279
kits and compilers

00:24:45,760 --> 00:24:49,760
even if they're proprietary because they

00:24:47,279 --> 00:24:51,919
may be used also to develop

00:24:49,760 --> 00:24:53,279
free and open source code but hardware

00:24:51,919 --> 00:24:56,960
efficiently out of the

00:24:53,279 --> 00:25:00,240
out of the scope another challenge

00:24:56,960 --> 00:25:02,000
license of data source we want the data

00:25:00,240 --> 00:25:05,360
to be

00:25:02,000 --> 00:25:07,760
under cc0 that means a public domain

00:25:05,360 --> 00:25:08,400
license so it's available for free to

00:25:07,760 --> 00:25:11,760
everyone

00:25:08,400 --> 00:25:13,600
at least as an aggregate but many data

00:25:11,760 --> 00:25:15,760
sources lack an explicit license

00:25:13,600 --> 00:25:17,440
and some of them for instance are really

00:25:15,760 --> 00:25:20,799
problematic like susie

00:25:17,440 --> 00:25:23,679
which provides the data

00:25:20,799 --> 00:25:24,000
in xml format for cvrf which happens to

00:25:23,679 --> 00:25:27,760
be

00:25:24,000 --> 00:25:29,200
under a cc by non-commercial license

00:25:27,760 --> 00:25:29,840
which is non-open source not free

00:25:29,200 --> 00:25:31,279
license

00:25:29,840 --> 00:25:33,440
which means that this data is out of

00:25:31,279 --> 00:25:35,760
reach we've

00:25:33,440 --> 00:25:37,760
effectively did build a parser but we

00:25:35,760 --> 00:25:39,919
cannot aggregate and redistribute that

00:25:37,760 --> 00:25:42,000
to everyone in a great form and

00:25:39,919 --> 00:25:43,039
that's something maybe there's there's

00:25:42,000 --> 00:25:44,880
someone on uh

00:25:43,039 --> 00:25:46,480
on the suicide that's linked listening

00:25:44,880 --> 00:25:48,799
today it's something we need to reach

00:25:46,480 --> 00:25:51,120
out to susie in any case to to fix but

00:25:48,799 --> 00:25:52,240
it's i'm not picking on tuesday it's one

00:25:51,120 --> 00:25:54,799
of the many

00:25:52,240 --> 00:25:55,679
uh source that's problematic but there's

00:25:54,799 --> 00:25:59,440
a lot of them which

00:25:55,679 --> 00:26:03,600
are and so future plan

00:25:59,440 --> 00:26:06,480
we're adding more data sources um

00:26:03,600 --> 00:26:07,679
we are right now built we did build a

00:26:06,480 --> 00:26:10,000
bit of a ui

00:26:07,679 --> 00:26:10,799
and minimal ui and we're establishing a

00:26:10,000 --> 00:26:14,640
website

00:26:10,799 --> 00:26:18,000
and an api for data consumption um

00:26:14,640 --> 00:26:19,360
and also provide a a number of the

00:26:18,000 --> 00:26:21,039
reference data which

00:26:19,360 --> 00:26:23,120
something that can be reproduced by

00:26:21,039 --> 00:26:26,559
anyone in any case because

00:26:23,120 --> 00:26:26,960
all the code is there we're also looking

00:26:26,559 --> 00:26:30,320
at

00:26:26,960 --> 00:26:32,240
doing some machine learning in a

00:26:30,320 --> 00:26:34,480
very specific and focused way which is

00:26:32,240 --> 00:26:36,159
to focus on data quality and how it can

00:26:34,480 --> 00:26:39,039
be improved

00:26:36,159 --> 00:26:40,400
and we've been starting to to work with

00:26:39,039 --> 00:26:42,720
a few

00:26:40,400 --> 00:26:44,240
like-minded open source projects eclipse

00:26:42,720 --> 00:26:46,400
studio i talked about that they

00:26:44,240 --> 00:26:47,840
have a project where they actually

00:26:46,400 --> 00:26:52,159
publish

00:26:47,840 --> 00:26:55,440
known commit that impact and fix

00:26:52,159 --> 00:26:55,440
security vulnerabilities

00:26:55,520 --> 00:26:58,720
which is something that we talked about

00:26:58,000 --> 00:27:01,039
the

00:26:58,720 --> 00:27:03,279
evening that google is also publishing

00:27:01,039 --> 00:27:06,320
something similar

00:27:03,279 --> 00:27:08,240
and it's called vulcan db

00:27:06,320 --> 00:27:10,240
which is a project from the european

00:27:08,240 --> 00:27:10,960
union sponsored by european union is

00:27:10,240 --> 00:27:12,960
looking for

00:27:10,960 --> 00:27:15,120
this kind of data so we're trying

00:27:12,960 --> 00:27:17,279
together being like-minded about open

00:27:15,120 --> 00:27:19,600
data for security trying to

00:27:17,279 --> 00:27:21,520
to come with a eventually a shared

00:27:19,600 --> 00:27:23,600
solution in any case we're talking we're

00:27:21,520 --> 00:27:26,240
collaborating exchanging ids

00:27:23,600 --> 00:27:29,600
and eventually changing data aggregating

00:27:26,240 --> 00:27:32,480
them together and exchanging code

00:27:29,600 --> 00:27:35,039
and we're thinking about potentially

00:27:32,480 --> 00:27:36,880
building a neutral consortium or joining

00:27:35,039 --> 00:27:40,080
some foundation of sorts

00:27:36,880 --> 00:27:41,760
to make sure that uh we make this effort

00:27:40,080 --> 00:27:44,640
about a band that is stable

00:27:41,760 --> 00:27:46,960
it's not free yeah you know we've been

00:27:44,640 --> 00:27:50,399
lucky to to have been helped by

00:27:46,960 --> 00:27:53,679
google with the summer of code and and

00:27:50,399 --> 00:27:56,159
nlnet for uh with a grant

00:27:53,679 --> 00:27:56,880
through the european union but this is a

00:27:56,159 --> 00:27:59,679
lot of work

00:27:56,880 --> 00:28:01,200
and i think it's really worth to have

00:27:59,679 --> 00:28:03,440
something that's available

00:28:01,200 --> 00:28:04,880
for free to everyone we just want to

00:28:03,440 --> 00:28:06,799
make sure that we can

00:28:04,880 --> 00:28:09,440
build commands together which are

00:28:06,799 --> 00:28:09,440
sustainable

00:28:10,480 --> 00:28:14,399
and that's pretty much it

00:28:14,840 --> 00:28:21,200
so uh we're

00:28:17,919 --> 00:28:22,159
just right there in the time slot and

00:28:21,200 --> 00:28:25,679
the question

00:28:22,159 --> 00:28:30,480
are so if i'm looking right now

00:28:25,679 --> 00:28:33,200
at the the chats

00:28:30,480 --> 00:28:35,679
uh dennis is asking will reproducible

00:28:33,200 --> 00:28:39,600
builds help in that system

00:28:35,679 --> 00:28:41,279
uh yes it can um

00:28:39,600 --> 00:28:43,279
it's it's more on the detection of

00:28:41,279 --> 00:28:44,240
packages that reproducible builds can

00:28:43,279 --> 00:28:47,200
help

00:28:44,240 --> 00:28:48,080
because with reproducible build you can

00:28:47,200 --> 00:28:51,679
be

00:28:48,080 --> 00:28:55,360
guaranteed that package

00:28:51,679 --> 00:28:58,080
version 1 0 and packet installed here

00:28:55,360 --> 00:29:00,399
and package version 1 0

00:28:58,080 --> 00:29:01,200
build there and install there is bit for

00:29:00,399 --> 00:29:04,240
a bit the same

00:29:01,200 --> 00:29:07,440
so it helps with the

00:29:04,240 --> 00:29:08,799
detection of packages and

00:29:07,440 --> 00:29:11,840
because it helps with detection of

00:29:08,799 --> 00:29:14,960
packages that means it will help uh

00:29:11,840 --> 00:29:16,559
also de facto with the

00:29:14,960 --> 00:29:18,799
referencing of vulnerabilities in that

00:29:16,559 --> 00:29:20,320
package if you you're able to detect it

00:29:18,799 --> 00:29:21,760
exactly

00:29:20,320 --> 00:29:24,720
it can be difficult otherwise think

00:29:21,760 --> 00:29:25,600
about go executables which are all

00:29:24,720 --> 00:29:29,120
statically

00:29:25,600 --> 00:29:33,200
linked executable or rust

00:29:29,120 --> 00:29:34,080
or a scale it's not only trivial to

00:29:33,200 --> 00:29:36,399
figure out

00:29:34,080 --> 00:29:39,200
what is the source code that ends up in

00:29:36,399 --> 00:29:42,640
a go binary

00:29:39,200 --> 00:29:44,880
and that means if you have a library

00:29:42,640 --> 00:29:47,440
which is vulnerable that you bundle it

00:29:44,880 --> 00:29:47,919
uh finding out what it's made of is

00:29:47,440 --> 00:29:50,399
difficult

00:29:47,919 --> 00:29:52,399
of course if you're in a white box open

00:29:50,399 --> 00:29:54,159
source context that's that's easier

00:29:52,399 --> 00:29:58,080
but otherwise it's not going to trigger

00:29:54,159 --> 00:29:58,080
so that's where reproducible could help

00:30:00,960 --> 00:30:05,039
so kevin is asking will vulnerable code

00:30:03,440 --> 00:30:07,520
allow for

00:30:05,039 --> 00:30:08,320
imports of nvd so the national warranty

00:30:07,520 --> 00:30:12,399
database

00:30:08,320 --> 00:30:12,399
for linking to vulnerable code issues

00:30:13,200 --> 00:30:17,440
so i'm assuming when you say vulnerable

00:30:15,360 --> 00:30:20,000
code issues you mean

00:30:17,440 --> 00:30:21,039
vulnerabilities so the answer is yes

00:30:20,000 --> 00:30:25,520
we've built an

00:30:21,039 --> 00:30:29,200
importer to uh import the national

00:30:25,520 --> 00:30:32,399
database but we're also relying more

00:30:29,200 --> 00:30:34,880
on primary more primary source

00:30:32,399 --> 00:30:37,360
i consider nvd in some ways as solitary

00:30:34,880 --> 00:30:40,320
data source

00:30:37,360 --> 00:30:40,880
a primary data source would be the set

00:30:40,320 --> 00:30:43,919
of

00:30:40,880 --> 00:30:45,520
uh data published by open ssl is the

00:30:43,919 --> 00:30:48,720
primary data source

00:30:45,520 --> 00:30:51,039
and so yes it's it's

00:30:48,720 --> 00:30:52,320
entirely it's simply the the plan it's

00:30:51,039 --> 00:30:56,080
already there

00:30:52,320 --> 00:30:59,440
and uh we've also published uh

00:30:56,080 --> 00:31:00,799
something which is a mapping of a crude

00:30:59,440 --> 00:31:03,360
first pass mapping

00:31:00,799 --> 00:31:04,080
of the cps so the common platform

00:31:03,360 --> 00:31:07,360
enumeration

00:31:04,080 --> 00:31:09,039
which are used to identify packages in

00:31:07,360 --> 00:31:11,760
nationality database

00:31:09,039 --> 00:31:13,279
or software or hardware and software

00:31:11,760 --> 00:31:16,720
product at large

00:31:13,279 --> 00:31:16,720
to package urls

00:31:17,120 --> 00:31:22,399
and wolverine will be linked to obs

00:31:20,240 --> 00:31:23,440
sure i'd love to i'd love to that would

00:31:22,399 --> 00:31:27,039
be awesome

00:31:23,440 --> 00:31:28,720
um right now we we we spent quite a bit

00:31:27,039 --> 00:31:33,840
of time to to actually uh

00:31:28,720 --> 00:31:36,559
uh collect all the data from open source

00:31:33,840 --> 00:31:38,000
as i said the just as an example again

00:31:36,559 --> 00:31:40,880
i'm i'm not

00:31:38,000 --> 00:31:42,480
picking on a pencil in any case in in

00:31:40,880 --> 00:31:43,600
particular it's just an example and

00:31:42,480 --> 00:31:45,519
we're in the open

00:31:43,600 --> 00:31:46,880
with this to the conference so and up

00:31:45,519 --> 00:31:48,960
until the conference right so it was

00:31:46,880 --> 00:31:52,240
fair game to discuss that a bit

00:31:48,960 --> 00:31:55,519
this is an example of the cvr data from

00:31:52,240 --> 00:31:57,600
the security feeds provided by uh

00:31:55,519 --> 00:31:59,519
by suzy which are under this

00:31:57,600 --> 00:32:01,200
non-commercial license

00:31:59,519 --> 00:32:02,559
but when i said the things is a bit

00:32:01,200 --> 00:32:05,679
messy

00:32:02,559 --> 00:32:09,279
we have cvrf we also have

00:32:05,679 --> 00:32:12,480
a bunch of yammer data for back ports

00:32:09,279 --> 00:32:16,080
and we have oval beta and all these

00:32:12,480 --> 00:32:20,960
they're about different sets

00:32:16,080 --> 00:32:20,960
of angle eventually read on that

00:32:21,519 --> 00:32:28,720
so that said we we will definitely

00:32:25,679 --> 00:32:29,360
make that available in to be confirmable

00:32:28,720 --> 00:32:31,840
in

00:32:29,360 --> 00:32:32,399
in obs so whether that's through api

00:32:31,840 --> 00:32:36,559
calls

00:32:32,399 --> 00:32:38,720
or having an a copy and maintain a known

00:32:36,559 --> 00:32:40,320
full database your own full database

00:32:38,720 --> 00:32:41,919
locally

00:32:40,320 --> 00:32:43,440
eventually you want to have this in the

00:32:41,919 --> 00:32:46,000
federated way so there's

00:32:43,440 --> 00:32:46,720
no one entity that controls the data

00:32:46,000 --> 00:32:48,640
which has been

00:32:46,720 --> 00:32:52,640
the problem that's been plaguing that

00:32:48,640 --> 00:32:52,640
that between code industry so far

00:32:54,159 --> 00:33:00,240
okay and uh

00:32:57,760 --> 00:33:02,799
kevin says so we need to ensure we can

00:33:00,240 --> 00:33:03,760
map link map nvds and cv for compliance

00:33:02,799 --> 00:33:06,880
yes definitely

00:33:03,760 --> 00:33:06,880
so that's for the obs

00:33:07,600 --> 00:33:10,799
again so not only you you'll be able to

00:33:09,519 --> 00:33:14,159
to do that

00:33:10,799 --> 00:33:17,440
today we're also

00:33:14,159 --> 00:33:19,279
using suse data which is probably

00:33:17,440 --> 00:33:22,880
something that you also reference

00:33:19,279 --> 00:33:24,399
in uh in obs in some ways um

00:33:22,880 --> 00:33:26,399
the thing that's different is that we

00:33:24,399 --> 00:33:28,960
have not only suse data but if you look

00:33:26,399 --> 00:33:30,799
at some of the the data source we have

00:33:28,960 --> 00:33:32,480
uh in terms of importers we're looking

00:33:30,799 --> 00:33:35,840
at alpine linux

00:33:32,480 --> 00:33:37,360
arch beyond either directly or

00:33:35,840 --> 00:33:40,399
throughoval

00:33:37,360 --> 00:33:43,440
we're looking at gen 2 at npm red hat

00:33:40,399 --> 00:33:46,080
dot net ruby rust and and

00:33:43,440 --> 00:33:47,679
quite a few others in some cases we're

00:33:46,080 --> 00:33:50,000
limited by

00:33:47,679 --> 00:33:50,000
some

00:33:50,880 --> 00:33:54,240
license constraint there's another

00:33:52,559 --> 00:33:58,080
non-commercial license

00:33:54,240 --> 00:33:58,080
for safety db which is a

00:33:58,480 --> 00:34:06,960
database of python packages

00:34:03,120 --> 00:34:09,200
python packages vulnerabilities which is

00:34:06,960 --> 00:34:10,320
also again we're providing the code to

00:34:09,200 --> 00:34:12,960
parse that but it's

00:34:10,320 --> 00:34:14,399
unusable from uh in a commercial

00:34:12,960 --> 00:34:15,520
environment and commercial means

00:34:14,399 --> 00:34:18,560
absolutely

00:34:15,520 --> 00:34:20,159
everything and nothing and and that's

00:34:18,560 --> 00:34:21,760
typically not the kind of things we want

00:34:20,159 --> 00:34:26,240
to have as a restriction

00:34:21,760 --> 00:34:28,560
when we do open source code at all

00:34:26,240 --> 00:34:28,560
um

00:34:30,399 --> 00:34:36,320
oh so that's the mcat

00:34:33,599 --> 00:34:38,000
so phil is asking does the attacker need

00:34:36,320 --> 00:34:41,119
the mac address of the blue suit

00:34:38,000 --> 00:34:45,200
chip to be able to uh

00:34:41,119 --> 00:34:48,720
perform this attack on bluetooth

00:34:45,200 --> 00:34:51,839
actually i think there's a video

00:34:48,720 --> 00:34:55,280
that you can find on

00:34:51,839 --> 00:34:58,640
on it's called bleeding tooth

00:34:55,280 --> 00:35:02,320
you have a video that's available

00:34:58,640 --> 00:35:06,079
on youtube which you can look at

00:35:02,320 --> 00:35:07,920
here and i'm gonna paste that in the

00:35:06,079 --> 00:35:10,880
chat

00:35:07,920 --> 00:35:12,720
so you can actually look at that well

00:35:10,880 --> 00:35:15,920
actually we can look at it together it's

00:35:12,720 --> 00:35:17,280
it's a very small video on the left you

00:35:15,920 --> 00:35:20,560
have the attacking laptop

00:35:17,280 --> 00:35:21,920
on the right you have the attack laptop

00:35:20,560 --> 00:35:24,320
they're both running on moon 2 but

00:35:21,920 --> 00:35:27,599
that's that's irrelevant

00:35:24,320 --> 00:35:28,320
and basically gnome calculator was

00:35:27,599 --> 00:35:31,040
popping up

00:35:28,320 --> 00:35:32,720
on the right uh just the the only thing

00:35:31,040 --> 00:35:33,760
that was been happening as far as i

00:35:32,720 --> 00:35:36,400
understand

00:35:33,760 --> 00:35:38,000
uh it took 14 seconds so the only thing

00:35:36,400 --> 00:35:41,040
that's been happening there

00:35:38,000 --> 00:35:44,800
was uh to

00:35:41,040 --> 00:35:46,880
have uh just your bluetooth turned on

00:35:44,800 --> 00:35:49,119
but i didn't read everything just

00:35:46,880 --> 00:35:51,200
happens that i turned off

00:35:49,119 --> 00:35:53,599
my bluetooth when i saw that earlier

00:35:51,200 --> 00:35:53,599
today

00:35:54,000 --> 00:36:00,400
that's for philip and marina asked me

00:35:58,160 --> 00:36:01,440
have you ever contacted the security

00:36:00,400 --> 00:36:04,400
team at susie

00:36:01,440 --> 00:36:05,680
no not yet not yet so definitely uh

00:36:04,400 --> 00:36:08,800
that's part of the thing to do

00:36:05,680 --> 00:36:12,160
again discussing on a couple of things

00:36:08,800 --> 00:36:14,480
reusing this data probably makes sense

00:36:12,160 --> 00:36:16,320
for you guys and for students in general

00:36:14,480 --> 00:36:17,839
uh for any security team and any

00:36:16,320 --> 00:36:20,960
software developers

00:36:17,839 --> 00:36:22,800
uh it makes sense too and so being able

00:36:20,960 --> 00:36:26,160
to ensure that

00:36:22,800 --> 00:36:30,320
we can more easily aggregate the

00:36:26,160 --> 00:36:33,680
data cvr data in particular from

00:36:30,320 --> 00:36:36,880
suse would be super super useful

00:36:33,680 --> 00:36:38,640
and again at the moment we have quite a

00:36:36,880 --> 00:36:42,000
few source

00:36:38,640 --> 00:36:43,599
there's there's been a few uh examples

00:36:42,000 --> 00:36:45,920
in the past

00:36:43,599 --> 00:36:47,680
um and by the way that's an interesting

00:36:45,920 --> 00:36:48,720
blog post to read if you want to

00:36:47,680 --> 00:36:51,040
understand

00:36:48,720 --> 00:36:52,640
why there are problems so that's one of

00:36:51,040 --> 00:36:55,839
the companies that

00:36:52,640 --> 00:36:55,839
that deals with

00:36:58,320 --> 00:37:03,520
that deals with the proprietary uh

00:37:01,359 --> 00:37:05,760
which provides property database they

00:37:03,520 --> 00:37:08,079
explain why using cps which is the

00:37:05,760 --> 00:37:11,200
identifier used in the national database

00:37:08,079 --> 00:37:11,200
is a problem

00:37:11,520 --> 00:37:15,119
and you want to read that but so the the

00:37:14,240 --> 00:37:17,200
thing is

00:37:15,119 --> 00:37:18,960
being able to share and we share this

00:37:17,200 --> 00:37:23,119
data back would be

00:37:18,960 --> 00:37:24,240
super useful for everyone eventually

00:37:23,119 --> 00:37:26,480
when you think of it there's a lot of

00:37:24,240 --> 00:37:29,760
this distribution uh

00:37:26,480 --> 00:37:30,400
collaboration that's taking place on the

00:37:29,760 --> 00:37:33,920
one end

00:37:30,400 --> 00:37:35,119
across uh rpm based distros and the

00:37:33,920 --> 00:37:36,960
other round across

00:37:35,119 --> 00:37:38,160
the debian-based distros but not only

00:37:36,960 --> 00:37:38,880
and all the destroyers are talking

00:37:38,160 --> 00:37:40,160
together

00:37:38,880 --> 00:37:42,960
we're talking together on a regular

00:37:40,160 --> 00:37:44,880
basis at various venues like uh

00:37:42,960 --> 00:37:46,160
via transfer fosdem which will take

00:37:44,880 --> 00:37:50,000
place virtually in

00:37:46,160 --> 00:37:51,680
in brussels in in february

00:37:50,000 --> 00:37:53,280
there's no reason that we shouldn't

00:37:51,680 --> 00:37:54,000
wouldn't be able to do the same on

00:37:53,280 --> 00:37:57,599
security

00:37:54,000 --> 00:37:58,880
and and the scope and a lot of the

00:37:57,599 --> 00:38:01,839
security work has been

00:37:58,880 --> 00:38:03,680
done traditionally by these throws but a

00:38:01,839 --> 00:38:05,040
lot of the issues nowadays not only come

00:38:03,680 --> 00:38:08,960
from these rules but they also

00:38:05,040 --> 00:38:08,960
also come from application packages

00:38:10,240 --> 00:38:16,240
open ssl or strats

00:38:13,920 --> 00:38:17,200
which were the two most prominent ones

00:38:16,240 --> 00:38:21,920
in the last

00:38:17,200 --> 00:38:23,440
couple of years and so

00:38:21,920 --> 00:38:25,920
being able to share that would be great

00:38:23,440 --> 00:38:25,920
marina

00:38:26,400 --> 00:38:29,599
any other question

00:38:30,160 --> 00:38:34,000
oh and there is a talk from the security

00:38:32,720 --> 00:38:38,079
team so yeah i'll be

00:38:34,000 --> 00:38:38,079
i'll make sure i'll join and

00:38:38,240 --> 00:38:43,839
i'll look at the calendar

00:38:41,440 --> 00:38:46,960
and so that's pretty much it so the code

00:38:43,839 --> 00:38:46,960
is available on github

00:38:47,200 --> 00:38:51,200
on vulnerable code

00:38:52,640 --> 00:38:57,520
and again so the thing that

00:38:53,839 --> 00:38:59,440
distinguished this from other

00:38:57,520 --> 00:39:00,960
experience in the domain there's a

00:38:59,440 --> 00:39:05,119
project which i like very much

00:39:00,960 --> 00:39:08,320
called cd search which provides

00:39:05,119 --> 00:39:09,440
some aggregated data

00:39:08,320 --> 00:39:11,520
and their good friends we're

00:39:09,440 --> 00:39:13,200
collaborating eventually we'll want to

00:39:11,520 --> 00:39:14,079
share our data with them so they can

00:39:13,200 --> 00:39:15,760
integrate it

00:39:14,079 --> 00:39:18,400
integrate that in their tool they have a

00:39:15,760 --> 00:39:21,440
very cv centric

00:39:18,400 --> 00:39:24,079
view of the world cv is the

00:39:21,440 --> 00:39:25,760
the id provided to vulnerability when

00:39:24,079 --> 00:39:27,280
it's integrated in the national warranty

00:39:25,760 --> 00:39:28,800
database

00:39:27,280 --> 00:39:30,960
and by the way when i say national it

00:39:28,800 --> 00:39:33,839
remains american

00:39:30,960 --> 00:39:34,880
really than national whatever country

00:39:33,839 --> 00:39:38,320
you're from

00:39:34,880 --> 00:39:40,320
um and

00:39:38,320 --> 00:39:42,000
the eventually we'd like to have

00:39:40,320 --> 00:39:44,400
vulnerabilities from

00:39:42,000 --> 00:39:47,280
uh every round that is being also

00:39:44,400 --> 00:39:47,280
referenced there

00:39:47,440 --> 00:39:52,800
but the the efforts and and the

00:39:50,560 --> 00:39:56,240
the bar to actually contribute a new

00:39:52,800 --> 00:39:58,720
vulnerability is quite high

00:39:56,240 --> 00:39:59,839
so we will work when we establish

00:39:58,720 --> 00:40:02,800
community to ensure that

00:39:59,839 --> 00:40:04,079
all our vulnerabilities are also

00:40:02,800 --> 00:40:06,079
contributed upstream

00:40:04,079 --> 00:40:08,160
to the nationality database and will use

00:40:06,079 --> 00:40:10,720
cvs

00:40:08,160 --> 00:40:12,400
but in the meantime we'll have also a

00:40:10,720 --> 00:40:14,960
transient and intermediary

00:40:12,400 --> 00:40:16,319
ids for things that are not yet

00:40:14,960 --> 00:40:19,280
referenced there

00:40:16,319 --> 00:40:21,200
or that may not be of interest there

00:40:19,280 --> 00:40:23,040
again there's quite a bit of ceremony

00:40:21,200 --> 00:40:25,440
to make sure you can reference things

00:40:23,040 --> 00:40:26,720
nevertheless the big difference is here

00:40:25,440 --> 00:40:30,960
we're talking about

00:40:26,720 --> 00:40:34,160
cps and we're talking about package urls

00:40:30,960 --> 00:40:37,440
and so

00:40:34,160 --> 00:40:39,119
it's written in python oh i didn't point

00:40:37,440 --> 00:40:42,160
i forgot about mentioning that the

00:40:39,119 --> 00:40:42,160
architecture sorry

00:40:43,839 --> 00:40:47,760
well where is the architecture

00:40:48,400 --> 00:40:52,079
well there was there was a slide about

00:40:50,839 --> 00:40:53,280
architecture

00:40:52,079 --> 00:40:55,440
but it's not there it's written in

00:40:53,280 --> 00:40:59,280
python

00:40:55,440 --> 00:41:03,119
it's apache licensed and it's used

00:40:59,280 --> 00:41:03,119
jungle and pass grass as a base

00:41:03,280 --> 00:41:10,480
and that resistor there's a lot of tests

00:41:06,560 --> 00:41:12,800
which is the normal thing to do when

00:41:10,480 --> 00:41:14,560
when you do this kind of software any

00:41:12,800 --> 00:41:17,920
kind of software anyway

00:41:14,560 --> 00:41:21,280
um and as i said you can find it on

00:41:17,920 --> 00:41:24,720
on github and i thought i had sliding

00:41:21,280 --> 00:41:24,720
architecture but it's not there

00:41:25,200 --> 00:41:31,520
and that's pretty much it so

00:41:28,400 --> 00:41:32,079
if there's a and no other question i can

00:41:31,520 --> 00:41:35,839
stay

00:41:32,079 --> 00:41:35,839
a couple of minutes around

00:41:36,400 --> 00:41:44,000
and yes that's the talk

00:41:40,720 --> 00:41:48,640
oh thank you yeah

00:41:44,000 --> 00:41:52,319
great thank you marino

00:41:48,640 --> 00:41:53,760
you're welcome all right any any other

00:41:52,319 --> 00:41:55,040
questions so if you're interested in

00:41:53,760 --> 00:41:58,560
security definitely

00:41:55,040 --> 00:42:01,119
uh there's a you you

00:41:58,560 --> 00:42:04,319
absolutely want to join that that

00:42:01,119 --> 00:42:07,680
session which is taking place

00:42:04,319 --> 00:42:11,440
tomorrow at

00:42:07,680 --> 00:42:14,960
12 30 utc

00:42:11,440 --> 00:42:19,440
which means 10 30 central european time

00:42:14,960 --> 00:42:23,040
and if you're on the west coast

00:42:19,440 --> 00:42:26,560
in california and that would be

00:42:23,040 --> 00:42:30,000
1 30 p.m a.m sorry

00:42:26,560 --> 00:42:34,319
1 30 in the morning which is okay

00:42:30,000 --> 00:42:37,839
it's it's it's it's better than the 3 30

00:42:34,319 --> 00:42:44,720
a.m um eastern time if you're in the us

00:42:37,839 --> 00:42:47,440
on the east coast

00:42:44,720 --> 00:42:48,480
all right thank you very much i look

00:42:47,440 --> 00:42:51,839
forward to see you

00:42:48,480 --> 00:42:53,680
on my next talk which is uh actually let

00:42:51,839 --> 00:42:55,920
me put a link if you're interested in

00:42:53,680 --> 00:42:55,920
that

00:42:57,680 --> 00:43:04,240
which is here we'll be talking about

00:43:01,680 --> 00:43:05,839
one of the applications of that database

00:43:04,240 --> 00:43:09,359
which is a new tool to do

00:43:05,839 --> 00:43:12,640
a static analysis of docker

00:43:09,359 --> 00:43:13,760
containers and virtual machine and root

00:43:12,640 --> 00:43:16,960
file system

00:43:13,760 --> 00:43:17,920
things like that and one of the

00:43:16,960 --> 00:43:20,079
applications of the

00:43:17,920 --> 00:43:21,200
this volunteer database will be able to

00:43:20,079 --> 00:43:22,960
find

00:43:21,200 --> 00:43:25,040
package level vulnerabilities that may

00:43:22,960 --> 00:43:28,079
exist in both application

00:43:25,040 --> 00:43:31,359
and system packages and else of

00:43:28,079 --> 00:43:33,119
present and used in this container

00:43:31,359 --> 00:43:36,400
so i've pasted the link in the chat and

00:43:33,119 --> 00:43:42,000
i'm going to stop sharing my screen

00:43:36,400 --> 00:43:42,000
and that uh

00:43:43,119 --> 00:43:48,079
oh which means i am on video now okay

00:43:45,839 --> 00:43:48,079
though

00:43:48,319 --> 00:43:51,359
all right thank you very much for your

00:43:49,920 --> 00:43:55,839
time and

00:43:51,359 --> 00:43:55,839

YouTube URL: https://www.youtube.com/watch?v=CEpW6KYE1d4


