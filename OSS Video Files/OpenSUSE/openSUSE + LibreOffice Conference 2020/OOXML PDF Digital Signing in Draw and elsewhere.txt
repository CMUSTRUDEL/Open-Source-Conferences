Title: OOXML PDF Digital Signing in Draw and elsewhere
Publication date: 2020-10-16
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:03,439 --> 00:00:07,680
hello

00:00:04,480 --> 00:00:11,120
this is a talk about oxml and

00:00:07,680 --> 00:00:14,400
pdf digital signing in drew and

00:00:11,120 --> 00:00:17,640
elsewhere this talk is

00:00:14,400 --> 00:00:21,439
meant to be focused on x

00:00:17,640 --> 00:00:22,960
509 certificates creating signatures

00:00:21,439 --> 00:00:24,640
using that and verifying those

00:00:22,960 --> 00:00:27,680
signatures

00:00:24,640 --> 00:00:30,640
so i won't really be talking about

00:00:27,680 --> 00:00:31,760
all these gpg based signing which is a

00:00:30,640 --> 00:00:35,200
different

00:00:31,760 --> 00:00:38,320
piece regarding me perhaps

00:00:35,200 --> 00:00:39,920
i'm already familiar to many of you i'm

00:00:38,320 --> 00:00:41,920
michael schreiner from hungary

00:00:39,920 --> 00:00:43,200
i've been with colabora for many years

00:00:41,920 --> 00:00:45,360
now

00:00:43,200 --> 00:00:47,280
i started here as a g-stock student

00:00:45,360 --> 00:00:50,960
around the writer rtf

00:00:47,280 --> 00:00:53,440
important export and

00:00:50,960 --> 00:00:55,680
nowadays i mostly do things around

00:00:53,440 --> 00:00:59,359
writing

00:00:55,680 --> 00:01:02,640
so let's start with an overview on um

00:00:59,359 --> 00:01:05,920
regarding um what

00:01:02,640 --> 00:01:06,880
is what was already available as digital

00:01:05,920 --> 00:01:09,680
assigning

00:01:06,880 --> 00:01:12,320
the features that in openoffice.org and

00:01:09,680 --> 00:01:14,960
how we

00:01:12,320 --> 00:01:16,560
developed new and new features uh on top

00:01:14,960 --> 00:01:19,280
of that and

00:01:16,560 --> 00:01:20,320
then adorned video reach what's new this

00:01:19,280 --> 00:01:23,920
year

00:01:20,320 --> 00:01:27,610
so the digital signing we

00:01:23,920 --> 00:01:28,880
had in open office or times was just

00:01:27,610 --> 00:01:32,960
[Music]

00:01:28,880 --> 00:01:36,560
limited to udf signing we literally had

00:01:32,960 --> 00:01:38,479
hard-coded conditions in the code

00:01:36,560 --> 00:01:40,240
saying in case it's not all they have

00:01:38,479 --> 00:01:43,840
done it's impossible to

00:01:40,240 --> 00:01:47,600
digitally sign something um

00:01:43,840 --> 00:01:50,880
and when it comes to signing

00:01:47,600 --> 00:01:52,159
um you always have to decide what's the

00:01:50,880 --> 00:01:55,680
hashing algorithm

00:01:52,159 --> 00:01:59,360
you use um to create some um

00:01:55,680 --> 00:02:02,560
digest from your original content

00:01:59,360 --> 00:02:06,479
and then you actually sign that digest

00:02:02,560 --> 00:02:09,920
so for digesting only this order md5

00:02:06,479 --> 00:02:12,160
and show one was supported not the newer

00:02:09,920 --> 00:02:12,160
show

00:02:12,440 --> 00:02:18,959
256 or anything better

00:02:15,520 --> 00:02:21,760
and also just rsa was um

00:02:18,959 --> 00:02:24,959
supported so the newer ecd sle or

00:02:21,760 --> 00:02:27,360
anything else was not supported

00:02:24,959 --> 00:02:28,400
regarding the verification and the

00:02:27,360 --> 00:02:32,319
process is

00:02:28,400 --> 00:02:35,519
somewhat straightforward so it can do

00:02:32,319 --> 00:02:37,760
checking if the digest is matching which

00:02:35,519 --> 00:02:38,959
means in case you modified the document

00:02:37,760 --> 00:02:41,599
as an attacker

00:02:38,959 --> 00:02:43,599
then you will have a different digest

00:02:41,599 --> 00:02:46,720
compared to what was signed and we can

00:02:43,599 --> 00:02:49,840
detect that the document is modified

00:02:46,720 --> 00:02:50,720
it can also do certificate validation so

00:02:49,840 --> 00:02:53,440
that

00:02:50,720 --> 00:02:54,959
we have some trusted root certificates

00:02:53,440 --> 00:02:56,879
and there should be a chain

00:02:54,959 --> 00:02:58,159
from the trusted root certificate to

00:02:56,879 --> 00:03:00,879
your certificate

00:02:58,159 --> 00:03:04,560
and in case there is no such chain done

00:03:00,879 --> 00:03:04,560
that also fails the validation

00:03:04,959 --> 00:03:08,640
it's also an interesting attack that you

00:03:06,879 --> 00:03:10,720
can append some

00:03:08,640 --> 00:03:12,560
new streams in the zip package or

00:03:10,720 --> 00:03:14,879
basically put

00:03:12,560 --> 00:03:16,239
put data before or after the signed

00:03:14,879 --> 00:03:19,040
content

00:03:16,239 --> 00:03:19,680
so we also check for that and yeah as

00:03:19,040 --> 00:03:22,800
mentioned

00:03:19,680 --> 00:03:26,319
this is all done uh by uh

00:03:22,800 --> 00:03:28,520
x 509 certificate so not uh

00:03:26,319 --> 00:03:30,159
no jpg that was added later

00:03:28,520 --> 00:03:33,840
[Music]

00:03:30,159 --> 00:03:37,040
the first thing i did uh four years ago

00:03:33,840 --> 00:03:39,360
um was um a work summit signing

00:03:37,040 --> 00:03:40,480
which is so basically digital signing

00:03:39,360 --> 00:03:43,599
for docx

00:03:40,480 --> 00:03:45,599
xlsx and pptx formats um

00:03:43,599 --> 00:03:47,200
to improve the interest with microsoft

00:03:45,599 --> 00:03:49,440
office

00:03:47,200 --> 00:03:50,879
this is somewhat similar to odf signing

00:03:49,440 --> 00:03:54,480
because

00:03:50,879 --> 00:03:57,760
it is building on this w3c

00:03:54,480 --> 00:04:00,640
specification the xml xml

00:03:57,760 --> 00:04:02,000
digital signing core specification and

00:04:00,640 --> 00:04:05,439
odf does the same

00:04:02,000 --> 00:04:07,599
so at the very bottom layer we are just

00:04:05,439 --> 00:04:09,760
signing a piece of axonal fragment

00:04:07,599 --> 00:04:10,879
and how we do that is actually it's done

00:04:09,760 --> 00:04:14,000
the same for

00:04:10,879 --> 00:04:16,479
works of lando df one

00:04:14,000 --> 00:04:18,799
interesting part here for you as a user

00:04:16,479 --> 00:04:21,919
is that um

00:04:18,799 --> 00:04:25,199
we never sign metadata for um

00:04:21,919 --> 00:04:27,280
oxal files uh this is probably because

00:04:25,199 --> 00:04:28,960
microsoft wants to upload the files to

00:04:27,280 --> 00:04:31,520
sharepoint and tweet the method that

00:04:28,960 --> 00:04:32,400
they are something like that uh so if

00:04:31,520 --> 00:04:34,720
you open the

00:04:32,400 --> 00:04:36,000
for eyes in uh libreoffice then the

00:04:34,720 --> 00:04:39,520
libreoffice um

00:04:36,000 --> 00:04:40,960
standards as that metadata should be

00:04:39,520 --> 00:04:44,240
part of the signature

00:04:40,960 --> 00:04:45,280
so um actually works a massive unicharge

00:04:44,240 --> 00:04:48,720
won't be

00:04:45,280 --> 00:04:51,280
ever recognized as perfect um and the

00:04:48,720 --> 00:04:53,520
best level you can reach is that um you

00:04:51,280 --> 00:04:56,880
have a partial signature

00:04:53,520 --> 00:04:59,759
um it's important that we are meant to

00:04:56,880 --> 00:05:01,600
read what uh microsoft office writes um

00:04:59,759 --> 00:05:03,280
and also we should produce something

00:05:01,600 --> 00:05:06,479
that they can read

00:05:03,280 --> 00:05:08,160
um what's somewhat interesting is that

00:05:06,479 --> 00:05:09,919
um

00:05:08,160 --> 00:05:11,199
there are these different transform

00:05:09,919 --> 00:05:15,199
algorithms

00:05:11,199 --> 00:05:18,960
in um in the xml xml

00:05:15,199 --> 00:05:22,000
music spec and um

00:05:18,960 --> 00:05:24,880
compared to audio there is a special one

00:05:22,000 --> 00:05:26,320
in um in the o xml spot there is the

00:05:24,880 --> 00:05:29,360
custom algorithm

00:05:26,320 --> 00:05:32,400
and we offload most of this assigning

00:05:29,360 --> 00:05:33,280
xml assigning work to the xml sac

00:05:32,400 --> 00:05:35,360
library

00:05:33,280 --> 00:05:37,360
and that has a hard-coded set of

00:05:35,360 --> 00:05:39,919
transforms that it's supporting

00:05:37,360 --> 00:05:41,039
so i had to go to the axomasack library

00:05:39,919 --> 00:05:43,280
at support for this

00:05:41,039 --> 00:05:44,400
relationships transform algorithm

00:05:43,280 --> 00:05:46,720
algorithm

00:05:44,400 --> 00:05:49,120
because that influences like what's the

00:05:46,720 --> 00:05:51,280
input data that will be used for hashing

00:05:49,120 --> 00:05:52,639
and once this was contributed upstream

00:05:51,280 --> 00:05:55,840
down we could

00:05:52,639 --> 00:05:57,759
use the use it for work some assigning

00:05:55,840 --> 00:06:01,520
purposes

00:05:57,759 --> 00:06:04,560
um sadly the works i'm assigning markup

00:06:01,520 --> 00:06:07,840
is a bit awful one

00:06:04,560 --> 00:06:10,800
interesting piece is that um it leaks um

00:06:07,840 --> 00:06:11,600
quite some of your software and hardware

00:06:10,800 --> 00:06:13,199
details

00:06:11,600 --> 00:06:15,520
like you are supposed to write your

00:06:13,199 --> 00:06:18,160
windows version office version

00:06:15,520 --> 00:06:20,240
um microsoft office version how many

00:06:18,160 --> 00:06:25,120
monitors you have what resolution

00:06:20,240 --> 00:06:25,120
your monitor has and so on and so on

00:06:25,280 --> 00:06:29,440
and it's a very interesting question

00:06:27,840 --> 00:06:31,759
what's your windows version if you use

00:06:29,440 --> 00:06:34,080
libreoffice on the mac or on linux

00:06:31,759 --> 00:06:36,080
so we have some hard coded stamped arms

00:06:34,080 --> 00:06:38,639
that we please what microsoft office

00:06:36,080 --> 00:06:41,759
requires the arm but it's not really

00:06:38,639 --> 00:06:41,759
licking your data

00:06:42,240 --> 00:06:50,160
the next step was that um pdf export

00:06:46,560 --> 00:06:52,639
has an optional um way to create a

00:06:50,160 --> 00:06:53,680
signature during the creation of the pdf

00:06:52,639 --> 00:06:55,919
file itself

00:06:53,680 --> 00:06:57,680
this was um initially done as a gsoc

00:06:55,919 --> 00:07:00,040
project and then

00:06:57,680 --> 00:07:01,199
totally request completed this

00:07:00,040 --> 00:07:04,639
[Music]

00:07:01,199 --> 00:07:07,840
and because we had some customer who

00:07:04,639 --> 00:07:10,880
wanted um to drive this to completion

00:07:07,840 --> 00:07:12,479
and what we do there is basically we do

00:07:10,880 --> 00:07:14,800
the pdf export we

00:07:12,479 --> 00:07:15,680
write placeholder for the signature and

00:07:14,800 --> 00:07:18,479
then we do

00:07:15,680 --> 00:07:19,120
the stein standard binary signing using

00:07:18,479 --> 00:07:23,199
x

00:07:19,120 --> 00:07:26,880
509 certificates this pkcs

00:07:23,199 --> 00:07:29,520
7 spec defines how to do a binary

00:07:26,880 --> 00:07:30,479
signature on the hash of this original

00:07:29,520 --> 00:07:32,560
content

00:07:30,479 --> 00:07:33,840
and then we do a hex dump of this

00:07:32,560 --> 00:07:35,919
signature and

00:07:33,840 --> 00:07:38,319
put it to the placeholder inside the pdf

00:07:35,919 --> 00:07:41,680
file and what's not used from the pdf

00:07:38,319 --> 00:07:43,599
um placeholder is just filled up with

00:07:41,680 --> 00:07:46,639
padding

00:07:43,599 --> 00:07:48,560
so this is um for new pdf files and for

00:07:46,639 --> 00:07:51,680
signal signatures

00:07:48,560 --> 00:07:53,360
then um we wanted to improve this so

00:07:51,680 --> 00:07:56,400
that we can also verify

00:07:53,360 --> 00:07:58,960
those signatures and this requires

00:07:56,400 --> 00:07:59,919
quite like digging into quite some

00:07:58,960 --> 00:08:03,120
layers

00:07:59,919 --> 00:08:06,879
so first i wanted to

00:08:03,120 --> 00:08:08,720
understand of what existing parsers pdf

00:08:06,879 --> 00:08:10,800
parsers we have in libreoffice because

00:08:08,720 --> 00:08:14,319
of course we had multiple ones

00:08:10,800 --> 00:08:17,759
so at that time we had three

00:08:14,319 --> 00:08:20,879
popular is used um to have some

00:08:17,759 --> 00:08:24,479
editable audit odg file out of

00:08:20,879 --> 00:08:27,280
some pdf input intro then

00:08:24,479 --> 00:08:28,639
the primary problem there is that this

00:08:27,280 --> 00:08:30,639
is not available in

00:08:28,639 --> 00:08:32,880
all builds in case you are focusing on

00:08:30,639 --> 00:08:33,919
mps absolutely as done this is just not

00:08:32,880 --> 00:08:36,719
there

00:08:33,919 --> 00:08:36,719
we have some

00:08:37,039 --> 00:08:42,320
quite hard to read boost-based parser

00:08:40,159 --> 00:08:44,399
which is as i understand it mostly used

00:08:42,320 --> 00:08:47,680
just for hybrid pdf

00:08:44,399 --> 00:08:49,680
so that um you can get back your

00:08:47,680 --> 00:08:50,640
original writer or calc or impress

00:08:49,680 --> 00:08:53,279
document

00:08:50,640 --> 00:08:54,959
um from some pdf file but in case you

00:08:53,279 --> 00:08:58,720
have no libreoffice around

00:08:54,959 --> 00:09:02,320
you still have the pdf data there

00:08:58,720 --> 00:09:04,959
and i checked what's uh the

00:09:02,320 --> 00:09:05,360
situation with pdfu but at least back

00:09:04,959 --> 00:09:07,680
then

00:09:05,360 --> 00:09:09,360
it had no api to extract all this

00:09:07,680 --> 00:09:12,399
initial details which is

00:09:09,360 --> 00:09:12,399
needed by us

00:09:12,560 --> 00:09:17,279
so we needed some solution where we can

00:09:15,200 --> 00:09:20,640
just build the missing piece ourselves

00:09:17,279 --> 00:09:21,600
so i went ahead and i did the fourth pdf

00:09:20,640 --> 00:09:23,360
tokenizer

00:09:21,600 --> 00:09:25,360
but this one is really just recognizing

00:09:23,360 --> 00:09:26,320
the pdf data it's not really parsing

00:09:25,360 --> 00:09:28,480
what's in the

00:09:26,320 --> 00:09:30,320
object streams which is probably the

00:09:28,480 --> 00:09:33,519
harder part of the whole

00:09:30,320 --> 00:09:35,760
pdf parsing and

00:09:33,519 --> 00:09:36,880
the basic verification is not that

00:09:35,760 --> 00:09:38,480
complicated

00:09:36,880 --> 00:09:40,560
we need to determine where is this

00:09:38,480 --> 00:09:41,040
signature inside the pdf file and just

00:09:40,560 --> 00:09:44,000
have

00:09:41,040 --> 00:09:46,320
hash everything before and after that

00:09:44,000 --> 00:09:46,320
and

00:09:47,360 --> 00:09:50,880
determine if the digest is matching or

00:09:49,519 --> 00:09:54,160
not

00:09:50,880 --> 00:09:56,800
but then of course you can

00:09:54,160 --> 00:09:57,600
make things more complicated you can

00:09:56,800 --> 00:10:00,399
have

00:09:57,600 --> 00:10:01,360
multiple signatures in a pdf file and

00:10:00,399 --> 00:10:03,519
these signatures

00:10:01,360 --> 00:10:05,760
are are chained by definitions so the

00:10:03,519 --> 00:10:07,760
second signature is always including the

00:10:05,760 --> 00:10:10,399
first signature as data

00:10:07,760 --> 00:10:12,399
which means that previously i mentioned

00:10:10,399 --> 00:10:14,560
we want to have a

00:10:12,399 --> 00:10:16,000
signature which is covering the complete

00:10:14,560 --> 00:10:18,640
document so

00:10:16,000 --> 00:10:20,160
if signature is partial then we consider

00:10:18,640 --> 00:10:22,160
that as a failure

00:10:20,160 --> 00:10:24,240
and for pdf you can't really do this

00:10:22,160 --> 00:10:26,480
because then technically

00:10:24,240 --> 00:10:28,079
everything except the last signature

00:10:26,480 --> 00:10:31,360
will be

00:10:28,079 --> 00:10:32,000
partial so we do some middle ground

00:10:31,360 --> 00:10:35,040
there

00:10:32,000 --> 00:10:37,200
we try to find out if um actually

00:10:35,040 --> 00:10:39,120
the first signature is partial only

00:10:37,200 --> 00:10:39,519
because there is a second signature at

00:10:39,120 --> 00:10:42,079
it

00:10:39,519 --> 00:10:44,320
or perhaps there is some injustice

00:10:42,079 --> 00:10:47,040
content between the signatures

00:10:44,320 --> 00:10:47,839
inserted by some attacker and in that

00:10:47,040 --> 00:10:50,160
case the

00:10:47,839 --> 00:10:51,600
the first signature will be partial so

00:10:50,160 --> 00:10:54,880
that's a bit complicated

00:10:51,600 --> 00:10:58,000
and it's a bit sad that this hacks are

00:10:54,880 --> 00:11:00,720
um required form real world

00:10:58,000 --> 00:11:02,320
multiple signature usage in the pdf

00:11:00,720 --> 00:11:04,880
format

00:11:02,320 --> 00:11:07,040
so once you can verify a pdf signature

00:11:04,880 --> 00:11:11,440
then of course you want to

00:11:07,040 --> 00:11:13,760
create cpdf signatures and i send

00:11:11,440 --> 00:11:15,839
creating new pdf files with signatures

00:11:13,760 --> 00:11:18,320
and done that was already supported

00:11:15,839 --> 00:11:19,440
but then you can also take existing pdf

00:11:18,320 --> 00:11:21,360
files and

00:11:19,440 --> 00:11:22,800
perhaps the user size i just want to

00:11:21,360 --> 00:11:27,040
assign this

00:11:22,800 --> 00:11:30,160
so this is not working but

00:11:27,040 --> 00:11:32,959
well all combinations of um libreoffice

00:11:30,160 --> 00:11:36,240
creating pdf files adobe acrobat

00:11:32,959 --> 00:11:38,480
creating pdf files and then creating the

00:11:36,240 --> 00:11:41,200
initial signature

00:11:38,480 --> 00:11:42,000
then second and third signatures and

00:11:41,200 --> 00:11:43,920
swapping between

00:11:42,000 --> 00:11:45,279
the two software so that's that's lots

00:11:43,920 --> 00:11:47,600
of combinations

00:11:45,279 --> 00:11:48,800
but um i don't i believe no this is

00:11:47,600 --> 00:11:52,000
working nicely

00:11:48,800 --> 00:11:55,040
um the the hard part is really that um

00:11:52,000 --> 00:11:56,399
we are expected to parse random pdf wise

00:11:55,040 --> 00:11:59,920
and this is a much

00:11:56,399 --> 00:12:02,480
larger much richer markup compared to

00:11:59,920 --> 00:12:03,920
just the subset that we are producing in

00:12:02,480 --> 00:12:07,279
our pdf export

00:12:03,920 --> 00:12:11,279
and previously it was only necessary to

00:12:07,279 --> 00:12:15,839
parse what was produced by

00:12:11,279 --> 00:12:15,839
um by our own exporter

00:12:16,000 --> 00:12:22,560
the one thing you can do on top of

00:12:19,360 --> 00:12:26,000
existing xml signing and

00:12:22,560 --> 00:12:29,279
pdf signing is that um there is a

00:12:26,000 --> 00:12:33,360
set of recommendations uh on top of the

00:12:29,279 --> 00:12:36,399
xmld sig recommendation

00:12:33,360 --> 00:12:39,680
or on top of the pdf spec

00:12:36,399 --> 00:12:43,760
that this exodus and padas

00:12:39,680 --> 00:12:46,480
signing um which has the promise that

00:12:43,760 --> 00:12:46,880
in case all conditions are met then this

00:12:46,480 --> 00:12:48,880
can

00:12:46,880 --> 00:12:50,720
result in a signing which is actually

00:12:48,880 --> 00:12:53,839
legally binding

00:12:50,720 --> 00:12:56,959
which makes it very much interesting uh

00:12:53,839 --> 00:12:59,120
so um we had a checklist of

00:12:56,959 --> 00:13:00,079
what's uh what's obviously missing from

00:12:59,120 --> 00:13:03,519
libroface

00:13:00,079 --> 00:13:06,560
to create such such signatures

00:13:03,519 --> 00:13:09,680
um one thing was that um the

00:13:06,560 --> 00:13:13,839
show 256 uh

00:13:09,680 --> 00:13:17,120
support as a digesting algorithm

00:13:13,839 --> 00:13:18,160
was missing and now it's possible to do

00:13:17,120 --> 00:13:21,440
that

00:13:18,160 --> 00:13:25,920
also just rsa was supported so

00:13:21,440 --> 00:13:31,120
you see the essay support was added and

00:13:25,920 --> 00:13:34,320
one very important piece is that um

00:13:31,120 --> 00:13:37,760
you have to make sure that

00:13:34,320 --> 00:13:40,000
not only the

00:13:37,760 --> 00:13:41,839
certain private key was created it was

00:13:40,000 --> 00:13:44,240
used to create a signature

00:13:41,839 --> 00:13:45,040
but also what was the original signature

00:13:44,240 --> 00:13:47,279
because

00:13:45,040 --> 00:13:48,240
like there is a trap here you can have

00:13:47,279 --> 00:13:50,959
the same private

00:13:48,240 --> 00:13:52,639
key in multiple signatures but actually

00:13:50,959 --> 00:13:54,800
multiple certificates

00:13:52,639 --> 00:13:56,959
but actually the certificate contains

00:13:54,800 --> 00:14:00,000
your name and your other details

00:13:56,959 --> 00:14:02,560
so as a as an end user you want to

00:14:00,000 --> 00:14:03,920
have some signature which actually

00:14:02,560 --> 00:14:06,240
ensures that

00:14:03,920 --> 00:14:08,000
this certificate was used for signing

00:14:06,240 --> 00:14:11,279
and the original digital signing this is

00:14:08,000 --> 00:14:11,279
actually not providing this

00:14:11,839 --> 00:14:17,600
and the bottom line here is that um

00:14:15,199 --> 00:14:18,240
when this was this work was finished

00:14:17,600 --> 00:14:21,680
then

00:14:18,240 --> 00:14:24,880
there is um some dss digit on

00:14:21,680 --> 00:14:28,079
signatures service validator um

00:14:24,880 --> 00:14:28,800
which can check if you are confirming

00:14:28,079 --> 00:14:32,000
two different

00:14:28,800 --> 00:14:34,480
um baselines of this um

00:14:32,000 --> 00:14:36,800
padas standard uh we are passing the

00:14:34,480 --> 00:14:38,639
basic choice down you get a nice green

00:14:36,800 --> 00:14:42,000
check mark

00:14:38,639 --> 00:14:45,199
um and the use this here

00:14:42,000 --> 00:14:48,639
is that um in case you are doing um

00:14:45,199 --> 00:14:52,399
signing of existing pdf files then um

00:14:48,639 --> 00:14:52,639
then so far we were assigning some kind

00:14:52,399 --> 00:14:55,199
of

00:14:52,639 --> 00:14:56,079
stub signature widget which was on the

00:14:55,199 --> 00:14:59,279
first page

00:14:56,079 --> 00:15:01,279
zero size top left corner and

00:14:59,279 --> 00:15:02,720
now we can actually create some some

00:15:01,279 --> 00:15:05,279
visible signature widget

00:15:02,720 --> 00:15:06,800
which is semantically associated with

00:15:05,279 --> 00:15:10,160
the

00:15:06,800 --> 00:15:13,040
with the actual digital signature

00:15:10,160 --> 00:15:14,720
so you get a user interface which is

00:15:13,040 --> 00:15:17,839
quite similar to existing

00:15:14,720 --> 00:15:21,680
signature lines in in writer or or

00:15:17,839 --> 00:15:24,959
impress um and um

00:15:21,680 --> 00:15:27,199
and draw your your signature rectangle

00:15:24,959 --> 00:15:28,000
somewhere you get a nice vector graphic

00:15:27,199 --> 00:15:31,920
there

00:15:28,000 --> 00:15:34,320
um use the correct pdf markup and um

00:15:31,920 --> 00:15:35,040
once you you were you drawn some

00:15:34,320 --> 00:15:37,440
rectangle

00:15:35,040 --> 00:15:39,600
you can fine tune that in case the size

00:15:37,440 --> 00:15:41,440
or the position is exactly what you want

00:15:39,600 --> 00:15:42,880
and then you actually do the digital

00:15:41,440 --> 00:15:45,279
signing

00:15:42,880 --> 00:15:46,639
and as a combination of these um i

00:15:45,279 --> 00:15:48,639
believe currently this is

00:15:46,639 --> 00:15:49,759
a bit better than what you get from

00:15:48,639 --> 00:15:54,560
docusign or

00:15:49,759 --> 00:15:56,480
adobe acrobat so that sounds pretty nice

00:15:54,560 --> 00:15:58,720
the question is like in case you are

00:15:56,480 --> 00:16:00,560
more interested in the technicality as

00:15:58,720 --> 00:16:01,920
how all of these features are actually

00:16:00,560 --> 00:16:05,360
implemented

00:16:01,920 --> 00:16:09,440
so one thing um that um if we added

00:16:05,360 --> 00:16:11,519
was signature descriptions um xml and

00:16:09,440 --> 00:16:13,519
pdf already has markup for this and we

00:16:11,519 --> 00:16:15,680
were losing this data

00:16:13,519 --> 00:16:17,920
you can also refer to this signature

00:16:15,680 --> 00:16:20,079
commands or signature reasons

00:16:17,920 --> 00:16:21,680
i had an entire blog was indicated for

00:16:20,079 --> 00:16:23,440
this it's on the slide

00:16:21,680 --> 00:16:25,279
you can click on that in case you are

00:16:23,440 --> 00:16:26,720
interested in even more details

00:16:25,279 --> 00:16:28,800
the point is that this way it makes

00:16:26,720 --> 00:16:31,600
sense to have the same signature for

00:16:28,800 --> 00:16:32,560
um same signing certificate in multiple

00:16:31,600 --> 00:16:34,240
signatures

00:16:32,560 --> 00:16:36,399
because in the description you can

00:16:34,240 --> 00:16:39,360
actually state what's the reason of your

00:16:36,399 --> 00:16:39,680
signature signing and perhaps you want

00:16:39,360 --> 00:16:42,720
to

00:16:39,680 --> 00:16:43,440
first state um reason a and relate or

00:16:42,720 --> 00:16:45,519
reason b

00:16:43,440 --> 00:16:47,040
and then use the same signing

00:16:45,519 --> 00:16:50,160
certificate for the same document

00:16:47,040 --> 00:16:53,680
multiple times

00:16:50,160 --> 00:16:56,880
you can um also do the

00:16:53,680 --> 00:17:00,320
import of the signatures from oaxamo

00:16:56,880 --> 00:17:04,880
as mentioned this required um

00:17:00,320 --> 00:17:07,600
this an implementation of the relation

00:17:04,880 --> 00:17:09,199
relationship transform algorithm that

00:17:07,600 --> 00:17:11,280
was a bit tricky because the

00:17:09,199 --> 00:17:13,360
ecma version and the iso version of this

00:17:11,280 --> 00:17:16,160
algorithm is actually different

00:17:13,360 --> 00:17:16,799
and i believe there is a bug in the ecmo

00:17:16,160 --> 00:17:19,280
version

00:17:16,799 --> 00:17:20,720
so if you implement the iso version then

00:17:19,280 --> 00:17:23,600
you will get the same

00:17:20,720 --> 00:17:24,720
result that um what microsoft office has

00:17:23,600 --> 00:17:27,280
um

00:17:24,720 --> 00:17:28,480
there is a small sax parser in the in

00:17:27,280 --> 00:17:31,760
xml security

00:17:28,480 --> 00:17:35,200
to actually read this maximus

00:17:31,760 --> 00:17:37,600
and this was the first case where

00:17:35,200 --> 00:17:39,039
we are still we were still just

00:17:37,600 --> 00:17:42,240
supporting zip based

00:17:39,039 --> 00:17:43,760
um for much like our samara dodf but

00:17:42,240 --> 00:17:46,000
there is no longer a hardcore that

00:17:43,760 --> 00:17:47,039
saying saying if this is not all you

00:17:46,000 --> 00:17:49,120
have done

00:17:47,039 --> 00:17:51,360
it's impossible to digitally sign this

00:17:49,120 --> 00:17:54,320
format

00:17:51,360 --> 00:17:55,919
um then once you could import and verify

00:17:54,320 --> 00:17:58,880
those signatures you

00:17:55,919 --> 00:18:00,000
perhaps want to add your own ones so in

00:17:58,880 --> 00:18:03,440
the oaxamia case

00:18:00,000 --> 00:18:06,480
each new signature is a new xml file

00:18:03,440 --> 00:18:08,240
stream in the zip package um

00:18:06,480 --> 00:18:10,480
so that's somewhat nice because you

00:18:08,240 --> 00:18:12,240
can't easily break existing signatures

00:18:10,480 --> 00:18:13,120
or actually it's harder to do that by

00:18:12,240 --> 00:18:16,160
accident

00:18:13,120 --> 00:18:18,960
on the other hand um

00:18:16,160 --> 00:18:22,080
it required some bookkeeping on how the

00:18:18,960 --> 00:18:25,840
signatures are referenced and you know

00:18:22,080 --> 00:18:27,600
also some some refactoring was done here

00:18:25,840 --> 00:18:28,240
so that most of the signing logic is

00:18:27,600 --> 00:18:31,120
most

00:18:28,240 --> 00:18:34,400
moved outside the dialogue so that it

00:18:31,120 --> 00:18:37,200
can be triggered from cpt unit tests

00:18:34,400 --> 00:18:39,360
um regarding the verification of

00:18:37,200 --> 00:18:43,200
existing pdf signatures

00:18:39,360 --> 00:18:44,960
um uh this is just happening uh

00:18:43,200 --> 00:18:46,240
automatically when you are opening some

00:18:44,960 --> 00:18:49,520
pdf file

00:18:46,240 --> 00:18:50,720
and um we have some ui where you can

00:18:49,520 --> 00:18:53,200
actually

00:18:50,720 --> 00:18:54,000
try to discourage users from editing the

00:18:53,200 --> 00:18:55,760
file

00:18:54,000 --> 00:18:57,360
in case it has signatures because in

00:18:55,760 --> 00:19:00,160
case you are editing the file item you

00:18:57,360 --> 00:19:03,440
will lose your signatures

00:19:00,160 --> 00:19:06,240
um a big powder support um require

00:19:03,440 --> 00:19:08,799
basically improvements to the

00:19:06,240 --> 00:19:10,880
hashing and encryption algorithms that

00:19:08,799 --> 00:19:13,679
we support and

00:19:10,880 --> 00:19:14,400
also there is some spike on exactly how

00:19:13,679 --> 00:19:18,480
to

00:19:14,400 --> 00:19:20,640
embed this um signing certificate to the

00:19:18,480 --> 00:19:21,679
existing binary signature and if you

00:19:20,640 --> 00:19:23,840
implement that then

00:19:21,679 --> 00:19:26,640
at the end you get this nice green check

00:19:23,840 --> 00:19:30,880
mark from the dss validator

00:19:26,640 --> 00:19:34,240
um there was a surprise tab for this um

00:19:30,880 --> 00:19:37,600
exactly the xiao 250 sx

00:19:34,240 --> 00:19:39,600
and the ecdsa support i was personally

00:19:37,600 --> 00:19:43,039
interested in that because

00:19:39,600 --> 00:19:45,360
of um there is some

00:19:43,039 --> 00:19:47,600
hungarian electronic id you can do that

00:19:45,360 --> 00:19:50,799
as a hungarian citizen since there is a

00:19:47,600 --> 00:19:53,280
signing certificate on that and

00:19:50,799 --> 00:19:55,039
if you get some certificate reader then

00:19:53,280 --> 00:19:57,120
you can actually use this for signing

00:19:55,039 --> 00:19:58,000
and this is recognized by the government

00:19:57,120 --> 00:20:01,679
and whatnot

00:19:58,000 --> 00:20:04,640
so some real hardware based signing um

00:20:01,679 --> 00:20:05,600
i know this is working on on windows and

00:20:04,640 --> 00:20:09,280
linux

00:20:05,600 --> 00:20:10,159
and what was really challenging there is

00:20:09,280 --> 00:20:13,840
that um

00:20:10,159 --> 00:20:16,240
ecdsa support is not um working in this

00:20:13,840 --> 00:20:20,080
older windows api that we were using for

00:20:16,240 --> 00:20:23,440
encryption and hashing so um i know

00:20:20,080 --> 00:20:26,000
rewrote that part to use the microsoft

00:20:23,440 --> 00:20:26,880
cryptography next generation this cng

00:20:26,000 --> 00:20:30,320
api

00:20:26,880 --> 00:20:32,840
and that's working nicely

00:20:30,320 --> 00:20:34,880
and the last piece was this visible pdf

00:20:32,840 --> 00:20:38,320
signing

00:20:34,880 --> 00:20:40,559
i tried hard to reuse existing code so

00:20:38,320 --> 00:20:41,440
this is very similar to signature lines

00:20:40,559 --> 00:20:43,600
in

00:20:41,440 --> 00:20:45,440
what you may know already from writer

00:20:43,600 --> 00:20:48,559
and cog

00:20:45,440 --> 00:20:49,679
the generated signature visible

00:20:48,559 --> 00:20:52,960
signature object

00:20:49,679 --> 00:20:55,760
is actually reusing the existing

00:20:52,960 --> 00:20:57,200
export shape to pdf functionality so

00:20:55,760 --> 00:21:00,480
it's nice vector

00:20:57,200 --> 00:21:02,799
based and also

00:21:00,480 --> 00:21:03,679
then we are copying this pdf object from

00:21:02,799 --> 00:21:07,360
the shape

00:21:03,679 --> 00:21:10,080
pdf to the final pdf using code which is

00:21:07,360 --> 00:21:12,720
reused from the insert pdf image

00:21:10,080 --> 00:21:17,280
functionality

00:21:12,720 --> 00:21:19,600
um last as always um

00:21:17,280 --> 00:21:20,640
don't forget that collaborator is an

00:21:19,600 --> 00:21:23,760
open source

00:21:20,640 --> 00:21:24,880
company so what we do and share with the

00:21:23,760 --> 00:21:27,600
community has to be

00:21:24,880 --> 00:21:29,600
always paid by somebody and in this case

00:21:27,600 --> 00:21:32,320
the dutch ministry of defense in

00:21:29,600 --> 00:21:33,440
cooperation with noun and of a small

00:21:32,320 --> 00:21:37,280
dutch company

00:21:33,440 --> 00:21:39,039
uh made this work by coliboro possible

00:21:37,280 --> 00:21:41,200
the majority of the functionality

00:21:39,039 --> 00:21:44,240
presented in this call was paid by them

00:21:41,200 --> 00:21:47,440
so huge thanks to them this is a great

00:21:44,240 --> 00:21:51,280
feature set and it was possible due to

00:21:47,440 --> 00:21:52,880
them so as a summary

00:21:51,280 --> 00:21:54,480
the good news is that compared to the

00:21:52,880 --> 00:21:57,280
original open office org

00:21:54,480 --> 00:21:59,679
features that we support these sodas and

00:21:57,280 --> 00:21:59,679
poddas

00:21:59,840 --> 00:22:06,240
extensions the baseline spark we support

00:22:03,280 --> 00:22:08,559
modern hashing and algorithm algorithms

00:22:06,240 --> 00:22:10,320
you can sign not only audio but oaxam

00:22:08,559 --> 00:22:12,080
and pdf wise

00:22:10,320 --> 00:22:13,840
this is work really looking nicely to

00:22:12,080 --> 00:22:15,200
the matching products like microsoft

00:22:13,840 --> 00:22:18,480
office and acrobat

00:22:15,200 --> 00:22:21,600
flies and the new dcr was

00:22:18,480 --> 00:22:22,720
these visible pdf signatures uh thanks

00:22:21,600 --> 00:22:27,840
for listening

00:22:22,720 --> 00:22:27,840

YouTube URL: https://www.youtube.com/watch?v=_Lwg3EZ_Dc4


