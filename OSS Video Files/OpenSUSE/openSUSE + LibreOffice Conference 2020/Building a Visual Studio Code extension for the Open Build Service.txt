Title: Building a Visual Studio Code extension for the Open Build Service
Publication date: 2020-11-05
Playlist: openSUSE + LibreOffice Conference 2020
Description: 
	Subscribe ►http://bit.ly/1G2KKZl

Offical Website ►https://www.opensuse.org
Follow us on Twitter ► https://twitter.com/openSUSE
Like us on Facebook ► https://www.facebook.com/en.openSUSE
Captions: 
	00:00:00,160 --> 00:00:03,360
at least heard about the open build

00:00:02,080 --> 00:00:05,520
service but

00:00:03,360 --> 00:00:06,480
in case you haven't so the open build

00:00:05,520 --> 00:00:10,160
service is

00:00:06,480 --> 00:00:11,280
the heart uh for creating the open

00:00:10,160 --> 00:00:14,799
sourcer and the

00:00:11,280 --> 00:00:17,520
slee distributions it's a

00:00:14,799 --> 00:00:19,039
open it's a fully open source build

00:00:17,520 --> 00:00:22,720
server

00:00:19,039 --> 00:00:25,760
and it can be

00:00:22,720 --> 00:00:27,039
it can be used to create all kinds of

00:00:25,760 --> 00:00:30,080
different

00:00:27,039 --> 00:00:32,559
of different artifacts so the

00:00:30,080 --> 00:00:33,840
i think it's mostly known for being

00:00:32,559 --> 00:00:37,520
built

00:00:33,840 --> 00:00:41,360
being used to build the uh the opensuse

00:00:37,520 --> 00:00:44,719
distributions and that is used to

00:00:41,360 --> 00:00:45,120
build rpm packages but it can do so much

00:00:44,719 --> 00:00:47,680
more

00:00:45,120 --> 00:00:48,559
so it can build debian packages it can

00:00:47,680 --> 00:00:51,600
build

00:00:48,559 --> 00:00:51,600
packages for

00:00:51,840 --> 00:00:58,160
for arc linux it can build app images

00:00:55,039 --> 00:01:00,559
it can build virtual machines of all

00:00:58,160 --> 00:01:02,480
kinds can build vagrant boxes it can

00:01:00,559 --> 00:01:05,920
build containers

00:01:02,480 --> 00:01:08,880
and all of that more or less using the

00:01:05,920 --> 00:01:08,880
same workflow

00:01:11,119 --> 00:01:16,080
then one of the really nice things about

00:01:14,400 --> 00:01:19,280
the open build service is

00:01:16,080 --> 00:01:23,520
the automated rebuilds so

00:01:19,280 --> 00:01:25,600
it is a build server you define

00:01:23,520 --> 00:01:27,840
you define your build recipe for your

00:01:25,600 --> 00:01:31,119
for whatever you want to build

00:01:27,840 --> 00:01:33,759
be they be they rpm be it a

00:01:31,119 --> 00:01:35,200
app image or virtual machine and in case

00:01:33,759 --> 00:01:39,680
one of your dependencies

00:01:35,200 --> 00:01:42,720
changes your package or your

00:01:39,680 --> 00:01:45,680
your binary gets rebuilt

00:01:42,720 --> 00:01:46,880
and multiple platforms and guillaume

00:01:45,680 --> 00:01:50,560
just said it works on

00:01:46,880 --> 00:01:54,720
arm 64 as well which is pretty nice

00:01:50,560 --> 00:01:57,280
so one of the uh

00:01:54,720 --> 00:01:59,119
one of the selling points of visual

00:01:57,280 --> 00:02:02,159
studio code at least for this project

00:01:59,119 --> 00:02:04,479
was it's very very popular so visual

00:02:02,159 --> 00:02:09,759
studio code i think it popped out

00:02:04,479 --> 00:02:12,640
it became a thing around 2015-ish

00:02:09,759 --> 00:02:14,160
and according to the stack overflow

00:02:12,640 --> 00:02:18,160
developer survey

00:02:14,160 --> 00:02:19,680
it had something like a it had already

00:02:18,160 --> 00:02:22,319
in 2016

00:02:19,680 --> 00:02:23,040
a market share of something like seven

00:02:22,319 --> 00:02:25,840
percent

00:02:23,040 --> 00:02:27,920
then next year it was 24 then 30 and

00:02:25,840 --> 00:02:31,840
last year it breached the 50

00:02:27,920 --> 00:02:33,840
mark so in less than half a decade

00:02:31,840 --> 00:02:35,440
half more than half of our all

00:02:33,840 --> 00:02:39,120
developers are using

00:02:35,440 --> 00:02:42,720
visual studio code overall which is

00:02:39,120 --> 00:02:46,879
impressive to say the least

00:02:42,720 --> 00:02:51,040
and one of the also niceties of

00:02:46,879 --> 00:02:54,080
visual studio code is that it has a very

00:02:51,040 --> 00:02:54,560
well documented extension api so in case

00:02:54,080 --> 00:02:57,440
you are

00:02:54,560 --> 00:02:59,200
already using it and you and you are

00:02:57,440 --> 00:03:00,879
itching to

00:02:59,200 --> 00:03:03,599
well there's something missing and you

00:03:00,879 --> 00:03:05,920
want to want to extend it

00:03:03,599 --> 00:03:07,200
this is actually not too hard to pull

00:03:05,920 --> 00:03:10,400
off so

00:03:07,200 --> 00:03:14,159
if it's if it's feasible to be

00:03:10,400 --> 00:03:18,080
to be done in the vs code then it's

00:03:14,159 --> 00:03:19,680
it's pretty doable as the api is quite

00:03:18,080 --> 00:03:23,360
well documented

00:03:19,680 --> 00:03:24,480
the uh there's tutorials there's example

00:03:23,360 --> 00:03:26,560
extensions

00:03:24,480 --> 00:03:28,159
and there's also a relatively active

00:03:26,560 --> 00:03:30,480
community around that

00:03:28,159 --> 00:03:33,840
so in case you're interested in

00:03:30,480 --> 00:03:33,840
something like that go for it

00:03:35,360 --> 00:03:38,959
now i've also talked about this a little

00:03:37,760 --> 00:03:41,920
so why

00:03:38,959 --> 00:03:43,040
visual studio code why did we choose

00:03:41,920 --> 00:03:46,799
this and

00:03:43,040 --> 00:03:48,560
not start with emacs which i as a

00:03:46,799 --> 00:03:51,120
passionate emacs user would have of

00:03:48,560 --> 00:03:52,879
course loved and preferred but

00:03:51,120 --> 00:03:55,760
we also have to be a little pragmatic

00:03:52,879 --> 00:03:57,280
here and visual studio code is extremely

00:03:55,760 --> 00:04:02,400
popular

00:03:57,280 --> 00:04:06,080
so by targeting this one first

00:04:02,400 --> 00:04:09,439
we get uh we essentially reach 50

00:04:06,080 --> 00:04:12,640
of all developers and to

00:04:09,439 --> 00:04:16,799
to achieve a similar reach we have to

00:04:12,640 --> 00:04:19,280
implement this extension for well

00:04:16,799 --> 00:04:20,639
for every other for every other editor

00:04:19,280 --> 00:04:22,479
and we still wouldn't get

00:04:20,639 --> 00:04:23,919
the same market share so starting with

00:04:22,479 --> 00:04:27,040
visual studio code

00:04:23,919 --> 00:04:30,240
makes sense it also makes sense

00:04:27,040 --> 00:04:32,560
from another point of view and

00:04:30,240 --> 00:04:35,199
for this i have to maybe go on a small

00:04:32,560 --> 00:04:35,199
detour

00:04:35,360 --> 00:04:41,040
so what makes visual studio code really

00:04:39,280 --> 00:04:44,080
popular

00:04:41,040 --> 00:04:47,240
at least in my opinion is that

00:04:44,080 --> 00:04:50,400
the initial user experience is really

00:04:47,240 --> 00:04:53,840
outstandingly good if you open it up

00:04:50,400 --> 00:04:57,360
it's easy to understand it

00:04:53,840 --> 00:05:00,639
it immediately it immediately clicks

00:04:57,360 --> 00:05:03,199
and you can get

00:05:00,639 --> 00:05:05,280
you can get started really fast and if

00:05:03,199 --> 00:05:07,600
there's something missing

00:05:05,280 --> 00:05:09,600
it will tell you what you can do so for

00:05:07,600 --> 00:05:10,560
instance if you open an rpm spec file

00:05:09,600 --> 00:05:12,800
for the first time

00:05:10,560 --> 00:05:14,240
it will tell you hey you have no syntax

00:05:12,800 --> 00:05:15,680
highlighting do you want to install this

00:05:14,240 --> 00:05:19,919
extension

00:05:15,680 --> 00:05:23,120
if you do the same thing in emacs or vi

00:05:19,919 --> 00:05:26,479
yeah you it will do nothing like that

00:05:23,120 --> 00:05:29,280
so that's and the advantage of

00:05:26,479 --> 00:05:31,039
of this is if we create an extension for

00:05:29,280 --> 00:05:34,320
visual studio code

00:05:31,039 --> 00:05:35,840
while it might not be your preferred

00:05:34,320 --> 00:05:38,560
editor

00:05:35,840 --> 00:05:39,120
a visual studio code is simple enough to

00:05:38,560 --> 00:05:42,160
grog

00:05:39,120 --> 00:05:45,360
so that you can still use it and be

00:05:42,160 --> 00:05:45,840
decently productive even if it might not

00:05:45,360 --> 00:05:48,960
be

00:05:45,840 --> 00:05:50,240
your thing or your absolutely preferred

00:05:48,960 --> 00:05:53,680
thing

00:05:50,240 --> 00:05:56,720
and this ties directly into the

00:05:53,680 --> 00:06:00,639
into the consistent ui and ux

00:05:56,720 --> 00:06:03,600
that visual studio code provides so

00:06:00,639 --> 00:06:04,720
this is one of the it's one of its

00:06:03,600 --> 00:06:08,080
advantages and

00:06:04,720 --> 00:06:09,520
also one of its one of its down one of

00:06:08,080 --> 00:06:12,160
its weaknesses

00:06:09,520 --> 00:06:13,360
so you can't do anything really super

00:06:12,160 --> 00:06:16,400
fancy with uh

00:06:13,360 --> 00:06:18,000
visual studio code in case you are in

00:06:16,400 --> 00:06:21,120
case you are used to

00:06:18,000 --> 00:06:23,600
these really powerful uh

00:06:21,120 --> 00:06:25,520
extensions that you get for instance for

00:06:23,600 --> 00:06:28,639
your emacs or for your

00:06:25,520 --> 00:06:33,440
um or for vi

00:06:28,639 --> 00:06:37,520
you won't get those really um

00:06:33,440 --> 00:06:42,080
really in nvs code because

00:06:37,520 --> 00:06:45,360
the api is limited on purpose

00:06:42,080 --> 00:06:47,600
and by uh that might sound

00:06:45,360 --> 00:06:49,360
sound like a bad thing but that's done

00:06:47,600 --> 00:06:52,240
so that you have

00:06:49,360 --> 00:06:52,639
that as a developer you are forced to do

00:06:52,240 --> 00:06:55,680
this

00:06:52,639 --> 00:06:57,840
consistency and last uh

00:06:55,680 --> 00:07:01,199
last but not least is the language

00:06:57,840 --> 00:07:04,560
server protocol which is built into

00:07:01,199 --> 00:07:05,919
visual studio code so and this is a also

00:07:04,560 --> 00:07:08,240
one of the

00:07:05,919 --> 00:07:09,280
in bench uh inventions of the new

00:07:08,240 --> 00:07:12,479
microsoft

00:07:09,280 --> 00:07:16,479
which it's a communication protocol

00:07:12,479 --> 00:07:19,039
that can be used to give your

00:07:16,479 --> 00:07:19,520
give your editor so let's call it code

00:07:19,039 --> 00:07:22,240
smart

00:07:19,520 --> 00:07:23,280
so stuff like auto completion what you

00:07:22,240 --> 00:07:24,800
what you see here

00:07:23,280 --> 00:07:26,960
it's essentially a communication

00:07:24,800 --> 00:07:29,520
protocol between an editor

00:07:26,960 --> 00:07:30,720
and the language server and the language

00:07:29,520 --> 00:07:34,479
server is

00:07:30,720 --> 00:07:38,080
something that is an external program

00:07:34,479 --> 00:07:40,639
that analyzes your source code

00:07:38,080 --> 00:07:42,880
and the editor can query the language

00:07:40,639 --> 00:07:45,520
server and ask it

00:07:42,880 --> 00:07:47,280
hey is this source code correct or what

00:07:45,520 --> 00:07:48,240
auto completion should i provide here

00:07:47,280 --> 00:07:51,680
and there

00:07:48,240 --> 00:07:54,560
and the the idea behind this is

00:07:51,680 --> 00:07:55,520
is essentially you as an author of a

00:07:54,560 --> 00:07:58,000
language

00:07:55,520 --> 00:08:00,720
of a new programming language you just

00:07:58,000 --> 00:08:04,080
write this one language server

00:08:00,720 --> 00:08:06,319
and it works

00:08:04,080 --> 00:08:08,400
and you don't have to implement a plugin

00:08:06,319 --> 00:08:10,879
for every single text editing

00:08:08,400 --> 00:08:12,240
eventually we'd like to leverage this as

00:08:10,879 --> 00:08:14,800
well for

00:08:12,240 --> 00:08:16,160
for stuff like rpm spec files or other

00:08:14,800 --> 00:08:19,680
build recipes

00:08:16,160 --> 00:08:22,240
but unfortunately didn't get to this

00:08:19,680 --> 00:08:22,240
part yet

00:08:23,520 --> 00:08:27,280
now as as every journey there are

00:08:26,240 --> 00:08:31,039
challenges

00:08:27,280 --> 00:08:34,000
and in this one has been partially

00:08:31,039 --> 00:08:34,640
partially simple but it has been also a

00:08:34,000 --> 00:08:38,479
bit

00:08:34,640 --> 00:08:41,270
rocky from time to time

00:08:38,479 --> 00:08:42,959
so let's let's take a look at what the

00:08:41,270 --> 00:08:45,120
[Music]

00:08:42,959 --> 00:08:47,600
what the individual challenges were

00:08:45,120 --> 00:08:51,120
that's uh that we faced

00:08:47,600 --> 00:08:54,640
and the first one is uh

00:08:51,120 --> 00:08:58,160
well was in the visuals on the visual

00:08:54,640 --> 00:09:01,279
studio code side in terms of the ui

00:08:58,160 --> 00:09:04,080
so what you can see here is a is just

00:09:01,279 --> 00:09:07,600
another screenshot of visual studio code

00:09:04,080 --> 00:09:10,800
and the issue is here

00:09:07,600 --> 00:09:14,240
you can't really change a lot of this

00:09:10,800 --> 00:09:16,240
so if you want to if you you you have

00:09:14,240 --> 00:09:17,040
your visual studio code window so you've

00:09:16,240 --> 00:09:20,399
got your

00:09:17,040 --> 00:09:22,560
editor with your tabs your terminals

00:09:20,399 --> 00:09:24,720
and your side view and if you really

00:09:22,560 --> 00:09:27,040
want to do something that does

00:09:24,720 --> 00:09:28,000
more than adding a button you are

00:09:27,040 --> 00:09:31,120
limited to

00:09:28,000 --> 00:09:34,240
this part you can display

00:09:31,120 --> 00:09:37,279
output in the console and you can add

00:09:34,240 --> 00:09:38,959
at certain types of overlays to the text

00:09:37,279 --> 00:09:40,720
editor and you can add buttons for

00:09:38,959 --> 00:09:43,600
instance here and there

00:09:40,720 --> 00:09:44,720
but that's about that's about it if you

00:09:43,600 --> 00:09:47,440
really want to add

00:09:44,720 --> 00:09:48,720
additional data you have to add them in

00:09:47,440 --> 00:09:51,120
this sidebar

00:09:48,720 --> 00:09:52,480
and so for instance you can create a new

00:09:51,120 --> 00:09:55,200
um

00:09:52,480 --> 00:09:57,839
one of these new sidebar views and then

00:09:55,200 --> 00:10:01,200
you can create a preview here that looks

00:09:57,839 --> 00:10:02,880
something like this so this view shows

00:10:01,200 --> 00:10:05,680
you this is the

00:10:02,880 --> 00:10:06,399
um this is the explorer which is just

00:10:05,680 --> 00:10:10,240
your

00:10:06,399 --> 00:10:12,720
essentially your file manager um

00:10:10,240 --> 00:10:14,959
now this uh this this image is also a

00:10:12,720 --> 00:10:16,959
little bit misleading because it show

00:10:14,959 --> 00:10:18,000
because you might say now okay well this

00:10:16,959 --> 00:10:20,560
is not too bad i mean

00:10:18,000 --> 00:10:22,000
you have um you got all these all these

00:10:20,560 --> 00:10:25,120
types of elements here

00:10:22,000 --> 00:10:27,680
and they have different colors and you

00:10:25,120 --> 00:10:30,320
got these icons in here and so

00:10:27,680 --> 00:10:31,760
so that's that's not too bad well

00:10:30,320 --> 00:10:34,959
actually

00:10:31,760 --> 00:10:38,160
you can't influence this so you can tell

00:10:34,959 --> 00:10:40,959
visual studio code hey i'd like

00:10:38,160 --> 00:10:42,240
maybe an icon in front of this and

00:10:40,959 --> 00:10:45,760
display this text

00:10:42,240 --> 00:10:49,440
but color you can't you can't change

00:10:45,760 --> 00:10:52,959
the color of elements you can't

00:10:49,440 --> 00:10:55,519
change the text style you can't change

00:10:52,959 --> 00:10:55,519
the font

00:10:55,920 --> 00:11:02,160
and as i said this is

00:10:59,760 --> 00:11:02,959
this this is done on this is really done

00:11:02,160 --> 00:11:05,680
on purpose

00:11:02,959 --> 00:11:07,600
so that the thing looks the same

00:11:05,680 --> 00:11:11,279
everywhere

00:11:07,600 --> 00:11:14,720
but it's also kind of limiting so i have

00:11:11,279 --> 00:11:17,440
i initially wanted to create

00:11:14,720 --> 00:11:19,600
to create a sidebar that will show you

00:11:17,440 --> 00:11:21,120
all your requests that are open against

00:11:19,600 --> 00:11:24,640
your packages

00:11:21,120 --> 00:11:27,920
and requests that have been declined to

00:11:24,640 --> 00:11:28,959
strike them out or to show them in red

00:11:27,920 --> 00:11:32,480
unfortunately

00:11:28,959 --> 00:11:36,480
that's not possible it's also not really

00:11:32,480 --> 00:11:39,360
easily doable to sh to for instance

00:11:36,480 --> 00:11:40,320
display a graph in the in the main

00:11:39,360 --> 00:11:43,440
window you

00:11:40,320 --> 00:11:44,560
can do that via so-called webview views

00:11:43,440 --> 00:11:47,600
but that's

00:11:44,560 --> 00:11:50,639
relatively complicated so

00:11:47,600 --> 00:11:53,360
the ui is in this sense unfortunately

00:11:50,639 --> 00:11:54,800
rather limiting so we had to work with

00:11:53,360 --> 00:11:57,920
what we have

00:11:54,800 --> 00:12:00,000
and so so far it

00:11:57,920 --> 00:12:01,040
went okay but here and there i would

00:12:00,000 --> 00:12:04,880
have liked to have

00:12:01,040 --> 00:12:04,880
a little bit more customizability

00:12:05,279 --> 00:12:13,040
um another thing is the user experience

00:12:09,680 --> 00:12:17,040
so this is mostly

00:12:13,040 --> 00:12:17,839
we have roughly two target audiences i

00:12:17,040 --> 00:12:20,240
would say

00:12:17,839 --> 00:12:21,760
and uh i'm calling one of them the

00:12:20,240 --> 00:12:26,000
expert and the other one a

00:12:21,760 --> 00:12:28,720
beginner which essentially the

00:12:26,000 --> 00:12:30,399
this is from the point of view of

00:12:28,720 --> 00:12:34,399
packaging

00:12:30,399 --> 00:12:37,600
the idea is the expert is is your

00:12:34,399 --> 00:12:40,880
distribution packages so someone who has

00:12:37,600 --> 00:12:43,120
who maintains a few dozen maybe if you

00:12:40,880 --> 00:12:45,920
even a few hundred packages or someone

00:12:43,120 --> 00:12:48,560
who reviews a ton of packages

00:12:45,920 --> 00:12:50,560
and the beginner is someone who is more

00:12:48,560 --> 00:12:53,279
of a beginner to packaging so

00:12:50,560 --> 00:12:54,320
may is so probably someone who just uh

00:12:53,279 --> 00:12:56,959
who's more of a

00:12:54,320 --> 00:12:57,440
more developer and just wants to build

00:12:56,959 --> 00:13:00,079
their

00:12:57,440 --> 00:13:01,200
project and the open build service and

00:13:00,079 --> 00:13:04,000
now for

00:13:01,200 --> 00:13:05,440
the expert the expert needs uh needs a

00:13:04,000 --> 00:13:09,360
good overview

00:13:05,440 --> 00:13:11,920
over a whole bunch of stuff the

00:13:09,360 --> 00:13:14,000
expert wants to see all kinds of all

00:13:11,920 --> 00:13:15,040
their projects all their packages their

00:13:14,000 --> 00:13:16,720
requests

00:13:15,040 --> 00:13:19,200
and they want to access all this

00:13:16,720 --> 00:13:22,800
information relatively quickly so

00:13:19,200 --> 00:13:25,040
preferably via keyboard shortcuts and

00:13:22,800 --> 00:13:26,959
all that you need access to the version

00:13:25,040 --> 00:13:30,320
control

00:13:26,959 --> 00:13:33,920
and all that in a hope

00:13:30,320 --> 00:13:34,320
in a relatively streamlined experience

00:13:33,920 --> 00:13:36,570
the

00:13:34,320 --> 00:13:38,320
beginner

00:13:36,570 --> 00:13:41,519
[Music]

00:13:38,320 --> 00:13:43,760
probably doesn't that doesn't care about

00:13:41,519 --> 00:13:44,800
this being all very efficient and very

00:13:43,760 --> 00:13:47,600
fast

00:13:44,800 --> 00:13:49,839
but the beginner just wants yeah just

00:13:47,600 --> 00:13:52,720
build my project and

00:13:49,839 --> 00:13:54,160
don't get in my way and preferably they

00:13:52,720 --> 00:13:57,440
want something that's

00:13:54,160 --> 00:14:01,279
more simple and

00:13:57,440 --> 00:14:03,360
that should be also guided and this is

00:14:01,279 --> 00:14:04,399
this is a little bit of a challenge

00:14:03,360 --> 00:14:08,160
since

00:14:04,399 --> 00:14:10,880
um we have we have to

00:14:08,160 --> 00:14:12,399
bridge the uh bridge these two and find

00:14:10,880 --> 00:14:14,560
something that's

00:14:12,399 --> 00:14:16,160
that doesn't overload the beginner but

00:14:14,560 --> 00:14:20,240
it's still useful

00:14:16,160 --> 00:14:23,360
and this has been relatively hard

00:14:20,240 --> 00:14:23,360
mostly because

00:14:23,920 --> 00:14:30,320
mostly because it's been

00:14:27,279 --> 00:14:33,360
a lot of the ideas were done by me

00:14:30,320 --> 00:14:35,440
and i'm not a user experience expert

00:14:33,360 --> 00:14:37,360
so in case any one of you gives this a

00:14:35,440 --> 00:14:38,800
try and finds the user experience

00:14:37,360 --> 00:14:43,040
terrible

00:14:38,800 --> 00:14:44,800
open a issue on github please i'd

00:14:43,040 --> 00:14:47,360
definitely like to hear some feedback

00:14:44,800 --> 00:14:47,360
about that

00:14:49,040 --> 00:14:55,839
now so vs code was one part of this

00:14:53,040 --> 00:14:57,440
the other part is the open build service

00:14:55,839 --> 00:15:00,560
and

00:14:57,440 --> 00:15:02,320
that has been also quite challenging in

00:15:00,560 --> 00:15:04,800
some regards

00:15:02,320 --> 00:15:06,560
so the the open build service has a

00:15:04,800 --> 00:15:09,760
really extensive api

00:15:06,560 --> 00:15:13,440
in case you're you're a packager and

00:15:09,760 --> 00:15:17,360
you're using the command line osc client

00:15:13,440 --> 00:15:20,720
then the osc client is communicating

00:15:17,360 --> 00:15:21,519
with with the open build service via its

00:15:20,720 --> 00:15:25,040
api

00:15:21,519 --> 00:15:28,000
so all that you can see on

00:15:25,040 --> 00:15:31,839
all that you can see what osc does

00:15:28,000 --> 00:15:31,839
that's all done by the api

00:15:31,920 --> 00:15:38,079
the web ui of the open build service

00:15:34,959 --> 00:15:39,040
that one i think that one doesn't use

00:15:38,079 --> 00:15:42,720
the api

00:15:39,040 --> 00:15:46,800
at least not not completely

00:15:42,720 --> 00:15:47,600
so the web ui actually can do stuff that

00:15:46,800 --> 00:15:51,360
you

00:15:47,600 --> 00:15:55,839
can't do as efficiently um

00:15:51,360 --> 00:15:55,839
with the with the api

00:15:56,720 --> 00:16:01,199
and yeah the big problem in my opinion

00:16:00,079 --> 00:16:04,959
with the api

00:16:01,199 --> 00:16:08,079
is the documentation is

00:16:04,959 --> 00:16:12,240
lacking in a few regards so there's

00:16:08,079 --> 00:16:14,639
there's some some parts are not uh

00:16:12,240 --> 00:16:15,920
there's just information that's not been

00:16:14,639 --> 00:16:19,600
updated that's

00:16:15,920 --> 00:16:22,639
missing or that's just not super

00:16:19,600 --> 00:16:24,160
well explained so that could that could

00:16:22,639 --> 00:16:26,959
use some help but

00:16:24,160 --> 00:16:29,600
uh on on the other hand what's really

00:16:26,959 --> 00:16:34,480
nice about the documentation while it

00:16:29,600 --> 00:16:36,959
use about the api while it uses xml

00:16:34,480 --> 00:16:37,839
and that might be off-putting to some

00:16:36,959 --> 00:16:40,959
people

00:16:37,839 --> 00:16:44,240
uh the schema so

00:16:40,959 --> 00:16:45,120
every uh every api route has a defined

00:16:44,240 --> 00:16:48,399
schema

00:16:45,120 --> 00:16:51,920
and so you can pretty much rely on

00:16:48,399 --> 00:16:55,839
getting getting certain stuff back

00:16:51,920 --> 00:16:57,759
which is very good and that ties

00:16:55,839 --> 00:16:59,279
that ties itself very well into

00:16:57,759 --> 00:17:01,839
typescript because

00:16:59,279 --> 00:17:02,959
i can just define a certain type that

00:17:01,839 --> 00:17:07,280
i'll get back

00:17:02,959 --> 00:17:10,559
from from the open build service

00:17:07,280 --> 00:17:13,919
and i i get that

00:17:10,559 --> 00:17:14,959
and i can just convert that into object

00:17:13,919 --> 00:17:18,480
and typescript

00:17:14,959 --> 00:17:21,360
that's that's actually really nice but

00:17:18,480 --> 00:17:22,559
as i said parts could be the

00:17:21,360 --> 00:17:25,360
documentation could

00:17:22,559 --> 00:17:26,079
it could especially use tutorials how to

00:17:25,360 --> 00:17:29,440
use it

00:17:26,079 --> 00:17:31,039
since that part is not easy to uh

00:17:29,440 --> 00:17:34,559
to extrapolate just from my

00:17:31,039 --> 00:17:37,039
documentation of the routes

00:17:34,559 --> 00:17:37,600
another thing is this is rather minor

00:17:37,039 --> 00:17:40,160
but

00:17:37,600 --> 00:17:41,280
i think the api could use some some type

00:17:40,160 --> 00:17:44,400
of versioning or

00:17:41,280 --> 00:17:47,679
some type of deprecation since this

00:17:44,400 --> 00:17:50,799
there's few routes that are either

00:17:47,679 --> 00:17:53,679
nor not functional or that

00:17:50,799 --> 00:17:55,280
simply are discouraged from being used

00:17:53,679 --> 00:17:58,000
or that could be

00:17:55,280 --> 00:17:59,440
could be maybe improved at some point

00:17:58,000 --> 00:18:02,000
and

00:17:59,440 --> 00:18:03,120
this is currently not easily possible

00:18:02,000 --> 00:18:06,400
since or

00:18:03,120 --> 00:18:10,080
in in terms of uh changing how

00:18:06,400 --> 00:18:10,720
routes behave that's really not possible

00:18:10,080 --> 00:18:14,160
at all

00:18:10,720 --> 00:18:17,679
since if you would just change

00:18:14,160 --> 00:18:20,799
how a certain route uh api route behaves

00:18:17,679 --> 00:18:23,919
you would just just break everything

00:18:20,799 --> 00:18:27,760
and that's far from ideal

00:18:23,919 --> 00:18:30,480
and so what's uh what you see

00:18:27,760 --> 00:18:32,640
what you see in the in the wild is

00:18:30,480 --> 00:18:36,960
essentially

00:18:32,640 --> 00:18:40,480
that some some api providers have a

00:18:36,960 --> 00:18:43,520
slash v1 api and at some point they

00:18:40,480 --> 00:18:47,520
they start a slash v2 api

00:18:43,520 --> 00:18:50,160
and uh and then start uh event and

00:18:47,520 --> 00:18:51,760
eventually deprecate the v1 and get rid

00:18:50,160 --> 00:18:54,960
of it

00:18:51,760 --> 00:18:54,960
but yeah so

00:18:55,039 --> 00:18:59,360
what's what i find very challenging on

00:18:58,880 --> 00:19:02,559
obs

00:18:59,360 --> 00:19:05,440
is the handling of the history and

00:19:02,559 --> 00:19:06,400
uh if you are if you have worked with

00:19:05,440 --> 00:19:10,240
osc

00:19:06,400 --> 00:19:14,080
and you've you've branched the package

00:19:10,240 --> 00:19:14,480
and so you you might already know that

00:19:14,080 --> 00:19:17,520
you

00:19:14,480 --> 00:19:19,679
branch a package with osc

00:19:17,520 --> 00:19:21,840
and then you take a look at the log in

00:19:19,679 --> 00:19:25,039
the branch package and this tree

00:19:21,840 --> 00:19:26,960
is just one comment there and so the the

00:19:25,039 --> 00:19:30,000
history handling with obs

00:19:26,960 --> 00:19:34,160
is kind of weird because

00:19:30,000 --> 00:19:37,039
uh initially obs started as a built um

00:19:34,160 --> 00:19:38,799
started as a build server and not really

00:19:37,039 --> 00:19:42,160
something

00:19:38,799 --> 00:19:45,760
which is versioned and that got

00:19:42,160 --> 00:19:48,400
that got built on top of that uh so

00:19:45,760 --> 00:19:48,799
uh you have to take into consideration

00:19:48,400 --> 00:19:53,039
that

00:19:48,799 --> 00:19:56,240
obs is it's not super old

00:19:53,039 --> 00:19:58,960
but when it became a thing git

00:19:56,240 --> 00:19:59,919
already was a thing but it was not the

00:19:58,960 --> 00:20:02,880
only thing

00:19:59,919 --> 00:20:05,360
so that's also why the osc command line

00:20:02,880 --> 00:20:07,679
client is not modeled after git because

00:20:05,360 --> 00:20:08,559
back in the day when it was conceived

00:20:07,679 --> 00:20:11,039
git wasn't

00:20:08,559 --> 00:20:12,559
the most popular version control system

00:20:11,039 --> 00:20:15,120
it was svn

00:20:12,559 --> 00:20:16,320
and so that's why osc is modeled after

00:20:15,120 --> 00:20:19,520
svn

00:20:16,320 --> 00:20:21,360
rather than after git

00:20:19,520 --> 00:20:22,559
that doesn't mean anything about the

00:20:21,360 --> 00:20:27,039
back end since

00:20:22,559 --> 00:20:27,600
uh the uh the how the history is handled

00:20:27,039 --> 00:20:30,640
on the

00:20:27,600 --> 00:20:31,760
build service is kind of independent of

00:20:30,640 --> 00:20:33,840
that

00:20:31,760 --> 00:20:35,600
but history handling is kind of weird

00:20:33,840 --> 00:20:37,919
and that ties into

00:20:35,600 --> 00:20:39,120
anything that involves linking of

00:20:37,919 --> 00:20:42,480
packages

00:20:39,120 --> 00:20:44,080
so this part is what i've been really

00:20:42,480 --> 00:20:48,159
struggling with

00:20:44,080 --> 00:20:50,640
since once you start linking packages uh

00:20:48,159 --> 00:20:52,480
so as an explanation linking packages

00:20:50,640 --> 00:20:54,919
means essentially if you do an osc

00:20:52,480 --> 00:20:57,039
branch of something you create a

00:20:54,919 --> 00:20:59,280
so-called package link

00:20:57,039 --> 00:21:00,720
and that means you have your original

00:20:59,280 --> 00:21:03,840
package

00:21:00,720 --> 00:21:06,720
let's say gcc and you say

00:21:03,840 --> 00:21:08,240
osc branch gcc and now what obs does it

00:21:06,720 --> 00:21:13,280
creates a

00:21:08,240 --> 00:21:13,280
link in your home project to gcc

00:21:13,600 --> 00:21:19,919
and but the the the thing is the

00:21:17,039 --> 00:21:21,280
this is not a branch like you'd think of

00:21:19,919 --> 00:21:24,159
a git branch

00:21:21,280 --> 00:21:26,559
but your changes that you make in your

00:21:24,159 --> 00:21:30,000
home project they are applied

00:21:26,559 --> 00:21:32,640
uh on top of the revision

00:21:30,000 --> 00:21:34,400
from which you branched but also taking

00:21:32,640 --> 00:21:37,919
into consideration

00:21:34,400 --> 00:21:41,679
the current head of a gcc

00:21:37,919 --> 00:21:44,240
so in case your in case the package gcc

00:21:41,679 --> 00:21:46,880
gets updated from which you branch your

00:21:44,240 --> 00:21:50,720
current state also changes

00:21:46,880 --> 00:21:52,720
and that's it's really sub-optimal from

00:21:50,720 --> 00:21:55,600
a version control point of view

00:21:52,720 --> 00:21:56,559
because your history is not not really

00:21:55,600 --> 00:22:00,240
static

00:21:56,559 --> 00:22:03,360
and stuff can and and

00:22:00,240 --> 00:22:06,159
and past revisions that worked

00:22:03,360 --> 00:22:07,840
suddenly don't work anymore at some

00:22:06,159 --> 00:22:11,520
point

00:22:07,840 --> 00:22:12,880
which this makes sense from a build

00:22:11,520 --> 00:22:15,760
server point of view

00:22:12,880 --> 00:22:18,799
but it's kind of annoying from a version

00:22:15,760 --> 00:22:18,799
control point of view

00:22:18,880 --> 00:22:26,240
and last i found

00:22:22,799 --> 00:22:29,520
obs to be sometimes kinda slow

00:22:26,240 --> 00:22:31,440
so i'm i'll come to that but for for

00:22:29,520 --> 00:22:34,559
testing i'm running the obs

00:22:31,440 --> 00:22:37,760
development environment and if

00:22:34,559 --> 00:22:40,480
if my machine is under load then

00:22:37,760 --> 00:22:42,480
obs can sometimes take quite some time

00:22:40,480 --> 00:22:45,360
to process requests

00:22:42,480 --> 00:22:47,919
and then tests start to fail left right

00:22:45,360 --> 00:22:51,360
and center because timeouts are hit

00:22:47,919 --> 00:22:52,960
which is a little bit a little bit

00:22:51,360 --> 00:22:57,120
annoying and also you can

00:22:52,960 --> 00:22:57,120
unfortunately sometimes

00:22:57,520 --> 00:23:02,960
yeah run run a simple denial of service

00:23:01,440 --> 00:23:06,000
against obs by just

00:23:02,960 --> 00:23:09,200
starting a whole bunch of

00:23:06,000 --> 00:23:11,679
a whole bunch of requests and if you

00:23:09,200 --> 00:23:12,720
do that with a high enough volume you

00:23:11,679 --> 00:23:14,960
can essentially

00:23:12,720 --> 00:23:17,520
kill the whole server which is

00:23:14,960 --> 00:23:21,120
unfortunate

00:23:17,520 --> 00:23:25,600
but so well and uh

00:23:21,120 --> 00:23:31,039
as i as i noted testing

00:23:25,600 --> 00:23:31,039
oh boy yeah this this one is um

00:23:31,200 --> 00:23:38,640
this one is to be honest really the

00:23:35,520 --> 00:23:42,159
besides besides

00:23:38,640 --> 00:23:44,559
anything involving links on obs

00:23:42,159 --> 00:23:45,840
testing has been really really

00:23:44,559 --> 00:23:49,279
challenging

00:23:45,840 --> 00:23:50,080
because we've been creating a user

00:23:49,279 --> 00:23:52,559
interface

00:23:50,080 --> 00:23:53,279
and testing user interfaces that's

00:23:52,559 --> 00:23:57,039
really

00:23:53,279 --> 00:23:57,039
really nasty so

00:23:57,360 --> 00:24:03,600
you essentially are testing a gui

00:24:00,799 --> 00:24:04,000
and if you've if you've ever tried doing

00:24:03,600 --> 00:24:07,440
something

00:24:04,000 --> 00:24:07,440
like that it's

00:24:07,679 --> 00:24:14,799
it's it usually involves a lot of hacks

00:24:11,600 --> 00:24:18,080
and uh often doesn't work so

00:24:14,799 --> 00:24:21,679
that's also why many um

00:24:18,080 --> 00:24:22,480
many big gui applications don't have a

00:24:21,679 --> 00:24:24,960
lot of

00:24:22,480 --> 00:24:25,840
tests for the user interface because

00:24:24,960 --> 00:24:29,039
it's just

00:24:25,840 --> 00:24:29,600
really hard to pull off and so if you

00:24:29,039 --> 00:24:32,080
are into

00:24:29,600 --> 00:24:33,760
software development and then there's

00:24:32,080 --> 00:24:36,720
essentially two big approaches

00:24:33,760 --> 00:24:37,840
to to testing uh one is unit testing

00:24:36,720 --> 00:24:39,679
that you use to test

00:24:37,840 --> 00:24:41,919
small components of your code and then

00:24:39,679 --> 00:24:45,120
there's integration testing which tests

00:24:41,919 --> 00:24:46,559
the whole thing and so with with unit

00:24:45,120 --> 00:24:49,200
testing this is

00:24:46,559 --> 00:24:49,760
uh this is in the context of a gui

00:24:49,200 --> 00:24:53,200
that's

00:24:49,760 --> 00:24:55,120
really not that easy to do because you

00:24:53,200 --> 00:24:57,039
have your

00:24:55,120 --> 00:25:00,960
for certain parts it's simple but for

00:24:57,039 --> 00:25:04,080
the part that displays the ui

00:25:00,960 --> 00:25:05,039
this is this is a bit tricky because you

00:25:04,080 --> 00:25:08,080
have your

00:25:05,039 --> 00:25:11,840
gui toolkit and that

00:25:08,080 --> 00:25:15,279
creates some some kind of initial state

00:25:11,840 --> 00:25:18,480
and feeds your feeds your program

00:25:15,279 --> 00:25:20,000
or your functions with data and your

00:25:18,480 --> 00:25:22,960
functions produce some

00:25:20,000 --> 00:25:24,400
some output that then the gui toolkit

00:25:22,960 --> 00:25:27,679
renders

00:25:24,400 --> 00:25:28,080
and to successfully test that you have

00:25:27,679 --> 00:25:31,360
to

00:25:28,080 --> 00:25:35,600
create this initial state yourself

00:25:31,360 --> 00:25:39,600
you have to then usually also

00:25:35,600 --> 00:25:43,840
also create so-called marks of certain

00:25:39,600 --> 00:25:43,840
of certain functions that

00:25:44,000 --> 00:25:49,279
that call to the gui toolkit and

00:25:47,039 --> 00:25:50,320
then you have to verify that this

00:25:49,279 --> 00:25:53,200
actually that

00:25:50,320 --> 00:25:54,240
the result that you produce actually

00:25:53,200 --> 00:25:57,840
creates the

00:25:54,240 --> 00:26:00,720
is correct which means you have to

00:25:57,840 --> 00:26:01,520
you have to yourself check okay do i

00:26:00,720 --> 00:26:05,200
create the

00:26:01,520 --> 00:26:07,760
correct visual output um or is the

00:26:05,200 --> 00:26:10,240
result that i'm that i make is that

00:26:07,760 --> 00:26:14,080
going to result in the correct visuals

00:26:10,240 --> 00:26:16,640
which is uh so so that unfortunately

00:26:14,080 --> 00:26:17,279
tends to break if the gui toolkit in

00:26:16,640 --> 00:26:20,400
this case

00:26:17,279 --> 00:26:24,240
vs code gets updated

00:26:20,400 --> 00:26:27,200
um so

00:26:24,240 --> 00:26:28,080
in this case integration testing is is a

00:26:27,200 --> 00:26:31,200
bit better

00:26:28,080 --> 00:26:33,200
to do since

00:26:31,200 --> 00:26:34,400
we essentially want to test that the

00:26:33,200 --> 00:26:37,279
extension

00:26:34,400 --> 00:26:38,000
does the right thing and testing the

00:26:37,279 --> 00:26:41,679
whole

00:26:38,000 --> 00:26:44,240
uh the whole one in itself is uh

00:26:41,679 --> 00:26:46,159
prevents all these kind of brittlenesses

00:26:44,240 --> 00:26:49,600
of uh testing it yourself

00:26:46,159 --> 00:26:52,640
but it's still it's still relatively

00:26:49,600 --> 00:26:54,400
tricky since

00:26:52,640 --> 00:26:55,840
it connects to the so this this

00:26:54,400 --> 00:26:58,799
extension is

00:26:55,840 --> 00:26:59,760
bridge's visual studio code and the open

00:26:58,799 --> 00:27:01,520
build service

00:26:59,760 --> 00:27:03,760
so you need an instance of the open

00:27:01,520 --> 00:27:05,279
build service

00:27:03,760 --> 00:27:07,120
you don't want to run this against

00:27:05,279 --> 00:27:10,799
production maybe since

00:27:07,120 --> 00:27:10,799
software has bugs and

00:27:10,960 --> 00:27:15,120
you don't want to accidentally delete

00:27:13,520 --> 00:27:18,720
important packages or

00:27:15,120 --> 00:27:22,240
do other nasty stuff which can happen

00:27:18,720 --> 00:27:22,559
so for that fortunately the obs team has

00:27:22,240 --> 00:27:25,360
a

00:27:22,559 --> 00:27:26,080
development environment uh which is just

00:27:25,360 --> 00:27:29,360
a bunch of

00:27:26,080 --> 00:27:32,640
docker containers and we use that

00:27:29,360 --> 00:27:35,919
which is that's that's actually that was

00:27:32,640 --> 00:27:39,279
relatively straightforward-ish um

00:27:35,919 --> 00:27:42,000
another bit tricky part is also the

00:27:39,279 --> 00:27:44,240
extension needs to handle secrets

00:27:42,000 --> 00:27:46,000
so it needs to you need to tell it your

00:27:44,240 --> 00:27:49,200
obs password

00:27:46,000 --> 00:27:51,279
so that it can access the api and this

00:27:49,200 --> 00:27:54,080
secret needs to be stored somewhere

00:27:51,279 --> 00:27:55,039
so this was uh on on linux you use lip

00:27:54,080 --> 00:27:58,399
secret from

00:27:55,039 --> 00:28:01,840
for that for for from the gnome project

00:27:58,399 --> 00:28:05,200
and uh to not mess with your locally

00:28:01,840 --> 00:28:08,240
installed lip secret we've actually

00:28:05,200 --> 00:28:08,640
we have a tiny a tiny c library that

00:28:08,240 --> 00:28:10,720
just

00:28:08,640 --> 00:28:12,720
is injected into the test environment

00:28:10,720 --> 00:28:16,080
via ld preload

00:28:12,720 --> 00:28:18,159
just so you don't just

00:28:16,080 --> 00:28:20,159
so you don't mess up your local secret

00:28:18,159 --> 00:28:23,200
storage

00:28:20,159 --> 00:28:26,880
and last but not least the actual

00:28:23,200 --> 00:28:28,480
tests are run using an

00:28:26,880 --> 00:28:30,000
extension that's called vs code

00:28:28,480 --> 00:28:33,760
extension tester

00:28:30,000 --> 00:28:35,279
so if you if you remember a few slides

00:28:33,760 --> 00:28:38,320
back i said that

00:28:35,279 --> 00:28:40,799
vs code is built on electron and so

00:28:38,320 --> 00:28:41,600
this thing is it's actually just a

00:28:40,799 --> 00:28:44,880
website

00:28:41,600 --> 00:28:46,480
there's even a web version of vs code

00:28:44,880 --> 00:28:50,559
that runs in your browser

00:28:46,480 --> 00:28:52,880
if that's a thing you'd like and so

00:28:50,559 --> 00:28:54,720
that means you can use all those all

00:28:52,880 --> 00:28:56,720
those testing frameworks that exist

00:28:54,720 --> 00:28:58,159
there for website for instance selenium

00:28:56,720 --> 00:29:01,120
web driver

00:28:58,159 --> 00:29:04,480
and so someone from red hat wrote a

00:29:01,120 --> 00:29:07,520
wrapper around selenium webdriver

00:29:04,480 --> 00:29:11,279
this is vs code extension tester and

00:29:07,520 --> 00:29:14,559
it allows you to interact via a

00:29:11,279 --> 00:29:17,200
via an api with vs code itself

00:29:14,559 --> 00:29:18,640
so if you know open qa which some of you

00:29:17,200 --> 00:29:21,360
in here might

00:29:18,640 --> 00:29:23,120
it does essentially something comparable

00:29:21,360 --> 00:29:26,240
so you tell it hey

00:29:23,120 --> 00:29:30,720
find this element click on it

00:29:26,240 --> 00:29:34,000
tell me which new views pop up and so on

00:29:30,720 --> 00:29:37,200
and then uh you can check what

00:29:34,000 --> 00:29:40,240
currently or which editor in those

00:29:37,200 --> 00:29:43,760
windows are open there and so on

00:29:40,240 --> 00:29:46,080
so this one this one is really useful

00:29:43,760 --> 00:29:48,960
i have a few tests set up with that

00:29:46,080 --> 00:29:52,960
unfortunately not as many as i'd like

00:29:48,960 --> 00:29:54,960
yet but this is in case you are

00:29:52,960 --> 00:29:56,799
interested in developing your your own

00:29:54,960 --> 00:30:00,559
extension this is a thing

00:29:56,799 --> 00:30:00,559
you should definitely take a look at

00:30:01,600 --> 00:30:08,559
well with that i would

00:30:05,279 --> 00:30:12,080
go for the for the live demo

00:30:08,559 --> 00:30:12,080
um let me

00:30:12,159 --> 00:30:16,559
share the other window and in case there

00:30:15,679 --> 00:30:19,600
are any

00:30:16,559 --> 00:30:37,840
questions or anything specifically

00:30:19,600 --> 00:30:37,840
you'd like to see please speak up

00:31:26,000 --> 00:31:33,840
is this roughly readable is that

00:31:30,240 --> 00:31:33,840
good from a view

00:31:44,840 --> 00:31:47,840
okay

00:31:54,159 --> 00:32:01,120
okay so what you see here is

00:31:57,519 --> 00:32:04,480
uh is essentially the uh

00:32:01,120 --> 00:32:05,440
what you'd get if you open the extension

00:32:04,480 --> 00:32:09,120
right now so

00:32:05,440 --> 00:32:11,519
it displays the um

00:32:09,120 --> 00:32:13,279
the thing itself is called the open

00:32:11,519 --> 00:32:17,200
build service connector

00:32:13,279 --> 00:32:20,799
so if you want to give it a try you can

00:32:17,200 --> 00:32:24,399
you can just install it from the

00:32:20,799 --> 00:32:26,399
from the visual studio code marketplace

00:32:24,399 --> 00:32:28,480
just search for the open build service

00:32:26,399 --> 00:32:29,600
connector there should be an updated

00:32:28,480 --> 00:32:33,200
version from

00:32:29,600 --> 00:32:35,440
a few hours ago this is um

00:32:33,200 --> 00:32:36,720
what i'm currently running in here is

00:32:35,440 --> 00:32:39,840
the uh

00:32:36,720 --> 00:32:41,440
is my development version so it might

00:32:39,840 --> 00:32:43,760
look

00:32:41,440 --> 00:32:45,360
it shouldn't actually look tiny bit

00:32:43,760 --> 00:32:48,080
differently but

00:32:45,360 --> 00:32:49,519
i i expect that probably because i'm

00:32:48,080 --> 00:32:52,799
presenting this live

00:32:49,519 --> 00:32:54,799
something will break and so then i can

00:32:52,799 --> 00:32:58,000
at least attach a debugger

00:32:54,799 --> 00:32:59,440
and just be a little bit embarrassed and

00:32:58,000 --> 00:33:02,640
that's it

00:32:59,440 --> 00:33:04,640
so if you uh

00:33:02,640 --> 00:33:06,480
if you open the extension you can just

00:33:04,640 --> 00:33:10,320
uh just activate it by

00:33:06,480 --> 00:33:14,720
clicking on the on the nice on this uh

00:33:10,320 --> 00:33:17,760
custom obs icon that uh stasiak

00:33:14,720 --> 00:33:19,600
created for uh for me kindly

00:33:17,760 --> 00:33:21,039
and if you open the extension and you

00:33:19,600 --> 00:33:24,159
got a

00:33:21,039 --> 00:33:26,720
and you got a osc configuration file

00:33:24,159 --> 00:33:28,240
already on your file system and the

00:33:26,720 --> 00:33:31,760
extension will

00:33:28,240 --> 00:33:33,679
will prompt you for whether you want to

00:33:31,760 --> 00:33:37,600
import your accounts

00:33:33,679 --> 00:33:38,399
and so i will just trigger that manually

00:33:37,600 --> 00:33:41,919
now

00:33:38,399 --> 00:33:44,960
using a command and

00:33:41,919 --> 00:33:45,919
in in your case it would also ask you

00:33:44,960 --> 00:33:49,360
for your

00:33:45,919 --> 00:33:51,200
for your passwords if you've

00:33:49,360 --> 00:33:54,000
if you've never used it before so it

00:33:51,200 --> 00:33:57,679
will store these in the operating system

00:33:54,000 --> 00:34:00,799
operating systems keyring

00:33:57,679 --> 00:34:02,640
so let the

00:34:00,799 --> 00:34:05,760
essentially the main interaction point

00:34:02,640 --> 00:34:10,320
is the are the project bookmarks

00:34:05,760 --> 00:34:13,520
so the idea is that you that you'd add

00:34:10,320 --> 00:34:15,200
you'd add bookmarks for each for all the

00:34:13,520 --> 00:34:18,480
projects that you care about

00:34:15,200 --> 00:34:21,200
and that you want to interact with so

00:34:18,480 --> 00:34:22,800
in this case uh you can see under

00:34:21,200 --> 00:34:26,000
bookmarks it added

00:34:22,800 --> 00:34:28,240
two of these um two of these server

00:34:26,000 --> 00:34:30,240
icons here so one is for the

00:34:28,240 --> 00:34:31,440
open build service and one is for our

00:34:30,240 --> 00:34:34,480
internal one

00:34:31,440 --> 00:34:37,280
and so i'm just going to quickly

00:34:34,480 --> 00:34:38,480
remove the internal one since we don't

00:34:37,280 --> 00:34:41,520
uh

00:34:38,480 --> 00:34:43,040
we don't need to at the moment and what

00:34:41,520 --> 00:34:46,480
you just start out with

00:34:43,040 --> 00:34:48,560
is to create a to just

00:34:46,480 --> 00:34:50,480
bookmark a new project and if you click

00:34:48,560 --> 00:34:54,800
this this button you can

00:34:50,480 --> 00:34:58,480
you get an overview of every single

00:34:54,800 --> 00:35:01,119
project on on obs

00:34:58,480 --> 00:35:02,480
so that's there's quite many so let's

00:35:01,119 --> 00:35:05,760
just uh

00:35:02,480 --> 00:35:08,560
let's just pick one let's pick the

00:35:05,760 --> 00:35:10,960
utilities project and then you can

00:35:08,560 --> 00:35:12,320
decide which packages of this you want

00:35:10,960 --> 00:35:14,560
to

00:35:12,320 --> 00:35:16,560
you want to bookmark you can just take

00:35:14,560 --> 00:35:22,000
all of them but

00:35:16,560 --> 00:35:22,000
i'm just going to pick one

00:35:23,599 --> 00:35:29,040
and will show up under

00:35:27,040 --> 00:35:32,480
these bookmarks and you can take a look

00:35:29,040 --> 00:35:32,480
at the files in here

00:35:33,040 --> 00:35:37,680
you can take a look at the spec file

00:35:35,760 --> 00:35:38,960
opening the tar file doesn't really make

00:35:37,680 --> 00:35:42,400
sense in this case and i think

00:35:38,960 --> 00:35:45,760
visual studio code barfs on that so this

00:35:42,400 --> 00:35:48,880
this here this is a read-only view so

00:35:45,760 --> 00:35:51,520
if i try to hammer my keyboard

00:35:48,880 --> 00:35:52,079
uh this is a read-only view because this

00:35:51,520 --> 00:35:55,599
is

00:35:52,079 --> 00:36:00,560
the file is just pulled down from uh

00:35:55,599 --> 00:36:00,560
from obs and just displayed like that

00:36:02,400 --> 00:36:06,400
now you might have noticed that if i

00:36:05,200 --> 00:36:09,520
select

00:36:06,400 --> 00:36:12,560
the if i

00:36:09,520 --> 00:36:14,400
select this one of the files from the

00:36:12,560 --> 00:36:17,119
jtc package

00:36:14,400 --> 00:36:18,640
that suddenly these two views here are

00:36:17,119 --> 00:36:21,760
populated

00:36:18,640 --> 00:36:25,680
so what these so

00:36:21,760 --> 00:36:28,800
what this one this one shows you your

00:36:25,680 --> 00:36:31,920
current project that

00:36:28,800 --> 00:36:35,200
that belongs to the open

00:36:31,920 --> 00:36:40,880
to the open file so if i would simply

00:36:35,200 --> 00:36:46,880
add another one me just

00:36:40,880 --> 00:36:49,920
uh bookmark a few other packages

00:36:46,880 --> 00:36:55,520
i don't want a ruby i want

00:36:49,920 --> 00:36:59,359
so okay

00:36:55,520 --> 00:37:04,800
so if we open one of the patches in here

00:36:59,359 --> 00:37:08,079
you'll see that it it changes

00:37:04,800 --> 00:37:11,280
the current project changes

00:37:08,079 --> 00:37:12,720
to whatever belongs to the currently

00:37:11,280 --> 00:37:16,160
opened

00:37:12,720 --> 00:37:17,280
to the currently opened file and again

00:37:16,160 --> 00:37:20,480
this is just

00:37:17,280 --> 00:37:24,560
this this patch is from uh is pulled

00:37:20,480 --> 00:37:28,480
directly from the open build service

00:37:24,560 --> 00:37:28,480
um good so

00:37:29,280 --> 00:37:32,960
and then you also have this uh the view

00:37:32,400 --> 00:37:36,560
of the

00:37:32,960 --> 00:37:39,520
repositories now

00:37:36,560 --> 00:37:41,920
this is uh this is a little bit of the

00:37:39,520 --> 00:37:45,200
the simplified view that you have

00:37:41,920 --> 00:37:48,160
um of your repository so you have here

00:37:45,200 --> 00:37:48,839
every every repo that is configured for

00:37:48,160 --> 00:37:52,160
this

00:37:48,839 --> 00:37:55,280
um for this package

00:37:52,160 --> 00:37:56,240
so in this case we got for leap and for

00:37:55,280 --> 00:37:58,560
the sleaze

00:37:56,240 --> 00:38:00,720
and you can take a look for which which

00:37:58,560 --> 00:38:03,599
paths are defined here

00:38:00,720 --> 00:38:05,040
and for which which architectures and as

00:38:03,599 --> 00:38:08,640
you can see

00:38:05,040 --> 00:38:12,400
we can also also modify these but

00:38:08,640 --> 00:38:13,680
i don't want to mess with the utilities

00:38:12,400 --> 00:38:18,640
repo

00:38:13,680 --> 00:38:23,200
so i'm actually going to

00:38:18,640 --> 00:38:23,200
to branch the utilities package

00:38:23,839 --> 00:38:31,040
and hope that it will finish in time

00:38:27,440 --> 00:38:34,079
so unfortunately connection has been

00:38:31,040 --> 00:38:37,839
today rather slow

00:38:34,079 --> 00:38:37,839
so it might take a while

00:38:45,280 --> 00:38:49,930
yep the gods of the presentation are not

00:38:48,400 --> 00:38:53,280
favorable today

00:38:49,930 --> 00:38:55,440
[Music]

00:38:53,280 --> 00:39:01,839
yeah please if you want to say something

00:38:55,440 --> 00:39:01,839
just go ahead

00:39:04,640 --> 00:39:09,200
oh if you want to say something then

00:39:06,560 --> 00:39:13,040
please say it and don't

00:39:09,200 --> 00:39:13,040
someone just unmuted themselves

00:39:13,200 --> 00:39:17,760
either say something or mute yourself

00:39:15,119 --> 00:39:17,760
again please

00:39:25,680 --> 00:39:29,599
whoever just joined please mute

00:39:40,839 --> 00:39:43,839
themselves

00:39:48,560 --> 00:39:54,560
hey could you

00:39:52,000 --> 00:39:56,510
could you please mute yourself you

00:39:54,560 --> 00:39:58,880
didn't fill in your name but

00:39:56,510 --> 00:40:03,119
[Music]

00:39:58,880 --> 00:40:03,119
oh good lord people

00:40:08,000 --> 00:40:12,319
do you know if i can somehow um

00:40:12,880 --> 00:40:17,830
force mute someone i'm afraid i'm not

00:40:16,000 --> 00:40:19,839
the admin of this

00:40:17,830 --> 00:40:25,839
[Music]

00:40:19,839 --> 00:40:25,839
this place so

00:40:28,480 --> 00:40:38,000
last we cannot because i don't think

00:40:30,480 --> 00:40:41,200
that's actually a feature in jitsi

00:40:38,000 --> 00:40:43,119
oh well well i mean it's uh i'm just

00:40:41,200 --> 00:40:44,079
going to locally mute the person who's

00:40:43,119 --> 00:40:45,839
currently

00:40:44,079 --> 00:40:47,680
making a whole bunch of noise so if they

00:40:45,839 --> 00:40:48,400
say something i won't be able to hear

00:40:47,680 --> 00:40:53,839
them

00:40:48,400 --> 00:40:53,839
but uh yeah

00:40:56,960 --> 00:41:01,200
okay anyway so fortunately branching

00:41:00,400 --> 00:41:04,560
finished

00:41:01,200 --> 00:41:06,560
um and it asked me also to to check it

00:41:04,560 --> 00:41:08,520
out locally so this is now

00:41:06,560 --> 00:41:10,400
if you go if you go to

00:41:08,520 --> 00:41:11,920
build.opensuse.org and check out this

00:41:10,400 --> 00:41:15,520
project there should be now

00:41:11,920 --> 00:41:20,319
a new one and you can in theory live

00:41:15,520 --> 00:41:22,000
see how i messed up

00:41:20,319 --> 00:41:23,920
what do you mean you you can't see the

00:41:22,000 --> 00:41:27,520
presentation

00:41:23,920 --> 00:41:31,040
do you this i should be

00:41:27,520 --> 00:41:34,280
sharing a vs code window

00:41:31,040 --> 00:41:37,369
right now

00:41:34,280 --> 00:41:37,369
[Music]

00:41:41,540 --> 00:41:46,160
[Music]

00:41:42,880 --> 00:41:46,160
okay so probably

00:41:46,839 --> 00:41:53,839
hmm yeah it's it it could be

00:41:50,720 --> 00:41:58,079
it could be a jitsi connection so jitsi

00:41:53,839 --> 00:42:02,400
uh uh jitsi relies on y'all

00:41:58,079 --> 00:42:05,359
gta sometimes issues with um

00:42:02,400 --> 00:42:08,240
if you are if you are in an unfavorable

00:42:05,359 --> 00:42:10,240
geographical location unfortunately

00:42:08,240 --> 00:42:13,280
like me i can barely see everything

00:42:10,240 --> 00:42:17,839
because it looks like blurry can

00:42:13,280 --> 00:42:17,839
yay i know that

00:42:18,160 --> 00:42:24,079
uh so uh okay so i've got

00:42:21,760 --> 00:42:26,319
this i've got the package branched it's

00:42:24,079 --> 00:42:29,040
in my home project so that means i can

00:42:26,319 --> 00:42:30,560
absolutely mess it up as much as i want

00:42:29,040 --> 00:42:32,000
and i'm going to do that to show you

00:42:30,560 --> 00:42:35,760
what you can do with

00:42:32,000 --> 00:42:39,680
repositories so essentially we got repos

00:42:35,760 --> 00:42:43,440
for everything and we can just add

00:42:39,680 --> 00:42:46,640
add new ones in case so we want to add

00:42:43,440 --> 00:42:51,599
i don't know mega 7 so

00:42:46,640 --> 00:42:52,319
and let's also add ibm power kvm 3.1

00:42:51,599 --> 00:42:54,960
whatever

00:42:52,319 --> 00:42:54,960
that is

00:42:56,880 --> 00:43:04,240
and as i said cool uh

00:42:59,920 --> 00:43:07,280
immediately i break stuff

00:43:04,240 --> 00:43:07,280
so um

00:43:07,359 --> 00:43:13,839
let's just add this one i think that

00:43:10,839 --> 00:43:13,839
should

00:43:15,280 --> 00:43:20,880
sorry not adding any repositories today

00:43:18,720 --> 00:43:23,920
i'll take a look at this later

00:43:20,880 --> 00:43:27,119
um so

00:43:23,920 --> 00:43:30,160
at least this part should um

00:43:27,119 --> 00:43:33,200
yeah the demo effect and

00:43:30,160 --> 00:43:36,240
apparently i don't have tests for this

00:43:33,200 --> 00:43:39,440
i what i do have tests for is

00:43:36,240 --> 00:43:42,800
uh at least i think so is if you

00:43:39,440 --> 00:43:45,920
you can simply add add architectures

00:43:42,800 --> 00:43:50,800
so if you want to have a if you

00:43:45,920 --> 00:43:50,800
just want to add stuff in here then

00:43:51,520 --> 00:43:56,000
okay i'm sorry there's something

00:43:53,280 --> 00:43:59,680
seriously broken here

00:43:56,000 --> 00:43:59,680
give me a second

00:44:02,000 --> 00:44:09,839
what is going on

00:44:10,880 --> 00:44:13,280
why

00:44:20,880 --> 00:44:25,119
is the api side on obs down

00:44:29,200 --> 00:44:32,160
i hope not

00:44:32,240 --> 00:44:38,400
i mean the web ui still works

00:44:35,520 --> 00:44:39,440
well it is thursday and this is around

00:44:38,400 --> 00:44:50,560
the time that they

00:44:39,440 --> 00:44:52,880
go and deploy

00:44:50,560 --> 00:44:52,880
um

00:44:57,119 --> 00:45:02,000
i get an api reply from

00:45:02,480 --> 00:45:11,119
from obs itself uh

00:45:05,680 --> 00:45:11,119
let me just restart it

00:45:16,240 --> 00:45:19,839
screen is still shared

00:45:31,440 --> 00:45:37,119
uh okay now it's now it works well have

00:45:34,560 --> 00:45:40,160
you tried turning it off and on again

00:45:37,119 --> 00:45:42,720
um anyway so you can

00:45:40,160 --> 00:45:43,680
you can simply click on the plus button

00:45:42,720 --> 00:45:47,119
there and

00:45:43,680 --> 00:45:48,319
um just add whatever architectures you

00:45:47,119 --> 00:45:51,440
like

00:45:48,319 --> 00:45:54,000
so this um this all

00:45:51,440 --> 00:45:54,880
so it will it will always do that for

00:45:54,000 --> 00:45:58,319
the

00:45:54,880 --> 00:46:01,359
um for the project that belongs to the

00:45:58,319 --> 00:46:02,960
currently opened file and you can also

00:46:01,359 --> 00:46:05,839
in the same way just

00:46:02,960 --> 00:46:07,440
delete stuff as you can see so the delay

00:46:05,839 --> 00:46:10,720
that you see here

00:46:07,440 --> 00:46:14,000
that's that simply it

00:46:10,720 --> 00:46:18,400
updates after obs has also updated

00:46:14,000 --> 00:46:21,280
that so

00:46:18,400 --> 00:46:22,000
and also in a similar fashion you can

00:46:21,280 --> 00:46:25,119
add

00:46:22,000 --> 00:46:28,640
new paths to your repository so

00:46:25,119 --> 00:46:31,680
this will just open this search for

00:46:28,640 --> 00:46:33,680
for a new for a new project so i can

00:46:31,680 --> 00:46:36,720
just start typing in

00:46:33,680 --> 00:46:40,839
and select some

00:46:36,720 --> 00:46:45,359
so let's just add some leap

00:46:40,839 --> 00:46:48,400
15.2 use standard

00:46:45,359 --> 00:46:51,040
and it will some point pop up here

00:46:48,400 --> 00:46:51,520
as you can see now there's uh now

00:46:51,040 --> 00:46:54,000
there's

00:46:51,520 --> 00:46:55,920
also these arrows that showed up here so

00:46:54,000 --> 00:46:58,400
you can

00:46:55,920 --> 00:46:59,839
you can move the paths up and down since

00:46:58,400 --> 00:47:04,720
this actually

00:46:59,839 --> 00:47:04,720
makes a difference depending on um

00:47:04,880 --> 00:47:10,400
so the the order in which the the paths

00:47:08,400 --> 00:47:12,480
appear in your repository that actually

00:47:10,400 --> 00:47:15,440
makes a difference so that's why you can

00:47:12,480 --> 00:47:16,319
you can change them via these buttons in

00:47:15,440 --> 00:47:19,440
here

00:47:16,319 --> 00:47:23,119
and we should also

00:47:19,440 --> 00:47:27,119
be able to let's also now try

00:47:23,119 --> 00:47:30,880
just to add a new repository from

00:47:27,119 --> 00:47:30,880
some other distributions

00:47:34,000 --> 00:47:37,280
yeah and now that that part works as

00:47:36,160 --> 00:47:40,400
well

00:47:37,280 --> 00:47:42,720
so as you can see i've added opensuse

00:47:40,400 --> 00:47:44,400
factory that systems and this is

00:47:42,720 --> 00:47:46,400
this this allows you to add new

00:47:44,400 --> 00:47:49,599
repositories from

00:47:46,400 --> 00:47:52,960
um from the predefined ones that exist

00:47:49,599 --> 00:47:54,880
on the um

00:47:52,960 --> 00:47:56,480
that are defined by the open build

00:47:54,880 --> 00:47:58,720
service and if you don't

00:47:56,480 --> 00:47:59,839
if if you don't like it you can just uh

00:47:58,720 --> 00:48:03,200
just remove it

00:47:59,839 --> 00:48:06,720
and it will eventually disappear so also

00:48:03,200 --> 00:48:10,400
other ones can just start

00:48:06,720 --> 00:48:13,119
fragging them and then they're gone so

00:48:10,400 --> 00:48:13,520
okay so this is this is all nice this is

00:48:13,119 --> 00:48:16,960
all

00:48:13,520 --> 00:48:18,079
all server-side and uh what what we now

00:48:16,960 --> 00:48:21,200
can do as well

00:48:18,079 --> 00:48:25,359
is um is to check

00:48:21,200 --> 00:48:28,480
out uh to check out this package

00:48:25,359 --> 00:48:32,400
and there's a button and i um

00:48:28,480 --> 00:48:35,040
okay so this is um what you currently

00:48:32,400 --> 00:48:38,880
can't see is unfortunately because i'm

00:48:35,040 --> 00:48:38,880
just sharing the vs code window

00:48:40,240 --> 00:48:42,400
so

00:48:46,160 --> 00:48:49,280
okay there's going to be a down time in

00:48:47,839 --> 00:48:52,480
a few minutes

00:48:49,280 --> 00:48:52,960
i see in the chat and uh yeah we're then

00:48:52,480 --> 00:48:56,480
also

00:48:52,960 --> 00:48:58,720
close to the one hour mark uh so

00:48:56,480 --> 00:49:00,240
what you unfortunately currently can't

00:48:58,720 --> 00:49:03,599
see is there's a file

00:49:00,240 --> 00:49:06,640
picker popped up

00:49:03,599 --> 00:49:09,520
that allows me to specify a directory

00:49:06,640 --> 00:49:11,119
where i uh what i want to check it out

00:49:09,520 --> 00:49:17,760
into so i've just

00:49:11,119 --> 00:49:20,880
selected one

00:49:17,760 --> 00:49:23,920
and it checks it out

00:49:20,880 --> 00:49:26,880
and asks me if i want to open it so

00:49:23,920 --> 00:49:28,800
i'm just going to click yes in this case

00:49:26,880 --> 00:49:32,800
we'll open it

00:49:28,800 --> 00:49:36,240
and now what i have here is

00:49:32,800 --> 00:49:38,640
this all still looks the same

00:49:36,240 --> 00:49:39,920
but this is actually a local file so if

00:49:38,640 --> 00:49:43,440
i

00:49:39,920 --> 00:49:46,400
do this it's it's actually

00:49:43,440 --> 00:49:46,960
i can actually modify this and this is

00:49:46,400 --> 00:49:51,359
uh

00:49:46,960 --> 00:49:52,240
so as you can so this is actually a file

00:49:51,359 --> 00:49:55,520
on my

00:49:52,240 --> 00:49:59,119
on in slash tmp

00:49:55,520 --> 00:50:01,440
so let's do something in here

00:49:59,119 --> 00:50:01,440
um

00:50:03,040 --> 00:50:07,680
just something really really simple and

00:50:05,440 --> 00:50:11,599
as you can see

00:50:07,680 --> 00:50:14,880
this so we've we've integrated

00:50:11,599 --> 00:50:17,359
this we've integrated the

00:50:14,880 --> 00:50:19,119
the build service into the version

00:50:17,359 --> 00:50:22,079
control so you can

00:50:19,119 --> 00:50:23,280
you can now use this fringe indicator

00:50:22,079 --> 00:50:27,839
you can see your div

00:50:23,280 --> 00:50:27,839
in here um

00:50:28,640 --> 00:50:35,520
save this you can do do the stuff like

00:50:31,920 --> 00:50:35,520
reverting the changes

00:50:36,480 --> 00:50:45,359
works also with editions

00:50:41,520 --> 00:50:47,839
and this also shows up in here in the

00:50:45,359 --> 00:50:49,520
source control so if you're familiar

00:50:47,839 --> 00:50:52,839
with visual studio code

00:50:49,520 --> 00:50:56,319
you'll see the source control in here

00:50:52,839 --> 00:50:58,319
that so all your all your files will

00:50:56,319 --> 00:51:02,559
show up in the source control

00:50:58,319 --> 00:51:05,839
um one thing that's a bit unfortunate

00:51:02,559 --> 00:51:08,240
is um with the

00:51:05,839 --> 00:51:09,440
with the source con so with the source

00:51:08,240 --> 00:51:11,839
control i think

00:51:09,440 --> 00:51:13,440
the idea behind visual studio code is

00:51:11,839 --> 00:51:16,160
that you only see

00:51:13,440 --> 00:51:17,599
really the modified files in this view

00:51:16,160 --> 00:51:20,880
because now it says there's

00:51:17,599 --> 00:51:23,119
three pending changes but

00:51:20,880 --> 00:51:24,880
we we've kind of opted to also display

00:51:23,119 --> 00:51:26,559
all your existing files since most

00:51:24,880 --> 00:51:29,680
packages actually don't have

00:51:26,559 --> 00:51:33,440
that many files and what i've

00:51:29,680 --> 00:51:34,839
at least in for my use case i frequently

00:51:33,440 --> 00:51:38,240
want to delete

00:51:34,839 --> 00:51:40,559
files and here with

00:51:38,240 --> 00:51:42,240
in this view i can simply click the

00:51:40,559 --> 00:51:46,480
remove this file

00:51:42,240 --> 00:51:46,480
button for instance boop

00:51:46,960 --> 00:51:54,960
and now it's

00:51:50,000 --> 00:51:58,400
also handled by the source control so

00:51:54,960 --> 00:52:01,359
i can also simply simply revert it

00:51:58,400 --> 00:52:03,599
and it's it comes back so this should be

00:52:01,359 --> 00:52:06,640
this should be more or less integrated

00:52:03,599 --> 00:52:09,040
with the uh with this

00:52:06,640 --> 00:52:09,760
with the vs code source control as much

00:52:09,040 --> 00:52:12,800
as

00:52:09,760 --> 00:52:15,119
roughly as you like it

00:52:12,800 --> 00:52:15,119
and

00:52:17,440 --> 00:52:20,960
yeah so what you can what you can also

00:52:20,559 --> 00:52:24,400
do

00:52:20,960 --> 00:52:27,520
is you can actually build your package

00:52:24,400 --> 00:52:29,599
so in case you want to uh so

00:52:27,520 --> 00:52:32,559
visual studio code has these so-called

00:52:29,599 --> 00:52:34,400
tasks so if you go open the commands and

00:52:32,559 --> 00:52:37,280
say

00:52:34,400 --> 00:52:37,280
run task

00:52:37,440 --> 00:52:44,880
you'll see it will give you a few

00:52:41,440 --> 00:52:46,559
tasks that get contributed and

00:52:44,880 --> 00:52:48,400
in this case you want to look for the

00:52:46,559 --> 00:52:51,040
osc task

00:52:48,400 --> 00:52:52,880
and you'll get a selection so

00:52:51,040 --> 00:52:56,160
essentially you can build

00:52:52,880 --> 00:52:57,920
uh you can run osc build for every repo

00:52:56,160 --> 00:52:59,040
and every architecture combination

00:52:57,920 --> 00:53:04,000
that's out there

00:52:59,040 --> 00:53:07,040
so i'd say open suse factory x86

00:53:04,000 --> 00:53:09,680
um say

00:53:07,040 --> 00:53:10,880
say just without scanning for for the

00:53:09,680 --> 00:53:13,520
output

00:53:10,880 --> 00:53:15,839
and then it will run osc build inside

00:53:13,520 --> 00:53:15,839
here

00:53:17,280 --> 00:53:21,119
ask me for my root password

00:53:23,200 --> 00:53:32,079
and now i will build it should

00:53:26,880 --> 00:53:34,480
take a bit and in the meantime we can

00:53:32,079 --> 00:53:34,480
simply

00:53:36,160 --> 00:53:43,839
we do a

00:53:53,920 --> 00:53:59,680
so i've now made a really

00:53:57,280 --> 00:54:00,640
super pointless change but just to be

00:53:59,680 --> 00:54:03,680
able to do

00:54:00,640 --> 00:54:04,000
to do something so you can now see we

00:54:03,680 --> 00:54:07,599
got

00:54:04,000 --> 00:54:10,960
the uh the spec file showed up

00:54:07,599 --> 00:54:12,559
as changed and if i go into the source

00:54:10,960 --> 00:54:15,920
control and click

00:54:12,559 --> 00:54:18,240
here on on the file it will open a diff

00:54:15,920 --> 00:54:18,240
view

00:54:21,520 --> 00:54:24,880
and you can see now my my build actually

00:54:23,599 --> 00:54:29,119
finished in the meantime

00:54:24,880 --> 00:54:29,119
so this should still build

00:54:30,319 --> 00:54:35,440
and now i'll say okay cool so let's

00:54:36,839 --> 00:54:40,319
um

00:54:38,079 --> 00:54:40,319
um

00:54:42,319 --> 00:54:45,760
and commit the changes and what i can do

00:54:45,200 --> 00:54:48,960
is

00:54:45,760 --> 00:54:50,960
um so there's two options in here one is

00:54:48,960 --> 00:54:51,680
add an entry to the change log so what

00:54:50,960 --> 00:54:55,040
this does

00:54:51,680 --> 00:54:55,760
is it writes the dot changes file which

00:54:55,040 --> 00:54:58,880
is

00:54:55,760 --> 00:55:04,240
you which is customary to do on

00:54:58,880 --> 00:55:04,240
on the on the opensuse side of things

00:55:05,440 --> 00:55:09,520
and as you can see the changes file now

00:55:08,000 --> 00:55:13,920
shows up as a

00:55:09,520 --> 00:55:16,640
um so there's a new entry from

00:55:13,920 --> 00:55:16,640
just now

00:55:18,000 --> 00:55:21,680
and you can see there's now those two

00:55:19,760 --> 00:55:34,400
changed files and now we can just

00:55:21,680 --> 00:55:38,079
commit this

00:55:34,400 --> 00:55:39,280
boom and there's also a rather hidden

00:55:38,079 --> 00:55:41,440
view in here

00:55:39,280 --> 00:55:42,559
that shows you the comments of this

00:55:41,440 --> 00:55:46,000
files

00:55:42,559 --> 00:55:49,119
of this of this package so if you

00:55:46,000 --> 00:55:49,680
if you click on them it shows you it's

00:55:49,119 --> 00:55:53,359
not

00:55:49,680 --> 00:55:55,359
super useful yet but it shows you

00:55:53,359 --> 00:55:56,799
uh essentially the revisions that were

00:55:55,359 --> 00:56:00,000
made who made them

00:55:56,799 --> 00:56:02,400
when they were made the md5 sum

00:56:00,000 --> 00:56:05,280
and the comment message so this is this

00:56:02,400 --> 00:56:09,280
is roughly what you'd have if you run

00:56:05,280 --> 00:56:11,599
uh osc log so if i open the terminal

00:56:09,280 --> 00:56:11,599
here

00:56:12,240 --> 00:56:17,200
i can so this is also a this is a valid

00:56:15,920 --> 00:56:21,119
osc package

00:56:17,200 --> 00:56:22,400
so osc should still should still be able

00:56:21,119 --> 00:56:25,359
to work with this

00:56:22,400 --> 00:56:27,440
at least i try to test test for that as

00:56:25,359 --> 00:56:30,960
well

00:56:27,440 --> 00:56:34,559
and if we take a look at osc log

00:56:30,960 --> 00:56:35,440
and you can see the the view is

00:56:34,559 --> 00:56:38,799
essentially

00:56:35,440 --> 00:56:38,799
comparable to this one

00:56:39,680 --> 00:56:42,799
good and

00:56:43,440 --> 00:56:47,359
i think the last thing that i'd like to

00:56:46,720 --> 00:56:51,599
show you

00:56:47,359 --> 00:56:54,720
is now we got um now we got the

00:56:51,599 --> 00:56:58,079
our our tiny change uh

00:56:54,720 --> 00:57:01,839
and if we go back to our bookmarked view

00:56:58,079 --> 00:57:06,400
in here i can just

00:57:01,839 --> 00:57:09,280
update it and

00:57:06,400 --> 00:57:09,280
it should

00:57:10,839 --> 00:57:15,520
eventually show up in here as well

00:57:17,440 --> 00:57:27,839
i was hoping it would but it looks like

00:57:34,799 --> 00:57:41,280
i'm sorry it looks like it's uh it's

00:57:37,440 --> 00:57:46,079
currently taking a while to sync the

00:57:41,280 --> 00:57:46,079
to sync the changes back down again

00:57:46,640 --> 00:57:52,000
so occasionally occasionally it takes a

00:57:50,400 --> 00:57:55,280
while

00:57:52,000 --> 00:57:58,559
but what we can also do is to

00:57:55,280 --> 00:58:02,000
submit this package back again so if you

00:57:58,559 --> 00:58:05,040
click if you do a right click on this

00:58:02,000 --> 00:58:08,160
oh i see that's also not visible

00:58:05,040 --> 00:58:10,000
screen sharing so if you do a right

00:58:08,160 --> 00:58:12,319
click on a package

00:58:10,000 --> 00:58:13,760
there's two options one is branch and

00:58:12,319 --> 00:58:18,480
the other one is submit

00:58:13,760 --> 00:58:21,760
and if i go to submit um

00:58:18,480 --> 00:58:23,760
if i just disable my webcam you'll see

00:58:21,760 --> 00:58:26,559
it created a new request

00:58:23,760 --> 00:58:26,960
so and this is a clickable link so if i

00:58:26,559 --> 00:58:30,000
click

00:58:26,960 --> 00:58:33,280
that um

00:58:30,000 --> 00:58:35,920
it will it will i can just open that

00:58:33,280 --> 00:58:36,880
in my in my web browser and in this case

00:58:35,920 --> 00:58:40,319
i then

00:58:36,880 --> 00:58:43,440
reject this uh reject this request

00:58:40,319 --> 00:58:45,599
because it's well garbage but

00:58:43,440 --> 00:58:48,559
that's besides so that's just for for

00:58:45,599 --> 00:58:51,920
demonstration purposes

00:58:48,559 --> 00:58:52,960
uh and unless i have forgotten something

00:58:51,920 --> 00:58:56,160
that should be

00:58:52,960 --> 00:59:00,000
roughly uh what the extension

00:58:56,160 --> 00:59:03,200
can currently do so

00:59:00,000 --> 00:59:05,839
i hope this is uh this gave you a rough

00:59:03,200 --> 00:59:05,839
overview

00:59:06,000 --> 00:59:09,040
since i'm already nearly 10 minutes over

00:59:08,559 --> 00:59:11,440
time

00:59:09,040 --> 00:59:12,559
i don't think i should be showing you

00:59:11,440 --> 00:59:15,680
how to

00:59:12,559 --> 00:59:18,400
develop stuff but i'm very much

00:59:15,680 --> 00:59:20,480
open to any any questions any

00:59:18,400 --> 00:59:24,079
suggestions ideas

00:59:20,480 --> 00:59:27,040
if you so if you want to give this

00:59:24,079 --> 00:59:28,079
give this thing a try go to the visual

00:59:27,040 --> 00:59:30,079
studio code

00:59:28,079 --> 00:59:33,520
marketplace search for the open build

00:59:30,079 --> 00:59:36,400
service connector

00:59:33,520 --> 00:59:36,400
let me just

00:59:45,520 --> 00:59:47,839
so

00:59:49,520 --> 00:59:52,700
okay so someone is asking whether you

00:59:51,520 --> 00:59:54,280
can get this through

00:59:52,700 --> 00:59:57,040
[Music]

00:59:54,280 --> 01:00:01,839
openvsx.org i

00:59:57,040 --> 01:00:01,839
don't know i have never heard of that so

01:00:03,119 --> 01:00:09,119
i don't know i'll have to

01:00:12,319 --> 01:00:29,839
i'll take a look at that if it's uh if

01:00:15,440 --> 01:00:29,839
it's possible to get it from there

01:00:31,040 --> 01:00:37,359
just yeah it doesn't

01:00:34,319 --> 01:00:40,240
look to be available there

01:00:37,359 --> 01:00:42,319
if it's if it's easily possible to

01:00:40,240 --> 01:00:44,559
submit it i'll i'll submit it there as

01:00:42,319 --> 01:00:44,559
well

01:00:54,839 --> 01:00:57,839
so

01:01:10,400 --> 01:01:14,880
okay so as i said uh you can search for

01:01:13,839 --> 01:01:16,880
this on

01:01:14,880 --> 01:01:19,440
the open build service connector there's

01:01:16,880 --> 01:01:22,960
also links to github so you can find

01:01:19,440 --> 01:01:24,319
the actual code itself is on the suse

01:01:22,960 --> 01:01:27,520
organization

01:01:24,319 --> 01:01:31,119
open minus build minus service

01:01:27,520 --> 01:01:33,920
minus connector and there's also

01:01:31,119 --> 01:01:34,240
so that's for the actual extension part

01:01:33,920 --> 01:01:37,280
and

01:01:34,240 --> 01:01:38,720
for the fro for the backend library so

01:01:37,280 --> 01:01:42,240
it's kind of split in

01:01:38,720 --> 01:01:45,760
split two ways we have the

01:01:42,240 --> 01:01:48,000
we have the back end library and the uh

01:01:45,760 --> 01:01:49,280
which is communicates with the open

01:01:48,000 --> 01:01:52,160
build service api

01:01:49,280 --> 01:01:53,599
so in case you want to have a have an

01:01:52,160 --> 01:01:55,440
api wrapper for

01:01:53,599 --> 01:01:57,280
the open build service api that's

01:01:55,440 --> 01:02:00,559
written in typescript

01:01:57,280 --> 01:02:03,599
that's called open build service api

01:02:00,559 --> 01:02:07,839
all separated with with dashes

01:02:03,599 --> 01:02:07,839
or minuses

01:03:09,200 --> 01:03:12,400
so since there's

01:03:12,720 --> 01:03:17,200
no one appears to be wanting to ask

01:03:15,680 --> 01:03:21,680
anything

01:03:17,200 --> 01:03:25,119
so you did good

01:03:21,680 --> 01:03:27,680
thanks uh

01:03:25,119 --> 01:03:28,839
i i guess well i do i do kind of have a

01:03:27,680 --> 01:03:31,680
question

01:03:28,839 --> 01:03:34,960
um

01:03:31,680 --> 01:03:37,839
it's not kind of it is a question um

01:03:34,960 --> 01:03:38,319
when you were working on it what was the

01:03:37,839 --> 01:03:40,799
most

01:03:38,319 --> 01:03:44,559
frustrating aspect and what was the most

01:03:40,799 --> 01:03:46,799
interesting aspect

01:03:44,559 --> 01:03:46,799
uh

01:03:48,160 --> 01:03:56,400
well the the most frustrating aspect was

01:03:53,200 --> 01:03:59,760
to to be frankly honest was sometimes

01:03:56,400 --> 01:04:03,839
obs is just dense so

01:03:59,760 --> 01:04:07,839
that was that was relatively frustrating

01:04:03,839 --> 01:04:11,680
and also getting the um

01:04:07,839 --> 01:04:15,359
and also getting the tests to actually

01:04:11,680 --> 01:04:18,960
work was uh so it was for instance

01:04:15,359 --> 01:04:22,160
extremely frustrating to get some to get

01:04:18,960 --> 01:04:26,160
simple stuff like code coverage out

01:04:22,160 --> 01:04:28,160
of uh out of the unit tests the uh

01:04:26,160 --> 01:04:30,240
that that has been also extremely

01:04:28,160 --> 01:04:33,839
frustrating to pull off

01:04:30,240 --> 01:04:38,240
and uh the

01:04:33,839 --> 01:04:40,640
well and

01:04:38,240 --> 01:04:42,480
how did you formulated the other thing

01:04:40,640 --> 01:04:44,720
rewarding or something like that

01:04:42,480 --> 01:04:45,839
rewarding works or interesting or the

01:04:44,720 --> 01:04:47,760
most fun like

01:04:45,839 --> 01:04:49,359
what was the most positive part of the

01:04:47,760 --> 01:04:52,400
experience

01:04:49,359 --> 01:04:56,319
so i'd say is uh ev every time

01:04:52,400 --> 01:04:59,119
uh every time something new uh

01:04:56,319 --> 01:05:00,000
i i managed to implement something new

01:04:59,119 --> 01:05:02,960
that was

01:05:00,000 --> 01:05:05,680
uh so for instance getting the getting

01:05:02,960 --> 01:05:08,079
the version control in there that was

01:05:05,680 --> 01:05:09,200
uh that was really rewarding since that

01:05:08,079 --> 01:05:12,240
part isn't

01:05:09,200 --> 01:05:15,680
too well documented in the api and

01:05:12,240 --> 01:05:18,079
uh getting that to work was uh was

01:05:15,680 --> 01:05:19,680
pretty rewarding since it was eventually

01:05:18,079 --> 01:05:22,160
relatively simple

01:05:19,680 --> 01:05:22,799
but uh getting all the bits and pieces

01:05:22,160 --> 01:05:25,760
together

01:05:22,799 --> 01:05:27,599
took a bunch of testing and figuring

01:05:25,760 --> 01:05:31,359
stuff out

01:05:27,599 --> 01:05:37,839
yes gustavo you want to say something

01:05:31,359 --> 01:05:37,839
please go ahead

01:05:39,839 --> 01:05:46,079
and you're muted just in case you're

01:05:42,880 --> 01:05:46,079
already saying something

01:05:46,400 --> 01:05:50,240
no no sorry i just clicked the wrong

01:05:48,960 --> 01:05:51,839
thing

01:05:50,240 --> 01:05:54,319
just say thank you it's a great

01:05:51,839 --> 01:05:57,039
presentation really enjoyed that

01:05:54,319 --> 01:05:57,039
glad you liked it

01:06:02,160 --> 01:06:06,240
you have to say this is probably the

01:06:03,760 --> 01:06:08,720
most interesting obs integration i've

01:06:06,240 --> 01:06:08,720
ever seen

01:06:09,920 --> 01:06:13,599
i'm honestly a little surprised that it

01:06:12,000 --> 01:06:15,920
worked because

01:06:13,599 --> 01:06:18,079
the obs version control doesn't exactly

01:06:15,920 --> 01:06:21,520
um map cleanly to what everything

01:06:18,079 --> 01:06:21,520
expects the version controls to do

01:06:21,920 --> 01:06:29,200
yeah uh i

01:06:25,200 --> 01:06:32,000
have to agree with that but

01:06:29,200 --> 01:06:33,839
on on the other hand the version control

01:06:32,000 --> 01:06:37,440
that

01:06:33,839 --> 01:06:40,480
that vs code expects is

01:06:37,440 --> 01:06:43,920
it's pretty flexible so

01:06:40,480 --> 01:06:46,640
vs code hasn't doesn't really have

01:06:43,920 --> 01:06:48,400
uh so the the the version control

01:06:46,640 --> 01:06:51,520
integration that vs code

01:06:48,400 --> 01:06:55,520
offers that's actually

01:06:51,520 --> 01:06:57,359
um it's pretty flexible so you can do a

01:06:55,520 --> 01:06:58,160
lot of stuff with that for it for

01:06:57,359 --> 01:07:01,359
instance

01:06:58,160 --> 01:07:04,240
there's an example extension uh

01:07:01,359 --> 01:07:05,200
from microsoft themselves that

01:07:04,240 --> 01:07:08,000
integrates

01:07:05,200 --> 01:07:09,920
the uh that integrates the uh the

01:07:08,000 --> 01:07:12,839
built-in version control with

01:07:09,920 --> 01:07:14,160
js fiddle which also has some

01:07:12,839 --> 01:07:17,520
rudimentary

01:07:14,160 --> 01:07:20,079
version control built in so

01:07:17,520 --> 01:07:21,920
that's that part actually works

01:07:20,079 --> 01:07:25,599
relatively well and since

01:07:21,920 --> 01:07:28,799
uh since vs code has no real um

01:07:25,599 --> 01:07:31,119
history view as you'd expected there's

01:07:28,799 --> 01:07:35,680
also not really something

01:07:31,119 --> 01:07:37,119
that obs uh weirdnesses in terms of

01:07:35,680 --> 01:07:41,119
history handling could

01:07:37,119 --> 01:07:44,160
really break there terribly so

01:07:41,119 --> 01:07:47,599
that part has been actually relatively

01:07:44,160 --> 01:07:47,599
trouble free so far

01:07:54,720 --> 01:08:00,240
that's pretty awesome uh

01:07:58,240 --> 01:08:01,760
so with all that you've done so far what

01:08:00,240 --> 01:08:02,559
would be the next thing you'd want to

01:08:01,760 --> 01:08:05,839
tackle

01:08:02,559 --> 01:08:09,039
um for this um so

01:08:05,839 --> 01:08:12,480
we are um the

01:08:09,039 --> 01:08:16,400
current plan is

01:08:12,480 --> 01:08:17,040
um so there's there's still a bunch of

01:08:16,400 --> 01:08:20,480
stuff

01:08:17,040 --> 01:08:23,679
uh stuff that's not really

01:08:20,480 --> 01:08:26,799
working so for instance uh

01:08:23,679 --> 01:08:29,520
think it's what's

01:08:26,799 --> 01:08:31,199
not really very well working is if you

01:08:29,520 --> 01:08:32,319
if you have a locally checked out

01:08:31,199 --> 01:08:36,239
project

01:08:32,319 --> 01:08:40,319
uh updating that via the extension

01:08:36,239 --> 01:08:40,640
is not that's not possible so that would

01:08:40,319 --> 01:08:42,880
be

01:08:40,640 --> 01:08:43,920
something that i'd uh that i'd like to

01:08:42,880 --> 01:08:46,960
add

01:08:43,920 --> 01:08:50,159
uh showing build results uh

01:08:46,960 --> 01:08:53,359
would be would be nice uh but we are

01:08:50,159 --> 01:08:56,799
also currently looking into

01:08:53,359 --> 01:08:57,520
uh looking into creating something that

01:08:56,799 --> 01:09:01,600
will

01:08:57,520 --> 01:09:05,040
uh to create an extension that would be

01:09:01,600 --> 01:09:08,239
uh essentially this thing but for

01:09:05,040 --> 01:09:09,759
for our container application delivery

01:09:08,239 --> 01:09:13,279
platforms

01:09:09,759 --> 01:09:17,040
so um i'd say the

01:09:13,279 --> 01:09:20,159
the next steps for this are mostly

01:09:17,040 --> 01:09:24,560
also waiting for for user input

01:09:20,159 --> 01:09:27,120
so it's uh i want to present this in if

01:09:24,560 --> 01:09:28,000
also in a few places and hopefully get

01:09:27,120 --> 01:09:30,159
some

01:09:28,000 --> 01:09:31,759
get some people and get more people than

01:09:30,159 --> 01:09:35,359
currently to use it

01:09:31,759 --> 01:09:37,920
and to say what works what doesn't and

01:09:35,359 --> 01:09:38,640
what they'd like to see since so far

01:09:37,920 --> 01:09:42,000
it's been

01:09:38,640 --> 01:09:45,440
mostly modeled after my workflow

01:09:42,000 --> 01:09:47,520
and that's not really representative so

01:09:45,440 --> 01:09:48,719
in case you want to use something like

01:09:47,520 --> 01:09:51,600
that but would

01:09:48,719 --> 01:09:54,560
like it to be able to do something open

01:09:51,600 --> 01:09:54,560
an issue on github

01:10:00,840 --> 01:10:03,920
please

01:10:02,080 --> 01:10:05,679
i mean thank you for doing this this is

01:10:03,920 --> 01:10:09,440
great congrats

01:10:05,679 --> 01:10:17,840
and uh keep up the great work

01:10:09,440 --> 01:10:17,840
thanks glad you liked it so

01:10:22,159 --> 01:10:26,400
unless there's uh any further questions

01:10:25,520 --> 01:10:28,880
as i said

01:10:26,400 --> 01:10:31,760
if you like to give this a try you can

01:10:28,880 --> 01:10:34,560
find it in the vs code store

01:10:31,760 --> 01:10:35,840
there should be links to the to the

01:10:34,560 --> 01:10:38,800
github pages so

01:10:35,840 --> 01:10:39,280
if there's something you'd like to see

01:10:38,800 --> 01:10:43,040
just

01:10:39,280 --> 01:10:46,000
open an issue and or if you

01:10:43,040 --> 01:10:46,000
something breaks

01:10:46,800 --> 01:10:52,239
you can find that through through github

01:10:49,920 --> 01:10:52,960
so thanks you all for for attending

01:10:52,239 --> 01:10:57,520
thanks for

01:10:52,960 --> 01:11:00,480
sticking uh sticking here for so long

01:10:57,520 --> 01:11:03,679
and hope you give it a try if you are if

01:11:00,480 --> 01:11:07,520
this is something you could find useful

01:11:03,679 --> 01:11:13,840
and with that thanks and i'll

01:11:07,520 --> 01:11:13,840
sign off

01:11:52,400 --> 01:11:54,480

YouTube URL: https://www.youtube.com/watch?v=yv-OlcTGLNg


