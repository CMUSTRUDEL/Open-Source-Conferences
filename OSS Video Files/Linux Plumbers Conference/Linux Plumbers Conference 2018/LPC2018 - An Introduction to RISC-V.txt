Title: LPC2018 - An Introduction to RISC-V
Publication date: 2018-11-28
Playlist: Linux Plumbers Conference 2018
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/255/
speaker:  Palmer Dabbelt (SiFive)
Captions: 
	00:00:05,580 --> 00:00:10,620
so I'm Palmer I'm here to talk about

00:00:07,740 --> 00:00:12,270
risk five and we're gonna risk five for

00:00:10,620 --> 00:00:14,040
awhile I maintain a bunch of software

00:00:12,270 --> 00:00:16,170
stuff Biron the softer team at SCI five

00:00:14,040 --> 00:00:18,210
and I'm the vice chair of the risk five

00:00:16,170 --> 00:00:20,430
software working group and thorough

00:00:18,210 --> 00:00:23,279
scribe foundation involved in everything

00:00:20,430 --> 00:00:25,320
so it's a introduction to risk live so

00:00:23,279 --> 00:00:27,329
why is this important why doesn't

00:00:25,320 --> 00:00:29,099
instruction set and is a instructions

00:00:27,329 --> 00:00:30,450
architecture matter all right so if you

00:00:29,099 --> 00:00:32,430
look kind of around the computing

00:00:30,450 --> 00:00:35,130
industry you look and see well Intel

00:00:32,430 --> 00:00:36,480
can't sell into the mobile the mobile

00:00:35,130 --> 00:00:38,180
market are largely because you know

00:00:36,480 --> 00:00:40,379
that's dominated by RM is a chips

00:00:38,180 --> 00:00:42,269
similar you know arm has trouble selling

00:00:40,379 --> 00:00:43,289
into the server market right again

00:00:42,269 --> 00:00:45,179
largely because that's not me to buy

00:00:43,289 --> 00:00:47,280
Intel I say chips right and still you

00:00:45,179 --> 00:00:50,370
look at your first kind of is a that was

00:00:47,280 --> 00:00:51,899
largely successful IBM 360 been going

00:00:50,370 --> 00:00:53,429
for 50 or so years and they really

00:00:51,899 --> 00:00:54,870
dominated the mainframe market and it's

00:00:53,429 --> 00:00:56,789
all about software compatibility so I

00:00:54,870 --> 00:00:57,929
say is the most important interface in a

00:00:56,789 --> 00:00:58,859
computing system it's the interface

00:00:57,929 --> 00:00:59,999
between the software and the hardware

00:00:58,859 --> 00:01:01,260
all right so it's what all your

00:00:59,999 --> 00:01:03,420
instructions do that sort of stuff

00:01:01,260 --> 00:01:04,890
change me I say is a lot of work I

00:01:03,420 --> 00:01:07,380
requires redoing the whole software

00:01:04,890 --> 00:01:10,560
stack as I'm sure many of you have tried

00:01:07,380 --> 00:01:12,180
to do before so and we look around the

00:01:10,560 --> 00:01:14,280
kind of computing world then you find

00:01:12,180 --> 00:01:15,960
that open software open standards work

00:01:14,280 --> 00:01:18,150
pretty well right they work great

00:01:15,960 --> 00:01:19,680
networking you know internet took over

00:01:18,150 --> 00:01:21,300
the world the internet protocols and

00:01:19,680 --> 00:01:22,770
whatnot I mean the OS land we have a

00:01:21,300 --> 00:01:24,000
POSIX which is not the greatest of

00:01:22,770 --> 00:01:26,190
standards but there are multiple

00:01:24,000 --> 00:01:27,990
implementations of POSIX like things and

00:01:26,190 --> 00:01:29,700
you can be reasonably compatible between

00:01:27,990 --> 00:01:31,890
them right see use works pretty well

00:01:29,700 --> 00:01:33,870
there are C compilers where you can take

00:01:31,890 --> 00:01:35,160
the same C code and meet a spec can

00:01:33,870 --> 00:01:36,690
actually get the right answer out both

00:01:35,160 --> 00:01:38,700
free and proprietary implementations

00:01:36,690 --> 00:01:40,980
database of stuff sequel worked really

00:01:38,700 --> 00:01:42,630
well for databases graphics with OpenGL

00:01:40,980 --> 00:01:43,830
there are OpenGL plantations where

00:01:42,630 --> 00:01:45,600
they're compatible between multiple

00:01:43,830 --> 00:01:48,450
vendors but then if you look at an ISA

00:01:45,600 --> 00:01:51,030
there has really been no successful free

00:01:48,450 --> 00:01:53,910
and open standard is a there's been some

00:01:51,030 --> 00:01:56,250
attempts SPARC proposed version of there

00:01:53,910 --> 00:01:57,420
is a as an open standard but it didn't

00:01:56,250 --> 00:01:58,800
work out because it was kind of crusty

00:01:57,420 --> 00:02:00,270
by the time it actually made it to

00:01:58,800 --> 00:02:01,830
become an open standard all right so

00:02:00,270 --> 00:02:03,600
your honor I'm looking you think gee you

00:02:01,830 --> 00:02:06,720
know there are no free and open and

00:02:03,600 --> 00:02:08,099
standardized essays right why and it's

00:02:06,720 --> 00:02:09,690
not really because the existing I say is

00:02:08,099 --> 00:02:11,700
are really good designs they've all just

00:02:09,690 --> 00:02:12,780
kind of come about and become popular in

00:02:11,700 --> 00:02:14,430
a particular market because they're

00:02:12,780 --> 00:02:15,870
necessary to get a job done well go a

00:02:14,430 --> 00:02:17,190
little bit more into that later

00:02:15,870 --> 00:02:19,140
so this is really what this bike was

00:02:17,190 --> 00:02:21,510
designed to do it is a high quality

00:02:19,140 --> 00:02:23,100
license and royalty free is a

00:02:21,510 --> 00:02:25,170
specification we designed it at UC

00:02:23,100 --> 00:02:27,120
Berkeley originally we designed it for

00:02:25,170 --> 00:02:28,800
our own uses academic research and it

00:02:27,120 --> 00:02:30,630
got popular people started asking

00:02:28,800 --> 00:02:33,209
questions about it so we spun off a

00:02:30,630 --> 00:02:35,580
non-profit foundation to maintain the is

00:02:33,209 --> 00:02:37,950
a the I say is designed to be suitable

00:02:35,580 --> 00:02:39,990
for all types of computing systems so

00:02:37,950 --> 00:02:42,540
kind of small microcontrollers all the

00:02:39,990 --> 00:02:44,190
way up to large supercomputers there are

00:02:42,540 --> 00:02:46,020
lots of cores for it their proprietary

00:02:44,190 --> 00:02:47,610
cores and their open-source cores we had

00:02:46,020 --> 00:02:48,720
sci-fi of maintain some open source

00:02:47,610 --> 00:02:51,450
cards may also sell some proprietary

00:02:48,720 --> 00:02:54,120
course it's had really rapid uptake in

00:02:51,450 --> 00:02:55,380
the last couple of years maybe two or

00:02:54,120 --> 00:02:58,470
three years since we really started

00:02:55,380 --> 00:02:59,670
treating this as a public thing it's

00:02:58,470 --> 00:03:00,900
grown rapidly we have hundreds of

00:02:59,670 --> 00:03:02,010
members and the risk by foundation and

00:03:00,900 --> 00:03:03,360
implementations all over the place a

00:03:02,010 --> 00:03:05,250
large software stack all that sort of

00:03:03,360 --> 00:03:06,989
stuff and like anything else that's kind

00:03:05,250 --> 00:03:09,209
of a work in progress so it's always

00:03:06,989 --> 00:03:11,130
growing if you're new to risk five these

00:03:09,209 --> 00:03:12,450
are my kind of couple slides people

00:03:11,130 --> 00:03:14,010
today know a little bit more about it

00:03:12,450 --> 00:03:14,910
then when I started giving these but we

00:03:14,010 --> 00:03:16,709
do have something called the risk five

00:03:14,910 --> 00:03:19,080
reader and this is sort of a cookbook

00:03:16,709 --> 00:03:20,550
introduction to risk five if you used to

00:03:19,080 --> 00:03:22,440
programming others say like bare metal

00:03:20,550 --> 00:03:24,060
microcontrollers that smell like risk

00:03:22,440 --> 00:03:25,920
machines or skive isn't really that

00:03:24,060 --> 00:03:27,420
different this books designed that you

00:03:25,920 --> 00:03:29,670
spawn up really fast and ER and Dave

00:03:27,420 --> 00:03:31,019
wrote it they sell it on the Amazon

00:03:29,670 --> 00:03:33,570
print on demand things and nobody really

00:03:31,019 --> 00:03:35,250
makes any money off it and I've heard

00:03:33,570 --> 00:03:40,769
it's a good book I haven't actually read

00:03:35,250 --> 00:03:43,260
it not the great greatest salesman we'll

00:03:40,769 --> 00:03:45,090
talk about the the origins of the risk

00:03:43,260 --> 00:03:46,950
five is a write a little bit of a kind

00:03:45,090 --> 00:03:49,200
of a history thing so I started at

00:03:46,950 --> 00:03:51,030
Berkeley in 2010

00:03:49,200 --> 00:03:52,560
Berkeley's computer architecture

00:03:51,030 --> 00:03:54,900
research group had done lots of designs

00:03:52,560 --> 00:03:57,269
on lots of old is is great they kind of

00:03:54,900 --> 00:04:00,480
invented the whole risk thing I done MIT

00:03:57,269 --> 00:04:01,920
spark designs some x86 designs and we're

00:04:00,480 --> 00:04:03,959
looking around and saying okay well what

00:04:01,920 --> 00:04:05,549
are we gonna do for our next research

00:04:03,959 --> 00:04:06,780
project at Berkeley right we're gonna go

00:04:05,549 --> 00:04:07,829
do a microarchitecture we're going to do

00:04:06,780 --> 00:04:09,360
some interesting computer architecture

00:04:07,829 --> 00:04:13,380
research so the obvious choices at the

00:04:09,360 --> 00:04:15,060
time are x86 and arm right so we'll go

00:04:13,380 --> 00:04:17,160
kind of shoot those down alright so if

00:04:15,060 --> 00:04:20,880
you look at x86 the first instruction in

00:04:17,160 --> 00:04:23,010
the Intel manual is aaaa which is ASCII

00:04:20,880 --> 00:04:25,110
adjust after addition all right which

00:04:23,010 --> 00:04:26,610
makes a lot of sense because it's for

00:04:25,110 --> 00:04:28,349
BCD and calculators right and that's

00:04:26,610 --> 00:04:29,940
what the ISA was designed for it just

00:04:28,349 --> 00:04:32,139
kind of works well enough so it takes an

00:04:29,940 --> 00:04:34,270
implicit source and destination register

00:04:32,139 --> 00:04:36,249
just kind of common in x86 land it does

00:04:34,270 --> 00:04:39,009
a bunch of weird complicated stuff to it

00:04:36,249 --> 00:04:41,110
they actually screwed this up in the 286

00:04:39,009 --> 00:04:42,310
so it wasn't compatible between the

00:04:41,110 --> 00:04:43,900
previous implementations but they just

00:04:42,310 --> 00:04:44,949
kind of ran with it anyway so makes a

00:04:43,900 --> 00:04:46,449
little less sense than it's supposed to

00:04:44,949 --> 00:04:49,960
and this is a single byte instruction

00:04:46,449 --> 00:04:52,749
you know so you've lost one 256 of your

00:04:49,960 --> 00:04:54,219
is a encoding space on BCD conversion

00:04:52,749 --> 00:04:56,289
which is not a particularly efficient

00:04:54,219 --> 00:04:58,270
use okay right but that's until

00:04:56,289 --> 00:04:59,319
everybody knows Intel's I say is quite

00:04:58,270 --> 00:05:00,340
complicated it's been around for a while

00:04:59,319 --> 00:05:01,270
it's um backward compatible for a

00:05:00,340 --> 00:05:03,219
million years all that kind of stuff so

00:05:01,270 --> 00:05:05,860
look at arm right which is our risk is

00:05:03,219 --> 00:05:07,330
eight so it should be simple right arm a

00:05:05,860 --> 00:05:08,080
core and risk machine right it's got

00:05:07,330 --> 00:05:09,430
risk in the name

00:05:08,080 --> 00:05:15,400
so there's instruction they're called

00:05:09,430 --> 00:05:17,319
ldm ia EQ right which is too too long to

00:05:15,400 --> 00:05:18,729
actually be a risk machine so you look

00:05:17,319 --> 00:05:20,199
at what it does right so it's load

00:05:18,729 --> 00:05:22,539
multiple and increment that address

00:05:20,199 --> 00:05:24,069
right so it's basically loading and

00:05:22,539 --> 00:05:26,110
saving multiple registers to the stack

00:05:24,069 --> 00:05:28,360
right or to the offset of any register

00:05:26,110 --> 00:05:31,089
right it can right up to seven registers

00:05:28,360 --> 00:05:32,979
and load from six memory locations in a

00:05:31,089 --> 00:05:35,259
single instruction it's conditional

00:05:32,979 --> 00:05:38,379
right so it only executes if a condition

00:05:35,259 --> 00:05:40,180
code is set it writes to the PC so it's

00:05:38,379 --> 00:05:41,409
a conditional branch because the PC is

00:05:40,180 --> 00:05:43,240
an addressable register in the arm

00:05:41,409 --> 00:05:44,770
instruction set so you can write to

00:05:43,240 --> 00:05:45,729
pretty much any instruction all right

00:05:44,770 --> 00:05:48,189
and then additionally you can change

00:05:45,729 --> 00:05:50,710
instruction sets because the thumb

00:05:48,189 --> 00:05:52,960
instruction set is delineated by the low

00:05:50,710 --> 00:05:54,759
bit of the PC right so this single

00:05:52,960 --> 00:05:57,189
instruction which is used commonly it's

00:05:54,759 --> 00:05:58,750
the idiom for pop the stack and return a

00:05:57,189 --> 00:06:01,599
function call it's a nice compact way

00:05:58,750 --> 00:06:03,490
text to encode that and therefore it has

00:06:01,599 --> 00:06:05,409
to be quite fast I can also do all sorts

00:06:03,490 --> 00:06:07,629
of wacky stuff which is kind of a

00:06:05,409 --> 00:06:09,789
nightmare for verifying your plantations

00:06:07,629 --> 00:06:12,520
and writing software for class or stuff

00:06:09,789 --> 00:06:13,839
so arm was kind of not an option for an

00:06:12,520 --> 00:06:16,659
academic project at least it's just way

00:06:13,839 --> 00:06:18,520
too complicated to implement yes our x86

00:06:16,659 --> 00:06:21,069
to complicated arm also to complicated

00:06:18,520 --> 00:06:23,169
at the time there was no 64 bit that was

00:06:21,069 --> 00:06:24,879
widely available and then both of the

00:06:23,169 --> 00:06:26,439
x86 Knauer had IP issues right you'll

00:06:24,879 --> 00:06:27,639
get sued if you try to sell something

00:06:26,439 --> 00:06:29,439
without getting a license for them which

00:06:27,639 --> 00:06:32,740
is a bummer not a big deal for academic

00:06:29,439 --> 00:06:34,870
stuff but no fun in the real world so in

00:06:32,740 --> 00:06:36,669
summer of 2010 we started three month

00:06:34,870 --> 00:06:38,740
projects this is before slightly before

00:06:36,669 --> 00:06:40,899
I got there the principal signer is

00:06:38,740 --> 00:06:42,879
Andrew Dave young something kirsta

00:06:40,899 --> 00:06:44,589
started the I say okay we'll take the

00:06:42,879 --> 00:06:45,330
summer off and we'll do an ISA so we can

00:06:44,589 --> 00:06:47,849
go you

00:06:45,330 --> 00:06:50,939
this four-hour microprocessor research

00:06:47,849 --> 00:06:53,009
and so it took four years and we

00:06:50,939 --> 00:06:56,580
actually got the first is a spec

00:06:53,009 --> 00:06:58,650
released so that's when we decided to

00:06:56,580 --> 00:07:00,060
freeze the ice ice pack version 2.0

00:06:58,650 --> 00:07:01,680
which is the one that's going to be

00:07:00,060 --> 00:07:03,840
compatible forever and this is one of

00:07:01,680 --> 00:07:05,819
the important parts of the RISC 5 I say

00:07:03,840 --> 00:07:08,039
is that once the spec is released it's a

00:07:05,819 --> 00:07:09,599
proper standard from the foundation and

00:07:08,039 --> 00:07:12,539
it never changes its compatible forever

00:07:09,599 --> 00:07:13,919
we can't change it and this we think is

00:07:12,539 --> 00:07:16,169
important because software compatibility

00:07:13,919 --> 00:07:18,330
will last forever all right so we think

00:07:16,169 --> 00:07:19,919
the risk oh I say is a good is a but

00:07:18,330 --> 00:07:21,509
everybody thinks there is a is a good is

00:07:19,919 --> 00:07:23,129
a so we have a couple of metrics that we

00:07:21,509 --> 00:07:25,440
like to use so the one is static code

00:07:23,129 --> 00:07:26,550
size static code size is really

00:07:25,440 --> 00:07:28,379
important for the embedded market

00:07:26,550 --> 00:07:30,090
because if you want to fit your code in

00:07:28,379 --> 00:07:31,349
flash then that's basically the price of

00:07:30,090 --> 00:07:33,110
your processor alright so if you look

00:07:31,349 --> 00:07:35,849
across both 32-bit and 64-bit

00:07:33,110 --> 00:07:37,259
architectures risk v with our compressed

00:07:35,849 --> 00:07:39,719
instruction set which is a thumb style

00:07:37,259 --> 00:07:42,300
thing beats everybody at least on some

00:07:39,719 --> 00:07:43,529
benchmarks and then in the other metric

00:07:42,300 --> 00:07:45,150
we like to use it was called dynamics

00:07:43,529 --> 00:07:46,349
byte bytes fetched and this is what we

00:07:45,150 --> 00:07:48,210
think is important for higher end of

00:07:46,349 --> 00:07:49,250
limitations because they're you know

00:07:48,210 --> 00:07:51,440
you're going to end up limited by

00:07:49,250 --> 00:07:53,099
instruction fetch front end stuff

00:07:51,440 --> 00:07:54,360
complexity instructions doesn't matter

00:07:53,099 --> 00:07:55,469
as much because your filtration is large

00:07:54,360 --> 00:07:57,719
what really matters is how many bytes

00:07:55,469 --> 00:07:59,699
are fetching and this is on spec total

00:07:57,719 --> 00:08:01,589
dynamic bytes fetched across the board

00:07:59,699 --> 00:08:04,080
respond with a compress instruction set

00:08:01,589 --> 00:08:05,879
also works out pretty well it works you

00:08:04,080 --> 00:08:07,589
know it's people think x86 is a quite

00:08:05,879 --> 00:08:09,389
dense instruction encoding but the

00:08:07,589 --> 00:08:11,069
64-bit ISA is really not that dense of

00:08:09,389 --> 00:08:14,039
instruction encoding and it's not

00:08:11,069 --> 00:08:15,569
SuperDuper hard to beat so while we were

00:08:14,039 --> 00:08:16,560
doing this part of the reason that I say

00:08:15,569 --> 00:08:18,659
took so long is because we were building

00:08:16,560 --> 00:08:21,150
a bunch of chips at the time so this is

00:08:18,659 --> 00:08:23,610
out of date because I haven't updated my

00:08:21,150 --> 00:08:25,409
slides in a year but these are the

00:08:23,610 --> 00:08:27,569
implementations of silicon rotations

00:08:25,409 --> 00:08:29,759
from our berkeley research group that

00:08:27,569 --> 00:08:31,770
were done in parallel with rows v is a

00:08:29,759 --> 00:08:33,419
development so you see the first one was

00:08:31,770 --> 00:08:35,789
2011 and they had an old version of the

00:08:33,419 --> 00:08:36,810
ISA which is incompatible and broken and

00:08:35,789 --> 00:08:38,909
the chip didn't work on all that sort of

00:08:36,810 --> 00:08:40,769
stuff and after a dozen rounds we ended

00:08:38,909 --> 00:08:42,839
up building something fairly solid and I

00:08:40,769 --> 00:08:44,550
say we think works well got a lot of

00:08:42,839 --> 00:08:47,070
papers out of it had a lot of working

00:08:44,550 --> 00:08:49,230
chips and that's kind of a big part of

00:08:47,070 --> 00:08:50,430
the reason why we think the ISA is well

00:08:49,230 --> 00:08:52,470
designed is because we weren't under a

00:08:50,430 --> 00:08:54,779
lot of pressure to ship a product that

00:08:52,470 --> 00:08:56,520
had to work right we could you know go

00:08:54,779 --> 00:08:56,850
mess around and academic research for 4

00:08:56,520 --> 00:08:58,290
years

00:08:56,850 --> 00:08:59,790
iterate on things

00:08:58,290 --> 00:09:01,589
throw away the ideas that were bad and

00:08:59,790 --> 00:09:04,589
there-there were bad ideas in the early

00:09:01,589 --> 00:09:06,269
versions so we taped my chips spend a

00:09:04,589 --> 00:09:09,360
lot of time doing it it's really hard to

00:09:06,269 --> 00:09:11,490
tape out chips so in small volumes so we

00:09:09,360 --> 00:09:12,779
had lots of chip problems lots of board

00:09:11,490 --> 00:09:15,509
problems so what ended up happening is

00:09:12,779 --> 00:09:17,370
we put like an organic package on one of

00:09:15,509 --> 00:09:19,380
the first chips and it couldn't stand

00:09:17,370 --> 00:09:21,269
the temperature of the commercial reflow

00:09:19,380 --> 00:09:24,120
ovens so we have to go build our own

00:09:21,269 --> 00:09:26,370
reflow oven to avert avoid burn burning

00:09:24,120 --> 00:09:28,620
up the package which we did Remus's

00:09:26,370 --> 00:09:30,509
apartment out of an old toaster oven and

00:09:28,620 --> 00:09:31,949
a little Raspberry Pi and you you know

00:09:30,509 --> 00:09:35,190
twiddle the thing to get the temperature

00:09:31,949 --> 00:09:36,959
right yeah yeah we got working chips

00:09:35,190 --> 00:09:38,339
right here's one consuming some power

00:09:36,959 --> 00:09:40,470
right which is the chips are supposed to

00:09:38,339 --> 00:09:41,730
do but it actually does execute

00:09:40,470 --> 00:09:44,130
instructions as well it's just hard to

00:09:41,730 --> 00:09:46,769
show on the screen and they do work yeah

00:09:44,130 --> 00:09:47,970
it's it's a long journey it was fun but

00:09:46,769 --> 00:09:49,920
now we've kind of spun this off into a

00:09:47,970 --> 00:09:52,170
commercial entity and this is sort of

00:09:49,920 --> 00:09:54,120
where I get involved I this is a picture

00:09:52,170 --> 00:09:55,350
of my desks get Berkley I was sitting

00:09:54,120 --> 00:09:57,060
here and the guys on the other side of

00:09:55,350 --> 00:09:59,220
the wall were working on the restaurant

00:09:57,060 --> 00:10:00,420
and they're all micro architects I I was

00:09:59,220 --> 00:10:01,920
working on some other project I'm just

00:10:00,420 --> 00:10:03,720
kind of Mike architecture at the time I

00:10:01,920 --> 00:10:06,240
kept hearing complaints over the wall

00:10:03,720 --> 00:10:07,829
hey you know the response eport doesn't

00:10:06,240 --> 00:10:09,209
work right or you know it can't boot

00:10:07,829 --> 00:10:10,889
Linux for this sort of stuff so I

00:10:09,209 --> 00:10:12,300
thought gee that sounds more interesting

00:10:10,889 --> 00:10:17,880
than what I'm working on so I'll just go

00:10:12,300 --> 00:10:19,589
kind of help out yep so you know it got

00:10:17,880 --> 00:10:22,529
involved by just seeing some fun stuff

00:10:19,589 --> 00:10:24,420
going on and it turns out there's a lot

00:10:22,529 --> 00:10:26,459
of software I kind of didn't know what I

00:10:24,420 --> 00:10:27,959
was getting myself into I suppose this

00:10:26,459 --> 00:10:29,610
is the first patch we sent out and I

00:10:27,959 --> 00:10:31,680
thought this was a really big deal at

00:10:29,610 --> 00:10:33,389
the time right this was four years ago

00:10:31,680 --> 00:10:35,130
sent the first patch out sent it out to

00:10:33,389 --> 00:10:37,440
the man list and this was to add the

00:10:35,130 --> 00:10:39,180
risk 5-tuple x' to config dot sub right

00:10:37,440 --> 00:10:41,220
which is a fairly small patch but that

00:10:39,180 --> 00:10:43,500
was whoa man we're getting real uh-huh

00:10:41,220 --> 00:10:45,600
man it's come a long way in the last

00:10:43,500 --> 00:10:47,100
like it's four years kind of it's uh

00:10:45,600 --> 00:10:48,269
eight years since they really started

00:10:47,100 --> 00:10:49,860
the whole project right so we're talking

00:10:48,269 --> 00:10:52,050
about a little bit now about what we

00:10:49,860 --> 00:10:54,329
have currently so then we have our sky

00:10:52,050 --> 00:10:55,920
Foundation which is a industry trade

00:10:54,329 --> 00:10:58,380
group it's a non-profit foundation

00:10:55,920 --> 00:11:00,360
companies can join you pay some money

00:10:58,380 --> 00:11:01,740
and that sort of thing and individuals

00:11:00,360 --> 00:11:03,180
can join as well if you're kind of an

00:11:01,740 --> 00:11:05,910
open-source hacker guy

00:11:03,180 --> 00:11:06,990
it runs working groups working groups

00:11:05,910 --> 00:11:09,029
produce standards and the standards

00:11:06,990 --> 00:11:09,820
become ratified as proper risk by

00:11:09,029 --> 00:11:12,460
standard it's kind of

00:11:09,820 --> 00:11:15,280
the normal way to run a specification

00:11:12,460 --> 00:11:17,260
foundation and we've got 100 plus

00:11:15,280 --> 00:11:19,560
members the slides old a lot of big

00:11:17,260 --> 00:11:23,250
companies in it it's become a big deal

00:11:19,560 --> 00:11:25,630
and the main goal of the risk 5

00:11:23,250 --> 00:11:27,880
organization is reduce risk 5 I say

00:11:25,630 --> 00:11:29,230
specifications so the big ones the user

00:11:27,880 --> 00:11:30,940
mode is a specification that's where

00:11:29,230 --> 00:11:32,620
most of the code runs right that's the

00:11:30,940 --> 00:11:33,280
you know adds and multiplies and that

00:11:32,620 --> 00:11:35,350
sort of stuff

00:11:33,280 --> 00:11:37,270
risk 5 specification itself is described

00:11:35,350 --> 00:11:39,430
as a set of base specifications and

00:11:37,270 --> 00:11:40,600
instead of optional extensions this is

00:11:39,430 --> 00:11:42,610
part of the reason we can provide this

00:11:40,600 --> 00:11:44,290
permanent compatibility guarantee

00:11:42,610 --> 00:11:46,630
because you can turn things on and off

00:11:44,290 --> 00:11:47,800
quite confident that the base I say is

00:11:46,630 --> 00:11:49,690
good enough to last for a long time

00:11:47,800 --> 00:11:52,480
right the extensions that we've

00:11:49,690 --> 00:11:54,040
standardized so far are things that are

00:11:52,480 --> 00:11:55,480
pretty straight forward and then more

00:11:54,040 --> 00:11:56,620
advanced ones like vectors and Symbian

00:11:55,480 --> 00:11:58,060
that's kind of sort of stuff for coming

00:11:56,620 --> 00:11:59,560
in the future we also have a privileged

00:11:58,060 --> 00:12:01,120
is a specification which is what you

00:11:59,560 --> 00:12:02,320
write supervisors and boot loaders and

00:12:01,120 --> 00:12:04,030
that sort of stuff too

00:12:02,320 --> 00:12:05,890
that is currently a draft but we've

00:12:04,030 --> 00:12:07,690
committed to stability even if the

00:12:05,890 --> 00:12:09,670
foundation hasn't ratified it that specs

00:12:07,690 --> 00:12:10,960
out a supervisor mode hypervisor mode

00:12:09,670 --> 00:12:12,460
and then machine mode stuff which is

00:12:10,960 --> 00:12:13,360
where a platform firmware runs they

00:12:12,460 --> 00:12:15,640
initially we have some things like

00:12:13,360 --> 00:12:17,440
external debug specifications so you can

00:12:15,640 --> 00:12:18,970
talk to the thing over JTAG when you

00:12:17,440 --> 00:12:20,530
first bring it up all that kind of stuff

00:12:18,970 --> 00:12:21,730
there's one I'd like to point out

00:12:20,530 --> 00:12:24,930
because I think it's really cool is the

00:12:21,730 --> 00:12:27,130
risk by memory model which is the first

00:12:24,930 --> 00:12:29,380
specification officially ratified by the

00:12:27,130 --> 00:12:30,400
foundation I don't know if it's 100%

00:12:29,380 --> 00:12:32,320
done yet but it's the first one that was

00:12:30,400 --> 00:12:34,180
submitted for ratification and it's

00:12:32,320 --> 00:12:35,800
actually it's really nice it's a fairly

00:12:34,180 --> 00:12:37,360
clean memory model I think I'm not

00:12:35,800 --> 00:12:40,930
really a memory model guy but I could

00:12:37,360 --> 00:12:44,530
read the PDF and write the Linux source

00:12:40,930 --> 00:12:45,880
code so it can't be the huh and it's

00:12:44,530 --> 00:12:47,020
cool it's actually described in a way

00:12:45,880 --> 00:12:49,000
that's somewhat orthogonal from the

00:12:47,020 --> 00:12:50,560
actual risk of instruction set so the

00:12:49,000 --> 00:12:52,240
memory model can apply lots of different

00:12:50,560 --> 00:12:54,100
things and we had this in before we had

00:12:52,240 --> 00:12:56,770
certainly before we had distros and

00:12:54,100 --> 00:12:57,820
before I had a real solid Linux port so

00:12:56,770 --> 00:13:00,910
it's been really nice to be able to

00:12:57,820 --> 00:13:02,830
answer questions on the Linux kernel

00:13:00,910 --> 00:13:06,370
memory model mailing lists with an

00:13:02,830 --> 00:13:07,630
actual spec which helps a lot so yeah we

00:13:06,370 --> 00:13:09,400
started doing a bunch of software based

00:13:07,630 --> 00:13:11,140
on these specifications right the ISA

00:13:09,400 --> 00:13:13,510
specifications are what tie the software

00:13:11,140 --> 00:13:15,310
to the hardware so we write software for

00:13:13,510 --> 00:13:17,230
the specifications Linux Karla ports the

00:13:15,310 --> 00:13:19,840
big one that's why we're all here it's

00:13:17,230 --> 00:13:22,780
been upstream for about a year now it

00:13:19,840 --> 00:13:23,680
boots the boots on qmu and it kind of

00:13:22,780 --> 00:13:26,500
sort of boots on somehow

00:13:23,680 --> 00:13:29,170
if you're really really careful with it

00:13:26,500 --> 00:13:30,880
we ran at the lat not the last ELC the

00:13:29,170 --> 00:13:32,649
one in Portland maybe nine months ago or

00:13:30,880 --> 00:13:33,940
something or we ran a hackathon so there

00:13:32,649 --> 00:13:35,740
were the things we're like sending out

00:13:33,940 --> 00:13:37,330
the first patch set it's like wow I

00:13:35,740 --> 00:13:39,640
never thought we'd get this big seeing

00:13:37,330 --> 00:13:41,410
SCI fives name next to Intel sponsoring

00:13:39,640 --> 00:13:42,279
you know next Foundation conferences oh

00:13:41,410 --> 00:13:44,350
that's pretty

00:13:42,279 --> 00:13:46,420
pretty cool stuff we had some guys come

00:13:44,350 --> 00:13:47,649
to hack on the boards was the first time

00:13:46,420 --> 00:13:50,800
the boards are out in public

00:13:47,649 --> 00:13:53,440
we had a Yocto court that got spun up on

00:13:50,800 --> 00:13:54,850
it and then we had a JavaScript

00:13:53,440 --> 00:13:56,529
implementation they got spun up as well

00:13:54,850 --> 00:14:00,070
we have a tool chain this is kind of the

00:13:56,529 --> 00:14:02,140
core of the ISA stuff right gnu based

00:14:00,070 --> 00:14:04,690
jewel chain it's in pretty good shape

00:14:02,140 --> 00:14:06,850
it's been upstream for more than a year

00:14:04,690 --> 00:14:09,339
now and we're at the point where you

00:14:06,850 --> 00:14:10,420
know if you have some C code and you

00:14:09,339 --> 00:14:11,860
compile it and it doesn't do what you

00:14:10,420 --> 00:14:13,029
want to do it's probably not because

00:14:11,860 --> 00:14:14,380
there's a bug in the compiler it's

00:14:13,029 --> 00:14:16,480
probably something else which is great

00:14:14,380 --> 00:14:19,750
it took a long time to get there

00:14:16,480 --> 00:14:22,529
compilers are a lot of work additionally

00:14:19,750 --> 00:14:24,910
we have open source hardware so it's i-5

00:14:22,529 --> 00:14:27,040
well I guess at Berkeley we started

00:14:24,910 --> 00:14:29,080
producing all open source everything the

00:14:27,040 --> 00:14:30,010
hardware the software the specs and that

00:14:29,080 --> 00:14:31,089
was done because that's kind of how

00:14:30,010 --> 00:14:33,220
Berkeley mandates everything's done

00:14:31,089 --> 00:14:35,140
that's i-5 we grew that into a company

00:14:33,220 --> 00:14:36,820
that's we really like open source and we

00:14:35,140 --> 00:14:39,490
release the core of our hardware

00:14:36,820 --> 00:14:41,770
plantations as open source so here we

00:14:39,490 --> 00:14:45,400
have an FPGA and we gave to the fedora

00:14:41,770 --> 00:14:47,860
guys that you can boot the risk 5 Fedora

00:14:45,400 --> 00:14:50,500
port on and that will run open source

00:14:47,860 --> 00:14:51,910
RTL right through the proprietary Xilinx

00:14:50,500 --> 00:14:54,400
CAD tools unfortunately but open source

00:14:51,910 --> 00:14:56,529
RTL running on you know sci-fi is open

00:14:54,400 --> 00:14:57,880
source RTL running on an FPGA that will

00:14:56,529 --> 00:15:00,279
then boot you know the whole open source

00:14:57,880 --> 00:15:01,839
software stack right so I think that's

00:15:00,279 --> 00:15:03,430
pretty cool we also have some ASIC

00:15:01,839 --> 00:15:04,900
implementations here and you can get the

00:15:03,430 --> 00:15:06,579
fedora port it's online there's a

00:15:04,900 --> 00:15:09,310
website all that sort of stuff that

00:15:06,579 --> 00:15:11,470
works pretty solidly I think this is the

00:15:09,310 --> 00:15:16,029
the demonstration the open standards can

00:15:11,470 --> 00:15:17,829
work in the is a space so you see here

00:15:16,029 --> 00:15:19,839
you know we have this large breadth of

00:15:17,829 --> 00:15:22,420
software I didn't write it all if I

00:15:19,839 --> 00:15:24,430
didn't really write much of it but we've

00:15:22,420 --> 00:15:25,959
gotten a lot of buy-in from various

00:15:24,430 --> 00:15:27,820
other risk by vendors write some

00:15:25,959 --> 00:15:29,230
software vendors some hardware vendors a

00:15:27,820 --> 00:15:31,300
lot of guys at sci-fi and then some of

00:15:29,230 --> 00:15:33,160
the traditional open ecosystem people

00:15:31,300 --> 00:15:34,810
you expect like Red Hat so we have my co

00:15:33,160 --> 00:15:36,459
maintainer x' of the various core

00:15:34,810 --> 00:15:37,870
projects floating around the risk of

00:15:36,459 --> 00:15:41,320
ecosystem the slides old we've got

00:15:37,870 --> 00:15:42,820
a little bigger so in addition to this

00:15:41,320 --> 00:15:44,800
we have a lot of interest in the

00:15:42,820 --> 00:15:46,690
embedded space when I think people like

00:15:44,800 --> 00:15:49,300
about respite and embedded land is that

00:15:46,690 --> 00:15:50,980
the is a is smell very similar between

00:15:49,300 --> 00:15:52,540
the Linux tile stuff and the embedded

00:15:50,980 --> 00:15:54,430
style stuff you get similar protection

00:15:52,540 --> 00:15:55,390
mechanisms that are optional supervisor

00:15:54,430 --> 00:15:57,220
mode that sort of stuff so we have

00:15:55,390 --> 00:15:59,290
zephyr another linux foundation project

00:15:57,220 --> 00:16:00,820
that we're really excited about I hadn't

00:15:59,290 --> 00:16:02,680
heard it before ant micro who's one of

00:16:00,820 --> 00:16:04,870
the early risk five software vendors got

00:16:02,680 --> 00:16:06,580
involved they did a port the artist

00:16:04,870 --> 00:16:08,890
seems really clean there's a good

00:16:06,580 --> 00:16:10,750
community around it and we've got we're

00:16:08,890 --> 00:16:12,100
investing a lot in that in the sci-fi

00:16:10,750 --> 00:16:14,110
side of things and on the risk five side

00:16:12,100 --> 00:16:15,220
of things we've got the Zephyr SDK up

00:16:14,110 --> 00:16:16,510
and running on the boards there's a

00:16:15,220 --> 00:16:17,950
couple of embedded boards you can get

00:16:16,510 --> 00:16:20,380
you know the whole thing's kind of ready

00:16:17,950 --> 00:16:21,850
to go and there's a proper release that

00:16:20,380 --> 00:16:23,230
has decent risk five support and it's

00:16:21,850 --> 00:16:24,520
been device 3f ID so you can mess around

00:16:23,230 --> 00:16:26,380
things on the board and that came out

00:16:24,520 --> 00:16:27,850
anybody want their two ago so that's a

00:16:26,380 --> 00:16:29,680
great place to play if you like the

00:16:27,850 --> 00:16:31,150
embedded art loft space additionally we

00:16:29,680 --> 00:16:34,150
have some linux distro so we have fedora

00:16:31,150 --> 00:16:35,830
which i mentioned earlier you can go on

00:16:34,150 --> 00:16:37,180
the internet and get the disk images and

00:16:35,830 --> 00:16:38,620
if tutorial of how to boot it on either

00:16:37,180 --> 00:16:40,839
boards or qmu all that sort of stuff

00:16:38,620 --> 00:16:42,550
it's still hosting so it builds its own

00:16:40,839 --> 00:16:44,500
package images all the time the build

00:16:42,550 --> 00:16:45,790
farms are actually running on some

00:16:44,500 --> 00:16:47,680
hardware that we gave to the fedora guys

00:16:45,790 --> 00:16:49,420
and they say it's reasonably stable so

00:16:47,680 --> 00:16:51,100
all pretty solid stuff we have a Debian

00:16:49,420 --> 00:16:52,810
port this I'm super excited about it's

00:16:51,100 --> 00:16:55,150
very hard to read but we actually have

00:16:52,810 --> 00:16:58,020
more packages in the risk 5 Debian port

00:16:55,150 --> 00:16:58,020
than Itanium has

00:16:58,300 --> 00:17:05,900
which is awesome right yeah it's one of

00:17:03,980 --> 00:17:06,890
those things you know I came came to

00:17:05,900 --> 00:17:08,209
Berkeley and I didn't know about there

00:17:06,890 --> 00:17:09,530
was five thing and they so we're gonna

00:17:08,209 --> 00:17:11,150
do our own is a and I said you know it's

00:17:09,530 --> 00:17:12,350
a really dumb idea there's a lot of

00:17:11,150 --> 00:17:14,540
software and there's no way you're you

00:17:12,350 --> 00:17:16,910
get someone like red hat to go spin your

00:17:14,540 --> 00:17:20,510
spin a port up for some is a you did but

00:17:16,910 --> 00:17:22,430
yeah I guess it worked so no complaints

00:17:20,510 --> 00:17:23,600
but it's really great yeah then this is

00:17:22,430 --> 00:17:25,550
our kind of external verification

00:17:23,600 --> 00:17:27,949
methodology go beat the Debian port you

00:17:25,550 --> 00:17:30,080
get a bunch of packages and it is a real

00:17:27,949 --> 00:17:32,809
computer oh yeah more disturbs we have a

00:17:30,080 --> 00:17:34,790
openembedded Yocto hemorrhage who does a

00:17:32,809 --> 00:17:36,920
lot open embedded stuff it got really

00:17:34,790 --> 00:17:38,960
involved really early and risk 5 and the

00:17:36,920 --> 00:17:40,820
octave support has been really solid for

00:17:38,960 --> 00:17:42,470
a while lots of community around it

00:17:40,820 --> 00:17:43,550
patches go by all that sort of thing and

00:17:42,470 --> 00:17:45,290
you can run a bunch of stuff that you

00:17:43,550 --> 00:17:46,640
can run X it runs on the board all those

00:17:45,290 --> 00:17:48,679
sort of things there's some out of three

00:17:46,640 --> 00:17:49,910
patches necessary for the kernel whatnot

00:17:48,679 --> 00:17:52,280
that they integrate but it works pretty

00:17:49,910 --> 00:17:53,330
solidly so in terms of hardware

00:17:52,280 --> 00:17:56,600
implementations as what kind of software

00:17:53,330 --> 00:17:59,570
stuff hard rotations sy5 sells a

00:17:56,600 --> 00:18:00,890
hardware implementation of risk 5 so

00:17:59,570 --> 00:18:02,030
will sell people RTL who bet they go

00:18:00,890 --> 00:18:04,070
integrate into their implementations and

00:18:02,030 --> 00:18:05,720
we also sell a six and then dev boards

00:18:04,070 --> 00:18:06,830
based on it so here's the high five

00:18:05,720 --> 00:18:08,929
Unleashed which has been out since

00:18:06,830 --> 00:18:11,780
February and you can go buy it on the

00:18:08,929 --> 00:18:14,720
internet it's a quad-core were described

00:18:11,780 --> 00:18:17,630
we did on TSM C's 28 nanometer and it

00:18:14,720 --> 00:18:19,040
kind of looks like one of the 853 dev

00:18:17,630 --> 00:18:21,890
boards you get similar spectra stores

00:18:19,040 --> 00:18:23,900
that sort of stuff to make l2 cache ddr4

00:18:21,890 --> 00:18:25,010
we have eight gigs on the board then we

00:18:23,900 --> 00:18:27,230
have something called chip link which is

00:18:25,010 --> 00:18:29,300
our board to board interconnects so that

00:18:27,230 --> 00:18:30,770
goes between our ASIC and then an FPGA

00:18:29,300 --> 00:18:32,690
based Southbridge where you can put on

00:18:30,770 --> 00:18:34,070
accelerators or we use it for PCI

00:18:32,690 --> 00:18:36,590
Express and all that sort of stuff and

00:18:34,070 --> 00:18:38,750
then this is kind of my summary of the

00:18:36,590 --> 00:18:42,020
state of RISC five software so here we

00:18:38,750 --> 00:18:44,540
have our a6 which is a quad-core risk 5

00:18:42,020 --> 00:18:46,520
ASIC talking to micro semi is FPGA board

00:18:44,540 --> 00:18:48,410
which then goes through some shims to

00:18:46,520 --> 00:18:49,429
get to PCI Express and whatnot and you

00:18:48,410 --> 00:18:52,640
can run basically the full software

00:18:49,429 --> 00:18:55,760
stack on it so AMD GPU runs we have a

00:18:52,640 --> 00:18:57,620
commercial GPU in there we can run quake

00:18:55,760 --> 00:18:59,480
or I think it's this tux cart or tux

00:18:57,620 --> 00:19:02,120
racer or something like that you can

00:18:59,480 --> 00:19:04,550
plug USB stuff in keyboard mouse a

00:19:02,120 --> 00:19:05,870
webcam all that sort of stuff and you

00:19:04,550 --> 00:19:08,300
can go to the Internet so we have a web

00:19:05,870 --> 00:19:10,220
browser you can go to youtube or Twitter

00:19:08,300 --> 00:19:10,940
or all those sort of things it is it's

00:19:10,220 --> 00:19:13,790
an actual

00:19:10,940 --> 00:19:15,050
computer which I it was a lot of work

00:19:13,790 --> 00:19:18,260
but it's it's pretty cool they've seen

00:19:15,050 --> 00:19:19,970
the whole thing kind of come to life so

00:19:18,260 --> 00:19:21,800
that's kind of the end of what I have

00:19:19,970 --> 00:19:23,720
prepared for slides this is my getting

00:19:21,800 --> 00:19:25,580
how to get involves like is the whole

00:19:23,720 --> 00:19:27,140
point of giving these talks is to get

00:19:25,580 --> 00:19:28,220
people involved in ER Skype software

00:19:27,140 --> 00:19:29,630
relevant you know there's a lot of

00:19:28,220 --> 00:19:32,990
software there's a lot of work still

00:19:29,630 --> 00:19:34,310
left to be done and hopefully this gets

00:19:32,990 --> 00:19:36,800
people reasonably excited about getting

00:19:34,310 --> 00:19:38,840
involved so we have a blog at sy5 we're

00:19:36,800 --> 00:19:41,570
at a sort of weekly newsletter about

00:19:38,840 --> 00:19:42,680
risk five developments mostly software

00:19:41,570 --> 00:19:44,330
stuff because I write it but also some

00:19:42,680 --> 00:19:47,210
hardware stuff there's some risk five

00:19:44,330 --> 00:19:49,640
groups there's also an IRC channel which

00:19:47,210 --> 00:19:51,410
is a great place to go hangout and then

00:19:49,640 --> 00:19:53,930
if you're involved in the open source

00:19:51,410 --> 00:19:56,530
software like I assume most you are here

00:19:53,930 --> 00:19:58,580
most of our ports are upstream now and

00:19:56,530 --> 00:19:59,780
development happens where you'd expect

00:19:58,580 --> 00:20:01,910
it to happen right upstream mailing

00:19:59,780 --> 00:20:03,680
lists we have a couple of ones for the

00:20:01,910 --> 00:20:05,390
projects that tend to get their own

00:20:03,680 --> 00:20:07,880
mailing lists like linux and q mu and

00:20:05,390 --> 00:20:09,290
then bin utils GG C c/g Lib C G to be

00:20:07,880 --> 00:20:12,080
all at the FSF which is kind of like

00:20:09,290 --> 00:20:14,600
normal so I believe that is the extent

00:20:12,080 --> 00:20:17,570
of my slides yeah because they're not

00:20:14,600 --> 00:20:22,330
going any farther so does anybody have

00:20:17,570 --> 00:20:22,330
any questions yeah

00:20:26,149 --> 00:20:33,809
so we do not have a chip that we will

00:20:31,590 --> 00:20:38,490
sell you that it's synthesized using an

00:20:33,809 --> 00:20:40,080
open-source flow you there are FPGAs

00:20:38,490 --> 00:20:45,029
like the lattice FB J's have been

00:20:40,080 --> 00:20:46,590
reverse-engineered and those there are

00:20:45,029 --> 00:20:49,529
risk 5 implementations that will

00:20:46,590 --> 00:20:51,809
synthesize for those and then I know I

00:20:49,529 --> 00:20:55,409
was supposed to I messed up my schedule

00:20:51,809 --> 00:20:57,090
and got caught giving to talks today

00:20:55,409 --> 00:21:01,860
one of them's in San Mateo so I'm

00:20:57,090 --> 00:21:04,559
skipping that one but that talk was at a

00:21:01,860 --> 00:21:07,350
group that does that is working on open

00:21:04,559 --> 00:21:10,499
source RTL open source EDA flow and will

00:21:07,350 --> 00:21:13,320
give you chips and I'm really excited

00:21:10,499 --> 00:21:14,909
about that sort of thing I think you

00:21:13,320 --> 00:21:17,190
know the opens hardware stuff is very

00:21:14,909 --> 00:21:19,379
exciting and risk I was only part of

00:21:17,190 --> 00:21:20,549
this it's a necessary part so having the

00:21:19,379 --> 00:21:22,499
ISA be a standard the people who

00:21:20,549 --> 00:21:25,169
actually implement you have to have four

00:21:22,499 --> 00:21:26,789
open implementations to exist and then

00:21:25,169 --> 00:21:28,470
sigh five has some open source RTL that

00:21:26,789 --> 00:21:30,119
lets you build stuff and I think the big

00:21:28,470 --> 00:21:32,669
missing piece of the flow is the open

00:21:30,119 --> 00:21:35,759
source EDA flow and hopefully now that

00:21:32,669 --> 00:21:37,440
there's you know workloads to run and

00:21:35,759 --> 00:21:44,940
some targets you can target things will

00:21:37,440 --> 00:21:48,539
start to come up yeah yeah Bruce Holt

00:21:44,940 --> 00:21:49,740
yeah he's our LVM guy so that's a big

00:21:48,539 --> 00:21:50,429
part of the stack and risk 5 that's gone

00:21:49,740 --> 00:21:52,379
a little slower

00:21:50,429 --> 00:21:53,549
you know you need one tool chain but

00:21:52,379 --> 00:21:55,230
then once you have one tool chain you

00:21:53,549 --> 00:21:58,350
kind of yeah the other one falls behind

00:21:55,230 --> 00:22:00,869
but we are we got Bruce the target for

00:21:58,350 --> 00:22:02,789
LVM which I believe is LOV m8 which is

00:22:00,869 --> 00:22:04,769
the next release is to get risk 5 out of

00:22:02,789 --> 00:22:08,279
experimental and having all the base

00:22:04,769 --> 00:22:10,669
ISAs and ABI is supported so yeah pretty

00:22:08,279 --> 00:22:10,669
exciting

00:22:13,920 --> 00:22:20,140
so we don't build microarchitecture

00:22:17,950 --> 00:22:22,480
simulators at sy5 so we have a

00:22:20,140 --> 00:22:24,430
functional is a simulator which is

00:22:22,480 --> 00:22:25,600
called spike we also have Q Mew kind of

00:22:24,430 --> 00:22:28,000
full system to any other standard thing

00:22:25,600 --> 00:22:31,360
and for microarchitecture simulation we

00:22:28,000 --> 00:22:34,180
rely on FPGAs the idea being that if you

00:22:31,360 --> 00:22:37,150
go build a C microarchitecture simulator

00:22:34,180 --> 00:22:40,420
they tend to be inaccurate unless you've

00:22:37,150 --> 00:22:43,360
already done the entire RTL design and

00:22:40,420 --> 00:22:46,870
then have gone and pulled the C

00:22:43,360 --> 00:22:48,370
simulator out of the RTL and then by the

00:22:46,870 --> 00:22:50,050
punt you've done that the FPGA

00:22:48,370 --> 00:22:52,570
implementation is actually execute

00:22:50,050 --> 00:22:54,490
faster our FPGA is one hundreds of

00:22:52,570 --> 00:22:57,090
megahertz gem five is tens of megahertz

00:22:54,490 --> 00:23:00,850
so there is a risk five gem five port

00:22:57,090 --> 00:23:02,500
but I'm not involved in it and a big a

00:23:00,850 --> 00:23:05,020
big pillar of our research group at

00:23:02,500 --> 00:23:07,260
Berkley was not to do Jim five but there

00:23:05,020 --> 00:23:07,260
is one

00:23:12,110 --> 00:23:15,110
okay

00:23:22,750 --> 00:23:32,540
so the risk 5 is a mandates a handful of

00:23:29,260 --> 00:23:34,309
performance counters right there just

00:23:32,540 --> 00:23:35,690
the simplest ones like a real-time

00:23:34,309 --> 00:23:36,770
counter available to user space real

00:23:35,690 --> 00:23:38,960
time clock available user space

00:23:36,770 --> 00:23:41,210
instructions are tired and cycle counter

00:23:38,960 --> 00:23:44,120
alright so that's the stuff you get base

00:23:41,210 --> 00:23:46,280
is a there's a bunch of requirements in

00:23:44,120 --> 00:23:48,530
the I say about accuracy and those sort

00:23:46,280 --> 00:23:49,400
of things so those are solid those are

00:23:48,530 --> 00:23:50,620
there and you can do a lot of

00:23:49,400 --> 00:23:52,850
performance tuning with that

00:23:50,620 --> 00:23:56,390
additionally what we do is we allow in

00:23:52,850 --> 00:23:58,520
supervisor mode a set of platform

00:23:56,390 --> 00:24:00,410
specific performance counters we do

00:23:58,520 --> 00:24:01,790
something called risk I've called CSRs

00:24:00,410 --> 00:24:03,230
or control and status registers which

00:24:01,790 --> 00:24:05,809
are the second tier of registers right

00:24:03,230 --> 00:24:07,250
the GPU no integer floating registers

00:24:05,809 --> 00:24:08,240
and the C's are stuff that control

00:24:07,250 --> 00:24:09,500
things off the side that's where you put

00:24:08,240 --> 00:24:12,799
the page table base pointer those sort

00:24:09,500 --> 00:24:15,860
of things so there are something like 16

00:24:12,799 --> 00:24:17,090
of those and those are machine specific

00:24:15,860 --> 00:24:20,140
and they can be multiplexed in a

00:24:17,090 --> 00:24:22,309
particular way and there's a scheme for

00:24:20,140 --> 00:24:23,720
standard extensions and vendor

00:24:22,309 --> 00:24:25,970
extensions and that's where you do stuff

00:24:23,720 --> 00:24:27,590
like counting branch predictor misses

00:24:25,970 --> 00:24:30,020
and cache misses and that sort of stuff

00:24:27,590 --> 00:24:32,750
so for Syfy's platforms we have a PDF

00:24:30,020 --> 00:24:34,190
that you can read and then you can go

00:24:32,750 --> 00:24:36,049
tell what the bits and the counters mean

00:24:34,190 --> 00:24:38,059
there's no implementation in Linux yet

00:24:36,049 --> 00:24:39,500
that's something on the to do list

00:24:38,059 --> 00:24:42,710
there's been one kicked around but it's

00:24:39,500 --> 00:24:44,330
not quite ready to go yet but that's

00:24:42,710 --> 00:24:46,970
that is a thing that will happen it's

00:24:44,330 --> 00:24:48,470
super important yeah oh and then we have

00:24:46,970 --> 00:24:50,929
memories of some stuff on syfy systems

00:24:48,470 --> 00:24:53,299
to write cache you can go pro registers

00:24:50,929 --> 00:24:55,940
in the cache to see your l2 misses and

00:24:53,299 --> 00:24:59,170
to mess around with ways and all sorts

00:24:55,940 --> 00:25:12,460
of stuff like that yeah

00:24:59,170 --> 00:25:15,430
oh yeah yeah yeah yeah yeah so this is a

00:25:12,460 --> 00:25:23,290
place where it's really easy to get into

00:25:15,430 --> 00:25:24,640
trouble so so yeah great risk five is

00:25:23,290 --> 00:25:26,530
not vulnerable Specter is a really good

00:25:24,640 --> 00:25:29,140
headline right but it's really just

00:25:26,530 --> 00:25:30,790
nonsense because is a he doesn't really

00:25:29,140 --> 00:25:32,350
make any guarantees about speculative

00:25:30,790 --> 00:25:34,330
side-channel attacks so we have a

00:25:32,350 --> 00:25:37,680
security group at the risk five

00:25:34,330 --> 00:25:41,020
Foundation who is working on how to

00:25:37,680 --> 00:25:42,970
extend the is a such that the I say can

00:25:41,020 --> 00:25:46,390
basically discuss so I could little

00:25:42,970 --> 00:25:48,340
side-channel attacks but currently there

00:25:46,390 --> 00:25:49,960
are no risk five implementations that

00:25:48,340 --> 00:25:52,360
are vulnerable to speculative

00:25:49,960 --> 00:25:53,380
side-channel attacks and this is one of

00:25:52,360 --> 00:25:56,080
the cool things about having the open

00:25:53,380 --> 00:25:58,590
source RTL it's that we can actually go

00:25:56,080 --> 00:26:01,690
show you the signal in the pipeline that

00:25:58,590 --> 00:26:06,010
shoots down all speculative loads before

00:26:01,690 --> 00:26:08,400
they make it to the l1 and then you know

00:26:06,010 --> 00:26:10,510
no basically no state is speculatively

00:26:08,400 --> 00:26:13,960
modified there is that there was the

00:26:10,510 --> 00:26:16,110
floating-point one on Intel we do bypass

00:26:13,960 --> 00:26:18,850
from the floating-point unit

00:26:16,110 --> 00:26:20,530
speculatively but there's no way because

00:26:18,850 --> 00:26:22,510
of how the pipeline is constructed

00:26:20,530 --> 00:26:24,070
there's no way to get that data out of

00:26:22,510 --> 00:26:25,420
the floating point pipeline and into

00:26:24,070 --> 00:26:28,030
something you can then branch on without

00:26:25,420 --> 00:26:28,930
it being killed alright basically the

00:26:28,030 --> 00:26:30,400
floating point pipeline is a little

00:26:28,930 --> 00:26:32,170
longer so that was also not venerable

00:26:30,400 --> 00:26:33,460
but the the cache one which is the big

00:26:32,170 --> 00:26:35,020
one that's one has been exploited a lot

00:26:33,460 --> 00:26:36,520
sort of stuff we can just go prove that

00:26:35,020 --> 00:26:38,470
it's not vulnerable because you can see

00:26:36,520 --> 00:26:43,740
the signal and our place is not

00:26:38,470 --> 00:26:43,740
vulnerable yeah

00:26:51,300 --> 00:26:56,180
well the goals to have everything work

00:26:58,190 --> 00:27:01,950
yeah I tend to not not try to do

00:27:00,930 --> 00:27:04,320
something unless we're gonna take over

00:27:01,950 --> 00:27:05,880
the world so yeah that that's the goal

00:27:04,320 --> 00:27:08,220
right now we have a lot of interest in

00:27:05,880 --> 00:27:09,840
bare metal embedded right arms licensing

00:27:08,220 --> 00:27:12,960
terms are somewhat onerous if you're a

00:27:09,840 --> 00:27:15,180
hardware vendor and people jump ship

00:27:12,960 --> 00:27:17,760
because it's cheaper or easier or that

00:27:15,180 --> 00:27:20,100
sort of stuff so we see winds in the

00:27:17,760 --> 00:27:21,420
embedded space some stuff in the deeply

00:27:20,100 --> 00:27:22,440
embedded space power management rollers

00:27:21,420 --> 00:27:24,180
that sort of stuff

00:27:22,440 --> 00:27:26,220
sigh five recently had a couple of

00:27:24,180 --> 00:27:28,920
public design wins in the SSD space

00:27:26,220 --> 00:27:30,470
right so like the kind of are serious

00:27:28,920 --> 00:27:34,080
stuff higher performance embedded things

00:27:30,470 --> 00:27:37,500
and then you know we have Linux capable

00:27:34,080 --> 00:27:38,940
stuff the cores because the I say is

00:27:37,500 --> 00:27:40,350
somewhat simpler the cores tend to be

00:27:38,940 --> 00:27:41,820
smaller this is part of the reason that

00:27:40,350 --> 00:27:45,270
we're not vulnerable to specter is

00:27:41,820 --> 00:27:49,500
because our five stage single-issue core

00:27:45,270 --> 00:27:50,940
has similar clock speed to a seven or

00:27:49,500 --> 00:27:52,650
eight stage arm core which makes it

00:27:50,940 --> 00:27:54,030
really easy to shoot down your loads

00:27:52,650 --> 00:27:55,770
before they get to the l1 it also makes

00:27:54,030 --> 00:27:57,750
everything lower power because your

00:27:55,770 --> 00:27:59,310
branch characters not as big you know

00:27:57,750 --> 00:28:01,140
your pipeline flushes aren't as

00:27:59,310 --> 00:28:03,120
expensive all that sort of stuff so

00:28:01,140 --> 00:28:04,110
there are you know design design reasons

00:28:03,120 --> 00:28:06,270
behind the I say that allow

00:28:04,110 --> 00:28:08,160
implementations to be slightly higher

00:28:06,270 --> 00:28:10,530
quality on risk five than on some other

00:28:08,160 --> 00:28:12,150
ISAs and that manifests itself as either

00:28:10,530 --> 00:28:14,490
a clock speed or power you know kind of

00:28:12,150 --> 00:28:15,630
that standard PPA put push yourself

00:28:14,490 --> 00:28:18,660
around wherever you want to go in the in

00:28:15,630 --> 00:28:19,830
the Asics pace I don't know if that's a

00:28:18,660 --> 00:28:25,820
nicer you request or not it's kind of

00:28:19,830 --> 00:28:25,820
all over the place yeah

00:28:30,310 --> 00:28:39,260
so yeah so there's a scheme okay so

00:28:34,310 --> 00:28:43,790
there's the ISA which is PDF right so

00:28:39,260 --> 00:28:45,200
the I say itself is versions there was

00:28:43,790 --> 00:28:49,970
version one which is for the first tape

00:28:45,200 --> 00:28:52,660
out which is gone and there is version 2

00:28:49,970 --> 00:28:54,830
and version 2 is what we intend to keep

00:28:52,660 --> 00:28:58,310
backwards-compatible forever so if

00:28:54,830 --> 00:28:59,630
something is in the ISA then it remains

00:28:58,310 --> 00:29:01,640
compatible so that means that if

00:28:59,630 --> 00:29:04,250
software can rely on our particular

00:29:01,640 --> 00:29:05,870
behavior like say you know the and

00:29:04,250 --> 00:29:09,220
instruction doing a particular thing

00:29:05,870 --> 00:29:12,830
right then that will continue to exist

00:29:09,220 --> 00:29:15,680
yeah so that's yeah so there's a whole

00:29:12,830 --> 00:29:18,440
story yeah yeah yeah

00:29:15,680 --> 00:29:20,510
so the I say manual itself is versions

00:29:18,440 --> 00:29:22,070
you know I think it's version 2.2 or

00:29:20,510 --> 00:29:23,900
something now there will be 2 point 3 to

00:29:22,070 --> 00:29:25,880
point 4 and the way this happens is that

00:29:23,900 --> 00:29:27,710
extensions are proposed to the ISA

00:29:25,880 --> 00:29:29,720
there's free encoding space in the ISA

00:29:27,710 --> 00:29:31,760
and those extensions once they're

00:29:29,720 --> 00:29:33,440
ratified is a proper specification by

00:29:31,760 --> 00:29:36,020
the wrist 5 Foundation are then locked

00:29:33,440 --> 00:29:39,380
in forever right so if you're a piece of

00:29:36,020 --> 00:29:41,240
software that depends on the 2.2 risk 5

00:29:39,380 --> 00:29:42,620
is a you're compatible with the 2.3 I

00:29:41,240 --> 00:29:44,510
say you're compatible with

00:29:42,620 --> 00:29:46,430
implementations and apply a 2.2 2.3 2.4

00:29:44,510 --> 00:29:48,050
all that sort of stuff if you want the

00:29:46,430 --> 00:29:51,320
new extensions then you need the new

00:29:48,050 --> 00:29:54,970
version of is a what the old extensions

00:29:51,320 --> 00:29:54,970
and the new is a never change

00:29:57,790 --> 00:30:02,500
yes yes GCC never stuff and then there's

00:30:01,030 --> 00:30:04,000
all the microarchitecture stuff and GCC

00:30:02,500 --> 00:30:05,110
like you'd expect but so the big thing

00:30:04,000 --> 00:30:08,080
we're working on right now Andres five

00:30:05,110 --> 00:30:09,370
land is a set of vector extensions with

00:30:08,080 --> 00:30:11,860
the base vector extensions and some

00:30:09,370 --> 00:30:14,590
vector extension extensions and so that

00:30:11,860 --> 00:30:16,540
will require large amounts of work all

00:30:14,590 --> 00:30:17,710
over the software stack that's part of

00:30:16,540 --> 00:30:19,360
the reason we really interest in LLVM

00:30:17,710 --> 00:30:20,860
because it's got some slightly more

00:30:19,360 --> 00:30:24,070
advanced advanced middle-end

00:30:20,860 --> 00:30:26,050
vectorization stuff going on but you in

00:30:24,070 --> 00:30:27,610
GCC land we plan on supporting the the

00:30:26,050 --> 00:30:29,860
breadth of Auto vectorization that's

00:30:27,610 --> 00:30:31,420
available in GCC standard sets of

00:30:29,860 --> 00:30:32,740
intrinsics and there's lots of

00:30:31,420 --> 00:30:34,690
discussion going on right now about

00:30:32,740 --> 00:30:35,860
things like a B is for a respecter

00:30:34,690 --> 00:31:01,720
extension those sort of things which are

00:30:35,860 --> 00:31:04,420
kind of very exciting yeah so the it

00:31:01,720 --> 00:31:10,590
would be a different extension not an I

00:31:04,420 --> 00:31:15,040
mean so there is a kind of cohesive

00:31:10,590 --> 00:31:16,990
scheme for describing what instructions

00:31:15,040 --> 00:31:18,640
are available on what respired

00:31:16,990 --> 00:31:20,410
implementation so that includes

00:31:18,640 --> 00:31:23,710
versioning with versioning of extensions

00:31:20,410 --> 00:31:25,330
where you can make a v3 of an extension

00:31:23,710 --> 00:31:26,620
that's no longer backwards compatible or

00:31:25,330 --> 00:31:29,860
something like that and then software

00:31:26,620 --> 00:31:31,300
can query the platform to determine what

00:31:29,860 --> 00:31:32,890
environment am i running in and you can

00:31:31,300 --> 00:31:36,160
hook that into things like ifonx or

00:31:32,890 --> 00:31:40,690
whatever we expose that to user space

00:31:36,160 --> 00:31:43,450
through the elf hardware cap ox vac

00:31:40,690 --> 00:31:44,920
stuff which is not flexible enough for

00:31:43,450 --> 00:31:47,620
what we want right now but that will

00:31:44,920 --> 00:31:50,590
grow as we grow the extension and then

00:31:47,620 --> 00:31:53,980
we do things like in code into object

00:31:50,590 --> 00:31:55,660
files some relevant bits of abis and you

00:31:53,980 --> 00:31:57,310
know to make sure that you don't miss

00:31:55,660 --> 00:31:58,240
link stuff there so there's a whole it's

00:31:57,310 --> 00:31:59,530
it kind of flows through the whole

00:31:58,240 --> 00:32:01,540
software stack and it's all been

00:31:59,530 --> 00:32:04,840
designed really such that you know like

00:32:01,540 --> 00:32:06,790
one tool chain can generate code for all

00:32:04,840 --> 00:32:07,990
of the various extensions and you can

00:32:06,790 --> 00:32:08,950
detect them and you can look at the

00:32:07,990 --> 00:32:10,060
object though so the whole the whole

00:32:08,950 --> 00:32:11,320
thing was really designed to allow for

00:32:10,060 --> 00:32:14,950
flexibility and mixer map

00:32:11,320 --> 00:32:16,300
besides the Debian port is and Fedora

00:32:14,950 --> 00:32:17,800
ports are both the single Lib right now

00:32:16,300 --> 00:32:20,020
but we have a multi lip scheme and you

00:32:17,800 --> 00:32:24,940
could build multi Lib distribution that

00:32:20,020 --> 00:32:26,170
supports the dozen or so is a ABI combos

00:32:24,940 --> 00:32:33,990
that we think are interesting in Linux

00:32:26,170 --> 00:32:33,990
land any other questions

00:32:38,400 --> 00:32:50,230
DNA and I oh yeah so okay so okay so we

00:32:47,530 --> 00:32:51,550
have a weak memory model but within that

00:32:50,230 --> 00:32:54,610
weak memory model everything this

00:32:51,550 --> 00:32:56,980
coherent right aside from the device

00:32:54,610 --> 00:32:58,000
stuff right so all the cores are

00:32:56,980 --> 00:32:59,380
coherent across the thing if you're

00:32:58,000 --> 00:33:01,600
building a standard platform Linux

00:32:59,380 --> 00:33:03,160
system right so that's kind of all taken

00:33:01,600 --> 00:33:04,660
care of by the memory model least as far

00:33:03,160 --> 00:33:06,730
as Linux systems are concerned some

00:33:04,660 --> 00:33:10,810
deeply embedded stuff is weirder but

00:33:06,730 --> 00:33:13,000
that's kind of just life so for the i/o

00:33:10,810 --> 00:33:13,600
stuff we don't have a great story for it

00:33:13,000 --> 00:33:16,570
right now

00:33:13,600 --> 00:33:19,750
so in risk v land the mechanism by which

00:33:16,570 --> 00:33:22,150
you order memory accesses is something

00:33:19,750 --> 00:33:23,860
called a fence so there's a fence

00:33:22,150 --> 00:33:25,960
instruction the fence has bits on that

00:33:23,860 --> 00:33:27,370
instruction that order instruction or

00:33:25,960 --> 00:33:29,560
order accesses of a particular type

00:33:27,370 --> 00:33:32,230
against accesses of a different set of

00:33:29,560 --> 00:33:34,540
types and the types there are read and

00:33:32,230 --> 00:33:36,100
write input and output so for learner

00:33:34,540 --> 00:33:38,260
model specifies what read and write mean

00:33:36,100 --> 00:33:40,000
and then that filters into all the AM

00:33:38,260 --> 00:33:41,800
O's and that we have LRS see a lot sort

00:33:40,000 --> 00:33:44,260
of stuff but it does not specify what

00:33:41,800 --> 00:33:47,710
Ino mean and so the next memory model

00:33:44,260 --> 00:33:53,340
group is to specify what Ino means and

00:33:47,710 --> 00:33:57,010
then probably add mechanisms for

00:33:53,340 --> 00:33:58,750
discussing you know noncoherent you say

00:33:57,010 --> 00:34:00,820
like a non community main device in the

00:33:58,750 --> 00:34:03,030
context of a risk five memory model

00:34:00,820 --> 00:34:09,260
which is a very complicated thing to do

00:34:03,030 --> 00:34:11,190
but it doesn't need to get done so

00:34:09,260 --> 00:34:12,660
we have graphics working right now

00:34:11,190 --> 00:34:14,580
because I have system on the chip is

00:34:12,660 --> 00:34:16,800
super simple everything is you know the

00:34:14,580 --> 00:34:19,250
the basically the entire i/o subsystem

00:34:16,800 --> 00:34:23,420
single point of coherence in order one

00:34:19,250 --> 00:34:28,320
one outstanding request for core so it's

00:34:23,420 --> 00:34:29,280
easy it's slow that would that will get

00:34:28,320 --> 00:34:31,800
fixed but that's one of those things

00:34:29,280 --> 00:34:34,650
where we want to make sure that when we

00:34:31,800 --> 00:34:36,900
do a silicon implant ation that we are

00:34:34,650 --> 00:34:38,610
not particularly aggressive about things

00:34:36,900 --> 00:34:41,610
that have not been standardized because

00:34:38,610 --> 00:34:44,520
basically you know sequentially

00:34:41,610 --> 00:34:47,280
consistent IO system will be compatible

00:34:44,520 --> 00:34:49,740
with any i/o memory model right

00:34:47,280 --> 00:34:53,760
so we're basically safe if that makes

00:34:49,740 --> 00:34:55,530
sense maybe I'm wrong about that yeah oh

00:34:53,760 --> 00:34:57,450
that's the current theory is to try to n

00:34:55,530 --> 00:34:59,130
do this is small run first board that

00:34:57,450 --> 00:35:01,230
kind of stuff but the goal is to avoid

00:34:59,130 --> 00:35:04,590
taking advantage of things that are

00:35:01,230 --> 00:35:05,940
either weakly specified or informally

00:35:04,590 --> 00:35:07,770
specified or those sort of things in

00:35:05,940 --> 00:35:09,600
them particularly in the memory space

00:35:07,770 --> 00:35:11,490
because you can really get yourself into

00:35:09,600 --> 00:35:14,100
a lot of trouble if you have systems

00:35:11,490 --> 00:35:15,300
that perform as I'm sure everywhere of

00:35:14,100 --> 00:35:16,980
systems that have all the weird

00:35:15,300 --> 00:35:18,210
reorderings right you read the read the

00:35:16,980 --> 00:35:19,260
stuff and you can get yourself into a

00:35:18,210 --> 00:35:20,430
lot of trouble if you've got a lot of

00:35:19,260 --> 00:35:22,650
those floating around so we're trying to

00:35:20,430 --> 00:35:25,040
avoid that but the spec is the important

00:35:22,650 --> 00:35:25,040
thing to work on

00:35:26,450 --> 00:35:37,180
I have spent a lot of time reading a lot

00:35:33,230 --> 00:35:37,180
of stuff yeah

00:35:43,310 --> 00:35:50,220
yeah I so yeah we so basically the it's

00:35:47,790 --> 00:35:54,359
all informally specified right now right

00:35:50,220 --> 00:35:56,430
so we have in our IO dot H right we've

00:35:54,359 --> 00:35:58,859
got the suite of functions that you

00:35:56,430 --> 00:36:01,349
would expect and they have the fences

00:35:58,859 --> 00:36:03,330
that I think they should have basically

00:36:01,349 --> 00:36:06,119
as I wrote it right there's no formal

00:36:03,330 --> 00:36:08,099
model describing what those fences do so

00:36:06,119 --> 00:36:10,560
a legal risk Bob implementation could

00:36:08,099 --> 00:36:13,320
treat those fences as nothing right

00:36:10,560 --> 00:36:15,240
there's a line in the draft platform

00:36:13,320 --> 00:36:17,609
specification that says don't be an

00:36:15,240 --> 00:36:19,290
idiot and that's good enough for now but

00:36:17,609 --> 00:36:20,369
we really do need we really need a

00:36:19,290 --> 00:36:21,869
formal spec for it it's it's that's a

00:36:20,369 --> 00:36:24,540
really hard formal specter right so it's

00:36:21,869 --> 00:36:26,580
all there and for the the weak memory

00:36:24,540 --> 00:36:29,010
model before that was standardized we

00:36:26,580 --> 00:36:31,800
had you know atomic state H right and

00:36:29,010 --> 00:36:33,660
that was implemented with the

00:36:31,800 --> 00:36:34,950
one-paragraph memory model it's a weak

00:36:33,660 --> 00:36:37,380
memory model release consistency that

00:36:34,950 --> 00:36:39,630
sort of stuff and that more or less

00:36:37,380 --> 00:36:42,180
matched what is in the kernel currently

00:36:39,630 --> 00:36:43,890
aside from a couple of issues so we're

00:36:42,180 --> 00:36:45,270
probably most of the way there but with

00:36:43,890 --> 00:36:48,590
my model stuff most of the way there is

00:36:45,270 --> 00:36:48,590
not good okay

00:36:48,930 --> 00:36:52,220
any other questions

00:36:53,980 --> 00:36:56,010
Oh

00:36:59,400 --> 00:37:03,679

YouTube URL: https://www.youtube.com/watch?v=57Qgif69LBE


