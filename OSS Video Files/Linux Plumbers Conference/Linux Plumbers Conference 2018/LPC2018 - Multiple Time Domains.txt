Title: LPC2018 - Multiple Time Domains
Publication date: 2018-11-28
Playlist: Linux Plumbers Conference 2018
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/266/
speaker:  Thomas Gleixner
Captions: 
	00:00:05,680 --> 00:00:17,539
okay so this was my stage until a couple

00:00:11,059 --> 00:00:23,420
of weeks ago then this came in and

00:00:17,539 --> 00:00:27,590
that's how it ended blame it all on the

00:00:23,420 --> 00:00:31,870
Container people now actually there's

00:00:27,590 --> 00:00:35,690
more it's not only containers self but

00:00:31,870 --> 00:00:38,420
I'm thinking about introducing something

00:00:35,690 --> 00:00:42,800
which I called name multiple time

00:00:38,420 --> 00:00:49,070
domains so what do the container people

00:00:42,800 --> 00:00:52,039
want they actually have a problem when

00:00:49,070 --> 00:00:56,539
they migrate containers from one machine

00:00:52,039 --> 00:01:03,469
to another because clock monotonic and

00:00:56,539 --> 00:01:06,470
the target machine might be behind clock

00:01:03,469 --> 00:01:09,140
monotonic on the source which then

00:01:06,470 --> 00:01:12,770
breaks the guarantee that clock monitor

00:01:09,140 --> 00:01:20,600
onyx is never going backwards so they're

00:01:12,770 --> 00:01:22,840
surprised I can't understand that and so

00:01:20,600 --> 00:01:25,800
we need to do something about that I

00:01:22,840 --> 00:01:32,640
don't want to bet

00:01:25,800 --> 00:01:39,740
I can't make containers go away so or is

00:01:32,640 --> 00:01:43,590
there something we can do about them but

00:01:39,740 --> 00:01:59,460
chocolate with poison and great orange

00:01:43,590 --> 00:02:06,330
you have chocolate okay

00:01:59,460 --> 00:02:10,520
five minutes from now problem soul okay

00:02:06,330 --> 00:02:14,250
then a wonderful disgusting this

00:02:10,520 --> 00:02:21,840
somebody came up with NTP in containers

00:02:14,250 --> 00:02:25,800
I was asking why would you do that okay

00:02:21,840 --> 00:02:30,810
the answer was there or people who want

00:02:25,800 --> 00:02:33,510
to use this totally broken Google NTP

00:02:30,810 --> 00:02:38,010
servers while others want to use real

00:02:33,510 --> 00:02:40,590
NTP service actually the Google NTP

00:02:38,010 --> 00:02:43,739
server is broken because it's mere sleep

00:02:40,590 --> 00:02:45,870
seven seconds which then affects the

00:02:43,739 --> 00:02:49,709
underlying clock monotonic which is not

00:02:45,870 --> 00:02:52,020
exposing many seconds anymore so but

00:02:49,709 --> 00:02:54,840
that's accuracy problem problem and

00:02:52,020 --> 00:02:57,330
Google doesn't care about that and

00:02:54,840 --> 00:02:59,489
whatever I don't don't know why I have

00:02:57,330 --> 00:03:03,980
to smear the leap seconds but let's

00:02:59,489 --> 00:03:06,330
knock out here so the question is and

00:03:03,980 --> 00:03:08,550
really think hard about it

00:03:06,330 --> 00:03:12,660
is this a real use case or is this just

00:03:08,550 --> 00:03:16,470
a request for ponies because it's just

00:03:12,660 --> 00:03:19,350
in the we want ponies real well you

00:03:16,470 --> 00:03:22,920
really want to avoid that I explained it

00:03:19,350 --> 00:03:24,080
why later so we have similar issues

00:03:22,920 --> 00:03:30,970
around that

00:03:24,080 --> 00:03:34,750
TSM right Pearson's back says the clock

00:03:30,970 --> 00:03:39,300
rent lock monster serves clock tie which

00:03:34,750 --> 00:03:44,550
is tie time in Para Tomic international

00:03:39,300 --> 00:03:49,710
which is well defined but then certain

00:03:44,550 --> 00:03:55,090
areas in the industry like automotive

00:03:49,710 --> 00:03:56,320
industrial automation and others came up

00:03:55,090 --> 00:04:01,300
with the brilliant idea

00:03:56,320 --> 00:04:04,120
oh we just take a branded box and say

00:04:01,300 --> 00:04:08,500
this is the grant block monster and it

00:04:04,120 --> 00:04:13,330
starts at the pole so what happens well

00:04:08,500 --> 00:04:18,250
why can't this go wrong the wait the

00:04:13,330 --> 00:04:20,170
Kuna timekeeping works is that clock

00:04:18,250 --> 00:04:23,590
reading time is a offset to clock

00:04:20,170 --> 00:04:27,040
monotonic and it's coupled so we adjust

00:04:23,590 --> 00:04:31,720
the frequency of clock monotonic with

00:04:27,040 --> 00:04:34,000
NTP in order to have proper time for a

00:04:31,720 --> 00:04:36,610
proper frequency adjustment for clock

00:04:34,000 --> 00:04:45,610
over not only as well which makes a lot

00:04:36,610 --> 00:04:53,200
of sense but due to that if the slave

00:04:45,610 --> 00:04:55,419
side boots first and then the grant

00:04:53,200 --> 00:04:59,350
block master stores distributing time

00:04:55,419 --> 00:05:01,720
and says it's a part now say the slaves

00:04:59,350 --> 00:05:05,940
that might be far enough and that we

00:05:01,720 --> 00:05:09,780
can't adjust the offset because then

00:05:05,940 --> 00:05:09,780
non-monotonic would become negative

00:05:10,680 --> 00:05:21,790
we have sanity check for that in in the

00:05:16,960 --> 00:05:25,080
kernel and so we reject that which

00:05:21,790 --> 00:05:25,080
breaks their use case

00:05:25,590 --> 00:05:35,460
yeah I fear we can't do anything about

00:05:29,340 --> 00:06:16,200
that because they are going to this time

00:05:35,460 --> 00:06:18,240
we have to say okay from the pitch peep

00:06:16,200 --> 00:06:21,360
encode as far as I know and userspace

00:06:18,240 --> 00:06:24,840
doesn't even use clock tired uses clock

00:06:21,360 --> 00:06:33,060
real time and then adds the offset

00:06:24,840 --> 00:06:35,520
manually yes product the same I just

00:06:33,060 --> 00:06:37,950
mean the ex post worked I threw that yes

00:06:35,520 --> 00:06:45,780
it's it's work you need to have both

00:06:37,950 --> 00:06:49,110
Clark tie and Clark real time yeah which

00:06:45,780 --> 00:06:57,300
is also interesting they have something

00:06:49,110 --> 00:07:00,600
like a second time synchronization but

00:06:57,300 --> 00:07:02,940
that frequency is something the random

00:07:00,600 --> 00:07:06,870
tree for free frequent crystal frequency

00:07:02,940 --> 00:07:11,190
of today so it's not giving you anything

00:07:06,870 --> 00:07:16,720
accurate in terms of nanoseconds it's

00:07:11,190 --> 00:07:21,550
something but those people

00:07:16,720 --> 00:07:26,890
to have this private exposed so they can

00:07:21,550 --> 00:07:30,190
have applications excessive and on

00:07:26,890 --> 00:07:34,540
timers based on that on that clock stuff

00:07:30,190 --> 00:07:36,970
and we kinda support that's with so that

00:07:34,540 --> 00:07:40,720
the father's grip the pace POSIX nuts

00:07:36,970 --> 00:07:42,430
which are dynamically installed but

00:07:40,720 --> 00:07:50,020
there's no way that we could ever

00:07:42,430 --> 00:07:52,180
exposed my with yourself why can't

00:07:50,020 --> 00:07:58,120
people just agree that a nanosecond it's

00:07:52,180 --> 00:08:01,150
a nanosecond so if you think about time

00:07:58,120 --> 00:08:05,740
domain so what could we do to address

00:08:01,150 --> 00:08:07,900
those problems so one is the clock

00:08:05,740 --> 00:08:11,140
monotonic and boot time thing for

00:08:07,900 --> 00:08:15,760
containers is office reasonably easy to

00:08:11,140 --> 00:08:18,310
do it's offsets so you basically when

00:08:15,760 --> 00:08:22,419
you store to migrate the container you

00:08:18,310 --> 00:08:28,360
say my offset for clock monotonic is X

00:08:22,419 --> 00:08:31,540
and then you know there are a few things

00:08:28,360 --> 00:08:32,130
to do about that but we talk about that

00:08:31,540 --> 00:08:37,000
later

00:08:32,130 --> 00:08:40,599
so man I might use the time domains to

00:08:37,000 --> 00:08:45,160
hide that diluted clock time and also

00:08:40,599 --> 00:08:47,470
give the industrial people some access

00:08:45,160 --> 00:08:52,120
to the air PPS derivatives clock

00:08:47,470 --> 00:08:57,100
monotonic so we could and actively make

00:08:52,120 --> 00:08:59,200
useful use of containers until now I

00:08:57,100 --> 00:09:01,330
never understood the content behind

00:08:59,200 --> 00:09:02,480
containers but actually now I just

00:09:01,330 --> 00:09:10,399
thought to like them

00:09:02,480 --> 00:09:14,440
because they allow me to hide crap but I

00:09:10,399 --> 00:09:19,120
have to add crap in order to hide crap

00:09:14,440 --> 00:09:23,269
there's something wrong with that so

00:09:19,120 --> 00:09:26,769
let's talk about the protein testing

00:09:23,269 --> 00:09:31,339
I thought about it for a very long time

00:09:26,769 --> 00:09:36,199
so right now the update of the after

00:09:31,339 --> 00:09:39,740
hosts after only same time domain on the

00:09:36,199 --> 00:09:42,170
system happens in the tick so now I

00:09:39,740 --> 00:09:44,630
assume you have that wasn't nighttime

00:09:42,170 --> 00:09:48,889
name spaces because container people

00:09:44,630 --> 00:09:50,990
thinking that category ciphers and all

00:09:48,889 --> 00:09:56,480
what to have their particular offset

00:09:50,990 --> 00:09:58,519
because they're all special yeah that

00:09:56,480 --> 00:10:02,440
make right it that make right every two

00:09:58,519 --> 00:10:05,060
seconds between around whatever plus

00:10:02,440 --> 00:10:08,660
cluster and everything is different in

00:10:05,060 --> 00:10:10,820
great share a thought about how to do

00:10:08,660 --> 00:10:13,430
that because you can't eat the rathe

00:10:10,820 --> 00:10:15,529
thousands of namespaces in the time

00:10:13,430 --> 00:10:19,010
attic because that would take to the

00:10:15,529 --> 00:10:21,649
next climatic so you basically spend one

00:10:19,010 --> 00:10:27,140
CPU updating all the time domains all

00:10:21,649 --> 00:10:31,670
the time I mean people might buy their I

00:10:27,140 --> 00:10:34,740
think it's not what they really want

00:10:31,670 --> 00:10:40,380
so what we can do because on context

00:10:34,740 --> 00:10:43,019
switch we know that the I I don't want

00:10:40,380 --> 00:10:46,350
to try it to nine spaces right now I I

00:10:43,019 --> 00:10:48,990
just say the time the main changes we

00:10:46,350 --> 00:10:50,880
can easily access that because we have

00:10:48,990 --> 00:10:54,149
older the information we have testicles

00:10:50,880 --> 00:10:56,279
previous and next asks for cash hot so

00:10:54,149 --> 00:11:00,630
it's it shouldn't be that hard to figure

00:10:56,279 --> 00:11:03,120
that out and then go dear okay we

00:11:00,630 --> 00:11:06,149
switched the time-domain at that chest

00:11:03,120 --> 00:11:06,690
peak is it is enough depending for that

00:11:06,149 --> 00:11:11,310
thing

00:11:06,690 --> 00:11:15,329
if yes go in here that needs locking but

00:11:11,310 --> 00:11:17,220
we have the locking on the regular timer

00:11:15,329 --> 00:11:22,050
update as well and we can compete on

00:11:17,220 --> 00:11:27,180
that lock we try to avoid it say the

00:11:22,050 --> 00:11:30,029
first after this period where we don't

00:11:27,180 --> 00:11:33,240
have to update but when we get no

00:11:30,029 --> 00:11:36,329
runnable again with some user of that

00:11:33,240 --> 00:11:39,690
time domain and this is going the guy

00:11:36,329 --> 00:11:43,260
who updates that thing and it's also

00:11:39,690 --> 00:11:45,990
good because the CPU time wasted for

00:11:43,260 --> 00:11:48,570
that is charged on that guy

00:11:45,990 --> 00:11:51,600
so you're not but the rest is conduct

00:11:48,570 --> 00:11:55,050
stealing and I hated to do wrong things

00:11:51,600 --> 00:11:59,660
content stealing which can't get

00:11:55,050 --> 00:11:59,660
accounted to those who who requested it

00:12:00,470 --> 00:12:07,020
I've heard but if we go to your suit

00:12:04,110 --> 00:12:09,870
there are a lot of other things we can

00:12:07,020 --> 00:12:11,190
fix but one thing and I think the

00:12:09,870 --> 00:12:13,260
question didn't come up in the

00:12:11,190 --> 00:12:16,520
discussion on I'll came out what about

00:12:13,260 --> 00:12:16,520
the file change terms

00:12:18,500 --> 00:12:24,990
yeah just what you asked it I didn't

00:12:24,060 --> 00:12:35,910
expect an answer

00:12:24,990 --> 00:12:42,360
oh yes you might hear sure so so there's

00:12:35,910 --> 00:12:46,380
a patch set was posted as an RFC it was

00:12:42,360 --> 00:12:48,930
a cage some things I didn't really like

00:12:46,380 --> 00:12:51,540
especially in the video cellar so what

00:12:48,930 --> 00:12:57,170
we really want to do if we go to yes

00:12:51,540 --> 00:13:01,280
just have a full day per time domain

00:12:57,170 --> 00:13:03,870
radius all data mapping which you then

00:13:01,280 --> 00:13:06,120
which we then can't with the context

00:13:03,870 --> 00:13:09,870
switch because it's tied to that process

00:13:06,120 --> 00:13:12,930
which runs in that time domain so we

00:13:09,870 --> 00:13:16,170
don't have the main lookups in that in

00:13:12,930 --> 00:13:19,800
that area which is horrible performance

00:13:16,170 --> 00:13:22,830
was in we would have to do that the main

00:13:19,800 --> 00:13:26,760
lookup even for the regular use case

00:13:22,830 --> 00:13:28,740
where we don't use time domains in order

00:13:26,760 --> 00:13:31,680
to figure out that we don't have a time

00:13:28,740 --> 00:13:33,200
limit or we are in the routes time

00:13:31,680 --> 00:13:37,490
domain

00:13:33,200 --> 00:13:40,579
so eight our timers so the patch that

00:13:37,490 --> 00:13:44,000
fixed all the cool sites and to address

00:13:40,579 --> 00:13:46,639
the nine spicy thing which we don't want

00:13:44,000 --> 00:13:50,449
to do that we want to provide an

00:13:46,639 --> 00:13:53,600
interface where we can say start HR time

00:13:50,449 --> 00:13:55,880
and I'm space of ear and then this does

00:13:53,600 --> 00:13:58,459
the right thing so and we have all that

00:13:55,880 --> 00:14:02,709
crap in one central phrase because

00:13:58,459 --> 00:14:02,709
what's going to happen if we do that at

00:14:03,970 --> 00:14:12,620
at the school level mayor we form those

00:14:08,720 --> 00:14:16,100
timers then this is going to be copied

00:14:12,620 --> 00:14:20,290
over from once it's cool together and

00:14:16,100 --> 00:14:22,880
then modified and everything is

00:14:20,290 --> 00:14:26,149
differently welcome and we don't want to

00:14:22,880 --> 00:14:31,160
cover here so really please if if you

00:14:26,149 --> 00:14:33,709
look at that again make that a core

00:14:31,160 --> 00:14:37,399
infrastructure thing change all the

00:14:33,709 --> 00:14:42,680
colors we have now which are affected by

00:14:37,399 --> 00:14:44,690
that to that new interface which is no

00:14:42,680 --> 00:14:46,850
functional change in the first place and

00:14:44,690 --> 00:14:52,880
then we can add the time the main stuff

00:14:46,850 --> 00:15:00,560
in there so now this is all the easy

00:14:52,880 --> 00:15:06,740
part file x times device timestamps and

00:15:00,560 --> 00:15:09,370
prog Krakus do wanna think by some

00:15:06,740 --> 00:15:09,370
definition

00:15:09,560 --> 00:15:16,670
the wires time stance that's a lot of

00:15:12,170 --> 00:15:18,920
manual inspection required the problem

00:15:16,670 --> 00:15:21,140
is the wireless time stamps is that the

00:15:18,920 --> 00:15:24,400
time steps are taken in context which

00:15:21,140 --> 00:15:28,790
have no clue about the namespace

00:15:24,400 --> 00:15:32,420
interrupt soft interrupt whatever so and

00:15:28,790 --> 00:15:35,090
then we have interfaces which expense

00:15:32,420 --> 00:15:39,260
that information to use a space but

00:15:35,090 --> 00:15:42,860
whether they use the space Kier's about

00:15:39,260 --> 00:15:48,980
that we don't know but we came to change

00:15:42,860 --> 00:15:52,700
the semantics of that so we you have to

00:15:48,980 --> 00:15:56,480
come to those interfaces at the school

00:15:52,700 --> 00:15:59,480
level and and do the correction into my

00:15:56,480 --> 00:16:02,360
random time domain so input is one of

00:15:59,480 --> 00:16:05,090
the places but most applications won't

00:16:02,360 --> 00:16:11,240
care because they just look at the Delta

00:16:05,090 --> 00:16:13,250
but do we know our sockets are the big

00:16:11,240 --> 00:16:22,790
one I think well socket time stamps I

00:16:13,250 --> 00:16:25,010
said no sir oh yes that concrete of time

00:16:22,790 --> 00:16:27,380
yes yeah so if we don't have the pony

00:16:25,010 --> 00:16:32,000
thing we don't have to worry about that

00:16:27,380 --> 00:16:34,000
correct so adios and then you don't have

00:16:32,000 --> 00:16:38,540
to worry about fun times times either

00:16:34,000 --> 00:16:44,780
correct yes so only a audio/video file

00:16:38,540 --> 00:16:46,850
in Oaks DRM input so dr. Oren he knows

00:16:44,780 --> 00:16:53,120
all the places because he's fixing them

00:16:46,850 --> 00:16:57,520
for 2038 so he used them he's the guy

00:16:53,120 --> 00:16:57,520
who knows all that so

00:17:07,140 --> 00:17:11,790
you have to actually travel that fast I

00:17:16,620 --> 00:17:21,270
I guess I I want to say from what what

00:17:19,360 --> 00:17:24,850
I've heard in discussions and stuff

00:17:21,270 --> 00:17:27,160
length of the second varying is probably

00:17:24,850 --> 00:17:31,270
it's quite positive probably poke ponies

00:17:27,160 --> 00:17:34,980
but actually that there may be somebody

00:17:31,270 --> 00:17:34,980
who wants to mess with clock real time

00:17:39,690 --> 00:17:42,690
including

00:17:55,809 --> 00:18:02,150
yeah but yeah that's the problem

00:17:59,120 --> 00:18:04,850
because we only have if you adjusted it

00:18:02,150 --> 00:18:07,520
in one container it affects everybody

00:18:04,850 --> 00:18:11,029
else or something like that and we're

00:18:07,520 --> 00:18:12,620
wondering do we want do we care if the

00:18:11,029 --> 00:18:18,650
link to the second is a system-wide

00:18:12,620 --> 00:18:22,400
parameter only have one then you should

00:18:18,650 --> 00:18:24,080
have the host and containers and the

00:18:22,400 --> 00:18:26,659
answer is the only use case we would

00:18:24,080 --> 00:18:28,130
think of it for it was testing and if

00:18:26,659 --> 00:18:49,039
that's the only use case I don't think

00:18:28,130 --> 00:19:00,679
we want to do it that poison thing

00:18:49,039 --> 00:19:05,899
didn't breathe so I think the time

00:19:00,679 --> 00:19:09,580
domains whether we tied into namespaces

00:19:05,899 --> 00:19:12,830
or have something else which is less

00:19:09,580 --> 00:19:16,460
horrible to work with for the automation

00:19:12,830 --> 00:19:21,350
people but I think when those folks who

00:19:16,460 --> 00:19:24,559
run diluted ty grant blockbusters they

00:19:21,350 --> 00:19:30,380
should be punished by being forced to

00:19:24,559 --> 00:19:34,990
use containers so anything else what

00:19:30,380 --> 00:19:34,990
people want from time to time

00:19:35,850 --> 00:19:42,880
or or your only all happy with our

00:19:40,150 --> 00:19:47,080
timekeeping that's great that happened

00:19:42,880 --> 00:19:49,750
to her dad and it was like missed out

00:19:47,080 --> 00:19:51,309
okay the other one that I'm thinking

00:19:49,750 --> 00:19:54,070
there might be a little problematic is

00:19:51,309 --> 00:19:57,280
the relationship between clock monotonic

00:19:54,070 --> 00:19:58,960
and o'clock monotonic raw and so we may

00:19:57,280 --> 00:20:02,770
have to do some more work to make sure

00:19:58,960 --> 00:20:04,750
though yeah not ton across also you know

00:20:02,770 --> 00:20:07,750
doesn't go backwards or you know that so

00:20:04,750 --> 00:20:10,059
and that's a little Messier too so yeah

00:20:07,750 --> 00:20:12,820
look monotone eager all might be a

00:20:10,059 --> 00:20:26,799
problem but on the other hand look

00:20:12,820 --> 00:20:30,010
mother to me grow it's it's wrong so I

00:20:26,799 --> 00:20:34,330
mean really this yeah they don't make

00:20:30,010 --> 00:20:36,010
that guarantee some beer are you made

00:20:34,330 --> 00:20:40,059
something up and now work you're

00:20:36,010 --> 00:20:42,429
imposing it on me yeah let's let's be

00:20:40,059 --> 00:20:45,760
realistic here if the use cases

00:20:42,429 --> 00:20:47,559
container migration it's unlikely that

00:20:45,760 --> 00:20:51,429
you can actually migrate in under a

00:20:47,559 --> 00:20:59,289
second and so you may be able to fudge

00:20:51,429 --> 00:21:04,150
clock monotonic raw it it's the same

00:20:59,289 --> 00:21:05,770
same problem we need we need it oh yeah

00:21:04,150 --> 00:21:08,080
yep I think you just solve it with an

00:21:05,770 --> 00:21:16,330
offset that's why I'm saying no we can't

00:21:08,080 --> 00:21:18,820
because if it's not going to be this yes

00:21:16,330 --> 00:21:22,659
we can't just add another offset that

00:21:18,820 --> 00:21:25,600
works but actually if wanted to control

00:21:22,659 --> 00:21:30,580
it's going to be a difference between

00:21:25,600 --> 00:21:33,030
two machines depending on how the TSE or

00:21:30,580 --> 00:21:38,540
whatever is the underlying clock source

00:21:33,030 --> 00:21:42,290
is clocked it might have a difference

00:21:38,540 --> 00:21:46,880
the conversion factor that that means

00:21:42,290 --> 00:21:52,960
the correlation between raw and real

00:21:46,880 --> 00:21:56,320
monotonic is not longer the same but ya

00:21:52,960 --> 00:21:59,120
know we are not going to correct that

00:21:56,320 --> 00:22:04,910
yes is anyone going to care right or

00:21:59,120 --> 00:22:07,220
notice yeah probably not yeah but but

00:22:04,910 --> 00:22:09,770
that's a that use case we're where

00:22:07,220 --> 00:22:13,310
people start that's where you really

00:22:09,770 --> 00:22:15,770
have to correlate hardware yeah it's

00:22:13,310 --> 00:22:17,600
mostly just the aspect of the

00:22:15,770 --> 00:22:20,210
relationship between them is connected

00:22:17,600 --> 00:22:21,500
to kind of the NTP state and so if we're

00:22:20,210 --> 00:22:23,270
saying well we're not really caring

00:22:21,500 --> 00:22:28,130
about the NTP State but then these

00:22:23,270 --> 00:22:32,270
values but that NTP in containers is a

00:22:28,130 --> 00:22:34,370
really really bad idea then I'm not

00:22:32,270 --> 00:22:36,110
convinced about the monitoring Drago so

00:22:34,370 --> 00:22:38,600
the the problem is right now the state

00:22:36,110 --> 00:22:41,060
is half the time after migration our

00:22:38,600 --> 00:22:42,980
clock monotonic goes backwards and we

00:22:41,060 --> 00:22:44,450
can definitely detect that and people

00:22:42,980 --> 00:22:44,810
get very angry and we're trying to fix

00:22:44,450 --> 00:22:47,960
it

00:22:44,810 --> 00:22:51,670
if we fix monotonic and we make

00:22:47,960 --> 00:22:55,340
monotonic draw almost work then it will

00:22:51,670 --> 00:22:57,140
probably work 99% of the time but it's

00:22:55,340 --> 00:23:00,740
still sometimes broken and people won't

00:22:57,140 --> 00:23:02,960
know that it's broken I mean if we fix

00:23:00,740 --> 00:23:05,890
it with the offset that is that is

00:23:02,960 --> 00:23:05,890
perfectly doable

00:23:12,190 --> 00:23:19,130
and in the content yeah it would have to

00:23:17,390 --> 00:23:21,670
be the same before and after the

00:23:19,130 --> 00:23:25,220
migration that that would work yes that

00:23:21,670 --> 00:23:28,370
we could do that if you're going to your

00:23:25,220 --> 00:23:32,420
own time domain and say make this a

00:23:28,370 --> 00:23:39,530
property of the of the of the namespace

00:23:32,420 --> 00:23:41,510
and say fake monotonic draw and we just

00:23:39,530 --> 00:23:43,970
let you read out monotonic yeah we'd

00:23:41,510 --> 00:23:46,160
have to then hide the NTP state as well

00:23:43,970 --> 00:23:48,260
but we need to hide the NTP state as

00:23:46,160 --> 00:23:54,410
well so no nobody has inconsistent to

00:23:48,260 --> 00:23:57,440
use a point so the only ones who are

00:23:54,410 --> 00:24:01,010
allowed to you look at NTP state is

00:23:57,440 --> 00:24:05,600
routed right on the root domain so

00:24:01,010 --> 00:24:15,710
nobody else so we just say you're a

00:24:05,600 --> 00:24:18,130
namespace go by yeah yeah we can just we

00:24:15,710 --> 00:24:21,130
can't just give them what they asked for

00:24:18,130 --> 00:24:21,130
random

00:24:23,039 --> 00:24:28,229
they want to do random things then we

00:24:25,690 --> 00:24:32,379
can't give them or anything so it's easy

00:24:28,229 --> 00:24:35,469
we're happy to serve you that now we can

00:24:32,379 --> 00:24:41,219
return zero of course okay anything else

00:24:35,469 --> 00:24:41,219
would might break what people care about

00:24:46,979 --> 00:24:51,909
when I now have to have my VDS will be

00:24:49,809 --> 00:24:53,590
different between processes at the

00:24:51,909 --> 00:24:56,830
moment I have a pair of completely

00:24:53,590 --> 00:25:02,200
shared pages across we all have that so

00:24:56,830 --> 00:25:08,830
stop whining it's not that hard

00:25:02,200 --> 00:25:12,969
no it's annoying it's more crap but you

00:25:08,830 --> 00:25:15,429
don't have something working again

00:25:12,969 --> 00:25:22,739
which removes containers from the kernel

00:25:15,429 --> 00:25:22,739
so do you have a plan oh you have a plan

00:25:25,019 --> 00:25:30,129
do we actually do migration with VDS Oh

00:25:27,940 --> 00:25:32,169
does that work correctly if the video is

00:25:30,129 --> 00:25:34,629
from a different kernel version of it so

00:25:32,169 --> 00:25:37,049
with the solution beat just to have no

00:25:34,629 --> 00:25:37,049
video zone

00:25:41,160 --> 00:25:47,050
inclu will try to handle the situation

00:25:44,020 --> 00:25:50,980
if we just see we do so with different

00:25:47,050 --> 00:25:53,530
offsets for library calls like get them

00:25:50,980 --> 00:25:57,610
over there and so on we just create a

00:25:53,530 --> 00:26:00,059
visual proxy and we have just jumped to

00:25:57,610 --> 00:26:05,670
the right function in in the new video

00:26:00,059 --> 00:26:10,930
so we don't know how to do this properly

00:26:05,670 --> 00:26:15,520
so we use it just work for us but so you

00:26:10,930 --> 00:26:18,400
could equally in that case have a fake

00:26:15,520 --> 00:26:20,170
video that calls the system hall so pen

00:26:18,400 --> 00:26:29,530
doesn't have to do this the process

00:26:20,170 --> 00:26:32,770
videos oh right so we can call exact and

00:26:29,530 --> 00:26:35,309
we will have a new process with the

00:26:32,770 --> 00:26:38,170
default visual but the time should be

00:26:35,309 --> 00:26:53,679
synchronous between process what we can

00:26:38,170 --> 00:26:57,090
do in this case that's I I know that and

00:26:53,679 --> 00:27:00,730
that's the reason why you need the the

00:26:57,090 --> 00:27:05,500
separate per time domain video so

00:27:00,730 --> 00:27:08,920
mapping which because that and that that

00:27:05,500 --> 00:27:11,620
that goes because through exact food

00:27:08,920 --> 00:27:16,000
whatever yeah that works

00:27:11,620 --> 00:27:19,960
no I mean I would love to let it keep

00:27:16,000 --> 00:27:24,120
all that in user space but I didn't come

00:27:19,960 --> 00:27:24,120
up with a solution which really works

00:27:25,710 --> 00:27:32,620
her name's Lucy VSO but that that you

00:27:30,730 --> 00:27:34,840
just need a second video so anything

00:27:32,620 --> 00:27:38,620
right so they you just need a second

00:27:34,840 --> 00:27:40,720
video so version that is trivial by not

00:27:38,620 --> 00:27:42,010
doing any of that magic just jumping

00:27:40,720 --> 00:27:44,590
into the kernel or not providing any

00:27:42,010 --> 00:27:53,920
symbol so that the next SEC process has

00:27:44,590 --> 00:27:56,200
to fall back to using oh that was the

00:27:53,920 --> 00:27:58,030
secret plan to get containers removed

00:27:56,200 --> 00:27:59,350
because they become so slow that nobody

00:27:58,030 --> 00:28:06,400
wants to use them anymore

00:27:59,350 --> 00:28:07,660
great why didn't I come up with that why

00:28:06,400 --> 00:28:09,390
I mean there's another question here

00:28:07,660 --> 00:28:13,870
which is do you really think you want to

00:28:09,390 --> 00:28:16,450
include in your use cases for containers

00:28:13,870 --> 00:28:18,400
those user space programs that want to

00:28:16,450 --> 00:28:23,050
call get time of day a hundred times a

00:28:18,400 --> 00:28:25,330
hundred thousand times a second well

00:28:23,050 --> 00:28:35,320
then then if they want time domains they

00:28:25,330 --> 00:28:45,520
may suffer with redirecting everything

00:28:35,320 --> 00:28:48,060
into the cool just to please pay you can

00:28:45,520 --> 00:28:48,060
do that yourself

00:28:54,519 --> 00:29:00,740
and we have to go back to executable

00:28:57,289 --> 00:29:04,760
stacks and other like crap video so meat

00:29:00,740 --> 00:29:11,570
needs to be there yeah so the thing is

00:29:04,760 --> 00:29:15,679
you only you do not you only need a data

00:29:11,570 --> 00:29:18,710
mapping not the code the code stays the

00:29:15,679 --> 00:29:20,990
same what I would probably do is split

00:29:18,710 --> 00:29:23,450
it into three pages one remains global

00:29:20,990 --> 00:29:25,130
and one becomes per time domain because

00:29:23,450 --> 00:29:26,510
they still some global stuff in there

00:29:25,130 --> 00:29:30,860
there's other things in our videos yeah

00:29:26,510 --> 00:29:34,610
yeah so I would basically create three

00:29:30,860 --> 00:29:39,500
different mapping sort of - yeah that

00:29:34,610 --> 00:29:42,260
works so yeah we should look at it in

00:29:39,500 --> 00:29:44,570
the x86 handy for other thing I mean we

00:29:42,260 --> 00:29:46,279
start having per process video for pages

00:29:44,570 --> 00:29:48,710
there's all the things we could put in

00:29:46,279 --> 00:29:50,720
there that could be here useful as well

00:29:48,710 --> 00:29:54,440
things I can do my notes anything like

00:29:50,720 --> 00:29:59,179
this yeah - difficult because I think a

00:29:54,440 --> 00:30:02,179
little did it for a long time it's

00:29:59,179 --> 00:30:05,120
problematic because it's per thread it's

00:30:02,179 --> 00:30:06,080
not progress space but all of these

00:30:05,120 --> 00:30:11,539
there are other things we could

00:30:06,080 --> 00:30:14,510
potentially yes you see

00:30:11,539 --> 00:30:19,279
and it we all agree that this is process

00:30:14,510 --> 00:30:23,779
white it's not going to be my task a my

00:30:19,279 --> 00:30:28,610
thread a is in time namespace one and my

00:30:23,779 --> 00:30:30,470
friend no space I mean I'm just ask you

00:30:28,610 --> 00:30:34,159
to make sure that we are all on the same

00:30:30,470 --> 00:30:38,630
page I know what complete container

00:30:34,159 --> 00:30:41,950
people's dream about I'm not a zombie

00:30:38,630 --> 00:30:41,950
bunny no no way

00:30:46,750 --> 00:30:55,480
some namespaces are per task but it's

00:30:49,550 --> 00:30:58,010
not a problem to make it per process

00:30:55,480 --> 00:31:01,540
because there's very little benefit to

00:30:58,010 --> 00:31:07,850
be the per task okay thank you very much

00:31:01,540 --> 00:31:09,980
because that would be funny especially

00:31:07,850 --> 00:31:13,190
the video so mapping wouldn't work

00:31:09,980 --> 00:31:15,230
anymore yeah this is my ignorant but do

00:31:13,190 --> 00:31:18,370
you what's the interface to set the

00:31:15,230 --> 00:31:18,370
offset a namespace

00:31:21,090 --> 00:31:27,299
we use clocks at time so we create a new

00:31:24,059 --> 00:31:30,059
namespace then use clocks at time clock

00:31:27,299 --> 00:31:32,610
monotonic and just specifies a current

00:31:30,059 --> 00:31:35,580
value for this clock and just equate

00:31:32,610 --> 00:31:39,330
this offset and a colonel hello and what

00:31:35,580 --> 00:31:43,049
what is wrong with this project no clock

00:31:39,330 --> 00:31:43,730
monotonic is not settable period end of

00:31:43,049 --> 00:31:49,590
story

00:31:43,730 --> 00:31:52,999
we're not in it no no no no no I don't

00:31:49,590 --> 00:31:55,799
want to see if I'm the magic container

00:31:52,999 --> 00:32:04,830
then I'm allowed to set clock monotonic

00:31:55,799 --> 00:32:10,350
no it's not going in so what when you

00:32:04,830 --> 00:32:14,940
create that namespace so you know that

00:32:10,350 --> 00:32:25,139
you have an offset so why don't you feed

00:32:14,940 --> 00:32:28,440
it into the namespace creation okay but

00:32:25,139 --> 00:32:31,740
then please let let us come up with a

00:32:28,440 --> 00:32:34,970
set with a separate dedicated interface

00:32:31,740 --> 00:32:42,749
for that and not abuse clock set time

00:32:34,970 --> 00:32:45,419
yeah Oh even new it's like to create the

00:32:42,749 --> 00:32:48,389
time namespace it does we don't have to

00:32:45,419 --> 00:32:52,860
have to use clone or unshare bits it's

00:32:48,389 --> 00:32:57,080
just convenient what is convenient you

00:32:52,860 --> 00:32:58,950
using you using bits of clone or unshare

00:32:57,080 --> 00:33:01,970
okay the thing that gives us no

00:32:58,950 --> 00:33:01,970
arguments okay

00:33:05,100 --> 00:33:10,320
especially about this well they're gonna

00:33:07,409 --> 00:33:12,240
have to learn about her well they have

00:33:10,320 --> 00:33:18,210
to learn about time namespaces anyway

00:33:12,240 --> 00:33:23,700
yeah sure I mean I really don't want

00:33:18,210 --> 00:33:25,500
give people ideas I mean another really

00:33:23,700 --> 00:33:31,980
enough that we have an interface which

00:33:25,500 --> 00:33:35,899
is allows you to fiddle with with clock

00:33:31,980 --> 00:33:35,899
monotonic and and boot time and whatever

00:33:43,940 --> 00:34:01,730
something which we actually came tied to

00:33:47,519 --> 00:34:05,929
namespace I don't know what yeah that's

00:34:01,730 --> 00:34:08,970
one of the directories I avoid know

00:34:05,929 --> 00:34:11,040
we've suit something out but we want to

00:34:08,970 --> 00:34:14,490
make it separate so it's entirely clear

00:34:11,040 --> 00:34:17,060
this is something which is tied to a

00:34:14,490 --> 00:34:22,379
names to the namespace functionality and

00:34:17,060 --> 00:34:25,740
not if we do that in the core clock set

00:34:22,379 --> 00:34:30,300
time interface then we have the request

00:34:25,740 --> 00:34:32,730
for oh if I'm something else than a time

00:34:30,300 --> 00:34:35,190
namespace then I can do that as well

00:34:32,730 --> 00:34:36,929
because I'm special as well so no we

00:34:35,190 --> 00:34:43,159
want a dedicated interface which is

00:34:36,929 --> 00:34:43,159
solely for containers that's fair

00:34:44,440 --> 00:34:49,160
I guess one other question you're gonna

00:34:48,020 --> 00:34:51,590
have to ask with this dedicated

00:34:49,160 --> 00:34:53,720
interface is what if someone tries to

00:34:51,590 --> 00:34:55,670
set the monotonic clock within a

00:34:53,720 --> 00:35:01,520
namespace then tries to set it again

00:34:55,670 --> 00:35:02,680
possibly to backwards set once it's set

00:35:01,520 --> 00:35:04,760
once

00:35:02,680 --> 00:35:08,420
caveat emptor if you do something stupid

00:35:04,760 --> 00:35:12,730
you get stupid resolved no it's set once

00:35:08,420 --> 00:35:18,860
because you really have to do it before

00:35:12,730 --> 00:35:22,190
arming the first timer if if if you do

00:35:18,860 --> 00:35:27,290
that after you are the first time of

00:35:22,190 --> 00:35:28,970
your toast well so that's gonna be one

00:35:27,290 --> 00:35:31,310
of the problems right which is if you're

00:35:28,970 --> 00:35:33,440
doing container migration and you have

00:35:31,310 --> 00:35:35,780
to somehow move the timers right that's

00:35:33,440 --> 00:35:37,280
gonna have to be done manually which is

00:35:35,780 --> 00:35:39,290
the other way that you could do this is

00:35:37,280 --> 00:35:44,150
you could say all right you can use

00:35:39,290 --> 00:35:46,700
clock set time once and only before you

00:35:44,150 --> 00:35:48,980
have ever called clock get time or set a

00:35:46,700 --> 00:35:51,590
timer the moment you do that you can no

00:35:48,980 --> 00:35:54,560
longer touch clock monotonic right so if

00:35:51,590 --> 00:35:57,770
you've never observed clock monotonic

00:35:54,560 --> 00:35:59,240
then you get to set it but otherwise you

00:35:57,770 --> 00:36:01,070
can't right that would be don't know

00:35:59,240 --> 00:36:03,530
about that because the we D is it the

00:36:01,070 --> 00:36:10,160
radius it doesn't tell are we accessed

00:36:03,530 --> 00:36:13,160
it yeah right you're screwed yeah I mean

00:36:10,160 --> 00:36:16,610
I mean if the if the application uses

00:36:13,160 --> 00:36:19,160
clock that time yeah and then does clock

00:36:16,610 --> 00:36:21,470
set time and then forget about it that

00:36:19,160 --> 00:36:23,540
it did clock that time and it's confused

00:36:21,470 --> 00:36:28,790
because block monotonic went backwards

00:36:23,540 --> 00:36:31,000
okay Lucas so he says I mean this is a

00:36:28,790 --> 00:36:31,000
special

00:36:31,460 --> 00:36:37,910
mechanism you have for that container

00:36:34,170 --> 00:36:40,680
migration set up restoring whatever

00:36:37,910 --> 00:36:43,640
thingy and and and they should know what

00:36:40,680 --> 00:36:47,820
what they are doing and if they don't

00:36:43,640 --> 00:36:52,590
they get what they asked for so anything

00:36:47,820 --> 00:36:53,910
else if you want to restrict the

00:36:52,590 --> 00:36:57,030
functionality you wouldn't it make sense

00:36:53,910 --> 00:37:00,860
to make sure that you can only call it

00:36:57,030 --> 00:37:00,860
at clone time and yeah

00:37:16,000 --> 00:37:21,740
no no no that complicates things cuz

00:37:20,390 --> 00:37:26,020
after you create after you create the

00:37:21,740 --> 00:37:28,760
namespace you just basically say no the

00:37:26,020 --> 00:37:35,780
thing is Winnick when you create the

00:37:28,760 --> 00:37:38,600
time namespace then we create the radius

00:37:35,780 --> 00:37:47,270
Oh data for it which is the time new

00:37:38,600 --> 00:37:50,990
time domain and then this gets the

00:37:47,270 --> 00:37:59,090
non-shared the non global part of the

00:37:50,990 --> 00:38:03,260
VDSL data yes and then because you don't

00:37:59,090 --> 00:38:06,950
want to go dear and fix up the video

00:38:03,260 --> 00:38:08,960
mapping after the fact no it has to be a

00:38:06,950 --> 00:38:11,890
way little when the when the when the

00:38:08,960 --> 00:38:17,120
process don't over in the process once

00:38:11,890 --> 00:38:19,340
when you create the many food and I you

00:38:17,120 --> 00:38:21,860
have to establish the namespace before

00:38:19,340 --> 00:38:31,940
that I think right we're it's part of

00:38:21,860 --> 00:38:35,000
part of fork yeah whatever yeah so once

00:38:31,940 --> 00:38:38,200
the namespace is created we create the

00:38:35,000 --> 00:38:41,810
video and and when the task is broader

00:38:38,200 --> 00:38:44,930
it just gets that level we we can avoid

00:38:41,810 --> 00:38:47,270
the problem you fell easily if we decide

00:38:44,930 --> 00:38:51,260
that we have good use for having a third

00:38:47,270 --> 00:38:53,000
process page in a video so anyway I shot

00:38:51,260 --> 00:38:55,640
the case and we always create a third

00:38:53,000 --> 00:38:58,340
page and we just have to update it yes

00:38:55,640 --> 00:39:02,210
so that's sort of mega promising yeah I

00:38:58,340 --> 00:39:05,810
can fiddle with mappings we can do that

00:39:02,210 --> 00:39:09,560
yeah that's a detail we have to think

00:39:05,810 --> 00:39:12,550
about what I'm worried what what I'm

00:39:09,560 --> 00:39:12,550
worried is that

00:39:14,420 --> 00:39:24,439
right now the data we have for Vidya so

00:39:19,529 --> 00:39:27,689
access is packed and it's it's really

00:39:24,439 --> 00:39:30,299
optimized for in the cache lines for

00:39:27,689 --> 00:39:33,869
fast access to faster the fastest

00:39:30,299 --> 00:39:35,849
accessories clock monotonic I think look

00:39:33,869 --> 00:39:38,279
real-time is slightly slower because you

00:39:35,849 --> 00:39:42,569
touch a second a second cache line for

00:39:38,279 --> 00:39:45,180
that so but then with the with the

00:39:42,569 --> 00:39:48,269
offset thing you actually if that's a

00:39:45,180 --> 00:39:50,880
separate page you get a third page line

00:39:48,269 --> 00:39:55,289
into the cache line into the play which

00:39:50,880 --> 00:39:56,789
is fook a a part of the other one or 64

00:39:55,289 --> 00:40:00,410
first yeah that's a good point because

00:39:56,789 --> 00:40:03,809
part of the problem is going to be that

00:40:00,410 --> 00:40:05,069
the process the shared page cannot tell

00:40:03,809 --> 00:40:08,279
you whether you're in the time domain or

00:40:05,069 --> 00:40:11,789
not right so you have to go look at the

00:40:08,279 --> 00:40:14,089
third page for that and so yes you add

00:40:11,789 --> 00:40:18,269
you add a second cache line to every

00:40:14,089 --> 00:40:21,509
clock call in a system which is so one

00:40:18,269 --> 00:40:27,299
one way to solve that would be a little

00:40:21,509 --> 00:40:31,469
I need that white ball thingy say make

00:40:27,299 --> 00:40:34,109
sure you have to the two pages one is

00:40:31,469 --> 00:40:40,979
the global state and and and this is the

00:40:34,109 --> 00:40:48,420
process part so if we placed data

00:40:40,979 --> 00:40:51,089
structure so it overlaps and be clever

00:40:48,420 --> 00:40:55,099
about it we only touch to 2 cache lines

00:40:51,089 --> 00:40:55,099
and it's two consecutive cache lines

00:40:58,200 --> 00:41:07,360
you have two TLB entries anyways so you

00:41:02,500 --> 00:41:12,780
have to dice some death said now that

00:41:07,360 --> 00:41:18,370
the other variant would be that we used

00:41:12,780 --> 00:41:20,980
only a single data page in half some

00:41:18,370 --> 00:41:26,650
clever update mechanism which would be

00:41:20,980 --> 00:41:39,250
tied to schedule in or something like

00:41:26,650 --> 00:41:42,550
that yes and and only and we only look

00:41:39,250 --> 00:41:46,050
at that when we switch times time

00:41:42,550 --> 00:41:46,050
domains on context switch

00:41:51,780 --> 00:41:56,670
no no way I don't

00:42:04,890 --> 00:42:13,810
you have a you have a globe page per

00:42:08,920 --> 00:42:18,930
time them so you have only one so we

00:42:13,810 --> 00:42:30,730
have to when the system starts we have

00:42:18,930 --> 00:42:35,080
time domain zero okay no even that no no

00:42:30,730 --> 00:42:39,640
no no no you even can't do the copy on

00:42:35,080 --> 00:42:42,760
the process thing it's not a problem so

00:42:39,640 --> 00:42:44,590
I just want to come on switch to you

00:42:42,760 --> 00:42:48,280
just look at whether you change

00:42:44,590 --> 00:42:53,700
namespace from previous to next and then

00:42:48,280 --> 00:42:55,300
next goes and looks whether he's own

00:42:53,700 --> 00:43:00,280
process Wyatt

00:42:55,300 --> 00:43:03,030
wittiest out page is up to date and then

00:43:00,280 --> 00:43:08,470
if it's not it goes there and updates it

00:43:03,030 --> 00:43:11,860
if is if it's up to date go on and we

00:43:08,470 --> 00:43:15,130
have fun so I just want everyone to know

00:43:11,860 --> 00:43:17,530
that it's just coming up on 4:45 so if

00:43:15,130 --> 00:43:19,720
you wanted to go to some other talk that

00:43:17,530 --> 00:43:22,000
it is time there's nothing else here so

00:43:19,720 --> 00:43:24,070
if people want to keep having design

00:43:22,000 --> 00:43:25,990
conversation that's great I just want to

00:43:24,070 --> 00:43:27,760
make sure people knew that if they want

00:43:25,990 --> 00:43:29,170
to go to the other referee track that

00:43:27,760 --> 00:43:31,390
we're sort of at the tight end of the

00:43:29,170 --> 00:43:39,610
timeslot but otherwise feel free to keep

00:43:31,390 --> 00:43:42,130
going I think we have enough ideas now

00:43:39,610 --> 00:43:45,130
we have we know where all the pain

00:43:42,130 --> 00:43:48,940
points or everybody can go back and

00:43:45,130 --> 00:43:54,010
think about it and Ben can dream up nice

00:43:48,940 --> 00:43:55,749
things without tlbs and whatever magic

00:43:54,010 --> 00:44:00,289
pages

00:43:55,749 --> 00:44:04,759
self-replicating magic pages oh we need

00:44:00,289 --> 00:44:08,569
that it would be cute so thank you

00:44:04,759 --> 00:44:10,670
everybody for being here and helping

00:44:08,569 --> 00:44:12,799
with the discussion and giving me that

00:44:10,670 --> 00:44:15,460
warm fuzzy feeling that we don't need

00:44:12,799 --> 00:44:21,239
NTP in containers yay

00:44:15,460 --> 00:44:21,239

YouTube URL: https://www.youtube.com/watch?v=sjRUiqJVzOA


