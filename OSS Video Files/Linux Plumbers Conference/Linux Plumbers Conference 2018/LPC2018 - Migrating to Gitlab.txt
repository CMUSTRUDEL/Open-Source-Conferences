Title: LPC2018 - Migrating to Gitlab
Publication date: 2018-11-28
Playlist: Linux Plumbers Conference 2018
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/72/
speaker:  Daniel Vetter (Intel)


Over the past few years the graphics subsystem has been spearheading experiments in running things differently: Pre-merge CI wrapped around mailing lists using patchwork, committer model as a form of group maintainership on steroids, and other things. As a result the graphics people have run into some interesting new corner cases of the kernel's "patches carved on stone tablets" process.

On the other hand the freedesktop.org project, which provides all the server infrastracture for the graphics subsystem, is undergoing a big reorganization of how they provide their services. The biggest change is migrating all source hosting over to a gitlab instance.

This talk will go into the why of these changes and detail what is definitely going to change, and what is being looked into more as experiments with open outcomes.
Captions: 
	00:00:05,600 --> 00:00:11,299
I'm gonna talk a bit about migrating to

00:00:08,360 --> 00:00:13,910
get laughs witches in the fine tradition

00:00:11,299 --> 00:00:21,080
of recent talks I've given that talk

00:00:13,910 --> 00:00:23,540
about process approaches and and tooling

00:00:21,080 --> 00:00:26,149
and things that are somewhat unusual for

00:00:23,540 --> 00:00:28,880
the internal community at least this

00:00:26,149 --> 00:00:31,070
talk is a bit special because at this

00:00:28,880 --> 00:00:33,290
time around the talk is before we

00:00:31,070 --> 00:00:36,880
actually started doing things for real

00:00:33,290 --> 00:00:40,400
and and seriously it's just kind of

00:00:36,880 --> 00:00:43,220
seeing that a better getting wider

00:00:40,400 --> 00:00:45,920
feedback before we start on this

00:00:43,220 --> 00:00:47,480
endeavor for real oh it's like

00:00:45,920 --> 00:00:49,490
interesting because in the past year we

00:00:47,480 --> 00:00:55,520
always kind of opened up to the kernel

00:00:49,490 --> 00:00:56,810
community all afters so yeah I kind of

00:00:55,520 --> 00:00:59,660
kind of looking for interesting people

00:00:56,810 --> 00:01:02,120
so first a bit more about why I'm gonna

00:00:59,660 --> 00:01:05,180
do this talk then you're gonna look a

00:01:02,120 --> 00:01:09,140
bit why we from the graphics side even

00:01:05,180 --> 00:01:10,970
look into this like migrating away from

00:01:09,140 --> 00:01:13,070
kind of standard kernel patch mailing

00:01:10,970 --> 00:01:14,930
lists and stuff like that and then a

00:01:13,070 --> 00:01:16,790
bunch of details of Woodlief played

00:01:14,930 --> 00:01:18,650
around already with experiments and

00:01:16,790 --> 00:01:26,630
prototypes and and what we've learned

00:01:18,650 --> 00:01:30,530
about this Kip lab thing so yeah why

00:01:26,630 --> 00:01:32,060
does talk oh oh why I think migrating to

00:01:30,530 --> 00:01:33,710
get love is kind of relevant for the

00:01:32,060 --> 00:01:37,490
kernel at least for kernel graphics

00:01:33,710 --> 00:01:40,430
maker and a lot large oh the the graphic

00:01:37,490 --> 00:01:45,350
services and erm is kind of tiny part of

00:01:40,430 --> 00:01:47,630
the kernel or tiny not so tiny anymore

00:01:45,350 --> 00:01:51,320
but still a fairly small part of the

00:01:47,630 --> 00:01:53,450
kernel but it is also a fairly small

00:01:51,320 --> 00:01:55,040
part of the open-source graphics stack I

00:01:53,450 --> 00:01:57,020
mean if you look at open such graphics

00:01:55,040 --> 00:02:00,310
that this Vulcan driver steel drivers

00:01:57,020 --> 00:02:04,549
composite of input drivers a kind of

00:02:00,310 --> 00:02:06,170
bubbling around there and dear I'm kind

00:02:04,549 --> 00:02:08,629
of being in the metal we had we had a

00:02:06,170 --> 00:02:14,599
lot of influencing from from both sides

00:02:08,629 --> 00:02:17,840
maybe picked up things or so stuff that

00:02:14,599 --> 00:02:19,099
DRM and graphics through the UM or

00:02:17,840 --> 00:02:23,599
what's I learned from

00:02:19,099 --> 00:02:27,260
Colonel is get we switched over to get

00:02:23,599 --> 00:02:29,959
in 2006 which is one year off to get

00:02:27,260 --> 00:02:33,170
existed it was very much still a rough

00:02:29,959 --> 00:02:35,359
ride on the thing that has been very

00:02:33,170 --> 00:02:38,389
very beneficial for graphics people

00:02:35,359 --> 00:02:41,689
overall Oh kind of throwing CVS into the

00:02:38,389 --> 00:02:45,379
wind ah with that came proper commit

00:02:41,689 --> 00:02:48,709
messages if you look at the xorg history

00:02:45,379 --> 00:02:52,609
and go back like 20 years it's maybe a

00:02:48,709 --> 00:02:54,739
one-liner right Lula's dom on now we

00:02:52,609 --> 00:02:57,260
have like the kernel all nice summaries

00:02:54,739 --> 00:03:01,400
and commit messages that explain what's

00:02:57,260 --> 00:03:05,090
going on we also kind of adopted the

00:03:01,400 --> 00:03:09,290
entire approach of iterating on a patch

00:03:05,090 --> 00:03:12,019
set for developing features oh another

00:03:09,290 --> 00:03:13,760
thing that graphics people to go from

00:03:12,019 --> 00:03:15,620
the kernel is the maintainer model

00:03:13,760 --> 00:03:19,969
though you kind of have the benevolent

00:03:15,620 --> 00:03:23,689
dictator or drm was run for like this X

00:03:19,969 --> 00:03:26,209
DX er that was run like that Weiland was

00:03:23,689 --> 00:03:28,639
run like that so kind of doctor that

00:03:26,209 --> 00:03:32,689
model quite a bit but there's also the

00:03:28,639 --> 00:03:35,930
other other way around again about how

00:03:32,689 --> 00:03:40,310
you commit patches and stiff or Mesa was

00:03:35,930 --> 00:03:43,220
always kind of a we every contributed

00:03:40,310 --> 00:03:46,400
just as commit rights on that the past

00:03:43,220 --> 00:03:48,379
few years the committee model kind of

00:03:46,400 --> 00:03:51,019
moved through graphics and then it have

00:03:48,379 --> 00:03:56,650
been in the kernel with the XO van

00:03:51,019 --> 00:04:00,560
Baalen and and erm are switching back I

00:03:56,650 --> 00:04:02,750
know the thing that they the kind of

00:04:00,560 --> 00:04:07,310
kernel graphics was his havilland or his

00:04:02,750 --> 00:04:09,620
holiday influenced by what the OpenGL

00:04:07,310 --> 00:04:11,930
people are doing is testing and CI I

00:04:09,620 --> 00:04:14,329
mean kernel is also being testing in CI

00:04:11,930 --> 00:04:18,530
but they approach the tooling the test

00:04:14,329 --> 00:04:21,320
suite I think for DRM that was very much

00:04:18,530 --> 00:04:24,080
led by Mesa people and their test Suites

00:04:21,320 --> 00:04:27,639
for historical reasons every almost

00:04:24,080 --> 00:04:30,050
everything is MIT license

00:04:27,639 --> 00:04:31,969
so yeah that's this there's a lot of

00:04:30,050 --> 00:04:32,260
kind of going back and forth of tooling

00:04:31,969 --> 00:04:34,680
and

00:04:32,260 --> 00:04:37,690
for structure and approaches between our

00:04:34,680 --> 00:04:40,240
the colonel through colonel graphics to

00:04:37,690 --> 00:04:44,500
the lighting graphics ecosystem and

00:04:40,240 --> 00:04:45,520
phone graphics to DRM and then maybe to

00:04:44,500 --> 00:04:50,230
the colonel at large

00:04:45,520 --> 00:04:52,450
I think gitlab looks like the next big

00:04:50,230 --> 00:04:55,060
wave of changes that could roll from

00:04:52,450 --> 00:04:57,150
like the user space people free colonel

00:04:55,060 --> 00:05:00,550
graphics to maybe the colonel at large

00:04:57,150 --> 00:05:02,710
so that's essentially why I figured this

00:05:00,550 --> 00:05:04,630
this would be an interesting talk it's

00:05:02,710 --> 00:05:08,200
not gonna happen like this year and

00:05:04,630 --> 00:05:10,740
rolling up next year but like the

00:05:08,200 --> 00:05:13,660
committee model maybe in a few years

00:05:10,740 --> 00:05:20,560
we'll we'll look at using gift lab

00:05:13,660 --> 00:05:23,020
pretty extensively so what are the pain

00:05:20,560 --> 00:05:26,320
points with the current process that we

00:05:23,020 --> 00:05:28,750
pretty much in graphics largely copy

00:05:26,320 --> 00:05:30,430
pasted from the colonel with patch

00:05:28,750 --> 00:05:33,460
series that you iterate on the mailing

00:05:30,430 --> 00:05:38,830
list are this dis if you kind of generic

00:05:33,460 --> 00:05:39,850
things one is the the popularity of get

00:05:38,830 --> 00:05:42,430
send the email

00:05:39,850 --> 00:05:48,610
I mean Journal people kind of learned

00:05:42,430 --> 00:05:52,270
how this sending out emails works or if

00:05:48,610 --> 00:05:54,190
you need to ramp up lots new people on

00:05:52,270 --> 00:05:58,030
graphics has been growing quite a lot

00:05:54,190 --> 00:06:00,190
past few years teaching and setting up

00:05:58,030 --> 00:06:01,990
get sending email is not trivial and if

00:06:00,190 --> 00:06:05,760
people that haven't done it before it's

00:06:01,990 --> 00:06:09,760
it's it's a little barrier better noise

00:06:05,760 --> 00:06:12,160
versus if you have a more vet based or

00:06:09,760 --> 00:06:15,370
get based very slowly just push branches

00:06:12,160 --> 00:06:18,640
around like buttons on on a webpage that

00:06:15,370 --> 00:06:21,190
stuff that goes very much more smoothly

00:06:18,640 --> 00:06:24,910
through corporate fables you can be get

00:06:21,190 --> 00:06:28,360
through over HTTP and that people are a

00:06:24,910 --> 00:06:32,170
lot more family with in general there's

00:06:28,360 --> 00:06:36,010
also pain points on the admin side be in

00:06:32,170 --> 00:06:37,660
the freedesktop.org project even our own

00:06:36,010 --> 00:06:42,100
server infrastructure for all of

00:06:37,660 --> 00:06:45,759
graphics and the free desktop admins are

00:06:42,100 --> 00:06:49,089
a bit I know I've been maintaining that

00:06:45,759 --> 00:06:52,719
Atok bouquet of services like a git

00:06:49,089 --> 00:06:55,389
server I see as he get are that service

00:06:52,719 --> 00:06:57,520
and Patra instance the mailing lists are

00:06:55,389 --> 00:07:00,819
you kind of don't want to maintain a

00:06:57,520 --> 00:07:03,550
mailing list service that massively

00:07:00,819 --> 00:07:10,479
amplified every email he sent to it and

00:07:03,550 --> 00:07:12,699
he's has in the 19 that's yeah so that's

00:07:10,479 --> 00:07:15,249
that's it the other aspect the FDR means

00:07:12,699 --> 00:07:17,229
very much would like T to kind of get to

00:07:15,249 --> 00:07:18,879
a single integrated solution where they

00:07:17,229 --> 00:07:24,189
don't have to maintain the duct tape

00:07:18,879 --> 00:07:27,219
someone else does that we also have

00:07:24,189 --> 00:07:30,879
quite a few smaller bits of pieces of

00:07:27,219 --> 00:07:33,610
Canada uses based graphics stack oh I've

00:07:30,879 --> 00:07:37,330
heard about BBC for graphics driver for

00:07:33,610 --> 00:07:39,689
bra comm OpenGL that moved to get up

00:07:37,330 --> 00:07:42,819
because they wanted the more modern

00:07:39,689 --> 00:07:44,469
infrastructure but I mean in the kernel

00:07:42,819 --> 00:07:47,589
we have a bit of experience with

00:07:44,469 --> 00:07:49,539
proprietary infrastructure on building

00:07:47,589 --> 00:07:53,529
your development process on top of that

00:07:49,539 --> 00:07:56,349
and how that can go badly so while we

00:07:53,529 --> 00:07:57,849
did not we experimented around or free

00:07:56,349 --> 00:08:00,009
desktop that means it's experimented

00:07:57,849 --> 00:08:03,249
around with just dumping everything on

00:08:00,009 --> 00:08:06,249
github but I wasn't easy with of a lot

00:08:03,249 --> 00:08:10,539
of people we would like to stay in

00:08:06,249 --> 00:08:12,339
control of our infrastructure and not be

00:08:10,539 --> 00:08:20,169
kind at the mercy of some vendor he

00:08:12,339 --> 00:08:24,909
might or might not get it quiet one

00:08:20,169 --> 00:08:28,959
thing we've done in the past few years

00:08:24,909 --> 00:08:34,750
to kind of fill fill the gaps in impure

00:08:28,959 --> 00:08:36,519
mailing lists is Patrick and I'll go a

00:08:34,750 --> 00:08:39,399
bit into details of following a slight

00:08:36,519 --> 00:08:42,880
but sorry it's kind of Patrick is now

00:08:39,399 --> 00:08:45,310
really the solutions you you're looking

00:08:42,880 --> 00:08:52,660
for I thought of it that Patrick is like

00:08:45,310 --> 00:08:54,910
the thing we made oh so there's a bunch

00:08:52,660 --> 00:08:59,290
of kind of fundamental issues with

00:08:54,910 --> 00:09:01,690
Patrick 1s in mailing list discussions

00:08:59,290 --> 00:09:04,030
the codes and the discussions is all

00:09:01,690 --> 00:09:06,700
interleaved it's all kind of ad hoc you

00:09:04,030 --> 00:09:08,710
kind of need a human to understand that

00:09:06,700 --> 00:09:11,670
this comment is with this block and not

00:09:08,710 --> 00:09:16,600
the similar looking block later on or

00:09:11,670 --> 00:09:18,630
kind of making sense of of patch review

00:09:16,600 --> 00:09:22,060
discussions are on the mailing list

00:09:18,630 --> 00:09:23,980
parsing all that stuff is reliably so

00:09:22,060 --> 00:09:28,450
that you can just throw a service at it

00:09:23,980 --> 00:09:30,310
is is somewhat tricky because somewhere

00:09:28,450 --> 00:09:33,010
deep down in the discussion someone

00:09:30,310 --> 00:09:35,260
there's a proposal with a patch in diff

00:09:33,010 --> 00:09:37,720
form and then patchwork things this

00:09:35,260 --> 00:09:40,390
looks like the patch so let me insert it

00:09:37,720 --> 00:09:42,670
and see are things well this new patch

00:09:40,390 --> 00:09:45,150
and Patricks so let me test that and you

00:09:42,670 --> 00:09:48,340
get the compiled filer

00:09:45,150 --> 00:09:49,690
there's kind of NASA nice so will be

00:09:48,340 --> 00:09:52,300
done on there on the Intel graphics

00:09:49,690 --> 00:09:54,340
mailing list is if it's not submitted by

00:09:52,300 --> 00:09:57,700
get send email of the get send email

00:09:54,340 --> 00:10:00,820
user agent we assume it's not a patch to

00:09:57,700 --> 00:10:04,090
kind of watch these prolongs oh another

00:10:00,820 --> 00:10:06,340
fundamental problem with Patrick is you

00:10:04,090 --> 00:10:08,890
lose a lot of semantics like if you

00:10:06,340 --> 00:10:13,810
start out you were kind of on FHA do you

00:10:08,890 --> 00:10:17,170
branch oh you you have like a ref lock

00:10:13,810 --> 00:10:18,850
of all the previous versions and get but

00:10:17,170 --> 00:10:22,870
when you throw that on a mailing list

00:10:18,850 --> 00:10:25,540
like the previous version is is lost we

00:10:22,870 --> 00:10:28,510
try to do some at least in our fork of

00:10:25,540 --> 00:10:31,690
Patrick's some some tricks with trying

00:10:28,510 --> 00:10:33,490
to reconstruct some would automatically

00:10:31,690 --> 00:10:35,920
what's the previous version or the

00:10:33,490 --> 00:10:38,110
subsystem have law rules that you should

00:10:35,920 --> 00:10:40,330
link to the previous submission so you

00:10:38,110 --> 00:10:41,710
can chain them together but but

00:10:40,330 --> 00:10:44,080
fundamentally it's kind of its

00:10:41,710 --> 00:10:46,630
information as they're like the

00:10:44,080 --> 00:10:49,540
submitter has it they know what the

00:10:46,630 --> 00:10:51,280
previous version was and you dump it on

00:10:49,540 --> 00:10:52,960
the mailing list and it's lost there's a

00:10:51,280 --> 00:10:57,640
few other things like the baseline they

00:10:52,960 --> 00:11:01,170
should dispatch series apply so zero day

00:10:57,640 --> 00:11:04,300
just tries a bunch of branches and trace

00:11:01,170 --> 00:11:06,280
with some educated guesses about well if

00:11:04,300 --> 00:11:07,990
it was a graphics patch on the graphics

00:11:06,280 --> 00:11:09,910
mailing list it's probably more likely

00:11:07,990 --> 00:11:13,270
graphic straighter they should apply it

00:11:09,910 --> 00:11:15,070
to who knows we just have a

00:11:13,270 --> 00:11:18,490
like everything is based on our

00:11:15,070 --> 00:11:21,130
integration tree but then you submit a

00:11:18,490 --> 00:11:24,430
patch to you like a stable back port and

00:11:21,130 --> 00:11:29,500
the Ganci are seasons like this does not

00:11:24,430 --> 00:11:31,779
apply and and the the other kind of

00:11:29,500 --> 00:11:35,140
fundamental thing with patchwork is it's

00:11:31,779 --> 00:11:38,649
kind of side channel on the not the main

00:11:35,140 --> 00:11:41,529
submission thing the the sort of truth

00:11:38,649 --> 00:11:45,250
and mailing lists is the mailing list so

00:11:41,529 --> 00:11:48,760
it's just uh a read-only pew you can't

00:11:45,250 --> 00:11:51,220
really comment or review patches on the

00:11:48,760 --> 00:11:55,149
in the patchwork or say yes I pulled

00:11:51,220 --> 00:11:57,370
this pull request thank you oh it's also

00:11:55,149 --> 00:11:59,529
not really possible to enforce things

00:11:57,370 --> 00:12:01,720
because it's kind of on the side so you

00:11:59,529 --> 00:12:04,000
can't do the standard process of if you

00:12:01,720 --> 00:12:05,800
fail see yeah like you're not a lot to

00:12:04,000 --> 00:12:09,040
push this because it's kind of not

00:12:05,800 --> 00:12:11,200
integrated in your world flow so that's

00:12:09,040 --> 00:12:17,980
kind of the patchwork overall there's a

00:12:11,200 --> 00:12:21,279
bunch of aspects specifically I'm

00:12:17,980 --> 00:12:24,160
actually worried if the old revisions if

00:12:21,279 --> 00:12:30,610
you're not really careful in maintaining

00:12:24,160 --> 00:12:34,300
your patrick and marking old revisions

00:12:30,610 --> 00:12:37,709
and submissions as that outdated

00:12:34,300 --> 00:12:41,620
submissions or in your email client like

00:12:37,709 --> 00:12:43,300
mark them as read you your overview that

00:12:41,620 --> 00:12:47,500
if that's your email client over that's

00:12:43,300 --> 00:12:51,220
patchwork of what's actually pending and

00:12:47,500 --> 00:12:54,010
what's no longer relevant is is clunked

00:12:51,220 --> 00:12:57,630
up this with garbage old submissions and

00:12:54,010 --> 00:13:00,430
you don't really have an overview of

00:12:57,630 --> 00:13:04,480
which patches you should look at for

00:13:00,430 --> 00:13:06,839
emerging it's also for you for group

00:13:04,480 --> 00:13:09,520
maintainer shared models at least

00:13:06,839 --> 00:13:11,680
especially i guess if the big ones we

00:13:09,520 --> 00:13:14,350
have with like ten or twenty committees

00:13:11,680 --> 00:13:17,410
is really hard to synchronize all the

00:13:14,350 --> 00:13:19,720
inboxes unpatch route so yes I looked at

00:13:17,410 --> 00:13:22,410
this but someone else please look at

00:13:19,720 --> 00:13:27,159
this I can all that coordination of who

00:13:22,410 --> 00:13:32,199
does the review for what which Pat sorry

00:13:27,159 --> 00:13:34,899
which I think makes it fairly lossy or

00:13:32,199 --> 00:13:38,529
if you have just like one maintainer

00:13:34,899 --> 00:13:40,509
then yes their personal inbox and

00:13:38,529 --> 00:13:45,099
they're not having a synchronization

00:13:40,509 --> 00:13:47,439
problem this also kind of bit the

00:13:45,099 --> 00:13:50,739
following what's going on is there's no

00:13:47,439 --> 00:13:53,979
one has a standard mail client setup we

00:13:50,739 --> 00:13:58,449
know I know of managers he using Outlook

00:13:53,979 --> 00:14:00,009
to read mailing lists and ah I can't

00:13:58,449 --> 00:14:03,489
even understand the pain they're going

00:14:00,009 --> 00:14:05,799
through it apparently it's the best

00:14:03,489 --> 00:14:09,309
thing they have and and yeah canal but

00:14:05,799 --> 00:14:11,559
all the things about patchwork trying to

00:14:09,309 --> 00:14:14,319
fix these things with Patrick it's it's

00:14:11,559 --> 00:14:18,939
kind of better it's not really the full

00:14:14,319 --> 00:14:20,499
solution of what we'd like to have that

00:14:18,939 --> 00:14:23,649
you really only have the current

00:14:20,499 --> 00:14:25,809
versions off the actually outstanding

00:14:23,649 --> 00:14:28,829
patch servers and note all the old ones

00:14:25,809 --> 00:14:31,389
and not all the stuff that's merged but

00:14:28,829 --> 00:14:33,009
Patrick didn't realize it was merged or

00:14:31,389 --> 00:14:34,839
the automated tooling and not all the

00:14:33,009 --> 00:14:38,829
stuff that was just an experiment that

00:14:34,839 --> 00:14:41,949
thrown away again and kinda a single

00:14:38,829 --> 00:14:44,589
source of truth and not every maintainer

00:14:41,949 --> 00:14:46,629
has kind of their own source of truth of

00:14:44,589 --> 00:14:48,279
what's being looked at and what's not

00:14:46,629 --> 00:14:51,939
being looked at and what's falling

00:14:48,279 --> 00:14:55,749
through the cracks and also kind of food

00:14:51,939 --> 00:14:58,749
for managers I mean Intel pays people to

00:14:55,749 --> 00:15:00,669
write graphics drivers so the project

00:14:58,749 --> 00:15:03,489
managers would like to know what the

00:15:00,669 --> 00:15:05,259
people they're paying are they I'm

00:15:03,489 --> 00:15:10,419
getting that overview from a mailing

00:15:05,259 --> 00:15:15,329
list is is really hard I know the pain

00:15:10,419 --> 00:15:17,979
point is is CI and and kind of tooling

00:15:15,329 --> 00:15:20,229
my experience with CI is you need

00:15:17,979 --> 00:15:22,479
positive confirmation that yes your

00:15:20,229 --> 00:15:25,029
stuff passes you get a green green

00:15:22,479 --> 00:15:28,989
checkmark on with mailing lists we do

00:15:25,029 --> 00:15:31,359
that on the Intel GFX with replies

00:15:28,989 --> 00:15:34,359
everyone outside of our team hates it

00:15:31,359 --> 00:15:36,549
because it's even more spam so there's

00:15:34,359 --> 00:15:38,319
this kind of the problem of if you want

00:15:36,549 --> 00:15:39,939
to give positive confirmation and

00:15:38,319 --> 00:15:41,799
everyone tells you this is

00:15:39,939 --> 00:15:46,659
you're creating even more spam this kind

00:15:41,799 --> 00:15:50,379
of no good way to give you this

00:15:46,659 --> 00:15:52,269
information that you get it when you but

00:15:50,379 --> 00:15:54,939
you can see it when you connect the

00:15:52,269 --> 00:15:59,169
patches but not anywhere else

00:15:54,939 --> 00:16:01,839
our client-side scripting and parsing

00:15:59,169 --> 00:16:03,519
patches is and pull request is from I

00:16:01,839 --> 00:16:06,399
mean we have shared scripts and stuff

00:16:03,519 --> 00:16:08,049
for all the committee's on everyone has

00:16:06,399 --> 00:16:10,329
their own set up everyone has their own

00:16:08,049 --> 00:16:13,389
favorite shell everyone has their own

00:16:10,329 --> 00:16:18,849
favorite the email client and they

00:16:13,389 --> 00:16:20,799
breaks all the time and again Patrick

00:16:18,849 --> 00:16:26,129
helps you with that so we use patchwork

00:16:20,799 --> 00:16:28,539
to track the CI status so you you can

00:16:26,129 --> 00:16:31,239
you can say it's a warning or it's

00:16:28,539 --> 00:16:33,819
pending or it's it's felled or it's

00:16:31,239 --> 00:16:35,589
exceeded you can decide whether you want

00:16:33,819 --> 00:16:37,539
to send out an email to the mailing list

00:16:35,589 --> 00:16:39,429
so that this is just more kind of

00:16:37,539 --> 00:16:42,129
informational or while we're still

00:16:39,429 --> 00:16:45,729
experimenting with in you our CI stage

00:16:42,129 --> 00:16:48,069
or on not so stable hardware and stuff

00:16:45,729 --> 00:16:50,289
like that so it kind of gives you that

00:16:48,069 --> 00:16:52,569
that overview in patch Road you can see

00:16:50,289 --> 00:16:54,970
the saris and you can see the CI results

00:16:52,569 --> 00:16:58,899
it's there but it is a side channel

00:16:54,970 --> 00:17:01,029
again there's a entire problem if all

00:16:58,899 --> 00:17:03,279
the old series are still there so you

00:17:01,029 --> 00:17:07,120
can't really see the evolution how

00:17:03,279 --> 00:17:09,639
things got fixed so so that that's a bit

00:17:07,120 --> 00:17:12,610
the pain points were saying where things

00:17:09,639 --> 00:17:18,240
are not looking perfectly and I think

00:17:12,610 --> 00:17:21,250
other projects are doing a better job on

00:17:18,240 --> 00:17:24,039
so he started or free desktop that means

00:17:21,250 --> 00:17:29,080
other people than me started looking at

00:17:24,039 --> 00:17:30,850
different solutions and so the question

00:17:29,080 --> 00:17:32,940
is like why get laughs there's a bunch

00:17:30,850 --> 00:17:36,009
of others like picture from from free

00:17:32,940 --> 00:17:39,070
federal and stuff I definitely not get

00:17:36,009 --> 00:17:42,600
is that we don't want to re-experience

00:17:39,070 --> 00:17:42,600
that keeper situation

00:17:43,720 --> 00:17:52,600
so is the things all that made his pit

00:17:49,480 --> 00:17:55,570
get lap so one thing is it get lap dance

00:17:52,600 --> 00:17:57,009
ID is an open core business model but

00:17:55,570 --> 00:18:01,450
they try to sell you the additional

00:17:57,009 --> 00:18:04,240
things for money but as far as open core

00:18:01,450 --> 00:18:05,830
goes it's extremely reasonable and I

00:18:04,240 --> 00:18:08,769
think we can thank their being there

00:18:05,830 --> 00:18:11,350
young people for making that possible so

00:18:08,769 --> 00:18:13,840
the open court baseline get lab is just

00:18:11,350 --> 00:18:15,970
MIT license and if you want to

00:18:13,840 --> 00:18:19,450
contribute all they want is the

00:18:15,970 --> 00:18:22,360
developer certificate of origin no CLIA

00:18:19,450 --> 00:18:24,070
no paperwork to sign they do not

00:18:22,360 --> 00:18:26,519
actually own the copyrights for all the

00:18:24,070 --> 00:18:31,029
stuff in there in the current version

00:18:26,519 --> 00:18:32,769
Saul yes as far as open core business

00:18:31,029 --> 00:18:36,309
model and software so the open source

00:18:32,769 --> 00:18:37,870
solutions guys I think they're dear the

00:18:36,309 --> 00:18:40,240
most reasonable and we looked at other

00:18:37,870 --> 00:18:42,250
things where this was not the case may

00:18:40,240 --> 00:18:46,960
be hard to science Els and all that

00:18:42,250 --> 00:18:49,990
nonsense another thing I would get lap

00:18:46,960 --> 00:18:53,529
is or get lap cares about big project

00:18:49,990 --> 00:18:56,820
workflows so I'm gonna go a bit more

00:18:53,529 --> 00:19:00,370
details on that on the next slide oh

00:18:56,820 --> 00:19:02,679
this is quite complicated topic a Debian

00:19:00,370 --> 00:19:04,750
has apparently adopted that genome has

00:19:02,679 --> 00:19:07,809
used it and be apart a bit of overlap

00:19:04,750 --> 00:19:10,210
with genome people of known people in

00:19:07,809 --> 00:19:13,090
open-source graphics overall that's so

00:19:10,210 --> 00:19:15,399
much in Colonel but Cronus that's the

00:19:13,090 --> 00:19:20,019
OpenGL and Vulcan standards body is

00:19:15,399 --> 00:19:24,909
using git laugh so all the GL people and

00:19:20,019 --> 00:19:28,179
Vulcan people are used to it oh so from

00:19:24,909 --> 00:19:30,009
from that point of view we're hoping

00:19:28,179 --> 00:19:32,440
that it's it will be a lot easier to

00:19:30,009 --> 00:19:34,629
learn for for new contributors or comp

00:19:32,440 --> 00:19:38,500
these beauties moving around a bit it

00:19:34,629 --> 00:19:40,870
also means that I think if if gitlab the

00:19:38,500 --> 00:19:43,990
company ever goes evil there's enough

00:19:40,870 --> 00:19:47,919
people who really use the open open

00:19:43,990 --> 00:19:50,769
source core to hahvah to be able to

00:19:47,919 --> 00:19:52,149
sustain it going forward free desk

00:19:50,769 --> 00:19:54,490
government and open-source graphics

00:19:52,149 --> 00:19:56,640
alone definitely wouldn't be able to but

00:19:54,490 --> 00:19:59,790
I think that the other projects this is

00:19:56,640 --> 00:20:02,880
possible to pull off kind of just for

00:19:59,790 --> 00:20:05,700
that contingency planning it has

00:20:02,880 --> 00:20:08,400
batteries included so CI is integrated

00:20:05,700 --> 00:20:10,470
all the things you kind of want from an

00:20:08,400 --> 00:20:12,870
integrated solutions are there issued

00:20:10,470 --> 00:20:14,790
tracking everything which would make the

00:20:12,870 --> 00:20:17,220
free desktop app means really happy if

00:20:14,790 --> 00:20:21,720
they could sunset the bunch of services

00:20:17,220 --> 00:20:24,090
and yeah there was a pilot they

00:20:21,720 --> 00:20:27,060
fabricated but that essentially failed

00:20:24,090 --> 00:20:31,110
all these points so that that's a Laurie

00:20:27,060 --> 00:20:36,720
sure it again um on the big project

00:20:31,110 --> 00:20:38,130
Burke flows oh this is definitely really

00:20:36,720 --> 00:20:40,620
important for the colonel what's already

00:20:38,130 --> 00:20:42,240
important for for graphics for the Aero

00:20:40,620 --> 00:20:45,960
and we have a bunch of frat pose and I

00:20:42,240 --> 00:20:47,970
would say like the Intel and a in the

00:20:45,960 --> 00:20:49,380
wrapper are big enough that you really

00:20:47,970 --> 00:20:56,070
don't want to merge them together and

00:20:49,380 --> 00:20:59,460
have the big party there Saul yeah big

00:20:56,070 --> 00:21:01,560
projects I mean maybe it is the kernel

00:20:59,460 --> 00:21:04,170
way there you have a single overall tree

00:21:01,560 --> 00:21:06,870
with forks and pull requests going back

00:21:04,170 --> 00:21:09,870
and forth or kind of the X or Y where

00:21:06,870 --> 00:21:16,470
you have multiple rappers or multiple

00:21:09,870 --> 00:21:18,960
projects like the opengl stack on the

00:21:16,470 --> 00:21:21,030
book on booking stack and the X server

00:21:18,960 --> 00:21:23,400
and Weiland and and all these bits and

00:21:21,030 --> 00:21:25,830
pieces but still it's multiple referes

00:21:23,400 --> 00:21:27,300
it's different people kind of lots of

00:21:25,830 --> 00:21:33,420
different sub projects working together

00:21:27,300 --> 00:21:35,550
oh you want multiple issue trackers so

00:21:33,420 --> 00:21:38,130
you can customize it to you use cases

00:21:35,550 --> 00:21:40,230
you still want to be able to move issues

00:21:38,130 --> 00:21:42,420
back and forth which is something good

00:21:40,230 --> 00:21:48,030
lab has supported since a long time and

00:21:42,420 --> 00:21:49,440
get up I think since two weeks oh so so

00:21:48,030 --> 00:21:50,880
yeah that's pretty fun to model if you

00:21:49,440 --> 00:21:52,170
have a multiple Forks or multiple

00:21:50,880 --> 00:21:53,840
breakfasts and you can't move issues

00:21:52,170 --> 00:21:59,610
around it's useless

00:21:53,840 --> 00:22:02,130
yeah / / rep Oh discussion channels

00:21:59,610 --> 00:22:03,930
whatever form they have patch keys or

00:22:02,130 --> 00:22:07,050
submission keys or whatever it is and

00:22:03,930 --> 00:22:09,350
get lab from what I understand very much

00:22:07,050 --> 00:22:11,690
cares about big projects but

00:22:09,350 --> 00:22:14,840
one example is the the moving they she's

00:22:11,690 --> 00:22:18,020
around I know the woman is if you have

00:22:14,840 --> 00:22:20,510
like four Forks of wrappers you can

00:22:18,020 --> 00:22:22,820
after the fact we established a fork

00:22:20,510 --> 00:22:25,640
relationship yeah and you need to do

00:22:22,820 --> 00:22:27,740
that to do pull requests order that you

00:22:25,640 --> 00:22:29,660
use the UAE for pull requests so in

00:22:27,740 --> 00:22:31,310
github if you push a colonel raffle and

00:22:29,660 --> 00:22:33,560
there's another one who push the colonel

00:22:31,310 --> 00:22:37,940
wrapper you can't and get our pull

00:22:33,560 --> 00:22:40,580
requests which makes it useless ah they

00:22:37,940 --> 00:22:42,830
are working on something they call a

00:22:40,580 --> 00:22:44,720
super poll where you could on the

00:22:42,830 --> 00:22:47,390
colonel it would be a topic branch that

00:22:44,720 --> 00:22:49,790
you can send to multiple trays with one

00:22:47,390 --> 00:22:54,200
discussion and then both trees could

00:22:49,790 --> 00:22:56,990
merge it but it's even more powerful so

00:22:54,200 --> 00:22:59,960
the idea is that you can do arbitrary

00:22:56,990 --> 00:23:04,040
polls two arbitrary trays and so could

00:22:59,960 --> 00:23:07,940
do a pull request to the colonel and to

00:23:04,040 --> 00:23:10,850
live near an auntie mesa on to the x

00:23:07,940 --> 00:23:13,010
protocol repository and the x server and

00:23:10,850 --> 00:23:15,290
kind of do the entire user space to

00:23:13,010 --> 00:23:19,040
Colonel auntie and chain implementation

00:23:15,290 --> 00:23:21,740
and because it's still one thing hand

00:23:19,040 --> 00:23:24,290
that off to CIA and see I would know all

00:23:21,740 --> 00:23:26,630
all the branches they would need to pick

00:23:24,290 --> 00:23:28,220
from all the repositories compile it

00:23:26,630 --> 00:23:30,110
together give you the full stack around

00:23:28,220 --> 00:23:31,790
the test tree it's not implemented yet

00:23:30,110 --> 00:23:35,510
but they're working on it

00:23:31,790 --> 00:23:37,730
so just fundamentally that get lab I

00:23:35,510 --> 00:23:40,520
think do scare a big big projects

00:23:37,730 --> 00:23:44,210
whereas github and a lot of the others

00:23:40,520 --> 00:23:47,270
are much more optimized on small project

00:23:44,210 --> 00:23:49,700
single team one rathole and essentially

00:23:47,270 --> 00:23:53,930
the forks are just the private wrappers

00:23:49,700 --> 00:24:00,580
for a developers but not like do not

00:23:53,930 --> 00:24:02,690
work as sub projects so next few slides

00:24:00,580 --> 00:24:05,810
it's just going through the various

00:24:02,690 --> 00:24:07,640
features and what kind of works and what

00:24:05,810 --> 00:24:09,400
we think doesn't work and put my be

00:24:07,640 --> 00:24:14,810
useful and what we played around of it

00:24:09,400 --> 00:24:16,610
what is the merge request and the merge

00:24:14,810 --> 00:24:19,340
request is essentially gift branch

00:24:16,610 --> 00:24:20,330
including the ref log so you see all the

00:24:19,340 --> 00:24:22,820
old versions

00:24:20,330 --> 00:24:28,070
plus a target branch

00:24:22,820 --> 00:24:29,990
Plus Shenzhen review + CI status and CI

00:24:28,070 --> 00:24:32,539
results all kind of integrated and

00:24:29,990 --> 00:24:35,509
smashed into one so from a tracking and

00:24:32,539 --> 00:24:40,190
CI integration point of view really

00:24:35,509 --> 00:24:41,870
we'll be looking for um if you compare

00:24:40,190 --> 00:24:43,700
it to your pull request on the mailing

00:24:41,870 --> 00:24:47,269
list almost all the things are there you

00:24:43,700 --> 00:24:48,860
could the CI status as replies and

00:24:47,269 --> 00:24:51,320
discussions obviously on the mailing

00:24:48,860 --> 00:24:53,809
list ID the somewhat funny thing about

00:24:51,320 --> 00:24:55,610
the pull request is if you generate the

00:24:53,809 --> 00:24:57,590
pull request you need to specify the

00:24:55,610 --> 00:24:59,840
target branch so it can generate the

00:24:57,590 --> 00:25:01,879
Biff on this staff and all that under

00:24:59,840 --> 00:25:04,340
the patch list but it doesn't send it

00:25:01,879 --> 00:25:05,750
out so the maintainer on the other side

00:25:04,340 --> 00:25:08,840
actually needs to know whether this is

00:25:05,750 --> 00:25:11,480
for fixes or for next or what exactly

00:25:08,840 --> 00:25:15,500
they need to do so again we kind of have

00:25:11,480 --> 00:25:19,399
a bit the semantic loss um solve from

00:25:15,500 --> 00:25:22,179
just our information and tracking

00:25:19,399 --> 00:25:23,899
purpose I think merge requests are

00:25:22,179 --> 00:25:24,529
fundamentally the thing we're looking

00:25:23,899 --> 00:25:27,289
for

00:25:24,529 --> 00:25:29,090
compared to patchwork or a bunch of

00:25:27,289 --> 00:25:32,470
these kind of a tional things get lost

00:25:29,090 --> 00:25:35,480
and you don't have a nice overview of

00:25:32,470 --> 00:25:37,070
all the previous relations and the CR

00:25:35,480 --> 00:25:37,990
results how that evolved and the

00:25:37,070 --> 00:25:42,769
discussions

00:25:37,990 --> 00:25:45,019
um and then icing is also so the get ref

00:25:42,769 --> 00:25:46,789
lock is available over the network and

00:25:45,019 --> 00:25:49,070
get pull so he can get pull all the old

00:25:46,789 --> 00:25:52,100
versions and compare them and see if you

00:25:49,070 --> 00:25:54,679
reviewed version two or you can grab

00:25:52,100 --> 00:25:56,059
that and grab version 3 and like compare

00:25:54,679 --> 00:25:57,980
it and see what are they what they

00:25:56,059 --> 00:26:02,950
actually changed ah

00:25:57,980 --> 00:26:02,950
the problem with most requested oh

00:26:06,370 --> 00:26:18,080
here's well so who's who's ref log

00:26:14,720 --> 00:26:19,940
because I develop exclusively with git I

00:26:18,080 --> 00:26:21,710
can't even s not understand my own damn

00:26:19,940 --> 00:26:24,379
ref log when I've lost something just

00:26:21,710 --> 00:26:26,509
because I keep developing rebasing this

00:26:24,379 --> 00:26:28,610
screws up on the CI of to rebase to

00:26:26,509 --> 00:26:30,529
include this patch it's five deaths deep

00:26:28,610 --> 00:26:32,510
my ref log isn't comprehensive yes so

00:26:30,529 --> 00:26:34,700
how do you solve it's common opera your

00:26:32,510 --> 00:26:37,950
F lock on the machine

00:26:34,700 --> 00:26:41,159
it's the merchants request has its own

00:26:37,950 --> 00:26:43,289
ref lock so only when you push I mean

00:26:41,159 --> 00:26:44,730
obviously like some projects like people

00:26:43,289 --> 00:26:45,899
push like all the time and essentially

00:26:44,730 --> 00:26:48,059
use the merge request that's their

00:26:45,899 --> 00:26:50,850
developer a flock and then it's

00:26:48,059 --> 00:26:54,059
unreadable but if you if you make it

00:26:50,850 --> 00:26:55,950
can't a conscious decision of now I'm

00:26:54,059 --> 00:26:57,990
gonna publish this because I want other

00:26:55,950 --> 00:27:01,529
people to look at it I want CA to look

00:26:57,990 --> 00:27:05,340
at it that that's so the merge request

00:27:01,529 --> 00:27:07,649
has its own on ref lock it's not your

00:27:05,340 --> 00:27:11,789
own chaos in a way so the bigger problem

00:27:07,649 --> 00:27:15,179
is patch review the I think the biggest

00:27:11,789 --> 00:27:17,330
one is a lot of people get one thousand

00:27:15,179 --> 00:27:20,190
yard stare and panic attacks if you

00:27:17,330 --> 00:27:24,120
depict their email setup the way because

00:27:20,190 --> 00:27:26,460
they invest a lot of time but the other

00:27:24,120 --> 00:27:29,759
problem is also get lab has only very

00:27:26,460 --> 00:27:33,419
recently added the concept of per patch

00:27:29,759 --> 00:27:37,470
review big as a future feature request

00:27:33,419 --> 00:27:40,440
for the ik known people and the data

00:27:37,470 --> 00:27:42,360
model is there if you're desperate

00:27:40,440 --> 00:27:45,779
enough you can comment on it and

00:27:42,360 --> 00:27:49,669
individual patches but the UI is just

00:27:45,779 --> 00:27:53,159
not there solve for the short to medium

00:27:49,669 --> 00:27:56,700
to probably figures I guess I'm told

00:27:53,159 --> 00:27:59,580
this is very useful oh I guess for the

00:27:56,700 --> 00:28:01,950
actual code review all the amenities

00:27:59,580 --> 00:28:03,779
stick to mailing lists at least for big

00:28:01,950 --> 00:28:06,090
patch series for involve patch series

00:28:03,779 --> 00:28:10,559
like in the kernel or like long patch

00:28:06,090 --> 00:28:12,899
services in OpenGL Wilkin stack there's

00:28:10,559 --> 00:28:15,809
some smaller projects that use get lab

00:28:12,899 --> 00:28:18,470
for reviewing essential as guinea pigs

00:28:15,809 --> 00:28:23,129
and you're not too happy about it so

00:28:18,470 --> 00:28:27,330
yeah III guess one for the entire patch

00:28:23,129 --> 00:28:30,389
submission review problem one medium

00:28:27,330 --> 00:28:32,429
term solution could be you use the merge

00:28:30,389 --> 00:28:33,990
request to just track the evolution of

00:28:32,429 --> 00:28:36,000
your submission and I have a little

00:28:33,990 --> 00:28:38,370
scrap that takes your latest merge

00:28:36,000 --> 00:28:40,080
across the state takes the cover letter

00:28:38,370 --> 00:28:42,450
that's also included in the merge

00:28:40,080 --> 00:28:45,210
request uh thumps it under the mailing

00:28:42,450 --> 00:28:47,170
list for review with a nice link insert

00:28:45,210 --> 00:28:49,600
that in the mercial request that

00:28:47,170 --> 00:28:51,340
to the mail archive for you so it's all

00:28:49,600 --> 00:28:53,110
linked together and you essentially used

00:28:51,340 --> 00:28:56,320
the merge request to track the evolution

00:28:53,110 --> 00:28:58,930
are maybe assigned reviewers for man at

00:28:56,320 --> 00:29:01,420
UTC what's going on and fishier to dump

00:28:58,930 --> 00:29:05,410
the results into a nice place without

00:29:01,420 --> 00:29:08,350
spamming everyone so but we need to see

00:29:05,410 --> 00:29:09,730
how that works Oh a much nicer thing I

00:29:08,350 --> 00:29:14,910
think and we played around quite a bit

00:29:09,730 --> 00:29:14,910
if this already is a CI and get lap oh

00:29:16,590 --> 00:29:20,380
yeah

00:29:17,830 --> 00:29:21,760
back under under branch thing it's

00:29:20,380 --> 00:29:24,220
really well optimized for people when

00:29:21,760 --> 00:29:26,350
they have a series having to make a

00:29:24,220 --> 00:29:29,320
series out of single patches is a little

00:29:26,350 --> 00:29:31,750
unfortunate so having a way to just

00:29:29,320 --> 00:29:33,550
merge a patch instead of doing a you

00:29:31,750 --> 00:29:37,300
know the whole rebasing merge approach

00:29:33,550 --> 00:29:39,100
that some teams use if you always have a

00:29:37,300 --> 00:29:42,250
merge commit for every single patch did

00:29:39,100 --> 00:29:43,870
you ever apply he tends to get really

00:29:42,250 --> 00:29:46,060
noisy in the logs and stuff like that

00:29:43,870 --> 00:29:47,380
and having a cover letter on a single

00:29:46,060 --> 00:29:48,640
patch doesn't really add value you

00:29:47,380 --> 00:29:51,040
should have that in the patch

00:29:48,640 --> 00:29:53,950
description anyway so having a way of

00:29:51,040 --> 00:29:55,360
doing all of this but for the for a you

00:29:53,950 --> 00:29:57,400
know gwon definitely the for the one

00:29:55,360 --> 00:29:59,230
patch serious but maybe it also two or

00:29:57,400 --> 00:30:04,290
maybe three part series doing the

00:29:59,230 --> 00:30:06,700
rebasing approach can be useful I mean

00:30:04,290 --> 00:30:08,620
using merge request doesn't mean you

00:30:06,700 --> 00:30:11,260
need to use merge request to merge stuff

00:30:08,620 --> 00:30:14,080
a lot of projects use merge requests

00:30:11,260 --> 00:30:16,930
together CI results and discussions and

00:30:14,080 --> 00:30:19,810
all that stuff and then you get to have

00:30:16,930 --> 00:30:22,090
like the nice clean history okay that's

00:30:19,810 --> 00:30:24,040
very I mean it was a presentation with

00:30:22,090 --> 00:30:26,290
it I was the plan I know a bunch of the

00:30:24,040 --> 00:30:27,640
views we don't have a lot of pilots we

00:30:26,290 --> 00:30:31,600
have a bunch of experiment having used

00:30:27,640 --> 00:30:32,920
commercial you know in-house get they

00:30:31,600 --> 00:30:34,270
usually have two modes one is you do

00:30:32,920 --> 00:30:36,850
merge I don't want you to do every base

00:30:34,270 --> 00:30:40,630
and one is good sometimes that I want is

00:30:36,850 --> 00:30:42,940
good a lot of times yeah um so so the

00:30:40,630 --> 00:30:45,580
thing I really like is is the CI aspect

00:30:42,940 --> 00:30:48,280
so every time you push to your own repo

00:30:45,580 --> 00:30:53,020
do merge request whatever you can fire

00:30:48,280 --> 00:30:55,060
up an entire CI pipeline you run where

00:30:53,020 --> 00:30:57,370
you can specify docker images and small

00:30:55,060 --> 00:30:59,200
triplets you can build your own docker

00:30:57,370 --> 00:31:00,910
images conditionally and only your

00:30:59,200 --> 00:31:05,100
docker file being changed

00:31:00,910 --> 00:31:07,120
so just from a design you have to

00:31:05,100 --> 00:31:08,830
dependencies and can do entire

00:31:07,120 --> 00:31:10,540
flowcharts at first maybe build the

00:31:08,830 --> 00:31:12,880
docker image then build the thing then

00:31:10,540 --> 00:31:14,850
run the test cases then upload the

00:31:12,880 --> 00:31:17,830
things are that the results are there

00:31:14,850 --> 00:31:20,140
you can build really nice CI

00:31:17,830 --> 00:31:21,250
infrastructures and you fully control

00:31:20,140 --> 00:31:23,890
the environment through the docker

00:31:21,250 --> 00:31:25,630
images so no more pains with client-side

00:31:23,890 --> 00:31:30,520
scripting and dealing of everyone's

00:31:25,630 --> 00:31:33,910
favorite distro it also has support for

00:31:30,520 --> 00:31:37,090
special runners so for example the

00:31:33,910 --> 00:31:38,830
virtual GPU people for the virtual GL

00:31:37,090 --> 00:31:41,440
driver they have a special runner which

00:31:38,830 --> 00:31:44,050
happens to have a GPU so they can run

00:31:41,440 --> 00:31:45,880
the GPU test cases at full speed of

00:31:44,050 --> 00:31:48,390
hardware acceleration you don't need to

00:31:45,880 --> 00:31:51,370
fall back to software acceleration

00:31:48,390 --> 00:31:54,670
the nice thing again this is a big rep

00:31:51,370 --> 00:31:57,130
of workflow you have per project CI

00:31:54,670 --> 00:31:59,590
settings or meaning in github you have

00:31:57,130 --> 00:32:02,860
one Travis CI file and everyone has to

00:31:59,590 --> 00:32:05,920
use it and I don't think people would be

00:32:02,860 --> 00:32:09,130
happy if the DRM people would occupy the

00:32:05,920 --> 00:32:11,740
one single CI file that you have there

00:32:09,130 --> 00:32:14,740
is in gitlab CI every fork every repo

00:32:11,740 --> 00:32:17,470
you can specify there that file is you

00:32:14,740 --> 00:32:20,500
can have includes directives so the

00:32:17,470 --> 00:32:25,570
higher up level trees could include all

00:32:20,500 --> 00:32:28,330
the other CI pipeline's from all the sub

00:32:25,570 --> 00:32:30,010
sub projects and run them all assuming

00:32:28,330 --> 00:32:36,520
you have an efficient machine time to do

00:32:30,010 --> 00:32:41,800
that so this is all entirely CPU kind of

00:32:36,520 --> 00:32:43,840
virtual or CI for testing real hardware

00:32:41,800 --> 00:32:46,810
for drivers I would say you do not want

00:32:43,840 --> 00:32:48,670
to do that in the client because the box

00:32:46,810 --> 00:32:50,620
will the machines die all the time

00:32:48,670 --> 00:32:53,440
that's kind of the point so you need

00:32:50,620 --> 00:32:56,070
special hardware CI you can feed these

00:32:53,440 --> 00:32:58,900
results into their world Mercia cost

00:32:56,070 --> 00:33:01,360
with a link to your results and status

00:32:58,900 --> 00:33:04,020
updates like it's currently pending in

00:33:01,360 --> 00:33:08,740
the queue it's currently running

00:33:04,020 --> 00:33:13,720
it's you can force CI to block merging

00:33:08,740 --> 00:33:14,680
if you decide to use the foreign the UI

00:33:13,720 --> 00:33:16,450
merciful

00:33:14,680 --> 00:33:20,530
and the really nice thing there's full

00:33:16,450 --> 00:33:22,390
transparency like you can watch UCI job

00:33:20,530 --> 00:33:25,030
run in the cloud while the thing is

00:33:22,390 --> 00:33:27,309
doing its thing so from from a

00:33:25,030 --> 00:33:30,400
contributor point of view I think that

00:33:27,309 --> 00:33:34,650
the transparency of this is really nice

00:33:30,400 --> 00:33:38,800
the downside is are darker not so great

00:33:34,650 --> 00:33:40,870
in theory having these darker image is

00:33:38,800 --> 00:33:43,210
like I have perfect control over my

00:33:40,870 --> 00:33:45,700
build environment except if you want to

00:33:43,210 --> 00:33:49,090
build darker images in darker you need

00:33:45,700 --> 00:33:51,150
the route escape hatch which is not so

00:33:49,090 --> 00:33:53,410
great for a shared hosting service ah

00:33:51,150 --> 00:33:56,050
there's a bunch of things that aren't

00:33:53,410 --> 00:33:58,150
really namespaced or not set up yet the

00:33:56,050 --> 00:34:00,640
admins need to make sure that your run

00:33:58,150 --> 00:34:03,760
is supported like we'd like to use KVM

00:34:00,640 --> 00:34:06,580
for both in kernels we'd like to use bin

00:34:03,760 --> 00:34:09,100
format misc so we can cross compile to

00:34:06,580 --> 00:34:13,240
arm and then run the arm unit tests for

00:34:09,100 --> 00:34:15,730
user space stuff just for security I

00:34:13,240 --> 00:34:19,629
think we need the the KVM containers cut

00:34:15,730 --> 00:34:22,300
the container sing long terms oh the fto

00:34:19,629 --> 00:34:24,159
enemies have lots of fun with clouds I

00:34:22,300 --> 00:34:26,560
mean they've never done this before so

00:34:24,159 --> 00:34:29,080
they have all the ops the services

00:34:26,560 --> 00:34:34,980
temporary not available let's retry or

00:34:29,080 --> 00:34:39,040
maybe not things don't work so I think a

00:34:34,980 --> 00:34:43,270
once we get this set up pain points out

00:34:39,040 --> 00:34:46,570
of the way and make this run well it's

00:34:43,270 --> 00:34:49,090
nice but in theory it's it's like really

00:34:46,570 --> 00:34:50,620
nice to be fully in control of your

00:34:49,090 --> 00:34:54,010
build environment not have to deal with

00:34:50,620 --> 00:34:56,020
everyone's distro and set up and all

00:34:54,010 --> 00:34:58,600
these things but in practice at least

00:34:56,020 --> 00:35:00,850
right now after just half a year of

00:34:58,600 --> 00:35:03,310
playing around with it and quite a pile

00:35:00,850 --> 00:35:06,640
of projects adopting it it's kind of not

00:35:03,310 --> 00:35:11,680
there yet another thing that I really

00:35:06,640 --> 00:35:15,400
like is lots of vaccinations I think a

00:35:11,680 --> 00:35:17,260
lot of projects are the really great

00:35:15,400 --> 00:35:19,530
things with guiding contributors along

00:35:17,260 --> 00:35:21,730
for their country there this emissions

00:35:19,530 --> 00:35:24,120
making sure they follow all the little

00:35:21,730 --> 00:35:26,320
rules automatically linking them to your

00:35:24,120 --> 00:35:27,680
documentation and things like that and

00:35:26,320 --> 00:35:32,170
kind of releasing maintainer

00:35:27,680 --> 00:35:34,579
of doing the silly a repetitive work

00:35:32,170 --> 00:35:37,550
that's done through weapons which

00:35:34,579 --> 00:35:39,650
regressive server somehow there and get

00:35:37,550 --> 00:35:43,369
up just recently an ant actions their

00:35:39,650 --> 00:35:45,819
instead of a calling a Babu to remote

00:35:43,369 --> 00:35:50,630
server you just fire up a docker image

00:35:45,819 --> 00:35:52,670
to run your stuff ah which gitlab does

00:35:50,630 --> 00:35:54,770
not yet have but given that their entire

00:35:52,670 --> 00:35:57,140
CI infrastructures bull and docker I

00:35:54,770 --> 00:36:00,230
have they they fix that scene and I

00:35:57,140 --> 00:36:03,290
think long-term that kind of automated

00:36:00,230 --> 00:36:07,960
maintainer BOTS that do the simple silly

00:36:03,290 --> 00:36:10,309
things the the the usual mistakes and

00:36:07,960 --> 00:36:13,099
contributors and catching them without

00:36:10,309 --> 00:36:15,290
getting angry or frustrated or burned

00:36:13,099 --> 00:36:18,650
that I think long-term that's gonna be

00:36:15,290 --> 00:36:21,339
the biggest thing that kid like looking

00:36:18,650 --> 00:36:25,670
at other projects what we could think oh

00:36:21,339 --> 00:36:27,970
there's also an issue tracker the FDR

00:36:25,670 --> 00:36:31,069
means are a bit freaked out about your

00:36:27,970 --> 00:36:32,960
privacy regulations because books are

00:36:31,069 --> 00:36:34,670
low looks like it's a private submission

00:36:32,960 --> 00:36:37,940
except that the other end it fans it

00:36:34,670 --> 00:36:39,859
idea public mailing list what is not so

00:36:37,940 --> 00:36:42,460
great because the user doesn't really

00:36:39,859 --> 00:36:46,390
realize that we have a bunch of warnings

00:36:42,460 --> 00:36:49,819
but they would like to sunset that or

00:36:46,390 --> 00:36:51,589
you can have per report templates so

00:36:49,819 --> 00:36:54,589
again for big projects you can have a

00:36:51,589 --> 00:36:56,990
lock report template for Intel idea I

00:36:54,589 --> 00:37:00,099
meant l1 for the era AMD for dear and

00:36:56,990 --> 00:37:02,540
overall so that's all pretty nice

00:37:00,099 --> 00:37:06,880
customization is entirely through labels

00:37:02,540 --> 00:37:10,130
so bit unstructured but fairly powerful

00:37:06,880 --> 00:37:12,950
our timeline most projects have moved

00:37:10,130 --> 00:37:15,680
over on most host the projects hosted on

00:37:12,950 --> 00:37:17,900
for us cough have moved over the kernel

00:37:15,680 --> 00:37:20,270
wrappers are currently blocked on some

00:37:17,900 --> 00:37:23,960
infrastructure work that means don't

00:37:20,270 --> 00:37:28,069
only host the big kernel repos until

00:37:23,960 --> 00:37:29,990
they switched from tenth until I switch

00:37:28,069 --> 00:37:32,839
to set up so that multiple front ends

00:37:29,990 --> 00:37:36,890
would run in parallel and automatically

00:37:32,839 --> 00:37:38,720
scale so that the huge kernel history

00:37:36,890 --> 00:37:41,150
doesn't like take down the service for

00:37:38,720 --> 00:37:45,140
everyone else there's lots of experiment

00:37:41,150 --> 00:37:47,230
see I saw him in the in in the past half

00:37:45,140 --> 00:37:50,150
years with my grading this being a

00:37:47,230 --> 00:37:52,700
thousand CIA runs this for our pipelines

00:37:50,150 --> 00:37:56,569
run a bunch of projects have looked into

00:37:52,700 --> 00:37:59,200
issue issue tracking migration was kind

00:37:56,569 --> 00:38:02,210
of lacking answer quite a lot have

00:37:59,200 --> 00:38:04,400
adopted or are experimenting around with

00:38:02,210 --> 00:38:06,109
merge request so somehow we have three

00:38:04,400 --> 00:38:10,099
thousand requests already in all of

00:38:06,109 --> 00:38:13,039
eyesore ah so some rate of the talk I

00:38:10,099 --> 00:38:15,529
think patchwork is a solution to your

00:38:13,039 --> 00:38:18,650
self-inflicted problem kind of evolved a

00:38:15,529 --> 00:38:20,809
semantic loss a five years ago I would

00:38:18,650 --> 00:38:22,750
have said this is nonsense patchwork is

00:38:20,809 --> 00:38:25,339
the solution to the problems we having

00:38:22,750 --> 00:38:27,319
and fundamentally are very thing he

00:38:25,339 --> 00:38:30,020
won't attract the the merge request

00:38:27,319 --> 00:38:31,849
which has the full history including the

00:38:30,020 --> 00:38:34,730
baseline not just would you change and

00:38:31,849 --> 00:38:38,240
to target and ideally also the history

00:38:34,730 --> 00:38:42,400
of all the the old stuff Oh get lap CI I

00:38:38,240 --> 00:38:44,869
think is awesome once we fully set it up

00:38:42,400 --> 00:38:47,270
the entire clad stuff is kind of not

00:38:44,869 --> 00:38:50,420
quite so awesome or at least our admins

00:38:47,270 --> 00:38:52,640
need to learn quite a bit on the

00:38:50,420 --> 00:38:57,890
automation front I think it lab has

00:38:52,640 --> 00:39:00,049
fallen behind compared to github at

00:38:57,890 --> 00:39:03,650
least not I don't think there's any

00:39:00,049 --> 00:39:06,559
other fully open source solution that

00:39:03,650 --> 00:39:08,299
has anything close and on the on the

00:39:06,559 --> 00:39:10,520
patch review I would say it's definitely

00:39:08,299 --> 00:39:14,049
current state is bad it's not useful

00:39:10,520 --> 00:39:18,880
usable for big patch series for

00:39:14,049 --> 00:39:22,579
complicated patches but I do think that

00:39:18,880 --> 00:39:24,440
has quite a bit of potential with being

00:39:22,579 --> 00:39:27,829
able to better track the ongoing

00:39:24,440 --> 00:39:30,380
discussions and carry over comments when

00:39:27,829 --> 00:39:32,089
super enthusiastic people like resend

00:39:30,380 --> 00:39:34,609
your patch service five times while you

00:39:32,089 --> 00:39:36,650
try to review it so your your old

00:39:34,609 --> 00:39:38,049
comments don't get immediately lost like

00:39:36,650 --> 00:39:46,359
and on a mailing list

00:39:38,049 --> 00:39:46,359
so that's it questions questions

00:39:50,690 --> 00:39:58,050
so you now have batches with full

00:39:53,700 --> 00:40:04,890
context not just free wines so you will

00:39:58,050 --> 00:40:07,020
have oh I'm not purchased not just free

00:40:04,890 --> 00:40:09,120
wines of context but the food context

00:40:07,020 --> 00:40:13,260
like in a nursery class you don't have

00:40:09,120 --> 00:40:15,900
patches you have the entire branch like

00:40:13,260 --> 00:40:18,480
the entire get branch okay but when you

00:40:15,900 --> 00:40:23,550
review the changes you can see the full

00:40:18,480 --> 00:40:27,030
context you can review so I think you

00:40:23,550 --> 00:40:38,160
can look at the full file on the I could

00:40:27,030 --> 00:40:39,990
you then have that fine I mean that

00:40:38,160 --> 00:40:43,680
that's kind of the idea of the talk is

00:40:39,990 --> 00:40:46,890
just so we've been looking into this so

00:40:43,680 --> 00:40:49,470
as far as revolutions go I think the the

00:40:46,890 --> 00:40:52,020
overall free open-source graphics people

00:40:49,470 --> 00:40:53,840
are super enthusiastic about this a lot

00:40:52,020 --> 00:40:56,370
of people push really hard for this

00:40:53,840 --> 00:40:59,160
unexpected just from all the past

00:40:56,370 --> 00:41:02,100
examples in a few years

00:40:59,160 --> 00:41:09,090
graphic kernel graphics might also at

00:41:02,100 --> 00:41:10,860
least adopt a bunch of these things so

00:41:09,090 --> 00:41:12,690
you said at some point that when you do

00:41:10,860 --> 00:41:14,910
a merger into the main tree we clean up

00:41:12,690 --> 00:41:16,590
all the history right and I think you

00:41:14,910 --> 00:41:18,840
are asking can how do we have a

00:41:16,590 --> 00:41:20,610
mechanism for preserving all of the

00:41:18,840 --> 00:41:22,170
history that we have in the kernel which

00:41:20,610 --> 00:41:24,270
is the multiple patch submissions the

00:41:22,170 --> 00:41:26,280
cover letters and everything else and I

00:41:24,270 --> 00:41:28,440
think the answer is either yes or no and

00:41:26,280 --> 00:41:30,270
I didn't quite get what it is do we lose

00:41:28,440 --> 00:41:32,430
the history on emerging gitlab or do we

00:41:30,270 --> 00:41:37,650
keep it as in all of the ref log type

00:41:32,430 --> 00:41:40,320
history um so I mean if you do a merge

00:41:37,650 --> 00:41:47,240
in the lit in the get history the ref

00:41:40,320 --> 00:41:50,670
log is obviously not there but but it's

00:41:47,240 --> 00:41:54,290
it's kept on github like as long as we

00:41:50,670 --> 00:41:54,290
keep the service alive which

00:41:56,569 --> 00:42:07,759
ah it's special reps it's special matter

00:42:03,619 --> 00:42:10,009
so I mean if you in in the get repo you

00:42:07,759 --> 00:42:13,249
can have refs heads and I think there's

00:42:10,009 --> 00:42:15,140
refs virtual requests and it's there

00:42:13,249 --> 00:42:16,579
like tax right so what you're really

00:42:15,140 --> 00:42:18,079
saying is there's a view of the tree

00:42:16,579 --> 00:42:19,999
that is completely clean like the

00:42:18,079 --> 00:42:22,039
colonel is but in parallel because of

00:42:19,999 --> 00:42:24,109
the process we keep a set of magic

00:42:22,039 --> 00:42:25,579
branches magic get notes or whatever

00:42:24,109 --> 00:42:27,439
that actually have all this history and

00:42:25,579 --> 00:42:40,699
which is what I think you were asking

00:42:27,439 --> 00:42:42,499
about since you have very little time I

00:42:40,699 --> 00:42:47,660
mean be moved us to the hallway track

00:42:42,499 --> 00:42:51,769
and if there's other questions to

00:42:47,660 --> 00:42:53,109
off-roader see I too did lab one of the

00:42:51,769 --> 00:42:55,699
concerns they may have is the

00:42:53,109 --> 00:42:58,910
privatization of your home features have

00:42:55,699 --> 00:43:01,549
you ever like needed a new feature and

00:42:58,910 --> 00:43:07,880
then we cast it attack to get 11 all

00:43:01,549 --> 00:43:11,839
that did get lab disaster I take public

00:43:07,880 --> 00:43:14,089
contributions at a regular pace so if

00:43:11,839 --> 00:43:16,939
you really wanted I do you think you can

00:43:14,089 --> 00:43:19,279
like have to do they do all the so it's

00:43:16,939 --> 00:43:22,130
not just the DC r plus MIT they do all

00:43:19,279 --> 00:43:23,839
their design discussions in public the

00:43:22,130 --> 00:43:26,109
only thing that's private or mock

00:43:23,839 --> 00:43:28,519
private is kind of customer sales

00:43:26,109 --> 00:43:30,259
irrelevant stuff that you see if they

00:43:28,519 --> 00:43:32,390
know that they reference a private issue

00:43:30,259 --> 00:43:34,189
that you can't say but all the technical

00:43:32,390 --> 00:43:36,289
discussion is in public all the merge

00:43:34,189 --> 00:43:38,319
requests are in public and there's quite

00:43:36,289 --> 00:43:41,269
a few people who do contribute

00:43:38,319 --> 00:43:43,130
externally to get lap and make things

00:43:41,269 --> 00:43:43,640
happen so if you desperately want the

00:43:43,130 --> 00:43:47,209
fakie

00:43:43,640 --> 00:43:49,009
I do you think you can make it how I

00:43:47,209 --> 00:43:51,589
mean there's the question of a open core

00:43:49,009 --> 00:43:54,469
and if you just reimplemented the

00:43:51,589 --> 00:43:58,339
feature they already have they might

00:43:54,469 --> 00:44:00,769
yeah I don't know what the discussions

00:43:58,339 --> 00:44:02,659
they will will pan out in general

00:44:00,769 --> 00:44:04,369
they're very open to external

00:44:02,659 --> 00:44:05,519
conversations right now might always

00:44:04,369 --> 00:44:13,109
change

00:44:05,519 --> 00:44:14,579
I think when the no when the free

00:44:13,109 --> 00:44:15,809
desktop guys came to them originally to

00:44:14,579 --> 00:44:17,159
what they were like saying we'll give

00:44:15,809 --> 00:44:18,390
you the enterprise edition and they're

00:44:17,159 --> 00:44:20,399
like no no we don't want the enterprise

00:44:18,390 --> 00:44:21,569
edition we want to use the open one but

00:44:20,399 --> 00:44:23,699
we'd like this feature for the

00:44:21,569 --> 00:44:25,199
Enterprise Edition and they they did

00:44:23,699 --> 00:44:26,759
actually were open to discussion about

00:44:25,199 --> 00:44:28,319
moving certain features out of the Reg

00:44:26,759 --> 00:44:31,079
president sort of core just to support

00:44:28,319 --> 00:44:33,989
this there's been very good interactions

00:44:31,079 --> 00:44:35,699
with them as a group yeah yes oh right

00:44:33,989 --> 00:44:38,909
now they're very supportive connect

00:44:35,699 --> 00:44:41,419
gnome Debian and us adopting it laughs

00:44:38,909 --> 00:44:44,219
but of course like this might change

00:44:41,419 --> 00:44:48,800
rather quickly so we're not backing on

00:44:44,219 --> 00:44:53,449
it time up thanks a lot for listening

00:44:48,800 --> 00:44:53,449

YouTube URL: https://www.youtube.com/watch?v=eVNbMG_yugs


