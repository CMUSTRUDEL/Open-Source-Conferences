Title: LPC2018 - SoC Maintainer Group
Publication date: 2018-11-28
Playlist: Linux Plumbers Conference 2018
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/265/
speaker:  Olof Johansson (Facebook)
Captions: 
	00:00:05,580 --> 00:00:16,200
so this is where we come from originally

00:00:10,760 --> 00:00:17,670
so when I came into Leonardo the way we

00:00:16,200 --> 00:00:20,070
handle the arm socks was very different

00:00:17,670 --> 00:00:22,770
from today best give you the each sock

00:00:20,070 --> 00:00:24,300
was but on their own and there were lots

00:00:22,770 --> 00:00:29,310
of issues that we don't have to get into

00:00:24,300 --> 00:00:32,430
I started taking over all the SLC

00:00:29,310 --> 00:00:35,160
specifics from the ARM architecture and

00:00:32,430 --> 00:00:39,149
then eventually pulled in Olaf and Kevin

00:00:35,160 --> 00:00:41,039
and everything that were the idea was to

00:00:39,149 --> 00:00:43,370
have some other people in there which

00:00:41,039 --> 00:00:51,719
then went off to do other things so

00:00:43,370 --> 00:00:54,539
we've been doing it since then and yeah

00:00:51,719 --> 00:00:56,910
but that's sort of everybody says well

00:00:54,539 --> 00:00:58,829
arm got cleaned up arm was awesome it's

00:00:56,910 --> 00:01:00,420
so smooth running now but what we've

00:00:58,829 --> 00:01:02,280
been doing is a small part of it and

00:01:00,420 --> 00:01:04,710
really what happened was that we spun up

00:01:02,280 --> 00:01:07,130
a bunch of other subsystems a bunch of

00:01:04,710 --> 00:01:11,010
other maintainer

00:01:07,130 --> 00:01:13,050
stuff like common clock ping control and

00:01:11,010 --> 00:01:14,970
a handful of other large and small

00:01:13,050 --> 00:01:16,920
subsystems got started they got cleaned

00:01:14,970 --> 00:01:18,870
up people figured out what we needed I

00:01:16,920 --> 00:01:21,540
think I counted 20 of them at some point

00:01:18,870 --> 00:01:23,190
yeah so I mean there's a couple of

00:01:21,540 --> 00:01:25,590
really big ones but but there's there

00:01:23,190 --> 00:01:28,500
was a lot of work sometimes I think we

00:01:25,590 --> 00:01:30,960
did a lot of the credit but a lot of

00:01:28,500 --> 00:01:33,450
people did a lot of work on this of

00:01:30,960 --> 00:01:35,640
course all of this was to move outboard

00:01:33,450 --> 00:01:37,800
support from arch arm there was sort of

00:01:35,640 --> 00:01:41,360
the initial goal in many ways and making

00:01:37,800 --> 00:01:43,440
them off multi-platform possible so

00:01:41,360 --> 00:01:45,660
pallavi's end up being finding good

00:01:43,440 --> 00:01:47,250
homes for it sometimes they find homes

00:01:45,660 --> 00:01:49,710
in other subsystems sometimes have

00:01:47,250 --> 00:01:51,840
created new subsystems we've been pretty

00:01:49,710 --> 00:01:54,600
good at a mining avoiding drivers misc

00:01:51,840 --> 00:01:57,900
maybe because aren't took over died and

00:01:54,600 --> 00:02:00,930
Birla did himself so but we have things

00:01:57,900 --> 00:02:02,340
like drivers SOC which sometimes you

00:02:00,930 --> 00:02:04,290
need a corner to put the code it doesn't

00:02:02,340 --> 00:02:06,660
belong anywhere else and

00:02:04,290 --> 00:02:09,060
yeah and then of course the device

00:02:06,660 --> 00:02:11,100
profiles that was the big thing so 80%

00:02:09,060 --> 00:02:13,200
of the pets that we get enough for

00:02:11,100 --> 00:02:16,020
device trees and they didn't even exist

00:02:13,200 --> 00:02:17,340
when we started so that was all board

00:02:16,020 --> 00:02:19,380
specific for each board that you

00:02:17,340 --> 00:02:21,450
supported you had to have a C file that

00:02:19,380 --> 00:02:23,010
called him to other files and every

00:02:21,450 --> 00:02:27,720
architecture was every platform was

00:02:23,010 --> 00:02:30,360
doing it differently here a couple of

00:02:27,720 --> 00:02:34,130
subsystems ping control

00:02:30,360 --> 00:02:36,990
Dinah's created that in the fall of 11

00:02:34,130 --> 00:02:38,400
based on author dated started mid 11 I

00:02:36,990 --> 00:02:40,740
don't remember exact history

00:02:38,400 --> 00:02:44,340
prepared my slides very late didn't do

00:02:40,740 --> 00:02:46,770
too much history searching comma clock

00:02:44,340 --> 00:02:49,200
framework same thing that was a bigger

00:02:46,770 --> 00:02:52,770
task and I remember on many long

00:02:49,200 --> 00:02:55,170
discussions over how to do this and it

00:02:52,770 --> 00:02:56,820
took a lot of work up front to get get

00:02:55,170 --> 00:03:01,470
to things right to start so I took a

00:02:56,820 --> 00:03:04,970
little bit longer to establish again

00:03:01,470 --> 00:03:07,440
drivers SOC came out two reasons was

00:03:04,970 --> 00:03:09,870
people need to share things between 32

00:03:07,440 --> 00:03:11,280
and 64 bit arm but also freescale and

00:03:09,870 --> 00:03:14,220
others had things that you need to share

00:03:11,280 --> 00:03:15,360
between PowerPC and arm and we didn't

00:03:14,220 --> 00:03:20,390
want to put dependencies between

00:03:15,360 --> 00:03:20,390
architectures so it came out of there

00:03:20,459 --> 00:03:26,640
an example of a slightly smaller

00:03:23,640 --> 00:03:28,350
subsystem is to reset controller ones we

00:03:26,640 --> 00:03:30,660
traditionally been merging that which is

00:03:28,350 --> 00:03:32,970
what maybe remember it but it's our

00:03:30,660 --> 00:03:35,209
dimension we have we have a whole bunch

00:03:32,970 --> 00:03:35,209
of these

00:03:35,700 --> 00:03:38,360
so

00:03:38,750 --> 00:03:45,380
but so the current situation is as

00:03:43,700 --> 00:03:48,380
opposed to the old days where you would

00:03:45,380 --> 00:03:50,210
start a new SOC platform by creating all

00:03:48,380 --> 00:03:52,940
the code in our charm and not knowing

00:03:50,210 --> 00:03:54,290
who had to send it now there is a place

00:03:52,940 --> 00:03:56,480
to send it but you have to send it to

00:03:54,290 --> 00:03:59,510
like five different people and get it

00:03:56,480 --> 00:04:01,130
all merged at the same time and if you

00:03:59,510 --> 00:04:04,520
could review comments that one might

00:04:01,130 --> 00:04:07,550
feed into the other so it always takes

00:04:04,520 --> 00:04:09,920
several releases to get a major new SOC

00:04:07,550 --> 00:04:11,720
platform in which is it has been a pain

00:04:09,920 --> 00:04:16,100
point for a lot of the platforms coming

00:04:11,720 --> 00:04:18,590
in for arm 64 and the same thing also

00:04:16,100 --> 00:04:21,500
happens on another architectures like

00:04:18,590 --> 00:04:23,660
risk 5 is now at the point where they

00:04:21,500 --> 00:04:33,440
are adding platform support and they are

00:04:23,660 --> 00:04:35,540
thinking about how to do that right so

00:04:33,440 --> 00:04:38,060
what one observation in the SOC work

00:04:35,540 --> 00:04:41,210
that I didn't expect initially is that

00:04:38,060 --> 00:04:43,520
all the SOC sees the the CPU core is the

00:04:41,210 --> 00:04:45,530
least important part of it so the the

00:04:43,520 --> 00:04:47,090
arm associate that we have in the tree

00:04:45,530 --> 00:04:49,790
they come from like 10 different

00:04:47,090 --> 00:04:52,220
architectures that had an SOC already

00:04:49,790 --> 00:04:55,460
with a different car and now they have

00:04:52,220 --> 00:04:57,800
an arm SOC and some of them will also

00:04:55,460 --> 00:05:03,370
have some other architecture in the

00:04:57,800 --> 00:05:05,840
future so yeah we start looking at what

00:05:03,370 --> 00:05:08,900
we can do and how we can improve things

00:05:05,840 --> 00:05:11,450
for people and I know that and this is

00:05:08,900 --> 00:05:15,110
one of the suggestions we've heard and

00:05:11,450 --> 00:05:16,490
we started looking at it one the final

00:05:15,110 --> 00:05:19,580
item here too is that when we started

00:05:16,490 --> 00:05:21,200
talking to other maintainer x' we also

00:05:19,580 --> 00:05:23,479
scribed to the same lists and especially

00:05:21,200 --> 00:05:26,270
for new platforms and ends up being a 12

00:05:23,479 --> 00:05:28,630
part series and two of them are for us

00:05:26,270 --> 00:05:31,010
two more for some added driver subsystem

00:05:28,630 --> 00:05:33,050
three are for something else and

00:05:31,010 --> 00:05:33,770
everybody reads all the email and

00:05:33,050 --> 00:05:36,470
decides

00:05:33,770 --> 00:05:37,639
what are they gonna review it what are

00:05:36,470 --> 00:05:39,319
you gonna ignore it and hope that

00:05:37,639 --> 00:05:40,819
somebody else will see it and review it

00:05:39,319 --> 00:05:46,340
and pick it up and there's sort of no

00:05:40,819 --> 00:05:48,530
way to share and sort of delegate and

00:05:46,340 --> 00:05:50,360
say hey I'll take this one but but I'm

00:05:48,530 --> 00:05:55,330
not gonna look at the others and things

00:05:50,360 --> 00:05:59,080
end up getting dropped yay

00:05:55,330 --> 00:05:59,080
did you just Paul

00:06:10,460 --> 00:06:16,139
another observation that I had was that

00:06:13,580 --> 00:06:19,919
our work has gotten really easy over

00:06:16,139 --> 00:06:21,840
time so it's all device three files most

00:06:19,919 --> 00:06:23,610
of the changes that we get come from

00:06:21,840 --> 00:06:26,039
people who have been working with us

00:06:23,610 --> 00:06:27,900
from the beginning from 2011 and they've

00:06:26,039 --> 00:06:31,650
been working on it for much longer than

00:06:27,900 --> 00:06:34,830
either of us have so they there's no

00:06:31,650 --> 00:06:39,180
reason why we need to be in control of

00:06:34,830 --> 00:06:41,069
an Omer submission or IMX submission or

00:06:39,180 --> 00:06:44,669
any of the platforms the people we

00:06:41,069 --> 00:06:47,599
usually fully trust yeah yeah so another

00:06:44,669 --> 00:06:50,219
thing we'll be talking about the nuts

00:06:47,599 --> 00:06:54,479
it hasn't hasn't so much being a team

00:06:50,219 --> 00:06:56,819
here but we should be able to get into

00:06:54,479 --> 00:07:01,009
out of the way more than more than we

00:06:56,819 --> 00:07:03,750
are and get more days review and

00:07:01,009 --> 00:07:05,460
allowing platform maintainer to

00:07:03,750 --> 00:07:08,550
essentially get their their their code

00:07:05,460 --> 00:07:12,479
in expanding that group of committers

00:07:08,550 --> 00:07:15,569
essentially it's another aspect of this

00:07:12,479 --> 00:07:17,879
that we will also talk about more moving

00:07:15,569 --> 00:07:19,560
forward I think DRM and dr misc are

00:07:17,879 --> 00:07:21,150
definitely leading the charge on that

00:07:19,560 --> 00:07:23,789
and we're keeping an eye on what they're

00:07:21,150 --> 00:07:24,990
doing but at the same time Wells are

00:07:23,789 --> 00:07:27,089
looking at this from from another

00:07:24,990 --> 00:07:29,569
perspective of like hey should we change

00:07:27,089 --> 00:07:32,370
to group composition and when we do this

00:07:29,569 --> 00:07:34,169
instead of just sticking to arm should

00:07:32,370 --> 00:07:37,080
we expand it across other subsystems and

00:07:34,169 --> 00:07:41,370
that's why we end up coming to where we

00:07:37,080 --> 00:07:44,849
are today I think this is just repeating

00:07:41,370 --> 00:07:47,279
what Larry said but yeah a lot of stuff

00:07:44,849 --> 00:07:48,810
takes a while to come in and anybody's

00:07:47,279 --> 00:07:49,680
tried upstream a platform especially

00:07:48,810 --> 00:07:51,680
when there's been a good amount of

00:07:49,680 --> 00:07:54,089
development downstream on a fork tree

00:07:51,680 --> 00:07:57,240
when you're halfway in is when you have

00:07:54,089 --> 00:07:58,939
a call to pain nothing applies cleanly

00:07:57,240 --> 00:08:01,409
anymore because all the code has changed

00:07:58,939 --> 00:08:04,439
but it's also not complete enough that

00:08:01,409 --> 00:08:06,419
you can just move over so the more we

00:08:04,439 --> 00:08:09,120
can shorten that time window for people

00:08:06,419 --> 00:08:10,710
and still keep code quality up but just

00:08:09,120 --> 00:08:18,599
making a process easier for people I

00:08:10,710 --> 00:08:20,810
think that'll be a beneficial group a

00:08:18,599 --> 00:08:23,370
little bit so we have the concept also

00:08:20,810 --> 00:08:24,479
framework forces drivers and a lot of

00:08:23,370 --> 00:08:25,709
times we have people who have gone

00:08:24,479 --> 00:08:29,360
really deep to figure out what the

00:08:25,709 --> 00:08:33,199
framework should be and they they are

00:08:29,360 --> 00:08:35,130
you know deep experts in that area and

00:08:33,199 --> 00:08:38,339
reviewing frameworks and end up

00:08:35,130 --> 00:08:41,310
reviewing drivers drivers sometimes is

00:08:38,339 --> 00:08:43,289
more boilerplate you make an existing

00:08:41,310 --> 00:08:44,850
driver some doesn't there's feedback you

00:08:43,289 --> 00:08:49,410
need to fix the framework and stuff like

00:08:44,850 --> 00:08:51,980
that but letting people still focus on

00:08:49,410 --> 00:08:55,680
their expertise is really good and

00:08:51,980 --> 00:08:57,690
nothing else but we can probably start

00:08:55,680 --> 00:09:00,269
sharing more of the sort of boilerplate

00:08:57,690 --> 00:09:02,760
here's another talk driver that looks

00:09:00,269 --> 00:09:08,370
like every other clock driver apparently

00:09:02,760 --> 00:09:10,170
didn't ever do but now one one example

00:09:08,370 --> 00:09:11,790
would be the device tree files so we

00:09:10,170 --> 00:09:14,640
have maintenance for the device tree

00:09:11,790 --> 00:09:17,040
subsystem that work on the code we have

00:09:14,640 --> 00:09:18,510
reviewers for the bindings and we have a

00:09:17,040 --> 00:09:20,190
lot of people who review the actual

00:09:18,510 --> 00:09:21,660
device tree files but all the device

00:09:20,190 --> 00:09:25,019
profiles eventually go through our code

00:09:21,660 --> 00:09:27,000
we rely on the sub arch maintaining us

00:09:25,019 --> 00:09:29,819
to have reviewed most of that before us

00:09:27,000 --> 00:09:32,040
as I usually take a look I see that it's

00:09:29,819 --> 00:09:33,449
fine if I in the rare case that I see

00:09:32,040 --> 00:09:35,399
something that really sticks out I might

00:09:33,449 --> 00:09:38,660
complain but that doesn't really happen

00:09:35,399 --> 00:09:38,660
all that often so

00:09:38,880 --> 00:09:46,450
the same thing with with clock would

00:09:41,620 --> 00:09:49,210
mean with we are not in the business of

00:09:46,450 --> 00:09:53,440
getting in the in the clock subsystem

00:09:49,210 --> 00:09:57,160
maintenance but if someone meant someone

00:09:53,440 --> 00:09:59,500
sends a new clock driver for a new

00:09:57,160 --> 00:10:01,030
platform that comes up then it makes

00:09:59,500 --> 00:10:17,470
sense to review that together with the

00:10:01,030 --> 00:10:18,130
rest of the platform so yeah our plan

00:10:17,470 --> 00:10:19,360
changes

00:10:18,130 --> 00:10:22,750
so we're thinking of renaming

00:10:19,360 --> 00:10:26,710
essentially thinking arm off calling

00:10:22,750 --> 00:10:28,780
ourselves SOC group we are not going to

00:10:26,710 --> 00:10:30,250
change if you are a arm platform sub

00:10:28,780 --> 00:10:31,750
maintainer and you like your workflow

00:10:30,250 --> 00:10:33,130
keep it

00:10:31,750 --> 00:10:35,140
yeahmy we're not looking to change that

00:10:33,130 --> 00:10:38,160
at all keep keep sending to our mcarnold

00:10:35,140 --> 00:10:40,600
our goal you can send it to arm with my

00:10:38,160 --> 00:10:41,640
might subscribe to the other at some

00:10:40,600 --> 00:10:47,050
point

00:10:41,640 --> 00:10:49,030
both of them we are going to brave

00:10:47,050 --> 00:10:51,250
listing this and maintainer is probably

00:10:49,030 --> 00:10:52,600
our maternal or org we've always kept

00:10:51,250 --> 00:10:54,490
unlisted because we haven't had the

00:10:52,600 --> 00:10:56,200
capacity to deal with a Putsch onslaught

00:10:54,490 --> 00:11:01,000
it's the same as getting linux arm

00:10:56,200 --> 00:11:02,410
kernel in your inbox and I think with

00:11:01,000 --> 00:11:04,150
this because we're going to spin up a

00:11:02,410 --> 00:11:05,470
patchwork and try to track things a

00:11:04,150 --> 00:11:06,940
little bit more we just came from a talk

00:11:05,470 --> 00:11:10,660
where Danielle said patchwork doesn't

00:11:06,940 --> 00:11:12,340
work but we're still at a point where it

00:11:10,660 --> 00:11:14,880
should work we're a smaller group we're

00:11:12,340 --> 00:11:17,560
gonna grow out of it to at some point

00:11:14,880 --> 00:11:20,350
and then set up possibly a new shared

00:11:17,560 --> 00:11:22,480
get tree then just like me namespace arm

00:11:20,350 --> 00:11:24,280
SOC with your namespace branch it's in

00:11:22,480 --> 00:11:25,720
here to give people their own places so

00:11:24,280 --> 00:11:27,880
we don't step on each other too much but

00:11:25,720 --> 00:11:31,120
we can learn things closer to each other

00:11:27,880 --> 00:11:34,120
and as I mentioned set up a patchwork

00:11:31,120 --> 00:11:35,230
and start doing some automation when we

00:11:34,120 --> 00:11:37,660
started talking to a couple of our

00:11:35,230 --> 00:11:40,270
maintainer x' they have a lot of

00:11:37,660 --> 00:11:41,510
automation already all of us do to deal

00:11:40,270 --> 00:11:44,000
with our our workflow

00:11:41,510 --> 00:11:45,860
and some of us think we were in tomorrow

00:11:44,000 --> 00:11:48,920
and we want to try and build something

00:11:45,860 --> 00:11:53,750
more together and that's sort of key

00:11:48,920 --> 00:11:55,339
buddy exactly how and what so one

00:11:53,750 --> 00:11:56,810
example of the topic branches would be

00:11:55,339 --> 00:11:58,639
like we used to have something like 15

00:11:56,810 --> 00:12:01,190
topic branches every merge window and

00:11:58,639 --> 00:12:03,860
they would be based on one another and

00:12:01,190 --> 00:12:06,019
they would interact in different ways we

00:12:03,860 --> 00:12:08,510
are now down to three or four topic

00:12:06,019 --> 00:12:12,800
branches in most merged windows and

00:12:08,510 --> 00:12:14,870
usually the same ones and if we pull in

00:12:12,800 --> 00:12:17,269
two or three more subsystems only we

00:12:14,870 --> 00:12:19,459
would have two or three more branches in

00:12:17,269 --> 00:12:22,579
that tree to start with so each branch

00:12:19,459 --> 00:12:24,970
of that tree would then be no different

00:12:22,579 --> 00:12:29,240
from what we now have in a separate tree

00:12:24,970 --> 00:12:31,149
if everything goes to goes as normal but

00:12:29,240 --> 00:12:33,709
we could also have yet another branch

00:12:31,149 --> 00:12:37,850
for a new platform that then contains

00:12:33,709 --> 00:12:38,990
everything related to the the areas that

00:12:37,850 --> 00:12:41,449
are normally in one of the standard

00:12:38,990 --> 00:12:44,209
branches and then just have everything

00:12:41,449 --> 00:12:47,209
go in one one thing I think that's

00:12:44,209 --> 00:12:54,829
similar to how the the x86 maintenance

00:12:47,209 --> 00:13:03,920
work with the tip tree yeah you did

00:12:54,829 --> 00:13:06,230
right people we're talking to initially

00:13:03,920 --> 00:13:07,819
about this is this will be a bit of a

00:13:06,230 --> 00:13:09,440
trial run we might do it we might decide

00:13:07,819 --> 00:13:10,670
it doesn't actually work you might want

00:13:09,440 --> 00:13:14,300
to back out of it so we want to do it

00:13:10,670 --> 00:13:15,980
too broad to at once and and you know so

00:13:14,300 --> 00:13:19,339
we talked to Lina's vallei we talked to

00:13:15,980 --> 00:13:21,170
the clock maintainer Stephan and Mike

00:13:19,339 --> 00:13:24,560
and we're going to start probably

00:13:21,170 --> 00:13:28,130
bringing those in control subsystem

00:13:24,560 --> 00:13:29,420
coming clock and clock drivers in and

00:13:28,130 --> 00:13:31,010
then we'll take it from there and we're

00:13:29,420 --> 00:13:33,080
open to talk to other Greeks of course

00:13:31,010 --> 00:13:34,970
I've heard a couple of people say hey

00:13:33,080 --> 00:13:38,210
please take these drivers I don't want

00:13:34,970 --> 00:13:39,980
to deal with them but you know we're

00:13:38,210 --> 00:13:42,500
happy to talk about that over time we're

00:13:39,980 --> 00:13:43,970
not looking we're not looking to you

00:13:42,500 --> 00:13:46,280
know take over anything from anybody

00:13:43,970 --> 00:13:48,830
we're just trying to optimize for for

00:13:46,280 --> 00:13:50,840
everybody and make it easier but if

00:13:48,830 --> 00:13:53,900
there's an architecture that has

00:13:50,840 --> 00:13:57,640
maintainer who doesn't feel is keeping

00:13:53,900 --> 00:14:00,140
up with the things for some reason so

00:13:57,640 --> 00:14:02,030
it's my observation most of the

00:14:00,140 --> 00:14:05,180
architecture that we have are fairly

00:14:02,030 --> 00:14:09,440
stable require much less maintenance

00:14:05,180 --> 00:14:12,590
than arm but that also means that

00:14:09,440 --> 00:14:14,630
there's fear reviewers who can look at

00:14:12,590 --> 00:14:17,360
the patch that come up when there is a

00:14:14,630 --> 00:14:23,390
specific stuff so when you have a new

00:14:17,360 --> 00:14:25,430
MIPS SOC you could talk we can talk to

00:14:23,390 --> 00:14:27,380
the mips maintain us to see if it makes

00:14:25,430 --> 00:14:29,420
sense to the our tree instead of having

00:14:27,380 --> 00:14:31,700
go through there as it was traditionally

00:14:29,420 --> 00:14:34,100
without us trying to take control of

00:14:31,700 --> 00:14:37,480
something that they don't want us to

00:14:34,100 --> 00:14:37,480
take control of but if again we can help

00:14:41,950 --> 00:14:45,560
and also as I mentioned earlier the

00:14:44,060 --> 00:14:47,000
whole spinning up frameworks and

00:14:45,560 --> 00:14:49,490
figuring out what the common stuff

00:14:47,000 --> 00:14:50,870
should be that was something that took a

00:14:49,490 --> 00:14:52,610
lot of attention from people in the

00:14:50,870 --> 00:14:54,650
media to focus on one area at a time and

00:14:52,610 --> 00:14:56,270
we're hitting a point where we're still

00:14:54,650 --> 00:14:58,430
doing some of that but but the worst of

00:14:56,270 --> 00:15:01,040
it is done and joining forces make sense

00:14:58,430 --> 00:15:02,330
Retta was to talk about the interconnect

00:15:01,040 --> 00:15:04,400
framework today that would be one

00:15:02,330 --> 00:15:06,740
example what we've done that in the past

00:15:04,400 --> 00:15:08,240
like a new framework often comes in

00:15:06,740 --> 00:15:11,030
through the arm circuitry and then gets

00:15:08,240 --> 00:15:14,030
spun out to one to a subsystem

00:15:11,030 --> 00:15:15,950
maintainer but you could also have it as

00:15:14,030 --> 00:15:17,780
part of the sock tree for a while and

00:15:15,950 --> 00:15:20,930
then have some maintainer join the sort

00:15:17,780 --> 00:15:22,579
team so we're gonna play it by ear and

00:15:20,930 --> 00:15:23,899
see what works or not

00:15:22,579 --> 00:15:29,720
guess maybe we'll talk about this in a

00:15:23,899 --> 00:15:32,889
year and make a call and so without any

00:15:29,720 --> 00:15:36,199
questions also steven is here I think

00:15:32,889 --> 00:15:48,049
Adina's is not here

00:15:36,199 --> 00:15:49,670
anybody who questions laura so what is

00:15:48,049 --> 00:15:51,529
the velocity for new platforms now

00:15:49,670 --> 00:15:54,709
versus when you first started is it

00:15:51,529 --> 00:15:56,959
larger smaller about the same I think

00:15:54,709 --> 00:15:58,790
when we started we didn't really have

00:15:56,959 --> 00:16:01,249
many many platforms as much as we need

00:15:58,790 --> 00:16:04,189
to clean up the ones we had um we tend

00:16:01,249 --> 00:16:08,410
to have new Estes is every now and then

00:16:04,189 --> 00:16:12,529
and boards definitely ever so often I

00:16:08,410 --> 00:16:14,350
haven't we tend to have something more

00:16:12,529 --> 00:16:16,759
or less every merch window I think I

00:16:14,350 --> 00:16:18,110
think that come in bursts so it's not

00:16:16,759 --> 00:16:21,459
sometimes there's five of them then

00:16:18,110 --> 00:16:23,899
there's none farfel of merch windows

00:16:21,459 --> 00:16:25,610
also with boards sometimes we have 10

00:16:23,899 --> 00:16:30,309
new boards for one as I'll see and then

00:16:25,610 --> 00:16:30,309
we don't get one new board for that one

00:16:30,850 --> 00:16:34,730
but this yes

00:16:32,810 --> 00:16:36,740
within a year we'd have a couple of we

00:16:34,730 --> 00:16:38,570
had been I think when I started out we

00:16:36,740 --> 00:16:42,620
had some like 25 platforms now we know

00:16:38,570 --> 00:16:46,490
70 so I don't think it's speeding up or

00:16:42,620 --> 00:16:51,110
slowing down just a question on the

00:16:46,490 --> 00:16:53,480
moving from our MSC to SOC how does I'm

00:16:51,110 --> 00:16:55,910
not 100% sure it does now but how's the

00:16:53,480 --> 00:16:57,290
device tree work in that sense are you

00:16:55,910 --> 00:16:58,940
going to have the exact same device tree

00:16:57,290 --> 00:17:01,310
file except for like two lines different

00:16:58,940 --> 00:17:02,150
because the ARM chip is different or you

00:17:01,310 --> 00:17:05,120
know they're gonna be the exact

00:17:02,150 --> 00:17:07,370
duplicate of every arm device tree

00:17:05,120 --> 00:17:13,220
device tree in that has the new CPU in

00:17:07,370 --> 00:17:15,829
it so we have some Sosa's that are that

00:17:13,220 --> 00:17:18,050
we can run in 32 and 64-bit mode yeah

00:17:15,829 --> 00:17:20,000
and we actually shared the device tree

00:17:18,050 --> 00:17:21,770
files so it's some link from one to the

00:17:20,000 --> 00:17:25,970
other we could do the same thing like if

00:17:21,770 --> 00:17:27,740
we had yeah fpga-based could run with

00:17:25,970 --> 00:17:29,780
the integrated arm core or a risk five

00:17:27,740 --> 00:17:33,020
core on the FPGA side that we could

00:17:29,780 --> 00:17:34,610
share the the device tree passed in the

00:17:33,020 --> 00:17:35,590
same way all right how's that that's

00:17:34,610 --> 00:17:39,560
good

00:17:35,590 --> 00:17:41,000
the way I think setting up was that you

00:17:39,560 --> 00:17:42,700
end up having include files that define

00:17:41,000 --> 00:17:44,480
the common parts and we have way to

00:17:42,700 --> 00:17:47,230
referencing include files from a

00:17:44,480 --> 00:17:47,230
different architecture

00:17:49,300 --> 00:18:00,220
any other questions so last time I

00:17:57,730 --> 00:18:03,490
brought in a new SOC - the Qualcomm tree

00:18:00,220 --> 00:18:04,810
I needed regulators and mailbox patches

00:18:03,490 --> 00:18:09,280
are you gonna have those in the sock

00:18:04,810 --> 00:18:10,840
tree as well if they want to join I

00:18:09,280 --> 00:18:12,880
think we want to start somewhere not

00:18:10,840 --> 00:18:16,570
overwhelm us and see what works cuz

00:18:12,880 --> 00:18:18,550
there's also some overlap on maintainer

00:18:16,570 --> 00:18:20,290
x' there so we'll start with this and

00:18:18,550 --> 00:18:24,430
then we'll keep talking about how it

00:18:20,290 --> 00:18:26,710
works and maybe cuz did the typical

00:18:24,430 --> 00:18:29,560
problem we have is studying they include

00:18:26,710 --> 00:18:31,660
DT by D's directory contains stuff that

00:18:29,560 --> 00:18:33,790
is shared between multiple but if we're

00:18:31,660 --> 00:18:36,760
gonna solve that by pushing all these

00:18:33,790 --> 00:18:39,540
things into one common dumping ground or

00:18:36,760 --> 00:18:41,950
staging ground then we need to put all

00:18:39,540 --> 00:18:44,380
all the frameworks that we're using I

00:18:41,950 --> 00:18:47,350
mean some of my remote prog stuff needs

00:18:44,380 --> 00:18:50,410
to go into there from time to time which

00:18:47,350 --> 00:18:52,090
I feel is confusing for for the

00:18:50,410 --> 00:18:54,000
developers ya know and I think we're

00:18:52,090 --> 00:18:56,590
very happy to do this we just need to

00:18:54,000 --> 00:18:58,120
quite frankly we need a bunch of tooling

00:18:56,590 --> 00:19:00,220
and figure out processes around this so

00:18:58,120 --> 00:19:02,710
we wanted to start with a couple and yes

00:19:00,220 --> 00:19:05,500
there are the natural boundary is

00:19:02,710 --> 00:19:07,840
essentially DT includes and related

00:19:05,500 --> 00:19:10,200
things but we didn't want to over

00:19:07,840 --> 00:19:12,900
overwhelm ourselves and Sarah Zaza for a

00:19:10,200 --> 00:19:17,220
chaotic situation

00:19:12,900 --> 00:19:20,159
so what I do think is that we can make

00:19:17,220 --> 00:19:22,529
it easier to for you to say like this

00:19:20,159 --> 00:19:23,549
new drive and it should go through the

00:19:22,529 --> 00:19:26,429
subtree

00:19:23,549 --> 00:19:29,279
we've tried not to do that too much in

00:19:26,429 --> 00:19:31,049
the past so we we would tend to say like

00:19:29,279 --> 00:19:33,150
the new clock drive I should really go

00:19:31,049 --> 00:19:36,630
through the clock tree we yeah and

00:19:33,150 --> 00:19:38,100
sometimes we took it anyway but we could

00:19:36,630 --> 00:19:39,990
have they talked to every subsystem

00:19:38,100 --> 00:19:41,669
maintainer now and say we're happy to

00:19:39,990 --> 00:19:43,620
take it now because we're already doing

00:19:41,669 --> 00:19:47,690
that the same thing for the subsystems

00:19:43,620 --> 00:19:47,690
now it's more natural with the new model

00:19:53,270 --> 00:20:00,690
thanks so the one of the good things

00:19:58,409 --> 00:20:02,399
that happened from the arm SOC

00:20:00,690 --> 00:20:04,529
transition is that as the slides

00:20:02,399 --> 00:20:06,809
mentioned a lot of the maintenance work

00:20:04,529 --> 00:20:10,350
for what was under arch our mock and

00:20:06,809 --> 00:20:12,480
plat got distributed out into a set of

00:20:10,350 --> 00:20:16,110
specialist maintainer x' like the clock

00:20:12,480 --> 00:20:18,350
folks or like the pin control folks one

00:20:16,110 --> 00:20:22,350
thing that I didn't quite understand is

00:20:18,350 --> 00:20:26,820
now we you all be merging clock patches

00:20:22,350 --> 00:20:28,260
directly without their review or the

00:20:26,820 --> 00:20:33,840
review is still in the same hands

00:20:28,260 --> 00:20:35,580
basically and for for existing work that

00:20:33,840 --> 00:20:38,880
would still go into the respective

00:20:35,580 --> 00:20:41,580
branch whereas it would go into the tree

00:20:38,880 --> 00:20:43,590
so that wouldn't change much at all it's

00:20:41,580 --> 00:20:45,480
just we are trying to work closer

00:20:43,590 --> 00:20:48,029
together and one of the things we do to

00:20:45,480 --> 00:20:49,910
do that is have one get tree with

00:20:48,029 --> 00:20:51,320
multiple branches instead of so

00:20:49,910 --> 00:20:54,110
different countries but then they're the

00:20:51,320 --> 00:20:56,150
other things like having chef patchwork

00:20:54,110 --> 00:20:59,870
and other things that we might come up

00:20:56,150 --> 00:21:02,240
with but I think there's also an

00:20:59,870 --> 00:21:04,750
opportunity for you know as we brought

00:21:02,240 --> 00:21:07,850
in the group further on having people

00:21:04,750 --> 00:21:09,350
cut across and help with you know sort

00:21:07,850 --> 00:21:13,190
of the trusted reviewer that we talked

00:21:09,350 --> 00:21:14,390
about in Dan Williams talked bringing

00:21:13,190 --> 00:21:15,140
those kind of people into the groups

00:21:14,390 --> 00:21:16,820
that I can

00:21:15,140 --> 00:21:19,910
how about rid of you and things like

00:21:16,820 --> 00:21:22,640
that maybe across you know the groups I

00:21:19,910 --> 00:21:26,960
don't think I I'm definitely not gonna

00:21:22,640 --> 00:21:29,330
touch drivers so one of my first ideas

00:21:26,960 --> 00:21:32,410
was actually to start out by bringing in

00:21:29,330 --> 00:21:35,560
more of the support maintenance like

00:21:32,410 --> 00:21:38,270
well among those 70 platforms we have

00:21:35,560 --> 00:21:39,710
maybe five to ten that are really active

00:21:38,270 --> 00:21:41,900
and we know those people really well and

00:21:39,710 --> 00:21:46,520
I put be happy having anybody any one of

00:21:41,900 --> 00:21:50,480
them on the team but then all of

00:21:46,520 --> 00:21:52,400
suggested maybe we start the other way

00:21:50,480 --> 00:21:54,830
first and try to get tooling up to speed

00:21:52,400 --> 00:21:57,080
and then once once we can work with a

00:21:54,830 --> 00:21:58,970
larger group of people and have the

00:21:57,080 --> 00:22:02,300
tools to do this then we can extend it

00:21:58,970 --> 00:22:04,940
to two more people hmm

00:22:02,300 --> 00:22:07,940
and then if we're at that point we would

00:22:04,940 --> 00:22:10,640
work the same way as the erm misc group

00:22:07,940 --> 00:22:14,390
where are the ideas you sent a patch or

00:22:10,640 --> 00:22:16,850
you send a pull request and there's a

00:22:14,390 --> 00:22:18,560
submitter a reviewer and a committer and

00:22:16,850 --> 00:22:19,850
two of them can be the same but you at

00:22:18,560 --> 00:22:22,490
least have to have two people involved

00:22:19,850 --> 00:22:27,140
in in any pull request so you can have

00:22:22,490 --> 00:22:30,870
if you have a platform you want to get

00:22:27,140 --> 00:22:33,520
it merged into the sub tree you need to

00:22:30,870 --> 00:22:35,680
find someone to review it and that you

00:22:33,520 --> 00:22:37,090
can merge yourself or you can find

00:22:35,680 --> 00:22:39,760
someone to review that someone else to

00:22:37,090 --> 00:22:42,910
merge it or if you pull something from

00:22:39,760 --> 00:22:46,480
someone else then you just you say I've

00:22:42,910 --> 00:22:48,670
reviewed this please commit this so it

00:22:46,480 --> 00:22:50,590
could be that I'm not really fully

00:22:48,670 --> 00:22:53,020
understanding that the details of

00:22:50,590 --> 00:22:55,000
exactly how things would change but just

00:22:53,020 --> 00:22:56,590
from a naive point of view one of the

00:22:55,000 --> 00:22:59,320
nice things about splitting things out

00:22:56,590 --> 00:23:02,140
into independent drivers is that they

00:22:59,320 --> 00:23:03,760
should in theory be able to stand on

00:23:02,140 --> 00:23:05,890
their own whether the rest of the

00:23:03,760 --> 00:23:08,260
patches are merged or not but one of the

00:23:05,890 --> 00:23:11,140
key places where that's really not true

00:23:08,260 --> 00:23:13,900
is and and where it might make sense to

00:23:11,140 --> 00:23:16,240
have a control point on some of the SOC

00:23:13,900 --> 00:23:19,360
stuff would be the the DT related

00:23:16,240 --> 00:23:22,750
bindings and include files are you guys

00:23:19,360 --> 00:23:25,470
planning to operate there so the include

00:23:22,750 --> 00:23:27,520
file tend to go in with the driver today

00:23:25,470 --> 00:23:29,680
usually that's the way you end up doing

00:23:27,520 --> 00:23:32,560
it and then we have actually pushed back

00:23:29,680 --> 00:23:33,760
and told people don't don't when you can

00:23:32,560 --> 00:23:36,340
when it's just a couple of small

00:23:33,760 --> 00:23:38,530
constants just use the hard-coded

00:23:36,340 --> 00:23:40,150
constants for a release cycle and then

00:23:38,530 --> 00:23:42,490
add the include file dependencies

00:23:40,150 --> 00:23:46,750
because adding the dependencies tends to

00:23:42,490 --> 00:23:48,970
be a little bit messy and I think I mean

00:23:46,750 --> 00:23:50,680
we're not we're looking to make that a

00:23:48,970 --> 00:23:52,410
bit easier but things should still stand

00:23:50,680 --> 00:23:54,930
on their own

00:23:52,410 --> 00:23:59,010
you know that's still the case we're not

00:23:54,930 --> 00:24:00,810
looking to make people send one patch to

00:23:59,010 --> 00:24:02,430
that's you know a driver and he can and

00:24:00,810 --> 00:24:04,920
things like that but if they send it in

00:24:02,430 --> 00:24:07,590
one series it'll be easier to to divide

00:24:04,920 --> 00:24:09,840
and conquer and so then guys like Steven

00:24:07,590 --> 00:24:11,400
they'll send pull requests to you and

00:24:09,840 --> 00:24:13,800
then you'll send it to Lennis or they'll

00:24:11,400 --> 00:24:16,260
continue to merge through through labels

00:24:13,800 --> 00:24:18,320
and they will sent the pull request to

00:24:16,260 --> 00:24:21,680
Dino's as before okay that branch and

00:24:18,320 --> 00:24:24,870
the one opportunity that we have is that

00:24:21,680 --> 00:24:29,310
if both the flock maintainers or both

00:24:24,870 --> 00:24:30,570
the arm sort maintain us are on vacation

00:24:29,310 --> 00:24:31,830
during the merge window then one of the

00:24:30,570 --> 00:24:34,350
others can just as well send a pull

00:24:31,830 --> 00:24:37,320
request for the same tree or do any of

00:24:34,350 --> 00:24:38,850
the other jobs as a fallback where I

00:24:37,320 --> 00:24:40,380
think we might end up sharing some is

00:24:38,850 --> 00:24:42,870
that we might have one fixes parent for

00:24:40,380 --> 00:24:44,670
example and we might even be able to do

00:24:42,870 --> 00:24:46,950
lower latency fixes if there are small

00:24:44,670 --> 00:24:48,660
trivial changes that you know with some

00:24:46,950 --> 00:24:55,710
time we get comfort reviewing each

00:24:48,660 --> 00:24:57,480
other's subsystems large changes but one

00:24:55,710 --> 00:24:59,100
long one of the most important points I

00:24:57,480 --> 00:25:01,080
think is bit we're still trying to

00:24:59,100 --> 00:25:04,050
figure out what we actually want and if

00:25:01,080 --> 00:25:06,270
if you have any input of what you think

00:25:04,050 --> 00:25:06,890
would be good then we'd like to hear

00:25:06,270 --> 00:25:09,930
about that

00:25:06,890 --> 00:25:11,520
yeah well it's of course it's all quite

00:25:09,930 --> 00:25:14,220
new because the the details aren't

00:25:11,520 --> 00:25:16,620
really there but just naively just to

00:25:14,220 --> 00:25:20,070
maybe rephrase that I said before it

00:25:16,620 --> 00:25:23,520
seems like foreign soc addressing things

00:25:20,070 --> 00:25:25,560
at the DT level and the the related way

00:25:23,520 --> 00:25:28,200
is really kind of the main control point

00:25:25,560 --> 00:25:30,930
for what it does and doesn't constitute

00:25:28,200 --> 00:25:33,750
an SOC and everything else is some form

00:25:30,930 --> 00:25:36,330
of either drivers or arch code so for

00:25:33,750 --> 00:25:38,550
the drivers for something like clock you

00:25:36,330 --> 00:25:40,380
probably want clock specialists to be

00:25:38,550 --> 00:25:45,330
reviewing those or you know if you guys

00:25:40,380 --> 00:25:47,490
are getting into clock stuff maybe yeah

00:25:45,330 --> 00:25:49,890
and then and then for the arch stuff

00:25:47,490 --> 00:25:53,220
probably same story I mean you probably

00:25:49,890 --> 00:25:54,630
want you know guys like the you know

00:25:53,220 --> 00:25:57,360
whoever the experts are for the

00:25:54,630 --> 00:25:58,080
individual arch arch stuff to focus on

00:25:57,360 --> 00:26:00,960
that all right

00:25:58,080 --> 00:26:05,010
I don't know if people are aware of that

00:26:00,960 --> 00:26:06,900
here but arch armed 64 anything outside

00:26:05,010 --> 00:26:09,150
of DT more or less and arch armed

00:26:06,900 --> 00:26:11,970
anything out of DT we don't maintain

00:26:09,150 --> 00:26:14,070
that 32-bit arm is maintained by Russell

00:26:11,970 --> 00:26:15,840
King and he takes the architecture

00:26:14,070 --> 00:26:17,700
conscious there he takes you know mmm

00:26:15,840 --> 00:26:20,520
and and all that are relevant things

00:26:17,700 --> 00:26:22,470
they're armed 64 is is maintained by

00:26:20,520 --> 00:26:25,530
Catalan and well and others at our we

00:26:22,470 --> 00:26:28,320
are and risk 5 is maintained by by

00:26:25,530 --> 00:26:29,160
Palmer and Andrew and and dad is not

00:26:28,320 --> 00:26:32,100
changing at all

00:26:29,160 --> 00:26:34,560
I don't know nearly about enough about

00:26:32,100 --> 00:26:36,800
the architecture it of them that's

00:26:34,560 --> 00:26:36,800
better

00:26:37,280 --> 00:26:43,230
from my experience with the drm misc the

00:26:41,220 --> 00:26:46,830
misc is not so much stuff that doesn't

00:26:43,230 --> 00:26:51,240
fall into any other Brown get trees is

00:26:46,830 --> 00:26:53,430
more like stuff that the ownership for

00:26:51,240 --> 00:26:55,110
that series doesn't fall into a certain

00:26:53,430 --> 00:26:56,940
area so basically put it into misc but

00:26:55,110 --> 00:26:58,500
basically means you're going to drive it

00:26:56,940 --> 00:27:00,210
you're going to get the reviewers and

00:26:58,500 --> 00:27:03,600
because you have to commit right you can

00:27:00,210 --> 00:27:06,660
push it so a clock maintainer if he

00:27:03,600 --> 00:27:08,850
wants to push a series that has device 3

00:27:06,660 --> 00:27:11,810
and other things that's one way of doing

00:27:08,850 --> 00:27:14,040
it having a misc sock misc or something

00:27:11,810 --> 00:27:19,500
that will allow you to basically carry

00:27:14,040 --> 00:27:21,150
the whole series forward yeah I think

00:27:19,500 --> 00:27:22,740
one of the things up until now we worked

00:27:21,150 --> 00:27:24,540
pretty hard on its to decouple so that

00:27:22,740 --> 00:27:26,970
you don't need a serious right so you

00:27:24,540 --> 00:27:29,910
work on the driver you land a driver the

00:27:26,970 --> 00:27:32,340
driver is there you can build it you

00:27:29,910 --> 00:27:33,780
land a DT change that might be described

00:27:32,340 --> 00:27:35,880
in the hardware that the driver needs to

00:27:33,780 --> 00:27:38,700
probe but that's a synchronous from the

00:27:35,880 --> 00:27:39,680
driver merge so you don't today it's

00:27:38,700 --> 00:27:41,310
been going through a different trees

00:27:39,680 --> 00:27:42,780
independently and then when they hit

00:27:41,310 --> 00:27:44,880
both hit next then they both didn't

00:27:42,780 --> 00:27:47,620
mainline it magically works but nothing

00:27:44,880 --> 00:27:52,059
is broken until both of them do

00:27:47,620 --> 00:27:54,790
and it has it has enforced a certain

00:27:52,059 --> 00:27:57,010
amount of discipline on the development

00:27:54,790 --> 00:27:58,720
cycle I think is most of that is being

00:27:57,010 --> 00:28:00,730
positive and healthy but there are some

00:27:58,720 --> 00:28:02,680
cases where you know it's a bit of a

00:28:00,730 --> 00:28:05,200
steep hill to climb when you're a new

00:28:02,680 --> 00:28:07,150
contributor with a new platform aren't

00:28:05,200 --> 00:28:09,820
mentioned you know if you need to have

00:28:07,150 --> 00:28:11,290
thread between an author reviewer and

00:28:09,820 --> 00:28:12,309
committer you need to be two different

00:28:11,290 --> 00:28:14,650
people

00:28:12,309 --> 00:28:16,120
not even DRM lets you know brand new

00:28:14,650 --> 00:28:18,460
people that come for the first time in

00:28:16,120 --> 00:28:20,620
the community to be necessarily the

00:28:18,460 --> 00:28:23,110
review or the committer and you build up

00:28:20,620 --> 00:28:24,850
that you build up pretty quickly but you

00:28:23,110 --> 00:28:27,610
know we're not looking for people to

00:28:24,850 --> 00:28:32,020
self merge just you know out of the blue

00:28:27,610 --> 00:28:35,260
but we can broadly spin up a group of a

00:28:32,020 --> 00:28:37,660
broad group of yours see yeah you can

00:28:35,260 --> 00:28:39,700
land them together we've been trying

00:28:37,660 --> 00:28:42,070
hard because it does provide cleaner

00:28:39,700 --> 00:28:44,020
code to to separate it and I think we

00:28:42,070 --> 00:28:47,710
want to stay focus on that but the

00:28:44,020 --> 00:28:50,320
concern it is one serious spill yes I

00:28:47,710 --> 00:28:56,920
still don't like the TT and include had

00:28:50,320 --> 00:28:59,890
us because it does mean that you have a

00:28:56,920 --> 00:29:01,780
dependency in the driver and that has

00:28:59,890 --> 00:29:04,270
caused so many problems in the past or

00:29:01,780 --> 00:29:06,370
my recommendation would still be to

00:29:04,270 --> 00:29:08,290
completely avoid those headers even if

00:29:06,370 --> 00:29:13,170
we have a mechanism to make it easier to

00:29:08,290 --> 00:29:15,070
to have it and change it later

00:29:13,170 --> 00:29:18,520
disagreeing with my comment and your

00:29:15,070 --> 00:29:19,809
hair on stage there's also we also have

00:29:18,520 --> 00:29:21,700
the opportunity that if you want to add

00:29:19,809 --> 00:29:23,410
an include finally Center separately in

00:29:21,700 --> 00:29:26,679
the series it gets applied on one branch

00:29:23,410 --> 00:29:30,340
that's merged into the branches in the

00:29:26,679 --> 00:29:34,270
tree as base but needed before say the

00:29:30,340 --> 00:29:36,370
driver or a DT file without having sort

00:29:34,270 --> 00:29:38,050
of loosely connected in across tree

00:29:36,370 --> 00:29:40,330
dependencies you just have cross branch

00:29:38,050 --> 00:29:41,030
dependencies from one Cree which which a

00:29:40,330 --> 00:29:43,160
lot

00:29:41,030 --> 00:29:49,070
a lot less error-prone and stuff like

00:29:43,160 --> 00:29:51,650
that so if if the sock trees gonna

00:29:49,070 --> 00:29:53,720
handle new socks and new drivers that

00:29:51,650 --> 00:29:56,990
coming in are you going to handle trees

00:29:53,720 --> 00:29:59,300
that have lost their lovers and current

00:29:56,990 --> 00:30:00,920
maintain is like for us well for the

00:29:59,300 --> 00:30:03,640
some of the stuff I've seen the sh trees

00:30:00,920 --> 00:30:07,250
definitely lost its review it what

00:30:03,640 --> 00:30:09,200
everything is because kiss renesis is so

00:30:07,250 --> 00:30:11,270
active an arm that they tend to hey

00:30:09,200 --> 00:30:16,010
we're removing this and sh it comes in

00:30:11,270 --> 00:30:18,350
through yeah it was just because I've

00:30:16,010 --> 00:30:19,670
seen some cases where patches or series

00:30:18,350 --> 00:30:22,520
of kind of being blocked just because

00:30:19,670 --> 00:30:24,620
that one little part gets ignored maybe

00:30:22,520 --> 00:30:26,390
it just doesn't matter but is this a

00:30:24,620 --> 00:30:29,480
route that can sort of support that

00:30:26,390 --> 00:30:32,420
issue or I think we can we can we can do

00:30:29,480 --> 00:30:34,820
that we'll have to figure out sort of

00:30:32,420 --> 00:30:37,330
what works or not then when you step on

00:30:34,820 --> 00:30:39,560
toes or not but yeah yeah I mean that's

00:30:37,330 --> 00:30:41,270
labeling it as hey we're doing more than

00:30:39,560 --> 00:30:45,970
just arm when we need to do something

00:30:41,270 --> 00:30:45,970
one-off great

00:30:49,380 --> 00:30:53,320
yeah of course

00:30:51,010 --> 00:30:55,510
you know maybe you see a lot more pain

00:30:53,320 --> 00:30:57,460
you know with the merging of the new SOC

00:30:55,510 --> 00:30:59,410
s than I do since a lot of times these

00:30:57,460 --> 00:31:03,850
days I'm not tuned in on a lot of that

00:30:59,410 --> 00:31:06,010
but just my initial sense of that is

00:31:03,850 --> 00:31:07,809
that you know we have these DT files and

00:31:06,010 --> 00:31:10,750
currently they're all split out by arch

00:31:07,809 --> 00:31:13,570
right and so we we already have SOC s

00:31:10,750 --> 00:31:16,419
that are in the kernel that differ only

00:31:13,570 --> 00:31:19,000
by the CPU right and all of the

00:31:16,419 --> 00:31:21,490
peripherals on the SOC are the same so

00:31:19,000 --> 00:31:23,950
again just thinking from just an SOC

00:31:21,490 --> 00:31:26,409
specific point of view on Linux what

00:31:23,950 --> 00:31:29,440
really defines an SOC for us right now I

00:31:26,409 --> 00:31:31,809
would say is really just the the DT

00:31:29,440 --> 00:31:33,429
files and how they're structured and so

00:31:31,809 --> 00:31:34,809
that's something that definitely I think

00:31:33,429 --> 00:31:36,460
there could be a lot of you know

00:31:34,809 --> 00:31:38,049
improvement on how that goes into the

00:31:36,460 --> 00:31:39,820
tree and how its structured but

00:31:38,049 --> 00:31:40,690
hopefully the rest I mean I'm in theory

00:31:39,820 --> 00:31:44,260
should just be able to go in

00:31:40,690 --> 00:31:45,640
independently you know people who want

00:31:44,260 --> 00:31:49,720
to get rid of DTS in the kernel

00:31:45,640 --> 00:31:54,580
altogether which some pretty big

00:31:49,720 --> 00:31:56,890
problems so but that discussion has been

00:31:54,580 --> 00:31:59,760
going on for years right over and let's

00:31:56,890 --> 00:31:59,760
see what happens there

00:32:06,470 --> 00:32:14,000
so just for the record the DT maintainer

00:32:10,230 --> 00:32:14,000
is not a fan of the DT includes either

00:32:14,030 --> 00:32:18,840
but what I just thought of is those

00:32:17,010 --> 00:32:21,840
typically go in with the binding or

00:32:18,840 --> 00:32:26,220
that's the binding document and/or

00:32:21,840 --> 00:32:28,710
that's what I asked usually but once we

00:32:26,220 --> 00:32:31,410
go to schema for the bindings then

00:32:28,710 --> 00:32:34,500
there's gonna be a new dependency that

00:32:31,410 --> 00:32:37,980
that needs to go in before the DTS files

00:32:34,500 --> 00:32:48,150
go in so we can run checks on the DTS

00:32:37,980 --> 00:32:52,410
files for device specific bindings in

00:32:48,150 --> 00:32:57,660
the kernel repo well just like the

00:32:52,410 --> 00:33:05,130
binding Doc's today I are already

00:32:57,660 --> 00:33:11,760
offered on the list on the subject so so

00:33:05,130 --> 00:33:15,050
who do I send my ACPI patches to don't

00:33:11,760 --> 00:33:15,050
see see anybody else just send it to us

00:33:24,119 --> 00:33:29,940
no no I said we'll take just sent us the

00:33:26,739 --> 00:33:29,940
email we don't promise to apply it

00:33:47,759 --> 00:34:01,509
problem sorry so so yeah so every so C

00:34:00,129 --> 00:34:03,549
seems to have a serial port done a

00:34:01,509 --> 00:34:06,460
different way um I have no problem with

00:34:03,549 --> 00:34:08,799
you guys taking this patches because

00:34:06,460 --> 00:34:10,389
it's usually one in the middle of 12 in

00:34:08,799 --> 00:34:13,809
the middle and you need the dependencies

00:34:10,389 --> 00:34:16,109
above I mean regulators isn't that one

00:34:13,809 --> 00:34:19,299
yeah yeah there's a handful of them GPIO

00:34:16,109 --> 00:34:20,409
sometimes too so we'll little definite

00:34:19,299 --> 00:34:21,129
there's gonna be an active discussion

00:34:20,409 --> 00:34:25,079
over time

00:34:21,129 --> 00:34:25,079
but I'm willing to give that up

00:34:28,059 --> 00:34:31,929
yeah that's another one yeah

00:34:32,990 --> 00:34:35,679
yeah

00:34:41,040 --> 00:34:43,909
yeah

00:34:44,960 --> 00:34:49,369
so yeah and I guess for the people in

00:34:47,809 --> 00:34:52,129
the room this is well we'll figure out

00:34:49,369 --> 00:34:55,970
this going forward if it feels like

00:34:52,129 --> 00:34:57,440
we're stepping on toes absolutely let us

00:34:55,970 --> 00:34:59,000
know and if there's something you want

00:34:57,440 --> 00:35:00,950
to make sure that you're strongly loop

00:34:59,000 --> 00:35:05,450
in like Thomas just said with our cue

00:35:00,950 --> 00:35:09,680
chip and reviewed by Thomas will not you

00:35:05,450 --> 00:35:11,270
let us know anyone happy so but others

00:35:09,680 --> 00:35:13,460
might not and I just want to you know

00:35:11,270 --> 00:35:15,740
just just let us know I wear wear this

00:35:13,460 --> 00:35:18,079
is not for us to take over from anybody

00:35:15,740 --> 00:35:22,599
it's just hey they're there gaps here

00:35:18,079 --> 00:35:22,599
and and and we can figure much oh

00:35:27,579 --> 00:35:31,369
absolutely and absolutely in most cases

00:35:30,140 --> 00:35:33,200
I think we're looking to add those

00:35:31,369 --> 00:35:36,460
maintainer into the group so there will

00:35:33,200 --> 00:35:36,460
be part of the group you know so

00:35:42,859 --> 00:35:48,940
yeah we do that today because it tends

00:35:45,890 --> 00:36:01,670
to be platform fee to turn things on

00:35:48,940 --> 00:36:03,019
yeah or switching to 64 K pages just

00:36:01,670 --> 00:36:06,559
because they got better benchmarks on

00:36:03,019 --> 00:36:08,239
their SOC yeah no I mean just like we

00:36:06,559 --> 00:36:10,459
said we're not gonna touch you know

00:36:08,239 --> 00:36:13,190
frameworks and maybe over time we'll

00:36:10,459 --> 00:36:14,660
we'll look at and get familiar with and

00:36:13,190 --> 00:36:17,209
we can start group you and practice

00:36:14,660 --> 00:36:20,630
between each other process

00:36:17,209 --> 00:36:22,339
I assume that for now those of us are

00:36:20,630 --> 00:36:23,719
familiar with arm we're gonna keep

00:36:22,339 --> 00:36:25,339
applying DT patches we're gonna keep

00:36:23,719 --> 00:36:27,650
applying to have config patches and you

00:36:25,339 --> 00:36:30,200
know most of the people in group I would

00:36:27,650 --> 00:36:33,619
be confident you know letting do it but

00:36:30,200 --> 00:36:35,900
just for now assume that ownership stays

00:36:33,619 --> 00:36:38,719
mostly aligned with where it is just as

00:36:35,900 --> 00:36:41,200
a that's a group okay but in the group

00:36:38,719 --> 00:36:41,200
it's like

00:36:44,450 --> 00:36:51,380
any other questions Thomas well we have

00:36:49,220 --> 00:36:53,540
some mechanics to do or aiming maybe to

00:36:51,380 --> 00:36:55,160
get things going by the next March

00:36:53,540 --> 00:36:57,710
window we'll keep going you know staging

00:36:55,160 --> 00:36:59,690
for next release like we are and then

00:36:57,710 --> 00:37:02,060
try to see if we can get something up my

00:36:59,690 --> 00:37:04,340
next one will communicate and all the

00:37:02,060 --> 00:37:06,920
old email aliases all on retainers you

00:37:04,340 --> 00:37:08,330
know just keep you won't go into the

00:37:06,920 --> 00:37:13,850
bitbucket if you send it to the old

00:37:08,330 --> 00:37:14,660
contact people you know thanks everybody

00:37:13,850 --> 00:37:19,929
thank you

00:37:14,660 --> 00:37:19,929

YouTube URL: https://www.youtube.com/watch?v=amkzAcsdCf0


