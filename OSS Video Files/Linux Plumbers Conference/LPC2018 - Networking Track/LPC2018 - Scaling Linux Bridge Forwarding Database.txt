Title: LPC2018 - Scaling Linux Bridge Forwarding Database
Publication date: 2018-12-04
Playlist: LPC2018 - Networking Track
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/96/
speaker:  Roopa Prabhu (Cumulus Networks), Nikolay Aleksandrov (Cumulus Networks)


Linux bridge is deployed on Hosts, Hypervisors, Container OS's and in most recent years on data center switches. It is complete in its feature set with forwarding, learning, proxy and snooping functions. It can bridge Layer-2 domains between VM's, Containers, Racks, POD's and between data centers as seen with Ethernet-Virtual Private networks [1, 2]. With Linux bridge deployments moving up the rack, it is now bridging Larger Layer-2 domains bringing in scale challenges. The bridge forwarding database can scale to thousands of entries on a data center switch with hardware acceleration support.

In this paper we discuss performance and operational challenges with large scale bridge fdb database and solutions to address them. We will discuss solutions like fdb dst port failover for faster convergence, faster API for fdb updates from control plane and reducing number of fdb dst ports with Light weight tunnel endpoints for bridging over a tunneling solution (eg vxlan).

Most solutions though discussed around the below deployment scenarios are generic and can be applied to all bridge use-cases:

Multi-chassis link aggregation scenarios where Linux bridge is part of the active-active switch redundancy solution
Ethernet VPN solutions where Linux bridge forwarding database is extended to reach Layer-2 domains over a network overlay like VxLAN
[1] https://tools.ietf.org/html/draft-ietf-bess-evpn-overlay-11
[2] https://www.netdevconf.org/2.2/slides/prabhu-linuxbridge-tutorial.pdf
Captions: 
	00:00:05,700 --> 00:00:10,090
hello everyone my name is Roopa and

00:00:08,350 --> 00:00:12,730
Nicola is somewhere in the crowd and we

00:00:10,090 --> 00:00:14,620
both together we work on the Linux

00:00:12,730 --> 00:00:17,650
bridge at cumulus networks

00:00:14,620 --> 00:00:21,640
I am completely aware that I am standing

00:00:17,650 --> 00:00:24,220
in between you and lunch so I yeah but I

00:00:21,640 --> 00:00:30,070
tend to speak fast and faster that DVD

00:00:24,220 --> 00:00:31,779
hand so I will yeah so I do want to set

00:00:30,070 --> 00:00:35,470
some context and this because I might

00:00:31,779 --> 00:00:38,860
lose the lose attention so we work it at

00:00:35,470 --> 00:00:40,360
cumulus we build a Linux distribution on

00:00:38,860 --> 00:00:42,880
the switch so whatever I'm going to talk

00:00:40,360 --> 00:00:46,780
about runs on the switch and not on the

00:00:42,880 --> 00:00:49,750
host so that's a difference and this is

00:00:46,780 --> 00:00:52,860
a scale of problems that we face which

00:00:49,750 --> 00:00:56,410
unfortunately cannot be solved by BPF or

00:00:52,860 --> 00:00:58,780
EBP err it's some operational challenges

00:00:56,410 --> 00:01:01,300
and as you can imagine on a switch

00:00:58,780 --> 00:01:03,399
you're running a lot of protocols a

00:01:01,300 --> 00:01:06,910
switch this is a hardware accelerated

00:01:03,399 --> 00:01:08,740
switch so we get the line rate routing

00:01:06,910 --> 00:01:11,500
and line eight line rate forwarding in

00:01:08,740 --> 00:01:14,350
hardware but there is a ton of protocols

00:01:11,500 --> 00:01:17,740
that run on the system itself on the

00:01:14,350 --> 00:01:21,849
switch itself to make sure every bridge

00:01:17,740 --> 00:01:23,920
entry or every routing entry is there at

00:01:21,849 --> 00:01:26,110
the right time so that there is no loss

00:01:23,920 --> 00:01:29,129
in network

00:01:26,110 --> 00:01:29,129
[Music]

00:01:56,490 --> 00:02:02,350
- forwarding entry

00:01:58,600 --> 00:02:04,330
it's a Mac and Mac and VLAN in most

00:02:02,350 --> 00:02:06,100
cases and it points to a desk port it

00:02:04,330 --> 00:02:08,710
resolves to a desperate similar to a

00:02:06,100 --> 00:02:12,430
lookup bridge we'll do look up a Mac

00:02:08,710 --> 00:02:15,430
before it forwards frame and then in the

00:02:12,430 --> 00:02:18,190
bridging case the what you do what you

00:02:15,430 --> 00:02:20,680
want to avoid is flooding so it's very

00:02:18,190 --> 00:02:24,460
critical that every Mac gets into the

00:02:20,680 --> 00:02:26,620
bridge at the right time and the bridge

00:02:24,460 --> 00:02:28,480
when you extend it with network

00:02:26,620 --> 00:02:31,480
virtualization like something like VX

00:02:28,480 --> 00:02:34,240
LAN you can bridge larger domains and

00:02:31,480 --> 00:02:36,300
there are a ton of RFC's these days and

00:02:34,240 --> 00:02:39,400
people use them in data centers to

00:02:36,300 --> 00:02:41,739
bridge layer two domains across racks

00:02:39,400 --> 00:02:46,900
and sometimes across data centers as

00:02:41,739 --> 00:02:49,000
well so in the other picture zooms in

00:02:46,900 --> 00:02:51,250
actually this is that these are two

00:02:49,000 --> 00:02:57,520
switches connected by an bx land overlay

00:02:51,250 --> 00:03:00,989
and VX LAN is a bridge port and VX lan

00:02:57,520 --> 00:03:03,730
actually connects to the other switch

00:03:00,989 --> 00:03:06,370
FDB entries on the other switch via the

00:03:03,730 --> 00:03:12,610
overlay so l3 is involved but l3 is

00:03:06,370 --> 00:03:15,340
involved over the VX LAN so where does

00:03:12,610 --> 00:03:17,440
this kale come from on the bridge it's

00:03:15,340 --> 00:03:20,350
like I said it's larger layer two

00:03:17,440 --> 00:03:21,730
domains you're bridging there is a

00:03:20,350 --> 00:03:24,220
picture here so these are racks

00:03:21,730 --> 00:03:26,440
connected the green ones are switches

00:03:24,220 --> 00:03:29,470
basically you collect connecting many

00:03:26,440 --> 00:03:31,390
hosts in multiple racks and these racks

00:03:29,470 --> 00:03:33,250
are in pods and then you use spine

00:03:31,390 --> 00:03:36,190
switches to actually connect all of them

00:03:33,250 --> 00:03:40,720
together and this can span data centers

00:03:36,190 --> 00:03:42,070
as well so bridging on the switch is

00:03:40,720 --> 00:03:45,670
accelerated by hardware and hardware

00:03:42,070 --> 00:03:47,850
learns at line rate and

00:03:45,670 --> 00:03:52,720
so the hardware actually support 100k

00:03:47,850 --> 00:03:55,420
entries 100k or more but obviously in

00:03:52,720 --> 00:03:57,459
software we can bridge FDB Linux bridge

00:03:55,420 --> 00:04:00,040
FDB actually can handle millions of

00:03:57,459 --> 00:04:01,840
entries but on this on these switches

00:04:00,040 --> 00:04:05,380
the hardware is capable of that much and

00:04:01,840 --> 00:04:07,810
the CPU is low-end CPU it has to just

00:04:05,380 --> 00:04:10,870
learn and populate carry these FDB

00:04:07,810 --> 00:04:13,330
entries in the database so flooding

00:04:10,870 --> 00:04:14,980
flooding is also in Hardware flooding

00:04:13,330 --> 00:04:16,299
occurs in Hardware and sometimes if

00:04:14,980 --> 00:04:19,120
Hardware cannot handle the packet it's

00:04:16,299 --> 00:04:21,250
going to punt it to CPU and CPU needs to

00:04:19,120 --> 00:04:24,550
handle flooding as well so the goal is

00:04:21,250 --> 00:04:26,350
to reduce flooding there are other other

00:04:24,550 --> 00:04:28,300
things that the bridge does igmp

00:04:26,350 --> 00:04:30,760
snooping and optimize multicast

00:04:28,300 --> 00:04:33,370
forwarding all these learning techniques

00:04:30,760 --> 00:04:36,400
to actually stop flooding of multicast

00:04:33,370 --> 00:04:40,810
and broadcast traffic across the across

00:04:36,400 --> 00:04:42,880
the datacenter multihoming I did

00:04:40,810 --> 00:04:44,950
describe in my abstract as well that

00:04:42,880 --> 00:04:47,470
multi-homing is something that I'm going

00:04:44,950 --> 00:04:50,350
to focus on because something that every

00:04:47,470 --> 00:04:54,070
bridge problem needs a separate solution

00:04:50,350 --> 00:04:56,590
for so the parameters here are learning

00:04:54,070 --> 00:05:00,460
bridge learning at scale how fast you

00:04:56,590 --> 00:05:02,140
learn max and if you think about it

00:05:00,460 --> 00:05:03,640
these max and nothing but your hosts and

00:05:02,140 --> 00:05:06,610
VMs and containers that are coming and

00:05:03,640 --> 00:05:10,210
going adding and deleting and updating

00:05:06,610 --> 00:05:12,540
FDB entries reducing flooding even

00:05:10,210 --> 00:05:14,800
multicast we're using multicast flooding

00:05:12,540 --> 00:05:17,710
network converged convergence on link

00:05:14,800 --> 00:05:19,990
failures how fast can you if a rack goes

00:05:17,710 --> 00:05:23,220
goes down how fast you can move the max

00:05:19,990 --> 00:05:27,340
of that rack or servers to another

00:05:23,220 --> 00:05:30,940
bridge domain and Mac moves Mac moves is

00:05:27,340 --> 00:05:33,280
another very weird and critical piece

00:05:30,940 --> 00:05:36,910
where your VM moves from one rack to the

00:05:33,280 --> 00:05:38,800
other or one part to the other and these

00:05:36,910 --> 00:05:41,140
data center switches they have longer

00:05:38,800 --> 00:05:44,620
timers for fdbs and nae entries to

00:05:41,140 --> 00:05:47,169
timeout and you don't want you don't

00:05:44,620 --> 00:05:49,419
want that longer period of black holing

00:05:47,169 --> 00:05:51,550
so what you do is control in comes in

00:05:49,419 --> 00:05:54,460
and it has to proactively remove or

00:05:51,550 --> 00:05:58,060
clean up these entries so let's talk

00:05:54,460 --> 00:05:59,090
about multi-homing for a bit so if I

00:05:58,060 --> 00:06:01,970
have a picture

00:05:59,090 --> 00:06:04,370
but multi-homing from the side you

00:06:01,970 --> 00:06:06,230
know that there is you born nyx and you

00:06:04,370 --> 00:06:08,270
connect to two switches that's how it's

00:06:06,230 --> 00:06:10,520
usually deployed but there is a critical

00:06:08,270 --> 00:06:13,160
piece of software that runs on switches

00:06:10,520 --> 00:06:15,200
let's just call these as cluster of

00:06:13,160 --> 00:06:17,570
switches running Linux they maintain

00:06:15,200 --> 00:06:20,139
distributed network States about all the

00:06:17,570 --> 00:06:24,980
hosts they are providing multihoming

00:06:20,139 --> 00:06:26,720
parts to so what it means is if your one

00:06:24,980 --> 00:06:29,870
link to one switch goes down the other

00:06:26,720 --> 00:06:31,639
switch needs to trance move all the

00:06:29,870 --> 00:06:36,020
traffic or redirect all the traffic to

00:06:31,639 --> 00:06:37,910
the other switch and that's the that's

00:06:36,020 --> 00:06:39,110
the solution that these multihoming

00:06:37,910 --> 00:06:41,210
switch multi-homing

00:06:39,110 --> 00:06:45,229
software provides and it's usually a

00:06:41,210 --> 00:06:48,020
proprietary protocol if cisco juniper

00:06:45,229 --> 00:06:49,940
all these companies they have their own

00:06:48,020 --> 00:06:51,470
implementation of this protocol I'll

00:06:49,940 --> 00:06:53,510
talk later in the slides that this is

00:06:51,470 --> 00:07:00,020
being standardized right now with BGP

00:06:53,510 --> 00:07:02,150
and evpn so again common functions

00:07:00,020 --> 00:07:05,300
redundant paths to multihomed end points

00:07:02,150 --> 00:07:07,010
faster Network convergence and you

00:07:05,300 --> 00:07:09,740
maintain these switches maintained

00:07:07,010 --> 00:07:11,750
distributed state actually the sync

00:07:09,740 --> 00:07:13,729
state between they keep mirrors of the

00:07:11,750 --> 00:07:16,010
same database so that if one switch goes

00:07:13,729 --> 00:07:21,770
down or one link goes down your host

00:07:16,010 --> 00:07:23,240
still has connectivity so now this is

00:07:21,770 --> 00:07:23,870
just a picture showing you the same

00:07:23,240 --> 00:07:26,030
thing

00:07:23,870 --> 00:07:28,610
this is a typical setup you have a peer

00:07:26,030 --> 00:07:31,789
link it's again a bond or a single port

00:07:28,610 --> 00:07:34,850
connected between the switches hosts are

00:07:31,789 --> 00:07:37,789
connected to both switches and typically

00:07:34,850 --> 00:07:40,240
like I said these are non-standard

00:07:37,789 --> 00:07:44,150
multihoming control plane protocols that

00:07:40,240 --> 00:07:47,930
all these the industry has been seeing

00:07:44,150 --> 00:07:51,530
for decades actually now sue ming into

00:07:47,930 --> 00:07:53,840
this a little bit you have a bridge the

00:07:51,530 --> 00:07:55,580
peer link that is connects the switches

00:07:53,840 --> 00:07:58,580
is also part of the bridge it's the same

00:07:55,580 --> 00:08:01,130
domain so your ftp entries that you

00:07:58,580 --> 00:08:03,889
learn ftp entries a bridge forwarding

00:08:01,130 --> 00:08:06,320
entries which are nothing but host mac

00:08:03,889 --> 00:08:09,349
entries so you have them initially

00:08:06,320 --> 00:08:11,390
pointing to your host port but now say

00:08:09,349 --> 00:08:14,380
the host port or the link the

00:08:11,390 --> 00:08:17,360
zero to swp one on switch one goes down

00:08:14,380 --> 00:08:19,790
it has to something has to tell the

00:08:17,360 --> 00:08:22,250
switches that okay this link has gone

00:08:19,790 --> 00:08:24,560
down and now if any traffic to that Mac

00:08:22,250 --> 00:08:27,470
needs to travel why are the pier linked

00:08:24,560 --> 00:08:29,750
to the host and once the linker is

00:08:27,470 --> 00:08:34,100
restored you want to move that traffic

00:08:29,750 --> 00:08:35,210
back again so network convergence during

00:08:34,100 --> 00:08:37,520
failures

00:08:35,210 --> 00:08:39,290
so these multihoming protocols control

00:08:37,520 --> 00:08:42,850
plane actually programs these FTB's

00:08:39,290 --> 00:08:45,980
today we run linux on our switches and

00:08:42,850 --> 00:08:48,410
there is a control demon that has to

00:08:45,980 --> 00:08:50,680
remove all these FTP entries and replace

00:08:48,410 --> 00:08:53,150
them and again when the link comes back

00:08:50,680 --> 00:08:55,730
restore them so this results in too many

00:08:53,150 --> 00:08:57,410
FTP updates too many net link

00:08:55,730 --> 00:08:59,030
notifications and we have other

00:08:57,410 --> 00:09:02,120
protocols also listening to these

00:08:59,030 --> 00:09:04,760
notifications which effects convergence

00:09:02,120 --> 00:09:07,970
actually you will see all of these any

00:09:04,760 --> 00:09:11,930
networking event having all these demons

00:09:07,970 --> 00:09:15,110
actually running at high CPU trying to

00:09:11,930 --> 00:09:17,330
converge so how do you avoid this or how

00:09:15,110 --> 00:09:20,870
do you make it easier so some of the

00:09:17,330 --> 00:09:22,400
work we have done recently is to so if

00:09:20,870 --> 00:09:24,890
you think about it the spear link is a

00:09:22,400 --> 00:09:27,920
static configuration that is provisioned

00:09:24,890 --> 00:09:29,870
when you provision a switch so if

00:09:27,920 --> 00:09:33,980
something is static and you know that

00:09:29,870 --> 00:09:36,890
this is the backup port for any any link

00:09:33,980 --> 00:09:40,940
down events or any FTP that initial test

00:09:36,890 --> 00:09:43,370
port goes goes down so there is a patch

00:09:40,940 --> 00:09:44,990
that I point to here at the end in the

00:09:43,370 --> 00:09:47,570
references section basically it allows

00:09:44,990 --> 00:09:51,950
you to provide a backup port for a

00:09:47,570 --> 00:09:54,230
bridge port so and in a way this is this

00:09:51,950 --> 00:09:57,470
is done generically but in a way it is

00:09:54,230 --> 00:10:00,910
teaching the bridge driver to understand

00:09:57,470 --> 00:10:05,090
multihomed interfaces or multihomed

00:10:00,910 --> 00:10:06,920
endpoints and the bridge see before the

00:10:05,090 --> 00:10:08,690
bridge forwards that when it does a

00:10:06,920 --> 00:10:10,850
bridge lookup if it sees that the link

00:10:08,690 --> 00:10:13,340
is down on the desk port it's going to

00:10:10,850 --> 00:10:15,500
seamlessly find try to redirect the

00:10:13,340 --> 00:10:19,100
traffic through the pier link port so

00:10:15,500 --> 00:10:22,070
this is this has been a great it helps

00:10:19,100 --> 00:10:23,720
in convergence a lot future

00:10:22,070 --> 00:10:24,670
announcements so there is a request to

00:10:23,720 --> 00:10:26,740
actually

00:10:24,670 --> 00:10:28,660
carry some of this back up port is

00:10:26,740 --> 00:10:30,880
active indication in FTB dumps because

00:10:28,660 --> 00:10:32,710
people don't know but that the traffic

00:10:30,880 --> 00:10:36,250
is good going through the peer link

00:10:32,710 --> 00:10:40,690
that's something we do plan to provide a

00:10:36,250 --> 00:10:43,120
patch now network overlays so this is

00:10:40,690 --> 00:10:45,040
the next generation of multihoming what

00:10:43,120 --> 00:10:47,590
what I just talked about static peer

00:10:45,040 --> 00:10:49,420
link and all that was yesterday well we

00:10:47,590 --> 00:10:51,790
do still support and debug many issues

00:10:49,420 --> 00:10:54,070
related to that but next generation is

00:10:51,790 --> 00:10:56,880
network overlays what does this mean so

00:10:54,070 --> 00:11:01,720
if you see the picture the peer link is

00:10:56,880 --> 00:11:05,110
disappeared and what the backup link

00:11:01,720 --> 00:11:07,060
becomes the overlay well

00:11:05,110 --> 00:11:08,980
performance are there performance

00:11:07,060 --> 00:11:10,750
challenges with the overly being the

00:11:08,980 --> 00:11:13,420
backup link as yet to be determined

00:11:10,750 --> 00:11:15,340
because all the industry is coming up

00:11:13,420 --> 00:11:17,110
with solutions of multi domain with

00:11:15,340 --> 00:11:19,120
network overlays and we'll see and there

00:11:17,110 --> 00:11:22,630
is a lot of standards coming out also to

00:11:19,120 --> 00:11:27,280
improve convergence and to improve the

00:11:22,630 --> 00:11:29,440
protocols in this area so again this is

00:11:27,280 --> 00:11:32,560
a standards-based protocol there is an

00:11:29,440 --> 00:11:34,210
RFC it's BGP is used as a protocol so

00:11:32,560 --> 00:11:37,330
all proprietary control plane

00:11:34,210 --> 00:11:40,600
multihoming protocols go away its BGP

00:11:37,330 --> 00:11:42,430
and it has it can now exchange max as

00:11:40,600 --> 00:11:46,120
you know BGP is the protocol of the

00:11:42,430 --> 00:11:49,120
internet it is it does routes and now

00:11:46,120 --> 00:11:51,040
it's doing max as well and it listens to

00:11:49,120 --> 00:11:54,190
bridge FTP updates one of the

00:11:51,040 --> 00:11:58,120
implementations here is FRR the free

00:11:54,190 --> 00:12:00,460
range routing suite which has a VPN

00:11:58,120 --> 00:12:03,850
support listening to bridge events and

00:12:00,460 --> 00:12:10,030
so on and it is soon looking at actually

00:12:03,850 --> 00:12:12,310
multi-homing so what it means now is so

00:12:10,030 --> 00:12:15,610
going back to the VX lan FDB entry be

00:12:12,310 --> 00:12:18,100
excellent FTB entry is nothing but a mac

00:12:15,610 --> 00:12:24,370
pointing to a set of remote destinations

00:12:18,100 --> 00:12:26,320
or remote VX land endpoints so if you

00:12:24,370 --> 00:12:29,140
look at this picture or rather this

00:12:26,320 --> 00:12:32,890
picture so you have and also another

00:12:29,140 --> 00:12:36,460
point here is you in this the RFC says

00:12:32,890 --> 00:12:37,850
you can have multiple switches or an

00:12:36,460 --> 00:12:39,709
endpoint can be

00:12:37,850 --> 00:12:43,130
multi-home to multiple switches and not

00:12:39,709 --> 00:12:45,649
just two so this provides this brings in

00:12:43,130 --> 00:12:49,279
more interesting challenges now you can

00:12:45,649 --> 00:12:51,709
also do ecmp that you you can share the

00:12:49,279 --> 00:12:55,250
load multi-home load across because it's

00:12:51,709 --> 00:12:57,170
l3 underneath you can share the load

00:12:55,250 --> 00:13:00,050
between multiples multiple switches if

00:12:57,170 --> 00:13:04,220
it is just not active backup but you can

00:13:00,050 --> 00:13:06,680
also share load this is a zoomed in

00:13:04,220 --> 00:13:09,470
picture same thing hosts are now

00:13:06,680 --> 00:13:11,209
connected to two links or two switches

00:13:09,470 --> 00:13:14,720
or three switches any combination of

00:13:11,209 --> 00:13:17,630
switches so you have multiple paths and

00:13:14,720 --> 00:13:19,490
you can see BX LAN 0 the peer link is

00:13:17,630 --> 00:13:21,560
gone and be excellent 0 becomes takes

00:13:19,490 --> 00:13:24,139
place of the peer link and all your

00:13:21,560 --> 00:13:29,360
switch peer link traffic actually goes

00:13:24,139 --> 00:13:34,310
over the network so the RFC actually

00:13:29,360 --> 00:13:36,050
brings in a lot of talks a lot about few

00:13:34,310 --> 00:13:38,690
technologies that you can deploy in the

00:13:36,050 --> 00:13:40,550
control plane so I am NOT going to go

00:13:38,690 --> 00:13:42,829
into the details but they are here just

00:13:40,550 --> 00:13:47,509
for reference it's also mentioned a

00:13:42,829 --> 00:13:48,889
little bit in detail in the paper so

00:13:47,509 --> 00:13:52,610
these are control plane

00:13:48,889 --> 00:13:54,319
ways to deal with how do you not loop a

00:13:52,610 --> 00:13:56,720
packet or how do you avoid duplicate

00:13:54,319 --> 00:13:58,399
packets between these switches now you

00:13:56,720 --> 00:14:01,790
can see there are three switches that

00:13:58,399 --> 00:14:04,189
are forwarding traffic right and you

00:14:01,790 --> 00:14:05,569
don't want you want one of them to be

00:14:04,189 --> 00:14:09,889
the designated forwarder for a

00:14:05,569 --> 00:14:12,860
particular ESI it's called an ESI or a

00:14:09,889 --> 00:14:18,050
multihomed endpoint like a bond ID for

00:14:12,860 --> 00:14:20,120
each bond or each endpoint now to allow

00:14:18,050 --> 00:14:25,069
for or to help the control claim

00:14:20,120 --> 00:14:27,800
convergence a challenges or solutions to

00:14:25,069 --> 00:14:29,810
implement those solutions one thing is

00:14:27,800 --> 00:14:30,230
the backup port again comes to the

00:14:29,810 --> 00:14:32,089
rescue

00:14:30,230 --> 00:14:35,420
instead of the backup port being the

00:14:32,089 --> 00:14:38,240
peer link it is now dbx lan port it goes

00:14:35,420 --> 00:14:41,930
over the overlay that fits in easily

00:14:38,240 --> 00:14:46,579
here that and then there is another

00:14:41,930 --> 00:14:48,319
requirement mac desk groups VX LAN FD b

00:14:46,579 --> 00:14:50,000
or ma countries are nothing but max

00:14:48,319 --> 00:14:53,150
pointing to

00:14:50,000 --> 00:14:57,170
Mort vx land tunnels in this picture

00:14:53,150 --> 00:14:59,510
what it means that is a Mac on switch

00:14:57,170 --> 00:15:02,030
one can point to switch two and switch

00:14:59,510 --> 00:15:07,070
three and switch two and switch three

00:15:02,030 --> 00:15:10,160
are redundant paths to say host one all

00:15:07,070 --> 00:15:12,740
three are redundant paths now if switch

00:15:10,160 --> 00:15:15,500
one is the designated forwarder he needs

00:15:12,740 --> 00:15:17,420
to forward traffic to switch two and

00:15:15,500 --> 00:15:21,110
switch three and it he can also load

00:15:17,420 --> 00:15:24,530
balancer traffic so for this we think

00:15:21,110 --> 00:15:27,650
that treating these Mac and trees or FTP

00:15:24,530 --> 00:15:29,480
entries like routes will help and having

00:15:27,650 --> 00:15:31,850
the some of the recent work that

00:15:29,480 --> 00:15:34,610
davidyan has been doing in the route api

00:15:31,850 --> 00:15:38,780
the ability to update chess the desk

00:15:34,610 --> 00:15:41,710
groups or ecmp groups it's the same I

00:15:38,780 --> 00:15:45,290
put a reference to that it's the same

00:15:41,710 --> 00:15:49,370
same problem or a same solution to the

00:15:45,290 --> 00:15:51,650
problem basically you allow the desk

00:15:49,370 --> 00:15:54,230
groups or a remote remote endpoints to

00:15:51,650 --> 00:15:56,360
be in an updated independent of the Macs

00:15:54,230 --> 00:16:00,080
that will allow control Klain to

00:15:56,360 --> 00:16:02,720
actually update only a few groups and

00:16:00,080 --> 00:16:06,410
not have to deal with hundreds and

00:16:02,720 --> 00:16:07,760
thousands of Mac's so a picture

00:16:06,410 --> 00:16:09,680
describing this

00:16:07,760 --> 00:16:12,260
vx line if anybody has played with VX

00:16:09,680 --> 00:16:15,770
land FDB entries it is nothing but a Mac

00:16:12,260 --> 00:16:18,290
vni and it has a list of remote

00:16:15,770 --> 00:16:19,700
endpoints that you can the default

00:16:18,290 --> 00:16:22,610
behavior is to actually replicate a

00:16:19,700 --> 00:16:25,880
packet and to all these endpoints and

00:16:22,610 --> 00:16:28,460
now this is mostly used today in case of

00:16:25,880 --> 00:16:30,500
broadcast flooding that is when you know

00:16:28,460 --> 00:16:34,460
a Mac does not belong on a particular

00:16:30,500 --> 00:16:36,050
Vita you it hits a default entry in the

00:16:34,460 --> 00:16:38,540
FTP database and it's going to replicate

00:16:36,050 --> 00:16:42,610
to all endpoints basically that's

00:16:38,540 --> 00:16:46,610
broadcasting to over the VX LAN fabric

00:16:42,610 --> 00:16:49,220
the proposal here is changes to the FTP

00:16:46,610 --> 00:16:52,310
API obviously not changing the existing

00:16:49,220 --> 00:16:54,170
a peer the existing API will remain it's

00:16:52,310 --> 00:16:57,170
similar to the route API changes that

00:16:54,170 --> 00:17:00,350
davidyan has been talking basically your

00:16:57,170 --> 00:17:02,769
FTP entry points to a test group ID and

00:17:00,350 --> 00:17:06,299
the dest you maintain a separate test

00:17:02,769 --> 00:17:11,589
database which control claim can update

00:17:06,299 --> 00:17:15,610
at a faster rate there are some details

00:17:11,589 --> 00:17:18,370
about net link attribute and yeah how

00:17:15,610 --> 00:17:21,069
this desk group looks but it's similar

00:17:18,370 --> 00:17:24,370
to how routes ecmp group is nothing but

00:17:21,069 --> 00:17:26,500
a set of next hops and devices in this

00:17:24,370 --> 00:17:27,880
case you map that exactly to VX land

00:17:26,500 --> 00:17:35,860
endpoints it is nothing but an IP

00:17:27,880 --> 00:17:38,080
address and B and I yeah and I'm still

00:17:35,860 --> 00:17:40,990
trying to convince myself if I can use

00:17:38,080 --> 00:17:43,390
and convince David here maybe can we can

00:17:40,990 --> 00:17:46,510
if we can use the next hop API for this

00:17:43,390 --> 00:17:48,460
so that we don't have to add more net

00:17:46,510 --> 00:17:50,710
link attributes yeah

00:17:48,460 --> 00:17:56,500
I just wanted to thank a few more people

00:17:50,710 --> 00:17:58,570
who I work with and who are involved in

00:17:56,500 --> 00:18:02,230
developing the control plane multihoming

00:17:58,570 --> 00:18:04,450
solutions are not an easy easy piece of

00:18:02,230 --> 00:18:06,909
software it's yeah it's the hair-pulling

00:18:04,450 --> 00:18:10,179
exercise trying to develop this I just

00:18:06,909 --> 00:18:12,370
wanted to thank a few more people and I

00:18:10,179 --> 00:18:14,940
have a few references here about on the

00:18:12,370 --> 00:18:17,320
RFC's where all this is mentioned and

00:18:14,940 --> 00:18:19,059
it's a good trend though everybody is

00:18:17,320 --> 00:18:23,110
picking up multihoming solutions have

00:18:19,059 --> 00:18:25,870
never been an open implementation so

00:18:23,110 --> 00:18:27,460
it's nice to see a linux it will be nice

00:18:25,870 --> 00:18:29,340
to it's still in the works but it'll be

00:18:27,460 --> 00:18:32,770
nice to see a Linux implementation of

00:18:29,340 --> 00:18:43,720
EBP and based BGP based multi learning

00:18:32,770 --> 00:18:47,429
solution that's all I had anyone have

00:18:43,720 --> 00:18:47,429
any questions about the bridging stuff

00:18:50,179 --> 00:18:56,100
hi sorry if I've missed something but I

00:18:54,690 --> 00:18:58,230
just wanted to understand like how do

00:18:56,100 --> 00:19:00,600
you avoid loops because you can have a

00:18:58,230 --> 00:19:04,799
redundant paths like the diagram which

00:19:00,600 --> 00:19:05,970
he showed right so if the forwarding has

00:19:04,799 --> 00:19:07,379
to happen between the source and the

00:19:05,970 --> 00:19:09,419
destination then basically you can have

00:19:07,379 --> 00:19:11,429
say in a simple diagram which you showed

00:19:09,419 --> 00:19:12,509
it could have three paths from a single

00:19:11,429 --> 00:19:14,429
switch right

00:19:12,509 --> 00:19:16,830
so in that case generally like the

00:19:14,429 --> 00:19:18,749
companies like Juniper or Cisco have got

00:19:16,830 --> 00:19:20,489
their own proprietary algorithms which

00:19:18,749 --> 00:19:24,600
run at the control plane and generally

00:19:20,489 --> 00:19:27,149
uses I said is is kind of protocols to

00:19:24,600 --> 00:19:29,009
basically avoid loops so we cannot have

00:19:27,149 --> 00:19:31,830
a STP running in a data center right so

00:19:29,009 --> 00:19:33,929
how exactly the protocol over here is

00:19:31,830 --> 00:19:40,559
basically avoiding that so the control

00:19:33,929 --> 00:19:43,019
plane has has guard guards against this

00:19:40,559 --> 00:19:45,359
right for example it so the control

00:19:43,019 --> 00:19:47,220
plane on every switch knows which port

00:19:45,359 --> 00:19:49,710
is multihomed and that's where the

00:19:47,220 --> 00:19:51,749
designated forwarder comes in where it

00:19:49,710 --> 00:19:54,330
knows that if it's getting it on a

00:19:51,749 --> 00:19:57,090
singly connected endpoint then it's

00:19:54,330 --> 00:20:01,230
going to forward if it knows that it is

00:19:57,090 --> 00:20:02,789
not it also maintains a list of which no

00:20:01,230 --> 00:20:05,700
this is again the distributed state that

00:20:02,789 --> 00:20:07,289
they exchange which switch it's

00:20:05,700 --> 00:20:12,690
connected to so it's only going forward

00:20:07,289 --> 00:20:15,179
to a switch that is not part of that so

00:20:12,690 --> 00:20:18,419
it's the protocol which is basically

00:20:15,179 --> 00:20:20,009
distributed and it's the information is

00:20:18,419 --> 00:20:21,539
about the max and the destination is

00:20:20,009 --> 00:20:23,340
getting exchanged using that basically

00:20:21,539 --> 00:20:25,259
and that's making sure that there's a

00:20:23,340 --> 00:20:28,070
single tree topology kind of thing which

00:20:25,259 --> 00:20:31,049
is maintained right yes okay sure yeah

00:20:28,070 --> 00:20:32,789
so they they keep state which if the

00:20:31,049 --> 00:20:34,919
endpoint is duly connected or multiple

00:20:32,789 --> 00:20:39,289
connected or single connected so there

00:20:34,919 --> 00:20:39,289
is a lot of state that is maintained

00:20:45,290 --> 00:20:55,380
yes so the beach here can you have the

00:20:52,170 --> 00:20:56,910
beats it will so when we evolved this

00:20:55,380 --> 00:20:59,280
API it's going to be exactly similar to

00:20:56,910 --> 00:21:02,700
routes you can have an equal cost or

00:20:59,280 --> 00:21:11,850
awaited oh sure thanks

00:21:02,700 --> 00:21:14,580
yeah anyone else know that you are

00:21:11,850 --> 00:21:17,820
falling back to attano how do you handle

00:21:14,580 --> 00:21:20,850
em do because the switch part probably

00:21:17,820 --> 00:21:25,200
has one and you like 1500 and you

00:21:20,850 --> 00:21:27,570
overlay will consume some of it yes and

00:21:25,200 --> 00:21:29,850
actually enthuse in the data center it's

00:21:27,570 --> 00:21:31,590
all handled via config so you make sure

00:21:29,850 --> 00:21:33,870
that it is configured properly for

00:21:31,590 --> 00:21:36,270
example then we are running VX LAN r VX

00:21:33,870 --> 00:21:39,990
landon points have 9,000 MTU set and

00:21:36,270 --> 00:21:41,670
then the interfaces itself 1500 or it

00:21:39,990 --> 00:21:44,760
can go and the vehicle and driver also

00:21:41,670 --> 00:21:47,580
adjust the MT right it's has a 50 byte

00:21:44,760 --> 00:21:52,460
buffer when you're setting em to you on

00:21:47,580 --> 00:21:52,460
the V explan it accounts for that so

00:21:59,790 --> 00:22:07,120
okay so if I correctly propose to to

00:22:04,770 --> 00:22:09,880
palliate be excellent for putting the

00:22:07,120 --> 00:22:12,130
device into two tables so we get an

00:22:09,880 --> 00:22:14,679
under look up into table in the

00:22:12,130 --> 00:22:17,820
excellent fast path I mean the excellent

00:22:14,679 --> 00:22:21,070
is not exactly the fastest protocol ever

00:22:17,820 --> 00:22:24,220
but still this will slow it down even

00:22:21,070 --> 00:22:26,740
more right yeah the thing is the packet

00:22:24,220 --> 00:22:29,260
lookups does not affect me because I am

00:22:26,740 --> 00:22:30,550
on the switch and it's all once you

00:22:29,260 --> 00:22:33,220
program it into hardware it's all

00:22:30,550 --> 00:22:34,510
hardware actually written but it's a

00:22:33,220 --> 00:22:35,980
good question I mean there are two

00:22:34,510 --> 00:22:37,840
lookups in the bridge and you're talking

00:22:35,980 --> 00:22:41,200
about the VX line lookup as well right

00:22:37,840 --> 00:22:43,240
yeah so yeah but similar to how Davis

00:22:41,200 --> 00:22:45,809
did the routes yeah exactly in trees so

00:22:43,240 --> 00:22:48,100
I think it's not an intractable problem

00:22:45,809 --> 00:22:49,390
from the beginning so it's definitely

00:22:48,100 --> 00:22:53,320
something to look into for the software

00:22:49,390 --> 00:22:54,460
path yeah hey thank you very much root

00:22:53,320 --> 00:23:00,039
button thank you

00:22:54,460 --> 00:23:00,039

YouTube URL: https://www.youtube.com/watch?v=MOCdcFTYoB4


