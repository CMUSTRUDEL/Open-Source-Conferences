Title: LPC 2020 - RISC-V MC
Publication date: 2020-08-28
Playlist: LPC2020 - Live Streams
Description: 
	Linux Plumbers Conference 2020
Captions: 
	00:00:00,000 --> 00:00:05,600
i wanted to turn the lights on but it's

00:00:02,800 --> 00:00:05,600
a lost cost

00:00:06,160 --> 00:00:10,400
i have one light over here but i don't

00:00:08,960 --> 00:00:12,960
want to shine into my face it's kind of

00:00:10,400 --> 00:00:12,960
obnoxious

00:00:13,759 --> 00:00:20,320
that's really bright anyway um

00:00:16,960 --> 00:00:22,560
i guess we can get going

00:00:20,320 --> 00:00:23,359
yeah unfortunately with all the smoke i

00:00:22,560 --> 00:00:26,400
don't know

00:00:23,359 --> 00:00:29,760
what we're gonna see with the sun but

00:00:26,400 --> 00:00:31,920
it's okay i think it's enough

00:00:29,760 --> 00:00:33,840
the recommendation is to turn off the

00:00:31,920 --> 00:00:36,079
camera when you are not speaking so

00:00:33,840 --> 00:00:37,600
yeah yeah yeah so it'll only just a

00:00:36,079 --> 00:00:40,800
couple of minutes

00:00:37,600 --> 00:00:42,840
i get the mic to work well you have

00:00:40,800 --> 00:00:44,160
like i don't know three hours or

00:00:42,840 --> 00:00:47,280
something

00:00:44,160 --> 00:00:50,879
uh yeah four hours

00:00:47,280 --> 00:00:51,600
i was talking to alistair oh alistair if

00:00:50,879 --> 00:00:54,640
you can't

00:00:51,600 --> 00:00:55,680
figure out your mic oh i don't know it's

00:00:54,640 --> 00:00:59,359
too early to

00:00:55,680 --> 00:01:01,600
do computer stuff anyway so

00:00:59,359 --> 00:01:03,840
um this is the risk five micro

00:01:01,600 --> 00:01:05,360
conference um

00:01:03,840 --> 00:01:07,360
i think it's time yeah it's time to

00:01:05,360 --> 00:01:09,439
start the introduction um

00:01:07,360 --> 00:01:10,479
so yeah prescribed microconference it's

00:01:09,439 --> 00:01:12,000
kind of regular

00:01:10,479 --> 00:01:14,479
plumber's micro conference stuff we're

00:01:12,000 --> 00:01:14,479
here to

00:01:15,040 --> 00:01:21,520
talk about stuff uh so got a bunch of

00:01:18,080 --> 00:01:22,159
discussion leaders and uh we'll try to

00:01:21,520 --> 00:01:23,759
have

00:01:22,159 --> 00:01:25,280
uh you know like a teacher saying

00:01:23,759 --> 00:01:26,799
earlier video on

00:01:25,280 --> 00:01:30,640
only when you're talking in order to

00:01:26,799 --> 00:01:30,640
prevent bogging everything down

00:01:30,960 --> 00:01:36,400
that's really uh the extent of it

00:01:34,799 --> 00:01:38,079
i didn't have anything particular plan

00:01:36,400 --> 00:01:39,119
for the introduction just kind of

00:01:38,079 --> 00:01:41,840
getting everything

00:01:39,119 --> 00:01:41,840
going

00:01:43,040 --> 00:01:46,560
so i don't know if anyone has anything

00:01:48,320 --> 00:01:51,680
if not we can hang out for a couple

00:01:49,759 --> 00:01:53,520
minutes and

00:01:51,680 --> 00:01:56,240
let al figure out how to get the

00:01:53,520 --> 00:01:58,640
presenter mode going

00:01:56,240 --> 00:02:00,000
oh yeah i'd recommend testing all of the

00:01:58,640 --> 00:02:02,960
presenter stuff

00:02:00,000 --> 00:02:05,680
during like the break before your talk

00:02:02,960 --> 00:02:07,520
or something like that

00:02:05,680 --> 00:02:10,399
it works but i couldn't figure it out

00:02:07,520 --> 00:02:10,399
the first time so

00:02:13,120 --> 00:02:15,680
i said i am sitting here in the dark

00:02:14,400 --> 00:02:16,480
because i also can't figure out how to

00:02:15,680 --> 00:02:19,680
turn up my lights

00:02:16,480 --> 00:02:23,840
so you know i guess maybe not the best

00:02:19,680 --> 00:02:23,840
example of what to do

00:02:33,200 --> 00:02:38,000
yeah okay yeah think like

00:02:36,480 --> 00:02:39,519
some people seem to be able to take

00:02:38,000 --> 00:02:40,800
percentage mode i don't know who's

00:02:39,519 --> 00:02:42,879
capable of doing it

00:02:40,800 --> 00:02:46,239
i think it should be you and me anybody

00:02:42,879 --> 00:02:47,920
who is the moderator of the mc so

00:02:46,239 --> 00:02:50,400
oh no everybody should take the should

00:02:47,920 --> 00:02:53,120
be able to take the presenter more yeah

00:02:50,400 --> 00:02:54,239
oh i don't know so i think by we found

00:02:53,120 --> 00:02:55,760
out during the android one that

00:02:54,239 --> 00:02:56,959
everybody has a lot of permissions and

00:02:55,760 --> 00:02:58,959
if you click the wrong button

00:02:56,959 --> 00:03:00,159
it will break stuff for other people so

00:02:58,959 --> 00:03:04,720
don't

00:03:00,159 --> 00:03:08,879
don't click the wrong button

00:03:04,720 --> 00:03:11,840
i think for us never uh click the

00:03:08,879 --> 00:03:12,959
no yeah don't don't click the like end

00:03:11,840 --> 00:03:15,830
meeting button because i don't want

00:03:12,959 --> 00:03:20,500
anybody yeah yeah

00:03:15,830 --> 00:03:20,500
[Laughter]

00:03:27,840 --> 00:03:30,720
oh thank you sir

00:03:30,959 --> 00:03:35,280
okay so that's not the right slides for

00:03:33,040 --> 00:03:35,280
me

00:03:36,640 --> 00:03:40,799
yeah that's that lego set which was just

00:03:38,640 --> 00:03:42,480
way too much fun

00:03:40,799 --> 00:03:44,239
oh sorry i tried to grab whatever you

00:03:42,480 --> 00:03:47,440
had uploaded to the web

00:03:44,239 --> 00:03:51,040
oh no worries

00:03:47,440 --> 00:03:54,239
um should i

00:03:51,040 --> 00:03:56,959
switch the slates yeah because it looks

00:03:54,239 --> 00:03:58,640
i mean i can see uh palmer's um schedule

00:03:56,959 --> 00:04:01,040
slides but i don't i don't see mine okay

00:03:58,640 --> 00:04:01,040
let me

00:04:02,959 --> 00:04:06,319
yeah they're sorry they're all uploaded

00:04:05,040 --> 00:04:06,959
i guess maybe we should switch the

00:04:06,319 --> 00:04:10,080
slides

00:04:06,959 --> 00:04:11,200
between uh presenters because it's yeah

00:04:10,080 --> 00:04:13,200
that's better

00:04:11,200 --> 00:04:15,200
yeah okay let's do it that way and i

00:04:13,200 --> 00:04:16,799
just marked them downloaded so it should

00:04:15,200 --> 00:04:19,280
be up

00:04:16,799 --> 00:04:20,000
i will transfer the presenter mode to

00:04:19,280 --> 00:04:21,280
you

00:04:20,000 --> 00:04:23,759
yeah so you should be able to go through

00:04:21,280 --> 00:04:28,320
the slides on your own now at the bottom

00:04:23,759 --> 00:04:31,199
okay okay are you able to control them

00:04:28,320 --> 00:04:31,199
oh look at that

00:04:31,680 --> 00:04:38,479
yeah awesome

00:04:35,919 --> 00:04:38,479
perfect

00:04:39,040 --> 00:04:45,919
thanks guys

00:04:42,720 --> 00:04:48,320
shall we officially wait one minute

00:04:45,919 --> 00:04:49,840
yeah i think with all the uh internet

00:04:48,320 --> 00:04:57,840
stuff it's best to just stick

00:04:49,840 --> 00:05:00,320
strictly to the schedule yeah

00:04:57,840 --> 00:05:01,280
yes so as it turns out a teach i have an

00:05:00,320 --> 00:05:04,800
uncle that was

00:05:01,280 --> 00:05:04,800
part of the apollo program so

00:05:05,680 --> 00:05:09,360
and i talk about these sorts of fun

00:05:07,280 --> 00:05:11,840
things all the time

00:05:09,360 --> 00:05:11,840
nice

00:05:12,720 --> 00:05:25,520
and i can't wait to go through his boxes

00:05:15,360 --> 00:05:28,560
of stuff in his garage

00:05:25,520 --> 00:05:30,800
well i have five after shall we go

00:05:28,560 --> 00:05:32,240
yeah i'll be showing these so just don't

00:05:30,800 --> 00:05:35,440
freak out if my face

00:05:32,240 --> 00:05:38,960
right obvious

00:05:35,440 --> 00:05:40,639
but yeah the time is up i love how

00:05:38,960 --> 00:05:42,080
high tech those are this is the cool

00:05:40,639 --> 00:05:45,919
thing

00:05:42,080 --> 00:05:50,960
yeah okay i think you're good to go

00:05:45,919 --> 00:05:53,520
right on time okay um

00:05:50,960 --> 00:05:55,280
well this will be interesting we'll see

00:05:53,520 --> 00:06:00,080
if i have enough coffee in me and

00:05:55,280 --> 00:06:00,080
those sorts of fun things so um

00:06:00,880 --> 00:06:06,560
so risk five is is an interesting

00:06:03,520 --> 00:06:06,560
platform obviously

00:06:06,639 --> 00:06:11,199
that we're all here that's that's kind

00:06:08,160 --> 00:06:13,360
of kind of makes it obvious

00:06:11,199 --> 00:06:14,960
but i think one of the things that um

00:06:13,360 --> 00:06:15,680
that i've been very interested in is how

00:06:14,960 --> 00:06:19,280
do we actually

00:06:15,680 --> 00:06:20,160
make this an interest move it from an

00:06:19,280 --> 00:06:22,560
interesting toy

00:06:20,160 --> 00:06:23,759
into something that quite literally

00:06:22,560 --> 00:06:25,520
could compete with

00:06:23,759 --> 00:06:28,639
the likes of intel in the data center

00:06:25,520 --> 00:06:31,759
for example um

00:06:28,639 --> 00:06:36,639
i th the idea of having more variety and

00:06:31,759 --> 00:06:36,639
more heterogeneity and in the

00:06:36,720 --> 00:06:43,039
instruction space or in the isa space

00:06:39,840 --> 00:06:45,440
is just i love that idea the

00:06:43,039 --> 00:06:48,400
the idea of everything being built on

00:06:45,440 --> 00:06:49,919
top of intel i think is just

00:06:48,400 --> 00:06:52,319
i don't i don't think it's i don't think

00:06:49,919 --> 00:06:56,000
it's healthy for the industry as a whole

00:06:52,319 --> 00:07:00,080
so when we look at risk five though um

00:06:56,000 --> 00:07:00,080
how do we get from what it is to

00:07:00,840 --> 00:07:06,800
something really really useful

00:07:03,280 --> 00:07:07,840
um and the isa is really just a small

00:07:06,800 --> 00:07:11,120
part of the project

00:07:07,840 --> 00:07:12,560
uh product there's all the other things

00:07:11,120 --> 00:07:15,520
that need to be

00:07:12,560 --> 00:07:16,479
defined on the soc how to talk to the

00:07:15,520 --> 00:07:18,080
soc

00:07:16,479 --> 00:07:19,520
you know what buses it connects to

00:07:18,080 --> 00:07:22,560
etcetera and

00:07:19,520 --> 00:07:23,919
so forth and there's just a large number

00:07:22,560 --> 00:07:27,680
of them

00:07:23,919 --> 00:07:29,360
so really in the long term what i would

00:07:27,680 --> 00:07:31,680
like to see with risk five

00:07:29,360 --> 00:07:32,560
is that it just becomes absolutely dead

00:07:31,680 --> 00:07:36,080
boring

00:07:32,560 --> 00:07:36,080
i can pick up an os out of the

00:07:36,160 --> 00:07:40,400
off the shelf i can install it and it's

00:07:38,720 --> 00:07:43,520
just like any other

00:07:40,400 --> 00:07:46,879
any other box okay um

00:07:43,520 --> 00:07:48,879
and what i think needs to happen

00:07:46,879 --> 00:07:51,199
uh is is to do that we need kind of need

00:07:48,879 --> 00:07:52,080
of a clear vision for what needs to be

00:07:51,199 --> 00:07:55,759
specified

00:07:52,080 --> 00:07:57,039
um we need a process for for making that

00:07:55,759 --> 00:07:58,639
specification

00:07:57,039 --> 00:08:00,879
and we need a clear and complete

00:07:58,639 --> 00:08:02,080
specification so if you're familiar with

00:08:00,879 --> 00:08:06,000
the arm space

00:08:02,080 --> 00:08:07,680
that's referred to as spsa and sbbr

00:08:06,000 --> 00:08:09,199
i think what we need is something very

00:08:07,680 --> 00:08:10,639
clearly like that

00:08:09,199 --> 00:08:12,479
i would even like to take that a step

00:08:10,639 --> 00:08:14,160
further though and say that's that's

00:08:12,479 --> 00:08:16,560
great for servers

00:08:14,160 --> 00:08:17,520
but i think um one of the things that we

00:08:16,560 --> 00:08:20,240
could do to

00:08:17,520 --> 00:08:23,120
to make right risk 5 more robust than

00:08:20,240 --> 00:08:23,120
the arm environment

00:08:23,199 --> 00:08:27,120
is to actually make those specifications

00:08:24,960 --> 00:08:27,919
useful across a broad range of use cases

00:08:27,120 --> 00:08:30,720
not just

00:08:27,919 --> 00:08:34,240
not just servers but possibly embedded

00:08:30,720 --> 00:08:36,479
systems iot whatever it might be

00:08:34,240 --> 00:08:38,959
so that's kind of where i'm going with

00:08:36,479 --> 00:08:38,959
all of this

00:08:39,519 --> 00:08:43,760
so here's just sort of the overall

00:08:41,120 --> 00:08:46,880
agenda um

00:08:43,760 --> 00:08:48,240
you know what am i talking about when i

00:08:46,880 --> 00:08:51,360
say division thing

00:08:48,240 --> 00:08:52,839
you know and what i think should

00:08:51,360 --> 00:08:54,240
actually be in some sort of

00:08:52,839 --> 00:08:57,040
specification

00:08:54,240 --> 00:08:59,040
how we can go about getting things done

00:08:57,040 --> 00:09:02,320
how do we fill in all of the blanks

00:08:59,040 --> 00:09:03,920
um so you know there's we do have a

00:09:02,320 --> 00:09:05,839
little bit of material for a platform

00:09:03,920 --> 00:09:08,240
specification

00:09:05,839 --> 00:09:09,600
but what do we what do we need to really

00:09:08,240 --> 00:09:11,200
fill that out

00:09:09,600 --> 00:09:13,360
and then i would like to invite folks in

00:09:11,200 --> 00:09:16,800
for even further discussion on

00:09:13,360 --> 00:09:18,399
on the content um and then what do we

00:09:16,800 --> 00:09:19,120
need to specify what do we need to leave

00:09:18,399 --> 00:09:20,839
alone

00:09:19,120 --> 00:09:22,640
where the boundaries for those sorts of

00:09:20,839 --> 00:09:26,800
things

00:09:22,640 --> 00:09:28,480
okay so um

00:09:26,800 --> 00:09:30,640
for those not familiar with american

00:09:28,480 --> 00:09:33,920
politics the vision thing is

00:09:30,640 --> 00:09:38,399
a phrase borrowed from george h.w

00:09:33,920 --> 00:09:39,920
bush and um he got roundly

00:09:38,399 --> 00:09:41,760
wrongly criticized for it because it

00:09:39,920 --> 00:09:44,320
sounded very vague and silly

00:09:41,760 --> 00:09:45,600
but in a way it it is um

00:09:44,320 --> 00:09:48,160
[Music]

00:09:45,600 --> 00:09:50,000
but it what i'm trying to say here is

00:09:48,160 --> 00:09:51,760
where are we going with all of this and

00:09:50,000 --> 00:09:52,959
what what would i like to see happen out

00:09:51,760 --> 00:09:55,200
of this

00:09:52,959 --> 00:09:58,080
and to be fair i'm i'm approaching this

00:09:55,200 --> 00:09:59,440
from the standpoint of

00:09:58,080 --> 00:10:01,760
i guess i didn't make that clear at the

00:09:59,440 --> 00:10:04,560
beginning

00:10:01,760 --> 00:10:06,560
i work on red hat enterprise linux i'm

00:10:04,560 --> 00:10:10,000
in the platform enablement group

00:10:06,560 --> 00:10:11,120
and what i'm interested in is those

00:10:10,000 --> 00:10:14,160
things that make

00:10:11,120 --> 00:10:14,160
my life easy

00:10:14,240 --> 00:10:19,839
as we all know it's all about me

00:10:17,360 --> 00:10:20,720
the the key thing is you know how do we

00:10:19,839 --> 00:10:24,800
make it so that

00:10:20,720 --> 00:10:28,320
the distributions like rel

00:10:24,800 --> 00:10:30,640
like ubuntu like susa like

00:10:28,320 --> 00:10:32,000
um you know name your favorite poison

00:10:30,640 --> 00:10:35,440
how can we make sure that all of those

00:10:32,000 --> 00:10:38,800
things work just kind of out of the box

00:10:35,440 --> 00:10:40,560
so that's really sort of the vision and

00:10:38,800 --> 00:10:42,320
when i started looking at what we have

00:10:40,560 --> 00:10:45,360
what we have is something called the

00:10:42,320 --> 00:10:48,320
unix class platform specification

00:10:45,360 --> 00:10:48,880
and my first sort of reaction to that

00:10:48,320 --> 00:10:52,240
was

00:10:48,880 --> 00:10:55,120
that's kind of too boring um

00:10:52,240 --> 00:10:55,120
because i think about

00:10:55,440 --> 00:10:59,200
general world domination with risk five

00:10:58,399 --> 00:11:01,440
and

00:10:59,200 --> 00:11:02,240
if i think about that how do we support

00:11:01,440 --> 00:11:04,160
the various

00:11:02,240 --> 00:11:05,680
you know the bsds the different art

00:11:04,160 --> 00:11:09,120
tosses

00:11:05,680 --> 00:11:09,920
and um yeah it would be nice at some

00:11:09,120 --> 00:11:11,440
point

00:11:09,920 --> 00:11:13,200
if we could actually get around to you

00:11:11,440 --> 00:11:16,560
supporting windows

00:11:13,200 --> 00:11:20,079
so you know think about it think

00:11:16,560 --> 00:11:22,480
think about if you will a world where

00:11:20,079 --> 00:11:23,440
i go down to the local shop and i can

00:11:22,480 --> 00:11:28,160
buy a

00:11:23,440 --> 00:11:31,040
fris5 laptop an intel laptop amd the

00:11:28,160 --> 00:11:32,320
arm you name it that's that's the kind

00:11:31,040 --> 00:11:34,160
of

00:11:32,320 --> 00:11:36,240
world i would like to see um and that

00:11:34,160 --> 00:11:37,760
kind of variety in the different isas

00:11:36,240 --> 00:11:39,600
available

00:11:37,760 --> 00:11:41,680
so my first suggestion and first thought

00:11:39,600 --> 00:11:45,040
was well let's let's make it an os

00:11:41,680 --> 00:11:46,720
platform spec so it's not just um

00:11:45,040 --> 00:11:48,720
not just unix although that covers a

00:11:46,720 --> 00:11:50,079
broad range of things

00:11:48,720 --> 00:11:52,399
let's make sure that we can deal with

00:11:50,079 --> 00:11:55,040
all the other needs of all the different

00:11:52,399 --> 00:11:58,320
um os's and various forms of

00:11:55,040 --> 00:12:01,440
distributions like psds

00:11:58,320 --> 00:12:03,120
okay the second thought was well really

00:12:01,440 --> 00:12:04,639
what's what's the key goal in all of

00:12:03,120 --> 00:12:06,880
this

00:12:04,639 --> 00:12:07,839
and really it's to set the expectations

00:12:06,880 --> 00:12:09,920
for

00:12:07,839 --> 00:12:11,440
what is provided to me as the distro

00:12:09,920 --> 00:12:14,079
provider

00:12:11,440 --> 00:12:14,480
what can i what can i expect to see and

00:12:14,079 --> 00:12:17,040
how

00:12:14,480 --> 00:12:20,399
how can i expect it to be described and

00:12:17,040 --> 00:12:20,399
how can i expect it to be

00:12:22,000 --> 00:12:26,240
used by by the os as well as to tell the

00:12:25,839 --> 00:12:28,639
prop

00:12:26,240 --> 00:12:29,760
platform providers sort of what they

00:12:28,639 --> 00:12:32,959
need to provide

00:12:29,760 --> 00:12:34,079
so if you will a contract between the

00:12:32,959 --> 00:12:37,839
distros and

00:12:34,079 --> 00:12:38,480
and the platform providers so we can all

00:12:37,839 --> 00:12:40,720
get along

00:12:38,480 --> 00:12:44,000
easily and um so we all know what to

00:12:40,720 --> 00:12:44,000
expect of each other

00:12:44,320 --> 00:12:48,399
really we just need to get to the point

00:12:45,760 --> 00:12:50,720
where it's uh you know i buy a risk wise

00:12:48,399 --> 00:12:52,720
server i plug it into my rack i boot it

00:12:50,720 --> 00:12:54,720
and and we're done right

00:12:52,720 --> 00:12:57,200
um that's that's how simple it really

00:12:54,720 --> 00:13:01,200
needs to be

00:12:57,200 --> 00:13:03,040
so that that's kind of the first thought

00:13:01,200 --> 00:13:05,200
so let's let's take this idea of an

00:13:03,040 --> 00:13:07,360
operating system platform spec a little

00:13:05,200 --> 00:13:08,639
a little further one of the things that

00:13:07,360 --> 00:13:13,120
i've seen

00:13:08,639 --> 00:13:13,120
in the past i was very

00:13:13,279 --> 00:13:16,399
very heavily involved in the arm side of

00:13:15,440 --> 00:13:20,000
these things

00:13:16,399 --> 00:13:21,760
many many years ago we need to clearly

00:13:20,000 --> 00:13:24,560
define terminology

00:13:21,760 --> 00:13:25,920
um so for example one of the things one

00:13:24,560 --> 00:13:27,279
of the words that gets tossed around a

00:13:25,920 --> 00:13:30,639
lot is platform

00:13:27,279 --> 00:13:33,200
right what does that mean um

00:13:30,639 --> 00:13:34,800
we need to be very very clear about that

00:13:33,200 --> 00:13:36,160
and some of the the things that

00:13:34,800 --> 00:13:37,920
in the specification that are a little

00:13:36,160 --> 00:13:41,600
strange are things like

00:13:37,920 --> 00:13:43,360
will and shall and should and must

00:13:41,600 --> 00:13:44,639
english being the imprecise language

00:13:43,360 --> 00:13:46,320
that it is

00:13:44,639 --> 00:13:48,320
it really does make a lot of sense to

00:13:46,320 --> 00:13:49,519
define those up front and make sure that

00:13:48,320 --> 00:13:52,639
everybody understands

00:13:49,519 --> 00:13:53,279
what we're talking about but the other

00:13:52,639 --> 00:13:55,360
things

00:13:53,279 --> 00:13:56,560
you know that's more of a logistics

00:13:55,360 --> 00:13:59,040
thing

00:13:56,560 --> 00:14:00,839
the other things are things like making

00:13:59,040 --> 00:14:04,160
sure that we know it's

00:14:00,839 --> 00:14:08,240
explicitly which portions of the isa

00:14:04,160 --> 00:14:11,519
are required which are not required

00:14:08,240 --> 00:14:13,440
but um recommended and then which are

00:14:11,519 --> 00:14:14,639
ones that we just really don't care

00:14:13,440 --> 00:14:17,560
about

00:14:14,639 --> 00:14:19,519
you know an extreme example might be the

00:14:17,560 --> 00:14:22,560
128-bit floating point

00:14:19,519 --> 00:14:24,880
um i may not be worried about it today

00:14:22,560 --> 00:14:26,240
but at some point in the future we may

00:14:24,880 --> 00:14:28,880
um

00:14:26,240 --> 00:14:30,639
but then we also need to define the rest

00:14:28,880 --> 00:14:33,600
of the platform

00:14:30,639 --> 00:14:34,480
so the isa is interesting but how do i

00:14:33,600 --> 00:14:37,920
talk to it

00:14:34,480 --> 00:14:41,360
um which buses which devices

00:14:37,920 --> 00:14:42,880
you know simple things like what console

00:14:41,360 --> 00:14:45,040
device do i have

00:14:42,880 --> 00:14:46,160
am i required to have a console device

00:14:45,040 --> 00:14:48,800
and and i would say

00:14:46,160 --> 00:14:50,959
yes please thank you very much you must

00:14:48,800 --> 00:14:54,480
have a serial console

00:14:50,959 --> 00:14:54,480
but then it's things like the buses

00:14:54,720 --> 00:14:58,079
surprisingly one of one of my pet peeves

00:14:57,040 --> 00:15:01,120
and all of this

00:14:58,079 --> 00:15:03,040
with the arm side is here it is 20 20

00:15:01,120 --> 00:15:07,360
and we still can't get people to make

00:15:03,040 --> 00:15:10,079
pcie correctly um

00:15:07,360 --> 00:15:11,920
why that is i i don't know it is

00:15:10,079 --> 00:15:13,519
frustrating at times but that's that's

00:15:11,920 --> 00:15:17,360
the state of the world

00:15:13,519 --> 00:15:18,639
um having to put quirks into the kernel

00:15:17,360 --> 00:15:22,560
as a result of that

00:15:18,639 --> 00:15:26,560
um just i'd prefer not to at this point

00:15:22,560 --> 00:15:29,279
um it's there's really no excuse

00:15:26,560 --> 00:15:30,560
um but that's just an example of the

00:15:29,279 --> 00:15:32,079
kinds of things i'd like to be able to

00:15:30,560 --> 00:15:35,279
very clearly say

00:15:32,079 --> 00:15:37,519
here's pcie you must do pcie

00:15:35,279 --> 00:15:39,199
do not do strange things in your ecam so

00:15:37,519 --> 00:15:41,759
that we have to cork it

00:15:39,199 --> 00:15:43,199
and then you know at least at that point

00:15:41,759 --> 00:15:43,600
we can point to the specification and

00:15:43,199 --> 00:15:55,839
say

00:15:43,600 --> 00:15:55,839
yeah that was a bad thing to do

00:16:05,440 --> 00:16:08,880
yeah i think the audio died i don't know

00:16:07,519 --> 00:16:10,880
if you can hear us

00:16:08,880 --> 00:16:12,560
oh i think your microphone switch on

00:16:10,880 --> 00:16:15,279
your headset just uh

00:16:12,560 --> 00:16:16,880
flipped yeah maybe it looks wireless

00:16:15,279 --> 00:16:20,720
maybe it uh

00:16:16,880 --> 00:16:20,720
blew up all your audio died

00:16:21,199 --> 00:16:26,160
i think he probably can't hear us either

00:16:23,920 --> 00:16:26,160
uh

00:16:27,040 --> 00:16:34,839
hey al i don't know if you can hear us

00:16:31,690 --> 00:16:36,399
[Laughter]

00:16:34,839 --> 00:16:38,560
hey

00:16:36,399 --> 00:16:40,880
hey you're look at the chat your audio

00:16:38,560 --> 00:16:40,880
is dead

00:16:44,160 --> 00:16:48,560
i gotta get like a piece of paper or

00:16:46,000 --> 00:16:48,560
something here

00:16:48,639 --> 00:16:53,199
yeah i did not get one for audio diet so

00:16:53,680 --> 00:16:57,440
there we go there it is okay sorry about

00:16:56,800 --> 00:16:59,440
that

00:16:57,440 --> 00:17:01,120
how long has that been gone sorry i

00:16:59,440 --> 00:17:03,680
don't know

00:17:01,120 --> 00:17:06,160
if i just start waving at you yeah you

00:17:03,680 --> 00:17:07,679
just talked about uh how pci just wasn't

00:17:06,160 --> 00:17:11,360
well standardized i think

00:17:07,679 --> 00:17:12,959
ah okay well yeah so

00:17:11,360 --> 00:17:16,959
i'll i'll get off that soapbox for a

00:17:12,959 --> 00:17:16,959
moment um sorry about that

00:17:17,520 --> 00:17:20,319
there is actually a weird fedora above

00:17:19,120 --> 00:17:22,000
where every now and then it'll turn my

00:17:20,319 --> 00:17:23,039
microphone off but i don't think that

00:17:22,000 --> 00:17:26,959
was it

00:17:23,039 --> 00:17:30,080
um okay so yes um

00:17:26,959 --> 00:17:33,440
clearly define all the required i o um

00:17:30,080 --> 00:17:36,480
the optional i o what flavor it is

00:17:33,440 --> 00:17:39,840
you know let's just define a common uart

00:17:36,480 --> 00:17:41,679
that everybody has that we can talk to

00:17:39,840 --> 00:17:43,679
but then really the key thing is just

00:17:41,679 --> 00:17:46,720
that we have a very very clear

00:17:43,679 --> 00:17:49,520
and detailed specification of how the

00:17:46,720 --> 00:17:50,799
os and the firmware talk to each other

00:17:49,520 --> 00:17:53,440
um

00:17:50,799 --> 00:17:54,720
and it's not for things like pci where

00:17:53,440 --> 00:17:57,200
the devices are

00:17:54,720 --> 00:17:58,480
will enumerate themselves but it's

00:17:57,200 --> 00:18:01,760
things like

00:17:58,480 --> 00:18:02,720
where is the the uart for the um uh the

00:18:01,760 --> 00:18:05,520
console

00:18:02,720 --> 00:18:07,200
you know how do i talk to the other

00:18:05,520 --> 00:18:10,640
controllers on the board

00:18:07,200 --> 00:18:12,640
let's say you have a vmc of some sort

00:18:10,640 --> 00:18:14,720
how do i talk to those that are not

00:18:12,640 --> 00:18:17,760
normally or excuse me that do not

00:18:14,720 --> 00:18:17,760
enumerate themselves

00:18:18,799 --> 00:18:21,520
and additionally that needs to be clear

00:18:20,559 --> 00:18:22,559
so that we can actually do

00:18:21,520 --> 00:18:24,880
virtualization

00:18:22,559 --> 00:18:25,840
later on and that virtualization is

00:18:24,880 --> 00:18:28,320
possible and

00:18:25,840 --> 00:18:28,880
straightforward but i think the key

00:18:28,320 --> 00:18:31,360
thing is

00:18:28,880 --> 00:18:32,160
is it all needs to be kept simple and it

00:18:31,360 --> 00:18:35,440
needs to be kept

00:18:32,160 --> 00:18:37,039
small you know we could specify

00:18:35,440 --> 00:18:39,760
everything in the world but that

00:18:37,039 --> 00:18:39,760
doesn't really

00:18:41,520 --> 00:18:44,880
it constrains creativity it constrains

00:18:43,760 --> 00:18:47,840
what we can do

00:18:44,880 --> 00:18:49,200
um so let's keep it as small as possible

00:18:47,840 --> 00:18:53,840
and only those things that we

00:18:49,200 --> 00:18:55,200
absolutely have to have you know this

00:18:53,840 --> 00:18:57,440
so i'm trying to watch my time a little

00:18:55,200 --> 00:19:00,080
bit here

00:18:57,440 --> 00:19:01,600
okay so the other thing that we'll need

00:19:00,080 --> 00:19:04,640
to talk about at some point

00:19:01,600 --> 00:19:06,400
um is

00:19:04,640 --> 00:19:08,400
this is all well and good and until we

00:19:06,400 --> 00:19:11,840
can actually prove that we've actually

00:19:08,400 --> 00:19:13,360
met the specification that so compliance

00:19:11,840 --> 00:19:14,480
will be a problem at some point in the

00:19:13,360 --> 00:19:18,080
future

00:19:14,480 --> 00:19:20,640
um if not today even for that matter

00:19:18,080 --> 00:19:21,520
so you know the fundamental issue is

00:19:20,640 --> 00:19:24,640
you've got

00:19:21,520 --> 00:19:26,559
humans involved so there will be

00:19:24,640 --> 00:19:28,160
mistakes made in the firmware being

00:19:26,559 --> 00:19:30,880
written mistakes

00:19:28,160 --> 00:19:32,400
made in the implementation but then

00:19:30,880 --> 00:19:36,080
there'll be

00:19:32,400 --> 00:19:37,840
intentional errors like

00:19:36,080 --> 00:19:39,120
my schedule is really compressed so i'm

00:19:37,840 --> 00:19:40,799
going to take a shortcut

00:19:39,120 --> 00:19:42,480
and i'm going to do this strange thing

00:19:40,799 --> 00:19:44,160
over here you know

00:19:42,480 --> 00:19:45,679
i'll just patch it over with software

00:19:44,160 --> 00:19:48,480
it's like no no no no please

00:19:45,679 --> 00:19:50,160
let's not do that um because i'm the one

00:19:48,480 --> 00:19:52,640
that has to support those silly patches

00:19:50,160 --> 00:19:54,640
over time

00:19:52,640 --> 00:19:56,000
so i think there's there's some things

00:19:54,640 --> 00:19:59,120
we can do to help with that

00:19:56,000 --> 00:20:02,400
um such as a reference qmu

00:19:59,120 --> 00:20:04,880
implementation the test suite

00:20:02,400 --> 00:20:06,000
i don't know at some point someone will

00:20:04,880 --> 00:20:08,400
want to talk about official

00:20:06,000 --> 00:20:11,440
certification of some sort or another

00:20:08,400 --> 00:20:13,919
um that's that's not something i

00:20:11,440 --> 00:20:15,679
i want to deal with right away um but it

00:20:13,919 --> 00:20:19,280
may it will probably come up

00:20:15,679 --> 00:20:22,720
at some point in the near future

00:20:19,280 --> 00:20:24,000
okay so um

00:20:22,720 --> 00:20:25,919
so how do we get to some sort of

00:20:24,000 --> 00:20:28,640
specification that would make some sort

00:20:25,919 --> 00:20:28,640
of sense well

00:20:30,159 --> 00:20:34,240
one of the things that uh that happened

00:20:32,640 --> 00:20:36,880
well i kind of was

00:20:34,240 --> 00:20:37,280
not entirely paying attention i think is

00:20:36,880 --> 00:20:40,320
uh

00:20:37,280 --> 00:20:42,960
i am now chair of the task group for

00:20:40,320 --> 00:20:44,159
um the unix platform spec and i think

00:20:42,960 --> 00:20:46,240
one of the first things we'll probably

00:20:44,159 --> 00:20:48,000
need to do is just kind of drop the unix

00:20:46,240 --> 00:20:51,280
part of it and just call it the platform

00:20:48,000 --> 00:20:54,559
spec it's out there on github

00:20:51,280 --> 00:20:57,039
there's the members portal for

00:20:54,559 --> 00:20:57,600
the discussion and for for other things

00:20:57,039 --> 00:21:01,120
that we'll

00:20:57,600 --> 00:21:02,559
use but

00:21:01,120 --> 00:21:04,720
at some point we need to talk about the

00:21:02,559 --> 00:21:05,679
process and probably this may be best on

00:21:04,720 --> 00:21:08,960
the mailing list

00:21:05,679 --> 00:21:11,039
um is right now that seems to be the

00:21:08,960 --> 00:21:12,000
only process is we just discuss it at

00:21:11,039 --> 00:21:14,559
infinite

00:21:12,000 --> 00:21:15,600
on the mailing list um at some point

00:21:14,559 --> 00:21:18,400
we'll need to get to

00:21:15,600 --> 00:21:19,760
a more formal process where we can say

00:21:18,400 --> 00:21:25,679
here's the the proposed

00:21:19,760 --> 00:21:25,679
change um it's got the proper

00:21:26,159 --> 00:21:29,679
authorization to be used as part of the

00:21:28,080 --> 00:21:32,880
specification

00:21:29,679 --> 00:21:34,640
and that the test group itself has

00:21:32,880 --> 00:21:37,039
agreed to the change

00:21:34,640 --> 00:21:37,679
and then then it's still not clear to me

00:21:37,039 --> 00:21:41,440
how that

00:21:37,679 --> 00:21:43,520
gets verified by say the tsc

00:21:41,440 --> 00:21:45,280
for for risk international there's five

00:21:43,520 --> 00:21:48,080
international rather

00:21:45,280 --> 00:21:50,559
um so we'll have to work work out those

00:21:48,080 --> 00:21:53,440
sorts of things

00:21:50,559 --> 00:21:55,760
okay of course there's versioning which

00:21:53,440 --> 00:21:59,440
will be an interesting discussion

00:21:55,760 --> 00:22:00,799
so what do we have um well

00:21:59,440 --> 00:22:02,960
you can see the spec that we've got

00:22:00,799 --> 00:22:04,320
there but you know it

00:22:02,960 --> 00:22:07,039
i'm not going to read the questions to

00:22:04,320 --> 00:22:09,760
you but we really can't build something

00:22:07,039 --> 00:22:10,320
from the specification that exists so we

00:22:09,760 --> 00:22:13,840
need

00:22:10,320 --> 00:22:13,840
a lot more work than that

00:22:14,000 --> 00:22:17,120
okay now there's a bunch of slides at

00:22:16,320 --> 00:22:20,000
this point

00:22:17,120 --> 00:22:21,039
that we can go through if you wish but

00:22:20,000 --> 00:22:23,440
the basic

00:22:21,039 --> 00:22:24,480
idea here is that there is a lot of

00:22:23,440 --> 00:22:27,440
things that we

00:22:24,480 --> 00:22:29,440
need and in particular what we need is

00:22:27,440 --> 00:22:30,559
some structure around what we

00:22:29,440 --> 00:22:32,960
some of the discussion that we've

00:22:30,559 --> 00:22:35,600
already had um

00:22:32,960 --> 00:22:37,440
so there's there's great discussion on

00:22:35,600 --> 00:22:38,640
what to do with the pme there's a great

00:22:37,440 --> 00:22:42,480
discussion on what to do

00:22:38,640 --> 00:22:43,840
with inner controllers

00:22:42,480 --> 00:22:45,360
all those sorts of fun things but we

00:22:43,840 --> 00:22:46,720
need to put those within some sort of

00:22:45,360 --> 00:22:50,720
framework

00:22:46,720 --> 00:22:53,120
and this could be good or bad i have a

00:22:50,720 --> 00:22:56,400
tendency to think from the very general

00:22:53,120 --> 00:22:57,600
to the to the more specific um mailing

00:22:56,400 --> 00:23:00,640
this tends to be

00:22:57,600 --> 00:23:01,919
very very specific and i've still got a

00:23:00,640 --> 00:23:05,039
lot to catch up on

00:23:01,919 --> 00:23:06,320
um in terms of just finding

00:23:05,039 --> 00:23:07,520
kind of getting in touch with all the

00:23:06,320 --> 00:23:09,039
different conversations that are

00:23:07,520 --> 00:23:10,320
currently going on

00:23:09,039 --> 00:23:13,280
about things like the interrupt

00:23:10,320 --> 00:23:15,039
controller about things like pmus

00:23:13,280 --> 00:23:16,799
and make sure i understand where we are

00:23:15,039 --> 00:23:19,360
and where those actually fit into a

00:23:16,799 --> 00:23:21,600
larger overall structure

00:23:19,360 --> 00:23:23,039
but then there needs to be some

00:23:21,600 --> 00:23:25,760
structure around all of this

00:23:23,039 --> 00:23:27,200
to begin with and one so one of the

00:23:25,760 --> 00:23:31,039
thoughts is to do

00:23:27,200 --> 00:23:31,760
a more uh traditional structure if you

00:23:31,039 --> 00:23:33,760
will

00:23:31,760 --> 00:23:36,720
uh where we talk about the hardware you

00:23:33,760 --> 00:23:39,520
know what what the boot protocols are

00:23:36,720 --> 00:23:40,480
how we do device enumeration those sorts

00:23:39,520 --> 00:23:42,400
of things

00:23:40,480 --> 00:23:43,760
but then as i get to thinking about this

00:23:42,400 --> 00:23:46,000
since this was a

00:23:43,760 --> 00:23:46,960
change i was thinking about last night

00:23:46,000 --> 00:23:49,600
was

00:23:46,960 --> 00:23:50,880
um perhaps the discussion needs to be or

00:23:49,600 --> 00:23:53,039
perhaps the specification needs to be

00:23:50,880 --> 00:23:56,799
built from the use cases and not

00:23:53,039 --> 00:23:59,840
the specific components of the hardware

00:23:56,799 --> 00:24:01,120
um so kind of kind of turn that inside

00:23:59,840 --> 00:24:02,799
out so that there's

00:24:01,120 --> 00:24:04,480
maybe there's a section that says here's

00:24:02,799 --> 00:24:05,279
here's what we want to do in the iot

00:24:04,480 --> 00:24:06,960
space

00:24:05,279 --> 00:24:08,799
here's what we want to do for embedded

00:24:06,960 --> 00:24:12,000
systems here's what we want to do for

00:24:08,799 --> 00:24:13,520
general uh unix platforms here's what we

00:24:12,000 --> 00:24:17,679
want to do for general

00:24:13,520 --> 00:24:19,200
esd platforms right so

00:24:17,679 --> 00:24:21,360
those are those are some discussions

00:24:19,200 --> 00:24:22,880
that still need to have we need to have

00:24:21,360 --> 00:24:25,120
as well

00:24:22,880 --> 00:24:27,120
um the other discussion i think we need

00:24:25,120 --> 00:24:29,520
to have is

00:24:27,120 --> 00:24:29,520
one that

00:24:30,320 --> 00:24:34,400
do do we want to actually document what

00:24:32,640 --> 00:24:36,400
it is we have today

00:24:34,400 --> 00:24:38,640
um you know i'm thinking of like for

00:24:36,400 --> 00:24:41,760
example the cy5 board

00:24:38,640 --> 00:24:44,240
do we want to use that as our

00:24:41,760 --> 00:24:44,880
our initial level zero for lack of

00:24:44,240 --> 00:24:47,679
anything

00:24:44,880 --> 00:24:49,200
better to call it as an initial

00:24:47,679 --> 00:24:52,960
specification

00:24:49,200 --> 00:24:56,640
or do we want to start someplace else

00:24:52,960 --> 00:24:57,600
and that is a question i can't answer by

00:24:56,640 --> 00:25:00,880
myself

00:24:57,600 --> 00:25:05,760
i think i would be inclined to say

00:25:00,880 --> 00:25:08,720
let's go to what we want

00:25:05,760 --> 00:25:09,520
right away just just in the interest of

00:25:08,720 --> 00:25:12,559
doing things

00:25:09,520 --> 00:25:12,559
quickly so we don't

00:25:13,039 --> 00:25:17,360
uh don't end up with a situation where

00:25:15,679 --> 00:25:18,080
where the hardware is continuously

00:25:17,360 --> 00:25:20,320
leading

00:25:18,080 --> 00:25:22,080
what the specification needs to be that

00:25:20,320 --> 00:25:23,840
there's at least an iterative process

00:25:22,080 --> 00:25:26,400
going on at that point

00:25:23,840 --> 00:25:27,679
instead that the hardware and

00:25:26,400 --> 00:25:28,159
specification are kind of working

00:25:27,679 --> 00:25:31,760
together

00:25:28,159 --> 00:25:33,520
to get to the next generation of things

00:25:31,760 --> 00:25:35,679
so i don't know that's that's to be

00:25:33,520 --> 00:25:38,960
discussed as well

00:25:35,679 --> 00:25:43,039
um okay

00:25:38,960 --> 00:25:46,080
so as it turns out living in denver

00:25:43,039 --> 00:25:48,320
um jack kerouac is

00:25:46,080 --> 00:25:50,240
uh the author of a book called on the

00:25:48,320 --> 00:25:53,200
road and

00:25:50,240 --> 00:25:54,640
he invented this notion called uh stream

00:25:53,200 --> 00:25:57,760
of consciousness

00:25:54,640 --> 00:25:58,400
um so in on the road that's basically

00:25:57,760 --> 00:26:00,480
what it is

00:25:58,400 --> 00:26:02,400
it's jack kerouac just wrote down

00:26:00,480 --> 00:26:05,039
whatever came to mind

00:26:02,400 --> 00:26:05,520
um and if you actually see the original

00:26:05,039 --> 00:26:07,520
writing

00:26:05,520 --> 00:26:08,799
it's all on one continuous strip of

00:26:07,520 --> 00:26:11,520
paper which is

00:26:08,799 --> 00:26:12,480
a weird thing for a book but at any rate

00:26:11,520 --> 00:26:15,200
um

00:26:12,480 --> 00:26:16,400
that's kind of what this list is this is

00:26:15,200 --> 00:26:17,840
all of the things

00:26:16,400 --> 00:26:20,080
you know this slide and then probably

00:26:17,840 --> 00:26:25,840
the next is the next one or two

00:26:20,080 --> 00:26:25,840
yeah maybe um this this slide is just a

00:26:26,320 --> 00:26:31,200
a stream of consciousness um on one

00:26:29,440 --> 00:26:33,760
afternoon where i thought okay what

00:26:31,200 --> 00:26:34,799
what are the things that we need um in

00:26:33,760 --> 00:26:37,279
in

00:26:34,799 --> 00:26:38,559
in order to support rel and some of them

00:26:37,279 --> 00:26:42,000
are strange and unusual

00:26:38,559 --> 00:26:44,000
like um edac right this is something

00:26:42,000 --> 00:26:47,120
that is extraordinarily

00:26:44,000 --> 00:26:48,799
helpful in the hpc environment it's not

00:26:47,120 --> 00:26:50,840
been discussed anywhere that i'm aware

00:26:48,799 --> 00:26:53,279
of at this point

00:26:50,840 --> 00:26:56,799
um things like

00:26:53,279 --> 00:26:58,400
um one of the one of the more

00:26:56,799 --> 00:27:00,000
interesting things is machine

00:26:58,400 --> 00:27:01,760
identification

00:27:00,000 --> 00:27:07,679
you know knowing exactly what processor

00:27:01,760 --> 00:27:10,240
we're on exactly what

00:27:07,679 --> 00:27:12,559
i think the audio's gone again we lost

00:27:10,240 --> 00:27:15,360
your audio

00:27:12,559 --> 00:27:18,240
it soon means you can't hear us yeah

00:27:15,360 --> 00:27:18,240
someone have the

00:27:18,840 --> 00:27:21,840
paper

00:27:23,520 --> 00:27:28,880
i i didn't actually get to writing that

00:27:26,159 --> 00:27:28,880
the audio is dead

00:27:30,399 --> 00:27:36,320
yep there we go yep ah sorry

00:27:34,640 --> 00:27:38,000
i have no idea why that's happening my

00:27:36,320 --> 00:27:41,520
apologies

00:27:38,000 --> 00:27:41,520
so where did i lose people

00:27:42,559 --> 00:27:49,440
uh you just mentioned um i think

00:27:46,000 --> 00:27:50,960
just the cpu id and started talking

00:27:49,440 --> 00:27:54,080
about it okay

00:27:50,960 --> 00:27:55,919
yeah so so really i think the key thing

00:27:54,080 --> 00:27:57,440
with this slide is this is just

00:27:55,919 --> 00:27:59,120
this is just a bunch of the things that

00:27:57,440 --> 00:28:01,760
i thought of without

00:27:59,120 --> 00:28:03,679
even thinking about this very hard that

00:28:01,760 --> 00:28:05,520
are things that need to be outlined and

00:28:03,679 --> 00:28:07,440
structured into the document in some way

00:28:05,520 --> 00:28:09,840
or another um

00:28:07,440 --> 00:28:11,200
and and it's a long list so you know the

00:28:09,840 --> 00:28:16,080
machine identification

00:28:11,200 --> 00:28:18,240
one was was one where um

00:28:16,080 --> 00:28:19,520
has caused us a great deal of grief and

00:28:18,240 --> 00:28:23,120
in other isas

00:28:19,520 --> 00:28:26,320
um not being able to tell you about the

00:28:23,120 --> 00:28:29,039
the actual isa that's been implemented

00:28:26,320 --> 00:28:29,039
on that machine

00:28:29,600 --> 00:28:33,360
there's all sorts of things that we can

00:28:30,799 --> 00:28:35,120
do to compensate for foreign

00:28:33,360 --> 00:28:36,799
problems with a particular isa

00:28:35,120 --> 00:28:39,279
implementation

00:28:36,799 --> 00:28:40,880
but we can't do that we can't compensate

00:28:39,279 --> 00:28:42,960
for them if we don't know that that's

00:28:40,880 --> 00:28:46,080
the implementation that we're using

00:28:42,960 --> 00:28:49,360
so think fun things like that um

00:28:46,080 --> 00:28:50,799
okay i think i'm getting close to out of

00:28:49,360 --> 00:28:53,840
time here

00:28:50,799 --> 00:28:57,200
um so

00:28:53,840 --> 00:28:59,360
the other the thought was you know

00:28:57,200 --> 00:29:00,640
profiles and use cases these i think are

00:28:59,360 --> 00:29:03,760
going to be kind of

00:29:00,640 --> 00:29:05,440
kind of critical um

00:29:03,760 --> 00:29:07,360
and there's two aspects to it one is

00:29:05,440 --> 00:29:07,919
that these are going to change over time

00:29:07,360 --> 00:29:13,039
isis

00:29:07,919 --> 00:29:16,159
i assume right um that

00:29:13,039 --> 00:29:17,760
you know we'll we'll get to one level of

00:29:16,159 --> 00:29:19,919
understanding and say okay that was

00:29:17,760 --> 00:29:21,679
great um but

00:29:19,919 --> 00:29:24,080
we now need to improve that a little bit

00:29:21,679 --> 00:29:25,679
and then we'll do the next level

00:29:24,080 --> 00:29:27,200
but then i think there's the the key

00:29:25,679 --> 00:29:30,080
thing of of

00:29:27,200 --> 00:29:31,760
what use cases involved um because i'm

00:29:30,080 --> 00:29:33,120
going to put something very different on

00:29:31,760 --> 00:29:35,200
a development board than i'm going to

00:29:33,120 --> 00:29:38,640
put on an enterprise server

00:29:35,200 --> 00:29:40,240
um and it would nice it would be nice to

00:29:38,640 --> 00:29:43,679
be able to

00:29:40,240 --> 00:29:47,360
as an os predict what it is i'm going to

00:29:43,679 --> 00:29:47,360
see on each of those sorts of boards

00:29:47,760 --> 00:29:54,159
and then the whole issue of compliance

00:29:51,120 --> 00:29:57,200
yeah how do we do that um

00:29:54,159 --> 00:29:58,640
solely by use case um

00:29:57,200 --> 00:30:00,559
you know what what i'm suggesting is

00:29:58,640 --> 00:30:02,960
that we do it by use case and then by

00:30:00,559 --> 00:30:04,399
level within the use case but maybe

00:30:02,960 --> 00:30:06,080
there's different ways to do that that i

00:30:04,399 --> 00:30:08,480
haven't thought about

00:30:06,080 --> 00:30:09,360
and then the one last one that was weird

00:30:08,480 --> 00:30:12,000
um

00:30:09,360 --> 00:30:13,039
is do we even think about form factors

00:30:12,000 --> 00:30:15,919
um

00:30:13,039 --> 00:30:16,480
you know such as many itx or dev boards

00:30:15,919 --> 00:30:18,399
or

00:30:16,480 --> 00:30:19,679
do we need to clone the raspberry pi

00:30:18,399 --> 00:30:22,720
form factor

00:30:19,679 --> 00:30:23,919
i don't know um that is another random

00:30:22,720 --> 00:30:28,480
thought that occurred to me

00:30:23,919 --> 00:30:28,480
at the time okay

00:30:28,640 --> 00:30:34,559
so just a summary

00:30:32,000 --> 00:30:36,000
i've tried to very quickly touch on the

00:30:34,559 --> 00:30:37,760
notion that

00:30:36,000 --> 00:30:39,919
if we want to get this to the point

00:30:37,760 --> 00:30:42,640
where we are competing with the likes of

00:30:39,919 --> 00:30:44,159
the intels and the amd's and the arms

00:30:42,640 --> 00:30:45,919
then we need to have a clear vision of

00:30:44,159 --> 00:30:48,720
where we want to go and how to get the

00:30:45,919 --> 00:30:51,039
how to get there

00:30:48,720 --> 00:30:52,640
and then you know some discussion on

00:30:51,039 --> 00:30:56,159
kind of what we have

00:30:52,640 --> 00:30:58,480
where we what we need and then

00:30:56,159 --> 00:31:00,480
what happens next is really kind of why

00:30:58,480 --> 00:31:03,760
i'm here is

00:31:00,480 --> 00:31:07,519
i need we're going to need a lot of help

00:31:03,760 --> 00:31:10,240
so you know get on the mailing list get

00:31:07,519 --> 00:31:12,000
if you're not already a member of of the

00:31:10,240 --> 00:31:13,760
risk five international

00:31:12,000 --> 00:31:15,760
you know community membership is free

00:31:13,760 --> 00:31:18,240
please please join

00:31:15,760 --> 00:31:20,159
and then there's a couple of different

00:31:18,240 --> 00:31:22,960
irc channels that i'm aware of but

00:31:20,159 --> 00:31:22,960
there's probably more

00:31:23,840 --> 00:31:27,279
that's it that's very quickly

00:31:28,240 --> 00:31:35,440
any questions at this point

00:31:33,200 --> 00:31:36,240
so since we are renaming it to os case

00:31:35,440 --> 00:31:38,399
where

00:31:36,240 --> 00:31:40,240
are we going to include there are some

00:31:38,399 --> 00:31:41,840
discussions about

00:31:40,240 --> 00:31:43,360
the details about let's say running a

00:31:41,840 --> 00:31:47,039
bare metal program

00:31:43,360 --> 00:31:49,200
so at least we can exclude those

00:31:47,039 --> 00:31:50,080
i'm not sure i understand the question

00:31:49,200 --> 00:31:52,720
so

00:31:50,080 --> 00:31:53,919
uh since we are expanding the scope and

00:31:52,720 --> 00:31:56,159
renaming it to

00:31:53,919 --> 00:31:58,240
os platform spec there are some

00:31:56,159 --> 00:32:02,240
discussion in the mailing list about

00:31:58,240 --> 00:32:04,960
uh what about the bare metal programs

00:32:02,240 --> 00:32:06,960
just from like put the board under next

00:32:04,960 --> 00:32:09,840
what we do on the microcontroller

00:32:06,960 --> 00:32:10,480
so do so or let's say small it is where

00:32:09,840 --> 00:32:14,559
there are no

00:32:10,480 --> 00:32:17,760
is running at least can we execute those

00:32:14,559 --> 00:32:19,120
i'm in favor of excluding those but well

00:32:17,760 --> 00:32:20,640
and that's that's a good question i'm

00:32:19,120 --> 00:32:21,919
not sure i mean what is what does the

00:32:20,640 --> 00:32:25,840
community want to do

00:32:21,919 --> 00:32:28,240
right um i i think there's

00:32:25,840 --> 00:32:29,679
you could make a case that says that um

00:32:28,240 --> 00:32:32,640
even those need to have some

00:32:29,679 --> 00:32:34,640
restrictions put on them um so that the

00:32:32,640 --> 00:32:36,000
developers know

00:32:34,640 --> 00:32:38,159
something about what they're getting

00:32:36,000 --> 00:32:39,919
right um

00:32:38,159 --> 00:32:43,600
you know but the the other case i think

00:32:39,919 --> 00:32:45,760
is that yeah these are

00:32:43,600 --> 00:32:46,799
if we just view these as experiments

00:32:45,760 --> 00:32:48,399
then

00:32:46,799 --> 00:32:50,080
yeah put whatever you want to on it

00:32:48,399 --> 00:32:51,440
right um

00:32:50,080 --> 00:32:54,799
but but you're right i think there

00:32:51,440 --> 00:32:54,799
doesn't need to be room for both

00:32:54,840 --> 00:32:59,919
um you know i

00:32:56,880 --> 00:33:01,760
i don't have a strong feeling about

00:32:59,919 --> 00:33:04,720
uh specifying that sort of stuff it

00:33:01,760 --> 00:33:04,720
seems to me that's kind of

00:33:05,679 --> 00:33:11,200
um it is really kind of an experimental

00:33:09,200 --> 00:33:11,919
area so it's not clear that it needs to

00:33:11,200 --> 00:33:14,720
have

00:33:11,919 --> 00:33:16,880
any sort of specification okay that's

00:33:14,720 --> 00:33:19,760
that's just kind of my sense of it

00:33:16,880 --> 00:33:21,919
but uh also should like should we define

00:33:19,760 --> 00:33:23,600
the spec for let's say

00:33:21,919 --> 00:33:26,000
anything that runs on them or like j

00:33:23,600 --> 00:33:28,720
fire or any kind of outlaws

00:33:26,000 --> 00:33:30,640
so or does this group or does this

00:33:28,720 --> 00:33:32,480
specification should focus only on

00:33:30,640 --> 00:33:36,000
anything that boots

00:33:32,480 --> 00:33:39,679
in s mode have an mmu and

00:33:36,000 --> 00:33:40,880
henceforth right yeah that that that's

00:33:39,679 --> 00:33:41,440
something i've been trying to think

00:33:40,880 --> 00:33:44,799
through

00:33:41,440 --> 00:33:47,679
um because you could argue that

00:33:44,799 --> 00:33:48,480
um we're not interested unless you have

00:33:47,679 --> 00:33:52,000
an mmu

00:33:48,480 --> 00:33:56,159
right yeah

00:33:52,000 --> 00:33:56,159
but uh i don't know um

00:33:56,720 --> 00:34:00,480
i don't know my fear is if we expand the

00:33:58,960 --> 00:34:03,919
scope too big

00:34:00,480 --> 00:34:05,679
then like we just keep around

00:34:03,919 --> 00:34:07,200
keep doing things but actually nothing

00:34:05,679 --> 00:34:08,720
concrete come out of it because there

00:34:07,200 --> 00:34:10,639
will be some objection to something

00:34:08,720 --> 00:34:12,000
and then we'll just keep discussing

00:34:10,639 --> 00:34:14,720
things but

00:34:12,000 --> 00:34:17,599
10 years down the line still discussing

00:34:14,720 --> 00:34:19,599
we're still discussing things yeah

00:34:17,599 --> 00:34:21,119
with the risk five specs is that they

00:34:19,599 --> 00:34:23,760
turn into these sort of

00:34:21,119 --> 00:34:25,440
meta specifications that try to solve

00:34:23,760 --> 00:34:28,079
everything and never get finished

00:34:25,440 --> 00:34:28,720
yeah let's not do that if you expand

00:34:28,079 --> 00:34:30,879
into

00:34:28,720 --> 00:34:32,480
embedded like really embedded and it

00:34:30,879 --> 00:34:32,960
gets really hard right because there's

00:34:32,480 --> 00:34:35,839
different

00:34:32,960 --> 00:34:37,280
embedded os that like have different

00:34:35,839 --> 00:34:39,040
specs right so there's like talk that

00:34:37,280 --> 00:34:39,679
needs an mpu well i don't think zephyr

00:34:39,040 --> 00:34:42,320
does

00:34:39,679 --> 00:34:44,159
how do you draw the line there yeah

00:34:42,320 --> 00:34:47,119
that's a really fun

00:34:44,159 --> 00:34:49,119
you also end up in the regime in which

00:34:47,119 --> 00:34:52,480
people are unwilling to pay

00:34:49,119 --> 00:34:54,879
anything for binary compatibility right

00:34:52,480 --> 00:34:55,760
which is kind of the opposite of what

00:34:54,879 --> 00:34:58,720
distros

00:34:55,760 --> 00:34:59,920
want exactly i think when we first kind

00:34:58,720 --> 00:35:03,040
of partitioned out the world

00:34:59,920 --> 00:35:04,560
we thought we'll split it up into binary

00:35:03,040 --> 00:35:06,720
compatible systems

00:35:04,560 --> 00:35:08,000
right which smell like you know debian

00:35:06,720 --> 00:35:10,320
or red hat or whatever

00:35:08,000 --> 00:35:12,240
right and then source compatible systems

00:35:10,320 --> 00:35:14,560
which might be in rtos or might be

00:35:12,240 --> 00:35:16,320
uh even like open embedded or something

00:35:14,560 --> 00:35:19,359
like that where you're building for one

00:35:16,320 --> 00:35:20,320
specific target right well and i think

00:35:19,359 --> 00:35:22,880
what i would like to do

00:35:20,320 --> 00:35:24,240
with with this effort is that you know

00:35:22,880 --> 00:35:27,040
let's concentrate on the stuff

00:35:24,240 --> 00:35:27,359
the distros need at this point um you

00:35:27,040 --> 00:35:30,480
know

00:35:27,359 --> 00:35:32,960
if if we get to the point where there's

00:35:30,480 --> 00:35:34,880
enough commonality between the r tosses

00:35:32,960 --> 00:35:36,560
great wonderful we can we can start

00:35:34,880 --> 00:35:39,359
writing some of that down

00:35:36,560 --> 00:35:40,160
um you know should we at least look at

00:35:39,359 --> 00:35:42,560
it yeah

00:35:40,160 --> 00:35:44,400
but does that need to be the primary

00:35:42,560 --> 00:35:46,079
focus right away

00:35:44,400 --> 00:35:48,000
uh no i don't think so i think yeah i

00:35:46,079 --> 00:35:51,599
think that's the right focus

00:35:48,000 --> 00:35:51,599
the right way to go yeah

00:35:52,400 --> 00:35:55,839
yeah we could call it the distro class

00:35:54,800 --> 00:35:58,640
platform spec

00:35:55,839 --> 00:35:59,200
yeah sure that's what i was thinking

00:35:58,640 --> 00:36:01,839
like

00:35:59,200 --> 00:36:03,280
uh half the specification like as you

00:36:01,839 --> 00:36:04,880
mentioned different profiles and then

00:36:03,280 --> 00:36:07,599
one would be digital class

00:36:04,880 --> 00:36:09,680
which at least we try to define now and

00:36:07,599 --> 00:36:10,000
then if there are some task group formed

00:36:09,680 --> 00:36:13,839
for

00:36:10,000 --> 00:36:17,040
let's say like real pure embedded with

00:36:13,839 --> 00:36:20,880
just the m mode oss then

00:36:17,040 --> 00:36:27,839
welcome to that i think we are

00:36:20,880 --> 00:36:27,839
missing out yeah yeah it's graphics yeah

00:36:31,040 --> 00:36:36,320
any last minute thoughts or we can

00:36:33,200 --> 00:36:36,320
switch to the next one

00:36:37,040 --> 00:36:41,440
that would be basically a continuous

00:36:39,599 --> 00:36:45,599
discussion of this so

00:36:41,440 --> 00:36:45,599
bro a little bit

00:36:46,720 --> 00:36:55,839
okay so i'll switch

00:36:50,640 --> 00:36:55,839
all right thank you thank you all

00:37:05,760 --> 00:37:12,000
okay just trying to check i'm audible

00:37:09,440 --> 00:37:12,880
and this let's head out yeah everything

00:37:12,000 --> 00:37:17,440
looks good

00:37:12,880 --> 00:37:17,440
okay awesome so let's start

00:37:18,320 --> 00:37:25,359
okay hi uh so this session um

00:37:21,680 --> 00:37:26,240
wanted to discuss about what it all

00:37:25,359 --> 00:37:29,680
takes to make

00:37:26,240 --> 00:37:31,760
this 5 ebbr compatible so before that

00:37:29,680 --> 00:37:34,079
just a brief introduction i'm ateesh i

00:37:31,760 --> 00:37:37,920
work for western digital

00:37:34,079 --> 00:37:40,320
and our aim is to make the ecosystem

00:37:37,920 --> 00:37:42,160
strong enough so that risk 5 becomes a

00:37:40,320 --> 00:37:46,400
dominant player

00:37:42,160 --> 00:37:49,119
so yeah coming back to the topic

00:37:46,400 --> 00:37:51,440
uh what it actually takes to make risk 5

00:37:49,119 --> 00:37:54,560
ebp are compatible

00:37:51,440 --> 00:37:57,680
uh before that uh how

00:37:54,560 --> 00:38:00,000
as all mentioned we need the

00:37:57,680 --> 00:38:02,400
booting process we need the entire

00:38:00,000 --> 00:38:05,920
experience to be as boring as possible

00:38:02,400 --> 00:38:08,160
that's what the aim and for that we need

00:38:05,920 --> 00:38:09,040
standards so we need to follow standards

00:38:08,160 --> 00:38:12,000
for scribe

00:38:09,040 --> 00:38:14,320
as well so that it becomes dead boring

00:38:12,000 --> 00:38:16,000
and the user doesn't have to worry about

00:38:14,320 --> 00:38:18,800
learning new ways of

00:38:16,000 --> 00:38:19,520
booting os or new ways of loading a

00:38:18,800 --> 00:38:22,400
firmware

00:38:19,520 --> 00:38:23,440
uh for specifically for s5 if you know

00:38:22,400 --> 00:38:26,079
to boot other pla

00:38:23,440 --> 00:38:27,680
other uh architectures you should be

00:38:26,079 --> 00:38:29,599
able to go to sky

00:38:27,680 --> 00:38:32,320
for that one of those booting standard

00:38:29,599 --> 00:38:34,240
that m64 has followed is uh

00:38:32,320 --> 00:38:35,359
embedded base boot requirement it's

00:38:34,240 --> 00:38:37,680
known as ebbr

00:38:35,359 --> 00:38:38,560
which basically defines an interface

00:38:37,680 --> 00:38:40,480
between

00:38:38,560 --> 00:38:42,640
platform firmware and an operating

00:38:40,480 --> 00:38:43,760
system and it's targeted towards

00:38:42,640 --> 00:38:46,079
embedded platform

00:38:43,760 --> 00:38:47,040
but which actually capable of booting a

00:38:46,079 --> 00:38:49,599
generic os

00:38:47,040 --> 00:38:50,160
not like uh as we discussed just in the

00:38:49,599 --> 00:38:52,720
past

00:38:50,160 --> 00:38:53,440
not like fria toss or anything because

00:38:52,720 --> 00:38:57,119
it uh

00:38:53,440 --> 00:39:00,480
one core aspect of vbr is uv

00:38:57,119 --> 00:39:04,240
so to the reason why we want for

00:39:00,480 --> 00:39:06,640
uh we want ebb r4s5 is

00:39:04,240 --> 00:39:07,359
make it make it standard so that we use

00:39:06,640 --> 00:39:09,359
the

00:39:07,359 --> 00:39:10,400
bootloaders that already supports the

00:39:09,359 --> 00:39:12,320
specification

00:39:10,400 --> 00:39:14,000
we use the format that already supports

00:39:12,320 --> 00:39:16,400
subsystem specification

00:39:14,000 --> 00:39:17,119
so you don't have to worry about uh

00:39:16,400 --> 00:39:19,040
trying out

00:39:17,119 --> 00:39:21,440
new formula or new boot loaders it's

00:39:19,040 --> 00:39:22,160
just the respite bits that gets added to

00:39:21,440 --> 00:39:25,200
those

00:39:22,160 --> 00:39:27,200
bootloaders performance and then also

00:39:25,200 --> 00:39:29,280
many linux distribution already supports

00:39:27,200 --> 00:39:32,400
abbr which is proven on

00:39:29,280 --> 00:39:35,839
many m64 platforms so that will help us

00:39:32,400 --> 00:39:37,440
uh adopting to the all the digital

00:39:35,839 --> 00:39:40,240
supporting all the distros much

00:39:37,440 --> 00:39:41,440
quicker than if we go and reinvent

00:39:40,240 --> 00:39:45,920
everything

00:39:41,440 --> 00:39:49,200
from the beginning so

00:39:45,920 --> 00:39:50,800
going to the next so what is there in

00:39:49,200 --> 00:39:53,040
the specification

00:39:50,800 --> 00:39:55,200
the specification that's there is

00:39:53,040 --> 00:39:58,800
basically

00:39:55,200 --> 00:40:01,200
and uh ebbi specification has like uh

00:39:58,800 --> 00:40:02,800
if i go by the logistic requirements

00:40:01,200 --> 00:40:06,000
it's basically hosted on the

00:40:02,800 --> 00:40:08,400
um software uh github repo the

00:40:06,000 --> 00:40:09,599
mailing list discussion happens in the

00:40:08,400 --> 00:40:12,480
linaro

00:40:09,599 --> 00:40:12,880
group linaro boot architecture mailing

00:40:12,480 --> 00:40:15,680
list

00:40:12,880 --> 00:40:17,280
and it's licensed under creative commons

00:40:15,680 --> 00:40:20,160
which is very permissive

00:40:17,280 --> 00:40:21,760
and uh the copyright is um limited

00:40:20,160 --> 00:40:24,720
contributors

00:40:21,760 --> 00:40:24,960
so in terms of logistic requirement uh

00:40:24,720 --> 00:40:27,680
as

00:40:24,960 --> 00:40:28,079
it's in community driven document it's

00:40:27,680 --> 00:40:30,160
not

00:40:28,079 --> 00:40:32,560
uh some adjustments are required to make

00:40:30,160 --> 00:40:35,440
it a multi-arc specification

00:40:32,560 --> 00:40:35,760
which can be worked out but in terms of

00:40:35,440 --> 00:40:37,920
uh

00:40:35,760 --> 00:40:38,880
in terms of technical requirement what

00:40:37,920 --> 00:40:41,520
we have is

00:40:38,880 --> 00:40:43,040
uh in the specification is a subset of

00:40:41,520 --> 00:40:45,040
uv

00:40:43,040 --> 00:40:46,640
boot and runtime services most of the

00:40:45,040 --> 00:40:47,200
runtime are optional if i remember

00:40:46,640 --> 00:40:48,960
correctly

00:40:47,200 --> 00:40:50,319
some of the boot time services are

00:40:48,960 --> 00:40:53,359
mandatory

00:40:50,319 --> 00:40:56,000
so and it mandates

00:40:53,359 --> 00:40:58,079
to for the platform to use either device

00:40:56,000 --> 00:41:00,240
3 or a cpi it doesn't have to be both

00:40:58,079 --> 00:41:01,119
but one of them have to be supported

00:41:00,240 --> 00:41:03,760
there you have

00:41:01,119 --> 00:41:04,160
the only architecture specific bits is

00:41:03,760 --> 00:41:06,319
the

00:41:04,160 --> 00:41:08,480
multiprocessor startup protocol which

00:41:06,319 --> 00:41:11,680
basically defines how do you boot

00:41:08,480 --> 00:41:12,720
uh all the hearts into the linux or any

00:41:11,680 --> 00:41:15,119
other operating system

00:41:12,720 --> 00:41:15,920
i may use linux as an example throughout

00:41:15,119 --> 00:41:18,560
the talk but

00:41:15,920 --> 00:41:19,760
uh it's applicable to all other verses

00:41:18,560 --> 00:41:23,359
such as psd

00:41:19,760 --> 00:41:24,240
or um any kind of flavor phds or any

00:41:23,359 --> 00:41:26,560
other os

00:41:24,240 --> 00:41:27,760
and lastly the firmware storage which

00:41:26,560 --> 00:41:31,280
basically deals with

00:41:27,760 --> 00:41:34,960
uh how your firmware and osr part uh

00:41:31,280 --> 00:41:35,520
stored in the uh in the platform so it

00:41:34,960 --> 00:41:37,680
can be

00:41:35,520 --> 00:41:39,440
on different storage or if it is in the

00:41:37,680 --> 00:41:42,319
same storage then it has to be

00:41:39,440 --> 00:41:43,920
gpt partition so all of these

00:41:42,319 --> 00:41:44,880
requirements are basically currently

00:41:43,920 --> 00:41:47,040
made by this five

00:41:44,880 --> 00:41:48,079
except one of the good service which is

00:41:47,040 --> 00:41:50,160
reset system

00:41:48,079 --> 00:41:52,560
which we may need to discuss in the

00:41:50,160 --> 00:41:52,560
details

00:41:52,720 --> 00:42:01,119
now so looking at the risk five

00:41:56,960 --> 00:42:02,960
uh compliance what currently exists

00:42:01,119 --> 00:42:04,960
there is an ongoing discussion happening

00:42:02,960 --> 00:42:07,839
in the mailing list if you can

00:42:04,960 --> 00:42:10,079
uh take a look uh if you have something

00:42:07,839 --> 00:42:13,520
to say please contribute there

00:42:10,079 --> 00:42:15,119
and uh we'll take and we'll take it

00:42:13,520 --> 00:42:17,680
currently we are discussing whether it

00:42:15,119 --> 00:42:19,359
is we can make it compatible and whether

00:42:17,680 --> 00:42:20,880
we should make it compatible

00:42:19,359 --> 00:42:22,720
so that's the discussion happening so

00:42:20,880 --> 00:42:25,599
please feel free to drop in

00:42:22,720 --> 00:42:26,079
so as i said uh there's already this

00:42:25,599 --> 00:42:28,400
happened

00:42:26,079 --> 00:42:31,839
which uh lead to saying this five

00:42:28,400 --> 00:42:31,839
section copyrights can be added

00:42:32,079 --> 00:42:37,680
the the maintainers are open to

00:42:35,119 --> 00:42:39,440
accepting contributions so we are set in

00:42:37,680 --> 00:42:42,400
terms of logistic requirements

00:42:39,440 --> 00:42:42,880
there are some suggestion of moving the

00:42:42,400 --> 00:42:46,000
spec

00:42:42,880 --> 00:42:47,119
to the euv org that's not yet agreed so

00:42:46,000 --> 00:42:50,160
i just wanted to

00:42:47,119 --> 00:42:53,760
bring up that topic now saying

00:42:50,160 --> 00:42:57,280
if uh we should do it or not

00:42:53,760 --> 00:43:00,240
uh any thoughts on that or

00:42:57,280 --> 00:43:02,240
maybe not if you or any other org or any

00:43:00,240 --> 00:43:05,119
other standard specification body where

00:43:02,240 --> 00:43:08,720
it should be moved

00:43:05,119 --> 00:43:08,720
any thoughts from the audience

00:43:09,680 --> 00:43:16,160
uh yeah i i'm a little um

00:43:13,680 --> 00:43:17,760
okay so so uefi has some very specific

00:43:16,160 --> 00:43:22,000
requirements on how

00:43:17,760 --> 00:43:24,800
um on how material can be added

00:43:22,000 --> 00:43:25,680
into specifications so one of the one of

00:43:24,800 --> 00:43:28,240
the

00:43:25,680 --> 00:43:29,599
issues that has been a big problem with

00:43:28,240 --> 00:43:32,800
uefi and acpi

00:43:29,599 --> 00:43:34,119
over the years is that

00:43:32,800 --> 00:43:36,880
when material is added to the

00:43:34,119 --> 00:43:37,200
specification until that specification

00:43:36,880 --> 00:43:39,920
is

00:43:37,200 --> 00:43:41,200
public there's not supposed to be any

00:43:39,920 --> 00:43:44,240
discussion by

00:43:41,200 --> 00:43:47,680
folks that are not uefi members

00:43:44,240 --> 00:43:50,640
the process is changing right um

00:43:47,680 --> 00:43:51,359
and and will it change enough to be

00:43:50,640 --> 00:43:52,800
determined

00:43:51,359 --> 00:43:54,640
um yeah i mean we kind of have the same

00:43:52,800 --> 00:43:56,560
problem with the risk five specs

00:43:54,640 --> 00:43:57,920
though right you have to be a risk five

00:43:56,560 --> 00:44:00,240
member so you

00:43:57,920 --> 00:44:02,000
you end up with this sort of big nest of

00:44:00,240 --> 00:44:04,480
memberships that raises the number of

00:44:02,000 --> 00:44:06,480
people who can actually say anything

00:44:04,480 --> 00:44:08,480
probably easier to contribute through

00:44:06,480 --> 00:44:12,400
risk five than it is through yuffie

00:44:08,480 --> 00:44:12,400
based on our experience with yuffie

00:44:13,200 --> 00:44:16,800
given that the new process was published

00:44:15,839 --> 00:44:19,280
last week

00:44:16,800 --> 00:44:21,040
uh your previous experience of that may

00:44:19,280 --> 00:44:24,560
not be applicable anymore

00:44:21,040 --> 00:44:25,359
right but but ebbr is not intended to be

00:44:24,560 --> 00:44:27,920
a uefi

00:44:25,359 --> 00:44:29,760
spec it is intended to be a rollup it's

00:44:27,920 --> 00:44:31,760
intended to be something that the os

00:44:29,760 --> 00:44:34,000
just can take and go look this is what

00:44:31,760 --> 00:44:36,000
we the interpretation

00:44:34,000 --> 00:44:38,480
that we require in order to provide

00:44:36,000 --> 00:44:41,599
support and it's for a very particular

00:44:38,480 --> 00:44:44,000
set of use cases not the entire uh

00:44:41,599 --> 00:44:46,000
ecosystem is dealing it's not trying to

00:44:44,000 --> 00:44:47,520
compete with the server platforms

00:44:46,000 --> 00:44:49,040
it's trying to deal with the the

00:44:47,520 --> 00:44:52,960
embedded systems

00:44:49,040 --> 00:44:54,400
so up it primarily focuses on uefi but

00:44:52,960 --> 00:44:56,160
it's not just uefi

00:44:54,400 --> 00:44:57,680
it actually covers a bunch of different

00:44:56,160 --> 00:44:59,119
things so it kind of rolls up

00:44:57,680 --> 00:45:01,119
these are the bare minimums in order to

00:44:59,119 --> 00:45:03,920
support uh os

00:45:01,119 --> 00:45:04,640
out of the box don't undo build custom

00:45:03,920 --> 00:45:07,440
stuff

00:45:04,640 --> 00:45:08,480
right so in terms of moving it to uefi

00:45:07,440 --> 00:45:09,920
there's probably not a whole lot of

00:45:08,480 --> 00:45:11,680
value there because it's more of an

00:45:09,920 --> 00:45:14,319
interpretation document

00:45:11,680 --> 00:45:14,880
um i have no function of actually moving

00:45:14,319 --> 00:45:17,200
it

00:45:14,880 --> 00:45:18,000
out of arm software anytime soon just

00:45:17,200 --> 00:45:20,400
because

00:45:18,000 --> 00:45:22,000
we're set up we've got an issue tracker

00:45:20,400 --> 00:45:25,040
it's it's got a home

00:45:22,000 --> 00:45:26,640
arm is happy to to be the host for that

00:45:25,040 --> 00:45:28,480
so until there's a real compelling

00:45:26,640 --> 00:45:31,040
reason to move that

00:45:28,480 --> 00:45:33,520
um that's that's where it's gonna stay

00:45:31,040 --> 00:45:37,280
um

00:45:33,520 --> 00:45:40,160
yeah thanks a lot yeah i mean obviously

00:45:37,280 --> 00:45:41,760
go ahead no no i'm just saying there are

00:45:40,160 --> 00:45:42,640
two sides of discussion so i just wanted

00:45:41,760 --> 00:45:46,000
to bring up and

00:45:42,640 --> 00:45:49,040
uh conclude on that so let's go

00:45:46,000 --> 00:45:50,960
yeah you can do go ahead

00:45:49,040 --> 00:45:52,800
yeah i mean obviously you know to the

00:45:50,960 --> 00:45:54,800
extent that it is supposed to be

00:45:52,800 --> 00:45:56,800
something that's cross-platform rather

00:45:54,800 --> 00:45:57,760
than arm specific it probably makes

00:45:56,800 --> 00:45:59,920
sense to

00:45:57,760 --> 00:46:02,560
not have it you know hosted at arm in

00:45:59,920 --> 00:46:02,560
the long run

00:46:09,680 --> 00:46:16,240
okay so

00:46:12,960 --> 00:46:19,920
it's keep starting node so moving to the

00:46:16,240 --> 00:46:22,400
next slide so regarding the technical

00:46:19,920 --> 00:46:23,520
uh requirements for risk five ebb r

00:46:22,400 --> 00:46:27,040
compliance

00:46:23,520 --> 00:46:28,000
uh uh recently uh the full ufi support

00:46:27,040 --> 00:46:30,319
for s5 linux

00:46:28,000 --> 00:46:32,319
is available in the mailing list i think

00:46:30,319 --> 00:46:33,200
it should be immersed by the next merge

00:46:32,319 --> 00:46:35,280
window

00:46:33,200 --> 00:46:36,240
upstream you boot already supports

00:46:35,280 --> 00:46:40,319
whatever the

00:46:36,240 --> 00:46:43,520
minimum efi required by the vbr edk2

00:46:40,319 --> 00:46:44,400
port is already in progress so that's

00:46:43,520 --> 00:46:47,920
the link that

00:46:44,400 --> 00:46:49,200
has all the how it is uh how it can be

00:46:47,920 --> 00:46:51,359
built

00:46:49,200 --> 00:46:52,720
and how you can use it we have tested on

00:46:51,359 --> 00:46:56,240
qmu and

00:46:52,720 --> 00:46:57,680
unleashed with all the uh ufi runtime

00:46:56,240 --> 00:47:00,880
services and everything

00:46:57,680 --> 00:47:03,359
so we are good to go accept uh this one

00:47:00,880 --> 00:47:05,839
uh boot service that was mandatory in

00:47:03,359 --> 00:47:08,079
the abbr which is the reset system

00:47:05,839 --> 00:47:09,119
so that's the only one that's not being

00:47:08,079 --> 00:47:12,400
supported in the

00:47:09,119 --> 00:47:14,640
risk file coming back to

00:47:12,400 --> 00:47:15,520
uh the other part of the technical

00:47:14,640 --> 00:47:17,680
requirement

00:47:15,520 --> 00:47:18,720
is the multi-process startup protocol

00:47:17,680 --> 00:47:20,880
which is already

00:47:18,720 --> 00:47:23,599
defined in forest five it's just that we

00:47:20,880 --> 00:47:26,000
are not documented anywhere so i guess

00:47:23,599 --> 00:47:27,839
uh ebb can be the first one to document

00:47:26,000 --> 00:47:30,960
or we'll just document it in

00:47:27,839 --> 00:47:32,400
platform spec and then refer ubbr to it

00:47:30,960 --> 00:47:34,880
or vice versa

00:47:32,400 --> 00:47:38,319
so the idea is to say that os should

00:47:34,880 --> 00:47:40,640
boot only in supervisor mode

00:47:38,319 --> 00:47:42,240
whenever the previous stage passes uh

00:47:40,640 --> 00:47:44,000
the control to the os

00:47:42,240 --> 00:47:46,160
the h0 should contain the heart id and

00:47:44,000 --> 00:47:49,359
a1 should contain the device tree

00:47:46,160 --> 00:47:51,280
uh we should mandate i think sp v02

00:47:49,359 --> 00:47:52,880
so that we don't have to implement the

00:47:51,280 --> 00:47:56,160
legacy things again

00:47:52,880 --> 00:47:58,000
and ordered booting by sba hsm extension

00:47:56,160 --> 00:48:00,480
that's what basically linux currently

00:47:58,000 --> 00:48:03,119
supports like the latest linux

00:48:00,480 --> 00:48:04,880
so we can just mandate that so that we

00:48:03,119 --> 00:48:08,079
don't have any baggage

00:48:04,880 --> 00:48:08,720
and for the efi to know what's the boot

00:48:08,079 --> 00:48:10,960
id

00:48:08,720 --> 00:48:12,240
if there is a device tree then the boot

00:48:10,960 --> 00:48:15,520
id property should be

00:48:12,240 --> 00:48:18,160
added under the chosen node

00:48:15,520 --> 00:48:19,839
and for the former storage uh

00:48:18,160 --> 00:48:21,760
requirement we are already input

00:48:19,839 --> 00:48:22,480
supports and etk 2 support is already

00:48:21,760 --> 00:48:24,079
progress

00:48:22,480 --> 00:48:26,079
so in terms of technical requirement we

00:48:24,079 --> 00:48:28,880
are already there except the

00:48:26,079 --> 00:48:29,520
its reset system that i want to focus on

00:48:28,880 --> 00:48:32,640
the

00:48:29,520 --> 00:48:32,640
next couple of slides

00:48:33,440 --> 00:48:38,400
so what exactly is missing is the reset

00:48:36,800 --> 00:48:40,480
system as in boot service

00:48:38,400 --> 00:48:42,160
but the it's not a during the runtime

00:48:40,480 --> 00:48:44,800
service so it's not about

00:48:42,160 --> 00:48:45,280
how your linux would actually reset so

00:48:44,800 --> 00:48:47,520
that's an

00:48:45,280 --> 00:48:48,880
optional so that we can deal with later

00:48:47,520 --> 00:48:52,240
but eventually

00:48:48,880 --> 00:48:55,200
anyways we need a standard reset system

00:48:52,240 --> 00:48:57,200
uh interface for risk 5 so currently the

00:48:55,200 --> 00:48:58,000
boot service is being used by graph

00:48:57,200 --> 00:49:01,040
pixel

00:48:58,000 --> 00:49:01,839
efi cell and open bsd the issue with the

00:49:01,040 --> 00:49:04,240
risk five

00:49:01,839 --> 00:49:04,880
is there is no standard reset system for

00:49:04,240 --> 00:49:08,079
s5

00:49:04,880 --> 00:49:10,800
either in privilege spec or in sba spec

00:49:08,079 --> 00:49:13,280
and there is no standard mmio devices

00:49:10,800 --> 00:49:16,079
for system reset across the architecture

00:49:13,280 --> 00:49:16,880
so the question is uh does it have to be

00:49:16,079 --> 00:49:20,160
mandatory

00:49:16,880 --> 00:49:21,119
or uh does it have to be uh can we make

00:49:20,160 --> 00:49:23,200
it optional

00:49:21,119 --> 00:49:25,520
so there was discussion in the mailing

00:49:23,200 --> 00:49:27,440
list which uh was specified that it

00:49:25,520 --> 00:49:30,880
should be mandatory because it's an

00:49:27,440 --> 00:49:34,000
integral part of the system

00:49:30,880 --> 00:49:34,960
but i just wanted to put up that

00:49:34,000 --> 00:49:39,280
question again

00:49:34,960 --> 00:49:39,280
in case uh there are other

00:49:40,880 --> 00:49:45,359
any thoughts on is can we make it

00:49:43,599 --> 00:49:48,400
optional is there any benefit of

00:49:45,359 --> 00:49:48,400
making mandatory

00:49:57,440 --> 00:50:01,359
okay well you know i mean i think the

00:50:00,319 --> 00:50:03,839
issue is like

00:50:01,359 --> 00:50:05,520
how because this is kind of where we got

00:50:03,839 --> 00:50:08,640
hung up on reset

00:50:05,520 --> 00:50:10,880
the other places like how how much do we

00:50:08,640 --> 00:50:13,440
have to specify that reset actually

00:50:10,880 --> 00:50:16,160
does stuff and how much do we care about

00:50:13,440 --> 00:50:18,000
existing platforms where uh

00:50:16,160 --> 00:50:20,800
it doesn't really work quite right i

00:50:18,000 --> 00:50:24,079
don't i don't think it's a big deal

00:50:20,800 --> 00:50:26,079
yeah so the problem is if we uh don't

00:50:24,079 --> 00:50:29,440
make it

00:50:26,079 --> 00:50:30,720
yeah if you don't uh make it uh standard

00:50:29,440 --> 00:50:33,440
these are the problems so the first

00:50:30,720 --> 00:50:35,280
solution is then platform and hypervisor

00:50:33,440 --> 00:50:36,960
go and implement their own specific

00:50:35,280 --> 00:50:39,200
mechanism then

00:50:36,960 --> 00:50:40,960
all hypervisors have to emulate their

00:50:39,200 --> 00:50:43,119
own mmo device or

00:50:40,960 --> 00:50:44,960
let's say define their own sbi call for

00:50:43,119 --> 00:50:45,520
system reset or whatever interface they

00:50:44,960 --> 00:50:48,720
use

00:50:45,520 --> 00:50:51,280
you boot has config sis reset which is

00:50:48,720 --> 00:50:53,040
already there but edk2 doesn't have so

00:50:51,280 --> 00:50:55,520
that also

00:50:53,040 --> 00:50:56,559
you have to implement it and which every

00:50:55,520 --> 00:50:59,520
platform has to

00:50:56,559 --> 00:51:01,119
override and even after all this effort

00:50:59,520 --> 00:51:02,880
if we don't have a standard uh method

00:51:01,119 --> 00:51:04,160
that actually goes to the secure monitor

00:51:02,880 --> 00:51:06,000
that runs in the mode

00:51:04,160 --> 00:51:07,599
there is no way to authenticate the

00:51:06,000 --> 00:51:10,319
system reset request

00:51:07,599 --> 00:51:13,359
from a non-secure os so these are the

00:51:10,319 --> 00:51:15,760
issues if we don't define a standard

00:51:13,359 --> 00:51:17,280
and the one solution that was proposed

00:51:15,760 --> 00:51:20,000
was

00:51:17,280 --> 00:51:21,200
define and standard through sbi call

00:51:20,000 --> 00:51:23,839
which would basically

00:51:21,200 --> 00:51:24,559
let you all hypervisor and supervisor

00:51:23,839 --> 00:51:27,520
can directly

00:51:24,559 --> 00:51:29,119
use it and then you can authenticate

00:51:27,520 --> 00:51:30,800
also by a secure monitor which should be

00:51:29,119 --> 00:51:33,359
running in the mode

00:51:30,800 --> 00:51:35,200
for any system reset request from

00:51:33,359 --> 00:51:38,000
non-secure os

00:51:35,200 --> 00:51:39,680
and uh the enus reset extension is

00:51:38,000 --> 00:51:42,559
optional so if the platform

00:51:39,680 --> 00:51:44,240
wants to broaden the scope let's say for

00:51:42,559 --> 00:51:46,079
now it's very easy to just

00:51:44,240 --> 00:51:47,920
reset the heart and then reset the

00:51:46,079 --> 00:51:51,200
registers and then

00:51:47,920 --> 00:51:52,480
reboot again if that's what uh the based

00:51:51,200 --> 00:51:54,319
on the

00:51:52,480 --> 00:51:55,760
whether it's a research shutdown that

00:51:54,319 --> 00:51:58,400
command but

00:51:55,760 --> 00:51:59,359
it's anyways platform specific uh sorry

00:51:58,400 --> 00:52:04,079
it's optional

00:51:59,359 --> 00:52:06,720
so um or do you want to say something

00:52:04,079 --> 00:52:07,440
yeah i'm struggling to understand why

00:52:06,720 --> 00:52:09,920
any of this

00:52:07,440 --> 00:52:13,119
is relevant in the context of adopting

00:52:09,920 --> 00:52:15,680
ebbr as a specification

00:52:13,119 --> 00:52:17,280
ebbr just specifies that reset system

00:52:15,680 --> 00:52:20,880
resets the system

00:52:17,280 --> 00:52:22,800
and apparently

00:52:20,880 --> 00:52:24,319
well the implementation is the job of

00:52:22,800 --> 00:52:25,920
the firmware and if there's no

00:52:24,319 --> 00:52:28,559
standardized way then

00:52:25,920 --> 00:52:30,000
for every platform the firmware has to

00:52:28,559 --> 00:52:31,119
invent its own way of resetting the

00:52:30,000 --> 00:52:32,559
system but

00:52:31,119 --> 00:52:34,000
the whole point of having this firmware

00:52:32,559 --> 00:52:34,960
layer and having this abstraction is

00:52:34,000 --> 00:52:37,760
that

00:52:34,960 --> 00:52:38,559
uh you can reason that about it at two

00:52:37,760 --> 00:52:40,319
levels

00:52:38,559 --> 00:52:42,240
so we all reason about it at the vr

00:52:40,319 --> 00:52:43,839
level when we say once we set a system

00:52:42,240 --> 00:52:47,200
and then someone who builds a system

00:52:43,839 --> 00:52:48,800
and doesn't have this sbi stuff to reset

00:52:47,200 --> 00:52:51,119
the system will

00:52:48,800 --> 00:52:52,559
have to invent its own way to back that

00:52:51,119 --> 00:52:56,000
particular

00:52:52,559 --> 00:52:59,119
boot time service but the fact that

00:52:56,000 --> 00:53:01,680
some platform may exist that has trouble

00:52:59,119 --> 00:53:03,520
implementing research system has has no

00:53:01,680 --> 00:53:07,920
bearing whatsoever on

00:53:03,520 --> 00:53:07,920
what the specification defines

00:53:08,400 --> 00:53:11,520
the so the idea was currently there is

00:53:10,960 --> 00:53:13,280
nothing

00:53:11,520 --> 00:53:15,280
uh in the platform it's a high five one

00:53:13,280 --> 00:53:16,480
list that allows reset so if we don't

00:53:15,280 --> 00:53:19,119
define interface

00:53:16,480 --> 00:53:20,800
it will be always incompatible with ebr

00:53:19,119 --> 00:53:24,000
because it doesn't have an

00:53:20,800 --> 00:53:25,760
reset interface so

00:53:24,000 --> 00:53:27,359
i mean we can add the respect to the

00:53:25,760 --> 00:53:29,040
spec but then the current platforms

00:53:27,359 --> 00:53:31,040
would be incompatible because

00:53:29,040 --> 00:53:32,880
it doesn't have a reset interface so

00:53:31,040 --> 00:53:34,720
actually we wanted to this

00:53:32,880 --> 00:53:36,480
but do those platforms have an efi

00:53:34,720 --> 00:53:40,000
implementation already

00:53:36,480 --> 00:53:41,599
yeah i it's basically

00:53:40,000 --> 00:53:43,119
then those who have to be fixed i mean

00:53:41,599 --> 00:53:43,839
then those will each will have to

00:53:43,119 --> 00:53:46,800
provide

00:53:43,839 --> 00:53:47,520
some implementation of reset system but

00:53:46,800 --> 00:53:49,599
how

00:53:47,520 --> 00:53:52,400
how it really works under the hood it's

00:53:49,599 --> 00:53:56,720
it's really a separate issue

00:53:52,400 --> 00:53:59,119
i mean the fact that in some cases uh

00:53:56,720 --> 00:54:01,280
it may be complicated to implement reset

00:53:59,119 --> 00:54:03,680
system doesn't mean we should make it

00:54:01,280 --> 00:54:07,440
optional or remove it from the

00:54:03,680 --> 00:54:10,400
specification to which the

00:54:07,440 --> 00:54:11,440
the os interfaces those are separate

00:54:10,400 --> 00:54:13,040
things

00:54:11,440 --> 00:54:14,800
okay so you're seeing going to be any

00:54:13,040 --> 00:54:17,920
way around having

00:54:14,800 --> 00:54:20,960
platform specific reset stuff in

00:54:17,920 --> 00:54:21,680
firmware it's just a platform specific

00:54:20,960 --> 00:54:23,599
thing

00:54:21,680 --> 00:54:24,800
yeah of course so in the implementation

00:54:23,599 --> 00:54:25,760
that that's whole point of the

00:54:24,800 --> 00:54:28,000
specification

00:54:25,760 --> 00:54:29,359
that's kind of the point yeah if there

00:54:28,000 --> 00:54:31,040
was a generic way to do it we wouldn't

00:54:29,359 --> 00:54:32,400
hide it behind this

00:54:31,040 --> 00:54:35,839
layer where you can implement it however

00:54:32,400 --> 00:54:35,839
you want right yeah so

00:54:36,400 --> 00:54:39,680
okay so then uh we can agree that we can

00:54:39,119 --> 00:54:41,520
add

00:54:39,680 --> 00:54:43,119
start adding the risk five section to

00:54:41,520 --> 00:54:45,920
the ebb aspect

00:54:43,119 --> 00:54:46,559
and make it compatible and as in when

00:54:45,920 --> 00:54:49,760
there is

00:54:46,559 --> 00:54:52,160
a solution for the reset then

00:54:49,760 --> 00:54:53,440
we can say that okay that platform is

00:54:52,160 --> 00:54:56,559
compatible with reset

00:54:53,440 --> 00:54:57,599
or sorry ebb aspect but uh in terms of

00:54:56,559 --> 00:54:59,040
adding to the spec

00:54:57,599 --> 00:55:01,359
it's not an issue in terms of

00:54:59,040 --> 00:55:04,160
implementing the actual reset

00:55:01,359 --> 00:55:05,280
up that the platform would take care of

00:55:04,160 --> 00:55:08,960
right

00:55:05,280 --> 00:55:12,000
okay yeah my worry with

00:55:08,960 --> 00:55:13,680
what we were doing in with sbi reset is

00:55:12,000 --> 00:55:15,920
really that it was just too mushy of a

00:55:13,680 --> 00:55:18,079
definition

00:55:15,920 --> 00:55:20,000
and you end up with like what does reset

00:55:18,079 --> 00:55:22,480
actually mean problems what can i rely

00:55:20,000 --> 00:55:23,920
on it to do but if it's another spec and

00:55:22,480 --> 00:55:27,359
the definition is good enough for

00:55:23,920 --> 00:55:29,440
those use cases then that seems fine

00:55:27,359 --> 00:55:30,480
yeah so what does other platforms do in

00:55:29,440 --> 00:55:32,720
terms of

00:55:30,480 --> 00:55:34,000
let's say in arm64 what does they do for

00:55:32,720 --> 00:55:37,359
let's say authenticating

00:55:34,000 --> 00:55:38,240
system or because i know arm64 has a pci

00:55:37,359 --> 00:55:41,359
so do they just

00:55:38,240 --> 00:55:42,160
learn the pci or do they define all the

00:55:41,359 --> 00:55:44,160
platforms

00:55:42,160 --> 00:55:49,839
also provide a hook for the platform

00:55:44,160 --> 00:55:49,839
specific things

00:55:54,559 --> 00:56:00,720
so my question was uh what does

00:55:57,599 --> 00:56:02,000
arm64 have they have pci for reset but

00:56:00,720 --> 00:56:03,760
in addition to that

00:56:02,000 --> 00:56:07,680
does all platform have a platform

00:56:03,760 --> 00:56:07,680
specific uh system reset way

00:56:09,280 --> 00:56:12,480
as far as i know like a lot of platforms

00:56:11,119 --> 00:56:12,960
actually have implemented the reset

00:56:12,480 --> 00:56:16,319
thing in

00:56:12,960 --> 00:56:18,079
etf and they provide it through the psci

00:56:16,319 --> 00:56:21,280
we said and all the hypervisors also

00:56:18,079 --> 00:56:21,280
include the reset call

00:56:22,640 --> 00:56:28,400
so then why actually yeah so it makes

00:56:26,319 --> 00:56:30,079
life easier for the ua5 compatible

00:56:28,400 --> 00:56:34,000
formula because now uh

00:56:30,079 --> 00:56:35,200
we can just run the ufi edk to our ufi

00:56:34,000 --> 00:56:37,760
compliant firmware

00:56:35,200 --> 00:56:39,119
which runs natively inside same one mod

00:56:37,760 --> 00:56:40,400
platform where it can run inside the

00:56:39,119 --> 00:56:43,040
guest or vm as well

00:56:40,400 --> 00:56:44,880
because finally the efi reset

00:56:43,040 --> 00:56:47,920
implementation in those firmwares we'll

00:56:44,880 --> 00:56:51,920
call the psci call

00:56:47,920 --> 00:56:51,920
if there is no other way to do it so

00:56:56,400 --> 00:57:00,480
then why we can't adopt the same

00:56:58,880 --> 00:57:03,520
approach and just

00:57:00,480 --> 00:57:05,839
go through sbi is it like

00:57:03,520 --> 00:57:07,440
as bomber said is it too mushy like the

00:57:05,839 --> 00:57:08,960
spec or

00:57:07,440 --> 00:57:10,720
yeah i don't think there's any reason we

00:57:08,960 --> 00:57:14,640
can't do it the question is really

00:57:10,720 --> 00:57:16,240
like what should sbi actually contain

00:57:14,640 --> 00:57:18,000
in terms of like how broad of a scope

00:57:16,240 --> 00:57:21,760
should it be and then

00:57:18,000 --> 00:57:24,960
can we write a definition of this that

00:57:21,760 --> 00:57:26,720
i as a user can rely upon to do

00:57:24,960 --> 00:57:28,240
something interesting last time we had a

00:57:26,720 --> 00:57:28,799
definition for reset i didn't think it

00:57:28,240 --> 00:57:31,520
was

00:57:28,799 --> 00:57:32,799
well enough to find that i would want to

00:57:31,520 --> 00:57:35,680
write that down and

00:57:32,799 --> 00:57:36,720
rely on you know people sticking to that

00:57:35,680 --> 00:57:39,920
that definition

00:57:36,720 --> 00:57:41,359
so you want the you mean though where

00:57:39,920 --> 00:57:43,599
does the scope end

00:57:41,359 --> 00:57:45,280
right like should we allow all the

00:57:43,599 --> 00:57:46,880
platform specific things

00:57:45,280 --> 00:57:50,400
yeah i mean i think to me there's really

00:57:46,880 --> 00:57:54,319
two different questions one of them is

00:57:50,400 --> 00:57:56,079
so you know we have sbi all right and

00:57:54,319 --> 00:57:57,760
sbi is kind of a risk five specific

00:57:56,079 --> 00:57:59,280
thing i'll turn my video on because i'm

00:57:57,760 --> 00:58:01,119
gonna be talking

00:57:59,280 --> 00:58:02,559
so sbi is sort of a risk high specific

00:58:01,119 --> 00:58:06,000
thing

00:58:02,559 --> 00:58:09,760
and things like reset

00:58:06,000 --> 00:58:12,880
are not as risk five specific

00:58:09,760 --> 00:58:13,680
as things like i don't know a tlb shoot

00:58:12,880 --> 00:58:17,280
down

00:58:13,680 --> 00:58:21,599
right so the question is like

00:58:17,280 --> 00:58:24,799
should we have these

00:58:21,599 --> 00:58:27,359
platform level things in sbi or should

00:58:24,799 --> 00:58:27,359
we just say

00:58:27,680 --> 00:58:33,280
these are part of the platform side

00:58:31,200 --> 00:58:36,480
specifications like efi or ebr

00:58:33,280 --> 00:58:38,559
or whatever that

00:58:36,480 --> 00:58:39,920
anyways have to go through sba because

00:58:38,559 --> 00:58:41,359
there is no other interface to

00:58:39,920 --> 00:58:44,319
talk to that then the thing we put in

00:58:41,359 --> 00:58:46,160
sbi is the mechanism for getting to efi

00:58:44,319 --> 00:58:48,559
which is a risk five specific thing

00:58:46,160 --> 00:58:50,160
because that you know that's

00:58:48,559 --> 00:58:53,520
registers and instructions and that sort

00:58:50,160 --> 00:58:56,400
of thing but we don't necessarily define

00:58:53,520 --> 00:58:57,119
what all of these efi calls do in sbi

00:58:56,400 --> 00:59:00,400
spec

00:58:57,119 --> 00:59:03,440
that's defined in efi land

00:59:00,400 --> 00:59:03,440
partitioning that thing up

00:59:03,760 --> 00:59:07,680
so you're saying we go ahead and add it

00:59:06,319 --> 00:59:09,760
in terms of sps pick

00:59:07,680 --> 00:59:11,520
not adding into a space pick and add

00:59:09,760 --> 00:59:13,920
into the eu face pick

00:59:11,520 --> 00:59:16,640
for reset well like just enough

00:59:13,920 --> 00:59:19,920
understanding that there already is

00:59:16,640 --> 00:59:22,720
a reset call in efi

00:59:19,920 --> 00:59:23,440
no so the efi is a efi call is reset

00:59:22,720 --> 00:59:25,920
system right

00:59:23,440 --> 00:59:26,880
so let's say linux calls it calls if i

00:59:25,920 --> 00:59:28,400
reset that's it

00:59:26,880 --> 00:59:30,799
but then somebody has to implement

00:59:28,400 --> 00:59:34,720
something like edk2 or ebook

00:59:30,799 --> 00:59:38,079
now apparently that's that that that is

00:59:34,720 --> 00:59:41,119
part of the platform a specific firmware

00:59:38,079 --> 00:59:42,960
chunk yes yes but

00:59:41,119 --> 00:59:45,359
that's what the question is if we go

00:59:42,960 --> 00:59:47,920
ahead and do platform specific things

00:59:45,359 --> 00:59:50,000
then we have to do go and do bunch of

00:59:47,920 --> 00:59:51,760
them for every platforms

00:59:50,000 --> 00:59:53,200
yeah but the firmware is going to be

00:59:51,760 --> 00:59:54,480
platform specific

00:59:53,200 --> 00:59:57,920
i don't think i don't think there's

00:59:54,480 --> 00:59:57,920
really a way around that

00:59:58,079 --> 01:00:04,720
i want to ask a thing yeah and

01:00:01,440 --> 01:00:08,400
uh i follow the bbl first

01:00:04,720 --> 01:00:11,599
and then open spare bomb out

01:00:08,400 --> 01:00:12,160
open sbi and now we use the u-boot plus

01:00:11,599 --> 01:00:15,520
to the

01:00:12,160 --> 01:00:16,880
osbi do you suggest me chant it to the

01:00:15,520 --> 01:00:20,480
uefi with the

01:00:16,880 --> 01:00:24,960
boot oh to include the eevr is the

01:00:20,480 --> 01:00:27,119
ebr is suitable for the embedded system

01:00:24,960 --> 01:00:28,079
so ebb is just a specification so you

01:00:27,119 --> 01:00:31,040
don't have to do anything

01:00:28,079 --> 01:00:32,000
extra for abbr it's just a standard of

01:00:31,040 --> 01:00:35,359
way to

01:00:32,000 --> 01:00:36,240
getting the distros putting distorts so

01:00:35,359 --> 01:00:38,000
as long as

01:00:36,240 --> 01:00:40,319
let's say you are booting busy box you

01:00:38,000 --> 01:00:41,680
don't need to do go to grab and then do

01:00:40,319 --> 01:00:43,920
efi boot or anything

01:00:41,680 --> 01:00:44,799
can you can happily boot busy box with

01:00:43,920 --> 01:00:48,400
uh or

01:00:44,799 --> 01:00:49,760
any small uh root fs with booty

01:00:48,400 --> 01:00:52,079
commanding ebook

01:00:49,760 --> 01:00:53,200
but if you want this tool the idea here

01:00:52,079 --> 01:00:55,599
is to

01:00:53,200 --> 01:00:58,000
uh let's say fedora rel already supports

01:00:55,599 --> 01:01:00,240
evpr and then if they want efe

01:00:58,000 --> 01:01:01,359
so they will provide a package which

01:01:00,240 --> 01:01:02,799
would be directly

01:01:01,359 --> 01:01:04,400
when you install on your sd card

01:01:02,799 --> 01:01:07,359
partition or some partition

01:01:04,400 --> 01:01:08,559
you'd be putting os like so without any

01:01:07,359 --> 01:01:11,280
hassle so we don't have

01:01:08,559 --> 01:01:13,280
currently they have to implement it the

01:01:11,280 --> 01:01:16,480
only reason

01:01:13,280 --> 01:01:19,200
risk 5 is not part of the fedora

01:01:16,480 --> 01:01:20,720
uh mainline builds because it is

01:01:19,200 --> 01:01:23,119
different from let's say all other

01:01:20,720 --> 01:01:25,200
architectures so we want to

01:01:23,119 --> 01:01:26,240
narrow that divide so that it follows

01:01:25,200 --> 01:01:30,880
the exact same

01:01:26,240 --> 01:01:34,079
if you flow for uh or risk five as well

01:01:30,880 --> 01:01:36,880
okay okay and i look i

01:01:34,079 --> 01:01:37,200
look i have a look at the linux tree and

01:01:36,880 --> 01:01:40,960
now

01:01:37,200 --> 01:01:40,960
there is only some sbi

01:01:41,040 --> 01:01:44,400
function id definition there and some

01:01:43,599 --> 01:01:47,839
extension

01:01:44,400 --> 01:01:51,200
sbi is part of the uefi

01:01:47,839 --> 01:01:54,240
all uefi should make some code

01:01:51,200 --> 01:01:56,160
to the next tree now

01:01:54,240 --> 01:01:57,680
i think ufa patches are in the mailing

01:01:56,160 --> 01:01:59,680
list so palmer just put it

01:01:57,680 --> 01:02:01,520
put them on the on next so it should be

01:01:59,680 --> 01:02:04,799
in 5.10

01:02:01,520 --> 01:02:07,119
window so i gotta tell about

01:02:04,799 --> 01:02:07,119
screwing

01:02:09,359 --> 01:02:14,559
okay so definitely the whole this file

01:02:12,880 --> 01:02:17,599
will change to the uefi and

01:02:14,559 --> 01:02:20,960
the always may be deprecated

01:02:17,599 --> 01:02:21,359
no no no sorry uh that's what like ufo

01:02:20,960 --> 01:02:24,720
is

01:02:21,359 --> 01:02:25,200
a option to boot it's not the option to

01:02:24,720 --> 01:02:27,599
boot

01:02:25,200 --> 01:02:28,319
if you so it's for the distros so if the

01:02:27,599 --> 01:02:30,640
distro's

01:02:28,319 --> 01:02:31,359
like if you you can always go and boot

01:02:30,640 --> 01:02:34,000
using efi

01:02:31,359 --> 01:02:35,440
but you don't have to unless you're

01:02:34,000 --> 01:02:37,920
booting a distro

01:02:35,440 --> 01:02:39,680
so that's the thing so it is another

01:02:37,920 --> 01:02:40,799
option that's provided which is easier

01:02:39,680 --> 01:02:44,960
for digital to

01:02:40,799 --> 01:02:44,960
support risk file okay

01:02:45,520 --> 01:02:48,960
another another question is about the

01:02:47,920 --> 01:02:52,640
obs by

01:02:48,960 --> 01:02:55,520
in the github project

01:02:52,640 --> 01:02:56,559
will be maintained continuously in

01:02:55,520 --> 01:02:59,280
future

01:02:56,559 --> 01:02:59,920
yes okay it will be it will be

01:02:59,280 --> 01:03:03,920
maintained

01:02:59,920 --> 01:03:06,319
at least as long as we are there so

01:03:03,920 --> 01:03:07,200
if there is a apocalypse thank you i

01:03:06,319 --> 01:03:10,160
think that's that

01:03:07,200 --> 01:03:12,240
i can't yeah how do we use it and we use

01:03:10,160 --> 01:03:12,240
this

01:03:14,720 --> 01:03:18,880
features will be new features should be

01:03:16,079 --> 01:03:19,599
added so yeah don't have to worry maybe

01:03:18,880 --> 01:03:21,520
we

01:03:19,599 --> 01:03:22,880
would change it to you if i put button

01:03:21,520 --> 01:03:25,839
but uh as we want

01:03:22,880 --> 01:03:26,480
yeah yeah it depends on what not just

01:03:25,839 --> 01:03:29,680
one

01:03:26,480 --> 01:03:30,160
yeah okay okay okay i think i'm also out

01:03:29,680 --> 01:03:32,960
of time

01:03:30,160 --> 01:03:34,880
so your schedule for the next talk so

01:03:32,960 --> 01:03:36,880
i'll just switch the slides

01:03:34,880 --> 01:03:38,720
uh thank you everybody got any attending

01:03:36,880 --> 01:03:39,920
and all the comments it is really

01:03:38,720 --> 01:03:45,839
helpful

01:03:39,920 --> 01:03:45,839
i'll switch the slides

01:03:46,400 --> 01:03:51,920
oh sorry selected the wrong one

01:03:54,559 --> 01:03:58,240
okay i think i'll just make you

01:03:57,200 --> 01:04:03,839
presenter

01:03:58,240 --> 01:04:03,839
and yeah let me control it here

01:04:04,400 --> 01:04:07,760
you should be presented now okay yeah

01:04:07,119 --> 01:04:10,880
yeah yeah

01:04:07,760 --> 01:04:14,319
okay you can see i move the mouse here

01:04:10,880 --> 01:04:17,599
okay okay i'll shut up

01:04:14,319 --> 01:04:20,480
let's start yeah and and hi

01:04:17,599 --> 01:04:22,000
everyone my name is gordon and you can

01:04:20,480 --> 01:04:24,160
call me gary here

01:04:22,000 --> 01:04:26,079
and i'm from alibaba t-head yeah

01:04:24,160 --> 01:04:29,760
yesterday i have talked about the

01:04:26,079 --> 01:04:32,880
keep trump optimized today

01:04:29,760 --> 01:04:35,839
and today

01:04:32,880 --> 01:04:36,559
i have talked a lot yesterday so i just

01:04:35,839 --> 01:04:40,319
supported

01:04:36,559 --> 01:04:43,920
the most important thing at first and uh

01:04:40,319 --> 01:04:48,000
i'm i'm working uh with the

01:04:43,920 --> 01:04:50,880
rigspike ku probe implementation and uh

01:04:48,000 --> 01:04:51,440
and a lot and it will could work around

01:04:50,880 --> 01:04:54,480
and the

01:04:51,440 --> 01:04:57,440
ku probe could be used

01:04:54,480 --> 01:04:57,920
almost a dumb but i made some puzzle and

01:04:57,440 --> 01:05:01,039
i

01:04:57,920 --> 01:05:04,400
needed to put it here to let us

01:05:01,039 --> 01:05:08,240
give the give me the decision or how

01:05:04,400 --> 01:05:11,520
how we deal with it next

01:05:08,240 --> 01:05:14,640
uh that that that that's the base

01:05:11,520 --> 01:05:18,880
uh uh before i

01:05:14,640 --> 01:05:22,079
send the next working out patch yeah

01:05:18,880 --> 01:05:26,000
uh okay uh let's begin with the key

01:05:22,079 --> 01:05:28,960
probe on f3s yeah uh f3's mechanism is

01:05:26,000 --> 01:05:30,319
made by the allen uh maybe two years old

01:05:28,960 --> 01:05:33,920
one years ago

01:05:30,319 --> 01:05:37,920
and uh and he has a youtube video but

01:05:33,920 --> 01:05:41,520
in chinese yeah but you can get it yeah

01:05:37,920 --> 01:05:44,880
and uh here is the the here this is the

01:05:41,520 --> 01:05:47,520
current our fps implementation yeah

01:05:44,880 --> 01:05:48,079
and it used the m core m count that's

01:05:47,520 --> 01:05:51,200
the

01:05:48,079 --> 01:05:54,319
from the gcc with the slash

01:05:51,200 --> 01:05:58,559
pg yeah and it will will

01:05:54,319 --> 01:06:01,839
insert a call call site

01:05:58,559 --> 01:06:06,960
in your prologue of the function

01:06:01,839 --> 01:06:10,640
yeah that and and uh it's not very

01:06:06,960 --> 01:06:14,480
good enough i think because another best

01:06:10,640 --> 01:06:17,839
way better way is mentioned by masamiya

01:06:14,480 --> 01:06:21,039
and he told us he could use the patchbow

01:06:17,839 --> 01:06:25,280
function entry in f3s and

01:06:21,039 --> 01:06:28,880
then we will let the uh keep pro

01:06:25,280 --> 01:06:31,039
let the f3s point

01:06:28,880 --> 01:06:33,039
cause i'd at the beginning of the

01:06:31,039 --> 01:06:37,200
function that means the

01:06:33,039 --> 01:06:37,200
this will put a lot of knob

01:06:37,760 --> 01:06:42,240
before the prologue of the function that

01:06:40,079 --> 01:06:45,359
that means it will affect

01:06:42,240 --> 01:06:48,960
uh function generation it's

01:06:45,359 --> 01:06:51,839
i was let's have a look at it

01:06:48,960 --> 01:06:52,799
uh here is the current implementation

01:06:51,839 --> 01:06:56,480
from

01:06:52,799 --> 01:07:00,319
allen and you can see

01:06:56,480 --> 01:07:03,920
one the gcc compiler with this

01:07:00,319 --> 01:07:07,280
option it will generate this code and

01:07:03,920 --> 01:07:10,640
and and it's used to uh

01:07:07,280 --> 01:07:14,079
instructions to jump yeah a ui pc and

01:07:10,640 --> 01:07:14,079
jri it's the very

01:07:14,799 --> 01:07:23,039
used in the x5 code here and

01:07:19,200 --> 01:07:26,960
and when the linux put up

01:07:23,039 --> 01:07:30,160
while compiler when compiling linux and

01:07:26,960 --> 01:07:33,280
the linux will call script uh

01:07:30,160 --> 01:07:36,400
uh record pl and

01:07:33,280 --> 01:07:36,400
they will change

01:07:36,559 --> 01:07:42,640
this code to the knob yeah no no sorry

01:07:40,319 --> 01:07:44,240
they will record this this course site

01:07:42,640 --> 01:07:47,359
that it will record this

01:07:44,240 --> 01:07:50,240
call side address in the symbol

01:07:47,359 --> 01:07:50,640
in in the symbol and then when the linux

01:07:50,240 --> 01:07:54,720
is put

01:07:50,640 --> 01:07:57,599
up and it will it will change

01:07:54,720 --> 01:07:59,119
them to the knob yeah and when you

01:07:57,599 --> 01:08:01,839
enable this function

01:07:59,119 --> 01:08:02,640
such as such as this function you just

01:08:01,839 --> 01:08:05,920
enable

01:08:02,640 --> 01:08:10,000
uh put it back and then that

01:08:05,920 --> 01:08:12,640
is the f3 data digital mechanism yeah

01:08:10,000 --> 01:08:13,280
and then traveling to at the after

01:08:12,640 --> 01:08:16,880
school

01:08:13,280 --> 01:08:20,159
yeah but it's not the

01:08:16,880 --> 01:08:23,600
only two instructions this information

01:08:20,159 --> 01:08:26,640
related to the frame point

01:08:23,600 --> 01:08:29,920
that means this implementation look here

01:08:26,640 --> 01:08:30,560
uh aoi pc will destroy the written

01:08:29,920 --> 01:08:33,040
address

01:08:30,560 --> 01:08:33,679
and then you should push the route

01:08:33,040 --> 01:08:37,520
address

01:08:33,679 --> 01:08:40,960
in in the same place and then so

01:08:37,520 --> 01:08:44,960
this instruction so the the current f3s

01:08:40,960 --> 01:08:48,560
data make it mechanism depends on

01:08:44,960 --> 01:08:52,560
imp implying mechanism frame point

01:08:48,560 --> 01:08:52,880
mechanism so it's currently it's current

01:08:52,560 --> 01:08:56,719
uh

01:08:52,880 --> 01:09:00,319
implementation and uh if

01:08:56,719 --> 01:09:03,359
if we use the fpat function entry

01:09:00,319 --> 01:09:05,679
uh now here is the solution one yeah

01:09:03,359 --> 01:09:07,040
if we use the f trace function entry we

01:09:05,679 --> 01:09:10,880
will we could

01:09:07,040 --> 01:09:14,000
put a lot stop before the

01:09:10,880 --> 01:09:18,319
function and we will got a space

01:09:14,000 --> 01:09:21,920
to put our call side and we can

01:09:18,319 --> 01:09:25,520
use this place to detail anywhere

01:09:21,920 --> 01:09:25,520
and we don't

01:09:27,040 --> 01:09:31,359
worry about it will replace some replace

01:09:30,319 --> 01:09:34,719
some instructions

01:09:31,359 --> 01:09:37,839
so no need to uh simulate it

01:09:34,719 --> 01:09:41,679
if so so and uh

01:09:37,839 --> 01:09:44,080
and so kpop uh utilize this if

01:09:41,679 --> 01:09:46,719
k pro point is at the beginning of the

01:09:44,080 --> 01:09:50,000
function it will utilize the f3's

01:09:46,719 --> 01:09:50,319
data mechanism f3 is the whole mechanism

01:09:50,000 --> 01:09:53,040
and

01:09:50,319 --> 01:09:54,800
the k-pop just a call back hook in the

01:09:53,040 --> 01:09:58,159
f3s yeah

01:09:54,800 --> 01:10:02,400
that is the key problem this feature

01:09:58,159 --> 01:10:06,400
is and and let's focus on the

01:10:02,400 --> 01:10:10,800
f3s data mechanism yeah solution one

01:10:06,400 --> 01:10:13,840
uh how how how we detail in this way

01:10:10,800 --> 01:10:14,560
first we should save our return address

01:10:13,840 --> 01:10:17,120
first

01:10:14,560 --> 01:10:17,679
because we were destroyed and then we

01:10:17,120 --> 01:10:20,800
will

01:10:17,679 --> 01:10:21,440
jump to another place and then when we

01:10:20,800 --> 01:10:24,719
back

01:10:21,440 --> 01:10:28,840
we shall pop up return address and

01:10:24,719 --> 01:10:31,679
then continue the uh in

01:10:28,840 --> 01:10:34,719
our uh our function

01:10:31,679 --> 01:10:38,800
yeah that is the solution one

01:10:34,719 --> 01:10:42,159
and the solution two yeah

01:10:38,800 --> 01:10:42,960
this solution is have a problem so many

01:10:42,159 --> 01:10:46,719
code

01:10:42,960 --> 01:10:50,640
there and and you know

01:10:46,719 --> 01:10:53,760
the arm style or x86

01:10:50,640 --> 01:10:57,040
or power pc are much

01:10:53,760 --> 01:11:00,400
much better than it's much small

01:10:57,040 --> 01:11:01,040
little instructions affected but here is

01:11:00,400 --> 01:11:03,360
so much

01:11:01,040 --> 01:11:04,800
instructions there here i don't think

01:11:03,360 --> 01:11:08,400
it's a good solution

01:11:04,800 --> 01:11:12,560
so i i i give out

01:11:08,400 --> 01:11:15,840
machine tool but the solution to is uh

01:11:12,560 --> 01:11:19,280
you it's just three instructions yeah

01:11:15,840 --> 01:11:22,760
uh first we we see

01:11:19,280 --> 01:11:24,400
it's it's from uh it's similar to the

01:11:22,760 --> 01:11:27,920
arm64

01:11:24,400 --> 01:11:31,280
first we should use the general register

01:11:27,920 --> 01:11:34,480
to collaborate and uh

01:11:31,280 --> 01:11:38,719
and this register should be reserved

01:11:34,480 --> 01:11:42,239
uh reserved and cannot be used

01:11:38,719 --> 01:11:46,400
just for the uh

01:11:42,239 --> 01:11:50,800
uh trampling uh this kind of things yeah

01:11:46,400 --> 01:11:54,080
so we can use this register to save the

01:11:50,800 --> 01:11:57,120
return address and then we use the aui

01:11:54,080 --> 01:12:00,480
pc and the jump to the f3's caller

01:11:57,120 --> 01:12:03,360
and in the f3 scroller we could use the

01:12:00,480 --> 01:12:03,360
this register

01:12:04,800 --> 01:12:07,920
to get the written address yeah that is

01:12:07,520 --> 01:12:10,960
and

01:12:07,920 --> 01:12:12,800
so it's much more clean clear and this

01:12:10,960 --> 01:12:14,640
is solution too but the solution to

01:12:12,800 --> 01:12:18,560
could not be implemented

01:12:14,640 --> 01:12:21,679
in current risk five year erf api

01:12:18,560 --> 01:12:25,360
so here is my puzzle so

01:12:21,679 --> 01:12:28,880
how can i how should i

01:12:25,360 --> 01:12:32,239
implement this mechanism yeah

01:12:28,880 --> 01:12:36,960
solution one or solution two and i

01:12:32,239 --> 01:12:39,520
i by maintainer should give me some

01:12:36,960 --> 01:12:42,960
advice

01:12:39,520 --> 01:12:43,840
if we chose solution 2 we should need to

01:12:42,960 --> 01:12:48,000
modify the

01:12:43,840 --> 01:12:51,320
erf api first of the risk file

01:12:48,000 --> 01:12:54,640
anybody anybody

01:12:51,320 --> 01:12:54,640
suggesting here

01:12:55,840 --> 01:12:59,520
i have a pattern of attention i was

01:12:57,360 --> 01:13:02,960
looking at the chat

01:12:59,520 --> 01:13:05,920
thank you palmer and

01:13:02,960 --> 01:13:08,000
can we modify the avi now you're talking

01:13:05,920 --> 01:13:11,600
about the piece aba right i mean we can

01:13:08,000 --> 01:13:11,600
extend the abi

01:13:12,080 --> 01:13:18,239
and then also like this is in kernel

01:13:15,520 --> 01:13:19,040
abi which would not necessarily need to

01:13:18,239 --> 01:13:22,320
be the same

01:13:19,040 --> 01:13:25,840
as you know like

01:13:22,320 --> 01:13:27,120
user shared library api or you can you

01:13:25,840 --> 01:13:29,360
can

01:13:27,120 --> 01:13:30,159
like kernel api is not stable so but i

01:13:29,360 --> 01:13:33,760
mean it's

01:13:30,159 --> 01:13:36,640
it it's probably not

01:13:33,760 --> 01:13:38,159
the way to go just because uh it would

01:13:36,640 --> 01:13:40,880
be a lot of

01:13:38,159 --> 01:13:42,239
complexity for something where i'm not

01:13:40,880 --> 01:13:44,840
really convinced that

01:13:42,239 --> 01:13:47,520
the performance is tremendously

01:13:44,840 --> 01:13:50,960
important

01:13:47,520 --> 01:13:51,440
i and this this data mechanism also

01:13:50,960 --> 01:13:53,920
affect

01:13:51,440 --> 01:13:55,360
the key problem optimization jump

01:13:53,920 --> 01:13:58,000
optimization if we

01:13:55,360 --> 01:13:58,719
couldn't deal with it correctly we also

01:13:58,000 --> 01:14:02,719
could not

01:13:58,719 --> 01:14:05,679
get could not implement the key proper

01:14:02,719 --> 01:14:06,480
jump optimization correctly so they are

01:14:05,679 --> 01:14:10,320
they're related

01:14:06,480 --> 01:14:11,600
we will find the the key question is we

01:14:10,320 --> 01:14:15,760
should find a way

01:14:11,600 --> 01:14:19,679
how to detail our per our extraction

01:14:15,760 --> 01:14:22,960
flow yeah and uh

01:14:19,679 --> 01:14:25,920
and the the key question is

01:14:22,960 --> 01:14:27,199
we don't have a very large range branch

01:14:25,920 --> 01:14:31,440
instruction

01:14:27,199 --> 01:14:35,320
x86 have two gigabytes five byte

01:14:31,440 --> 01:14:38,880
instructions and the um

01:14:35,320 --> 01:14:43,520
64 have

01:14:38,880 --> 01:14:47,199
six two six uh 26 bit wide

01:14:43,520 --> 01:14:51,679
instruction bl and it's it could

01:14:47,199 --> 01:14:55,360
jump to jump forward 128

01:14:51,679 --> 01:14:59,280
megabytes on the back and the

01:14:55,360 --> 01:15:02,960
and the risk five uh only 16

01:14:59,280 --> 01:15:06,480
16 bits wide it's very small so

01:15:02,960 --> 01:15:10,400
we need to use aol pc we use

01:15:06,480 --> 01:15:13,760
a ui pc we will use an and

01:15:10,400 --> 01:15:16,800
we will cause the register and then we

01:15:13,760 --> 01:15:20,560
we cut the register we will

01:15:16,800 --> 01:15:24,000
get uh some push and pop or we

01:15:20,560 --> 01:15:27,120
call the reserve origin uh

01:15:24,000 --> 01:15:30,320
it's not uh

01:15:27,120 --> 01:15:30,320
i um

01:15:30,640 --> 01:15:36,080
um i really want a

01:15:33,920 --> 01:15:37,199
large range of branch instruction in the

01:15:36,080 --> 01:15:40,560
rx5

01:15:37,199 --> 01:15:43,600
yeah but how yeah it'll be great

01:15:40,560 --> 01:15:47,520
to have but it doesn't fit

01:15:43,600 --> 01:15:50,560
so we and we need a key problem yeah

01:15:47,520 --> 01:15:53,199
we we need a good implementation of

01:15:50,560 --> 01:15:53,920
f3s we need a good implementation of the

01:15:53,199 --> 01:15:56,880
k-power

01:15:53,920 --> 01:15:57,920
optimization because when we kill a lot

01:15:56,880 --> 01:16:01,199
a lot of

01:15:57,920 --> 01:16:04,560
uh a guy i have mentioned in yesterday

01:16:01,199 --> 01:16:08,480
presentation that's the complaint of the

01:16:04,560 --> 01:16:11,360
k-prop cost because true exception is

01:16:08,480 --> 01:16:12,719
too expensive exception is too expensive

01:16:11,360 --> 01:16:15,760
we need a branch

01:16:12,719 --> 01:16:19,199
and the branch where the determinant can

01:16:15,760 --> 01:16:22,960
is very good performance and that will

01:16:19,199 --> 01:16:24,960
make the uh instrument

01:16:22,960 --> 01:16:28,560
uh measurement sorry the time

01:16:24,960 --> 01:16:31,600
measurement some performance measurement

01:16:28,560 --> 01:16:34,880
more correct so

01:16:31,600 --> 01:16:36,480
does this mean that x9 is now reserved

01:16:34,880 --> 01:16:38,560
so you kind of like have one less

01:16:36,480 --> 01:16:42,080
register

01:16:38,560 --> 01:16:45,440
yeah yeah i recommend the solution

01:16:42,080 --> 01:16:48,960
yeah but it's to modify uh

01:16:45,440 --> 01:16:51,040
yeah you can't uk pro at like arbitrary

01:16:48,960 --> 01:16:54,159
instructions

01:16:51,040 --> 01:16:54,159
all right uh okay

01:16:54,719 --> 01:16:58,719
right sorry this is f trace stuff so i

01:16:56,560 --> 01:16:59,679
have trace only exists for defined call

01:16:58,719 --> 01:17:03,840
points

01:16:59,679 --> 01:17:03,840
right okay

01:17:05,280 --> 01:17:09,280
yeah okay yeah of course the third f

01:17:08,320 --> 01:17:12,480
trace is a

01:17:09,280 --> 01:17:16,159
function tracer so that are uh

01:17:12,480 --> 01:17:20,080
yeah you you only can uh put uh

01:17:16,159 --> 01:17:21,520
under uh let's say yeah

01:17:20,080 --> 01:17:24,000
try to hold more than one conversation

01:17:21,520 --> 01:17:28,080
at once but if if s trace is only for

01:17:24,000 --> 01:17:29,920
defined call points um

01:17:28,080 --> 01:17:31,360
then yeah we can just because the call

01:17:29,920 --> 01:17:32,320
points already trash the temporary

01:17:31,360 --> 01:17:34,719
registers

01:17:32,320 --> 01:17:35,679
so just use the temporary register for

01:17:34,719 --> 01:17:38,400
your scratch stuff

01:17:35,679 --> 01:17:38,400
and then it's fine

01:17:41,280 --> 01:17:48,400
yeah that's useful good but

01:17:44,400 --> 01:17:51,600
uh in that case you cannot uh trace uh

01:17:48,400 --> 01:17:56,239
their uh the temporary registers

01:17:51,600 --> 01:17:58,560
yeah it will not matter

01:17:56,239 --> 01:18:01,360
maybe yeah because those are those are

01:17:58,560 --> 01:18:04,719
uh yeah those resistors will not

01:18:01,360 --> 01:18:08,080
uh be used uh until uh yeah

01:18:04,719 --> 01:18:11,600
sorry inside uh in that form because the

01:18:08,080 --> 01:18:14,159
function can't rely on anything

01:18:11,600 --> 01:18:15,920
about those temporary registers so there

01:18:14,159 --> 01:18:19,679
can't be any stuff in there

01:18:15,920 --> 01:18:21,040
and the caller has to assume that they

01:18:19,679 --> 01:18:23,440
get trashed

01:18:21,040 --> 01:18:24,080
um so i i don't think there'll be

01:18:23,440 --> 01:18:27,199
anything

01:18:24,080 --> 01:18:30,960
in those that's noticeable

01:18:27,199 --> 01:18:33,520
if that kind of makes sense yeah uh

01:18:30,960 --> 01:18:34,640
the problem is uh actually that the

01:18:33,520 --> 01:18:38,080
k-probes

01:18:34,640 --> 01:18:41,360
it's uh let's say normal cable

01:18:38,080 --> 01:18:44,719
uh based on their um the

01:18:41,360 --> 01:18:49,120
break uh instruction so that it can

01:18:44,719 --> 01:18:52,000
uh saves all uh registers

01:18:49,120 --> 01:18:53,280
at that point uh yeah i agree i agree

01:18:52,000 --> 01:18:55,840
that doesn't work for k

01:18:53,280 --> 01:18:57,760
you know because yeah yeah arbitrary the

01:18:55,840 --> 01:19:01,760
problem is that the user cannot

01:18:57,760 --> 01:19:05,040
choose uh to use that the optimize probe

01:19:01,760 --> 01:19:07,120
or f-rate or normal k-probes

01:19:05,040 --> 01:19:08,159
in that case that the user has to

01:19:07,120 --> 01:19:11,440
prepare

01:19:08,159 --> 01:19:12,560
the uh their handler so that's all the

01:19:11,440 --> 01:19:15,920
function

01:19:12,560 --> 01:19:19,199
uh yeah you know

01:19:15,920 --> 01:19:23,120
they cannot change the their user

01:19:19,199 --> 01:19:26,960
functions using hundreds of the k-probes

01:19:23,120 --> 01:19:31,040
uh event yeah it means that

01:19:26,960 --> 01:19:34,159
if we we change uh the behavior

01:19:31,040 --> 01:19:38,000
uh based on our uh the like uh

01:19:34,159 --> 01:19:41,600
phrase the result will not

01:19:38,000 --> 01:19:44,640
uh much i say

01:19:41,600 --> 01:19:51,280
uh will be or different but

01:19:44,640 --> 01:19:52,800
we can use i cannot counter it

01:19:51,280 --> 01:19:55,120
yeah i guess maybe i'm kind of

01:19:52,800 --> 01:19:57,679
misunderstanding the problem then

01:19:55,120 --> 01:19:58,480
yeah palmer and you you are the

01:19:57,679 --> 01:20:02,080
maintainer of

01:19:58,480 --> 01:20:02,480
specific you must mix of this mechanism

01:20:02,080 --> 01:20:05,520
and

01:20:02,480 --> 01:20:06,320
make the decision because that's that's

01:20:05,520 --> 01:20:09,760
where i affect

01:20:06,320 --> 01:20:12,639
my next version how to work the patch

01:20:09,760 --> 01:20:13,199
yeah the pattern yeah yeah i will go

01:20:12,639 --> 01:20:16,239
look

01:20:13,199 --> 01:20:17,120
closer yeah yeah but i think at least to

01:20:16,239 --> 01:20:19,520
start

01:20:17,120 --> 01:20:21,199
uh just picking the version that does

01:20:19,520 --> 01:20:24,239
not require

01:20:21,199 --> 01:20:27,920
compiler changes is the way to go yeah

01:20:24,239 --> 01:20:28,639
okay let's vote let's have a water let's

01:20:27,920 --> 01:20:33,840
see

01:20:28,639 --> 01:20:33,840
the audience chose

01:20:34,800 --> 01:20:38,159
it might not be relevant but it keeps

01:20:36,560 --> 01:20:38,560
occurring to me this big block of knobs

01:20:38,159 --> 01:20:40,480
should

01:20:38,560 --> 01:20:41,920
could perhaps be replaced by a single

01:20:40,480 --> 01:20:44,639
knob and the the

01:20:41,920 --> 01:20:46,560
one substitute instruction you replace

01:20:44,639 --> 01:20:49,199
is a short backwards jump

01:20:46,560 --> 01:20:50,719
to whatever little uh trampoline you

01:20:49,199 --> 01:20:52,159
want doing whatever you like that has no

01:20:50,719 --> 01:20:55,040
impact on the function

01:20:52,159 --> 01:20:56,400
um not even is a sequence of knobs when

01:20:55,040 --> 01:20:58,560
it when it's not tracing

01:20:56,400 --> 01:20:59,440
yeah i was gonna mention something

01:20:58,560 --> 01:21:02,480
similar is

01:20:59,440 --> 01:21:05,040
like we have some fixed registers um

01:21:02,480 --> 01:21:06,800
so we could you could jump you can jump

01:21:05,040 --> 01:21:09,199
off any register right so we could

01:21:06,800 --> 01:21:10,080
we could easily store the relevant

01:21:09,199 --> 01:21:12,080
trampoline

01:21:10,080 --> 01:21:13,679
over there well you you could also jump

01:21:12,080 --> 01:21:14,000
backwards into a few instructions just

01:21:13,679 --> 01:21:15,600
before

01:21:14,000 --> 01:21:17,280
the start of the function which will

01:21:15,600 --> 01:21:18,880
have like negligible performance effect

01:21:17,280 --> 01:21:22,080
you just take a little space yeah

01:21:18,880 --> 01:21:25,360
yeah we need some way to

01:21:22,080 --> 01:21:27,280
distribute those um

01:21:25,360 --> 01:21:29,120
but yeah that would be a viable solution

01:21:27,280 --> 01:21:32,239
as well right and we have

01:21:29,120 --> 01:21:35,520
similar problems with some of our

01:21:32,239 --> 01:21:36,719
you know kind of sparse sparse memory

01:21:35,520 --> 01:21:38,480
embedded systems where you want to

01:21:36,719 --> 01:21:40,960
program the whole thing

01:21:38,480 --> 01:21:42,880
we're figuring out how to distribute

01:21:40,960 --> 01:21:45,360
these tables of

01:21:42,880 --> 01:21:48,159
trampolines or you know uh constant

01:21:45,360 --> 01:21:49,600
constant pools or whatever um

01:21:48,159 --> 01:21:51,679
doesn't mean i'm not convinced you could

01:21:49,600 --> 01:21:54,400
do that without some compiler work

01:21:51,679 --> 01:21:55,679
but it certainly would be a way to do it

01:21:54,400 --> 01:21:58,960
um

01:21:55,679 --> 01:22:01,679
jeremy i concluding you your advice

01:21:58,960 --> 01:22:03,360
uh is that you will you need to prepare

01:22:01,679 --> 01:22:06,560
a digital buffer

01:22:03,360 --> 01:22:09,840
uh around this this area and

01:22:06,560 --> 01:22:12,080
use the small branch there and at the

01:22:09,840 --> 01:22:12,080
end

01:22:13,360 --> 01:22:16,480
yeah that's the idea i mean it could be

01:22:15,120 --> 01:22:17,920
little it doesn't mean

01:22:16,480 --> 01:22:19,920
they are as long as they're within a

01:22:17,920 --> 01:22:20,960
short branch range yeah i mean basically

01:22:19,920 --> 01:22:24,000
just put your

01:22:20,960 --> 01:22:26,400
put put your no up no up buffer

01:22:24,000 --> 01:22:27,760
out of line rather than inline all right

01:22:26,400 --> 01:22:29,440
yeah

01:22:27,760 --> 01:22:31,360
and if you put it before the function

01:22:29,440 --> 01:22:33,360
yeah it never yeah maybe it needs some

01:22:31,360 --> 01:22:37,280
cash or whatever

01:22:33,360 --> 01:22:41,280
but it never really gets used and uh

01:22:37,280 --> 01:22:44,400
some of our other code models uh

01:22:41,280 --> 01:22:46,719
may end up with mechanisms to distribute

01:22:44,400 --> 01:22:46,719
these

01:22:47,760 --> 01:22:52,000
reachable regions i guess you know

01:22:50,560 --> 01:22:55,280
throughout the binary

01:22:52,000 --> 01:22:57,040
um so that that may be a

01:22:55,280 --> 01:22:58,800
a thing that would get sorted out with

01:22:57,040 --> 01:23:01,040
some compiler infrastructure that'd be

01:22:58,800 --> 01:23:03,760
useful for other things as well

01:23:01,040 --> 01:23:04,880
yeah that sounds like even sorry a link

01:23:03,760 --> 01:23:07,360
of relaxation type

01:23:04,880 --> 01:23:08,800
thing yeah i mean the general theory

01:23:07,360 --> 01:23:11,440
there is that yeah you would

01:23:08,800 --> 01:23:12,960
the the compiler would go spit out

01:23:11,440 --> 01:23:15,920
whatever trampoline region

01:23:12,960 --> 01:23:16,960
you want we've looked at them mostly for

01:23:15,920 --> 01:23:18,840
like large

01:23:16,960 --> 01:23:20,000
address support right so you're

01:23:18,840 --> 01:23:22,239
basically

01:23:20,000 --> 01:23:23,199
you need a constant pool that was is

01:23:22,239 --> 01:23:25,920
within a

01:23:23,199 --> 01:23:26,400
shorter range of your yeah pc right you

01:23:25,920 --> 01:23:28,480
do that

01:23:26,400 --> 01:23:31,040
you see in the load so you get a two gig

01:23:28,480 --> 01:23:32,880
region so the compiler would just

01:23:31,040 --> 01:23:34,560
spit the constant pool out for every

01:23:32,880 --> 01:23:36,960
function and

01:23:34,560 --> 01:23:38,639
include some relocations that would

01:23:36,960 --> 01:23:41,520
allow the linker to then go

01:23:38,639 --> 01:23:43,760
merge those constant pools it smells

01:23:41,520 --> 01:23:45,360
quite similar to this

01:23:43,760 --> 01:23:47,360
in terms of you know first order

01:23:45,360 --> 01:23:50,000
infrastructure stuff

01:23:47,360 --> 01:23:51,520
the tricky part is how do you actually

01:23:50,000 --> 01:23:52,400
distribute those throughout the binary

01:23:51,520 --> 01:23:54,080
without uh

01:23:52,400 --> 01:23:56,000
losing your mind in the linker uh but i

01:23:54,080 --> 01:23:57,199
think if we can start that out uh

01:23:56,000 --> 01:23:59,600
we can have slightly different semantics

01:23:57,199 --> 01:24:01,760
for how to merge them i would

01:23:59,600 --> 01:24:03,120
starting point you put it at the start

01:24:01,760 --> 01:24:04,480
of the function or in some you know

01:24:03,120 --> 01:24:06,000
alternate section

01:24:04,480 --> 01:24:07,760
repeatedly but then use linker

01:24:06,000 --> 01:24:08,960
relaxation to eliminate them with their

01:24:07,760 --> 01:24:10,960
duplicates where it can

01:24:08,960 --> 01:24:13,040
yeah yeah yeah i mean that's and that's

01:24:10,960 --> 01:24:14,800
basically the hard part is how to

01:24:13,040 --> 01:24:17,600
how to actually relax that stuff away

01:24:14,800 --> 01:24:20,880
because for the other code model

01:24:17,600 --> 01:24:23,520
embedded stuff where you really need to

01:24:20,880 --> 01:24:24,800
you need to optimize that really well

01:24:23,520 --> 01:24:25,600
because uh

01:24:24,800 --> 01:24:27,120
because otherwise you're gonna have

01:24:25,600 --> 01:24:28,400
horrible code size but for this you

01:24:27,120 --> 01:24:30,719
don't need to worry about it so much

01:24:28,400 --> 01:24:31,679
right so maybe we can get away with just

01:24:30,719 --> 01:24:33,120
not

01:24:31,679 --> 01:24:34,639
not worrying about relaxation right now

01:24:33,120 --> 01:24:35,440
and just kind of yeah get on with our

01:24:34,639 --> 01:24:38,239
lives yeah

01:24:35,440 --> 01:24:39,040
fix it later yeah yeah that was it that

01:24:38,239 --> 01:24:44,639
was uh

01:24:39,040 --> 01:24:47,920
i suppose option c yeah

01:24:44,639 --> 01:24:50,560
everybody could vote at the right uh

01:24:47,920 --> 01:24:51,120
of the screen yeah and then we only get

01:24:50,560 --> 01:24:54,560
two

01:24:51,120 --> 01:24:58,000
two tickets and i want to see

01:24:54,560 --> 01:25:01,199
which one your choice yeah yeah and uh

01:24:58,000 --> 01:25:03,760
solution one uh do

01:25:01,199 --> 01:25:05,600
do you have permanent do you accept the

01:25:03,760 --> 01:25:07,520
solution one

01:25:05,600 --> 01:25:08,880
on the effect i mean i gotta look at

01:25:07,520 --> 01:25:09,920
more detail than this but i don't think

01:25:08,880 --> 01:25:12,400
there's anything

01:25:09,920 --> 01:25:13,120
like fundamentally wrong with requiring

01:25:12,400 --> 01:25:16,320
a few more

01:25:13,120 --> 01:25:20,320
instructions to do the fbi yeah yeah

01:25:16,320 --> 01:25:24,560
because you have uh uh you

01:25:20,320 --> 01:25:26,880
yeah i refer about the destruction one

01:25:24,560 --> 01:25:28,400
do we need our uh the last two

01:25:26,880 --> 01:25:31,040
instructions

01:25:28,400 --> 01:25:32,080
to fix up that it seems that is fixing

01:25:31,040 --> 01:25:35,199
up the

01:25:32,080 --> 01:25:38,800
uh stock pointer right

01:25:35,199 --> 01:25:40,639
uh the uh you mean you mean the

01:25:38,800 --> 01:25:42,960
instruction is yeah it could be

01:25:40,639 --> 01:25:47,600
deprecated but yeah

01:25:42,960 --> 01:25:50,719
how we how we how we

01:25:47,600 --> 01:25:54,480
yeah fixing up the flat pointer

01:25:50,719 --> 01:25:57,600
in uh f3 trampoline

01:25:54,480 --> 01:25:58,960
so that are uh not direct recorder uh

01:25:57,600 --> 01:26:02,239
after his score

01:25:58,960 --> 01:26:05,440
but the uh after is making making an uh

01:26:02,239 --> 01:26:08,560
after strampering code and uh

01:26:05,440 --> 01:26:12,159
at the last point of the the first

01:26:08,560 --> 01:26:15,360
trampoline code you can put the uh the

01:26:12,159 --> 01:26:19,520
uh these are start pointer

01:26:15,360 --> 01:26:23,199
fixing uh but better better

01:26:19,520 --> 01:26:26,400
the first question is the

01:26:23,199 --> 01:26:29,280
uh the risk five the risk five uh

01:26:26,400 --> 01:26:29,840
uh direct jump instruction is limited

01:26:29,280 --> 01:26:32,880
it's a

01:26:29,840 --> 01:26:35,360
have a very small range so when we back

01:26:32,880 --> 01:26:36,560
we still you're trying about two uh by

01:26:35,360 --> 01:26:41,920
your uh

01:26:36,560 --> 01:26:45,600
like uh register or something like that

01:26:41,920 --> 01:26:45,600
yeah like a functioning term

01:26:45,760 --> 01:26:49,280
yeah you mean this function we could we

01:26:48,880 --> 01:26:52,639
could

01:26:49,280 --> 01:26:56,080
prepare the eye and sap but

01:26:52,639 --> 01:26:56,880
but but how we retain here because it's

01:26:56,080 --> 01:27:00,239
far away

01:26:56,880 --> 01:27:03,440
and when we return here and we still

01:27:00,239 --> 01:27:06,239
need to register that

01:27:03,440 --> 01:27:06,560
is the puddle so i still need to keep to

01:27:06,239 --> 01:27:09,840
this

01:27:06,560 --> 01:27:12,719
interaction more uh

01:27:09,840 --> 01:27:13,760
in the middle list and i'll issue you

01:27:12,719 --> 01:27:16,480
yeah but i think

01:27:13,760 --> 01:27:16,960
you can break some link register or

01:27:16,480 --> 01:27:19,840
something

01:27:16,960 --> 01:27:19,840
like that

01:27:21,199 --> 01:27:29,199
no we we cannot break

01:27:24,480 --> 01:27:33,120
any register here because oh yeah

01:27:29,199 --> 01:27:36,400
yeah yeah it's in the function

01:27:33,120 --> 01:27:37,679
call and the callee and the color color

01:27:36,400 --> 01:27:40,560
and kodi and

01:27:37,679 --> 01:27:42,480
and then our parent color grandfather

01:27:40,560 --> 01:27:45,520
color and color color color

01:27:42,480 --> 01:27:48,719
and so you do know what's register

01:27:45,520 --> 01:27:51,040
you should keep origins there

01:27:48,719 --> 01:27:53,199
yeah and while gathering you need

01:27:51,040 --> 01:27:56,239
several of them

01:27:53,199 --> 01:28:00,000
okay yeah i got it uh

01:27:56,239 --> 01:28:03,920
that's so augustine

01:28:00,000 --> 01:28:07,440
implementation for me uh if i i

01:28:03,920 --> 01:28:11,440
i if i send the next page with this

01:28:07,440 --> 01:28:11,440
what do you approve

01:28:12,719 --> 01:28:19,199
i mean i have to look at the whole like

01:28:16,159 --> 01:28:22,880
i don't think picking version a

01:28:19,199 --> 01:28:26,000
is an issue for getting this merged

01:28:22,880 --> 01:28:29,840
um there may be other issues i don't

01:28:26,000 --> 01:28:29,840
remember the patch set particularly

01:28:30,480 --> 01:28:36,400
like okay i

01:28:33,600 --> 01:28:37,280
i only get six tickets i need more

01:28:36,400 --> 01:28:40,320
people

01:28:37,280 --> 01:28:43,440
uh vote and they don't make sense you

01:28:40,320 --> 01:28:44,159
ask me directly and i will let you know

01:28:43,440 --> 01:28:47,760
that and

01:28:44,159 --> 01:28:47,760
please vote your

01:28:48,159 --> 01:28:57,840
give give your i need your ticket and

01:28:51,040 --> 01:28:57,840
then i need your choice

01:29:03,440 --> 01:29:08,320
the other challenge i see with both

01:29:05,920 --> 01:29:11,120
these solutions is that

01:29:08,320 --> 01:29:13,199
you're going to uh an alternative entry

01:29:11,120 --> 01:29:15,199
point alongside f trace as well right

01:29:13,199 --> 01:29:16,480
your place will still have its own set

01:29:15,199 --> 01:29:17,760
of instructions and

01:29:16,480 --> 01:29:19,760
you're gonna be inserting a lot more

01:29:17,760 --> 01:29:23,440
knobs uh increasing the

01:29:19,760 --> 01:29:25,600
text size as well um so one other thing

01:29:23,440 --> 01:29:28,320
you could consider is for power pc what

01:29:25,600 --> 01:29:31,679
we've also done is we came up with a new

01:29:28,320 --> 01:29:34,159
f3s api for the kernel uh

01:29:31,679 --> 01:29:35,840
it's the m profile kernel that's the

01:29:34,159 --> 01:29:39,199
option that we use with gcc

01:29:35,840 --> 01:29:42,080
so if you think the existing your phrase

01:29:39,199 --> 01:29:43,679
how it works for risk fi is not ideal

01:29:42,080 --> 01:29:45,120
you could consider adding

01:29:43,679 --> 01:29:47,360
a separate mechanism which could

01:29:45,120 --> 01:29:50,320
potentially solve both of your issues

01:29:47,360 --> 01:29:51,520
um with the right sort of instructions

01:29:50,320 --> 01:29:53,600
at the beginning of the

01:29:51,520 --> 01:29:54,719
function which on top of which you'll be

01:29:53,600 --> 01:29:58,719
able to

01:29:54,719 --> 01:29:58,719
try for k probes on your phrase

01:30:05,440 --> 01:30:12,239
yeah uh sorry

01:30:08,639 --> 01:30:15,840
i'll not make sense yeah yeah

01:30:12,239 --> 01:30:16,400
and uh yeah but but i but i know you

01:30:15,840 --> 01:30:21,679
work with

01:30:16,400 --> 01:30:23,679
ibm and we can talk in the mail list and

01:30:21,679 --> 01:30:25,440
and i think the parties have the same

01:30:23,679 --> 01:30:28,080
problem because

01:30:25,440 --> 01:30:31,920
his implementation also is not good and

01:30:28,080 --> 01:30:31,920
because he is limited with the

01:30:32,000 --> 01:30:39,840
in this 64 and maybe he need a

01:30:36,719 --> 01:30:43,600
large large ranger yeah

01:30:39,840 --> 01:30:47,120
okay i will illustrate the result

01:30:43,600 --> 01:30:50,560
of the world yeah we only get seven

01:30:47,120 --> 01:30:54,080
tickets and the five choice a

01:30:50,560 --> 01:30:56,719
and two choice b plus me i chose b

01:30:54,080 --> 01:30:57,600
but same as i needed two implementation

01:30:56,719 --> 01:31:00,960
a yeah

01:30:57,600 --> 01:31:04,000
okay and uh

01:31:00,960 --> 01:31:05,040
okay it it it's that's that's next let's

01:31:04,000 --> 01:31:08,159
get the thing next

01:31:05,040 --> 01:31:11,280
so so uh

01:31:08,159 --> 01:31:15,360
uh uh the work is the leaf patch yeah uh

01:31:11,280 --> 01:31:18,560
in fact leave patch uh just with the

01:31:15,360 --> 01:31:22,560
dynamic effects if we implemented with

01:31:18,560 --> 01:31:25,280
that implemented the dynamic f3s with rx

01:31:22,560 --> 01:31:26,560
and it could change the return address

01:31:25,280 --> 01:31:29,199
in the ptrx and

01:31:26,560 --> 01:31:30,080
then it could modify the return rates

01:31:29,199 --> 01:31:33,520
that

01:31:30,080 --> 01:31:36,639
it work but if we

01:31:33,520 --> 01:31:40,400
need a full feature of the patch we

01:31:36,639 --> 01:31:43,440
we need we need the check

01:31:40,400 --> 01:31:45,520
we need to check his

01:31:43,440 --> 01:31:47,120
in the document it said the consistent

01:31:45,520 --> 01:31:49,440
model yeah

01:31:47,120 --> 01:31:50,400
and uh the full the full context mode

01:31:49,440 --> 01:31:53,440
don't need the

01:31:50,400 --> 01:31:57,280
uh two features reliable stack trade and

01:31:53,440 --> 01:32:00,560
uh so i think over time here unless i'm

01:31:57,280 --> 01:32:01,760
oh i'm happy to keep talking but uh this

01:32:00,560 --> 01:32:03,840
is officially a break

01:32:01,760 --> 01:32:04,960
so okay people okay it's another

01:32:03,840 --> 01:32:08,000
important thing yeah

01:32:04,960 --> 01:32:08,880
and uh it's not important okay thank you

01:32:08,000 --> 01:32:13,440
everybody

01:32:08,880 --> 01:32:15,920
and uh brick bye-bye yeah

01:32:13,440 --> 01:32:15,920
oh yes

01:32:17,199 --> 01:32:27,840
have a break yeah

01:33:02,370 --> 01:33:06,239
[Music]

01:40:57,440 --> 01:41:01,679
okay so we have a couple minutes left

01:40:59,760 --> 01:41:05,840
and if i assume you're

01:41:01,679 --> 01:41:05,840
set up to talk

01:41:10,320 --> 01:41:13,520
so i i'd already uploaded the slides

01:41:12,400 --> 01:41:17,600
right so

01:41:13,520 --> 01:41:17,600
i don't need to share it okay

01:41:17,679 --> 01:41:21,920
yeah i mean if if your slides or

01:41:20,560 --> 01:41:25,199
whatever is on plumbers

01:41:21,920 --> 01:41:25,199
then they will appear here

01:41:26,639 --> 01:41:30,800
you'll get some little buttons down at

01:41:29,040 --> 01:41:32,719
the bottom to do the

01:41:30,800 --> 01:41:35,440
presentation stuff so you can control

01:41:32,719 --> 01:41:35,440
your own slides

01:41:35,840 --> 01:41:47,840
okay yeah swap them over here for you

01:41:58,840 --> 01:42:04,159
okay

01:42:00,880 --> 01:42:06,400
okay so you should own the uh slideshow

01:42:04,159 --> 01:42:06,400
now

01:42:08,800 --> 01:42:14,719
okay i guess screen time is

01:42:11,920 --> 01:42:16,800
next so green time i assume you're all

01:42:14,719 --> 01:42:18,239
good with whatever you uploaded as well

01:42:16,800 --> 01:42:20,480
otherwise i guess we can chat or

01:42:18,239 --> 01:42:20,480
something

01:42:22,639 --> 01:42:27,600
yeah i can change the slides

01:42:25,920 --> 01:42:29,360
yeah cool so i think we'll just try to

01:42:27,600 --> 01:42:32,560
start on time which is in like

01:42:29,360 --> 01:42:34,800
a couple minutes all right okay

01:42:32,560 --> 01:42:36,480
uh my webcam is not working so you might

01:42:34,800 --> 01:42:41,119
not be able to see

01:42:36,480 --> 01:42:41,119
that's fine just uh don't worry about it

01:42:46,800 --> 01:42:50,560
it's more useful for the people who are

01:42:48,320 --> 01:42:51,760
like uh not giving the talk because then

01:42:50,560 --> 01:42:53,280
you actually appear

01:42:51,760 --> 01:42:55,520
so someone can tell that you're trying

01:42:53,280 --> 01:42:58,560
to say something

01:42:55,520 --> 01:43:00,639
okay yeah that's yeah

01:42:58,560 --> 01:43:02,080
yeah but i'll keep looking at the chat

01:43:00,639 --> 01:43:04,560
window no problem

01:43:02,080 --> 01:43:05,520
yeah yeah that's the most questions come

01:43:04,560 --> 01:43:07,360
in from there anyway

01:43:05,520 --> 01:43:11,840
it's a little easier than trying to

01:43:07,360 --> 01:43:11,840
interrupt the talk

01:43:22,840 --> 01:43:25,840
okay

01:43:26,400 --> 01:43:29,920
what do you mean by the download is not

01:43:27,920 --> 01:43:32,080
enabled in the upload list

01:43:29,920 --> 01:43:34,560
uh if you go to the upload presentation

01:43:32,080 --> 01:43:34,560
there is a

01:43:34,719 --> 01:43:38,239
there are three options one is to enable

01:43:36,880 --> 01:43:42,800
download so that

01:43:38,239 --> 01:43:42,800
download option appears in the slides

01:43:43,040 --> 01:43:47,040
enable do not allow presentation to be

01:43:45,920 --> 01:43:48,880
downloaded

01:43:47,040 --> 01:43:50,400
yeah i see about this do not allow

01:43:48,880 --> 01:43:53,600
presentation to be downloaded

01:43:50,400 --> 01:43:54,560
yeah so then you unmark it so that you

01:43:53,600 --> 01:43:56,239
allow

01:43:54,560 --> 01:43:58,320
visits it looks like they're all

01:43:56,239 --> 01:44:00,719
unmarked except whatever is called

01:43:58,320 --> 01:44:00,719
default

01:44:00,960 --> 01:44:05,760
so then more markets probably then

01:44:03,360 --> 01:44:08,960
market and then say probably

01:44:05,760 --> 01:44:10,960
mark you can't see okay

01:44:08,960 --> 01:44:13,679
either way all these things are on the

01:44:10,960 --> 01:44:14,560
oh no there is no no there is a download

01:44:13,679 --> 01:44:16,159
button but

01:44:14,560 --> 01:44:17,920
why don't you just do it if you want to

01:44:16,159 --> 01:44:20,400
do it

01:44:17,920 --> 01:44:21,199
no no actually it's correct the the

01:44:20,400 --> 01:44:24,320
option is not

01:44:21,199 --> 01:44:27,679
visible because uh because of the

01:44:24,320 --> 01:44:30,159
slides the background is black so if you

01:44:27,679 --> 01:44:32,080
hover around the bottom left there is a

01:44:30,159 --> 01:44:34,719
download the original presentation

01:44:32,080 --> 01:44:36,239
and i am able to download it's just that

01:44:34,719 --> 01:44:40,320
it's difficult to see that

01:44:36,239 --> 01:44:40,320
because of the background of the slide

01:44:41,920 --> 01:44:46,840
i don't think i can download that um

01:44:44,159 --> 01:44:48,480
where there was in previous

01:44:46,840 --> 01:44:51,679
presentations

01:44:48,480 --> 01:44:52,560
uh this one i can download this one i

01:44:51,679 --> 01:44:54,719
see the

01:44:52,560 --> 01:44:58,080
there's a if you hover around there's a

01:44:54,719 --> 01:45:01,360
button yeah right there

01:44:58,080 --> 01:45:03,679
oh yeah off the slides right got it yeah

01:45:01,360 --> 01:45:04,560
the template is really bad for this car

01:45:03,679 --> 01:45:07,679
okay yeah

01:45:04,560 --> 01:45:09,119
i can see it now yeah

01:45:07,679 --> 01:45:11,280
we should have chosen a different

01:45:09,119 --> 01:45:13,199
template from i think all western

01:45:11,280 --> 01:45:15,840
digital slides have

01:45:13,199 --> 01:45:17,040
this slide this template and it's really

01:45:15,840 --> 01:45:18,880
tricky to add it

01:45:17,040 --> 01:45:20,560
it's all the the slides also will be

01:45:18,880 --> 01:45:22,560
available in the

01:45:20,560 --> 01:45:24,080
risk 5mc conference website so you can

01:45:22,560 --> 01:45:27,119
go there and download also

01:45:24,080 --> 01:45:29,679
it's uploaded there yeah i think it's

01:45:27,119 --> 01:45:32,000
time to get going here though yeah i

01:45:29,679 --> 01:45:35,199
will get started

01:45:32,000 --> 01:45:37,360
hey everyone uh i'm a new uh and sorry

01:45:35,199 --> 01:45:38,400
about you cannot see me my webcam is not

01:45:37,360 --> 01:45:41,280
working with the

01:45:38,400 --> 01:45:43,280
ui anyways we'll get started uh so this

01:45:41,280 --> 01:45:45,040
is this session is all about

01:45:43,280 --> 01:45:47,119
the current state of the uh this five

01:45:45,040 --> 01:45:48,239
hypervisor support and the ongoing work

01:45:47,119 --> 01:45:49,520
that we are doing right now for the

01:45:48,239 --> 01:45:53,280
hybrids

01:45:49,520 --> 01:45:56,560
yeah and primarily we'll talk about kvm

01:45:53,280 --> 01:45:59,600
uh so we start with a very short a brief

01:45:56,560 --> 01:46:01,360
status on the race extension spec and

01:45:59,600 --> 01:46:04,639
then move on to the

01:46:01,360 --> 01:46:07,040
kvm's five status and then

01:46:04,639 --> 01:46:08,480
spend more time on the risk fire nested

01:46:07,040 --> 01:46:10,159
virtualization stuff

01:46:08,480 --> 01:46:11,600
where we have some ideas and we also

01:46:10,159 --> 01:46:16,400
want some feedback

01:46:11,600 --> 01:46:18,560
on that so let's start

01:46:16,400 --> 01:46:20,239
so the edge extension spread and for the

01:46:18,560 --> 01:46:20,639
people who are new to that is five word

01:46:20,239 --> 01:46:22,960
uh

01:46:20,639 --> 01:46:24,080
the hypervisor specific iso in the x5

01:46:22,960 --> 01:46:26,800
world is called

01:46:24,080 --> 01:46:28,320
this by h extension uh the key

01:46:26,800 --> 01:46:30,560
contributors for this

01:46:28,320 --> 01:46:32,800
uh this fight is like uh exchanging

01:46:30,560 --> 01:46:34,159
spike are andrew atman john was a

01:46:32,800 --> 01:46:36,400
paulo business so these are people who

01:46:34,159 --> 01:46:39,840
actually started whole sections back and

01:46:36,400 --> 01:46:41,360
uh got to a good shape after which like

01:46:39,840 --> 01:46:43,440
a lot of people started

01:46:41,360 --> 01:46:45,440
getting feedbacks you know so there has

01:46:43,440 --> 01:46:46,239
been a lot of draft releases since like

01:46:45,440 --> 01:46:49,119
november

01:46:46,239 --> 01:46:49,920
2017 and like this november will all the

01:46:49,119 --> 01:46:51,920
drafters will

01:46:49,920 --> 01:46:53,040
like would have spent like three years

01:46:51,920 --> 01:46:55,119
now so

01:46:53,040 --> 01:46:57,600
it has spent a lot of time in review

01:46:55,119 --> 01:46:58,239
actually and uh the latest uh draft

01:46:57,600 --> 01:47:00,800
release is

01:46:58,239 --> 01:47:01,840
uh 0.6.1 like which was released on

01:47:00,800 --> 01:47:04,320
fifth may

01:47:01,840 --> 01:47:05,040
it was just a minor change uh related to

01:47:04,320 --> 01:47:07,440
uh

01:47:05,040 --> 01:47:08,080
some nested worklife and stuff we wanted

01:47:07,440 --> 01:47:10,080
and

01:47:08,080 --> 01:47:12,880
most likely hopefully this will be the

01:47:10,080 --> 01:47:15,920
last draft release not sure still

01:47:12,880 --> 01:47:17,520
uh but then and western regional has

01:47:15,920 --> 01:47:21,280
been doing co-development

01:47:17,520 --> 01:47:23,840
or with uh reached extension spec

01:47:21,280 --> 01:47:24,880
since uh 0.4 drive it was like a year

01:47:23,840 --> 01:47:28,239
back

01:47:24,880 --> 01:47:31,280
so we started off

01:47:28,239 --> 01:47:32,320
with putting the qmo first alice studied

01:47:31,280 --> 01:47:35,199
all the work and then

01:47:32,320 --> 01:47:36,880
reported two hypervisors xyz and kvm

01:47:35,199 --> 01:47:37,280
just to prove the functional correctness

01:47:36,880 --> 01:47:39,920
of the

01:47:37,280 --> 01:47:41,280
spec and then from there like we are

01:47:39,920 --> 01:47:43,360
continuously updating the

01:47:41,280 --> 01:47:45,280
implementations in obviously even open

01:47:43,360 --> 01:47:47,199
sbi has some level of

01:47:45,280 --> 01:47:49,040
edge extension support to redirect the

01:47:47,199 --> 01:47:50,800
traps and do on

01:47:49,040 --> 01:47:54,639
misaligned rooster emulation for the

01:47:50,800 --> 01:47:54,639
guest or vm if it is not supported

01:47:56,560 --> 01:48:00,320
moving on to the kvm spy status how far

01:47:59,520 --> 01:48:02,960
we have got

01:48:00,320 --> 01:48:02,960
on this front

01:48:03,440 --> 01:48:06,880
so uh again for people who are new

01:48:05,600 --> 01:48:08,639
actually uh

01:48:06,880 --> 01:48:09,920
so with ads extension when we are

01:48:08,639 --> 01:48:12,320
running kvm uh

01:48:09,920 --> 01:48:13,840
these are the previous levels uh and the

01:48:12,320 --> 01:48:17,760
software layers you will see

01:48:13,840 --> 01:48:19,760
uh the firmware mod firmware

01:48:17,760 --> 01:48:21,600
is the most privileged it's open sbi

01:48:19,760 --> 01:48:25,360
which provides sbi services to the

01:48:21,600 --> 01:48:27,679
hs mode or the uh host linux

01:48:25,360 --> 01:48:28,639
and even kvm kernel module runs at the

01:48:27,679 --> 01:48:31,119
access level

01:48:28,639 --> 01:48:32,880
uh then we have gas linux running at vs

01:48:31,119 --> 01:48:33,600
level and then we have guest user space

01:48:32,880 --> 01:48:36,960
at uh

01:48:33,600 --> 01:48:38,480
vu level and the qr mover user space

01:48:36,960 --> 01:48:42,000
tool of the kvm runs in

01:48:38,480 --> 01:48:42,639
u mode not virtualized and as such the

01:48:42,000 --> 01:48:44,639
vs

01:48:42,639 --> 01:48:46,159
and hs modes are nothing but the s mode

01:48:44,639 --> 01:48:47,440
with different capabilities so

01:48:46,159 --> 01:48:50,159
technically

01:48:47,440 --> 01:48:50,719
unmodified linux series 5 can run as

01:48:50,159 --> 01:48:54,159
both

01:48:50,719 --> 01:48:56,480
edges in hs as well as vs mode

01:48:54,159 --> 01:48:58,000
only the kvm part of the host linux uses

01:48:56,480 --> 01:49:01,840
the hypervisor functionality

01:48:58,000 --> 01:49:01,840
of the of the hardware

01:49:03,119 --> 01:49:06,320
so this is the list of things we have

01:49:05,360 --> 01:49:09,920
done so far

01:49:06,320 --> 01:49:11,600
uh compared to last lpc the red items

01:49:09,920 --> 01:49:12,960
are the new things that we have received

01:49:11,600 --> 01:49:14,560
over the year

01:49:12,960 --> 01:49:16,320
and then there are other patch settings

01:49:14,560 --> 01:49:19,520
the patch sets

01:49:16,320 --> 01:49:20,400
so of course we have moved the kvm these

01:49:19,520 --> 01:49:23,440
five patches to

01:49:20,400 --> 01:49:26,639
the latest draft spec that is 0.6.1

01:49:23,440 --> 01:49:28,960
and now we support both uh rb32 and rv64

01:49:26,639 --> 01:49:32,000
host which means like you can run kvm on

01:49:28,960 --> 01:49:34,239
qmo 32-bit and qr 64-bit uh

01:49:32,000 --> 01:49:36,320
and by the way yeah uh kvm also works

01:49:34,239 --> 01:49:37,679
fine on spike as well so we recently

01:49:36,320 --> 01:49:39,679
added spike support

01:49:37,679 --> 01:49:40,880
for each extension so and tested both

01:49:39,679 --> 01:49:44,239
xyz and

01:49:40,880 --> 01:49:44,639
kvm over there and then atheist added

01:49:44,239 --> 01:49:48,159
the

01:49:44,639 --> 01:49:49,599
sbi 0.2 interface for the cast

01:49:48,159 --> 01:49:52,080
okay this is a separate series so it's

01:49:49,599 --> 01:49:56,000
not part of the main kvm is 5 series

01:49:52,080 --> 01:49:57,840
and then we are forwarding unedited sbi

01:49:56,000 --> 01:50:00,639
calls to the user space so even user

01:49:57,840 --> 01:50:03,440
space kvm user space has a chance to

01:50:00,639 --> 01:50:05,840
handle uh vendor-specific sbi calls or

01:50:03,440 --> 01:50:09,280
experimental sbi calls in user space

01:50:05,840 --> 01:50:12,239
and and recently huawei i think has

01:50:09,280 --> 01:50:13,119
sent out patches to get we but iov host

01:50:12,239 --> 01:50:16,239
working

01:50:13,119 --> 01:50:17,520
with kvm is fine uh uh along with using

01:50:16,239 --> 01:50:20,800
i o event ft

01:50:17,520 --> 01:50:21,520
so again uh those are like small changes

01:50:20,800 --> 01:50:25,840
and

01:50:21,520 --> 01:50:25,840
those are rfc patches

01:50:29,760 --> 01:50:35,520
uh so about the patches actually

01:50:33,599 --> 01:50:38,080
we had submitted the first version of

01:50:35,520 --> 01:50:41,440
the kvm this file like back in july 29

01:50:38,080 --> 01:50:42,560
20 2019 it's a lot like almost more than

01:50:41,440 --> 01:50:45,520
a year back

01:50:42,560 --> 01:50:46,560
so and the patches were like reviewed

01:50:45,520 --> 01:50:48,800
and

01:50:46,560 --> 01:50:49,840
by v6 like in couple of months and since

01:50:48,800 --> 01:50:52,080
then like we are

01:50:49,840 --> 01:50:53,199
maintaining the patches with changing

01:50:52,080 --> 01:50:55,679
draft spec

01:50:53,199 --> 01:50:56,400
and also ensuring that corresponding uh

01:50:55,679 --> 01:50:58,800
things keep

01:50:56,400 --> 01:51:00,480
working with every kernel releases so

01:50:58,800 --> 01:51:01,920
what happens with every color releases

01:51:00,480 --> 01:51:03,599
even the

01:51:01,920 --> 01:51:05,440
current kvm also breaks because of the

01:51:03,599 --> 01:51:08,080
changing interface in the generic

01:51:05,440 --> 01:51:09,440
kernel kvm module so we keep maintaining

01:51:08,080 --> 01:51:11,440
that

01:51:09,440 --> 01:51:12,560
and apart from that a few other patches

01:51:11,440 --> 01:51:15,280
were submitted

01:51:12,560 --> 01:51:17,679
uh like i mentioned uh we host support

01:51:15,280 --> 01:51:18,639
which is again in rfc state and sbi zero

01:51:17,679 --> 01:51:21,679
to support one of these

01:51:18,639 --> 01:51:23,360
two these patches which are not the only

01:51:21,679 --> 01:51:24,480
the kvm distributions are still blocked

01:51:23,360 --> 01:51:26,560
because we need first

01:51:24,480 --> 01:51:28,320
key and these five patches to be merged

01:51:26,560 --> 01:51:29,199
and this bottom three links are like the

01:51:28,320 --> 01:51:30,880
important uh

01:51:29,199 --> 01:51:32,880
links so if you want to follow the

01:51:30,880 --> 01:51:34,960
keyboard file first the last link

01:51:32,880 --> 01:51:36,400
particularly the wiki we have some pgs

01:51:34,960 --> 01:51:37,520
which will help you to play around with

01:51:36,400 --> 01:51:40,880
kmd spy

01:51:37,520 --> 01:51:40,880
on qmo and spike

01:51:45,119 --> 01:51:49,199
yeah so what's next on our list actually

01:51:47,040 --> 01:51:50,560
the tool is pretty big if i were to make

01:51:49,199 --> 01:51:53,119
slides it will go on

01:51:50,560 --> 01:51:54,159
so i just created the image to release

01:51:53,119 --> 01:51:55,119
for the image of things that we are

01:51:54,159 --> 01:51:57,199
working on

01:51:55,119 --> 01:51:58,639
but there's a lot of things to be worked

01:51:57,199 --> 01:52:00,880
on for the keyboard

01:51:58,639 --> 01:52:03,199
uh to make a server class virtualization

01:52:00,880 --> 01:52:04,159
solution uh so right now we are working

01:52:03,199 --> 01:52:05,920
on two things that

01:52:04,159 --> 01:52:07,920
at least i'm focusing on two things

01:52:05,920 --> 01:52:09,840
immediately is that stage two dirty page

01:52:07,920 --> 01:52:10,800
logging uh so there is a generic uh

01:52:09,840 --> 01:52:14,000
implementation in

01:52:10,800 --> 01:52:14,880
the kvm generic kernel kvm uh which has

01:52:14,000 --> 01:52:16,880
a

01:52:14,880 --> 01:52:18,719
dirty piece logging support which you

01:52:16,880 --> 01:52:20,000
want to leverage with the key image file

01:52:18,719 --> 01:52:21,040
and then we have nested watch selection

01:52:20,000 --> 01:52:24,080
which is a bigger piece

01:52:21,040 --> 01:52:27,119
and more complicated thing uh so

01:52:24,080 --> 01:52:29,119
that i started looking into uh then

01:52:27,119 --> 01:52:30,239
other things like next we can look at

01:52:29,119 --> 01:52:31,840
his trace points

01:52:30,239 --> 01:52:34,000
the kvm unit test support is very

01:52:31,840 --> 01:52:35,280
important to get ci up and running with

01:52:34,000 --> 01:52:37,119
4k vm is phi

01:52:35,280 --> 01:52:38,800
and we you need to watch live uh the

01:52:37,119 --> 01:52:40,480
vector extension because

01:52:38,800 --> 01:52:41,920
that's another risk fire extension which

01:52:40,480 --> 01:52:43,840
is close to free state and will require

01:52:41,920 --> 01:52:47,599
some serious store

01:52:43,840 --> 01:52:49,360
and then we have guest vm or migration

01:52:47,599 --> 01:52:50,800
support uh

01:52:49,360 --> 01:52:52,800
this is required for several classes

01:52:50,800 --> 01:52:55,920
relation again

01:52:52,800 --> 01:52:56,239
and other things are like fancy things

01:52:55,920 --> 01:52:58,719
like

01:52:56,239 --> 01:53:00,800
running 32-bit guest on 64-bit and

01:52:58,719 --> 01:53:02,880
running big indian gaston little indian

01:53:00,800 --> 01:53:06,639
and for these things like even simulator

01:53:02,880 --> 01:53:06,639
is not there so we'll wait out on these

01:53:10,840 --> 01:53:16,320
phones

01:53:13,360 --> 01:53:16,719
so ah moving to the discussion part of

01:53:16,320 --> 01:53:19,199
this

01:53:16,719 --> 01:53:20,560
session actually uh we have some ideas

01:53:19,199 --> 01:53:23,679
about how to go about

01:53:20,560 --> 01:53:26,159
doing nested virtualization s5 so i'll

01:53:23,679 --> 01:53:27,760
explain those ideas and maybe

01:53:26,159 --> 01:53:29,520
you can suggest some feedback or if

01:53:27,760 --> 01:53:30,480
there is some issue with what i'm saying

01:53:29,520 --> 01:53:34,400
of your discussion

01:53:30,480 --> 01:53:34,400
you can please interrupt me

01:53:37,040 --> 01:53:43,360
so seem uh

01:53:40,480 --> 01:53:45,040
this is the high level view like a high

01:53:43,360 --> 01:53:47,280
level you of the kvm

01:53:45,040 --> 01:53:48,800
but in this case we are showing uh

01:53:47,280 --> 01:53:49,840
hypervisor running inside another

01:53:48,800 --> 01:53:51,360
hypervisor

01:53:49,840 --> 01:53:54,639
uh that's why it's a nested

01:53:51,360 --> 01:53:56,960
virtualization uh so

01:53:54,639 --> 01:53:58,320
the host hyperisler or the native hyper

01:53:56,960 --> 01:53:59,760
the high press which runs natively

01:53:58,320 --> 01:54:01,440
directly on the hardware

01:53:59,760 --> 01:54:03,280
uh under ram mode is called the house

01:54:01,440 --> 01:54:05,440
hyper whether it runs in access mode

01:54:03,280 --> 01:54:06,840
and the hyperlizer which runs inside the

01:54:05,440 --> 01:54:08,719
host hyperlink is called the guest

01:54:06,840 --> 01:54:10,639
hypervisor and then

01:54:08,719 --> 01:54:12,080
the os which finally runs inside the

01:54:10,639 --> 01:54:14,000
cast hyper vm

01:54:12,080 --> 01:54:15,520
is called gasoline we are calling it gas

01:54:14,000 --> 01:54:17,040
limits over here and then

01:54:15,520 --> 01:54:18,639
it will have a user space called guest

01:54:17,040 --> 01:54:22,320
user space and then we'll have

01:54:18,639 --> 01:54:24,400
guest hypervisor user space as well so

01:54:22,320 --> 01:54:26,000
with these additional layers of the

01:54:24,400 --> 01:54:27,920
software we are not actually increasing

01:54:26,000 --> 01:54:30,560
the privilege modes okay

01:54:27,920 --> 01:54:32,320
if the the terms that you see in this uh

01:54:30,560 --> 01:54:34,239
high level view the virtual access more

01:54:32,320 --> 01:54:34,560
virtual vs more virtual view these are

01:54:34,239 --> 01:54:36,480
all

01:54:34,560 --> 01:54:38,480
sudo and dummy privilege modes which are

01:54:36,480 --> 01:54:39,679
actually functionally emulated by the

01:54:38,480 --> 01:54:42,800
host hypervisor

01:54:39,679 --> 01:54:45,199
using the existing vs and view modes and

01:54:42,800 --> 01:54:46,960
this is like you can have any level

01:54:45,199 --> 01:54:47,760
theoretically you can have any levels of

01:54:46,960 --> 01:54:49,360
nesting

01:54:47,760 --> 01:54:50,960
but the performance will keep degrading

01:54:49,360 --> 01:54:53,840
with every level actually

01:54:50,960 --> 01:54:55,520
uh it's like that inception movie where

01:54:53,840 --> 01:54:57,679
the dream insider intimidates

01:54:55,520 --> 01:54:58,719
and the time scale changes with every

01:54:57,679 --> 01:55:01,599
dream you

01:54:58,719 --> 01:55:01,599
get nested into

01:55:02,800 --> 01:55:05,040
so

01:55:05,920 --> 01:55:10,000
the prior page listed a list of all the

01:55:09,040 --> 01:55:12,719
items that you have

01:55:10,000 --> 01:55:14,000
is that based on priority or is it or is

01:55:12,719 --> 01:55:17,199
it just

01:55:14,000 --> 01:55:19,280
you know nice to do's yeah nice students

01:55:17,199 --> 01:55:20,480
we are not prioritizing as of now yeah

01:55:19,280 --> 01:55:23,119
but uh

01:55:20,480 --> 01:55:24,960
but if there is some important stuff to

01:55:23,119 --> 01:55:26,480
be done before then then please let us

01:55:24,960 --> 01:55:28,480
know we'll do that thing

01:55:26,480 --> 01:55:29,840
yeah so right now we chose to do nasty

01:55:28,480 --> 01:55:31,840
virtualization before

01:55:29,840 --> 01:55:33,360
guest migration because nest edge

01:55:31,840 --> 01:55:36,800
visualization will add

01:55:33,360 --> 01:55:38,239
more context to the guest vcpus which

01:55:36,800 --> 01:55:40,000
needs to be migrated

01:55:38,239 --> 01:55:41,440
so if you don't if you if you have done

01:55:40,000 --> 01:55:43,440
gas migration before

01:55:41,440 --> 01:55:44,560
nested then we will need to do more

01:55:43,440 --> 01:55:47,840
versioning

01:55:44,560 --> 01:55:47,840
of the cpu states

01:55:48,400 --> 01:55:53,679
hi i know the nested virtualization

01:55:51,760 --> 01:55:58,840
needed to modify the

01:55:53,679 --> 01:56:01,520
uh hyper hyperbolic

01:55:58,840 --> 01:56:04,320
hyperversion uh ice

01:56:01,520 --> 01:56:05,840
specification in the privileged

01:56:04,320 --> 01:56:09,040
specification

01:56:05,840 --> 01:56:12,239
we need no more hardware oh just always

01:56:09,040 --> 01:56:14,800
sought for software yeah

01:56:12,239 --> 01:56:16,639
so so all the virtual prefixes that you

01:56:14,800 --> 01:56:18,960
will see from the slides now on

01:56:16,639 --> 01:56:20,080
our virtual things are implemented

01:56:18,960 --> 01:56:22,239
emulated by software

01:56:20,080 --> 01:56:23,199
host hypervisor they are not required in

01:56:22,239 --> 01:56:26,400
the higher

01:56:23,199 --> 01:56:30,080
yeah yeah so and

01:56:26,400 --> 01:56:33,520
and and it's not the only

01:56:30,080 --> 01:56:37,119
three stage maybe four stage or

01:56:33,520 --> 01:56:40,639
more and it coordinated uh

01:56:37,119 --> 01:56:42,560
one by one correct so just think about

01:56:40,639 --> 01:56:44,239
when guest linux is running on top of

01:56:42,560 --> 01:56:45,440
guest hyper azure which is in turn

01:56:44,239 --> 01:56:46,800
running on our host

01:56:45,440 --> 01:56:49,360
we are actually having three stage

01:56:46,800 --> 01:56:49,360
translation

01:56:49,520 --> 01:56:55,440
yeah but yeah so so so the

01:56:52,960 --> 01:56:58,400
stage is translation because in hardware

01:56:55,440 --> 01:57:00,639
we have a two stages translation and

01:56:58,400 --> 01:57:02,239
that means you need to mode stage

01:57:00,639 --> 01:57:05,119
translation

01:57:02,239 --> 01:57:06,480
nested stages translating hardware

01:57:05,119 --> 01:57:08,320
design

01:57:06,480 --> 01:57:10,159
yeah so i have a slide for that actually

01:57:08,320 --> 01:57:12,639
how we condense the

01:57:10,159 --> 01:57:13,360
two stages into one stage as a shadow

01:57:12,639 --> 01:57:15,760
stage

01:57:13,360 --> 01:57:16,719
in software and and with the existing

01:57:15,760 --> 01:57:18,960
hardware

01:57:16,719 --> 01:57:19,840
or the existing spec which only supports

01:57:18,960 --> 01:57:22,840
two stages

01:57:19,840 --> 01:57:25,840
we can actually emulate three stages

01:57:22,840 --> 01:57:25,840
actually

01:57:27,840 --> 01:57:31,280
okay so going into more details like uh

01:57:30,960 --> 01:57:33,040
so

01:57:31,280 --> 01:57:34,960
with hs mode we have like additional

01:57:33,040 --> 01:57:36,239
csrs which are hypervisor can access and

01:57:34,960 --> 01:57:37,360
we have additional instructions like

01:57:36,239 --> 01:57:39,520
edge fence

01:57:37,360 --> 01:57:41,520
actually access instruction which which

01:57:39,520 --> 01:57:44,159
we call it hyperion instructions okay

01:57:41,520 --> 01:57:46,159
uh so when we are doing necessarily

01:57:44,159 --> 01:57:46,719
these csrs and hypervisor instructions

01:57:46,159 --> 01:57:50,080
will be

01:57:46,719 --> 01:57:51,599
accessed from the vs mode as well

01:57:50,080 --> 01:57:53,199
which which means the guest hyper will

01:57:51,599 --> 01:57:55,760
try to access this uh

01:57:53,199 --> 01:57:56,480
csr and assuming that it's running in hs

01:57:55,760 --> 01:57:58,960
mode

01:57:56,480 --> 01:58:01,280
so this instructions and csrs will trap

01:57:58,960 --> 01:58:03,840
as a virtual instruction trap and

01:58:01,280 --> 01:58:06,080
based on which mode we came from we'll

01:58:03,840 --> 01:58:08,080
actually either emulate this csr

01:58:06,080 --> 01:58:10,400
section or or redirect them to the guest

01:58:08,080 --> 01:58:12,080
hypervisor for instance uh if the trap

01:58:10,400 --> 01:58:13,520
came from the virtual hs mode which

01:58:12,080 --> 01:58:16,880
means it if the

01:58:13,520 --> 01:58:19,199
uh if we came from the guest hyperion

01:58:16,880 --> 01:58:21,360
yet guest hyper so try to

01:58:19,199 --> 01:58:22,639
access the hyperledger csr then the host

01:58:21,360 --> 01:58:25,840
cycle will emulate the

01:58:22,639 --> 01:58:27,280
hyperactive csr and the instruction but

01:58:25,840 --> 01:58:29,760
if the trap came from

01:58:27,280 --> 01:58:31,920
virtual vs or virtual view mode then we

01:58:29,760 --> 01:58:34,080
just redirect the high pressure csr

01:58:31,920 --> 01:58:35,199
instruction trap back to the guest

01:58:34,080 --> 01:58:37,679
hypervisor

01:58:35,199 --> 01:58:38,719
same if the trap came from virtual u

01:58:37,679 --> 01:58:40,400
mode then it's

01:58:38,719 --> 01:58:41,920
we we convert the virtual instruction

01:58:40,400 --> 01:58:49,199
trap into an illegal instruction trap

01:58:41,920 --> 01:58:52,159
and redirect it back to the gas cycle

01:58:49,199 --> 01:58:53,520
so more details like uh how how will we

01:58:52,159 --> 01:58:56,159
handle like wfi

01:58:53,520 --> 01:58:58,000
triaps and e cortex so wfi traps are

01:58:56,159 --> 01:58:58,239
interesting one because that saves lot

01:58:58,000 --> 01:59:01,360
of

01:58:58,239 --> 01:59:02,480
uh perform uh power because when guest

01:59:01,360 --> 01:59:04,480
or vm is idle

01:59:02,480 --> 01:59:06,000
it will do wfi it will drag to the whole

01:59:04,480 --> 01:59:09,920
hyperion hydrogen

01:59:06,000 --> 01:59:12,239
to block the vcpu so when

01:59:09,920 --> 01:59:14,159
uh when we get a wfi type in host

01:59:12,239 --> 01:59:16,000
hydrolyzer

01:59:14,159 --> 01:59:18,000
again depending on where we came from

01:59:16,000 --> 01:59:19,840
we'll do behave differently

01:59:18,000 --> 01:59:21,360
so if if the trap was from virtual

01:59:19,840 --> 01:59:24,000
access mode which means vk

01:59:21,360 --> 01:59:26,320
the wfi was done by the gas hypervisor

01:59:24,000 --> 01:59:28,239
uh let me just emulate the w ah wfi

01:59:26,320 --> 01:59:30,320
which means we block the vcpu and do the

01:59:28,239 --> 01:59:32,320
normal behavior which is there right now

01:59:30,320 --> 01:59:33,760
and then if if you came from virtual vs

01:59:32,320 --> 01:59:35,840
mode then we have two cases

01:59:33,760 --> 01:59:37,119
either the virtual edge status of the

01:59:35,840 --> 01:59:40,320
gas hyperion

01:59:37,119 --> 01:59:40,960
has the tw bit set or off if it has said

01:59:40,320 --> 01:59:43,119
then we

01:59:40,960 --> 01:59:45,199
redirect the wfi trap back to the guest

01:59:43,119 --> 01:59:48,560
cipher otherwise we skip the wfi

01:59:45,199 --> 01:59:50,719
instruction treating it as knob and

01:59:48,560 --> 01:59:52,800
if the trap came from virtual view mode

01:59:50,719 --> 01:59:53,679
we just again blindly redirect the wfi

01:59:52,800 --> 01:59:56,960
trap to the

01:59:53,679 --> 01:59:58,080
guest hypervisor similarly just like the

01:59:56,960 --> 02:00:00,480
hypervisor csr

01:59:58,080 --> 02:00:01,679
instruction if the trap came from the

02:00:00,480 --> 02:00:04,480
virtual u mode

02:00:01,679 --> 02:00:05,280
we just redirect back to the guest

02:00:04,480 --> 02:00:08,159
hyperlink as

02:00:05,280 --> 02:00:09,199
illegal instruction track so handling

02:00:08,159 --> 02:00:11,040
handling

02:00:09,199 --> 02:00:13,440
e-contracts is much more simpler

02:00:11,040 --> 02:00:17,440
compared to wfi traps and the csr

02:00:13,440 --> 02:00:19,280
and the institution traps because

02:00:17,440 --> 02:00:22,000
there are only two cases where when an

02:00:19,280 --> 02:00:24,480
e-call trap from happens

02:00:22,000 --> 02:00:26,000
in the host hyperlizer either it was by

02:00:24,480 --> 02:00:26,880
virtual access mode or it was by a

02:00:26,000 --> 02:00:28,800
virtual vs

02:00:26,880 --> 02:00:30,840
uh vs mod if it was by virtual

02:00:28,800 --> 02:00:32,000
adjustment which means that if the guest

02:00:30,840 --> 02:00:35,119
hyperion

02:00:32,000 --> 02:00:36,880
we emulate it uh assuming it's an sbi

02:00:35,119 --> 02:00:39,280
call from the guest hypervisor

02:00:36,880 --> 02:00:40,159
otherwise if it was virtual yes mode we

02:00:39,280 --> 02:00:44,400
just

02:00:40,159 --> 02:00:44,400
route it back to the guest hypervisor

02:00:48,320 --> 02:00:52,480
coming to the most challenging part of

02:00:50,320 --> 02:00:55,520
this nested roster is the

02:00:52,480 --> 02:00:57,440
the emulating two stage mmu

02:00:55,520 --> 02:00:58,719
for the guest hypervisor in other words

02:00:57,440 --> 02:01:01,440
we want to emulate

02:00:58,719 --> 02:01:03,040
the g stage uh translation for the guest

02:01:01,440 --> 02:01:06,080
hypervisor

02:01:03,040 --> 02:01:08,400
uh so like uh

02:01:06,080 --> 02:01:10,000
you mentioned actually when we are doing

02:01:08,400 --> 02:01:11,360
we have two levels of hypervisor we are

02:01:10,000 --> 02:01:13,280
actually having

02:01:11,360 --> 02:01:14,639
and we are running uh linux at the third

02:01:13,280 --> 02:01:16,320
level it means that we are actually

02:01:14,639 --> 02:01:18,080
having three stage translation

02:01:16,320 --> 02:01:19,840
but the hardware or the spike only

02:01:18,080 --> 02:01:21,280
defines two stage translations how would

02:01:19,840 --> 02:01:23,360
we do that actually

02:01:21,280 --> 02:01:24,960
so uh to achieve that thing host

02:01:23,360 --> 02:01:28,960
hypervisor will create

02:01:24,960 --> 02:01:30,960
two two g-stage piece tables uh

02:01:28,960 --> 02:01:32,639
one is the normal g-stage space table

02:01:30,960 --> 02:01:34,080
which will do the translation for the

02:01:32,639 --> 02:01:35,679
virtual hsn

02:01:34,080 --> 02:01:37,760
u mode which means there will be a

02:01:35,679 --> 02:01:38,880
regular g-stage page table which will do

02:01:37,760 --> 02:01:40,719
translation for the

02:01:38,880 --> 02:01:42,639
hypervisor and the guest hypervisor user

02:01:40,719 --> 02:01:43,440
space and there will be a shadow g-stage

02:01:42,639 --> 02:01:45,840
page table

02:01:43,440 --> 02:01:47,599
which will do the translation uh for the

02:01:45,840 --> 02:01:49,440
virtual vs and view mode

02:01:47,599 --> 02:01:50,880
now this is a shadow page table okay

02:01:49,440 --> 02:01:52,800
it's not exactly

02:01:50,880 --> 02:01:54,880
uh like the normal disappear it will

02:01:52,800 --> 02:01:57,440
have limited number of entries and

02:01:54,880 --> 02:01:58,560
we'll have to do a software walk of the

02:01:57,440 --> 02:02:01,599
guest hypervisor g

02:01:58,560 --> 02:02:03,679
stage and also look at the regions

02:02:01,599 --> 02:02:04,800
on the ho for that guest or vm in host

02:02:03,679 --> 02:02:06,960
cyber and

02:02:04,800 --> 02:02:08,320
the combined effect of the two stages

02:02:06,960 --> 02:02:11,520
we'll have to pop

02:02:08,320 --> 02:02:13,760
create using just head of page table and

02:02:11,520 --> 02:02:15,440
and if there is a missing entry in the

02:02:13,760 --> 02:02:18,159
guest hyperion g stage

02:02:15,440 --> 02:02:18,639
like a missing pd we just forward it as

02:02:18,159 --> 02:02:21,840
uh

02:02:18,639 --> 02:02:23,360
guess guest page faults and uh edge

02:02:21,840 --> 02:02:25,199
fence instruction tracks from the guest

02:02:23,360 --> 02:02:28,639
hyperlyzer will work on

02:02:25,199 --> 02:02:32,159
will will update the

02:02:28,639 --> 02:02:33,920
guest shadow page table uh another

02:02:32,159 --> 02:02:35,760
interesting part is that uh

02:02:33,920 --> 02:02:37,840
we'll only have we just will have only

02:02:35,760 --> 02:02:38,639
one normal g-state speech table for each

02:02:37,840 --> 02:02:40,719
vm

02:02:38,639 --> 02:02:42,080
or guest or vm in kvm or any other

02:02:40,719 --> 02:02:45,119
hyperlink and

02:02:42,080 --> 02:02:47,679
uh shadow g6p stable uh would be like

02:02:45,119 --> 02:02:49,520
per vcpu of the guest or vm

02:02:47,679 --> 02:02:51,679
so if you if a guest is having four

02:02:49,520 --> 02:02:53,199
vcpus then it will have one normal g6

02:02:51,679 --> 02:02:57,599
space table and 4g

02:02:53,199 --> 02:03:00,560
shadow g stat principles so yeah and

02:02:57,599 --> 02:03:01,520
again how to deal with vmids so as of

02:03:00,560 --> 02:03:03,199
now that the more

02:03:01,520 --> 02:03:04,639
most branded or naive approach will be

02:03:03,199 --> 02:03:06,880
to share the vmid

02:03:04,639 --> 02:03:08,239
but this is very expensive because if we

02:03:06,880 --> 02:03:11,040
are sharing the same

02:03:08,239 --> 02:03:11,760
vmid for normal and shadow g stage pc we

02:03:11,040 --> 02:03:14,400
will have to

02:03:11,760 --> 02:03:15,760
flush every time we move uh do a nested

02:03:14,400 --> 02:03:17,360
world switch

02:03:15,760 --> 02:03:19,360
the other approach is to do allocate two

02:03:17,360 --> 02:03:22,159
emids per gaster vm and there are other

02:03:19,360 --> 02:03:22,159
ways to solve it

02:03:22,560 --> 02:03:28,080
yeah so so this on the right side is a

02:03:26,000 --> 02:03:30,239
pictorial representation of

02:03:28,080 --> 02:03:34,000
what the shadow g stage will translate

02:03:30,239 --> 02:03:34,000
and what normal g stage will translate

02:03:34,719 --> 02:03:42,480
uh a new uh i i have a question

02:03:39,040 --> 02:03:43,040
yeah slider yeah yeah it's it's confused

02:03:42,480 --> 02:03:47,520
me yeah

02:03:43,040 --> 02:03:51,679
it's it's that means all

02:03:47,520 --> 02:03:55,040
all stage whatever kind of

02:03:51,679 --> 02:03:58,639
the stage of the virtual

02:03:55,040 --> 02:04:01,840
machine maybe very power

02:03:58,639 --> 02:04:01,840
very child maybe

02:04:02,400 --> 02:04:10,239
charter maybe three-stage or four-stage

02:04:06,960 --> 02:04:14,079
virtual machine all with just to

02:04:10,239 --> 02:04:17,119
the two-stage translation to the

02:04:14,079 --> 02:04:20,560
uh the the root

02:04:17,119 --> 02:04:23,679
hypervisor with the g-stage

02:04:20,560 --> 02:04:27,280
yeah yeah oh that means

02:04:23,679 --> 02:04:30,159
whatever uh whatever you are you all

02:04:27,280 --> 02:04:30,560
you always are getting used to g-stage

02:04:30,159 --> 02:04:32,560
and

02:04:30,560 --> 02:04:33,840
they're getting into the supervisor

02:04:32,560 --> 02:04:37,440
through the hypervisor will

02:04:33,840 --> 02:04:39,840
translate the any level of the virtual

02:04:37,440 --> 02:04:42,400
machine

02:04:39,840 --> 02:04:43,599
yes this is what like it works

02:04:42,400 --> 02:04:46,719
theoretically but you know

02:04:43,599 --> 02:04:49,199
uh that's managing the shadow g stage

02:04:46,719 --> 02:04:51,520
table becomes an overhead we cannot have

02:04:49,199 --> 02:04:53,520
too many entries because we end up

02:04:51,520 --> 02:04:55,119
removing entries uh based on expense

02:04:53,520 --> 02:04:58,239
instructions and

02:04:55,119 --> 02:05:01,199
so and also we we end up doing some

02:04:58,239 --> 02:05:03,679
uh on some location we end up doing uh

02:05:01,199 --> 02:05:06,480
tlb and tlb flashes for that vm so

02:05:03,679 --> 02:05:08,400
it becomes slower compared to uh so as

02:05:06,480 --> 02:05:10,800
we move on to multiple levels of

02:05:08,400 --> 02:05:13,119
hypervisors the performance degrades

02:05:10,800 --> 02:05:16,480
actually so

02:05:13,119 --> 02:05:19,040
and uh and and here there is difference

02:05:16,480 --> 02:05:21,760
is no multi-stage and the shadow

02:05:19,040 --> 02:05:22,880
stays and the normal gts is for the

02:05:21,760 --> 02:05:25,360
hypervisor

02:05:22,880 --> 02:05:26,159
and virtual hypervisor yeah and the the

02:05:25,360 --> 02:05:29,440
shadows

02:05:26,159 --> 02:05:32,239
just stayed for the uh

02:05:29,440 --> 02:05:33,280
would you what you guessed yeah guess

02:05:32,239 --> 02:05:36,960
yeah

02:05:33,280 --> 02:05:37,599
so so what's the difference between the

02:05:36,960 --> 02:05:41,440
normal

02:05:37,599 --> 02:05:45,199
g-stage and the gta stage

02:05:41,440 --> 02:05:46,880
here almost the same vmid assigned

02:05:45,199 --> 02:05:50,079
folder

02:05:46,880 --> 02:05:51,840
so so uh

02:05:50,079 --> 02:05:54,560
the normal g stage principle is the same

02:05:51,840 --> 02:05:56,159
thing that we have implemented currently

02:05:54,560 --> 02:05:58,480
so right now we are not running any

02:05:56,159 --> 02:06:01,920
hyperisome inside gaster vm we are just

02:05:58,480 --> 02:06:03,119
booting plane linux right so whatever

02:06:01,920 --> 02:06:04,639
page table we are

02:06:03,119 --> 02:06:06,320
the g stage principle that we are

02:06:04,639 --> 02:06:08,239
creating the series two page table code

02:06:06,320 --> 02:06:12,320
that you see right now in kmd5

02:06:08,239 --> 02:06:14,079
is the normal g stage page table okay

02:06:12,320 --> 02:06:15,599
and then on top of this we'll also have

02:06:14,079 --> 02:06:17,360
another g stage page table

02:06:15,599 --> 02:06:21,119
so right now we are populating the

02:06:17,360 --> 02:06:21,119
normal g-states variable based on the

02:06:21,280 --> 02:06:24,639
memory guest memory regions that are

02:06:22,800 --> 02:06:27,920
defined in the generic kvm

02:06:24,639 --> 02:06:30,320
apis for that vm but

02:06:27,920 --> 02:06:30,960
when we want to populate a shadow g

02:06:30,320 --> 02:06:32,960
stage

02:06:30,960 --> 02:06:34,079
page table we have to look at two things

02:06:32,960 --> 02:06:37,520
first when

02:06:34,079 --> 02:06:38,320
for that guest physical address we have

02:06:37,520 --> 02:06:41,760
to walk

02:06:38,320 --> 02:06:43,840
through the p

02:06:41,760 --> 02:06:45,360
guest hyper other g stage p stable which

02:06:43,840 --> 02:06:46,079
means the guess hyperuser would also

02:06:45,360 --> 02:06:49,760
have program

02:06:46,079 --> 02:06:50,880
its own virtual uh hgatpcsr which is

02:06:49,760 --> 02:06:54,000
pointing to some

02:06:50,880 --> 02:06:55,920
uh its own stage two okay

02:06:54,000 --> 02:06:57,679
so whenever you want to program a shadow

02:06:55,920 --> 02:07:00,800
g shp table we look at the

02:06:57,679 --> 02:07:03,199
pt in the guest hypervisor g stage

02:07:00,800 --> 02:07:06,239
and based on the mapping we further

02:07:03,199 --> 02:07:08,880
modify the mapping based on the

02:07:06,239 --> 02:07:11,119
kvm guest regions and then write a

02:07:08,880 --> 02:07:14,560
modified entry into

02:07:11,119 --> 02:07:17,360
shadow g stage b series okay okay

02:07:14,560 --> 02:07:17,360
i got it so

02:07:18,400 --> 02:07:25,280
but i think uh

02:07:21,840 --> 02:07:28,560
but i think there is every

02:07:25,280 --> 02:07:31,360
every every uh hyperbase

02:07:28,560 --> 02:07:32,239
hyperbolic uh virtual hypervisor has his

02:07:31,360 --> 02:07:35,440
own

02:07:32,239 --> 02:07:38,960
uh on vmid identify

02:07:35,440 --> 02:07:42,880
and this vmid is the cache but

02:07:38,960 --> 02:07:46,960
they are a unique vmid for every

02:07:42,880 --> 02:07:50,239
uh for every uh virtual hypervisor

02:07:46,960 --> 02:07:53,679
isn't it and and and

02:07:50,239 --> 02:07:55,920
when the vm id changed osid should be

02:07:53,679 --> 02:07:59,920
flashed

02:07:55,920 --> 02:08:03,760
and uh why you extended the

02:07:59,920 --> 02:08:05,760
contact in the hypervisor

02:08:03,760 --> 02:08:06,880
yeah so i think it's a good question so

02:08:05,760 --> 02:08:09,760
uh so

02:08:06,880 --> 02:08:12,239
you're right so if you look at this

02:08:09,760 --> 02:08:12,239
diagram

02:08:12,639 --> 02:08:17,040
so so host hypervisor uh that's a

02:08:15,280 --> 02:08:18,800
hardware supports vmid okay

02:08:17,040 --> 02:08:21,760
so the host hypervisor will use all the

02:08:18,800 --> 02:08:24,719
vmids and it will emulate

02:08:21,760 --> 02:08:27,280
and it will emulate a virtual hgatpcsr

02:08:24,719 --> 02:08:30,079
for the guest hypervisor

02:08:27,280 --> 02:08:32,480
but but we don't have infinite number of

02:08:30,079 --> 02:08:32,960
vmids or which we can partition and

02:08:32,480 --> 02:08:36,159
share

02:08:32,960 --> 02:08:39,520
from the so what we do is uh we ca

02:08:36,159 --> 02:08:41,280
we emulate a hg virtual a hgatpcsr which

02:08:39,520 --> 02:08:42,880
has no vmids for the gas

02:08:41,280 --> 02:08:44,719
which means that the gas hyperis

02:08:42,880 --> 02:08:46,800
hybridized will have no vmid so it will

02:08:44,719 --> 02:08:50,159
end up doing flushing on every

02:08:46,800 --> 02:08:51,920
vcp switch so

02:08:50,159 --> 02:08:53,920
so you you mean guess that because i

02:08:51,920 --> 02:08:57,520
guess hypervisor

02:08:53,920 --> 02:09:00,000
gets the harvard don't have the own uh

02:08:57,520 --> 02:09:01,040
uh has the same beam id with the gas the

02:09:00,000 --> 02:09:04,159
hypervisor

02:09:01,040 --> 02:09:06,320
yeah yeah so uh so i

02:09:04,159 --> 02:09:06,320
so

02:09:07,520 --> 02:09:11,280
and the guest hyper is also most of the

02:09:09,280 --> 02:09:12,880
time linux

02:09:11,280 --> 02:09:14,800
and then the guest and then he's further

02:09:12,880 --> 02:09:16,400
running another guest linux so when we

02:09:14,800 --> 02:09:18,320
switch to virtual vs mode

02:09:16,400 --> 02:09:20,400
with the same vmid we might actually

02:09:18,320 --> 02:09:22,159
accidentally hit tlb entries of desktop

02:09:20,400 --> 02:09:23,920
so to avoid that we have to flush when

02:09:22,159 --> 02:09:24,639
we are swatching switching from virtual

02:09:23,920 --> 02:09:26,079
vs to

02:09:24,639 --> 02:09:27,840
what's your access to virtual vs and

02:09:26,079 --> 02:09:29,599
vice versa actually

02:09:27,840 --> 02:09:33,360
so so i think i'm running out of time

02:09:29,599 --> 02:09:33,920
i'll just uh quickly do i had one more

02:09:33,360 --> 02:09:36,639
slide

02:09:33,920 --> 02:09:38,239
uh yeah so the other critical part about

02:09:36,639 --> 02:09:40,639
the nested virtualization is the

02:09:38,239 --> 02:09:42,560
additional word switch that we introduce

02:09:40,639 --> 02:09:44,560
or which we call as a nested world

02:09:42,560 --> 02:09:48,320
switch uh which is nothing but

02:09:44,560 --> 02:09:49,920
when you are in other words when we are

02:09:48,320 --> 02:09:52,800
moving from virtual access mode

02:09:49,920 --> 02:09:53,280
to virtual vs or view mode uh or vice

02:09:52,800 --> 02:09:55,760
versa

02:09:53,280 --> 02:09:56,880
it's a nested virtual tested world

02:09:55,760 --> 02:09:58,800
switch actually

02:09:56,880 --> 02:10:00,639
so the switching from virtual access

02:09:58,800 --> 02:10:03,440
mode to virtual vs to

02:10:00,639 --> 02:10:06,239
view mode is actually voluntary because

02:10:03,440 --> 02:10:07,840
the guest hyper error decides to run the

02:10:06,239 --> 02:10:09,599
guest linux and this happens when it

02:10:07,840 --> 02:10:13,599
runs in accelerate instruction

02:10:09,599 --> 02:10:17,360
uh with watch when virtual

02:10:13,599 --> 02:10:19,119
spv is one and

02:10:17,360 --> 02:10:21,360
that's a voluntary execution it's easy

02:10:19,119 --> 02:10:23,760
to trap and emulate and then

02:10:21,360 --> 02:10:25,520
we have uh guests it has to guess high

02:10:23,760 --> 02:10:26,800
pressure hyper speech which is like an

02:10:25,520 --> 02:10:28,079
invalidator switch which generally

02:10:26,800 --> 02:10:29,440
happens when inject when we are

02:10:28,079 --> 02:10:30,159
injecting an interrupt to the guest

02:10:29,440 --> 02:10:31,760
hyperlink

02:10:30,159 --> 02:10:34,239
or we are injecting guest which falls to

02:10:31,760 --> 02:10:36,960
the gas hyper or we are redirecting some

02:10:34,239 --> 02:10:39,840
virtual instruction trap to the

02:10:36,960 --> 02:10:39,840
guest hyper either

02:10:40,880 --> 02:10:44,880
and the whole stage all stage of the

02:10:43,440 --> 02:10:48,079
hypervisor

02:10:44,880 --> 02:10:51,199
uh contact streets are happening

02:10:48,079 --> 02:10:54,079
through the hypervisor that means uh if

02:10:51,199 --> 02:10:55,119
the virtual hypervisor have not have

02:10:54,079 --> 02:10:56,880
another

02:10:55,119 --> 02:10:59,599
hypervisor and this virtual health

02:10:56,880 --> 02:11:02,880
provider i have another video hypervisor

02:10:59,599 --> 02:11:06,480
but uh context switching

02:11:02,880 --> 02:11:09,679
in the root hypervisor is the same level

02:11:06,480 --> 02:11:10,800
isn't that yeah that's absolutely

02:11:09,679 --> 02:11:14,159
correct

02:11:10,800 --> 02:11:16,239
all the traps will be routed all right

02:11:14,159 --> 02:11:17,679
we'll go to the host router to get some

02:11:16,239 --> 02:11:18,960
if you're one more hybrid it will rotate

02:11:17,679 --> 02:11:20,880
through this gas tank to another gas

02:11:18,960 --> 02:11:24,480
level against two hydrolyzer

02:11:20,880 --> 02:11:27,520
so it will be like a tree structure

02:11:24,480 --> 02:11:30,320
okay okay that's so so

02:11:27,520 --> 02:11:30,320
so interesting

02:11:30,800 --> 02:11:34,159
you this picture is simple maybe you can

02:11:33,199 --> 02:11:37,440
give us

02:11:34,159 --> 02:11:38,239
give uh give out a more complex complex

02:11:37,440 --> 02:11:41,360
picture that's

02:11:38,239 --> 02:11:44,800
uh i have errors i have a

02:11:41,360 --> 02:11:47,040
lot of yeah oh my god

02:11:44,800 --> 02:11:48,880
yeah it's a simplified picture again uh

02:11:47,040 --> 02:11:50,800
and like we are just starting on this

02:11:48,880 --> 02:11:51,520
work and we'll have more idea as we go

02:11:50,800 --> 02:11:53,280
along

02:11:51,520 --> 02:11:56,400
and maybe i'll improve this

02:11:53,280 --> 02:11:56,400
visualization actually

02:11:58,079 --> 02:12:06,239
yeah i first heard about the

02:12:02,159 --> 02:12:10,239
uh heard about the nested hypervisor is

02:12:06,239 --> 02:12:10,239
from um

02:12:10,920 --> 02:12:17,360
88.2 maybe yeah

02:12:13,119 --> 02:12:17,360
but i don't make sense and today i mix

02:12:17,679 --> 02:12:21,679
good that you actually mentioned about

02:12:19,360 --> 02:12:22,239
arm so what happened with the arm v8 was

02:12:21,679 --> 02:12:24,560
like

02:12:22,239 --> 02:12:26,079
a v8 dot zero brought here hybridizer

02:12:24,560 --> 02:12:28,239
support all that is fine

02:12:26,079 --> 02:12:30,400
but when they eventually started

02:12:28,239 --> 02:12:33,199
thinking about the nested virtualization

02:12:30,400 --> 02:12:34,480
uh uh the the trapping mechanism

02:12:33,199 --> 02:12:36,960
required to

02:12:34,480 --> 02:12:38,159
do the nested virtualization in software

02:12:36,960 --> 02:12:40,719
was missing so far

02:12:38,159 --> 02:12:43,119
with eight with um we had two actually

02:12:40,719 --> 02:12:45,199
they first added the trapping mechanism

02:12:43,119 --> 02:12:46,960
okay eventually what uh what they

02:12:45,199 --> 02:12:48,480
realized was like the trapping mechanism

02:12:46,960 --> 02:12:49,360
is fine it works constantly fine but

02:12:48,480 --> 02:12:52,079
it's too slow

02:12:49,360 --> 02:12:52,719
so with i think 8.4 or right dots they

02:12:52,079 --> 02:12:55,199
added

02:12:52,719 --> 02:12:56,320
the second uh acceleration or

02:12:55,199 --> 02:12:56,960
improvement for the nested

02:12:56,320 --> 02:13:00,000
virtualization

02:12:56,960 --> 02:13:01,679
hardware where they are they can save

02:13:00,000 --> 02:13:03,520
certain trap and emulation

02:13:01,679 --> 02:13:06,000
for the host hypervisor and do it in

02:13:03,520 --> 02:13:08,159
hardware actually through memory lights

02:13:06,000 --> 02:13:09,280
so that eventually we can even do for

02:13:08,159 --> 02:13:11,040
this five hyperion

02:13:09,280 --> 02:13:12,639
h extension support but not now

02:13:11,040 --> 02:13:14,719
immediately right now

02:13:12,639 --> 02:13:17,840
first thing is to get a softer nested

02:13:14,719 --> 02:13:17,840
vocal working

02:13:26,159 --> 02:13:33,119
oh another problem yeah and uh

02:13:30,880 --> 02:13:33,119
the

02:13:33,920 --> 02:13:37,920
i i think uh i think the risk five the

02:13:36,800 --> 02:13:41,400
hypervisor

02:13:37,920 --> 02:13:45,040
uh specifically is similar to the

02:13:41,400 --> 02:13:48,079
x86 it's similar to the arm

02:13:45,040 --> 02:13:51,760
and the the i i mean

02:13:48,079 --> 02:13:55,040
i mean one thing i mean one thing is the

02:13:51,760 --> 02:13:58,560
about the root page take root play table

02:13:55,040 --> 02:13:58,960
and in in arm under explain we all put

02:13:58,560 --> 02:14:02,320
the

02:13:58,960 --> 02:14:06,800
root page table in the gva

02:14:02,320 --> 02:14:06,800
but i remember the

02:14:06,960 --> 02:14:09,199
the

02:14:10,960 --> 02:14:18,400
gpa but i remember the x86

02:14:14,320 --> 02:14:21,840
is is hpa so

02:14:18,400 --> 02:14:25,760
there is no way that

02:14:21,840 --> 02:14:30,000
x86 to implement nested virtualization

02:14:25,760 --> 02:14:31,920
than that i think x86 has

02:14:30,000 --> 02:14:33,679
but i have not investigated how they are

02:14:31,920 --> 02:14:35,280
doing uh so they have a very different

02:14:33,679 --> 02:14:38,800
way of virtualizing so

02:14:35,280 --> 02:14:40,079
so they have uh so i i cannot comment on

02:14:38,800 --> 02:14:42,480
it they certainly have that

02:14:40,079 --> 02:14:43,440
uh but we need to investigate that how

02:14:42,480 --> 02:14:46,480
it's uh yeah

02:14:43,440 --> 02:14:49,440
so what we have right now is like

02:14:46,480 --> 02:14:50,320
uh very less csrs compared to what arm

02:14:49,440 --> 02:14:53,440
has

02:14:50,320 --> 02:14:54,880
when it's similar or quite close i was

02:14:53,440 --> 02:14:56,000
not exactly similar

02:14:54,880 --> 02:14:58,079
because we have different number of

02:14:56,000 --> 02:15:00,480
pixels so it's close to arm

02:14:58,079 --> 02:15:03,520
uh what's fashion host extension which

02:15:00,480 --> 02:15:05,840
they added later to accelerate the kvm

02:15:03,520 --> 02:15:06,840
so which was like part of va 8.1

02:15:05,840 --> 02:15:09,760
actually

02:15:06,840 --> 02:15:13,360
so

02:15:09,760 --> 02:15:23,040
okay next to the

02:15:13,360 --> 02:15:25,920
g stage

02:15:23,040 --> 02:15:28,719
i think your time is up also so this is

02:15:25,920 --> 02:15:31,679
the time for the break

02:15:28,719 --> 02:15:32,560
uh we gotta talk right we have a thought

02:15:31,679 --> 02:15:34,480
right oh sorry

02:15:32,560 --> 02:15:36,159
um yeah i got confused we have a talk

02:15:34,480 --> 02:15:40,239
for the vector

02:15:36,159 --> 02:15:40,239
yeah swap the slides over here

02:15:47,360 --> 02:15:51,840
okay green time do you want to be the

02:15:49,360 --> 02:15:51,840
presenter

02:15:52,800 --> 02:15:56,400
yeah white background slides works

02:15:54,639 --> 02:15:59,920
really well for the download button

02:15:56,400 --> 02:15:59,920
now you can see the download button

02:16:00,880 --> 02:16:05,840
so confused

02:16:08,560 --> 02:16:13,440
all right so i think we're ready to go

02:16:10,000 --> 02:16:13,440
because uh this rolled up against the

02:16:16,840 --> 02:16:19,840
end

02:16:20,639 --> 02:16:29,760
uh hi everyone i'm i'm green time

02:16:23,840 --> 02:16:33,040
and this is vincent hi everyone i'm lisa

02:16:29,760 --> 02:16:33,599
hi everyone we're going to we're going

02:16:33,040 --> 02:16:37,280
to

02:16:33,599 --> 02:16:47,840
talk about the respite vector support

02:16:37,280 --> 02:16:47,840
in venus

02:16:49,120 --> 02:16:53,280
okay and then this is our this is our

02:16:52,000 --> 02:16:55,519
light today

02:16:53,280 --> 02:16:58,080
that uh we are going to talk about what

02:16:55,519 --> 02:17:00,800
is reciprocating its current

02:16:58,080 --> 02:17:03,200
status and vincent will talk about the

02:17:00,800 --> 02:17:03,519
user space protein and i will talk about

02:17:03,200 --> 02:17:06,719
the

02:17:03,519 --> 02:17:08,960
kernel space protein and

02:17:06,719 --> 02:17:11,439
after that we have conclusions and

02:17:08,960 --> 02:17:11,439
reference

02:17:12,840 --> 02:17:15,840
pages

02:17:18,559 --> 02:17:25,920
okay so what is risk 5 vector

02:17:22,240 --> 02:17:29,120
from the risk by reader book it says

02:17:25,920 --> 02:17:31,519
it is a data label parallelism

02:17:29,120 --> 02:17:32,639
and it can compute a lot of data

02:17:31,519 --> 02:17:35,760
concurrently

02:17:32,639 --> 02:17:39,040
and it's a more elegant simply

02:17:35,760 --> 02:17:40,160
and the size of vector register is

02:17:39,040 --> 02:17:43,439
determined

02:17:40,160 --> 02:17:46,639
by the implementation so

02:17:43,439 --> 02:17:47,519
what the advantage of it the programmers

02:17:46,639 --> 02:17:50,639
don't need to

02:17:47,519 --> 02:17:53,280
rewrite a code again and

02:17:50,639 --> 02:17:54,880
it could use fewer instructions than

02:17:53,280 --> 02:17:58,319
simply

02:17:54,880 --> 02:17:59,439
however because the the size of vector

02:17:58,319 --> 02:18:02,639
register

02:17:59,439 --> 02:18:05,840
is implementation defined

02:18:02,639 --> 02:18:09,359
so that every code may have

02:18:05,840 --> 02:18:11,920
different kinds of vector lengths and

02:18:09,359 --> 02:18:13,200
how do we how do you know the the vector

02:18:11,920 --> 02:18:17,040
lens we could

02:18:13,200 --> 02:18:20,399
read it from a csr blm b

02:18:17,040 --> 02:18:23,519
so take an example if if your

02:18:20,399 --> 02:18:27,200
vlan is 5 12 bit

02:18:23,519 --> 02:18:30,880
and the last 64 bits and the 64

02:18:27,200 --> 02:18:34,639
bytes for per register so we have all

02:18:30,880 --> 02:18:38,080
32 vector register would which would

02:18:34,639 --> 02:18:41,519
cause 2 2 kilobyte

02:18:38,080 --> 02:18:41,519
to buy space

02:18:46,880 --> 02:18:53,040
so in the current

02:18:50,319 --> 02:18:53,920
the current respite vector status is

02:18:53,040 --> 02:18:57,920
that

02:18:53,920 --> 02:19:01,760
the the spec version 0.9 is released

02:18:57,920 --> 02:19:04,319
and in gbc we send some patches

02:19:01,760 --> 02:19:04,880
and there are some patches it is still

02:19:04,319 --> 02:19:08,160
working

02:19:04,880 --> 02:19:11,920
in progress and mostly is for optimize

02:19:08,160 --> 02:19:16,000
for the memory copy or string compare

02:19:11,920 --> 02:19:19,280
string length such a kind of function

02:19:16,000 --> 02:19:20,160
that we could implement the vector

02:19:19,280 --> 02:19:24,080
version

02:19:20,160 --> 02:19:27,760
for that and in the linux kernel we send

02:19:24,080 --> 02:19:31,120
a virgin version 6 ipc page based on

02:19:27,760 --> 02:19:33,040
0.9 spec and there are some features are

02:19:31,120 --> 02:19:36,319
still working progress

02:19:33,040 --> 02:19:39,679
like canomo vector and

02:19:36,319 --> 02:19:43,280
lazy vector and we have done some tests

02:19:39,679 --> 02:19:44,000
in spike and q mu with our user space

02:19:43,280 --> 02:19:47,519
vector

02:19:44,000 --> 02:19:52,960
test case and the kernel xo

02:19:47,519 --> 02:19:52,960
we also run the stress energy to test it

02:19:59,280 --> 02:20:05,760
so this is the protein overview

02:20:03,040 --> 02:20:06,960
today we were going to talk the

02:20:05,760 --> 02:20:10,080
executable

02:20:06,960 --> 02:20:12,960
and we will talk about how how to how

02:20:10,080 --> 02:20:16,240
this executable use the

02:20:12,960 --> 02:20:19,280
generic version or the vector version

02:20:16,240 --> 02:20:23,280
by iphone and we will talk about the

02:20:19,280 --> 02:20:26,640
signal handler and how should a kernel

02:20:23,280 --> 02:20:29,120
set up the sig context and

02:20:26,640 --> 02:20:31,120
we will talk about the vector context

02:20:29,120 --> 02:20:33,760
information about the header

02:20:31,120 --> 02:20:34,880
how to define the header in kernel space

02:20:33,760 --> 02:20:38,960
or in the

02:20:34,880 --> 02:20:42,240
user space and we will talk about

02:20:38,960 --> 02:20:45,840
context switch and also the pcs

02:20:42,240 --> 02:20:45,840
system code

02:20:50,160 --> 02:20:54,080
okay now i will hand over to vincent he

02:20:52,640 --> 02:20:57,439
will talk about the

02:20:54,080 --> 02:21:01,200
user space protein then after that i

02:20:57,439 --> 02:21:01,200
will talk about the kernel space

02:21:03,439 --> 02:21:06,080
hi folks

02:21:08,399 --> 02:21:11,439
here i want to share some experience of

02:21:10,720 --> 02:21:14,319
02:21:11,439 --> 02:21:14,800
big tension into the driver's c12 chain

02:21:14,319 --> 02:21:18,000
and

02:21:14,800 --> 02:21:20,960
as green time mentioned earlier

02:21:18,000 --> 02:21:21,680
the v tension is primarily used to speed

02:21:20,960 --> 02:21:25,600
up

02:21:21,680 --> 02:21:29,040
the data processing so our cardigan also

02:21:25,600 --> 02:21:31,520
try to up use this tension to optimize

02:21:29,040 --> 02:21:33,120
the we'll know jupiter c function such

02:21:31,520 --> 02:21:36,319
as memory copy memory set

02:21:33,120 --> 02:21:37,680
and string copy and so my first goal is

02:21:36,319 --> 02:21:40,080
to integrate this from

02:21:37,680 --> 02:21:41,280
this this optimal function into the juba

02:21:40,080 --> 02:21:44,640
c

02:21:41,280 --> 02:21:48,720
and in addition we find uh

02:21:44,640 --> 02:21:52,840
some of the executing juventus future

02:21:48,720 --> 02:21:55,520
were broken due to the influence of the

02:21:52,840 --> 02:21:58,560
extension so the next

02:21:55,520 --> 02:22:00,319
the next goal is we will make the

02:21:58,560 --> 02:22:03,600
executing trivac future

02:22:00,319 --> 02:22:07,280
work as usual let's go to the first

02:22:03,600 --> 02:22:09,359
topic how to use the optimize function

02:22:07,280 --> 02:22:11,359
how to integrate the optimize function

02:22:09,359 --> 02:22:16,240
into the givency

02:22:11,359 --> 02:22:20,000
in this case i think the most intuitive

02:22:16,240 --> 02:22:21,520
method to to do this is directly replace

02:22:20,000 --> 02:22:24,720
the current

02:22:21,520 --> 02:22:28,160
implementation with the optimize

02:22:24,720 --> 02:22:31,520
optimize function but it will decrease

02:22:28,160 --> 02:22:34,319
the function probability so we

02:22:31,520 --> 02:22:34,960
introduce the gnu interrupt function

02:22:34,319 --> 02:22:39,520
support

02:22:34,960 --> 02:22:42,720
also known as iphone to respond driver c

02:22:39,520 --> 02:22:44,800
and it can make jpc follow users rule to

02:22:42,720 --> 02:22:46,800
select an appropriate function

02:22:44,800 --> 02:22:48,399
based on the highway capability in wrong

02:22:46,800 --> 02:22:52,160
time

02:22:48,399 --> 02:22:54,560
in other words if the platform has

02:22:52,160 --> 02:22:56,240
the attention support the jupiter will

02:22:54,560 --> 02:23:00,080
follow user rule to

02:22:56,240 --> 02:23:04,240
select the big tension optimize function

02:23:00,080 --> 02:23:07,920
instead instead of the original function

02:23:04,240 --> 02:23:10,960
the most of the effort to add granule

02:23:07,920 --> 02:23:12,960
support into the risk i think support

02:23:10,960 --> 02:23:15,760
introduced by two chinese in the

02:23:12,960 --> 02:23:17,600
bing talk so i'm very grateful to

02:23:15,760 --> 02:23:19,520
nielsen too for 18.

02:23:17,600 --> 02:23:22,080
i found the support to the gcc and the

02:23:19,520 --> 02:23:22,080
bingo top

02:23:26,240 --> 02:23:31,359
now the optimum advances the optimize

02:23:28,960 --> 02:23:34,240
function has been able to

02:23:31,359 --> 02:23:35,439
integrate through the juvenile chain

02:23:34,240 --> 02:23:38,479
then we will go

02:23:35,439 --> 02:23:40,880
we will go to the next topic

02:23:38,479 --> 02:23:43,359
make the existing jubac future worker as

02:23:40,880 --> 02:23:43,359
usual

02:23:43,439 --> 02:23:46,800
i think for a current triple c big

02:23:45,920 --> 02:23:49,040
extension means

02:23:46,800 --> 02:23:50,399
a bunch of new instruction in the new

02:23:49,040 --> 02:23:52,720
register

02:23:50,399 --> 02:23:53,920
so i think most of the work is to

02:23:52,720 --> 02:23:57,040
address the api

02:23:53,920 --> 02:23:57,520
such as coding convention so in jupiter

02:23:57,040 --> 02:24:01,600
c

02:23:57,520 --> 02:24:04,640
i've seen the api there are two type of

02:24:01,600 --> 02:24:07,600
the two kinds of api one is between the

02:24:04,640 --> 02:24:09,359
two binary in user space and the other

02:24:07,600 --> 02:24:12,399
one is between the juba c

02:24:09,359 --> 02:24:15,439
and the kernel for the first

02:24:12,399 --> 02:24:16,160
for the user's base case according to

02:24:15,439 --> 02:24:19,319
the

02:24:16,160 --> 02:24:23,040
coding convention rule in a

02:24:19,319 --> 02:24:25,920
0.9 spec we check the

02:24:23,040 --> 02:24:26,319
of the assembly code function and we

02:24:25,920 --> 02:24:30,000
find

02:24:26,319 --> 02:24:32,560
that we need to add sound set

02:24:30,000 --> 02:24:34,560
and restore mechanism for vcsr the

02:24:32,560 --> 02:24:43,600
second test function and the getcontext

02:24:34,560 --> 02:24:45,680
and the swap context function and for uh

02:24:43,600 --> 02:24:46,800
for the api between kernel and the g by

02:24:45,680 --> 02:24:49,120
c

02:24:46,800 --> 02:24:51,600
according to respect all the vector

02:24:49,120 --> 02:24:55,200
registers are called safe register

02:24:51,600 --> 02:24:57,840
so when exception or interrupt

02:24:55,200 --> 02:24:58,560
turn on it to ensure the correctness of

02:24:57,840 --> 02:25:01,280
vector

02:24:58,560 --> 02:25:02,080
context across the previous mode

02:25:01,280 --> 02:25:05,760
transition

02:25:02,080 --> 02:25:08,640
transition an rln exception

02:25:05,760 --> 02:25:10,640
interrupt signal handle also belongs to

02:25:08,640 --> 02:25:12,800
this case this is because

02:25:10,640 --> 02:25:15,520
the caller of the signal handler is

02:25:12,800 --> 02:25:19,840
kernel not the usual function

02:25:15,520 --> 02:25:20,319
in user space and in addition jupiter c

02:25:19,840 --> 02:25:23,280
also

02:25:20,319 --> 02:25:24,160
provides user with some information to

02:25:23,280 --> 02:25:27,120
handle the

02:25:24,160 --> 02:25:28,080
received signal such as c contact

02:25:27,120 --> 02:25:30,800
structure or

02:25:28,080 --> 02:25:30,800
signal stack

02:25:32,000 --> 02:25:38,000
so a simplified

02:25:35,359 --> 02:25:38,720
signal processing flow is is shown in

02:25:38,000 --> 02:25:41,840
this

02:25:38,720 --> 02:25:42,880
slide and before jump into signal

02:25:41,840 --> 02:25:46,640
handler

02:25:42,880 --> 02:25:47,840
kernel will help process to set up a

02:25:46,640 --> 02:25:50,240
requirement

02:25:47,840 --> 02:25:52,720
environment for signal handler such as

02:25:50,240 --> 02:25:56,080
signal stack

02:25:52,720 --> 02:25:59,359
and in order to avoid the

02:25:56,080 --> 02:26:02,560
content the process context is

02:25:59,359 --> 02:26:03,359
destroyed in the signal handler kernel

02:26:02,560 --> 02:26:05,760
will

02:26:03,359 --> 02:26:06,960
use a c context structure define the

02:26:05,760 --> 02:26:09,840
internal sig

02:26:06,960 --> 02:26:12,319
context head file to save the context to

02:26:09,840 --> 02:26:15,520
the signal and the signal stack

02:26:12,319 --> 02:26:18,720
and up after jump jumping tool

02:26:15,520 --> 02:26:21,920
into the signal handler user may use

02:26:18,720 --> 02:26:25,359
the juba cc context to

02:26:21,920 --> 02:26:28,640
to ask to to to access the

02:26:25,359 --> 02:26:32,960
dignostack to get the required

02:26:28,640 --> 02:26:35,920
process contacts so we can see that

02:26:32,960 --> 02:26:37,520
the the sig contest chart used in kernel

02:26:35,920 --> 02:26:40,960
and the intricacy

02:26:37,520 --> 02:26:43,760
comes from two different two different

02:26:40,960 --> 02:26:45,600
files one is in kernels context head

02:26:43,760 --> 02:26:49,840
file and the other one is in

02:26:45,600 --> 02:26:49,840
juventus context head file

02:26:52,960 --> 02:27:00,240
so if we hope the above mechanism

02:26:56,800 --> 02:27:02,800
can work in vector environment we need

02:27:00,240 --> 02:27:04,960
to add the vector register to

02:27:02,800 --> 02:27:06,240
c concave structure in linux and the

02:27:04,960 --> 02:27:08,319
driver c

02:27:06,240 --> 02:27:10,160
and they also mean that every time we

02:27:08,319 --> 02:27:12,319
support a new extension

02:27:10,160 --> 02:27:15,280
we need to modify the c context

02:27:12,319 --> 02:27:18,319
structure in linux and drive c2

02:27:15,280 --> 02:27:21,439
so the idea comes to my mind

02:27:18,319 --> 02:27:23,200
could we make g by z include a canonic

02:27:21,439 --> 02:27:26,399
context header file

02:27:23,200 --> 02:27:28,720
i think the answer is yes it

02:27:26,399 --> 02:27:29,439
is because the jupiter c generic c

02:27:28,720 --> 02:27:32,479
context

02:27:29,439 --> 02:27:36,800
head file already delayed but

02:27:32,479 --> 02:27:40,319
if we directly replace the risk file

02:27:36,800 --> 02:27:43,280
big context header file with the kernel

02:27:40,319 --> 02:27:44,080
second head file some program may

02:27:43,280 --> 02:27:48,319
encounters

02:27:44,080 --> 02:27:48,319
a api incompatible issue

02:27:51,680 --> 02:27:58,800
fine i think the reason

02:27:54,800 --> 02:28:00,640
can be found in this slide the 3 bcc

02:27:58,800 --> 02:28:03,920
context structure and the

02:28:00,640 --> 02:28:07,600
venus 6 container structure are listed

02:28:03,920 --> 02:28:10,640
in these two figures we can find

02:28:07,600 --> 02:28:11,600
they have the same memory layout but the

02:28:10,640 --> 02:28:15,439
element names

02:28:11,600 --> 02:28:18,880
are different so if we force

02:28:15,439 --> 02:28:22,800
the jupiter c context to be aligned with

02:28:18,880 --> 02:28:26,000
the linux kernel c context structure

02:28:22,800 --> 02:28:30,080
a program which has used

02:28:26,000 --> 02:28:33,200
the jupiter context structure will

02:28:30,080 --> 02:28:33,200
fail to compile

02:28:36,479 --> 02:28:42,240
i think lipagus is one of the example

02:28:39,680 --> 02:28:43,840
the different gcc and white screens use

02:28:42,240 --> 02:28:45,840
triple cc context

02:28:43,840 --> 02:28:47,439
to get the written address from the

02:28:45,840 --> 02:28:50,560
signal stack

02:28:47,439 --> 02:28:53,680
so if we if so this change

02:28:50,560 --> 02:28:56,640
this change will make the devices that

02:28:53,680 --> 02:28:57,359
will break the liquid gcc on white skin

02:28:56,640 --> 02:29:00,640
and the mac

02:28:57,359 --> 02:29:01,359
lipo gcc cannot be compiled oh by the

02:29:00,640 --> 02:29:04,000
way

02:29:01,359 --> 02:29:05,439
lrvn doesn't have this issue because

02:29:04,000 --> 02:29:09,600
it's direct access

02:29:05,439 --> 02:29:13,359
the signal stack a sql context

02:29:09,600 --> 02:29:16,880
through the memory offset

02:29:13,359 --> 02:29:18,560
so in order to evaluate the impact of

02:29:16,880 --> 02:29:22,000
this change

02:29:18,560 --> 02:29:25,359
i quickly resolve the liberty

02:29:22,000 --> 02:29:27,680
cc issue and followed

02:29:25,359 --> 02:29:29,040
string whales and situation to build

02:29:27,680 --> 02:29:32,319
multiple image

02:29:29,040 --> 02:29:36,720
by open embedded data and fortunately

02:29:32,319 --> 02:29:39,840
i didn't encount any url

02:29:36,720 --> 02:29:42,880
so from this result i guess

02:29:39,840 --> 02:29:44,160
that at least the impacts of this change

02:29:42,880 --> 02:29:47,600
may not be serious

02:29:44,160 --> 02:29:50,080
at this moment and i think

02:29:47,600 --> 02:29:51,120
right now maybe a good moment to do this

02:29:50,080 --> 02:29:54,479
change

02:29:51,120 --> 02:29:57,520
so i have sent an ipfc page

02:29:54,479 --> 02:30:01,600
to the grpc million list and

02:29:57,520 --> 02:30:05,760
if someone have other idea or other

02:30:01,600 --> 02:30:09,840
feedback or other concerns please

02:30:05,760 --> 02:30:11,280
don't hesitate to post them to the

02:30:09,840 --> 02:30:18,080
discussion through in the juvenile

02:30:11,280 --> 02:30:21,200
emailing system

02:30:18,080 --> 02:30:24,880
and now user can successfully get the

02:30:21,200 --> 02:30:28,720
vector test from the signal stack

02:30:24,880 --> 02:30:32,000
but there has another api issue

02:30:28,720 --> 02:30:35,520
and this slide shows the ucg

02:30:32,000 --> 02:30:38,640
scenario if a

02:30:35,520 --> 02:30:42,080
user wants to specify a memory region

02:30:38,640 --> 02:30:45,520
as the signal stack how does he

02:30:42,080 --> 02:30:47,840
to know the appropriate signal stack

02:30:45,520 --> 02:30:47,840
size

02:30:52,240 --> 02:30:59,359
in general user can use two micro

02:30:55,840 --> 02:31:02,800
to quickly get the the

02:30:59,359 --> 02:31:05,840
the the information one macro is minimal

02:31:02,800 --> 02:31:08,160
signal stack size

02:31:05,840 --> 02:31:10,720
which is which specifies the minima

02:31:08,160 --> 02:31:14,000
stack size for a signal handler

02:31:10,720 --> 02:31:16,720
so it could it it would be great

02:31:14,000 --> 02:31:18,160
or equal to the size of c contact

02:31:16,720 --> 02:31:20,560
structure

02:31:18,160 --> 02:31:21,600
and then the other macro is signal stack

02:31:20,560 --> 02:31:24,640
size

02:31:21,600 --> 02:31:26,000
uh it is a system default spacing virus

02:31:24,640 --> 02:31:28,640
deck size that will be

02:31:26,000 --> 02:31:31,840
used to cover the usual case so the

02:31:28,640 --> 02:31:34,880
value of the signal stack size

02:31:31,840 --> 02:31:38,399
would be three to four times of

02:31:34,880 --> 02:31:41,280
minimal signal stack size

02:31:38,399 --> 02:31:42,080
because minima stack signal stack size

02:31:41,280 --> 02:31:46,000
is a constant

02:31:42,080 --> 02:31:49,200
value so in general folks will

02:31:46,000 --> 02:31:50,160
define define the minimal signal step

02:31:49,200 --> 02:31:53,439
size

02:31:50,160 --> 02:31:55,840
uh the as the

02:31:53,439 --> 02:31:57,600
secondary stock size or maybe greater

02:31:55,840 --> 02:32:01,600
than the signal state

02:31:57,600 --> 02:32:03,840
signals contact short size

02:32:01,600 --> 02:32:03,840
but

02:32:04,960 --> 02:32:11,760
but when but when

02:32:08,399 --> 02:32:15,359
introducing the v tension the

02:32:11,760 --> 02:32:19,760
above rule may be cannot followed

02:32:15,359 --> 02:32:22,880
it's because the theoretical maxima vlan

02:32:19,760 --> 02:32:26,000
is 2 to power of

02:32:22,880 --> 02:32:30,240
x length -1

02:32:26,000 --> 02:32:32,760
it will cause that it will cause the

02:32:30,240 --> 02:32:34,399
contact structure size to be a

02:32:32,760 --> 02:32:39,840
astronomical number

02:32:34,399 --> 02:32:39,840
as well so

02:32:41,680 --> 02:32:44,960
how to determine the minimum signal

02:32:43,600 --> 02:32:48,399
state size in the

02:32:44,960 --> 02:32:49,439
signal stack size here we propose a

02:32:48,399 --> 02:32:52,880
method to

02:32:49,439 --> 02:32:57,439
solve this issue in order

02:32:52,880 --> 02:33:01,680
to make the original mechanism

02:32:57,439 --> 02:33:05,200
still can work we assume the maxima

02:33:01,680 --> 02:33:08,720
we lend us for 4k bit

02:33:05,200 --> 02:33:12,160
and used to define the minimum signal

02:33:08,720 --> 02:33:14,720
state size and the signal state size

02:33:12,160 --> 02:33:16,080
so user still can use these two macro

02:33:14,720 --> 02:33:19,439
tools

02:33:16,080 --> 02:33:23,439
to allocate the required memory region

02:33:19,439 --> 02:33:26,880
towards the signal stack in addition

02:33:23,439 --> 02:33:31,040
we reference to m64 implementation

02:33:26,880 --> 02:33:33,680
which create a new accessory entry tool

02:33:31,040 --> 02:33:34,720
for use for kernel to pass the precise

02:33:33,680 --> 02:33:38,319
minima

02:33:34,720 --> 02:33:38,800
signal stack size to user so it gives

02:33:38,319 --> 02:33:42,160
you

02:33:38,800 --> 02:33:45,920
a user a way to

02:33:42,160 --> 02:33:50,000
adjust its memory and to avoid wasting

02:33:45,920 --> 02:33:53,200
memory memory if the physical vlan

02:33:50,000 --> 02:33:57,200
is smaller than 4k bit

02:33:53,200 --> 02:34:00,880
it's also a provider user that

02:33:57,200 --> 02:34:03,920
he can break the 4k bit

02:34:00,880 --> 02:34:08,960
the 4k bit assumption if

02:34:03,920 --> 02:34:12,880
it's maximum vlan is greater than 4k bit

02:34:08,960 --> 02:34:17,120
the the above i have finished the above

02:34:12,880 --> 02:34:20,800
implementation and i and it can be find

02:34:17,120 --> 02:34:21,840
in the following ifc page and this page

02:34:20,800 --> 02:34:24,960
will be

02:34:21,840 --> 02:34:31,840
is be included in the kernel back

02:34:24,960 --> 02:34:31,840
kernel ic vector page set

02:34:33,439 --> 02:34:40,000
so finally uh the following

02:34:36,479 --> 02:34:43,120
we we use the we solve the primary

02:34:40,000 --> 02:34:46,240
four problem in the

02:34:43,120 --> 02:34:49,200
in in in a triple c protein and

02:34:46,240 --> 02:34:49,920
we have send the three rc page to soft

02:34:49,200 --> 02:34:52,319
land

02:34:49,920 --> 02:34:59,120
and next green time will introduce the

02:34:52,319 --> 02:35:02,800
work in the linux

02:34:59,120 --> 02:35:06,000
hi everyone please uh the only

02:35:02,800 --> 02:35:09,359
13 pages is that i send in

02:35:06,000 --> 02:35:12,000
version 6 vector support page set

02:35:09,359 --> 02:35:13,520
to the linux kernel main list i'm going

02:35:12,000 --> 02:35:17,120
to talk about

02:35:13,520 --> 02:35:18,319
the the most important four patches that

02:35:17,120 --> 02:35:22,080
i think

02:35:18,319 --> 02:35:22,080
is so

02:35:24,960 --> 02:35:32,160
yeah as vincent just mentioned the

02:35:28,560 --> 02:35:33,520
the new context here is a most important

02:35:32,160 --> 02:35:36,960
data structure that

02:35:33,520 --> 02:35:40,960
kernel and the user's base

02:35:36,960 --> 02:35:44,479
language lesson data structure so that

02:35:40,960 --> 02:35:48,240
kernel would set it and

02:35:44,479 --> 02:35:51,840
in signal handler they would read it

02:35:48,240 --> 02:35:54,479
and so in this data structure we can see

02:35:51,840 --> 02:35:57,760
the general purpose ranges here and the

02:35:54,479 --> 02:35:58,479
boiling point register here and we will

02:35:57,760 --> 02:36:03,840
need to

02:35:58,479 --> 02:36:06,160
add the vector register here

02:36:03,840 --> 02:36:06,880
but the vector register doesn't look

02:36:06,160 --> 02:36:09,359
like the

02:36:06,880 --> 02:36:10,640
general publisher edges and the voting

02:36:09,359 --> 02:36:13,760
polarizer layout

02:36:10,640 --> 02:36:14,319
they have fixed lens the vector register

02:36:13,760 --> 02:36:17,760
they

02:36:14,319 --> 02:36:18,560
they have they may have different kind

02:36:17,760 --> 02:36:22,399
of

02:36:18,560 --> 02:36:25,439
vector lens so it is implementation

02:36:22,399 --> 02:36:29,840
defined so we have to define a

02:36:25,439 --> 02:36:32,560
data structure to to describe the vector

02:36:29,840 --> 02:36:32,560
registers

02:36:34,319 --> 02:36:40,960
so in here we define a vector structures

02:36:37,920 --> 02:36:43,920
here that we would save some

02:36:40,960 --> 02:36:44,880
important csr here and uh the copy

02:36:43,920 --> 02:36:48,000
pointer

02:36:44,880 --> 02:36:48,000
to point to the

02:36:48,640 --> 02:36:55,439
vector register and there is a size

02:36:52,240 --> 02:36:58,800
element here so we could know all the

02:36:55,439 --> 02:37:02,160
what kind of vector size is is it

02:36:58,800 --> 02:37:05,760
yeah and in kernel space the

02:37:02,160 --> 02:37:09,520
data p will be allocated dynamically

02:37:05,760 --> 02:37:11,680
and in user space as

02:37:09,520 --> 02:37:13,520
vincent just mentioned that we would

02:37:11,680 --> 02:37:19,840
need to save

02:37:13,520 --> 02:37:19,840
all the content to the signal stake

02:37:22,720 --> 02:37:29,439
so in here before we are going to the

02:37:26,560 --> 02:37:30,000
signal handler the kernel need to call

02:37:29,439 --> 02:37:33,200
the

02:37:30,000 --> 02:37:36,720
setup c context and to put

02:37:33,200 --> 02:37:40,240
three important arguments like a

02:37:36,720 --> 02:37:43,359
signal number or sig info

02:37:40,240 --> 02:37:46,160
pointer under the new context pointer

02:37:43,359 --> 02:37:47,359
and in the new context we need to copy

02:37:46,160 --> 02:37:50,640
all the

02:37:47,359 --> 02:37:52,399
for the gpr and the voting point and

02:37:50,640 --> 02:37:55,680
also the vector register

02:37:52,399 --> 02:37:56,399
and according to the to the layout so we

02:37:55,680 --> 02:38:00,080
would

02:37:56,399 --> 02:38:02,880
copy that that vector register to

02:38:00,080 --> 02:38:03,680
to that data structure so that user will

02:38:02,880 --> 02:38:06,399
know

02:38:03,680 --> 02:38:06,800
in user space that they will know how to

02:38:06,399 --> 02:38:10,640
get

02:38:06,800 --> 02:38:14,040
all these registers from it

02:38:10,640 --> 02:38:16,080
so does the secret return cisco

02:38:14,040 --> 02:38:19,359
absolutely

02:38:16,080 --> 02:38:21,600
after the signal handler

02:38:19,359 --> 02:38:22,880
is done and it will call a secure

02:38:21,600 --> 02:38:25,920
intensive code

02:38:22,880 --> 02:38:27,920
and go back to linux kernel and kernel

02:38:25,920 --> 02:38:28,720
would also according to that data

02:38:27,920 --> 02:38:33,200
structure

02:38:28,720 --> 02:38:33,200
to get the regis back

02:38:38,080 --> 02:38:44,479
and in this slide we'll talk about

02:38:41,439 --> 02:38:48,319
we also need to add a new type

02:38:44,479 --> 02:38:51,359
to support for the p-trace in p-trace

02:38:48,319 --> 02:38:52,080
it would send some season code to get

02:38:51,359 --> 02:38:55,120
the

02:38:52,080 --> 02:38:55,680
budget set and if they indicate they

02:38:55,120 --> 02:38:58,640
want to

02:38:55,680 --> 02:38:59,920
get the vector register set then we

02:38:58,640 --> 02:39:04,000
would

02:38:59,920 --> 02:39:07,280
we will copy it to the pointer that

02:39:04,000 --> 02:39:09,840
let user space give to the

02:39:07,280 --> 02:39:10,880
by list system code to give the kernel

02:39:09,840 --> 02:39:15,600
and we would

02:39:10,880 --> 02:39:18,479
copy to user to to this user pointer

02:39:15,600 --> 02:39:19,520
and in the other way if user use set

02:39:18,479 --> 02:39:22,960
register

02:39:19,520 --> 02:39:26,240
and we will also we will also

02:39:22,960 --> 02:39:29,520
copy from user to do that so

02:39:26,240 --> 02:39:29,920
we need to add this type and the coding

02:39:29,520 --> 02:39:33,120
to

02:39:29,920 --> 02:39:36,240
let that layout to copy it

02:39:33,120 --> 02:39:39,840
but the user need to know how big the

02:39:36,240 --> 02:39:42,960
regis size is and they need to allocate

02:39:39,840 --> 02:39:42,960
it first

02:39:48,240 --> 02:39:52,080
so in in this stage we will talk about

02:39:50,560 --> 02:39:54,479
the context switch

02:39:52,080 --> 02:39:55,760
and we know later there is a data

02:39:54,479 --> 02:39:58,880
structure text

02:39:55,760 --> 02:39:59,920
text structure and in layer layer there

02:39:58,880 --> 02:40:02,960
is a straight

02:39:59,920 --> 02:40:06,960
structure and we will save all the

02:40:02,960 --> 02:40:10,640
vector context here so

02:40:06,960 --> 02:40:13,359
by reference to the 14-point

02:40:10,640 --> 02:40:14,640
content switch mechanism we would do

02:40:13,359 --> 02:40:18,240
some

02:40:14,640 --> 02:40:21,439
partial lazy mechanism for saving

02:40:18,240 --> 02:40:24,720
or restoring for example

02:40:21,439 --> 02:40:28,160
if the previous task is

02:40:24,720 --> 02:40:31,200
scheduled out and the the

02:40:28,160 --> 02:40:34,960
s status srbs

02:40:31,200 --> 02:40:37,359
is means is its status is 30

02:40:34,960 --> 02:40:38,240
then we will set all the vector register

02:40:37,359 --> 02:40:41,600
to memory

02:40:38,240 --> 02:40:45,600
and set the status to clean

02:40:41,600 --> 02:40:46,160
and uh if the next task it will schedule

02:40:45,600 --> 02:40:49,439
in

02:40:46,160 --> 02:40:50,080
and its status is not off then we will

02:40:49,439 --> 02:40:53,200
restore

02:40:50,080 --> 02:40:56,240
all of that vector register from memory

02:40:53,200 --> 02:41:00,840
and set it to clean so

02:40:56,240 --> 02:41:03,840
this might be a partial lacing mechanism

02:41:00,840 --> 02:41:03,840
yeah

02:41:06,399 --> 02:41:11,120
so in this conclusion page that the

02:41:09,600 --> 02:41:14,240
major feature

02:41:11,120 --> 02:41:18,319
we have implemented with

02:41:14,240 --> 02:41:20,800
based on spec version 0 0.9

02:41:18,319 --> 02:41:21,720
and we hope this is very close to

02:41:20,800 --> 02:41:25,600
version

02:41:21,720 --> 02:41:28,319
1.0 so that they might be

02:41:25,600 --> 02:41:30,160
changed too much it might not need to

02:41:28,319 --> 02:41:33,279
change too much

02:41:30,160 --> 02:41:34,800
and the features that are still working

02:41:33,279 --> 02:41:38,080
in progress that is

02:41:34,800 --> 02:41:42,080
the columnar vector and the canon

02:41:38,080 --> 02:41:44,800
xor optimization and the username

02:41:42,080 --> 02:41:46,080
memory copy memory instead of string

02:41:44,800 --> 02:41:50,160
blend string compare

02:41:46,080 --> 02:41:53,760
optimization with the vector instruction

02:41:50,160 --> 02:41:56,720
and we also hope that we could

02:41:53,760 --> 02:41:58,000
optimize the content switch because the

02:41:56,720 --> 02:42:01,760
vector ranges size

02:41:58,000 --> 02:42:05,120
is really big so we we like to

02:42:01,760 --> 02:42:07,600
uh implement the more lazy vector saving

02:42:05,120 --> 02:42:11,279
restore mechanism for that

02:42:07,600 --> 02:42:15,600
and the future work to do list is a

02:42:11,279 --> 02:42:18,960
negative gdp is not the polar vector yet

02:42:15,600 --> 02:42:21,120
so we would or someone else you may

02:42:18,960 --> 02:42:24,840
interesting to do that

02:42:21,120 --> 02:42:27,840
to put the negative gdp to support

02:42:24,840 --> 02:42:27,840
vector

02:42:30,399 --> 02:42:37,600
so here is a reference page and uh

02:42:34,640 --> 02:42:39,359
and that that's it anyone have any

02:42:37,600 --> 02:42:42,080
questions

02:42:39,359 --> 02:42:43,520
what status of the spec like uh is it

02:42:42,080 --> 02:42:48,800
closer to being frozen

02:42:43,520 --> 02:42:48,800
or is it being discussed being frozen

02:42:50,960 --> 02:42:54,800
oh yeah at least good job

02:42:58,080 --> 02:43:03,200
yeah the question is basically when is

02:42:59,600 --> 02:43:03,200
the vector spec going to be frozen

02:43:03,439 --> 02:43:08,000
all right when is the spell going to be

02:43:06,840 --> 02:43:12,800
frozen

02:43:08,000 --> 02:43:16,479
i'm not sure maybe very soon i think

02:43:12,800 --> 02:43:19,439
um i i think in the

02:43:16,479 --> 02:43:21,279
maybe related to the os and the delivers

02:43:19,439 --> 02:43:24,160
part of the

02:43:21,279 --> 02:43:24,800
same stuff could be part of frozen i

02:43:24,160 --> 02:43:27,279
mean

02:43:24,800 --> 02:43:28,640
because the i think there are still a

02:43:27,279 --> 02:43:31,200
lot of discussion about

02:43:28,640 --> 02:43:32,399
vector details but it does not relate to

02:43:31,200 --> 02:43:35,520
our

02:43:32,399 --> 02:43:38,800
os or the gdp stuff and

02:43:35,520 --> 02:43:41,600
maybe from our ecosystem view

02:43:38,800 --> 02:43:41,600
maybe we could

02:43:43,359 --> 02:43:50,240
i mean i mean we should let the

02:43:46,479 --> 02:43:50,800
victor basic support in our os and that

02:43:50,240 --> 02:43:53,920
gdp

02:43:50,800 --> 02:43:57,120
is about it let it always support it and

02:43:53,920 --> 02:44:00,640
then a lot of people could utilize

02:43:57,120 --> 02:44:03,359
it to implement the vector features

02:44:00,640 --> 02:44:03,760
that means they could test they could

02:44:03,359 --> 02:44:07,120
run

02:44:03,760 --> 02:44:10,640
vector if we don't have green ties job

02:44:07,120 --> 02:44:12,960
that means we couldn't run victor

02:44:10,640 --> 02:44:14,640
applications purple yeah i think the

02:44:12,960 --> 02:44:16,880
current plan for the vector spec is to

02:44:14,640 --> 02:44:19,439
try to standardize a

02:44:16,880 --> 02:44:21,600
much smaller subset of the spec than the

02:44:19,439 --> 02:44:23,200
entire thing yeah yeah yeah

02:44:21,600 --> 02:44:24,640
the registers and whatnot so we can

02:44:23,200 --> 02:44:28,560
start to use it yeah yeah i think

02:44:24,640 --> 02:44:31,120
even that is a ways away

02:44:28,560 --> 02:44:33,359
yeah yeah and and i think the green

02:44:31,120 --> 02:44:36,960
times job is very appreciate

02:44:33,359 --> 02:44:40,080
appreciated and and i stopped this work

02:44:36,960 --> 02:44:43,040
because i hesitated oh my

02:44:40,080 --> 02:44:43,520
the virus changed a lot specification

02:44:43,040 --> 02:44:46,720
changed

02:44:43,520 --> 02:44:48,560
one by one and wow that that so i

02:44:46,720 --> 02:44:51,760
stopped i scared

02:44:48,560 --> 02:44:52,560
and and and the green i picked up it and

02:44:51,760 --> 02:44:55,840
they continue

02:44:52,560 --> 02:44:58,640
to finish the scalable uh

02:44:55,840 --> 02:44:59,600
that's great thank you yeah and i hope

02:44:58,640 --> 02:45:04,319
we will soon get

02:44:59,600 --> 02:45:04,319
your features in the kernel and the gdpc

02:45:04,880 --> 02:45:10,319
sure also thank you goran you implement

02:45:08,160 --> 02:45:14,240
the first version of the

02:45:10,319 --> 02:45:14,720
vector support yeah no no that just i

02:45:14,240 --> 02:45:18,000
just

02:45:14,720 --> 02:45:21,680
finished my job because of our

02:45:18,000 --> 02:45:25,600
our process have only 100 fixed uh

02:45:21,680 --> 02:45:26,479
victor uh i just implemented my process

02:45:25,600 --> 02:45:29,200
work but you

02:45:26,479 --> 02:45:29,920
implement the whole risk five versions

02:45:29,200 --> 02:45:33,760
that's great

02:45:29,920 --> 02:45:33,760
yeah thank you

02:45:34,960 --> 02:45:40,840
so looks like uh 10 results

02:45:38,399 --> 02:45:57,840
yeah i think we're coming into break

02:45:40,840 --> 02:45:57,840
time okay thank you

02:46:08,240 --> 02:46:25,840
i guess we got 15 minutes so i'm gonna

02:46:11,840 --> 02:46:25,840
try to find some food good luck guys

02:57:06,840 --> 02:57:09,840
hello

02:57:21,040 --> 02:57:28,000
oh yeah let me switch the slides

02:57:26,399 --> 02:57:29,760
i don't have any i don't have any slides

02:57:28,000 --> 02:57:30,800
for this one um if you have a little

02:57:29,760 --> 02:57:32,160
like

02:57:30,800 --> 02:57:33,840
if you have the thing that i've

02:57:32,160 --> 02:57:37,830
submitted the little talks

02:57:33,840 --> 02:57:40,240
you know the description doesn't work

02:57:37,830 --> 02:57:42,880
[Music]

02:57:40,240 --> 02:57:43,680
can you make a slide out of it no no

02:57:42,880 --> 02:57:46,960
it's fine i don't think

02:57:43,680 --> 02:57:48,840
it's live i see a share an external

02:57:46,960 --> 02:57:51,840
video

02:57:48,840 --> 02:57:55,920
and i don't see it

02:57:51,840 --> 02:57:56,240
anything but actually not having slide

02:57:55,920 --> 02:57:58,720
is

02:57:56,240 --> 02:58:00,640
fits the perfect agenda so yeah it's

02:57:58,720 --> 02:58:04,000
very clumsy

02:58:00,640 --> 02:58:04,000
and i think that's make

02:58:07,680 --> 02:58:10,960
wait for a couple of more minutes

02:58:12,730 --> 02:58:15,889
[Music]

02:58:17,200 --> 02:58:20,800
all right i've got the description up

02:58:18,319 --> 02:58:23,920
for finally

02:58:20,800 --> 02:58:25,439
yeah there should be a way to oh wait

02:58:23,920 --> 02:58:27,760
hold on there is

02:58:25,439 --> 02:58:27,760
i think

02:58:29,120 --> 02:58:33,840
no there is no way to share a link

02:58:34,399 --> 02:58:38,640
says upload a presentation share an

02:58:36,399 --> 02:58:41,359
external video oh there is an url

02:58:38,640 --> 02:58:44,000
let me see yeah yeah drew just um posted

02:58:41,359 --> 02:58:47,840
it yeah that's that's it

02:58:44,000 --> 02:58:47,840
yeah let me see if i can do that

02:58:51,250 --> 02:58:54,319
[Music]

02:58:55,120 --> 02:59:01,520
it says video oh no it

02:58:58,399 --> 02:59:03,439
has to be a video url so

02:59:01,520 --> 02:59:05,200
now you can share your screen i think uh

02:59:03,439 --> 02:59:06,800
let me i'm not gonna wait i'm on a

02:59:05,200 --> 02:59:08,800
different computer though

02:59:06,800 --> 02:59:10,880
i look at my computer where the

02:59:08,800 --> 02:59:14,000
conference is i look like this

02:59:10,880 --> 02:59:16,160
okay it's fine no it's fine we're not

02:59:14,000 --> 02:59:17,279
we don't need anything i'll just make

02:59:16,160 --> 02:59:19,279
you presenter

02:59:17,279 --> 02:59:22,240
anyways because you have to you have the

02:59:19,279 --> 02:59:25,680
next talk as well so

02:59:22,240 --> 02:59:27,200
ah oh cool okay oh can you

02:59:25,680 --> 02:59:30,960
am i presenting the slides for the next

02:59:27,200 --> 02:59:30,960
tool or are you doing it

02:59:33,200 --> 02:59:36,880
so you own the slides when you're in

02:59:34,880 --> 02:59:38,479
presenter mode

02:59:36,880 --> 02:59:42,240
that little plus at the bottom lets you

02:59:38,479 --> 02:59:44,399
pick which slides you're showing

02:59:42,240 --> 02:59:46,479
oh okay if you want we can swap them

02:59:44,399 --> 02:59:49,279
over for you

02:59:46,479 --> 02:59:50,880
but you go backwards and forwards okay

02:59:49,279 --> 02:59:52,720
can you guys swap them over to the ones

02:59:50,880 --> 02:59:54,319
i uploaded for the next talk

02:59:52,720 --> 02:59:55,840
yeah but we have to boot you out of

02:59:54,319 --> 02:59:56,800
presenter mode and then put you back in

02:59:55,840 --> 02:59:58,960
for such a moment okay

02:59:56,800 --> 03:00:00,960
that's fine and only one person can be

02:59:58,960 --> 03:00:04,000
in procedure mode at once

03:00:00,960 --> 03:00:07,040
okay should i start now

03:00:04,000 --> 03:00:09,680
or give it a few minutes i think uh

03:00:07,040 --> 03:00:10,080
given that there is a break let's wait

03:00:09,680 --> 03:00:13,200
oh

03:00:10,080 --> 03:00:16,319
is it exactly i don't have luck

03:00:13,200 --> 03:00:16,319
it's exactly 10.

03:00:16,880 --> 03:00:20,479
i don't think this will take the full

03:00:18,160 --> 03:00:22,800
half hour so we can maybe wait

03:00:20,479 --> 03:00:25,840
another minute all right wait a couple

03:00:22,800 --> 03:00:25,840
of minutes

03:00:32,000 --> 03:00:35,600
don't you only eat once a day couldn't

03:00:33,760 --> 03:00:36,640
you just have like pushed out the eating

03:00:35,600 --> 03:00:39,840
to

03:00:36,640 --> 03:00:39,840
like you know

03:00:48,640 --> 03:00:54,960
yeah waking up at 6 30 i'm

03:00:52,640 --> 03:00:56,479
yeah yeah you got it like 5 45 because i

03:00:54,960 --> 03:00:58,800
wanted to figure out how to

03:00:56,479 --> 03:01:00,399
do the room i was worried that i could

03:00:58,800 --> 03:01:04,399
sort out the presentation stuff

03:01:00,399 --> 03:01:07,439
but it went pretty good of course

03:01:04,399 --> 03:01:11,200
yeah the platform is good except

03:01:07,439 --> 03:01:13,520
i couldn't log into my initially the

03:01:11,200 --> 03:01:15,359
laptop i was logged in i couldn't turn

03:01:13,520 --> 03:01:18,399
on the my god video so i have to switch

03:01:15,359 --> 03:01:20,160
the laptop so sometimes it has bob

03:01:18,399 --> 03:01:23,520
and then notes start work the notes keep

03:01:20,160 --> 03:01:23,520
crashing yeah

03:01:24,319 --> 03:01:28,560
so i have like now three screens like

03:01:26,720 --> 03:01:31,279
between two laptops one in

03:01:28,560 --> 03:01:35,840
chat one the other chat and then another

03:01:31,279 --> 03:01:35,840
note so

03:01:46,840 --> 03:01:49,840
okay

03:01:51,040 --> 03:01:54,319
all right so i think i'll start it's ten

03:01:52,720 --> 03:01:58,080
or two

03:01:54,319 --> 03:02:00,720
um okay so basically so this talk

03:01:58,080 --> 03:02:02,160
is not talk it's just a discussion about

03:02:00,720 --> 03:02:05,680
the linux risk five

03:02:02,160 --> 03:02:08,960
kernel policy and the plan for

03:02:05,680 --> 03:02:11,600
accepting patches right so right now

03:02:08,960 --> 03:02:12,960
the policy is that the kernel will only

03:02:11,600 --> 03:02:15,359
accept patches in a

03:02:12,960 --> 03:02:16,479
from a risk fire spec that's frozen or

03:02:15,359 --> 03:02:19,439
ratified

03:02:16,479 --> 03:02:21,040
um but there's multiple there's more now

03:02:19,439 --> 03:02:22,960
there's more and more

03:02:21,040 --> 03:02:24,720
uh respect specifications or side

03:02:22,960 --> 03:02:26,319
extensions that aren't

03:02:24,720 --> 03:02:28,080
yet frozen but people are very

03:02:26,319 --> 03:02:30,080
interested in so the

03:02:28,080 --> 03:02:32,479
vector extension and the hypervisor

03:02:30,080 --> 03:02:34,720
extension are two key examples

03:02:32,479 --> 03:02:35,840
right they're both being discussed today

03:02:34,720 --> 03:02:37,760
um but

03:02:35,840 --> 03:02:40,880
there's no mainline support in linux for

03:02:37,760 --> 03:02:47,120
them because the policies you won't take

03:02:40,880 --> 03:02:48,800
uh ticks you know non-frozen extensions

03:02:47,120 --> 03:02:51,279
my computer made noise am i can you

03:02:48,800 --> 03:02:51,279
still hear me

03:02:52,000 --> 03:02:55,040
yep okay

03:02:55,439 --> 03:02:59,680
so yeah so that's basically is this

03:02:57,920 --> 03:03:01,920
discussion right so this

03:02:59,680 --> 03:03:03,200
so as a queue maintainer we've been

03:03:01,920 --> 03:03:05,920
taking

03:03:03,200 --> 03:03:07,040
um you know draft extensions for a

03:03:05,920 --> 03:03:09,520
little bit now

03:03:07,040 --> 03:03:10,319
um we have the hypervisor and the vector

03:03:09,520 --> 03:03:13,120
extensions

03:03:10,319 --> 03:03:15,040
are supported and we've updated the

03:03:13,120 --> 03:03:15,920
hypervisor extensions and the vector

03:03:15,040 --> 03:03:17,680
extensions

03:03:15,920 --> 03:03:19,840
there's a you know in the next version

03:03:17,680 --> 03:03:22,399
patches are on on the list

03:03:19,840 --> 03:03:23,439
um and it doesn't seem to be too much of

03:03:22,399 --> 03:03:25,920
a problem

03:03:23,439 --> 03:03:26,640
we haven't had any we haven't let anyone

03:03:25,920 --> 03:03:28,399
complain

03:03:26,640 --> 03:03:29,920
that we have less uses than the linux

03:03:28,399 --> 03:03:32,000
come about

03:03:29,920 --> 03:03:33,520
um so this discussion was another issue

03:03:32,000 --> 03:03:36,399
with kmu is that

03:03:33,520 --> 03:03:38,319
like multiple versions are not being

03:03:36,399 --> 03:03:40,640
maintained

03:03:38,319 --> 03:03:41,680
yeah so that that's part of the policy

03:03:40,640 --> 03:03:45,279
of the

03:03:41,680 --> 03:03:47,200
of the the you know the draft extensions

03:03:45,279 --> 03:03:47,600
is we only maintain the latest and when

03:03:47,200 --> 03:03:49,359
the

03:03:47,600 --> 03:03:51,040
final one comes out we'll only maintain

03:03:49,359 --> 03:03:54,399
that um

03:03:51,040 --> 03:03:56,000
to reduce maintenance so

03:03:54,399 --> 03:03:58,000
yeah i mean that affects backwards that

03:03:56,000 --> 03:03:59,680
affects some users but

03:03:58,000 --> 03:04:02,800
how many people actually care about the

03:03:59,680 --> 03:04:04,000
older versions of the hypervisor spec

03:04:02,800 --> 03:04:06,240
the vector extension is a little

03:04:04,000 --> 03:04:07,520
different but again it's it's

03:04:06,240 --> 03:04:09,359
there's not that many people caring

03:04:07,520 --> 03:04:11,359
about the older ones

03:04:09,359 --> 03:04:14,640
um anyway so let's just discussion to

03:04:11,359 --> 03:04:14,640
talk about that for works

03:04:17,120 --> 03:04:19,439
thoughts

03:04:20,399 --> 03:04:24,800
i mean i i i i assume

03:04:25,520 --> 03:04:28,640
that you want me to talk here i don't

03:04:27,200 --> 03:04:32,160
want to merge uh

03:04:28,640 --> 03:04:35,680
draft stuff into linux because

03:04:32,160 --> 03:04:38,399
but how long have you been oh sorry

03:04:35,680 --> 03:04:39,359
no no i just like how long can we or

03:04:38,399 --> 03:04:43,200
should we wait

03:04:39,359 --> 03:04:43,200
what if it takes like years and years

03:04:44,319 --> 03:04:50,640
i so i think the problem here is

03:04:47,600 --> 03:04:54,479
that the specifications take

03:04:50,640 --> 03:04:57,200
too long to get ratified yep

03:04:54,479 --> 03:04:58,080
but with just cause right because once

03:04:57,200 --> 03:04:59,359
they're ratified

03:04:58,080 --> 03:05:01,200
they'll go in the hardware and then

03:04:59,359 --> 03:05:05,760
you're stuck with it so it makes sense

03:05:01,200 --> 03:05:07,680
it takes a long time

03:05:05,760 --> 03:05:09,359
that's where the pain comes from i don't

03:05:07,680 --> 03:05:12,560
think that

03:05:09,359 --> 03:05:15,680
merging stuff into linux will fix that

03:05:12,560 --> 03:05:18,640
and it will it

03:05:15,680 --> 03:05:19,840
it will it'll open up a lot of problems

03:05:18,640 --> 03:05:20,800
right because when the foundation comes

03:05:19,840 --> 03:05:23,439
out and says

03:05:20,800 --> 03:05:24,160
hey here's this spec it's going to be

03:05:23,439 --> 03:05:26,880
compatible

03:05:24,160 --> 03:05:28,880
and then they change their minds like

03:05:26,880 --> 03:05:30,160
we're stuck in the linux land with this

03:05:28,880 --> 03:05:31,680
old version that we sort of said was

03:05:30,160 --> 03:05:32,240
compatible and people started using for

03:05:31,680 --> 03:05:33,840
stuff

03:05:32,240 --> 03:05:36,640
the apis start to filter all over the

03:05:33,840 --> 03:05:39,439
place and then like what do we do

03:05:36,640 --> 03:05:42,800
now can we use the same qmu policy we

03:05:39,439 --> 03:05:46,319
support only the latest extension

03:05:42,800 --> 03:05:49,120
until the spec is frozen and then

03:05:46,319 --> 03:05:50,479
because that if the spec changes

03:05:49,120 --> 03:05:52,319
significantly the

03:05:50,479 --> 03:05:54,960
whoever is the developer will have at

03:05:52,319 --> 03:05:57,439
least less problem

03:05:54,960 --> 03:05:58,800
keeping the out of three patches for

03:05:57,439 --> 03:06:00,560
like years

03:05:58,800 --> 03:06:02,640
and nobody's able to test those patches

03:06:00,560 --> 03:06:06,080
except who is developing those patches

03:06:02,640 --> 03:06:07,840
okay so now uh there's

03:06:06,080 --> 03:06:09,359
like the out of tree patches thing i

03:06:07,840 --> 03:06:12,640
think yeah

03:06:09,359 --> 03:06:14,800
clearly it's work to maintain that stuff

03:06:12,640 --> 03:06:16,960
right um so i think and we've run into

03:06:14,800 --> 03:06:20,960
some gcc land as well

03:06:16,960 --> 03:06:24,160
like bringing those all into one branch

03:06:20,960 --> 03:06:25,760
um so like it's easier to maintain and

03:06:24,160 --> 03:06:29,040
there's one place for everybody to look

03:06:25,760 --> 03:06:30,960
seems sensible but i don't i don't

03:06:29,040 --> 03:06:32,880
really like

03:06:30,960 --> 03:06:36,319
i don't really like having it in linus

03:06:32,880 --> 03:06:36,319
tree if that makes sense

03:06:36,960 --> 03:06:40,640
so i think there's there's a huge

03:06:38,800 --> 03:06:43,359
difference

03:06:40,640 --> 03:06:44,479
between things that have been built into

03:06:43,359 --> 03:06:47,279
hardware and things that

03:06:44,479 --> 03:06:49,040
have not been built into hardware um so

03:06:47,279 --> 03:06:52,240
the way that we handle

03:06:49,040 --> 03:06:53,600
soc platforms in in arm linux is we make

03:06:52,240 --> 03:06:57,359
it really easy

03:06:53,600 --> 03:06:59,279
to add new platforms to just because we

03:06:57,359 --> 03:07:01,600
want soc manufacturers to submit their

03:06:59,279 --> 03:07:05,520
code before they even ship a product

03:07:01,600 --> 03:07:08,399
but then we also uh like if they

03:07:05,520 --> 03:07:08,880
what one thing that happens sometimes is

03:07:08,399 --> 03:07:10,880
that

03:07:08,880 --> 03:07:12,800
then there are no customers or the

03:07:10,880 --> 03:07:13,680
product gets cancelled before it hits

03:07:12,800 --> 03:07:16,399
the market

03:07:13,680 --> 03:07:19,439
and then we just take it out again um so

03:07:16,399 --> 03:07:22,240
if you if there's a case where

03:07:19,439 --> 03:07:23,439
even something is abi relevant for

03:07:22,240 --> 03:07:27,520
people

03:07:23,439 --> 03:07:30,080
who have this architecture extension

03:07:27,520 --> 03:07:31,120
uh and it gets merged into the kernel

03:07:30,080 --> 03:07:32,640
but then nobody

03:07:31,120 --> 03:07:34,479
ever ships a product with this

03:07:32,640 --> 03:07:35,040
architecture extension i don't see a

03:07:34,479 --> 03:07:37,200
problem

03:07:35,040 --> 03:07:38,319
with ripping it out again because okay

03:07:37,200 --> 03:07:41,200
so

03:07:38,319 --> 03:07:41,760
no you're not breaking you this vendor

03:07:41,200 --> 03:07:44,960
stuff

03:07:41,760 --> 03:07:47,120
and drafts and this is something we

03:07:44,960 --> 03:07:49,439
like the gcc discussion roughly ended up

03:07:47,120 --> 03:07:53,840
here too where

03:07:49,439 --> 03:07:56,399
the draft specs tend to be ambiguous

03:07:53,840 --> 03:07:57,600
right that's why they're still in draft

03:07:56,399 --> 03:07:59,840
and they tend to change

03:07:57,600 --> 03:08:01,770
they're they're moving targets so if we

03:07:59,840 --> 03:08:02,960
start merging draft specs we end up with

03:08:01,770 --> 03:08:06,160
[Music]

03:08:02,960 --> 03:08:10,399
really one implementation of that

03:08:06,160 --> 03:08:12,240
spec so it's not just

03:08:10,399 --> 03:08:14,080
always the case right like the vector

03:08:12,240 --> 03:08:14,800
extension from what i could tell the

03:08:14,080 --> 03:08:17,439
zero to

03:08:14,800 --> 03:08:18,080
nine the latest one is basically what's

03:08:17,439 --> 03:08:21,680
going to be

03:08:18,080 --> 03:08:22,479
in the final one but that i i have been

03:08:21,680 --> 03:08:25,680
told that for

03:08:22,479 --> 03:08:26,560
five years so yeah the policy is that

03:08:25,680 --> 03:08:31,359
0.9

03:08:26,560 --> 03:08:32,880
is what we're going to do but it's also

03:08:31,359 --> 03:08:35,359
i think there's also hardware with it

03:08:32,880 --> 03:08:37,359
right there's hardware with the 0.7.1

03:08:35,359 --> 03:08:39,600
which is not and that's the problem

03:08:37,359 --> 03:08:39,600
because

03:08:40,399 --> 03:08:43,840
basically i think the goal is to to

03:08:42,800 --> 03:08:47,040
discourage

03:08:43,840 --> 03:08:47,520
hardware that implements only the draft

03:08:47,040 --> 03:08:49,920
i mean

03:08:47,520 --> 03:08:51,279
really we from a fragmentation point of

03:08:49,920 --> 03:08:54,720
view we we don't want that

03:08:51,279 --> 03:08:57,040
i think there's a difference between um

03:08:54,720 --> 03:08:59,200
these kinds of extensions that have been

03:08:57,040 --> 03:09:03,120
fully baked and made it through the

03:08:59,200 --> 03:09:05,359
the process versus just platforms

03:09:03,120 --> 03:09:07,600
you know i don't think there's any other

03:09:05,359 --> 03:09:10,880
major isa out there that

03:09:07,600 --> 03:09:13,359
essentially does these kinds of draft

03:09:10,880 --> 03:09:14,800
you know releases before they're really

03:09:13,359 --> 03:09:16,880
fully baked and

03:09:14,800 --> 03:09:18,960
that the implementations go into

03:09:16,880 --> 03:09:19,600
mainline that that are expected to cover

03:09:18,960 --> 03:09:22,720
that if

03:09:19,600 --> 03:09:23,359
if others um you know have a different

03:09:22,720 --> 03:09:25,279
point of view

03:09:23,359 --> 03:09:26,640
definitely that if that there is other

03:09:25,279 --> 03:09:28,800
there are other architectures that do

03:09:26,640 --> 03:09:30,720
that definitely let us know but

03:09:28,800 --> 03:09:33,040
you know the the risk five architecture

03:09:30,720 --> 03:09:36,000
is a little different is that it's not

03:09:33,040 --> 03:09:37,520
taken care of by a corporation it's uh

03:09:36,000 --> 03:09:40,560
it's taken care of by this

03:09:37,520 --> 03:09:42,840
foundation right i think the fma4 stuff

03:09:40,560 --> 03:09:46,479
is a good example of how this gets

03:09:42,840 --> 03:09:48,399
screwy that's that's reasonable paul

03:09:46,479 --> 03:09:50,080
the problem is the i mean with the wrist

03:09:48,399 --> 03:09:52,560
fire the problem is it won't get frozen

03:09:50,080 --> 03:09:54,560
until there is hardware so you have to

03:09:52,560 --> 03:09:56,880
have hardware of a draft extension

03:09:54,560 --> 03:09:58,479
so there will be always hardware for the

03:09:56,880 --> 03:09:59,920
draft extensions and so we're just

03:09:58,479 --> 03:10:01,760
saying we want support so my issue here

03:09:59,920 --> 03:10:04,160
is that yeah like i agree that the

03:10:01,760 --> 03:10:04,800
foundation policy has this chicken and

03:10:04,160 --> 03:10:07,760
egg problem

03:10:04,800 --> 03:10:09,040
where yeah like you have to go build

03:10:07,760 --> 03:10:10,000
hardware with a draft extension but we

03:10:09,040 --> 03:10:11,359
tell you not to build hardware with the

03:10:10,000 --> 03:10:14,160
draft extensions

03:10:11,359 --> 03:10:14,960
yeah but hardware could be fpga right i

03:10:14,160 --> 03:10:17,840
mean like the

03:10:14,960 --> 03:10:18,880
the main thing is that it's not purely

03:10:17,840 --> 03:10:20,560
like a

03:10:18,880 --> 03:10:23,120
software implementation it could just be

03:10:20,560 --> 03:10:24,560
an fpga implementation

03:10:23,120 --> 03:10:26,880
yeah but i guess my point is that i

03:10:24,560 --> 03:10:29,439
don't think merging the

03:10:26,880 --> 03:10:32,080
code into linus's tree solves any of

03:10:29,439 --> 03:10:32,080
those problems

03:10:33,840 --> 03:10:39,920
the problem of not maintaining over

03:10:37,279 --> 03:10:40,960
every current release and testing it

03:10:39,920 --> 03:10:43,920
like at least

03:10:40,960 --> 03:10:44,560
okay so that's an understandable issue

03:10:43,920 --> 03:10:46,960
and i think

03:10:44,560 --> 03:10:48,960
yeah that is what you want to do here is

03:10:46,960 --> 03:10:50,960
say like we don't want to keep

03:10:48,960 --> 03:10:52,319
dealing with this stuff and i need to

03:10:50,960 --> 03:10:54,319
pick up in some sort of

03:10:52,319 --> 03:10:55,520
you know risk five foundation draft

03:10:54,319 --> 03:10:59,920
extensions

03:10:55,520 --> 03:10:59,920
super branch that i deal with

03:11:01,040 --> 03:11:04,160
the headache but yeah you know but then

03:11:03,040 --> 03:11:07,439
you have to maintain it

03:11:04,160 --> 03:11:09,359
across everything you know we for a

03:11:07,439 --> 03:11:11,040
while earlier this year we

03:11:09,359 --> 03:11:13,279
we did um or maybe it was the end of

03:11:11,040 --> 03:11:15,920
last year we did maintain a

03:11:13,279 --> 03:11:16,319
a branch um for a very brief period

03:11:15,920 --> 03:11:17,760
called

03:11:16,319 --> 03:11:20,319
i think it was like the experimental

03:11:17,760 --> 03:11:20,720
branch where we merged together all this

03:11:20,319 --> 03:11:22,880
stuff

03:11:20,720 --> 03:11:24,160
that for whatever reason wasn't fully

03:11:22,880 --> 03:11:27,279
baked yet so that

03:11:24,160 --> 03:11:28,880
folks kind of had an easy way to test so

03:11:27,279 --> 03:11:31,600
certainly we could look at doing that

03:11:28,880 --> 03:11:33,600
again and maybe that would be helpful

03:11:31,600 --> 03:11:34,880
i have two other precedents that i would

03:11:33,600 --> 03:11:38,000
like to mention from

03:11:34,880 --> 03:11:39,040
arm one is on 32-bit arm we have

03:11:38,000 --> 03:11:41,920
something like five

03:11:39,040 --> 03:11:43,279
incompatible floating point uh

03:11:41,920 --> 03:11:45,840
instruction sets

03:11:43,279 --> 03:11:46,720
that people just came up with and only

03:11:45,840 --> 03:11:48,479
one of them like

03:11:46,720 --> 03:11:50,160
only one or two of them were part of the

03:11:48,479 --> 03:11:51,680
arm architecture and some of them were

03:11:50,160 --> 03:11:54,000
just invented by a vendor

03:11:51,680 --> 03:11:55,840
um and we ended up yeah but we're trying

03:11:54,000 --> 03:11:59,040
to avoid that right

03:11:55,840 --> 03:12:01,200
yeah that's that absolutely it's just

03:11:59,040 --> 03:12:03,200
just trying to give some some background

03:12:01,200 --> 03:12:05,600
um and

03:12:03,200 --> 03:12:06,239
in the kernel we ended up supporting

03:12:05,600 --> 03:12:08,319
them

03:12:06,239 --> 03:12:10,319
just because hardware's out there there

03:12:08,319 --> 03:12:13,600
are users trying to use it

03:12:10,319 --> 03:12:17,840
um they on the contrary there's

03:12:13,600 --> 03:12:19,600
an example would be the iop32 support on

03:12:17,840 --> 03:12:22,640
64-bit arm

03:12:19,600 --> 03:12:23,760
where there's a mode to run 32-bit user

03:12:22,640 --> 03:12:27,040
space

03:12:23,760 --> 03:12:29,279
on 64-bit only cpus

03:12:27,040 --> 03:12:30,640
with a new api and there's a

03:12:29,279 --> 03:12:33,120
specification for it

03:12:30,640 --> 03:12:34,239
everybody has completely agreed on how

03:12:33,120 --> 03:12:37,120
it should be done

03:12:34,239 --> 03:12:38,800
if we want to do it there was no

03:12:37,120 --> 03:12:40,319
technical reason

03:12:38,800 --> 03:12:41,840
to stop us from merging it the only

03:12:40,319 --> 03:12:44,880
reason it was never merged

03:12:41,840 --> 03:12:47,920
was that we agreed that peop

03:12:44,880 --> 03:12:50,080
we do not want the abi fragmentation

03:12:47,920 --> 03:12:51,200
and we are better off not having it

03:12:50,080 --> 03:12:52,720
supported in the current because

03:12:51,200 --> 03:12:55,279
otherwise people start using it and we

03:12:52,720 --> 03:12:55,279
don't want that

03:12:55,439 --> 03:12:59,439
and that's kind of my worry with the

03:12:57,120 --> 03:13:01,279
draft stuff now i think

03:12:59,439 --> 03:13:03,600
right now the policy also excludes

03:13:01,279 --> 03:13:05,680
vendor extensions

03:13:03,600 --> 03:13:07,120
i personally think that's going to

03:13:05,680 --> 03:13:09,520
change at some point i'm

03:13:07,120 --> 03:13:10,319
i'm way more worried about supporting

03:13:09,520 --> 03:13:14,000
real hardware

03:13:10,319 --> 03:13:14,720
than kind of an ideological purity to

03:13:14,000 --> 03:13:17,040
the

03:13:14,720 --> 03:13:18,800
isa so i really view that no vendor

03:13:17,040 --> 03:13:21,120
extensions thing as a

03:13:18,800 --> 03:13:22,080
lever that we use to get people to play

03:13:21,120 --> 03:13:25,279
ball with the

03:13:22,080 --> 03:13:26,399
foundation and based on how long the

03:13:25,279 --> 03:13:28,640
specs are taking

03:13:26,399 --> 03:13:30,319
i think it's likely we end up having to

03:13:28,640 --> 03:13:32,560
deal with the vendor stuff at some point

03:13:30,319 --> 03:13:34,960
in the future

03:13:32,560 --> 03:13:36,640
right what we kind of decided was if a

03:13:34,960 --> 03:13:39,600
draft gets influenced in hardware

03:13:36,640 --> 03:13:40,720
and a vendor wants to call that hardware

03:13:39,600 --> 03:13:44,960
that they're going to support

03:13:40,720 --> 03:13:48,239
then that draft is now their extension

03:13:44,960 --> 03:13:51,840
you know yeah builds a

03:13:48,239 --> 03:13:53,680
vector 0.8 chip

03:13:51,840 --> 03:13:57,840
it's not the risk 5 vector extension

03:13:53,680 --> 03:13:57,840
it's y vector

03:14:02,479 --> 03:14:06,319
from the vendors extension maybe you

03:14:05,040 --> 03:14:09,279
have mentioned

03:14:06,319 --> 03:14:11,840
in fact i have a lot of patch didn't

03:14:09,279 --> 03:14:14,720
send

03:14:11,840 --> 03:14:16,080
linux 3 but the chip have has pro

03:14:14,720 --> 03:14:18,239
produced

03:14:16,080 --> 03:14:19,279
because we made a lot of problems

03:14:18,239 --> 03:14:22,479
current uh

03:14:19,279 --> 03:14:25,680
linux tree of the for the rx5

03:14:22,479 --> 03:14:28,479
didn't support his id and forced

03:14:25,680 --> 03:14:29,279
some very strict memory battery memory

03:14:28,479 --> 03:14:32,399
ordering

03:14:29,279 --> 03:14:36,840
and uh that concrete a lot of

03:14:32,399 --> 03:14:42,720
con currencies issues

03:14:36,840 --> 03:14:45,840
and under this limitation we needed to

03:14:42,720 --> 03:14:49,200
make extension to support it and

03:14:45,840 --> 03:14:52,319
i have a lot of pairs such as his id

03:14:49,200 --> 03:14:56,080
such as the a

03:14:52,319 --> 03:14:57,840
concurrency bit in the page table and

03:14:56,080 --> 03:14:59,600
and i don't know how to mod it to

03:14:57,840 --> 03:15:01,520
trigger 53 yeah i know

03:14:59,600 --> 03:15:02,720
i so that's i'm more worried about that

03:15:01,520 --> 03:15:05,680
kind of thing for the draft

03:15:02,720 --> 03:15:06,319
extensions because there's hardware or

03:15:05,680 --> 03:15:07,680
there

03:15:06,319 --> 03:15:10,080
there will presumably be hardware at

03:15:07,680 --> 03:15:12,560
some point if it's if it's an internal

03:15:10,080 --> 03:15:13,680
research thing and the chips never show

03:15:12,560 --> 03:15:16,080
up i

03:15:13,680 --> 03:15:17,600
don't really care that much but at some

03:15:16,080 --> 03:15:20,880
point we're going to have

03:15:17,600 --> 03:15:23,359
sorry well so if the cheap uh

03:15:20,880 --> 03:15:24,399
if the chip there and i think you could

03:15:23,359 --> 03:15:28,000
continue to

03:15:24,399 --> 03:15:30,080
modded my page in the tree i mean

03:15:28,000 --> 03:15:31,920
i mean you know inside yeah i have

03:15:30,080 --> 03:15:32,160
mentioned it to the rix five foundation

03:15:31,920 --> 03:15:34,960
and

03:15:32,160 --> 03:15:37,279
they don't like the broadcast ones they

03:15:34,960 --> 03:15:40,479
they want to per corporate exactly cool

03:15:37,279 --> 03:15:43,439
yeah but you know so i think it's

03:15:40,479 --> 03:15:45,600
extraordinarily unlikely that any

03:15:43,439 --> 03:15:48,960
anything produced directly by vendor

03:15:45,600 --> 03:15:52,239
ends up as a risk five spec in a

03:15:48,960 --> 03:15:55,200
fully compatible fashion so this

03:15:52,239 --> 03:15:56,640
early stuff is going to go in its vendor

03:15:55,200 --> 03:15:58,479
extensions now

03:15:56,640 --> 03:16:00,960
we've said none of that in the kernel

03:15:58,479 --> 03:16:03,439
i'm not necessarily ready to change that

03:16:00,960 --> 03:16:04,239
right now we are kind of flirting with

03:16:03,439 --> 03:16:07,359
changing that

03:16:04,239 --> 03:16:10,800
in gcc um

03:16:07,359 --> 03:16:13,760
maybe we'll see how poorly that goes

03:16:10,800 --> 03:16:16,960
if that makes any sense frankly a

03:16:13,760 --> 03:16:19,520
character is by cannot meet a

03:16:16,960 --> 03:16:20,640
business requirement yeah i know that's

03:16:19,520 --> 03:16:23,760
the problem

03:16:20,640 --> 03:16:25,439
if if we had enough of an isa to build

03:16:23,760 --> 03:16:27,439
stuff that actually worked

03:16:25,439 --> 03:16:28,640
then i'd be fine telling people no don't

03:16:27,439 --> 03:16:31,279
do your custom stuff

03:16:28,640 --> 03:16:32,080
do our stuff but we don't so your option

03:16:31,279 --> 03:16:34,560
is not

03:16:32,080 --> 03:16:36,000
like use the risk five standard stuff or

03:16:34,560 --> 03:16:36,560
make up your own stuff it's make up your

03:16:36,000 --> 03:16:38,560
own stuff

03:16:36,560 --> 03:16:40,880
or build something that doesn't work and

03:16:38,560 --> 03:16:42,840
i i i don't wanna tell people just don't

03:16:40,880 --> 03:16:44,160
just don't use risk five it's just it's

03:16:42,840 --> 03:16:46,080
it's yeah

03:16:44,160 --> 03:16:47,520
so what i would do in your place is to

03:16:46,080 --> 03:16:51,120
make a huge

03:16:47,520 --> 03:16:53,840
uh to to do this very different for 32

03:16:51,120 --> 03:16:56,000
bit and for 64-bit so for 64-bit

03:16:53,840 --> 03:16:57,120
i think it is absolutely essential to

03:16:56,000 --> 03:17:00,720
have

03:16:57,120 --> 03:17:02,160
a stable abi for everybody that works so

03:17:00,720 --> 03:17:03,520
you can have a kernel that works on

03:17:02,160 --> 03:17:04,960
every possible chip

03:17:03,520 --> 03:17:07,439
for the future so one thing i'm a

03:17:04,960 --> 03:17:07,840
hundred percent not going to change is

03:17:07,439 --> 03:17:11,200
that

03:17:07,840 --> 03:17:12,960
any code in the kernel has to be built

03:17:11,200 --> 03:17:14,800
it has to be buildable in a fashion such

03:17:12,960 --> 03:17:15,359
that the same kernel runs on all the

03:17:14,800 --> 03:17:17,200
hardware

03:17:15,359 --> 03:17:18,800
that's not going to change so it might

03:17:17,200 --> 03:17:21,279
be allowed to build models that don't

03:17:18,800 --> 03:17:24,000
run on everybody's hardware

03:17:21,279 --> 03:17:25,359
but if the code goes in the right stuff

03:17:24,000 --> 03:17:26,000
it's got to be able to build everywhere

03:17:25,359 --> 03:17:28,399
and that's true for

03:17:26,000 --> 03:17:29,040
like anything i mean that's obviously

03:17:28,399 --> 03:17:31,120
the best

03:17:29,040 --> 03:17:32,640
way to do it but for 32 bit i wouldn't

03:17:31,120 --> 03:17:36,239
even require that

03:17:32,640 --> 03:17:40,239
so uh if anybody's building a 32-bit

03:17:36,239 --> 03:17:42,000
product today chances are

03:17:40,239 --> 03:17:44,239
nobody's ever going to run the same

03:17:42,000 --> 03:17:46,399
kernel on that machine as on

03:17:44,239 --> 03:17:48,319
another risk machine yeah i mean i buy

03:17:46,399 --> 03:17:48,880
that and that's like we have the no mmu

03:17:48,319 --> 03:17:52,080
stuff

03:17:48,880 --> 03:17:54,160
for example where the no mmu port

03:17:52,080 --> 03:17:55,920
currently maintains the constraint that

03:17:54,160 --> 03:17:57,920
it can be run on multiple systems which

03:17:55,920 --> 03:18:01,120
is nonsense because you're just not

03:17:57,920 --> 03:18:04,479
you're not going to do that but as long

03:18:01,120 --> 03:18:08,239
as it's on the same memory address right

03:18:04,479 --> 03:18:10,160
yeah i i guess my issue there is that

03:18:08,239 --> 03:18:11,439
it's like so far it really hasn't been

03:18:10,160 --> 03:18:12,080
any extra work to maintain that

03:18:11,439 --> 03:18:15,680
constraint

03:18:12,080 --> 03:18:17,439
everywhere because the the

03:18:15,680 --> 03:18:18,800
the like the difference between 32 and

03:18:17,439 --> 03:18:21,680
64 for

03:18:18,800 --> 03:18:23,600
doesn't really filter into the isa like

03:18:21,680 --> 03:18:26,640
defender specific isa extensions

03:18:23,600 --> 03:18:28,479
so with them all being separate things

03:18:26,640 --> 03:18:30,000
it's kind of easier to say everything

03:18:28,479 --> 03:18:31,040
can be built everywhere and of course

03:18:30,000 --> 03:18:34,800
you can

03:18:31,040 --> 03:18:34,800
disable stuff if you want to

03:18:34,840 --> 03:18:38,399
yeah it also seems unlikely that someone

03:18:37,760 --> 03:18:40,800
will have

03:18:38,399 --> 03:18:43,359
vendor-specific extensions for 32-bit

03:18:40,800 --> 03:18:43,359
for links

03:18:44,319 --> 03:18:47,439
you know i don't think that that is not

03:18:47,120 --> 03:18:50,080
just

03:18:47,439 --> 03:18:51,680
likely that it's actually the the

03:18:50,080 --> 03:18:54,319
current state already

03:18:51,680 --> 03:18:55,279
so people have 32-bit cars with vendor

03:18:54,319 --> 03:18:58,640
extensions

03:18:55,279 --> 03:19:02,720
for linux like linux capable

03:18:58,640 --> 03:19:05,120
i i think that the the andes uh

03:19:02,720 --> 03:19:06,479
yeah uh he has called himself it came to

03:19:05,120 --> 03:19:07,040
plumbers to talk about it two or three

03:19:06,479 --> 03:19:10,239
years ago

03:19:07,040 --> 03:19:12,479
he said no go away we don't want vendor

03:19:10,239 --> 03:19:12,479
stuff

03:19:14,560 --> 03:19:21,200
yeah mix is 72-bit and the

03:19:17,600 --> 03:19:24,479
64-bit together is a very hard work for

03:19:21,200 --> 03:19:26,399
architecture maintainer i think yeah

03:19:24,479 --> 03:19:28,080
you needed to deal with the high memory

03:19:26,399 --> 03:19:32,080
you needed to deal with some

03:19:28,080 --> 03:19:36,560
stuff specifically for the uh

03:19:32,080 --> 03:19:39,200
for the 32-bit machine yeah that's

03:19:36,560 --> 03:19:40,000
and and and now the the there are there

03:19:39,200 --> 03:19:44,000
are a lot of

03:19:40,000 --> 03:19:47,279
the cost 64

03:19:44,000 --> 03:19:50,800
64 bits machine processors

03:19:47,279 --> 03:19:54,399
such as a 53 or

03:19:50,800 --> 03:19:58,319
yeah i mean maybe 32 bits is not

03:19:54,399 --> 03:20:01,279
a proper time for now to

03:19:58,319 --> 03:20:03,600
develop and new new architecture yeah

03:20:01,279 --> 03:20:03,600
maybe

03:20:09,040 --> 03:20:17,120
and and as 32 bit you focus on the cost

03:20:13,120 --> 03:20:20,399
low cost and cost down production

03:20:17,120 --> 03:20:22,239
yeah well as i mentioned in my current

03:20:20,399 --> 03:20:24,319
summit talk today which was conflicting

03:20:22,239 --> 03:20:26,800
with this mc

03:20:24,319 --> 03:20:27,520
there's actually a huge market for the

03:20:26,800 --> 03:20:30,800
low low

03:20:27,520 --> 03:20:34,880
end of 32 bit so anything

03:20:30,800 --> 03:20:38,399
just single core less than

03:20:34,880 --> 03:20:40,319
512 megabytes of ram which is basically

03:20:38,399 --> 03:20:42,080
abandoned and i think that was 5 will

03:20:40,319 --> 03:20:44,399
take some of that market

03:20:42,080 --> 03:20:45,840
is that running work excellent yes i am

03:20:44,399 --> 03:20:47,279
i was only talking about stuff running

03:20:45,840 --> 03:20:49,439
linux in my truck

03:20:47,279 --> 03:20:51,439
so there's there's still tons of systems

03:20:49,439 --> 03:20:54,720
with all kinds of architectures

03:20:51,439 --> 03:20:57,840
and uh nobody else is

03:20:54,720 --> 03:21:00,960
using the is producing new chips really

03:20:57,840 --> 03:21:04,720
new new cpu cars and

03:21:00,960 --> 03:21:06,560
i think there's there's uh

03:21:04,720 --> 03:21:08,319
if arm doesn't do any new cars for that

03:21:06,560 --> 03:21:10,239
market then yeah i think some of that

03:21:08,319 --> 03:21:13,279
goes down to how arm has

03:21:10,239 --> 03:21:15,200
kind of designed their core lineup

03:21:13,279 --> 03:21:16,560
right yep i think it's less of a

03:21:15,200 --> 03:21:19,760
fundamental

03:21:16,560 --> 03:21:19,760
32-bit thing

03:21:20,560 --> 03:21:24,399
though if you're trying to replace those

03:21:22,160 --> 03:21:24,960
systems you might want to be 32-bit for

03:21:24,399 --> 03:21:28,000
other

03:21:24,960 --> 03:21:31,439
reasons right but i think yeah

03:21:28,000 --> 03:21:35,120
unless arm starts to

03:21:31,439 --> 03:21:38,239
have more you know small links cable

03:21:35,120 --> 03:21:40,479
stuff um

03:21:38,239 --> 03:21:43,279
going to fill that this is a great setup

03:21:40,479 --> 03:21:43,279
for my next book

03:21:44,560 --> 03:21:50,160
yeah so so i think you know

03:21:47,600 --> 03:21:50,720
32-bit verse 5 linux stuff is going to

03:21:50,160 --> 03:21:52,160
show up

03:21:50,720 --> 03:21:53,760
i think we can agree on that and i think

03:21:52,160 --> 03:21:54,640
we can all agree that it's not going to

03:21:53,760 --> 03:21:58,800
be for

03:21:54,640 --> 03:22:00,880
servers it seems insane

03:21:58,800 --> 03:22:01,840
who do people build anything but uh yeah

03:22:00,880 --> 03:22:03,760
yeah

03:22:01,840 --> 03:22:04,960
but i think there's another aspect of

03:22:03,760 --> 03:22:07,920
this which is just the

03:22:04,960 --> 03:22:10,319
the maintenance burden for um any

03:22:07,920 --> 03:22:12,560
anything that's vendor specific i mean

03:22:10,319 --> 03:22:13,680
certainly it's it's already challenging

03:22:12,560 --> 03:22:15,279
to to

03:22:13,680 --> 03:22:18,080
really have good test coverage on a

03:22:15,279 --> 03:22:20,479
large number of platforms and

03:22:18,080 --> 03:22:22,640
i think that would be another concern

03:22:20,479 --> 03:22:24,800
with accepting anything with

03:22:22,640 --> 03:22:26,399
vendor extensions is ultimately you know

03:22:24,800 --> 03:22:27,600
once it gets into the mainline kernel

03:22:26,399 --> 03:22:29,200
it's sort of our collective

03:22:27,600 --> 03:22:31,520
responsibility to

03:22:29,200 --> 03:22:33,120
to maintain it the vendor has

03:22:31,520 --> 03:22:34,000
essentially transferred some of that

03:22:33,120 --> 03:22:36,640
responsibility

03:22:34,000 --> 03:22:37,920
to us into the community and so yeah

03:22:36,640 --> 03:22:39,200
that's another reason why i think we

03:22:37,920 --> 03:22:40,800
have to be careful about this

03:22:39,200 --> 03:22:43,120
it's a big reason why i'm really

03:22:40,800 --> 03:22:43,600
hesitant to start pulling in vendor

03:22:43,120 --> 03:22:46,960
stuff

03:22:43,600 --> 03:22:48,880
because like what do we do

03:22:46,960 --> 03:22:50,720
with those specs right you know there's

03:22:48,880 --> 03:22:53,120
all sorts of licensing

03:22:50,720 --> 03:22:54,319
and lifetime and what yeah at least

03:22:53,120 --> 03:22:56,080
there's cry foundation

03:22:54,319 --> 03:22:58,560
there's a place to go to handle all of

03:22:56,080 --> 03:23:00,080
that and if we

03:22:58,560 --> 03:23:02,080
if we go outside of that we open

03:23:00,080 --> 03:23:05,359
ourselves to all all sorts of

03:23:02,080 --> 03:23:06,720
scary issues i wasn't trying to push

03:23:05,359 --> 03:23:09,040
the vendor thing we're just talking

03:23:06,720 --> 03:23:14,399
about drop specs and stuff

03:23:09,040 --> 03:23:14,399
wow you opened a huge can of worms

03:23:14,960 --> 03:23:22,479
yeah um so i asked question palmer and

03:23:18,239 --> 03:23:22,479
uh how uh

03:23:23,359 --> 03:23:30,160
my space some vendor specific

03:23:26,479 --> 03:23:33,359
patches like our processors i will send

03:23:30,160 --> 03:23:36,080
you maybe tomorrow or next week

03:23:33,359 --> 03:23:38,000
and could you have a review and then we

03:23:36,080 --> 03:23:40,479
could consider how to merge it

03:23:38,000 --> 03:23:41,680
with the mainline risk file yeah i mean

03:23:40,479 --> 03:23:42,880
i think you can stand there and then you

03:23:41,680 --> 03:23:46,239
will see it

03:23:42,880 --> 03:23:49,600
i'm not in the uk i'm going to take

03:23:46,239 --> 03:23:52,960
vendor extensions yet i think it's

03:23:49,600 --> 03:23:54,399
a little premature i kind of still hope

03:23:52,960 --> 03:23:56,160
that the

03:23:54,399 --> 03:23:57,520
you know that things get sorted out at

03:23:56,160 --> 03:23:58,720
the risk by foundation such that the

03:23:57,520 --> 03:24:02,239
processes kind of

03:23:58,720 --> 03:24:03,680
move fast enough that um

03:24:02,239 --> 03:24:05,680
that people can build hardware using

03:24:03,680 --> 03:24:08,960
foundation specs

03:24:05,680 --> 03:24:08,960
i don't yeah

03:24:10,800 --> 03:24:13,920
so someone just um dimitri just said

03:24:13,359 --> 03:24:15,600
that

03:24:13,920 --> 03:24:19,200
shouldn't the draft extensions go into

03:24:15,600 --> 03:24:19,200
staging tree and never graduate

03:24:19,760 --> 03:24:24,960
historically i mean it'd be fun to hear

03:24:22,560 --> 03:24:27,600
greg kha's perspective on that i think

03:24:24,960 --> 03:24:29,359
in an ideal situation staging probably

03:24:27,600 --> 03:24:31,439
shouldn't even exist

03:24:29,359 --> 03:24:32,640
and and i don't even remember why he

03:24:31,439 --> 03:24:35,840
finally agreed to it

03:24:32,640 --> 03:24:36,960
in the end but uh like to have a huge

03:24:35,840 --> 03:24:39,200
expansion of

03:24:36,960 --> 03:24:40,319
staging i think that would definitely

03:24:39,200 --> 03:24:42,880
cause some

03:24:40,319 --> 03:24:42,880
disturbance

03:24:43,520 --> 03:24:47,439
um some it's kind of like a place where

03:24:46,319 --> 03:24:50,479
code goes to die

03:24:47,439 --> 03:24:54,000
basically particularly like

03:24:50,479 --> 03:24:56,160
mary risk five intensive impact

03:24:54,000 --> 03:24:57,840
in fact our processor could could work

03:24:56,160 --> 03:25:01,120
with the compatible

03:24:57,840 --> 03:25:04,560
compatible with the mainline

03:25:01,120 --> 03:25:05,520
risks by tree but it's with a very low

03:25:04,560 --> 03:25:09,520
performance

03:25:05,520 --> 03:25:12,720
if we want uh if we okay if we want a

03:25:09,520 --> 03:25:15,439
better performance we we will get

03:25:12,720 --> 03:25:17,520
into his enhanced mode and it is in

03:25:15,439 --> 03:25:18,399
constant mode i want to mod it to the

03:25:17,520 --> 03:25:22,160
main

03:25:18,399 --> 03:25:24,479
mainline but since seems it's

03:25:22,160 --> 03:25:27,200
it's currently acceptable by by the

03:25:24,479 --> 03:25:29,680
current uh policy of the expiry

03:25:27,200 --> 03:25:31,840
yeah i mean i think sending the patches

03:25:29,680 --> 03:25:34,319
is okay

03:25:31,840 --> 03:25:36,000
it's still against the policy it'd be

03:25:34,319 --> 03:25:38,399
nice to see what they are

03:25:36,000 --> 03:25:39,279
so we can kind of get a feel for what

03:25:38,399 --> 03:25:45,120
people are doing

03:25:39,279 --> 03:25:45,120
um i don't i don't quite know what to do

03:25:45,439 --> 03:25:50,640
but uh i am

03:25:48,800 --> 03:25:51,920
i am somewhat worried that we have this

03:25:50,640 --> 03:25:55,200
kind of

03:25:51,920 --> 03:25:58,800
coming you know massive fragmentation

03:25:55,200 --> 03:26:04,080
um due to the specs going kind of slow

03:25:58,800 --> 03:26:07,279
and uh i don't it's

03:26:04,080 --> 03:26:10,399
so so i have a quick question for him

03:26:07,279 --> 03:26:13,439
um so is there a reason why

03:26:10,399 --> 03:26:16,080
um some of those custom extensions

03:26:13,439 --> 03:26:18,160
is it possible for alibaba to work with

03:26:16,080 --> 03:26:20,080
the foundation to try and standardize

03:26:18,160 --> 03:26:22,399
them

03:26:20,080 --> 03:26:23,680
first we followed this five foundation

03:26:22,399 --> 03:26:27,120
specification

03:26:23,680 --> 03:26:30,080
this our policy but we made some

03:26:27,120 --> 03:26:33,279
specific problem that we needed to serve

03:26:30,080 --> 03:26:37,200
immediately or we won't

03:26:33,279 --> 03:26:40,560
product my let our products

03:26:37,200 --> 03:26:41,359
meet a customer requirement so we needed

03:26:40,560 --> 03:26:45,359
to

03:26:41,359 --> 03:26:46,560
and then a lot of specific things happen

03:26:45,359 --> 03:26:50,080
there

03:26:46,560 --> 03:26:53,680
for example uh the the currently expired

03:26:50,080 --> 03:26:57,760
forced concurrency of the interconnect

03:26:53,680 --> 03:27:00,960
but you know there are a lot of

03:26:57,760 --> 03:27:01,600
staff could not deal with that and we

03:27:00,960 --> 03:27:04,640
need to let

03:27:01,600 --> 03:27:05,279
memory mapping with the strong order or

03:27:04,640 --> 03:27:08,720
not

03:27:05,279 --> 03:27:12,239
and that means that's not currency

03:27:08,720 --> 03:27:14,800
interconnect so this is one star

03:27:12,239 --> 03:27:16,319
one things and another thing is anxiety

03:27:14,800 --> 03:27:18,960
is the ideas the very

03:27:16,319 --> 03:27:19,760
important features but now it responds

03:27:18,960 --> 03:27:23,920
to

03:27:19,760 --> 03:27:23,920
having a uh

03:27:24,479 --> 03:27:30,560
implementation there and re-implementing

03:27:27,760 --> 03:27:31,040
first and i don't know is the direction

03:27:30,560 --> 03:27:33,600
of the

03:27:31,040 --> 03:27:35,279
survivor is but it could let our

03:27:33,600 --> 03:27:38,720
customer use it and

03:27:35,279 --> 03:27:41,840
get get in a right performance

03:27:38,720 --> 03:27:45,120
and uh and and a lot of stuff it's not

03:27:41,840 --> 03:27:48,239
the catch catch flash the

03:27:45,120 --> 03:27:50,560
detail can flash and the performance

03:27:48,239 --> 03:27:51,920
performance monitor and this is the

03:27:50,560 --> 03:27:54,160
source best fixing

03:27:51,920 --> 03:27:56,399
i think root 5 maybe defines so much

03:27:54,160 --> 03:28:00,880
things so much stuff

03:27:56,399 --> 03:28:01,279
and and uh and maybe we just focus on

03:28:00,880 --> 03:28:04,800
the

03:28:01,279 --> 03:28:07,279
application api not the whole

03:28:04,800 --> 03:28:09,840
he hold the hardware system yeah maybe

03:28:07,279 --> 03:28:12,319
you you needed to leave something to the

03:28:09,840 --> 03:28:12,319
vendors

03:28:13,279 --> 03:28:17,120
but um i guess there is nothing that

03:28:15,120 --> 03:28:19,439
prevents alibaba from

03:28:17,120 --> 03:28:20,319
maintaining your t-head from maintaining

03:28:19,439 --> 03:28:22,840
a

03:28:20,319 --> 03:28:24,080
kernel that they ship to to vendors

03:28:22,840 --> 03:28:27,439
right

03:28:24,080 --> 03:28:27,439
or to customers right

03:28:29,120 --> 03:28:33,200
um i don't want to tell her to just go

03:28:31,279 --> 03:28:36,000
fork

03:28:33,200 --> 03:28:36,319
exactly i don't think i i don't think we

03:28:36,000 --> 03:28:38,800
can

03:28:36,319 --> 03:28:40,000
talk it we just took some technical

03:28:38,800 --> 03:28:43,279
details here

03:28:40,000 --> 03:28:45,520
and i taught the policy and

03:28:43,279 --> 03:28:47,279
i don't i don't want to talk i just want

03:28:45,520 --> 03:28:50,399
to some detail

03:28:47,279 --> 03:28:53,760
technology things and we just made

03:28:50,399 --> 03:28:56,800
problem and so meet some

03:28:53,760 --> 03:29:00,960
performance issues and we solve it and

03:28:56,800 --> 03:29:03,920
and that our our products could be used

03:29:00,960 --> 03:29:07,680
or you cannot be used that means

03:29:03,920 --> 03:29:10,560
compatible risk valve cannot be used

03:29:07,680 --> 03:29:13,680
so why is this not spec worthy if it is

03:29:10,560 --> 03:29:13,680
improving the performance

03:29:14,319 --> 03:29:20,880
for some some

03:29:17,520 --> 03:29:23,680
not not specification i i didn't

03:29:20,880 --> 03:29:24,399
obey or bend the specifically i mean i

03:29:23,680 --> 03:29:27,680
just

03:29:24,399 --> 03:29:30,880
mentioned something that she didn't

03:29:27,680 --> 03:29:35,359
define in the specification having

03:29:30,880 --> 03:29:36,800
been defined here is that even if like

03:29:35,359 --> 03:29:38,560
but like the hardware has to get built

03:29:36,800 --> 03:29:40,880
on timelines that kind of

03:29:38,560 --> 03:29:42,479
aren't viable if you're trying to get

03:29:40,880 --> 03:29:45,920
specifications through the

03:29:42,479 --> 03:29:46,880
foundation process so things are going

03:29:45,920 --> 03:29:48,239
to

03:29:46,880 --> 03:29:50,560
be different between what would

03:29:48,239 --> 03:29:53,359
eventually be ratified and

03:29:50,560 --> 03:29:55,279
the first couple rounds of hardware even

03:29:53,359 --> 03:29:57,279
if you're trying to play ball

03:29:55,279 --> 03:29:58,640
that's kind of my worry but but for

03:29:57,279 --> 03:30:00,319
embedded i think it doesn't

03:29:58,640 --> 03:30:01,760
really matter so much and that you guys

03:30:00,319 --> 03:30:03,920
can just have your own

03:30:01,760 --> 03:30:04,960
you know open embedded or whatever

03:30:03,920 --> 03:30:06,960
distribution

03:30:04,960 --> 03:30:08,560
but in the moment it kind of goes into

03:30:06,960 --> 03:30:10,560
mainline that's when

03:30:08,560 --> 03:30:12,640
you know you get into these issues of

03:30:10,560 --> 03:30:14,560
what the linux distros support

03:30:12,640 --> 03:30:16,640
and just these broader maintenance

03:30:14,560 --> 03:30:19,120
issues and and that's i think why

03:30:16,640 --> 03:30:22,239
there's this incentive to work with the

03:30:19,120 --> 03:30:26,720
foundation to to get things standardized

03:30:22,239 --> 03:30:29,920
so so i i know so i i

03:30:26,720 --> 03:30:31,439
so i tell you that that's our process

03:30:29,920 --> 03:30:33,040
compatible with the risk by

03:30:31,439 --> 03:30:35,600
specification but

03:30:33,040 --> 03:30:37,279
we have another enhanced mode and to

03:30:35,600 --> 03:30:39,439
make the performance better

03:30:37,279 --> 03:30:40,479
and a lot of things is not defined in

03:30:39,439 --> 03:30:43,600
the

03:30:40,479 --> 03:30:47,439
current education so

03:30:43,600 --> 03:30:51,040
that is our current status here

03:30:47,439 --> 03:30:54,000
and i need you help to to direct us

03:30:51,040 --> 03:30:55,840
how to do next maybe we will have to

03:30:54,000 --> 03:30:59,840
respond

03:30:55,840 --> 03:30:59,840
better here

03:31:00,960 --> 03:31:07,600
all right so we're out of time

03:31:04,080 --> 03:31:08,239
um is anyone i'm next does anyone else

03:31:07,600 --> 03:31:12,160
have anything

03:31:08,239 --> 03:31:15,200
like last last word

03:31:12,160 --> 03:31:18,239
just one quick comment alistair that um

03:31:15,200 --> 03:31:20,319
uh from a distro standpoint if it's not

03:31:18,239 --> 03:31:23,840
in a ratified standard

03:31:20,319 --> 03:31:24,960
um with existing hardware i'm not

03:31:23,840 --> 03:31:26,160
interested

03:31:24,960 --> 03:31:28,239
because i'm going to have to support

03:31:26,160 --> 03:31:29,120
that for 10 years i think that's

03:31:28,239 --> 03:31:31,840
reasonable

03:31:29,120 --> 03:31:32,880
yeah i know we're not trying to say you

03:31:31,840 --> 03:31:34,880
know

03:31:32,880 --> 03:31:36,080
vector extension is draft therefore

03:31:34,880 --> 03:31:38,880
deviant has to support it

03:31:36,080 --> 03:31:40,800
just disabled by default just an option

03:31:38,880 --> 03:31:42,239
so we don't have to maintain it as much

03:31:40,800 --> 03:31:44,880
people can test it people who are

03:31:42,239 --> 03:31:46,720
interested can test it submit patches

03:31:44,880 --> 03:31:48,000
bring up hardware bring up fpgas all

03:31:46,720 --> 03:31:49,680
that stuff not

03:31:48,000 --> 03:31:51,120
you know shipping it in braille or

03:31:49,680 --> 03:31:53,520
debian or anything like that so

03:31:51,120 --> 03:31:54,239
exactly i think the twist is that one of

03:31:53,520 --> 03:31:57,439
the

03:31:54,239 --> 03:31:58,160
um basically our premise is we will put

03:31:57,439 --> 03:32:01,920
it in real

03:31:58,160 --> 03:32:03,760
if it is upstream so i i now have this

03:32:01,920 --> 03:32:05,279
if palmer decides to suddenly start

03:32:03,760 --> 03:32:08,160
accepting things

03:32:05,279 --> 03:32:09,279
right then i now have this the situation

03:32:08,160 --> 03:32:11,120
where

03:32:09,279 --> 03:32:13,359
i have have a mainline kernel that i

03:32:11,120 --> 03:32:14,239
have to accept patches for for hardware

03:32:13,359 --> 03:32:16,800
that may not

03:32:14,239 --> 03:32:19,040
comply with the with the valve or with

03:32:16,800 --> 03:32:21,600
the uh standard that's still trapped

03:32:19,040 --> 03:32:22,560
right so yeah it's kind of my i prefer

03:32:21,600 --> 03:32:25,920
that's not gonna work

03:32:22,560 --> 03:32:27,439
keep it you know tree yeah keep it

03:32:25,920 --> 03:32:31,600
someplace else all right

03:32:27,439 --> 03:32:31,600
so it's very easy right yeah

03:32:33,359 --> 03:32:39,520
i just typed in the chat as well if we

03:32:36,880 --> 03:32:40,080
i don't see a problem with just merging

03:32:39,520 --> 03:32:42,800
uh

03:32:40,080 --> 03:32:43,920
unreadified specs into the kernel like

03:32:42,800 --> 03:32:47,200
support for them

03:32:43,920 --> 03:32:48,960
uh as long as it's turned off by default

03:32:47,200 --> 03:32:50,239
and it's very clear that distros will

03:32:48,960 --> 03:32:51,760
not be able to turn it on

03:32:50,239 --> 03:32:53,520
like you can make it depend on config

03:32:51,760 --> 03:32:54,239
expert which is always disabled in this

03:32:53,520 --> 03:32:55,920
shows

03:32:54,239 --> 03:32:57,760
the code can be there people can look at

03:32:55,920 --> 03:32:59,359
it and everybody

03:32:57,760 --> 03:33:01,680
who reads the code should get the

03:32:59,359 --> 03:33:05,840
warning that yes this will change if the

03:33:01,680 --> 03:33:07,520
specification changes

03:33:05,840 --> 03:33:08,880
so i guess um how is that different

03:33:07,520 --> 03:33:13,120
though from keeping it in a

03:33:08,880 --> 03:33:14,800
separate branch separate branches always

03:33:13,120 --> 03:33:16,479
are a pain to maintain somebody has to

03:33:14,800 --> 03:33:18,479
maintain it nobody knows if this is

03:33:16,479 --> 03:33:20,239
still the current version or if

03:33:18,479 --> 03:33:21,680
the maintainer has changed and there's

03:33:20,239 --> 03:33:24,560
no different tree to look at

03:33:21,680 --> 03:33:25,840
or whatever just if if people are

03:33:24,560 --> 03:33:27,359
actively working on it put it in

03:33:25,840 --> 03:33:29,200
mainland if people stop working on it

03:33:27,359 --> 03:33:30,160
take it out of mainland just remove the

03:33:29,200 --> 03:33:33,600
code

03:33:30,160 --> 03:33:37,120
but just uh don't have too many trees

03:33:33,600 --> 03:33:40,479
it's my journey speaking as somebody who

03:33:37,120 --> 03:33:44,000
who has to review a lot of code like and

03:33:40,479 --> 03:33:46,319
you know it the churn like of just

03:33:44,000 --> 03:33:48,160
constantly adding and and reviewing the

03:33:46,319 --> 03:33:49,840
draft spec stuff is

03:33:48,160 --> 03:33:51,760
is definitely more work for me than it

03:33:49,840 --> 03:33:55,200
would be if we just tossed it in like a

03:33:51,760 --> 03:33:57,920
separate branch or a separate tree

03:33:55,200 --> 03:33:59,680
yeah well do whatever whatever is less

03:33:57,920 --> 03:34:01,600
work for you then

03:33:59,680 --> 03:34:02,960
i would do it in the in the kernel tree

03:34:01,600 --> 03:34:05,359
if you think it's less work to do it in

03:34:02,960 --> 03:34:07,920
a separate tree then do that

03:34:05,359 --> 03:34:10,720
but don't let it stop you from adding it

03:34:07,920 --> 03:34:14,880
if if we can just disable it i think

03:34:10,720 --> 03:34:17,359
if it's um i don't think the abi

03:34:14,880 --> 03:34:19,840
argument is very strong if it's turned

03:34:17,359 --> 03:34:22,160
off by default and

03:34:19,840 --> 03:34:23,359
we reserve the right to change it at

03:34:22,160 --> 03:34:29,840
bill if

03:34:23,359 --> 03:34:29,840
according to the specification

03:34:30,319 --> 03:34:34,640
okay um can someone take back presenter

03:34:33,840 --> 03:34:43,840
mode and

03:34:34,640 --> 03:34:43,840
change the slides

03:34:48,960 --> 03:34:52,800
just trying to unmute myself when i hung

03:34:50,720 --> 03:34:52,800
up

03:34:53,760 --> 03:34:57,840
i don't even know if you can hear me uh

03:35:00,319 --> 03:35:03,120
yeah we can hear you

03:35:04,000 --> 03:35:06,399
awesome

03:35:07,120 --> 03:35:13,040
presenter mode yourself uh

03:35:10,160 --> 03:35:15,040
how do i oh yeah i can do it how do i

03:35:13,040 --> 03:35:18,160
we'll race

03:35:15,040 --> 03:35:19,279
all right should be good okay cool um

03:35:18,160 --> 03:35:21,359
so i'll start straight away because

03:35:19,279 --> 03:35:23,920
we're a little late um

03:35:21,359 --> 03:35:24,960
so 32-bit rs5 port people have talked

03:35:23,920 --> 03:35:28,160
about it today

03:35:24,960 --> 03:35:28,960
i'm not gonna talk about it too much um

03:35:28,160 --> 03:35:30,319
i'll just wait

03:35:28,960 --> 03:35:33,680
skip ahead to the discussion part

03:35:30,319 --> 03:35:36,239
basically so for anyone who doesn't know

03:35:33,680 --> 03:35:37,040
um the unix epoch's gonna overflow with

03:35:36,239 --> 03:35:39,200
32-bit

03:35:37,040 --> 03:35:40,160
time t that's called the year 2038

03:35:39,200 --> 03:35:42,399
problem

03:35:40,160 --> 03:35:43,680
um and about i think two years ago now

03:35:42,399 --> 03:35:46,479
in a plumbers

03:35:43,680 --> 03:35:47,040
it was decided that we would a wrist

03:35:46,479 --> 03:35:50,000
five

03:35:47,040 --> 03:35:53,040
just skip the 32-bit time t and just

03:35:50,000 --> 03:35:55,279
support a 64-bit time team

03:35:53,040 --> 03:35:57,359
and that was just going to start with

03:35:55,279 --> 03:35:59,120
the linux 5.1 kernel

03:35:57,359 --> 03:36:01,040
and so that's one of the main reasons

03:35:59,120 --> 03:36:03,200
that the wrist 5 32-bit port has taken

03:36:01,040 --> 03:36:05,279
so long

03:36:03,200 --> 03:36:08,080
and so you can download the slides and

03:36:05,279 --> 03:36:11,200
look at this if you're interested

03:36:08,080 --> 03:36:13,279
so discussion points um

03:36:11,200 --> 03:36:15,359
it's pretty much done all the patches

03:36:13,279 --> 03:36:18,960
are reviewed i'm planning on pushing it

03:36:15,359 --> 03:36:22,479
tomorrow unless something comes up today

03:36:18,960 --> 03:36:24,640
that will stop me um

03:36:22,479 --> 03:36:26,560
we'll need the 5.4 kernel and the 5.4

03:36:24,640 --> 03:36:27,439
kernel headers because of the new pe

03:36:26,560 --> 03:36:31,040
pgid

03:36:27,439 --> 03:36:33,840
id type um that's not a big problem

03:36:31,040 --> 03:36:35,680
and yeah lots of benefits of 32 ports

03:36:33,840 --> 03:36:36,239
and talked about earlier that it's going

03:36:35,680 --> 03:36:38,880
to be

03:36:36,239 --> 03:36:40,960
will actually be some market very low in

03:36:38,880 --> 03:36:43,359
32-bit ports around linux

03:36:40,960 --> 03:36:46,080
on top of that fpgas it's much smaller

03:36:43,359 --> 03:36:48,720
to put a 32-bit softcore on fpga

03:36:46,080 --> 03:36:51,279
like vex risk um and it's useful for

03:36:48,720 --> 03:36:51,279
testing things

03:36:53,279 --> 03:36:57,120
so does anyone have any thoughts or

03:36:56,000 --> 03:37:00,080
comments on that

03:36:57,120 --> 03:37:00,880
before i move on to my first kind of

03:37:00,080 --> 03:37:03,840
question

03:37:00,880 --> 03:37:03,840
topic discussion thing

03:37:09,120 --> 03:37:12,560
i have one radical thought which is i

03:37:11,680 --> 03:37:16,399
just

03:37:12,560 --> 03:37:18,479
saw that nothing's stopping you like

03:37:16,399 --> 03:37:20,960
that was great work i mean it taken

03:37:18,479 --> 03:37:21,439
taking much longer than we all expected

03:37:20,960 --> 03:37:24,560
but

03:37:21,439 --> 03:37:27,840
yeah good good work um

03:37:24,560 --> 03:37:32,239
even though uh the most important lipsy

03:37:27,840 --> 03:37:34,960
for 32-bit is probably muscle

03:37:32,239 --> 03:37:35,920
a motherboard should probably take take

03:37:34,960 --> 03:37:38,399
you

03:37:35,920 --> 03:37:39,120
less than a week to get implemented and

03:37:38,399 --> 03:37:40,800
merged

03:37:39,120 --> 03:37:42,399
now that you've done all the glitzy work

03:37:40,800 --> 03:37:44,910
so when you say take you you mean take

03:37:42,399 --> 03:37:48,399
someone else that's not me

03:37:44,910 --> 03:37:50,080
[Laughter]

03:37:48,399 --> 03:37:51,760
the code is easy to read you could just

03:37:50,080 --> 03:37:54,000
do it and it's

03:37:51,760 --> 03:37:55,279
it's literally just a handful of files

03:37:54,000 --> 03:37:57,439
that you need to implement

03:37:55,279 --> 03:37:58,640
and the api is already there but i think

03:37:57,439 --> 03:38:00,720
some of the muscle folks are pretty

03:37:58,640 --> 03:38:03,359
interested in the 32-bit stuff

03:38:00,720 --> 03:38:04,399
yeah just just like not having a stable

03:38:03,359 --> 03:38:07,840
have someone do it

03:38:04,399 --> 03:38:09,040
it's easy do it um

03:38:07,840 --> 03:38:11,520
yeah that is probably true i think

03:38:09,040 --> 03:38:13,120
muscle is probably more targeted to that

03:38:11,520 --> 03:38:13,600
group but still you still have geolocy

03:38:13,120 --> 03:38:17,120
as it's

03:38:13,600 --> 03:38:19,200
still the most commonly used one

03:38:17,120 --> 03:38:20,640
by my most exciting features that we can

03:38:19,200 --> 03:38:27,199
now actually run the gcc

03:38:20,640 --> 03:38:28,880
test suite without a bunch of insanity

03:38:27,199 --> 03:38:30,640
so how many apis are you going to

03:38:28,880 --> 03:38:33,040
support in this one because i believe

03:38:30,640 --> 03:38:34,720
that 32-bit probably will have more apis

03:38:33,040 --> 03:38:36,560
to support right everybody will

03:38:34,720 --> 03:38:37,920
um some may not have floating points

03:38:36,560 --> 03:38:40,720
some may

03:38:37,920 --> 03:38:44,000
more than 64-bit like here you will have

03:38:40,720 --> 03:38:45,920
more variants i believe right

03:38:44,000 --> 03:38:47,600
uh i was looking at that before what do

03:38:45,920 --> 03:38:51,279
we have yeah so it's

03:38:47,600 --> 03:38:54,319
glitchy 64-bit we just floated

03:38:51,279 --> 03:38:55,920
yeah should be the same as 32. yeah it's

03:38:54,319 --> 03:38:59,120
yeah ilp 32

03:38:55,920 --> 03:39:00,880
and ilp 32d yeah there was some

03:38:59,120 --> 03:39:04,800
discussion of

03:39:00,880 --> 03:39:07,279
you know f not not d f

03:39:04,800 --> 03:39:09,680
but we decided to just not do that

03:39:07,279 --> 03:39:11,760
because it wasn't worth the

03:39:09,680 --> 03:39:14,000
it wasn't worth the extra abi that makes

03:39:11,760 --> 03:39:14,000
sense

03:39:17,680 --> 03:39:20,720
okay i'm gonna move on we can keep

03:39:19,279 --> 03:39:23,840
talking about other things i've just got

03:39:20,720 --> 03:39:26,880
a few things i wanted to discuss too so

03:39:23,840 --> 03:39:29,439
the plt issue is kind of solved

03:39:26,880 --> 03:39:30,560
since i've put these slides together um

03:39:29,439 --> 03:39:33,120
there's a glibc

03:39:30,560 --> 03:39:35,199
test failure where there's a plt memser

03:39:33,120 --> 03:39:36,960
call

03:39:35,199 --> 03:39:38,720
and basically the question was what is

03:39:36,960 --> 03:39:41,439
the plan with the risk five coal and the

03:39:38,720 --> 03:39:43,040
risk five coal plt

03:39:41,439 --> 03:39:44,960
but it seems like there's opinion tools

03:39:43,040 --> 03:39:48,479
patch already sent to fix this up

03:39:44,960 --> 03:39:50,800
and remember maybe like last night or

03:39:48,479 --> 03:39:50,800
something

03:39:52,479 --> 03:40:00,239
um yeah they treat them the same

03:39:56,560 --> 03:40:03,680
a videotools patch from nelson uh

03:40:00,239 --> 03:40:06,000
yeah this morning and this kind of

03:40:03,680 --> 03:40:07,840
test failures in general if you don't

03:40:06,000 --> 03:40:10,960
have linker relaxation then

03:40:07,840 --> 03:40:13,279
it's not fixable so the

03:40:10,960 --> 03:40:16,720
the gillipsie test suite is just a bit

03:40:13,279 --> 03:40:19,680
over eager in this area

03:40:16,720 --> 03:40:22,160
and other targets have to waive similar

03:40:19,680 --> 03:40:23,840
test failures

03:40:22,160 --> 03:40:25,199
yeah the solution to fix the test

03:40:23,840 --> 03:40:28,800
failure was

03:40:25,199 --> 03:40:32,080
how to add a ignore for it

03:40:28,800 --> 03:40:34,319
yeah that that's okay i mean the

03:40:32,080 --> 03:40:35,760
idea is to prevent certain bugs but for

03:40:34,319 --> 03:40:39,040
lip if if

03:40:35,760 --> 03:40:40,479
gcc is built outside the ellipse e3 then

03:40:39,040 --> 03:40:43,040
you just can't

03:40:40,479 --> 03:40:45,120
build it exactly to what the gdp test

03:40:43,040 --> 03:40:47,600
would expect

03:40:45,120 --> 03:40:49,520
so should we so the question is yes so

03:40:47,600 --> 03:40:52,960
this will fall into the binge tills

03:40:49,520 --> 03:40:56,399
whatever 2.36 is that the next release

03:40:52,960 --> 03:40:58,000
um should we

03:40:56,399 --> 03:40:59,600
just put up with the test failure until

03:40:58,000 --> 03:41:02,319
that comes out or should we

03:40:59,600 --> 03:41:03,279
look at fixing the test value in july by

03:41:02,319 --> 03:41:07,760
just ignoring the

03:41:03,279 --> 03:41:07,760
website plt problem

03:41:10,239 --> 03:41:13,120
ah that's what you've got more of a

03:41:11,680 --> 03:41:14,640
flooring question than me but i'd be

03:41:13,120 --> 03:41:16,720
fine just

03:41:14,640 --> 03:41:18,399
like if it's fixed in penny tills i'd be

03:41:16,720 --> 03:41:18,880
fine just leaving it alone in geology

03:41:18,399 --> 03:41:21,279
and

03:41:18,880 --> 03:41:22,880
annotating the test failure when you put

03:41:21,279 --> 03:41:26,399
put the test report up there and

03:41:22,880 --> 03:41:29,680
it'll go away okay yeah

03:41:26,399 --> 03:41:33,840
sounds reasonable to me okay

03:41:29,680 --> 03:41:33,840
cool that one was the quick one

03:41:35,120 --> 03:41:42,000
this one so there's a p thread rw

03:41:38,720 --> 03:41:45,120
block arch struct and

03:41:42,000 --> 03:41:48,319
the this 564-bit one uses

03:41:45,120 --> 03:41:50,960
it looks like this on the left

03:41:48,319 --> 03:41:53,439
and it's the same as the ar-64 one which

03:41:50,960 --> 03:41:56,640
is different to the generic one

03:41:53,439 --> 03:41:57,840
the 32-bit one is looks like this which

03:41:56,640 --> 03:42:01,279
is the generic one

03:41:57,840 --> 03:42:03,040
was there a reason that we used the af64

03:42:01,279 --> 03:42:04,720
style one in the first place and should

03:42:03,040 --> 03:42:07,279
we use that for the 32-bit one or should

03:42:04,720 --> 03:42:11,760
the 32-bit one use the generic one

03:42:07,279 --> 03:42:15,279
this slide is just a white box for me

03:42:11,760 --> 03:42:17,680
can anyone else see it yeah

03:42:15,279 --> 03:42:19,040
it's visible here okay i'm gonna turn

03:42:17,680 --> 03:42:20,479
this thing off and turn it oh here it

03:42:19,040 --> 03:42:21,439
just popped up okay whatever i don't

03:42:20,479 --> 03:42:23,600
know

03:42:21,439 --> 03:42:25,040
let me look for a minute so i think it's

03:42:23,600 --> 03:42:26,800
mostly at you palmer i'm pretty sure you

03:42:25,040 --> 03:42:29,359
did the first pull it so

03:42:26,800 --> 03:42:31,760
yeah and now i have to remember what i

03:42:29,359 --> 03:42:34,319
was doing

03:42:31,760 --> 03:42:34,319
okay so

03:42:35,040 --> 03:42:39,840
that was a lot of questions in the chat

03:42:36,640 --> 03:42:39,840
i can't keep up

03:42:45,600 --> 03:42:49,760
i don't remember sorry

03:42:49,840 --> 03:42:53,359
all right basically it changes the um i

03:42:52,640 --> 03:42:55,279
can't remember

03:42:53,359 --> 03:42:57,279
it it squeezes it all in more you know

03:42:55,279 --> 03:42:59,760
and i remember spending a bunch of time

03:42:57,279 --> 03:43:01,279
doing this i just don't remember why we

03:42:59,760 --> 03:43:04,479
had to do it

03:43:01,279 --> 03:43:06,160
if that makes any sense so

03:43:04,479 --> 03:43:07,840
the current plan is to use the generic

03:43:06,160 --> 03:43:10,800
version in 32-bit

03:43:07,840 --> 03:43:11,359
um if anyone else thinks a reason not to

03:43:10,800 --> 03:43:13,439
do that

03:43:11,359 --> 03:43:15,840
and use the kind of more similar to the

03:43:13,439 --> 03:43:18,720
risk 560 4v1

03:43:15,840 --> 03:43:20,080
let me know so this is the glc that's

03:43:18,720 --> 03:43:21,920
going to be released

03:43:20,080 --> 03:43:23,840
not in like a couple of weeks but like

03:43:21,920 --> 03:43:26,560
six months right five months

03:43:23,840 --> 03:43:28,800
yeah yeah okay all right so i think the

03:43:26,560 --> 03:43:32,840
best thing to do is to just like

03:43:28,800 --> 03:43:36,080
hang the mailing list again and

03:43:32,840 --> 03:43:40,080
yeah try to figure out what i was doing

03:43:36,080 --> 03:43:42,720
five years ago whatever we did yeah

03:43:40,080 --> 03:43:45,120
i think there was an uh what makes it

03:43:42,720 --> 03:43:48,720
complicated is that the implementation

03:43:45,120 --> 03:43:52,479
of the rw lock changed

03:43:48,720 --> 03:43:57,199
and we had to maintain api compatibility

03:43:52,479 --> 03:43:59,439
with initializers if i recall correctly

03:43:57,199 --> 03:44:00,800
and this is why we have this screwed

03:43:59,439 --> 03:44:05,359
hacks

03:44:00,800 --> 03:44:05,359
i think we didn't use the rv 64 version

03:44:05,840 --> 03:44:08,960
or sorry we didn't use the generic

03:44:07,279 --> 03:44:10,560
version even though there was one when

03:44:08,960 --> 03:44:12,000
we did the glob z port the first time

03:44:10,560 --> 03:44:13,520
around for

03:44:12,000 --> 03:44:15,600
some reason it might have been that we

03:44:13,520 --> 03:44:16,399
just didn't want to toss avi

03:44:15,600 --> 03:44:18,479
compatibility

03:44:16,399 --> 03:44:19,600
that late in the process because some

03:44:18,479 --> 03:44:21,040
disturbance is already

03:44:19,600 --> 03:44:23,760
built against it and this didn't seem

03:44:21,040 --> 03:44:25,359
like a scary or a good enough issue to

03:44:23,760 --> 03:44:26,479
toss binary compatibility but i don't

03:44:25,359 --> 03:44:31,840
remember

03:44:26,479 --> 03:44:31,840
for sure if that makes sense

03:44:31,920 --> 03:44:35,680
okay it's not helpful yeah i know sorry

03:44:34,399 --> 03:44:37,120
it's i gotta

03:44:35,680 --> 03:44:38,319
there's almost certainly some email

03:44:37,120 --> 03:44:39,279
there about this somewhere because i

03:44:38,319 --> 03:44:41,840
definitely spent

03:44:39,279 --> 03:44:44,000
a bunch of time staring okay so for the

03:44:41,840 --> 03:44:46,239
time being i'm gonna keep it generic

03:44:44,000 --> 03:44:47,279
and we have five months to change it

03:44:46,239 --> 03:44:50,399
yeah yeah i don't

03:44:47,279 --> 03:44:54,640
i don't i i don't think there's any like

03:44:50,399 --> 03:44:54,640
complete non-starter for the generic

03:44:56,840 --> 03:45:02,080
version

03:44:59,439 --> 03:45:03,120
okay the word size one this is sponsored

03:45:02,080 --> 03:45:06,399
so

03:45:03,120 --> 03:45:07,520
64 is five define this word size time 64

03:45:06,399 --> 03:45:10,720
compact 32

03:45:07,520 --> 03:45:13,359
as one which means we use 32 at times

03:45:10,720 --> 03:45:15,760
for like the login syscall and they get

03:45:13,359 --> 03:45:18,880
rude lines is called

03:45:15,760 --> 03:45:20,479
um we can't set it differently on 32-bit

03:45:18,880 --> 03:45:23,359
geolocy because that would

03:45:20,479 --> 03:45:23,840
never then not allow us to have mixed x

03:45:23,359 --> 03:45:27,359
lens

03:45:23,840 --> 03:45:30,720
user space so the plan is to set it

03:45:27,359 --> 03:45:32,319
as true for 32-bit even though we have a

03:45:30,720 --> 03:45:34,880
64-bit time t

03:45:32,319 --> 03:45:36,000
and then just deal with it like everyone

03:45:34,880 --> 03:45:39,199
else is going to have to

03:45:36,000 --> 03:45:41,760
and migrate forwards

03:45:39,199 --> 03:45:42,800
is that sound reasonable i mean it kind

03:45:41,760 --> 03:45:46,239
of smells like

03:45:42,800 --> 03:45:47,840
a mistake in our 64-bit port it was a

03:45:46,239 --> 03:45:50,960
mistake in the 64 report

03:45:47,840 --> 03:45:50,960
but we're stuck with it now

03:45:51,520 --> 03:45:56,080
we can't do anything about it the only

03:45:53,920 --> 03:45:59,680
option would be that the 32-bit

03:45:56,080 --> 03:46:02,960
just deviates and we don't support

03:45:59,680 --> 03:46:04,880
mixed um excellent user spaces and and

03:46:02,960 --> 03:46:06,319
but that seems worse and then the 64-bit

03:46:04,880 --> 03:46:07,600
still has to migrate

03:46:06,319 --> 03:46:10,080
yeah given that we're going to have to

03:46:07,600 --> 03:46:12,000
deal with this in 64 bit

03:46:10,080 --> 03:46:13,120
i think we're better off just keeping

03:46:12,000 --> 03:46:16,000
them the same

03:46:13,120 --> 03:46:17,120
and dealing with it once if that kind of

03:46:16,000 --> 03:46:20,880
makes sense

03:46:17,120 --> 03:46:24,160
for both of them okay

03:46:20,880 --> 03:46:24,160
that was the plan that through

03:46:24,960 --> 03:46:27,680
oh yeah okay so i think people have been

03:46:26,479 --> 03:46:28,720
chatting about this it's really hard to

03:46:27,680 --> 03:46:32,080
follow the chat

03:46:28,720 --> 03:46:34,319
while talking um but basically

03:46:32,080 --> 03:46:36,000
so now in the next now that we you know

03:46:34,319 --> 03:46:39,439
in a week let's say we'll have

03:46:36,000 --> 03:46:41,439
32-bit glc support for risk five

03:46:39,439 --> 03:46:43,439
but now it's not just that so now we

03:46:41,439 --> 03:46:45,120
have to do a whole heap of other stuff

03:46:43,439 --> 03:46:47,920
so there's a lot of software that's not

03:46:45,120 --> 03:46:50,479
just glibc that does syscalls

03:46:47,920 --> 03:46:51,520
um an open an ssl and busybox two

03:46:50,479 --> 03:46:52,160
examples and they've already been

03:46:51,520 --> 03:46:54,479
patched

03:46:52,160 --> 03:46:56,160
but we need to do it for every other

03:46:54,479 --> 03:46:57,680
program that does syscalls

03:46:56,160 --> 03:46:59,600
so anything does few taxes or time

03:46:57,680 --> 03:47:02,840
related syscalls will need to be patched

03:46:59,600 --> 03:47:04,800
you'll fail to build for 32-bit risk

03:47:02,840 --> 03:47:06,960
five

03:47:04,800 --> 03:47:08,800
so we need something like oe world build

03:47:06,960 --> 03:47:11,439
or dead bootstrap or something like that

03:47:08,800 --> 03:47:12,960
to kind of run through all of the

03:47:11,439 --> 03:47:15,279
programs we can

03:47:12,960 --> 03:47:16,399
and slowly fix them and send patches

03:47:15,279 --> 03:47:20,080
upstream

03:47:16,399 --> 03:47:20,640
so people have okay if people have spare

03:47:20,080 --> 03:47:22,880
time

03:47:20,640 --> 03:47:25,199
now's a good time to start i think it'd

03:47:22,880 --> 03:47:29,359
be really nice to have

03:47:25,199 --> 03:47:33,199
like debian bootstrapped before we

03:47:29,359 --> 03:47:35,279
get stuck with the abi just yeah sanity

03:47:33,199 --> 03:47:36,720
sort of thing but that is a lot of time

03:47:35,279 --> 03:47:38,160
so i don't know how we're going to do

03:47:36,720 --> 03:47:40,319
that

03:47:38,160 --> 03:47:41,840
so that there's a list of things that

03:47:40,319 --> 03:47:44,880
are known to fail for other

03:47:41,840 --> 03:47:48,560
linux when they bootstrapped

03:47:44,880 --> 03:47:51,680
their 64-bit time t on

03:47:48,560 --> 03:47:53,680
other 32-bit ports with muzzle

03:47:51,680 --> 03:47:55,520
so you should certainly look at that i

03:47:53,680 --> 03:47:58,399
can post the link in the chat

03:47:55,520 --> 03:47:58,399
oh yeah if you do that

03:47:59,439 --> 03:48:02,479
is kim around kevin seems like a good

03:48:01,600 --> 03:48:05,680
person though

03:48:02,479 --> 03:48:08,319
it's like helpful yes yes

03:48:05,680 --> 03:48:09,760
um yeah i've tried to send you patches

03:48:08,319 --> 03:48:12,960
upstream but you know they

03:48:09,760 --> 03:48:15,760
met with some um not so much of interest

03:48:12,960 --> 03:48:16,880
i guess is is it going to be rv 32

03:48:15,760 --> 03:48:18,640
specific or

03:48:16,880 --> 03:48:21,199
is it going to be like you know case

03:48:18,640 --> 03:48:25,040
with glibc this will apply

03:48:21,199 --> 03:48:29,840
to all 20 year 2038 safe 32-bit ports

03:48:25,040 --> 03:48:29,840
eventually yeah

03:48:32,160 --> 03:48:36,080
yeah no i was saying that uh are there

03:48:34,000 --> 03:48:39,520
other architectures kind of changing

03:48:36,080 --> 03:48:43,439
from 64 to 90.

03:48:39,520 --> 03:48:47,760
has changed and arm is

03:48:43,439 --> 03:48:47,760
work in progress okay

03:48:49,760 --> 03:48:55,600
would it help to have a futex

03:48:52,880 --> 03:48:57,279
proper futex system called rubber it

03:48:55,600 --> 03:49:00,080
might be an easier sell

03:48:57,279 --> 03:49:01,760
to upstreams to clean this up the

03:49:00,080 --> 03:49:04,399
through text one i think is just a

03:49:01,760 --> 03:49:05,520
simple define you can just define the 64

03:49:04,399 --> 03:49:06,640
one as the

03:49:05,520 --> 03:49:07,840
is the normal one or the other way

03:49:06,640 --> 03:49:09,279
around i kind of have to look at it

03:49:07,840 --> 03:49:11,920
again

03:49:09,279 --> 03:49:13,130
yeah and unless you use the uh and the

03:49:11,920 --> 03:49:14,560
time arguments then

03:49:13,130 --> 03:49:17,600
[Music]

03:49:14,560 --> 03:49:19,120
yeah and like busybox does its own

03:49:17,600 --> 03:49:23,040
get time or something i think because

03:49:19,120 --> 03:49:23,040
they don't trust that the libsy one

03:49:23,520 --> 03:49:26,880
yeah i think a lot of them were changed

03:49:25,279 --> 03:49:29,120
like they were like issues

03:49:26,880 --> 03:49:30,720
in the applications themselves i think

03:49:29,120 --> 03:49:34,239
most of them were like that

03:49:30,720 --> 03:49:38,640
where they assumed um you know the

03:49:34,239 --> 03:49:40,479
bitness or the length of any so

03:49:38,640 --> 03:49:42,080
i think many of them have already been

03:49:40,479 --> 03:49:46,000
addressed with the muscle

03:49:42,080 --> 03:49:46,000
but um we still might have a few

03:49:49,199 --> 03:49:51,439
someone and this is someone in chat

03:49:50,319 --> 03:49:53,520
someone said whatever happened to the

03:49:51,439 --> 03:49:55,199
linux will never change its cisco avi

03:49:53,520 --> 03:49:57,359
the problem is this the old api

03:49:55,199 --> 03:49:58,640
will stop working so we kind of have to

03:49:57,359 --> 03:50:00,560
change it

03:49:58,640 --> 03:50:02,080
and also it's not that we're changing

03:50:00,560 --> 03:50:04,319
the syscall api

03:50:02,080 --> 03:50:06,319
we have a new one yeah like there never

03:50:04,319 --> 03:50:08,960
was one on rv32

03:50:06,319 --> 03:50:11,199
yeah in theory there was one but it

03:50:08,960 --> 03:50:13,920
didn't actually exist

03:50:11,199 --> 03:50:14,479
right the the issue here is that the our

03:50:13,920 --> 03:50:16,560
generic

03:50:14,479 --> 03:50:17,600
sys calls don't smell like everyone

03:50:16,560 --> 03:50:20,640
else's because we have

03:50:17,600 --> 03:50:22,239
64-bit timeteas on 32-bit systems

03:50:20,640 --> 03:50:24,560
but everyone else will eventually be

03:50:22,239 --> 03:50:24,560
like this

03:50:25,279 --> 03:50:31,760
or they'll stop working yeah

03:50:28,640 --> 03:50:36,000
sorry this has been going on for

03:50:31,760 --> 03:50:39,279
for many years we got one was that

03:50:36,000 --> 03:50:41,279
the the open 80 the open mat

03:50:39,279 --> 03:50:43,120
system called replace the open system

03:50:41,279 --> 03:50:45,040
call for new architecture so you have

03:50:43,120 --> 03:50:48,080
the same problem there

03:50:45,040 --> 03:50:51,040
it's just it looks rv

03:50:48,080 --> 03:50:51,760
sorry too specific because you're just

03:50:51,040 --> 03:50:55,199
the first

03:50:51,760 --> 03:50:56,960
people who encountered these issues

03:50:55,199 --> 03:50:58,399
yeah and every time there's a new

03:50:56,960 --> 03:50:59,359
architecture going in you've got to go

03:50:58,399 --> 03:51:03,359
chase around

03:50:59,359 --> 03:51:06,080
everybody who does this call stuff yeah

03:51:03,359 --> 03:51:08,239
well one one difference here is that

03:51:06,080 --> 03:51:10,560
glibc actually tries to handle it

03:51:08,239 --> 03:51:11,279
differently from the others instead of

03:51:10,560 --> 03:51:14,640
making

03:51:11,279 --> 03:51:15,359
risk 5 32 behave the same way as the

03:51:14,640 --> 03:51:18,640
others

03:51:15,359 --> 03:51:20,000
will behave the decision for glibc was

03:51:18,640 --> 03:51:22,319
to intentionally

03:51:20,000 --> 03:51:24,960
make it as different as possible as far

03:51:22,319 --> 03:51:24,960
as i can tell

03:51:25,600 --> 03:51:29,199
but presumably every other new arch that

03:51:27,680 --> 03:51:31,840
goes in would be

03:51:29,199 --> 03:51:31,840
this flavor

03:51:32,479 --> 03:51:38,880
yes well there won't be any more

03:51:36,080 --> 03:51:40,720
32-bit architecture sorry there might

03:51:38,880 --> 03:51:42,960
still be 64-bit architectures getting

03:51:40,720 --> 03:51:47,840
merged but this is the last 32-1

03:51:42,960 --> 03:51:47,840
yeah well sure

03:51:50,239 --> 03:51:54,880
um so someone asked why would you want

03:51:52,640 --> 03:51:56,800
linux on rb32

03:51:54,880 --> 03:51:58,000
oh no okay sorry joe was answering

03:51:56,800 --> 03:52:00,319
something um

03:51:58,000 --> 03:52:01,040
so yeah someone else i think today asked

03:52:00,319 --> 03:52:04,160
about

03:52:01,040 --> 03:52:05,359
distros i think the i don't think

03:52:04,160 --> 03:52:06,560
there's any support from debbie and a

03:52:05,359 --> 03:52:08,720
fedora or anything to

03:52:06,560 --> 03:52:11,120
support 32-bit this will just be a you

03:52:08,720 --> 03:52:14,319
know a build route an open wit

03:52:11,120 --> 03:52:17,520
open embedded that type of thing

03:52:14,319 --> 03:52:20,399
open embedded has 32-bit support now um

03:52:17,520 --> 03:52:20,960
with you know the patches but eventually

03:52:20,399 --> 03:52:24,080
it'll be

03:52:20,960 --> 03:52:25,120
upstream gillebc i think uh if someone

03:52:24,080 --> 03:52:27,840
wants to do

03:52:25,120 --> 03:52:28,640
debbie and fedora whatever it would be a

03:52:27,840 --> 03:52:31,199
good thing to do

03:52:28,640 --> 03:52:33,199
it it does test a different set of

03:52:31,199 --> 03:52:35,920
things that open a better does

03:52:33,199 --> 03:52:37,680
yes oh yeah this is definitely worth

03:52:35,920 --> 03:52:38,960
doing but i i don't know if they'll

03:52:37,680 --> 03:52:40,640
officially you know i think that at

03:52:38,960 --> 03:52:42,000
these kind of desktop destroyers are

03:52:40,640 --> 03:52:45,040
getting rid of things

03:52:42,000 --> 03:52:47,680
i think it's unlikely there are

03:52:45,040 --> 03:52:49,279
serious users that kind of make sense

03:52:47,680 --> 03:52:52,160
yeah

03:52:49,279 --> 03:52:52,800
but anyone doing fpgas now you can run

03:52:52,160 --> 03:52:55,840
upstream

03:52:52,800 --> 03:52:58,640
glfc one well in a week about

03:52:55,840 --> 03:52:58,640
stream gfc

03:52:59,920 --> 03:53:02,239
um

03:53:05,040 --> 03:53:11,199
does anyone else have i think my

03:53:08,080 --> 03:53:12,880
my last one is s trace and this is

03:53:11,199 --> 03:53:15,040
kind of off the deep end here but i

03:53:12,880 --> 03:53:15,920
can't get my s trace for 32-bit risk

03:53:15,040 --> 03:53:17,439
five to work

03:53:15,920 --> 03:53:21,439
and it hangs on this syscall so if

03:53:17,439 --> 03:53:22,560
anyone knows what that is

03:53:21,439 --> 03:53:25,359
otherwise i'm out of slides and

03:53:22,560 --> 03:53:25,359
discussion points

03:53:28,720 --> 03:53:31,920
so if anyone else has anything they want

03:53:30,080 --> 03:53:35,199
to talk about or add

03:53:31,920 --> 03:53:38,640
now's the time i just

03:53:35,199 --> 03:53:40,239
thanks for doing this it was a big

03:53:38,640 --> 03:53:42,560
a big problem for a long time so it's

03:53:40,239 --> 03:53:44,720
great to have this exceedingly close to

03:53:42,560 --> 03:53:44,720
don

03:53:47,040 --> 03:53:53,520
yeah that's finally gonna get in so

03:53:51,760 --> 03:54:05,840
now i'm volunteered to do the muscle

03:53:53,520 --> 03:54:05,840
port so we're good there

03:54:12,239 --> 03:54:21,359
i'm holding

03:54:19,760 --> 03:54:24,880
we can wrap up it i mean there's still

03:54:21,359 --> 03:54:24,880
people chatting in the chat room

03:54:27,439 --> 03:54:31,120
yeah with the number of people involved

03:54:29,120 --> 03:54:32,640
it might be easier to uh

03:54:31,120 --> 03:54:47,840
chat the chat room that to try to use

03:54:32,640 --> 03:54:47,840
the audio

03:54:59,840 --> 03:55:03,600
oh and gen 2 has 30 bit 2-bit support as

03:55:02,479 --> 03:55:08,399
well

03:55:03,600 --> 03:55:11,680
they use muscle don't they no they don't

03:55:08,399 --> 03:55:11,680
they don't no

03:55:12,000 --> 03:55:18,239
um muscles uh alpine

03:55:15,520 --> 03:55:19,279
they use oh it's horse again yeah i'm

03:55:18,239 --> 03:55:20,720
pretty sure we just had a bunch of

03:55:19,279 --> 03:55:22,960
attitude stuff in gently land for a

03:55:20,720 --> 03:55:22,960
while

03:55:26,000 --> 03:55:30,319
so it's 5.4 gonna be the first kind of

03:55:28,960 --> 03:55:33,040
like stable api for

03:55:30,319 --> 03:55:33,040
32-bit

03:55:33,840 --> 03:55:40,319
uh no the arc has a port already

03:55:37,439 --> 03:55:40,640
um they used all our generic work we did

03:55:40,319 --> 03:55:43,920
and

03:55:40,640 --> 03:55:46,960
snuck in and got that supporting first

03:55:43,920 --> 03:55:50,479
yep so so both glibc and muscle

03:55:46,960 --> 03:55:52,399
actually support running 64-bit time

03:55:50,479 --> 03:55:55,120
tube on older kernels

03:55:52,399 --> 03:55:56,000
and muscle has a lot of changes in there

03:55:55,120 --> 03:55:59,279
to even make

03:55:56,000 --> 03:56:00,080
all the octals work that i think glibc

03:55:59,279 --> 03:56:01,840
does not

03:56:00,080 --> 03:56:03,199
have so if you want to have certain

03:56:01,840 --> 03:56:06,399
device drivers

03:56:03,199 --> 03:56:08,479
like audio support then you need an even

03:56:06,399 --> 03:56:10,479
newer kernel i think 5.6 has all the

03:56:08,479 --> 03:56:12,160
patches you need for that or you need

03:56:10,479 --> 03:56:15,359
the same kind of iokto

03:56:12,160 --> 03:56:17,439
emulation that muzzle has but most

03:56:15,359 --> 03:56:20,000
likely they

03:56:17,439 --> 03:56:20,479
the machines that we're interested in

03:56:20,000 --> 03:56:22,880
would

03:56:20,479 --> 03:56:25,840
run a newer kernel anyway or they would

03:56:22,880 --> 03:56:25,840
not have sound support

03:56:30,290 --> 03:56:34,319
[Music]

03:56:31,680 --> 03:56:35,520
and we also have in project we have the

03:56:34,319 --> 03:56:41,040
really really old

03:56:35,520 --> 03:56:44,000
x32 which also had a 64-bit time t

03:56:41,040 --> 03:56:46,640
but given the recent number of bug

03:56:44,000 --> 03:56:48,319
reports that have come in

03:56:46,640 --> 03:56:50,640
i don't know how many people have used

03:56:48,319 --> 03:56:52,640
it and enough

03:56:50,640 --> 03:56:55,760
we tried to kill it off i think two

03:56:52,640 --> 03:56:58,160
years ago and there were

03:56:55,760 --> 03:56:59,760
very few reports from users so some

03:56:58,160 --> 03:57:03,760
people like to run

03:56:59,760 --> 03:57:06,160
just gcc under it

03:57:03,760 --> 03:57:07,680
because it's faster and there was like

03:57:06,160 --> 03:57:08,479
one or two people who actually run the

03:57:07,680 --> 03:57:11,680
phone system

03:57:08,479 --> 03:57:14,880
and i just assumed they don't report

03:57:11,680 --> 03:57:14,880
their bugs because they're too many of

03:57:18,840 --> 03:57:21,840
them

03:57:22,880 --> 03:57:27,840
uh uh now the chat's just gone they're

03:57:24,880 --> 03:57:27,840
talking about mmus

03:57:29,199 --> 03:57:32,640
uh just just talking i guess there's the

03:57:32,080 --> 03:57:34,960
chat

03:57:32,640 --> 03:57:36,000
like me not this chat but that other

03:57:34,960 --> 03:57:38,399
chat

03:57:36,000 --> 03:57:39,279
which might be a good place to keep all

03:57:38,399 --> 03:57:40,800
this stuff going

03:57:39,279 --> 03:57:42,640
there's also some hackers and whatnot

03:57:40,800 --> 03:57:45,920
but i think we're out of time

03:57:42,640 --> 03:57:49,279
ish anyway so yeah all right so

03:57:45,920 --> 03:57:51,920
i'm gonna wrap up anyone move to the

03:57:49,279 --> 03:57:53,439
the other chat yeah here it's it's uh

03:57:51,920 --> 03:57:54,399
right here

03:57:53,439 --> 03:57:56,479
do you wanna you talking about

03:57:54,399 --> 03:57:58,160
controlling the chat

03:57:56,479 --> 03:57:59,600
uh yeah i can take it okay it doesn't

03:57:58,160 --> 03:58:01,199
really do a whole lot though

03:57:59,600 --> 03:58:02,800
because i think we're just gonna i don't

03:58:01,199 --> 03:58:04,880
actually really know if i'm meant to

03:58:02,800 --> 03:58:06,239
shut this down or what

03:58:04,880 --> 03:58:07,920
go ahead and just leave the the chat

03:58:06,239 --> 03:58:08,960
running we'll go ahead or just

03:58:07,920 --> 03:58:10,640
just leave the room running we'll take

03:58:08,960 --> 03:58:11,520
care of shutting everything down and uh

03:58:10,640 --> 03:58:12,160
getting rid of the livestream and

03:58:11,520 --> 03:58:14,319
everything

03:58:12,160 --> 03:58:16,800
cool thanks because i don't know how to

03:58:14,319 --> 03:58:19,199
do that all right uh bye everyone

03:58:16,800 --> 03:58:20,880
uh i guess we've got mailing lists and

03:58:19,199 --> 03:58:24,319
irc and all that sort of stuff

03:58:20,880 --> 03:58:25,920
so we're gonna save the notes but also

03:58:24,319 --> 03:58:27,359
just go ahead and grab and save the

03:58:25,920 --> 03:58:31,199
shared notes if you if you want those

03:58:27,359 --> 03:58:45,840
for your own records as well okay

03:58:31,199 --> 03:58:45,840
all right

03:59:43,840 --> 03:59:45,920

YouTube URL: https://www.youtube.com/watch?v=Lfhhv3SSgbc


