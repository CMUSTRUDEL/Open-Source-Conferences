Title: LPC 2020 - Application Ecosystem MC
Publication date: 2020-08-28
Playlist: LPC2020 - Live Streams
Description: 
	Linux Plumbers Conference 2020
Captions: 
	00:00:00,000 --> 00:00:06,160
having this market conference will help

00:00:03,120 --> 00:00:10,320
build better rapport between

00:00:06,160 --> 00:00:13,519
those of us who build apps

00:00:10,320 --> 00:00:16,880
work with graphics drivers and and

00:00:13,519 --> 00:00:21,439
really help build user space

00:00:16,880 --> 00:00:25,039
uh so let's uh let's have some great

00:00:21,439 --> 00:00:29,359
great discussions going forward and um

00:00:25,039 --> 00:00:31,840
i'm and uh the ethics go

00:00:29,359 --> 00:00:31,840
so

00:00:32,399 --> 00:00:35,760
uh alex if you want to go and get your

00:00:35,040 --> 00:00:39,280
slides up

00:00:35,760 --> 00:00:45,840
and we can get started here in a minute

00:00:39,280 --> 00:00:45,840
all right cool cool

00:00:53,199 --> 00:00:56,559
turn myself off of

00:00:56,640 --> 00:01:01,359
we'll use you set up the slides or can i

00:00:59,280 --> 00:01:02,960
switch them over

00:01:01,359 --> 00:01:05,519
you should be able to switch them over

00:01:02,960 --> 00:01:08,560
they're already uploaded so

00:01:05,519 --> 00:01:08,560
you should just have to

00:01:10,479 --> 00:01:16,000
hit the plus button and then

00:01:13,920 --> 00:01:17,600
hit the upload or where it says upload

00:01:16,000 --> 00:01:19,280
you should already be there

00:01:17,600 --> 00:01:20,640
alex i'll put them up for you and make

00:01:19,280 --> 00:01:22,479
you presenter and then after that the

00:01:20,640 --> 00:01:24,640
next speaker oh yeah you need to be

00:01:22,479 --> 00:01:26,799
presented yeah sure there you go oh yeah

00:01:24,640 --> 00:01:30,960
that works oh wow

00:01:26,799 --> 00:01:33,759
there it rendered kind of poorly but

00:01:30,960 --> 00:01:35,680
you're our presenter all right now it

00:01:33,759 --> 00:01:37,600
works

00:01:35,680 --> 00:01:39,520
the platform converts all your artwork

00:01:37,600 --> 00:01:40,799
back into svgs and then the text back

00:01:39,520 --> 00:01:44,560
into text so sometimes

00:01:40,799 --> 00:01:46,320
yeah it's not looking great but whatever

00:01:44,560 --> 00:01:48,000
i think only you can notice it looks

00:01:46,320 --> 00:01:49,680
good from here oh

00:01:48,000 --> 00:01:51,920
the background is supposed to be all

00:01:49,680 --> 00:01:52,799
like gradient and stuff and the gray is

00:01:51,920 --> 00:01:55,600
just

00:01:52,799 --> 00:01:57,439
looking bad but whatever it looks it

00:01:55,600 --> 00:01:59,439
looks fine on my end i don't

00:01:57,439 --> 00:02:00,640
all right no i i've seen what he's not

00:01:59,439 --> 00:02:03,119
talking about you can take his

00:02:00,640 --> 00:02:06,079
uh image capture of the front slide and

00:02:03,119 --> 00:02:08,160
then upload that here if you want

00:02:06,079 --> 00:02:23,840
to matter yeah it looks good alex

00:02:08,160 --> 00:02:23,840
doesn't really matter

00:02:47,760 --> 00:02:52,760
uh if those of you on rocketchat you can

00:02:51,120 --> 00:02:54,720
you can join our application

00:02:52,760 --> 00:02:56,080
ecosystemsmc channel

00:02:54,720 --> 00:02:59,360
and if you have any questions you can

00:02:56,080 --> 00:03:00,879
either um of course buy it now

00:02:59,360 --> 00:03:02,800
it's almost near the end of the

00:03:00,879 --> 00:03:06,000
conference but if you don't know

00:03:02,800 --> 00:03:06,800
then you can ask questions uh on

00:03:06,000 --> 00:03:11,519
rocketchat

00:03:06,800 --> 00:03:13,519
or on the chat here on bbb or

00:03:11,519 --> 00:03:15,599
those of you watching youtube nah you

00:03:13,519 --> 00:03:19,840
can post here i'll monitor

00:03:15,599 --> 00:03:19,840
my other questions there

00:03:32,159 --> 00:03:35,440
all right should we start or

00:03:35,519 --> 00:03:40,239
yes go you got it you have the card

00:03:42,400 --> 00:03:46,480
all right so uh my name is alex i work

00:03:45,440 --> 00:03:49,200
at red hat

00:03:46,480 --> 00:03:51,280
in the desktop group and i mean normally

00:03:49,200 --> 00:03:53,120
that means i'm doing gnome stuff

00:03:51,280 --> 00:03:54,720
but for the last three four years i've

00:03:53,120 --> 00:03:58,159
been working on this thing called

00:03:54,720 --> 00:03:59,040
flat pack and it's it's kind of a

00:03:58,159 --> 00:04:02,080
desktop version

00:03:59,040 --> 00:04:03,519
of containers and i think here at

00:04:02,080 --> 00:04:05,920
plumbers most people are

00:04:03,519 --> 00:04:07,360
more aware of how containers work and in

00:04:05,920 --> 00:04:09,040
particular docker

00:04:07,360 --> 00:04:10,799
so this is going to be a talk about how

00:04:09,040 --> 00:04:13,280
flatback works

00:04:10,799 --> 00:04:14,560
and how it compares to containers like

00:04:13,280 --> 00:04:15,920
docker

00:04:14,560 --> 00:04:17,680
and also some issues we have in the

00:04:15,920 --> 00:04:19,919
ecosystem that we would be cool

00:04:17,680 --> 00:04:21,600
if we could find better ways to do and

00:04:19,919 --> 00:04:23,759
you know ideas of how to solve these

00:04:21,600 --> 00:04:26,400
issues

00:04:23,759 --> 00:04:28,479
so and and also i'm sorry about the

00:04:26,400 --> 00:04:31,040
background it's not supposed to have

00:04:28,479 --> 00:04:32,880
those gray

00:04:31,040 --> 00:04:34,160
triangles they kind of got converted

00:04:32,880 --> 00:04:36,880
badly so

00:04:34,160 --> 00:04:38,160
but that doesn't really matter so what

00:04:36,880 --> 00:04:42,400
is flat pack

00:04:38,160 --> 00:04:44,400
um i have this long description

00:04:42,400 --> 00:04:45,440
uh it's a distribution independent linux

00:04:44,400 --> 00:04:47,520
based application

00:04:45,440 --> 00:04:49,440
distribution and deployment mechanism

00:04:47,520 --> 00:04:51,360
for desktop application

00:04:49,440 --> 00:04:52,479
which is kind of a mouthful so i'm going

00:04:51,360 --> 00:04:55,520
to try to unpack

00:04:52,479 --> 00:04:56,560
some of these it's distribution

00:04:55,520 --> 00:04:58,320
independent

00:04:56,560 --> 00:05:00,880
in the sense that you should be able to

00:04:58,320 --> 00:05:02,880
write your apps

00:05:00,880 --> 00:05:05,120
and build them as flat packs and run

00:05:02,880 --> 00:05:07,120
them on any distribution

00:05:05,120 --> 00:05:09,360
and obviously like flat pack itself also

00:05:07,120 --> 00:05:12,000
has to run on any distribution

00:05:09,360 --> 00:05:15,199
um but it should also be possible to

00:05:12,000 --> 00:05:17,440
build your apps on any distribution

00:05:15,199 --> 00:05:20,560
we have a build system that is contained

00:05:17,440 --> 00:05:24,080
containerized so if you build

00:05:20,560 --> 00:05:25,840
your app on debian or rel or whatever

00:05:24,080 --> 00:05:27,840
it should produce the same bits every

00:05:25,840 --> 00:05:29,600
time so you could work with people in

00:05:27,840 --> 00:05:31,039
in different distros and then they

00:05:29,600 --> 00:05:32,720
should be able to build the same thing

00:05:31,039 --> 00:05:36,320
in the same way

00:05:32,720 --> 00:05:37,840
and also obviously by version i mean

00:05:36,320 --> 00:05:39,600
you know you should be able to run

00:05:37,840 --> 00:05:42,320
debian some older debian

00:05:39,600 --> 00:05:45,280
with a newer app and then upgrade debian

00:05:42,320 --> 00:05:45,280
it should still work

00:05:45,759 --> 00:05:48,880
it's a linux based because we use all

00:05:48,080 --> 00:05:52,880
these

00:05:48,880 --> 00:05:54,720
kernel features for containers

00:05:52,880 --> 00:05:56,960
but that doesn't necessarily mean we can

00:05:54,720 --> 00:05:58,400
just use any kernel features that we

00:05:56,960 --> 00:06:00,479
want

00:05:58,400 --> 00:06:02,160
because an important thing about flat

00:06:00,479 --> 00:06:04,560
pack is that we can use it to run

00:06:02,160 --> 00:06:06,160
on older distros we can run the newer

00:06:04,560 --> 00:06:08,800
app on all older distros

00:06:06,160 --> 00:06:10,960
and and that means we can't have any

00:06:08,800 --> 00:06:14,080
hard requirements on

00:06:10,960 --> 00:06:16,000
kernel features i mean i listed a couple

00:06:14,080 --> 00:06:19,039
of old

00:06:16,000 --> 00:06:21,360
of old distros here and

00:06:19,039 --> 00:06:22,080
while we don't have any specific kernel

00:06:21,360 --> 00:06:25,120
version

00:06:22,080 --> 00:06:27,520
if things of this age starts breaking

00:06:25,120 --> 00:06:30,000
that's something we don't like so

00:06:27,520 --> 00:06:32,840
yeah we don't support ancient things but

00:06:30,000 --> 00:06:34,800
these are like five four five years old

00:06:32,840 --> 00:06:36,880
things

00:06:34,800 --> 00:06:37,919
it's a distribution mechanism meaning

00:06:36,880 --> 00:06:39,919
that you don't have to

00:06:37,919 --> 00:06:41,199
download your things on the side and

00:06:39,919 --> 00:06:44,800
then install them

00:06:41,199 --> 00:06:48,880
it's it's a system that can both install

00:06:44,800 --> 00:06:51,919
and keep things update uh inside itself

00:06:48,880 --> 00:06:54,160
itself and and it's a decentralized uh

00:06:51,919 --> 00:06:54,960
distribution mechanism too like you we

00:06:54,160 --> 00:06:57,840
do have

00:06:54,960 --> 00:06:58,639
flat hub which is kind of a default

00:06:57,840 --> 00:07:02,080
place for

00:06:58,639 --> 00:07:05,440
for free to freeze unopen source apps

00:07:02,080 --> 00:07:07,520
but it should be free for anyone to set

00:07:05,440 --> 00:07:10,880
up their own repository their company

00:07:07,520 --> 00:07:14,400
or you know their project whatever and

00:07:10,880 --> 00:07:18,720
that repository will not have you know

00:07:14,400 --> 00:07:21,680
be less important than say

00:07:18,720 --> 00:07:21,680
flat hub

00:07:22,240 --> 00:07:25,759
it's also a deployment mechanism

00:07:23,919 --> 00:07:27,120
obviously well

00:07:25,759 --> 00:07:28,960
when you have installed something you

00:07:27,120 --> 00:07:31,680
need to be able to run it

00:07:28,960 --> 00:07:32,000
and to run it in a way that we can you

00:07:31,680 --> 00:07:35,440
know

00:07:32,000 --> 00:07:37,280
make uh independent of

00:07:35,440 --> 00:07:38,720
the host we have to run it in a control

00:07:37,280 --> 00:07:40,800
environment and that's where we get this

00:07:38,720 --> 00:07:44,319
whole container thing

00:07:40,800 --> 00:07:46,479
so we naturally have to have a container

00:07:44,319 --> 00:07:47,840
but we also want to have a container

00:07:46,479 --> 00:07:50,160
because that way we can

00:07:47,840 --> 00:07:50,960
improve security in the sense that we

00:07:50,160 --> 00:07:54,479
can protect

00:07:50,960 --> 00:07:57,680
apps against other apps and also

00:07:54,479 --> 00:07:59,840
protect the user's files from apps

00:07:57,680 --> 00:07:59,840
so

00:08:00,879 --> 00:08:06,240
we do have a like a the default sandbox

00:08:04,560 --> 00:08:08,160
if your app doesn't have any specific

00:08:06,240 --> 00:08:09,280
permissions it's very very tight but

00:08:08,160 --> 00:08:11,759
also kind of useful

00:08:09,280 --> 00:08:13,759
useless because you know you can't talk

00:08:11,759 --> 00:08:16,560
to the x server without it and

00:08:13,759 --> 00:08:18,080
a lot of apps are x so we apps can ask

00:08:16,560 --> 00:08:19,840
for more permissions and then we can

00:08:18,080 --> 00:08:21,919
like

00:08:19,840 --> 00:08:24,319
we ask the user if it's all right and if

00:08:21,919 --> 00:08:28,080
they do then we can uh

00:08:24,319 --> 00:08:28,080
then we grant those automatically

00:08:28,240 --> 00:08:32,959
it is focusing on desktop applications

00:08:30,960 --> 00:08:36,159
and and by that that i mean

00:08:32,959 --> 00:08:38,959
it focuses on running in a graphical

00:08:36,159 --> 00:08:41,200
desktop running graphical applications

00:08:38,959 --> 00:08:42,240
it's quite possible to run command line

00:08:41,200 --> 00:08:44,959
apps too

00:08:42,240 --> 00:08:46,320
although it's not super streamlined but

00:08:44,959 --> 00:08:49,360
you know the focus is on

00:08:46,320 --> 00:08:52,560
your stuff and that leads to

00:08:49,360 --> 00:08:54,800
certain certain context of running

00:08:52,560 --> 00:08:57,600
things like

00:08:54,800 --> 00:08:59,040
the applications can never or the system

00:08:57,600 --> 00:09:01,279
as a whole can never require root

00:08:59,040 --> 00:09:02,720
passwords for instance because

00:09:01,279 --> 00:09:06,560
the user might not have their root

00:09:02,720 --> 00:09:09,680
password or sudo rights or anything

00:09:06,560 --> 00:09:11,600
and even the opposite is true too we

00:09:09,680 --> 00:09:14,160
cannot accidentally allow

00:09:11,600 --> 00:09:15,200
or grant the user any kind of root

00:09:14,160 --> 00:09:17,839
permissions because

00:09:15,200 --> 00:09:18,480
uh he might not be supposed to have it i

00:09:17,839 --> 00:09:22,320
mean if

00:09:18,480 --> 00:09:23,839
if you have someone who is a pure user

00:09:22,320 --> 00:09:26,080
you can't grant them docker access

00:09:23,839 --> 00:09:27,600
because docker could give you root

00:09:26,080 --> 00:09:29,440
permissions but we don't do anything

00:09:27,600 --> 00:09:31,200
like that

00:09:29,440 --> 00:09:32,560
we also automatically integrate with the

00:09:31,200 --> 00:09:34,959
desktop

00:09:32,560 --> 00:09:37,200
so the app just you know once you

00:09:34,959 --> 00:09:39,440
install it it just appears in your menus

00:09:37,200 --> 00:09:41,680
when you run it it will get access to

00:09:39,440 --> 00:09:43,519
you know the x server the wayland server

00:09:41,680 --> 00:09:45,200
pulse audio device

00:09:43,519 --> 00:09:47,200
all the kind of things that a desktop

00:09:45,200 --> 00:09:49,680
app expects

00:09:47,200 --> 00:09:50,640
i mean it's certainly possible to run

00:09:49,680 --> 00:09:54,640
say

00:09:50,640 --> 00:09:56,640
firefox in a in a docker container

00:09:54,640 --> 00:09:58,480
but it's it's not automatic you have to

00:09:56,640 --> 00:09:59,440
know all about the x sockets that you

00:09:58,480 --> 00:10:00,880
have to bind in

00:09:59,440 --> 00:10:02,959
in the right place and set the right

00:10:00,880 --> 00:10:03,360
environment variable whereas this is

00:10:02,959 --> 00:10:06,399
just

00:10:03,360 --> 00:10:09,680
automatic it's also very different

00:10:06,399 --> 00:10:11,839
in the sense of lifetime of applications

00:10:09,680 --> 00:10:14,079
lifetime of a container is kind of

00:10:11,839 --> 00:10:16,959
tightly maintained

00:10:14,079 --> 00:10:18,000
whereas these things are just like you

00:10:16,959 --> 00:10:21,120
click somewhere you open

00:10:18,000 --> 00:10:23,760
a file suddenly the editor opens and it

00:10:21,120 --> 00:10:25,839
will be running until you exit it

00:10:23,760 --> 00:10:27,440
and there's no knowledge about what

00:10:25,839 --> 00:10:29,920
what's supposed to be running

00:10:27,440 --> 00:10:30,720
to be restarted there's nothing like

00:10:29,920 --> 00:10:33,120
that

00:10:30,720 --> 00:10:36,000
it's very transient very ad hoc and

00:10:33,120 --> 00:10:39,040
there's never any cis admin kind of

00:10:36,000 --> 00:10:41,360
you know we can't rely

00:10:39,040 --> 00:10:42,720
on say the sysadmins to go in and

00:10:41,360 --> 00:10:46,800
regularly clean out

00:10:42,720 --> 00:10:48,079
old stopped containers like in docker

00:10:46,800 --> 00:10:48,959
that just doesn't work everything has to

00:10:48,079 --> 00:10:54,320
be

00:10:48,959 --> 00:10:54,320
fully automatic with no maintenance

00:10:55,600 --> 00:11:01,279
so i want to talk a bit about how

00:10:59,040 --> 00:11:03,040
flatback differs from containers and by

00:11:01,279 --> 00:11:04,480
containers i mean docker because that's

00:11:03,040 --> 00:11:06,800
what most people think of

00:11:04,480 --> 00:11:07,519
for containers and i think the easiest

00:11:06,800 --> 00:11:11,600
way to

00:11:07,519 --> 00:11:13,600
start with is to take a look at the

00:11:11,600 --> 00:11:16,000
file system layout from the inside of

00:11:13,600 --> 00:11:19,200
the container

00:11:16,000 --> 00:11:22,480
in docker docker you typically run

00:11:19,200 --> 00:11:25,760
like a rest server or or you know

00:11:22,480 --> 00:11:27,040
database or something so it's a very

00:11:25,760 --> 00:11:29,920
small thing that has

00:11:27,040 --> 00:11:32,000
not a lot of dependencies and all the

00:11:29,920 --> 00:11:34,399
the dependencies are hand-picked right

00:11:32,000 --> 00:11:36,399
depending on what what kind of thing

00:11:34,399 --> 00:11:39,760
you're running

00:11:36,399 --> 00:11:43,360
uh generally also they are

00:11:39,760 --> 00:11:45,760
developed like containers produced by

00:11:43,360 --> 00:11:47,760
the same people that kind of run it

00:11:45,760 --> 00:11:49,680
but and it runs as a demon user i mean

00:11:47,760 --> 00:11:51,600
it might be running as root or a demon

00:11:49,680 --> 00:11:53,600
or something or as root in the container

00:11:51,600 --> 00:11:56,639
but not root outside

00:11:53,600 --> 00:11:58,240
but it's not like a regular actual

00:11:56,639 --> 00:12:00,480
person user

00:11:58,240 --> 00:12:01,920
so it has all sorts of privileges in the

00:12:00,480 --> 00:12:04,800
system it writes in var

00:12:01,920 --> 00:12:04,800
log and whatnot

00:12:06,000 --> 00:12:11,600
and so we cannot like we can't know what

00:12:10,000 --> 00:12:14,000
it's what it will do

00:12:11,600 --> 00:12:15,360
to the file system at large and it

00:12:14,000 --> 00:12:17,040
doesn't really need any kind of

00:12:15,360 --> 00:12:19,519
integration with a host at all

00:12:17,040 --> 00:12:20,320
however it does integrate with other

00:12:19,519 --> 00:12:23,440
containers

00:12:20,320 --> 00:12:25,680
typically via dns and port forwarding

00:12:23,440 --> 00:12:26,959
sometimes there are volumes if you have

00:12:25,680 --> 00:12:30,000
to store data but

00:12:26,959 --> 00:12:31,680
but not generally

00:12:30,000 --> 00:12:33,600
there's basically no access to the host

00:12:31,680 --> 00:12:35,279
file system and that's a feature

00:12:33,600 --> 00:12:37,760
because we we want to be able to run the

00:12:35,279 --> 00:12:39,760
containers on any kind of host

00:12:37,760 --> 00:12:41,680
and that shouldn't affect how the app

00:12:39,760 --> 00:12:44,639
works

00:12:41,680 --> 00:12:46,480
and also when when we run our like when

00:12:44,639 --> 00:12:49,440
we roll out an update

00:12:46,480 --> 00:12:50,880
someone get paged if it goes down or if

00:12:49,440 --> 00:12:55,040
it's slow or something

00:12:50,880 --> 00:12:58,079
it's very dissimilar from from uh

00:12:55,040 --> 00:12:58,079
desktop in that sense

00:12:58,240 --> 00:13:02,079
so the the result of this is that we

00:13:01,040 --> 00:13:05,279
have a very simple

00:13:02,079 --> 00:13:07,680
uh layout in the file system the app

00:13:05,279 --> 00:13:09,600
brings yeah sorry to bother you there

00:13:07,680 --> 00:13:10,959
was a comment by frederick talking about

00:13:09,600 --> 00:13:13,200
the use case for development

00:13:10,959 --> 00:13:14,560
environments on the slide you just

00:13:13,200 --> 00:13:15,279
covered i was wondering if you could

00:13:14,560 --> 00:13:17,920
address that

00:13:15,279 --> 00:13:17,920
for a second

00:13:19,040 --> 00:13:22,320
or frederick if you can voice up what

00:13:20,720 --> 00:13:22,560
you're concerned with the comment is

00:13:22,320 --> 00:13:24,480
just

00:13:22,560 --> 00:13:25,920
except for the use case for development

00:13:24,480 --> 00:13:26,959
environment

00:13:25,920 --> 00:13:29,519
i thought that was an interesting

00:13:26,959 --> 00:13:32,399
comment but i didn't do the context

00:13:29,519 --> 00:13:33,680
without losing track of that yeah i

00:13:32,399 --> 00:13:34,880
don't really know oh he's typing

00:13:33,680 --> 00:13:39,360
somewhere

00:13:34,880 --> 00:13:42,160
yes suspense he's gonna talk about

00:13:39,360 --> 00:13:44,720
uh this is about darker stuff yeah i

00:13:42,160 --> 00:13:44,720
mean it suddenly

00:13:45,839 --> 00:13:49,839
said impossible i mean

00:13:49,920 --> 00:13:53,519
generally uh

00:13:54,079 --> 00:13:57,920
i'm talking about generally how you use

00:13:55,680 --> 00:14:00,399
docker though in in sense of a cluster

00:13:57,920 --> 00:14:01,920
or something

00:14:00,399 --> 00:14:03,920
and not necessarily how you would use

00:14:01,920 --> 00:14:08,079
this as a developer i agree as

00:14:03,920 --> 00:14:11,279
as a developer uh if you use it just to

00:14:08,079 --> 00:14:13,279
you know debug or develop it's quite

00:14:11,279 --> 00:14:14,320
a different point of view but but then

00:14:13,279 --> 00:14:16,959
you kind of

00:14:14,320 --> 00:14:18,560
are at the edges of what docker is meant

00:14:16,959 --> 00:14:20,320
to do

00:14:18,560 --> 00:14:22,000
and also i mean at the edges of what i

00:14:20,320 --> 00:14:23,519
mean you can do the same in flat pack

00:14:22,000 --> 00:14:24,880
but it's also kind of not what it's

00:14:23,519 --> 00:14:26,720
focusing on

00:14:24,880 --> 00:14:28,480
so so the file system coupling is a good

00:14:26,720 --> 00:14:29,519
example here i've abused that myself as

00:14:28,480 --> 00:14:31,440
well where you just

00:14:29,519 --> 00:14:32,720
you you have your git repository locally

00:14:31,440 --> 00:14:34,320
you don't want to move it in the docker

00:14:32,720 --> 00:14:35,279
as well so you just sort of expose that

00:14:34,320 --> 00:14:39,040
and

00:14:35,279 --> 00:14:41,199
yeah that's a good example yeah and and

00:14:39,040 --> 00:14:42,399
the way this results in the design of

00:14:41,199 --> 00:14:45,600
docker is that

00:14:42,399 --> 00:14:46,959
uh the image contains everything and

00:14:45,600 --> 00:14:49,120
and you can bring whatever you want and

00:14:46,959 --> 00:14:52,079
you can you know basically

00:14:49,120 --> 00:14:54,639
lay it out however you want and it is

00:14:52,079 --> 00:14:56,880
you know unless you manually do stuff

00:14:54,639 --> 00:14:59,440
uh completely independent on the host

00:14:56,880 --> 00:15:01,760
file system layout

00:14:59,440 --> 00:15:02,959
and flag back what you typically run are

00:15:01,760 --> 00:15:06,240
more like desktop apps

00:15:02,959 --> 00:15:10,399
firefox spotify's the edit and these

00:15:06,240 --> 00:15:12,079
expect a very special kind of layout you

00:15:10,399 --> 00:15:12,959
know they expect it to look basically

00:15:12,079 --> 00:15:16,880
like a

00:15:12,959 --> 00:15:19,040
linux desktop distro

00:15:16,880 --> 00:15:20,000
with for instance app data being read

00:15:19,040 --> 00:15:22,320
only i mean

00:15:20,000 --> 00:15:23,199
user share is not really read-only but

00:15:22,320 --> 00:15:25,920
in terms of an

00:15:23,199 --> 00:15:26,720
uh a user writing there is not possible

00:15:25,920 --> 00:15:29,120
so

00:15:26,720 --> 00:15:30,959
all the apps date goes into user's home

00:15:29,120 --> 00:15:32,560
directory

00:15:30,959 --> 00:15:34,720
uh which is you know this is just how

00:15:32,560 --> 00:15:35,920
things work this doesn't have to be any

00:15:34,720 --> 00:15:39,519
work to make it work so

00:15:35,920 --> 00:15:42,720
this is how it's always worked

00:15:39,519 --> 00:15:45,759
and the file paths

00:15:42,720 --> 00:15:47,199
if if for whatever reason you want the

00:15:45,759 --> 00:15:48,639
app to have access to

00:15:47,199 --> 00:15:51,519
say your home directory or some other

00:15:48,639 --> 00:15:55,199
directory it has to

00:15:51,519 --> 00:15:56,480
have the same location in the sandbox as

00:15:55,199 --> 00:15:59,759
on the host because

00:15:56,480 --> 00:16:02,800
like if you click on a file in in a

00:15:59,759 --> 00:16:03,839
file manager or start something from the

00:16:02,800 --> 00:16:06,959
command line

00:16:03,839 --> 00:16:08,480
you switch over to the sandbox

00:16:06,959 --> 00:16:10,560
and if you load the same path and if

00:16:08,480 --> 00:16:13,839
it's not mapped in the same way

00:16:10,560 --> 00:16:15,440
it'd be extremely confusing for the user

00:16:13,839 --> 00:16:16,959
like you were using you're opening this

00:16:15,440 --> 00:16:19,360
home alex

00:16:16,959 --> 00:16:20,240
blah blah blah and suddenly it's not

00:16:19,360 --> 00:16:21,920
there

00:16:20,240 --> 00:16:24,800
because we started an app so it's very

00:16:21,920 --> 00:16:27,519
different so basically

00:16:24,800 --> 00:16:28,000
the requirements are such that rather

00:16:27,519 --> 00:16:30,079
than the

00:16:28,000 --> 00:16:31,680
sandbox being independent of the host

00:16:30,079 --> 00:16:35,199
it's very tightly

00:16:31,680 --> 00:16:37,920
tied to the look of the host

00:16:35,199 --> 00:16:39,040
and also you know where a docker

00:16:37,920 --> 00:16:40,240
container doesn't have a lot of

00:16:39,040 --> 00:16:42,399
dependencies

00:16:40,240 --> 00:16:44,720
typical desktop app do have a lot of

00:16:42,399 --> 00:16:47,440
dependencies

00:16:44,720 --> 00:16:48,839
so uh as a result the layout is

00:16:47,440 --> 00:16:52,079
completely different

00:16:48,839 --> 00:16:53,680
and what we do is we have

00:16:52,079 --> 00:16:55,279
first of all we have the app in a place

00:16:53,680 --> 00:16:57,680
called slash app which is

00:16:55,279 --> 00:16:59,040
a new top level directory so hopefully

00:16:57,680 --> 00:17:01,440
no one else has

00:16:59,040 --> 00:17:03,279
that so we it will not run into any

00:17:01,440 --> 00:17:05,919
conflicts with anything

00:17:03,279 --> 00:17:07,199
and in slash user we add something

00:17:05,919 --> 00:17:10,160
called the run time

00:17:07,199 --> 00:17:11,439
and the run time is it's like a minute

00:17:10,160 --> 00:17:14,880
distro

00:17:11,439 --> 00:17:18,559
or a base image but it is

00:17:14,880 --> 00:17:20,160
um it contains shared versioning uh

00:17:18,559 --> 00:17:23,600
shared dependency is just like a

00:17:20,160 --> 00:17:25,439
like a base image but it's version

00:17:23,600 --> 00:17:27,280
separately so you can the app can ask

00:17:25,439 --> 00:17:28,799
for a specific major version

00:17:27,280 --> 00:17:30,559
of a runtime but it will still get

00:17:28,799 --> 00:17:32,480
updates to that so we can

00:17:30,559 --> 00:17:34,480
so we can have like security updates to

00:17:32,480 --> 00:17:38,400
the runtime

00:17:34,480 --> 00:17:41,280
within the static or non-changing app

00:17:38,400 --> 00:17:41,679
and and we do have some private things

00:17:41,280 --> 00:17:44,480
like

00:17:41,679 --> 00:17:45,679
slash temp is for security reasons

00:17:44,480 --> 00:17:48,400
separate

00:17:45,679 --> 00:17:50,880
so we have a per app temp but also like

00:17:48,400 --> 00:17:52,240
broken run and stuff are specialized but

00:17:50,880 --> 00:17:56,960
everything else

00:17:52,240 --> 00:17:56,960
is mirrored from the host layout

00:17:57,200 --> 00:18:02,559
or you know it's not visible at all so

00:18:00,400 --> 00:18:05,840
but if you have access to any particular

00:18:02,559 --> 00:18:06,320
uh areas of the the host they get mapped

00:18:05,840 --> 00:18:09,120
in the

00:18:06,320 --> 00:18:09,760
exactly the same way as on the host and

00:18:09,120 --> 00:18:15,440
there's this

00:18:09,760 --> 00:18:18,720
uh per app state directory dot more app

00:18:15,440 --> 00:18:22,400
which is by default the only way

00:18:18,720 --> 00:18:22,400
you can store persistent data

00:18:22,640 --> 00:18:26,400
obviously if you have for some reason

00:18:24,799 --> 00:18:28,400
more permissions you can write wherever

00:18:26,400 --> 00:18:30,160
you have permissions but that's always

00:18:28,400 --> 00:18:32,320
available

00:18:30,160 --> 00:18:34,160
and also we have some some host data

00:18:32,320 --> 00:18:36,320
that is always available like icons and

00:18:34,160 --> 00:18:39,679
fonts because these are kind of

00:18:36,320 --> 00:18:42,880
useful and they are not

00:18:39,679 --> 00:18:46,480
they're safe to expose basically

00:18:42,880 --> 00:18:46,480
so in terms of implementation

00:18:46,799 --> 00:18:51,520
the requirements for docker basically

00:18:50,080 --> 00:18:52,880
requires you to be able to write

00:18:51,520 --> 00:18:55,200
anywhere

00:18:52,880 --> 00:18:56,000
in that for that to be efficient you

00:18:55,200 --> 00:18:59,360
have some kind of

00:18:56,000 --> 00:18:59,760
union style file system or equivalent

00:18:59,360 --> 00:19:02,320
like

00:18:59,760 --> 00:19:05,039
device mapper or something so you have

00:19:02,320 --> 00:19:09,600
one mount which is this image which is

00:19:05,039 --> 00:19:12,960
some kind of uh union style overlay fs2

00:19:09,600 --> 00:19:15,360
these days mostly and this is uh mounted

00:19:12,960 --> 00:19:18,240
by the docker demon that that

00:19:15,360 --> 00:19:20,960
just to set up the route basically and

00:19:18,240 --> 00:19:23,679
then you shroot into it basically

00:19:20,960 --> 00:19:24,880
and track the container and when the

00:19:23,679 --> 00:19:29,360
container dies or

00:19:24,880 --> 00:19:30,960
the less the last process dies

00:19:29,360 --> 00:19:33,360
you unmount this thing and clear up

00:19:30,960 --> 00:19:36,960
clean up after it

00:19:33,360 --> 00:19:40,000
and the way we use union style

00:19:36,960 --> 00:19:42,160
mounts means we share data

00:19:40,000 --> 00:19:44,080
uh on disk between different containers

00:19:42,160 --> 00:19:47,280
that use the same image

00:19:44,080 --> 00:19:49,600
and additionally we can use layers to

00:19:47,280 --> 00:19:50,559
have parts of images shared between each

00:19:49,600 --> 00:19:53,840
other

00:19:50,559 --> 00:19:55,600
but it's you know some some

00:19:53,840 --> 00:19:57,280
some sharing but it's not as good as

00:19:55,600 --> 00:19:58,720
what we will get for flat pack you'll

00:19:57,280 --> 00:20:01,679
see with this

00:19:58,720 --> 00:20:01,679
because in flatback

00:20:01,919 --> 00:20:04,960
instead of having it set up from the

00:20:03,440 --> 00:20:07,760
outside uh

00:20:04,960 --> 00:20:08,960
the actual setup happens inside the

00:20:07,760 --> 00:20:11,120
container so

00:20:08,960 --> 00:20:12,080
the root directory is a temp fs that is

00:20:11,120 --> 00:20:14,960
only visible

00:20:12,080 --> 00:20:16,960
it's mounted inside the container so

00:20:14,960 --> 00:20:19,600
it's the only visible amount of it

00:20:16,960 --> 00:20:20,240
and it the kernel will basically reap it

00:20:19,600 --> 00:20:23,280
when the

00:20:20,240 --> 00:20:25,200
when the uh container exits and then we

00:20:23,280 --> 00:20:27,520
bind mount stuff onto this

00:20:25,200 --> 00:20:29,679
like app and and user are used bind

00:20:27,520 --> 00:20:31,600
mounts or regular directories

00:20:29,679 --> 00:20:34,960
and the other host directories are also

00:20:31,600 --> 00:20:36,640
used like we create the right prefixes

00:20:34,960 --> 00:20:38,000
in the temp fs and then we bind mount

00:20:36,640 --> 00:20:41,520
things into place

00:20:38,000 --> 00:20:43,360
and every all of this will just get uh

00:20:41,520 --> 00:20:44,880
torn down automatically by the kernel

00:20:43,360 --> 00:20:46,159
when it exits

00:20:44,880 --> 00:20:48,960
the only thing that's not fully

00:20:46,159 --> 00:20:51,840
automatic is if some app

00:20:48,960 --> 00:20:55,440
got updated or on uninstall while it was

00:20:51,840 --> 00:20:58,640
running we keep the old thing around

00:20:55,440 --> 00:21:00,559
until the last

00:20:58,640 --> 00:21:02,799
process access that uses that particular

00:21:00,559 --> 00:21:05,280
image and we use

00:21:02,799 --> 00:21:06,559
we have the pit one and the name space

00:21:05,280 --> 00:21:08,320
taking a file lock

00:21:06,559 --> 00:21:09,760
on the image so we can see which ones

00:21:08,320 --> 00:21:12,720
are in use

00:21:09,760 --> 00:21:14,159
so we can garbage collect them and the

00:21:12,720 --> 00:21:16,880
really cool thing is that we use this

00:21:14,159 --> 00:21:17,360
we use the system called os tree which

00:21:16,880 --> 00:21:20,799
is a

00:21:17,360 --> 00:21:22,960
content address store and everything

00:21:20,799 --> 00:21:26,080
that is installed in flat pack is in one

00:21:22,960 --> 00:21:28,320
of these os3 repository on the disk

00:21:26,080 --> 00:21:29,200
and that means anything any file that

00:21:28,320 --> 00:21:31,919
happens to be

00:21:29,200 --> 00:21:33,440
identical between two apps or between

00:21:31,919 --> 00:21:36,000
two runtimes

00:21:33,440 --> 00:21:38,000
uh will hash to the same value and that

00:21:36,000 --> 00:21:41,039
does be shared

00:21:38,000 --> 00:21:42,000
and so we so we get this perfect sharing

00:21:41,039 --> 00:21:44,480
of files

00:21:42,000 --> 00:21:45,200
and then we the actual directories that

00:21:44,480 --> 00:21:48,400
that we

00:21:45,200 --> 00:21:51,520
use as images are hardling forms back

00:21:48,400 --> 00:21:54,400
into this repository so

00:21:51,520 --> 00:21:55,840
that means we get perfect sharing of

00:21:54,400 --> 00:21:59,039
identical files

00:21:55,840 --> 00:22:01,679
both on disk and in page cache since

00:21:59,039 --> 00:22:03,679
you know two files being hard linked

00:22:01,679 --> 00:22:06,640
means they use the same page cache

00:22:03,679 --> 00:22:07,200
data so this is pretty good in terms of

00:22:06,640 --> 00:22:09,600
you know

00:22:07,200 --> 00:22:11,120
using less memory if you have a lot of

00:22:09,600 --> 00:22:12,159
basically all the apps will be using

00:22:11,120 --> 00:22:14,960
glib c

00:22:12,159 --> 00:22:17,679
and they will share the same page cache

00:22:14,960 --> 00:22:17,679
pages for that

00:22:18,000 --> 00:22:23,039
that's pretty cool so some technical

00:22:20,000 --> 00:22:27,760
details about the flatback sandbox

00:22:23,039 --> 00:22:29,840
we use for two reasons as i said before

00:22:27,760 --> 00:22:31,280
uh because we need it and because we

00:22:29,840 --> 00:22:33,520
want it

00:22:31,280 --> 00:22:36,000
and everything is based on unprivileged

00:22:33,520 --> 00:22:40,080
username spaces and this

00:22:36,000 --> 00:22:42,320
no new privs flag which allows uh

00:22:40,080 --> 00:22:44,159
unprivileged username spaces and that

00:22:42,320 --> 00:22:47,520
means there's no root anywhere

00:22:44,159 --> 00:22:50,480
like it runs entirely as your user

00:22:47,520 --> 00:22:50,480
as your uid

00:22:52,240 --> 00:22:55,840
and and

00:22:56,320 --> 00:22:59,440
in in for instance android there's like

00:22:58,320 --> 00:23:02,400
a uid per

00:22:59,440 --> 00:23:02,880
app but the way the linux desktop works

00:23:02,400 --> 00:23:04,799
is

00:23:02,880 --> 00:23:06,559
it just we just cannot do that we we

00:23:04,799 --> 00:23:07,760
have to have everything the same uid so

00:23:06,559 --> 00:23:09,360
we have something else called the

00:23:07,760 --> 00:23:11,120
application id

00:23:09,360 --> 00:23:13,039
that is kind of the security domain of

00:23:11,120 --> 00:23:15,520
any everything

00:23:13,039 --> 00:23:17,280
so we have app permissions which are

00:23:15,520 --> 00:23:21,600
basically per app id so if

00:23:17,280 --> 00:23:23,360
work dot gnome.js has you know access to

00:23:21,600 --> 00:23:25,200
the home directory that's a static

00:23:23,360 --> 00:23:27,200
permission that we set up at

00:23:25,200 --> 00:23:28,559
at launch time it's basically part of

00:23:27,200 --> 00:23:30,960
how we set up

00:23:28,559 --> 00:23:33,280
the kernel when we launch the app and we

00:23:30,960 --> 00:23:36,320
can't change that afterwards

00:23:33,280 --> 00:23:39,600
but we also have interactive

00:23:36,320 --> 00:23:40,640
permissions things like access to a

00:23:39,600 --> 00:23:44,400
camera can be

00:23:40,640 --> 00:23:46,159
dynamic and and decided

00:23:44,400 --> 00:23:47,760
you know at the place where we want to

00:23:46,159 --> 00:23:51,600
use the camera we can just

00:23:47,760 --> 00:23:51,600
ask the user whether it's okay or

00:23:51,679 --> 00:23:58,320
or just interact in a natural way

00:23:54,880 --> 00:24:00,000
to create dynamic permissions

00:23:58,320 --> 00:24:02,159
which is something you just cannot do in

00:24:00,000 --> 00:24:06,559
docker because you can

00:24:02,159 --> 00:24:06,559
it's oh there's a question here

00:24:12,080 --> 00:24:16,320
uh oh yeah so the home directory is not

00:24:15,360 --> 00:24:18,080
available

00:24:16,320 --> 00:24:20,320
by the user so there's a question here

00:24:18,080 --> 00:24:21,120
if you have access to the home directory

00:24:20,320 --> 00:24:25,440
read write

00:24:21,120 --> 00:24:27,919
and that's not by default true

00:24:25,440 --> 00:24:29,600
by default you only have access to this

00:24:27,919 --> 00:24:32,960
this

00:24:29,600 --> 00:24:35,360
i can imagine

00:24:32,960 --> 00:24:36,559
it looks like you have access to var app

00:24:35,360 --> 00:24:38,880
app id

00:24:36,559 --> 00:24:40,640
but actually all you have access is is

00:24:38,880 --> 00:24:42,960
this final directory and

00:24:40,640 --> 00:24:44,720
this rest is just empty directories on

00:24:42,960 --> 00:24:47,520
the temp fs

00:24:44,720 --> 00:24:48,960
so unless you have explicitly asked for

00:24:47,520 --> 00:24:49,760
home director permissions you don't have

00:24:48,960 --> 00:24:54,320
any

00:24:49,760 --> 00:24:58,400
uh permissions uh for for the uh

00:24:54,320 --> 00:25:00,880
oh the the question was if you have

00:24:58,400 --> 00:25:01,520
uh access to your home directory can you

00:25:00,880 --> 00:25:04,240
use not

00:25:01,520 --> 00:25:05,360
you know write something somewhere like

00:25:04,240 --> 00:25:09,120
a bash

00:25:05,360 --> 00:25:11,360
dot profile or something to make

00:25:09,120 --> 00:25:13,200
the host site run some code but it's

00:25:11,360 --> 00:25:14,159
it's not it's true in general that if

00:25:13,200 --> 00:25:16,559
you do have

00:25:14,159 --> 00:25:18,480
uh right access to your home directory

00:25:16,559 --> 00:25:19,120
you can basically escape a sandbox super

00:25:18,480 --> 00:25:21,200
easy

00:25:19,120 --> 00:25:22,559
but by default we don't have that we we

00:25:21,200 --> 00:25:25,200
don't have

00:25:22,559 --> 00:25:25,679
full home access only this particular

00:25:25,200 --> 00:25:31,039
per app

00:25:25,679 --> 00:25:31,039
directory is accessible always

00:25:33,919 --> 00:25:39,679
anyway so the the the sandbox is set up

00:25:37,279 --> 00:25:41,760
by this tool called bubble wrap

00:25:39,679 --> 00:25:44,320
it used to be part of a flat pack but

00:25:41,760 --> 00:25:47,440
it's been extracted because it's

00:25:44,320 --> 00:25:49,120
actually pretty useful in general um it

00:25:47,440 --> 00:25:51,039
works just like flat back

00:25:49,120 --> 00:25:52,880
so it starts with an empty temp fs and

00:25:51,039 --> 00:25:53,840
then you can slowly build up your entire

00:25:52,880 --> 00:25:56,720
thing

00:25:53,840 --> 00:25:58,640
and it's very useful for shell uh use

00:25:56,720 --> 00:26:00,000
like shell script or just if you want to

00:25:58,640 --> 00:26:02,159
run

00:26:00,000 --> 00:26:03,360
if you want to run something in in a

00:26:02,159 --> 00:26:06,960
limited environment

00:26:03,360 --> 00:26:07,600
it's like root on steroids that works

00:26:06,960 --> 00:26:11,039
for

00:26:07,600 --> 00:26:14,400
unprivileged users so in this example

00:26:11,039 --> 00:26:16,480
we bind the host user on top of user in

00:26:14,400 --> 00:26:18,480
the sandbox

00:26:16,480 --> 00:26:20,880
we create a sim link with this value at

00:26:18,480 --> 00:26:22,960
this point and then we mount the proc

00:26:20,880 --> 00:26:24,240
and the devs which are specific to the

00:26:22,960 --> 00:26:26,000
sandbox

00:26:24,240 --> 00:26:27,919
and we unshare the pit name space and we

00:26:26,000 --> 00:26:30,240
run bash inside this so basically this

00:26:27,919 --> 00:26:33,679
will give you a

00:26:30,240 --> 00:26:35,200
e-bash in a system that only has slash

00:26:33,679 --> 00:26:38,480
user

00:26:35,200 --> 00:26:40,880
which is read-only so you you would be

00:26:38,480 --> 00:26:42,640
able to write stuff and say

00:26:40,880 --> 00:26:46,320
the rest of the system outside user but

00:26:42,640 --> 00:26:46,320
it's only in the tab fs that you

00:26:46,559 --> 00:26:54,000
can't see anywhere else so

00:26:50,640 --> 00:26:55,679
bubble up also has a set ud mode

00:26:54,000 --> 00:26:57,440
so i kind of lied about there not being

00:26:55,679 --> 00:27:00,799
any root

00:26:57,440 --> 00:27:03,120
access uh there is

00:27:00,799 --> 00:27:03,840
if if your system like if your distro

00:27:03,120 --> 00:27:05,440
doesn't support

00:27:03,840 --> 00:27:08,000
unprivileged user name spaces in the

00:27:05,440 --> 00:27:10,000
kernel you can if you want to

00:27:08,000 --> 00:27:14,159
run bubble wraps at uid and it will kind

00:27:10,000 --> 00:27:14,159
of give you a minimal

00:27:14,720 --> 00:27:18,559
minimal and previous username spaces

00:27:16,799 --> 00:27:21,840
that are limited to just the things that

00:27:18,559 --> 00:27:21,840
bubbler app exposes

00:27:22,640 --> 00:27:30,720
we use in flat pack we used

00:27:26,640 --> 00:27:33,760
unshared pid and user namespaces

00:27:30,720 --> 00:27:36,399
we also by default on share network and

00:27:33,760 --> 00:27:38,320
ipc namespaces

00:27:36,399 --> 00:27:39,679
however network is used by a lot of

00:27:38,320 --> 00:27:43,840
people so it's

00:27:39,679 --> 00:27:48,720
it's permissions to enable that and ipc

00:27:43,840 --> 00:27:50,720
is that's basically the uh system 5 unix

00:27:48,720 --> 00:27:51,840
ipc stuff which are kind of crap but

00:27:50,720 --> 00:27:54,960
unfortunately

00:27:51,840 --> 00:27:57,600
the extra memory extension requires that

00:27:54,960 --> 00:27:59,679
so most apps unfortunately have to share

00:27:57,600 --> 00:28:02,640
the ipc network

00:27:59,679 --> 00:28:04,480
uh the ipc namespace i i wish that

00:28:02,640 --> 00:28:06,080
wasn't true but you know

00:28:04,480 --> 00:28:09,039
until we get full whalen everywhere

00:28:06,080 --> 00:28:12,399
that's gonna have to be true

00:28:09,039 --> 00:28:16,559
we use seccomp to block various

00:28:12,399 --> 00:28:20,159
you know weird or unnecessary syscalls

00:28:16,559 --> 00:28:22,240
i'll list a bunch of them here we also

00:28:20,159 --> 00:28:23,440
used to block the key ring because

00:28:22,240 --> 00:28:26,559
that's not quite

00:28:23,440 --> 00:28:28,880
a namespace

00:28:26,559 --> 00:28:29,760
it doesn't work well with namespaces and

00:28:28,880 --> 00:28:33,520
we also

00:28:29,760 --> 00:28:36,720
for security reasons have to disable

00:28:33,520 --> 00:28:38,960
recursive namespaces due to

00:28:36,720 --> 00:28:41,520
various things in the portal

00:28:38,960 --> 00:28:43,360
implementation kind of relying on

00:28:41,520 --> 00:28:46,559
clients not being able to modify the

00:28:43,360 --> 00:28:46,559
file system hierarchies

00:28:46,960 --> 00:28:52,320
by default we also disable poltiard perf

00:28:49,600 --> 00:28:54,559
ptrace but these are all permissions

00:28:52,320 --> 00:28:56,559
i mean in particular ptrace is important

00:28:54,559 --> 00:28:59,840
if you want to run an ide or do any kind

00:28:56,559 --> 00:28:59,840
of debugging or things like that

00:29:03,679 --> 00:29:10,480
um we

00:29:06,799 --> 00:29:12,640
don't use c group a lot historically c

00:29:10,480 --> 00:29:15,520
group's v1 hasn't really been

00:29:12,640 --> 00:29:16,960
useful unprivileged we do create a

00:29:15,520 --> 00:29:20,159
systemd

00:29:16,960 --> 00:29:23,760
user scope if that's running but right

00:29:20,159 --> 00:29:23,760
now it's hard to do more than that

00:29:25,200 --> 00:29:30,640
we default to a pretty empty dev um

00:29:28,799 --> 00:29:32,080
but optionally we can add in some extra

00:29:30,640 --> 00:29:35,679
stuff

00:29:32,080 --> 00:29:38,799
uh like uh gpu device knows

00:29:35,679 --> 00:29:41,200
kvm device node and if your app

00:29:38,799 --> 00:29:43,679
is doing weird hardware stuff you can

00:29:41,200 --> 00:29:45,760
also get the whole dev if you want to

00:29:43,679 --> 00:29:47,039
that sounds really horrible but in

00:29:45,760 --> 00:29:50,159
practice it's

00:29:47,039 --> 00:29:52,720
not necessarily that bad because most of

00:29:50,159 --> 00:29:56,640
dev is not really accessible

00:29:52,720 --> 00:30:00,000
by by the user it's you know it's

00:29:56,640 --> 00:30:00,000
only accessible by root

00:30:01,919 --> 00:30:06,720
we have various socket types that we are

00:30:06,960 --> 00:30:10,080
able to automatically forward and set up

00:30:09,200 --> 00:30:14,640
inside the

00:30:10,080 --> 00:30:17,039
sandbox as needed uh

00:30:14,640 --> 00:30:18,159
i list a bunch of optional here but all

00:30:17,039 --> 00:30:20,159
at least the ones

00:30:18,159 --> 00:30:21,760
at the beginning like x and whalen are

00:30:20,159 --> 00:30:24,000
basically gonna have to be

00:30:21,760 --> 00:30:25,600
enabled by everyone so that's not really

00:30:24,000 --> 00:30:28,080
optional

00:30:25,600 --> 00:30:29,840
but if your app does wayland you can

00:30:28,080 --> 00:30:33,200
optionally out of

00:30:29,840 --> 00:30:34,399
x for instance we've also set up a p11

00:30:33,200 --> 00:30:37,200
kit server

00:30:34,399 --> 00:30:38,720
by ourselves to forward the the root ca

00:30:37,200 --> 00:30:41,039
certificates

00:30:38,720 --> 00:30:43,120
to the to the client in a read-only way

00:30:41,039 --> 00:30:47,200
which is standardized

00:30:43,120 --> 00:30:50,480
so that's kind of cool so if you have

00:30:47,200 --> 00:30:52,640
custom cs certificate roots on

00:30:50,480 --> 00:30:53,520
on your host they can they get forwarded

00:30:52,640 --> 00:30:56,480
into the

00:30:53,520 --> 00:30:56,480
into the sandboxes

00:30:57,679 --> 00:31:04,799
also in the list here we have debuss

00:31:01,679 --> 00:31:05,600
but those are full access to these

00:31:04,799 --> 00:31:08,159
sockets which is

00:31:05,600 --> 00:31:09,360
highly unsafe to do because you know

00:31:08,159 --> 00:31:11,760
there's all sorts of stuff

00:31:09,360 --> 00:31:14,240
on the session bus that can allow all

00:31:11,760 --> 00:31:16,960
sorts of operations that are not secure

00:31:14,240 --> 00:31:17,279
so by default we do give debus access

00:31:16,960 --> 00:31:20,799
but

00:31:17,279 --> 00:31:24,000
in a filtered mode we have this

00:31:20,799 --> 00:31:27,279
proxy that we run

00:31:24,000 --> 00:31:31,120
to generate you know

00:31:27,279 --> 00:31:32,880
the proxy will listen to calls from the

00:31:31,120 --> 00:31:35,200
from the sandbox and forward them as

00:31:32,880 --> 00:31:38,080
needed to the real uh

00:31:35,200 --> 00:31:38,799
bus so by default you can talk to the

00:31:38,080 --> 00:31:40,640
bus

00:31:38,799 --> 00:31:42,559
i mean you can connect to the bus and

00:31:40,640 --> 00:31:44,159
the bus itself is an object on the bus

00:31:42,559 --> 00:31:46,640
that you can talk to

00:31:44,159 --> 00:31:47,600
and then you can get messages by anyone

00:31:46,640 --> 00:31:50,799
who

00:31:47,600 --> 00:31:53,679
is allowed to send messages to you

00:31:50,799 --> 00:31:55,600
and you can own your own application id

00:31:53,679 --> 00:31:59,120
as a name on the bus

00:31:55,600 --> 00:32:02,720
and coincidentally the the flat pack

00:31:59,120 --> 00:32:05,679
application ids are the same format as

00:32:02,720 --> 00:32:05,679
the debus names

00:32:07,039 --> 00:32:12,320
and this is this namespace called

00:32:09,559 --> 00:32:14,960
org.freedesktop.portal

00:32:12,320 --> 00:32:16,640
which is free for all basically any any

00:32:14,960 --> 00:32:17,200
any app can talk to anywhere anything

00:32:16,640 --> 00:32:19,360
that

00:32:17,200 --> 00:32:20,880
exposes something in that and that's

00:32:19,360 --> 00:32:24,240
that's the basis for

00:32:20,880 --> 00:32:25,120
for implementing portals but all of this

00:32:24,240 --> 00:32:27,840
is obviously

00:32:25,120 --> 00:32:29,200
extensible so you can add permissions

00:32:27,840 --> 00:32:32,080
that says yes i

00:32:29,200 --> 00:32:34,080
have rights to talk to a specific

00:32:32,080 --> 00:32:36,799
service on the bus or b

00:32:34,080 --> 00:32:37,840
you know own a name a different name on

00:32:36,799 --> 00:32:40,799
the bus

00:32:37,840 --> 00:32:42,240
and we also have similar filtering for

00:32:40,799 --> 00:32:44,720
the accessibility boss

00:32:42,240 --> 00:32:46,720
and the system bus although the system

00:32:44,720 --> 00:32:51,279
boss is not necessarily used a lot

00:32:46,720 --> 00:32:51,279
for desktop applications

00:32:52,000 --> 00:32:56,000
so portals are essentially deeper

00:32:55,279 --> 00:32:59,279
services that

00:32:56,000 --> 00:33:00,880
happen to be in this uh name space where

00:32:59,279 --> 00:33:02,240
anyone can talk to them

00:33:00,880 --> 00:33:04,320
and that means that they don't really

00:33:02,240 --> 00:33:07,760
have any kind of

00:33:04,320 --> 00:33:09,200
security checks by the system itself so

00:33:07,760 --> 00:33:10,799
you have to inform

00:33:09,200 --> 00:33:12,640
they have to be very careful about

00:33:10,799 --> 00:33:15,760
enforcing policy

00:33:12,640 --> 00:33:18,960
uh inside the portal itself

00:33:15,760 --> 00:33:19,679
and we do this based on peer credentials

00:33:18,960 --> 00:33:22,320
and

00:33:19,679 --> 00:33:23,519
like you connect via unix domain sockets

00:33:22,320 --> 00:33:24,720
and we can get information about the

00:33:23,519 --> 00:33:27,600
other side

00:33:24,720 --> 00:33:28,720
and we can decide based on what's

00:33:27,600 --> 00:33:31,600
talking to us

00:33:28,720 --> 00:33:33,840
whether it's allowed or not or whether

00:33:31,600 --> 00:33:38,320
we should do some interaction to ask

00:33:33,840 --> 00:33:40,399
ensure it's safe and

00:33:38,320 --> 00:33:42,399
we have a bunch of portals i think the

00:33:40,399 --> 00:33:43,279
easiest one to explain is the files user

00:33:42,399 --> 00:33:45,600
portal

00:33:43,279 --> 00:33:48,000
which is part of the xdg desktop portal

00:33:45,600 --> 00:33:51,760
set of portals

00:33:48,000 --> 00:33:54,799
and the way it works is that if your app

00:33:51,760 --> 00:33:58,000
doesn't have access to any of your files

00:33:54,799 --> 00:34:01,120
it instead asks the portal for

00:33:58,000 --> 00:34:01,679
it to let the user show something so the

00:34:01,120 --> 00:34:03,360
portal

00:34:01,679 --> 00:34:06,159
which is outside of the control of the

00:34:03,360 --> 00:34:08,720
app will open a file chooser and

00:34:06,159 --> 00:34:10,879
that will work as usual and eventually

00:34:08,720 --> 00:34:12,960
user picks a file and then

00:34:10,879 --> 00:34:14,800
that kind of becomes an implicit

00:34:12,960 --> 00:34:17,679
permission for the app to access that

00:34:14,800 --> 00:34:17,679
particular file

00:34:18,839 --> 00:34:23,599
so we

00:34:21,919 --> 00:34:25,679
we don't ask do you want to have do you

00:34:23,599 --> 00:34:27,280
want this app to have access to your own

00:34:25,679 --> 00:34:28,240
directory because that's not very unsafe

00:34:27,280 --> 00:34:30,399
instead we

00:34:28,240 --> 00:34:31,839
it's also it's also not very good user

00:34:30,399 --> 00:34:33,760
experience to ask

00:34:31,839 --> 00:34:36,800
like do you want to allow this or that

00:34:33,760 --> 00:34:38,879
because people always say yes

00:34:36,800 --> 00:34:41,200
so instead we have a very natural flow

00:34:38,879 --> 00:34:44,320
where we open a file user

00:34:41,200 --> 00:34:44,960
uh exactly when the user expects ones to

00:34:44,320 --> 00:34:47,839
show up

00:34:44,960 --> 00:34:49,440
and if if the app tries to you know

00:34:47,839 --> 00:34:52,000
exploit something

00:34:49,440 --> 00:34:53,040
uh it will showing a file user is pretty

00:34:52,000 --> 00:34:55,280
safe because you

00:34:53,040 --> 00:34:56,720
pretty much guarantee that the user will

00:34:55,280 --> 00:35:00,000
not like

00:34:56,720 --> 00:35:03,520
select an important secret file in

00:35:00,000 --> 00:35:06,640
inside this random file so it appears

00:35:03,520 --> 00:35:09,839
so we have several of these kinds of

00:35:06,640 --> 00:35:13,200
portals file user print dialog

00:35:09,839 --> 00:35:15,200
open uri screencast screen screenshots

00:35:13,200 --> 00:35:16,880
all these kinds of stuff

00:35:15,200 --> 00:35:18,800
and we have multiple back-ends for them

00:35:16,880 --> 00:35:21,119
so if if you run

00:35:18,800 --> 00:35:22,400
a kde desktop you get a kde file chooser

00:35:21,119 --> 00:35:25,920
if you're running gnome desktop

00:35:22,400 --> 00:35:28,800
you get a gtk one and

00:35:25,920 --> 00:35:30,640
we we have this document portal which is

00:35:28,800 --> 00:35:34,320
really part of the the

00:35:30,640 --> 00:35:37,200
the exegg desktop portal uh

00:35:34,320 --> 00:35:38,640
which is how we implement the file user

00:35:37,200 --> 00:35:40,960
portal basically

00:35:38,640 --> 00:35:42,640
so so it's it's a portal paired with a

00:35:40,960 --> 00:35:46,079
fuse mount

00:35:42,640 --> 00:35:48,160
where you can export a file and then

00:35:46,079 --> 00:35:50,560
set per app permissions on that

00:35:48,160 --> 00:35:53,200
particular document so

00:35:50,560 --> 00:35:54,960
that's what the file user portal does it

00:35:53,200 --> 00:35:56,320
creates a document for the file and then

00:35:54,960 --> 00:35:58,880
it grants

00:35:56,320 --> 00:36:00,960
the caller app accesses that particular

00:35:58,880 --> 00:36:03,200
document

00:36:00,960 --> 00:36:04,480
the flat pack itself ships with a portal

00:36:03,200 --> 00:36:07,800
that that extends

00:36:04,480 --> 00:36:10,720
some of what it can do like you can do

00:36:07,800 --> 00:36:13,040
sub sandboxes

00:36:10,720 --> 00:36:14,160
which are not recursive sandboxes but

00:36:13,040 --> 00:36:15,680
rather

00:36:14,160 --> 00:36:17,440
you know sandboxes on the side that

00:36:15,680 --> 00:36:20,640
happens to have the same

00:36:17,440 --> 00:36:22,960
structure as the original one

00:36:20,640 --> 00:36:23,760
and that way we can work around so the

00:36:22,960 --> 00:36:26,960
the the

00:36:23,760 --> 00:36:29,119
forbidden recursive sandboxes

00:36:26,960 --> 00:36:30,000
and we have self updates you can check

00:36:29,119 --> 00:36:32,000
you can get a

00:36:30,000 --> 00:36:33,839
an event when you when there's a new

00:36:32,000 --> 00:36:34,480
version of your app available so you can

00:36:33,839 --> 00:36:36,960
restart

00:36:34,480 --> 00:36:36,960
whatnot

00:36:38,320 --> 00:36:42,480
so that that's a short description of

00:36:40,640 --> 00:36:44,400
how flatback work and how it differs

00:36:42,480 --> 00:36:46,160
and now i'm going to try to talk about

00:36:44,400 --> 00:36:49,280
some of the issues we have

00:36:46,160 --> 00:36:51,280
i mean flatback work reasonably well

00:36:49,280 --> 00:36:52,640
so these are not horrible issues but

00:36:51,280 --> 00:36:54,000
it's still things that

00:36:52,640 --> 00:36:55,680
some of them are things we could do

00:36:54,000 --> 00:36:59,440
better some of the things that we think

00:36:55,680 --> 00:36:59,440
have to be worked on in the system

00:37:00,480 --> 00:37:04,320
one of the things that i really would

00:37:02,000 --> 00:37:08,079
like from the curtain is some way to tag

00:37:04,320 --> 00:37:09,119
containers like in our case we want to

00:37:08,079 --> 00:37:12,400
tag with the app

00:37:09,119 --> 00:37:15,200
id so so the the container

00:37:12,400 --> 00:37:16,880
management system or whatever we want to

00:37:15,200 --> 00:37:19,520
start something

00:37:16,880 --> 00:37:20,720
and ensure that every child process in

00:37:19,520 --> 00:37:22,960
that container

00:37:20,720 --> 00:37:24,400
is tagged by this string basically and

00:37:22,960 --> 00:37:27,920
that you can

00:37:24,400 --> 00:37:30,320
read back the tag via

00:37:27,920 --> 00:37:31,440
like if so if the app talks to a portal

00:37:30,320 --> 00:37:34,800
the portal can

00:37:31,440 --> 00:37:34,800
get back this tag

00:37:34,880 --> 00:37:38,160
and and the only real ways to do this

00:37:37,599 --> 00:37:41,200
right now

00:37:38,160 --> 00:37:44,560
is so pure credits as a peer sec and

00:37:41,200 --> 00:37:47,520
like the secret path and of these

00:37:44,560 --> 00:37:48,560
really only so peer grads work well

00:37:47,520 --> 00:37:51,839
enough

00:37:48,560 --> 00:37:54,880
like not everyone must use s linux or or

00:37:51,839 --> 00:37:57,200
have to tweak s linux for their

00:37:54,880 --> 00:37:58,800
container system and c groups don't

00:37:57,200 --> 00:38:02,960
really work yet

00:37:58,800 --> 00:38:05,680
for for uh unprivileged stuff or

00:38:02,960 --> 00:38:07,680
at least secrets v1 doesn't work well so

00:38:05,680 --> 00:38:12,000
what we use this so purecred

00:38:07,680 --> 00:38:14,240
um and that gives us the pid

00:38:12,000 --> 00:38:16,640
and that way we can find the the

00:38:14,240 --> 00:38:20,240
improper that we can find the root

00:38:16,640 --> 00:38:22,079
of the name space and what we

00:38:20,240 --> 00:38:23,599
have there is a file called dot flap

00:38:22,079 --> 00:38:27,119
back info

00:38:23,599 --> 00:38:29,920
which is set up to contain

00:38:27,119 --> 00:38:31,040
information about the container like the

00:38:29,920 --> 00:38:33,440
app id

00:38:31,040 --> 00:38:34,960
in a way that the app cannot change

00:38:33,440 --> 00:38:36,400
right so we can trust this thing

00:38:34,960 --> 00:38:38,400
if it's there we can trust it if it's

00:38:36,400 --> 00:38:39,680
not we assume it's something else like

00:38:38,400 --> 00:38:42,320
the host

00:38:39,680 --> 00:38:44,000
the host process or something the

00:38:42,320 --> 00:38:47,119
problem is that there are tiny races

00:38:44,000 --> 00:38:49,520
when whenever you pids for you know pit

00:38:47,119 --> 00:38:51,760
reuse and things like that

00:38:49,520 --> 00:38:53,760
i think in practice it's fine but

00:38:51,760 --> 00:38:57,520
there's been some work i think on

00:38:53,760 --> 00:38:58,480
pid fds i don't i don't think there's

00:38:57,520 --> 00:39:02,000
anything landed but

00:38:58,480 --> 00:39:04,480
maybe we can work around the pits

00:39:02,000 --> 00:39:06,320
here's one of the reasons why we cannot

00:39:04,480 --> 00:39:09,359
allow the app to restructure its

00:39:06,320 --> 00:39:11,440
uh namespace so that's one of the

00:39:09,359 --> 00:39:12,960
reasons why recursive namespaces isn't

00:39:11,440 --> 00:39:14,560
allowed

00:39:12,960 --> 00:39:16,160
and if we had some other way to do this

00:39:14,560 --> 00:39:19,440
maybe we could do so

00:39:16,160 --> 00:39:22,720
so that that's this is something i i

00:39:19,440 --> 00:39:22,720
wish we had that worked better

00:39:23,359 --> 00:39:29,280
another issue i have is with abstract

00:39:26,839 --> 00:39:31,119
sockets

00:39:29,280 --> 00:39:32,320
they're currently bound to network

00:39:31,119 --> 00:39:34,320
namespaces which is

00:39:32,320 --> 00:39:36,480
kind of i mean i guess they had to be

00:39:34,320 --> 00:39:39,280
put somewhere

00:39:36,480 --> 00:39:40,800
and that but it's it's not really right

00:39:39,280 --> 00:39:41,359
i mean sometimes you want network access

00:39:40,800 --> 00:39:43,839
but not

00:39:41,359 --> 00:39:46,320
to see all the host abstract sockets and

00:39:43,839 --> 00:39:48,800
sometimes you don't want

00:39:46,320 --> 00:39:50,800
seed network but you do want some

00:39:48,800 --> 00:39:52,640
abstract socket

00:39:50,800 --> 00:39:55,200
and also abstract talkers are lame

00:39:52,640 --> 00:39:59,200
they're about this 90s thing

00:39:55,200 --> 00:40:01,359
where you didn't want leftover

00:39:59,200 --> 00:40:02,960
sockets in the file system laying around

00:40:01,359 --> 00:40:04,960
after reboot

00:40:02,960 --> 00:40:08,640
but these days we should just use like

00:40:04,960 --> 00:40:08,640
run or some type fs thing

00:40:08,839 --> 00:40:14,720
so i don't know i wish i could

00:40:12,800 --> 00:40:16,880
disable abstract sockets separately from

00:40:14,720 --> 00:40:19,119
the network namespace

00:40:16,880 --> 00:40:25,839
but really we should just make sure that

00:40:19,119 --> 00:40:25,839
nothing ever uses abstract sockets

00:40:28,720 --> 00:40:35,920
um we do support network

00:40:33,599 --> 00:40:37,839
either or like you can get nothing or

00:40:35,920 --> 00:40:40,400
you can get

00:40:37,839 --> 00:40:42,000
shared network namespace for the host i

00:40:40,400 --> 00:40:45,040
really would like

00:40:42,000 --> 00:40:48,400
some kind of in-between thing

00:40:45,040 --> 00:40:48,400
maybe like an added

00:40:49,920 --> 00:40:53,440
thing where you can call out but not get

00:40:52,560 --> 00:40:55,599
called into

00:40:53,440 --> 00:40:56,960
or or even like ib filtering i don't

00:40:55,599 --> 00:41:00,240
know how useful that would be

00:40:56,960 --> 00:41:02,480
in in a desktop environment but maybe

00:41:00,240 --> 00:41:03,359
limiting yourself to local network

00:41:02,480 --> 00:41:07,040
things like that

00:41:03,359 --> 00:41:09,839
could be useful

00:41:07,040 --> 00:41:10,640
the only options for this right now

00:41:09,839 --> 00:41:13,920
seems to be the

00:41:10,640 --> 00:41:16,000
slurp for a net ns thing which is

00:41:13,920 --> 00:41:17,359
you know some insane hack where you run

00:41:16,000 --> 00:41:21,119
a slurp demon

00:41:17,359 --> 00:41:24,960
and then you fake serial connection to

00:41:21,119 --> 00:41:27,200
your container and do stuff there

00:41:24,960 --> 00:41:29,680
which apparently works pretty well but

00:41:27,200 --> 00:41:29,680
it seems

00:41:30,640 --> 00:41:34,480
seems kind of hacky and it's yet another

00:41:33,040 --> 00:41:37,599
process that we have to have

00:41:34,480 --> 00:41:40,319
per container or

00:41:37,599 --> 00:41:41,119
or something per per some kind of

00:41:40,319 --> 00:41:44,880
filtering

00:41:41,119 --> 00:41:47,359
settings i think there's a

00:41:44,880 --> 00:41:48,880
socket filter for c groups now but it's

00:41:47,359 --> 00:41:50,480
root only

00:41:48,880 --> 00:41:53,680
i mean it was at least last time i

00:41:50,480 --> 00:41:57,040
looked it would be cool if that was

00:41:53,680 --> 00:42:00,319
uh accessible for for uh

00:41:57,040 --> 00:42:03,839
non-privileged things because that might

00:42:00,319 --> 00:42:03,839
allow us to do this in a better way

00:42:09,520 --> 00:42:17,280
another thing we that would be nice

00:42:13,599 --> 00:42:18,160
but not necessarily uh super important

00:42:17,280 --> 00:42:21,119
would be

00:42:18,160 --> 00:42:22,960
unprivileged access to overlay fs2 i

00:42:21,119 --> 00:42:26,960
don't think you can currently do that

00:42:22,960 --> 00:42:30,000
in an unprivileged username space but

00:42:26,960 --> 00:42:33,359
we mainly use unifs and we use a

00:42:30,000 --> 00:42:35,680
uh fuser-based overlays for for

00:42:33,359 --> 00:42:36,960
uh for building stuff but having a real

00:42:35,680 --> 00:42:40,640
kernel version would be

00:42:36,960 --> 00:42:40,640
nice and more efficient

00:42:41,440 --> 00:42:45,760
i don't think it's currently i don't

00:42:43,359 --> 00:42:49,440
know if anyone knows why it's not

00:42:45,760 --> 00:42:49,440
available in on privileged news and

00:42:56,839 --> 00:42:59,839
namespaces

00:43:01,280 --> 00:43:04,880
all right well apparently there's

00:43:03,280 --> 00:43:06,240
security issues that's always the case

00:43:04,880 --> 00:43:07,680
though

00:43:06,240 --> 00:43:10,480
i hope someone is working on it because

00:43:07,680 --> 00:43:27,839
that would be it seems like it should be

00:43:10,480 --> 00:43:27,839
possible to do safely but maybe not

00:43:33,839 --> 00:43:38,400
all right so it seems to be a question

00:43:35,760 --> 00:43:40,000
of just doing the work

00:43:38,400 --> 00:43:42,880
that's always the case though but

00:43:40,000 --> 00:43:45,440
hopefully that happens

00:43:42,880 --> 00:43:46,160
and this other thing called f is verity

00:43:45,440 --> 00:43:48,160
i

00:43:46,160 --> 00:43:49,680
really like i haven't really used it a

00:43:48,160 --> 00:43:52,079
lot but

00:43:49,680 --> 00:43:53,839
we have some initial work in os3 this

00:43:52,079 --> 00:43:55,119
basically allows you to make files

00:43:53,839 --> 00:43:57,839
immutable

00:43:55,119 --> 00:43:59,680
which is a perfect match for os3 and

00:43:57,839 --> 00:44:00,480
then we have merkle trees to verify that

00:43:59,680 --> 00:44:04,079
they don't change

00:44:00,480 --> 00:44:06,160
afterwards i think it's only xd4

00:44:04,079 --> 00:44:07,440
supported right now but if we had

00:44:06,160 --> 00:44:09,440
support for this i think

00:44:07,440 --> 00:44:11,359
it would be really good in terms of

00:44:09,440 --> 00:44:12,960
ensuring that things don't accidentally

00:44:11,359 --> 00:44:15,280
get changed

00:44:12,960 --> 00:44:16,720
and also i think we could use it to

00:44:15,280 --> 00:44:20,800
allow

00:44:16,720 --> 00:44:23,440
uh signatures on app so you could say

00:44:20,800 --> 00:44:25,440
only allow running flat packs that are

00:44:23,440 --> 00:44:28,319
signed by a specific

00:44:25,440 --> 00:44:29,760
app author or something like that so i

00:44:28,319 --> 00:44:31,839
think

00:44:29,760 --> 00:44:34,839
i mean i think this is super cool and we

00:44:31,839 --> 00:44:36,800
should try to make that work

00:44:34,839 --> 00:44:39,920
everywhere

00:44:36,800 --> 00:44:42,079
i believe android is using this too so

00:44:39,920 --> 00:44:50,160
maybe

00:44:42,079 --> 00:44:52,480
maybe there's more interested in it

00:44:50,160 --> 00:44:52,480
um

00:44:55,760 --> 00:45:00,720
c groups i need i need to actually looks

00:44:58,160 --> 00:45:01,920
look at c groups v2 i think

00:45:00,720 --> 00:45:04,160
it will allow us to do a lot more than

00:45:01,920 --> 00:45:06,319
we used to do and you know

00:45:04,160 --> 00:45:08,000
secrets v2 is actually enabled by

00:45:06,319 --> 00:45:08,720
default in a bunch of distros now so we

00:45:08,000 --> 00:45:10,240
should be able to

00:45:08,720 --> 00:45:12,160
take advantage of that and do things

00:45:10,240 --> 00:45:15,839
like you know

00:45:12,160 --> 00:45:17,760
cpu or memory limits and even

00:45:15,839 --> 00:45:19,520
you know maybe io priorities and things

00:45:17,760 --> 00:45:21,920
like that

00:45:19,520 --> 00:45:22,640
this is something i used to have to look

00:45:21,920 --> 00:45:25,680
at and

00:45:22,640 --> 00:45:25,680
i haven't had time yet

00:45:28,319 --> 00:45:31,920
um here's another thing that i sometimes

00:45:31,119 --> 00:45:35,200
see

00:45:31,920 --> 00:45:36,400
people wishing for like they wanna they

00:45:35,200 --> 00:45:41,200
wanna

00:45:36,400 --> 00:45:44,240
say grant access to all the joysticks

00:45:41,200 --> 00:45:46,800
to the sandbox or all the

00:45:44,240 --> 00:45:48,400
some kind of usb device or whatever some

00:45:46,800 --> 00:45:49,920
kind of device basically

00:45:48,400 --> 00:45:50,960
and they want this to be dynamic so if

00:45:49,920 --> 00:45:52,240
you plug in or you always check

00:45:50,960 --> 00:45:55,599
afterwards

00:45:52,240 --> 00:45:56,160
you you would uh grant access to it

00:45:55,599 --> 00:46:00,079
thing

00:45:56,160 --> 00:46:03,119
later currently we kind of drop all the

00:46:00,079 --> 00:46:04,560
privileges for for mine mounting stuff

00:46:03,119 --> 00:46:07,680
so we don't have any

00:46:04,560 --> 00:46:08,079
like a babysitting demon that can go in

00:46:07,680 --> 00:46:11,440
and

00:46:08,079 --> 00:46:13,040
modify existing things so currently we

00:46:11,440 --> 00:46:16,400
can only do this if there's

00:46:13,040 --> 00:46:20,480
like a subdirectory in the kernel or

00:46:16,400 --> 00:46:22,560
on the hosts uh slash dev like in wri we

00:46:20,480 --> 00:46:23,760
can mount the entire directory and then

00:46:22,560 --> 00:46:29,200
any updates in that will

00:46:23,760 --> 00:46:32,000
get propagated into the sandbox but

00:46:29,200 --> 00:46:34,079
for for usb for instance it's much

00:46:32,000 --> 00:46:35,680
harder to do that

00:46:34,079 --> 00:46:38,000
i mean sometimes it just doesn't make

00:46:35,680 --> 00:46:39,839
sense for for for

00:46:38,000 --> 00:46:42,160
actually what most often comes up is

00:46:39,839 --> 00:46:46,000
this day i want to give

00:46:42,160 --> 00:46:47,760
joystick uh input to my app

00:46:46,000 --> 00:46:50,079
and that actually i think should be

00:46:47,760 --> 00:46:55,200
better sold in in

00:46:50,079 --> 00:46:55,200
wayland for instance um we

00:46:55,520 --> 00:46:58,560
if if if juristic input was routed

00:46:57,839 --> 00:47:01,520
through the

00:46:58,560 --> 00:47:02,800
weyland daemon then we could have things

00:47:01,520 --> 00:47:05,839
like

00:47:02,800 --> 00:47:10,160
focused windows uh define what

00:47:05,839 --> 00:47:11,040
what what apps get the events which is a

00:47:10,160 --> 00:47:13,760
much better

00:47:11,040 --> 00:47:25,440
security model than whether they have

00:47:13,760 --> 00:47:29,760
access to it or something

00:47:25,440 --> 00:47:31,440
um so

00:47:29,760 --> 00:47:33,119
two questionnaires some desktop apps set

00:47:31,440 --> 00:47:34,720
up background services that are out to

00:47:33,119 --> 00:47:36,720
run on login

00:47:34,720 --> 00:47:38,640
uh i think something like dropbox ui

00:47:36,720 --> 00:47:40,400
with background daemon

00:47:38,640 --> 00:47:42,640
can they do so in flat packs such that

00:47:40,400 --> 00:47:45,760
they run on login

00:47:42,640 --> 00:47:48,240
not in flatback itself however

00:47:45,760 --> 00:47:50,079
there is a portal for this like a

00:47:48,240 --> 00:47:50,880
background portal that where you can

00:47:50,079 --> 00:47:53,839
request

00:47:50,880 --> 00:47:56,400
your thing to be started and then uh

00:47:53,839 --> 00:47:59,680
that will be

00:47:56,400 --> 00:48:02,880
i mean it will be up to uh the

00:47:59,680 --> 00:48:04,960
the uh portal uh pack and

00:48:02,880 --> 00:48:06,559
how you handle that but i believe the

00:48:04,960 --> 00:48:08,880
gnome one for instance just asks you

00:48:06,559 --> 00:48:11,440
whether this is okay

00:48:08,880 --> 00:48:12,960
uh so yes it is possible to do that it

00:48:11,440 --> 00:48:14,800
will not

00:48:12,960 --> 00:48:16,559
it will not happen until you run the

00:48:14,800 --> 00:48:18,839
thing once though

00:48:16,559 --> 00:48:20,480
like you can't do it on insta

00:48:18,839 --> 00:48:22,480
installation

00:48:20,480 --> 00:48:25,119
but it's something that that you can

00:48:22,480 --> 00:48:26,559
sort of do

00:48:25,119 --> 00:48:28,240
and eric asks for portals have you

00:48:26,559 --> 00:48:31,599
considered having a named unix domain

00:48:28,240 --> 00:48:31,599
socket in each container

00:48:32,839 --> 00:48:42,079
um so the way it works right now

00:48:37,839 --> 00:48:44,319
is that we run this uh run this uh

00:48:42,079 --> 00:48:46,400
deepest proxy and that has to i mean to

00:48:44,319 --> 00:48:49,280
to be secure that the prox has to run

00:48:46,400 --> 00:48:52,559
outside of the

00:48:49,280 --> 00:48:55,599
outside of the uh container so we can't

00:48:52,559 --> 00:48:58,880
like p-trace it or do anything we did

00:48:55,599 --> 00:49:03,119
so we do have a per we have a custom

00:48:58,880 --> 00:49:05,599
socket basically inside the

00:49:03,119 --> 00:49:06,160
inside the uh container that talks to

00:49:05,599 --> 00:49:09,359
this poor

00:49:06,160 --> 00:49:09,359
this proxy instead

00:49:10,480 --> 00:49:16,720
um could we i mean i guess we could sort

00:49:14,839 --> 00:49:19,359
of

00:49:16,720 --> 00:49:19,359
have that

00:49:20,079 --> 00:49:23,760
tag things i don't i don't see really

00:49:22,880 --> 00:49:25,680
how we could

00:49:23,760 --> 00:49:27,359
forward that over d bus though because

00:49:25,680 --> 00:49:30,319
in in the end

00:49:27,359 --> 00:49:31,119
it would just be forwarding a dbs

00:49:30,319 --> 00:49:33,040
message

00:49:31,119 --> 00:49:34,400
and it it's hard to add something to

00:49:33,040 --> 00:49:38,480
that in a

00:49:34,400 --> 00:49:41,040
in a way that could authenticate

00:49:38,480 --> 00:49:43,440
the app and also this this kind of goes

00:49:41,040 --> 00:49:46,640
with the next one i think

00:49:43,440 --> 00:49:51,280
yeah i really would like

00:49:46,640 --> 00:49:53,680
uh this whole proxying

00:49:51,280 --> 00:49:54,640
to go away because i mean it's stupid to

00:49:53,680 --> 00:49:56,800
have an extra

00:49:54,640 --> 00:49:57,839
pro and we already have a process for

00:49:56,800 --> 00:50:00,319
the the bus

00:49:57,839 --> 00:50:02,160
that's the deepest demon and we if that

00:50:00,319 --> 00:50:05,920
could do the filtering instead of this

00:50:02,160 --> 00:50:05,920
proxy then we

00:50:06,160 --> 00:50:09,839
could have a lot less copies and a

00:50:08,240 --> 00:50:13,440
little less processes

00:50:09,839 --> 00:50:15,680
and actually there an uh like a work in

00:50:13,440 --> 00:50:18,480
progress implementation of this

00:50:15,680 --> 00:50:20,000
and that does contain some of what you

00:50:18,480 --> 00:50:23,280
mean where where you can sort of

00:50:20,000 --> 00:50:25,359
tag uh i mean

00:50:23,280 --> 00:50:26,880
in this setup you would have to ask the

00:50:25,359 --> 00:50:29,839
deepest demon

00:50:26,880 --> 00:50:31,520
to create its own domain soccer which is

00:50:29,839 --> 00:50:35,200
specific to a container and then that

00:50:31,520 --> 00:50:35,200
way you automatically get this this

00:50:35,280 --> 00:50:38,480
tying of a deepest client with an app id

00:50:38,079 --> 00:50:41,599
so

00:50:38,480 --> 00:50:43,760
that in that case that will be solved

00:50:41,599 --> 00:50:45,920
but unfortunately like it was two years

00:50:43,760 --> 00:50:49,359
since anyone commented in that d bus

00:50:45,920 --> 00:50:50,480
implementation pull request and also

00:50:49,359 --> 00:50:52,640
these days we have

00:50:50,480 --> 00:50:54,960
other dbus implementations like debus

00:50:52,640 --> 00:50:57,119
broker so even if that got implemented

00:50:54,960 --> 00:51:00,319
we would have to update those

00:50:57,119 --> 00:51:03,760
i do however think that it would be

00:51:00,319 --> 00:51:09,839
cool to do that we can still use the

00:51:03,760 --> 00:51:09,839
proxy for older stuff

00:51:11,119 --> 00:51:14,559
i think we're running sort of out of

00:51:13,280 --> 00:51:17,280
time uh

00:51:14,559 --> 00:51:19,200
pipe wire is this newfangled thing it's

00:51:17,280 --> 00:51:19,680
the and everyone should try to make

00:51:19,200 --> 00:51:23,520
it

00:51:19,680 --> 00:51:27,040
work and um basically build it in there

00:51:23,520 --> 00:51:27,920
uh into every into distros and package

00:51:27,040 --> 00:51:29,839
it

00:51:27,920 --> 00:51:31,760
i still need some work to integrate it

00:51:29,839 --> 00:51:34,880
with a portal

00:51:31,760 --> 00:51:37,920
it is sandbox aware but but more so

00:51:34,880 --> 00:51:40,640
in that you can you can

00:51:37,920 --> 00:51:43,280
create connections to it that are have

00:51:40,640 --> 00:51:46,400
limits set on them so we need the portal

00:51:43,280 --> 00:51:47,599
as an in-between so if you ask the

00:51:46,400 --> 00:51:50,800
portal

00:51:47,599 --> 00:51:52,559
um for a like give me a camera you it

00:51:50,800 --> 00:51:53,599
can return a connection to the pipewire

00:51:52,559 --> 00:51:56,640
demon

00:51:53,599 --> 00:51:57,760
that only sees a particular camera for

00:51:56,640 --> 00:51:59,119
instance

00:51:57,760 --> 00:52:00,800
so so there's some integration work

00:51:59,119 --> 00:52:02,400
there but it's also development work

00:52:00,800 --> 00:52:06,160
just to make pipewire kick ass

00:52:02,400 --> 00:52:06,160
and be available everywhere

00:52:06,640 --> 00:52:12,160
cpu drivers are a giant pain in the ass

00:52:10,400 --> 00:52:13,920
in particular the nvidia one where you

00:52:12,160 --> 00:52:17,359
have to have an exact

00:52:13,920 --> 00:52:20,480
uh match with the kernel driver and

00:52:17,359 --> 00:52:23,760
the user space driver

00:52:20,480 --> 00:52:26,800
we have this hack where you

00:52:23,760 --> 00:52:30,319
uh where we basically ship versions

00:52:26,800 --> 00:52:33,200
of the user's base driver and then we

00:52:30,319 --> 00:52:34,960
look at the looking and proc somewhere

00:52:33,200 --> 00:52:37,280
for the exact nvidia version and pick

00:52:34,960 --> 00:52:39,520
the right one which is sort of a hack

00:52:37,280 --> 00:52:41,599
what i really would like to do is to be

00:52:39,520 --> 00:52:43,520
able to use the host driver

00:52:41,599 --> 00:52:46,160
but that opens up a can of worms and all

00:52:43,520 --> 00:52:47,920
kinds of abi issues like

00:52:46,160 --> 00:52:50,880
you can't just load the driver from the

00:52:47,920 --> 00:52:54,240
host because it might be using a

00:52:50,880 --> 00:52:56,160
lib lovm or a lib sdc plus plus that is

00:52:54,240 --> 00:52:57,920
not compatible with whatever is in your

00:52:56,160 --> 00:53:02,240
sandbox

00:52:57,920 --> 00:53:05,280
so it's a pain there is this

00:53:02,240 --> 00:53:06,960
lip capsule project which tries to use

00:53:05,280 --> 00:53:11,520
dlm open to basically

00:53:06,960 --> 00:53:14,079
open a driver or any kind of library

00:53:11,520 --> 00:53:16,240
in its separate stacks it's like a its

00:53:14,079 --> 00:53:19,440
own

00:53:16,240 --> 00:53:23,200
symbol namespace completely

00:53:19,440 --> 00:53:23,200
disconnected from from the rest

00:53:23,680 --> 00:53:28,000
and i don't know the status of that but

00:53:27,440 --> 00:53:29,359
some interesting

00:53:28,000 --> 00:53:31,599
work and i think we should need to

00:53:29,359 --> 00:53:33,440
follow that and and

00:53:31,599 --> 00:53:36,960
maybe move towards using the host

00:53:33,440 --> 00:53:40,160
drivers for for opengl stuff

00:53:36,960 --> 00:53:45,200
and uh i think that's basically

00:53:40,160 --> 00:53:45,200
my slides so if there's any questions

00:53:47,920 --> 00:53:51,520
we're we're kind of out of time for

00:53:50,400 --> 00:53:54,720
questions

00:53:51,520 --> 00:53:58,240
but um if you can hang out on the

00:53:54,720 --> 00:54:00,800
rocket chat uh and anybody wants to

00:53:58,240 --> 00:54:03,119
continue this conversation yeah i'll

00:54:00,800 --> 00:54:05,280
hang around for a bit

00:54:03,119 --> 00:54:05,280
so

00:54:06,400 --> 00:54:12,240
that would be the best um

00:54:10,319 --> 00:54:13,599
all right in the meanwhile if you want i

00:54:12,240 --> 00:54:16,240
will we'll get

00:54:13,599 --> 00:54:17,040
uh george's going well well while i'm

00:54:16,240 --> 00:54:19,839
doing that i

00:54:17,040 --> 00:54:21,040
i can uh you can if anybody wants to ask

00:54:19,839 --> 00:54:23,839
questions real quick

00:54:21,040 --> 00:54:24,800
um i can do that while i give george's

00:54:23,839 --> 00:54:28,240
presentation there

00:54:24,800 --> 00:54:28,240
for presenters access

00:54:30,480 --> 00:54:36,839
hi there um i guess you can hear me now

00:54:34,000 --> 00:54:38,160
yes i think yep but we can't see you

00:54:36,839 --> 00:54:42,480
fantastic

00:54:38,160 --> 00:54:42,480
um sharing my webcam just a second

00:54:44,400 --> 00:54:49,520
all right did you did you get

00:54:46,160 --> 00:54:49,520
presenter's access to this

00:54:49,760 --> 00:54:59,119
um not yet i have to find you

00:54:54,960 --> 00:54:59,119
that's the problem at the moment

00:55:02,160 --> 00:55:07,839
you didn't get anything here

00:55:12,319 --> 00:55:15,200
oh you got it

00:55:15,359 --> 00:55:20,319
it does look like my slides are in um

00:55:17,599 --> 00:55:23,040
but i'm not still okay

00:55:20,319 --> 00:55:24,880
looks like i am now the presenter can

00:55:23,040 --> 00:55:26,000
you see this red dot moving around the

00:55:24,880 --> 00:55:28,160
slide

00:55:26,000 --> 00:55:29,520
yes well your background is orange so

00:55:28,160 --> 00:55:31,119
it's hard to see but yes we can see it

00:55:29,520 --> 00:55:35,680
go ahead george thank you very much

00:55:31,119 --> 00:55:38,240
okay fantastic thank you so much um

00:55:35,680 --> 00:55:40,000
all right cool um welcome to this

00:55:38,240 --> 00:55:40,480
presentation my name is georges daver

00:55:40,000 --> 00:55:44,400
cause can

00:55:40,480 --> 00:55:47,119
can i start i guess we're out of

00:55:44,400 --> 00:55:48,000
maybe too late late now we gotta i'm

00:55:47,119 --> 00:55:52,880
just gonna go ahead and start

00:55:48,000 --> 00:55:55,119
okay yeah all right so um

00:55:52,880 --> 00:55:56,160
um my name is georges tavrak as i work

00:55:55,119 --> 00:55:58,160
as a developer

00:55:56,160 --> 00:56:00,319
at endless os foundation to which i

00:55:58,160 --> 00:56:02,160
thank for allowing me to

00:56:00,319 --> 00:56:04,000
prepare for this presentation prepare

00:56:02,160 --> 00:56:07,040
some demos for it although

00:56:04,000 --> 00:56:12,079
let's see how it goes so um

00:56:07,040 --> 00:56:12,079
welcome hi um

00:56:13,040 --> 00:56:19,520
i've so today we are going to talk about

00:56:16,319 --> 00:56:23,200
motor and num shell and um

00:56:19,520 --> 00:56:25,599
i realized this this is a large topic

00:56:23,200 --> 00:56:26,960
being a compositor i i understand i can

00:56:25,599 --> 00:56:29,760
i can appreciate how

00:56:26,960 --> 00:56:30,000
it can be intimidating since i don't

00:56:29,760 --> 00:56:33,440
think

00:56:30,000 --> 00:56:35,280
we've had many such presentations and

00:56:33,440 --> 00:56:37,359
talks and discussions here on

00:56:35,280 --> 00:56:38,400
lpc this is my first time here as well

00:56:37,359 --> 00:56:42,000
so

00:56:38,400 --> 00:56:44,880
i tried to set um to set a route

00:56:42,000 --> 00:56:46,000
with my slides and my presentation in

00:56:44,880 --> 00:56:49,119
such a way that

00:56:46,000 --> 00:56:51,599
i'll cover a large range of topics

00:56:49,119 --> 00:56:52,319
um that i think are related to an

00:56:51,599 --> 00:56:53,760
interesting

00:56:52,319 --> 00:56:55,760
interesting for this pres for this

00:56:53,760 --> 00:56:59,680
conference um

00:56:55,760 --> 00:57:03,359
and i hope one or more of them can spark

00:56:59,680 --> 00:57:05,680
a discussion questions suggestions or

00:57:03,359 --> 00:57:07,359
maybe even prototypes afterwards it'll

00:57:05,680 --> 00:57:11,200
be fantastic

00:57:07,359 --> 00:57:14,559
um yeah hopefully things will be

00:57:11,200 --> 00:57:17,040
interesting for for us mother is

00:57:14,559 --> 00:57:19,520
extremely large as a project and i may

00:57:17,040 --> 00:57:23,280
not be the best person to ask

00:57:19,520 --> 00:57:26,640
um questions about specific topics

00:57:23,280 --> 00:57:29,920
but um i think i can

00:57:26,640 --> 00:57:31,599
i can answer some things um pretty

00:57:29,920 --> 00:57:34,880
decently so

00:57:31,599 --> 00:57:36,240
um let's go ahead and start um talking

00:57:34,880 --> 00:57:37,359
about what's mother mother is basically

00:57:36,240 --> 00:57:39,760
a compositor

00:57:37,359 --> 00:57:41,520
but also a library to write compositors

00:57:39,760 --> 00:57:45,440
as a compositor motor itself is

00:57:41,520 --> 00:57:48,319
super tiny it's it doesn't have a lot of

00:57:45,440 --> 00:57:50,559
features it's just a background plus

00:57:48,319 --> 00:57:54,480
window management stuff

00:57:50,559 --> 00:57:57,119
um the the real deal with is that it

00:57:54,480 --> 00:57:58,480
is that supports plugins and in this

00:57:57,119 --> 00:58:01,440
case

00:57:58,480 --> 00:58:02,240
um and throughout this presentation

00:58:01,440 --> 00:58:04,640
every time

00:58:02,240 --> 00:58:05,760
i talk mutter i say mutter you can think

00:58:04,640 --> 00:58:08,799
of it as

00:58:05,760 --> 00:58:09,760
either num shell which is essentially a

00:58:08,799 --> 00:58:12,960
mother plug-in

00:58:09,760 --> 00:58:15,200
it uses lip mutter and adds a bunch of

00:58:12,960 --> 00:58:17,920
stuff on top of it

00:58:15,200 --> 00:58:19,760
but you can also think about it as i

00:58:17,920 --> 00:58:22,799
don't know elementor elementary's

00:58:19,760 --> 00:58:27,680
pantheon which also is a compositor

00:58:22,799 --> 00:58:31,599
based on mother mother stands for

00:58:27,680 --> 00:58:35,119
metacity plus glitter which is a toolkit

00:58:31,599 --> 00:58:38,079
are we talking about it more afterwards

00:58:35,119 --> 00:58:39,440
and currently mother can handle acts 11

00:58:38,079 --> 00:58:41,040
and whelan

00:58:39,440 --> 00:58:43,520
in this presentation i'm going to focus

00:58:41,040 --> 00:58:45,760
more on weyland

00:58:43,520 --> 00:58:46,559
since it's what i'm more familiar with

00:58:45,760 --> 00:58:49,839
familiar with

00:58:46,559 --> 00:58:50,880
i'm i'm kind of a spoiled kid i started

00:58:49,839 --> 00:58:52,640
contributing to motor

00:58:50,880 --> 00:58:54,720
after weyland has a pretty decent

00:58:52,640 --> 00:58:58,799
implementation already so

00:58:54,720 --> 00:59:02,079
i had i'm fortunate enough to not have

00:58:58,799 --> 00:59:05,839
not um have to deal with acts 11

00:59:02,079 --> 00:59:08,240
anymore almost entirely

00:59:05,839 --> 00:59:09,440
um so there's a bunch of stuff that

00:59:08,240 --> 00:59:12,880
compose

00:59:09,440 --> 00:59:15,440
what we call mutter no pun intended

00:59:12,880 --> 00:59:15,920
um so let's start with motor itself

00:59:15,440 --> 00:59:19,119
which is

00:59:15,920 --> 00:59:20,880
the compositor well the

00:59:19,119 --> 00:59:22,480
the whole purpose of a compositor is

00:59:20,880 --> 00:59:26,319
compositing stuff you know

00:59:22,480 --> 00:59:31,280
so we need clients that

00:59:26,319 --> 00:59:33,359
send data to motor and motor compositors

00:59:31,280 --> 00:59:34,400
is it uses live well on server to do

00:59:33,359 --> 00:59:36,480
that

00:59:34,400 --> 00:59:38,960
of course clients on the client side it

00:59:36,480 --> 00:59:42,240
uses libid when client client to

00:59:38,960 --> 00:59:45,200
communicate stuff but most importantly

00:59:42,240 --> 00:59:47,280
in an ideal world i'm thinking about i'm

00:59:45,200 --> 00:59:48,880
simplifying stuff here

00:59:47,280 --> 00:59:50,480
so i'm thinking about only if we're

00:59:48,880 --> 00:59:53,040
going up and source stack some

00:59:50,480 --> 00:59:53,520
clients draw stuff on a frame buffer

00:59:53,040 --> 00:59:55,599
using

00:59:53,520 --> 00:59:58,079
like misa or another free and open

00:59:55,599 --> 01:00:01,680
source graphics driver

00:59:58,079 --> 01:00:02,720
and send this buffer to mutter which

01:00:01,680 --> 01:00:06,400
then composites

01:00:02,720 --> 01:00:06,960
it with like a background um in case of

01:00:06,400 --> 01:00:11,200
gnome show

01:00:06,960 --> 01:00:14,240
top bar and some we know management

01:00:11,200 --> 01:00:16,559
um stuff some cool effects when you

01:00:14,240 --> 01:00:18,240
minimize or maximize your window or when

01:00:16,559 --> 01:00:21,760
you drag them around

01:00:18,240 --> 01:00:24,160
and do all sorts of crazy stuff with it

01:00:21,760 --> 01:00:25,839
um and of course stock drawing stuff

01:00:24,160 --> 01:00:28,960
means accessing the hardware

01:00:25,839 --> 01:00:32,720
to some level but then after sending

01:00:28,960 --> 01:00:34,799
like a buffer to

01:00:32,720 --> 01:00:37,200
mother mother it's composited and it

01:00:34,799 --> 01:00:40,240
does compositing using

01:00:37,200 --> 01:00:44,240
clutter and cargo

01:00:40,240 --> 01:00:47,520
um i'm gonna cover these layers

01:00:44,240 --> 01:00:50,559
to some depth later on

01:00:47,520 --> 01:00:54,839
basically color is a toolkit

01:00:50,559 --> 01:00:58,960
and cargo is an opengl abstraction layer

01:00:54,839 --> 01:01:02,400
so cargo is like nicer gl

01:00:58,960 --> 01:01:03,680
that's why it's like over here um oh i

01:01:02,400 --> 01:01:07,359
can actually draw it here

01:01:03,680 --> 01:01:09,200
fantastic so we got cargo here which

01:01:07,359 --> 01:01:11,200
again i'm thinking of simplifying stuff

01:01:09,200 --> 01:01:12,160
thinking about the free and open source

01:01:11,200 --> 01:01:14,960
stack

01:01:12,160 --> 01:01:15,680
on any video it's a completely different

01:01:14,960 --> 01:01:18,160
scheme

01:01:15,680 --> 01:01:20,240
it's a completely different way of

01:01:18,160 --> 01:01:24,079
handling things

01:01:20,240 --> 01:01:27,040
um but yeah cargo is basically

01:01:24,079 --> 01:01:29,440
nicer opengl clutter on top of that and

01:01:27,040 --> 01:01:33,359
then motor on top of clutter

01:01:29,440 --> 01:01:33,359
doing all the ui management bits

01:01:34,720 --> 01:01:40,880
and the cool thing about motor is that

01:01:37,760 --> 01:01:42,880
after you know mutter also has to draw

01:01:40,880 --> 01:01:46,000
itself on the screen somehow so

01:01:42,880 --> 01:01:48,799
you got the client texture client

01:01:46,000 --> 01:01:50,720
draws something on the gpu side and then

01:01:48,799 --> 01:01:52,960
the client

01:01:50,720 --> 01:01:54,960
tells motor that it has drawn something

01:01:52,960 --> 01:01:57,839
on the gpu side

01:01:54,960 --> 01:01:58,880
eventually shares the texture with motor

01:01:57,839 --> 01:02:01,760
and then motor

01:01:58,880 --> 01:02:03,760
also has to draw stuff on top of it it

01:02:01,760 --> 01:02:07,839
does the compositing parts

01:02:03,760 --> 01:02:07,839
depositing beats also with opengl

01:02:08,079 --> 01:02:16,000
and then in the in the specific case of

01:02:11,920 --> 01:02:19,200
being a wayland compositor motor

01:02:16,000 --> 01:02:23,359
also handles a low level bits so

01:02:19,200 --> 01:02:26,799
it uses gbm to create um

01:02:23,359 --> 01:02:31,039
buffers and kms to do mode setting

01:02:26,799 --> 01:02:32,480
and page flipping and etc

01:02:31,039 --> 01:02:34,400
and i'm of course being a composer

01:02:32,480 --> 01:02:35,599
doesn't mean you only have to draw but

01:02:34,400 --> 01:02:38,960
you also

01:02:35,599 --> 01:02:42,079
motor has to read

01:02:38,960 --> 01:02:42,960
events from the kernel it does that

01:02:42,079 --> 01:02:47,760
indirectly

01:02:42,960 --> 01:02:51,280
using lib input and

01:02:47,760 --> 01:02:54,880
it then sends these evens

01:02:51,280 --> 01:02:57,839
these input events to the clients

01:02:54,880 --> 01:02:59,760
also through the lib wayland server

01:02:57,839 --> 01:03:03,440
route

01:02:59,760 --> 01:03:06,720
um in this in the case of weyland

01:03:03,440 --> 01:03:08,240
it clients cannot access anything cannot

01:03:06,720 --> 01:03:10,880
read

01:03:08,240 --> 01:03:11,440
events that are sent to other clients

01:03:10,880 --> 01:03:14,720
this is

01:03:11,440 --> 01:03:18,079
this is private information in terms of

01:03:14,720 --> 01:03:21,280
who waxes it mudder has access to it

01:03:18,079 --> 01:03:24,240
um and clients only know what

01:03:21,280 --> 01:03:24,240
they're supposed to know

01:03:24,880 --> 01:03:29,520
um on xlr on x11 that's a completely

01:03:28,319 --> 01:03:32,960
different scheme

01:03:29,520 --> 01:03:36,000
smarter is basically the xr

01:03:32,960 --> 01:03:37,119
the x server is the compositor in this

01:03:36,000 --> 01:03:40,640
case

01:03:37,119 --> 01:03:44,160
and mother's kind of a special client

01:03:40,640 --> 01:03:47,200
it um

01:03:44,160 --> 01:03:50,000
it's a client with privileges

01:03:47,200 --> 01:03:52,400
um being a compositing window manager

01:03:50,000 --> 01:03:54,480
not a compositor

01:03:52,400 --> 01:03:56,960
um but it still lives in the same level

01:03:54,480 --> 01:04:02,160
as other clients

01:03:56,960 --> 01:04:05,359
um so the chart looks quite differently

01:04:02,160 --> 01:04:08,720
so um let's a quick look at cargo

01:04:05,359 --> 01:04:09,520
so cargo as i said is a basically a

01:04:08,720 --> 01:04:13,280
nicer

01:04:09,520 --> 01:04:14,400
opengl most of its apis are are made to

01:04:13,280 --> 01:04:17,680
look more object

01:04:14,400 --> 01:04:20,480
object oriented and

01:04:17,680 --> 01:04:20,799
they're more idiomatic when it comes to

01:04:20,480 --> 01:04:23,920
like

01:04:20,799 --> 01:04:28,319
jalib and the gnome stack

01:04:23,920 --> 01:04:31,039
um it all it most of it centers around

01:04:28,319 --> 01:04:32,160
cargo context and cargo frame buffer

01:04:31,039 --> 01:04:35,599
which is interesting

01:04:32,160 --> 01:04:39,359
cargo predates vulcan by many years

01:04:35,599 --> 01:04:43,520
and yet the abstractions inside cargo

01:04:39,359 --> 01:04:46,319
are surprisingly similar to vulcan

01:04:43,520 --> 01:04:48,720
has a swap chain object that behaves

01:04:46,319 --> 01:04:52,400
more or less like the vulcan swap chain

01:04:48,720 --> 01:04:56,799
has a explicit image

01:04:52,400 --> 01:04:59,920
types um an explicit context

01:04:56,799 --> 01:05:03,680
it's incredibly similar

01:04:59,920 --> 01:05:05,119
if you think about it um

01:05:03,680 --> 01:05:07,359
it was an independent project before

01:05:05,119 --> 01:05:10,400
being much merged with mutter

01:05:07,359 --> 01:05:12,000
actually clutter and motor there's not

01:05:10,400 --> 01:05:15,920
much talk about it it does

01:05:12,000 --> 01:05:21,200
opengl stuff um

01:05:15,920 --> 01:05:23,359
but you know nicer to use api basically

01:05:21,200 --> 01:05:26,240
and then we have clutter which is the

01:05:23,359 --> 01:05:29,440
toolkit that we use for drawing

01:05:26,240 --> 01:05:31,039
so um clutter was born as an application

01:05:29,440 --> 01:05:32,720
toolkit

01:05:31,039 --> 01:05:34,319
opengl based of course being based on

01:05:32,720 --> 01:05:38,079
cargo it's

01:05:34,319 --> 01:05:41,359
opengl by nature and

01:05:38,079 --> 01:05:44,880
we well over time it grew like

01:05:41,359 --> 01:05:45,440
a very large pile of hacks in order to

01:05:44,880 --> 01:05:50,799
become

01:05:45,440 --> 01:05:55,280
a a compositing a compositor

01:05:50,799 --> 01:05:58,400
toolkit but at some point it got so

01:05:55,280 --> 01:06:02,079
um distorted that it was better to

01:05:58,400 --> 01:06:04,640
basically fork it inside mutter

01:06:02,079 --> 01:06:05,520
and over time we've been slowly

01:06:04,640 --> 01:06:08,799
stripping it

01:06:05,520 --> 01:06:12,240
out of client-side

01:06:08,799 --> 01:06:15,520
application toolkit apis so

01:06:12,240 --> 01:06:18,559
um many things don't make a lot of sense

01:06:15,520 --> 01:06:21,440
um when you're a compositor but

01:06:18,559 --> 01:06:23,680
makes sense when you're an application

01:06:21,440 --> 01:06:26,000
um

01:06:23,680 --> 01:06:28,000
and we've been removing those things and

01:06:26,000 --> 01:06:28,799
focusing and reducing the code base to

01:06:28,000 --> 01:06:33,200
be like

01:06:28,799 --> 01:06:36,799
a um

01:06:33,200 --> 01:06:37,359
a composer only api so wade's asking

01:06:36,799 --> 01:06:39,520
here

01:06:37,359 --> 01:06:40,960
any thoughts plans to use vulcan instead

01:06:39,520 --> 01:06:44,319
of cargo

01:06:40,960 --> 01:06:47,599
um we don't plan to replace cargo

01:06:44,319 --> 01:06:51,839
what's very likely to happen

01:06:47,599 --> 01:06:56,319
if it happens at all is that we'll grow

01:06:51,839 --> 01:06:57,839
a vucan back in for cargo because cargo

01:06:56,319 --> 01:07:00,720
also has back ends

01:06:57,839 --> 01:07:02,319
so it has like peak geo it has egl gel

01:07:00,720 --> 01:07:05,839
yes

01:07:02,319 --> 01:07:10,319
um it had in the past

01:07:05,839 --> 01:07:13,520
egl kms and outspot of clutter

01:07:10,319 --> 01:07:15,520
sorry spot of mother um so

01:07:13,520 --> 01:07:17,599
if anything it's gonna be another

01:07:15,520 --> 01:07:20,640
back-end for cargo so it's gonna be a

01:07:17,599 --> 01:07:24,000
vulcan backhand for cargo and

01:07:20,640 --> 01:07:26,839
now shell slash motor won't even

01:07:24,000 --> 01:07:28,559
well mother might need some like hand

01:07:26,839 --> 01:07:32,240
holding because it

01:07:28,559 --> 01:07:35,359
does directly access egl stuff

01:07:32,240 --> 01:07:38,720
when running on weyland but we do

01:07:35,359 --> 01:07:41,680
it's it's not that hard to add

01:07:38,720 --> 01:07:43,359
it's a small part of it um hopefully

01:07:41,680 --> 01:07:48,319
that answers your question

01:07:43,359 --> 01:07:48,319
thanks for asking by the way um

01:07:48,880 --> 01:07:52,880
so um yeah glitter animation framework

01:07:51,920 --> 01:07:55,359
has a very cool

01:07:52,880 --> 01:07:58,000
easy to use and expressive animation

01:07:55,359 --> 01:07:59,920
framework that allows us to

01:07:58,000 --> 01:08:01,520
implement basically all the genome shell

01:07:59,920 --> 01:08:04,160
animations

01:08:01,520 --> 01:08:06,079
using like implemented facts like

01:08:04,160 --> 01:08:09,359
blurring and then etc

01:08:06,079 --> 01:08:12,559
through shaders and it also does

01:08:09,359 --> 01:08:17,359
input handling oh in fact now that it's

01:08:12,559 --> 01:08:20,960
um now that it's a compositor api

01:08:17,359 --> 01:08:24,159
it's a compositor toolkit it's

01:08:20,960 --> 01:08:27,839
it contains input

01:08:24,159 --> 01:08:29,759
abstraction layers in the past when

01:08:27,839 --> 01:08:32,239
clutter was an application toolkit it

01:08:29,759 --> 01:08:35,120
used to have

01:08:32,239 --> 01:08:36,319
it used to have impendo input itself

01:08:35,120 --> 01:08:37,920
nowadays it has

01:08:36,319 --> 01:08:40,400
all the abstraction layers in terms of

01:08:37,920 --> 01:08:43,759
clutter seat and family

01:08:40,400 --> 01:08:45,120
and motor implements these abstractions

01:08:43,759 --> 01:08:47,120
differently for

01:08:45,120 --> 01:08:48,640
um when it's running on weyland and when

01:08:47,120 --> 01:08:52,480
it's running on

01:08:48,640 --> 01:08:56,960
xl as an x11 compositing window manager

01:08:52,480 --> 01:09:01,920
um but um on wheyland of course it uses

01:08:56,960 --> 01:09:04,960
lib input and and um

01:09:01,920 --> 01:09:09,679
xcb and

01:09:04,960 --> 01:09:14,159
on on x11 uses x11 as

01:09:09,679 --> 01:09:16,640
x11 when when it's running in a zx11

01:09:14,159 --> 01:09:20,000
everything is x11

01:09:16,640 --> 01:09:22,400
um as a toolkit it follows the

01:09:20,000 --> 01:09:25,600
traditional update stack i'm not sure if

01:09:22,400 --> 01:09:29,199
everyone's familiar with that but i'm

01:09:25,600 --> 01:09:32,400
giving it a quick glance at it um

01:09:29,199 --> 01:09:33,040
layout basically you put ui elements on

01:09:32,400 --> 01:09:36,480
the screen you

01:09:33,040 --> 01:09:39,440
position them their size and then

01:09:36,480 --> 01:09:40,319
you paint all these elements so you

01:09:39,440 --> 01:09:43,359
paint a label

01:09:40,319 --> 01:09:45,120
as white and then behind it a panel is

01:09:43,359 --> 01:09:48,239
black and then you want

01:09:45,120 --> 01:09:50,159
the screen the the texture of the

01:09:48,239 --> 01:09:52,159
screen somewhere positioned somewhere

01:09:50,159 --> 01:09:54,480
somehow

01:09:52,159 --> 01:09:55,679
and um and then you pick you're on the

01:09:54,480 --> 01:09:57,520
big face which is

01:09:55,679 --> 01:09:59,280
like figuring out what's beneath the

01:09:57,520 --> 01:10:00,880
cursor

01:09:59,280 --> 01:10:02,800
clutter is kind of a special case in

01:10:00,880 --> 01:10:09,199
terms of toolkits here

01:10:02,800 --> 01:10:09,199
because it does 2d on top of a 3d space

01:10:10,159 --> 01:10:16,490
i have a demo here quick demo that i

01:10:13,440 --> 01:10:19,560
like recently did um

01:10:16,490 --> 01:10:19,560
[Music]

01:10:19,840 --> 01:10:24,640
i'm gonna share my screen and i hope

01:10:22,000 --> 01:10:27,360
everything goes well it goes fine

01:10:24,640 --> 01:10:28,480
um all right so do let me know if you

01:10:27,360 --> 01:10:29,760
can see my screen

01:10:28,480 --> 01:10:33,040
you probably can see you can see my

01:10:29,760 --> 01:10:36,080
cursor but you can do you see my screen

01:10:33,040 --> 01:10:38,080
i hope um

01:10:36,080 --> 01:10:39,920
because at least i can see my screen we

01:10:38,080 --> 01:10:42,159
can go ahead

01:10:39,920 --> 01:10:44,560
fantastic thank you for confirming that

01:10:42,159 --> 01:10:47,600
so what i'm going to do here

01:10:44,560 --> 01:10:52,400
is i'm going to pick like this window

01:10:47,600 --> 01:10:55,440
um and like it's a 2d it's a 2d toolkit

01:10:52,400 --> 01:10:58,400
it's a 3d toolkit um doing

01:10:55,440 --> 01:10:59,679
2d stuff so i can do like for example

01:10:58,400 --> 01:11:03,360
rotate this window in

01:10:59,679 --> 01:11:07,760
in 30 degrees and it it does

01:11:03,360 --> 01:11:10,239
this weird thing um and

01:11:07,760 --> 01:11:12,239
you know fantastically you can still

01:11:10,239 --> 01:11:14,719
like interact with a window

01:11:12,239 --> 01:11:16,000
with all the transforms in place so it

01:11:14,719 --> 01:11:20,320
still works

01:11:16,000 --> 01:11:24,800
with like stuff like this i can open

01:11:20,320 --> 01:11:26,960
new tabs and etc um

01:11:24,800 --> 01:11:28,080
which is like pretty nice as a as a

01:11:26,960 --> 01:11:30,880
toolkit you can

01:11:28,080 --> 01:11:32,719
it has to deal with a lot of matrices

01:11:30,880 --> 01:11:35,120
which i'm going to talk about later but

01:11:32,719 --> 01:11:36,560
it has basically to deal with tons of

01:11:35,120 --> 01:11:40,080
matrices

01:11:36,560 --> 01:11:43,040
everywhere but it also can do a lot of

01:11:40,080 --> 01:11:44,080
cool stuff with it um yeah that's

01:11:43,040 --> 01:11:46,159
clutter

01:11:44,080 --> 01:11:47,920
um let's move on to the next topic

01:11:46,159 --> 01:11:49,840
recently motor

01:11:47,920 --> 01:11:51,199
received some improvements to the frame

01:11:49,840 --> 01:11:53,199
clock

01:11:51,199 --> 01:11:55,360
specifically to the frame car clock

01:11:53,199 --> 01:11:58,640
scheduler

01:11:55,360 --> 01:12:02,320
um where

01:11:58,640 --> 01:12:06,239
like we had it's easier to do this with

01:12:02,320 --> 01:12:10,960
charts of course um so these um

01:12:06,239 --> 01:12:13,679
strips here are the um

01:12:10,960 --> 01:12:14,480
this sync evens from the monitor and

01:12:13,679 --> 01:12:16,880
they're basically

01:12:14,480 --> 01:12:17,600
when an application draws it tells

01:12:16,880 --> 01:12:20,840
mutter

01:12:17,600 --> 01:12:24,239
either through exarch or through

01:12:20,840 --> 01:12:24,960
um weyland protocols you tell mother

01:12:24,239 --> 01:12:28,800
about a new

01:12:24,960 --> 01:12:31,840
buffer and they have

01:12:28,800 --> 01:12:35,760
they have to do this like

01:12:31,840 --> 01:12:38,000
until this green trip here

01:12:35,760 --> 01:12:38,880
if an application like a video player is

01:12:38,000 --> 01:12:42,000
running

01:12:38,880 --> 01:12:46,000
and then it has a frame ready

01:12:42,000 --> 01:12:48,960
and it sends the frame like here

01:12:46,000 --> 01:12:50,080
this frame is not gonna be in this like

01:12:48,960 --> 01:12:53,280
application frame

01:12:50,080 --> 01:12:55,679
is not going to be shown in the next

01:12:53,280 --> 01:12:56,960
frame displayed by the monitor instead

01:12:55,679 --> 01:13:00,080
it will

01:12:56,960 --> 01:13:03,120
skip to the next one

01:13:00,080 --> 01:13:05,440
um there's a small delay here we call it

01:13:03,120 --> 01:13:08,640
the sync delay

01:13:05,440 --> 01:13:09,679
you can see here after the v blank this

01:13:08,640 --> 01:13:13,199
delay is

01:13:09,679 --> 01:13:13,920
there so that we can read input give a

01:13:13,199 --> 01:13:17,679
chance of

01:13:13,920 --> 01:13:20,880
for input events to arrive and

01:13:17,679 --> 01:13:24,000
be ready at the very next frame

01:13:20,880 --> 01:13:24,560
um if input events arrive live arrive

01:13:24,000 --> 01:13:27,760
like

01:13:24,560 --> 01:13:30,239
here or here they're also going to be

01:13:27,760 --> 01:13:32,719
displayed on the frame after that so we

01:13:30,239 --> 01:13:34,320
got some latency here

01:13:32,719 --> 01:13:37,440
but i'm at this we give a chance of

01:13:34,320 --> 01:13:40,719
these events to write here

01:13:37,440 --> 01:13:43,600
um but that's the old ways

01:13:40,719 --> 01:13:44,719
nowadays we improve this a little bit

01:13:43,600 --> 01:13:48,560
it's improved here

01:13:44,719 --> 01:13:51,679
so we give a bigger room for

01:13:48,560 --> 01:13:53,679
applications to draw so um

01:13:51,679 --> 01:13:56,159
if the if for example if the video

01:13:53,679 --> 01:13:59,280
player like draws something

01:13:56,159 --> 01:14:00,560
and it draws right here it's

01:13:59,280 --> 01:14:02,960
we're going to try and show it in the

01:14:00,560 --> 01:14:04,800
next frame

01:14:02,960 --> 01:14:06,960
browse here it's still going to try and

01:14:04,800 --> 01:14:10,880
show it in the next ring

01:14:06,960 --> 01:14:14,400
um so it has a much higher chance to not

01:14:10,880 --> 01:14:15,920
skip frame to reduce it has a

01:14:14,400 --> 01:14:18,560
has a better way it's a better way to

01:14:15,920 --> 01:14:21,840
handle latency reduce latency so

01:14:18,560 --> 01:14:24,400
we don't skip too many frames

01:14:21,840 --> 01:14:26,800
um we also recently got a one frame

01:14:24,400 --> 01:14:29,120
clock per monitor which should

01:14:26,800 --> 01:14:31,280
that that's a relic it's basically us

01:14:29,120 --> 01:14:34,480
catching up

01:14:31,280 --> 01:14:36,000
with times it comes from it it

01:14:34,480 --> 01:14:38,239
turns out that when you're an

01:14:36,000 --> 01:14:39,360
application you don't have to do with

01:14:38,239 --> 01:14:42,800
multiple

01:14:39,360 --> 01:14:45,280
frame clocks because you're in a monitor

01:14:42,800 --> 01:14:46,719
or not the compositor tells you when you

01:14:45,280 --> 01:14:48,880
have to draw yourself but when you're

01:14:46,719 --> 01:14:50,800
the compositor you have to draw

01:14:48,880 --> 01:14:52,400
different parts of the screen at

01:14:50,800 --> 01:14:56,320
different frame rates

01:14:52,400 --> 01:14:59,120
so recently mother also got a

01:14:56,320 --> 01:15:01,679
the ability to have different frames

01:14:59,120 --> 01:15:05,840
frame clocks for different monitors

01:15:01,679 --> 01:15:05,840
which vastly improved everything

01:15:06,960 --> 01:15:13,040
still on the topic of drawing

01:15:10,000 --> 01:15:15,040
motor and stuff so

01:15:13,040 --> 01:15:17,120
one of the ways that motor has to deal

01:15:15,040 --> 01:15:19,920
one of the kernel apis that

01:15:17,120 --> 01:15:20,400
one of the apis that motor has to use

01:15:19,920 --> 01:15:24,000
like

01:15:20,400 --> 01:15:27,520
very frequently is the drm api for

01:15:24,000 --> 01:15:30,719
modes mode setting and page flipping

01:15:27,520 --> 01:15:34,400
in the past we were really

01:15:30,719 --> 01:15:38,880
not atomic so if you like open

01:15:34,400 --> 01:15:41,520
control center and modify something

01:15:38,880 --> 01:15:44,000
that's gonna be the comments are gonna

01:15:41,520 --> 01:15:47,600
be issued like immediately

01:15:44,000 --> 01:15:50,400
um over the past

01:15:47,600 --> 01:15:52,400
year we received an improvement of that

01:15:50,400 --> 01:15:56,320
we're transitioning to atomic

01:15:52,400 --> 01:15:57,920
kms and to do that we are introducing

01:15:56,320 --> 01:16:01,840
transitional

01:15:57,920 --> 01:16:04,080
transactional um changes

01:16:01,840 --> 01:16:05,440
so what's currently implemented in gnome

01:16:04,080 --> 01:16:08,800
shell slash

01:16:05,440 --> 01:16:11,840
is that all changes they're

01:16:08,800 --> 01:16:14,320
accumulated in a transaction

01:16:11,840 --> 01:16:16,400
but this is a fake transactional kms

01:16:14,320 --> 01:16:20,400
implementation because

01:16:16,400 --> 01:16:21,120
by the end of it we issue individual

01:16:20,400 --> 01:16:24,400
comments

01:16:21,120 --> 01:16:27,440
using the non-atomic api um

01:16:24,400 --> 01:16:30,880
but that's the first step so we now like

01:16:27,440 --> 01:16:32,400
agglutinate events configure configure

01:16:30,880 --> 01:16:36,880
events together

01:16:32,400 --> 01:16:36,880
and then issue all of them

01:16:36,960 --> 01:16:44,880
in a single step in the future

01:16:41,280 --> 01:16:49,120
we want of course to use the atomic

01:16:44,880 --> 01:16:50,960
transactional stuff so one comment

01:16:49,120 --> 01:16:52,400
by the end of the transaction and we are

01:16:50,960 --> 01:16:55,440
done with it

01:16:52,400 --> 01:16:58,320
um all these slides were

01:16:55,440 --> 01:16:58,719
um kurta courtesy of janazadel from red

01:16:58,320 --> 01:17:02,640
hat

01:16:58,719 --> 01:17:05,199
thanks jonas um

01:17:02,640 --> 01:17:05,679
um more than that we will eventually we

01:17:05,199 --> 01:17:08,159
want

01:17:05,679 --> 01:17:09,199
the current implementation is already

01:17:08,159 --> 01:17:12,239
like

01:17:09,199 --> 01:17:15,920
prepared for having receiving a kms

01:17:12,239 --> 01:17:19,040
thread so we can submit

01:17:15,920 --> 01:17:22,000
the atomic the the kms stuff

01:17:19,040 --> 01:17:24,560
the drm calls on we can do that on a

01:17:22,000 --> 01:17:27,199
thread in a different thread

01:17:24,560 --> 01:17:28,719
um it's prepared but it's still going to

01:17:27,199 --> 01:17:29,120
be difficult because we have to do a lot

01:17:28,719 --> 01:17:32,000
of

01:17:29,120 --> 01:17:32,800
state tracking internally motor and

01:17:32,000 --> 01:17:36,800
threats

01:17:32,800 --> 01:17:40,000
can very easily mess up with that um

01:17:36,800 --> 01:17:42,159
another difficulty is that we have

01:17:40,000 --> 01:17:44,159
um as a compositor we have to deal with

01:17:42,159 --> 01:17:44,719
k like we have to be able to switch

01:17:44,159 --> 01:17:48,239
between

01:17:44,719 --> 01:17:51,440
old fallback opengl

01:17:48,239 --> 01:17:54,560
um rendering for various cases like

01:17:51,440 --> 01:17:55,520
we can support hardware overlay for

01:17:54,560 --> 01:17:57,120
compositing

01:17:55,520 --> 01:17:58,560
but we have to support opengl

01:17:57,120 --> 01:18:01,920
compositing as well

01:17:58,560 --> 01:18:04,640
we can um we'll have to support

01:18:01,920 --> 01:18:06,159
cursor plane but if there's no cursor

01:18:04,640 --> 01:18:08,880
playing in hardware

01:18:06,159 --> 01:18:12,080
or if it fails to like submit a cursor

01:18:08,880 --> 01:18:15,760
buffer we have to use opengl for that

01:18:12,080 --> 01:18:20,080
and gamma correction and all this stuff

01:18:15,760 --> 01:18:24,239
um yeah most of this code leaves

01:18:20,080 --> 01:18:27,679
under the kms oh i screwed up

01:18:24,239 --> 01:18:29,679
under the kms prefix um

01:18:27,679 --> 01:18:31,679
and since we are talking about kms let's

01:18:29,679 --> 01:18:36,480
talk about planes

01:18:31,679 --> 01:18:41,440
so currently um motor only uses

01:18:36,480 --> 01:18:46,719
the cursor plane and the primary plane

01:18:41,440 --> 01:18:50,480
um using the hardware overlay plane

01:18:46,719 --> 01:18:52,840
is or the planes in plural

01:18:50,480 --> 01:18:54,960
it's going to be a difficult transition

01:18:52,840 --> 01:18:56,400
because it's gonna need some deep

01:18:54,960 --> 01:18:59,600
surgery

01:18:56,400 --> 01:18:59,920
and i'm particularly very keen to try

01:18:59,600 --> 01:19:05,120
and

01:18:59,920 --> 01:19:05,120
see how lip lift off goes with it

01:19:05,199 --> 01:19:09,600
it's especially tricky because we have

01:19:07,199 --> 01:19:13,360
to check for a lot of stuff

01:19:09,600 --> 01:19:16,560
if internally the

01:19:13,360 --> 01:19:19,679
that particular element can like has the

01:19:16,560 --> 01:19:22,320
correct buffer formats

01:19:19,679 --> 01:19:24,000
it can be composited if it can be

01:19:22,320 --> 01:19:25,760
composed in an overlay plane

01:19:24,000 --> 01:19:27,679
whether it's going to be screwed up it's

01:19:25,760 --> 01:19:29,120
going to screw up the like the widget

01:19:27,679 --> 01:19:31,920
tree or not

01:19:29,120 --> 01:19:33,040
or if it's going to be occluded because

01:19:31,920 --> 01:19:35,840
we cannot

01:19:33,040 --> 01:19:37,760
uh an overlay plane cannot has has a

01:19:35,840 --> 01:19:41,360
series of restrictions that

01:19:37,760 --> 01:19:44,400
are hard to express with clutter

01:19:41,360 --> 01:19:45,040
um and the fact that we have basically

01:19:44,400 --> 01:19:47,520
to try

01:19:45,040 --> 01:19:50,400
and see if it fails or not is not like

01:19:47,520 --> 01:19:52,400
very motivating

01:19:50,400 --> 01:19:54,400
um so that's why we want to like

01:19:52,400 --> 01:19:57,520
investigate lib liftoff

01:19:54,400 --> 01:20:00,880
and see how it performs

01:19:57,520 --> 01:20:02,480
in this case and um

01:20:00,880 --> 01:20:04,960
yeah that's what i had to talk about

01:20:02,480 --> 01:20:05,520
planes stock up switch gears a bit and

01:20:04,960 --> 01:20:08,960
talk about

01:20:05,520 --> 01:20:12,000
input um

01:20:08,960 --> 01:20:13,440
on weyland we use lip input in x cb as i

01:20:12,000 --> 01:20:15,840
mentioned before

01:20:13,440 --> 01:20:18,159
and they are implemented as seeds i

01:20:15,840 --> 01:20:21,920
think concept the concept of seeds is

01:20:18,159 --> 01:20:23,840
um it's been introduced recently

01:20:21,920 --> 01:20:24,960
and this is the abstraction layer that

01:20:23,840 --> 01:20:27,360
clutter has

01:20:24,960 --> 01:20:29,600
clutter has like interfaces for seeds

01:20:27,360 --> 01:20:32,320
and mother implements

01:20:29,600 --> 01:20:33,920
um a native seed for weyland and an x11

01:20:32,320 --> 01:20:37,120
seat for x11

01:20:33,920 --> 01:20:39,280
as seats is basically um

01:20:37,120 --> 01:20:40,560
the part of the code that owns the input

01:20:39,280 --> 01:20:42,719
devices

01:20:40,560 --> 01:20:43,760
and generates input events that are

01:20:42,719 --> 01:20:47,840
later

01:20:43,760 --> 01:20:50,639
sent to the clients

01:20:47,840 --> 01:20:52,000
and we are currently working towards an

01:20:50,639 --> 01:20:55,280
input thread

01:20:52,000 --> 01:20:58,000
so it's working

01:20:55,280 --> 01:20:58,320
very much work in progress at this point

01:20:58,000 --> 01:21:00,400
but

01:20:58,320 --> 01:21:02,719
if you ultimate goal with that is that

01:21:00,400 --> 01:21:05,600
we want to have an input thread here

01:21:02,719 --> 01:21:07,520
and these um charts are courtesy of

01:21:05,600 --> 01:21:12,080
carlos guernachos from

01:21:07,520 --> 01:21:14,320
red hat 12 thanks carlos um

01:21:12,080 --> 01:21:16,080
we want to have an input specific thread

01:21:14,320 --> 01:21:18,159
that's going to communicate with the ui

01:21:16,080 --> 01:21:22,159
slashwayland thread

01:21:18,159 --> 01:21:23,360
and eventually the ui slashwayland is

01:21:22,159 --> 01:21:26,840
gonna is also gonna

01:21:23,360 --> 01:21:30,560
feedback back to the input thread

01:21:26,840 --> 01:21:32,960
and input is gonna

01:21:30,560 --> 01:21:35,120
if everything goes right input is gonna

01:21:32,960 --> 01:21:36,159
communicate with the kms thread directly

01:21:35,120 --> 01:21:40,320
as well

01:21:36,159 --> 01:21:42,800
so if like

01:21:40,320 --> 01:21:44,480
something goes awfully wrong in the ui

01:21:42,800 --> 01:21:47,040
thread

01:21:44,480 --> 01:21:48,719
the input thread can still update the

01:21:47,040 --> 01:21:51,280
hardware cursor

01:21:48,719 --> 01:21:53,040
and the kms thread is not going to be

01:21:51,280 --> 01:21:56,000
stuck

01:21:53,040 --> 01:21:57,360
together with the ui thread so basically

01:21:56,000 --> 01:22:01,199
that achieves

01:21:57,360 --> 01:22:04,480
the behavior of the current exarch um

01:22:01,199 --> 01:22:06,080
architecture well how exarch behaves in

01:22:04,480 --> 01:22:09,520
fact

01:22:06,080 --> 01:22:10,960
um since the client is not not another

01:22:09,520 --> 01:22:12,880
since the compiler the compositing

01:22:10,960 --> 01:22:14,719
window manager is not another thread but

01:22:12,880 --> 01:22:18,239
rather another process and

01:22:14,719 --> 01:22:18,960
entirely um so there's that so you want

01:22:18,239 --> 01:22:21,280
to

01:22:18,960 --> 01:22:22,880
eventually reach the point where we have

01:22:21,280 --> 01:22:26,159
an input thread

01:22:22,880 --> 01:22:28,480
a kms thread and a ui

01:22:26,159 --> 01:22:28,480
thread

01:22:29,280 --> 01:22:32,320
because that's going to cover a lot of

01:22:30,560 --> 01:22:34,400
cases

01:22:32,320 --> 01:22:36,080
and there are various benefits of having

01:22:34,400 --> 01:22:39,440
a different input thread

01:22:36,080 --> 01:22:40,960
so as i said no stuck cursor when the ui

01:22:39,440 --> 01:22:44,960
thread is stalled

01:22:40,960 --> 01:22:49,600
um we can deliver better high frequency

01:22:44,960 --> 01:22:52,000
devices um events um

01:22:49,600 --> 01:22:55,120
and in general is just you know good to

01:22:52,000 --> 01:22:58,639
have something well implemented

01:22:55,120 --> 01:23:02,880
um and the last topic that i wanted to

01:22:58,639 --> 01:23:04,320
cover here last big topic

01:23:02,880 --> 01:23:06,800
that i think it's relevant for us

01:23:04,320 --> 01:23:07,520
because it does touch some kernel apis

01:23:06,800 --> 01:23:10,719
as well

01:23:07,520 --> 01:23:11,679
some apis that are related to kernels

01:23:10,719 --> 01:23:15,280
occur now

01:23:11,679 --> 01:23:17,280
is screen sharing because um

01:23:15,280 --> 01:23:18,960
this is mother implements screen sharing

01:23:17,280 --> 01:23:22,080
in terms of

01:23:18,960 --> 01:23:23,920
um a pipe wire based stream

01:23:22,080 --> 01:23:25,840
streams in plural because you can have

01:23:23,920 --> 01:23:27,920
more than one string

01:23:25,840 --> 01:23:28,960
and basically pipe wire pre-allocates a

01:23:27,920 --> 01:23:31,920
number of buffers

01:23:28,960 --> 01:23:34,239
and cycles through them and it also

01:23:31,920 --> 01:23:36,960
supports streaming metadata

01:23:34,239 --> 01:23:37,760
and recently motor gained like a super

01:23:36,960 --> 01:23:40,880
fast path

01:23:37,760 --> 01:23:44,639
which uses dma buff sharing

01:23:40,880 --> 01:23:48,080
to share like textures with clients

01:23:44,639 --> 01:23:50,880
and this low path is basically still gel

01:23:48,080 --> 01:23:50,880
read pixels

01:23:51,040 --> 01:23:55,120
this low path is isn't drawn here so we

01:23:53,280 --> 01:23:57,360
have a buffer here on the gpu and mother

01:23:55,120 --> 01:24:00,320
has to download this

01:23:57,360 --> 01:24:02,080
buffer send to a client here i'm using

01:24:00,320 --> 01:24:05,199
obs studio as a

01:24:02,080 --> 01:24:07,040
as an example it communicates

01:24:05,199 --> 01:24:09,760
it gives the buffer to pipe wire pipe

01:24:07,040 --> 01:24:12,800
wire does the all the buffer negotiation

01:24:09,760 --> 01:24:16,239
stream negotiations um

01:24:12,800 --> 01:24:19,600
stuff and then feeds

01:24:16,239 --> 01:24:22,960
the client with the buffers and

01:24:19,600 --> 01:24:26,400
the fast path using dma buff

01:24:22,960 --> 01:24:29,600
is we have a buffer here the gpu

01:24:26,400 --> 01:24:30,239
we create a copy of it pipe wire gives

01:24:29,600 --> 01:24:34,159
us like

01:24:30,239 --> 01:24:36,800
asks us to create a queue of buffers

01:24:34,159 --> 01:24:37,760
so usually that's 16 i'm using last year

01:24:36,800 --> 01:24:41,199
just to

01:24:37,760 --> 01:24:44,480
demonstrate it but we create all these

01:24:41,199 --> 01:24:47,360
gpu based buffers um

01:24:44,480 --> 01:24:49,440
and we pass just the dma buff ft to pipe

01:24:47,360 --> 01:24:51,600
wire

01:24:49,440 --> 01:24:53,199
and pipe wire gives it back to gives

01:24:51,600 --> 01:24:55,840
these fd to

01:24:53,199 --> 01:24:57,120
the application which can then like

01:24:55,840 --> 01:25:00,400
create an egl texture

01:24:57,120 --> 01:25:03,760
on top of it and render itself

01:25:00,400 --> 01:25:05,840
without downloading the texture

01:25:03,760 --> 01:25:07,840
these buffers they are destroyed by the

01:25:05,840 --> 01:25:11,920
end of the stream so they are reused

01:25:07,840 --> 01:25:12,400
file streaming which makes up for a very

01:25:11,920 --> 01:25:14,400
very

01:25:12,400 --> 01:25:16,000
consistent smoothness on the stream

01:25:14,400 --> 01:25:19,199
inside

01:25:16,000 --> 01:25:23,280
um i have a demo for that

01:25:19,199 --> 01:25:27,199
prepared specifically for for this

01:25:23,280 --> 01:25:30,639
log um i'm gonna

01:25:27,199 --> 01:25:33,679
again share my s

01:25:30,639 --> 01:25:37,440
screen over here

01:25:33,679 --> 01:25:41,840
um which

01:25:37,440 --> 01:25:41,840
should be working i guess no

01:25:42,320 --> 01:25:47,040
it is not i suppose

01:25:48,480 --> 01:25:55,840
yeah i guess it isn't second time is a

01:25:52,239 --> 01:25:55,840
charm isn't it

01:25:57,120 --> 01:26:11,520
all right let's try again one more time

01:26:08,320 --> 01:26:13,280
oh i cancelled it and went it back there

01:26:11,520 --> 01:26:16,880
so now it should be working

01:26:13,280 --> 01:26:19,679
you don't see my cursor but um

01:26:16,880 --> 01:26:21,520
you should see it here i'm linking with

01:26:19,679 --> 01:26:22,639
the previous stop with the previous talk

01:26:21,520 --> 01:26:26,400
so

01:26:22,639 --> 01:26:28,560
i have this prototype of obs studio

01:26:26,400 --> 01:26:33,040
running as a flat pack

01:26:28,560 --> 01:26:36,400
so i'm going to run it with flat pack

01:26:33,040 --> 01:26:39,280
run or become

01:26:36,400 --> 01:26:40,080
studio there you go it automatically

01:26:39,280 --> 01:26:42,159
detects

01:26:40,080 --> 01:26:44,320
it's running on weyland and this is the

01:26:42,159 --> 01:26:45,280
screen sharing portal that um alex

01:26:44,320 --> 01:26:48,400
mentioned

01:26:45,280 --> 01:26:51,360
in the previous talk so um i can choose

01:26:48,400 --> 01:26:53,199
which monitor i want to

01:26:51,360 --> 01:26:54,960
you're probably seeing like it's it's

01:26:53,199 --> 01:26:56,639
eating a lot of frames but

01:26:54,960 --> 01:26:58,960
i can choose which monitor i'm gonna

01:26:56,639 --> 01:27:01,040
share the other monitor which i'm

01:26:58,960 --> 01:27:04,159
presenting over here

01:27:01,040 --> 01:27:08,159
um there you go

01:27:04,159 --> 01:27:11,760
um so yeah this is this is me sharing

01:27:08,159 --> 01:27:15,199
my other window over here

01:27:11,760 --> 01:27:18,480
and um as you can see it's

01:27:15,199 --> 01:27:20,960
like running at 60 fps with some 15

01:27:18,480 --> 01:27:22,000
cpu it's actually it should be actually

01:27:20,960 --> 01:27:24,239
even less

01:27:22,000 --> 01:27:25,679
but i'm streaming it twice one with pipe

01:27:24,239 --> 01:27:28,480
wire and one

01:27:25,679 --> 01:27:29,280
i'm have to screen two streaming

01:27:28,480 --> 01:27:32,320
sessions

01:27:29,280 --> 01:27:32,320
running at the same time

01:27:32,639 --> 01:27:36,000
this is like a massive improvement over

01:27:35,199 --> 01:27:37,920
what we had

01:27:36,000 --> 01:27:39,360
but it has its own limitations this is

01:27:37,920 --> 01:27:42,800
the demo by the way

01:27:39,360 --> 01:27:44,159
um i can using portals i can also do

01:27:42,800 --> 01:27:49,280
like

01:27:44,159 --> 01:27:52,480
choose a um specific window

01:27:49,280 --> 01:27:54,560
like using this is still again the

01:27:52,480 --> 01:27:58,080
portal so i can choose like

01:27:54,560 --> 01:28:01,679
i don't know let's select this one

01:27:58,080 --> 01:28:04,719
and i'm using this and then and then i'm

01:28:01,679 --> 01:28:07,360
screencasting this specific one it it's

01:28:04,719 --> 01:28:09,840
sharing the cursor through metadata

01:28:07,360 --> 01:28:11,199
that should be a lot of mass as you're

01:28:09,840 --> 01:28:14,320
seeing here my screens

01:28:11,199 --> 01:28:15,840
fully so it's using metadata so it's

01:28:14,320 --> 01:28:19,040
still hardware

01:28:15,840 --> 01:28:21,440
um cursor hardware accelerated cursor

01:28:19,040 --> 01:28:22,560
it's pretty much the state of art right

01:28:21,440 --> 01:28:27,120
now

01:28:22,560 --> 01:28:29,120
um but again it has various limitations

01:28:27,120 --> 01:28:31,760
um all right this is this is the demo i

01:28:29,120 --> 01:28:31,760
had um

01:28:32,159 --> 01:28:38,159
go back to the presentation um

01:28:35,360 --> 01:28:39,679
no nvidia support i to the best of my

01:28:38,159 --> 01:28:41,840
knowledge

01:28:39,679 --> 01:28:44,320
i cannot share dma buffs on top of

01:28:41,840 --> 01:28:48,719
nvidia

01:28:44,320 --> 01:28:52,800
at least not like this and also no x11

01:28:48,719 --> 01:28:55,679
support in this case because

01:28:52,800 --> 01:28:57,440
i just did implemented it and nobody did

01:28:55,679 --> 01:28:59,440
as well

01:28:57,440 --> 01:29:02,159
some thoughts on this so when

01:28:59,440 --> 01:29:05,199
implemented implementing this the gbm

01:29:02,159 --> 01:29:10,080
api is fantastic

01:29:05,199 --> 01:29:14,639
like a massively um

01:29:10,080 --> 01:29:14,639
easy to use api um

01:29:15,520 --> 01:29:21,440
the limitation of this proof of concept

01:29:18,639 --> 01:29:24,560
right so what's gbm is a generic buffer

01:29:21,440 --> 01:29:24,560
management api that

01:29:25,440 --> 01:29:29,120
that is the one that nvidia doesn't

01:29:26,960 --> 01:29:32,480
implement and everybody else

01:29:29,120 --> 01:29:35,280
basically implements um it allows me to

01:29:32,480 --> 01:29:38,880
like to create buffers on the gpu side

01:29:35,280 --> 01:29:41,920
this is what motor uses to render itself

01:29:38,880 --> 01:29:45,280
it's in the gbm kms layer

01:29:41,920 --> 01:29:46,800
um and this is it's what we use to share

01:29:45,280 --> 01:29:50,000
the dma

01:29:46,800 --> 01:29:52,800
and both fds with um

01:29:50,000 --> 01:29:55,040
with pipe wire which then shares it with

01:29:52,800 --> 01:29:58,719
um

01:29:55,040 --> 01:30:02,560
with the with whatever client we want

01:29:58,719 --> 01:30:04,560
um however pipe wire itself doesn't like

01:30:02,560 --> 01:30:07,120
support sending

01:30:04,560 --> 01:30:09,040
really important dma buff information

01:30:07,120 --> 01:30:12,560
such as modifiers

01:30:09,040 --> 01:30:14,719
it shouldn't be hard to add it um

01:30:12,560 --> 01:30:17,600
it should be a great task to start

01:30:14,719 --> 01:30:20,159
contributing to it

01:30:17,600 --> 01:30:21,679
um but it's currently lacking and

01:30:20,159 --> 01:30:25,040
doesn't allow

01:30:21,679 --> 01:30:27,920
us to use like really most optimal

01:30:25,040 --> 01:30:31,440
setups for screencasting in this case

01:30:27,920 --> 01:30:36,080
so we have to use like a linear

01:30:31,440 --> 01:30:39,280
an x bgr 888

01:30:36,080 --> 01:30:42,480
um buffer with a linear

01:30:39,280 --> 01:30:45,199
modifier everywhere which is super

01:30:42,480 --> 01:30:45,199
not optimal

01:30:45,679 --> 01:30:49,679
but it does work you know it's still

01:30:47,760 --> 01:30:51,199
orders of magnitude faster than

01:30:49,679 --> 01:30:54,480
downloading the buffer with gel root

01:30:51,199 --> 01:30:54,480
pixels or something like that

01:30:55,199 --> 01:31:02,480
um right you can you can

01:30:59,679 --> 01:31:03,040
check all of this this is currently not

01:31:02,480 --> 01:31:06,960
merged

01:31:03,040 --> 01:31:06,960
you can also try the flat back

01:31:07,280 --> 01:31:10,480
the thought pack demo that i did using

01:31:09,120 --> 01:31:14,800
this

01:31:10,480 --> 01:31:16,159
command here and

01:31:14,800 --> 01:31:18,000
yeah this is what i had for screen

01:31:16,159 --> 01:31:21,199
casting so some other plans

01:31:18,000 --> 01:31:22,239
that we have for mother yeah finish the

01:31:21,199 --> 01:31:25,280
transition

01:31:22,239 --> 01:31:28,639
there uh sure

01:31:25,280 --> 01:31:31,280
um so wade is asking will apps need to

01:31:28,639 --> 01:31:34,800
be updated to support pipewire dma-based

01:31:31,280 --> 01:31:35,679
dma-based screen sharing slacking

01:31:34,800 --> 01:31:37,199
browser

01:31:35,679 --> 01:31:39,440
currently are unable to share when

01:31:37,199 --> 01:31:42,639
running inside whaling

01:31:39,440 --> 01:31:47,280
um in general pap

01:31:42,639 --> 01:31:50,560
um apps should update to use pipe wire

01:31:47,280 --> 01:31:51,600
everywhere um i the screencast that i

01:31:50,560 --> 01:31:54,639
did was using

01:31:51,600 --> 01:31:56,880
chromium which has an optional pipeware

01:31:54,639 --> 01:31:59,679
flag where

01:31:56,880 --> 01:32:00,880
it can it also talks to the portal

01:31:59,679 --> 01:32:03,199
exactly as i did with

01:32:00,880 --> 01:32:04,239
obs studio it does with the portal so it

01:32:03,199 --> 01:32:06,400
creates

01:32:04,239 --> 01:32:08,719
it has smarter to charge screen motor

01:32:06,400 --> 01:32:13,840
sets up a pipe wire stream

01:32:08,719 --> 01:32:16,719
and passes the information to chromium

01:32:13,840 --> 01:32:17,280
in this case i believe that apps that

01:32:16,719 --> 01:32:20,639
use

01:32:17,280 --> 01:32:23,520
chromium at some level so

01:32:20,639 --> 01:32:24,880
um for example um what's the name of

01:32:23,520 --> 01:32:27,840
that it's

01:32:24,880 --> 01:32:27,840
um

01:32:30,560 --> 01:32:34,480
any electron based app yes precisely

01:32:33,600 --> 01:32:37,360
electron

01:32:34,480 --> 01:32:39,520
electron based apps should have support

01:32:37,360 --> 01:32:44,639
for that if the app

01:32:39,520 --> 01:32:44,639
um that dispute on top of it opts

01:32:45,440 --> 01:32:49,360
again to the best of my knowledge um

01:32:50,960 --> 01:32:59,199
so yeah people should be i think um

01:32:54,880 --> 01:33:00,800
for the future we want to use pipe wire

01:32:59,199 --> 01:33:02,800
everywhere so we have portal

01:33:00,800 --> 01:33:03,840
implementations as alex said in the

01:33:02,800 --> 01:33:05,520
previous talk

01:33:03,840 --> 01:33:07,679
we have different port implementations

01:33:05,520 --> 01:33:10,320
so what you saw here was

01:33:07,679 --> 01:33:11,520
gnomes implementation of the portal

01:33:10,320 --> 01:33:16,960
which shows like a

01:33:11,520 --> 01:33:16,960
gtk window asking you to choose stuff

01:33:18,719 --> 01:33:22,719
and then kde also has a port portable

01:33:21,760 --> 01:33:24,480
implementation

01:33:22,719 --> 01:33:25,920
which as to the best of my knowledge

01:33:24,480 --> 01:33:28,080
recently um

01:33:25,920 --> 01:33:29,280
received support for team above sharing

01:33:28,080 --> 01:33:32,880
as well

01:33:29,280 --> 01:33:37,520
so and wl roots

01:33:32,880 --> 01:33:40,080
also have support for these portals

01:33:37,520 --> 01:33:43,199
so i think we're i think we are

01:33:40,080 --> 01:33:46,960
converging to a standard here

01:33:43,199 --> 01:33:51,040
um which is quite fantastic it's and it

01:33:46,960 --> 01:33:53,360
in my experience it works um

01:33:51,040 --> 01:33:55,520
in practice it works better than x11

01:33:53,360 --> 01:33:59,120
shared memories

01:33:55,520 --> 01:33:59,760
um so um there are a few questions here

01:33:59,120 --> 01:34:01,679
in the chat

01:33:59,760 --> 01:34:03,199
does this work with g streamer pi fire

01:34:01,679 --> 01:34:05,440
element it does

01:34:03,199 --> 01:34:07,120
in the past i was using the g streamer

01:34:05,440 --> 01:34:10,400
pi fire element

01:34:07,120 --> 01:34:13,760
but that kind of forced me um

01:34:10,400 --> 01:34:15,760
to download the buffer um to the client

01:34:13,760 --> 01:34:19,040
from pipewire to the client

01:34:15,760 --> 01:34:23,840
um and then i recently reworked the

01:34:19,040 --> 01:34:26,159
obs plugin that i've showcased here

01:34:23,840 --> 01:34:27,840
to use pipe wire directly instead of the

01:34:26,159 --> 01:34:30,880
pipe wire

01:34:27,840 --> 01:34:32,960
geode streamer element

01:34:30,880 --> 01:34:35,040
so that i could create an egl texture

01:34:32,960 --> 01:34:36,719
from from pipe wire directly without

01:34:35,040 --> 01:34:38,320
downloading anything

01:34:36,719 --> 01:34:40,080
and just displaying it and that's why

01:34:38,320 --> 01:34:43,119
it's so fast because there's no

01:34:40,080 --> 01:34:46,800
copy to ram involved

01:34:43,119 --> 01:34:49,520
um there's another question here

01:34:46,800 --> 01:34:51,119
um no that's not a question um as in it

01:34:49,520 --> 01:34:54,480
would need to modify the pipeline to not

01:34:51,119 --> 01:34:54,480
download the buffer by accident

01:34:55,280 --> 01:34:58,639
i'm not sure if it's possible to

01:34:57,760 --> 01:35:01,760
implement

01:34:58,639 --> 01:35:04,239
this with g-stream the pi by rg streamer

01:35:01,760 --> 01:35:05,920
element without downloading the buffer

01:35:04,239 --> 01:35:07,600
i'm honestly not sure i tried in the

01:35:05,920 --> 01:35:09,760
past i couldn't make it work

01:35:07,600 --> 01:35:11,760
so i decided to just not use the

01:35:09,760 --> 01:35:15,280
streamer in the first place and

01:35:11,760 --> 01:35:16,960
um use piper directly

01:35:15,280 --> 01:35:19,360
it's not a big um it's not a big code

01:35:16,960 --> 01:35:21,119
it's less than a thousand lines of code

01:35:19,360 --> 01:35:22,560
most of this plugin is like less than a

01:35:21,119 --> 01:35:24,560
thousand lines of code

01:35:22,560 --> 01:35:27,440
and the pipe wire part of the code is

01:35:24,560 --> 01:35:30,480
less than 500 lines of code so it's not

01:35:27,440 --> 01:35:33,760
that hard um

01:35:30,480 --> 01:35:36,719
so there's that so

01:35:33,760 --> 01:35:39,360
um oh so um other plans that we have for

01:35:36,719 --> 01:35:41,199
mother finish the graffiti transition

01:35:39,360 --> 01:35:42,400
um graphene is basically i'm gonna talk

01:35:41,199 --> 01:35:44,400
in the next slide so

01:35:42,400 --> 01:35:46,080
skip this one retain retain tree

01:35:44,400 --> 01:35:47,760
rendering so instead of immediately

01:35:46,080 --> 01:35:50,960
drawing elements on the screen we

01:35:47,760 --> 01:35:52,880
create a tree of rendering commands

01:35:50,960 --> 01:35:54,800
and issue them afterwards it allows us

01:35:52,880 --> 01:35:56,800
to optimize a few things

01:35:54,800 --> 01:35:58,000
and one thing that i didn't i didn't

01:35:56,800 --> 01:36:00,480
showcase here but i

01:35:58,000 --> 01:36:02,320
could if there's interest in that um is

01:36:00,480 --> 01:36:04,320
profiling

01:36:02,320 --> 01:36:05,600
matter does support being profiled by

01:36:04,320 --> 01:36:09,040
cis proof

01:36:05,600 --> 01:36:12,080
um it has like frame time um

01:36:09,040 --> 01:36:14,000
counters it can count like how much how

01:36:12,080 --> 01:36:15,119
long did it take for a specific frame to

01:36:14,000 --> 01:36:18,159
render

01:36:15,119 --> 01:36:20,320
how much did it take to figure out what

01:36:18,159 --> 01:36:22,560
what's beneath the cursor how much did

01:36:20,320 --> 01:36:24,000
it take to like play out the actors on

01:36:22,560 --> 01:36:26,719
the screen

01:36:24,000 --> 01:36:28,080
etc but we want to have deeper and more

01:36:26,719 --> 01:36:29,679
detailed profiling for the future

01:36:28,080 --> 01:36:32,000
because

01:36:29,679 --> 01:36:33,040
profiling is good profiling is fantastic

01:36:32,000 --> 01:36:36,480
and

01:36:33,040 --> 01:36:37,119
um you know optimizing what what we know

01:36:36,480 --> 01:36:39,920
to be

01:36:37,119 --> 01:36:41,760
slow is is the way forward instead of

01:36:39,920 --> 01:36:44,960
guessing stuff

01:36:41,760 --> 01:36:46,400
um so graphene is basically

01:36:44,960 --> 01:36:48,000
we are transitioning to graphene and

01:36:46,400 --> 01:36:51,440
graphene is a

01:36:48,000 --> 01:36:54,239
library that has graphics

01:36:51,440 --> 01:36:55,520
data types such as like quaternions

01:36:54,239 --> 01:36:58,800
matrices

01:36:55,520 --> 01:37:02,560
4x4 matrices points rectangles

01:36:58,800 --> 01:37:07,360
3d points vectors

01:37:02,560 --> 01:37:09,520
restrooms everything graphics related

01:37:07,360 --> 01:37:11,280
and it has some pretty interesting

01:37:09,520 --> 01:37:13,920
platform optimizations such as

01:37:11,280 --> 01:37:15,440
like vector operations for gcc um arm

01:37:13,920 --> 01:37:18,639
neon

01:37:15,440 --> 01:37:21,360
um sse and

01:37:18,639 --> 01:37:22,560
it's fantastic it's a fantastic library

01:37:21,360 --> 01:37:26,159
but

01:37:22,560 --> 01:37:29,600
being a huge well a massive

01:37:26,159 --> 01:37:33,040
code base it's and and having

01:37:29,600 --> 01:37:36,560
significantly different semantics

01:37:33,040 --> 01:37:38,800
um it's hard to it was it's been hard to

01:37:36,560 --> 01:37:41,199
transition to use graphene completely

01:37:38,800 --> 01:37:42,880
specifically cargo matrix

01:37:41,199 --> 01:37:44,560
and graffiti matrix they have different

01:37:42,880 --> 01:37:47,440
semantics they are laid out

01:37:44,560 --> 01:37:49,199
um one is column first and the other is

01:37:47,440 --> 01:37:51,760
from row first

01:37:49,199 --> 01:37:52,639
and it's kind of hard to work around

01:37:51,760 --> 01:37:56,560
that

01:37:52,639 --> 01:37:56,560
so we help that is appreciated

01:37:56,719 --> 01:38:02,880
and that's all that i had here um

01:38:00,239 --> 01:38:04,560
do you have any other questions i think

01:38:02,880 --> 01:38:07,920
i'm five minutes

01:38:04,560 --> 01:38:09,119
late i guess but um if you have any

01:38:07,920 --> 01:38:11,920
other questions

01:38:09,119 --> 01:38:14,840
or comments or if you're interested in

01:38:11,920 --> 01:38:17,840
knowing more about something do let me

01:38:14,840 --> 01:38:17,840
know

01:38:24,800 --> 01:38:28,560
oh i guess i should also look at the

01:38:28,880 --> 01:38:33,520
telegram no the other one the

01:38:33,679 --> 01:38:36,400
rocket shot

01:38:39,040 --> 01:38:47,360
um well looks like no questions around

01:38:42,840 --> 01:38:50,560
so um

01:38:47,360 --> 01:38:52,320
if anything i'll be around all day in

01:38:50,560 --> 01:38:56,159
chat and here i want to talk about

01:38:52,320 --> 01:38:56,159
something just let me know

01:38:56,560 --> 01:39:03,280
thank you thank you georges

01:38:59,760 --> 01:39:06,639
um looks like we have uh

01:39:03,280 --> 01:39:07,280
some free time here so if you want to

01:39:06,639 --> 01:39:10,080
get

01:39:07,280 --> 01:39:10,800
a cup of coffee or anything else and or

01:39:10,080 --> 01:39:12,800
if you just

01:39:10,800 --> 01:39:14,800
you know want to just ask questions

01:39:12,800 --> 01:39:17,920
anyway i um

01:39:14,800 --> 01:39:20,880
i just will be around uh

01:39:17,920 --> 01:39:21,520
so thanks for your talk super

01:39:20,880 --> 01:39:23,520
interesting

01:39:21,520 --> 01:39:25,280
it was really great to see some of those

01:39:23,520 --> 01:39:26,639
demos and some of the complexity

01:39:25,280 --> 01:39:30,960
involved in

01:39:26,639 --> 01:39:33,520
in mudder it's not generally

01:39:30,960 --> 01:39:36,239
not generally exposed to most people how

01:39:33,520 --> 01:39:40,159
much engineering work goes into

01:39:36,239 --> 01:39:44,480
um just just your desktop right on

01:39:40,159 --> 01:39:44,480
both kdn good home so

01:39:45,040 --> 01:39:55,840
um anytime i'm happy to be here

01:39:48,320 --> 01:39:55,840
thanks folks

01:39:58,000 --> 01:40:01,440
i've made george's slides available for

01:40:00,080 --> 01:40:03,280
download right here if you'd like

01:40:01,440 --> 01:40:04,239
otherwise they've been published on the

01:40:03,280 --> 01:40:08,080
main website

01:40:04,239 --> 01:40:09,760
as well and uh

01:40:08,080 --> 01:40:12,639
i've uploaded the slides for the next

01:40:09,760 --> 01:40:12,639
presenter as well

01:40:12,800 --> 01:40:17,440
thank you guy appreciate it

01:40:16,000 --> 01:40:19,199
how much time do you have before the

01:40:17,440 --> 01:40:19,760
next presentation i haven't looked at

01:40:19,199 --> 01:40:23,119
the

01:40:19,760 --> 01:40:25,119
time slot about 20 minutes 20 minutes

01:40:23,119 --> 01:40:26,400
so i'll put up we're on the break slide

01:40:25,119 --> 01:40:29,119
unless somebody has a question or a

01:40:26,400 --> 01:40:32,400
topic they want to insert here we can uh

01:40:29,119 --> 01:40:37,840
yeah we can let the others know that

01:40:32,400 --> 01:40:37,840
that we're on a break right now

01:41:00,239 --> 01:41:03,840
yeah i think if i'm not mistaken shree i

01:41:02,560 --> 01:41:04,159
think it's the other way around i think

01:41:03,840 --> 01:41:06,000
that

01:41:04,159 --> 01:41:07,840
the plasma presentation was supposed to

01:41:06,000 --> 01:41:08,960
start eight minutes ago not not the

01:41:07,840 --> 01:41:12,080
other way around

01:41:08,960 --> 01:41:12,719
oh oh okay all right then uh you're

01:41:12,080 --> 01:41:15,199
right

01:41:12,719 --> 01:41:19,840
you're you're human is behind thank you

01:41:15,199 --> 01:41:19,840
so much

01:41:27,370 --> 01:41:30,479
[Applause]

01:41:31,040 --> 01:41:34,639
yeah we'll do this we'll make sure

01:41:32,400 --> 01:41:37,920
people are back so

01:41:34,639 --> 01:41:39,600
there are people around to are we ready

01:41:37,920 --> 01:41:40,159
to start i'll just put up a quick poll

01:41:39,600 --> 01:41:44,400
here

01:41:40,159 --> 01:41:44,400
please answer if you're ready to start

01:41:44,480 --> 01:41:49,760
and then we will uh if we have formats

01:41:46,639 --> 01:41:49,760
we have 41 people in

01:41:53,600 --> 01:41:56,880
again for those of you that stepped away

01:41:55,119 --> 01:41:58,560
we're just looking at maybe getting

01:41:56,880 --> 01:42:01,679
started soon again so

01:41:58,560 --> 01:42:05,840
if we get to 50 respondents we will

01:42:01,679 --> 01:42:05,840
uh we'll get started we're almost there

01:42:09,040 --> 01:42:12,480
we have plenty of time on the back end

01:42:10,560 --> 01:42:13,840
anyway so

01:42:12,480 --> 01:42:15,920
well it's the only thing standing

01:42:13,840 --> 01:42:16,480
between that and some people's beer as

01:42:15,920 --> 01:42:18,480
well

01:42:16,480 --> 01:42:20,480
i think we do have some time yes i'm not

01:42:18,480 --> 01:42:21,840
overly worried but we we don't want to

01:42:20,480 --> 01:42:22,159
start without some of the people here

01:42:21,840 --> 01:42:29,840
that

01:42:22,159 --> 01:42:29,840
just assume we're going on a break yeah

01:42:36,719 --> 01:42:40,960
so far 16 people have said they were

01:42:39,280 --> 01:42:42,800
ready for us thank you everybody for

01:42:40,960 --> 01:42:44,480
being queued up and sorry about that

01:42:42,800 --> 01:42:49,040
little time management

01:42:44,480 --> 01:42:50,960
thing 18 now yes

01:42:49,040 --> 01:42:52,639
beverage of choices if your coffee's

01:42:50,960 --> 01:42:55,679
been refilled if your

01:42:52,639 --> 01:42:59,840
green tea black tea white tea

01:42:55,679 --> 01:43:02,880
blue tea or you're already on beer

01:42:59,840 --> 01:43:05,440
or wine something harder already you're

01:43:02,880 --> 01:43:08,239
pretty hardcore

01:43:05,440 --> 01:43:10,000
19 people i said at the halfway point we

01:43:08,239 --> 01:43:11,600
just need a couple more people to

01:43:10,000 --> 01:43:13,280
answer that they're ready and i will

01:43:11,600 --> 01:43:15,199
make you presenter

01:43:13,280 --> 01:43:17,040
bhushan and i will upload the slides for

01:43:15,199 --> 01:43:20,639
you as well and we have them

01:43:17,040 --> 01:43:22,159
according to the poll over 21 of you are

01:43:20,639 --> 01:43:24,880
ready to get started again

01:43:22,159 --> 01:43:25,679
so with your approval stream i will go

01:43:24,880 --> 01:43:29,520
ahead

01:43:25,679 --> 01:43:33,440
and get you started again

01:43:29,520 --> 01:43:33,440
sounds great let's let's do it

01:43:33,840 --> 01:43:37,040
ah as soon as buchanan is he needed his

01:43:36,639 --> 01:43:39,679
uh

01:43:37,040 --> 01:43:40,159
one one minute so as soon as he's yeah

01:43:39,679 --> 01:43:42,560
ready

01:43:40,159 --> 01:43:44,400
there we go he is queued up so we'll be

01:43:42,560 --> 01:43:45,760
ready to get started

01:43:44,400 --> 01:43:47,679
as soon as he wants thank you again

01:43:45,760 --> 01:43:48,480
thomas if he wasn't for you i would not

01:43:47,679 --> 01:43:52,400
have said anything

01:43:48,480 --> 01:43:55,280
so you are the you are the moderator

01:43:52,400 --> 01:43:55,280
the real one here

01:43:57,679 --> 01:44:02,080
blue tea is a variation of tea that

01:44:00,560 --> 01:44:05,520
basically sits between

01:44:02,080 --> 01:44:06,719
the white and the green tea preparations

01:44:05,520 --> 01:44:08,800
it's fairly rare

01:44:06,719 --> 01:44:10,800
but if you look it up it's actually a

01:44:08,800 --> 01:44:16,239
pure tea leaf based

01:44:10,800 --> 01:44:16,239
tea preparation that is quite unique

01:44:18,159 --> 01:44:21,840
jason welcome back sorry about that

01:44:23,040 --> 01:44:35,840
make it i'm here for that

01:44:36,719 --> 01:44:40,560
hey we can see you and we see you're

01:44:38,719 --> 01:44:43,440
muted on the platform

01:44:40,560 --> 01:44:44,639
that is one efficient chair you have i

01:44:43,440 --> 01:44:48,159
will mute myself and

01:44:44,639 --> 01:44:53,760
over to you

01:44:48,159 --> 01:44:53,760
so hi i am can i start actually or

01:44:54,719 --> 01:44:57,679
yeah i think you can go ahead i think a

01:44:56,159 --> 01:44:59,760
few more people said they were back so

01:44:57,679 --> 01:45:02,960
you have over 25 people here ready for

01:44:59,760 --> 01:45:06,159
you to present you you're a little bit

01:45:02,960 --> 01:45:06,159
quiet there push-on

01:45:08,480 --> 01:45:20,960
okay yes that's much better thank you

01:45:16,880 --> 01:45:31,840
okay so uh hi i'm tushar

01:45:20,960 --> 01:45:31,840
so first of all like

01:45:32,159 --> 01:45:38,400
okay um so first of all

01:45:35,520 --> 01:45:38,880
a little bit of introduction about me so

01:45:38,400 --> 01:45:42,800
i'm

01:45:38,880 --> 01:45:45,920
kidding developer and also

01:45:42,800 --> 01:45:50,159
uh one of the volunteers is happening

01:45:45,920 --> 01:45:53,199
and uh as part of likely development

01:45:50,159 --> 01:45:56,719
i've worked on plasma mobile as a

01:45:53,199 --> 01:45:59,679
maintainer and a developer

01:45:56,719 --> 01:46:01,199
and i am currently employed by the

01:45:59,679 --> 01:46:05,920
system cmph

01:46:01,199 --> 01:46:05,920
and i'm from india

01:46:06,719 --> 01:46:13,040
and so um

01:46:10,400 --> 01:46:14,960
i had this slide slightly mixed up so

01:46:13,040 --> 01:46:18,400
slide 3 was supposed to be

01:46:14,960 --> 01:46:18,880
this but yeah uh so what i want to talk

01:46:18,400 --> 01:46:22,400
about

01:46:18,880 --> 01:46:27,280
is like how we developed the

01:46:22,400 --> 01:46:30,800
plasma mobile initially and

01:46:27,280 --> 01:46:34,080
how it changed for like like next

01:46:30,800 --> 01:46:37,280
current five years and some of the

01:46:34,080 --> 01:46:41,840
super basic architecture details

01:46:37,280 --> 01:46:45,679
and what advantage is close by brings

01:46:41,840 --> 01:46:46,800
to any community um our application

01:46:45,679 --> 01:46:50,880
ecosystem and

01:46:46,800 --> 01:46:52,400
development and like what is the future

01:46:50,880 --> 01:46:54,000
fall past mobile project

01:46:52,400 --> 01:46:56,080
and what are the challenges we are

01:46:54,000 --> 01:46:59,360
facing where

01:46:56,080 --> 01:47:03,360
like linux plumbers people can

01:46:59,360 --> 01:47:03,360
help or guide us

01:47:04,560 --> 01:47:11,119
so a quick introduction about

01:47:08,000 --> 01:47:13,280
kd if you don't know it already so

01:47:11,119 --> 01:47:15,280
previously kitty was known that's like a

01:47:13,280 --> 01:47:18,880
desktop environment

01:47:15,280 --> 01:47:22,719
um it was like one of the

01:47:18,880 --> 01:47:25,760
desktop environment like genome and

01:47:22,719 --> 01:47:28,320
but over the time we realized that we

01:47:25,760 --> 01:47:28,960
are no longer into just a desktop

01:47:28,320 --> 01:47:31,760
environment

01:47:28,960 --> 01:47:33,440
and we are now like working on almost

01:47:31,760 --> 01:47:36,560
everything

01:47:33,440 --> 01:47:39,440
so we essentially just

01:47:36,560 --> 01:47:41,360
got rid of the whole full form and now

01:47:39,440 --> 01:47:43,360
the community

01:47:41,360 --> 01:47:45,840
creates the freeze and open source

01:47:43,360 --> 01:47:48,560
software

01:47:45,840 --> 01:47:49,199
uh so we have several products including

01:47:48,560 --> 01:47:53,040
plasma

01:47:49,199 --> 01:47:54,000
plasma is like a pre-named motion of ktx

01:47:53,040 --> 01:47:57,040
top environment

01:47:54,000 --> 01:47:58,480
uh frameworks like set of reusable

01:47:57,040 --> 01:48:01,840
libraries

01:47:58,480 --> 01:48:05,360
and steady applications those are like

01:48:01,840 --> 01:48:08,400
from simple car games to super complex

01:48:05,360 --> 01:48:10,960
video editor kidding live or

01:48:08,400 --> 01:48:11,520
painting application like krita so we

01:48:10,960 --> 01:48:16,800
have like

01:48:11,520 --> 01:48:16,800
almost wide range of applications

01:48:16,840 --> 01:48:19,840
available

01:48:23,280 --> 01:48:27,199
yeah so coming back to plasma profile

01:48:26,560 --> 01:48:31,840
project

01:48:27,199 --> 01:48:35,199
it was announced in july 2015

01:48:31,840 --> 01:48:38,880
and one of our annual

01:48:35,199 --> 01:48:42,320
conference meeting academy

01:48:38,880 --> 01:48:46,239
which by the way is happening in on 4th

01:48:42,320 --> 01:48:49,360
september this year also virtually

01:48:46,239 --> 01:48:52,480
so um

01:48:49,360 --> 01:48:55,360
main reason for uh plus mobile project

01:48:52,480 --> 01:48:56,719
was to provide a completely free and

01:48:55,360 --> 01:48:59,199
open source mobile

01:48:56,719 --> 01:49:00,480
platform which respects this price in

01:48:59,199 --> 01:49:04,000
freedom

01:49:00,480 --> 01:49:05,199
uh i mean um it's kind of slightly

01:49:04,000 --> 01:49:08,719
awkward

01:49:05,199 --> 01:49:11,920
but there is a totally uh android

01:49:08,719 --> 01:49:15,199
uh track in this conference and

01:49:11,920 --> 01:49:15,920
i'm presenting on one of the alternate

01:49:15,199 --> 01:49:19,040
uh

01:49:15,920 --> 01:49:22,320
mobile system but

01:49:19,040 --> 01:49:25,520
um yeah the idea behind that was

01:49:22,320 --> 01:49:29,119
we will not have any kind of uh

01:49:25,520 --> 01:49:32,239
records splitting in software or

01:49:29,119 --> 01:49:32,719
actively will try to provide privacy and

01:49:32,239 --> 01:49:37,679
freedom

01:49:32,719 --> 01:49:42,880
to user uh our initial prototype was

01:49:37,679 --> 01:49:45,440
based on hd nexus file widely known as

01:49:42,880 --> 01:49:45,440
samurai

01:49:46,639 --> 01:49:51,520
somehow slides are taking foreign or

01:49:49,199 --> 01:49:51,520
something

01:49:52,880 --> 01:49:58,320
yeah so you can see this uh how plus

01:49:56,239 --> 01:50:01,440
mobile looks right now

01:49:58,320 --> 01:50:03,520
um it's uh you can

01:50:01,440 --> 01:50:05,280
actually visit the website and see some

01:50:03,520 --> 01:50:11,840
screenshots there but

01:50:05,280 --> 01:50:11,840
these are just very good

01:50:12,320 --> 01:50:19,679
yeah so for initially uh we

01:50:15,599 --> 01:50:22,080
used lg nexus 5 as reference device

01:50:19,679 --> 01:50:23,520
uh one of the main reason for selecting

01:50:22,080 --> 01:50:27,040
this device was

01:50:23,520 --> 01:50:30,639
back in 2015 it was supported by

01:50:27,040 --> 01:50:33,840
most of the alternate compile systems

01:50:30,639 --> 01:50:38,080
like shellfish os or ubuntu charge

01:50:33,840 --> 01:50:39,600
or even like any os and it was

01:50:38,080 --> 01:50:41,280
extremely easy to

01:50:39,600 --> 01:50:44,080
[Music]

01:50:41,280 --> 01:50:46,159
like unlock this device you just type

01:50:44,080 --> 01:50:48,000
three or four commands and

01:50:46,159 --> 01:50:49,199
you don't have to get any kind of key

01:50:48,000 --> 01:50:51,520
from a vendor

01:50:49,199 --> 01:50:52,320
or anything like that in general it was

01:50:51,520 --> 01:50:56,400
like super

01:50:52,320 --> 01:50:59,920
hacker friendly um

01:50:56,400 --> 01:51:03,360
we went using ubuntu 15.44

01:50:59,920 --> 01:51:06,639
as a base system it was like five

01:51:03,360 --> 01:51:06,960
year thing because like we were taking

01:51:06,639 --> 01:51:09,920
up

01:51:06,960 --> 01:51:10,719
coupon to touch system and like removing

01:51:09,920 --> 01:51:14,800
all of that

01:51:10,719 --> 01:51:18,840
interface part and adding

01:51:14,800 --> 01:51:22,320
adding our our software

01:51:18,840 --> 01:51:26,560
so i mean uh since it was a prototype

01:51:22,320 --> 01:51:30,080
it was mostly uh not very well

01:51:26,560 --> 01:51:33,360
architectured i should say uh

01:51:30,080 --> 01:51:36,239
and one of the major point was

01:51:33,360 --> 01:51:36,960
like it was making use of android panel

01:51:36,239 --> 01:51:41,599
blobs and

01:51:36,960 --> 01:51:45,119
drivers um the main reason for this

01:51:41,599 --> 01:51:49,360
was like at that time that were no

01:51:45,119 --> 01:51:52,800
alternatives available or

01:51:49,360 --> 01:51:56,080
more like there are no options available

01:51:52,800 --> 01:51:59,920
than like using uh

01:51:56,080 --> 01:52:03,760
proprietary quantity blocks

01:51:59,920 --> 01:52:06,800
um but uh one of the

01:52:03,760 --> 01:52:07,520
nice things was that we were also able

01:52:06,800 --> 01:52:09,520
to run

01:52:07,520 --> 01:52:11,920
the whole thing on your desktop or

01:52:09,520 --> 01:52:17,119
laptop system so

01:52:11,920 --> 01:52:20,239
you can essentially just

01:52:17,119 --> 01:52:24,880
um so i see a question in the

01:52:20,239 --> 01:52:27,280
paper uh check down

01:52:24,880 --> 01:52:28,880
from the crease uh just this project is

01:52:27,280 --> 01:52:32,719
like device to use

01:52:28,880 --> 01:52:36,320
android binary cards so

01:52:32,719 --> 01:52:37,760
initially yes but

01:52:36,320 --> 01:52:39,440
this is not one of the heart

01:52:37,760 --> 01:52:41,599
dependencies i mean like

01:52:39,440 --> 01:52:46,159
i will come back to this topic in one of

01:52:41,599 --> 01:52:46,159
the next slides um

01:52:46,639 --> 01:52:52,400
so um yes i mean like initially we were

01:52:50,159 --> 01:52:56,480
using this binary block so we are

01:52:52,400 --> 01:53:00,320
actually making use of the fibers and

01:52:56,480 --> 01:53:03,440
so since like those drivers were in

01:53:00,320 --> 01:53:06,800
based on the pirate lipsy

01:53:03,440 --> 01:53:10,560
and so we actually do sleep at this

01:53:06,800 --> 01:53:13,599
uh but over the years the situation

01:53:10,560 --> 01:53:16,960
changed in a device market

01:53:13,599 --> 01:53:26,239
or and

01:53:16,960 --> 01:53:30,800
some situations change

01:53:26,239 --> 01:53:34,239
yeah so uh basic architecture details

01:53:30,800 --> 01:53:37,440
was like we are using queen variant as

01:53:34,239 --> 01:53:40,639
compositor trm

01:53:37,440 --> 01:53:43,760
or gpm we can use the

01:53:40,639 --> 01:53:45,679
tr and again of the queen variant on the

01:53:43,760 --> 01:53:49,760
supported devices

01:53:45,679 --> 01:53:52,159
or for example hw composer packets

01:53:49,760 --> 01:53:52,159
second

01:53:52,800 --> 01:53:56,159
so hw composer back and actually uses

01:53:55,040 --> 01:53:59,360
the leap hybris

01:53:56,159 --> 01:54:02,960
to communicate with

01:53:59,360 --> 01:54:02,960
the android phones

01:54:03,119 --> 01:54:07,280
we have this plasma shell

01:54:07,360 --> 01:54:15,679
which is basically a user interface

01:54:11,520 --> 01:54:19,440
loader or main user interface part

01:54:15,679 --> 01:54:19,440
and it can load various

01:54:21,520 --> 01:54:29,760
it can also run the profile

01:54:25,599 --> 01:54:32,000
uh if you can't run the mobile

01:54:29,760 --> 01:54:32,880
it does have like very sharp packages

01:54:32,000 --> 01:54:36,320
you can

01:54:32,880 --> 01:54:38,320
replace your background with so we have

01:54:36,320 --> 01:54:39,040
this mobile scan package which just gets

01:54:38,320 --> 01:54:41,440
you

01:54:39,040 --> 01:54:41,440
in the

01:54:42,080 --> 01:54:45,840
so there is also cryptic controls and

01:54:45,040 --> 01:54:51,520
k-army

01:54:45,840 --> 01:54:54,560
for application development use um

01:54:51,520 --> 01:54:58,880
so coming back to architecture

01:54:54,560 --> 01:55:02,000
uh this hypothesis is not part of

01:54:58,880 --> 01:55:05,760
uh slide i just said

01:55:02,000 --> 01:55:08,719
message in chat about the post marketo

01:55:05,760 --> 01:55:09,440
is support for lg hammerhead nexus 5 is

01:55:08,719 --> 01:55:13,440
excellent

01:55:09,440 --> 01:55:17,199
and runs plus mobile on top of me

01:55:13,440 --> 01:55:20,800
so yeah so he initially started with

01:55:17,199 --> 01:55:24,080
android financing flops at that time

01:55:20,800 --> 01:55:29,119
uh i don't think like back in 2015

01:55:24,080 --> 01:55:29,119
msn 8974 based

01:55:29,520 --> 01:55:32,960
like nexus 5 was not supported in the

01:55:32,320 --> 01:55:36,159
main line

01:55:32,960 --> 01:55:39,679
but at later point i actually

01:55:36,159 --> 01:55:43,440
supported really initial dts

01:55:39,679 --> 01:55:43,440
to have it like uh

01:55:45,280 --> 01:55:49,520
like i supported like really initially

01:55:47,360 --> 01:55:52,800
deals with uh just music uh

01:55:49,520 --> 01:55:56,000
where it supported basically qrt and

01:55:52,800 --> 01:56:00,000
uh then after that someone took over

01:55:56,000 --> 01:56:01,679
of work and uh now nexus 5 is like come

01:56:00,000 --> 01:56:04,800
from the really nice

01:56:01,679 --> 01:56:08,080
device which supports me like

01:56:04,800 --> 01:56:10,960
and uh you can download

01:56:08,080 --> 01:56:12,880
a new color like 5.4 compared to

01:56:10,960 --> 01:56:15,840
previous

01:56:12,880 --> 01:56:15,840
3.4

01:56:16,080 --> 01:56:23,280
um so uh

01:56:19,199 --> 01:56:26,320
one might think like uh why

01:56:23,280 --> 01:56:30,480
uh one of the desktop giants decided to

01:56:26,320 --> 01:56:32,320
jump into this mobile port and

01:56:30,480 --> 01:56:34,320
what advantage is we were looking

01:56:32,320 --> 01:56:37,599
forward to

01:56:34,320 --> 01:56:41,360
so uh one thing which we

01:56:37,599 --> 01:56:43,679
got uh from this whole tasmania project

01:56:41,360 --> 01:56:44,719
was the devices which we wanted to

01:56:43,679 --> 01:56:47,840
support for

01:56:44,719 --> 01:56:49,599
their slightly resource contained

01:56:47,840 --> 01:56:53,280
because

01:56:49,599 --> 01:56:55,199
i mean like it probably had powerful cpu

01:56:53,280 --> 01:56:58,239
but

01:56:55,199 --> 01:57:01,679
that's a powerful cpu as your desktop or

01:56:58,239 --> 01:57:06,400
laptop and so we needed to make

01:57:01,679 --> 01:57:07,199
uh our whole of our users with software

01:57:06,400 --> 01:57:10,000
much more

01:57:07,199 --> 01:57:12,159
performant and like to various

01:57:10,000 --> 01:57:15,199
performance improvements in

01:57:12,159 --> 01:57:18,480
many parts like shared loading or like

01:57:15,199 --> 01:57:22,080
loading from the slow emmc

01:57:18,480 --> 01:57:25,840
or something like that um

01:57:22,080 --> 01:57:29,040
we also as part of uh plasma by project

01:57:25,840 --> 01:57:31,199
uh we also got uh better

01:57:29,040 --> 01:57:32,639
touch input supporting applications and

01:57:31,199 --> 01:57:35,599
cell

01:57:32,639 --> 01:57:36,840
uh also since like we were using

01:57:35,599 --> 01:57:39,840
compositor

01:57:36,840 --> 01:57:39,840
uh

01:57:42,480 --> 01:57:48,480
support like proper input method or

01:57:46,400 --> 01:57:52,480
proper virtual keyboard support

01:57:48,480 --> 01:57:55,280
or uh like uh

01:57:52,480 --> 01:57:56,560
i mean depending on the requirements of

01:57:55,280 --> 01:57:58,719
plasma profile

01:57:56,560 --> 01:58:00,800
there are multiple pages landed in our

01:57:58,719 --> 01:58:03,920
compositor

01:58:00,800 --> 01:58:03,920
uh also

01:58:04,840 --> 01:58:09,840
um uh follow us ask question

01:58:07,520 --> 01:58:12,639
in chat like did some of those

01:58:09,840 --> 01:58:16,560
improvements go back to kitty and wait

01:58:12,639 --> 01:58:20,719
uh so yes they did go back into kitty

01:58:16,560 --> 01:58:23,520
and plasma so uh so the

01:58:20,719 --> 01:58:23,920
uh idea behind plasma quiet project is

01:58:23,520 --> 01:58:26,320
like

01:58:23,920 --> 01:58:28,400
we are using ninety percentage of same

01:58:26,320 --> 01:58:31,280
stack as the desktop

01:58:28,400 --> 01:58:32,239
uh it's just a slightly different user

01:58:31,280 --> 01:58:35,840
interface

01:58:32,239 --> 01:58:37,840
uh where like you want to

01:58:35,840 --> 01:58:38,880
use it in your hand instead of like

01:58:37,840 --> 01:58:41,360
using with

01:58:38,880 --> 01:58:42,239
keyboard so that is just slight

01:58:41,360 --> 01:58:44,239
difference on this

01:58:42,239 --> 01:58:46,480
interface otherwise most of the back end

01:58:44,239 --> 01:58:50,159
parts are like

01:58:46,480 --> 01:58:52,239
almost nine to 95 percent it's the same

01:58:50,159 --> 01:58:54,960
so if you improve something for plasma

01:58:52,239 --> 01:59:03,840
while it ultimately also benefits the

01:58:54,960 --> 01:59:06,000
desktop um and failing section

01:59:03,840 --> 01:59:08,080
i don't know why my slides are kind of

01:59:06,000 --> 01:59:12,400
floating super slow if it's just

01:59:08,080 --> 01:59:16,560
the graphics or something um

01:59:12,400 --> 01:59:18,639
so uh as i mentioned like previously we

01:59:16,560 --> 01:59:22,639
are using like the trick controls2

01:59:18,639 --> 01:59:26,639
and kirigami as the toolkit and

01:59:22,639 --> 01:59:26,639
symmetry is right

01:59:27,119 --> 01:59:34,480
choice of the preferred build system for

01:59:30,639 --> 01:59:37,520
like if you develop app use cmake or

01:59:34,480 --> 01:59:39,679
you make uh

01:59:37,520 --> 01:59:41,040
it is like recommended but like no one

01:59:39,679 --> 01:59:45,599
is talking to you to

01:59:41,040 --> 01:59:50,639
use make file or meson or anything

01:59:45,599 --> 01:59:53,679
and we are supporting like almost

01:59:50,639 --> 01:59:55,920
all bundle formats mostly because

01:59:53,679 --> 01:59:57,760
those bundle formats can be done very

01:59:55,920 --> 02:00:00,239
simply on desktop anyway

01:59:57,760 --> 02:00:03,280
so if you don't really have any kind of

02:00:00,239 --> 02:00:06,560
restriction on what you can run you can

02:00:03,280 --> 02:00:09,599
run something of

02:00:06,560 --> 02:00:12,400
snap or flat pack or ad image

02:00:09,599 --> 02:00:13,840
or even out of docker or basically the

02:00:12,400 --> 02:00:17,199
smoke wild

02:00:13,840 --> 02:00:18,880
and you can also like use negative

02:00:17,199 --> 02:00:21,760
distribution packaging

02:00:18,880 --> 02:00:24,400
for the distribution of your

02:00:21,760 --> 02:00:24,400
applications

02:00:24,840 --> 02:00:27,840
um

02:00:29,520 --> 02:00:35,920
yeah so uh as i mentioned

02:00:32,800 --> 02:00:38,239
uh like back in 2015 the situation

02:00:35,920 --> 02:00:38,239
i was

02:00:39,119 --> 02:00:45,679
totally um compared to what i said today

02:00:42,560 --> 02:00:49,360
and i'd say future forecast looks

02:00:45,679 --> 02:00:51,119
brighter than ever uh various phone

02:00:49,360 --> 02:00:54,560
vendors are mainlining that

02:00:51,119 --> 02:00:58,719
corner trees like various

02:00:54,560 --> 02:01:03,119
android vendor extenders who sell and

02:00:58,719 --> 02:01:06,560
devices are putting their kernel patches

02:01:03,119 --> 02:01:08,719
for inclusion in the mainline kernel

02:01:06,560 --> 02:01:10,480
there are active mainlining efforts

02:01:08,719 --> 02:01:11,760
supported by those companies

02:01:10,480 --> 02:01:14,320
[Music]

02:01:11,760 --> 02:01:14,880
uh some of the phone vendors are

02:01:14,320 --> 02:01:18,480
creating

02:01:14,880 --> 02:01:19,679
new files which runs on totally open

02:01:18,480 --> 02:01:22,080
drivers like

02:01:19,679 --> 02:01:23,679
fearsome direct file which is placed on

02:01:22,080 --> 02:01:27,199
ios 8

02:01:23,679 --> 02:01:30,719
and uh my phone which is based on

02:01:27,199 --> 02:01:30,719
elementor a64

02:01:31,280 --> 02:01:37,920
so in general uh

02:01:34,560 --> 02:01:42,000
phone vendors are working

02:01:37,920 --> 02:01:45,199
on uh working on getting

02:01:42,000 --> 02:01:47,599
more open devices into the market

02:01:45,199 --> 02:01:49,520
and i think that's a very good sign for

02:01:47,599 --> 02:01:52,880
projects like plasma mobile

02:01:49,520 --> 02:01:56,239
or let's say when you touch or

02:01:52,880 --> 02:01:59,440
tourism uh

02:01:56,239 --> 02:02:02,800
so also combinating is

02:01:59,440 --> 02:02:06,239
like mainlining of the shaft devices

02:02:02,800 --> 02:02:09,599
like as you as in the chat

02:02:06,239 --> 02:02:12,400
we heard about nexus 5 like nexus 5 was

02:02:09,599 --> 02:02:15,599
one of the off-the-shelf device but

02:02:12,400 --> 02:02:18,800
at some point community decided like hey

02:02:15,599 --> 02:02:20,719
since like msm 8974 is like very hell

02:02:18,800 --> 02:02:23,760
supported in country why not

02:02:20,719 --> 02:02:26,800
why don't we support the nexus smart so

02:02:23,760 --> 02:02:30,239
right now like uh with

02:02:26,800 --> 02:02:33,360
like almost 20 patches

02:02:30,239 --> 02:02:36,239
you can run basically fully mainline

02:02:33,360 --> 02:02:38,880
kernel or nexus 5

02:02:36,239 --> 02:02:39,920
and you need to like apply 20 or 30

02:02:38,880 --> 02:02:42,159
patches

02:02:39,920 --> 02:02:43,280
in on top of it which are not mainline

02:02:42,159 --> 02:02:45,520
or kind of

02:02:43,280 --> 02:02:48,000
they are maybe like hack also cannot be

02:02:45,520 --> 02:02:48,000
mainline

02:02:49,920 --> 02:02:56,400
so yes in general i'd say

02:02:53,599 --> 02:02:57,199
device vendors and this whole community

02:02:56,400 --> 02:03:02,400
environment

02:02:57,199 --> 02:03:02,400
is helpful for plasma file and projects

02:03:04,719 --> 02:03:12,639
and um so from the software side

02:03:09,920 --> 02:03:13,599
there are some challenges and work areas

02:03:12,639 --> 02:03:16,960
where we need

02:03:13,599 --> 02:03:20,800
we are struggling and

02:03:16,960 --> 02:03:22,239
although exactly there are some areas

02:03:20,800 --> 02:03:24,080
where we are struggling and there are

02:03:22,239 --> 02:03:27,520
some areas where we can

02:03:24,080 --> 02:03:31,840
improve a little bit and

02:03:27,520 --> 02:03:35,280
see how we can get something better

02:03:31,840 --> 02:03:38,800
so just unlike application life cycle

02:03:35,280 --> 02:03:43,199
um hardware and development and bring up

02:03:38,800 --> 02:03:48,000
and also like power management

02:03:43,199 --> 02:03:50,719
so uh

02:03:48,000 --> 02:03:52,480
so that in terms of application

02:03:50,719 --> 02:03:55,599
lifecycle i'm not talking about

02:03:52,480 --> 02:03:58,800
development lifecycle but more of like

02:03:55,599 --> 02:04:01,920
what does this uh

02:03:58,800 --> 02:04:05,040
application do after it is started on

02:04:01,920 --> 02:04:07,679
your mobile devices so as i previously

02:04:05,040 --> 02:04:10,880
mentioned the mobile devices are like

02:04:07,679 --> 02:04:13,920
limited resource devices like right now

02:04:10,880 --> 02:04:14,719
you can get like devices with like six

02:04:13,920 --> 02:04:17,920
or eight

02:04:14,719 --> 02:04:21,679
it calls but still they are

02:04:17,920 --> 02:04:25,280
much much limited resource wise

02:04:21,679 --> 02:04:28,639
and also like you don't really have uh

02:04:25,280 --> 02:04:32,960
you don't really want to have

02:04:28,639 --> 02:04:33,920
um applications which use like full

02:04:32,960 --> 02:04:37,360
resources

02:04:33,920 --> 02:04:40,000
and uh impaired basic services

02:04:37,360 --> 02:04:41,679
like call services or some something

02:04:40,000 --> 02:04:44,719
like that

02:04:41,679 --> 02:04:47,840
um so you want to

02:04:44,719 --> 02:04:51,199
prevent application from

02:04:47,840 --> 02:04:54,159
consuming the accessible resources or

02:04:51,199 --> 02:04:54,560
you want to basically give more priority

02:04:54,159 --> 02:04:56,400
to

02:04:54,560 --> 02:04:58,159
like application which user is

02:04:56,400 --> 02:05:00,560
interacting with

02:04:58,159 --> 02:05:02,320
or like if you have some application

02:05:00,560 --> 02:05:03,840
which is running in background doing

02:05:02,320 --> 02:05:06,560
literally nothing

02:05:03,840 --> 02:05:08,960
and like user started it like three days

02:05:06,560 --> 02:05:11,040
ago and haven't interacted with it

02:05:08,960 --> 02:05:12,079
you want to like kill this unused

02:05:11,040 --> 02:05:15,040
application

02:05:12,079 --> 02:05:16,560
and free up the resources for other

02:05:15,040 --> 02:05:19,520
applications

02:05:16,560 --> 02:05:19,520
users might be

02:05:19,599 --> 02:05:23,440
using so one of the solutions which we

02:05:22,960 --> 02:05:27,280
have

02:05:23,440 --> 02:05:30,639
worked on is like putting

02:05:27,280 --> 02:05:34,560
the application in the various groups

02:05:30,639 --> 02:05:42,089
uh there was also talk from benjamin

02:05:34,560 --> 02:05:42,089
[Music]

02:05:43,040 --> 02:05:47,599
so what we are doing is that we are

02:05:45,360 --> 02:05:51,360
putting our

02:05:47,599 --> 02:05:54,320
shell and our system services

02:05:51,360 --> 02:05:55,920
and application in the specific c groups

02:05:54,320 --> 02:05:59,199
which

02:05:55,920 --> 02:06:01,679
then we can control like we can

02:05:59,199 --> 02:06:03,599
always provide slightly better priority

02:06:01,679 --> 02:06:06,719
to shell

02:06:03,599 --> 02:06:09,280
because you want this

02:06:06,719 --> 02:06:10,719
interaction to be as smooth as possible

02:06:09,280 --> 02:06:13,040
and

02:06:10,719 --> 02:06:15,199
then provided priority to application

02:06:13,040 --> 02:06:18,079
running in the front

02:06:15,199 --> 02:06:19,760
so at this point this is more like a

02:06:18,079 --> 02:06:22,560
theoretical

02:06:19,760 --> 02:06:22,960
um i mean like all the infrastructure is

02:06:22,560 --> 02:06:25,920
there

02:06:22,960 --> 02:06:26,320
but we have not like indicated it fully

02:06:25,920 --> 02:06:30,079
for

02:06:26,320 --> 02:06:33,599
us but this is something we want to

02:06:30,079 --> 02:06:33,599
work on in the future

02:06:38,639 --> 02:06:44,800
and there is a

02:06:42,400 --> 02:06:44,800
challenge

02:06:49,280 --> 02:06:56,960
devices where we can possibly run

02:06:52,880 --> 02:07:00,400
plasma mobile is based on android so

02:06:56,960 --> 02:07:03,599
run like traditional gnu linux system

02:07:00,400 --> 02:07:07,920
or well not android system

02:07:03,599 --> 02:07:09,679
because uh yeah it's not android system

02:07:07,920 --> 02:07:12,159
if you want to run on those off the

02:07:09,679 --> 02:07:15,060
shelf devices you need to

02:07:12,159 --> 02:07:16,159
deal with some challenges like uh

02:07:15,060 --> 02:07:18,880
[Music]

02:07:16,159 --> 02:07:20,079
this devices might work better with

02:07:18,880 --> 02:07:27,840
binary triggers

02:07:20,079 --> 02:07:27,840
or proprietary hardware abstraction here

02:07:29,440 --> 02:07:36,639
um so uh

02:07:32,480 --> 02:07:39,280
i get a question from the chat

02:07:36,639 --> 02:07:39,760
so kill unused applications running into

02:07:39,280 --> 02:07:42,560
does

02:07:39,760 --> 02:07:43,119
marketplaces support for application as

02:07:42,560 --> 02:07:46,480
in

02:07:43,119 --> 02:07:48,480
apps are able to save or quit and

02:07:46,480 --> 02:07:49,679
restore on launch without having to

02:07:48,480 --> 02:07:53,119
implement everything

02:07:49,679 --> 02:07:56,159
manually so i

02:07:53,119 --> 02:07:58,719
as far as i know um

02:07:56,159 --> 02:07:59,920
i mean like there's a session management

02:07:58,719 --> 02:08:03,119
thing

02:07:59,920 --> 02:08:06,159
uh but this is like a different topic

02:08:03,119 --> 02:08:09,599
uh so i say

02:08:06,159 --> 02:08:10,480
i don't really have much i don't really

02:08:09,599 --> 02:08:14,079
have

02:08:10,480 --> 02:08:14,560
information about this but i'm 80

02:08:14,079 --> 02:08:18,239
percent

02:08:14,560 --> 02:08:21,360
sure that answer is no we don't actually

02:08:18,239 --> 02:08:22,480
have support for this and we probably

02:08:21,360 --> 02:08:25,040
need to

02:08:22,480 --> 02:08:27,920
implement support for this to have this

02:08:25,040 --> 02:08:27,920
functionality

02:08:34,840 --> 02:08:37,840
um

02:08:41,599 --> 02:08:48,000
okay so uh like as i've shared

02:08:46,000 --> 02:08:49,280
on the off the shelf devices you have

02:08:48,000 --> 02:08:52,239
connected drivers and

02:08:49,280 --> 02:08:54,000
hardware abstraction layers from the

02:08:52,239 --> 02:08:57,440
android

02:08:54,000 --> 02:08:57,440
so you generally

02:08:58,480 --> 02:09:05,840
you generally cannot easily

02:09:02,400 --> 02:09:07,760
have full functionality looking like uh

02:09:05,840 --> 02:09:09,040
some devices might have like candida

02:09:07,760 --> 02:09:11,440
functionality talk to

02:09:09,040 --> 02:09:12,639
android binary drivers and things like

02:09:11,440 --> 02:09:16,800
that

02:09:12,639 --> 02:09:18,800
um also for phone of course you need to

02:09:16,800 --> 02:09:24,320
like have a calling functionality

02:09:18,800 --> 02:09:29,440
or sms or yeah so for that unique model

02:09:24,320 --> 02:09:29,440
and on the like newer devices

02:09:30,840 --> 02:09:33,840
foreign

02:09:34,000 --> 02:09:41,280
that is like most of the time you need

02:09:37,760 --> 02:09:45,679
the proprietary real

02:09:41,280 --> 02:09:49,840
in rio implementation to be able to

02:09:45,679 --> 02:09:52,480
talk with the modern uh

02:09:49,840 --> 02:09:53,199
to be able to talk with the modern uh

02:09:52,480 --> 02:09:56,800
someone

02:09:53,199 --> 02:10:00,960
support the qmi interface so

02:09:56,800 --> 02:10:05,920
you can use the kobe driver and

02:10:00,960 --> 02:10:10,239
like uh i have cars and etc working

02:10:05,920 --> 02:10:14,239
but it's still kind of uh area where

02:10:10,239 --> 02:10:18,000
it's not that yet and it would be nice

02:10:14,239 --> 02:10:20,880
and it would be lovely if um

02:10:18,000 --> 02:10:23,760
this is the area where we can improve

02:10:20,880 --> 02:10:23,760
the most i guess

02:10:23,920 --> 02:10:30,000
also the downstream colors

02:10:27,520 --> 02:10:32,159
i doubt that there are new devices in

02:10:30,000 --> 02:10:35,360
the market which is a super

02:10:32,159 --> 02:10:38,800
old version of the downstream color

02:10:35,360 --> 02:10:38,800
but still they are like

02:10:39,520 --> 02:10:46,560
multiple sometimes years

02:10:42,880 --> 02:10:49,280
like one or two years behind

02:10:46,560 --> 02:10:50,320
what is the current version and so you

02:10:49,280 --> 02:10:53,440
cannot

02:10:50,320 --> 02:10:56,560
easily make use of the

02:10:53,440 --> 02:10:58,800
newer kernel features or

02:10:56,560 --> 02:11:00,320
things like that i mean like when we

02:10:58,800 --> 02:11:02,719
started

02:11:00,320 --> 02:11:04,480
working with the nexus 5 it did support

02:11:02,719 --> 02:11:07,040
only 3.4 kernel

02:11:04,480 --> 02:11:09,280
and that turtle it was like end of the

02:11:07,040 --> 02:11:09,280
life

02:11:09,440 --> 02:11:12,480
if i remember correctly at least it was

02:11:11,440 --> 02:11:14,800
end of the life

02:11:12,480 --> 02:11:15,679
already when we started working on it

02:11:14,800 --> 02:11:18,400
but

02:11:15,679 --> 02:11:19,440
yeah we did not have any actual choice

02:11:18,400 --> 02:11:23,119
so

02:11:19,440 --> 02:11:26,320
yeah um

02:11:23,119 --> 02:11:29,360
so this is something to wear also

02:11:26,320 --> 02:11:29,360
again blue phone

02:11:36,840 --> 02:11:39,840
nice

02:11:43,840 --> 02:11:51,520
okay uh another area is like

02:11:47,679 --> 02:11:55,199
power management where uh

02:11:51,520 --> 02:11:59,040
it's kind of not exactly problem of

02:11:55,199 --> 02:12:01,360
the linux itself like you know

02:11:59,040 --> 02:12:02,800
itself does have really nice

02:12:01,360 --> 02:12:05,520
infrastructure for this

02:12:02,800 --> 02:12:07,760
but the traditional desktop environment

02:12:05,520 --> 02:12:10,800
like cosmo

02:12:07,760 --> 02:12:12,880
typically assumes that the

02:12:10,800 --> 02:12:13,840
target device you are running will have

02:12:12,880 --> 02:12:16,000
like

02:12:13,840 --> 02:12:17,520
huge source of power available like

02:12:16,000 --> 02:12:21,040
giant batteries or

02:12:17,520 --> 02:12:24,000
dire it is just plugged into walls so

02:12:21,040 --> 02:12:25,199
you don't really think about the energy

02:12:24,000 --> 02:12:28,320
consumption

02:12:25,199 --> 02:12:32,400
most of the times and even in that

02:12:28,320 --> 02:12:36,079
case of laptop it's uh generally like

02:12:32,400 --> 02:12:39,199
energy setting is mostly about

02:12:36,079 --> 02:12:43,199
yeah so five minutes left okay uh

02:12:39,199 --> 02:12:45,520
so energy saving is mostly about uh

02:12:43,199 --> 02:12:48,320
like turning off screen or like

02:12:45,520 --> 02:12:51,360
suspending the device

02:12:48,320 --> 02:12:53,840
but i say we need to benchmark the

02:12:51,360 --> 02:12:57,599
various components of

02:12:53,840 --> 02:13:00,880
our system from energy use perspective

02:12:57,599 --> 02:13:03,119
and also we need to like adapt

02:13:00,880 --> 02:13:04,320
the space for mobile related power

02:13:03,119 --> 02:13:07,440
amazing features like

02:13:04,320 --> 02:13:09,119
auto slip and make locks this is like

02:13:07,440 --> 02:13:13,360
this feature comes from the

02:13:09,119 --> 02:13:17,199
android intermediate kernel and

02:13:13,360 --> 02:13:19,679
i guess most of the and

02:13:17,199 --> 02:13:22,320
android have pretty nice infrastructure

02:13:19,679 --> 02:13:25,920
for handling layers features like

02:13:22,320 --> 02:13:28,480
outer sleep or egg gloves

02:13:25,920 --> 02:13:30,719
so we need to adapt our user space for

02:13:28,480 --> 02:13:32,800
this mobile related power management

02:13:30,719 --> 02:13:36,719
features

02:13:32,800 --> 02:13:38,960
um and yeah i think

02:13:36,719 --> 02:13:40,639
uh that's pretty much it for my

02:13:38,960 --> 02:13:44,639
presentation

02:13:40,639 --> 02:13:48,639
uh i would love any suggestions

02:13:44,639 --> 02:13:53,760
or questions about this and

02:13:48,639 --> 02:13:53,760
how we can improve this plasma mobile

02:13:54,400 --> 02:13:57,520
uh so is there any cooperation with

02:13:56,719 --> 02:14:01,119
google and

02:13:57,520 --> 02:14:04,000
asbestos especially with google fishia

02:14:01,119 --> 02:14:04,000
or this plan

02:14:05,119 --> 02:14:10,480
well technically we are creating the

02:14:06,880 --> 02:14:13,760
competitor for google so

02:14:10,480 --> 02:14:16,719
it's uh yeah but

02:14:13,760 --> 02:14:18,639
uh no i think it's uh something we need

02:14:16,719 --> 02:14:22,159
to evaluate in the future about

02:14:18,639 --> 02:14:24,639
then see where we can

02:14:22,159 --> 02:14:25,520
go so right now it's only properly

02:14:24,639 --> 02:14:29,119
upside not

02:14:25,520 --> 02:14:29,119
fishia or yeah

02:14:32,000 --> 02:14:35,840
yeah if you have any questions or

02:14:33,520 --> 02:14:40,239
suggestions

02:14:35,840 --> 02:14:42,800
you can you can ask that here

02:14:40,239 --> 02:14:45,199
or in the chat i will be available in

02:14:42,800 --> 02:14:48,239
chat for a little bit it's like

02:14:45,199 --> 02:14:49,119
10 p.m already so but yeah i will be

02:14:48,239 --> 02:14:52,960
able this

02:14:49,119 --> 02:14:56,159
a little bit and also for pictures

02:14:52,960 --> 02:14:58,960
so credit to martin uh

02:14:56,159 --> 02:15:00,320
who provided this pictures under cc zero

02:14:58,960 --> 02:15:09,840
lessons

02:15:00,320 --> 02:15:09,840
and that's it thank you

02:15:12,480 --> 02:15:23,840
any questions for push on

02:15:36,239 --> 02:15:40,960
i think you know um just a general thing

02:15:39,440 --> 02:15:44,000
on power management

02:15:40,960 --> 02:15:47,520
this is something both our projects

02:15:44,000 --> 02:15:48,079
katie and genome is is very interesting

02:15:47,520 --> 02:15:50,960
to us

02:15:48,079 --> 02:15:52,560
in terms of working together because you

02:15:50,960 --> 02:15:54,079
know reducing the number of wake ups and

02:15:52,560 --> 02:15:57,199
things like that

02:15:54,079 --> 02:16:00,400
is especially not not just from a mobile

02:15:57,199 --> 02:16:02,480
context but even on a laptop right so if

02:16:00,400 --> 02:16:04,000
you know being able to run the longest

02:16:02,480 --> 02:16:08,320
we can on on battery

02:16:04,000 --> 02:16:11,280
power is is is something

02:16:08,320 --> 02:16:13,199
that we can collaboratively work uh

02:16:11,280 --> 02:16:14,800
between our two projects

02:16:13,199 --> 02:16:16,239
uh especially if you're trying to build

02:16:14,800 --> 02:16:18,000
tooling uh

02:16:16,239 --> 02:16:19,679
and and working with the kernel

02:16:18,000 --> 02:16:22,960
community for this because

02:16:19,679 --> 02:16:26,480
uh this this is this is

02:16:22,960 --> 02:16:29,679
something i think is important to us

02:16:26,480 --> 02:16:32,800
uh to be able to uh

02:16:29,679 --> 02:16:32,800
be power efficient

02:16:33,599 --> 02:16:37,040
in the desktop space right

02:16:40,240 --> 02:16:44,639
yeah i think that's a very good

02:16:44,719 --> 02:16:51,040
very good idea in general uh so

02:16:48,479 --> 02:16:52,080
uh i mean like we can still continue

02:16:51,040 --> 02:17:01,840
discussing right

02:16:52,080 --> 02:17:01,840
or let's like time out already

02:17:03,760 --> 02:17:08,719
what was it again i'm sorry uh i we can

02:17:07,040 --> 02:17:12,080
still continue this session right

02:17:08,719 --> 02:17:15,280
or it's like time over and over

02:17:12,080 --> 02:17:18,399
yeah our time is uh relatively over but

02:17:15,280 --> 02:17:19,120
you know we can i give you correct me if

02:17:18,399 --> 02:17:21,760
i'm wrong but

02:17:19,120 --> 02:17:23,040
we we can build a more extended

02:17:21,760 --> 02:17:26,240
conversation

02:17:23,040 --> 02:17:29,760
or anything else so uh

02:17:26,240 --> 02:17:42,160
yeah okay uh so like problem is

02:17:29,760 --> 02:17:43,840
like power management on desktop is

02:17:42,160 --> 02:17:45,359
go ahead buchan you can take as long as

02:17:43,840 --> 02:17:47,439
you want indeed there is nothing after

02:17:45,359 --> 02:17:49,280
this so the floor is yours and you can

02:17:47,439 --> 02:17:50,800
invite as many conversations as you'd

02:17:49,280 --> 02:17:52,399
like the only thing is we're going to

02:17:50,800 --> 02:17:55,439
try to do a

02:17:52,399 --> 02:17:57,280
a beer slash wine drinks thing

02:17:55,439 --> 02:17:58,479
at some point it's on the schedule but

02:17:57,280 --> 02:17:59,280
the conversations here are more

02:17:58,479 --> 02:18:01,359
interesting and

02:17:59,280 --> 02:18:02,960
i'd like to invite anyone else here in

02:18:01,359 --> 02:18:05,040
the room if they'd like to participate

02:18:02,960 --> 02:18:08,559
to feel free to do that as well so

02:18:05,040 --> 02:18:08,559
push on straight back to you

02:18:08,840 --> 02:18:14,430
okay so

02:18:11,200 --> 02:18:19,040
i guess i can change to

02:18:14,430 --> 02:18:22,000
[Music]

02:18:19,040 --> 02:18:22,840
uh so i also you know just in a general

02:18:22,000 --> 02:18:25,519
conversation

02:18:22,840 --> 02:18:26,399
um you know we have a lot of user space

02:18:25,519 --> 02:18:30,160
engineers here

02:18:26,399 --> 02:18:32,399
so if you're thinking about user space

02:18:30,160 --> 02:18:34,240
uh and you know there's a number of us

02:18:32,399 --> 02:18:37,519
here if you have questions

02:18:34,240 --> 02:18:38,719
that uh that may be burning a hole in

02:18:37,519 --> 02:18:41,439
your pocket

02:18:38,719 --> 02:18:42,319
that you would like to ask some of us uh

02:18:41,439 --> 02:18:45,679
you know please

02:18:42,319 --> 02:18:46,719
please go ahead the floor is open uh i

02:18:45,679 --> 02:18:49,200
do want to be

02:18:46,719 --> 02:18:50,960
able to take advantage of having some

02:18:49,200 --> 02:18:54,080
freeform conversations

02:18:50,960 --> 02:18:54,080
from this point so

02:18:54,559 --> 02:19:00,000
um yeah so uh like for the desktop and

02:18:58,080 --> 02:19:04,719
laptop assumption is like

02:19:00,000 --> 02:19:04,719
uh your device is like never running for

02:19:04,840 --> 02:19:10,719
um uh some people run

02:19:07,040 --> 02:19:13,760
device for like uh like continuously

02:19:10,719 --> 02:19:16,639
but most of the assumption is like

02:19:13,760 --> 02:19:18,800
it's never more than like 24 hours so

02:19:16,639 --> 02:19:19,040
you put your device through suspend and

02:19:18,800 --> 02:19:22,399
go

02:19:19,040 --> 02:19:24,479
to sleep uh but for phone it's not a

02:19:22,399 --> 02:19:28,000
case like for phone you need to like

02:19:24,479 --> 02:19:31,439
have it continuously running so

02:19:28,000 --> 02:19:33,679
uh there is a some

02:19:31,439 --> 02:19:34,719
assumptions about like how software

02:19:33,679 --> 02:19:37,599
should work like

02:19:34,719 --> 02:19:40,000
notification support and like push

02:19:37,599 --> 02:19:42,479
notification support where

02:19:40,000 --> 02:19:43,920
i connect to like wake up devices like

02:19:42,479 --> 02:19:48,080
at every

02:19:43,920 --> 02:19:50,240
few minutes and so some of this our

02:19:48,080 --> 02:19:52,560
infrastructure is like already available

02:19:50,240 --> 02:19:55,920
in kernel like using

02:19:52,560 --> 02:19:59,520
timer fp and things like that

02:19:55,920 --> 02:20:03,280
but it's not implemented in user space

02:19:59,520 --> 02:20:06,319
um so this is something we need to

02:20:03,280 --> 02:20:09,760
like work on and eventually see

02:20:06,319 --> 02:20:09,760
it so

02:20:09,840 --> 02:20:13,280
yeah that's what i wanted to talk about

02:20:12,800 --> 02:20:15,760
like

02:20:13,280 --> 02:20:18,479
mentioned yeah that's pretty much it

02:20:15,760 --> 02:20:18,479
from my side

02:20:21,520 --> 02:20:28,319
uh so thomas asked about where

02:20:25,280 --> 02:20:30,720
where would you most uh where

02:20:28,319 --> 02:20:32,160
where would you see uh the most direct

02:20:30,720 --> 02:20:36,080
colonel support needed

02:20:32,160 --> 02:20:39,680
uh i i would open that to everyone uh

02:20:36,080 --> 02:20:42,800
benjamin and bushon and uh

02:20:39,680 --> 02:20:46,240
uh others judges

02:20:42,800 --> 02:20:58,479
oh i partly did not get the context

02:20:46,240 --> 02:21:01,680
of the message i guess

02:20:58,479 --> 02:21:04,319
uh correct me if i'm wrong thomas i

02:21:01,680 --> 02:21:08,160
think you just mean in the general sense

02:21:04,319 --> 02:21:10,479
um where where would

02:21:08,160 --> 02:21:12,800
where where can the colonel community

02:21:10,479 --> 02:21:15,920
help directly

02:21:12,800 --> 02:21:15,920
at least in kernel space

02:21:24,640 --> 02:21:28,800
i'm sorry was this question directed to

02:21:27,040 --> 02:21:31,760
the previous presenter or

02:21:28,800 --> 02:21:32,800
like a general question all of us user

02:21:31,760 --> 02:21:35,600
space engineers

02:21:32,800 --> 02:21:37,280
uh um said that includes you and

02:21:35,600 --> 02:21:39,680
benjamin and

02:21:37,280 --> 02:21:41,840
or anybody else who's interested in this

02:21:39,680 --> 02:21:45,520
in answering this

02:21:41,840 --> 02:21:48,880
so um there are a few places where

02:21:45,520 --> 02:21:50,399
um at least from my perspective

02:21:48,880 --> 02:21:52,399
i'm sorry about the background noise

02:21:50,399 --> 02:21:56,640
it's really unexpected but um

02:21:52,399 --> 02:22:00,080
but what i what i had in mind is

02:21:56,640 --> 02:22:01,120
um i wanted to have at least somebody

02:22:00,080 --> 02:22:04,399
from

02:22:01,120 --> 02:22:07,840
someone from the graphics

02:22:04,399 --> 02:22:10,800
um side of the kernel um to help us

02:22:07,840 --> 02:22:15,200
figure out how to implement

02:22:10,800 --> 02:22:18,240
overlay planes and on

02:22:15,200 --> 02:22:20,479
motor it seems like a really hard task

02:22:18,240 --> 02:22:23,200
lots of restrictions i'm not the expert

02:22:20,479 --> 02:22:27,359
when it comes to it but um

02:22:23,200 --> 02:22:31,600
i'm certainly interested in

02:22:27,359 --> 02:22:34,719
and discussing about it at some point

02:22:31,600 --> 02:22:34,719
[Music]

02:22:35,040 --> 02:22:38,080
yeah i guess most of most of motor's

02:22:37,520 --> 02:22:40,720
kernel

02:22:38,080 --> 02:22:42,319
interactions are on on the graphics

02:22:40,720 --> 02:22:46,160
stack

02:22:42,319 --> 02:22:49,760
on input stacks um

02:22:46,160 --> 02:22:53,520
is layered by input so

02:22:49,760 --> 02:22:56,640
there's that oh there's

02:22:53,520 --> 02:22:58,160
one other thing that we um we're looking

02:22:56,640 --> 02:23:03,120
for specifically

02:22:58,160 --> 02:23:04,800
and that's mostly kernel work so

02:23:03,120 --> 02:23:06,800
unfortunately i don't have a slide deck

02:23:04,800 --> 02:23:11,359
for that but

02:23:06,800 --> 02:23:14,560
um mutter uses eg out render

02:23:11,359 --> 02:23:16,319
and egl supports context priorities

02:23:14,560 --> 02:23:19,200
right

02:23:16,319 --> 02:23:19,680
um so like if you have a compositor it

02:23:19,200 --> 02:23:23,120
has a

02:23:19,680 --> 02:23:27,040
should have a high priority because

02:23:23,120 --> 02:23:29,520
if it stalls everything else stalls so

02:23:27,040 --> 02:23:31,359
um in general a compositor should have a

02:23:29,520 --> 02:23:34,240
higher priority

02:23:31,359 --> 02:23:35,680
we tried implementing this on mother's

02:23:34,240 --> 02:23:39,920
side

02:23:35,680 --> 02:23:45,200
so we tried like asking egl to

02:23:39,920 --> 02:23:48,240
raise the priority of the contexts

02:23:45,200 --> 02:23:49,760
that motor creates however there's a

02:23:48,240 --> 02:23:53,120
problem with that that requires

02:23:49,760 --> 02:23:56,399
special capabilities um so we needed to

02:23:53,120 --> 02:23:58,960
like set cap on

02:23:56,399 --> 02:24:01,200
num shell slash motor which is terrible

02:23:58,960 --> 02:24:04,399
because it breaks a lot of stuff

02:24:01,200 --> 02:24:07,439
one idea that's been floating around is

02:24:04,399 --> 02:24:09,359
having the kernel side somehow figure

02:24:07,439 --> 02:24:11,600
out that a certain pipeline is going to

02:24:09,359 --> 02:24:14,560
end up on a display

02:24:11,600 --> 02:24:18,399
and automatically raise the priority of

02:24:14,560 --> 02:24:21,520
that pipeline that specific pipeline

02:24:18,399 --> 02:24:22,479
um that's something that we cannot

02:24:21,520 --> 02:24:26,479
really control

02:24:22,479 --> 02:24:29,520
um if we try if we try to like give

02:24:26,479 --> 02:24:33,439
murder the process the higher

02:24:29,520 --> 02:24:35,920
um capabilities we lose

02:24:33,439 --> 02:24:37,200
other stuff due to security reasons like

02:24:35,920 --> 02:24:39,760
sub-processing

02:24:37,200 --> 02:24:41,600
sub-processes we have to be really

02:24:39,760 --> 02:24:42,560
careful about threads and sub-processes

02:24:41,600 --> 02:24:45,840
and

02:24:42,560 --> 02:24:48,000
whatnot so that's something that

02:24:45,840 --> 02:24:48,640
certainly requires a level of kernel

02:24:48,000 --> 02:24:50,479
work

02:24:48,640 --> 02:24:52,800
to be figured out and that's something

02:24:50,479 --> 02:24:55,359
that would be fantastic to

02:24:52,800 --> 02:24:56,479
do at some point we sit down and discuss

02:24:55,359 --> 02:24:58,800
how it should

02:24:56,479 --> 02:25:00,800
implement if there's a hint another hint

02:24:58,800 --> 02:25:04,800
for a kernel that

02:25:00,800 --> 02:25:04,800
a mother can do or something like that

02:25:07,680 --> 02:25:11,840
but there's that from my side

02:25:13,760 --> 02:25:18,640
any other questions or comments

02:25:20,950 --> 02:25:24,160
[Music]

02:25:22,840 --> 02:25:29,120
or

02:25:24,160 --> 02:25:29,120
all right well um it

02:25:30,319 --> 02:25:39,840
looks like we have someone typing

02:25:48,080 --> 02:25:53,840
i haven't particularly heard of lip

02:25:49,680 --> 02:25:53,840
camera um let me have a look at it

02:25:55,840 --> 02:25:59,520
i i would think like like the the portal

02:25:59,040 --> 02:26:02,960
stuff

02:25:59,520 --> 02:26:05,439
would be an interesting uh

02:26:02,960 --> 02:26:06,399
i think clip camera was important for

02:26:05,439 --> 02:26:08,640
the

02:26:06,399 --> 02:26:09,760
next generation non-usb cameras right

02:26:08,640 --> 02:26:13,280
the mep

02:26:09,760 --> 02:26:13,280
or whatever it is called cameras

02:26:13,760 --> 02:26:20,000
that's correct so we'll

02:26:16,880 --> 02:26:23,280
we'll need it in some way um but i'm not

02:26:20,000 --> 02:26:26,479
sure what exactly it means

02:26:23,280 --> 02:26:26,479
and how it all fits in

02:26:26,640 --> 02:26:32,080
um it's a relatively new project

02:26:29,760 --> 02:26:36,399
uh that aims at supporting well complex

02:26:32,080 --> 02:26:36,399
cameras so anything that's non-usb

02:26:36,880 --> 02:26:44,240
and the idea is to have a

02:26:41,200 --> 02:26:46,000
full camera stack so

02:26:44,240 --> 02:26:47,840
it's not just the kind of drivers but

02:26:46,000 --> 02:26:48,319
it's also user space components on top

02:26:47,840 --> 02:26:49,840
of that

02:26:48,319 --> 02:26:51,200
because there's quite a bit of work that

02:26:49,840 --> 02:26:53,439
needs to be done by the cpu and that

02:26:51,200 --> 02:26:56,960
doesn't fit in kernel space

02:26:53,439 --> 02:26:58,960
we also do support the usb webcams

02:26:56,960 --> 02:27:00,720
which means that it will offer a unified

02:26:58,960 --> 02:27:02,000
api through a single stack to any kind

02:27:00,720 --> 02:27:02,720
of camera that could be found in the

02:27:02,000 --> 02:27:05,920
device

02:27:02,720 --> 02:27:09,280
being it's a phone a tablet a

02:27:05,920 --> 02:27:09,280
laptop or a standard pc

02:27:10,160 --> 02:27:14,960
sorry yeah so i was just wondering if

02:27:13,760 --> 02:27:17,439
anyone had

02:27:14,960 --> 02:27:18,960
had a look at that from basically a

02:27:17,439 --> 02:27:20,960
platinum mobile point of view

02:27:18,960 --> 02:27:23,280
uh thinking about how it should be

02:27:20,960 --> 02:27:24,160
integrated and how we should cooperate

02:27:23,280 --> 02:27:25,840
moving forward

02:27:24,160 --> 02:27:28,160
as i said projects are relatively new so

02:27:25,840 --> 02:27:30,560
maybe it's a bit too early to uh

02:27:28,160 --> 02:27:32,080
to make real plans there but at least uh

02:27:30,560 --> 02:27:34,000
having uh

02:27:32,080 --> 02:27:35,280
start having a conversation to start

02:27:34,000 --> 02:27:38,000
with um

02:27:35,280 --> 02:27:38,560
to check what we could do and i would

02:27:38,000 --> 02:27:41,200
say what

02:27:38,560 --> 02:27:41,920
you from your site could do is um

02:27:41,200 --> 02:27:46,080
working on

02:27:41,920 --> 02:27:48,560
integrating it with pipe wire and then

02:27:46,080 --> 02:27:50,640
from the other side all the software

02:27:48,560 --> 02:27:53,840
components should switch to pipe wire

02:27:50,640 --> 02:27:55,920
to actually um connect to the

02:27:53,840 --> 02:27:57,120
various webcams and and instead of

02:27:55,920 --> 02:28:01,520
directly going for

02:27:57,120 --> 02:28:02,960
d4l too um

02:28:01,520 --> 02:28:04,880
that's probably the typewire that's

02:28:02,960 --> 02:28:07,439
that's the interesting part

02:28:04,880 --> 02:28:08,880
okay yeah we have plans to you we

02:28:07,439 --> 02:28:09,840
already have a g stream elements but

02:28:08,880 --> 02:28:11,439
we're looking uh

02:28:09,840 --> 02:28:13,200
we will start looking at pacquiao as

02:28:11,439 --> 02:28:16,640
well it will likely

02:28:13,200 --> 02:28:18,800
mean uh modification of the pipeline

02:28:16,640 --> 02:28:20,560
camera api you know when it sits on top

02:28:18,800 --> 02:28:22,800
of pipelines applications will need to

02:28:20,560 --> 02:28:25,760
switch to something different

02:28:22,800 --> 02:28:26,000
but i had i had a conversation with uh

02:28:25,760 --> 02:28:31,520
with

02:28:26,000 --> 02:28:34,319
wim it's uh this last year actually yeah

02:28:31,520 --> 02:28:35,120
at the g streamer conference uh and i

02:28:34,319 --> 02:28:37,600
know that there are

02:28:35,120 --> 02:28:38,319
few people from calabara who are

02:28:37,600 --> 02:28:42,640
interested

02:28:38,319 --> 02:28:42,640
on this as well so it will move out

02:28:44,160 --> 02:28:48,240
yeah i also feel like this is an

02:28:45,760 --> 02:28:50,080
interesting an interesting addition to

02:28:48,240 --> 02:28:52,160
pipe wire

02:28:50,080 --> 02:28:53,200
papyrus works in terms of you know

02:28:52,160 --> 02:28:56,000
streams

02:28:53,200 --> 02:28:57,520
and end points so a camera would be like

02:28:56,000 --> 02:29:01,359
an end point

02:28:57,520 --> 02:29:03,120
generates content and other

02:29:01,359 --> 02:29:05,280
stream consumers would be able to

02:29:03,120 --> 02:29:07,200
consume the camera

02:29:05,280 --> 02:29:08,880
um oh of course intermediate by pipe

02:29:07,200 --> 02:29:10,960
wire so we do also feel like it's going

02:29:08,880 --> 02:29:13,359
to be a fantastic addition to

02:29:10,960 --> 02:29:14,960
it especially because you know if if

02:29:13,359 --> 02:29:15,600
it's more complicated cameras than

02:29:14,960 --> 02:29:19,040
simply

02:29:15,600 --> 02:29:22,000
like reading colors from

02:29:19,040 --> 02:29:23,280
real world then it's probably also going

02:29:22,000 --> 02:29:26,800
to involve i don't know um

02:29:23,280 --> 02:29:29,840
sound or other types of events

02:29:26,800 --> 02:29:31,760
um multimedia events cameras side trying

02:29:29,840 --> 02:29:32,000
that too much when i say complex cameras

02:29:31,760 --> 02:29:33,840
and

02:29:32,000 --> 02:29:35,600
talking about cameras where you really

02:29:33,840 --> 02:29:37,680
have a rose inside a powerful

02:29:35,600 --> 02:29:39,760
isp to process the images but you need

02:29:37,680 --> 02:29:41,920
to implement all the algorithms

02:29:39,760 --> 02:29:43,840
that will give you auto white balance or

02:29:41,920 --> 02:29:44,960
to exposure and all that in user space

02:29:43,840 --> 02:29:46,960
and that's not something that we want

02:29:44,960 --> 02:29:50,160
applications to do because it's fairly

02:29:46,960 --> 02:29:52,240
complex it's very device dependent

02:29:50,160 --> 02:29:53,840
so that's why we provide a new framework

02:29:52,240 --> 02:29:56,080
that integrates all that's behind the

02:29:53,840 --> 02:29:56,080
scenes

02:29:56,160 --> 02:30:01,840
yeah there's a lot of stuff that you

02:29:58,640 --> 02:30:05,120
need to do in the camera there

02:30:01,840 --> 02:30:07,680
i know

02:30:05,120 --> 02:30:07,680
okay thanks

02:30:11,280 --> 02:30:17,920
that's a great conversation um and uh

02:30:16,399 --> 02:30:19,680
pretty interesting i would love to see

02:30:17,920 --> 02:30:23,359
that kind of collaboration

02:30:19,680 --> 02:30:25,680
uh going forward um does anybody else

02:30:23,359 --> 02:30:33,840
have any other

02:30:25,680 --> 02:30:33,840
burning questions or ways to collaborate

02:30:41,280 --> 02:30:48,720
all right then um so i'll mix

02:30:45,200 --> 02:30:51,920
uh a closing comment uh on my end

02:30:48,720 --> 02:30:56,319
uh we perceived that this

02:30:51,920 --> 02:30:58,000
this microconference as as a way to

02:30:56,319 --> 02:30:59,359
um you want to turn your camera on three

02:30:58,000 --> 02:31:02,160
maybe so that people can see you

02:30:59,359 --> 02:31:04,399
as you're making your game remarks yeah

02:31:02,160 --> 02:31:04,399
sure

02:31:12,240 --> 02:31:16,720
all right so um so let me let me make my

02:31:15,600 --> 02:31:20,560
closing marks

02:31:16,720 --> 02:31:22,080
um when when i brought up this

02:31:20,560 --> 02:31:25,840
microconference uh

02:31:22,080 --> 02:31:28,720
there's a general idea of wanting to

02:31:25,840 --> 02:31:29,600
uh our projects tend to have over time

02:31:28,720 --> 02:31:32,880
been siloed

02:31:29,600 --> 02:31:34,960
and and a lot of

02:31:32,880 --> 02:31:37,040
the work we want to do is we want to be

02:31:34,960 --> 02:31:40,399
able to break out of our silos

02:31:37,040 --> 02:31:43,200
and and start working with

02:31:40,399 --> 02:31:44,160
um with the other ecosystems especially

02:31:43,200 --> 02:31:47,920
the colonel

02:31:44,160 --> 02:31:49,920
uh back back when thought katie and

02:31:47,920 --> 02:31:51,680
got started we had very close

02:31:49,920 --> 02:31:54,560
associations with

02:31:51,680 --> 02:31:56,399
uh the colonel uh community and and

02:31:54,560 --> 02:32:00,000
together we built some

02:31:56,399 --> 02:32:03,200
great engineering uh going forward

02:32:00,000 --> 02:32:07,200
um over time we've sort of separated

02:32:03,200 --> 02:32:09,680
and um this this micro conference is

02:32:07,200 --> 02:32:11,439
is is a way to to sort of bring

02:32:09,680 --> 02:32:13,520
everything back together again

02:32:11,439 --> 02:32:14,479
um there's a lot of great problems to

02:32:13,520 --> 02:32:19,600
solve together

02:32:14,479 --> 02:32:21,600
um and um it's one of those things that

02:32:19,600 --> 02:32:22,960
uh at least from a desktop or

02:32:21,600 --> 02:32:26,080
application

02:32:22,960 --> 02:32:27,920
uh experience uh we

02:32:26,080 --> 02:32:31,200
we could be a lot better than we are

02:32:27,920 --> 02:32:34,240
today and so if

02:32:31,200 --> 02:32:35,840
uh my my hope going forward in future

02:32:34,240 --> 02:32:38,800
plumbers conference that we can

02:32:35,840 --> 02:32:40,000
we can work together and actually build

02:32:38,800 --> 02:32:43,439
a great platform

02:32:40,000 --> 02:32:43,439
for applications on linux

02:32:45,600 --> 02:32:50,840
uh tim merlin says whenever we have more

02:32:48,960 --> 02:32:52,000
cross-pollination and

02:32:50,840 --> 02:32:54,640
cross-communications

02:32:52,000 --> 02:32:56,000
we seem to generally come out better

02:32:54,640 --> 02:32:59,439
that is absolutely true

02:32:56,000 --> 02:33:01,359
and and we're doing this even with each

02:32:59,439 --> 02:33:02,640
other right so gnome and kdm working

02:33:01,359 --> 02:33:04,640
much closer together

02:33:02,640 --> 02:33:06,000
we have uh we have a conference called

02:33:04,640 --> 02:33:09,920
linux app summit

02:33:06,000 --> 02:33:13,760
so we're here we are working with uh

02:33:09,920 --> 02:33:16,640
other uh ecosystems

02:33:13,760 --> 02:33:17,359
from the kernel side we're also working

02:33:16,640 --> 02:33:20,080
with

02:33:17,359 --> 02:33:21,760
uh the application developers and the

02:33:20,080 --> 02:33:22,880
people who consume on the user space

02:33:21,760 --> 02:33:26,399
sites right so

02:33:22,880 --> 02:33:30,080
so so as we build this out uh

02:33:26,399 --> 02:33:33,280
we we hope to uh greatly

02:33:30,080 --> 02:33:36,720
accelerate our maturity right

02:33:33,280 --> 02:33:39,840
on on desktops and and applications

02:33:36,720 --> 02:33:40,240
so so that's that's what my wish here is

02:33:39,840 --> 02:33:43,920
and

02:33:40,240 --> 02:33:44,319
and i hope that i know that on our side

02:33:43,920 --> 02:33:46,960
that

02:33:44,319 --> 02:33:48,160
um we are definitely interested in

02:33:46,960 --> 02:33:51,280
coming back

02:33:48,160 --> 02:33:53,200
and uh hopefully we'll bring a lot more

02:33:51,280 --> 02:33:54,560
of the people who write graphics drivers

02:33:53,200 --> 02:33:56,479
the graphic stacks as

02:33:54,560 --> 02:33:58,880
as georges was talking about this is

02:33:56,479 --> 02:34:02,479
kind of a very interesting area for us

02:33:58,880 --> 02:34:04,880
uh definitely more on the seat groups

02:34:02,479 --> 02:34:08,880
and everything else so there's plenty

02:34:04,880 --> 02:34:12,560
plenty of areas

02:34:08,880 --> 02:34:13,280
of touchstones that we can work together

02:34:12,560 --> 02:34:16,240
on

02:34:13,280 --> 02:34:18,080
so yes as benjamin said yes i i did

02:34:16,240 --> 02:34:21,439
meant to see groups

02:34:18,080 --> 02:34:23,920
so so yes um so

02:34:21,439 --> 02:34:25,760
let's let's keep our communications open

02:34:23,920 --> 02:34:28,319
let's um

02:34:25,760 --> 02:34:29,600
reach out to all of us um and we'd reach

02:34:28,319 --> 02:34:32,399
out to you as well

02:34:29,600 --> 02:34:33,439
and hopefully the next uh conference

02:34:32,399 --> 02:34:34,800
will be in person

02:34:33,439 --> 02:34:37,600
and we could have a lot of these

02:34:34,800 --> 02:34:41,200
conversations in person

02:34:37,600 --> 02:34:44,800
uh and and so forth so

02:34:41,200 --> 02:34:46,240
uh with that i'm going to close out this

02:34:44,800 --> 02:34:50,240
micro conference

02:34:46,240 --> 02:34:52,640
uh i hope this was um useful

02:34:50,240 --> 02:34:53,920
and if you have any feedback for me uh

02:34:52,640 --> 02:34:56,880
and for the people

02:34:53,920 --> 02:34:59,200
here uh please don't hesitate to reach

02:34:56,880 --> 02:35:03,200
it reach out i'll be on the rocket chat

02:34:59,200 --> 02:35:05,840
or and uh i'm happy to

02:35:03,200 --> 02:35:06,640
have conversations so everything going

02:35:05,840 --> 02:35:09,920
forward

02:35:06,640 --> 02:35:13,680
so thank you all and i want i also

02:35:09,920 --> 02:35:16,560
want to thank the organizers

02:35:13,680 --> 02:35:17,439
of the linux explorers conference elena

02:35:16,560 --> 02:35:19,280
gee

02:35:17,439 --> 02:35:22,399
stephen thank you so much for your

02:35:19,280 --> 02:35:24,399
support thank you for

02:35:22,399 --> 02:35:25,680
accepting our market conference and

02:35:24,399 --> 02:35:29,520
allowing us to

02:35:25,680 --> 02:35:32,319
to come back and

02:35:29,520 --> 02:35:41,840
that's that's all i have to say for now

02:35:32,319 --> 02:35:41,840
thank you very much

02:35:47,600 --> 02:35:51,040
all right all right everyone thank you

02:35:50,080 --> 02:35:52,960
thank you everyone

02:35:51,040 --> 02:35:55,840
thanks shri thanks to the organizing

02:35:52,960 --> 02:35:55,840
committee

02:36:01,980 --> 02:36:05,510
[Music]

02:36:42,520 --> 02:36:47,110
[Music]

02:40:51,840 --> 02:40:53,920

YouTube URL: https://www.youtube.com/watch?v=4RZhTRZYb8I


