Title: LPC2019 - Discussions on kselftest
Publication date: 2019-11-18
Playlist: LPC2019 - Kernel Summit Track
Description: 
	Discussions on kselftest led by Shuah Kahn
Captions: 
	00:00:00,030 --> 00:00:10,800
so let's get started and she was going

00:00:03,480 --> 00:00:13,139
to talk about K self tests going for the

00:00:10,800 --> 00:00:15,570
starting is mostly I wanted to get some

00:00:13,139 --> 00:00:18,150
discussion going on what I should do

00:00:15,570 --> 00:00:19,980
for the next year and then once a year I

00:00:18,150 --> 00:00:23,519
kind of do this and give the State of

00:00:19,980 --> 00:00:26,000
the Union on Cardinal self test and then

00:00:23,519 --> 00:00:29,789
talk about what can we do the next year

00:00:26,000 --> 00:00:34,730
so what I saw who in the last five years

00:00:29,789 --> 00:00:34,730
we added bunch of tests we are about 70

00:00:34,790 --> 00:00:38,809
directories targets see if you will for

00:00:37,710 --> 00:00:41,070
the case of tests

00:00:38,809 --> 00:00:43,280
so what that means is we have a lot of

00:00:41,070 --> 00:00:47,420
growth and we have a lot of tests and

00:00:43,280 --> 00:00:49,800
more importantly Linux Cardinal

00:00:47,420 --> 00:00:52,430
functional testing group from Leonardo

00:00:49,800 --> 00:00:55,469
they have been using this to qualify

00:00:52,430 --> 00:00:59,550
Linux next upstream and all of the

00:00:55,469 --> 00:01:02,370
stable releases so they they run it by a

00:00:59,550 --> 00:01:07,080
variety of tests and this slide is

00:01:02,370 --> 00:01:10,979
accredited Andrew and Andrew slack so so

00:01:07,080 --> 00:01:14,600
so they run a lot of tests they show how

00:01:10,979 --> 00:01:17,600
many tests they are running various just

00:01:14,600 --> 00:01:20,700
this is a graph showing that that's

00:01:17,600 --> 00:01:23,130
slide from and the I want to focus the

00:01:20,700 --> 00:01:25,890
discussion on some of the numbers we are

00:01:23,130 --> 00:01:28,229
saying that's my primary goal here so

00:01:25,890 --> 00:01:31,110
you'll see and it also make it decision

00:01:28,229 --> 00:01:34,950
on we want to going forward do we want

00:01:31,110 --> 00:01:38,700
to there is this ongoing question that

00:01:34,950 --> 00:01:44,030
we have do we Rev match Cardinal self

00:01:38,700 --> 00:01:48,920
tests with Cardinal or do we use

00:01:44,030 --> 00:01:52,259
mainline stable Cardinal self tests on

00:01:48,920 --> 00:01:53,759
stable releases I'll go into a little

00:01:52,259 --> 00:01:55,920
bit of detail on some of the pros and

00:01:53,759 --> 00:02:00,149
cons and then what we are running into

00:01:55,920 --> 00:02:02,329
what I want to solve going forward so

00:02:00,149 --> 00:02:06,600
you'll see two numbers here you'll see

00:02:02,329 --> 00:02:09,660
4.9 on this on on all the way on the

00:02:06,600 --> 00:02:12,900
right side Rev matched and you'll see a

00:02:09,660 --> 00:02:17,070
failures paternal of

00:02:12,900 --> 00:02:22,870
Paso 5:45 test pass and eight fail and

00:02:17,070 --> 00:02:25,780
out of 126 some I'm not quite sure the

00:02:22,870 --> 00:02:28,360
number of tests here but where else if

00:02:25,780 --> 00:02:32,680
you how many Dan do you know the number

00:02:28,360 --> 00:02:37,960
of tests there for even for this lab

00:02:32,680 --> 00:02:43,630
match the Cardinal 44.9 all the way yeah

00:02:37,960 --> 00:02:45,880
right okay 150 and and then if you see

00:02:43,630 --> 00:02:50,440
on this side on the left side with the

00:02:45,880 --> 00:02:54,130
5.3 rc7 self-test rub matched so you're

00:02:50,440 --> 00:02:59,110
seeing 55 failures that includes that's

00:02:54,130 --> 00:02:59,830
the total failures you can see using rub

00:02:59,110 --> 00:03:02,410
matched

00:02:59,830 --> 00:03:05,020
Cardinal you have your running fewer

00:03:02,410 --> 00:03:08,050
tests because there aren't as many tests

00:03:05,020 --> 00:03:10,270
obviously in 4.9 Cardinal Celtics we

00:03:08,050 --> 00:03:10,660
keep adding a lot of tests as we go

00:03:10,270 --> 00:03:13,840
forward

00:03:10,660 --> 00:03:17,230
so between 4.9 and 5.3 there is a gap

00:03:13,840 --> 00:03:20,080
there so let's let's come back to this

00:03:17,230 --> 00:03:23,500
numbers later I'll go over them later

00:03:20,080 --> 00:03:27,090
and then this is the current there are

00:03:23,500 --> 00:03:30,460
these three different use cases and then

00:03:27,090 --> 00:03:32,110
run match the Cardinal that's what that

00:03:30,460 --> 00:03:35,110
side that's the numbers I showed and

00:03:32,110 --> 00:03:37,480
then we have a case L test on with the

00:03:35,110 --> 00:03:43,210
latest table what that means is it is

00:03:37,480 --> 00:03:46,660
Kate K self test on a Linux next and 5.3

00:03:43,210 --> 00:03:50,110
are sees we do that match but when it

00:03:46,660 --> 00:03:55,900
comes to stables all the 5.2 I think we

00:03:50,110 --> 00:04:00,690
are at 14 now and 4.14 4.9 all of those

00:03:55,900 --> 00:04:00,690
4.19 those are those are currently

00:04:00,720 --> 00:04:07,450
latest stable is being used but that

00:04:04,420 --> 00:04:11,860
means this fire dot-to-dot 14 will be

00:04:07,450 --> 00:04:17,370
used on all of the ones below including

00:04:11,860 --> 00:04:17,370
Phi dot 2.14 so

00:04:17,909 --> 00:04:24,550
so let's get to the next agenda next

00:04:21,400 --> 00:04:27,370
discussion so I'm trying to decide I

00:04:24,550 --> 00:04:29,530
have always said I kind of said well you

00:04:27,370 --> 00:04:32,530
you will get better college if you use

00:04:29,530 --> 00:04:35,409
the latest K self-test but that has pros

00:04:32,530 --> 00:04:37,150
and cons to them because latest care

00:04:35,409 --> 00:04:40,960
self does tend to be a little bit of in

00:04:37,150 --> 00:04:42,930
a current situation so that's proving to

00:04:40,960 --> 00:04:45,759
be a little bit cup of problematic

00:04:42,930 --> 00:04:49,539
balancing courage and dealing with the

00:04:45,759 --> 00:04:53,020
test bugs in some cases it's mostly we

00:04:49,539 --> 00:04:56,979
are looking at features the the de

00:04:53,020 --> 00:04:59,860
guideline for writing tests and ears if

00:04:56,979 --> 00:05:01,000
a feature cannot be tested because when

00:04:59,860 --> 00:05:03,310
you're running it you're going to run

00:05:01,000 --> 00:05:05,259
into that a lot if you are in the in

00:05:03,310 --> 00:05:09,430
that situation really you're running

00:05:05,259 --> 00:05:10,719
latest K self tests on a older stable

00:05:09,430 --> 00:05:14,620
for example if you're running on

00:05:10,719 --> 00:05:17,530
fold-out for using 5.4 for example then

00:05:14,620 --> 00:05:19,690
you will see several features missing

00:05:17,530 --> 00:05:21,969
right in five at four so you will have

00:05:19,690 --> 00:05:24,039
to have skip handling graceful handling

00:05:21,969 --> 00:05:28,180
of skipping features that cannot be

00:05:24,039 --> 00:05:31,990
tested ideally so because if if you do

00:05:28,180 --> 00:05:33,669
not skip if dependencies are not met and

00:05:31,990 --> 00:05:35,919
if you don't skip they'll all become

00:05:33,669 --> 00:05:38,229
failures it'll be bunch of failures it

00:05:35,919 --> 00:05:41,650
will be very difficult to figure out the

00:05:38,229 --> 00:05:46,360
status of the situation one solution is

00:05:41,650 --> 00:05:49,449
of course saying rev-match that is one

00:05:46,360 --> 00:05:55,000
solution however you are going to be

00:05:49,449 --> 00:05:59,620
missing a lot of test coverage so I

00:05:55,000 --> 00:06:02,650
would like to get to where a balancing

00:05:59,620 --> 00:06:06,810
point where we can continue to turn

00:06:02,650 --> 00:06:11,229
later stable on older stables and

00:06:06,810 --> 00:06:14,500
minimize the number of failures we see

00:06:11,229 --> 00:06:16,569
and coverage increase the coverage is

00:06:14,500 --> 00:06:20,080
that is that that's what I want to

00:06:16,569 --> 00:06:27,219
ideally get you so that's what we have

00:06:20,080 --> 00:06:29,589
been trying and so we have some areas

00:06:27,219 --> 00:06:30,400
have very active in terms of writing

00:06:29,589 --> 00:06:33,009
tests

00:06:30,400 --> 00:06:35,259
and we are getting like for example you

00:06:33,009 --> 00:06:38,590
you won't CC group test for example in

00:06:35,259 --> 00:06:40,330
4.9 Rebbe matched missile test so you're

00:06:38,590 --> 00:06:42,310
not getting that coverage even though

00:06:40,330 --> 00:06:46,509
you have C groups there so there is an

00:06:42,310 --> 00:06:50,100
advantage to running as Cardinal self

00:06:46,509 --> 00:06:53,949
test from mainline stable on older

00:06:50,100 --> 00:06:56,259
because where we keep adding tests not

00:06:53,949 --> 00:07:01,900
just for new features we keep adding for

00:06:56,259 --> 00:07:04,600
just missing tests it's in some areas so

00:07:01,900 --> 00:07:07,360
some some of the numbers here I said

00:07:04,600 --> 00:07:09,190
from this is from fight or three Darcy

00:07:07,360 --> 00:07:11,590
seven I think right is the artist it

00:07:09,190 --> 00:07:15,910
doesn't matter really so I'm comparing

00:07:11,590 --> 00:07:18,370
two different architectures x86 64 and

00:07:15,910 --> 00:07:19,840
arm 64 so out of one hundred and

00:07:18,370 --> 00:07:23,320
eighteen ninety eight total tests

00:07:19,840 --> 00:07:25,660
sixty-three percent of them pass and the

00:07:23,320 --> 00:07:28,570
11 percent failures you're seeing and

00:07:25,660 --> 00:07:33,340
eighteen known fails they are failures

00:07:28,570 --> 00:07:36,180
non failures means that elk aft folks

00:07:33,340 --> 00:07:38,260
went through the list of failures and

00:07:36,180 --> 00:07:40,030
categorized them there are no known

00:07:38,260 --> 00:07:41,949
failures and they have been recording

00:07:40,030 --> 00:07:44,169
it's a variety of them I'm looking into

00:07:41,949 --> 00:07:47,229
I'm going to start looking at that more

00:07:44,169 --> 00:07:49,419
closely to see what is the nature of the

00:07:47,229 --> 00:07:53,460
failures are they the failures of the

00:07:49,419 --> 00:07:55,900
tests that they should have skipped that

00:07:53,460 --> 00:07:59,110
we should increase the number of skips

00:07:55,900 --> 00:08:01,479
or the nature of them I do not know

00:07:59,110 --> 00:08:03,010
I've looked at a few of them they they

00:08:01,479 --> 00:08:05,800
seem like something that could should

00:08:03,010 --> 00:08:07,720
have been skips that means some

00:08:05,800 --> 00:08:11,229
dependency file is not found then you

00:08:07,720 --> 00:08:15,539
should go and skip or it could be that

00:08:11,229 --> 00:08:18,310
you do not have a dependency dependent

00:08:15,539 --> 00:08:23,020
some dependency even it could even be a

00:08:18,310 --> 00:08:26,770
total dependency probably a CPU memory

00:08:23,020 --> 00:08:28,900
kind of test is using LS CPU to run LS

00:08:26,770 --> 00:08:31,419
CPU and get some information and part

00:08:28,900 --> 00:08:33,089
star and take different actions so it

00:08:31,419 --> 00:08:35,890
could be those kinds of dependencies so

00:08:33,089 --> 00:08:38,890
my goal is to get this number down both

00:08:35,890 --> 00:08:42,270
failures and known failures as much as

00:08:38,890 --> 00:08:42,270
possible so

00:08:42,720 --> 00:08:49,650
these are numbers from this this number

00:08:45,540 --> 00:08:51,990
can be interesting 5.14 RC again you'll

00:08:49,650 --> 00:08:55,410
see known failures this is Rev matched

00:08:51,990 --> 00:08:58,170
with I'm assuming K self-test from the

00:08:55,410 --> 00:09:02,520
same 5.2 14 because the top of the

00:08:58,170 --> 00:09:05,100
mainline tapes table later stable so the

00:09:02,520 --> 00:09:06,840
same thing will be used on current setup

00:09:05,100 --> 00:09:14,010
the same thing will be used on four dot

00:09:06,840 --> 00:09:18,570
1972 also on 14 and 4.9 so that's that's

00:09:14,010 --> 00:09:21,030
the ideal state we want to be in that is

00:09:18,570 --> 00:09:24,240
well that is the state we would like to

00:09:21,030 --> 00:09:28,320
be without known these many known

00:09:24,240 --> 00:09:30,240
failures potentially so what what does

00:09:28,320 --> 00:09:33,180
that mean to us

00:09:30,240 --> 00:09:39,120
meaning individual test maintainer x'

00:09:33,180 --> 00:09:41,550
and myself and then also CI Edmonds what

00:09:39,120 --> 00:09:45,420
what does that so my goal is to improve

00:09:41,550 --> 00:09:49,500
the process there is some of that as we

00:09:45,420 --> 00:09:51,570
have been I've been talking to both

00:09:49,500 --> 00:09:53,790
Anderson Dan and we have been going back

00:09:51,570 --> 00:09:55,860
and there are some we need to we are

00:09:53,790 --> 00:09:58,860
working on improving some of the

00:09:55,860 --> 00:10:02,760
reporting ish the process coming in to

00:09:58,860 --> 00:10:04,890
me and then I'm going to have to go

00:10:02,760 --> 00:10:07,080
around and ask just maintain errs to

00:10:04,890 --> 00:10:09,390
individual Testament trainers to make

00:10:07,080 --> 00:10:12,330
this a priority to help me solve these

00:10:09,390 --> 00:10:15,120
problems I probably will start looking

00:10:12,330 --> 00:10:17,880
at the knees known failures and support

00:10:15,120 --> 00:10:22,880
me in getting the known failures down so

00:10:17,880 --> 00:10:25,620
that we can enable we can make CI

00:10:22,880 --> 00:10:27,600
experience better running a self-test

00:10:25,620 --> 00:10:33,240
because there is an advantage to doing

00:10:27,600 --> 00:10:35,940
this right obviously if if this just get

00:10:33,240 --> 00:10:39,930
run on all of the stables as well as

00:10:35,940 --> 00:10:49,010
Linux next we are better off for

00:10:39,930 --> 00:10:49,010
coverage any questions yes

00:10:52,180 --> 00:10:56,420
I'm on the winter Colonel team and this

00:10:54,800 --> 00:10:58,730
is something that we struggle with from

00:10:56,420 --> 00:11:03,200
time to time is running the K self-test

00:10:58,730 --> 00:11:05,390
against our our stable releases and some

00:11:03,200 --> 00:11:07,280
of that's you know some of its luck you

00:11:05,390 --> 00:11:09,530
mentioned the BPF test suite is very

00:11:07,280 --> 00:11:11,720
exhaustive but it's also very complex to

00:11:09,530 --> 00:11:13,640
backport some of those those case

00:11:11,720 --> 00:11:17,390
self-test changes along with the code

00:11:13,640 --> 00:11:19,460
changes so I guess this this idea to use

00:11:17,390 --> 00:11:20,420
the latest stable release is really

00:11:19,460 --> 00:11:20,900
interesting to me I hadn't thought about

00:11:20,420 --> 00:11:23,840
that

00:11:20,900 --> 00:11:26,660
is there buy-in do you think to actually

00:11:23,840 --> 00:11:30,710
backport those those self-test changes

00:11:26,660 --> 00:11:33,620
to the latest stable correct so that is

00:11:30,710 --> 00:11:36,830
another issue because we cannot back

00:11:33,620 --> 00:11:38,300
hold all of them right obviously so we

00:11:36,830 --> 00:11:40,130
have to reach a balance point

00:11:38,300 --> 00:11:41,630
so I'm actually throwing this idea out

00:11:40,130 --> 00:11:44,980
is this a crazy idea

00:11:41,630 --> 00:11:49,850
- what continue to want to support

00:11:44,980 --> 00:11:53,570
support mainline stable on older

00:11:49,850 --> 00:11:57,710
releases as old as fold-out nine or 4.4

00:11:53,570 --> 00:12:00,320
or even 3.18 all of them or do we have a

00:11:57,710 --> 00:12:03,500
cut-off kind of in-between solution we

00:12:00,320 --> 00:12:07,490
say hey match it with something that's

00:12:03,500 --> 00:12:12,500
closer to it so that you're not you're

00:12:07,490 --> 00:12:15,890
not trying to have full coverage but

00:12:12,500 --> 00:12:19,610
you're saying some balancing the pain of

00:12:15,890 --> 00:12:24,740
pain of running mainline stable case of

00:12:19,610 --> 00:12:26,510
tests on very old stable the pros and

00:12:24,740 --> 00:12:28,520
cons kind of balance it out and find a

00:12:26,510 --> 00:12:33,080
sweet point where say we're getting

00:12:28,520 --> 00:12:34,460
enough we can't get the full cottage

00:12:33,080 --> 00:12:39,070
that we would get from the mainline

00:12:34,460 --> 00:12:39,070
stable but we're reducing the pain off

00:12:39,640 --> 00:12:44,420
yeah my thought on this is it's similar

00:12:42,800 --> 00:12:45,860
to a lot of any of the kernel

00:12:44,420 --> 00:12:47,870
development processes were a relatively

00:12:45,860 --> 00:12:51,290
resource constrained people have limited

00:12:47,870 --> 00:12:54,140
time and I completely agree I would love

00:12:51,290 --> 00:12:57,500
to have latest tests running on older

00:12:54,140 --> 00:12:59,209
kernels but it seems to me that in a

00:12:57,500 --> 00:13:00,730
resource-constrained environment you

00:12:59,209 --> 00:13:01,960
have to prioritize or work

00:13:00,730 --> 00:13:03,700
we're already having a lot of trouble

00:13:01,960 --> 00:13:08,410
getting people even to write tests for

00:13:03,700 --> 00:13:11,380
the latest kernel exactly so if if we

00:13:08,410 --> 00:13:14,170
can get the test environment similar to

00:13:11,380 --> 00:13:16,300
how we have a warning list build right

00:13:14,170 --> 00:13:18,010
if we don't have failures like the

00:13:16,300 --> 00:13:20,860
latest kernel should everything should

00:13:18,010 --> 00:13:23,320
pass and that seems to me that have the

00:13:20,860 --> 00:13:24,790
highest priority so once we get to the

00:13:23,320 --> 00:13:27,040
fact that it you know get to the point

00:13:24,790 --> 00:13:28,990
where it's not noisy where it is truly

00:13:27,040 --> 00:13:31,810
has meaning and you say ah it test

00:13:28,990 --> 00:13:33,100
failed you can't submit whatever broke

00:13:31,810 --> 00:13:35,380
this like you have to fix it because

00:13:33,100 --> 00:13:37,210
your that's the only warning in the

00:13:35,380 --> 00:13:38,650
entire build and we run that's the

00:13:37,210 --> 00:13:40,540
entire test suite and that's the one

00:13:38,650 --> 00:13:42,610
that broke that stands out really

00:13:40,540 --> 00:13:44,350
strongly that seems like the highest

00:13:42,610 --> 00:13:46,360
priority of the next being coverage

00:13:44,350 --> 00:13:49,030
adding as much coverage as possible and

00:13:46,360 --> 00:13:51,400
I think once the prior like the urgency

00:13:49,030 --> 00:13:52,960
of that starts to diminish then we move

00:13:51,400 --> 00:13:55,450
to saying okay now we can start pulling

00:13:52,960 --> 00:13:57,520
this back to stable trees and see what

00:13:55,450 --> 00:14:00,760
we can get but I think once we get to

00:13:57,520 --> 00:14:02,980
zero warnings eventually the old kernels

00:14:00,760 --> 00:14:04,750
will have zero warnings also and those

00:14:02,980 --> 00:14:09,430
tests will be meaningful on those

00:14:04,750 --> 00:14:12,520
kernels right only if there is that the

00:14:09,430 --> 00:14:16,480
issue of back folding so you can't just

00:14:12,520 --> 00:14:18,760
backward yes so my priority I have

00:14:16,480 --> 00:14:22,630
always done that's how you know it grew

00:14:18,760 --> 00:14:24,850
from five to seventy my priority is to

00:14:22,630 --> 00:14:29,770
get testing so that's my highest

00:14:24,850 --> 00:14:32,110
priority so I'm completely with you and

00:14:29,770 --> 00:14:37,150
Michael Michael is saying the same thing

00:14:32,110 --> 00:14:41,890
so yes that's what we want now how do we

00:14:37,150 --> 00:14:43,770
make it how do we make it easier for CI

00:14:41,890 --> 00:14:47,230
because they are adding a lot of value

00:14:43,770 --> 00:14:49,870
because when if you look at individually

00:14:47,230 --> 00:14:53,410
I run some other sorry I run some other

00:14:49,870 --> 00:14:56,230
tests and BPO folks do run their tests

00:14:53,410 --> 00:14:59,230
and every single maintainer around here

00:14:56,230 --> 00:15:05,200
or developers in subsystems they focus

00:14:59,230 --> 00:15:08,020
on their tests and I when I am sending

00:15:05,200 --> 00:15:11,240
my pool requests I focus on the bigger

00:15:08,020 --> 00:15:15,320
thing of overall testing

00:15:11,240 --> 00:15:18,950
and what dan and Anders are adding is

00:15:15,320 --> 00:15:20,810
that they are taking these tests and

00:15:18,950 --> 00:15:24,589
they are integrating they are not only

00:15:20,810 --> 00:15:27,410
integrating the tests themselves they're

00:15:24,589 --> 00:15:29,930
also looking at Cardinal bugs so they

00:15:27,410 --> 00:15:32,120
are bringing a lot of value to us in the

00:15:29,930 --> 00:15:35,779
development process so I would like to

00:15:32,120 --> 00:15:38,029
help them so that they can help us so

00:15:35,779 --> 00:15:39,529
that's one of the things so that's where

00:15:38,029 --> 00:15:42,920
the balancing act that's why I'm

00:15:39,529 --> 00:15:46,790
throwing this out to ask so I have two

00:15:42,920 --> 00:15:48,440
comments one on case comment is that the

00:15:46,790 --> 00:15:50,750
people who are most affected by this

00:15:48,440 --> 00:15:52,610
should scratch their own ich and and I'm

00:15:50,750 --> 00:15:55,790
in the embedded space where we haven't

00:15:52,610 --> 00:15:58,040
run a mainline kernel ever so we're the

00:15:55,790 --> 00:16:00,920
ones on LTS so it seems like that group

00:15:58,040 --> 00:16:04,490
out of bear the burden of doing coding

00:16:00,920 --> 00:16:06,200
and triage or whatever is required to to

00:16:04,490 --> 00:16:08,180
make it so that you can don't have to

00:16:06,200 --> 00:16:10,100
rev-match if we want the extra coverage

00:16:08,180 --> 00:16:12,680
we should put in the work so that's

00:16:10,100 --> 00:16:14,120
that's that's fine I'm willing I'm

00:16:12,680 --> 00:16:15,560
willing to do that I'm willing to push

00:16:14,120 --> 00:16:18,950
other people in the embedded community

00:16:15,560 --> 00:16:23,060
to do that but the other point is that I

00:16:18,950 --> 00:16:26,120
think it seems I don't know the code

00:16:23,060 --> 00:16:28,550
base that well but it seems like there

00:16:26,120 --> 00:16:30,980
might be opportunities to put some of

00:16:28,550 --> 00:16:34,070
this handling in a library or a shared

00:16:30,980 --> 00:16:36,560
routine the Skip list handling I know

00:16:34,070 --> 00:16:40,100
that it already does that okay it's it's

00:16:36,560 --> 00:16:43,520
all in the common code that's how common

00:16:40,100 --> 00:16:46,149
handling works okay so but yes there is

00:16:43,520 --> 00:16:48,410
tests do you need to return some of that

00:16:46,149 --> 00:16:52,430
novice happen in the test that's where

00:16:48,410 --> 00:16:53,660
we are seeing some issues here I agree

00:16:52,430 --> 00:16:55,520
that getting tests written is the first

00:16:53,660 --> 00:16:56,660
priority and that the second I agree

00:16:55,520 --> 00:16:58,339
with you keys that the second priority

00:16:56,660 --> 00:17:00,260
is getting it working better when it's

00:16:58,339 --> 00:17:02,329
matched and if that happens because if

00:17:00,260 --> 00:17:04,370
you noticed in that slide when we run on

00:17:02,329 --> 00:17:07,100
mainline we still have something like a

00:17:04,370 --> 00:17:09,829
30 percent failure rate that's like an

00:17:07,100 --> 00:17:11,630
ideal situation so that's going to get

00:17:09,829 --> 00:17:13,339
worse over time when that becomes 5 4

00:17:11,630 --> 00:17:16,370
and then we're testing that with like

00:17:13,339 --> 00:17:18,890
you know a kernel in two years so if we

00:17:16,370 --> 00:17:20,480
if we if we prioritize that and got that

00:17:18,890 --> 00:17:22,309
working well it would help with stable

00:17:20,480 --> 00:17:24,420
as well and I think the place to apply

00:17:22,309 --> 00:17:26,490
the resources would be then on

00:17:24,420 --> 00:17:27,540
and getting current tests working with

00:17:26,490 --> 00:17:30,540
older Colonels and not necessarily

00:17:27,540 --> 00:17:32,360
trying to maintain like every branch of

00:17:30,540 --> 00:17:34,650
self-test over time because that's also

00:17:32,360 --> 00:17:36,320
you know has it has a huge cost over

00:17:34,650 --> 00:17:39,000
time now we won't be able to do that

00:17:36,320 --> 00:17:40,920
definitely right I mean there is a

00:17:39,000 --> 00:17:44,580
minimal effort we can do in terms of

00:17:40,920 --> 00:17:48,840
improving Drive matched cardinal foldout

00:17:44,580 --> 00:17:54,060
fourth on 4.4 so that's good point let's

00:17:48,840 --> 00:17:57,810
get these things done and then I do need

00:17:54,060 --> 00:18:00,660
help from the LK 50 folks themselves

00:17:57,810 --> 00:18:02,790
that I'm I would like more reviews when

00:18:00,660 --> 00:18:05,700
they come in and say how this test is

00:18:02,790 --> 00:18:08,400
should skip and it's not skipping so I

00:18:05,700 --> 00:18:12,300
would like to be able to more eyes on

00:18:08,400 --> 00:18:14,580
the code from the angle that you are

00:18:12,300 --> 00:18:16,440
looking at your use case and you need to

00:18:14,580 --> 00:18:20,520
look at that use case and I have talked

00:18:16,440 --> 00:18:23,520
to I'm asking for help there and yes we

00:18:20,520 --> 00:18:25,830
do need to we need to figure out a

00:18:23,520 --> 00:18:28,110
different way so there is this other

00:18:25,830 --> 00:18:30,780
model that I need to worry about too

00:18:28,110 --> 00:18:34,140
because the way the current maintenance

00:18:30,780 --> 00:18:36,330
works is tests flow through just

00:18:34,140 --> 00:18:38,820
individual tests maintain or subject

00:18:36,330 --> 00:18:42,330
subsystems partly because there are

00:18:38,820 --> 00:18:44,730
dependencies so I I'll have to work with

00:18:42,330 --> 00:18:49,260
maintenance and figure out a better way

00:18:44,730 --> 00:18:51,090
where I can we can some of these come in

00:18:49,260 --> 00:18:54,050
through that as well because they don't

00:18:51,090 --> 00:18:56,730
get as much reviews because they're

00:18:54,050 --> 00:18:59,490
individual tests maintenance are focused

00:18:56,730 --> 00:19:02,100
on tests themselves which is good which

00:18:59,490 --> 00:19:04,890
is that's what should happen some of the

00:19:02,100 --> 00:19:07,590
framework staff sometimes I miss

00:19:04,890 --> 00:19:09,510
sometimes I don't get how visibility to

00:19:07,590 --> 00:19:11,100
some other stuff if it goes through so

00:19:09,510 --> 00:19:14,190
those are the there are some process

00:19:11,100 --> 00:19:16,830
issues also I need to work on getting it

00:19:14,190 --> 00:19:20,760
getting to a point where it's working

00:19:16,830 --> 00:19:26,600
well is there a question in the back

00:19:20,760 --> 00:19:26,600
okay any other questions or comments

00:19:30,130 --> 00:19:34,550
yeah like as an upstream maintainer all

00:19:32,450 --> 00:19:37,820
my tests to focus on upstream but I'm

00:19:34,550 --> 00:19:42,140
absolutely happy to have people who are

00:19:37,820 --> 00:19:44,060
running them downstream send me fixes to

00:19:42,140 --> 00:19:46,910
make them work there and I think in a

00:19:44,060 --> 00:19:48,490
lot of cases it's it's often trivial

00:19:46,910 --> 00:19:51,620
it's like does this syscall exist

00:19:48,490 --> 00:19:54,890
there's sometimes there's hard cases

00:19:51,620 --> 00:19:58,010
like does this bug exist which is tricky

00:19:54,890 --> 00:20:00,620
but in general I think a lot of the

00:19:58,010 --> 00:20:01,940
tests should be out of run the mainline

00:20:00,620 --> 00:20:07,040
test should be out of run clean against

00:20:01,940 --> 00:20:08,000
stable with a few little tweaks but

00:20:07,040 --> 00:20:11,960
maybe I'm wrong

00:20:08,000 --> 00:20:14,240
y'all can tell me I think yeah there's

00:20:11,960 --> 00:20:15,950
definitely a willingness to have little

00:20:14,240 --> 00:20:17,570
warts in the tests if that's what we

00:20:15,950 --> 00:20:19,910
need it's just all the upstream

00:20:17,570 --> 00:20:21,650
developers don't that's not a focus

00:20:19,910 --> 00:20:24,860
they're not thinking about that when

00:20:21,650 --> 00:20:26,690
they're writing tests so I think I mean

00:20:24,860 --> 00:20:29,620
I agree with Tim like the people

00:20:26,690 --> 00:20:32,090
downstream need to do that work cuz yeah

00:20:29,620 --> 00:20:37,160
upstream we're just trying to get tests

00:20:32,090 --> 00:20:42,500
in as fast as fast as we can so Michael

00:20:37,160 --> 00:20:47,570
being one of the ones that helped put a

00:20:42,500 --> 00:20:49,550
lot of the K self-test generate code I'm

00:20:47,570 --> 00:20:52,870
not what we are concerned about PowerPC

00:20:49,550 --> 00:20:57,400
at all so how you look at that

00:20:52,870 --> 00:21:00,170
yes there are some individual tests main

00:20:57,400 --> 00:21:01,490
developers sometimes maintenance they

00:21:00,170 --> 00:21:03,170
are what are you worried about the

00:21:01,490 --> 00:21:05,320
content of the test that's where it

00:21:03,170 --> 00:21:09,980
should be so that's why I'm trying to

00:21:05,320 --> 00:21:11,420
take this as a car general case of test

00:21:09,980 --> 00:21:14,960
problem

00:21:11,420 --> 00:21:17,270
that will fall obviously under under my

00:21:14,960 --> 00:21:19,400
responsibility I just I need support

00:21:17,270 --> 00:21:20,150
more support from individual tests

00:21:19,400 --> 00:21:22,610
maintainer

00:21:20,150 --> 00:21:24,410
so when I go and say this test is

00:21:22,610 --> 00:21:27,410
failing I want to be able to get

00:21:24,410 --> 00:21:29,030
response saying yeah we will we will

00:21:27,410 --> 00:21:31,790
help you fix and then you're absolutely

00:21:29,030 --> 00:21:34,940
right we can get more traction if we

00:21:31,790 --> 00:21:37,430
focused on the latest yeah I'm in the

00:21:34,940 --> 00:21:39,240
same position like sure I'll take a I'll

00:21:37,430 --> 00:21:41,520
take backwards to make things

00:21:39,240 --> 00:21:44,040
work better with the older kernels to

00:21:41,520 --> 00:21:46,470
that end I think it helps to classify a

00:21:44,040 --> 00:21:48,840
test you know because there's testing

00:21:46,470 --> 00:21:51,030
that a bug doesn't exist which that

00:21:48,840 --> 00:21:52,260
should be that should definitely pass on

00:21:51,030 --> 00:21:53,970
the stable kernels because it was a

00:21:52,260 --> 00:21:56,429
serious enough bug to add a test for it

00:21:53,970 --> 00:21:58,350
that that should be fixed in the stable

00:21:56,429 --> 00:22:00,540
kernels also so absolutely I want to

00:21:58,350 --> 00:22:02,850
back birth that feature additions get

00:22:00,540 --> 00:22:05,730
weird because sometimes a feature got

00:22:02,850 --> 00:22:07,920
back ported so if it's in the kernel and

00:22:05,730 --> 00:22:11,130
it's hard to detect or like that that

00:22:07,920 --> 00:22:15,120
starts getting strange but I think maybe

00:22:11,130 --> 00:22:16,230
having documentation somewhere maybe it

00:22:15,120 --> 00:22:18,780
already exists and I just haven't found

00:22:16,230 --> 00:22:20,720
enough to say here are the classes of

00:22:18,780 --> 00:22:23,100
tests we'd expect in the back porting

00:22:20,720 --> 00:22:24,870
you know what we'd expect for a bug fix

00:22:23,100 --> 00:22:26,820
test you should the bugs you've already

00:22:24,870 --> 00:22:28,650
fixed and do this and like sort of break

00:22:26,820 --> 00:22:30,570
down all the pieces and probably the top

00:22:28,650 --> 00:22:32,940
of that is all your tests should pass in

00:22:30,570 --> 00:22:35,130
main line as the first requirement

00:22:32,940 --> 00:22:36,630
that's where I've with any changes I've

00:22:35,130 --> 00:22:39,210
always pointed people at documentation

00:22:36,630 --> 00:22:42,300
right so there is documentation that

00:22:39,210 --> 00:22:45,840
exists and then there is a I probably

00:22:42,300 --> 00:22:49,410
should turn my slide set that I linked

00:22:45,840 --> 00:22:52,740
from the K self test Vicki into a proper

00:22:49,410 --> 00:22:55,770
document potentially I do when I review

00:22:52,740 --> 00:22:59,340
I always ask these questions when I'm

00:22:55,770 --> 00:23:02,330
doing the ruies unfortunately there are

00:22:59,340 --> 00:23:04,980
some patches that get in without getting

00:23:02,330 --> 00:23:07,050
that framework reviewed that's one of

00:23:04,980 --> 00:23:12,559
the things that I'm trying to fix also I

00:23:07,050 --> 00:23:18,510
review or and I'm asking help from

00:23:12,559 --> 00:23:21,240
others to review as well so and and then

00:23:18,510 --> 00:23:23,160
if you are also maintained at individual

00:23:21,240 --> 00:23:25,260
test subsystem maintenance are also

00:23:23,160 --> 00:23:27,120
aware of these problems that's why we're

00:23:25,260 --> 00:23:28,050
discussing this then you will be looking

00:23:27,120 --> 00:23:31,050
for them as well

00:23:28,050 --> 00:23:32,820
yourself right because there are three

00:23:31,050 --> 00:23:35,520
kinds of dependencies that we are

00:23:32,820 --> 00:23:38,280
looking at tool dependencies and such we

00:23:35,520 --> 00:23:41,370
can handle that in the framework the

00:23:38,280 --> 00:23:43,559
second one is reporting skips and

00:23:41,370 --> 00:23:46,710
recognizing stuff I don't want to build

00:23:43,559 --> 00:23:49,740
an individual test to do that the third

00:23:46,710 --> 00:23:50,930
part is the variations on how do we

00:23:49,740 --> 00:23:53,990
recognize there is three

00:23:50,930 --> 00:23:55,550
the things we do right now the scripts

00:23:53,990 --> 00:23:57,470
that depend on our dependent are

00:23:55,550 --> 00:24:01,580
dependent on a module when they are

00:23:57,470 --> 00:24:04,070
loading they try to that's the thing

00:24:01,580 --> 00:24:06,110
that you you if the module doesn't exist

00:24:04,070 --> 00:24:08,330
you skip and you go through that process

00:24:06,110 --> 00:24:09,910
and the second kind of dependency is

00:24:08,330 --> 00:24:12,530
config option dependency and

00:24:09,910 --> 00:24:15,520
architectural dependency so we have been

00:24:12,530 --> 00:24:18,620
making improvements in that so it's not

00:24:15,520 --> 00:24:20,270
100% yet that's where the continuous

00:24:18,620 --> 00:24:23,290
improvement comes in it's almost

00:24:20,270 --> 00:24:25,820
sometimes it's like shaoling snow

00:24:23,290 --> 00:24:28,250
traveling while snow is falling because

00:24:25,820 --> 00:24:30,230
we have tests coming in as well so they

00:24:28,250 --> 00:24:32,690
are bringing skips they are bringing

00:24:30,230 --> 00:24:35,030
these kinds of dependency checks missing

00:24:32,690 --> 00:24:40,000
dependency checks and the third one is

00:24:35,030 --> 00:24:42,830
also system calls so that falls into

00:24:40,000 --> 00:24:47,150
sometimes the category of test content

00:24:42,830 --> 00:24:50,180
itself so what that means is that if a

00:24:47,150 --> 00:24:53,480
system call based on the system call

00:24:50,180 --> 00:24:55,880
returns you might have to say feature is

00:24:53,480 --> 00:24:57,680
missing and skipped verses so there are

00:24:55,880 --> 00:25:00,350
three or four different kinds of

00:24:57,680 --> 00:25:02,540
dependency checks that have to happen so

00:25:00,350 --> 00:25:05,720
some of them fall into test content I

00:25:02,540 --> 00:25:08,960
look at the framework closely and then

00:25:05,720 --> 00:25:12,200
if somebody sends a test script and say

00:25:08,960 --> 00:25:15,350
if there is a root check another aspect

00:25:12,200 --> 00:25:19,700
is coverage that means if you have 10

00:25:15,350 --> 00:25:22,820
tests but only one of them requires this

00:25:19,700 --> 00:25:26,390
certain dependency and rest can run so

00:25:22,820 --> 00:25:29,060
that just that test should fail on that

00:25:26,390 --> 00:25:32,030
dependency or skip on the dependency run

00:25:29,060 --> 00:25:34,100
other line and then coming back to that

00:25:32,030 --> 00:25:36,170
I look at the look at those kinds of

00:25:34,100 --> 00:25:39,890
things for framework high level

00:25:36,170 --> 00:25:43,220
framework things and I do give comments

00:25:39,890 --> 00:25:45,890
on that what I can't

00:25:43,220 --> 00:25:48,110
potentially have either expertise or to

00:25:45,890 --> 00:25:51,260
tell the nuances of the third the last

00:25:48,110 --> 00:25:53,840
kind of last one we mentioned the actual

00:25:51,260 --> 00:25:56,030
the that depends on actual feature and

00:25:53,840 --> 00:25:59,240
how that somebody has to know I have to

00:25:56,030 --> 00:26:02,660
have the knowledge of what should happen

00:25:59,240 --> 00:26:03,160
and I can't I just won't be able to do

00:26:02,660 --> 00:26:05,290
that

00:26:03,160 --> 00:26:08,470
so that's where I need help so it's

00:26:05,290 --> 00:26:10,960
probably a process of asking that's why

00:26:08,470 --> 00:26:14,110
I'm asking support from test individual

00:26:10,960 --> 00:26:17,920
test maintainer saying I would like to

00:26:14,110 --> 00:26:21,130
have awareness that the value of the

00:26:17,920 --> 00:26:27,430
value CI is adding and that how can we

00:26:21,130 --> 00:26:30,250
make it easy so I think you probably

00:26:27,430 --> 00:26:33,460
covered this in the last few minutes but

00:26:30,250 --> 00:26:36,820
so what I work on the live patching self

00:26:33,460 --> 00:26:38,800
tests and generally you know we've

00:26:36,820 --> 00:26:41,170
gotten to the point where we kind of

00:26:38,800 --> 00:26:44,320
have all the the tests that we initially

00:26:41,170 --> 00:26:46,390
you know kind of want it and when we

00:26:44,320 --> 00:26:49,360
have patch sets up for a review that add

00:26:46,390 --> 00:26:51,790
new features or heavily modifier or

00:26:49,360 --> 00:26:55,210
subtract features we like to see a self

00:26:51,790 --> 00:26:58,720
tests come along with that and I think

00:26:55,210 --> 00:27:01,330
our perspective is that when we write

00:26:58,720 --> 00:27:03,580
those tests so that we are targeting the

00:27:01,330 --> 00:27:06,130
latest upstream you know what my patch

00:27:03,580 --> 00:27:07,870
set is implementing so I just wanted to

00:27:06,130 --> 00:27:10,720
share with you like I don't think we've

00:27:07,870 --> 00:27:14,170
ever thought of the possibility of

00:27:10,720 --> 00:27:16,210
somebody just grabbing the upstream like

00:27:14,170 --> 00:27:19,390
live patch self test and then running

00:27:16,210 --> 00:27:22,840
that against you know a kernel from a

00:27:19,390 --> 00:27:25,570
few versions past so if that's something

00:27:22,840 --> 00:27:29,770
that you know people want to do then I

00:27:25,570 --> 00:27:32,500
think you know we'll need a way to kind

00:27:29,770 --> 00:27:37,090
of Express that I guess somehow in the

00:27:32,500 --> 00:27:41,160
tests it's it's very easy for me if I'm

00:27:37,090 --> 00:27:43,000
back porting self tests back to say rel

00:27:41,160 --> 00:27:45,510
because I could just bring all the

00:27:43,000 --> 00:27:48,220
Associated kernel code that you know

00:27:45,510 --> 00:27:49,990
supports those features but somebody's

00:27:48,220 --> 00:27:53,680
not as familiar with that and wants to

00:27:49,990 --> 00:27:55,900
run again upstream k self tests against

00:27:53,680 --> 00:27:57,940
you know something in stable that's

00:27:55,900 --> 00:28:01,120
something I don't think we had had kind

00:27:57,940 --> 00:28:03,610
of anticipated right so your test is a

00:28:01,120 --> 00:28:06,430
good example of it test coming in that

00:28:03,610 --> 00:28:09,100
can provide coverage on stable right you

00:28:06,430 --> 00:28:11,490
if you have live patch in some other

00:28:09,100 --> 00:28:15,970
stables so because you're adding in new

00:28:11,490 --> 00:28:19,690
you're adding a new coverage area for

00:28:15,970 --> 00:28:22,360
the stable because if you have supported

00:28:19,690 --> 00:28:24,400
in the life life I mean in the stable

00:28:22,360 --> 00:28:28,960
life patch in the stable and then you're

00:28:24,400 --> 00:28:32,410
adding each test new right so we have to

00:28:28,960 --> 00:28:35,430
figure out a way to do that and I can we

00:28:32,410 --> 00:28:38,770
can work to the other on getting that

00:28:35,430 --> 00:28:40,930
maybe everything now looks as a nail to

00:28:38,770 --> 00:28:44,920
me but it seems the answer to the Miss

00:28:40,930 --> 00:28:47,680
dependence assisting somebody sense is

00:28:44,920 --> 00:28:49,390
testing simply chickens as the body

00:28:47,680 --> 00:28:51,700
sends a change with the new test it's

00:28:49,390 --> 00:28:55,450
within reasonable latency run on the

00:28:51,700 --> 00:28:57,910
older version of the kernel and the

00:28:55,450 --> 00:29:00,610
review gets you know message that this

00:28:57,910 --> 00:29:03,550
this test is broken on an older LTS and

00:29:00,610 --> 00:29:05,530
then developer fixes this even before

00:29:03,550 --> 00:29:07,720
this submitted I don't think that

00:29:05,530 --> 00:29:09,460
throwing in more people and ice and this

00:29:07,720 --> 00:29:13,180
problem is kind of scalable and reliable

00:29:09,460 --> 00:29:17,800
solution and also not the right just

00:29:13,180 --> 00:29:19,990
right way to spend I'm sorry Linux next

00:29:17,800 --> 00:29:25,170
we do that that's the whole integration

00:29:19,990 --> 00:29:25,170
process in Linux next so that's we do

00:29:26,760 --> 00:29:31,000
because that's what the problem we're

00:29:28,960 --> 00:29:34,840
trying to solve and within reasonable

00:29:31,000 --> 00:29:37,330
latency of their right that's one of the

00:29:34,840 --> 00:29:41,290
things we have been talking about so

00:29:37,330 --> 00:29:44,110
that when during that process of merge

00:29:41,290 --> 00:29:46,420
window that potentially we run it on

00:29:44,110 --> 00:29:49,330
stables as well if that is the supported

00:29:46,420 --> 00:29:52,690
use case yes so one observation is that

00:29:49,330 --> 00:29:55,930
in the file system space where XFS tests

00:29:52,690 --> 00:29:59,410
is always out of tree one of the models

00:29:55,930 --> 00:30:02,560
that we've developed in ext4 is when we

00:29:59,410 --> 00:30:05,620
add new features we actually add a zero

00:30:02,560 --> 00:30:09,460
length file and Sisyphus so slash cysts

00:30:05,620 --> 00:30:11,560
FS ext4 feature name because that's how

00:30:09,460 --> 00:30:13,750
we can make the tests easily key off of

00:30:11,560 --> 00:30:17,590
whether or not a feature gets back

00:30:13,750 --> 00:30:20,530
ported to say an Android kernel without

00:30:17,590 --> 00:30:22,330
having to do explicit version checks and

00:30:20,530 --> 00:30:25,030
since we know that that's just something

00:30:22,330 --> 00:30:27,130
that's going to happen we just developed

00:30:25,030 --> 00:30:28,100
that as part of our feature development

00:30:27,130 --> 00:30:30,260
sort of

00:30:28,100 --> 00:30:32,240
you know and I think this goes in with a

00:30:30,260 --> 00:30:35,000
lot of stuff k units gonna be the same

00:30:32,240 --> 00:30:37,520
as sometimes you have to make changes to

00:30:35,000 --> 00:30:44,150
how you develop your features to make it

00:30:37,520 --> 00:30:45,860
be more easily testable so so I think I

00:30:44,150 --> 00:30:50,090
have a couple more things I want to

00:30:45,860 --> 00:30:51,380
cover about yeah I listen app armour we

00:30:50,090 --> 00:30:53,330
do the same thing we do feature flags

00:30:51,380 --> 00:30:55,039
and it makes testing so much easier you

00:30:53,330 --> 00:30:56,539
can key off that and it just makes it a

00:30:55,039 --> 00:30:58,970
lot easier to know if we've backported a

00:30:56,539 --> 00:31:00,289
certain feature or what kernel has that

00:30:58,970 --> 00:31:02,539
feature and then I want to touch on

00:31:00,289 --> 00:31:04,970
Dimitri's point that if we were able to

00:31:02,539 --> 00:31:08,150
do automated testing of stable kernels

00:31:04,970 --> 00:31:10,669
based upon the latest changes in tip I

00:31:08,150 --> 00:31:14,000
mean not only would that be able to tell

00:31:10,669 --> 00:31:16,280
us you know it what's it would also let

00:31:14,000 --> 00:31:19,070
us know what's missing in those stable

00:31:16,280 --> 00:31:20,990
kernels like maybe there's a fixes tag

00:31:19,070 --> 00:31:22,400
that's missing on that patch because it

00:31:20,990 --> 00:31:24,650
actually does fix a bug that needs to be

00:31:22,400 --> 00:31:26,510
back ported and otherwise that wouldn't

00:31:24,650 --> 00:31:29,360
make it back to stable so so if a new

00:31:26,510 --> 00:31:32,330
test or a new change causes causes old

00:31:29,360 --> 00:31:34,400
kernels to fail then it's it's a really

00:31:32,330 --> 00:31:35,929
nice feedback loop to know that yeah

00:31:34,400 --> 00:31:38,270
there's a real bug here that needs to be

00:31:35,929 --> 00:31:40,100
fixed and back ported so that's one of

00:31:38,270 --> 00:31:42,230
the reasons I have been that's one of

00:31:40,100 --> 00:31:44,120
the things I have in mind when I when I

00:31:42,230 --> 00:31:47,900
when I encourage when I have been

00:31:44,120 --> 00:31:50,870
talking about it so that better coverage

00:31:47,900 --> 00:31:54,980
better coming and all of that and then

00:31:50,870 --> 00:31:55,490
another thing is fixing these when the

00:31:54,980 --> 00:31:58,640
Bell

00:31:55,490 --> 00:31:59,059
sometimes I if you find a problem like

00:31:58,640 --> 00:32:02,120
that

00:31:59,059 --> 00:32:05,240
just send me patch because that would be

00:32:02,120 --> 00:32:11,260
something we have to prioritize and put

00:32:05,240 --> 00:32:11,260
that in so how are we doing on time

00:32:11,429 --> 00:32:18,129
okay okay great

00:32:13,960 --> 00:32:20,499
so I think we kind of so the the other

00:32:18,129 --> 00:32:22,450
things that was the highest priority

00:32:20,499 --> 00:32:24,129
that I was trying to get answer for and

00:32:22,450 --> 00:32:25,960
the other things is that we are

00:32:24,129 --> 00:32:28,029
increasing arm coverage last time I

00:32:25,960 --> 00:32:30,759
asked last year when I did this I asked

00:32:28,029 --> 00:32:33,639
hey we're missing arm chest so we have

00:32:30,759 --> 00:32:35,710
added bunted them we need still needs

00:32:33,639 --> 00:32:38,470
work but you can see the numb from the

00:32:35,710 --> 00:32:41,649
numbers that number of tests that run on

00:32:38,470 --> 00:32:46,960
arm or and we need driver coverage and

00:32:41,649 --> 00:32:48,850
we're improving that and so identifying

00:32:46,960 --> 00:32:50,860
dependencies I kind of covered that that

00:32:48,850 --> 00:32:53,190
is a part of the see I think we have to

00:32:50,860 --> 00:32:55,809
identify dependencies like for example

00:32:53,190 --> 00:32:57,820
x86 tests that is something tests

00:32:55,809 --> 00:33:00,429
individual tests maintenance can do also

00:32:57,820 --> 00:33:02,759
thinking about the dependencies and do

00:33:00,429 --> 00:33:05,950
they want to handle that in the in their

00:33:02,759 --> 00:33:09,879
shell scripts or wrappers that they run

00:33:05,950 --> 00:33:12,669
because x86 does that 32-bit libraries

00:33:09,879 --> 00:33:14,799
are missing then at least it spits out

00:33:12,669 --> 00:33:17,679
and says hey load this at least

00:33:14,799 --> 00:33:19,389
instructions on how to load so we have

00:33:17,679 --> 00:33:21,460
to continue start continuing to do that

00:33:19,389 --> 00:33:25,570
some of the things we probably can do at

00:33:21,460 --> 00:33:28,240
the framework level which I can we can

00:33:25,570 --> 00:33:31,450
make that happen in and but the some of

00:33:28,240 --> 00:33:35,919
that falls into the test individual

00:33:31,450 --> 00:33:38,409
tests as well so the third the last item

00:33:35,919 --> 00:33:41,049
here probably is another thing I wanted

00:33:38,409 --> 00:33:46,869
to discuss because k build integration

00:33:41,049 --> 00:33:49,029
has been has been because it sits under

00:33:46,869 --> 00:33:51,519
tools it has been somewhat problematic

00:33:49,029 --> 00:33:53,379
it kind of sits there and it does it's

00:33:51,519 --> 00:34:00,220
not really integrated with K build at

00:33:53,379 --> 00:34:02,919
the moment and Michael okay yes the

00:34:00,220 --> 00:34:04,960
question I have sort of district urging

00:34:02,919 --> 00:34:07,269
people is should it be integrated with

00:34:04,960 --> 00:34:11,139
cable what would it be better if we just

00:34:07,269 --> 00:34:14,950
used Mason or whatever right some other

00:34:11,139 --> 00:34:16,450
thing you know because it's KB builds

00:34:14,950 --> 00:34:21,339
for building the kernel and this is not

00:34:16,450 --> 00:34:22,780
kernel code so I'm not sure I feel like

00:34:21,339 --> 00:34:24,440
k board might actually be worse for

00:34:22,780 --> 00:34:26,629
packaging people

00:34:24,440 --> 00:34:27,859
but I'm not sure because I would sort of

00:34:26,629 --> 00:34:30,049
mean you have to build it with the

00:34:27,859 --> 00:34:32,990
kernel whereas now you can actually its

00:34:30,049 --> 00:34:35,780
standalone you can you can build it

00:34:32,990 --> 00:34:38,569
separately so yeah tonight right that's

00:34:35,780 --> 00:34:41,089
actually a question to say should it be

00:34:38,569 --> 00:34:44,569
integrated with cable because there have

00:34:41,089 --> 00:34:48,799
been okay so that's actually question

00:34:44,569 --> 00:34:51,530
yeah so it looks like there is a opinion

00:34:48,799 --> 00:34:53,720
on should it be integrated or should it

00:34:51,530 --> 00:34:55,940
not so that's as long as you don't lose

00:34:53,720 --> 00:34:57,589
any features so cross-compile is

00:34:55,940 --> 00:35:00,140
absolutely essential for an embedded

00:34:57,589 --> 00:35:02,690
world so don't lose K build output don't

00:35:00,140 --> 00:35:04,730
lose OE qual at that type of stuff as

00:35:02,690 --> 00:35:10,250
long as you don't lose those features

00:35:04,730 --> 00:35:12,920
then sure why not we have to yeah that

00:35:10,250 --> 00:35:14,539
that's where that's what that's the

00:35:12,920 --> 00:35:17,480
product that's why I'm asking this

00:35:14,539 --> 00:35:20,960
question because some of the things I'm

00:35:17,480 --> 00:35:22,430
sorry some of the okay the one thing

00:35:20,960 --> 00:35:24,470
I'll add here is I think it really

00:35:22,430 --> 00:35:27,230
depends on who you want to be running

00:35:24,470 --> 00:35:29,660
the tests and I think that's actually

00:35:27,230 --> 00:35:32,690
one of the issues with GCE XFS test

00:35:29,660 --> 00:35:35,119
versus CI which is if you are building a

00:35:32,690 --> 00:35:37,579
test system that is designed for use for

00:35:35,119 --> 00:35:40,130
developers you're going to optimize it

00:35:37,579 --> 00:35:41,779
in a certain direction if you're trying

00:35:40,130 --> 00:35:43,339
to build something so that it can be

00:35:41,779 --> 00:35:46,640
used as part of continuous integration

00:35:43,339 --> 00:35:49,039
or by a distro builder it's going to get

00:35:46,640 --> 00:35:51,500
pushed in a different direction and the

00:35:49,039 --> 00:35:54,559
challenge is can we make a system that

00:35:51,500 --> 00:35:56,359
can be easy for curl developers and

00:35:54,559 --> 00:35:59,839
maintain errs who are trying to evaluate

00:35:56,359 --> 00:36:01,430
an incoming patch right versus people

00:35:59,839 --> 00:36:03,950
who want to run it under continuous

00:36:01,430 --> 00:36:06,200
integration or as part of a distro build

00:36:03,950 --> 00:36:08,930
process right and those are really

00:36:06,200 --> 00:36:11,900
really different right so so we are

00:36:08,930 --> 00:36:14,960
right now I am heavily tilted towards

00:36:11,900 --> 00:36:17,180
developers and that's where that's the

00:36:14,960 --> 00:36:20,480
primary goal for this subsystem of

00:36:17,180 --> 00:36:23,960
course and so that's the balance point

00:36:20,480 --> 00:36:26,240
so that's why is that arguing for K

00:36:23,960 --> 00:36:29,599
builder integration or I'm not sure I'm

00:36:26,240 --> 00:36:32,750
not arguing for cabled integration with

00:36:29,599 --> 00:36:36,319
this last bullet item I'm not I am

00:36:32,750 --> 00:36:38,690
asking because it keeps coming up so I

00:36:36,319 --> 00:36:41,150
keep explaining

00:36:38,690 --> 00:36:44,270
I would like to keep this as a easier

00:36:41,150 --> 00:36:46,070
maintainer sigh developers because

00:36:44,270 --> 00:36:48,620
that's why I don't entertain the idea of

00:36:46,070 --> 00:36:50,150
integration with Jenkins or integration

00:36:48,620 --> 00:36:57,410
with all sorts of other things no

00:36:50,150 --> 00:37:02,300
external dependencies so I'm not so what

00:36:57,410 --> 00:37:04,130
I am asking is if because I keep hearing

00:37:02,300 --> 00:37:07,430
oh it's not integrated with cable we

00:37:04,130 --> 00:37:09,440
can't run or we can't do this because we

00:37:07,430 --> 00:37:12,410
can't run because of some of the

00:37:09,440 --> 00:37:14,420
features that that automatically come

00:37:12,410 --> 00:37:16,190
because of cabled because I'm we're

00:37:14,420 --> 00:37:19,060
duplicating a lot of this stuff I have

00:37:16,190 --> 00:37:23,030
done it Michel has done it we do the

00:37:19,060 --> 00:37:25,400
building out of tree when we run case

00:37:23,030 --> 00:37:29,510
self-test people come and say well our

00:37:25,400 --> 00:37:32,240
repo is rapport gets dirty we need to

00:37:29,510 --> 00:37:34,400
run make repair and then you know that

00:37:32,240 --> 00:37:38,360
we have had these discussions before so

00:37:34,400 --> 00:37:40,790
it becomes harder and harder to bring

00:37:38,360 --> 00:37:42,590
the features cabled duplicate cable

00:37:40,790 --> 00:37:45,980
Beacher's it's not worthwhile to do that

00:37:42,590 --> 00:37:47,510
so is there is that a if that is a

00:37:45,980 --> 00:37:49,790
required one of the things that

00:37:47,510 --> 00:37:52,640
developer wants developers want which

00:37:49,790 --> 00:37:54,440
seems like the case some developers

00:37:52,640 --> 00:37:56,420
don't want to run this because they get

00:37:54,440 --> 00:37:58,970
repo it gets dirty then we need to

00:37:56,420 --> 00:38:01,490
address that as a developer requirement

00:37:58,970 --> 00:38:04,310
and I suspect the main thing is what

00:38:01,490 --> 00:38:07,600
developers really want is no matter what

00:38:04,310 --> 00:38:10,280
their workflow whether they're using a

00:38:07,600 --> 00:38:13,610
subdirectory or something else they want

00:38:10,280 --> 00:38:15,230
to be able to run like at most you know

00:38:13,610 --> 00:38:17,990
it should take less than I don't know

00:38:15,230 --> 00:38:20,600
fifteen sixteen characters to type right

00:38:17,990 --> 00:38:24,140
if you have to you know run dot slash

00:38:20,600 --> 00:38:26,930
tools dot slash scripts ok unit you know

00:38:24,140 --> 00:38:30,380
- J whatever right the longer it takes

00:38:26,930 --> 00:38:32,690
to run to type the harder it is so and

00:38:30,380 --> 00:38:34,520
that can be both that can be both an

00:38:32,690 --> 00:38:38,120
right I mean that just means you need to

00:38:34,520 --> 00:38:40,520
have a you know make whatever that runs

00:38:38,120 --> 00:38:44,060
that long command it doesn't mean that

00:38:40,520 --> 00:38:46,720
that has to be the only way you run k

00:38:44,060 --> 00:38:46,720
self tests

00:38:47,520 --> 00:38:58,820
Michael yeah say one of the things that

00:38:54,390 --> 00:39:01,890
we still I think support is some of the

00:38:58,820 --> 00:39:03,110
sub directories of self tests people

00:39:01,890 --> 00:39:06,150
want to be able to build that

00:39:03,110 --> 00:39:07,890
self-contained you know like yes the x86

00:39:06,150 --> 00:39:11,580
people want to just be able to run make

00:39:07,890 --> 00:39:14,130
in their directory okay and so you know

00:39:11,580 --> 00:39:17,460
k build would break that I think care

00:39:14,130 --> 00:39:19,020
would be and possibly one of the funky

00:39:17,460 --> 00:39:22,500
new build systems would also break that

00:39:19,020 --> 00:39:24,720
but maybe we're at a stage where we can

00:39:22,500 --> 00:39:27,720
say that's not a feature anymore but

00:39:24,720 --> 00:39:31,260
yeah I guess what we have now was very

00:39:27,720 --> 00:39:33,900
minimal to you know put a little bit of

00:39:31,260 --> 00:39:37,530
structure around and not impose anything

00:39:33,900 --> 00:39:39,810
on the test writers great and you know

00:39:37,530 --> 00:39:42,270
finding that balance is tricky so you

00:39:39,810 --> 00:39:44,880
can run care self-test with doing make a

00:39:42,270 --> 00:39:47,190
case helped us very easily now are make

00:39:44,880 --> 00:39:49,320
a self-test with a few targets if you

00:39:47,190 --> 00:39:50,760
want to so there it's all documented in

00:39:49,320 --> 00:39:52,470
the case self-test document by the way

00:39:50,760 --> 00:39:54,480
so it's a matter of going and looking at

00:39:52,470 --> 00:39:56,280
it but I think I think part of it is

00:39:54,480 --> 00:39:58,290
that people are used have their own

00:39:56,280 --> 00:40:02,010
workflows different developers and

00:39:58,290 --> 00:40:03,960
maintain errs and then they integrate it

00:40:02,010 --> 00:40:07,860
into their testing some of this workflow

00:40:03,960 --> 00:40:11,850
like networking and BPF they'd so that's

00:40:07,860 --> 00:40:14,280
one of the reasons we have I have been

00:40:11,850 --> 00:40:17,430
continuing to support all the existing

00:40:14,280 --> 00:40:21,180
use cases like for example you can run

00:40:17,430 --> 00:40:24,120
make case of test and give the directory

00:40:21,180 --> 00:40:29,280
name directly invoke that build and test

00:40:24,120 --> 00:40:32,280
so and it's a long path name so moving

00:40:29,280 --> 00:40:34,110
it up in respect might solve with or

00:40:32,280 --> 00:40:36,060
without cable integration might solve

00:40:34,110 --> 00:40:39,230
that problem that's another question but

00:40:36,060 --> 00:40:41,370
that means that's that means the stable

00:40:39,230 --> 00:40:43,860
fixes going into stable will be

00:40:41,370 --> 00:40:47,550
difficult so that's a second thing that

00:40:43,860 --> 00:40:52,950
if we can make it more visible if we

00:40:47,550 --> 00:40:55,140
move it up to right under the root so

00:40:52,950 --> 00:40:58,020
that's a separate question based not

00:40:55,140 --> 00:41:01,160
necessarily coupled with gabled so how

00:40:58,020 --> 00:41:01,160
do people feel about

00:41:05,470 --> 00:41:11,180
well back pointing to stables becomes a

00:41:09,260 --> 00:41:13,609
little bit of problematic things and in

00:41:11,180 --> 00:41:15,880
right if you pass changes or is it not a

00:41:13,609 --> 00:41:15,880
problem

00:41:16,180 --> 00:41:21,770
can I just ask a quick question we have

00:41:18,740 --> 00:41:23,299
the microphone um apologies if this has

00:41:21,770 --> 00:41:25,849
been mentioned I couldn't make the start

00:41:23,299 --> 00:41:27,650
of this session one thing that came up

00:41:25,849 --> 00:41:32,299
when I was reviewing some of the arm

00:41:27,650 --> 00:41:34,430
tests recently is it's not completely

00:41:32,299 --> 00:41:37,190
clear where the K self test should be

00:41:34,430 --> 00:41:39,970
working against any random version of

00:41:37,190 --> 00:41:43,490
the you API headers I think by default

00:41:39,970 --> 00:41:45,530
you tend to if you just include like

00:41:43,490 --> 00:41:47,450
Linux Flash Player you tend to use

00:41:45,530 --> 00:41:49,690
whatever headers the tool chain was

00:41:47,450 --> 00:41:53,390
built with all the host headers and

00:41:49,690 --> 00:41:54,920
should we always be using the kernel the

00:41:53,390 --> 00:41:56,210
new API headers for the kernel tree that

00:41:54,920 --> 00:41:59,240
we build again and make sure those are

00:41:56,210 --> 00:42:00,440
installed somewhere so some yeah go

00:41:59,240 --> 00:42:02,450
ahead it's the second part to that

00:42:00,440 --> 00:42:04,130
question notice now that was all of it

00:42:02,450 --> 00:42:08,599
really there may just be some wiring up

00:42:04,130 --> 00:42:12,890
that we missed but um it's um you can

00:42:08,599 --> 00:42:15,619
specify you have a self test should run

00:42:12,890 --> 00:42:18,020
with the headers that is matter of

00:42:15,619 --> 00:42:20,780
matched with the kernel so don't expect

00:42:18,020 --> 00:42:23,690
it to work with other versions I

00:42:20,780 --> 00:42:26,809
understand correct okay because it'll

00:42:23,690 --> 00:42:29,390
have header dependencies and there are

00:42:26,809 --> 00:42:31,430
some tests that go install their headers

00:42:29,390 --> 00:42:35,230
so that's a part of the install process

00:42:31,430 --> 00:42:37,549
so okay I'll take another look at that

00:42:35,230 --> 00:42:41,420
so I think we're into lunch I think

00:42:37,549 --> 00:42:43,099
there was one last question and yeah so

00:42:41,420 --> 00:42:45,200
I was just pointing out you brought up

00:42:43,099 --> 00:42:47,030
the question of you know if it's gonna

00:42:45,200 --> 00:42:51,559
be harder to back port patches to stable

00:42:47,030 --> 00:42:53,599
if if we move the the directory but I

00:42:51,559 --> 00:42:56,420
think we aren't settled on whether or

00:42:53,599 --> 00:42:59,990
not we're going to back port the they

00:42:56,420 --> 00:43:02,750
changes there's any good manner so we do

00:42:59,990 --> 00:43:05,780
backward fixes right we do our selection

00:43:02,750 --> 00:43:10,869
and we do some several art of selection

00:43:05,780 --> 00:43:10,869
so so Greg do you have a preference or

00:43:13,390 --> 00:43:17,930
if you tell me you're moving directories

00:43:15,650 --> 00:43:19,850
I can my it doesn't bother me

00:43:17,930 --> 00:43:22,460
we've had many subsystems to networking

00:43:19,850 --> 00:43:24,140
has done this media has done this this

00:43:22,460 --> 00:43:27,670
would be trivial ok

00:43:24,140 --> 00:43:31,190
oh no I'm not answering that question

00:43:27,670 --> 00:43:32,930
I'm answering the question about stable

00:43:31,190 --> 00:43:34,880
don't worry moving directories do not

00:43:32,930 --> 00:43:36,830
consider me in that doing this is best

00:43:34,880 --> 00:43:39,470
for you ok

00:43:36,830 --> 00:43:40,970
thank you thank you I'll probably go

00:43:39,470 --> 00:43:44,060
ahead and I'm going to go ahead and move

00:43:40,970 --> 00:43:46,670
it in that case the cable the

00:43:44,060 --> 00:43:50,150
integration is a separate issue

00:43:46,670 --> 00:43:52,130
so okay all right sorry I think we're

00:43:50,150 --> 00:43:54,070
about out of time so let's thank schewe

00:43:52,130 --> 00:43:58,570
and we can continue this later

00:43:54,070 --> 00:43:58,570

YouTube URL: https://www.youtube.com/watch?v=IIErirqsTT8


