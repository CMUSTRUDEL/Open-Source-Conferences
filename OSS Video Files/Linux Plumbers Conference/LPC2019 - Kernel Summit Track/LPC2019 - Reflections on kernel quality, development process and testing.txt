Title: LPC2019 - Reflections on kernel quality, development process and testing
Publication date: 2019-11-18
Playlist: LPC2019 - Kernel Summit Track
Description: 
	In this talk Dmitry will highlight some of the areas for improvement related to release quality, security, and developer experience and productivity. Then try to show that the existing processes, approaches and tools poorly cope with the current scale and rate of change and don't provide adequate quality and developer experience. Lastly Dmitry will advocate that only pervasive changes to the process, tooling and testing approaches can significantly improve the situation.

Dmitry Vyukov (Google)
Captions: 
	00:00:00,000 --> 00:00:05,069
hello my name is Mitra and I wanted to

00:00:01,979 --> 00:00:07,470
share some of my thoughts on some

00:00:05,069 --> 00:00:10,410
aspects of the kernel so first of all

00:00:07,470 --> 00:00:13,019
who am i we started working on user

00:00:10,410 --> 00:00:15,630
space unit Iser spasm hardening and

00:00:13,019 --> 00:00:18,029
about proximately five years ago we

00:00:15,630 --> 00:00:21,420
thought maybe if some of those tools may

00:00:18,029 --> 00:00:23,279
be useful for kernel I'm not the most

00:00:21,420 --> 00:00:24,960
active developer in the kernel I

00:00:23,279 --> 00:00:27,810
contributed to some of the debugging

00:00:24,960 --> 00:00:29,490
tools did some fixes you may also know

00:00:27,810 --> 00:00:32,550
me because of the sis color and see

00:00:29,490 --> 00:00:35,040
spots I manually reported more than 500

00:00:32,550 --> 00:00:37,559
bucks and then since both reported more

00:00:35,040 --> 00:00:39,809
than 2000 so and this gave me quite

00:00:37,559 --> 00:00:43,410
unique perspective on some of the

00:00:39,809 --> 00:00:45,030
aspects of the kernel and when I started

00:00:43,410 --> 00:00:49,890
working on the kernel I started noticing

00:00:45,030 --> 00:00:51,930
things and things that look can run and

00:00:49,890 --> 00:00:54,539
those can be roughly qualified to two

00:00:51,930 --> 00:00:57,059
buckets one is related to box quality

00:00:54,539 --> 00:00:59,399
security intestine and the second one is

00:00:57,059 --> 00:01:05,729
development process tool inexperienced

00:00:59,399 --> 00:01:07,710
satisfaction so box whatever way you

00:01:05,729 --> 00:01:10,770
look at this there are just too many

00:01:07,710 --> 00:01:12,840
right the fixes tax we have 9,000 per

00:01:10,770 --> 00:01:14,610
year which is significant percent of

00:01:12,840 --> 00:01:17,580
commits and we know that less than half

00:01:14,610 --> 00:01:19,979
of fixes actually have those tax so it's

00:01:17,580 --> 00:01:23,700
actually more ances both reported

00:01:19,979 --> 00:01:25,860
several thousands of box six several box

00:01:23,700 --> 00:01:28,259
each day and actually the thing is that

00:01:25,860 --> 00:01:30,119
puzzle is not supposed was not supposed

00:01:28,259 --> 00:01:32,009
to find that many are supposed to find

00:01:30,119 --> 00:01:35,640
simple box and completely broken

00:01:32,009 --> 00:01:38,250
subsystems and one still cover only

00:01:35,640 --> 00:01:39,930
small part of the kernel and we are

00:01:38,250 --> 00:01:41,790
finding on the crashes so we don't

00:01:39,930 --> 00:01:44,820
actually do any logical chickens we

00:01:41,790 --> 00:01:46,740
don't do testing can be sense and we

00:01:44,820 --> 00:01:48,750
still don't detect some classes of box

00:01:46,740 --> 00:01:51,540
so it's also not not a complete number

00:01:48,750 --> 00:01:52,170
and now it's not getting better over

00:01:51,540 --> 00:01:54,750
time

00:01:52,170 --> 00:01:58,710
we kind of have roughly consistent flow

00:01:54,750 --> 00:02:01,320
of box over two years now the collected

00:01:58,710 --> 00:02:04,950
the number of very interesting box

00:02:01,320 --> 00:02:06,899
stories how whole subsystems and the

00:02:04,950 --> 00:02:09,920
kernel were broken for I know for

00:02:06,899 --> 00:02:12,620
releases so more than one and a half

00:02:09,920 --> 00:02:15,140
how subsystem became broken and stable

00:02:12,620 --> 00:02:20,180
how critical vulnerabilities were

00:02:15,140 --> 00:02:22,400
introduced into stable also seen people

00:02:20,180 --> 00:02:24,410
really saying I afraid that kernel

00:02:22,400 --> 00:02:26,209
developers will fix bugs because they

00:02:24,410 --> 00:02:28,250
will fix the bugs but then they will

00:02:26,209 --> 00:02:31,100
break my functionality because nobody

00:02:28,250 --> 00:02:34,880
will run any tests I've seen district

00:02:31,100 --> 00:02:37,070
people saying that it's not possible for

00:02:34,880 --> 00:02:38,900
us to keep up or the monitor what

00:02:37,070 --> 00:02:41,420
happens in the stable just because there

00:02:38,900 --> 00:02:43,910
are too many things and also Greg says

00:02:41,420 --> 00:02:46,130
that CDs don't work the useful process

00:02:43,910 --> 00:02:47,630
that works for other projects is not

00:02:46,130 --> 00:02:51,650
working for the kernel because we have

00:02:47,630 --> 00:02:53,690
that many bugs the stable releases so

00:02:51,650 --> 00:02:56,000
the stable is something that doesn't

00:02:53,690 --> 00:02:58,610
change frequently right so I look at the

00:02:56,000 --> 00:03:03,590
number of changes actually in the stable

00:02:58,610 --> 00:03:06,620
and for folk 4.9 it's more than 13,000

00:03:03,590 --> 00:03:09,200
and 4.19 scandalous but if you look at

00:03:06,620 --> 00:03:11,930
the number of commits per month it's

00:03:09,200 --> 00:03:14,060
actually now at almost 400 per month I

00:03:11,930 --> 00:03:15,739
would like to say that stable doesn't

00:03:14,060 --> 00:03:18,290
mean and it's not changing much I mean

00:03:15,739 --> 00:03:20,480
it means that it doesn't crash it's no

00:03:18,290 --> 00:03:25,120
bugs no changes this was a question

00:03:20,480 --> 00:03:28,010
about state but so for from 4.19 it's

00:03:25,120 --> 00:03:30,970
700 per month so it's witchly for the

00:03:28,010 --> 00:03:33,350
last years it's literally one per hour

00:03:30,970 --> 00:03:36,470
and we know that there are lots of non

00:03:33,350 --> 00:03:38,420
backported fixes there is number of bugs

00:03:36,470 --> 00:03:40,220
that I can own upstream and not yet

00:03:38,420 --> 00:03:41,930
fixed even upstream and there are

00:03:40,220 --> 00:03:44,420
thousands of bucks that we didn't get

00:03:41,930 --> 00:03:46,010
found upstream so based on this I can

00:03:44,420 --> 00:03:47,660
conclude that every you can have looks

00:03:46,010 --> 00:03:51,290
good and stable release we produce

00:03:47,660 --> 00:03:53,120
contains at least 20,000 bucks and now

00:03:51,290 --> 00:03:55,610
this is not okay and it's not getting

00:03:53,120 --> 00:03:57,110
better right so it would be fixing bugs

00:03:55,610 --> 00:03:59,810
just a little bit faster than

00:03:57,110 --> 00:04:02,690
introducing them that would be kind of

00:03:59,810 --> 00:04:06,799
at zero right so we introducing them at

00:04:02,690 --> 00:04:08,540
this rate as well and it's even worse so

00:04:06,799 --> 00:04:10,400
as you know nobody actually uses the

00:04:08,540 --> 00:04:12,500
kernel the torque tree everybody has a

00:04:10,400 --> 00:04:14,870
fork right each device typically has a

00:04:12,500 --> 00:04:17,269
fork and for most practical purposes

00:04:14,870 --> 00:04:19,190
each fork of a buck is effectively

00:04:17,269 --> 00:04:21,500
noubar because somebody needs to back

00:04:19,190 --> 00:04:22,240
port the fix review fix you know that's

00:04:21,500 --> 00:04:25,840
the Hickson

00:04:22,240 --> 00:04:27,699
so and so for example at Google we fix a

00:04:25,840 --> 00:04:29,319
buck on one kernel and it doesn't

00:04:27,699 --> 00:04:32,080
magically fix it in Oh bother

00:04:29,319 --> 00:04:34,599
and how many are there I think I can say

00:04:32,080 --> 00:04:36,520
at least ten thousand we're just looking

00:04:34,599 --> 00:04:39,069
at all of the devices out there so if

00:04:36,520 --> 00:04:41,560
you multiply ten thousand bucks by ten

00:04:39,069 --> 00:04:44,380
thousand Forks it now gives us 100

00:04:41,560 --> 00:04:45,849
million scan a box or work items we

00:04:44,380 --> 00:04:47,800
create for the interest tree

00:04:45,849 --> 00:04:53,259
every time we produce the kernel release

00:04:47,800 --> 00:04:56,199
which doesn't look good so security

00:04:53,259 --> 00:04:59,080
security suffers like what's of those

00:04:56,199 --> 00:05:00,789
bugs exploit a bug with see bugs you

00:04:59,080 --> 00:05:04,330
know in the networking code and the USB

00:05:00,789 --> 00:05:09,970
KVM and not even touching on the local

00:05:04,330 --> 00:05:11,800
local axis and the thing is is that

00:05:09,970 --> 00:05:14,050
there's no consistent effort to ensure

00:05:11,800 --> 00:05:16,569
some kind of a base level of quality of

00:05:14,050 --> 00:05:19,120
almost any subsystem there may be few

00:05:16,569 --> 00:05:21,340
exceptions but generally it's not the

00:05:19,120 --> 00:05:24,280
case and most of the work we're doing is

00:05:21,340 --> 00:05:26,050
mostly reactive right we get a but we

00:05:24,280 --> 00:05:28,389
fix it but we don't even ensure that

00:05:26,050 --> 00:05:30,940
this bug will not reoccur next week and

00:05:28,389 --> 00:05:33,729
not even same kind of insurer in some

00:05:30,940 --> 00:05:35,560
area around this bug and security

00:05:33,729 --> 00:05:40,509
usually requires very explicit products

00:05:35,560 --> 00:05:42,430
at work yes so we need to fix lots of

00:05:40,509 --> 00:05:44,530
bugs and people asking me like how I can

00:05:42,430 --> 00:05:47,320
make more of the C's bought box fix but

00:05:44,530 --> 00:05:48,909
not that I'm opposed but unfortunately

00:05:47,320 --> 00:05:51,069
we're just fighting the consequences

00:05:48,909 --> 00:05:53,770
right the inflow of box is so high that

00:05:51,069 --> 00:05:56,500
we fix five but at that time ten are

00:05:53,770 --> 00:06:00,069
being introduced so and he will reduce

00:05:56,500 --> 00:06:02,080
this inflow of bugs radically fix a

00:06:00,069 --> 00:06:04,360
majority of the boxes in is intractable

00:06:02,080 --> 00:06:06,460
and tracking security issues is

00:06:04,360 --> 00:06:11,139
intractable and producing stable

00:06:06,460 --> 00:06:13,300
releases is intractable so this for the

00:06:11,139 --> 00:06:15,159
box for development process like patches

00:06:13,300 --> 00:06:18,759
a be lost including patches for

00:06:15,159 --> 00:06:20,590
important box being lost for years which

00:06:18,759 --> 00:06:23,530
is hard to apply because you don't even

00:06:20,590 --> 00:06:25,719
know the base 3 for any a patch patches

00:06:23,530 --> 00:06:27,509
hard to send because you know the senior

00:06:25,719 --> 00:06:30,669
to set up the mail we get corrupted

00:06:27,509 --> 00:06:32,500
patches which is hard to review because

00:06:30,669 --> 00:06:34,539
you don't have contacts so you miss box

00:06:32,500 --> 00:06:35,169
and narrow paths which you simply don't

00:06:34,539 --> 00:06:38,319
see in the

00:06:35,169 --> 00:06:40,419
H itself you can look at the deep

00:06:38,319 --> 00:06:42,460
between versions of the change and your

00:06:40,419 --> 00:06:43,060
comments are lost between versions and

00:06:42,460 --> 00:06:46,050
so on

00:06:43,060 --> 00:06:48,669
BOC reports also been routinely lost

00:06:46,050 --> 00:06:50,860
there is no tricking of the review to

00:06:48,669 --> 00:06:55,330
the patch patch to the back and so on

00:06:50,860 --> 00:06:57,460
and in the transparency is not perfect

00:06:55,330 --> 00:07:00,069
like sometimes people don't know like

00:06:57,460 --> 00:07:02,379
who is going to take my patch sometimes

00:07:00,069 --> 00:07:04,599
it's taken by several people and what is

00:07:02,379 --> 00:07:08,349
the status of my patches can the eternal

00:07:04,599 --> 00:07:12,129
kernel question and also have different

00:07:08,349 --> 00:07:14,620
rules for different subsystems okay

00:07:12,129 --> 00:07:16,810
because this developer satisfaction may

00:07:14,620 --> 00:07:19,270
suffer so it's going to hard to quantify

00:07:16,810 --> 00:07:21,610
objectively but when you know when your

00:07:19,270 --> 00:07:23,349
work is lost or when you dublicate work

00:07:21,610 --> 00:07:25,270
with somebody else so when you have to

00:07:23,349 --> 00:07:26,919
redo your work or when you feel

00:07:25,270 --> 00:07:29,080
completely lost because they just don't

00:07:26,919 --> 00:07:31,300
understand what happens and the whose

00:07:29,080 --> 00:07:32,860
action is next on the patch when you

00:07:31,300 --> 00:07:35,860
have to struggle with the tools when you

00:07:32,860 --> 00:07:37,839
get you know late reverse alerts of you

00:07:35,860 --> 00:07:39,879
commit when you have inconsistencies and

00:07:37,839 --> 00:07:41,949
then force effectively forced to break

00:07:39,879 --> 00:07:44,199
things and don't ever means to ensure

00:07:41,949 --> 00:07:47,439
that your functionality will not break

00:07:44,199 --> 00:07:49,860
next week it cannot make effect

00:07:47,439 --> 00:07:52,360
satisfaction people may be asking itself

00:07:49,860 --> 00:07:54,969
themself question if I want to send you

00:07:52,360 --> 00:07:57,789
know another patch which a strictly

00:07:54,969 --> 00:07:59,889
don't have to send and what's of those

00:07:57,789 --> 00:08:03,639
can be directly attributed to the kernel

00:07:59,889 --> 00:08:05,919
process and the to blame and developer

00:08:03,639 --> 00:08:08,319
productivity also suffers like all of

00:08:05,919 --> 00:08:10,300
the works on the box that could not be

00:08:08,319 --> 00:08:13,839
introduced right including the bug and

00:08:10,300 --> 00:08:16,419
fix in review up I pulled back port it

00:08:13,839 --> 00:08:18,490
could just not happen like and fixing

00:08:16,419 --> 00:08:21,539
the same back twice sometimes happen or

00:08:18,490 --> 00:08:24,219
reports in the same back twice or was

00:08:21,539 --> 00:08:27,399
when we lost was the patch and and

00:08:24,219 --> 00:08:29,610
somebody needs to redo the work and even

00:08:27,399 --> 00:08:32,199
spending time of self such things as

00:08:29,610 --> 00:08:34,060
reviewing code formatting and basic

00:08:32,199 --> 00:08:35,800
style it's something that you know

00:08:34,060 --> 00:08:39,610
people another project don't do today

00:08:35,800 --> 00:08:41,079
already also reports in your comments of

00:08:39,610 --> 00:08:44,380
trying to run tests or trying to

00:08:41,079 --> 00:08:46,990
understand if it is passed or not so I

00:08:44,380 --> 00:08:48,740
suspect that kernel developers could be

00:08:46,990 --> 00:08:53,920
like twice as product

00:08:48,740 --> 00:08:56,450
most of those would be addressed and

00:08:53,920 --> 00:08:58,459
some of those problems may be partially

00:08:56,450 --> 00:09:00,320
neutralized if you attend able for a

00:08:58,459 --> 00:09:02,570
long time in the kernel you work mostly

00:09:00,320 --> 00:09:04,310
on a single subsystems again and all the

00:09:02,570 --> 00:09:06,350
rules you have some scripts you know how

00:09:04,310 --> 00:09:08,750
to run tests it's kind of became

00:09:06,350 --> 00:09:10,610
slightly better for you but those hope

00:09:08,750 --> 00:09:13,550
all of those problems say in full effect

00:09:10,610 --> 00:09:15,080
for newcomers for drive-by fixes when

00:09:13,550 --> 00:09:17,089
you're doing some work and not in your

00:09:15,080 --> 00:09:19,670
home subsystem when you're doing some

00:09:17,089 --> 00:09:21,440
clean ups or refactorings and the things

00:09:19,670 --> 00:09:23,720
that we absolutely need all of those

00:09:21,440 --> 00:09:25,910
people's all of those fixes and

00:09:23,720 --> 00:09:29,779
contributions for the long-term health

00:09:25,910 --> 00:09:30,830
of the project yes and most of those

00:09:29,779 --> 00:09:32,779
things you can have not worked in

00:09:30,830 --> 00:09:35,450
science today like heaven test

00:09:32,779 --> 00:09:37,339
pre-commit testing tracking changes like

00:09:35,450 --> 00:09:40,899
most of the most of the projects are

00:09:37,339 --> 00:09:42,980
doing this - they know how to do this

00:09:40,899 --> 00:09:45,620
okay so this kind of the problem

00:09:42,980 --> 00:09:47,240
statement so then I try to understand

00:09:45,620 --> 00:09:49,610
why this is happening what is the root

00:09:47,240 --> 00:09:51,020
cause and initially I couldn't

00:09:49,610 --> 00:09:53,300
understand because if you look around

00:09:51,020 --> 00:09:55,070
and like is it that there is no test and

00:09:53,300 --> 00:09:56,810
no there are some tests and people start

00:09:55,070 --> 00:09:59,270
pointing you at different tests

00:09:56,810 --> 00:10:01,940
maybe there's no testing also falls

00:09:59,270 --> 00:10:05,300
there you know several efforts for tests

00:10:01,940 --> 00:10:07,310
the kernel we have some - Landgraf right

00:10:05,300 --> 00:10:10,070
patch hold bugs Eva we have some

00:10:07,310 --> 00:10:11,959
processes maybe nobody cares also not

00:10:10,070 --> 00:10:13,850
true like if you talk to somebody and

00:10:11,959 --> 00:10:17,390
everybody agree that those the problems

00:10:13,850 --> 00:10:19,670
we need to fix them maybe simply don't

00:10:17,390 --> 00:10:22,130
have resources and also Falls because if

00:10:19,670 --> 00:10:24,500
you look around I can count at least 50

00:10:22,130 --> 00:10:27,140
people working on you know testing tool

00:10:24,500 --> 00:10:29,149
in static analysis and other similar

00:10:27,140 --> 00:10:31,820
things so we do have those resources

00:10:29,149 --> 00:10:33,649
maybe I just you know need to do some

00:10:31,820 --> 00:10:36,860
more incremental improvements at few

00:10:33,649 --> 00:10:38,630
tests here and you know do some few few

00:10:36,860 --> 00:10:40,370
more improvements the patchwork and then

00:10:38,630 --> 00:10:42,740
everything will become perfect

00:10:40,370 --> 00:10:44,870
and also it doesn't feel that that that

00:10:42,740 --> 00:10:48,079
would be enough right so you can he'll

00:10:44,870 --> 00:10:50,720
have all of the pieces that we need but

00:10:48,079 --> 00:10:55,399
still be added so not can work in for

00:10:50,720 --> 00:10:56,529
some reason and then I started realizing

00:10:55,399 --> 00:10:59,930
that mainly the problem is the

00:10:56,529 --> 00:11:01,579
fragmentation and the fragmentation I

00:10:59,930 --> 00:11:03,020
mean multiple effort to do the same

00:11:01,579 --> 00:11:04,550
things

00:11:03,020 --> 00:11:07,750
you know solution to the same problem

00:11:04,550 --> 00:11:12,190
lots of them kind of not you know

00:11:07,750 --> 00:11:14,540
isolated not talking to each other and

00:11:12,190 --> 00:11:16,580
opposite of that would be consolidation

00:11:14,540 --> 00:11:18,770
is that's one you have single solution

00:11:16,580 --> 00:11:20,090
to single problem single effort to solve

00:11:18,770 --> 00:11:22,670
a single problem

00:11:20,090 --> 00:11:27,200
so let's look how the effects testing

00:11:22,670 --> 00:11:29,150
for example so just if you're not in the

00:11:27,200 --> 00:11:30,950
in the area of Destin so destiny is

00:11:29,150 --> 00:11:35,180
super hard it's not just you know run

00:11:30,950 --> 00:11:37,250
the test so issue so it's always

00:11:35,180 --> 00:11:39,590
important test you sets whole lot of

00:11:37,250 --> 00:11:42,350
work people which lay and spend engineer

00:11:39,590 --> 00:11:44,930
years on this and then enabling

00:11:42,350 --> 00:11:46,730
deploying some debugging tools that's

00:11:44,930 --> 00:11:48,830
also not simply freaking flipping a

00:11:46,730 --> 00:11:51,760
config and most of the size for example

00:11:48,830 --> 00:11:54,320
don't even have case and enable today

00:11:51,760 --> 00:11:57,080
and then need building a web interface

00:11:54,320 --> 00:11:59,930
is supported by section pre-commit tests

00:11:57,080 --> 00:12:02,420
and static analysis make developers be

00:11:59,930 --> 00:12:05,510
able to reproduce your box outside of

00:12:02,420 --> 00:12:07,250
your CI collect core dumps and if you

00:12:05,510 --> 00:12:09,500
have hardware that's a whole new set of

00:12:07,250 --> 00:12:11,390
problems that you have and then you only

00:12:09,500 --> 00:12:14,630
just need to you know maintain this

00:12:11,390 --> 00:12:17,450
system and may make it Runyon's which is

00:12:14,630 --> 00:12:19,340
already kind of full time job and I am

00:12:17,450 --> 00:12:22,040
not even touching on the kind of premium

00:12:19,340 --> 00:12:26,030
features like testing developer patches

00:12:22,040 --> 00:12:27,980
or producing coverage reports so I can

00:12:26,030 --> 00:12:31,640
estimate it approximately maybe fifty

00:12:27,980 --> 00:12:34,160
engineer years doing like most of those

00:12:31,640 --> 00:12:37,210
things in some you know basic forums

00:12:34,160 --> 00:12:40,250
that the testing is actually functioning

00:12:37,210 --> 00:12:43,580
and which looks a lot but the thing is

00:12:40,250 --> 00:12:45,470
that we already spent that menu actually

00:12:43,580 --> 00:12:48,890
spend more than this but the thing is

00:12:45,470 --> 00:12:52,520
that we spend it on seven assorted

00:12:48,890 --> 00:12:56,690
efforts so all of them did lots of

00:12:52,520 --> 00:12:58,820
they're exactly the same things some of

00:12:56,690 --> 00:13:01,430
them did bisection some of them still

00:12:58,820 --> 00:13:04,130
don't have bisection some of them have

00:13:01,430 --> 00:13:06,290
been better by sections a my worst by

00:13:04,130 --> 00:13:08,480
section and doing something and one of

00:13:06,290 --> 00:13:11,360
them absolutely doesn't help the others

00:13:08,480 --> 00:13:14,030
and this problem is hard enough to solve

00:13:11,360 --> 00:13:15,740
it even in a single core but trying to

00:13:14,030 --> 00:13:17,900
solve it seven core best service

00:13:15,740 --> 00:13:22,640
of it is just doomed to fail and it's

00:13:17,900 --> 00:13:24,440
failing so far but it's actually even

00:13:22,640 --> 00:13:26,690
worse because the besides the

00:13:24,440 --> 00:13:29,750
application the fragmentation of the

00:13:26,690 --> 00:13:31,550
kernel to link and the processes makes

00:13:29,750 --> 00:13:33,080
it even harder to implement test them

00:13:31,550 --> 00:13:36,950
because we have you know all the test

00:13:33,080 --> 00:13:39,170
suits are completely different and if

00:13:36,950 --> 00:13:40,880
you wanted to pre-commit test and you

00:13:39,170 --> 00:13:46,580
need to intercept patches which is

00:13:40,880 --> 00:13:48,740
extremely hard to do reports and results

00:13:46,580 --> 00:13:52,610
is even harder in the kernel and we have

00:13:48,740 --> 00:13:54,730
lots of kind of human interfaces which

00:13:52,610 --> 00:14:00,110
makes it very hard to automate anything

00:13:54,730 --> 00:14:03,110
right and it's even worse so let's

00:14:00,110 --> 00:14:05,360
imagine we actually seven CI s-- can

00:14:03,110 --> 00:14:07,700
succeed a and actually start testing the

00:14:05,360 --> 00:14:10,550
kernel then developers get seven copies

00:14:07,700 --> 00:14:13,370
of back row each bug report for each bug

00:14:10,550 --> 00:14:14,750
right and probably within a week because

00:14:13,370 --> 00:14:16,820
they will some of them will have

00:14:14,750 --> 00:14:18,980
different latency and you actually need

00:14:16,820 --> 00:14:21,410
to requite all of seven of them because

00:14:18,980 --> 00:14:23,780
if you don't reply and one another

00:14:21,410 --> 00:14:25,490
developer may start fixing the same bug

00:14:23,780 --> 00:14:27,290
looking just at the different report

00:14:25,490 --> 00:14:31,250
where you didn't say I am working on

00:14:27,290 --> 00:14:33,260
this right and the CI people will be

00:14:31,250 --> 00:14:37,610
will just think that you maybe lost

00:14:33,260 --> 00:14:39,650
their report also we see a significant

00:14:37,610 --> 00:14:41,420
problem with this board that developers

00:14:39,650 --> 00:14:43,130
need to learn how to actually interact

00:14:41,420 --> 00:14:45,170
with your system how to work with your

00:14:43,130 --> 00:14:47,510
system so this is very hard even for one

00:14:45,170 --> 00:14:50,020
system but if you have seven copies then

00:14:47,510 --> 00:14:53,000
it will just impossible

00:14:50,020 --> 00:14:55,070
most of them depend on can either one

00:14:53,000 --> 00:14:55,880
person a small group of people within a

00:14:55,070 --> 00:14:57,890
company

00:14:55,880 --> 00:15:00,080
so say wow that one person is on

00:14:57,890 --> 00:15:03,560
vacation then sorry we didn't get that

00:15:00,080 --> 00:15:06,050
part of the testing and lots of them

00:15:03,560 --> 00:15:07,490
considered kind of personal effort so

00:15:06,050 --> 00:15:10,850
they can even not part of the kernel

00:15:07,490 --> 00:15:12,650
they you know this so nobody wants to

00:15:10,850 --> 00:15:14,690
contribute right because this is the

00:15:12,650 --> 00:15:17,030
kernel and this is you know this is your

00:15:14,690 --> 00:15:19,310
thing like this it's not the kernels

00:15:17,030 --> 00:15:21,890
distinguish symmetry system why would

00:15:19,310 --> 00:15:28,040
they consider why would they contribute

00:15:21,890 --> 00:15:29,000
it so I think that fragmentation is why

00:15:28,040 --> 00:15:30,650
we can have

00:15:29,000 --> 00:15:35,360
nice things in this tank and actually

00:15:30,650 --> 00:15:36,620
make it properly functioning and if you

00:15:35,360 --> 00:15:38,470
look at the development process and

00:15:36,620 --> 00:15:42,680
tooling then we'll see a fragmentation

00:15:38,470 --> 00:15:44,930
right systems are different obviously

00:15:42,680 --> 00:15:46,640
there is no documentation running tests

00:15:44,930 --> 00:15:48,350
for each subsystem is completely

00:15:46,640 --> 00:15:51,400
different you can spend literally days

00:15:48,350 --> 00:15:53,990
and you will not necessarily succeed

00:15:51,400 --> 00:15:57,410
then we have email password is lab

00:15:53,990 --> 00:15:59,660
github garrett we have get versus killed

00:15:57,410 --> 00:16:02,600
we have lots of local scripts running on

00:15:59,660 --> 00:16:04,610
some local machines of people and

00:16:02,600 --> 00:16:06,410
currently it's not possible to avoid

00:16:04,610 --> 00:16:09,380
this fragmentation right because nobody

00:16:06,410 --> 00:16:12,290
have kind of powers to make something

00:16:09,380 --> 00:16:14,060
that their solution in a single way of

00:16:12,290 --> 00:16:15,620
doing things so if you're want to

00:16:14,060 --> 00:16:17,540
improve something in your subsystem

00:16:15,620 --> 00:16:20,750
you're forced to you know create this

00:16:17,540 --> 00:16:23,330
kind of isolated island where you know

00:16:20,750 --> 00:16:27,830
you do this things this way now but like

00:16:23,330 --> 00:16:30,080
nobody else uses this and besides

00:16:27,830 --> 00:16:32,840
fragmentation some foundations are

00:16:30,080 --> 00:16:36,350
simply misinformed only have such simple

00:16:32,840 --> 00:16:40,400
thing as user identity and it's required

00:16:36,350 --> 00:16:42,110
for lots of automation for example we

00:16:40,400 --> 00:16:44,870
can have a system that will do something

00:16:42,110 --> 00:16:47,540
on your behalf simply because we can you

00:16:44,870 --> 00:16:51,280
know say who is that you right and we

00:16:47,540 --> 00:16:52,910
can have share system with shared

00:16:51,280 --> 00:16:54,770
responsibilities because you can't

00:16:52,910 --> 00:16:56,690
express what what is that group of

00:16:54,770 --> 00:16:58,880
people right and we also don't have

00:16:56,690 --> 00:17:00,589
change identity so if you have two trees

00:16:58,880 --> 00:17:02,540
you can really say well if it is

00:17:00,589 --> 00:17:05,420
changing the other tree is like not

00:17:02,540 --> 00:17:08,420
possible we don't have based recommit

00:17:05,420 --> 00:17:11,839
for changes we can map code tests and so

00:17:08,420 --> 00:17:16,430
on and besides that we have worth of

00:17:11,839 --> 00:17:18,470
literally english' rented interfaces so

00:17:16,430 --> 00:17:20,300
people say don't try the patches supply

00:17:18,470 --> 00:17:22,699
it which means that the patch is applied

00:17:20,300 --> 00:17:24,530
but sometimes they reply with apply it

00:17:22,699 --> 00:17:27,530
but that actually means something else

00:17:24,530 --> 00:17:29,360
or they say knack or no way knack but

00:17:27,530 --> 00:17:31,250
they also say knack handling needs to be

00:17:29,360 --> 00:17:33,620
improved which literally comment on the

00:17:31,250 --> 00:17:37,250
code in the patch so if you will try to

00:17:33,620 --> 00:17:38,990
kind of treat this what is the meaning

00:17:37,250 --> 00:17:41,220
of those commands it's like you know you

00:17:38,990 --> 00:17:43,870
can do this

00:17:41,220 --> 00:17:45,789
yeah so humans are smart and machinae

00:17:43,870 --> 00:17:48,700
dumps we need to make give them a

00:17:45,789 --> 00:17:50,289
discount and if we have interfaces that

00:17:48,700 --> 00:17:52,470
the easy for machines easy for

00:17:50,289 --> 00:17:55,000
automation that also tree build to

00:17:52,470 --> 00:17:57,970
represent this in a nice way

00:17:55,000 --> 00:18:01,720
to humans right but it's very difficult

00:17:57,970 --> 00:18:03,190
to do it the other way around and as a

00:18:01,720 --> 00:18:06,580
result because of this fragmentation

00:18:03,190 --> 00:18:09,039
missed Foundation and English oriented

00:18:06,580 --> 00:18:11,590
interfaces it's become super hard to

00:18:09,039 --> 00:18:13,299
build anything on top of this so the

00:18:11,590 --> 00:18:16,269
feature that is mentioned frequently is

00:18:13,299 --> 00:18:19,720
like you mail a change NCI adds a test

00:18:16,269 --> 00:18:22,299
past tag on your change and I think it's

00:18:19,720 --> 00:18:24,669
required to you know prevent lots of box

00:18:22,299 --> 00:18:27,039
being introduced in the current no but

00:18:24,669 --> 00:18:29,080
do then this feature becomes super hard

00:18:27,039 --> 00:18:31,360
in multiple dimensions because you know

00:18:29,080 --> 00:18:33,309
just everything is against you things

00:18:31,360 --> 00:18:35,500
that should be just no problem at all

00:18:33,309 --> 00:18:37,960
for example and get happy can just get a

00:18:35,500 --> 00:18:39,909
notification about new change with you

00:18:37,960 --> 00:18:42,600
know this is the change this base tree

00:18:39,909 --> 00:18:45,370
can you know get the exact source code

00:18:42,600 --> 00:18:50,919
in the kernel it becomes super latch

00:18:45,370 --> 00:18:52,809
problem there's also no sense of

00:18:50,919 --> 00:18:55,240
collective ownership for lots of things

00:18:52,809 --> 00:18:56,380
so we have it for code right if you fix

00:18:55,240 --> 00:18:58,360
something over there

00:18:56,380 --> 00:19:00,549
they don't consider that you contribute

00:18:58,360 --> 00:19:02,350
to somebody else code right you consider

00:19:00,549 --> 00:19:04,809
that this your turn which is a great

00:19:02,350 --> 00:19:07,149
thing to have but for what's a further

00:19:04,809 --> 00:19:11,350
parsec test and static analysis tool and

00:19:07,149 --> 00:19:13,000
we unfortunately don't have it and the

00:19:11,350 --> 00:19:15,580
thing is that useful practices need to

00:19:13,000 --> 00:19:18,179
be shared and common because simply

00:19:15,580 --> 00:19:21,880
because single person cannot you know

00:19:18,179 --> 00:19:24,159
you know address some problems for

00:19:21,880 --> 00:19:27,549
example consider we do commit messages

00:19:24,159 --> 00:19:29,320
like fix it back and then Lena says hey

00:19:27,549 --> 00:19:30,760
you know I think it would be useful if

00:19:29,320 --> 00:19:32,830
you actually write proper commit

00:19:30,760 --> 00:19:35,470
messages you know and explain what we're

00:19:32,830 --> 00:19:37,480
doing and we say yeah sure that's a

00:19:35,470 --> 00:19:39,549
great idea so you propose it so now you

00:19:37,480 --> 00:19:41,950
go and add commit messages to all of our

00:19:39,549 --> 00:19:45,070
commits right because it's kind of your

00:19:41,950 --> 00:19:47,200
idea or you propose that comments to the

00:19:45,070 --> 00:19:49,840
code so now you're going add comments to

00:19:47,200 --> 00:19:52,570
all of our code right it can work this

00:19:49,840 --> 00:19:53,710
way and we need it for for example for

00:19:52,570 --> 00:19:56,380
fixing

00:19:53,710 --> 00:19:57,370
and failing tests as well because

00:19:56,380 --> 00:19:59,650
currently it seems to be you know

00:19:57,370 --> 00:20:03,090
they're the only people who care of

00:19:59,650 --> 00:20:03,090
people who run CIE

00:20:03,750 --> 00:20:08,740
yeah then we have overloaded maintainer

00:20:06,310 --> 00:20:12,040
who seems to be forced to do too many

00:20:08,740 --> 00:20:14,380
things manually and then can own process

00:20:12,040 --> 00:20:17,740
and an automation obviously with no dogs

00:20:14,380 --> 00:20:20,650
and the group maintainer sheep as far as

00:20:17,740 --> 00:20:23,560
understand I still not can think in

00:20:20,650 --> 00:20:25,120
majority of the subsystems and it's hard

00:20:23,560 --> 00:20:29,020
to implement right because we can't even

00:20:25,120 --> 00:20:33,100
express identities of people and for

00:20:29,020 --> 00:20:34,990
them I think that the only thing that

00:20:33,100 --> 00:20:37,360
maintainer should do is review the code

00:20:34,990 --> 00:20:39,580
and can stamp it for inclusion into the

00:20:37,360 --> 00:20:43,030
code and not sure what else they should

00:20:39,580 --> 00:20:46,480
be doing that it's not automatable it's

00:20:43,030 --> 00:20:49,570
definitely not you know not copy pasting

00:20:46,480 --> 00:20:51,550
text not fixing mangled emails not

00:20:49,570 --> 00:20:53,920
suggesting to run check Bachelorette

00:20:51,550 --> 00:20:56,140
signed off and probably maybe even not

00:20:53,920 --> 00:20:58,210
send an polar quest because if you say

00:20:56,140 --> 00:20:59,770
you know I approve this needs to go in

00:20:58,210 --> 00:21:04,600
the next nerd window

00:20:59,770 --> 00:21:07,330
that should be enough okay so let's try

00:21:04,600 --> 00:21:09,310
to imagine a better world where you

00:21:07,330 --> 00:21:11,440
actually have you know consolidation and

00:21:09,310 --> 00:21:13,420
we have some foundation so that the

00:21:11,440 --> 00:21:16,600
blocks nicely fit together

00:21:13,420 --> 00:21:18,640
and we have interfaces that are suitable

00:21:16,600 --> 00:21:20,590
for automation and because it's easier

00:21:18,640 --> 00:21:22,630
to build we actually have much more of

00:21:20,590 --> 00:21:24,400
it and we have less the application and

00:21:22,630 --> 00:21:27,250
we have more of a collective ownership

00:21:24,400 --> 00:21:28,860
and more of a group maintenance ship

00:21:27,250 --> 00:21:31,510
because it's much easier to implement

00:21:28,860 --> 00:21:33,340
and all subsystem get all of this

00:21:31,510 --> 00:21:35,350
goodness for free written documentation

00:21:33,340 --> 00:21:37,750
because there is a single copy of the

00:21:35,350 --> 00:21:42,910
documentation and as a result walls have

00:21:37,750 --> 00:21:44,440
more consistency yeah so we let's

00:21:42,910 --> 00:21:47,200
imagine even cooler feature for example

00:21:44,440 --> 00:21:50,560
if you get a warning from a zero-day

00:21:47,200 --> 00:21:52,420
boat about the compiler warning right

00:21:50,560 --> 00:21:55,060
what you do you go to console you check

00:21:52,420 --> 00:21:57,610
out the branch you double check the file

00:21:55,060 --> 00:22:00,490
name the line number open it find the

00:21:57,610 --> 00:22:03,730
line try to figure out what's wrong you

00:22:00,490 --> 00:22:04,450
know fix the fix the code save the file

00:22:03,730 --> 00:22:05,880
built

00:22:04,450 --> 00:22:08,670
realized that you made

00:22:05,880 --> 00:22:12,020
mistake you opened the file again fix it

00:22:08,670 --> 00:22:14,910
again save build okay right version

00:22:12,020 --> 00:22:17,970
different version 1 and then sale

00:22:14,910 --> 00:22:19,650
send the new version well what we could

00:22:17,970 --> 00:22:21,570
have is actually a static analysis to

00:22:19,650 --> 00:22:23,400
post your comment and say you know here

00:22:21,570 --> 00:22:24,870
is something wrong and you should you

00:22:23,400 --> 00:22:30,300
should have this code and you say you

00:22:24,870 --> 00:22:32,070
know agree apply this that's it or we

00:22:30,300 --> 00:22:33,870
maybe could have you know stable patch

00:22:32,070 --> 00:22:35,640
trash queue where we actually look at

00:22:33,870 --> 00:22:38,880
each patch and decide if it goes needs

00:22:35,640 --> 00:22:40,680
to go to stable or not and obviously it

00:22:38,880 --> 00:22:43,980
needs to be sure that to be it to be

00:22:40,680 --> 00:22:45,930
practical and also with the help of some

00:22:43,980 --> 00:22:47,870
automation that will pre treeoche lots

00:22:45,930 --> 00:22:51,810
of things for example in the committee's

00:22:47,870 --> 00:22:54,180
fix the stack it goes to yes if if it is

00:22:51,810 --> 00:22:55,980
a comment only change it goes to no and

00:22:54,180 --> 00:22:57,780
so maybe it can be sure that across

00:22:55,980 --> 00:23:00,210
maintained earths as well so that they

00:22:57,780 --> 00:23:03,780
should suggest what what is the should

00:23:00,210 --> 00:23:06,750
it be included or not and watch scale

00:23:03,780 --> 00:23:09,480
change ins imagine you change thousands

00:23:06,750 --> 00:23:12,270
of files in the kernel also you made the

00:23:09,480 --> 00:23:15,450
change using some semantic code analysis

00:23:12,270 --> 00:23:17,880
tool and then what you do you just give

00:23:15,450 --> 00:23:19,890
it to a system and say go submitted for

00:23:17,880 --> 00:23:22,590
me and the system splits it in those

00:23:19,890 --> 00:23:25,380
patches finds the maintainer for each

00:23:22,590 --> 00:23:27,870
patch finds the test run the test if the

00:23:25,380 --> 00:23:31,890
tests pass it mails the change if

00:23:27,870 --> 00:23:34,200
maintainer approves the change it merges

00:23:31,890 --> 00:23:35,820
it only if the maintainer leaves the

00:23:34,200 --> 00:23:38,100
comment that's where you can need to

00:23:35,820 --> 00:23:41,130
take an action and this may sound a bit

00:23:38,100 --> 00:23:42,810
like a you know fantastic world but such

00:23:41,130 --> 00:23:45,210
system actually exists for years and

00:23:42,810 --> 00:23:47,550
greatly helps to manage very large code

00:23:45,210 --> 00:23:51,480
base and can improve developer

00:23:47,550 --> 00:23:53,580
productivity and more importantly affect

00:23:51,480 --> 00:23:56,520
things that developers actually want to

00:23:53,580 --> 00:23:58,290
tackle and this in this world so they

00:23:56,520 --> 00:24:00,180
don't look at the problem and just say

00:23:58,290 --> 00:24:01,680
oh yeah this is probably worse fiction

00:24:00,180 --> 00:24:04,950
but you know what I don't want to spend

00:24:01,680 --> 00:24:07,470
the next two years of my life on this so

00:24:04,950 --> 00:24:09,090
I will probably just not do this you

00:24:07,470 --> 00:24:11,880
know with the help of the tool and again

00:24:09,090 --> 00:24:14,870
they can be excited to actually do do

00:24:11,880 --> 00:24:14,870
such changes

00:24:15,650 --> 00:24:19,250
okay and obviously consolidated testing

00:24:17,630 --> 00:24:21,740
where we have significantly less the

00:24:19,250 --> 00:24:23,510
application of work where things are

00:24:21,740 --> 00:24:27,590
easier to implement because we can rely

00:24:23,510 --> 00:24:29,510
on the low level of services and where

00:24:27,590 --> 00:24:32,420
tests are much easier to run and easily

00:24:29,510 --> 00:24:34,970
you just say for example run netfilter

00:24:32,420 --> 00:24:37,130
tests like single Coleman like whatever

00:24:34,970 --> 00:24:40,910
it takes figure out the config build it

00:24:37,130 --> 00:24:42,740
run and give me a pass/fail or run tests

00:24:40,910 --> 00:24:44,960
for that file which attach they actually

00:24:42,740 --> 00:24:47,690
don't know what it is but it actually so

00:24:44,960 --> 00:24:51,110
run the test and if it has passed then

00:24:47,690 --> 00:24:53,030
that's all I need to know so that's

00:24:51,110 --> 00:24:55,010
what's required for CI that's what CIS

00:24:53,030 --> 00:24:57,410
are doing but it's gonna be currently

00:24:55,010 --> 00:25:01,790
not possible to you know make it

00:24:57,410 --> 00:25:03,710
available for actual developers so we'll

00:25:01,790 --> 00:25:05,540
have more collective ownership and where

00:25:03,710 --> 00:25:07,160
people actually don't mind contributing

00:25:05,540 --> 00:25:09,140
to those things because that's

00:25:07,160 --> 00:25:11,240
considered you know the kernel the

00:25:09,140 --> 00:25:13,700
kernel effort rather than somebody

00:25:11,240 --> 00:25:15,140
personal thing and also although the

00:25:13,700 --> 00:25:17,600
changes said should have much higher

00:25:15,140 --> 00:25:19,730
return of investment for example if you

00:25:17,600 --> 00:25:21,440
deploy a dynamic to with immediately

00:25:19,730 --> 00:25:26,870
kind of effects all of the kernel

00:25:21,440 --> 00:25:29,080
testing and where it's possible to the

00:25:26,870 --> 00:25:31,610
breaking changes what happens today

00:25:29,080 --> 00:25:34,130
people do some change and it breaks all

00:25:31,610 --> 00:25:36,020
of the testing and simply currently it's

00:25:34,130 --> 00:25:38,570
not possible to avoid this current not

00:25:36,020 --> 00:25:41,270
possible to do penny graceful rollout of

00:25:38,570 --> 00:25:42,980
any breaking changes and also test

00:25:41,270 --> 00:25:46,190
machine scalability is something that

00:25:42,980 --> 00:25:47,990
lots of people mentioned so the kernel

00:25:46,190 --> 00:25:53,270
testing may require lots of resources

00:25:47,990 --> 00:25:54,890
and if we have a single system it trust

00:25:53,270 --> 00:25:56,990
it's much easier to get with more

00:25:54,890 --> 00:25:58,910
resources for the system and the second

00:25:56,990 --> 00:26:01,160
way again we do not dublicate effort

00:25:58,910 --> 00:26:03,500
because it happens today with the

00:26:01,160 --> 00:26:05,929
resources we have we run all of the same

00:26:03,500 --> 00:26:12,620
tests and all of the same commits five

00:26:05,929 --> 00:26:14,270
times and we can even get maintainable

00:26:12,620 --> 00:26:19,100
code so if I contribute some

00:26:14,270 --> 00:26:21,320
functionality yeah so if we have two

00:26:19,100 --> 00:26:23,750
tests that the easier to run to write

00:26:21,320 --> 00:26:26,370
and they actually executed people may

00:26:23,750 --> 00:26:28,529
start seeing benefits of this

00:26:26,370 --> 00:26:31,010
we may have maintainable codes and they

00:26:28,529 --> 00:26:34,049
contribute some code to the kernel I

00:26:31,010 --> 00:26:37,350
will not need to be around for eternity

00:26:34,049 --> 00:26:39,960
because I'm the only person who knows

00:26:37,350 --> 00:26:41,669
how to test this code right or maybe it

00:26:39,960 --> 00:26:43,740
would be possible to touch some parts of

00:26:41,669 --> 00:26:46,169
the kernel without breaking them because

00:26:43,740 --> 00:26:48,870
all of the tricky thousand you know

00:26:46,169 --> 00:26:53,730
corner cases for this code actually

00:26:48,870 --> 00:26:55,679
encoded in the tests now okay so it's

00:26:53,730 --> 00:26:58,049
easier to speculate and easy to draw

00:26:55,679 --> 00:27:00,960
those you know perfect pictures but is

00:26:58,049 --> 00:27:03,059
it the right thing to do so I think it

00:27:00,960 --> 00:27:05,940
is because the scale dictates optimal

00:27:03,059 --> 00:27:10,500
amount of communication commonality that

00:27:05,940 --> 00:27:12,630
is needed for a system larger system is

00:27:10,500 --> 00:27:14,730
more unification structure to be

00:27:12,630 --> 00:27:19,620
manageable and we have quite a large

00:27:14,730 --> 00:27:21,899
system with not enough obstruction rules

00:27:19,620 --> 00:27:24,720
and we kind of losing track of the

00:27:21,899 --> 00:27:28,020
things but you may say we don't like

00:27:24,720 --> 00:27:30,390
imposing things right but I think this

00:27:28,020 --> 00:27:32,970
is at this point is actively harmful for

00:27:30,390 --> 00:27:35,730
the project and second we actually do we

00:27:32,970 --> 00:27:39,240
do impose lots of things we have lots of

00:27:35,730 --> 00:27:41,159
common things like C GPL gate code style

00:27:39,240 --> 00:27:43,440
you know tags and the commits and other

00:27:41,159 --> 00:27:45,779
things and if you think about each of

00:27:43,440 --> 00:27:48,600
them each of them tremendously helps the

00:27:45,779 --> 00:27:52,409
project for example we could take one of

00:27:48,600 --> 00:27:53,850
them say it I think it will break lots

00:27:52,409 --> 00:27:56,279
of things because there are lots of

00:27:53,850 --> 00:27:59,279
scripts and lots of kind of systems that

00:27:56,279 --> 00:28:04,080
assume that it is good and they built on

00:27:59,279 --> 00:28:05,909
top of this foundation but so this those

00:28:04,080 --> 00:28:07,620
things provide quite basic level of

00:28:05,909 --> 00:28:09,090
services but the problem is that on top

00:28:07,620 --> 00:28:11,100
of this we have you know complete

00:28:09,090 --> 00:28:13,620
anarchy we have fragmentation we have

00:28:11,100 --> 00:28:17,039
you know miss things we have you know

00:28:13,620 --> 00:28:19,110
human only things and so on so I think

00:28:17,039 --> 00:28:21,960
we're kind of long with you to actually

00:28:19,110 --> 00:28:24,870
having more of the unification of higher

00:28:21,960 --> 00:28:26,580
levels and one education of that is I

00:28:24,870 --> 00:28:29,940
look at the full help for the GEEP

00:28:26,580 --> 00:28:33,330
comment and you can fight pretty

00:28:29,940 --> 00:28:35,070
surprising things that it can do so it's

00:28:33,330 --> 00:28:37,960
gonna Burson control system but it can

00:28:35,070 --> 00:28:40,240
send emails why this sends in

00:28:37,960 --> 00:28:43,060
or it can parse some files that are

00:28:40,240 --> 00:28:45,610
extracted from emails again why why

00:28:43,060 --> 00:28:47,920
version control system is doing this or

00:28:45,610 --> 00:28:52,120
it has functionality to manage manage

00:28:47,920 --> 00:28:56,290
and record base database in a plaintext

00:28:52,120 --> 00:28:57,670
commit messages again like Y so the

00:28:56,290 --> 00:28:59,920
answer is that that's just the only

00:28:57,670 --> 00:29:02,080
common denominator that we have so if

00:28:59,920 --> 00:29:04,210
you want anything in the kind of in the

00:29:02,080 --> 00:29:06,550
kernel process you have to push it in to

00:29:04,210 --> 00:29:09,670
get read the Toba second have issue

00:29:06,550 --> 00:29:14,710
tracker and no testing support in the

00:29:09,670 --> 00:29:16,270
GEEP probably that would be bad idea so

00:29:14,710 --> 00:29:19,510
I think with penis stuck in a local

00:29:16,270 --> 00:29:21,280
Optima and current answer for any

00:29:19,510 --> 00:29:23,620
problem in the kernel is like II do

00:29:21,280 --> 00:29:28,240
small steps and the thing is that we can

00:29:23,620 --> 00:29:31,180
get a wave out from this thing is that

00:29:28,240 --> 00:29:33,370
no amount of small steps which get Linux

00:29:31,180 --> 00:29:36,280
as a project away from email based

00:29:33,370 --> 00:29:38,140
process it's actually even worse is so

00:29:36,280 --> 00:29:40,600
people try to do some improvements say

00:29:38,140 --> 00:29:43,090
they try to switch to github gif flop

00:29:40,600 --> 00:29:46,420
Gerrit or you know run another local

00:29:43,090 --> 00:29:48,840
script and this makes situation better

00:29:46,420 --> 00:29:51,250
locally for them but it's actually makes

00:29:48,840 --> 00:29:52,960
situation worse for the whole project

00:29:51,250 --> 00:29:56,560
because we have now even more

00:29:52,960 --> 00:29:58,660
fragmentation so what I think we need to

00:29:56,560 --> 00:30:00,550
do we can I need to make a step back and

00:29:58,660 --> 00:30:03,640
look at the final destination where we

00:30:00,550 --> 00:30:08,770
want to be and try to make an A for step

00:30:03,640 --> 00:30:11,800
to you know to better optima yeah

00:30:08,770 --> 00:30:13,900
because we have structural systemic

00:30:11,800 --> 00:30:17,230
problem and it can be solved simply by

00:30:13,900 --> 00:30:19,240
you know some number of local fixes

00:30:17,230 --> 00:30:23,730
local improvements for structural

00:30:19,240 --> 00:30:23,730
problem you need a structural solution

00:30:24,420 --> 00:30:30,880
so now the last question is how how we

00:30:28,360 --> 00:30:33,310
can how we can get there what exactly is

00:30:30,880 --> 00:30:35,170
the action plan and I don't have precise

00:30:33,310 --> 00:30:38,020
answer first of all because it's a hard

00:30:35,170 --> 00:30:40,300
problem second I didn't simply tell all

00:30:38,020 --> 00:30:44,650
of you what you need to do so I think we

00:30:40,300 --> 00:30:47,710
need to discuss and you know try to come

00:30:44,650 --> 00:30:48,720
up with a solution I have some ideas

00:30:47,710 --> 00:30:51,120
about implement

00:30:48,720 --> 00:30:52,320
so first of all I think it needs to be

00:30:51,120 --> 00:30:54,420
if they're doing this it means very

00:30:52,320 --> 00:30:57,930
explicit effort we need to understand

00:30:54,420 --> 00:31:00,090
that we're you know creating venue the

00:30:57,930 --> 00:31:01,800
kernel way of doing things that will be

00:31:00,090 --> 00:31:04,770
used everywhere so the worst thing that

00:31:01,800 --> 00:31:07,350
can happen with with this is if this

00:31:04,770 --> 00:31:08,970
will be try to be downgraded again to

00:31:07,350 --> 00:31:11,310
the same you know you propose that you

00:31:08,970 --> 00:31:16,290
try to do something you know over there

00:31:11,310 --> 00:31:18,290
and you know we were and then the the

00:31:16,290 --> 00:31:21,120
best outcome is that it will die the

00:31:18,290 --> 00:31:24,510
worst outcomes that will it will only

00:31:21,120 --> 00:31:26,580
increase fragmentation even more so

00:31:24,510 --> 00:31:30,710
second I think it means very explicit

00:31:26,580 --> 00:31:30,710
buy-in from leadership including winners

00:31:31,010 --> 00:31:37,200
because the current distributed kernel

00:31:34,770 --> 00:31:39,960
community is very hard for it to kind of

00:31:37,200 --> 00:31:42,270
self organize for for such watch radical

00:31:39,960 --> 00:31:45,170
changes without explicit leadership

00:31:42,270 --> 00:31:48,600
because again nobody have any powers and

00:31:45,170 --> 00:31:50,460
the second implications that than

00:31:48,600 --> 00:31:52,950
leadership will need to ensure

00:31:50,460 --> 00:31:56,190
everything they can't do actually to

00:31:52,950 --> 00:31:58,860
make this effort the success inclusion

00:31:56,190 --> 00:32:01,020
kind of change in the direction on the

00:31:58,860 --> 00:32:04,620
way to ensure that it actually arrives

00:32:01,020 --> 00:32:06,450
to the natural destination it may need

00:32:04,620 --> 00:32:08,190
to use working group approach simply

00:32:06,450 --> 00:32:09,930
because discussing all things and the

00:32:08,190 --> 00:32:11,730
mailing list you know five thousand

00:32:09,930 --> 00:32:15,870
people maybe not the most productive

00:32:11,730 --> 00:32:18,750
thing some of the changes may need kind

00:32:15,870 --> 00:32:21,330
of a carte blanche approach just simply

00:32:18,750 --> 00:32:24,090
because that may require lots of changes

00:32:21,330 --> 00:32:26,340
and if you need to you know can justify

00:32:24,090 --> 00:32:29,580
an argue on each small changes everybody

00:32:26,340 --> 00:32:32,280
maybe just become unfeasible to do I

00:32:29,580 --> 00:32:34,470
know it needs to be a rough project I

00:32:32,280 --> 00:32:37,020
don't know maybe but companies who need

00:32:34,470 --> 00:32:39,540
to donate some people for this and the

00:32:37,020 --> 00:32:41,820
thing is that companies already spending

00:32:39,540 --> 00:32:43,500
significant amount resources just

00:32:41,820 --> 00:32:46,140
currently they spend not in the most

00:32:43,500 --> 00:32:48,690
efficient way I think so it just kind of

00:32:46,140 --> 00:32:52,560
latest that they repurpose their

00:32:48,690 --> 00:32:56,100
resources and the question is if this

00:32:52,560 --> 00:32:58,440
can then benefit the companies you know

00:32:56,100 --> 00:33:00,870
testing and processes because save lots

00:32:58,440 --> 00:33:02,100
of distress do you know own tests and

00:33:00,870 --> 00:33:04,890
they have own to Lincoln

00:33:02,100 --> 00:33:06,950
so answer the natural to kind of be able

00:33:04,890 --> 00:33:09,240
for those company sorcery use

00:33:06,950 --> 00:33:12,450
significant part of this right because

00:33:09,240 --> 00:33:14,429
they denied the people obviously only

00:33:12,450 --> 00:33:16,410
the open-source and probably noticed

00:33:14,429 --> 00:33:19,400
scanned a single web system deployed by

00:33:16,410 --> 00:33:23,340
single company I think also means being

00:33:19,400 --> 00:33:25,200
incremental in multiple dimensions can

00:33:23,340 --> 00:33:27,750
read the features as we implement them

00:33:25,200 --> 00:33:31,530
at all so unification so the first step

00:33:27,750 --> 00:33:35,490
may be to have several as in fragmented

00:33:31,530 --> 00:33:37,590
think just be unified and the single

00:33:35,490 --> 00:33:39,360
interface the higher level and the lower

00:33:37,590 --> 00:33:41,429
levels this kind of fragmentation

00:33:39,360 --> 00:33:43,590
becomes local within a single block

00:33:41,429 --> 00:33:47,100
rather than Canon global and affecting

00:33:43,590 --> 00:33:50,490
the whole system and the sub system also

00:33:47,100 --> 00:33:52,590
as they switch to this new new to link

00:33:50,490 --> 00:33:54,659
it also needs to be incremental

00:33:52,590 --> 00:33:56,940
initially probably switch one of them

00:33:54,659 --> 00:33:58,590
then maybe few more it's just important

00:33:56,940 --> 00:34:00,960
to understand that we're switching all

00:33:58,590 --> 00:34:06,659
of them rather than stopping after in a

00:34:00,960 --> 00:34:09,810
three or five yes and last thing so

00:34:06,659 --> 00:34:12,240
recently Constantine rabbits off road

00:34:09,810 --> 00:34:16,040
block postcode batches curtain the

00:34:12,240 --> 00:34:18,889
developer seek chains where he tries to

00:34:16,040 --> 00:34:21,270
solve some of the problems with email

00:34:18,889 --> 00:34:24,720
it's actually different problems it's

00:34:21,270 --> 00:34:28,320
like more let's say technical problems

00:34:24,720 --> 00:34:30,629
with the mail itself but yet the post

00:34:28,320 --> 00:34:32,879
talks about the protocol called SSB ETFs

00:34:30,629 --> 00:34:35,460
which is kinda email in the sense that

00:34:32,879 --> 00:34:37,590
people exchange messages except that

00:34:35,460 --> 00:34:39,690
it's peer-to-peer protocol fully

00:34:37,590 --> 00:34:42,510
distributed but it can also have servers

00:34:39,690 --> 00:34:46,830
for sherek Ivan and Pro proxy and

00:34:42,510 --> 00:34:48,659
purposes it can work offline it has

00:34:46,830 --> 00:34:51,030
strong notion of identity trust

00:34:48,659 --> 00:34:53,220
encryption and the most important thing

00:34:51,030 --> 00:34:55,290
for us is that it can meant for high

00:34:53,220 --> 00:34:57,390
level protocols it's kind of it just a

00:34:55,290 --> 00:34:59,250
transport so you can imagine that you

00:34:57,390 --> 00:35:00,840
can just send messages and chat with

00:34:59,250 --> 00:35:03,090
people but you can also send a special

00:35:00,840 --> 00:35:05,220
message which means I'm submitting a

00:35:03,090 --> 00:35:08,670
change which has you know your watch

00:35:05,220 --> 00:35:12,000
your base three basic need or this is

00:35:08,670 --> 00:35:14,880
the next version of that change and so

00:35:12,000 --> 00:35:15,700
on or say I am I'm you know reviewed by

00:35:14,880 --> 00:35:17,349
me

00:35:15,700 --> 00:35:19,390
a special type of message which will

00:35:17,349 --> 00:35:22,119
actually which will automatically add

00:35:19,390 --> 00:35:25,599
the tag to the final comedian such

00:35:22,119 --> 00:35:27,520
things and there's a company or a system

00:35:25,599 --> 00:35:28,750
called radical which creates a

00:35:27,520 --> 00:35:30,339
peer-to-peer stack for code

00:35:28,750 --> 00:35:32,500
collaboration based in one of those

00:35:30,339 --> 00:35:36,369
protocols and on the website they have

00:35:32,500 --> 00:35:37,900
some examples which may be appealing to

00:35:36,369 --> 00:35:40,750
some of the kernel developers so they

00:35:37,900 --> 00:35:43,839
have a full common line interface where

00:35:40,750 --> 00:35:46,900
you can do say you know least my patches

00:35:43,839 --> 00:35:49,000
for review or accept that patch or you

00:35:46,900 --> 00:35:52,180
know send the change or released open

00:35:49,000 --> 00:35:54,069
issues and so now read a comment so I'm

00:35:52,180 --> 00:35:55,630
not saying that we need to use exactly

00:35:54,069 --> 00:35:57,730
this I'm just saying that something like

00:35:55,630 --> 00:36:00,579
this may potentially be a very good fit

00:35:57,730 --> 00:36:06,849
for a kernel and obviously web interface

00:36:00,579 --> 00:36:09,130
for that is also possible the build so

00:36:06,849 --> 00:36:12,400
summary we have a number of systemic

00:36:09,130 --> 00:36:14,799
problems and well if you don't take any

00:36:12,400 --> 00:36:16,990
action well the current development

00:36:14,799 --> 00:36:21,250
process will continue to work as it is

00:36:16,990 --> 00:36:23,829
now like nothing breaks so developers

00:36:21,250 --> 00:36:26,410
may have lower productivity then they

00:36:23,829 --> 00:36:29,140
could have and we have you know tens of

00:36:26,410 --> 00:36:31,799
thousand bucks per release security will

00:36:29,140 --> 00:36:37,869
stay low and inflow of people will be

00:36:31,799 --> 00:36:40,540
lower and fixing the testam I think will

00:36:37,869 --> 00:36:43,089
take significant time and significant

00:36:40,540 --> 00:36:45,460
amount of effort so I propose that we

00:36:43,089 --> 00:36:47,619
take a more radical action for the

00:36:45,460 --> 00:36:51,970
greater benefit of the Linux kernel and

00:36:47,619 --> 00:36:55,299
looking at the next decades of Linux you

00:36:51,970 --> 00:36:57,880
know growth so think about for example

00:36:55,299 --> 00:37:00,190
ten years from now are we still on email

00:36:57,880 --> 00:37:03,190
processes and fighting with the same

00:37:00,190 --> 00:37:04,869
probe problems and will it happen if we

00:37:03,190 --> 00:37:10,540
just you know continue doing small

00:37:04,869 --> 00:37:13,890
changes with no centralization so now

00:37:10,540 --> 00:37:17,109
may be the right time for changes and

00:37:13,890 --> 00:37:20,790
that's it thank you yeah so we have a

00:37:17,109 --> 00:37:20,790
lot yes so let's thank the speaker

00:37:25,560 --> 00:37:30,230
so we have a lot of people who I suspect

00:37:27,450 --> 00:37:33,869
are going to want to make some comments

00:37:30,230 --> 00:37:36,420
and I do need to allow time for the

00:37:33,869 --> 00:37:38,640
follow on speaker so if you could try to

00:37:36,420 --> 00:37:41,160
keep your questions or comments short

00:37:38,640 --> 00:37:43,380
please stand up and identify yourself

00:37:41,160 --> 00:37:45,619
raise your hand I'll try to acknowledge

00:37:43,380 --> 00:37:59,960
you and try to get to people in order

00:37:45,619 --> 00:38:04,109
and I'll be passing the mic around I

00:37:59,960 --> 00:38:08,369
wanted to ask you a question about more

00:38:04,109 --> 00:38:12,630
about this but in terms of I have been

00:38:08,369 --> 00:38:15,990
how do we update stuff duplicate bugs or

00:38:12,630 --> 00:38:18,330
you know a process on your end how

00:38:15,990 --> 00:38:20,099
what's the effective wait for us to do

00:38:18,330 --> 00:38:22,560
that because I have tons of if you

00:38:20,099 --> 00:38:24,540
duplicate bugs and I'm looking at well I

00:38:22,560 --> 00:38:25,230
don't have a good way to update I can

00:38:24,540 --> 00:38:28,760
figure it out

00:38:25,230 --> 00:38:32,609
so I was hoping to hear some of that

00:38:28,760 --> 00:38:39,900
actually from this talk but we can talk

00:38:32,609 --> 00:38:41,580
offline if you could suggest one of the

00:38:39,900 --> 00:38:43,560
things you discussed here to bring up

00:38:41,580 --> 00:38:44,910
say at a meeting with Colonel maintain

00:38:43,560 --> 00:38:51,210
errs that might be going on tomorrow

00:38:44,910 --> 00:38:59,310
what would you suggest overall this is

00:38:51,210 --> 00:39:02,089
what we want to do or not okay other

00:38:59,310 --> 00:39:02,089
questions or comments

00:39:07,499 --> 00:39:12,460
hello you mentioned me by name in there

00:39:09,970 --> 00:39:15,910
so I wanted to chime in the the stuff

00:39:12,460 --> 00:39:17,589
that I would love to see a lot of this

00:39:15,910 --> 00:39:19,210
stuff happen right the problem was that

00:39:17,589 --> 00:39:21,579
the maintainer x' need to be the drivers

00:39:19,210 --> 00:39:23,380
for this I can't come to to the

00:39:21,579 --> 00:39:24,729
foundation and say this needs to happen

00:39:23,380 --> 00:39:27,460
because I say so

00:39:24,729 --> 00:39:28,779
right because I'm just the sysadmin for

00:39:27,460 --> 00:39:30,069
carolerich as far as everybody's

00:39:28,779 --> 00:39:32,979
concerned you know I'm just maintaining

00:39:30,069 --> 00:39:35,589
things running so this needs to be

00:39:32,979 --> 00:39:37,059
driven by people that Jim's Emlyn

00:39:35,589 --> 00:39:39,160
listens to if this does to become a

00:39:37,059 --> 00:39:40,329
Linux Foundation project like Greg needs

00:39:39,160 --> 00:39:41,650
to come to his gym and say this is

00:39:40,329 --> 00:39:43,509
something that needs definitely happened

00:39:41,650 --> 00:39:45,970
because the community is asking for it

00:39:43,509 --> 00:39:47,380
the advisory board needs to come to

00:39:45,970 --> 00:39:49,089
Jim's I'm gonna say this this is

00:39:47,380 --> 00:39:50,440
absolutely overdue we can't continue

00:39:49,089 --> 00:39:53,140
like this because this is a pressing

00:39:50,440 --> 00:39:54,940
problem that is breaking the kernel and

00:39:53,140 --> 00:39:56,979
it's things if we don't change something

00:39:54,940 --> 00:39:58,660
we're gonna see things deteriorate even

00:39:56,979 --> 00:40:02,019
further in fragment and fragment and

00:39:58,660 --> 00:40:03,880
everything and this is pretty much the

00:40:02,019 --> 00:40:04,989
only way to make this alliance relation

00:40:03,880 --> 00:40:06,220
project if we don't want to make it a

00:40:04,989 --> 00:40:08,349
little information project that's also

00:40:06,220 --> 00:40:09,640
possible you can come to Microsoft and

00:40:08,349 --> 00:40:11,619
say would you like to make yourself a

00:40:09,640 --> 00:40:15,309
big name any learnings caralyn community

00:40:11,619 --> 00:40:17,440
you ever make a team of engineers and

00:40:15,309 --> 00:40:20,140
work with maintainer x' and see how he

00:40:17,440 --> 00:40:22,569
can help solve this particular problem

00:40:20,140 --> 00:40:25,509
without bringing up another web service

00:40:22,569 --> 00:40:27,249
like centralized one so that's kind of

00:40:25,509 --> 00:40:30,369
where I'm standing standing and when I

00:40:27,249 --> 00:40:33,219
see the problem right now it's not it's

00:40:30,369 --> 00:40:35,729
not an easy fix without a drive from

00:40:33,219 --> 00:40:38,259
maintainer x' to make this change happen

00:40:35,729 --> 00:40:40,239
and since my dana is a very thinly

00:40:38,259 --> 00:40:41,680
spread they don't have enough cycles to

00:40:40,239 --> 00:40:45,539
really spend a lot of brainpower on

00:40:41,680 --> 00:40:45,539
figuring out where needs to go

00:40:52,640 --> 00:40:58,640
so have you ever heard of the the paper

00:40:56,750 --> 00:41:00,200
I think might been extended to a book

00:40:58,640 --> 00:41:02,750
the cathedral and the bazaar

00:41:00,200 --> 00:41:05,060
I remember reading something like this

00:41:02,750 --> 00:41:06,800
but the goal I think it might be

00:41:05,060 --> 00:41:09,590
interesting in the context of this talk

00:41:06,800 --> 00:41:12,290
because I I think it it basically argues

00:41:09,590 --> 00:41:14,570
the I think what you're arguing against

00:41:12,290 --> 00:41:17,180
is the bazaar model of the kernel which

00:41:14,570 --> 00:41:20,290
is exactly why the like the author

00:41:17,180 --> 00:41:24,740
argues that's why the Linux kernel

00:41:20,290 --> 00:41:26,150
community succeeded so it's kind of a

00:41:24,740 --> 00:41:29,060
long discussion I don't want to like

00:41:26,150 --> 00:41:30,440
waste other people's time but I think

00:41:29,060 --> 00:41:33,050
that what you're describing is basically

00:41:30,440 --> 00:41:36,170
you specifically ask for a push toward

00:41:33,050 --> 00:41:37,670
centralization and this paper argues

00:41:36,170 --> 00:41:39,770
that the decentralized model of the

00:41:37,670 --> 00:41:41,690
kernel this fragmentation is actually

00:41:39,770 --> 00:41:43,460
what allowed it to succeed because it

00:41:41,690 --> 00:41:46,599
allows people to have their own agendas

00:41:43,460 --> 00:41:46,599
and their own ways of doing things

00:41:46,660 --> 00:41:52,940
yes it's so figured more things that

00:41:50,330 --> 00:41:55,190
actually you know good ways of doing

00:41:52,940 --> 00:41:57,109
things maybe time to promote some of

00:41:55,190 --> 00:42:02,390
their you know this care was actually

00:41:57,109 --> 00:42:04,790
one solution so there are so there's a

00:42:02,390 --> 00:42:06,470
kernel CI project which has not been

00:42:04,790 --> 00:42:09,440
formally announced yet but a Linux

00:42:06,470 --> 00:42:12,170
Foundation project in the CI space that

00:42:09,440 --> 00:42:14,000
I am hoping will be able to take on some

00:42:12,170 --> 00:42:18,050
of those bubbles that run your on your

00:42:14,000 --> 00:42:21,050
boxes or slides and there are people

00:42:18,050 --> 00:42:22,700
working on aspects of this you know and

00:42:21,050 --> 00:42:25,910
it remains to be seen how much buying

00:42:22,700 --> 00:42:28,550
will get because but I just want to say

00:42:25,910 --> 00:42:29,630
it's it's not all gloom and doom I mean

00:42:28,550 --> 00:42:31,280
there are people who see the same

00:42:29,630 --> 00:42:33,859
problem and it's actually refreshing to

00:42:31,280 --> 00:42:36,230
see multiple people just at this event

00:42:33,859 --> 00:42:37,910
saying basically the same thing that we

00:42:36,230 --> 00:42:40,700
need to consolidate and unify around a

00:42:37,910 --> 00:42:42,170
couple of things so I'm hopeful that

00:42:40,700 --> 00:42:43,609
we'll make some progress in the next

00:42:42,170 --> 00:42:45,640
couple of years so we'll see what

00:42:43,609 --> 00:42:45,640
happens

00:42:46,860 --> 00:42:52,500
it just occurs to me that it's largely a

00:42:50,040 --> 00:42:54,540
scaling problem if we had enough people

00:42:52,500 --> 00:42:57,000
to bars our model would probably still

00:42:54,540 --> 00:43:00,480
work but we don't have enough people or

00:42:57,000 --> 00:43:02,880
what working force to ensure that model

00:43:00,480 --> 00:43:05,220
and so we need to think what to do and

00:43:02,880 --> 00:43:07,770
your option I think your option is one

00:43:05,220 --> 00:43:23,310
option having tons of people would be

00:43:07,770 --> 00:43:25,590
another one Marc Roland and no big

00:43:23,310 --> 00:43:27,270
problem is scale of communication throw

00:43:25,590 --> 00:43:29,940
more people at that you now have more

00:43:27,270 --> 00:43:31,800
communications that have to occur if

00:43:29,940 --> 00:43:33,150
that doesn't work that's like the thing

00:43:31,800 --> 00:43:35,250
mentioned about all the trees in need to

00:43:33,150 --> 00:43:37,590
back port to you now throwing more

00:43:35,250 --> 00:43:40,740
people in you lose information because

00:43:37,590 --> 00:43:42,270
someone doesn't fully understand what

00:43:40,740 --> 00:43:43,530
all the intimate details are the problem

00:43:42,270 --> 00:43:45,510
they're trying to solve the next person

00:43:43,530 --> 00:43:50,360
on loses one more detail and four and

00:43:45,510 --> 00:43:50,360
more people who generally does not help

00:44:02,850 --> 00:44:07,560
time for one more question or comment

00:44:08,250 --> 00:44:15,490
all right well I will mention that for

00:44:12,690 --> 00:44:17,200
file system testing in particular I had

00:44:15,490 --> 00:44:20,080
actually tried to make the tool that I

00:44:17,200 --> 00:44:22,690
work on apply for multiple file systems

00:44:20,080 --> 00:44:24,970
and I made an attempt to see if I could

00:44:22,690 --> 00:44:27,430
get other file system maintainer x' to

00:44:24,970 --> 00:44:29,020
use my tool which in my opinion actually

00:44:27,430 --> 00:44:31,330
does a lot of things better than some of

00:44:29,020 --> 00:44:32,800
the other tools and everybody has

00:44:31,330 --> 00:44:35,350
decided they want to do their own thing

00:44:32,800 --> 00:44:38,320
so we've consolidated on XFS tests as

00:44:35,350 --> 00:44:41,260
how to actually run file system testing

00:44:38,320 --> 00:44:43,300
I have utterly failed on making my test

00:44:41,260 --> 00:44:45,880
runner something that more people are

00:44:43,300 --> 00:44:47,860
willing to use and the only approach

00:44:45,880 --> 00:44:50,140
i've been able to use is I'm trying to

00:44:47,860 --> 00:44:52,210
get some interns to add you know

00:44:50,140 --> 00:44:54,130
automatic kernel building and bisection

00:44:52,210 --> 00:44:56,680
and try to add enough features that it

00:44:54,130 --> 00:44:58,810
is so much more powerful than the other

00:44:56,680 --> 00:45:01,120
tools that it can generate the

00:44:58,810 --> 00:45:03,730
attractive force to make it be

00:45:01,120 --> 00:45:06,670
successful and I'm trying to do that on

00:45:03,730 --> 00:45:11,350
volunteer labor because you know it's a

00:45:06,670 --> 00:45:13,780
lot easier that way it's so much

00:45:11,350 --> 00:45:15,580
fragmented that no single testing effort

00:45:13,780 --> 00:45:18,850
can get enough resources to actually

00:45:15,580 --> 00:45:20,350
pass the bar of being really you know

00:45:18,850 --> 00:45:22,930
sounds like you're doing the same thing

00:45:20,350 --> 00:45:25,060
that like seven of the CI systems are

00:45:22,930 --> 00:45:27,520
doing which is adding bisection to make

00:45:25,060 --> 00:45:29,500
it attractive enough to so I mean it's

00:45:27,520 --> 00:45:31,450
that's a manifestation of the problem

00:45:29,500 --> 00:45:33,430
right and if there was a really really

00:45:31,450 --> 00:45:35,650
good bisect tool which there was a talk

00:45:33,430 --> 00:45:37,690
on yesterday you wouldn't have to do

00:45:35,650 --> 00:45:41,530
that right so we could all specialize if

00:45:37,690 --> 00:45:43,720
we could make a a modular ecosystem yeah

00:45:41,530 --> 00:45:46,120
and I think the issue is is that none of

00:45:43,720 --> 00:45:48,610
the existing tools did the one thing I

00:45:46,120 --> 00:45:49,810
needed for file system testing and so I

00:45:48,610 --> 00:45:51,880
was forced to generate my own

00:45:49,810 --> 00:45:56,410
infrastructure and that's been the

00:45:51,880 --> 00:45:58,120
problem yeah but I think to the meatrix

00:45:56,410 --> 00:45:59,650
point what they suggest and basically

00:45:58,120 --> 00:46:01,480
instead of each of us getting a bunch of

00:45:59,650 --> 00:46:03,670
interns and people trying to make your

00:46:01,480 --> 00:46:04,890
system better we pull those people into

00:46:03,670 --> 00:46:06,779
this big

00:46:04,890 --> 00:46:07,980
were crippled to make the community

00:46:06,779 --> 00:46:11,660
better in general instead of competing

00:46:07,980 --> 00:46:11,660
with each other or trying to compete

00:46:15,259 --> 00:46:19,769
yeah let's make this last comment I want

00:46:18,059 --> 00:46:23,630
to make sure there's enough room for the

00:46:19,769 --> 00:46:30,269
next talk so I think we all agree that

00:46:23,630 --> 00:46:31,890
everything should be better and we agree

00:46:30,269 --> 00:46:34,230
that we need Minister buy-in and blah

00:46:31,890 --> 00:46:36,990
blah blah but you've got to have a

00:46:34,230 --> 00:46:40,410
really concrete proposal like what what

00:46:36,990 --> 00:46:44,190
exactly should we be switching to like

00:46:40,410 --> 00:46:46,740
what's the we have to take some pain to

00:46:44,190 --> 00:46:48,839
get to the next local Maxima what is it

00:46:46,740 --> 00:46:51,420
so when you concrete proposal but I'm

00:46:48,839 --> 00:46:53,609
sure that it's should not be only me who

00:46:51,420 --> 00:46:56,150
will you know create all of this

00:46:53,609 --> 00:46:59,460
proposal with all of the details right

00:46:56,150 --> 00:47:02,819
baby so I'm just creating this proposal

00:46:59,460 --> 00:47:04,650
is the loss of work right so it even

00:47:02,819 --> 00:47:29,670
that will require a kind of a working

00:47:04,650 --> 00:47:31,319
group to you know but I mean you know

00:47:29,670 --> 00:47:33,539
he's not just talking about testing he's

00:47:31,319 --> 00:47:36,180
talking about submission and the whole

00:47:33,539 --> 00:47:37,950
thing yeah yeah how do you get how do

00:47:36,180 --> 00:47:40,380
you get patches such tests and how do

00:47:37,950 --> 00:47:42,089
you send results for example kernels see

00:47:40,380 --> 00:47:44,940
I can do this and it's gained heart

00:47:42,089 --> 00:47:47,609
problem it's not solely on the testing

00:47:44,940 --> 00:47:49,140
you know area yeah so I'm afraid we

00:47:47,609 --> 00:47:51,960
probably could keep on going through the

00:47:49,140 --> 00:47:53,970
rest of the day so let's thank to me

00:47:51,960 --> 00:47:57,019
treaty and this conversation will

00:47:53,970 --> 00:47:57,019

YouTube URL: https://www.youtube.com/watch?v=iAfrrNdl2f4


