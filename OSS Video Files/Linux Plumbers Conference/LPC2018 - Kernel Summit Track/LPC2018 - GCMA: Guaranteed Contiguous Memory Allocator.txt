Title: LPC2018 - GCMA: Guaranteed Contiguous Memory Allocator
Publication date: 2018-12-04
Playlist: LPC2018 - Kernel Summit Track
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/247/
speaker:  SeongJae Park
Captions: 
	00:00:05,570 --> 00:00:11,450
hi nice to meet you my name is Hamza

00:00:08,809 --> 00:00:15,950
Park and today I would like to introduce

00:00:11,450 --> 00:00:17,779
a later project of mine the name the GC

00:00:15,950 --> 00:00:20,150
i made or guaranteed continuous memory

00:00:17,779 --> 00:00:22,250
allocator first i would like to

00:00:20,150 --> 00:00:24,890
introduce myself my name is as I said

00:00:22,250 --> 00:00:26,660
before is from Japan and I am currently

00:00:24,890 --> 00:00:29,840
pursuing PhD at Seoul National

00:00:26,660 --> 00:00:31,700
University and I am interested in memory

00:00:29,840 --> 00:00:34,280
management and para probing for OS

00:00:31,700 --> 00:00:38,180
colors so I am graduate student rather

00:00:34,280 --> 00:00:40,820
than expertised engineer so maybe my

00:00:38,180 --> 00:00:44,990
present would be not so good but please

00:00:40,820 --> 00:00:47,750
keep in mind death so first I would like

00:00:44,990 --> 00:00:52,010
to say about requirements of the 20s

00:00:47,750 --> 00:00:54,220
memory allocation because we already

00:00:52,010 --> 00:00:58,400
live in the world of the virtualized

00:00:54,220 --> 00:01:01,250
memory systems someone who first studied

00:00:58,400 --> 00:01:04,759
to becoming a color newbie programmer

00:01:01,250 --> 00:01:07,630
would wonder why the continuous physical

00:01:04,759 --> 00:01:10,520
conscious memory allocation is necessary

00:01:07,630 --> 00:01:12,979
because the there is the memory

00:01:10,520 --> 00:01:15,110
management you need he resided between

00:01:12,979 --> 00:01:18,170
the CPU and the physical memory and

00:01:15,110 --> 00:01:21,020
because it can translate the virtual

00:01:18,170 --> 00:01:22,940
orders into the physical address we can

00:01:21,020 --> 00:01:26,270
use the virtual memory system which each

00:01:22,940 --> 00:01:29,930
mapping the any what her other's space

00:01:26,270 --> 00:01:32,210
to the any physical memory space so in

00:01:29,930 --> 00:01:36,670
this case we don't need continuous

00:01:32,210 --> 00:01:40,310
memory location but it is really

00:01:36,670 --> 00:01:43,400
necessary for the device using direct

00:01:40,310 --> 00:01:47,240
memory access there are many devices

00:01:43,400 --> 00:01:49,909
such as the camera or video camcorder

00:01:47,240 --> 00:01:52,070
and network interface card and such a

00:01:49,909 --> 00:01:55,159
device needs large internal buffer to

00:01:52,070 --> 00:01:58,640
keep the data in memory and to

00:01:55,159 --> 00:02:01,340
communicate with the CPU or other device

00:01:58,640 --> 00:02:03,979
for example we can think about the

00:02:01,340 --> 00:02:07,909
travel megapixel camera what 10 Gbps

00:02:03,979 --> 00:02:10,519
network interface card or maybe gpgpu

00:02:07,909 --> 00:02:12,769
or something else and because the memory

00:02:10,519 --> 00:02:15,109
management unit which translates the

00:02:12,769 --> 00:02:19,270
water orders paste to the fish coral

00:02:15,109 --> 00:02:21,310
that space is resized behind the CPU

00:02:19,270 --> 00:02:24,730
device directly addressing the memory

00:02:21,310 --> 00:02:28,000
without the CPU cannot use the water

00:02:24,730 --> 00:02:30,400
address because there is no MMU which

00:02:28,000 --> 00:02:34,690
can translate the device order space to

00:02:30,400 --> 00:02:38,290
physical memory other spaces and there

00:02:34,690 --> 00:02:40,660
is another case which is requiring the

00:02:38,290 --> 00:02:44,170
continuous memory location it is acute

00:02:40,660 --> 00:02:47,440
pages a system can have a multiple size

00:02:44,170 --> 00:02:49,330
of pages usually 40 bytes which is

00:02:47,440 --> 00:02:51,160
called regular pages and the two may be

00:02:49,330 --> 00:02:53,470
byte which is called huge pages also

00:02:51,160 --> 00:02:56,470
there are many systems using another

00:02:53,470 --> 00:02:58,810
side which is pages for example the 8th

00:02:56,470 --> 00:03:02,260
leadership can have one you write pages

00:02:58,810 --> 00:03:05,200
page which is called gig and pages and

00:03:02,260 --> 00:03:07,360
the use of the huge pages can improve

00:03:05,200 --> 00:03:10,900
shift improvements by reducing heavy

00:03:07,360 --> 00:03:11,710
means - which in case the theorem is in

00:03:10,900 --> 00:03:16,270
focus

00:03:11,710 --> 00:03:20,350
it becomes the page table work which is

00:03:16,270 --> 00:03:23,440
very very expensive and the should page

00:03:20,350 --> 00:03:25,570
in terms of the choose pages is growing

00:03:23,440 --> 00:03:28,390
for now because the modern workloads

00:03:25,570 --> 00:03:31,630
including big data and cloud and machine

00:03:28,390 --> 00:03:36,340
learning memory intensive internship is

00:03:31,630 --> 00:03:39,730
the name of the big database so the

00:03:36,340 --> 00:03:43,900
shift MC keeping the terabytes of the

00:03:39,730 --> 00:03:47,680
RAM not real now and especially because

00:03:43,900 --> 00:03:51,280
it is the era over the cloud computing

00:03:47,680 --> 00:03:54,310
and because almost every company in

00:03:51,280 --> 00:03:59,370
system is running on the virtualizer

00:03:54,310 --> 00:04:02,320
system the importance of shows page is

00:03:59,370 --> 00:04:05,459
even growing because in case of the

00:04:02,320 --> 00:04:08,920
virtualization if the Jeremy so cost

00:04:05,459 --> 00:04:12,880
cost of the page table work would be

00:04:08,920 --> 00:04:18,090
double because I shall walk on the gift

00:04:12,880 --> 00:04:18,090
and then host so

00:04:18,630 --> 00:04:24,850
however the - maybe by teachers page is

00:04:21,790 --> 00:04:26,560
just five hundred five hundred and

00:04:24,850 --> 00:04:28,810
twelve fish called country of regular

00:04:26,560 --> 00:04:33,670
pages so we need continuous memory

00:04:28,810 --> 00:04:35,020
allocation in this case either and of

00:04:33,670 --> 00:04:37,540
course there are many English

00:04:35,020 --> 00:04:40,990
instructions but existing solutions all

00:04:37,540 --> 00:04:43,510
have some limitations first of all there

00:04:40,990 --> 00:04:45,940
are there is there are some hardware

00:04:43,510 --> 00:04:49,840
solutions the idea behind the hardware

00:04:45,940 --> 00:04:52,930
solutions is very simple it it it just

00:04:49,840 --> 00:04:56,620
add some mm you like additional hardware

00:04:52,930 --> 00:04:59,920
for devised in short there are some

00:04:56,620 --> 00:05:04,060
devices such as iommu and cattle Godot

00:04:59,920 --> 00:05:07,390
DMA iommu works as the MMU for devised

00:05:04,060 --> 00:05:11,260
and the sketch Godot DMA allow the

00:05:07,390 --> 00:05:16,570
device to scatter and gather data to and

00:05:11,260 --> 00:05:19,150
from the memory so iommu and scatter the

00:05:16,570 --> 00:05:21,700
DMA can give the continuous device

00:05:19,150 --> 00:05:24,280
memory illusion but it is just illusion

00:05:21,700 --> 00:05:26,980
and the additional hardware means the

00:05:24,280 --> 00:05:30,040
increase of power consumption and price

00:05:26,980 --> 00:05:34,320
which is a double for low-end devices

00:05:30,040 --> 00:05:40,870
such as a device for internal teams were

00:05:34,320 --> 00:05:42,820
extremely low and more phones and such

00:05:40,870 --> 00:05:45,250
an illusion is release form encased

00:05:42,820 --> 00:05:47,740
including the truth pages because they

00:05:45,250 --> 00:05:50,610
are just giving original natural real

00:05:47,740 --> 00:05:53,920
physically continuous memory though the

00:05:50,610 --> 00:05:59,100
just pages need real continuous memory

00:05:53,920 --> 00:06:02,800
and more words the hardware solutions is

00:05:59,100 --> 00:06:08,320
not only expensive what it also improved

00:06:02,800 --> 00:06:10,360
overhead the graph is from the last year

00:06:08,320 --> 00:06:13,120
linked from a conference which is

00:06:10,360 --> 00:06:16,570
present by the Christophe Lemaitre and

00:06:13,120 --> 00:06:18,700
his colleagues the name the presentation

00:06:16,570 --> 00:06:21,250
name was the use of continuous memory

00:06:18,700 --> 00:06:23,020
location for DMA this just the idea may

00:06:21,250 --> 00:06:25,240
be the most read end without the

00:06:23,020 --> 00:06:28,900
continuous page with continuous pages

00:06:25,240 --> 00:06:29,850
and one which is using the category DMA

00:06:28,900 --> 00:06:33,220
and

00:06:29,850 --> 00:06:34,720
clearly shows the overhead so how do i

00:06:33,220 --> 00:06:38,130
base the solutions are well known for

00:06:34,720 --> 00:06:41,530
low overhead but though it is very low

00:06:38,130 --> 00:06:43,840
the lower than the software based oceans

00:06:41,530 --> 00:06:48,759
the overhead is in each double and it

00:06:43,840 --> 00:06:51,130
really exists second there is the

00:06:48,759 --> 00:06:53,740
reserved area technique reserved the

00:06:51,130 --> 00:06:55,810
area technique is very simple idea it

00:06:53,740 --> 00:06:58,930
just reserved sufficient amount of

00:06:55,810 --> 00:07:01,120
continuous area memory area at good time

00:06:58,930 --> 00:07:03,669
because there is no free competition at

00:07:01,120 --> 00:07:05,949
put early put time and then let only

00:07:03,669 --> 00:07:08,979
continuous memory allocation to use the

00:07:05,949 --> 00:07:10,570
reserved area it is very simple and

00:07:08,979 --> 00:07:14,889
effective for continuous memory

00:07:10,570 --> 00:07:17,560
allocation it is really powerful and it

00:07:14,889 --> 00:07:21,849
can serve the continuous memory

00:07:17,560 --> 00:07:25,660
allocation very well but if the reserved

00:07:21,849 --> 00:07:29,710
area is not fully used by the continuous

00:07:25,660 --> 00:07:32,169
allocation request for 24 hours 7 days

00:07:29,710 --> 00:07:36,010
the memory space the memory space

00:07:32,169 --> 00:07:39,340
utilization could be very low however

00:07:36,010 --> 00:07:42,880
this is the one which is widely adapted

00:07:39,340 --> 00:07:48,520
to today's systems despite of the

00:07:42,880 --> 00:07:50,460
utilization problem and we have CMA the

00:07:48,520 --> 00:07:53,229
continuous memory allocator it is

00:07:50,460 --> 00:07:57,099
software based another solution in the

00:07:53,229 --> 00:07:59,740
linen color in today we can say the CMA

00:07:57,099 --> 00:08:02,650
as a general extended version of the

00:07:59,740 --> 00:08:04,840
reserved area technique it mainly focus

00:08:02,650 --> 00:08:07,930
on memory utilization problem of the

00:08:04,840 --> 00:08:13,449
ridge of the area technique it rejects

00:08:07,930 --> 00:08:17,020
the image of sufficiently large area in

00:08:13,449 --> 00:08:20,680
boot time as the reserve area technique

00:08:17,020 --> 00:08:23,349
does but it led moveable pages to use

00:08:20,680 --> 00:08:25,330
the reserved area and if continuous

00:08:23,349 --> 00:08:29,530
memory allocation requires the pages

00:08:25,330 --> 00:08:32,349
being used for moveable pages the CMA

00:08:29,530 --> 00:08:35,740
can move those pages out of the reserved

00:08:32,349 --> 00:08:38,289
area and then use the vacant area of the

00:08:35,740 --> 00:08:40,810
continuous memory location request you

00:08:38,289 --> 00:08:44,520
can solve the memory iteration problem

00:08:40,810 --> 00:08:44,520
where because general pages

00:08:44,550 --> 00:08:50,170
in other words we can say that CMA gives

00:08:47,890 --> 00:08:52,240
different priority to client of the

00:08:50,170 --> 00:08:55,480
region area there is two kinds of

00:08:52,240 --> 00:08:57,610
clients one is primary current which is

00:08:55,480 --> 00:09:01,440
country of medication and the secondary

00:08:57,610 --> 00:09:04,660
client is the movable page or location

00:09:01,440 --> 00:09:08,500
however unlike our expectation the CMA

00:09:04,660 --> 00:09:11,770
in the world shows some limitation first

00:09:08,500 --> 00:09:14,110
of all it is a little slow slower than

00:09:11,770 --> 00:09:16,990
the reach of the area technique we have

00:09:14,110 --> 00:09:19,930
measured the later on she would later on

00:09:16,990 --> 00:09:23,589
for taking a photo using camera app on

00:09:19,930 --> 00:09:26,320
Raspberry Pi 2 on the some memory severe

00:09:23,589 --> 00:09:30,640
memory stress we have used the block

00:09:26,320 --> 00:09:32,800
bench benchmark to give the memory

00:09:30,640 --> 00:09:37,410
stressed and then we measured three

00:09:32,800 --> 00:09:42,850
times we measure the latency three times

00:09:37,410 --> 00:09:45,670
the result is show the efficacy of the

00:09:42,850 --> 00:09:48,790
latency and the y axis shows the

00:09:45,670 --> 00:09:52,860
cumulative probability of the Tauri

00:09:48,790 --> 00:09:58,870
measurement so the worst case latency

00:09:52,860 --> 00:10:02,890
for reserved area technique was just 1.6

00:09:58,870 --> 00:10:08,170
seconds but meanwhile the worst case

00:10:02,890 --> 00:10:10,959
latency with CMA was even nine point

00:10:08,170 --> 00:10:16,050
eight second we can say that it is

00:10:10,959 --> 00:10:19,839
really on acceptable and the newer

00:10:16,050 --> 00:10:23,020
region of the slow latency of the camera

00:10:19,839 --> 00:10:25,150
application was the latency of the CMA

00:10:23,020 --> 00:10:27,790
we have measured the latency of the

00:10:25,150 --> 00:10:32,520
country of memory allocation using the

00:10:27,790 --> 00:10:35,800
CMA under the situation we have seen and

00:10:32,520 --> 00:10:37,959
is each of that the worst case latency

00:10:35,800 --> 00:10:41,620
of the country of memory location using

00:10:37,959 --> 00:10:43,320
CMA was about ten seconds so it's clear

00:10:41,620 --> 00:10:50,520
that latency of the camera application

00:10:43,320 --> 00:10:54,070
was due to the CMA so why it's so slow

00:10:50,520 --> 00:10:56,920
in short we can say that a second client

00:10:54,070 --> 00:11:00,370
of the CMA was not so nice

00:10:56,920 --> 00:11:03,700
we have expected first of all moving the

00:11:00,370 --> 00:11:06,610
page out from the reserved area to some

00:11:03,700 --> 00:11:09,459
other area eg on expansion tasks we

00:11:06,610 --> 00:11:12,010
should cut the contents of the page and

00:11:09,459 --> 00:11:15,279
then we should control the iron map and

00:11:12,010 --> 00:11:18,449
turn at least recently used list and

00:11:15,279 --> 00:11:21,490
something else so it is work it is

00:11:18,449 --> 00:11:24,310
original very expensive and if someone

00:11:21,490 --> 00:11:27,220
is holding the page for example if some

00:11:24,310 --> 00:11:30,430
color thread is using a get user page or

00:11:27,220 --> 00:11:34,000
something else we should wait until the

00:11:30,430 --> 00:11:39,180
color trial to release the page so as a

00:11:34,000 --> 00:11:42,250
result there seems is a result it's just

00:11:39,180 --> 00:11:45,040
unexpectedly long latency and even

00:11:42,250 --> 00:11:49,029
failure of the allocation that's why CMA

00:11:45,040 --> 00:11:51,910
is not adapted to many device for

00:11:49,029 --> 00:11:56,889
example the Raspberry Pi has tried to

00:11:51,910 --> 00:12:01,029
use the CMA as a buffer for device but

00:11:56,889 --> 00:12:06,070
it have forgived to use GMA after some

00:12:01,029 --> 00:12:10,360
wire and and also we know that there are

00:12:06,070 --> 00:12:14,769
many products using the CMA but in fact

00:12:10,360 --> 00:12:17,800
I know very many vendors of 30 shift

00:12:14,769 --> 00:12:23,890
terms are using some tricky tricks for

00:12:17,800 --> 00:12:27,070
CMA and there is also a body or locator

00:12:23,890 --> 00:12:28,690
body or locator or actively split and

00:12:27,070 --> 00:12:32,170
merge or the gesture and continuous

00:12:28,690 --> 00:12:34,470
pages and maintained by maintain the

00:12:32,170 --> 00:12:37,449
continuous pages they can give us a

00:12:34,470 --> 00:12:39,880
continuous page allocation and it is

00:12:37,449 --> 00:12:43,120
highly optimized and heavily used in the

00:12:39,880 --> 00:12:46,959
lymph corner because it is the number

00:12:43,120 --> 00:12:49,360
one allocated for page allocation but

00:12:46,959 --> 00:12:51,459
there is some limitations is support

00:12:49,360 --> 00:12:56,440
only multi or the quantity of pages and

00:12:51,459 --> 00:12:59,529
the size of the supporting pages each up

00:12:56,440 --> 00:13:04,389
to the max order - one order 20 pages

00:12:59,529 --> 00:13:06,640
and the main problem of the body ok to

00:13:04,389 --> 00:13:09,399
eat on the fragmentation it does

00:13:06,640 --> 00:13:11,760
time-consuming compaction and then try

00:13:09,399 --> 00:13:16,350
the

00:13:11,760 --> 00:13:19,450
try the location again or it just phase

00:13:16,350 --> 00:13:23,550
so this is not good news for continues

00:13:19,450 --> 00:13:27,639
memory requesting tests and the

00:13:23,550 --> 00:13:30,639
transparent use pages use body or cater

00:13:27,639 --> 00:13:33,130
to a low page choose pages for them it P

00:13:30,639 --> 00:13:36,430
refers back to regular pages if in first

00:13:33,130 --> 00:13:39,310
toolkit contains pages to guarantee the

00:13:36,430 --> 00:13:41,440
first latency but as a result it cannot

00:13:39,310 --> 00:13:47,010
be used to on highly fragmented memory

00:13:41,440 --> 00:13:49,389
system so we have measured the

00:13:47,010 --> 00:13:52,480
performance of the transparent fused

00:13:49,389 --> 00:13:57,940
pages on the high fragmented fragmented

00:13:52,480 --> 00:14:01,630
memory system the default means the HP

00:13:57,940 --> 00:14:05,139
disabled one and the HP means the HP

00:14:01,630 --> 00:14:08,290
enabled one and the th PDF means the HP

00:14:05,139 --> 00:14:13,449
enable to system on fragmented shift m

00:14:08,290 --> 00:14:17,010
and the disk graph shows the map the

00:14:13,449 --> 00:14:22,140
runtime of poorest of the tpc H

00:14:17,010 --> 00:14:25,540
benchmark PC H is a database benchmark

00:14:22,140 --> 00:14:29,199
simulating the Ola P workloads which is

00:14:25,540 --> 00:14:32,130
very internship for data so you can show

00:14:29,199 --> 00:14:34,620
that the transportation page you really

00:14:32,130 --> 00:14:37,779
increase the performance of the database

00:14:34,620 --> 00:14:40,029
in this graph because this is showing

00:14:37,779 --> 00:14:43,029
the normalized runtime normalized by the

00:14:40,029 --> 00:14:43,570
default case the shot the lower is

00:14:43,029 --> 00:14:45,339
better

00:14:43,570 --> 00:14:47,440
so the HP really improved the

00:14:45,339 --> 00:14:49,959
performance but if the system is

00:14:47,440 --> 00:14:53,140
fragmented the PHP dodging gives

00:14:49,959 --> 00:14:55,949
improvement and even it shows worse

00:14:53,140 --> 00:14:55,949
Huffman's

00:14:56,220 --> 00:15:01,540
so finally I will introduce the

00:14:59,920 --> 00:15:04,569
guaranteed continuous memory locator

00:15:01,540 --> 00:15:07,209
which is our project the guarantee the

00:15:04,569 --> 00:15:10,420
continuous memory allocator is a variant

00:15:07,209 --> 00:15:12,940
of DMA that guarantees first latency of

00:15:10,420 --> 00:15:15,670
a location and the success of allocation

00:15:12,940 --> 00:15:19,899
and it also keeps the memory utilization

00:15:15,670 --> 00:15:22,839
as well the idea behind the GMA is very

00:15:19,899 --> 00:15:24,019
simple it just follow the primary and

00:15:22,839 --> 00:15:26,420
secondary client ID

00:15:24,019 --> 00:15:29,059
over the CMA to keep the memory

00:15:26,420 --> 00:15:31,939
utilization high you know

00:15:29,059 --> 00:15:34,189
but the difference between the GME and

00:15:31,939 --> 00:15:37,790
the Shema is the direction of the

00:15:34,189 --> 00:15:41,329
secondary client we select the only nice

00:15:37,790 --> 00:15:43,790
ones at the secondary client for fast

00:15:41,329 --> 00:15:46,339
light ranch the secondary client should

00:15:43,790 --> 00:15:49,189
be able to locate the ridge of area as a

00:15:46,339 --> 00:15:52,069
soon as required without any tech such

00:15:49,189 --> 00:15:55,220
as moving content to out of memory

00:15:52,069 --> 00:15:57,799
region and for success of the allocation

00:15:55,220 --> 00:16:00,410
it should be out of color control if it

00:15:57,799 --> 00:16:02,869
is in control of the corner and contract

00:16:00,410 --> 00:16:04,910
because if it is in control of the

00:16:02,869 --> 00:16:08,119
corner L kernel thread can hold the page

00:16:04,910 --> 00:16:10,369
and finally for memory utilization most

00:16:08,119 --> 00:16:15,350
pages should be able to be the secondary

00:16:10,369 --> 00:16:17,239
client in short this is the key we use

00:16:15,350 --> 00:16:21,739
the front swap and the clean cache as

00:16:17,239 --> 00:16:25,779
the secondary client of the GMA the

00:16:21,739 --> 00:16:25,779
frontal swap and linkage each

00:16:26,920 --> 00:16:33,019
accommodates the pages swapped out and

00:16:29,869 --> 00:16:38,480
the clean pages evicted are from the

00:16:33,019 --> 00:16:40,639
page cache big yeah the pages for right

00:16:38,480 --> 00:16:42,980
through mode front swap is one type of

00:16:40,639 --> 00:16:45,170
our secondary client it could be

00:16:42,980 --> 00:16:47,629
discarded immediately because the

00:16:45,170 --> 00:16:50,839
contents of the page is written through

00:16:47,629 --> 00:16:53,269
the already written through to swap

00:16:50,839 --> 00:16:55,399
device and the context each already

00:16:53,269 --> 00:16:58,879
swapped out and most only most pages

00:16:55,399 --> 00:17:01,670
could be covered by this case and we

00:16:58,879 --> 00:17:03,709
recommend you just to use Jairam as what

00:17:01,670 --> 00:17:07,389
device to minimize the right through

00:17:03,709 --> 00:17:07,389
overhead to the swap device

00:17:07,899 --> 00:17:14,120
separate we used the pages for a clean

00:17:11,120 --> 00:17:16,429
cache as a secondary client of the GCM a

00:17:14,120 --> 00:17:18,679
the pages for clinkers

00:17:16,429 --> 00:17:20,929
could be discarded because the content

00:17:18,679 --> 00:17:23,870
storage is already up to date because

00:17:20,929 --> 00:17:26,120
the pages cream page and the context is

00:17:23,870 --> 00:17:28,520
already edited out too so it's out of

00:17:26,120 --> 00:17:32,440
control of the corner and a lot of the

00:17:28,520 --> 00:17:35,240
file back pages could be the case and we

00:17:32,440 --> 00:17:37,549
have started the project with this

00:17:35,240 --> 00:17:37,940
assumption only but we have found that

00:17:37,549 --> 00:17:41,720
there

00:17:37,940 --> 00:17:44,420
some additional good point first the

00:17:41,720 --> 00:17:47,870
pages we are using as a secondary client

00:17:44,420 --> 00:17:49,760
of the GCM a already expected to not be

00:17:47,870 --> 00:17:53,240
accessed again soon

00:17:49,760 --> 00:17:55,490
by the patriot claiming algorithm of the

00:17:53,240 --> 00:17:57,800
earliest color so it's causing the

00:17:55,490 --> 00:18:00,680
second declared pages would not affect

00:17:57,800 --> 00:18:05,060
the sheer pop ones much because if the

00:18:00,680 --> 00:18:12,920
pages are already judged as unnecessary

00:18:05,060 --> 00:18:15,500
and the secondary secondary the use the

00:18:12,920 --> 00:18:18,380
allocation for the secondary client

00:18:15,500 --> 00:18:21,260
occurs with only severe workload it

00:18:18,380 --> 00:18:24,080
means if there is no memory pressure

00:18:21,260 --> 00:18:28,040
there will be no allocation for the

00:18:24,080 --> 00:18:30,770
secondary client so in peaceful case in

00:18:28,040 --> 00:18:35,780
many case there will be no over it at

00:18:30,770 --> 00:18:37,970
all so the workflow of the GCM is very

00:18:35,780 --> 00:18:40,400
simple we reach of the memory area in

00:18:37,970 --> 00:18:42,680
only good time and if a page is swapped

00:18:40,400 --> 00:18:44,600
out or if it is from the page cache keep

00:18:42,680 --> 00:18:46,850
the content of the page in the reserved

00:18:44,600 --> 00:18:49,220
area and if the system requires the

00:18:46,850 --> 00:18:50,780
content of the page again then give it

00:18:49,220 --> 00:18:53,330
back from the region today

00:18:50,780 --> 00:18:55,550
reserved area and if a continuous memory

00:18:53,330 --> 00:18:58,010
allocation requires area being used by

00:18:55,550 --> 00:19:01,310
those pages we just discussed those

00:18:58,010 --> 00:19:04,610
pages and use the area for continuous

00:19:01,310 --> 00:19:07,220
memory allocation if the system requires

00:19:04,610 --> 00:19:10,370
the page that has been already discarded

00:19:07,220 --> 00:19:13,250
for the continuous location then we just

00:19:10,370 --> 00:19:15,470
says it is discarded and then the system

00:19:13,250 --> 00:19:19,400
can find the content of the page from

00:19:15,470 --> 00:19:21,890
the flat device of order storage because

00:19:19,400 --> 00:19:24,020
the content of the pages are already

00:19:21,890 --> 00:19:29,480
written through those web device or is

00:19:24,020 --> 00:19:31,850
already up to date in the storage so the

00:19:29,480 --> 00:19:32,180
abstraction of the determine is as shown

00:19:31,850 --> 00:19:37,090
below

00:19:32,180 --> 00:19:40,040
we the characteristic of the gme is one

00:19:37,090 --> 00:19:43,550
one thing i would like to note is that

00:19:40,040 --> 00:19:47,480
we are using the interface of the female

00:19:43,550 --> 00:19:50,240
users of the GCM i can just turn every

00:19:47,480 --> 00:19:51,530
code using the cma to GCM a by just

00:19:50,240 --> 00:19:54,110
turning on

00:19:51,530 --> 00:19:57,770
kind of configuration what they can also

00:19:54,110 --> 00:20:01,310
use the CMA and gc/ms actively on single

00:19:57,770 --> 00:20:05,870
system I mean the CMA and GCM a can

00:20:01,310 --> 00:20:09,200
coexist on a single shift him in means

00:20:05,870 --> 00:20:13,370
that we are not we are not trying to

00:20:09,200 --> 00:20:16,940
substitute the CMA we also know that the

00:20:13,370 --> 00:20:19,220
GME idea has many limitations and CMA

00:20:16,940 --> 00:20:22,640
have very strong point so we believe

00:20:19,220 --> 00:20:26,900
that the CMA nge MA can coexist and can

00:20:22,640 --> 00:20:29,840
help each other and secondly in gme

00:20:26,900 --> 00:20:32,750
architecture we use we have implemented

00:20:29,840 --> 00:20:36,500
a another social system called

00:20:32,750 --> 00:20:38,420
discardable memory it is a after an

00:20:36,500 --> 00:20:40,460
abstraction for a back-end of the

00:20:38,420 --> 00:20:42,200
frontal swab and clean cash because the

00:20:40,460 --> 00:20:44,600
frontal swab and green cache is just the

00:20:42,200 --> 00:20:47,540
interface and implementation of the

00:20:44,600 --> 00:20:50,240
back-end of them each charge of the user

00:20:47,540 --> 00:20:52,700
charge of the programmers we should have

00:20:50,240 --> 00:20:55,580
implemented the background for Croatia

00:20:52,700 --> 00:20:59,000
and the front up for Gigi MA and because

00:20:55,580 --> 00:21:02,300
it was very complex and it was a little

00:20:59,000 --> 00:21:06,380
hard to maintain

00:21:02,300 --> 00:21:09,290
I have developed another abstraction

00:21:06,380 --> 00:21:11,300
layer for them it works as a less chance

00:21:09,290 --> 00:21:13,970
cache for a second the client pages

00:21:11,300 --> 00:21:17,860
using geometries of ideas and it means

00:21:13,970 --> 00:21:21,620
the index for pages using hash table and

00:21:17,860 --> 00:21:25,640
the arbitrary based bucket in the hash

00:21:21,620 --> 00:21:28,760
table and it which the pages in least

00:21:25,640 --> 00:21:33,500
recently used of Kim if the reserved

00:21:28,760 --> 00:21:38,420
area is 4 so we have implemented with

00:21:33,500 --> 00:21:43,360
Rishi MA on Linux V 3.18 and then we

00:21:38,420 --> 00:21:46,730
implemented it on the 4.10 and 4.17 the

00:21:43,360 --> 00:21:48,950
entire implementation used just

00:21:46,730 --> 00:21:51,800
thousand one thousand and five hundred

00:21:48,950 --> 00:21:54,230
lines of code and it has ported and

00:21:51,800 --> 00:21:57,140
evaluated on Raspberry Pi tool for

00:21:54,230 --> 00:22:00,790
evaluation on lower inertia terms and a

00:21:57,140 --> 00:22:04,650
high-end server for iteration of the

00:22:00,790 --> 00:22:06,750
Huffman's for conscious memory location

00:22:04,650 --> 00:22:11,660
and the code the soft code is available

00:22:06,750 --> 00:22:15,030
on the gplv3 license at github and the

00:22:11,660 --> 00:22:22,140
second version RFC has been submitted to

00:22:15,030 --> 00:22:24,800
lk mmm now I would like to introduce the

00:22:22,140 --> 00:22:29,160
evaluation result of the GCM a for a

00:22:24,800 --> 00:22:34,830
low-end device for experimental

00:22:29,160 --> 00:22:37,700
evaluation we have set to some device we

00:22:34,830 --> 00:22:40,980
have used the raspberry pi 2 which

00:22:37,700 --> 00:22:43,440
utilizing the am cortex a7 and one

00:22:40,980 --> 00:22:46,830
kilobyte RP ddr2 sdram and correct and

00:22:43,440 --> 00:22:49,470
NDF 216 you invite micro SD card and we

00:22:46,830 --> 00:22:53,310
have used three configurations to

00:22:49,470 --> 00:22:55,710
compare the baseline and the CM a base

00:22:53,310 --> 00:22:58,560
system and the judiciary system we have

00:22:55,710 --> 00:23:03,240
used Raspberry Pi customized you know

00:22:58,560 --> 00:23:06,560
Connor was on 3.18 point 11 and we have

00:23:03,240 --> 00:23:11,100
configured 100 min wide swap device and

00:23:06,560 --> 00:23:14,850
the 256 bytes

00:23:11,100 --> 00:23:18,440
reserved area for baseline and 256 me

00:23:14,850 --> 00:23:22,710
I'd share my area for CM a case and the

00:23:18,440 --> 00:23:27,450
256 megabytes GG me a area and 100 min

00:23:22,710 --> 00:23:29,070
watch Jairam based swap for GCM a and we

00:23:27,450 --> 00:23:32,960
have used the three workloads for

00:23:29,070 --> 00:23:38,060
continuous memory location we have just

00:23:32,960 --> 00:23:41,040
programmed a simple current driver which

00:23:38,060 --> 00:23:44,190
continuously allocate contiguous memory

00:23:41,040 --> 00:23:47,900
and we have used revenge to simulate

00:23:44,190 --> 00:23:52,230
realistic filesystem workload which can

00:23:47,900 --> 00:23:54,780
include the memory pressure and finally

00:23:52,230 --> 00:23:56,940
we you we have used the camera shop

00:23:54,780 --> 00:23:59,640
which is repeatedly taking the picture

00:23:56,940 --> 00:24:02,900
using the Raspberry Pi 2 camera module

00:23:59,640 --> 00:24:09,300
with 10-second interval between each

00:24:02,900 --> 00:24:11,880
taking shot first we have measured the

00:24:09,300 --> 00:24:14,880
basic continuous memory allocation later

00:24:11,880 --> 00:24:18,450
on without the background workload in

00:24:14,880 --> 00:24:21,870
this case we have just

00:24:18,450 --> 00:24:25,260
measure the latency of the country of

00:24:21,870 --> 00:24:29,730
memory allocation for various number

00:24:25,260 --> 00:24:34,800
page number which number of contiguous

00:24:29,730 --> 00:24:37,650
pages and the result is shown below the

00:24:34,800 --> 00:24:41,390
black line shows the latency of the

00:24:37,650 --> 00:24:45,930
Jemaine while the gray line shows the

00:24:41,390 --> 00:24:51,510
latency of the CMA the GMA shows 14 that

00:24:45,930 --> 00:24:56,130
89 times 229 times faster latency

00:24:51,510 --> 00:25:00,390
compared to GMA and the EMA has even

00:24:56,130 --> 00:25:02,160
failed once for thirty two thousand and

00:25:00,390 --> 00:25:04,110
seven hundred sixty eight countries

00:25:02,160 --> 00:25:11,490
projects allocation even though there

00:25:04,110 --> 00:25:15,330
was no background tasks and we have

00:25:11,490 --> 00:25:18,420
measured the latency for only thousand

00:25:15,330 --> 00:25:21,210
and twenty four continuous pages without

00:25:18,420 --> 00:25:24,900
background workload it still shows that

00:25:21,210 --> 00:25:28,890
GTA latency is much surer than that of

00:25:24,900 --> 00:25:31,680
the EMA and it also shows that the

00:25:28,890 --> 00:25:39,780
latency of the CMA is much prettier than

00:25:31,680 --> 00:25:42,510
the debt of the EMA and we have also

00:25:39,780 --> 00:25:44,730
measured the latency for taking photo of

00:25:42,510 --> 00:25:47,460
the camera app of the Raspberry Pi the

00:25:44,730 --> 00:25:49,290
camera app is the official application

00:25:47,460 --> 00:25:52,200
the built-in application of the

00:25:49,290 --> 00:25:55,020
Raspberry Pi 2 and we have used the

00:25:52,200 --> 00:25:57,060
background task block branch to simulate

00:25:55,020 --> 00:26:02,400
the memory pressure of the realistic

00:25:57,060 --> 00:26:07,290
workloads and indeed it in this result

00:26:02,400 --> 00:26:09,390
we have shown that GcMAF latency the

00:26:07,290 --> 00:26:13,320
latency Edgefest as the reserved area

00:26:09,390 --> 00:26:15,990
technique configurated system while the

00:26:13,320 --> 00:26:20,810
GC a ratio of more than five second

00:26:15,990 --> 00:26:20,810
latency for taking only a picture

00:26:21,620 --> 00:26:33,039
and finally because the Ducharme is

00:26:27,070 --> 00:26:35,690
utilizing the second-story clients as a

00:26:33,039 --> 00:26:40,360
frontal swab and clean cash it should

00:26:35,690 --> 00:26:45,140
have more overhead to produce the

00:26:40,360 --> 00:26:49,779
reclaiming what reclaiming tasks so the

00:26:45,140 --> 00:26:54,230
dish ma could have the promise of the

00:26:49,779 --> 00:26:56,419
system so we have evaluated the puffs

00:26:54,230 --> 00:27:01,480
months of the hoola branch on cma based

00:26:56,419 --> 00:27:04,820
and GMA based system surprisingly the

00:27:01,480 --> 00:27:08,029
GMA promise jessimae based systems

00:27:04,820 --> 00:27:13,010
Huffman's was even better than death of

00:27:08,029 --> 00:27:17,000
the cma phase shift him and this tool

00:27:13,010 --> 00:27:23,029
bar graph shows the cost of the block

00:27:17,000 --> 00:27:26,919
bench when they're over the background

00:27:23,029 --> 00:27:31,340
were close pitches continuously trying

00:27:26,919 --> 00:27:40,039
to taking a photo and we can show that

00:27:31,340 --> 00:27:44,720
the taking photo can clearly videos top

00:27:40,039 --> 00:27:48,409
month of the system for CMA however in

00:27:44,720 --> 00:27:51,649
case of GG m8 the background workload of

00:27:48,409 --> 00:27:54,980
the taking photo didn't reduce the

00:27:51,649 --> 00:28:02,659
system performance so much though the

00:27:54,980 --> 00:28:06,260
difference is just not soapy and finally

00:28:02,659 --> 00:28:13,909
I would this is the evaluation result of

00:28:06,260 --> 00:28:17,679
the GMA 4 th p2 as I have said up before

00:28:13,909 --> 00:28:21,980
the truth pages are also these

00:28:17,679 --> 00:28:24,890
continuous memory allocation and the GMA

00:28:21,980 --> 00:28:26,870
can have to transparent use page or

00:28:24,890 --> 00:28:32,299
location so we have implemented

00:28:26,870 --> 00:28:35,960
transparent each page page using the GMA

00:28:32,299 --> 00:28:40,490
so for this is printer setup we have

00:28:35,960 --> 00:28:46,430
used in Taiji on e7 8 8 7 0 v3 CPU and

00:28:40,490 --> 00:28:50,420
the system has 2024 air to carry entries

00:28:46,430 --> 00:28:53,420
and it utilizes six hundred gigabyte

00:28:50,420 --> 00:28:56,630
ddr4 memory and 500 gigabyte interesti

00:28:53,420 --> 00:29:00,880
and the baseline kernel is Linux v4

00:28:56,630 --> 00:29:03,590
point 10 and we have five full

00:29:00,880 --> 00:29:06,500
configurations first don ôt HP means

00:29:03,590 --> 00:29:09,410
that eh be disabled to shift him and HP

00:29:06,500 --> 00:29:12,260
that PD means the HP system using the

00:29:09,410 --> 00:29:16,370
body alligator a geospatial location so

00:29:12,260 --> 00:29:20,030
the HP de PD can be said as a baseline

00:29:16,370 --> 00:29:23,780
system and the PHP ma means the GCM a

00:29:20,030 --> 00:29:27,500
based HP enabled in this configuration

00:29:23,780 --> 00:29:31,040
the HP system has modified to use GCM a

00:29:27,500 --> 00:29:36,440
to allocate storage page and the HP that

00:29:31,040 --> 00:29:41,000
PC this is one that I have made to show

00:29:36,440 --> 00:29:44,540
the best case because even though I have

00:29:41,000 --> 00:29:47,120
said that GCM a GCM a is faster than si

00:29:44,540 --> 00:29:48,920
ma it is still slower than the body

00:29:47,120 --> 00:29:52,490
alligator because body alligator is

00:29:48,920 --> 00:29:58,910
highly optimized and our GC ma is using

00:29:52,490 --> 00:30:02,690
just in map based page management at the

00:29:58,910 --> 00:30:06,590
CMA does so basic latency for location

00:30:02,690 --> 00:30:09,140
of the GGC ma was slower than that of

00:30:06,590 --> 00:30:12,170
the body locator so we have configured

00:30:09,140 --> 00:30:16,190
on the system that uses the body or

00:30:12,170 --> 00:30:19,160
cater as a huge page locator for first

00:30:16,190 --> 00:30:22,190
time and if the body or locator face to

00:30:19,160 --> 00:30:24,410
allocate the continuous memory area for

00:30:22,190 --> 00:30:27,740
huge page because of the fragmentation

00:30:24,410 --> 00:30:31,120
then we can fall back to the GMA

00:30:27,740 --> 00:30:36,610
before for back to the regular pages and

00:30:31,120 --> 00:30:39,950
this these four configurations have the

00:30:36,610 --> 00:30:44,150
have another counterparts that have that

00:30:39,950 --> 00:30:47,210
F suffix it means that F suffix means

00:30:44,150 --> 00:30:49,690
the same systems on the fragmented

00:30:47,210 --> 00:30:52,659
memory and we have used the two

00:30:49,690 --> 00:30:56,259
of approach we have used a spec CPU mm

00:30:52,659 --> 00:30:58,690
shift pitch and because there are so

00:30:56,259 --> 00:31:01,899
many workload we have chosen only to

00:30:58,690 --> 00:31:12,639
work load which is widely known to be

00:31:01,899 --> 00:31:15,610
known to memory in memory using huge

00:31:12,639 --> 00:31:17,500
memory and we have also used the TPC a

00:31:15,610 --> 00:31:20,500
chief Turing test which is simulating

00:31:17,500 --> 00:31:23,379
the real world where ap workloads so the

00:31:20,500 --> 00:31:27,850
first performance of spec CPU 2006 was

00:31:23,379 --> 00:31:32,529
at below the left one is the numerator

00:31:27,850 --> 00:31:35,039
run time of the 429 that mcf and the

00:31:32,529 --> 00:31:39,100
right side shows the performance of the

00:31:35,039 --> 00:31:42,100
471 that on the PP the runtime has

00:31:39,100 --> 00:31:44,529
normalized to the note e HP case and as

00:31:42,100 --> 00:31:49,320
we can show without the fragmentation

00:31:44,529 --> 00:31:53,559
the every HP variant just the clear

00:31:49,320 --> 00:31:58,990
tough month improvement but with

00:31:53,559 --> 00:32:04,210
fragmentation the baseline system tough

00:31:58,990 --> 00:32:08,559
months getting worse and HP original HP

00:32:04,210 --> 00:32:10,809
basis system also shows worst tough

00:32:08,559 --> 00:32:14,559
month while the GCM a base to catch me

00:32:10,809 --> 00:32:19,830
shift em shows still enhanced with tough

00:32:14,559 --> 00:32:22,690
month as a result the GTA 4 th PC of 2.5

00:32:19,830 --> 00:32:24,789
656 times higher per month compared to

00:32:22,690 --> 00:32:30,220
the ordinary HP on the fermentation for

00:32:24,789 --> 00:32:32,830
429 MGF however the impact of the jewish

00:32:30,220 --> 00:32:35,889
aiming for PHP is dependent to the

00:32:32,830 --> 00:32:43,210
workload as we can show on the right

00:32:35,889 --> 00:32:45,519
side and we have also a verities the

00:32:43,210 --> 00:32:48,940
performance of tcch tcch

00:32:45,519 --> 00:32:51,700
is a simulation of the real world where

00:32:48,940 --> 00:32:54,070
ap workloads and we have used for tests

00:32:51,700 --> 00:32:58,539
the where IP workload is contracted with

00:32:54,070 --> 00:33:03,030
trying to poorest and in the power test

00:32:58,539 --> 00:33:05,330
we just run the chorus sequentially and

00:33:03,030 --> 00:33:10,050
measured later on she fold each

00:33:05,330 --> 00:33:12,960
colleagues and the runtime is normalized

00:33:10,050 --> 00:33:16,170
by the HP that BC that F which means

00:33:12,960 --> 00:33:19,530
this configuration is the HP system

00:33:16,170 --> 00:33:22,910
using GCM a age of first time for web

00:33:19,530 --> 00:33:27,080
for body a locator and it is on the

00:33:22,910 --> 00:33:31,790
fragmented memory so we can show that

00:33:27,080 --> 00:33:36,680
this y axis as the speed-up of the our

00:33:31,790 --> 00:33:40,220
GM x HP shift term on fragmentation so

00:33:36,680 --> 00:33:43,040
actually we can show the core except

00:33:40,220 --> 00:33:44,190
almost every Cory's have improved

00:33:43,040 --> 00:33:53,310
pokemons

00:33:44,190 --> 00:33:55,560
by using the GMA 40 HP and in best case

00:33:53,310 --> 00:33:59,310
to poorest here which shows more than

00:33:55,560 --> 00:34:04,340
two times speed up and for queries have

00:33:59,310 --> 00:34:11,340
shown more than 1.5 times pedo

00:34:04,340 --> 00:34:15,780
and finally the plan for GCM a we are

00:34:11,340 --> 00:34:18,899
trying to we aim to merge the GG m8 to

00:34:15,780 --> 00:34:24,659
mainline Linux and we would like to not

00:34:18,899 --> 00:34:27,240
just most GMA as it is now but you'd

00:34:24,659 --> 00:34:29,970
like to unifying the solutions on the

00:34:27,240 --> 00:34:32,040
CMA interface so as I have said before

00:34:29,970 --> 00:34:35,850
there are so many instructions and

00:34:32,040 --> 00:34:39,659
though almost every eject instructions

00:34:35,850 --> 00:34:44,250
have limitations they can be used very

00:34:39,659 --> 00:34:46,380
well for some specific case so and

00:34:44,250 --> 00:34:50,310
because there are many solutions and

00:34:46,380 --> 00:34:52,380
faced for consumer occasions the so many

00:34:50,310 --> 00:34:54,240
interface can confuse new coming

00:34:52,380 --> 00:34:56,280
programmers and we don't want to

00:34:54,240 --> 00:34:58,800
increase the confusion the Commission

00:34:56,280 --> 00:35:01,440
with our GCMs so just generally

00:34:58,800 --> 00:35:05,190
developed to coexist with GMA

00:35:01,440 --> 00:35:08,700
residents just substitute it and it is

00:35:05,190 --> 00:35:11,120
already using the CMA interface so you

00:35:08,700 --> 00:35:15,220
can really call you get a speed CMA and

00:35:11,120 --> 00:35:19,310
so maybe we are planning to

00:35:15,220 --> 00:35:21,770
design the interface to be could select

00:35:19,310 --> 00:35:25,280
the second a client for each DMA region

00:35:21,770 --> 00:35:28,370
for example nan and migrate by

00:35:25,280 --> 00:35:31,430
collectible and discardable for each for

00:35:28,370 --> 00:35:33,740
reservation and CMA and our GC MA and

00:35:31,430 --> 00:35:36,860
currently we are developing a patch set

00:35:33,740 --> 00:35:39,140
for the idea and it aims to be much to

00:35:36,860 --> 00:35:41,420
the main line so the patch that will

00:35:39,140 --> 00:35:46,550
include updated evaluation result as

00:35:41,420 --> 00:35:48,830
well so the conclusion the continuous

00:35:46,550 --> 00:35:51,080
medication needs improvement the hydro

00:35:48,830 --> 00:35:53,570
based solutions expansion follow and

00:35:51,080 --> 00:35:56,090
devised and impose overhead and cannot

00:35:53,570 --> 00:35:59,030
provide a real continuous memory and CMA

00:35:56,090 --> 00:36:02,090
is a leader flow invent case and body or

00:35:59,030 --> 00:36:03,860
Couture is very restricted so the GMA

00:36:02,090 --> 00:36:05,720
guarantee is fast latency and the

00:36:03,860 --> 00:36:08,060
success of allocation and reasonable

00:36:05,720 --> 00:36:11,210
memory utilization it achieves the goals

00:36:08,060 --> 00:36:13,460
by utilizing nice secondary clients the

00:36:11,210 --> 00:36:16,730
pages for front swap and the clean cash

00:36:13,460 --> 00:36:18,980
allocation latency of the GMA is as fast

00:36:16,730 --> 00:36:21,980
as the reserved area technique and

00:36:18,980 --> 00:36:25,490
regime it can be used for THP allocation

00:36:21,980 --> 00:36:28,190
for Beth and it showed the hundreds of

00:36:25,490 --> 00:36:30,830
times and ten times your latency for

00:36:28,190 --> 00:36:33,380
continuous memory allocation and taking

00:36:30,830 --> 00:36:37,610
a photo from her to CMA based the

00:36:33,380 --> 00:36:39,920
system's respectively and more than 550

00:36:37,610 --> 00:36:40,610
percent and 100 percent of most

00:36:39,920 --> 00:36:43,640
improvement

00:36:40,610 --> 00:36:45,980
achieved for seven over twenty four and

00:36:43,640 --> 00:36:47,990
three over trifle realistic workloads

00:36:45,980 --> 00:36:50,090
and we are planning to release the

00:36:47,990 --> 00:36:52,220
official version and operative updated

00:36:50,090 --> 00:36:54,880
evaluation results in near future to the

00:36:52,220 --> 00:36:59,620
live color comic ok

00:36:54,880 --> 00:36:59,620
dance is there any question

00:37:00,620 --> 00:37:07,639
[Applause]

00:37:30,920 --> 00:37:35,480
okay thanks for your talk as someone

00:37:33,950 --> 00:37:39,170
who's worked with CMA before this is

00:37:35,480 --> 00:37:41,059
definitely a good work a few years ago a

00:37:39,170 --> 00:37:44,390
colleague could tread something similar

00:37:41,059 --> 00:37:46,220
as involving clean cash and her to some

00:37:44,390 --> 00:37:48,799
degradation and file system benchmarks

00:37:46,220 --> 00:37:50,900
admittedly that was many kernel versions

00:37:48,799 --> 00:37:52,430
go on on older kernels I'm curious if he

00:37:50,900 --> 00:37:53,930
ran any file system benchmarks or

00:37:52,430 --> 00:37:58,789
storage benchmarks to see if there were

00:37:53,930 --> 00:38:00,910
any aggregation in throughput there we

00:37:58,789 --> 00:38:03,980
have your tornado blueprint which is

00:38:00,910 --> 00:38:07,849
known as the phase shift and benchmark

00:38:03,980 --> 00:38:12,940
and the result was as I shown it was not

00:38:07,849 --> 00:38:17,119
fair not bad but I think we need some

00:38:12,940 --> 00:38:20,990
severe case evaluation - yeah

00:38:17,119 --> 00:38:24,200
though we have seen the good result but

00:38:20,990 --> 00:38:28,940
I think there would be many concaved and

00:38:24,200 --> 00:38:32,660
if we use the more hardcore workloads

00:38:28,940 --> 00:38:36,200
maybe we can show the limitation of the

00:38:32,660 --> 00:38:39,230
GCRA and that's why we are not trying to

00:38:36,200 --> 00:38:42,019
substitute the CMA and rather than we

00:38:39,230 --> 00:38:44,359
are trying to use coexist with the CMA

00:38:42,019 --> 00:38:48,500
because in such a case the CMA would

00:38:44,359 --> 00:38:53,589
work very well in such a case by the DJ

00:38:48,500 --> 00:38:53,589
and idea I think so yeah

00:38:59,239 --> 00:39:08,130
walking said memory so GMA always should

00:39:04,109 --> 00:39:11,400
restore any dreaming io5 back page so

00:39:08,130 --> 00:39:15,449
that venturi alludes the performance but

00:39:11,400 --> 00:39:18,719
recently mm page walking separate sheets

00:39:15,449 --> 00:39:21,930
of light by Johannes so one of the idea

00:39:18,719 --> 00:39:25,920
is the pillow out that not walking say

00:39:21,930 --> 00:39:29,729
page to store clean web pages so it

00:39:25,920 --> 00:39:33,979
really improve a little bit it could be

00:39:29,729 --> 00:39:33,979
one of the idea to improve by benchmark

00:39:38,059 --> 00:39:42,900
first I'm very sympathetic on the

00:39:40,890 --> 00:39:46,160
difficulties of merchants PhD code in

00:39:42,900 --> 00:39:46,160
Ireland I wish you luck with that

00:39:46,880 --> 00:39:52,380
Laura's point on the use of i/o

00:39:49,199 --> 00:39:56,219
benchmarks I recently had reason to look

00:39:52,380 --> 00:39:57,689
at fragmentation again and reduce both

00:39:56,219 --> 00:39:59,880
the levels of fragmentation and the

00:39:57,689 --> 00:40:01,589
latency and as part of that or just

00:39:59,880 --> 00:40:04,529
leave of caution and the use of i/o

00:40:01,589 --> 00:40:06,660
benchmarks to evaluate the patch set I

00:40:04,529 --> 00:40:08,939
think it's very easy for you to

00:40:06,660 --> 00:40:12,269
artificially get stuck into a hole that

00:40:08,939 --> 00:40:15,059
is that is that you don't belong in and

00:40:12,269 --> 00:40:18,359
it's this if you use any reservation

00:40:15,059 --> 00:40:19,859
based scheme like ECM ACMA are what I am

00:40:18,359 --> 00:40:23,429
using which is this case is boosted

00:40:19,859 --> 00:40:26,640
water max you hit into a threshold where

00:40:23,429 --> 00:40:28,979
IO benchmarks appear to go down because

00:40:26,640 --> 00:40:31,229
they're actually bound by page cache

00:40:28,979 --> 00:40:33,589
residency and it's a trade-off

00:40:31,229 --> 00:40:35,789
inherently between your through push and

00:40:33,589 --> 00:40:37,679
your the guarantee is that you're trying

00:40:35,789 --> 00:40:40,650
to give so when you are constructing

00:40:37,679 --> 00:40:42,779
your i/o benchmarks pay careful

00:40:40,650 --> 00:40:45,390
attention to see if they're tuned to the

00:40:42,779 --> 00:40:47,429
overall size of memory if there are any

00:40:45,390 --> 00:40:49,289
users of reservation it's going to cause

00:40:47,429 --> 00:40:51,329
a degradation and the i/o performance

00:40:49,289 --> 00:40:53,489
and I would seem to halt of the entire

00:40:51,329 --> 00:40:56,339
pack set and this needs to be balanced

00:40:53,489 --> 00:40:58,289
wish yes this benchmark is hit but

00:40:56,339 --> 00:41:00,119
that's because functionally it has less

00:40:58,289 --> 00:41:01,769
memory to work with so why did the

00:41:00,119 --> 00:41:03,779
benchmark should be tuned to the amount

00:41:01,769 --> 00:41:05,969
of unreserved memory hours should be

00:41:03,779 --> 00:41:07,799
capped in some level just pay a certain

00:41:05,969 --> 00:41:09,479
amount of care there when someone says

00:41:07,799 --> 00:41:11,400
have you tried a filesystem benchmark

00:41:09,479 --> 00:41:15,259
but it's very easy to get

00:41:11,400 --> 00:41:18,150
into a hole when you have reservations

00:41:15,259 --> 00:41:20,809
yeah thank you very much for the

00:41:18,150 --> 00:41:20,809
recommendation

00:41:22,140 --> 00:41:25,190
any other questions

00:41:27,900 --> 00:41:37,109
I so I checked the old submissions from

00:41:33,710 --> 00:41:41,760
three years ago and I noticed that the

00:41:37,109 --> 00:41:46,570
largest complaint was that the new code

00:41:41,760 --> 00:41:47,990
was quite large introducing lots of new

00:41:46,570 --> 00:41:51,869
[Music]

00:41:47,990 --> 00:41:55,289
infrastructure and it was viewed as if

00:41:51,869 --> 00:41:59,240
CMA could be just modified it it would

00:41:55,289 --> 00:42:03,089
make much better code so in your current

00:41:59,240 --> 00:42:06,799
attempts do you think the new submission

00:42:03,089 --> 00:42:12,119
will will be with this review

00:42:06,799 --> 00:42:17,160
incorporated or did you manage to shrink

00:42:12,119 --> 00:42:21,510
the code so far so I should I do and I

00:42:17,160 --> 00:42:25,920
and I also expect that if the code is

00:42:21,510 --> 00:42:28,650
merges and then I should make the code

00:42:25,920 --> 00:42:33,529
and I believe that some cooperation or

00:42:28,650 --> 00:42:33,529
the hierarchy to stop at the measurement

00:42:36,710 --> 00:42:44,430
not see any mm core stuff is

00:42:39,960 --> 00:42:48,589
self-contained subsystem so I I don't

00:42:44,430 --> 00:42:53,609
think he is very complete complex stuff

00:42:48,589 --> 00:42:57,089
it's very easy to multi I guess like Y

00:42:53,609 --> 00:42:59,700
systems tend to run stuff yes it is

00:42:57,089 --> 00:43:03,319
really very simple to code is very

00:42:59,700 --> 00:43:06,119
simple and only the practitioner is

00:43:03,319 --> 00:43:09,650
modifying is the interface of the CMA

00:43:06,119 --> 00:43:12,450
that's what you're good to see the work

00:43:09,650 --> 00:43:14,760
one of your graphs indicated TC me

00:43:12,450 --> 00:43:18,150
performing better than the you know

00:43:14,760 --> 00:43:21,880
reserved scheme so just curious you know

00:43:18,150 --> 00:43:28,329
what what was the reason for that

00:43:21,880 --> 00:43:37,119
I have thing about this right I know I

00:43:28,329 --> 00:43:40,269
think this one yeah there was the case

00:43:37,119 --> 00:43:45,489
that GMA based evaluation was better

00:43:40,269 --> 00:43:48,009
than even the baseline I don't know how

00:43:45,489 --> 00:43:50,589
I don't know why but I think that it'll

00:43:48,009 --> 00:43:58,329
be the terrorists I think there would be

00:43:50,589 --> 00:44:00,430
some error of the measurement maybe um

00:43:58,329 --> 00:44:02,199
so it kind of maybe more of a naive

00:44:00,430 --> 00:44:04,390
question but um I've done some work with

00:44:02,199 --> 00:44:06,339
CMA where I was seeing allocation

00:44:04,390 --> 00:44:07,869
failures where they're still apparently

00:44:06,339 --> 00:44:09,699
free memory so it seemed to be a

00:44:07,869 --> 00:44:11,019
fragmentation issue did you in your work

00:44:09,699 --> 00:44:13,719
do you have any tools or things that you

00:44:11,019 --> 00:44:15,519
are using to do the analysis on CMA for

00:44:13,719 --> 00:44:20,140
why these failures were occurring and

00:44:15,519 --> 00:44:21,579
anything that was useful there oh did

00:44:20,140 --> 00:44:23,499
you have any tools or anything you were

00:44:21,579 --> 00:44:25,779
using while you were doing analysis on

00:44:23,499 --> 00:44:28,059
CMA for you know why things were failing

00:44:25,779 --> 00:44:30,239
here anything that was helpful to see

00:44:28,059 --> 00:44:35,229
kind of the levels of fragmentation or

00:44:30,239 --> 00:44:36,579
anything like that uh no well

00:44:35,229 --> 00:44:40,690
fortunately I think we have I think I

00:44:36,579 --> 00:44:43,380
feel no question this is torture this is

00:44:40,690 --> 00:44:46,329
not a question boss respects to John's

00:44:43,380 --> 00:44:47,920
question while it on a personal

00:44:46,329 --> 00:44:50,469
experience and seemed a the limiting

00:44:47,920 --> 00:44:53,199
factors on latency of allocation of THP

00:44:50,469 --> 00:44:54,699
came down into the rare case because the

00:44:53,199 --> 00:44:56,859
pages penned for a long period of time

00:44:54,699 --> 00:44:58,660
but fundamentally it was at the time to

00:44:56,859 --> 00:45:00,640
start hitting into latency issues during

00:44:58,660 --> 00:45:02,680
allocation the BIM system is already low

00:45:00,640 --> 00:45:04,509
on memory in which case compaction is

00:45:02,680 --> 00:45:07,059
very likely to give up early underground

00:45:04,509 --> 00:45:08,829
so doesn't happen it happened our that

00:45:07,059 --> 00:45:11,140
is instant to a reclaim cycler where it

00:45:08,829 --> 00:45:12,999
takes multiple attempts to allocate on

00:45:11,140 --> 00:45:14,829
that basis now again I've posted a

00:45:12,999 --> 00:45:16,690
series that mitigates dis so much but

00:45:14,829 --> 00:45:18,489
it's the entire need of review and

00:45:16,690 --> 00:45:20,920
further evaluation but part of that was

00:45:18,489 --> 00:45:24,490
that it did reduce allocation latency

00:45:20,920 --> 00:45:26,830
down by seventy to eighty percent

00:45:24,490 --> 00:45:29,470
most were playing small tricks so I

00:45:26,830 --> 00:45:32,230
think it's unfair to evaluate kisi MA

00:45:29,470 --> 00:45:33,910
and reasons why si ma had issues before

00:45:32,230 --> 00:45:36,250
or even the standard bully allocator

00:45:33,910 --> 00:45:40,390
because its use of the G thing makes it

00:45:36,250 --> 00:45:42,580
fundamentally different so there are

00:45:40,390 --> 00:45:44,770
reasons why cma failed in the past and

00:45:42,580 --> 00:45:47,470
those reasons why the body allocator

00:45:44,770 --> 00:45:49,660
fails but there there's grief problems

00:45:47,470 --> 00:45:56,590
that would be fixed orthogonal e to the

00:45:49,660 --> 00:46:00,190
G CMA work alright can I say just one

00:45:56,590 --> 00:46:02,140
more sentence and I have forward to say

00:46:00,190 --> 00:46:08,700
that the project has a started with

00:46:02,140 --> 00:46:10,940
Minton Kim who have helped my answer yes

00:46:08,700 --> 00:46:16,340
right thank you very much

00:46:10,940 --> 00:46:16,340

YouTube URL: https://www.youtube.com/watch?v=ARrelFfdVkw


