Title: LPC2018 - Elivepatch: Flexible Distributed Linux Kernel Live Patching
Publication date: 2018-12-04
Playlist: LPC2018 - Kernel Summit Track
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/258/
speaker:  Alice Ferrazzi
Captions: 
	00:00:05,790 --> 00:00:12,950
hello everyone thank you for coming I'm

00:00:08,010 --> 00:00:12,950
AJ Ferguson and I will talk

00:00:17,779 --> 00:00:27,020
I the current gen token a project leader

00:00:23,860 --> 00:00:29,599
I'm part of Jim to connect security I'm

00:00:27,020 --> 00:00:39,710
part of a gentle Foundation board member

00:00:29,599 --> 00:00:41,570
and these this year I did the google

00:00:39,710 --> 00:00:46,360
Summer of Code administrator for Gen 2

00:00:41,570 --> 00:00:50,030
and I helped add mentoring Russ project

00:00:46,360 --> 00:01:03,200
for Gen 2 and I'm also working in Japan

00:00:50,030 --> 00:01:09,159
for cyber trust in Japan so I will give

00:01:03,200 --> 00:01:09,159
a brief introduction about a life patch

00:01:09,820 --> 00:01:17,120
the slide are meanie but I will try to

00:01:12,770 --> 00:01:21,590
be really short and I will explain a bit

00:01:17,120 --> 00:01:23,600
about the what I think are the current

00:01:21,590 --> 00:01:27,530
life at service but it is around today

00:01:23,600 --> 00:01:33,670
and I will give motivational water left

00:01:27,530 --> 00:01:37,460
patch and display in a left patch so

00:01:33,670 --> 00:01:46,090
this project started as go Summer of

00:01:37,460 --> 00:01:50,479
Code 2017 provision to organization and

00:01:46,090 --> 00:01:53,990
if someone doesn't know what is go

00:01:50,479 --> 00:02:05,180
Summer of Code this really good project

00:01:53,990 --> 00:02:07,729
organized by Google so life patch is

00:02:05,180 --> 00:02:10,789
what is life but life touches a system

00:02:07,729 --> 00:02:20,750
for money favorite modified vikarna

00:02:10,789 --> 00:02:25,670
we thought we need to reboot and because

00:02:20,750 --> 00:02:29,570
the downtime is explained see for

00:02:25,670 --> 00:02:34,730
example supercomputer container and also

00:02:29,570 --> 00:02:46,190
for patching security vulnerabilities in

00:02:34,730 --> 00:02:51,140
less time is username mini system for

00:02:46,190 --> 00:03:02,330
example in embedded or in supercomputer

00:02:51,140 --> 00:03:06,980
or awesome-mobile so I will explain

00:03:02,330 --> 00:03:09,860
mainly just about kpop craft and life

00:03:06,980 --> 00:03:13,780
poverty living system via telepathy is

00:03:09,860 --> 00:03:19,930
using but there is also many other

00:03:13,780 --> 00:03:27,440
system rate for doing life path so

00:03:19,930 --> 00:03:29,269
gravity is made by Souza and is like

00:03:27,440 --> 00:03:35,750
first system that is using frustrating

00:03:29,269 --> 00:03:39,980
Lacey's task function robot switching

00:03:35,750 --> 00:03:42,709
and ready is the K patch that is using a

00:03:39,980 --> 00:03:48,200
stop machine for routing to a new

00:03:42,709 --> 00:03:52,269
function so it is adding the F trace and

00:03:48,200 --> 00:03:56,600
stop we're using stop machine I'm

00:03:52,269 --> 00:04:00,830
changing to a new function and life

00:03:56,600 --> 00:04:05,480
patch is a very upstream version of

00:04:00,830 --> 00:04:10,900
Galactus system and is a a breed of K

00:04:05,480 --> 00:04:15,080
graft and keep watch and is awaiting the

00:04:10,900 --> 00:04:21,109
per task consistency and syscall variant

00:04:15,080 --> 00:04:25,760
switching and convenient with the K

00:04:21,109 --> 00:04:28,100
patch stack trace switching so k patch

00:04:25,760 --> 00:04:32,470
bill that is what helped achieve using

00:04:28,100 --> 00:04:32,470
can work with K patch and life watch

00:04:32,980 --> 00:04:41,990
and invent life watch is just a module

00:04:36,670 --> 00:04:48,680
but one of the problem of this module is

00:04:41,990 --> 00:04:50,440
that it takes many time for compile and

00:04:48,680 --> 00:04:53,570
[Music]

00:04:50,440 --> 00:04:58,460
at June 2 we we like to compile

00:04:53,570 --> 00:05:06,530
everything and but various some like

00:04:58,460 --> 00:05:10,400
keys were like some we like to compile

00:05:06,530 --> 00:05:13,970
everything but in some case we don't

00:05:10,400 --> 00:05:23,390
like to keep the computer compiling too

00:05:13,970 --> 00:05:26,510
much and also like usually we try to

00:05:23,390 --> 00:05:30,050
keep house warm in winter during

00:05:26,510 --> 00:05:34,370
compilation but there is some solution

00:05:30,050 --> 00:05:36,530
in Gen 2 for not using our PC for

00:05:34,370 --> 00:05:39,170
compiling and that is using binary host

00:05:36,530 --> 00:05:41,360
that is having a server that is

00:05:39,170 --> 00:05:44,950
compelling for you and can give you

00:05:41,360 --> 00:05:47,210
binary package and opera or using

00:05:44,950 --> 00:05:49,960
precompiled binary so we have some

00:05:47,210 --> 00:05:55,190
package that have already broken pilot

00:05:49,960 --> 00:05:59,720
and so we tried to do same things for

00:05:55,190 --> 00:06:03,110
light patch module so the current

00:05:59,720 --> 00:06:08,840
existing live patch service various many

00:06:03,110 --> 00:06:12,650
but read some problem that we thought

00:06:08,840 --> 00:06:15,560
was some problem that you have to trust

00:06:12,650 --> 00:06:19,430
before party vendor we are lacking

00:06:15,560 --> 00:06:22,250
support for custom kernel configuration

00:06:19,430 --> 00:06:24,530
so if you are using a different

00:06:22,250 --> 00:06:27,860
configuration from what your vendor is

00:06:24,530 --> 00:06:31,850
giving you cannot using the life--which

00:06:27,860 --> 00:06:36,200
services that is providing and also if

00:06:31,850 --> 00:06:40,250
you want to make your own life patch

00:06:36,200 --> 00:06:44,400
patch you cannot use the service for

00:06:40,250 --> 00:06:50,690
comparing the life paths for your car

00:06:44,400 --> 00:06:53,760
and in some case we are closed source so

00:06:50,690 --> 00:06:59,130
such solution you have developer that is

00:06:53,760 --> 00:07:01,860
making life life watch patch and either

00:06:59,130 --> 00:07:03,990
descent into server but it will

00:07:01,860 --> 00:07:07,229
distribute we pass very light patch

00:07:03,990 --> 00:07:12,210
object to very various machine that

00:07:07,229 --> 00:07:15,600
needs a life touch object so our

00:07:12,210 --> 00:07:21,979
solution is to support a different kind

00:07:15,600 --> 00:07:26,010
of configuration and to support also

00:07:21,979 --> 00:07:31,610
touch centered by the client and we

00:07:26,010 --> 00:07:35,130
release very system as open source so

00:07:31,610 --> 00:07:38,190
the LF patch client is sending a version

00:07:35,130 --> 00:07:41,100
of the kernel the configuration that is

00:07:38,190 --> 00:07:44,430
using the kernel and is sending a list

00:07:41,100 --> 00:07:50,610
of patch that will be converted to life

00:07:44,430 --> 00:07:52,979
object and is sending the main patch and

00:07:50,610 --> 00:07:55,139
a list of patch that will be the intern

00:07:52,979 --> 00:08:03,210
because it will increment the patch over

00:07:55,139 --> 00:08:12,270
the old path but your kernel Aradia the

00:08:03,210 --> 00:08:19,789
implementation is Python is actually is

00:08:12,270 --> 00:08:19,789
just using Python and very is a

00:08:20,180 --> 00:08:30,750
mini-challenge and so one of the

00:08:25,080 --> 00:08:34,110
challenges that some patch require

00:08:30,750 --> 00:08:42,450
manual modification for be converted to

00:08:34,110 --> 00:08:44,970
life touch and in some case reproducing

00:08:42,450 --> 00:08:48,480
the build environment it becomes

00:08:44,970 --> 00:08:52,800
complicated like when various difference

00:08:48,480 --> 00:08:56,820
in compilation version or computational

00:08:52,800 --> 00:08:59,899
flag it became

00:08:56,820 --> 00:09:04,190
very life much became incompatible or

00:08:59,899 --> 00:09:04,190
very some architecture that are

00:09:04,220 --> 00:09:17,370
incompatible with life fashion in some

00:09:11,130 --> 00:09:22,050
case also like June to have non vanilla

00:09:17,370 --> 00:09:25,440
juicy that is GCC with some patch added

00:09:22,050 --> 00:09:36,060
by Jing to and in some case we see

00:09:25,440 --> 00:09:40,889
Vatican broke left patch so the current

00:09:36,060 --> 00:09:46,829
status is really said the fourth bit

00:09:40,889 --> 00:09:53,910
election in 2007 we package it elect

00:09:46,829 --> 00:09:56,930
patch version 2 and engine - we have the

00:09:53,910 --> 00:10:01,829
lastest version of K patch

00:09:56,930 --> 00:10:05,100
we presented as poster research

00:10:01,829 --> 00:10:11,010
conference and we try to keep a close

00:10:05,100 --> 00:10:15,680
collaboration with K watchman Tina and

00:10:11,010 --> 00:10:24,829
visit a situation of keep a package on

00:10:15,680 --> 00:10:24,829
various distribution so

00:10:29,620 --> 00:10:46,010
LF much still I still need many many

00:10:36,769 --> 00:10:51,199
change and many new feature but we are

00:10:46,010 --> 00:10:54,230
thinking and now the first things that I

00:10:51,199 --> 00:11:00,220
left patch need is having a better life

00:10:54,230 --> 00:11:04,190
a automatization and and this is because

00:11:00,220 --> 00:11:10,250
we try to make more simple for the user

00:11:04,190 --> 00:11:13,160
to make life pastor object and as now in

00:11:10,250 --> 00:11:16,940
some case the user still have to modify

00:11:13,160 --> 00:11:24,920
the life patch patch for making it

00:11:16,940 --> 00:11:26,899
compatible with the life system and now

00:11:24,920 --> 00:11:30,769
we try to make a multi distribution and

00:11:26,899 --> 00:11:32,959
life a stinging and a continuous

00:11:30,769 --> 00:11:38,990
integration and continuous development

00:11:32,959 --> 00:11:46,310
check and eric patch overly well so

00:11:38,990 --> 00:11:48,740
about a life a automatization and one of

00:11:46,310 --> 00:11:55,220
the things that came out from the life

00:11:48,740 --> 00:11:58,010
patch mailing list is to try to mainly

00:11:55,220 --> 00:12:01,370
think about one very is no semantic

00:11:58,010 --> 00:12:05,329
change and to make a tool for creating

00:12:01,370 --> 00:12:07,390
vector relocation entries for doing

00:12:05,329 --> 00:12:10,500
their life a automatization and

00:12:07,390 --> 00:12:10,500
[Music]

00:12:15,420 --> 00:12:21,230
we are trying to make at this point

00:12:18,680 --> 00:12:37,620
disappointing work for different

00:12:21,230 --> 00:12:42,500
operating system and we made we try to

00:12:37,620 --> 00:12:47,579
make a leftist claim to for Debian but

00:12:42,500 --> 00:12:50,160
is actually bit of a master because is

00:12:47,579 --> 00:12:53,690
using actually engine to kernel over

00:12:50,160 --> 00:12:53,690
Debian and

00:12:57,450 --> 00:13:00,570
[Music]

00:13:10,380 --> 00:13:13,500
[Music]

00:13:37,820 --> 00:13:48,850
so we are trying to patch meaningful and

00:13:42,290 --> 00:13:48,850
I think it's too little to see

00:14:15,390 --> 00:14:23,529
well visas the case with the Gentoo and

00:14:19,950 --> 00:14:30,040
elect but client is sending with patch

00:14:23,529 --> 00:14:32,370
and the kernel configuration and to be a

00:14:30,040 --> 00:14:35,769
leopard server where LFO server will

00:14:32,370 --> 00:14:38,399
build the like patch and return of a

00:14:35,769 --> 00:14:38,399
like path object

00:15:15,219 --> 00:15:24,859
and yeah I don't know if we can see but

00:15:20,199 --> 00:15:30,040
but he is some part that is became in

00:15:24,859 --> 00:15:33,230
caps lock and you could pass the

00:15:30,040 --> 00:15:33,230
[Music]

00:16:00,999 --> 00:16:09,999
so hunter thinks he is like Poisson you

00:16:05,449 --> 00:16:13,179
sang aging and who is implementing like

00:16:09,999 --> 00:16:16,519
motorcycles anything in their server and

00:16:13,179 --> 00:16:20,059
doing very life much verification on the

00:16:16,519 --> 00:16:27,259
kind for be sure that very like patch is

00:16:20,059 --> 00:16:30,199
ended by for safety reason and another

00:16:27,259 --> 00:16:34,639
way of using life patch is a to testing

00:16:30,199 --> 00:16:37,819
that will iPod system is working so you

00:16:34,639 --> 00:16:41,839
can have a testing server that will test

00:16:37,819 --> 00:16:46,850
the LF patch we will test the life patch

00:16:41,839 --> 00:16:51,379
sended viola elect patch and before

00:16:46,850 --> 00:16:54,790
sending it to production so you can know

00:16:51,379 --> 00:16:57,499
if the life patch is working or not and

00:16:54,790 --> 00:17:00,170
now we are working also in a Travis

00:16:57,499 --> 00:17:06,130
implementation for doing the continuous

00:17:00,170 --> 00:17:06,130
integration testing with La Paz and

00:17:06,460 --> 00:17:12,770
[Music]

00:17:08,589 --> 00:17:18,649
another things is doing left patch

00:17:12,770 --> 00:17:24,289
overlay that is similar to Jing to

00:17:18,649 --> 00:17:29,659
overlay that is our repository for

00:17:24,289 --> 00:17:35,200
keeping the life patch touch will be

00:17:29,659 --> 00:17:35,200
sent into the Electra and

00:17:36,320 --> 00:17:39,450
[Music]

00:17:58,680 --> 00:18:08,950
and the current version is like we'd

00:18:03,310 --> 00:18:15,130
like you can add the patch mechanisation

00:18:08,950 --> 00:18:18,970
and the patch ID and it was sent with

00:18:15,130 --> 00:18:25,090
positive and when you can subscribe from

00:18:18,970 --> 00:18:28,780
the LMS client to La Paz overlay and it

00:18:25,090 --> 00:18:31,260
will build such parts for the La Paz

00:18:28,780 --> 00:18:31,260
client

00:18:47,300 --> 00:18:56,690
the conclusion is that life passion

00:18:53,270 --> 00:18:58,820
usually takes time compiling and very is

00:18:56,690 --> 00:19:11,600
a sound vendor solution that are trying

00:18:58,820 --> 00:19:14,270
to solve the compilation problem in a

00:19:11,600 --> 00:19:22,790
proprietary way and LF patch is offering

00:19:14,270 --> 00:19:32,660
a flexible solution and LF patch client

00:19:22,790 --> 00:19:36,140
is on github and if it is still is still

00:19:32,660 --> 00:19:38,809
in beta version so if you find an issue

00:19:36,140 --> 00:19:43,130
if you have any problem to pre assigned

00:19:38,809 --> 00:19:52,309
to every flash client to the github

00:19:43,130 --> 00:19:58,240
repository and few days ago

00:19:52,309 --> 00:19:58,240
we open the first arepa server node and

00:19:58,690 --> 00:20:10,400
if you have June 2 and you want to try

00:20:02,260 --> 00:20:16,820
you can send you can like Paschal candle

00:20:10,400 --> 00:20:20,420
from this node if you're interested in

00:20:16,820 --> 00:20:25,820
contributing that party is working every

00:20:20,420 --> 00:20:31,130
sort of contribution and this is

00:20:25,820 --> 00:20:33,429
everything if there is any question or

00:20:31,130 --> 00:20:33,429
anything

00:20:43,480 --> 00:20:54,320
hey Ellis maybe I missed it in the

00:20:48,159 --> 00:20:57,200
presentation but 4k patch we have a

00:20:54,320 --> 00:21:00,380
requirement that the same version of GCC

00:20:57,200 --> 00:21:03,590
is used the one that built the kernel

00:21:00,380 --> 00:21:06,860
needs to be the one this builds the K

00:21:03,590 --> 00:21:10,370
patch module yeah I didn't see anywhere

00:21:06,860 --> 00:21:13,520
in the message that you were sending you

00:21:10,370 --> 00:21:16,820
send along I think a patch and kernel

00:21:13,520 --> 00:21:21,260
configuration and the server and goes

00:21:16,820 --> 00:21:24,440
off and builds the K patch was there

00:21:21,260 --> 00:21:29,179
something that specified GCC version or

00:21:24,440 --> 00:21:36,559
is that something that you know at the

00:21:29,179 --> 00:21:39,500
time very isn't and we see I think with

00:21:36,559 --> 00:21:41,779
major version you can break well it like

00:21:39,500 --> 00:21:44,649
boch but if you have like mineral

00:21:41,779 --> 00:21:48,080
division okay you can have see some

00:21:44,649 --> 00:21:50,299
compatibility right yeah we can I know

00:21:48,080 --> 00:21:55,250
we can get away you can skip the GCC

00:21:50,299 --> 00:21:58,010
version so yeah sure if you have big

00:21:55,250 --> 00:22:01,549
version difference you will have problem

00:21:58,010 --> 00:22:02,929
but if you have few difference you can

00:22:01,549 --> 00:22:06,950
still be safe

00:22:02,929 --> 00:22:09,409
yes okay is just a suggestion this may

00:22:06,950 --> 00:22:12,700
be a future towards me for the other

00:22:09,409 --> 00:22:12,700
server sure

00:22:18,670 --> 00:22:24,340
so this not another question just just

00:22:22,270 --> 00:22:26,260
the remark maybe more for public because

00:22:24,340 --> 00:22:28,600
it usually doesn't take one hour to

00:22:26,260 --> 00:22:29,740
build a life pitch kernel module so I I

00:22:28,600 --> 00:22:31,570
suppose you were talking about

00:22:29,740 --> 00:22:35,160
capability is that correct

00:22:31,570 --> 00:22:38,650
hmm so I suppose you what talking about

00:22:35,160 --> 00:22:41,590
KPG bill that that one takes one hour to

00:22:38,650 --> 00:22:49,020
build there's the Kampala Romeo is just

00:22:41,590 --> 00:22:52,300
like a second 30s is that correct yes

00:22:49,020 --> 00:23:06,910
yes that's now is to using Kapus build

00:22:52,300 --> 00:23:13,450
and if it depends like usually when you

00:23:06,910 --> 00:23:15,340
give them so she's sure you can use I

00:23:13,450 --> 00:23:27,760
think different fashion of doing a black

00:23:15,340 --> 00:23:33,900
patch so I think you all saw that I

00:23:27,760 --> 00:23:33,900
think you answered so it's why thank you

00:23:36,120 --> 00:23:41,470
yeah I actually had a question and this

00:23:38,620 --> 00:23:44,470
is just my own ignorance but could you

00:23:41,470 --> 00:23:47,530
speak to why Cape each Cape hatch bill

00:23:44,470 --> 00:23:55,510
takes an hour to build a patch module

00:23:47,530 --> 00:23:58,420
that seems surprising I should probably

00:23:55,510 --> 00:24:01,120
introduce myself I'm Joe Lawrence and I

00:23:58,420 --> 00:24:02,470
do work on the Cape etch project so I

00:24:01,120 --> 00:24:05,830
guess that's my fault

00:24:02,470 --> 00:24:09,700
yeah part of our fault for that

00:24:05,830 --> 00:24:15,120
so what Cape etches Cape patch build is

00:24:09,700 --> 00:24:18,790
doing is that we we do an elf binary

00:24:15,120 --> 00:24:24,100
comparison of the kernel and modules

00:24:18,790 --> 00:24:28,030
that are built Pripet with there's st.

00:24:24,100 --> 00:24:29,650
missing bill post patch and that means

00:24:28,030 --> 00:24:33,790
that we have to essentially

00:24:29,650 --> 00:24:37,930
built two kernels and that's even true

00:24:33,790 --> 00:24:42,460
for distro kernels like rel because we

00:24:37,930 --> 00:24:46,540
need to apply some GCC options we we

00:24:42,460 --> 00:24:50,140
build with functions in their own

00:24:46,540 --> 00:24:52,390
sections so then the comparison tool can

00:24:50,140 --> 00:24:57,370
figure out by elf sections what has

00:24:52,390 --> 00:25:00,550
changed so what I kind of thought of

00:24:57,370 --> 00:25:03,700
after his question is that another

00:25:00,550 --> 00:25:06,820
potential feature that you could add is

00:25:03,700 --> 00:25:12,910
that Cape patch bill does have an option

00:25:06,820 --> 00:25:14,500
where you can specify what you want to

00:25:12,910 --> 00:25:16,390
build do you want you can build the

00:25:14,500 --> 00:25:19,300
whole you know just do a make and build

00:25:16,390 --> 00:25:23,320
the kernel and all the modules or you

00:25:19,300 --> 00:25:25,540
can elect to say build VM Linux so if

00:25:23,320 --> 00:25:27,640
you know that your patch is only in the

00:25:25,540 --> 00:25:30,520
kernel proper you don't need to build

00:25:27,640 --> 00:25:33,400
all these kernel modules vice versa if

00:25:30,520 --> 00:25:36,100
you know that you're patching a kernel

00:25:33,400 --> 00:25:40,570
module I need to build the curl right or

00:25:36,100 --> 00:25:42,820
all the other modules so initially I

00:25:40,570 --> 00:25:45,130
imagine you could probably add to your

00:25:42,820 --> 00:25:49,000
message format to specify what the

00:25:45,130 --> 00:25:51,010
target is that you need to build and if

00:25:49,000 --> 00:25:52,900
you get really fancy maybe you can

00:25:51,010 --> 00:26:02,730
derive that from the patch and the

00:25:52,900 --> 00:26:02,730
configuration itself other questions

00:26:07,110 --> 00:26:10,190
all right there aren't any other

00:26:08,549 --> 00:26:15,959
questions thank you very much thank you

00:26:10,190 --> 00:26:15,959

YouTube URL: https://www.youtube.com/watch?v=fhlEysdPr7k


