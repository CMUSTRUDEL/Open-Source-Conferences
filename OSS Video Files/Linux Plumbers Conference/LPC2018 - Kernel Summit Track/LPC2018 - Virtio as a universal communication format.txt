Title: LPC2018 - Virtio as a universal communication format
Publication date: 2018-12-04
Playlist: LPC2018 - Kernel Summit Track
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/246/
speaker:  Michael S. Tsirkin (Red Hat)
Captions: 
	00:00:05,540 --> 00:00:11,150
I'm Michael turrican I work at rap shot

00:00:07,819 --> 00:00:13,520
and Casati engineer and I'm also a chair

00:00:11,150 --> 00:00:14,929
of the Vertigo Technical Committee so

00:00:13,520 --> 00:00:17,420
that's the committee that oversees the

00:00:14,929 --> 00:00:19,939
beta of specification but today I'd like

00:00:17,420 --> 00:00:23,000
to talk to you about all kind of things

00:00:19,939 --> 00:00:24,349
that people do obviously I own and the

00:00:23,000 --> 00:00:28,040
kind of challenges that you encounter

00:00:24,349 --> 00:00:29,599
when you try to incorporate like very

00:00:28,040 --> 00:00:31,160
different functionality in very

00:00:29,599 --> 00:00:36,170
different designs under a single

00:00:31,160 --> 00:00:37,910
interface as we diode out and I hope it

00:00:36,170 --> 00:00:43,460
will be an interesting study in in the

00:00:37,910 --> 00:00:46,940
interface design so really built i/o is

00:00:43,460 --> 00:00:50,150
a assymetrical to party communication

00:00:46,940 --> 00:00:52,490
interface the first part is called the

00:00:50,150 --> 00:00:55,220
driver sometimes people call it the belt

00:00:52,490 --> 00:00:57,500
i/o driver and surprisingly and it

00:00:55,220 --> 00:00:59,690
submits some requests to the other party

00:00:57,500 --> 00:01:02,510
by making them available that's the

00:00:59,690 --> 00:01:04,489
terminology that we use it's typically

00:01:02,510 --> 00:01:06,380
implemented in software the Recker

00:01:04,489 --> 00:01:08,630
neural drivers that implemented there

00:01:06,380 --> 00:01:10,990
are user space process drivers that

00:01:08,630 --> 00:01:14,000
implemented human drivers implemented

00:01:10,990 --> 00:01:17,840
what kind of all kinds of solutions

00:01:14,000 --> 00:01:21,200
exist the other party is called the

00:01:17,840 --> 00:01:23,420
device that's the language that the rear

00:01:21,200 --> 00:01:26,450
tire specifications the clarification

00:01:23,420 --> 00:01:28,720
uses but some people confusingly also

00:01:26,450 --> 00:01:32,870
call it the V host driver

00:01:28,720 --> 00:01:35,000
what it does it uses the request which

00:01:32,870 --> 00:01:39,260
just means that it gets them and execute

00:01:35,000 --> 00:01:43,280
them so that can live in the hypervisor

00:01:39,260 --> 00:01:46,790
that device can be implemented in the

00:01:43,280 --> 00:01:49,820
Linux kernel can be another process may

00:01:46,790 --> 00:01:54,290
be separate from the first one it can

00:01:49,820 --> 00:01:59,060
actually be a PCI device so with that in

00:01:54,290 --> 00:02:02,720
mind it really started as a hypervisor

00:01:59,060 --> 00:02:06,250
interface I'm not sure it was 2007 but

00:02:02,720 --> 00:02:07,509
around that time rest here all that and

00:02:06,250 --> 00:02:10,489
[Music]

00:02:07,509 --> 00:02:13,549
even though it was originally just just

00:02:10,489 --> 00:02:16,310
forward communication between guests of

00:02:13,549 --> 00:02:18,739
a virtual machine and the hypervisor it

00:02:16,310 --> 00:02:21,680
very quickly also became an interface

00:02:18,739 --> 00:02:25,040
for communication between user space and

00:02:21,680 --> 00:02:29,530
the Linux kernel with introduction of

00:02:25,040 --> 00:02:34,220
the V host driver although it was still

00:02:29,530 --> 00:02:38,390
typically used for KVM and really

00:02:34,220 --> 00:02:41,540
virtual machines and then suddenly two

00:02:38,390 --> 00:02:43,879
years after that people implemented

00:02:41,540 --> 00:02:48,739
we're tyring hardware for some

00:02:43,879 --> 00:02:52,640
multimedia or flawed and registered well

00:02:48,739 --> 00:02:55,670
that's a cool and random event but

00:02:52,640 --> 00:02:58,250
people just kept reusing that for other

00:02:55,670 --> 00:03:01,760
stuff not directly related to

00:02:58,250 --> 00:03:04,250
virtualization so people aided a B host

00:03:01,760 --> 00:03:07,040
user device and if you're tired user

00:03:04,250 --> 00:03:09,709
device and with that people started

00:03:07,040 --> 00:03:13,239
using vertigo for communication between

00:03:09,709 --> 00:03:17,239
two user space processes and then

00:03:13,239 --> 00:03:19,549
another hard will offload kind of device

00:03:17,239 --> 00:03:21,620
appeared which until demonstrated and

00:03:19,549 --> 00:03:25,940
they called it a VDP a they seemed said

00:03:21,620 --> 00:03:30,799
to productize it it's really really not

00:03:25,940 --> 00:03:32,660
a random event people do try to use a

00:03:30,799 --> 00:03:35,120
spirit i/o interface in all kinds of

00:03:32,660 --> 00:03:38,419
scenarios that don't have to do anything

00:03:35,120 --> 00:03:45,790
with virtualization and it's a valid

00:03:38,419 --> 00:03:48,470
point then to ask by wise is going on so

00:03:45,790 --> 00:03:52,310
some of it is probably you know network

00:03:48,470 --> 00:03:54,739
effects like you know Facebook so if you

00:03:52,310 --> 00:03:57,230
just look at the wealth of software

00:03:54,739 --> 00:03:59,299
implementing bataillon that's that's

00:03:57,230 --> 00:04:02,980
huge has be habits at all levels of the

00:03:59,299 --> 00:04:05,150
stack qmu was one of the first

00:04:02,980 --> 00:04:09,430
implementations of your teo of course

00:04:05,150 --> 00:04:12,590
and then the linux kernel drivers

00:04:09,430 --> 00:04:14,930
appeared people implemented Windows

00:04:12,590 --> 00:04:17,000
kernel drivers as well also in user

00:04:14,930 --> 00:04:18,889
space DP decades of the main team built

00:04:17,000 --> 00:04:21,829
I always did we gave is implemented via

00:04:18,889 --> 00:04:25,220
Taeyang that's all software but

00:04:21,829 --> 00:04:27,389
sometimes he also need firmer write for

00:04:25,220 --> 00:04:29,759
things like booting

00:04:27,389 --> 00:04:33,749
your operating system saw their

00:04:29,759 --> 00:04:37,229
implementations in the BIOS in UEFI the

00:04:33,749 --> 00:04:39,539
slow firmer they do things like this

00:04:37,229 --> 00:04:42,539
support for Scotty without Scotty

00:04:39,539 --> 00:04:44,789
devices with their block devices which

00:04:42,539 --> 00:04:48,840
they own networking devices for the pixi

00:04:44,789 --> 00:04:54,240
driver and hardware devices and I

00:04:48,840 --> 00:04:56,219
mentioned so really if you are doing a

00:04:54,240 --> 00:04:58,139
new project right you base it around

00:04:56,219 --> 00:05:01,889
your tire you get to join the circus

00:04:58,139 --> 00:05:04,740
system and benefit from interacting

00:05:01,889 --> 00:05:06,539
business communities benefit you can

00:05:04,740 --> 00:05:12,479
benefit from reusing some of that code

00:05:06,539 --> 00:05:16,979
so for sure just how much will you

00:05:12,479 --> 00:05:19,620
benefit from that would depend on what

00:05:16,979 --> 00:05:21,599
kind of functionality does your project

00:05:19,620 --> 00:05:26,580
need right but there's a wealth of

00:05:21,599 --> 00:05:30,379
available functionality and some of

00:05:26,580 --> 00:05:30,379
these have been around for a while

00:05:30,599 --> 00:05:36,449
good guys at IBM Anthony Liguori

00:05:33,779 --> 00:05:39,750
arrestee Russell and others the lot of

00:05:36,449 --> 00:05:41,939
work in the early 2000s so some of these

00:05:39,750 --> 00:05:46,770
have been around for more than ten years

00:05:41,939 --> 00:05:49,500
now and and these are widely deployed so

00:05:46,770 --> 00:05:52,319
maybe if you just need something like

00:05:49,500 --> 00:05:55,620
this you can just interface with that

00:05:52,319 --> 00:05:58,199
and oh there's a bunch of software don't

00:05:55,620 --> 00:06:00,419
need to right right so I'm not sure I

00:05:58,199 --> 00:06:05,699
need to go into why standards are good

00:06:00,419 --> 00:06:09,089
in front of this audience but just some

00:06:05,699 --> 00:06:11,039
more arguments of shamanism so they're

00:06:09,089 --> 00:06:15,930
issues if you are using user space

00:06:11,039 --> 00:06:18,539
drivers with new hardware so hey I'm

00:06:15,930 --> 00:06:21,149
switching to a different part of a

00:06:18,539 --> 00:06:22,649
platform my application is linked with

00:06:21,149 --> 00:06:25,020
this library which implements a user

00:06:22,649 --> 00:06:29,639
space driver so now I need to update

00:06:25,020 --> 00:06:31,439
this library maybe the ABI is stable

00:06:29,639 --> 00:06:33,210
enough or maybe they release when you

00:06:31,439 --> 00:06:36,930
measure version and this hardware

00:06:33,210 --> 00:06:40,540
support is over there or maybe it's all

00:06:36,930 --> 00:06:43,830
packaged in you know a a container image

00:06:40,540 --> 00:06:48,310
and I really can't run it a new hardware

00:06:43,830 --> 00:06:50,530
so what kinds of issues like that if you

00:06:48,310 --> 00:06:53,050
have a standard interface you can

00:06:50,530 --> 00:06:58,930
actually maybe just reuse that

00:06:53,050 --> 00:07:01,870
application a bit more way an idea is

00:06:58,930 --> 00:07:04,960
that with user space drivers you don't

00:07:01,870 --> 00:07:11,200
have the kernel doesn't get visibility

00:07:04,960 --> 00:07:12,640
into the state of the hardware so kernel

00:07:11,200 --> 00:07:14,620
is responsible for things like you know

00:07:12,640 --> 00:07:17,590
snapchatting and restoring for example

00:07:14,620 --> 00:07:20,710
and if you can snapchat and restore your

00:07:17,590 --> 00:07:23,020
hardware then maybe that gets broken so

00:07:20,710 --> 00:07:24,970
if your hardware follows the spec and

00:07:23,020 --> 00:07:27,370
your application follows the spec you

00:07:24,970 --> 00:07:29,380
can actually figure out what's going on

00:07:27,370 --> 00:07:32,680
between these guys right so they could

00:07:29,380 --> 00:07:34,780
exist a driver that actually you stop

00:07:32,680 --> 00:07:36,730
the application you figure out the state

00:07:34,780 --> 00:07:39,010
of the hardware kind of snapshot it

00:07:36,730 --> 00:07:40,510
together as application and restore it

00:07:39,010 --> 00:07:42,430
and of course it has more value if you

00:07:40,510 --> 00:07:44,980
actually can restore an idea first

00:07:42,430 --> 00:07:47,740
hardware platform so a standard standard

00:07:44,980 --> 00:07:51,790
interface would be great for that that's

00:07:47,740 --> 00:07:53,560
a bit of a theoretical example but these

00:07:51,790 --> 00:07:55,780
virtual machines you have a very similar

00:07:53,560 --> 00:07:58,620
set of problems and there are people

00:07:55,780 --> 00:08:01,390
actually demonstrated solutions so

00:07:58,620 --> 00:08:04,330
people have hardware or floats for

00:08:01,390 --> 00:08:07,240
retail and they actually demonstrated

00:08:04,330 --> 00:08:09,130
moving between like a hardware solution

00:08:07,240 --> 00:08:13,510
and a software solution so really cross

00:08:09,130 --> 00:08:16,000
vendor and there's in the cluster and

00:08:13,510 --> 00:08:19,180
makes of harder offloads and a non

00:08:16,000 --> 00:08:22,240
applauded boxes right and they just

00:08:19,180 --> 00:08:25,060
moved the m's around actually doing live

00:08:22,240 --> 00:08:31,560
migration so even without stopping the

00:08:25,060 --> 00:08:36,040
guest it's just pretty cool I think so

00:08:31,560 --> 00:08:38,820
if you're doing a hardware things like

00:08:36,040 --> 00:08:42,729
they cut user space drivers for example

00:08:38,820 --> 00:08:45,640
pass-through for VMs a bunch of things

00:08:42,729 --> 00:08:48,520
which you kind of expect from Linux

00:08:45,640 --> 00:08:50,920
don't work that well you don't get

00:08:48,520 --> 00:08:52,720
things like over commit so you're

00:08:50,920 --> 00:08:54,100
limited to amount of interfaces that you

00:08:52,720 --> 00:08:56,860
have to have

00:08:54,100 --> 00:08:59,620
might have em like there are some ideas

00:08:56,860 --> 00:09:02,560
how to solve that around scalable IV but

00:08:59,620 --> 00:09:05,350
that's not yet deployed and on the other

00:09:02,560 --> 00:09:09,910
hand you know things like member over

00:09:05,350 --> 00:09:13,000
commits stupid working suddenly so you

00:09:09,910 --> 00:09:14,709
could if your hardware follows the same

00:09:13,000 --> 00:09:16,360
interface that's also implemented in

00:09:14,709 --> 00:09:18,310
software and we have lots of soft

00:09:16,360 --> 00:09:21,310
implementations for your day on right

00:09:18,310 --> 00:09:24,819
then you can actually maybe a start with

00:09:21,310 --> 00:09:26,860
hardware for specific instances which

00:09:24,819 --> 00:09:31,420
need lots of performance then you can

00:09:26,860 --> 00:09:33,459
switch to a software back and quickly on

00:09:31,420 --> 00:09:39,279
the fly right and then you get all these

00:09:33,459 --> 00:09:48,819
goodies like swap etc all maybe it was

00:09:39,279 --> 00:09:53,889
higher CP utilization but it's there so

00:09:48,819 --> 00:09:57,519
a bugs do happen and exactly who's to

00:09:53,889 --> 00:10:00,130
blame right so we have some tools within

00:09:57,519 --> 00:10:02,620
the kernel there are some some ideas you

00:10:00,130 --> 00:10:05,709
know I remember you can maybe protect

00:10:02,620 --> 00:10:09,579
you so that the crash will crash the

00:10:05,709 --> 00:10:11,680
card but still even if it if it's the

00:10:09,579 --> 00:10:13,360
device that crashes you're never sure

00:10:11,680 --> 00:10:15,880
where it's the driver's fault or the

00:10:13,360 --> 00:10:18,550
cards fault right the specs could be

00:10:15,880 --> 00:10:21,819
difficult to decipher and understand

00:10:18,550 --> 00:10:24,579
who's misbehaving here so if you have a

00:10:21,819 --> 00:10:27,250
good back I don't know how good ours is

00:10:24,579 --> 00:10:29,470
we it will try but that's that's a

00:10:27,250 --> 00:10:31,750
definition you can eventually decide

00:10:29,470 --> 00:10:34,750
who's to blame where does a fix belong

00:10:31,750 --> 00:10:36,850
right you can also try to swap in a

00:10:34,750 --> 00:10:39,240
different device if you don't have a

00:10:36,850 --> 00:10:42,279
different vendor to sell you a card

00:10:39,240 --> 00:10:44,829
adheres to divert IO spec we can try a

00:10:42,279 --> 00:10:47,620
software implementations and there are

00:10:44,829 --> 00:10:49,420
lots of these and that that's usable

00:10:47,620 --> 00:10:50,709
fourth is a debugging tool we are

00:10:49,420 --> 00:10:55,029
actually using it that way

00:10:50,709 --> 00:10:59,319
so that's that's another use right but I

00:10:55,029 --> 00:11:01,480
think that's not kind of what I said so

00:10:59,319 --> 00:11:06,309
far is kind of generic and any kind of

00:11:01,480 --> 00:11:08,259
standard for interfaces would be I would

00:11:06,309 --> 00:11:10,819
have the same properties

00:11:08,259 --> 00:11:13,910
they're actually some properties

00:11:10,819 --> 00:11:18,829
inverted or which mostly came out of

00:11:13,910 --> 00:11:21,319
trying to do a good job for KVM that I

00:11:18,829 --> 00:11:24,399
just just made it a kind of a nice and

00:11:21,319 --> 00:11:28,550
successful interface so some of it is is

00:11:24,399 --> 00:11:31,269
strong focus on compatibility the fact

00:11:28,550 --> 00:11:34,880
that we can use PCI optionally for

00:11:31,269 --> 00:11:36,589
discovery and configuration the specific

00:11:34,880 --> 00:11:38,410
part of your tayo that's called the

00:11:36,589 --> 00:11:40,940
virtue I'll describe that a little bit

00:11:38,410 --> 00:11:42,800
and really that we have a reasonable

00:11:40,940 --> 00:11:45,110
process you know to extend the

00:11:42,800 --> 00:11:50,240
specification and standardize new

00:11:45,110 --> 00:11:56,329
features so just let's take a look at

00:11:50,240 --> 00:11:59,630
some of this stuff so the compatibility

00:11:56,329 --> 00:12:01,940
part of Bao is handled by a an

00:11:59,630 --> 00:12:05,120
initialization stage which is called the

00:12:01,940 --> 00:12:08,690
feature negotiation the way it works is

00:12:05,120 --> 00:12:11,509
a huge bitmap which we call the feature

00:12:08,690 --> 00:12:14,360
Vietnam so it divides faces and the

00:12:11,509 --> 00:12:16,670
driver has it and so the driver gets a

00:12:14,360 --> 00:12:20,630
map from the device and then just

00:12:16,670 --> 00:12:22,819
basically does a logical end and the

00:12:20,630 --> 00:12:24,170
bits that are set and boss these are the

00:12:22,819 --> 00:12:26,899
features that are supported by the

00:12:24,170 --> 00:12:32,180
driver and the device and then we also

00:12:26,899 --> 00:12:35,089
feed this back into the device that let

00:12:32,180 --> 00:12:38,120
me show how that works for a

00:12:35,089 --> 00:12:41,839
compatibility so here's a recent feature

00:12:38,120 --> 00:12:45,230
that got proposed and is being

00:12:41,839 --> 00:12:46,819
standardized in the vertigo spec that's

00:12:45,230 --> 00:12:51,139
really support for failover a

00:12:46,819 --> 00:12:54,380
conceptually failover idea is that we

00:12:51,139 --> 00:12:58,370
really have a single device and we

00:12:54,380 --> 00:13:01,399
expose it as two interfaces to the

00:12:58,370 --> 00:13:04,189
software and one is called the standby

00:13:01,399 --> 00:13:06,199
and that's a slower one and the other is

00:13:04,189 --> 00:13:08,329
a primary and that's a fast one so you

00:13:06,199 --> 00:13:10,790
really want to use a primary if you can

00:13:08,329 --> 00:13:13,370
sometimes you can you use a standby

00:13:10,790 --> 00:13:16,760
that's it at higher level they like have

00:13:13,370 --> 00:13:18,300
a it's the same serial number so we can

00:13:16,760 --> 00:13:22,410
match them

00:13:18,300 --> 00:13:24,690
nice so we allocated a feature but with

00:13:22,410 --> 00:13:26,400
that it's not really feature bit number

00:13:24,690 --> 00:13:29,910
zero that's been occupied for it like

00:13:26,400 --> 00:13:34,110
ten years but just for simplicity right

00:13:29,910 --> 00:13:36,120
so okay our standby device will be able

00:13:34,110 --> 00:13:38,070
to build i/o device and that's what we

00:13:36,120 --> 00:13:42,330
standardized in the vertigo spec and the

00:13:38,070 --> 00:13:44,520
primary can be anything so if you have

00:13:42,330 --> 00:13:46,560
it this device that's aware of this new

00:13:44,520 --> 00:13:49,290
feature and can act as a standby in the

00:13:46,560 --> 00:13:54,000
failover configuration then it will have

00:13:49,290 --> 00:13:58,440
the bitmap which says 0 X 1 right so B 0

00:13:54,000 --> 00:14:01,770
set and we updated the drivers they also

00:13:58,440 --> 00:14:04,200
have been 0 set combine the at alright

00:14:01,770 --> 00:14:06,690
we have support we have a match rate and

00:14:04,200 --> 00:14:09,540
we feed that to the device and device

00:14:06,690 --> 00:14:12,960
says all right so I can act I can work

00:14:09,540 --> 00:14:16,770
on this failover configuration and that

00:14:12,960 --> 00:14:18,750
enables better performance if the

00:14:16,770 --> 00:14:22,170
primary device appears we can switch to

00:14:18,750 --> 00:14:25,320
that and improve speed that's all great

00:14:22,170 --> 00:14:27,990
but what about existing setups right

00:14:25,320 --> 00:14:33,300
this probably just have standard without

00:14:27,990 --> 00:14:38,540
device so device has a 0 bit set and the

00:14:33,300 --> 00:14:41,280
feature bitmap but the driver doesn't so

00:14:38,540 --> 00:14:45,360
the result that it will feed value 0

00:14:41,280 --> 00:14:49,130
backed into the device now the device

00:14:45,360 --> 00:14:53,340
has two options one would be to say

00:14:49,130 --> 00:14:54,860
alright so I'll just act as a slow bit

00:14:53,340 --> 00:14:58,350
IO device and that's it

00:14:54,860 --> 00:14:58,830
there won't be an ability to do a

00:14:58,350 --> 00:15:00,840
speed-up

00:14:58,830 --> 00:15:03,510
but at least we get some kind of

00:15:00,840 --> 00:15:06,180
networking that's one option

00:15:03,510 --> 00:15:09,270
another is to say but I don't want to

00:15:06,180 --> 00:15:13,230
confuse the users they the only reason I

00:15:09,270 --> 00:15:15,360
had this built IO thing is you know to

00:15:13,230 --> 00:15:17,880
act as a standby for better stability

00:15:15,360 --> 00:15:21,360
but now that you say you don't support

00:15:17,880 --> 00:15:24,450
that never mind just use the primary and

00:15:21,360 --> 00:15:29,040
ignore me so it can fail and then the

00:15:24,450 --> 00:15:31,800
driver will not bind to the device maybe

00:15:29,040 --> 00:15:33,630
because we actually could suggest

00:15:31,800 --> 00:15:36,029
user like hey you want to update you

00:15:33,630 --> 00:15:39,149
guest because the device knows what's

00:15:36,029 --> 00:15:40,500
going on so lots of options it still

00:15:39,149 --> 00:15:44,220
it's not worse than just doing

00:15:40,500 --> 00:15:48,899
completely new device we have options

00:15:44,220 --> 00:15:50,339
rate well what about all devices that's

00:15:48,899 --> 00:15:52,829
kind of easy actually

00:15:50,339 --> 00:15:54,990
right the driver goes and pokes at the

00:15:52,829 --> 00:15:59,850
device and sees ho that's not a failover

00:15:54,990 --> 00:16:02,100
device well what if I want to do

00:15:59,850 --> 00:16:05,040
failover because I hey I have two

00:16:02,100 --> 00:16:08,130
devices you know with the same Mac well

00:16:05,040 --> 00:16:16,310
maybe I could you know just disable one

00:16:08,130 --> 00:16:19,829
of these two that's fine or I can maybe

00:16:16,310 --> 00:16:21,870
just notify the user say I don't know

00:16:19,829 --> 00:16:24,240
what's going on two devices which one do

00:16:21,870 --> 00:16:26,610
you want me to use why did you create

00:16:24,240 --> 00:16:27,649
this configuration you didn't say it

00:16:26,610 --> 00:16:30,930
fell over

00:16:27,649 --> 00:16:37,920
two identical serial addresses what's

00:16:30,930 --> 00:16:40,260
going on so again here's another case

00:16:37,920 --> 00:16:45,720
study that's kind of old rape but we

00:16:40,260 --> 00:16:49,950
made within qmu a switch to a completely

00:16:45,720 --> 00:16:55,290
different register layout for all the

00:16:49,950 --> 00:16:58,770
other devices happened around 2016 there

00:16:55,290 --> 00:17:01,950
was a feature bit for that and not a lot

00:16:58,770 --> 00:17:03,899
of people noticed it just worked you

00:17:01,950 --> 00:17:08,100
start an old guess you start an old

00:17:03,899 --> 00:17:10,910
driver it works you start a new one it

00:17:08,100 --> 00:17:13,919
also works you get the slightly more

00:17:10,910 --> 00:17:16,140
functionality new functionality if you

00:17:13,919 --> 00:17:19,199
want that enabled will depend on that

00:17:16,140 --> 00:17:21,030
but things just work for people so I

00:17:19,199 --> 00:17:24,929
think by now we can say we know how to

00:17:21,030 --> 00:17:27,059
do a compatibility that's a great

00:17:24,929 --> 00:17:29,090
success story and that kind of

00:17:27,059 --> 00:17:33,980
demonstrates how this this feature

00:17:29,090 --> 00:17:33,980
negotiation is helpful for compatibility

00:17:34,100 --> 00:17:41,700
so PCI is another thing that was

00:17:39,000 --> 00:17:44,010
designed originally for simplicity so

00:17:41,700 --> 00:17:45,539
that people can use a lot of existing

00:17:44,010 --> 00:17:47,249
software to manage

00:17:45,539 --> 00:17:49,139
your stereo devices it's not the only

00:17:47,249 --> 00:17:51,080
option some people really don't have

00:17:49,139 --> 00:17:55,049
support for PCI but it's widely deployed

00:17:51,080 --> 00:17:57,149
so that also makes it easy for people

00:17:55,049 --> 00:18:00,239
just come and say oh I want to do a PCI

00:17:57,149 --> 00:18:03,090
device hey wait IO can be a PCI device

00:18:00,239 --> 00:18:06,210
I'll just do that now record donated

00:18:03,090 --> 00:18:07,109
they're a vendor and device ID for use

00:18:06,210 --> 00:18:10,619
by vir tayo

00:18:07,109 --> 00:18:14,029
and that really means you can build your

00:18:10,619 --> 00:18:16,979
device you just use the spare and

00:18:14,029 --> 00:18:19,940
existing drivers will bind you just

00:18:16,979 --> 00:18:22,830
follow you know the spec to the letter

00:18:19,940 --> 00:18:24,979
that's it it just works no software

00:18:22,830 --> 00:18:28,559
needs to be written that that's great

00:18:24,979 --> 00:18:33,619
and existing drivers bind to device we

00:18:28,559 --> 00:18:33,619
get some recycling its ecological great

00:18:34,639 --> 00:18:41,909
that's another interesting component

00:18:40,049 --> 00:18:45,119
within the Airtel that just kind of

00:18:41,909 --> 00:18:48,119
happened it was designed for hypervisor

00:18:45,119 --> 00:18:50,749
originally but the way the communication

00:18:48,119 --> 00:18:54,419
was designed is that there is this ring

00:18:50,749 --> 00:18:57,659
in memory accessible to both the device

00:18:54,419 --> 00:18:59,519
and the driver the ring is filled with

00:18:57,659 --> 00:19:02,159
descriptors we actually have support for

00:18:59,519 --> 00:19:05,570
multiple formats here's one that's like

00:19:02,159 --> 00:19:09,389
the latest the newest one that we added

00:19:05,570 --> 00:19:11,299
well if has an address it has a

00:19:09,389 --> 00:19:15,299
Lancefield

00:19:11,299 --> 00:19:19,590
there's an ID which kind of supports out

00:19:15,299 --> 00:19:21,989
of order use so the device can can use

00:19:19,590 --> 00:19:23,729
these things in a in not in the same

00:19:21,989 --> 00:19:25,859
order that they were supplied by the

00:19:23,729 --> 00:19:28,649
driver and you use the idea to figure

00:19:25,859 --> 00:19:31,950
out which one was was written by the

00:19:28,649 --> 00:19:34,679
device and there's Flags that basically

00:19:31,950 --> 00:19:38,639
marks it available or not available to

00:19:34,679 --> 00:19:40,369
the device some other minor things but

00:19:38,639 --> 00:19:44,519
really you look at to this

00:19:40,369 --> 00:19:47,429
that's basically what any standard

00:19:44,519 --> 00:19:50,759
Hardware team a capable hardware does

00:19:47,429 --> 00:19:53,820
they all do this no big deal so it was

00:19:50,759 --> 00:19:56,489
very easy for people to say well we can

00:19:53,820 --> 00:19:58,010
use this format why not it's just

00:19:56,489 --> 00:20:01,670
generic enough

00:19:58,010 --> 00:20:03,290
to probably support a lot of existing

00:20:01,670 --> 00:20:07,550
hardware functionality without the

00:20:03,290 --> 00:20:10,280
issues other things that we could have

00:20:07,550 --> 00:20:12,890
done and what didn't read and make it

00:20:10,280 --> 00:20:14,900
easy for hardware to do is we could have

00:20:12,890 --> 00:20:19,250
done some shared locks this hypervisor

00:20:14,900 --> 00:20:22,340
that would have made it tricky it's

00:20:19,250 --> 00:20:24,260
lucky that the notifications that are

00:20:22,340 --> 00:20:27,650
sent between the driver and device I

00:20:24,260 --> 00:20:30,590
basically just wake up call hey there's

00:20:27,650 --> 00:20:35,120
some stuff in that ring and that you can

00:20:30,590 --> 00:20:38,720
do like interrupts which don't pass out

00:20:35,120 --> 00:20:40,820
of the eight around you know for

00:20:38,720 --> 00:20:45,140
communication between the driver and the

00:20:40,820 --> 00:20:47,720
device so that that that structure

00:20:45,140 --> 00:20:52,670
really makes it possible for people to

00:20:47,720 --> 00:20:56,570
do hardware for people to do software it

00:20:52,670 --> 00:20:59,360
just is just simple engineering so

00:20:56,570 --> 00:21:03,140
that's another successful thing so let's

00:20:59,360 --> 00:21:05,900
say I convinced you and you're going to

00:21:03,140 --> 00:21:09,920
build you a new project around your day

00:21:05,900 --> 00:21:12,290
own well congratulations but what if you

00:21:09,920 --> 00:21:15,920
can't just reuse all existing stuff

00:21:12,290 --> 00:21:18,890
right then do I really have to write the

00:21:15,920 --> 00:21:20,120
spec that's a lot of work well ventually

00:21:18,890 --> 00:21:22,610
it's the right thing to do

00:21:20,120 --> 00:21:24,470
right because then people can find out

00:21:22,610 --> 00:21:27,800
how your stuff works and then can

00:21:24,470 --> 00:21:30,800
interoperate but you don't have to start

00:21:27,800 --> 00:21:33,410
with that that's not our priority in

00:21:30,800 --> 00:21:36,110
individual you really want to enable new

00:21:33,410 --> 00:21:39,470
stuff not kind of blog so what's our

00:21:36,110 --> 00:21:42,110
priorities so we focus on compatibility

00:21:39,470 --> 00:21:48,050
and lots of levels so people worry about

00:21:42,110 --> 00:21:52,360
compatibility at the code level which is

00:21:48,050 --> 00:21:56,240
really mean not breaking as a project

00:21:52,360 --> 00:21:58,790
IPR which is just says allow us to do

00:21:56,240 --> 00:22:02,750
the same thing right

00:21:58,790 --> 00:22:04,760
and also just compatibility at the level

00:22:02,750 --> 00:22:09,040
of the interface so we can extend things

00:22:04,760 --> 00:22:09,040
further so

00:22:09,760 --> 00:22:15,230
code compatibility is really simple I

00:22:12,290 --> 00:22:19,130
think we have like the lightest version

00:22:15,230 --> 00:22:24,050
of all standards organizations that they

00:22:19,130 --> 00:22:27,110
have been in touch with for proposing

00:22:24,050 --> 00:22:30,080
comments so formally what you do you

00:22:27,110 --> 00:22:33,740
comment on this specification that's

00:22:30,080 --> 00:22:35,420
that's like the channels through which

00:22:33,740 --> 00:22:37,640
you support it but really that means

00:22:35,420 --> 00:22:41,000
there is a ver tie or comment mailing

00:22:37,640 --> 00:22:42,680
list and you send the patch there we

00:22:41,000 --> 00:22:45,710
really want people to structure their

00:22:42,680 --> 00:22:48,650
comments as batches outside of the

00:22:45,710 --> 00:22:51,200
public review process which happens once

00:22:48,650 --> 00:22:53,030
a while we'll get to that and then we

00:22:51,200 --> 00:22:56,960
have to accept all kind of weird stuff

00:22:53,030 --> 00:22:58,940
like Word documents but if you want to

00:22:56,960 --> 00:23:01,610
get your stuff there send us a batch

00:22:58,940 --> 00:23:04,040
it's a latter not too bad you don't need

00:23:01,610 --> 00:23:05,900
to install that huge software package to

00:23:04,040 --> 00:23:11,030
make sure people can actually generate

00:23:05,900 --> 00:23:13,520
PDFs out of that but if it's a new

00:23:11,030 --> 00:23:16,070
device the most important thing is to

00:23:13,520 --> 00:23:19,580
make sure that others don't use the same

00:23:16,070 --> 00:23:22,040
ID so we have a single driver binding to

00:23:19,580 --> 00:23:24,380
your device so it's on the patch and

00:23:22,040 --> 00:23:28,040
reserve one ID we are not short on ideas

00:23:24,380 --> 00:23:29,630
it's easy to reserve one come up with a

00:23:28,040 --> 00:23:33,080
reasonable name we'll put them on this

00:23:29,630 --> 00:23:36,950
back if it's extending an existing

00:23:33,080 --> 00:23:42,380
device it's also not too bad your is a

00:23:36,950 --> 00:23:43,910
refugee bill will want a at least a

00:23:42,380 --> 00:23:48,500
vague description of what this stuff

00:23:43,910 --> 00:23:51,950
does instead of my new project but we

00:23:48,500 --> 00:23:55,160
are not too hard to get through so hey

00:23:51,950 --> 00:23:56,990
you say this this feature is not yet

00:23:55,160 --> 00:23:59,470
described but this bit is reserved for

00:23:56,990 --> 00:24:04,910
that feature and we do it

00:23:59,470 --> 00:24:07,160
right now drivers support 64 bits we are

00:24:04,910 --> 00:24:08,960
using like 40 so we are still not short

00:24:07,160 --> 00:24:11,030
on bits and we can extend it it's all

00:24:08,960 --> 00:24:13,970
control pass so it's not really a

00:24:11,030 --> 00:24:15,830
problem to extend that further when we

00:24:13,970 --> 00:24:18,250
start running out of feature bits so far

00:24:15,830 --> 00:24:18,250
we didn't

00:24:19,330 --> 00:24:26,510
so once you do that how would do we do

00:24:22,190 --> 00:24:29,450
it in the spec git clone make sure you

00:24:26,510 --> 00:24:33,410
can build this change specification

00:24:29,450 --> 00:24:36,440
generate PDF you need to subscribe to

00:24:33,410 --> 00:24:38,720
the mailing list when you do it will ask

00:24:36,440 --> 00:24:41,210
you basically we have an honest version

00:24:38,720 --> 00:24:43,670
mode please promise you will not sue

00:24:41,210 --> 00:24:47,030
people for using this stuff you are

00:24:43,670 --> 00:24:49,730
trying to put in the spec and you say ok

00:24:47,030 --> 00:24:51,530
and then you send the patch domain list

00:24:49,730 --> 00:24:57,200
and just give people a little bit of

00:24:51,530 --> 00:25:01,190
time to comment and once every month

00:24:57,200 --> 00:25:03,110
happy with that then you can ask to vote

00:25:01,190 --> 00:25:05,540
on the ballot we right now we are using

00:25:03,110 --> 00:25:07,430
github issues to track you know

00:25:05,540 --> 00:25:10,480
outstanding things that needs to be

00:25:07,430 --> 00:25:13,190
voted on so I started asking people

00:25:10,480 --> 00:25:16,250
please please send that fix it fix this

00:25:13,190 --> 00:25:17,720
tag and then when the patch goes in it

00:25:16,250 --> 00:25:20,900
should gets closed automatically that's

00:25:17,720 --> 00:25:22,790
nice so overall let's say you get people

00:25:20,900 --> 00:25:25,340
about a week to comment and the voting

00:25:22,790 --> 00:25:28,930
takes a week was in two weeks you can

00:25:25,340 --> 00:25:28,930
put it in the spec draft

00:25:30,070 --> 00:25:40,700
so really oh I PR is just means we don't

00:25:38,500 --> 00:25:46,520
discuss things because behind closed

00:25:40,700 --> 00:25:49,490
doors we don't have calls we vote in the

00:25:46,520 --> 00:25:51,350
electronic ballot you just click a

00:25:49,490 --> 00:25:54,680
button that's it you have about a week

00:25:51,350 --> 00:25:56,750
to vote people that do want to

00:25:54,680 --> 00:25:59,330
contribute have to post their stuff on

00:25:56,750 --> 00:26:03,500
the mailing list you can add stuff and

00:25:59,330 --> 00:26:05,410
github issues we will not vote on it you

00:26:03,500 --> 00:26:08,990
can accept discussion there if you like

00:26:05,410 --> 00:26:12,730
but we only vote if there's a link in

00:26:08,990 --> 00:26:12,730
the issue to the mailing list archives

00:26:13,240 --> 00:26:18,320
so right now that we have built io

00:26:16,220 --> 00:26:26,180
memory and I'm mu that kind of in the

00:26:18,320 --> 00:26:28,640
middle of this process and input device

00:26:26,180 --> 00:26:29,480
a GPU device went through this was

00:26:28,640 --> 00:26:31,520
pretty smooth

00:26:29,480 --> 00:26:33,970
do you take a little while to beYOU is

00:26:31,520 --> 00:26:33,970
pretty big

00:26:36,280 --> 00:26:40,970
well you get into interface

00:26:38,930 --> 00:26:43,340
compatibility once your stuff is already

00:26:40,970 --> 00:26:47,090
in the stack so you don't want to break

00:26:43,340 --> 00:26:49,730
it so if you are like doing changes we

00:26:47,090 --> 00:26:52,490
tend to tell people do a new feature bit

00:26:49,730 --> 00:26:57,260
don't just start list actually quite new

00:26:52,490 --> 00:26:59,390
stuff if you want like a completely new

00:26:57,260 --> 00:27:02,660
set of functionality you can post it as

00:26:59,390 --> 00:27:04,670
a comment if it's huge

00:27:02,660 --> 00:27:07,010
you probably want don't you what to vote

00:27:04,670 --> 00:27:08,480
and your what people think a new baby or

00:27:07,010 --> 00:27:12,680
do you just trust us to do a good job

00:27:08,480 --> 00:27:14,300
alright it's not too hard if you do want

00:27:12,680 --> 00:27:16,960
to vote you need to be a member

00:27:14,300 --> 00:27:19,850
membership in Oasis doesn't cover

00:27:16,960 --> 00:27:23,900
membership fees to defray administrative

00:27:19,850 --> 00:27:30,710
costs sorry about that but we do try to

00:27:23,900 --> 00:27:32,690
be fair to comments by non-members we do

00:27:30,710 --> 00:27:34,790
ask people to try and actually document

00:27:32,690 --> 00:27:36,680
assumptions so there will be you know

00:27:34,790 --> 00:27:38,630
just a generic description in English

00:27:36,680 --> 00:27:40,490
and then we'll try to say all right now

00:27:38,630 --> 00:27:43,970
try to have a small chapter that says

00:27:40,490 --> 00:27:48,170
you must do ABC right and here's our

00:27:43,970 --> 00:27:50,570
optional feature so you maybe do CDE so

00:27:48,170 --> 00:27:53,000
stuff like that so we added the crypto

00:27:50,570 --> 00:27:55,910
device recently like that it was a bit

00:27:53,000 --> 00:27:59,140
light and and the number of keywords I'm

00:27:55,910 --> 00:28:02,420
not sure what where the line exactly is

00:27:59,140 --> 00:28:04,970
some people think the Muslim area right

00:28:02,420 --> 00:28:07,190
but at some level we do try to be

00:28:04,970 --> 00:28:09,410
practically but I think most of the

00:28:07,190 --> 00:28:12,560
Committee agrees that is better to have

00:28:09,410 --> 00:28:14,720
a specification even if it's kind of

00:28:12,560 --> 00:28:16,640
light and they you know specific

00:28:14,720 --> 00:28:18,800
requirements from the device list you do

00:28:16,640 --> 00:28:20,630
have a description there and then we can

00:28:18,800 --> 00:28:25,030
approve and integrate with a reverie

00:28:20,630 --> 00:28:25,030
release how are you one time I'm fine

00:28:26,540 --> 00:28:37,370
i minutes left okay let's try to skip

00:28:30,590 --> 00:28:40,010
some stuff so we are trying be looking

00:28:37,370 --> 00:28:43,820
at to some optimizations that are

00:28:40,010 --> 00:28:46,070
actually helpful for hardware so if you

00:28:43,820 --> 00:28:48,169
have a hardware card right now you need

00:28:46,070 --> 00:28:51,260
to go in and look at the number of

00:28:48,169 --> 00:28:53,419
available descriptors and that that's an

00:28:51,260 --> 00:28:55,880
extra round trip across the PCI bus you

00:28:53,419 --> 00:28:58,130
show you read your weight response it's

00:28:55,880 --> 00:29:00,320
not the case for hypervisors so for

00:28:58,130 --> 00:29:02,840
these devices we may be adding some

00:29:00,320 --> 00:29:05,120
extra information when you do tell the

00:29:02,840 --> 00:29:06,710
card here some new descriptors we can

00:29:05,120 --> 00:29:10,070
add extra information that says and

00:29:06,710 --> 00:29:14,030
that's how many scripters era that's one

00:29:10,070 --> 00:29:17,690
example of things we are working on some

00:29:14,030 --> 00:29:20,840
interesting optimizations so if you have

00:29:17,690 --> 00:29:22,549
a hardware card you need and some

00:29:20,840 --> 00:29:26,210
platforms pretty strong memory barriers

00:29:22,549 --> 00:29:28,400
to synchronize the way your your stuff

00:29:26,210 --> 00:29:31,490
goes into memory says that when the card

00:29:28,400 --> 00:29:34,580
goes and fetches it it actually gets a

00:29:31,490 --> 00:29:37,700
consistent image if it's a software

00:29:34,580 --> 00:29:40,610
implementation it's lighter weight on

00:29:37,700 --> 00:29:44,179
the one hand CPUs are typically kind of

00:29:40,610 --> 00:29:45,620
strongly ordered and they usually have

00:29:44,179 --> 00:29:50,780
like light of a synchronization

00:29:45,620 --> 00:29:52,940
primitives for for SNP effect also if

00:29:50,780 --> 00:29:55,070
you don't notify another CPU that

00:29:52,940 --> 00:29:59,360
something is going on it's typically an

00:29:55,070 --> 00:30:01,070
interrupt that already includes a strong

00:29:59,360 --> 00:30:08,360
barrier so we probably don't need an

00:30:01,070 --> 00:30:10,520
extra one let's give this one so some

00:30:08,360 --> 00:30:14,809
people ask what are we gonna do if I

00:30:10,520 --> 00:30:19,850
have a hardware bug so hey maybe don't

00:30:14,809 --> 00:30:22,130
and then maybe maybe you can disable

00:30:19,850 --> 00:30:24,620
that feature so I suggest people maybe

00:30:22,130 --> 00:30:26,780
you can have maybe just a bit of EEPROM

00:30:24,620 --> 00:30:29,120
on your card that just controls which

00:30:26,780 --> 00:30:33,049
features you expose just a feature

00:30:29,120 --> 00:30:34,880
bitmap and so if you find a bug in this

00:30:33,049 --> 00:30:38,000
specific feature you can maybe it weak

00:30:34,880 --> 00:30:39,059
that bit and disable that part and all

00:30:38,000 --> 00:30:43,110
right

00:30:39,059 --> 00:30:45,210
spin will do it correctly well if it's

00:30:43,110 --> 00:30:47,159
Samsung major do try to put a new spec

00:30:45,210 --> 00:30:51,090
maybe it's not about maybe it's actually

00:30:47,159 --> 00:30:53,100
feature who knows we can actually talk

00:30:51,090 --> 00:30:54,929
about like some people might want to say

00:30:53,100 --> 00:30:57,330
I'll just do my own driver

00:30:54,929 --> 00:30:59,970
I realized built i/o is not a good fit

00:30:57,330 --> 00:31:01,980
now that I put it out there so we can

00:30:59,970 --> 00:31:06,629
blacklist this specifically under sure

00:31:01,980 --> 00:31:13,049
do your own driver no problem let's keep

00:31:06,629 --> 00:31:15,869
these things it just shows like the rate

00:31:13,049 --> 00:31:18,960
of change I started with trying to list

00:31:15,869 --> 00:31:21,869
like all the stuff within the last year

00:31:18,960 --> 00:31:25,049
that's just the sundry list of huge list

00:31:21,869 --> 00:31:28,399
of small things so that's like my inbox

00:31:25,049 --> 00:31:30,629
today that's we're going on today so

00:31:28,399 --> 00:31:34,740
people are working on page painting

00:31:30,629 --> 00:31:37,379
capability in balloon GPU ads monitoring

00:31:34,740 --> 00:31:39,119
reporting support and networking people

00:31:37,379 --> 00:31:41,129
want to do more aggressive coalition of

00:31:39,119 --> 00:31:43,740
packets of different lands and actually

00:31:41,129 --> 00:31:45,330
Singh and the block device people want

00:31:43,740 --> 00:31:48,240
to implement this cart and raid zero

00:31:45,330 --> 00:31:50,700
support so that's like Monday inverter

00:31:48,240 --> 00:31:55,289
it's really busy lots of people working

00:31:50,700 --> 00:31:58,799
on this let me wrap up and just tell you

00:31:55,289 --> 00:32:00,119
about our plans so we do plan to freeze

00:31:58,799 --> 00:32:02,129
our spec for about we didn't see a

00:32:00,119 --> 00:32:03,659
reason to but people are coming and

00:32:02,129 --> 00:32:07,649
saying we are doing this hard we want to

00:32:03,659 --> 00:32:09,360
point out that our hardware device

00:32:07,649 --> 00:32:11,610
implements this specific version of the

00:32:09,360 --> 00:32:14,119
spec so to release the spec so we can

00:32:11,610 --> 00:32:18,809
tell these people what it's doing so

00:32:14,119 --> 00:32:21,210
we'll start the process basically end of

00:32:18,809 --> 00:32:23,580
month I get back from LPC do a bit of

00:32:21,210 --> 00:32:25,860
administrative stuff and we'll freeze it

00:32:23,580 --> 00:32:28,289
and we'll ask oasis to start the public

00:32:25,860 --> 00:32:31,289
review process takes them a while by end

00:32:28,289 --> 00:32:33,629
of year they should really start the the

00:32:31,289 --> 00:32:36,179
public review it needs to run for my

00:32:33,629 --> 00:32:40,889
months so we'll wrap up early next year

00:32:36,179 --> 00:32:43,350
if has happened for for several in the

00:32:40,889 --> 00:32:46,139
past we just get you know typo fixes

00:32:43,350 --> 00:32:48,419
then we can release early next year if

00:32:46,139 --> 00:32:50,639
people suddenly start complaining and we

00:32:48,419 --> 00:32:52,650
need to do lots of changes we might need

00:32:50,639 --> 00:32:54,420
to another round of

00:32:52,650 --> 00:32:57,680
they give you that next one might be

00:32:54,420 --> 00:32:57,680
short it's just a bug fix

00:32:58,130 --> 00:33:03,030
so to summarize right you have network

00:33:01,110 --> 00:33:07,170
effects we have unique properties that

00:33:03,030 --> 00:33:09,870
makes compatibility easy with vertigo so

00:33:07,170 --> 00:33:13,410
there is a large ecosystem that you can

00:33:09,870 --> 00:33:18,330
join it's easy to extend and a lot of

00:33:13,410 --> 00:33:30,950
going on so join the fun thank you you

00:33:18,330 --> 00:33:30,950
have time for questions yes

00:33:51,970 --> 00:34:00,149
thank you the the future negotiation

00:33:57,009 --> 00:34:02,710
thing how well does it deal with

00:34:00,149 --> 00:34:05,080
renegotiation at runtime and the typical

00:34:02,710 --> 00:34:06,610
cases although your firmware driver

00:34:05,080 --> 00:34:08,980
doesn't have the same features and your

00:34:06,610 --> 00:34:12,730
kernel driver or you might be exact from

00:34:08,980 --> 00:34:16,240
one kernel to another etc so right now

00:34:12,730 --> 00:34:18,159
it's pretty straightforward you do all

00:34:16,240 --> 00:34:20,169
the feature negotiation you say peace

00:34:18,159 --> 00:34:22,000
negotiation done you can start using the

00:34:20,169 --> 00:34:24,220
device you want to do it again you do a

00:34:22,000 --> 00:34:26,560
reset there's a special register to do

00:34:24,220 --> 00:34:28,089
this light wave reset that just makes

00:34:26,560 --> 00:34:30,639
you restart the fish negotiation some

00:34:28,089 --> 00:34:33,460
people think that even that is too heavy

00:34:30,639 --> 00:34:36,490
weight and want to do it dynamically no

00:34:33,460 --> 00:34:39,210
one proposed that in the spec it is that

00:34:36,490 --> 00:34:39,210
it shouldn't be too hard

00:34:44,990 --> 00:34:50,220
you mentioned the implications of

00:34:47,040 --> 00:34:51,149
barriers for hovering promote hardware

00:34:50,220 --> 00:34:55,549
implementations

00:34:51,149 --> 00:34:58,200
what about cache coherency platforms so

00:34:55,549 --> 00:35:01,099
right so we have it's just there's old

00:34:58,200 --> 00:35:04,980
problem so I didn't mention that but yes

00:35:01,099 --> 00:35:07,020
we have so they the trick is that cash

00:35:04,980 --> 00:35:12,420
currency was in Linux is solved by the

00:35:07,020 --> 00:35:16,109
DMA API and so and we did need to add

00:35:12,420 --> 00:35:18,240
ability toward to go through DMA API or

00:35:16,109 --> 00:35:22,109
not goes to redeem a API if you are just

00:35:18,240 --> 00:35:23,970
talking to another CPU in the past so we

00:35:22,109 --> 00:35:25,740
already have a feature flag that tells

00:35:23,970 --> 00:35:29,190
you whether you're going through Team

00:35:25,740 --> 00:35:31,579
API not that includes a recurring

00:35:29,190 --> 00:35:31,579
setting

00:35:41,240 --> 00:35:48,039
thank you very much thank you

00:35:43,730 --> 00:35:48,039

YouTube URL: https://www.youtube.com/watch?v=QNUX3AVBaG0


