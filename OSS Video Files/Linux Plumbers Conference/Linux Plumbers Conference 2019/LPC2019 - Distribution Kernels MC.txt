Title: LPC2019 - Distribution Kernels MC
Publication date: 2019-09-17
Playlist: Linux Plumbers Conference 2019
Description: 
	Distribution Kernels MC

The upstream kernel community is where active kernel development happens but the majority of kernels deployed do not come directly from upstream but distributions. "Distribution" here can refer to a traditional Linux distribution such as Debian or Gentoo but also Android or a custom cloud distribution. The goal of this Microconference is to discuss common problems that arise when trying to maintain a kernel.

Expected topics
Backporting kernel patches and how to make it easier
Consuming the stable kernel trees
Automated testing for distributions
Managing ABIs
Distribution packaging/infrastructure
Cross distribution bug reporting and tracking
Common distribution kconfig
Distribution default settings
Which patch sets are distributions carrying?
More to be added based on CfP for this microconference

"Distribution kernel" is used in a very broad manner. If you maintain a kernel tree for use by others, we welcome you to come and share your experiences.

If you are interested in participating in this microconference and have topics to propose, please use the CfP process. More topics will be added based on CfP for this microconference.

MC lead
Laura Abbott labbott@redhat.com
Captions: 
	00:00:01,770 --> 00:00:04,960
- All right, I think we are at 10:00 a.m..

00:00:04,960 --> 00:00:07,130
So I'm gonna go ahead and just get started.

00:00:07,130 --> 00:00:07,963
Good morning everyone.

00:00:07,963 --> 00:00:10,490
Thank you for coming to the Distributions Microconference

00:00:10,490 --> 00:00:11,323
this morning.

00:00:11,323 --> 00:00:13,060
For those who don't know me, my name is Laura Abbott.

00:00:13,060 --> 00:00:15,580
I am the organizer of this, and before we started

00:00:15,580 --> 00:00:18,010
with the actual content, I just have a few quick slides

00:00:18,010 --> 00:00:19,660
to go over for plumbers.

00:00:22,856 --> 00:00:26,500
First, we would not be anything without our sponsors.

00:00:26,500 --> 00:00:28,240
So thank you to all the companies up here

00:00:28,240 --> 00:00:29,610
who have taken the time to give us money

00:00:29,610 --> 00:00:31,079
so we could have amenities

00:00:31,079 --> 00:00:35,610
such as A/V recording, and all the snacks and everything,

00:00:35,610 --> 00:00:36,960
and all the evening events.

00:00:40,230 --> 00:00:42,086
This is just some useful information.

00:00:42,086 --> 00:00:43,260
If you've ever been to

00:00:43,260 --> 00:00:44,850
a Linux Foundation event before,

00:00:44,850 --> 00:00:46,950
wifi is the same as always.

00:00:46,950 --> 00:00:50,710
LF events, same password, Linux1991.

00:00:50,710 --> 00:00:52,540
We do have a code of conduct just here

00:00:52,540 --> 00:00:54,600
to make sure everyone has a good time.

00:00:54,600 --> 00:00:56,730
Please review it if you have any questions.

00:00:57,580 --> 00:00:58,413
If you have any,

00:00:58,413 --> 00:01:01,310
the information up there is about their,

00:01:01,310 --> 00:01:03,575
who to contact if you have any issues.

00:01:03,575 --> 00:01:05,040
Please get in contact with a member

00:01:05,040 --> 00:01:06,270
of the Linux Foundation staff,

00:01:06,270 --> 00:01:07,900
or anyone else who you need.

00:01:10,190 --> 00:01:12,560
Okay, and as far as actual content goes,

00:01:12,560 --> 00:01:14,300
we do have a schedule online.

00:01:14,300 --> 00:01:15,900
This is one of multiple tracks

00:01:15,900 --> 00:01:17,650
that we are going to be going over,

00:01:19,260 --> 00:01:21,880
today, morning sessions start at 10 AM,

00:01:21,880 --> 00:01:22,713
as you notice today.

00:01:22,713 --> 00:01:24,970
This'll be the same thing every day.

00:01:24,970 --> 00:01:27,720
Lunch will be available in the restaurant ground floor,

00:01:28,772 --> 00:01:30,260
at 11:30 to 3:00 p.m.,

00:01:30,260 --> 00:01:33,090
and there are a couple of evening events.

00:01:33,090 --> 00:01:36,070
There is a welcome reception tonight.

00:01:36,070 --> 00:01:37,080
Tuesday night you're on your own,

00:01:37,080 --> 00:01:39,080
and then Wednesday is our closing party.

00:01:40,900 --> 00:01:42,230
Okay, track owners.

00:01:42,230 --> 00:01:43,110
This is me.

00:01:43,110 --> 00:01:44,200
I am one of the track owners.

00:01:44,200 --> 00:01:46,020
I am running this microconference.

00:01:47,540 --> 00:01:50,750
And for anyone else who is presenting today,

00:01:50,750 --> 00:01:53,820
thank you so much for taking the time to present a topic.

00:01:53,820 --> 00:01:57,000
It's really the topics that make plumbers what it is,

00:01:57,000 --> 00:02:00,610
and without contributions, we wouldn't be our topic.

00:02:00,610 --> 00:02:02,268
And just a reminder to please make sure,

00:02:02,268 --> 00:02:04,260
you're going to be uploading your slides

00:02:04,260 --> 00:02:06,590
to the LPC website.

00:02:06,590 --> 00:02:07,933
There are Etherpads available.

00:02:07,933 --> 00:02:10,590
I am a little bit behind with things

00:02:11,683 --> 00:02:13,722
of distributing out the Etherpad links.

00:02:13,722 --> 00:02:16,410
Would anyone be willing to take Etherpad notes?

00:02:20,779 --> 00:02:22,300
(chuckling)

00:02:22,300 --> 00:02:24,400
Don't all jump up and down at once.

00:02:24,400 --> 00:02:28,550
Okay, well I'll go ahead and work on the Etherpad notes,

00:02:28,550 --> 00:02:31,250
and as you noted, things are being recorded,

00:02:31,250 --> 00:02:33,920
so videos will be available after the conference.

00:02:35,070 --> 00:02:37,929
And then if you do have any ideas for last minute BOF's,

00:02:37,929 --> 00:02:39,350
please get in contact with me

00:02:39,350 --> 00:02:41,400
or one of the other event committees,

00:02:41,400 --> 00:02:43,180
and we'll see if we can accommodate you.

00:02:43,180 --> 00:02:44,630
This is mostly a chance to get together

00:02:44,630 --> 00:02:45,730
in a last-minute room.

00:02:46,770 --> 00:02:51,070
Okay, and then any other questions or complaints.

00:02:51,070 --> 00:02:52,314
These are the people you should talk to

00:02:52,314 --> 00:02:54,640
for any and all complaints,

00:02:54,640 --> 00:02:57,470
or how excited you are to be here at Linux Plumbers.

00:02:57,470 --> 00:02:58,720
I'm on one of them.

00:02:58,720 --> 00:03:01,130
You should make sure you give everyone else,

00:03:01,130 --> 00:03:02,880
let them know your opinions as well.

00:03:02,880 --> 00:03:05,610
So, okay, are there any other logistical questions

00:03:05,610 --> 00:03:06,870
before we get started?

00:03:08,630 --> 00:03:12,350
Also just as a, with my Linux Foundation Pad member had on,

00:03:12,350 --> 00:03:13,470
you should've received an email

00:03:13,470 --> 00:03:15,920
to vote for this year's technical advisory board.

00:03:15,920 --> 00:03:17,260
Please take the time to do that.

00:03:17,260 --> 00:03:19,970
This is important for a lot of different reasons.

00:03:19,970 --> 00:03:22,100
Okay, okay, I'm done talking,

00:03:22,100 --> 00:03:25,050
and now we are going to get to the actual content.

00:03:25,050 --> 00:03:27,620
So, Bruce, would you like to come up and get started?

00:03:31,600 --> 00:03:32,650
Yes, thank you, Kate.

00:03:48,263 --> 00:03:49,232
They are?

00:03:49,232 --> 00:03:50,650
They are?

00:03:50,650 --> 00:03:51,483
They are?

00:03:51,483 --> 00:03:52,790
Okay, this one is on.

00:03:52,790 --> 00:03:54,650
This one doesn't, okay, they both are on.

00:03:54,650 --> 00:03:57,580
Okay, so for those who haven't seen formers before,

00:03:57,580 --> 00:03:59,930
these are our microphones for the audience.

00:03:59,930 --> 00:04:03,200
They are throwable, throwable microphones.

00:04:03,200 --> 00:04:05,150
Please be gentle when throwing them,

00:04:05,150 --> 00:04:07,334
but you can gently toss to something.

00:04:07,334 --> 00:04:09,010
Hey, Justin, you wanna catch?

00:04:11,760 --> 00:04:12,810
That's how they work.

00:04:13,850 --> 00:04:15,119
Any also, just a reminder

00:04:15,119 --> 00:04:17,870
that the purpose of Plumbers is discussion,

00:04:17,870 --> 00:04:19,460
so I'd like to encourage everyone

00:04:19,460 --> 00:04:21,183
to make sure you're asking questions

00:04:21,183 --> 00:04:24,040
and wanting to get engaged,

00:04:24,040 --> 00:04:26,078
'cause we really wanna make this the best possible

00:04:26,078 --> 00:04:27,380
option for everyone.

00:04:59,430 --> 00:05:00,263
- Okay.

00:05:03,190 --> 00:05:05,140
All right, is that, okay it is working.

00:05:06,911 --> 00:05:10,510
Yeah I got the first slot, so we'll see how it goes.

00:05:12,510 --> 00:05:15,380
I was, well is this,

00:05:15,380 --> 00:05:16,980
let's move it down a little bit.

00:05:18,570 --> 00:05:20,020
There, that's still picking me up?

00:05:20,020 --> 00:05:20,853
Okay, good.

00:05:21,820 --> 00:05:26,580
Yeah I was going for the longest title as well (laughs),

00:05:28,765 --> 00:05:29,741
as I could.

00:05:29,741 --> 00:05:30,574
Well I actually didn't know it was going

00:05:30,574 --> 00:05:31,800
to show up on the schedule like that,

00:05:31,800 --> 00:05:35,630
or I probably would have tried to shorten that a little bit,

00:05:35,630 --> 00:05:40,540
but on the first one I dropped it here, it says,

00:05:40,540 --> 00:05:42,710
upstream first, and then it brought all the stuff

00:05:42,710 --> 00:05:44,860
about the tools of juggling fixes and things,

00:05:44,860 --> 00:05:47,570
and then of course if everything was upstream first,

00:05:47,570 --> 00:05:50,330
my talk would be done right now, and I could sit down.

00:05:50,330 --> 00:05:53,590
So that's why I put that in the title,

00:05:53,590 --> 00:05:57,740
so what I'm, sort of the problem I wanna talk about is,

00:05:57,740 --> 00:06:01,540
I've been maintaining different product

00:06:01,540 --> 00:06:04,890
and distro kernels since 2005.

00:06:04,890 --> 00:06:07,490
I've done it from the point of an operating system vendor,

00:06:07,490 --> 00:06:09,000
embedded at Wind River.

00:06:09,000 --> 00:06:11,690
I've been maintaining the Yocto Project reference kernels

00:06:11,690 --> 00:06:15,270
since the Yocto Project kind of started working

00:06:15,270 --> 00:06:17,760
with open embedded, and now I'm with,

00:06:17,760 --> 00:06:19,830
as of the end of January, I'm with Xilinx,

00:06:19,830 --> 00:06:21,210
so that's a semiconductor.

00:06:21,210 --> 00:06:24,960
So I've now seen pretty much everybody's point of view

00:06:24,960 --> 00:06:27,460
on kernel maintenance, so.

00:06:27,460 --> 00:06:29,790
And, you know, I have a development background,

00:06:29,790 --> 00:06:31,350
and I still do that most of the time,

00:06:31,350 --> 00:06:35,330
so it's sort of, 30% maintainer and 70% developer,

00:06:35,330 --> 00:06:38,370
so I have to not only maintain kernels

00:06:38,370 --> 00:06:39,770
that are built and distributed,

00:06:39,770 --> 00:06:43,850
but they have to be able to be, support people

00:06:43,850 --> 00:06:45,260
doing development with them, so,

00:06:45,260 --> 00:06:47,160
that's a different angle on potentially

00:06:47,160 --> 00:06:48,440
about the maintenance.

00:06:48,440 --> 00:06:52,870
So what I'm, sort of the problem statement

00:06:52,870 --> 00:06:55,120
and the thing that I'm looking to talk about,

00:06:55,120 --> 00:06:57,520
in particular, is that, it's about tools

00:06:57,520 --> 00:07:00,030
and workflows and you know, is everybody else

00:07:00,030 --> 00:07:01,466
just doing in through Brute Force,

00:07:01,466 --> 00:07:03,844
sort of like (laughs), like I am,

00:07:03,844 --> 00:07:05,550
or is there anything we're missing,

00:07:05,550 --> 00:07:09,280
or is there, you know, anything that can be done,

00:07:09,280 --> 00:07:11,019
so, you know, what I have to do,

00:07:11,019 --> 00:07:14,474
and what I support when maintaining the kernel

00:07:14,474 --> 00:07:17,480
for Yocto in particular and Wind River before,

00:07:17,480 --> 00:07:19,769
a little bit less with Xilinx is,

00:07:19,769 --> 00:07:23,730
you know, there's multiple active kernel versions,

00:07:23,730 --> 00:07:26,430
sort of in a branch, in a release.

00:07:26,430 --> 00:07:28,670
So it's a, and there's multiple

00:07:28,670 --> 00:07:31,580
in any given master active branch,

00:07:31,580 --> 00:07:34,000
and then there's three or more old versions

00:07:34,000 --> 00:07:37,000
of the release thing so, you know, of varying length

00:07:37,000 --> 00:07:39,507
of supporting, so it's multiple kernel versions,

00:07:39,507 --> 00:07:42,060
not all of them (laughs), but many.

00:07:43,100 --> 00:07:45,340
It's not just a single architecture that we're supporting,

00:07:45,340 --> 00:07:47,850
so it's, especially at Yocto, it's you know,

00:07:47,850 --> 00:07:50,330
six, seven and counting architectures

00:07:50,330 --> 00:07:53,870
that we have to make sure are supported.

00:07:53,870 --> 00:07:57,040
Many, many different boards, you know they have

00:07:57,040 --> 00:07:59,366
to have development and extension capabilities,

00:07:59,366 --> 00:08:01,490
and that we're, you know, depending

00:08:01,490 --> 00:08:03,650
on the version of the kernel, what's going on,

00:08:03,650 --> 00:08:05,180
we have thousands.

00:08:05,180 --> 00:08:07,180
I think one point at Wind River,

00:08:07,180 --> 00:08:09,240
it was 10,000 different commits,

00:08:09,240 --> 00:08:11,650
that was a delta from the mainline kernel.

00:08:11,650 --> 00:08:14,380
It's not as bad now, but, you know,

00:08:14,380 --> 00:08:17,470
so there's features from the various boards of semis,

00:08:17,470 --> 00:08:18,910
there's out of tree functionality,

00:08:18,910 --> 00:08:21,650
if you say you're supporting preempt RT,

00:08:21,650 --> 00:08:22,920
or AUFS or something like that,

00:08:22,920 --> 00:08:24,860
and then in-house development.

00:08:24,860 --> 00:08:29,020
And that, also the flexibility support,

00:08:29,020 --> 00:08:30,380
fundamentally different features,

00:08:30,380 --> 00:08:31,610
so I've had to support everything

00:08:31,610 --> 00:08:35,990
from small footprint builds, realtime extensions,

00:08:35,990 --> 00:08:38,310
carrier-grade Linux, industrial containers,

00:08:38,310 --> 00:08:41,074
virtually all in the same kernel tree.

00:08:41,074 --> 00:08:43,290
And of course, I threw this in,

00:08:43,290 --> 00:08:46,560
the problem is a small team, 'cause usually, at given times,

00:08:46,560 --> 00:08:48,852
I am the whole team, doing this,

00:08:48,852 --> 00:08:53,650
both the maintainer activities, and the build

00:08:53,650 --> 00:08:55,020
and supporting the kernel.

00:08:55,020 --> 00:08:58,674
So that's the, sort of the scope of the problem

00:08:58,674 --> 00:09:00,970
that I have to deal with.

00:09:02,110 --> 00:09:04,400
And it's sort of my day today.

00:09:05,500 --> 00:09:08,460
And the, I guess this might be backwards,

00:09:08,460 --> 00:09:11,670
but the goals of the intended solution to that problem

00:09:11,670 --> 00:09:15,623
is that, the changes are easily visible

00:09:15,623 --> 00:09:18,759
in the kernel tree when you're building it,

00:09:18,759 --> 00:09:20,400
or when somebody else is building it,

00:09:20,400 --> 00:09:22,920
if they're, if they need to extend it,

00:09:22,920 --> 00:09:25,242
so these changes are tracked over time,

00:09:25,242 --> 00:09:28,230
and they're visible, and that patches and features

00:09:28,230 --> 00:09:30,730
are carried forward continually

00:09:30,730 --> 00:09:34,020
with at least two releases a year,

00:09:34,020 --> 00:09:36,180
two formal releases, and what I mean

00:09:36,180 --> 00:09:38,680
by that visible changes, is they're not buried

00:09:40,390 --> 00:09:44,150
through 52 Octopus merge commits way down

00:09:44,150 --> 00:09:45,380
at the bottom of the branch, and you can't

00:09:45,380 --> 00:09:46,670
actually easy dig out what's there.

00:09:46,670 --> 00:09:48,350
So there needs to be a way for people

00:09:48,350 --> 00:09:52,030
to quickly see the patch queue, not just the changes

00:09:52,030 --> 00:09:52,863
in the tree.

00:09:54,480 --> 00:09:57,959
Any sort of workflow should encourage open development,

00:09:57,959 --> 00:10:00,297
and the mainlining of changes.

00:10:00,297 --> 00:10:02,340
There has to be a common feature

00:10:02,340 --> 00:10:03,700
set across these different kernels,

00:10:03,700 --> 00:10:06,470
and a common configuration and like,

00:10:06,470 --> 00:10:07,810
I'll talk a little bit more about that.

00:10:07,810 --> 00:10:10,050
That's where, in Yocto, we use

00:10:10,050 --> 00:10:12,780
these kernel configuration fragments,

00:10:12,780 --> 00:10:16,600
rather than 52 or more different def configs

00:10:16,600 --> 00:10:17,810
that we have to juggle.

00:10:19,720 --> 00:10:21,370
You know, in the one that I like

00:10:21,370 --> 00:10:23,570
is development and end users are equally supported.

00:10:23,570 --> 00:10:24,780
If somebody just wanna boot it

00:10:24,780 --> 00:10:27,330
or somebody actually need to do driver development,

00:10:29,090 --> 00:10:32,400
and not developing some sort of custom set of tools

00:10:32,400 --> 00:10:34,050
or work flows, right it needs to,

00:10:36,160 --> 00:10:38,600
trying to change somebody's kernel workflow

00:10:38,600 --> 00:10:41,310
is nearly impossible, and it's not (laughs),

00:10:41,310 --> 00:10:43,300
I might as well tell you to use VI or EMAX,

00:10:43,300 --> 00:10:45,315
and you know, make you choose.

00:10:45,315 --> 00:10:48,020
But, so you know, standard workflows and tools

00:10:48,020 --> 00:10:49,580
need to be supported, and write

00:10:49,580 --> 00:10:51,790
as few custom things as possible.

00:10:51,790 --> 00:10:53,164
In all that, like I say, you have to have

00:10:53,164 --> 00:10:54,990
a predictable release keen.

00:10:54,990 --> 00:10:57,170
So that's the goals of any,

00:10:58,480 --> 00:11:01,620
any solution to that of that problem set.

00:11:05,670 --> 00:11:07,600
So my observations are you know,

00:11:07,600 --> 00:11:08,433
I've been doing this for a while,

00:11:08,433 --> 00:11:12,610
and everybody gets head down, working on their own project

00:11:12,610 --> 00:11:13,860
and releasing the kernel and going through

00:11:13,860 --> 00:11:15,520
their own problems, and that there's

00:11:15,520 --> 00:11:18,634
a lot of common goals with all of the various kernels,

00:11:18,634 --> 00:11:23,230
but very few similar (laughs), but identical,

00:11:23,230 --> 00:11:26,880
or even similar tools, workflows or maintenance models.

00:11:26,880 --> 00:11:28,610
The plumbing is the exception, right.

00:11:28,610 --> 00:11:32,220
Most people are using some set of low-level tools

00:11:32,220 --> 00:11:34,040
that are the same, but not really the workflows

00:11:34,040 --> 00:11:35,850
and how they manage it, how they release it,

00:11:35,850 --> 00:11:39,230
how it's tested and debugged, and released.

00:11:41,230 --> 00:11:43,210
You know, there's a lot of maybe, little known,

00:11:43,210 --> 00:11:44,380
and that's sort of one of my goals.

00:11:44,380 --> 00:11:46,390
The little known tools or frameworks.

00:11:46,390 --> 00:11:49,169
Maybe I'll find something that'll make my life easier,

00:11:49,169 --> 00:11:52,240
going from this presentation onwards.

00:11:53,120 --> 00:11:54,844
And everybody's doing very similar work,

00:11:54,844 --> 00:11:57,390
lots of duplicated effort, how many people

00:11:57,390 --> 00:11:59,600
had to back work specter fixes for,

00:12:01,280 --> 00:12:05,420
12 ancient kernels and apply CVE's and do stable updates

00:12:05,420 --> 00:12:08,350
and release them and build them, right, so.

00:12:08,350 --> 00:12:09,630
You know, but there's still,

00:12:09,630 --> 00:12:10,930
but is it really is hard

00:12:10,930 --> 00:12:14,960
to collaborate and reuse those queues.

00:12:17,380 --> 00:12:21,640
I find supporting the developer, the distribution build,

00:12:21,640 --> 00:12:24,110
and the end user, can be challenging

00:12:24,110 --> 00:12:28,150
because they have a different view of how,

00:12:28,150 --> 00:12:32,900
in the Octo world, we ship it as a getTree, and we had,

00:12:32,900 --> 00:12:37,071
I had a different Linux Yocto per release kernel version,

00:12:37,071 --> 00:12:39,860
and that was fine for the distro builds,

00:12:39,860 --> 00:12:41,820
but the people that were building,

00:12:41,820 --> 00:12:44,330
or we in Yocto, were complaining about

00:12:44,330 --> 00:12:46,430
having to clone the whole kernel

00:12:46,430 --> 00:12:48,240
to get repository multiple times

00:12:48,240 --> 00:12:49,710
and the disk space it was taking up, right.

00:12:49,710 --> 00:12:52,830
So that's the developer and the end user's workflow.

00:12:52,830 --> 00:12:54,180
Didn't match the distro build.

00:12:54,180 --> 00:12:55,810
We couldn't care less if we were cloning

00:12:55,810 --> 00:12:58,610
another copy of the kernel and building it, releasing it,

00:12:58,610 --> 00:13:02,670
so, we had to adjust the trees and how it was maintained

00:13:02,670 --> 00:13:03,920
to meet that requirement.

00:13:05,952 --> 00:13:09,270
And I'm gonna say even a small amount of overhead in your,

00:13:09,270 --> 00:13:11,520
how your kernel's used or how it's built,

00:13:11,520 --> 00:13:13,410
turns away some users right,

00:13:13,410 --> 00:13:16,361
like even if you wrap the kernel build

00:13:16,361 --> 00:13:19,840
in a bit bait call, in sort of my world,

00:13:19,840 --> 00:13:21,630
just the time that it takes to parse

00:13:21,630 --> 00:13:24,390
and maybe start building (laughs), and find your source,

00:13:24,390 --> 00:13:28,240
it'll turn some users away 'cause it's much easier

00:13:28,240 --> 00:13:29,964
just to call on the getTree CD,

00:13:29,964 --> 00:13:32,230
and then, and do your normal work flow.

00:13:32,230 --> 00:13:34,750
So I found even the smallest deviation

00:13:34,750 --> 00:13:37,760
in the amount of work head will turn some users away,

00:13:37,760 --> 00:13:42,090
and timing your release dates,

00:13:42,090 --> 00:13:46,050
customers' expectations, and timing LTS kernels,

00:13:46,050 --> 00:13:47,860
is, you know, interesting.

00:13:49,300 --> 00:13:50,260
I've now missed,

00:13:52,360 --> 00:13:54,030
Yocto does a fall release every year,

00:13:54,030 --> 00:13:56,860
so I've now missed basically every LTS kernel,

00:13:56,860 --> 00:13:58,910
and if the fall release that most of the,

00:13:59,820 --> 00:14:02,220
operating system vendors do their one year,

00:14:02,220 --> 00:14:04,100
their yearly cadence release on,

00:14:04,100 --> 00:14:07,600
so we've now missed the LTS kernel for four year running,

00:14:07,600 --> 00:14:09,600
in our fall release, which means I have,

00:14:10,730 --> 00:14:12,450
many more kernel versions to juggle

00:14:12,450 --> 00:14:15,000
because I have to do a stutter step in the spring

00:14:15,000 --> 00:14:16,597
when I'm releasing again, and nobody's gonna,

00:14:16,597 --> 00:14:19,260
it's very complicated, so.

00:14:19,260 --> 00:14:21,800
Those are my observations that all,

00:14:21,800 --> 00:14:25,970
trying to time all of the stuff is almost impossible.

00:14:29,530 --> 00:14:31,760
I should, I don't know, I'm just I'm kind

00:14:31,760 --> 00:14:33,160
of presenting here without--

00:14:34,030 --> 00:14:34,940
- Yeah I was just gonna say,

00:14:34,940 --> 00:14:36,670
so we do have a little bit of time.

00:14:36,670 --> 00:14:37,503
- Yeah.

00:14:37,503 --> 00:14:38,630
- So I figured maybe this is a good point

00:14:38,630 --> 00:14:40,198
for questions, comments, before you know,

00:14:40,198 --> 00:14:42,600
we get into solutions, so anyone else out there?

00:14:43,572 --> 00:14:46,660
- I got a question, though.

00:14:46,660 --> 00:14:49,030
You're focusing on just the kernel management

00:14:49,030 --> 00:14:51,240
and the kernel release problems with Yocto.

00:14:52,440 --> 00:14:53,980
Am I to understand that you're perfectly happy

00:14:53,980 --> 00:14:55,729
with the way the user space is monthly maintained

00:14:55,729 --> 00:14:58,820
and pokey and subsequent releases?

00:15:00,490 --> 00:15:02,570
- No because I'm the guy that also has to,

00:15:02,570 --> 00:15:05,590
when I upgrade the kernel, I have to make sure all of the,

00:15:05,590 --> 00:15:08,120
even the tightly coupled user space packages work,

00:15:08,120 --> 00:15:10,020
which means I have fight through perf,

00:15:11,190 --> 00:15:12,040
'cause we're running ahead.

00:15:12,040 --> 00:15:13,270
We're usually doing the development,

00:15:13,270 --> 00:15:14,708
Anyway, perf system tap LTTNG,

00:15:14,708 --> 00:15:16,940
and all the different, ugh.

00:15:16,940 --> 00:15:19,500
And I also maintain the virtualization packages,

00:15:19,500 --> 00:15:21,200
which means I then have to battle,

00:15:22,490 --> 00:15:24,960
Docker and runC and all of those things into,

00:15:25,841 --> 00:15:29,990
and they're all very unsychronized if you will,

00:15:29,990 --> 00:15:31,700
so it's not, there's not.

00:15:31,700 --> 00:15:32,800
- So the only point is I want to make is,

00:15:32,800 --> 00:15:34,610
you know, kernel is a problem,

00:15:36,020 --> 00:15:39,060
and user-level packages, they're different in the kernel,

00:15:39,060 --> 00:15:40,340
of course is the problem.

00:15:40,340 --> 00:15:42,690
And to me, the fact that the Octo is releasing,

00:15:44,030 --> 00:15:48,000
very frequently, the user-space packages,

00:15:49,062 --> 00:15:51,860
and not really maintaining a stable version of them

00:15:51,860 --> 00:15:54,080
for any reasonable period of time,

00:15:55,070 --> 00:15:56,950
makes it really difficult for folks

00:15:56,950 --> 00:15:59,760
to use that as a base, unless we take on

00:15:59,760 --> 00:16:03,040
the responsibility of, you know, maintaining,

00:16:03,040 --> 00:16:05,160
what are we snapped to, for some period of time.

00:16:05,160 --> 00:16:08,070
I just wanted to get your thoughts on, you know,

00:16:08,070 --> 00:16:12,006
the liability of using Yocto for anything more than

00:16:12,006 --> 00:16:14,510
the embedded space where you build something

00:16:14,510 --> 00:16:16,820
and throw it away, not worry about it,

00:16:16,820 --> 00:16:19,880
and really maintain it, as most distros board,

00:16:21,040 --> 00:16:23,220
for some reasonable bit of time.

00:16:23,220 --> 00:16:24,440
- You know that's always been the model

00:16:24,440 --> 00:16:26,390
with open embedded in Yocto,

00:16:26,390 --> 00:16:28,190
that you get the year from the community,

00:16:28,190 --> 00:16:31,310
and then it's pretty much either your own team,

00:16:31,310 --> 00:16:33,360
or you have to get it, get the OSB's

00:16:33,360 --> 00:16:35,340
to do that longer-term maintenance.

00:16:35,340 --> 00:16:38,280
It's possible, I now they talked about it in ELC

00:16:38,280 --> 00:16:39,430
in San Diego, I wasn't there,

00:16:39,430 --> 00:16:41,670
and we'll probably talk about that same topic again,

00:16:41,670 --> 00:16:43,830
at ELCE in Lyon.

00:16:43,830 --> 00:16:45,530
- We hear Microsoft was really interested

00:16:45,530 --> 00:16:47,940
in seeing what we can do help to help,

00:16:47,940 --> 00:16:49,074
work with the community to make sure

00:16:49,074 --> 00:16:51,760
that in fact, Yocto could be a basis for.

00:16:52,640 --> 00:16:54,510
- We have for that, for the kernel, the user space,

00:16:54,510 --> 00:16:56,480
it's not that there's an unwillingness.

00:16:56,480 --> 00:16:58,460
It's just, it's like everything.

00:16:58,460 --> 00:17:00,170
It's a resource thing.

00:17:00,170 --> 00:17:01,600
It's all possible if people like,

00:17:01,600 --> 00:17:02,620
they wanna do the work.

00:17:03,647 --> 00:17:05,135
- [Man In Background] Okay, thank you.

00:17:05,135 --> 00:17:05,968
- [Man in Audience] So if you go back

00:17:05,968 --> 00:17:09,343
to your previous slide, couple of questions, one is--

00:17:09,343 --> 00:17:10,911
(feedback blares)

00:17:10,911 --> 00:17:12,280
- That wasn't me, I don't think (laughs).

00:17:12,280 --> 00:17:13,130
- [Man in Audience] One, as you say,

00:17:13,130 --> 00:17:14,510
everybody is doing similar work,

00:17:14,510 --> 00:17:15,360
and we get an effort.

00:17:15,360 --> 00:17:18,330
Is that across different kernel versions?

00:17:18,330 --> 00:17:19,440
I mean I'm just trying to figure out,

00:17:19,440 --> 00:17:20,740
or is it, you know--

00:17:20,740 --> 00:17:22,340
- It's even the same kernel version,

00:17:22,340 --> 00:17:23,640
so it's-- - [Man in Audience] So where

00:17:23,640 --> 00:17:25,630
is the challenge in collaborating,

00:17:25,630 --> 00:17:27,580
and is it also the open-source community,

00:17:27,580 --> 00:17:29,790
or just within the Yocto project?

00:17:29,790 --> 00:17:31,670
- And like, you know, it's like I maintain,

00:17:31,670 --> 00:17:33,800
say I do the, I'm doing the five, two kernel,

00:17:33,800 --> 00:17:36,500
I just, we're just releasing the 5.2 kernel,

00:17:36,500 --> 00:17:39,198
and the collaboration point is everybody will take

00:17:39,198 --> 00:17:42,930
the upstream, Greg's stable,

00:17:42,930 --> 00:17:44,500
so that queue is pretty obvious, right.

00:17:44,500 --> 00:17:46,730
It's sort of a collaboration point at that level.

00:17:46,730 --> 00:17:50,510
But, if we had a system tap blog,

00:17:50,510 --> 00:17:53,040
and you know, I patched, our kernel,

00:17:53,040 --> 00:17:56,180
but, you know, Debbie and her gen two, or somebody,

00:17:56,180 --> 00:17:58,389
they would have a very similar, probably patch

00:17:58,389 --> 00:18:02,590
running in their kernels, and there's no obvious way,

00:18:02,590 --> 00:18:05,060
outside of knowing to go peek at what the other kernels

00:18:05,060 --> 00:18:07,540
are doing, and find their queue and see if they fixed it,

00:18:07,540 --> 00:18:08,580
or Google helping you out.

00:18:08,580 --> 00:18:09,750
You search and you find it,

00:18:09,750 --> 00:18:12,250
so there's no, I've never found an effective way

00:18:12,250 --> 00:18:14,680
outside of going and pulling, you know,

00:18:14,680 --> 00:18:15,850
the rest of the kernels.

00:18:15,850 --> 00:18:17,420
When you're working right at the tip and finding--

00:18:17,420 --> 00:18:19,000
= [Man in Audience] Why are those patches

00:18:19,000 --> 00:18:20,790
not making it to the stable tree?

00:18:20,790 --> 00:18:22,060
- Well they will, but--

00:18:22,060 --> 00:18:23,010
- [Man in Audience] I mean, why not you

00:18:23,010 --> 00:18:25,140
the one sending the patches, I guess?

00:18:25,140 --> 00:18:28,510
- We do, normally, but it takes quite a while

00:18:28,510 --> 00:18:30,640
for them to loop around, especially if you're on a,

00:18:30,640 --> 00:18:33,980
so the problem is we have a release window

00:18:33,980 --> 00:18:35,520
that happens now, and everybody else does,

00:18:35,520 --> 00:18:37,210
and they take a little while to trickle around,

00:18:37,210 --> 00:18:39,470
like up to a month, month and a half.

00:18:39,470 --> 00:18:40,303
- [Man in Audience] Are you different

00:18:40,303 --> 00:18:42,293
than any other distro, how did you figure out,

00:18:42,293 --> 00:18:44,932
if the kernel will affect something else?

00:18:44,932 --> 00:18:47,684
- Yeah, I'm saying, but everybody's kinda rummaging around

00:18:47,684 --> 00:18:49,120
and figuring out, and--

00:18:50,558 --> 00:18:51,391
- [Man in Audience] I mean it does.

00:18:51,391 --> 00:18:52,766
I see your point, you know.

00:18:52,766 --> 00:18:54,175
- So--

00:18:54,175 --> 00:18:57,750
(feedback blares)

00:18:57,750 --> 00:18:59,570
- [Man in Audience] To your point, yes, that's the goal is,

00:18:59,570 --> 00:19:02,770
we, you know, either it's been submitted as stable,

00:19:02,770 --> 00:19:04,350
or it needs to be submitted to stable,

00:19:04,350 --> 00:19:06,640
and distros should all be doing that.

00:19:06,640 --> 00:19:09,640
The problem is, it's not believe,

00:19:09,640 --> 00:19:12,594
or, it's a not problem in the way stable's maintained,

00:19:12,594 --> 00:19:14,700
but things have to be Linux history

00:19:14,700 --> 00:19:16,650
before they're in stable, so you get a fix.

00:19:16,650 --> 00:19:18,140
It goes to the maintainer's sub-tree,

00:19:18,140 --> 00:19:19,630
eventually gets into Linux's tree,

00:19:19,630 --> 00:19:21,720
and then is eligible for stable, and Greg is pretty quick

00:19:21,720 --> 00:19:23,810
about putting them in, where half the time,

00:19:23,810 --> 00:19:25,600
Sasha even finds them before you even,

00:19:25,600 --> 00:19:27,980
before it's, you know, submitted there.

00:19:27,980 --> 00:19:30,800
So it gets there, but all of that takes a lot of time,

00:19:31,730 --> 00:19:33,310
for you know, especially like CVE's

00:19:33,310 --> 00:19:35,760
and things like that, cis caller finds a bug,

00:19:35,760 --> 00:19:38,900
it hits a mailing list, CV needs to be fixed,

00:19:38,900 --> 00:19:40,470
and it's not going to be stable for,

00:19:40,470 --> 00:19:42,460
it could be a couple of weeks, it could be a month.

00:19:47,429 --> 00:19:50,400
- For one of the days, we worked around that is,

00:19:50,400 --> 00:19:51,820
once patch comes on to the mailing list,

00:19:51,820 --> 00:19:55,080
and it looks like the right one, we pick that one.

00:19:55,080 --> 00:19:56,990
I mean, we know its' going to go in,

00:19:56,990 --> 00:19:59,950
as opposed to, you know, getting hodge podge fixes in.

00:20:00,800 --> 00:20:02,670
And maybe that might help, you know,

00:20:02,670 --> 00:20:04,120
reducing the duplicated work.

00:20:10,885 --> 00:20:14,944
- Just to know, we are getting kind of close to time.

00:20:14,944 --> 00:20:15,933
I know this is a good discussion,

00:20:15,933 --> 00:20:17,094
but we do have some more topics

00:20:17,094 --> 00:20:18,350
that we are trying to get through,

00:20:18,350 --> 00:20:20,360
so I think we probably go a few more slides,

00:20:20,360 --> 00:20:22,480
we're off track a little.

00:20:22,480 --> 00:20:23,680
- Yeah, I don't even to necessarily,

00:20:23,680 --> 00:20:24,820
we can keep talking, sorry.

00:20:24,820 --> 00:20:25,770
- Okay, I mean we'll take

00:20:25,770 --> 00:20:27,420
a few more questions or comments.

00:20:30,640 --> 00:20:32,091
You want to ask one?

00:20:32,091 --> 00:20:34,180
- Hi, my name is Don Zickus from Redhat.

00:20:34,180 --> 00:20:36,080
I just wanted to kinda reach out and say,

00:20:36,080 --> 00:20:37,740
Redhat's trying to solve the same exact problem.

00:20:37,740 --> 00:20:39,510
We recognize the same exact problems you have

00:20:39,510 --> 00:20:41,850
or try to find different ways to,

00:20:41,850 --> 00:20:43,270
we've solved these in different ways.

00:20:43,270 --> 00:20:44,860
We wanna try to spread out our solutions

00:20:44,860 --> 00:20:46,580
see if other distros, with like a latch-on

00:20:46,580 --> 00:20:48,140
or standard auditor and stuff like that.

00:20:48,140 --> 00:20:49,270
I'm actually gonna even talk about it

00:20:49,270 --> 00:20:50,703
a little bit later, kinda along the same thing.

00:20:50,703 --> 00:20:53,310
So, I wouldn't mind reaching out to you

00:20:53,310 --> 00:20:54,143
and coordinating stuff like this, so, I--

00:20:54,143 --> 00:20:55,128
- [Bruce] Yeah.

00:20:56,590 --> 00:20:58,804
- Don't feel like you're the only one trying to solve this.

00:20:58,804 --> 00:21:00,160
- (laughs) I know I'm not the only one (laughs),

00:21:00,160 --> 00:21:01,080
that's my problem.

00:21:02,715 --> 00:21:03,680
Yeah, but when somebody's sitting on,

00:21:03,680 --> 00:21:05,020
everybody knows when you're getting your,

00:21:05,020 --> 00:21:06,800
you know, you're getting your daily ping

00:21:06,800 --> 00:21:08,060
to fix a problem, you don't really have a,

00:21:08,060 --> 00:21:09,800
a lot of time to move on stuff,

00:21:09,800 --> 00:21:10,720
so yeah, I'm just gonna,

00:21:10,720 --> 00:21:12,590
I'll just leave this slide up, just for us to read,

00:21:12,590 --> 00:21:14,776
and this is sort of what we've done,

00:21:14,776 --> 00:21:17,086
or what, largely what I've had to do,

00:21:17,086 --> 00:21:22,086
in Yocto, to solve, to juggle all of these things.

00:21:23,130 --> 00:21:25,410
And so, I'm sure that there's,

00:21:26,297 --> 00:21:28,970
other things that people are doing,

00:21:28,970 --> 00:21:32,040
and that'd be a good place to collaborate on.

00:21:37,014 --> 00:21:38,364
- All right, anything else?

00:21:42,855 --> 00:21:45,660
- Hi, in your last slides, you showed that

00:21:45,660 --> 00:21:48,320
the solution where a problem, solution for the problem

00:21:48,320 --> 00:21:50,513
about configuration fragmentation.

00:21:50,513 --> 00:21:54,640
So how is it supposed to be?

00:21:54,640 --> 00:21:57,920
- In this, yeah well, we've been using,

00:21:57,920 --> 00:22:01,360
since the beginning, configuration fragments

00:22:01,360 --> 00:22:03,780
to make sure, because I maintained the Wind River,

00:22:03,780 --> 00:22:07,332
way back in 2006, back in the early days,

00:22:07,332 --> 00:22:09,490
POSIX m-queues was broken.

00:22:09,490 --> 00:22:13,070
And there was 72 different def configs

00:22:13,070 --> 00:22:15,910
that you had to go patch to fix all of the boards.

00:22:15,910 --> 00:22:18,090
So we came up with the configuration fragments,

00:22:18,090 --> 00:22:21,990
so there's a, POSIX m-queue base configuration fragment.

00:22:21,990 --> 00:22:23,610
You change the option in that one,

00:22:23,610 --> 00:22:25,460
and it just, it gets obviously merged,

00:22:25,460 --> 00:22:27,639
that's where merge config sort of came from that.

00:22:27,639 --> 00:22:30,010
So you change it one place, and it goes

00:22:30,010 --> 00:22:32,299
to all of the different kernel versions, boards,

00:22:32,299 --> 00:22:34,780
beit architect, you don't have to hunt up in branches

00:22:34,780 --> 00:22:36,430
and find def configs and things like that,

00:22:36,430 --> 00:22:39,262
so, that's how we solve juggling, you know,

00:22:39,262 --> 00:22:42,780
def configs, for our kernel configuration,

00:22:42,780 --> 00:22:44,860
and that made life a lot easier,

00:22:44,860 --> 00:22:46,310
'cause we would have release bugs

00:22:46,310 --> 00:22:48,010
with one kernel out of seven,

00:22:48,010 --> 00:22:51,460
one BSP out of 72, didn't have an option on it.

00:22:51,460 --> 00:22:52,900
A user space package didn't work,

00:22:52,900 --> 00:22:56,370
and you debugged it back to this one mist, def config.

00:22:57,313 --> 00:23:00,200
- So there was a specific fragment for POSIX m-queue.

00:23:00,200 --> 00:23:02,660
- It wasn't quite that fine grained, bad example,

00:23:02,660 --> 00:23:06,020
but we have a base, like, say there's a base, baseline--

00:23:06,020 --> 00:23:07,440
- [Man in Audience] A setting for better features.

00:23:07,440 --> 00:23:09,570
- Yeah, there's, depending on, like we have one

00:23:09,570 --> 00:23:11,800
for Docker now, and they're the highlight of our features,

00:23:11,800 --> 00:23:14,090
but like there's a base k config, k type,

00:23:14,090 --> 00:23:15,800
and it turns on, you know, core support

00:23:15,800 --> 00:23:17,780
that we need to make sure is everywhere.

00:23:17,780 --> 00:23:18,920
So if something new pops up,

00:23:18,920 --> 00:23:21,520
we'll turn it on in that base configuration,

00:23:21,520 --> 00:23:24,240
so like POSIX m-queue was in this base k type

00:23:24,240 --> 00:23:25,646
to make sure it would always be on.

00:23:25,646 --> 00:23:28,980
I mean that's maybe more of an embedded world problem,

00:23:28,980 --> 00:23:30,860
where somebody would actually consider turning

00:23:30,860 --> 00:23:32,510
some of these core features on and off,

00:23:32,510 --> 00:23:34,810
but there's probably more obvious ones,

00:23:34,810 --> 00:23:38,200
and sort of more server kernel as well

00:23:38,200 --> 00:23:39,490
that would be similar.

00:23:39,490 --> 00:23:40,519
- Okay, thanks for the discussion.

00:23:40,519 --> 00:23:41,352
I do think we need to move on.

00:23:41,352 --> 00:23:42,185
- Yep.

00:23:42,185 --> 00:23:43,018
- So thanks very much Bruce.

00:23:43,018 --> 00:23:46,018
(audience applauds)

00:24:05,312 --> 00:24:06,562
- Come on, man.

00:24:27,154 --> 00:24:27,987
- Great.

00:24:29,284 --> 00:24:31,131
(Laura laughs)

00:24:31,131 --> 00:24:32,467
- Okay, guys, yell it out.

00:24:33,540 --> 00:24:34,604
- Hello, check check.

00:24:34,604 --> 00:24:37,187
(Laura laughs)

00:24:38,667 --> 00:24:40,119
Can you hear me?

00:24:40,119 --> 00:24:42,198
- [Man in Audience] Go ahead.

00:24:42,198 --> 00:24:43,810
- Thank you.

00:24:43,810 --> 00:24:45,069
- I think as long as it's working.

00:24:45,069 --> 00:24:46,323
- [Man In Background] It could be a later--

00:24:46,323 --> 00:24:47,156
- Yeah.

00:24:48,146 --> 00:24:48,996
Yeah, that's probably because

00:24:48,996 --> 00:24:50,250
we have two different ones.

00:24:50,250 --> 00:24:51,669
- [Man In Background] This is a good stick.

00:24:51,669 --> 00:24:54,836
(audience chattering)

00:25:15,092 --> 00:25:16,200
- For discussion, and I'm like,

00:25:16,200 --> 00:25:18,980
"Oh my God, that's crazy.

00:25:18,980 --> 00:25:20,770
"How are we gonna get through all the stuff

00:25:20,770 --> 00:25:21,906
that we need to talk in 20 minutes?"

00:25:21,906 --> 00:25:23,127
So what do you actually see

00:25:23,127 --> 00:25:25,490
as the curtailed version of the slides,

00:25:25,490 --> 00:25:28,336
which there's no way we're getting through, right.

00:25:28,336 --> 00:25:30,020
So, since it's my first Plumbers,

00:25:30,020 --> 00:25:32,110
I think we'll get it right in a couple of tries.

00:25:32,110 --> 00:25:35,546
So, in 2021 or 2022, we'll do the right thing.

00:25:35,546 --> 00:25:38,460
I have a few co-presenters with me.

00:25:38,460 --> 00:25:40,080
Anatol and Sasha, of course.

00:25:41,170 --> 00:25:42,150
Just quick introduction

00:25:42,150 --> 00:25:44,020
to the Microsoft Linux systems group.

00:25:44,020 --> 00:25:45,500
As I mentioned, for the last 10 years,

00:25:45,500 --> 00:25:46,800
what we've been focusing on,

00:25:46,800 --> 00:25:50,078
is making sure that, Azure is like a great platform

00:25:50,078 --> 00:25:52,590
for Linux workloads.

00:25:52,590 --> 00:25:54,360
We've done enormous work there.

00:25:55,350 --> 00:25:57,130
Our focus in the last couple of years

00:25:57,130 --> 00:25:58,300
has shifted slightly.

00:25:59,730 --> 00:26:02,060
We're doing some really cool interesting stuff.

00:26:02,060 --> 00:26:03,960
How many people here have heard

00:26:03,960 --> 00:26:05,990
of Windows SoftServe for Linux?

00:26:07,230 --> 00:26:08,160
There, cool.

00:26:08,160 --> 00:26:10,510
Oh, that's a pretty good show of hands.

00:26:10,510 --> 00:26:12,750
So, if you think about it along those lines,

00:26:12,750 --> 00:26:15,578
we've been doing, our own kernel,

00:26:15,578 --> 00:26:17,950
our own sort of distro.

00:26:17,950 --> 00:26:20,263
We're spinning up really interesting experiments.

00:26:20,263 --> 00:26:23,003
On that front, we've searched for various tools,

00:26:23,003 --> 00:26:28,003
which kinda sorta, give us that, what I would say,

00:26:28,740 --> 00:26:33,450
the flexibility in addressing multiple end customers needs

00:26:33,450 --> 00:26:34,710
through a single infrastructure,

00:26:34,710 --> 00:26:37,050
and what we found is, Yocto is probably the best

00:26:37,050 --> 00:26:39,350
of the breed there, for us, at least that's what we sign,

00:26:39,350 --> 00:26:42,330
gives incredible flexibility in terms of

00:26:42,330 --> 00:26:44,539
the recipes in which we can tailor these solutions

00:26:44,539 --> 00:26:47,422
to the different endpoints, using the same infrastructure.

00:26:47,422 --> 00:26:49,920
So we've been pretty happy with it.

00:26:49,920 --> 00:26:52,360
In fact, my section of the slides

00:26:52,360 --> 00:26:53,890
was talking about all the things

00:26:53,890 --> 00:26:57,270
that Yocto did well for us, which got chalked,

00:26:57,270 --> 00:26:58,654
and now we'll talk about this stuff

00:26:58,654 --> 00:27:02,020
where we're finding what I would say,

00:27:02,020 --> 00:27:03,660
like stuff at the seams that we really need

00:27:03,660 --> 00:27:05,450
to focus on and improve as a community.

00:27:05,450 --> 00:27:10,440
So, I'm gonna hand this over to Anatol now.

00:27:10,440 --> 00:27:13,480
- Yeah hi, so I'm Anatol and so working with Senthii

00:27:13,480 --> 00:27:18,372
and Sasha and maybe others with Microsoft,

00:27:18,372 --> 00:27:23,372
and using Yocto to produce different product base

00:27:25,290 --> 00:27:29,410
on, yeah. the Yocto builds of Linux,

00:27:30,390 --> 00:27:33,480
and basically what we do,

00:27:35,190 --> 00:27:37,030
anything that we talk about here,

00:27:37,030 --> 00:27:38,640
is in the context of Yocto.

00:27:40,610 --> 00:27:44,430
For example, usually, our goal

00:27:44,430 --> 00:27:49,430
is to use the same kernel branch for different products,

00:27:50,250 --> 00:27:53,430
which doesn't work well every time, like all the way.

00:27:53,430 --> 00:27:56,070
For example, if having different hardware,

00:27:57,870 --> 00:28:00,490
despite that we try to have,

00:28:00,490 --> 00:28:04,391
to reuse actually, every, all the drivers needed

00:28:04,391 --> 00:28:07,430
from upstream, sometimes for example,

00:28:07,430 --> 00:28:10,580
there are, like closed-source drivers,

00:28:10,580 --> 00:28:14,912
which have poor compatibility, or a side situation,

00:28:14,912 --> 00:28:19,643
where the kernel doesn't support given hardware,

00:28:21,170 --> 00:28:26,040
and then a back work would be like if,

00:28:27,490 --> 00:28:28,986
not possible or too complicated,

00:28:28,986 --> 00:28:31,600
and then actually it would interesting

00:28:31,600 --> 00:28:34,370
if someone has a similar situation,

00:28:34,370 --> 00:28:37,340
and also part of that is having,

00:28:38,515 --> 00:28:42,590
the good and the bad of the kernel config fragments,

00:28:42,590 --> 00:28:45,840
that are there for all of the Yocto system,

00:28:45,840 --> 00:28:48,810
where actually the good is your are flexible.

00:28:48,810 --> 00:28:52,350
You can configure everything, yeah,

00:28:52,350 --> 00:28:56,616
every single product, every single image flavor,

00:28:56,616 --> 00:29:01,616
of, yeah, with using the norchmehanes of the kernel config,

00:29:04,100 --> 00:29:07,740
and on the other side, it starts now to,

00:29:07,740 --> 00:29:09,170
so I start to see for example,

00:29:09,170 --> 00:29:12,433
that some pieces do reverts of the previous options,

00:29:12,433 --> 00:29:17,433
and the expectation is that it can really get

00:29:18,004 --> 00:29:23,004
a forest of, a forest of, you know,

00:29:23,646 --> 00:29:28,646
because if there are similar products,

00:29:29,090 --> 00:29:32,390
they could basically inherit some configuration,

00:29:32,390 --> 00:29:34,884
and they can reuse something, and then,

00:29:34,884 --> 00:29:38,840
some products have a little bit difference,

00:29:38,840 --> 00:29:40,903
and they have to revert it,

00:29:40,903 --> 00:29:45,127
revert or introduce something different.

00:29:45,127 --> 00:29:50,127
Yeah, so that's a difficulty that we meet as well and--

00:29:53,328 --> 00:29:54,930
- So just on the config fragments,

00:29:54,930 --> 00:29:56,290
I think we've heard this a couple times,

00:29:56,290 --> 00:29:58,674
and I know the upstream Linux kernel

00:29:58,674 --> 00:30:01,280
also now has the port for a set of config fragments,

00:30:01,280 --> 00:30:04,190
but they're aren't a lot there.

00:30:04,190 --> 00:30:05,141
What config fragments,

00:30:05,141 --> 00:30:06,790
if we were to put some of those

00:30:06,790 --> 00:30:08,980
in the upstream kernel, would like to see?

00:30:10,240 --> 00:30:13,910
To be able to build configuration sets upstream?

00:30:17,680 --> 00:30:18,990
- Yeah, I mean for example,

00:30:18,990 --> 00:30:20,190
there was those ABCI,

00:30:22,970 --> 00:30:26,590
there can be some feature with, you know,

00:30:26,590 --> 00:30:29,000
different multiple fine tuning,

00:30:30,419 --> 00:30:35,060
and one flavor needs full ABCI support.

00:30:35,060 --> 00:30:38,430
Another needs just the partial ABCI support.

00:30:38,430 --> 00:30:42,461
And, that's where we picture actually the,

00:30:42,461 --> 00:30:44,860
you have a choice of producing

00:30:44,860 --> 00:30:47,860
two different configuration pieces or,

00:30:51,200 --> 00:30:54,930
like producing a full one and then reverting

00:30:54,930 --> 00:30:57,900
some option, so it's hard to say which one

00:30:57,900 --> 00:30:58,800
would be--

00:31:00,170 --> 00:31:01,739
- I mean this is something we've talked about before

00:31:01,739 --> 00:31:04,543
for distributions, trying to get more config fragments

00:31:04,543 --> 00:31:07,150
up there, but it sounds like, I mean,

00:31:07,150 --> 00:31:09,190
it's, given this has come up with both times,

00:31:09,190 --> 00:31:10,520
is that it, maybe if we can start getting

00:31:10,520 --> 00:31:11,980
some of those config fragments,

00:31:11,980 --> 00:31:13,279
submitting an upstream semi,

00:31:13,279 --> 00:31:15,040
maybe if it's not necessarily

00:31:15,040 --> 00:31:16,950
the frame finding board level, for example,

00:31:16,950 --> 00:31:19,220
things like ASCII or as we mentioned, Docker,

00:31:19,220 --> 00:31:20,420
those were good example of things

00:31:20,420 --> 00:31:23,260
that it, it tried to do things at least from my perspective,

00:31:23,260 --> 00:31:25,950
a lot of the times, what I do, is I'll do a make basic,

00:31:25,950 --> 00:31:27,550
made def config to get stuff set up,

00:31:27,550 --> 00:31:28,740
and then I wanna do something else,

00:31:28,740 --> 00:31:29,900
like say if I could have a set

00:31:29,900 --> 00:31:33,880
of config options to do, Docker of other things like that,

00:31:33,880 --> 00:31:36,090
that would be really helpful, so.

00:31:36,090 --> 00:31:39,670
- Okay, okay, good, let's, I'll think about it, okay.

00:31:39,670 --> 00:31:41,170
All right.

00:31:41,170 --> 00:31:42,710
Yeah, Docker is a good example as well,

00:31:42,710 --> 00:31:46,010
because, Yocto, for example, in default,

00:31:46,010 --> 00:31:49,676
you have to build, disable some, like LVM driver,

00:31:49,676 --> 00:31:54,270
by default, and, yeah.

00:31:56,570 --> 00:31:59,460
Device, memorizing, yeah, so and,

00:31:59,460 --> 00:32:03,288
we have to map it in the features section for Docker,

00:32:03,288 --> 00:32:05,994
for the Docker piece of config.

00:32:05,994 --> 00:32:10,994
Yeah, the other part is reproducible builds actually of,

00:32:11,770 --> 00:32:13,510
in general, and the in particular,

00:32:13,510 --> 00:32:16,800
the kernel builds where we go to know

00:32:16,800 --> 00:32:20,081
that Yocto community works on,

00:32:20,081 --> 00:32:23,540
like in the latest versions of Yocto,

00:32:23,540 --> 00:32:27,480
there is work going on to have reproducible builds,

00:32:29,030 --> 00:32:30,437
and there is a call to the community

00:32:30,437 --> 00:32:33,610
to fix the recipes that would might,

00:32:33,610 --> 00:32:38,143
that would, that could cause non-reproducible builds,

00:32:38,143 --> 00:32:42,340
and right we actually, we don't have it.

00:32:42,340 --> 00:32:44,900
Maybe someone has it at home (laughs).

00:32:45,830 --> 00:32:47,720
And the kernel project itself, I think.

00:32:47,720 --> 00:32:48,910
Yeah?

00:32:48,910 --> 00:32:50,200
- [Man in Audience] We have pre-reducible builds

00:32:50,200 --> 00:32:51,690
of the kernel in Debian.

00:32:51,690 --> 00:32:55,133
That's something we've been working on for a while.

00:32:55,133 --> 00:32:56,124
- Yeah.

00:32:56,124 --> 00:32:58,890
- [Man in Audience] One of the last things you need to do

00:32:58,890 --> 00:33:02,730
is to use a swim like, dash f, debug prefix map

00:33:02,730 --> 00:33:07,730
to make sure the, that the kernel builds the same,

00:33:07,900 --> 00:33:10,900
regardless of which directory it's being built in.

00:33:12,180 --> 00:33:15,569
- So you can of patch, have a Debian-specific patch for--

00:33:15,569 --> 00:33:20,340
- [Man in Audience] No it's just changing the C-flex.

00:33:21,490 --> 00:33:24,600
I don't think we have any actual patches to the kernels.

00:33:24,600 --> 00:33:28,582
We build our system to do increased full builds.

00:33:28,582 --> 00:33:31,750
- We got, another part of that was that,

00:33:31,750 --> 00:33:36,390
some GCC version might, GCC version might not play well

00:33:36,390 --> 00:33:38,150
with that as well, so they would produce

00:33:38,150 --> 00:33:41,130
some additional noise in the binary,

00:33:41,130 --> 00:33:42,230
which would actually--

00:33:43,360 --> 00:33:46,510
- That is possible when I think this configured option

00:33:46,510 --> 00:33:47,870
is relatively new.

00:33:54,650 --> 00:33:56,260
- I think what you're talking about is something that,

00:33:56,260 --> 00:33:59,020
I know we were doing Kanari stuff way back when,

00:33:59,020 --> 00:34:01,295
it was a, we want a reproducible build,

00:34:01,295 --> 00:34:03,850
and went so far as to like actually tag

00:34:03,850 --> 00:34:08,030
every package version and VR binary built,

00:34:08,030 --> 00:34:09,760
that was used as a build dependency of it,

00:34:09,760 --> 00:34:10,770
and do it that way, but there's,

00:34:10,770 --> 00:34:13,110
that's all build system work,

00:34:13,110 --> 00:34:14,910
much more than, than kernel work.

00:34:15,909 --> 00:34:16,742
- [Anatol] Okay.

00:34:16,742 --> 00:34:17,780
- [Laura] Build system work, it turns out,

00:34:17,780 --> 00:34:18,970
is kernel work, so.

00:34:18,970 --> 00:34:19,860
- Yeah.

00:34:19,860 --> 00:34:22,580
- Yeah, okay, well when you have a U-name,

00:34:22,580 --> 00:34:26,260
which has a date, and there were time in there,

00:34:26,260 --> 00:34:30,300
then it will be still only, for only kernel side, no?

00:34:31,450 --> 00:34:33,250
But otherwise, yeah, okay.

00:34:34,870 --> 00:34:37,700
Is it, is throwback, yeah?

00:34:37,700 --> 00:34:40,460
- There are environment variables you can set,

00:34:40,460 --> 00:34:43,520
like k-build, build dates, or I can't remember

00:34:43,520 --> 00:34:47,020
the exact name of it, but there are environment variables

00:34:47,020 --> 00:34:50,190
you can set to control the data that goes into the U-name.

00:34:51,630 --> 00:34:52,463
- [Anatol Okay.

00:34:54,330 --> 00:34:56,438
- Talk to me afterwards if you want the details.

00:34:56,438 --> 00:35:00,230
- Thanks, okay, okay.

00:35:00,230 --> 00:35:01,927
So okay then, moving forward to,

00:35:01,927 --> 00:35:04,800
or are there any other questions Laura?

00:35:07,010 --> 00:35:08,370
Something to add?

00:35:08,370 --> 00:35:11,340
No, okay, so moving forward to,

00:35:11,340 --> 00:35:14,457
back to the Yocto context with the kernel build.

00:35:14,457 --> 00:35:18,590
So Bruce mentioned there is that,

00:35:18,590 --> 00:35:22,730
actually the way Yocto works is it has to build

00:35:22,730 --> 00:35:26,670
on the build system before you can actually do a, the build.

00:35:26,670 --> 00:35:30,840
So we come around in some ways that we used

00:35:30,840 --> 00:35:33,386
the shared state on that,

00:35:33,386 --> 00:35:37,350
but it's always like if we add or remove packages,

00:35:37,350 --> 00:35:40,550
then the shared state is not valid anymore,

00:35:40,550 --> 00:35:44,140
so we have to cash it like more and more,

00:35:44,140 --> 00:35:45,680
more often and more often,

00:35:47,512 --> 00:35:49,480
and then another part of that.

00:35:49,480 --> 00:35:52,770
If we want to produce SDK builds

00:35:52,770 --> 00:35:54,232
and different product builds,

00:35:54,232 --> 00:35:58,068
and that actually leads to the shared state

00:35:58,068 --> 00:36:01,640
to be growing like hell, actually.

00:36:01,640 --> 00:36:06,640
Yeah, because all the product variants

00:36:10,280 --> 00:36:14,000
are a bit different so they are serialized differently

00:36:14,000 --> 00:36:16,220
in the shared state, cash.

00:36:18,420 --> 00:36:23,190
Yeah, and that's compared to the builds,

00:36:23,190 --> 00:36:25,874
like for example if want to build a package

00:36:25,874 --> 00:36:29,790
for, I don't know, Redhat, Fedora, or Debian,

00:36:29,790 --> 00:36:33,190
yeah, so where there was a JL environment

00:36:33,190 --> 00:36:34,960
with prebuilt tools ready.

00:36:34,960 --> 00:36:36,752
Sure, they are pre-installed,

00:36:36,752 --> 00:36:41,752
but it's still something that doesn't need

00:36:42,440 --> 00:36:47,010
a lot of effort or time, time effort to be built.

00:36:47,010 --> 00:36:49,620
So that's kind of an issue that we have as well.

00:36:51,950 --> 00:36:55,590
And then you need to remember first is the,

00:36:55,590 --> 00:36:58,480
yeah, so some of our products require

00:37:00,696 --> 00:37:02,119
a "read-only" file system, like read only rootfs,

00:37:02,119 --> 00:37:07,119
and in that case, and we want also to use SELinux, yeah.

00:37:07,170 --> 00:37:10,280
So the simple solution could be to like to

00:37:10,280 --> 00:37:13,280
bake any initramfs into the kernel,

00:37:14,360 --> 00:37:16,130
and make it read only, actually.

00:37:16,130 --> 00:37:20,210
So it's read only, but CPIO itself,

00:37:20,210 --> 00:37:25,210
doesn't support, the SELinux labels, and actually that's why

00:37:26,850 --> 00:37:31,850
we have to, yeah what we do is,

00:37:33,890 --> 00:37:38,390
we create separate squashfs image,

00:37:38,390 --> 00:37:40,390
then put it into initramfs

00:37:40,390 --> 00:37:42,450
and then mount it into a loop device,

00:37:42,450 --> 00:37:47,450
and then switch into that squashfs image environment

00:37:49,640 --> 00:37:51,750
and have SELinux.

00:37:53,070 --> 00:37:54,420
So labels and stuff.

00:37:54,420 --> 00:37:59,420
So basically using system DS in it,

00:37:59,470 --> 00:38:04,470
and where the issue, actually, it allows

00:38:04,470 --> 00:38:07,860
to update more easily also the kernel,

00:38:11,520 --> 00:38:14,740
it allows to deliver the routefs updates

00:38:14,740 --> 00:38:19,400
with the kernel, and it allows,

00:38:20,400 --> 00:38:23,720
in some cases, we also deliver it separately,

00:38:23,720 --> 00:38:27,240
but the point on this is, with Yocto,

00:38:27,240 --> 00:38:31,610
we have to build, we have to build in the,

00:38:32,650 --> 00:38:37,650
like a embedded recipe,

00:38:39,790 --> 00:38:44,360
so the same recipe that builds, the unique ramfs,

00:38:44,360 --> 00:38:47,356
also builds the routefs image,

00:38:47,356 --> 00:38:52,356
and that does not work well for some flavors build variants

00:38:52,440 --> 00:38:56,790
like weak, or if you want to build VHD

00:38:56,790 --> 00:39:01,790
or some other image, because the Yocto booth thing

00:39:04,990 --> 00:39:08,750
that we have, we build the main image,

00:39:08,750 --> 00:39:11,690
as a VHD for example, and then it will try

00:39:11,690 --> 00:39:15,320
to embed a VHD into the initramfs,

00:39:15,320 --> 00:39:17,387
which would not be supported.

00:39:17,387 --> 00:39:19,750
- Okay I hate to cut this off,

00:39:19,750 --> 00:39:21,410
but I mean, we are getting pretty close

00:39:21,410 --> 00:39:22,243
to time, - Okay.

00:39:22,243 --> 00:39:23,160
- So I think you probably wrap up

00:39:23,160 --> 00:39:25,150
with the next-- - Sure, sure.

00:39:25,150 --> 00:39:29,310
Yeah, well, if there is something to add or discuss,

00:39:29,310 --> 00:39:33,200
please just take the mic.

00:39:33,200 --> 00:39:34,550
- I mean I guess my question

00:39:34,550 --> 00:39:35,704
is that a lot of what you're describing

00:39:35,704 --> 00:39:37,890
is Yocto-specific problems,

00:39:37,890 --> 00:39:39,650
and I realize this is using Yocto to build,

00:39:39,650 --> 00:39:42,140
but I guess the question I'd raise is that,

00:39:42,140 --> 00:39:45,270
what if any of this could you think

00:39:45,270 --> 00:39:47,720
could fit in the upstream kernel to support?

00:39:47,720 --> 00:39:48,970
To make your life easier?

00:39:50,390 --> 00:39:52,250
Because that's the real thing is,

00:39:52,250 --> 00:39:54,480
is I think is there anything that is doing

00:39:54,480 --> 00:39:55,654
that we could put in the upstream kernel

00:39:55,654 --> 00:39:57,780
that would make it easier to build this for you?

00:39:57,780 --> 00:39:58,613
- [Anatol] Okay.

00:40:01,030 --> 00:40:01,863
- Yeah?

00:40:04,486 --> 00:40:06,850
- So I'm not sure if the upstream kernel is the right place

00:40:06,850 --> 00:40:10,160
for that, but the whole kernel config fragments thing,

00:40:10,160 --> 00:40:11,315
I think it should be standardized,

00:40:11,315 --> 00:40:13,090
whether it's inside the kernel tree

00:40:13,090 --> 00:40:14,490
or outside the kernel tree.

00:40:14,490 --> 00:40:17,200
I feel that a lot of different people

00:40:17,200 --> 00:40:21,050
are doing very similar work, and it's a lot

00:40:21,050 --> 00:40:22,220
of overhead to deal with that,

00:40:22,220 --> 00:40:24,810
and I'd really prefer if it'll be handled

00:40:24,810 --> 00:40:29,457
in one place, instead of distributed to a bunch of people.

00:40:30,589 --> 00:40:31,989
- Thank you very much.

00:40:31,989 --> 00:40:32,822
- Yeah.

00:40:32,822 --> 00:40:33,655
- I mean we're happy to have discussions afterward, so yeah.

00:40:33,655 --> 00:40:35,265
- Okay, thanks.

00:40:35,265 --> 00:40:38,265
(audience applauds)

00:40:39,983 --> 00:40:43,673
- Don, you wanna use your laptop, or?

00:40:43,673 --> 00:40:48,061
- Thanks.

00:40:48,061 --> 00:40:51,228
(audience chattering)

00:41:51,481 --> 00:41:52,314
- Laura?

00:41:55,023 --> 00:41:58,580
How about looking at the working again, sharing screens.

00:41:58,580 --> 00:41:59,771
Just plug in and it shows up.

00:41:59,771 --> 00:42:02,688
(muffled speaking)

00:42:05,959 --> 00:42:08,959
(audience chatters)

00:42:22,550 --> 00:42:25,467
(muffled speaking)

00:42:40,638 --> 00:42:41,617
Okay that'll work.

00:42:41,617 --> 00:42:43,101
Plug it in, see black is all.

00:42:43,101 --> 00:42:46,018
(muffled speaking)

00:42:56,530 --> 00:42:58,280
- Can I have the mic?

00:43:00,930 --> 00:43:03,150
Just a note for everyone, if you want the mic,

00:43:03,150 --> 00:43:04,482
just wave really loud,

00:43:04,482 --> 00:43:06,665
wave like that, and I will try and toss it to you.

00:43:06,665 --> 00:43:09,498
(audience laughs)

00:43:10,432 --> 00:43:11,915
- [Man in Audience] Can you demonstrate loud waving now?

00:43:11,915 --> 00:43:14,490
(audience laughs)

00:43:14,490 --> 00:43:17,310
- All right, Mr. Don Zickus, go ahead.

00:43:17,310 --> 00:43:19,500
- Hello, my name is Don Zickus.

00:43:19,500 --> 00:43:22,580
I'm a RHEL Kernal Engineer, I guess a process monkey.

00:43:22,580 --> 00:43:25,260
I've been doing a lot of RHEL process issues

00:43:25,260 --> 00:43:29,630
and development model over the last 10, 13 years at Redhat,

00:43:29,630 --> 00:43:31,700
basically kernel related, another kernel guy

00:43:31,700 --> 00:43:32,533
to talk about kernel.

00:43:32,533 --> 00:43:33,570
People keep asking about user space,

00:43:33,570 --> 00:43:35,810
but I'm gonna talk about kernel stuff.

00:43:35,810 --> 00:43:37,360
And just like all the other talks before me,

00:43:37,360 --> 00:43:39,104
I have the same problems trying to get developers,

00:43:39,104 --> 00:43:41,540
make it easier for developers to develop

00:43:42,390 --> 00:43:45,310
an upstream kernels using our distro-specific processes.

00:43:46,810 --> 00:43:49,185
So I'd like to talk about how

00:43:49,185 --> 00:43:51,986
we can incorporate, standardizing solutions,

00:43:51,986 --> 00:43:53,440
how we can push upstream,

00:43:53,440 --> 00:43:58,440
so like other distros, RHEL always had the problem

00:43:58,670 --> 00:44:01,930
is how do you get developers to do distro work,

00:44:01,930 --> 00:44:05,460
you know, configs, packaging, building, testing all stuff,

00:44:05,460 --> 00:44:06,658
how do you take an upstream source read

00:44:06,658 --> 00:44:08,880
and plug in all that secret soft,

00:44:08,880 --> 00:44:11,570
not really secret soft spot, distro magic on the back end,

00:44:11,570 --> 00:44:14,340
so it makes, you know, very seamless for developers

00:44:14,340 --> 00:44:16,930
to work on their source and getTree,

00:44:16,930 --> 00:44:21,250
and do the work, do the build, kickoff builds,

00:44:21,250 --> 00:44:23,300
and do the packaging on the back end.

00:44:23,300 --> 00:44:24,560
And just like the talks before me,

00:44:24,560 --> 00:44:27,230
Yocto is having the same problem, dubbing and everything.

00:44:27,230 --> 00:44:29,320
So I'm here to kind of talk about,

00:44:29,320 --> 00:44:31,320
is there anything we can standardize?

00:44:31,320 --> 00:44:34,070
Is there other ways we can kind collaborate

00:44:34,070 --> 00:44:35,240
and actually push change upstream

00:44:35,240 --> 00:44:38,380
to make our lives easier from a distro perspective?

00:44:38,380 --> 00:44:40,640
So before I kinda move forward here,

00:44:40,640 --> 00:44:42,420
is there any distro maintainers here,

00:44:42,420 --> 00:44:44,810
like I know we got Fedora I know here.

00:44:44,810 --> 00:44:46,550
I see I think Debian.

00:44:46,550 --> 00:44:48,210
I know Yocto's here.

00:44:48,210 --> 00:44:50,120
Can you shout out what distros you're part of?

00:44:50,120 --> 00:44:50,953
- Ubuntu.

00:44:50,953 --> 00:44:51,963
- [Don] Ubuntu.

00:44:51,963 --> 00:44:52,796
- Debian.

00:44:52,796 --> 00:44:54,108
- [Don] Debian

00:44:54,108 --> 00:44:55,050
- SUSE.

00:44:55,050 --> 00:44:55,950
- [Don] SUSE.

00:44:55,950 --> 00:44:56,783
- SUSE.

00:44:56,783 --> 00:44:57,616
- [Don] SUSE.

00:44:57,616 --> 00:44:58,449
- Oracle.

00:44:58,449 --> 00:44:59,282
- [Don] Oracle.

00:44:59,282 --> 00:45:01,360
Okay, perfect, so we got all the major distros in here,

00:45:01,360 --> 00:45:02,480
the maintainers, this is great.

00:45:02,480 --> 00:45:04,490
So, we're all as maintainers,

00:45:04,490 --> 00:45:05,940
we're all solving packaging problems,

00:45:05,940 --> 00:45:07,270
and I'm sure you're trying to figure out

00:45:07,270 --> 00:45:09,107
how to get developers involved

00:45:09,107 --> 00:45:14,107
in using an upstream tree and using your distro magic.

00:45:16,707 --> 00:45:20,620
So that, REHL and Fedora are facing the same thing.

00:45:20,620 --> 00:45:22,450
So, one of the things we've done recently,

00:45:22,450 --> 00:45:24,553
thanks to work with Laura, we've released the,

00:45:24,553 --> 00:45:27,523
we've taken a lot of our REHL internal development workflow

00:45:27,523 --> 00:45:29,590
and kinda pushed upstream through a,

00:45:29,590 --> 00:45:31,259
we call is an "always ready kernel effort."

00:45:31,259 --> 00:45:32,640
Laura's made that public,

00:45:33,680 --> 00:45:34,920
and what that really kinda entails,

00:45:34,920 --> 00:45:36,500
is that we took an upstream tree,

00:45:36,500 --> 00:45:38,400
put a Red Hat directory there, and put a lot of magic

00:45:38,400 --> 00:45:41,553
behind there, incorporate all our distro magic,

00:45:41,553 --> 00:45:45,640
and we're working on incorporating that into Fedora.

00:45:45,640 --> 00:45:47,480
What that allows you to do from a top level

00:45:47,480 --> 00:45:50,580
is to do your configs, do your RPM builds,

00:45:51,928 --> 00:45:55,480
kick off builds, kick off testing and stuff like that.

00:45:55,480 --> 00:45:57,300
So I know a lotta distros are having the same problem.

00:45:57,300 --> 00:46:00,850
So I'm trying to figure out if there's,

00:46:01,890 --> 00:46:06,140
ways we can kinda come up with a similar solution

00:46:06,140 --> 00:46:08,536
that we can all take advantage of

00:46:08,536 --> 00:46:11,350
and push changes upstream so it makes our lives easier

00:46:11,350 --> 00:46:12,910
as a distro maintainer.

00:46:14,010 --> 00:46:15,370
Some of the solutions that we,

00:46:15,370 --> 00:46:16,760
some of the issues we ran into,

00:46:16,760 --> 00:46:19,270
I'm hoping other people kinda relate to it

00:46:19,270 --> 00:46:21,080
a little bit, I like to solve,

00:46:21,080 --> 00:46:22,560
is we, a makefile.

00:46:22,560 --> 00:46:25,620
We have, there's a kernel top-level makefile.

00:46:25,620 --> 00:46:27,660
We have something above that in order to do hooks

00:46:27,660 --> 00:46:29,200
into our distro,

00:46:31,930 --> 00:46:33,930
distro makefile options.

00:46:33,930 --> 00:46:36,460
I'm assuming other, is there any other distributions

00:46:36,460 --> 00:46:38,160
who have similar problem that they need a makefile

00:46:38,160 --> 00:46:41,270
on top of the kernel top-level makefile, or is just,

00:46:41,270 --> 00:46:44,775
so, Debian, what about you SUSE.

00:46:44,775 --> 00:46:47,178
you guys are all running into the same problem, right.

00:46:47,178 --> 00:46:49,950
Would you be open to, having a,

00:46:49,950 --> 00:46:53,990
pushing a distro, a makefile dot distro file up there,

00:46:53,990 --> 00:46:57,290
to kinda help, make it easier for you

00:46:57,290 --> 00:46:59,010
to connect into your packaging?

00:46:59,010 --> 00:47:02,740
- Well we actually put in a hook in a makefile

00:47:02,740 --> 00:47:04,960
that goes in the build tree.

00:47:04,960 --> 00:47:06,440
- [Don] Okay. - Because it has per

00:47:06,440 --> 00:47:09,170
that will have some setting specific

00:47:09,170 --> 00:47:11,719
to the build configuration that we build.

00:47:11,719 --> 00:47:13,140
- [Don] Did you patch it?

00:47:13,140 --> 00:47:14,810
Do you push that upstream or how's that work?

00:47:14,810 --> 00:47:18,090
- That's, yeah we have to patch that in to the--

00:47:18,090 --> 00:47:19,992
okay, so if you had it--

00:47:19,992 --> 00:47:21,920
- I guess we could do that indirectly

00:47:21,920 --> 00:47:23,540
for a makefile or distro.

00:47:23,540 --> 00:47:24,410
- [Don] I'm sorry,

00:47:24,410 --> 00:47:26,423
would that be something that would make your life easier?

00:47:26,423 --> 00:47:28,050
- Yes.

00:47:28,050 --> 00:47:29,803
- [Don] Okay, what about.

00:47:34,561 --> 00:47:37,180
- I mean our packaging is based on Debian.

00:47:37,180 --> 00:47:38,560
Everything's pretty similar to that,

00:47:38,560 --> 00:47:41,075
but most of our changes are,

00:47:41,075 --> 00:47:44,610
we just patch directly into the main kernel makefile,

00:47:44,610 --> 00:47:47,230
a patch on top of the kernel.

00:47:47,230 --> 00:47:48,910
- [Don] But while you do that,

00:47:48,910 --> 00:47:51,600
it makes it difficult to maintain it going forward, right?

00:47:51,600 --> 00:47:53,260
- Yeah, I mean, that's the part

00:47:53,260 --> 00:47:54,093
we're trying to solve.

00:47:54,093 --> 00:47:56,560
I mean it turns out that trying to maintain patches

00:47:56,560 --> 00:47:58,194
in the kernel makefile and having to patch that,

00:47:58,194 --> 00:48:00,760
It seems like we run into conflicts every now and then,

00:48:00,760 --> 00:48:02,610
not very frequently, but if something changes,

00:48:02,610 --> 00:48:03,443
and the point is just that,

00:48:03,443 --> 00:48:06,230
if we can have a way that the distribution packaging

00:48:06,230 --> 00:48:08,321
can be in something that can change,

00:48:08,321 --> 00:48:11,280
but then the main kernel makefile doesn't run into conflict,

00:48:11,280 --> 00:48:13,420
and the point is that that changes independently,

00:48:13,420 --> 00:48:14,690
and that's the problem we're trying to solve

00:48:14,690 --> 00:48:17,140
so that nobody has to deal with that, so.

00:48:17,140 --> 00:48:18,250
- [Man in Audience] So you could just send the hook

00:48:18,250 --> 00:48:20,289
inside the main makefile into an external makefile.

00:48:20,289 --> 00:48:22,640
They'll do nothing if it doesn't exist.

00:48:22,640 --> 00:48:23,473
- Yeah, that was--

00:48:23,473 --> 00:48:24,306
- [Man in Audience] Stuff with that.

00:48:24,306 --> 00:48:25,540
- Exactly, that's,

00:48:25,540 --> 00:48:26,740
would there be any objections then,

00:48:26,740 --> 00:48:28,580
would people find that useful?

00:48:28,580 --> 00:48:31,230
I mean, would people use it, or would distros use it?

00:48:32,440 --> 00:48:33,960
- I mean, I think distros would use it,

00:48:33,960 --> 00:48:36,780
than other people who wanted to experiment with stuff, so.

00:48:36,780 --> 00:48:38,600
- Is it just as simple as just putting in a clued,

00:48:38,600 --> 00:48:41,410
makefile dot, I don't know, distro kinda thing,

00:48:41,410 --> 00:48:43,380
and just putting all the distro stuff in there.

00:48:43,380 --> 00:48:44,330
If it exists, use it.

00:48:44,330 --> 00:48:45,450
Otherwise, ignore it.

00:48:45,450 --> 00:48:46,337
Would that be,

00:48:46,337 --> 00:48:49,320
would that work for people, or is there a better solution?

00:48:52,240 --> 00:48:54,050
All right, SUSE, is, I don't know,

00:48:54,050 --> 00:48:55,540
do you guys have similar problems,

00:48:55,540 --> 00:48:56,910
or is this, not even touching.

00:48:56,910 --> 00:48:58,222
- I don't think so, no.

00:48:58,222 --> 00:48:59,775
For the makefile, no we don't have

00:48:59,775 --> 00:49:01,630
to change too much things.

00:49:01,630 --> 00:49:03,103
- Okay, so this doesn't even affect you.

00:49:03,103 --> 00:49:04,120
- [Man in Audience] No.

00:49:04,120 --> 00:49:05,050
- Okay.

00:49:05,050 --> 00:49:07,060
- How are you building your RPM then?

00:49:08,000 --> 00:49:09,330
To package things?

00:49:09,330 --> 00:49:10,163
Are you--

00:49:10,163 --> 00:49:11,500
- [Man in Audience] Totally outside the--

00:49:13,124 --> 00:49:15,620
- Yeah, I guess the,

00:49:15,620 --> 00:49:18,610
hello, I guess that we have a lot of magic

00:49:18,610 --> 00:49:22,610
in the file, and thus a lot of effects around the build.

00:49:23,897 --> 00:49:24,730
- Okay.

00:49:24,730 --> 00:49:27,560
I mean, that is also kind of another adjacent question

00:49:27,560 --> 00:49:29,730
to this, is that is it worth trying to,

00:49:30,710 --> 00:49:32,800
I know each has to be intense and do their own magic,

00:49:32,800 --> 00:49:35,440
but is it worth trying to get common spec

00:49:35,440 --> 00:49:38,250
or dev recipes in the upstream kernel,

00:49:38,250 --> 00:49:40,308
or do you think that everyone's just so different,

00:49:40,308 --> 00:49:42,510
there's no point in even trying to get something

00:49:42,510 --> 00:49:43,343
that's common?

00:49:45,317 --> 00:49:46,470
- [Man in Audience] Well the only thing common

00:49:46,470 --> 00:49:48,741
is when we make RPM.

00:49:48,741 --> 00:49:50,245
- I mean, that's an interesting question

00:49:50,245 --> 00:49:51,850
now that you mention make RPM,

00:49:51,850 --> 00:49:53,430
is that from my perspective, the reason

00:49:53,430 --> 00:49:55,222
that we have make RPM is for some people

00:49:55,222 --> 00:49:58,870
who have, they want a very basic RPM

00:49:58,870 --> 00:50:01,040
that does something for your purposes of installing,

00:50:01,040 --> 00:50:03,420
because it, yeah it makes an RPM,

00:50:03,420 --> 00:50:04,794
but it doesn't have a whole lot of things that are,

00:50:04,794 --> 00:50:06,610
can play it, and I mean there's a lot of things

00:50:06,610 --> 00:50:08,390
that I'd wanna change, but the question is, is that,

00:50:08,390 --> 00:50:10,910
is it worth trying to make that more complete,

00:50:10,910 --> 00:50:12,490
or it just going to end up being,

00:50:12,490 --> 00:50:14,600
yet a third target that maybe gets a little bit better,

00:50:14,600 --> 00:50:16,370
but it's not actually in common for distributions,

00:50:16,370 --> 00:50:18,047
not that we shouldn't improve make RPM,

00:50:18,047 --> 00:50:22,140
but I mean, would anyone else try and find value?

00:50:23,227 --> 00:50:26,144
(muffled speaking)

00:50:29,609 --> 00:50:31,433
- Just double checking everyone's awake.

00:50:31,433 --> 00:50:32,266
That's good.

00:50:32,266 --> 00:50:33,560
- Do not go for the head this time.

00:50:33,560 --> 00:50:37,740
So I think there's sufficient difference,

00:50:37,740 --> 00:50:41,180
that you can't have a common spec file,

00:50:41,180 --> 00:50:43,860
but there is also enough commonality

00:50:43,860 --> 00:50:45,660
that we should get the basics right.

00:50:47,420 --> 00:50:48,470
And start from there.

00:50:51,050 --> 00:50:52,424
- Yeah, there was big difference,

00:50:52,424 --> 00:50:57,424
for example, how to generate the back info,

00:50:57,620 --> 00:51:01,430
and how to compress their commonalities and so on.

00:51:01,430 --> 00:51:03,320
That is very tricky for now.

00:51:05,320 --> 00:51:06,760
- So one of the things we did at Red Hat,

00:51:06,760 --> 00:51:08,790
we have a template, a spec file template,

00:51:08,790 --> 00:51:10,940
and we generate the spec file and the fly,

00:51:10,940 --> 00:51:12,670
based on how the tree's configured

00:51:12,670 --> 00:51:14,984
and what options you're using.

00:51:14,984 --> 00:51:16,777
I agree, I'm not sure how we can,

00:51:16,777 --> 00:51:19,230
each distros has so much magic built

00:51:19,230 --> 00:51:21,410
into their spec file, their dev file,

00:51:21,410 --> 00:51:22,585
it might be hard to standardize,

00:51:22,585 --> 00:51:24,953
but if we can have a hook in there that helps.

00:51:24,953 --> 00:51:27,510
I know as Yocto is saying, how do you get developers

00:51:27,510 --> 00:51:30,790
to generate that spec file, generate that dev file for you?

00:51:30,790 --> 00:51:32,700
If we put a top-level makefile hook

00:51:32,700 --> 00:51:36,103
to make it easier for developers to build

00:51:36,103 --> 00:51:38,170
and to tweak if they're necessary.

00:51:39,470 --> 00:51:40,700
- Yeah, and so that means,

00:51:40,700 --> 00:51:41,976
that it's not only about the makefile,

00:51:41,976 --> 00:51:45,980
but also some basic infrastructure,

00:51:45,980 --> 00:51:48,570
that also including the upstream.

00:51:48,570 --> 00:51:49,600
- [Don] Which was my next point.

00:51:49,600 --> 00:51:50,433
- Oh, okay.

00:51:52,822 --> 00:51:53,655
- [Don] Do you have a question?

00:51:53,655 --> 00:51:55,462
- Yeah, who has the common spec files?

00:51:55,462 --> 00:52:00,462
I think it would be more sense to have

00:52:00,480 --> 00:52:04,390
a shared make recipes, that distros spec files would use,

00:52:04,390 --> 00:52:07,160
rather than a common spec file.

00:52:07,160 --> 00:52:09,510
Because they are so different, spec files,

00:52:09,510 --> 00:52:12,342
but do a lot of common things.

00:52:12,342 --> 00:52:13,680
That's why.

00:52:14,678 --> 00:52:15,511
- Yeah, but you got,

00:52:15,511 --> 00:52:16,344
this guy's pulling apps as well.

00:52:16,344 --> 00:52:18,806
I mean, I'm not sure that spec files

00:52:18,806 --> 00:52:20,660
and app definitions and all that,

00:52:20,660 --> 00:52:24,660
are something that should go upstream.

00:52:24,660 --> 00:52:25,580
I think that might be something

00:52:25,580 --> 00:52:27,420
that we all want to maintain,

00:52:27,420 --> 00:52:30,330
and drop into a tree, and then hook it, right.

00:52:30,330 --> 00:52:31,163
- Yeah.

00:52:31,163 --> 00:52:32,690
- There might be enough churn, it might be hard,

00:52:32,690 --> 00:52:33,690
is that what you're saying?

00:52:33,690 --> 00:52:34,650
- That's what I'm thinking is,

00:52:34,650 --> 00:52:37,000
and you're talking about something where,

00:52:37,000 --> 00:52:39,960
okay, I'm ready to start with a new tree,

00:52:39,960 --> 00:52:42,280
so I clone Linux's tree, but then I have

00:52:42,280 --> 00:52:44,100
to go grab some stuff,

00:52:44,100 --> 00:52:47,650
spool it down, do a SIM link or something, right.

00:52:47,650 --> 00:52:49,575
- And that's my next point is,

00:52:49,575 --> 00:52:51,470
how to bring in that magic too.

00:52:51,470 --> 00:52:52,303
- [Man in Audience] Okay.

00:52:54,040 --> 00:52:55,840
- Is there any specific spec file?

00:52:55,840 --> 00:52:58,070
Do you want to follow up on your question?

00:52:58,070 --> 00:52:59,590
Or are you done?

00:52:59,590 --> 00:53:01,360
Oh, we got something else?

00:53:02,320 --> 00:53:03,950
- Just what you said, Clark.

00:53:03,950 --> 00:53:05,860
There, yes, spec files are something

00:53:05,860 --> 00:53:07,247
that are distro-specific,

00:53:07,247 --> 00:53:09,820
but I think we have enough there,

00:53:09,820 --> 00:53:11,950
that there can be a start of spec file

00:53:11,950 --> 00:53:14,800
more at once, that what's there for make RPM right now,

00:53:14,800 --> 00:53:16,580
and then you build off that,

00:53:16,580 --> 00:53:20,730
so any bug fixes come back, and distros get it for free.

00:53:24,368 --> 00:53:25,201
- I don't know

00:53:25,201 --> 00:53:30,201
that I've ever actually used make RPM from my end and,

00:53:30,500 --> 00:53:32,079
sorry, I don't know that I've actually used

00:53:32,079 --> 00:53:34,120
the upstream make RPM.

00:53:35,250 --> 00:53:36,090
- [Don] Well I've used it.

00:53:36,090 --> 00:53:37,560
It need a lot of tweaking for Red Hat's though.

00:53:37,560 --> 00:53:38,393
- Right.

00:53:39,690 --> 00:53:41,860
- So I've got a couple comments.

00:53:41,860 --> 00:53:42,860
- [Don] Okay.

00:53:42,860 --> 00:53:44,111
- One.

00:53:44,111 --> 00:53:44,944
(feedback blares)

00:53:44,944 --> 00:53:46,240
- [Don] Watch out for the speaker.

00:53:46,240 --> 00:53:48,680
- I'm not talking about the kernel in this case.

00:53:48,680 --> 00:53:51,804
I'm talking about the RDMA core package,

00:53:51,804 --> 00:53:55,570
which is user space, but we maintain similar

00:53:55,570 --> 00:53:58,861
to the kernel stuff, but we did adopt

00:53:58,861 --> 00:54:03,861
a top-level distro subdirectory, in the upstream package.

00:54:04,829 --> 00:54:07,901
And, we tried for a little bit,

00:54:07,901 --> 00:54:12,636
bringing in distro specs or whatever,

00:54:12,636 --> 00:54:14,560
and it turns out that there's

00:54:15,560 --> 00:54:18,130
simply so much customization on each distro,

00:54:18,130 --> 00:54:19,230
really the best we could do,

00:54:19,230 --> 00:54:21,540
and this is a small, simple package mind you,

00:54:21,540 --> 00:54:23,707
not nearly anything like the kernel.

00:54:23,707 --> 00:54:27,835
The best we could do, was actually get

00:54:27,835 --> 00:54:30,530
more or less a template, but it actually turns out

00:54:30,530 --> 00:54:32,556
that that spec file, that template spec file

00:54:32,556 --> 00:54:36,560
is still valuable because as we make changes

00:54:36,560 --> 00:54:38,630
in the upstream RDMA core package,

00:54:38,630 --> 00:54:42,010
we update that spec file, and we show kind of

00:54:42,010 --> 00:54:45,400
what we intended for the way the package

00:54:45,400 --> 00:54:48,100
should be put together, where stuff should go.

00:54:48,100 --> 00:54:50,780
It almost provides a template, spec template,

00:54:50,780 --> 00:54:55,050
that then gives a best practice to distros going forward,

00:54:55,050 --> 00:54:56,900
so they can see the changes, how we intended them

00:54:56,900 --> 00:54:58,270
to be used and everything else.

00:54:58,270 --> 00:55:00,420
- [Don] So is that the way you guys are doing it now?

00:55:00,420 --> 00:55:01,253
- Yes.

00:55:01,253 --> 00:55:02,910
- [Don] I mean, all the distros start from that,

00:55:02,910 --> 00:55:04,680
tweak the template--

00:55:04,680 --> 00:55:06,850
- Well they pull their template into their own stuff.

00:55:06,850 --> 00:55:08,790
Now it's not really feasible,

00:55:08,790 --> 00:55:10,250
or we found it's not really feasible

00:55:10,250 --> 00:55:12,610
to keep pushing the changes to that.

00:55:12,610 --> 00:55:14,720
The distros, you know, I mean, like for instance,

00:55:14,720 --> 00:55:17,020
you don't wanna do an RPM change log,

00:55:17,020 --> 00:55:18,870
being pushed to the upstream repository.

00:55:18,870 --> 00:55:20,670
It's just a total waste of time,

00:55:20,670 --> 00:55:24,960
so the downstream template becomes separate,

00:55:24,960 --> 00:55:28,429
like it always has been, but then as you're moving forward

00:55:28,429 --> 00:55:30,573
when you get updates to the release,

00:55:30,573 --> 00:55:33,360
certain get commits will show,

00:55:35,163 --> 00:55:38,820
patches to this spec template.

00:55:38,820 --> 00:55:41,380
And so then they can turn around and take that patch

00:55:41,380 --> 00:55:44,460
and put the same work into their distro template.

00:55:44,460 --> 00:55:46,316
And it shows 'em what needs to be done and where

00:55:46,316 --> 00:55:47,840
and that kind of thing.

00:55:47,840 --> 00:55:49,540
So that kinda worked out pretty good for us,

00:55:49,540 --> 00:55:52,700
but we were unable, even with our little package,

00:55:52,700 --> 00:55:55,730
we were unable to get a true distro template

00:55:55,730 --> 00:55:59,660
for each distro to go up there, which is just too much.

00:55:59,660 --> 00:56:00,908
- [Don] I knew you could talk all day, Doug.

00:56:00,908 --> 00:56:03,180
I only got a few more minutes though (Doug laughs).

00:56:03,180 --> 00:56:04,630
If you don't, I'm just gonna.

00:56:06,560 --> 00:56:09,338
- Hi, speaking about spec files,

00:56:09,338 --> 00:56:11,946
maybe they are too different between distros,

00:56:11,946 --> 00:56:14,250
but something that could be done

00:56:14,250 --> 00:56:16,282
is to take all the commonality,

00:56:16,282 --> 00:56:20,250
and use for example, RPM macros, and have

00:56:20,250 --> 00:56:22,990
a set of macros that the spec files

00:56:22,990 --> 00:56:24,640
for each distro could use.

00:56:24,640 --> 00:56:27,466
So maybe that's a way to have some common code,

00:56:27,466 --> 00:56:32,346
but even though every spec file is different.

00:56:32,346 --> 00:56:34,760
- Yeah I guess I appreciate the idea

00:56:34,760 --> 00:56:35,786
of the spec file templates.

00:56:35,786 --> 00:56:37,330
My only concern here is,

00:56:38,505 --> 00:56:40,400
someone has to sit down and look at all the spec files,

00:56:40,400 --> 00:56:42,297
and try to figure out what template we can start,

00:56:42,297 --> 00:56:44,520
and we can go down that road if people

00:56:44,520 --> 00:56:45,460
are excite about doing that.

00:56:45,460 --> 00:56:48,100
I'm a little nervous that it's a long

00:56:48,100 --> 00:56:50,040
and exhausting road, and I'm not sure

00:56:50,040 --> 00:56:51,390
how successful it would be.

00:56:53,338 --> 00:56:54,171
- [Man in Audience] Aside from the fact

00:56:54,171 --> 00:56:56,746
that it would not help Debian at all.

00:56:56,746 --> 00:56:57,579
(audience laughs)

00:56:57,579 --> 00:56:59,420
- Right.

00:56:59,420 --> 00:57:01,530
- [Man in Audience] Just a small, you know.

00:57:01,530 --> 00:57:04,030
- Instead I kinda wanna focus on more

00:57:04,030 --> 00:57:06,150
of a high-level problem, that I can help all the distros,

00:57:06,150 --> 00:57:08,830
and I know I got a few minutes.

00:57:08,830 --> 00:57:09,663
Sorry Laura.

00:57:09,663 --> 00:57:13,210
But if I can, I was looking at suggesting maybe like

00:57:13,210 --> 00:57:14,043
a map point.

00:57:14,043 --> 00:57:16,120
One thing we do at Red Hat, we have a Red Hat directory

00:57:16,120 --> 00:57:18,890
that has all our distro magic behind it.

00:57:18,890 --> 00:57:20,123
If we had the ability to,

00:57:20,123 --> 00:57:22,214
if distros had a chance to,

00:57:22,214 --> 00:57:25,790
maybe from a separate getTree to a get sub tree mount,

00:57:25,790 --> 00:57:27,440
or somehow map it some other way,

00:57:27,440 --> 00:57:31,180
so that way, they can get all their distro magic,

00:57:32,170 --> 00:57:34,570
all the time without having to push changes upstream.

00:57:34,570 --> 00:57:36,243
It just happens on the side.

00:57:36,243 --> 00:57:37,913
Or some sort of solution that way,

00:57:37,913 --> 00:57:42,913
as a developer who wants to participate in that distro

00:57:42,964 --> 00:57:45,561
or get involved or see what configs they're using,

00:57:45,561 --> 00:57:48,060
they can easily plug in, they can get an upstream tree,

00:57:48,060 --> 00:57:51,980
plug in to a distro magic and start cranking away.

00:57:53,150 --> 00:57:54,680
Would anyone find that useful?

00:57:56,778 --> 00:57:58,770
You would Debian?

00:57:58,770 --> 00:57:59,603
Hi Neil.

00:57:59,603 --> 00:58:00,436
- Hey Don.

00:58:01,736 --> 00:58:03,600
Not really related to what you just said,

00:58:03,600 --> 00:58:04,433
but I (audience laughs),

00:58:04,433 --> 00:58:06,400
sorry, you know.

00:58:06,400 --> 00:58:08,401
I think it might bear pointing out,

00:58:08,401 --> 00:58:13,401
that commonalities upstream for these distro-specific items,

00:58:14,840 --> 00:58:18,100
might just be transient and coincidental.

00:58:18,100 --> 00:58:21,290
That is to say, we might have some things in common.

00:58:21,290 --> 00:58:22,123
- [Man in Audience] Today.

00:58:22,123 --> 00:58:24,350
- Today, but there's no guarantee that the fact

00:58:24,350 --> 00:58:26,330
that they're common today will make them common

00:58:26,330 --> 00:58:29,270
in perpetuity or even for the next couple days.

00:58:30,240 --> 00:58:32,790
A Debian distro might turn on a new feature,

00:58:33,790 --> 00:58:35,330
for the sake of experimenting with it

00:58:35,330 --> 00:58:38,020
and just making it available to obviously users,

00:58:38,020 --> 00:58:39,830
or a Fedora distribution might do that,

00:58:39,830 --> 00:58:42,330
whereas a REHL or an Ubuntu distribution

00:58:42,330 --> 00:58:44,550
will do something completely different

00:58:44,550 --> 00:58:47,075
based on the fact that a customer wants it.

00:58:47,075 --> 00:58:50,035
And that's not to say that there won't be commonality,

00:58:50,035 --> 00:58:54,482
but the usual values that commonality brings upstream

00:58:54,482 --> 00:58:56,600
might be somewhat less applicable here.

00:58:57,610 --> 00:58:58,675
- I mean I kind of have to disagree

00:58:58,675 --> 00:59:00,562
with that argument though, solely because,

00:59:00,562 --> 00:59:03,270
okay it's true that we can't guarantee commonality,

00:59:03,270 --> 00:59:04,400
but we can't actually guarantee

00:59:04,400 --> 00:59:06,280
anything commonality upstream, is is that

00:59:06,280 --> 00:59:07,570
there's no guarantee that anything's

00:59:07,570 --> 00:59:08,540
gonna stick around upstream,

00:59:08,540 --> 00:59:10,480
so I'd probably say is is that if we can think

00:59:10,480 --> 00:59:12,120
that there seems like there's reasonable work,

00:59:12,120 --> 00:59:13,610
using our best judgment as engineers,

00:59:13,610 --> 00:59:15,072
that would push anything upstream,

00:59:15,072 --> 00:59:18,250
I think it makes sense to try and have it be common.

00:59:18,250 --> 00:59:19,570
- I don't disagree.

00:59:20,410 --> 00:59:22,030
Sorry, I don't disagree with that.

00:59:22,030 --> 00:59:24,573
I think pushing upstream for the sake of pushing upstream

00:59:24,573 --> 00:59:26,000
probably has value.

00:59:27,630 --> 00:59:29,710
My thought just is,

00:59:29,710 --> 00:59:32,478
that typically having something common upstream

00:59:32,478 --> 00:59:36,600
is based on the notion that most people plan to use this,

00:59:36,600 --> 00:59:39,720
and I'm not sure that axiom applies to this commonality.

00:59:43,006 --> 00:59:44,388
- It would at least start a discussion upstream

00:59:44,388 --> 00:59:46,670
at that time,

00:59:46,670 --> 00:59:48,110
it would at least start a discussion upstream

00:59:48,110 --> 00:59:49,840
at that time with all the different distros

00:59:49,840 --> 00:59:51,990
if that is gonna be common, if they see a version

00:59:51,990 --> 00:59:53,390
when it wouldn't be anymore.

00:59:56,240 --> 00:59:57,980
- Okay I think we're just about time,

00:59:57,980 --> 01:00:00,840
so does anyone else have any last comments?

01:00:04,840 --> 01:00:05,673
- [Man in Audience] Just to summarize.

01:00:05,673 --> 01:00:06,570
- Hi Don,

01:00:06,570 --> 01:00:07,503
- [Don] Hi Kyle.

01:00:07,503 --> 01:00:08,740
(audience laughs)

01:00:08,740 --> 01:00:10,760
- I think I got more experience managing distros

01:00:10,760 --> 01:00:12,010
than anybody else here.

01:00:12,010 --> 01:00:14,298
I think you should start with,

01:00:14,298 --> 01:00:16,170
it's a long story.

01:00:16,170 --> 01:00:18,430
I think you should start with the config merging.

01:00:18,430 --> 01:00:19,430
Basically everybody does it.

01:00:19,430 --> 01:00:21,510
Everybody does it in a hierarchal format,

01:00:21,510 --> 01:00:24,240
based on like architecture and, you know,

01:00:25,600 --> 01:00:29,220
some generic thing then x86, then x64.

01:00:29,220 --> 01:00:30,630
Get that stuff upstream, I think that'd be

01:00:30,630 --> 01:00:32,520
a really useful contribution,

01:00:32,520 --> 01:00:34,470
but right now all we have is like the def configs

01:00:34,470 --> 01:00:36,420
and some of the snippet merging.

01:00:36,420 --> 01:00:38,850
I think you should solve the distro config stuff first.

01:00:38,850 --> 01:00:39,810
- I was hoping to get to that,

01:00:39,810 --> 01:00:41,602
but I think like that there. (laughs)

01:00:41,602 --> 01:00:44,356
(audience laughs)

01:00:44,356 --> 01:00:45,750
- So basically what you were looking at,

01:00:45,750 --> 01:00:46,610
what you're trying,

01:00:46,610 --> 01:00:48,230
I know what you're trying to do from the Red Hat side of it,

01:00:48,230 --> 01:00:50,830
but it easily goes to the everything side of it,

01:00:50,830 --> 01:00:52,900
where if you have this top-level directory,

01:00:52,900 --> 01:00:54,280
you have a makefile hook that looks for

01:00:54,280 --> 01:00:56,389
a makefile.distro, you can have

01:00:56,389 --> 01:01:00,080
a standard make source package command

01:01:00,080 --> 01:01:02,420
that makes source packages for whatever distro

01:01:02,420 --> 01:01:03,396
you happen to be as long as you have

01:01:03,396 --> 01:01:06,690
that getTree sub-tree there, and it works for everybody.

01:01:06,690 --> 01:01:08,540
It doesn't matter what your distro magic is,

01:01:08,540 --> 01:01:11,430
because you're getting your distro magic from the distro,

01:01:11,430 --> 01:01:13,076
but the commands are the same.

01:01:13,076 --> 01:01:14,140
- Yeah, but the difference is about,

01:01:14,140 --> 01:01:15,640
we, you keep the distro magic, - right.

01:01:15,640 --> 01:01:17,220
- And do whatever you want to to it,

01:01:17,220 --> 01:01:19,760
but you a common place for it to be brought in.

01:01:19,760 --> 01:01:20,593
- Yeah, but I mean so get so many people

01:01:20,593 --> 01:01:21,900
coming in thrower with,

01:01:21,900 --> 01:01:23,160
"Hey I need to build with this patch,

01:01:23,160 --> 01:01:24,310
"and how do I build with this patch?"

01:01:24,310 --> 01:01:25,900
Now you have a set of documentation

01:01:25,900 --> 01:01:27,590
that everybody can use, and it works

01:01:27,590 --> 01:01:29,670
no matter what your distro is, for,

01:01:29,670 --> 01:01:32,020
"This is how you build your source file there."

01:01:32,915 --> 01:01:35,411
- [Laura] All right I think that's time, so,

01:01:35,411 --> 01:01:36,434
thank you very much Don.

01:01:36,434 --> 01:01:39,434
(audience applauds)

01:01:43,346 --> 01:01:46,346
(audience chatters)

01:01:51,043 --> 01:01:53,293
(laughing)

01:01:56,066 --> 01:01:57,973
- I have some of it.

01:01:57,973 --> 01:02:01,140
(audience chattering)

01:03:06,436 --> 01:03:07,460
Hey.

01:03:07,460 --> 01:03:09,960
(Laura claps)

01:03:12,004 --> 01:03:14,740
Hi, ugh.

01:03:14,740 --> 01:03:15,573
(audience laughs)

01:03:15,573 --> 01:03:18,964
At least the effect of everyone seeing that I'm starting.

01:03:18,964 --> 01:03:22,773
Hi, I'm Matthias, I'm working for Google on Android

01:03:22,773 --> 01:03:24,760
in the London kernel team.

01:03:26,720 --> 01:03:28,820
I'm fairly new to kernels, so bear with me

01:03:28,820 --> 01:03:30,722
in some of the details.

01:03:30,722 --> 01:03:35,060
I always liked working on build systems, ABI,

01:03:35,060 --> 01:03:37,250
so that's my big grunt there.

01:03:38,280 --> 01:03:42,330
Today I'm to talk about how we train Android

01:03:42,330 --> 01:03:45,410
to approach ABI stability of in-kernel ABI.

01:03:45,410 --> 01:03:49,741
I'm not talking any use of anti-VI or something like that.

01:03:49,741 --> 01:03:52,170
It's really what the kernel exposes,

01:03:52,170 --> 01:03:56,469
as an ABI and API towards its modules,

01:03:56,469 --> 01:03:58,770
and how we approach that,

01:03:58,770 --> 01:04:01,430
I know a lot of distro kernels do that for ages,

01:04:01,430 --> 01:04:03,330
and have different approaches on that.

01:04:04,173 --> 01:04:07,789
The Android kernel bits looks slightly different,

01:04:07,789 --> 01:04:11,740
so it was worth reevaluating that approach a bit,

01:04:13,469 --> 01:04:14,900
that others might do.

01:04:16,740 --> 01:04:18,990
Why do we want to do that at all?

01:04:18,990 --> 01:04:23,990
So one major reason is you can't always everything in tree.

01:04:26,060 --> 01:04:27,750
Some things just are out of tree,

01:04:28,710 --> 01:04:32,700
and sometimes it's worth the couple development of kernel

01:04:32,700 --> 01:04:34,610
and the module in some sort.

01:04:35,890 --> 01:04:38,700
And due to that fact, you see that

01:04:38,700 --> 01:04:40,480
in the Android echo system.

01:04:40,480 --> 01:04:43,570
We gain quite some fragmentation of kernels

01:04:43,570 --> 01:04:47,650
between devices, Android versions and all those.

01:04:47,650 --> 01:04:50,370
And, so we want to try to get back

01:04:50,370 --> 01:04:54,410
to a stage where we have kind of a consulate at ABI,

01:04:54,410 --> 01:04:58,550
a generic kernel, image, generic kernel interface,

01:04:58,550 --> 01:05:01,300
and you want to do that through ABI's and API's,

01:05:01,300 --> 01:05:05,080
to restrict how, what we expose to modules,

01:05:05,080 --> 01:05:07,385
what we expose to vendors,

01:05:07,385 --> 01:05:11,130
to actually remove fragment, not remove,

01:05:12,130 --> 01:05:15,730
decrease fragmentation across devices,

01:05:15,730 --> 01:05:17,033
across Android versions,

01:05:17,033 --> 01:05:22,033
having the vision of only one single kernel image

01:05:22,170 --> 01:05:27,170
per architecture, as a vision we follow up.

01:05:27,380 --> 01:05:30,170
Eventually also supporting updates

01:05:31,257 --> 01:05:33,730
of kernels, independently of modules,

01:05:33,730 --> 01:05:37,497
so, being able to.

01:05:37,497 --> 01:05:40,530
So where does is all start in Android eight?

01:05:40,530 --> 01:05:41,880
Not sure many of you know,

01:05:41,880 --> 01:05:45,369
but there was a fairly big project,

01:05:45,369 --> 01:05:50,369
decoupling window parts from yeah,

01:05:50,760 --> 01:05:52,750
more like decoupling window parts.

01:05:52,750 --> 01:05:54,585
So there is a vendor interface,

01:05:54,585 --> 01:05:57,390
which couples all the Android framework,

01:05:57,390 --> 01:06:01,170
from vendor parts like drivers, whole interfaces,

01:06:01,170 --> 01:06:04,530
and still everything that is vendor-specific

01:06:04,530 --> 01:06:07,760
ends up in this big conglomerate of kernel,

01:06:07,760 --> 01:06:10,380
which includes common kernel stuff that we use for Android,

01:06:10,380 --> 01:06:12,430
upstream kernel, but also vendor code.

01:06:12,430 --> 01:06:14,169
So that's not really the coupled.

01:06:14,169 --> 01:06:17,720
And, that's actually what we try to approach,

01:06:17,720 --> 01:06:19,670
that we actually also decouple that,

01:06:19,670 --> 01:06:22,500
so that we have a generic kernel image,

01:06:22,500 --> 01:06:26,700
something that is common across all Android devices.

01:06:26,700 --> 01:06:28,870
We have a set of modules that are common

01:06:28,870 --> 01:06:33,660
across Android devices or Android kernels.

01:06:33,660 --> 01:06:37,900
And then we say, "Do you want to expose a stable ABI

01:06:37,900 --> 01:06:41,800
"and API from that set of image and modules?"

01:06:42,980 --> 01:06:47,980
To allow vendors to plug in their drivers, their modules.

01:06:49,640 --> 01:06:51,140
So that sounds a little fancy,

01:06:51,140 --> 01:06:56,140
but apparently that's not something that's easily done

01:06:56,140 --> 01:06:58,590
in upstream, or it's not something that you want

01:06:58,590 --> 01:07:02,370
to approach in upstream, or no one wants, as far as I know.

01:07:03,340 --> 01:07:06,070
So, how do we, how can we scope that problem?

01:07:06,070 --> 01:07:07,640
How can we reduce that problem,

01:07:07,640 --> 01:07:09,480
to something to make it work?

01:07:09,480 --> 01:07:12,690
First of all, we don't want to do that for mainline.

01:07:12,690 --> 01:07:14,920
We want to do that the LTS branches

01:07:14,920 --> 01:07:19,367
so we want to keep ABI and API stable within LTS branches.

01:07:19,367 --> 01:07:23,260
LTS branches that matter first in that case.

01:07:23,260 --> 01:07:24,360
There is one question.

01:07:29,930 --> 01:07:33,490
- So when you say across LTS versions,

01:07:33,490 --> 01:07:37,430
are you saying you want the same ABI for nine

01:07:37,430 --> 01:07:38,480
and for 14?

01:07:38,480 --> 01:07:42,850
- No, within 4.19, so every, from basically

01:07:42,850 --> 01:07:44,681
the first release to re-released,

01:07:44,681 --> 01:07:49,500
LTS Android version 4.19, whatever,

01:07:49,500 --> 01:07:52,540
and you want to stay within that series.

01:07:52,540 --> 01:07:55,210
You want to stay stable within that series.

01:07:55,210 --> 01:07:58,090
So, we don't expect five, dot, x,

01:07:58,090 --> 01:08:01,150
to be compatible to 4.19, but we expect 4.19N

01:08:03,310 --> 01:08:05,510
to be compatible to 4.19N plus one.

01:08:08,710 --> 01:08:11,040
- Back when I first met Greg at Novell,

01:08:12,010 --> 01:08:14,050
the paper that you have there (audience laughs),

01:08:14,940 --> 01:08:17,220
nonsense about ABI nonsense.

01:08:17,220 --> 01:08:19,650
Have they given up on forcing everybody

01:08:19,650 --> 01:08:20,550
to be in the tree?

01:08:22,330 --> 01:08:25,180
- I think that's, you can encourage people

01:08:25,180 --> 01:08:27,690
to be in the tree, and you can try to get

01:08:27,690 --> 01:08:30,100
more and more stuff in the tree,

01:08:30,100 --> 01:08:31,666
great ones who have been there.

01:08:31,666 --> 01:08:34,835
(audience laughs)

01:08:34,835 --> 01:08:36,563
- [Don] I would love everybody to be in the tree.

01:08:36,563 --> 01:08:38,323
Talk to Qualcom, please.

01:08:38,323 --> 01:08:39,156
(audience laughs)

01:08:39,156 --> 01:08:40,820
- I mean the real thing is that

01:08:40,820 --> 01:08:42,970
we are dealing with vendors that are not in tree,

01:08:42,970 --> 01:08:44,480
and that's a problem.

01:08:44,480 --> 01:08:46,010
And we're working on that, independent,

01:08:46,010 --> 01:08:47,060
I'm working on that independently,

01:08:47,060 --> 01:08:49,298
but we also have to deal with the real world.

01:08:49,298 --> 01:08:51,910
(muffled speaking)

01:08:51,910 --> 01:08:52,851
- [Matthias] Over here?

01:08:52,851 --> 01:08:55,768
(muffled speaking)

01:08:57,859 --> 01:08:58,780
- So does that?

01:08:58,780 --> 01:09:01,850
Okay, if you are trying to stay the same ABI,

01:09:01,850 --> 01:09:05,971
for an N plus one kernel, right, in the same LTS branch,

01:09:05,971 --> 01:09:09,350
does that impose a constraint on the API's

01:09:09,350 --> 01:09:10,890
that are then accepted into the LTS branch.

01:09:10,890 --> 01:09:12,403
- [Man In Background] No.

01:09:12,403 --> 01:09:17,169
- [Man in Audience] No.

01:09:17,169 --> 01:09:22,169
- Okay good (laughs).

01:09:22,800 --> 01:09:26,640
- [Man in Audience] One more.

01:09:26,640 --> 01:09:29,422
(audience laughs)

01:09:29,422 --> 01:09:30,980
- One more thing I wanna add,

01:09:30,980 --> 01:09:33,350
is we also make it easier on ourselves,

01:09:33,350 --> 01:09:35,480
far from all the things the Matthias mentioned there,

01:09:35,480 --> 01:09:39,270
is it also gave us an ability to change this

01:09:39,270 --> 01:09:42,190
every year as we release Android, make Android releases,

01:09:42,190 --> 01:09:45,788
so it's within an LTS release for a year,

01:09:45,788 --> 01:09:48,157
so that's how we reduce the scope.

01:09:48,157 --> 01:09:49,884
And make it manageable.

01:09:49,884 --> 01:09:53,069
(muffled speaking)

01:09:53,069 --> 01:09:56,710
We will change, every year, we can change it.

01:09:56,710 --> 01:09:58,990
We can do that, but within the year,

01:09:58,990 --> 01:10:00,580
we wanna make sure it's the same.

01:10:00,580 --> 01:10:02,640
- Yeah, I did not mention that.

01:10:02,640 --> 01:10:05,350
Not to hide it, but I still hope

01:10:05,350 --> 01:10:10,350
that we can avoid major changes there, so.

01:10:10,480 --> 01:10:12,140
The second part of this configuration,

01:10:12,140 --> 01:10:15,170
obviously we have to agree on a configuration

01:10:15,170 --> 01:10:17,770
that works for all the vendors, and that part.

01:10:18,750 --> 01:10:22,380
Nevertheless we also want to keep configurations stable.

01:10:22,380 --> 01:10:23,710
There is an exception obviously

01:10:23,710 --> 01:10:28,186
if you can change configuration without breaking ABI,

01:10:28,186 --> 01:10:29,550
that's a valid change.

01:10:31,080 --> 01:10:33,529
Then too change, we heard about reproducibility,

01:10:33,529 --> 01:10:37,150
I think we are one step before that.

01:10:37,150 --> 01:10:39,540
We're, I still working on, we are still working

01:10:39,540 --> 01:10:41,810
on hermetic builds, just making sure

01:10:41,810 --> 01:10:45,130
we actually understand all our dependencies,

01:10:45,130 --> 01:10:48,510
because we are not building on the distro we are running,

01:10:48,510 --> 01:10:51,740
so our people are working on it,

01:10:51,740 --> 01:10:53,990
where it keeps people building Android kernels,

01:10:53,990 --> 01:10:56,670
not necessarily running Android to build the kernel,

01:10:56,670 --> 01:10:59,970
probably they won't, so we have all sorts

01:10:59,970 --> 01:11:02,330
of tool chains out there, all the GCC's,

01:11:02,330 --> 01:11:05,650
younger GCC's, so we try to contain that,

01:11:05,650 --> 01:11:08,615
not only compilers, linkers, but all sorts of other tools,

01:11:08,615 --> 01:11:11,050
that the kernel would use,

01:11:11,050 --> 01:11:14,380
down to U-name and Protz or whatever.

01:11:16,240 --> 01:11:17,980
And of course, we want to scope the problem.

01:11:17,980 --> 01:11:20,390
We don't want to make, like everything part

01:11:20,390 --> 01:11:21,630
of this ABI, API.

01:11:21,630 --> 01:11:24,270
We want to make sure we have mechanisms

01:11:24,270 --> 01:11:26,620
to say this is part of the ABI, and that's not.

01:11:27,490 --> 01:11:32,130
So we will have white lists, supposedly and black lists,

01:11:32,130 --> 01:11:34,290
and we might have other mechanisms,

01:11:34,290 --> 01:11:37,500
so the second block is how do we actually do that?

01:11:37,500 --> 01:11:40,230
In Android, we're only targeting currently 4.19

01:11:40,230 --> 01:11:42,210
and for 5x, whatever that will be.

01:11:43,234 --> 01:11:46,220
We say there is one generic kernel configuration

01:11:46,220 --> 01:11:47,860
that might differ between our implement

01:11:47,860 --> 01:11:52,190
and maybe other architectures that we support there.

01:11:53,550 --> 01:11:56,320
Tool chainwise, we say it's clang builds,

01:11:56,320 --> 01:12:00,450
it's whatever the tool chain is that we come with.

01:12:00,450 --> 01:12:03,700
If there is a change to the chain,

01:12:03,700 --> 01:12:08,660
it has to be a non-AVI breaking two chains.

01:12:08,660 --> 01:12:10,580
So we can upgrade compilers,

01:12:10,580 --> 01:12:13,500
as long as we stay stable there.

01:12:13,500 --> 01:12:17,135
And from the scope, we only consider observable AVI,

01:12:17,135 --> 01:12:20,143
so that's maybe the main difference.

01:12:20,143 --> 01:12:23,410
We don't look at code too much.

01:12:23,410 --> 01:12:25,136
We look at the binaries.

01:12:25,136 --> 01:12:28,680
We deduct what is the AVI from the binary

01:12:28,680 --> 01:12:29,513
that we produce.

01:12:30,720 --> 01:12:32,460
White lists are something that we are working on,

01:12:32,460 --> 01:12:33,940
and symbol name space is something

01:12:33,940 --> 01:12:35,740
we most recently discussed upstream.

01:12:36,870 --> 01:12:41,870
To scope AVI's, to say, "Okay, I'm only supporting

01:12:42,880 --> 01:12:46,210
"that name space and every symbol that's in there."

01:12:46,210 --> 01:12:47,790
But that's a different discussion.

01:12:47,790 --> 01:12:50,127
Okay, we use, check the time.

01:12:50,127 --> 01:12:53,910
For, as a tool, we use Libabigial.

01:12:54,860 --> 01:12:56,010
Maytern is sitting here.

01:12:56,010 --> 01:12:58,770
Docci, you get all the credit for that (laughs).

01:13:00,270 --> 01:13:03,110
- Hi, I just wondering if other distros

01:13:03,110 --> 01:13:05,880
actually care that much about keeping the AVI stable,

01:13:05,880 --> 01:13:08,230
because we don't really seem to care that much.

01:13:09,730 --> 01:13:11,934
- [Matthias] Yes, yes, yes.

01:13:11,934 --> 01:13:12,767
(audience laughs)

01:13:12,767 --> 01:13:13,983
Okay.

01:13:13,983 --> 01:13:14,900
- It's just us.

01:13:14,900 --> 01:13:15,733
- Why?

01:13:18,203 --> 01:13:20,411
- [Man in Audience] Because we have customers who give us

01:13:20,411 --> 01:13:21,578
a lot of money to do that.

01:13:21,578 --> 01:13:23,163
- [Audience] Yes.

01:13:23,163 --> 01:13:24,667
- [Man in Audience] That is the only reason.

01:13:24,667 --> 01:13:28,500
- Okay, but I mean for desktop distros though,

01:13:28,500 --> 01:13:31,040
you can always just have, you know, the latest code

01:13:31,040 --> 01:13:31,873
and recompile.

01:13:31,873 --> 01:13:34,640
It's not as, you know, you're not as stuck on,

01:13:34,640 --> 01:13:36,690
you know certain SDK as you would be

01:13:36,690 --> 01:13:37,670
on like Android or something.

01:13:37,670 --> 01:13:39,900
- [Matthias] Having the code might not be the case.

01:13:39,900 --> 01:13:40,973
- I mean--

01:13:40,973 --> 01:13:41,840
- So you might not have access to a code,

01:13:41,840 --> 01:13:45,210
or you might not have, or you might have,

01:13:45,210 --> 01:13:46,670
FL partly module that is maintained

01:13:46,670 --> 01:13:48,370
by someone who has to actually--

01:13:48,370 --> 01:13:51,960
- The desktop, everyone's favorite desktop graphics driver

01:13:51,960 --> 01:13:53,320
is a good example, for example,

01:13:53,320 --> 01:13:55,529
if you wanna ensure that that doesn't work or break

01:13:55,529 --> 01:13:57,310
everything else, which isn't to say

01:13:57,310 --> 01:13:59,225
that the developers of that can't be responsive

01:13:59,225 --> 01:14:00,710
and try and fix it, but the point is,

01:14:00,710 --> 01:14:02,930
is that if you wanna guarantee it won't break,

01:14:02,930 --> 01:14:05,849
that could be a way to do that.

01:14:05,849 --> 01:14:08,794
(muffled speaking)

01:14:08,794 --> 01:14:09,627
Okay.

01:14:10,780 --> 01:14:14,510
- Yeah, just a very, very quick introduction what it does.

01:14:15,450 --> 01:14:19,980
So, Libabigail, it's a set of libraries and tools,

01:14:21,040 --> 01:14:23,736
so mostly the user does, we use the tools

01:14:23,736 --> 01:14:28,540
that come with it, and it specifically allows serializing

01:14:28,540 --> 01:14:31,210
and deserializing ABI from binaries.

01:14:31,210 --> 01:14:35,820
That's for, like, standard ELF binaries,

01:14:35,820 --> 01:14:39,220
but it also got recently, not so recently,

01:14:39,220 --> 01:14:42,890
but recently we worked the support for the kernel.

01:14:42,890 --> 01:14:44,830
And rather than considering ELF symbols

01:14:44,830 --> 01:14:48,113
and DWARF information to deduct that information,

01:14:48,113 --> 01:14:50,800
it actually uses the ksymtab tool

01:14:50,800 --> 01:14:52,460
to follow whatever is really export

01:14:52,460 --> 01:14:54,364
from the kernel export symbol.

01:14:54,364 --> 01:14:57,550
And it does that actually pretty well.

01:14:57,550 --> 01:15:01,840
There is some, some changes to ksymtab regularly

01:15:01,840 --> 01:15:04,110
or at least in 4.19 that broke that support,

01:15:04,110 --> 01:15:07,760
but we have that fixed for emLInux,

01:15:07,760 --> 01:15:10,090
we're still working on, and there's some patch ups

01:15:10,090 --> 01:15:12,238
being posted, very likely to be included soon,

01:15:12,238 --> 01:15:14,290
to fix the further modules as well.

01:15:15,990 --> 01:15:19,910
Basically what it does, it takes either emLinux module

01:15:19,910 --> 01:15:22,970
or a tree and discovers the emLinux and the modules

01:15:22,970 --> 01:15:26,273
and creates an XML, basically a data structure

01:15:26,273 --> 01:15:29,450
in memory, but also serializes to XLM,

01:15:29,450 --> 01:15:31,770
which you can actually take and compare

01:15:31,770 --> 01:15:33,030
to a previous version.

01:15:33,030 --> 01:15:38,030
So if you gather AVI, you say that's my observable AVI.

01:15:38,050 --> 01:15:41,385
You're able to compare to how AVI changes

01:15:41,385 --> 01:15:44,280
in a future version of that binary.

01:15:46,280 --> 01:15:49,050
So just as an example, that's a bit of code.

01:15:49,050 --> 01:15:50,065
- [Laura] We're out for questions.

01:15:50,065 --> 01:15:55,065
- Sorry.

01:15:57,020 --> 01:15:59,440
- So is this, creating this XML,

01:15:59,440 --> 01:16:01,617
is that something in the upstream makefile?

01:16:01,617 --> 01:16:03,640
- That's not part of the makefile,

01:16:03,640 --> 01:16:06,273
that's just basically, you built the kernel,

01:16:06,273 --> 01:16:09,540
and you call one single tool on that tree that you built,

01:16:10,530 --> 01:16:12,780
which is AVIDW.

01:16:12,780 --> 01:16:15,060
It's a tool to basically extract it.

01:16:15,060 --> 01:16:17,860
- Is there any reason not to put it in the kernel build?

01:16:19,758 --> 01:16:22,675
(muffled speaking)

01:16:23,860 --> 01:16:25,600
- I mean, yeah, you have to consider

01:16:25,600 --> 01:16:27,100
that there's an external dependency

01:16:27,100 --> 01:16:28,330
on the right version of the tool,

01:16:28,330 --> 01:16:31,166
so maybe similar to dependency

01:16:31,166 --> 01:16:34,431
on a correct version S patch might be a tool

01:16:34,431 --> 01:16:37,180
that we can refer to in upstream, maybe.

01:16:38,570 --> 01:16:39,920
Someone has opinion it's not that?

01:16:39,920 --> 01:16:41,060
Other than that?

01:16:41,060 --> 01:16:42,410
Other than yes (laughs)?

01:16:44,800 --> 01:16:46,710
- [Man in Audience] Okay, stupid question for you.

01:16:46,710 --> 01:16:51,710
Does all the observable KBI need to remain stable,

01:16:52,687 --> 01:16:54,750
or can it just--

01:16:54,750 --> 01:16:56,650
- Except we have it on a suppression,

01:16:56,650 --> 01:16:58,458
or we say we don't to keep that.

01:16:58,458 --> 01:17:00,900
So if we say that is,

01:17:02,220 --> 01:17:04,690
if you go the way of white lists,

01:17:04,690 --> 01:17:06,810
or if you say, I only keep that name space,

01:17:06,810 --> 01:17:09,030
or that group of symbols or that symbols

01:17:09,030 --> 01:17:11,990
that start with USP underscore stable,

01:17:11,990 --> 01:17:14,310
obviously not, so it depends on

01:17:15,530 --> 01:17:17,840
how you define any suppressions or white lists,

01:17:17,840 --> 01:17:21,190
or things that you don't want to have in your scope.

01:17:21,190 --> 01:17:22,074
- Right, but I'm,

01:17:22,074 --> 01:17:23,430
I think they're in agreement.

01:17:23,430 --> 01:17:25,370
What I'm trying to say is that

01:17:25,370 --> 01:17:27,790
even though it's observable, observable?

01:17:28,630 --> 01:17:31,780
It doesn't necessarily need to be stable,

01:17:31,780 --> 01:17:34,345
and we can have a subset of it

01:17:34,345 --> 01:17:37,270
by blacklisting or white listing.

01:17:37,270 --> 01:17:39,500
I mean, is there any reason

01:17:39,500 --> 01:17:41,960
that everything needs to be stable?

01:17:41,960 --> 01:17:45,000
- Everything is observable, it can technically be used.

01:17:45,000 --> 01:17:49,673
So, and as you all know, whatever is exposed gets used.

01:17:49,673 --> 01:17:51,960
(audience laughs)

01:17:51,960 --> 01:17:53,060
No matter how creepy.

01:17:54,260 --> 01:17:56,220
- Lemme ask this question in a different way.

01:17:56,220 --> 01:17:57,053
- [Matthias] Okay.

01:17:57,053 --> 01:18:00,009
- You are looking at very particular drivers,

01:18:00,009 --> 01:18:02,330
wireless, whatever it is.

01:18:02,330 --> 01:18:04,020
You can come up with that list.

01:18:04,020 --> 01:18:06,630
I think what Debbel is trying to say,

01:18:06,630 --> 01:18:07,463
- Please, try it.

01:18:07,463 --> 01:18:08,640
- Correct me if I'm wrong.

01:18:10,000 --> 01:18:11,800
You know what that subset is.

01:18:11,800 --> 01:18:15,230
You know what that subset, what KVI calls

01:18:15,230 --> 01:18:16,296
are gonna be, right,

01:18:16,296 --> 01:18:19,810
and he's wondering, can you just limit it to that?

01:18:19,810 --> 01:18:20,778
- Yes, I mean essentially, - Yeah you know.

01:18:20,778 --> 01:18:23,990
- You have one thing increase your support space, right.

01:18:23,990 --> 01:18:25,880
You wanna save that one for the mid list.

01:18:25,880 --> 01:18:29,255
I'm telling you exactly what I see.

01:18:29,255 --> 01:18:30,088
- Sorry man.

01:18:30,088 --> 01:18:32,535
- No, no you can--

01:18:32,535 --> 01:18:35,767
(muffled speaking)

01:18:35,767 --> 01:18:36,860
- There should be another one, right?

01:18:36,860 --> 01:18:37,710
- [Man in Audience] There is.

01:18:37,710 --> 01:18:39,192
- Ah, there it is.

01:18:39,192 --> 01:18:40,025
(audience laughs)

01:18:40,025 --> 01:18:41,060
- So, essentially what I'm trying to say

01:18:41,060 --> 01:18:42,420
is that you don't want to increase

01:18:42,420 --> 01:18:45,320
the space you're supporting, because hey,

01:18:45,320 --> 01:18:46,830
a cleave's not very big.

01:18:46,830 --> 01:18:49,290
You can be fixing every bug out there.

01:18:49,290 --> 01:18:52,150
All you say is, "Hey, this is what I'm supporting.

01:18:52,150 --> 01:18:54,220
"Keep it limited," and so on.

01:18:55,370 --> 01:18:57,620
- Maybe two answers, and Sandeep

01:18:57,620 --> 01:18:58,870
at the third one I guess.

01:18:59,820 --> 01:19:04,820
So (laughs) all config is not terribly big,

01:19:05,340 --> 01:19:07,880
maybe I got shot down, no, but, so,

01:19:07,880 --> 01:19:12,310
the amount of symbols is much smaller

01:19:12,310 --> 01:19:15,710
than the amount of standard distro has,

01:19:15,710 --> 01:19:17,600
like Enterprise, SUSE, or Red Hat.

01:19:17,600 --> 01:19:22,600
So our distribution is fairly small, compared to that.

01:19:22,630 --> 01:19:25,970
And yes, we are still figuring out

01:19:25,970 --> 01:19:29,180
what ways we find to scope,

01:19:29,180 --> 01:19:32,070
which symbols we are actually keeping stable.

01:19:32,070 --> 01:19:36,780
So I hope that name spacing is one way of saying,

01:19:36,780 --> 01:19:39,100
okay, we keep these name spaces safe,

01:19:39,100 --> 01:19:43,350
and stable, and modules have to exponentially,

01:19:43,350 --> 01:19:45,123
I'm not sure whether you follow the name space series,

01:19:45,123 --> 01:19:48,160
but modules are supposed to import these name spaces

01:19:48,160 --> 01:19:49,820
so we can actually see modules

01:19:49,820 --> 01:19:52,800
are using certain name spaces,

01:19:52,800 --> 01:19:54,620
and we have to keep them stable,

01:19:54,620 --> 01:19:56,910
because they are used by all vendors.

01:19:56,910 --> 01:19:57,850
- [Man in Audience] Oh.

01:19:57,850 --> 01:19:58,683
- Sandeep?

01:19:58,683 --> 01:19:59,920
- [Sandeep] I will give you

01:19:59,920 --> 01:20:00,753
the third option. - Yeah?

01:20:00,753 --> 01:20:02,490
- I have a example I give.

01:20:02,490 --> 01:20:04,200
Like, for example, we don't necessarily care

01:20:04,200 --> 01:20:05,930
if a file system is a module.

01:20:05,930 --> 01:20:07,579
So if we narrow down, everything down

01:20:07,579 --> 01:20:09,810
to all of these symbols that are explicitly used

01:20:09,810 --> 01:20:11,720
by a file system, like say register file system,

01:20:11,720 --> 01:20:13,195
for example, we don't necessarily care

01:20:13,195 --> 01:20:15,140
about it being stable.

01:20:15,140 --> 01:20:16,960
But the problem with ABI monitoring is obviously,

01:20:16,960 --> 01:20:19,890
you know this, is the structures used within that API

01:20:19,890 --> 01:20:21,470
may eventually end up being used

01:20:21,470 --> 01:20:23,130
is some other API, which we do not,

01:20:23,130 --> 01:20:24,410
we do want to keep stable,

01:20:24,410 --> 01:20:26,630
so it basically boils down to the same problem.

01:20:26,630 --> 01:20:29,490
So that intersection, we will find,

01:20:29,490 --> 01:20:31,710
but, yeah, we can start with,

01:20:31,710 --> 01:20:33,000
okay, this is the restricted one,

01:20:33,000 --> 01:20:34,720
because once we start with the restricted one,

01:20:34,720 --> 01:20:36,266
nothing is gonna work, so we have to basically,

01:20:36,266 --> 01:20:39,430
narrow it down, instead of we should keep it narrow,

01:20:39,430 --> 01:20:41,040
and then open it up.

01:20:41,040 --> 01:20:42,208
Because right now we have

01:20:42,208 --> 01:20:45,250
about two and a half million lines of additional code

01:20:45,250 --> 01:20:47,370
on top of us upstream LTS.

01:20:47,370 --> 01:20:51,330
So, if we restrict anything, it's we know

01:20:51,330 --> 01:20:53,220
that most of the times it's gonna break, then we try it,

01:20:53,220 --> 01:20:54,600
so we basically keeping it open

01:20:54,600 --> 01:20:58,270
and then reducing it down.

01:20:59,980 --> 01:21:04,980
- So one of the things, one of the things

01:21:05,520 --> 01:21:09,680
that we do to keep API stable in Debian

01:21:09,680 --> 01:21:12,830
is sometimes if there's a change to a structure,

01:21:14,210 --> 01:21:16,760
if it's just an extension to the structure,

01:21:16,760 --> 01:21:19,664
and we know that that's structure's already allocated,

01:21:19,664 --> 01:21:24,580
in the core kernel, there's always that extra member.

01:21:24,580 --> 01:21:25,910
It's only used in the core kernel.

01:21:25,910 --> 01:21:27,424
- [Matthias] Like, when--

01:21:27,424 --> 01:21:29,924
- We know that that's backwards compatible, right.

01:21:31,390 --> 01:21:32,273
- [Matthias] Basically.

01:21:32,273 --> 01:21:37,273
- When using the symbol version support for API,

01:21:37,900 --> 01:21:41,540
we can do a, well JK7 will read through code.

01:21:41,540 --> 01:21:44,660
Again, we can use ifdef to hide that.

01:21:46,680 --> 01:21:49,841
Do you have a way to hide those sorts of changes,

01:21:49,841 --> 01:21:53,110
or exclude those sorts of changes with Libabigail,

01:21:53,110 --> 01:21:56,250
where you that the changes is backward compatible?

01:21:57,280 --> 01:21:59,630
Or does it have its own ability to detect that?

01:22:00,970 --> 01:22:04,010
- [Man in Audience] You want to answer that?

01:22:05,000 --> 01:22:08,650
- Some things in Libabigail still with work in progress.

01:22:08,650 --> 01:22:10,418
Some of these things are actually supported,

01:22:10,418 --> 01:22:14,710
so some of the twists between what is compatible

01:22:14,710 --> 01:22:16,260
and what is not compatible are,

01:22:18,150 --> 01:22:19,500
can be be detected by Abigail,

01:22:19,500 --> 01:22:22,180
and some of them are considered harmless,

01:22:22,180 --> 01:22:25,270
some of them considered an actual breakage.

01:22:26,230 --> 01:22:27,730
It depends very much on the use case.

01:22:27,730 --> 01:22:29,670
I have some further slides

01:22:29,670 --> 01:22:32,338
to give some very limited use cases on how

01:22:32,338 --> 01:22:35,153
it might look like and how easy it gets arguable

01:22:35,153 --> 01:22:37,880
of what is a harmless change.

01:22:40,130 --> 01:22:43,570
- Thank you, so, do you know Valgrind?

01:22:44,540 --> 01:22:45,373
A bit, yeah.

01:22:45,373 --> 01:22:47,760
So in Valgrand you have suppressions,

01:22:47,760 --> 01:22:51,570
where you can suppress some, you know, some stuff

01:22:51,570 --> 01:22:52,670
you don't want to see.

01:22:53,510 --> 01:22:55,794
So in Libabigail, we have the same,

01:22:55,794 --> 01:22:59,660
well something similar, where you can say

01:22:59,660 --> 01:23:03,058
that, you know, for instance, in this structure,

01:23:03,058 --> 01:23:06,470
I've got a new data member that got added,

01:23:06,470 --> 01:23:09,600
but I know that in this particular case,

01:23:09,600 --> 01:23:11,940
because the structure was padded for instance,

01:23:11,940 --> 01:23:16,940
this new data member is not increasing the size

01:23:17,110 --> 01:23:18,402
of the structure, right.

01:23:18,402 --> 01:23:22,450
And so I don't want to have this thing flagged at all.

01:23:22,450 --> 01:23:24,770
Then you can define a suppression,

01:23:24,770 --> 01:23:28,640
just like in Valgrand, naming specifically the type,

01:23:28,640 --> 01:23:30,130
and that data member saying that

01:23:30,130 --> 01:23:33,380
okay, in this case, don't, you know, don't bark, yeah.

01:23:37,090 --> 01:23:38,780
- So I'm curious how you address things

01:23:38,780 --> 01:23:40,400
which aren't seen in ABI.

01:23:40,400 --> 01:23:42,400
So for example, lock in sematic changes.

01:23:44,110 --> 01:23:47,220
Is there a way to represent them, to track them?

01:23:47,220 --> 01:23:50,660
- There are some things that we can currently not track.

01:23:50,660 --> 01:23:53,430
And we maybe, I just jump forward,

01:23:54,620 --> 01:23:57,390
one, one, one sentence, basically, such,

01:23:58,390 --> 01:24:02,200
such a representation looks like you,

01:24:02,200 --> 01:24:03,770
you have the symbols, you have the variables,

01:24:03,770 --> 01:24:05,461
you have some DWARF information offsets well.

01:24:05,461 --> 01:24:08,020
That's not too surprising.

01:24:08,020 --> 01:24:09,550
I will skip over that now.

01:24:13,107 --> 01:24:18,107
So one potential breakage would look like that, for example.

01:24:19,310 --> 01:24:21,350
You have a removed function,

01:24:21,350 --> 01:24:22,960
basically just remove that function,

01:24:22,960 --> 01:24:26,640
and it's reporting as a breakage.

01:24:26,640 --> 01:24:28,659
So these are kind of cases that are straightforward.

01:24:28,659 --> 01:24:31,220
Edit functions, similar, yeah.

01:24:32,360 --> 01:24:36,545
Member changes, and I would do into the interesting ones

01:24:36,545 --> 01:24:39,190
that are actually, yeah,

01:24:39,190 --> 01:24:41,070
that section in section one.

01:24:41,070 --> 01:24:43,370
Sorting enum values alphabetically,

01:24:43,370 --> 01:24:45,474
because I just was there.

01:24:45,474 --> 01:24:47,740
Yeah.

01:24:47,740 --> 01:24:51,650
It's a breakage, but you can consider it and API breakage,

01:24:51,650 --> 01:24:52,890
rather than an ABI breakage.

01:24:52,890 --> 01:24:56,370
So that's also occupy-able, but Abigail detects that.

01:24:56,370 --> 01:24:58,946
Interesting things are like untagged enums,

01:24:58,946 --> 01:25:03,300
that we actually don't see in the ABI.

01:25:03,300 --> 01:25:06,140
So that is from Linux mm.h,

01:25:07,272 --> 01:25:08,920
and reaching into region intersect returns,

01:25:08,920 --> 01:25:12,260
and in like literally the value of either of them.

01:25:12,260 --> 01:25:14,180
And we were not able to track that.

01:25:14,180 --> 01:25:15,830
That's not a symbol, that's not something

01:25:15,830 --> 01:25:19,305
that is exposes to the ABI, as part of ELF or DWARF.

01:25:19,305 --> 01:25:21,677
So, we are working on that,

01:25:21,677 --> 01:25:26,380
but it's like, if someone sorts that,

01:25:26,380 --> 01:25:29,370
as well, it's unsorted the code, so.

01:25:30,530 --> 01:25:31,690
What will happen is,

01:25:33,100 --> 01:25:35,460
what we can do is we actually can capture it,

01:25:35,460 --> 01:25:37,928
in a data search, that we can capture.

01:25:37,928 --> 01:25:40,170
Well that's just PUTO code

01:25:40,170 --> 01:25:42,440
of how that would be exposed to the ABI,

01:25:42,440 --> 01:25:44,553
but I could imagine that we can work

01:25:44,553 --> 01:25:48,569
on compiler passes or just code generation

01:25:48,569 --> 01:25:51,129
to actually capture these kind of things.

01:25:51,129 --> 01:25:53,260
Well it would,

01:25:54,360 --> 01:25:57,260
actually also include something like lock semantics,

01:25:57,260 --> 01:26:00,110
I have to think longer about that, I believe,

01:26:00,110 --> 01:26:01,600
but we--

01:26:01,600 --> 01:26:03,714
- [Man in Audience] Are you going to capture side effects?

01:26:03,714 --> 01:26:05,154
- Yes, but the thing is,

01:26:05,154 --> 01:26:08,377
there's a thin line between things you can capture

01:26:08,377 --> 01:26:10,648
as part of the ABI and things

01:26:10,648 --> 01:26:14,660
that are also part of the API change.

01:26:14,660 --> 01:26:16,140
So there's an API change

01:26:16,140 --> 01:26:18,500
that you could technically capture here,

01:26:18,500 --> 01:26:20,830
as a part of the exposed ABI.

01:26:20,830 --> 01:26:23,065
- Well I guess now, this could actually

01:26:23,065 --> 01:26:26,630
for spectro programming, in some sense,

01:26:26,630 --> 01:26:29,560
maybe if you expect the lock to be held coming in.

01:26:29,560 --> 01:26:31,690
If you add in a third in your code,

01:26:31,690 --> 01:26:34,120
asserting that lock is held coming in.

01:26:34,120 --> 01:26:35,920
Perhaps this tool could actually see

01:26:37,080 --> 01:26:38,970
if the third is there or not.

01:26:38,970 --> 01:26:40,869
- It depends a bit on what we can expose.

01:26:40,869 --> 01:26:43,577
- Yeah.

01:26:43,577 --> 01:26:44,920
- [Matthias] Behind you.

01:26:46,380 --> 01:26:48,570
- Sorry, so in this particular case,

01:26:50,160 --> 01:26:51,550
what, so if I understand correctly,

01:26:51,550 --> 01:26:55,340
what you would like to do is to capture

01:26:55,340 --> 01:26:59,545
this change, right, even though the type doesn't appear

01:26:59,545 --> 01:27:03,130
in the signature of this function.

01:27:03,130 --> 01:27:06,100
So one thing that, okay,

01:27:06,100 --> 01:27:07,410
just so that people understand,

01:27:07,410 --> 01:27:10,620
what we do today in the model that we use today,

01:27:10,620 --> 01:27:15,620
is that we infer the set of types

01:27:17,000 --> 01:27:21,170
that are part of what we consider as an ABI,

01:27:21,170 --> 01:27:23,410
we infer that set from,

01:27:26,070 --> 01:27:29,910
from the functions and variables that are public,

01:27:29,910 --> 01:27:31,220
that have their symbols public.

01:27:31,220 --> 01:27:34,706
For instance, this REGION_INTERSECTS function

01:27:34,706 --> 01:27:38,160
will have a symbol generated, okay,

01:27:38,160 --> 01:27:41,112
so we'll detect that, and then we'll go and find out

01:27:41,112 --> 01:27:43,255
the definition of this function,

01:27:43,255 --> 01:27:46,500
and see that oh, the function returns an integer,

01:27:46,500 --> 01:27:48,552
blah, blah, blah, it takes other types.

01:27:48,552 --> 01:27:52,530
And then from that, we'll integer the integer type

01:27:52,530 --> 01:27:54,670
and the other types will be part

01:27:54,670 --> 01:27:56,540
of what we consider as an ABI.

01:27:57,767 --> 01:27:59,650
The other thing that we can do as well,

01:27:59,650 --> 01:28:03,730
is to say, okay, whenever we see a type in the DWARF,

01:28:03,730 --> 01:28:06,950
even if that type is not used by a function,

01:28:06,950 --> 01:28:10,150
let's consider it as part of the ABI.

01:28:11,040 --> 01:28:13,540
So in that case, we would detect that

01:28:13,540 --> 01:28:18,540
and type enum, okay, even though it is not used by any type,

01:28:19,370 --> 01:28:22,100
by and function or variable.

01:28:22,100 --> 01:28:25,180
The reason why we're not doing that by default today,

01:28:25,180 --> 01:28:26,670
there is an option to do that,

01:28:26,670 --> 01:28:28,760
is that we explode in memory,

01:28:28,760 --> 01:28:31,090
because there are like, you know,

01:28:31,090 --> 01:28:34,420
the graph of type will be huge,

01:28:34,420 --> 01:28:38,860
but if you know that any type

01:28:38,860 --> 01:28:42,030
that is in any include/Linux/something,

01:28:42,910 --> 01:28:45,320
is meant to part of the ABI,

01:28:45,320 --> 01:28:47,670
then we can just, you know (laughs),

01:28:47,670 --> 01:28:50,580
set that up into the ABI set,

01:28:50,580 --> 01:28:51,510
but yeah, is that what--

01:28:51,510 --> 01:28:52,635
- [Matthias] And just--

01:28:52,635 --> 01:28:53,468
- Is that what we want?

01:28:53,468 --> 01:28:55,060
- And then trying to state somethings

01:28:55,060 --> 01:28:56,210
that are like corner cases,

01:28:56,210 --> 01:28:58,820
where you're currently not able to capture it.

01:28:58,820 --> 01:29:01,520
And it's not, it's not a trivia problem to solve that.

01:29:04,140 --> 01:29:06,050
There's a question there,

01:29:06,050 --> 01:29:07,490
and I have two minutes.

01:29:07,490 --> 01:29:09,130
I would just,

01:29:09,130 --> 01:29:11,080
accept the question but go to the next slide

01:29:11,080 --> 01:29:12,100
to show the other.

01:29:12,100 --> 01:29:13,070
- [Man in Audience] Extending slide.

01:29:13,070 --> 01:29:13,920
- I'll do it, like.

01:29:13,920 --> 01:29:15,000
- [Man in Audience] I am an author of--

01:29:15,000 --> 01:29:15,833
- Paralyzed it.

01:29:15,833 --> 01:29:16,910
- [Man in Audience] Of semantics.

01:29:16,910 --> 01:29:18,910
The semantics part, because we are limiting

01:29:18,910 --> 01:29:20,283
ourselves down to LTS changes.

01:29:20,283 --> 01:29:22,950
I don't know how many times locking semantics

01:29:22,950 --> 01:29:24,250
change within an LTS change,

01:29:24,250 --> 01:29:27,280
and that's basically, something that as of now,

01:29:27,280 --> 01:29:30,370
at least we're going, doing the old-fashioned way

01:29:30,370 --> 01:29:31,270
in our world to figure out,

01:29:31,270 --> 01:29:32,410
see if what secure breaks,

01:29:32,410 --> 01:29:33,350
I don't think we any fast,

01:29:33,350 --> 01:29:35,360
'cause if you care about locking semantics,

01:29:35,360 --> 01:29:36,480
you have to care about pretty much

01:29:36,480 --> 01:29:37,830
all of exported API semantics.

01:29:37,830 --> 01:29:40,480
It doesn't necessarily come down to just locks, right.

01:29:40,480 --> 01:29:43,480
But we will, I'm sure, we will run

01:29:43,480 --> 01:29:45,820
into these cases, that as you may have already,

01:29:45,820 --> 01:29:47,230
because we are starting,

01:29:47,230 --> 01:29:49,930
and you guys have 10 years head start.

01:29:49,930 --> 01:29:51,160
But we'll see.

01:29:51,160 --> 01:29:53,360
As of now, we don't have any plans at least.

01:29:54,710 --> 01:29:57,450
- Okay, I have 30 seconds before we,

01:29:58,900 --> 01:30:01,630
one thing that is part of our process,

01:30:01,630 --> 01:30:03,050
that is maybe worth mentioning,

01:30:03,050 --> 01:30:04,500
is let me correctly go there.

01:30:08,150 --> 01:30:09,120
Oops.

01:30:09,120 --> 01:30:10,040
That's that one.

01:30:10,040 --> 01:30:14,490
So, our tooling in Android capture,

01:30:14,490 --> 01:30:15,770
like it's a bit scripted.

01:30:15,770 --> 01:30:17,440
It's not something very interesting,

01:30:17,440 --> 01:30:19,881
but what we do is all these things that I mentioned before.

01:30:19,881 --> 01:30:21,660
We try to capture the tool chain,

01:30:22,540 --> 01:30:24,679
cross-compilers, to make it,

01:30:24,679 --> 01:30:29,679
like, everyone who builds that kernel gets the same result,

01:30:31,050 --> 01:30:31,922
in theory.

01:30:31,922 --> 01:30:35,268
We try to make that easy, so you see it's three steps

01:30:35,268 --> 01:30:36,680
to actually get there,

01:30:36,680 --> 01:30:39,640
besides getting repo, which is a story in its own.

01:30:41,050 --> 01:30:44,840
But it, that repo sync command basically gives you

01:30:44,840 --> 01:30:46,750
all of the tool chain and everything that you need

01:30:46,750 --> 01:30:50,620
to build the kernel in the same way everyone does,

01:30:50,620 --> 01:30:53,389
and build ABI's, just to wrap around Abigail,

01:30:53,389 --> 01:30:56,290
and to build, have the kernel built.

01:30:56,290 --> 01:30:58,130
And we've then basically do,

01:30:58,130 --> 01:31:01,270
I'm sure some of your are familiar with Gerrit,

01:31:01,270 --> 01:31:03,100
but it's not so much about Gerrit.

01:31:03,100 --> 01:31:06,420
It's whatever code review or whatever tool you have,

01:31:06,420 --> 01:31:07,959
you states changes into.

01:31:07,959 --> 01:31:12,059
It's able to actually report such a difference.

01:31:12,059 --> 01:31:16,450
In our case, whenever someone uploads a change

01:31:16,450 --> 01:31:18,000
to it, and for a common kernel,

01:31:19,290 --> 01:31:21,050
it runs through that ABI check

01:31:21,050 --> 01:31:23,800
and validates against the pre-defined ABI.

01:31:23,800 --> 01:31:24,750
So in that case, I,

01:31:26,900 --> 01:31:29,141
changes something that is obviously a breakage,

01:31:29,141 --> 01:31:31,560
and even if you can read that,

01:31:31,560 --> 01:31:35,170
it impacts 6000 symbols indirectly.

01:31:36,760 --> 01:31:38,400
Just by the single line, and,

01:31:38,400 --> 01:31:41,860
but it also shows you where exactly you change something,

01:31:41,860 --> 01:31:45,500
sort of root cause, being that member insertion there.

01:31:45,500 --> 01:31:50,166
That's how we track changes in Android kernels,

01:31:50,166 --> 01:31:52,810
but that's tooling is fairly generic

01:31:52,810 --> 01:31:56,080
to be integrated in whatever your workflow or processes

01:31:56,080 --> 01:31:57,650
on creating new changes.

01:31:58,860 --> 01:32:02,540
The thing is everything, including two-chain changes,

01:32:02,540 --> 01:32:04,743
everything affects the binary radiant,

01:32:04,743 --> 01:32:07,575
needs to run through that process.

01:32:07,575 --> 01:32:10,070
So you cannot just say "I update clang,

01:32:10,070 --> 01:32:13,111
"and I don't care what the kernel

01:32:13,111 --> 01:32:14,490
"would look like afterward."

01:32:14,490 --> 01:32:16,000
So everything that is part of it,

01:32:16,000 --> 01:32:19,710
and that's about it what I wanted to say.

01:32:19,710 --> 01:32:20,983
Thanks for the discussion.

01:32:20,983 --> 01:32:23,983
(audience applauds)

01:32:25,770 --> 01:32:26,660
- Okay, let's get started.

01:32:26,660 --> 01:32:29,240
So hi I'm Guillaume Tucker, I work at Collbara,

01:32:29,240 --> 01:32:31,319
and first I will start with a few slides

01:32:31,319 --> 01:32:33,919
to give a bit of context, why I think it's important

01:32:33,919 --> 01:32:38,820
to see what KernelCI can do with distribution kernels.

01:32:38,820 --> 01:32:40,610
It's not obvious whether it's a good tool or not,

01:32:40,610 --> 01:32:42,270
so hopefully by the end of this session,

01:32:42,270 --> 01:32:43,383
we'll know a bit better.

01:32:43,383 --> 01:32:46,630
So I'll start very quickly with some background

01:32:46,630 --> 01:32:47,463
about KernelCI.

01:32:47,463 --> 01:32:49,703
So first there's a project you will find

01:32:49,703 --> 01:32:52,320
of kernelci.org website.

01:32:52,320 --> 01:32:55,370
That started in 2015 around the ARM ecosystem

01:32:55,370 --> 01:32:58,647
to test a wide variety of platforms,

01:32:58,647 --> 01:33:01,250
and has been growing a lot since then,

01:33:01,250 --> 01:33:02,887
testing all architectures,

01:33:02,887 --> 01:33:04,703
and projects been going up and down,

01:33:04,703 --> 01:33:07,030
well, at different paces through a time,

01:33:07,030 --> 01:33:09,495
but now it looks like it's gonna make its way

01:33:09,495 --> 01:33:13,351
into the Linux Foundation as a properly supported project

01:33:13,351 --> 01:33:15,255
so that's pretty good.

01:33:15,255 --> 01:33:19,340
It's dedicated to testing upstream kernel branches.

01:33:21,380 --> 01:33:23,840
And then, KernelCI is also,

01:33:23,840 --> 01:33:27,094
it also refers to the tool that is used by kernelci.org,

01:33:27,094 --> 01:33:30,620
and of course, there's no reason why you couldn't install

01:33:30,620 --> 01:33:32,760
another instance of it to test anything else

01:33:32,760 --> 01:33:35,040
you would want with that,

01:33:35,040 --> 01:33:37,260
such as a distribution kernel for example.

01:33:39,040 --> 01:33:42,270
However what does it take to test a distribution kernel

01:33:42,270 --> 01:33:44,900
as compared with upstream?

01:33:46,880 --> 01:33:48,530
So first I will start with a few data points.

01:33:48,530 --> 01:33:51,490
I mean these are things people already kind of know,

01:33:51,490 --> 01:33:53,010
but I just wanted to share them here

01:33:53,010 --> 01:33:54,960
to have an idea of the dimension of it.

01:33:55,800 --> 01:33:58,580
So you have, you know, hundreds of thousands

01:33:58,580 --> 01:34:00,130
of lines of code, and thousands

01:34:00,130 --> 01:34:05,000
of config options enabled in distributions kernels.

01:34:05,000 --> 01:34:06,850
That's for Fedora and for Debian.

01:34:06,850 --> 01:34:08,350
But just these two, of course,

01:34:09,530 --> 01:34:10,770
there's many other distributions.

01:34:10,770 --> 01:34:13,820
Maybe Ubunto would be a better comparison with Fedora.

01:34:13,820 --> 01:34:16,410
The idea here is to just give a couple of data points

01:34:16,410 --> 01:34:18,560
to show that there's quite a big gap of course,

01:34:18,560 --> 01:34:22,130
between distribution kernels and upstream.

01:34:22,130 --> 01:34:26,730
What does that mean from a KernelCI point of view?

01:34:26,730 --> 01:34:29,430
It means it's just on the edge of what a project does,

01:34:29,430 --> 01:34:31,535
because while all these distributions

01:34:31,535 --> 01:34:34,520
are tracking upstream, they have a huge patch set

01:34:34,520 --> 01:34:38,070
and not all of that is going to be sent upstream.

01:34:38,070 --> 01:34:43,070
So, also the arbitrary config choices,

01:34:43,170 --> 01:34:45,720
arbitrary choices made in the distro configs

01:34:45,720 --> 01:34:48,959
means that testing then is not always necessarily useful

01:34:48,959 --> 01:34:50,360
from an upstream point to you

01:34:50,360 --> 01:34:53,118
because they all have very biased choices.

01:34:53,118 --> 01:34:55,902
And the last line I put here is actually--

01:34:55,902 --> 01:34:57,260
(feedback blares)

01:34:57,260 --> 01:34:58,550
is actually not always true

01:34:58,550 --> 01:35:00,550
about higher build costs,

01:35:00,550 --> 01:35:02,620
is because big defconfigs it's true.

01:35:02,620 --> 01:35:04,890
It's almost like an normal config,

01:35:04,890 --> 01:35:07,460
but some distros have a very small footprint,

01:35:07,460 --> 01:35:09,640
so it's not always true,

01:35:09,640 --> 01:35:14,360
but that's typical with like desktop or server distros.

01:35:14,360 --> 01:35:16,070
Got some microphones here, by the way,

01:35:16,070 --> 01:35:18,382
if anybody wants to interrupt and ask a question,

01:35:18,382 --> 01:35:21,450
please just ask and I'll throw that Catch Box at you.

01:35:22,750 --> 01:35:27,750
So first question, I'd like to get an answer for is,

01:35:27,940 --> 01:35:31,558
well, can KernelCI be used to test distribution kernels?

01:35:31,558 --> 01:35:36,520
What it can currently do, it build an arbitrary git branch

01:35:36,520 --> 01:35:39,480
with defconfigs that are already in the branch.

01:35:40,600 --> 01:35:42,130
It's possible to have some fragments

01:35:42,130 --> 01:35:45,150
to apply on top of that, but nothing too advanced.

01:35:45,150 --> 01:35:47,510
And then it can test a plain kernel image,

01:35:47,510 --> 01:35:50,260
image file, likely there isn't a make mod,

01:35:51,510 --> 01:35:54,190
and store the results when it has tested them.

01:35:54,190 --> 01:35:56,920
It stores the test results as associated

01:35:56,920 --> 01:35:58,140
with the kernel revision.

01:35:58,140 --> 01:36:00,990
And of course, a defconfig, an architecture build window.

01:36:02,370 --> 01:36:03,631
The point that it's testing is really

01:36:03,631 --> 01:36:06,600
the version from the git history.

01:36:07,520 --> 01:36:12,520
So what I think would be needed to extend support

01:36:12,690 --> 01:36:14,640
for distributions would be to able

01:36:14,640 --> 01:36:18,350
to add some hooks before the build gets started

01:36:18,350 --> 01:36:21,950
to be able to generate a distribution defconfig,

01:36:21,950 --> 01:36:26,500
and also do any, like pre-processing that's needed

01:36:26,500 --> 01:36:27,780
to get the source in the right shape

01:36:27,780 --> 01:36:30,060
to build the distribution kernel.

01:36:30,060 --> 01:36:30,893
Then do the build.

01:36:30,893 --> 01:36:34,430
And after that, there's packaging of course,

01:36:34,430 --> 01:36:35,920
'cause instead of testing a plain image,

01:36:35,920 --> 01:36:40,160
we want to have maybe a deb or rpm package,

01:36:40,160 --> 01:36:42,450
and then have that installed to also test

01:36:42,450 --> 01:36:45,920
the installed part, and see how that works,

01:36:45,920 --> 01:36:47,270
without any ground effects.

01:36:48,472 --> 01:36:50,080
Sorry, question there.

01:36:54,140 --> 01:36:56,490
- Hi, My name is Don Zickus,

01:36:56,490 --> 01:36:59,430
I was speaking earlier about stuff like this.

01:36:59,430 --> 01:37:00,530
My question to you is,

01:37:01,560 --> 01:37:03,530
what type of pains do you have to go through

01:37:03,530 --> 01:37:07,450
in order to get this to work in KernelCI, and what,

01:37:07,450 --> 01:37:09,440
I know you talked about what we can do to make it easier,

01:37:09,440 --> 01:37:10,940
but what's your current pains?

01:37:12,180 --> 01:37:13,013
- Well right now,

01:37:13,013 --> 01:37:14,720
we're not really testing distribution kernels,

01:37:14,720 --> 01:37:17,020
but what we are doing is testing mainline kernels

01:37:17,020 --> 01:37:19,660
with a few config fragments to enable some things,

01:37:19,660 --> 01:37:23,310
like enable virtual media drivers like Vivid driver.

01:37:23,310 --> 01:37:25,050
That's, we have a fragment for that--

01:37:25,050 --> 01:37:28,390
- [Don] And your hesitation from testing distro kernels

01:37:28,390 --> 01:37:31,260
is because you don't have a way to hook in?

01:37:31,260 --> 01:37:32,790
- Yeah, so I looked at how,

01:37:35,380 --> 01:37:37,170
defconfigs are generated, and yes,

01:37:37,170 --> 01:37:38,350
and then we need a special hook,

01:37:38,350 --> 01:37:40,090
and each distribution would need something different,

01:37:40,090 --> 01:37:43,300
because they have random pearl scripts or whatever

01:37:43,300 --> 01:37:45,040
to generate the defconfig,

01:37:45,040 --> 01:37:46,800
so if it was in a getTree it would be fine.

01:37:46,800 --> 01:37:48,280
If it's not in getTree, if you just want

01:37:48,280 --> 01:37:50,330
to test what the distro currently uses,

01:37:50,330 --> 01:37:51,708
there would need to be a hook somewhere,

01:37:51,708 --> 01:37:54,680
which is possible, but it's like one day after,

01:37:54,680 --> 01:37:56,313
one thing that would need to be added.

01:37:56,313 --> 01:37:57,801
- [Man in Audience] To make that distro?

01:37:57,801 --> 01:37:58,634
- Yeah.

01:38:00,710 --> 01:38:02,240
Yeah, that's what I was trying to talk to before,

01:38:02,240 --> 01:38:03,370
is like how do we have a generic hook,

01:38:03,370 --> 01:38:05,863
that you know if you hook in various distros,

01:38:05,863 --> 01:38:09,950
make it easy for CI systems to just plug in

01:38:09,950 --> 01:38:11,050
and start testing.

01:38:11,050 --> 01:38:13,360
- Yeah, absolutely, I was at your talk earlier,

01:38:13,360 --> 01:38:15,180
and that's one of the possibilities,

01:38:15,180 --> 01:38:16,860
instead of changing kernel site

01:38:16,860 --> 01:38:18,423
to be able to do that, we can make upstream

01:38:18,423 --> 01:38:20,940
have an option to do that and it would be easier.

01:38:20,940 --> 01:38:22,150
- And if upstream has an option--

01:38:22,150 --> 01:38:22,983
- [Laura] Speak in.

01:38:22,983 --> 01:38:24,370
Speak closer.

01:38:24,370 --> 01:38:25,320
- Yep.

01:38:25,320 --> 01:38:26,543
- [Laura] Closer, not louder.

01:38:26,543 --> 01:38:28,090
- Oh, sorry.

01:38:28,090 --> 01:38:29,660
You know if upstream has the option

01:38:29,660 --> 01:38:31,750
I'm pretty sure distros will start picking it up,

01:38:31,750 --> 01:38:34,500
because having a common infrastructure to test

01:38:34,500 --> 01:38:38,130
is much much more useful that you imagine.

01:38:38,130 --> 01:38:39,790
- [Guillaume] Yeah, absolutely.

01:38:39,790 --> 01:38:41,720
- Is there really any benefit though,

01:38:41,720 --> 01:38:44,111
to testing the packaging processes,

01:38:44,111 --> 01:38:47,860
like does it matter that it's an rpm

01:38:47,860 --> 01:38:50,290
versus just testing the kernel tree

01:38:50,290 --> 01:38:52,400
and the way that you do upstream?

01:38:52,400 --> 01:38:54,430
- Not really but that kind of leads into

01:38:54,430 --> 01:38:56,070
what I'm talking about next,

01:38:56,070 --> 01:38:58,059
is testing the distro kernel as part of the,

01:38:58,059 --> 01:39:00,383
as a distro OS image,

01:39:00,383 --> 01:39:03,872
and then it needs to be installed using their packaging,

01:39:03,872 --> 01:39:07,360
because the OS image becomes like a test for the kernel,

01:39:07,360 --> 01:39:09,220
and if you change something like,

01:39:09,220 --> 01:39:10,450
if you have a different version

01:39:10,450 --> 01:39:12,587
of system D or whatever, or different loop C,

01:39:12,587 --> 01:39:14,803
that might exercise the kernel in a different way,

01:39:14,803 --> 01:39:17,900
and you need to keep track of that.

01:39:17,900 --> 01:39:18,990
And it's this loop here.

01:39:18,990 --> 01:39:20,480
Yeah, sorry, carry on (laughs).

01:39:21,360 --> 01:39:23,410
- So there's still a lot of value

01:39:23,410 --> 01:39:24,945
in just building the kernel,

01:39:24,945 --> 01:39:28,650
and running it on a setup system,

01:39:28,650 --> 01:39:30,940
having, converting it to an rpm

01:39:30,940 --> 01:39:34,030
doesn't really help or make it harder.

01:39:35,870 --> 01:39:37,500
So I mean if I have, let's say

01:39:37,500 --> 01:39:39,007
a brand new System D.

01:39:39,007 --> 01:39:43,200
That is independent of the kernel version.

01:39:43,200 --> 01:39:45,250
It doesn't matter how I will install the kernel,

01:39:45,250 --> 01:39:46,900
as long as I have the new kernel.

01:39:47,970 --> 01:39:52,970
So I'm not convinced the rpm building and so on is--

01:39:55,350 --> 01:39:57,700
- I think that's wishful thinking.

01:39:57,700 --> 01:40:00,580
So I mean, to this point, it's testing it

01:40:00,580 --> 01:40:03,090
within the distro, System D is particular,

01:40:03,090 --> 01:40:05,830
is one thing that occasionally kernel versions

01:40:05,830 --> 01:40:08,450
don't work with different versions of System D,

01:40:08,450 --> 01:40:10,630
and yes it's a bug and it needs to be fixed,

01:40:10,630 --> 01:40:14,160
but is it a, you know, which side is the bug?

01:40:14,160 --> 01:40:16,340
Is it a kernel bug, is it a System D bug?

01:40:16,340 --> 01:40:18,180
Sometimes there was a kernel bug

01:40:18,180 --> 01:40:21,350
that System D just assumed would always be there,

01:40:21,350 --> 01:40:23,890
and when the bug got fixed, now System D doesn't work.

01:40:23,890 --> 01:40:24,734
Things like that.

01:40:24,734 --> 01:40:26,500
I understand the point there.

01:40:28,150 --> 01:40:29,900
- To answer your question, not always,

01:40:29,900 --> 01:40:31,710
it's not always necessary to make a package,

01:40:31,710 --> 01:40:33,920
but it opens different things.

01:40:33,920 --> 01:40:38,090
It opens new ways of testing the kernel.

01:40:38,090 --> 01:40:40,350
And extra potential things we may want to do

01:40:40,350 --> 01:40:41,840
is it's based on user space changes.

01:40:41,840 --> 01:40:43,903
Like we just said, if System D version changes,

01:40:43,903 --> 01:40:46,894
you want to be able to retest the same kernel version,

01:40:46,894 --> 01:40:49,900
but still be able to track that in the backhand,

01:40:49,900 --> 01:40:51,597
in the KernelCI database,

01:40:51,597 --> 01:40:53,926
which is not something we're doing now.

01:40:53,926 --> 01:40:56,702
And there may be some more advanced,

01:40:56,702 --> 01:40:58,801
like product-oriented features,

01:40:58,801 --> 01:41:02,210
like running the installer, distro installer,

01:41:02,210 --> 01:41:04,510
and may by have more higher level things running

01:41:04,510 --> 01:41:06,070
from user space, like open a webpage

01:41:06,070 --> 01:41:08,020
or something like that and see if it causes,

01:41:08,020 --> 01:41:11,700
it's like basically expending more testing means,

01:41:11,700 --> 01:41:14,730
still having the kernel as the actual thing to test,

01:41:14,730 --> 01:41:18,890
but having the distribution pushing the boundaries

01:41:18,890 --> 01:41:19,860
of how you test the kernel

01:41:19,860 --> 01:41:21,710
by doing more things from user space.

01:41:23,590 --> 01:41:27,359
So I don't know what valued distribution vendors

01:41:27,359 --> 01:41:30,430
or distribution people find in doing that,

01:41:30,430 --> 01:41:31,880
but that's a potential thing.

01:41:33,320 --> 01:41:35,943
And a challenge would be to do all these things

01:41:35,943 --> 01:41:37,630
while remaining compatible

01:41:37,630 --> 01:41:39,480
with the current kernelci.org project.

01:41:39,480 --> 01:41:43,290
And so, we are not turning the thing

01:41:43,290 --> 01:41:46,180
into a project that just works for distros

01:41:46,180 --> 01:41:50,250
and makes it completely awkward to work with mainline.

01:41:50,250 --> 01:41:52,440
- So my worry is that if you start going

01:41:52,440 --> 01:41:55,487
more and more towards the product direction,

01:41:55,487 --> 01:41:57,920
it's A, gonna become complex,

01:41:57,920 --> 01:42:01,480
B, every distribution's will want to do different things,

01:42:02,370 --> 01:42:04,680
at which point in time, they'll come back and say,

01:42:04,680 --> 01:42:06,700
"Oh, you know what, this is really specific

01:42:06,700 --> 01:42:10,770
"to REHL, or to SUSE," and not send it back upstream.

01:42:11,934 --> 01:42:15,213
I would maybe want to keep it simpler, so that--

01:42:15,213 --> 01:42:18,365
- Well if you do something that only one distro,

01:42:18,365 --> 01:42:20,860
if you can find a kernel bug

01:42:20,860 --> 01:42:23,320
that only one distro makes appear,

01:42:23,320 --> 01:42:25,840
it's still a kernel bug that you can to fix upstream.

01:42:25,840 --> 01:42:27,190
- No I don't mean kernel bugs,

01:42:27,190 --> 01:42:29,357
I mean say hey, you want to you have

01:42:29,357 --> 01:42:30,502
the installer running and doing these hundred things.

01:42:30,502 --> 01:42:32,620
Now you're reaching a point which

01:42:32,620 --> 01:42:34,653
is fairly distro-specific,

01:42:34,653 --> 01:42:38,200
as opposed to generic, and so the chances

01:42:38,200 --> 01:42:41,281
of that coming back to the project are low.

01:42:41,281 --> 01:42:45,000
And what you really want to happen

01:42:45,000 --> 01:42:48,980
is have generic infrastructure that makes people

01:42:48,980 --> 01:42:51,580
want to pick it up instead of doing their own thing.

01:42:52,530 --> 01:42:54,130
- Yes, I see what you mean, yes.

01:42:55,370 --> 01:42:56,870
So the first question, was like

01:42:56,870 --> 01:42:59,310
can KernelCI be used to test distro kernels.

01:42:59,310 --> 01:43:01,414
Now we've kind of looped a bit into

01:43:01,414 --> 01:43:03,250
what would be needed to do that.

01:43:03,250 --> 01:43:04,430
The next question I have is

01:43:04,430 --> 01:43:05,760
should KernelCI be used,

01:43:05,760 --> 01:43:07,120
like should we make all these changes,

01:43:07,120 --> 01:43:08,770
which leads a bit into what you are saying,

01:43:08,770 --> 01:43:13,580
like should we actually go down these routes?

01:43:13,580 --> 01:43:16,990
So pretty close match in some respects,

01:43:16,990 --> 01:43:20,990
so not in testing crazy, distro-specific things,

01:43:20,990 --> 01:43:23,040
but you know generated a defconfig,

01:43:23,040 --> 01:43:25,680
packaging a kernel, that's not too had,

01:43:25,680 --> 01:43:28,110
so by doing these things, we'd be covering

01:43:28,110 --> 01:43:29,700
a lot already.

01:43:29,700 --> 01:43:32,840
- So, I wanna back up to that other question.

01:43:32,840 --> 01:43:35,250
So, there's kind of a notion that the only people

01:43:35,250 --> 01:43:36,610
that wanna test distribution kernels,

01:43:36,610 --> 01:43:39,343
are the distribution vendors, and that is not true.

01:43:39,343 --> 01:43:43,679
So for instance, at Sony, we use both Yocto project

01:43:43,679 --> 01:43:46,103
and Debian kernels in our products,

01:43:46,103 --> 01:43:49,534
and we have a whole bunch of distribution testing

01:43:49,534 --> 01:43:52,230
that goes on, and it would be nice

01:43:52,230 --> 01:43:54,060
to be able to share it will other people in the industry

01:43:54,060 --> 01:43:56,270
who are are also doing distribution testing,

01:43:57,750 --> 01:44:01,464
the testing artifacts, or the testing methodologies

01:44:01,464 --> 01:44:05,690
or whatever, so I think there is bigger communities here

01:44:05,690 --> 01:44:08,570
than just the distro vendors themselves

01:44:08,570 --> 01:44:11,640
that are interested in sharing test materials.

01:44:11,640 --> 01:44:14,173
- So I don't think I disagree on what you're saying,

01:44:14,173 --> 01:44:17,970
but if you go saying hey, this is something

01:44:17,970 --> 01:44:20,654
that an application-specific distro hook,

01:44:20,654 --> 01:44:23,490
and if the distro vendor is making it,

01:44:23,490 --> 01:44:25,100
the tendency is going to be that,

01:44:25,100 --> 01:44:27,070
hey, it is not useful to anybody else,

01:44:27,070 --> 01:44:29,080
and there's no point giving it up,

01:44:29,080 --> 01:44:30,460
or sending it upstream.

01:44:30,460 --> 01:44:32,761
Instead where if you make it as part of the infrastructure

01:44:32,761 --> 01:44:35,519
coming from upstream, then the likelihood

01:44:35,519 --> 01:44:38,270
of the distro adopting it is higher.

01:44:38,270 --> 01:44:39,438
- Right, right, no I agree with that.

01:44:39,438 --> 01:44:41,280
I'd rather see this stuff upstream

01:44:41,280 --> 01:44:42,190
instead of KernelCI.

01:44:42,190 --> 01:44:44,470
- Yeah that needs to be the case,

01:44:44,470 --> 01:44:46,130
and it's another thing that we need

01:44:46,130 --> 01:44:47,910
to take advantage of the community,

01:44:47,910 --> 01:44:50,140
and we've tried to do that in Fedora somewhat,

01:44:50,140 --> 01:44:53,380
but we don't have the detailed tests necessarily

01:44:53,380 --> 01:44:54,540
that we should have for it.

01:44:54,540 --> 01:44:56,430
And that, a lot of kernel is drivers,

01:44:56,430 --> 01:44:58,486
and whatever you're running on,

01:44:58,486 --> 01:45:00,790
you've only got a limited set of hardware there,

01:45:00,790 --> 01:45:04,050
so if we can get other people in the community testing,

01:45:04,050 --> 01:45:06,040
whether it's our distro or somebody else's distro,

01:45:06,040 --> 01:45:07,600
or anything that helps the kernel,

01:45:07,600 --> 01:45:09,937
because we get a wider variety of hardware for test.

01:45:09,937 --> 01:45:11,610
- There's a talk about that tomorrow

01:45:11,610 --> 01:45:14,415
with Kevin Hillman, actually, so.

01:45:14,415 --> 01:45:18,120
- [Man in Audience] Awesome.

01:45:18,120 --> 01:45:20,790
- I just wanna add, to kinda, what Tuma is saying here,

01:45:20,790 --> 01:45:22,770
is from a REHL perspective,

01:45:22,770 --> 01:45:25,982
one of our biggest concerns is our ecosystem of partners.

01:45:25,982 --> 01:45:29,280
They wanna submit changes to REHL, the kernel,

01:45:29,280 --> 01:45:31,850
but they don't have a easy way to test REHL.

01:45:31,850 --> 01:45:33,870
the hook into the build and testing system,

01:45:33,870 --> 01:45:35,080
so a lot of times you have to send it to us,

01:45:35,080 --> 01:45:36,440
or you do the local testing.

01:45:36,440 --> 01:45:37,990
So having a framework like this

01:45:37,990 --> 01:45:39,640
where they can do that, spreading out,

01:45:39,640 --> 01:45:41,620
doing distro-level testing from a partner perspective

01:45:41,620 --> 01:45:43,783
I think also helps kinda of mimic what you're saying

01:45:43,783 --> 01:45:48,783
for Yocto.

01:45:52,207 --> 01:45:54,970
- So (laughs), it's quite a lot of things.

01:45:54,970 --> 01:45:57,023
Is anybody taking notes, I can hear some.

01:45:57,023 --> 01:45:57,856
(audience laughs)

01:45:57,856 --> 01:46:01,187
I can hear some keyboards clicking things.

01:46:01,187 --> 01:46:04,060
So is it good from a distro point of view?

01:46:04,060 --> 01:46:06,140
Also is is good from KernelCI point of view?

01:46:06,140 --> 01:46:07,598
That might be a bit selfish.

01:46:07,598 --> 01:46:11,870
I think it helps the project because having

01:46:11,870 --> 01:46:14,710
in the end, distro kernels are really used

01:46:14,710 --> 01:46:16,090
as opposed to upstream kernels,

01:46:16,090 --> 01:46:19,902
and having something that, it kind of cruises the loop

01:46:19,902 --> 01:46:24,902
with use cases, and it's good for the project

01:46:25,330 --> 01:46:29,720
to have another, more like, down-to-earth dimension.

01:46:29,720 --> 01:46:32,560
And of course, if you have distro companies

01:46:32,560 --> 01:46:33,450
trying to join your project,

01:46:33,450 --> 01:46:35,487
then they might be interested also in running,

01:46:35,487 --> 01:46:38,600
testing their kernel, in KernelCI.

01:46:38,600 --> 01:46:40,800
So we may have like a sub-instance of KernelCI,

01:46:40,800 --> 01:46:42,970
for example to not diverge,

01:46:42,970 --> 01:46:44,560
because then if you open the door to distros,

01:46:44,560 --> 01:46:46,010
that's endless, you have,

01:46:46,010 --> 01:46:48,420
'cause distros aren't downstream trees in the end,

01:46:48,420 --> 01:46:50,090
so then where do you draw the line,

01:46:50,090 --> 01:46:52,900
which downstream trees you're gonna accept or not?

01:46:52,900 --> 01:46:54,190
So I think it's about determining

01:46:54,190 --> 01:46:55,600
problem space so that you can have like

01:46:55,600 --> 01:46:57,660
the upstream kernelci.org,

01:46:57,660 --> 01:47:00,160
and maybe you can have like Fedora.kernelci.org

01:47:00,160 --> 01:47:01,580
and Debian.kernelci.org,

01:47:01,580 --> 01:47:05,210
or you say these set of builders,

01:47:05,210 --> 01:47:07,280
and you define which labs are running things.

01:47:07,280 --> 01:47:09,410
So same infrastructure, but it can tweak

01:47:10,576 --> 01:47:14,040
how to make it work, using the same tool in all.

01:47:14,040 --> 01:47:15,730
So the KernelCI tool will be the same,

01:47:15,730 --> 01:47:17,350
and if you wanted to do this at home,

01:47:17,350 --> 01:47:18,830
like I have KernelCI on my laptop,

01:47:18,830 --> 01:47:21,580
you can relate with any kernel you want.

01:47:21,580 --> 01:47:24,060
You can like, what the person was saying a bit earlier,

01:47:24,060 --> 01:47:25,913
you can also do it in your own environment

01:47:25,913 --> 01:47:28,511
and reproduce exactly the same things,

01:47:28,511 --> 01:47:32,216
given you have the same test platforms of course, a bit.

01:47:32,216 --> 01:47:36,729
At least, it should be enabling you to do that.

01:47:36,729 --> 01:47:41,729
I think that's all I had (laughs).

01:47:42,260 --> 01:47:43,340
Again the main points is trying

01:47:43,340 --> 01:47:46,558
to get things dynamically upstream in a kernel.

01:47:46,558 --> 01:47:48,820
The best ways to do that,

01:47:48,820 --> 01:47:52,190
to not have too much customization.

01:47:53,660 --> 01:47:57,350
- So we are in fact running ahead of schedule right now,

01:47:57,350 --> 01:47:59,630
so I mean we're welcome to have more time

01:47:59,630 --> 01:48:01,500
for discussion here if anyone wants to.

01:48:04,590 --> 01:48:05,450
- I have a question.

01:48:05,450 --> 01:48:08,860
So KernelCI is just one of the kernel test systems,

01:48:08,860 --> 01:48:10,370
and doesn't run lots of tests,

01:48:10,370 --> 01:48:13,040
doesn't of use most of the bargain tools

01:48:13,040 --> 01:48:14,510
that's in report box.

01:48:14,510 --> 01:48:16,537
Why do you choose it, and are you considering also

01:48:16,537 --> 01:48:21,066
integration with six other kernel testing systems?

01:48:21,066 --> 01:48:23,040
- Sorry, once again?

01:48:23,040 --> 01:48:24,560
- Why did you choose this one,

01:48:24,560 --> 01:48:26,650
and are you considering integrating

01:48:26,650 --> 01:48:30,002
with six other kernel testing systems?

01:48:30,002 --> 01:48:32,658
- So it's because I'm working on KernelCI,

01:48:32,658 --> 01:48:36,530
and I found it is like an obvious thing to talk about,

01:48:36,530 --> 01:48:38,750
and I submitted this, and it was accepted.

01:48:38,750 --> 01:48:40,520
Of course, it's not (all laugh),

01:48:43,110 --> 01:48:45,511
if other people doing other kernel upstream tests

01:48:45,511 --> 01:48:47,673
want to discuss it, I think it's very, very important.

01:48:47,673 --> 01:48:51,287
There's another bit of a further discussion this afternoon,

01:48:51,287 --> 01:48:54,640
about all the different types

01:48:54,640 --> 01:48:57,300
of the upstream kernel test systems,

01:48:57,300 --> 01:48:58,629
and the idea is to see how,

01:48:58,629 --> 01:49:01,732
you know much of it out there is between them,

01:49:01,732 --> 01:49:03,340
how we can consolidate that

01:49:03,340 --> 01:49:06,850
so to avoid everybody repeating the same things,

01:49:06,850 --> 01:49:08,802
or everybody having an interesting feature,

01:49:08,802 --> 01:49:11,213
can we put all that together to have one thing

01:49:11,213 --> 01:49:13,810
that makes the best.

01:49:13,810 --> 01:49:16,810
Basically the idea is to send ideas open source

01:49:16,810 --> 01:49:18,950
where everybody contributes to the same source code.

01:49:18,950 --> 01:49:21,367
The idea would be to have an open testing system,

01:49:21,367 --> 01:49:25,178
where you really can contribute builders and platforms

01:49:25,178 --> 01:49:29,312
and tools and, to make one solution

01:49:29,312 --> 01:49:31,910
for all the different problems that people have.

01:49:33,119 --> 01:49:36,040
I don't know if that answers your question.

01:49:36,040 --> 01:49:37,075
KernelCI is one example.

01:49:37,075 --> 01:49:39,910
I guess it's quite good because it tries to be generic,

01:49:39,910 --> 01:49:42,694
so it's not specific to one architecture.

01:49:42,694 --> 01:49:44,410
It's not made by Intel,

01:49:44,410 --> 01:49:46,580
it's not made a distribution.

01:49:46,580 --> 01:49:48,340
It's not made by a firm manufacture.

01:49:48,340 --> 01:49:50,470
It tries not, it's tries to be generic,

01:49:50,470 --> 01:49:53,850
so I guess it's a good candidate for that.

01:49:53,850 --> 01:49:56,194
- I just wanted to add to this question,

01:49:56,194 --> 01:50:00,666
about having multiple CI systems running different things,

01:50:00,666 --> 01:50:03,860
and basically trying to solve the same systems.

01:50:03,860 --> 01:50:06,985
We at CK, are running Gohecfus on Thursday and Friday,

01:50:06,985 --> 01:50:11,980
where will discuss these things with the KernelCI people,

01:50:11,980 --> 01:50:13,760
and try to find some common solutions

01:50:13,760 --> 01:50:16,820
for the same problems that we are trying to also.

01:50:19,110 --> 01:50:22,020
So if anybody is interesting in that,

01:50:22,020 --> 01:50:24,030
we still have a few free spots.

01:50:24,030 --> 01:50:26,686
You can join the discussions as well.

01:50:26,686 --> 01:50:27,990
(muffled speaking)

01:50:27,990 --> 01:50:28,990
Thursday and Friday.

01:50:34,392 --> 01:50:38,370
- How long this usually takes testing

01:50:38,370 --> 01:50:40,080
for the KernelCI?

01:50:40,080 --> 01:50:42,360
For that, on the average?

01:50:42,360 --> 01:50:43,970
So minutes or hours?

01:50:43,970 --> 01:50:46,970
- [Guillaume] It depends what you do.

01:50:46,970 --> 01:50:50,800
- Yeah because it's CI's, which shouldn't take so long

01:50:50,800 --> 01:50:53,760
if you update regularly and testing there.

01:50:53,760 --> 01:50:55,640
And for example, in SUSE,

01:50:55,640 --> 01:50:59,870
we do test mm and five systems,

01:50:59,870 --> 01:51:03,740
and that takes days and up to week

01:51:03,740 --> 01:51:06,270
if you do the whole thing testing.

01:51:06,270 --> 01:51:08,280
I think in this performance measurement.

01:51:09,300 --> 01:51:13,080
- So depending on the tree that is being tested

01:51:13,080 --> 01:51:14,560
or the branch being tested,

01:51:14,560 --> 01:51:17,940
we are building more or less different defconfigs,

01:51:17,940 --> 01:51:19,683
some like maintainer trees

01:51:19,683 --> 01:51:23,220
or some individual contributor trees,

01:51:23,220 --> 01:51:26,464
we're building like, only three, five, 10 kernels,

01:51:26,464 --> 01:51:30,640
and things like Linux Next or Mainliner's Table,

01:51:30,640 --> 01:51:33,090
we're building the whole possible range,

01:51:33,090 --> 01:51:34,750
and now given with multiple compilers,

01:51:34,750 --> 01:51:36,090
and that's about 300 kernels.

01:51:36,090 --> 01:51:37,610
Of course it takes longer,

01:51:37,610 --> 01:51:38,740
but if you have more builders,

01:51:38,740 --> 01:51:42,090
then that shortens it, so there's no definite answer

01:51:42,090 --> 01:51:45,160
about that, but right now it can take a few hours basically

01:51:45,160 --> 01:51:47,880
between when a changed is pushed on a good branch,

01:51:47,880 --> 01:51:49,697
like mainline, it can take maybe,

01:51:49,697 --> 01:51:52,070
well if your system is quiet,

01:51:52,070 --> 01:51:53,750
it will take maybe an hour or two.

01:51:53,750 --> 01:51:55,900
If it's busy, it might take six or seven hours,

01:51:55,900 --> 01:51:58,741
and then the time to run route tests and other tests,

01:51:58,741 --> 01:52:02,220
you might get the results only 12 hours later.

01:52:02,220 --> 01:52:03,955
But all things that can be done to improve that,

01:52:03,955 --> 01:52:06,000
we're working on it.

01:52:06,000 --> 01:52:09,655
I thing having like two hour feedback return time,

01:52:09,655 --> 01:52:11,840
there should like, roundtrip,

01:52:11,840 --> 01:52:14,420
like that's the kind of thing you should be able to do.

01:52:17,443 --> 01:52:18,276
It's just still a bit too long

01:52:18,276 --> 01:52:21,120
to be waiting for that before you can actually go on,

01:52:21,120 --> 01:52:23,960
but it's quick enough so if something really went wrong,

01:52:23,960 --> 01:52:25,220
you'll catch it before the next day,

01:52:25,220 --> 01:52:26,320
and be able to fix it.

01:52:35,670 --> 01:52:39,600
- Okay, if there's no other questions,

01:52:39,600 --> 01:52:41,110
I'd like to propose we actually do

01:52:41,110 --> 01:52:43,260
a very short five-minute break,

01:52:43,260 --> 01:52:44,500
so we can open the doors and try and get

01:52:44,500 --> 01:52:45,711
some ventilation in here.

01:52:45,711 --> 01:52:48,120
It's very stuffy, I did ask about that.

01:52:48,120 --> 01:52:50,660
So we'll get five minutes to open the doors,

01:52:50,660 --> 01:52:52,230
and then go to the next topic.

01:52:52,230 --> 01:52:53,063
Thanks.

01:52:54,556 --> 01:52:55,792
- Okay, thank you very much.

01:52:55,792 --> 01:52:58,792
(audience applauds)

01:58:09,808 --> 01:58:12,975
(audience chattering)

01:58:26,870 --> 01:58:28,870
- I think lot of my presentation

01:58:28,870 --> 01:58:30,100
have already been discussed

01:58:30,100 --> 01:58:33,979
in the previous presentation discussion,

01:58:33,979 --> 01:58:38,390
and my discussion is, I thought at first

01:58:38,390 --> 01:58:41,920
about make generically discussion,

01:58:41,920 --> 01:58:46,920
but I think it have been focused on Gentoo distribution,

01:58:48,070 --> 01:58:53,070
and so, Gentoo distribution started

01:58:54,230 --> 01:58:58,449
to make automated system for checking

01:58:58,449 --> 01:59:01,500
its own kernel package, what is called

01:59:01,500 --> 01:59:03,890
a Gentoo kernel CI, and,

01:59:08,090 --> 01:59:10,040
the motivation on what I'm doing,

01:59:10,040 --> 01:59:12,580
is that we are trying to make,

01:59:15,060 --> 01:59:17,230
giving a stable kernel to a user

01:59:17,230 --> 01:59:22,230
that we try to don't break the user system,

01:59:22,400 --> 01:59:27,140
and to improve the quality on the package on the Gentoo.

01:59:27,140 --> 01:59:28,500
And for doing that,

01:59:36,960 --> 01:59:40,350
so I will give little explanation

01:59:40,350 --> 01:59:43,040
about the Gentoo kernel package,

01:59:43,040 --> 01:59:46,988
but I don't know how many Gentoo user there is?

01:59:46,988 --> 01:59:48,540
Everyone use Gentoo?

01:59:50,620 --> 01:59:53,350
Okay (laughs).

01:59:53,350 --> 01:59:57,260
So, we have this package, which is called a Gentoo source,

01:59:57,260 --> 01:59:59,628
that is the main Gentoo kernel package,

01:59:59,628 --> 02:00:02,420
and from Gentoo source,

02:00:02,420 --> 02:00:06,060
we have other derived Gentoo package,

02:00:06,060 --> 02:00:07,040
Gentoo kernel package,

02:00:07,040 --> 02:00:12,040
which are like, CK source, or a specified source,

02:00:12,840 --> 02:00:16,320
but the kernel source are mainly,

02:00:16,320 --> 02:00:19,278
everyone is sticking from Gentoo source.

02:00:19,278 --> 02:00:24,278
And Gentoo source is made by genpatch and kernel source.

02:00:25,360 --> 02:00:29,810
Genpatch is package with contain patch for each kernel.

02:00:29,810 --> 02:00:32,880
We have inside that only one specific patch

02:00:32,880 --> 02:00:35,220
that is changing k config,

02:00:35,220 --> 02:00:40,190
and is adding some configuration specific for Gentoo,

02:00:41,936 --> 02:00:45,040
with like giving Gentoo minimal building

02:00:45,040 --> 02:00:49,310
or some Gentoo package specific configuration.

02:00:49,310 --> 02:00:53,750
And then we have the eclass which use the tool,

02:00:53,750 --> 02:00:56,710
which try to keep the toolchain compatibility,

02:00:56,710 --> 02:00:59,300
is set extraversion, deblobbing,

02:00:59,300 --> 02:01:03,750
doing all the distro work that need to be done,

02:01:03,750 --> 02:01:06,780
and applying genpatches.

02:01:06,780 --> 02:01:10,360
And when the user that is getting vision to source,

02:01:10,360 --> 02:01:14,368
and it will configure the kernel however you want.

02:01:14,368 --> 02:01:19,368
It will in some case start it's own graphical driver,

02:01:21,131 --> 02:01:26,131
and doing make and make install and reboot the system

02:01:26,983 --> 02:01:29,992
and the Gentoo kernel.

02:01:29,992 --> 02:01:34,992
So,

02:01:35,160 --> 02:01:36,930
when are to stabilize such package,

02:01:37,870 --> 02:01:41,910
we usually do make,

02:01:43,480 --> 02:01:46,876
because we don't know which configuration

02:01:46,876 --> 02:01:49,050
the user will be using.

02:01:49,050 --> 02:01:53,480
We try to at first, building with all configuration,

02:01:53,480 --> 02:01:58,480
and if succeed, we try to use some reasonable configuration

02:01:59,898 --> 02:02:04,898
for booting the system and stabilize the package

02:02:07,600 --> 02:02:09,640
if everything this working.

02:02:09,640 --> 02:02:12,020
And when we have a toolchain,

02:02:12,020 --> 02:02:13,790
we try to test those with a toolchain,

02:02:13,790 --> 02:02:16,990
which can introduce some major change.

02:02:19,650 --> 02:02:21,380
So for doing research first,

02:02:23,770 --> 02:02:28,179
we use a Buildbot, and a simple script

02:02:28,179 --> 02:02:32,350
with qemu and Gentoo image,

02:02:32,350 --> 02:02:36,390
and use booting and just check the boot

02:02:36,390 --> 02:02:39,490
that is working the boot of the script,

02:02:39,490 --> 02:02:42,670
and if it's working, is succeeding

02:02:42,670 --> 02:02:44,070
and stabilizing the package,

02:02:47,730 --> 02:02:49,620
- I have a quick question about you are select

02:02:49,620 --> 02:02:51,180
for kernel configuration options.

02:02:51,180 --> 02:02:53,200
It's different for a distribution

02:02:53,200 --> 02:02:55,020
that you're actually different sets

02:02:55,020 --> 02:02:56,570
of kernel configuration option,

02:02:56,570 --> 02:02:59,770
because most distros usually have a single set.

02:03:01,750 --> 02:03:02,680
How exactly,

02:03:02,680 --> 02:03:07,104
so, how often do you find bugs that upstream

02:03:07,104 --> 02:03:10,209
didn't catch, I guess, already,

02:03:10,209 --> 02:03:15,209
or with your set of configuration testing?

02:03:16,170 --> 02:03:19,264
- Of course we found some bug that are not upstream,

02:03:19,264 --> 02:03:22,730
and in such case, sometime the user

02:03:22,730 --> 02:03:25,180
already know how to upstream such bug,

02:03:25,180 --> 02:03:27,340
so he will do by himself,

02:03:27,340 --> 02:03:30,624
or in other case, we have our Bugzilla,

02:03:30,624 --> 02:03:35,624
and the user will find the upstream configuration bug,

02:03:38,540 --> 02:03:39,970
through the Bugzilla.

02:03:39,970 --> 02:03:44,500
For catching is, like, mostly of you do make

02:03:44,500 --> 02:03:48,500
all of the config, and you see that is compiling,

02:03:48,500 --> 02:03:53,500
but I think, I've been checking all configuration

02:03:53,820 --> 02:03:55,390
is completely difficult,

02:03:55,390 --> 02:03:59,340
so one option is like trying to have

02:03:59,340 --> 02:04:01,787
a minimal configuration and try to work with that,

02:04:01,787 --> 02:04:06,787
and from that, start to make more complicated configuration

02:04:07,780 --> 02:04:10,790
or try to check what configuration is most used,

02:04:10,790 --> 02:04:12,450
but those of that you cannot do in Gentoo,

02:04:12,450 --> 02:04:14,410
because we don't have like,

02:04:14,410 --> 02:04:16,800
some studies that go which configuration

02:04:16,800 --> 02:04:17,950
is using which user.

02:04:17,950 --> 02:04:20,570
So, in value, should that test,

02:04:20,570 --> 02:04:22,570
or configuration, but that particularly.

02:04:24,690 --> 02:04:28,460
- So how is this different from testing the mainline kernel,

02:04:28,460 --> 02:04:31,310
where again if you have done so

02:04:31,310 --> 02:04:32,760
for different configurations?

02:04:33,680 --> 02:04:35,700
- When you for instance that,

02:04:35,700 --> 02:04:40,105
we are using two toolchain that is,

02:04:40,105 --> 02:04:43,187
and some configuration-specific

02:04:43,187 --> 02:04:46,480
and some patch over the kernel source

02:04:46,480 --> 02:04:48,860
that is specific to Gentoo.

02:04:52,550 --> 02:04:53,540
For example,

02:05:05,910 --> 02:05:10,550
here's one used with specific k configure patch version two,

02:05:10,550 --> 02:05:11,633
and when we're,

02:05:16,220 --> 02:05:17,968
oh I don't have figure,

02:05:17,968 --> 02:05:19,858
but when we have this genpatch,

02:05:19,858 --> 02:05:23,150
that is a container of patch.

02:05:25,070 --> 02:05:25,903
Sorry.

02:05:26,840 --> 02:05:29,757
(muffled speaking)

02:05:35,460 --> 02:05:37,070
So we have this genpatch,

02:05:37,070 --> 02:05:38,390
which is a container of patch,

02:05:38,390 --> 02:05:41,225
but is sometime not yet upstream

02:05:41,225 --> 02:05:46,225
to what is next, so, we try to check such patch.

02:05:52,400 --> 02:05:55,050
- But the exact same principles can be applied, right?

02:05:55,050 --> 02:05:56,135
Because--

02:05:56,135 --> 02:05:56,968
- [Speaker] Yes, yes.

02:05:58,357 --> 02:06:00,070
And so, could something like say,

02:06:03,310 --> 02:06:06,238
cis-bot, not cisbot, what's the Intel checker,

02:06:06,238 --> 02:06:08,170
that one which--

02:06:08,170 --> 02:06:09,170
- [Man in Audience] Zero day?

02:06:09,170 --> 02:06:11,860
- Yes, Zero day bot, trying out different things,

02:06:11,860 --> 02:06:13,880
different configurations and so on.

02:06:13,880 --> 02:06:15,800
Would something like that help?

02:06:15,800 --> 02:06:17,500
- [Speaker] What's that?

02:06:17,500 --> 02:06:18,490
What's the name?

02:06:18,490 --> 02:06:20,120
- It's Zero Day bot.

02:06:20,120 --> 02:06:22,005
Intel has a Zero Day bot,

02:06:22,005 --> 02:06:24,540
and essentially what they try doing

02:06:24,540 --> 02:06:26,610
is picking up patches from upstream

02:06:26,610 --> 02:06:29,230
and test them out, and sometimes different configurations

02:06:29,230 --> 02:06:30,140
as well.

02:06:31,550 --> 02:06:32,860
- I think it could be opposite.

02:06:32,860 --> 02:06:34,210
We need to use such things?

02:06:36,332 --> 02:06:40,150
- I don't think the infrastructure is,

02:06:40,150 --> 02:06:43,034
so the code for the infrastructure is publicly available

02:06:43,034 --> 02:06:47,200
but, in maybe now we're starting to see places

02:06:47,200 --> 02:06:49,700
where this functionality will be useful.

02:06:52,360 --> 02:06:54,910
- Yeah it sounds like is proposes--

02:06:56,405 --> 02:06:59,519
It sounds like the suggestion is that,

02:06:59,519 --> 02:07:03,130
can we possibly take some of what the testing's been doing

02:07:03,130 --> 02:07:06,560
for Gentoo, and say, put it into other CI testing systems

02:07:06,560 --> 02:07:10,720
for things that with CKI, Zero Day,

02:07:10,720 --> 02:07:12,990
or anything like that, because it does seem

02:07:12,990 --> 02:07:14,270
to be very useful.

02:07:14,270 --> 02:07:15,310
- [Speaker] Yes, yes.

02:07:18,594 --> 02:07:22,520
And,

02:07:25,560 --> 02:07:28,950
recently, we heard about KernelCI,

02:07:30,004 --> 02:07:35,004
and we decide to change from our qemu script

02:07:35,550 --> 02:07:40,060
and use Lava, and it is practically the same Lava,

02:07:40,060 --> 02:07:41,968
we're just using KernelCI,

02:07:41,968 --> 02:07:45,780
on that is working on Docker for testing package,

02:07:46,973 --> 02:07:47,806
and,

02:07:50,630 --> 02:07:54,670
what we trying to keep the customizability

02:07:55,924 --> 02:07:59,450
of Buildbot for what we work we need

02:07:59,450 --> 02:08:01,720
for testing each kernel package

02:08:01,720 --> 02:08:06,190
is so, for generalizing, like,

02:08:12,400 --> 02:08:15,706
each tools each distribution are using,

02:08:15,706 --> 02:08:19,182
like I don't know that other distribution,

02:08:19,182 --> 02:08:22,750
which tool are using for checking its own kernel,

02:08:22,750 --> 02:08:26,820
and I don't know if which things apply to Gentoo.

02:08:26,820 --> 02:08:27,653
So,

02:08:30,504 --> 02:08:33,421
(muffled speaking)

02:08:34,827 --> 02:08:35,842
- Oh, sorry.

02:08:35,842 --> 02:08:38,711
(audience laughs)

02:08:38,711 --> 02:08:41,354
- Like, Don, like.

02:08:41,354 --> 02:08:44,271
(muffled speaking)

02:08:46,079 --> 02:08:47,690
- So Red Hat actually went through

02:08:47,690 --> 02:08:49,754
some of those, where it's internal stuff

02:08:49,754 --> 02:08:50,587
about trying to figure out

02:08:50,587 --> 02:08:52,200
what we start it for building kernels.

02:08:52,200 --> 02:08:54,010
We started out using, I believe Jenkins,

02:08:54,010 --> 02:08:55,210
and then we switched to Wafermet,

02:08:55,210 --> 02:08:57,080
so I was curious if you wanted to talk

02:08:57,080 --> 02:08:57,913
a little bit more about some of the experiences

02:08:57,913 --> 02:08:59,166
with why Red Hat did some switch around that.

02:08:59,166 --> 02:09:04,166
- Yeah, in regards that we start.

02:09:07,211 --> 02:09:08,890
- It's on.

02:09:08,890 --> 02:09:09,940
- Yeah we started out.

02:09:09,940 --> 02:09:12,080
We have a CKI project that's KernelCI.

02:09:13,575 --> 02:09:14,510
We started out with Jenkins,

02:09:14,510 --> 02:09:19,510
and grooving just became too much of a problem.

02:09:20,680 --> 02:09:21,960
You spend more time pack and grooving,

02:09:21,960 --> 02:09:24,030
so we moved away, moved into Gitlab,

02:09:24,030 --> 02:09:26,306
and we've been a happy customer since,

02:09:26,306 --> 02:09:27,951
from my experience.

02:09:27,951 --> 02:09:31,670
We never tried Buildbot, but I know Fedora uses it,

02:09:31,670 --> 02:09:35,336
but Gitlab seemed like a better solution for us.

02:09:35,336 --> 02:09:37,320
Jenkins didn't work out.

02:09:37,320 --> 02:09:39,950
There's a lot of infrastructure at Red Hat

02:09:39,950 --> 02:09:40,830
that does use Jenkins,

02:09:40,830 --> 02:09:43,280
but our particular use case, is we spent more time

02:09:43,280 --> 02:09:47,840
on Jenkins, than actually doing the pipeline.

02:09:47,840 --> 02:09:49,914
- Yes we also want to first try to use,

02:09:49,914 --> 02:09:52,610
kind of CI Jenkins,

02:09:52,610 --> 02:09:56,240
but we found that it didn't work also for us.

02:09:56,240 --> 02:10:01,240
Like KernelCI is using pipeline

02:10:02,098 --> 02:10:05,760
for making configuration change

02:10:05,760 --> 02:10:07,780
for each kernel change

02:10:07,780 --> 02:10:11,720
and for doing some other stuff,

02:10:12,865 --> 02:10:16,760
and but we found more configurative,

02:10:21,980 --> 02:10:25,200
was most simple to configure everything by Buildbot.

02:10:27,654 --> 02:10:32,654
And then we thought about what we want to test

02:10:33,910 --> 02:10:35,021
for each package.

02:10:35,021 --> 02:10:38,650
I think for example, case of test,

02:10:38,650 --> 02:10:41,010
is a good way for checking like,

02:10:41,010 --> 02:10:44,220
what most of the things in there kernel

02:10:44,220 --> 02:10:45,190
are actually working,

02:10:45,190 --> 02:10:48,090
so it's also good for us for having

02:10:48,090 --> 02:10:53,090
some feedback for knowing we are broking or something

02:10:54,020 --> 02:10:55,560
the user system.

02:10:57,240 --> 02:10:58,073
So,

02:11:00,120 --> 02:11:02,940
what we are thinking to implement, case of test,

02:11:02,940 --> 02:11:06,520
was checking for our automated system.

02:11:07,770 --> 02:11:10,287
But if there are any other testing

02:11:13,220 --> 02:11:16,220
that are not just like boot tests for the kernel,

02:11:17,528 --> 02:11:20,870
that other design or this too.

02:11:23,234 --> 02:11:26,760
(muffled speaking)

02:11:26,760 --> 02:11:28,816
- Much others like the XFS,

02:11:28,816 --> 02:11:33,566
it's actually fairly generic these days.

02:11:33,566 --> 02:11:37,060
You have the MM test feed.

02:11:37,970 --> 02:11:39,310
It's comes from the exact thing,

02:11:39,310 --> 02:11:40,710
might not be called MM test,

02:11:41,660 --> 02:11:42,493
but they are a bunch of these already there?

02:11:42,493 --> 02:11:44,910
- [Speaker] And what is actually checking something?

02:11:44,910 --> 02:11:47,120
- MM is for the memory management system.

02:11:47,120 --> 02:11:52,120
XFS is mainly for XFS, but also testing out

02:11:52,490 --> 02:11:53,910
the generic VFS stuff.

02:11:54,750 --> 02:11:59,360
Then you have the XT4 tests.

02:11:59,360 --> 02:12:03,588
There are a bunch of these out there.

02:12:03,588 --> 02:12:05,967
- Can I piggyback that question?

02:12:05,967 --> 02:12:08,000
Not to go down a rat hole,

02:12:08,000 --> 02:12:10,910
but is there any other distributions or people out here

02:12:10,910 --> 02:12:12,990
who have trouble finding out what test to run

02:12:12,990 --> 02:12:17,230
for their distribution or based on changes in the kernel?

02:12:17,230 --> 02:12:18,592
I know from the CTI perspective,

02:12:18,592 --> 02:12:21,550
and as you just alluded to,

02:12:21,550 --> 02:12:23,990
sometimes it's hard to figure out if XFS tests,

02:12:23,990 --> 02:12:26,730
or MM tests, or LTP, and some the other tests.

02:12:26,730 --> 02:12:29,500
One of the things, you know, I'd like to coordinate with,

02:12:29,500 --> 02:12:32,010
is how to like communicate or collaborate

02:12:32,010 --> 02:12:34,053
what tests people are running,

02:12:34,053 --> 02:12:37,291
a common area so we can.

02:12:37,291 --> 02:12:40,208
(muffled speaking)

02:12:41,460 --> 02:12:42,435
A bot?

02:12:42,435 --> 02:12:43,311
- [Man in Audience] A ball.

02:12:43,311 --> 02:12:44,816
- Oh, yeah, yeah, yeah.

02:12:44,816 --> 02:12:48,280
So I think this kind of ties us to what you were saying

02:12:48,280 --> 02:12:49,790
is you don't know, and a lot of us don't know.

02:12:49,790 --> 02:12:50,700
It's kind of word of mouth.

02:12:50,700 --> 02:12:51,680
You have to be plugged in.

02:12:51,680 --> 02:12:54,310
- Yeah, for the bot session, were are certainly

02:12:54,310 --> 02:12:56,440
accepting bots and are happy to use

02:12:57,914 --> 02:12:59,850
some of the time here,

02:12:59,850 --> 02:13:02,587
and if we have any extra time as well.

02:13:02,587 --> 02:13:05,504
(muffled speaking)

02:13:11,512 --> 02:13:14,510
- My issue is not so much knowing what tests ought

02:13:14,510 --> 02:13:19,510
to be run, but it's all the, all the setup,

02:13:19,780 --> 02:13:23,510
being able to, running CI is a huge amount of work,

02:13:25,360 --> 02:13:30,360
and so it's finding time and planning all the instructions

02:13:31,510 --> 02:13:34,556
to be able to run these things and have them

02:13:34,556 --> 02:13:36,030
more or less be reliable,

02:13:36,030 --> 02:13:39,010
so they'll actually catch regressions,

02:13:41,430 --> 02:13:43,730
rather than CI problems or what make problems.

02:13:46,040 --> 02:13:48,520
I seem to remember someone

02:13:51,227 --> 02:13:52,397
blogged about, having,

02:13:58,390 --> 02:13:59,223
the,

02:14:04,760 --> 02:14:06,950
having done the configuration managements

02:14:08,340 --> 02:14:11,656
for setting up to run a bunch of tests,

02:14:11,656 --> 02:14:15,510
but I can't remember who that was.

02:14:15,510 --> 02:14:17,540
Maybe someone else saw that,

02:14:17,540 --> 02:14:18,940
might go on "Kernel Planet."

02:14:19,974 --> 02:14:22,320
I think it was on "Kernel Planet."

02:14:22,320 --> 02:14:24,200
- I think probably it would be nice

02:14:24,200 --> 02:14:25,930
to have some documentation like,

02:14:25,930 --> 02:14:28,360
I think one of the good things that KernelCI is doing,

02:14:28,360 --> 02:14:30,530
is writing a bunch of hook documentation,

02:14:30,530 --> 02:14:35,030
and some of it can be usable for other distribution I think,

02:14:36,190 --> 02:14:39,685
so like a documentation, which tool we are using,

02:14:39,685 --> 02:14:44,685
and something more of, something that is readable.

02:14:46,200 --> 02:14:48,480
- So a bigger challenge I've seen with the tests,

02:14:48,480 --> 02:14:50,780
is not that they don't exist,

02:14:50,780 --> 02:14:55,256
but sometimes they break or sometimes they haven't worked

02:14:55,256 --> 02:14:56,550
for a very long time,

02:14:56,550 --> 02:14:58,350
and we don't know if there is a bug,

02:14:59,284 --> 02:15:01,747
or whether the test is just broken.

02:15:01,747 --> 02:15:04,550
- [Speaker] Okay, you cannot keep me as such.

02:15:05,510 --> 02:15:07,521
I know it's not the best of option.

02:15:07,521 --> 02:15:12,490
- I mean LTP is an example of,

02:15:14,550 --> 02:15:16,211
I rest my case.

02:15:16,211 --> 02:15:19,128
(muffled speaking)

02:15:30,250 --> 02:15:31,420
- Okay in the spirit of Plumbers,

02:15:31,420 --> 02:15:32,980
if we all are having the same problems,

02:15:32,980 --> 02:15:34,750
let's think about some next steps then,

02:15:34,750 --> 02:15:36,510
as if we're not sure what to do about

02:15:36,510 --> 02:15:39,490
is the test broken or is the kernel broken.

02:15:39,490 --> 02:15:43,090
- Can I make a comment just on that thought?

02:15:43,090 --> 02:15:45,200
So one of the things I've been looking at at Fuego,

02:15:45,200 --> 02:15:47,390
and I know very few people have head of Fuego,

02:15:47,390 --> 02:15:49,479
that's my own advertising problem,

02:15:49,479 --> 02:15:53,110
but (laughs) one of the things I've been thinking

02:15:53,110 --> 02:15:55,960
about Fuego, is we need to actually test the tests,

02:15:55,960 --> 02:15:57,500
and there is a very difficult problem,

02:15:57,500 --> 02:15:59,030
which is how do you determine the difference

02:15:59,030 --> 02:16:00,850
between a test failure or a lab failure,

02:16:00,850 --> 02:16:04,620
or a actual regression in the software test?

02:16:06,610 --> 02:16:10,090
And so, and one the things that I'm very keen on

02:16:10,090 --> 02:16:12,130
is figuring out a way that we can share,

02:16:12,130 --> 02:16:14,240
and I used this example a million times,

02:16:14,240 --> 02:16:15,840
so pardon me if you've already heard it.

02:16:15,840 --> 02:16:17,890
But LTP produces a whole bunch of failures

02:16:17,890 --> 02:16:19,470
that you know are just garbage,

02:16:19,470 --> 02:16:22,330
and it'd be nice to be able to come up

02:16:22,330 --> 02:16:25,002
with some way to share that information,

02:16:25,002 --> 02:16:26,934
so that other people can know it's garbage

02:16:26,934 --> 02:16:28,250
and know to ignore it.

02:16:28,250 --> 02:16:30,010
And so I don't know if that's,

02:16:30,010 --> 02:16:32,493
we have something in Fuego called a pass criteria,

02:16:32,493 --> 02:16:35,330
which basically says you can ignore this.

02:16:35,330 --> 02:16:37,580
But you have to come up with a shareable format

02:16:37,580 --> 02:16:39,210
and a place to share things,

02:16:39,210 --> 02:16:40,875
and there's a whole bunch of issues involved,

02:16:40,875 --> 02:16:43,251
if we're gonna make progress on that.

02:16:43,251 --> 02:16:45,720
And so.

02:16:45,720 --> 02:16:47,340
- I am gonna counter, 'cause I know we like to pick

02:16:47,340 --> 02:16:49,065
on LTP a lot, but it turns out it does in fact,

02:16:49,065 --> 02:16:52,140
find things, and say the name space is tested,

02:16:52,140 --> 02:16:54,270
then we what would you do about that case?

02:16:54,270 --> 02:16:55,780
How can we make it easier to differentiate

02:16:55,780 --> 02:16:59,120
between things that are failing because the task died.

02:16:59,120 --> 02:17:00,820
- Right, yeah, that's why I think it's important.

02:17:00,820 --> 02:17:02,762
I think LTP is actually a really useful tool.

02:17:02,762 --> 02:17:06,453
But the noise interferes with its utility, so.

02:17:11,651 --> 02:17:16,651
- There is some documentation about LTP test on Fuego?

02:17:22,804 --> 02:17:24,713
- No.

02:17:24,713 --> 02:17:25,577
(audience laughs)

02:17:25,577 --> 02:17:29,100
So we have documented our past criteria file.

02:17:29,100 --> 02:17:31,900
We have not proposed it as an industry standard.

02:17:31,900 --> 02:17:33,240
I think it's premature,

02:17:33,240 --> 02:17:36,110
and we're like in the process of talking about this stuff.

02:17:36,110 --> 02:17:38,320
So we're talking about some of the test definition stuff.

02:17:38,320 --> 02:17:40,990
We're gonna be talking at CKI, later this week,

02:17:40,990 --> 02:17:44,271
and then at Automated Testing Summit, in Lyon,

02:17:44,271 --> 02:17:47,644
and I think past criteria is one of the things,

02:17:47,644 --> 02:17:49,870
test dependencies is one of the things

02:17:49,870 --> 02:17:54,170
that we wanna talk about at some of these other events.

02:17:54,170 --> 02:17:56,070
And we could talk about 'em here if there's a bot,

02:17:56,070 --> 02:17:59,600
but I don't wanna hijack what people are doing here with.

02:18:02,260 --> 02:18:03,910
- One thing I have to add is that,

02:18:03,910 --> 02:18:06,200
in Lennar we have a project called "test definitions,"

02:18:06,200 --> 02:18:08,840
which is used to wrap a lot of different tests,

02:18:08,840 --> 02:18:10,440
and a lot of projects have this concept,

02:18:10,440 --> 02:18:12,320
where if they have a project that wraps

02:18:12,320 --> 02:18:13,510
all the other projects they wanna run,

02:18:13,510 --> 02:18:15,607
all the tests we still wanna run,

02:18:15,607 --> 02:18:19,119
and we, Fuego has the same thing and so.

02:18:19,119 --> 02:18:22,200
And we use that to standardize like the inputs

02:18:22,200 --> 02:18:23,890
and the outputs of each test suite,

02:18:23,890 --> 02:18:26,119
so you can purse them all the same,

02:18:26,119 --> 02:18:28,656
and we also maintain skip files is there

02:18:28,656 --> 02:18:32,880
which represent the issues we found in LTP specifically,

02:18:32,880 --> 02:18:34,886
but for case-of test as well.

02:18:34,886 --> 02:18:36,430
And that's on GitHub.

02:18:38,526 --> 02:18:40,610
It's under Lennar/test/definitions.

02:18:47,550 --> 02:18:51,144
- So I guess a request for you and him

02:18:51,144 --> 02:18:53,570
and everybody else is gonna be doing something like this.

02:18:53,570 --> 02:18:55,140
It probably includes us,

02:18:55,140 --> 02:18:57,338
so we probably need to standardize this

02:18:57,338 --> 02:18:59,690
and put it in one common place,

02:18:59,690 --> 02:19:02,939
instead of maybe 10, maybe 15 different projects.`

02:19:02,939 --> 02:19:05,856
(muffled speaking)

02:19:08,410 --> 02:19:10,250
- Alternately we could possibly take effort

02:19:10,250 --> 02:19:12,720
to fix those tests which are known to be broken.

02:19:14,840 --> 02:19:16,279
Thought.

02:19:16,279 --> 02:19:17,995
- [Man in Audience] It's a little hard.

02:19:17,995 --> 02:19:20,912
(muffled speaking)

02:19:23,030 --> 02:19:24,382
- We've noticed in the CTI that it fails

02:19:24,382 --> 02:19:26,000
once every hundred times.

02:19:26,000 --> 02:19:27,880
It's hard to debug.

02:19:27,880 --> 02:19:29,120
It's all race conditions,

02:19:29,120 --> 02:19:30,990
and a lot of maintainers like XFS,

02:19:30,990 --> 02:19:32,638
that's like, we've been doing this for years,

02:19:32,638 --> 02:19:34,671
but it's hard to reproduce the fix.

02:19:34,671 --> 02:19:37,588
(muffled speaking)

02:19:40,797 --> 02:19:43,736
- So we are talking about LTP,

02:19:43,736 --> 02:19:46,803
but how many are using like a kselftest on.

02:19:50,020 --> 02:19:54,499
- Great, Fuego is also using a kselftest.

02:19:54,499 --> 02:19:57,544
And Red Hat is not using a kselftest

02:19:57,544 --> 02:19:59,900
for checking the kernel?

02:19:59,900 --> 02:20:01,604
- I don't think we currently have that graded

02:20:01,604 --> 02:20:03,720
into your our task.

02:20:03,720 --> 02:20:06,660
It's mostly, a kselftest is valuable,

02:20:06,660 --> 02:20:08,670
but it, because of the way it's built,

02:20:08,670 --> 02:20:10,809
we haven't quite figured out how to get

02:20:10,809 --> 02:20:12,874
that into our test load yet.

02:20:12,874 --> 02:20:14,974
It's on our to-do list.

02:20:14,974 --> 02:20:19,974
I also kselftest for my own developer building,

02:20:20,440 --> 02:20:21,800
which is kind of out the scope,

02:20:21,800 --> 02:20:23,987
but I think that's when I use it a lot more.

02:20:23,987 --> 02:20:28,582
- Okay, and then our second topic

02:20:28,582 --> 02:20:32,410
is like Lava or Fuego or some,

02:20:34,740 --> 02:20:39,012
kind of CI developer make BBCI,

02:20:39,012 --> 02:20:40,960
that is specific,

02:20:43,100 --> 02:20:46,369
is just for booting, and is made on Python.

02:20:46,369 --> 02:20:49,990
But it's all Lava or Fuego,

02:20:49,990 --> 02:20:52,880
someone who is making his own script for like,

02:20:52,880 --> 02:20:54,330
we made for Gentoo kind CI,

02:20:54,330 --> 02:20:58,444
but we made our script for certain QM1 testing,

02:20:58,444 --> 02:21:03,160
or I don't know if there is any other similar too, but,

02:21:06,890 --> 02:21:10,040
actually, I didn't test Fuego,

02:21:10,040 --> 02:21:13,410
so I don't know how we should different from.

02:21:17,210 --> 02:21:20,320
- So, okay, I don't know if your question

02:21:20,320 --> 02:21:21,369
is specific about kselftest,

02:21:21,369 --> 02:21:23,505
but so Fuego has a bunch of notions

02:21:23,505 --> 02:21:25,849
that are kind of in prototype form,

02:21:25,849 --> 02:21:29,200
but not really pushable to,

02:21:29,200 --> 02:21:31,012
as like industry standards,

02:21:31,012 --> 02:21:33,840
and so one of the reasons we have these discussions,

02:21:33,840 --> 02:21:35,737
is we don't wanna develop a bunch of stuff

02:21:35,737 --> 02:21:39,670
that no one is gonna use or care about.

02:21:39,670 --> 02:21:41,862
In terms of testing, I mean,

02:21:41,862 --> 02:21:45,310
we've got our app of our kselftest,

02:21:45,310 --> 02:21:47,710
but I think we have the same problem

02:21:47,710 --> 02:21:48,580
that other people have,

02:21:48,580 --> 02:21:51,460
which is there's a lot of, I don't know how to put it,

02:21:51,460 --> 02:21:54,480
ad-hockery in kselftest,

02:21:54,480 --> 02:21:59,345
and even though they standardized it on K-tap

02:21:59,345 --> 02:22:04,180
or Tap 13, or a version of Tap 13,

02:22:04,180 --> 02:22:06,510
with some kselftest extensions,

02:22:08,182 --> 02:22:10,550
that's not true of all of the tests in there,

02:22:10,550 --> 02:22:12,270
and so there's really a problem

02:22:12,270 --> 02:22:14,000
of putting that into an automated CI loop,

02:22:14,000 --> 02:22:16,160
because you can't count on the format being the same

02:22:16,160 --> 02:22:18,290
for all of the sub-tests that are in there.

02:22:22,427 --> 02:22:24,107
- But it's becoming better.

02:22:24,107 --> 02:22:24,940
- [Man in Audience] Yeah it's getting better.

02:22:26,155 --> 02:22:27,414
And it just needs to be fixed

02:22:27,414 --> 02:22:32,414
if something's not producing the right type of performance.

02:22:34,216 --> 02:22:37,000
- So I think my last topic that is more specific

02:22:37,000 --> 02:22:38,398
to meta-distribution.

02:22:38,398 --> 02:22:42,520
I don't know how many, like Yocto or Gentoo,

02:22:42,520 --> 02:22:47,520
is like and what Laura, how about said,

02:22:48,600 --> 02:22:51,779
about configuration little different from each user,

02:22:51,779 --> 02:22:54,450
how to test in such case.

02:22:54,450 --> 02:22:57,204
So my opinion was like,

02:22:57,204 --> 02:23:00,495
that probably you cannot test each configuration

02:23:00,495 --> 02:23:03,490
of each user, because we don't know.

02:23:03,490 --> 02:23:08,490
So, we try to do similar tests as upstream,

02:23:08,800 --> 02:23:13,200
so try to do kinda, kselftest or 13,

02:23:13,200 --> 02:23:18,200
and when, and there been some configuration

02:23:20,025 --> 02:23:21,200
that are similar.

02:23:23,270 --> 02:23:26,760
- So this is probably I should already know

02:23:26,760 --> 02:23:30,550
the answer to, but how far off is the Gentoo kernel

02:23:30,550 --> 02:23:31,990
from the latest upstream?

02:23:31,990 --> 02:23:33,110
Are you fairly,

02:23:34,094 --> 02:23:36,030
close to it, or?

02:23:36,030 --> 02:23:38,360
- We are fairly close.

02:23:38,360 --> 02:23:41,270
- And how often, I mean how enthusiastic

02:23:41,270 --> 02:23:45,980
are your users about upgrading the kernel?

02:23:45,980 --> 02:23:49,190
- They are usually, most of user

02:23:49,190 --> 02:23:52,470
are getting latest kernel very soon.

02:23:52,470 --> 02:23:54,900
- Right because at that point in time, it might actually,

02:23:54,900 --> 02:23:57,290
you know, support's not just testing what they're doing.

02:23:57,290 --> 02:24:00,200
Support's also fixing bugs they report, right.

02:24:00,200 --> 02:24:02,200
And maybe at that point in time,

02:24:02,200 --> 02:24:05,063
maybe it might make more sense to work closer with upstream,

02:24:05,063 --> 02:24:06,700
because at this point in time,

02:24:06,700 --> 02:24:09,500
this just feels closer to what upstream does.

02:24:09,500 --> 02:24:11,410
- Yes actually we have already some user

02:24:11,410 --> 02:24:13,008
that are developing upstream

02:24:13,008 --> 02:24:16,580
and some user that are more doing Gentoo distro stuff,

02:24:17,580 --> 02:24:18,413
so,

02:24:20,550 --> 02:24:22,690
I think that is one of the way,

02:24:24,090 --> 02:24:27,350
and we also have like, we have latest kernel,

02:24:27,350 --> 02:24:30,070
when we are trying to follow stable kernel version,

02:24:30,070 --> 02:24:34,680
and so usually stable kernel version

02:24:34,680 --> 02:24:37,130
is stabilizer, and latest version is testing.

02:24:39,070 --> 02:24:41,330
- When you say stable, you mean a non-RC kernel,

02:24:41,330 --> 02:24:42,830
or is it the long-term stable?

02:24:44,260 --> 02:24:49,260
- Is, what's stable in KernelCI, in kernal.org, so.

02:24:50,429 --> 02:24:54,313
- So I guess the point I want to make is,

02:24:54,313 --> 02:24:58,950
if it's a config option that only a specific user

02:24:58,950 --> 02:25:01,208
wants to use, and if it's fairly close to upstream,

02:25:01,208 --> 02:25:03,974
more often than not, the developers

02:25:03,974 --> 02:25:07,580
are fairly willing to work on helping get it tested

02:25:07,580 --> 02:25:11,136
or so on.

02:25:11,136 --> 02:25:13,486
- That is what we are doing about such problem.

02:25:14,640 --> 02:25:17,280
Usually, actually we have only one patch

02:25:17,280 --> 02:25:21,010
that is different, that is completely different

02:25:21,010 --> 02:25:23,180
from upstream, and that is the one

02:25:23,180 --> 02:25:25,259
that is specific to Gentoo,

02:25:25,259 --> 02:25:28,993
and other patch, we always try to upstream, or.

02:25:35,813 --> 02:25:37,480
- Wanna get the mic.

02:25:38,396 --> 02:25:39,229
- [Man in Audience] I got one.

02:25:42,560 --> 02:25:45,030
- So you were asking what Yocto does.

02:25:45,030 --> 02:25:48,100
So Yocto has some kind of static configuration,

02:25:48,100 --> 02:25:50,670
so it has all these qemu-based systems,

02:25:50,670 --> 02:25:52,060
and it does a regression,

02:25:52,060 --> 02:25:55,370
and it compares it to pre-existing setups,

02:25:55,370 --> 02:25:58,346
so that you can track changes almost realtime

02:25:58,346 --> 02:25:59,955
as we do a build daily.

02:25:59,955 --> 02:26:03,040
So that's how you contract the regressions in Yocto.

02:26:04,850 --> 02:26:07,310
- So you have a stable configuration,

02:26:07,310 --> 02:26:08,520
and when you update--

02:26:08,520 --> 02:26:12,630
- Yeah, for example, like the update ARM,

02:26:12,630 --> 02:26:16,230
the qemu ARM setup, we would configure it a certain way.

02:26:16,230 --> 02:26:20,190
And, so we know already, based on the initial setup

02:26:20,190 --> 02:26:22,290
by the developer, what passes and what fails.

02:26:22,290 --> 02:26:24,860
Hopefully, in a perfect world, nothing would ever fail,

02:26:24,860 --> 02:26:27,240
but obviously, there'll be some open bugs

02:26:27,240 --> 02:26:28,520
for it or whatever.

02:26:28,520 --> 02:26:30,600
And so we know what's supposed to pass,

02:26:30,600 --> 02:26:31,860
and we can track it.

02:26:31,860 --> 02:26:33,162
If something fails, then we know that

02:26:33,162 --> 02:26:35,535
a new kernel thing is changed or something like that.

02:26:35,535 --> 02:26:38,530
We can open a new bug and address that,

02:26:38,530 --> 02:26:41,410
or maybe it's trivial and can be addressed quickly.

02:26:44,530 --> 02:26:46,962
- I think it's interesting solution,

02:26:46,962 --> 02:26:50,462
and also Gentoo have like a minimal configuration

02:26:50,462 --> 02:26:52,660
and we could start from there,

02:26:52,660 --> 02:26:55,830
and then going on with hiding configuration option.

02:26:57,070 --> 02:27:00,360
- Yocto does this for everything qemu supports,

02:27:00,360 --> 02:27:04,210
so like MIPS, I don't know if RISC-V is a thing yet,

02:27:04,210 --> 02:27:08,235
but ARM, ARM 64, X 86, it's like shotgunning.

02:27:08,235 --> 02:27:09,330
- Okay.

02:27:12,470 --> 02:27:15,090
- [Laura] We've got about five minutes left in this slot,

02:27:15,090 --> 02:27:17,850
so we can have more discussions or take a short break.

02:27:17,850 --> 02:27:19,628
If there's any other, do you have any more content

02:27:19,628 --> 02:27:21,560
you want to present or.

02:27:21,560 --> 02:27:22,953
- No, I'm okay.

02:27:22,953 --> 02:27:23,932
- [Man in Audience] I'm proud and thank you

02:27:23,932 --> 02:27:25,508
for the submission.

02:27:25,508 --> 02:27:26,650
- [Laura] You've got five minutes, Tim.

02:27:26,650 --> 02:27:29,380
- Okay, so sorry this is unrelated to your talk,

02:27:29,380 --> 02:27:31,130
but it's a talk earlier in the day,

02:27:32,120 --> 02:27:35,110
and it was about the comparing,

02:27:35,110 --> 02:27:39,145
doing the dev on the AVI stuff.

02:27:39,145 --> 02:27:41,440
So it occurred to me that it would be really nice

02:27:41,440 --> 02:27:43,980
if that was done for like every patch

02:27:43,980 --> 02:27:46,500
that went into LTS, just validated that the AVI

02:27:46,500 --> 02:27:50,250
was not changed, but it,

02:27:50,250 --> 02:27:52,800
I wanna take it up a level from that specific thing.

02:27:52,800 --> 02:27:54,980
Included in that, was this notion

02:27:54,980 --> 02:27:59,980
that you got a dev, a base set XML with the new XML,

02:28:02,297 --> 02:28:04,293
and one of the issues I found in Fuego,

02:28:04,293 --> 02:28:07,440
is that that comes up a lot,

02:28:07,440 --> 02:28:10,418
where essentially you have the expected values

02:28:10,418 --> 02:28:14,250
that you want to obtain in an automated fashion.

02:28:14,250 --> 02:28:16,000
You want to get your expected values

02:28:16,000 --> 02:28:18,496
by doing some kind of snapshot of the system,

02:28:18,496 --> 02:28:21,128
and then later, after you've applied patches

02:28:21,128 --> 02:28:23,350
or changed the configuration or whatever,

02:28:23,350 --> 02:28:25,320
you wanna make sure that none of those expected values

02:28:25,320 --> 02:28:26,902
have changed, and as a generic problem,

02:28:26,902 --> 02:28:29,700
I also see that as an issue

02:28:29,700 --> 02:28:31,629
that it'd be nice if we could share,

02:28:31,629 --> 02:28:36,629
somehow those sets of expected values as an industry.

02:28:36,877 --> 02:28:41,690
If LTS has a certain base AVI,

02:28:41,690 --> 02:28:44,690
it may seem trivial like, "Oh, everybody

02:28:44,690 --> 02:28:49,690
"can go run that and get the AVI base, XML file,"

02:28:50,170 --> 02:28:52,580
but you shouldn't have to.

02:28:52,580 --> 02:28:54,580
It should be a known entity

02:28:54,580 --> 02:28:57,040
that's distributed throughout the entire industry,

02:28:57,040 --> 02:29:01,580
what is the base AVI for that particular kernel?

02:29:01,580 --> 02:29:02,810
- You're under the assumption

02:29:02,810 --> 02:29:05,060
that LTS has a guaranteed stable AVI,

02:29:05,060 --> 02:29:06,410
and it absolutely does not.

02:29:07,860 --> 02:29:09,370
- Well right, wasn't that the whole point

02:29:09,370 --> 02:29:10,590
of the presentation though?

02:29:10,590 --> 02:29:11,609
That is should?

02:29:11,609 --> 02:29:12,442
(audience laughs)

02:29:12,442 --> 02:29:13,275
- The point was they're doing this,

02:29:13,275 --> 02:29:14,340
and that's what they wanna do,

02:29:14,340 --> 02:29:16,730
but the LTS kernels won't have anymore

02:29:16,730 --> 02:29:19,230
of a stable AVI guarantee than anything else does.

02:29:20,500 --> 02:29:21,380
- Okay, I like this discussion,

02:29:21,380 --> 02:29:23,210
but I wanna make sure that we do give

02:29:23,210 --> 02:29:25,084
a little bit of time between setup so.

02:29:25,084 --> 02:29:26,344
- [Man in Audience] Okay.

02:29:26,344 --> 02:29:28,129
- I love the ideas, and that if anyone's interested,

02:29:28,129 --> 02:29:31,104
let's find together AVI people's protocol.

02:29:31,104 --> 02:29:33,239
- [Man in Audience] Okay

02:29:33,239 --> 02:29:36,410
- My point was not so much about stable ABI,

02:29:36,410 --> 02:29:40,330
as it is the notion that you have base sets

02:29:40,330 --> 02:29:42,970
of expected values that we're not sharing

02:29:42,970 --> 02:29:44,660
as an industry, right.

02:29:45,860 --> 02:29:47,326
- Yeah, okay anyways for your presentation.

02:29:47,326 --> 02:29:48,202
- Thank you.

02:29:48,202 --> 02:29:51,202
(audience applauds)

02:29:54,904 --> 02:29:55,919
- Thanks.

02:29:55,919 --> 02:29:56,880
- I would just like to say,

02:29:56,880 --> 02:29:58,894
the thing that I was trying to remember what it was

02:29:58,894 --> 02:30:01,170
earlier on was called k fault.

02:30:02,184 --> 02:30:03,150
- I have one in my bag, let me.

02:30:03,150 --> 02:30:04,844
- Then don't worry about this, just take the.

02:30:04,844 --> 02:30:08,408
(muffled speaking)

02:30:08,408 --> 02:30:09,241
- If you have that little thing.

02:30:09,241 --> 02:30:10,074
- Hold the mic.

02:30:13,332 --> 02:30:14,208
- Do you have your paper?

02:30:14,208 --> 02:30:17,708
- No I don't, but I can just page do this.

02:30:20,823 --> 02:30:23,448
Hold that for a second.

02:30:23,448 --> 02:30:24,673
Oh you're awesome, thank you.

02:30:24,673 --> 02:30:26,700
- So while they're getting set up,

02:30:26,700 --> 02:30:28,645
I just wanna say this is our last topic.

02:30:28,645 --> 02:30:31,220
Thank you very much for coming and participating.

02:30:31,220 --> 02:30:32,540
This is the first time I've tried

02:30:32,540 --> 02:30:34,333
to run the Distributions Microconference as well.

02:30:34,333 --> 02:30:36,760
If you have any feedback of things you'd like to see,

02:30:36,760 --> 02:30:39,000
or if you think we should try and run this next year,

02:30:39,000 --> 02:30:40,668
if you think we shouldn't try and run this next year,

02:30:40,668 --> 02:30:43,010
I'd love to hear it, or you can pass it on

02:30:43,010 --> 02:30:44,580
to any of the other committee members,

02:30:44,580 --> 02:30:47,320
and then they can come and give their feedback to me.

02:30:47,320 --> 02:30:49,203
So, thought I'd just pass that on.

02:30:51,857 --> 02:30:54,774
(muffled speaking)

02:30:56,210 --> 02:30:57,910
- The way the BOF's work is that you can go

02:30:57,910 --> 02:31:02,910
to any of the online for registration,

02:31:03,130 --> 02:31:06,370
and you sign up there, and they'll be scheduled ad-hoc.

02:31:06,370 --> 02:31:08,560
I think they're a few more that have been come in.

02:31:08,560 --> 02:31:11,570
Check on the schedule and find me after lunch,

02:31:11,570 --> 02:31:13,270
and I'll come in with the other committee members.

02:31:13,270 --> 02:31:15,300
You can also as the registration desk.

02:31:15,300 --> 02:31:17,190
I think they'd probably be able to find stuff as well,

02:31:17,190 --> 02:31:18,699
but we'll.

02:31:18,699 --> 02:31:21,616
(muffled speaking)

02:32:20,782 --> 02:32:21,615
- Okay?

02:33:03,827 --> 02:33:04,985
Oh you got something up there.

02:33:04,985 --> 02:33:06,735
Oh, there it's going.

02:33:09,259 --> 02:33:10,092
- Yeah.

02:33:10,092 --> 02:33:10,925
- Okay.

02:33:12,580 --> 02:33:15,747
(audience chattering)

02:34:26,280 --> 02:34:27,990
- Deval, can we just use your laptop?

02:34:27,990 --> 02:34:29,680
Yeah, let's just use your laptop.

02:34:32,545 --> 02:34:35,462
(muffled speaking)

02:34:37,976 --> 02:34:40,494
The hardest part of running a conference is getting,

02:34:40,494 --> 02:34:43,411
(muffled speaking)

02:34:53,909 --> 02:34:58,049
I debated doing that, and I thought I'd give this a shot.

02:34:58,049 --> 02:34:59,390
So I think next time, that's a good lesson learned.

02:35:01,994 --> 02:35:04,911
(muffled speaking)

02:35:08,150 --> 02:35:08,983
All right.

02:35:08,983 --> 02:35:10,550
- Okay, sorry about the equipment problems.

02:35:10,550 --> 02:35:12,394
My name is George Kennedy.

02:35:12,394 --> 02:35:17,110
I'm going to talk about distros and Syzkaller.

02:35:17,110 --> 02:35:20,199
This is my first LPC, as you can probably tell.

02:35:20,199 --> 02:35:23,630
First off, I'm not a fuzzing expert.

02:35:24,668 --> 02:35:28,570
I've been looking at Syzkaller for a while,

02:35:28,570 --> 02:35:29,403
probably less than a year

02:35:29,403 --> 02:35:32,700
to try to uncover bugs, mailing our code

02:35:32,700 --> 02:35:34,609
and the stable tree merges that we pull

02:35:34,609 --> 02:35:36,700
to build our distro release.

02:35:37,626 --> 02:35:40,040
I want to tell you what we're doing,

02:35:40,040 --> 02:35:42,860
the problems that we're having, and hopefully,

02:35:42,860 --> 02:35:44,473
you can tell me what I'm doing wrong,

02:35:44,473 --> 02:35:46,860
and we can fix the problems.

02:35:50,630 --> 02:35:52,400
Okay, so what?

02:35:52,400 --> 02:35:55,304
Find out how distros and other are using Syzkaller

02:35:55,304 --> 02:35:57,250
and other fuzzers?

02:35:57,250 --> 02:35:59,660
Is anybody using Syzkaller in their distros?

02:36:00,590 --> 02:36:03,785
You must work for Google, right? (laughs)

02:36:03,785 --> 02:36:05,750
Well we wanna try to make it part

02:36:05,750 --> 02:36:08,540
of our distribution release process.

02:36:09,799 --> 02:36:10,860
- [Man in Audience] Are you guys using it

02:36:10,860 --> 02:36:14,107
for Chrome, OS, and Android?

02:36:14,107 --> 02:36:15,730
- Yeah, yep.

02:36:18,000 --> 02:36:19,600
- What all are you using it for?

02:36:20,830 --> 02:36:22,430
Because I got the impression that you were using it

02:36:22,430 --> 02:36:24,120
mainly for upstream last year,

02:36:24,120 --> 02:36:26,880
and not as much for the internal Google kernel.

02:36:27,980 --> 02:36:30,840
- We use it for upstream, that's one of the main targets,

02:36:30,840 --> 02:36:34,450
but we also for OS Android, some of the internal kernels.

02:36:36,224 --> 02:36:41,224
Also some other operating systems as well.

02:36:41,960 --> 02:36:42,793
- Okay.

02:36:42,793 --> 02:36:43,760
- Also LTS releases.

02:36:45,297 --> 02:36:47,680
- And do you know if any of your vendors use it?

02:36:47,680 --> 02:36:48,580
- No I don't know.

02:36:50,470 --> 02:36:54,320
- Okay, so why we're hoping that we can come up

02:36:54,320 --> 02:36:56,213
with a common framework,

02:36:56,213 --> 02:36:59,146
but there was just one of us here that cares,

02:36:59,146 --> 02:37:02,843
and how through common integration.

02:37:02,843 --> 02:37:07,843
All right, so this, right now we're prototyping

02:37:08,054 --> 02:37:11,760
with Syzkaller and, we're using,

02:37:13,061 --> 02:37:18,061
our kernel tracks V 4.14, so we are,

02:37:22,330 --> 02:37:23,830
we can't use the latest compilers.

02:37:23,830 --> 02:37:26,935
We're using 4.85 on our Jenkins.

02:37:26,935 --> 02:37:30,920
So we're moving along, trying to upgrade.

02:37:32,538 --> 02:37:34,420
These might be some of the reasons

02:37:34,420 --> 02:37:37,750
why we stopped our continual Syzkaller runs,

02:37:37,750 --> 02:37:41,960
but maybe also maybe a new version of Syzkaller come along,

02:37:45,136 --> 02:37:47,210
and this is where we are today.

02:37:48,260 --> 02:37:50,770
So we have to build the kernels on our own servers

02:37:50,770 --> 02:37:52,680
because of the compiler issues,

02:37:52,680 --> 02:37:56,776
and we'll stop Syzkaller with new releases

02:37:56,776 --> 02:37:58,200
and things like that.

02:37:59,956 --> 02:38:02,050
Oops, sorry about that.

02:38:05,690 --> 02:38:10,290
We have a autobug create two cron job running,

02:38:10,290 --> 02:38:11,520
looking for new crashes.

02:38:12,800 --> 02:38:14,950
We have a bug database,

02:38:14,950 --> 02:38:18,930
it's primed with existing bugs to try to avoid dups.

02:38:21,304 --> 02:38:25,990
When new crashes come along, we check the database,

02:38:25,990 --> 02:38:29,090
and we are really focusing on bugs in our code,

02:38:29,090 --> 02:38:31,862
and the stable tree merges that we pull in.

02:38:31,862 --> 02:38:33,800
We wanna see what we're inheriting

02:38:35,100 --> 02:38:36,180
with the stable tree merges.

02:38:36,180 --> 02:38:37,621
Go ahead.

02:38:37,621 --> 02:38:39,721
- So you know that since we have you here,

02:38:42,080 --> 02:38:44,490
how different is this from what Cisbot does?

02:38:44,490 --> 02:38:47,320
How often are you resorting Syzkaller,

02:38:47,320 --> 02:38:49,800
I don't know, can you tell us more?

02:38:49,800 --> 02:38:51,900
- Yes, this is very similar to what Cisbot does.

02:38:51,900 --> 02:38:53,185
- Okay good.

02:38:53,185 --> 02:38:54,790
- So all the same thing, so it does continuous build.

02:38:54,790 --> 02:38:58,910
It has some latency when it does the rebuilds,

02:38:58,910 --> 02:39:01,110
it's something like day for,

02:39:01,110 --> 02:39:04,290
dates versus Syzkaller and the kernel source.

02:39:04,290 --> 02:39:07,610
It boots the image, and it has the backtracking tools,

02:39:08,596 --> 02:39:09,932
so it actually creates the--

02:39:09,932 --> 02:39:12,860
- Okay, what is the continuation that you have?

02:39:14,630 --> 02:39:16,140
- So for the backtracking?

02:39:16,140 --> 02:39:16,973
- Yeah.

02:39:16,973 --> 02:39:19,450
- So we have, so it has kind of abstract interface

02:39:19,450 --> 02:39:22,760
that we can extend, as in the interface was made in place

02:39:22,760 --> 02:39:25,560
that is used for upstream and some other kernels.

02:39:25,560 --> 02:39:29,850
And those have, one of the precedents is integrated

02:39:29,850 --> 02:39:32,960
with bug organizer,

02:39:32,960 --> 02:39:35,530
which is our internal bug tracking system.

02:39:35,530 --> 02:39:37,060
But the interface is pretty generic

02:39:37,060 --> 02:39:40,790
and the work was to extend it to, say bug zero

02:39:40,790 --> 02:39:41,990
and some other programs.

02:39:43,942 --> 02:39:46,360
Basically like create a bug, post the comment,

02:39:46,360 --> 02:39:48,960
pull both status updates, and so on.

02:39:48,960 --> 02:39:50,850
- So how often, do you start all the servers,

02:39:50,850 --> 02:39:51,960
restart them all at the same time?

02:39:51,960 --> 02:39:53,880
Do you stagger them, or,

02:39:53,880 --> 02:39:56,080
you must have a big farm, a big server farm.

02:39:57,623 --> 02:39:59,880
- It's a medium sized farm.

02:39:59,880 --> 02:40:01,650
- Okay, let me just stop--

02:40:01,650 --> 02:40:03,326
- Only 10,000 servers. - Yeah.

02:40:03,326 --> 02:40:05,390
- No, actually. - No comment.

02:40:05,390 --> 02:40:07,968
- The kernels we use like five machines at the--

02:40:07,968 --> 02:40:08,880
- Oh, okay.

02:40:09,800 --> 02:40:12,100
- They all start at different times as the kernels,

02:40:12,100 --> 02:40:14,690
as the new meets the kernels that are pushed.

02:40:15,830 --> 02:40:19,418
- So do you have a mix of vendors, like AMD or--

02:40:19,418 --> 02:40:22,910
- No, most of that is done on GC,

02:40:22,910 --> 02:40:23,970
all of this is done.

02:40:23,970 --> 02:40:24,803
- Oh, okay.

02:40:24,803 --> 02:40:27,460
- And GC, these colored self support

02:40:27,460 --> 02:40:31,490
run on Kuamo and actual physical hardware and so on

02:40:31,490 --> 02:40:33,340
but we don't do it because it's hard.

02:40:35,830 --> 02:40:36,663
- Okay.

02:40:36,663 --> 02:40:38,270
- We had planned to use Kuamo

02:40:38,270 --> 02:40:41,540
because it can innovate more of the hardware

02:40:41,540 --> 02:40:44,880
and we can actually cover more of the sub systems.

02:40:46,360 --> 02:40:49,950
- But then you just test the emulated hardware in Kuamo,

02:40:49,950 --> 02:40:53,330
which I found, parts of it are very not good.

02:40:53,330 --> 02:40:54,163
- Lacking, yeah.

02:40:56,633 --> 02:40:58,270
- And you could sub it, right?

02:40:58,270 --> 02:40:59,830
- Uh, yes, we can get to that.

02:41:01,033 --> 02:41:04,170
'Cause we're on AMD we're testing, you know,

02:41:04,170 --> 02:41:07,380
AMD and Intel, so I can get to that.

02:41:08,260 --> 02:41:11,645
So this is where we are today.

02:41:11,645 --> 02:41:16,645
And we're now going to prototype V 5.2,

02:41:18,630 --> 02:41:21,430
so we're hoping to move to the future, oops.

02:41:21,430 --> 02:41:22,660
Keep going the wrong way.

02:41:24,024 --> 02:41:25,510
So we can now do Jenkin's builds

02:41:25,510 --> 02:41:29,896
with the latest GCCA compiler that we can build.

02:41:29,896 --> 02:41:32,949
This is called a capable kernel RPMs.

02:41:32,949 --> 02:41:36,560
And when a Jenkin builds comes along

02:41:36,560 --> 02:41:41,560
we just halt Syzkaller, install the RPM to the VM,

02:41:42,480 --> 02:41:47,480
and then restart the Syzkaller with the VZM intended

02:41:48,610 --> 02:41:49,710
intramfs from the VM.

02:41:50,707 --> 02:41:51,740
So this is where we wanna be.

02:41:52,660 --> 02:41:55,589
And it sounds like this looks like sysbot.

02:41:55,589 --> 02:41:56,790
- [Audience Member] Yes.

02:41:56,790 --> 02:41:57,623
- Yeah.

02:42:00,185 --> 02:42:03,948
- So for Syzkaller, there are certain things

02:42:03,948 --> 02:42:06,670
you have to do build wise,

02:42:06,670 --> 02:42:08,200
like you have to build a custom kernel.

02:42:08,200 --> 02:42:10,880
You couldn't consume a generic distro kernel

02:42:10,880 --> 02:42:12,120
and run Syzkaller on it?

02:42:12,120 --> 02:42:13,897
- Well, we have to set the config,

02:42:13,897 --> 02:42:17,740
the Syzkaller configs, kcov and ksine.

02:42:17,740 --> 02:42:19,890
- [Audience Member] Okay, so when it's kernels--

02:42:19,890 --> 02:42:20,980
- You want them all--

02:42:20,980 --> 02:42:22,616
- [Audience Member] Some kernel options, the config.

02:42:22,616 --> 02:42:23,615
- Yeah.

02:42:23,615 --> 02:42:24,770
- Okay.

02:42:24,770 --> 02:42:27,420
- [George] But that's all you have to change, right?

02:42:27,420 --> 02:42:28,889
Debugfs.

02:42:28,889 --> 02:42:32,020
- So it can actually run on any kernel.

02:42:32,020 --> 02:42:33,945
It just becomes less efficient.

02:42:33,945 --> 02:42:36,310
For example, if you don't have code cover,

02:42:36,310 --> 02:42:39,110
it would be just one less box.

02:42:39,110 --> 02:42:41,590
If you don't have ksan you will hide box

02:42:41,590 --> 02:42:45,090
but you will not actually understand that you hid box.

02:42:45,090 --> 02:42:48,189
And whichever screen which may be useful for you

02:42:48,189 --> 02:42:50,351
which made some improvement,

02:42:50,351 --> 02:42:53,920
which accepts that your config kind of baseline

02:42:53,920 --> 02:42:56,560
and a trace to produce config suitable for CSbot

02:42:56,560 --> 02:42:59,140
with all of the ks and kcov you know,

02:42:59,140 --> 02:43:02,030
disable organization, disable trace

02:43:02,030 --> 02:43:03,580
and enable lots of other different options.

02:43:03,580 --> 02:43:05,470
- So you have a whole bunch of built in config files,

02:43:05,470 --> 02:43:07,080
is that what you're talking about?

02:43:07,080 --> 02:43:08,770
In the tree, the Syzkaller tree?

02:43:08,770 --> 02:43:10,160
- Not the complete config rules.

02:43:10,160 --> 02:43:12,700
We have a script which can give your config a little--

02:43:12,700 --> 02:43:13,533
- Okay.

02:43:13,533 --> 02:43:15,690
- Like turn off all of the necessary configs

02:43:15,690 --> 02:43:17,110
that are actually much more than them

02:43:17,110 --> 02:43:20,310
and disable some configs that are harmful and so on.

02:43:20,310 --> 02:43:21,383
- [George] Okay.

02:43:21,383 --> 02:43:23,080
- You cannot give you the--

02:43:23,080 --> 02:43:24,760
- [George] Is that in the tree or is that somewhere else?

02:43:24,760 --> 02:43:25,710
- Yes, it should be in the tree.

02:43:25,710 --> 02:43:27,070
- [George] What's the name of that, then?

02:43:28,036 --> 02:43:29,690
Just out of curiosity, the name of the script?

02:43:29,690 --> 02:43:31,770
I'll look it up.

02:43:31,770 --> 02:43:32,790
- Question. - Yeah.

02:43:32,790 --> 02:43:33,630
- Can you talk a little bit more

02:43:33,630 --> 02:43:36,360
about how you prime the database with crashes?

02:43:36,360 --> 02:43:38,738
I guess your priming it with upstream crashes?

02:43:38,738 --> 02:43:40,420
- Well that's the next question.

02:43:42,660 --> 02:43:44,160
Priming it with our own bugs.

02:43:44,160 --> 02:43:47,542
So we've hid quite a few bugs in our code.

02:43:47,542 --> 02:43:50,240
And so we don't wanna see those again.

02:43:50,240 --> 02:43:51,170
That's really what we're looking at.

02:43:51,170 --> 02:43:53,578
But I do, the missing link is

02:43:53,578 --> 02:43:56,840
how we separate out the upstream bugs.

02:43:56,840 --> 02:43:58,220
- [Audience Member] Okay, so right now you don't have a way

02:43:58,220 --> 02:43:59,420
to automatically correlate a crash

02:43:59,420 --> 02:44:00,320
that you see in your kernels?

02:44:00,320 --> 02:44:01,779
- We don't wanna see the--

02:44:01,779 --> 02:44:03,354
- A crash that's already known upstream.

02:44:03,354 --> 02:44:04,750
- Right. - That's missing.

02:44:04,750 --> 02:44:07,690
- You do want to hit the, get a bug created

02:44:07,690 --> 02:44:09,112
for the crash that you hit upstream

02:44:09,112 --> 02:44:11,800
because that's gotta be fixed in your kernel.

02:44:11,800 --> 02:44:12,740
- [George] Sure.

02:44:12,740 --> 02:44:14,111
- But I think the,

02:44:14,111 --> 02:44:17,120
the point that he's trying to focus on is

02:44:17,120 --> 02:44:19,250
this one has a known fix upstream.

02:44:19,250 --> 02:44:20,083
- [Audience Member] Yeah.

02:44:20,083 --> 02:44:21,040
- And so we can bring that back

02:44:21,040 --> 02:44:22,660
versus just a brand new bug.

02:44:22,660 --> 02:44:23,690
- [Audience Member] Or just being able to see

02:44:23,690 --> 02:44:25,120
that someone's working on this upstream.

02:44:25,120 --> 02:44:25,953
- Right, well, the other thing is,

02:44:25,953 --> 02:44:28,480
you know, we branch off and we do an update

02:44:28,480 --> 02:44:30,770
and we branch off on a stable,

02:44:30,770 --> 02:44:34,059
in a stable tree level, yeah,

02:44:34,059 --> 02:44:35,550
in that we wanna know what bugs

02:44:35,550 --> 02:44:37,220
are inheriting it at that point.

02:44:37,220 --> 02:44:38,910
And we might have to cherry pick fixes,

02:44:38,910 --> 02:44:39,795
things like that from upstream.

02:44:39,795 --> 02:44:42,060
- [Audience Member] There's also all the report ID tracking

02:44:42,060 --> 02:44:42,950
that goes through upstream

02:44:42,950 --> 02:44:44,813
that you wanna be tied to your database as well.

02:44:44,813 --> 02:44:45,893
- Yes, right.

02:44:45,893 --> 02:44:48,210
- [Audience Member] I mean, patches that are fixes

02:44:48,210 --> 02:44:49,933
for Syzkaller reported bugs.

02:44:49,933 --> 02:44:50,766
- Yep.

02:44:50,766 --> 02:44:53,570
- Identify which one and all those things.

02:44:53,570 --> 02:44:54,403
- [George] Right.

02:44:55,537 --> 02:44:57,670
- I don't know if you know this but.

02:44:57,670 --> 02:44:58,503
- Mic.

02:45:00,490 --> 02:45:02,270
- I don't know if you know this but SysBoard

02:45:02,270 --> 02:45:04,660
has a reference attached to it every time.

02:45:04,660 --> 02:45:09,660
So they can correlate it to a fix for a bug they reported.

02:45:09,870 --> 02:45:10,703
- [George] Okay.

02:45:10,703 --> 02:45:12,950
- So maybe it might be useful to track that.

02:45:12,950 --> 02:45:14,640
- Right, I mean, I looked through the website

02:45:14,640 --> 02:45:17,230
and you know, that's it that I'm looking at it.

02:45:17,230 --> 02:45:19,770
There's a script that, you know, helps you out with that.

02:45:19,770 --> 02:45:21,386
That'd be great.

02:45:21,386 --> 02:45:26,080
- How do you, do you have a script in place

02:45:26,080 --> 02:45:30,140
that would fix the Syzkaller bugs?

02:45:31,540 --> 02:45:33,720
- Yes, we, yes.

02:45:33,720 --> 02:45:37,804
Okay, so there was a reference between bugs and fixes.

02:45:37,804 --> 02:45:40,783
- Okay, all right.

02:45:40,783 --> 02:45:44,393
So here's my chance to shout out,

02:45:44,393 --> 02:45:46,777
give a shout out to Syzkaller

02:45:46,777 --> 02:45:49,380
and how it helped our distro release.

02:45:51,350 --> 02:45:54,490
Syzkaller found this, a KASAN stack out of bounds bug

02:45:54,490 --> 02:45:56,493
in IDS way back when.

02:45:56,493 --> 02:45:59,870
The commit to fix it went upstream way back when.

02:46:00,870 --> 02:46:02,620
It also went in our distro release.

02:46:03,726 --> 02:46:06,611
But weekly Syzkaller runs showed that the bug

02:46:06,611 --> 02:46:10,410
showed back up again and I get yelled at by the PM.

02:46:10,410 --> 02:46:13,989
"Hey, the commit is in there, what's wrong with your test?"

02:46:13,989 --> 02:46:17,100
And it turned out we actually had overlaid the fix

02:46:17,100 --> 02:46:20,607
with new code, so Syzkaller found the regression.

02:46:20,607 --> 02:46:25,343
And it was, I don't know, was a good thing.

02:46:31,240 --> 02:46:33,300
So how do others track Syzkaller?

02:46:33,300 --> 02:46:35,933
And this is probably up for,

02:46:35,933 --> 02:46:40,651
we pull Stable tree merges to build our distro release.

02:46:40,651 --> 02:46:43,870
And Syzkaller tracks the latest upstream.

02:46:43,870 --> 02:46:46,520
But I'm wondering also, do you track the stable tree.

02:46:47,933 --> 02:46:51,990
'Cause we run into these types of errors as a result.

02:46:51,990 --> 02:46:53,991
The repro C program will fail

02:46:53,991 --> 02:46:57,300
because the host we're testing on is, like,

02:46:57,300 --> 02:46:59,000
missing defines, things like that.

02:47:00,287 --> 02:47:03,244
So I was wondering in that case,

02:47:03,244 --> 02:47:05,990
if maybe Syzkaller when it starts

02:47:05,990 --> 02:47:08,630
could build maybe a fake repro C program

02:47:08,630 --> 02:47:11,056
just so we know that we're missing.

02:47:11,056 --> 02:47:13,158
- So this is so far the Csport

02:47:13,158 --> 02:47:15,950
when Csport becomes the new Syzkaller

02:47:15,950 --> 02:47:18,170
because it actually runs tests for Syzkaller

02:47:18,170 --> 02:47:19,630
to check them. - Okay.

02:47:19,630 --> 02:47:20,830
- It's a good view. - Okay.

02:47:20,830 --> 02:47:22,140
- And the same happens with the kernel.

02:47:22,140 --> 02:47:24,059
When it puts a new kernel, views it,

02:47:24,059 --> 02:47:27,950
runs some basic tests before it accepts it for testing.

02:47:27,950 --> 02:47:28,783
- [George] Okay.

02:47:28,783 --> 02:47:31,166
- To avoid this situation, then it can

02:47:31,166 --> 02:47:33,200
pick up some new code which is broken

02:47:33,200 --> 02:47:34,670
and then it's not broken.

02:47:34,670 --> 02:47:36,810
- Yeah, 'cause I've run into this before

02:47:36,810 --> 02:47:40,600
and hours later you see that the repro C program

02:47:40,600 --> 02:47:43,600
hasn't been built, and.

02:47:43,600 --> 02:47:44,433
- [Audience Member] Yeah.

02:47:44,433 --> 02:47:45,382
- Okay, good.

02:47:45,382 --> 02:47:46,270
- [Audience Member] We have tests for this program.

02:47:46,270 --> 02:47:47,170
- Okay, excellent.

02:47:48,480 --> 02:47:52,120
The other one, because we're following the stable tree,

02:47:52,120 --> 02:47:55,605
one of the branches where we branch off,

02:47:55,605 --> 02:47:58,678
Syzkaller built itself, Syzkaller will fail

02:47:58,678 --> 02:48:00,316
'cause we're missing a kernel define.

02:48:00,316 --> 02:48:05,316
And so you know, we're not building out

02:48:06,110 --> 02:48:06,943
on the upstream.

02:48:06,943 --> 02:48:08,953
- Are you building it on Windows?

02:48:08,953 --> 02:48:11,092
(laughing)

02:48:11,092 --> 02:48:12,350
- I'm running the show on Windows.

02:48:12,350 --> 02:48:14,720
No, I'm not, yes.

02:48:14,720 --> 02:48:16,640
- [Audience Member] Actually good support for Windows.

02:48:17,940 --> 02:48:19,980
- Yeah, but, all right.

02:48:22,880 --> 02:48:25,390
That's good.

02:48:25,390 --> 02:48:27,840
We have to kind of get by, so the repro

02:48:27,840 --> 02:48:29,800
to find the one that works with our,

02:48:30,740 --> 02:48:32,170
'cause we're not building it on the latest upstream.

02:48:32,170 --> 02:48:35,010
We're not building Syzkaller on the latest upstream kernel.

02:48:35,010 --> 02:48:37,447
We might be building it on one of our updates.

02:48:37,447 --> 02:48:42,447
So, you know what I'm saying?

02:48:42,530 --> 02:48:47,500
- No, so we have CI, we have some brief breakages and things

02:48:47,500 --> 02:48:49,810
which generally we try to take care of.

02:48:49,810 --> 02:48:50,946
- [George] Okay.

02:48:50,946 --> 02:48:51,930
- At least that we know of.

02:48:51,930 --> 02:48:52,763
- [George] Yeah.

02:48:52,763 --> 02:48:55,017
- The CIs may break in Windows.

02:48:55,017 --> 02:48:58,283
- We're not on windows then, anyways--

02:49:02,159 --> 02:49:07,159
- So how often are you actually finding sys bugs

02:49:07,280 --> 02:49:08,510
that you're hitting with sysbots

02:49:08,510 --> 02:49:11,134
such that Syzkaller will stop?

02:49:11,134 --> 02:49:15,370
- It's pretty rare, so, but it's one of the things

02:49:15,370 --> 02:49:17,250
that we run into, it's a tough one to track down

02:49:17,250 --> 02:49:19,100
if the repro C program.

02:49:19,100 --> 02:49:21,130
- Oh, okay, let me clarify that.

02:49:21,130 --> 02:49:22,510
I'm not sure if it came out the right way.

02:49:22,510 --> 02:49:23,459
- [George] Yeah.

02:49:23,459 --> 02:49:25,031
- How often are you actually finding,

02:49:25,031 --> 02:49:27,090
how often is Syzkaller itself finding bugs in your kernel?

02:49:28,900 --> 02:49:30,720
- Well we know it finds it in some areas.

02:49:30,720 --> 02:49:32,411
Our modules, I know it's gonna find bugs.

02:49:32,411 --> 02:49:34,510
- I mean, mostly I think my question,

02:49:34,510 --> 02:49:36,390
I was trying to get at was you mentioned

02:49:36,390 --> 02:49:38,040
you're continuously pulling in new kernels

02:49:38,040 --> 02:49:39,550
but I'm thinking that if we wanted to try apply this

02:49:39,550 --> 02:49:41,430
for other distributions,

02:49:41,430 --> 02:49:42,970
and say if you're focused on something

02:49:42,970 --> 02:49:44,470
on a stable kernel base,

02:49:44,470 --> 02:49:46,200
that's getting stable kernel updates

02:49:46,200 --> 02:49:48,670
possibly as soon as every three days.

02:49:48,670 --> 02:49:51,376
Is that enough time to even do meaningful fuzzing

02:49:51,376 --> 02:49:55,030
on a kernel in the time period of three days?

02:49:55,030 --> 02:49:57,149
- So, we are not getting stable updates

02:49:57,149 --> 02:49:59,350
into the distro every three days

02:49:59,350 --> 02:50:01,750
because at that point in time,

02:50:01,750 --> 02:50:04,120
it's hard to get the testing and so on.

02:50:04,120 --> 02:50:05,500
- [George] We might be two weeks behind or something.

02:50:05,500 --> 02:50:07,230
- Yeah, two or three weeks behind.

02:50:07,230 --> 02:50:09,621
And so, and we get a bunch of them in at the same time.

02:50:09,621 --> 02:50:12,680
And that's the point in time, I guess,

02:50:12,680 --> 02:50:15,010
where Syzkaller would be very useful.

02:50:15,010 --> 02:50:17,170
I do know that, you know, before George did this

02:50:17,170 --> 02:50:21,100
we tried to run stuff for another part of the kernel.

02:50:21,100 --> 02:50:24,824
And we got a fairly high number of issues.

02:50:24,824 --> 02:50:28,090
Of course there were also already fixed upstream

02:50:28,090 --> 02:50:30,784
in newer versions of the kernel, so.

02:50:30,784 --> 02:50:32,847
- Right, if we go on an update,

02:50:32,847 --> 02:50:35,482
we're gonna probably cherry pick those fixes

02:50:35,482 --> 02:50:39,690
to fix or toughen our updates.

02:50:44,346 --> 02:50:46,272
- Yeah, actually with the stable kernels

02:50:46,272 --> 02:50:49,993
more improved is rather verification of the fixes.

02:50:49,993 --> 02:50:54,250
So if we get, so it means that

02:50:54,250 --> 02:50:58,820
of the test cases from Syzkaller.

02:50:58,820 --> 02:51:02,248
And if that works, then it's fine, it's gonna be.

02:51:02,248 --> 02:51:06,289
So we don't have to, yeah,

02:51:06,289 --> 02:51:08,692
find the new box from the stable tree,

02:51:08,692 --> 02:51:10,780
yeah, not necessary.

02:51:12,971 --> 02:51:13,804
- [Audience Member] That's an interesting, okay,

02:51:13,804 --> 02:51:15,050
so it sounds like your suggestion is

02:51:15,050 --> 02:51:16,670
that it's less of the finding new bugs

02:51:16,670 --> 02:51:18,270
but verifying the old ones then.

02:51:19,760 --> 02:51:21,870
- [Audience Member] That's true.

02:51:21,870 --> 02:51:23,660
- Well I mean, finding regressions, you wanna--

02:51:23,660 --> 02:51:25,260
- [Audience Member] Yeah, right.

02:51:26,530 --> 02:51:28,730
- Is it possible to just run the reproducers

02:51:28,730 --> 02:51:29,563
and not run Syzkaller?

02:51:29,563 --> 02:51:31,150
- [George] That's where I was, okay, now we're,

02:51:32,435 --> 02:51:33,781
that's like my next slide.

02:51:33,781 --> 02:51:34,614
- Okay.

02:51:34,614 --> 02:51:35,447
- [George] One of these slides appear--

02:51:35,447 --> 02:51:36,469
- I was transitioning back to you.

02:51:36,469 --> 02:51:37,302
- [George] It's my wish list, that's coming up.

02:51:37,302 --> 02:51:39,848
- So that's partly, that bug ID being in there,

02:51:39,848 --> 02:51:42,400
that ID is also in the patches.

02:51:42,400 --> 02:51:44,910
And then you can grab Syzkaller

02:51:44,910 --> 02:51:48,143
in a list of stable patches for any given thing

02:51:48,143 --> 02:51:50,082
and see what's supposed to be fixed.

02:51:50,082 --> 02:51:50,915
- Okay.

02:51:53,980 --> 02:51:57,070
- I guess the question is how many of these have been fixed

02:51:57,070 --> 02:52:00,330
in a version newer than that stable

02:52:00,330 --> 02:52:02,560
but have not made it back to stable yet.

02:52:02,560 --> 02:52:07,560
- Well, yeah, can we get the mic?

02:52:07,690 --> 02:52:09,610
Frequently I have like six TVs.

02:52:09,610 --> 02:52:12,356
The file yesterday or today, and of those,

02:52:12,356 --> 02:52:14,490
three of those were already unstable kernels

02:52:14,490 --> 02:52:17,480
and three of those are still not in stable yet.

02:52:17,480 --> 02:52:20,600
So there's a process, they're fixed

02:52:20,600 --> 02:52:22,760
to put in an upstream sub tree

02:52:22,760 --> 02:52:24,680
that tree eventually gets in the Linux tree

02:52:24,680 --> 02:52:26,090
and then it can be run to stable.

02:52:26,090 --> 02:52:27,520
And that happens fairly quickly.

02:52:27,520 --> 02:52:29,050
But yeah, there's a lot of them.

02:52:29,050 --> 02:52:30,949
- Does anybody verify those?

02:52:30,949 --> 02:52:32,830
- I don't know.

02:52:32,830 --> 02:52:35,700
(audience laughing)

02:52:35,700 --> 02:52:38,780
- Is anybody verifying that those patches

02:52:38,780 --> 02:52:39,710
that make it back into stable

02:52:39,710 --> 02:52:43,430
are actually not reproducible anymore?

02:52:44,990 --> 02:52:45,940
- Ideally, yes.

02:52:46,833 --> 02:52:48,768
(audience laughing)

02:52:48,768 --> 02:52:50,101
- We have, yeah.

02:52:54,315 --> 02:52:56,250
- We already had one that has to be repaired.

02:52:56,250 --> 02:52:58,390
- Yeah, I mean, from a CV standpoint,

02:52:58,390 --> 02:53:00,900
I'm not tracking every Syzkaller bug upstream.

02:53:00,900 --> 02:53:02,400
But when we get TVs filed yes,

02:53:02,400 --> 02:53:04,630
those TVs are usually followed with the reproducer.

02:53:04,630 --> 02:53:07,570
And the reproducer will, yeah.

02:53:07,570 --> 02:53:09,560
- Instead of people doing it?

02:53:09,560 --> 02:53:11,660
- Yes, instead of people doing it.

02:53:11,660 --> 02:53:13,900
- So I mean, I just wanted to add to what you said.

02:53:13,900 --> 02:53:16,890
I mean, you pointed out three fixes already upstream.

02:53:16,890 --> 02:53:18,430
Sorry, three fixes already unstable

02:53:18,430 --> 02:53:20,160
and then three fixes upstream.

02:53:20,160 --> 02:53:22,810
And at that point in time the value comes out

02:53:22,810 --> 02:53:25,100
around Syzkaller because we know there are fixes

02:53:25,100 --> 02:53:26,510
that are not in stable yet

02:53:26,510 --> 02:53:28,130
or maybe even not known by stable.

02:53:28,130 --> 02:53:29,807
- They're not actually even in upstream yet.

02:53:29,807 --> 02:53:34,807
So the way, Sasha's got his bot doing things

02:53:35,140 --> 02:53:39,310
that essentially, Syzkaller fixes in things like that.

02:53:39,310 --> 02:53:41,126
Once they hit Linux's tree,

02:53:41,126 --> 02:53:43,368
they tend to make the next stable.

02:53:43,368 --> 02:53:44,720
But there's a lot of things

02:53:44,720 --> 02:53:46,510
that haven't hit Linux's tree yet.

02:53:46,510 --> 02:53:47,343
- Right.

02:53:49,590 --> 02:53:52,944
- So I was toying with the stable next idea

02:53:52,944 --> 02:53:55,625
for stuff like that so please get testing going

02:53:55,625 --> 02:53:58,580
on stuff that doesn't make it to stable but just,

02:53:58,580 --> 02:54:00,603
they're about to initially get started.

02:54:00,603 --> 02:54:03,170
It's more of a time constrained discipline.

02:54:03,170 --> 02:54:04,500
But if you think it's just for

02:54:04,500 --> 02:54:05,830
to spend some more time on the--

02:54:05,830 --> 02:54:08,460
- That sounds actually very useful and I'd be happy to help.

02:54:08,460 --> 02:54:10,391
- Yeah, I mean that's what I say.

02:54:10,391 --> 02:54:12,635
Let us know how we can help.

02:54:12,635 --> 02:54:14,130
- Yeah.

02:54:14,130 --> 02:54:15,960
- If you are interested, so we have all of this

02:54:15,960 --> 02:54:17,824
in a database, we have a database

02:54:17,824 --> 02:54:21,170
with several thousands of very interesting programs.

02:54:21,170 --> 02:54:22,190
- [George] That's, okay.

02:54:22,190 --> 02:54:24,131
- That can be extracted.

02:54:24,131 --> 02:54:26,174
- [George] Please reproduce the C programs.

02:54:26,174 --> 02:54:28,890
- Yeah, we don't have exact storage for this.

02:54:28,890 --> 02:54:30,910
And eventually we can generate even different programs.

02:54:30,910 --> 02:54:32,300
- So you don't need the Syzkaller,

02:54:32,300 --> 02:54:34,130
you don't need a Syzkaller framework, you can just run this.

02:54:34,130 --> 02:54:35,120
- [Audience Member] Yes, yes.

02:54:35,120 --> 02:54:38,390
This would be just a set of 5,000 C programs.

02:54:38,390 --> 02:54:39,223
- Okay, just see--

02:54:39,223 --> 02:54:40,110
- [Audience Member] We don't have storage

02:54:40,110 --> 02:54:42,680
for how exactly to extract and update all of these.

02:54:42,680 --> 02:54:44,190
But that's--

02:54:44,190 --> 02:54:46,184
- Yeah, okay, that's a beautiful thing, that's.

02:54:46,184 --> 02:54:50,445
- And I guess this database has the sysbot ID

02:54:50,445 --> 02:54:54,440
for that reproducer which then can hopefully be used

02:54:54,440 --> 02:54:55,560
to find the commit to fix.

02:54:55,560 --> 02:54:59,030
- Yes, yes, they can begin to patch this.

02:54:59,030 --> 02:55:01,750
In some cases they can begin to patch this,

02:55:01,750 --> 02:55:02,710
to fix those bots.

02:55:02,710 --> 02:55:03,543
- Okay.

02:55:05,016 --> 02:55:08,050
All right.

02:55:08,050 --> 02:55:10,949
Okay, so is nobody here from,

02:55:10,949 --> 02:55:13,710
so nobody's using Syzkaller, right?

02:55:13,710 --> 02:55:14,543
Except for you.

02:55:15,771 --> 02:55:16,820
- But the database that you said

02:55:16,820 --> 02:55:20,011
could be somehow public, made public.

02:55:20,011 --> 02:55:21,360
- It is.

02:55:21,360 --> 02:55:22,193
- Depends.

02:55:22,193 --> 02:55:24,590
- Like he said, it depends.

02:55:24,590 --> 02:55:25,720
- It is already, right?

02:55:25,720 --> 02:55:27,560
- Yes, but the bug database you're talking about

02:55:27,560 --> 02:55:28,620
is public, right?

02:55:28,620 --> 02:55:29,453
- Yes. - Okay.

02:55:29,453 --> 02:55:30,286
- Okay, okay.

02:55:31,897 --> 02:55:34,710
- Okay, okay, so this is my wishlist and here it comes.

02:55:37,920 --> 02:55:38,920
You're saying this shouldn't happen.

02:55:38,920 --> 02:55:40,698
But I mean, we can talk.

02:55:40,698 --> 02:55:41,531
I could maybe give you an example.

02:55:41,531 --> 02:55:45,260
So Syzkaller failing because we're building it

02:55:45,260 --> 02:55:48,540
on an update versus the latest substream.

02:55:48,540 --> 02:55:50,180
You know, we're missing a defined.

02:55:51,015 --> 02:55:53,400
- [Audience Member] Ah, okay, if you mean that

02:55:53,400 --> 02:55:55,910
the Syzkaller build itself fails as started,

02:55:55,910 --> 02:55:58,090
that's a fundamental Linux problem.

02:55:58,090 --> 02:55:58,923
- Okay.

02:55:58,923 --> 02:55:59,756
- [Audience Member] You just might be able

02:55:59,756 --> 02:56:01,380
to build the C program.

02:56:01,380 --> 02:56:02,220
- Yeah.

02:56:02,220 --> 02:56:03,053
- On it.

02:56:03,053 --> 02:56:05,590
- Well, Syzkaller's using the latest kernel defined.

02:56:05,590 --> 02:56:06,590
We don't hae or.

02:56:06,590 --> 02:56:08,870
- Yeah, because we try to test

02:56:08,870 --> 02:56:10,510
some of the latest Linux things

02:56:10,510 --> 02:56:13,510
so we need some different, actually in the number of cases

02:56:13,510 --> 02:56:17,118
we have to open codes, some of the structures.

02:56:17,118 --> 02:56:19,870
Because it's just not possible to, you know,

02:56:19,870 --> 02:56:21,750
have a set of include set.

02:56:21,750 --> 02:56:23,050
We work on the distribution.

02:56:23,050 --> 02:56:24,664
- [George] A one size fits all kind of thing, yeah.

02:56:24,664 --> 02:56:27,509
- Yeah, well we can spot fix some of them

02:56:27,509 --> 02:56:31,502
by also providing defines in Syzkaller

02:56:31,502 --> 02:56:34,230
rather than including some here.

02:56:34,230 --> 02:56:37,000
- Okay, and then this one's already been mentioned.

02:56:37,000 --> 02:56:38,201
It sounds like it's out there.

02:56:38,201 --> 02:56:40,140
This would be great for us,

02:56:40,140 --> 02:56:43,350
the database of the repro C programs.

02:56:44,258 --> 02:56:46,190
That would be a great help.

02:56:47,280 --> 02:56:50,240
- So it's not there but it's possible to create it.

02:56:50,240 --> 02:56:51,073
- [George] Okay.

02:56:51,073 --> 02:56:53,430
- So we need to know the exact form and everything.

02:56:53,430 --> 02:56:54,840
- Well, there's a wealth of knowledge there

02:56:54,840 --> 02:56:56,980
that'd be great to, that would probably cut out

02:56:56,980 --> 02:56:59,250
a lot of testing, regression testing, yeah.

02:57:01,850 --> 02:57:02,870
Um, yeah.

02:57:04,999 --> 02:57:06,740
Okay.

02:57:06,740 --> 02:57:09,970
So I guess there's not a lot of fuzzing going on here.

02:57:11,830 --> 02:57:14,801
- [Audience Member] Can I make a few comments?

02:57:14,801 --> 02:57:15,634
- Yeah, sure.

02:57:15,634 --> 02:57:17,430
- [Audience Member] So if your goal is to find bugs.

02:57:17,430 --> 02:57:18,263
- Yeah.

02:57:18,263 --> 02:57:19,620
- And then step to fix bugs,

02:57:19,620 --> 02:57:21,918
then you can jump right to step two

02:57:21,918 --> 02:57:24,120
because they're testing the stable

02:57:24,120 --> 02:57:27,790
and there is at least 400 bugs in 4.4

02:57:27,790 --> 02:57:29,920
that are known and they are not fixed.

02:57:29,920 --> 02:57:32,854
- Right, so we're really focused on our modules,

02:57:32,854 --> 02:57:35,790
you know, we wanna know what we're inheriting too

02:57:35,790 --> 02:57:36,760
with the stable.

02:57:36,760 --> 02:57:39,130
We're gonna branch off on the stable, you know.

02:57:39,130 --> 02:57:40,366
- [Audience Member] Okay.

02:57:40,366 --> 02:57:42,070
- So hold on, let me, I have a comment.

02:57:42,070 --> 02:57:44,555
So it's not just, you know, 414 bugs.

02:57:44,555 --> 02:57:47,574
Since it's a distro kernel and price kernel,

02:57:47,574 --> 02:57:49,491
we bring back other features

02:57:49,491 --> 02:57:52,324
from newer versions of the kernel.

02:57:52,324 --> 02:57:55,590
We also have code that we're carrying

02:57:55,590 --> 02:57:57,580
that they're working on upstreaming

02:57:57,580 --> 02:57:59,493
but we also want to ship it.

02:57:59,493 --> 02:58:02,143
So there are different things as well,

02:58:02,143 --> 02:58:04,990
which is where, you know, it starts becoming useful.

02:58:04,990 --> 02:58:08,810
Now, knowing that there is a bug database already

02:58:08,810 --> 02:58:11,170
that we can use to prime ours,

02:58:11,170 --> 02:58:12,700
means then we can avoid these duplicates

02:58:12,700 --> 02:58:14,964
and say, hey, we already know about these.

02:58:14,964 --> 02:58:18,400
- So, yeah, that's when, talk next,

02:58:18,400 --> 02:58:22,380
so the CSbot, CSbot does all of what you seem to be doing.

02:58:22,380 --> 02:58:23,530
- [George] Yeah, yep.

02:58:23,530 --> 02:58:26,700
- And that Syzkaller application itself is not,

02:58:26,700 --> 02:58:28,240
it's kind of a stable product.

02:58:28,240 --> 02:58:30,321
So we sometimes change, for example, database format

02:58:30,321 --> 02:58:34,480
and then we'd do an update of the database so it's not--

02:58:34,480 --> 02:58:36,020
- [George] There's intervention it has to go along

02:58:36,020 --> 02:58:37,810
with using sysbot, is what you're saying.

02:58:37,810 --> 02:58:39,120
- It's open source but yeah.

02:58:39,120 --> 02:58:41,435
We generally need that it's not super stable, yeah.

02:58:41,435 --> 02:58:45,290
But we, potentially we could run sysbot

02:58:45,290 --> 02:58:46,680
on your application.

02:58:46,680 --> 02:58:48,490
And we mainly need, the things for this one

02:58:48,490 --> 02:58:51,600
is each rep and the second is your config.

02:58:51,600 --> 02:58:52,900
- Right, so we have a GitHub.

02:58:52,900 --> 02:58:54,850
There's probably two ways behind.

02:58:54,850 --> 02:58:56,350
- Yeah, also, the important thing

02:58:56,350 --> 02:58:59,410
is desire to fix the bugs that are there, because--

02:58:59,410 --> 02:59:01,190
- Actually that was one of the other questions.

02:59:01,190 --> 02:59:02,950
Who fixes the, is it just out there

02:59:02,950 --> 02:59:04,359
for anybody to fix or,

02:59:04,359 --> 02:59:05,850
so you've got hundreds of bugs.

02:59:05,850 --> 02:59:09,830
- But the upstream mail to upstream made in place

02:59:09,830 --> 02:59:12,040
and we try to find the maintainers.

02:59:12,040 --> 02:59:12,873
- [George] Yep.

02:59:12,873 --> 02:59:14,510
- For LTS, nothing happens.

02:59:14,510 --> 02:59:16,716
So we publish them but we didn't get

02:59:16,716 --> 02:59:18,041
what actually should happen.

02:59:18,041 --> 02:59:20,600
- [George] Okay, so we might be addressing these fixes.

02:59:20,600 --> 02:59:25,018
- Where are these FTS groups and maintainers?

02:59:25,018 --> 02:59:26,802
In HTML or somewhere else?

02:59:26,802 --> 02:59:29,751
- It goes currently to public main place

02:59:29,751 --> 02:59:31,590
that nobody subscribes to it.

02:59:31,590 --> 02:59:33,865
There may be some people but.

02:59:33,865 --> 02:59:35,320
- [George] My boss is yelling at me,

02:59:35,320 --> 02:59:36,460
why aren't you creating mail on this?

02:59:36,460 --> 02:59:38,650
- Can you maybe just see the stable mailing list

02:59:38,650 --> 02:59:39,960
on those for them?

02:59:41,400 --> 02:59:43,680
- Okay, you gave me permission, so sure does.

02:59:43,680 --> 02:59:44,926
- Go for it, yeah.

02:59:44,926 --> 02:59:46,470
That's what it's there for.

02:59:46,470 --> 02:59:47,750
- But so.

02:59:47,750 --> 02:59:48,583
- Make it.

02:59:49,461 --> 02:59:51,720
- Well, so I was gonna, backing up to

02:59:51,720 --> 02:59:53,820
your question about the reproducers.

02:59:53,820 --> 02:59:55,250
I don't know enough about fuzzing.

02:59:55,250 --> 02:59:56,770
This is probably just gonna be a dumb question.

02:59:56,770 --> 03:00:01,480
But it seems like that's a problem.

03:00:02,460 --> 03:00:04,630
The idea of sharing tests that,

03:00:06,300 --> 03:00:08,470
it's kind of a bigger industry problem, right?

03:00:08,470 --> 03:00:10,547
So it'd be nice if there was a server somewhere

03:00:10,547 --> 03:00:13,455
that you could go and grab tests off of

03:00:13,455 --> 03:00:15,860
and just run them and then when you found,

03:00:15,860 --> 03:00:18,979
like when the Syzkaller or some other test found,

03:00:18,979 --> 03:00:23,660
fuzzer found something that caused a problem,

03:00:23,660 --> 03:00:26,203
you wanna run that again in a regression context later.

03:00:26,203 --> 03:00:30,700
It'd be nice if there was an industry wide repository

03:00:30,700 --> 03:00:32,763
of those things, possibly in source form

03:00:32,763 --> 03:00:36,270
or possibly, and the source form is Syzkaller itself, right?

03:00:36,270 --> 03:00:38,690
The GitHub project but it'd be nice

03:00:38,690 --> 03:00:40,520
if they were in binary format sitting somewhere

03:00:40,520 --> 03:00:42,440
so you could just grab like the entire wall.

03:00:42,440 --> 03:00:46,020
But the problem's bigger than just Syzkaller.

03:00:46,020 --> 03:00:49,040
We have the same problem with other types of tests,

03:00:49,040 --> 03:00:50,230
where you wanna have the binary

03:00:50,230 --> 03:00:52,490
just readily available to run.

03:00:52,490 --> 03:00:54,660
And so part of that is the test definition stuff

03:00:54,660 --> 03:00:55,520
that we've been talking about

03:00:55,520 --> 03:00:58,822
and we're planning to talk about it, the CKI hacks,

03:00:58,822 --> 03:01:02,550
to make it so that you can just have a central repository

03:01:02,550 --> 03:01:05,850
you can grab a test off of, run it, and get your results.

03:01:06,984 --> 03:01:08,301
- So I got one more for you.

03:01:08,301 --> 03:01:09,984
I know I've communicated with you

03:01:09,984 --> 03:01:12,475
and I'm running out of time.

03:01:12,475 --> 03:01:15,910
The very last one, so you only have Chrome?

03:01:15,910 --> 03:01:18,680
I mean, it'd be great if you could get more architectures

03:01:18,680 --> 03:01:22,210
in your server farm because for instance,

03:01:22,210 --> 03:01:26,570
this last one, I think you and I talked about.

03:01:26,570 --> 03:01:29,361
We're only seeing this on the AMD servers.

03:01:29,361 --> 03:01:34,361
And it looks like it's happening, KVM and SVM.

03:01:37,080 --> 03:01:38,900
- [Audience Member] So currently we have a farm, it's GC.

03:01:38,900 --> 03:01:40,120
- Yeah, yeah.

03:01:40,120 --> 03:01:43,210
Be great if you could expand it with one more type.

03:01:46,754 --> 03:01:48,330
- [Audience Member] Yeah.

03:01:48,330 --> 03:01:49,760
- Here's the link.

03:01:49,760 --> 03:01:52,530
If anybody wants to fix it, there's the link.

03:01:52,530 --> 03:01:53,390
- [Audience Member] Here's a question,

03:01:53,390 --> 03:01:57,090
how hard would it be to run Sysbot outside of Google?

03:01:57,090 --> 03:02:00,380
Let's say the source opens and I pick it up,

03:02:00,380 --> 03:02:02,192
how hard would it be for me to run it?

03:02:02,192 --> 03:02:04,210
- You mean, so there are two options.

03:02:04,210 --> 03:02:06,061
You can run the whole thing,

03:02:06,061 --> 03:02:08,755
just scrub the sources and be on deployment.

03:02:08,755 --> 03:02:13,434
As I said, would not support fully as a stable thing.

03:02:13,434 --> 03:02:16,170
Second option is to kind of have a,

03:02:16,170 --> 03:02:19,250
what I think kernel does have a firm machine

03:02:19,250 --> 03:02:22,260
that is running but then connects to the centralized body

03:02:22,260 --> 03:02:25,218
in support for reports and purposes and so on.

03:02:25,218 --> 03:02:28,350
So that's something that was in the plans

03:02:28,350 --> 03:02:30,990
and Syzkaller itself perfectly supports this.

03:02:30,990 --> 03:02:34,380
But we never actually did it.

03:02:34,380 --> 03:02:35,810
It should be possible.

03:02:37,440 --> 03:02:39,692
Yes, we can discuss this.

03:02:39,692 --> 03:02:44,692
- Okay, all right, here's my,

03:02:44,850 --> 03:02:46,300
I know who to talk to.

03:02:46,300 --> 03:02:47,270
- [Audience Member] And a few things I wanted,

03:02:47,270 --> 03:02:49,340
you have minus one minute,

03:02:49,340 --> 03:02:50,970
is that if actually you're on a sysbot

03:02:50,970 --> 03:02:53,340
then it will provide cross references.

03:02:53,340 --> 03:02:55,350
For example, this bug happens in your distro

03:02:55,350 --> 03:02:58,341
but also unstable which may be very useful.

03:02:58,341 --> 03:02:59,710
- [George] Okay, yes, yes.

03:02:59,710 --> 03:03:02,335
- And also, one thing that this would be useful

03:03:02,335 --> 03:03:05,830
for contribution is extending the subsistence

03:03:05,830 --> 03:03:07,010
that Syzkaller covers

03:03:07,010 --> 03:03:09,937
because we still cover about 7% of the kernel.

03:03:09,937 --> 03:03:10,770
- [George] Right.

03:03:10,770 --> 03:03:12,700
- So there are systems that are interested, that--

03:03:12,700 --> 03:03:14,330
- Well that's what, I would probably need help with that.

03:03:14,330 --> 03:03:18,980
How do I, you know, do my VM

03:03:18,980 --> 03:03:22,010
to include more sub systems and have Syzkaller test them.

03:03:22,010 --> 03:03:22,908
- Yes, so we have--

03:03:22,908 --> 03:03:25,720
- [George] I know there's two kind of rudimentary tools

03:03:25,720 --> 03:03:29,500
to bring in something new, but I might need help with that.

03:03:29,500 --> 03:03:31,708
- We have docs, also have made these.

03:03:31,708 --> 03:03:33,571
So the next step will be emails

03:03:33,571 --> 03:03:35,920
and then Syzkaller mail increase.

03:03:35,920 --> 03:03:37,570
- [George] Okay, very good, all right.

03:03:37,570 --> 03:03:39,250
- Your time's into lunchtime.

03:03:39,250 --> 03:03:41,251
So I hate to cut off the conversation,

03:03:41,251 --> 03:03:42,877
but as well, once again,

03:03:42,877 --> 03:03:46,240
thank you very much for presenting this topic.

03:03:46,240 --> 03:03:47,290
And thank you to everyone

03:03:47,290 --> 03:03:50,361
who asked questions and participated, so yes, thanks.

03:03:50,361 --> 03:03:53,528

YouTube URL: https://www.youtube.com/watch?v=teBL1zj7ptA


