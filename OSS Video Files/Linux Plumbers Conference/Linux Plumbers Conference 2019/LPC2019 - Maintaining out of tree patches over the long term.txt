Title: LPC2019 - Maintaining out of tree patches over the long term
Publication date: 2019-09-17
Playlist: Linux Plumbers Conference 2019
Description: 
	Maintaining out of tree patches over the long term

Speakers
 Daniel Wagner
 Daniel Bristot de Oliveira (Red Hat, Inc.)
 Steven Rostedt
 Tom Zanussi
 John Kacur

Description
The PREEMPT_RT patchset is the longest existing large patchset living outside the Linux kernel. Over the years, the realtime developers had to maintain several stable kernel versions of the patchset. This talk will present the lessons learned from this experience, including workflow, tooling and release management that has proven over time to scale. The workflow deals with upstream changes and changes to the patchset itself. Now that the PREEMPT_RT patchset is about the be merged upstream, we want to share our toolset and methods with others who may be able to benefit from our experience.

This talk is for people who want to maintain an external patchset with stable releases.
Captions: 
	00:00:00,230 --> 00:00:03,393
- Hi, everyone, my name is Daniel Wagner.

00:00:04,440 --> 00:00:07,400
I'm working since a month at SUSE,

00:00:07,400 --> 00:00:08,950
that's why everything is green.

00:00:10,810 --> 00:00:13,100
You're wondering why just my name is on the slide,

00:00:13,100 --> 00:00:16,470
the other guys bailed out providing information to this talk

00:00:16,470 --> 00:00:18,300
so I'm just giving it myself.

00:00:18,300 --> 00:00:21,450
I will point out, yeah, I'm pointing out to those guys

00:00:22,400 --> 00:00:24,320
during the talk at the right point.

00:00:24,320 --> 00:00:28,990
So this talk is basically the summary

00:00:28,990 --> 00:00:33,990
how we came up to provide the stable RT patch series

00:00:34,290 --> 00:00:36,389
for now 15 years.

00:00:36,389 --> 00:00:38,222
- [Man] Well, 2004.

00:00:38,222 --> 00:00:41,970
- Yeah, so the first part was just the development tree

00:00:41,970 --> 00:00:46,253
and later on Steven started to do the stable tree releases.

00:00:47,860 --> 00:00:50,880
So this is basically just the summary how we did that,

00:00:50,880 --> 00:00:53,423
how we got there and what's going on.

00:00:55,830 --> 00:00:58,160
Just basically the structure of the talk,

00:00:58,160 --> 00:01:01,543
just the first bit of the patch flow what we have.

00:01:03,020 --> 00:01:04,570
The ideas how the process works

00:01:04,570 --> 00:01:08,000
and where the tooling basically is,

00:01:08,000 --> 00:01:10,143
what we have now as tooling.

00:01:11,364 --> 00:01:12,913
So the first part is,

00:01:13,800 --> 00:01:17,140
so we're starting with the mainline releases,

00:01:17,140 --> 00:01:22,060
we don't use every or we don't provide

00:01:22,060 --> 00:01:24,503
for every mainline release a new version.

00:01:25,350 --> 00:01:27,930
The usual idea was like every second version,

00:01:27,930 --> 00:01:31,690
except we hit like a stable, an LTS tree,

00:01:31,690 --> 00:01:34,860
then we want to provide the RT patches for that.

00:01:34,860 --> 00:01:38,700
So the development starts basically

00:01:38,700 --> 00:01:43,080
on one of those trees and so what you get

00:01:43,080 --> 00:01:47,780
is basically just a patch queue for that tree

00:01:47,780 --> 00:01:50,810
if we finish with the first version.

00:01:50,810 --> 00:01:55,630
And so if you look next release you get a new version

00:01:55,630 --> 00:01:58,300
of the patch series, but it looks slightly different,

00:01:58,300 --> 00:02:00,893
maybe it's bigger, sometimes it's slow,

00:02:02,360 --> 00:02:05,880
fewer patches in the queue or yeah.

00:02:05,880 --> 00:02:09,980
So it's changing overtime, it's not always the same.

00:02:09,980 --> 00:02:14,980
Reason being is we have patches which get into the series

00:02:17,170 --> 00:02:20,410
at one point and they live through each release

00:02:20,410 --> 00:02:23,223
and then they disappear for some reason.

00:02:24,750 --> 00:02:27,850
This could be anything, right, like this

00:02:27,850 --> 00:02:31,480
and we have things which come to the tree

00:02:31,480 --> 00:02:34,720
and will get lost again.

00:02:34,720 --> 00:02:37,410
And most of the time it's something like this,

00:02:37,410 --> 00:02:41,420
we have a patch which gets split into two patches

00:02:43,110 --> 00:02:46,183
or we start merging patches together.

00:02:48,880 --> 00:02:52,570
One main reason how to get patches lost in the tree

00:02:52,570 --> 00:02:57,253
or disappear is if they get merged into mainline.

00:02:58,170 --> 00:03:03,170
So what's usually happening is a patch or a feature

00:03:03,680 --> 00:03:06,320
gets developed in the tree, in the default tree,

00:03:06,320 --> 00:03:09,160
it gets stabilized, we get feedback

00:03:09,160 --> 00:03:13,700
and after some time we see, okay, this feature works

00:03:13,700 --> 00:03:16,873
and then it's ported to mainline basically and deployed.

00:03:18,560 --> 00:03:22,420
So this work has finished now,

00:03:22,420 --> 00:03:25,610
everything which is not realtime related

00:03:25,610 --> 00:03:28,380
has been merged at this point.

00:03:28,380 --> 00:03:30,650
The only thing which is left at this point

00:03:30,650 --> 00:03:34,903
is the preempt RT specific ports,

00:03:37,200 --> 00:03:40,713
which we hope to see get merged very soon.

00:03:43,630 --> 00:03:45,719
It's like the year of the desktop.

00:03:45,719 --> 00:03:46,552
(laughing)

00:03:46,552 --> 00:03:47,694
- [Man] You know, at the end.

00:03:47,694 --> 00:03:48,818
- Hmm? - Did you know,

00:03:48,818 --> 00:03:50,193
at the end of the (static noise drowns out speaker).

00:03:50,193 --> 00:03:52,437
- There's a keynote on that one, okay.

00:03:56,350 --> 00:04:00,470
Okay and another thing what we have in our workflow,

00:04:00,470 --> 00:04:03,653
obviously, if we need a patch from upstream, basically,

00:04:03,653 --> 00:04:08,310
from the mainline it gets also integrated into the series.

00:04:08,310 --> 00:04:11,300
So this is basically everything what we have done

00:04:11,300 --> 00:04:14,873
with the series for each release.

00:04:16,160 --> 00:04:21,160
This is basically the ingredients of this flow of everything

00:04:23,950 --> 00:04:25,793
how you create the patches.

00:04:27,130 --> 00:04:29,453
Any questions, because I'm too fast?

00:04:31,210 --> 00:04:32,043
Okay.

00:04:36,450 --> 00:04:39,463
The development tree looks exactly,

00:04:41,044 --> 00:04:43,970
has the same thing basically as the stable trees,

00:04:43,970 --> 00:04:47,530
what I showed you now was basically stable releases

00:04:49,600 --> 00:04:52,090
or the development releases.

00:04:52,090 --> 00:04:55,820
And if you look inside one of those releases,

00:04:55,820 --> 00:04:58,110
so let's say we have version 5.2

00:04:59,430 --> 00:05:03,370
and during the 5.2 development phase

00:05:05,900 --> 00:05:08,470
we also have exactly the same thing happening

00:05:08,470 --> 00:05:11,450
as we have seen between the big releases.

00:05:11,450 --> 00:05:15,390
So within one release we have the same process

00:05:15,390 --> 00:05:20,390
as over the whole or the stable trees.

00:05:21,560 --> 00:05:25,080
And this is, again, patches get merged, get split

00:05:25,947 --> 00:05:30,390
and we also do the integration with mainline.

00:05:31,710 --> 00:05:34,680
And what you can already see in this slide

00:05:34,680 --> 00:05:39,553
is the numbering scheme, what we came up was basically

00:05:41,280 --> 00:05:44,900
you just add the -rt and the version number

00:05:44,900 --> 00:05:49,373
of the RT is always increasing for every release you do.

00:05:54,380 --> 00:05:57,500
There's a reason behind that we always increase it,

00:05:57,500 --> 00:06:01,770
but let me come back to that later,

00:06:01,770 --> 00:06:05,540
but it's important to see that every release we have

00:06:05,540 --> 00:06:08,380
we know that if we increase one number in the end,

00:06:08,380 --> 00:06:09,780
okay, there's a new version.

00:06:11,710 --> 00:06:13,840
There's some information encoded in that one.

00:06:13,840 --> 00:06:18,693
So again, this is also what we do with mainline,

00:06:19,970 --> 00:06:21,420
like back port and forward port.

00:06:21,420 --> 00:06:24,453
So this is, I guess, very simple.

00:06:28,000 --> 00:06:29,990
This is more interesting,

00:06:29,990 --> 00:06:33,900
so we have different sources for the patches,

00:06:33,900 --> 00:06:36,670
so mainline basically is our target

00:06:36,670 --> 00:06:41,670
and the development tree contains all the patches

00:06:43,480 --> 00:06:46,080
which should go mainline.

00:06:46,080 --> 00:06:51,023
The stable tree is basically, how you say that,

00:06:51,883 --> 00:06:54,400
a service to the users that they can use

00:06:54,400 --> 00:06:56,660
for while stable patches.

00:06:56,660 --> 00:06:59,830
Because in the end the development team

00:07:00,911 --> 00:07:03,310
doesn't really need that stable thing,

00:07:03,310 --> 00:07:05,520
unless we get feedback out of it.

00:07:05,520 --> 00:07:10,360
And in the past, I don't know, did we get a lot of features

00:07:10,360 --> 00:07:12,890
or not, the bug reports?

00:07:12,890 --> 00:07:14,710
- [Man] Well, not to devel.

00:07:14,710 --> 00:07:16,293
- Yeah, so it was.

00:07:19,030 --> 00:07:20,037
- [Man] I played (coughing drowns out speaker).

00:07:21,400 --> 00:07:25,732
- Okay, so there weren't many bug reports

00:07:25,732 --> 00:07:28,560
coming back to mainline, sometimes there is something

00:07:30,620 --> 00:07:32,880
reported in the stable tree that, okay,

00:07:32,880 --> 00:07:35,233
this doesn't work anymore or it breaks.

00:07:36,170 --> 00:07:38,570
But then usually if you have the workload

00:07:38,570 --> 00:07:39,610
and you know what you're looking for

00:07:39,610 --> 00:07:41,510
you see those in the development tree.

00:07:42,428 --> 00:07:46,283
And then the fix goes first in the development tree.

00:07:47,761 --> 00:07:49,180
- [Man] Yeah.

00:07:49,180 --> 00:07:50,920
Yeah, I just wanna make sure that everyone knows,

00:07:50,920 --> 00:07:52,910
we kind of found the stable, nothing goes in stable

00:07:52,910 --> 00:07:54,930
unless it's either in the development tree or in mainline.

00:07:54,930 --> 00:07:56,540
In fact the way I've always done it

00:07:56,540 --> 00:07:58,621
is if it's mainline, I wait for it to get into stable

00:07:58,621 --> 00:08:01,249
before I put it into the stable RT.

00:08:01,249 --> 00:08:02,570
- [Daniel] Yes, yes.

00:08:02,570 --> 00:08:03,403
- [Man] Speaking of bug reports,

00:08:03,403 --> 00:08:04,890
so I just inject right here,

00:08:04,890 --> 00:08:06,572
if everyone noticed that 4.19 hasn't been updated

00:08:06,572 --> 00:08:11,240
in a long time, it's because I did a recent merge,

00:08:11,240 --> 00:08:13,880
I did the stable pull into the stable RT

00:08:13,880 --> 00:08:15,550
and a bug showed up.

00:08:15,550 --> 00:08:18,180
And right now I haven't been able to solve it,

00:08:18,180 --> 00:08:22,140
so I'm afraid, I don't wanna push a buggy tree

00:08:22,140 --> 00:08:24,700
and I haven't had the cycles to hopefully avert it,

00:08:24,700 --> 00:08:26,021
so I just sent an email just now

00:08:26,021 --> 00:08:28,500
saying could we get together and fix 4.19,

00:08:28,500 --> 00:08:30,230
so we could actually get that moving again.

00:08:30,230 --> 00:08:31,170
- Okay. - Just to let everyone know

00:08:31,170 --> 00:08:32,673
why 4.19 hasn't been shown,

00:08:32,673 --> 00:08:34,680
it wasn't because I've been ignoring it.

00:08:34,680 --> 00:08:39,050
- Yeah, so basically we're a team of four people

00:08:39,050 --> 00:08:43,320
doing the stable RT trees and that means any one of us

00:08:43,320 --> 00:08:45,870
has like maintenance-ship over one

00:08:45,870 --> 00:08:50,740
and updating the stable RT tree we have the development team

00:08:50,740 --> 00:08:54,853
Tomas and Sebastian doing that work.

00:09:00,950 --> 00:09:04,470
Yeah and this is how those patches work,

00:09:04,470 --> 00:09:07,400
so what we try to do in the stable tree at least

00:09:07,400 --> 00:09:12,400
is not doing any, except like box fixing changes,

00:09:13,900 --> 00:09:17,800
because this is usually where things get really,

00:09:17,800 --> 00:09:20,660
really difficult to handle over time.

00:09:20,660 --> 00:09:22,597
We always try to get the development tree

00:09:22,597 --> 00:09:24,233
working one more time.

00:09:26,450 --> 00:09:29,630
The branches we have also on, we have branches

00:09:29,630 --> 00:09:34,630
and this is where we basically make sure

00:09:35,380 --> 00:09:37,720
we have different kind of branches.

00:09:37,720 --> 00:09:41,510
The first one is always a merge branch,

00:09:41,510 --> 00:09:44,940
that means you can always pull patches from that tree.

00:09:44,940 --> 00:09:49,940
And the second with the dash patches contains

00:09:50,090 --> 00:09:55,090
the re-based or just the split-out patches as patch series.

00:09:55,360 --> 00:09:58,340
And the devel tree has just another

00:10:01,950 --> 00:10:03,453
branch which contains basically,

00:10:03,453 --> 00:10:06,410
it's a backup of the patches sent out to the mailings,

00:10:06,410 --> 00:10:08,980
but it's not that important.

00:10:08,980 --> 00:10:13,173
The stable trees also contain just, we have one merge branch

00:10:14,900 --> 00:10:17,830
and one which contains the separate out patches.

00:10:17,830 --> 00:10:19,470
So this is basically patches from the top

00:10:19,470 --> 00:10:23,090
of the stable trees from Greg.

00:10:23,090 --> 00:10:26,800
And sometimes it contains like a back port edition we need

00:10:26,800 --> 00:10:27,690
or something like that.

00:10:27,690 --> 00:10:30,650
But those patches stay fairly the same

00:10:30,650 --> 00:10:35,650
and this makes it really easy for most downstream users

00:10:36,560 --> 00:10:38,383
to just pick that version,

00:10:42,540 --> 00:10:46,093
if you have a different kernel or different kernel version.

00:10:47,020 --> 00:10:48,193
Greg has a question.

00:10:50,142 --> 00:10:52,742
- What's the difference between patches and re-base?

00:10:58,673 --> 00:11:01,593
- The sent out release on the mailing list.

00:11:04,381 --> 00:11:07,370
The devel tree basically just stores the version

00:11:07,370 --> 00:11:09,060
which is sent out to the mailing list.

00:11:09,060 --> 00:11:11,670
It could be a file system in the end.

00:11:11,670 --> 00:11:14,976
So it doesn't contain a git tree, it's just--

00:11:14,976 --> 00:11:16,310
- [Man] A series of little cuts.

00:11:16,310 --> 00:11:20,593
- Yeah, exactly, just a quilt tree basically.

00:11:23,420 --> 00:11:27,347
For the stable tree we just upload that to the server,

00:11:30,250 --> 00:11:35,080
the kernel.org, yeah, I'll show it later.

00:11:35,080 --> 00:11:40,080
So about the tags, so we have basically

00:11:41,280 --> 00:11:46,220
the rule that you just do one thing doing a release.

00:11:46,220 --> 00:11:50,860
Either you update your tree on a new stable release

00:11:50,860 --> 00:11:54,347
or you change the RT patch, you never do the same thing,

00:11:54,347 --> 00:11:58,600
you do one thing, because it's harder to debug.

00:11:58,600 --> 00:12:00,980
It's really hard later on to figure out

00:12:00,980 --> 00:12:04,150
what was the cause when something doesn't work anymore.

00:12:04,150 --> 00:12:09,150
So that means in the end you just can look at the tag

00:12:10,007 --> 00:12:12,430
and you know what happened during that phase

00:12:12,430 --> 00:12:14,760
compared to the previous things.

00:12:14,760 --> 00:12:17,060
If the stable version goes up one

00:12:17,060 --> 00:12:19,600
you know it's just a stable update.

00:12:19,600 --> 00:12:21,480
If the stable version stays the same

00:12:21,480 --> 00:12:25,890
and you just have a -rt number goes up one, you know,

00:12:25,890 --> 00:12:28,323
okay, the patch set has changed internally.

00:12:30,726 --> 00:12:34,890
- And then we have the problem where you update one

00:12:34,890 --> 00:12:36,950
or you do the merge for stable

00:12:36,950 --> 00:12:39,590
and something changed where now you need to get a patch

00:12:39,590 --> 00:12:42,920
from the devel tree to make it work again.

00:12:42,920 --> 00:12:45,000
- Yes, okay, that's what you said,

00:12:45,000 --> 00:12:48,160
there's a gray zone where you just need something

00:12:48,160 --> 00:12:50,340
to get it working again.

00:12:50,340 --> 00:12:53,100
But usually it's just for one release,

00:12:53,100 --> 00:12:55,856
the next release you get it trough the stable tree again,

00:12:55,856 --> 00:12:59,570
for example or a different way.

00:12:59,570 --> 00:13:03,100
As I said, the patch set stays pretty much the same

00:13:03,100 --> 00:13:05,680
when it hits the stable stage.

00:13:05,680 --> 00:13:09,143
For the development tree that changes a lot up and down.

00:13:10,130 --> 00:13:13,043
Yeah, okay.

00:13:14,380 --> 00:13:17,902
So I think that slide, yeah.

00:13:17,902 --> 00:13:20,863
So it's just, again, the numbering scheme,

00:13:22,475 --> 00:13:24,550
below we have the stable releases

00:13:24,550 --> 00:13:27,093
and you see the second and third one is the same,

00:13:29,950 --> 00:13:32,850
that means we have introduced a new patch,

00:13:32,850 --> 00:13:37,010
because it's RT 19 to RT 20, goes one up

00:13:37,010 --> 00:13:41,243
and the stable version number stays the same.

00:13:43,336 --> 00:13:48,037
The naming scheme is where we basically encode

00:13:49,900 --> 00:13:54,900
what's happening without writing release notes and so on.

00:13:54,990 --> 00:13:56,253
You still do that.

00:13:58,250 --> 00:14:01,008
And yeah, as I said, we have two--

00:14:01,008 --> 00:14:01,841
- [Man] Sorry.

00:14:01,841 --> 00:14:02,674
- Yeah.

00:14:03,927 --> 00:14:04,760
Yeah.

00:14:04,760 --> 00:14:09,510
- Do you actually increase to 21, I mean, the thing is,

00:14:12,630 --> 00:14:13,660
and the better is the same thing,

00:14:13,660 --> 00:14:16,607
so it's basically the same patch that goes over there.

00:14:16,607 --> 00:14:18,820
- [Daniel] Yeah, okay.

00:14:18,820 --> 00:14:20,392
- Just to understand that.

00:14:20,392 --> 00:14:24,690
- So this was, yeah, not the change, basically,

00:14:24,690 --> 00:14:26,393
in the patch series, yeah.

00:14:28,110 --> 00:14:32,350
- I kind of remember this, I finished the RT 19,

00:14:32,350 --> 00:14:36,070
RT 19 to 20 was just added patches.

00:14:36,070 --> 00:14:38,610
After I got that going someone found a bug

00:14:38,610 --> 00:14:40,470
and then I had to send another, do another one,

00:14:40,470 --> 00:14:41,837
so I added another patch.

00:14:41,837 --> 00:14:44,381
- So that was what became RT 20.

00:14:44,381 --> 00:14:46,120
And then 21 was.

00:14:46,120 --> 00:14:47,057
- [Daniel] Bug (static noise drowns out speaker).

00:14:48,630 --> 00:14:52,470
- So if I understand it right 19 to 20 was just--

00:14:52,470 --> 00:14:54,640
- Kind of patches from the upstream.

00:14:54,640 --> 00:14:55,980
- From upstream, because--

00:14:55,980 --> 00:14:57,617
- From the RT devel upstream.

00:14:57,617 --> 00:15:01,560
- Things wouldn't work and you needed, no?

00:15:01,560 --> 00:15:04,060
- Well, yeah, there are certain things that RT defines

00:15:04,060 --> 00:15:05,870
that, oh, we're gonna do slightly different

00:15:05,870 --> 00:15:09,330
or we found something, usually when we back-port patches

00:15:09,330 --> 00:15:11,480
it is something that we either found a bug,

00:15:12,520 --> 00:15:15,210
sometimes it's just latency, like we found a path

00:15:15,210 --> 00:15:18,470
that is non deterministic, so we need to fix that.

00:15:18,470 --> 00:15:21,110
So we fix that and that gets pulled in.

00:15:21,110 --> 00:15:23,290
So it's not really always a bug, but to us it's a bug.

00:15:23,290 --> 00:15:25,090
- So that was moving from 19 to 20?

00:15:25,090 --> 00:15:27,580
- Yeah, going from 19 to 20 I went to, yeah,

00:15:27,580 --> 00:15:28,587
yeah, if you wanna give him that.

00:15:28,587 --> 00:15:31,820
So I went 19 to 20, I was back-porting stuff

00:15:31,820 --> 00:15:35,430
from the RT devel that either was fixes

00:15:35,430 --> 00:15:36,782
they found for mainline that we said,

00:15:36,782 --> 00:15:38,930
okay, these should be back-ported.

00:15:38,930 --> 00:15:41,030
And sometimes new devices are being used

00:15:41,030 --> 00:15:42,290
and we do things like that.

00:15:42,290 --> 00:15:45,240
But then after I released it a bug report came in

00:15:45,240 --> 00:15:46,220
on the new release.

00:15:46,220 --> 00:15:49,380
- See, I think the confusing part here is the base kernel

00:15:49,380 --> 00:15:51,270
remained the same across those three.

00:15:51,270 --> 00:15:52,630
- Right, because the stable hasn't changed.

00:15:52,630 --> 00:15:53,630
- Okay.

00:15:53,630 --> 00:15:55,080
- I haven't pulled from Greg,

00:15:56,020 --> 00:15:56,900
we're still doing Greg's.

00:15:56,900 --> 00:15:59,736
So what Daniel's trying to say is you notice

00:15:59,736 --> 00:16:03,560
that when we go from 31 to 37, up here,

00:16:03,560 --> 00:16:06,290
that just means that I just pulled in from Greg

00:16:06,290 --> 00:16:07,170
and did nothing else.

00:16:07,170 --> 00:16:08,339
- [Man] Right, you just ported

00:16:08,339 --> 00:16:10,643
the RT patches to that stable.

00:16:11,710 --> 00:16:14,028
- I mean, here what confuses me is that seems

00:16:14,028 --> 00:16:16,229
like the same patch on the two.

00:16:16,229 --> 00:16:17,745
- Oh, yeah, the 21-- - So it's like an additional

00:16:17,745 --> 00:16:18,820
patch release from patch. - Is the confusing

00:16:18,820 --> 00:16:19,752
part for me. - Oh, yeah.

00:16:19,752 --> 00:16:22,261
- To fix another patch. - yeah, I should have--

00:16:22,261 --> 00:16:24,360
- Right, okay, but, yeah. - Definitely called it.

00:16:24,360 --> 00:16:27,480
Maybe something else which is interesting on that slide

00:16:28,710 --> 00:16:31,310
which is pointed out, so we have the first

00:16:31,310 --> 00:16:34,880
is the 31 stable release and then we have the next

00:16:34,880 --> 00:16:38,770
is 37 and we have just RT 18 and RT 19.

00:16:38,770 --> 00:16:43,623
So there was no release of the stable tree

00:16:43,623 --> 00:16:48,623
between 31 and 37, because it just merged, right?

00:16:48,950 --> 00:16:52,430
And Greg has a high frequency release rate,

00:16:52,430 --> 00:16:55,560
we can't keep up with him.

00:16:55,560 --> 00:16:57,650
- I try to do it about once a month,

00:16:57,650 --> 00:17:00,330
so that means usually that's a jump like once a month,

00:17:00,330 --> 00:17:02,030
boom, boom, boom, boom.

00:17:02,030 --> 00:17:03,550
I don't know if you mentioned about it before,

00:17:03,550 --> 00:17:06,570
is when sometimes you will see an RT tag

00:17:06,570 --> 00:17:07,793
without a re-base tag.

00:17:08,790 --> 00:17:12,620
And what happened was, so say if I go over a month

00:17:12,620 --> 00:17:16,090
I will pull in as long as it doesn't conflict.

00:17:16,090 --> 00:17:19,210
If I pull in, there's no conflicts and it runs tests

00:17:19,210 --> 00:17:21,660
it will jump from 31 to 37.

00:17:21,660 --> 00:17:26,660
But say if 33 conflicted I would then pull in 33 by itself,

00:17:28,070 --> 00:17:31,410
go RT 18 to RT 19 on the 33 tag,

00:17:31,410 --> 00:17:34,173
make sure to fix all the conflicts and then go on.

00:17:35,480 --> 00:17:36,610
If you see no re-base

00:17:36,610 --> 00:17:38,250
that means there's a conflict at that level.

00:17:38,250 --> 00:17:41,500
I keep it in the change log, you'll see files conflicted.

00:17:41,500 --> 00:17:42,870
And then just in case, 'cause he said,

00:17:42,870 --> 00:17:46,113
we want the RT tags where possibly bugs can happen.

00:17:47,500 --> 00:17:50,520
- Yeah, so we just basically annotate those points

00:17:50,520 --> 00:17:52,210
which are of interest.

00:17:52,210 --> 00:17:54,080
And usually if we have a release

00:17:54,080 --> 00:17:56,460
we have to run some tests on it,

00:17:56,460 --> 00:18:00,120
so we have some confidence that stuff works.

00:18:00,120 --> 00:18:03,140
And as I said, we have just two trees,

00:18:03,140 --> 00:18:06,630
that was I think

00:18:09,490 --> 00:18:11,330
just happened because, I mean,

00:18:11,330 --> 00:18:14,890
we could have everything in one tree probably, I don't know.

00:18:14,890 --> 00:18:18,080
So we have just that's the upstream development tree

00:18:19,220 --> 00:18:22,340
and we have the stable tree and--

00:18:22,340 --> 00:18:24,560
- That right there might be somewhat historical,

00:18:24,560 --> 00:18:26,370
well, we kind of did it separately, it'd probably be easier,

00:18:26,370 --> 00:18:29,150
but I think historical is because the stable tree

00:18:29,150 --> 00:18:32,970
came first because the RT patches were just,

00:18:32,970 --> 00:18:35,810
yeah, it was just call trees, call trees.

00:18:35,810 --> 00:18:39,150
- Yeah, so there's no technical reason to do it this way,

00:18:39,150 --> 00:18:43,230
you can have in the same tree this, doesn't matter.

00:18:43,230 --> 00:18:46,790
And you can see already here we have different maintainers

00:18:46,790 --> 00:18:51,210
working on the different RT stable trees.

00:18:51,210 --> 00:18:54,527
So 14 is Steven, no?

00:18:54,527 --> 00:18:55,853
- [Man] No, no, it's Tom.

00:18:55,853 --> 00:18:56,686
- [Daniel] Tom, yeah.

00:18:56,686 --> 00:18:57,740
- [Man] Like I said, it's been a while,

00:18:57,740 --> 00:18:59,130
'cause is said, I've been fighting a bug

00:18:59,130 --> 00:19:00,917
and I'm way behind in getting the 4.90 now.

00:19:00,917 --> 00:19:02,189
- [Daniel] That's from last week.

00:19:02,189 --> 00:19:04,170
(laughing)

00:19:04,170 --> 00:19:05,680
Right. - Four weeks ago.

00:19:05,680 --> 00:19:10,550
- [Daniel] Yeah and here is just, as I said,

00:19:10,550 --> 00:19:15,200
the main branch just is always a merge, you see?

00:19:15,200 --> 00:19:19,100
In this example you see development tree,

00:19:19,100 --> 00:19:24,100
so we have the 5.2.10 stable release merged

00:19:24,490 --> 00:19:28,510
and then some bug fixes on top of it

00:19:28,510 --> 00:19:30,173
that realtime still works.

00:19:31,260 --> 00:19:34,320
This is what Sebastian is doing there,

00:19:34,320 --> 00:19:37,303
he pulled that additional bug fixes in that release.

00:19:38,700 --> 00:19:42,180
If you look at the re-base tree you just see

00:19:42,180 --> 00:19:47,180
this serialized view on top of the 5.2.10 release.

00:19:50,076 --> 00:19:53,023
And this worked out pretty well so far.

00:19:55,580 --> 00:19:56,863
Yes, please, over there.

00:20:02,100 --> 00:20:03,337
- Hi there, I had a question on the series

00:20:03,337 --> 00:20:05,620
following the RT devel tree.

00:20:05,620 --> 00:20:10,120
Now, I was wondering how often is that up to date,

00:20:10,120 --> 00:20:11,900
if I look at the series file and I look

00:20:11,900 --> 00:20:15,306
at like some of the prerequisites,

00:20:15,306 --> 00:20:19,187
I mean, will that get updated when some of the prerequisites

00:20:19,187 --> 00:20:21,590
got pulled into the tip tree or?

00:20:26,810 --> 00:20:28,040
- The series file, you mean?

00:20:28,040 --> 00:20:30,240
- The series file for the quilt,

00:20:30,240 --> 00:20:32,550
for the RT devel, there's a tarball--

00:20:32,550 --> 00:20:34,000
- Actually, you wanna talk to the person

00:20:34,000 --> 00:20:35,301
that's to your left over there.

00:20:35,301 --> 00:20:37,070
(laughing)

00:20:37,070 --> 00:20:38,660
- Throw him the mic, he could probably answer you.

00:20:38,660 --> 00:20:40,060
- All right, that's okay.

00:20:43,361 --> 00:20:46,188
- I would restore it once in a while and keep it updated.

00:20:46,188 --> 00:20:48,860
And usually I keep at the top of those files

00:20:48,860 --> 00:20:51,260
that should vanish in the next release

00:20:51,260 --> 00:20:53,060
and that's how it's organized.

00:20:53,060 --> 00:20:55,380
Usually I try to summarize by topics

00:20:55,380 --> 00:20:57,130
when those and those are more or less

00:20:57,130 --> 00:20:59,603
the same area that gets touched.

00:21:01,607 --> 00:21:03,340
- [Man] So if I understand that correctly basically

00:21:03,340 --> 00:21:05,593
they disappear when they're merged upstream.

00:21:07,090 --> 00:21:08,233
- [Man] That's correct.

00:21:12,530 --> 00:21:15,250
- [Man] Upstream meaning Linus's tree.

00:21:15,250 --> 00:21:17,594
If it was ambiguous or not.

00:21:17,594 --> 00:21:18,677
- Okay, yeah.

00:21:22,160 --> 00:21:26,030
So basically the interesting part is what of those works

00:21:26,030 --> 00:21:30,340
or the steps I just explained can be automated

00:21:30,340 --> 00:21:34,860
and it turns out that working on the patch set itself

00:21:35,790 --> 00:21:36,860
is what you know.

00:21:36,860 --> 00:21:41,860
It's quilt, git, $EDITOR and lots of brain power.

00:21:45,130 --> 00:21:47,700
I think there's nothing really different

00:21:47,700 --> 00:21:50,283
to any development process.

00:21:52,330 --> 00:21:55,480
I think where we have some additional value now

00:21:55,480 --> 00:22:00,480
is how we do the whole tagging, re-basing and everything,

00:22:01,720 --> 00:22:04,300
we have a tool basically nowadays

00:22:04,300 --> 00:22:08,150
which is based on Steven's earliest version

00:22:08,150 --> 00:22:11,380
or first version on how to do it.

00:22:11,380 --> 00:22:15,280
It consisted back then with I think like 10 scrips

00:22:15,280 --> 00:22:18,090
and many steps.

00:22:18,090 --> 00:22:20,420
- [Man] I still have the webpage.

00:22:20,420 --> 00:22:24,410
- Yeah, yeah, it's a very good work,

00:22:24,410 --> 00:22:26,570
because you have to figure out all those steps,

00:22:26,570 --> 00:22:28,240
how you want to do it,

00:22:28,240 --> 00:22:31,010
where you encode which information and everything.

00:22:31,010 --> 00:22:34,460
And this was the starting point for the tool

00:22:34,460 --> 00:22:35,460
I mentioned here,

00:22:37,890 --> 00:22:40,540
now I'm just showing you how that tool works,

00:22:40,540 --> 00:22:45,540
because we think it might be useful outside out work,

00:22:45,710 --> 00:22:48,063
so let's go into that part.

00:22:49,559 --> 00:22:53,240
So the first step from release is basically

00:22:53,240 --> 00:22:56,543
just get Greg's update.

00:22:58,520 --> 00:23:01,410
In fact, the git workflow, I'm showing the git workflow

00:23:01,410 --> 00:23:04,540
probably you could do differently, but that's how it works.

00:23:04,540 --> 00:23:07,380
You see, we got the 190 release

00:23:08,580 --> 00:23:13,000
and then we can just look at what we've done in the past.

00:23:13,000 --> 00:23:17,700
So we see, okay, we have the last release was 189 release

00:23:19,370 --> 00:23:23,253
and now we have the new one, so let's work on that one.

00:23:25,090 --> 00:23:27,520
And basically I'm in the main branch,

00:23:27,520 --> 00:23:32,520
that means the one which is merging, the 4.4-rt branch.

00:23:37,000 --> 00:23:39,000
Usually just try to merge it

00:23:39,000 --> 00:23:41,920
and if you're lucky it works out.

00:23:41,920 --> 00:23:44,643
So that means you have no conflict and you're happy.

00:23:48,360 --> 00:23:52,570
If Greg has like released already 191, for example,

00:23:52,570 --> 00:23:56,180
we just go for 191 and see if it works

00:23:56,180 --> 00:23:59,173
and I just skip over 190.

00:24:02,420 --> 00:24:05,450
In the conflict case,

00:24:05,450 --> 00:24:08,390
yeah, that's where you need a lot of brain power usually,

00:24:08,390 --> 00:24:11,430
because you have to figure out why is it conflicting,

00:24:11,430 --> 00:24:14,130
where is it coming from, what is the impact,

00:24:14,130 --> 00:24:18,130
you have to check what has changed

00:24:18,130 --> 00:24:19,630
in the different parts of the kernel

00:24:19,630 --> 00:24:23,910
that would conflict that and sometimes it's just trivial.

00:24:23,910 --> 00:24:27,943
But sometimes, especially, yeah, sometimes,

00:24:28,945 --> 00:24:33,945
we had, for example, the problem that some of the RT code

00:24:34,070 --> 00:24:36,520
went in the different version upstream

00:24:36,520 --> 00:24:39,490
and came back-ported over the stable tree.

00:24:39,490 --> 00:24:43,220
That was the RT mu tag stuff priority in version.

00:24:43,220 --> 00:24:46,510
It was like, ugh and that where I said,

00:24:46,510 --> 00:24:47,980
this is where it's getting really hard

00:24:47,980 --> 00:24:51,280
and then the good thing is now since we are maintaining

00:24:51,280 --> 00:24:53,000
four different people, the trees,

00:24:53,000 --> 00:24:55,510
we can look at each other's solution

00:24:55,510 --> 00:24:59,023
and see how did I solve that and why.

00:24:59,940 --> 00:25:02,873
So you always hope that someone is faster than you.

00:25:02,873 --> 00:25:05,460
(laughing)

00:25:05,460 --> 00:25:06,568
- [Man] Why do you think I wait so long?

00:25:06,568 --> 00:25:07,750
(laughing)

00:25:07,750 --> 00:25:09,910
- So in the case when that happens,

00:25:09,910 --> 00:25:11,690
what do you, guys, default to?

00:25:11,690 --> 00:25:13,270
Do you default to what the upstream did

00:25:13,270 --> 00:25:15,783
or do you default to your old stuff or a merge?

00:25:17,410 --> 00:25:19,320
- [Man] Actually, sometimes I just default to the upstream.

00:25:19,320 --> 00:25:20,743
I try to get then closer to upstream

00:25:20,743 --> 00:25:24,220
depending on how if it was specific,

00:25:24,220 --> 00:25:25,860
like the RT mu mu text one.

00:25:25,860 --> 00:25:27,163
I basically said, screw it, I'm taking the RT,

00:25:27,163 --> 00:25:29,130
because it's kind of contained.

00:25:29,130 --> 00:25:30,030
- [Man] Okay.

00:25:30,030 --> 00:25:31,540
- [Man] But if it's one of these things,

00:25:31,540 --> 00:25:33,020
like the work queues right now,

00:25:33,020 --> 00:25:35,320
which is what I'm fighting with,

00:25:35,320 --> 00:25:37,803
we had a whole separate thing of work queues,

00:25:39,300 --> 00:25:42,173
Sebastian changed everything in devel,

00:25:43,130 --> 00:25:46,100
stuff got up in upstream 'cause he found bugs in upstream,

00:25:46,100 --> 00:25:49,120
fixed it, that came back now and now I had these bugs

00:25:49,120 --> 00:25:51,400
that I can't fix, because I don't have the new code.

00:25:51,400 --> 00:25:52,820
And that's almost a complete rewrite

00:25:52,820 --> 00:25:54,419
of all the work queue code.

00:25:54,419 --> 00:25:55,750
(laughing)

00:25:55,750 --> 00:25:57,640
- [Man] All right, that's good, okay, I was just curious.

00:25:57,640 --> 00:25:59,110
- Yeah, I guess it depends

00:25:59,110 --> 00:26:04,110
on how current the stable tree is.

00:26:04,670 --> 00:26:09,030
In my case the 4.4 tree I don't change that much anymore,

00:26:09,030 --> 00:26:13,035
just keep it going and I hope it dies eventually.

00:26:13,035 --> 00:26:15,285
(laughing)

00:26:19,110 --> 00:26:19,943
Okay.

00:26:21,592 --> 00:26:24,260
Yeah, there are users out there, they're brave,

00:26:24,260 --> 00:26:25,493
they're very brave.

00:26:26,370 --> 00:26:28,620
(laughing)

00:26:31,020 --> 00:26:36,020
After the merge has worked for the merge branch, basically,

00:26:36,610 --> 00:26:41,110
I'm going to the re-base tree and just do re-base.

00:26:41,110 --> 00:26:46,110
If there was no merge conflict previous on the normal branch

00:26:47,070 --> 00:26:49,230
it will just work here the same way.

00:26:49,230 --> 00:26:52,300
Just it gets re-based, everything looks good.

00:26:52,300 --> 00:26:53,800
If you have the merge conflict

00:26:53,800 --> 00:26:56,680
you just have to fix that patch,

00:26:56,680 --> 00:27:00,240
so first you fix it in the merge tree

00:27:00,240 --> 00:27:04,590
and then in the re-base tree you have to do the same thing

00:27:04,590 --> 00:27:05,423
on the patch itself.

00:27:05,423 --> 00:27:08,763
- You can use the git-rerere in this case.

00:27:10,060 --> 00:27:14,050
So if you fix the conflict while doing the merge

00:27:14,050 --> 00:27:17,320
that will basically record your fix

00:27:17,320 --> 00:27:19,170
and apply that automatically here,

00:27:19,170 --> 00:27:20,917
so you don't have to do it.

00:27:20,917 --> 00:27:21,750
- [Daniel] Okay.

00:27:21,750 --> 00:27:23,730
- Okay, well here's the issue with this,

00:27:23,730 --> 00:27:27,750
it's the fact that the re-base is a series of patches.

00:27:27,750 --> 00:27:31,400
And sometimes you'll have a break in one file

00:27:31,400 --> 00:27:33,250
that affects three different patches.

00:27:34,830 --> 00:27:39,830
You can't really use, so on the merge side it's one fix,

00:27:40,265 --> 00:27:42,895
you don't care, you just fix everything, done.

00:27:42,895 --> 00:27:45,910
Now, when you do the patches, there's three patches,

00:27:45,910 --> 00:27:49,129
you gotta fix partial, partial, partial.

00:27:49,129 --> 00:27:53,040
(background noise drowns out speaker)

00:27:53,040 --> 00:27:56,653
That happens a lot and that's where it's like, ugh.

00:27:57,863 --> 00:28:00,800
- I mean, it doesn't apply that automatically,

00:28:00,800 --> 00:28:03,540
so I guess in simple cases it might help

00:28:03,540 --> 00:28:05,100
and if it doesn't, I mean,

00:28:05,100 --> 00:28:06,850
in different cases it just reverts.

00:28:10,470 --> 00:28:12,219
- Well, the thing is you don't have

00:28:12,219 --> 00:28:15,140
a sort of a special case, a lot of times we do see

00:28:15,140 --> 00:28:20,053
the simple case because we're maintaining a Franken-kernel,

00:28:20,950 --> 00:28:23,850
Rail RT and so we've got stuff coming in

00:28:23,850 --> 00:28:26,480
from two other different directions.

00:28:26,480 --> 00:28:29,800
And so git-rerere works a little bit better for us,

00:28:29,800 --> 00:28:31,600
because we don't have the big span

00:28:31,600 --> 00:28:33,100
that you, guys, will run into.

00:28:35,090 --> 00:28:36,460
- So what I usually do is I have

00:28:36,460 --> 00:28:38,384
when I hit that conflict on the re-base side I just say,

00:28:38,384 --> 00:28:41,420
okay, do a diff of this and just do,

00:28:41,420 --> 00:28:44,653
I'll just cherry pick the fixes,

00:28:46,100 --> 00:28:47,840
I read the patch that was changed,

00:28:47,840 --> 00:28:50,410
okay, why is this changed and I'll cherry pick what I need.

00:28:50,410 --> 00:28:52,030
That usually works, but then there are sometimes

00:28:52,030 --> 00:28:55,203
where it's the same line, you gotta do it in stages.

00:28:56,250 --> 00:28:57,083
- Yeah.

00:28:58,980 --> 00:29:02,000
What I do is usually that thing that I verify

00:29:02,000 --> 00:29:05,160
that my changes in both branches are identical.

00:29:05,160 --> 00:29:07,060
If you don't do that, obviously, yeah.

00:29:08,600 --> 00:29:11,750
So this is very simple, then everything is happening.

00:29:11,750 --> 00:29:14,230
So this is the whole part where I said

00:29:14,230 --> 00:29:18,040
you can't basically automate it more than this,

00:29:18,040 --> 00:29:22,283
this is the tooling that everyone knows so far.

00:29:24,127 --> 00:29:27,830
What you should do then before doing a release is testing

00:29:27,830 --> 00:29:29,257
and there is (laughs),

00:29:31,837 --> 00:29:32,670
And compile ship it.

00:29:32,670 --> 00:29:34,273
- [Man] What do you mean?

00:29:35,300 --> 00:29:37,700
Compile and ship it.

00:29:37,700 --> 00:29:38,703
- It works, yeah.

00:29:42,550 --> 00:29:46,440
We don't have yet some sort of central service

00:29:46,440 --> 00:29:49,940
which works for everyone to test the kernels,

00:29:49,940 --> 00:29:54,940
so we have the working or the setup at Linutronix

00:29:55,550 --> 00:29:56,670
for stable work.

00:29:56,670 --> 00:29:58,970
I think Sebastian is using it that whole time.

00:29:58,970 --> 00:30:02,313
For me, it's not working right now, I don't know why.

00:30:03,310 --> 00:30:06,150
So I have my own setup currently doing this,

00:30:06,150 --> 00:30:08,790
but it's not as good as it should be.

00:30:08,790 --> 00:30:11,863
Basically I just have a script creating,

00:30:12,860 --> 00:30:15,750
building a few binaries, kernels

00:30:15,750 --> 00:30:19,300
and deploying on my test machines

00:30:19,300 --> 00:30:23,950
and I'm using currently LAVA to get the back reports.

00:30:23,950 --> 00:30:27,680
I mean, this is, yeah, you can do it in different ways

00:30:27,680 --> 00:30:30,660
and eventually we probably find out

00:30:30,660 --> 00:30:32,913
to use common infrastructure.

00:30:34,490 --> 00:30:37,870
This for me works pretty well, but as I said,

00:30:37,870 --> 00:30:39,883
this is kind of off topic.

00:30:40,816 --> 00:30:44,075
- Let me ask which kind of tests are you running,

00:30:44,075 --> 00:30:45,890
what are you running?

00:30:45,890 --> 00:30:50,780
- What I've started to do is I'm using the RT test suite

00:30:50,780 --> 00:30:53,432
and I have started to send patches

00:30:53,432 --> 00:30:58,432
to make it more consistent, for example, in the--

00:30:58,810 --> 00:31:00,260
- [Man] And thank you so much for that.

00:31:00,260 --> 00:31:01,850
- Yeah, more to come.

00:31:01,850 --> 00:31:03,290
- [Man] Yeah, we do appreciate it.

00:31:03,290 --> 00:31:04,190
- Okay, thank you.

00:31:06,342 --> 00:31:11,342
So what I'm doing is LAVA or Linaro better to say

00:31:11,470 --> 00:31:16,470
has a test suite which is called test definition, I think.

00:31:17,100 --> 00:31:21,690
And there there are the tests are kind of bundles together

00:31:21,690 --> 00:31:26,270
and the LAVA framework basically executes those tests.

00:31:26,270 --> 00:31:28,565
And what I've been doing I've just integrated

00:31:28,565 --> 00:31:31,683
all the different RT tests tools.

00:31:33,900 --> 00:31:35,790
This is what you see here, basically.

00:31:35,790 --> 00:31:39,070
So the smoke tests are the different configurations

00:31:39,070 --> 00:31:42,630
for the preemption, so preemption off,

00:31:42,630 --> 00:31:45,520
preemption on and so on, these are the one

00:31:45,520 --> 00:31:48,353
and those with the tag preempt RT,

00:31:48,353 --> 00:31:50,763
it's one of those RT tests.

00:31:52,160 --> 00:31:56,140
Running like, I don't know, cyclic test order or PI stress.

00:31:56,140 --> 00:31:59,410
- Do you run any non RT specific tests,

00:31:59,410 --> 00:32:03,357
like, you know, do you do a net perf or LTP?

00:32:03,357 --> 00:32:06,960
- No, not so far, that's what I'm saying, I mean,

00:32:06,960 --> 00:32:08,382
this takes a lot of time-- - Sure.

00:32:08,382 --> 00:32:10,630
- Setting up and maintaining it.

00:32:10,630 --> 00:32:12,310
- I mean, that's one of our concerns

00:32:12,310 --> 00:32:15,610
is once we've got ourselves an RT kernel

00:32:15,610 --> 00:32:17,990
making sure that everything that ran

00:32:17,990 --> 00:32:20,640
on a non RT kernel like Rail

00:32:21,980 --> 00:32:25,483
behaves the same way functionally on our RT kernel.

00:32:25,483 --> 00:32:29,160
- This is why I try to get at least the test suite

00:32:29,160 --> 00:32:31,850
or test definition from Linaro,

00:32:31,850 --> 00:32:34,340
integrated those tests we have already,

00:32:34,340 --> 00:32:36,950
that it's simpler to use it.

00:32:36,950 --> 00:32:39,640
- [Man] I just rely on users.

00:32:39,640 --> 00:32:40,480
- [Man] Yeah.

00:32:40,480 --> 00:32:41,777
- [Man] So I release something, like I said,

00:32:41,777 --> 00:32:43,580
when I release I release down,

00:32:43,580 --> 00:32:45,510
someone used it and said, oh, this doesn't work anymore.

00:32:45,510 --> 00:32:47,120
- [Man] This didn't work, yeah.

00:32:47,120 --> 00:32:49,050
- Could be an idea to try to rely

00:32:49,050 --> 00:32:52,600
on like the zero day testing or any other automation?

00:32:52,600 --> 00:32:55,410
I mean, just to run not the RT set of things,

00:32:55,410 --> 00:32:58,950
but just to verify that, I mean,

00:32:58,950 --> 00:33:01,510
a newer base or a never version of the RT,

00:33:01,510 --> 00:33:03,585
but working on normal system doesn't

00:33:03,585 --> 00:33:05,653
(background drowns out speaker), not sure.

00:33:09,200 --> 00:33:12,140
- Hi, yeah, I talk to zero day about that,

00:33:12,140 --> 00:33:13,900
because that was one of my interests as well.

00:33:13,900 --> 00:33:15,340
One of the challenges with zero day

00:33:15,340 --> 00:33:17,258
is they have about 90 test suites.

00:33:17,258 --> 00:33:19,640
And each test suite has a lot of tests on it

00:33:19,640 --> 00:33:20,840
and I found the cyclic test

00:33:20,840 --> 00:33:24,530
and it was actually out of date and some of the tests are.

00:33:24,530 --> 00:33:26,360
I'm definitely getting them ramped up

00:33:26,360 --> 00:33:29,090
to actually start doing the RT test once it hits mainline,

00:33:29,090 --> 00:33:31,310
there's a mainline configuration.

00:33:31,310 --> 00:33:36,100
They're not really setup to run the RT stable branches,

00:33:36,100 --> 00:33:37,410
but once it does go mainline.

00:33:37,410 --> 00:33:39,440
I also talked to Osodle, because at one point

00:33:39,440 --> 00:33:42,340
we had talked to Osodle about maybe doing some CI work,

00:33:42,340 --> 00:33:44,029
but one of their test engineers left

00:33:44,029 --> 00:33:46,130
and another test engineer came in.

00:33:46,130 --> 00:33:49,970
They're still kind of more focused on safety Linux

00:33:49,970 --> 00:33:53,783
and long-term analysis and statistic justification

00:33:53,783 --> 00:33:55,480
for safety Linux.

00:33:55,480 --> 00:33:56,940
I don't really think they have the bandwidth

00:33:56,940 --> 00:33:58,280
to do that either.

00:33:58,280 --> 00:34:00,380
So I was gonna work with zero day on that.

00:34:05,597 --> 00:34:07,267
- How about kernel CI,

00:34:07,267 --> 00:34:11,290
can't you get your RT tree monitored by kernel CI?

00:34:11,290 --> 00:34:14,170
- Yeah, I mean this is, what I said,

00:34:14,170 --> 00:34:18,270
this would be having this kind of central infrastructure

00:34:18,270 --> 00:34:21,890
someone maintains it would be nice to use it, yes.

00:34:21,890 --> 00:34:25,237
I mean, for debugging or stuff like that

00:34:25,237 --> 00:34:28,190
it's good to have like an onsite environment

00:34:28,190 --> 00:34:29,730
where you can do stuff.

00:34:29,730 --> 00:34:33,280
And I'm using that for, basically,

00:34:33,280 --> 00:34:35,360
like just confident, I say, okay,

00:34:35,360 --> 00:34:37,181
I didn't screw it up too much

00:34:37,181 --> 00:34:41,579
and then you ship it basically and see if you get feedback.

00:34:41,579 --> 00:34:45,097
It would be better, obviously, if we could also have this--

00:34:46,600 --> 00:34:49,640
- Many kernel CI labs are relying on LAVA as well,

00:34:49,640 --> 00:34:53,923
so I mean your lab could be integrated with kernel CI

00:34:53,923 --> 00:34:56,640
and kernel CI could just monitor the RT tree

00:34:56,640 --> 00:34:59,070
and you did the way you want, I guess.

00:34:59,070 --> 00:35:04,070
- Yeah, so I have access to the CIP LAVA setup as well

00:35:04,430 --> 00:35:07,840
where it can run on the specific hardware some tests.

00:35:07,840 --> 00:35:11,250
And obviously one thing I'm already hitting here

00:35:11,250 --> 00:35:14,750
is what is kind of different to the normal LAVA

00:35:14,750 --> 00:35:18,740
or the test suites is they should run for a long time.

00:35:18,740 --> 00:35:23,640
And this is where we kind of changed the test environment

00:35:23,640 --> 00:35:26,100
for everything, because we want to run it

00:35:26,100 --> 00:35:30,560
like 24 hours with loads and yeah.

00:35:30,560 --> 00:35:35,560
- Yeah, I was more thinking about the problem that I raised

00:35:35,720 --> 00:35:38,280
that the things that are running on the regular kernel

00:35:38,280 --> 00:35:39,830
should run on the RT kernel.

00:35:39,830 --> 00:35:40,663
- [Daniel] Yeah, yeah.

00:35:40,663 --> 00:35:42,373
- And that would be nice to have the kernel CI.

00:35:42,373 --> 00:35:43,690
- [Daniel] Aha, okay, I see.

00:35:43,690 --> 00:35:45,310
- [Man] I think what they're trying to say

00:35:45,310 --> 00:35:47,370
is basically we do our own RT stuff,

00:35:47,370 --> 00:35:51,803
but for normal stuff we probably could use theirs.

00:35:51,803 --> 00:35:53,657
So make it work like upstream does.

00:35:53,657 --> 00:35:54,490
- Yeah.

00:35:54,490 --> 00:35:55,323
- [Man] Make sure that's still there.

00:35:55,323 --> 00:35:56,156
- [Man] Just boot up on RT kernel

00:35:56,156 --> 00:35:58,323
and then the regular test.

00:36:01,670 --> 00:36:05,560
- Yeah, I think, as I said, this is kind of off topic,

00:36:05,560 --> 00:36:07,333
because I think we just have to figure out

00:36:07,333 --> 00:36:11,110
how we want to do it in the long-term with mainline.

00:36:11,110 --> 00:36:12,600
- [Man] Yeah and the question comes down

00:36:12,600 --> 00:36:17,600
to is when RT comes mainline, where's the status of it?

00:36:17,750 --> 00:36:19,970
Right now I think we're deciding to say,

00:36:19,970 --> 00:36:22,720
well, keep the long-term stable still going,

00:36:22,720 --> 00:36:24,170
but eventually they will be faded out,

00:36:24,170 --> 00:36:27,772
because the real times, the Gregs will be maintaining it.

00:36:27,772 --> 00:36:30,425
(laughing)

00:36:30,425 --> 00:36:34,342
(laughter drowns out speaker).

00:36:35,250 --> 00:36:36,404
- [Man] Wow, throwing me under the bus

00:36:36,404 --> 00:36:37,551
in front of everybody.

00:36:37,551 --> 00:36:38,863
- [Man] Welcome to the team.

00:36:38,863 --> 00:36:41,113
(laughing)

00:36:43,418 --> 00:36:45,963
- Yeah, we love you, Greg.

00:36:48,570 --> 00:36:53,070
Anyway, this is a lot of discuss which should happen

00:36:53,070 --> 00:36:56,633
in the next coming days, weeks, months.

00:36:58,530 --> 00:37:03,370
So now coming back, basically, after the test run

00:37:03,370 --> 00:37:05,300
you're confident, now you do the release.

00:37:05,300 --> 00:37:09,150
And as I said, we have based on Steven's work

00:37:09,150 --> 00:37:14,150
we have this small tool which makes it really simple to use.

00:37:14,537 --> 00:37:19,373
So first you say, okay, I want to commit what I have done,

00:37:20,250 --> 00:37:25,210
it's nothing else than gits commit with encode,

00:37:25,210 --> 00:37:27,370
basically, just with the right name and everything,

00:37:27,370 --> 00:37:31,100
so every release is consistent in the naming scheme

00:37:31,100 --> 00:37:33,180
and what's written in there.

00:37:33,180 --> 00:37:35,530
And so it will just say,

00:37:35,530 --> 00:37:37,940
okay, this is Linux version blah, blah, blah.

00:37:37,940 --> 00:37:39,143
Then you tag it.

00:37:40,330 --> 00:37:44,320
- [Man] Does your tool update the local--

00:37:44,320 --> 00:37:45,153
- Yes, yes.

00:37:45,153 --> 00:37:46,980
- [Man] Yours updates, mine, I do that manually.

00:37:46,980 --> 00:37:49,590
- So this does everything what you're doing.

00:37:49,590 --> 00:37:51,100
- [Man] Okay.

00:37:51,100 --> 00:37:52,620
- In one step.

00:37:52,620 --> 00:37:53,453
(laughing)

00:37:53,453 --> 00:37:54,286
- [Man] I should be using it.

00:37:54,286 --> 00:37:55,750
- Yeah, you should use it.

00:37:55,750 --> 00:37:57,250
- [Man] Once you get to be my age you can't do

00:37:57,250 --> 00:37:59,696
anything manually, because you'll eventually forget.

00:37:59,696 --> 00:38:01,600
- Yeah, I know, I've done that.

00:38:01,600 --> 00:38:05,430
- Yeah, so this does in the background a few things

00:38:05,430 --> 00:38:08,040
which just gives you the same type

00:38:08,040 --> 00:38:10,280
or the same RT release.

00:38:10,280 --> 00:38:12,510
And then you do the tag which is, as I said,

00:38:12,510 --> 00:38:15,720
there's some naming convention in there,

00:38:15,720 --> 00:38:17,020
so it makes it consistent.

00:38:18,500 --> 00:38:23,500
So after that you do the same thing for the re-base tree

00:38:24,046 --> 00:38:26,580
and the thing which is changing it just says,

00:38:26,580 --> 00:38:30,363
okay, this is a re-base release and this is the re-base tag.

00:38:31,920 --> 00:38:34,423
- [Man] I guess you're missing quotes,

00:38:34,423 --> 00:38:38,410
otherwise you're passing re-base as a parameter to get--

00:38:38,410 --> 00:38:39,660
- No, it's down the ramp.

00:38:40,570 --> 00:38:42,880
- [Man] What, oh, on the bottom part, well, it says tagging,

00:38:42,880 --> 00:38:43,779
but I'm saying on the first it says git commit.

00:38:43,779 --> 00:38:48,779
- Yeah, yeah, we can fix that, it's easy to fix.

00:38:52,780 --> 00:38:56,230
And then this is kind of not so cool yet

00:38:56,230 --> 00:39:00,010
is that we have currently I just provided the two versions,

00:39:00,010 --> 00:39:02,510
the old version and the new version of the tag,

00:39:02,510 --> 00:39:03,343
this could be changed.

00:39:03,343 --> 00:39:05,160
- [Man] My script automates that.

00:39:05,160 --> 00:39:09,320
- Yeah, the thing is why I didn't do that is one version

00:39:10,590 --> 00:39:14,450
I had several intermediate releases

00:39:14,450 --> 00:39:16,160
and I couldn't figure out which one.

00:39:16,160 --> 00:39:18,370
But now we changed the way how we release it,

00:39:18,370 --> 00:39:23,370
so we never release or we'd merge always everything

00:39:24,257 --> 00:39:26,090
to the release and done with it.

00:39:26,090 --> 00:39:29,150
So that could be automated, so figuring out which version.

00:39:29,150 --> 00:39:31,330
So what that thing does, basically,

00:39:31,330 --> 00:39:36,330
is creating the quilt series or patch series.

00:39:36,820 --> 00:39:39,110
It's just taking base, what's re-base

00:39:39,110 --> 00:39:41,780
and writing the series file.

00:39:41,780 --> 00:39:43,720
As I said, everything, every other step

00:39:43,720 --> 00:39:46,940
is all very simple to make it manually,

00:39:46,940 --> 00:39:51,623
but do it consistent, fast you will screw it up.

00:39:52,670 --> 00:39:54,850
So that's why we just have this small tool.

00:39:54,850 --> 00:39:59,690
And then singing it, as I said, it's very simple,

00:39:59,690 --> 00:40:02,143
but you will screw it up if you do it manually.

00:40:03,270 --> 00:40:07,980
And this is where we differ to the two trees

00:40:07,980 --> 00:40:11,960
and the stable tree upload the patches to a kernel

00:40:14,160 --> 00:40:19,160
file dump area and this is using the kernel.org way

00:40:21,960 --> 00:40:23,587
to upload stuff with kup.

00:40:25,200 --> 00:40:26,447
This is something just specific

00:40:26,447 --> 00:40:28,453
for the infrastructure we're using.

00:40:30,940 --> 00:40:33,100
I mean, you could just do it differently here

00:40:33,100 --> 00:40:36,683
and having a different location to upload the patches.

00:40:39,220 --> 00:40:42,465
Then the next step is to push it.

00:40:42,465 --> 00:40:45,270
Again, you just could use git push

00:40:45,270 --> 00:40:48,360
and be sure you push the right tags

00:40:48,360 --> 00:40:52,110
and this command just makes sure you just push that stuff,

00:40:52,110 --> 00:40:53,420
you're saying you want to push,

00:40:53,420 --> 00:40:55,210
not additional tags and so on,

00:40:55,210 --> 00:40:57,003
so it don't clutter the whole tree.

00:41:00,510 --> 00:41:03,653
You're done, you're saying, okay, this is the release.

00:41:04,720 --> 00:41:07,210
It creates the template thing

00:41:07,210 --> 00:41:10,763
and message we can just send out and Greg has a question.

00:41:15,000 --> 00:41:17,593
- So kernel.org can create the patches

00:41:17,593 --> 00:41:20,080
and everything off of tag now.

00:41:20,080 --> 00:41:20,913
- [Daniel] Okay.

00:41:20,913 --> 00:41:23,330
- So I don't use kup anymore.

00:41:23,330 --> 00:41:24,460
- [Man] Oh, that's right.

00:41:24,460 --> 00:41:26,909
- So we can do, there's a tool Constantine has

00:41:26,909 --> 00:41:29,635
that you sign and push a git note

00:41:29,635 --> 00:41:32,580
and it checks out the tree, does everything

00:41:32,580 --> 00:41:33,450
and it goes off.

00:41:33,450 --> 00:41:34,283
- [Daniel] Okay, yeah.

00:41:34,283 --> 00:41:35,132
- So it just saves you a bunch of steps

00:41:35,132 --> 00:41:37,050
and especially when you're traveling

00:41:37,050 --> 00:41:41,010
sometimes kup patch files aren't that big, but it's a pain.

00:41:41,010 --> 00:41:43,050
I just has to push one note and it goes.

00:41:43,050 --> 00:41:44,533
- Okay. - So wait, wait.

00:41:46,457 --> 00:41:48,654
So it makes the tarball, you mean?

00:41:48,654 --> 00:41:49,689
I know the tarball.

00:41:49,689 --> 00:41:51,829
- [Greg] tarball and the patches

00:41:51,829 --> 00:41:53,936
and you know, you have the patch file,

00:41:53,936 --> 00:41:55,580
the thing you were doing the kup for.

00:41:55,580 --> 00:41:56,413
- Yeah.

00:41:56,413 --> 00:41:57,750
- [Greg] It does that too.

00:41:57,750 --> 00:41:58,916
- So I have to take a look at that,

00:41:58,916 --> 00:42:01,038
because I have to see does it know

00:42:01,038 --> 00:42:02,700
just between the two releases

00:42:02,700 --> 00:42:04,350
that it makes a patch difference?

00:42:06,060 --> 00:42:07,400
- [Greg] You might have to work with Constantine,

00:42:07,400 --> 00:42:08,650
but there's no reason you, guys,

00:42:08,650 --> 00:42:09,483
shouldn't also have the same thing.

00:42:09,483 --> 00:42:11,640
- Yeah, 'cause the re-base thing is it shows,

00:42:11,640 --> 00:42:12,890
it makes every single patch like a patch queue.

00:42:12,890 --> 00:42:13,723
- [Greg] Yeah, no, not that part,

00:42:13,723 --> 00:42:15,810
it's just creating it on kernel.org.

00:42:15,810 --> 00:42:16,643
- Okay. - Yeah.

00:42:16,643 --> 00:42:18,220
- [Daniel] Yeah, so.

00:42:18,220 --> 00:42:19,230
- Kyle, he's here, right?

00:42:19,230 --> 00:42:21,250
- Yeah. - Yeah, okay.

00:42:21,250 --> 00:42:22,320
- [Greg] That just saves you, I mean,

00:42:22,320 --> 00:42:24,770
I've switched and it made my life so much easier.

00:42:27,960 --> 00:42:31,460
- Okay, yeah, so in the end it's these steps

00:42:31,460 --> 00:42:33,560
and then we're doing right now, as I said,

00:42:33,560 --> 00:42:36,520
we do the merge, we do the re-base stuff,

00:42:36,520 --> 00:42:40,280
then testing and these steps.

00:42:40,280 --> 00:42:43,133
And that's really, I mean, if there's no merge conflict

00:42:43,133 --> 00:42:46,363
you can do that without the testing in five minutes,

00:42:47,740 --> 00:42:48,883
which is nice.

00:42:52,230 --> 00:42:54,690
- [Man] Wait, what does SRT stand for?

00:42:54,690 --> 00:42:58,360
- Stable release tool, stupid name.

00:42:58,360 --> 00:43:00,833
- [Man] Did you put a URL up there for everybody?

00:43:00,833 --> 00:43:03,939
- [Man] I thought it was Steven Rostedt's tools.

00:43:03,939 --> 00:43:06,859
(audience laughing)

00:43:06,859 --> 00:43:07,850
- [Man] As far as you know,

00:43:07,850 --> 00:43:08,900
Steven, (laughing drowns out speaker).

00:43:10,930 --> 00:43:14,750
(audience applauding)

00:43:14,750 --> 00:43:15,583
- Well done.

00:43:19,560 --> 00:43:23,430
Another quick info here before ending,

00:43:23,430 --> 00:43:25,490
because we're running out of time.

00:43:25,490 --> 00:43:29,200
If you want to do a release candidate you do the same thing,

00:43:29,200 --> 00:43:33,440
you change the tree as you want and then testing

00:43:33,440 --> 00:43:37,470
and the diff is basically just during the commit phase

00:43:37,470 --> 00:43:40,830
you say which release candidate version it is.

00:43:40,830 --> 00:43:42,730
And that's it, it does the same thing.

00:43:45,068 --> 00:43:47,917
So the same steps, everything, nice, right?

00:43:49,170 --> 00:43:51,180
So this talk was for Steven

00:43:51,180 --> 00:43:53,123
to motivate him to use this tool.

00:43:54,945 --> 00:43:56,550
- [Steven] Well, that's why you should've called it my name.

00:43:56,550 --> 00:43:58,960
No, so where's the git repository for it,

00:43:58,960 --> 00:44:00,460
did you post that already?

00:44:00,460 --> 00:44:01,933
- [Daniel] Yeah, I think.

00:44:01,933 --> 00:44:03,810
- [Greg] I think you did at one point, but--

00:44:03,810 --> 00:44:06,790
- Yeah, yeah, it's, yeah. - Ended up there.

00:44:06,790 --> 00:44:09,493
- [Steven] So this is all open source for everyone to use.

00:44:17,977 --> 00:44:19,278
- [Man] The slides are on the website.

00:44:19,278 --> 00:44:20,430
- [Steven] Yeah, the slides are on the website,

00:44:20,430 --> 00:44:22,060
but I wanna make sure it's on the slides.

00:44:22,060 --> 00:44:22,893
Wait, did you have it right there,

00:44:22,893 --> 00:44:24,667
would you go down, I saw it, well, maybe not.

00:44:24,667 --> 00:44:27,440
- No, no, it's not that.

00:44:27,440 --> 00:44:31,110
No, I forgot to put it up, that's that.

00:44:33,280 --> 00:44:34,316
- [Man] So just go to a shell window

00:44:34,316 --> 00:44:37,835
and type in all your sensitive information.

00:44:37,835 --> 00:44:39,828
- Ah, here, here is the link, sorry.

00:44:39,828 --> 00:44:40,661
- [Man] Oh, there it is.

00:44:40,661 --> 00:44:44,963
- Okay, so it's currently on Github on my site.

00:44:46,330 --> 00:44:48,373
Maybe useful for someone else as well.

00:44:49,940 --> 00:44:51,510
Okay.

00:44:51,510 --> 00:44:52,980
- Questions. - It's time over?

00:44:52,980 --> 00:44:55,453
Questions left or hallway?

00:44:57,430 --> 00:44:58,579
Okay, thank you.

00:44:58,579 --> 00:45:01,568

YouTube URL: https://www.youtube.com/watch?v=2ab4Knwlmo4


