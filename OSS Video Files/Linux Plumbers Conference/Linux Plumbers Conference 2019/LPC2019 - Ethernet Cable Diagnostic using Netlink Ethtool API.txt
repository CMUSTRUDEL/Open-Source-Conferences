Title: LPC2019 - Ethernet Cable Diagnostic using Netlink Ethtool API
Publication date: 2019-09-17
Playlist: Linux Plumbers Conference 2019
Description: 
	Ethernet Cable Diagnostic using Netlink Ethtool API

Speaker
 Andrew Lunn

Description
Many Ethernet PHYs contain hardware to perform diagnostics of the
Ethernet cable. Breaks in the cable and shorts within a twisted pair
or to other pairs can be detected, and an estimate to the length along
the cable to the fault can be made. The talk will explain, at a high
level, how such diagnostics work, sending pulses down the cables and
looking for reflections. There is no standardization on such
diagnostics, and what information the PHY reports varies between
vendors. The ongoing work to allow ethtool to make use of a netlink
socket makes the ethtool API much more flexiable. This flexibility has
been used to provide a generic API to request a PHY performs
diagnostics tests and to report the results. Some aspects of this API
will be discussed, using the Marvell PHYs as examples. The talk aims
to spread knowledge on this work and encourage driver writers to
implement diagnostics for other PHYs.
Captions: 
	00:00:00,370 --> 00:00:01,750
- [Moderator] Our next presenter is Andrew Lunn.

00:00:01,750 --> 00:00:04,700
Andrew's been making a lot of significant contributions

00:00:04,700 --> 00:00:06,780
and in fact, I don't know what I would do

00:00:06,780 --> 00:00:08,230
without his valuable reviews

00:00:08,230 --> 00:00:10,970
of the DSA and Phi driver changes

00:00:10,970 --> 00:00:14,900
I'd be really overwhelmed without his help.

00:00:14,900 --> 00:00:17,800
He is going to talk to us about cable diagnostics

00:00:17,800 --> 00:00:22,103
with the ethernet, with the Netlink Ethtool API.

00:00:23,157 --> 00:00:24,710
Surely it will be something we'll enjoy.

00:00:24,710 --> 00:00:26,425
Please give him a warm welcome.

00:00:26,425 --> 00:00:28,675
(clapping)

00:00:31,847 --> 00:00:34,120
- So this is some work I did a couple months ago

00:00:34,120 --> 00:00:37,373
that I'd like to get into main line up at some point.

00:00:38,910 --> 00:00:40,109
Use cases;

00:00:40,109 --> 00:00:41,410
(laughs)

00:00:41,410 --> 00:00:44,903
This is, the Sun is a UK newspaper.

00:00:46,190 --> 00:00:48,240
Had an article a while back,

00:00:48,240 --> 00:00:49,890
couple years ago.

00:00:49,890 --> 00:00:54,223
BT Openreach started using eco-friendly cables.

00:00:55,120 --> 00:00:56,163
For the last mile.

00:00:57,280 --> 00:01:00,913
Apparently, it had a nut product in the cables.

00:01:02,120 --> 00:01:04,540
So squirrel just ate the cables.

00:01:04,540 --> 00:01:06,096
(laughs)

00:01:06,096 --> 00:01:07,070
So cable diagnostics;

00:01:07,070 --> 00:01:08,873
Has a squirrel eaten your cables?

00:01:09,760 --> 00:01:11,833
Something really useful to know.

00:01:11,833 --> 00:01:13,870
(laughs)

00:01:13,870 --> 00:01:15,970
And then there are more serious use cases.

00:01:17,000 --> 00:01:18,640
Things like structured wiring.

00:01:18,640 --> 00:01:23,230
You've often got three cables between you and the switch.

00:01:23,230 --> 00:01:25,950
There's a short cable between your desktop computer

00:01:25,950 --> 00:01:27,320
and the wall.

00:01:27,320 --> 00:01:29,490
There's a cable that goes through the wall

00:01:29,490 --> 00:01:31,260
to the wiring closet.

00:01:31,260 --> 00:01:32,440
Where there is a patch cable.

00:01:32,440 --> 00:01:33,820
And then there is a third cable

00:01:33,820 --> 00:01:36,213
that goes into the actual switch or router.

00:01:37,200 --> 00:01:38,420
And sometimes you run the,

00:01:38,420 --> 00:01:41,010
have you wrap the cable around your ankle too many times

00:01:41,010 --> 00:01:44,130
and have broken the connector.

00:01:44,130 --> 00:01:47,563
Has the handyman put a nail through the cable in the wall?

00:01:48,560 --> 00:01:50,120
Did the network administrator

00:01:50,120 --> 00:01:52,460
pull out the wrong cable, etc.?

00:01:52,460 --> 00:01:54,990
Just knowing roughly how long or how far along

00:01:54,990 --> 00:01:58,200
the cable is it disconnected or broken?

00:01:58,200 --> 00:02:00,000
Can be really useful to know to figure out

00:02:00,000 --> 00:02:02,670
what do I need to fix.

00:02:02,670 --> 00:02:05,560
So length is very important.

00:02:05,560 --> 00:02:06,510
How it's working?

00:02:06,510 --> 00:02:07,540
Nah.

00:02:07,540 --> 00:02:08,373
Could be useful.

00:02:09,600 --> 00:02:11,030
And there are some industries where

00:02:11,030 --> 00:02:14,493
they want to predict the failure before it happens.

00:02:16,100 --> 00:02:18,640
There's a minimum bend radius on a cable.

00:02:18,640 --> 00:02:21,580
And if you bend it too narrow, after a while,

00:02:21,580 --> 00:02:22,730
it will start breaking.

00:02:24,237 --> 00:02:26,243
The cable will slowly start to break down.

00:02:27,131 --> 00:02:29,910
So diagnostics isn't plain yes it works, no it's broken.

00:02:29,910 --> 00:02:32,250
It's starting to degrade.

00:02:32,250 --> 00:02:34,443
We should maybe take a look at it soon.

00:02:36,020 --> 00:02:37,545
Then you can have problems,

00:02:37,545 --> 00:02:39,484
like water gets into the connectors.

00:02:39,484 --> 00:02:41,980
You can tell that it's wet, but it is still working.

00:02:41,980 --> 00:02:43,480
We probably should look at it.

00:02:45,810 --> 00:02:47,080
So what is an Ethernet cable?

00:02:47,080 --> 00:02:48,920
I'm talking about copper cables here.

00:02:48,920 --> 00:02:51,693
If your data center is fiber, I don't care.

00:02:51,693 --> 00:02:53,120
(laughs)

00:02:53,120 --> 00:02:57,760
Mostly there are three twisted pairs or four twisted pairs.

00:02:57,760 --> 00:03:00,640
Also the automotive industry is now pushing through

00:03:00,640 --> 00:03:02,840
lots of one twisted pair cables.

00:03:02,840 --> 00:03:04,590
We are starting to see PHY drivers.

00:03:05,569 --> 00:03:07,420
So then, if you look under your desk,

00:03:07,420 --> 00:03:11,423
it is probably a four twisted pair cables.

00:03:11,423 --> 00:03:16,423
The twist on the pair gives you emission immunity

00:03:16,970 --> 00:03:18,370
and induction immunity.

00:03:18,370 --> 00:03:20,560
So cables act like antennas.

00:03:20,560 --> 00:03:22,030
They will transmit.

00:03:22,030 --> 00:03:23,090
They will also receive.

00:03:23,090 --> 00:03:26,313
And the twisting helps stop that happen.

00:03:28,880 --> 00:03:31,220
And also differential.

00:03:31,220 --> 00:03:33,305
So this is where it gets really physics-y.

00:03:33,305 --> 00:03:34,440
(laughs)

00:03:34,440 --> 00:03:37,500
They transmit opposites on the signal.

00:03:37,500 --> 00:03:38,777
So one you send a plus one

00:03:38,777 --> 00:03:40,563
and the other you send a minus one.

00:03:42,160 --> 00:03:44,470
Hopefully the cable will

00:03:44,470 --> 00:03:47,360
pick up the same noise on both pairs.

00:03:47,360 --> 00:03:49,910
And then you do a subtraction at the end.

00:03:49,910 --> 00:03:52,920
And you should be able to subtract out the noise

00:03:52,920 --> 00:03:54,793
leaving the good signal behind.

00:03:55,660 --> 00:03:58,060
So that's where the differential bit comes from.

00:03:59,200 --> 00:04:01,873
That is also interesting when we get onto later bits.

00:04:04,360 --> 00:04:06,640
People aren't really familiar with cables.

00:04:06,640 --> 00:04:09,100
They don't really think about voltages going sown cables.

00:04:09,100 --> 00:04:11,010
It's not an everyday thing.

00:04:11,010 --> 00:04:13,823
Let's go back to something we, as people, understand.

00:04:14,930 --> 00:04:17,180
There was an experiment that Sir Isaac Newton did

00:04:17,180 --> 00:04:18,913
back in 1687.

00:04:19,820 --> 00:04:22,880
He stood by this long corridor

00:04:22,880 --> 00:04:25,561
and then did a clap. (clap)

00:04:25,561 --> 00:04:27,164
And he timed how long it took

00:04:27,164 --> 00:04:29,420
to hit the wall and bounce back.

00:04:29,420 --> 00:04:31,823
And from that, he derived the speed of sound.

00:04:33,900 --> 00:04:35,350
But you can turn that around.

00:04:36,449 --> 00:04:37,290
If you know the speed of sound,

00:04:37,290 --> 00:04:40,853
you time it, you can figure out how far a way is the wall.

00:04:42,670 --> 00:04:46,770
Figuring out how far away the problem is on your cable,

00:04:46,770 --> 00:04:47,773
is the same thing.

00:04:49,240 --> 00:04:50,740
So that was maybe the beginning

00:04:50,740 --> 00:04:53,183
of Time Domain Refractometry, TDR.

00:04:54,850 --> 00:04:56,180
If you went through the failure data sheets,

00:04:56,180 --> 00:04:57,693
they always call about TDR.

00:04:59,170 --> 00:05:01,200
The same thing works for cables.

00:05:01,200 --> 00:05:02,990
You send a pulse down it.

00:05:02,990 --> 00:05:05,110
It hits something at the far end.

00:05:05,110 --> 00:05:06,740
And it bounces back.

00:05:06,740 --> 00:05:10,630
But instead of being a nice slow pulse that you can hear,

00:05:10,630 --> 00:05:14,150
it is 280 mega meters per second.

00:05:14,150 --> 00:05:15,143
So it's quite fast.

00:05:17,440 --> 00:05:21,250
And it get reflected when there is a change in impedance.

00:05:21,250 --> 00:05:23,690
That could be that it's reached the end of the cable.

00:05:23,690 --> 00:05:26,060
It's gone from 50 ohm to a million ohm.

00:05:26,060 --> 00:05:28,110
It's disconnected.

00:05:28,110 --> 00:05:29,900
Or it could be that it's looped back around

00:05:29,900 --> 00:05:31,453
because the cable is shorted.

00:05:33,080 --> 00:05:36,440
Begin by measuring the time and you know the speed.

00:05:36,440 --> 00:05:38,250
You can work out roughly how far along

00:05:38,250 --> 00:05:42,493
the cable is broken or is starting to degrade.

00:05:46,430 --> 00:05:48,840
So you send a post down.

00:05:48,840 --> 00:05:50,890
It gets to the end of the cable.

00:05:50,890 --> 00:05:52,820
It's not connected and it bounces back.

00:05:52,820 --> 00:05:54,100
And comes back up.

00:05:54,100 --> 00:05:56,482
So you see your initial pulse and then sometime later,

00:05:56,482 --> 00:05:59,200
you see the reflection.

00:05:59,200 --> 00:06:01,193
And from that, you know the distance.

00:06:02,260 --> 00:06:05,060
You can work out where it happened, where the fault was.

00:06:07,090 --> 00:06:08,163
It could be shorted.

00:06:09,450 --> 00:06:10,880
So the squirrel has eaten through

00:06:10,880 --> 00:06:12,833
and connected the two wires together.

00:06:14,150 --> 00:06:16,010
In this case, it goes down.

00:06:16,010 --> 00:06:16,843
It doesn't reflect.

00:06:16,843 --> 00:06:18,700
It actually comes back on the other one.

00:06:18,700 --> 00:06:21,210
On the differential pair.

00:06:21,210 --> 00:06:23,600
So what you send down as a one,

00:06:23,600 --> 00:06:26,480
comes back on the other side as a minus one.

00:06:26,480 --> 00:06:28,593
So you get a negative pulse.

00:06:31,930 --> 00:06:34,573
And maybe you've got a break part way along.

00:06:35,622 --> 00:06:37,030
Or when you do the measurements on the two cables,

00:06:37,030 --> 00:06:39,097
you realize one is shorter than the other.

00:06:39,097 --> 00:06:42,240
So you know you have a break somewhere along the cable,

00:06:42,240 --> 00:06:43,583
but not right at the end.

00:06:45,620 --> 00:06:49,260
And there is a boring case of everything works.

00:06:49,260 --> 00:06:52,730
In that case, the devise on the end

00:06:52,730 --> 00:06:54,410
simply absorbs the pulse.

00:06:54,410 --> 00:06:56,650
It never gets reflected back.

00:06:56,650 --> 00:06:58,463
All the impedances match.

00:06:59,870 --> 00:07:03,330
But that also means you can't tell how long

00:07:03,330 --> 00:07:06,610
a good cable is because you never see the reflection.

00:07:06,610 --> 00:07:10,210
Which can be a problem because maybe the domain engineer

00:07:10,210 --> 00:07:12,407
has connected two loop back cables together.

00:07:12,407 --> 00:07:14,800
And now you have a 200 meter cable

00:07:14,800 --> 00:07:17,373
when you are only allowed a 100 meter cable.

00:07:18,590 --> 00:07:19,423
And it doesn't work.

00:07:19,423 --> 00:07:21,153
And you don't know why it doesn't work.

00:07:22,450 --> 00:07:24,993
That's physics, but this is Linux plumbers.

00:07:26,360 --> 00:07:29,523
How do we plumb this into Linux?

00:07:31,100 --> 00:07:33,130
Or a more interesting question is

00:07:33,130 --> 00:07:36,720
why hasn't it already been plumbed into Linux?

00:07:36,720 --> 00:07:39,743
Cause the fibes have done this for decades.

00:07:42,000 --> 00:07:46,810
One problem is that, no two PHYs are the same.

00:07:46,810 --> 00:07:47,790
They all do different things.

00:07:47,790 --> 00:07:50,420
They will give you different results back.

00:07:50,420 --> 00:07:55,420
This is not part of IAAA8 or 2.3C whatever.

00:07:57,098 --> 00:07:59,098
The the proprietor will put something in

00:08:00,820 --> 00:08:02,930
which makes it difficult to fit in

00:08:02,930 --> 00:08:05,490
to the current ioctl model.

00:08:05,490 --> 00:08:08,770
You don't know, there's no standard size on the cords.

00:08:08,770 --> 00:08:09,603
It's shorted.

00:08:09,603 --> 00:08:10,436
It's not shorted.

00:08:10,436 --> 00:08:13,523
It's shorted from pair one to pair three, etc. etc.

00:08:14,652 --> 00:08:18,053
Some PHYs will tell you about the first part.

00:08:18,053 --> 00:08:21,560
Some other PHYs will tell you about the first four faults.

00:08:21,560 --> 00:08:23,410
So the squirrel has been very active.

00:08:24,941 --> 00:08:26,541
Some will give you the raw data.

00:08:28,500 --> 00:08:30,671
Some PHYs got one pair, they've got two pairs,

00:08:30,671 --> 00:08:31,600
they've got four pairs.

00:08:31,600 --> 00:08:36,600
It's just how do you fit these nicely into an ioctl call?

00:08:36,880 --> 00:08:38,110
You don't.

00:08:38,110 --> 00:08:39,323
It's a real mess.

00:08:41,860 --> 00:08:43,600
There's a few other challenges.

00:08:43,600 --> 00:08:44,863
It's slow.

00:08:45,870 --> 00:08:48,500
You need to know where in about a second and a half

00:08:48,500 --> 00:08:50,350
to make sure the cable is idle.

00:08:50,350 --> 00:08:53,490
You can't just send a pulse down it while it's in use.

00:08:53,490 --> 00:08:55,380
Because you've got pulses coming backwards and forwards

00:08:55,380 --> 00:08:57,000
and all sorts of data.

00:08:57,000 --> 00:08:59,810
So that's about a second and a have to go idle.

00:08:59,810 --> 00:09:02,560
It then takes you maybe another couple of seconds

00:09:02,560 --> 00:09:04,850
to actually run the test.

00:09:04,850 --> 00:09:06,570
And then you've got to bring the interface back up again.

00:09:06,570 --> 00:09:10,070
This is a destructive test in terms of you've got to

00:09:10,070 --> 00:09:11,753
make the cable idle.

00:09:13,570 --> 00:09:17,043
The current ethtool holds RTNL.

00:09:18,693 --> 00:09:19,880
If I was to hold that for a few seconds,

00:09:19,880 --> 00:09:22,215
there would be lots of unhappy people.

00:09:22,215 --> 00:09:25,080
(laughs)

00:09:25,080 --> 00:09:28,160
but we need that to deal with the race conditions.

00:09:28,160 --> 00:09:29,670
If someone is running a cable test

00:09:29,670 --> 00:09:32,210
at the same time someone has put the interface down,

00:09:32,210 --> 00:09:33,810
we've got to do the right thing.

00:09:34,860 --> 00:09:36,793
So there are a few problems there.

00:09:38,409 --> 00:09:42,240
The IOCTL interface has no asynchronous method.

00:09:42,240 --> 00:09:45,670
It's meant to get a value and turn it mentally.

00:09:45,670 --> 00:09:48,170
We need something that's more a sync hear.

00:09:48,170 --> 00:09:49,697
Bong something off and then later we get the results back.

00:09:49,697 --> 00:09:54,697
And that's where the new

00:09:55,780 --> 00:09:58,800
Netlink Ethtool implementation comes in.

00:09:58,800 --> 00:10:02,787
And this is a quote from patch zero of X saying,

00:10:02,787 --> 00:10:04,570
"why do we want this?".

00:10:05,500 --> 00:10:09,800
It fixes some of the problems we have with flexibility.

00:10:09,800 --> 00:10:12,840
It fixes some of the race issues.

00:10:12,840 --> 00:10:15,713
It fixes the lack of notifications.

00:10:19,070 --> 00:10:22,630
It basically does what I need for cable diagnostics.

00:10:22,630 --> 00:10:24,090
So when this came along,

00:10:24,090 --> 00:10:25,963
I jumped on it and started using it.

00:10:29,530 --> 00:10:32,230
It provides the missing pieces to make this possible.

00:10:32,230 --> 00:10:34,703
Which is why nobody has done this before.

00:10:37,810 --> 00:10:39,300
It gives us the flexibility

00:10:39,300 --> 00:10:41,010
that we can pick up the attributes

00:10:41,010 --> 00:10:42,960
and put them into the message to be sent back

00:10:42,960 --> 00:10:44,960
to user space per PHY.

00:10:44,960 --> 00:10:49,070
We don't need to define a well structured IOCTL.

00:10:49,070 --> 00:10:50,640
We can have a bit of a wild west,

00:10:50,640 --> 00:10:52,040
but we should try and avoid that.

00:10:52,040 --> 00:10:54,453
We should try to standardize against fibes.

00:10:56,620 --> 00:11:01,072
We only hold the lock while we are doing the get set.

00:11:01,072 --> 00:11:03,210
So while we are setting up to do the cable test,

00:11:03,210 --> 00:11:04,263
we hold the lock.

00:11:06,457 --> 00:11:08,710
After it's going, you don't need the lock anymore,

00:11:08,710 --> 00:11:11,310
but we have some other race conditions to deal with.

00:11:13,140 --> 00:11:14,770
We've got spontaneous messages

00:11:14,770 --> 00:11:17,250
so we can set the cable test going

00:11:17,250 --> 00:11:19,070
and then sometime later when it's finished,

00:11:19,070 --> 00:11:21,050
we can report back up to user space.

00:11:21,050 --> 00:11:22,083
Here's the results.

00:11:24,000 --> 00:11:26,250
So we are not holding that lock all the time.

00:11:27,380 --> 00:11:30,180
But there are still some conditions we've got to handle.

00:11:35,357 --> 00:11:38,230
The PHY has this quite complex State Machine,

00:11:38,230 --> 00:11:41,263
which is hard to see from this distance.

00:11:43,260 --> 00:11:45,810
We can add one more state to the State Machine

00:11:45,810 --> 00:11:48,393
just to handle cable diagnostics.

00:11:51,640 --> 00:11:53,130
So you started off.

00:11:53,130 --> 00:11:55,600
You've transition into this cable testing state.

00:11:55,600 --> 00:11:57,960
You then don't need to worry about the thing going up

00:11:57,960 --> 00:11:59,473
or down or things like that.

00:12:02,320 --> 00:12:04,870
It slowly gets simpler and simpler as

00:12:04,870 --> 00:12:06,740
hi internet states away.

00:12:06,740 --> 00:12:09,590
Don't be surprised if it ends up as one state in the end.

00:12:11,320 --> 00:12:13,820
So what does the flow look like?

00:12:13,820 --> 00:12:17,530
So first you get this Netlink message.

00:12:17,530 --> 00:12:20,573
The command, do an action cable test.

00:12:21,600 --> 00:12:22,630
We check with the PHY.

00:12:22,630 --> 00:12:25,450
Do you actually accept cable tests etc. etc.?

00:12:25,450 --> 00:12:26,940
You start of the cable test.

00:12:26,940 --> 00:12:31,563
You allocate SKB to put the Netlink results message into.

00:12:34,411 --> 00:12:35,354
Then you change into the cable test state.

00:12:35,354 --> 00:12:36,654
And at that point you return back to the user space

00:12:36,654 --> 00:12:39,310
to say yes everything's going, everything's good.

00:12:39,310 --> 00:12:42,053
So it's a very short time holding the lock.

00:12:44,060 --> 00:12:48,980
And the we go into waiting for the PHY to do its thing.

00:12:48,980 --> 00:12:51,810
And then the Marvell one is a bit odd.

00:12:51,810 --> 00:12:53,950
You can wait on interrupts for everything

00:12:53,950 --> 00:12:55,580
except for cable tests.

00:12:55,580 --> 00:12:56,830
So you end up pulling it.

00:12:58,140 --> 00:13:00,740
And I am sure other PHYs got other autotives like that.

00:13:00,740 --> 00:13:03,450
So I try to make it generic enough,

00:13:03,450 --> 00:13:06,063
so you can wait on interrupts or whatever you need.

00:13:07,650 --> 00:13:11,460
So the PHY will come up with these results.

00:13:11,460 --> 00:13:13,470
It will use helpers to fill the results

00:13:13,470 --> 00:13:14,883
into the SKB and then say I'm done.

00:13:14,883 --> 00:13:18,910
And then the core will send it up

00:13:18,910 --> 00:13:22,250
to user space with the results.

00:13:22,250 --> 00:13:24,770
And then we've got to put the link back into use

00:13:24,770 --> 00:13:27,370
because people wan the internet to work if possible.

00:13:29,480 --> 00:13:31,584
So there is a simple Driver API extensions.

00:13:31,584 --> 00:13:36,584
Those two functions need to implement in PHY Driver itself.

00:13:37,030 --> 00:13:38,146
One to start it and one to get the results for the pulling.

00:13:38,146 --> 00:13:43,146
And there is a few helper functions there

00:13:44,630 --> 00:13:49,270
to pattern the results into SKB that we send upwards.

00:13:49,270 --> 00:13:51,140
I didn't really like the idea of

00:13:51,140 --> 00:13:53,210
individual PHY Drivers having to deal with

00:13:53,210 --> 00:13:55,140
Netlink messages etc.

00:13:55,140 --> 00:13:57,924
I get it wrong enough myself so if I get it wrong,

00:13:57,924 --> 00:13:59,593
everyone else will get it wrong.

00:14:02,860 --> 00:14:05,060
So what does this look like from user space?

00:14:06,050 --> 00:14:07,860
So three examples.

00:14:07,860 --> 00:14:09,870
Top left; everything is good.

00:14:09,870 --> 00:14:10,703
Boring.

00:14:12,310 --> 00:14:16,400
Top right; This is a fifteen meter cable,

00:14:16,400 --> 00:14:17,783
just simply not plugged in.

00:14:19,176 --> 00:14:20,500
And we get to see it's open circuit

00:14:20,500 --> 00:14:23,183
and the problem is fifteen meters along the cable.

00:14:25,220 --> 00:14:30,220
The Marvell PHY seems to give you generalities of 60 cm

00:14:30,560 --> 00:14:32,320
for some strange reason.

00:14:32,320 --> 00:14:34,283
And it seems to differ for pair.

00:14:35,530 --> 00:14:37,230
But it still gives you a good idea

00:14:38,133 --> 00:14:40,603
if the problem is around fifteen meters down the cable.

00:14:41,830 --> 00:14:43,783
The bottom one is an interesting one.

00:14:45,325 --> 00:14:47,890
That's a gigabit Ethernet box connected

00:14:48,788 --> 00:14:51,043
to a 1000 USB dongle.

00:14:53,350 --> 00:14:55,260
So you've got end just needing two pairs.

00:14:55,260 --> 00:14:57,320
The 100 megabit just needs two pairs.

00:14:57,320 --> 00:14:59,433
The gigabit side has got all four pairs.

00:15:00,630 --> 00:15:04,023
So the link has negotiated down to 100 megabits.

00:15:04,980 --> 00:15:07,570
Which means pair zero and one are okay.

00:15:07,570 --> 00:15:10,890
The other two pairs are not actually used in this set up.

00:15:10,890 --> 00:15:14,180
And internally in the end of the USB dongle

00:15:14,180 --> 00:15:15,513
had been shorted around.

00:15:18,890 --> 00:15:22,160
So that's another interesting thing, my wires,

00:15:22,160 --> 00:15:25,470
my link going slow because maybe they cable is

00:15:25,470 --> 00:15:26,793
partially damaged, but auto-negotiation is still working,

00:15:26,793 --> 00:15:31,793
but at 100, instead of Gig.

00:15:32,610 --> 00:15:34,623
That's what's known as down shift.

00:15:38,670 --> 00:15:40,893
And then we've got access to, sometimes you get access

00:15:40,893 --> 00:15:42,973
to the raw TDR data.

00:15:44,970 --> 00:15:47,310
And with the Marvell ones, you get to know the size of

00:15:47,310 --> 00:15:50,700
the pulse and then you get to know the size of

00:15:50,700 --> 00:15:54,410
the reflection at a particular distance.

00:15:54,410 --> 00:15:58,230
Again, this is my 15 meter cable and you see that

00:15:58,230 --> 00:16:00,913
around 15 meters there is this huge peak.

00:16:03,350 --> 00:16:05,794
Well I've heard from some people,

00:16:05,794 --> 00:16:08,350
they want to see this because you can see the cable

00:16:08,350 --> 00:16:12,223
degrading while you start seeing smaller peaks.

00:16:13,400 --> 00:16:14,670
And that's where it is going to break

00:16:14,670 --> 00:16:16,520
some time in the future.

00:16:16,520 --> 00:16:19,220
Or, if there's a weird pattern,

00:16:19,220 --> 00:16:20,920
it's water that's got into it.

00:16:20,920 --> 00:16:24,920
You can tell a lot from the shape of the peak as to

00:16:24,920 --> 00:16:27,693
what is the problem, or what's going to be the problem.

00:16:29,410 --> 00:16:30,820
My experience so far is,

00:16:30,820 --> 00:16:34,030
that not many PHYs give you access to that.

00:16:34,030 --> 00:16:37,163
It's just broken or it's shorted.

00:16:38,320 --> 00:16:39,723
But the Marvell PHY is nice.

00:16:43,625 --> 00:16:44,640
So where are we in terms of status?

00:16:44,640 --> 00:16:47,280
The biggest problem is that I'm sat twiddling my thumbs,

00:16:47,280 --> 00:16:49,433
waiting for the Netlink's stuff.

00:16:50,470 --> 00:16:55,470
We tend to get about one patch, one review cycle per cycle.

00:16:56,400 --> 00:16:58,390
It's just way to slow.

00:16:58,390 --> 00:17:01,790
So somehow, we as a community need to speed up that.

00:17:01,790 --> 00:17:04,440
- [moderator] I write into Net Conf in hoping he would

00:17:04,440 --> 00:17:05,580
speed up his process.

00:17:05,580 --> 00:17:06,693
And he did come.

00:17:07,649 --> 00:17:09,680
He had a lot to say, but I guess it's kind of clear

00:17:09,680 --> 00:17:11,963
it's not his top priority right now.

00:17:13,230 --> 00:17:14,490
I should ping him again.

00:17:14,490 --> 00:17:16,630
- Ya, but it is also holding back other things,

00:17:16,630 --> 00:17:18,133
for example the cues.

00:17:18,133 --> 00:17:19,514
- [Moderator] It's not just you, but also cues.

00:17:19,514 --> 00:17:20,993
- And lots of other things.

00:17:22,520 --> 00:17:25,420
Ya, I posted the code once because there's actually

00:17:26,686 --> 00:17:28,240
two different frameworks out there now at the moment.

00:17:28,240 --> 00:17:31,183
I did and Microsoft also did one.

00:17:32,976 --> 00:17:35,665
The idea is that mine has further matured

00:17:35,665 --> 00:17:38,515
and I didn't want it to go off in two different branches.

00:17:40,020 --> 00:17:42,903
The Marvell one Gig PHY, Well supported.

00:17:44,280 --> 00:17:47,279
I will do the ten Gig PHY for Marvell

00:17:47,279 --> 00:17:50,210
at some time in the future on the Contier PHY.

00:17:50,210 --> 00:17:53,230
And I have talked to other PHY manufacturers.

00:17:53,230 --> 00:17:55,860
So Microchip, I only presented yesterday.

00:17:55,860 --> 00:17:58,020
He's really interested in this.

00:17:58,020 --> 00:18:01,290
Florian, he'll want this as well.

00:18:01,290 --> 00:18:05,362
So, ya, there's lots of support in it.

00:18:05,362 --> 00:18:07,812
We're just waiting for the Netlink stuff to land.

00:18:13,190 --> 00:18:14,023
- [Moderator] Okay, so if you are going to ask questions,

00:18:14,023 --> 00:18:15,623
please use the microphone.

00:18:18,770 --> 00:18:21,310
- [Audience Member] So first of all, I wanted to mention

00:18:21,310 --> 00:18:26,310
the Athroskin will also do it for copper PHYs.

00:18:27,273 --> 00:18:30,683
The second question was, is this only applicable to copper?

00:18:32,490 --> 00:18:37,490
- I've never seen and SFP standard say anything

00:18:37,810 --> 00:18:39,900
about this sort of thing.

00:18:39,900 --> 00:18:41,363
Optical, I have no idea.

00:18:42,409 --> 00:18:43,860
But I've never seen anything about it.

00:18:43,860 --> 00:18:47,722
It could be in the propritory parts of the document.

00:18:47,722 --> 00:18:49,763
- [Audience Member] (unintelligible)

00:18:49,763 --> 00:18:51,337
`- Ya.

00:18:51,337 --> 00:18:55,754
- [Audience Member] (unintelligible)

00:18:58,390 --> 00:19:00,840
- [Audience Member] So ya, I was just saying that

00:19:00,840 --> 00:19:04,200
Broadcom probably has it and it is not through the kernal,

00:19:04,200 --> 00:19:05,083
as far as I know.

00:19:07,248 --> 00:19:10,170
They have their PHY supporting their SDK and

00:19:10,170 --> 00:19:11,870
- [Andrew] For the finda

00:19:11,870 --> 00:19:12,703
- Ya.

00:19:13,635 --> 00:19:17,980
- They have a TDR support directly outside the kernal

00:19:17,980 --> 00:19:19,180
if I remember correctly.

00:19:23,140 --> 00:19:24,130
- [Audience Member] First of all,

00:19:24,130 --> 00:19:26,930
regarding TDR tool optical, which exist.

00:19:26,930 --> 00:19:28,500
It is quite expensive.

00:19:28,500 --> 00:19:32,210
Sometimes it uses a different so it doesn't interfere with

00:19:32,210 --> 00:19:34,962
the traffic itself so it's even better.

00:19:34,962 --> 00:19:36,875
A couple of questions regarding this feature,

00:19:36,875 --> 00:19:40,080
the new Netlink, is it going to be supported for

00:19:40,080 --> 00:19:42,620
both the Mac Driver and the PHY Driver?

00:19:42,620 --> 00:19:44,930
Or just the PHY?

00:19:44,930 --> 00:19:48,810
- The Ethtool re implementation will just be

00:19:48,810 --> 00:19:52,380
a complete re implementation of what we've got now.

00:19:52,380 --> 00:19:53,853
So that's agnostic.

00:19:55,080 --> 00:19:58,710
- [Moderator] And he just happens to have

00:19:58,710 --> 00:20:01,993
a PHY library implementation of the state.

00:20:05,618 --> 00:20:06,451
- [Audience Member] I see

00:20:06,451 --> 00:20:09,470
- So it could be implemented as an Ethtool operation

00:20:09,470 --> 00:20:11,700
on the Mac , but at the moment,

00:20:11,700 --> 00:20:13,748
because I am the PHY maintainer,

00:20:13,748 --> 00:20:15,250
obviously the data's the PHY.

00:20:15,250 --> 00:20:17,470
But there's no reason why you couldn't trap this

00:20:17,470 --> 00:20:20,950
at a higher level and use the same Netlink messages.

00:20:20,950 --> 00:20:23,621
- [Audience Member] Some vendors do not control the PHY

00:20:23,621 --> 00:20:24,800
like the Mac does

00:20:24,800 --> 00:20:27,920
- Yes some vendors re invent the wheel and do it in firmware

00:20:27,920 --> 00:20:30,293
rather than making use of the central core stuff.

00:20:30,293 --> 00:20:32,376
(laughs)

00:20:34,230 --> 00:20:36,220
- [Moderator] That's an excellent segue

00:20:36,220 --> 00:20:37,500
- This is a family conference.

00:20:37,500 --> 00:20:38,942
Please don't use the F-word.

00:20:38,942 --> 00:20:41,192
(laughter)

00:20:43,249 --> 00:20:44,797
- [Moderator] And I won't use it either.

00:20:45,810 --> 00:20:48,540
So ya the PHY code that is part of the SDK

00:20:48,540 --> 00:20:51,650
is also available and we'll just maybe say

00:20:51,650 --> 00:20:54,960
that the status is exported in a way

00:20:54,960 --> 00:20:56,930
that the driver can access it.

00:20:56,930 --> 00:20:58,606
That doesn't use the F-word, does it?

00:20:58,606 --> 00:21:01,490
(laughter)

00:21:01,490 --> 00:21:03,353
- [Audience Member] I don't know about that.

00:21:04,650 --> 00:21:08,180
I'm curious, in the cases where the TDR information

00:21:08,180 --> 00:21:10,700
is not provided, do you get the length of the fault

00:21:10,700 --> 00:21:13,460
or just a yes no, fault or no fault?

00:21:13,460 --> 00:21:17,040
- All the Phys I've seen give you the length to the fault.

00:21:17,040 --> 00:21:17,873
- Okay.

00:21:17,873 --> 00:21:20,980
So it's not just a binary state, it's also the length.

00:21:20,980 --> 00:21:21,813
- [Andrew] Ya.

00:21:21,813 --> 00:21:22,755
- Okay.

00:21:22,755 --> 00:21:23,588
That's interesting.

00:21:23,588 --> 00:21:24,580
- But there could be PHYs that don't.

00:21:24,580 --> 00:21:25,710
- [Audience] Right.

00:21:25,710 --> 00:21:27,448
- I've only looked at four.

00:21:27,448 --> 00:21:29,620
- [Audience Member] So I have kind of lost track of

00:21:29,620 --> 00:21:32,300
where the Netlink status is.

00:21:32,300 --> 00:21:33,800
Converting Ethtool to Netlink.

00:21:35,200 --> 00:21:37,110
What's the hold up of the last set?

00:21:37,110 --> 00:21:38,630
- [Moderator] There are some small issues,

00:21:38,630 --> 00:21:43,630
like converting the bitmaps of the link speeds

00:21:43,720 --> 00:21:44,890
and stuff supported.

00:21:44,890 --> 00:21:46,480
So the is a little trickery there and

00:21:46,480 --> 00:21:50,770
getting it all translated and initially the state is

00:21:50,770 --> 00:21:52,680
using the existing Ethtool ops and

00:21:52,680 --> 00:21:54,280
translate them into the Netlink bit.

00:21:54,280 --> 00:21:56,630
And there are some complications there as well.

00:21:57,970 --> 00:21:59,170
It's really close.

00:21:59,170 --> 00:22:01,260
Honestly speaking, when he gave his presentation

00:22:01,260 --> 00:22:05,020
at Net Conf, I was like man you are 92, 93% there.

00:22:05,020 --> 00:22:06,810
- [Andrew] That was June

00:22:06,810 --> 00:22:09,450
- [Moderator] I have to apply some fire to his butt

00:22:09,450 --> 00:22:11,273
to get him going somehow.

00:22:12,512 --> 00:22:15,037
And if there is a couple things other than Andrew's work,

00:22:15,037 --> 00:22:16,980
but I just can't think of them off the top of my head

00:22:16,980 --> 00:22:21,780
that were kind of like detoured by just not being done.

00:22:21,780 --> 00:22:24,280
So if I have a list of those, that gives me ammunition.

00:22:24,280 --> 00:22:25,680
So please tell them all to me.

00:22:25,680 --> 00:22:27,719
If you have some cool projects that are waiting for this,

00:22:27,719 --> 00:22:29,480
we end up being open to

00:22:30,484 --> 00:22:32,130
- [Andrew] Whereas others can pick that up.

00:22:32,130 --> 00:22:35,310
- Yes, I think someone needs to work on it with him.

00:22:37,300 --> 00:22:39,150
If he just keeps doing it by himself,

00:22:40,054 --> 00:22:40,887
he'll just "Oh. There's a small problem.

00:22:40,887 --> 00:22:41,720
I can't finish it.".

00:22:41,720 --> 00:22:42,553
Yes,

00:22:42,553 --> 00:22:43,386
so maybe we need to collaborate with him

00:22:43,386 --> 00:22:44,370
to help him finish up.

00:22:44,370 --> 00:22:45,366
Ya Mr Linfield will.

00:22:45,366 --> 00:22:46,199
Ya.

00:22:47,081 --> 00:22:48,982
Ethtool maintainer.

00:22:48,982 --> 00:22:49,815
Yay!

00:22:51,127 --> 00:22:52,600
Ya so I think we just give him some help,

00:22:52,600 --> 00:22:54,530
we could probably finish this off.

00:22:54,530 --> 00:22:55,900
And just ask him.

00:22:55,900 --> 00:22:57,930
Send me you current state of your patches and

00:22:57,930 --> 00:22:59,380
I'll just keep working on it.

00:23:01,320 --> 00:23:03,243
- [Moderator] Ya I'm a little frustrated as well.

00:23:04,370 --> 00:23:05,370
Any other questions?

00:23:08,320 --> 00:23:11,663
- Intel generally use the F-word.

00:23:12,590 --> 00:23:13,749
I don't care.

00:23:13,749 --> 00:23:15,832
(laughs)

00:23:16,830 --> 00:23:18,570
Although there are some drivers for them,

00:23:18,570 --> 00:23:20,830
so if you happen to run into a PHY connected to

00:23:20,830 --> 00:23:23,553
a Marvell socket, they don't like it.

00:23:25,066 --> 00:23:27,280
(laughs)

00:23:27,280 --> 00:23:29,060
- [Moderator] Unless you guys have nothing but F-word stuff

00:23:29,060 --> 00:23:31,570
to talk about, I think that's the end.

00:23:31,570 --> 00:23:32,650
Thank you very much, Andrew.

00:23:32,650 --> 00:23:33,783

YouTube URL: https://www.youtube.com/watch?v=Z7IH14068Yg


