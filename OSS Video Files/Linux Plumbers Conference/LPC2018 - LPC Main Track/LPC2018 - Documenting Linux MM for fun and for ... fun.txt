Title: LPC2018 - Documenting Linux MM for fun and for ... fun
Publication date: 2018-12-04
Playlist: LPC2018 - LPC Main Track
Description: 
	url:  https://linuxplumbersconf.org/event/2/contributions/80/
speaker:  Mike Rapoport


It is well known that developers do not like writing documentation. But although documenting the code may seem dull and unrewarding, it has definite value for the writer.

When you write the documentation you gain an insight into the algorithms, design (or lack of such), and implementation details. Sometimes you see neat code and say "Hey, that's genius!". But sometimes you discover small bugs or chunks of code that beg for refactoring. In any case, your understanding of the system significantly improves.

I'd like to share the experience I had with Linux memory management documentation, what was it's state a few months ago, what have been done and where are we now.

The work on the memory management documentation is in progress and the question "Where do we want to be?" is definitely a topic for discussion and debate.
Captions: 
	00:00:05,300 --> 00:00:13,129
well hello everybody I'm Ike I'm working

00:00:09,260 --> 00:00:16,160
for IBM Research and a while ago I have

00:00:13,129 --> 00:00:20,530
started working on a mmm documentation

00:00:16,160 --> 00:00:23,510
there's a fun project yeah

00:00:20,530 --> 00:00:25,970
so it all started and well ago when a

00:00:23,510 --> 00:00:26,630
colleague of mine asked me some

00:00:25,970 --> 00:00:29,090
questions

00:00:26,630 --> 00:00:31,460
probably that probably something

00:00:29,090 --> 00:00:34,699
different and I wanted to say ok go read

00:00:31,460 --> 00:00:38,329
the menu and they well there was no

00:00:34,699 --> 00:00:41,660
actually real menu and the best we have

00:00:38,329 --> 00:00:44,210
is 15 all years 15 years old book a

00:00:41,660 --> 00:00:48,020
document in to for Linux memory

00:00:44,210 --> 00:00:50,690
management and so the answer is

00:00:48,020 --> 00:00:52,790
obviously ok go read the source and

00:00:50,690 --> 00:00:56,540
reading is the source of memory

00:00:52,790 --> 00:01:00,230
management is not something that well

00:00:56,540 --> 00:01:03,559
really easy to do so I decided that

00:01:00,230 --> 00:01:07,719
probably getting mmm documentation into

00:01:03,559 --> 00:01:07,719
somewhat better shape would be an icing

00:01:07,899 --> 00:01:14,119
obviously nobody doubts value of

00:01:10,700 --> 00:01:15,289
documentation because if somebody if the

00:01:14,119 --> 00:01:17,299
foundation exists

00:01:15,289 --> 00:01:20,060
somebody who reads it can understand

00:01:17,299 --> 00:01:27,009
what's going on without actually diving

00:01:20,060 --> 00:01:27,009
deep into 8,000 clients files and

00:01:27,459 --> 00:01:31,909
sometimes when people look at the kernel

00:01:29,719 --> 00:01:36,499
code they find examples that I'm not the

00:01:31,909 --> 00:01:38,810
best practices to use and obviously it

00:01:36,499 --> 00:01:46,009
looks like more professional project

00:01:38,810 --> 00:01:49,569
it's very very popular what were these

00:01:46,009 --> 00:01:49,569
days look professional

00:01:49,760 --> 00:01:55,430
for people who've been there around it

00:01:52,940 --> 00:02:00,470
also has certain value because when you

00:01:55,430 --> 00:02:01,820
document your code you can you can think

00:02:00,470 --> 00:02:04,070
about it

00:02:01,820 --> 00:02:06,800
once again after you wrote it and think

00:02:04,070 --> 00:02:11,150
if it does much what you intended to do

00:02:06,800 --> 00:02:13,970
or you did something different it helps

00:02:11,150 --> 00:02:17,810
you when you go back after month week

00:02:13,970 --> 00:02:19,760
and say oh who the hell wrote it so when

00:02:17,810 --> 00:02:22,520
you have some documentation at least a

00:02:19,760 --> 00:02:25,910
at least you can say I thought about

00:02:22,520 --> 00:02:28,070
this and of course when there is

00:02:25,910 --> 00:02:32,900
documentation other people can read it

00:02:28,070 --> 00:02:36,230
it's obviously helpful now for a person

00:02:32,900 --> 00:02:38,480
who is new to some parts of the code

00:02:36,230 --> 00:02:39,950
completely new to a project or new to

00:02:38,480 --> 00:02:42,560
some parts of the code right into

00:02:39,950 --> 00:02:48,200
commentation definitely helps understand

00:02:42,560 --> 00:02:50,360
how the things work it's been a lot of

00:02:48,200 --> 00:02:52,190
talks about that joining Linux

00:02:50,360 --> 00:02:54,680
development communities to find your

00:02:52,190 --> 00:02:57,080
itch to scratch so writing documentation

00:02:54,680 --> 00:02:59,780
can help you there as well because there

00:02:57,080 --> 00:03:03,320
are less and less itches each year and

00:02:59,780 --> 00:03:10,430
of course documentation will be there to

00:03:03,320 --> 00:03:14,090
help others so I when I've started I

00:03:10,430 --> 00:03:16,850
looked back and I looked at what there

00:03:14,090 --> 00:03:19,489
is and what can be improved and where we

00:03:16,850 --> 00:03:22,430
can go further so what we had a couple

00:03:19,489 --> 00:03:24,200
of months ago not that much changed

00:03:22,430 --> 00:03:26,390
since then yes it don't take me wrong

00:03:24,200 --> 00:03:30,080
but what we had a couple of months ago

00:03:26,390 --> 00:03:33,260
we had relatively good coverage for mmm

00:03:30,080 --> 00:03:39,130
related parts in the broken CC TL

00:03:33,260 --> 00:03:42,640
etcetera we do have some API description

00:03:39,130 --> 00:03:45,590
and we have some collection of random

00:03:42,640 --> 00:03:47,630
documents and thoughts and

00:03:45,590 --> 00:03:52,880
like Matthew said while the government

00:03:47,630 --> 00:03:55,760
developers talking to each other a bit

00:03:52,880 --> 00:03:59,120
in more details the rich description of

00:03:55,760 --> 00:04:02,840
a user visible interfaces related to

00:03:59,120 --> 00:04:06,880
memory management a part of them are

00:04:02,840 --> 00:04:12,110
described at documentation ccTLD am part

00:04:06,880 --> 00:04:14,959
part of proc PID descriptions but if you

00:04:12,110 --> 00:04:17,780
think about an unprepared reader that is

00:04:14,959 --> 00:04:20,510
not really familiar with ecosystem and

00:04:17,780 --> 00:04:25,220
jargon and cetera it's really hard to

00:04:20,510 --> 00:04:29,240
read them I really had to read them the

00:04:25,220 --> 00:04:32,810
part of documentation ABI 4mm is nearly

00:04:29,240 --> 00:04:34,700
absent although parts are overlapping

00:04:32,810 --> 00:04:39,770
with some existing documentation in

00:04:34,700 --> 00:04:42,740
other parts and additional descriptions

00:04:39,770 --> 00:04:44,960
of user phase visible user space visible

00:04:42,740 --> 00:04:52,690
interfaces a very deep inside

00:04:44,960 --> 00:04:58,970
documentation via the internal API

00:04:52,690 --> 00:05:06,200
pretty much sums up to a section in the

00:04:58,970 --> 00:05:09,860
terminal API rest that didn't change it

00:05:06,200 --> 00:05:13,400
almost didn't change into four tests to

00:05:09,860 --> 00:05:17,270
pray one when it was edit initially it

00:05:13,400 --> 00:05:22,370
has like five or two five to ten updates

00:05:17,270 --> 00:05:24,950
since then till now most of them were

00:05:22,370 --> 00:05:31,250
fixes for renaming of files inside

00:05:24,950 --> 00:05:35,600
kernel and there is a paragraph in

00:05:31,250 --> 00:05:37,910
kernel hacking a guidebook which nearly

00:05:35,600 --> 00:05:41,750
hadn't changed which hadn't changed

00:05:37,910 --> 00:05:45,669
since 2005 except the conversion

00:05:41,750 --> 00:05:48,740
Meredydd from txt to error a touristy

00:05:45,669 --> 00:05:52,570
and again there is documentation vamper

00:05:48,740 --> 00:05:52,570
mmm developers doctor cut to each other

00:05:52,900 --> 00:05:58,030
as for the API reference of the

00:05:55,330 --> 00:06:00,250
subsystems it probably is one of the

00:05:58,030 --> 00:06:06,400
most fundamental subsystem widely used

00:06:00,250 --> 00:06:10,480
outside in by other subsystems we do

00:06:06,400 --> 00:06:14,350
have some API reference for mmm I did

00:06:10,480 --> 00:06:17,560
some growth statistics so 40% of mm

00:06:14,350 --> 00:06:21,280
files do have kernel doc comments here

00:06:17,560 --> 00:06:25,180
and there which covers roughly 10 to 15%

00:06:21,280 --> 00:06:28,870
of the functions and there are a couple

00:06:25,180 --> 00:06:30,940
of comments there that nearly kernel

00:06:28,870 --> 00:06:36,490
documents but they like the second star

00:06:30,940 --> 00:06:39,240
in the beginning a part of them were not

00:06:36,490 --> 00:06:42,160
completely consistent with the code a

00:06:39,240 --> 00:06:44,500
particularly when people changing the

00:06:42,160 --> 00:06:47,560
Declaration of the function they tend to

00:06:44,500 --> 00:06:52,420
forget about the description of the its

00:06:47,560 --> 00:06:56,400
parameter in the kernel doc and since

00:06:52,420 --> 00:06:59,170
the MM part in caramely p irst was not

00:06:56,400 --> 00:07:02,350
frequently updated most of the even

00:06:59,170 --> 00:07:11,740
existing documentation is just in a

00:07:02,350 --> 00:07:17,190
black hole and the last is the last but

00:07:11,740 --> 00:07:20,800
not least a documentation mm a well a it

00:07:17,190 --> 00:07:24,670
contains a couple of ten dozen or so

00:07:20,800 --> 00:07:27,850
documents which could be real real

00:07:24,670 --> 00:07:31,180
guides about certain feature like KCMO

00:07:27,850 --> 00:07:32,860
transfer to pages which could be Linda's

00:07:31,180 --> 00:07:35,260
response on in the mail on a mailing

00:07:32,860 --> 00:07:38,070
list about active amendment what does it

00:07:35,260 --> 00:07:40,510
mean it could be some notes that

00:07:38,070 --> 00:07:44,680
somebody in Curtin encountered the

00:07:40,510 --> 00:07:46,750
problem may a an interesting pattern of

00:07:44,680 --> 00:07:50,290
you working usage and decided to

00:07:46,750 --> 00:07:51,660
describe it there so all the kinds of

00:07:50,290 --> 00:07:55,520
things and

00:07:51,660 --> 00:07:58,530
the one of other interesting parts like

00:07:55,520 --> 00:08:03,140
Khe Sanh was the complete mix of user

00:07:58,530 --> 00:08:03,140
visible features and its internal design

00:08:04,580 --> 00:08:11,910
more interesting there are documents

00:08:07,260 --> 00:08:13,560
that are dated back 2 to 3 to 2 and they

00:08:11,910 --> 00:08:16,530
have really no idea if they're relevant

00:08:13,560 --> 00:08:20,310
yet it's still probably they don't

00:08:16,530 --> 00:08:25,680
probably they do it's really hard to

00:08:20,310 --> 00:08:30,000
tell so since then I've did a couple of

00:08:25,680 --> 00:08:31,950
things I wish I could do more but first

00:08:30,000 --> 00:08:35,640
of all I understood that covering it's

00:08:31,950 --> 00:08:38,460
all in one pass is impossible it's too

00:08:35,640 --> 00:08:41,250
much code you need really understand to

00:08:38,460 --> 00:08:44,099
document it to describe how a man works

00:08:41,250 --> 00:08:46,140
so I've started relative as I've started

00:08:44,099 --> 00:08:49,860
small with doing some mechanical changes

00:08:46,140 --> 00:08:54,510
in white space of course spelling

00:08:49,860 --> 00:08:58,800
grammar which sometimes occur not to be

00:08:54,510 --> 00:09:06,510
correct some formatting to colonel

00:08:58,800 --> 00:09:08,910
documents I've added couple and make the

00:09:06,510 --> 00:09:12,150
colonel document actually reflect what

00:09:08,910 --> 00:09:15,720
the function is doing and it's still

00:09:12,150 --> 00:09:18,420
getting get gets bricked where it gets

00:09:15,720 --> 00:09:21,680
broken from time to time the last one

00:09:18,420 --> 00:09:21,680
was like a week ago

00:09:22,340 --> 00:09:32,580
so next more mechanical things I did the

00:09:28,950 --> 00:09:35,250
rest conversion for documentation VM and

00:09:32,580 --> 00:09:37,670
I've started to split user space

00:09:35,250 --> 00:09:42,270
description from internal documentation

00:09:37,670 --> 00:09:44,910
for documents that had it and there is

00:09:42,270 --> 00:09:47,310
no documentation admin guide a main part

00:09:44,910 --> 00:09:50,880
which includes a couple of documents

00:09:47,310 --> 00:09:53,250
that described like things like describe

00:09:50,880 --> 00:09:56,220
things like okay semi-transparent huge

00:09:53,250 --> 00:09:59,199
pages and they're CFS interfaces and

00:09:56,220 --> 00:10:05,429
knobs that user can tweak to

00:09:59,199 --> 00:10:08,559
change how these subsystems behave and

00:10:05,429 --> 00:10:10,949
the last thing pretty much last thing

00:10:08,559 --> 00:10:16,029
I've done is it in that area is to link

00:10:10,949 --> 00:10:17,829
it is to make GFP description and kernel

00:10:16,029 --> 00:10:20,169
dog and link into the entire

00:10:17,829 --> 00:10:24,459
documentation so it will be visible in

00:10:20,169 --> 00:10:27,249
your browser because I know that there

00:10:24,459 --> 00:10:30,819
are many people who object rest affine

00:10:27,249 --> 00:10:34,709
and object seen HTML instead of simple

00:10:30,819 --> 00:10:38,199
text files it fit in 80 by 25 terminal

00:10:34,709 --> 00:10:44,129
but younger people tend to use browsers

00:10:38,199 --> 00:10:44,129
I don't know no names

00:10:44,699 --> 00:10:51,600
younger people tend to use web browsers

00:10:47,829 --> 00:10:55,149
and having these things visible and

00:10:51,600 --> 00:11:02,230
searchable and something that I believe

00:10:55,149 --> 00:11:05,769
is really useful and I paid it a couple

00:11:02,230 --> 00:11:08,439
of documents and for now relatively

00:11:05,769 --> 00:11:10,540
small amount but I'm going to work on it

00:11:08,439 --> 00:11:14,559
a little bit more so probably I'll see

00:11:10,540 --> 00:11:17,889
more sometime eventually so as I

00:11:14,559 --> 00:11:24,449
mentioned previously reading the CCCT

00:11:17,889 --> 00:11:28,269
and parts of VA of VM nobs

00:11:24,449 --> 00:11:30,850
Prague is somewhat not completely

00:11:28,269 --> 00:11:33,759
understandable by a new being or even

00:11:30,850 --> 00:11:35,939
system administrators that only a couple

00:11:33,759 --> 00:11:38,529
of years working with the and

00:11:35,939 --> 00:11:40,119
encountered the first time that he needs

00:11:38,529 --> 00:11:45,279
to adjust

00:11:40,119 --> 00:11:51,939
I don't know swap ability or some limits

00:11:45,279 --> 00:11:57,339
of memory oh say I don't know own score

00:11:51,939 --> 00:12:00,100
or the other one I don't remember so

00:11:57,339 --> 00:12:02,739
I've added some basic concepts of the

00:12:00,100 --> 00:12:06,970
view of Linux mmm and they are gone its

00:12:02,739 --> 00:12:10,379
uses for people to be able to start with

00:12:06,970 --> 00:12:10,379
something relatively simple

00:12:10,960 --> 00:12:17,300
there was a discussion and I believe

00:12:14,690 --> 00:12:19,850
netfilter mailing list about which exact

00:12:17,300 --> 00:12:22,250
GFP flag should be used for visual

00:12:19,850 --> 00:12:23,870
occasions and rusty mill send me an

00:12:22,250 --> 00:12:25,910
email probably we should edit to the

00:12:23,870 --> 00:12:33,680
dachshunds so we've added it to the dogs

00:12:25,910 --> 00:12:35,630
and we now have relatively nice let's

00:12:33,680 --> 00:12:37,610
say we have relatively concise

00:12:35,630 --> 00:12:40,010
description of which allocator

00:12:37,610 --> 00:12:43,490
preferable to use in which case and

00:12:40,010 --> 00:12:47,360
which GFP Flags should be used in most

00:12:43,490 --> 00:12:49,250
of the cases in which the flux probably

00:12:47,360 --> 00:12:54,080
you don't want to use these days like

00:12:49,250 --> 00:12:56,350
GFP DMA or something like that and then

00:12:54,080 --> 00:12:58,490
I've decided that the whole

00:12:56,350 --> 00:13:00,890
documentation should be built from the

00:12:58,490 --> 00:13:04,580
beginning that I have started from

00:13:00,890 --> 00:13:06,740
buta memory management and by the way it

00:13:04,580 --> 00:13:09,860
was pretty good covered with the kernel

00:13:06,740 --> 00:13:15,950
documents was butum no Boonton amendment

00:13:09,860 --> 00:13:18,680
block and I wrote a description of boot

00:13:15,950 --> 00:13:21,470
time memory management I've put it

00:13:18,680 --> 00:13:24,820
inside the source oh so it will get

00:13:21,470 --> 00:13:27,860
chance to get updated and then I've got

00:13:24,820 --> 00:13:39,590
carried away and I've removed boot mmmm

00:13:27,860 --> 00:13:42,620
no good man well it's difficult to

00:13:39,590 --> 00:13:44,650
document some fundamental subsystem

00:13:42,620 --> 00:13:48,040
first of all you get carried away

00:13:44,650 --> 00:13:50,690
writing code is usually more fun but

00:13:48,040 --> 00:13:54,890
documenting is still fun but writing

00:13:50,690 --> 00:13:56,960
code is more fun and it's very lot of

00:13:54,890 --> 00:14:00,350
information that you have to handle and

00:13:56,960 --> 00:14:06,440
you need to dig deep to produce a good

00:14:00,350 --> 00:14:08,180
documentation in and there is always a

00:14:06,440 --> 00:14:10,010
problem you wrote something and you

00:14:08,180 --> 00:14:12,140
don't like it and you want to improve it

00:14:10,010 --> 00:14:14,560
and it takes enormous amount of time too

00:14:12,140 --> 00:14:17,529
and you should know where to cut

00:14:14,560 --> 00:14:25,450
and say okay I'm saving this let John

00:14:17,529 --> 00:14:30,690
figure out how to fix it okay what we

00:14:25,450 --> 00:14:38,430
have now you can browse actually the

00:14:30,690 --> 00:14:38,430
documentation and let me see if it works

00:14:40,440 --> 00:14:46,250
probably does but just a second sorry

00:14:50,840 --> 00:14:56,110
oh really

00:14:58,980 --> 00:15:06,900
okay the admin guide has got this

00:15:04,980 --> 00:15:08,550
relatively nice descriptions of

00:15:06,900 --> 00:15:11,490
different memory management features

00:15:08,550 --> 00:15:14,640
that already were documented but nobody

00:15:11,490 --> 00:15:16,620
knew they their documentation exists so

00:15:14,640 --> 00:15:20,520
if you curious what do you need to

00:15:16,620 --> 00:15:26,100
change to make a SAM work more or less

00:15:20,520 --> 00:15:34,020
each child or to control its its

00:15:26,100 --> 00:15:37,290
parameters of sharing of the pages if

00:15:34,020 --> 00:15:39,450
you're interested in the sequences you

00:15:37,290 --> 00:15:40,050
need to do to hot plug and plug your

00:15:39,450 --> 00:15:45,120
memory

00:15:40,050 --> 00:15:48,170
it's all there the credit obviously goes

00:15:45,120 --> 00:15:51,870
to people who actually wrote it but now

00:15:48,170 --> 00:15:53,570
it can be visible from from the outside

00:15:51,870 --> 00:15:55,860
world and you don't need to download

00:15:53,570 --> 00:16:03,050
kernel32 see the documentation about

00:15:55,860 --> 00:16:03,050
these features another thing

00:16:10,329 --> 00:16:20,429
and there are a couple of documents that

00:16:13,480 --> 00:16:20,429
I think I've lost it

00:16:27,379 --> 00:16:36,569
this is more or less the whole existing

00:16:30,119 --> 00:16:38,910
reference documentation for 4mm I think

00:16:36,569 --> 00:16:46,199
it should be reorganized again because

00:16:38,910 --> 00:16:49,529
it's quite a lot of scrolling and it's

00:16:46,199 --> 00:16:51,720
also completely hodgepodge somebody

00:16:49,529 --> 00:16:54,989
wrote in the description of this and

00:16:51,720 --> 00:17:00,059
that somebody decided to link link it to

00:16:54,989 --> 00:17:05,100
the whole EP I think and that's that's

00:17:00,059 --> 00:17:09,360
what we get and it's still inserted and

00:17:05,100 --> 00:17:11,600
not really fixed and there are probably

00:17:09,360 --> 00:17:16,889
lots of document that need to be

00:17:11,600 --> 00:17:19,019
reshaped removed updated but somebody

00:17:16,889 --> 00:17:21,649
who's interested can try to read them

00:17:19,019 --> 00:17:25,709
and probably come up with the patches

00:17:21,649 --> 00:17:31,409
like this one you might think what is

00:17:25,709 --> 00:17:39,259
new you see there are some somewhere in

00:17:31,409 --> 00:17:42,750
now no it was wrong one sorry this one

00:17:39,259 --> 00:17:47,580
it's talked into to memory balancing

00:17:42,750 --> 00:17:50,419
face reclamation so it's not really up

00:17:47,580 --> 00:17:50,419
to date right

00:17:56,290 --> 00:18:06,820
oops okay so what what still needs to be

00:18:03,610 --> 00:18:10,360
done and I'm going to do some of it and

00:18:06,820 --> 00:18:13,990
I hope people will and stand up and help

00:18:10,360 --> 00:18:16,030
me at least with something so of course

00:18:13,990 --> 00:18:21,070
we should drop real word content from

00:18:16,030 --> 00:18:24,820
the existing name and documentation the

00:18:21,070 --> 00:18:28,030
part the part that more naturally belong

00:18:24,820 --> 00:18:29,950
either to API descriptions or to user

00:18:28,030 --> 00:18:36,010
visible interfaces should be moved

00:18:29,950 --> 00:18:37,750
appropriately and we should think also

00:18:36,010 --> 00:18:40,680
about how we structure for example

00:18:37,750 --> 00:18:44,740
reference documentation because it

00:18:40,680 --> 00:18:48,010
enormous size of the HTML and having it

00:18:44,740 --> 00:18:55,200
in a single file it's not really good

00:18:48,010 --> 00:18:55,200
idea and even more difficult part

00:18:55,530 --> 00:19:02,680
somebody needs to write new

00:18:57,190 --> 00:19:06,520
documentation ok and what we actually

00:19:02,680 --> 00:19:10,420
like is overview description of how VM

00:19:06,520 --> 00:19:12,700
scan works for example or what is

00:19:10,420 --> 00:19:16,510
happening when you gather a and get a

00:19:12,700 --> 00:19:17,620
page fault how it is handled how Linux

00:19:16,510 --> 00:19:19,450
allocates memory

00:19:17,620 --> 00:19:23,410
what is page Allah Carter in its

00:19:19,450 --> 00:19:25,300
internals there is a lot lot of things

00:19:23,410 --> 00:19:29,530
that can be described and I believe

00:19:25,300 --> 00:19:33,970
should be described and they keep

00:19:29,530 --> 00:19:35,920
working on it but I don't know I surely

00:19:33,970 --> 00:19:42,640
don't have enough bandwidth to cover it

00:19:35,920 --> 00:19:47,230
all because it's huge there is also

00:19:42,640 --> 00:19:51,960
reference part that preferably should be

00:19:47,230 --> 00:19:54,760
added to kernel epi descriptions

00:19:51,960 --> 00:19:57,280
apparently we should start with

00:19:54,760 --> 00:20:00,040
functions that I used more like K Malik

00:19:57,280 --> 00:20:02,950
which is actually documented but there

00:20:00,040 --> 00:20:05,590
are also other parts of mm subsystems

00:20:02,950 --> 00:20:07,540
that are frequently used but they don't

00:20:05,590 --> 00:20:14,290
have any documentation and people

00:20:07,540 --> 00:20:17,530
sometimes use it strongly and the vision

00:20:14,290 --> 00:20:19,720
is to get what was understanding the

00:20:17,530 --> 00:20:24,040
Linux virtual memory management 15 years

00:20:19,720 --> 00:20:27,580
ago but updated and in HTML format

00:20:24,040 --> 00:20:30,670
inside the trees that we can it visible

00:20:27,580 --> 00:20:35,200
everywhere and updated is the most

00:20:30,670 --> 00:20:38,410
difficult part right and something that

00:20:35,200 --> 00:20:46,650
is relevant to documentation in general

00:20:38,410 --> 00:20:50,170
not only to memory management for now we

00:20:46,650 --> 00:20:53,290
don't look at the documentation part of

00:20:50,170 --> 00:20:55,930
the patches so probably it would be good

00:20:53,290 --> 00:20:57,730
idea to cheat to teach in check patch PL

00:20:55,930 --> 00:21:00,160
to look at the documentation part at

00:20:57,730 --> 00:21:02,590
least to have a function parameters

00:21:00,160 --> 00:21:06,700
consistent in the commentation and the

00:21:02,590 --> 00:21:10,840
into the function declaration ask people

00:21:06,700 --> 00:21:14,730
to run kernel doc or make w equals 1 and

00:21:10,840 --> 00:21:20,350
also it is helpful because you see oh

00:21:14,730 --> 00:21:23,950
warnings errors and other things that

00:21:20,350 --> 00:21:28,180
could be done is adding make each tml

00:21:23,950 --> 00:21:30,010
dogs as one of okie p targets so you can

00:21:28,180 --> 00:21:31,420
get an email I love your patches sorry

00:21:30,010 --> 00:21:33,700
thank you for the patch perhaps

00:21:31,420 --> 00:21:35,890
something to improve and the warnings

00:21:33,700 --> 00:21:40,000
that came out from the make HTML dogs

00:21:35,890 --> 00:21:43,630
and for people who are reviewing patches

00:21:40,000 --> 00:21:47,490
please okay the dogs part at least

00:21:43,630 --> 00:21:51,060
sometimes I know it's difficult but

00:21:47,490 --> 00:21:51,060
somebody has to do it

00:21:56,830 --> 00:22:09,860
[Applause]

00:22:03,490 --> 00:22:11,300
questions comments well first thing I

00:22:09,860 --> 00:22:13,370
wanna say is thanks very much for doing

00:22:11,300 --> 00:22:15,080
all of this work it's exactly the sort

00:22:13,370 --> 00:22:18,470
of thing I've been hoping people would

00:22:15,080 --> 00:22:20,360
do and it's much appreciated Thanks well

00:22:18,470 --> 00:22:22,370
done and so along those lines I wanted

00:22:20,360 --> 00:22:24,950
to ask what do you think we could do to

00:22:22,370 --> 00:22:26,360
further encourage more people to work on

00:22:24,950 --> 00:22:28,460
the docks what would make it more easy

00:22:26,360 --> 00:22:38,680
or more interesting or more fun or more

00:22:28,460 --> 00:22:38,680
rewarding I don't know I don't know well

00:22:40,210 --> 00:22:47,630
as maintainer of if went a nurse would

00:22:45,410 --> 00:22:49,730
care more about the commutation and when

00:22:47,630 --> 00:22:52,730
somebody sends a relatively large

00:22:49,730 --> 00:22:55,280
feature or something like that people

00:22:52,730 --> 00:22:59,150
would ask for documentation it will make

00:22:55,280 --> 00:23:01,570
it more mandatory at least more fun it's

00:22:59,150 --> 00:23:06,519
personal

00:23:01,570 --> 00:23:14,169
and I don't see where you can encourage

00:23:06,519 --> 00:23:16,090
people to document unless there is an

00:23:14,169 --> 00:23:18,070
option if you document something you can

00:23:16,090 --> 00:23:28,330
write an lwn article and then you get

00:23:18,070 --> 00:23:31,720
several box I was just thinking maybe if

00:23:28,330 --> 00:23:33,759
we had a list of wish list of things we

00:23:31,720 --> 00:23:36,999
want to document it I don't hear so much

00:23:33,759 --> 00:23:38,979
junk can you speak up I was thinking if

00:23:36,999 --> 00:23:41,049
if there were a wish list of things we

00:23:38,979 --> 00:23:44,019
wanted documented you know maybe like

00:23:41,049 --> 00:23:46,450
everything no no just something that

00:23:44,019 --> 00:23:48,070
would people that are just looking at

00:23:46,450 --> 00:23:49,869
things might look at it and someone

00:23:48,070 --> 00:23:55,029
might get inspired to document something

00:23:49,869 --> 00:23:58,509
so for instance user visible interface

00:23:55,029 --> 00:24:02,499
I mean user visible from mm to other

00:23:58,509 --> 00:24:04,440
kernel okay like a lock page is not

00:24:02,499 --> 00:24:08,289
documented okay

00:24:04,440 --> 00:24:14,470
so probably we want it documented right

00:24:08,289 --> 00:24:24,700
and VM scanned does lots of things it's

00:24:14,470 --> 00:24:26,649
not described anywhere you know how you

00:24:24,700 --> 00:24:30,849
have insecurity you have bug bounties

00:24:26,649 --> 00:24:33,309
for that companies offer bugs so we

00:24:30,849 --> 00:24:35,019
could all get together and put in some

00:24:33,309 --> 00:24:38,259
money and there could be a documentation

00:24:35,019 --> 00:24:43,629
bounty and so whoever goes and documents

00:24:38,259 --> 00:24:52,299
a system can win the bounty if only we

00:24:43,629 --> 00:24:54,700
had some kind of foundation so something

00:24:52,299 --> 00:24:56,049
that worked for me is always the commit

00:24:54,700 --> 00:24:59,470
message and that documents within the

00:24:56,049 --> 00:25:01,239
code that ripple award after along with

00:24:59,470 --> 00:25:05,710
the blogs that you talked about it's

00:25:01,239 --> 00:25:07,929
also good for me and I I use the

00:25:05,710 --> 00:25:10,570
document folder only when there is

00:25:07,929 --> 00:25:12,820
really deep understanding it needs to be

00:25:10,570 --> 00:25:14,460
done but mostly code documenting in the

00:25:12,820 --> 00:25:16,410
code and commenting in the code

00:25:14,460 --> 00:25:26,190
Lord in case of referring things then in

00:25:16,410 --> 00:25:32,640
their other thoughts on what we should

00:25:26,190 --> 00:25:33,810
be doing so one thing is obviously you

00:25:32,640 --> 00:25:35,640
know getting people to collaborate

00:25:33,810 --> 00:25:36,330
documentation but you also have to

00:25:35,640 --> 00:25:39,930
consider

00:25:36,330 --> 00:25:41,610
I mean gaining that documentation one of

00:25:39,930 --> 00:25:43,380
the problems about writing documents for

00:25:41,610 --> 00:25:44,670
kernel code is that nobody likes it

00:25:43,380 --> 00:25:47,250
because it changes too fast

00:25:44,670 --> 00:25:48,780
so while you need people documenting

00:25:47,250 --> 00:25:51,660
stuff you also need people making sure

00:25:48,780 --> 00:25:55,800
that things are still up to date you

00:25:51,660 --> 00:25:56,550
need proofreading etc well it's up to

00:25:55,800 --> 00:25:59,790
reviewers

00:25:56,550 --> 00:26:02,160
well yeah but like it's up to

00:25:59,790 --> 00:26:04,350
contributors and your viewers if you

00:26:02,160 --> 00:26:08,520
reviewers pay more attention to the

00:26:04,350 --> 00:26:11,310
dog's part it gets updated if you keep

00:26:08,520 --> 00:26:14,100
the documentation inside the source

00:26:11,310 --> 00:26:16,950
files and you add the dog section at the

00:26:14,100 --> 00:26:20,940
beginning chances it will get updated I

00:26:16,950 --> 00:26:23,310
wrote for locking various documentation

00:26:20,940 --> 00:26:25,320
a couple of years ago and I got tired of

00:26:23,310 --> 00:26:27,930
updating it because it changes changed

00:26:25,320 --> 00:26:29,310
too much and now it's like stale and it

00:26:27,930 --> 00:26:31,500
they could probably be even removed

00:26:29,310 --> 00:26:34,160
that's why I'm concerned about like what

00:26:31,500 --> 00:26:38,130
would happen with this that's two cents

00:26:34,160 --> 00:26:43,320
well these days the mem doesn't seem to

00:26:38,130 --> 00:26:47,780
change that fast I can't say about other

00:26:43,320 --> 00:26:53,210
subsystems but coram m is more or less

00:26:47,780 --> 00:26:59,810
stable it doesn't get revolutionary

00:26:53,210 --> 00:26:59,810
changes revolutionary changes so I

00:26:59,840 --> 00:27:04,710
believe we can have updated

00:27:02,730 --> 00:27:10,770
documentation for memory management at

00:27:04,710 --> 00:27:13,970
least for the core parts I can say about

00:27:10,770 --> 00:27:13,970
other subsystem

00:27:18,920 --> 00:27:24,420
any thoughts

00:27:21,600 --> 00:27:27,870
volunteers

00:27:24,420 --> 00:27:30,330
I I ever thought walk I mean we've got

00:27:27,870 --> 00:27:32,280
served what 100 or so people in the room

00:27:30,330 --> 00:27:33,870
if everyone commits to writing just one

00:27:32,280 --> 00:27:36,120
function document that's next 100

00:27:33,870 --> 00:27:37,890
functions of the god document says come

00:27:36,120 --> 00:27:41,480
on people send patches John takes

00:27:37,890 --> 00:27:44,300
patches he's really polite about it -

00:27:41,480 --> 00:27:52,020
here we are

00:27:44,300 --> 00:28:03,060
John D Day remember you did the document

00:27:52,020 --> 00:28:04,560
about the get user page to be fair I'll

00:28:03,060 --> 00:28:06,090
accept the logic of if everyone

00:28:04,560 --> 00:28:07,500
documented one function things to be

00:28:06,090 --> 00:28:09,180
granted one of the biggest difficulties

00:28:07,500 --> 00:28:10,860
in understanding anymore for all is its

00:28:09,180 --> 00:28:12,570
emergent behavior this would be

00:28:10,860 --> 00:28:13,980
particularly problematic with VM scan

00:28:12,570 --> 00:28:16,170
because it's not what the function is

00:28:13,980 --> 00:28:17,880
doing its how would they hurt behaves in

00:28:16,170 --> 00:28:19,770
combinations of several different events

00:28:17,880 --> 00:28:21,210
it's not an idea here nor there but it's

00:28:19,770 --> 00:28:24,420
not just about documented function the

00:28:21,210 --> 00:28:28,680
emergent behavior is so much so much

00:28:24,420 --> 00:28:29,940
critical and another one a couple of

00:28:28,680 --> 00:28:31,830
things have been enforced in terms of

00:28:29,940 --> 00:28:33,030
documentation and DM subsystem and it's

00:28:31,830 --> 00:28:34,800
mostly been driven by the maintainer

00:28:33,030 --> 00:28:36,450
using visible effective patches as

00:28:34,800 --> 00:28:37,890
nearly always has to be described in the

00:28:36,450 --> 00:28:39,990
changes are very rare that there's

00:28:37,890 --> 00:28:42,690
exceptions to it and it's the same for

00:28:39,990 --> 00:28:45,120
any of the province ESS sysctl

00:28:42,690 --> 00:28:47,040
once there always end up with

00:28:45,120 --> 00:28:49,110
documentation because the maintainer

00:28:47,040 --> 00:28:50,580
mandate errs now because of the

00:28:49,110 --> 00:28:52,590
difficulty of documenting in them in

00:28:50,580 --> 00:28:53,880
general the history has been that the

00:28:52,590 --> 00:28:56,790
change logs tend to be extremely

00:28:53,880 --> 00:28:58,890
descriptive and it's one of the reasons

00:28:56,790 --> 00:29:01,200
why a min patch to do cleanups like

00:28:58,890 --> 00:29:02,430
white space our grammar Corrections

00:29:01,200 --> 00:29:05,040
right as the rest of us tend to get

00:29:02,430 --> 00:29:07,890
rejected because to make the use of get

00:29:05,040 --> 00:29:09,540
blame harder because at least for me and

00:29:07,890 --> 00:29:11,520
I know for a couple of other people who

00:29:09,540 --> 00:29:14,220
involved in the mmm in the past they've

00:29:11,520 --> 00:29:15,600
depended very heavily on get plain so

00:29:14,220 --> 00:29:18,030
this kind of the case we've reached a

00:29:15,600 --> 00:29:19,740
point where the core is relatively

00:29:18,030 --> 00:29:21,300
stable and at least the last six months

00:29:19,740 --> 00:29:23,370
venom activity have all been at the

00:29:21,300 --> 00:29:25,710
edges you might be able to get some

00:29:23,370 --> 00:29:29,340
traction about if they if you ask the

00:29:25,710 --> 00:29:31,140
maintainer to push people to put so many

00:29:29,340 --> 00:29:32,850
information that's in change lots into a

00:29:31,140 --> 00:29:34,660
documentation file as well and not just

00:29:32,850 --> 00:29:37,000
rely on it

00:29:34,660 --> 00:29:39,040
but I know every time that I have to

00:29:37,000 --> 00:29:39,580
revisit some party mmm understand what's

00:29:39,040 --> 00:29:41,980
going on

00:29:39,580 --> 00:29:44,530
it's get blame I'm relying on 100% at a

00:29:41,980 --> 00:29:47,530
time I didn't even know that document

00:29:44,530 --> 00:29:48,880
into user administration guide exists

00:29:47,530 --> 00:29:51,370
this never occurred to me they have a

00:29:48,880 --> 00:29:52,690
look first so you're saying we should

00:29:51,370 --> 00:29:54,840
oughta make it create blame

00:29:52,690 --> 00:29:58,540
automatically generate the documentation

00:29:54,840 --> 00:30:00,250
god no that would fail the emergent

00:29:58,540 --> 00:30:02,050
behavior test because the get commit

00:30:00,250 --> 00:30:03,520
from like five years ago may be the last

00:30:02,050 --> 00:30:05,530
time that code changed it doesn't mean

00:30:03,520 --> 00:30:08,950
that it's still relevant it's it's it's

00:30:05,530 --> 00:30:10,540
it's an orchid it's a historical to that

00:30:08,950 --> 00:30:12,460
is extremely useful for understanding

00:30:10,540 --> 00:30:13,990
why we got to a particular place well

00:30:12,460 --> 00:30:16,030
going forward it'll be something that

00:30:13,990 --> 00:30:17,830
could be enforced better well probably

00:30:16,030 --> 00:30:20,500
there is another talk now with the

00:30:17,830 --> 00:30:22,810
kernel track summit about AI building

00:30:20,500 --> 00:30:24,640
stable kernels we can build the AI to

00:30:22,810 --> 00:30:30,250
build the commentation from the history

00:30:24,640 --> 00:30:32,170
I think people have enough personal

00:30:30,250 --> 00:30:34,120
strong views on the use of machine

00:30:32,170 --> 00:30:35,350
learning for cherry-picking stable

00:30:34,120 --> 00:30:38,440
patches that we probably don't to get in

00:30:35,350 --> 00:30:40,000
Star Trek at least they would be more

00:30:38,440 --> 00:30:46,420
motivated to generate documentation if

00:30:40,000 --> 00:30:49,630
that was the alternative right other

00:30:46,420 --> 00:30:51,780
questions if not let's thank the speaker

00:30:49,630 --> 00:30:51,780
and

00:30:51,940 --> 00:30:55,259

YouTube URL: https://www.youtube.com/watch?v=1-qtYAtCGCU


