Title: LPC2019 - Life at a Networking Vendor -- Keeping up with the Joneses
Publication date: 2019-11-18
Playlist: LPC2019 - Networking Summit Track
Description: 
	Life at a Networking Vendor -- Keeping up with the Joneses

Speaker
 Andy Gospodarek (Broadcom)

Description
Working for a networking hardware vendor can be an extremely rewarding experience for a kernel developer. The rate at which new features are accepted in the kernel also provides lots of motivation to develop new features that showcase hardware capabilities. This could be done by adding new support for dataplane offloads via cls flower, netfilter, or switchdev (if we still think it exists!). In-driver support for pre-SKB packet processing via XDP and AF_XDP also provide a chance for developers to search for new software optimizations in their driver receive and transmit path.

In addition to thinking about what is happening upstream, developers at hardware vendors regularly find themselves managing internal and external expectations from those responsible for developing features that are not always exclusive to the Linux kernel. This could range from frameworks like DPDK and VPP that run on Linux or completely different OSes/stacks to functionality that is available without software interaction.

There is no quicker way to develop new features and resolve issues than to have direct contact with hardware and firmware developers. The goal of this talk will be to share some experiences balancing the expectations of customers and partners along with those of the community.
Captions: 
	00:00:00,770 --> 00:00:03,050
- Seems like maybe not, all right, I'm Andy Gospodarek.

00:00:03,050 --> 00:00:05,560
We'll talk a today a little bit about what it's like

00:00:05,560 --> 00:00:09,079
to work at hardware vendor, networking hardware vendor.

00:00:09,079 --> 00:00:12,880
Sort of tagline here of Keeping Up with the Joneses,

00:00:12,880 --> 00:00:14,920
I think that's probably a great description

00:00:14,920 --> 00:00:17,690
of what it's like to be there sometimes.

00:00:17,690 --> 00:00:20,330
So, I work for Broadcom and I work in what's called

00:00:20,330 --> 00:00:22,993
the Compute and Connectivity division or CCX.

00:00:23,950 --> 00:00:25,870
So, I realized after I submitted this talk

00:00:25,870 --> 00:00:29,610
and it was accepted, thanks to the team that reviewed this,

00:00:29,610 --> 00:00:31,810
that I should probably start this off by explaining

00:00:31,810 --> 00:00:34,050
what keeping up with the Joneses means because it's probably

00:00:34,050 --> 00:00:38,710
a fairly American phrase or maybe just English speaking but,

00:00:38,710 --> 00:00:41,940
basically, the notion is that you're spending a lot of time

00:00:41,940 --> 00:00:46,410
comparing yourself to your neighbors and in the case,

00:00:46,410 --> 00:00:50,547
probably, in the excessive consumption culture

00:00:52,010 --> 00:00:54,730
that we live in in the United States sometimes, the idea of,

00:00:54,730 --> 00:00:56,940
oh, my neighbor has a good car, I gotta have a good car,

00:00:56,940 --> 00:00:59,030
my neighbor has a nice lawn, I gotta do that.

00:00:59,030 --> 00:01:00,340
So you're constantly spending your time

00:01:00,340 --> 00:01:02,384
trying keep up with them.

00:01:02,384 --> 00:01:03,217
So, in this same kind of context

00:01:03,217 --> 00:01:05,620
for networking, the idea is that, well, my hardware

00:01:05,620 --> 00:01:07,370
is just as good as someone else's hardware

00:01:07,370 --> 00:01:09,930
or my driver is just as good as someone else's driver,

00:01:09,930 --> 00:01:13,260
or whatever and every time a new piece of technology

00:01:13,260 --> 00:01:15,750
comes out, you know, we just spent 90 minutes hearing about

00:01:15,750 --> 00:01:20,230
XTP and it was a great talk but you start to realize,

00:01:20,230 --> 00:01:22,400
there are a lot of things that are going to require

00:01:22,400 --> 00:01:24,730
a tightly coupled integration between not only

00:01:24,730 --> 00:01:29,360
the Kernel stack and BPF calls but, ultimately,

00:01:29,360 --> 00:01:30,193
drives as well.

00:01:30,193 --> 00:01:33,036
So, I think that this kind of summarizes it up.

00:01:33,036 --> 00:01:37,170
So, hopefully, that's now clear to those who didn't know it.

00:01:37,170 --> 00:01:41,710
So, as you might expect, Broadcom makes lots of different

00:01:41,710 --> 00:01:43,090
networking hardware.

00:01:43,090 --> 00:01:47,910
So, this talk is not about wireless, so, if you want

00:01:47,910 --> 00:01:51,010
to get mad, you can-- (laughs)

00:01:51,010 --> 00:01:54,470
And I know that Broadcom wireless is, at times,

00:01:54,470 --> 00:01:58,750
for this community, a troubling situation, so I like

00:01:58,750 --> 00:02:01,909
to pass the buck and say I don't work for that division.

00:02:01,909 --> 00:02:03,393
(laughs)

00:02:03,393 --> 00:02:05,520
So, apologies to those that do work for the division

00:02:05,520 --> 00:02:07,543
that may be watching this later on YouTube.

00:02:08,543 --> 00:02:09,376
(chuckles)

00:02:09,376 --> 00:02:11,780
Also, this talk is not about switching hardware.

00:02:11,780 --> 00:02:14,480
I also don't work for that division, so, lucky me.

00:02:14,480 --> 00:02:16,900
Although, they make some killer products,

00:02:16,900 --> 00:02:21,420
they're also not quite in the same space in terms of

00:02:21,420 --> 00:02:24,000
having Kernel driver to support the offload

00:02:24,000 --> 00:02:26,270
of switching and routing.

00:02:26,270 --> 00:02:27,750
So, not about that.

00:02:27,750 --> 00:02:29,650
You can feel free to pepper me with questions

00:02:29,650 --> 00:02:32,780
but I will just say, I don't work in that division.

00:02:32,780 --> 00:02:35,420
So, we're going to talk about NIC hardware today or,

00:02:35,420 --> 00:02:37,330
as some might say, we just end up talking about

00:02:37,330 --> 00:02:39,580
controller hardware; that's one of the things used

00:02:39,580 --> 00:02:41,163
most commonly internally.

00:02:42,293 --> 00:02:43,630
So, we're going to touch on those issues

00:02:43,630 --> 00:02:45,540
and all the things we keep up with.

00:02:45,540 --> 00:02:48,960
So, unsurprisingly, our goal is to sell as many NICs

00:02:48,960 --> 00:02:51,740
as possible and that's mostly so I can

00:02:51,740 --> 00:02:53,033
stay gainfully employed.

00:02:54,010 --> 00:02:55,550
And all the other people in my division.

00:02:55,550 --> 00:02:58,480
But this is not common, this is the case for

00:02:59,520 --> 00:03:02,850
every single vendor, they want to sell as many as possible.

00:03:02,850 --> 00:03:05,280
Unless they have some crazy, crazy wish.

00:03:05,280 --> 00:03:08,980
So, and I think the key is if you want to sell

00:03:08,980 --> 00:03:13,060
the most hardware, you might, might need to build

00:03:13,060 --> 00:03:14,033
the best hardware.

00:03:15,430 --> 00:03:17,670
Might and best, both in italics because those are both

00:03:17,670 --> 00:03:22,110
pretty important phrases, I think, in this sentence.

00:03:22,110 --> 00:03:24,960
Best has a variety of meanings, so we'll talk about that.

00:03:25,910 --> 00:03:27,806
Let's define it.

00:03:27,806 --> 00:03:29,910
All right, just to get people moving because I'm sure that

00:03:29,910 --> 00:03:32,070
we're halfway through the conference or not quite

00:03:32,070 --> 00:03:34,210
and people are, as Dave mentioned earlier,

00:03:34,210 --> 00:03:36,580
probably feeling good from yesterday evening.

00:03:36,580 --> 00:03:39,304
So, let's define best, sorry, I'm gonna make people, like,

00:03:39,304 --> 00:03:40,778
I'm won't make you stand up but I'll make you

00:03:40,778 --> 00:03:41,903
show your hands just for fun.

00:03:42,977 --> 00:03:45,160
So, would having, be able to pass the most number

00:03:45,160 --> 00:03:46,770
of packets per second, would that be an important

00:03:46,770 --> 00:03:48,680
decision for you, if you were buying?

00:03:48,680 --> 00:03:50,440
Okay, for some people, there we go, all right,

00:03:50,440 --> 00:03:52,270
good, good, some participation.

00:03:52,270 --> 00:03:53,790
All right, how about lower power consumption,

00:03:53,790 --> 00:03:56,120
anyone care about power? (laughs)

00:03:56,120 --> 00:03:58,200
Not really, right; maybe, no.

00:03:58,200 --> 00:03:59,100
Who cares? (laughs)

00:03:59,100 --> 00:04:00,520
We've got lots of power in the data center,

00:04:00,520 --> 00:04:02,770
it's not even the most expensive thing there, is it?

00:04:02,770 --> 00:04:05,010
All right, lowest price, who cares about price?

00:04:05,010 --> 00:04:06,517
Anybody care about price?

00:04:06,517 --> 00:04:07,950
No, we got tons of money?

00:04:07,950 --> 00:04:09,420
No, okay, all right. (laughs)

00:04:09,420 --> 00:04:12,280
Or do you just get them free from people all the time,

00:04:12,280 --> 00:04:13,830
so you don't care about cost.

00:04:13,830 --> 00:04:15,506
That's right, exactly.

00:04:15,506 --> 00:04:16,339
- [Dave] How much does it cost?

00:04:16,339 --> 00:04:19,183
- Yeah, the advantage of the OS vendors.

00:04:19,183 --> 00:04:20,340
All right, what about the most offloads,

00:04:20,340 --> 00:04:22,560
who would care about lots of offloads?

00:04:22,560 --> 00:04:24,570
Maybe, a couple hands, okay.

00:04:24,570 --> 00:04:26,300
All right, Dave cares, that's good.

00:04:26,300 --> 00:04:28,604
What about least offloads, (laughs)

00:04:28,604 --> 00:04:30,180
who would want the least offloads?

00:04:30,180 --> 00:04:32,250
Okay, this is, strangely enough,

00:04:32,250 --> 00:04:34,990
this is a pretty important thing that people care about.

00:04:34,990 --> 00:04:38,030
I don't want to pay for things I'm not using.

00:04:38,030 --> 00:04:41,002
- [Dave] Everyone means van der Rohe's less is more.

00:04:41,002 --> 00:04:41,835
(laughs) - That's right.

00:04:41,835 --> 00:04:44,370
So, and then, those of you that have seen me

00:04:45,340 --> 00:04:47,190
speak at any conference lately, you'll know I'm big on

00:04:47,190 --> 00:04:49,390
this whole Smart NIC concept and the idea of having some

00:04:49,390 --> 00:04:51,530
ARM cores on your NIC to do cool things,

00:04:51,530 --> 00:04:53,103
at least I think they're cool.

00:04:53,103 --> 00:04:55,310
So what about the most ARM or maybe even RISC five cores,

00:04:55,310 --> 00:04:56,277
who cares about that?

00:04:56,277 --> 00:04:58,077
Oh, the guy who works for ARM cares.

00:04:58,918 --> 00:05:01,750
(laughs)

00:05:01,750 --> 00:05:03,850
So, then we've got, what about the most programmable

00:05:03,850 --> 00:05:07,060
FPGA or NPU for your super programmable data plan?

00:05:07,060 --> 00:05:09,558
We've got a couple of people that probably care about that.

00:05:09,558 --> 00:05:10,813
You should see it-- - Does it run--

00:05:10,813 --> 00:05:11,646
- Huh?

00:05:11,646 --> 00:05:12,940
- Does it run the BPF? - It could, so, yeah.

00:05:12,940 --> 00:05:14,610
- I think a couple vendors, I should see a couple

00:05:14,610 --> 00:05:15,990
vendor hands go up, yeah, there we go.

00:05:15,990 --> 00:05:17,510
Thank you, Simon.

00:05:17,510 --> 00:05:21,210
But you also might need to make the best firmware

00:05:21,210 --> 00:05:23,240
and drivers and I know firmware's a bad word.

00:05:23,240 --> 00:05:24,750
Everybody say boo.

00:05:24,750 --> 00:05:26,220
Come on, boo. - Boo.

00:05:26,220 --> 00:05:28,692
- [Dave] If it's open source, it's okay.

00:05:28,692 --> 00:05:30,500
- Yeah, okay, all right. (laughs)

00:05:30,500 --> 00:05:32,410
But one of the things that's kinda crazy

00:05:32,410 --> 00:05:34,660
in this current generation of NICs, pretty much

00:05:34,660 --> 00:05:38,070
anything that's 10 gig and faster, it's all got firmware.

00:05:38,070 --> 00:05:41,540
It used to be a feeling like, I think, yeah,

00:05:41,540 --> 00:05:44,470
kinda, 10 gig and before, there maybe wasn't much firmware

00:05:44,470 --> 00:05:47,210
or maybe in some cases, none at all that we knew about.

00:05:47,210 --> 00:05:49,920
But everybody's got it at this point and whether they have

00:05:49,920 --> 00:05:53,290
big, powerful ARM cores that begin with an A

00:05:53,290 --> 00:05:55,670
or some of the ones that begin with an M that are

00:05:55,670 --> 00:05:57,360
a little bit smaller doing just a little bit of work,

00:05:57,360 --> 00:06:00,530
they've all got firmware, so, kind of a bummer.

00:06:00,530 --> 00:06:02,670
So, as we sort of saw the smattering of hands

00:06:02,670 --> 00:06:04,960
was a little bit different, the challenge we have is,

00:06:04,960 --> 00:06:08,160
at best, is different for, really, almost every customer.

00:06:08,160 --> 00:06:11,130
Or, in the case of a lot of people who don't know

00:06:11,130 --> 00:06:14,190
how much they cost because they don't buy them, any user.

00:06:14,190 --> 00:06:19,020
So, that's, and often, right, as people who are responsible

00:06:19,020 --> 00:06:23,040
for maintaining a system that has these cards in them,

00:06:23,040 --> 00:06:25,770
you might have been able to participate in the buying

00:06:25,770 --> 00:06:28,913
but maybe not, they might have been bought for you.

00:06:28,913 --> 00:06:30,770
I talk to people all the time, and I'm sure others

00:06:30,770 --> 00:06:34,310
at hardware vendors do too, that they're using your NIC

00:06:34,310 --> 00:06:37,770
because it came by default with whoever sells

00:06:37,770 --> 00:06:41,070
the system you bought or it was the best value or whatever

00:06:41,070 --> 00:06:44,440
but some purchasing person determines what you get,

00:06:44,440 --> 00:06:47,830
so best is different for almost everybody.

00:06:47,830 --> 00:06:51,210
So, pretty factually accurate.

00:06:51,210 --> 00:06:53,640
You're sending sort of standard, regular old

00:06:53,640 --> 00:06:57,860
non jumbo framed MTU byte packets, 1500 byte packets,

00:06:57,860 --> 00:07:00,530
almost any NIC that's out there can send and receive

00:07:00,530 --> 00:07:02,066
at line rate today.

00:07:02,066 --> 00:07:04,390
So, whether that's 10, 25, 40, 50, to 100 gig,

00:07:04,390 --> 00:07:05,970
that's a fact, okay.

00:07:05,970 --> 00:07:07,900
So when we start to think about how many packets per second

00:07:07,900 --> 00:07:11,420
you can handle, at 1500 bytes, even 100 gigs

00:07:11,420 --> 00:07:12,773
is not that many packets.

00:07:13,870 --> 00:07:16,660
But some can handle line rate at smaller

00:07:16,660 --> 00:07:19,040
packet sizes, obviously.

00:07:19,040 --> 00:07:21,413
And this runs across the board.

00:07:22,854 --> 00:07:24,910
I'm sure many of the other people that are hardware vendors

00:07:24,910 --> 00:07:27,810
know all the numbers for their own cards and other people.

00:07:29,090 --> 00:07:31,440
So if you're thinking about what to buy,

00:07:31,440 --> 00:07:33,360
you might need to do something that can do line rate

00:07:33,360 --> 00:07:35,600
at 64 byte packets.

00:07:35,600 --> 00:07:37,520
If that's what you need, if you're just processing acts

00:07:37,520 --> 00:07:39,560
or doing something like that, you gotta find a NIC

00:07:39,560 --> 00:07:42,070
that can handle it, it's pretty important.

00:07:42,070 --> 00:07:44,470
It might fall into the category of best for you.

00:07:45,780 --> 00:07:49,063
But, at the same time, if you don't need, let me.

00:07:50,151 --> 00:07:52,350
At the same time, if you don't need to process nothing

00:07:52,350 --> 00:07:54,930
but 64 byte packets, maybe you're okay if line rates

00:07:54,930 --> 00:07:59,490
are suitable at 300 or iNIC's distribution of packets

00:07:59,490 --> 00:08:02,750
which is a couple 64s, a couple, one or two big ones,

00:08:02,750 --> 00:08:04,640
and some in the middle, I think it works out to an average

00:08:04,640 --> 00:08:05,973
of about 320.

00:08:08,020 --> 00:08:09,700
So it's interesting to think about, you know,

00:08:09,700 --> 00:08:14,700
not everything, we often get involved with customers

00:08:16,350 --> 00:08:18,230
who, they'll come in hard and they'll say,

00:08:18,230 --> 00:08:20,540
we need to handle this many million packets per second,

00:08:20,540 --> 00:08:23,380
no questions asked, your NIC hardware must be able to do it.

00:08:23,380 --> 00:08:26,040
And then, you'll go to another conference or another event

00:08:26,040 --> 00:08:29,120
and someone is really excited that, with this certain piece

00:08:29,120 --> 00:08:31,323
of software on top a NIC, they can do, like,

00:08:32,951 --> 00:08:36,190
six gigabytes and they're just super excited about it.

00:08:36,190 --> 00:08:38,830
I'm like, okay, these people are the ones we should be

00:08:38,830 --> 00:08:42,520
selling this NIC to and the people that want to do

00:08:42,520 --> 00:08:45,147
50 million, we sell them this other one.

00:08:45,147 --> 00:08:47,336
And so, it's important to think about that,

00:08:47,336 --> 00:08:49,010
that one size doesn't fit all.

00:08:49,010 --> 00:08:51,660
All right, on the other side, individual component costs

00:08:51,660 --> 00:08:55,330
are important, so, if a NIC can do offloads,

00:08:55,330 --> 00:08:58,400
like if the NIC that Dave wants that does tons of offloads,

00:08:58,400 --> 00:09:01,080
sorry it's not the one you want, if can offload work

00:09:01,080 --> 00:09:03,130
for server cores, then maybe you can justify

00:09:03,130 --> 00:09:04,383
a higher price for it.

00:09:05,290 --> 00:09:06,123
And I'm not saying you should charge more

00:09:06,123 --> 00:09:08,110
just because you can, but may be it does cost

00:09:08,110 --> 00:09:10,030
a little bit more to build that NIC.

00:09:10,030 --> 00:09:13,480
And what you find when you say it justifies a higher price,

00:09:13,480 --> 00:09:15,540
'cause spending actually more money on that NIC,

00:09:15,540 --> 00:09:17,450
might actually save you money in other places.

00:09:17,450 --> 00:09:20,890
So, let's take, for example, you're able to save four cores,

00:09:20,890 --> 00:09:23,330
well, I wasn't going to put up a chart like

00:09:23,330 --> 00:09:28,330
Intel processor prices but go out to arc that Intel.com

00:09:29,050 --> 00:09:32,540
sometime, take a look, and look at the price difference

00:09:32,540 --> 00:09:36,080
between a NIC when you just jump by four cores,

00:09:36,080 --> 00:09:38,840
especially as you get a higher density core per socket,

00:09:38,840 --> 00:09:43,340
what you actually find is that it doesn't scale linearly.

00:09:43,340 --> 00:09:48,340
So, if you could find a way to buy a 16 core,

00:09:50,480 --> 00:09:53,010
yeah, 16 core socket instead of a 20 core,

00:09:53,010 --> 00:09:56,135
you'll find that you'd save some pretty significant money.

00:09:56,135 --> 00:09:58,190
And maybe that's part of your overall system design,

00:09:58,190 --> 00:10:01,323
maybe it's not but it's important to think about.

00:10:02,630 --> 00:10:04,571
This gets down to our price.

00:10:04,571 --> 00:10:06,733
Maybe Yesper doesn't care about price but it's important.

00:10:08,090 --> 00:10:09,622
All right, so now let's talk a little bit

00:10:09,622 --> 00:10:10,560
more about offloads.

00:10:10,560 --> 00:10:14,530
So, fixed function devices have evolved

00:10:14,530 --> 00:10:16,960
with some pretty significant offloads over time.

00:10:16,960 --> 00:10:20,150
So we started with just Checksum Offload and TSO

00:10:20,150 --> 00:10:25,150
and who remembers being around long enough or,

00:10:26,670 --> 00:10:29,440
and that's a loaded question, but what was the most common

00:10:29,440 --> 00:10:32,363
thing people would say, maybe, about TSO 15 years ago?

00:10:33,220 --> 00:10:34,053
Anybody?

00:10:34,940 --> 00:10:38,720
If a call came in to device that had TSO

00:10:38,720 --> 00:10:40,430
and it wasn't working, what was almost always

00:10:40,430 --> 00:10:42,535
the common thing? - Turn it off.

00:10:42,535 --> 00:10:44,080
- Turn it off, right.

00:10:44,080 --> 00:10:45,510
I mean, I don't know how many times I feel like I, either,

00:10:45,510 --> 00:10:48,276
heard that advice or offered that advice.

00:10:48,276 --> 00:10:49,630
And times have changed a little bit and these aren't just

00:10:49,630 --> 00:10:51,680
the only two offloads we have now.

00:10:51,680 --> 00:10:55,320
So, as we start to look at what we've scaled out to

00:10:55,320 --> 00:10:57,280
in terms of hardware support and driver support

00:10:57,280 --> 00:11:00,530
to go with it, you know, we've got all sorts of

00:11:00,530 --> 00:11:04,010
different segmentation offload or receive offload

00:11:04,010 --> 00:11:08,410
or even hardware GRO that, at least, one hardware has

00:11:08,410 --> 00:11:10,420
UDP fragmentation offload.

00:11:10,420 --> 00:11:11,970
Now, that's not to mention RSS,

00:11:15,880 --> 00:11:18,530
transmit packet steering and recieve packet steering.

00:11:19,590 --> 00:11:21,580
So, we're starting to see a lot of offload.

00:11:21,580 --> 00:11:23,403
A lot of assist that can be done.

00:11:24,460 --> 00:11:27,300
Now, enter tunnel encapsulation and decapsulation.

00:11:27,300 --> 00:11:29,500
Hardware can also do this.

00:11:29,500 --> 00:11:31,460
So we're starting to see tons of offload.

00:11:31,460 --> 00:11:35,060
Now, we have Flow Offload either via Ntuple Filters

00:11:35,060 --> 00:11:37,990
for-meath tool, or CLS Flower.

00:11:37,990 --> 00:11:41,200
Okay, lots and lots of offload, saves lots of cores.

00:11:41,200 --> 00:11:46,070
And, let's not forget, TLS offload, popular now,

00:11:46,070 --> 00:11:49,650
probably even more popular as Quick becomes bigger

00:11:49,650 --> 00:11:54,490
and, not to leave anything out, but XDP and BPF offload

00:11:54,490 --> 00:11:55,840
that we're starting to see.

00:11:57,160 --> 00:12:00,130
So the explosion in hardware capabilities can change

00:12:00,130 --> 00:12:02,680
the way you think about how you build your systems.

00:12:02,680 --> 00:12:04,960
Not only that, my favorite, Control Plane Offload

00:12:04,960 --> 00:12:07,480
because you can just run the whole application

00:12:07,480 --> 00:12:08,680
on your NIC if you want.

00:12:09,576 --> 00:12:11,823
So, again, shameless plug for things that we make.

00:12:13,800 --> 00:12:15,600
But one of the things we find, too, is that it seems

00:12:15,600 --> 00:12:19,540
extremely unlikely that all these offloads

00:12:19,540 --> 00:12:21,650
are being used at the same time.

00:12:21,650 --> 00:12:24,883
In fact, I would say there's almost a zero percent chance.

00:12:26,200 --> 00:12:29,030
Which kinda touches on what you talked about earlier,

00:12:29,030 --> 00:12:32,390
it's great to be able to stack these BPF programs together

00:12:32,390 --> 00:12:34,160
and it's important to think about that

00:12:34,160 --> 00:12:37,790
but it's unknown whether or not lots of folks

00:12:37,790 --> 00:12:39,270
will want to do it.

00:12:39,270 --> 00:12:41,340
I'd still applaud the work and I think it's great.

00:12:41,340 --> 00:12:43,220
- I also think this is part of the reason

00:12:43,220 --> 00:12:46,530
this fact exists is because there's a lot

00:12:46,530 --> 00:12:48,970
of hardware offloaded information that isn't

00:12:48,970 --> 00:12:51,420
in the metadata of the XDP packets yet.

00:12:51,420 --> 00:12:52,730
So, that's the...

00:12:55,490 --> 00:12:57,320
If you're using XDP, you're definitely not

00:12:57,320 --> 00:12:59,670
taking advantage of a lot of these offloaded values.

00:12:59,670 --> 00:13:00,503
- That's right.

00:13:00,503 --> 00:13:02,350
That's right and that's why the XDP folks

00:13:02,350 --> 00:13:04,200
all raised their hands when they said they wanted less.

00:13:04,200 --> 00:13:05,630
- Exactly. - Less offloads.

00:13:05,630 --> 00:13:08,090
- We want to fix that. - Yeah, we'll fix that.

00:13:08,090 --> 00:13:10,800
- Well, and I think that, looking at it,

00:13:10,800 --> 00:13:12,540
I think, looking at it holistically too,

00:13:12,540 --> 00:13:14,610
one of the hardest parts or one of the important things

00:13:14,610 --> 00:13:18,640
to do is look at what NICs can do and what they can do well.

00:13:18,640 --> 00:13:20,910
Many of them can parse really well.

00:13:20,910 --> 00:13:22,740
And if the packets can come up pre-parsed,

00:13:22,740 --> 00:13:25,640
and we have a way to have that data parsed

00:13:25,640 --> 00:13:27,810
in some way and have a reasonable format,

00:13:27,810 --> 00:13:30,340
I know a lot of things have been talked about, you know,

00:13:30,340 --> 00:13:31,900
the XDP hint stuff that, I think,

00:13:31,900 --> 00:13:33,450
was talked about two years ago.

00:13:34,305 --> 00:13:37,760
- I think this is a really powerful potential because

00:13:37,760 --> 00:13:40,950
you have all this logic for class flower

00:13:40,950 --> 00:13:45,950
and that could pre-filter packets into a specific queue

00:13:46,890 --> 00:13:50,480
and once we have per-queue XDP programs,

00:13:50,480 --> 00:13:53,760
you can, yeah, there's just amazing stuff you can do.

00:13:53,760 --> 00:13:57,700
- Yeah, and that's one of the, that, I think, together,

00:13:57,700 --> 00:13:59,670
those things put together are something that we don't

00:13:59,670 --> 00:14:02,610
look at right now as a group very much, I think,

00:14:02,610 --> 00:14:04,690
because we're ultimately not the ones responsible

00:14:04,690 --> 00:14:05,600
for deploying it.

00:14:05,600 --> 00:14:06,970
And then many people don't want to look at it

00:14:06,970 --> 00:14:10,730
for deploying either because if there's an inconsistency

00:14:10,730 --> 00:14:15,470
between the way vendors or between what vendors can parse,

00:14:15,470 --> 00:14:17,450
then they're just like, you know what's simpler

00:14:17,450 --> 00:14:18,710
is no offload at all.

00:14:18,710 --> 00:14:20,870
- It's almost a feature that we had at class flower

00:14:20,870 --> 00:14:22,870
because it consolidated the feature set.

00:14:23,940 --> 00:14:24,773
- Yeah.

00:14:28,540 --> 00:14:30,330
Okay, but here's like one of the hardest parts, right,

00:14:30,330 --> 00:14:33,490
is that, as a vendor, we feel like we have to support

00:14:33,490 --> 00:14:37,540
as many of these offloads as quickly as humanly possible.

00:14:37,540 --> 00:14:39,140
So, as soon as one person comes out with it,

00:14:39,140 --> 00:14:42,683
I gotta keep up with the Joneses and I've got to have it.

00:14:43,640 --> 00:14:46,280
And it's a constant race and it's not a bad thing

00:14:46,280 --> 00:14:50,710
because it pushes our technology along, it's progress,

00:14:50,710 --> 00:14:53,923
but it makes things exhausting.

00:14:55,180 --> 00:14:56,600
But then we have this case where users don't want

00:14:56,600 --> 00:14:58,300
to offload anything, like we said.

00:14:59,490 --> 00:15:02,220
So, they want the hardware to just get out of the way.

00:15:02,220 --> 00:15:04,260
I just want packets, I just want buffers,

00:15:04,260 --> 00:15:06,820
I don't want to do anything, stop telling me

00:15:06,820 --> 00:15:10,260
any information, stop aggregating, none of that.

00:15:10,260 --> 00:15:13,660
So, this brings up the case, smart NICs or dumb NICs.

00:15:13,660 --> 00:15:15,480
Now, I'm not going to click on this link now

00:15:15,480 --> 00:15:17,237
but if you want to look at it later,

00:15:17,237 --> 00:15:20,110
there's a pretty interesting podcast that

00:15:20,110 --> 00:15:24,810
the Snabb Switch creator did where he really

00:15:24,810 --> 00:15:27,020
would like to see a low cost dumb NIC built.

00:15:27,020 --> 00:15:29,000
So, something with zero offload features,

00:15:29,000 --> 00:15:30,273
just give me the packets.

00:15:31,810 --> 00:15:33,240
And, of course, these things are available today.

00:15:33,240 --> 00:15:36,941
You don't have to use the offloads that we built in.

00:15:36,941 --> 00:15:38,020
- Do you really want a dumb NIC or do you want

00:15:38,020 --> 00:15:40,383
smart buffering infrastructure?

00:15:41,414 --> 00:15:43,960
- And I think, yeah, it kinda gets into that, like,

00:15:43,960 --> 00:15:45,840
how dumb do you want it. - Exactly.

00:15:45,840 --> 00:15:47,700
- How much do you want it to get out of the way?

00:15:47,700 --> 00:15:52,070
And I think that that's the challenge is if...

00:15:52,070 --> 00:15:54,680
And then it comes down to the true manufacturing cost,

00:15:54,680 --> 00:15:57,020
like, is anybody going to justify taking parts

00:15:57,020 --> 00:16:01,540
out of something to spend more hardware; that's unclear.

00:16:01,540 --> 00:16:04,440
- I think a lot of those discussions may miss the point

00:16:04,440 --> 00:16:09,440
that you need packet parsing to splitting properly

00:16:10,230 --> 00:16:12,400
and to do zero copy and if you are interested

00:16:12,400 --> 00:16:14,670
in that kind of stuff in your dumb NIC.

00:16:14,670 --> 00:16:16,306
- [Andy] Right.

00:16:16,306 --> 00:16:18,124
- How dumb do you want the NIC to be?

00:16:18,124 --> 00:16:19,330
(chuckles) - Yeah.

00:16:19,330 --> 00:16:21,460
I'm not sure how dumb we want them to be.

00:16:21,460 --> 00:16:23,660
I won't make any comments further than that.

00:16:24,553 --> 00:16:26,470
All right, so then, we have the notion

00:16:26,470 --> 00:16:29,360
of general purpose purposes that exit on NICs

00:16:29,360 --> 00:16:32,350
and how important these might be.

00:16:32,350 --> 00:16:37,330
So, like I said, you've heard me talk about this before,

00:16:37,330 --> 00:16:40,970
I think there's videos on YouTube with tens of views

00:16:40,970 --> 00:16:43,220
that discuss this (laughs)

00:16:43,220 --> 00:16:44,703
from previous conferences.

00:16:45,980 --> 00:16:47,690
But this gives you a chance to have server, really,

00:16:47,690 --> 00:16:51,420
inside your server which is a crazy concept.

00:16:51,420 --> 00:16:52,990
I probably should have drawn a picture for those

00:16:52,990 --> 00:16:55,130
that haven't come to grips with it yet

00:16:55,130 --> 00:16:59,210
but the idea is that you can run Linux on your NIC

00:16:59,210 --> 00:17:01,270
and Linux on your server, so, sort of, Linux

00:17:01,270 --> 00:17:02,700
all the way down, if you will.

00:17:02,700 --> 00:17:05,890
And the cool part about this is that you, now,

00:17:05,890 --> 00:17:08,350
gain the ability to, if you want your NIC to just

00:17:08,350 --> 00:17:10,500
get out of the way and not do any of its

00:17:10,500 --> 00:17:12,410
fancy hardware stuff, you could actually do all that

00:17:12,410 --> 00:17:14,960
fancy hardware stuff, you could do XDP, you could do it,

00:17:14,960 --> 00:17:17,800
actually, on the NIC itself, have that parsing done

00:17:17,800 --> 00:17:20,680
and have the things be pre-parsed or pre-filtered

00:17:20,680 --> 00:17:22,670
without burning any ak-sity six cores.

00:17:22,670 --> 00:17:26,390
And same thing, sort of, that we justify this

00:17:26,390 --> 00:17:29,430
in a way, this product might be a little bit more expensive,

00:17:29,430 --> 00:17:33,430
as you would guess, but, again, look at the ability

00:17:33,430 --> 00:17:36,533
to save the number of cores when you're sizing your servers.

00:17:37,538 --> 00:17:40,940
It's pretty well known, I guess, not well known enough

00:17:40,940 --> 00:17:42,730
that I can say too much but it's pretty well known

00:17:42,730 --> 00:17:44,450
that one of the competitive advantages that some

00:17:44,450 --> 00:17:47,650
of the cloud scale folks have is that they are able

00:17:47,650 --> 00:17:52,650
to do some of this and buy chips, server chips

00:17:53,560 --> 00:17:55,970
that have a lower core count, so they save a massive

00:17:55,970 --> 00:17:58,310
amount of money, just another way that someone's doing it

00:17:58,310 --> 00:18:00,043
more efficiently than others.

00:18:01,360 --> 00:18:03,820
So yeah, we can offload the control plane and the dataplane

00:18:03,820 --> 00:18:06,670
to the Smart NIC instead of burning server cores.

00:18:06,670 --> 00:18:09,450
I'm just ahead of my slides, I'm sorry about that.

00:18:09,450 --> 00:18:11,330
But it's really kind of cool concept and I think

00:18:11,330 --> 00:18:13,930
what we're seeing more is this resonating with more

00:18:13,930 --> 00:18:14,763
and more people.

00:18:15,684 --> 00:18:17,110
I think we've had a product and other products have existed

00:18:17,110 --> 00:18:19,470
and other products are coming out, I think they'll probably

00:18:19,470 --> 00:18:22,560
be three or four or five vendors before the end of this year

00:18:22,560 --> 00:18:23,393
that have one.

00:18:25,020 --> 00:18:27,510
And it's really resonating with a lot of people,

00:18:27,510 --> 00:18:30,010
it's very interesting and I think we'll see other,

00:18:31,440 --> 00:18:35,470
lots of OSes an and lots of dataplane software pickup.

00:18:35,470 --> 00:18:38,310
So, in this case, you could do, for example,

00:18:38,310 --> 00:18:40,610
FRR, free range routing, you can run it right on the NIC.

00:18:40,610 --> 00:18:42,570
So, if you want to do routing all the way to your host,

00:18:42,570 --> 00:18:44,176
you could do it there.

00:18:44,176 --> 00:18:45,680
You don't have to think about running this demon

00:18:45,680 --> 00:18:48,600
on your server, which means you could install any OS

00:18:48,600 --> 00:18:50,050
you want on the server.

00:18:50,050 --> 00:18:53,480
If you wanted to run Open vSwitch all the way on the NIC,

00:18:53,480 --> 00:18:57,550
I've given talks on that and it's value by saving cores.

00:18:57,550 --> 00:19:01,290
Or, you want to do XDP and have the BPF maps available

00:19:01,290 --> 00:19:03,350
directly to the application on the NIC

00:19:03,350 --> 00:19:06,703
and do all the forwarding right there, also a good option.

00:19:09,000 --> 00:19:10,220
Hmm?

00:19:10,220 --> 00:19:12,186
- [Man] What about the NIC?

00:19:12,186 --> 00:19:14,220
- Right, so yeah, so then you can start to combine them

00:19:14,220 --> 00:19:15,420
and you can do all of that.

00:19:15,420 --> 00:19:17,890
So your route table's populated by a routing demon,

00:19:17,890 --> 00:19:22,790
you can do some of the L34 routing stuff and do XDP

00:19:22,790 --> 00:19:26,363
right on the NIC and really pretty amazing and cool stuff.

00:19:28,580 --> 00:19:31,260
All right, so speaking of programmable dataplanes,

00:19:32,150 --> 00:19:34,263
now let's talk about FPGAs and NPUs.

00:19:35,209 --> 00:19:36,440
So, we talked about fixed function devices

00:19:36,440 --> 00:19:38,920
and all the things they can offload, these are great,

00:19:38,920 --> 00:19:42,040
but it's really tough when a new protocol comes out

00:19:42,040 --> 00:19:45,580
or a new frame format comes out and I've got

00:19:45,580 --> 00:19:47,910
a fixed function device that can no longer offload it.

00:19:47,910 --> 00:19:50,370
So now, all of a sudden, I've sized my server for something

00:19:50,370 --> 00:19:54,010
and I'm gonna burn extra cores processing those packets.

00:19:54,010 --> 00:19:57,290
So FPGAs and NPUs can both help fill the gap there

00:19:57,290 --> 00:19:59,470
because they are so programmable.

00:19:59,470 --> 00:20:01,410
So there are NPUs out there that are on NICs

00:20:01,410 --> 00:20:05,670
that can offload P4 or XDP or BPF that dataplane

00:20:05,670 --> 00:20:08,270
right on the NIC so you don't have to think about it at all,

00:20:08,270 --> 00:20:09,370
so that's pretty cool.

00:20:10,480 --> 00:20:12,293
Additionally, FPGAs can do anything.

00:20:14,290 --> 00:20:16,813
It's kind of a, it's a true statement,

00:20:17,650 --> 00:20:20,780
but it's just a small matter of programming to get it done.

00:20:20,780 --> 00:20:23,670
Which is something that, good, a couple chuckles,

00:20:23,670 --> 00:20:27,530
that nobody should overlook because it's a huge effort

00:20:27,530 --> 00:20:30,040
and it really, right now, it only functions

00:20:30,040 --> 00:20:32,520
at very, very high scale.

00:20:32,520 --> 00:20:34,190
If you're buying a lot, you can afford to invest

00:20:34,190 --> 00:20:36,630
a couple people to write the verilog to do it.

00:20:36,630 --> 00:20:41,050
It's extremely tough to justify the development cost not,

00:20:41,050 --> 00:20:42,720
let's forget the hardware cost

00:20:44,370 --> 00:20:46,330
which is significant as well.

00:20:46,330 --> 00:20:48,180
You have to justify that development cost

00:20:48,180 --> 00:20:49,820
and that can be tough.

00:20:49,820 --> 00:20:51,770
Unless you can get your hardware vendor

00:20:52,630 --> 00:20:54,480
or your operating system vendor to do it for you.

00:20:54,480 --> 00:20:57,720
There were some pretty interesting talks this year,

00:20:57,720 --> 00:21:00,560
I think, Ule is leading some efforts to try and have

00:21:03,133 --> 00:21:06,540
a FPGA framework available that could be generic

00:21:06,540 --> 00:21:08,700
and open source and that has a lot of potential.

00:21:08,700 --> 00:21:11,850
There are no dataplane apps written that I know of yet

00:21:11,850 --> 00:21:14,731
but I think that teams are starting to, sort of,

00:21:14,731 --> 00:21:17,943
break through and crack that nut, if you will.

00:21:19,560 --> 00:21:22,030
All right, so now we've got our favorite one,

00:21:22,030 --> 00:21:24,250
the best firmware, everybody's favorite.

00:21:24,250 --> 00:21:25,500
Everybody loves firmware.

00:21:26,716 --> 00:21:27,816
I wish Jerry was here.

00:21:30,500 --> 00:21:33,100
So the difficult part for any firmware is that

00:21:33,100 --> 00:21:36,389
a lot of hardware features are enabled by firmware

00:21:36,389 --> 00:21:38,970
and, this is kind of a bummer,

00:21:38,970 --> 00:21:42,080
having been on the side now, internally, where I see

00:21:42,080 --> 00:21:45,420
how firmware is developed, you sort of understand why.

00:21:45,420 --> 00:21:47,300
And what you see is that

00:21:49,040 --> 00:21:51,690
when you're bringing up a new system by default,

00:21:51,690 --> 00:21:53,270
there's just no way you're going to be able to support

00:21:53,270 --> 00:21:55,020
absolutely everything that's there.

00:21:57,790 --> 00:22:00,290
The problem now is that firmware versioning

00:22:00,290 --> 00:22:03,910
and the capabilities that really has a positive or,

00:22:03,910 --> 00:22:06,590
mostly, at times, negative impact on user experience

00:22:06,590 --> 00:22:08,840
when you have old firmware, if we can't guarantee

00:22:08,840 --> 00:22:10,960
that a card, as it leaves the factor, has the version

00:22:10,960 --> 00:22:14,130
of firmware that you want or if you buy from a couple

00:22:14,130 --> 00:22:18,000
different vendors and you end up, system vendors,

00:22:18,000 --> 00:22:20,760
and you end up with a mix of firmware across boards,

00:22:20,760 --> 00:22:22,840
now you're left with a situation where you have to

00:22:22,840 --> 00:22:24,060
upgrade some of them.

00:22:24,060 --> 00:22:26,020
Or, suddenly, some of the features you expect

00:22:26,020 --> 00:22:27,233
to work don't work.

00:22:28,404 --> 00:22:31,170
Maybe the system silently just trolls on

00:22:31,170 --> 00:22:33,590
and you don't notice except for the fact that

00:22:33,590 --> 00:22:36,920
some versions are much more heavily utilized, CPUIs.

00:22:36,920 --> 00:22:39,020
So that's really, that's kind of a bummer.

00:22:39,990 --> 00:22:43,280
And even if it's open source which there are a couple now

00:22:43,280 --> 00:22:45,500
or at least one that's that way, it could still feel

00:22:45,500 --> 00:22:47,980
a little bit like a black box, like the lift to start

00:22:47,980 --> 00:22:52,980
to understand what firmware's doing is non trivial.

00:22:54,890 --> 00:22:59,400
We have a team that works on firmware in my office

00:22:59,400 --> 00:23:04,220
on a 200 gig NIC and it takes some time

00:23:04,220 --> 00:23:05,760
to bring people up to speed, even people

00:23:05,760 --> 00:23:08,010
that are experienced developers.

00:23:08,010 --> 00:23:11,320
So even if that was all open source today, yes,

00:23:11,320 --> 00:23:14,240
it gives you the security, the peace of mind that you can

00:23:14,240 --> 00:23:16,720
audit it but it's still, it's non trivial

00:23:16,720 --> 00:23:17,870
to get going with that.

00:23:19,380 --> 00:23:22,060
All right, now, so here's the fun part.

00:23:22,060 --> 00:23:23,803
So what makes a driver the best?

00:23:24,940 --> 00:23:26,940
The best, let's think about that.

00:23:26,940 --> 00:23:28,330
All right, so, to a lot of people, upstream

00:23:28,330 --> 00:23:29,340
is all that matters.

00:23:29,340 --> 00:23:31,020
That's kind of, in this community, that's what we hear

00:23:31,020 --> 00:23:31,853
all the time.

00:23:31,853 --> 00:23:34,980
If it's not upstream, I think I have probably been quoted

00:23:34,980 --> 00:23:37,320
with saying, upstream or die.

00:23:37,320 --> 00:23:39,190
Which is, maybe, a little bit severe

00:23:39,190 --> 00:23:43,760
but I think that's true and it's the way that you

00:23:43,760 --> 00:23:45,940
want to get your code used by as many people

00:23:45,940 --> 00:23:47,630
as possible, it's the way to get other people

00:23:47,630 --> 00:23:48,923
to develop on your code.

00:23:50,057 --> 00:23:53,563
So, in this case, truly, upstream is all that matters.

00:23:55,930 --> 00:23:58,580
You can see the sarcasm on my face, that was the intent.

00:23:58,580 --> 00:24:00,520
Now, there's other people, inbox is all that matters.

00:24:00,520 --> 00:24:03,670
So, inbox in a distribution or inbox in an OS,

00:24:03,670 --> 00:24:05,853
whether it's a Linux distribution

00:24:05,853 --> 00:24:09,170
or Windows or VM ware or anything,

00:24:09,170 --> 00:24:11,460
inbox is all that matters, they don't care if it's upstream,

00:24:11,460 --> 00:24:14,470
they just want to make it usable so when they get there,

00:24:14,470 --> 00:24:17,700
OS and install it on their server, it's there.

00:24:17,700 --> 00:24:19,380
We hear this a lot.

00:24:19,380 --> 00:24:22,230
We hear this from customers, we hear this from everybody.

00:24:23,990 --> 00:24:27,410
So, the fact is, out of tree drivers are not going away.

00:24:27,410 --> 00:24:29,653
I used to feel like it was my mission to get rid of them.

00:24:30,740 --> 00:24:33,533
And I tried hard but they're just not.

00:24:34,752 --> 00:24:38,573
And that is a bummer but it is the case.

00:24:39,760 --> 00:24:44,210
So, these are, all three, kind of, contradictory statements

00:24:44,210 --> 00:24:45,193
in a lot of ways.

00:24:46,120 --> 00:24:47,360
Upstream or die.

00:24:47,360 --> 00:24:48,380
Gotta be inbox.

00:24:48,380 --> 00:24:49,603
Inbox or die, maybe.

00:24:50,482 --> 00:24:52,470
And then, if we keep the die theme,

00:24:52,470 --> 00:24:55,294
out of tree drivers are not going to die.

00:24:55,294 --> 00:24:56,650
So, I'm not sure how we're going to deal with that

00:24:56,650 --> 00:24:57,483
but it's true.

00:24:58,500 --> 00:25:00,390
Hopefully, I'm starting to paint a picture for you for some

00:25:00,390 --> 00:25:03,190
of the fun that it can be to work for a hardware vendor.

00:25:04,900 --> 00:25:07,730
So then, the question is: what does your driver support?

00:25:07,730 --> 00:25:10,042
All right, well, your driver better support all

00:25:10,042 --> 00:25:11,320
that your hardware supports.

00:25:11,320 --> 00:25:14,080
So, I actually condensed all those into this slide,

00:25:14,080 --> 00:25:15,060
so it's the same one.

00:25:15,060 --> 00:25:17,538
Does your driver support all this?

00:25:17,538 --> 00:25:19,830
It's kind of staggering to think about how many

00:25:19,830 --> 00:25:22,680
of these things we, now, support when only maybe

00:25:22,680 --> 00:25:26,180
10 years ago, maybe the first three were the only ones there

00:25:26,180 --> 00:25:28,933
or maybe one, two, and four.

00:25:30,140 --> 00:25:33,470
So we've really grown in scope and grown in capabilities

00:25:33,470 --> 00:25:37,700
and grown in hardware and Kernel and driver

00:25:37,700 --> 00:25:40,260
infrastructure over time.

00:25:40,260 --> 00:25:42,423
So, that's really important.

00:25:43,800 --> 00:25:45,350
You've got to support what your hardware can support.

00:25:45,350 --> 00:25:48,440
Let's not forgot, all the hardware vendors,

00:25:48,440 --> 00:25:50,200
people that work at hardware vendors are working on

00:25:50,200 --> 00:25:53,100
new hardware that does stuff that the Kernel isn't even

00:25:53,100 --> 00:25:55,110
thinking about right now, or the upstream Kernel

00:25:55,110 --> 00:25:57,860
isn't thinking about right now, or so we like to think.

00:25:58,760 --> 00:26:02,010
But let's not forget about our people that don't want any

00:26:02,010 --> 00:26:03,630
hardware offload at all, the just want

00:26:03,630 --> 00:26:05,690
software dataplane support.

00:26:05,690 --> 00:26:09,460
All right, so because of some things that are coming up,

00:26:09,460 --> 00:26:11,745
XDP, so let's cheer for that; let's say yay.

00:26:11,745 --> 00:26:13,210
- Yay! - Yay, all right.

00:26:13,210 --> 00:26:15,040
- Right, okay, so we want our driver to support this

00:26:15,040 --> 00:26:19,203
but as was just pointed out, that's non trivial.

00:26:20,470 --> 00:26:22,450
You know, you could have a couple XDP operations

00:26:22,450 --> 00:26:24,800
that are supported and you might not know that

00:26:24,800 --> 00:26:25,690
the rest aren't.

00:26:25,690 --> 00:26:28,540
Not only that, XDP redirect is a challenge.

00:26:28,540 --> 00:26:31,510
It took us, admittedly, a long time to get it right

00:26:31,510 --> 00:26:35,080
and, on top of that, redirecting from

00:26:37,200 --> 00:26:40,560
a Broadcom card to Mellanox card or a Mellanox card

00:26:40,560 --> 00:26:44,090
to Netronome card or a Netronome card to a Intel card,

00:26:44,090 --> 00:26:46,940
or any of the other, or to V-eeth or any of the other,

00:26:46,940 --> 00:26:48,300
there's a couple of others, too, that I'm leaving out,

00:26:48,300 --> 00:26:53,300
apologies, that's not necessarily easy or is not necessarily

00:26:53,310 --> 00:26:54,143
going to work.

00:26:54,143 --> 00:26:58,230
It should work now but it took a whole new set

00:26:58,230 --> 00:27:01,283
of operations and it took, what, a year?

00:27:02,220 --> 00:27:04,650
What do you think, Yesper? - Yeah, around that.

00:27:04,650 --> 00:27:05,770
- A year to get it right, okay.

00:27:05,770 --> 00:27:08,723
So this is a non trivial effort to have XDP support.

00:27:09,666 --> 00:27:10,499
All right, so I'm going to bring up one that's a favorite

00:27:10,499 --> 00:27:14,250
of mine and I know folks at Mellanox originated this.

00:27:14,250 --> 00:27:16,690
So this is like a really weird kind of obscure thing

00:27:16,690 --> 00:27:19,573
that does this dynamic moderation in software.

00:27:20,410 --> 00:27:22,300
Lots of hardware used to have it but the cool thing

00:27:22,300 --> 00:27:25,430
about this is you can actually have different interrupt

00:27:25,430 --> 00:27:27,550
coalescing rates for different queues.

00:27:27,550 --> 00:27:29,750
And, actually, the Kernel just takes care of, the drivers

00:27:29,750 --> 00:27:30,900
take care of doing it for you.

00:27:30,900 --> 00:27:32,700
You don't have to think about it.

00:27:32,700 --> 00:27:36,360
This is pretty cool feature, not that hard to implement

00:27:36,360 --> 00:27:38,891
but probably not that widely used because it's only deployed

00:27:38,891 --> 00:27:40,920
in two, maybe three drivers.

00:27:40,920 --> 00:27:43,470
- [Man] Historical perspective, like, 15, 20 years ago,

00:27:43,470 --> 00:27:45,810
drivers did this by hand inside the drivers.

00:27:45,810 --> 00:27:49,300
- Mm-hm, so, kind of what's old is new again.

00:27:49,300 --> 00:27:51,250
And back then, here was no multi-queue, right?

00:27:51,250 --> 00:27:53,580
It was just that we're just trying to do everything we could

00:27:53,580 --> 00:27:55,123
to save cycles.

00:27:57,660 --> 00:27:59,010
All right, now, here's where some of you

00:27:59,010 --> 00:28:00,210
want to say boo. - Boo.

00:28:01,330 --> 00:28:06,330
- Okay, so, but this is, 100%, an important thing

00:28:06,380 --> 00:28:07,430
to a hardware vendor.

00:28:08,650 --> 00:28:11,730
Whether it's someone actively comes to this community or not

00:28:11,730 --> 00:28:14,660
there are tons of users of the DPDK

00:28:14,660 --> 00:28:16,730
and there are tons of applications written top.

00:28:16,730 --> 00:28:18,870
In fact, one of the things that struck me from the talk

00:28:18,870 --> 00:28:23,870
earlier today is that one advantage that XDP could have

00:28:23,980 --> 00:28:27,270
over this is you could chain these things together easily.

00:28:27,270 --> 00:28:30,270
There's, right now, probably not very many turnkey

00:28:30,270 --> 00:28:32,750
DPDK apps that you could chain together

00:28:32,750 --> 00:28:35,300
that could take over hardware and do this

00:28:35,300 --> 00:28:36,530
and pass it to each other.

00:28:36,530 --> 00:28:38,830
So that's a distinct advantage that XDP could have

00:28:38,830 --> 00:28:42,710
but there's a huge, huge market for this

00:28:42,710 --> 00:28:44,690
from the hardware vendor perspective.

00:28:44,690 --> 00:28:48,760
And so, you know, when you have religion around XDP

00:28:48,760 --> 00:28:53,760
being the one true way, it's hard when you go back home,

00:28:53,940 --> 00:28:55,550
so to speak.

00:28:55,550 --> 00:28:57,290
Not only that, you want to talk about the thing that,

00:28:57,290 --> 00:28:59,923
right now, whips us is that right there.

00:29:01,050 --> 00:29:03,600
So the vector support for pul-mo drivers for DPDK

00:29:03,600 --> 00:29:06,470
for those that don't know, although I haven't tried it

00:29:06,470 --> 00:29:10,680
with the new, I haven't seen how the bulking stuff helps.

00:29:10,680 --> 00:29:14,900
But, right now, you look at what a single core can drop

00:29:14,900 --> 00:29:18,640
if you use a vector driver, you can dominate

00:29:18,640 --> 00:29:20,384
anything else that's out there.

00:29:20,384 --> 00:29:21,217
(clears throat) Excuse me.

00:29:21,217 --> 00:29:23,470
So, I think that's an important thing for us to think about.

00:29:23,470 --> 00:29:26,680
I know Alexei has talked, I think, to you before about

00:29:26,680 --> 00:29:29,750
can we use Sim-D instructions, could we do some of this

00:29:29,750 --> 00:29:32,100
and there's infrastructure now in place in the Kernel,

00:29:32,100 --> 00:29:34,060
right, to be able to say we're entering

00:29:34,060 --> 00:29:35,800
and we're exiting a spot.

00:29:35,800 --> 00:29:38,020
So, I think this is something that we have to think about

00:29:38,020 --> 00:29:39,920
re-implementing but, at the same time,

00:29:41,240 --> 00:29:43,240
we got this and not only do we have it,

00:29:43,240 --> 00:29:46,650
to think about for X86, we need to think about it for ARM,

00:29:46,650 --> 00:29:49,290
anything else we want to implement it for.

00:29:49,290 --> 00:29:53,690
So I think this is a target that we need to shoot for.

00:29:53,690 --> 00:29:57,730
On top of that, in addition to offload via eeth tool

00:29:57,730 --> 00:30:02,530
Ntuple or CLS Flower, now, DPDK has this notion

00:30:02,530 --> 00:30:04,793
of offloading via, what they call, rte_flow.

00:30:05,810 --> 00:30:08,500
So it's another thing we spend a lot of time thinking about

00:30:08,500 --> 00:30:10,110
or we spend a lot of time implementing 'cause there's

00:30:10,110 --> 00:30:11,760
a lot of people interested in it.

00:30:12,820 --> 00:30:17,550
So, there's a bunch of stuff going on,

00:30:17,550 --> 00:30:18,650
let's put it that way.

00:30:19,810 --> 00:30:22,260
And we know that Kernel by-pass with this audience

00:30:22,260 --> 00:30:24,450
is, generally, not preferred and I know I don't

00:30:24,450 --> 00:30:28,950
prefer it either but there's not as many people that have

00:30:28,950 --> 00:30:32,910
as much concern about deployment or concern about

00:30:32,910 --> 00:30:35,910
some of the other things we've long been concerned about

00:30:35,910 --> 00:30:36,910
with Kernel by-pass.

00:30:39,020 --> 00:30:41,275
So, instead of that we, of course,

00:30:41,275 --> 00:30:43,360
have our new friend, AF_XDP.

00:30:43,360 --> 00:30:44,823
Maybe not that new anymore.

00:30:45,670 --> 00:30:47,640
Although it's still got limited hardware support,

00:30:47,640 --> 00:30:50,710
I think there's only a couple drivers that support it.

00:30:50,710 --> 00:30:53,550
I have patches that make it work.

00:30:53,550 --> 00:30:58,330
I got some coaching on them earlier this year

00:30:58,330 --> 00:31:00,230
and they'll go upstream at some point.

00:31:02,590 --> 00:31:05,760
And I think, maybe to steal a line from Joseph Brandenburg

00:31:05,760 --> 00:31:08,230
from a few years ago, I think AF_XDP is the new black,

00:31:08,230 --> 00:31:12,000
it is the new popular, there are going to be DPDK drivers

00:31:12,000 --> 00:31:15,793
that use AF_XDP as the bottom end.

00:31:17,000 --> 00:31:21,173
So the dream of a universal pul-mo driver is cool, I think.

00:31:22,090 --> 00:31:25,350
So I think that's a pretty fun thing that's coming up.

00:31:25,350 --> 00:31:27,050
So, as you can see, it seems really simple

00:31:27,050 --> 00:31:29,203
to make the best NIC, right?

00:31:29,203 --> 00:31:30,036
(chuckles)

00:31:30,036 --> 00:31:32,363
Best for everybody, this is super, super easy task.

00:31:34,500 --> 00:31:36,390
So, what should we set as our goal?

00:31:36,390 --> 00:31:39,670
It's kind of as I think about, maybe I don't want to invite

00:31:39,670 --> 00:31:41,210
audience participation but what should be a goal

00:31:41,210 --> 00:31:42,250
of a NIC vendor, what do you think?

00:31:42,250 --> 00:31:44,800
Anybody want to throw anything out?

00:31:44,800 --> 00:31:46,300
Anyone? - Quality.

00:31:46,300 --> 00:31:48,530
- Quality, okay, so-- - Six segments.

00:31:48,530 --> 00:31:52,060
- Okay, so like, not crashing the firmware?

00:31:52,060 --> 00:31:54,285
- [Man] That would be good, yeah.

00:31:54,285 --> 00:31:55,118
(laughs)

00:31:55,118 --> 00:31:56,680
- Okay, okay.

00:31:56,680 --> 00:31:59,200
Sorry, anything else, anything cool?

00:31:59,200 --> 00:32:00,430
- [Man] Profits. (laughs)

00:32:00,430 --> 00:32:02,310
- Well, I mean, so-- - Open source the firmware.

00:32:02,310 --> 00:32:04,273
- So, yeah, open source the firmware.

00:32:05,121 --> 00:32:07,125
I mean, I like to not think too much, I mean,

00:32:07,125 --> 00:32:10,150
I joked about we want to sell the most NICs but, yeah,

00:32:10,150 --> 00:32:12,740
I try not to think too much about the corporate side of it

00:32:12,740 --> 00:32:14,850
in this environment, although, I guess that's what

00:32:14,850 --> 00:32:15,970
this talk's about.

00:32:15,970 --> 00:32:17,590
Well, so, my personal opinion is that we want

00:32:17,590 --> 00:32:21,240
to minimize the number of CPU instructions needed

00:32:21,240 --> 00:32:23,130
to process every packet, sort of, on average

00:32:23,130 --> 00:32:25,840
I know that sounds like nonsensical or, like, obvious,

00:32:25,840 --> 00:32:29,150
or either, those are contradictory terms but anyway,

00:32:29,150 --> 00:32:31,448
I think it's important to think about that

00:32:31,448 --> 00:32:32,620
and I think until we started to see what was possible

00:32:32,620 --> 00:32:35,817
with XDP, and maybe what's possible with DPDK

00:32:37,491 --> 00:32:39,053
and some of the vector mode drivers,

00:32:40,130 --> 00:32:42,083
it's important to think about that.

00:32:42,962 --> 00:32:44,200
So, what saves instructions?

00:32:44,200 --> 00:32:46,310
Well, offloading directly to hardware.

00:32:46,310 --> 00:32:48,240
Whether it's tunnel endcap or any of those things

00:32:48,240 --> 00:32:50,330
I mentioned on that one ichart slide that I have,

00:32:50,330 --> 00:32:51,430
notice I only had one.

00:32:52,510 --> 00:32:55,240
Offloading to hardware saves instructions.

00:32:55,240 --> 00:32:57,823
Optimizing drivers also saves instructions.

00:32:59,100 --> 00:33:00,650
If you watch some of the Kernel commits,

00:33:00,650 --> 00:33:02,730
you can watch some of the evolution of some of the drivers

00:33:02,730 --> 00:33:05,570
and you'll see people point out how I made

00:33:05,570 --> 00:33:08,550
these four changes and, now, look at how much better,

00:33:08,550 --> 00:33:10,730
how much more quickly I can drop packets

00:33:10,730 --> 00:33:13,580
using an XDP test, for example,

00:33:13,580 --> 00:33:15,080
my favorite of all benchmarks.

00:33:16,671 --> 00:33:17,680
- [Man] It's a...

00:33:17,680 --> 00:33:19,305
- Yeah, exactly.

00:33:19,305 --> 00:33:21,440
(man speaks indistinctly) (laughs)

00:33:21,440 --> 00:33:23,084
Yeah, that's right. (chuckles)

00:33:23,084 --> 00:33:25,773
So, an XDP saves instructions, right.

00:33:26,616 --> 00:33:28,480
So, we know that over the traditional Kernel stack,

00:33:28,480 --> 00:33:31,600
if we want to perform some operations, XDP is way faster

00:33:31,600 --> 00:33:34,430
than net filter for dropping packets.

00:33:34,430 --> 00:33:37,760
Although, I'm gonna say that, hopefully, Pablo's not here.

00:33:37,760 --> 00:33:40,110
And we know that AF_XDP will ultimately save instructions

00:33:40,110 --> 00:33:43,233
as well, especially relative to standard socket apps.

00:33:44,880 --> 00:33:47,930
So, I think that needs to be at the core of what we think

00:33:47,930 --> 00:33:51,860
about and as the users are using them and deploying them,

00:33:51,860 --> 00:33:55,162
they need to think about what do I really want to do.

00:33:55,162 --> 00:33:56,730
And, of course, our good friend, the DPDK

00:33:56,730 --> 00:33:58,113
saves instructions as well.

00:33:59,684 --> 00:34:01,532
So, all these things are important.

00:34:01,532 --> 00:34:02,691
- Data centers. - Hm?

00:34:02,691 --> 00:34:03,524
- [Man] It's a great way to heat data centers.

00:34:03,524 --> 00:34:06,130
- It is, it is. (chuckles)

00:34:06,130 --> 00:34:08,020
so, I think, the reminder that I'm sort of stuck with

00:34:08,020 --> 00:34:11,250
every day or every week or every month as we bounce

00:34:11,250 --> 00:34:13,820
between different people wanting to do solutions is that

00:34:13,820 --> 00:34:17,010
there isn't a single hardware, firmware, driver combo

00:34:17,010 --> 00:34:18,260
that works for everybody.

00:34:20,640 --> 00:34:22,180
And so, I guess the question is,

00:34:22,180 --> 00:34:23,680
should we focus on everything?

00:34:24,983 --> 00:34:26,723
And that's supposed to be funny and you can laugh.

00:34:27,601 --> 00:34:28,653
(scattered chuckles)

00:34:28,653 --> 00:34:30,335
There we go, there we go. (laughs)

00:34:30,335 --> 00:34:31,723
so, I think this is impossible.

00:34:32,580 --> 00:34:33,780
Obviously.

00:34:33,780 --> 00:34:36,320
Not with a single person or not with 10 people.

00:34:36,320 --> 00:34:38,333
You, fundamentally, can't do it.

00:34:39,770 --> 00:34:42,830
We know this isn't a realistic goal but it's still

00:34:42,830 --> 00:34:44,080
what we end up thinking about.

00:34:44,080 --> 00:34:46,100
So we think about how we can help users today.

00:34:46,100 --> 00:34:48,430
What can we do; we can make firmware that's stable

00:34:48,430 --> 00:34:49,263
that doesn't crash.

00:34:49,263 --> 00:34:51,410
We can think about open sourcing it.

00:34:51,410 --> 00:34:53,890
We can try to support as many of the dataplane things

00:34:53,890 --> 00:34:57,510
that exist because, right now, what we have is

00:34:57,510 --> 00:35:01,480
you want to be a part of interesting potential markets

00:35:01,480 --> 00:35:04,040
or interesting potential solutions which, I think,

00:35:04,040 --> 00:35:04,873
we try to do.

00:35:06,230 --> 00:35:08,490
And then, we think about how we want to enable future users.

00:35:08,490 --> 00:35:11,860
You know, we look at, didn't mention this before

00:35:11,860 --> 00:35:13,950
but you look at things like what's happening.

00:35:13,950 --> 00:35:16,381
Occasionally, if you feel like it, you can look at

00:35:16,381 --> 00:35:18,460
what's happening at ITF and look at what upcoming standards

00:35:18,460 --> 00:35:22,830
might be, might hit a draft, what are some of the trends,

00:35:22,830 --> 00:35:25,500
can we put some that into hardware if people want

00:35:25,500 --> 00:35:27,330
or can we make the hardware get out of the way?

00:35:27,330 --> 00:35:28,480
Which do we need to do?

00:35:29,620 --> 00:35:30,453
And that's it.

00:35:33,350 --> 00:35:34,620
- Thank you for your presentation.

00:35:34,620 --> 00:35:36,133
Let's start the Q and A.

00:35:38,280 --> 00:35:39,730
I'm sorry, we're out of time.

00:35:40,617 --> 00:35:41,861
(laughs) I'm just kidding.

00:35:41,861 --> 00:35:42,694
- Nice try.

00:35:42,694 --> 00:35:44,863
You tried that trick before. - I did, yeah.

00:35:44,863 --> 00:35:46,250
(laughs)

00:35:46,250 --> 00:35:48,070
- You've got to support a lot of things that, you know,

00:35:48,070 --> 00:35:49,480
last, what, 15, 20 years.

00:35:49,480 --> 00:35:52,700
We've had all of these new features coming up and it must be

00:35:52,700 --> 00:35:55,890
an immense amount of work to try and maintain all of them.

00:35:55,890 --> 00:35:57,910
And you're doing new features and you still have to

00:35:57,910 --> 00:35:59,510
make sure it works with all the other things.

00:35:59,510 --> 00:36:02,060
Do any of the new technologies allow you to re-implement

00:36:02,060 --> 00:36:04,110
and get rid of the legacy implementation?

00:36:05,700 --> 00:36:07,010
- [Man] Yeah, that's a really good question.

00:36:07,010 --> 00:36:09,340
- That's an excellent question.

00:36:09,340 --> 00:36:11,307
- I'm sorry. - No, no.

00:36:11,307 --> 00:36:15,690
- [Man] If you were at Pablo's net filter hardware offload,

00:36:15,690 --> 00:36:17,980
you kinda got the hint that we have certain elements

00:36:17,980 --> 00:36:21,410
of the hardware that are programmed via different avenues

00:36:21,410 --> 00:36:25,300
of configuration like the eeth tool RX filter thing

00:36:25,300 --> 00:36:29,390
verses the Class Flower thing and if you configure here,

00:36:29,390 --> 00:36:31,780
does it show up there?

00:36:31,780 --> 00:36:34,690
We have this duplicated stuff unnecessarily and it has

00:36:34,690 --> 00:36:37,080
unclear semantics what you should do when you configure

00:36:37,080 --> 00:36:40,000
in both directions and we have a lot of cruff sitting around

00:36:40,000 --> 00:36:43,730
and it is a very good question, can get rid of it.

00:36:43,730 --> 00:36:46,490
- Yeah, I think, from a pure hardware standpoint,

00:36:46,490 --> 00:36:50,736
in the context of that, I think that if there was

00:36:50,736 --> 00:36:55,310
space needed on the silicon for some new feature,

00:36:55,310 --> 00:36:57,590
there's always a chance we could look at one of these

00:36:57,590 --> 00:37:00,570
features and say, you know what, no one's really using that.

00:37:00,570 --> 00:37:02,750
If we can save the space, maybe we can take it off

00:37:02,750 --> 00:37:06,610
but I think, by and large, there's often not an interest

00:37:06,610 --> 00:37:10,190
in removing too many hardware features.

00:37:10,190 --> 00:37:13,100
- Removing it, then, you have bunch of new technologies

00:37:13,100 --> 00:37:15,210
that are about filtering, that are about trying to

00:37:15,210 --> 00:37:17,910
reduce instructions, could re-implement and get rid

00:37:17,910 --> 00:37:19,911
of the legacy implementations?

00:37:19,911 --> 00:37:20,744
- Yeah, we do that all the time.

00:37:21,714 --> 00:37:22,547
Yeah. (chuckles)

00:37:22,547 --> 00:37:25,040
Yeah, the goal with a lot of them is to be, or the goal

00:37:25,040 --> 00:37:26,540
is to be backwards compatible.

00:37:27,691 --> 00:37:31,670
Throughout the different generations of our chips,

00:37:31,670 --> 00:37:35,150
there's key pieces that are re-implemented.

00:37:35,150 --> 00:37:38,270
And the old implementation, sort of, tossed out

00:37:38,270 --> 00:37:41,280
in favor of, hopefully, a new better one that's deeper

00:37:41,280 --> 00:37:45,873
into the packet or allows more capabilities.

00:37:48,010 --> 00:37:51,730
- I'm just curious, on this slide you have TSO, GSO,

00:37:51,730 --> 00:37:52,880
LRO, hardware GRO, UFO.

00:37:57,110 --> 00:37:59,420
Some of those seem to me like software features

00:37:59,420 --> 00:38:01,690
in the core stack as opposed to having to do anything

00:38:01,690 --> 00:38:03,120
with the drivers--

00:38:03,120 --> 00:38:05,080
- [Man] The problem is the hardware has to segment things

00:38:05,080 --> 00:38:07,520
at the boundaries properly at the buffering layer

00:38:07,520 --> 00:38:09,280
in order for a hardware GRO to work.

00:38:09,280 --> 00:38:11,520
It's not a purely software thing, like, you have to

00:38:11,520 --> 00:38:14,280
segment the thing so you could reconstitute precisely

00:38:14,280 --> 00:38:16,570
what came on the wire out and the only way to do that

00:38:16,570 --> 00:38:19,210
is to have the buffering parsed to hardware

00:38:19,210 --> 00:38:21,573
and segment at the MSSes properly.

00:38:24,090 --> 00:38:26,210
- So, straight GRO, 100% right.

00:38:26,210 --> 00:38:28,369
- [Man] Hundred percent software, yes.

00:38:28,369 --> 00:38:30,110
- It's 100% software but in the hardware GRO case,

00:38:30,110 --> 00:38:34,960
you're actually able to put together in with one call,

00:38:34,960 --> 00:38:38,870
we're able to pass up basically a frame that looks like--

00:38:38,870 --> 00:38:42,250
- [Man] What the software GRO would've constructed.

00:38:42,250 --> 00:38:45,190
- What's the difference between LRO and hardware GRO?

00:38:45,190 --> 00:38:47,130
- LRO is just one big giant collection--

00:38:47,130 --> 00:38:48,630
- [Man] Super pocket with no restrictions

00:38:48,630 --> 00:38:52,390
on the segmentation so, therefore, you can't reconstitute

00:38:52,390 --> 00:38:55,560
exactly what came in on the wire, it's a violation.

00:38:55,560 --> 00:38:57,440
That's why we don't like people to use LRO.

00:38:57,440 --> 00:39:01,430
- So, say you get like 16K, you might get four pages

00:39:01,430 --> 00:39:04,405
in a row, like 16K of just raw data.

00:39:04,405 --> 00:39:06,940
- [Man] Instead of 1448, 1448, 1448.

00:39:06,940 --> 00:39:07,773
- Right.

00:39:08,880 --> 00:39:10,692
Does that make sense?

00:39:10,692 --> 00:39:13,501
- A more relaxed rule when you aggregate the core

00:39:13,501 --> 00:39:14,380
and why GRO is more--

00:39:14,380 --> 00:39:17,603
- So is that one of the cases where we can get rid of LRO?

00:39:18,930 --> 00:39:20,280
Or does it have a use case?

00:39:21,350 --> 00:39:23,740
- [Man] Some cards don't do hardware GRO and people want

00:39:23,740 --> 00:39:25,270
the performance and don't care about

00:39:25,270 --> 00:39:28,100
the violation of semantics. - Right.

00:39:28,100 --> 00:39:31,570
- Especially when you come in, maybe you don't care.

00:39:31,570 --> 00:39:32,403
- That's right.

00:39:38,286 --> 00:39:40,338
All right, here it comes. (laughs)

00:39:40,338 --> 00:39:41,530
- All right.

00:39:41,530 --> 00:39:43,957
So, 'cause you're talking about a continuum here, right,

00:39:43,957 --> 00:39:45,510
and on one side, I think you have, sort of,

00:39:45,510 --> 00:39:47,250
what I would consider the standard offload like

00:39:47,250 --> 00:39:49,600
Checksum Offload, for example.

00:39:49,600 --> 00:39:51,570
And on the other side you have some

00:39:51,570 --> 00:39:53,380
more of the NPU like features where it's typical

00:39:53,380 --> 00:39:56,020
to think about it in terms of like a traditional silicon

00:39:56,020 --> 00:39:58,693
implementation such as like BPF offload, right?

00:40:00,946 --> 00:40:03,310
And I would say, somewhere in the middle is like

00:40:03,310 --> 00:40:05,380
the more flexible T-cam operations

00:40:05,380 --> 00:40:07,573
or flexible parsing support, right.

00:40:09,160 --> 00:40:11,160
But I would argue that we've never actually supported that

00:40:11,160 --> 00:40:14,570
very well in Linux. - You're right.

00:40:14,570 --> 00:40:17,130
- So where does that fit in your mental model

00:40:17,130 --> 00:40:18,130
of all those things?

00:40:19,440 --> 00:40:23,670
- Well, I think, I can speak from our case, you know,

00:40:23,670 --> 00:40:25,260
we take that T-cam and use it

00:40:26,840 --> 00:40:28,750
in a way that looks very fixed function

00:40:28,750 --> 00:40:30,330
in way we do our flow offload

00:40:30,330 --> 00:40:32,500
and it's moderately disappointing

00:40:32,500 --> 00:40:35,680
because it's not nearly as efficient as it could be.

00:40:35,680 --> 00:40:38,490
I mean, I think it would be nice to see that.

00:40:38,490 --> 00:40:40,430
Also, I mean, and I think you've experienced this too,

00:40:40,430 --> 00:40:42,220
it's a struggle to represent that

00:40:42,220 --> 00:40:44,640
in a generic programmatic way.

00:40:44,640 --> 00:40:46,890
- So, in my experience what you end up having then

00:40:46,890 --> 00:40:49,430
is proprietary solutions that you sell to very specific

00:40:49,430 --> 00:40:52,100
people and the Linux open source world never sees

00:40:52,100 --> 00:40:54,280
these solutions. - Yep.

00:40:54,280 --> 00:40:55,990
- And maybe that's a problem, right?

00:40:55,990 --> 00:40:57,280
- I think it is.

00:40:57,280 --> 00:40:58,770
I think it is for...

00:41:00,330 --> 00:41:03,446
Precisely because, maybe this is intentional,

00:41:03,446 --> 00:41:07,840
but the folks that receive those, now, have less eyes

00:41:07,840 --> 00:41:09,440
looking at it but also maybe have a little bit

00:41:09,440 --> 00:41:11,050
of an advantage, maybe that's...

00:41:12,690 --> 00:41:14,140
- [Man] This will be the last question, I think that's

00:41:14,140 --> 00:41:16,406
how much time we have. - All right.

00:41:16,406 --> 00:41:17,770
- I just think this is a curious situation where,

00:41:17,770 --> 00:41:20,090
actually, the hardware is more flexible

00:41:20,090 --> 00:41:22,040
than the software model we have for it.

00:41:23,137 --> 00:41:25,220
(laughs)

00:41:26,145 --> 00:41:28,308
- [Man] All right, thank you very much, Andy.

00:41:28,308 --> 00:41:31,391

YouTube URL: https://www.youtube.com/watch?v=cdmplARVm8U


