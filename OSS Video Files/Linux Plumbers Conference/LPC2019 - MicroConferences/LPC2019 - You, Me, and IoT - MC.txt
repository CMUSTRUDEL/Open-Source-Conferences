Title: LPC2019 - You, Me, and IoT - MC
Publication date: 2019-11-18
Playlist: LPC2019 - MicroConferences
Description: 
	You, Me, and IoT - MC
Captions: 
	00:00:00,649 --> 00:00:05,639
- Okay, so, UniPro just provides some physical transport,

00:00:05,639 --> 00:00:08,919
but there is no application layer on top of it.

00:00:08,919 --> 00:00:11,419
So, that's where come Greybus.

00:00:14,429 --> 00:00:16,462
Greybus has been designed to

00:00:16,462 --> 00:00:20,566
provide all the feature missing from UniPro

00:00:20,566 --> 00:00:23,617
such as hotplug and unplug,

00:00:23,617 --> 00:00:27,177
the discovery of the modules themselves,

00:00:27,177 --> 00:00:30,344
and also it provides some RPC protocol

00:00:33,540 --> 00:00:36,123
to communicate with the module.

00:00:38,693 --> 00:00:41,956
Basically, it provides some class and protocols.

00:00:41,956 --> 00:00:45,797
So, there is a protocol to control remotely

00:00:45,797 --> 00:00:47,630
the GPU of the module.

00:00:50,240 --> 00:00:54,073
I don't know if people there are know Greybus.

00:00:57,296 --> 00:01:01,296
- [Man] Who doesn't know Greybus?

00:01:02,934 --> 00:01:05,575
Do you remember the project Ariel Angelo has worked on?

00:01:05,575 --> 00:01:08,464
- [Man] All right, yeah.

00:01:08,464 --> 00:01:11,204
- [Man] On certainly.

00:01:11,204 --> 00:01:12,755
(speaking faintly)

00:01:12,755 --> 00:01:15,338
(man laughing)

00:01:18,745 --> 00:01:23,578
- Okay, so there is a lot of classes supported by Greybus.

00:01:25,258 --> 00:01:30,258
So for IoT, a couple of one are very interesting such as

00:01:30,267 --> 00:01:33,600
I2C, SPI, GPIO, eventually PWM and UART.

00:01:39,755 --> 00:01:44,755
So just to quietly understand how Greybus is working,

00:01:44,837 --> 00:01:49,228
we need to speak about how it was supposed to work

00:01:49,228 --> 00:01:54,228
on the smart phone before to explain how it will work

00:01:54,256 --> 00:01:57,188
if we want to use it for IoT.

00:01:57,188 --> 00:02:01,263
So the first thing here is the names of the host.

00:02:01,263 --> 00:02:04,096
So Greybus is running on the host.

00:02:05,670 --> 00:02:09,587
To under the hotplug the removal of the modules

00:02:12,955 --> 00:02:14,288
there was a SVC.

00:02:15,245 --> 00:02:18,458
So, it was a little micro controller,

00:02:18,458 --> 00:02:22,909
and this was just checking the presence of the module,

00:02:22,909 --> 00:02:26,326
and if a module was inserted, then it was

00:02:28,350 --> 00:02:31,921
controlling the switch to create some route

00:02:31,921 --> 00:02:35,254
between the CPU and the module inserted.

00:02:39,354 --> 00:02:43,384
So if we add the modules, the switch should create

00:02:43,384 --> 00:02:46,967
a route between the new module and the CPU.

00:02:51,527 --> 00:02:55,194
Each module is connected using an interface,

00:02:56,755 --> 00:02:58,833
a UniPro interface.

00:02:58,833 --> 00:03:02,333
So basically there is one UniPro bus here.

00:03:04,591 --> 00:03:09,117
The switch has some and so the switch will dispatch

00:03:09,117 --> 00:03:12,617
the data coming from this one to this one.

00:03:13,949 --> 00:03:17,616
A module could have more than one interface.

00:03:19,397 --> 00:03:22,194
Still I don't have an example of that, but it's cool.

00:03:22,194 --> 00:03:25,361
Once a module is ready to communicate,

00:03:26,260 --> 00:03:28,668
the route has been created,

00:03:28,668 --> 00:03:32,233
the module should emulate itself,

00:03:32,233 --> 00:03:35,249
and declare what is support.

00:03:35,249 --> 00:03:39,254
What feature it want to export to the host.

00:03:39,254 --> 00:03:41,087
So, here's an example.

00:03:42,273 --> 00:03:45,440
We are exporting GPIO and I-squared-C.

00:03:50,699 --> 00:03:51,616
Then, yeah?

00:03:52,948 --> 00:03:53,881
- [Man] Just if you could

00:03:53,881 --> 00:03:55,132
go through the explanation

00:03:55,132 --> 00:03:57,146
of Greybus as quick as you can because

00:03:57,146 --> 00:03:58,837
I think we're gonna wanna get into some questions.

00:03:58,837 --> 00:04:01,970
But you have a lot of expertise that we wanna try to

00:04:01,970 --> 00:04:05,414
get the interaction going quickly, so,

00:04:05,414 --> 00:04:08,733
just encouraging you to go fast.

00:04:08,733 --> 00:04:09,816
- Okay, okay.

00:04:10,874 --> 00:04:12,541
So, yeah on the end,

00:04:13,489 --> 00:04:17,191
the Greybus should create all the virtual interfaces

00:04:17,191 --> 00:04:22,012
and make usable everything exposed by the module

00:04:22,012 --> 00:04:23,095
and the host.

00:04:27,142 --> 00:04:31,892
So just here's an example of also device describe itself.

00:04:34,033 --> 00:04:37,869
So just there is the interface itself.

00:04:37,869 --> 00:04:39,577
We could have one or more.

00:04:39,577 --> 00:04:42,584
Basically if we have one then we have the bundles

00:04:42,584 --> 00:04:47,084
that describe some hardware feature such as as camera,

00:04:48,117 --> 00:04:50,509
of if you want to do GPU thing like that.

00:04:50,509 --> 00:04:53,099
And then the support that describe already has

00:04:53,099 --> 00:04:56,210
a protocol we want to use if we want to describe a

00:04:56,210 --> 00:04:59,960
GPIU, an I-squared-C, or any load of Greybus.

00:05:03,529 --> 00:05:07,029
Here is just a short example of a manifest

00:05:09,381 --> 00:05:12,050
that describes a device, a module.

00:05:12,050 --> 00:05:14,001
And once we insert the module,

00:05:14,001 --> 00:05:17,084
we have access to all the usual sysfs

00:05:20,173 --> 00:05:22,601
and IPI provided by the kernel.

00:05:22,601 --> 00:05:25,175
So, we could use as a GPIU in the module

00:05:25,175 --> 00:05:27,008
as it was on the host.

00:05:30,042 --> 00:05:33,042
So this feature very useful for IoT.

00:05:34,461 --> 00:05:36,628
So first, Greybus is free,

00:05:37,484 --> 00:05:40,045
is already present in the kernel.

00:05:40,045 --> 00:05:43,045
It has been merged in the kernel 4.9

00:05:45,762 --> 00:05:48,429
and now is going out of staging.

00:05:49,682 --> 00:05:52,932
So it's already there and ready to use.

00:05:54,323 --> 00:05:58,861
The idea with Greybus is to keep the intelligence

00:05:58,861 --> 00:06:02,431
of the application inside the host

00:06:02,431 --> 00:06:06,181
so you don't have to write a complex firmware

00:06:07,048 --> 00:06:08,296
to handle some tasks.

00:06:08,296 --> 00:06:10,490
So you just have to provide the firmware

00:06:10,490 --> 00:06:13,598
that could handle Greybus requests.

00:06:13,598 --> 00:06:17,570
And just the role of the driver and that is.

00:06:17,570 --> 00:06:20,820
And the host will do everything for us.

00:06:22,562 --> 00:06:27,395
So the idea will be to have one gateway, that one Greybus.

00:06:29,434 --> 00:06:32,517
So the gateway discovers the modules.

00:06:33,723 --> 00:06:38,723
So, if we use the TCP/IP we could use RFI delconf

00:06:39,459 --> 00:06:41,684
to discover module by example.

00:06:41,684 --> 00:06:44,870
We could use the reduce stack

00:06:44,870 --> 00:06:47,213
to discover our module features.

00:06:47,213 --> 00:06:49,117
And for the protocols, there is probably

00:06:49,117 --> 00:06:51,200
some discovery mechanism.

00:06:53,483 --> 00:06:56,323
Then once the module is detected,

00:06:56,323 --> 00:07:00,573
we could add it and load the driver we need to use.

00:07:01,604 --> 00:07:03,953
We could demonstrate here so start an application

00:07:03,953 --> 00:07:05,779
and start to use all these interfaces

00:07:05,779 --> 00:07:07,779
created by your Greybus.

00:07:08,812 --> 00:07:10,562
So we and see module.

00:07:15,665 --> 00:07:17,619
We just have to control the hardware.

00:07:17,619 --> 00:07:21,172
Just to have to provide the load of network drivers,

00:07:21,172 --> 00:07:25,104
and the small Greybus stack to handle the requests.

00:07:25,104 --> 00:07:28,900
And we let the gateway do everything.

00:07:28,900 --> 00:07:31,233
No need to write some driver

00:07:32,816 --> 00:07:34,513
if we have a Docker, just install.

00:07:34,513 --> 00:07:37,566
For example, we just have to provide

00:07:37,566 --> 00:07:39,457
the driver for I-squared-C.

00:07:39,457 --> 00:07:42,957
And let the OS do the I-squared-C request.

00:07:45,970 --> 00:07:49,970
So here is just an example of what it look like.

00:07:51,829 --> 00:07:54,073
Greybus if we use for IoT.

00:07:54,073 --> 00:07:57,156
So area remove the SVC and the switch

00:07:59,800 --> 00:08:02,633
since it was something specific to

00:08:03,512 --> 00:08:05,845
at last network smart phone.

00:08:07,299 --> 00:08:10,193
So we just replace them by the gbridge.

00:08:10,193 --> 00:08:13,315
So gbridge provides discovery

00:08:13,315 --> 00:08:16,729
and the hotplug unplug of features

00:08:16,729 --> 00:08:20,396
that was provided by the I2C and the switch.

00:08:23,100 --> 00:08:26,600
So all of gbridge is to connect to Greybus

00:08:30,542 --> 00:08:32,533
and then to dictate if something,

00:08:32,533 --> 00:08:34,607
if we have a new module to connect it,

00:08:34,607 --> 00:08:39,240
and then to pass all the data from the gbridge

00:08:39,240 --> 00:08:41,990
to the kernel using Netlink, yes?

00:08:45,201 --> 00:08:49,701
(member of audience speaking faintly)

00:08:55,854 --> 00:08:57,084
- [Man] I don't know how to use this thing.

00:08:57,084 --> 00:08:57,917
- [Man] The top of it.

00:08:57,917 --> 00:08:59,087
- Speaking to the top of it, okay.

00:08:59,087 --> 00:09:00,411
Oh the hell, it works, actually.

00:09:00,411 --> 00:09:02,050
All right, this is good.

00:09:02,050 --> 00:09:06,628
Anyway, gbridge lives in user space today, right?

00:09:06,628 --> 00:09:08,257
Is that? - Yes.

00:09:08,257 --> 00:09:09,667
- Is that where it'll continue to live?

00:09:09,667 --> 00:09:13,061
It seems kind of out of step to me

00:09:13,061 --> 00:09:15,715
to kind of to have something that's going out

00:09:15,715 --> 00:09:18,652
and talking to the hardware interfaces

00:09:18,652 --> 00:09:21,624
in order to get to Greybus underneath.

00:09:21,624 --> 00:09:24,046
Do we want to have gbridge live in user space

00:09:24,046 --> 00:09:26,388
or is there some way that that could be?

00:09:26,388 --> 00:09:28,191
- I think for many use cases,

00:09:28,191 --> 00:09:32,013
that it makes sense to have gbridge in user space.

00:09:32,013 --> 00:09:35,180
Basically, if we talk about Bluetooth,

00:09:37,234 --> 00:09:39,820
I don't know if it's easy to use Bluetooth

00:09:39,820 --> 00:09:42,069
inside the kernel space.

00:09:42,069 --> 00:09:46,311
In user space, we have very easy and nice BlueZ.

00:09:46,311 --> 00:09:50,384
You could use it to detect the Bluetooth modules,

00:09:50,384 --> 00:09:51,801
things like that.

00:09:52,636 --> 00:09:54,886
Same for TCP/IP.

00:09:56,121 --> 00:09:59,204
I before to use GBnet to use Netlink,

00:10:00,517 --> 00:10:04,351
try to use TCP/IP from the kernel.

00:10:04,351 --> 00:10:05,851
And it was a mess.

00:10:07,837 --> 00:10:11,077
Probably because you don't use the stack as depicted

00:10:11,077 --> 00:10:15,084
but it was very slow and was very hard to write.

00:10:15,084 --> 00:10:17,501
And when I switch to Netlink,

00:10:19,344 --> 00:10:21,561
again, a lot of performances,

00:10:21,561 --> 00:10:24,871
and was easier to write and to maintain.

00:10:24,871 --> 00:10:28,121
So I think from us of the IoT business,

00:10:32,363 --> 00:10:33,766
radio thing like that,

00:10:33,766 --> 00:10:36,100
it will be easier and more efficient

00:10:36,100 --> 00:10:38,036
to do it in user space.

00:10:38,036 --> 00:10:40,447
If we want to do something like

00:10:40,447 --> 00:10:43,589
using Greybus for USB, something I would like to use

00:10:43,589 --> 00:10:47,006
to do some prototyping, for in that case,

00:10:48,555 --> 00:10:52,388
it will be better to have it in the kernel but

00:10:53,604 --> 00:10:56,937
except for that, I don't think so, yeah.

00:11:00,207 --> 00:11:01,540
- All the experts in room, I mean

00:11:01,540 --> 00:11:03,079
we're trying to get this to be a discussion

00:11:03,079 --> 00:11:05,579
as much as possible, right so.

00:11:07,601 --> 00:11:08,858
Darius, where's the?

00:11:08,858 --> 00:11:11,941
(chattering faintly)

00:11:13,546 --> 00:11:14,879
- [Man] Anybody?

00:11:16,119 --> 00:11:20,067
- [Man] Are you getting from the kernel to gbridge today?

00:11:20,067 --> 00:11:23,727
Are you tying it to the Greybus core?

00:11:23,727 --> 00:11:26,227
- Currently, it use a Netlink.

00:11:28,540 --> 00:11:31,641
- So you have a separate module?

00:11:31,641 --> 00:11:33,507
- Yes. - You have a Netlink, okay.

00:11:33,507 --> 00:11:36,844
- There is a Netlink module that create

00:11:36,844 --> 00:11:39,309
that has act like an AP.

00:11:39,309 --> 00:11:40,707
- [Man] Okay, so why haven't

00:11:40,707 --> 00:11:42,624
you send that up to me?

00:11:43,653 --> 00:11:46,723
- I send an RFC three years ago.

00:11:46,723 --> 00:11:50,505
And since I didn't have the time to work on it.

00:11:50,505 --> 00:11:51,669
- [Man] Okay, I remember that was

00:11:51,669 --> 00:11:52,540
a long time ago, okay.

00:11:52,540 --> 00:11:56,118
- So since nnow Greybus is moving out of staging,

00:11:56,118 --> 00:11:59,579
I think I will send a new batch.

00:11:59,579 --> 00:12:00,835
- [Man] Okay good, all right thanks.

00:12:00,835 --> 00:12:02,668
- With some fix, yeah.

00:12:06,045 --> 00:12:08,628
Okay, any other question, okay.

00:12:14,563 --> 00:12:18,302
So here is just an example of what a bulk

00:12:18,302 --> 00:12:20,699
that could go on a Greybus.

00:12:20,699 --> 00:12:24,959
I still have not write the firmware for it.

00:12:24,959 --> 00:12:27,138
But the idea will be to have

00:12:27,138 --> 00:12:30,779
a small production system such as diff here

00:12:30,779 --> 00:12:33,971
to run it on a small microcontroller

00:12:33,971 --> 00:12:35,388
such as tier one.

00:12:37,256 --> 00:12:40,515
And just write to Greybus stack

00:12:40,515 --> 00:12:43,265
to control the peripheral drivers

00:12:44,183 --> 00:12:48,850
to control the drivers provided by the operating system.

00:12:49,853 --> 00:12:52,956
Basically, to implement, to use the GPIU driver

00:12:52,956 --> 00:12:55,604
to control the GPIU, things like that.

00:12:55,604 --> 00:12:56,857
So using an operating system

00:12:56,857 --> 00:13:00,044
is just as the fear will make

00:13:00,044 --> 00:13:03,877
Greybus very easy to use in a microcontroller.

00:13:04,854 --> 00:13:07,771
Still I didn't did by lack of time.

00:13:10,091 --> 00:13:12,174
I hope soon I will do it.

00:13:15,586 --> 00:13:18,919
So currently, gbridge only supported two

00:13:21,234 --> 00:13:24,417
no, we supported two protocol to,

00:13:24,417 --> 00:13:29,377
it supports Bluetooth, and it support the TCP/IP.

00:13:29,377 --> 00:13:31,511
I've not tested them for a long time.

00:13:31,511 --> 00:13:34,263
So I know if Bluetooth is still working

00:13:34,263 --> 00:13:38,022
and I know that TCP/IP is broken

00:13:38,022 --> 00:13:40,855
but some people are working on it.

00:13:41,695 --> 00:13:44,695
So hopefully, it will be fixed soon.

00:13:51,010 --> 00:13:54,735
So there is a couple of limitations

00:13:54,735 --> 00:13:58,294
if we want to use Greybus for IoT.

00:13:58,294 --> 00:14:00,461
Performances could be one.

00:14:01,346 --> 00:14:02,429
The protocol,

00:14:06,037 --> 00:14:09,577
some protocol only send one RPC a time.

00:14:09,577 --> 00:14:12,750
So if you have a high latency

00:14:12,750 --> 00:14:15,167
in your communication medium,

00:14:18,219 --> 00:14:20,289
it could break the performances,

00:14:20,289 --> 00:14:24,481
since we have to wait until the RPC come to Greybus

00:14:24,481 --> 00:14:26,363
and then come to the module,

00:14:26,363 --> 00:14:29,984
and then come back, we focus on another one.

00:14:29,984 --> 00:14:31,845
For IoT, it should not be a big issue

00:14:31,845 --> 00:14:34,928
because the bulk, the medium are slow

00:14:36,679 --> 00:14:40,268
but in same time, there is not a lot of data to exchange.

00:14:40,268 --> 00:14:43,406
So if we take the temperatures and so on,

00:14:43,406 --> 00:14:45,170
we just want to measure it,

00:14:45,170 --> 00:14:50,170
to get temperature once for it, for a minute basically.

00:14:50,238 --> 00:14:51,322
- [Man] I'm sorry?

00:14:51,322 --> 00:14:53,025
So when you say not much data,

00:14:53,025 --> 00:14:55,408
how much data are you actually talking about?

00:14:55,408 --> 00:14:57,299
I mean what kind of, if you have like

00:14:57,299 --> 00:14:58,954
temperature sensors with just a few bytes,

00:14:58,954 --> 00:15:02,621
how much overhead is Greybus adding to that?

00:15:03,571 --> 00:15:05,610
If you transfer for example over

00:15:05,610 --> 00:15:07,244
a wireless link or something.

00:15:07,244 --> 00:15:10,141
- I think data is eight byte,

00:15:10,141 --> 00:15:14,141
and after that, you could also add some byte for

00:15:15,308 --> 00:15:18,799
if you consider something in I-squared-C command.

00:15:18,799 --> 00:15:20,750
You will have also the override of

00:15:20,750 --> 00:15:23,054
the I-squared-C command itself.

00:15:23,054 --> 00:15:26,600
Just the data you will get from the--

00:15:26,600 --> 00:15:30,767
- [Man] Okay good, that's the number for me, next.

00:15:35,621 --> 00:15:38,741
- So after there is I think something important missing,

00:15:38,741 --> 00:15:41,045
which is remote wake up.

00:15:41,045 --> 00:15:42,462
So you, the poor,

00:15:45,547 --> 00:15:48,017
there is some protocol to control

00:15:48,017 --> 00:15:50,371
the way of the model.

00:15:50,371 --> 00:15:53,416
Still there is some features

00:15:53,416 --> 00:15:55,823
such as the remote wake up that is missing.

00:15:55,823 --> 00:15:58,156
So if we suspend the module,

00:15:59,213 --> 00:16:01,974
there is nothing to remote it

00:16:01,974 --> 00:16:04,233
to wake up it from the OS.

00:16:04,233 --> 00:16:06,075
So it do have to wake up itself

00:16:06,075 --> 00:16:10,468
and to send the data if there's something happening.

00:16:10,468 --> 00:16:13,379
That something missing itself should be that.

00:16:13,379 --> 00:16:16,712
And as we talked, there is some overhead

00:16:17,775 --> 00:16:19,806
due to the protocol.

00:16:19,806 --> 00:16:23,639
So this could absent consequences of the core.

00:16:26,005 --> 00:16:29,005
And currently, there is no security.

00:16:30,299 --> 00:16:34,049
So the data are sent as it, we put encryption

00:16:35,535 --> 00:16:38,202
between gbridge and the modules.

00:16:39,364 --> 00:16:42,053
So for Bluetooth, it could be okay

00:16:42,053 --> 00:16:46,438
since Bluetooth could provide some encryption.

00:16:46,438 --> 00:16:48,554
For TCP/IP, it could be initiation

00:16:48,554 --> 00:16:51,315
and for other protocols as well.

00:16:51,315 --> 00:16:55,065
So I know Chris is working on the encryption.

00:16:56,332 --> 00:16:58,999
So we are going to have it soon.

00:16:59,975 --> 00:17:01,925
- You've got some fun stuff you showed earlier

00:17:01,925 --> 00:17:03,830
today with the encryption stuff working

00:17:03,830 --> 00:17:05,173
so that was kinda good.

00:17:05,173 --> 00:17:07,048
I'm gonna do a little bit of an asynchronous question here

00:17:07,048 --> 00:17:09,381
'cause I wanna ask you about

00:17:11,015 --> 00:17:11,911
one of the questions that's come up

00:17:11,911 --> 00:17:14,937
on the list which is manifest

00:17:14,937 --> 00:17:16,602
and additional platform data

00:17:16,602 --> 00:17:17,944
because a lot of these sensors

00:17:17,944 --> 00:17:20,944
that you wanna connect up don't have

00:17:22,401 --> 00:17:23,827
the necessary platform data.

00:17:23,827 --> 00:17:25,840
So a manifest file on its own is not gonna give you,

00:17:25,840 --> 00:17:28,145
say an interrupt for an accelerometer.

00:17:28,145 --> 00:17:30,130
So how do we get an accelerometer

00:17:30,130 --> 00:17:32,754
to just to show up in this environment.

00:17:32,754 --> 00:17:34,994
How have you envisioned something like an accelerometer

00:17:34,994 --> 00:17:39,927
that has an interrupt dependency to show up automatically

00:17:39,927 --> 00:17:43,780
and where would, and what do you think

00:17:43,780 --> 00:17:45,606
about the suggestion that we add

00:17:45,606 --> 00:17:48,837
additional platform data to manifest

00:17:48,837 --> 00:17:52,504
in some reasonable backwards compatible way?

00:17:53,830 --> 00:17:57,747
- I think we are talking about the DTBO, right?

00:17:59,560 --> 00:18:01,274
To use some DTB at some point.

00:18:01,274 --> 00:18:03,349
- At some point, we talked about DTBO

00:18:03,349 --> 00:18:06,713
but the thing with DTBO is DTBO is not upstream.

00:18:06,713 --> 00:18:10,046
And that we've, I don't know if Roland's

00:18:11,516 --> 00:18:13,372
team around here but...

00:18:13,372 --> 00:18:15,481
(member of audience speaking faintly)

00:18:15,481 --> 00:18:18,193
- Frank, so I saw Frank.

00:18:18,193 --> 00:18:21,660
I saw Frank wandering the house at lunch, so.

00:18:21,660 --> 00:18:24,723
At least I think it was Frank.

00:18:24,723 --> 00:18:29,723
But he has pushed back on using overlays in the mainline.

00:18:30,064 --> 00:18:32,783
I think security is one of them

00:18:32,783 --> 00:18:35,616
with device tree overlays dynamic,

00:18:36,769 --> 00:18:38,707
they can crop up other issues.

00:18:38,707 --> 00:18:40,784
I mean yes, we can have overlays applied statically

00:18:40,784 --> 00:18:44,201
but it seems like this should be dynamic,

00:18:45,772 --> 00:18:47,088
especially based on how dynamic

00:18:47,088 --> 00:18:49,469
these different devices are.

00:18:49,469 --> 00:18:52,431
So is there a way that we can put them

00:18:52,431 --> 00:18:54,382
into the platform data?

00:18:54,382 --> 00:18:56,215
In the manifest, yeah?

00:18:58,320 --> 00:18:59,932
Greg says yes, so yes.

00:18:59,932 --> 00:19:03,741
(audience laughing)

00:19:03,741 --> 00:19:04,974
- Okay.

00:19:04,974 --> 00:19:06,355
- You're good with that approach.

00:19:06,355 --> 00:19:09,405
We can like maybe work together on that?

00:19:09,405 --> 00:19:12,738
- Yeah, I don't know how we could do it.

00:19:14,085 --> 00:19:15,429
I'm not sure to understand.

00:19:15,429 --> 00:19:18,346
So I know, I remember we were using

00:19:19,897 --> 00:19:23,397
some drivers to handle that at some point.

00:19:24,247 --> 00:19:27,406
We were outputting it in the driver,

00:19:27,406 --> 00:19:30,323
at least to handle internet kernel.

00:19:31,721 --> 00:19:36,129
I don't know how we could do it quickly now.

00:19:36,129 --> 00:19:37,639
- So for what you've designed

00:19:37,639 --> 00:19:39,365
and talked about, you don't need it.

00:19:39,365 --> 00:19:42,132
But what Jason's talking about, you do need it.

00:19:42,132 --> 00:19:44,400
Which took me a long time to figure out, sorry.

00:19:44,400 --> 00:19:45,806
That you guys, I knew it.

00:19:45,806 --> 00:19:48,757
But no, we always discuss this

00:19:48,757 --> 00:19:50,561
we would have to solve it someday.

00:19:50,561 --> 00:19:52,245
We were hoping four years ago

00:19:52,245 --> 00:19:55,674
that share-a-load will be banned.

00:19:55,674 --> 00:19:57,294
But if we do something like that,

00:19:57,294 --> 00:19:59,300
I don't, we'd never solve a problem

00:19:59,300 --> 00:20:00,397
with doing something like that.

00:20:00,397 --> 00:20:02,219
We can do another way around.

00:20:02,219 --> 00:20:04,178
For the amount of data is very tiny

00:20:04,178 --> 00:20:07,592
and very specific per device like I just see

00:20:07,592 --> 00:20:09,425
you need these things.

00:20:10,475 --> 00:20:11,991
- The challenge gets to be we need to do it

00:20:11,991 --> 00:20:14,636
for every single device and right for if we'll--

00:20:14,636 --> 00:20:16,487
- Well, every single protocol type,

00:20:16,487 --> 00:20:18,754
we'll have unique things.

00:20:18,754 --> 00:20:20,362
- Whatever has additional augmented data.

00:20:20,362 --> 00:20:22,322
If it is, all it is is an interrupt,

00:20:22,322 --> 00:20:24,746
then like for every single device

00:20:24,746 --> 00:20:26,699
that all it needs extra is an interrupt.

00:20:26,699 --> 00:20:27,982
And then you get into this some things

00:20:27,982 --> 00:20:30,460
like the SPI displays that take like

00:20:30,460 --> 00:20:31,472
five different parameters.

00:20:31,472 --> 00:20:33,664
But those are not the norm, right.

00:20:33,664 --> 00:20:35,622
Usually it's just I need to reset a line

00:20:35,622 --> 00:20:37,168
and the interrupt, and like yeah.

00:20:37,168 --> 00:20:39,202
You don't have to have that many different.

00:20:39,202 --> 00:20:41,058
- No and if we steal from the device tree overlay,

00:20:41,058 --> 00:20:42,867
I've no problem with that.

00:20:42,867 --> 00:20:44,569
It's the same idea, right.

00:20:44,569 --> 00:20:45,886
Just do the same thing.

00:20:45,886 --> 00:20:47,903
We can and if we ever get real device tree overlay,

00:20:47,903 --> 00:20:50,241
we can merge into that eventually.

00:20:50,241 --> 00:20:51,074
But if we're putting this back

00:20:51,074 --> 00:20:54,204
in a backwardly compatible way,

00:20:54,204 --> 00:20:55,704
we should be fine.

00:20:59,567 --> 00:21:01,457
- [Man] I'm trying to understand a little bit

00:21:01,457 --> 00:21:04,374
of both your Greybus for IoT space.

00:21:05,695 --> 00:21:07,460
I just read Greybus stuff,

00:21:07,460 --> 00:21:09,709
and I understand where it's coming in the phone space,

00:21:09,709 --> 00:21:10,947
where okay. - Yes.

00:21:10,947 --> 00:21:14,614
- And I can also see that it has some issues

00:21:16,137 --> 00:21:19,889
that USB and PCI, and what was that?

00:21:19,889 --> 00:21:21,760
One was terrible and one was FireWire, right?

00:21:21,760 --> 00:21:23,435
You could just DMA to and from memory here and there.

00:21:23,435 --> 00:21:26,375
That's kind of really bad thing, right?

00:21:26,375 --> 00:21:28,406
So I get the impression that you want something

00:21:28,406 --> 00:21:31,887
a little bit more resilient than that, okay.

00:21:31,887 --> 00:21:34,250
And then you start talking about Bluetooth.

00:21:34,250 --> 00:21:36,403
And I totally missed that, okay.

00:21:36,403 --> 00:21:39,217
So what I understood is this was a way

00:21:39,217 --> 00:21:42,432
to talk with wires within a device

00:21:42,432 --> 00:21:45,307
that might be modular but that

00:21:45,307 --> 00:21:47,615
mostly you don't hand out to random strangers

00:21:47,615 --> 00:21:49,653
to plug random things into your device.

00:21:49,653 --> 00:21:51,308
But the things that you do plug in

00:21:51,308 --> 00:21:54,622
may be a little bit, you may not totally trust them.

00:21:54,622 --> 00:21:56,163
You don't want them DMA-ing.

00:21:56,163 --> 00:21:58,146
You just start talking about wireless,

00:21:58,146 --> 00:22:00,839
with lots of wireless protocols, 15.4,

00:22:00,839 --> 00:22:03,862
Bluetooth itself, v-six over Bluetooth,

00:22:03,862 --> 00:22:05,752
all sorts of stuff that really do work well

00:22:05,752 --> 00:22:08,682
and are being used in IoT space right now.

00:22:08,682 --> 00:22:11,167
But what I'm hearing is this is about

00:22:11,167 --> 00:22:12,648
how to talk to a microcontroller

00:22:12,648 --> 00:22:15,516
to run some GPIO pins that might do SPI

00:22:15,516 --> 00:22:19,693
to a temperature sensor and we need an interrupt

00:22:19,693 --> 00:22:21,601
somewhere back, right?

00:22:21,601 --> 00:22:22,880
- Yes. - And I'm just trying

00:22:22,880 --> 00:22:25,454
to understand like when would you really

00:22:25,454 --> 00:22:27,371
use this in this space?

00:22:28,256 --> 00:22:30,653
It sounds like it's like a LEGO version of IoT,

00:22:30,653 --> 00:22:32,565
where you're just gonna assemble some stuff out of things.

00:22:32,565 --> 00:22:35,427
That will be really cool but I'm just trying

00:22:35,427 --> 00:22:36,678
to understand that actually LEGO

00:22:36,678 --> 00:22:37,923
was actually a really good form factor

00:22:37,923 --> 00:22:39,340
for doing it too.

00:22:40,320 --> 00:22:44,395
And LEGO probably would hire you to make this work

00:22:44,395 --> 00:22:45,453
'cause like you want it.

00:22:45,453 --> 00:22:47,004
But is that, was that what I understand

00:22:47,004 --> 00:22:48,001
'cause I just not really getting

00:22:48,001 --> 00:22:52,940
what the threat model is that we have to deal with.

00:22:52,940 --> 00:22:55,857
- Yes, so you correctly understand that.

00:22:55,857 --> 00:22:59,092
So yeah, we are really just control

00:22:59,092 --> 00:23:04,092
the I/Os from the remote modules from the OS, so.

00:23:07,475 --> 00:23:09,824
- [Man] No, the guy next to me said door locks

00:23:09,824 --> 00:23:12,002
and I said no because the door lock

00:23:12,002 --> 00:23:14,507
either has a 15.4, or Wi-Fi, or something

00:23:14,507 --> 00:23:17,345
interfaced to it, and we need to click it

00:23:17,345 --> 00:23:20,135
or it's integrated in part of the things.

00:23:20,135 --> 00:23:21,487
It's not the door lock itself,

00:23:21,487 --> 00:23:25,237
it's the GPIO that runs the door lock, is it?

00:23:26,182 --> 00:23:28,903
- Greybus is to provide a generic protocol

00:23:28,903 --> 00:23:32,239
to describe those devices on the other side of a transport.

00:23:32,239 --> 00:23:33,937
So you'd use Bluetooth way to transport,

00:23:33,937 --> 00:23:36,395
you'd use whatever, Greybus did not define

00:23:36,395 --> 00:23:39,513
a transport layer or a physical layer there.

00:23:39,513 --> 00:23:41,420
So you can tunnel across the networking,

00:23:41,420 --> 00:23:45,003
you tunnel across USB over and then UniPro.

00:23:46,011 --> 00:23:48,195
You can tunnel over anything you want.

00:23:48,195 --> 00:23:50,094
It's just a protocol that describes

00:23:50,094 --> 00:23:52,228
a device on the other side that you can talk to.

00:23:52,228 --> 00:23:53,606
- [Man] The other side of a?

00:23:53,606 --> 00:23:55,912
- Other side of that wire.

00:23:55,912 --> 00:23:57,943
- [Man] Of the wire, which is a wire?

00:23:57,943 --> 00:24:00,862
- That can be or the other side of a connection.

00:24:00,862 --> 00:24:04,028
- [Man] So I'm taking exception with that

00:24:04,028 --> 00:24:04,952
other side of the connection.

00:24:04,952 --> 00:24:08,606
Because it's a significant different threat model

00:24:08,606 --> 00:24:10,509
when you say it's not just,

00:24:10,509 --> 00:24:12,915
I can't physically know what's connected.

00:24:12,915 --> 00:24:13,915
- [Man] Yes.

00:24:15,671 --> 00:24:17,020
- You can't physically know what's connected.

00:24:17,020 --> 00:24:19,584
You're trusting the module to describe itself

00:24:19,584 --> 00:24:22,127
in a way that it's not lying.

00:24:22,127 --> 00:24:23,752
- [Man] So that's what I'm saying.

00:24:23,752 --> 00:24:25,839
So we're writing into remote attestation

00:24:25,839 --> 00:24:26,966
and all those other stuff here.

00:24:26,966 --> 00:24:28,363
- Okay, but so the worst thing

00:24:28,363 --> 00:24:30,771
if a device lies is you send the data

00:24:30,771 --> 00:24:34,039
for a serial port that are really isn't a serial port.

00:24:34,039 --> 00:24:36,029
- [Man] Okay, so you're trusting it to not lie

00:24:36,029 --> 00:24:37,409
about its type, it's what you're saying?

00:24:37,409 --> 00:24:38,242
- Correct.

00:24:38,242 --> 00:24:39,488
- [Man] Yeah okay, so like I get that

00:24:39,488 --> 00:24:41,860
but I still don't understand how does that

00:24:41,860 --> 00:24:46,576
fit into the, what is the space that this fits into that

00:24:46,576 --> 00:24:50,268
and your posting says that USB was inappropriate for

00:24:50,268 --> 00:24:52,851
and 15.4 was inappropriate for?

00:24:55,219 --> 00:24:57,346
- That was a hardware decision not made by me.

00:24:57,346 --> 00:24:59,310
- Okay, fair enough, okay fair enough.

00:24:59,310 --> 00:25:03,125
- But the goal of this was to not allow DMA access to,

00:25:03,125 --> 00:25:04,842
you can plug in an untrusted devices,

00:25:04,842 --> 00:25:06,176
it's not gonna hurt your host.

00:25:06,176 --> 00:25:07,032
- Okay. - Except by what

00:25:07,032 --> 00:25:09,805
you decide to send to that device.

00:25:09,805 --> 00:25:12,162
- Okay. - The audio data be it.

00:25:12,162 --> 00:25:13,409
If it's gonna say it's a serial port,

00:25:13,409 --> 00:25:14,384
you're gonna start saying,

00:25:14,384 --> 00:25:15,537
"Oh, that's a really a serial port.

00:25:15,537 --> 00:25:17,236
"Let's send all your data across."

00:25:17,236 --> 00:25:21,577
So it's a secured way, it's not gonna mess with you

00:25:21,577 --> 00:25:23,118
like DMA and all that stuff.

00:25:23,118 --> 00:25:24,548
- Okay, so I get, I get it. - So we have no way

00:25:24,548 --> 00:25:26,741
to describe, there's no way today to describe

00:25:26,741 --> 00:25:30,602
a GPIO port or a USB device or a sorry,

00:25:30,602 --> 00:25:32,927
I2C device, or anyone of those things

00:25:32,927 --> 00:25:34,389
in a standardized way.

00:25:34,389 --> 00:25:35,644
No protocol has that.

00:25:35,644 --> 00:25:37,190
- Got it, I understand now. - This does provides that.

00:25:37,190 --> 00:25:39,107
- [Man] Thank you Greg.

00:25:40,179 --> 00:25:42,730
- I just wanted to maybe suggest also that

00:25:42,730 --> 00:25:45,369
it was potentially UniPro, did the UniPro

00:25:45,369 --> 00:25:49,456
have trusted platform sort of stuff on it,

00:25:49,456 --> 00:25:51,728
where it would identify it's all securely to the--

00:25:51,728 --> 00:25:53,508
- No. - No, okay.

00:25:53,508 --> 00:25:56,035
- UniPro defined the physical layer, right,

00:25:56,035 --> 00:25:57,077
and that was about it.

00:25:57,077 --> 00:25:58,285
- Yeah, that definitely. - It was like it left

00:25:58,285 --> 00:26:00,455
the whole data to us.

00:26:00,455 --> 00:26:02,786
That's why we had to make this.

00:26:02,786 --> 00:26:04,154
And we gave this to the UniPro people

00:26:04,154 --> 00:26:07,154
but they are making note internally.

00:26:09,083 --> 00:26:10,006
- Yeah.

00:26:10,006 --> 00:26:11,498
- [Man] I think as--

00:26:11,498 --> 00:26:13,245
(chattering faintly)

00:26:13,245 --> 00:26:15,859
- So thank you in the last kind of block

00:26:15,859 --> 00:26:17,141
we have of the day, I think we're gonna

00:26:17,141 --> 00:26:18,291
get back to this pretty heavily

00:26:18,291 --> 00:26:20,231
'cause we're gonna talk about use cases

00:26:20,231 --> 00:26:21,981
in that presentation.

00:26:23,196 --> 00:26:25,237
This was kind of, Alexander's kind of

00:26:25,237 --> 00:26:26,966
got the underlying technology idea,

00:26:26,966 --> 00:26:28,123
and that's what we're kind of

00:26:28,123 --> 00:26:29,782
building off of some of our thoughts

00:26:29,782 --> 00:26:31,120
that we're gonna close with,

00:26:31,120 --> 00:26:32,737
that we wanted to make sure to bring those up.

00:26:32,737 --> 00:26:36,399
I wanted to try to respect the next presenter's time

00:26:36,399 --> 00:26:37,352
and get that topic.

00:26:37,352 --> 00:26:40,245
Do you have anything, which you wanna wrap up,

00:26:40,245 --> 00:26:44,245
closing thoughts as our next presenter comes up?

00:26:46,444 --> 00:26:48,834
- Yeah, so just to compare the result

00:26:48,834 --> 00:26:50,834
of what remaining to do.

00:26:52,100 --> 00:26:52,933
Just if...

00:26:56,923 --> 00:27:00,006
So just upstream the Netlink modules.

00:27:02,463 --> 00:27:04,880
I still have to write a stack

00:27:05,932 --> 00:27:07,932
for an operating system.

00:27:09,173 --> 00:27:11,923
Eventually, add some other medium

00:27:16,207 --> 00:27:19,804
and so if some people are interested in it,

00:27:19,804 --> 00:27:23,054
don't have a lot of time to development

00:27:24,499 --> 00:27:27,710
but I will be happy to respond to your question

00:27:27,710 --> 00:27:29,875
and things like that by email

00:27:29,875 --> 00:27:33,175
or to see, to review your request,

00:27:33,175 --> 00:27:34,839
something like that.

00:27:34,839 --> 00:27:36,061
So that's it.

00:27:36,061 --> 00:27:39,228
(audience applauding)

00:27:41,019 --> 00:27:41,930
- If you can go back a slide,

00:27:41,930 --> 00:27:43,772
we'll just take these notes off your slide.

00:27:43,772 --> 00:27:45,553
- Yeah, sure.

00:27:45,553 --> 00:27:47,208
You want me to, yeah?

00:27:47,208 --> 00:27:48,337
- Yeah.

00:27:48,337 --> 00:27:50,037
- This one?

00:27:50,037 --> 00:27:53,059
- Stay there, I think go to the last one.

00:27:53,059 --> 00:27:55,107
- The last one, yeah.

00:27:55,107 --> 00:27:58,298
(member of audience speaking faintly)

00:27:58,298 --> 00:27:59,131
- Which one?

00:27:59,131 --> 00:28:00,784
- One slide back, I think.

00:28:00,784 --> 00:28:01,905
- Oh yes.

00:28:01,905 --> 00:28:02,905
- Thank you.

00:28:04,306 --> 00:28:07,389
(chattering faintly)

00:28:13,974 --> 00:28:15,967
- Oh no, you gotta leave the laptop.

00:28:15,967 --> 00:28:18,050
I think mine is in there.

00:28:20,876 --> 00:28:22,116
Is it your laptop?

00:28:22,116 --> 00:28:23,533
- It's my laptop.

00:28:25,866 --> 00:28:27,123
- My laptop?

00:28:27,123 --> 00:28:30,206
(chattering faintly)

00:28:36,021 --> 00:28:37,514
- [Man] Yes, it doesn't help when the organizer

00:28:37,514 --> 00:28:40,900
show up five minutes before it starts.

00:28:40,900 --> 00:28:45,658
(member of audience speaking faintly)

00:28:45,658 --> 00:28:50,158
- So I'm supposed to use that other laptop, yes sorry.

00:28:56,691 --> 00:28:57,556
- [Man] I think for the next time,

00:28:57,556 --> 00:29:01,144
get all the slides on one laptop first.

00:29:01,144 --> 00:29:03,381
- Well, we got the USB driver,

00:29:03,381 --> 00:29:04,992
just didn't have the laptop.

00:29:04,992 --> 00:29:06,119
(member of audience speaking faintly)

00:29:06,119 --> 00:29:06,952
- Okay now.

00:29:06,952 --> 00:29:10,090
- Yeah, she's got a laptop right now.

00:29:10,090 --> 00:29:11,705
Yeah, she's got it.

00:29:11,705 --> 00:29:14,788
(chattering faintly)

00:29:18,256 --> 00:29:21,205
- Yeah, she's gotta unpack, this is...

00:29:21,205 --> 00:29:22,838
I wish we had a...

00:29:22,838 --> 00:29:23,671
- Yeah.

00:29:25,431 --> 00:29:27,576
- Okay, there we go.

00:29:27,576 --> 00:29:29,493
- This is, there we go.

00:29:35,092 --> 00:29:37,628
This was just so that all of you got a mental grip, okay.

00:29:37,628 --> 00:29:38,989
- You got the mic on?

00:29:38,989 --> 00:29:40,906
- He made sure of that.

00:29:42,322 --> 00:29:43,345
- At first, I said the same things.

00:29:43,345 --> 00:29:45,861
But later, we can get into discussion.

00:29:45,861 --> 00:29:48,089
- Yes, I totally did that.

00:29:48,089 --> 00:29:49,423
- [Man] Found the USB stick now?

00:29:49,423 --> 00:29:53,796
Okay, she's got the USB stick on there, yeah.

00:29:53,796 --> 00:29:56,879
(chattering faintly)

00:30:04,386 --> 00:30:05,910
- Okay, I need a little more help.

00:30:05,910 --> 00:30:07,471
How to make it use this?

00:30:07,471 --> 00:30:10,554
(chattering faintly)

00:30:14,159 --> 00:30:17,409
- Should have like a two, two monitors.

00:30:23,139 --> 00:30:24,222
- Yes please.

00:30:25,247 --> 00:30:28,330
(chattering faintly)

00:30:44,008 --> 00:30:47,258
- Okay, awesome, everything is awesome.

00:30:49,210 --> 00:30:52,009
(Jason laughing)

00:30:52,009 --> 00:30:53,581
At least we have the slides.

00:30:53,581 --> 00:30:56,414
Okay, we're gonna go through this.

00:30:57,829 --> 00:30:59,579
Over-the-Air Updates.

00:31:00,477 --> 00:31:02,613
It's super important for IoT.

00:31:02,613 --> 00:31:05,168
And just a fact that all of you are in this room,

00:31:05,168 --> 00:31:07,270
it means you all agree with me.

00:31:07,270 --> 00:31:09,997
So let's see what's the state of the union is.

00:31:09,997 --> 00:31:12,959
Can we make it easier, et cetera, et cetera?

00:31:12,959 --> 00:31:15,608
So OTA and IoT, what do we need?

00:31:15,608 --> 00:31:17,892
Their implementation trade-offs

00:31:17,892 --> 00:31:19,721
and really the meat of the discussion

00:31:19,721 --> 00:31:22,801
that I really wanna get us to is kernel hooks

00:31:22,801 --> 00:31:24,514
just to make this easier.

00:31:24,514 --> 00:31:25,931
Things like that.

00:31:26,981 --> 00:31:29,718
So we need, Over-the-Air application

00:31:29,718 --> 00:31:32,486
that we can distribute our security patches,

00:31:32,486 --> 00:31:34,180
we can issue hard fixes.

00:31:34,180 --> 00:31:36,057
- Sorry, you're not using the microphone, I'm sorry.

00:31:36,057 --> 00:31:38,300
- I'm sorry, hello there, okay.

00:31:38,300 --> 00:31:40,716
(Jason laughing)

00:31:40,716 --> 00:31:41,549
- Hello.

00:31:41,549 --> 00:31:42,414
- Hello, hello, hello.

00:31:42,414 --> 00:31:46,668
So we want OTA so that we can distribute security patches,

00:31:46,668 --> 00:31:48,547
so we can issue bug fixes,

00:31:48,547 --> 00:31:51,630
and so we can introduce new features.

00:31:52,896 --> 00:31:56,003
And what's out there in terms of requirements?

00:31:56,003 --> 00:31:57,039
Quite a lot.

00:31:57,039 --> 00:31:58,469
It has to work across the whole

00:31:58,469 --> 00:32:00,969
software stack, even hardware.

00:32:01,814 --> 00:32:03,651
So it could be your bootloader,

00:32:03,651 --> 00:32:06,861
your firmware, your kernel, your application.

00:32:06,861 --> 00:32:08,041
It's got to be robust.

00:32:08,041 --> 00:32:09,676
You don't want something to drop in the middle

00:32:09,676 --> 00:32:11,295
and become a brick.

00:32:11,295 --> 00:32:15,093
You want it to be atomic so that whatever happens,

00:32:15,093 --> 00:32:16,911
it's either the old state or the new state

00:32:16,911 --> 00:32:18,862
but nothing in between.

00:32:18,862 --> 00:32:20,459
You'd like it to be automated

00:32:20,459 --> 00:32:21,733
so that somebody doesn't have to go

00:32:21,733 --> 00:32:23,978
and say, "Do it right now."

00:32:23,978 --> 00:32:26,886
Auditable, who did what, when, where, why.

00:32:26,886 --> 00:32:28,932
Preserve any user data in case

00:32:28,932 --> 00:32:31,322
you've configured some endpoint

00:32:31,322 --> 00:32:34,641
from which you wanna pull down your updates.

00:32:34,641 --> 00:32:37,028
You want it to be trusted.

00:32:37,028 --> 00:32:39,383
And of course, everything should be encrypted.

00:32:39,383 --> 00:32:41,516
All your transmission and that kind of follows on

00:32:41,516 --> 00:32:43,766
from the previous talk too.

00:32:44,878 --> 00:32:47,545
Oh wait, let's just go back one.

00:32:48,799 --> 00:32:50,364
What are the options out there

00:32:50,364 --> 00:32:51,757
in terms of implementation?

00:32:51,757 --> 00:32:53,194
There are trade-offs over there.

00:32:53,194 --> 00:32:56,835
Do you want push or do you want to pull your updates?

00:32:56,835 --> 00:32:59,205
Do you want some inline kind of update?

00:32:59,205 --> 00:33:01,520
Or do you want to have some shadow partition?

00:33:01,520 --> 00:33:03,745
There's more resiliency, more robustness

00:33:03,745 --> 00:33:05,700
with shadow partitions.

00:33:05,700 --> 00:33:07,326
But then this brings up issues like

00:33:07,326 --> 00:33:09,526
what should the size of that partition be?

00:33:09,526 --> 00:33:11,278
I have to allocate space for that,

00:33:11,278 --> 00:33:12,861
drives up the cost.

00:33:14,156 --> 00:33:17,187
And do I wanna use the block kind of approach

00:33:17,187 --> 00:33:19,645
with the signature and say, "Hey, I've got the whole block

00:33:19,645 --> 00:33:20,675
"and nothing but the block,

00:33:20,675 --> 00:33:22,357
"and it's signatures one, two, three, four.

00:33:22,357 --> 00:33:24,445
"Everything is good, let's launch it."

00:33:24,445 --> 00:33:26,722
Or do we wanna go the file system approach,

00:33:26,722 --> 00:33:28,981
I mean the files and each file that

00:33:28,981 --> 00:33:31,423
you're gonna bring over, what its hash code is

00:33:31,423 --> 00:33:33,959
and that's the leaner meaner approach.

00:33:33,959 --> 00:33:37,376
So there are a lot of trade-offs in this.

00:33:38,230 --> 00:33:42,480
So what do we have in terms of solutions out there?

00:33:44,865 --> 00:33:47,772
Many, lots and lots of solutions out there.

00:33:47,772 --> 00:33:51,012
There is OSTree, which is a file-based approach.

00:33:51,012 --> 00:33:54,441
There is Balena.io, Software Updates,

00:33:54,441 --> 00:33:58,134
Swupd, Mendor.io, and the list goes on.

00:33:58,134 --> 00:34:02,369
And all of these solutions make various trade-offs.

00:34:02,369 --> 00:34:04,928
And let's now talk about IoT.

00:34:04,928 --> 00:34:09,073
Are we guaranteed that my whole network of devices

00:34:09,073 --> 00:34:11,011
has one kind of hardware?

00:34:11,011 --> 00:34:14,483
No, am I guaranteed it has one kind of software?

00:34:14,483 --> 00:34:17,826
No, am I guaranteed that it has a certain kernel version

00:34:17,826 --> 00:34:19,967
even if it was all Linux-based?

00:34:19,967 --> 00:34:24,024
No, so say a whole bunch of no, no, noes.

00:34:24,024 --> 00:34:25,268
So we're really talking about

00:34:25,268 --> 00:34:29,010
a heterogeneous environment of hardware and software,

00:34:29,010 --> 00:34:32,204
and we want a solution that works across all of these.

00:34:32,204 --> 00:34:35,039
Well, one other thing we can guarantee

00:34:35,039 --> 00:34:37,789
that nobody's gonna maybe install

00:34:38,708 --> 00:34:43,210
hardware that's more expensive than we absolutely need.

00:34:43,210 --> 00:34:44,762
So they might be somewhere high up

00:34:44,762 --> 00:34:47,965
in your software stack, maybe in your data center,

00:34:47,965 --> 00:34:51,995
a big Xeon server for this IoT solution.

00:34:51,995 --> 00:34:53,840
And it's all in your data center,

00:34:53,840 --> 00:34:55,658
and it's maybe the brain of the whole thing

00:34:55,658 --> 00:34:57,141
that controls everything.

00:34:57,141 --> 00:34:59,748
Sure, you might spend a few thousand dollars there.

00:34:59,748 --> 00:35:04,114
But then maybe at the edge, where things get collected,

00:35:04,114 --> 00:35:06,599
and that's closer to the source of the data,

00:35:06,599 --> 00:35:09,082
you might have maybe a couple of hundred dollars

00:35:09,082 --> 00:35:10,800
kind of hardware.

00:35:10,800 --> 00:35:14,263
And way, way down at the actual devices and sensors,

00:35:14,263 --> 00:35:15,656
it might be a few cents,

00:35:15,656 --> 00:35:18,510
or it might even be a few dollars.

00:35:18,510 --> 00:35:20,240
So we're guaranteed that we're gonna

00:35:20,240 --> 00:35:21,845
have a lot of variety over there.

00:35:21,845 --> 00:35:24,871
And we'd like a solution that flows across all this

00:35:24,871 --> 00:35:27,038
and meets different needs.

00:35:29,313 --> 00:35:33,313
And we're already at the meat of the discussion.

00:35:34,654 --> 00:35:37,801
What I wanna broach here, suggest here,

00:35:37,801 --> 00:35:40,944
ask for your brains to bring your firepower

00:35:40,944 --> 00:35:45,944
and make happen is can we introduce kernel hooks for this?

00:35:46,552 --> 00:35:49,708
Just like you have reboot command in your Linux kernel,

00:35:49,708 --> 00:35:52,923
and it just supported, you say reboot and it does it,

00:35:52,923 --> 00:35:55,399
how about an update kind of command?

00:35:55,399 --> 00:35:57,598
And what else do we need for this update command?

00:35:57,598 --> 00:36:00,142
We need some basic configuration.

00:36:00,142 --> 00:36:02,709
Configuration that might set the source,

00:36:02,709 --> 00:36:05,591
the source from where you want to pull down updates.

00:36:05,591 --> 00:36:08,726
Keys, so that you can have encrypted communication

00:36:08,726 --> 00:36:10,614
between this endpoint and the server

00:36:10,614 --> 00:36:12,826
that provides you these solutions.

00:36:12,826 --> 00:36:14,949
You might wanna have a schedule.

00:36:14,949 --> 00:36:17,000
Do this every night or do it when there's

00:36:17,000 --> 00:36:20,020
idle time, nothing much happening,

00:36:20,020 --> 00:36:22,475
et cetera, et cetera.

00:36:22,475 --> 00:36:25,513
What about where should the logs live?

00:36:25,513 --> 00:36:29,063
How often should you even do these reattempts?

00:36:29,063 --> 00:36:32,177
Like was I able to connect to the server or not?

00:36:32,177 --> 00:36:34,696
Should I try three times, should I try 10 times?

00:36:34,696 --> 00:36:37,363
Whatever, what else like a list?

00:36:38,747 --> 00:36:42,480
If you're like an edge gateway node,

00:36:42,480 --> 00:36:44,237
maybe you have like a hundred children,

00:36:44,237 --> 00:36:46,168
a thousand children, or maybe you're

00:36:46,168 --> 00:36:48,269
in a peer-to-peer kind of communication

00:36:48,269 --> 00:36:50,208
with some ad hoc network.

00:36:50,208 --> 00:36:53,067
And one of the nodes gets this next patch

00:36:53,067 --> 00:36:55,277
that you have to update your systems too.

00:36:55,277 --> 00:36:57,145
Then maybe you want all your sibling nodes

00:36:57,145 --> 00:36:58,728
to get this update.

00:36:59,812 --> 00:37:02,524
So if we could have a configuration option

00:37:02,524 --> 00:37:06,517
for this command, and then just be able to say update,

00:37:06,517 --> 00:37:08,173
everything should be hunky-dory.

00:37:08,173 --> 00:37:10,572
And under the covers, whether you use

00:37:10,572 --> 00:37:14,534
Swupd, or a Software Update, or Mendor.io,

00:37:14,534 --> 00:37:19,397
or whatever, it should just kinda happen seamlessly.

00:37:19,397 --> 00:37:20,795
And there's an analogy to this.

00:37:20,795 --> 00:37:23,045
I mean we have hypervisors.

00:37:25,088 --> 00:37:27,118
We have KVM, we have Zen,

00:37:27,118 --> 00:37:30,981
we have Vmware's ESXi, et cetera, et cetera.

00:37:30,981 --> 00:37:35,298
But what helps us to talk the same language?

00:37:35,298 --> 00:37:36,416
Do I have a question?

00:37:36,416 --> 00:37:38,664
- Yeah, I want somebody to ask you a question.

00:37:38,664 --> 00:37:39,729
- [Man] Yeah, I--

00:37:39,729 --> 00:37:42,164
- This just brings up a lot of obvious questions.

00:37:42,164 --> 00:37:43,636
(speaking faintly)

00:37:43,636 --> 00:37:45,225
Like this is an imaginary command.

00:37:45,225 --> 00:37:47,276
I think somebody should have some questions.

00:37:47,276 --> 00:37:50,396
- That was actually what I was gonna say.

00:37:50,396 --> 00:37:52,728
Does this imply that there is a Linux

00:37:52,728 --> 00:37:56,519
or some sort of processor with a powerful enough

00:37:56,519 --> 00:37:58,798
processor to run a command prompt?

00:37:58,798 --> 00:38:01,250
You need this, is this on the device or this?

00:38:01,250 --> 00:38:04,243
- So IoT is not one device.

00:38:04,243 --> 00:38:06,415
Right, there's a whole software stack.

00:38:06,415 --> 00:38:08,332
I really hate this mic.

00:38:09,715 --> 00:38:11,617
Can you still hear me everyone?

00:38:11,617 --> 00:38:13,183
- [Man] Yeah but the recording won't hear you.

00:38:13,183 --> 00:38:17,493
- Oh okay okay, sorry sorry, for posterity.

00:38:17,493 --> 00:38:20,083
So no, think about your IoT stack.

00:38:20,083 --> 00:38:22,319
There's something up there in the data center,

00:38:22,319 --> 00:38:24,217
there's stuff at the edge,

00:38:24,217 --> 00:38:26,634
there's stuff way down below.

00:38:28,909 --> 00:38:30,251
Might as well be fussy.

00:38:30,251 --> 00:38:34,168
(crew member speaking faintly)

00:38:43,522 --> 00:38:45,200
- Hi, can everyone hear me?

00:38:45,200 --> 00:38:46,608
- Nope. - Not yet.

00:38:46,608 --> 00:38:49,941
- [Man] A bit closer to your face maybe.

00:38:53,580 --> 00:38:54,992
- [Man] Move the mic up a bit.

00:38:54,992 --> 00:38:58,409
- [Man] Move the mic up to your necklace.

00:39:05,014 --> 00:39:05,847
- Yes?

00:39:07,597 --> 00:39:08,885
- [Man] I'm not sure.

00:39:08,885 --> 00:39:11,802
(speaking faintly)

00:39:16,378 --> 00:39:20,045
- We have lots of time for discussion, okay.

00:39:21,323 --> 00:39:23,353
- [Man] But you have some questions too.

00:39:23,353 --> 00:39:26,436
(chattering faintly)

00:39:33,563 --> 00:39:36,025
- Hi everyone, yes awesome.

00:39:36,025 --> 00:39:37,923
- [Man] So this is what I imagine.

00:39:37,923 --> 00:39:39,155
This is what I imagine.

00:39:39,155 --> 00:39:40,502
And I'll mention first of all

00:39:40,502 --> 00:39:44,057
that for the format and some of the transport,

00:39:44,057 --> 00:39:46,521
there's an IETF working group for that,

00:39:46,521 --> 00:39:48,289
which is dealing with most of this

00:39:48,289 --> 00:39:49,762
but it's actually very careful

00:39:49,762 --> 00:39:54,522
not to specify transport but rather content but--

00:39:54,522 --> 00:39:55,764
- [Malini] I haven't mention transport.

00:39:55,764 --> 00:39:57,098
- [Man] I know you haven't mention transport yet.

00:39:57,098 --> 00:40:00,629
So transport is something that you might

00:40:00,629 --> 00:40:03,287
like to think about but the thing

00:40:03,287 --> 00:40:06,628
I wanted to say is so that that working group

00:40:06,628 --> 00:40:08,776
is mostly saying look, we're going up too

00:40:08,776 --> 00:40:11,642
but not quite including things like Android phones,

00:40:11,642 --> 00:40:13,370
where you kinda get your whole image

00:40:13,370 --> 00:40:14,203
as a single blob.

00:40:14,203 --> 00:40:17,175
We're not doing file by file kind of things.

00:40:17,175 --> 00:40:19,992
But mostly down into devices

00:40:19,992 --> 00:40:22,681
that are door-opening things, right?

00:40:22,681 --> 00:40:23,990
That we discussed before.

00:40:23,990 --> 00:40:25,859
But imagine the case where you'd have a kernel

00:40:25,859 --> 00:40:27,383
that knows where its image was.

00:40:27,383 --> 00:40:29,749
It was executed in place, maybe.

00:40:29,749 --> 00:40:31,716
It knows where its initramfs was

00:40:31,716 --> 00:40:35,402
because it was kind of executed or uncompressed in place.

00:40:35,402 --> 00:40:37,795
And you could say to this kernel,

00:40:37,795 --> 00:40:41,830
"I would like you to somehow update things

00:40:41,830 --> 00:40:44,389
"and magically kexec into the new code

00:40:44,389 --> 00:40:46,913
"that are dropping the new packets."

00:40:46,913 --> 00:40:47,885
That would be a kernel hook

00:40:47,885 --> 00:40:50,254
that would totally rock and maybe impossible to do.

00:40:50,254 --> 00:40:52,591
But that's where I would imagine with a kernel thing.

00:40:52,591 --> 00:40:55,766
Everything else, it should happen elsewhere

00:40:55,766 --> 00:40:56,859
up of the stack, right?

00:40:56,859 --> 00:40:58,883
Open up your tee, run a what is it?

00:40:58,883 --> 00:41:00,894
SWupdate or something like this.

00:41:00,894 --> 00:41:02,732
And it knows where the right flash partition

00:41:02,732 --> 00:41:03,699
is to update in it.

00:41:03,699 --> 00:41:05,661
It does all of this already, okay.

00:41:05,661 --> 00:41:07,244
- So hang on there.

00:41:08,447 --> 00:41:10,570
The underlying implementation should

00:41:10,570 --> 00:41:12,907
know where things are and how to execute it.

00:41:12,907 --> 00:41:15,403
- [Man] If it knows where things are and how to do it,

00:41:15,403 --> 00:41:16,611
then it could go in the kernel.

00:41:16,611 --> 00:41:18,081
But otherwise, the kernel's probably ignorant

00:41:18,081 --> 00:41:20,662
about where things are and how it got to life.

00:41:20,662 --> 00:41:22,091
- So hold that thought.

00:41:22,091 --> 00:41:26,682
What I want is how many of you know about libvirt.

00:41:26,682 --> 00:41:27,539
- [Man] Yeah.

00:41:27,539 --> 00:41:28,372
- [Man] What was it?

00:41:28,372 --> 00:41:29,205
- Libvirt.

00:41:29,205 --> 00:41:30,292
- [Man] Libvirt.

00:41:30,292 --> 00:41:33,117
- Okay, so I saw like five, six hands.

00:41:33,117 --> 00:41:33,950
What was the--

00:41:33,950 --> 00:41:34,783
- [Man] I-R-T.

00:41:34,783 --> 00:41:38,043
- L-I-B-V-I-R-T, libvirt.

00:41:38,043 --> 00:41:39,574
Why is libvirt even there?

00:41:39,574 --> 00:41:41,144
Why is it useful?

00:41:41,144 --> 00:41:43,387
You have so many different hypervisors.

00:41:43,387 --> 00:41:46,016
You have so much, so many different kinds of hardware.

00:41:46,016 --> 00:41:48,490
But when you use a libvirt library,

00:41:48,490 --> 00:41:50,455
and you drop it in there,

00:41:50,455 --> 00:41:53,456
any OpenStack implementation,

00:41:53,456 --> 00:41:57,291
or vCenter implementation, or Kubernetes, whatever.

00:41:57,291 --> 00:41:59,343
It can execute a command like launch

00:41:59,343 --> 00:42:01,545
this virtual machine, okay.

00:42:01,545 --> 00:42:04,139
It just could be agnostic of the actual hardware

00:42:04,139 --> 00:42:06,865
and the software that's running on which hypervisor.

00:42:06,865 --> 00:42:08,762
So this provides you that glue

00:42:08,762 --> 00:42:11,134
that is like a single language that--

00:42:11,134 --> 00:42:13,979
- [Man] So you basically want an abstraction API.

00:42:13,979 --> 00:42:16,031
- Exactly, so that's what I'm proposing.

00:42:16,031 --> 00:42:17,068
That's all I'm saying.

00:42:17,068 --> 00:42:19,775
I want like an API here,

00:42:19,775 --> 00:42:22,136
an API that says update,

00:42:22,136 --> 00:42:24,820
and update can take some configuration commands,

00:42:24,820 --> 00:42:26,200
and then under the covers,

00:42:26,200 --> 00:42:30,007
whether you use Mendor.io or you have Software Update,

00:42:30,007 --> 00:42:31,313
it does the right thing.

00:42:31,313 --> 00:42:34,192
But what if you had not install that package over there,

00:42:34,192 --> 00:42:37,403
the one that will provide you this update facility,

00:42:37,403 --> 00:42:40,269
it will just say, "Uh-oh, not implemented."

00:42:40,269 --> 00:42:42,896
But then, an IoT solution vendor

00:42:42,896 --> 00:42:44,747
does not have to know what they install

00:42:44,747 --> 00:42:46,108
and maybe, somewhere in the middle,

00:42:46,108 --> 00:42:47,326
where it's an expensive thing

00:42:47,326 --> 00:42:48,913
and you want a partition

00:42:48,913 --> 00:42:51,518
and be able to do something more resiliently,

00:42:51,518 --> 00:42:52,391
you have done that.

00:42:52,391 --> 00:42:54,407
But at deep down lower layers,

00:42:54,407 --> 00:42:55,815
it could be something very inline

00:42:55,815 --> 00:42:57,239
and if it became a breakthrough,

00:42:57,239 --> 00:42:58,601
that type of stuff.

00:42:58,601 --> 00:43:01,666
So I'm just trying to think about this IoT landscape

00:43:01,666 --> 00:43:04,833
as we have adoption to make it easier.

00:43:08,658 --> 00:43:10,414
Yeah Chris, you were saying something

00:43:10,414 --> 00:43:11,917
and I interrupted you earlier.

00:43:11,917 --> 00:43:12,766
- Oh no, please go ahead.

00:43:12,766 --> 00:43:14,496
I think you answered my question.

00:43:14,496 --> 00:43:15,843
Please go ahead, I think that we'll

00:43:15,843 --> 00:43:17,376
probably ask more questions.

00:43:17,376 --> 00:43:18,627
- So this is our question time.

00:43:18,627 --> 00:43:19,913
I have really no more slides,

00:43:19,913 --> 00:43:21,760
and I just have two slides for like

00:43:21,760 --> 00:43:24,000
the whole pile of references,

00:43:24,000 --> 00:43:26,902
and pretty much just about every one of those solutions

00:43:26,902 --> 00:43:29,517
says how I can do it, what my trade-offs are.

00:43:29,517 --> 00:43:31,397
But how can we tie all this together?

00:43:31,397 --> 00:43:33,694
And why is it necessary to do so?

00:43:33,694 --> 00:43:35,852
Why is it that we even have the Linux kernel?

00:43:35,852 --> 00:43:38,062
Because there's some operations everybody needs.

00:43:38,062 --> 00:43:39,960
And I think this one, the time has come

00:43:39,960 --> 00:43:42,557
to make it kinda like an API that's available.

00:43:42,557 --> 00:43:45,315
- So why is it important for VMware to do this?

00:43:45,315 --> 00:43:47,886
- Why does it matter whether VMware is asking you?

00:43:47,886 --> 00:43:51,080
Just because I have the VMware name and T-shirt?

00:43:51,080 --> 00:43:53,003
No, I'm just talking about IoT.

00:43:53,003 --> 00:43:55,219
I'm an open source engineer.

00:43:55,219 --> 00:43:57,030
I'm working on an open source project

00:43:57,030 --> 00:44:00,454
called Ajax that's you know, just open source.

00:44:00,454 --> 00:44:03,595
But I do know that as an end user of IoT,

00:44:03,595 --> 00:44:06,115
I need to be sure that my hardware

00:44:06,115 --> 00:44:08,365
and my system gets updated.

00:44:10,066 --> 00:44:12,695
- I used to in, a previous previous life,

00:44:12,695 --> 00:44:15,168
I was working for a Zigbee outfit.

00:44:15,168 --> 00:44:17,268
I know that Zigbee has this whole standard

00:44:17,268 --> 00:44:20,369
for doing software updates that does

00:44:20,369 --> 00:44:23,861
integrity checks, like a block-based integrity check

00:44:23,861 --> 00:44:25,386
with a download.

00:44:25,386 --> 00:44:27,723
And you can do it through an off-chip EEPROM

00:44:27,723 --> 00:44:31,186
or something like that, like block by block.

00:44:31,186 --> 00:44:33,655
And in some cases, you'll have a dual partition setup.

00:44:33,655 --> 00:44:37,234
In some cases, you'll have a single partition setup.

00:44:37,234 --> 00:44:39,765
So you're right in that there are so many

00:44:39,765 --> 00:44:42,480
different varieties of update formats

00:44:42,480 --> 00:44:44,397
for the specific image.

00:44:46,095 --> 00:44:48,775
Are there any, is there a way,

00:44:48,775 --> 00:44:51,649
do you have a suggestion for what

00:44:51,649 --> 00:44:53,376
format would work for all of them?

00:44:53,376 --> 00:44:56,164
I guess is the question I'm asking.

00:44:56,164 --> 00:44:58,577
- So for one thing, let's pretend

00:44:58,577 --> 00:44:59,965
you're in a software stack,

00:44:59,965 --> 00:45:02,158
and you have your whole system

00:45:02,158 --> 00:45:03,926
the way I envisage IoT.

00:45:03,926 --> 00:45:05,351
There's some cloud component.

00:45:05,351 --> 00:45:07,639
There are a whole bunch of edges or gateways.

00:45:07,639 --> 00:45:10,179
Hey, come on, everyone, join in the discussion.

00:45:10,179 --> 00:45:11,012
You're in this room.

00:45:11,012 --> 00:45:12,871
Grab that mic from him.

00:45:12,871 --> 00:45:14,036
Throw it randomly.

00:45:14,036 --> 00:45:14,869
- [Man] Yes.

00:45:14,869 --> 00:45:15,702
(woman laughing)

00:45:15,702 --> 00:45:16,535
Never hits.

00:45:16,535 --> 00:45:19,587
- If they're not alert, it's like a wedding bouquet.

00:45:19,587 --> 00:45:20,420
Thank you.

00:45:21,881 --> 00:45:23,347
- So one of your earlier slides,

00:45:23,347 --> 00:45:25,541
you listed a bunch of solutions that already exist.

00:45:25,541 --> 00:45:27,673
And a few of those are actually open source, right?

00:45:27,673 --> 00:45:28,696
Already. - Yes.

00:45:28,696 --> 00:45:31,425
- So what's missing from the existing open source ones

00:45:31,425 --> 00:45:34,551
that you, that think, you think needs to be replaced

00:45:34,551 --> 00:45:36,987
or redone, or done better, or whatever.

00:45:36,987 --> 00:45:38,027
That's I think, that's the part I'm missing

00:45:38,027 --> 00:45:39,792
from this talk. - So the part that

00:45:39,792 --> 00:45:42,798
you totally hit on is there are

00:45:42,798 --> 00:45:45,116
multiple open source solutions.

00:45:45,116 --> 00:45:48,195
But if I want to deal with a heterogeneous environment,

00:45:48,195 --> 00:45:50,142
and I don't maybe, have control about

00:45:50,142 --> 00:45:53,541
which open source package is installed,

00:45:53,541 --> 00:45:56,103
implement update on some node.

00:45:56,103 --> 00:45:59,310
Somewhere in this whole tree of IoT

00:45:59,310 --> 00:46:01,673
from north to south.

00:46:01,673 --> 00:46:03,425
I should still be able to give it a command

00:46:03,425 --> 00:46:04,639
saying update yourself.

00:46:04,639 --> 00:46:07,551
And if it's being as part of the registration process

00:46:07,551 --> 00:46:09,679
and installation of the software,

00:46:09,679 --> 00:46:13,187
it's pointing to some, let's call this

00:46:13,187 --> 00:46:17,881
my autonomous car endpoint, it should do the right thing.

00:46:17,881 --> 00:46:21,193
- [Man] So imagine like a hotplug event.

00:46:21,193 --> 00:46:23,006
- Ehm-hmm. - Okay, there's gotta

00:46:23,006 --> 00:46:25,401
be some piece of software in the system

00:46:25,401 --> 00:46:29,295
that would receive the hotplug event that says equivalent,

00:46:29,295 --> 00:46:32,545
I guess it's the replug yourself event,

00:46:33,978 --> 00:46:35,480
and that's what you're looking for,

00:46:35,480 --> 00:46:36,728
and that's what you're thinking that

00:46:36,728 --> 00:46:39,135
that there needs to be, it has to be a kernel service

00:46:39,135 --> 00:46:40,763
that abstracts it such that

00:46:40,763 --> 00:46:43,942
things can, something can act on it

00:46:43,942 --> 00:46:45,900
one of those open source projects you mentioned.

00:46:45,900 --> 00:46:48,372
- Yes. - But that then allows

00:46:48,372 --> 00:46:50,441
the decision as to when to do it

00:46:50,441 --> 00:46:52,679
and all those kind of stuff to be isolated

00:46:52,679 --> 00:46:55,382
from the decision as to what,

00:46:55,382 --> 00:46:57,732
and who, and what's authorized.

00:46:57,732 --> 00:46:59,029
And the kernel might know

00:46:59,029 --> 00:47:00,447
is it a bad time to do this?

00:47:00,447 --> 00:47:02,756
Because I'm just going into suspend,

00:47:02,756 --> 00:47:06,053
or I have no power, or something?

00:47:06,053 --> 00:47:07,470
That's what you're asking for I guess.

00:47:07,470 --> 00:47:11,251
- Yes, I am exactly asking for an A,

00:47:11,251 --> 00:47:14,251
an API interface that you can set up

00:47:15,267 --> 00:47:18,480
things like policies, that that's my configuration part.

00:47:18,480 --> 00:47:20,946
You can break it up even more if you want.

00:47:20,946 --> 00:47:23,280
And then the actual how it happens

00:47:23,280 --> 00:47:25,304
is the underlying software, open source,

00:47:25,304 --> 00:47:27,602
or other that implements it.

00:47:27,602 --> 00:47:29,216
- [Man] Why would you put this in the kernel

00:47:29,216 --> 00:47:30,496
and not a user space?

00:47:30,496 --> 00:47:33,413
(mic capture echo)

00:47:36,351 --> 00:47:37,750
- That's fine but typically,

00:47:37,750 --> 00:47:41,875
I was thinking about update being like a root process,

00:47:41,875 --> 00:47:44,463
and needs quite a lot of privileges,

00:47:44,463 --> 00:47:46,493
and that's why I was thinking kernel.

00:47:46,493 --> 00:47:48,176
And another reason I thought kernel

00:47:48,176 --> 00:47:50,877
is like all the other downstream projects

00:47:50,877 --> 00:47:52,554
and OS has take from there.

00:47:52,554 --> 00:47:55,646
But I'm open to whatever you suggest here.

00:47:55,646 --> 00:47:57,845
- I mean we don't put web services and various,

00:47:57,845 --> 00:47:59,722
well, there has historically,

00:47:59,722 --> 00:48:03,530
been in the past, web services in the kernel.

00:48:03,530 --> 00:48:05,710
But yeah, it looks to me very much

00:48:05,710 --> 00:48:10,068
like a user space daemon or a user space API

00:48:10,068 --> 00:48:13,043
that runs, could be on the device,

00:48:13,043 --> 00:48:16,626
could be as as a central service, but yeah.

00:48:19,212 --> 00:48:20,853
- Mic.

00:48:20,853 --> 00:48:22,058
- The only thing I wanted to add

00:48:22,058 --> 00:48:25,007
is one place is the kexec stuff that got brought up, right?

00:48:25,007 --> 00:48:26,348
Because that one is something

00:48:26,348 --> 00:48:28,554
that it does actually require a kernel hook.

00:48:28,554 --> 00:48:30,212
So it's really is about when.

00:48:30,212 --> 00:48:32,465
So if the when is now,

00:48:32,465 --> 00:48:34,554
now, you can actually, okay, am I up to date?

00:48:34,554 --> 00:48:35,909
Now, it replaces it.

00:48:35,909 --> 00:48:37,809
- Yeah, but I mean that's still generally

00:48:37,809 --> 00:48:40,392
comes from a user space policy.

00:48:42,639 --> 00:48:44,308
- So your thing is because I'm having

00:48:44,308 --> 00:48:46,043
some user-based policies,

00:48:46,043 --> 00:48:49,376
it's better to stay in user space, okay.

00:48:50,605 --> 00:48:52,289
- So I guess my question is similar.

00:48:52,289 --> 00:48:55,215
Generally speaking, policy stays out of the kernel for sure.

00:48:55,215 --> 00:48:57,639
But implementation mechanism hooks,

00:48:57,639 --> 00:48:59,183
if they're needed, absolutely.

00:48:59,183 --> 00:49:01,350
So the question I guess is

00:49:04,869 --> 00:49:08,121
if we're telling the device, update yourself,

00:49:08,121 --> 00:49:11,592
where in this picture does the policy

00:49:11,592 --> 00:49:14,111
for what gets updated and all of that land?

00:49:14,111 --> 00:49:16,897
Is that with the device?

00:49:16,897 --> 00:49:19,865
Or is that unspecified here?

00:49:19,865 --> 00:49:23,906
- So for me, when I set up these devices as an IoT,

00:49:23,906 --> 00:49:26,270
let's say, it's the car, autonomous car,

00:49:26,270 --> 00:49:28,202
that I know you don't trust right now.

00:49:28,202 --> 00:49:29,035
(laughs)

00:49:29,035 --> 00:49:31,174
That's definitely like when it's parked in the garage

00:49:31,174 --> 00:49:32,308
and it's not driving.

00:49:32,308 --> 00:49:33,964
So that's a policy that you set up

00:49:33,964 --> 00:49:36,772
when you install this software in the car

00:49:36,772 --> 00:49:38,592
and all across thing.

00:49:38,592 --> 00:49:40,585
So I think that policy will come as part

00:49:40,585 --> 00:49:44,287
of the registration onboarding of the software.

00:49:44,287 --> 00:49:47,287
The rest is just like the execution.

00:49:48,228 --> 00:49:49,904
And for me, another thing is sometimes,

00:49:49,904 --> 00:49:52,061
what if I don't have network connectivity?

00:49:52,061 --> 00:49:55,206
But there is a patch available somewhere.

00:49:55,206 --> 00:49:58,695
Maybe if I can transmit it to my neighbors

00:49:58,695 --> 00:49:59,952
that are nearby in the network,

00:49:59,952 --> 00:50:02,229
like you got it to one of your cars at home

00:50:02,229 --> 00:50:04,827
but you wanted all the other cars at home to get it.

00:50:04,827 --> 00:50:06,579
It might be trusted sibling set.

00:50:06,579 --> 00:50:08,015
But still the whole trust pieces,

00:50:08,015 --> 00:50:09,785
the signatures have to match,

00:50:09,785 --> 00:50:11,409
and things like that.

00:50:11,409 --> 00:50:13,964
So that's kind of where I was going with this list.

00:50:13,964 --> 00:50:15,397
Who else should get updates?

00:50:15,397 --> 00:50:19,034
So I could serve it in a peer-to-peer fashion too

00:50:19,034 --> 00:50:21,284
to make updates go further.

00:50:26,326 --> 00:50:29,624
- Good, I guess since we've talking

00:50:29,624 --> 00:50:31,963
quite a bit about kernel space and user space,

00:50:31,963 --> 00:50:35,123
and what belongs where, one question I sort had

00:50:35,123 --> 00:50:39,934
was so again, I'm kind of relating back to the Zigbee world,

00:50:39,934 --> 00:50:42,684
which was my previous previous life.

00:50:42,684 --> 00:50:47,465
So in that case, there was a secure section of memory

00:50:47,465 --> 00:50:51,114
that would only be accessible by the operating system,

00:50:51,114 --> 00:50:53,947
whatever that have to be for keys,

00:50:55,179 --> 00:50:57,512
decryption keys, for updates

00:50:58,580 --> 00:51:00,915
and other such of things.

00:51:00,915 --> 00:51:04,665
802.15.4 has like a standard encryption layer

00:51:05,799 --> 00:51:07,591
but that's just for channel communications.

00:51:07,591 --> 00:51:09,674
It's not for OTA updates.

00:51:11,257 --> 00:51:14,090
Do we have a, maybe someone else knows better.

00:51:14,090 --> 00:51:14,951
In the Linux kernel right now,

00:51:14,951 --> 00:51:18,636
do we have a place to store trusted keys

00:51:18,636 --> 00:51:21,602
that only Linux kernels has available, yeah?

00:51:21,602 --> 00:51:22,952
Okay, what is it called?

00:51:22,952 --> 00:51:23,785
- I don't remember.

00:51:23,785 --> 00:51:25,068
- I don't remember, okay.

00:51:25,068 --> 00:51:26,164
(Malini laughs)

00:51:26,164 --> 00:51:28,198
- [Malini] It's well named.

00:51:28,198 --> 00:51:29,534
So yes. - Yeah, so you've

00:51:29,534 --> 00:51:31,814
got the TPM, which is a piece of hardware

00:51:31,814 --> 00:51:34,316
that is non-recoverable.

00:51:34,316 --> 00:51:36,649
But you also have like case,

00:51:37,524 --> 00:51:42,355
Secure Boot can also provide hardware-layer keys.

00:51:42,355 --> 00:51:44,878
And then there's also the kernel keychain,

00:51:44,878 --> 00:51:48,378
which can be built in at kernel build time

00:51:49,893 --> 00:51:52,726
or enrolled in other, I don't know

00:51:54,326 --> 00:51:55,627
the exact implementation detail.

00:51:55,627 --> 00:52:00,060
- So the trust, TPM Trusted Platform Module,

00:52:00,060 --> 00:52:02,433
it's got a whole bunch of things in there.

00:52:02,433 --> 00:52:05,419
When you boot, it basically captures

00:52:05,419 --> 00:52:07,567
the hash code of your boot process.

00:52:07,567 --> 00:52:09,739
I mean your BIOS, your firmware,

00:52:09,739 --> 00:52:11,468
your kernel, et cetera, et cetera.

00:52:11,468 --> 00:52:13,548
So one of the things by doing

00:52:13,548 --> 00:52:15,742
this sort of abstraction API layer

00:52:15,742 --> 00:52:17,610
is let's say it's a very expensive device

00:52:17,610 --> 00:52:19,511
and a lot is at stake like a car

00:52:19,511 --> 00:52:21,912
or you know, a hospital machinery.

00:52:21,912 --> 00:52:25,481
That sort of implementation will have a TPM.

00:52:25,481 --> 00:52:27,880
But maybe something else might not have a TPM

00:52:27,880 --> 00:52:30,354
or might have a firmware TPM that's cheaper

00:52:30,354 --> 00:52:33,087
or a software TPM that's really cheap.

00:52:33,087 --> 00:52:34,880
So the actual implementation,

00:52:34,880 --> 00:52:37,456
I'd like to keep abstract because of that.

00:52:37,456 --> 00:52:38,913
But then another thing is

00:52:38,913 --> 00:52:42,905
let's say you're a provider of IoT infrastructure,

00:52:42,905 --> 00:52:44,892
there's actual code that might be different

00:52:44,892 --> 00:52:46,921
that's application-centric, like okay,

00:52:46,921 --> 00:52:48,119
the temperature has gone up.

00:52:48,119 --> 00:52:49,412
Now, open a valve, et cetera.

00:52:49,412 --> 00:52:51,547
But the infrastructure layer,

00:52:51,547 --> 00:52:55,375
that could stay common if we had these sort of common APIs

00:52:55,375 --> 00:52:57,483
that then, different applications

00:52:57,483 --> 00:52:59,241
can do things differently.

00:52:59,241 --> 00:53:02,247
- So is that one facet of Ajax

00:53:02,247 --> 00:53:04,160
that you're currently working on?

00:53:04,160 --> 00:53:06,849
- So with Ajax, what we have is,

00:53:06,849 --> 00:53:09,058
it's all like little microservices.

00:53:09,058 --> 00:53:10,066
And then we have something called

00:53:10,066 --> 00:53:12,669
a system management agent service.

00:53:12,669 --> 00:53:15,073
And it can tell you things like,

00:53:15,073 --> 00:53:16,254
I mean it's a web service.

00:53:16,254 --> 00:53:18,233
I know, we didn't ask for a web service,

00:53:18,233 --> 00:53:21,756
by the way, in this API, I didn't, okay.

00:53:21,756 --> 00:53:23,332
So coming back to that,

00:53:23,332 --> 00:53:26,568
it can like get you data about how is your CPU usage,

00:53:26,568 --> 00:53:27,829
how is it your memory usage?

00:53:27,829 --> 00:53:30,004
Is there's enough resources on this node

00:53:30,004 --> 00:53:31,928
to maybe, put another application.

00:53:31,928 --> 00:53:35,538
It can also start and read, stop services.

00:53:35,538 --> 00:53:37,871
But that's system management agent

00:53:37,871 --> 00:53:40,707
in its full entire functionality

00:53:40,707 --> 00:53:42,930
should be able to do the software update.

00:53:42,930 --> 00:53:44,967
And you should be able to do things like configuration

00:53:44,967 --> 00:53:46,877
like when, where, what,

00:53:46,877 --> 00:53:48,739
and maybe have like some mirror sites,

00:53:48,739 --> 00:53:51,121
where you could go if you couldn't reach the main site.

00:53:51,121 --> 00:53:53,061
- [Man] So the IETF SUIT working group

00:53:53,061 --> 00:53:56,369
which stands for Software Update for IoT.

00:53:56,369 --> 00:53:59,763
We're gonna call it the FUD working group, Firmware Update.

00:53:59,763 --> 00:54:01,604
But there was some feeling

00:54:01,604 --> 00:54:04,222
that might be a problem.

00:54:04,222 --> 00:54:05,750
But so the SUIT working group

00:54:05,750 --> 00:54:07,902
has a number of documents and architecture,

00:54:07,902 --> 00:54:12,364
a manifest format, which is in CBOR signed with COSE.

00:54:12,364 --> 00:54:15,556
And I'm fighting against it but the manifest's

00:54:15,556 --> 00:54:18,945
almost Turing-complete, which is a bit of an issue.

00:54:18,945 --> 00:54:21,613
So it's a little bit of concern

00:54:21,613 --> 00:54:23,462
but because people have, you have to upload,

00:54:23,462 --> 00:54:26,411
upgrade this ROM before you upgrade this ROM,

00:54:26,411 --> 00:54:27,959
before you do this and then this doesn't work.

00:54:27,959 --> 00:54:29,269
And so there's some complicated rules.

00:54:29,269 --> 00:54:30,741
But all of that kind of rules

00:54:30,741 --> 00:54:34,050
and criteria seem to be there.

00:54:34,050 --> 00:54:34,901
You should take a look.

00:54:34,901 --> 00:54:36,333
Maybe there's something that's missing.

00:54:36,333 --> 00:54:37,166
- [Malini] Okay.

00:54:37,166 --> 00:54:39,950
- [Man] As I said, and it deals with the whole TPM,

00:54:39,950 --> 00:54:41,359
and is it signed properly,

00:54:41,359 --> 00:54:42,653
and does it go in the right places

00:54:42,653 --> 00:54:44,011
and all the stuff but deals with this?

00:54:44,011 --> 00:54:45,436
There's a lot of very smart people

00:54:45,436 --> 00:54:47,003
at ARM in the UK that are working

00:54:47,003 --> 00:54:48,823
on reference implementations.

00:54:48,823 --> 00:54:52,296
There's a wolfSSL has a reference implementation.

00:54:52,296 --> 00:54:55,174
I just heard of it two days ago.

00:54:55,174 --> 00:54:59,186
App runs on systems as small as the Zigbee boxes

00:54:59,186 --> 00:55:00,450
as this fellow was talking about

00:55:00,450 --> 00:55:04,367
and as big as desktop computers, if you'd like.

00:55:05,602 --> 00:55:06,764
So that's all there.

00:55:06,764 --> 00:55:10,797
What we don't have very explicitly is a transport.

00:55:10,797 --> 00:55:14,176
Because it's a bun fight, a bike shed,

00:55:14,176 --> 00:55:15,969
whatever you wanna call it, okay.

00:55:15,969 --> 00:55:18,068
Everyone has different requirements for that.

00:55:18,068 --> 00:55:19,655
The cool, the ability to yes,

00:55:19,655 --> 00:55:22,257
move from one device to an adjacent device,

00:55:22,257 --> 00:55:24,762
well, you might need a protocol for that.

00:55:24,762 --> 00:55:27,735
But once it gets there, it's correct, all right.

00:55:27,735 --> 00:55:29,067
The biggest problem in general

00:55:29,067 --> 00:55:31,467
for the smaller devices is can I receive

00:55:31,467 --> 00:55:33,634
the whole firmware package

00:55:34,904 --> 00:55:39,609
and store it without destroying my current running code.

00:55:39,609 --> 00:55:40,551
That's the biggest problem

00:55:40,551 --> 00:55:42,056
and product marketing usually comes along

00:55:42,056 --> 00:55:43,709
and says, "Oh no, we want all the flash

00:55:43,709 --> 00:55:47,461
"with the new application and then, you're screwed, right?"

00:55:47,461 --> 00:55:48,555
So that's the real, I would say,

00:55:48,555 --> 00:55:52,365
the continuous fight that we can't solve here or anywhere.

00:55:52,365 --> 00:55:53,481
Please take a look at that.

00:55:53,481 --> 00:55:56,485
I think that solves 90% of what you want.

00:55:56,485 --> 00:55:58,906
The question is to how to apply it

00:55:58,906 --> 00:56:03,174
to larger, quote, Linux systems, okay, meaning that

00:56:03,174 --> 00:56:05,008
have several megabytes. - No, no, no, I like that.

00:56:05,008 --> 00:56:07,484
It is, it's general and then,

00:56:07,484 --> 00:56:09,743
if we can use it across the board for everything,

00:56:09,743 --> 00:56:10,913
that'll be perfect.

00:56:10,913 --> 00:56:13,341
And if all these other open source projects

00:56:13,341 --> 00:56:16,315
wrote to it, then we have a common set of commands

00:56:16,315 --> 00:56:18,163
that we can execute, then I'd be happy.

00:56:18,163 --> 00:56:19,734
- [Man] No, it's not a common set of commands.

00:56:19,734 --> 00:56:23,736
It's a common set of file formats and transports.

00:56:23,736 --> 00:56:27,077
'Cause commands require authorization, okay.

00:56:27,077 --> 00:56:28,147
- Just fine, I'll--

00:56:28,147 --> 00:56:28,980
- [Man] That's the distinction I'm making

00:56:28,980 --> 00:56:30,407
very pedantically, okay. - Yeah.

00:56:30,407 --> 00:56:32,831
- [Man] But the point is that when to update

00:56:32,831 --> 00:56:34,669
is not something we can encode

00:56:34,669 --> 00:56:36,807
in a file format. - True.

00:56:36,807 --> 00:56:38,649
- [Man] And we're not trying to do that.

00:56:38,649 --> 00:56:40,359
- Yeah yeah, that's data,

00:56:40,359 --> 00:56:42,397
and this is the actual execution.

00:56:42,397 --> 00:56:46,647
So could we get some support for the commands then?

00:56:48,812 --> 00:56:50,157
To be able to execute them.

00:56:50,157 --> 00:56:51,520
And have one set of commands

00:56:51,520 --> 00:56:52,642
that would actually-- - Well, I would argue,

00:56:52,642 --> 00:56:54,825
it would wanna be an API.

00:56:54,825 --> 00:56:57,490
- Yes. - With a set of commands

00:56:57,490 --> 00:56:59,154
that speak to the API.

00:56:59,154 --> 00:57:03,987
But ultimately, it's certainly something worth discussing.

00:57:07,360 --> 00:57:08,871
- [Malini] And with who do we discuss this?

00:57:08,871 --> 00:57:10,051
- Sounds to me like something

00:57:10,051 --> 00:57:11,655
that would really fit into the system,

00:57:11,655 --> 00:57:13,572
the world of out there.

00:57:14,785 --> 00:57:16,154
And if not into that world,

00:57:16,154 --> 00:57:18,834
then your, then you're into, I think,

00:57:18,834 --> 00:57:22,167
into very distro-specific things, right?

00:57:26,966 --> 00:57:29,510
- No, I wanna say that the implementation

00:57:29,510 --> 00:57:31,690
should be maybe distro specific,

00:57:31,690 --> 00:57:34,425
but the actual API shouldn't.

00:57:34,425 --> 00:57:36,994
- You could build your own distro with Yocto,

00:57:36,994 --> 00:57:39,698
and then just bundle that in with SWUpdate.

00:57:39,698 --> 00:57:43,615
(member of audience chuckling)

00:57:45,137 --> 00:57:46,941
- I wanna say

00:57:46,941 --> 00:57:48,587
the problem is that you already have lots

00:57:48,587 --> 00:57:50,175
of distro-specific mechanisms

00:57:50,175 --> 00:57:52,742
that have all kinds of policies defined.

00:57:52,742 --> 00:57:54,142
And the risk that I'm seeing here

00:57:54,142 --> 00:57:56,362
is that you're defining a new command

00:57:56,362 --> 00:57:58,620
that is giving users the ability to specify

00:57:58,620 --> 00:58:00,353
all kinds of things that would actually

00:58:00,353 --> 00:58:02,627
violate already provided policies

00:58:02,627 --> 00:58:06,978
by tools such as UNIL, what was formerly Spacewalk.

00:58:06,978 --> 00:58:08,741
And what else, some solutions out there.

00:58:08,741 --> 00:58:11,231
Also when you're looking at that propagate parameter,

00:58:11,231 --> 00:58:13,231
I think that is much too

00:58:15,605 --> 00:58:18,258
generic in this form as you will

00:58:18,258 --> 00:58:20,922
need much more closer control over what it is

00:58:20,922 --> 00:58:23,789
that you're actually applying which permit is to.

00:58:23,789 --> 00:58:27,448
- Okay, I am ready to give up on my propagate for now.

00:58:27,448 --> 00:58:29,730
But even with your comment about

00:58:29,730 --> 00:58:33,019
many distros have their own implementation,

00:58:33,019 --> 00:58:34,738
with an API, it's fine.

00:58:34,738 --> 00:58:38,327
You don't let somebody override something.

00:58:38,327 --> 00:58:40,871
I mean this is how it's solved,

00:58:40,871 --> 00:58:42,598
and you guys can't do it.

00:58:42,598 --> 00:58:44,573
- So that would then apply the last point

00:58:44,573 --> 00:58:46,651
on that slide, is that it would just throw

00:58:46,651 --> 00:58:49,058
a not implemented or some kind of error

00:58:49,058 --> 00:58:50,871
if someone were to specify

00:58:50,871 --> 00:58:52,532
a command that they shouldn't. - Try something, yeah.

00:58:52,532 --> 00:58:53,964
And if you haven't got an installation,

00:58:53,964 --> 00:58:57,416
I mean, of software update over there and fine.

00:58:57,416 --> 00:59:00,221
But at least all the hooks are there.

00:59:00,221 --> 00:59:01,958
And my time is out.

00:59:01,958 --> 00:59:03,055
- [Man] What's on the next?

00:59:03,055 --> 00:59:05,347
- It's our next speaker that are late.

00:59:05,347 --> 00:59:08,342
- Ah-ha, then I am not at fault, thank you.

00:59:08,342 --> 00:59:11,509
(audience applauding)

00:59:16,421 --> 00:59:19,504
(chattering faintly)

00:59:23,256 --> 00:59:24,394
- What's his name?

00:59:24,394 --> 00:59:25,227
- Andreas.

00:59:25,227 --> 00:59:28,002
- Andreas, the mic, can give it to him.

00:59:28,002 --> 00:59:32,556
But Andreas, if you wanna use my laptop, it's here.

00:59:32,556 --> 00:59:34,003
You wanna use my laptop?

00:59:34,003 --> 00:59:37,445
(chattering faintly)

00:59:37,445 --> 00:59:40,147
- But it's stuff on the screen here.

00:59:40,147 --> 00:59:41,633
This is...

00:59:41,633 --> 00:59:44,716
(chattering faintly)

00:59:47,843 --> 00:59:48,768
- Oh, that's fine.

00:59:48,768 --> 00:59:49,885
We wanna put this, Andreas.

00:59:49,885 --> 00:59:53,385
So this screen on the left is an Etherpad.

00:59:54,510 --> 00:59:55,954
If you're not familiar with Etherpad,

00:59:55,954 --> 00:59:58,041
I don't know if you can read that URL up there

00:59:58,041 --> 01:00:01,707
but this is actually editable by anybody in the room.

01:00:01,707 --> 01:00:02,897
So if you can help me make sure

01:00:02,897 --> 01:00:04,830
we kinda fill in some of these gaps,

01:00:04,830 --> 01:00:07,302
the notes, like I'm also looking for individual speakers

01:00:07,302 --> 01:00:10,144
we could do follow-up with for questions, right.

01:00:10,144 --> 01:00:12,808
We want this to be a jumping off point,

01:00:12,808 --> 01:00:14,979
not like, this is not the be all, end all

01:00:14,979 --> 01:00:15,952
of this discussion, right.

01:00:15,952 --> 01:00:16,785
This is the start

01:00:16,785 --> 01:00:18,352
of the discussion. - Jumping off of the cliff?

01:00:18,352 --> 01:00:21,122
- Jumping off a cliff, sure.

01:00:21,122 --> 01:00:23,915
But we'll all jump together so it's okay.

01:00:23,915 --> 01:00:25,025
Land on. - Nice.

01:00:25,025 --> 01:00:28,463
- Anyway, so this is this Etherpad.

01:00:28,463 --> 01:00:30,563
The intention is that anybody can edit this.

01:00:30,563 --> 01:00:32,820
We'll just be nice.

01:00:32,820 --> 01:00:35,350
We want to add stuff here.

01:00:35,350 --> 01:00:36,918
At the bottom, all this stuff should be kind

01:00:36,918 --> 01:00:38,009
of running with the timeline.

01:00:38,009 --> 01:00:39,367
So we can go back and look at video

01:00:39,367 --> 01:00:40,329
and compare against it.

01:00:40,329 --> 01:00:42,377
So I'm putting some timestamps in it.

01:00:42,377 --> 01:00:44,726
There's other, I mean you can start new sections,

01:00:44,726 --> 01:00:47,009
and kind of make sure different ideas,

01:00:47,009 --> 01:00:48,287
or thoughts, or things that didn't

01:00:48,287 --> 01:00:50,377
get spoken, get summarized.

01:00:50,377 --> 01:00:53,070
But let's make this a good jumping off point

01:00:53,070 --> 01:00:55,688
for continuing this discussion

01:00:55,688 --> 01:00:58,688
and not make the discussion in here.

01:01:00,595 --> 01:01:05,420
Andrew is drawing the URL for us, which is good.

01:01:05,420 --> 01:01:09,420
- [Man] It's also on the main IoT schedule page.

01:01:21,946 --> 01:01:23,529
- [Woman] Hurry up.

01:01:32,417 --> 01:01:35,500
(chattering faintly)

01:01:42,216 --> 01:01:43,049
- Run time.

01:01:43,049 --> 01:01:43,882
- Yes.

01:02:00,111 --> 01:02:02,571
Got that through, okay.

01:02:02,571 --> 01:02:05,176
Hello everyone, my name is Andreas Farber.

01:02:05,176 --> 01:02:07,237
I'm going to speak about some work

01:02:07,237 --> 01:02:09,412
that I've been engaged in for

01:02:09,412 --> 01:02:12,228
a number of wireless IoT technologies.

01:02:12,228 --> 01:02:15,654
In particular LoRa, lately also FSK.

01:02:15,654 --> 01:02:18,571
And I want to start by giving a bit

01:02:19,408 --> 01:02:22,453
of a high-level overview and then diving

01:02:22,453 --> 01:02:26,017
in and out of technical details from time to time.

01:02:26,017 --> 01:02:28,543
So I hope you'll bear with that.

01:02:28,543 --> 01:02:32,065
So this is a very quick tiered model,

01:02:32,065 --> 01:02:34,590
where you'll see like some temperature sensors

01:02:34,590 --> 01:02:36,863
on the far left of the picture

01:02:36,863 --> 01:02:37,925
that are sending data,

01:02:37,925 --> 01:02:40,590
that are being received by gateways.

01:02:40,590 --> 01:02:43,893
Those gateways provide the data to some form of backend.

01:02:43,893 --> 01:02:46,052
Data gets stored somewhere,

01:02:46,052 --> 01:02:49,018
and ultimately the data somehow gets analyzed

01:02:49,018 --> 01:02:50,349
that has been received.

01:02:50,349 --> 01:02:54,535
Now, I'm gonna talk about this first part here,

01:02:54,535 --> 01:02:56,714
the blue wireless communication.

01:02:56,714 --> 01:03:00,714
And LPWAN stands for low-power wide area network

01:03:01,809 --> 01:03:05,413
whereas WPAN is for wireless personal area network.

01:03:05,413 --> 01:03:09,378
And I found that the definitions of what is what

01:03:09,378 --> 01:03:11,675
have pretty much grown together these days.

01:03:11,675 --> 01:03:14,550
So I'm gonna get to which ones

01:03:14,550 --> 01:03:17,050
I'll be talking about shortly.

01:03:19,924 --> 01:03:24,151
The characteristics are pretty much in the name.

01:03:24,151 --> 01:03:26,680
So low power means that when we're thinking

01:03:26,680 --> 01:03:29,401
about like a very small microcontroller,

01:03:29,401 --> 01:03:31,960
and if it's not sending a lot of data

01:03:31,960 --> 01:03:34,081
like I don't know, maybe once a day,

01:03:34,081 --> 01:03:37,441
then it might last on battery lifetime up to 10 years.

01:03:37,441 --> 01:03:39,211
Some companies have even been thinking about

01:03:39,211 --> 01:03:42,166
putting these sensors inside HART

01:03:42,166 --> 01:03:43,632
to like detect whether a car is parked

01:03:43,632 --> 01:03:47,508
somewhere or not and then just forgetting about it at all.

01:03:47,508 --> 01:03:49,402
If you wanna have like a higher-level Linux system,

01:03:49,402 --> 01:03:51,208
then that's probably not gonna be as long,

01:03:51,208 --> 01:03:53,483
and in particular, if you wanna send

01:03:53,483 --> 01:03:55,542
and receive data multiple times

01:03:55,542 --> 01:03:58,189
per day or per hour or whatever.

01:03:58,189 --> 01:04:01,728
And then the last part of course, is the wide area.

01:04:01,728 --> 01:04:04,549
Wide area when you have a Linux site,

01:04:04,549 --> 01:04:07,007
then it's gonna be up to 48 kilometers

01:04:07,007 --> 01:04:08,999
with the LoRa technology.

01:04:08,999 --> 01:04:11,266
In cities, of course, with sorry,

01:04:11,266 --> 01:04:13,377
with obstructions in between,

01:04:13,377 --> 01:04:15,211
it's maybe up to 10 kilometers

01:04:15,211 --> 01:04:17,527
but still much longer than your average

01:04:17,527 --> 01:04:19,493
like Bluetooth or Wi-Fi connection

01:04:19,493 --> 01:04:21,826
that you would have at home.

01:04:23,410 --> 01:04:25,632
And then finally, another aspect

01:04:25,632 --> 01:04:27,598
that has partially already been mentioned

01:04:27,598 --> 01:04:30,246
earlier on in this session is that for one,

01:04:30,246 --> 01:04:33,663
and you have very small data packets, so.

01:04:34,566 --> 01:04:38,276
We heard about eight bytes for temperature sensor.

01:04:38,276 --> 01:04:41,477
Sigfox can do a thing up to 12 bytes of data.

01:04:41,477 --> 01:04:43,560
LoRa up to 255, 56 bytes.

01:04:44,736 --> 01:04:46,972
So that's about the amount of data

01:04:46,972 --> 01:04:49,745
and because of regulatory restrictions,

01:04:49,745 --> 01:04:53,584
you cannot send arbitrarily sequences of packets,

01:04:53,584 --> 01:04:56,021
at least not on the same frequency.

01:04:56,021 --> 01:04:59,271
So there, you will be sending more data

01:05:03,421 --> 01:05:05,624
uplink than you will see downlink.

01:05:05,624 --> 01:05:07,048
But still don't be get fooled

01:05:07,048 --> 01:05:08,912
by the dimension of these error in

01:05:08,912 --> 01:05:12,855
that data is given in individual device,

01:05:12,855 --> 01:05:15,517
still relatively small.

01:05:15,517 --> 01:05:20,100
But it kind of adds up as you get towards the backends.

01:05:21,695 --> 01:05:25,001
Then another classification about those technologies

01:05:25,001 --> 01:05:26,958
is whether they are using licensed

01:05:26,958 --> 01:05:29,761
or unlicensed frequency spans in the radio spectrum.

01:05:29,761 --> 01:05:34,743
So I'm mainly gonna focus on the U-LPWA technologies

01:05:34,743 --> 01:05:36,126
for practical reason so that

01:05:36,126 --> 01:05:38,550
I can control both the sender and the receiver,

01:05:38,550 --> 01:05:40,920
and I don't need to ask anyone's permission really

01:05:40,920 --> 01:05:43,676
to work with those technologies.

01:05:43,676 --> 01:05:47,369
And mainly, the ones that I'm looking into

01:05:47,369 --> 01:05:48,960
are in the sub-gigahertz range.

01:05:48,960 --> 01:05:51,710
So that's the 868 here in Europe.

01:05:52,757 --> 01:05:55,150
In the US, that's gonna be the 915.

01:05:55,150 --> 01:05:57,699
Asia, 923 and so on, and so on.

01:05:57,699 --> 01:05:58,782
470 is China.

01:06:00,116 --> 01:06:03,065
But lately also, the LoRa technology

01:06:03,065 --> 01:06:05,728
has become available for 2.4 gigahertz.

01:06:05,728 --> 01:06:09,389
I do not have the range numbers for that

01:06:09,389 --> 01:06:12,645
in my head right now but it's gonna be significantly less.

01:06:12,645 --> 01:06:17,527
But still the same technology is being applied there.

01:06:17,527 --> 01:06:20,235
By comparison that to like LTE technology,

01:06:20,235 --> 01:06:22,545
cell, mobile base stations is gonna

01:06:22,545 --> 01:06:25,962
be the opposite of that where you have to

01:06:27,110 --> 01:06:29,093
have a telco that actually operates

01:06:29,093 --> 01:06:30,947
all the equipment and please the government

01:06:30,947 --> 01:06:32,447
in order to do so.

01:06:33,350 --> 01:06:36,891
So jumping to LoRaWAN as the first

01:06:36,891 --> 01:06:39,947
primarily LPWAN technology here.

01:06:39,947 --> 01:06:42,947
So this is the MAC layer technology,

01:06:44,574 --> 01:06:48,061
where you're using a LoRa physical

01:06:48,061 --> 01:06:51,978
transmission from a base on trip-spec spectrum.

01:06:53,078 --> 01:06:56,180
And yes, the image is kind of a reference image.

01:06:56,180 --> 01:06:59,430
So don't get frightened by all of that.

01:07:00,336 --> 01:07:02,380
It's basically here the shared model again,

01:07:02,380 --> 01:07:03,728
just with some more details

01:07:03,728 --> 01:07:07,342
and that you transmit the data from sensors to some gateway.

01:07:07,342 --> 01:07:10,661
Gateway picks them up, forwards them to a backend server.

01:07:10,661 --> 01:07:12,107
Network servers that are called in this time

01:07:12,107 --> 01:07:13,958
and kind of split up by functions,

01:07:13,958 --> 01:07:15,850
and ultimately somewhere you can pick up the data

01:07:15,850 --> 01:07:18,178
that has been sent and do whatever you need

01:07:18,178 --> 01:07:19,812
to do with that.

01:07:19,812 --> 01:07:21,884
And in this case, what you're seeing here

01:07:21,884 --> 01:07:25,915
in this magenta color is that with this technology,

01:07:25,915 --> 01:07:29,089
the vendor login is that there is exactly one company

01:07:29,089 --> 01:07:30,710
that is producing the chipsets

01:07:30,710 --> 01:07:34,186
that are among the transceivers of this wireless technology.

01:07:34,186 --> 01:07:35,679
They've patented it.

01:07:35,679 --> 01:07:37,695
But there's a lot of module vendors

01:07:37,695 --> 01:07:39,690
that are actually like making this available

01:07:39,690 --> 01:07:43,342
so you do have choice in where you can buy it from

01:07:43,342 --> 01:07:47,311
and all the specs for how to access those chips

01:07:47,311 --> 01:07:50,228
are pretty much open-end available.

01:07:52,254 --> 01:07:56,171
Sigfox is the other big LPWAN technology today.

01:07:57,432 --> 01:07:59,557
For that, you have a company,

01:07:59,557 --> 01:08:02,232
one single company that is actually operating

01:08:02,232 --> 01:08:04,926
all the infrastructure side of the technology.

01:08:04,926 --> 01:08:08,383
So you can have a choice of the actual chipset vendors

01:08:08,383 --> 01:08:11,350
that will provide the transceivers to use that technology.

01:08:11,350 --> 01:08:13,481
But you will be bound to buying a subscription

01:08:13,481 --> 01:08:15,305
from the company at Sigfox

01:08:15,305 --> 01:08:17,221
in order to operate the data in terms of

01:08:17,221 --> 01:08:21,138
accessing what your sensors have actually sent.

01:08:22,569 --> 01:08:23,820
The frontends again to that

01:08:23,820 --> 01:08:27,075
can be customized but from the

01:08:27,075 --> 01:08:28,784
like payment model, you are bound

01:08:28,784 --> 01:08:31,350
to a this single company.

01:08:31,350 --> 01:08:33,859
(member of audience speaking faintly)

01:08:33,859 --> 01:08:35,100
- Kind of, so they're all like some,

01:08:35,100 --> 01:08:37,629
I think, one-year license if you buy

01:08:37,629 --> 01:08:40,962
a certain evaluation kits but I will not

01:08:43,197 --> 01:08:45,629
disagree with you here.

01:08:45,629 --> 01:08:47,186
And then this one looks much greener

01:08:47,186 --> 01:08:48,358
but don't get fooled to it.

01:08:48,358 --> 01:08:51,258
This is like the narrowband IoT,

01:08:51,258 --> 01:08:53,325
which is the new LTE standard

01:08:53,325 --> 01:08:55,440
that is being operated by telcos.

01:08:55,440 --> 01:08:57,386
So you have choice of telcos.

01:08:57,386 --> 01:08:59,808
But if you wanna play with it in your SIM card,

01:08:59,808 --> 01:09:01,432
you need to have some form of subscription

01:09:01,432 --> 01:09:04,515
or access directly using the service.

01:09:06,181 --> 01:09:09,894
It's kind of easier for server, sorry, for software,

01:09:09,894 --> 01:09:11,528
in that it is being abstracted

01:09:11,528 --> 01:09:13,696
by an AT command layer.

01:09:13,696 --> 01:09:17,295
And so there's a lot of logics still in those modems,

01:09:17,295 --> 01:09:19,924
even if they are supposed to be less complex

01:09:19,924 --> 01:09:24,458
and less power hungry than a regular 4G, 5G modem.

01:09:24,458 --> 01:09:27,451
And well, if you are essentially then

01:09:27,451 --> 01:09:29,868
just tunneling UDP, IPv6 data

01:09:31,769 --> 01:09:35,003
from your end device to whatever service

01:09:35,003 --> 01:09:35,846
you wanna get it to,

01:09:35,846 --> 01:09:37,585
there are exception to that rule

01:09:37,585 --> 01:09:38,419
that I've just made.

01:09:38,419 --> 01:09:42,337
But that is basically the rough picture.

01:09:42,337 --> 01:09:44,684
Now, the interesting part is gonna be

01:09:44,684 --> 01:09:46,601
how do we actually, yes

01:09:47,500 --> 01:09:49,971
and what I did not go into,

01:09:49,971 --> 01:09:52,908
there is like five more LPWAN technology

01:09:52,908 --> 01:09:55,126
with less distribution out there.

01:09:55,126 --> 01:09:58,896
So basically, chip vendors and service vendors

01:09:58,896 --> 01:10:01,657
are thinking about ways how can you optimize

01:10:01,657 --> 01:10:03,805
use cases for energy lifetime,

01:10:03,805 --> 01:10:05,713
particularly data call files,

01:10:05,713 --> 01:10:07,543
and make money from that.

01:10:07,543 --> 01:10:10,850
So there is a lot of growth and movement in that area.

01:10:10,850 --> 01:10:13,396
What I've drawn here is a bit biased

01:10:13,396 --> 01:10:17,024
towards the LoRa technology that I have been working on

01:10:17,024 --> 01:10:19,132
just to give a kind of a LEGO picture

01:10:19,132 --> 01:10:21,260
of how all those technologies fit together

01:10:21,260 --> 01:10:24,084
and can be layered in theory.

01:10:24,084 --> 01:10:25,699
So in particular, as we've already seen

01:10:25,699 --> 01:10:28,418
in the one picture based on top of LoRa,

01:10:28,418 --> 01:10:29,839
we can have LoRaWAN,

01:10:29,839 --> 01:10:31,809
we can also do our own stuff directly,

01:10:31,809 --> 01:10:34,297
peer to peer between modules.

01:10:34,297 --> 01:10:38,001
Similarly, we can also use LoRaWAN with an FSK modulation.

01:10:38,001 --> 01:10:42,251
That was briefly shown in the whale diagram before.

01:10:43,141 --> 01:10:45,939
And the ITF has also recently been working

01:10:45,939 --> 01:10:49,094
on a draft called static context header compression,

01:10:49,094 --> 01:10:52,277
for which is another of those IPv6 based

01:10:52,277 --> 01:10:55,227
technologies that can, among others,

01:10:55,227 --> 01:10:57,743
be used with LoRaWAN, also with Sigfox

01:10:57,743 --> 01:11:00,464
and a few other technology, I think,

01:11:00,464 --> 01:11:02,247
and the IoT is gonna be the other one.

01:11:02,247 --> 01:11:04,116
- [Man] Andreas, I just have a quick question.

01:11:04,116 --> 01:11:05,232
- [Andreas] Yes?

01:11:05,232 --> 01:11:09,531
- So I think I'm, correct me if I'm mistaken,

01:11:09,531 --> 01:11:12,450
but LoRa is fully proprietary right?

01:11:12,450 --> 01:11:13,839
Is that correct?

01:11:13,839 --> 01:11:16,457
- Yes, so there have been talks,

01:11:16,457 --> 01:11:19,041
I think that forced them going into the details

01:11:19,041 --> 01:11:20,920
of what people have been reverse engineering

01:11:20,920 --> 01:11:22,862
but at least, even if you know what it is,

01:11:22,862 --> 01:11:27,069
in theory, you may need to make payments to Semtech.

01:11:27,069 --> 01:11:28,662
- So is there, is it not only

01:11:28,662 --> 01:11:30,465
their wired protocol that's proprietary

01:11:30,465 --> 01:11:33,064
but also their modulation format?

01:11:33,064 --> 01:11:36,478
- I'm not a lawyer but I believe so.

01:11:36,478 --> 01:11:38,377
- I like that answer, okay.

01:11:38,377 --> 01:11:40,140
So basically, anything that goes in the Linux kernel

01:11:40,140 --> 01:11:41,992
is fully reverse engineered,

01:11:41,992 --> 01:11:46,992
and 100% community-driven at this point right, is it?

01:11:47,171 --> 01:11:48,004
- So put it this way,

01:11:48,004 --> 01:11:52,171
I believe that nothing that I have been working on

01:11:53,014 --> 01:11:56,066
in that area is falls into the category

01:11:56,066 --> 01:11:57,342
of being reverse engineered.

01:11:57,342 --> 01:11:59,097
This is following public documentation

01:11:59,097 --> 01:12:01,298
provided by the vendor on how to use

01:12:01,298 --> 01:12:04,633
like SPI interfaces or UART interfaces

01:12:04,633 --> 01:12:08,902
in order to communicate with the necessary hardware.

01:12:08,902 --> 01:12:11,145
- [Man] So I think what Andreas is saying,

01:12:11,145 --> 01:12:12,656
so what he's doing is like

01:12:12,656 --> 01:12:14,976
he's providing drivers for the chips and everything.

01:12:14,976 --> 01:12:17,249
So that is like completely free and available.

01:12:17,249 --> 01:12:18,335
That's not a problem.

01:12:18,335 --> 01:12:21,144
So that's all inside the chip what they have.

01:12:21,144 --> 01:12:23,115
And what they also, I mean there are other things

01:12:23,115 --> 01:12:25,559
that they might want to keep secrets of as well.

01:12:25,559 --> 01:12:28,349
But I mean, they have the Open LoRa spec,

01:12:28,349 --> 01:12:29,629
which you can use for building like

01:12:29,629 --> 01:12:31,833
the application layer on top and stuff like that.

01:12:31,833 --> 01:12:32,932
So all these kind of pieces,

01:12:32,932 --> 01:12:36,952
you can use without any big legal problems.

01:12:36,952 --> 01:12:38,829
Again, not on LoRa but I think

01:12:38,829 --> 01:12:41,396
that's something we can use on a kernel perspective.

01:12:41,396 --> 01:12:43,145
But I mean, what we really want to do

01:12:43,145 --> 01:12:44,596
is like we'd want to use the chips

01:12:44,596 --> 01:12:45,616
that are already there.

01:12:45,616 --> 01:12:47,516
We don't want to do our own FI.

01:12:47,516 --> 01:12:49,206
We don't want to do FDR.

01:12:49,206 --> 01:12:50,887
Some people might want to do that

01:12:50,887 --> 01:12:52,985
and there are some talks about that in specifications

01:12:52,985 --> 01:12:54,905
that has been reverse engineered.

01:12:54,905 --> 01:12:57,586
But for our use case, that's not really a problem.

01:12:57,586 --> 01:13:01,832
(member of audience speaking faintly)

01:13:01,832 --> 01:13:02,863
- [Man] No, I mean, no no.

01:13:02,863 --> 01:13:04,603
The Semtech chips you can get

01:13:04,603 --> 01:13:06,305
are like really SPI and everything.

01:13:06,305 --> 01:13:07,283
You can put everything,

01:13:07,283 --> 01:13:09,277
can put the mech and stuff like that

01:13:09,277 --> 01:13:11,358
inside the kernel.

01:13:11,358 --> 01:13:12,852
So that is not the problem.

01:13:12,852 --> 01:13:15,611
It's more like the FI, the things they have in there

01:13:15,611 --> 01:13:16,907
that have been reverse engineered.

01:13:16,907 --> 01:13:18,376
And that's something you can replicate

01:13:18,376 --> 01:13:20,333
with SDR or something like that.

01:13:20,333 --> 01:13:22,544
But that's something we are not supporting right now.

01:13:22,544 --> 01:13:25,189
At least that is what I would think.

01:13:25,189 --> 01:13:27,685
- So I think you can, I'm gonna use this

01:13:27,685 --> 01:13:29,194
question to say two things.

01:13:29,194 --> 01:13:32,777
So one is the quest that I am on is to make

01:13:33,693 --> 01:13:36,229
the hardware that is actually out there

01:13:36,229 --> 01:13:38,776
accessible conveniently with Linux,

01:13:38,776 --> 01:13:41,527
in a way that fits, I think also the topic

01:13:41,527 --> 01:13:44,233
that Peter is going to talk to you about later,

01:13:44,233 --> 01:13:47,239
that it fits in with the generic enterprise distros

01:13:47,239 --> 01:13:48,807
that we both work on.

01:13:48,807 --> 01:13:51,069
And in the end are interested in

01:13:51,069 --> 01:13:53,101
having our customers be able to work

01:13:53,101 --> 01:13:55,580
with those technologies that they want to.

01:13:55,580 --> 01:14:00,080
(member of audience speaking faintly)

01:14:01,120 --> 01:14:03,706
- The second thing here is that

01:14:03,706 --> 01:14:05,350
by using this color coding here,

01:14:05,350 --> 01:14:07,289
I've already implied some things here

01:14:07,289 --> 01:14:09,575
in that there are certain technologies

01:14:09,575 --> 01:14:12,072
that we can implement in the Linux kernel

01:14:12,072 --> 01:14:13,631
and some that we don't.

01:14:13,631 --> 01:14:18,631
And my interest here is enabling as much as we can,

01:14:18,680 --> 01:14:20,869
which would include having like

01:14:20,869 --> 01:14:24,362
a base FI layer and access in the Linux kernel

01:14:24,362 --> 01:14:27,660
that people could use to do a user space-side

01:14:27,660 --> 01:14:29,708
implementation if they have the necessary

01:14:29,708 --> 01:14:31,158
permissions from the vendors

01:14:31,158 --> 01:14:34,658
that then does not involve us in any case.

01:14:35,593 --> 01:14:38,343
And in other cases, be able to do

01:14:39,293 --> 01:14:42,210
like MAC implementations and as we,

01:14:43,387 --> 01:14:47,815
as people run into needs to actually have them.

01:14:47,815 --> 01:14:49,627
So yeah, the orange ones are the ones

01:14:49,627 --> 01:14:51,884
where I see potential problems

01:14:51,884 --> 01:14:54,710
depending on what exactly we want to implement, yeah.

01:14:54,710 --> 01:14:56,603
- By problems, you mean the orange things

01:14:56,603 --> 01:14:58,368
are things that might need to live in user space?

01:14:58,368 --> 01:14:59,833
Or that they have 'cause at one point,

01:14:59,833 --> 01:15:00,752
you were kinda drawing the distinction

01:15:00,752 --> 01:15:02,689
between what was kinda in the kernel

01:15:02,689 --> 01:15:05,581
and how to stay, and what's not, right.

01:15:05,581 --> 01:15:06,789
So it might.

01:15:06,789 --> 01:15:08,852
- Yeah, so if we've got problems for it.

01:15:08,852 --> 01:15:11,602
So when a technology is patented,

01:15:13,249 --> 01:15:15,622
then my understanding again, not as a lawyer,

01:15:15,622 --> 01:15:18,473
is that we cannot just implement it in

01:15:18,473 --> 01:15:20,390
the GPLv2 Linux kernel.

01:15:21,325 --> 01:15:23,751
So for that reason, we would still be able

01:15:23,751 --> 01:15:25,802
to provide some form of socket interface

01:15:25,802 --> 01:15:28,475
that raw data can be put in and out.

01:15:28,475 --> 01:15:31,942
And where then, the implementation of what like

01:15:31,942 --> 01:15:33,965
package formats they want to implement

01:15:33,965 --> 01:15:38,048
would then need live outside of the Linux kernel.

01:15:40,027 --> 01:15:42,045
So yeah, and with that, I would directly

01:15:42,045 --> 01:15:44,189
dive into the more technical,

01:15:44,189 --> 01:15:46,317
inside of how actually to go about this.

01:15:46,317 --> 01:15:49,854
So I guess we have a very technical audience

01:15:49,854 --> 01:15:51,008
here at Plumbers today.

01:15:51,008 --> 01:15:53,787
So if you're writing a new Linux kernel driver

01:15:53,787 --> 01:15:56,037
for non-network subsystems,

01:15:57,201 --> 01:15:59,360
then usually you need some form of identifier

01:15:59,360 --> 01:16:02,226
like a device-tree compatible string,

01:16:02,226 --> 01:16:05,309
a CPI ID, or a USB vendor product ID,

01:16:06,275 --> 01:16:07,578
so on and so on.

01:16:07,578 --> 01:16:10,280
To uniquely identify your driver,

01:16:10,280 --> 01:16:11,941
you could just plug it in as a module

01:16:11,941 --> 01:16:14,998
to an existing system and it starts doing something.

01:16:14,998 --> 01:16:16,582
Here with the network system,

01:16:16,582 --> 01:16:18,494
we kind of have a bit of a bottleneck,

01:16:18,494 --> 01:16:21,374
in that we're going via one common API.

01:16:21,374 --> 01:16:24,895
And this needs to have like a numeric identifiers

01:16:24,895 --> 01:16:27,030
that distinguish what kind of data

01:16:27,030 --> 01:16:28,111
we're actually dealing with.

01:16:28,111 --> 01:16:31,474
So we have a global number space of like

01:16:31,474 --> 01:16:33,588
address protocol families.

01:16:33,588 --> 01:16:36,355
We have what we already have for the IoT space.

01:16:36,355 --> 01:16:39,217
In here is Bluetooth and 802154

01:16:39,217 --> 01:16:40,929
as I guess most of you know,

01:16:40,929 --> 01:16:43,087
and we have been thinking about

01:16:43,087 --> 01:16:45,662
actually handling LoRa at the same level.

01:16:45,662 --> 01:16:48,490
However based on previous discussions,

01:16:48,490 --> 01:16:50,514
we've lately been shifting that over

01:16:50,514 --> 01:16:52,732
to the more generic PF packet format,

01:16:52,732 --> 01:16:55,026
which then requires less boilerplate

01:16:55,026 --> 01:16:57,066
implementation in the Linux kernel.

01:16:57,066 --> 01:16:59,059
Unfortunately, it has one major drawback,

01:16:59,059 --> 01:17:01,991
and that is that you need to be a

01:17:01,991 --> 01:17:04,606
the root user, superuser, in order to send

01:17:04,606 --> 01:17:06,206
such packets on that layer.

01:17:06,206 --> 01:17:08,331
Obviously, if you then have higher levels

01:17:08,331 --> 01:17:10,446
like LoRaWAN above that,

01:17:10,446 --> 01:17:13,737
that could be used as an explicit address family

01:17:13,737 --> 01:17:16,511
would then give people still the possibility

01:17:16,511 --> 01:17:19,053
to do that communication over the same hardware

01:17:19,053 --> 01:17:22,286
on the higher level but not on the lowest level.

01:17:22,286 --> 01:17:24,930
- [Man] Isn't there a capability though for that?

01:17:24,930 --> 01:17:26,424
I'm over here. - Where is it? Oh.

01:17:26,424 --> 01:17:28,047
- [Man] Isn't there a capability for that

01:17:28,047 --> 01:17:29,709
that would maybe mitigate that a bit,

01:17:29,709 --> 01:17:33,126
you can set the capability for PF packet?

01:17:34,044 --> 01:17:35,594
- Is there someone else in the room that would--

01:17:35,594 --> 01:17:37,055
- [Man] I'm pretty sure there was an,

01:17:37,055 --> 01:17:38,519
maybe that if there isn't that

01:17:38,519 --> 01:17:41,617
would also mitigate things a bit for you.

01:17:41,617 --> 01:17:45,123
- So that could be on the SELinux layer or that?

01:17:45,123 --> 01:17:46,689
- [Man] No, it's just the capability.

01:17:46,689 --> 01:17:48,004
I didn't think you require SELinux

01:17:48,004 --> 01:17:49,592
to have capabilities, did you?

01:17:49,592 --> 01:17:51,259
No, didn't think so.

01:17:53,430 --> 01:17:55,692
- Okay yeah, so LoRaWAN is definitely

01:17:55,692 --> 01:17:58,008
something that has been in the work

01:17:58,008 --> 01:18:00,591
by another volunteer in Taiwan.

01:18:05,578 --> 01:18:07,125
It's still a bit stuck because we need

01:18:07,125 --> 01:18:08,771
something underneath to go with that.

01:18:08,771 --> 01:18:11,778
Either a module driver that fully then

01:18:11,778 --> 01:18:14,390
gets the implementation for LoRaWAN itself

01:18:14,390 --> 01:18:17,354
or the soft-MAC layer that would then

01:18:17,354 --> 01:18:22,166
go beneath to the actual temperature layer then.

01:18:22,166 --> 01:18:23,964
And again here, I also mentioned

01:18:23,964 --> 01:18:26,654
like Sigfox has one technology that's here

01:18:26,654 --> 01:18:28,161
that's already in here.

01:18:28,161 --> 01:18:32,490
Ultra Narrowband protocol that is being mentioned here.

01:18:32,490 --> 01:18:35,824
And another thing that I found quite restrictive

01:18:35,824 --> 01:18:39,988
is someone that's working on Linux distro

01:18:39,988 --> 01:18:43,071
is that we have this limit of AF_MAX,

01:18:44,177 --> 01:18:47,594
which is basically the last socket family

01:18:50,120 --> 01:18:53,010
that had been added to the Linux kernel.

01:18:53,010 --> 01:18:56,221
And in order to just use an existing kernel

01:18:56,221 --> 01:18:57,819
and try out some of those technologies

01:18:57,819 --> 01:18:59,875
just by mod-probing some code

01:18:59,875 --> 01:19:01,298
that I'm locally working on.

01:19:01,298 --> 01:19:02,832
Because you know, trying to avoid to do

01:19:02,832 --> 01:19:04,186
like a cross compiling of kernel,

01:19:04,186 --> 01:19:06,006
deploying that to multiple systems

01:19:06,006 --> 01:19:08,379
just to find out whether one line of code change

01:19:08,379 --> 01:19:10,684
actually made the difference or not.

01:19:10,684 --> 01:19:12,317
But I've then simply resorted

01:19:12,317 --> 01:19:17,006
to reusing existing unused numbers for testing purposes,

01:19:17,006 --> 01:19:18,343
and just using like the official

01:19:18,343 --> 01:19:21,507
intended numbers when doing like a full

01:19:21,507 --> 01:19:24,924
cross compilation from a like Linux base.

01:19:25,972 --> 01:19:29,472
Then getting back to the PF packet topics.

01:19:30,390 --> 01:19:34,973
So for example, 802.15.4 has its own packet type there,

01:19:37,122 --> 01:19:39,935
and we've started adding some for the technologies

01:19:39,935 --> 01:19:41,428
that we've been in touch for that

01:19:41,428 --> 01:19:44,939
is much less invasive than the address families.

01:19:44,939 --> 01:19:48,606
So we don't need to compensate for that one.

01:19:50,285 --> 01:19:54,675
And yeah, LoRa, there is also is something called,

01:19:54,675 --> 01:19:56,564
oh by the way, I think I didn't say that

01:19:56,564 --> 01:19:58,793
yet LoRa is short for long range.

01:19:58,793 --> 01:20:01,881
And here then, FLRC is Fast Long Range Coding.

01:20:01,881 --> 01:20:03,317
That's a technology that's being used

01:20:03,317 --> 01:20:06,734
in the in 2.4 gigahertz range by Semtech.

01:20:08,581 --> 01:20:10,951
Similarly, the other technology mentioned

01:20:10,951 --> 01:20:13,296
in the title was an FSK,

01:20:13,296 --> 01:20:14,750
the Frequency Shift Keying,

01:20:14,750 --> 01:20:17,671
which is a technology that's been around for ages.

01:20:17,671 --> 01:20:19,398
It's not truly an LPWAN technology

01:20:19,398 --> 01:20:22,481
but come out connected to that topic.

01:20:25,502 --> 01:20:27,684
And yeah, there is then also all kinds

01:20:27,684 --> 01:20:30,877
of technologies that maybe are layered on top of them.

01:20:30,877 --> 01:20:34,364
And if we want to talk directly to a hard-MAC module,

01:20:34,364 --> 01:20:38,781
then we may also need further concepts like that one.

01:20:39,676 --> 01:20:42,116
So diving deeper into this topic,

01:20:42,116 --> 01:20:45,339
there is two main types of modules

01:20:45,339 --> 01:20:46,969
when dealing with LoRa.

01:20:46,969 --> 01:20:48,945
The one on the left then is

01:20:48,945 --> 01:20:51,609
when we're just using the Semtech chipset

01:20:51,609 --> 01:20:55,621
and talking to that directly via the SPI protocol mostly.

01:20:55,621 --> 01:20:57,711
The alternative to that is vendors

01:20:57,711 --> 01:20:59,687
that are using some form of microcontroller

01:20:59,687 --> 01:21:03,830
that is inside using the Semtech chipset

01:21:03,830 --> 01:21:06,929
and kind of rubbing that, which has the new properties

01:21:06,929 --> 01:21:10,171
that we know from the data sheets,

01:21:10,171 --> 01:21:12,380
like what exactly are all the config fields

01:21:12,380 --> 01:21:14,158
that the transceiver sheet has.

01:21:14,158 --> 01:21:16,273
So we can just simply go to the source

01:21:16,273 --> 01:21:18,816
and use those for all the Netlink interfaces

01:21:18,816 --> 01:21:22,367
that I'm gonna get to in a moment.

01:21:22,367 --> 01:21:26,867
The main use cases for Linux in this LPWAN LoRa world,

01:21:27,945 --> 01:21:30,669
for one, if you have like a BeagleBone

01:21:30,669 --> 01:21:32,326
or Raspberry Pi, or something,

01:21:32,326 --> 01:21:33,848
you can start prototyping quickly

01:21:33,848 --> 01:21:37,848
without having to code raw microcontroller code.

01:21:39,497 --> 01:21:41,707
And yeah, you can just quickly send a packet

01:21:41,707 --> 01:21:44,942
and then see what effects that has on your network.

01:21:44,942 --> 01:21:47,015
The other thing that is going to be

01:21:47,015 --> 01:21:49,685
like one level higher is to use it

01:21:49,685 --> 01:21:52,134
as a LoRaWAN client, where Linux can abstract

01:21:52,134 --> 01:21:53,993
some of those drawing

01:21:53,993 --> 01:21:57,946
and different types of packets in here.

01:21:57,946 --> 01:21:59,551
And ultimately, the main use case

01:21:59,551 --> 01:22:01,951
that I see for the technology here is

01:22:01,951 --> 01:22:04,284
the gateway level, which are

01:22:06,634 --> 01:22:10,363
I guess to almost 100% running Linux

01:22:10,363 --> 01:22:12,420
and dealing with a lot more complexity

01:22:12,420 --> 01:22:14,597
both on the chip level and on the level

01:22:14,597 --> 01:22:16,380
of the software that follows behind

01:22:16,380 --> 01:22:18,713
for all the backend systems.

01:22:20,690 --> 01:22:23,374
Yes, this is a brief diagram that I keep showing

01:22:23,374 --> 01:22:25,419
how this works with the software

01:22:25,419 --> 01:22:27,879
that you will find out there by vendors today.

01:22:27,879 --> 01:22:29,991
If you just get exactly from GitHub,

01:22:29,991 --> 01:22:32,446
you will have like SpiDev or TTY devices

01:22:32,446 --> 01:22:35,732
that you don't have to interact with directly.

01:22:35,732 --> 01:22:37,412
And what I would like to get

01:22:37,412 --> 01:22:40,019
is a vendor independent interface.

01:22:40,019 --> 01:22:43,690
So therefore sockets that we can deal with

01:22:43,690 --> 01:22:48,396
sending, receiving, and configuring packets and interfaces,

01:22:48,396 --> 01:22:51,713
and have that like in one unified mainline kernel.

01:22:51,713 --> 01:22:54,027
And user space packages be available

01:22:54,027 --> 01:22:56,284
generic in distros without having to

01:22:56,284 --> 01:22:58,556
actually modify the code in order

01:22:58,556 --> 01:23:01,741
to fit for this vendor or if it's another vendor.

01:23:01,741 --> 01:23:04,029
And while there's some more ideas out there

01:23:04,029 --> 01:23:06,100
of how to distribute that software,

01:23:06,100 --> 01:23:07,670
one is of course just to have like

01:23:07,670 --> 01:23:09,092
API and deb packages that would be

01:23:09,092 --> 01:23:10,311
providing the software.

01:23:10,311 --> 01:23:12,184
Alternative is to use containers in one form

01:23:12,184 --> 01:23:13,966
or another for that.

01:23:13,966 --> 01:23:15,916
And I'm gonna speed up speaking a bit here

01:23:15,916 --> 01:23:18,666
to not take away the whole break.

01:23:19,988 --> 01:23:22,782
So ultimately, the main difference here

01:23:22,782 --> 01:23:25,815
is that we're gonna deal with socket buffers.

01:23:25,815 --> 01:23:27,794
Them and with those buffers will also

01:23:27,794 --> 01:23:30,562
be able to deal with the higher-level protocol layers

01:23:30,562 --> 01:23:32,626
that are not so easy to deal with

01:23:32,626 --> 01:23:35,709
when you're using the vendor-provided

01:23:37,123 --> 01:23:38,956
like SpiDev base code.

01:23:40,107 --> 01:23:43,862
Now, I already mentioned Netlink in a few minutes ago.

01:23:43,862 --> 01:23:46,695
And one thing that's slightly ugly

01:23:48,141 --> 01:23:50,891
is that you're dealing with enums

01:23:51,755 --> 01:23:55,888
for both commands and attributes with Netlink interfaces,

01:23:55,888 --> 01:23:58,724
which means that every implementation

01:23:58,724 --> 01:24:01,100
of Netlink needs to use their own list,

01:24:01,100 --> 01:24:04,933
even if pretty much every wireless technology,

01:24:06,254 --> 01:24:08,915
maybe not Wi-Fi but many others are gonna

01:24:08,915 --> 01:24:12,077
have like frequency property of the center frequency

01:24:12,077 --> 01:24:14,207
that someone needs to specify.

01:24:14,207 --> 01:24:16,061
In this case here, well, we don't have

01:24:16,061 --> 01:24:19,308
something that goes like Wi-Fi beyond four gigahertz.

01:24:19,308 --> 01:24:22,915
So for now, we're getting by with the U32.

01:24:22,915 --> 01:24:25,868
And basically, I've been trying to build

01:24:25,868 --> 01:24:30,119
those Netlink commands and commands up in parallel

01:24:30,119 --> 01:24:32,974
for the technology so that they kind of

01:24:32,974 --> 01:24:35,962
the naming, at least, that remains an instance.

01:24:35,962 --> 01:24:38,801
And if anyone like for example here,

01:24:38,801 --> 01:24:41,455
an 802.15.4 have ideas,

01:24:41,455 --> 01:24:42,768
I'm looking at a particular person

01:24:42,768 --> 01:24:46,678
for how we can actually share some of those things.

01:24:46,678 --> 01:24:49,701
Then I would be very much interested in ideas.

01:24:49,701 --> 01:24:52,848
I don't know, maybe some C-level macros

01:24:52,848 --> 01:24:56,788
to insert something into list also but--

01:24:56,788 --> 01:24:57,739
- [Man] To be honest, right now,

01:24:57,739 --> 01:24:59,962
I would consider that just as some kind of

01:24:59,962 --> 01:25:01,749
boilerplate code you would have.

01:25:01,749 --> 01:25:04,241
I mean yeah, it's not the nicest solution.

01:25:04,241 --> 01:25:06,800
But it's not really a big problem either.

01:25:06,800 --> 01:25:08,210
At least, that is my opinion on that.

01:25:08,210 --> 01:25:10,335
You often have like really

01:25:10,335 --> 01:25:11,914
slight differences in meaning

01:25:11,914 --> 01:25:13,469
and how they're used in the end,

01:25:13,469 --> 01:25:15,895
so it might be sometimes forget to share that.

01:25:15,895 --> 01:25:17,237
I mean if you have something

01:25:17,237 --> 01:25:20,466
and you find some big enough area of codebase,

01:25:20,466 --> 01:25:21,723
I think that makes sense.

01:25:21,723 --> 01:25:23,601
Send a patch in, we can look over that.

01:25:23,601 --> 01:25:24,434
I'm happy with that

01:25:24,434 --> 01:25:26,226
but normally I would really consider

01:25:26,226 --> 01:25:28,714
that just it's another type of enum,

01:25:28,714 --> 01:25:33,583
some Netlink product net code and assets, so yeah.

01:25:33,583 --> 01:25:35,106
- [Man] And though, yeah, one thing that I've

01:25:35,106 --> 01:25:38,436
kind of try to indicate by the upper case in here

01:25:38,436 --> 01:25:40,853
is so this part of the slide,

01:25:42,138 --> 01:25:45,173
there's always command set and command get

01:25:45,173 --> 01:25:48,307
in order to retrieve and set the corresponding field

01:25:48,307 --> 01:25:50,616
that is implemented at the moment

01:25:50,616 --> 01:25:52,523
in my private GitHub tree,

01:25:52,523 --> 01:25:56,540
not yet in the staging repository on kernel.org.

01:25:56,540 --> 01:25:59,957
And this part down here for that, I have,

01:26:01,218 --> 01:26:02,893
so I've started adopting the same thing

01:26:02,893 --> 01:26:05,351
that you have in 802.15.4,

01:26:05,351 --> 01:26:08,328
that you have this FI struct kind of

01:26:08,328 --> 01:26:10,515
as an abstraction, which then allows

01:26:10,515 --> 01:26:12,847
one driver to have multiple FIs

01:26:12,847 --> 01:26:15,856
for the various technologies that they implement.

01:26:15,856 --> 01:26:18,512
And for the ones that are in lower case down here,

01:26:18,512 --> 01:26:21,118
these ones are currently only exposed

01:26:21,118 --> 01:26:23,969
on the FI layer with hooks

01:26:23,969 --> 01:26:27,107
but not yet exposed as Netlink command

01:26:27,107 --> 01:26:30,044
that still needs to be implemented.

01:26:30,044 --> 01:26:31,208
And this is a kind of a picture

01:26:31,208 --> 01:26:33,465
of how this is supposed to fit together.

01:26:33,465 --> 01:26:36,450
So we've been talking about sending raw

01:26:36,450 --> 01:26:39,367
LoRa data via PF packets down here.

01:26:41,538 --> 01:26:44,871
We have to go along with that over here.

01:26:46,153 --> 01:26:47,836
By now, it's called the module name

01:26:47,836 --> 01:26:50,847
is called the CFG LoRa, so config LoRa.

01:26:50,847 --> 01:26:53,008
NLLoRa is the file implementing it

01:26:53,008 --> 01:26:55,437
that would then be used to configure

01:26:55,437 --> 01:26:56,920
on that same layer.

01:26:56,920 --> 01:27:00,627
And then if we actually finally complete

01:27:00,627 --> 01:27:03,156
the soft-MAC implementation for doing

01:27:03,156 --> 01:27:05,010
LoRaWAN on top of LoRa,

01:27:05,010 --> 01:27:08,898
then we will need also the same thing up here

01:27:08,898 --> 01:27:10,916
in that we will need a separate Netlink interface

01:27:10,916 --> 01:27:14,833
to then do the operations on the LoRaWAN layer.

01:27:16,948 --> 01:27:19,963
Can I, two slides, think yeah.

01:27:19,963 --> 01:27:20,975
(Jason speaking faintly)

01:27:20,975 --> 01:27:22,449
- I know we're going into the break a little bit

01:27:22,449 --> 01:27:25,069
but I think a lot of us are interested in this.

01:27:25,069 --> 01:27:28,385
So it's good, tell me if I'm wrong.

01:27:28,385 --> 01:27:30,878
And then, but I think we'd also

01:27:30,878 --> 01:27:33,210
like to have a couple of questions for him as well, right?

01:27:33,210 --> 01:27:35,076
So let's, if you don't mind,

01:27:35,076 --> 01:27:38,050
we'll just go a little bit further into the break.

01:27:38,050 --> 01:27:39,891
- [Man] All right.

01:27:39,891 --> 01:27:40,926
- So yeah and if you wanna leave,

01:27:40,926 --> 01:27:43,369
then feel free to, I won't be offended.

01:27:43,369 --> 01:27:44,861
- Shut the door behind.

01:27:44,861 --> 01:27:48,257
- Yeah, so one other things that came up

01:27:48,257 --> 01:27:51,546
unfortunately in advanced of this talk

01:27:51,546 --> 01:27:54,544
is that at the moment, the concentrated drivers,

01:27:54,544 --> 01:27:56,597
which is the chipset that you will find

01:27:56,597 --> 01:27:59,037
in the gateways, which I said is probably

01:27:59,037 --> 01:28:01,356
gonna be the main use case for using

01:28:01,356 --> 01:28:03,273
these drivers on Linux.

01:28:05,234 --> 01:28:08,014
They unfortunately broke for the initial RFC

01:28:08,014 --> 01:28:09,906
that I had sent out, we were asked to adopt

01:28:09,906 --> 01:28:11,260
the right MAC interface

01:28:11,260 --> 01:28:13,011
back when we had like wrappers of our own

01:28:13,011 --> 01:28:15,011
around the SPI commands.

01:28:16,312 --> 01:28:17,991
We did do that and now,

01:28:17,991 --> 01:28:20,571
we had to implement FIFO support.

01:28:20,571 --> 01:28:21,999
So that's the regmap write

01:28:21,999 --> 01:28:24,499
and no ink support for regmap.

01:28:25,405 --> 01:28:27,537
Unfortunately, that is not working at the moment.

01:28:27,537 --> 01:28:29,725
So what we found just two days

01:28:29,725 --> 01:28:32,344
before this event is that when we actually

01:28:32,344 --> 01:28:35,284
bump the field max_register up to like

01:28:35,284 --> 01:28:37,501
some really high value, then we can still

01:28:37,501 --> 01:28:39,918
upload the firmware and yeah,

01:28:41,999 --> 01:28:45,411
have things working as they were before again.

01:28:45,411 --> 01:28:47,007
Here's some things that I wanted to share

01:28:47,007 --> 01:28:50,147
that we had previously discussed at another conference.

01:28:50,147 --> 01:28:51,905
We're talking about what do we do

01:28:51,905 --> 01:28:53,663
when a driver actually has, sorry,

01:28:53,663 --> 01:28:56,942
when a chipset supports both a hard-MAC

01:28:56,942 --> 01:28:58,609
and a soft-MAC mode?

01:28:59,701 --> 01:29:02,281
One idea was that we could just use a module parameter

01:29:02,281 --> 01:29:05,740
for controlling which of those we wanna use.

01:29:05,740 --> 01:29:10,478
And when we actually have multiple parallel technologies

01:29:10,478 --> 01:29:15,478
that could be used to use two distinct network devices

01:29:15,809 --> 01:29:18,028
and use the carrier up-down flag

01:29:18,028 --> 01:29:20,087
as opposed to your link up-down flag

01:29:20,087 --> 01:29:22,885
to indicate which one currently is in use

01:29:22,885 --> 01:29:25,981
to make it mutually exclusive.

01:29:25,981 --> 01:29:28,814
We also felt that it does not need

01:29:30,017 --> 01:29:32,658
to stop us from going ahead with the LoRa technology

01:29:32,658 --> 01:29:35,307
that a lot of people are interested in.

01:29:35,307 --> 01:29:38,559
If like one of those chipsets also has like a built-in mode

01:29:38,559 --> 01:29:41,059
and we have absolutely no clue at the moment yet

01:29:41,059 --> 01:29:44,499
how we can get that into the HCI framework

01:29:44,499 --> 01:29:47,521
and so on for the BlueZ stack.

01:29:47,521 --> 01:29:50,812
And another pointer was to use the

01:29:50,812 --> 01:29:54,395
6LoWPAN implementation that an 802.15.4 has

01:29:56,314 --> 01:30:00,021
as a model for how to actually do a LoRaWAN.

01:30:00,021 --> 01:30:02,688
And yes, this is a mailing list,

01:30:05,639 --> 01:30:08,832
IRC channel, previous materials

01:30:08,832 --> 01:30:12,210
that if you get the PDF, you can access.

01:30:12,210 --> 01:30:13,920
Unfortunately, not readable here.

01:30:13,920 --> 01:30:17,503
And yes, I have to skip over my test setup.

01:30:19,759 --> 01:30:22,355
Ben Whitten of Laird had contributed some code.

01:30:22,355 --> 01:30:24,011
A number of vendors have provided hardware

01:30:24,011 --> 01:30:26,433
for allowing us to build up the intra-op setup,

01:30:26,433 --> 01:30:28,477
where you know, one node is sending data to others

01:30:28,477 --> 01:30:30,113
or receiving that.

01:30:30,113 --> 01:30:33,530
And with that, I would skip to questions.

01:30:36,197 --> 01:30:38,266
Thank you for bearing with the speed

01:30:38,266 --> 01:30:40,534
that I've gone into.

01:30:40,534 --> 01:30:42,147
We've already had a number of questions.

01:30:42,147 --> 01:30:43,980
So who wants the cube?

01:30:45,360 --> 01:30:46,193
Behind you.

01:30:46,193 --> 01:30:48,551
- So just I mean, you mentioned the discussion

01:30:48,551 --> 01:30:50,773
we had at NetDev in the beginning of the year.

01:30:50,773 --> 01:30:53,482
So I think some of the more complex things

01:30:53,482 --> 01:30:57,672
you're describing here are something that

01:30:57,672 --> 01:31:00,784
can be common, so yeah, that's the one.

01:31:00,784 --> 01:31:02,540
For example, the devices having

01:31:02,540 --> 01:31:06,036
like soft and hard-MAC or exposing like

01:31:06,036 --> 01:31:07,435
different modes and stuff like that.

01:31:07,435 --> 01:31:09,137
I really want to go with something

01:31:09,137 --> 01:31:11,379
really simple to begin with.

01:31:11,379 --> 01:31:14,311
Because just decide for a specific chip

01:31:14,311 --> 01:31:16,013
if you want to run it in soft-MAC

01:31:16,013 --> 01:31:17,877
or a hard-MAC mode, for example.

01:31:17,877 --> 01:31:20,779
And then later on, this driver can be extended

01:31:20,779 --> 01:31:21,989
to the other one.

01:31:21,989 --> 01:31:24,234
Just don't think too complex in the beginning.

01:31:24,234 --> 01:31:25,067
That is what I.

01:31:25,067 --> 01:31:26,334
I mean I understand that you want to make sure

01:31:26,334 --> 01:31:29,919
that the whole setup you're bringing up there

01:31:29,919 --> 01:31:31,682
can handle all of these things.

01:31:31,682 --> 01:31:34,270
But sometimes, just have to really develop over time

01:31:34,270 --> 01:31:36,449
because it's not possible to have all the answers

01:31:36,449 --> 01:31:37,282
in the beginning.

01:31:37,282 --> 01:31:38,834
At least, that is what my experience I had

01:31:38,834 --> 01:31:40,742
from 15th October.

01:31:40,742 --> 01:31:43,102
So you, at some point, you might

01:31:43,102 --> 01:31:45,994
find things that are not even used at all.

01:31:45,994 --> 01:31:49,375
So it can just stay out of the kernel all the time.

01:31:49,375 --> 01:31:50,991
So and yeah, and for example,

01:31:50,991 --> 01:31:52,509
for the hard and soft-MAC,

01:31:52,509 --> 01:31:55,405
the differences you have here.

01:31:55,405 --> 01:31:56,981
Normally, I would go obviously with

01:31:56,981 --> 01:31:59,058
the soft-MAC if you have that.

01:31:59,058 --> 01:32:01,580
But I yet have to see devices

01:32:01,580 --> 01:32:03,081
that actually have both of them.

01:32:03,081 --> 01:32:05,929
Do you have any examples for that or?

01:32:05,929 --> 01:32:08,012
- Yes. - Okay, good, okay.

01:32:08,966 --> 01:32:11,244
Okay, in that case, maybe you want

01:32:11,244 --> 01:32:13,347
to run that in hard-MAC mode.

01:32:13,347 --> 01:32:15,343
And if you find that they are not

01:32:15,343 --> 01:32:16,718
behaving well enough,

01:32:16,718 --> 01:32:19,088
then you can switch to soft-MAC or something.

01:32:19,088 --> 01:32:21,095
I mean I wouldn't do that on the driver level.

01:32:21,095 --> 01:32:22,926
Just during development,

01:32:22,926 --> 01:32:24,891
find out if it's hard or soft-MAC or something.

01:32:24,891 --> 01:32:26,462
So that's what I would do, at least.

01:32:26,462 --> 01:32:27,615
- So two comments on that.

01:32:27,615 --> 01:32:30,448
So for one, the idea here was that

01:32:34,530 --> 01:32:37,789
we need to have like an API that scales

01:32:37,789 --> 01:32:40,414
to like every use cases that people may have

01:32:40,414 --> 01:32:42,018
out there or let's say almost all.

01:32:42,018 --> 01:32:43,685
Never say ever, all.

01:32:45,364 --> 01:32:47,606
But the focus software has been

01:32:47,606 --> 01:32:49,791
on the core Semtech chipsets

01:32:49,791 --> 01:32:54,423
with I think we have, maybe a dozen implementations

01:32:54,423 --> 01:32:57,245
around that like of drivers in hold

01:32:57,245 --> 01:32:59,832
where I'm trying to like when I'm doing

01:32:59,832 --> 01:33:02,944
defining a new Netlink operation,

01:33:02,944 --> 01:33:04,809
try to make sure that it's like

01:33:04,809 --> 01:33:05,950
evenly getting added elsewhere

01:33:05,950 --> 01:33:07,674
where it's obvious how-to.

01:33:07,674 --> 01:33:10,157
But still there is like a bit of a disparity

01:33:10,157 --> 01:33:11,930
where not everything is going to be

01:33:11,930 --> 01:33:13,827
like fully implemented from day one

01:33:13,827 --> 01:33:15,949
but we need to do a bit of focus.

01:33:15,949 --> 01:33:18,812
Then the second part is that I have taken

01:33:18,812 --> 01:33:21,812
the decision for now to go with the,

01:33:25,623 --> 01:33:28,343
with the soft-MAC approach for the very simple reason

01:33:28,343 --> 01:33:31,770
that we do not have the LoRaWAN layer

01:33:31,770 --> 01:33:34,709
implemented complete enough to actually use that.

01:33:34,709 --> 01:33:36,174
So that provides us one way

01:33:36,174 --> 01:33:38,108
to actually send out data today.

01:33:38,108 --> 01:33:40,071
- And it then gives you more control.

01:33:40,071 --> 01:33:42,650
I mean it might be better for some specific products

01:33:42,650 --> 01:33:44,100
that we're HART making then.

01:33:44,100 --> 01:33:46,085
But just be it's completely fine.

01:33:46,085 --> 01:33:47,579
But from a software perspective,

01:33:47,579 --> 01:33:49,480
it's good to have a soft-MAC around

01:33:49,480 --> 01:33:50,575
that you can actually debug

01:33:50,575 --> 01:33:53,192
and find out what's going on, what's the problems are.

01:33:53,192 --> 01:33:55,433
Then that is just impossible for hard-MAC implementations.

01:33:55,433 --> 01:33:57,564
And you often don't get any updates for these

01:33:57,564 --> 01:33:59,947
and you have to have all the crux for that and so on.

01:33:59,947 --> 01:34:02,036
So that's why I often avoid these paths

01:34:02,036 --> 01:34:04,332
in the beginning, so yeah.

01:34:04,332 --> 01:34:06,949
But I mean, just a word about the process.

01:34:06,949 --> 01:34:09,623
I see you, at least as my feeling is struggling

01:34:09,623 --> 01:34:11,498
a little bit with all the different things

01:34:11,498 --> 01:34:12,687
you have to handle here.

01:34:12,687 --> 01:34:15,772
You have LoRa, you have the different drivers.

01:34:15,772 --> 01:34:17,190
You have like LoRaWAN.

01:34:17,190 --> 01:34:18,051
You have all these different things.

01:34:18,051 --> 01:34:20,726
At some point, you want to get that into the kernel.

01:34:20,726 --> 01:34:23,817
And I can tell you that it would be very easy.

01:34:23,817 --> 01:34:25,459
- [Andreas] From the ground up is my strategy.

01:34:25,459 --> 01:34:28,062
- Yeah, just make some really simple stuff

01:34:28,062 --> 01:34:29,244
in the beginning to get the things

01:34:29,244 --> 01:34:31,104
and then, not try to throw everything.

01:34:31,104 --> 01:34:33,381
Because I mean, you patch some latency

01:34:33,381 --> 01:34:35,611
you had earlier, I mean code-wise,

01:34:35,611 --> 01:34:37,808
that might be good but the thing is just too much

01:34:37,808 --> 01:34:40,365
to review, to look at, and to get integrated.

01:34:40,365 --> 01:34:44,698
So yeah, you're not looking happy about that, right?

01:34:45,783 --> 01:34:49,328
- Yeah well, yeah, we'll put it this way.

01:34:49,328 --> 01:34:51,532
We'll take the discussion about how to get

01:34:51,532 --> 01:34:54,504
all the code that has accumulated in the staging tree

01:34:54,504 --> 01:34:58,573
into the net-F tree at a later point in time.

01:34:58,573 --> 01:34:59,406
- [Man] No problem, yeah.

01:34:59,406 --> 01:35:00,898
- I think that's out of scope for discussing here

01:35:00,898 --> 01:35:02,851
but yes, there will be challenges.

01:35:02,851 --> 01:35:06,354
It's already a lot of code and it's not even

01:35:06,354 --> 01:35:08,985
not complete enough yet for an actual

01:35:08,985 --> 01:35:11,152
non-RFC submission, sorry.

01:35:12,260 --> 01:35:15,093
- Questions, any questions anyone?

01:35:17,325 --> 01:35:18,520
- Well, question to the room.

01:35:18,520 --> 01:35:23,020
(member of audience speaking faintly)

01:35:25,649 --> 01:35:26,509
- [Man] Everybody good to have a break?

01:35:26,509 --> 01:35:27,342
- [Man] Yeah.

01:35:27,342 --> 01:35:28,175
- [Man] All right.

01:35:28,175 --> 01:35:31,380
(audience applauding)

01:35:31,380 --> 01:35:33,933
- All right, so I'm Peter Robinson.

01:35:33,933 --> 01:35:36,600
I work for Red Hat as a IoT lead

01:35:37,761 --> 01:35:40,465
at the Linux platform level.

01:35:40,465 --> 01:35:43,257
One of the things that I spend a vast chunk

01:35:43,257 --> 01:35:46,340
of my time doing is IoT using Fedora.

01:35:49,001 --> 01:35:51,552
And this is a bit of an overview,

01:35:51,552 --> 01:35:55,463
and it's partially designed to sort of

01:35:55,463 --> 01:35:57,028
throw a bit of a grenade into the room

01:35:57,028 --> 01:35:59,614
and get everyone discussing some of the problems

01:35:59,614 --> 01:36:02,031
we're seeing in the IoT space

01:36:03,346 --> 01:36:05,647
when trying to do it from a more generic

01:36:05,647 --> 01:36:08,609
distro point of view at a lot more scale

01:36:08,609 --> 01:36:12,450
and some of the problems we're seeing.

01:36:12,450 --> 01:36:14,189
So there's certainly been a lot of good improvements

01:36:14,189 --> 01:36:17,123
over the last few years, especially around things

01:36:17,123 --> 01:36:20,061
like standardized booting through U-Boot,

01:36:20,061 --> 01:36:23,240
distro boot, UEFI, things like that,

01:36:23,240 --> 01:36:25,047
which certainly makes it a lot easier,

01:36:25,047 --> 01:36:27,623
where we now have devices that you can

01:36:27,623 --> 01:36:30,482
actually just boot generic Linux distros,

01:36:30,482 --> 01:36:32,482
and that will just work.

01:36:33,808 --> 01:36:36,168
But there's one thing around enterprise IoT

01:36:36,168 --> 01:36:39,835
and Industrial IoT, it's not a Raspberry Pi.

01:36:41,891 --> 01:36:45,181
And I'll get into some of this.

01:36:45,181 --> 01:36:47,931
There's problems resulting around

01:36:50,865 --> 01:36:53,591
everything being focused on a single device

01:36:53,591 --> 01:36:58,010
and a single ecosystem, which the Linux kernel

01:36:58,010 --> 01:37:01,177
thinks they've fixed but they've fixed

01:37:02,095 --> 01:37:04,012
like just a shim of it.

01:37:05,758 --> 01:37:08,782
So some of the wireless issues we've been seeing

01:37:08,782 --> 01:37:10,445
and that have causing me a lot of problems

01:37:10,445 --> 01:37:12,789
over the last year or two,

01:37:12,789 --> 01:37:15,587
there's been no BlueZ release for 15 months.

01:37:15,587 --> 01:37:16,466
You ask the maintainers,

01:37:16,466 --> 01:37:19,185
and they're like, "Why do we need a release?"

01:37:19,185 --> 01:37:21,529
Well distros tend to rely on it.

01:37:21,529 --> 01:37:24,108
So you can all work from the same thing.

01:37:24,108 --> 01:37:25,978
And if there's a problem with Bluetooth,

01:37:25,978 --> 01:37:26,838
you can turn around and go,

01:37:26,838 --> 01:37:29,334
"Well, have you got the latest release of BlueZ?"

01:37:29,334 --> 01:37:31,563
The latest release is 15 months old.

01:37:31,563 --> 01:37:34,738
If you look back prior to 5.50 release,

01:37:34,738 --> 01:37:37,981
it was basically every quarter, boom, boom, boom.

01:37:37,981 --> 01:37:39,945
Pretty much four releases a year,

01:37:39,945 --> 01:37:41,922
not necessarily perfectly timed

01:37:41,922 --> 01:37:45,906
but you can at least, if you were seeing

01:37:45,906 --> 01:37:47,579
a problem with the device,

01:37:47,579 --> 01:37:50,290
you could test it across a couple of different distros,

01:37:50,290 --> 01:37:52,301
and you could work out where the problem was,

01:37:52,301 --> 01:37:54,844
or you could collaborate with the distros,

01:37:54,844 --> 01:37:57,078
and you could all be on one point.

01:37:57,078 --> 01:38:01,055
Bluez is in a space now where there's like

01:38:01,055 --> 01:38:03,913
over 500 commits since the last release.

01:38:03,913 --> 01:38:05,987
Over 200 commits for Bluetooth.

01:38:05,987 --> 01:38:07,680
Mesh, which is a relatively new thing

01:38:07,680 --> 01:38:11,513
that's useful for IoT, 130 commits with fixes.

01:38:15,841 --> 01:38:20,424
And against like, things like Broadcom and TI firmwares

01:38:24,926 --> 01:38:27,972
like the firmware for the BeagleBone Wireless

01:38:27,972 --> 01:38:31,318
is not upstream so Bluetooth doesn't work out of the box.

01:38:31,318 --> 01:38:32,813
And you've gotta go and work out

01:38:32,813 --> 01:38:36,211
which good repo it's hiding in.

01:38:36,211 --> 01:38:38,970
And you don't know whether it's redistributable

01:38:38,970 --> 01:38:41,191
to go up into the Linux firmware or not.

01:38:41,191 --> 01:38:42,990
And so, there's a lot of devices,

01:38:42,990 --> 01:38:45,352
where Wi-Fi doesn't work out of the box.

01:38:45,352 --> 01:38:48,981
A lot of the Broadcom Wi-Fi firmwares

01:38:48,981 --> 01:38:50,378
are probably vulnerable.

01:38:50,378 --> 01:38:52,460
If you go and cross-read most of

01:38:52,460 --> 01:38:55,793
the Android CVEs without actually fixes,

01:38:57,822 --> 01:39:00,942
and like a whole bunch of the Wi-Fi,

01:39:00,942 --> 01:39:03,792
Raspberry Pi firmware for the Bluetooth,

01:39:03,792 --> 01:39:07,347
it kind of works with the on-chip firmware

01:39:07,347 --> 01:39:09,451
but if you go and dig out the firmware

01:39:09,451 --> 01:39:14,078
from the Pi Foundation, you get much improved functionality,

01:39:14,078 --> 01:39:16,952
better mesh support, various other bits and pieces

01:39:16,952 --> 01:39:18,814
but none of it's upstream.

01:39:18,814 --> 01:39:21,486
And you go and engage and they're like,

01:39:21,486 --> 01:39:23,103
"Oh well, go and speak to Broadcom."

01:39:23,103 --> 01:39:24,957
And Broadcom's like, "We don't own it anymore.

01:39:24,957 --> 01:39:29,505
"Go and speak to whoever the latest company," sorry?

01:39:29,505 --> 01:39:30,338
- [Man] Cypress.

01:39:30,338 --> 01:39:35,123
- Yes but Cypress has just been bought by Infineon maybe?

01:39:35,123 --> 01:39:37,429
And so, you're in a situation,

01:39:37,429 --> 01:39:41,181
where people are like, "Oh, it just doesn't work."

01:39:41,181 --> 01:39:42,743
And it's like, it works in Raspberry,

01:39:42,743 --> 01:39:46,541
and it's like, "Yeah, we don't have their lawyers."

01:39:46,541 --> 01:39:50,026
- So I just wanna be clear to understand you

01:39:50,026 --> 01:39:54,166
that the firmware in the device that is that

01:39:54,166 --> 01:39:56,319
if you don't flash it, it has a CVE.

01:39:56,319 --> 01:39:58,258
There's updates to it but those updates

01:39:58,258 --> 01:40:01,468
aren't in common distributions at this point

01:40:01,468 --> 01:40:03,301
is what you're saying. - Correct and also like

01:40:03,301 --> 01:40:06,021
the firmware that's in the device also doesn't get

01:40:06,021 --> 01:40:07,656
a proper Bluetooth MAC.

01:40:07,656 --> 01:40:08,489
- [Man] Right.

01:40:08,489 --> 01:40:11,268
- So it works but it doesn't work as expected

01:40:11,268 --> 01:40:13,469
or as well as it should.

01:40:13,469 --> 01:40:14,941
The firmware that's in Raspberry

01:40:14,941 --> 01:40:17,843
and that the Pi Foundation has allowed to redistribute

01:40:17,843 --> 01:40:20,176
also supports Bluetooth 4.2,

01:40:21,133 --> 01:40:24,199
whereas the original one I think is 4.0.

01:40:24,199 --> 01:40:26,736
And so, there's a bunch of improvements there

01:40:26,736 --> 01:40:28,875
around especially Bluetooth LE

01:40:28,875 --> 01:40:30,893
that makes IoT much more useful.

01:40:30,893 --> 01:40:32,661
- So other fundamental thing is

01:40:32,661 --> 01:40:36,341
really closed-source binary blob firmwares.

01:40:36,341 --> 01:40:38,131
- Yep. - Really pissing us off, yeah.

01:40:38,131 --> 01:40:41,158
- Well and like some of the TI,

01:40:41,158 --> 01:40:44,754
or some variants of the TI Bluetooth with upstream,

01:40:44,754 --> 01:40:46,855
and some of them aren't.

01:40:46,855 --> 01:40:50,520
And so it's like is this device going to work?

01:40:50,520 --> 01:40:52,941
Well, let me roll a dice and find out.

01:40:52,941 --> 01:40:56,263
And I'm sure there's like improvements.

01:40:56,263 --> 01:40:59,572
Intel managed to, which is generally

01:40:59,572 --> 01:41:01,989
or used to be the best Wi-Fi,

01:41:02,947 --> 01:41:05,780
Intel managed to regress the Wi-Fi

01:41:06,785 --> 01:41:09,880
between a Bluetooth update, a firmware update,

01:41:09,880 --> 01:41:12,130
a wireless firmware update,

01:41:13,218 --> 01:41:15,863
a bunch of random patches in the kernel,

01:41:15,863 --> 01:41:19,112
where basically the wireless would just crash.

01:41:19,112 --> 01:41:21,195
And it's mostly fixed now

01:41:23,088 --> 01:41:25,135
but if you've got a 4G modem in there,

01:41:25,135 --> 01:41:28,401
for some reason, it still crashes.

01:41:28,401 --> 01:41:31,151
And so like wireless used to seem

01:41:32,859 --> 01:41:35,421
like a fixed problem but it's now

01:41:35,421 --> 01:41:38,921
causing me more problems than it ever has.

01:41:41,582 --> 01:41:43,900
- Sorry, I want to follow up on the BlueZ side.

01:41:43,900 --> 01:41:45,563
So I'm wondering a bit about that

01:41:45,563 --> 01:41:47,797
because I see they are quite active still.

01:41:47,797 --> 01:41:49,508
I mean I see they're picking up patches

01:41:49,508 --> 01:41:50,633
on the kernel side, at least.

01:41:50,633 --> 01:41:51,821
- Yeah. - Putting out patches.

01:41:51,821 --> 01:41:53,365
Sending pool requests around--

01:41:53,365 --> 01:41:54,660
- Well and there's fixes landing

01:41:54,660 --> 01:41:55,866
in the upstream gateway probe.

01:41:55,866 --> 01:41:58,363
But it doesn't appear to be any release manager.

01:41:58,363 --> 01:41:59,816
- And the only reaction you've got

01:41:59,816 --> 01:42:02,078
is like why they would, you need one.

01:42:02,078 --> 01:42:03,187
- Yeah. - But I mean I know that

01:42:03,187 --> 01:42:05,729
Marcel and Alfred, Johan, and so on,

01:42:05,729 --> 01:42:09,278
they always have been doing releases review regularly.

01:42:09,278 --> 01:42:11,768
- Yes but there hasn't been a release in 15 months.

01:42:11,768 --> 01:42:13,747
And when I've asked and others have asked

01:42:13,747 --> 01:42:15,485
on the BlueZ IRC channel, they're like,

01:42:15,485 --> 01:42:17,235
"Why do we need one?"

01:42:18,135 --> 01:42:19,561
- Okay. - And so you're now

01:42:19,561 --> 01:42:22,017
getting into situations where distros are taking

01:42:22,017 --> 01:42:26,767
git snapshots, which means no one's on the same page,

01:42:26,767 --> 01:42:28,370
and you don't know whether things have,

01:42:28,370 --> 01:42:30,271
like fixed in your version or not,

01:42:30,271 --> 01:42:33,506
or what version that, oh look, it works in this distro.

01:42:33,506 --> 01:42:35,196
Oh, they're like rebased.

01:42:35,196 --> 01:42:38,568
So there's just no consistency across the board.

01:42:38,568 --> 01:42:39,895
And there's a whole lot of distros

01:42:39,895 --> 01:42:43,178
that are just going, oh, we're on the latest release,

01:42:43,178 --> 01:42:46,558
but it's been 15 months and 500 patches

01:42:46,558 --> 01:42:48,428
gone upstream since then.

01:42:48,428 --> 01:42:50,486
And so, they're not rebasing 'cause they're like

01:42:50,486 --> 01:42:53,688
we want a tagged release so we know where we're at.

01:42:53,688 --> 01:42:54,521
- Okay.

01:42:54,521 --> 01:42:56,967
- And like I think like there's been

01:42:56,967 --> 01:43:00,139
other projects like the IWD project,

01:43:00,139 --> 01:43:03,695
and I know Johan does a lot on Zephyr now

01:43:03,695 --> 01:43:05,748
rather than necessarily the Linux.

01:43:05,748 --> 01:43:07,414
And so they may have well moved on

01:43:07,414 --> 01:43:11,214
but the BlueZ community or the Bluetooth community

01:43:11,214 --> 01:43:14,075
in Linux as a whole, they haven't said,

01:43:14,075 --> 01:43:16,214
"We need a new maintainer because we don't have the time

01:43:16,214 --> 01:43:18,146
"or the interest to do it anymore."

01:43:18,146 --> 01:43:20,373
I don't know what the situation is there.

01:43:20,373 --> 01:43:22,284
- I mean to be honest, I mean BlueZ

01:43:22,284 --> 01:43:25,168
was lately really driven by internet plugs.

01:43:25,168 --> 01:43:26,014
- Sure. - I mean that is,

01:43:26,014 --> 01:43:27,215
I mean it was working quite well.

01:43:27,215 --> 01:43:28,904
I mean and I don't see that as a big problem

01:43:28,904 --> 01:43:29,804
but you're right.

01:43:29,804 --> 01:43:31,296
I mean a lot of them have been assigned

01:43:31,296 --> 01:43:32,499
to be working on Zephyr.

01:43:32,499 --> 01:43:34,550
Even if you see it like the 200 mesh packets,

01:43:34,550 --> 01:43:36,416
that is something that actually comes from the work

01:43:36,416 --> 01:43:37,476
they're doing on the Zephyr's

01:43:37,476 --> 01:43:38,452
side as well. - Yep.

01:43:38,452 --> 01:43:41,326
- And they want to have support on that, on the BlueZ side.

01:43:41,326 --> 01:43:43,195
And I was wondering about the release.

01:43:43,195 --> 01:43:44,461
I mean that are things that shouldn't be

01:43:44,461 --> 01:43:46,133
a big trouble for them to get that out.

01:43:46,133 --> 01:43:47,623
So I was just wondering about that.

01:43:47,623 --> 01:43:49,502
- Yeah well, and like if you go back

01:43:49,502 --> 01:43:52,501
through the IRC logs, every week,

01:43:52,501 --> 01:43:55,534
there's at least one or two people asking about it.

01:43:55,534 --> 01:43:57,690
And like most of the time now,

01:43:57,690 --> 01:43:59,252
if I want stable Bluetooth,

01:43:59,252 --> 01:44:00,895
and I wanna deal with Bluetooth mesh.

01:44:00,895 --> 01:44:05,307
I actually, Nordic has these great little dongles,

01:44:05,307 --> 01:44:09,129
where you can basically flash Zef-ron to it.

01:44:09,129 --> 01:44:11,850
And it basically just appears into Linux.

01:44:11,850 --> 01:44:14,041
And you just basically offload it

01:44:14,041 --> 01:44:16,751
because it's much easier than doing it on Linux.

01:44:16,751 --> 01:44:17,834
- [Man] Yeah.

01:44:22,469 --> 01:44:27,219
- In the same way, GPIO, my favorite Raspberry Pi device,

01:44:28,518 --> 01:44:32,315
like everyone says, and like the GPIO maintainer

01:44:32,315 --> 01:44:33,914
was like, "Oh, Fedora doesn't enable

01:44:33,914 --> 01:44:36,032
"the sys GPIO interface."

01:44:36,032 --> 01:44:38,811
And it's like, "Yes, because you asked me not to

01:44:38,811 --> 01:44:40,778
"when we were enabling it,

01:44:40,778 --> 01:44:43,224
"because you said it was deprecated."

01:44:43,224 --> 01:44:46,141
And there's libgpiod, which is fine

01:44:47,243 --> 01:44:49,980
if you're writing C, and it has

01:44:49,980 --> 01:44:53,039
sort of attempted Python bindings.

01:44:53,039 --> 01:44:54,872
But if you want like a lot of people

01:44:54,872 --> 01:44:56,952
wanna be able to use it in Node-RED

01:44:56,952 --> 01:44:59,723
but has no Node.js bindings.

01:44:59,723 --> 01:45:03,890
And things like the what RPi.GPIO Python bindings,

01:45:06,988 --> 01:45:11,056
which every project uses, doesn't support it.

01:45:11,056 --> 01:45:12,891
And the Pi Foundation is like,

01:45:12,891 --> 01:45:14,080
and the people around that is like,

01:45:14,080 --> 01:45:17,617
"Well, it works fine on the Raspberry Pi, you pay."

01:45:17,617 --> 01:45:19,867
And so you get into a situation

01:45:19,867 --> 01:45:23,091
where either through any of the companies

01:45:23,091 --> 01:45:26,374
that are doing like GPIO-based devices

01:45:26,374 --> 01:45:28,118
have these Python libraries

01:45:28,118 --> 01:45:30,767
that are completely dependent on the old interface,

01:45:30,767 --> 01:45:33,469
and none of it works on the new interface.

01:45:33,469 --> 01:45:35,396
And the Linux guys are like,

01:45:35,396 --> 01:45:36,623
"Well, we have a library,

01:45:36,623 --> 01:45:38,374
"and it's like, well, there's no documentation."

01:45:38,374 --> 01:45:39,516
There's no good examples.

01:45:39,516 --> 01:45:42,745
There's no decent Python or other language bindings.

01:45:42,745 --> 01:45:46,241
And it becomes a problem because

01:45:46,241 --> 01:45:48,986
I did what I was asked, disable the deprecated interface,

01:45:48,986 --> 01:45:51,563
and it's a lot more secure.

01:45:51,563 --> 01:45:52,668
Yeah, of course, it's more secure

01:45:52,668 --> 01:45:54,835
because no one can use it.

01:45:55,760 --> 01:45:58,557
- On that note, I did a fair bit of research

01:45:58,557 --> 01:46:01,582
into GPIO recently for the last couple of projects

01:46:01,582 --> 01:46:03,772
I'm working on and actually dialogued quite a bit

01:46:03,772 --> 01:46:08,522
with Lynux, who made the large change for GPIO chip.

01:46:08,522 --> 01:46:11,183
And it's not only it's not just that

01:46:11,183 --> 01:46:13,472
the old API is very simple to use,

01:46:13,472 --> 01:46:14,510
it's that the new one introduces

01:46:14,510 --> 01:46:17,466
a bunch of paradigm shifts that people are not used to.

01:46:17,466 --> 01:46:20,659
And especially for distributors.

01:46:20,659 --> 01:46:22,678
If you just wanna get their hardware there,

01:46:22,678 --> 01:46:24,540
and they're not, they don't really

01:46:24,540 --> 01:46:27,060
have that incentive yet to jump on

01:46:27,060 --> 01:46:29,554
the new kind of API paradigm bandwagon.

01:46:29,554 --> 01:46:31,784
- Yeah and like I feel that the people

01:46:31,784 --> 01:46:35,247
that are writing like libgpiod or something like that

01:46:35,247 --> 01:46:38,646
need to go right, what are the top 10 things

01:46:38,646 --> 01:46:41,149
that are using the sys GPIO interface?

01:46:41,149 --> 01:46:43,996
And go and help them convert over.

01:46:43,996 --> 01:46:47,198
Because it's a bit like Python 3,

01:46:47,198 --> 01:46:49,655
like it took a huge amount of time

01:46:49,655 --> 01:46:53,000
because people are like Python 2 is dying,

01:46:53,000 --> 01:46:54,843
migrate your code to Python 3.

01:46:54,843 --> 01:46:57,942
Oh but the 50 libraries that I need aren't there.

01:46:57,942 --> 01:47:01,370
And so, it's like if they want it adopted,

01:47:01,370 --> 01:47:03,638
they've gotta help do some of the heavy lifting.

01:47:03,638 --> 01:47:06,137
And like someone turn around and said to me,

01:47:06,137 --> 01:47:08,069
"Oh but why don't you write it?"

01:47:08,069 --> 01:47:09,487
And I'm like, "Sure, I'll add it

01:47:09,487 --> 01:47:11,083
"to the 5,000 other things that's

01:47:11,083 --> 01:47:13,802
"currently on my to-do list."

01:47:13,802 --> 01:47:16,135
And so it's I'm dealing with

01:47:18,595 --> 01:47:21,618
a whole bunch of other issues around the IoT.

01:47:21,618 --> 01:47:25,081
And I have people in the community just go,

01:47:25,081 --> 01:47:27,951
"Well, I can't use this because it's

01:47:27,951 --> 01:47:31,112
"and I'm sure like the other distros have the same problem.

01:47:31,112 --> 01:47:33,550
"In fact, I know the other distros have the same problem

01:47:33,550 --> 01:47:35,767
"because I speak to them about it."

01:47:35,767 --> 01:47:40,767
And it's the same with the IIO, Industrial I/O interface.

01:47:42,560 --> 01:47:46,206
(member of audience speaking faintly)

01:47:46,206 --> 01:47:47,374
- Can I just quickly add that there

01:47:47,374 --> 01:47:49,111
is even worse than those GPIO

01:47:49,111 --> 01:47:52,737
that you were mentioning is that like some,

01:47:52,737 --> 01:47:55,047
at least some time ago, Raspberry Pi project,

01:47:55,047 --> 01:47:56,975
we're using this WiringPi library,

01:47:56,975 --> 01:48:00,971
which is trying to do direct, what is it, def-mem access?

01:48:00,971 --> 01:48:02,569
- Yes. - Through the GPIO controller,

01:48:02,569 --> 01:48:04,507
and trying to toggle things directly.

01:48:04,507 --> 01:48:06,142
It may have some speed improvement

01:48:06,142 --> 01:48:08,065
but it's definitely not a safe thing

01:48:08,065 --> 01:48:10,115
that we consider something that we want

01:48:10,115 --> 01:48:11,957
to have done on our enterprise distro.

01:48:11,957 --> 01:48:14,696
- Well and like the WiringPi individual

01:48:14,696 --> 01:48:17,639
is quite interesting because he actually

01:48:17,639 --> 01:48:19,933
just threw all his toys out of the prem

01:48:19,933 --> 01:48:21,616
the other day in a blog post

01:48:21,616 --> 01:48:24,243
because people were screaming at him

01:48:24,243 --> 01:48:27,338
because the Raspberry Pi 4 wasn't supported yet.

01:48:27,338 --> 01:48:30,762
And add support for this extra hardware,

01:48:30,762 --> 01:48:32,875
and why doesn't it work on this distro?

01:48:32,875 --> 01:48:33,723
And stuff like that.

01:48:33,723 --> 01:48:35,057
And he basically just went,

01:48:35,057 --> 01:48:37,307
"Screw you all, I'm going."

01:48:38,389 --> 01:48:40,951
And so but like there's stuff like that

01:48:40,951 --> 01:48:43,883
where you're right, we don't wanna touch it.

01:48:43,883 --> 01:48:45,453
And I would prefer not to have to touch things

01:48:45,453 --> 01:48:48,620
like sys GPIO because of the fact that

01:48:50,342 --> 01:48:53,457
it's nowhere near as secure as the new interface.

01:48:53,457 --> 01:48:56,707
But like I've managed in like two years

01:48:57,917 --> 01:49:00,168
of having it like that, one person

01:49:00,168 --> 01:49:01,953
implements stuff on it.

01:49:01,953 --> 01:49:05,599
And a whole bunch of customers that are

01:49:05,599 --> 01:49:08,761
like actual Red Hat customers that are amusingly

01:49:08,761 --> 01:49:11,646
and awesomely using Fedora IoT.

01:49:11,646 --> 01:49:13,923
And they're having like IoT hack fest

01:49:13,923 --> 01:49:16,165
and then I'm like, "Yeah, we can do this amount

01:49:16,165 --> 01:49:18,345
"on Fedora but we've switched back to Raspberry

01:49:18,345 --> 01:49:22,317
"and for this stuff because we can do this."

01:49:22,317 --> 01:49:26,009
And then I'm like, "Yeah, I know, but."

01:49:26,009 --> 01:49:27,864
And like the Industrial I/O stuff,

01:49:27,864 --> 01:49:31,864
it's like again, no user space bindings of note.

01:49:34,736 --> 01:49:39,476
And you literally now have things like the UPM project.

01:49:39,476 --> 01:49:41,755
And if you go to like Adafruit

01:49:41,755 --> 01:49:44,816
or any of the companies that sell hats

01:49:44,816 --> 01:49:48,994
for the Raspberry Pi, it's all Python-based libraries

01:49:48,994 --> 01:49:52,634
that are implementing like temperature sensors

01:49:52,634 --> 01:49:54,717
or drivers in user space.

01:49:56,213 --> 01:50:00,380
And basically, bit-banging the GPIO over sys GPIO.

01:50:02,516 --> 01:50:04,571
And you're just sitting there going,

01:50:04,571 --> 01:50:06,091
"Why would you do this?"

01:50:06,091 --> 01:50:08,508
And but you look and there's,

01:50:09,418 --> 01:50:10,537
and you speak to them about,

01:50:10,537 --> 01:50:13,879
"Oh, why aren't you using the Industrial I/O interface?"

01:50:13,879 --> 01:50:14,712
Too hard.

01:50:16,509 --> 01:50:20,009
And so, the question is how do we fix this

01:50:21,613 --> 01:50:23,445
as a community?

01:50:23,445 --> 01:50:27,445
Like there are a bunch of customers and partners

01:50:29,749 --> 01:50:32,184
and various other bits and pieces

01:50:32,184 --> 01:50:34,102
that are interested in it.

01:50:34,102 --> 01:50:35,999
I can't fix this myself.

01:50:35,999 --> 01:50:37,716
I mean I'm a bit of a jack of all trades

01:50:37,716 --> 01:50:39,069
but I don't write a lot of Python

01:50:39,069 --> 01:50:41,812
and I don't write Node.js at all.

01:50:41,812 --> 01:50:45,605
And I can vaguely sort of work my way around the kernel.

01:50:45,605 --> 01:50:47,588
I call myself a Google kernel developer

01:50:47,588 --> 01:50:51,921
because I basically Google for stuff that's similar.

01:50:53,376 --> 01:50:58,126
- So it sounds like what person or combinations of people

01:50:59,711 --> 01:51:01,695
do you think would need to get together

01:51:01,695 --> 01:51:05,736
to make this effective, solve this problem?

01:51:05,736 --> 01:51:07,726
- Well, I think so some of it

01:51:07,726 --> 01:51:10,992
like from the third point of view,

01:51:10,992 --> 01:51:13,481
obviously, that needs to be vendors.

01:51:13,481 --> 01:51:16,750
And vendors actually need to give a shit.

01:51:16,750 --> 01:51:18,904
And having had some conversation

01:51:18,904 --> 01:51:21,910
around the Broadcom firmware stuff,

01:51:21,910 --> 01:51:23,865
where it ends up just being pass-the-parcel

01:51:23,865 --> 01:51:28,654
between the lawyer, I'm not sure how we fix that.

01:51:28,654 --> 01:51:30,276
It was my understanding there's

01:51:30,276 --> 01:51:33,121
like a Linux kernel policy that

01:51:33,121 --> 01:51:37,140
if your firm, if your hardware needs firmware

01:51:37,140 --> 01:51:38,587
or your driver needs firmware,

01:51:38,587 --> 01:51:41,186
the firmware has to be in Linux firmware.

01:51:41,186 --> 01:51:43,705
But in a lot of cases, that's not the case.

01:51:43,705 --> 01:51:45,958
There's a number of media drivers

01:51:45,958 --> 01:51:47,929
that actually need firmware

01:51:47,929 --> 01:51:49,977
and they don't, the drivers don't work at all

01:51:49,977 --> 01:51:52,111
because none of the firmware for that hardware

01:51:52,111 --> 01:51:54,653
is in Linux firmware.

01:51:54,653 --> 01:51:58,359
A bunch of the Bluetooth stuff, not in Linux firmware.

01:51:58,359 --> 01:52:03,262
And so do we threaten to evict them from the kernel?

01:52:03,262 --> 01:52:05,099
To turn around and say, "You fix your shit.

01:52:05,099 --> 01:52:06,904
"Otherwise, you're booted out."

01:52:06,904 --> 01:52:08,710
Is that a solution to the problem?

01:52:08,710 --> 01:52:10,619
I mean it's probably a controversial one

01:52:10,619 --> 01:52:14,538
but if Broadcom suddenly can't ship their wireless,

01:52:14,538 --> 01:52:17,701
they'll probably have some incentive to fix the problem

01:52:17,701 --> 01:52:20,007
'cause at the moment, I don't feel they do.

01:52:20,007 --> 01:52:23,712
(member of audience speaking faintly)

01:52:23,712 --> 01:52:26,834
- I don't know, I've heard rumors of it.

01:52:26,834 --> 01:52:29,245
- I mean I think it would be a good policy

01:52:29,245 --> 01:52:31,910
but I wasn't aware that there had been,

01:52:31,910 --> 01:52:35,557
maybe needs of some, for some subsystems but not others.

01:52:35,557 --> 01:52:36,919
- Yeah, so I'm not sure about that.

01:52:36,919 --> 01:52:41,586
As I said, it's basically hearsay from what I had heard.

01:52:42,579 --> 01:52:43,969
- Yeah, I mean-- - But I don't believe

01:52:43,969 --> 01:52:46,429
it's documented anywhere either way.

01:52:46,429 --> 01:52:48,017
- Yeah, I think that's actually a good point.

01:52:48,017 --> 01:52:49,087
You don't have any documentations

01:52:49,087 --> 01:52:51,439
that is mandatory to do that.

01:52:51,439 --> 01:52:53,534
It's more like a subsystem maintainer saying,

01:52:53,534 --> 01:52:55,029
"I need to test it somehow and make sure

01:52:55,029 --> 01:52:56,330
"this firmware is available."

01:52:56,330 --> 01:52:57,443
And then you have to keep in mind

01:52:57,443 --> 01:53:00,308
that all the maintainers don't have the hardware sometimes.

01:53:00,308 --> 01:53:01,921
So they rely on the driver-writer

01:53:01,921 --> 01:53:04,225
or the company doing that to actually say that,

01:53:04,225 --> 01:53:05,773
and if they say everything is working fine

01:53:05,773 --> 01:53:08,092
because it had the firmware, that doesn't help me.

01:53:08,092 --> 01:53:10,049
- Yeah. - It is complicated.

01:53:10,049 --> 01:53:12,493
I don't know if the best way is to

01:53:12,493 --> 01:53:14,974
threat them to kick the drivers out?

01:53:14,974 --> 01:53:16,625
- [Peter] No, I didn't say I thought it was the best way.

01:53:16,625 --> 01:53:20,883
- No, I'm just saying that it is one option definitely.

01:53:20,883 --> 01:53:22,066
But I don't think that's the best way.

01:53:22,066 --> 01:53:24,436
I mean the situation you have is the Bluetooth drivers

01:53:24,436 --> 01:53:26,357
and the companies being bought by another company,

01:53:26,357 --> 01:53:29,620
and that's like real life that kicks in.

01:53:29,620 --> 01:53:31,009
- Yeah. - Sorry, that's something

01:53:31,009 --> 01:53:32,743
we can't fix on a technical side

01:53:32,743 --> 01:53:36,533
that's done, something legal stuffs that is in the way.

01:53:36,533 --> 01:53:38,350
- But how do we encourage those companies

01:53:38,350 --> 01:53:40,173
to deal with the legal problem then?

01:53:40,173 --> 01:53:41,677
- I mean what we can do is like

01:53:41,677 --> 01:53:43,433
we can talk to the maintainers,

01:53:43,433 --> 01:53:45,541
and the subsystem maintainers, and talk to them,

01:53:45,541 --> 01:53:47,558
and includes them to make sure that the

01:53:47,558 --> 01:53:49,676
firmware is somewhere available,

01:53:49,676 --> 01:53:52,217
most happily in Linux firmware.

01:53:52,217 --> 01:53:53,398
But if that's not possible,

01:53:53,398 --> 01:53:55,161
then at least somewhere on the where

01:53:55,161 --> 01:53:56,564
that they can actually have that.

01:53:56,564 --> 01:53:57,630
- Yeah, concerning a lot of cases,

01:53:57,630 --> 01:54:01,161
you're either in a sign this agreement to download this

01:54:01,161 --> 01:54:04,411
or you're digging through Android dumps

01:54:05,851 --> 01:54:07,230
to try and find--

01:54:07,230 --> 01:54:09,113
- Yeah, it should be something easier than

01:54:09,113 --> 01:54:10,042
these two options, definitely.

01:54:10,042 --> 01:54:11,686
- Yeah. - I think at one point,

01:54:11,686 --> 01:54:13,236
Greg Cage was saying

01:54:13,236 --> 01:54:15,845
to regress drivers back into staging

01:54:15,845 --> 01:54:18,184
if they're not, if they fail,

01:54:18,184 --> 01:54:20,350
if they're crashing. - Yeah.

01:54:20,350 --> 01:54:22,123
- I think it was a great idea.

01:54:22,123 --> 01:54:23,355
Part of the issue though is firmware

01:54:23,355 --> 01:54:27,562
and not having any API into these firmware blobs at all.

01:54:27,562 --> 01:54:28,435
- [Peter] Yeah.

01:54:28,435 --> 01:54:30,698
- And it's just, it's a proprietary

01:54:30,698 --> 01:54:32,324
silicon vendor thing, right?

01:54:32,324 --> 01:54:34,205
They wanna keep their IP

01:54:34,205 --> 01:54:36,000
but they also want it inside Linux, right?

01:54:36,000 --> 01:54:37,223
There, it's a bit of a--

01:54:37,223 --> 01:54:40,078
- Well and like I understand especially

01:54:40,078 --> 01:54:42,226
with regards to RF transmission

01:54:42,226 --> 01:54:46,193
and that there is bunch of laws around.

01:54:46,193 --> 01:54:49,227
And their legal team will just go,

01:54:49,227 --> 01:54:51,171
I know it's mostly bullshit.

01:54:51,171 --> 01:54:52,830
- But I mean we have that solved for Bluetooth,

01:54:52,830 --> 01:54:54,379
we have that solved for wireless,

01:54:54,379 --> 01:54:56,184
I mean for Wi-Fi VF. - Yeah.

01:54:56,184 --> 01:54:58,725
- I mean that's not an problem we still have.

01:54:58,725 --> 01:55:00,210
We can do that.

01:55:00,210 --> 01:55:02,107
- Yeah, I realized that but their legal teams

01:55:02,107 --> 01:55:05,092
will go, "But they could change it,"

01:55:05,092 --> 01:55:06,130
and stuff like that.

01:55:06,130 --> 01:55:10,297
But ultimately, I don't like binary blob firmware.

01:55:13,499 --> 01:55:17,344
I can live with binary blob firmware if it works.

01:55:17,344 --> 01:55:19,821
But if it like there's just so many cases,

01:55:19,821 --> 01:55:23,603
where I flash a BeagleBone Wireless,

01:55:23,603 --> 01:55:27,193
and the Bluetooth doesn't work until I dig out

01:55:27,193 --> 01:55:31,780
the TI firmware from wherever it happens to be hiding.

01:55:31,780 --> 01:55:33,979
And you end up, like I literally in a lot of cases,

01:55:33,979 --> 01:55:36,200
just end up Google searching the string

01:55:36,200 --> 01:55:38,149
that it's like can't load firmware X,

01:55:38,149 --> 01:55:39,601
and you just Google search the string,

01:55:39,601 --> 01:55:42,833
and you'll find out where the BeagleBone guys

01:55:42,833 --> 01:55:44,737
have hidden their version of it.

01:55:44,737 --> 01:55:46,635
- At some point, I thought a viable solution

01:55:46,635 --> 01:55:49,528
would be for if a company wants to get

01:55:49,528 --> 01:55:51,684
their device supported in the Linux kernel,

01:55:51,684 --> 01:55:54,618
then they have to sign a contract to either support it

01:55:54,618 --> 01:55:56,464
or contract out the support to

01:55:56,464 --> 01:55:58,885
an open source software developer

01:55:58,885 --> 01:55:59,718
or something like that.

01:55:59,718 --> 01:56:01,388
I think that would be actually probably,

01:56:01,388 --> 01:56:02,662
you don't think so?

01:56:02,662 --> 01:56:06,413
- No, I think it's certainly one solution.

01:56:06,413 --> 01:56:09,726
And like in the ARM ecosystem space,

01:56:09,726 --> 01:56:13,643
in some cases, most like the Fedora ARM project

01:56:14,890 --> 01:56:18,285
has managed to, in some cases, put enough

01:56:18,285 --> 01:56:20,750
pressure on some of the silicon vendors,

01:56:20,750 --> 01:56:23,603
where they've actually got their stuff upstream

01:56:23,603 --> 01:56:25,293
because I've said I'm not touching it

01:56:25,293 --> 01:56:26,672
until it's upstream.

01:56:26,672 --> 01:56:29,839
And they've like the Marvell stuff,

01:56:29,839 --> 01:56:32,624
there's a company or two, and I forget the name

01:56:32,624 --> 01:56:35,651
of the companies that are doing a lot of the Marvell stuff,

01:56:35,651 --> 01:56:38,255
but they went from absolutely truly horrific

01:56:38,255 --> 01:56:40,353
to actually pretty damn good now.

01:56:40,353 --> 01:56:43,474
And so some companies have gone,

01:56:43,474 --> 01:56:44,713
went all good at this.

01:56:44,713 --> 01:56:47,166
So we will sign an NDA with another company

01:56:47,166 --> 01:56:48,718
where we can trust and just pay them

01:56:48,718 --> 01:56:51,104
a bunch of money to make our problem go away.

01:56:51,104 --> 01:56:52,939
- But you don't want to have like

01:56:52,939 --> 01:56:54,883
from a technical community perspective,

01:56:54,883 --> 01:56:56,852
you don't want to get anyway, anywhere

01:56:56,852 --> 01:56:58,602
these contract stuff or whatever.

01:56:58,602 --> 01:57:00,051
That the companies can do that.

01:57:00,051 --> 01:57:02,024
They can go to a consultant company.

01:57:02,024 --> 01:57:04,743
They can go to Red Hat or whatever just doing that

01:57:04,743 --> 01:57:05,924
work on their money.

01:57:05,924 --> 01:57:08,025
That's all fine but we don't, on a technical side,

01:57:08,025 --> 01:57:10,222
you want to tell them you bring the code in,

01:57:10,222 --> 01:57:12,036
you make it into good quality,

01:57:12,036 --> 01:57:14,331
and we can maybe includes them

01:57:14,331 --> 01:57:15,840
to make sure that the firmware is available

01:57:15,840 --> 01:57:17,191
in Linux firmware and stuff like that.

01:57:17,191 --> 01:57:18,557
That is the level you can go.

01:57:18,557 --> 01:57:20,368
But not going to legal stuff.

01:57:20,368 --> 01:57:22,110
At least that is my opinion on that.

01:57:22,110 --> 01:57:24,275
- Yeah, as I'm sitting on the vendor side,

01:57:24,275 --> 01:57:26,134
I'll say yes, put it on the vendors.

01:57:26,134 --> 01:57:27,825
You say the firmware is not there.

01:57:27,825 --> 01:57:29,452
I wasn't aware that the firmware wasn't there

01:57:29,452 --> 01:57:31,000
in Linux firmware.

01:57:31,000 --> 01:57:33,980
We got redistributable firmware.

01:57:33,980 --> 01:57:36,147
That was the agreement we got

01:57:36,147 --> 01:57:39,058
when we got the, we chose to use the chipset

01:57:39,058 --> 01:57:43,198
is that we got freely redistributable firmware.

01:57:43,198 --> 01:57:45,162
- Right. - So it should,

01:57:45,162 --> 01:57:46,737
then there's no, there's nothing stopping us

01:57:46,737 --> 01:57:48,144
from putting into Linux firmware.

01:57:48,144 --> 01:57:48,977
- Awesome.

01:57:48,977 --> 01:57:50,330
- I just didn't know it was there.

01:57:50,330 --> 01:57:53,079
So I think going back to the vendors

01:57:53,079 --> 01:57:54,859
and actually letting them know about the gaps

01:57:54,859 --> 01:57:56,484
and telling them about it.

01:57:56,484 --> 01:57:58,608
I love the idea of bumping it back to staging

01:57:58,608 --> 01:57:59,441
if it's not working.

01:57:59,441 --> 01:58:01,153
I don't know why wouldn't, I mean.

01:58:01,153 --> 01:58:02,863
- I fear that's not gonna work.

01:58:02,863 --> 01:58:04,146
So if I can quickly just say this.

01:58:04,146 --> 01:58:06,167
The problem is it's not as black and white

01:58:06,167 --> 01:58:08,239
as it may seem in this discussion.

01:58:08,239 --> 01:58:11,135
But the reality is that there is an existing driver

01:58:11,135 --> 01:58:14,564
that is working with some firmware on some device.

01:58:14,564 --> 01:58:17,049
And then the vendor goes ahead and add support

01:58:17,049 --> 01:58:19,897
for the next family generation on top of that

01:58:19,897 --> 01:58:22,694
and may forget to tweak like some tables

01:58:22,694 --> 01:58:25,009
so that it's actually loaded in the wrong firmware

01:58:25,009 --> 01:58:27,391
or just forgetting to take over to--

01:58:27,391 --> 01:58:29,707
- Oh, I haven't sorted out to redistribute

01:58:29,707 --> 01:58:32,236
the new version of the firmware that's needed.

01:58:32,236 --> 01:58:33,853
(member of audience speaking faintly)

01:58:33,853 --> 01:58:34,686
- Yeah.

01:58:37,634 --> 01:58:38,467
I think in some--

01:58:38,467 --> 01:58:40,013
- This still goes back to like the

01:58:40,013 --> 01:58:42,299
if there's a regression, go back to the vendor.

01:58:42,299 --> 01:58:45,167
(member of audience speaking faintly)

01:58:45,167 --> 01:58:47,805
- Well and then how do we fix some of like

01:58:47,805 --> 01:58:52,138
the only works on the Raspberry Pi bindings problem.

01:58:53,008 --> 01:58:55,868
I mean one of the ways I am trying to fix that

01:58:55,868 --> 01:58:59,243
is we have a university outreach internship

01:58:59,243 --> 01:59:03,160
kind of program as part of research.redhat.com.

01:59:04,407 --> 01:59:07,561
And we're starting to get some interns

01:59:07,561 --> 01:59:11,463
or people at university as part of their university projects

01:59:11,463 --> 01:59:13,788
able to do some of this stuff.

01:59:13,788 --> 01:59:16,621
But then, having these individuals

01:59:17,888 --> 01:59:21,385
that are able to start to look at

01:59:21,385 --> 01:59:23,786
some of the stuff like they may be able to port

01:59:23,786 --> 01:59:27,869
like a few basic sort of like subsets of projects

01:59:29,071 --> 01:59:33,084
but big things like the RPi.GPIO stuff,

01:59:33,084 --> 01:59:35,137
probably made quite a bit of interaction

01:59:35,137 --> 01:59:38,887
with the actual maintainers of like libgpiod.

01:59:40,072 --> 01:59:43,237
And how do we get, and I'm sure LoRa

01:59:43,237 --> 01:59:45,096
can probably comment on some of these

01:59:45,096 --> 01:59:47,027
and how best to make it work around

01:59:47,027 --> 01:59:50,225
things like outreach in that.

01:59:50,225 --> 01:59:52,475
But we have some mechanisms

01:59:55,458 --> 01:59:58,797
but like the people of the companies

01:59:58,797 --> 02:00:01,714
bought like libiio, which is one of

02:00:02,550 --> 02:00:04,524
the more useful Industrial I/O.

02:00:04,524 --> 02:00:08,051
It comes out of one of the big vendors

02:00:08,051 --> 02:00:10,297
that does huge amounts of sensors.

02:00:10,297 --> 02:00:11,766
But you hear nothing from them,

02:00:11,766 --> 02:00:13,143
and they randomly do a release,

02:00:13,143 --> 02:00:15,393
and they don't really appear to engage

02:00:15,393 --> 02:00:17,523
in the community at all.

02:00:17,523 --> 02:00:20,356
So how do we get them to work with

02:00:21,399 --> 02:00:24,913
something like the universities to make this better?

02:00:24,913 --> 02:00:26,596
And again, it's reach out to them

02:00:26,596 --> 02:00:29,104
but like I've tried for a couple of people

02:00:29,104 --> 02:00:31,277
and not really ever got a response.

02:00:31,277 --> 02:00:34,338
So and I can't fix this all on my own.

02:00:34,338 --> 02:00:36,421
Hence like the questions.

02:00:44,354 --> 02:00:46,998
- You started to go down the different things you can fix

02:00:46,998 --> 02:00:50,085
and I got vendors down in my notes

02:00:50,085 --> 02:00:53,649
but I miss kind of, so the university project-level stuff

02:00:53,649 --> 02:00:55,312
like getting more people engaged doing.

02:00:55,312 --> 02:00:59,327
- That's for things like what things like

02:00:59,327 --> 02:01:02,577
Python bindings for lib and moving like

02:01:03,431 --> 02:01:05,481
say the Adafruit project stuff,

02:01:05,481 --> 02:01:08,126
where they have a whole bunch of devices

02:01:08,126 --> 02:01:10,394
and SPI screens and stuff like that

02:01:10,394 --> 02:01:11,830
that you can buy.

02:01:11,830 --> 02:01:14,451
Getting them working with new upstream bind,

02:01:14,451 --> 02:01:18,021
like the libgpiod bindings once we have

02:01:18,021 --> 02:01:21,516
half decent Python or Node.js bindings

02:01:21,516 --> 02:01:22,859
is something that we could probably

02:01:22,859 --> 02:01:24,544
get university students to do.

02:01:24,544 --> 02:01:26,130
But there's a big chunk of work

02:01:26,130 --> 02:01:28,071
in the middle there that's missing

02:01:28,071 --> 02:01:30,859
that your average student that has maybe,

02:01:30,859 --> 02:01:33,190
one semester to work on a project,

02:01:33,190 --> 02:01:34,411
that may get a couple of bits

02:01:34,411 --> 02:01:36,414
and pieces converted over.

02:01:36,414 --> 02:01:38,511
And by the time they work out how to engage

02:01:38,511 --> 02:01:40,491
with the upstream, you know the,

02:01:40,491 --> 02:01:41,855
and have mental through that,

02:01:41,855 --> 02:01:43,096
and get some patches written,

02:01:43,096 --> 02:01:44,390
and some pool requests done

02:01:44,390 --> 02:01:46,647
that are ultimately accepted,

02:01:46,647 --> 02:01:49,112
that's you'll probably get two or three things done.

02:01:49,112 --> 02:01:53,335
And there's probably 500 pieces of hardware that need.

02:01:53,335 --> 02:01:56,144
- 'Cause we just spent the last GSoC,

02:01:56,144 --> 02:01:58,368
trying to get a well student just essentially

02:01:58,368 --> 02:02:00,478
kinda write a template for how you can add

02:02:00,478 --> 02:02:04,455
new IIO devices very quickly to the kernel

02:02:04,455 --> 02:02:07,629
and get them working and loaded quickly under Greybus.

02:02:07,629 --> 02:02:08,462
- Right.

02:02:08,462 --> 02:02:11,770
- And like in a time frame wasn't really

02:02:11,770 --> 02:02:14,533
even to kind of create enough of the template

02:02:14,533 --> 02:02:15,814
to really get other students to be able

02:02:15,814 --> 02:02:16,763
to do the same thing, right?

02:02:16,763 --> 02:02:17,596
- Yeah. - You maybe got

02:02:17,596 --> 02:02:19,482
a third of the way through the template

02:02:19,482 --> 02:02:21,106
to be able to try to distribute this.

02:02:21,106 --> 02:02:23,366
So I know I don't have an easy solution to this

02:02:23,366 --> 02:02:27,376
because that's a fairly like complex coding problem.

02:02:27,376 --> 02:02:30,739
- Yes and that's about as like,

02:02:30,739 --> 02:02:32,260
that's as much as I understand

02:02:32,260 --> 02:02:34,604
around a bunch of the academic stuff.

02:02:34,604 --> 02:02:37,005
And as much as a lot of the academic stuff

02:02:37,005 --> 02:02:40,049
as a person of interest to me, I just don't have time.

02:02:40,049 --> 02:02:43,226
And I really need assistance there.

02:02:43,226 --> 02:02:44,372
- Sounds to me I was looking,

02:02:44,372 --> 02:02:46,541
when you have that side of the GPIO,

02:02:46,541 --> 02:02:48,219
I don't know much about the API, one way or the other,

02:02:48,219 --> 02:02:51,033
but I wondered myself, whether you know,

02:02:51,033 --> 02:02:53,450
we could turn sys GPIO into a

02:02:55,630 --> 02:02:58,023
makes me a socket and stick a daemon in between

02:02:58,023 --> 02:02:58,997
that would do the right thing.

02:02:58,997 --> 02:03:01,252
I don't know but that's what I was thinking, like there.

02:03:01,252 --> 02:03:02,976
But it sounds like it's really

02:03:02,976 --> 02:03:04,502
you say because of paradigm shifts in between,

02:03:04,502 --> 02:03:05,479
it's not just translate

02:03:05,479 --> 02:03:06,672
if we need to be. - Well yeah, someone in

02:03:06,672 --> 02:03:08,014
the audience said it's quite a paradigm shift.

02:03:08,014 --> 02:03:09,327
- Yeah so, I don't know.

02:03:09,327 --> 02:03:11,953
But it sounds like the push back has to be

02:03:11,953 --> 02:03:13,620
into well, Adafruit,

02:03:14,454 --> 02:03:15,724
okay. - Yeah.

02:03:15,724 --> 02:03:17,039
- To say hey, you have to hire

02:03:17,039 --> 02:03:18,172
someone for six months. - Well and the Raspberry Pi

02:03:18,172 --> 02:03:19,677
Foundation, and the Raspberry Pi Foundation

02:03:19,677 --> 02:03:22,597
has basically went, "It works for us, we don't give a shit."

02:03:22,597 --> 02:03:23,753
- Well then maybe the kernel needs

02:03:23,753 --> 02:03:27,585
to stop just, what is deprecated right now.

02:03:27,585 --> 02:03:29,434
Maybe you should move it to staging.

02:03:29,434 --> 02:03:30,267
- [Peter] Yep.

02:03:30,267 --> 02:03:33,452
- Okay and that would force the issue.

02:03:33,452 --> 02:03:35,195
- Just to clarify real quick with Adafruit.

02:03:35,195 --> 02:03:37,181
Adafruit does care about libgpiod.

02:03:37,181 --> 02:03:39,180
So the future for Python with Adafruit

02:03:39,180 --> 02:03:40,720
is Adafruit-Blinka which supports

02:03:40,720 --> 02:03:43,812
their CircuitPython drivers under Linux.

02:03:43,812 --> 02:03:46,385
And they've now moved that to libgpiod.

02:03:46,385 --> 02:03:47,495
In fact, they actually have a blog post

02:03:47,495 --> 02:03:51,662
about how sys GPIO is dead and long live libgpiod.

02:03:53,167 --> 02:03:54,698
- [Peter] We're getting there (cheers).

02:03:54,698 --> 02:03:56,354
(audience applauding)

02:03:56,354 --> 02:03:57,334
- But there's a lot of legacy stuff

02:03:57,334 --> 02:03:59,584
that needs to be moved, so.

02:04:00,642 --> 02:04:02,813
- I was at a recent,

02:04:02,813 --> 02:04:04,556
like when did that happen?

02:04:04,556 --> 02:04:05,938
- Within the last year.

02:04:05,938 --> 02:04:07,600
But one of issues with that

02:04:07,600 --> 02:04:11,185
was that there is no pull-up support in libgpiod,

02:04:11,185 --> 02:04:13,682
so that the new interface doesn't have pull-up support.

02:04:13,682 --> 02:04:16,581
So that was kind of one of the downsides, so.

02:04:16,581 --> 02:04:18,593
And there was some discussion about

02:04:18,593 --> 02:04:22,084
whether that should be GPIO or a pin control

02:04:22,084 --> 02:04:24,671
and then it got into like--

02:04:24,671 --> 02:04:25,561
- [Peter] The wait.

02:04:25,561 --> 02:04:27,394
- [Man] November 2018.

02:04:29,349 --> 02:04:30,182
- Yeah.

02:04:31,235 --> 02:04:32,464
- A total little anecdote.

02:04:32,464 --> 02:04:36,700
I was doing a workshop with some mechatronics students.

02:04:36,700 --> 02:04:38,114
So they're mostly mechanical engineers

02:04:38,114 --> 02:04:39,370
doing computer science

02:04:39,370 --> 02:04:41,971
and espousing all the virtues of just using

02:04:41,971 --> 02:04:43,320
the Linux kernel as it is,

02:04:43,320 --> 02:04:44,933
and there's drivers for pretty much everything.

02:04:44,933 --> 02:04:47,812
Just use them and then we grab a range of example

02:04:47,812 --> 02:04:49,729
of an NFC tank.

02:04:49,729 --> 02:04:52,064
And the only code we could find working

02:04:52,064 --> 02:04:57,064
was an absolutely random Python library written on SpiDev.

02:04:57,354 --> 02:04:59,843
And that's been kind of the norm in this,

02:04:59,843 --> 02:05:01,507
where you just have people creating

02:05:01,507 --> 02:05:03,332
these crazy Python libraries

02:05:03,332 --> 02:05:06,073
using user space, SPI interfaces.

02:05:06,073 --> 02:05:08,677
And we're not getting the code into the kernel.

02:05:08,677 --> 02:05:10,124
- Well and I find part of that is

02:05:10,124 --> 02:05:14,219
because there's like the libgpio or the libiio

02:05:14,219 --> 02:05:16,197
or whatever, there is not good documentation.

02:05:16,197 --> 02:05:18,364
And like libiio, it's like

02:05:21,109 --> 02:05:23,349
can I run up a Python weather station

02:05:23,349 --> 02:05:26,935
to talk to like humidity and temperature sensor.

02:05:26,935 --> 02:05:28,271
And is there examples for that?

02:05:28,271 --> 02:05:29,440
Well, not that I've managed to find

02:05:29,440 --> 02:05:31,940
on the internet yet, and so...

02:05:33,654 --> 02:05:34,821
- And that precisely is the point.

02:05:34,821 --> 02:05:36,966
If you Google for a specific chipset name,

02:05:36,966 --> 02:05:38,043
then you're much more likely

02:05:38,043 --> 02:05:41,271
to find some crappy example code on GitHub

02:05:41,271 --> 02:05:44,613
for using SpiDev or some other microcontroller interface.

02:05:44,613 --> 02:05:46,806
Then the description for how can you actually

02:05:46,806 --> 02:05:49,590
get value out of using a specific sensor

02:05:49,590 --> 02:05:52,492
with the existing documented IIO framework.

02:05:52,492 --> 02:05:53,325
- Yeah. - I think that's the point

02:05:53,325 --> 02:05:56,074
that people actually don't know that those things exist,

02:05:56,074 --> 02:05:57,638
and are therefore not using it.

02:05:57,638 --> 02:05:59,937
And therefore, not much work has contributed back into it.

02:05:59,937 --> 02:06:02,409
- Or they go, they find like one of the things

02:06:02,409 --> 02:06:04,733
I love about the Raspberry Pi Foundation

02:06:04,733 --> 02:06:07,230
is they have all these amazing tutorials

02:06:07,230 --> 02:06:11,731
and it's like starts with pip install RPi.GPIO.

02:06:11,731 --> 02:06:14,362
And so if it doesn't work

02:06:14,362 --> 02:06:17,686
with all those amazing lots of examples

02:06:17,686 --> 02:06:21,853
on any distro, on the new interface, we've failed.

02:06:22,766 --> 02:06:24,390
Because nobody is going to go

02:06:24,390 --> 02:06:26,940
and rewrite that documentation to say

02:06:26,940 --> 02:06:30,356
if you're on Raspberry then do this, else do this.

02:06:30,356 --> 02:06:34,264
Because it's like stuff gets out of date

02:06:34,264 --> 02:06:35,227
and things like that.

02:06:35,227 --> 02:06:38,142
So we need it to work in the same way

02:06:38,142 --> 02:06:40,777
from the end user point of view,

02:06:40,777 --> 02:06:43,526
and then do the right thing under the covers

02:06:43,526 --> 02:06:45,359
for the new interface.

02:06:48,377 --> 02:06:51,511
And I think we're almost out of time for the next.

02:06:51,511 --> 02:06:54,844
- So just addressing the bindings issues

02:06:55,738 --> 02:06:58,321
and the conversion to libgpiod.

02:06:59,447 --> 02:07:01,149
In DRAM subsystem at least,

02:07:01,149 --> 02:07:04,229
the way we get our to-do items done

02:07:04,229 --> 02:07:07,458
is we just have a very detailed to-do list

02:07:07,458 --> 02:07:09,370
with a point of contact.

02:07:09,370 --> 02:07:12,253
And every once in a while, someone will come

02:07:12,253 --> 02:07:13,883
and pick one of those items off.

02:07:13,883 --> 02:07:16,670
But we also have outreach to students

02:07:16,670 --> 02:07:18,796
and Google Summer of Code.

02:07:18,796 --> 02:07:22,425
So even if they can't pick off the big items,

02:07:22,425 --> 02:07:24,040
usually those stick around

02:07:24,040 --> 02:07:26,464
and you'll have indoctrinated someone

02:07:26,464 --> 02:07:29,181
into working on this and caring about it.

02:07:29,181 --> 02:07:30,923
And it sounds like really that's what you need.

02:07:30,923 --> 02:07:33,844
You need somebody to just dig in and care about it.

02:07:33,844 --> 02:07:35,979
So even if it seems like you might not

02:07:35,979 --> 02:07:39,467
get very far at first, you can make inroads.

02:07:39,467 --> 02:07:41,953
- Yep. - So probably a to-do list

02:07:41,953 --> 02:07:45,129
would be-- - What's the magic code?

02:07:45,129 --> 02:07:46,379
- I don't know.

02:07:48,721 --> 02:07:51,357
- Detailed to-do list.

02:07:51,357 --> 02:07:53,539
- Yeah, I mean that's the first start, right?

02:07:53,539 --> 02:07:54,928
When people Google it, it would be great

02:07:54,928 --> 02:07:57,178
if your to-do list came up.

02:07:59,869 --> 02:08:01,319
- Excellent, thank you, everyone.

02:08:01,319 --> 02:08:04,486
(audience applauding)

02:08:18,093 --> 02:08:21,176
(chattering faintly)

02:08:55,642 --> 02:08:56,513
- [Man] I talked to him.

02:08:56,513 --> 02:08:57,411
- [Man] Oh good.

02:08:57,411 --> 02:08:59,044
(man laughs)

02:08:59,044 --> 02:09:02,039
- [Man] So let's see for you to be happy with the--

02:09:02,039 --> 02:09:04,855
(chattering faintly)

02:09:04,855 --> 02:09:06,592
- [Man] I don't think it fits at all.

02:09:06,592 --> 02:09:07,939
- [Man] Why not?

02:09:07,939 --> 02:09:11,022
(chattering faintly)

02:09:38,436 --> 02:09:39,596
- [Man] It's a good talk.

02:09:39,596 --> 02:09:41,096
- [Man] Thank you.

02:09:42,353 --> 02:09:46,215
- [Man] I love that you threw in some profanity.

02:09:46,215 --> 02:09:48,938
Sometimes you have to do that to get your point across.

02:09:48,938 --> 02:09:50,772
- [Man] Well, I tried to put the official

02:09:50,772 --> 02:09:51,806
alignment of Raspberry Pi,

02:09:51,806 --> 02:09:53,528
just to get Raspberry Pi involved.

02:09:53,528 --> 02:09:54,363
(man laughing)

02:09:54,363 --> 02:09:55,740
And I love to hate it,

02:09:55,740 --> 02:09:57,205
and I hate to love it.

02:09:57,205 --> 02:10:00,288
(chattering faintly)

02:10:05,674 --> 02:10:08,424
- Okay, so we can go to the next.

02:10:10,245 --> 02:10:11,720
I mean I only have a few slides

02:10:11,720 --> 02:10:16,053
but you can save the time for the ending discussion.

02:10:17,420 --> 02:10:20,249
Okay, so yeah, I'm Stefan.

02:10:20,249 --> 02:10:22,094
I'm the maintainer or one of the maintainers

02:10:22,094 --> 02:10:24,677
of the 15.4 Bluetooth subsystem

02:10:25,902 --> 02:10:29,596
and also working a little bit on the 6LoWPAN part.

02:10:29,596 --> 02:10:31,319
Just a little bit of an overview.

02:10:31,319 --> 02:10:33,324
I don't know how many of you are familiar

02:10:33,324 --> 02:10:35,979
with 15.4 and 6LoWPAN, and so on.

02:10:35,979 --> 02:10:38,178
So a few of them just to give you

02:10:38,178 --> 02:10:40,980
a brief idea of what I'm talking about here.

02:10:40,980 --> 02:10:43,980
So 15.4 is a wireless specification,

02:10:46,087 --> 02:10:50,293
a physical MAC layer basically defined by the IEEE.

02:10:50,293 --> 02:10:52,369
The interesting part here is that it's only

02:10:52,369 --> 02:10:55,702
like 127 byte MTU, which is not uncommon

02:10:57,276 --> 02:10:59,034
in this kind of protocols.

02:10:59,034 --> 02:11:01,252
But it gets really interesting if you want to run

02:11:01,252 --> 02:11:04,706
something like TCP/IP over it.

02:11:04,706 --> 02:11:08,012
There's a series of IETF specifications

02:11:08,012 --> 02:11:09,913
trying to bring this forward.

02:11:09,913 --> 02:11:12,122
This is policy 6LoWPAN calls.

02:11:12,122 --> 02:11:16,289
So it's six, IP version six over LoWPAN basically.

02:11:19,749 --> 02:11:22,334
The idea is to have like something like the,

02:11:22,334 --> 02:11:23,705
like a sensor in your homes,

02:11:23,705 --> 02:11:25,360
setting, measuring the temperatures on there

02:11:25,360 --> 02:11:28,520
and being that one, being accessible over IP version six.

02:11:28,520 --> 02:11:30,031
So can have direct address,

02:11:30,031 --> 02:11:30,963
you have routing solved,

02:11:30,963 --> 02:11:32,134
and all these kind of things.

02:11:32,134 --> 02:11:34,482
But you don't have to invent again

02:11:34,482 --> 02:11:38,138
in your own network stack but it's a great idea.

02:11:38,138 --> 02:11:40,975
So basic around these IETF drafts

02:11:40,975 --> 02:11:43,456
are mostly around address auto-configuration,

02:11:43,456 --> 02:11:45,884
how you handle that for this kind of devices,

02:11:45,884 --> 02:11:47,557
how you do the frame encapsulation

02:11:47,557 --> 02:11:50,798
and the fragmentation because you might need them

02:11:50,798 --> 02:11:53,244
because the MTU is so small.

02:11:53,244 --> 02:11:55,247
And one of the key pieces here

02:11:55,247 --> 02:11:57,381
is the header compression that's just why

02:11:57,381 --> 02:12:00,767
6LoWPAN got so interested to other kind of specifications.

02:12:00,767 --> 02:12:03,867
By now, Bluetooth adopted it for their own

02:12:03,867 --> 02:12:06,646
IP version six over Bluetooth transport.

02:12:06,646 --> 02:12:09,039
You have their drafts in IETF state,

02:12:09,039 --> 02:12:12,178
I think for something like NFC.

02:12:12,178 --> 02:12:14,152
Then they're working on something like PLC

02:12:14,152 --> 02:12:15,844
for power line communication.

02:12:15,844 --> 02:12:19,474
There was one for extended Wi-Fi range things.

02:12:19,474 --> 02:12:22,609
And basically, at least five or 10 more,

02:12:22,609 --> 02:12:25,041
I don't know or I just missed.

02:12:25,041 --> 02:12:27,173
So basically, it's an adaptation layer

02:12:27,173 --> 02:12:30,345
flirting with the network and data link layer.

02:12:30,345 --> 02:12:33,641
So that's the green part, I can see it here.

02:12:33,641 --> 02:12:36,208
So that's just a really brief overview

02:12:36,208 --> 02:12:37,644
of what's going on.

02:12:37,644 --> 02:12:39,458
So what I'm talking about here is the

02:12:39,458 --> 02:12:41,969
subsystem I maintained with the kernel.

02:12:41,969 --> 02:12:44,871
What we have set at the current state.

02:12:44,871 --> 02:12:47,979
So we have support for 6LoWPAN,

02:12:47,979 --> 02:12:50,720
this fragmentation and reassembly

02:12:50,720 --> 02:12:53,860
via header compression for the IP header compression

02:12:53,860 --> 02:12:56,110
that's IPHC and IETF-speak.

02:12:56,956 --> 02:12:59,317
And the next header compression for something like UDP

02:12:59,317 --> 02:13:01,418
and other things, you have that implemented.

02:13:01,418 --> 02:13:04,176
It's upstream for a long time already.

02:13:04,176 --> 02:13:06,001
We share these two pieces actually

02:13:06,001 --> 02:13:07,294
receive Bluetooth subsystem.

02:13:07,294 --> 02:13:08,584
They're using that.

02:13:08,584 --> 02:13:10,383
They're not using the fragmentation reassembly

02:13:10,383 --> 02:13:13,245
because that's specific to 15.4.

02:13:13,245 --> 02:13:15,597
They have their own setup for that.

02:13:15,597 --> 02:13:18,005
And we have soft-MAC implementation,

02:13:18,005 --> 02:13:20,448
with various of drivers for things like

02:13:20,448 --> 02:13:21,875
seven or eight different drivers

02:13:21,875 --> 02:13:25,162
but now being able to drive like 12

02:13:25,162 --> 02:13:28,261
or 13 different chips or so, so that's quite good.

02:13:28,261 --> 02:13:29,510
It means there are quite a few,

02:13:29,510 --> 02:13:31,230
not quite a few there, a few that are

02:13:31,230 --> 02:13:33,435
not supported by now, but most of them are.

02:13:33,435 --> 02:13:35,731
And they're really simple and all we've got.

02:13:35,731 --> 02:13:37,283
- [Man] As a total novice, I just wanna ask

02:13:37,283 --> 02:13:38,740
a really stupid question right here.

02:13:38,740 --> 02:13:40,090
- Go ahead. - So when you have

02:13:40,090 --> 02:13:42,248
these soft net drivers, where does the firmware live?

02:13:42,248 --> 02:13:43,081
Right, so--

02:13:43,081 --> 02:13:44,176
- [Stefan] There's no firmware.

02:13:44,176 --> 02:13:45,234
- So there's really no firmware.

02:13:45,234 --> 02:13:46,783
- The devices I'm talking about,

02:13:46,783 --> 02:13:48,600
most of the devices I'm talking about here

02:13:48,600 --> 02:13:50,376
are really really simple devices.

02:13:50,376 --> 02:13:54,028
The FI itself and then SPI and GPIO access to that.

02:13:54,028 --> 02:13:55,640
- Yeah but the CC2520.

02:13:55,640 --> 02:13:57,107
Is that, so that's one is an MCU list?

02:13:57,107 --> 02:13:58,667
There's no M4 on there?

02:13:58,667 --> 02:14:00,094
- No that's the 2520.

02:14:00,094 --> 02:14:01,380
That's the older version.

02:14:01,380 --> 02:14:03,713
So the 26 and so on, these are bigger things.

02:14:03,713 --> 02:14:05,282
- Yes, they have them first.

02:14:05,282 --> 02:14:08,355
- So for CC, you have always have to find

02:14:08,355 --> 02:14:11,254
if there's the FI chip itself,

02:14:11,254 --> 02:14:13,673
and then justify MCU combination.

02:14:13,673 --> 02:14:15,533
That could be something you can use as a network

02:14:15,533 --> 02:14:18,663
coprocessor or something, where you have the MAC on the MCU.

02:14:18,663 --> 02:14:19,496
- It's fine.

02:14:19,496 --> 02:14:21,600
- But that is something we are not supporting here.

02:14:21,600 --> 02:14:23,955
- And there's also some things,

02:14:23,955 --> 02:14:27,538
where you put an open mode on a serial bus,

02:14:28,856 --> 02:14:30,968
and you speak to it with SLIP,

02:14:30,968 --> 02:14:34,255
and all of the 6LoW is on the, on that side.

02:14:34,255 --> 02:14:37,838
In which case, the firmware is open source.

02:14:39,024 --> 02:14:40,235
- Okay, so but Michael.

02:14:40,235 --> 02:14:41,162
- Contiki here. - Yeah.

02:14:41,162 --> 02:14:42,474
- So one of the things that is used

02:14:42,474 --> 02:14:43,994
quite often in this kind of setup

02:14:43,994 --> 02:14:46,030
is the network coprocessor setup,

02:14:46,030 --> 02:14:47,443
like the micro industrial stuff,

02:14:47,443 --> 02:14:50,610
you have like your flagship chip,

02:14:50,610 --> 02:14:51,824
and then you have your MCU,

02:14:51,824 --> 02:14:53,877
where the MAC and all the other things are running on,

02:14:53,877 --> 02:14:55,418
and then you have something like SLIP

02:14:55,418 --> 02:14:57,263
or whatever talking to the kernel.

02:14:57,263 --> 02:14:59,680
And that is something that is used quite heavily.

02:14:59,680 --> 02:15:01,097
And that is but--

02:15:01,988 --> 02:15:03,632
- And part of the things that I've been trying to do

02:15:03,632 --> 02:15:07,267
is to move half of the soft-MAC back into the kernel

02:15:07,267 --> 02:15:08,723
so that we can do things,

02:15:08,723 --> 02:15:11,465
so that we don't, so that things can work

02:15:11,465 --> 02:15:13,942
a little bit more intelligently.

02:15:13,942 --> 02:15:17,498
But that's totally work in progress, right?

02:15:17,498 --> 02:15:20,108
- Okay, I mean, just to get into that a little bit.

02:15:20,108 --> 02:15:22,562
So I mean that are valid use cases for that.

02:15:22,562 --> 02:15:26,026
For example, the NEST procs, so Google NEST,

02:15:26,026 --> 02:15:29,199
whatever they call it by now.

02:15:29,199 --> 02:15:31,961
They have the OpenThread implementation,

02:15:31,961 --> 02:15:34,113
which is basically using 15.4 as well.

02:15:34,113 --> 02:15:35,529
And when I talk to them,

02:15:35,529 --> 02:15:36,780
they explain to me that they want to have

02:15:36,780 --> 02:15:38,194
that on the microcontroller side.

02:15:38,194 --> 02:15:40,325
Because they have like, if you look

02:15:40,325 --> 02:15:42,772
at the product's mesh, they have like the thermostat

02:15:42,772 --> 02:15:45,032
and some of the smaller products.

02:15:45,032 --> 02:15:46,476
And the smaller products have like everything

02:15:46,476 --> 02:15:48,951
directly connecting to the FI,

02:15:48,951 --> 02:15:50,398
that's not running Linux at all.

02:15:50,398 --> 02:15:52,109
But on the thermostat, they're running Linux.

02:15:52,109 --> 02:15:54,455
But they want to have all the mesh communications

02:15:54,455 --> 02:15:57,102
for the 15.4 stuff running on a separate MCU

02:15:57,102 --> 02:15:59,120
to have Linux shutdown at that point.

02:15:59,120 --> 02:16:00,837
So they can have all the things going on

02:16:00,837 --> 02:16:03,027
and not using the full Linux system there.

02:16:03,027 --> 02:16:04,626
So there are some valid use cases

02:16:04,626 --> 02:16:07,259
but from a communications cum developer perspective,

02:16:07,259 --> 02:16:09,685
we have no insight in whatever

02:16:09,685 --> 02:16:10,875
they're doing on that side.

02:16:10,875 --> 02:16:13,776
We can't use anything of that for our network

02:16:13,776 --> 02:16:16,425
and magic we might offer or not offer to them.

02:16:16,425 --> 02:16:18,276
So that is why we are not really supporting

02:16:18,276 --> 02:16:20,261
that much in the current system.

02:16:20,261 --> 02:16:22,794
Because we have no personal interest in doing that.

02:16:22,794 --> 02:16:26,277
- And I'll say there's also some use cases

02:16:26,277 --> 02:16:28,633
where you need to be able to transmit

02:16:28,633 --> 02:16:31,004
at a very specific time.

02:16:31,004 --> 02:16:33,797
Because it's a time division channel hopping system.

02:16:33,797 --> 02:16:37,380
And we're not sufficiently, I say we're not

02:16:38,424 --> 02:16:39,481
sufficiently hard real-time.

02:16:39,481 --> 02:16:42,778
Our real-time response is not short enough

02:16:42,778 --> 02:16:44,707
for us to be able to do that,

02:16:44,707 --> 02:16:46,123
at least as far as I think.

02:16:46,123 --> 02:16:46,957
- Still have to be seen.

02:16:46,957 --> 02:16:48,646
It's on my list. - To be seen, yeah.

02:16:48,646 --> 02:16:50,049
It's on all our lists, yeah.

02:16:50,049 --> 02:16:51,695
- Let's say you preempt the RT stuff and so on,

02:16:51,695 --> 02:16:53,265
we might be able to handle things

02:16:53,265 --> 02:16:56,756
like automatic X and a grid transmit,

02:16:56,756 --> 02:16:57,748
and we might be able to have something

02:16:57,748 --> 02:16:59,093
like meetings and so on.

02:16:59,093 --> 02:17:00,535
I really have to look into the timings

02:17:00,535 --> 02:17:01,751
to get that out.

02:17:01,751 --> 02:17:05,077
But that's something really way down the list.

02:17:05,077 --> 02:17:06,565
Okay, I just follow up here.

02:17:06,565 --> 02:17:09,430
So we have one situation where we haven't use.

02:17:09,430 --> 02:17:13,797
We don't actually, which has an open source software vendor.

02:17:13,797 --> 02:17:16,949
But that's something that was designed as Open Hardware.

02:17:16,949 --> 02:17:18,350
It was designed from the ground up

02:17:18,350 --> 02:17:20,898
so I maintain the firmware as well as the driver.

02:17:20,898 --> 02:17:22,686
So that's something that's easy to do that

02:17:22,686 --> 02:17:24,808
with the ATU speed.

02:17:24,808 --> 02:17:26,891
ATU speed, it's that one.

02:17:28,024 --> 02:17:29,813
That's like a--

02:17:29,813 --> 02:17:30,827
(member of audience speaking faintly)

02:17:30,827 --> 02:17:32,162
- Yeah, I mean that's one company

02:17:32,162 --> 02:17:33,403
that still sells them.

02:17:33,403 --> 02:17:36,408
So I have no connections to that but yeah.

02:17:36,408 --> 02:17:37,599
- They're quite open. - Yeah.

02:17:37,599 --> 02:17:39,435
- [Man] They're quite open, and I've talked to them.

02:17:39,435 --> 02:17:41,102
I think it's Werner.

02:17:42,129 --> 02:17:43,862
- Werner designed it originally.

02:17:43,862 --> 02:17:44,695
- Okay.

02:17:44,695 --> 02:17:46,018
- And then I talked to Howard,

02:17:46,018 --> 02:17:48,597
who's actually now selling them the sys com.

02:17:48,597 --> 02:17:49,913
- Yeah. - And the only reason

02:17:49,913 --> 02:17:51,916
I did it with Howard was like

02:17:51,916 --> 02:17:53,456
they offered, they can do that.

02:17:53,456 --> 02:17:54,906
They don't make any money on that.

02:17:54,906 --> 02:17:56,270
They don't, maybe they even lose something.

02:17:56,270 --> 02:17:57,830
But they want to offer to the communities.

02:17:57,830 --> 02:18:00,521
- Even said if you're an existing Open Hardware company,

02:18:00,521 --> 02:18:03,521
you can hold licenses, USB ID to you

02:18:04,692 --> 02:18:05,842
if you wanted to create your own.

02:18:05,842 --> 02:18:06,902
- You don't have to, it's all free.

02:18:06,902 --> 02:18:08,256
You can just grab it and build it.

02:18:08,256 --> 02:18:10,093
I mean I just had a hard time to find

02:18:10,093 --> 02:18:12,210
someone actually building new door knobs.

02:18:12,210 --> 02:18:14,304
And I mean because I was maintaining as a firmware,

02:18:14,304 --> 02:18:16,092
the driver had an incentive to actually

02:18:16,092 --> 02:18:18,407
get someone to builds them and sells them.

02:18:18,407 --> 02:18:20,779
So I was happy that Howard took that over.

02:18:20,779 --> 02:18:22,147
So they're now available again.

02:18:22,147 --> 02:18:24,254
So which makes it really convenient.

02:18:24,254 --> 02:18:26,388
So that is one point here to develop

02:18:26,388 --> 02:18:27,825
on your workstation or something

02:18:27,825 --> 02:18:30,153
with a USB drone instead of going over

02:18:30,153 --> 02:18:33,742
Raspberry Pi or whatever and (speaking faintly).

02:18:33,742 --> 02:18:36,742
USF support for link layer security.

02:18:37,938 --> 02:18:42,867
It was tested and developed by someone from Fraunhofer,

02:18:42,867 --> 02:18:45,303
and they really had everything working on their side

02:18:45,303 --> 02:18:46,938
but I have a hard time to actually

02:18:46,938 --> 02:18:49,986
get that really reproduced on my side.

02:18:49,986 --> 02:18:53,897
And later on, I have a slide in how you do

02:18:53,897 --> 02:18:56,106
like interop testing, also how you do that

02:18:56,106 --> 02:18:57,811
actually with all the embedded OS,

02:18:57,811 --> 02:19:00,741
things like Zephyr, RIOT, Contiki and so on.

02:19:00,741 --> 02:19:04,595
And link layer security is a problem there.

02:19:04,595 --> 02:19:07,841
Okay, so for future stuff, we're missing.

02:19:07,841 --> 02:19:10,539
We touched on that already briefly.

02:19:10,539 --> 02:19:13,908
So 15.4 has support for other things.

02:19:13,908 --> 02:19:17,329
Not only data frames but also beacon and MAC commands.

02:19:17,329 --> 02:19:20,516
So beacon is directly, you have like a periodic beacon,

02:19:20,516 --> 02:19:22,725
and you have a time network basically,

02:19:22,725 --> 02:19:24,318
which is something we are not supporting,

02:19:24,318 --> 02:19:28,391
and I don't really see much devices out there using it.

02:19:28,391 --> 02:19:30,305
There are different use cases.

02:19:30,305 --> 02:19:31,670
I don't know if that really is something

02:19:31,670 --> 02:19:33,986
Linux would support on, off.

02:19:33,986 --> 02:19:35,929
That's something we have to research.

02:19:35,929 --> 02:19:37,644
For the MAC commands, that would be something

02:19:37,644 --> 02:19:39,826
like having a coordinator and do scanning,

02:19:39,826 --> 02:19:40,751
and stuff like that.

02:19:40,751 --> 02:19:43,647
That's something Chris actually started to work on.

02:19:43,647 --> 02:19:46,854
He still owes me a full request for that but--

02:19:46,854 --> 02:19:48,980
- [Chris] I will make that as soon as I can.

02:19:48,980 --> 02:19:51,651
- Okay great, so that is something

02:19:51,651 --> 02:19:52,785
we are not supporting right now

02:19:52,785 --> 02:19:55,888
because it's not really needed for 6LoWPAN

02:19:55,888 --> 02:19:58,986
because we can do easily the 6LoWPAN

02:19:58,986 --> 02:20:01,260
in a static configuration.

02:20:01,260 --> 02:20:03,415
But for a real full featured network,

02:20:03,415 --> 02:20:05,663
you want to deploy something like scanning

02:20:05,663 --> 02:20:07,305
and coordinate on stuff like that

02:20:07,305 --> 02:20:10,376
will make it a lot easier to handle.

02:20:10,376 --> 02:20:12,465
- So just to add that, the real killer's place

02:20:12,465 --> 02:20:14,834
is that the gateway box that would connect

02:20:14,834 --> 02:20:19,667
15.4 to the rest of the world is probably a Linux machine.

02:20:20,783 --> 02:20:23,950
And hopefully not an RPI but you know.

02:20:25,370 --> 02:20:26,725
- [Stefan] It will be fine, I mean.

02:20:26,725 --> 02:20:28,413
- Well, just there are other opinions

02:20:28,413 --> 02:20:30,893
about the quality of them for industrial uses.

02:20:30,893 --> 02:20:33,983
But the point is that that's where it's being used

02:20:33,983 --> 02:20:36,835
and what's happening right now is that

02:20:36,835 --> 02:20:38,231
people use a Linux machine,

02:20:38,231 --> 02:20:41,744
and then they boot one of the other

02:20:41,744 --> 02:20:43,625
embedded operating systems on it,

02:20:43,625 --> 02:20:47,739
and essential, oh sorry, add as a process.

02:20:47,739 --> 02:20:51,411
So they run the gateway as another operating system

02:20:51,411 --> 02:20:54,799
compiled as a process, which is kind of sucky

02:20:54,799 --> 02:20:56,398
from a Linux-- - So is there a

02:20:56,398 --> 02:20:58,730
good documentation as a Linux user

02:20:58,730 --> 02:21:00,591
how you would get this up and running somewhere?

02:21:00,591 --> 02:21:01,789
- [Man] Nope, nope.

02:21:01,789 --> 02:21:03,785
- What part, I mean what?

02:21:03,785 --> 02:21:06,898
- No, like if I wanted to use just Linux

02:21:06,898 --> 02:21:09,787
and plug in one of those devices

02:21:09,787 --> 02:21:12,530
and get a gateway up and running.

02:21:12,530 --> 02:21:13,398
- [Stefan] Oh, we don't have a gateway.

02:21:13,398 --> 02:21:16,560
- Not for the gateway, yeah.

02:21:16,560 --> 02:21:19,014
I mean for what I focus on here,

02:21:19,014 --> 02:21:21,898
there's no sense of gateway or whatever.

02:21:21,898 --> 02:21:24,060
Really, we are basically just coming up

02:21:24,060 --> 02:21:26,232
to the rooting part and stuff like that.

02:21:26,232 --> 02:21:29,911
So I'm really coming from the ground up here.

02:21:29,911 --> 02:21:32,868
So something like that is normally

02:21:32,868 --> 02:21:34,456
driven by a company because they want to have

02:21:34,456 --> 02:21:36,013
their own specific stuff or something.

02:21:36,013 --> 02:21:38,549
And that's nothing really interesting

02:21:38,549 --> 02:21:40,133
enough for me to actually look at.

02:21:40,133 --> 02:21:42,590
So for example, what I know from NEST and so on,

02:21:42,590 --> 02:21:45,056
is that they are having their own stuff there.

02:21:45,056 --> 02:21:47,435
And but they're deploying a whole setup,

02:21:47,435 --> 02:21:48,891
a whole system and everything.

02:21:48,891 --> 02:21:50,431
And they have no big incentive

02:21:50,431 --> 02:21:53,798
to have all of that in upstream Linux, which is fine.

02:21:53,798 --> 02:21:55,945
I mean I'm not really bothering them about that.

02:21:55,945 --> 02:21:57,306
I just, from my perspective,

02:21:57,306 --> 02:21:59,131
it doesn't have an interest for me

02:21:59,131 --> 02:22:00,605
because I can't look into that.

02:22:00,605 --> 02:22:01,701
I mean all the stuff is open source,

02:22:01,701 --> 02:22:03,110
all the OpenThread stuff and so on.

02:22:03,110 --> 02:22:04,863
But as long as I can really feed it

02:22:04,863 --> 02:22:06,969
back into the networking stack from Linux,

02:22:06,969 --> 02:22:08,998
it doesn't really matter to me.

02:22:08,998 --> 02:22:11,996
- [Man] So who was that company or the project?

02:22:11,996 --> 02:22:13,123
Oh, like sorry. - OpenThread.

02:22:13,123 --> 02:22:14,034
- [Man] The OpenThread stuff.

02:22:14,034 --> 02:22:14,933
- OpenThread. - Yeah yeah.

02:22:14,933 --> 02:22:16,035
That would be one part of it.

02:22:16,035 --> 02:22:17,700
I mean they, before they have

02:22:17,700 --> 02:22:18,724
their own Thread implementation

02:22:18,724 --> 02:22:19,832
that's all proprietary but now,

02:22:19,832 --> 02:22:21,310
it's OpenThread, they moved over there.

02:22:21,310 --> 02:22:23,217
- And there's a lot of things beyond OpenThread

02:22:23,217 --> 02:22:26,967
that sorry, beyond Thread that is using 15.4,

02:22:27,995 --> 02:22:31,141
that is not at all intended to be at all

02:22:31,141 --> 02:22:34,701
compatible with Thread for a lot of other scenarios

02:22:34,701 --> 02:22:37,833
and situations, where it would be really nice to have

02:22:37,833 --> 02:22:40,077
things that would work well.

02:22:40,077 --> 02:22:41,299
- I mean most famous is Zigbee.

02:22:41,299 --> 02:22:43,103
I mean everybody knows Zigbee but nobody knows

02:22:43,103 --> 02:22:45,681
that it's actually based on 15.4.

02:22:45,681 --> 02:22:48,561
So they basically used it on the FI stuff itself

02:22:48,561 --> 02:22:50,338
but nowadays, they have like Zigbee IP,

02:22:50,338 --> 02:22:52,392
which is actually based on 6LoWPAN.

02:22:52,392 --> 02:22:53,345
So that could be interesting.

02:22:53,345 --> 02:22:55,979
It is problematic for us to actually deal with them

02:22:55,979 --> 02:22:59,781
because there's a legal stuff on the documentation side.

02:22:59,781 --> 02:23:01,909
So I don't really touch anything of that.

02:23:01,909 --> 02:23:03,703
But as long as they do whatever

02:23:03,703 --> 02:23:07,946
using Zigbee IP, their profile is over 6LoWPAN.

02:23:07,946 --> 02:23:10,491
They can do that by now.

02:23:10,491 --> 02:23:11,945
There's a lot of things that will be missing

02:23:11,945 --> 02:23:13,845
but they could do it actually on the company side.

02:23:13,845 --> 02:23:15,656
And then put it out in user space

02:23:15,656 --> 02:23:18,867
and dish out any legal objectives.

02:23:18,867 --> 02:23:20,200
That works fine.

02:23:21,136 --> 02:23:22,353
- Is there anyone that is doing that

02:23:22,353 --> 02:23:25,567
on the non-6LoWPAN layer in user space?

02:23:25,567 --> 02:23:26,859
- For Zigbee?

02:23:26,859 --> 02:23:28,774
- Ah, nobody talk to me about that.

02:23:28,774 --> 02:23:30,823
Maybe they don't want to talk to me, I don't know.

02:23:30,823 --> 02:23:33,545
- [Man] Or do you mean Bluetooth or something?

02:23:33,545 --> 02:23:35,367
- [Man] No, I meant 802.15.4.

02:23:35,367 --> 02:23:36,282
- [Man] Okay.

02:23:36,282 --> 02:23:37,191
- [Man] Zigbee.

02:23:37,191 --> 02:23:38,855
- Okay, so keep going here.

02:23:38,855 --> 02:23:40,702
So one of the other things beyond missing

02:23:40,702 --> 02:23:43,539
which was basically mostly due to lack

02:23:43,539 --> 02:23:45,099
on the resources on our side.

02:23:45,099 --> 02:23:47,130
So like having support for hard-MAC transceivers,

02:23:47,130 --> 02:23:49,683
we have one which is really

02:23:49,683 --> 02:23:53,792
kind of ugly fit into the soft-MAC to make it work.

02:23:53,792 --> 02:23:56,172
And we are really need to ramp up

02:23:56,172 --> 02:23:59,414
our side on the infrastructure to make that possible.

02:23:59,414 --> 02:24:00,643
But it's quite a lot of work,

02:24:00,643 --> 02:24:02,568
and I only do that in my spare time,

02:24:02,568 --> 02:24:04,417
and the other maintainers are also doing that.

02:24:04,417 --> 02:24:06,810
The user problem basically.

02:24:06,810 --> 02:24:09,211
We also started on Neighbor Discovery Optimizations.

02:24:09,211 --> 02:24:13,101
That's something that is a bit more complicated

02:24:13,101 --> 02:24:15,391
because it had just quite a lot of other things

02:24:15,391 --> 02:24:16,785
in the core networking stack,

02:24:16,785 --> 02:24:20,106
which is a bit sensitive to get stuff into.

02:24:20,106 --> 02:24:22,471
Because you have to make a lot more

02:24:22,471 --> 02:24:24,810
effort actually to make sure nothing else breaks,

02:24:24,810 --> 02:24:27,182
and you're not regressing in performance

02:24:27,182 --> 02:24:28,052
and stuff like that.

02:24:28,052 --> 02:24:30,380
So that's just more work basically.

02:24:30,380 --> 02:24:32,586
And we have all the various header compressions

02:24:32,586 --> 02:24:33,699
already in there.

02:24:33,699 --> 02:24:37,055
What is really missing is the configuration interface.

02:24:37,055 --> 02:24:38,631
Something with Netlink and then define

02:24:38,631 --> 02:24:41,376
what is enabled to appear you want to connect

02:24:41,376 --> 02:24:44,153
with what compression enabled and so on.

02:24:44,153 --> 02:24:45,994
I talked about that for a while already.

02:24:45,994 --> 02:24:49,564
But yeah, didn't really work on it.

02:24:49,564 --> 02:24:50,859
And then there are these things

02:24:50,859 --> 02:24:52,586
that we get into the next level.

02:24:52,586 --> 02:24:54,700
This is something like routing and stuff like that.

02:24:54,700 --> 02:24:57,794
You can have like route-over or mesh-under protocols,

02:24:57,794 --> 02:24:59,211
and we need to support them on

02:24:59,211 --> 02:25:00,934
from the kernel subsystem side

02:25:00,934 --> 02:25:02,432
but actually giving them the details

02:25:02,432 --> 02:25:04,394
and the properties they need to know.

02:25:04,394 --> 02:25:05,521
Actually, there was a patch coming in

02:25:05,521 --> 02:25:08,688
which has like LQI value over then the

02:25:09,725 --> 02:25:11,337
same method or a fifth method saying,

02:25:11,337 --> 02:25:12,489
so you can actually get that back,

02:25:12,489 --> 02:25:14,751
and then in user space, you can actually deal with that

02:25:14,751 --> 02:25:17,140
and make decisions for routing and stuff like that.

02:25:17,140 --> 02:25:18,662
We have Angstrom from Michael

02:25:18,662 --> 02:25:23,493
that actually worked on that after an RPL daemon.

02:25:23,493 --> 02:25:26,829
Then Alexander just two weeks ago released RPLD.

02:25:26,829 --> 02:25:28,793
And we need to work with both of them

02:25:28,793 --> 02:25:31,058
to actually understand what kind of support

02:25:31,058 --> 02:25:32,798
they still need from the kernel side

02:25:32,798 --> 02:25:35,332
to get them the needed properties.

02:25:35,332 --> 02:25:36,165
- [Man] Who is that?

02:25:36,165 --> 02:25:38,125
(speaking faintly)

02:25:38,125 --> 02:25:42,747
- RPL is like, it's a routing for lossy networks.

02:25:42,747 --> 02:25:45,049
So and that is defined by TF as well.

02:25:45,049 --> 02:25:47,230
So Michael was the lead for that for a while,

02:25:47,230 --> 02:25:48,607
and he was doing the Angstrom thing.

02:25:48,607 --> 02:25:50,554
- [Man] It's route mesh over.

02:25:50,554 --> 02:25:51,387
- Yeah.

02:25:51,387 --> 02:25:53,950
- So layer three mesh rather than layer two mesh.

02:25:53,950 --> 02:25:56,404
That make sense, Chris?

02:25:56,404 --> 02:25:59,101
Did you understand, yeah?

02:25:59,101 --> 02:26:02,101
- Okay, so let's see the next slide.

02:26:03,082 --> 02:26:05,514
Yeah, so as one of the last slides to kick in,

02:26:05,514 --> 02:26:09,296
it's like as a comparison all the other things

02:26:09,296 --> 02:26:10,472
we have in there at key space.

02:26:10,472 --> 02:26:12,604
So as Michael mentioned, we have like,

02:26:12,604 --> 02:26:14,983
if you consider Linux being the gateway here,

02:26:14,983 --> 02:26:18,008
we have a lot of other small really tiny things available

02:26:18,008 --> 02:26:20,841
and they are not going to run Linux, definitely not.

02:26:20,841 --> 02:26:22,868
So and then you have things like RIOT,

02:26:22,868 --> 02:26:25,736
Contiki, Zephyr, OpenThread.

02:26:25,736 --> 02:26:26,579
There are more.

02:26:26,579 --> 02:26:28,922
There's embedded from ARM, for wireless

02:26:28,922 --> 02:26:31,146
you have like the networking stack closed.

02:26:31,146 --> 02:26:32,277
I think that open up by now,

02:26:32,277 --> 02:26:34,060
and you can actually look at the source code

02:26:34,060 --> 02:26:36,391
for their 6LoWPAN support and so on.

02:26:36,391 --> 02:26:37,391
But I'm not 100% sure.

02:26:37,391 --> 02:26:39,110
So that's just a comparison table,

02:26:39,110 --> 02:26:40,407
what is support and what not.

02:26:40,407 --> 02:26:41,522
And as you can see, for example,

02:26:41,522 --> 02:26:43,673
the beacon MAC command frames here,

02:26:43,673 --> 02:26:46,265
that is not only Linux's not supporting them.

02:26:46,265 --> 02:26:47,469
Contiki and RIOT neither

02:26:47,469 --> 02:26:49,755
because it was easy enough to just brings that up

02:26:49,755 --> 02:26:51,661
statically, configure everything.

02:26:51,661 --> 02:26:55,383
But for a redeployment, that's a no go basically.

02:26:55,383 --> 02:26:59,516
Link layer security, I briefly mentioned that.

02:26:59,516 --> 02:27:01,641
So we test it against Contiki

02:27:01,641 --> 02:27:05,104
and see found all our people also tested against Contiki.

02:27:05,104 --> 02:27:07,078
And so that is kind of working.

02:27:07,078 --> 02:27:08,864
RIOT doesn't even have support for that.

02:27:08,864 --> 02:27:11,843
Maybe that's outdated, I need to check on that.

02:27:11,843 --> 02:27:14,571
I never personally test it against Zephyr or Thread.

02:27:14,571 --> 02:27:17,331
So the link layer security stuff you have in here

02:27:17,331 --> 02:27:19,730
but I'm not 100% sure that everything is working

02:27:19,730 --> 02:27:21,310
as good as it should.

02:27:21,310 --> 02:27:23,915
- Just a question on the link layer security.

02:27:23,915 --> 02:27:26,682
I know that for the longest time,

02:27:26,682 --> 02:27:30,412
in the Zigbee crowd, there was just

02:27:30,412 --> 02:27:33,817
nobody actually dealt with security at all.

02:27:33,817 --> 02:27:37,400
And because there was this known key issue,

02:27:38,487 --> 02:27:39,381
are you aware of that issue.

02:27:39,381 --> 02:27:40,309
- [Stefan] Oh, the known key issue?

02:27:40,309 --> 02:27:41,142
- Yeah.

02:27:41,142 --> 02:27:42,743
- Okay, that's implementation stuff.

02:27:42,743 --> 02:27:45,000
So what they did, they have like this

02:27:45,000 --> 02:27:47,419
Zigbee lightning protocol

02:27:47,419 --> 02:27:49,698
where you can just turn the lights on and off,

02:27:49,698 --> 02:27:52,462
and the hard code is the key inside the device.

02:27:52,462 --> 02:27:55,082
Toward every vendor, you don't have to tell anybody.

02:27:55,082 --> 02:27:58,312
Well, what a surprise it came out.

02:27:58,312 --> 02:28:00,480
So but that's an implementation detail on that side.

02:28:00,480 --> 02:28:04,312
So on 15.4, they don't really do anything

02:28:04,312 --> 02:28:06,201
on key handling, rollover, or whatever.

02:28:06,201 --> 02:28:09,289
They only say you have like AS key sitting in here,

02:28:09,289 --> 02:28:11,532
this length, so you can put that in the hardware.

02:28:11,532 --> 02:28:13,935
That is also a blocker wide not used

02:28:13,935 --> 02:28:15,392
in all these homemade protocols and so on

02:28:15,392 --> 02:28:17,697
because it's quite difficult to get right.

02:28:17,697 --> 02:28:20,200
I know that Thread is actually doing it.

02:28:20,200 --> 02:28:22,705
So Thread is using link layer security

02:28:22,705 --> 02:28:23,715
in all of these things.

02:28:23,715 --> 02:28:25,533
It's mandatory for them to do that.

02:28:25,533 --> 02:28:29,722
- There was this might be a higher-level thing

02:28:29,722 --> 02:28:34,223
but there was a rejoin vulnerability as well as the Zigbee.

02:28:34,223 --> 02:28:36,698
Is that 802.15.4 or is it just Zigbee?

02:28:36,698 --> 02:28:37,531
- [Stefan] I don't know.

02:28:37,531 --> 02:28:38,364
- You don't know, okay.

02:28:38,364 --> 02:28:40,024
- I need to find out.

02:28:40,024 --> 02:28:42,132
Yeah, I mean if you look at all the other things,

02:28:42,132 --> 02:28:45,222
you see that the basic 6LoWPAN stuff

02:28:45,222 --> 02:28:46,677
is supported in all of them.

02:28:46,677 --> 02:28:49,447
The header compression is also supported.

02:28:49,447 --> 02:28:50,846
Yeah, next header as well.

02:28:50,846 --> 02:28:52,905
There's this thing called generic header compression

02:28:52,905 --> 02:28:55,459
but it's not supported by any of them.

02:28:55,459 --> 02:28:57,051
I looked into that.

02:28:57,051 --> 02:28:59,689
It is interesting because it uses like

02:28:59,689 --> 02:29:03,437
a more generic compression style instead of,

02:29:03,437 --> 02:29:05,533
all the other ones are really relying heavily

02:29:05,533 --> 02:29:07,701
on the fact that they know about the context,

02:29:07,701 --> 02:29:10,414
what is available, the underlying mechanism,

02:29:10,414 --> 02:29:12,467
stuff like that, so.

02:29:12,467 --> 02:29:15,476
And generic header compression doesn't do that.

02:29:15,476 --> 02:29:18,136
But they still have something that is cheap enough

02:29:18,136 --> 02:29:22,198
to actually run on this really tiny MCU,

02:29:22,198 --> 02:29:24,360
it's used like a console battery and so on.

02:29:24,360 --> 02:29:25,929
But nobody really implemented that.

02:29:25,929 --> 02:29:29,175
A big benefit would be for like

02:29:29,175 --> 02:29:31,186
protocols which have like IP addresses

02:29:31,186 --> 02:29:33,102
in there as well, like Ripple,

02:29:33,102 --> 02:29:34,499
or like DTLS or something that,

02:29:34,499 --> 02:29:37,390
where you have like the IP address again

02:29:37,390 --> 02:29:39,296
inside the header or something like that.

02:29:39,296 --> 02:29:41,463
But yeah, nobody had that.

02:29:42,477 --> 02:29:43,665
Network discovery optimization,

02:29:43,665 --> 02:29:45,497
that's something RIOT has been working on.

02:29:45,497 --> 02:29:47,790
We tried to work on it and the other ones

02:29:47,790 --> 02:29:49,337
in various stages there.

02:29:49,337 --> 02:29:51,725
And yeah, Ripple, as I said,

02:29:51,725 --> 02:29:54,946
we have like Angstrom and now, Rippled.

02:29:54,946 --> 02:29:56,750
All the other ones are more like

02:29:56,750 --> 02:29:58,235
really tightly integrated systems.

02:29:58,235 --> 02:30:00,128
So but we have only com space

02:30:00,128 --> 02:30:01,281
and have different things like

02:30:01,281 --> 02:30:02,629
different projects in user space.

02:30:02,629 --> 02:30:04,094
It's different for RIOT, Contiki

02:30:04,094 --> 02:30:06,592
or somewhere but all in one box.

02:30:06,592 --> 02:30:07,967
Yeah, mesh link establishment.

02:30:07,967 --> 02:30:10,158
That's something that is really specific to Thread

02:30:10,158 --> 02:30:11,663
and that's only supported by OpenThread

02:30:11,663 --> 02:30:14,668
and the port of that to Zephyr.

02:30:14,668 --> 02:30:16,975
So that's just an overview of what's available

02:30:16,975 --> 02:30:19,365
of how compatible they are with these kind

02:30:19,365 --> 02:30:21,781
of things and so on, so.

02:30:21,781 --> 02:30:25,031
Are there more questions or any things?

02:30:29,476 --> 02:30:31,082
Yeah, so as I said, I'm so sorry, go on.

02:30:31,082 --> 02:30:33,045
- I was just gonna say

02:30:33,045 --> 02:30:36,117
it's been a number of years since I was active in 15.4.

02:30:36,117 --> 02:30:37,950
So probably six years.

02:30:40,910 --> 02:30:42,843
- It could be around the time after I'd merged mainline.

02:30:42,843 --> 02:30:46,256
It was like 2012, we merged mainline, so.

02:30:46,256 --> 02:30:50,011
- So at that point, it was quite active.

02:30:50,011 --> 02:30:52,745
And I'm just wondering is 15.4 still,

02:30:52,745 --> 02:30:54,597
does it still have a lot of momentum?

02:30:54,597 --> 02:30:56,666
Are people starting to lean more towards BLE,

02:30:56,666 --> 02:30:58,278
especially with BLE Mesh coming out?

02:30:58,278 --> 02:31:00,804
- So I think the movement is more towards

02:31:00,804 --> 02:31:03,168
BLE mesh and stuff like that.

02:31:03,168 --> 02:31:06,404
The problem is to get momentum behind that

02:31:06,404 --> 02:31:08,987
without any real use cases that

02:31:10,346 --> 02:31:12,320
as a user at home would do

02:31:12,320 --> 02:31:13,216
or a company would do.

02:31:13,216 --> 02:31:15,455
I mean the big use case for 15.4 have been Zigbee,

02:31:15,455 --> 02:31:16,969
and nowadays, there is Thread.

02:31:16,969 --> 02:31:17,893
So that was one of the reasons

02:31:17,893 --> 02:31:19,240
why I've been talking to them so much.

02:31:19,240 --> 02:31:20,663
Because I was hoping that they could like

02:31:20,663 --> 02:31:23,194
find a good way that we both could work on something

02:31:23,194 --> 02:31:25,173
that is actually interesting.

02:31:25,173 --> 02:31:28,088
But that didn't really work out well.

02:31:28,088 --> 02:31:31,328
So partly, I think that's also to blame on our side

02:31:31,328 --> 02:31:34,553
because they're not making enough like PR about it,

02:31:34,553 --> 02:31:36,357
bring it out, bring new stuff out.

02:31:36,357 --> 02:31:38,121
But it's, as I said, the time is limited

02:31:38,121 --> 02:31:40,954
on what I can do on that and yeah.

02:31:41,847 --> 02:31:44,336
So we're making progress but-- - Are you asking about

02:31:44,336 --> 02:31:45,508
the Linux activity

02:31:45,508 --> 02:31:48,188
or are you asking about the industry activity?

02:31:48,188 --> 02:31:49,882
- I was, I meant Linux activity

02:31:49,882 --> 02:31:51,357
and specifically but-- - Okay.

02:31:51,357 --> 02:31:53,031
- I, just like you asked there,

02:31:53,031 --> 02:31:55,663
I assumed that I know that you assumed,

02:31:55,663 --> 02:31:58,921
as you mentioned there was Zigbee IP.

02:31:58,921 --> 02:32:01,398
Is that gaining any traction?

02:32:01,398 --> 02:32:06,065
- No, Zigbee is not going very many places very quickly.

02:32:08,143 --> 02:32:11,226
But 15.4 in Industrial IoT is growing

02:32:12,809 --> 02:32:17,211
but it's very well hidden because it's very

02:32:17,211 --> 02:32:20,324
vertically integrated under trade names, right?

02:32:20,324 --> 02:32:22,208
- Yeah, so there's a wild-at-heart,

02:32:22,208 --> 02:32:24,097
WirelessHART protocol there

02:32:24,097 --> 02:32:27,765
that keeps on coming out in certain industries

02:32:27,765 --> 02:32:29,535
like oil and gas, where I have various

02:32:29,535 --> 02:32:31,950
conversations with large companies.

02:32:31,950 --> 02:32:35,104
There's more-- - WirelessHART is an example

02:32:35,104 --> 02:32:37,590
just that you understood, is an example

02:32:37,590 --> 02:32:39,757
of 15.4 with a mesh under.

02:32:40,741 --> 02:32:43,209
So it's layer two mesh rather than layer three.

02:32:43,209 --> 02:32:45,812
- And if I've correctly verified it also, beacon-enabled.

02:32:45,812 --> 02:32:47,452
So it would have like timing requirements

02:32:47,452 --> 02:32:49,422
but it's interesting for Industrial I/O

02:32:49,422 --> 02:32:51,381
but complicated on the Linux side, so.

02:32:51,381 --> 02:32:53,299
- Right, I mean, that is as I said,

02:32:53,299 --> 02:32:54,868
it's an agenda takes you to figure out

02:32:54,868 --> 02:32:56,617
what we can do there but it would be good

02:32:56,617 --> 02:32:58,847
to have more use cases from the industry

02:32:58,847 --> 02:33:01,019
to see if we can actually reserve them

02:33:01,019 --> 02:33:02,522
as what we have right now,

02:33:02,522 --> 02:33:04,672
or if you can serve it at all.

02:33:04,672 --> 02:33:05,903
Because I mean if you're not able

02:33:05,903 --> 02:33:08,144
to make the timing requirement they need,

02:33:08,144 --> 02:33:10,120
then we can't offer them anything.

02:33:10,120 --> 02:33:12,885
- Well and I believe the WirelessHART stuff

02:33:12,885 --> 02:33:15,438
is mostly open as far as I could tell

02:33:15,438 --> 02:33:18,079
but I couldn't actually find a open source

02:33:18,079 --> 02:33:20,377
implementation of it.

02:33:20,377 --> 02:33:23,052
But I can quite happily chat with you about

02:33:23,052 --> 02:33:26,719
that afterwards 'cause I know a number of...

02:33:27,838 --> 02:33:28,874
- [Stefan] That wasn't what you said?

02:33:28,874 --> 02:33:31,957
- No, Wireless H-A-R-T.

02:33:32,793 --> 02:33:34,935
I put a note about it further up.

02:33:34,935 --> 02:33:37,695
- I mean it's also in the big slides I uploaded.

02:33:37,695 --> 02:33:40,045
So that's really is a reduced set to like five slides.

02:33:40,045 --> 02:33:41,229
- Yeah. - If you want the big one

02:33:41,229 --> 02:33:42,795
I uploaded to the site, it has WirelessHART

02:33:42,795 --> 02:33:44,967
mentioned as well, so there's just more in there.

02:33:44,967 --> 02:33:48,662
- So it's likely if you live in the US or Canada

02:33:48,662 --> 02:33:53,139
that your electric, smart electric meter is 15.4.

02:33:53,139 --> 02:33:55,109
It's unfortunately unlikely that it's encrypted

02:33:55,109 --> 02:33:59,105
even though the, even though if you ask your utility,

02:33:59,105 --> 02:34:01,789
they will swear they are FP encrypted systems

02:34:01,789 --> 02:34:03,337
but it's, the evidence is the vendors

02:34:03,337 --> 02:34:06,581
didn't really do that and no one checked.

02:34:06,581 --> 02:34:09,726
But and the water meters are the ones,

02:34:09,726 --> 02:34:11,504
are also from what I can see,

02:34:11,504 --> 02:34:12,733
they have the 20-year batteries,

02:34:12,733 --> 02:34:15,733
and they wake up once a day or last.

02:34:16,659 --> 02:34:19,926
And those seem to be, they may not be IP

02:34:19,926 --> 02:34:21,343
but they're 15.4.

02:34:22,770 --> 02:34:24,402
- [Man] Is that Wison or is that something else?

02:34:24,402 --> 02:34:27,387
- So yeah, Wison is for the metering is the space,

02:34:27,387 --> 02:34:30,438
and many of those are using 15.4 with the G5,

02:34:30,438 --> 02:34:32,175
which means they get a two-K packet,

02:34:32,175 --> 02:34:34,372
which is luxurious, right?

02:34:34,372 --> 02:34:37,001
- Yeah, it was also something I didn't say in the beginning.

02:34:37,001 --> 02:34:37,834
- [Man] They have power.

02:34:37,834 --> 02:34:40,848
- Yeah, there are extensions to like the 127 bytes.

02:34:40,848 --> 02:34:42,340
That's the original MTU size.

02:34:42,340 --> 02:34:45,847
There are extension to the specification for that.

02:34:45,847 --> 02:34:49,293
Okay, so time's over, so thank you.

02:34:49,293 --> 02:34:50,126
- If there's any more question,

02:34:50,126 --> 02:34:51,971
we'll take in one more but then...

02:34:51,971 --> 02:34:52,883
- All right, go.

02:34:52,883 --> 02:34:54,818
- But we're gonna need somebody to take notes for us.

02:34:54,818 --> 02:34:57,735
(speaking faintly)

02:34:58,641 --> 02:35:00,400
- Again, actually we have machine

02:35:00,400 --> 02:35:03,400
because your machine, computer.

02:35:03,400 --> 02:35:05,792
You need a computer for the presentation as well.

02:35:05,792 --> 02:35:07,459
You can do one more.

02:35:08,681 --> 02:35:11,181
Last question before Stefan...

02:35:15,594 --> 02:35:16,427
- All right, thank you.

02:35:16,427 --> 02:35:20,215
(audience applauding)

02:35:20,215 --> 02:35:23,298
(chattering faintly)

02:35:32,459 --> 02:35:34,289
- Oh I see, you've been projecting to Etherpad,

02:35:34,289 --> 02:35:35,122
that's the point.

02:35:35,122 --> 02:35:35,955
- [Man] If you're still looking for the Etherpad,

02:35:35,955 --> 02:35:36,888
just pull it up on the--

02:35:36,888 --> 02:35:38,084
- [Man] Oh sorry.

02:35:38,084 --> 02:35:40,296
- [Man] Pull it up on the IP address,

02:35:40,296 --> 02:35:41,503
I mean that not IP address.

02:35:41,503 --> 02:35:45,753
- Let's click on the bucket. - You know what I mean.

02:35:47,850 --> 02:35:48,975
- [Man] I don't know, can you help me

02:35:48,975 --> 02:35:50,952
how to log in the www?

02:35:50,952 --> 02:35:54,035
(chattering faintly)

02:35:56,989 --> 02:35:58,572
- Oh, is it really?

02:36:00,975 --> 02:36:02,397
The port, where's the port?

02:36:02,397 --> 02:36:05,480
(chattering faintly)

02:36:22,849 --> 02:36:23,858
- Go speak.

02:36:23,858 --> 02:36:26,164
- Test, test, one, two, three, okay?

02:36:26,164 --> 02:36:29,414
- It's good, put it in your arm pocket.

02:36:37,026 --> 02:36:38,493
- So I'm Jason Kridner.

02:36:38,493 --> 02:36:41,475
I'm a cofounder of BeagleBoard.org.

02:36:41,475 --> 02:36:44,066
Andrew Fustini serves on the board with me.

02:36:44,066 --> 02:36:46,568
And Chris Friedt is here.

02:36:46,568 --> 02:36:50,230
We were the organizers of this microconference.

02:36:50,230 --> 02:36:51,606
But we wanna talk about some of the ideas

02:36:51,606 --> 02:36:54,064
that we were trying to pull together

02:36:54,064 --> 02:36:56,564
to try to improve IoT and IIO,

02:37:00,010 --> 02:37:03,833
and the software development experience for this.

02:37:03,833 --> 02:37:06,583
And we feel like Greybus is like,

02:37:07,492 --> 02:37:09,268
if there ever was a silver bullet,

02:37:09,268 --> 02:37:11,935
it you know, you hate to declare

02:37:13,795 --> 02:37:15,241
something like that but oh--

02:37:15,241 --> 02:37:17,987
- [Man] You can put the display on.

02:37:17,987 --> 02:37:21,404
- Yeah, you have to plug in first, right?

02:37:23,397 --> 02:37:26,480
For the Etherpad, just go to the URL.

02:37:29,466 --> 02:37:31,003
- Please log in.

02:37:31,003 --> 02:37:33,006
- It's not gonna be showing.

02:37:33,006 --> 02:37:36,256
So Greybus is a bit of a silver bullet.

02:37:37,891 --> 02:37:41,391
And you know, we argue that in the future.

02:37:45,586 --> 02:37:49,336
But you look at something like USB subsystem,

02:37:50,440 --> 02:37:52,914
everything works magically, right?

02:37:52,914 --> 02:37:56,741
You connect a device, you interrogate the device

02:37:56,741 --> 02:37:59,092
from your host, you ask it what it is.

02:37:59,092 --> 02:38:01,024
The device tells it what it is,

02:38:01,024 --> 02:38:04,395
and lo and behold, it just works.

02:38:04,395 --> 02:38:07,546
And if you look at all the crazy fun stuff

02:38:07,546 --> 02:38:10,999
that all of the IoT sensors actually use.

02:38:10,999 --> 02:38:12,197
There are things like I-squared-C,

02:38:12,197 --> 02:38:15,135
and SPI, and GPIO, and all these non-discoverable buses,

02:38:15,135 --> 02:38:17,472
and all these things that we have to suffer

02:38:17,472 --> 02:38:20,269
with device tree because of--

02:38:20,269 --> 02:38:22,351
(member of audience speaking faintly)

02:38:22,351 --> 02:38:25,067
- Yeah, if Frank would just give it to me,

02:38:25,067 --> 02:38:28,496
the overlays and the kernel dynamic overlays in the kernel,

02:38:28,496 --> 02:38:30,494
my life would be so much better.

02:38:30,494 --> 02:38:32,607
(member of audience speaking faintly)

02:38:32,607 --> 02:38:36,357
- Well, boot, anyway, he's not given me that.

02:38:38,003 --> 02:38:41,000
So we don't have the name of device tree overlays.

02:38:41,000 --> 02:38:43,619
We have no way to figure out what's there

02:38:43,619 --> 02:38:48,114
and so you're just kind of, you're stuck, right?

02:38:48,114 --> 02:38:52,382
And Greybus all makes this problem magically go away

02:38:52,382 --> 02:38:57,359
because Greybus now gives me probable, discoverable buses

02:38:57,359 --> 02:38:59,043
for embedded peripherals, right?

02:38:59,043 --> 02:39:03,301
So I'm imagining a couple of microcontrollers in there.

02:39:03,301 --> 02:39:04,909
You talk to 'em over some mechanism.

02:39:04,909 --> 02:39:06,186
I have it drawn as a UART.

02:39:06,186 --> 02:39:08,406
That's really doesn't really matter.

02:39:08,406 --> 02:39:10,847
And you don't even necessarily need a microcontroller

02:39:10,847 --> 02:39:12,395
in that but on the other side,

02:39:12,395 --> 02:39:13,821
you've got a microcontroller, it's going out

02:39:13,821 --> 02:39:16,698
and actually talking to those physical buses.

02:39:16,698 --> 02:39:18,871
You connect a device, you probe what it is.

02:39:18,871 --> 02:39:22,348
It sends a manifest file and boom,

02:39:22,348 --> 02:39:24,456
and it just works, all right.

02:39:24,456 --> 02:39:25,536
All that simple.

02:39:25,536 --> 02:39:28,776
- [Man] Greybus implements (speaking faintly).

02:39:28,776 --> 02:39:32,218
- Effectively and in a more secure way, right.

02:39:32,218 --> 02:39:34,662
So 'cause it limits you to what buses you're doing, right?

02:39:34,662 --> 02:39:38,245
So you can only load certain drivers, yeah.

02:39:39,680 --> 02:39:42,326
All right, so Greybus is going to give you

02:39:42,326 --> 02:39:45,137
device tree overlays but in a secure way,

02:39:45,137 --> 02:39:46,980
limited to particular buses,

02:39:46,980 --> 02:39:49,632
and now, the other magic is it,

02:39:49,632 --> 02:39:53,527
it makes the transport of those buses arbitrarily, right?

02:39:53,527 --> 02:39:55,964
So you can send it across TCP/IP.

02:39:55,964 --> 02:39:59,131
Alexander was showing earlier you can,

02:40:00,068 --> 02:40:02,657
so it doesn't matter how you hook it up, right, so.

02:40:02,657 --> 02:40:03,528
- It doesn't make sense to use it

02:40:03,528 --> 02:40:05,583
if you're not going over socket right?

02:40:05,583 --> 02:40:08,166
Like if it's in on the SOC, no?

02:40:09,963 --> 02:40:11,230
- Does it make sense to use it

02:40:11,230 --> 02:40:13,412
even if it's on the same SOC?

02:40:13,412 --> 02:40:16,612
- [Man] But it's not discoverable.

02:40:16,612 --> 02:40:19,310
- Yes, so we do have an example of where--

02:40:19,310 --> 02:40:20,143
- We do.

02:40:20,143 --> 02:40:21,798
- It is on the same board where it actually

02:40:21,798 --> 02:40:23,030
is useful in that use case.

02:40:23,030 --> 02:40:24,263
- Is it the catalyst?

02:40:24,263 --> 02:40:26,197
I want these device tree overlays.

02:40:26,197 --> 02:40:27,795
So if I can't use device tree overlays,

02:40:27,795 --> 02:40:29,920
do we use Greybus for things like this.

02:40:29,920 --> 02:40:31,074
- I think that the next thing

02:40:31,074 --> 02:40:32,114
I'm gonna talk-- - Seems a bit silly, yeah.

02:40:32,114 --> 02:40:33,596
- Well, the next thing we're gonna talk about

02:40:33,596 --> 02:40:36,614
is the fact that it's kind of unfortunate right now

02:40:36,614 --> 02:40:38,923
that you are, you have a fixed device tree

02:40:38,923 --> 02:40:40,301
when you boot up, since we're doing overlays

02:40:40,301 --> 02:40:43,008
in the bootloader, and for rapid prototyping,

02:40:43,008 --> 02:40:44,183
that can be annoying.

02:40:44,183 --> 02:40:47,963
So Greybus actually running on the local system

02:40:47,963 --> 02:40:50,764
is one solution for that in I think,

02:40:50,764 --> 02:40:51,835
well, we're gonna talk about Nexus,

02:40:51,835 --> 02:40:53,647
our Google Summer of Code student.

02:40:53,647 --> 02:40:55,202
- Well now, we actually have some more slides

02:40:55,202 --> 02:40:56,035
before we get to that.

02:40:56,035 --> 02:40:56,910
We can jump ahead to it though.

02:40:56,910 --> 02:41:00,101
We'll come back to the experience.

02:41:00,101 --> 02:41:01,231
You know what, I'm not going to.

02:41:01,231 --> 02:41:02,644
- Yeah, don't. - Because this is really

02:41:02,644 --> 02:41:03,838
kinda putting forward the case.

02:41:03,838 --> 02:41:08,285
But we will get to the GBSIM base implementation, right?

02:41:08,285 --> 02:41:10,868
So this is what we're imagining

02:41:12,091 --> 02:41:13,181
and implementing as kind of,

02:41:13,181 --> 02:41:15,353
as being the experience for something.

02:41:15,353 --> 02:41:19,367
So here, we've made the transport wireless, right.

02:41:19,367 --> 02:41:22,840
So whatever the wireless is, right,

02:41:22,840 --> 02:41:24,689
we've got IP transport.

02:41:24,689 --> 02:41:25,809
So we can now make it wireless.

02:41:25,809 --> 02:41:28,500
We have a Linux box, right,

02:41:28,500 --> 02:41:31,417
represented as a small open source,

02:41:32,563 --> 02:41:34,074
Open Hardware Linux computer

02:41:34,074 --> 02:41:37,256
with some wireless gateway information, right.

02:41:37,256 --> 02:41:40,792
You're using just Linux command line.

02:41:40,792 --> 02:41:43,788
And you've got a Linux gateway,

02:41:43,788 --> 02:41:46,845
and a small microcontroller based device

02:41:46,845 --> 02:41:49,462
with IoT sensors in it, right?

02:41:49,462 --> 02:41:52,945
And so the experiences, you tell them

02:41:52,945 --> 02:41:54,948
to connect to each other.

02:41:54,948 --> 02:41:56,988
Physical proximity but somehow,

02:41:56,988 --> 02:41:59,432
you make this connection securely

02:41:59,432 --> 02:42:01,911
so that you know that this guy wants to trust him,

02:42:01,911 --> 02:42:02,970
and he wants to trust him,

02:42:02,970 --> 02:42:04,899
and we're all happy and glorious,

02:42:04,899 --> 02:42:06,732
and they just connect.

02:42:08,743 --> 02:42:12,730
The device, the sensors describe itself

02:42:12,730 --> 02:42:15,919
to the Linux computer and bam,

02:42:15,919 --> 02:42:18,024
it's probably hard to read this writing from the back,

02:42:18,024 --> 02:42:20,857
but and I knew IIO device has been

02:42:23,299 --> 02:42:26,887
instantiated just because we said there's one out there,

02:42:26,887 --> 02:42:28,314
and we trust it, and now,

02:42:28,314 --> 02:42:29,228
all the files are there.

02:42:29,228 --> 02:42:32,611
We have, you can use libiio to now talk to it reliably,

02:42:32,611 --> 02:42:36,606
and it's self-describing, all those wonderful things.

02:42:36,606 --> 02:42:39,689
And it just works in computer distros

02:42:41,407 --> 02:42:45,004
and anyway, this is the idea, right.

02:42:45,004 --> 02:42:48,484
This is what I think the Greybus magic

02:42:48,484 --> 02:42:50,157
can give to us, all right.

02:42:50,157 --> 02:42:52,538
So thank you, Google, for paying

02:42:52,538 --> 02:42:55,390
whatever that they did for getting that developed

02:42:55,390 --> 02:42:58,857
and then, not making the phones.

02:42:58,857 --> 02:43:00,985
(member of audience speaking faintly)

02:43:00,985 --> 02:43:03,999
- Yeah yeah, but they can't replace the processor, right.

02:43:03,999 --> 02:43:06,040
You can only add on the--

02:43:06,040 --> 02:43:07,263
(member of audience speaking faintly)

02:43:07,263 --> 02:43:10,243
- Yeah (laughs).

02:43:10,243 --> 02:43:11,786
Right, so there is this,

02:43:11,786 --> 02:43:14,182
you get all these non-discoverable buses

02:43:14,182 --> 02:43:15,747
that are automatic that through provisioning.

02:43:15,747 --> 02:43:19,986
But all of these crazy, ugly, user space,

02:43:19,986 --> 02:43:22,319
hack, Python drivers, right,

02:43:23,159 --> 02:43:24,868
this to me is the real value proposition.

02:43:24,868 --> 02:43:28,447
It's just that we gotta make a simpler way

02:43:28,447 --> 02:43:31,026
to solve those end user problems, right,

02:43:31,026 --> 02:43:34,107
so that it's not easy as to just Google

02:43:34,107 --> 02:43:37,440
random SPI, Python SpiDev driver, right.

02:43:38,436 --> 02:43:40,472
But it's gonna be a simpler experience.

02:43:40,472 --> 02:43:43,769
And because the code lives in the Linux kernel,

02:43:43,769 --> 02:43:45,934
there's no need to write code on a microcontroller,

02:43:45,934 --> 02:43:48,299
and then try to figure out where to paste your code

02:43:48,299 --> 02:43:50,350
into their cut-and-paste code

02:43:50,350 --> 02:43:51,778
to try to change how you're gonna move

02:43:51,778 --> 02:43:53,148
that data around, right?

02:43:53,148 --> 02:43:56,274
It's just using a standard device driver model

02:43:56,274 --> 02:43:59,480
and maintain the code, one place to find it, right.

02:43:59,480 --> 02:44:03,219
Linus Torvalds's tree, right, the one.

02:44:03,219 --> 02:44:04,719
And it just works.

02:44:06,481 --> 02:44:09,138
Maintenance, right, this is actually maintained.

02:44:09,138 --> 02:44:11,176
You have a place to send bugs, right.

02:44:11,176 --> 02:44:14,176
We have a process for getting fixes.

02:44:15,884 --> 02:44:19,376
And for a lot of users, they either

02:44:19,376 --> 02:44:20,598
just wanna write their Python code,

02:44:20,598 --> 02:44:22,655
let them just write their Python code.

02:44:22,655 --> 02:44:26,083
It's going to be independent of the actual sensor

02:44:26,083 --> 02:44:27,031
that they're using, right.

02:44:27,031 --> 02:44:28,787
If they're using accelerometer data,

02:44:28,787 --> 02:44:31,234
they use their IIO interfaces for accelerometer data,

02:44:31,234 --> 02:44:33,578
and they don't have to worry about the specifics

02:44:33,578 --> 02:44:37,221
of the particular accelerometer they're using, right?

02:44:37,221 --> 02:44:41,619
They just need to pick the right one for their application.

02:44:41,619 --> 02:44:43,850
What am I missing here?

02:44:43,850 --> 02:44:45,905
- Well and then, also the remote node

02:44:45,905 --> 02:44:48,156
that you don't have to do any development

02:44:48,156 --> 02:44:49,969
on the microcontroller firmware.

02:44:49,969 --> 02:44:51,804
- All right, so write it once, right.

02:44:51,804 --> 02:44:53,450
So there's one, so that's the number

02:44:53,450 --> 02:44:54,786
you have to learn how to write

02:44:54,786 --> 02:44:57,945
random new microcontroller firmware.

02:44:57,945 --> 02:45:00,952
- What if there is a bug on the microcontroller firmware?

02:45:00,952 --> 02:45:03,448
- Well, it'd be open source and you fix it.

02:45:03,448 --> 02:45:04,872
- Oh yeah, that's great, okay.

02:45:04,872 --> 02:45:07,625
So maybe act like a compatibility test suite

02:45:07,625 --> 02:45:11,441
would be a good idea to keep, maintain a list

02:45:11,441 --> 02:45:12,858
of devices, yeah?

02:45:13,971 --> 02:45:16,425
- I think that'd be fantastic working with

02:45:16,425 --> 02:45:18,055
an open source operating system

02:45:18,055 --> 02:45:20,536
and having a test suite,

02:45:20,536 --> 02:45:22,206
where we can do tests across.

02:45:22,206 --> 02:45:24,096
- I guess the point is that the developer

02:45:24,096 --> 02:45:25,441
on the Linux system doesn't need to do

02:45:25,441 --> 02:45:26,648
microcontroller firmware development

02:45:26,648 --> 02:45:29,501
'cause their remote microcontroller node

02:45:29,501 --> 02:45:31,956
is presenting itself over Greybus

02:45:31,956 --> 02:45:33,549
and describing what it has, right.

02:45:33,549 --> 02:45:37,460
So like you're implementing it in Zephyr.

02:45:37,460 --> 02:45:39,774
But like if I'm using the system,

02:45:39,774 --> 02:45:41,627
I don't care about that, it just,

02:45:41,627 --> 02:45:46,460
it's a remote node that is presenting itself over Greybus.

02:45:48,807 --> 02:45:52,140
- Yeah, so we're specifically looking at

02:45:53,156 --> 02:45:56,047
a kind of a pin header standard

02:45:56,047 --> 02:45:57,711
because there's not to say,

02:45:57,711 --> 02:46:00,889
standard is such a loose term and there's so many context.

02:46:00,889 --> 02:46:04,290
But there is these things called the,

02:46:04,290 --> 02:46:07,554
so mikroElektronika, a company out of Eastern Europe

02:46:07,554 --> 02:46:10,221
has built just this huge library

02:46:11,142 --> 02:46:15,318
of these sensor boards they called click boards, right.

02:46:15,318 --> 02:46:17,068
So sensors actuators.

02:46:18,374 --> 02:46:21,288
And the kinda magic is that they didn't limit

02:46:21,288 --> 02:46:23,939
their pin interface to just like four wires

02:46:23,939 --> 02:46:25,707
and just have like choose

02:46:25,707 --> 02:46:29,624
to have one of I-squared-C, or SPI, or whatnot.

02:46:30,805 --> 02:46:32,409
And they didn't like make their

02:46:32,409 --> 02:46:35,052
so form factor so small they couldn't fit

02:46:35,052 --> 02:46:38,348
a good amount of stuff onto a board.

02:46:38,348 --> 02:46:39,620
And they've managed to figure out

02:46:39,620 --> 02:46:42,532
how to just crank these boards out.

02:46:42,532 --> 02:46:45,519
They get them in pretty broad distribution.

02:46:45,519 --> 02:46:48,576
I think there are over 700 of their boards, right.

02:46:48,576 --> 02:46:49,680
I think they put out another,

02:46:49,680 --> 02:46:53,074
like one or two a week, or more of these boards.

02:46:53,074 --> 02:46:56,324
So you can probably find that the chip,

02:46:57,707 --> 02:47:00,013
the sensor chip that you want to play with

02:47:00,013 --> 02:47:01,128
in their library.

02:47:01,128 --> 02:47:03,867
And if not, it's not so hard to actually go

02:47:03,867 --> 02:47:06,079
and make your own because they give you

02:47:06,079 --> 02:47:09,128
all the standard stuff that you'd want to work with, right.

02:47:09,128 --> 02:47:10,632
So they give you the SPI bus.

02:47:10,632 --> 02:47:13,223
They give UARTs, they give you I-squared-C

02:47:13,223 --> 02:47:14,168
reset and interrupt.

02:47:14,168 --> 02:47:16,265
They give you an analog pin,

02:47:16,265 --> 02:47:18,556
PWM output pins, right.

02:47:18,556 --> 02:47:22,233
So it's kinda got all the fun embedded stuff

02:47:22,233 --> 02:47:25,228
on a little one-inch square interface

02:47:25,228 --> 02:47:27,173
that they can extend out for extra stuff

02:47:27,173 --> 02:47:28,051
if you need that.

02:47:28,051 --> 02:47:32,194
So they kind of figured out the right stuff

02:47:32,194 --> 02:47:33,444
to put on here.

02:47:34,538 --> 02:47:36,752
So rather than trying to reinvent it

02:47:36,752 --> 02:47:40,305
and make it another Pi head, BeagleBone cape,

02:47:40,305 --> 02:47:42,316
sort of thing, it's just pick something

02:47:42,316 --> 02:47:45,085
small and simple that just works.

02:47:45,085 --> 02:47:48,555
So I think this allows us to kind of,

02:47:48,555 --> 02:47:49,531
where is the other slide?

02:47:49,531 --> 02:47:51,552
These other slides are hidden.

02:47:51,552 --> 02:47:53,717
What's going on here?

02:47:53,717 --> 02:47:57,050
Nope, maybe that's just where we jumped.

02:48:00,200 --> 02:48:02,950
So yeah, I kinda threw myself off

02:48:04,412 --> 02:48:06,719
by thinking ahead some other slides here.

02:48:06,719 --> 02:48:09,719
But this is easy enough to work with

02:48:09,719 --> 02:48:11,302
the mikroBUS stuff.

02:48:13,950 --> 02:48:17,570
This is our Google Summer of Code stuff there.

02:48:17,570 --> 02:48:19,918
- And part of this is you can easily

02:48:19,918 --> 02:48:21,296
plug in different modules,

02:48:21,296 --> 02:48:24,198
and when you're plugging in different modules,

02:48:24,198 --> 02:48:27,064
but I mean right now, all you have to do,

02:48:27,064 --> 02:48:30,385
you have to go in and set the overlays

02:48:30,385 --> 02:48:33,082
in the bootloader and our Google Summer of Code

02:48:33,082 --> 02:48:36,291
students thought that was somewhat broke

02:48:36,291 --> 02:48:38,664
the rapid prototyping flow for him.

02:48:38,664 --> 02:48:42,296
So he thought of a way of using Greybus

02:48:42,296 --> 02:48:45,195
and GBSIM to have this workflow

02:48:45,195 --> 02:48:48,527
for when you insert the click modules in it.

02:48:48,527 --> 02:48:52,960
- So he wrote a Python script called insclick,

02:48:52,960 --> 02:48:57,768
which he had a little set of a JavaScript Object Notation

02:48:57,768 --> 02:49:01,516
kind of entries for the different sets of clicks.

02:49:01,516 --> 02:49:04,599
That included some templated manifest

02:49:08,199 --> 02:49:09,331
or Greybus manifest, right.

02:49:09,331 --> 02:49:13,676
So this says okay, I've got an I-squared-C device

02:49:13,676 --> 02:49:15,751
connected up and I'm just going to

02:49:15,751 --> 02:49:18,610
kind of replace what the device name is.

02:49:18,610 --> 02:49:20,025
So we created a, he's got a way

02:49:20,025 --> 02:49:22,090
to just kinda add in JavaScript Object Notations

02:49:22,090 --> 02:49:25,547
a new board entry for one of these new clicks.

02:49:25,547 --> 02:49:30,136
You run this Python script, let's say insclick,

02:49:30,136 --> 02:49:33,636
and it utilizes GBSIM to instantiate that.

02:49:35,408 --> 02:49:37,494
So this is a simulator that was written

02:49:37,494 --> 02:49:41,539
to test the hardware interfaces for Greybus.

02:49:41,539 --> 02:49:44,981
And so this already runs on the BeagleBone Black,

02:49:44,981 --> 02:49:48,045
and he got it to work on Pocket Beagle as well.

02:49:48,045 --> 02:49:51,719
So this just uses, implementation wise,

02:49:51,719 --> 02:49:54,048
just using that despite have a nice

02:49:54,048 --> 02:49:56,715
TC dev interfaces in user space.

02:49:57,743 --> 02:49:58,893
But it's presenting itself back

02:49:58,893 --> 02:50:01,633
to the kernel through Greybus.

02:50:01,633 --> 02:50:06,067
And so, all that becomes like self-describing

02:50:06,067 --> 02:50:09,583
probeable hardware that gets loaded automatically

02:50:09,583 --> 02:50:11,747
through the insclick interface.

02:50:11,747 --> 02:50:14,997
And so now, we're using standard stuff,

02:50:16,144 --> 02:50:20,086
and we're able to dynamically load drivers,

02:50:20,086 --> 02:50:21,519
connected up, you just say,

02:50:21,519 --> 02:50:24,092
which of the different click ports are connecting up to,

02:50:24,092 --> 02:50:25,701
and which click you're installing,

02:50:25,701 --> 02:50:28,701
and boom, it creates the interfaces.

02:50:29,708 --> 02:50:31,851
And even in his database, he's got some

02:50:31,851 --> 02:50:34,289
extra descriptors to try to tell you

02:50:34,289 --> 02:50:36,096
where the I/O interfaces show up

02:50:36,096 --> 02:50:38,646
for the different devices.

02:50:38,646 --> 02:50:41,593
So this is all, this is a pretty fun project for him.

02:50:41,593 --> 02:50:42,613
He even went to the next level

02:50:42,613 --> 02:50:46,539
of getting it to work in like a Microsoft MakeCode,

02:50:46,539 --> 02:50:49,355
where you can just drag and drop the click

02:50:49,355 --> 02:50:51,940
that you wanted to load the drivers for,

02:50:51,940 --> 02:50:53,992
and then the data would show up,

02:50:53,992 --> 02:50:54,825
and you could use it.

02:50:54,825 --> 02:50:55,845
And of course, it's really easy to see

02:50:55,845 --> 02:50:59,595
how they extend that to Node-RED for example.

02:51:01,305 --> 02:51:03,481
And that's sort of the developer environment we see

02:51:03,481 --> 02:51:05,985
is like you just see the different list

02:51:05,985 --> 02:51:07,649
of the devices that you want data from,

02:51:07,649 --> 02:51:09,517
grab them, and here comes the data,

02:51:09,517 --> 02:51:11,816
and then you can publish it through MQTT

02:51:11,816 --> 02:51:14,346
or whatever else you wanna do

02:51:14,346 --> 02:51:16,263
to work with your data.

02:51:17,994 --> 02:51:20,162
- And this brought back like the runtime flexibility

02:51:20,162 --> 02:51:22,112
that we had with the GateManager,

02:51:22,112 --> 02:51:26,070
which we've lost now that we do everything in U-Boot.

02:51:26,070 --> 02:51:27,689
- Yeah, Frank.

02:51:27,689 --> 02:51:30,689
(audience laughing)

02:51:31,980 --> 02:51:35,228
(member of audience speaking faintly)

02:51:35,228 --> 02:51:36,395
- Throw a box.

02:51:38,960 --> 02:51:42,611
- So I had two thoughts but I wanted to make sure

02:51:42,611 --> 02:51:46,076
I understand the click story right.

02:51:46,076 --> 02:51:49,909
Is there an MCU that would return the manifest

02:51:51,361 --> 02:51:52,712
or what, how is that?

02:51:52,712 --> 02:51:55,972
That's just because we have manifests on our local?

02:51:55,972 --> 02:51:56,805
- [Man] Something like this.

02:51:56,805 --> 02:51:57,638
- [Frank] So something like this

02:51:57,638 --> 02:51:58,891
running a little microcontroller.

02:51:58,891 --> 02:52:01,254
- Right, so yeah this is what we're using

02:52:01,254 --> 02:52:03,409
to do our prototyping.

02:52:03,409 --> 02:52:07,576
So there's a little, it's a CC1352 seven gigahertz

02:52:09,122 --> 02:52:11,789
and BLE-enabled microcontroller.

02:52:13,487 --> 02:52:16,139
And this is running Zephyr.

02:52:16,139 --> 02:52:18,472
So this, yeah this has the--

02:52:19,583 --> 02:52:20,827
- So that would be a thing that you'd talk to

02:52:20,827 --> 02:52:24,097
over IP, or Bluetooth, or something?

02:52:24,097 --> 02:52:25,791
- Yes, yep. - Okay, good.

02:52:25,791 --> 02:52:28,708
So I understood that part well now.

02:52:29,663 --> 02:52:31,467
So then, my other question is do you think

02:52:31,467 --> 02:52:34,859
that we could find a way to get manifests

02:52:34,859 --> 02:52:38,026
from other kinds of data card systems,

02:52:38,991 --> 02:52:41,296
whatever the names are these days.

02:52:41,296 --> 02:52:44,001
Like I can imagine somewhat you put a small

02:52:44,001 --> 02:52:46,584
E-squared prompt on an SPI bus,

02:52:47,462 --> 02:52:49,904
sorry, I2C lets us have multi-drop, right?

02:52:49,904 --> 02:52:50,737
- [Jason] Yes.

02:52:50,737 --> 02:52:53,904
- So I2C bus and all of your high hats

02:52:55,441 --> 02:52:57,311
or whatever they're called could actually

02:52:57,311 --> 02:53:01,924
self-describe themselves that way in that manifest.

02:53:01,924 --> 02:53:05,091
- So the thing is this, if the sensors

02:53:05,944 --> 02:53:09,694
are connected up to the bus of the Pi itself,

02:53:11,349 --> 02:53:13,682
then you would need something like GBSIM

02:53:13,682 --> 02:53:14,712
still implemented in order

02:53:14,712 --> 02:53:16,471
to do the resource mapping, right?

02:53:16,471 --> 02:53:17,771
- [Man] Right.

02:53:17,771 --> 02:53:20,946
- So it yes, you could do that.

02:53:20,946 --> 02:53:23,432
But the far more interesting I think

02:53:23,432 --> 02:53:27,392
ultimate use case is having a small affordable

02:53:27,392 --> 02:53:29,909
thing that looks a little bit like this

02:53:29,909 --> 02:53:31,996
and connecting that up to your Raspberry Pi

02:53:31,996 --> 02:53:34,240
wirelessly and-- - Well, I actually

02:53:34,240 --> 02:53:36,309
have severe doubts about that part,

02:53:36,309 --> 02:53:37,300
okay, okay. - Okay.

02:53:37,300 --> 02:53:40,841
- So that's a huge big industry problem.

02:53:40,841 --> 02:53:45,271
And what you described is I'm intimately involved in it.

02:53:45,271 --> 02:53:49,179
It's not a trivial problem at scale, okay.

02:53:49,179 --> 02:53:52,262
But in for the people that are having

02:53:53,354 --> 02:53:54,799
whether their BeagleBones or whatever

02:53:54,799 --> 02:53:57,106
with some variety of shields

02:53:57,106 --> 02:53:59,665
or whatever they're called attached to them,

02:53:59,665 --> 02:54:02,170
having silently a standard that would allow us

02:54:02,170 --> 02:54:06,306
to have to do self-describe without device tree overlays

02:54:06,306 --> 02:54:08,778
and all these other stuff, I think would be

02:54:08,778 --> 02:54:11,859
in itself a major win that way.

02:54:11,859 --> 02:54:13,776
Even if what you meant was that I had

02:54:13,776 --> 02:54:16,224
to take my existing shield,

02:54:16,224 --> 02:54:17,772
and then stick another shield on top of it

02:54:17,772 --> 02:54:20,087
that just has the E-squared prompt on it

02:54:20,087 --> 02:54:23,041
to describe the existing one that I bought.

02:54:23,041 --> 02:54:25,535
- So we, I mean, yeah in the Beagle world,

02:54:25,535 --> 02:54:29,209
we've, the way we have been approaching that

02:54:29,209 --> 02:54:32,376
is with I-squared-C E prompt is on our routing boards.

02:54:32,376 --> 02:54:34,078
We put descriptors on there,

02:54:34,078 --> 02:54:37,732
and then we look into a table of device tree overlays,

02:54:37,732 --> 02:54:41,612
and they'll load those at U-Boot to describe the hardware.

02:54:41,612 --> 02:54:43,586
Maintaining that set of device tree overlays

02:54:43,586 --> 02:54:45,621
is a little challenging but if you were--

02:54:45,621 --> 02:54:46,734
- But if you've got the descriptor,

02:54:46,734 --> 02:54:49,642
you could delay that and do that in user space,

02:54:49,642 --> 02:54:50,689
couldn't you now?

02:54:50,689 --> 02:54:54,113
- The problem is that device tree overlay support

02:54:54,113 --> 02:54:55,948
isn't supported in the kernel.

02:54:55,948 --> 02:54:58,334
So we do support an out-of-tree patch

02:54:58,334 --> 02:55:01,060
to apply device tree overlays

02:55:01,060 --> 02:55:04,310
in at runtime, at Linux kernel runtime.

02:55:05,523 --> 02:55:07,940
But that's not upstream and--

02:55:08,936 --> 02:55:11,049
- So but GBSIM lets you know

02:55:11,049 --> 02:55:12,368
you don't have that, doesn't it?

02:55:12,368 --> 02:55:14,073
- Right, right, because Greybus is upstream,

02:55:14,073 --> 02:55:16,901
and you could just run GBSIM in user space.

02:55:16,901 --> 02:55:19,416
And you allows it to in-run that problem.

02:55:19,416 --> 02:55:21,715
- Right. - The challenge now,

02:55:21,715 --> 02:55:23,761
for most small IoT devices, it probably doesn't matter.

02:55:23,761 --> 02:55:25,036
The challenge now is GBSIM

02:55:25,036 --> 02:55:28,154
that's sitting there running in user space.

02:55:28,154 --> 02:55:30,306
And it's essentially taking what would be

02:55:30,306 --> 02:55:33,437
kernel, I-squared-C and SPI accesses,

02:55:33,437 --> 02:55:34,837
and moving them into user space

02:55:34,837 --> 02:55:38,004
and doing SpiDev and I2C Dev accesses.

02:55:39,352 --> 02:55:43,230
From a, at least it makes the top level of code

02:55:43,230 --> 02:55:47,199
kinda clean because it's using the kernel interfaces.

02:55:47,199 --> 02:55:51,516
But now you're, you're kinda burying the problem in GBSIM.

02:55:51,516 --> 02:55:54,153
And ultimately, like getting rid of GBSIM

02:55:54,153 --> 02:55:57,241
and making GBSIM an abstraction layer

02:55:57,241 --> 02:55:59,574
in the kernel would be cool.

02:56:00,417 --> 02:56:03,000
Like that would be really cool.

02:56:03,992 --> 02:56:06,432
But I think, so I'm really interested in why you think

02:56:06,432 --> 02:56:08,849
the wireless network adapters

02:56:10,597 --> 02:56:12,430
in order to expose these interfaces

02:56:12,430 --> 02:56:14,884
won't be something that works at scale.

02:56:14,884 --> 02:56:15,950
- I think there's someone in the back.

02:56:15,950 --> 02:56:17,301
- [Man] Oh, I was just gonna, you just said

02:56:17,301 --> 02:56:18,833
GBSIM abstraction layer, so I was gonna

02:56:18,833 --> 02:56:20,088
ask you how will that work?

02:56:20,088 --> 02:56:20,921
- Oh.

02:56:20,921 --> 02:56:21,857
- Because wouldn't you need the SPI

02:56:21,857 --> 02:56:23,484
and I-squared-C driver in the kernel anyway.

02:56:23,484 --> 02:56:24,987
And then, why would you use Greybus

02:56:24,987 --> 02:56:28,038
because that can just talk to the peripheral?

02:56:28,038 --> 02:56:32,621
- Right, so you still need something to tell the kernel

02:56:35,828 --> 02:56:38,875
that the device is there because it's not probeable, right.

02:56:38,875 --> 02:56:41,615
So this is one of the fundamental problem

02:56:41,615 --> 02:56:44,245
for solving here with Greybus is that

02:56:44,245 --> 02:56:48,724
we've now got this insclick routine, like script,

02:56:48,724 --> 02:56:53,057
in Python that you could say, "The device is there."

02:56:54,415 --> 02:56:56,311
And you tell GBSIM to essentially go

02:56:56,311 --> 02:56:57,946
and provide the manifest to the kernel

02:56:57,946 --> 02:57:01,583
and then the device driver comes up.

02:57:01,583 --> 02:57:04,331
So it's that hook that tells the kernel

02:57:04,331 --> 02:57:05,727
that the device is there.

02:57:05,727 --> 02:57:07,225
- Yeah, but your transport also changes

02:57:07,225 --> 02:57:08,744
to come back to user space

02:57:08,744 --> 02:57:11,404
and then go through I-squared-C or SPI, right?

02:57:11,404 --> 02:57:13,948
- [Jason] Right, which is definitely less than ideal.

02:57:13,948 --> 02:57:15,334
That is why this is-- - Yes.

02:57:15,334 --> 02:57:19,520
- That's sort of the development vehicle.

02:57:19,520 --> 02:57:21,879
It's not so much where we're looking to go

02:57:21,879 --> 02:57:23,154
for a deployment, right?

02:57:23,154 --> 02:57:25,936
And that's why I'm really interested in Michael's comment

02:57:25,936 --> 02:57:27,315
that he doesn't think it can scale

02:57:27,315 --> 02:57:31,064
because if it doesn't scale, I've got a bigger problem.

02:57:31,064 --> 02:57:34,147
- Yeah, the multiple syscall overhead

02:57:35,327 --> 02:57:39,486
is actually kind of dwarfed by the latency

02:57:39,486 --> 02:57:41,260
of the transport and all the cases.

02:57:41,260 --> 02:57:44,356
So if you've got 802.15.4, you're not really

02:57:44,356 --> 02:57:47,710
transmitting tons of data at a really fast rate.

02:57:47,710 --> 02:57:50,764
So a few extra syscalls isn't really gonna hurt.

02:57:50,764 --> 02:57:55,107
- Anything running, anything with a CPU running Linux,

02:57:55,107 --> 02:57:58,357
even at 20 megahertz is probably right?

02:58:00,631 --> 02:58:02,236
I'm just saying, well, that really is slow now,

02:58:02,236 --> 02:58:04,131
it can be really slow these days too, again, right?

02:58:04,131 --> 02:58:07,099
Even at a relatively, you would think pedestrian pace,

02:58:07,099 --> 02:58:09,039
is probably doing all that stuff

02:58:09,039 --> 02:58:12,264
way faster than the data I/O is ever gonna do it.

02:58:12,264 --> 02:58:13,969
So those abstraction layers

02:58:13,969 --> 02:58:15,857
are probably not worth really fixing

02:58:15,857 --> 02:58:20,070
unless someone is concerned about battery power

02:58:20,070 --> 02:58:21,385
in that thing.

02:58:21,385 --> 02:58:25,218
And at which point, it's worth someone to fix.

02:58:27,312 --> 02:58:29,440
- I would be more concerned about some drivers,

02:58:29,440 --> 02:58:32,163
in particular, in the I-squared-C field,

02:58:32,163 --> 02:58:34,656
relying on particular timing on the device.

02:58:34,656 --> 02:58:37,310
As you mean that this is like a very simple

02:58:37,310 --> 02:58:39,752
command-response protocol, Greybus.

02:58:39,752 --> 02:58:41,944
So that would have a delay between like

02:58:41,944 --> 02:58:44,111
two subsequent operations.

02:58:45,383 --> 02:58:47,044
Where you know like some device

02:58:47,044 --> 02:58:50,430
might enter Sleep modes or something like in between.

02:58:50,430 --> 02:58:52,838
- I agree, I think that's there are,

02:58:52,838 --> 02:58:55,960
I mean Greybus was initially designed to work on the wire.

02:58:55,960 --> 02:59:00,259
So immediate, almost immediate reaction times.

02:59:00,259 --> 02:59:02,069
I would say that made it possible and proven,

02:59:02,069 --> 02:59:05,652
and the future would be to schedule things.

02:59:06,633 --> 02:59:08,268
- [Man] Like in batches.

02:59:08,268 --> 02:59:10,027
- Yes, exactly yeah.

02:59:10,027 --> 02:59:13,285
I think there was some time synchronization code

02:59:13,285 --> 02:59:15,518
that was originally in the Greybus.

02:59:15,518 --> 02:59:17,768
- Greg just walked out, so.

02:59:18,904 --> 02:59:19,737
- All right.

02:59:19,737 --> 02:59:21,258
- Oh, he needed some hardware. - Andreas, all right.

02:59:21,258 --> 02:59:22,806
Alexander might know.

02:59:22,806 --> 02:59:24,931
- Yeah, I think there was some time

02:59:24,931 --> 02:59:27,766
synchronization code originally in Greybus

02:59:27,766 --> 02:59:30,344
but I'm not sure if it's quite active anymore.

02:59:30,344 --> 02:59:31,964
- [Man] That it was a hardware specification?

02:59:31,964 --> 02:59:32,797
- Yes.

02:59:34,495 --> 02:59:36,689
- We removed it from the kernel.

02:59:36,689 --> 02:59:40,042
It was too much of a prototype hacking thing

02:59:40,042 --> 02:59:42,724
to yeah, to go into mainline.

02:59:42,724 --> 02:59:43,557
- Okay.

02:59:46,581 --> 02:59:49,301
- Well, one thing I guess you really talked about

02:59:49,301 --> 02:59:51,959
is the fact that we're working on this prototype

02:59:51,959 --> 02:59:54,876
to have this functionality working.

02:59:57,670 --> 03:00:02,003
And one of the issues was having the gbridge, right,

03:00:03,170 --> 03:00:05,416
in that leg, in getting that upstream right.

03:00:05,416 --> 03:00:09,249
I don't know if you wanted to talk about that.

03:00:10,827 --> 03:00:12,217
- Hi, I'm Chris.

03:00:12,217 --> 03:00:15,176
So Alexander just gave us a really great presentation

03:00:15,176 --> 03:00:19,162
a few years ago about Greybus at ELC, I believe,

03:00:19,162 --> 03:00:20,329
or ELC Europe?

03:00:21,902 --> 03:00:24,944
Okay, so we've done a little bit of work

03:00:24,944 --> 03:00:27,561
on gbridge since then.

03:00:27,561 --> 03:00:29,871
One of the things we added was

03:00:29,871 --> 03:00:33,261
a fairly strong authentication and well, encryption

03:00:33,261 --> 03:00:35,245
because it's a wired protocol,

03:00:35,245 --> 03:00:37,578
it was not encrypted as such

03:00:38,703 --> 03:00:40,865
directly, like onboard.

03:00:40,865 --> 03:00:43,532
So we had an RSA authentication.

03:00:44,401 --> 03:00:46,445
So that follows the standard.

03:00:46,445 --> 03:00:47,421
You present your public key,

03:00:47,421 --> 03:00:48,410
I present my public key.

03:00:48,410 --> 03:00:50,928
We provide a randomize challenge,

03:00:50,928 --> 03:00:53,428
and then shared a session key.

03:00:54,425 --> 03:00:55,706
So that's one thing we'd add.

03:00:55,706 --> 03:00:58,194
And then, the next thing was

03:00:58,194 --> 03:00:59,953
what am I thinking, yeah.

03:00:59,953 --> 03:01:01,518
- You have to add Netlink?

03:01:01,518 --> 03:01:04,518
- Right, he did the Netlink as well.

03:01:06,889 --> 03:01:09,728
And then I guess so the big thing was

03:01:09,728 --> 03:01:13,761
really just porting Greybus over to Zephyr.

03:01:13,761 --> 03:01:17,292
And so that's imminently releasable.

03:01:17,292 --> 03:01:19,077
We were gonna have a download today

03:01:19,077 --> 03:01:20,826
but we're just doing it over URL right now,

03:01:20,826 --> 03:01:23,409
which isn't much of an advance.

03:01:25,321 --> 03:01:29,869
It's the same thing that Alexander had demoed

03:01:29,869 --> 03:01:31,152
just on a different platform.

03:01:31,152 --> 03:01:33,402
So we're using the CC1352R,

03:01:34,385 --> 03:01:36,968
which is both BLE and 802.15.4.

03:01:38,838 --> 03:01:42,057
So you can run these radio protocols simultaneously.

03:01:42,057 --> 03:01:44,624
So currently in Zephyr, there is a patch

03:01:44,624 --> 03:01:49,094
by Brett Witherspoon, I'm not sure if he's here today.

03:01:49,094 --> 03:01:51,693
But that's going up into Zephyr.

03:01:51,693 --> 03:01:53,268
It's in review right now,

03:01:53,268 --> 03:01:56,980
and we've been actively dialoguing about 15.4.

03:01:56,980 --> 03:02:00,253
I was probably gonna put in a patch for BLE support

03:02:00,253 --> 03:02:02,641
for this chip within the next couple of days.

03:02:02,641 --> 03:02:05,241
Just didn't quite make it for this one.

03:02:05,241 --> 03:02:06,952
But it's quite, it's quite exciting.

03:02:06,952 --> 03:02:10,570
At any case, just seeing a GPIO turn off

03:02:10,570 --> 03:02:12,975
and on over Greybus.

03:02:12,975 --> 03:02:16,325
And then, of course, the strong authentication,

03:02:16,325 --> 03:02:18,242
stuff like that, is it?

03:02:19,631 --> 03:02:21,860
- Lar think that was what needs to happen

03:02:21,860 --> 03:02:25,193
in the upstream Linux kernel for this to

03:02:26,140 --> 03:02:27,782
like with the device tree overlay stuff,

03:02:27,782 --> 03:02:29,322
we don't wanna be relying on something

03:02:29,322 --> 03:02:30,989
that's not upstream.

03:02:32,450 --> 03:02:35,377
- So I think someone had brought up device tree overlay

03:02:35,377 --> 03:02:37,037
and oh, Michael.

03:02:37,037 --> 03:02:41,228
You'd brought up device tree overlay and I think?

03:02:41,228 --> 03:02:42,339
- [Man] It wasn't Michael.

03:02:42,339 --> 03:02:44,095
It was Frederick, who was scared

03:02:44,095 --> 03:02:45,040
and have to replace it.

03:02:45,040 --> 03:02:47,952
- Okay, so we have the Greybus manifest.

03:02:47,952 --> 03:02:50,863
It's quite straightforward, you just take

03:02:50,863 --> 03:02:54,813
a given example template, modify it to suit your needs.

03:02:54,813 --> 03:02:57,835
So it'll say that this device has such

03:02:57,835 --> 03:03:01,377
and such number of GPIOs and I-squared-C bus,

03:03:01,377 --> 03:03:03,560
or you can even abstract the I-squared-C bus

03:03:03,560 --> 03:03:04,825
out of the equation and just say,

03:03:04,825 --> 03:03:08,325
it has a sensor here, which is quite nice.

03:03:09,271 --> 03:03:14,021
Then the proposal we made on the Greybus Dev mailing list

03:03:16,925 --> 03:03:20,989
was to take some of the device tree syntax

03:03:20,989 --> 03:03:25,303
and add that as properties to the Greybus manifest.

03:03:25,303 --> 03:03:26,938
So that for example, say you had

03:03:26,938 --> 03:03:29,008
an I-squared-C temperature sensor

03:03:29,008 --> 03:03:32,078
that would alert you when a temperature

03:03:32,078 --> 03:03:33,957
is heated to a particular thresholds

03:03:33,957 --> 03:03:35,525
using a GPIO interrupt.

03:03:35,525 --> 03:03:38,012
Currently, Greybus has no way of saying

03:03:38,012 --> 03:03:40,566
this I-squared-C device is paired

03:03:40,566 --> 03:03:43,554
to this GPIO interrupts by name

03:03:43,554 --> 03:03:46,302
because that's how device tree works in Linux kernel.

03:03:46,302 --> 03:03:48,385
So we were just gonna say

03:03:49,250 --> 03:03:51,734
this is our I-squared-C zero device by name

03:03:51,734 --> 03:03:55,285
and this is the GPIO that it's paired with.

03:03:55,285 --> 03:03:56,345
- Oh, I've got a mic.

03:03:56,345 --> 03:03:57,706
And associated with that,

03:03:57,706 --> 03:04:00,823
there's also not a lot of consistency in IIO drivers

03:04:00,823 --> 03:04:02,572
depending on what additional platform data

03:04:02,572 --> 03:04:03,782
they might need.

03:04:03,782 --> 03:04:05,596
And what has become consistent is that

03:04:05,596 --> 03:04:07,929
they expose whatever additional properties

03:04:07,929 --> 03:04:09,798
they need through a device tree.

03:04:09,798 --> 03:04:12,264
So that's been pushed through hard.

03:04:12,264 --> 03:04:14,045
So they need extra stuff.

03:04:14,045 --> 03:04:17,523
Somewhat at the lost of arguments to modprobe, right.

03:04:17,523 --> 03:04:18,953
So I go all the time,

03:04:18,953 --> 03:04:22,411
you can't specify them through modprobe anymore

03:04:22,411 --> 03:04:25,079
because everybody's like just gone so hardcore

03:04:25,079 --> 03:04:27,196
on device tree only.

03:04:27,196 --> 03:04:28,726
Even though if they really had the option, right,

03:04:28,726 --> 03:04:29,964
they could put the if statements in

03:04:29,964 --> 03:04:31,742
and to get it one way or the other.

03:04:31,742 --> 03:04:35,909
But, so if you want random I-squared-C IIO driver,

03:04:36,838 --> 03:04:39,183
you're gonna need to provide some additional platform.

03:04:39,183 --> 03:04:40,843
That's why I think using something

03:04:40,843 --> 03:04:43,735
like the mikroBUS stuff, where you're just

03:04:43,735 --> 03:04:46,042
kinda, just get a full enough set,

03:04:46,042 --> 03:04:48,441
and you know, also a simple enough set,

03:04:48,441 --> 03:04:50,364
that if I wanted an interrupt right,

03:04:50,364 --> 03:04:54,315
I've got a particular I/O pin to find for an interrupt

03:04:54,315 --> 03:04:58,458
that can be remapped on a platform specific way

03:04:58,458 --> 03:05:02,066
within the implementation and hidden from

03:05:02,066 --> 03:05:06,475
what we do for all the Greybus device drivers.

03:05:06,475 --> 03:05:08,874
- Stefan, you had brought up that great slide,

03:05:08,874 --> 03:05:11,624
comparing all the different real-time operating systems.

03:05:11,624 --> 03:05:14,041
And it's for 802.15.4.

03:05:14,041 --> 03:05:15,700
I almost wished that you had done the same thing

03:05:15,700 --> 03:05:18,598
for BLE or at least, maybe we had.

03:05:18,598 --> 03:05:21,915
Because the initial prototype we had was

03:05:21,915 --> 03:05:24,618
this close to working on Contiki with BLE

03:05:24,618 --> 03:05:27,285
except and I should clarify too,

03:05:28,585 --> 03:05:30,355
the thing that we're focusing on

03:05:30,355 --> 03:05:34,272
was to use IPv6, so 6LoWPAN over BLE, 802.15.4.

03:05:35,710 --> 03:05:38,999
So it's just a unified socket layer.

03:05:38,999 --> 03:05:43,438
And ideally, we would really love to have LoRa as well,

03:05:43,438 --> 03:05:45,731
kind of accessible to your socket

03:05:45,731 --> 03:05:50,046
and addressable via 6LoWPAN or something like that.

03:05:50,046 --> 03:05:53,296
But in any case, the where is it going?

03:05:55,459 --> 03:05:57,959
The issue with Contiki is that

03:05:58,895 --> 03:06:02,506
it did not support a fairly recent RFC

03:06:02,506 --> 03:06:05,089
for nearest neighbor discovery.

03:06:06,948 --> 03:06:09,224
- [Man] The bigger problem is Contiki, is it on?

03:06:09,224 --> 03:06:10,057
Can you hear me?

03:06:10,057 --> 03:06:10,890
Yeah. - Yeah.

03:06:10,890 --> 03:06:11,760
- The bigger problem with Contiki is that

03:06:11,760 --> 03:06:14,332
there is hardly a mainline.

03:06:14,332 --> 03:06:15,749
I mean it's got better again

03:06:15,749 --> 03:06:19,172
but it was really really ugly in the recent years

03:06:19,172 --> 03:06:22,155
because it have like at least 10 or 15 different

03:06:22,155 --> 03:06:23,708
like branches of Contiki,

03:06:23,708 --> 03:06:26,506
where not branches in a Git repository,

03:06:26,506 --> 03:06:29,510
like but branches of like being forks biweekly.

03:06:29,510 --> 03:06:31,248
And I mean that is really a hard problem.

03:06:31,248 --> 03:06:34,631
I think they are going to get it solved by now

03:06:34,631 --> 03:06:35,773
but I mean you can't really reference

03:06:35,773 --> 03:06:37,945
to what Contiki version actually supports

03:06:37,945 --> 03:06:40,839
the needs of your Billy, whatever you have there.

03:06:40,839 --> 03:06:43,459
Because you can't redefine what the mainline is there.

03:06:43,459 --> 03:06:45,059
- I found as well to add to that

03:06:45,059 --> 03:06:50,025
is that the Zephyr abstraction layer for Bluetooth

03:06:50,025 --> 03:06:53,965
particularly and even 802.15.4 is much more generic.

03:06:53,965 --> 03:06:56,458
So we can actually apply to several hardware vendors,

03:06:56,458 --> 03:06:59,798
whereas Contiki was fairly specific,

03:06:59,798 --> 03:07:03,834
and it was rather difficult to make changes, even.

03:07:03,834 --> 03:07:05,976
- I mean you can see where it comes from.

03:07:05,976 --> 03:07:08,337
I mean Zephyr people that designed the Bluetooth stuff,

03:07:08,337 --> 03:07:10,463
they are coming from doing it on BlueZ before

03:07:10,463 --> 03:07:11,438
in the Linux kernel.

03:07:11,438 --> 03:07:13,761
So they basically have been building around

03:07:13,761 --> 03:07:16,172
what we have like being vendor-agnostic.

03:07:16,172 --> 03:07:18,441
And Contiki was more like driven by the vendor itself

03:07:18,441 --> 03:07:21,125
and then just nudged that in, so that's.

03:07:21,125 --> 03:07:24,214
- [Man] Yeah, so we're hoping to put most of our effort

03:07:24,214 --> 03:07:27,568
into Zephyr at this point just to leverage

03:07:27,568 --> 03:07:30,401
that grid abstraction layer, yeah.

03:07:31,366 --> 03:07:35,403
- So I'm hoping that a lot of the kind of open challenges

03:07:35,403 --> 03:07:38,903
like of getting people to collaborate on all this,

03:07:38,903 --> 03:07:41,954
on the IoT stuff because so much of it

03:07:41,954 --> 03:07:44,815
is we've got the ugly user space driver hacks.

03:07:44,815 --> 03:07:48,831
We've got stuff that doesn't live in the kernel

03:07:48,831 --> 03:07:52,752
or has a really good outside of different distros, right,

03:07:52,752 --> 03:07:56,815
like the sys class sort of interfaces, right.

03:07:56,815 --> 03:07:58,552
They're not using the standard Linux drivers.

03:07:58,552 --> 03:08:00,986
So if we can do things to make it

03:08:00,986 --> 03:08:03,569
easier for people to use Linux,

03:08:04,520 --> 03:08:08,429
and even now, putting Linux interfaces

03:08:08,429 --> 03:08:11,762
through wireless microcontroller bridge,

03:08:13,014 --> 03:08:14,568
and doing it in an open way

03:08:14,568 --> 03:08:17,288
that other people can implement on their own stacks,

03:08:17,288 --> 03:08:18,894
I think it has a lot of--

03:08:18,894 --> 03:08:20,624
- So this is really interesting,

03:08:20,624 --> 03:08:23,270
and you guys have presented this as kind of like

03:08:23,270 --> 03:08:26,770
this is how you talk to your GPIOs, right.

03:08:28,040 --> 03:08:29,281
- [Jason] It's a lot more than that, right?

03:08:29,281 --> 03:08:30,579
- Right, but I think you just fell

03:08:30,579 --> 03:08:32,390
over that edge that actually,

03:08:32,390 --> 03:08:34,118
and you just said, well you're doing

03:08:34,118 --> 03:08:37,058
it over 15.4, 6LoWPAN with Zephyr.

03:08:37,058 --> 03:08:38,565
Well, you know what?

03:08:38,565 --> 03:08:40,507
You're not, what you've described built

03:08:40,507 --> 03:08:42,726
is a discoverable network protocol.

03:08:42,726 --> 03:08:44,241
There are a bunch of other ones out there

03:08:44,241 --> 03:08:45,717
that do similar things.

03:08:45,717 --> 03:08:46,896
But they don't generally do them

03:08:46,896 --> 03:08:50,083
at the level that you've described it

03:08:50,083 --> 03:08:52,962
and so obviously, to people, okay.

03:08:52,962 --> 03:08:54,911
So and we were talking earlier about

03:08:54,911 --> 03:08:57,546
are there reasons to have Linux gateways

03:08:57,546 --> 03:08:59,463
into 802.15.4 networks?

03:09:00,712 --> 03:09:03,638
Well, you've just created that.

03:09:03,638 --> 03:09:04,805
- Yeah. - Okay.

03:09:06,418 --> 03:09:08,321
So you've just come over the hill

03:09:08,321 --> 03:09:10,498
from a different direction than we've been

03:09:10,498 --> 03:09:12,538
walking up the hill too, right?

03:09:12,538 --> 03:09:16,066
So it's nice to meet you at the top of the hill, right?

03:09:16,066 --> 03:09:18,794
- Are there any Zephyr developers in the room?

03:09:18,794 --> 03:09:20,508
Just out of curiosity?

03:09:20,508 --> 03:09:22,747
None, oh my gosh.

03:09:22,747 --> 03:09:24,946
Okay, we'll have to talk a little bit.

03:09:24,946 --> 03:09:26,835
(member of audience speaking faintly)

03:09:26,835 --> 03:09:31,585
- Okay yeah, I'll definitely have to talk with you later.

03:09:35,487 --> 03:09:37,572
- How much time, what do we have on a time check?

03:09:37,572 --> 03:09:38,696
(member of audience speaking faintly)

03:09:38,696 --> 03:09:39,638
- Yeah, it's through, over.

03:09:39,638 --> 03:09:40,471
- We're basically done.

03:09:40,471 --> 03:09:42,885
Any other questions?

03:09:42,885 --> 03:09:45,666
- So hopefully that we've drawn something,

03:09:45,666 --> 03:09:47,616
some thoughts out over the next couple of days

03:09:47,616 --> 03:09:49,059
of things that you'll look,

03:09:49,059 --> 03:09:51,879
check out the Etherpad, continue to add action items

03:09:51,879 --> 03:09:54,544
for people here and for yourself,

03:09:54,544 --> 03:09:56,006
and for things that you've followed up, right?

03:09:56,006 --> 03:09:58,341
The point of this is not to

03:09:58,341 --> 03:10:00,743
just kinda give you a big technology survey.

03:10:00,743 --> 03:10:03,474
We actually wanna go and solve problems now, right?

03:10:03,474 --> 03:10:05,557
So like attack us, right?

03:10:09,218 --> 03:10:12,931
Attack each other in a constructive way

03:10:12,931 --> 03:10:15,744
so that Etherpad is the primary mechanism

03:10:15,744 --> 03:10:18,001
for kind of following up here at the conference.

03:10:18,001 --> 03:10:19,899
And then we'll go off into the mailing list

03:10:19,899 --> 03:10:22,712
and things afterwards and later.

03:10:22,712 --> 03:10:27,644
So please engage, come up and talk to us in person.

03:10:27,644 --> 03:10:29,816
Our contact email's on there.

03:10:29,816 --> 03:10:31,245
Is there any other things we need for contact

03:10:31,245 --> 03:10:33,989
while we're at the show?

03:10:33,989 --> 03:10:35,930
- I don't know.

03:10:35,930 --> 03:10:37,766
- Yep, find the people that you need

03:10:37,766 --> 03:10:39,485
to collaborate with and collaborate.

03:10:39,485 --> 03:10:40,835
- Definitely, anybody that wants to talk to me

03:10:40,835 --> 03:10:43,918
about Zephyr, BLE, please after this.

03:10:46,692 --> 03:10:47,929
- Thanks for coming.

03:10:47,929 --> 03:10:49,268
- [Man] They're born of it.

03:10:49,268 --> 03:10:52,435

YouTube URL: https://www.youtube.com/watch?v=bVQ_mpvTCIM


