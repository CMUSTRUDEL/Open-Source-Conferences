Title: LPC2019 - System Boot & Security - MC
Publication date: 2020-02-24
Playlist: LPC2019 - MicroConferences
Description: 
	System Boot & Security - MC
Captions: 
	00:00:01,110 --> 00:00:04,020
Thank you guys. So let's start,

00:00:04,190 --> 00:00:09,190
it's my pleasure to welcome you at a system boot and security micro micro

00:00:09,331 --> 00:00:10,164
conference.

00:00:10,290 --> 00:00:14,490
I will be driving this micro conference to that together with Matthew Garrett

00:00:14,491 --> 00:00:17,880
who agreed to take minutes. And uh,

00:00:17,940 --> 00:00:21,900
thank you Matthew and Joel Stanley. Uh,

00:00:21,960 --> 00:00:26,430
some information about micro conference. We have two blocks of sessions. Uh,

00:00:26,460 --> 00:00:29,760
first one will be devoted to open BMC, UFI,

00:00:29,761 --> 00:00:34,710
SGX and some stuff about the RTM. Then we will have a break,

00:00:35,040 --> 00:00:38,790
uh, between, uh, four 30 and five,

00:00:39,210 --> 00:00:42,330
and there will be a whole blog devoted to the TPM.

00:00:42,900 --> 00:00:47,900
Some information for the speakers are all slots are 20 minutes long.

00:00:49,740 --> 00:00:54,450
Uh, so we have quite tight schedule. Please start as early as possible,

00:00:55,590 --> 00:01:00,390
uh, and uh, finish on time. Additionally, uh, we have, uh,

00:01:00,420 --> 00:01:02,580
throwable, microphone, microphones.

00:01:03,360 --> 00:01:08,360
Please do not start speaking without them because simply you can,

00:01:08,580 --> 00:01:13,530
you can, uh, you can't, uh, no, nobody, we will hear you,

00:01:13,531 --> 00:01:18,150
especially on the recording. Uh, I think that's it. Uh,

00:01:18,151 --> 00:01:21,380
we can start and the first presentation will be done by,

00:01:21,381 --> 00:01:25,620
by Joel about open BMC, secure, uh, secure and trusted boot.

00:01:26,250 --> 00:01:27,083
Thank you.

00:01:27,550 --> 00:01:31,210
Thanks very much. And you'll, hi everyone. Uh, I'm Joel. I work at IBM,

00:01:31,870 --> 00:01:35,260
the Linux technology center. I spend all my time, well,

00:01:35,261 --> 00:01:37,990
most of my time working on the a speed BMC,

00:01:38,290 --> 00:01:41,080
who's not a BMC is right.

00:01:41,110 --> 00:01:45,490
Not many who doesn't know what a BMC is, who doesn't want to know,

00:01:45,520 --> 00:01:49,840
raise their hands. Um, thank you. Uh, so at BMC,

00:01:49,960 --> 00:01:51,580
the baseboard management controller, it's uh,

00:01:51,670 --> 00:01:53,890
typically an arm marker controller, um,

00:01:53,891 --> 00:01:58,420
Linux system these days that sits on the motherboard of your server and provides

00:01:58,421 --> 00:02:00,790
things like fan control and remote access.

00:02:00,791 --> 00:02:03,760
So when the system crashes and you need to go to zero console,

00:02:04,210 --> 00:02:07,330
you log into this BMC thing and can talk to it. Um,

00:02:07,420 --> 00:02:11,260
until a couple of years ago it was generally something that your,

00:02:11,590 --> 00:02:16,090
your system manufacturer bought from some bios vendor somewhere. And, um,

00:02:16,600 --> 00:02:21,400
it had all the qualities of, of uh, that kind of Linux stack. Um,

00:02:22,420 --> 00:02:26,950
so we throw it all out and started from scratch. So, uh, at IBM we, Oh, I,

00:02:27,610 --> 00:02:30,880
uh, I, um, did the Colonel along with my team. Um,

00:02:30,940 --> 00:02:34,900
so that was doing an upstream arm port from scratch for the ASB,

00:02:34,930 --> 00:02:38,620
2,420 500. And um,

00:02:39,220 --> 00:02:40,510
then we had a team doing use the space.

00:02:40,511 --> 00:02:43,270
There was also a project started at Facebook. It's similar men, similar time.

00:02:43,600 --> 00:02:45,700
They also could open BMC. Uh,

00:02:45,760 --> 00:02:48,910
and in January last year we kind of all got together and shook hands and,

00:02:49,260 --> 00:02:52,900
and it under the Linux foundation as a Linux foundation project.

00:02:53,410 --> 00:02:56,170
And now we've got all the cloud companies, all the,

00:02:56,171 --> 00:02:58,240
all the people making servers, um,

00:02:58,570 --> 00:03:01,240
all kind of on board and doing this open BMC thing.

00:03:01,780 --> 00:03:06,340
And I was just over at the open source from my conference in California last

00:03:06,340 --> 00:03:10,660
week and we had a whole lot of kind of software companies doing value add on top

00:03:10,661 --> 00:03:11,800
of open BMC as well.

00:03:11,890 --> 00:03:15,850
So they take their from BMC stack and put their own web gooey on it and all this

00:03:15,851 --> 00:03:16,684
kind of gear.

00:03:19,630 --> 00:03:23,920
So that's a bit about open BMC and what it is. Um,

00:03:24,310 --> 00:03:25,900
and so yeah, I work on the, the kind of,

00:03:26,020 --> 00:03:31,020
and we were starting to do design of the next generation systems and started

00:03:31,361 --> 00:03:34,870
talking about the lack of any kind of secure, uh,

00:03:34,930 --> 00:03:36,700
or any kind of knowledge about what boots on it.

00:03:36,820 --> 00:03:38,950
When you run your BMC at the moment it just grabs,

00:03:39,430 --> 00:03:42,250
they just come flashing off it goes. Um,

00:03:42,940 --> 00:03:46,930
so we have a pretty typical embedded arm boot sequence. We have you boat on,

00:03:47,020 --> 00:03:50,230
on some kind of North flash. It starts executing from flash.

00:03:50,350 --> 00:03:53,200
It trains the SD Ram, uh, once that's trained,

00:03:53,201 --> 00:03:58,201
it relocates itself into SD Ram and loads some kind of kernel from somewhere.

00:03:58,530 --> 00:03:58,531
Um,

00:03:58,531 --> 00:04:02,140
in this case we wrapped the Colonel in it fit image that's the device tree with

00:04:02,141 --> 00:04:06,850
a bunch of blobs in it. Blobbing you can't all your actual boot device story.

00:04:07,300 --> 00:04:11,950
And often it ran the tests, but not necessarily. And from there we, we,

00:04:12,430 --> 00:04:15,880
um, load the rest of the user space from a squasher Fest petition.

00:04:16,810 --> 00:04:19,750
That's kind of how most of the open BMC systems work. Uh,

00:04:22,120 --> 00:04:24,280
and so in that process, there's no real verification.

00:04:24,281 --> 00:04:27,070
I mean the fit has some sharp signatures to make sure that what you're learning

00:04:27,280 --> 00:04:31,360
isn't corrupted, but it's not checking that against any kind of expected values.

00:04:32,050 --> 00:04:35,230
So no secure or trusted boot. Uh,

00:04:35,231 --> 00:04:39,850
so the new hardware has some hardware to trust. This is the a speed 2,600,

00:04:41,020 --> 00:04:44,390
um, last couple of months doing bring off of that and five, four,

00:04:44,590 --> 00:04:46,720
we'll be at a boot it out of the box, which is kind of cool.

00:04:47,110 --> 00:04:49,330
And if you grab the cumbia master,

00:04:49,360 --> 00:04:52,570
you'll be able to boots or very soon got better boots, uh,

00:04:52,600 --> 00:04:53,920
the ice speed in Columbia as well.

00:04:53,950 --> 00:04:58,120
So it's done a hope of work there to make it easy to write kennel drivers and

00:04:58,121 --> 00:05:01,690
also for the user space team to do their testing. Um, getting upstream,

00:05:01,930 --> 00:05:05,650
going to be sport. So the new hardware has got this hardware rid of trust. Um,

00:05:05,680 --> 00:05:10,680
you can put some keys and the one time broke my memory and then when the system

00:05:11,231 --> 00:05:15,250
boots it will, there's a boot room inside the, this is the one ship.

00:05:15,550 --> 00:05:20,170
It'll load a chunk from your boot device, whether that's EMMC or SBR Knorr.

00:05:20,650 --> 00:05:23,800
And do some verification of it and then execute it.

00:05:25,540 --> 00:05:30,010
So that's, that's the hard bit design. Um,

00:05:30,760 --> 00:05:35,440
so this was an initial design for how we were going to do skill boot with this.

00:05:36,100 --> 00:05:38,890
Um, equip the kids in the VMC, put the UBE SPL,

00:05:39,120 --> 00:05:43,540
that's the catheter doK blob that gets loaded initially the SPL verifies you

00:05:43,541 --> 00:05:48,220
boot your boot, verifies the fit Linux then starts and from there on it.

00:05:48,220 --> 00:05:52,960
So you use the space problem, um, on the, on the kennel and Ubik guy. Uh,

00:05:53,830 --> 00:05:58,160
but the dead big downside of this is that if you are the kind of company that's

00:05:58,161 --> 00:06:01,040
making machines that you're selling to someone else to someone else can't

00:06:01,041 --> 00:06:05,840
replace that code. And that was something I raised as a problem. Um,

00:06:06,680 --> 00:06:07,513
with this,

00:06:07,820 --> 00:06:10,730
with hardware solution they have that's not really clear how you fix it.

00:06:10,970 --> 00:06:13,850
And if you leave the key slots open, someone can put, you know,

00:06:13,851 --> 00:06:17,270
a malicious actor can put their keys in there and sign their fan where, um,

00:06:17,300 --> 00:06:18,590
so it wasn't really clear what to do.

00:06:19,070 --> 00:06:24,070
Spoke to the guys at research and they came up with a trusted boot solution.

00:06:24,501 --> 00:06:28,940
So it did mean that you don't get secure boot from the first instruction all the

00:06:28,941 --> 00:06:30,410
way through to your Linux kernel.

00:06:30,740 --> 00:06:34,910
You have secure boot for their first stage,

00:06:34,970 --> 00:06:39,970
but let us the UBIT SPL and then that loads any old you boot that's in flash and

00:06:43,851 --> 00:06:47,450
that you boot then can do secure boot with keys that are in an apron.

00:06:48,200 --> 00:06:53,200
And the way you verify this is all secure is you are recording each of the boot

00:06:55,911 --> 00:06:59,090
stages into the TPM that's now attached to the system. Um,

00:06:59,450 --> 00:07:02,330
just as a bit of a disclaimer, I'm the kind of guy, I'm a security guy.

00:07:02,690 --> 00:07:04,970
It's all new to me. This is why I wanted to do this presentation today.

00:07:04,971 --> 00:07:09,050
So if you are the experts, please grab the throw box and tell me how wrong I am.

00:07:10,280 --> 00:07:14,570
Um, and so this was the design we came up with that we'd let you, um,

00:07:15,200 --> 00:07:15,891
as an end user,

00:07:15,891 --> 00:07:20,120
do field replacement of the firmware and be able to assert that it's running

00:07:20,210 --> 00:07:23,810
what you think it is, but, um, not completely lock it down.

00:07:25,970 --> 00:07:29,540
Uh, so the downside is it's not skilled but, but it is a trusted boot system.

00:07:30,920 --> 00:07:34,940
Um, that was, that was kind of the summary of what we've designed.

00:07:34,941 --> 00:07:38,330
So I just wanted to open up for questions. And here we've got one.

00:07:42,380 --> 00:07:43,460
I have a question for you.

00:07:44,060 --> 00:07:49,060
So you mentioned we have keys fused into AISD 2,600 in there and then you have a

00:07:51,410 --> 00:07:55,190
public key for secure boot, which is different from the one that is fused in.

00:07:57,050 --> 00:08:01,770
How do you link those two keys together? Um, yes,

00:08:01,771 --> 00:08:04,050
let's measure it after. So once the system's up and running,

00:08:05,070 --> 00:08:09,180
you do the TPM at a station thing and wave. Uh,

00:08:09,480 --> 00:08:10,313
cause that's not my field.

00:08:10,620 --> 00:08:15,490
So one thing I can probably suggest the spaces, uh,

00:08:15,491 --> 00:08:17,800
you can always sign, um,

00:08:18,310 --> 00:08:22,990
the security would key public key with your own private key, which is few years.

00:08:23,290 --> 00:08:27,460
Then I mean, um, which is public keys fused and sign that key.

00:08:27,520 --> 00:08:31,000
And then probably that basically verify that the secure boot key is something

00:08:31,001 --> 00:08:33,760
that you trust and then you can move it further

00:08:36,470 --> 00:08:38,720
to grab, grab a three box. [inaudible],

00:08:38,910 --> 00:08:39,750
if I understand this,

00:08:39,751 --> 00:08:44,270
there's one AST 2,600 key that you're using into a,

00:08:44,271 --> 00:08:47,940
a number of devices and then you ship it to customers and customers can put

00:08:47,941 --> 00:08:49,950
their own secure boot costs public either.

00:08:50,160 --> 00:08:54,570
So there's one of those in any of those and you can't sign those public keys

00:08:54,571 --> 00:08:56,070
with that one. Otherwise

00:08:56,070 --> 00:08:59,580
every customer trusts the same code as every other customer and you have no,

00:08:59,730 --> 00:09:04,730
no secure separation between the customer workloads or alternatively you have to

00:09:05,430 --> 00:09:10,430
agree to assign each of your customers keys with some magic specific to that

00:09:11,071 --> 00:09:11,904
hardware

00:09:12,140 --> 00:09:14,620
or you kick a pokey with an order from chips.

00:09:15,680 --> 00:09:20,180
Pardon me? Yes, yes. That's what I'm saying. That's what I'm saying.

00:09:20,181 --> 00:09:21,860
Exactly which, which,

00:09:22,100 --> 00:09:25,880
which restricts which restricts the resale of the next guy from doing that.

00:09:25,910 --> 00:09:26,743
Right.

00:09:27,380 --> 00:09:31,550
I mean that's one way of actually keeping the plant all the way up is what I'm

00:09:31,551 --> 00:09:33,410
suggesting. Um,

00:09:33,800 --> 00:09:36,980
probably you can have vendor IDs and those kinds of things for different

00:09:36,981 --> 00:09:39,230
customers and probably the rest will do this,

00:09:39,710 --> 00:09:44,030
but it's something that we are trying to solve in the OCP security work group.

00:09:44,300 --> 00:09:45,680
I don't know if you're familiar with that.

00:09:46,280 --> 00:09:49,070
I'm pretty sure I go to those meetings. But yeah, the OCP,

00:09:49,160 --> 00:09:52,400
there's people working there from BMC who are well down the ERCP path,

00:09:53,420 --> 00:09:56,420
like the Facebook team. Actually I've worked on Oakland, BMC from Facebook.

00:09:56,780 --> 00:10:00,500
Oh hi. Nice to meet you. I've been one of the ways there. Anyways,

00:10:00,890 --> 00:10:03,140
thank you. One more time, Mike.

00:10:05,580 --> 00:10:06,450
One more thing there,

00:10:06,451 --> 00:10:11,451
which is you need the TPM ashes at every stage on that embedded in a signed

00:10:13,460 --> 00:10:16,310
document on the website. So you need to be able to say,

00:10:16,550 --> 00:10:19,970
I've got HBS to go get this thing to get, go get this document.

00:10:20,150 --> 00:10:22,700
It gives me a structure, some structured data that's got the signature.

00:10:22,790 --> 00:10:27,470
It's signed by that key and that way because right now you've got one step.

00:10:27,500 --> 00:10:31,910
It's not measuring, it's measuring itself, right? So say again,

00:10:32,030 --> 00:10:32,391
so you write down,

00:10:32,391 --> 00:10:36,170
you've got one step that's measuring itself and if you can't trust that stuff

00:10:36,171 --> 00:10:38,540
then you don't know. But if you know the bit with the measurements,

00:10:38,570 --> 00:10:43,220
especially when you can verify it outside, then you don't have that problem.

00:10:43,430 --> 00:10:48,430
So Peter that the idea is that the relying party somewhere else gets to see that

00:10:49,161 --> 00:10:51,980
stuff cause they get to see your measurements. Right. Okay. So,

00:10:52,040 --> 00:10:56,870
so at some point someone does what you just said and um, uh,

00:10:56,900 --> 00:11:01,100
the formats for that stuff that you're describing are being discussed in a new

00:11:01,101 --> 00:11:05,870
ITF working group called rats or remote attestation. So, um,

00:11:05,900 --> 00:11:09,860
and I think we have the same slide on the somewhere there.

00:11:09,920 --> 00:11:14,330
So I wished we should cause this one's really good and I was much clearer than

00:11:14,331 --> 00:11:15,980
the other one I saw yesterday.

00:11:17,680 --> 00:11:20,020
I like it. [inaudible] great. Um,

00:11:20,290 --> 00:11:25,290
is an a document that show how as the 2,600 keys can be provision it or this is

00:11:26,321 --> 00:11:28,810
like completely credit vendor knowledge? Uh,

00:11:28,870 --> 00:11:31,990
I'm sure they'll publish documentation on their day at some point.

00:11:32,110 --> 00:11:35,740
I haven't seen the documentation they're still doing bring up the chip. So, um,

00:11:36,150 --> 00:11:37,990
because based on analysis of that document,

00:11:37,991 --> 00:11:42,100
you can probably think about other ways of solving them. Yeah. Yeah.

00:11:42,340 --> 00:11:45,670
So the ASB data sheet is, is available on NDA,

00:11:45,850 --> 00:11:49,990
so it's not a public thing. And the documentation has existed, still evolving.

00:11:50,980 --> 00:11:53,950
Um, they're pretty early on in the process of the 600. Okay.

00:11:55,840 --> 00:11:57,400
Is there hardware I can buy?

00:11:58,240 --> 00:12:02,740
No, not yet. We'd like to, they're still doing the ship, bring up there.

00:12:02,860 --> 00:12:04,770
They haven't written the manual because they haven't figured out what though

00:12:04,990 --> 00:12:07,000
we're where all the registers were going to be when they're done. Right,

00:12:07,610 --> 00:12:10,050
right, right. Fair, fair. Well, I would say, how do,

00:12:10,051 --> 00:12:13,400
how could I participate in this project without some hardware that is,

00:12:13,610 --> 00:12:17,390
that has an AST 2,600 with the right, uh,

00:12:17,660 --> 00:12:20,930
the right thing burnt into it. Right. So they'll exist

00:12:21,010 --> 00:12:24,240
some point in the future. Um, but yeah, it's pretty early on in the face.

00:12:24,241 --> 00:12:24,421
I mean,

00:12:24,421 --> 00:12:27,960
no one's building machines with them yet because the silicon's only just,

00:12:28,290 --> 00:12:30,720
just appearing, um, the,

00:12:30,780 --> 00:12:34,440
the discussion around how this is going to work in that, um, we'll,

00:12:34,441 --> 00:12:36,030
we'll start having an open BMC mailing list.

00:12:36,240 --> 00:12:39,000
I was hoping that would be happening before this, this presentation,

00:12:39,001 --> 00:12:43,260
but it hasn't happen yet. Um, I think, uh,

00:12:43,261 --> 00:12:47,100
so in terms of the threat model you have about someone submersing the boot

00:12:47,101 --> 00:12:49,500
process, what is that?

00:12:49,710 --> 00:12:54,120
Are you concerned about attackers with physical access or just attackers who are

00:12:54,121 --> 00:12:55,980
somehow able to compromise the BMC some other way?

00:12:56,430 --> 00:12:59,010
I don't think we're protecting against physical access.

00:12:59,580 --> 00:13:02,430
So in that case would having um,

00:13:05,400 --> 00:13:09,810
a default behavior of UBS SPL trusts? Well in this case,

00:13:10,470 --> 00:13:15,330
uh, why do you load but not verify you boots?

00:13:15,660 --> 00:13:18,120
Uh, does the UBSs PL not have the abilities read for me for them?

00:13:22,410 --> 00:13:25,980
I can probably have a question. I can't answer asking question. Uh,

00:13:26,340 --> 00:13:29,850
no it wouldn't. I mean you could depending on code size.

00:13:29,851 --> 00:13:31,590
So what we haven't gone, there's gone down the path.

00:13:31,920 --> 00:13:36,920
So I guess my question there is really why does the SPL not verify you boots

00:13:37,860 --> 00:13:39,930
with the public keys?

00:13:39,931 --> 00:13:42,330
Those are in these secure boot tastes based rather than just measuring it.

00:13:42,930 --> 00:13:46,950
Cause if your concern that is against it, fiscal tech is rounds of scope,

00:13:46,980 --> 00:13:51,240
then the contents of the EEPROM should be trustworthy.

00:13:52,260 --> 00:13:54,720
Yeah. I'm not sure what lie, why that line doesn't exist down.

00:13:56,720 --> 00:13:57,553
[inaudible]

00:13:59,100 --> 00:13:59,690
if,

00:13:59,690 --> 00:14:04,690
if what I think you said is why doesn't the UBI boot SPL use the secure boot pub

00:14:05,810 --> 00:14:08,900
key test to validate, verify the rest of the piece,

00:14:09,380 --> 00:14:12,140
even know it has no reason to trust that public key.

00:14:12,350 --> 00:14:15,890
It could still use that to validate it is what you're saying. Okay.

00:14:16,610 --> 00:14:17,443
And um,

00:14:17,570 --> 00:14:21,500
so any attacker who had could write to it could put their own public key in

00:14:21,501 --> 00:14:26,120
there, which was a goal because we want to be people to replace that. Okay.

00:14:26,390 --> 00:14:31,280
So the question would be what, what attack does it defend against?

00:14:32,240 --> 00:14:36,920
And it would have to be some kind of attack where the attacker is not changing

00:14:36,921 --> 00:14:38,990
the stuff on this, on the flash,

00:14:39,230 --> 00:14:43,430
but somehow changing the instructions as they flow across the, uh,

00:14:43,431 --> 00:14:45,230
across the a Buster or something,

00:14:45,380 --> 00:14:46,850
something like that. Right?

00:14:50,730 --> 00:14:52,070
So unless you have physical

00:14:52,070 --> 00:14:54,980
access, you could jump her. He prompts, sowed, sets

00:14:58,790 --> 00:15:03,080
the plan. The problem it would be, you'd have to physical presence, you know,

00:15:03,081 --> 00:15:05,670
put the number into, we had to rewrite it. Right? So,

00:15:05,671 --> 00:15:09,330
so the point is that an attacker could put who has physical access can,

00:15:09,331 --> 00:15:13,080
or a user who has physical access can replace this with their own thing and

00:15:13,081 --> 00:15:17,010
attacker can replace it. Okay. And so the question is,

00:15:17,011 --> 00:15:21,840
in some cases you want to give the, the, the owner doesn't isn't the user.

00:15:23,520 --> 00:15:26,910
So he'd go to a voting machine, right? You're the user,

00:15:27,360 --> 00:15:31,860
you have physical access. Okay. But you can't open the box. Right. Right.

00:15:31,861 --> 00:15:35,010
So that was why I was asking whether if physical access was any scope for Raza

00:15:35,220 --> 00:15:37,980
scope. Right.

00:15:38,640 --> 00:15:43,050
But I could be alone with the voting machine. I just can't open it. Okay.

00:15:43,230 --> 00:15:44,700
And I could, I could Trojan it,

00:15:45,630 --> 00:15:50,630
but previously said that physical access was not within the threat mobile.

00:15:52,170 --> 00:15:53,190
No, you're missing my point.

00:15:53,191 --> 00:15:56,910
My point is I have Trojan jet through a software attack on the front of the

00:15:56,911 --> 00:16:01,250
console. Right? So you've got physical access. So I've got physical access, but,

00:16:01,500 --> 00:16:03,270
but they all said physical access was out of scope.

00:16:03,360 --> 00:16:05,430
But as soon as I opened the box,

00:16:05,970 --> 00:16:09,630
the box is compromised and they know it's compromised and they don't hand it

00:16:09,810 --> 00:16:13,170
onto the next voter. But Joel said physical access is out of scope.

00:16:13,680 --> 00:16:18,090
Yeah, yeah. Oh, I like this place the jumper and change the case.

00:16:19,680 --> 00:16:22,620
Yeah. I would like to add something out here.

00:16:23,010 --> 00:16:27,480
I think the whole idea of having hardware root of trust is to safeguard

00:16:27,481 --> 00:16:31,410
ourselves against supply chain attacks, which is kind of physical, um,

00:16:31,411 --> 00:16:34,110
attacks against what? Attack. Sorry. A supply chain attacks.

00:16:34,920 --> 00:16:39,570
You have systems and transit and attackers can fusion or replace the images

00:16:39,571 --> 00:16:42,090
because they can jump the prom. Things like that.

00:16:42,450 --> 00:16:45,270
The whole idea of having a trusted keys, I mean,

00:16:45,690 --> 00:16:49,590
keys fused inside the Silicon itself is to safeguard ourselves against that.

00:16:50,130 --> 00:16:53,850
And to answer one of the questions that was raised before, which is, uh,

00:16:53,851 --> 00:16:58,500
why do you need to have a, why should we have separate secure boot keys, uh,

00:16:58,530 --> 00:17:02,100
for customers? Um, I will not speak about AST 2,600,

00:17:02,101 --> 00:17:06,240
because I have access to the white paper that they have. But in general,

00:17:06,300 --> 00:17:11,300
the idea that we are floating with in the enterprise industry is we can have

00:17:11,791 --> 00:17:15,540
more than one key inside the hardware Silicon.

00:17:15,750 --> 00:17:18,990
So whenever a vendor or manufacturer issues a key,

00:17:19,170 --> 00:17:24,000
you can revoke that and fuse your own key. The customer can fuse their own key.

00:17:24,001 --> 00:17:28,680
That's the way of handing off security either at manufacturing phase or at, um,

00:17:29,460 --> 00:17:32,130
uh, within your infra. That's how you can do work.

00:17:32,310 --> 00:17:37,310
So that's another way of actually doing a handoff for a cryptographic handoff of

00:17:37,951 --> 00:17:40,650
your trust from vendor to your customer.

00:17:41,070 --> 00:17:43,140
When you putting the second key in,

00:17:43,530 --> 00:17:46,770
how do you know that two minutes left?

00:17:48,570 --> 00:17:49,800
You don't have put in the

00:17:49,980 --> 00:17:54,120
second key until the customer decides to blow the fuses. So you can,

00:17:54,700 --> 00:17:55,770
you can let the customer do that.

00:17:56,460 --> 00:17:57,293
Awesome.

00:17:58,570 --> 00:18:01,660
One more quick question about the threat model. So when you,

00:18:01,930 --> 00:18:06,220
when you look at the trusted boot log on the relying party and you decide that

00:18:06,221 --> 00:18:09,760
the trusted boot has been compromised, what is the,

00:18:09,850 --> 00:18:11,980
what is the expected action there?

00:18:12,130 --> 00:18:15,790
So the BMC is the way we're supposed to recover.

00:18:19,800 --> 00:18:20,590
Yeah,

00:18:20,590 --> 00:18:24,080
it was the mechanism for recovery that's going to be a deployment specific.

00:18:24,170 --> 00:18:26,300
I mean some, some data centers might say Ikea,

00:18:26,420 --> 00:18:29,480
you got access dunk access to cryptographic materials to join the network.

00:18:29,990 --> 00:18:33,140
But that's up to the deployment. We're not solving that. Ivan BMC

00:18:33,490 --> 00:18:37,210
pass the buck on the network. Finding your match.

00:18:37,540 --> 00:18:40,720
I mean there are multiple ways to get to this.

00:18:40,800 --> 00:18:43,410
You can't get to the network for a new image if you didn't boot.

00:18:43,510 --> 00:18:47,410
I mean this is an interesting

00:18:49,410 --> 00:18:50,243
[inaudible]

00:18:56,320 --> 00:18:58,750
maybe like a very quick question. Um,

00:18:59,350 --> 00:19:04,030
which of those components inside the boot actually talk to the TPM and what are

00:19:04,031 --> 00:19:06,490
the things that they are reporting to the TPM?

00:19:06,670 --> 00:19:11,080
I don't know if that was on your next slide or a, that's the last slide.

00:19:11,950 --> 00:19:14,710
Um, so from UBID we can talk to the TPM,

00:19:15,070 --> 00:19:18,370
which you would SPR or not the SPL as I understand it.

00:19:18,790 --> 00:19:23,790
So how do you connect the trust chain between you would SPL and you would if you

00:19:24,521 --> 00:19:28,570
would, SPS, uh, you, Buddha is not started security or verified,

00:19:28,960 --> 00:19:32,200
but only you boot will talk to the TPM. There is a Gavin or trust chain.

00:19:33,660 --> 00:19:37,680
That's what I thought. Okay.

00:19:39,720 --> 00:19:40,553
I'm in the

00:19:44,670 --> 00:19:49,470
last two questions. One quick question. The you would from the SPO, et cetera.

00:19:50,700 --> 00:19:51,533
So the SPO

00:19:52,960 --> 00:19:56,140
guys could, could you, could you continue to discussion in the hallways? Sorry,

00:19:56,710 --> 00:19:58,270
one quick question. So, um,

00:19:59,640 --> 00:20:03,130
what are the issues with BMC is is the life cycle is so long for the development

00:20:03,131 --> 00:20:03,911
and by the time we get it,

00:20:03,911 --> 00:20:06,190
it's pretty much broken and there's nothing we can do about it.

00:20:06,191 --> 00:20:11,191
So can we try to advocate for Q EMU emulation for BMCs and encourage as in uh,

00:20:17,981 --> 00:20:22,390
of the image. So you can test full stack like we have. So if you,

00:20:22,480 --> 00:20:25,030
if you got to including the prerelease yes. On the internet,

00:20:25,060 --> 00:20:28,660
including the prerelease ND it stuff. Sorry. Yeah,

00:20:28,661 --> 00:20:32,920
that's the 2,600 we have, it's the Kendall supports in main line for five full,

00:20:32,950 --> 00:20:36,220
well we managed for five full at the Columbia patches are on the list. Okay.

00:20:36,310 --> 00:20:38,740
So it's all out there. So someone could run this,

00:20:39,040 --> 00:20:43,600
they could run, let's say that the boot rom isn't there.

00:20:44,050 --> 00:20:47,740
I don't know how itself that, cause that's a bit of IP inside the chip. Um,

00:20:47,950 --> 00:20:48,910
I've talked to ice made about it.

00:20:50,800 --> 00:20:52,360
Last question. So last quick question.

00:20:52,361 --> 00:20:56,770
So I understood that the whole implementation for verifying things is done in

00:20:57,220 --> 00:21:01,780
Ubud in some custom way, which then would infer that I'm on the kernel side.

00:21:01,781 --> 00:21:03,610
We have no way to actually doK exec.

00:21:03,910 --> 00:21:06,220
Have you considered actually adopting the ebb,

00:21:06,221 --> 00:21:09,640
our standard for booting from UBU and how much, if so,

00:21:09,641 --> 00:21:12,970
how much would actually be missing to have real UEFI secure boot on that

00:21:12,971 --> 00:21:13,804
platform?

00:21:14,270 --> 00:21:18,220
Um, I'm not interested in you, like if someone else wants to implement,

00:21:18,500 --> 00:21:23,030
I had boot for it. I'd say the Facebook guys did that, uh,

00:21:23,540 --> 00:21:25,940
skill-based implementation and upstream [inaudible] a couple of years ago and

00:21:25,941 --> 00:21:30,170
that's what we're using. Um, we could have alternate implementations.

00:21:30,500 --> 00:21:32,390
It's running, it will be running upstream bub.

00:21:32,470 --> 00:21:36,230
So anything that upstream UBIT supports could in theory be used and over BMC

00:21:36,231 --> 00:21:40,910
space. Uh, I had one minute over time, so I have to go. Thanks everyone.

00:21:47,140 --> 00:21:47,973
[inaudible]

00:22:01,630 --> 00:22:06,040
so next talk is about UFI and [inaudible] update. Uh,

00:22:06,160 --> 00:22:07,180
it will be done by life.

00:22:39,240 --> 00:22:40,073
Yes.

00:22:51,140 --> 00:22:54,860
Am I on? Can I be heard? Good. Um,

00:22:55,130 --> 00:22:58,340
so that texts said maximum three slides.

00:22:58,590 --> 00:23:00,830
I'm sure that was somewhere in this submission guidelines,

00:23:00,860 --> 00:23:03,140
but I never read them more about that.

00:23:04,310 --> 00:23:08,000
I think that it is a copy from previous conferences. Cool.

00:23:09,890 --> 00:23:11,720
Um, so it's a 20 minute talk. Um,

00:23:11,750 --> 00:23:15,200
but so having an agenda might be a bit overkill, but to set the scene,

00:23:15,290 --> 00:23:16,520
I want to talk about something.

00:23:16,521 --> 00:23:19,370
We nearly managed to tie it together and actually publish something before

00:23:19,400 --> 00:23:21,800
plumbers near me. Um,

00:23:21,860 --> 00:23:24,860
some stuff that happened even before previous plumbers,

00:23:24,890 --> 00:23:29,300
but I realized it wasn't actually any sort of UEFI update that plumbers in my

00:23:29,630 --> 00:23:30,830
cover. Um,

00:23:30,920 --> 00:23:35,300
so I do that and I'll even throw in something new as well at the end.

00:23:36,260 --> 00:23:37,610
Um, or less abstractly,

00:23:38,210 --> 00:23:43,210
UEFI forum is going to adopt what they call a code first process.

00:23:44,180 --> 00:23:46,880
And that's the forum a whole, it's not just the UEFI spec,

00:23:46,940 --> 00:23:51,860
it's UI and ACPI NPI if anyone in here cares. But I sincerely doubt that,

00:23:53,300 --> 00:23:53,960
um,

00:23:53,960 --> 00:23:58,960
other things UDK too stable tags you if I set being finally gone open source and

00:24:01,400 --> 00:24:06,290
the UEFI interface support in your boot. Um,

00:24:06,380 --> 00:24:10,820
and towards the end, um, we have, um,

00:24:10,940 --> 00:24:15,620
dropping the CLA for contributions to Tiana core, um, and also,

00:24:16,190 --> 00:24:19,520
uh, adopting SPDX and a, a license change.

00:24:20,990 --> 00:24:25,280
Anyway, moving swiftly on. Um, so what the heck is code first?

00:24:25,281 --> 00:24:29,660
Isn't that just what we do? Um, it kind of S um,

00:24:29,810 --> 00:24:34,700
so let's explain why you find forum adopted this name for the new process.

00:24:35,990 --> 00:24:36,441
Um, I'll,

00:24:36,441 --> 00:24:41,441
I'll explain that by telling you about how the UEFI forum has worked on

00:24:41,871 --> 00:24:46,460
specification changes or additions up to this point. And that partly depends on,

00:24:46,520 --> 00:24:51,230
you know, what the origins of the UEFI forum was. Um,

00:24:51,410 --> 00:24:56,120
so I've named this code last, this is not an official term, but, um,

00:24:56,180 --> 00:24:58,370
I thought inappropriate. Um,

00:24:58,640 --> 00:25:03,640
so the [inaudible] forum was basically set up as a neutral ground for a bunch of

00:25:04,311 --> 00:25:09,260
strongly competing organizations to collaborate together on, you know,

00:25:09,320 --> 00:25:13,850
making same standards so that things could then re-operate and that's both in

00:25:13,851 --> 00:25:17,360
the side of the hardware manufacturers, which like AMD and arm,

00:25:17,390 --> 00:25:20,390
but also like plugin card vendors, you know,

00:25:20,960 --> 00:25:24,300
AMD ATI and video and those guys. Uh,

00:25:24,301 --> 00:25:27,080
and on the other side you had the, um,

00:25:28,210 --> 00:25:32,510
the buyers vendors effectively. Um, they might prefer different, um, terms, but,

00:25:32,511 --> 00:25:36,350
but that's what everyone thinks of them as anyway. They're buyers, vendors. Um,

00:25:36,590 --> 00:25:39,470
and peace was maintained here, um,

00:25:40,010 --> 00:25:43,340
largely through the UEFI bylaws, um,

00:25:43,400 --> 00:25:48,400
which fundamentally focus on protections against submarine patterns cause that's

00:25:50,121 --> 00:25:54,770
happened once or twice in the past. Um,

00:25:55,070 --> 00:25:59,720
and the ultimate guarantee of this is the process through which specification

00:25:59,721 --> 00:26:03,230
changes happen. And inside the UEFI forum,

00:26:03,260 --> 00:26:06,710
this is referred dress and engineering change requests or ECR

00:26:08,300 --> 00:26:12,050
ECRs are hunted around in NDA covered meetings.

00:26:12,080 --> 00:26:14,990
And companies get a say on whether they think there's anything in there that

00:26:14,991 --> 00:26:18,620
they consider an infringement. And at the end,

00:26:18,680 --> 00:26:23,030
if they haven't even said anything, they're given a 30 day deadline, uh,

00:26:23,031 --> 00:26:25,880
of speaking up. And if they do not say anything,

00:26:25,910 --> 00:26:30,530
then the UEFI bylaws mean that they have explicitly permitted, um,

00:26:30,620 --> 00:26:35,620
use of this within the context of the specifications,

00:26:36,920 --> 00:26:40,940
uh, covered. Um, and, and they will never enforce a patent against start.

00:26:42,650 --> 00:26:44,880
Um, the problem is here,

00:26:45,570 --> 00:26:49,320
but only after the specification release has happened is anyone actually

00:26:49,321 --> 00:26:50,190
protected by this.

00:26:51,570 --> 00:26:54,960
So that's kind of been the issue.

00:26:55,530 --> 00:26:58,350
So here's a scenario.

00:26:58,440 --> 00:27:03,440
You want to get support for a new specification feature into Linux and you just

00:27:04,621 --> 00:27:07,380
missed the window of the UEFI specification release.

00:27:08,280 --> 00:27:13,280
So you've got to wait another year for the next specification release and crap

00:27:13,830 --> 00:27:17,820
just around that time. One of your target distros released and LTS,

00:27:17,821 --> 00:27:20,010
and you didn't actually make it into the kernel for that,

00:27:20,280 --> 00:27:24,510
so you've just slipped by six years. Um,

00:27:25,020 --> 00:27:29,490
but that's the reality. And we've had, um, we had some issues with,

00:27:29,640 --> 00:27:34,110
with around that. So going back to code first,

00:27:35,160 --> 00:27:38,550
code first isn't actually even code first. Um,

00:27:38,640 --> 00:27:43,640
but it's a change through which we can gain early formal approval of ECRs and

00:27:44,401 --> 00:27:48,030
hence retaining the protections given by the foreign bylaws. Um,

00:27:48,630 --> 00:27:52,230
so the original process is not being actively retired,

00:27:52,530 --> 00:27:57,240
but realistically anything that comes out of arm Intel, AMD,

00:27:57,360 --> 00:28:01,920
those guys, it's going to be tilting over strongly towards this end.

00:28:03,330 --> 00:28:06,900
Um, and okay,

00:28:07,170 --> 00:28:09,510
it's not just about the, the legal status, right?

00:28:09,540 --> 00:28:14,540
There's also the question of is anyone in the opensource community in the least

00:28:15,031 --> 00:28:20,031
bit interested in adopting an implementation of something that hasn't been

00:28:21,420 --> 00:28:26,160
formally qualified in, in one of the specification releases? Um,

00:28:26,580 --> 00:28:31,580
so ideally what happens is these AR will be published as a first draft and

00:28:33,210 --> 00:28:37,110
anyone can comment on it at some later date.

00:28:37,410 --> 00:28:40,680
The UEFI forum members will sit down and vote and go,

00:28:41,700 --> 00:28:42,810
this is good enough.

00:28:43,140 --> 00:28:47,640
We're going to release it in this form and we commit to not changing it beyond

00:28:47,641 --> 00:28:48,474
this date.

00:28:48,810 --> 00:28:53,810
And that way we have a situation where we can actually give early opportunity

00:28:56,011 --> 00:29:00,210
for feedback on new specifications, not just from forum members.

00:29:00,570 --> 00:29:02,430
And we have a way in which we can say, look,

00:29:02,550 --> 00:29:07,020
this thing is going to be in the next specification in this form.

00:29:07,890 --> 00:29:12,450
And combined with this, this also lets us get, um,

00:29:12,660 --> 00:29:14,730
a reference implementation out in,

00:29:14,930 --> 00:29:17,730
in those cases where we need to feel the need for having a reference

00:29:17,731 --> 00:29:18,990
implementation. From day one,

00:29:19,380 --> 00:29:23,310
we can have reference implementation published and to get repository,

00:29:24,420 --> 00:29:26,670
um, before the UEFI. Uh,

00:29:26,700 --> 00:29:31,700
the next [inaudible] or API specification has gone out and this thing would have

00:29:32,251 --> 00:29:36,930
saved many sleepless nights during the AR 64. Um,

00:29:39,090 --> 00:29:41,650
well the entire [inaudible] process.

00:29:43,950 --> 00:29:44,783
So

00:29:46,440 --> 00:29:47,490
long story short,

00:29:47,940 --> 00:29:52,110
we're going to start publishing ECRs and reference code under Tiana core.

00:29:53,460 --> 00:29:57,450
Um, it doesn't compromise patent protections and we won't randomly change the

00:29:57,451 --> 00:30:00,750
feature between publishing these Yar and releasing the next specification.

00:30:02,220 --> 00:30:07,110
And that's the code first versus code last thing, which I guess,

00:30:07,350 --> 00:30:12,350
yeah, but Mike, so, uh,

00:30:12,450 --> 00:30:16,680
are the draft ECRs going up there a swale or are they going to be,

00:30:16,740 --> 00:30:19,530
my understanding is the draft DCRs will be going up there as well,

00:30:19,531 --> 00:30:21,780
but there will be a point at which they're flipped.

00:30:21,870 --> 00:30:25,530
So will when it's no longer a draft ECR, we'll update it.

00:30:25,650 --> 00:30:27,300
So the document doesn't say draft anymore.

00:30:28,530 --> 00:30:29,363
Nobody's done

00:30:37,220 --> 00:30:40,790
anything else. Oh,

00:30:45,940 --> 00:30:50,690
did just add onto that it is affecting the ACPI spec as well.

00:30:51,350 --> 00:30:55,700
So it's, it's not just UEFI. This is a fundamental change for the forum.

00:30:56,750 --> 00:30:59,030
It's taken many years to get to this point,

00:30:59,840 --> 00:31:04,840
but I still keep asking them can we just ship code and then you specify it,

00:31:05,060 --> 00:31:08,900
but we'll get there. It's another five or six years. It'll be fine.

00:31:10,090 --> 00:31:15,090
I think part of the issue of completely resolving this is that the UEFI bylaws

00:31:15,161 --> 00:31:18,880
doesn't really provide a useful way of updating the UEFI bylaws.

00:31:20,630 --> 00:31:23,750
Yeah, that is exactly the problem. That is exactly the problem.

00:31:28,070 --> 00:31:29,360
Yeah. Welcome to SBI.

00:31:32,440 --> 00:31:33,880
Anyway, I've made it that far.

00:31:34,030 --> 00:31:36,100
Here's a cute puppy is nearly as tired as you are now.

00:31:39,320 --> 00:31:40,153
Thanks Nate.

00:31:41,680 --> 00:31:43,240
And then there's the other random.

00:31:43,300 --> 00:31:46,810
So this is not necessarily stuff you need to absorb immediately,

00:31:46,840 --> 00:31:51,640
but if anything takes your fancy and we don't have time to deal with it before,

00:31:51,641 --> 00:31:55,030
this lot is over. Rubbed me in the corridor tonight and talk about it.

00:31:56,740 --> 00:31:56,800
Um,

00:31:56,800 --> 00:32:00,220
so starting with the things that someone could have presented about in Vancouver

00:32:00,221 --> 00:32:04,300
last year, um, EBK two has started, uh,

00:32:04,330 --> 00:32:08,590
releasing stable tax, so it's not quite releases. Uh,

00:32:08,770 --> 00:32:10,510
we're getting there, we're putting some,

00:32:10,990 --> 00:32:14,770
a freeze period in and making sure that we get, you know,

00:32:15,700 --> 00:32:20,350
in the week or weeks before we make a new tag, then at least it's just bug fix.

00:32:20,680 --> 00:32:25,390
Cisco. Again, this is kind of giving people a halfway house behind, you know,

00:32:25,391 --> 00:32:30,391
drinking from the firehouse or getting the not quite yearly UDK releases,

00:32:31,570 --> 00:32:33,880
um, which occasionally end up missing bits anyway.

00:32:35,260 --> 00:32:39,830
So introducing a period of soft and hard freeze of the master branch.

00:32:40,700 --> 00:32:40,940
Um,

00:32:40,940 --> 00:32:45,940
and then basically it's just every three months and if you look more closely,

00:32:47,451 --> 00:32:51,290
it's a bit of a wobble around Christmas because all those Westerners piss off

00:32:51,291 --> 00:32:54,860
for a month. Um, but that's basically it.

00:32:55,400 --> 00:32:59,120
So for, especially for distributions, um,

00:32:59,450 --> 00:33:04,450
it's useful to know that this is something you can base updated packages on and

00:33:04,821 --> 00:33:09,020
it's a cadence that is ongoing. Um, but even for development, it's,

00:33:09,021 --> 00:33:14,021
if you don't want to waste time trying to figure out whether will this actually

00:33:14,061 --> 00:33:16,430
even build, um, then you know,

00:33:18,740 --> 00:33:21,710
if one of the stable takes don't build, then we screwed up and come shout at us.

00:33:22,010 --> 00:33:26,890
But that hasn't happened so far. Um,

00:33:28,210 --> 00:33:33,210
indicate two platforms does not yet have a stable tags and we're totally not

00:33:33,341 --> 00:33:38,020
committing to doing that but we might done officially be trying to do that by

00:33:38,021 --> 00:33:40,150
the time the next EDK two stable tie comes around.

00:33:45,320 --> 00:33:45,650
[inaudible]

00:33:45,650 --> 00:33:50,270
we've done the per platform that is, sorry.

00:33:51,660 --> 00:33:54,320
[inaudible] the two platforms. Yes.

00:33:55,430 --> 00:33:57,680
Describe in one sentence

00:33:58,460 --> 00:34:03,220
indicate your platforms is a repository that holds open source, uh,

00:34:03,580 --> 00:34:05,470
porch to various targets.

00:34:05,600 --> 00:34:09,290
So stablization of these things could be probably handled on a per platform

00:34:09,500 --> 00:34:13,070
basis as in som are going to have stabilization points.

00:34:13,071 --> 00:34:14,420
Some probably never will.

00:34:15,110 --> 00:34:18,290
And this is one of the reasons why I'm saying that we're totally not committing

00:34:18,291 --> 00:34:22,450
to this. Yeah, it will definitely be,

00:34:22,640 --> 00:34:26,570
we have the option in EDK two platforms because we have some maintainers to say,

00:34:26,810 --> 00:34:29,480
I don't actually care about tracking upstream.

00:34:29,750 --> 00:34:33,500
And then they can have a branch and they can have a brunch that we know it works

00:34:33,501 --> 00:34:35,990
against that TDK to stable tag. Um,

00:34:36,110 --> 00:34:38,420
and then we don't pretend that they're trying to maintain them

00:34:43,090 --> 00:34:44,230
also. Oh, sorry.

00:34:48,670 --> 00:34:49,211
A quick question.

00:34:49,211 --> 00:34:54,211
Are you aware that a QME you have started to drag in the EDK to source code as a

00:34:54,311 --> 00:34:59,311
sub module and does that imply that they had some difficulties working with like

00:35:00,521 --> 00:35:04,120
the stable tags or will it still be possible to, you know,

00:35:04,390 --> 00:35:08,020
use random new stable tax coming out of EDK too with that

00:35:08,480 --> 00:35:13,190
project? Is Alex or someone in here? Uh, I am aware that they have,

00:35:13,220 --> 00:35:16,370
I've not actually been paying attention to her.

00:35:16,610 --> 00:35:21,200
I don't think it had anything to do with um, uh, having issues with the,

00:35:22,190 --> 00:35:24,560
um, before the stable tanks or with the stable takes.

00:35:24,561 --> 00:35:29,561
I think it's just that they used to not ship EDK to firmer and now they shift

00:35:29,810 --> 00:35:30,800
indicate to a farmer.

00:35:32,690 --> 00:35:33,770
I'm just worried that, you know,

00:35:33,771 --> 00:35:37,650
they used to have like other sub-modules that then had like patch cues on top of

00:35:37,651 --> 00:35:38,130
upstream

00:35:38,130 --> 00:35:41,340
and I'd rather, you know, have that be avoided. Well, I mean,

00:35:41,380 --> 00:35:45,590
it also depends what features that you want to wrap into QME. If,

00:35:45,591 --> 00:35:49,770
if you want, you know, HTTPS boot and secure boot, then yeah,

00:35:49,771 --> 00:35:54,450
that's going to pull in open SSL as well. And that's as a sub module of EDK too.

00:35:54,810 --> 00:35:59,430
And then that's not my problem. So, but it's just reality.

00:36:03,250 --> 00:36:04,083
Okay.

00:36:04,260 --> 00:36:06,300
I'm also ready in time for Vancouver.

00:36:06,420 --> 00:36:11,420
UEFI self-certification test suite was finally published on the 9th of October,

00:36:11,970 --> 00:36:16,110
2018 I think the first time we brought this up was basically when Linaro

00:36:16,111 --> 00:36:20,970
descended on the UEFI plug Fest for the first time in July, 2013. Um,

00:36:21,000 --> 00:36:23,130
they all just went, why would we want to do that?

00:36:23,760 --> 00:36:27,840
And then about two years later they went, yes, we obviously need to do this.

00:36:29,890 --> 00:36:34,670
How do we do that? Oh God. Oh God. The UEFI forum bylaws. Um, and,

00:36:34,810 --> 00:36:37,960
and then eventually, basically, I'm not going to say it took three years,

00:36:37,961 --> 00:36:40,660
but it took at least two, um,

00:36:40,840 --> 00:36:44,230
to actually get through and get everything published. Um,

00:36:44,950 --> 00:36:49,950
so some certification test suite is what you run on a platform to verify that

00:36:50,531 --> 00:36:54,250
your firmware basically conforms to the UEFI specification.

00:36:54,850 --> 00:36:55,780
It's not perfect,

00:36:56,050 --> 00:37:00,220
especially having been an entirely closed source development thing,

00:37:00,520 --> 00:37:02,590
but people haven't really been able to review, hasn't helped it,

00:37:03,130 --> 00:37:05,650
but it's not public. And if you do find any issues,

00:37:05,800 --> 00:37:08,620
there is a public bookseller where you can report issues against.

00:37:12,570 --> 00:37:17,040
I figured I'd give a shout out to the [inaudible] support as well. Um,

00:37:17,340 --> 00:37:21,210
started wireless graph helped along by Robert Clark. Uh,

00:37:21,560 --> 00:37:25,470
and and given a good boost by a hundred ish Ricard is currently, uh,

00:37:25,500 --> 00:37:26,340
maintaining that,

00:37:26,370 --> 00:37:31,370
that bet in Ubud initially aimed to be just enough to run grub.

00:37:31,980 --> 00:37:36,980
It can now happily run IPC as well as with some additional patches from

00:37:37,410 --> 00:37:40,800
Takahiro, Kashi, the UEFI self certification test suite.

00:37:41,310 --> 00:37:44,010
So we can now actually have two independent,

00:37:44,070 --> 00:37:49,070
actually real independent implementations of the UEFI specification on which we

00:37:49,321 --> 00:37:50,370
can run the set,

00:37:50,950 --> 00:37:54,340
which is good stuff.

00:37:56,350 --> 00:37:57,183
Okay,

00:37:57,990 --> 00:38:00,120
final slide. Um,

00:38:01,790 --> 00:38:06,790
we are in the process of migrating TianoCore or away from BSD-to-Clause and a

00:38:08,031 --> 00:38:13,031
custom tributary agreement to BSD two clause plus patent license SPDX BSD plus

00:38:16,100 --> 00:38:19,520
patent. And just for reference, no it's not that BSD plus patent.

00:38:19,880 --> 00:38:23,990
It is just a two clause BSD with an explicit patent grant. And again,

00:38:24,020 --> 00:38:29,020
this is to cover the same bit that the custom CLA used to do and it's all about

00:38:29,361 --> 00:38:32,150
submarine patents. Um,

00:38:32,240 --> 00:38:37,240
as part of this roles of migrating to use SPDX tags across everything instead of

00:38:37,691 --> 00:38:42,430
regurgitating license in slightly different forms in different files. Um,

00:38:42,490 --> 00:38:43,510
and that's all good.

00:38:43,600 --> 00:38:48,100
So we've already migrated EDK to repository and the EDK two platforms

00:38:48,101 --> 00:38:50,680
repository. Some of the other ones are lagging behind a bit.

00:38:53,850 --> 00:38:56,310
And if you've got this far, here's not a cute dog.

00:39:00,470 --> 00:39:01,303
No,

00:39:02,900 --> 00:39:04,220
it is the same sofa.

00:39:06,480 --> 00:39:07,313
[inaudible]

00:39:08,780 --> 00:39:12,200
um, any questions on that? Do you have any time left?

00:39:15,670 --> 00:39:16,503
Awesome.

00:39:19,130 --> 00:39:21,290
Any random questions on anything

00:39:23,830 --> 00:39:26,530
cool when I can run away? Thank you. Thank you.

00:39:32,000 --> 00:39:32,833
[inaudible]

00:39:46,220 --> 00:39:50,900
next door will be SGX. Upstreaming status and challenges from Jarkko.

00:39:51,470 --> 00:39:52,303
Sakina

00:39:57,920 --> 00:40:00,020
you are looking for [inaudible] here it is.

00:40:03,120 --> 00:40:04,440
Does anyone have stronger fingers?

00:40:16,230 --> 00:40:20,940
What is the smallest HDMI connect

00:40:26,160 --> 00:40:28,590
that would help. Yeah, we're good. We're good?

00:40:56,620 --> 00:40:57,453
Yup.

00:41:01,830 --> 00:41:02,663
Okay.

00:41:18,630 --> 00:41:22,680
That a dog,

00:41:22,681 --> 00:41:23,700
cute dog with headphones.

00:42:44,000 --> 00:42:44,700
[inaudible]

00:42:44,700 --> 00:42:48,780
yeah. This is STX upstreaming story. Actually the only,

00:42:48,840 --> 00:42:51,870
only the first slide condensed the story.

00:42:52,140 --> 00:42:56,220
So first skylake was

00:42:57,720 --> 00:43:02,720
came into market in 2015 and it was like the first first platform forum from us

00:43:03,421 --> 00:43:07,160
that condensed that STX but and,

00:43:07,410 --> 00:43:12,400
and we also did like the first attempt to upstream STF patches in 2016 but,

00:43:12,401 --> 00:43:14,640
but it didn't go too well because,

00:43:15,120 --> 00:43:20,120
because only Intel can basically white list public keys

00:43:22,980 --> 00:43:23,813
for enclaves.

00:43:25,270 --> 00:43:26,103
So,

00:43:29,190 --> 00:43:31,500
uh, at LPC 2016, we had,

00:43:31,560 --> 00:43:34,740
we had a meeting with Andy Lubomira scan and therapist.

00:43:34,830 --> 00:43:38,790
I think there was just three platoon and Dave Hansen and maybe,

00:43:39,540 --> 00:43:43,800
I think that was the group. And then we introduced the flexible lounge control,

00:43:43,801 --> 00:43:48,801
which allows to run basically cell phone enclaves and we made plans how to,

00:43:50,100 --> 00:43:51,540
how to proceed from that.

00:43:53,330 --> 00:43:54,163
[inaudible]

00:43:54,880 --> 00:43:57,640
exactly. Two years ago a new series was started

00:44:00,020 --> 00:44:01,270
and, and, and the first,

00:44:01,600 --> 00:44:06,310
first first platform with the flexible lounge control

00:44:08,050 --> 00:44:11,890
came into market in, in, in, in December of 2017

00:44:14,950 --> 00:44:15,783
and,

00:44:16,800 --> 00:44:20,260
and since then I've been rolling out you release of the patch set.

00:44:25,290 --> 00:44:29,550
Uh [inaudible] yeah.

00:44:29,580 --> 00:44:34,230
Right now we are in the version two. I think things are converting.

00:44:34,350 --> 00:44:39,350
We are not kind of returning back to the same things right now there's the

00:44:39,481 --> 00:44:44,481
discussion is on LSMs whether the LSM who would be like a part of the,

00:44:46,660 --> 00:44:49,170
like the Intel patch it or not

00:44:50,100 --> 00:44:50,933
[inaudible]

00:44:51,900 --> 00:44:54,420
and we will see [inaudible]

00:44:56,760 --> 00:45:00,060
so enclaves are basically like, like well

00:45:01,740 --> 00:45:03,330
they cannot be compared to the,

00:45:04,680 --> 00:45:08,130
there they are not comparable to the full memory encryption solutions.

00:45:08,131 --> 00:45:13,131
They are more like comparable to like two arm P E except they are running in

00:45:14,851 --> 00:45:17,070
ring node in a process address space.

00:45:21,390 --> 00:45:22,223
And

00:45:22,820 --> 00:45:27,820
so you can basically reserve a part of the address space for an enclave and

00:45:29,420 --> 00:45:30,920
comic pages to it from,

00:45:30,950 --> 00:45:35,690
from from recent memory area called an enclave based cache.

00:45:37,190 --> 00:45:40,340
And then you can define entry points to the enclave

00:45:42,430 --> 00:45:43,263
and,

00:45:44,350 --> 00:45:45,700
and only

00:45:47,500 --> 00:45:51,910
heartburn that goes through the entry points that are inside the enclave can

00:45:52,120 --> 00:45:55,570
access the enclave memory. If, if, if,

00:45:55,840 --> 00:45:59,080
if a code outside enclave tries to access the memory, it will,

00:46:00,490 --> 00:46:03,190
it will, it will cost general protection fault.

00:46:07,150 --> 00:46:08,590
Oh, on the other hand,

00:46:08,620 --> 00:46:13,360
the code inside the enclave can read and write the memory also outside the

00:46:13,720 --> 00:46:17,320
enclave. But, but, but you cannot jump

00:46:19,070 --> 00:46:23,210
outside the enclave and, and if there's, if there's like,

00:46:23,480 --> 00:46:27,690
like exception or interrupt or anything,

00:46:27,691 --> 00:46:32,070
it automatically causes an exit from the enclave. So if you want to do,

00:46:32,071 --> 00:46:35,610
let's say a Cisco, you have to exit from Don enclave,

00:46:35,611 --> 00:46:40,560
do it outside from the enclave and jump back to the enclave.

00:46:40,561 --> 00:46:41,394
So, so

00:46:45,050 --> 00:46:50,050
basically enclave do not have any powers to do to do choose cause or any way

00:46:51,890 --> 00:46:53,480
communicate with the rest of the system.

00:46:58,070 --> 00:46:58,903
Uh,

00:47:04,430 --> 00:47:08,450
and when, and all the pages when they leave from the,

00:47:09,080 --> 00:47:12,170
from the CPU caches cause hierarchy,

00:47:12,650 --> 00:47:14,960
they are are encrypted.

00:47:16,060 --> 00:47:16,893
So

00:47:18,770 --> 00:47:23,250
that prevents read reading the memory from,

00:47:23,310 --> 00:47:27,830
from buses. And then there's also super,

00:47:28,760 --> 00:47:31,330
super local and remote. At the station,

00:47:35,310 --> 00:47:38,580
which means that that locally enclaves can,

00:47:38,850 --> 00:47:43,410
can create private channels between each other.

00:47:47,120 --> 00:47:47,990
[inaudible] well

00:47:58,710 --> 00:47:58,711
and,

00:47:58,711 --> 00:48:03,711
and also long life can remotely attest to be genuine enclaves running inside

00:48:06,631 --> 00:48:08,280
Sandra genuine Intel CPU.

00:48:15,270 --> 00:48:19,710
These are the assets that we have at the moment. There's, there's the

00:48:23,200 --> 00:48:24,033
uh,

00:48:24,470 --> 00:48:26,920
kernel module that is part, well, it, it's,

00:48:26,921 --> 00:48:29,510
it's not like loadable module but still it's,

00:48:29,810 --> 00:48:34,580
it's isolated to that directory that is the whole framework for running

00:48:34,581 --> 00:48:38,540
enclaves. And then there's also like, like a simple self test

00:48:43,660 --> 00:48:45,750
and, and

00:48:45,980 --> 00:48:49,910
we have two devices for, for using enclave. One is for

00:48:52,680 --> 00:48:55,200
the enclave devices for, for,

00:48:55,470 --> 00:49:00,470
for creating new enclaves and in basic STEM and in ETLA licensing them.

00:49:01,560 --> 00:49:05,220
And, and the pro provision file is for,

00:49:06,480 --> 00:49:11,480
for granting the remote remote after station capability.

00:49:14,170 --> 00:49:18,730
So basically that works in a way that you opened a promise on file and then use

00:49:18,740 --> 00:49:22,330
the set attribute IOCT all the grant access. And when,

00:49:22,380 --> 00:49:24,700
when you opened the enclave file,

00:49:25,030 --> 00:49:28,870
the file descriptor is gone or you already have the enclave.

00:49:28,871 --> 00:49:32,590
It's the file desk script or has like direct meaning to the enclave.

00:49:38,380 --> 00:49:39,213
[inaudible]

00:49:43,550 --> 00:49:44,383
okay. So,

00:49:44,480 --> 00:49:49,280
so the kernel code is exactly 3,500 lines of code at the moment.

00:49:52,120 --> 00:49:56,710
The private or condense that basically our Yorkville interface,

00:50:00,040 --> 00:50:04,650
[inaudible] C and H [inaudible] like the [inaudible] management code

00:50:06,900 --> 00:50:07,950
and [inaudible]

00:50:08,120 --> 00:50:11,270
and CLS on CLS,

00:50:12,020 --> 00:50:16,430
C condensed an acorn. Then wrapper for this,

00:50:16,460 --> 00:50:20,270
this opcode called [inaudible], C L S that is that,

00:50:20,630 --> 00:50:23,480
that that implements all the functionality to create enclaves

00:50:25,310 --> 00:50:26,143
and so far

00:50:30,280 --> 00:50:33,580
and then there, so there's all those super for over committing the memory.

00:50:33,581 --> 00:50:35,020
And so so you can,

00:50:36,150 --> 00:50:36,983
you're gonna

00:50:44,380 --> 00:50:49,030
swap outpaces from, from from enclave pace cars. So that,

00:50:49,050 --> 00:50:49,883
so that there's,

00:50:50,110 --> 00:50:55,110
there's a version number in the EPC and then then you increase the pace and,

00:50:55,570 --> 00:50:58,570
and, and, and Maquan deigning the version number

00:50:59,490 --> 00:51:00,323
and [inaudible]

00:51:01,010 --> 00:51:04,760
and the Mac of the page. So, so that, that,

00:51:04,820 --> 00:51:06,170
that is done to prevent,

00:51:07,670 --> 00:51:09,920
to provide the roll roll rollback protection

00:51:16,660 --> 00:51:21,450
and also the set of test white Lars because it's gone days for example,

00:51:22,030 --> 00:51:23,740
custom sign tool for signing,

00:51:24,010 --> 00:51:27,670
creating the signature signature for the enclave.

00:51:34,740 --> 00:51:38,220
These are like the sort of breakdown of the key things,

00:51:39,090 --> 00:51:41,790
key features that kind of drive how, how the,

00:51:41,940 --> 00:51:45,090
how the whole STX core is implemented.

00:51:49,770 --> 00:51:54,770
I'm going to skip the over commitment because there is no time to go through

00:51:58,530 --> 00:52:01,980
all the features and it's kind of their,

00:52:02,460 --> 00:52:06,570
their least argument in around that feature.

00:52:19,000 --> 00:52:23,680
The enclave construction starts by by first reserving the memory wrench with a

00:52:24,160 --> 00:52:28,710
map and, and, and,

00:52:28,770 --> 00:52:33,770
and the way way the enclave interacts with [inaudible] is that that that you

00:52:35,521 --> 00:52:37,290
must, you must,

00:52:40,660 --> 00:52:43,840
the permissions cannot sort of pass the permissions

00:52:46,130 --> 00:52:49,370
of the pages that are in the range of the em map.

00:52:49,700 --> 00:52:52,580
So so when there are no basis recreated,

00:52:52,610 --> 00:52:56,060
you can only am up it pro known and that's what,

00:52:56,090 --> 00:52:58,190
that's how you reserve that restraints.

00:53:00,680 --> 00:53:04,850
After that you, you call the create IOCT all that

00:53:05,710 --> 00:53:06,543
[inaudible]

00:53:07,910 --> 00:53:10,790
that will create the first EPC page course.

00:53:11,960 --> 00:53:15,560
Secret enclave control structure is easy. Yes,

00:53:16,580 --> 00:53:20,420
it's gone is like the measurement for the enclave and the address reign and,

00:53:20,820 --> 00:53:24,620
and all, all the global attributes for the enclave.

00:53:29,070 --> 00:53:33,960
And then the pages are added with add Bates I October,

00:53:38,480 --> 00:53:43,310
which, which takes the virtual lost address for that for the page,

00:53:43,730 --> 00:53:47,930
the paste data itself and the sec in for that basic condensed permission,

00:53:47,960 --> 00:53:49,700
maximum permission for the page

00:53:56,660 --> 00:54:01,660
and [inaudible] measurement mass that defined that which part of the page are

00:54:01,730 --> 00:54:05,600
measured or, or is the page measured at all?

00:54:11,960 --> 00:54:14,030
The maximum permissions mean that that

00:54:15,980 --> 00:54:16,813
[inaudible]

00:54:23,310 --> 00:54:28,310
that you can basically end up with low an enclave it lower permissions than,

00:54:30,330 --> 00:54:32,370
than the bare Mason defense defined for the page.

00:54:32,371 --> 00:54:36,120
But you can still pass the PA permissions defining sec info.

00:54:39,780 --> 00:54:44,010
So huh.

00:54:44,350 --> 00:54:46,600
The ankle is here to provide a service,

00:54:46,660 --> 00:54:49,960
let's say maybe some encryption or certification capability or signing

00:54:49,961 --> 00:54:51,450
capability. Yeah. Uh,

00:54:51,451 --> 00:54:56,320
so you need to then give data to the Yankee and claim that the enclave will be

00:54:56,321 --> 00:54:57,520
able to access.

00:54:57,580 --> 00:55:01,980
Now if you can't call into an enclave with a pointer because that's page boom,

00:55:02,260 --> 00:55:05,290
it would take page faults. And you said that was a problem. Frank leaves.

00:55:05,740 --> 00:55:09,250
So how do you normally exchange that? That in and out with an entity?

00:55:09,940 --> 00:55:14,320
There are special spaces called red control of trucks or that defined fixed

00:55:14,530 --> 00:55:18,040
entry points that you can enter to, to an enclave. But that's entry points.

00:55:18,070 --> 00:55:21,610
How do you pass the data in and out? Uh,

00:55:22,150 --> 00:55:25,840
well you can pass point that well.

00:55:25,870 --> 00:55:30,080
Well the enclave can read the data from outside so you can use wait, wait

00:55:30,420 --> 00:55:33,660
pin. You can pin pages and pass them in. Right?

00:55:33,661 --> 00:55:38,370
So we Mark them to be unswept pinning will not guarantee that you don't get

00:55:38,640 --> 00:55:40,320
minor pitfalls. Um,

00:55:40,380 --> 00:55:44,070
so you still need to be able to deal with taking a page fault.

00:55:45,290 --> 00:55:47,730
You'll have no way in your space to guarantee that you're not taking the amount

00:55:47,731 --> 00:55:51,720
of vegetables on a pitch. We try as best we can, I believe as the answer.

00:55:52,620 --> 00:55:56,070
Yes. Well, well, well the way weightings work

00:55:57,810 --> 00:56:00,300
is that, that, that,

00:56:02,400 --> 00:56:06,960
I mean you, you mean a page that comes out side of the enclave, right? Well,

00:56:07,100 --> 00:56:11,810
well there's there the op code that you,

00:56:11,811 --> 00:56:12,240
you,

00:56:12,240 --> 00:56:17,240
that you used to enter the enclave takes so-called assume Kronos entry point.

00:56:20,400 --> 00:56:24,100
And that is, that is used for, for XF Sam's life page

00:56:24,490 --> 00:56:26,770
faults. So, so what, what to see

00:56:26,840 --> 00:56:29,030
you will do is that it will,

00:56:29,240 --> 00:56:33,860
there's a stock inside the enclave where it will save the enclave resi Sarah

00:56:33,861 --> 00:56:38,850
state, then it will then it will create like soon that the, that are state

00:56:39,090 --> 00:56:40,410
and, and, and uh,

00:56:41,020 --> 00:56:46,020
I assume granola's end report bill point use only to an instruction called E

00:56:46,361 --> 00:56:48,910
resume. Yes. I see. Okay. So [inaudible]

00:56:49,410 --> 00:56:51,570
and, and, and, and, and, and uh,

00:56:51,920 --> 00:56:55,400
CPO will prefill the register with the right parameter for

00:56:57,860 --> 00:56:58,630
[inaudible].

00:56:58,630 --> 00:57:02,480
The kernel will sync that to page four is coming from this Iridium instruction

00:57:02,840 --> 00:57:06,800
will serve as a pitch fold. Yes. Original to it. Yes. Okay. Makes sense. Thanks.

00:57:07,830 --> 00:57:12,600
Yes, exactly. Just a reminder that just eight minutes left. Okay.

00:57:13,200 --> 00:57:15,420
Yeah. This is [inaudible]

00:57:20,350 --> 00:57:20,420
[inaudible]

00:57:20,420 --> 00:57:21,920
so what flexible

00:57:23,570 --> 00:57:26,840
lounge control abroad must these new MSRs to do?

00:57:27,140 --> 00:57:30,710
Where are you going to feel any public key you want basically that,

00:57:31,160 --> 00:57:32,720
that well,

00:57:32,780 --> 00:57:37,780
the need instruction here has the six truck parameter that keeps that,

00:57:38,330 --> 00:57:43,070
that is used to provide the side measurement for, for the E in it.

00:57:44,060 --> 00:57:47,840
And, and, and it will be compare.

00:57:48,890 --> 00:57:53,890
It will check that if it's signed with that key or if the MSRs are low you,

00:57:56,390 --> 00:58:01,280
you can buy the from where you could have like this lounge enclave that is

00:58:01,400 --> 00:58:06,140
signed with those with the key and it would create a cryptographic token.

00:58:06,690 --> 00:58:11,450
But it was decided that Linux will only support the unlock configuration.

00:58:12,680 --> 00:58:16,610
Do we have an integration of this with the Colonel key-ring features?

00:58:17,180 --> 00:58:18,500
So right at the moment I gather you've,

00:58:18,501 --> 00:58:21,250
you write your key straight to the MSRs and yeah.

00:58:21,251 --> 00:58:26,120
And right now everything is [inaudible] but is there any plan in your chest so

00:58:26,121 --> 00:58:29,000
that I could look at a key ring and interrogate the Colonel? What keys?

00:58:29,090 --> 00:58:29,800
It would not,

00:58:29,800 --> 00:58:33,130
there is no plan but I don't see that there. We would,

00:58:33,880 --> 00:58:36,580
we would be creating any kind of road block

00:58:36,910 --> 00:58:38,560
for that. Okay.

00:58:38,590 --> 00:58:42,460
Just that was what I wanted to apologize if it's sort of just a question for

00:58:42,461 --> 00:58:43,294
somebody who was more,

00:58:43,480 --> 00:58:48,460
there's been actually some discussions to create like like white list of keys

00:58:50,140 --> 00:58:53,830
maintained by the Colonel. So, so it's, it's been in discussions,

00:58:55,060 --> 00:58:58,990
so I it might be abused for 66 people were familiar with it. But, uh,

00:58:59,410 --> 00:59:02,150
under what circumstances as MSLs look, I wasn't an impression to the,

00:59:02,290 --> 00:59:04,960
I'll look tissue to secure boot on their

00:59:08,470 --> 00:59:10,960
arms. The MSR locked when you do secure boot?

00:59:14,820 --> 00:59:19,500
Uh, depends on MSRs. Okay. Feature control.

00:59:19,830 --> 00:59:24,710
Ms are always locked. And what? Four?

00:59:24,711 --> 00:59:28,120
Four, four. So,

00:59:28,121 --> 00:59:31,730
so the L E B R M S. R. [inaudible].

00:59:32,050 --> 00:59:33,190
So when did we talk from where,

00:59:33,191 --> 00:59:37,150
who we think about something like a UFI runtime or SMM or something horrible

00:59:37,151 --> 00:59:37,984
like that?

00:59:40,770 --> 00:59:44,280
Hmm. I think, uh,

00:59:44,330 --> 00:59:48,360
MSR writing is locked down by insecure belt mode,

00:59:49,050 --> 00:59:50,610
but the kernel consult to them.

00:59:51,240 --> 00:59:54,540
Sure. But did you see that? I mean, we can't set the keys, but the Colonel,

00:59:54,541 --> 00:59:59,310
can you say, I'm going to the exit secure boot.

01:00:00,900 --> 01:00:05,580
Right. So when you see insecure, your boots, the MSRs are not successful.

01:00:05,581 --> 01:00:09,000
What do you mean? So one approach is that dev MSR is locked down by the Colonel,

01:00:09,330 --> 01:00:11,360
but that's not something that the firmware itself is doing.

01:00:11,460 --> 01:00:15,270
The MSLs are still accessible. Okay, nice. I, I did not know that.

01:00:17,590 --> 01:00:18,423
Okay.

01:00:19,170 --> 01:00:24,170
So right now the cone centers is anyway that we only support the unlock

01:00:25,621 --> 01:00:26,550
configuration.

01:00:27,330 --> 01:00:31,920
The log configuration would basically require a special enclave that would

01:00:31,921 --> 01:00:36,810
permit other enclave to run. But I don't think we are,

01:00:37,170 --> 01:00:40,920
we are neither creating any kind of proud blocks to introduce the support for

01:00:40,921 --> 01:00:43,050
the lock Grayson later on.

01:00:48,240 --> 01:00:52,980
Okay. So yeah, here's the flow,

01:00:53,010 --> 01:00:57,150
how you entered the enclave. So there's E enter that takes,

01:00:57,300 --> 01:01:02,130
takes one of those TCS entry points and also point [inaudible] entry point that

01:01:02,520 --> 01:01:03,353
that, you know,

01:01:04,080 --> 01:01:07,320
I read from the Colonel will return and then it will on back to the case.

01:01:07,560 --> 01:01:11,370
So it's, it will point to kind of tremble line in instruction.

01:01:14,920 --> 01:01:15,753
Um,

01:01:20,530 --> 01:01:22,960
and, and

01:01:23,800 --> 01:01:27,460
once one, once he and terrain, there's the Diane glide,

01:01:27,461 --> 01:01:32,461
it will replace the RFC asked me with the art of the next instruction right

01:01:34,570 --> 01:01:38,410
after he enter. So that, so that you can

01:01:40,360 --> 01:01:41,410
fast after the E exit.

01:01:41,800 --> 01:01:45,730
Once you are done with your unplayed routine.

01:01:49,520 --> 01:01:53,090
[inaudible] how [inaudible] how many slides left.

01:01:54,990 --> 01:01:55,980
Okay. And this is,

01:01:56,000 --> 01:02:00,150
this is how the TCS and end report looks like this from myself. That program,

01:02:02,860 --> 01:02:03,880
uh, uh,

01:02:06,080 --> 01:02:07,340
there's, there's, there's the

01:02:11,210 --> 01:02:15,950
safe stay stuck that is used to use to store when, when,

01:02:16,000 --> 01:02:19,650
when we get these, you know, like interrupts and everything that is,

01:02:19,680 --> 01:02:22,320
that is used to start a [inaudible] state.

01:02:23,040 --> 01:02:27,130
There's the fields where the [inaudible] exit pony store there, they're there,

01:02:29,080 --> 01:02:33,010
there's fields for FSM tiers of offsets and so and, and,

01:02:33,060 --> 01:02:37,550
and then there's also limit FSN GS limits for four 32 bit.

01:02:42,410 --> 01:02:46,010
Yeah. When, when, when running the product at mode and not in long mode,

01:02:50,630 --> 01:02:51,463
what

01:02:56,330 --> 01:02:57,650
the problem is that,

01:02:57,651 --> 01:03:02,500
that that enclaves generate lots of exceptions because for example,

01:03:02,750 --> 01:03:06,340
data on soup port, all the instructions that are normally available.

01:03:06,650 --> 01:03:11,060
So for X on Sundays you might have to emulate some of the instructions generally

01:03:11,061 --> 01:03:15,920
like, like the exceptions I like, like, like the part of the normal flow and,

01:03:15,940 --> 01:03:20,940
and using signals is very inconvenient because they are approached as global and

01:03:22,311 --> 01:03:23,540
cannot be easily change.

01:03:23,840 --> 01:03:25,670
So, so

01:03:27,220 --> 01:03:31,660
we ended up, we ended up upgrading a new videos or videos. So

01:03:33,880 --> 01:03:38,120
with a fixed fixed upon letter because

01:03:39,660 --> 01:03:43,780
it kind of resembles the Colonel fix up fix up table. But,

01:03:43,781 --> 01:03:48,781
but the handler is fixed because it's because you cannot really point create

01:03:50,600 --> 01:03:54,020
variable pointed to a Colonel form function from user space.

01:03:54,021 --> 01:03:57,500
So it will always do feel it, feel those,

01:03:57,800 --> 01:04:00,350
those registers when exception happens.

01:04:05,720 --> 01:04:09,830
So instead of if you use the [inaudible], Oh,

01:04:09,831 --> 01:04:14,831
instead of getting signal it function will VDSL will return and you will have

01:04:15,261 --> 01:04:18,440
the exception in information in those registers.

01:04:21,480 --> 01:04:22,170
You can still,

01:04:22,170 --> 01:04:26,820
you can also use your E inter but then you lose all this granularity.

01:04:27,330 --> 01:04:31,080
So in practice when you implement a run dine for enclaves,

01:04:31,150 --> 01:04:33,390
you want to use the VDSL

01:04:35,810 --> 01:04:36,330
uh,

01:04:36,330 --> 01:04:37,500
okay then then we have,

01:04:38,820 --> 01:04:43,470
well the access control resource are like problematic part because,

01:04:43,590 --> 01:04:44,423
because,

01:04:46,110 --> 01:04:46,600
Hmm.

01:04:46,600 --> 01:04:47,960
We, we are basically like,

01:04:50,140 --> 01:04:54,070
because you are not like EQ sucking all the L open executable,

01:04:54,071 --> 01:04:57,640
but you're like building something a bit like

01:04:59,590 --> 01:05:01,690
that, that you actually execute but,

01:05:01,710 --> 01:05:06,710
but you kind of kind of directly bien bien the permissions to in the same way.

01:05:09,570 --> 01:05:14,520
Yeah. Could just five minutes please Bob. But still, even with doc,

01:05:14,530 --> 01:05:18,730
you can for example, have more privilege process that that can,

01:05:20,150 --> 01:05:25,150
that can build down [inaudible] some and then pass the file descriptor to other

01:05:25,171 --> 01:05:27,600
processes and they bang on then just end map it.

01:05:30,230 --> 01:05:31,063
Uh,

01:05:34,440 --> 01:05:37,080
this is not yet part of the main batch set,

01:05:37,110 --> 01:05:41,940
but we've also introduces this [inaudible] who works for the LSMs so that they

01:05:41,941 --> 01:05:44,610
can add more granularity to that process.

01:05:46,640 --> 01:05:51,320
For example, sec check, make decisions based on the,

01:05:51,830 --> 01:05:55,310
on the file file permissions or something like that.

01:05:59,030 --> 01:06:02,120
Okay. That's all folks. Thank you.

01:06:08,680 --> 01:06:09,513
And the questions.

01:06:12,980 --> 01:06:16,790
So, uh, there was quite a lot of discussion on the LSM side of things,

01:06:16,870 --> 01:06:18,470
so I'm not sure where that ended up.

01:06:18,471 --> 01:06:22,700
But one thing I'd wonder is how would an LSM know, uh, what to,

01:06:23,540 --> 01:06:27,240
uh, make a decision on like what, what information is it using to make a,

01:06:27,241 --> 01:06:29,390
a further access control decision?

01:06:29,830 --> 01:06:32,830
W well, well,

01:06:34,180 --> 01:06:38,260
for example, in enclave load it can,

01:06:38,380 --> 01:06:42,600
it can read through through the VMA. It can reach the file of where they are,

01:06:42,720 --> 01:06:45,690
where the pace is he at that and make decisions based on that.

01:06:48,620 --> 01:06:49,700
Okay. So, but there'll be some,

01:06:49,970 --> 01:06:54,800
some properties of that file of that page that would be security relevant. Yeah.

01:06:54,950 --> 01:06:56,390
The LSM would know anything about

01:06:57,120 --> 01:06:57,953
bye.

01:06:58,350 --> 01:07:00,330
Security labels I guess. Yes.

01:07:02,860 --> 01:07:03,693
Yep.

01:07:06,860 --> 01:07:09,770
Yeah. [inaudible] same goes for that, for, for this,

01:07:09,800 --> 01:07:12,170
this map map.

01:07:12,430 --> 01:07:17,430
Well it gets called when the you call either M or M product and it also provides

01:07:17,621 --> 01:07:18,550
bending the file.

01:07:24,900 --> 01:07:25,733
[inaudible]

01:07:27,510 --> 01:07:29,820
uh, it's uh, the instruction,

01:07:30,780 --> 01:07:35,010
the instruction to enter an anklet and clever resume or are they privileged

01:07:35,011 --> 01:07:35,780
instructions?

01:07:35,780 --> 01:07:37,730
They already three instructions but,

01:07:37,880 --> 01:07:41,180
but what be still provide the VDS. Oh,

01:07:41,181 --> 01:07:46,181
because in order to provide more kind of robust exception handling mechanism.

01:07:57,850 --> 01:08:01,240
So what's the best hardware to buy to,

01:08:01,420 --> 01:08:04,900
to run the test? SGX to [inaudible]

01:08:05,170 --> 01:08:06,580
for R and D? I would,

01:08:07,000 --> 01:08:11,980
I would pick the Gemini like knock four if you test one to kind of experiment

01:08:11,981 --> 01:08:13,450
with that technology.

01:08:13,770 --> 01:08:14,603
Okay.

01:08:18,970 --> 01:08:19,803
And if it goes,

01:08:23,310 --> 01:08:24,540
thank you Jaco. Thanks

01:08:30,130 --> 01:08:30,963
[inaudible].

01:08:31,150 --> 01:08:36,150
And the next talk will be about Tange boots and Daniel keeper will be presented

01:08:37,030 --> 01:08:37,863
probably [inaudible].

01:09:41,000 --> 01:09:41,833
[inaudible]

01:09:46,010 --> 01:09:50,030
maybe we start, can you hear me okay?

01:09:51,620 --> 01:09:55,370
Um, my name is Danielle keeper. I work for [inaudible] and trois.

01:09:55,430 --> 01:09:59,060
I'm one of grab in upstream maintainers. Uh,

01:09:59,061 --> 01:10:01,640
today I would like to present, uh,

01:10:02,060 --> 01:10:05,000
something about transport project. Uh,

01:10:05,030 --> 01:10:07,280
how many peoples heard about this project?

01:10:09,620 --> 01:10:10,730
Hi guys.

01:10:15,200 --> 01:10:19,760
Okay, thank you. No problem. Thank you.

01:10:20,870 --> 01:10:20,871
Uh,

01:10:20,871 --> 01:10:25,871
I prepared this presentation together with Ross Phillips on and Daniela Smith.

01:10:27,140 --> 01:10:27,350
Um,

01:10:27,350 --> 01:10:32,350
this is requirements of the Rocco and I will do short introduction to the

01:10:33,710 --> 01:10:34,351
transport project and,

01:10:34,351 --> 01:10:39,351
and then I will focus on the kernel implementation of DRD and which are doing.

01:10:40,400 --> 01:10:44,210
So the trends with project is a cross community integration project.

01:10:44,211 --> 01:10:47,810
This is no one project, uh,

01:10:47,840 --> 01:10:50,690
which call it covers at least three projects.

01:10:50,720 --> 01:10:54,230
One is a bootloader in this case grab.

01:10:54,590 --> 01:10:59,030
The second is um, uh, [inaudible] and I will be discussing this today.

01:10:59,031 --> 01:11:01,340
And uh, the third thing is Europe.

01:11:02,570 --> 01:11:05,780
The name of was a play off of dealing with modernize,

01:11:05,930 --> 01:11:09,620
of trying to find a way to unify boot integrity.

01:11:10,130 --> 01:11:13,740
And the purpose is to have a [inaudible],

01:11:13,830 --> 01:11:18,330
a unified approach, uh, which we provide, uh,

01:11:19,470 --> 01:11:23,460
the trust in the platform for launching into launch integrity.

01:11:23,970 --> 01:11:28,710
Of course, uh, everything would be built around open source projects.

01:11:28,770 --> 01:11:33,770
And this way we would like to provide unified dynamic loan loans approach for

01:11:35,520 --> 01:11:39,870
Zan KVM, Lynox, BSDS and potentially proprietary kernels.

01:11:41,160 --> 01:11:43,410
Uh, as I said, I would like to focus during this,

01:11:43,500 --> 01:11:47,700
this discussion presentation on current, uh, um,

01:11:48,720 --> 01:11:50,160
sacred lunch for Linux.

01:11:50,580 --> 01:11:55,580
And this provides a different such as this to buy the trust in the platform.

01:11:55,741 --> 01:12:00,420
Currently the most common, uh, use is first, uh, launch,

01:12:01,320 --> 01:12:05,100
uh, which establish this hardware route integrity during platform boot.

01:12:05,490 --> 01:12:09,090
But there is a second option which is called [inaudible], uh,

01:12:09,120 --> 01:12:13,200
around time launch. And in this case, uh, the, the, um,

01:12:14,080 --> 01:12:19,080
this SWCS hardware route that integrity Germany prep platform run time and D,

01:12:20,160 --> 01:12:23,670
uh, using this, uh, second approach. It is possible, for example,

01:12:24,890 --> 01:12:28,800
secular launch kernel for upgrade to do some, uh,

01:12:28,830 --> 01:12:31,380
runtime verification or, uh,

01:12:31,410 --> 01:12:34,890
secular launch to do updates shut down the Colonel,

01:12:35,400 --> 01:12:39,720
how the boot flow looks like. Uh, so at the beginning we have,

01:12:39,721 --> 01:12:42,930
we have UFI, then UFI can run,

01:12:42,931 --> 01:12:47,100
I Pixi and Pixi can run steam. And then we have a bootloader.

01:12:47,520 --> 01:12:52,520
Currently all developments are for dynamic launch are done around grab and uh,

01:12:54,301 --> 01:12:58,680
there are some features which currently exist in the grub. Uh,

01:12:58,681 --> 01:13:02,670
first of all is the very far as framework. It is called on,

01:13:02,820 --> 01:13:07,530
on top of which we provide a futures. For example, EFI,

01:13:08,040 --> 01:13:11,700
shim driver, DPM drivers. And here, uh,

01:13:11,730 --> 01:13:16,530
the boot puff spliff split into, uh, first, uh,

01:13:17,070 --> 01:13:21,960
thing is, sorry, first thing is AMD,

01:13:23,160 --> 01:13:27,330
uh, AMD implementation. And this starts from SK.

01:13:27,340 --> 01:13:30,330
You need a relocate or an escape. You need instructions.

01:13:30,360 --> 01:13:33,840
Executed control is passed, uh,

01:13:33,870 --> 01:13:38,400
to a secure lunch, which is called in our case landing zone.

01:13:38,430 --> 01:13:43,430
And landing zone passes the control to a secure kernel,

01:13:43,740 --> 01:13:48,420
which is intermediate loader used, uh, to do the values,

01:13:48,450 --> 01:13:52,500
things like manager measurements, uh, uh, values checks, et cetera.

01:13:52,560 --> 01:13:55,290
And if everything is okay, uh,

01:13:55,320 --> 01:13:58,680
control is passed to the operating system.

01:14:00,450 --> 01:14:02,580
Uh, situation looks, um,

01:14:02,640 --> 01:14:07,470
similar in the intake Intel TXT case, we have

01:14:09,030 --> 01:14:10,540
[inaudible] and uh,

01:14:11,230 --> 01:14:16,230
get center instruction is executed and control is passed to the ICM and

01:14:18,400 --> 01:14:22,420
everything is okay. Then, uh, DLI me, uh,

01:14:22,440 --> 01:14:25,780
as a intermediate loader is executed. And of course,

01:14:25,781 --> 01:14:30,760
you can do the same things. Uh, uh, like in previous,

01:14:31,600 --> 01:14:36,340
previous case and past consultant dos, uh, some, uh,

01:14:36,400 --> 01:14:39,490
some blocks in this diagram or a persona, for example,

01:14:39,670 --> 01:14:42,670
there is no requirement to, uh,

01:14:42,671 --> 01:14:46,660
to have a UFR you can around dynamic launch, uh,

01:14:46,661 --> 01:14:49,900
on a non UFI platforms. Also, you can,

01:14:50,260 --> 01:14:53,980
there is no requirement to use IP or a secure,

01:14:54,340 --> 01:14:59,200
secure boot to or a SRTM. So some,

01:14:59,230 --> 01:15:04,020
some parts optional of it depends which parts you will use on your own,

01:15:04,021 --> 01:15:05,080
on your use cases.

01:15:06,100 --> 01:15:10,060
If you want more about trans boot itself. Uh,

01:15:10,090 --> 01:15:14,560
Daniel Smith and I did a presentation about a trench boots,

01:15:15,130 --> 01:15:19,780
uh, how it works in general, uh, general ideas behind the project,

01:15:19,781 --> 01:15:23,320
et cetera, et cetera. Uh, during Klein, uh,

01:15:23,350 --> 01:15:27,580
line of security summit North America this year, uh,

01:15:27,581 --> 01:15:29,920
you can find a slides, uh,

01:15:29,921 --> 01:15:34,880
at this link and ice hope that a video will be all East published.

01:15:35,590 --> 01:15:39,880
It's published. Okay, that's nice. So as I said,

01:15:39,910 --> 01:15:44,860
let's focus on, uh, a line of scanner implementation. Uh,

01:15:45,040 --> 01:15:47,350
this, uh, this, uh,

01:15:47,380 --> 01:15:52,380
feature is prepared by a colleague of mine from Oracle or Ross Phillips on,

01:15:54,250 --> 01:15:58,510
uh, so I know how it works in general,

01:15:58,570 --> 01:16:01,450
but some details are not clear for me.

01:16:01,451 --> 01:16:04,000
So I'm trying to explain and ask for,

01:16:04,350 --> 01:16:07,150
for generic feedback to this idea.

01:16:07,690 --> 01:16:10,720
So trans would secure launch a feature in the lungs.

01:16:10,780 --> 01:16:15,780
Alos the starting of post-launch MNE stage of secular late launch to establish

01:16:16,330 --> 01:16:20,980
dear TM. Uh, the coat is spleen split into, uh,

01:16:21,520 --> 01:16:25,390
Vargas, uh, logic blocks and phases. And I will be discussing this in such way.

01:16:25,930 --> 01:16:29,830
Currently Oracle for QCEs on Intel, TXT implementation

01:16:31,810 --> 01:16:34,420
free the company. Thank you.

01:16:34,840 --> 01:16:39,250
A company for Q says on EMD, uh,

01:16:39,270 --> 01:16:42,370
implementation as far as I can tell, it works, uh,

01:16:42,371 --> 01:16:45,580
in case of Intel TXT it boots,

01:16:45,610 --> 01:16:47,680
but we have some difficulties with

01:16:49,390 --> 01:16:54,250
quite strange because uh, just the boots and at some point, uh,

01:16:54,280 --> 01:16:59,280
during a network dry when the driver will last and system crashes.

01:16:59,740 --> 01:17:01,270
We don't know why we are in this.

01:17:01,780 --> 01:17:06,160
We are starting to investigate what his company, uh,

01:17:06,640 --> 01:17:09,040
so Ontraport,

01:17:10,070 --> 01:17:12,650
we can compare the SL stop,

01:17:12,651 --> 01:17:17,651
which is a just entry points to do the secure lunch to DFI stopped.

01:17:18,471 --> 01:17:22,730
It is just me, Mo, uh, just mean minimal. What's happened.

01:17:25,790 --> 01:17:26,623
Oops,

01:17:32,270 --> 01:17:33,103
that's bad.

01:17:38,940 --> 01:17:41,070
Okay, continue. Uh,

01:17:41,310 --> 01:17:44,130
so we can compare this to EFI stub

01:17:45,660 --> 01:17:48,000
and uh, the, uh,

01:17:48,390 --> 01:17:53,390
the first bit which is executed is SL stop entry and it lives in a head text

01:17:53,611 --> 01:17:57,980
section. This is just, uh, a small,

01:17:57,990 --> 01:18:02,990
a piece of code because this section is tightly organized and we don't have much

01:18:04,100 --> 01:18:05,670
a place to do different things.

01:18:05,671 --> 01:18:09,660
So we jump immediately to something which is called SL stub.

01:18:09,930 --> 01:18:11,160
And uh,

01:18:11,190 --> 01:18:16,190
it lives in the TXT section and a SL tops SL stop,

01:18:17,100 --> 01:18:19,320
continue, uh, execution.

01:18:19,620 --> 01:18:24,620
It loads eight initialize a BSP CPU.

01:18:25,021 --> 01:18:28,140
Upon entry from TXT, we done it,

01:18:28,710 --> 01:18:32,010
we do this according to this [inaudible] specification.

01:18:32,490 --> 01:18:37,230
Then it means that we are loading DDT, uh,

01:18:37,260 --> 01:18:40,890
check and prepare some parts of TXT Heaper around,

01:18:41,340 --> 01:18:46,200
enable some interrupts, wake up a piece and the restoring there. They, uh,

01:18:46,201 --> 01:18:48,720
they States and then, uh,

01:18:48,750 --> 01:18:53,700
park all a piece in safe location. I will discuss this later. Uh,

01:18:53,701 --> 01:18:57,890
and uh, after that we will, we are storing consoles,

01:18:57,891 --> 01:19:01,500
some MTRs and MSRs, uh,

01:19:01,501 --> 01:19:05,580
which were were Colbert during the launch.

01:19:06,180 --> 01:19:10,800
And after as a stop, the control is passed to the SL mine, uh,

01:19:10,820 --> 01:19:14,490
function. It is called from a compressed Colonel.

01:19:14,950 --> 01:19:17,700
The main idea of secure launch is dot.

01:19:17,730 --> 01:19:20,430
Everything which is executive have to be measured.

01:19:21,330 --> 01:19:25,500
So this part of code, uh, takes all, uh,

01:19:25,501 --> 01:19:29,370
boot params come line agreements. Uh, also it can, uh,

01:19:29,371 --> 01:19:33,030
attacks any trauma face measures, uh,

01:19:33,060 --> 01:19:37,470
into PCRs and also by dates, uh, MTRs

01:19:40,550 --> 01:19:44,800
and to, after that control is passed, uh, to the, uh,

01:19:44,801 --> 01:19:48,230
essence a slump set up. Uh,

01:19:48,231 --> 01:19:53,030
there are some things which are not needed to be done in,

01:19:53,870 --> 01:19:58,730
uh, in the early step. So we have to verify the platform whether,

01:19:59,330 --> 01:20:02,690
uh, whether a measured lunch was done in, uh, via secular launch.

01:20:02,720 --> 01:20:07,470
We were very far as VTD PMRs, uh, reserving some,

01:20:07,950 --> 01:20:12,090
uh, regions for TXT heaped the exterior. Jesus' EA in,

01:20:12,620 --> 01:20:15,300
in [inaudible], uh, vice date,

01:20:16,050 --> 01:20:21,050
8:20 AM up against a MDRs and also provide a CP DMR tie bull to Intel,

01:20:24,690 --> 01:20:28,620
IOM, you driver. I simply bring up,

01:20:28,650 --> 01:20:31,920
I S I told earlier, um,

01:20:33,000 --> 01:20:37,950
we, uh, we parked the piece in, uh, in safe place.

01:20:39,180 --> 01:20:40,650
Uh, as far as I can tell,

01:20:40,950 --> 01:20:44,570
Ross worked very long time on this piece of code.

01:20:44,600 --> 01:20:46,750
It was very difficult to, to,

01:20:46,980 --> 01:20:50,550
to start the piece and in this mode,

01:20:52,230 --> 01:20:53,063
uh,

01:20:53,520 --> 01:20:57,720
because you are not able to simply send any to the tow today piece.

01:20:58,500 --> 01:21:03,330
And to do it, to do that in usual way. So we have to,

01:21:04,410 --> 01:21:08,220
uh, leave a piece in a waiting, busy post loop,

01:21:09,420 --> 01:21:10,253
uh, and uh,

01:21:10,580 --> 01:21:15,580
sent an NMR to the waiting KPS and vector them to Colt,

01:21:15,651 --> 01:21:20,010
which is similar to a 16 a bit, uh,

01:21:20,040 --> 01:21:24,210
startup coat, but it contains some, some differences which are needed,

01:21:25,050 --> 01:21:29,220
uh, for secure, secure lunch. Uh, and then after that,

01:21:31,130 --> 01:21:35,700
uh, further startup con continues as usual and last thing.

01:21:35,790 --> 01:21:39,000
Mm. Security, Fs.

01:21:39,690 --> 01:21:43,670
We have to provide DPM log, uh, to,

01:21:43,850 --> 01:21:47,790
to the applications. So it was decided that the most convenient way,

01:21:48,960 --> 01:21:52,560
uh, is to do that, uh, via security. UFS for example,

01:21:53,100 --> 01:21:57,480
Ima provide some logs, uh, via security Fs.

01:21:57,960 --> 01:22:02,960
So we have to add some code to the security Fs to expose these TPM log,

01:22:05,250 --> 01:22:10,020
um, uh, to the, to the application. Uh,

01:22:11,190 --> 01:22:15,930
I think that's it. And I'm looking for comments to our approach as I said.

01:22:17,340 --> 01:22:20,970
Mm, I know the rough idea, how it works.

01:22:22,890 --> 01:22:26,640
Um, we would like to get feedback from you. Uh,

01:22:26,850 --> 01:22:28,860
are you agree with our approach?

01:22:28,890 --> 01:22:33,360
Do you think that it makes sense or maybe you should change something or maybe

01:22:33,361 --> 01:22:36,960
something is done and we are, let's say we are reinventing the wheel.

01:22:41,400 --> 01:22:42,233
[inaudible]

01:22:44,090 --> 01:22:48,380
so what is your object in doing TXT? Is that to get the dynamic route,

01:22:48,381 --> 01:22:52,370
which means the TPM reset of the registers or is it the proof security of the

01:22:52,371 --> 01:22:54,920
boot? So if it's the former, um,

01:22:54,950 --> 01:22:59,660
there are other ways of actually doing a dynamic route that don't involve TXT.

01:23:00,350 --> 01:23:00,380
Um,

01:23:00,380 --> 01:23:04,100
the problem with TXT is this handshake between the attestation server and the

01:23:04,101 --> 01:23:08,530
CPU where the CPU itself does the TPM reset. Um,

01:23:08,531 --> 01:23:13,240
so for the container case where it's impossible for us with thousands of

01:23:13,241 --> 01:23:15,250
containers to use a physical TPM,

01:23:15,520 --> 01:23:20,470
the dynamic route transition is actually transitioning from a hardware TPM to a

01:23:20,471 --> 01:23:23,500
V TPM and then one VCPM for per container.

01:23:23,920 --> 01:23:25,870
And I'm not saying it's a better way for virtual machines,

01:23:25,871 --> 01:23:29,590
but it's certainly a way that works for containers in a scalable and it gives us

01:23:29,591 --> 01:23:30,730
the dynamic root of trust.

01:23:31,090 --> 01:23:33,730
Okay. And what,

01:23:35,270 --> 01:23:37,520
well, we don't have to rely on any email to Intel crap,

01:23:37,521 --> 01:23:39,380
which doesn't seem to work on half our machines.

01:23:39,381 --> 01:23:41,810
This is a big problem we've had with TXT.

01:23:42,830 --> 01:23:47,120
Uh, so, uh, our approach is, um, this is,

01:23:47,150 --> 01:23:49,430
this is not a kinds of secure, secure boot.

01:23:49,460 --> 01:23:53,810
Of course we would like to be sure that uh,

01:23:55,490 --> 01:24:00,230
dynamic launch PR, uh, assures as that the platform is in, is in core extent,

01:24:00,410 --> 01:24:03,140
uh, as we expected. But, uh,

01:24:03,170 --> 01:24:07,030
we also going to use to some extent secure boot as a,

01:24:07,031 --> 01:24:11,510
as a check that we have booted, uh, correct kernel.

01:24:11,511 --> 01:24:12,344
And additionally,

01:24:12,350 --> 01:24:17,050
we also want to get some our keys from, from,

01:24:17,080 --> 01:24:21,920
from the secure boot. So we are aligned with aligning both tactic technologies.

01:24:22,340 --> 01:24:26,000
Uh, I hope not. It replies to question. So I believe the objective

01:24:26,320 --> 01:24:30,430
beautiful turned foot is kind of unified the ecosystem of the RTM,

01:24:31,000 --> 01:24:34,150
which exists there in hardware. This is approach,

01:24:34,300 --> 01:24:38,590
and if I understand that there are different ways of doing the RTM,

01:24:38,591 --> 01:24:41,650
but how this is tied to hardware in that way, in your case.

01:24:43,170 --> 01:24:45,570
So the hardware ties is through static route,

01:24:45,571 --> 01:24:48,000
does the boot up all the way to the M,

01:24:48,270 --> 01:24:52,170
then VTA PM wants it actually verifies through the attestation server,

01:24:52,171 --> 01:24:56,400
which is sort of a, the attestation server actually authorizes key release.

01:24:56,401 --> 01:25:01,190
And then we do a boot above the VTM and then connect the containers to the VTP

01:25:01,440 --> 01:25:04,650
em. So the proof that you got up through the, uh,

01:25:04,680 --> 01:25:09,680
static route is actually signed into the V TPM and then it's used as the first

01:25:09,871 --> 01:25:12,690
measurement. It's almost the same way that TXT works,

01:25:12,840 --> 01:25:15,450
except it's open instead of being Intel proprietary.

01:25:15,750 --> 01:25:19,920
And it's not hardware based because it's the, the VTM runs in software,

01:25:20,970 --> 01:25:24,420
I assume it wants to say something, but uh, but that requires a,

01:25:24,421 --> 01:25:28,440
that requires a SRTM which requires boot and,

01:25:28,441 --> 01:25:33,330
and this approach can be used a runtime, so which are not required reboot,

01:25:33,540 --> 01:25:37,740
which in some cases is very expensive. So it only required,

01:25:37,741 --> 01:25:38,910
it requires SRTM.

01:25:38,911 --> 01:25:42,480
And the same way this one does because you still have to have the static route

01:25:42,481 --> 01:25:46,620
verification through the attestation server, which we also do. So effectively.

01:25:46,621 --> 01:25:50,130
The dynamic transition is about the same with this approach that is with ours.

01:25:52,610 --> 01:25:57,260
We also going to use, uh, SRTM uh, in some cases. Yeah. My,

01:25:57,530 --> 01:26:02,210
my, my dislike for SRTM. I'm, I'm from open source, filmer ecosystem.

01:26:02,900 --> 01:26:03,800
Uh, is that like

01:26:04,010 --> 01:26:09,010
there is no implementation which is really open and maybe accept Google's stuff.

01:26:09,830 --> 01:26:14,000
Uh, because like Intel, uh, secure boot or Intel boot,

01:26:14,270 --> 01:26:17,010
God requires proper proprietary tools and,

01:26:17,011 --> 01:26:21,830
and DAS and the same thing is with NXP. The same thing is with AMD.

01:26:22,110 --> 01:26:24,180
We'll skip some of the red.

01:26:29,250 --> 01:26:32,010
Yup, yup, yup. But still everything to provision,

01:26:32,520 --> 01:26:37,520
provision SRTM you need tools like [inaudible] and DAS with vendor.

01:26:38,040 --> 01:26:39,690
So that's kind of problematic.

01:26:39,691 --> 01:26:44,340
And to to say a little bit about the MD implementation, it can be fully open.

01:26:44,880 --> 01:26:48,540
So we already did fully open implementation without any binary blobs.

01:26:48,900 --> 01:26:49,051
So,

01:26:49,051 --> 01:26:54,051
so a sr a static route isn't really a static route because the IBM attestation

01:26:54,451 --> 01:26:56,730
server actually takes the entire boot log,

01:26:57,000 --> 01:27:01,260
passes it and make sure everything is done and then it verifies the hashes of

01:27:01,261 --> 01:27:05,010
individual components and it has a dynamic range of hashes.

01:27:07,600 --> 01:27:11,380
Yeah. It has a dynamic range of hashes that it'll say yes or no to.

01:27:11,381 --> 01:27:14,650
So effectively the attestation server dances the same as yours.

01:27:14,651 --> 01:27:18,310
And it does it dynamic transition based on a range of possible hashes in the

01:27:18,311 --> 01:27:19,144
boot log.

01:27:20,280 --> 01:27:21,113
Yeah.

01:27:23,590 --> 01:27:27,430
Well, no, this is the IBM adastation server works for any architecture.

01:27:28,830 --> 01:27:31,610
Is it open? Yeah, that's published on a,

01:27:31,770 --> 01:27:34,020
I'm afraid it's on SourceForge but it is published

01:27:39,200 --> 01:27:40,033
[inaudible]

01:27:41,690 --> 01:27:43,410
you will never find it. No, I, I,

01:27:44,240 --> 01:27:47,060
it's been maintained by Ken Goldman and he has a particular affinity for

01:27:47,061 --> 01:27:51,820
SourceForge. Um,

01:27:51,910 --> 01:27:56,000
a question about the VTP ms you were just mentioning, are those, uh, in QMU?

01:27:57,680 --> 01:28:00,170
Um, well they can be, so it depends what you're launching.

01:28:00,500 --> 01:28:02,000
If you're launching a virtual machine,

01:28:02,001 --> 01:28:04,910
chances are you want your VTM to go via QMU,

01:28:05,090 --> 01:28:06,530
but if you're launching a container,

01:28:06,531 --> 01:28:10,160
you don't really have a sort of intermediate emulated by us.

01:28:10,161 --> 01:28:15,161
So you haven't a need of QMU in a container and you just connect directly to the

01:28:15,710 --> 01:28:18,560
VTM channel. And you can do this either by an IP connection,

01:28:18,561 --> 01:28:23,270
which the TPM accepts or we can pass the VTM X device directly up into the

01:28:23,271 --> 01:28:27,620
container and do it that way. Have you considered, uh, enclaves, hardware,

01:28:27,621 --> 01:28:31,280
enclaves for the VT PMs and no, because we want them to work

01:28:34,780 --> 01:28:35,330
[inaudible] no,

01:28:35,330 --> 01:28:36,920
they're fairly easy to attack. Right.

01:28:36,921 --> 01:28:40,880
And then you lose the entire point of adastation. They're trivial to attack.

01:28:41,630 --> 01:28:45,440
So you might as well not bother and save yourself the work. Well, like I said,

01:28:45,441 --> 01:28:46,274
we're not looking at,

01:28:46,280 --> 01:28:50,300
we're basically looking at protecting the runtime environment of the host.

01:28:50,540 --> 01:28:51,920
If we can keep that protected.

01:28:51,921 --> 01:28:54,770
The VTM is running in the runtime environment at the host.

01:28:54,950 --> 01:28:57,620
So all the secrets that it has a safe in that environment.

01:28:57,740 --> 01:28:59,990
How are you protecting the runtime of the host?

01:29:00,140 --> 01:29:04,680
It's by static and all sorts of other security protection mechanisms that are

01:29:04,681 --> 01:29:08,430
usual for cloud static root of trust.

01:29:08,810 --> 01:29:13,810
Things like things like the sort of the QRadar and I can list the load of IBM

01:29:15,841 --> 01:29:17,520
proprietary technology if you want,

01:29:17,521 --> 01:29:20,700
but it's about the same as the proprietary technology that all the other clients

01:29:21,150 --> 01:29:22,770
got it. Got it. Okay. All right, thank you.

01:29:25,120 --> 01:29:25,953
Yup.

01:29:25,970 --> 01:29:30,960
Uh, James, do you use SW M for VPM too? Oh yes. Oh, TPM,

01:29:31,040 --> 01:29:33,380
the TPM as a software. Oh yeah, yeah. Okay.

01:29:34,400 --> 01:29:37,900
So when you do theK exec and the case where you're doing your K Execunet,

01:29:37,901 --> 01:29:42,650
you're reestablishing from a Oh, sorry, sorry.

01:29:42,680 --> 01:29:47,210
So you, well you mentioned the idea of being able to do from, no,

01:29:47,570 --> 01:29:49,970
so Lisa, sorry, maybe I misunderstood this,

01:29:49,971 --> 01:29:53,510
but one of the advantages of the RTM was that you could reestablish the trust as

01:29:53,511 --> 01:29:57,680
a later point. So for instance, whenK exactly. So when you do aK exec,

01:29:57,681 --> 01:29:58,580
when you do a D RTM,

01:29:58,610 --> 01:30:02,660
are you then still having to look at the static routes in order to verify that

01:30:02,661 --> 01:30:04,880
the firmware state was at boot time?

01:30:04,881 --> 01:30:09,881
What's expected in order to gain some sorts of trust or to mean,

01:30:10,610 --> 01:30:15,350
Oh, we discussed this idea withK exec or just roughly?

01:30:15,351 --> 01:30:19,580
We haven't folded in, but I think this is good point.

01:30:20,120 --> 01:30:22,490
Uh, this is a good point. So I believe,

01:30:22,670 --> 01:30:26,350
is this also a question to James because, but it doesK exec, uh,

01:30:26,410 --> 01:30:30,340
in a measured way. So I believe this applies.

01:30:30,341 --> 01:30:32,530
The material question applies to.

01:30:32,990 --> 01:30:36,610
So I'm not really a power expert, but you're right, it does it,

01:30:36,611 --> 01:30:39,790
but it does it in a measured way through effectively a static route.

01:30:40,120 --> 01:30:41,620
So we believe it can be done.

01:30:41,621 --> 01:30:45,700
It's just that the more K execs you do them further away from the real static r

01:30:45,700 --> 01:30:47,440
oute you get and the more difficult it becomes.

01:30:49,360 --> 01:30:51,190
Uh, Mike [inaudible]. Mike,

01:30:52,270 --> 01:30:57,160
is it a problem for you if you were in cover [inaudible] I believe your VMs are

01:30:57,161 --> 01:31:01,090
initialized with a static route. Nobody can [inaudible] we can go from there.

01:31:01,570 --> 01:31:04,450
Well this is the piece areas. I bet you Ben knows more about it than me.

01:31:04,451 --> 01:31:05,580
I just know what Mimi yells.

01:31:06,880 --> 01:31:09,970
I'm an exit six person who's forced to deal with it occasionally.

01:31:11,140 --> 01:31:14,980
I actually have not worked at all on any of the security part. Um,

01:31:15,010 --> 01:31:15,850
but pretty booted on.

01:31:15,910 --> 01:31:20,680
The use for the host is use some of the things you've just initialize the route,

01:31:21,160 --> 01:31:24,850
the static route that that had you were just running on but are rather rent

01:31:24,851 --> 01:31:27,910
running at do to slightly more complicated than that.

01:31:27,911 --> 01:31:30,700
It is a Linux booting Linux system, which is why we need keg.

01:31:31,330 --> 01:31:32,163
Yeah.

01:31:33,480 --> 01:31:35,100
Alright. We might have to leave it there. It's break time now.

01:31:35,490 --> 01:31:37,380
Thanks Daniel for your talk. Thank you guys.

01:31:54,260 --> 01:31:55,093
[inaudible] [inaudible]

01:32:13,530 --> 01:32:15,340
[inaudible] but I don't think so actually

01:32:17,860 --> 01:32:19,540
in specific specific points,

01:32:20,860 --> 01:32:22,990
it doesn't matter the words of the sentence.

01:32:26,620 --> 01:32:27,453
No

01:32:31,000 --> 01:32:34,120
reverse Polish notation. No, that is [inaudible].

01:32:34,121 --> 01:32:36,430
So that's why I think Polish doesn't care about the order of the

01:32:46,000 --> 01:32:46,660
things.

01:32:46,660 --> 01:32:50,860
There's emphasis different emphasis in Russian by putting the words in different

01:32:50,890 --> 01:32:53,350
order. But the sentence always be, same thing.

01:32:56,620 --> 01:32:57,453
I'm

01:32:59,830 --> 01:33:03,760
actually planning specifically. Oh yes. Oh,

01:33:04,960 --> 01:33:08,370
trust. Argued with roots of trust. Okay. And

01:33:10,480 --> 01:33:12,520
if you change the word of the org, word is words.

01:33:16,960 --> 01:33:20,980
Trusted reach. Our anchors. Sorry. Sorry. Yeah, anchors.

01:33:21,850 --> 01:33:26,350
Right. And, and I have a lot of trust words.

01:33:27,190 --> 01:33:31,090
Budget, another doc. I'm like, you guys, this is really,

01:33:31,220 --> 01:33:35,500
really confusing people and it really takes a lot of brain power to unconfuse

01:33:35,501 --> 01:33:39,160
yourself. Each tribe you go through this and I'm like,

01:33:41,110 --> 01:33:45,130
Oh, it's just bizarre. Like

01:33:49,000 --> 01:33:50,140
we should, we should be

01:33:52,930 --> 01:33:56,920
measurement or something like this because you have no way of knowing you

01:33:56,921 --> 01:33:59,980
measuring yourself. Right. And so

01:34:02,080 --> 01:34:03,910
I know that word immaculate.

01:34:04,480 --> 01:34:07,270
Jesus was born by macula inception.

01:34:09,220 --> 01:34:10,480
Jesus' mother was not touched

01:34:14,290 --> 01:34:18,410
right after the same thing. Totally. God

01:34:24,410 --> 01:34:25,243
[inaudible]

01:34:29,560 --> 01:34:34,150
some popular traction that's running.

01:34:35,200 --> 01:34:38,560
The first thing it does is it measures the total Pope. Okay.

01:34:39,330 --> 01:34:42,850
The first test to a PCR.

01:34:45,460 --> 01:34:50,350
So get store for later on for, for attestation as part of the measurement.

01:34:50,351 --> 01:34:53,560
So then you measure that this part booted prep. Right?

01:34:55,930 --> 01:35:00,930
But that code has not actually been hanging on photos not being verified before.

01:35:02,420 --> 01:35:07,110
It could do something else. But then it would measure, Oh yeah, yeah,

01:35:07,390 --> 01:35:09,800
yeah, yeah, yeah. I know.

01:35:13,250 --> 01:35:17,450
But why is it all so you know you can do it.

01:35:17,451 --> 01:35:20,660
But this is a differential for why isn't it done with

01:35:22,250 --> 01:35:26,120
products, products. That's much more complicated than [inaudible].

01:35:26,330 --> 01:35:30,470
So I actually have a plan to get that. Yeah. But I,

01:35:30,471 --> 01:35:32,100
I'm going to get, so

01:35:34,340 --> 01:35:39,260
you can check reform of the equation. [inaudible]

01:35:39,410 --> 01:35:42,680
there's a differential that is dealt with on

01:35:44,790 --> 01:35:49,520
one hand me the four equations for limbs.

01:35:52,460 --> 01:35:54,050
I'm a haven't agreed. Physics

01:35:56,240 --> 01:35:57,500
writes actually means something to me.

01:36:01,150 --> 01:36:04,160
I want to get Chinese characters that say this, this, this guy is

01:36:08,430 --> 01:36:09,560
[inaudible] I see a lot like

01:36:13,210 --> 01:36:17,030
women just had, stars are kind of coming down here.

01:36:17,630 --> 01:36:21,670
This is kind of cute reason, right? Even know

01:36:27,440 --> 01:36:29,390
what all or

01:36:32,030 --> 01:36:32,570
I might just,

01:36:32,570 --> 01:36:37,220
I wanted to put something on my skin and it means something to me in 20 years.

01:36:38,120 --> 01:36:40,880
That is okay.

01:36:40,940 --> 01:36:43,760
So now that I know that writing,

01:36:45,410 --> 01:36:48,530
but now I don't know whether there is to get to see your differential is

01:36:48,590 --> 01:36:52,820
simpler, easier for them to get right. Okay.

01:36:53,660 --> 01:36:56,720
But it's not as beautiful farm, you know,

01:36:57,200 --> 01:36:58,730
re assistance.

01:36:59,240 --> 01:37:02,720
The surface volume integration. Right.

01:37:04,480 --> 01:37:06,300
That one, the one

01:37:09,530 --> 01:37:10,790
[inaudible] has to go here.

01:37:17,840 --> 01:37:21,140
[inaudible] I mean they originally I was thinking, Oh it needs to go on a leg.

01:37:21,350 --> 01:37:22,280
There's lots of space. But

01:37:26,750 --> 01:37:28,760
I have new, I do know a woman that went to high school.

01:37:32,510 --> 01:37:37,160
What I wanted to say, you can do it right. Cause she's not a tattoo artists.

01:37:43,430 --> 01:37:47,930
No, cause I don't do that anymore. Oh. And I don't, I live in Butler in

01:37:50,400 --> 01:37:53,420
Buffalo. How do I know where people are? Right.

01:37:55,320 --> 01:37:58,260
This is all 15 years ago. Like, Oh, is that what you stopped doing?

01:37:58,261 --> 01:38:00,540
Tattoos like Oh

01:38:04,440 --> 01:38:08,460
she was literally 17 right.

01:38:09,570 --> 01:38:11,580
And gone to her sister.

01:38:16,680 --> 01:38:19,680
So what did she do? She got the job. So any tattoos, she likes that.

01:38:20,370 --> 01:38:23,880
A couple years later I said having babies

01:38:25,890 --> 01:38:28,080
and putting on tattoos on me and other people

01:38:36,570 --> 01:38:37,403
[inaudible]

01:38:44,100 --> 01:38:45,780
goals, you have different goals.

01:38:46,830 --> 01:38:51,330
She's smart enough out that her goal was not to be, you know,

01:38:52,330 --> 01:38:56,340
not to do other things. She was really cool.

01:38:59,050 --> 01:39:03,750
Yeah. So where do you guys live? I walk in Oracle.

01:39:03,751 --> 01:39:04,890
I know that that could be anywhere.

01:39:08,280 --> 01:39:13,280
Here's your office. [inaudible] Oh, hello.

01:39:17,630 --> 01:39:19,430
Hi. I'm

01:39:28,100 --> 01:39:28,933
boring.

01:39:33,750 --> 01:39:34,730
[inaudible] most closely.

01:39:40,490 --> 01:39:43,280
I needed to

01:39:55,400 --> 01:39:56,233
and it was winter

01:40:01,850 --> 01:40:02,683
people that

01:40:12,160 --> 01:40:15,870
[inaudible] they host events. Why is this document

01:40:17,420 --> 01:40:18,253
unhealthy?

01:40:24,000 --> 01:40:26,810
Do you want to refill? Do you want to refill this? Bring your report.

01:40:31,820 --> 01:40:33,000
Show up. I show up as you know,

01:40:33,110 --> 01:40:38,110
1230 and I leave at 6:00 PM right when it starts getting busy again and I'll let

01:40:38,490 --> 01:40:39,323
go.

01:40:53,900 --> 01:40:54,733
[inaudible]

01:41:32,890 --> 01:41:34,540
here are some, some terminology

01:41:50,170 --> 01:41:51,060
[inaudible] to Mike.

01:43:51,910 --> 01:43:52,743
[inaudible]

01:43:53,100 --> 01:43:54,870
false. We'll be starting in a minute.

01:44:23,330 --> 01:44:24,163
[inaudible]

01:44:33,840 --> 01:44:34,673
yeah.

01:45:06,630 --> 01:45:07,470
Okay.

01:45:08,730 --> 01:45:11,730
We will start and as I said earlier,

01:45:12,360 --> 01:45:17,360
I will have a TPM block right now and it will be started by James DPM to

01:45:18,931 --> 01:45:22,830
security in the face of buss. Interposes James. Okay.

01:45:22,831 --> 01:45:26,010
So the thing about this talk is I have no slides whatsoever.

01:45:26,460 --> 01:45:30,750
What I'm showing is actually the documentation from the patch I just posted to

01:45:30,751 --> 01:45:33,360
the TPM list. Nothing else. Um,

01:45:33,390 --> 01:45:38,220
but what I wanted to convince you, or first of all is that with TPM two,

01:45:38,400 --> 01:45:41,370
Oh, we do have a security problem. TPM one Oh,

01:45:41,371 --> 01:45:45,210
didn't have this problem because with TPM [inaudible] there was no way of

01:45:45,211 --> 01:45:48,270
sending on H macked insecure commands.

01:45:48,540 --> 01:45:52,590
Well actually there is a way of sending on H HMX insecure commands with the TPM,

01:45:52,890 --> 01:45:56,130
but for most of the commands they required in each Mac and didn't make it

01:45:56,131 --> 01:45:56,910
optional.

01:45:56,910 --> 01:46:01,910
TPM two made security effectively optional in everything and to get TPM to into

01:46:02,881 --> 01:46:03,714
the kernel,

01:46:03,720 --> 01:46:08,720
we actually took this option and all of our kernel to TPM communications are

01:46:08,821 --> 01:46:11,670
completely insecure. Now in theory,

01:46:11,880 --> 01:46:16,880
the Colonel is talking directly to the TPM device over the Lopez pin camp bus,

01:46:17,130 --> 01:46:20,790
so this shouldn't be a problem. We should in theory be in a secure environment.

01:46:21,210 --> 01:46:25,230
Unfortunately, a group of Canadians came up with something called the TPM genie,

01:46:25,440 --> 01:46:30,440
which is a snipping device that actually sits between the Colonel sitting up

01:46:31,141 --> 01:46:35,040
here and we talk over the LPC bus to the TPM

01:46:38,390 --> 01:46:40,970
and the TPM Jeannie can just sit on this bus

01:46:43,360 --> 01:46:46,330
and it can actually intercept all of the LPC transmissions.

01:46:46,660 --> 01:46:49,000
It can actually remove transmissions from the,

01:46:49,290 --> 01:46:53,550
so it can stop things getting to the TPM and it can intercept communications for

01:46:53,551 --> 01:46:56,070
the TPM and actually substitute its own replies.

01:46:56,340 --> 01:46:58,950
So this makes it the perfect snooping mechanism,

01:46:58,990 --> 01:47:00,720
something which is completely unsecure.

01:47:01,260 --> 01:47:05,910
Now the good news about TPM genie is that this thing is a hardware device.

01:47:06,000 --> 01:47:09,210
Someone needs physical access to your machine actually to place it on.

01:47:09,540 --> 01:47:13,620
But obviously for devices that are placed in public like voting machines,

01:47:13,621 --> 01:47:15,030
this is a significant problem.

01:47:15,270 --> 01:47:20,270
Hardware security now becomes a significant problem with the TPM and um,

01:47:20,520 --> 01:47:23,700
if you think you can guard your laptop and get it to work,

01:47:23,730 --> 01:47:26,130
there's unfortunately another problem which recently, uh,

01:47:26,131 --> 01:47:31,131
materialized in this lip count bus is actually controlled by the BMC.

01:47:32,550 --> 01:47:34,830
If you could modify the BMC firmware,

01:47:34,831 --> 01:47:39,270
you can actually make the BMC also be a TPM snooper. And as we know,

01:47:39,420 --> 01:47:43,920
modifications of BMC firmware an hour a day rigueur attack of almost everybody.

01:47:44,040 --> 01:47:48,720
So nobody's laptop in this room is now safe from the potential that this thing

01:47:48,721 --> 01:47:49,554
brings.

01:47:53,310 --> 01:47:57,450
Deep does the TPM Jeannie requires soldering or breaking traces?

01:47:57,570 --> 01:47:59,970
It depends how your LPC boss's configured.

01:48:00,180 --> 01:48:03,300
But most of the time they've actually just been able to attach it to the LPC

01:48:03,301 --> 01:48:07,830
lines. So it didn't require soldiering. It just required placing on the lines.

01:48:08,370 --> 01:48:10,110
When you say BMCs in the laptop keys,

01:48:10,111 --> 01:48:15,000
do you mean management engine or the baseboard management controller itself?

01:48:15,450 --> 01:48:20,190
It's connected to the LPC bus. Laptops. Don't have those, Oh, sorry,

01:48:20,191 --> 01:48:22,260
I'm thinking of the server case. Yep. Yep. Okay.

01:48:22,860 --> 01:48:26,640
So a also like kind of [inaudible] probably not,

01:48:26,700 --> 01:48:29,400
will not continue their line of RBC. Um,

01:48:29,580 --> 01:48:33,240
so it true about the SPI or some other of us will be multiple product that

01:48:33,241 --> 01:48:36,740
works. The SPI bus comes out to the BMC as well. Okay. I'm,

01:48:36,741 --> 01:48:40,950
I'm saying if genie is for, uh, for SPI also. Yes, it is. Okay.

01:48:40,980 --> 01:48:41,820
So all gene.

01:48:41,850 --> 01:48:46,680
So the basic problem with these all of these buses is because the low bandwidth,

01:48:46,681 --> 01:48:49,920
low pin count, low everything, they're basically small serial buses.

01:48:50,130 --> 01:48:51,810
It makes interception very easy.

01:48:51,811 --> 01:48:56,040
Provided you can get physical access to the bus or something that sits in the

01:48:56,041 --> 01:48:59,250
middle of the bus, like the BMC for silver class machines.

01:49:02,130 --> 01:49:02,160
Um,

01:49:02,160 --> 01:49:07,160
so the solution to this is to try and come up with a scheme where we can defeat

01:49:07,891 --> 01:49:10,950
the tampering as far as possible by H Mack and encryption.

01:49:10,951 --> 01:49:15,951
So if we H each and encrypt as much as we can going into the TPM and coming out

01:49:15,991 --> 01:49:16,680
of it,

01:49:16,680 --> 01:49:21,060
the genie that's monitoring it could throw the request away,

01:49:21,061 --> 01:49:24,210
but it can't fake the response because it doesn't have access to the HVAC

01:49:24,211 --> 01:49:26,700
parameters. And, uh,

01:49:26,820 --> 01:49:30,240
if we see something that doesn't get a correct response on the TPM,

01:49:30,241 --> 01:49:33,390
we know that there's something up so we can detect the fact that we've been

01:49:33,391 --> 01:49:34,170
tampered.

01:49:34,170 --> 01:49:39,170
So the object of the TPM security patch that I just sent to the list is to try

01:49:40,081 --> 01:49:44,910
and actually get as much physical security for the TPM we can and to provide a

01:49:44,911 --> 01:49:49,750
foolproof method for detecting that. If we got hacked in the boot sequence,

01:49:49,751 --> 01:49:53,860
we at least managed to detect it. Yep. White called the BMC.

01:49:53,861 --> 01:49:58,120
Just do money in the middle attack and talk to the TPM on your behalf. So you,

01:49:58,630 --> 01:50:00,430
so you think you're talking to TPM,

01:50:00,460 --> 01:50:04,270
you're actually talking to a TPM emulator on the BMC account. That's a problem.

01:50:04,271 --> 01:50:08,530
So, but if it can't fake the response back to you,

01:50:08,770 --> 01:50:12,070
you detect the man in the middle. That's the point. How, how do you know?

01:50:12,190 --> 01:50:15,370
You can't fake the response because if the request,

01:50:15,400 --> 01:50:17,860
the request and the response of both H MACT,

01:50:18,190 --> 01:50:21,730
the seed for the H Mack is not known to you, the man in the middle.

01:50:21,940 --> 01:50:24,940
And there's an elaborate sequence I can use from user space.

01:50:25,450 --> 01:50:28,810
It's not known to you. How would you get the seed? Yes. Okay.

01:50:28,811 --> 01:50:30,820
So this is going back to,

01:50:30,821 --> 01:50:34,150
there's actually a right at the bottom of the document,

01:50:34,210 --> 01:50:35,980
there's a discussion of how we do this.

01:50:39,450 --> 01:50:41,670
So this is establishing trust with the TPN.

01:50:42,180 --> 01:50:44,640
So the way that you might be stopping soon, trust you,

01:50:44,641 --> 01:50:49,560
what you think is the TPA. Ah, but each TPM contains both an endorsement key,

01:50:50,100 --> 01:50:51,330
uh, and an endorsement seed.

01:50:51,660 --> 01:50:55,860
So one of the things you have to do when you first get your laptop is to extract

01:50:55,890 --> 01:50:58,770
the endorsement key, which corresponds to the endorsement,

01:50:58,771 --> 01:51:03,771
seed and use quoted values to actually attest to the fact that you're actually

01:51:04,111 --> 01:51:07,560
talking to, you need to store some secrets you got from the TPM.

01:51:07,561 --> 01:51:12,120
It's not a secret, it's a public key which is signed by your TPM manufacturer.

01:51:12,390 --> 01:51:17,160
Yup. So, so before your BMC is correct, ideally yes

01:51:22,710 --> 01:51:23,543
bye

01:51:25,390 --> 01:51:29,050
or you unsold or your laptop desolder BMC,

01:51:29,051 --> 01:51:33,040
then you connect to the TPM, then you extract the keys from it. Right.

01:51:33,610 --> 01:51:37,900
Cause cause, cause if you don't know if BMC was hacked yet or not, right.

01:51:38,530 --> 01:51:42,400
David's theory relied on the fact that the BMC would intercept the communication

01:51:42,401 --> 01:51:43,480
and talk to the TPM.

01:51:44,140 --> 01:51:47,050
So if you're talking to my TPM that's physically in the machine,

01:51:47,051 --> 01:51:49,360
you have no choice but to give back my certificate.

01:51:49,750 --> 01:51:54,250
So there's the only way that a BMC would be able to give you a fake certificate

01:51:54,251 --> 01:51:57,580
if you're a man in the middle is it would actually have to have access to a

01:51:57,730 --> 01:52:01,690
different TPM that was manufactured by the same manufacturer that the

01:52:01,691 --> 01:52:04,390
certificate would then chain back to the manufacturer certificate.

01:52:04,570 --> 01:52:08,590
It's not impossible, but it's a, it's an elaborate attack. It can be done.

01:52:09,060 --> 01:52:14,060
So you can basically provably verify as a key came from a specific TPM.

01:52:15,590 --> 01:52:18,320
But obviously the problem is this.

01:52:18,380 --> 01:52:20,660
If at some point your boot process has been compromised,

01:52:20,900 --> 01:52:23,720
you can't guarantee that the operating system that's doing this validation is

01:52:23,721 --> 01:52:27,860
itself correct. So doing this really solidly requires remote asset station,

01:52:27,920 --> 01:52:31,160
at which point the remote system verifies that the endorsement key chains back

01:52:31,250 --> 01:52:34,130
to the CPM manufacturer. If you call say platforms tickets,

01:52:34,131 --> 01:52:37,130
you can then use that to verify that the endorsement key corresponds to the

01:52:37,131 --> 01:52:39,230
serial number of that system.

01:52:39,890 --> 01:52:44,890
And then you can have a remote system say send you this information to your cell

01:52:45,110 --> 01:52:46,430
or something and then verify

01:52:46,430 --> 01:52:48,530
that this matches what Springs on the bottom of your laptop.

01:52:48,800 --> 01:52:50,690
At which point you can be reasonably certain that the key,

01:52:51,560 --> 01:52:54,980
which you can then verify things back to the UK is

01:52:56,660 --> 01:52:57,350
religious minutes. Yep.

01:52:57,350 --> 01:53:01,190
The good thing about the BMC is that its flash area is reasonably small.

01:53:01,191 --> 01:53:03,920
It does actually have access to it can get access to the memory boss.

01:53:03,921 --> 01:53:05,480
It could in theory corrupt the kernel.

01:53:05,810 --> 01:53:09,860
But to launch such sophisticated attack is probably not within the bounds of

01:53:09,861 --> 01:53:14,390
feasibility. So the most, what it's probably only be doing is either snooping,

01:53:14,510 --> 01:53:17,780
it's basically probably going to be snooping. So getting hold of your secrets.

01:53:18,080 --> 01:53:21,620
Remember some of the secrets that come out of the TPM on early boot are seeding

01:53:21,621 --> 01:53:22,760
the random number generator,

01:53:22,761 --> 01:53:25,940
which means every key you generate from you random from thereafter,

01:53:25,941 --> 01:53:27,200
you may be able to predict.

01:53:27,410 --> 01:53:30,170
Fortunately the TPM isn't the only random number seed,

01:53:30,440 --> 01:53:33,170
but knowing what the TPM put into the, uh,

01:53:33,280 --> 01:53:37,640
the entropy pool helps you actually work out what the sequence of random numbers

01:53:37,641 --> 01:53:41,750
coming out of the kernel is. For instance. Um,

01:53:41,780 --> 01:53:46,040
but the way we would actually detect whether we'd been compromised is to use a

01:53:46,310 --> 01:53:50,810
mech mechanism called the null seed. So a TPM has four different seeds.

01:53:50,811 --> 01:53:54,470
It's got an endorsement seed, uh, a platform seed,

01:53:54,710 --> 01:53:58,340
a storage seed and something called the null seed. The three, uh,

01:53:58,370 --> 01:54:03,140
platform endorsement and storage are all permanent to the TPM. They can be,

01:54:03,290 --> 01:54:06,470
you can issue a TPM command to change them, but if you don't do that,

01:54:06,471 --> 01:54:09,770
they persist across boot. The NLC doesn't persist across boot.

01:54:10,010 --> 01:54:13,010
One of the attacks we actually have to worry about is something sitting on the

01:54:13,011 --> 01:54:15,770
LPC bus can actually assert the reset line,

01:54:15,950 --> 01:54:20,150
which means it can make the TPM think that we've actually done a power on reset,

01:54:20,330 --> 01:54:22,340
in which case everything goes back to the beginning.

01:54:22,520 --> 01:54:26,630
So one possible attack is just to wait until the TPMS collected all of these PCR

01:54:26,631 --> 01:54:27,464
values.

01:54:27,560 --> 01:54:32,560
So to reset and then feed your own bogus values into the TPM so that the PCR

01:54:32,871 --> 01:54:37,220
measurements you get are not what the TPM actually measured on boot.

01:54:37,670 --> 01:54:38,900
So as far as I know,

01:54:38,901 --> 01:54:43,610
the BCR 17 to 22 are got the RTM repair flow,

01:54:43,620 --> 01:54:47,990
so they be a little bit different. So the initialization value is minus one.

01:54:48,380 --> 01:54:50,000
And then when the RTM happen,

01:54:50,060 --> 01:54:52,930
first is zeroed and then there is measurement there.

01:54:52,950 --> 01:54:55,940
So this prevents this effect because it will be after reset,

01:54:55,941 --> 01:54:58,640
it will be Munis minus one. Right.

01:54:58,670 --> 01:55:03,560
But that just means you can't fake the TXT transition easily unless you can get

01:55:03,561 --> 01:55:06,380
access to the specialty XT instruction. Yeah.

01:55:07,490 --> 01:55:09,140
So I haven't actually looked at that attack.

01:55:09,141 --> 01:55:11,540
I don't know whether it's feasible for the BMC or not,

01:55:11,570 --> 01:55:13,610
but I assume you'll be looking at it after this.

01:55:18,410 --> 01:55:20,840
So the point is that, um,

01:55:20,870 --> 01:55:24,470
since we tie everything to the null seed and then I'll see changes on reset,

01:55:24,980 --> 01:55:29,120
well the kernel is going to do is use the null seed or the elliptic curve, uh,

01:55:29,150 --> 01:55:32,540
derivative. The mist P two 56 elliptic curve, the rotor,

01:55:32,590 --> 01:55:35,960
this to establish a secret session with the TPM.

01:55:36,440 --> 01:55:39,950
If the TPM gets reset after that, then all seed will change.

01:55:40,100 --> 01:55:42,950
The Colonel will store what it thought was the null seed,

01:55:43,050 --> 01:55:46,800
an old public key from the TPM in a, in a location.

01:55:46,980 --> 01:55:51,000
And that means that it will be able to attest to this and use a space at some

01:55:51,001 --> 01:55:53,400
point in the future. And if you want to defeat this,

01:55:53,401 --> 01:55:56,250
then you have to get into the kernel and try and change that. And I'll seed,

01:55:56,490 --> 01:56:00,210
it's not beyond the bounds of feasibility, but given the sort of uh,

01:56:00,240 --> 01:56:03,780
low memory capabilities of all of these devices, it's difficult.

01:56:04,620 --> 01:56:05,453
Yup.

01:56:05,590 --> 01:56:06,460
So, um,

01:56:09,230 --> 01:56:12,020
how does the null seed get passed up to the caramel?

01:56:12,390 --> 01:56:15,950
So at what point do you commit to using a particular null seed?

01:56:15,980 --> 01:56:20,980
So the first stops the attacker from waiting until you get to a certain point in

01:56:21,470 --> 01:56:22,640
dude's then doing the reset,

01:56:22,760 --> 01:56:25,310
then remeasuring stuff up to them before then they'll seed.

01:56:25,610 --> 01:56:26,630
It's been since the kernel.

01:56:26,690 --> 01:56:29,990
So this is my attempt to do poor man's attestation using a remote server.

01:56:30,500 --> 01:56:32,060
But kernel itself,

01:56:32,120 --> 01:56:34,970
the first instruction it sends to the TPM has get the all seed.

01:56:35,210 --> 01:56:38,840
But obviously it can't have any security doing that because we don't have any

01:56:38,841 --> 01:56:42,770
trust established with the TPM. So it just believes the value that it's given.

01:56:43,190 --> 01:56:45,350
Oh, it actually gets the gnocchi. We can't get the seed,

01:56:45,351 --> 01:56:48,830
but it gets the banal public key and then it just squirrels that away,

01:56:49,340 --> 01:56:54,200
uses that construct trust and uses it forever after and passes it up to use the

01:56:54,201 --> 01:56:57,020
space as, this was the gnocchi I was given,

01:56:57,290 --> 01:57:01,370
it is then up to use a space to actually ask the TPM to quote that and I'll key

01:57:01,371 --> 01:57:06,320
back to you verify it's the same key and use the endorsement certificate to

01:57:06,321 --> 01:57:08,660
verify the quote so that all passes,

01:57:08,661 --> 01:57:10,490
then everything should have been good from boot.

01:57:10,700 --> 01:57:13,160
So how about the case where during dudes

01:57:15,540 --> 01:57:17,490
there's a malicious bootloader so grubs replaced with them,

01:57:17,610 --> 01:57:18,443
they just been blows up.

01:57:18,690 --> 01:57:23,690
And if four crop starts to Colonel grub deliberately Holtz for a few seconds,

01:57:24,660 --> 01:57:27,720
at which point if someone comes in recess, the TPM programs,

01:57:27,721 --> 01:57:31,170
legitimate values and then goes to the Cardinal at that point when the Colonel

01:57:31,500 --> 01:57:33,540
Gramps, the novelty for the first time,

01:57:33,870 --> 01:57:38,460
it will be the gnocchi post reset as opposed to the gnocchi prerecession. Right.

01:57:38,461 --> 01:57:43,140
So the defeat for versus something I was trying to propose to the UFI security

01:57:43,141 --> 01:57:43,740
team,

01:57:43,740 --> 01:57:47,310
which is that this getting of the Knoll seed should be chained all the way up

01:57:47,311 --> 01:57:51,720
through the firmware. So in theory what should happen is that UEFI,

01:57:51,900 --> 01:57:55,890
and it's first communication with the TPM should also get the gnocchi and it

01:57:55,891 --> 01:58:00,210
should hand this value off to the Colonel at which point we will use this value

01:58:00,211 --> 01:58:02,940
as the gnocchi key and so on and actually verify the TPMS.

01:58:02,941 --> 01:58:04,650
They'll give us thing value and so on,

01:58:04,920 --> 01:58:09,600
which would provide an unbroken chain all the way from the a static route of

01:58:09,601 --> 01:58:13,650
trust that sits in wrong. But this UFI piece is not implemented.

01:58:13,651 --> 01:58:16,710
They still have to socialize it with the UFI security sub team.

01:58:17,580 --> 01:58:21,000
So I have a theory as to how to defeat that. But right at the moment it's not.

01:58:21,120 --> 01:58:25,900
Not in practice. Okay.

01:58:26,620 --> 01:58:31,510
So the North seed is how you verify in user space that you managed to get a

01:58:31,511 --> 01:58:36,400
correct boot by using a TPM quote of the null key and verifying that it's the

01:58:36,401 --> 01:58:40,690
same one that you booted with and the same one that is presenting to you.

01:58:41,020 --> 01:58:46,020
The way you defeat the snipping attacks is to encrypt all significant responses.

01:58:46,211 --> 01:58:50,050
This means that the random number generator response must be encrypted on

01:58:50,051 --> 01:58:50,680
return.

01:58:50,680 --> 01:58:54,820
So anybody snooping the LPC boss can't see the random number the Colonel is

01:58:54,821 --> 01:58:59,680
using. For instance, it also means every TPM transaction has to be H Mac,

01:58:59,710 --> 01:59:04,690
so it can't be interfered with and H makin can be done. And uh, uh,

01:59:04,960 --> 01:59:09,250
the TPM two by establishing a session with the TPM using the null key again,

01:59:09,430 --> 01:59:13,150
which establishes a secret to use a nonsense, a secret to do the H Mac,

01:59:13,330 --> 01:59:16,810
which means that it's impossible again for the snooper to tamper with the

01:59:16,811 --> 01:59:20,350
command or tamper with the response. So effectively we can,

01:59:20,380 --> 01:59:22,600
if we use encryption and H MCing,

01:59:22,810 --> 01:59:27,580
we can get the kernel into a state where if it can't prevent tampering,

01:59:27,581 --> 01:59:30,820
we can at least detect it. Or at least we have a good chance of detecting it,

01:59:31,150 --> 01:59:34,330
the attack where you actually prevent us from detecting it has to be a

01:59:34,331 --> 01:59:38,620
phenomenally sophisticated one. And realistically, um,

01:59:38,710 --> 01:59:40,810
all I really want is, uh,

01:59:40,990 --> 01:59:45,990
people to think about the problem and either agree or disagree that if we really

01:59:46,361 --> 01:59:48,370
want to solve it, this is the only way of doing it

01:59:50,500 --> 01:59:51,820
or write your own way of doing it.

01:59:53,290 --> 01:59:57,310
So I think the other way of doing it is just to use farmer based TPMS rather

01:59:57,430 --> 02:00:01,900
than split TPMS. If we're doing everything inside the chipsets,

02:00:01,990 --> 02:00:06,880
how many people trust the Intel management engine here? It solves this attack.

02:00:06,910 --> 02:00:11,260
It solves this attack. I don't disagree if your TPM were based in an enclave.

02:00:11,290 --> 02:00:12,700
And uh,

02:00:12,760 --> 02:00:16,660
so what Matthew is saying is that the problem is actually the bus, right?

02:00:16,870 --> 02:00:21,580
So physical TPM has to be connected to the, the system over a bus,

02:00:22,240 --> 02:00:25,660
uh, a virtual TPM as if effectively part of the system.

02:00:25,810 --> 02:00:30,160
It can communicate over V different communication channels that are not subject

02:00:30,161 --> 02:00:34,810
to interception by things like TPM genie in the BMC. So this makes a,

02:00:35,470 --> 02:00:37,960
an emulator TPM in this instance,

02:00:37,961 --> 02:00:41,740
more secure than a physical TPM because the,

02:00:42,220 --> 02:00:46,930
the communication channel is theoretically not one subject to probing.

02:00:47,200 --> 02:00:51,580
I'm sure if we advocated for all firmware TPMS at some point somebody would find

02:00:51,581 --> 02:00:54,910
a way of actually attaching something like a genie to a firmware TPM.

02:00:55,270 --> 02:00:59,440
So there is always some method of seeing the communication and maybe a sort of

02:00:59,441 --> 02:01:03,610
separate enclave sitting somewhere. It may be hacking into the enclave. I just,

02:01:03,850 --> 02:01:08,470
I agree. Theoretically it solves the problem. I just worry about practicalities.

02:01:08,680 --> 02:01:10,780
There's another situation that people have been taught there.

02:01:10,840 --> 02:01:13,750
Another solution that people have been talking about implementing and that's

02:01:13,751 --> 02:01:14,710
getting rid of the bus.

02:01:15,400 --> 02:01:19,930
But like there are serious discussions of putting TPMS on the CPU package.

02:01:20,770 --> 02:01:23,890
Well that's equivalent to the, once that's done,

02:01:23,891 --> 02:01:26,890
how do you know whether it's an emulator TPM or a physical TPM?

02:01:27,640 --> 02:01:29,680
It's still got a dashed adastation gate. Okay.

02:01:29,681 --> 02:01:34,681
So I mean in theory that would sort of work as long as you trust.

02:01:35,500 --> 02:01:38,260
At some point, there's gotta be an internal Boston side of the CPU,

02:01:38,261 --> 02:01:40,760
which is probably run by some sort of CPU firmware.

02:01:43,070 --> 02:01:47,390
You've raised up people who can Decapolis CPU and alter it. Well,

02:01:47,391 --> 02:01:51,020
I was more thinking of people who could work out how to do a firmware attack

02:01:51,021 --> 02:01:54,410
against you in the same way they'd done against the BMC. I mean, if we're,

02:01:54,411 --> 02:01:56,090
if we discussed this, you know,

02:01:56,091 --> 02:01:59,330
10 years ago you'd have told me that foamer attacks against the BMC just

02:01:59,331 --> 02:02:01,820
couldn't happen. I would not have told you that. Well, you might not have done,

02:02:01,821 --> 02:02:03,140
but everybody else would have done

02:02:08,700 --> 02:02:08,970
[inaudible].

02:02:08,970 --> 02:02:11,760
Okay. Yeah. But you have the problem with changing your mother. Hang on,

02:02:11,761 --> 02:02:12,660
hang on microphone.

02:02:12,661 --> 02:02:16,290
If you're going to continue talking or handed over to the next guy to ask and

02:02:16,291 --> 02:02:21,120
the guy with the microphone is behind you. So, okay. So, um,

02:02:21,540 --> 02:02:24,510
yeah, I mean it's a good idea about having, um,

02:02:25,010 --> 02:02:26,640
a TPM on the CPU package.

02:02:26,641 --> 02:02:29,790
But what if that's tied into the Intel management engine?

02:02:31,980 --> 02:02:32,813
I mean

02:02:35,520 --> 02:02:39,000
surely the important thing is that systems where the TPM has separate already

02:02:39,001 --> 02:02:43,050
exist and will need to be supported. Yup. Okay.

02:02:43,051 --> 02:02:46,200
So David was next and then you can throw the, Oh, you've got a microphone. See.

02:02:46,290 --> 02:02:49,710
Okay. But David was the ended up pick off of TPM.

02:02:49,711 --> 02:02:53,910
So we already have exploits in Amit, so, so this will not work for,

02:02:55,170 --> 02:02:59,850
uh, for that. But, um, um, what about like I read the,

02:03:00,120 --> 02:03:01,560
in DCG specs, like that's,

02:03:01,590 --> 02:03:05,930
this is out of scope of specification and platform should protect that. Yes.

02:03:05,931 --> 02:03:09,330
So effectively we are, the platform is Linux kernel.

02:03:09,331 --> 02:03:11,880
So we are now trying to protect this platform vendor,

02:03:11,881 --> 02:03:15,870
which hardware vendor should protect that, that, that you cannot intercept. Yes.

02:03:15,900 --> 02:03:18,900
But they didn't say we're stuck. Yeah, that's true.

02:03:19,530 --> 02:03:22,320
It's fine to say it's somebody else's fault when you're hacked,

02:03:22,350 --> 02:03:24,000
but it doesn't help the fact that you're hacked.

02:03:26,940 --> 02:03:30,030
We are on full time. Okay. Any other questions?

02:03:30,980 --> 02:03:31,813
Yep.

02:03:34,040 --> 02:03:38,840
So if I got it correctly or the one thing is doing just TPM parameter encryption

02:03:38,841 --> 02:03:41,600
from user space, which you can do right now by just talking,

02:03:42,050 --> 02:03:43,700
establishing a session with assaulted [inaudible]

02:03:43,900 --> 02:03:47,530
we're doing TPM parameter encryption in each MCing from the kernel.

02:03:47,860 --> 02:03:48,730
So the kernel,

02:03:48,820 --> 02:03:53,650
because it doesn't have a TPM security library pre and previously did none of

02:03:53,651 --> 02:03:54,910
this. Um,

02:03:54,940 --> 02:03:59,410
so what I had to do to get this to work was actually rewrite all of the security

02:03:59,411 --> 02:04:04,000
primitives that sit in the userspace TPM libraries to conform to the Colonel's

02:04:04,001 --> 02:04:06,520
crypto system so we could actually get it all to work.

02:04:06,760 --> 02:04:09,790
It turned out they were as actually a bug in the way the Colonel does elliptic

02:04:09,791 --> 02:04:11,500
curve handling. So if you look,

02:04:11,501 --> 02:04:14,800
I'm not a crypto person cause I have two patches in the crypto subsystem fixing

02:04:14,801 --> 02:04:15,634
this.

02:04:16,670 --> 02:04:19,550
So why would you need the Kronos to do it if use of space can do it justice

02:04:19,551 --> 02:04:20,000
good.

02:04:20,000 --> 02:04:23,180
Because user space is not brought up from the, at the, this is,

02:04:23,181 --> 02:04:26,330
this has to be done from the initial boot when you use the space doesn't exist

02:04:27,080 --> 02:04:29,420
that as part of the boot sequence for a Colonel,

02:04:29,570 --> 02:04:34,340
what we will do is ask the TPM for a random number to seed our round number pool

02:04:34,640 --> 02:04:38,970
and we will start to do certain things with the, to measure and change them.

02:04:39,120 --> 02:04:42,420
So we're actually acting on the sort of static route of trust.

02:04:42,600 --> 02:04:45,750
So the static root of trust comes up through measurements of the Colonel.

02:04:45,930 --> 02:04:49,200
And I'm a wants to use this for actually doing runtime measurements of the

02:04:49,830 --> 02:04:52,380
binary's. So if we have TPM security,

02:04:52,381 --> 02:04:56,580
it has to start in the pure Colonel TPM instructions. Right.

02:04:56,581 --> 02:04:58,500
Which have no user space to be able to use them.

02:05:02,110 --> 02:05:02,140
Yeah.

02:05:02,140 --> 02:05:05,320
As a Colonel boots it has to talk to the TPM and it can't talk through user

02:05:05,321 --> 02:05:08,260
space because user space doesn't exist and it hasn't started yet.

02:05:10,400 --> 02:05:13,820
But at that point you're talking only about extent, extent.

02:05:14,430 --> 02:05:18,360
No, no we're not. We also ask the TPM for random number as I said. Yup.

02:05:19,380 --> 02:05:20,080
Okay.

02:05:20,080 --> 02:05:23,620
So we use various features of the TPM to do various things.

02:05:26,190 --> 02:05:26,520
Okay.

02:05:26,520 --> 02:05:30,510
But also you want to try to avoid the case where it's CVM is resets between the

02:05:30,511 --> 02:05:33,060
point where the panel was booted to that measurements were changed. Yeah.

02:05:33,061 --> 02:05:37,260
We have to guard the w w we're part of a chain that has to guard the

02:05:37,261 --> 02:05:40,710
measurements that were given to us as well. Now, right at the moment,

02:05:40,711 --> 02:05:45,300
unless I can get this mechanism into UEFI, we would, that chain is still broken.

02:05:45,301 --> 02:05:46,740
I can't guard that chain.

02:05:46,770 --> 02:05:49,470
I can't prevent a reset in the UFI phase at the moment.

02:05:50,490 --> 02:05:54,450
That's maybe easier to get into a UEFI, I don't know,

02:05:54,930 --> 02:05:59,460
is a another mechanism to detect resets is to have, uh,

02:05:59,490 --> 02:06:00,540
early boots are actually good.

02:06:00,541 --> 02:06:05,541
If I extend a secret value into a PCR and in the event log only report the

02:06:05,551 --> 02:06:08,310
result in PCR value instead of the extended hash.

02:06:08,790 --> 02:06:13,260
That way a user space can detect where there, uh,

02:06:13,261 --> 02:06:18,261
it is still in a boot sequence that was started off by the UEFI that you'd trust

02:06:18,421 --> 02:06:19,830
or whether it was reset on.

02:06:20,040 --> 02:06:24,030
In the meantime without you having to do any kind of elliptic curve crypto or

02:06:24,550 --> 02:06:27,880
central keep passing or whatever. Right. But if UFI puts a secret value in,

02:06:27,881 --> 02:06:30,730
how is the secret to anybody who has access to the firmware?

02:06:31,980 --> 02:06:35,010
Well, yes, of course. So you'd need to bootstrap it at some point.

02:06:35,070 --> 02:06:38,190
You need a random number to do the random number generator to do that or else

02:06:39,540 --> 02:06:42,120
it's not, well, it's not a random number. It's a secret number.

02:06:42,450 --> 02:06:45,240
It has to be random because there's no secret stuff or more fascist. Readable.

02:06:46,790 --> 02:06:47,900
Yeah, that's the problem.

02:06:48,050 --> 02:06:51,260
And the things that are snooping is snipping the very bus over which the phone

02:06:51,261 --> 02:06:52,094
mobile go.

02:06:53,080 --> 02:06:58,060
Oh, okay. Oh, one last question for me, James.

02:06:59,080 --> 02:07:03,340
Um, we forgot to train and, but I like your idea in general,

02:07:03,640 --> 02:07:05,950
but well, that's a change. Nobody usually likes my

02:07:07,780 --> 02:07:11,500
question to some extent. Uh,

02:07:11,530 --> 02:07:16,000
but the problem is a, as I said in my presentation, we needed to access,

02:07:16,620 --> 02:07:16,660
uh,

02:07:16,660 --> 02:07:21,660
the TPM from the Eric code and how do you want to put crypto stuff into Adelaide

02:07:22,651 --> 02:07:25,270
boot coat in Encore priest kernels

02:07:25,550 --> 02:07:26,060
already there.

02:07:26,060 --> 02:07:30,530
So the proposal for the Linux kernel involve the addition of no crypto code at

02:07:30,531 --> 02:07:34,940
all. The kernel itself already has code for handling elliptic curve keys and AEs

02:07:34,960 --> 02:07:37,540
encryption, which is all we need and for hashes,

02:07:37,541 --> 02:07:41,770
which is all we need to derive the H max and do these are the encryption and

02:07:41,771 --> 02:07:45,760
decryption of secrets. So the kernel itself had all the code. It was just,

02:07:45,761 --> 02:07:49,090
there was one piece in elliptic curve cryptography that wasn't working that I

02:07:49,091 --> 02:07:51,400
had to make work. And there was another though, Oh,

02:07:51,401 --> 02:07:55,200
it didn't have the CFB a streaming site for the TPM users.

02:07:55,201 --> 02:07:58,330
So I actually added that to the kennels crypto system. Um,

02:07:58,960 --> 02:08:02,470
UAF I can do the same thing because secure boot requires exactly the same

02:08:02,471 --> 02:08:06,880
primitives and back UEFI is more capable because it has open SSL sitting in

02:08:06,881 --> 02:08:07,620
there.

02:08:07,620 --> 02:08:11,970
Is it in Cardinal proper or is it in Colonel [inaudible] early,

02:08:12,900 --> 02:08:14,400
uh, uncompressed kernel.

02:08:15,180 --> 02:08:17,130
Oh, so if you're asking,

02:08:17,400 --> 02:08:21,270
so the crypto system currently is not part of the compressed boots at the

02:08:21,271 --> 02:08:26,130
uncompressed bit. This is a problem for us, but at that point, Mike,

02:08:27,480 --> 02:08:28,313
sorry,

02:08:29,120 --> 02:08:32,390
Tableau. So we can actually call EFI to do it. It's give me,

02:08:32,480 --> 02:08:35,180
we can use EFI code to do that. We don't need, we don't need the carnival,

02:08:35,190 --> 02:08:38,040
which is what I do. If you look at the way I modify Ciana core,

02:08:38,041 --> 02:08:40,290
I back to the PKCS seven verify,

02:08:40,291 --> 02:08:45,291
which is what I use to actually do secure boot in my preload or that has no yet

02:08:45,410 --> 02:08:48,560
so at all. So, so Suzanne, that's we should use,

02:08:49,010 --> 02:08:52,190
we should use UFI calls to communicate if TPM,

02:08:52,370 --> 02:08:56,990
no use UFI cools to do crypto because UFI is the extant thing that's

02:08:56,991 --> 02:08:58,610
uncompressed that has the crypto life.

02:08:58,820 --> 02:09:03,530
Okay. What we should do on a non UEFI platforms,

02:09:04,540 --> 02:09:08,830
make them pray and have them effectively discontinued. Yeah.

02:09:09,280 --> 02:09:10,840
These guy has problems with dots.

02:09:16,530 --> 02:09:18,120
All the other [inaudible]

02:09:18,270 --> 02:09:19,890
well the Mike. Okay.

02:09:19,891 --> 02:09:22,950
So what we're getting into as a philosophical question of should we have

02:09:22,951 --> 02:09:25,800
cryptography in the fundamental boot sequence?

02:09:26,130 --> 02:09:30,000
And the answer is that without cryptography we can't establish trust with

02:09:30,001 --> 02:09:32,550
entities whose only trust paths through cryptography.

02:09:32,730 --> 02:09:36,780
So either you do cryptography or you happy with an untrusted operating system.

02:09:37,050 --> 02:09:38,550
These are the only choices before you.

02:09:38,551 --> 02:09:40,590
So if kobu doesn't want to do cryptography,

02:09:40,591 --> 02:09:44,850
it has to be happy with the untrusted operating system or happy trusting the

02:09:44,851 --> 02:09:48,060
fact that it may or may not have been compromised in the boot sequence.

02:09:48,120 --> 02:09:51,060
I wonder what Google will say. Well,

02:09:51,061 --> 02:09:53,880
Google will say that they've already got cryptography in the Titan chip,

02:09:53,881 --> 02:09:58,260
I would imagine. Right. Okay.

02:09:58,261 --> 02:10:02,460
Google is going to say something, not speaking on behalf of Google, but yeah,

02:10:02,461 --> 02:10:04,770
for production systems we don't,

02:10:05,220 --> 02:10:08,040
if we're using Tyson then we don't have TPMS anyway. Yeah.

02:10:08,370 --> 02:10:11,880
But Titan is also cryptographically. It's a cryptographic system,

02:10:11,881 --> 02:10:12,810
but it's self-contained.

02:10:13,170 --> 02:10:16,740
What we're trying to do here is to emulate a self contained cryptographic system

02:10:17,130 --> 02:10:21,690
and that means that all of the participant components have to be able to do the

02:10:21,691 --> 02:10:23,160
cryptography. We need to do that.

02:10:26,680 --> 02:10:31,420
Okay. So I'm completely out of time though. [inaudible] thank you. James.

02:10:31,510 --> 02:10:33,910
Pure hockey. [inaudible]

02:10:54,550 --> 02:10:55,383
[inaudible]

02:11:03,370 --> 02:11:04,203
no,

02:11:04,590 --> 02:11:08,110
Phillip Trico will be presenting a reference integrity measurements for 2:00 PM

02:11:08,350 --> 02:11:09,183
too.

02:11:17,800 --> 02:11:18,633
That's true.

02:11:31,040 --> 02:11:33,200
Um, hi. Uh, my name's Phil. Um,

02:11:33,230 --> 02:11:37,670
I've been working a little while now on some of the TPM user space stuff and

02:11:37,671 --> 02:11:41,120
I've started kind of branching out as that's gotten stable and kind of

02:11:41,121 --> 02:11:42,770
self-sustaining. Um,

02:11:43,070 --> 02:11:45,890
I think this is a particularly timely topic and we've already had a couple of

02:11:45,891 --> 02:11:50,450
questions about kind of similar stuff, uh, in the last couple of talks. So, um,

02:11:50,451 --> 02:11:55,220
hopefully you'll agree with me. If not now, then maybe by the end. So,

02:11:55,700 --> 02:11:58,310
um, I'm gonna make a lot of assumptions and that seems to be perfectly all right

02:11:58,311 --> 02:12:01,760
because y'all are asking really good questions and you probably already know all

02:12:01,761 --> 02:12:05,330
this stuff anyways, uh, in case anyone's interested in terminology,

02:12:05,840 --> 02:12:09,410
that's the words that are the, these are the words I will use. Um,

02:12:09,680 --> 02:12:12,710
other people may use other ones at a station seems to be a particularly hot

02:12:12,711 --> 02:12:16,640
topic and everyone seems to kind of be reinventing some of the terminology.

02:12:16,640 --> 02:12:19,760
So those are the ones I'll talk about. Um, but I won't,

02:12:19,910 --> 02:12:24,740
I don't think I'm gonna really have to go through that for this audience. So,

02:12:25,250 --> 02:12:28,820
um, the, the, the, the important thing though is understanding what these,

02:12:28,821 --> 02:12:33,110
these entities do. The thing I'm calling the verifier, which is the, uh,

02:12:33,140 --> 02:12:35,390
component of the system. If you're doing remote out of station,

02:12:35,570 --> 02:12:37,250
that makes a challenge to a,

02:12:37,580 --> 02:12:41,960
an a test store and receives a attestation evidence, uh,

02:12:42,020 --> 02:12:44,570
this is going to be assigned manifest. The PCR values,

02:12:44,571 --> 02:12:46,940
the TPM code that we all know and love, um,

02:12:47,000 --> 02:12:51,890
and some supporting evidence that is the event log. Um, the verifier,

02:12:51,891 --> 02:12:55,010
of course, must first verify before it does anything particularly interesting.

02:12:55,040 --> 02:12:58,220
It has to trust the information that it's received and it has to know that the

02:12:58,221 --> 02:13:02,120
integrity of that information is intact. This is by bootstrapping trust,

02:13:02,121 --> 02:13:06,230
with assigning key in the TPM, things that, um, y'all have already seen before.

02:13:07,010 --> 02:13:10,040
Uh, but verification is definitely a necessary precondition alone.

02:13:10,220 --> 02:13:15,080
It doesn't get you much. This brings up the notion of appraisal.

02:13:15,230 --> 02:13:17,360
So the verifier receives this information.

02:13:17,690 --> 02:13:22,190
It establishes that it's both from a trusted source and that the integrity is

02:13:22,191 --> 02:13:22,910
intact,

02:13:22,910 --> 02:13:26,690
but it needs to actually inspect this information and figure out what it means

02:13:26,900 --> 02:13:28,190
when you're doing remote attestation.

02:13:28,370 --> 02:13:32,070
If you're not looking at the event log and you're not able to deduce anything

02:13:32,071 --> 02:13:33,540
useful from it all, you know,

02:13:33,630 --> 02:13:37,740
as you've gotten a quote from someone and that you've, uh, that the,

02:13:37,770 --> 02:13:41,010
the event log is associated with the information that came out of that TPM

02:13:41,760 --> 02:13:43,740
appraisal is effectively your trust decision.

02:13:43,830 --> 02:13:48,420
You look at it and you decide whether or not, or willing to do something.

02:13:48,660 --> 02:13:51,540
Typically this is an access control decision. Um,

02:13:51,600 --> 02:13:56,220
but that's not always the case. Um, and so these values, sometimes people will,

02:13:56,430 --> 02:13:58,800
will hold them up next to each other. There are systems that will say, you know,

02:13:58,801 --> 02:14:00,060
your values have changed,

02:14:00,061 --> 02:14:03,720
therefore I may trust you differently than I used to before. Um,

02:14:03,750 --> 02:14:05,490
but really you want something that's, you know,

02:14:05,610 --> 02:14:09,480
like a white list or a black list. You don't want to have your, um, your,

02:14:09,481 --> 02:14:13,650
your trust based on simply previous knowledge of the system. Um, and again,

02:14:13,651 --> 02:14:15,510
knowledge is really important. It's the, the,

02:14:15,511 --> 02:14:19,680
the verifier has to have sufficient information to make this decision.

02:14:19,920 --> 02:14:23,730
And that seems to be where we've all fallen down pretty badly with, with, uh,

02:14:23,760 --> 02:14:24,660
remote out of station.

02:14:24,990 --> 02:14:29,340
The knowledge of what's in this event log and what that means to the larger

02:14:29,341 --> 02:14:32,850
system is something that I think we're, we're particularly missing. Now.

02:14:33,000 --> 02:14:36,240
James was talking previously about some special sauce that IBM has up on.

02:14:36,241 --> 02:14:40,230
SourceForge that's awesome. But we want this for everybody and all the things.

02:14:40,590 --> 02:14:45,590
So really where I want to start is in the software build process and this is

02:14:45,871 --> 02:14:48,300
just, you know, how things kind of work now, right? You get your source code,

02:14:48,330 --> 02:14:51,720
you build stuff, you got some configs that may come in with a, you know,

02:14:51,721 --> 02:14:54,420
from your district packager, it ends up on your a tester.

02:14:54,421 --> 02:14:57,480
This is your laptop or your server or whatever. Uh,

02:14:57,510 --> 02:15:02,100
these things get measured as they're executed, hopefully. Uh, they go into, uh,

02:15:02,110 --> 02:15:03,960
the TPM, which is your reporting mechanism.

02:15:04,410 --> 02:15:08,130
The attest to receive the challenge from the verifier provides the information

02:15:08,160 --> 02:15:10,410
up to the verifier, verify or praises.

02:15:10,411 --> 02:15:13,260
It hopefully has the enough information.

02:15:13,261 --> 02:15:17,250
But in this diagram there's really just a box, uh, and then make some decision.

02:15:18,180 --> 02:15:18,300
Um,

02:15:18,300 --> 02:15:21,750
the thing that's missing here though is the knowledge of what's in this event

02:15:21,751 --> 02:15:23,370
log, what these measurements mean.

02:15:25,160 --> 02:15:28,970
So this brings the topic of a reference, uh, integrity measurement.

02:15:29,030 --> 02:15:33,350
And there were already some discussion here today about the rats effort in IDTF

02:15:33,620 --> 02:15:35,180
other similar work going on at the TCG.

02:15:35,180 --> 02:15:38,560
My understanding is that they're working together. Um, I,

02:15:38,561 --> 02:15:42,620
I hope that's successful. Um, and I'm trying to get into it now,

02:15:42,621 --> 02:15:44,690
which is pretty interesting, but for the most part,

02:15:44,691 --> 02:15:49,040
measurement is a fancy way to say hash sounds a lot smarter. Um,

02:15:49,340 --> 02:15:52,250
maybe that's why we say measurement instead of hash. Um,

02:15:52,310 --> 02:15:55,610
but the room is really just meant to include at the very least this hash, uh,

02:15:55,620 --> 02:15:58,460
and some configured metadata. Um,

02:15:58,610 --> 02:16:03,140
the rim also convene rim with an extra M on the end of it, um,

02:16:03,170 --> 02:16:06,680
which is just the manifest. This is a collection of these, these measurements.

02:16:06,681 --> 02:16:08,210
It could be one or more. Uh,

02:16:08,211 --> 02:16:12,680
and this eventually effectively becomes like the unit of information in your

02:16:12,681 --> 02:16:13,880
appraisal Corpus.

02:16:16,660 --> 02:16:20,530
So we update the diagram there to hopefully instrument the build process so that

02:16:20,531 --> 02:16:24,970
your build artifacts include the identity of the binaries, the config,

02:16:24,971 --> 02:16:28,990
whatever it is you're creating and makes that available to everyone.

02:16:30,310 --> 02:16:30,370
Uh,

02:16:30,370 --> 02:16:34,210
and this allows the verifier to kind of consume this through some mechanisms,

02:16:34,270 --> 02:16:38,410
not saying exactly what, uh, but this is the information that becomes your,

02:16:38,411 --> 02:16:39,730
your appraisal Corpus.

02:16:42,010 --> 02:16:44,740
So I did a bit of a proof of concept with a grub too,

02:16:44,741 --> 02:16:48,550
just to ground this in some reality and to prove to myself that, you know,

02:16:48,670 --> 02:16:49,780
that this can actually be done.

02:16:50,110 --> 02:16:53,830
The idea here is to generate some kind of rim with some information.

02:16:53,831 --> 02:16:57,610
Not saying we're covering the entirety of grub yet, but, uh,

02:16:57,940 --> 02:16:59,140
hopefully as much as we can.

02:16:59,260 --> 02:17:03,040
And so this is really just calculating the identities of these, uh,

02:17:03,070 --> 02:17:05,860
these grub two components as we're building. Um,

02:17:06,100 --> 02:17:08,260
this is independent of the event log. These are just, you know,

02:17:08,440 --> 02:17:10,780
we're not looking at the event log to get this information.

02:17:10,781 --> 02:17:13,330
We're not replaying it and just pulling it out of the event log after the fact,

02:17:13,830 --> 02:17:15,970
want to do this as part of the build process.

02:17:17,380 --> 02:17:19,450
So the next step is to, obviously,

02:17:19,451 --> 02:17:22,120
once I do this calculation to prove to myself that they're actually correct,

02:17:22,150 --> 02:17:23,620
which does require getting the event logs.

02:17:23,621 --> 02:17:27,220
So I'm kind of doing a bootleg version of out of station where I'm doing this

02:17:27,221 --> 02:17:29,020
all in QMU with emulation and you know,

02:17:29,021 --> 02:17:31,840
I just look at the event log to make sure it actually matches what I expect

02:17:32,280 --> 02:17:35,440
these values to be. And really this is about motivating future work.

02:17:35,470 --> 02:17:37,450
I don't want this to be something that's specific to grub.

02:17:37,660 --> 02:17:42,250
This should be all the things, everything that, uh, that that gets installed on,

02:17:42,310 --> 02:17:43,810
on, you know, my Linux systems.

02:17:44,270 --> 02:17:47,050
I'd like to get a room for every one of the things that lands on that.

02:17:47,051 --> 02:17:48,880
This includes serum firmware all the way up,

02:17:49,090 --> 02:17:52,930
but grub is a really good example because it kind of fits in nicely and it's

02:17:52,931 --> 02:17:54,310
close enough to UEFI that, uh,

02:17:54,520 --> 02:17:57,400
that could still get the event log without having to have the latest bleeding

02:17:57,401 --> 02:18:01,900
edge kernel to, to pull it out. Um, so to, to bootstrap this stuff,

02:18:01,901 --> 02:18:05,170
I started, uh, begging, stealing and borrowing from a bunch of the,

02:18:05,171 --> 02:18:07,630
the TPM user space, uh, stuff that we've been doing,

02:18:07,900 --> 02:18:11,650
pulling a test script from some of the UI. Uh, UEFI integration that I've done.

02:18:12,010 --> 02:18:16,840
This is, uh, this is the only reason it was possible. Software, TPM QMU Oh,

02:18:16,841 --> 02:18:21,490
VMF excellent stuff makes it so you don't need separate hardware to actually do

02:18:21,491 --> 02:18:25,090
this testing. It's, it's brilliant. Um, uh,

02:18:25,150 --> 02:18:28,000
ported an example code or a bunch of example code from, uh,

02:18:28,010 --> 02:18:29,260
this UEFI stuff as well.

02:18:29,260 --> 02:18:32,560
So that in the grub shell I could just dump the event log and capture it nice

02:18:32,561 --> 02:18:36,910
and easy. Um, this is in a, uh, a branch that I've got up on get hub now.

02:18:37,150 --> 02:18:40,090
It's very, very simple. It's incomplete. Uh,

02:18:40,120 --> 02:18:43,780
but if there is any interest in kind of moving tools like this integral, uh,

02:18:44,110 --> 02:18:46,360
I'm, I'm definitely open to the, to the possibility.

02:18:48,310 --> 02:18:51,040
And of course we've gotta be able to calculate the identity,

02:18:51,120 --> 02:18:54,730
a hash of these components. Um, Oh,

02:18:54,731 --> 02:18:59,020
this is a wonderfully, uh, drowned out color code there. Um,

02:18:59,440 --> 02:19:03,760
but this is meant to be a, a sequence diagram showing the interaction between,

02:19:03,850 --> 02:19:04,840
or really the, the,

02:19:04,841 --> 02:19:07,540
the events that are happening as grubbed is coming up and processing.

02:19:07,541 --> 02:19:10,540
So this is literally, if you were to look at the event log,

02:19:10,570 --> 02:19:13,720
you would be seeing these events as they're recorded. So, you know,

02:19:13,721 --> 02:19:16,180
firmware stuff happens in the beginning. We'll kind of ignore that,

02:19:16,181 --> 02:19:20,310
but the firmware kicks off a grub through the boot 60, 40,

02:19:20,311 --> 02:19:23,650
if I executable. And of course, uh,

02:19:23,651 --> 02:19:25,930
the UEFI will measure this before it executes it.

02:19:25,931 --> 02:19:29,690
So the measurement goes into the, and it records the event, the event log,

02:19:30,020 --> 02:19:32,240
and then we see this kind of happen ad nauseum.

02:19:32,241 --> 02:19:36,500
This is just how the measurement process works. Uh, grub itself comes up,

02:19:36,530 --> 02:19:40,910
loads the normal module. Then you see all the processing for the dependencies.

02:19:41,180 --> 02:19:44,510
These ended up measured, recorded in the event log, measured again,

02:19:44,780 --> 02:19:48,970
recorded in the event log. Uh, and that's this kind of this loop down here. Uh,

02:19:48,971 --> 02:19:51,860
and finally then, you know, grub hands off to something else. Whatever,

02:19:51,920 --> 02:19:54,800
you know, your, your grub config, uh, might be that thing.

02:19:54,830 --> 02:19:56,540
I'm a little scared of grub config.

02:19:56,541 --> 02:19:59,030
So really I just had this thing dropped straight to the, uh,

02:19:59,031 --> 02:20:02,330
the shell after that point. And it was sufficient, at least for the, um,

02:20:02,390 --> 02:20:06,410
for the example. So these are, this is a, um,

02:20:06,470 --> 02:20:10,850
a snapshot of an event that's coming out of the event log, uh, as dumped by the,

02:20:10,851 --> 02:20:15,530
the grub, uh, grub shell. Um, so the, the test for this is just running,

02:20:15,590 --> 02:20:20,300
you know, OBM F, uh, in QMU with a software TPM backing it up. And,

02:20:21,050 --> 02:20:23,510
uh, the, so the event numbers at the top, there are the 33.

02:20:23,511 --> 02:20:28,100
This was the 33rd event. Uh, the type there is actually from the EFI, uh,

02:20:28,310 --> 02:20:29,360
application measurement.

02:20:29,361 --> 02:20:33,770
So that's the type a when that you'll see when EFI kicks off a,

02:20:33,771 --> 02:20:38,570
an EFI application, either from, you know, the EFI shell or in this case,

02:20:38,990 --> 02:20:42,680
uh, we're using the, you can see the name down here, um, boot ex, uh,

02:20:42,700 --> 02:20:47,690
64 [inaudible] with a space in between each one cause wide characters. Um,

02:20:48,320 --> 02:20:52,070
but the thing that we care about here is the shot two 56. Um,

02:20:52,430 --> 02:20:56,090
that's it right there. And it turns out if you were to just run

02:20:57,760 --> 02:21:02,240
[inaudible] through a shot, two 56, some, you will not get the right answer. Um,

02:21:02,270 --> 02:21:03,110
for whatever reason,

02:21:03,111 --> 02:21:07,190
UEFI does some stuff where it only measures parts of the executable. Um,

02:21:07,280 --> 02:21:12,230
I'm sure there's a reason there. Uh, but I don't know what it is. I'm sorry.

02:21:15,350 --> 02:21:16,940
It's the loaded segments. It's tough.

02:21:17,030 --> 02:21:20,810
The ones that aren't as loaded in the segments just don't get that. Well,

02:21:20,811 --> 02:21:23,630
there you go. Like I said, I'm sure there's a reason I got over there and I say,

02:21:24,050 --> 02:21:28,280
thanks Peter. Um, but what I did was actually steal a bunch of code from,

02:21:28,310 --> 02:21:31,110
I mean, borrow a bunch of code from, uh, uh,

02:21:31,130 --> 02:21:35,900
the a secure boot signing tool and that had all the knowledge, uh, needed.

02:21:35,901 --> 02:21:38,390
All I had to do was instead of having it, uh,

02:21:38,420 --> 02:21:42,020
spit out a PKCS seven structure at the end,

02:21:42,290 --> 02:21:45,630
I just lopped all that code off and just had a print out the, uh, uh,

02:21:45,650 --> 02:21:49,340
the hash that it calculates. And you can see the, you know, there it is.

02:21:49,341 --> 02:21:54,320
That's the identity. We've got the first, the first grub executable, um, uh,

02:21:54,350 --> 02:21:57,950
measurement, uh, pre-calculated. Uh,

02:21:57,951 --> 02:22:01,660
also just an example of showing that loop previously. Um, the,

02:22:01,661 --> 02:22:04,670
the module that I wrote, the drops into grub to show this stuff on the,

02:22:04,671 --> 02:22:08,060
in the grub shell is called TPM CMD dot mod. Uh,

02:22:08,061 --> 02:22:11,150
and so in order to actually dump out the event log, I had to manually load that,

02:22:11,151 --> 02:22:11,570
you know,

02:22:11,570 --> 02:22:14,870
ins mod on the grub shell to have it pop up and it shows up in his event. Uh,

02:22:14,871 --> 02:22:16,460
just like all the other modules and you'll see,

02:22:16,461 --> 02:22:20,450
you can see through the event log, you know, this is event 48 grub was loaded,

02:22:20,451 --> 02:22:24,140
it was the 33rd. There were however many events in between that,

02:22:24,260 --> 02:22:28,140
that were a bunch of being loaded and whatever else grew up was doing. Uh,

02:22:28,141 --> 02:22:31,790
but you know, for one specific module, we'll again, we'll grab the chuff two 56,

02:22:32,130 --> 02:22:35,190
um, this time it is just a nice simple SHA hash.

02:22:35,220 --> 02:22:38,220
Thank you grub for doing simple things. Um,

02:22:38,280 --> 02:22:42,780
so as far as integration into a build system goes, that's a lot easier. Um,

02:22:42,810 --> 02:22:45,000
but you know, UEFI wasn't impossible.

02:22:46,760 --> 02:22:49,160
So the output from this, the proof of concept,

02:22:49,161 --> 02:22:52,760
hopefully is a discussion about what all this means and how we integrate this

02:22:52,761 --> 02:22:56,930
into the larger ecosystem. Uh, for grub, it's possible. Um,

02:22:56,990 --> 02:23:00,980
I've ignored a lot of stuff. Uh, but, uh, you know,

02:23:00,981 --> 02:23:05,330
the worst case in this, uh, so far is not an unsolvable problem. Worst case was,

02:23:05,380 --> 02:23:07,850
was UEFI PEs here and, uh,

02:23:08,720 --> 02:23:12,080
Peter will help or will help us figure out, uh, all, all the ins and outs there.

02:23:13,100 --> 02:23:16,040
Um, I had to cannibalize some stuff. It's not really a sustainable way to do it,

02:23:16,041 --> 02:23:18,860
but it can be, you know, done in a reasonable way.

02:23:18,861 --> 02:23:23,270
I'm sure I already have that package. The other one, right.

02:23:23,271 --> 02:23:27,510
So there's all this code is, you know, in the UEFI, like the in EDK too, right?

02:23:28,010 --> 02:23:30,650
[inaudible] has the code that loads this stuff up. It does the hashing.

02:23:30,651 --> 02:23:34,190
The problem is that it's buried really deep in there. And I've heard, you know,

02:23:34,191 --> 02:23:37,430
maybe more than one instance hiding in the, uh, in the source code too. So it's,

02:23:37,690 --> 02:23:41,030
it's, that would've been a lot of spelunking that I just kind of sidestepped.

02:23:42,320 --> 02:23:44,120
Um, obviously more questions than answers. Uh,

02:23:44,121 --> 02:23:46,490
really we want to know how deep this appraisal process can go.

02:23:46,700 --> 02:23:50,210
So for grub and maybe some, you know, clothes store stuff, uh,

02:23:50,211 --> 02:23:52,580
this can get us a link back to, you know,

02:23:52,581 --> 02:23:56,300
a binary and binary that comes from a source that we may or may not trust

02:23:56,690 --> 02:23:59,990
marrying something like this with a reproducible builds so that we could

02:23:59,991 --> 02:24:04,200
actually delve down all the way to, you know, source level, uh,

02:24:04,201 --> 02:24:07,460
of kind of transparency. I think that's really the ultimate end goal.

02:24:07,790 --> 02:24:10,100
The end goal should be that I can look at my event log,

02:24:10,101 --> 02:24:13,220
I can get this rim that came from, you know, whoever produced that.

02:24:13,370 --> 02:24:16,220
I can verify that it's the same thing. And if I really want to,

02:24:16,221 --> 02:24:18,890
I can grab the right version of the source code, build it,

02:24:18,891 --> 02:24:23,870
and get the output with the exact same hash. This is just tooling, right?

02:24:23,900 --> 02:24:26,180
So you need tools to generate rims in the right formats.

02:24:26,330 --> 02:24:29,360
We've got to do all this hashing, uh, the formats are still something that's,

02:24:29,361 --> 02:24:30,290
you know, under discussion.

02:24:30,291 --> 02:24:32,600
Most of that's kind of at the information model layer.

02:24:32,601 --> 02:24:36,650
So it's not even really a concrete format right now. Um, so there may be some,

02:24:36,651 --> 02:24:38,450
some opportunity to influence that as well.

02:24:39,180 --> 02:24:42,650
And of course the last bullet here is probably one of the harder problems is how

02:24:42,651 --> 02:24:45,770
do we go about distributing all this stuff? How do we communicate this from,

02:24:46,040 --> 02:24:49,940
you know, our build infrastructure at like kind of the district level out to,

02:24:50,030 --> 02:24:53,930
you know, all the, the, the end consumers. Um, still an open question.

02:24:53,990 --> 02:24:55,550
It's a big infrastructure problem I think.

02:24:55,900 --> 02:25:00,790
And it could be an interesting one to take a crack at. That's it.

02:25:02,080 --> 02:25:04,840
So, you know, anyone who wants to chat about this stuff fun, you know,

02:25:04,841 --> 02:25:08,790
at any scale, I think grubs, probably a pretty good first, uh, uh,

02:25:08,830 --> 02:25:10,300
place to start integrating this stuff.

02:25:10,301 --> 02:25:13,750
It's kind of at the lowest level that we can access without having to go through

02:25:14,140 --> 02:25:15,820
the UEFI forum, which is a little scary.

02:25:17,400 --> 02:25:17,840
Mm.

02:25:17,840 --> 02:25:20,360
I have a question. What kind of problems do you have?

02:25:20,630 --> 02:25:24,100
We've got up CFG um, it's complicated.

02:25:24,160 --> 02:25:25,810
That's really all it is right now.

02:25:25,811 --> 02:25:29,080
If you look at the event log after grub is processed, the config file, uh,

02:25:29,090 --> 02:25:32,860
you'll see an event for every single thing that came out of out of the, uh, uh,

02:25:32,861 --> 02:25:37,180
the, the, the config file. Um, that's not bad, right?

02:25:37,181 --> 02:25:40,630
It's thorough. It's very thorough. Uh, and it's going to give you a lot of REMS,

02:25:40,631 --> 02:25:40,781
right?

02:25:40,781 --> 02:25:44,920
You have to have one reference integrity measurement for each one of those steps

02:25:44,921 --> 02:25:48,790
in the, in the config file. If you automated, it's probably tractable,

02:25:49,000 --> 02:25:53,290
but it brings up the question of how many paths are there through.

02:25:53,990 --> 02:25:54,823
Oh

02:25:55,480 --> 02:25:57,850
yeah. So I, you know, I, I,

02:25:57,910 --> 02:26:00,100
I got the hashes on this working on the plane right out here.

02:26:00,101 --> 02:26:04,780
So the config file was, you know, future work. So just to comment on the hashes,

02:26:04,781 --> 02:26:07,450
I'm sure the two signing tools, SB sign and P sign,

02:26:07,570 --> 02:26:10,400
we'll be happy to put the hash. Is there any reason that we didn't?

02:26:10,570 --> 02:26:12,850
Just because we didn't think anybody had a useful though. Yeah, completely.

02:26:12,851 --> 02:26:16,330
I didn't mean to, you know, I wasn't casting what, sorry?

02:26:16,630 --> 02:26:21,160
PE sign dash capital H. okay. I don't use P sign. I didn't use SB sign.

02:26:21,520 --> 02:26:23,530
Yeah, I, again, I was the only one that I had.

02:26:23,531 --> 02:26:26,950
I didn't go as deep as I could have there and I didn't need to cast dispersions

02:26:26,951 --> 02:26:28,750
in any way there. It's just a, you know,

02:26:28,751 --> 02:26:32,320
to get the information I did what I did may not have been the easiest route. Um,

02:26:32,380 --> 02:26:35,410
and I'd be happy to find an easier path. Sorry,

02:26:35,411 --> 02:26:36,550
just going back to your question a moment,

02:26:36,640 --> 02:26:40,570
it's one of the other problems with crop config is variable expansion. Hmm.

02:26:40,930 --> 02:26:43,600
Yeah. So pre calculation with variable expansion sounds

02:26:43,720 --> 02:26:44,553
tough.

02:26:44,680 --> 02:26:49,680
So one of the discussions that I had on all this FC was maybe use a VFS for

02:26:50,531 --> 02:26:55,020
providing some PCRs, a volume and a rechart was,

02:26:55,570 --> 02:26:58,000
uh, already able to get from vendors, PCR zero.

02:26:58,240 --> 02:27:02,890
Oh, right, right. So the, uh, fluffy and all that stuff has some of this, um,

02:27:02,950 --> 02:27:04,900
it's, you know, there's always more to do that, right?

02:27:05,170 --> 02:27:09,070
Yeah. But he started and he's like probably the best, uh,

02:27:09,250 --> 02:27:11,290
place and the most resorts right now.

02:27:11,620 --> 02:27:16,570
So if there will be some ecosystem which can integrate with the VFS and provide

02:27:16,571 --> 02:27:18,610
more measurements, definitely. That would be cool.

02:27:18,800 --> 02:27:19,900
I agree completely.

02:27:29,620 --> 02:27:33,610
Oh, did you try anything with DXT or other? Uh,

02:27:34,270 --> 02:27:39,190
I saw I started TM related. Sorry, one more time. Did you try,

02:27:39,670 --> 02:27:44,320
uh, Intel TXT or any hardware rooted trust? Uh,

02:27:44,500 --> 02:27:48,760
in a past life I've, I've done some stuff with TXT and with,

02:27:49,520 --> 02:27:53,140
uh, calculating PCR, 17, 18 and 19 values. It's possible.

02:27:53,141 --> 02:27:56,800
I've got some reference code, but it's kind of unrelated. Not as in,

02:27:56,860 --> 02:28:00,910
in GrubHub is old hours. No, not at all. Not for this.

02:28:01,250 --> 02:28:02,083
Okay.

02:28:11,310 --> 02:28:16,170
And the questions. Great.

02:28:16,200 --> 02:28:17,900
Thank you. We finished. Thank you.

02:28:21,910 --> 02:28:22,743
[inaudible]

02:28:23,700 --> 02:28:24,533
okay.

02:28:31,810 --> 02:28:36,370
Now there will be two talks made by [inaudible] cool.

02:28:37,480 --> 02:28:41,710
One on your five hour measured boot using [inaudible]

02:28:43,290 --> 02:28:48,290
and then next one will be TPM to say zero a Linux CSFs interface.

02:29:39,740 --> 02:29:40,550
[inaudible] [inaudible]

02:29:40,550 --> 02:29:44,030
um, I can start with UFI. No problem. Like I, I'm not sure about the

02:29:45,940 --> 02:29:46,773
[inaudible]

02:29:51,340 --> 02:29:54,550
so yeah, I will bore you for next 40 minutes. So,

02:29:55,030 --> 02:29:59,770
because I have two presentations, so maybe this is really the most, uh,

02:29:59,800 --> 02:30:04,630
more interesting. Um, so maybe can we start or, yeah, sure.

02:30:05,380 --> 02:30:09,520
So, so I will talk about non-New. FYI, our measured boot, uh,

02:30:09,521 --> 02:30:13,900
is incurred with grub and TPM or whatever else. We will propose. Uh,

02:30:13,901 --> 02:30:14,950
my name is [inaudible].

02:30:15,080 --> 02:30:19,270
I'm founder and embedded system consultant at [inaudible] Poland based company.

02:30:19,540 --> 02:30:22,900
I'm from open source femur ecosystem. Um,

02:30:23,620 --> 02:30:27,130
so yeah, so boot process right now is,

02:30:27,400 --> 02:30:31,540
it's integrity is dominated by UFI compliance systems and,

02:30:31,541 --> 02:30:33,970
but there are some few more uh,

02:30:33,971 --> 02:30:38,530
providers or platforms with filmer that care, uh, about something different.

02:30:39,490 --> 02:30:42,700
Um, so we have core bowtie reboot. There is all boot,

02:30:42,730 --> 02:30:45,850
which is rusty implementation of Corbould. There is UBU,

02:30:45,851 --> 02:30:48,880
there is Linux boot C bios important on,

02:30:49,060 --> 02:30:52,090
on some probably cloud environments.

02:30:52,570 --> 02:30:56,470
And there is also still the Gaza bios and UFO or UFI CSM,

02:30:56,620 --> 02:30:59,200
which we still have. Um, there's also ski boots,

02:30:59,230 --> 02:31:03,820
but I believe this problem was already solved in different way. Um,

02:31:04,120 --> 02:31:09,070
so existing solution, uh, that I'm aware of, um, our petite booth,

02:31:09,071 --> 02:31:12,880
which doing measuredK exec two links or not doing yet, but,

02:31:13,090 --> 02:31:16,000
but can do because everything is there. Um,

02:31:16,030 --> 02:31:20,790
and there is trusted grub which use, um, uh, this DCG extension,

02:31:20,880 --> 02:31:25,380
uh, interrupt one a, um, which I will talk a little bit later.

02:31:25,860 --> 02:31:29,100
Um, so, but it requires someone to, uh,

02:31:29,160 --> 02:31:33,960
install that interrupt before. And there is some effort to,

02:31:34,170 --> 02:31:37,290
from BSD ward harder than BSD call for participation.

02:31:37,291 --> 02:31:42,291
There is a effort to cause BSD systems also boot on non UFI compliance systems.

02:31:42,301 --> 02:31:46,490
So they care also about that. Um,

02:31:46,491 --> 02:31:51,140
so who should care? Yeah, Chromebooks I believe. Um, if they, uh,

02:31:51,170 --> 02:31:55,280
they use the, the losers wants to repurpose the devices, uh,

02:31:55,281 --> 02:31:57,630
then they use the bios. Uh,

02:31:57,631 --> 02:32:01,370
and then maybe if they would like to have measured both, they, uh,

02:32:01,371 --> 02:32:04,760
they need that. Um, of course users of progress,

02:32:04,761 --> 02:32:07,910
you mentioned film or stocks or these straws, um,

02:32:07,940 --> 02:32:12,940
with like a boot and maybe some closet called providers where see bios in QM

02:32:12,951 --> 02:32:17,360
ways use it. So, um, what we really need, um,

02:32:17,420 --> 02:32:22,110
so we have this, this study group, core root of trust for measurement.

02:32:23,160 --> 02:32:27,600
Um, and we execute the measure extent PCR and execute some phase.

02:32:28,560 --> 02:32:30,960
Uh, so this is NT in here.

02:32:30,961 --> 02:32:34,710
We have non UFI complaint [inaudible] we do the same. We're doing,

02:32:34,800 --> 02:32:38,820
we go into the bootloader and doing the same twice. And, uh,

02:32:38,821 --> 02:32:42,060
what we really need, uh, to, um,

02:32:42,790 --> 02:32:45,010
make this chain work, uh,

02:32:45,580 --> 02:32:48,910
for all systems, not only UFI,

02:32:50,320 --> 02:32:54,460
so what, who can care like Linux B as the alpha based or ISS

02:32:56,160 --> 02:33:00,770
and others. So what's, uh, what's the state right now? So incredible.

02:33:00,840 --> 02:33:05,620
We have this, uh, measure extent, uh, execute chain with V boot.

02:33:06,190 --> 02:33:09,910
Uh, but finally we allowed some payload, uh, which is already measure it.

02:33:09,911 --> 02:33:13,990
And from that payload we have to do something. Sometimes it does see bios, um,

02:33:14,110 --> 02:33:17,800
and see bios installed, uh, this, this, this CG extension,

02:33:18,010 --> 02:33:21,340
but then have to jump to something that will use that.

02:33:21,610 --> 02:33:25,000
And most of the systems simply do not implement that. Um,

02:33:25,720 --> 02:33:29,890
[inaudible] seems to have different approach and they probably will use

02:33:30,130 --> 02:33:34,990
something similar to that. It would so that it will be measured at K K exec. Um,

02:33:35,020 --> 02:33:38,830
but it's not, it's not there yet. Uh, yeah,

02:33:39,860 --> 02:33:44,600
I just make an observation which is that, um, sort of further measure,

02:33:44,601 --> 02:33:49,460
extend boot isn't quite enough. We need measure, extend log and then boots.

02:33:49,461 --> 02:33:53,780
So we can actually verify the log. This is assumption that if we're doing this,

02:33:53,781 --> 02:33:55,460
we also log okay,

02:33:55,490 --> 02:33:59,000
but where the log is and how we get to it as the master has bit of all of this,

02:33:59,001 --> 02:34:00,920
it's what causes eyes.

02:34:00,921 --> 02:34:04,220
So we have this ACPI space where we uh,

02:34:04,230 --> 02:34:06,860
this reserve Aria where we put this information.

02:34:06,861 --> 02:34:11,000
So Phillip probably used that during the, during the implementation.

02:34:11,001 --> 02:34:15,860
As long as we can get it, it's fine. So for TPM to the, uh,

02:34:16,160 --> 02:34:18,100
implementation of the log, very UEFI

02:34:18,100 --> 02:34:22,570
specific, but there's some patches from in the corporate universe.

02:34:22,990 --> 02:34:27,990
See bios is using is re-purposing the TPM 1.2 ACPI table to provide the link to

02:34:28,511 --> 02:34:29,950
a TCG two event log.

02:34:30,160 --> 02:34:33,910
Yes, we are already using that, but my problem is that, um,

02:34:34,000 --> 02:34:36,760
this chain ends at sea bios entries.

02:34:37,340 --> 02:34:41,920
Thanks. In terms of putting stuff up, we have a potential solution.

02:34:42,320 --> 02:34:43,153
My answer.

02:34:43,670 --> 02:34:44,503
Okay.

02:34:46,520 --> 02:34:50,450
So in case of grub, uh, as a bootloader, it depends, um,

02:34:50,480 --> 02:34:54,950
how and what we bought. So it is possible to put grub into core as a payload.

02:34:55,580 --> 02:35:00,350
Uh, so in that way it's verified, um, during the funeral verification phase.

02:35:00,530 --> 02:35:04,040
But still then from grab, we have to jump to something at the VA. If we have,

02:35:05,000 --> 02:35:09,170
um, a kind of legacy system which rely on MPR, uh, then,

02:35:09,230 --> 02:35:13,160
then we, there is no support for because grub will not install the,

02:35:13,220 --> 02:35:15,950
this interrupt handler and there is no other way.

02:35:15,951 --> 02:35:19,580
So get up other way could also doK exec. Um,

02:35:19,610 --> 02:35:22,640
so C bios provide that interface as I said,

02:35:22,670 --> 02:35:27,260
and trusted grab to use that. I'm not sure why trusted grab two,

02:35:27,261 --> 02:35:30,320
like it's different implementation and I'm not sure how,

02:35:30,800 --> 02:35:35,570
if it is possible to uh, take those changes and somehow pour thought to,

02:35:35,960 --> 02:35:36,920
um, to grow up.

02:35:38,800 --> 02:35:43,180
So the issue there is that the codes that was in trusted grub to derive from

02:35:43,181 --> 02:35:44,320
code that was entrusted grub,

02:35:44,350 --> 02:35:47,410
which was written by a Japanese research group that's I haven't been able to get

02:35:47,411 --> 02:35:49,840
in contact with and which I'm not sure it currently exists.

02:35:50,050 --> 02:35:52,270
So there's no ease to the copyright assignments of the FSF.

02:35:53,110 --> 02:35:55,360
So it needs to be rewritten basically. Okay.

02:35:55,540 --> 02:35:58,270
Unless someone can find the people who wrote it in the first place and get them

02:35:58,271 --> 02:35:59,104
to sign paperwork.

02:35:59,470 --> 02:36:00,430
Oh, we were relaxed here. Right?

02:36:01,360 --> 02:36:03,640
Well, we relaxed copyright assignment for the grub project,

02:36:03,641 --> 02:36:04,630
which is not impossible.

02:36:08,050 --> 02:36:12,250
So other problem with a trusted Grupp too is it only supports right now, 1.2,

02:36:13,360 --> 02:36:15,280
it does not support 2.0. So,

02:36:15,281 --> 02:36:20,110
and there there's like wrong long thread above that. Yeah. So exactly.

02:36:20,410 --> 02:36:25,410
So thrust the gap using this TCG PC client specific implementation for

02:36:26,051 --> 02:36:30,310
conventional bios. Um, and yeah, uh, this,

02:36:31,180 --> 02:36:34,450
so it supports only 1.2 about this. I believe this,

02:36:34,480 --> 02:36:38,620
this specification is not, uh, uh,

02:36:38,740 --> 02:36:42,370
only about 0.1 0.2, but it's in general. So it can be,

02:36:42,730 --> 02:36:47,290
it can match also 1.2 and 2.0 and uh, to just define,

02:36:47,410 --> 02:36:51,400
to quote the specification about this interrupt, uh,

02:36:51,610 --> 02:36:55,840
it's allows the color of the interface to have direct access to our limited set

02:36:55,870 --> 02:36:58,930
set of TSS functions and pass through to the TPM.

02:36:59,080 --> 02:37:03,460
Of course these functions are installed by some previous stage. Um,

02:37:05,210 --> 02:37:09,410
yeah, so there is school discussion materials, Matthews, there. Um,

02:37:09,440 --> 02:37:13,250
various other people are there on this issue on, on, on GitHub.

02:37:15,120 --> 02:37:16,200
Yeah. So

02:37:16,470 --> 02:37:18,030
maybe this is like, um,

02:37:18,090 --> 02:37:23,090
more discussion stuff then than really proposal because I believe that I see

02:37:23,791 --> 02:37:27,600
only two solutions for, for, for my problem. Um,

02:37:27,930 --> 02:37:29,250
so first of all, I,

02:37:29,251 --> 02:37:33,780
I don't have any code or any documentation how [inaudible] managed to perform

02:37:34,180 --> 02:37:37,590
measure measured CAD K exec or, or even, maybe it's not there yet,

02:37:37,620 --> 02:37:42,090
but what would be the plan? And second, I believe this, this, uh,

02:37:42,810 --> 02:37:44,910
yeah, that's great.

02:37:51,720 --> 02:37:51,790
[inaudible]

02:37:51,790 --> 02:37:55,750
so you're correct to say that petty boot doesn't do this yet. Uh,

02:37:55,840 --> 02:38:00,040
what it will do is use theK exec file load, Cisco,

02:38:00,520 --> 02:38:01,000
um,

02:38:01,000 --> 02:38:05,560
to currently just use this blind K exec that will then go through Ima,

02:38:05,710 --> 02:38:10,360
um, the integrity and management architecture and that will do, um,

02:38:10,900 --> 02:38:15,190
your measurement and also the verification if I've understood it correctly.

02:38:15,220 --> 02:38:17,920
Otherwise, some of my comments are going gonna yell at me when I get, yeah,

02:38:17,950 --> 02:38:21,820
yeah, no, that's, that's the answer to my question. Yeah.

02:38:22,060 --> 02:38:26,890
That says cold verifies that whatever you're loading next to signed and trusted

02:38:27,880 --> 02:38:28,620
and yeah.

02:38:28,620 --> 02:38:30,930
So, so I believe the same. Um,

02:38:30,960 --> 02:38:34,470
the same way Linux boots should implement, implement that.

02:38:34,860 --> 02:38:35,910
And I know those guys.

02:38:35,911 --> 02:38:40,020
So probably we'll try to kind of align this effort because it doesn't make sense

02:38:40,021 --> 02:38:44,700
to have many other implementations. So my, my question are, um,

02:38:45,330 --> 02:38:49,140
is there any other solution that I'm missing for, for like gas and on UFI,

02:38:49,141 --> 02:38:53,040
our systems? Uh, does it make sense, uh, uh,

02:38:53,070 --> 02:38:57,280
to still implement this old 2012 staff or, or in,

02:38:57,770 --> 02:39:00,540
in [inaudible]? Um, yeah.

02:39:00,541 --> 02:39:03,120
And can we really exec everything and for example,

02:39:03,121 --> 02:39:05,070
how happy BSD systems will be with that.

02:39:06,220 --> 02:39:07,210
So in terms of the,

02:39:07,630 --> 02:39:10,870
I don't think there's any other obvious solutions you're missing. Um,

02:39:11,260 --> 02:39:15,790
so in terms of does using the into one 80 thing make sense?

02:39:15,880 --> 02:39:17,290
I think those couple of ways of looking at it.

02:39:17,710 --> 02:39:21,520
First is obviously that's [inaudible] specific and there are other platforms

02:39:21,521 --> 02:39:25,990
with TPMS, that's what do you want? Measured booze. So that's an issue. Yeah.

02:39:26,320 --> 02:39:29,260
But you've basically got two choices for say,

02:39:29,980 --> 02:39:33,910
so if we assume you're using grub to, then you've got a couple of choices.

02:39:33,911 --> 02:39:38,200
You can either use the foam where support for talking to the TPM or you can talk

02:39:38,201 --> 02:39:41,590
to the TPM directly. Those are basically the only two options you have.

02:39:41,950 --> 02:39:44,500
If the phone where it has support for using the TPN.

02:39:45,130 --> 02:39:47,440
Well if the foam doesn't have support for using the TPM,

02:39:47,470 --> 02:39:50,800
then you probably never got grubbed measured in the first place.

02:39:51,290 --> 02:39:54,340
Or I arrive on my own for the

02:39:54,340 --> 02:39:59,340
case where it's core boots has measured grub and then you've jumped into grub.

02:39:59,860 --> 02:40:02,800
So in that scenario you would need to be able to

02:40:04,440 --> 02:40:08,110
rights-based the TPM to drive it for grub and that's then a fair amount of codes

02:40:08,111 --> 02:40:12,490
and you would need to deal with it being connected to either LPC or SPI.

02:40:12,520 --> 02:40:16,080
And in two cases you need to deal with it either being, um,

02:40:16,530 --> 02:40:19,410
there are two different interfaces. That's the TPM two can be,

02:40:19,880 --> 02:40:22,560
there are two different programming interfaces that the TPM two can expose.

02:40:22,561 --> 02:40:24,030
So you need to be able to handle both of those.

02:40:24,270 --> 02:40:27,090
So I'm not saying don't do that then. Then the how.

02:40:27,150 --> 02:40:30,270
Even if I will do that and this will fit into SBI still.

02:40:31,320 --> 02:40:34,770
How I will continue. Like what's like, okay,

02:40:34,860 --> 02:40:38,700
okay I have TPM supporting grab. Okay then I can continue because I have this.

02:40:38,730 --> 02:40:42,960
So the other problem is that if the firmware previously was generating an event

02:40:42,961 --> 02:40:43,980
log, you're going to need,

02:40:44,160 --> 02:40:46,470
if you're doing this yourself rather than using foam or calls,

02:40:46,680 --> 02:40:48,870
you're going to need to uh,

02:40:50,600 --> 02:40:52,040
be able to find the event log.

02:40:52,280 --> 02:40:54,860
You're going to need to be able to extend to the event log and then you're going

02:40:54,861 --> 02:40:58,640
to need to ensure that your still correctly asking on the event log to the next

02:40:58,641 --> 02:41:00,860
stage. Yeah, that's the question.

02:41:00,890 --> 02:41:04,350
The question is if like if kernel will support that

02:41:06,120 --> 02:41:10,220
kernel should be absolutely fine with us as long as you expose it to fire. Uh,

02:41:10,240 --> 02:41:15,080
either the way that see bios is doing it or the way that legacy vitals correctly

02:41:15,081 --> 02:41:15,914
through ISP.

02:41:15,980 --> 02:41:20,980
So there is no SPECT formats for doing TPM.

02:41:21,260 --> 02:41:25,310
The trusted computing group did not spec a format for doing this on non UEFI

02:41:25,311 --> 02:41:28,460
systems. So when we see correctly,

02:41:28,670 --> 02:41:30,890
the kernel supports the way to see by OSS does it?

02:41:30,950 --> 02:41:33,950
And so that's basically the de facto standard that you could work to or rather

02:41:33,980 --> 02:41:37,310
the kernel will support Boise bias does it, it doesn't currently. So that's,

02:41:37,340 --> 02:41:38,990
that's DCG group. Uh,

02:41:40,670 --> 02:41:43,900
[inaudible] say explicitly that this is only specification for UFI.

02:41:43,901 --> 02:41:48,901
Our assistant at the PC client specification for TPM two only covers UEFI

02:41:48,951 --> 02:41:49,784
systems.

02:41:50,170 --> 02:41:52,840
Okay, that's very fair.

02:41:54,790 --> 02:41:55,660
So, um,

02:41:56,140 --> 02:41:59,680
I would say if you're in a situation where you can use see vials that yet use

02:41:59,681 --> 02:42:01,060
the [inaudible] interface,

02:42:01,240 --> 02:42:03,970
if we're in a situation where you want to support this without necessarily

02:42:03,971 --> 02:42:05,620
having phone where that supports yourself,

02:42:06,070 --> 02:42:09,610
you're pretty much left with having to implement TPM supporting Rob

02:42:10,480 --> 02:42:11,313
[inaudible].

02:42:12,240 --> 02:42:17,010
Okay. Well they're both K exec and like you know, is K execs. So okay.

02:42:17,040 --> 02:42:21,630
So you, you are in the camp of [inaudible]. Uh,

02:42:21,631 --> 02:42:26,520
so the alternative is if your payload is Linux, if there's no intermediate,

02:42:26,550 --> 02:42:30,750
then Linux, those house strike the TPM. So then you can haveK exec,

02:42:31,350 --> 02:42:35,880
aK exec with IMH should do this correctly and should possible log on to the next

02:42:35,881 --> 02:42:36,900
thing. So, yeah.

02:42:37,290 --> 02:42:38,123
Okay.

02:42:43,000 --> 02:42:46,290
Sorry. And now a lot of questions.

02:42:50,840 --> 02:42:52,970
Maybe just a, a comment. Uh,

02:42:52,971 --> 02:42:57,971
I wouldn't totally rule out that the TCG might come up with a platform specific

02:42:58,281 --> 02:43:03,140
profiles beyond UFI. X86 so you might want to,

02:43:03,590 --> 02:43:07,430
I don't know, consider having your company somehow collaborate.

02:43:07,820 --> 02:43:12,190
Yeah, we are. [inaudible] was

02:43:12,490 --> 02:43:15,910
TC what was TCG because otherwise you implement one thing,

02:43:15,911 --> 02:43:19,090
they ended up saying at the same time come up with a different spec and all of a

02:43:19,091 --> 02:43:23,400
sudden we have two competing standards once more, uh, uh,

02:43:23,510 --> 02:43:24,700
an industry standard and up

02:43:24,860 --> 02:43:28,210
kind of see that execs starting to be the factor standard,

02:43:28,240 --> 02:43:31,870
especially in that IBM pushing that hard. So you know,

02:43:31,871 --> 02:43:35,110
and probably Linux boot will push that hard. So we will have Google,

02:43:35,111 --> 02:43:37,930
Facebook and IBM doing exec [inaudible]

02:43:38,090 --> 02:43:42,710
I'm mostly talking about earlier in boot. Like I dunno you boot based platforms,

02:43:44,060 --> 02:43:44,893
arm, whatever.

02:43:47,080 --> 02:43:47,913
No,

02:43:54,640 --> 02:43:56,470
the aK exec root of trust.

02:43:56,471 --> 02:44:00,310
I think that there is a kind of a risk and it was mentioned briefly on the list

02:44:00,311 --> 02:44:04,660
that um, it's not, you don't get quite the same guarantees when you boot up.

02:44:05,140 --> 02:44:07,750
Um, in terms of, you know, having the chain of trust coming,

02:44:07,780 --> 02:44:10,420
starting with the hard way and that if there was some sort of um,

02:44:10,630 --> 02:44:13,540
[inaudible] type solution where, uh,

02:44:13,780 --> 02:44:16,750
you can actually reestablish the new Colonel, uh,

02:44:16,780 --> 02:44:18,520
and somehow tie that to hardware,

02:44:18,880 --> 02:44:21,460
you would be in a much better state because the running current running kernel,

02:44:21,461 --> 02:44:24,910
if it's long lived may have been compromised and maybe feeding.

02:44:25,630 --> 02:44:29,710
Yeah. So in case of the RTM, we are behind em the effort for transport.

02:44:29,711 --> 02:44:34,300
So we are aware of the RTM possibilities and definitely working on that,

02:44:34,301 --> 02:44:39,070
but still like, uh, I hope to solve that. If they are, then uh,

02:44:39,100 --> 02:44:41,230
the RTM will be, um,

02:44:42,130 --> 02:44:45,550
in upstream Linux upstream grab and so on.

02:44:47,080 --> 02:44:49,030
Because this seemed to be much longer way

02:44:55,080 --> 02:44:55,170
[inaudible].

02:44:55,170 --> 02:44:59,400
We can't do D RTM without a TXT transition and you can't do a TXT transition

02:44:59,401 --> 02:45:01,200
without an external attestation server.

02:45:01,470 --> 02:45:05,010
We can't require an external attestations of boots. So we can't do it.

02:45:05,250 --> 02:45:09,990
I'm doing game D and there is no binary blobs there. And you know,

02:45:10,020 --> 02:45:11,850
implementation of secure loader is open.

02:45:11,851 --> 02:45:16,851
External entity verifies your static measured values to allow you to transition

02:45:17,911 --> 02:45:21,660
to the dynamic. So as you said, the IBM got this implementation of artists.

02:45:21,661 --> 02:45:23,280
They have an external attestation server.

02:45:23,281 --> 02:45:27,570
You can't condition boot depending on external to station server unless you're a

02:45:27,571 --> 02:45:30,360
cloud provider doing everything, which we are, but it certainly won't work.

02:45:30,460 --> 02:45:35,300
The laptops. Yeah,

02:45:35,600 --> 02:45:40,040
that's, that's a good question. Like definitely I'm looking for some, um,

02:45:40,730 --> 02:45:44,120
this is completely different discussion. This is not on the topic. Uh,

02:45:44,510 --> 02:45:48,290
we're looking at the remote at the station, uh, for, for all platforms,

02:45:48,291 --> 02:45:53,060
not all also embedded systems. So, um, and, and I hope that,

02:45:53,630 --> 02:45:58,220
uh, this AMD based implementation will be kind of role model since it's working

02:45:58,221 --> 02:45:59,420
already. I'm not saying,

02:46:00,210 --> 02:46:01,530
I'm not saying dynamic is wrong,

02:46:01,531 --> 02:46:05,850
I'm just saying transition from static dynamic requires an external entity to

02:46:05,851 --> 02:46:09,210
verify. And there are certain situations where you can't get that entity,

02:46:10,280 --> 02:46:13,610
that James name. James, wait, wait, wait, wait. I saw you remember there.

02:46:14,660 --> 02:46:17,210
The Derrick TM idea is dot. Uh,

02:46:18,140 --> 02:46:21,380
you don't need to trust. And if think,

02:46:21,600 --> 02:46:26,360
which we choose in the gap, let's say, so ever,

02:46:26,780 --> 02:46:30,710
Frankie, the trust for dynamic root of trust is rooted in the hardware.

02:46:30,980 --> 02:46:33,430
The idea about the reality is yeah,

02:46:34,220 --> 02:46:37,520
we have [inaudible] and we have ACPI and uh,

02:46:37,550 --> 02:46:42,140
for SMIS we have a semi-transparent monitor, which is already March two.

02:46:42,560 --> 02:46:46,370
They working on merging that two core boot, uh, the NSI NSA working on that.

02:46:46,760 --> 02:46:49,130
And uh, for CPI you can,

02:46:49,190 --> 02:46:54,170
you can measure that so you can verify that insecure, older. So, um,

02:46:55,010 --> 02:46:57,560
yeah, but I agree like definitely those,

02:46:57,680 --> 02:47:02,660
those two things should be connected and I believe like work of IBM can be

02:47:02,661 --> 02:47:04,970
leveraged to use that in different environments,

02:47:04,971 --> 02:47:06,830
not only in the server environment.

02:47:09,400 --> 02:47:11,080
So it definitely can if you want to,

02:47:11,081 --> 02:47:14,560
but it still depends on an external attestation. So, yeah, I agree. I agree.

02:47:14,561 --> 02:47:16,990
I don't know if this, I disagree that statement.

02:47:20,190 --> 02:47:20,740
Okay.

02:47:20,740 --> 02:47:23,770
I have some marketing here on next slide.

02:47:26,110 --> 02:47:30,670
Can I move on? Yeah, so not, not yet.

02:47:31,660 --> 02:47:33,220
Okay. So, so yeah,

02:47:33,221 --> 02:47:37,660
this is like the freebie is the guys also expressed the opinion on, on the,

02:47:37,661 --> 02:47:42,160
on the forum. Um, like it was like completely, no, no, no.

02:47:42,190 --> 02:47:45,920
It's like stupid idea. Okay. Executive previously I think that you should ask,

02:47:46,150 --> 02:47:49,510
this was three years ago, so maybe things changed a lot.

02:47:50,110 --> 02:47:50,943
Yup.

02:47:53,010 --> 02:47:57,040
Uh, so there are definitely CSMs that have Intuit and the support.

02:47:57,190 --> 02:48:01,060
So there was a period where basically systems were being sold that were UEFI

02:48:01,380 --> 02:48:04,870
based but which never exposed UEFI and we're just using the CSM and many of

02:48:04,871 --> 02:48:06,250
those detached have trusted boot supports.

02:48:06,280 --> 02:48:10,870
So there are implementations out there in the proprietary world whether, uh,

02:48:11,170 --> 02:48:14,650
there are free software implementations, I'm less sure about them.

02:48:15,120 --> 02:48:16,650
Yeah. Thanks for that.

02:48:18,030 --> 02:48:21,540
I think that you should ask James about, uh,

02:48:22,090 --> 02:48:25,420
marketing stuff because, no, no, no, I'm sorry. I'm sorry. This is like,

02:48:25,421 --> 02:48:27,730
it's on other presentations because you switched them.

02:48:27,760 --> 02:48:29,730
Like I thought the other one will be first. So,

02:48:29,980 --> 02:48:33,640
so I just wanted to tell that there is spot on security summit, uh,

02:48:33,660 --> 02:48:36,280
at the beginning of October, uh, in red bond.

02:48:36,610 --> 02:48:40,480
And there will be a bunch of interesting people doing stuff related with

02:48:40,481 --> 02:48:44,320
security from various companies and communities.

02:48:46,990 --> 02:48:51,010
Um, [inaudible] on, uh, how PC machines,

02:48:51,040 --> 02:48:54,760
you basically don't get a choice about beingK exact. Um,

02:48:54,790 --> 02:48:56,230
that's the way we boot things.

02:48:56,231 --> 02:49:00,280
So I think previous D has come around a little bit since three years ago at

02:49:00,281 --> 02:49:03,130
least for open power machines because otherwise they can't vote.

02:49:04,010 --> 02:49:07,620
Okay. Thanks for that. So I know, check

02:49:12,000 --> 02:49:16,890
any other questions? Thank you.

02:49:25,210 --> 02:49:27,510
[inaudible] yeah.

02:49:31,050 --> 02:49:31,883
Shall I move on?

02:49:32,600 --> 02:49:37,310
Yeah, go ahead. Okay. So I have other also other issue here. So yeah,

02:49:38,660 --> 02:49:43,130
TPM TPM 1.2 is not compatible with the pen zero and, and yeah,

02:49:43,131 --> 02:49:47,480
there was this strong tread on mailing on Linux integrity meaning piece about

02:49:48,680 --> 02:49:51,350
[inaudible] support for 2.0. Um,

02:49:52,190 --> 02:49:56,480
so unfortunately not developers and user space,

02:49:56,540 --> 02:50:01,310
people know that TPM 1.2 is different than 2.0 completely different.

02:50:02,330 --> 02:50:06,650
Uh mm. Yeah. And there are some, some tools, script,

02:50:06,980 --> 02:50:10,670
some user space stuff that just assumed some things about uh,

02:50:11,330 --> 02:50:13,310
CSFs and checking thing things in CSFs.

02:50:14,150 --> 02:50:19,150
And there are some DPMs that are comparable to be upgraded to 2.0 just by filmer

02:50:22,970 --> 02:50:27,230
upgrade. And to be honest, those also can be downgraded. Uh,

02:50:27,231 --> 02:50:31,280
so you can switch version of TPM that you have to some extent.

02:50:31,310 --> 02:50:36,140
There are the number of upgrades is typically limited. Um, yeah,

02:50:36,200 --> 02:50:40,160
so you can have some models that work as one or another. Um,

02:50:40,250 --> 02:50:43,730
and TPM to software like moves very fast and um,

02:50:44,090 --> 02:50:49,090
like most of the districts are not up to date. Yeah. So this is like,

02:50:49,480 --> 02:50:53,440
except from [inaudible] or S, uh, documentation, uh,

02:50:53,500 --> 02:50:58,500
almost any other non zero known error output from reading the ID file indicates

02:50:59,170 --> 02:51:02,770
that supports version 1.2. So yeah. So,

02:51:03,070 --> 02:51:06,790
so this is kind of like, sounds like a VOC way of um,

02:51:07,600 --> 02:51:10,030
and detecting what we play playing with.

02:51:10,060 --> 02:51:14,290
So my problem is like we have no common way of identifying,

02:51:14,800 --> 02:51:18,760
identifying if we're playing with one, 1.2 or 2.0 and

02:51:19,510 --> 02:51:20,343
yup.

02:51:21,320 --> 02:51:22,910
IBM has this problem as well.

02:51:23,030 --> 02:51:25,610
We are interested in actually adding to sustain Fs.

02:51:25,910 --> 02:51:28,610
Just a variable that tells you what the version of the TPM is.

02:51:28,850 --> 02:51:32,540
I take it that would satisfy your use cases as well? Yeah. Yeah.

02:51:32,720 --> 02:51:34,460
I started this tread on,

02:51:34,461 --> 02:51:39,290
on on Knox integrity and get far use proposals and yeah,

02:51:39,380 --> 02:51:41,750
probably we can say this is already answered,

02:51:41,780 --> 02:51:46,490
but I want to just present that to what was the reasoning and what kinds of

02:51:46,491 --> 02:51:47,840
proposals we have from community.

02:51:48,560 --> 02:51:53,560
The latest kernels do expose what PPM version you have in CSFs in,

02:51:55,610 --> 02:51:59,270
but it is consistent for board version. It's,

02:51:59,320 --> 02:52:03,260
it shows it in dev format form or node description.

02:52:03,800 --> 02:52:06,280
It's either a DPM, one point device or 2.0

02:52:06,280 --> 02:52:07,460
otherwise it's,

02:52:07,461 --> 02:52:12,461
it's there in CSFM where node description of [inaudible] or SIS,

02:52:12,820 --> 02:52:17,470
a class DPM, DPM one Oh zero whatever. Um, device,

02:52:17,860 --> 02:52:20,440
firmware, node description. I don't think I've got that.

02:52:22,840 --> 02:52:24,640
Yeah, we should probably tech code right now.

02:52:28,240 --> 02:52:32,950
Yeah. So this is the same. This file is also ex expose it for both.

02:52:32,980 --> 02:52:33,970
Yeah. Yes.

02:52:34,690 --> 02:52:35,523
Okay.

02:52:36,320 --> 02:52:37,910
So maybe I should stop talking.

02:52:41,590 --> 02:52:42,423
Mmm,

02:52:42,470 --> 02:52:46,670
no, that only goes to the ACPI description. It doesn't tell me the version.

02:52:56,030 --> 02:53:00,920
So, as I've said before, I think, I think it's,

02:53:01,430 --> 02:53:05,930
it's just a sustainable to have a file that tell us, yup.

02:53:06,410 --> 02:53:11,210
The protocol version. Given that for some,

02:53:11,240 --> 02:53:14,480
some back ends you can, you can force some back end.

02:53:14,481 --> 02:53:19,481
So you need need the native pro message and for some back ends you can,

02:53:19,850 --> 02:53:22,790
you can get away without the pro [inaudible] for example,

02:53:22,791 --> 02:53:26,980
if the ACPI tables they'll tell that. So and,

02:53:26,981 --> 02:53:29,780
and it does, it doesn't really do Harmon and,

02:53:29,830 --> 02:53:32,780
and I think it would be nice for daemons that they can,

02:53:33,110 --> 02:53:38,110
they can kind of configure that themselves for the right protocol before trying

02:53:38,901 --> 02:53:41,090
to do any TBM communication. So,

02:53:41,180 --> 02:53:45,260
so I I can align with that Susan Fs file.

02:53:46,240 --> 02:53:46,750
That's true.

02:53:46,750 --> 02:53:50,260
Well I would say this is useful even for things like our user space resource

02:53:50,261 --> 02:53:54,430
manager right now it just jumps up and talks to dev TPM zero if it's a TPM one.

02:53:54,580 --> 02:53:55,413
Dot two it just falls.

02:53:55,440 --> 02:53:57,090
Yeah. And let me add that.

02:53:57,330 --> 02:54:02,160
For me it would be useful even just for like when I enable like new,

02:54:02,161 --> 02:54:06,750
like let's say Intel hardware platforms just as a smoke test that there's

02:54:06,751 --> 02:54:09,990
something going on that PBM is detected, you know,

02:54:10,260 --> 02:54:13,530
so we looked at the firmware and no description. My laptop has it,

02:54:13,531 --> 02:54:15,270
his laptop doesn't. Okay.

02:54:17,630 --> 02:54:22,560
But yeah, I think I even when we exchanged it like a few messages,

02:54:23,340 --> 02:54:25,200
even then I said that at Phyliss, you know,

02:54:26,520 --> 02:54:31,140
set the pattern and and I will review it and and it will say,

02:54:32,070 --> 02:54:32,970
sure, sure.

02:54:33,510 --> 02:54:37,080
So just for complete clarity there at the foamer node description literally just

02:54:37,081 --> 02:54:39,360
presents a string that's in the system ACPI tables.

02:54:39,420 --> 02:54:41,610
So that's something that's completely outside the Crown's control.

02:54:42,020 --> 02:54:44,360
Right? Right. So it doesn't exist.

02:54:45,270 --> 02:54:49,260
Even if even if it always would require that that probe message,

02:54:49,290 --> 02:54:53,700
it still would pay like, like, like white nice porn beanie and feet or to have,

02:54:54,900 --> 02:54:59,220
yeah. So there was quite long trial about I think like having like,

02:54:59,280 --> 02:55:03,980
like file for, for getting all the PCR. That would be just

02:55:04,010 --> 02:55:04,843
kind of,

02:55:05,120 --> 02:55:09,940
I would say that it's even kind of that kind of lead on the event.

02:55:10,440 --> 02:55:15,440
[inaudible] are something that some administrator could consider as an

02:55:15,500 --> 02:55:18,260
information leak, so it's better to keep,

02:55:18,560 --> 02:55:23,360
keep it under control so that you can get that information through the deaf TPM

02:55:23,361 --> 02:55:26,960
but, but protocol version that's, that can be public.

02:55:27,950 --> 02:55:31,460
I mean we can't consider the PCL values to be an information leak because

02:55:31,610 --> 02:55:33,440
they're an unprotected acid of the TPM.

02:55:33,740 --> 02:55:37,820
Anybody can get to them so they can't leak information. The question is whether,

02:55:38,000 --> 02:55:42,230
I mean we can't display them in CSFs in the same way as we did for 1.2 because

02:55:42,290 --> 02:55:45,710
it violates the one value per file rule. So if you want to do it,

02:55:45,770 --> 02:55:50,770
it has to be a two level sub directory that goes by bank and PCR number.

02:55:51,320 --> 02:55:54,350
But we could do it if we wanted to. I just not sure we want to,

02:55:54,351 --> 02:55:58,950
I'll leave that to other discussions. Well, what, what,

02:55:59,490 --> 02:56:03,210
what, what, what do you think about the the, because I mean,

02:56:03,240 --> 02:56:08,240
I mean with the tape in 1.2 it also publishes that the public part of the,

02:56:08,940 --> 02:56:13,080
of the [inaudible] endorsement K because it kind of,

02:56:13,380 --> 02:56:17,730
it's an NDP matching so it can, it can be continent from some,

02:56:17,910 --> 02:56:21,930
from some perspective as an information leak. Right. I don't disagree with that.

02:56:22,080 --> 02:56:22,913
Oh sorry.

02:56:23,160 --> 02:56:28,160
I was just going to say I think we can definitely argue the TPM 1.2 Fs layer was

02:56:30,420 --> 02:56:32,280
not, I didn't, I think,

02:56:32,320 --> 02:56:36,630
I think for actually it would be nice to have Pat for OTP and 1.2 that would

02:56:37,290 --> 02:56:41,070
let's say a board parameter that you would use to kind of guide off.

02:56:41,610 --> 02:56:44,970
They say both some of the CSFs files like, like, like,

02:56:45,000 --> 02:56:50,000
like the one that expos exposes the endorsement key public part.

02:56:50,550 --> 02:56:51,383
Yup.

02:56:51,800 --> 02:56:55,610
With TPM two Oh it usually boots with no endorsement key because it has the seed

02:56:55,611 --> 02:56:57,440
but nobody's derived a key from it often.

02:56:57,441 --> 02:57:00,650
So we have nothing to display unless we want to derive the key you,

02:57:00,651 --> 02:57:03,500
which means we are prescribing the encryption system and everything else,

02:57:03,680 --> 02:57:04,700
which we don't want to do.

02:57:07,610 --> 02:57:08,160
Nope.

02:57:08,160 --> 02:57:08,993
Yeah, we're done.

02:57:10,380 --> 02:57:14,100
At least I believe this is very good topic for Enoch's plan birds because you

02:57:14,101 --> 02:57:18,600
know, like all this discussion there is traction here. And so, yeah,

02:57:18,601 --> 02:57:22,770
I just wanted to prove something here, but you know, you already agree with me,

02:57:22,771 --> 02:57:24,810
so I don't know if I should continue.

02:57:25,290 --> 02:57:29,820
So this is statistics from a [inaudible] Oh, excuse me.

02:57:30,030 --> 02:57:31,950
Somebody mentioned that exposing the

02:57:32,120 --> 02:57:36,500
public, uh, indorsementK is problematic diamond

02:57:45,120 --> 02:57:45,953
[inaudible].

02:57:46,680 --> 02:57:49,080
So, um, so we did some,

02:57:49,081 --> 02:57:53,280
some scanning of good cop stuff and to see that like most people using concert

02:57:53,400 --> 02:57:54,870
in user space, uh,

02:57:54,871 --> 02:57:59,730
but old cops enabled PCRs like are not so, uh,

02:57:59,790 --> 02:58:02,610
useful for people at. So I see in Google code,

02:58:02,640 --> 02:58:07,560
in [inaudible] as the Linux test project, there is some, uh, even, uh,

02:58:07,570 --> 02:58:11,220
WPD staff. Uh, there are a bunch of projects that, um,

02:58:11,250 --> 02:58:16,050
so cubes Juarez of course. Um, yeah. So there are a bunch of, uh,

02:58:16,350 --> 02:58:20,610
projects that use that and assume that the structure in, uh,

02:58:20,640 --> 02:58:23,910
CSFs is as it is. And then if you will change something,

02:58:24,120 --> 02:58:28,920
this tools will probably probably break and just throw you an error and who

02:58:28,921 --> 02:58:29,940
knows what will happen. Yeah.

02:58:30,990 --> 02:58:34,470
Probably someone never tried that with different version of TPM.

02:58:36,030 --> 02:58:40,980
Um, yeah, there's description, um, for, for that. So I believe this,

02:58:41,010 --> 02:58:46,010
this documentation should be improved or changed or I know like,

02:58:46,491 --> 02:58:51,320
because it's not, say like it's DP 1.2 specific.

02:58:51,860 --> 02:58:56,000
Uh, there were some tries and some pouches and some discussion. Uh,

02:58:56,030 --> 02:58:59,090
and this topic are coming back a couple of times.

02:59:01,490 --> 02:59:03,440
Yeah. So, um,

02:59:08,290 --> 02:59:09,130
sure. Um,

02:59:11,850 --> 02:59:12,150
yeah,

02:59:12,150 --> 02:59:13,950
so maybe, maybe just,

02:59:15,720 --> 02:59:16,553
Mmm,

02:59:17,770 --> 02:59:19,060
yeah. Um,

02:59:21,210 --> 02:59:24,620
I'm not sure why it's not displaying correctly. What's going on here.

02:59:26,150 --> 02:59:30,830
Yeah. This, there were a couple proposals, um, for,

02:59:30,831 --> 02:59:34,580
for that some people said like completely in a way. Uh, we will,

02:59:34,610 --> 02:59:36,380
there is no way to exposing that.

02:59:36,381 --> 02:59:39,950
Some people said that there various names of files like we should,

02:59:40,040 --> 02:59:43,310
we should have version file or project protocol major.

02:59:43,311 --> 02:59:46,070
This was from Jarkko. Uh,

02:59:46,071 --> 02:59:50,720
there were also ideas like you should query, you should write C code and query,

02:59:51,500 --> 02:59:53,780
um, Def TPM and yeah,

02:59:53,781 --> 02:59:58,781
I believe like there should be [inaudible] like NFC for patch with a just CSFs,

02:59:59,990 --> 03:00:02,960
DPM version. And, and we will see what people will say.

03:00:03,110 --> 03:00:05,570
Probably this would be fine. Um, yeah,

03:00:05,600 --> 03:00:09,950
there was also idea about security Fs. Um, so those,

03:00:09,980 --> 03:00:13,550
those are the ideas that people proposed and I believe, um,

03:00:14,270 --> 03:00:18,410
like the fire, which same version is fine. Um,

03:00:19,430 --> 03:00:23,090
I wanted to show you also, uh, apparently it's not rendering correctly.

03:00:23,090 --> 03:00:27,860
I'm not sure. It's probably PDF stuff that I convert with that PDF. But,

03:00:28,520 --> 03:00:29,360
uh, you can just,

03:00:29,361 --> 03:00:34,361
this defies that you see 40 PM 2.0 and 1.2 and see what's,

03:00:34,640 --> 03:00:37,280
how big is the difference and um,

03:00:38,240 --> 03:00:43,170
like user space relying on those components and we'll break simply if,

03:00:43,171 --> 03:00:46,550
if those are not supported. So the question, what we doing, uh,

03:00:46,610 --> 03:00:51,020
in case of other things like console, I don't know what, how console is use it,

03:00:51,170 --> 03:00:53,240
but it uses very often in user space.

03:00:53,540 --> 03:00:57,680
So I understand that PCRs or other, not 40 PM to,

03:00:57,920 --> 03:01:02,500
I understand that the version is the way of solving this differentiation between

03:01:02,501 --> 03:01:03,430
the things,

03:01:03,460 --> 03:01:08,460
but what about the other assistant first fires and which are not existent for

03:01:10,061 --> 03:01:10,894
2.0

03:01:15,010 --> 03:01:18,250
so some of them are stuff like enable, owned and so on.

03:01:18,820 --> 03:01:21,520
Just don't apply to TPM too in the same way. Yeah,

03:01:21,640 --> 03:01:24,430
the model's completely different. So some of them sort of vanished that way.

03:01:25,830 --> 03:01:26,663
And so, so we,

03:01:26,720 --> 03:01:31,360
we get allying that somehow one user space tools, uh,

03:01:31,390 --> 03:01:35,680
do that they should simplify as query the version file and apply, correct.

03:01:35,980 --> 03:01:36,610
Migrate it.

03:01:36,610 --> 03:01:39,760
There's no way that we could expose the information there that would allow them

03:01:39,761 --> 03:01:42,400
to do anything useful. So exposing them in the first X,

03:01:42,490 --> 03:01:43,810
not exposing the first policing,

03:01:44,050 --> 03:01:47,050
letting the tooling break is arguably the right thing to do. But yeah,

03:01:47,080 --> 03:01:51,010
having a clean way for it to handle that case rather than trying to open, Oh,

03:01:51,011 --> 03:01:55,480
it doesn't exist. This must be a TPM two is suboptimal.

03:01:55,780 --> 03:01:56,613
Yeah.

03:02:01,210 --> 03:02:04,300
Yeah. And I told you about the, about the conference.

03:02:04,301 --> 03:02:08,380
So I believe I'm done with this topic. Um,

03:02:08,620 --> 03:02:12,340
I probably would have tried to create some purchase to send a diversion staff

03:02:12,850 --> 03:02:17,440
and I don't know, a user space just have to align over time. Uh, but,

03:02:17,500 --> 03:02:21,730
but uh, like this notion that on mailing piece there was this discussion that,

03:02:22,930 --> 03:02:27,580
um, like we don't care that it breaks things out or we don't care that this,

03:02:27,610 --> 03:02:32,020
this is completely different thing and we don't care about keeping compatibility

03:02:32,230 --> 03:02:33,400
or giving like our

03:02:35,080 --> 03:02:39,280
[inaudible] you just should implement something in C or do something complicated

03:02:39,281 --> 03:02:42,160
to identify. It's like, I believe it was incorrect.

03:02:43,420 --> 03:02:47,170
So I think the main issue is that there's not much you can usefully do with a

03:02:47,171 --> 03:02:51,670
TPM without having to write C or some other way of accessing it.

03:02:51,671 --> 03:02:55,240
So arguably you'll have tools like [inaudible].

03:02:55,240 --> 03:02:57,880
So with TPM 1.2,

03:02:58,300 --> 03:03:01,390
there was some relevant information like the, the own state,

03:03:01,391 --> 03:03:02,380
the enabled and so on.

03:03:02,680 --> 03:03:07,420
That's information that you might want to read out in order to then make a

03:03:07,421 --> 03:03:09,370
conclusion about what, uh,

03:03:09,760 --> 03:03:13,750
which of the ACPI physical presence methods you want to call in order to turn

03:03:13,751 --> 03:03:18,310
the TPM on. And that can be done entirely in shell. But with TPM too,

03:03:18,580 --> 03:03:23,350
that's not really as true. In order to know that you need to reset the TPM,

03:03:23,380 --> 03:03:26,260
you really need to be doing some stuff in C first.

03:03:26,440 --> 03:03:28,900
Well some stuff like the device node first. Yeah. But for example,

03:03:28,901 --> 03:03:30,310
for console fine.

03:03:30,580 --> 03:03:33,490
And what was the usage for that and why did this use it so frequently?

03:03:34,150 --> 03:03:36,220
I have no idea. And no one,

03:03:38,920 --> 03:03:39,753
sorry, what was the question?

03:03:40,800 --> 03:03:42,210
Console file insists.

03:03:42,530 --> 03:03:46,500
I can only imagine that people included it for completeness because it just

03:03:46,501 --> 03:03:49,350
wasn't there. Um, but,

03:03:49,480 --> 03:03:54,480
but the most usage [inaudible] so yeah, as I said,

03:03:54,481 --> 03:03:58,160
people have, uh, I believe have included because it was

03:03:58,160 --> 03:04:00,620
there and easily accessible because in practice,

03:04:00,920 --> 03:04:03,980
even if you're called cancel on a TPM operation, uh,

03:04:03,981 --> 03:04:07,160
if the operation has already proceeded too far,

03:04:07,161 --> 03:04:11,120
the TPM will still keep on and continue. So, uh,

03:04:11,121 --> 03:04:15,470
the TPM will tell you, are the RC canceled? Yes, I canceled or just RCU success,

03:04:15,950 --> 03:04:17,180
I've succeeded anyways.

03:04:17,480 --> 03:04:21,860
And the only operation that actually takes long enough that I can think of that

03:04:21,861 --> 03:04:26,450
might justify a cancel is RSA a key generation.

03:04:26,480 --> 03:04:29,090
And most a lot of people are switching over to ECC now,

03:04:29,091 --> 03:04:32,750
so there's not much left that you actually want to cancel in practice.

03:04:32,960 --> 03:04:36,840
Okay? Okay. Thank you very much.

03:04:37,320 --> 03:04:38,190
That's all for me.

03:04:43,940 --> 03:04:47,330
So that's all for today. Thank you for coming. Thank you, Matthew,

03:04:47,331 --> 03:04:51,860
for taking notes and Joel for helping leading for us and thank you for all

03:04:51,861 --> 03:04:55,070

YouTube URL: https://www.youtube.com/watch?v=u8XxDov-JNE


