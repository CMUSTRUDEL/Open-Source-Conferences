Title: Azure Friday | Remote debug Azure Functions written in Java using VS Code
Publication date: 2018-01-12
Playlist: Microsoft Open Source Summit
Description: 
	Xiaokai He shows Donovan Brown how to quickly develop and deploy serverless functions to Azure, then go inside the black box and debug functions locally, as well as remotely in the cloud.

For more information, see:

Serverless Java Apps with VS Code (docs) - https://code.visualstudio.com/docs/java/java-serverless
Azure Functions Java developer guide (docs) - https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java
Azure Functions (overview) - https://azure.microsoft.com/en-us/services/functions/
Captions: 
	00:00:00,000 --> 00:00:03,260
>> Hi, I'm Donovan with another episode of Azure Friday.

00:00:03,260 --> 00:00:04,980
I'm here with Xiaokai and he's going to show

00:00:04,980 --> 00:00:06,750
us how to remote debug an

00:00:06,750 --> 00:00:08,820
Azure function written in Java

00:00:08,820 --> 00:00:11,295
using Visual Studio Code. Welcome to the show.

00:00:11,295 --> 00:00:11,940
>> Thank you, Donovan.

00:00:11,940 --> 00:00:14,205
>> So, tell us what you do here at Microsoft?

00:00:14,205 --> 00:00:16,050
>> Yeah, we are working on the Java service

00:00:16,050 --> 00:00:17,235
and tooling for Azure.

00:00:17,235 --> 00:00:19,140
So, basically our team

00:00:19,140 --> 00:00:22,101
provides a lot of tools of IDE plugins for

00:00:22,101 --> 00:00:27,415
developers to easily use Azure as their cloud platform.

00:00:27,415 --> 00:00:27,995
>> All right, perfect.

00:00:27,995 --> 00:00:29,130
So, what you are going to be showing us

00:00:29,130 --> 00:00:31,170
today is how to use Visual Studio Code to

00:00:31,170 --> 00:00:34,095
actually remote debug a Azure function

00:00:34,095 --> 00:00:36,390
not written in.NET like we would expect from Microsoft,

00:00:36,390 --> 00:00:36,790
but actually written in Java.

00:00:36,790 --> 00:00:37,310
>> Yes.

00:00:37,310 --> 00:00:38,510
>> All right, great.

00:00:38,510 --> 00:00:40,980
>> Actually we've announced the Azure function

00:00:40,980 --> 00:00:43,260
Java support in October, right?

00:00:43,260 --> 00:00:44,110
>> Okay.

00:00:44,110 --> 00:00:45,532
>> Several months ago.

00:00:45,532 --> 00:00:47,915
So, now we are adding more features to it.

00:00:47,915 --> 00:00:49,110
Now, let's see how the Azure function

00:00:49,110 --> 00:00:50,330
is running in VS Code.

00:00:50,330 --> 00:00:51,920
So, this is actually a very simple HTTP function.

00:00:51,920 --> 00:00:55,047
So, you can see how we define the trigger,

00:00:55,047 --> 00:00:56,796
the HTTP trigger here, use annotations,

00:00:56,796 --> 00:00:58,555
which is very familiar

00:00:58,555 --> 00:01:00,820
by the Java developers, the native way.

00:01:00,820 --> 00:01:02,400
And then you can get all

00:01:02,400 --> 00:01:05,280
the trigger settings correctly here,

00:01:05,280 --> 00:01:08,049
and you can see the Java code actually also correctly

00:01:08,049 --> 00:01:11,140
highlighted by the negative server supporting in VS Code.

00:01:11,140 --> 00:01:15,390
>> And here's the issue is the code.

00:01:15,390 --> 00:01:18,060
You can see the red scribble here, right?

00:01:18,060 --> 00:01:21,346
If I double click it, there is a help here saying,

00:01:21,346 --> 00:01:24,330
"Okay, I should change this method to

00:01:24,330 --> 00:01:27,394
match the method name below there."

00:01:27,394 --> 00:01:29,270
So basically it's kind of a small feature

00:01:29,270 --> 00:01:31,090
which helps you to write Java code

00:01:31,090 --> 00:01:33,620
easily with the VS Code as an editor.

00:01:33,620 --> 00:01:34,183
>> Perfect.

00:01:34,183 --> 00:01:36,150
>> And but, actually what I would like to do is

00:01:36,150 --> 00:01:39,214
to rename this method.

00:01:39,214 --> 00:01:42,780
So you can see there's a rename symbol feature that you

00:01:42,780 --> 00:01:46,780
can also use to edit your code here.

00:01:46,780 --> 00:01:49,675
So what I want to do is to change it to the "Bubble sort."

00:01:49,675 --> 00:01:51,330
So you can see it's kind

00:01:51,330 --> 00:01:52,455
of changed the method name here as well.

00:01:52,455 --> 00:01:54,480
>> Yes. We have refactoring support

00:01:54,480 --> 00:01:56,520
built in the Visual Studio Code for Java as well.

00:01:56,520 --> 00:01:58,120
>> Yeah. And nevertheless,

00:01:58,120 --> 00:01:59,810
we also have the unit test support.

00:01:59,810 --> 00:02:02,793
So you know in Java, the unit test is very popular,

00:02:02,793 --> 00:02:04,650
and here's a very simple unit test

00:02:04,650 --> 00:02:07,827
testing the Bubble Sort method and using the code lens,

00:02:07,827 --> 00:02:09,530
we already detect this as unit test

00:02:09,530 --> 00:02:12,452
and you can write the text right here using Azure.

00:02:12,452 --> 00:02:14,043
So when the test is done,

00:02:14,043 --> 00:02:16,585
so I see the green cross here,

00:02:16,585 --> 00:02:18,480
then you know that everything's fine.

00:02:18,480 --> 00:02:20,490
So now we know that our Java function

00:02:20,490 --> 00:02:22,430
is properly written correctly.

00:02:22,430 --> 00:02:25,095
Next step you want to pre-validate it, right?

00:02:25,095 --> 00:02:28,110
So most developer will try to validate locally first.

00:02:28,110 --> 00:02:30,620
Now let's just try this.

00:02:30,620 --> 00:02:35,895
Run always the Azure function extension support.

00:02:35,895 --> 00:02:37,050
So you can see I have here

00:02:37,050 --> 00:02:38,450
the Azure function extension here.

00:02:38,450 --> 00:02:39,840
>> Okay.

00:02:39,840 --> 00:02:40,995
>> When I activate this one,

00:02:40,995 --> 00:02:44,595
I can easily just click 'F5' to run the function locally.

00:02:44,595 --> 00:02:46,170
So behind the scenes it will

00:02:46,170 --> 00:02:47,905
actually build the function for me,

00:02:47,905 --> 00:02:49,860
prepare the artifact and

00:02:49,860 --> 00:02:51,600
load the Azure function local runtime.

00:02:51,600 --> 00:02:53,700
So, the local runtime is actually using on that call.

00:02:53,700 --> 00:02:55,010
So it's cross-preference as well.

00:02:55,010 --> 00:02:55,610
>> Okay.

00:02:55,610 --> 00:02:58,785
>> So now the Azure function runtime has started.

00:02:58,785 --> 00:03:01,710
You can see it's also ultimate to help

00:03:01,710 --> 00:03:04,530
me attach to the local run time to debug my function.

00:03:04,530 --> 00:03:04,850
>> Okay.

00:03:04,850 --> 00:03:06,540
>> So let's see.

00:03:06,540 --> 00:03:09,090
So actually let me

00:03:09,090 --> 00:03:12,215
just remove the blue point here for now.

00:03:12,215 --> 00:03:14,848
So I'm using another extension here in VS Code.

00:03:14,848 --> 00:03:17,310
VS Code everything is an extension, right?

00:03:17,310 --> 00:03:20,040
So to send extra request instead

00:03:20,040 --> 00:03:22,300
of using common LAN we use query POST method.

00:03:22,300 --> 00:03:23,064
>> Okay.

00:03:23,064 --> 00:03:27,411
>> So I can send a request right here.

00:03:27,411 --> 00:03:28,935
Oops. So you can see there's

00:03:28,935 --> 00:03:31,415
another issue arise asked me to pass a list.

00:03:31,415 --> 00:03:32,690
So since I'm not passing

00:03:32,690 --> 00:03:35,740
the right permit or right query parameters.

00:03:35,740 --> 00:03:37,280
So what I can do here with

00:03:37,280 --> 00:03:40,995
VS Code is I can set up a red point here

00:03:40,995 --> 00:03:48,105
and send again to VS through.

00:03:48,105 --> 00:03:51,660
So now as you can see the blue point has been hit, right?

00:03:51,660 --> 00:03:55,445
So I can just like everything you would expect in ID,

00:03:55,445 --> 00:03:57,675
you can step through and debug

00:03:57,675 --> 00:04:00,410
the java code instead we are seeing VS Code.

00:04:00,410 --> 00:04:02,178
>> Right.

00:04:02,178 --> 00:04:04,660
>> And they're also that the both view you can see

00:04:04,660 --> 00:04:06,425
all the local variables and

00:04:06,425 --> 00:04:08,915
the call stack which variables, yeah.

00:04:08,915 --> 00:04:10,498
Everything you would expect.

00:04:10,498 --> 00:04:11,920
And you can see that's the current list

00:04:11,920 --> 00:04:13,330
here is null, right?

00:04:13,330 --> 00:04:14,775
So why its null,

00:04:14,775 --> 00:04:19,162
seems like we've done something not correctly.

00:04:19,162 --> 00:04:21,300
So here the code want

00:04:21,300 --> 00:04:23,690
to get the list as a query parameter.

00:04:23,690 --> 00:04:25,854
However I'm sending list here.

00:04:25,854 --> 00:04:27,385
So probably this is the problem.

00:04:27,385 --> 00:04:29,490
So I change this one I run this

00:04:29,490 --> 00:04:34,155
through and send the request again.

00:04:34,155 --> 00:04:36,500
I should get the right sorted list here.

00:04:36,500 --> 00:04:40,350
So this is just the local debugging experience.

00:04:40,350 --> 00:04:42,060
So now you say, "Okay I know that

00:04:42,060 --> 00:04:44,170
my functions are running locally perfectly."

00:04:44,170 --> 00:04:45,481
Well and you want to do next,

00:04:45,481 --> 00:04:47,700
you want to deploy it to the cloud, right?

00:04:47,700 --> 00:04:47,830
>> Yes.

00:04:47,830 --> 00:04:49,890
>> So with the Azure function extension

00:04:49,890 --> 00:04:51,365
you can easily deploy it to cloud.

00:04:51,365 --> 00:04:52,830
Let me just stop this one here.

00:04:52,830 --> 00:04:54,960
>> Yeah, I'm also curious,

00:04:54,960 --> 00:04:57,220
so how many extinctions have we started using?

00:04:57,220 --> 00:05:00,108
there's the Azure function extension I need to install.

00:05:00,108 --> 00:05:01,660
There's obviously an extension for

00:05:01,660 --> 00:05:03,010
the Java support that you've been

00:05:03,010 --> 00:05:04,580
showing me as well, right?

00:05:04,580 --> 00:05:04,707
>> Yeah.

00:05:04,707 --> 00:05:05,255
>> Okay.

00:05:05,255 --> 00:05:08,670
>> So I can actually show you the extensions I have here.

00:05:08,670 --> 00:05:11,735
So I have the Azure-related extension, like functions.

00:05:11,735 --> 00:05:15,440
I also have Debugger for Java, which is our debugger.

00:05:15,440 --> 00:05:18,430
It's actually the role for Java and the language support

00:05:18,430 --> 00:05:21,600
for Java are all packaged in the Java extension pack. So.

00:05:21,600 --> 00:05:21,940
>>Got it.

00:05:21,940 --> 00:05:23,671
>> Whenever you load the Java file,

00:05:23,671 --> 00:05:25,510
we will recommend you use the Java extension pack

00:05:25,510 --> 00:05:27,510
so you can get those installed very conveniently.

00:05:27,510 --> 00:05:28,050
>> Perfect.

00:05:28,050 --> 00:05:29,920
>> And let's just

00:05:29,920 --> 00:05:32,180
see how we can deploy it to Azure quickly.

00:05:32,180 --> 00:05:34,554
So this is the Azure function extension.

00:05:34,554 --> 00:05:36,160
You just click this button and say,

00:05:36,160 --> 00:05:38,755
"I want to deploy this project to Azure."

00:05:38,755 --> 00:05:41,990
You select which subscription you want to deploy,

00:05:41,990 --> 00:05:44,230
you say for which apps you want to deploy it to.

00:05:44,230 --> 00:05:45,040
>> Right.

00:05:45,040 --> 00:05:50,000
>> So we want to deploy forward to another one.

00:05:50,000 --> 00:05:51,260
Since then, it will actually package it

00:05:51,260 --> 00:05:53,050
again and upload to Azure. All right.

00:05:53,050 --> 00:05:56,265
It's very convenient in this way.

00:05:56,265 --> 00:05:58,655
So, you don't need to use any command tool

00:05:58,655 --> 00:06:01,580
to enter towards Azure again.

00:06:01,580 --> 00:06:03,010
So it'll ask you whether you want to

00:06:03,010 --> 00:06:06,075
deploy now or not and you'll just click "Yes."

00:06:06,075 --> 00:06:08,355
And so it'll automatically pick deploy for you.

00:06:08,355 --> 00:06:09,980
So now what Azure would like

00:06:09,980 --> 00:06:11,435
to show you after deployment,

00:06:11,435 --> 00:06:15,590
so sometimes you might still feel like is

00:06:15,590 --> 00:06:17,690
that your cloud environment

00:06:17,690 --> 00:06:19,935
might be different from your local environment, right.

00:06:19,935 --> 00:06:21,320
So something working perfect

00:06:21,320 --> 00:06:25,198
locally could have trouble remotely on the cloud.

00:06:25,198 --> 00:06:27,020
So with that we actually incoming

00:06:27,020 --> 00:06:29,510
another small tool you can use to do remote debugging.

00:06:29,510 --> 00:06:30,330
>> Okay.

00:06:30,330 --> 00:06:33,340
>> So the tool is currently not integrated with VS Code.

00:06:33,340 --> 00:06:37,733
So we release it as a stand-alone tool.

00:06:37,733 --> 00:06:41,120
So you can actually use it with any other debug as well.

00:06:41,120 --> 00:06:43,430
So for example if you use eclipse or intelligence you

00:06:43,430 --> 00:06:44,480
can also use this tool for

00:06:44,480 --> 00:06:45,830
remote debugging your java functions.

00:06:45,830 --> 00:06:46,075
>> Perfect.

00:06:46,075 --> 00:06:51,412
>> So, we've got the immediate proxy,

00:06:51,412 --> 00:06:57,730
so we just need to type in

00:06:58,710 --> 00:07:10,054
the URL for your Azure functions here.

00:07:10,054 --> 00:07:15,295
So the tool will ultimately detect which subscription

00:07:15,295 --> 00:07:17,390
the function is in and try to connect to

00:07:17,390 --> 00:07:20,840
this function and set up the SS external to the function.

00:07:20,840 --> 00:07:21,178
>> Okay.

00:07:21,178 --> 00:07:22,400
>> So you only need to attach to

00:07:22,400 --> 00:07:24,080
your localhost, a port on your local host,

00:07:24,080 --> 00:07:27,920
then you can get the access to a function.

00:07:27,920 --> 00:07:31,362
So you see now it's getting access to the function.

00:07:31,362 --> 00:07:33,005
So, I'm going to use

00:07:33,005 --> 00:07:35,925
the other debug settings

00:07:35,925 --> 00:07:37,500
to attach to the function on

00:07:37,500 --> 00:07:40,235
the cloud and start the session here.

00:07:40,235 --> 00:07:44,340
Now you can see my local VS Code environment

00:07:44,340 --> 00:07:47,280
is connected to the remote session.

00:07:47,280 --> 00:07:52,980
I'm going to send this request to the remote URL.

00:07:52,980 --> 00:07:53,657
>> Okay.

00:07:53,657 --> 00:07:56,220
>> The same bug for your hit. So, basically this

00:07:56,220 --> 00:07:57,490
is everything you need to do

00:07:57,490 --> 00:07:59,240
to remote the bugging Azure function.

00:07:59,240 --> 00:08:04,855
Yeah to show it really works we can actually step through

00:08:04,855 --> 00:08:10,090
and see here's the numbers that we've set

00:08:10,090 --> 00:08:12,120
in our query parameter

00:08:12,120 --> 00:08:15,525
and we'll probably just change the variable here.

00:08:15,525 --> 00:08:19,144
And the word running through.

00:08:19,144 --> 00:08:22,530
So it'll return the value as we change.

00:08:22,530 --> 00:08:23,004
>> Absolutely.

00:08:23,004 --> 00:08:24,110
>> So yeah, here's everything

00:08:24,110 --> 00:08:27,915
we'd like to show you with this session.

00:08:27,915 --> 00:08:31,615
>> Go back real quick for me back to Visual Studio Code.

00:08:31,615 --> 00:08:33,800
Now when I'm debugging inside of Visual Studio Code,

00:08:33,800 --> 00:08:36,470
sometimes setting up my launch is difficult.

00:08:36,470 --> 00:08:36,760
>> Yeah.

00:08:36,760 --> 00:08:37,850
>> Do the extensions help us with

00:08:37,850 --> 00:08:39,380
setting up our launch parameters too?

00:08:39,380 --> 00:08:42,920
>> Of course. Let's just see the Launch XML here.

00:08:42,920 --> 00:08:44,984
So with the Azure function extension,

00:08:44,984 --> 00:08:46,580
when you quit the project,

00:08:46,580 --> 00:08:49,945
actually we had set the launch function

00:08:49,945 --> 00:08:54,390
for you was the default local attached to setting.

00:08:54,390 --> 00:08:56,918
So we automatically being the setting for you,

00:08:56,918 --> 00:08:57,990
as long as we know that

00:08:57,990 --> 00:08:59,190
this is an Azure function project.

00:08:59,190 --> 00:09:00,800
So the attached to Azure on the cloud is something

00:09:00,800 --> 00:09:05,105
actually I setup before this demo.

00:09:05,105 --> 00:09:08,420
So because in this local tool tells you to attach to

00:09:08,420 --> 00:09:12,210
the local host with the ports 8898.

00:09:12,210 --> 00:09:12,441
>> Okay.

00:09:12,441 --> 00:09:14,315
>> So actually it's not that much difficult.

00:09:14,315 --> 00:09:17,240
So for Java, on the debug setting is you have

00:09:17,240 --> 00:09:18,350
a lot of optional setting

00:09:18,350 --> 00:09:20,700
but the required settings are very minimal.

00:09:20,700 --> 00:09:22,990
So you just need to give us the name,

00:09:22,990 --> 00:09:24,924
the type, and the host name and

00:09:24,924 --> 00:09:26,780
the port so we know how to attach to it.

00:09:26,780 --> 00:09:27,980
>> Fantastic. Good. Because this is

00:09:27,980 --> 00:09:29,450
always something that I get tripped up on,

00:09:29,450 --> 00:09:30,650
so I wanted to make sure that we kind of

00:09:30,650 --> 00:09:32,060
highlighted on what needs to be in

00:09:32,060 --> 00:09:33,320
there so that we can both

00:09:33,320 --> 00:09:35,475
debug locally and debug remotely.

00:09:35,475 --> 00:09:38,330
We should know the port to make sure that we attached to.

00:09:38,330 --> 00:09:38,910
>> Yeah.

00:09:38,910 --> 00:09:40,207
Perfect. Great. So are you going to

00:09:40,207 --> 00:09:41,750
recap what we actually just saw here?

00:09:41,750 --> 00:09:44,180
>> Yeah. I like to just tell a little bit

00:09:44,180 --> 00:09:45,800
about the demo we just show

00:09:45,800 --> 00:09:47,580
how you can develop the Java function,

00:09:47,580 --> 00:09:49,007
where's the "Yes code" like where's

00:09:49,007 --> 00:09:50,440
the root Java support and we

00:09:50,440 --> 00:09:52,505
run test and debugger locally,

00:09:52,505 --> 00:09:54,740
and we then use the Azure function extension to

00:09:54,740 --> 00:09:57,290
actually deploy it to Azure and then

00:09:57,290 --> 00:09:59,170
you can also attach to

00:09:59,170 --> 00:10:02,250
the remote process and debug remotely.

00:10:02,250 --> 00:10:03,350
So these all the tools that we

00:10:03,350 --> 00:10:05,240
provided like the Azure function code tool,

00:10:05,240 --> 00:10:07,430
the the Maven plugin which is behind

00:10:07,430 --> 00:10:09,875
the things we use for build and package dis-functions

00:10:09,875 --> 00:10:11,000
as well as like

00:10:11,000 --> 00:10:13,100
the Java support VS Code that

00:10:13,100 --> 00:10:14,655
the Azure function extension

00:10:14,655 --> 00:10:15,439
of VS Code as well as the debug parse.

00:10:15,439 --> 00:10:17,645
So all those tools

00:10:17,645 --> 00:10:20,370
are open sourced and there working across platforms.

00:10:20,370 --> 00:10:22,425
>> And you also mentioned that the remote debugging

00:10:22,425 --> 00:10:23,480
the way that you've written it as

00:10:23,480 --> 00:10:25,100
an external tool allows it

00:10:25,100 --> 00:10:26,895
to be used with other editors as well.

00:10:26,895 --> 00:10:28,875
You don't have to use Visual Studio Code,

00:10:28,875 --> 00:10:30,515
you can use the IntelliJ or Eclipse as well.

00:10:30,515 --> 00:10:32,360
>> Yes and he fact that

00:10:32,360 --> 00:10:35,140
we support Maven for packaging and deploy

00:10:35,140 --> 00:10:37,380
the functions which allows you to use Eclipse and

00:10:37,380 --> 00:10:38,680
tanager to just use those Maven goals

00:10:38,680 --> 00:10:40,270
to contact with Azure as well.

00:10:40,270 --> 00:10:40,640
>> Awesome.

00:10:40,640 --> 00:10:42,855
>> Yeah and.

00:10:42,855 --> 00:10:46,070
Although we just show you a very simple HTTP function,

00:10:46,070 --> 00:10:47,505
the function can try to do more.

00:10:47,505 --> 00:10:49,250
So for example the real time streaming

00:10:49,250 --> 00:10:52,119
processing can use function as a backend.

00:10:52,119 --> 00:10:53,780
A lot of schedule job you can

00:10:53,780 --> 00:10:55,660
use function to trigger it as well like

00:10:55,660 --> 00:10:58,215
those events triggered based patterns

00:10:58,215 --> 00:11:00,285
can always be leveraged by functions.

00:11:00,285 --> 00:11:01,695
And then we also have

00:11:01,695 --> 00:11:04,145
very cool demo or real-time boot messaging.

00:11:04,145 --> 00:11:08,090
So you can set up functions to connect between

00:11:08,090 --> 00:11:11,495
different text messaging apps

00:11:11,495 --> 00:11:13,850
so you can implement things like that.

00:11:13,850 --> 00:11:14,910
>> That's very cool.

00:11:14,910 --> 00:11:17,125
>> Yeah with that.

00:11:17,125 --> 00:11:19,860
Yeah just try it and gives us feedback.

00:11:19,860 --> 00:11:21,710
>> That's awesome.

00:11:21,710 --> 00:11:24,275
We're learning all about remote debugging

00:11:24,275 --> 00:11:26,570
your Azure function written in Java

00:11:26,570 --> 00:11:30,090

YouTube URL: https://www.youtube.com/watch?v=n9nw6MPG0Vo


