Title: Azure Friday | Container-native developer experiences, Part 3 - Brigade
Publication date: 2018-02-09
Playlist: Microsoft Open Source Summit
Description: 
	Join Donovan Brown & Ralph Squillace to learn about Brigade, the Kubernetes-native service that creates structured container pipelines from JavaScript functions, letting you "script" your cluster in reaction to events. You'll also learn about Kashti, the web dashboard that shows you the status of all your Brigade projects.

Brigade - Event-driven scripting for Kubernetes: https://brigade.sh/
Azure/brigade on GitHub: https://github.com/Azure/brigade
Azure/Kashti on GitHub: https://github.com/Azure/Kashti
KubeCon 2017 Demo — Istio and Brigade CI/CD: https://medium.com/@chzbrgr71/kubecon-2017-demo-istio-and-brigade-ci-cd-9db5ef15a942
Captions: 
	00:00:00,000 --> 00:00:01,830
>> Hi, I'm Donovan Brown with

00:00:01,830 --> 00:00:03,570
another episode of Azure Friday.

00:00:03,570 --> 00:00:04,920
This is the third part of

00:00:04,920 --> 00:00:06,090
a three-part series on

00:00:06,090 --> 00:00:08,025
Container Native Developer experiences.

00:00:08,025 --> 00:00:09,480
I'm here with Ralph and we're going

00:00:09,480 --> 00:00:11,145
to be talking all about Brigade.

00:00:11,145 --> 00:00:13,410
So, to recap, what is Brigade?

00:00:13,410 --> 00:00:16,980
>> Brigade is a service that's native to Kubernetes,

00:00:16,980 --> 00:00:19,245
in the sense you can install it with a Helm chart,

00:00:19,245 --> 00:00:22,830
that really hosts, allows you to use JavaScript to script

00:00:22,830 --> 00:00:26,340
the structured container pipeline inside the cluster.

00:00:26,340 --> 00:00:27,780
>> All right. So, when you start talking about

00:00:27,780 --> 00:00:29,550
pipelines and starts talking about DevOps,

00:00:29,550 --> 00:00:30,750
this stuff, and that's my wheelhouse,

00:00:30,750 --> 00:00:32,940
so I want to make sure that, are you going to show

00:00:32,940 --> 00:00:35,550
me how it works and then we can go into some Q and A?

00:00:35,550 --> 00:00:37,530
>> Sure, makes complete sense.

00:00:37,530 --> 00:00:40,721
Because people think of CI/CD right off the bat,

00:00:40,721 --> 00:00:41,880
that you can do, but it's

00:00:41,880 --> 00:00:43,650
actually a little bit more flexible than that,

00:00:43,650 --> 00:00:45,225
so let's have a look.

00:00:45,225 --> 00:00:46,980
This is a simple cluster.

00:00:46,980 --> 00:00:48,750
We're running on Minikube in this case,

00:00:48,750 --> 00:00:49,010
>> Okay.

00:00:49,010 --> 00:00:51,345
>> It will run anywhere, right?

00:00:51,345 --> 00:00:55,800
You can see that we have three services running.

00:00:55,800 --> 00:00:58,395
One is the API, one is the actual Kubernetes control,

00:00:58,395 --> 00:01:00,360
and we have a gateway to protect the API.

00:01:00,360 --> 00:01:00,750
>> Okay.

00:01:00,750 --> 00:01:04,035
>> So, let's look at what this looks like.

00:01:04,035 --> 00:01:07,050
This is an actual project file,

00:01:07,050 --> 00:01:10,655
and here, right here is a simple JavaScript,

00:01:10,655 --> 00:01:12,650
that will end up this function will

00:01:12,650 --> 00:01:14,900
listen on an exec event,

00:01:14,900 --> 00:01:17,150
which I'll describe when we get there,

00:01:17,150 --> 00:01:20,720
and it will look for a secret Slack web hook,

00:01:20,720 --> 00:01:23,420
which over here, is right here,

00:01:23,420 --> 00:01:26,390
in your project, right?

00:01:26,390 --> 00:01:27,665
And it will then create

00:01:27,665 --> 00:01:30,455
a new container using a known container,

00:01:30,455 --> 00:01:32,360
pass some environment variables

00:01:32,360 --> 00:01:33,905
and let the container do its work.

00:01:33,905 --> 00:01:36,350
In this case, the container knows how to

00:01:36,350 --> 00:01:38,960
send a notification to a Slack channel, right?

00:01:38,960 --> 00:01:39,320
>> Okay.

00:01:39,320 --> 00:01:40,820
>> Very simple, and

00:01:40,820 --> 00:01:44,415
your experience is something like this.

00:01:44,415 --> 00:01:46,210
We already know it's running and

00:01:46,210 --> 00:01:48,730
if you wanted to install this,

00:01:48,730 --> 00:01:53,125
there is the Brigade installation, one line.

00:01:53,125 --> 00:01:54,970
And if you want to install the project,

00:01:54,970 --> 00:01:56,890
this is how you install the project that

00:01:56,890 --> 00:01:58,990
we just showed you here.

00:01:58,990 --> 00:01:59,500
>> Okay.

00:01:59,500 --> 00:02:01,090
>> And the service itself can

00:02:01,090 --> 00:02:03,220
handle any number of projects.

00:02:03,220 --> 00:02:06,430
All of which may pass different secrets, for example,

00:02:06,430 --> 00:02:10,150
Slack web hook, if you're thinking in the CI/CD space,

00:02:10,150 --> 00:02:14,080
it would be your GitHub secret and token to listen to

00:02:14,080 --> 00:02:16,210
a GitHub Push event

00:02:16,210 --> 00:02:18,490
or a pole event or comment, whatever it might be.

00:02:18,490 --> 00:02:18,940
>> Okay.

00:02:18,940 --> 00:02:20,320
>> Right? So, that's

00:02:20,320 --> 00:02:22,210
your project and the only thing that's

00:02:22,210 --> 00:02:25,825
really important here is, in your project,

00:02:25,825 --> 00:02:27,490
is the actual name,

00:02:27,490 --> 00:02:29,380
because that's how the service,

00:02:29,380 --> 00:02:31,510
the Brigade service, generally notices that

00:02:31,510 --> 00:02:33,820
there's an inbound event for that pipeline.

00:02:33,820 --> 00:02:36,190
>> Got it. So, I start this thing up.

00:02:36,190 --> 00:02:36,610
>> Yep.

00:02:36,610 --> 00:02:38,950
>> It's been configured to listen to certain hooks.

00:02:38,950 --> 00:02:39,430
>> That's right.

00:02:39,430 --> 00:02:40,570
>> When any of those events

00:02:40,570 --> 00:02:42,220
happen, it's going to wake up and say,

00:02:42,220 --> 00:02:43,300
"It's time for me to do my

00:02:43,300 --> 00:02:44,800
job," and then it's going to run through

00:02:44,800 --> 00:02:46,360
that JavaScript file and do

00:02:46,360 --> 00:02:48,175
whatever it says to do in here which is,

00:02:48,175 --> 00:02:51,150
particularly this part starting a container,

00:02:51,150 --> 00:02:53,390
with this particular environment variables

00:02:53,390 --> 00:02:54,320
set so that that container

00:02:54,320 --> 00:02:55,340
can do what it's supposed to do.

00:02:55,340 --> 00:02:55,640
>> Right.

00:02:55,640 --> 00:02:57,080
>> And every time that event happens,

00:02:57,080 --> 00:02:59,870
does a new one of these get fired up? Does this one die?

00:02:59,870 --> 00:03:01,790
>> That's right. Every time it happens,

00:03:01,790 --> 00:03:03,560
all pipelines are independent.

00:03:03,560 --> 00:03:05,240
So, every time a new event comes in,

00:03:05,240 --> 00:03:07,700
you're going to get a different pipeline instance.

00:03:07,700 --> 00:03:08,240
>> Okay.

00:03:08,240 --> 00:03:10,340
>> And this is only a very simple function.

00:03:10,340 --> 00:03:11,450
It's only one function.

00:03:11,450 --> 00:03:13,130
So, you're going to get one container

00:03:13,130 --> 00:03:14,900
created to run this function.

00:03:14,900 --> 00:03:15,530
>> Okay.

00:03:15,530 --> 00:03:17,330
>> But I could add

00:03:17,330 --> 00:03:18,800
several other functions and

00:03:18,800 --> 00:03:20,390
call them from inside this function,

00:03:20,390 --> 00:03:22,280
and each function would get its own container.

00:03:22,280 --> 00:03:23,360
>> I got it.

00:03:23,360 --> 00:03:25,475
So, if I wanted to run something like unit tests,

00:03:25,475 --> 00:03:27,640
that will probably be its own container,

00:03:27,640 --> 00:03:30,135
that will then run and that container would die,

00:03:30,135 --> 00:03:32,430
and then I might wanna run integration test,

00:03:32,430 --> 00:03:33,660
or something like that that would be a completely

00:03:33,660 --> 00:03:35,355
different container that would spin up,

00:03:35,355 --> 00:03:38,295
because I called a function in this file that said,

00:03:38,295 --> 00:03:39,960
now it's time to go do this particular step

00:03:39,960 --> 00:03:41,640
of my deployment on my pipeline.

00:03:41,640 --> 00:03:42,900
>> That's right. And if you think about

00:03:42,900 --> 00:03:45,555
the standard CI/CD pipeline,

00:03:45,555 --> 00:03:49,035
you would listen on a GitHub or a VSTS push event,

00:03:49,035 --> 00:03:50,850
and one container would go

00:03:50,850 --> 00:03:53,400
clone that particular commit and

00:03:53,400 --> 00:03:54,660
another container would take

00:03:54,660 --> 00:03:58,050
that stored commit, the artifacts itself,

00:03:58,050 --> 00:03:59,880
and go ahead and try and build them,

00:03:59,880 --> 00:04:02,445
and then if the results are X or Y,

00:04:02,445 --> 00:04:05,130
pass or fail, depending on what the criteria were,

00:04:05,130 --> 00:04:07,080
it would then go push that code somewhere else,

00:04:07,080 --> 00:04:09,300
or maybe tag the code, for example,

00:04:09,300 --> 00:04:10,488
it might be a release,

00:04:10,488 --> 00:04:12,450
might actually build a release.

00:04:12,450 --> 00:04:12,960
>> Okay.

00:04:12,960 --> 00:04:13,980
>> All right and put that in

00:04:13,980 --> 00:04:15,780
GitHub so that you can immediately download.

00:04:15,780 --> 00:04:19,470
These would be all sort of standard CI/CD activities.

00:04:19,470 --> 00:04:19,860
>> Right.

00:04:19,860 --> 00:04:21,060
>> So, if you think about

00:04:21,060 --> 00:04:22,230
building that kind of a pipeline,

00:04:22,230 --> 00:04:23,835
it sounds very straightforward.

00:04:23,835 --> 00:04:26,295
It is a very CI/CD kind of thing.

00:04:26,295 --> 00:04:28,245
Here, you can see that we can do

00:04:28,245 --> 00:04:29,715
completely different things.

00:04:29,715 --> 00:04:30,840
We're not listening for GitHub.

00:04:30,840 --> 00:04:34,080
>> But the thing that strikes me is that,

00:04:34,080 --> 00:04:37,665
if I already have tools like Jenkins and VSTS,

00:04:37,665 --> 00:04:39,180
why would I use this?

00:04:39,180 --> 00:04:40,340
>> Because this has

00:04:40,340 --> 00:04:41,900
a couple of features that make it very

00:04:41,900 --> 00:04:44,750
agile and useful for certain scenarios, but not all.

00:04:44,750 --> 00:04:45,110
>> Okay.

00:04:45,110 --> 00:04:47,210
>> So, for example, if you are already using Jenkins

00:04:47,210 --> 00:04:47,930
especially if you're in

00:04:47,930 --> 00:04:49,580
an organization that's been using it for years,

00:04:49,580 --> 00:04:51,365
you have all these files built up,

00:04:51,365 --> 00:04:53,120
that sort of in a way encode

00:04:53,120 --> 00:04:56,120
your company's experience in CI/CD.

00:04:56,120 --> 00:04:58,340
And you're never going to rewrite those in JavaScript,

00:04:58,340 --> 00:05:00,620
and there's no static configuration file

00:05:00,620 --> 00:05:01,985
or importer here.

00:05:01,985 --> 00:05:05,300
Brigade isn't meant to replace those larger,

00:05:05,300 --> 00:05:07,505
systems and especially if you use that.

00:05:07,505 --> 00:05:10,070
Instead, it's for people who are developers,

00:05:10,070 --> 00:05:11,720
small teams, they need to get

00:05:11,720 --> 00:05:14,440
some automation up and running very, very quickly,

00:05:14,440 --> 00:05:16,530
and they're familiar with JavaScript and running

00:05:16,530 --> 00:05:18,420
natively in the Kubernetes cluster

00:05:18,420 --> 00:05:19,770
to which they have access,

00:05:19,770 --> 00:05:21,090
makes a lot of sense,

00:05:21,090 --> 00:05:23,130
and they can do it right here and right now.

00:05:23,130 --> 00:05:23,760
>> I see.

00:05:23,760 --> 00:05:25,500
>> But, there's going to be

00:05:25,500 --> 00:05:28,845
a logical point at which that has stabilized.

00:05:28,845 --> 00:05:30,960
In their environment, maybe they're having success,

00:05:30,960 --> 00:05:32,460
maybe the applications taking

00:05:32,460 --> 00:05:33,960
off, they've added developers,

00:05:33,960 --> 00:05:37,125
and they realized that managing their own CI/CD,

00:05:37,125 --> 00:05:38,910
even if it's Brigade, even if it works really,

00:05:38,910 --> 00:05:41,280
really well, is really not what they want to do.

00:05:41,280 --> 00:05:43,560
And so eventually, as

00:05:43,560 --> 00:05:45,420
they get more successful or there's more low,

00:05:45,420 --> 00:05:46,950
they're likely to move these workflows

00:05:46,950 --> 00:05:48,625
into a more sort of

00:05:48,625 --> 00:05:52,030
hosted solution like VSTS or something else.

00:05:52,030 --> 00:05:54,850
>> Now, I'm also thinking as you're talking about that,

00:05:54,850 --> 00:05:56,500
I'm visioning pipelines in my head,

00:05:56,500 --> 00:05:57,970
because I've built a lot of these pipelines

00:05:57,970 --> 00:05:59,155
in VSTS already,

00:05:59,155 --> 00:06:00,340
may have other components.

00:06:00,340 --> 00:06:01,780
They'll have mobile front ends.

00:06:01,780 --> 00:06:04,090
They'll have database back-ends that are naps.

00:06:04,090 --> 00:06:05,410
And note, that's other things that I

00:06:05,410 --> 00:06:07,030
see happening in my pipeline.

00:06:07,030 --> 00:06:08,620
Would Brigade be something that I could

00:06:08,620 --> 00:06:10,120
actually like have a task,

00:06:10,120 --> 00:06:11,590
that does a lot of the Brigade kind of

00:06:11,590 --> 00:06:13,345
stuff for me as part of that pipeline,

00:06:13,345 --> 00:06:15,010
or I completely abandon Brigade and

00:06:15,010 --> 00:06:16,900
just start doing that stuff inside of VSTS?

00:06:16,900 --> 00:06:18,370
Is there something like a middle ground

00:06:18,370 --> 00:06:20,110
there I could use it as part of my CI/CD?

00:06:20,110 --> 00:06:21,760
>> Well, if you look at this, for example,

00:06:21,760 --> 00:06:24,420
we're going to listen on an exec event.

00:06:24,420 --> 00:06:26,786
You can imagine you already have pipelines and VSTS.

00:06:26,786 --> 00:06:27,470
>> Sure.

00:06:27,470 --> 00:06:29,360
>> And what you really want to do is firm out to

00:06:29,360 --> 00:06:32,375
some special custom tasks inside a cluster.

00:06:32,375 --> 00:06:33,755
Maybe it's a deployment.

00:06:33,755 --> 00:06:35,900
Maybe it's some monitoring task.

00:06:35,900 --> 00:06:37,460
It doesn't really matter what it is,

00:06:37,460 --> 00:06:39,620
because your creativity is going to be the future.

00:06:39,620 --> 00:06:39,950
>> Sure.

00:06:39,950 --> 00:06:42,290
>> Right? So, what you might want to do is actually

00:06:42,290 --> 00:06:45,320
just listen on a VSTS event, right?

00:06:45,320 --> 00:06:48,350
And when that happens, use VSTS as the trigger to drive

00:06:48,350 --> 00:06:51,470
a Brigade pipeline in a cluster somewhere else.

00:06:51,470 --> 00:06:51,885
>> Got it.

00:06:51,885 --> 00:06:53,660
>> And when that pipeline's done, if you wish,

00:06:53,660 --> 00:06:55,670
you can call back into VSTS,

00:06:55,670 --> 00:06:56,356
>> Sure.

00:06:56,356 --> 00:06:59,590
>> And make sure that some other more logical pipeline

00:06:59,590 --> 00:07:00,970
that you already know about continues.

00:07:00,970 --> 00:07:01,130
>> Got it.

00:07:01,130 --> 00:07:03,370
>> So, it's a plug-and-play kind of thing.

00:07:03,370 --> 00:07:04,720
>> Awesome. And that's where,

00:07:04,720 --> 00:07:06,745
like I say, whenever DevOps comes up,

00:07:06,745 --> 00:07:08,080
my immediate like, all right,

00:07:08,080 --> 00:07:09,310
what are we talking

00:07:09,310 --> 00:07:10,750
about here? What are we trying to replace?

00:07:10,750 --> 00:07:13,480
Where does it fit into a bigger orchestration?

00:07:13,480 --> 00:07:16,435
And it sounds like what you're proposing is,

00:07:16,435 --> 00:07:18,460
to get started from ground zero,

00:07:18,460 --> 00:07:19,240
this is probably going to be

00:07:19,240 --> 00:07:19,900
the quickest way for

00:07:19,900 --> 00:07:20,223
you to be able to start building up that stuff.

00:07:20,223 --> 00:07:22,223
>> Yes. Absolutely.

00:07:22,223 --> 00:07:22,885
>> At some point you may

00:07:22,885 --> 00:07:25,990
outgrow what Brigade is doing or I shouldn't say outgrow,

00:07:25,990 --> 00:07:28,484
but might want a more structured or more,

00:07:28,484 --> 00:07:29,950
structured is a good word for a pipeline.

00:07:29,950 --> 00:07:32,710
>> It makes absolute sense for people who want

00:07:32,710 --> 00:07:34,840
their their automation environment to be

00:07:34,840 --> 00:07:36,220
a scriptable thing running

00:07:36,220 --> 00:07:37,795
in the clusters they have on hand.

00:07:37,795 --> 00:07:39,280
So, very agile.

00:07:39,280 --> 00:07:41,090
It's a way where you can use this,

00:07:41,090 --> 00:07:42,820
your basic developer skills,

00:07:42,820 --> 00:07:45,400
to get actual CI/CD pipelines,

00:07:45,400 --> 00:07:48,250
and we say CI/CD but it could be any automation pipeline.

00:07:48,250 --> 00:07:50,560
You could build chat apps with this.

00:07:50,560 --> 00:07:53,545
You could build notification systems for your cluster.

00:07:53,545 --> 00:07:55,855
It's not really clear what the

00:07:55,855 --> 00:07:58,300
full panoply of options that this creates.

00:07:58,300 --> 00:07:59,380
>> The more we talk about it,

00:07:59,380 --> 00:08:01,075
the more I'm starting to see you how,

00:08:01,075 --> 00:08:02,560
because you don't need,

00:08:02,560 --> 00:08:05,160
to go worry about learning Jenkins or learning

00:08:05,160 --> 00:08:06,660
VSTS or learning something

00:08:06,660 --> 00:08:08,070
to go ahead and have that pipeline,

00:08:08,070 --> 00:08:10,350
and you're able to utilize the resources you

00:08:10,350 --> 00:08:11,580
already have in your cluster to

00:08:11,580 --> 00:08:12,990
go do the work that you need.

00:08:12,990 --> 00:08:13,620
>> That's right.

00:08:13,620 --> 00:08:16,140
>> And also, it has one other feature that's

00:08:16,140 --> 00:08:17,550
really important and we mentioned

00:08:17,550 --> 00:08:18,990
it before but it's worth reiterating,

00:08:18,990 --> 00:08:20,715
and that is, it's Kubernetes native.

00:08:20,715 --> 00:08:21,990
So, for example, Jenkins is

00:08:21,990 --> 00:08:23,520
a wonderful system and there's tons

00:08:23,520 --> 00:08:26,324
of community knowledge about how to run that.

00:08:26,324 --> 00:08:28,890
But the problem with Jenkins is it's it's also native,

00:08:28,890 --> 00:08:30,750
so it needs to be contained first,

00:08:30,750 --> 00:08:32,730
and then when it's running in a container,

00:08:32,730 --> 00:08:34,815
you now need to manage that anyway,

00:08:34,815 --> 00:08:36,360
and Brigade is built as

00:08:36,360 --> 00:08:38,100
a Kubernetes native system in the first place.

00:08:38,100 --> 00:08:40,350
It's much easier to install, remove,

00:08:40,350 --> 00:08:42,917
and so you add a bunch of agility to

00:08:42,917 --> 00:08:46,320
small corners of your organization, if the big one,

00:08:46,320 --> 00:08:48,330
or if you're start up or small organization,

00:08:48,330 --> 00:08:51,000
it gives you a ton of agility to get things done really,

00:08:51,000 --> 00:08:52,440
really quickly without having

00:08:52,440 --> 00:08:53,970
to manage something like Jenkins,

00:08:53,970 --> 00:08:58,624
which is wonderful but much more fully functional,

00:08:58,624 --> 00:09:01,620
and also before you maybe move into a hosted solution.

00:09:01,620 --> 00:09:03,000
>> Great. So, as a developer,

00:09:03,000 --> 00:09:06,315
I've never done containerized before.

00:09:06,315 --> 00:09:07,530
I would start with draft,

00:09:07,530 --> 00:09:09,360
got to bootstrap me and get me going.

00:09:09,360 --> 00:09:09,750
>> That's right.

00:09:09,750 --> 00:09:11,490
>> It's going to work with helm to make sure that

00:09:11,490 --> 00:09:13,125
my kube configs are all

00:09:13,125 --> 00:09:14,100
managed for me and I don't have

00:09:14,100 --> 00:09:15,345
to live in that nightmare.

00:09:15,345 --> 00:09:16,665
And now when I want to start

00:09:16,665 --> 00:09:18,120
automating a lot of this process,

00:09:18,120 --> 00:09:19,650
so that I'm not right-click publishing which,

00:09:19,650 --> 00:09:21,390
we have a team member of

00:09:21,390 --> 00:09:22,470
my team mate that says

00:09:22,470 --> 00:09:24,090
friends don't let friends right click Publish.

00:09:24,090 --> 00:09:26,295
So, when you want to kind of grow up out of that,

00:09:26,295 --> 00:09:27,900
you could actually start with Brigade,

00:09:27,900 --> 00:09:29,220
and then to automate a lot of

00:09:29,220 --> 00:09:30,780
that stuff that used to be manual,

00:09:30,780 --> 00:09:33,090
and then at some point maybe that transition

00:09:33,090 --> 00:09:34,230
into something I could jump into VSTS.

00:09:34,230 --> 00:09:35,670
>> In fact, let me show you how this works.

00:09:35,670 --> 00:09:37,395
I see right now, I just received

00:09:37,395 --> 00:09:40,725
a little automated notification Slack for a bike,

00:09:40,725 --> 00:09:42,270
because I'm looking for bikes.

00:09:42,270 --> 00:09:42,660
>> Okay.

00:09:42,660 --> 00:09:44,520
>> Okay. Actually, this process does this.

00:09:44,520 --> 00:09:46,650
I want to point out that an exec is

00:09:46,650 --> 00:09:49,385
a special kind of event that Brigade listens to,

00:09:49,385 --> 00:09:52,280
that is triggered by a client tool.

00:09:52,280 --> 00:09:54,995
So, that client tool is called brig,

00:09:54,995 --> 00:09:57,800
and brig merely reaches

00:09:57,800 --> 00:10:00,020
into the API and triggers an exec event.

00:10:00,020 --> 00:10:00,320
>> Okay.

00:10:00,320 --> 00:10:02,420
>> And so, other than listening to

00:10:02,420 --> 00:10:05,615
GitHub events or VSTS or dark or whatever might be,

00:10:05,615 --> 00:10:06,905
this is a way to actually have

00:10:06,905 --> 00:10:10,400
any scriptable environment trigger a Brigade pipeline.

00:10:10,400 --> 00:10:10,569
>> Awesome.

00:10:10,569 --> 00:10:12,890
>> Even if it doesn't have a listener for it, right?

00:10:12,890 --> 00:10:14,450
And so, we just give it the

00:10:14,450 --> 00:10:17,690
the the Brigade JavaScript file

00:10:17,690 --> 00:10:19,805
and we tell it which project name to target,

00:10:19,805 --> 00:10:21,880
and we go ahead and run.

00:10:21,880 --> 00:10:23,760
>> And what happens if you'll notice,

00:10:23,760 --> 00:10:27,015
we get a worker, that's the one processing the handler.

00:10:27,015 --> 00:10:29,850
We get a Slack notify pod that knows how to notify.

00:10:29,850 --> 00:10:32,040
And up at the top, I don't know if you can see it,

00:10:32,040 --> 00:10:33,330
but we got this nice

00:10:33,330 --> 00:10:36,780
little notification already in the channel.

00:10:36,780 --> 00:10:37,290
>> Got it.

00:10:37,290 --> 00:10:38,580
>> So, that was that fast.

00:10:38,580 --> 00:10:41,482
It was done in 7.58 seconds here.

00:10:41,482 --> 00:10:43,875
That's the whole process end to end.

00:10:43,875 --> 00:10:45,390
We've got the notification faster.

00:10:45,390 --> 00:10:45,840
>> Right.

00:10:45,840 --> 00:10:46,995
>> Now it is worth saying,

00:10:46,995 --> 00:10:49,395
that this isn't an actual real-time system, right?

00:10:49,395 --> 00:10:50,580
We've got to create containers,

00:10:50,580 --> 00:10:51,720
we got to make sure the containers are

00:10:51,720 --> 00:10:53,190
already cached, and so forth.

00:10:53,190 --> 00:10:56,026
But it turns around pretty consistently and very rapidly,

00:10:56,026 --> 00:10:58,440
compared to other systems you might use in this way.

00:10:58,440 --> 00:11:02,175
>> Got it. So, this seems to be a very simple,

00:11:02,175 --> 00:11:05,250
demonstration where if I wanted to go learn more or see

00:11:05,250 --> 00:11:07,560
a more complicated Brigade type

00:11:07,560 --> 00:11:09,000
of deployment or automation,

00:11:09,000 --> 00:11:10,590
where would I go to get more of that information?

00:11:10,590 --> 00:11:13,185
>> Well, recently, a team member, Brian Redmond,

00:11:13,185 --> 00:11:17,220
went to KubeCon, which was in Austin last week.

00:11:17,220 --> 00:11:21,450
And in KubeCon, Brian built out his presentation,

00:11:21,450 --> 00:11:25,560
a giant full CI/CD demo using Istio.

00:11:25,560 --> 00:11:29,100
And so, with Brigade and Kashti,

00:11:29,100 --> 00:11:31,365
which is the visualization dashboard,

00:11:31,365 --> 00:11:33,600
the nice web interface that you can use to

00:11:33,600 --> 00:11:36,270
view any Brigade pipeline, not just the CI/CD.

00:11:36,270 --> 00:11:36,690
>> Okay.

00:11:36,690 --> 00:11:39,870
>> He built out this lovely sampler.

00:11:39,870 --> 00:11:41,880
It's here on medium, we'll post the link.

00:11:41,880 --> 00:11:42,240
>> Okay.

00:11:42,240 --> 00:11:44,190
>> And you can rebuild it yourself.

00:11:44,190 --> 00:11:45,555
He shared out all the code,

00:11:45,555 --> 00:11:48,240
and walked through the steps of doing what he's doing,

00:11:48,240 --> 00:11:49,770
and that's a lovely sample.

00:11:49,770 --> 00:11:52,740
It was one of the big hits of KubeCon

00:11:52,740 --> 00:11:56,025
because it demonstrated using Istio for blue-green,

00:11:56,025 --> 00:11:58,260
canary deployments, and things like this.

00:11:58,260 --> 00:12:00,570
All those things that we really want to use

00:12:00,570 --> 00:12:03,780
container native developments and DevOps tools to do.

00:12:03,780 --> 00:12:06,050
>> Perfect. And Brigade,

00:12:06,050 --> 00:12:06,710
just like some of

00:12:06,710 --> 00:12:08,180
the other tools we talked about in this series,

00:12:08,180 --> 00:12:09,470
is completely open source.

00:12:09,470 --> 00:12:11,210
You can go to GitHub and contribute,

00:12:11,210 --> 00:12:13,550
and make sure that it continues

00:12:13,550 --> 00:12:15,020
to add value not only

00:12:15,020 --> 00:12:16,580
to you but to everyone else in the community.

00:12:16,580 --> 00:12:19,310
>> Absolutely. I mean, if you find this

00:12:19,310 --> 00:12:22,355
interesting and you want to feature in it, please do.

00:12:22,355 --> 00:12:25,820
I'll point out one example of how easy it is to extend.

00:12:25,820 --> 00:12:28,130
That is, you notice that we could have written

00:12:28,130 --> 00:12:31,865
JavaScript to do all the notification in Slack,

00:12:31,865 --> 00:12:33,605
but if you do this here,

00:12:33,605 --> 00:12:34,820
in a container, and just call

00:12:34,820 --> 00:12:36,365
in the container and say go,

00:12:36,365 --> 00:12:38,825
now you have a tremendous amount of extensibility because

00:12:38,825 --> 00:12:39,920
other people can use

00:12:39,920 --> 00:12:42,210
those containers to do the same thing you're doing.

00:12:42,210 --> 00:12:43,860
And so, this container is publicly

00:12:43,860 --> 00:12:46,620
available to do Slack notification,

00:12:46,620 --> 00:12:47,760
so anybody can write

00:12:47,760 --> 00:12:49,200
a Brigade and just use this container.

00:12:49,200 --> 00:12:49,775
>> Awesome.

00:12:49,775 --> 00:12:50,955
>> If there's a bug in it,

00:12:50,955 --> 00:12:53,055
and you fix the bug in that container,

00:12:53,055 --> 00:12:55,455
now all the Brigades that use that container

00:12:55,455 --> 00:12:58,290
everywhere now get the advantage of that fix.

00:12:58,290 --> 00:13:00,360
>> That is awesome. Well, we are learning

00:13:00,360 --> 00:13:03,880

YouTube URL: https://www.youtube.com/watch?v=aZMna3VuoAg


