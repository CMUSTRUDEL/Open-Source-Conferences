Title: Azure Friday | Container-native developer experiences, Part 1 - Overview
Publication date: 2018-02-09
Playlist: Microsoft Open Source Summit
Description: 
	Join Donovan Brown & Ralph Squillace to learn about the open source tool chain that enables container-native, microservice-oriented app development and delivery in Kubernetes. They cover the challenges of adopting containers as a code delivery technology and some of the tools that help address them:

- Draft for containment and service composition: https://draft.sh/
- Helm for application deployment and management: https://helm.sh/
- Brigade for automating critical developer and operations tasks: https://brigade.sh/
- Kashti for displaying the progress of Brigade pipelines: https://github.com/Azure/Kashti
Captions: 
	00:00:00,000 --> 00:00:02,070
>> Hi. I'm Donovan with another episode

00:00:02,070 --> 00:00:03,860
of Azure Friday. I'm here with Ralph.

00:00:03,860 --> 00:00:04,530
We're going to talk about

00:00:04,530 --> 00:00:06,720
Container Native Developer Experience

00:00:06,720 --> 00:00:08,490
powered by open source tools

00:00:08,490 --> 00:00:10,340
from Microsoft. Welcome to the show, Ralph.

00:00:10,340 --> 00:00:11,040
>> Well, thank you very much.

00:00:11,040 --> 00:00:12,945
>> So what do you do here at Microsoft?

00:00:12,945 --> 00:00:14,700
>> I'm a Program Manager for

00:00:14,700 --> 00:00:17,390
the open source developer tooling experience.

00:00:17,390 --> 00:00:19,152
That actually includes several tools,

00:00:19,152 --> 00:00:20,880
we'll talk about a bunch of them.

00:00:20,880 --> 00:00:24,060
But the idea is to create an environment in

00:00:24,060 --> 00:00:27,260
which for any container development environment,

00:00:27,260 --> 00:00:28,680
where if you're going to build applications

00:00:28,680 --> 00:00:30,205
that land in Kubernetes,

00:00:30,205 --> 00:00:31,845
for example, especially that,

00:00:31,845 --> 00:00:34,200
you need a series of tools that help you get from

00:00:34,200 --> 00:00:37,680
application development to containment or a Dockerfile,

00:00:37,680 --> 00:00:39,715
things like this, if you're familiar with that.

00:00:39,715 --> 00:00:41,490
And from containment, you need to do

00:00:41,490 --> 00:00:44,785
service composition in order to align all those,

00:00:44,785 --> 00:00:46,020
the containers in the appropriate

00:00:46,020 --> 00:00:47,520
ways so that you can install

00:00:47,520 --> 00:00:48,965
them as a logical unit

00:00:48,965 --> 00:00:50,895
in Kubernetes and get things running.

00:00:50,895 --> 00:00:53,100
In a Windows environment,

00:00:53,100 --> 00:00:54,360
that's usually something like

00:00:54,360 --> 00:00:55,897
Visual Studio or something larger.

00:00:55,897 --> 00:00:58,020
Right? More coherent.

00:00:58,020 --> 00:00:59,070
In the open source world,

00:00:59,070 --> 00:01:00,120
those are Linux tools and

00:01:00,120 --> 00:01:01,705
Linux tooling culture has

00:01:01,705 --> 00:01:03,700
a sort of different approach to it.

00:01:03,700 --> 00:01:06,860
They tend to put things together in individual ways,

00:01:06,860 --> 00:01:08,403
so that you can create a toolchain.

00:01:08,403 --> 00:01:09,900
You can replace and remove

00:01:09,900 --> 00:01:12,015
one or the other tools very easily.

00:01:12,015 --> 00:01:13,350
And we've built a bunch of

00:01:13,350 --> 00:01:16,390
those tools that work wonderfully for this experience,

00:01:16,390 --> 00:01:18,535
and works in any Kubernetes cluster whether it's

00:01:18,535 --> 00:01:19,770
locally or if you're

00:01:19,770 --> 00:01:21,245
using the managed Kubernetes service in Azure.

00:01:21,245 --> 00:01:23,100
>> Perfect. So, we have a lot to talk about.

00:01:23,100 --> 00:01:24,560
So this is just the first of

00:01:24,560 --> 00:01:26,760
actually three videos that we're going to shoot together.

00:01:26,760 --> 00:01:28,140
And what we're going to do now is kind of lay

00:01:28,140 --> 00:01:29,490
the foundation and talk about

00:01:29,490 --> 00:01:30,810
how all those tools you just

00:01:30,810 --> 00:01:32,325
described kind of work together,

00:01:32,325 --> 00:01:33,570
and then in other episodes,

00:01:33,570 --> 00:01:35,130
we're going to drill into Draft and

00:01:35,130 --> 00:01:36,840
Brigade and explain how those actually work.

00:01:36,840 --> 00:01:38,490
So, given that, why don't you go

00:01:38,490 --> 00:01:39,420
ahead and kind of lay

00:01:39,420 --> 00:01:40,660
the foundation for this talk for us.

00:01:40,660 --> 00:01:44,115
>> Sure. So most microservices,

00:01:44,115 --> 00:01:45,374
we would call that,

00:01:45,374 --> 00:01:46,680
used to call that SOA,

00:01:46,680 --> 00:01:50,855
Service-oriented applications, architecture and so forth.

00:01:50,855 --> 00:01:53,310
Microservice approach applications are now

00:01:53,310 --> 00:01:56,130
moving toward from native developments,

00:01:56,130 --> 00:01:58,740
so if you actually write your application you actually

00:01:58,740 --> 00:02:01,435
ship your application code itself,

00:02:01,435 --> 00:02:04,530
it's not contained in a Docker container, for example.

00:02:04,530 --> 00:02:08,390
We've perfected tools for that, but in fact,

00:02:08,390 --> 00:02:10,830
the containment is an amazing way to

00:02:10,830 --> 00:02:13,345
increase your agility, increase your consistency.

00:02:13,345 --> 00:02:15,290
DevOps become potentially much,

00:02:15,290 --> 00:02:17,460
much more agile and powerful.

00:02:17,460 --> 00:02:20,340
But you need a tooling environment for all that because

00:02:20,340 --> 00:02:23,180
containers are a different tool to use. Right?

00:02:23,180 --> 00:02:23,293
>>Absolutely.

00:02:23,293 --> 00:02:24,595
>>So you're going to need other things.

00:02:24,595 --> 00:02:26,370
So, to move from

00:02:26,370 --> 00:02:29,575
native development to container native development,

00:02:29,575 --> 00:02:30,720
we need something that helps

00:02:30,720 --> 00:02:32,730
people write Dockerfiles correctly,

00:02:32,730 --> 00:02:35,735
or acquire the correct one for their application,

00:02:35,735 --> 00:02:37,440
and we need something that will

00:02:37,440 --> 00:02:39,870
understand how to take those containers,

00:02:39,870 --> 00:02:42,400
and deploy them coherently in Kubernetes.

00:02:42,400 --> 00:02:44,650
Those tools already exist in Microsoft

00:02:44,650 --> 00:02:47,040
as a major either contributor or

00:02:47,040 --> 00:02:48,600
creator of these tools that we offer to

00:02:48,600 --> 00:02:51,750
anybody in any Kubernetes cluster anyway.

00:02:51,750 --> 00:02:53,220
>> Okay that's good to know because

00:02:53,220 --> 00:02:54,910
I'm a developer for 20 years,

00:02:54,910 --> 00:02:57,180
and when I got introduced to containers,

00:02:57,180 --> 00:02:58,965
I just had this complete fear

00:02:58,965 --> 00:03:01,080
over me of all these new things I had to learn,

00:03:01,080 --> 00:03:03,030
and how do I go from doing the development

00:03:03,030 --> 00:03:05,350
that I know and love to putting it inside of a container.

00:03:05,350 --> 00:03:06,750
And it sounds like the tooling that we're

00:03:06,750 --> 00:03:08,355
going to talk about in this series

00:03:08,355 --> 00:03:09,990
are the tools that I would need to start to

00:03:09,990 --> 00:03:11,850
use to be able to bridge that gap,

00:03:11,850 --> 00:03:14,820
and hopefully hide a lot of that complexity away from me,

00:03:14,820 --> 00:03:16,140
so that I focus on what I'm good at.

00:03:16,140 --> 00:03:17,405
Which is developing software,

00:03:17,405 --> 00:03:18,690
and all the container magic

00:03:18,690 --> 00:03:20,055
just sounds like it's going to happen for me.

00:03:20,055 --> 00:03:21,810
>> Yeah. It mostly does.

00:03:21,810 --> 00:03:22,855
Of course, all these tools

00:03:22,855 --> 00:03:24,060
you've become an expert in and,

00:03:24,060 --> 00:03:25,320
but not everybody can become

00:03:25,320 --> 00:03:26,900
an expert in every part of this.

00:03:26,900 --> 00:03:27,222
>>Sure.

00:03:27,222 --> 00:03:28,550
>>And you really want your developers or

00:03:28,550 --> 00:03:30,960
at least the majority of them focusing on writing code.

00:03:30,960 --> 00:03:31,440
>> Absolutely.

00:03:31,440 --> 00:03:33,000
>> So the thing about Docker containers,

00:03:33,000 --> 00:03:34,170
for example, a Dockerfile,

00:03:34,170 --> 00:03:35,790
if you've seen it and many people have

00:03:35,790 --> 00:03:38,505
now or they're tinkering with it right now,

00:03:38,505 --> 00:03:40,435
it's a pretty simple file format.

00:03:40,435 --> 00:03:44,262
But I was just at DockerCon in Copenhagen recently,

00:03:44,262 --> 00:03:45,330
and I found people walking

00:03:45,330 --> 00:03:46,560
up and they really didn't know that

00:03:46,560 --> 00:03:48,600
many configuration commands in

00:03:48,600 --> 00:03:50,200
a Dockerfile, and that's at DockerCon.

00:03:50,200 --> 00:03:52,050
And what you realize is that

00:03:52,050 --> 00:03:55,470
most developers really still do native development, okay?

00:03:55,470 --> 00:03:57,480
And then when they think their app is working,

00:03:57,480 --> 00:03:58,910
they'll go google or Bingo,

00:03:58,910 --> 00:04:01,650
as they say, some Dockerfile

00:04:01,650 --> 00:04:02,970
that is similar to what they

00:04:02,970 --> 00:04:04,545
think they're doing and they'll try it.

00:04:04,545 --> 00:04:06,355
And it may work and it may not,

00:04:06,355 --> 00:04:07,710
but then they have to delve into

00:04:07,710 --> 00:04:09,550
something that is not development.

00:04:09,550 --> 00:04:09,755
>>Sure.

00:04:09,755 --> 00:04:12,164
>>They're just trying to debug containment.

00:04:12,164 --> 00:04:12,348
>>Got you.

00:04:12,348 --> 00:04:14,490
>>And they haven't even figured out how to do

00:04:14,490 --> 00:04:16,050
service composition and deployment

00:04:16,050 --> 00:04:18,580
yet because that's a different format.

00:04:18,580 --> 00:04:18,727
>>Got you. And so.

00:04:18,727 --> 00:04:20,640
>>We want to remove those steps from

00:04:20,640 --> 00:04:22,770
the main body of developer experience.

00:04:22,770 --> 00:04:24,320
>> So what tools are those? What are they called?

00:04:24,320 --> 00:04:26,030
>> So we have several tools.

00:04:26,030 --> 00:04:28,440
The most important one is for,

00:04:28,440 --> 00:04:30,840
packaging things is the second one.

00:04:30,840 --> 00:04:32,070
It's Helm over here,

00:04:32,070 --> 00:04:35,100
and I use that first because that one is

00:04:35,100 --> 00:04:42,025
the default sort of accepted package manager for services,

00:04:42,025 --> 00:04:45,180
logical entities that are a bunch of containers working

00:04:45,180 --> 00:04:48,660
together to form one application in the Kubernetes.

00:04:48,660 --> 00:04:50,430
So you will you do Kubernetes install

00:04:50,430 --> 00:04:52,515
and point out what is called a Helm chart.

00:04:52,515 --> 00:04:55,705
Which is a simplified form of a Kubernetes manifest,

00:04:55,705 --> 00:04:58,100
it's much easier to understand and use.

00:04:58,100 --> 00:04:58,410
>>Got you.

00:04:58,410 --> 00:05:01,540
>>And you can do all kinds of developer operations

00:05:01,540 --> 00:05:03,280
there with that tool against

00:05:03,280 --> 00:05:05,635
the Kubernetes clusters.So upgrades,

00:05:05,635 --> 00:05:09,764
deletions, you know, different kinds of releases,

00:05:09,764 --> 00:05:12,485
canary updates, and so forth, those kind of thing.

00:05:12,485 --> 00:05:14,465
So that's Helm and it's very much like

00:05:14,465 --> 00:05:16,663
Apt-Get or Nu-Get if you're in there or you know,

00:05:16,663 --> 00:05:18,220
Chocolatey kind of thing.

00:05:18,220 --> 00:05:19,561
So it's very sort of

00:05:19,561 --> 00:05:21,600
metaphorically easy to understand. Right?

00:05:21,600 --> 00:05:22,150
>>Okay.

00:05:22,150 --> 00:05:24,235
>>But then there's the developer environment

00:05:24,235 --> 00:05:25,570
too and so we need to help

00:05:25,570 --> 00:05:27,970
developers acquire the proper Dockerfile

00:05:27,970 --> 00:05:29,475
for their application type.

00:05:29,475 --> 00:05:31,925
And we also need them to acquire the proper Helm chart,

00:05:31,925 --> 00:05:33,850
so that their application container

00:05:33,850 --> 00:05:36,050
can be easily installed.

00:05:36,050 --> 00:05:36,493
>>Okay. Follow you.

00:05:36,493 --> 00:05:37,780
>>We don't want the developer

00:05:37,780 --> 00:05:39,760
spending a ton of time doing that.

00:05:39,760 --> 00:05:40,660
They make mistakes,

00:05:40,660 --> 00:05:41,920
but even when they don't make mistakes,

00:05:41,920 --> 00:05:44,000
they take time and it's not development.

00:05:44,000 --> 00:05:46,300
right? The tool for this is Draft,

00:05:46,300 --> 00:05:47,820
which is the first one up here.

00:05:47,820 --> 00:05:49,840
Right? And then finally,

00:05:49,840 --> 00:05:51,520
once you built that application,

00:05:51,520 --> 00:05:53,085
you need to actually deliver it.

00:05:53,085 --> 00:05:55,240
Draft just helps you test it in containers,

00:05:55,240 --> 00:05:57,305
and deploy it as fast as possible.

00:05:57,305 --> 00:06:00,040
For Microsoft people, it's like the F5 experience.

00:06:00,040 --> 00:06:00,325
>>Got it.

00:06:00,325 --> 00:06:02,080
>>Only instead of F5 creating

00:06:02,080 --> 00:06:04,390
a debug version that's running natively,

00:06:04,390 --> 00:06:06,340
F5 will actually create

00:06:06,340 --> 00:06:08,035
your container with your application in it,

00:06:08,035 --> 00:06:10,585
and deploy it with a Helm chart

00:06:10,585 --> 00:06:13,615
so that you can see it running instantly,

00:06:13,615 --> 00:06:18,025
already contained, already functioning in Kubernetes.

00:06:18,025 --> 00:06:21,470
>> Great. So, I'm a Visual Studio baby for a long time.

00:06:21,470 --> 00:06:23,470
So, it sounds like what you.

00:06:23,470 --> 00:06:24,163
>>As well you should be.

00:06:24,163 --> 00:06:26,080
>>Working here, I should be. Right? But it's

00:06:26,080 --> 00:06:27,910
interesting is what Draft sounds like to me

00:06:27,910 --> 00:06:28,975
is the right click at

00:06:28,975 --> 00:06:30,790
Docker support inside Visual Studio

00:06:30,790 --> 00:06:31,900
for the open source world.

00:06:31,900 --> 00:06:33,010
>> Almost exactly like that.

00:06:33,010 --> 00:06:33,910
>> Got it. Okay.

00:06:33,910 --> 00:06:34,143
>>Absolutely.

00:06:34,143 --> 00:06:35,590
>>Great because I, connects the dots for

00:06:35,590 --> 00:06:37,295
those of us who were coming from the Windows world.

00:06:37,295 --> 00:06:39,790
So we have Helm that helps hide

00:06:39,790 --> 00:06:40,810
the complexity of building

00:06:40,810 --> 00:06:42,460
a configuration for Kubernetes.

00:06:42,460 --> 00:06:43,750
We have Draft that takes

00:06:43,750 --> 00:06:45,340
the native developer and turns them into

00:06:45,340 --> 00:06:47,455
a containerized developer by building out

00:06:47,455 --> 00:06:50,565
all the scaffolding that I need to break my Dockerfile,

00:06:50,565 --> 00:06:51,820
be able to build the image,

00:06:51,820 --> 00:06:53,165
and be able to deploy the image

00:06:53,165 --> 00:06:54,440
to where I can actually see that,

00:06:54,440 --> 00:06:55,570
yes, it's been containerized and it

00:06:55,570 --> 00:06:57,010
actually functions the way it's supposed to.

00:06:57,010 --> 00:06:57,600
>> Exactly.

00:06:57,600 --> 00:06:59,560
>> And then at that point, as a developer,

00:06:59,560 --> 00:07:00,850
I have all the artifacts now that

00:07:00,850 --> 00:07:02,280
I can commit to source control.

00:07:02,280 --> 00:07:03,760
And I would assume at some point,

00:07:03,760 --> 00:07:04,990
all those artifacts now had to be

00:07:04,990 --> 00:07:06,750
packaged and then deployed into my cluster.

00:07:06,750 --> 00:07:08,240
>> Yes. You're going to trick me here,

00:07:08,240 --> 00:07:10,725
but then that's going to happen with GitHub.

00:07:10,725 --> 00:07:13,030
Right? And you're going to do a git-push or in VSTS and

00:07:13,030 --> 00:07:15,713
get pushed to the VSTS get-repo.

00:07:15,713 --> 00:07:17,140
Right? And you are going to trigger

00:07:17,140 --> 00:07:18,430
off some kind of CICD.

00:07:18,430 --> 00:07:18,895
>>Absolutely.

00:07:18,895 --> 00:07:21,220
>>Continuous integration continuous deployment.

00:07:21,220 --> 00:07:23,055
We have a tool for that in the open source world.

00:07:23,055 --> 00:07:26,619
Many people will be using either a free service,

00:07:26,619 --> 00:07:28,303
Circle CI, TeamCity,

00:07:28,303 --> 00:07:30,680
this kind of thing or VSTS or some other service.

00:07:30,680 --> 00:07:30,884
>> Jenkins in [inaudible]. Sure.

00:07:30,884 --> 00:07:32,541
>> The Jenkins they've set up.

00:07:32,541 --> 00:07:34,220
The thing about Jenkins

00:07:34,220 --> 00:07:35,795
is it's a wonderful open source tool,

00:07:35,795 --> 00:07:37,360
lot of people know it, and there's tons of

00:07:37,360 --> 00:07:38,740
sort of built-in experience

00:07:38,740 --> 00:07:40,630
in files and things like this.

00:07:40,630 --> 00:07:42,895
But Brigade is the tool

00:07:42,895 --> 00:07:44,605
that we build to do this kind of work,

00:07:44,605 --> 00:07:45,860
not just for CICD,

00:07:45,860 --> 00:07:49,290
but for any structured containerized pipeline.

00:07:49,290 --> 00:07:50,650
And that's a little bit funky,

00:07:50,650 --> 00:07:52,510
but let's start by talking about it

00:07:52,510 --> 00:07:55,132
with CICD as an example.

00:07:55,132 --> 00:07:56,755
So, a Brigade pipeline,

00:07:56,755 --> 00:07:58,890
a brigade is a service that you can install with

00:07:58,890 --> 00:08:01,405
Helm in one line in any cluster.

00:08:01,405 --> 00:08:04,510
So it can install locally here in MiniQ or you

00:08:04,510 --> 00:08:07,650
can install it in AKS or any other place.

00:08:07,650 --> 00:08:10,660
If you have a Bare Metal cluster and Raspberry Pis,

00:08:10,660 --> 00:08:14,000
you can install it there too and use that. Right?

00:08:14,000 --> 00:08:14,105
>>Got it.

00:08:14,105 --> 00:08:17,725
>>So, what you do with Brigade is you give it a project.

00:08:17,725 --> 00:08:20,320
Which is really a JavaScript file in which

00:08:20,320 --> 00:08:23,185
every function listens for a certain event,

00:08:23,185 --> 00:08:25,645
and you can use JavaScript to call

00:08:25,645 --> 00:08:28,690
any number of functions in any order you wish.

00:08:28,690 --> 00:08:31,510
Whether they want to be run as parallel jobs or whether

00:08:31,510 --> 00:08:34,915
they should be in series.

00:08:34,915 --> 00:08:36,940
Right? Okay. Each function is actually

00:08:36,940 --> 00:08:39,145
created in Kubernetes as a container,

00:08:39,145 --> 00:08:41,230
and executed inside a container

00:08:41,230 --> 00:08:43,270
using shared storage so that

00:08:43,270 --> 00:08:47,740
you can pass state from one container job to the next.

00:08:47,740 --> 00:08:49,090
In a way, it's basically like scripting

00:08:49,090 --> 00:08:50,680
using pipes on a Bash shell. So with Linux,

00:08:50,680 --> 00:08:51,455
>> Got it.

00:08:51,455 --> 00:08:52,890
So you're basically just mounting your drives in.

00:08:52,890 --> 00:08:53,910
>> Yes, absolutely.

00:08:53,910 --> 00:08:54,340
>> Got it.

00:08:54,340 --> 00:08:55,975
>> And you can mount other kinds of storage,

00:08:55,975 --> 00:08:57,700
but those details, we'll talk about later.

00:08:57,700 --> 00:08:58,840
>>Yeah, absolutely. So interesting.

00:08:58,840 --> 00:09:01,450
So now it looks like we now have this nice set of

00:09:01,450 --> 00:09:03,370
tooling that we can use to take

00:09:03,370 --> 00:09:06,025
a developer who was new to containers,

00:09:06,025 --> 00:09:07,865
and get them all the way from,

00:09:07,865 --> 00:09:09,250
"I have no idea what containers are.

00:09:09,250 --> 00:09:10,870
I don't even know how to create a Dockerfile.

00:09:10,870 --> 00:09:12,235
I'll use Draft for that.

00:09:12,235 --> 00:09:15,250
I'll be able to then use Helm to figure out what

00:09:15,250 --> 00:09:18,445
my Kubernetes configuration file needs to look like,

00:09:18,445 --> 00:09:20,230
and then I'll be able to use brigade to

00:09:20,230 --> 00:09:22,060
get that code actually out into my cluster."

00:09:22,060 --> 00:09:23,578
>> Or test, and test it first,

00:09:23,578 --> 00:09:25,090
build the images, stash them in

00:09:25,090 --> 00:09:26,770
perfect place, digitally sign them.

00:09:26,770 --> 00:09:29,170
All of the normal CICD workflows that you

00:09:29,170 --> 00:09:31,930
would associate with any automation pipeline.

00:09:31,930 --> 00:09:33,340
>> Now if I'm not mistaken,

00:09:33,340 --> 00:09:34,870
these are all open source tools that

00:09:34,870 --> 00:09:36,793
we contributed to the open source.

00:09:36,793 --> 00:09:36,981
>>Yes.

00:09:36,981 --> 00:09:38,015
>>Where can someone go in like,

00:09:38,015 --> 00:09:39,685
where are the repos they need to go look at?

00:09:39,685 --> 00:09:41,380
How can someone go and contribute and look at this [inaudible]?

00:09:41,380 --> 00:09:43,120
>> It's pretty easy. First of all,

00:09:43,120 --> 00:09:44,680
the Helm was originally

00:09:44,680 --> 00:09:46,570
developed by the current team at Microsoft

00:09:46,570 --> 00:09:50,185
that we acquired when we purchased Deis last spring.

00:09:50,185 --> 00:09:52,750
And so, they're my development team and so,

00:09:52,750 --> 00:09:54,400
Helm is the package manager for Kubernetes

00:09:54,400 --> 00:09:58,260
by de facto usage.

00:09:58,260 --> 00:10:00,700
You can go to helm.sh and start from there.

00:10:00,700 --> 00:10:02,320
And of course, you can just click through to

00:10:02,320 --> 00:10:04,990
the docs or go straight to the GitHub repo

00:10:04,990 --> 00:10:06,685
and you'll find all the things you need

00:10:06,685 --> 00:10:09,550
to know either to use it or to contribute to it.

00:10:09,550 --> 00:10:09,983
>>Perfect.

00:10:09,983 --> 00:10:12,945
>>Right? Brigade we talked about.

00:10:12,945 --> 00:10:16,270
Brigade is the event-driven scripting for Kubernetes.

00:10:16,270 --> 00:10:19,300
That's the automation service that you can use

00:10:19,300 --> 00:10:22,650
for CICD or anything else. And we'll show you about that.

00:10:22,650 --> 00:10:24,590
And there's also another project that goes with brigade,

00:10:24,590 --> 00:10:26,395
it's called Kashti, which we just release.

00:10:26,395 --> 00:10:29,905
Which is a lovely web UI that allows you to

00:10:29,905 --> 00:10:32,731
use it as a dashboard reporting system

00:10:32,731 --> 00:10:34,090
for all your brigade pipelines.

00:10:34,090 --> 00:10:37,010
>> And then Draft is also open source. And there we go.

00:10:37,010 --> 00:10:38,380
>> And there's Draft. And that's

00:10:38,380 --> 00:10:41,320
the developer container native iteration tool

00:10:41,320 --> 00:10:44,615
that helps you set up all those files to start with,

00:10:44,615 --> 00:10:47,590
and get your application on the right path to

00:10:47,590 --> 00:10:49,090
container native development instead

00:10:49,090 --> 00:10:50,170
of you having to figure it out

00:10:50,170 --> 00:10:52,890
yourself or any number of other developers.

00:10:52,890 --> 00:10:53,980
>> And I always joke that this

00:10:53,980 --> 00:10:55,300
is not your daddy's Microsoft.

00:10:55,300 --> 00:10:57,670
And to see these many open source projects actually

00:10:57,670 --> 00:11:00,335
championed and started by Microsoft is incredible.

00:11:00,335 --> 00:11:01,210
And another thing that I noticed

00:11:01,210 --> 00:11:02,260
which is really interesting is you're on

00:11:02,260 --> 00:11:03,430
Surface Book but that is

00:11:03,430 --> 00:11:05,070
not Windows that you're running behind us.

00:11:05,070 --> 00:11:05,860
>> No, it isn't.

00:11:05,860 --> 00:11:06,970
>> So you spend the majority of

00:11:06,970 --> 00:11:08,220
your time in a Linux environment as well?

00:11:08,220 --> 00:11:10,990
>> In fact, no, I have a Mac, of course,

00:11:10,990 --> 00:11:12,430
because we have to make sure that

00:11:12,430 --> 00:11:14,260
everything runs on all the operating systems,

00:11:14,260 --> 00:11:15,625
not just the Linux,

00:11:15,625 --> 00:11:17,340
but Mac, but also windows.

00:11:17,340 --> 00:11:20,415
So these tools are available for Windows users as well.

00:11:20,415 --> 00:11:22,905
But I do all of my corporate work on

00:11:22,905 --> 00:11:25,525
Linux on my Surface Book

00:11:25,525 --> 00:11:27,335
because that's just a great machine.

00:11:27,335 --> 00:11:28,510
>> No, agreed. And that was funny

00:11:28,510 --> 00:11:29,950
because I always tell people

00:11:29,950 --> 00:11:31,540
the first time I ever installed Linux was

00:11:31,540 --> 00:11:33,400
actually after I joined Microsoft.

00:11:33,400 --> 00:11:35,500
Which is such a strange thing to tell people

00:11:35,500 --> 00:11:36,610
that I joined Microsoft and then

00:11:36,610 --> 00:11:37,730
I installed Linux for the first time.

00:11:37,730 --> 00:11:40,645
>> If you follow me on Twitter pretty much every week,

00:11:40,645 --> 00:11:43,525
it's getting less and more and more rare that it happens,

00:11:43,525 --> 00:11:44,605
but it, pretty much I do

00:11:44,605 --> 00:11:46,720
mention that hell has frozen over again.

00:11:46,720 --> 00:11:48,580
It does. It's a running joke that works.

00:11:48,580 --> 00:11:49,750
>> Fantastic. Well, I'm really looking

00:11:49,750 --> 00:11:51,220
forward to the other episodes where we'll

00:11:51,220 --> 00:11:54,095
be able to dive deeper into Draft and into Brigade.

00:11:54,095 --> 00:11:55,780
But today, we're learning all about

00:11:55,780 --> 00:11:58,150
Containerized Developer Experience powered

00:11:58,150 --> 00:12:01,880

YouTube URL: https://www.youtube.com/watch?v=sFL_NpQKxGo


