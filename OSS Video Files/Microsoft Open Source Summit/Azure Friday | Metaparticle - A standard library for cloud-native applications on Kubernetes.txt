Title: Azure Friday | Metaparticle - A standard library for cloud-native applications on Kubernetes
Publication date: 2018-04-06
Playlist: Microsoft Open Source Summit
Description: 
	Metaparticle is an experimental, cloud-native development environment for democratizing and simplifying the development of reliable distributed applications. It uses a code-first approach, so developers can describe the composite nature of their application with easy to apply patterns and practices to annotate their existing code.

For more information, see:

Metaparticle - https://aka.ms/azfr/398/01
Metaparticle.io on GitHub - https://aka.ms/azfr/398/02
Metaparticle tutorials - https://aka.ms/azfr/398/03
Create a Free Account (Azure) - https://aka.ms/azfr/398/04
Captions: 
	00:00:00,100 --> 00:00:03,540
>> Hi, I am Donovan with another episode of Azure Friday.

00:00:03,540 --> 00:00:04,990
I'm here with Brendan, and we're going to learn about

00:00:04,990 --> 00:00:06,260
this research project called

00:00:06,260 --> 00:00:07,900
Metaparticle. Welcome to the show, Brendan.

00:00:07,900 --> 00:00:08,730
>> Thanks for having me.

00:00:08,730 --> 00:00:09,740
>> So, tell me real quick,

00:00:09,740 --> 00:00:10,825
what do you do here at Microsoft?

00:00:10,825 --> 00:00:13,180
>> So, I'm in charge of a bunch of

00:00:13,180 --> 00:00:14,560
different teams that I would say

00:00:14,560 --> 00:00:16,155
work on DevOps and Azure.

00:00:16,155 --> 00:00:16,550
>> Okay.

00:00:16,550 --> 00:00:18,180
>> So, from containers to

00:00:18,180 --> 00:00:19,430
more traditional things like

00:00:19,430 --> 00:00:21,180
the Azure Resource Manager templates,

00:00:21,180 --> 00:00:22,450
but really focusing on how

00:00:22,450 --> 00:00:25,100
people build and deploy their code into Azure.

00:00:25,100 --> 00:00:26,670
>> All right. Great. And this Metaparticle,

00:00:26,670 --> 00:00:27,490
tell me what this is about.

00:00:27,490 --> 00:00:28,750
>> So, Metaparticle came about

00:00:28,750 --> 00:00:30,160
really because I think a lot

00:00:30,160 --> 00:00:34,770
about the complexity of going from code to cloud.

00:00:34,770 --> 00:00:38,070
There's way too much in the way of tools to learn,

00:00:38,070 --> 00:00:41,020
and different configuration languages,

00:00:41,020 --> 00:00:42,390
YAML, all this sort of thing that

00:00:42,390 --> 00:00:44,410
stands in between you with

00:00:44,410 --> 00:00:45,965
some code on your computer

00:00:45,965 --> 00:00:48,130
and a reliable system running on the cloud.

00:00:48,130 --> 00:00:49,360
And so, I think, really,

00:00:49,360 --> 00:00:50,990
we need to, as an industry,

00:00:50,990 --> 00:00:53,310
think about how do we build new tools

00:00:53,310 --> 00:00:54,570
to reduce that complexity and

00:00:54,570 --> 00:00:56,050
make it more approachable for people?

00:00:56,050 --> 00:00:59,140
And Metaparticle is maybe one step down that direction.

00:00:59,140 --> 00:01:00,160
It's a long way to go, I think.

00:01:00,160 --> 00:01:02,180
>> All right. So, is this supposed to be replacing

00:01:02,180 --> 00:01:04,140
my traditional CICD system or is

00:01:04,140 --> 00:01:04,810
this something that's going to

00:01:04,810 --> 00:01:06,230
augment that to make it easier?

00:01:06,230 --> 00:01:09,330
>> I view it more like the inventions of

00:01:09,330 --> 00:01:11,270
things like object-oriented programming

00:01:11,270 --> 00:01:12,455
or managed code, right?

00:01:12,455 --> 00:01:14,860
It's like, in a more traditional language,

00:01:14,860 --> 00:01:16,270
you might have to worry about memory management.

00:01:16,270 --> 00:01:17,850
In a managed code environment,

00:01:17,850 --> 00:01:18,850
you've got a garbage collector.

00:01:18,850 --> 00:01:20,960
It's just trying to simplify

00:01:20,960 --> 00:01:24,440
things and really focusing on the developer's experience,

00:01:24,440 --> 00:01:26,600
not necessarily on something like

00:01:26,600 --> 00:01:29,235
CICD that takes you in a production roll-out.

00:01:29,235 --> 00:01:29,690
>> Got you.

00:01:29,690 --> 00:01:31,290
So, we're talking about more of that inner loop,

00:01:31,290 --> 00:01:33,340
that developer loop that's happening on my dev machine.

00:01:33,340 --> 00:01:34,810
This is going to make that part of my life easier.

00:01:34,810 --> 00:01:36,480
>> And, I think also bringing somebody

00:01:36,480 --> 00:01:39,945
from writing a computer program that runs on one machine,

00:01:39,945 --> 00:01:41,730
to writing a program that runs on the cloud.

00:01:41,730 --> 00:01:43,130
I think that's a big hurdle for some people

00:01:43,130 --> 00:01:44,850
and that's really what it's focused on,

00:01:44,850 --> 00:01:46,140
is trying to break down those barriers.

00:01:46,140 --> 00:01:47,650
>> Awesome. So, let me see how it works.

00:01:47,650 --> 00:01:50,415
>> Sure. So, I'm going to start out here

00:01:50,415 --> 00:01:55,690
with showing a really simple JavaScript Node.js server.

00:01:55,690 --> 00:01:57,340
It just says, ''Hello World,'' and it's going to

00:01:57,340 --> 00:02:00,555
serve on my local host right now.

00:02:00,555 --> 00:02:03,440
And so, relatively easy for me to run it.

00:02:03,440 --> 00:02:05,070
It's there up and running,

00:02:05,070 --> 00:02:07,120
you see, and they can see the requests down below.

00:02:07,120 --> 00:02:09,500
There was one that failed when it started to come up.

00:02:09,500 --> 00:02:11,980
And this is what I would expect a developer,

00:02:11,980 --> 00:02:13,950
you know, is ready to do.

00:02:13,950 --> 00:02:15,770
They understand how to write a little bit of code,

00:02:15,770 --> 00:02:17,235
maybe take a sample off the web,

00:02:17,235 --> 00:02:19,110
run it on their local machine and they

00:02:19,110 --> 00:02:20,925
can access it via HTDP.

00:02:20,925 --> 00:02:21,510
>> Sure.

00:02:21,510 --> 00:02:23,615
>> But then, you go, ''Well, okay,

00:02:23,615 --> 00:02:24,950
I want to take that and I want to

00:02:24,950 --> 00:02:26,385
package it up and run it on Azure."

00:02:26,385 --> 00:02:28,330
Right? And if I want to do it with

00:02:28,330 --> 00:02:30,175
containers and I want to do it with Kubernetes,

00:02:30,175 --> 00:02:31,730
there's suddenly a bunch of tools

00:02:31,730 --> 00:02:33,190
that you need to learn, right?

00:02:33,190 --> 00:02:34,970
You need to learn how do I use Docker?

00:02:34,970 --> 00:02:36,380
How do I create a Docker file?

00:02:36,380 --> 00:02:37,540
How do I use Kubernetes?

00:02:37,540 --> 00:02:38,985
How do I turn up

00:02:38,985 --> 00:02:41,615
and package my application and deploy it?

00:02:41,615 --> 00:02:43,485
There's a bunch of different steps and I think

00:02:43,485 --> 00:02:46,030
none of them are necessarily really related to your goal,

00:02:46,030 --> 00:02:48,280
which was, how do I get my code running in the cloud?

00:02:48,280 --> 00:02:52,615
And so, let's take a look at what we do with Metaparticle.

00:02:52,615 --> 00:02:54,730
So, with Metaparticle instead,

00:02:54,730 --> 00:02:56,110
here's that same code

00:02:56,110 --> 00:02:57,850
but we've augmented it a little bit.

00:02:57,850 --> 00:03:00,390
One thing you see here is I've pulled in a new library.

00:03:00,390 --> 00:03:02,170
I've pulled in this Metaparticle library.

00:03:02,170 --> 00:03:04,210
It's important to point out that Metaparticle is

00:03:04,210 --> 00:03:07,555
actually a polyglot solution.

00:03:07,555 --> 00:03:10,075
I'm showing it to you here in Node.js.

00:03:10,075 --> 00:03:11,955
In a little bit I'll show it to you in Java but

00:03:11,955 --> 00:03:13,800
we've got implementations for Python,

00:03:13,800 --> 00:03:16,790
for.NET, for Go, for Rust.

00:03:16,790 --> 00:03:18,820
The community has started to spring up around this to

00:03:18,820 --> 00:03:19,440
provide a bunch of

00:03:19,440 --> 00:03:21,360
different implementations in different languages.

00:03:21,360 --> 00:03:21,585
>> Okay.

00:03:21,585 --> 00:03:22,870
>> All meant to kind of feel

00:03:22,870 --> 00:03:25,515
natural inside of that programming language.

00:03:25,515 --> 00:03:28,230
And so, you see the library that I've pulled in here,

00:03:28,230 --> 00:03:31,740
and then you see this containerized directive.

00:03:31,740 --> 00:03:34,480
And so, this containerized directive has said, ''Okay,

00:03:34,480 --> 00:03:36,560
I want you to actually take that code that I was running,

00:03:36,560 --> 00:03:37,945
which is down here,

00:03:37,945 --> 00:03:40,440
and package it up as a Docker container,

00:03:40,440 --> 00:03:42,125
publish it to a Docker registry.''

00:03:42,125 --> 00:03:43,640
In this particular case, it's going to run

00:03:43,640 --> 00:03:45,810
locally on the machine using Docker,

00:03:45,810 --> 00:03:47,620
but in later examples, we'll show how you can also

00:03:47,620 --> 00:03:50,300
then push the code out to a Kubernetes cluster.

00:03:50,300 --> 00:03:51,850
And so, let's take a look at that.

00:03:51,850 --> 00:03:54,290
So now, up here, you can see the Docker build happening

00:03:54,290 --> 00:03:56,500
and actually it's also pushed it up to the registry,

00:03:56,500 --> 00:03:57,810
and that was actually the same

00:03:57,810 --> 00:03:59,350
experience that I had before.

00:03:59,350 --> 00:04:03,865
I see the logs from the application up and running,

00:04:03,865 --> 00:04:05,220
but now, if I take a look,

00:04:05,220 --> 00:04:06,350
I've got a Docker container up

00:04:06,350 --> 00:04:07,440
and running. So, how did I-?

00:04:07,440 --> 00:04:09,770
>> So, I missed where you actually executed.

00:04:09,770 --> 00:04:11,750
So, do I just do a normal node command?

00:04:11,750 --> 00:04:12,940
>> Correct. You just say,

00:04:12,940 --> 00:04:16,020
exact same file, you say, Node server.js,

00:04:16,020 --> 00:04:17,890
but the library itself says,

00:04:17,890 --> 00:04:20,870
''Ah, you know, I see that you are running this program.

00:04:20,870 --> 00:04:23,155
I see the request to containerize it.

00:04:23,155 --> 00:04:24,590
I'm going to package it out of his container,

00:04:24,590 --> 00:04:25,775
push it to the registry,

00:04:25,775 --> 00:04:27,260
and then when that container runs,

00:04:27,260 --> 00:04:29,575
it actually detects that it's running inside a container,

00:04:29,575 --> 00:04:31,720
skips that whole part and then just runs your code."

00:04:31,720 --> 00:04:32,410
>> Got you. Okay.

00:04:32,410 --> 00:04:34,870
>> Right. So, it's this mixed mode where

00:04:34,870 --> 00:04:37,690
if you run it on your laptop, it packages itself.

00:04:37,690 --> 00:04:39,090
If you run it inside a container,

00:04:39,090 --> 00:04:40,260
it runs your application code.

00:04:40,260 --> 00:04:40,560
>> Awesome.

00:04:40,560 --> 00:04:42,225
>> And I think that really helps

00:04:42,225 --> 00:04:43,750
make the experience feel the same, right?

00:04:43,750 --> 00:04:46,205
Because when you run it, you still get standard out,

00:04:46,205 --> 00:04:47,150
you still get standard in,

00:04:47,150 --> 00:04:48,000
and you still get that, sort of,

00:04:48,000 --> 00:04:49,190
like, it feels like it's running on

00:04:49,190 --> 00:04:50,520
your machine but it's

00:04:50,520 --> 00:04:52,330
actually being packaged and run inside a container.

00:04:52,330 --> 00:04:52,800
>> Awesome.

00:04:52,800 --> 00:04:55,385
>> I'ts really trying to preserve that, like small steps.

00:04:55,385 --> 00:04:57,130
We want to go from running on your laptop,

00:04:57,130 --> 00:04:58,570
to running in a container on your laptop,

00:04:58,570 --> 00:04:59,950
to running in a container on the cloud,

00:04:59,950 --> 00:05:01,630
and really how to look and feel the same way.

00:05:01,630 --> 00:05:03,550
>> Perfect. So, one thing I didn't see you

00:05:03,550 --> 00:05:05,780
do is you didn't, where's the Docker file?

00:05:05,780 --> 00:05:08,450
Because it's almost like I know too much about it.

00:05:08,450 --> 00:05:09,680
It is a lot of black magic-

00:05:09,680 --> 00:05:11,385
>> No, but I think that's really important actually,

00:05:11,385 --> 00:05:12,530
and actually what it does is,

00:05:12,530 --> 00:05:14,345
it does write the Docker file to your file system.

00:05:14,345 --> 00:05:16,180
And so, if you learn about that at

00:05:16,180 --> 00:05:18,010
some point or you need to tweak it in some way,

00:05:18,010 --> 00:05:18,770
or you're done with

00:05:18,770 --> 00:05:20,610
this library and you want to just move on,

00:05:20,610 --> 00:05:22,360
that Docker file is still there.

00:05:22,360 --> 00:05:23,430
It's something you can build from,

00:05:23,430 --> 00:05:24,850
and I think that's critically important with

00:05:24,850 --> 00:05:27,155
these systems where you have to be able to,

00:05:27,155 --> 00:05:29,060
where I say it's more like

00:05:29,060 --> 00:05:31,580
you decide to learn how to mow your own grass.

00:05:31,580 --> 00:05:33,220
Well, in the first week, maybe don't do a good job.

00:05:33,220 --> 00:05:34,310
Grass gets a little bit longer, but

00:05:34,310 --> 00:05:35,615
it's not a catastrophe.

00:05:35,615 --> 00:05:38,605
I think a lot of these magical systems,

00:05:38,605 --> 00:05:40,485
it's like jumping out of a plane with no parachute.

00:05:40,485 --> 00:05:41,590
It's a bad way to learn.

00:05:41,590 --> 00:05:41,900
>> Sure.

00:05:41,900 --> 00:05:44,025
>> You want to learn in a sort of easy approach.

00:05:44,025 --> 00:05:45,600
And so that's what we're really intending to do.

00:05:45,600 --> 00:05:45,890
>> All right.

00:05:45,890 --> 00:05:46,810
>> All of the pieces are

00:05:46,810 --> 00:05:48,245
there if you start looking for them,

00:05:48,245 --> 00:05:50,130
but the experience at

00:05:50,130 --> 00:05:52,520
the top level is also compelling and easy to use.

00:05:52,520 --> 00:05:52,975
>> Awesome.

00:05:52,975 --> 00:05:56,210
>> All right. So, and then you can see here,

00:05:56,210 --> 00:05:58,310
we're hitting that server just like we were before.

00:05:58,310 --> 00:05:59,010
>> Correct.

00:05:59,010 --> 00:06:01,450
>> All right. And so,

00:06:01,450 --> 00:06:02,565
I'm going to go over to

00:06:02,565 --> 00:06:04,620
a slightly more complicated demo this time.

00:06:04,620 --> 00:06:06,170
This time is in Java,

00:06:06,170 --> 00:06:08,310
and I'll give you a sense for

00:06:08,310 --> 00:06:10,845
how we're using language level features.

00:06:10,845 --> 00:06:12,550
And so-

00:06:12,550 --> 00:06:15,930
>> Do you use Maven to build this-?

00:06:15,930 --> 00:06:17,470
>> Yes, we are using Maven to build it now,

00:06:17,470 --> 00:06:19,915
and it's building up a directory.

00:06:19,915 --> 00:06:21,250
And in the case of Java,

00:06:21,250 --> 00:06:23,030
the annotations are actually

00:06:23,030 --> 00:06:24,790
traditional, like app annotations.

00:06:24,790 --> 00:06:25,105
>> Okay.

00:06:25,105 --> 00:06:26,580
>> So, instead of having some of

00:06:26,580 --> 00:06:28,050
it feels like Node, it feels like Java.

00:06:28,050 --> 00:06:28,230
>> Sure.

00:06:28,230 --> 00:06:29,300
>> If you're a Java programmer,

00:06:29,300 --> 00:06:32,120
those annotations are traditional and familiar to you,

00:06:32,120 --> 00:06:34,835
and you can see, but still the Docker build is happening.

00:06:34,835 --> 00:06:37,420
It's actually pushing it up, and now,

00:06:37,420 --> 00:06:38,760
but what you'll notice here is

00:06:38,760 --> 00:06:40,410
in that Java directive that I had,

00:06:40,410 --> 00:06:42,130
I actually asked for four replicas,

00:06:42,130 --> 00:06:44,510
and I asked for it to be deployed to Kubernetes.

00:06:44,510 --> 00:06:45,930
And so now, instead of just running

00:06:45,930 --> 00:06:47,225
it in a single container,

00:06:47,225 --> 00:06:49,370
I've actually deployed four versions of

00:06:49,370 --> 00:06:51,560
the same container up into Kubernetes.

00:06:51,560 --> 00:06:54,455
These are those replicas that you see right there.

00:06:54,455 --> 00:06:57,020
Web one, web two, web three.

00:06:57,020 --> 00:06:58,970
These are the hosts, these are the various containers.

00:06:58,970 --> 00:07:01,345
And in fact, if I run kubectrl now,

00:07:01,345 --> 00:07:03,760
I can see that I've created

00:07:03,760 --> 00:07:07,430
a load balance service, my web service here.

00:07:07,430 --> 00:07:10,460
And I've created four replicas of that service.

00:07:10,460 --> 00:07:14,050
So my code is no longer one instance of my code.

00:07:14,050 --> 00:07:14,900
>> Right, so those.

00:07:14,900 --> 00:07:16,290
>> So there are four different replicas of my code.

00:07:16,290 --> 00:07:17,780
>> Yeah, those annotations would have been

00:07:17,780 --> 00:07:20,120
actually in my Java classes.

00:07:20,120 --> 00:07:20,830
>> Exactly.

00:07:20,830 --> 00:07:22,320
>> Not in my Palm File.

00:07:22,320 --> 00:07:23,765
So was there a different,

00:07:23,765 --> 00:07:24,970
when I ran Maven,

00:07:24,970 --> 00:07:26,330
did I just do the normal package?

00:07:26,330 --> 00:07:27,880
How did it know to go even read

00:07:27,880 --> 00:07:29,140
those annotations before you fire

00:07:29,140 --> 00:07:30,350
up my war file to do this?

00:07:30,350 --> 00:07:33,240
>> It's actually the execution of the JAR file, right?

00:07:33,240 --> 00:07:35,410
So it is compiled into the,

00:07:35,410 --> 00:07:36,990
just like with the no Gess example,

00:07:36,990 --> 00:07:39,010
when you say Java JAR,

00:07:39,010 --> 00:07:41,930
and you run that Java application on your local machine,

00:07:41,930 --> 00:07:43,460
it sees those annotations.

00:07:43,460 --> 00:07:44,020
>> Sure.

00:07:44,020 --> 00:07:44,995
>> And it packages until.

00:07:44,995 --> 00:07:46,190
>> I guess I missed that step.

00:07:46,190 --> 00:07:48,410
I figured you were doing a Maven build.

00:07:48,410 --> 00:07:51,755
>> But the Maven build happens inside that step. Sorry.

00:07:51,755 --> 00:07:53,360
>> Okay, so I missed the step there.

00:07:53,360 --> 00:07:56,870
>> So obviously, when you run that program,

00:07:56,870 --> 00:07:58,390
if you've made changes to your code,

00:07:58,390 --> 00:07:59,740
we need to detect

00:07:59,740 --> 00:08:01,485
those changes and build them into the container.

00:08:01,485 --> 00:08:01,840
>> Okay.

00:08:01,840 --> 00:08:03,290
>> So part of building the container

00:08:03,290 --> 00:08:04,995
is actually running a Maven build.

00:08:04,995 --> 00:08:06,110
>> I see.

00:08:06,110 --> 00:08:08,920
>> So in order to pick up those changes,

00:08:08,920 --> 00:08:10,040
you have to have done

00:08:10,040 --> 00:08:12,005
the build inside the context of the container.

00:08:12,005 --> 00:08:13,070
Otherwise, they wouldn't be there, right.

00:08:13,070 --> 00:08:14,150
Otherwise, you'd have a container that

00:08:14,150 --> 00:08:15,160
was stale effectively.

00:08:15,160 --> 00:08:17,150
>> Got you. So it was when

00:08:17,150 --> 00:08:19,280
I actually executed my JAR file,

00:08:19,280 --> 00:08:21,520
that the Maven kicked off to rebuild my image.

00:08:21,520 --> 00:08:23,200
>> Rebuild your image. Run the docker

00:08:23,200 --> 00:08:24,470
build to flood Kuban.

00:08:24,470 --> 00:08:26,190
>> Right. So I would have done a Maven build even

00:08:26,190 --> 00:08:28,370
before that to build the JAR based on my chain.

00:08:28,370 --> 00:08:28,740
>> That's right.

00:08:28,740 --> 00:08:30,020
>> That's the part that was missing.

00:08:30,020 --> 00:08:31,180
So you get a little bit more like,

00:08:31,180 --> 00:08:32,590
I think we jumped a couple of steps there.

00:08:32,590 --> 00:08:34,320
I'm a developer, I made a change,

00:08:34,320 --> 00:08:36,130
I'd set the annotations, I ran Maven,

00:08:36,130 --> 00:08:38,095
I got my war, my JAR, whatever it was.

00:08:38,095 --> 00:08:39,920
I want to execute that and then that's when

00:08:39,920 --> 00:08:42,450
the second Maven kicked off to go build my path.

00:08:42,450 --> 00:08:43,780
>> I mean the way I usually do it,

00:08:43,780 --> 00:08:45,540
I just use Maven exact

00:08:45,540 --> 00:08:47,470
Java and it'll just do all that for you.

00:08:47,470 --> 00:08:47,990
>> Got it. Fair enough.

00:08:47,990 --> 00:08:48,890
>> You don't have to do those two steps.

00:08:48,890 --> 00:08:49,660
>> Okay. Got it.

00:08:49,660 --> 00:08:50,160
>> Either way.

00:08:50,160 --> 00:08:50,520
>> Perfect.

00:08:50,520 --> 00:08:51,675
>> So now, if you look, we

00:08:51,675 --> 00:08:53,640
have the replicated deployment.

00:08:53,640 --> 00:08:55,360
And now, I can actually jumped into

00:08:55,360 --> 00:08:56,920
my cluster just to show

00:08:56,920 --> 00:08:59,345
you that it's actually up there and working.

00:08:59,345 --> 00:09:02,920
And I get a little shell up inside my cluster.

00:09:02,920 --> 00:09:07,160
And I can do a little for Lukins so for.

00:09:18,150 --> 00:09:21,775
So there's two interesting things to note here.

00:09:21,775 --> 00:09:23,700
One is that, you can

00:09:23,700 --> 00:09:25,665
see that it's moving through a bunch of different hosts.

00:09:25,665 --> 00:09:27,010
So it's really hitting that load balancer,

00:09:27,010 --> 00:09:28,700
it's really going between these different replicas.

00:09:28,700 --> 00:09:32,370
But also interestingly up here in my standard out,

00:09:32,370 --> 00:09:34,435
I'm getting all of those requests.

00:09:34,435 --> 00:09:35,730
So on my machine,

00:09:35,730 --> 00:09:38,660
it feels like the process is running on my machine.

00:09:38,660 --> 00:09:41,595
Standard out is still kicking stuff to my standard out.

00:09:41,595 --> 00:09:42,980
But actually, it's running up in

00:09:42,980 --> 00:09:45,410
the cloud in an Azure container service cluster,

00:09:45,410 --> 00:09:47,040
replicated out of Kubernetes, right.

00:09:47,040 --> 00:09:48,050
So I think again, you're trying to keep

00:09:48,050 --> 00:09:49,690
that fidelity of developer experience.

00:09:49,690 --> 00:09:50,300
>> Okay.

00:09:50,300 --> 00:09:56,460
>> So and then of course also, when I leave.

00:09:56,460 --> 00:09:58,850
>>And these I'm just assuming

00:09:58,850 --> 00:09:59,870
when you went into Kubernetes Azure,

00:09:59,870 --> 00:10:01,695
you're using ACR, right?

00:10:01,695 --> 00:10:02,970
>> Yeah, you can push.

00:10:02,970 --> 00:10:04,070
I mean, you could honestly push it to

00:10:04,070 --> 00:10:06,185
whatever registry you want, and then officially.

00:10:06,185 --> 00:10:08,025
>>The annotations also, how do I then

00:10:08,025 --> 00:10:10,350
off against my registry? Just curious.

00:10:10,350 --> 00:10:12,295
>> Right now, actually,

00:10:12,295 --> 00:10:14,285
you have to have pre-authorized Docker.

00:10:14,285 --> 00:10:16,050
So you have to have run Docker log in already.

00:10:16,050 --> 00:10:16,745
>> Okay. Got it.

00:10:16,745 --> 00:10:18,480
>> Okay. Little bit maybe

00:10:18,480 --> 00:10:20,120
I should automate that as well but.

00:10:20,120 --> 00:10:22,390
>> I'm just curious because I was concerned

00:10:22,390 --> 00:10:23,570
that there would be credentials in

00:10:23,570 --> 00:10:25,250
my annotations in my code that I'm going to commit.

00:10:25,250 --> 00:10:27,330
>> No it's done. It's expected

00:10:27,330 --> 00:10:28,490
there's a side process somewhere else.

00:10:28,490 --> 00:10:28,790
>> Fair enough.

00:10:28,790 --> 00:10:30,450
>> You don't need to log in and locker knows about it.

00:10:30,450 --> 00:10:31,005
>> Understood.

00:10:31,005 --> 00:10:31,625
>> Okay.

00:10:31,625 --> 00:10:33,020
>> And actually you can see here,

00:10:33,020 --> 00:10:35,125
I hit Control C on that Java process.

00:10:35,125 --> 00:10:36,730
And actually, it's tearing down

00:10:36,730 --> 00:10:38,120
this condition Kubernetes, right?

00:10:38,120 --> 00:10:38,400
>> Sure. Okay.

00:10:38,400 --> 00:10:39,995
>> So the idea that it

00:10:39,995 --> 00:10:41,730
really feels like it's running as a program on

00:10:41,730 --> 00:10:43,630
your machine holds even to Control C in

00:10:43,630 --> 00:10:45,600
that program and having the program destroy itself.

00:10:45,600 --> 00:10:47,130
>> So all that the control

00:10:47,130 --> 00:10:47,740
that I would have to

00:10:47,740 --> 00:10:48,650
normally do has all been done for you.

00:10:48,650 --> 00:10:49,380
>> All been done for you.

00:10:49,380 --> 00:10:50,470
>> Exactly. But it didn't happen or anything.

00:10:50,470 --> 00:10:51,010
>> Exactly.

00:10:51,010 --> 00:10:52,645
>> I love not having to learn new stuff.

00:10:52,645 --> 00:10:54,940
>> And so, then I want to show you this last example.

00:10:54,940 --> 00:10:55,160
>> Sure.

00:10:55,160 --> 00:10:56,580
>> And I'll give you a little bit of a flavor for

00:10:56,580 --> 00:10:58,370
those Java annotations that we're talking about.

00:10:58,370 --> 00:10:58,875
>> Okay.

00:10:58,875 --> 00:11:00,620
>> So here you can see.

00:11:00,620 --> 00:11:02,865
So these are actually the annotations.

00:11:02,865 --> 00:11:06,420
I have this runtime annotation here that describes it.

00:11:06,420 --> 00:11:09,450
And I have this package annotation that sort of tells you

00:11:09,450 --> 00:11:11,660
what repository and what's

00:11:11,660 --> 00:11:13,005
the JAR file I want you to package up.

00:11:13,005 --> 00:11:13,320
>> Okay.

00:11:13,320 --> 00:11:14,750
>> This one's a little bit different actually,

00:11:14,750 --> 00:11:15,820
and this is where we start to get into

00:11:15,820 --> 00:11:17,450
the cloud native stuff a little bit.

00:11:17,450 --> 00:11:19,710
In this case, we're actually going to do sharding.

00:11:19,710 --> 00:11:21,500
So in sharding, instead of

00:11:21,500 --> 00:11:23,315
round robin and your requests everywhere,

00:11:23,315 --> 00:11:24,860
a particular request goes to

00:11:24,860 --> 00:11:26,420
a particular machine all the time.

00:11:26,420 --> 00:11:26,730
>> Okay.

00:11:26,730 --> 00:11:27,790
>> Different requests will go to

00:11:27,790 --> 00:11:29,340
different machines but the same request,

00:11:29,340 --> 00:11:31,120
and that allows you to do better caching,

00:11:31,120 --> 00:11:33,800
it allows you to have sort of better failure modes.

00:11:33,800 --> 00:11:36,460
It's a relatively straightforward concept for people

00:11:36,460 --> 00:11:37,870
to understand I think but

00:11:37,870 --> 00:11:39,550
it's a hard concept potentially to implement.

00:11:39,550 --> 00:11:39,930
>> Okay.

00:11:39,930 --> 00:11:41,350
>> Right. And so Metaparticle here is

00:11:41,350 --> 00:11:43,680
trying to help you with that implementation.

00:11:43,680 --> 00:11:45,140
And in particular, what you're seeing here

00:11:45,140 --> 00:11:47,100
is I want there to be four shards,

00:11:47,100 --> 00:11:50,770
and I want the sharding pattern to be this, right.

00:11:50,770 --> 00:11:52,740
So the thing that I want to use is

00:11:52,740 --> 00:11:54,765
my sharding key is defined by this regular expression.

00:11:54,765 --> 00:11:56,720
Okay. Which in this case is the user.

00:11:56,720 --> 00:11:57,760
>> User, yeah.

00:11:57,760 --> 00:11:59,650
>> And then, we give

00:11:59,650 --> 00:12:01,735
the same containerized directive here.

00:12:01,735 --> 00:12:03,690
And then, everything below that is

00:12:03,690 --> 00:12:06,715
just a really simple Java web server.

00:12:06,715 --> 00:12:07,780
>> Interesting.

00:12:07,780 --> 00:12:10,290
>> And so, we'll do the same thing.

00:12:10,290 --> 00:12:12,870
We're going to kick off that

00:12:12,870 --> 00:12:16,025
the Maven execution of my class.

00:12:16,025 --> 00:12:18,855
It's going to kick off an internal build,

00:12:18,855 --> 00:12:21,030
package itself up as

00:12:21,030 --> 00:12:22,420
a docker file so the build

00:12:22,420 --> 00:12:23,910
should finish in just a second.

00:12:23,910 --> 00:12:25,430
>> You'll see that to registry.

00:12:25,430 --> 00:12:27,940
>> Yeah. So you see the docker build is starting now,

00:12:27,940 --> 00:12:29,815
and now the registry push is happening.

00:12:29,815 --> 00:12:32,550
I have to admit, I've pushed this image before and

00:12:32,550 --> 00:12:33,940
so only the last layer of need should

00:12:33,940 --> 00:12:35,715
be pushed in. So it's pretty quick.

00:12:35,715 --> 00:12:38,580
And now, this point it's deploying it's up to Kubernetes.

00:12:38,580 --> 00:12:40,175
And this time, it's actually going to deploy itself.

00:12:40,175 --> 00:12:42,730
It takes a little bit more time because it's actually

00:12:42,730 --> 00:12:44,150
deploying those shards and it's actually

00:12:44,150 --> 00:12:45,770
waiting for each shard to go healthy.

00:12:45,770 --> 00:12:47,190
Kubernetes waits for each shard to go

00:12:47,190 --> 00:12:48,600
healthy before moving onto the next one.

00:12:48,600 --> 00:12:48,910
>> Okay.

00:12:48,910 --> 00:12:50,490
>> Just saying give me four all at ones.

00:12:50,490 --> 00:12:50,765
>> Right.

00:12:50,765 --> 00:12:51,440
>> But at this point,

00:12:51,440 --> 00:12:52,770
all four of those shards were set up.

00:12:52,770 --> 00:12:54,430
And what you can see here is

00:12:54,430 --> 00:12:56,360
now instead of having one load balancer,

00:12:56,360 --> 00:12:57,715
I actually have to load balancers.

00:12:57,715 --> 00:12:59,435
One that's out at the edge.

00:12:59,435 --> 00:13:00,450
A first layer of

00:13:00,450 --> 00:13:01,880
shard router which is the thing that takes

00:13:01,880 --> 00:13:03,240
all the requests and decides

00:13:03,240 --> 00:13:04,770
which shard to direct traffic to.

00:13:04,770 --> 00:13:05,225
>> Okay.

00:13:05,225 --> 00:13:06,530
>> And then a load balancer

00:13:06,530 --> 00:13:08,125
is in front of my application.

00:13:08,125 --> 00:13:08,650
>> Right.

00:13:08,650 --> 00:13:10,140
>> And so, it's what's important here is now,

00:13:10,140 --> 00:13:13,285
I'm not just deploying your code my code.

00:13:13,285 --> 00:13:15,900
I'm actually deploying some utility classes

00:13:15,900 --> 00:13:17,805
as well that know how to do this sharding.

00:13:17,805 --> 00:13:18,210
>> Gotcha.

00:13:18,210 --> 00:13:20,420
>> So now, you're sort of starting to view containers as

00:13:20,420 --> 00:13:21,580
libraries that you can kind

00:13:21,580 --> 00:13:23,000
of link into your application.

00:13:23,000 --> 00:13:24,560
These generic shard router,

00:13:24,560 --> 00:13:25,600
I don't know where it came from.

00:13:25,600 --> 00:13:27,565
But I'm using it and it works right.

00:13:27,565 --> 00:13:30,010
And so I think that's also part of the power is

00:13:30,010 --> 00:13:32,880
that it allows us to share our code together.

00:13:32,880 --> 00:13:33,545
>> Okay.

00:13:33,545 --> 00:13:36,300
>> All right. So there's the deployment.

00:13:36,300 --> 00:13:37,900
There's my code up and running.

00:13:37,900 --> 00:13:41,375
And now, and you can see all the pods are now,

00:13:41,375 --> 00:13:42,660
all these different containers

00:13:42,660 --> 00:13:43,850
up and running in my cluster.

00:13:43,850 --> 00:13:49,270
Now when I jump into that cluster and do the same thing,

00:13:50,820 --> 00:13:57,690
command prompt, and say, wget.

00:14:03,760 --> 00:14:06,705
>> I see you here on this,

00:14:06,705 --> 00:14:08,430
you show us the sharding actually happening.

00:14:08,430 --> 00:14:10,180
>> Right. And so now, you can see here,

00:14:10,180 --> 00:14:11,230
if there was load balancing,

00:14:11,230 --> 00:14:12,740
I would expect my subsequent request.

00:14:12,740 --> 00:14:13,460
>> That come from someone else.

00:14:13,460 --> 00:14:14,650
>> Someone else but you can see here,

00:14:14,650 --> 00:14:17,290
as they are continually going from the same request,

00:14:17,290 --> 00:14:22,080
and if I go in and I change this to donovan,

00:14:22,080 --> 00:14:24,510
then it's coming from a different request. All right.

00:14:24,510 --> 00:14:25,160
>> Awesome.

00:14:25,160 --> 00:14:26,970
>> And so, I've actually,

00:14:26,970 --> 00:14:28,660
you can have sort of a rough notion

00:14:28,660 --> 00:14:30,305
of this is what sharding means.

00:14:30,305 --> 00:14:32,770
Know at right one regular expression and take

00:14:32,770 --> 00:14:34,170
advantage of this and start cloud

00:14:34,170 --> 00:14:35,970
native pattern in your existing code,

00:14:35,970 --> 00:14:36,990
in your existing server.

00:14:36,990 --> 00:14:38,380
And so I think, that kind of shows

00:14:38,380 --> 00:14:39,960
via this annotation that feels natural.

00:14:39,960 --> 00:14:40,195
>> Yes.

00:14:40,195 --> 00:14:41,480
>> Just like you are a Java programmer

00:14:41,480 --> 00:14:42,650
feels like your dot net program.

00:14:42,650 --> 00:14:42,930
>> Right.

00:14:42,930 --> 00:14:44,640
>> Whatever else. So hopefully,

00:14:44,640 --> 00:14:46,200
that gives you a picture for sort

00:14:46,200 --> 00:14:48,645
of where we're trying to go with Metaparticle.

00:14:48,645 --> 00:14:52,310
There's a site that describes this has tutorials,

00:14:52,310 --> 00:14:53,510
a bunch of tutorials for

00:14:53,510 --> 00:14:55,950
all the different languages we support.

00:14:55,950 --> 00:14:59,200
And definitely encourage you to go check it out.

00:14:59,200 --> 00:15:00,770
And also it's up on GitHub,

00:15:00,770 --> 00:15:01,940
and we really trying to build

00:15:01,940 --> 00:15:03,250
a community around it because as I said,

00:15:03,250 --> 00:15:05,760
it's an experiment, research Project.

00:15:05,760 --> 00:15:08,305
But I think it's an important part of

00:15:08,305 --> 00:15:10,650
building a cloud native set of development.

00:15:10,650 --> 00:15:11,750
>> Perfect. So you're accepting

00:15:11,750 --> 00:15:13,570
pull requests for other languages and things like that.

00:15:13,570 --> 00:15:15,950
>> Absolutely. In fact actually, both the Python

00:15:15,950 --> 00:15:17,330
and Golang came from

00:15:17,330 --> 00:15:18,580
community members. That's been really good.

00:15:18,580 --> 00:15:20,000
>> Fantastic. That's fantastic.

00:15:20,000 --> 00:15:21,080
So we are learning all about

00:15:21,080 --> 00:15:23,880

YouTube URL: https://www.youtube.com/watch?v=2B3LzUV9YlI


