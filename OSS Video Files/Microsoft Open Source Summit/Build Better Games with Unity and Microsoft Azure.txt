Title: Build Better Games with Unity and Microsoft Azure
Publication date: 2017-11-08
Playlist: Microsoft Open Source Summit
Description: 
	David Antognoli shows you how to take your Unity games to the next level with powerful cloud services. He'll walk through how to connect your apps to Microsoft Azure, adding compelling features that users love, like leaderboards and heatmaps, and demo how new Unity and Visual Studio 2017 features improve your development process and your users' experience.
 
In the session, you'll: 
• Create and configure a new Unity project and integrate with Azure Easy tables – from scratch 
• Reference external packages from NuGet in Unity projects 
• Update the Unity Mono security certificate store 
• Add leaderboards and use the Azure Mobile Client SDK to save data telemetry  
• Analyze heatmap telemetry to improve your game design 
• Ask questions and receive guidance from our team of experts

For a complimentary Azure workshop, signup at: https://aka.ms/workshopazureyt  

Presentation: https://www.slideshare.net/Xamarin/build-better-games-with-unity-and-microsoft-azure
Captions: 
	00:00:03,190 --> 00:00:05,370
Hey, everybody, welcome.

00:00:05,371 --> 00:00:08,590
Let's go ahead and get started with today's presentation,

00:00:08,591 --> 00:00:11,940
Building Better Games with Unity and Microsoft Azure.

00:00:15,980 --> 00:00:18,752
First, let me introduce myself a little.

00:00:18,753 --> 00:00:21,690
My name's David Antognoli, and I'm a game developer.

00:00:23,960 --> 00:00:27,970
I got started in the game industry as a designer working

00:00:27,971 --> 00:00:29,515
on console games.

00:00:29,516 --> 00:00:33,430
I worked on the blood pumping action title Dora

00:00:33,431 --> 00:00:36,900
the Explorer as soon as I finished college.

00:00:36,901 --> 00:00:41,230
And I did a couple other Wii first-person shooter games.

00:00:41,231 --> 00:00:42,270
But eventually,

00:00:42,271 --> 00:00:46,980
I decided I would enjoy making some of my own games.

00:00:46,981 --> 00:00:50,730
So now I've moved to independent game development and teaching

00:00:50,731 --> 00:00:54,570
others how to create great games at Columbia College Chicago.

00:00:57,546 --> 00:01:01,400
So we have a demo packed session today.

00:01:01,401 --> 00:01:06,060
And what we're gonna do is create a PC racing game in Unity

00:01:06,061 --> 00:01:10,100
that uses an Azure backend for leaderboard and telemetry data.

00:01:11,550 --> 00:01:14,960
First, I'm going to briefly discuss some ways to

00:01:14,961 --> 00:01:18,360
use Microsoft Azure to add motivating content for your

00:01:18,361 --> 00:01:21,580
players as well as to inform your game design decisions.

00:01:22,630 --> 00:01:25,880
And next, I'll step you through a demo of how to set up

00:01:25,881 --> 00:01:30,140
the Easy Tables backend in the Azure web portal.

00:01:30,141 --> 00:01:31,420
And after that,

00:01:31,421 --> 00:01:35,520
I'll step you through using the Azure Mobile Client SDK to

00:01:35,521 --> 00:01:38,860
connect a Unity game to the new backend that we just created.

00:01:40,140 --> 00:01:44,330
So the first part of that will be a lot of setup, cuz there's

00:01:44,331 --> 00:01:47,450
a number of prerequisites we need to get this working.

00:01:47,451 --> 00:01:48,300
But then after that,

00:01:48,301 --> 00:01:51,190
I'll show you how easy it is to actually use the Azure SDK

00:01:51,191 --> 00:01:54,530
to add some really cool online features to your game.

00:01:55,870 --> 00:01:58,161
So at any time throughout the presentation,

00:01:58,162 --> 00:02:01,113
if you have questions, be sure to enter them in the chat and

00:02:01,114 --> 00:02:02,515
we'll get to them as we go.

00:02:02,516 --> 00:02:05,360
Don't worry, the webinar is recorded.

00:02:05,361 --> 00:02:07,720
So if you miss something, you can always come back and

00:02:07,721 --> 00:02:08,370
review it later.

00:02:11,670 --> 00:02:14,730
Let's get started discussing how to improve your games

00:02:14,731 --> 00:02:15,300
with Azure.

00:02:17,960 --> 00:02:21,650
So I'm gonna start the presentation with a anecdote

00:02:21,651 --> 00:02:24,480
from my personal gaming history here.

00:02:24,481 --> 00:02:29,320
This is a screenshot from Elder Scrolls III, Morrowind.

00:02:29,321 --> 00:02:32,580
This was a single player game from the early 2000s.

00:02:32,581 --> 00:02:37,470
And it had a huge open world with tons of content, and

00:02:37,471 --> 00:02:38,640
it was a really fun game.

00:02:38,641 --> 00:02:40,760
I put a lot of hours into it, but

00:02:40,761 --> 00:02:43,240
I never wound up finishing it.

00:02:43,241 --> 00:02:46,290
And as I started sort of grinding away on some of these

00:02:46,291 --> 00:02:49,870
quests, it hit me at some point.

00:02:49,871 --> 00:02:52,450
I'm like, why am I still playing this?

00:02:52,451 --> 00:02:54,300
What is the point of all this?

00:02:54,301 --> 00:02:57,280
These quests are difficult and grindy.

00:02:57,281 --> 00:03:02,110
And at the end of the day, who's gonna care that I did this?

00:03:04,310 --> 00:03:08,660
So at a certain point, players are gonna finish your game's

00:03:08,661 --> 00:03:11,230
content or get bored with your game's content,

00:03:11,231 --> 00:03:12,950
even if it's really good.

00:03:12,951 --> 00:03:16,978
So that raises the question, how do we keep players interested

00:03:16,979 --> 00:03:18,730
in your end-game content?

00:03:20,610 --> 00:03:24,170
Now, here's an online game from a similar era.

00:03:24,171 --> 00:03:25,770
A little bit earlier, actually.

00:03:25,771 --> 00:03:27,620
This is Diablo II.

00:03:27,621 --> 00:03:30,426
This is what you would see if you logged in to Battle.net.

00:03:30,427 --> 00:03:35,045
Now, Diablo II, I would say, it has less content.

00:03:35,046 --> 00:03:40,110
And I would certainly say, it's less immersive.

00:03:40,111 --> 00:03:41,800
It has simpler graphics.

00:03:43,290 --> 00:03:46,050
You play the game from a more zoomed out perspective.

00:03:47,270 --> 00:03:48,685
But despite all that,

00:03:48,686 --> 00:03:52,410
I actually played through all of the content in this game and

00:03:52,411 --> 00:03:55,631
then I kept grinding away at the end-game content.

00:03:55,632 --> 00:03:57,856
And so I guess the question is,

00:03:57,857 --> 00:04:02,400
how come I'm willing to do that in Diablo and not in Morrowind?

00:04:02,401 --> 00:04:07,490
And I think the answer has to do with this small little

00:04:07,491 --> 00:04:11,520
band of characters along the bottom of this screen.

00:04:11,521 --> 00:04:16,030
Cuz when you logged into Diablo II online, you would see

00:04:16,031 --> 00:04:18,870
all of the other characters that are also playing, even though

00:04:18,871 --> 00:04:22,420
you're not actually in the game with them necessarily.

00:04:22,421 --> 00:04:24,230
You just know that they're there.

00:04:24,231 --> 00:04:28,870
And you can see the sort of gear and weapons that they've

00:04:28,871 --> 00:04:33,650
earned by completing the various content in the game.

00:04:33,651 --> 00:04:37,300
And just that fact that I knew other people could see what I

00:04:37,301 --> 00:04:40,240
was doing and see what I accomplished in the game

00:04:40,241 --> 00:04:43,510
provided a big element of motivations for me.

00:04:44,950 --> 00:04:49,710
So with that said, how can we use

00:04:49,711 --> 00:04:54,610
Azure to sort of add that kind of motivation to our games?

00:04:54,611 --> 00:04:58,550
So there's many ways we can use the Azure to improve our games,

00:04:58,551 --> 00:05:01,510
or even make games that wouldn't even be possible without cloud

00:05:01,511 --> 00:05:04,170
services, like what Azure offers.

00:05:04,171 --> 00:05:08,196
But I'm gonna focus today on two basic simple ways to use Azure

00:05:08,197 --> 00:05:10,442
to enhance your games right away,

00:05:10,443 --> 00:05:13,560
even if they might are mainly be single player.

00:05:13,561 --> 00:05:19,110
So the first is leaderboards and the second is telemetry.

00:05:20,820 --> 00:05:23,010
So if you're a gamer,

00:05:23,011 --> 00:05:25,410
you've probably come across leaderboards.

00:05:25,411 --> 00:05:28,800
They're one of the oldest social features used in games.

00:05:28,801 --> 00:05:32,170
This is a leaderboard from the arcade Pacman.

00:05:33,320 --> 00:05:35,890
So you can see that this has been around for a long time.

00:05:38,230 --> 00:05:39,213
And today,

00:05:39,214 --> 00:05:43,642
leaderboards are still used in a wide range of games.

00:05:43,643 --> 00:05:45,746
On the left, we have Angry Birds,

00:05:45,747 --> 00:05:48,580
which is like more of a casual game.

00:05:48,581 --> 00:05:51,280
And on the right, we have PlayerUnknown's Battlegrounds,

00:05:51,281 --> 00:05:52,950
which is one of the more recent

00:05:54,780 --> 00:05:58,960
competitive online multiplayer shooter games on the PC.

00:05:58,961 --> 00:06:02,660
So that pretty much is a huge spectrum, but both games

00:06:02,661 --> 00:06:08,690
are using this old form of motivation in the leaderboard.

00:06:10,590 --> 00:06:14,490
So even though leaderboards might seem rudimentary

00:06:14,491 --> 00:06:17,060
by sharing players's achievements,

00:06:17,061 --> 00:06:19,720
they do add a potent layer of motivation to your game.

00:06:21,190 --> 00:06:24,550
Leaderboards can expand the boundaries of your game beyond

00:06:24,551 --> 00:06:26,250
the player's living rooms and

00:06:26,251 --> 00:06:28,310
add meaning to their accomplishments.

00:06:28,311 --> 00:06:32,550
So, like I mentioned with Diablo, the fact that I knew

00:06:32,551 --> 00:06:35,280
other people were playing this besides me and other people

00:06:35,281 --> 00:06:38,700
could see what I was doing added a lot of meaning for me.

00:06:38,701 --> 00:06:42,180
And drove me to keep playing and trying to accomplish more.

00:06:43,470 --> 00:06:46,170
And players on top of the leaderboard

00:06:46,171 --> 00:06:48,500
can become important figures in your game's community,

00:06:48,501 --> 00:06:54,240
especially today with the wide range of social websites and

00:06:54,241 --> 00:06:56,660
features that gamers are used to.

00:06:57,950 --> 00:07:02,940
So as you'll see shortly, we are going to use Easy Tables in

00:07:02,941 --> 00:07:06,828
Azure to make it easy to build a backend for a leaderboard.

00:07:06,829 --> 00:07:10,853
Now the second way to build better games with Azure that I'm

00:07:10,854 --> 00:07:14,650
gonna be going over today is recording telemetry data.

00:07:15,880 --> 00:07:18,940
Telemetry data is collected remotely.

00:07:19,950 --> 00:07:21,480
And so in games,

00:07:21,481 --> 00:07:24,990
it improves our understanding of how players use our games.

00:07:26,720 --> 00:07:29,230
We can use telemetry to keep tabs

00:07:29,231 --> 00:07:32,670
on how our game's performing for actual users.

00:07:32,671 --> 00:07:37,180
And we can also see what our users are actually doing

00:07:37,181 --> 00:07:37,720
in our game.

00:07:39,710 --> 00:07:40,530
So with telemetry,

00:07:40,531 --> 00:07:45,500
we can answer some key questions about our player's experience.

00:07:45,501 --> 00:07:48,510
Things like, how long is the average player session?

00:07:49,580 --> 00:07:53,020
Where do players consistently have problems in our levels?

00:07:53,021 --> 00:07:54,022
And when do players quit?

00:07:54,023 --> 00:07:56,831
And how did a design change affect

00:07:56,832 --> 00:08:01,540
how players are actually behaving in our game?

00:08:01,541 --> 00:08:05,030
So these are all things we can answer by tracking what players

00:08:05,031 --> 00:08:08,665
are doing and tracking how our game's reacting with telemetry.

00:08:10,585 --> 00:08:13,865
So as you can see in this screenshot from Heroes of

00:08:13,866 --> 00:08:17,705
the Storm, you can even ask players directly about their

00:08:17,706 --> 00:08:19,072
match experience.

00:08:19,073 --> 00:08:22,720
And you can ask them quite directly how they feel about

00:08:22,721 --> 00:08:24,341
content in your game and

00:08:24,342 --> 00:08:27,277
then record their feedback as telemetry.

00:08:29,606 --> 00:08:31,604
Telemetry is also invaluable for

00:08:31,605 --> 00:08:34,680
informing what areas we should invest in our game.

00:08:35,930 --> 00:08:38,370
We can use it to reveal what content and

00:08:38,371 --> 00:08:43,500
features in our game players are using the most, and

00:08:43,501 --> 00:08:50,159
we can also see what players aren't really interested in.

00:08:50,160 --> 00:08:54,431
And you can also use telemetry to give you empirical

00:08:54,432 --> 00:08:58,700
evidence about your design decisions.

00:08:58,701 --> 00:09:01,520
So this is helpful for distinguishing the opinion of

00:09:01,521 --> 00:09:06,950
a single designer, or a single player, as opposed to the actual

00:09:06,951 --> 00:09:10,610
statistics recorded from all of the players playing the game.

00:09:11,670 --> 00:09:15,329
And so you can see in this screenshot developers can

00:09:15,330 --> 00:09:19,928
actually track which characters or which abilities are leading

00:09:19,929 --> 00:09:25,060
to players winning the most, or which are not that successful.

00:09:25,061 --> 00:09:28,410
And as something stands out as exceptionally high or

00:09:28,411 --> 00:09:32,660
too low, developers can actually react to that and make changes

00:09:32,661 --> 00:09:35,680
to the balance of the game and try to even things back out.

00:09:38,564 --> 00:09:39,142
All right, so

00:09:39,143 --> 00:09:41,370
let me show you what we're actually gonna make today.

00:09:44,399 --> 00:09:47,762
So what we have here is a simple racing game that I've put

00:09:47,763 --> 00:09:50,160
together with Unity Standard Assets.

00:09:50,161 --> 00:09:54,140
We've got the vehicle's package and the prototyping package.

00:09:55,160 --> 00:09:59,250
And whenever the player wrecks into a wall the game is gonna

00:09:59,251 --> 00:10:03,895
save that location in 3D space and upload it to our Azure

00:10:03,896 --> 00:10:07,970
backend that we're gonna make in the demo as telemetry data.

00:10:07,971 --> 00:10:10,992
And then we can use that data to put together a heat map,

00:10:10,993 --> 00:10:13,029
which I'll show you in a little bit,

00:10:13,030 --> 00:10:15,159
about where the player's crashing.

00:10:15,160 --> 00:10:19,296
And we can use that to figure out how to adjust our

00:10:19,297 --> 00:10:21,690
racecourse level design.

00:10:21,691 --> 00:10:25,346
And if the player, when they finish a lap, if they happen to

00:10:25,347 --> 00:10:29,096
get a high score, the game will ask them to enter their name.

00:10:29,097 --> 00:10:34,198
And it will save their name and their time and send that to

00:10:34,199 --> 00:10:39,650
Azure for the leaderboard that we're gonna put together.

00:10:39,651 --> 00:10:43,930
So here's the leaderboard, you can see it's just simply showing

00:10:43,931 --> 00:10:46,730
the player names and the player times.

00:10:46,731 --> 00:10:50,160
And I think this is really all the information that we need

00:10:50,161 --> 00:10:53,800
in order to add an extra layer of motivation for the player.

00:10:53,801 --> 00:10:56,040
But at the end of the presentation I'll give you a few

00:10:56,041 --> 00:10:57,950
ideas about how to extend this.

00:11:01,118 --> 00:11:03,153
And here you can see the heat map,

00:11:03,154 --> 00:11:05,913
which is going to draw a red sphere anywhere on

00:11:05,914 --> 00:11:09,640
the track that a player has crashed into the wall.

00:11:09,641 --> 00:11:12,430
And this is gonna allow us to sort of analyze

00:11:12,431 --> 00:11:16,080
where the difficult sections of our track are and

00:11:16,081 --> 00:11:18,250
where maybe the easier sections are.

00:11:18,251 --> 00:11:20,483
And if I look at the top left corner here,

00:11:20,484 --> 00:11:23,589
I can see that this second turn is a little challenging.

00:11:23,590 --> 00:11:24,813
There's a lot of times where

00:11:24,814 --> 00:11:26,500
players have wrecked into this thing.

00:11:27,920 --> 00:11:30,520
And so if this was intended to be an easier track,

00:11:30,521 --> 00:11:34,330
I may wanna consider extending the width

00:11:34,331 --> 00:11:37,670
of that section of track to make that curve a little easier.

00:11:38,910 --> 00:11:43,446
On the other hand, if you take a look at the right-hand section

00:11:43,447 --> 00:11:46,282
of the track, it's quite a bit wider.

00:11:46,283 --> 00:11:49,671
And even though there's a bunch of little obstacles in the way,

00:11:49,672 --> 00:11:52,449
players don't seem to really be bumping into them.

00:11:52,450 --> 00:11:55,205
So if I wanted this to be more difficult,

00:11:55,206 --> 00:11:58,854
I should maybe consider adding even more obstacles,

00:11:58,855 --> 00:12:01,865
or perhaps adding some extra curves there.

00:12:01,866 --> 00:12:05,579
Or come up with some other game mechanic to make this section

00:12:05,580 --> 00:12:08,350
a little bit more dynamic and interesting.

00:12:08,351 --> 00:12:11,400
All right, now that you've seen what we're gonna make, let's get

00:12:11,401 --> 00:12:15,550
started with the first demo section of the presentation.

00:12:15,551 --> 00:12:18,350
In this first demo, I'm gonna walk you through how to set up

00:12:18,351 --> 00:12:21,980
an Azure mobile app backend with Easy Tables

00:12:21,981 --> 00:12:26,570
using the Azure portal, it'll take about 15 minutes.

00:12:26,571 --> 00:12:27,680
And later in the session,

00:12:27,681 --> 00:12:30,330
we'll actually connect to this backend community and

00:12:30,331 --> 00:12:33,510
then use it to store our telemetry and leaderboard data.

00:12:34,830 --> 00:12:38,630
So there are some requirements to follow this demo and,

00:12:38,631 --> 00:12:39,210
first of all,

00:12:39,211 --> 00:12:42,650
the first thing you're gonna need is an Azure subscription.

00:12:42,651 --> 00:12:46,572
There is a free Azure trial you can use, and

00:12:46,573 --> 00:12:49,690
that will work just fine for the demonstration.

00:12:49,691 --> 00:12:53,206
Or alternatively, another thing you might wanna look into

00:12:53,207 --> 00:12:56,723
are the Visual Studio Dev Essentials, which also gives you

00:12:56,724 --> 00:12:59,899
some free Azure credits every month that you can use.

00:12:59,900 --> 00:13:04,040
And then those will work fine for the demo today as well.

00:13:04,041 --> 00:13:08,423
All right, so to get started, we're gonna need to log

00:13:08,424 --> 00:13:13,302
into the Azure portal, which is just portal.azure.com.

00:13:13,303 --> 00:13:16,570
And once you get logged in this is what it will look like.

00:13:16,571 --> 00:13:19,140
Now if you wanna learn all about Azure and everything you can

00:13:19,141 --> 00:13:22,020
do from the portal, we have separate resources that I can

00:13:22,021 --> 00:13:24,560
refer you to at the end of the presentation.

00:13:24,561 --> 00:13:27,590
But for today, I'm just gonna be discussing the features we

00:13:27,591 --> 00:13:29,130
actually need to use.

00:13:29,131 --> 00:13:32,190
So this is gonna be from the perspective of a Unity developer

00:13:32,191 --> 00:13:35,430
that wants to get their game connected to a cloud database as

00:13:35,431 --> 00:13:37,940
quickly and simply as possible.

00:13:37,941 --> 00:13:39,640
So once you're logged into the portal,

00:13:39,641 --> 00:13:43,530
you'll see the dashboard, and we wanna do first is look for

00:13:43,531 --> 00:13:46,210
the New resource button up here.

00:13:46,211 --> 00:13:48,657
So let's go ahead and click that.

00:13:48,658 --> 00:13:51,860
And the thing we're gonna actually create is called

00:13:51,861 --> 00:13:52,950
a mobile app.

00:13:52,951 --> 00:13:56,900
So it's under this Web + Mobile section.

00:13:56,901 --> 00:14:00,100
And here we see the Mobile App, so go ahead and click that.

00:14:01,340 --> 00:14:06,160
And we need to give a name to our new mobile app, so I'm gonna

00:14:06,161 --> 00:14:13,520
call it super-race because we're making this super racing game.

00:14:13,521 --> 00:14:15,023
And I'm going to go ahead and

00:14:15,024 --> 00:14:18,166
let Azure create a new resource group called super-race.

00:14:18,167 --> 00:14:23,033
And that'll just help me keep all of my Azure resources linked

00:14:23,034 --> 00:14:26,040
together so I can easily manage them.

00:14:27,500 --> 00:14:31,980
And Azure's gonna create a new app service plan for me, and

00:14:31,981 --> 00:14:37,300
you can see it's gonna be in the South Central US location.

00:14:37,301 --> 00:14:39,463
If you wanted, you could not use the default one and

00:14:39,464 --> 00:14:41,876
create your own, and customize it however you want, and

00:14:41,877 --> 00:14:43,048
pick where it's gonna be.

00:14:43,049 --> 00:14:44,033
But for the demo,

00:14:44,034 --> 00:14:46,860
I'm just gonna be using the default selections for

00:14:46,861 --> 00:14:50,940
this stuff so we can get up and running as quickly as possible.

00:14:50,941 --> 00:14:54,280
So I'll just go ahead and stick with the new one that Azure

00:14:54,281 --> 00:14:56,650
wants to create for me by default.

00:14:56,651 --> 00:14:59,418
And I will click Create.

00:14:59,419 --> 00:15:02,528
And at this point, Azure's gonna go ahead and

00:15:02,529 --> 00:15:06,275
start spinning up this new resource for me.

00:15:06,276 --> 00:15:07,602
So that'll take just a moment.

00:15:07,603 --> 00:15:08,862
And while we're waiting for

00:15:08,863 --> 00:15:11,486
it to finish, we should talk a little bit about the fact that

00:15:11,487 --> 00:15:13,505
this thing is called a mobile app.

00:15:13,506 --> 00:15:17,284
That doesn't mean that we're gonna actually have an iOS or

00:15:17,285 --> 00:15:20,988
an Android build that while we're finished making this on

00:15:20,989 --> 00:15:22,208
the Azure portal.

00:15:22,209 --> 00:15:26,258
It just means we're creating a backend that we can use to

00:15:26,259 --> 00:15:28,431
connect to from another app.

00:15:28,432 --> 00:15:32,268
So the app that you connect to this from could be a mobile app,

00:15:32,269 --> 00:15:36,119
but in our case we're actually gonna make a PC game in Unity.

00:15:36,120 --> 00:15:39,655
And that's what we're gonna use to connect to this mobile app

00:15:39,656 --> 00:15:40,300
backend.

00:15:40,301 --> 00:15:42,654
So even though it's called a mobile app,

00:15:42,655 --> 00:15:44,545
it doesn't have to a mobile app.

00:15:44,546 --> 00:15:47,870
It could be, in our case it's not going to be.

00:15:48,930 --> 00:15:51,676
And I can see now this is actually finished.

00:15:51,677 --> 00:15:56,783
So I can click Go to resource or I could click on All resources

00:15:56,784 --> 00:16:01,188
here and just find my super-race mobile app here.

00:16:01,189 --> 00:16:02,420
And I'll click on that.

00:16:03,700 --> 00:16:09,994
And the next step here will be to scroll through this left-hand

00:16:09,995 --> 00:16:16,110
side menu until we see the section for Easy Tables.

00:16:16,111 --> 00:16:18,937
So go ahead and click the Easy Tables.

00:16:18,938 --> 00:16:22,631
And once this new blade, these are called blades that

00:16:22,632 --> 00:16:26,652
open up in the Azure portal, when it's open we can see this

00:16:26,653 --> 00:16:29,854
little notification along the top that says we

00:16:29,855 --> 00:16:33,817
need to configure Easy Tables, Click here to continue.

00:16:33,818 --> 00:16:34,974
So let's go ahead and

00:16:34,975 --> 00:16:38,318
just follow along Click that, and it's explaining to us that

00:16:38,319 --> 00:16:40,585
there's essentially two steps to this.

00:16:40,586 --> 00:16:43,500
So first is we need to connect a database.

00:16:43,501 --> 00:16:46,660
And it says, you need a database to use Easy Tables.

00:16:46,661 --> 00:16:47,890
Click here to create one.

00:16:47,891 --> 00:16:48,884
So let's go ahead and do that.

00:16:52,056 --> 00:16:54,419
And in the Data Connections blade,

00:16:54,420 --> 00:16:56,400
let's click the Add button.

00:16:58,800 --> 00:17:01,650
And we'll leave this as an SQL Database.

00:17:01,651 --> 00:17:04,740
We need to configure the new database, so go ahead and

00:17:04,741 --> 00:17:05,250
click here.

00:17:06,870 --> 00:17:10,940
And since we don't already have one, we're gonna go ahead and

00:17:10,941 --> 00:17:12,690
create a new database.

00:17:12,691 --> 00:17:18,590
And we need to give it a name, so we'll call it super-race-db.

00:17:18,591 --> 00:17:22,990
And we actually need a new server to host this database.

00:17:22,991 --> 00:17:25,730
So I'll click there and give the server a name, and

00:17:25,731 --> 00:17:29,180
we'll just call it super-race-server.

00:17:29,181 --> 00:17:32,345
And I need a new username and password, so

00:17:32,346 --> 00:17:35,428
I'll just come up with that real quick.

00:17:39,070 --> 00:17:42,585
And finally, I can choose the location.

00:17:42,586 --> 00:17:47,812
And I know that my mobile app was actually hosted

00:17:47,813 --> 00:17:52,261
on the South Central US Azure location.

00:17:52,262 --> 00:17:55,985
So I'm gonna go ahead and choose South Central US for

00:17:55,986 --> 00:18:00,133
this as well because we wanna keep these resources in close

00:18:00,134 --> 00:18:04,145
proximity just to speed things up a little bit.

00:18:04,146 --> 00:18:11,680
So I'll go ahead and hit Select, and I'll choose Select again.

00:18:13,760 --> 00:18:17,870
And finally, I need to go ahead and verify a name for

00:18:17,871 --> 00:18:19,970
this connection string.

00:18:19,971 --> 00:18:22,780
The default name works just fine, but you do have to

00:18:22,781 --> 00:18:27,430
click it and verify it, so I'm gonna just choose OK.

00:18:27,431 --> 00:18:28,950
And then I'll choose OK again.

00:18:30,010 --> 00:18:33,320
And you'll see in the notifications area again

00:18:33,321 --> 00:18:37,200
that the Azure is creating this new database and

00:18:37,201 --> 00:18:39,690
new database server for us.

00:18:39,691 --> 00:18:43,120
So this step will take a few moments again.

00:18:43,121 --> 00:18:46,870
And during this time, I'm gonna be proactive and go ahead and

00:18:46,871 --> 00:18:50,120
start working on creating my new Unity project

00:18:50,121 --> 00:18:53,900
that's ultimately gonna connect to this Azure backend.

00:18:53,901 --> 00:18:55,830
So I'm gonna give it a name.

00:18:55,831 --> 00:18:59,670
I'm gonna just call it Super Race as well.

00:18:59,671 --> 00:19:03,935
And it's gonna be a 3D project, and so we'll go ahead and

00:19:03,936 --> 00:19:04,989
create that.

00:19:14,588 --> 00:19:17,210
So here is my new Unity project.

00:19:18,790 --> 00:19:21,920
And I should mention that the steps we're going through today

00:19:21,921 --> 00:19:28,470
will only work on Unity 2017.1 and above.

00:19:28,471 --> 00:19:33,120
So you're gonna wanna check and see that you have

00:19:33,121 --> 00:19:35,630
the most current version of Unity available to you.

00:19:36,790 --> 00:19:40,880
And it needs to at least be above 2017.1 because this

00:19:40,881 --> 00:19:44,710
demonstration is gonna use some of the newer features that came

00:19:44,711 --> 00:19:51,950
out in Unity 2017, so you have to be on 2017.1.

00:19:51,951 --> 00:19:56,007
All right, so let's go ahead and flip back over to Azure and

00:19:56,008 --> 00:19:57,561
see how we're doing.

00:19:57,562 --> 00:20:06,670
And it looks like actually the new database is all set for us.

00:20:06,671 --> 00:20:08,180
So the next step,

00:20:08,181 --> 00:20:10,890
we have to go back to this Easy Tables section.

00:20:10,891 --> 00:20:15,690
But unfortunately, you do have to close it first and click back

00:20:15,691 --> 00:20:19,648
onto it in order to refresh it cuz that's the trick to getting

00:20:19,649 --> 00:20:24,620
that nice little tutorial notification to pop up for us.

00:20:24,621 --> 00:20:26,600
So I'm gonna go back to Easy Tables.

00:20:27,710 --> 00:20:30,260
And once the blade loads, there it is again,

00:20:30,261 --> 00:20:34,210
Need to configure Easy Tables, Click here to continue.

00:20:34,211 --> 00:20:38,310
And this time, I can see that we have step 1 as all set.

00:20:38,311 --> 00:20:42,050
And we are ready to do the super challenging step 2,

00:20:42,051 --> 00:20:46,750
which consists of checking this box and clicking this button.

00:20:46,751 --> 00:20:50,420
And so just like that, step 2 is done.

00:20:50,421 --> 00:20:55,405
But we do have to wait for Azure to finish initializing

00:20:55,406 --> 00:20:58,910
the backend, which shouldn't take very long at all.

00:20:58,911 --> 00:20:59,730
So while we're waiting for

00:20:59,731 --> 00:21:04,060
that, I'll talk a little about what an Easy Table actually is.

00:21:04,061 --> 00:21:07,280
And it's just going to be a really simple database for

00:21:07,281 --> 00:21:11,320
us to use that we don't have to write any code to set up,

00:21:11,321 --> 00:21:13,920
we don't even need to open Visual Studio.

00:21:13,921 --> 00:21:19,430
And also, you'll notice that we won't need to really

00:21:19,431 --> 00:21:24,340
even manage the schema very much because it's totally dynamic.

00:21:24,341 --> 00:21:28,159
And as we send data to it, the Easy Tables will adapt and

00:21:28,160 --> 00:21:30,328
add the columns as necessary.

00:21:30,329 --> 00:21:34,376
So I'll show you a little bit more about what I mean once

00:21:34,377 --> 00:21:35,962
we're all set here.

00:21:35,963 --> 00:21:39,560
And it looks like it just popped up and it's finished.

00:21:39,561 --> 00:21:47,290
So, there we go, our App Service backend is initialized, cool.

00:21:47,291 --> 00:21:48,598
Let's go ahead and close the notifications.

00:21:48,599 --> 00:21:53,548
And now I can actually click this Add button to add some

00:21:53,549 --> 00:21:55,030
Easy Tables.

00:21:55,031 --> 00:21:58,816
So let's do that, and I need to make two of them.

00:21:58,817 --> 00:22:02,247
The first one will be for the leaderboard and

00:22:02,248 --> 00:22:05,230
I'm gonna call that HighScoreInfo.

00:22:05,231 --> 00:22:08,470
And I'm gonna go ahead and allow anonymous access.

00:22:08,471 --> 00:22:10,995
But if you wanted to set up permissions,

00:22:10,996 --> 00:22:14,712
that's something you can do, or authentication.

00:22:14,713 --> 00:22:19,915
But for this sample, let's go ahead and leave it as anonymous.

00:22:19,916 --> 00:22:24,890
And so I'll click OK, and that's all set.

00:22:24,891 --> 00:22:28,152
So the next Easy Table I need to create is going to be for

00:22:28,153 --> 00:22:31,643
our telemetry, and that's gonna be called CrashInfo.

00:22:31,644 --> 00:22:35,225
And this is where we're gonna store the x, y, and

00:22:35,226 --> 00:22:38,850
z coordinates of where players crash.

00:22:38,851 --> 00:22:41,390
So I'll go ahead and hit OK there.

00:22:41,391 --> 00:22:43,770
And just to show you a little bit about what it looks like

00:22:43,771 --> 00:22:47,710
now, if I click on the HighScoreInfo table, you'll see

00:22:47,711 --> 00:22:50,300
that there's a variety of columns that are set up for

00:22:50,301 --> 00:22:54,160
us by default, including ID and DELETED.

00:22:54,161 --> 00:22:55,710
And these things are useful to have, so

00:22:55,711 --> 00:22:57,240
I'm not gonna get rid of them.

00:22:57,241 --> 00:22:59,630
If I wanted, I could click here and

00:22:59,631 --> 00:23:02,180
actually add columns through the Azure portal.

00:23:02,181 --> 00:23:05,840
But, like I said, we can actually add

00:23:05,841 --> 00:23:10,330
columns as necessary once we start sending data to the table.

00:23:10,331 --> 00:23:12,320
That can just happen automatically for us.

00:23:12,321 --> 00:23:15,320
So basically, we're done in the Azure portal now.

00:23:17,380 --> 00:23:20,650
So let's recap a little bit.

00:23:20,651 --> 00:23:24,397
We created a new mobile app, we configured a new

00:23:24,398 --> 00:23:28,908
data connection, and then we added two new Easy Tables.

00:23:28,909 --> 00:23:34,000
We added the HighScoreInfo and the CrashInfo tables.

00:23:34,001 --> 00:23:36,980
And it is important that we name them just like that.

00:23:36,981 --> 00:23:38,600
And I'll explain a little bit more

00:23:38,601 --> 00:23:39,880
about that when we get to it.

00:23:39,881 --> 00:23:42,700
But for now, just trust me and name them the same way I did.

00:23:43,780 --> 00:23:46,670
All right, so now we're ready for

00:23:46,671 --> 00:23:48,940
the second demo portion of the presentation.

00:23:50,210 --> 00:23:53,000
Here we're gonna set up a new Unity project

00:23:53,001 --> 00:23:57,460
to take advantage of the Azure Mobile Client SDK, which is what

00:23:57,461 --> 00:23:59,913
we're gonna use to connect to our Easy Table backend.

00:24:01,180 --> 00:24:03,700
I think these steps will probably take about ten minutes

00:24:03,701 --> 00:24:04,820
to get through.

00:24:04,821 --> 00:24:09,210
So with that said, let's go ahead and get started.

00:24:09,211 --> 00:24:13,769
So I got a headstart creating my Unity project, but

00:24:13,770 --> 00:24:16,320
it is just an empty project.

00:24:16,321 --> 00:24:17,560
You saw everything I did.

00:24:18,610 --> 00:24:23,005
The first thing I'm gonna have to do is add some assembly

00:24:23,006 --> 00:24:27,494
references to some packages that I'm gonna need to use in

00:24:27,495 --> 00:24:31,435
order to get the Azure Mobile Client SDK working.

00:24:31,436 --> 00:24:36,680
The first one is System.Net.Http.

00:24:36,681 --> 00:24:43,785
And Unity actually includes this DLL when you install it,

00:24:43,786 --> 00:24:50,606
but we have to add a assembly reference to get it to work.

00:24:50,607 --> 00:24:56,668
So I'm gonna right-click in the Project area here, and choose

00:24:56,669 --> 00:25:02,630
Show in Explorer just to get a quick File Explorer window open.

00:25:03,920 --> 00:25:06,940
And I'm gonna enter into the Assets directory here.

00:25:07,990 --> 00:25:11,210
And I'm gonna right-click and hit New,

00:25:11,211 --> 00:25:15,220
and I'm gonna choose New > Text Document.

00:25:15,221 --> 00:25:17,420
And I need to name this document really specifically.

00:25:17,421 --> 00:25:20,107
It has to be called mcs.rsp.

00:25:20,108 --> 00:25:24,337
And then I'll delete the old file extension there and

00:25:24,338 --> 00:25:25,280
hit Enter.

00:25:26,280 --> 00:25:28,060
And it's gonna warn us,

00:25:28,061 --> 00:25:30,200
are you okay with changing the file name extension?

00:25:30,201 --> 00:25:32,788
Yes, yes I am.

00:25:32,789 --> 00:25:36,370
And I'll right-click on this guy and then I'm gonna choose Open

00:25:36,371 --> 00:25:41,740
with, and you just wanna choose whatever text editor you like.

00:25:41,741 --> 00:25:46,782
Notepad works just fine, so I'm gonna go with that, okay?

00:25:46,783 --> 00:25:52,408
And so inside of this mcs.rsp file,

00:25:52,409 --> 00:25:57,125
I need to add a single line, and

00:25:57,126 --> 00:26:04,752
that is gonna be -r:System.Net.Http.dll.

00:26:04,753 --> 00:26:06,812
And then I need to make sure I've saved it.

00:26:08,857 --> 00:26:10,768
So as I was researching this project,

00:26:10,769 --> 00:26:13,108
this is actually something that was new to me.

00:26:13,109 --> 00:26:18,425
I hadn't seen these .rsp files, they're Unity response files.

00:26:18,426 --> 00:26:22,205
And you can add them, as long as you name it just right and

00:26:22,206 --> 00:26:25,945
add it to your root Assets directory, you'll see now

00:26:25,946 --> 00:26:29,280
that I'm back in Unity, it updated, and there it is.

00:26:29,281 --> 00:26:33,350
We can actually add instructions to the compiler, like

00:26:34,510 --> 00:26:39,785
telling it to use the System.Net.Http.dll

00:26:39,786 --> 00:26:43,240
that's built into our Unity install.

00:26:43,241 --> 00:26:45,240
So that should take care of that.

00:26:46,330 --> 00:26:49,820
There are two more packages I wanna use, but

00:26:49,821 --> 00:26:52,085
these are not included in our Unity install, so

00:26:52,086 --> 00:26:55,790
we're actually gonna have to go to NuGet to find them.

00:26:55,791 --> 00:27:00,700
So let's go ahead and go to NuGet.org and

00:27:00,701 --> 00:27:05,470
let's search for the first one we need,

00:27:05,471 --> 00:27:08,994
which is Newtonsoft.Json.

00:27:10,808 --> 00:27:13,420
And it's this first search result here.

00:27:13,421 --> 00:27:15,645
So I'll go ahead and click that.

00:27:15,646 --> 00:27:17,900
Now normally, if you're working in Visual Studio,

00:27:17,901 --> 00:27:21,940
you would use the built-in NuGet Package Manager to set

00:27:21,941 --> 00:27:26,820
up your references for your NuGet packages.

00:27:26,821 --> 00:27:28,960
But unfortunately,

00:27:28,961 --> 00:27:33,010
the way Unity works is whenever you open your Unity project,

00:27:33,011 --> 00:27:37,520
it regenerates the Visual Studio projects, and so it'll wipe out

00:27:37,521 --> 00:27:40,310
anything you've set up in Visual Studio on your own.

00:27:40,311 --> 00:27:44,290
So instead, we're gonna have to navigate to the actual

00:27:44,291 --> 00:27:48,220
package on NuGet, and then click the Manual download button here.

00:27:49,950 --> 00:27:51,570
And I'm gonna choose Save.

00:27:52,880 --> 00:27:54,820
And once that's done downloading,

00:27:54,821 --> 00:27:56,380
I'll choose Open folder.

00:27:57,520 --> 00:28:02,170
And I need to change the file extension here

00:28:03,400 --> 00:28:07,230
from what it came in as to .zip.

00:28:07,231 --> 00:28:11,220
And that's gonna allow me to double-click on this and

00:28:11,221 --> 00:28:14,630
open it up just like any archive.

00:28:14,631 --> 00:28:18,900
And I'm gonna go into the lib directory here, and

00:28:18,901 --> 00:28:21,448
then the net45 directory.

00:28:21,449 --> 00:28:25,682
And I'm gonna find Newtonsoft.Json.dll.

00:28:25,683 --> 00:28:27,538
And I wanna go ahead and

00:28:27,539 --> 00:28:32,060
drag this into my Unity project's Assets directory.

00:28:32,061 --> 00:28:34,020
So just go ahead and drag it over.

00:28:35,200 --> 00:28:36,890
If I go back to Unity,

00:28:36,891 --> 00:28:41,200
it should pop up in the project window, all right?

00:28:41,201 --> 00:28:43,390
So there's one more package that we're gonna need.

00:28:44,390 --> 00:28:46,531
So go ahead and go back to NuGet.

00:28:46,532 --> 00:28:50,397
And this time, we're gonna search for

00:28:50,398 --> 00:28:54,790
Azure Mobile Client SDK, search for that.

00:28:54,791 --> 00:28:58,754
And if you scroll down just a little bit,

00:28:58,755 --> 00:29:04,125
you should see the Azure Mobile Client SDK right here.

00:29:04,126 --> 00:29:05,940
And so let's click on that guy.

00:29:07,530 --> 00:29:12,240
And again, we need to choose Manual download,

00:29:12,241 --> 00:29:14,133
and I'll save it.

00:29:14,134 --> 00:29:17,950
And when it's finished downloading, I'll open it up.

00:29:17,951 --> 00:29:23,770
I need to, again, rename this to be a .zip,

00:29:23,771 --> 00:29:26,340
and yeah, that's fine.

00:29:26,341 --> 00:29:31,715
I'm gonna open it up and go into the lib directory,

00:29:31,716 --> 00:29:35,215
go into the net45 directory and

00:29:35,216 --> 00:29:40,154
find the Microsoft.Azure.Mobile.Client-

00:29:40,155 --> 00:29:41,590
.dll file and

00:29:41,591 --> 00:29:47,590
copy that over to my Unity project's Assets directory.

00:29:47,591 --> 00:29:49,260
Here we go.

00:29:49,261 --> 00:29:52,790
So now I'm gonna head back to Unity, and

00:29:52,791 --> 00:29:54,610
I should see that pop up in here.

00:29:56,160 --> 00:30:00,100
And what I'm gonna do next is I need to go to the File >

00:30:00,101 --> 00:30:03,910
Build Settings on my Unity project.

00:30:05,170 --> 00:30:08,584
And that should bring up the Build Settings window here.

00:30:08,585 --> 00:30:11,090
And then I need to choose Player Settings.

00:30:11,091 --> 00:30:17,316
And this is where I can actually change the scripting runtime

00:30:17,317 --> 00:30:23,918
version here from the .NET 3.5 Equivalent to .NET 4.6.

00:30:23,919 --> 00:30:30,421
And this is what we need to do in order to get, System.Net.Http

00:30:30,422 --> 00:30:34,090
and these other packages to work for us in Unity.

00:30:34,091 --> 00:30:37,180
So it's gonna tell us that we need to restart Unity for

00:30:37,181 --> 00:30:38,430
this change to take effect.

00:30:38,431 --> 00:30:40,488
That's fine, let's go ahead and do that.

00:30:43,435 --> 00:30:45,701
So while we're waiting for Unity to come back,

00:30:45,702 --> 00:30:48,770
there's another requirement that we should probably look at.

00:30:49,910 --> 00:30:56,790
And that is that you're on Visual Studio 2017 15.3 or

00:30:56,791 --> 00:31:02,400
above and that you have the Unity workload.

00:31:02,401 --> 00:31:05,235
So if you look at the Workloads section here and

00:31:05,236 --> 00:31:09,018
scroll down to Mobile & Gaming, you just wanna make sure that

00:31:09,019 --> 00:31:12,233
you have Game development with Unity checked here.

00:31:12,234 --> 00:31:16,857
And it looks like Unity's back, and

00:31:16,858 --> 00:31:21,500
we should be on the .NET 4.6 now.

00:31:21,501 --> 00:31:27,487
And so what I'm gonna do next is just right-click and

00:31:27,488 --> 00:31:30,291
create a new C# script.

00:31:30,292 --> 00:31:33,452
I'm just gonna leave the default name because this is just gonna

00:31:33,453 --> 00:31:36,376
be a junk script that I use to just make sure everything is set

00:31:36,377 --> 00:31:36,920
up right.

00:31:36,921 --> 00:31:39,250
And when I'm done, I'm just gonna delete it.

00:31:39,251 --> 00:31:42,420
So I'm going to double-click it to open it.

00:31:42,421 --> 00:31:47,067
And as long as you have your preferences set so

00:31:47,068 --> 00:31:52,449
that the external tools, External Script Editor,

00:31:52,450 --> 00:31:59,689
is set to Visual Studio 2017, it should open up in Visual Studio.

00:32:07,296 --> 00:32:10,380
So here's our new script.

00:32:10,381 --> 00:32:13,390
And I just want to test a handful of using statements here

00:32:13,391 --> 00:32:16,463
to make sure everything is hooked up right before we go any

00:32:16,464 --> 00:32:17,051
further.

00:32:17,052 --> 00:32:22,060
So at the top here, I'm just going to type using.

00:32:22,061 --> 00:32:26,340
And the first one I'll look for is System.

00:32:26,341 --> 00:32:27,910
So I'm just gonna start typing and

00:32:27,911 --> 00:32:32,220
let IntelliSense do its thing because if IntelliSense is

00:32:32,221 --> 00:32:35,720
working, then I know that I've got everything set up right.

00:32:35,721 --> 00:32:40,673
So System, and I'm gonna look for .Net,

00:32:40,674 --> 00:32:44,947
and then I'm gonna look for .Http.

00:32:44,948 --> 00:32:47,741
And if it pops up in IntelliSense like this,

00:32:47,742 --> 00:32:50,510
we know that we're in good shape.

00:32:50,511 --> 00:32:51,810
So that one's working.

00:32:51,811 --> 00:32:55,077
The next one I wanna look for is going to be using, and

00:32:55,078 --> 00:32:58,740
then I'm gonna start typing Newtonsoft, so Newton,

00:32:58,741 --> 00:33:03,280
and then I see that that's up there, so I'll hit period.

00:33:03,281 --> 00:33:05,573
And then I wanna look for Newtonsoft.Json.

00:33:05,574 --> 00:33:09,829
And I see that's showing up in IntelliSense as well,

00:33:09,830 --> 00:33:12,011
so that's working for me.

00:33:12,012 --> 00:33:16,393
And then finally, we wanna look for

00:33:16,394 --> 00:33:21,654
using Microsoft, so that's popping up,

00:33:21,655 --> 00:33:26,350
.WindowsAzure.MobileServices.

00:33:26,351 --> 00:33:30,070
So if you can get those three using statements to

00:33:30,071 --> 00:33:32,540
complete in IntelliSense,

00:33:32,541 --> 00:33:37,360
then you know that you have this stuff set up correctly.

00:33:37,361 --> 00:33:40,170
All right, so that was the whole point of this script,

00:33:40,171 --> 00:33:41,400
just to test our setup.

00:33:41,401 --> 00:33:42,770
So I'm done with it now.

00:33:42,771 --> 00:33:44,150
I'm gonna go ahead and close it.

00:33:44,151 --> 00:33:46,030
I don't even need to save it.

00:33:46,031 --> 00:33:48,170
I'll go back to Unity.

00:33:48,171 --> 00:33:50,232
And I'm just gonna go ahead and

00:33:50,233 --> 00:33:53,649
delete it because it's not doing anything for me.

00:33:53,650 --> 00:34:01,200
All right, so I think that wraps up this stage of the demo.

00:34:01,201 --> 00:34:03,890
So let's just recap a little bit cuz there's

00:34:03,891 --> 00:34:05,410
a decent amount of stuff here.

00:34:07,220 --> 00:34:10,890
So we needed to make sure that we're on Unity 2017.1 and

00:34:10,891 --> 00:34:17,480
Visual Studio 2017 15.3 and above with the Unity workload.

00:34:17,481 --> 00:34:22,290
We had to make this response file called mcs.rsp in our

00:34:22,291 --> 00:34:24,850
Unity project's root Assets folder.

00:34:24,851 --> 00:34:28,850
So it has to be in the root Assets folder.

00:34:28,851 --> 00:34:32,352
And it needs to have a single line, and

00:34:32,353 --> 00:34:38,379
that is -r:System.Net.Http.dll just like I have it there.

00:34:38,380 --> 00:34:40,203
That's the only line that needs to be in there.

00:34:40,204 --> 00:34:42,963
And then you need to save and

00:34:42,964 --> 00:34:48,746
change your scripting runtime in Unity to .NET 4.6.

00:34:48,747 --> 00:34:53,540
We had to download a couple of packages from NuGet.

00:34:53,541 --> 00:34:57,801
And change their file extensions to ZIP files.

00:34:57,802 --> 00:35:03,073
And then copy the DLLs from the lib/net

00:35:03,074 --> 00:35:09,639
4.5 directory, to Unity's Assets folder.

00:35:09,640 --> 00:35:13,337
And then we just made a little test script to make sure our

00:35:13,338 --> 00:35:14,780
setup was working.

00:35:14,781 --> 00:35:16,392
Now if you tried this and

00:35:16,393 --> 00:35:20,748
the using statements didn't autocomplete in IntelliSense for

00:35:20,749 --> 00:35:24,697
you, I would just say that you should double check that you

00:35:24,698 --> 00:35:28,991
have the Unity workload in Visual Studio 2017 installed.

00:35:28,992 --> 00:35:32,868
And I would also try, make sure,

00:35:32,869 --> 00:35:37,717
when I switched to .NET 4.6 in Unity,

00:35:37,718 --> 00:35:41,470
it restarted my Unity program.

00:35:41,471 --> 00:35:44,250
But if you did that first or

00:35:44,251 --> 00:35:48,970
you added some of these packages since you've restarted,

00:35:48,971 --> 00:35:52,680
you need to restart Unity and then also restart Visual Studio.

00:35:52,681 --> 00:35:55,430
So that's a lot of times the issue that people have.

00:35:57,495 --> 00:36:02,266
Okay, so now we have one more prerequisite section of

00:36:02,267 --> 00:36:04,500
the demonstration.

00:36:04,501 --> 00:36:07,640
And this is where we need to update

00:36:07,641 --> 00:36:11,210
the Unity Mono security certificate store so

00:36:11,211 --> 00:36:16,160
that we can actually connect from Unity to our Azure backend.

00:36:17,190 --> 00:36:19,880
So by default, Unity

00:36:19,881 --> 00:36:24,110
comes with a version of Mono that doesn't trust any website.

00:36:24,111 --> 00:36:27,525
So its certificate store is totally empty.

00:36:27,526 --> 00:36:29,815
And in order to fix that,

00:36:29,816 --> 00:36:34,385
we're gonna use a command line tool called mozroots to update

00:36:34,386 --> 00:36:39,305
the security certificate store with the latest from Mozilla.

00:36:39,306 --> 00:36:44,486
So this is the command that we're gonna

00:36:44,487 --> 00:36:49,673
have to paste into the command prompt.

00:36:49,674 --> 00:36:53,836
So I'm gonna open my command prompt here.

00:36:53,837 --> 00:36:59,036
And this is a lengthy command, so we'll try and

00:36:59,037 --> 00:37:05,370
paste it in the chat so that you guys can copy and paste it.

00:37:05,371 --> 00:37:09,703
But if you do need to type it in, make sure you type it just

00:37:09,704 --> 00:37:13,779
right because it's important to get it just right.

00:37:13,780 --> 00:37:18,616
And also, take note that this command is assuming that you're

00:37:18,617 --> 00:37:21,821
using a default Unity install location.

00:37:21,822 --> 00:37:25,846
If you actually installed Unity somewhere different,

00:37:25,847 --> 00:37:29,697
then you're gonna need to change this a little bit and

00:37:29,698 --> 00:37:33,576
actually use the path that you installed Unity on.

00:37:33,577 --> 00:37:36,820
So I'm gonna just copy this command and

00:37:36,821 --> 00:37:40,880
paste it into my command prompt and hit Enter.

00:37:40,881 --> 00:37:43,210
And you should get a little message,

00:37:43,211 --> 00:37:45,520
where it tells you that it's downloading

00:37:47,550 --> 00:37:51,950
the latest security certificates from Mozilla.

00:37:51,951 --> 00:37:53,730
And it'll tell you what it did.

00:37:53,731 --> 00:37:55,990
And then it'll tell you it's finished.

00:37:55,991 --> 00:37:59,510
In my case, it only added one new certificate, but

00:37:59,511 --> 00:38:01,810
that's because I've done this before.

00:38:01,811 --> 00:38:04,900
If you're doing it for the first time, it should add a few more.

00:38:06,220 --> 00:38:10,913
And so once this is done, we actually have our

00:38:10,914 --> 00:38:15,863
Unity set up to access other websites with SSL.

00:38:15,864 --> 00:38:23,003
All right, so let's move on and recap.

00:38:23,004 --> 00:38:26,350
Again, there are no trusted sites in the Mono security

00:38:26,351 --> 00:38:30,170
certificate store by default when you install Unity.

00:38:30,171 --> 00:38:33,640
So we just used the mozroots command line tool to

00:38:33,641 --> 00:38:34,920
update that.

00:38:34,921 --> 00:38:39,029
And now we should be all set to talk to our Azure backend.

00:38:41,361 --> 00:38:44,706
All right, so now that we've got all the prerequisites out of

00:38:44,707 --> 00:38:47,809
the way, it's time to start building our demo in Unity.

00:38:47,810 --> 00:38:51,877
I'm gonna show you everything you need to send data to and

00:38:51,878 --> 00:38:55,266
read data from the Azure backend that we set up in

00:38:55,267 --> 00:38:57,420
the Azure portal.

00:38:57,421 --> 00:39:00,890
And this demo will take about 15 minutes to get through.

00:39:02,150 --> 00:39:06,860
So what we're gonna need to do first is go back to Unity.

00:39:06,861 --> 00:39:11,000
And I'm just gonna make a new folder in

00:39:11,001 --> 00:39:15,060
the Project window here, and I'm gonna call it Scripts.

00:39:16,080 --> 00:39:19,280
And this is just to help us stay organized

00:39:19,281 --> 00:39:20,980
because we're gonna add a handful of scripts.

00:39:20,981 --> 00:39:26,150
So go inside of that folder, and the first scripts we're gonna

00:39:26,151 --> 00:39:29,660
be making are what are called data model scripts.

00:39:29,661 --> 00:39:34,935
So right-click and choose Create and hit C# Script.

00:39:34,936 --> 00:39:37,775
And the trick here is that we need to name these

00:39:37,776 --> 00:39:40,425
just like we named our Easy Tables.

00:39:40,426 --> 00:39:42,612
So the table we're using for

00:39:42,613 --> 00:39:46,085
the leaderboard was called HighScoreInfo.

00:39:49,180 --> 00:39:51,230
And then if you need to remember,

00:39:51,231 --> 00:39:55,100
you can just go back to the Azure portal and

00:39:55,101 --> 00:40:00,910
see that we had HighScoreInfo and CrashInfo.

00:40:00,911 --> 00:40:05,120
So let's go ahead and add CrashInfo also.

00:40:05,121 --> 00:40:07,421
So another C# script, and

00:40:07,422 --> 00:40:11,430
this one will be called CrashInfo, all right?

00:40:12,540 --> 00:40:16,320
And so let's open up HighScoreInfo, and

00:40:16,321 --> 00:40:18,912
we'll go ahead and reload.

00:40:18,913 --> 00:40:23,300
And this is not going to be a MonoBehaviour.

00:40:23,301 --> 00:40:26,720
So you can go ahead and get rid of that, and go ahead and

00:40:26,721 --> 00:40:28,120
get rid of Start and

00:40:28,121 --> 00:40:32,010
Update because that's not a MonoBehaviour so we don't need that.

00:40:33,670 --> 00:40:37,555
I actually don't need any of these using statements either.

00:40:37,556 --> 00:40:41,813
But what I'm gonna wanna add here is simply a handful of

00:40:41,814 --> 00:40:43,580
properties, right?

00:40:43,581 --> 00:40:46,570
And so these properties are gonna represent the data that we

00:40:46,571 --> 00:40:49,540
wanna send to our Easy Table.

00:40:49,541 --> 00:40:54,390
So the first one in the HighScoreInfo that we need

00:40:54,391 --> 00:40:55,890
is gonna be the player's name.

00:40:55,891 --> 00:40:59,230
So that's gonna be public string Name.

00:41:01,520 --> 00:41:05,580
And the other data that we need for

00:41:05,581 --> 00:41:08,590
our leaderboard is gonna be the player's time.

00:41:08,591 --> 00:41:11,450
Because it's a racing game, so

00:41:11,451 --> 00:41:15,330
their score is essentially how quickly they finish the race.

00:41:15,331 --> 00:41:20,537
So public float Time.

00:41:20,538 --> 00:41:26,059
And we also are gonna have to keep track of an ID for

00:41:26,060 --> 00:41:31,449
each entry just to make things easy to delete and

00:41:31,450 --> 00:41:34,428
organize, keep sorted.

00:41:34,429 --> 00:41:37,987
So we'll have a public string ID.

00:41:40,167 --> 00:41:44,744
All right, and so when we eventually create a new

00:41:44,745 --> 00:41:49,770
HighScoreInfo and send it to Azure, it will actually

00:41:49,771 --> 00:41:55,390
add these columns to the HighScoreInfo Easy Table.

00:41:55,391 --> 00:41:57,730
Even though we didn't set them up in the portal,

00:41:57,731 --> 00:41:59,281
I can just do that dynamically.

00:41:59,282 --> 00:42:02,610
And this one, if you remember, is actually already there.

00:42:02,611 --> 00:42:09,490
So it will just use the existing ID data column.

00:42:09,491 --> 00:42:12,610
All right, so that takes care of the HighScoreInfo.

00:42:12,611 --> 00:42:16,709
Let's go back to Unity and open up CrashInfo.

00:42:20,360 --> 00:42:23,255
So again, it's not a MonoBehaviour,

00:42:23,256 --> 00:42:25,534
so we can get rid of all Start and

00:42:25,535 --> 00:42:30,290
Update here, and we'll go ahead and get rid of MonoBehaviour.

00:42:31,760 --> 00:42:36,721
And we can get rid of the using statements just to

00:42:36,722 --> 00:42:39,955
make it even more cleaned out.

00:42:39,956 --> 00:42:43,991
And the properties that we're gonna wanna add here are the X,

00:42:43,992 --> 00:42:45,620
Y, and Z coordinates for

00:42:45,621 --> 00:42:48,310
where the player crashed into the wall.

00:42:48,311 --> 00:42:51,353
So that's gonna be public float X.

00:42:56,743 --> 00:42:59,678
And public float Y.

00:43:01,934 --> 00:43:04,581
And public float Z.

00:43:06,320 --> 00:43:11,268
And then, finally, we are gonna wanna add an Id for

00:43:11,269 --> 00:43:13,809
this also, so string Id.

00:43:15,754 --> 00:43:18,258
All right, that's looking good.

00:43:18,259 --> 00:43:20,424
Let's make sure that we saved everything here.

00:43:20,425 --> 00:43:24,637
So I'm just gonna choose the Save All button here and

00:43:24,638 --> 00:43:26,079
go back to Unity.

00:43:26,080 --> 00:43:30,135
And it should compile, and it seems like it's working fine.

00:43:32,112 --> 00:43:36,778
And now the next step is going to be to create another script.

00:43:36,779 --> 00:43:41,286
So right-click, Create > C# Script.

00:43:41,287 --> 00:43:49,012
And this is going to be our AzureMobileServiceClient.

00:43:49,013 --> 00:43:54,570
And we're gonna use this as a singleton

00:43:54,571 --> 00:43:59,287
to make a static single reference

00:43:59,288 --> 00:44:04,010
to the Azure Mobile Service SDK.

00:44:05,210 --> 00:44:08,375
So open that up in Visual Studio.

00:44:08,376 --> 00:44:12,212
This one is not gonna be a MonoBehaviour either, so

00:44:12,213 --> 00:44:16,776
you can get rid of that and you can get rid of Start and Update.

00:44:18,456 --> 00:44:23,080
And actually, I'm gonna go ahead and paste some code in here.

00:44:23,081 --> 00:44:25,714
And I'll leave it up so that you can get a good look at it.

00:44:25,715 --> 00:44:29,200
And we'll make sure that this is available in the resources

00:44:29,201 --> 00:44:31,590
section of the webinar.

00:44:31,591 --> 00:44:36,818
But just to quickly overview, we just have a using statement here

00:44:36,819 --> 00:44:42,101
that says we're using the Microsoft.WindowsAzure.MobileSe-

00:44:42,102 --> 00:44:42,822
rvices.

00:44:42,823 --> 00:44:44,340
And this is a static class so

00:44:44,341 --> 00:44:47,310
that we know there's only ever gonna be one of these.

00:44:48,580 --> 00:44:52,120
And we have a constant here that is gonna

00:44:52,121 --> 00:44:56,950
keep hold of the URL to our Azure backend.

00:44:56,951 --> 00:45:00,480
So what we need to do is fill this in with

00:45:00,481 --> 00:45:01,760
the accurate information.

00:45:01,761 --> 00:45:04,105
So let's go back to the Azure portal.

00:45:06,287 --> 00:45:12,260
And let's go ahead and just go back to all resources here and

00:45:12,261 --> 00:45:18,245
find our super-race mobile app, and I'll click on that.

00:45:18,246 --> 00:45:23,638
And in the Overview, I'm going to look for where it says URL.

00:45:23,639 --> 00:45:28,090
And if you mouse over it, you should see a Click to copy icon.

00:45:28,091 --> 00:45:31,540
So I'm just gonna click that, and it tells me it copied.

00:45:31,541 --> 00:45:34,350
So let's go back to Visual Studio.

00:45:34,351 --> 00:45:35,870
And I'm just gonna paste that in

00:45:37,680 --> 00:45:39,940
over where it said MOBILE_APP_URL.

00:45:39,941 --> 00:45:44,920
So this is the actual location of my Azure backend,

00:45:44,921 --> 00:45:46,650
so that's set up right now.

00:45:48,030 --> 00:45:52,520
And then this is just the setup for our

00:45:53,730 --> 00:45:58,030
static property that any other class that's gonna need to

00:45:58,031 --> 00:46:02,190
connect to our backend is gonna use this Client property.

00:46:02,191 --> 00:46:05,890
And if the client hasn't been initialized yet,

00:46:05,891 --> 00:46:08,130
it's just gonna call this one line and

00:46:08,131 --> 00:46:12,200
initialize it with this endpoint.

00:46:12,201 --> 00:46:14,920
So that's all the setup we really need to get

00:46:14,921 --> 00:46:18,940
the Azure Mobile SDK working for us, so let's save.

00:46:20,050 --> 00:46:23,600
I'll just click the button to make sure everything's saved and

00:46:23,601 --> 00:46:24,920
go back to Unity.

00:46:26,230 --> 00:46:29,780
And now that we have everything set up, the next step is gonna

00:46:29,781 --> 00:46:32,840
be to test it out and make sure it's actually working and

00:46:32,841 --> 00:46:34,498
doing what we think it should do.

00:46:34,499 --> 00:46:36,740
So I'm gonna go to Create, and

00:46:36,741 --> 00:46:39,423
I'm gonna make another C# script.

00:46:39,424 --> 00:46:45,450
And this one I'm gonna call TestConnection, all right?

00:46:45,451 --> 00:46:47,560
So let's open this in Visual Studio.

00:46:47,561 --> 00:46:50,730
And we can go ahead and hit Reload.

00:46:52,580 --> 00:46:57,220
And I'm going to paste in some more code.

00:46:57,221 --> 00:47:00,373
So again, I'll walk through it so you can see it.

00:47:00,374 --> 00:47:02,910
And we'll also have links to it in the webinar.

00:47:04,050 --> 00:47:09,610
But what we have here is a class called TestConnection,

00:47:09,611 --> 00:47:11,860
and this one actually is a MonoBehaviour.

00:47:11,861 --> 00:47:16,070
So we're gonna have to make sure we remember to actually

00:47:16,071 --> 00:47:19,160
put this on a game object in our scene before we run it

00:47:19,161 --> 00:47:20,590
to make sure it works.

00:47:20,591 --> 00:47:21,910
We'll get to that.

00:47:21,911 --> 00:47:24,150
So all this does is inside the Start,

00:47:24,151 --> 00:47:27,790
it runs this TestTableConnection function.

00:47:27,791 --> 00:47:33,696
And inside of the TestTableConnection function,

00:47:33,697 --> 00:47:38,650
we are getting a new table from our client.

00:47:38,651 --> 00:47:41,914
And we're gonna go ahead and get the HighScoreInfo table just for

00:47:41,915 --> 00:47:42,513
this test.

00:47:42,514 --> 00:47:44,709
Eventually, we'll use the CrashInfo, too.

00:47:44,710 --> 00:47:47,590
But for the test, we just need to do one of them to see

00:47:47,591 --> 00:47:49,680
that it's just working in general.

00:47:50,910 --> 00:47:56,100
And so we're gonna save this table as a variable table,

00:47:56,101 --> 00:47:59,048
and we're gonna try inserting some data into it.

00:47:59,049 --> 00:48:03,866
So this TestInsertAsync function down here is going to

00:48:03,867 --> 00:48:06,700
use the function InsertAsync.

00:48:06,701 --> 00:48:10,253
And this is really gonna be the workhorse of this example

00:48:10,254 --> 00:48:13,806
because this is what we're gonna use to insert all of our

00:48:13,807 --> 00:48:17,730
telemetry and leaderboard entries into our tables.

00:48:17,731 --> 00:48:22,233
So I'm just making a new HighScoreInfo with

00:48:22,234 --> 00:48:25,158
a Name property set to Hank.

00:48:25,159 --> 00:48:27,460
And so when I run this function,

00:48:27,461 --> 00:48:31,383
it should insert this into our Easy Table on Azure, and

00:48:31,384 --> 00:48:35,150
there should be an entry there with the name of Hank.

00:48:36,440 --> 00:48:40,499
And so we're gonna await that until it's done.

00:48:40,500 --> 00:48:42,995
And once it's finished, we're gonna try and

00:48:42,996 --> 00:48:44,280
test reading the data.

00:48:44,281 --> 00:48:48,489
So we'll use TestToListAsync.

00:48:48,490 --> 00:48:52,395
And that's gonna showcase the other main workhorse of this

00:48:52,396 --> 00:48:55,890
demonstration, which is ToListAsync.

00:48:55,891 --> 00:49:00,819
And what that will do is get a hold of all the entries in

00:49:00,820 --> 00:49:03,622
the table that's on Azure and

00:49:03,623 --> 00:49:09,243
store them in a list in C# that we can then iterate through.

00:49:09,244 --> 00:49:12,508
And in this case, we're just gonna print the name

00:49:12,509 --> 00:49:14,780
of each entry that's in the list.

00:49:15,780 --> 00:49:19,220
So let's make sure this is saved, I'll hit Save All again.

00:49:20,330 --> 00:49:22,251
Now let's go back to Unity.

00:49:22,252 --> 00:49:26,387
And again, I'm gonna have to remember to create a new empty

00:49:26,388 --> 00:49:30,535
game object here, and I'm gonna call it TestConnection.

00:49:33,254 --> 00:49:37,685
And I'm gonna drag the TestConnection script that we

00:49:37,686 --> 00:49:40,937
just made onto that empty game object.

00:49:40,938 --> 00:49:44,166
And let's go ahead and run it.

00:49:44,167 --> 00:49:48,650
And it should connect to our table in Azure and

00:49:48,651 --> 00:49:53,550
insert an entry, and then read it back to me.

00:49:53,551 --> 00:49:56,957
So if we go back and look at the The console,

00:49:56,958 --> 00:49:59,618
I'm just gonna drag it out here.

00:49:59,619 --> 00:50:01,480
You'll see it says, it's Inserting data.

00:50:01,481 --> 00:50:04,730
And what I've noticed is that the first time

00:50:04,731 --> 00:50:08,000
I use an Easy Table after making it on the portal,

00:50:08,001 --> 00:50:12,300
it actually takes a little bit of time to insert data or

00:50:12,301 --> 00:50:13,340
connect for the first time.

00:50:14,430 --> 00:50:18,380
And so you should have noticed that as you watched.

00:50:18,381 --> 00:50:22,695
It didn't take forever but a couple of seconds.

00:50:22,696 --> 00:50:25,713
However, we will try it again here in a second.

00:50:25,714 --> 00:50:29,479
And I've noticed an subsequent connections go really,

00:50:29,480 --> 00:50:34,130
really fast, so we'll look and see if that's the case.

00:50:34,131 --> 00:50:35,560
So we inserted the data and

00:50:35,561 --> 00:50:38,250
then we read it back and the name is Hank.

00:50:38,251 --> 00:50:41,166
So we'll look on the Azure Portal and

00:50:41,167 --> 00:50:44,089
see if that actually showed up in it.

00:50:44,090 --> 00:50:46,868
And then let's, actually before we do that though,

00:50:46,869 --> 00:50:48,055
let's stop the game.

00:50:49,065 --> 00:50:52,955
And let's try and add another entry, just for fun.

00:50:52,956 --> 00:50:55,485
So I'm back in our TestConnection.cs and

00:50:56,535 --> 00:50:57,505
let's add another one.

00:50:57,506 --> 00:51:00,228
And I'll call this one David, and I'm gonna Save.

00:51:02,010 --> 00:51:06,731
And let's go back to Unity, and run the game one more time.

00:51:08,398 --> 00:51:11,606
And so in theory, it should go a little faster, and yeah,

00:51:11,607 --> 00:51:13,220
that was almost instant.

00:51:13,221 --> 00:51:17,650
So we inserted the new entry and then we printed out all of

00:51:17,651 --> 00:51:20,950
the entries so now we have two, we have Hank and we have David.

00:51:22,292 --> 00:51:24,610
All right, so it seems to be working but

00:51:24,611 --> 00:51:27,096
let's just make super duper sure.

00:51:27,097 --> 00:51:31,302
So I'm gonna go to the Azure Portal, and

00:51:31,303 --> 00:51:33,776
I'm going to go back and

00:51:33,777 --> 00:51:38,617
find the Easy Table section of our mobile app.

00:51:38,618 --> 00:51:43,218
And let's take a look at the high score info table, because

00:51:43,219 --> 00:51:47,648
that's where we were storing these entries and theory.

00:51:47,649 --> 00:51:51,039
And sure enough, we have two entries, we have a Hank and

00:51:51,040 --> 00:51:52,950
we have a David.

00:51:52,951 --> 00:51:55,840
And they both have times of 0 because we actually didn't

00:51:55,841 --> 00:51:58,220
provide a time in that test script,

00:51:58,221 --> 00:52:00,390
we just only provided a name.

00:52:00,391 --> 00:52:03,440
So we're stuck with the default time of 0.

00:52:03,441 --> 00:52:05,600
Now 0 is a pretty good time,

00:52:05,601 --> 00:52:08,540
I don't think anyone's ever gonna be able to beat that.

00:52:08,541 --> 00:52:12,830
So before we go any further, I'm actually gonna click this More

00:52:12,831 --> 00:52:15,230
button here, and then just clear the table.

00:52:15,231 --> 00:52:20,060
Because those scores are unfair, and I wanna make sure that

00:52:20,061 --> 00:52:24,690
we have only real, legit scores in our leaderboard.

00:52:24,691 --> 00:52:26,700
So let's clear the table.

00:52:26,701 --> 00:52:27,311
Are you sure?

00:52:27,312 --> 00:52:29,910
Yes, and so that's done.

00:52:32,350 --> 00:52:36,067
Now we are ready to move on to the next step here.

00:52:36,068 --> 00:52:38,020
But first, let's go ahead and recap a little bit.

00:52:39,060 --> 00:52:42,100
So in this last demonstration,

00:52:42,101 --> 00:52:45,080
what we did was we created data model classes.

00:52:45,081 --> 00:52:48,900
And these had to have the properties that corresponded to

00:52:48,901 --> 00:52:52,860
the data that we wanted to send into our Easy Table.

00:52:52,861 --> 00:52:56,085
The other important thing here was that they had to be named,

00:52:56,086 --> 00:52:58,564
just like the Easy Tables were named on Azure.

00:52:58,565 --> 00:53:01,824
So we had HighScoreInfo for our leaderboard and

00:53:01,825 --> 00:53:04,770
we had CrashInfo for our crash telemetry.

00:53:06,070 --> 00:53:11,921
And the next step was to create a MobileServiceClient singleton.

00:53:11,922 --> 00:53:16,762
And this was the sort of single access point that we wanna

00:53:16,763 --> 00:53:21,809
use throughout our game to connect to our Azure backend and

00:53:21,810 --> 00:53:27,420
get a hold of all of the tables and send and read to them.

00:53:27,421 --> 00:53:30,240
The last thing we did in this demonstration was actually

00:53:30,241 --> 00:53:34,390
test the client's connection with the test connection script

00:53:34,391 --> 00:53:35,195
that we went over.

00:53:35,196 --> 00:53:41,200
And we tested out InsertAsync, and ToListAsync.

00:53:41,201 --> 00:53:45,900
And we'll use that to add entries to our HighScoreInfo,

00:53:45,901 --> 00:53:47,440
and then read them back in Unity.

00:53:47,441 --> 00:53:51,569
So at this point, we should be all set up for the next

00:53:51,570 --> 00:53:56,386
step here, and this is the final demo of today's section.

00:53:56,387 --> 00:53:59,856
And in this we're gonna actually import the sample racing game

00:53:59,857 --> 00:54:01,364
that I showed you earlier.

00:54:01,365 --> 00:54:06,120
And we're gonna go over how the Unity game is gonna

00:54:06,121 --> 00:54:08,570
connect to Azure.

00:54:08,571 --> 00:54:10,840
And I think the steps involved are only gonna take

00:54:10,841 --> 00:54:12,170
a couple minutes.

00:54:12,171 --> 00:54:15,880
But then I'll spend about 15 minutes discussing the sample

00:54:15,881 --> 00:54:18,180
and showing you how it's all set up.

00:54:18,181 --> 00:54:22,984
So the first step here is actually gonna be to download

00:54:22,985 --> 00:54:25,238
the sample game assets.

00:54:25,239 --> 00:54:28,610
So we have this link here.

00:54:28,611 --> 00:54:32,354
If you paste this into your browser, it should take you

00:54:32,355 --> 00:54:37,240
a .unitypackage file that you can download.

00:54:38,420 --> 00:54:41,067
I have it already downloaded here so

00:54:41,068 --> 00:54:43,547
I'm gonna go into my downloads.

00:54:43,548 --> 00:54:46,821
And what you're gonna wanna do is make

00:54:46,822 --> 00:54:50,094
sure that your Unity project is open,

00:54:50,095 --> 00:54:54,612
make sure that you only have one Unity project open.

00:54:54,613 --> 00:54:59,695
And then just double-click this Azure Easy tables

00:54:59,696 --> 00:55:04,543
sample game assets.unitypackage file that you

00:55:04,544 --> 00:55:09,518
can download from the location on the slide here.

00:55:09,519 --> 00:55:10,485
All right, so

00:55:10,486 --> 00:55:14,856
this should be available to you in the resources of the webinar.

00:55:14,857 --> 00:55:17,950
I'm gonna double-click it, and

00:55:17,951 --> 00:55:25,650
that should bring up the Import Unity Package window here.

00:55:25,651 --> 00:55:28,060
And by default, everything should be checked and

00:55:28,061 --> 00:55:30,900
that's what we want, so make sure everything's checked.

00:55:30,901 --> 00:55:33,340
You could just hit All to make sure everything's checked,

00:55:33,341 --> 00:55:35,420
if it's not, and then hit Import.

00:55:36,520 --> 00:55:39,431
And that will bring all the sample game assets

00:55:39,432 --> 00:55:41,124
into your Unity project.

00:55:51,410 --> 00:55:56,143
And again, all these assets are primarily taken

00:55:56,144 --> 00:56:00,820
from the included standard assets in Unity.

00:56:00,821 --> 00:56:03,976
So the car and

00:56:03,977 --> 00:56:10,540
the prototyping packages I used to build the actual track.

00:56:10,541 --> 00:56:13,295
That's all available, and

00:56:13,296 --> 00:56:16,330
you can just download this package to get this sort of

00:56:16,331 --> 00:56:19,970
preconfigured setup that I've made.

00:56:19,971 --> 00:56:23,750
So once it's all imported into your project,

00:56:23,751 --> 00:56:26,270
the one thing you do have to make sure you remember to do

00:56:26,271 --> 00:56:31,995
before you test is out is go to the File>Build Settings.

00:56:33,258 --> 00:56:38,220
And we're gonna need to add the scenes that are involved

00:56:38,221 --> 00:56:40,820
in the build to this build settings here.

00:56:42,360 --> 00:56:46,260
Go to the Azure Easy tables sample game assets folder in

00:56:46,261 --> 00:56:50,565
your project after importing, open up the scenes folder.

00:56:50,566 --> 00:56:55,306
And then, just select these four scenes and drag them into

00:56:55,307 --> 00:56:59,681
the scenes and builds section of the build settings.

00:57:00,888 --> 00:57:03,987
And so once we've done that, we can go ahead and

00:57:03,988 --> 00:57:05,780
close the build settings.

00:57:07,000 --> 00:57:10,016
And I'm gonna open up the MenuScene,

00:57:10,017 --> 00:57:12,094
which is the first scene.

00:57:12,095 --> 00:57:14,678
It asked me if I wanna save the scene we've been working on.

00:57:14,679 --> 00:57:17,300
I guess I'll go ahead and do that.

00:57:17,301 --> 00:57:21,190
In case we wanna mess with that test any further at some point.

00:57:21,191 --> 00:57:26,383
So I'm just gonna call this the test scene, and Save it.

00:57:26,384 --> 00:57:30,615
And then you should go ahead and open up the menu scene,

00:57:30,616 --> 00:57:33,200
that was in the included sample.

00:57:33,201 --> 00:57:37,172
So this is just a UI, so I'm gonna go ahead and

00:57:37,173 --> 00:57:41,368
click on 2D, so it looks a little more normal.

00:57:41,369 --> 00:57:44,110
And I'm gonna go ahead and try and run it.

00:57:44,111 --> 00:57:49,650
And the first thing I'll do once it's running is just try

00:57:49,651 --> 00:57:53,240
out a race because we don't have any data in our leaderboard or

00:57:53,241 --> 00:57:54,630
our heat map.

00:57:54,631 --> 00:57:58,074
So we're gonna have to run some races to add some data there.

00:58:02,933 --> 00:58:06,329
All right, so here's the game that you should remember from

00:58:06,330 --> 00:58:08,069
the beginning of the session.

00:58:08,070 --> 00:58:11,705
And you can drive the car around with WASD or

00:58:11,706 --> 00:58:14,435
the arrow keys should work too.

00:58:14,436 --> 00:58:17,772
And as you drive through the course,

00:58:17,773 --> 00:58:21,762
Just make a point of crashing in some spots.

00:58:21,763 --> 00:58:25,246
And I would say, go ahead and crash in some spots that you

00:58:25,247 --> 00:58:28,070
think you'll be able to remember.

00:58:28,071 --> 00:58:31,227
So that when you go and look at the Heatmap later,

00:58:31,228 --> 00:58:34,923
you can just verify that there are red spheres loaded in at

00:58:34,924 --> 00:58:37,157
the spots you remember crashing.

00:58:37,158 --> 00:58:39,111
And when you go around this corner,

00:58:39,112 --> 00:58:41,845
you can go ahead and hit these fun, yellow ramps,

00:58:41,846 --> 00:58:44,760
but just make sure that you don't flip the car over.

00:58:44,761 --> 00:58:47,871
Because if the car lands on its top, it gets stuck and

00:58:47,872 --> 00:58:50,152
you won't be able to finish the race.

00:58:50,153 --> 00:58:54,155
And it's when you finish the race is when the data actually

00:58:54,156 --> 00:58:55,550
gets sent to Azure.

00:58:55,551 --> 00:58:57,512
So if that happens to you,

00:58:57,513 --> 00:59:01,987
you're gonna have to hit the Restart button and try again.

00:59:01,988 --> 00:59:05,884
I'm just gonna wreck right at the finish line here, so

00:59:05,885 --> 00:59:09,695
it's really obvious where I should expect to see some

00:59:09,696 --> 00:59:11,488
crashes on the Heatmap.

00:59:11,489 --> 00:59:14,590
And I'm gonna complete the lap, and

00:59:14,591 --> 00:59:19,708
this is where we're submitting stuff to our Azure backend.

00:59:19,709 --> 00:59:24,238
So I'm gonna go ahead and enter my name for a high score.

00:59:24,239 --> 00:59:27,190
The high scorers are not competitive right now

00:59:27,191 --> 00:59:29,730
because there's no entries, so you should get a high score no

00:59:29,731 --> 00:59:31,939
matter what, and go ahead and hit Submit.

00:59:33,240 --> 00:59:37,640
And you might notice, in the console, there's some printouts

00:59:37,641 --> 00:59:42,840
that explain that we've finished uploading the crash data,

00:59:42,841 --> 00:59:45,850
we're uploading the score, or we finished uploading the score.

00:59:45,851 --> 00:59:50,070
So if you see those log messages, at that point,

00:59:50,071 --> 00:59:55,270
you should be safe to go ahead and look at the Leaderboard.

00:59:55,271 --> 00:59:57,390
And there it is, there's my time,

00:59:57,391 --> 00:59:58,880
there's my name that I entered.

01:00:01,080 --> 01:00:04,880
If I go to the Azure Portal again, let's go ahead and

01:00:04,881 --> 01:00:07,190
refresh the high score table and

01:00:07,191 --> 01:00:10,430
I can see that David is in there with this time.

01:00:10,431 --> 01:00:12,890
It's just being formatted a little nicer in

01:00:12,891 --> 01:00:14,030
the actual Leaderboard.

01:00:15,700 --> 01:00:20,260
I can take a look at the crash Heatmap, and there's all those

01:00:20,261 --> 01:00:24,450
spots I made a point of wrecking right before the finish line.

01:00:24,451 --> 01:00:26,840
So I can see that's working out for me too.

01:00:28,390 --> 01:00:32,082
And just again to verify that,

01:00:32,083 --> 01:00:38,450
let's take a peek at the CrashInfo Easy Table.

01:00:38,451 --> 01:00:40,850
And so I can see all those crashes,

01:00:40,851 --> 01:00:44,360
they're logged and their coordinates are there.

01:00:45,450 --> 01:00:47,510
So it's all working out for me.

01:00:49,070 --> 01:00:52,520
Now, let's talk a little bit about how it's setup.

01:00:52,521 --> 01:00:55,380
So I'm gonna go and stop the game.

01:00:55,381 --> 01:01:00,206
And let's take a peek at the Scripts folder that's inside

01:01:00,207 --> 01:01:04,430
of the Azure Easy Tables sample game assets.

01:01:04,431 --> 01:01:08,216
So this is the package we imported, and

01:01:08,217 --> 01:01:11,787
now here's the scripts directory.

01:01:11,788 --> 01:01:17,575
And let's take a look first at RecordCrashInfo and

01:01:17,576 --> 01:01:23,374
yeah, I'll go ahead and reload my solution here.

01:01:23,375 --> 01:01:27,665
I can go ahead and update my line endings, so it's fine.

01:01:27,666 --> 01:01:31,725
And here we are at RecordCrashInfo.cs.

01:01:31,726 --> 01:01:37,232
And so what this script is going to do is in it's on collision

01:01:37,233 --> 01:01:42,299
enter, it's gonna see where the player crashed, and

01:01:42,300 --> 01:01:47,720
it's going to create a new CrashInfo with that location.

01:01:49,290 --> 01:01:51,904
And then when the game is finished, so

01:01:51,905 --> 01:01:54,036
we're making a list of these.

01:01:54,037 --> 01:01:59,500
We're adding all the CrashInfos to a list called newCrashes.

01:01:59,501 --> 01:02:01,340
And when the game is finished,

01:02:01,341 --> 01:02:05,970
we're gonna call this UploadNewCrashDataAsync.

01:02:05,971 --> 01:02:07,290
And if you look in that function,

01:02:07,291 --> 01:02:10,285
all that's doing is we're using this

01:02:10,286 --> 01:02:16,076
client.GetTable like we had in our test connection script.

01:02:16,077 --> 01:02:21,150
And we're iterating through our list of new crashes,

01:02:21,151 --> 01:02:24,640
and for each one of them, we're using InsertAsync.

01:02:24,641 --> 01:02:25,740
And that's, again,

01:02:25,741 --> 01:02:28,560
the same function we used in test connection.

01:02:28,561 --> 01:02:32,136
And so we're just inserting each of these new crashes into our

01:02:32,137 --> 01:02:33,256
Azure Easy Table.

01:02:33,257 --> 01:02:38,033
All right, if you go back to Unity and

01:02:38,034 --> 01:02:42,504
take a peek at the Heatmap script,

01:02:42,505 --> 01:02:48,055
you’ll see that when this thing loads up,

01:02:48,056 --> 01:02:53,299
we’re running InitializeCrashList,

01:02:53,300 --> 01:02:59,025
which is going to connect to our Easy Table.

01:02:59,026 --> 01:03:01,028
And again, run ToListAsync,

01:03:01,029 --> 01:03:04,950
just like we did in the test connection script.

01:03:04,951 --> 01:03:07,710
And so it's gonna store all of the crashes from our

01:03:07,711 --> 01:03:13,700
Azure Easy Table into this crashesFromServer variable,

01:03:13,701 --> 01:03:17,360
and then we're gonna spawn markers from that list.

01:03:17,361 --> 01:03:22,860
So for each crash that's in the crashesFromServer list,

01:03:22,861 --> 01:03:28,040
we're going to instantiate one of these markerPrefabs.

01:03:28,041 --> 01:03:31,570
And it comes in at the coordinates that are loaded from

01:03:31,571 --> 01:03:34,170
the CrashInfo that's on our Azure Easy Table.

01:03:35,990 --> 01:03:39,390
All right, the next thing we should take a look at

01:03:39,391 --> 01:03:42,050
is the Leaderboard stuff.

01:03:42,051 --> 01:03:45,515
So let's take a peek at RecordHighScore.

01:03:46,840 --> 01:03:51,662
The way this script works is when the player finishes a lap,

01:03:51,663 --> 01:03:56,530
it's going to check and see if it's a new high score.

01:03:56,531 --> 01:04:01,008
The high scores are loaded actually in the Leaderboard

01:04:01,009 --> 01:04:01,890
scripts.

01:04:01,891 --> 01:04:05,534
If you go into this UI folder and you look at Leaderboard,

01:04:07,831 --> 01:04:12,063
This is going to actually connect to our Easy Table, and

01:04:12,064 --> 01:04:16,670
download the current high scores, and then sort them here.

01:04:18,000 --> 01:04:20,260
Again, we're just using ToListAsync.

01:04:20,261 --> 01:04:24,390
And then so in RecordHighScore, we're gonna check

01:04:24,391 --> 01:04:27,960
with that list and see if we actually have a new high score.

01:04:27,961 --> 01:04:30,340
And if we do, we're gonna get the player's name.

01:04:30,341 --> 01:04:33,830
And when the player has finished entering their name,

01:04:33,831 --> 01:04:37,698
we're gonna call UploadNewHighScoreAync.

01:04:37,699 --> 01:04:41,895
And it's just gonna sort of do the same stuff we've been

01:04:41,896 --> 01:04:46,273
doing where we make a new HighScoreInfo with the player's

01:04:46,274 --> 01:04:47,896
name and their time.

01:04:47,897 --> 01:04:52,590
And then we call InsertAsync to send it to our HighScoreTable.

01:04:53,890 --> 01:04:56,000
And then again back on the Leaderboard here,

01:04:57,110 --> 01:04:59,400
we saw where it's downloading the high scores.

01:04:59,401 --> 01:05:03,180
What it's gonna do on the leader board scene is actually

01:05:03,181 --> 01:05:10,110
instantiate a rowPrefab for each of the high score entries.

01:05:10,111 --> 01:05:13,494
So the rowPrefab just had some UI fields for

01:05:13,495 --> 01:05:16,980
the player's name and the player's time.

01:05:16,981 --> 01:05:21,910
And we're just going through our list of high scores, and

01:05:21,911 --> 01:05:24,490
instantiating one of these prefabs for each of them.

01:05:25,860 --> 01:05:30,235
And that's pretty much all of the ways that we're

01:05:30,236 --> 01:05:31,775
connecting to Azure right there.

01:05:31,776 --> 01:05:34,285
So like I've mentioned,

01:05:34,286 --> 01:05:38,765
it's essentially everything that we just did in that really

01:05:38,766 --> 01:05:42,635
simple test connection script if you remember that.

01:05:42,636 --> 01:05:47,179
So inside of our assets, we had test connection.

01:05:47,180 --> 01:05:52,899
And you can see a really simple demonstration of how to connect

01:05:52,900 --> 01:05:57,959
to a table, and then use InsertAsync to store things,

01:05:57,960 --> 01:06:01,118
and ToListAsync to read things.

01:06:01,119 --> 01:06:09,100
All right, so let's recap a little bit one last time.

01:06:09,101 --> 01:06:13,156
We imported the sample game assets, and

01:06:13,157 --> 01:06:18,284
then we had to make sure that we added the scenes that

01:06:18,285 --> 01:06:24,148
are in that new package we imported to our build settings.

01:06:24,149 --> 01:06:29,134
And then finally, we just run the game from the menu scene,

01:06:29,135 --> 01:06:33,835
and did some races to get some data into our Easy Tables.

01:06:33,836 --> 01:06:36,569
And then checked out the Leaderboard and

01:06:36,570 --> 01:06:41,000
the Heatmap to see The telemetry and leaderboard data in action.

01:06:43,190 --> 01:06:47,550
So at this point you should have everything you need to start

01:06:47,551 --> 01:06:51,780
building Unity games with this type of Azure functionality.

01:06:51,781 --> 01:06:55,550
And returning back to the beginning of the presentation

01:06:55,551 --> 01:06:57,810
you can use this stuff to

01:06:57,811 --> 01:07:02,010
add a lot of motivating features for your players.

01:07:02,011 --> 01:07:07,010
So I do want to sorta talk about some next steps you could make

01:07:07,011 --> 01:07:11,320
now that you have these sorta basics out of the way.

01:07:11,321 --> 01:07:14,860
Regarding the leaderboards, I think it's important to

01:07:14,861 --> 01:07:17,880
remember that everybody likes winning, but

01:07:17,881 --> 01:07:20,490
not everybody can be on the top of the leaderboard.

01:07:20,491 --> 01:07:25,650
So what I would start thinking about as I move to extend this

01:07:25,651 --> 01:07:29,230
example and build on it, would be what are some of the more

01:07:29,231 --> 01:07:31,420
advanced stats that you could start tracking.

01:07:32,790 --> 01:07:35,700
Because the more categories that you track in the leaderboard,

01:07:35,701 --> 01:07:39,070
the more ways people can have fun with your game.

01:07:39,071 --> 01:07:44,190
So you can start thinking about a list of a leaderboard for

01:07:44,191 --> 01:07:47,020
who has the most crashes in a play through, or

01:07:47,021 --> 01:07:49,820
maybe you wanna track who's driven the most miles

01:07:49,821 --> 01:07:53,630
in the game, and I personally think the jumps are pretty fun.

01:07:53,631 --> 01:07:55,769
So even if they don't help me win the race,

01:07:56,910 --> 01:08:00,860
maybe I could start tracking how long players spend the air or

01:08:00,861 --> 01:08:05,260
how many times they spin around in a given lap.

01:08:05,261 --> 01:08:07,900
And so, in that way, I would just try to come up with some

01:08:07,901 --> 01:08:11,380
fun, silly stats to start tracking, in addition to

01:08:11,381 --> 01:08:15,600
the serious competitive ones, to just give the full range of my

01:08:15,601 --> 01:08:18,275
players something to look at and have fun with.

01:08:18,276 --> 01:08:22,896
And then, regarding telemetry, I would start thinking about

01:08:22,897 --> 01:08:25,782
adding some more features to the game.

01:08:25,783 --> 01:08:28,774
And then using telemetry to sorta track how they're

01:08:28,775 --> 01:08:31,360
performing, and how players use them.

01:08:31,361 --> 01:08:34,040
One easy thing you could do would be to add a second

01:08:34,041 --> 01:08:35,480
type of car.

01:08:35,481 --> 01:08:38,390
And sort of slightly modify its attributes.

01:08:38,391 --> 01:08:42,030
So you can give it maybe better turning speed,

01:08:42,031 --> 01:08:47,310
or slower max speed, or something like that.

01:08:47,311 --> 01:08:52,100
And then, you can use telemetry to sort of track

01:08:52,101 --> 01:08:55,590
how often each player picks what car and

01:08:55,591 --> 01:09:00,530
you could use telemetry to track the success each car has.

01:09:00,531 --> 01:09:05,510
So we could see the average lap time for each type of car and

01:09:05,511 --> 01:09:09,660
if one car tends to complete lapse way faster than the other,

01:09:09,661 --> 01:09:13,726
that's a good indication that we need of sorta rebalance

01:09:13,727 --> 01:09:15,750
our car design.

01:09:15,751 --> 01:09:20,050
Another thing you could do is to add some pick-ups or

01:09:20,051 --> 01:09:23,700
maybe some speed boost spots on the map so if you drive over it,

01:09:23,701 --> 01:09:25,700
you get a little speed boost.

01:09:25,701 --> 01:09:28,720
And then we could start using telemetry to see how often

01:09:28,721 --> 01:09:32,450
players actually go over those pick-ups or

01:09:32,451 --> 01:09:34,230
drive over those speed boosts.

01:09:35,350 --> 01:09:38,820
And this would be a good way to sorta spice up the sections of

01:09:38,821 --> 01:09:43,680
the map that don't have a lot of action already.

01:09:43,681 --> 01:09:45,640
So we looked at the crash heat map,

01:09:45,641 --> 01:09:48,580
and we noticed that there are some sections, even

01:09:48,581 --> 01:09:52,010
the ones with the ramps that not all of players are crashing.

01:09:52,011 --> 01:09:57,030
So if I added some collectibles or some speed boosts,

01:09:57,031 --> 01:10:01,490
that might actually ratchet up the intensity of those sections

01:10:01,491 --> 01:10:04,820
and make them a little bit more engaging for our players.

01:10:04,821 --> 01:10:08,540
And one last thing I would think about is we could start adding

01:10:08,541 --> 01:10:12,940
alternate routes or shortcuts to the maps themselves, and then

01:10:12,941 --> 01:10:19,250
start tracking how often players actually take which route.

01:10:19,251 --> 01:10:24,050
So we could see how many players actually try and

01:10:24,051 --> 01:10:26,625
take the shortcut or maybe they're not intended to be

01:10:26,626 --> 01:10:28,140
shortcuts, they're just different.

01:10:28,141 --> 01:10:33,285
And we can see how often players use each route.

01:10:33,286 --> 01:10:37,887
So here's the resources you can use to keep up with what

01:10:37,888 --> 01:10:40,535
we've done today.

01:10:40,536 --> 01:10:44,662
There's a documented version of this presentation so

01:10:44,663 --> 01:10:47,979
if you prefer to get a little bit more in depth

01:10:47,980 --> 01:10:52,571
info about each of the steps, you can check these links out.

01:10:52,572 --> 01:10:55,791
And then we also have links to the free trial for

01:10:55,792 --> 01:10:59,840
Azure as well as the Visual Studio Dev Essentials which you

01:10:59,841 --> 01:11:03,210
can use to get some free Azure credits.

01:11:03,211 --> 01:11:07,140
And you can find the link to Unity where you can download

01:11:07,141 --> 01:11:12,310
Unity and learn all about how to use the Unity engine with, they

01:11:12,311 --> 01:11:15,280
have a lot of tutorials there that can help you get up and

01:11:15,281 --> 01:11:16,620
running if you're not already.

01:11:19,510 --> 01:11:22,390
So that wraps up today's presentation.

01:11:22,391 --> 01:11:25,250
I hope that you can use this to start making some awesome games

01:11:25,251 --> 01:11:26,440
with Azure and Unity.

01:11:27,800 --> 01:11:29,460
Thanks again for joining us.

01:11:31,980 --> 01:11:35,468
Once again, we will be sticking around for some Q&A, so

01:11:35,469 --> 01:11:38,739
if you have any questions, don't hesitate to ask and

01:11:38,740 --> 01:11:41,735

YouTube URL: https://www.youtube.com/watch?v=EJ5207SjmuE


