Title: Azure Friday | Cassandra API for Azure Cosmos DB
Publication date: 2018-02-26
Playlist: Microsoft Open Source Summit
Description: 
	Join Kirill Gavrylyuk and Scott Hanselman to learn about native support for Apache Cassandra API in Azure Cosmos DB with wire protocol level compatibility. This support ensures you can continue using your existing application and OSS tools with no code changes and gives you the flexibility to run your Cassandra apps fully managed with no vendor lock-in. 

Dear Cassandra Developers, welcome to Azure #CosmosDB! - https://azure.microsoft.com/en-us/blog/dear-cassandra-developers-welcome-to-azure-cosmosdb/
Introduction to Apache Cassandra API for Azure Cosmos DB - https://docs.microsoft.com/en-us/azure/cosmos-db/cassandra-introduction
Captions: 
	00:00:00,000 --> 00:00:02,130
>> Hey friends, it's Azure Friday.

00:00:02,130 --> 00:00:03,660
I'm here with Caron and we're going to talk a little

00:00:03,660 --> 00:00:05,260
bit more about Azure Cosmos DB,

00:00:05,260 --> 00:00:07,200
some of the exciting new features

00:00:07,200 --> 00:00:09,545
like Cassandra Support. How's it going?

00:00:09,545 --> 00:00:11,250
>> Awesome. It's always such a pleasure

00:00:11,250 --> 00:00:13,470
to be here. Thank you for having me.

00:00:13,470 --> 00:00:14,820
And today is especially

00:00:14,820 --> 00:00:16,335
exciting because at the end of the year,

00:00:16,335 --> 00:00:18,250
lots of good things came out,

00:00:18,250 --> 00:00:20,070
as we announced just

00:00:20,070 --> 00:00:21,390
a couple of weeks ago, and one of them

00:00:21,390 --> 00:00:25,575
was availability of Cassandra API on Cosmos DB.

00:00:25,575 --> 00:00:27,180
So as many of you know,

00:00:27,180 --> 00:00:28,350
Cosmos DB is

00:00:28,350 --> 00:00:32,585
a globally distributed database with multi-model support.

00:00:32,585 --> 00:00:35,990
So, it allows you to work with multiple different things.

00:00:35,990 --> 00:00:37,790
For example with documents using CQL or MongoDB API,

00:00:37,790 --> 00:00:41,130
with graphs using Gremlin API,

00:00:41,130 --> 00:00:44,065
working with key value APIs using Azure Table API,

00:00:44,065 --> 00:00:46,994
and now it offers you Cassandra API.

00:00:46,994 --> 00:00:50,575
And support for Cassandra API is a protocol level,

00:00:50,575 --> 00:00:53,845
so you can take your existing app or existing tool set

00:00:53,845 --> 00:00:57,110
that you use with Cassandra and just redirect it,

00:00:57,110 --> 00:00:58,860
point it at Cosmos DB

00:00:58,860 --> 00:01:00,900
and they will not know the difference.

00:01:00,900 --> 00:01:02,760
>> So, Cassandra is an open source database that

00:01:02,760 --> 00:01:04,865
people run on Linux PMs on their own?

00:01:04,865 --> 00:01:06,585
>> Yep, good point.

00:01:06,585 --> 00:01:08,040
It's a very popular,

00:01:08,040 --> 00:01:11,775
a very cool open source database

00:01:11,775 --> 00:01:14,925
for high scale real-time data scenarios,

00:01:14,925 --> 00:01:17,220
which is what we're especially excited about because

00:01:17,220 --> 00:01:19,905
it's exactly what Cosmos DB is for as well.

00:01:19,905 --> 00:01:24,052
So we love Cassandra.

00:01:24,052 --> 00:01:26,405
The main thing, it's an open source database,

00:01:26,405 --> 00:01:28,900
so if you run it, you have to run it and manage it,

00:01:28,900 --> 00:01:30,970
and it's usually used

00:01:30,970 --> 00:01:32,100
for high skill scenarios where

00:01:32,100 --> 00:01:34,240
you're managing large clusters.

00:01:34,240 --> 00:01:38,135
It's a non-trivial investment of DevOps of your time,

00:01:38,135 --> 00:01:41,545
and it's a pretty complicated thing to configure.

00:01:41,545 --> 00:01:45,053
So, we just tried to help and make a spin out of.

00:01:45,053 --> 00:01:46,780
>> Couldn't Azure have made

00:01:46,780 --> 00:01:49,520
a Cassandra database as a service?

00:01:49,520 --> 00:01:51,980
>> Good question. Yes, we had two options.

00:01:51,980 --> 00:01:54,055
We could take Cassandra open source

00:01:54,055 --> 00:01:55,270
and run it as a service,

00:01:55,270 --> 00:01:57,590
just like we do RADIUS as a service in

00:01:57,590 --> 00:02:01,240
Azure and it's a good approach.

00:02:01,240 --> 00:02:03,780
The challenge of this approach is that,

00:02:03,780 --> 00:02:05,230
not really a challenge,

00:02:05,230 --> 00:02:07,130
but we thought that we could do better,

00:02:07,130 --> 00:02:08,900
and by better meaning that

00:02:08,900 --> 00:02:10,895
we are not saying that we can do,

00:02:10,895 --> 00:02:12,530
what I'd better called an

00:02:12,530 --> 00:02:13,280
open source community,

00:02:13,280 --> 00:02:14,800
the open source community got phenomenal code,

00:02:14,800 --> 00:02:19,277
but we can do services that are more optimized for Azure.

00:02:19,277 --> 00:02:21,140
And we have been investing in

00:02:21,140 --> 00:02:22,980
a particular service called Azure Cosmos DB

00:02:22,980 --> 00:02:25,430
that brings you global distribution,

00:02:25,430 --> 00:02:29,665
that brings you multiple consistency,

00:02:29,665 --> 00:02:31,190
intuitive consistency choices,

00:02:31,190 --> 00:02:33,095
it brings you super low latency,

00:02:33,095 --> 00:02:35,060
high scale, and it's a managed service on Azure.

00:02:35,060 --> 00:02:37,690
Optimized for Azure platform.

00:02:37,690 --> 00:02:39,715
It's aware of the fact that it runs on Azure,

00:02:39,715 --> 00:02:45,547
as opposed to Cassandra that is written as a Linux.

00:02:45,547 --> 00:02:46,610
Database runs on Linux, it doesn't know-

00:02:46,610 --> 00:02:48,530
>> It runs in a VM,

00:02:48,530 --> 00:02:50,185
it doesn't care if it's in the cloud.

00:02:50,185 --> 00:02:51,800
That means that you're going to get all of

00:02:51,800 --> 00:02:53,510
the benefits of what's good about

00:02:53,510 --> 00:02:55,490
Cassandra and all of the benefits

00:02:55,490 --> 00:02:57,740
of being in Azure and knowing you're in Azure?

00:02:57,740 --> 00:03:01,225
>> Yes. That is our goal with this.

00:03:01,225 --> 00:03:03,710
So let's do a quick demo.

00:03:03,710 --> 00:03:06,320
So you can create a Cosmos DB with Cassandra API by

00:03:06,320 --> 00:03:07,790
just going and clicking

00:03:07,790 --> 00:03:10,635
"Create" and choosing a Cassandra API.

00:03:10,635 --> 00:03:12,650
I have already created one because it

00:03:12,650 --> 00:03:14,720
takes a few seconds,

00:03:14,720 --> 00:03:16,915
close to a minute to create an account.

00:03:16,915 --> 00:03:19,340
So I have created this one and it's

00:03:19,340 --> 00:03:22,120
an empty account, as we can see, it doesn't have anything.

00:03:22,120 --> 00:03:26,395
We open data explorer, there are no Cassandra tables.

00:03:26,395 --> 00:03:28,535
You have a nice "Quick start".

00:03:28,535 --> 00:03:30,955
I'm pretty proud of the "Quick start."

00:03:30,955 --> 00:03:34,470
It speeds up, it answers you a lot of questions.

00:03:34,470 --> 00:03:36,935
Many people use them and

00:03:36,935 --> 00:03:40,270
we use the same technique for Cassandra API.

00:03:40,270 --> 00:03:41,420
So what I'm going to do is,

00:03:41,420 --> 00:03:47,675
I'm going to communicate to this database using

00:03:47,675 --> 00:03:50,405
"Cassandra CQL Shell" that's

00:03:50,405 --> 00:03:52,545
a command line utility that's

00:03:52,545 --> 00:03:55,010
very common among Cassandra developers.

00:03:55,010 --> 00:03:56,795
It allows them to do

00:03:56,795 --> 00:03:58,260
data management separations and

00:03:58,260 --> 00:04:00,280
serve data all from command line.

00:04:00,280 --> 00:04:02,390
>> And this shell doesn't know about Azure?

00:04:02,390 --> 00:04:02,780
>> Absolutely.

00:04:02,780 --> 00:04:05,330
>> It doesn't know that it's not talking to Cassandra.

00:04:05,330 --> 00:04:05,900
>> Exactly.

00:04:05,900 --> 00:04:09,680
>> Because it is, it's talking to Cassandra on Cosmos.

00:04:09,680 --> 00:04:11,550
>> Let's see what it will do.

00:04:11,550 --> 00:04:14,840
So let's copy this line. Let's go.

00:04:14,840 --> 00:04:16,585
So here I'm running Python and I'm

00:04:16,585 --> 00:04:23,160
running cqlsh.py which is a CQL Shell-.

00:04:23,160 --> 00:04:24,380
>> So CQL Shell is a Python app?

00:04:24,380 --> 00:04:28,200
>> It's a Python app. And this will

00:04:28,200 --> 00:04:30,405
connect CQL Shell to

00:04:30,405 --> 00:04:33,085
Cosmos DB account with Cassandra API.

00:04:33,085 --> 00:04:35,310
And again, it seems that it's connected to

00:04:35,310 --> 00:04:39,575
a broad cluster at some hostname. That's all it knows.

00:04:39,575 --> 00:04:42,870
>> It says write there, Native Protocol v4.

00:04:42,870 --> 00:04:44,815
For all it knows, it's talking to Cassandra.

00:04:44,815 --> 00:04:46,925
>> Yep. So let's do a few CQL.

00:04:46,925 --> 00:04:49,490
CQL is Cassandra query language,

00:04:49,490 --> 00:04:51,756
very similar to SQL.

00:04:51,756 --> 00:04:55,412
I think it's a subset of SQL with few additional.

00:04:55,412 --> 00:04:56,940
So what are we going to do is we're going to create

00:04:56,940 --> 00:04:58,760
a key space equivalent of a database,

00:04:58,760 --> 00:05:00,300
create a key space.

00:05:00,300 --> 00:05:02,980
We'll create a table in that key space and we'll

00:05:02,980 --> 00:05:05,044
insert few empty points.

00:05:05,044 --> 00:05:10,220
The fact is the videos that we're recording today.

00:05:10,220 --> 00:05:13,590
We can just copy paste this and in

00:05:13,590 --> 00:05:17,477
CQL Shell we'll insert them one by one.

00:05:17,477 --> 00:05:20,502
And again, it doesn't know anything about Cosmos DB,

00:05:20,502 --> 00:05:22,125
it just keeps executing

00:05:22,125 --> 00:05:24,060
Cassandra query language commands.

00:05:24,060 --> 00:05:29,030
>> Is Cassandra a more SQL like or more Mongo like?

00:05:29,030 --> 00:05:32,070
>> It's neither.

00:05:32,070 --> 00:05:34,980
It's effectively a white column Family Database.

00:05:34,980 --> 00:05:39,510
So it's good at operating with the flat rows,

00:05:39,510 --> 00:05:41,825
you can have as many columns as you like.

00:05:41,825 --> 00:05:45,720
It's similar to SQL in the sense the that the schema,

00:05:45,720 --> 00:05:47,765
it's not a schemaless database,

00:05:47,765 --> 00:05:50,625
it has a schema, so tables have schemas.

00:05:50,625 --> 00:05:52,300
And ironically, Cosmos DB

00:05:52,300 --> 00:05:54,924
in this case serves you the schema,

00:05:54,924 --> 00:05:56,650
but the only thing is you can change it

00:05:56,650 --> 00:06:00,500
anytime in the back.

00:06:00,500 --> 00:06:03,890
The other thing is that we index everything

00:06:03,890 --> 00:06:05,610
so you don't have to worry about indexing.

00:06:05,610 --> 00:06:06,890
It doesn't really matter what I

00:06:06,890 --> 00:06:09,230
specify here has to be indexed,

00:06:09,230 --> 00:06:11,760
everything will get indexed.

00:06:11,760 --> 00:06:15,305
So let's go back to our Data Explorer.

00:06:15,305 --> 00:06:18,960
As we can see now we have created

00:06:18,960 --> 00:06:21,250
Azure Friday key space and videos collection

00:06:21,250 --> 00:06:24,030
and now if we click on rows,

00:06:24,030 --> 00:06:27,425
we should see the rows that gets inserted by CQL Shell.

00:06:27,425 --> 00:06:29,655
So this kind of completes the round trip,

00:06:29,655 --> 00:06:31,320
so you can work with if you

00:06:31,320 --> 00:06:34,400
prefer the graphic UI interface,

00:06:34,400 --> 00:06:35,890
you are welcome to work with

00:06:35,890 --> 00:06:37,660
your Cassandra from the Portal.

00:06:37,660 --> 00:06:40,360
We offer you a reasonable nice data explorer

00:06:40,360 --> 00:06:42,550
or you can work with your existing tools that you love

00:06:42,550 --> 00:06:44,625
and you can take any app and redirect

00:06:44,625 --> 00:06:47,625
just like we redirect to CQL Shell.

00:06:47,625 --> 00:06:49,450
You can redirect an app at

00:06:49,450 --> 00:06:52,020
Cosmos DB just by changing your connections.

00:06:52,020 --> 00:06:54,000
>> Sometimes with these databases

00:06:54,000 --> 00:06:55,191
like Mongo as an example,

00:06:55,191 --> 00:07:00,195
there are Niche or more obscure features.

00:07:00,195 --> 00:07:02,370
So when you initially came out with

00:07:02,370 --> 00:07:04,260
your Mongo support you

00:07:04,260 --> 00:07:06,980
supported like 80 percent of what Mongo supports.

00:07:06,980 --> 00:07:08,530
How does that work in the Cassandra space?

00:07:08,530 --> 00:07:11,070
Could I plug my Cassandra app in and

00:07:11,070 --> 00:07:12,360
find out that maybe there's a feature

00:07:12,360 --> 00:07:13,945
that you don't support?

00:07:13,945 --> 00:07:16,445
>> Definitely. Right now we're in preview.

00:07:16,445 --> 00:07:18,000
So we don't support

00:07:18,000 --> 00:07:19,935
certain data types which we are adding.

00:07:19,935 --> 00:07:21,900
There are certain constructs of

00:07:21,900 --> 00:07:25,835
SQL language that we don't map to.

00:07:25,835 --> 00:07:28,340
But the good news is that we've done

00:07:28,340 --> 00:07:29,675
a pretty thorough analysis of

00:07:29,675 --> 00:07:31,110
Cassandra API and there

00:07:31,110 --> 00:07:32,550
is nothing that we cannot support.

00:07:32,550 --> 00:07:35,450
In some sense it's actually easier than Mongo,

00:07:35,450 --> 00:07:38,560
because Mongo is a very sophisticated data model,

00:07:38,560 --> 00:07:42,270
the lots of features and tools.

00:07:42,270 --> 00:07:46,628
Mongo always focused on making it developer friendly.

00:07:46,628 --> 00:07:51,990
As a result, they satisfied as many OSC's as possible.

00:07:51,990 --> 00:07:53,490
>> All right. They did everything.

00:07:53,490 --> 00:07:54,600
>> With Cassandra it's optimized for

00:07:54,600 --> 00:07:57,285
Path which we are already pretty good at,

00:07:57,285 --> 00:07:59,505
the data model is much simpler.

00:07:59,505 --> 00:08:00,900
>> Cool. So it sounds like

00:08:00,900 --> 00:08:02,760
people should be using this in preview now,

00:08:02,760 --> 00:08:05,670
trying it out and seeing if their Cassandra apps

00:08:05,670 --> 00:08:07,200
work great and seeing

00:08:07,200 --> 00:08:08,640
what the performance characteristics are.

00:08:08,640 --> 00:08:11,105
>>Yep, and we'll keep working on it and then

00:08:11,105 --> 00:08:14,010
in some time we'll deliver 100 percent.

00:08:14,010 --> 00:08:15,780
>> That's fantastic and it sounds like you're

00:08:15,780 --> 00:08:18,195
pretty excited about the compatibly that you have today.

00:08:18,195 --> 00:08:21,590
>> Yes. It's a preview.

00:08:21,590 --> 00:08:24,505
It's just like when we went with Mongo,

00:08:24,505 --> 00:08:26,295
80 percent is probably an accurate number.

00:08:26,295 --> 00:08:28,491
>> Yes, that's great. And so it's in preview now.

00:08:28,491 --> 00:08:30,030
People can try it out and then as

00:08:30,030 --> 00:08:31,935
you start to have more confidence in it,

00:08:31,935 --> 00:08:34,770
you'll eventually GA, it's will to be available forever.

00:08:34,770 --> 00:08:36,390
Fantastic. All right.

00:08:36,390 --> 00:08:38,200
I'm learning all about how you can do

00:08:38,200 --> 00:08:40,358
the Cassandra database on

00:08:40,358 --> 00:08:44,438
top of Azure Cosmos DB with the new Cassandra DB APIs,

00:08:44,438 --> 00:08:46,750

YouTube URL: https://www.youtube.com/watch?v=gFxJnegGG0o


