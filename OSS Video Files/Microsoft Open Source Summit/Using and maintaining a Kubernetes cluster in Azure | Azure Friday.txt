Title: Using and maintaining a Kubernetes cluster in Azure | Azure Friday
Publication date: 2017-03-09
Playlist: Microsoft Open Source Summit
Description: 
	Brendan Burns (Partner Architect, at Microsoft & Kubernetes co-founder) returns to Azure Friday to chat with Scott Hanselman about using and maintaining a Kubernetes cluster in Azure Container Service (currently in Preview) using the Kubernetes command line tool (kubectl). Learn how to harness the public cloud http://aka.ms/Rnyrk8.
Captions: 
	00:00:00,000 --> 00:00:03,935
[MUSIC]

00:00:08,211 --> 00:00:09,874
Hi, I'm Scott Hanselman, it's Azure Friday.

00:00:09,874 --> 00:00:12,650
We're here with Brendan Burns, and we're talking about Kubernetes.

00:00:12,650 --> 00:00:15,840
We did a video before, a little 101 on creating a Kubernetes

00:00:15,840 --> 00:00:17,640
cluster with Azure Container Service.

00:00:17,640 --> 00:00:20,182
Let's dig in a little bit more and talk about how you would use and

00:00:20,182 --> 00:00:21,701
maintain certain entities on Azure.

00:00:21,701 --> 00:00:23,062
>> Sure, absolutely.

00:00:23,062 --> 00:00:26,916
So I wanna start, I have a little very simple Node.js application here

00:00:26,916 --> 00:00:28,210
in Visual Studio code.

00:00:28,210 --> 00:00:30,560
Visual Studio code has really become my go to.

00:00:30,560 --> 00:00:32,340
I'll close the terminal here.

00:00:32,340 --> 00:00:33,840
It's really become my go to editor.

00:00:33,840 --> 00:00:36,395
It's really great for a bunch of different things.

00:00:36,395 --> 00:00:37,720
>> Mm-hm.

00:00:37,720 --> 00:00:40,810
>> And I've taken this application and I built a Docker container out

00:00:40,810 --> 00:00:43,365
of it, pushed that up to the Docker hub.

00:00:43,365 --> 00:00:44,020
>> Mm-hm.

00:00:44,020 --> 00:00:45,690
>> And now I'm running it inside of Kubernetes.

00:00:45,690 --> 00:00:49,020
So if we go over here to the Kubernetes command line,

00:00:49,020 --> 00:00:51,685
I can say kubectrl get pods.

00:00:51,685 --> 00:00:53,015
So pod is that container.

00:00:53,015 --> 00:00:53,855
It's kind of a whale joke.

00:00:53,855 --> 00:00:56,725
Docker has sort of a nautical theme.

00:00:56,725 --> 00:00:58,870
So there's my, there's this container running.

00:00:58,870 --> 00:00:59,915
>> Mm-hm.

00:00:59,915 --> 00:01:05,195
>> And what I've actually done here is, I can say get services.

00:01:07,400 --> 00:01:10,670
And so what you'll see here is I have simple node service right here.

00:01:12,290 --> 00:01:16,070
And that's actually a load bouncer that is load bouncing traffic down

00:01:16,070 --> 00:01:16,950
onto that container.

00:01:16,950 --> 00:01:18,380
Now there's only one of them right now.

00:01:19,450 --> 00:01:20,650
What's also happening is,

00:01:20,650 --> 00:01:23,770
when I created that service it's actually integrated with Azure.

00:01:23,770 --> 00:01:26,900
So, it's created that external IP that you see there.

00:01:26,900 --> 00:01:28,180
That's an Azure load balancer.

00:01:28,180 --> 00:01:30,010
That's out on the pubic Internet, right?

00:01:30,010 --> 00:01:32,240
>> Is that a special Kubernetes brand, or-

00:01:32,240 --> 00:01:33,712
>> [CROSSTALK] No, Kubernetes calls

00:01:33,712 --> 00:01:36,188
into the Azure API to create that load balancer for you.

00:01:36,188 --> 00:01:38,300
So you can use the Kubernetes command line.

00:01:38,300 --> 00:01:41,150
Say, I wanna expose these pods to the Internet.

00:01:41,150 --> 00:01:43,480
Inder the hood, it'll set up the load balancer for you, and

00:01:43,480 --> 00:01:44,908
just puts it out there for you to see.

00:01:44,908 --> 00:01:48,579
So it's super easy- >> [CROSSTALK] That's a really nice

00:01:48,579 --> 00:01:51,014
example, like a piece of open source software.

00:01:51,014 --> 00:01:55,093
And Azure Cloud work well together and know about each other.

00:01:55,093 --> 00:01:58,197
>> Exactly, and it has done a really good job, and I should say we've

00:01:58,197 --> 00:02:01,480
done a bunch of work to make that integration work really seamlessly.

00:02:01,480 --> 00:02:02,351
>> Yeah, it's very seamless, yeah. >> Exactly,

00:02:02,351 --> 00:02:04,682
we don't wanna have this weird jenky,

00:02:04,682 --> 00:02:08,280
it's the Kubernetes native experience, and then the Azure, no.

00:02:08,280 --> 00:02:09,817
You want to have it be the native experience.

00:02:09,817 --> 00:02:11,220
>> Yeah, it doesn't feel bolted on.

00:02:11,220 --> 00:02:12,580
>> Exactly and it feels natural.

00:02:12,580 --> 00:02:14,143
And actually, it feels magical at some level, right?

00:02:14,143 --> 00:02:15,391
You were in this world and

00:02:15,391 --> 00:02:18,600
you didn't even know it was connected to the Azure world.

00:02:18,600 --> 00:02:20,198
And suddenly like it just it.

00:02:20,198 --> 00:02:23,680
And so if we go over there, I can take the IP address here.

00:02:26,607 --> 00:02:27,771
How about that?

00:02:30,979 --> 00:02:31,479
>> You just hit Enter.

00:02:32,650 --> 00:02:33,901
>> Yeah, I'm still learning- >> Still learning.

00:02:33,901 --> 00:02:36,096
>> I'm still learning Bash on Windows.

00:02:36,096 --> 00:02:37,260
>> Still learning on the dark side.

00:02:37,260 --> 00:02:38,480
>> Yeah.

00:02:38,480 --> 00:02:39,340
>> We'll talk later.

00:02:39,340 --> 00:02:41,590
>> All right, yeah, I'm sure I should watch more of your videos.

00:02:41,590 --> 00:02:43,790
I would learn all sorts of things.

00:02:43,790 --> 00:02:46,630
>> Yeah, anytime I can avoid using the mouse.

00:02:46,630 --> 00:02:47,450
Was it port 8000?

00:02:47,450 --> 00:02:48,573
>> Yeah, that's right.

00:02:48,573 --> 00:02:50,531
So there's the simple node service.

00:02:50,531 --> 00:02:53,350
And I think what I want you to note is this host name that's right here.

00:02:53,350 --> 00:02:54,100
>> Okay.

00:02:54,100 --> 00:02:58,028
>> And so- >> Is that a generated host name?

00:02:58,028 --> 00:02:59,225
>> That's a generated host name, right?

00:02:59,225 --> 00:03:03,994
And so what you'll see here if we go back over, let's say that, we were

00:03:03,994 --> 00:03:08,525
talking earlier about how sometimes things get busy at a service and

00:03:08,525 --> 00:03:09,810
you just scale up.

00:03:09,810 --> 00:03:12,859
Well, you can actually just say kubectl scale.

00:03:21,578 --> 00:03:24,750
All right, and so at this point I've scaled up my deployment and so now-

00:03:24,750 --> 00:03:26,173
>> Does that kick off a thing and

00:03:26,173 --> 00:03:29,149
take's like five minutes and then the thing will scale up?

00:03:29,149 --> 00:03:31,133
>> It kicks off a thing but, it doesn't take five minutes.

00:03:31,133 --> 00:03:34,760
So now if we go back over here, let's say pods and

00:03:34,760 --> 00:03:36,540
there's five of them.

00:03:36,540 --> 00:03:37,880
And you can see two of them are now running,

00:03:37,880 --> 00:03:39,680
three of them are in creation.

00:03:39,680 --> 00:03:41,310
>> If you do it again- >> So they'll do it again.

00:03:43,280 --> 00:03:44,240
Getting there hopefully.

00:03:44,240 --> 00:03:45,580
We'll keep our fingers crossed.

00:03:45,580 --> 00:03:48,190
So what's happening here is that

00:03:48,190 --> 00:03:50,750
that container's being pulled down over the network.

00:03:50,750 --> 00:03:51,960
So usually if it's slow, it's because-

00:03:51,960 --> 00:03:52,477
>> [CROSSTALK] Cuz it's

00:03:52,477 --> 00:03:53,070
coming from the docker hub.

00:03:53,070 --> 00:03:54,022
>> It's coming from the docker hub.

00:03:54,022 --> 00:03:55,723
It's coming down over the network onto those machines.

00:03:55,723 --> 00:03:56,754
>> Okay.

00:03:56,754 --> 00:03:59,488
>> So at that point, hopefully.

00:03:59,488 --> 00:04:01,230
Keep my fingers crossed.

00:04:01,230 --> 00:04:03,510
The one that came up fast I think landed on the same machine or

00:04:03,510 --> 00:04:05,132
it had already been pulled.

00:04:05,132 --> 00:04:06,827
>> Right, because I'm not thinking about the underlying

00:04:06,827 --> 00:04:07,412
virtual machine.

00:04:07,412 --> 00:04:08,533
>> Right, we're not really thinking about it.

00:04:08,533 --> 00:04:11,368
And the scheduler is responsible for spreading them out, right?

00:04:11,368 --> 00:04:14,010
Cuz you wanna make sure that if one machine fails or crashes or

00:04:14,010 --> 00:04:15,440
whatever, like- >> [CROSSTALK] That's a very good

00:04:15,440 --> 00:04:16,578
>> The load gets spread around

00:04:16,578 --> 00:04:19,211
machines that doesn't so- >> [CROSSTALK I would not want six

00:04:19,211 --> 00:04:21,470
of these or five of these on one virtual machine.

00:04:21,470 --> 00:04:23,250
>> Exactly, right? You wanna spread them out.

00:04:23,250 --> 00:04:24,140
And also because,

00:04:24,140 --> 00:04:28,380
of course, you wanna minimize the load on the processor.

00:04:28,380 --> 00:04:29,018
So now we're up to three.

00:04:29,018 --> 00:04:29,889
The other one's popped in.

00:04:29,889 --> 00:04:31,674
>> So this one is probably on another virtual machine.

00:04:31,674 --> 00:04:33,176
>> Yeah, almost certainly, and we can actually find that out.

00:04:33,176 --> 00:04:35,930
If we say -o wide, what you can see here is,

00:04:35,930 --> 00:04:38,550
there's the machines that they're on.

00:04:38,550 --> 00:04:39,832
And indeed, and now they're all running, right?

00:04:39,832 --> 00:04:41,282
>> Yeah, but they're all running, and you were right.

00:04:41,282 --> 00:04:43,723
The one that came up fast on the same virtual machine-

00:04:43,723 --> 00:04:44,483
>> Yeah, exactly, so

00:04:44,483 --> 00:04:46,011
those are on the same virtual machines.

00:04:46,011 --> 00:04:48,671
And so you can see the nodes that they're running on there.

00:04:48,671 --> 00:04:49,342
>> It's kinda nicely spread out.

00:04:49,342 --> 00:04:50,341
>> Right.

00:04:50,341 --> 00:04:52,718
>> That's amazing that you just brought up five web servers

00:04:52,718 --> 00:04:53,218
like that.

00:04:53,218 --> 00:04:55,083
>> Right, exactly, and they're, and they're spread out.

00:04:55,083 --> 00:04:57,690
And the load balancer now is talking to all of them.

00:04:57,690 --> 00:05:00,550
One of the cool things that, that you can do here is actually

00:05:00,550 --> 00:05:02,850
I can actually run a proxy for the entire API.

00:05:03,960 --> 00:05:07,100
Let's suppose that I don't actually wanna expose my service to

00:05:07,100 --> 00:05:08,730
the Internet.

00:05:08,730 --> 00:05:11,830
It's an internal service, it's not secured you know, but

00:05:11,830 --> 00:05:14,100
I need to poke at it for debugging reasons for example, right?

00:05:14,100 --> 00:05:14,960
>> Right. So I can actually

00:05:14,960 --> 00:05:17,530
say q control proxy right here.

00:05:17,530 --> 00:05:21,800
And what this is gonna do is this is gonna create a local running

00:05:21,800 --> 00:05:22,400
web server.

00:05:22,400 --> 00:05:24,730
And I can actually go up and I can start poking at it.

00:05:24,730 --> 00:05:25,790
So I can say 120.

00:05:25,790 --> 00:05:27,976
>> So you just tunneled from your local machine to-

00:05:27,976 --> 00:05:29,239
>> [CROSSTALK] Yeah, so

00:05:29,239 --> 00:05:34,380
I could say http:// 127.0.0.1/ and then I have to actually walk in.

00:05:34,380 --> 00:05:37,993
So you're gonna actually see some of the under the covers.

00:05:37,993 --> 00:05:39,119
>> Right.

00:05:39,119 --> 00:05:48,560
>> We say /api/v1/namespaces/default/services- /simple-node-

00:05:48,560 --> 00:05:50,051
>> This is a rest front end on your-

00:05:50,051 --> 00:05:50,545
>> This is a rest front end on-

00:05:50,545 --> 00:05:52,657
>> Close.

00:05:52,657 --> 00:05:55,560
>> I need port 8001 >> Okay.

00:05:58,350 --> 00:06:00,190
>> All right, so there's that same thing.

00:06:00,190 --> 00:06:01,580
Now it's tunneling through, right?

00:06:01,580 --> 00:06:03,840
Now it's not going through the public Internet.

00:06:03,840 --> 00:06:05,190
It's tunneling down to the my local machine.

00:06:05,190 --> 00:06:06,200
That means I can poke at that.

00:06:06,200 --> 00:06:07,990
I can debug it for my local machine.

00:06:07,990 --> 00:06:11,780
I could even set up run my client code on my local machine.

00:06:11,780 --> 00:06:15,100
Connect through that proxy without having to worry about the security

00:06:15,100 --> 00:06:17,260
of putting it on the public Internet.

00:06:17,260 --> 00:06:20,350
And indeed, if you hit refresh a few times,

00:06:20,350 --> 00:06:22,310
you'll see that that host name is changing, right?

00:06:22,310 --> 00:06:27,780
We're moving between the various replicas in that service, right?

00:06:27,780 --> 00:06:29,268
>> Wow. >> So that's the load balancer going

00:06:29,268 --> 00:06:31,445
across all of the different replicas that we created.

00:06:31,445 --> 00:06:33,895
>> So when you have this kind of control and this kind of speed,

00:06:33,895 --> 00:06:36,296
when I can bring up five of something in less than a minute,

00:06:36,296 --> 00:06:38,958
does, it really is up to me as the architect of the application.

00:06:38,958 --> 00:06:43,267
Like if we talk about the example in the previous introduction video,

00:06:43,267 --> 00:06:46,550
I had a product service and a shopping cart service.

00:06:46,550 --> 00:06:47,400
That might be enough.

00:06:47,400 --> 00:06:49,710
>> Right. >> But I could really go microservices

00:06:49,710 --> 00:06:50,060
>> Yeah.

00:06:50,060 --> 00:06:51,665
>> Off could be a thing and image serving-

00:06:51,665 --> 00:06:52,871
>> Exactly, yeah, yeah, yeah.

00:06:52,871 --> 00:06:53,607
>> It's totally up to me, right?

00:06:53,607 --> 00:06:54,612
>> Exactly, definitely.

00:06:54,612 --> 00:06:57,022
And I think the other thing you'll find is that over time you'll figure

00:06:57,022 --> 00:06:58,800
out where the boundaries should've been, right?

00:06:58,800 --> 00:06:59,629
And you'll split things apart, right?

00:06:59,629 --> 00:07:00,383
>> Mm-hm.

00:07:00,383 --> 00:07:02,722
>> It's kinda like the old analogy of not paving the sidewalks and

00:07:02,722 --> 00:07:04,215
just waiting to see where people walk.

00:07:04,215 --> 00:07:05,886
>> Mm-hm. >> Like over time you'll see how you

00:07:05,886 --> 00:07:08,440
should split your service apart, and I think that's what we see.

00:07:08,440 --> 00:07:09,390
You maybe start with two, and

00:07:09,390 --> 00:07:11,960
then you realize that that one piece really should be two pieces.

00:07:11,960 --> 00:07:14,230
You break it apart, you have three services, so on and so forth.

00:07:14,230 --> 00:07:15,770
>> But if changing it takes a minute.

00:07:15,770 --> 00:07:18,340
>> Exactly, no, exactly, and you can iterate through that change, right?

00:07:18,340 --> 00:07:20,946
So you don't have to just destroy a bunch of machines and

00:07:20,946 --> 00:07:23,730
create a bunch of machines in order to create the new thing.

00:07:23,730 --> 00:07:27,150
You can sort of slowly bring up the pieces that you need on the service.

00:07:27,150 --> 00:07:28,510
>> So I have two questions.

00:07:28,510 --> 00:07:32,264
>> Sure. >> How do I know how many machines

00:07:32,264 --> 00:07:33,462
I needed?

00:07:33,462 --> 00:07:36,929
How do I know if my thousand containers have filled up those

00:07:36,929 --> 00:07:37,650
machines?

00:07:37,650 --> 00:07:38,500
So I guess I'm wondering

00:07:38,500 --> 00:07:41,090
how do the containers know when I need more containers?

00:07:41,090 --> 00:07:44,170
And how does the ground beneath them know that there's not enough ground?

00:07:44,170 --> 00:07:45,950
>> Yeah, so we can actually say there's a command here,

00:07:45,950 --> 00:07:47,748
we can say cube control top.

00:07:47,748 --> 00:07:51,100
What was that?

00:07:51,100 --> 00:07:54,246
This shows we can say cube control top node.

00:07:54,246 --> 00:07:56,269
And what this is gonna do is, this is actually gonna tell us.

00:07:56,269 --> 00:08:00,860
This is how much CPU, we're only using 2% of the CPU right now.

00:08:00,860 --> 00:08:02,031
This is how memory.

00:08:02,031 --> 00:08:03,935
We're using 21% of the memory over here.

00:08:03,935 --> 00:08:07,723
So this actually gives us exactly that view of what's the overall,

00:08:07,723 --> 00:08:11,184
if I'm a cluster administrator, what's the overall need?

00:08:11,184 --> 00:08:14,682
Cuz I think we really think that those two roles are gonna become

00:08:14,682 --> 00:08:15,350
separate.

00:08:15,350 --> 00:08:16,811
Where there's a person who's responsible or

00:08:16,811 --> 00:08:18,500
maintaining your Kubernetes cluster.

00:08:18,500 --> 00:08:21,170
And there are application developers who are deploying applications

00:08:21,170 --> 00:08:23,280
onto that cluster If you're a cluster administrator,

00:08:23,280 --> 00:08:24,330
you don't care about the apps.

00:08:24,330 --> 00:08:25,746
You just focus on how full the machines are and

00:08:25,746 --> 00:08:26,757
if you need to add a new machine.

00:08:26,757 --> 00:08:29,250
You slap a new machine down.

00:08:29,250 --> 00:08:30,340
And eventually,

00:08:30,340 --> 00:08:32,750
it's gonna be something where it's auto scale, right?

00:08:32,750 --> 00:08:37,090
>> So you showed me in Azure the way you made all those different virtual machines-

00:08:37,090 --> 00:08:37,520
>> Right.

00:08:37,520 --> 00:08:39,497
>> But you made them all at once, you created a template.

00:08:39,497 --> 00:08:41,076
I can add additional ones?

00:08:41,076 --> 00:08:41,896
>> Absolutely, yeah. >> Or I can append them.

00:08:41,896 --> 00:08:44,668
>> Exactly, so you using the same Azure command line,

00:08:44,668 --> 00:08:48,133
you can scale up the cluster if you need to add any new resources cuz

00:08:48,133 --> 00:08:50,115
hopefully your service is growing.

00:08:50,115 --> 00:08:50,710
>> Mm-hm.

00:08:50,710 --> 00:08:51,520
>> Exactly.

00:08:51,520 --> 00:08:55,890
>> And this is telling me, each of these are virtual machines?

00:08:55,890 --> 00:08:56,400
>> Correct.

00:08:56,400 --> 00:08:58,210
Yeah, so this is telling you the overall usage of

00:08:58,210 --> 00:08:58,820
the virtual machine.

00:08:58,820 --> 00:09:02,914
Now I can actually flip around and I can say top pod.

00:09:02,914 --> 00:09:04,985
So those were machines.

00:09:04,985 --> 00:09:06,107
Now these are the containers.

00:09:06,107 --> 00:09:08,050
And it's telling us how much.

00:09:08,050 --> 00:09:10,040
We're not hitting that web server with any load, so

00:09:10,040 --> 00:09:11,500
it's not using any CPU really right now.

00:09:11,500 --> 00:09:12,323
>> Right. >> And that's real time, right?

00:09:12,323 --> 00:09:13,770
It's not- >> So here's maybe a little bit of

00:09:13,770 --> 00:09:15,570
overhead, they were kinda chilling.

00:09:15,570 --> 00:09:16,490
>> Yeah. >> And really,

00:09:16,490 --> 00:09:18,210
the node thing's doing nothing, clearly.

00:09:18,210 --> 00:09:20,370
>> Yeah, so this node CPU,

00:09:20,370 --> 00:09:23,360
there are things that are running that service the cluster, right?

00:09:23,360 --> 00:09:25,745
That make sure these things are healthy and [INAUDIBLE] that's-

00:09:25,745 --> 00:09:26,361
>> [CROSSTALK] And

00:09:26,361 --> 00:09:28,874
that's why these numbers don't represent the Node app,

00:09:28,874 --> 00:09:29,753
these tiny ones do.

00:09:29,753 --> 00:09:30,695
>> Yeah, exactly, right.

00:09:30,695 --> 00:09:31,646
So that's right, that's right.

00:09:31,646 --> 00:09:36,231
>> And then this is running what operating system underneath?

00:09:36,231 --> 00:09:38,166
Is it offline or- >> [CROSSTALK] This is running,

00:09:38,166 --> 00:09:39,119
inside those containers?

00:09:39,119 --> 00:09:40,069
>> Yes.

00:09:40,069 --> 00:09:41,805
>> I don't actually know.

00:09:41,805 --> 00:09:43,381
>> The docker file, what's that from?

00:09:43,381 --> 00:09:47,216
>> It's from NodeJS.

00:09:47,216 --> 00:09:48,881
[CROSSTALK] >> That's great, whatever.

00:09:48,881 --> 00:09:49,961
I don't care about OS.

00:09:49,961 --> 00:09:50,870
I just need node.

00:09:50,870 --> 00:09:53,150
I don't think about necessarily the OS that's going on.

00:09:53,150 --> 00:09:53,760
>> That's cool.

00:09:53,760 --> 00:09:57,610
That also makes me feel like I could go and do that in a core?

00:09:57,610 --> 00:09:58,440
>> Yes. Absolutely.

00:09:58,440 --> 00:10:00,520
>> On a node and mix and match.

00:10:00,520 --> 00:10:02,920
One of my services could be in one language, one could be the other.

00:10:02,920 --> 00:10:03,420
>> Absolutely.

00:10:03,420 --> 00:10:06,290
Even in an operating system you could have say, that Python one,

00:10:06,290 --> 00:10:08,140
maybe it came from Redhat.

00:10:08,140 --> 00:10:10,910
Maybe the node JS one is on top of the Bunto.

00:10:10,910 --> 00:10:14,290
With Golang binaries, you don't even have really a OS image there,

00:10:14,290 --> 00:10:15,870
it's just a scratch disk, right?

00:10:15,870 --> 00:10:16,660
>> Yeah, yeah, yeah.

00:10:16,660 --> 00:10:17,510
>> But yeah, you don't care right?

00:10:17,510 --> 00:10:19,060
You're focusing on the application.

00:10:19,060 --> 00:10:20,310
>> That's fantastic.

00:10:20,310 --> 00:10:21,460
So where do you see this going?

00:10:21,460 --> 00:10:23,760
How big can we possibly scale?

00:10:23,760 --> 00:10:27,816
>> Well so right now, some of the biggest clusters I've heard are at

00:10:27,816 --> 00:10:32,625
in the 5,000 node range, which is probably more than most people need.

00:10:32,625 --> 00:10:35,645
And that's sort of per region, right?

00:10:35,645 --> 00:10:37,649
So there's actually also a notion of federation.

00:10:37,649 --> 00:10:40,790
So you deploy a cluster in US West, you deploy a cluster is US East.

00:10:40,790 --> 00:10:44,600
You can actually kind of a sort of uber cluster that sits on top,

00:10:44,600 --> 00:10:46,820
that allows you to administer both, right?

00:10:46,820 --> 00:10:49,330
And will spread work between those two clusters.

00:10:49,330 --> 00:10:51,380
>> Is this in Preview, or can people use this right now?

00:10:51,380 --> 00:10:52,370
>> People can use this right now.

00:10:52,370 --> 00:10:53,234
It is in preview.

00:10:53,234 --> 00:10:55,300
The Kubernete's part is in preview.

00:10:55,300 --> 00:10:57,790
Azure container service itself is GA.

00:10:57,790 --> 00:11:00,510
But we just launched the Kubernete's part.

00:11:00,510 --> 00:11:02,127
We need to give a little bit of a soak.

00:11:02,127 --> 00:11:05,230
But I anticipate it going to GA pretty soon.

00:11:05,230 --> 00:11:06,630
>> Very cool. Thanks so much for your time.

00:11:06,630 --> 00:11:07,390
>> Yeah, no problem at all.

00:11:07,390 --> 00:11:08,690
Thank you. >> We're learning all about

00:11:08,690 --> 00:11:09,740
Kubernetes and containers and

00:11:09,740 --> 00:11:12,030
Azure container service, here on Azure Friday.

00:11:12,030 --> 00:11:16,646

YouTube URL: https://www.youtube.com/watch?v=a-uTuwGrLu0


