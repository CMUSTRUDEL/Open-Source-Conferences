Title: Azure Friday | Container-native developer experiences, Part 2 - Draft
Publication date: 2018-02-09
Playlist: Microsoft Open Source Summit
Description: 
	Join Donovan Brown & Ralph Squillace to learn how to use Draft to kick start container-native development for Kubernetes applications. Draft lets you concentrate on your service code by removing the containment and service composition from most development work, which increases the speed of service development and improves the consistency of Dockerfiles & Helm charts.

Draft - Streamlined Kubernetes Development: https://draft.sh/
Helm - The package manager for Kubernetes: https://helm.sh/
Azure/draft on GitHub: https://github.com/azure/draft
Captions: 
	00:00:00,000 --> 00:00:03,610
>> Hi, I'm Donovan with another episode of Azure Friday.

00:00:03,610 --> 00:00:05,660
I'm here with Ralph in the second part of

00:00:05,660 --> 00:00:06,920
a three-part series on

00:00:06,920 --> 00:00:09,095
container native developer experiences.

00:00:09,095 --> 00:00:11,390
In this part, we're going to be talking all about Draft.

00:00:11,390 --> 00:00:12,500
Welcome back to the show.

00:00:12,500 --> 00:00:13,400
>> Thanks very much.

00:00:13,400 --> 00:00:16,250
>> So, let's recap really quick, what is Draft?

00:00:16,250 --> 00:00:19,490
>> Draft is a tool that you can use on any platform,

00:00:19,490 --> 00:00:21,830
it's open source completely provided by

00:00:21,830 --> 00:00:24,610
the Microsoft developers that work on my teams.

00:00:24,610 --> 00:00:24,797
>> Okay.

00:00:24,797 --> 00:00:27,005
>> That land container-native

00:00:27,005 --> 00:00:29,525
iterative development in Kubernetes.

00:00:29,525 --> 00:00:31,145
And what that sort of means is that,

00:00:31,145 --> 00:00:32,450
it helps you as

00:00:32,450 --> 00:00:34,520
a developer get out of just writing native code,

00:00:34,520 --> 00:00:35,900
and then turning your attention to

00:00:35,900 --> 00:00:38,060
figuring out how to write a Docker file,

00:00:38,060 --> 00:00:40,370
and even more complex in many cases,

00:00:40,370 --> 00:00:42,560
how to configure all your containers

00:00:42,560 --> 00:00:45,020
into a logical service using a Helm chart, for example.

00:00:45,020 --> 00:00:47,270
>> Got it, got it. Okay so,

00:00:47,270 --> 00:00:48,450
why don't you show me how it works.

00:00:48,450 --> 00:00:49,250
Let's just jump right into it.

00:00:49,250 --> 00:00:51,660
>> Sure. No problem. We are on

00:00:51,660 --> 00:00:55,015
Ubuntu over here and we're going to be using a Ruby app,

00:00:55,015 --> 00:00:56,326
it's a very simple Ruby app,

00:00:56,326 --> 00:00:57,825
and we're in VS Code.

00:00:57,825 --> 00:01:00,700
So this is very familiar and lots of people use it,

00:01:00,700 --> 00:01:01,970
no matter where you are,

00:01:01,970 --> 00:01:03,980
no matter which operating system you are.

00:01:03,980 --> 00:01:06,080
So, what you do in this case,

00:01:06,080 --> 00:01:08,980
we're going to test to make sure Draft is installed.

00:01:08,980 --> 00:01:10,130
You do that very simply.

00:01:10,130 --> 00:01:14,150
We're pointing at our minikube, local Kubernetes cluster.

00:01:14,150 --> 00:01:16,130
>> So how does Draft know that we're doing that?

00:01:16,130 --> 00:01:18,845
>> Because when you install Draft originally,

00:01:18,845 --> 00:01:20,600
you install Draft after

00:01:20,600 --> 00:01:23,020
downloading it by typing, "draft init"

00:01:23,020 --> 00:01:23,220
>> Okay.

00:01:23,220 --> 00:01:24,800
>> And it goes and discovers

00:01:24,800 --> 00:01:27,350
your Kube config that you're currently pointing at.

00:01:27,350 --> 00:01:27,860
>> Got it.

00:01:27,860 --> 00:01:29,300
>> In this case, I was pointing

00:01:29,300 --> 00:01:31,125
at my minikube because I just started it.

00:01:31,125 --> 00:01:32,435
>> Got it. Okay, so,

00:01:32,435 --> 00:01:34,750
Draft assumes that you're using Kubernetes,

00:01:34,750 --> 00:01:36,495
so, therefore, it's smart enough to say,

00:01:36,495 --> 00:01:38,165
I know that I'm going to go look for

00:01:38,165 --> 00:01:39,590
your config file and in there's going to

00:01:39,590 --> 00:01:40,970
be all the information I need to know which cluster I'm

00:01:40,970 --> 00:01:42,560
supposed to be doing all my work against.

00:01:42,560 --> 00:01:43,160
>> That's right.

00:01:43,160 --> 00:01:43,950
>> Got it. Okay, perfect.

00:01:43,950 --> 00:01:46,370
>> And it does have one dependency because of course,

00:01:46,370 --> 00:01:48,530
it's a toolchain in the open source world.

00:01:48,530 --> 00:01:50,630
The dependency is Helm, which is commonly

00:01:50,630 --> 00:01:52,970
used for deployments in Kubernetes anyway.

00:01:52,970 --> 00:01:53,390
>> Right.

00:01:53,390 --> 00:01:55,010
>> So if it detects that Helm isn't there,

00:01:55,010 --> 00:01:56,930
it will go ahead and let you install it first and

00:01:56,930 --> 00:01:59,100
then it will work fine when it gets installed.

00:01:59,100 --> 00:02:00,440
>> Right. In the first show, we talked about

00:02:00,440 --> 00:02:01,850
Helm being an easier way to

00:02:01,850 --> 00:02:03,100
build the configuration file

00:02:03,100 --> 00:02:04,640
necessary to deploy into Kubernetes.

00:02:04,640 --> 00:02:06,740
>> That's right. In fact, this time we're going to build

00:02:06,740 --> 00:02:08,480
our application here using

00:02:08,480 --> 00:02:09,740
Draft and I'm going to show

00:02:09,740 --> 00:02:11,090
you all those artifacts it creates.

00:02:11,090 --> 00:02:11,390
>> Oh, great.

00:02:11,390 --> 00:02:13,280
>> Okay? So, we just do,

00:02:13,280 --> 00:02:16,010
"Draft create" in this case,

00:02:16,010 --> 00:02:17,870
and it already detects, it uses

00:02:17,870 --> 00:02:19,310
the Github linguist library to

00:02:19,310 --> 00:02:21,485
decide exactly what kind of app you have.

00:02:21,485 --> 00:02:23,000
It detected that were running

00:02:23,000 --> 00:02:25,635
a Ruby app and it said, "ready to sail."

00:02:25,635 --> 00:02:26,780
Interestingly, you notice that

00:02:26,780 --> 00:02:28,515
we got a few more files here.

00:02:28,515 --> 00:02:30,305
We didn't do anything about containment,

00:02:30,305 --> 00:02:32,570
but we know that a very simple Ruby app is going to

00:02:32,570 --> 00:02:34,738
be a web front end in some sort,

00:02:34,738 --> 00:02:37,370
and so we've given you an example Docker file

00:02:37,370 --> 00:02:40,310
that builds that app as a container already.

00:02:40,310 --> 00:02:40,990
>> Got it.

00:02:40,990 --> 00:02:42,995
>> If you know something special about

00:02:42,995 --> 00:02:44,690
your application you can use

00:02:44,690 --> 00:02:46,590
this artifact as a starter container.

00:02:46,590 --> 00:02:46,950
>> Okay.

00:02:46,950 --> 00:02:48,830
>> Right? And elaborate

00:02:48,830 --> 00:02:50,420
some other environment variables or

00:02:50,420 --> 00:02:52,115
some other stages that you wish to do.

00:02:52,115 --> 00:02:53,300
>> Well, let me ask you a quick question.

00:02:53,300 --> 00:02:54,920
So I see the Docker file that it created.

00:02:54,920 --> 00:02:56,900
I know enough about Docker to be dangerous and

00:02:56,900 --> 00:02:58,886
I would have already built my own Dockerfiles,

00:02:58,886 --> 00:03:00,435
what if I don't want you,

00:03:00,435 --> 00:03:02,465
whenever I call "Draft create",

00:03:02,465 --> 00:03:04,100
I don't want you to use this Docker file.

00:03:04,100 --> 00:03:05,690
How do I enable it to?

00:03:05,690 --> 00:03:06,950
>> We've got the answer for

00:03:06,950 --> 00:03:08,060
you. But you're jumping ahead.

00:03:08,060 --> 00:03:08,230
>> Oh okay.

00:03:08,230 --> 00:03:09,410
>> Let's show this first.

00:03:09,410 --> 00:03:09,770
>> Awesome.

00:03:09,770 --> 00:03:11,750
>> And also the Helm chart because then we can

00:03:11,750 --> 00:03:14,180
pick this step and answer your question more completely.

00:03:14,180 --> 00:03:14,530
>> Cool.

00:03:14,530 --> 00:03:16,430
>> So, the other thing that it does,

00:03:16,430 --> 00:03:17,840
we did containment for you,

00:03:17,840 --> 00:03:21,020
but we also did service composition.

00:03:21,020 --> 00:03:21,157
>> Okay.

00:03:21,157 --> 00:03:23,540
>> In this case, a Helm chart we dropped in.

00:03:23,540 --> 00:03:25,220
And in this case, a Helm chart allows you

00:03:25,220 --> 00:03:27,260
to decide how many replicas you want.

00:03:27,260 --> 00:03:29,480
For example, in some basic statements

00:03:29,480 --> 00:03:31,910
about the execution environment here,

00:03:31,910 --> 00:03:34,280
we want to say the external port should be 80,

00:03:34,280 --> 00:03:36,217
and the internal port should be 3,000,

00:03:36,217 --> 00:03:37,670
and Kubernetes knows how to

00:03:37,670 --> 00:03:40,100
understand this and make it happen when it deploys.

00:03:40,100 --> 00:03:40,410
>> Okay.

00:03:40,410 --> 00:03:42,500
>> So, here we've got our artifacts

00:03:42,500 --> 00:03:44,900
and we didn't really have to know much about it.

00:03:44,900 --> 00:03:47,360
We can use them, elaborate on them,

00:03:47,360 --> 00:03:49,250
or we can actually give them to somebody else who really

00:03:49,250 --> 00:03:51,560
does know something and let them do that work for us,

00:03:51,560 --> 00:03:53,110
so we can concentrate on the application.

00:03:53,110 --> 00:03:53,690
>> Perfect.

00:03:53,690 --> 00:03:56,925
>> So if we do that, the way to get it up by trying

00:03:56,925 --> 00:04:00,575
not to change the actual count, we do,

00:04:00,575 --> 00:04:02,390
"Draft up" because we've created

00:04:02,390 --> 00:04:04,475
the artifacts and all we do

00:04:04,475 --> 00:04:07,160
is immediately take the Kube cluster

00:04:07,160 --> 00:04:08,894
that we happen to be pointing at,

00:04:08,894 --> 00:04:10,610
we take the application and

00:04:10,610 --> 00:04:13,460
the containment and service composition artifacts,

00:04:13,460 --> 00:04:15,347
and we give it to the Draft d,

00:04:15,347 --> 00:04:17,420
the service side component in the cluster.

00:04:17,420 --> 00:04:19,070
>> And what it's going to do now is

00:04:19,070 --> 00:04:20,915
build the image inside

00:04:20,915 --> 00:04:23,170
of the Draft instance

00:04:23,170 --> 00:04:24,530
that's running instead of my cluster.

00:04:24,530 --> 00:04:27,015
>> That's right. Draft d is the name of the service.

00:04:27,015 --> 00:04:28,820
>> Okay and then it's going then to push it to

00:04:28,820 --> 00:04:31,085
a registry which it looks like it's doing right now.

00:04:31,085 --> 00:04:33,260
And then after it's pushed to the registry,

00:04:33,260 --> 00:04:34,970
it can then deploy from the registry into

00:04:34,970 --> 00:04:36,775
the " my actual cluster" and run it.

00:04:36,775 --> 00:04:38,610
>> And in this case, it's the same cluster

00:04:38,610 --> 00:04:40,300
and it will be mini Kube.

00:04:40,300 --> 00:04:40,452
>> Got it.

00:04:40,452 --> 00:04:41,660
>> So we built the image,

00:04:41,660 --> 00:04:43,505
that didn't take too long,19 seconds,

00:04:43,505 --> 00:04:45,500
it'll build faster as you iterate.

00:04:45,500 --> 00:04:45,704
>> Right.

00:04:45,704 --> 00:04:47,240
>> Obviously, we just push the Docker image

00:04:47,240 --> 00:04:48,685
to a local cluster.

00:04:48,685 --> 00:04:50,060
Now, what we do want to do,

00:04:50,060 --> 00:04:52,145
is we want to see if there's anything running yet

00:04:52,145 --> 00:04:53,420
because of course containers take

00:04:53,420 --> 00:04:54,840
just a second to come up.

00:04:54,840 --> 00:04:55,230
>> Sure.

00:04:55,230 --> 00:04:56,525
>> So if we do that we do that,

00:04:56,525 --> 00:04:58,277
" K get po ",

00:04:58,277 --> 00:05:00,290
K is an alias for Kube control here.

00:05:00,290 --> 00:05:01,060
>> Oh, I see.

00:05:01,060 --> 00:05:03,130
>> You notice we don't really use Kube control.

00:05:03,130 --> 00:05:04,540
>> I was going to ask that because I

00:05:04,540 --> 00:05:06,365
remember when I first started learning Kubernetes,

00:05:06,365 --> 00:05:07,600
that's all I was typing was

00:05:07,600 --> 00:05:09,025
Kube control but you haven't done that yet.

00:05:09,025 --> 00:05:11,615
So, who's taking care of all that stuff for us?

00:05:11,615 --> 00:05:12,670
>> In fact, we're only using

00:05:12,670 --> 00:05:13,990
Kube control here just to make sure

00:05:13,990 --> 00:05:15,070
that the containers actually

00:05:15,070 --> 00:05:16,330
started properly and so forth,

00:05:16,330 --> 00:05:17,950
and when it looks like they're almost there.

00:05:17,950 --> 00:05:20,200
And when they are, we'll actually use

00:05:20,200 --> 00:05:23,395
them to make sure the application is running correctly.

00:05:23,395 --> 00:05:26,625
But generally speaking, Draft collaborates with

00:05:26,625 --> 00:05:28,210
Draft D and Helm in

00:05:28,210 --> 00:05:30,070
the cluster to do the deployment for you.

00:05:30,070 --> 00:05:32,200
And so, you don't need to use Kube control.

00:05:32,200 --> 00:05:32,740
>> Got it.

00:05:32,740 --> 00:05:34,540
>> It does not even have to

00:05:34,540 --> 00:05:36,460
be on your system in any way, shape or form.

00:05:36,460 --> 00:05:38,340
You just need the Kube config file.

00:05:38,340 --> 00:05:41,545
>> Got it. So, with a "Draft create" and a "Draft up",

00:05:41,545 --> 00:05:42,970
I now have taken what was

00:05:42,970 --> 00:05:44,890
a native application and containerized that app.

00:05:44,890 --> 00:05:46,260
>>That's right. That's right.

00:05:46,260 --> 00:05:49,314
>> But this is just running locally on my machine,

00:05:49,314 --> 00:05:51,340
this is not where the app is going to finally run.

00:05:51,340 --> 00:05:52,705
How do I then take the app

00:05:52,705 --> 00:05:55,750
from here and get it into a real cluster?

00:05:55,750 --> 00:05:57,640
>> Well, first you've got to make sure you can see it.

00:05:57,640 --> 00:05:58,957
>> Right. So, that looks like it.

00:05:58,957 --> 00:06:00,610
>> So use "Draft connect" and

00:06:00,610 --> 00:06:03,130
that'll create another tunnel.

00:06:03,130 --> 00:06:04,180
As we said before,

00:06:04,180 --> 00:06:06,160
the invisible RDP Session.

00:06:06,160 --> 00:06:06,509
>> Got it.

00:06:06,509 --> 00:06:09,250
>> Right? And you grab the local host and

00:06:09,250 --> 00:06:14,430
the port and you'll jump over to your Chrome,

00:06:14,850 --> 00:06:18,530
or your Vivaldi, or your and Opera and,

00:06:18,530 --> 00:06:20,651
" Hello World, I'm Ruby!", is there.

00:06:20,651 --> 00:06:21,345
>> Perfect.

00:06:21,345 --> 00:06:23,210
>> Right? So, you know it's running and it's also

00:06:23,210 --> 00:06:26,120
not running natively, it's running contained.

00:06:26,120 --> 00:06:26,600
>> Correct.

00:06:26,600 --> 00:06:28,590
>> And it's deployed in a cluster.

00:06:28,590 --> 00:06:29,990
And so you know that these

00:06:29,990 --> 00:06:31,830
container and cluster artifacts,

00:06:31,830 --> 00:06:34,400
that service composition artifacts, they work.

00:06:34,400 --> 00:06:34,680
>> Right.

00:06:34,680 --> 00:06:38,360
>> So now, you can push these into CICD workflow.

00:06:38,360 --> 00:06:40,310
>> Because now that I've seen that image work here,

00:06:40,310 --> 00:06:41,840
I know that image should work everywhere.

00:06:41,840 --> 00:06:42,110
>>That's right.

00:06:42,110 --> 00:06:42,890
>> That's the beauty of it.

00:06:42,890 --> 00:06:44,615
>> And so let's try it, let's test that out.

00:06:44,615 --> 00:06:46,160
Okay? Okay, so I've got,

00:06:46,160 --> 00:06:47,730
this is an alias for Kube,

00:06:47,730 --> 00:06:49,605
for looking up your Kube context.

00:06:49,605 --> 00:06:51,560
Right? And I've got a few and you can see

00:06:51,560 --> 00:06:53,410
that I'm in minikube right now.

00:06:53,410 --> 00:06:53,730
>> Okay.

00:06:53,730 --> 00:06:55,550
>> But let's go to "AKS east " and

00:06:55,550 --> 00:06:57,410
I do that on this machine with

00:06:57,410 --> 00:07:02,130
"kx AKS east" and I've switched to "AKS east",

00:07:02,130 --> 00:07:05,325
and if I do, " k get po now."

00:07:05,325 --> 00:07:07,025
There's nothing in that cluster.

00:07:07,025 --> 00:07:10,445
It's a brand new cluster. And is Draft installed?

00:07:10,445 --> 00:07:12,905
I can find out by doing Draft version.

00:07:12,905 --> 00:07:14,910
Says yes, there's on

00:07:14,910 --> 00:07:16,920
the client and the server and I've got the same version.

00:07:16,920 --> 00:07:18,370
So, I'm in great shape here.

00:07:18,370 --> 00:07:19,530
>> So, for those of us who don't know

00:07:19,530 --> 00:07:20,820
what AKS stands for.

00:07:20,820 --> 00:07:23,880
>> AKS is the managed Kubernetes service in Azure.

00:07:23,880 --> 00:07:24,390
>> Perfect.

00:07:24,390 --> 00:07:26,070
>> And it's a great way to

00:07:26,070 --> 00:07:28,245
move from a fully managed solution

00:07:28,245 --> 00:07:30,660
because Kubernetes is relatively recent and most people

00:07:30,660 --> 00:07:32,520
early on had been building their own clusters.

00:07:32,520 --> 00:07:33,291
>> Right.

00:07:33,291 --> 00:07:34,740
>> Or in using, for example,

00:07:34,740 --> 00:07:37,260
ACS engine in Azure which literally uses

00:07:37,260 --> 00:07:40,340
ARM resources collectively to build your own cluster.

00:07:40,340 --> 00:07:41,840
But you manage the entire cluster.

00:07:41,840 --> 00:07:42,180
>> Sure.

00:07:42,180 --> 00:07:46,020
>> Right? And so the AKS service is where we,

00:07:46,020 --> 00:07:48,300
Azure platform, offers you the services

00:07:48,300 --> 00:07:51,460
managing your master nodes in your cluster.

00:07:51,460 --> 00:07:51,624
>> Got it.

00:07:51,624 --> 00:07:53,785
>> And that means you actually trust us.

00:07:53,785 --> 00:07:55,680
We give you the features to upgrade,

00:07:55,680 --> 00:07:56,865
to scale in, scale out.

00:07:56,865 --> 00:07:59,550
All those things you would normally do with the Masters,

00:07:59,550 --> 00:08:02,070
we'll handle for you and give you an SLA on that.

00:08:02,070 --> 00:08:02,449
>> Nice.

00:08:02,449 --> 00:08:05,410
>> It's in preview now and will go GA relatively soon.

00:08:05,410 --> 00:08:06,630
>> So, that's just one less thing

00:08:06,630 --> 00:08:07,440
for me to have to worry about?

00:08:07,440 --> 00:08:08,060
>> Absolutely.

00:08:08,060 --> 00:08:09,930
And you can concentrate on your applications,

00:08:09,930 --> 00:08:11,310
in your operations, which is

00:08:11,310 --> 00:08:12,750
what you really want to do anyway.

00:08:12,750 --> 00:08:13,110
>> Got it. Okay.

00:08:13,110 --> 00:08:14,515
>> So, we've got this all,

00:08:14,515 --> 00:08:15,870
we've got the same artifacts

00:08:15,870 --> 00:08:17,700
going on and we're pointing at a different cluster.

00:08:17,700 --> 00:08:18,720
Let's just do the same thing

00:08:18,720 --> 00:08:20,145
and point to a different cluster.

00:08:20,145 --> 00:08:22,290
>> Got it. So, we switched

00:08:22,290 --> 00:08:23,490
from our mini Kube

00:08:23,490 --> 00:08:24,960
to the actual cluster we are gong to run in.

00:08:24,960 --> 00:08:25,200
>> Yes.

00:08:25,200 --> 00:08:26,790
>> You verify that it's not there

00:08:26,790 --> 00:08:28,680
currently because when we try to access it,

00:08:28,680 --> 00:08:29,970
it said no resources found.

00:08:29,970 --> 00:08:30,330
>> That's right.

00:08:30,330 --> 00:08:31,170
>> And now, what we're doing is we're

00:08:31,170 --> 00:08:32,280
building the image again but

00:08:32,280 --> 00:08:33,720
this image is now going to be pushed

00:08:33,720 --> 00:08:35,310
to a different registry.

00:08:35,310 --> 00:08:36,671
>> A different registry.

00:08:36,671 --> 00:08:38,610
In this case, I've already created

00:08:38,610 --> 00:08:40,980
one install Draft into this cluster.

00:08:40,980 --> 00:08:42,630
I gave it the credentials to use

00:08:42,630 --> 00:08:44,415
the Azure container registry.

00:08:44,415 --> 00:08:46,875
>> Okay. So, we stood up our own registry in Azure,

00:08:46,875 --> 00:08:49,050
and we've configured the Draft that's running inside of

00:08:49,050 --> 00:08:51,000
our real cluster to be able to authenticate

00:08:51,000 --> 00:08:51,840
against that register and

00:08:51,840 --> 00:08:53,040
push and pull images from there.

00:08:53,040 --> 00:08:53,520
>> That's right.

00:08:53,520 --> 00:08:56,065
>> Got it. So, once this image is built,

00:08:56,065 --> 00:08:57,270
we're then going to push it into

00:08:57,270 --> 00:09:00,305
ACR and then from ACR into our AKS.

00:09:00,305 --> 00:09:00,640
>> That's right.

00:09:00,640 --> 00:09:00,960
>> All right.

00:09:00,960 --> 00:09:02,550
>> And this took a little bit more

00:09:02,550 --> 00:09:04,195
because we had to pull it for the first time,

00:09:04,195 --> 00:09:06,320
the image and so forth, but not too long.

00:09:06,320 --> 00:09:08,460
And now we're pushing the image into ACR.

00:09:08,460 --> 00:09:10,950
>> Got it. Right. Of course, because you have to download

00:09:10,950 --> 00:09:12,450
all the different layers

00:09:12,450 --> 00:09:13,860
and once you have them cached, it's faster.

00:09:13,860 --> 00:09:14,886
And obviously, we haven't cached in

00:09:14,886 --> 00:09:16,590
our local machine because we've been doing development.

00:09:16,590 --> 00:09:18,530
In here, it still didn't take quite that long.

00:09:18,530 --> 00:09:18,800
>> No.

00:09:18,800 --> 00:09:19,890
>> So now, we still have to go back and

00:09:19,890 --> 00:09:21,325
confirm that this is actually running again.

00:09:21,325 --> 00:09:26,035
>> That's right. And you'd do the same commands.

00:09:26,035 --> 00:09:29,395
You can connect it to your app, grab.

00:09:29,395 --> 00:09:32,365
We've created the invisible RDP tunnel.

00:09:32,365 --> 00:09:34,380
I broke out of it. That's my mistake

00:09:34,380 --> 00:09:36,525
because I need to control shift C.

00:09:36,525 --> 00:09:39,436
>> So, again even though it says localhost,

00:09:39,436 --> 00:09:40,505
this is actually running in a

00:09:40,505 --> 00:09:42,855
publicly available AKS cluster

00:09:42,855 --> 00:09:44,080
in Azure. Okay.

00:09:44,080 --> 00:09:46,255
>> So, we do this.

00:09:46,255 --> 00:09:48,765
And we are going to get the same result back.

00:09:48,765 --> 00:09:51,240
>> So, if I knew the IP address of the service

00:09:51,240 --> 00:09:53,720
that's being hosted inside of Kubernetes,

00:09:53,720 --> 00:09:55,100
I could actually put that IP address

00:09:55,100 --> 00:09:56,750
there and get the same results that I'm getting now.

00:09:56,750 --> 00:09:58,068
>> That's correct.

00:09:58,068 --> 00:10:00,510
As long as you would create an Ingress for that cluster.

00:10:00,510 --> 00:10:01,020
>> Got it.

00:10:01,020 --> 00:10:02,775
>> So, in other words, normally,

00:10:02,775 --> 00:10:05,865
this endpoint is exposed as a cluster IP type.

00:10:05,865 --> 00:10:07,620
And what that means is the endpoint that it's

00:10:07,620 --> 00:10:09,555
hosted at is only visible within the cluster.

00:10:09,555 --> 00:10:11,610
And that's why we create a secure tunnel

00:10:11,610 --> 00:10:13,870
to the cluster in order to view the endpoint.

00:10:13,870 --> 00:10:14,760
>> Perfect. Great.

00:10:14,760 --> 00:10:17,378
>> So, here's the problem though,

00:10:17,378 --> 00:10:19,590
and I think you're going to go there right away, I bet.

00:10:19,590 --> 00:10:21,885
This is a very simple app,

00:10:21,885 --> 00:10:23,925
and most apps are going to be very customized.

00:10:23,925 --> 00:10:25,890
Either because they have odd things in

00:10:25,890 --> 00:10:27,885
them that are non-standard, right?

00:10:27,885 --> 00:10:30,180
Or because you're maybe running in an environment,

00:10:30,180 --> 00:10:31,710
like in a corporate environment,

00:10:31,710 --> 00:10:33,750
where you have special types and

00:10:33,750 --> 00:10:36,040
special application frame which you built yourself.

00:10:36,040 --> 00:10:36,172
>> Right.

00:10:36,172 --> 00:10:37,350
>> And you can't really guess using

00:10:37,350 --> 00:10:38,565
linguists how to do that.

00:10:38,565 --> 00:10:40,050
>> And also, I might want to control what

00:10:40,050 --> 00:10:41,975
base images you're using in my Docker files.

00:10:41,975 --> 00:10:43,140
There's all sorts of control that I

00:10:43,140 --> 00:10:44,610
might want to put on here that I don't want

00:10:44,610 --> 00:10:47,335
some generic hello world happy path

00:10:47,335 --> 00:10:49,310
Docker file that this thing is producing for me.

00:10:49,310 --> 00:10:50,818
>> DeArn Tutan.

00:10:50,818 --> 00:10:52,290
That's what My mother would have said.

00:10:52,290 --> 00:10:54,650
In this case, let's go to a really strange app.

00:10:54,650 --> 00:10:56,040
It's actually not that strange.

00:10:56,040 --> 00:10:58,380
This is an F Sharp app that is

00:10:58,380 --> 00:11:01,880
designed to be built with a.NETCore, too.

00:11:01,880 --> 00:11:02,450
>> Okay.

00:11:02,450 --> 00:11:03,640
>> All right. And it uses

00:11:03,640 --> 00:11:06,673
the Giraffe open source MVC framework.

00:11:06,673 --> 00:11:08,785
It's an open source framework.

00:11:08,785 --> 00:11:10,490
It sort of cuts out a lot of the stuff that

00:11:10,490 --> 00:11:12,240
ASP.net put in for

00:11:12,240 --> 00:11:13,860
MVC just to streamline

00:11:13,860 --> 00:11:16,980
the operations and it works perfectly with.NETCore.

00:11:16,980 --> 00:11:17,740
>> Okay.

00:11:17,740 --> 00:11:20,090
>> So, this is a pretty odd combination.

00:11:20,090 --> 00:11:20,680
>> For sure.

00:11:20,680 --> 00:11:21,870
>> How are we going to be able to

00:11:21,870 --> 00:11:24,174
guess what kind of container,

00:11:24,174 --> 00:11:25,590
what kind of Docker file to use,

00:11:25,590 --> 00:11:28,645
and what kind of chart to use in order to deploy this?

00:11:28,645 --> 00:11:30,795
Well, we can't guess. But in this case,

00:11:30,795 --> 00:11:31,830
you actually built this

00:11:31,830 --> 00:11:33,300
application or maybe your Dev Lead

00:11:33,300 --> 00:11:35,970
did or your architect and they know how to contain it.

00:11:35,970 --> 00:11:36,420
>> Okay.

00:11:36,420 --> 00:11:38,280
>> So, you don't want to do that.

00:11:38,280 --> 00:11:39,730
You just want to work on your F Sharp.

00:11:39,730 --> 00:11:40,250
>> Sure.

00:11:40,250 --> 00:11:42,885
>> So, what you do in this environment,

00:11:42,885 --> 00:11:44,640
since we'll get our prompt back,

00:11:44,640 --> 00:11:46,995
we're going to say Draft create and pass

00:11:46,995 --> 00:11:49,760
a custom Draft pack.

00:11:49,760 --> 00:11:52,555
And this is where you can create a repo

00:11:52,555 --> 00:11:55,770
both public or private that contains

00:11:55,770 --> 00:11:59,910
these containment and service composition artifacts

00:11:59,910 --> 00:12:03,450
for specific or private applications.

00:12:03,450 --> 00:12:06,275
>> So, when you ran Draft create earlier,

00:12:06,275 --> 00:12:08,920
I saw it created a folder for chart.

00:12:08,920 --> 00:12:11,990
It had created a Docker file and some other artifacts.

00:12:11,990 --> 00:12:14,220
Those artifacts are now been defined in

00:12:14,220 --> 00:12:16,080
this package to meet all of

00:12:16,080 --> 00:12:18,255
our specifications such that every time I do this,

00:12:18,255 --> 00:12:20,210
I'm going to get those Docker files

00:12:20,210 --> 00:12:21,565
and those artifacts out automatically.

00:12:21,565 --> 00:12:23,895
>> That's right. And you can check

00:12:23,895 --> 00:12:27,233
the repos you have there by doing Draft pack repo lift.

00:12:27,233 --> 00:12:30,675
You can see that I have my own special Draft pack repo

00:12:30,675 --> 00:12:34,140
that knows how to configure this very odd application.

00:12:34,140 --> 00:12:34,630
>> Perfect.

00:12:34,630 --> 00:12:36,270
>> And this happens to be odd.

00:12:36,270 --> 00:12:37,950
I'm using that as an example but it might just

00:12:37,950 --> 00:12:40,100
be within the corporate firewall.

00:12:40,100 --> 00:12:40,241
>> Sure.

00:12:40,241 --> 00:12:40,920
>> And you just don't want to

00:12:40,920 --> 00:12:41,700
share these kinds of things.

00:12:41,700 --> 00:12:42,900
>> Right. Perfect.

00:12:42,900 --> 00:12:44,085
>> So, in that environment,

00:12:44,085 --> 00:12:45,540
we're going to do Draft create

00:12:45,540 --> 00:12:47,303
which is the same experience,

00:12:47,303 --> 00:12:49,680
but we're going to do the Draft pack specific.

00:12:49,680 --> 00:12:52,980
And you'll see that we get the same files, but now,

00:12:52,980 --> 00:12:57,300
they have a very customized container core.

00:12:57,300 --> 00:12:58,130
If you're a Developer and

00:12:58,130 --> 00:12:59,010
you really know what you're doing or

00:12:59,010 --> 00:13:01,275
maybe you're the Dev Lead or the Architect as I say,

00:13:01,275 --> 00:13:04,038
you might even continue to iterate on this artifact.

00:13:04,038 --> 00:13:04,340
>> Sure.

00:13:04,340 --> 00:13:05,775
>> But it's now part of

00:13:05,775 --> 00:13:07,290
the build environment and

00:13:07,290 --> 00:13:08,550
the development environment for whoever.

00:13:08,550 --> 00:13:10,020
If you had 10 developers

00:13:10,020 --> 00:13:11,400
and they all need to collaborate,

00:13:11,400 --> 00:13:14,280
they just say Draft create with a pack, and off they go.

00:13:14,280 --> 00:13:16,645
>> This a bootstrapping exercise.

00:13:16,645 --> 00:13:18,800
This isn't something that you run over and over again.

00:13:18,800 --> 00:13:18,998
>> No.

00:13:18,998 --> 00:13:20,260
>> You produced the Docker file

00:13:20,260 --> 00:13:21,850
by using the Draft create.

00:13:21,850 --> 00:13:22,920
You can then go modify

00:13:22,920 --> 00:13:24,810
this Docker file to your heart's content.

00:13:24,810 --> 00:13:26,670
It was just to bootstrap to get you going.

00:13:26,670 --> 00:13:27,780
And then you're going to start committing this

00:13:27,780 --> 00:13:29,070
into your source control with the rest of

00:13:29,070 --> 00:13:30,430
your artifacts and then run it through

00:13:30,430 --> 00:13:32,245
whatever CI/CD pipeline you want to run it.

00:13:32,245 --> 00:13:32,670
>> That's right.

00:13:32,670 --> 00:13:34,575
And once these artifacts are in source control,

00:13:34,575 --> 00:13:36,720
now the operations team can have a hand in it.

00:13:36,720 --> 00:13:37,060
>> Absolutely.

00:13:37,060 --> 00:13:38,667
>> You can version them, put them in

00:13:38,667 --> 00:13:41,295
different versions in different branches and so on.

00:13:41,295 --> 00:13:44,310
So now, your whole artifact and creation process is

00:13:44,310 --> 00:13:45,750
all controlled by the kind of

00:13:45,750 --> 00:13:47,550
systems that are designed to do that work.

00:13:47,550 --> 00:13:48,925
>> Absolutely. I just wanted to make sure

00:13:48,925 --> 00:13:50,395
because when I first started looking at drafts,

00:13:50,395 --> 00:13:51,563
I was like when do I run create?

00:13:51,563 --> 00:13:52,635
How often do I run create?

00:13:52,635 --> 00:13:54,700
And it's very clear now that it is something that you

00:13:54,700 --> 00:13:57,285
run once for the project to bootstrap it.

00:13:57,285 --> 00:13:58,635
You don't have to run that anymore.

00:13:58,635 --> 00:14:02,000
Now I might be running Draft up all the time.

00:14:02,000 --> 00:14:02,400
>> Sure.

00:14:02,400 --> 00:14:04,780
>> But you reiterate it. Exactly. Okay, perfect.

00:14:04,780 --> 00:14:06,315
>> And all your app would do,

00:14:06,315 --> 00:14:08,760
would take the artifacts and build

00:14:08,760 --> 00:14:11,340
the image and do the deployment as you've just seen here.

00:14:11,340 --> 00:14:11,750
>> Perfect.

00:14:11,750 --> 00:14:13,260
>> Okay. So, if we

00:14:13,260 --> 00:14:14,850
wanted to do this, we would do the same.

00:14:14,850 --> 00:14:18,005
We would have the same experience here, Draft up, right?

00:14:18,005 --> 00:14:20,445
And now, it's going to go through the same process here.

00:14:20,445 --> 00:14:23,074
Now in this case, this application,

00:14:23,074 --> 00:14:25,050
we might actually edit this a little bit for time

00:14:25,050 --> 00:14:27,170
because this application has more artifacts.

00:14:27,170 --> 00:14:28,575
A little bit more complex.

00:14:28,575 --> 00:14:29,910
So, the first time we do this,

00:14:29,910 --> 00:14:32,100
it probably will take a little bit longer maybe

00:14:32,100 --> 00:14:34,697
100 seconds or whatever to cache the images and so forth.

00:14:34,697 --> 00:14:36,930
But, once they're there,

00:14:36,930 --> 00:14:38,640
then the iterate time will be very rapid.

00:14:38,640 --> 00:14:40,200
>> Right. It is the same experience we

00:14:40,200 --> 00:14:41,870
would have with any Docker development at this point.

00:14:41,870 --> 00:14:42,360
>> That's right.

00:14:42,360 --> 00:14:44,820
>> But it's really nice to see that I don't have to be

00:14:44,820 --> 00:14:46,920
a Docker file expert which

00:14:46,920 --> 00:14:49,405
I felt like I to learn to get started.

00:14:49,405 --> 00:14:50,910
I kind of wish I had procrastinated

00:14:50,910 --> 00:14:52,040
a little bit longer to get to

00:14:52,040 --> 00:14:53,220
Docker because now we have

00:14:53,220 --> 00:14:55,420
the tools like this for the open source world.

00:14:55,420 --> 00:14:57,210
We have those great tools inside of Visual Studio

00:14:57,210 --> 00:14:59,130
that basically does all this magic for you as well.

00:14:59,130 --> 00:14:59,409
>> Right.

00:14:59,409 --> 00:15:00,840
>> But I got in just a little too early

00:15:00,840 --> 00:15:02,445
because I had to do all the stuff myself.

00:15:02,445 --> 00:15:04,395
>> I'm sorry. That's really our fault.

00:15:04,395 --> 00:15:06,456
We were a little slow on that one.

00:15:06,456 --> 00:15:07,410
>> But it's great to see what it does.

00:15:07,410 --> 00:15:08,910
>> But this stuff works everywhere, too.

00:15:08,910 --> 00:15:10,710
I mean we're using

00:15:10,710 --> 00:15:13,200
mini Kube here and then we re-point it toward AKS.

00:15:13,200 --> 00:15:13,680
>> Absolutely.

00:15:13,680 --> 00:15:17,022
>> But it'll work in any of our fantastic competitors.

00:15:17,022 --> 00:15:18,585
They will work in bare metal clusters.

00:15:18,585 --> 00:15:19,950
It's open source.

00:15:19,950 --> 00:15:21,420
>> Yes. As we talked about in

00:15:21,420 --> 00:15:23,040
the first show and we showed I believe

00:15:23,040 --> 00:15:24,630
here is that there's a repo

00:15:24,630 --> 00:15:26,430
that you can go and see how we've done all this.

00:15:26,430 --> 00:15:29,060
You can contribute. It's just a full open source project.

00:15:29,060 --> 00:15:31,430
>> Fix bugs that you find, add new features.

00:15:31,430 --> 00:15:31,970
>> Fantastic.

00:15:31,970 --> 00:15:33,120
>> Come and join us and participate.

00:15:33,120 --> 00:15:35,025
>> Fantastic. Well, we are learning

00:15:35,025 --> 00:15:38,310

YouTube URL: https://www.youtube.com/watch?v=DvaT3H8Wyf8


