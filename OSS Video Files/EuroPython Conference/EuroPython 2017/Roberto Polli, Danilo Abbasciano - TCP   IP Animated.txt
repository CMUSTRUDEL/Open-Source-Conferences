Title: Roberto Polli, Danilo Abbasciano - TCP   IP Animated
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"TCP / IP Animated
[EuroPython 2017 - Interactive session - 2017-07-10 - PythonAnywhere Room]
[Rimini, Italy]

This interactive game teaches is the follow-up of the Router Game by Roberto Polli, and teaches various TCP / IP protocols using paper and pen.

Participants are divided in teams, simulating exchanges through various protocols (DNS, TCP, IP)

Every player has an L3 role: a PC or mobile phone, a Router, a Load Balancer ... and must communicate with the others following the associate specification (eg. a TCP client may buffer frames, a Load Balancer re-encapsulates IP datagram, ... )

The team which is faster in exhanging messages wins.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,339 --> 00:00:09,780
hurry buddy welcome to Euro Python

00:00:07,140 --> 00:00:13,799
you're going to attend a wonderful

00:00:09,780 --> 00:00:18,650
interactive session and it is a game

00:00:13,799 --> 00:00:23,999
with pen and paper showing a basic

00:00:18,650 --> 00:00:27,060
communication with TCP so we will see

00:00:23,999 --> 00:00:31,579
how long connection established is

00:00:27,060 --> 00:00:35,400
establish up and how is it closed

00:00:31,579 --> 00:00:37,770
everything is interactive so you're

00:00:35,400 --> 00:00:49,260
gonna write down IP addresses and

00:00:37,770 --> 00:00:54,780
chugging TCP flags on small flyers you

00:00:49,260 --> 00:01:00,000
should form three or four people teams

00:00:54,780 --> 00:01:04,320
and every people team every three four

00:01:00,000 --> 00:01:09,150
people is a small local area network

00:01:04,320 --> 00:01:15,210
connected to an to a hub switcharoo de

00:01:09,150 --> 00:01:20,759
and what the talk is presented by danila

00:01:15,210 --> 00:01:25,950
bhushanam he's a first-time speaker so I

00:01:20,759 --> 00:01:30,840
hope to welcome him warmly and it is the

00:01:25,950 --> 00:01:35,520
first time that he makes these tcp/ip

00:01:30,840 --> 00:01:38,159
game so your feedback to make it grow

00:01:35,520 --> 00:01:41,759
and to make it better is really

00:01:38,159 --> 00:01:45,960
appreciated so next year we could do

00:01:41,759 --> 00:01:50,070
even more and more complex stuff like a

00:01:45,960 --> 00:01:58,289
lot balancing encapsulation and so on

00:01:50,070 --> 00:02:04,469
encryption last year we made again with

00:01:58,289 --> 00:02:08,190
the MAC addresses and basic gateways and

00:02:04,469 --> 00:02:12,269
people enjoyed a lot and somebody can

00:02:08,190 --> 00:02:15,120
asking if I was delivering a package

00:02:12,269 --> 00:02:21,930
with all the card of the games

00:02:15,120 --> 00:02:26,880
but well let's start now Daniel speaking

00:02:21,930 --> 00:02:28,290
I will try to helping one thank you no

00:02:26,880 --> 00:02:38,690
thank you

00:02:28,290 --> 00:02:45,739
Roberto Polly so this is a tcp/ip

00:02:38,690 --> 00:02:52,470
animated interactive session you you can

00:02:45,739 --> 00:03:01,230
touch the packet that transmits on the

00:02:52,470 --> 00:03:07,380
network in in in in and bright on paper

00:03:01,230 --> 00:03:13,709
and simulate how this packet travel on

00:03:07,380 --> 00:03:17,849
the under net I am Daniel banana and

00:03:13,709 --> 00:03:24,650
work in a company particle data

00:03:17,849 --> 00:03:36,900
sponsored this talk and Roberto Polly

00:03:24,650 --> 00:03:40,760
helped me to this adventure so we we

00:03:36,900 --> 00:03:45,630
started to bring up network interfaces

00:03:40,760 --> 00:03:56,130
with a HP server and this is the HP

00:03:45,630 --> 00:04:01,579
server first we make the handshake we we

00:03:56,130 --> 00:04:05,300
see just the layer TCP and IP

00:04:01,579 --> 00:04:12,340
communicate some data

00:04:05,300 --> 00:04:12,340
we introduced some communication error -

00:04:13,330 --> 00:04:21,890
this is what we will see and then at

00:04:18,590 --> 00:04:25,300
last say goodbye using with the closing

00:04:21,890 --> 00:04:33,460
a connection this is just an overview of

00:04:25,300 --> 00:04:37,250
his OSI stack is divided by layer and

00:04:33,460 --> 00:04:44,060
each layer are encapsulating information

00:04:37,250 --> 00:04:50,810
one inside the next the next layer so

00:04:44,060 --> 00:04:54,730
from Watson is the physical is the the

00:04:50,810 --> 00:04:59,410
how would the PC are connected so they

00:04:54,730 --> 00:05:04,690
the word something else Data Link

00:04:59,410 --> 00:05:10,640
Network and transport we will focus our

00:05:04,690 --> 00:05:13,970
attention in network layer with the

00:05:10,640 --> 00:05:20,060
protocol IP and transport layer with the

00:05:13,970 --> 00:05:23,420
TCP then top of this layer we have the

00:05:20,060 --> 00:05:29,830
application layer and for not

00:05:23,420 --> 00:05:33,410
introducing as some information some

00:05:29,830 --> 00:05:38,300
problematics but other protocol we use

00:05:33,410 --> 00:05:42,500
which was the telnet application as is

00:05:38,300 --> 00:05:49,600
the simple simplest application we set

00:05:42,500 --> 00:05:49,600
the just to transmit byte so I lived in

00:05:50,380 --> 00:06:01,300
what's now I Daniel immediately get c p7

00:05:58,210 --> 00:06:04,820
providing your video addresses and pants

00:06:01,300 --> 00:06:08,480
please remember you should form teams of

00:06:04,820 --> 00:06:13,120
four people every four people it's a

00:06:08,480 --> 00:06:18,250
local area network so check your

00:06:13,120 --> 00:06:18,250
teammates and form your teams

00:06:18,939 --> 00:06:29,409
what's essentially TCP P is TCP provides

00:06:24,830 --> 00:06:35,389
the ability to have a reliable protocol

00:06:29,409 --> 00:06:40,279
it introduced the connection concept

00:06:35,389 --> 00:06:44,499
that means that me and you knows before

00:06:40,279 --> 00:06:49,699
starting transmitting data who we are

00:06:44,499 --> 00:06:54,489
this is something that is not provided

00:06:49,699 --> 00:07:00,289
by other protocols so with these reading

00:06:54,489 --> 00:07:03,769
packets with pen and paper we will

00:07:00,289 --> 00:07:10,909
understand why all those passages are

00:07:03,769 --> 00:07:15,319
important and so for every transmission

00:07:10,909 --> 00:07:20,059
it happens something that we see in war

00:07:15,319 --> 00:07:24,219
movies like okay Roger that and then the

00:07:20,059 --> 00:07:27,889
other says okay Roger that he disappear

00:07:24,219 --> 00:07:34,239
it's something like radio communication

00:07:27,889 --> 00:07:34,239
during war movies between the Sergent

00:07:34,479 --> 00:07:44,349
the chieftain what we see is that after

00:07:39,169 --> 00:07:48,979
that TCP IP provides a basic hijacking

00:07:44,349 --> 00:07:51,499
protection using random initiative it's

00:07:48,979 --> 00:07:54,709
numbered that's something that we will

00:07:51,499 --> 00:07:59,149
see if we have time why we work targets

00:07:54,709 --> 00:08:02,029
and that all these checks all the

00:07:59,149 --> 00:08:08,929
dough's and knowledge enables regions

00:08:02,029 --> 00:08:17,300
missions so Daniels providing you pens

00:08:08,929 --> 00:08:21,769
and paper this is our basic topology so

00:08:17,300 --> 00:08:25,279
one of your team should be the Rooter

00:08:21,769 --> 00:08:29,119
the one that enables other people to

00:08:25,279 --> 00:08:30,529
communicate please choose something that

00:08:29,119 --> 00:08:35,029
knows

00:08:30,529 --> 00:08:43,249
a bit of tcp/ip but it's I mean it's not

00:08:35,029 --> 00:08:46,910
compulsory and then okay now I'm going

00:08:43,249 --> 00:08:51,019
to help you in in making the teams so is

00:08:46,910 --> 00:08:51,920
there some team already made please

00:08:51,019 --> 00:08:57,920
raise your hand

00:08:51,920 --> 00:08:58,339
team one who is team one okay all your

00:08:57,920 --> 00:09:01,610
ends

00:08:58,339 --> 00:09:05,870
team one raise all your ends please give

00:09:01,610 --> 00:09:14,990
you a name be doing yourself chose the

00:09:05,870 --> 00:09:16,850
name the same for the other teams so

00:09:14,990 --> 00:09:26,439
this is team two

00:09:16,850 --> 00:09:34,370
raise your hand Tim - Tim - Tim - okay

00:09:26,439 --> 00:09:39,100
Tim - Wow we are team Remini Tim really

00:09:34,370 --> 00:09:39,100
great showing his team I love you

00:09:48,020 --> 00:09:59,190
I'm not graded inventing names Bologna

00:09:55,560 --> 00:10:12,990
Bologna okay just like spaghetti alla

00:09:59,190 --> 00:10:23,460
Bolognese okay wonderful team router

00:10:12,990 --> 00:10:27,210
switch brother switch Wow great just

00:10:23,460 --> 00:10:30,000
watching okay wonderful no problem you

00:10:27,210 --> 00:10:32,670
can join whether you whenever you want

00:10:30,000 --> 00:10:38,340
it's just something like plugging

00:10:32,670 --> 00:10:41,330
another device in okay and another

00:10:38,340 --> 00:10:41,330
standby device

00:10:50,050 --> 00:10:53,220
[Music]

00:11:02,389 --> 00:11:15,829
yeah but you can't have a rotary if

00:11:05,670 --> 00:11:20,040
you're not as rich yeah for this setup

00:11:15,829 --> 00:11:23,399
an IP they must be connected to

00:11:20,040 --> 00:11:39,690
something that is to enable so we

00:11:23,399 --> 00:11:45,750
couldn't have wrote just ruder okay as

00:11:39,690 --> 00:11:49,490
the packets are well not many you can

00:11:45,750 --> 00:11:56,220
reuse them maybe for the first

00:11:49,490 --> 00:12:00,000
connection you can use the just one

00:11:56,220 --> 00:12:00,420
piece of paper and then move on the

00:12:00,000 --> 00:12:10,639
needle

00:12:00,420 --> 00:12:16,380
it's up to you okay we just created some

00:12:10,639 --> 00:12:21,240
subnet in the topology like this we just

00:12:16,380 --> 00:12:26,459
are one people is the rooters which is

00:12:21,240 --> 00:12:28,170
the blue one and the old a harder people

00:12:26,459 --> 00:12:34,620
in the subnet are connected to the

00:12:28,170 --> 00:12:40,740
switch the router have the happy ends

00:12:34,620 --> 00:12:45,420
with two five four and in every subnet

00:12:40,740 --> 00:12:50,600
there are the dot one and he's the turn

00:12:45,420 --> 00:13:01,010
at server and are listening on a port 23

00:12:50,600 --> 00:13:01,010
whole holders are the user all right

00:13:01,139 --> 00:13:10,009
okay first goal is to make an hand shake

00:13:04,769 --> 00:13:14,279
and shake is user to establish a tcp/ip

00:13:10,009 --> 00:13:16,889
connection however an AP network it's

00:13:14,279 --> 00:13:20,220
also called the three-way handshake

00:13:16,889 --> 00:13:25,859
because it needed to transmit three

00:13:20,220 --> 00:13:29,939
messages first one is sin the second one

00:13:25,859 --> 00:13:33,359
is from ruder to to client and it's

00:13:29,939 --> 00:13:41,999
called it's in Huck and the last one

00:13:33,359 --> 00:13:45,869
Huck this the name of the packet are are

00:13:41,999 --> 00:13:49,709
the same name of flags so will be

00:13:45,869 --> 00:13:52,679
explained later the the goal it's a

00:13:49,709 --> 00:13:56,970
whole new Sarah with ASI bearish our

00:13:52,679 --> 00:14:04,259
connection to the telnet server every

00:13:56,970 --> 00:14:07,319
packet must every packet must go firstly

00:14:04,259 --> 00:14:13,139
to the route of which the end not to the

00:14:07,319 --> 00:14:19,319
to the server this is just data gram of

00:14:13,139 --> 00:14:23,639
IP IP header the information that we use

00:14:19,319 --> 00:14:27,239
in this speech is the source address and

00:14:23,639 --> 00:14:30,419
destination addresses so you have to

00:14:27,239 --> 00:14:36,269
compile the packet with the source and

00:14:30,419 --> 00:14:44,610
destination the other part of pocket is

00:14:36,269 --> 00:14:48,989
the TCP Datagram and we have to use 23

00:14:44,610 --> 00:14:53,989
as the destination port which supports

00:14:48,989 --> 00:15:02,129
you you can write an random number and

00:14:53,989 --> 00:15:05,500
for we use also TCP flags and the data

00:15:02,129 --> 00:15:10,210
effort as mean data

00:15:05,500 --> 00:15:13,450
in this slide you can see the handshake

00:15:10,210 --> 00:15:18,380
communication between the client and

00:15:13,450 --> 00:15:23,720
server client s and the first pocket

00:15:18,380 --> 00:15:34,250
window deflects in check had seen it's

00:15:23,720 --> 00:15:40,490
for synchronization I mean so you can

00:15:34,250 --> 00:15:48,380
start to write 30 P destination EP syn

00:15:40,490 --> 00:15:54,710
flag and 23 as destination port to the

00:15:48,380 --> 00:15:59,390
telnet server then the telnet server the

00:15:54,710 --> 00:16:02,750
people that have the high P win ends

00:15:59,390 --> 00:16:07,460
with one have to response with the

00:16:02,750 --> 00:16:10,150
another packet with the scene and hack

00:16:07,460 --> 00:16:10,150
flagon

00:16:22,980 --> 00:16:29,870
okay ready set go

00:16:40,210 --> 00:16:56,800
you're you you are sending the first

00:16:42,880 --> 00:17:44,530
packet yes there is no ik no it's I mean

00:16:56,800 --> 00:17:48,760
it's not I mean zero bytes it's not but

00:17:44,530 --> 00:17:53,820
as we are anticipating that where we

00:17:48,760 --> 00:17:53,820
similarly that you already have I mean

00:17:56,070 --> 00:18:11,429
you you do whatever is up to in

00:18:04,300 --> 00:18:11,429
background you don't show them yes

00:18:16,130 --> 00:18:25,380
okay first exchange done okay so you

00:18:21,960 --> 00:18:31,620
sent us in but you you shouldn't have

00:18:25,380 --> 00:18:33,210
provided any data because okay because

00:18:31,620 --> 00:18:37,350
it's the unshrink

00:18:33,210 --> 00:18:39,809
you don't know if it's him you didn't

00:18:37,350 --> 00:18:43,580
already started something so you can't

00:18:39,809 --> 00:18:46,350
rely that that the message have been

00:18:43,580 --> 00:18:53,820
routed to the acquisition edge you might

00:18:46,350 --> 00:18:58,309
not even know that he exists okay so

00:18:53,820 --> 00:18:58,309
just reuse blankets

00:19:03,270 --> 00:19:15,850
now he should know you're the service so

00:19:12,400 --> 00:19:19,090
it's you that should send him he has to

00:19:15,850 --> 00:19:24,000
wait he you are the server you just

00:19:19,090 --> 00:19:24,000
received this or you wrote it

00:19:24,510 --> 00:19:32,380
no you should wait for packets to come

00:19:27,460 --> 00:19:35,140
to you okay

00:19:32,380 --> 00:19:37,870
the telnet well it was the previous

00:19:35,140 --> 00:19:45,400
slide actually the client the server is

00:19:37,870 --> 00:19:58,630
always the that one yes whatever you got

00:19:45,400 --> 00:20:03,270
that one he makes all the ARP stuff and

00:19:58,630 --> 00:20:06,270
provides okay you are just

00:20:03,270 --> 00:20:06,270
yeah

00:20:08,669 --> 00:20:14,770
in this case you don't you don't need to

00:20:12,040 --> 00:20:16,740
you are on the same local area networks

00:20:14,770 --> 00:20:21,900
you don't you don't tell the next two

00:20:16,740 --> 00:20:26,950
because it's always on the same subnet

00:20:21,900 --> 00:20:34,270
you should okay now you have a heat

00:20:26,950 --> 00:20:44,110
okay okay okay now you should have its

00:20:34,270 --> 00:20:45,880
excuse me you should have had only one

00:20:44,110 --> 00:20:55,480
network because the second part of the

00:20:45,880 --> 00:21:04,900
game is connecting the two routers know

00:20:55,480 --> 00:21:05,640
exactly until you meet with him okay

00:21:04,900 --> 00:21:13,690
perfect

00:21:05,640 --> 00:21:21,010
wonderful so okay you just the scene no

00:21:13,690 --> 00:21:23,220
well the port is 23 yeah because telnet

00:21:21,010 --> 00:21:28,419
is 23

00:21:23,220 --> 00:21:30,429
thank you okay so when you receive this

00:21:28,419 --> 00:21:39,490
pocket what happens you should a

00:21:30,429 --> 00:21:52,690
knowledge you see the neck in debt and

00:21:39,490 --> 00:22:00,660
tell them that you actually should so we

00:21:52,690 --> 00:22:00,660
save it for this time okay exactly

00:22:05,470 --> 00:22:12,710
just use the last object okay that's it

00:22:11,470 --> 00:22:16,670
here

00:22:12,710 --> 00:22:26,740
everything fine did you establish the

00:22:16,670 --> 00:22:29,830
connection okay you didn't have any oh

00:22:26,740 --> 00:22:29,830
very good

00:22:31,210 --> 00:22:35,890
can I see the first one

00:22:36,290 --> 00:22:46,330
[Music]

00:22:37,840 --> 00:22:46,330
another important I have a cynic missing

00:22:47,830 --> 00:22:57,820
another important things is there as you

00:22:54,620 --> 00:23:03,610
show the client side and server state

00:22:57,820 --> 00:23:09,800
several start with the closet door then

00:23:03,610 --> 00:23:15,250
where the telnet server comes up the

00:23:09,800 --> 00:23:19,550
server are in listening on the port 23

00:23:15,250 --> 00:23:20,870
de clientele connection state faithfully

00:23:19,550 --> 00:23:24,040
are closed

00:23:20,870 --> 00:23:30,200
send the sink packet and become same

00:23:24,040 --> 00:23:38,030
Center and the server has seen receive

00:23:30,200 --> 00:23:43,550
it after and shake after an when and

00:23:38,030 --> 00:23:46,750
shake are completed the old client and

00:23:43,550 --> 00:23:50,020
server both are in the exhibition

00:23:46,750 --> 00:23:50,020
connection state

00:23:55,110 --> 00:24:17,230
all right we can go home so now the

00:24:07,590 --> 00:24:23,200
connection now the connection is a

00:24:17,230 --> 00:24:26,350
submission and we can start to talk the

00:24:23,200 --> 00:24:33,990
method the data messaging is the my name

00:24:26,350 --> 00:24:42,040
is and wrote your name send the packet

00:24:33,990 --> 00:24:44,380
with yes send a packet with the to to

00:24:42,040 --> 00:24:49,000
Dayton a server then to receive the

00:24:44,380 --> 00:24:57,250
packet and come back a feedback with a

00:24:49,000 --> 00:25:01,240
package with the hax flag so now I want

00:24:57,250 --> 00:25:06,100
to introduce another to field the

00:25:01,240 --> 00:25:12,850
sequence number a a acknowledgement

00:25:06,100 --> 00:25:17,830
number so the sequence number is just an

00:25:12,850 --> 00:25:22,450
integral when the when the start from

00:25:17,830 --> 00:25:28,530
zero and increment plus one

00:25:22,450 --> 00:25:34,210
every every time someone sent a packet

00:25:28,530 --> 00:25:40,600
acknowledged number is another field in

00:25:34,210 --> 00:25:47,650
in the TCP header to check if the packet

00:25:40,600 --> 00:25:54,850
are receiving well or if there happened

00:25:47,650 --> 00:25:58,510
something wrong like lost data or packet

00:25:54,850 --> 00:26:05,080
loss sequence number it's also you said

00:25:58,510 --> 00:26:06,279
that - if I receive the packet not in

00:26:05,080 --> 00:26:13,330
order

00:26:06,279 --> 00:26:16,059
so is user to sort the my last month in

00:26:13,330 --> 00:26:25,149
this light that you can see the hand

00:26:16,059 --> 00:26:34,059
shake and shake with this order to

00:26:25,149 --> 00:26:38,830
parameter set now we have to send this

00:26:34,059 --> 00:26:41,499
information to this server telnet the

00:26:38,830 --> 00:26:45,009
information is my name is Danilo and the

00:26:41,499 --> 00:26:49,149
start with the sequence number zero the

00:26:45,009 --> 00:26:52,109
server turn at receive zero to seed to

00:26:49,149 --> 00:26:57,539
sixteen byte because the string

00:26:52,109 --> 00:27:06,070
my name is Danilo are our sixteen

00:26:57,539 --> 00:27:09,580
seventeen bytes then the server receive

00:27:06,070 --> 00:27:13,119
a feedback to the client with the flag

00:27:09,580 --> 00:27:15,539
hacker and the number of bytes receive

00:27:13,119 --> 00:27:15,539
it right

00:27:26,510 --> 00:27:35,450
so this is possible to send information

00:27:31,179 --> 00:27:38,410
only after the tcp/ip connection is a

00:27:35,450 --> 00:27:38,410
sebacean

00:27:49,410 --> 00:27:58,700
I had to enter the server turn an takuna

00:27:55,140 --> 00:27:58,700
over all your names

00:28:04,670 --> 00:28:07,759
[Music]

00:28:11,080 --> 00:28:18,560
is it everything clear for now we are

00:28:15,890 --> 00:28:23,840
going to start with zero clearly for the

00:28:18,560 --> 00:28:26,590
game but what what happens is the first

00:28:23,840 --> 00:28:31,130
sequence the number is a random one

00:28:26,590 --> 00:28:32,810
because it helps to avoid other people

00:28:31,130 --> 00:28:35,570
introducing themself in the

00:28:32,810 --> 00:28:40,790
communication and the first value of

00:28:35,570 --> 00:28:46,820
sequence of both hosts are use it just

00:28:40,790 --> 00:28:50,870
like a secret between the client and the

00:28:46,820 --> 00:28:57,040
server well we can start writing our

00:28:50,870 --> 00:29:00,740
first data packet containing my name is

00:28:57,040 --> 00:29:03,260
providing try to provide a sequence and

00:29:00,740 --> 00:29:06,470
knowledge number in your communication

00:29:03,260 --> 00:29:09,220
if you are not able it's no problem just

00:29:06,470 --> 00:29:09,220
try to do it

00:29:22,509 --> 00:29:26,249
someone needs some help

00:33:06,290 --> 00:33:16,080
so which is the packet that you received

00:33:11,120 --> 00:33:17,700
okay so that that's okay those are two

00:33:16,080 --> 00:33:22,620
different streams two different

00:33:17,700 --> 00:33:23,820
connections one from he number one and

00:33:22,620 --> 00:33:28,380
two

00:33:23,820 --> 00:33:32,990
the other one is from number three and

00:33:28,380 --> 00:33:38,070
one every connection has its own stream

00:33:32,990 --> 00:33:44,250
and as its own flocks of sequencing and

00:33:38,070 --> 00:33:49,290
knowledge okay questions so a question

00:33:44,250 --> 00:33:53,220
for all those Linux guys where are all

00:33:49,290 --> 00:33:57,660
those synchronization and and knowledge

00:33:53,220 --> 00:34:06,330
bytes all those IP addresses stored in

00:33:57,660 --> 00:34:13,460
clients and servers yeah where are all

00:34:06,330 --> 00:34:16,100
those TCP data stored in the servers in

00:34:13,460 --> 00:34:21,960
memory exactly

00:34:16,100 --> 00:34:27,240
so remember if your servers have to

00:34:21,960 --> 00:34:33,480
manage thousands of connection that you

00:34:27,240 --> 00:34:37,590
need to use enough gram for TCP if you

00:34:33,480 --> 00:34:40,950
set up a load balancer visual machine

00:34:37,590 --> 00:34:45,750
that is a lot balancer just don't think

00:34:40,950 --> 00:34:49,650
about how much Apaches ram or ng

00:34:45,750 --> 00:34:54,660
naxxramas or hea proxy is ram has going

00:34:49,650 --> 00:34:57,750
to consume but think and check how many

00:34:54,660 --> 00:35:03,000
concurrent connection you are going to

00:34:57,750 --> 00:35:07,290
manage okay because every connection is

00:35:03,000 --> 00:35:10,290
going to use memory now in the

00:35:07,290 --> 00:35:13,910
Linux version they have reduced a bit

00:35:10,290 --> 00:35:21,120
the footprint but if we're interested in

00:35:13,910 --> 00:35:27,030
there is a some kernel mechanism that is

00:35:21,120 --> 00:35:30,660
named disappear floating prevention have

00:35:27,030 --> 00:35:33,990
a look at idiots it's interesting okay

00:35:30,660 --> 00:35:38,520
because some years ago they thought that

00:35:33,990 --> 00:35:41,670
it could be removed but after some

00:35:38,520 --> 00:35:44,810
stress testing somebody said okay even

00:35:41,670 --> 00:35:47,790
if we have removed the lowered the

00:35:44,810 --> 00:35:52,740
disappeared print on our Linux servers

00:35:47,790 --> 00:36:07,730
still we have benefit in having a syn

00:35:52,740 --> 00:36:07,730
flood prevention packets flooding okay

00:36:11,299 --> 00:36:26,940
no there is no sin flag there only only

00:36:16,199 --> 00:36:32,160
a knowledge so if if someone tried to

00:36:26,940 --> 00:36:37,799
send a packet to the server but for

00:36:32,160 --> 00:36:46,319
example wronged the port number or the

00:36:37,799 --> 00:36:50,759
server died what's up and the the first

00:36:46,319 --> 00:36:55,170
packet is centered to the root era the

00:36:50,759 --> 00:36:59,400
ruder nor day they appeared the

00:36:55,170 --> 00:37:04,109
destination IP and give the packet to to

00:36:59,400 --> 00:37:08,910
the server then the server receive the

00:37:04,109 --> 00:37:15,059
packet but they know no one services are

00:37:08,910 --> 00:37:22,400
in listening on that port and in this

00:37:15,059 --> 00:37:27,739
case this ever generate rosetta packet

00:37:22,400 --> 00:37:32,779
back to the to the client and the client

00:37:27,739 --> 00:37:42,539
this is the case of connection I refused

00:37:32,779 --> 00:37:46,650
right okay Roberto okay try to implement

00:37:42,539 --> 00:37:53,039
this case so a client sends a packet to

00:37:46,650 --> 00:37:57,329
the server on port 80 but the server has

00:37:53,039 --> 00:38:02,150
no web server listening so he doesn't

00:37:57,329 --> 00:38:02,150
know what to do with that packet

00:38:07,540 --> 00:38:17,650
this case also happened when for example

00:38:11,870 --> 00:38:23,410
a firewall closed the incoming request

00:38:17,650 --> 00:38:23,410
today today some port

00:38:25,090 --> 00:38:41,150
ok now the service replies flagging the

00:38:29,690 --> 00:38:47,570
receipt flag no yeah the server not

00:38:41,150 --> 00:39:02,750
always discards the packet but well you

00:38:47,570 --> 00:39:11,740
can see an rst one server replies with a

00:39:02,750 --> 00:39:11,740
russet packet you still have information

00:39:14,830 --> 00:39:20,170
the information you got is that the

00:39:18,530 --> 00:39:24,980
server exists

00:39:20,170 --> 00:39:29,180
okay and it is very useful to send

00:39:24,980 --> 00:39:34,220
packets to non list'ning parts if you

00:39:29,180 --> 00:39:36,920
want to discover a network topology okay

00:39:34,220 --> 00:39:41,960
so you don't know which IP addresses are

00:39:36,920 --> 00:39:45,910
there around so you start trying to

00:39:41,960 --> 00:39:50,030
connect different part and wait for

00:39:45,910 --> 00:39:54,380
reddit packets to come back then you

00:39:50,030 --> 00:39:57,620
know those hosts are live and maybe if

00:39:54,380 --> 00:40:04,870
there is no pole no 80 parts there is

00:39:57,620 --> 00:40:12,260
some other parts that is listening no

00:40:04,870 --> 00:40:15,620
well being is something different when

00:40:12,260 --> 00:40:16,849
you ping a host you may have that horse

00:40:15,620 --> 00:40:21,099
that don't

00:40:16,849 --> 00:40:29,359
except on don't reply to ping requests

00:40:21,099 --> 00:40:32,380
but if you have a system that lives on a

00:40:29,359 --> 00:40:36,400
house that doesn't allow being requests

00:40:32,380 --> 00:40:42,710
okay so it's for world in some way that

00:40:36,400 --> 00:40:45,109
asked my still reply to connection

00:40:42,710 --> 00:40:47,839
attempt on different toasts on different

00:40:45,109 --> 00:40:49,849
parts okay so maybe you have a firewall

00:40:47,839 --> 00:40:53,239
that disables ping requests and

00:40:49,849 --> 00:40:57,410
responses but they don't just block all

00:40:53,239 --> 00:41:01,160
ports around so if your network is five

00:40:57,410 --> 00:41:06,890
world for ping you can try to probe to

00:41:01,160 --> 00:41:10,460
other parts and discover networking

00:41:06,890 --> 00:41:13,249
topologies this is what traceroute that

00:41:10,460 --> 00:41:17,930
is another client program does it does

00:41:13,249 --> 00:41:22,059
it with UDP and with TCP usually with

00:41:17,930 --> 00:41:25,700
TCP it's more probable that you getting

00:41:22,059 --> 00:41:28,460
in sides of a network because with UDP

00:41:25,700 --> 00:41:33,440
maybe you have still firewalling

00:41:28,460 --> 00:41:37,400
it's not easy to have TCP for walling on

00:41:33,440 --> 00:41:40,609
of on all parts because there are

00:41:37,400 --> 00:41:44,019
machine listening so maybe some

00:41:40,609 --> 00:41:47,019
Sisyphean forgets to firewall everything

00:41:44,019 --> 00:41:47,019
okay

00:42:02,020 --> 00:42:07,200
should be 8

00:42:04,940 --> 00:42:16,470
because it's a part that is not

00:42:07,200 --> 00:42:20,280
listening everybody resset okay remember

00:42:16,470 --> 00:42:24,420
that all these resid when a client to

00:42:20,280 --> 00:42:29,760
receive a result with a source port what

00:42:24,420 --> 00:42:32,970
happens it drops the connection okay so

00:42:29,760 --> 00:42:37,650
if I am exchanging communication with a

00:42:32,970 --> 00:42:43,560
server on port 80 and the receiver

00:42:37,650 --> 00:42:45,750
resident sourcing port 80 I drop

00:42:43,560 --> 00:42:51,510
although they all the rest of the data

00:42:45,750 --> 00:42:55,290
that shows but this ever exists so de is

00:42:51,510 --> 00:42:59,640
the server that responds to the client I

00:42:55,290 --> 00:43:05,220
can even Forge packets and send them to

00:42:59,640 --> 00:43:08,820
client with my ad port so that all

00:43:05,220 --> 00:43:12,360
clients just start dropping packets from

00:43:08,820 --> 00:43:15,740
a legitimate server this is how our

00:43:12,360 --> 00:43:19,530
random using a random synchronization

00:43:15,740 --> 00:43:23,940
number helps because a client accept a

00:43:19,530 --> 00:43:26,520
resid bucket only if there is a

00:43:23,940 --> 00:43:30,120
synchronization and read and a knowledge

00:43:26,520 --> 00:43:34,890
plug match the one of the stream they

00:43:30,120 --> 00:43:38,220
are communicating on right so if a

00:43:34,890 --> 00:43:40,530
receiver resid from a server but the

00:43:38,220 --> 00:43:43,050
reza but they are knowledge and

00:43:40,530 --> 00:43:45,870
synchronization flag doesn't match I

00:43:43,050 --> 00:43:51,500
just skipped this project as a forgit

00:43:45,870 --> 00:43:51,500
pocket okay

00:43:54,660 --> 00:44:03,470
good question yes if the destination is

00:43:59,430 --> 00:44:08,460
unreachable so when you try to talk to

00:44:03,470 --> 00:44:15,320
another server the Rooter received a

00:44:08,460 --> 00:44:21,320
pocket but Rooter can't don't know where

00:44:15,320 --> 00:44:26,180
we're sending your pocket and the Rooter

00:44:21,320 --> 00:44:33,030
give you back an hippie pocket not

00:44:26,180 --> 00:44:36,860
tcp/ip just the hippie with the with the

00:44:33,030 --> 00:44:40,290
Herer now with the Hara no root - host

00:44:36,860 --> 00:44:44,400
okay remember if you're looking for

00:44:40,290 --> 00:44:48,300
those ICMP packet it's about Naruto and

00:44:44,400 --> 00:44:51,900
so on if you are on your own laptop and

00:44:48,300 --> 00:44:55,850
your laptop your PC doesn't resolve the

00:44:51,900 --> 00:45:03,810
DISA dress it's your local interface

00:44:55,850 --> 00:45:06,930
replying back on with these Naruto's so

00:45:03,810 --> 00:45:09,990
if you use TCP dump trying to get those

00:45:06,930 --> 00:45:14,250
kind of packets probably the best way to

00:45:09,990 --> 00:45:21,180
track them is to TCP dump listening on

00:45:14,250 --> 00:45:25,020
all interfaces not just on the outgoing

00:45:21,180 --> 00:45:29,900
interface so if you want to have a best

00:45:25,020 --> 00:45:34,440
insights of traffic and ICMP packets

00:45:29,900 --> 00:45:37,590
ICMP it's out of scope for this for this

00:45:34,440 --> 00:45:42,750
talk we actually should have something

00:45:37,590 --> 00:45:48,150
the Naruto stuff but we don't want it to

00:45:42,750 --> 00:45:52,080
go on on the ICMP stuff you have a lot

00:45:48,150 --> 00:45:55,800
of kind of errors and there is a table

00:45:52,080 --> 00:45:58,950
where you should check and map each kind

00:45:55,800 --> 00:46:01,740
of errors on what could have happened on

00:45:58,950 --> 00:46:05,100
on the network so

00:46:01,740 --> 00:46:08,340
check out the main page if you man ICMP

00:46:05,100 --> 00:46:16,970
probably you can just get all those

00:46:08,340 --> 00:46:16,970
information try to disobey um stuff

00:46:17,000 --> 00:46:24,000
together there is a very nice book that

00:46:20,550 --> 00:46:27,240
is tcp/ip illustrated where you can get

00:46:24,000 --> 00:46:31,700
a lot of examples there are truly two

00:46:27,240 --> 00:46:36,240
releases the first one which I prefer is

00:46:31,700 --> 00:46:38,960
very simple very straight and is very

00:46:36,240 --> 00:46:44,240
useful for landing all those stuff and

00:46:38,960 --> 00:46:44,240
second release that is more verbose

00:46:45,230 --> 00:46:51,840
basic than a Windows client I don't like

00:46:49,980 --> 00:46:55,340
it very much but it's very comprehensive

00:46:51,840 --> 00:46:59,450
and it can be very useful if you have

00:46:55,340 --> 00:47:07,850
many protocols to check as a reference

00:46:59,450 --> 00:47:13,820
so let's move on with about complicated

00:47:07,850 --> 00:47:22,020
scenario with now we have all the Rooter

00:47:13,820 --> 00:47:26,690
linkage together and now the subnet can

00:47:22,020 --> 00:47:31,440
talk want to hit her to each other and

00:47:26,690 --> 00:47:36,120
the goal of this scenario is the a

00:47:31,440 --> 00:47:41,090
client in a subnet have to establish a

00:47:36,120 --> 00:47:44,960
connection to attend a separate in

00:47:41,090 --> 00:47:44,960
another subnet

00:47:48,030 --> 00:48:03,860
so you you can speak about to through

00:47:58,920 --> 00:48:03,860
some let's group

00:48:23,390 --> 00:48:31,559
so let's connect the roots so you are

00:48:28,260 --> 00:48:49,349
the rudest now you should populate this

00:48:31,559 --> 00:48:52,079
one we spot you to layer is the name of

00:48:49,349 --> 00:49:06,079
the other router the mid-day Christian

00:48:52,079 --> 00:49:09,980
name of the other router okay so maybe

00:49:06,079 --> 00:49:15,119
here we can have a freeway route routing

00:49:09,980 --> 00:49:21,049
stuff so one connected with two and two

00:49:15,119 --> 00:49:29,299
connected with three so it would be yep

00:49:21,049 --> 00:49:33,690
dispatcher for two routes shake shake

00:49:29,299 --> 00:49:36,829
starting shake now so certain shake with

00:49:33,690 --> 00:49:43,510
the server or a different network a

00:49:36,829 --> 00:49:48,729
different subnet okay both two and three

00:49:43,510 --> 00:49:48,729
[Music]

00:50:26,310 --> 00:50:29,310
okay

00:50:32,760 --> 00:50:39,100
the routing can be for example on a

00:50:35,830 --> 00:50:43,990
different network I mean that they speak

00:50:39,100 --> 00:50:45,790
on a different network now always the

00:50:43,990 --> 00:50:53,920
same layer but it's big for example on

00:50:45,790 --> 00:50:55,410
our private routing network yes well it

00:50:53,920 --> 00:50:59,380
happens

00:50:55,410 --> 00:51:04,119
TCP is only between client and ruder

00:50:59,380 --> 00:51:10,320
just see IP unless they do something

00:51:04,119 --> 00:51:10,320
like mapping and bleeding layer layers

00:51:28,760 --> 00:51:33,250
okay that's going here

00:51:36,200 --> 00:51:43,730
it's always the seller is always we got

00:51:41,520 --> 00:51:43,730
one

00:51:52,490 --> 00:51:55,490
yep

00:52:00,280 --> 00:52:05,630
okay these routing can happen on on the

00:52:03,110 --> 00:52:09,860
same networks okay

00:52:05,630 --> 00:52:15,050
or there can be a several network where

00:52:09,860 --> 00:52:17,660
you would packets that is not one which

00:52:15,050 --> 00:52:21,860
the clients are connected on for example

00:52:17,660 --> 00:52:27,290
there's the cambia ten they are one nine

00:52:21,860 --> 00:52:31,940
eight network so you and he has a

00:52:27,290 --> 00:52:36,830
routing table where that one goes

00:52:31,940 --> 00:52:45,860
through your address on that network and

00:52:36,830 --> 00:52:50,440
you know what you believer and so on

00:52:45,860 --> 00:52:50,440
those one on it okay

00:53:05,100 --> 00:53:17,370
okay if the connection is low okay you

00:53:11,800 --> 00:53:22,240
can start to understand how important is

00:53:17,370 --> 00:53:25,300
to start problem network and if they're

00:53:22,240 --> 00:53:29,530
gonna change load try to send packets to

00:53:25,300 --> 00:53:32,140
other hosts and try to get a reddit to

00:53:29,530 --> 00:53:38,710
check if the problem is the server or

00:53:32,140 --> 00:53:42,310
the routing if the packet from if the

00:53:38,710 --> 00:53:46,240
resident comes back then probably there

00:53:42,310 --> 00:53:49,690
is a firewall on the dust otherwise that

00:53:46,240 --> 00:53:52,990
also would have replied with a result or

00:53:49,690 --> 00:53:57,030
with an a knowledge okay try to

00:53:52,990 --> 00:54:05,340
understand try to mango to talk your

00:53:57,030 --> 00:54:14,850
human network next year we'll do it with

00:54:05,340 --> 00:54:14,850
100 people and check what happens yeah

00:54:14,940 --> 00:54:23,290
with y'all - Lu with the other game

00:54:17,770 --> 00:54:26,550
people just start not complying with the

00:54:23,290 --> 00:54:29,380
protocol to win the game we we made a

00:54:26,550 --> 00:54:32,380
competition for the team that was going

00:54:29,380 --> 00:54:36,550
to exchange it the packet pasta and they

00:54:32,380 --> 00:54:39,250
start to get just like disease Frank

00:54:36,550 --> 00:54:43,900
this is John and they just go straight

00:54:39,250 --> 00:54:47,080
on yeah exactly

00:54:43,900 --> 00:54:51,070
and then we examine examined all the

00:54:47,080 --> 00:54:54,520
kind of hacks they do to win and try to

00:54:51,070 --> 00:54:55,830
make similarities with the difference

00:54:54,520 --> 00:55:02,320
between hubs

00:54:55,830 --> 00:55:05,320
Ruta and sure somebody just dropped the

00:55:02,320 --> 00:55:11,920
hub's to be smarten and remember that

00:55:05,320 --> 00:55:13,349
part want one other reuse packets we

00:55:11,920 --> 00:55:16,140
hope that

00:55:13,349 --> 00:55:19,410
this experiment this year we can

00:55:16,140 --> 00:55:26,400
fine-tune the game to have something

00:55:19,410 --> 00:55:29,369
like that Nagle algorithm and caching

00:55:26,400 --> 00:55:35,009
buffering and so on but the problem is

00:55:29,369 --> 00:55:37,680
we we need some refinement and if people

00:55:35,009 --> 00:55:41,359
who get the first impact with TCP it's

00:55:37,680 --> 00:55:52,109
very hard to introduce further concepts

00:55:41,359 --> 00:55:53,880
on this kind of game yeah that that I

00:55:52,109 --> 00:56:02,329
don't know if we have this case we had

00:55:53,880 --> 00:56:02,329
the case with Naruto's on that part

00:56:07,039 --> 00:56:11,420
yeah they triggered the retransmission

00:56:11,450 --> 00:56:14,450
okay

00:56:24,960 --> 00:56:32,589
well probably if somebody wants to try

00:56:29,380 --> 00:56:37,089
these next year we could plan for two

00:56:32,589 --> 00:56:42,099
sessions two different session one with

00:56:37,089 --> 00:56:45,150
TCP basic the other one with complex but

00:56:42,099 --> 00:56:48,309
with the same themes we can do this

00:56:45,150 --> 00:56:52,719
exchanging people between teams it would

00:56:48,309 --> 00:56:55,839
be very complex I think so no live your

00:56:52,719 --> 00:57:03,609
connection home and it's time to close

00:56:55,839 --> 00:57:07,869
it and this is the the rule to close and

00:57:03,609 --> 00:57:09,069
an established connection it's made by

00:57:07,869 --> 00:57:12,489
four packets

00:57:09,069 --> 00:57:16,509
the first is Finn

00:57:12,489 --> 00:57:20,710
the flagfin the server responds with the

00:57:16,509 --> 00:57:23,950
Huck and then another Finn an act

00:57:20,710 --> 00:57:30,910
because the connection we had this

00:57:23,950 --> 00:57:34,450
abolition is be directional so we we

00:57:30,910 --> 00:57:37,630
have to do to closing the one from

00:57:34,450 --> 00:57:44,079
client to server and another one from

00:57:37,630 --> 00:57:49,930
server to client it's possible to

00:57:44,079 --> 00:57:57,539
collapse the second third messages in

00:57:49,930 --> 00:58:01,509
just one win both flag Huck and Finn so

00:57:57,539 --> 00:58:03,160
this this mod modality you can close the

00:58:01,509 --> 00:58:07,460
connection with the three packet

00:58:03,160 --> 00:58:09,239
exchange exchange in three packets I

00:58:07,460 --> 00:58:13,660
[Music]

00:58:09,239 --> 00:58:18,249
want I want to show you the client state

00:58:13,660 --> 00:58:25,479
and server state also starting from a

00:58:18,249 --> 00:58:28,769
sublet connection and and passing from

00:58:25,479 --> 00:58:28,769
close wait

00:58:29,380 --> 00:58:43,209
time wait and then close because after

00:58:39,309 --> 00:58:48,269
closing the client could be receive

00:58:43,209 --> 00:58:55,119
another data messages under the closing

00:58:48,269 --> 00:59:01,089
connection so I maintain the way a

00:58:55,119 --> 00:59:07,119
wedding of four for a time this this

00:59:01,089 --> 00:59:11,680
delayed messages and sometimes on server

00:59:07,119 --> 00:59:16,890
we have a lot of connection in a close

00:59:11,680 --> 00:59:22,269
way to state this is happen when they

00:59:16,890 --> 00:59:34,809
when they closing when the closing

00:59:22,269 --> 00:59:39,670
connection are not completed so he if

00:59:34,809 --> 00:59:41,259
you want to try to close your connection

00:59:39,670 --> 00:59:48,959
you just send Finn

00:59:41,259 --> 00:59:48,959
receive Huck yes

00:59:54,700 --> 01:00:04,990
okay essentially Fein means I'm not

00:59:59,260 --> 01:00:09,790
going to send you any more packet Finn

01:00:04,990 --> 01:00:18,280
doesn't mean I'm not going to read more

01:00:09,790 --> 01:00:23,040
packet okay so to send a Finn just means

01:00:18,280 --> 01:00:26,790
I can receive more packets from you okay

01:00:23,040 --> 01:00:30,880
but I won't send anymore

01:00:26,790 --> 01:00:34,510
this is the reason why we need two

01:00:30,880 --> 01:00:35,970
packets of thin that is I'm not going to

01:00:34,510 --> 01:00:40,590
send anymore

01:00:35,970 --> 01:00:51,400
and then a knowledge that the other one

01:00:40,590 --> 01:00:55,660
is done with sanding okay this last

01:00:51,400 --> 01:01:00,510
party in famous time weight stuff is

01:00:55,660 --> 01:01:06,790
very important because as you can see

01:01:00,510 --> 01:01:09,700
this had quite long routing layer okay

01:01:06,790 --> 01:01:15,670
they are two steps between clients and

01:01:09,700 --> 01:01:22,690
server and in that case packet

01:01:15,670 --> 01:01:28,270
transmission was slow in this case this

01:01:22,690 --> 01:01:34,140
time weight enables to get delayed

01:01:28,270 --> 01:01:38,470
packets to reach the client in this case

01:01:34,140 --> 01:01:42,690
without that this connection this socket

01:01:38,470 --> 01:01:47,950
to be reused by another one imagine that

01:01:42,690 --> 01:01:52,150
we reuse we don't have time wait the

01:01:47,950 --> 01:01:56,410
connection is closed I reuse the socket

01:01:52,150 --> 01:01:59,680
so we used the coupling of suits the the

01:01:56,410 --> 01:02:02,830
destination part this destination part

01:01:59,680 --> 01:02:05,110
received our delayed packet and what

01:02:02,830 --> 01:02:08,450
does it do with the packet that he

01:02:05,110 --> 01:02:12,200
doesn't know what to do he sells

01:02:08,450 --> 01:02:16,849
result this is you are not a connection

01:02:12,200 --> 01:02:20,950
established to me so you should close so

01:02:16,849 --> 01:02:23,750
a new client sends a legitimate

01:02:20,950 --> 01:02:26,930
connection request for example and gets

01:02:23,750 --> 01:02:32,320
back a result he thinks that the server

01:02:26,930 --> 01:02:35,780
is not responsive instead it should be

01:02:32,320 --> 01:02:40,010
or differently so this is important to

01:02:35,780 --> 01:02:42,170
have a time wait okay can wait could be

01:02:40,010 --> 01:02:45,980
problematic because means that there is

01:02:42,170 --> 01:02:48,530
a socket in use on the server if you

01:02:45,980 --> 01:02:53,420
have a server with both a proximally

01:02:48,530 --> 01:02:59,630
here okay between another process that

01:02:53,420 --> 01:03:04,250
is local okay so for example I have an

01:02:59,630 --> 01:03:09,050
AK h a proxy on the same server then the

01:03:04,250 --> 01:03:13,819
bucket service when connection starts to

01:03:09,050 --> 01:03:17,710
get closed I have a local connection in

01:03:13,819 --> 01:03:23,950
time wait okay

01:03:17,710 --> 01:03:30,940
or if I have firewalls load balancer so

01:03:23,950 --> 01:03:36,530
you can dress mechanism for saga we use

01:03:30,940 --> 01:03:41,780
when you think that you can have a lower

01:03:36,530 --> 01:03:47,119
time on time wait okay you should do it

01:03:41,780 --> 01:03:50,589
only if you trust that your network has

01:03:47,119 --> 01:03:54,500
a low latency so you won't get packets

01:03:50,589 --> 01:03:57,819
very fast very with with a big delay

01:03:54,500 --> 01:04:01,670
okay so if you trust your network is

01:03:57,819 --> 01:04:04,280
very fast you don't have latency you can

01:04:01,670 --> 01:04:08,440
reuse socket for example locally and so

01:04:04,280 --> 01:04:12,349
on otherwise if you have time wait just

01:04:08,440 --> 01:04:16,670
stick with it don't just make or use

01:04:12,349 --> 01:04:19,640
magic into your TCP configuration

01:04:16,670 --> 01:04:21,330
because it's it probably getting things

01:04:19,640 --> 01:04:24,660
work war

01:04:21,330 --> 01:04:29,850
worse than you you got it always test

01:04:24,660 --> 01:04:33,270
stress test your tcp environment before

01:04:29,850 --> 01:04:36,060
tuning don't you anticipate on to

01:04:33,270 --> 01:04:39,330
regular stuff because it's not going to

01:04:36,060 --> 01:04:44,100
work at a certain point just do if you

01:04:39,330 --> 01:04:48,690
prove it that it's better for you okay

01:04:44,100 --> 01:04:52,430
Thank You Roberto and thank you to have

01:04:48,690 --> 01:04:52,430
you for attention

01:04:53,240 --> 01:05:08,870
so team I would thank you very much

01:05:03,480 --> 01:05:12,540
vanilla because at first this talk

01:05:08,870 --> 01:05:15,680
should have been brought to you by

01:05:12,540 --> 01:05:23,750
another colleague that had an issue and

01:05:15,680 --> 01:05:27,720
bravely Danilo took it over made it up

01:05:23,750 --> 01:05:31,620
without starting it first and try to

01:05:27,720 --> 01:05:35,700
match it to make it in a very brief time

01:05:31,620 --> 01:05:38,580
to have it delivered to you so thank you

01:05:35,700 --> 01:05:44,040
the needle and hope to you see you next

01:05:38,580 --> 01:05:49,309
year at your thanks to you Polly

01:05:44,040 --> 01:05:49,309

YouTube URL: https://www.youtube.com/watch?v=AcoTSe6OjHU


