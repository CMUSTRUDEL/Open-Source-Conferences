Title: Tim Babych - Front-end testing with Python
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Front-end testing with Python
[EuroPython 2017 - Talk - 2017-07-10 - PyCharm Room]
[Rimini, Italy]

Web-developers use Python to develop web-applications, serving HTML or JSON content to user's browsers which render it. We test our applications to check that they serve content right and that they respond to HTTP requests in an expected way. However, this is not all that happens in a modern web application. There are lots of moving parts which are executed not on the server, but directly in user's browser, and they need to be tested too. The best way to check that our app works well in a browser is to test it in a browser, and Python gives you tools to do that conveniently.

With a Selenium tool and Python package, you can control the browsers, making them open web pages and interacting with them. I will show how to install Selenium and needed drivers, and tell about best practices for writing Selenium tests, such as


Page Object pattern
Put browser interactions in the page object, not the test
Put assertions in the test, not the page object
Never use time.sleep()
Always make pages wait for actions to complete
Wait for JavaScript to load


To test the visual look of your application there is a Needle tool, which lets you compare screenshots with baseline set, and highlight the differences. I will talk about how to incorporate that functionality into your tests.

As browser testing can get quite slow, I will also show how to set up running them concurrently.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,640 --> 00:00:12,340
hi guys nice to see you hope everybody

00:00:07,940 --> 00:00:14,809
had a nice lunch I'm here to talk about

00:00:12,340 --> 00:00:18,140
testing front-end part of our web

00:00:14,809 --> 00:00:21,350
application when we develop application

00:00:18,140 --> 00:00:24,830
is not enough currently to just test our

00:00:21,350 --> 00:00:27,830
views and test that we reply proper HTML

00:00:24,830 --> 00:00:31,189
give proper queries and those choirs

00:00:27,830 --> 00:00:34,730
return information to browser via HTTP

00:00:31,189 --> 00:00:38,059
protocol to consume often in web

00:00:34,730 --> 00:00:41,300
application browser interaction part is

00:00:38,059 --> 00:00:44,030
itself very complex and in those days

00:00:41,300 --> 00:00:46,550
everybody is trying to build single page

00:00:44,030 --> 00:00:48,520
application where you don't have to

00:00:46,550 --> 00:00:51,860
reload page you just move information

00:00:48,520 --> 00:00:54,500
back and forth and you go to your

00:00:51,860 --> 00:00:56,780
Facebook page you go to Gmail page and

00:00:54,500 --> 00:01:01,789
you expect everything to be smooth and

00:00:56,780 --> 00:01:04,489
working and to test this thing we have

00:01:01,789 --> 00:01:08,090
to automate rouser themselves we have to

00:01:04,489 --> 00:01:11,659
command it we have to do entire testing

00:01:08,090 --> 00:01:15,200
of it from one part to another how it

00:01:11,659 --> 00:01:18,830
shows most popular tool to do it is

00:01:15,200 --> 00:01:21,380
selenium and in my talk I will highlight

00:01:18,830 --> 00:01:23,630
how to work with it and show some best

00:01:21,380 --> 00:01:25,790
practices we use when working with

00:01:23,630 --> 00:01:30,619
testing web applications with selenium

00:01:25,790 --> 00:01:33,979
to installing selenium is quite easy you

00:01:30,619 --> 00:01:37,280
just do usual people install selenium

00:01:33,979 --> 00:01:40,100
but the second part is a bit extra is

00:01:37,280 --> 00:01:43,520
that selenium automates real browsers

00:01:40,100 --> 00:01:46,700
and it needs a bit of intermediary layer

00:01:43,520 --> 00:01:50,750
between a real browser and this library

00:01:46,700 --> 00:01:53,750
it communicates this browser via HTTP

00:01:50,750 --> 00:01:58,360
and JSON protocol called webdriver

00:01:53,750 --> 00:02:00,710
protocol it is actually now a w3c

00:01:58,360 --> 00:02:03,350
specification which is going to be

00:02:00,710 --> 00:02:07,969
adopted soon it is currently a candidate

00:02:03,350 --> 00:02:09,590
release and Mozilla and Google are

00:02:07,969 --> 00:02:11,420
working to implement it in their

00:02:09,590 --> 00:02:15,560
browsers they have already actually

00:02:11,420 --> 00:02:16,810
implemented it so webdriver drivers

00:02:15,560 --> 00:02:18,310
which you have to install

00:02:16,810 --> 00:02:20,860
are released by Mozilla and Google

00:02:18,310 --> 00:02:24,040
themselves they keep them in sync with

00:02:20,860 --> 00:02:26,020
their releases installing them is so you

00:02:24,040 --> 00:02:28,989
just go to website download those

00:02:26,020 --> 00:02:33,790
drivers and put them on a path in your

00:02:28,989 --> 00:02:37,420
system and that's mostly it there are a

00:02:33,790 --> 00:02:41,050
couple more steps so you should know if

00:02:37,420 --> 00:02:42,910
you mentioned if you find those on

00:02:41,050 --> 00:02:45,310
webpages there is a tool for

00:02:42,910 --> 00:02:47,790
orchestration those browsers called

00:02:45,310 --> 00:02:51,910
selenium server which you don't need and

00:02:47,790 --> 00:02:54,280
there is a tool called phantom jet

00:02:51,910 --> 00:02:56,470
browser we will get to it later but

00:02:54,280 --> 00:03:00,069
mostly it's a headless mode for running

00:02:56,470 --> 00:03:03,569
browser which renders page but renders

00:03:00,069 --> 00:03:07,630
it only in memory and you don't have to

00:03:03,569 --> 00:03:12,220
give the application on a server graphic

00:03:07,630 --> 00:03:17,980
server so imagine we have already

00:03:12,220 --> 00:03:21,070
installed selenium tool and just like

00:03:17,980 --> 00:03:26,010
fun funny and easily we can interact

00:03:21,070 --> 00:03:26,010
with item we can interact with browser

00:03:27,870 --> 00:03:34,950
we import web driver from our library

00:03:30,820 --> 00:03:40,630
and we initiate the browser instance

00:03:34,950 --> 00:03:42,670
like this one this one it even notifies

00:03:40,630 --> 00:03:46,600
us that this instance is being

00:03:42,670 --> 00:03:50,190
controlled remotely once you have it you

00:03:46,600 --> 00:03:50,190
can issue common street

00:04:02,510 --> 00:04:10,549
and it opens a page for us other than

00:04:07,040 --> 00:04:14,659
that you can find an element on this

00:04:10,549 --> 00:04:18,590
page in this browser we give common find

00:04:14,659 --> 00:04:21,590
element by name and as it is ipython not

00:04:18,590 --> 00:04:24,190
just the real console shell we can see

00:04:21,590 --> 00:04:27,800
things here his methods we can use

00:04:24,190 --> 00:04:31,850
rather cookies file the texture a lot of

00:04:27,800 --> 00:04:35,449
fine element options for you to use we

00:04:31,850 --> 00:04:39,080
have this element in a page Dom model

00:04:35,449 --> 00:04:43,010
and we can use it we can just send

00:04:39,080 --> 00:04:51,800
something to it how the completion you

00:04:43,010 --> 00:04:58,570
need and I could not finish window fast

00:04:51,800 --> 00:04:58,570
enough we already here let's close it

00:05:01,030 --> 00:05:11,650
not the element but the driver okay that

00:05:09,740 --> 00:05:15,349
was the easy part

00:05:11,650 --> 00:05:17,210
in this part we briefly showed that we

00:05:15,349 --> 00:05:20,479
can interact with browser we can find

00:05:17,210 --> 00:05:24,320
elements in a web page you can find them

00:05:20,479 --> 00:05:27,470
by their names by their CSS classes by a

00:05:24,320 --> 00:05:33,229
language for choir and element in a tree

00:05:27,470 --> 00:05:38,389
called XPath and by link text for bottom

00:05:33,229 --> 00:05:40,280
of voya hf and so we can click all the

00:05:38,389 --> 00:05:44,090
things and we can type all the things

00:05:40,280 --> 00:05:46,460
and there are lots of methods to use

00:05:44,090 --> 00:05:50,690
find element or find elements by

00:05:46,460 --> 00:05:55,789
something they are actually relying on

00:05:50,690 --> 00:06:00,470
one internal method called find by find

00:05:55,789 --> 00:06:04,849
by something which is by ID by x pass by

00:06:00,470 --> 00:06:08,660
selector and all the other utility

00:06:04,849 --> 00:06:11,960
methods just call to it usually in our

00:06:08,660 --> 00:06:12,590
internal method we would be relying on

00:06:11,960 --> 00:06:16,190
this one

00:06:12,590 --> 00:06:20,070
internal find element or find element

00:06:16,190 --> 00:06:25,370
if you want to get this complex XPath

00:06:20,070 --> 00:06:28,470
selector we can use chrome dev tools

00:06:25,370 --> 00:06:33,140
find some element here for example this

00:06:28,470 --> 00:06:36,780
image this is the image in don t

00:06:33,140 --> 00:06:39,660
document object model tree and for this

00:06:36,780 --> 00:06:43,650
image we can copy an XPath of this

00:06:39,660 --> 00:06:49,230
element X path for this image looks like

00:06:43,650 --> 00:06:55,160
this that's acquire an element ID is HP

00:06:49,230 --> 00:06:55,160
logo and we can try to use it

00:07:02,830 --> 00:07:07,409
and it'll return as element to work with

00:07:08,550 --> 00:07:16,150
he all the tools we have we have ability

00:07:14,020 --> 00:07:19,120
to query we have a good easy to interact

00:07:16,150 --> 00:07:21,909
this page and that's usually one

00:07:19,120 --> 00:07:25,960
tutorials stop and presently this future

00:07:21,909 --> 00:07:29,919
opportunity okay go build things it's

00:07:25,960 --> 00:07:33,370
easy like drawing you know and let's try

00:07:29,919 --> 00:07:38,770
to draw in all on that we will be

00:07:33,370 --> 00:07:43,750
drawing and all of application which is

00:07:38,770 --> 00:07:46,300
a demo for angular 2 framework when you

00:07:43,750 --> 00:07:49,599
try to learn angular 2 they give you a

00:07:46,300 --> 00:07:51,610
demo if you go through steps and it

00:07:49,599 --> 00:07:54,759
gives you eventually application called

00:07:51,610 --> 00:07:58,860
total Hills it has a dashboard there are

00:07:54,759 --> 00:08:01,979
some heroes there is list of heroes and

00:07:58,860 --> 00:08:06,280
you can interact with those things you

00:08:01,979 --> 00:08:10,419
can open one you can change it you can

00:08:06,280 --> 00:08:13,449
click save and it will wait a second and

00:08:10,419 --> 00:08:18,960
go back to - mode that's what we will

00:08:13,449 --> 00:08:24,039
write it test I have written a little

00:08:18,960 --> 00:08:27,520
test case for this and I will go through

00:08:24,039 --> 00:08:30,400
it here we just initiate a browser and

00:08:27,520 --> 00:08:35,640
ask it to go to this web page we are

00:08:30,400 --> 00:08:38,529
testing then ugly thing called time slip

00:08:35,640 --> 00:08:41,740
because angular applications they take

00:08:38,529 --> 00:08:44,350
some time to implode libraries they take

00:08:41,740 --> 00:08:47,230
time to load assets and if we try to

00:08:44,350 --> 00:08:49,959
interrupt this page just after we get

00:08:47,230 --> 00:08:52,089
there we will get an error it will not

00:08:49,959 --> 00:08:55,690
work it will not test it will not it

00:08:52,089 --> 00:08:59,290
will be false positive error test will

00:08:55,690 --> 00:09:03,820
fail so you'll slip a little after that

00:08:59,290 --> 00:09:10,320
we test a list of Heroes refined element

00:09:03,820 --> 00:09:10,320
by CSS selector model here that's him

00:09:12,029 --> 00:09:20,709
when I was looking for it I found this

00:09:14,860 --> 00:09:26,319
element this give class model hero and

00:09:20,709 --> 00:09:29,139
this model hero is in CSS syntax looks

00:09:26,319 --> 00:09:32,679
like this so we find those elements and

00:09:29,139 --> 00:09:36,309
we look the list is of four elements and

00:09:32,679 --> 00:09:39,160
the desserts test second test we go the

00:09:36,309 --> 00:09:46,499
same place we take first element in this

00:09:39,160 --> 00:09:46,499
list this one

00:09:47,339 --> 00:09:51,910
lick lick on it

00:09:49,059 --> 00:09:55,350
we again sleep wait for some interaction

00:09:51,910 --> 00:10:03,069
to happen and we get to details page

00:09:55,350 --> 00:10:06,579
details page look like this details we

00:10:03,069 --> 00:10:09,999
can click here save and something will

00:10:06,579 --> 00:10:13,329
happen on this page we find again

00:10:09,999 --> 00:10:16,360
another element by CSS syntax defined

00:10:13,329 --> 00:10:21,369
input we send keys just like we did with

00:10:16,360 --> 00:10:24,879
Google and we find element called button

00:10:21,369 --> 00:10:29,470
this text save we click on it we sleep

00:10:24,879 --> 00:10:33,670
again and we get to our front page we

00:10:29,470 --> 00:10:36,519
expected to have text day after that in

00:10:33,670 --> 00:10:39,699
my test syntax we called driver cute

00:10:36,519 --> 00:10:41,910
which will close our browser let's test

00:10:39,699 --> 00:10:41,910
it

00:10:56,220 --> 00:11:03,510
it opens browser it opens this page

00:10:59,690 --> 00:11:07,650
interacts it change it clicked and we

00:11:03,510 --> 00:11:12,540
have Dave to test post ok great success

00:11:07,650 --> 00:11:16,140
and now to the ugly part ugly part was

00:11:12,540 --> 00:11:19,580
called cell software is why it is ugly

00:11:16,140 --> 00:11:22,830
first ugly thing here is those timeouts

00:11:19,580 --> 00:11:25,100
yes chocolate application tail take time

00:11:22,830 --> 00:11:31,440
to load and we have to wait for a bit

00:11:25,100 --> 00:11:33,330
but when we hard right those timeouts

00:11:31,440 --> 00:11:36,510
like two seconds here to second souls

00:11:33,330 --> 00:11:40,140
those two seconds are never proper time

00:11:36,510 --> 00:11:41,070
to wait sometimes webpages take longer

00:11:40,140 --> 00:11:43,440
time to load

00:11:41,070 --> 00:11:45,480
there is Network latency there is Google

00:11:43,440 --> 00:11:48,060
Analytics in your page there is like

00:11:45,480 --> 00:11:51,420
buttons they sometimes loss slow and

00:11:48,060 --> 00:11:54,960
your page may take load 3 second to load

00:11:51,420 --> 00:11:55,890
and this test you should help us but we

00:11:54,960 --> 00:11:58,410
have two seconds

00:11:55,890 --> 00:12:01,830
sometimes your wait page loads faster

00:11:58,410 --> 00:12:05,220
it's like half a second and in this case

00:12:01,830 --> 00:12:06,420
two seconds is too slow it takes it

00:12:05,220 --> 00:12:10,140
takes too much time

00:12:06,420 --> 00:12:12,030
this should have been just went on your

00:12:10,140 --> 00:12:17,370
test could have been faster if it wasn't

00:12:12,030 --> 00:12:20,400
for two seconds to deal with it selenium

00:12:17,370 --> 00:12:24,810
provides two things first is implicitly

00:12:20,400 --> 00:12:27,150
wait for all elements to finish so when

00:12:24,810 --> 00:12:30,870
it tries to find an element on a page it

00:12:27,150 --> 00:12:32,580
waits for three seconds it tries to find

00:12:30,870 --> 00:12:36,390
it for 30 seconds tries where is right

00:12:32,580 --> 00:12:38,630
waste and second part is a bit more

00:12:36,390 --> 00:12:42,080
complex it waits only for some elements

00:12:38,630 --> 00:12:44,870
first it's easy to set up but I would

00:12:42,080 --> 00:12:47,850
recommend you not to use it because you

00:12:44,870 --> 00:12:50,550
don't want to wait for each element to

00:12:47,850 --> 00:12:52,350
load sometimes when your page is loading

00:12:50,550 --> 00:12:55,260
it is okay but when your page has

00:12:52,350 --> 00:12:57,150
already been loaded and you don't change

00:12:55,260 --> 00:13:00,390
anything if you don't find an element

00:12:57,150 --> 00:13:01,050
you expected to find it means something

00:13:00,390 --> 00:13:04,050
is broken

00:13:01,050 --> 00:13:06,870
you should just show the state test has

00:13:04,050 --> 00:13:10,910
failed and go on implicit is not

00:13:06,870 --> 00:13:13,590
recommended a commanded is just to

00:13:10,910 --> 00:13:17,610
explicitly wait for something's you want

00:13:13,590 --> 00:13:20,280
to wait and second part which is driver

00:13:17,610 --> 00:13:23,850
which is ugly about this test is it's

00:13:20,280 --> 00:13:26,430
too repetitive it repeats itself with

00:13:23,850 --> 00:13:30,050
locators little piece itself with pages

00:13:26,430 --> 00:13:33,180
it is not an easy experience to do this

00:13:30,050 --> 00:13:35,640
and writing test must be easy because

00:13:33,180 --> 00:13:37,320
when it is difficult to write test when

00:13:35,640 --> 00:13:41,430
it is difficult to understand what it

00:13:37,320 --> 00:13:44,550
does nobody writes tests and when nobody

00:13:41,430 --> 00:13:46,950
writes test application is broken by

00:13:44,550 --> 00:13:48,870
design because they say we should try to

00:13:46,950 --> 00:13:50,790
do better we should try the design test

00:13:48,870 --> 00:13:52,680
which would be easy to understand and

00:13:50,790 --> 00:13:57,330
easy to extend and easier to maintain

00:13:52,680 --> 00:13:59,520
and there is a pattern called better

00:13:57,330 --> 00:14:02,910
object when you try to encapsulate a

00:13:59,520 --> 00:14:05,190
webpage as a Python object Python

00:14:02,910 --> 00:14:09,750
objects are great we use them we can

00:14:05,190 --> 00:14:12,630
expand them we can inherit them and we

00:14:09,750 --> 00:14:15,180
can hide a lot of logic and details in

00:14:12,630 --> 00:14:19,680
those objects and classes and they will

00:14:15,180 --> 00:14:24,170
make our test button let's take a look

00:14:19,680 --> 00:14:29,430
how we can use it we have pages pi and

00:14:24,170 --> 00:14:33,060
we initiate both page we will hide

00:14:29,430 --> 00:14:37,860
driver instance in it and we'll hide

00:14:33,060 --> 00:14:40,320
waiting for this page to the load this

00:14:37,860 --> 00:14:42,870
will be enough for a moment and our

00:14:40,320 --> 00:14:46,650
first version will use only this base

00:14:42,870 --> 00:14:48,900
page just a simple object and a little

00:14:46,650 --> 00:14:51,360
extension of this base page called

00:14:48,900 --> 00:14:55,230
desperate page we shall have here a

00:14:51,360 --> 00:14:57,360
locator to not repeat itself several

00:14:55,230 --> 00:15:01,740
time and we shall have a property which

00:14:57,360 --> 00:15:04,680
returns heroes after that our test looks

00:15:01,740 --> 00:15:10,350
much nicer we just initially displays

00:15:04,680 --> 00:15:14,730
which we open it and we get lunch and we

00:15:10,350 --> 00:15:17,460
get text of such element next let's try

00:15:14,730 --> 00:15:20,520
to improve it when we try to improve it

00:15:17,460 --> 00:15:22,930
our second time our second attempt would

00:15:20,520 --> 00:15:26,529
be to just repeat what we have done this

00:15:22,930 --> 00:15:28,449
ugly test let's try to get things when

00:15:26,529 --> 00:15:32,139
editing things we will go to another

00:15:28,449 --> 00:15:36,399
page and okay we will implement this

00:15:32,139 --> 00:15:39,279
other page also as a page object in our

00:15:36,399 --> 00:15:41,889
pages it will define class called edit

00:15:39,279 --> 00:15:44,889
page we will define a method we shall

00:15:41,889 --> 00:15:48,759
wait for it to be loaded you'll try to

00:15:44,889 --> 00:15:51,309
open it and we will also hide some

00:15:48,759 --> 00:15:54,369
details about this page in a class so we

00:15:51,309 --> 00:15:57,189
will not be dealing this expected

00:15:54,369 --> 00:15:59,829
locator strings in our test in our test

00:15:57,189 --> 00:16:04,769
we will just ask give me the give me a

00:15:59,829 --> 00:16:07,869
name like this that's our dashboard page

00:16:04,769 --> 00:16:08,589
it opened it's mostly the same as it was

00:16:07,869 --> 00:16:13,179
I just

00:16:08,589 --> 00:16:15,879
hi a hidden name and ID of first here we

00:16:13,179 --> 00:16:18,519
click it we go to edit page and the

00:16:15,879 --> 00:16:23,379
jacket is loaded pretty self-explanatory

00:16:18,519 --> 00:16:28,540
and we check that name is Ana header and

00:16:23,379 --> 00:16:33,990
then the second page second test we load

00:16:28,540 --> 00:16:37,740
this page explicitly by zero detail / 12

00:16:33,990 --> 00:16:44,920
will or display explicitly we open it

00:16:37,740 --> 00:16:48,819
then we clean everything from here type

00:16:44,920 --> 00:16:52,179
sultan new save button we don't go into

00:16:48,819 --> 00:16:56,019
locator streams we just type save button

00:16:52,179 --> 00:16:59,679
click and after that we expect dashboard

00:16:56,019 --> 00:17:03,240
page to be loaded and suspect to the

00:16:59,679 --> 00:17:03,240
Dave let's try

00:17:17,300 --> 00:17:22,530
something went wrong let's try it again

00:17:20,670 --> 00:17:27,720
and take a look at what happens in the

00:17:22,530 --> 00:17:30,930
browser just test passed okay second

00:17:27,720 --> 00:17:34,280
part the second test we had Dave we went

00:17:30,930 --> 00:17:41,030
back to home and it's still Markham

00:17:34,280 --> 00:17:47,540
strange let's try it here we go here

00:17:41,030 --> 00:17:52,620
total hero's details click Save and

00:17:47,540 --> 00:17:55,080
nothing happens why I guess we just

00:17:52,620 --> 00:17:58,170
found a bug in Google tutorial for

00:17:55,080 --> 00:18:03,200
angular 2 it worked when we were using

00:17:58,170 --> 00:18:08,880
ugly pest when we went dashboard to the

00:18:03,200 --> 00:18:11,900
item change save and it changed but if

00:18:08,880 --> 00:18:15,990
we went directly to URL it did not work

00:18:11,900 --> 00:18:19,950
that's a nice test is exposed bug and it

00:18:15,990 --> 00:18:23,520
also shows that you should not combine

00:18:19,950 --> 00:18:27,480
several things into one test when the

00:18:23,520 --> 00:18:30,810
combines go to dashboard click go back

00:18:27,480 --> 00:18:32,820
it worked when they tried going directly

00:18:30,810 --> 00:18:35,310
to edit page it did not

00:18:32,820 --> 00:18:38,310
let's analyze this we will not be going

00:18:35,310 --> 00:18:42,210
into fixing their page right now we will

00:18:38,310 --> 00:18:43,890
go into the tail that's one of the

00:18:42,210 --> 00:18:47,220
things which you should do and you

00:18:43,890 --> 00:18:51,780
shouldn't do is you should test small

00:18:47,220 --> 00:18:56,070
things by as small test as possible one

00:18:51,780 --> 00:18:58,500
test for one condition testing those

00:18:56,070 --> 00:19:01,530
small things can get slow because

00:18:58,500 --> 00:19:04,890
browsers are slow and JavaScript is fast

00:19:01,530 --> 00:19:07,740
to execute but slow to load and what I

00:19:04,890 --> 00:19:10,650
wanted to say it's okay to cut corners

00:19:07,740 --> 00:19:13,800
here like if you are testing their value

00:19:10,650 --> 00:19:16,470
allocation that is an online store or

00:19:13,800 --> 00:19:20,310
some admin panel which needs login

00:19:16,470 --> 00:19:22,140
functionality and it would take few

00:19:20,310 --> 00:19:23,850
seconds each time each of your tests

00:19:22,140 --> 00:19:26,549
login user

00:19:23,850 --> 00:19:29,280
you should cut corners here you should

00:19:26,549 --> 00:19:32,669
not make your users log India you should

00:19:29,280 --> 00:19:36,510
not make your test log in log in each

00:19:32,669 --> 00:19:38,280
time you run something you should there

00:19:36,510 --> 00:19:41,460
are ways to do it you can just create a

00:19:38,280 --> 00:19:44,970
some quick login URL just don't expose

00:19:41,460 --> 00:19:46,559
it in production like you go to some URL

00:19:44,970 --> 00:19:50,490
and you are automatically logged as a

00:19:46,559 --> 00:19:53,160
user ID something or you can log in once

00:19:50,490 --> 00:19:55,830
and save cookies and instead of a

00:19:53,160 --> 00:19:58,169
regular login in into your application

00:19:55,830 --> 00:20:03,120
you just substitute cookies header into

00:19:58,169 --> 00:20:07,049
your browser and test other things it's

00:20:03,120 --> 00:20:09,900
okay to cut corners a bit controversial

00:20:07,049 --> 00:20:12,659
advice here but totally logical you

00:20:09,900 --> 00:20:15,570
don't always need selenium to test web

00:20:12,659 --> 00:20:19,080
application you can use request you can

00:20:15,570 --> 00:20:23,280
use regular tests for Django and flask

00:20:19,080 --> 00:20:29,730
to test what your API items is JSON

00:20:23,280 --> 00:20:32,400
right not on what to use expert or CSS

00:20:29,730 --> 00:20:35,789
sometimes CSS does not cut it

00:20:32,400 --> 00:20:38,340
but bonus for CSS is that everybody

00:20:35,789 --> 00:20:41,070
knows it all the web developers know how

00:20:38,340 --> 00:20:45,510
to compose those queries and make them

00:20:41,070 --> 00:20:50,150
simpler so usually use CSS expert only

00:20:45,510 --> 00:20:53,309
one it is not enough there are tools for

00:20:50,150 --> 00:20:57,120
when you build this framework of a page

00:20:53,309 --> 00:21:01,559
object you can also implement into it

00:20:57,120 --> 00:21:04,890
tools called needle a selenium has a

00:21:01,559 --> 00:21:08,640
feature to save a page or save a part of

00:21:04,890 --> 00:21:10,890
the page and but it's still low level

00:21:08,640 --> 00:21:14,010
you don't want to use it you should use

00:21:10,890 --> 00:21:16,049
it in your page object class and in this

00:21:14,010 --> 00:21:18,419
page object cost other people have

00:21:16,049 --> 00:21:20,340
already done it and you just plug in

00:21:18,419 --> 00:21:22,919
those functionality in pager object

00:21:20,340 --> 00:21:26,190
cause you're buildin and you can compare

00:21:22,919 --> 00:21:28,580
screenshots of a page before and after

00:21:26,190 --> 00:21:32,280
some change and you can see that your

00:21:28,580 --> 00:21:34,119
web design has not been brought it still

00:21:32,280 --> 00:21:37,479
looks the same if it was suppose

00:21:34,119 --> 00:21:40,989
to look the same if it was changed then

00:21:37,479 --> 00:21:45,359
you will need to regenerate baseline

00:21:40,989 --> 00:21:47,859
images those images you are comparing to

00:21:45,359 --> 00:21:50,069
some people says that frameworks are

00:21:47,859 --> 00:21:53,079
just collection of other people hacks

00:21:50,069 --> 00:21:58,509
and of course there are frameworks

00:21:53,079 --> 00:22:00,699
around my favorite one is bok choy it's

00:21:58,509 --> 00:22:02,889
a pun because there was a framework

00:22:00,699 --> 00:22:05,579
named after some cabbage in Ruby

00:22:02,889 --> 00:22:08,139
language and they were development

00:22:05,579 --> 00:22:11,729
framework for a certain testing in

00:22:08,139 --> 00:22:15,039
Python and they named it butcher it is

00:22:11,729 --> 00:22:18,449
nose based framework which extends

00:22:15,039 --> 00:22:21,879
selenium and implements needle and

00:22:18,449 --> 00:22:25,599
implements as a modernized helpers too

00:22:21,879 --> 00:22:29,229
helper tools I use it and I elected and

00:22:25,599 --> 00:22:32,589
but there are other notable are pious

00:22:29,229 --> 00:22:35,789
entre a bit on maintained and new one

00:22:32,589 --> 00:22:42,269
called bedroom from bar gaming company

00:22:35,789 --> 00:22:45,220
and that's mostly it thank you I am now

00:22:42,269 --> 00:22:51,960
welcoming your questions

00:22:45,220 --> 00:22:51,960
[Applause]

00:22:52,049 --> 00:22:56,740
then we put time for some questions we

00:22:54,970 --> 00:23:04,360
have a microphone please raise your hand

00:22:56,740 --> 00:23:07,090
if you have one thank you very much you

00:23:04,360 --> 00:23:09,159
talk and when you choose to use selenium

00:23:07,090 --> 00:23:14,710
and when you choose to do the request

00:23:09,159 --> 00:23:19,539
tests if we are working with browser

00:23:14,710 --> 00:23:21,999
things gives our mechanics which happen

00:23:19,539 --> 00:23:25,090
in a browser JavaScript you have to use

00:23:21,999 --> 00:23:28,600
selenium if there is only check phone

00:23:25,090 --> 00:23:32,590
some element is present in an HTML of a

00:23:28,600 --> 00:23:35,470
page some element is present in JSON

00:23:32,590 --> 00:23:37,509
response of your web server it is easy

00:23:35,470 --> 00:23:40,179
to check with request and request a

00:23:37,509 --> 00:23:42,220
hundred times faster than selenium as

00:23:40,179 --> 00:23:45,840
all things should not be sent to a

00:23:42,220 --> 00:23:45,840
browser it will save your life

00:23:48,570 --> 00:23:53,200
hello think if we will talk so I want

00:23:51,429 --> 00:23:55,539
use selenium to actually it has a very

00:23:53,200 --> 00:23:58,629
big data verification and a problem I

00:23:55,539 --> 00:24:00,210
had There was that when I obviously used

00:23:58,629 --> 00:24:02,259
wait for element right and then

00:24:00,210 --> 00:24:04,210
accounted element and the problem is

00:24:02,259 --> 00:24:06,249
that apparently wait for element is not

00:24:04,210 --> 00:24:08,740
an atomic operation which means that if

00:24:06,249 --> 00:24:11,230
another thing on the side changes in the

00:24:08,740 --> 00:24:13,059
meantime it would like put the virtual

00:24:11,230 --> 00:24:14,740
brow as a virtual occurs at the location

00:24:13,059 --> 00:24:16,119
which would then be invalid and it would

00:24:14,740 --> 00:24:18,249
click like an image that loaded in the

00:24:16,119 --> 00:24:19,419
meantime so obviously I can't really

00:24:18,249 --> 00:24:21,220
wait for all the elements to load

00:24:19,419 --> 00:24:23,350
because there might be JavaScript that

00:24:21,220 --> 00:24:25,570
constantly load things so what do you do

00:24:23,350 --> 00:24:28,119
in such a situation where the your site

00:24:25,570 --> 00:24:29,889
layout might change and you don't like

00:24:28,119 --> 00:24:31,389
it's not not deterministic that it

00:24:29,889 --> 00:24:34,480
changes and you can't really wait for

00:24:31,389 --> 00:24:35,619
everything to stop getting data what do

00:24:34,480 --> 00:24:40,019
you do in such a situation

00:24:35,619 --> 00:24:45,700
ah I have showed in my tests exactly

00:24:40,019 --> 00:24:48,429
this question I had when angular views

00:24:45,700 --> 00:24:50,559
are loading they load some elements and

00:24:48,429 --> 00:24:53,289
then some they build the structure in

00:24:50,559 --> 00:24:56,799
those elements inside maybe they don't

00:24:53,289 --> 00:25:00,100
load all other things or images all

00:24:56,799 --> 00:25:03,100
styles we don't wait for them key is to

00:25:00,100 --> 00:25:06,250
understand that each element has to

00:25:03,100 --> 00:25:09,130
in your document object model like on

00:25:06,250 --> 00:25:11,649
our first page if there is a list of

00:25:09,130 --> 00:25:14,200
heroes present we can assume that the

00:25:11,649 --> 00:25:17,590
page has loaded if on the second page

00:25:14,200 --> 00:25:19,450
there is an input on this page we can

00:25:17,590 --> 00:25:22,440
assume this page has loaded and we can

00:25:19,450 --> 00:25:22,440
start interact with them

00:25:35,170 --> 00:25:39,790
and thank you very much for the talk and

00:25:37,270 --> 00:25:41,890
I also have a question about two

00:25:39,790 --> 00:25:45,280
questions actually about selenium I'm

00:25:41,890 --> 00:25:47,620
using it to run Nagi's checks so I'm

00:25:45,280 --> 00:25:49,570
running constantly running gave me five

00:25:47,620 --> 00:25:52,420
minutes running logging checks and web

00:25:49,570 --> 00:25:57,940
applications and what I've problems I've

00:25:52,420 --> 00:26:01,000
had are and one the a process so that

00:25:57,940 --> 00:26:04,060
Chrome the driver doesn't die so when I

00:26:01,000 --> 00:26:08,230
quit or closed the selenium I can see

00:26:04,060 --> 00:26:11,290
dead processes and I'm not sure if I'm

00:26:08,230 --> 00:26:15,030
doing something wrong or and why this

00:26:11,290 --> 00:26:18,990
the webdriver process isn't dying and

00:26:15,030 --> 00:26:22,030
machines does that suggest teacher of

00:26:18,990 --> 00:26:23,140
selenium driver it doesn't close drivers

00:26:22,030 --> 00:26:25,870
it doesn't close your browser

00:26:23,140 --> 00:26:29,220
automatically you have to call quit

00:26:25,870 --> 00:26:33,520
explicitly if you want it to close and

00:26:29,220 --> 00:26:35,200
also I can recommend if you are want to

00:26:33,520 --> 00:26:37,360
if you want to run this thing

00:26:35,200 --> 00:26:45,660
continuously on your server you should

00:26:37,360 --> 00:26:45,660
try either runyan a phantom GS like here

00:26:47,730 --> 00:26:53,050
when we were just initializing driver

00:26:50,260 --> 00:26:55,060
cab driver chrome you can initialize the

00:26:53,050 --> 00:26:58,120
driver phantom dress or you can

00:26:55,060 --> 00:27:01,120
initialize chrome with some options and

00:26:58,120 --> 00:27:04,270
it will run running headless mode it

00:27:01,120 --> 00:27:07,780
will still pop up application but it

00:27:04,270 --> 00:27:12,070
will not require graphic server you can

00:27:07,780 --> 00:27:14,380
run it on ec2 instance elastic computing

00:27:12,070 --> 00:27:17,290
Amazon instance you can run it on a

00:27:14,380 --> 00:27:19,630
Linux server result display at all it

00:27:17,290 --> 00:27:22,330
will consume much less memory and you

00:27:19,630 --> 00:27:23,860
can have it running constantly okay and

00:27:22,330 --> 00:27:26,250
it sounds good the other problem was

00:27:23,860 --> 00:27:29,530
then that it was filling up my temp so

00:27:26,250 --> 00:27:31,720
when the browser died he was leaving

00:27:29,530 --> 00:27:34,270
artifacts in the temp so I could see the

00:27:31,720 --> 00:27:37,030
memory usage and the Machine rising and

00:27:34,270 --> 00:27:39,120
also disk usage she was leaving behind

00:27:37,030 --> 00:27:41,980
an attempt directory quite a large

00:27:39,120 --> 00:27:44,159
chrome footprint

00:27:41,980 --> 00:27:49,720
so what I was doing which is crowning

00:27:44,159 --> 00:27:53,200
deleting the processes the well that's

00:27:49,720 --> 00:27:55,240
transient but I guess then you have to

00:27:53,200 --> 00:27:57,970
write your bunch of scripts we should

00:27:55,240 --> 00:28:00,399
clean up after that and kill instance if

00:27:57,970 --> 00:28:02,559
it does not die maybe you have outdated

00:28:00,399 --> 00:28:05,649
selenium driver this some issues or

00:28:02,559 --> 00:28:14,799
maybe you have outdated browser yeah

00:28:05,649 --> 00:28:18,720
thank you thank you for the talk hi and

00:28:14,799 --> 00:28:24,880
I want to ask two questions if I can and

00:28:18,720 --> 00:28:28,059
first one about you had an error in

00:28:24,880 --> 00:28:31,120
angular which prevented you like which

00:28:28,059 --> 00:28:33,490
raised the failure I'm assuming that the

00:28:31,120 --> 00:28:35,649
javascript error solves is there a way

00:28:33,490 --> 00:28:38,019
you could return that trace back for

00:28:35,649 --> 00:28:40,210
instance for that javascript later on

00:28:38,019 --> 00:28:42,730
dev console of Chrome or maybe from the

00:28:40,210 --> 00:28:46,120
headless driver and the second question

00:28:42,730 --> 00:28:48,220
I have is which versions of Chrome does

00:28:46,120 --> 00:28:50,470
the webdriver support and basically who

00:28:48,220 --> 00:28:52,149
maintains it is it is it something from

00:28:50,470 --> 00:28:53,740
selenium that they maintain or is

00:28:52,149 --> 00:28:56,820
external can you write your own drivers

00:28:53,740 --> 00:28:56,820
thank you

00:29:01,880 --> 00:29:08,540
selenium does selenium does not give

00:29:05,630 --> 00:29:12,250
JavaScript raise burg unless you set up

00:29:08,540 --> 00:29:14,840
something in your page which would but

00:29:12,250 --> 00:29:16,280
short answer is no selenium does not

00:29:14,840 --> 00:29:19,490
give you trace back selenium just

00:29:16,280 --> 00:29:22,850
indicates the problem but by the way

00:29:19,490 --> 00:29:25,900
when we mention it when you build those

00:29:22,850 --> 00:29:28,760
page object classes you could create

00:29:25,900 --> 00:29:31,340
exceptions for you to use selenium

00:29:28,760 --> 00:29:34,340
exceptions are I haven't found something

00:29:31,340 --> 00:29:36,770
I could not locate an element but you

00:29:34,340 --> 00:29:40,040
when you expect those things to happen

00:29:36,770 --> 00:29:43,580
in your page objects like locate the

00:29:40,040 --> 00:29:46,250
search box or try to type something

00:29:43,580 --> 00:29:49,640
there you can raise your own exceptions

00:29:46,250 --> 00:29:53,210
and they might be more convenient for

00:29:49,640 --> 00:29:58,280
you and it makes it debugging a bit

00:29:53,210 --> 00:30:01,400
easier and also when selenium needs a

00:29:58,280 --> 00:30:05,840
page which is not some element mission

00:30:01,400 --> 00:30:08,600
but full-blown jungle exception yellow

00:30:05,840 --> 00:30:11,050
page database could not connect or

00:30:08,600 --> 00:30:14,720
something like this you could also

00:30:11,050 --> 00:30:16,940
detect the situation and raise more

00:30:14,720 --> 00:30:18,440
meaningful exception not some element

00:30:16,940 --> 00:30:20,960
was not found of course there was not

00:30:18,440 --> 00:30:23,960
element found under that yellow page but

00:30:20,960 --> 00:30:30,860
rather general cell arrays textual

00:30:23,960 --> 00:30:35,510
exception from your use case and and for

00:30:30,860 --> 00:30:38,750
a second question so yeah yeah who

00:30:35,510 --> 00:30:41,510
maintains it selenium is maintained by

00:30:38,750 --> 00:30:47,020
open source companies sauce labs and

00:30:41,510 --> 00:30:50,180
selenium and those things

00:30:47,020 --> 00:30:54,400
selenium interacts with browser using

00:30:50,180 --> 00:30:59,810
webdriver protocol which is open wishes

00:30:54,400 --> 00:31:02,750
w3c standard JSON over HTTP and those

00:30:59,810 --> 00:31:05,210
little things which take requests from

00:31:02,750 --> 00:31:08,920
selenium and translate them into browser

00:31:05,210 --> 00:31:11,750
actions called webdriver and drivers and

00:31:08,920 --> 00:31:15,020
the best part is that they are

00:31:11,750 --> 00:31:15,800
maintained by browser vendors Google

00:31:15,020 --> 00:31:18,110
themselves

00:31:15,800 --> 00:31:22,900
the driver for Google Chrome and Mozilla

00:31:18,110 --> 00:31:22,900
themselves create a driver for Firefox

00:31:24,760 --> 00:31:30,380
we don't have more time for questions

00:31:26,810 --> 00:31:32,570
you can of course as team afterwards to

00:31:30,380 --> 00:31:34,840
remember that from the app you can vote

00:31:32,570 --> 00:31:37,790
you can rate this question you can also

00:31:34,840 --> 00:31:40,340
add comments at some feedback that can

00:31:37,790 --> 00:31:44,140
be useful for team for future talks so

00:31:40,340 --> 00:31:51,539
please and cup your hands again 14

00:31:44,140 --> 00:31:51,539

YouTube URL: https://www.youtube.com/watch?v=9dd_nHuXBgw


