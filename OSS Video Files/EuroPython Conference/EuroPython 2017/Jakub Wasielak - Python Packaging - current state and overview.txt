Title: Jakub Wasielak - Python Packaging - current state and overview
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Python Packaging - current state and overview
[EuroPython 2017 - Talk - 2017-07-10 - PythonAnywhere Room]
[Rimini, Italy]

Historically, Python packaging has been a source of significant pain for even the most devoted Python enthusiasts. I've found myself in the situation, where I did know the basic concepts behind the tools, but despite that only thing I could do was following tutorials. That was the time to change it and that's the reason this presentation was written.

In this talk, I'll provide a quick overview of the current state of Python packaging tools. I'll mostly focus on setuptools, pip and wheels, putting an emphasis on their superiority over their precursors. I'll also list down the honorable mentions of tools worth knowing. Then I'll share examples of how you can use the features of the Setuptools library - those well known and those we use when pip-installing packages, but most of us can't name them.

The point of this presentation is to explain how to use tools which are all there, just waiting to make developing, testing, and distributing our Python packages easier. Doesn't matter if you're a Python expert or a beginner - the knowledge covered by this presentation will be useful despite your level.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,410 --> 00:00:09,930
hi so we've already had a little bit of

00:00:07,500 --> 00:00:12,570
introduction on the keynote today about

00:00:09,930 --> 00:00:15,240
few things that I'm going to say but I'm

00:00:12,570 --> 00:00:17,670
going to say more about it of course I'm

00:00:15,240 --> 00:00:19,980
going to introduce myself my name is

00:00:17,670 --> 00:00:23,340
Jacob I live in Poland in Krakov

00:00:19,980 --> 00:00:26,460
I attend a lot to local community which

00:00:23,340 --> 00:00:28,680
is Peconic also attend to Python PL

00:00:26,460 --> 00:00:31,169
which will be held in a month from now

00:00:28,680 --> 00:00:34,590
so everybody's invited we speak mostly

00:00:31,169 --> 00:00:38,820
English in there and also recently I

00:00:34,590 --> 00:00:41,510
started I started teaching children I'm

00:00:38,820 --> 00:00:44,460
starting it started making conference to

00:00:41,510 --> 00:00:46,470
to invite children to the world of

00:00:44,460 --> 00:00:48,750
technology and this is cod Erik and

00:00:46,470 --> 00:00:51,390
started in the two biggest cities in

00:00:48,750 --> 00:00:54,720
Poland so that's a little bit about me

00:00:51,390 --> 00:00:57,720
and why I decided to make this talk a

00:00:54,720 --> 00:01:01,530
few years ago I have put my first

00:00:57,720 --> 00:01:03,870
package on pi PI and no idea how I did

00:01:01,530 --> 00:01:06,299
it I just run some tutorials copied some

00:01:03,870 --> 00:01:06,810
files pasted it in run some comments it

00:01:06,299 --> 00:01:09,119
worked

00:01:06,810 --> 00:01:11,700
package is still on pi PI I don't think

00:01:09,119 --> 00:01:14,759
anyone has downloaded that yet it's a

00:01:11,700 --> 00:01:17,069
minor package but that was everything I

00:01:14,759 --> 00:01:19,350
knew about setup tools and for those

00:01:17,069 --> 00:01:21,929
three years from the time I've been

00:01:19,350 --> 00:01:23,999
waiting for someone to make a good talk

00:01:21,929 --> 00:01:25,979
about Python packaging on any conference

00:01:23,999 --> 00:01:27,689
that I've attended and no one did it and

00:01:25,979 --> 00:01:31,350
even here I was the only one who

00:01:27,689 --> 00:01:33,959
proposed that talk so finally I decided

00:01:31,350 --> 00:01:35,789
that okay I need to learn by myself I

00:01:33,959 --> 00:01:37,530
need to read it consulted with people

00:01:35,789 --> 00:01:39,959
who use it every day and make this comes

00:01:37,530 --> 00:01:43,049
make this talk on my own and that's why

00:01:39,959 --> 00:01:45,479
I'm here so don't see me as an expert

00:01:43,049 --> 00:01:47,909
I'm not inviting package Authority I'm

00:01:45,479 --> 00:01:51,719
just someone who read a lot about it and

00:01:47,909 --> 00:01:53,969
try to pack it all into one 45 minutes

00:01:51,719 --> 00:01:56,159
presentation so I guess that there are

00:01:53,969 --> 00:01:59,420
people here in this room who has better

00:01:56,159 --> 00:02:02,249
knowledge on this topic than I have and

00:01:59,420 --> 00:02:04,439
when I started when I finally decided to

00:02:02,249 --> 00:02:06,899
that I need to touch this topic and

00:02:04,439 --> 00:02:09,780
usually we have a simple architecture

00:02:06,899 --> 00:02:12,150
when we work on we have a project which

00:02:09,780 --> 00:02:14,910
has few dependencies and that's what I

00:02:12,150 --> 00:02:16,830
was usually doing but when I started

00:02:14,910 --> 00:02:19,500
working at you go

00:02:16,830 --> 00:02:21,720
year and a half ago and the architecture

00:02:19,500 --> 00:02:24,090
was much more complicated and it is not

00:02:21,720 --> 00:02:26,310
true because the dependencies are also

00:02:24,090 --> 00:02:30,810
there are a lot of common dependencies

00:02:26,310 --> 00:02:34,770
so having all of these systems that we

00:02:30,810 --> 00:02:36,420
use these services with the requirements

00:02:34,770 --> 00:02:40,170
written in the requirement that takes

00:02:36,420 --> 00:02:43,530
the files and having them separately and

00:02:40,170 --> 00:02:46,350
keeping them on some locals some shared

00:02:43,530 --> 00:02:49,710
storage that would be awful and that is

00:02:46,350 --> 00:02:51,900
why we use set up dos and every package

00:02:49,710 --> 00:02:54,330
that we use has a well written set up

00:02:51,900 --> 00:02:56,760
the PI file and when I first saw it I

00:02:54,330 --> 00:02:59,340
thought well that's amazing I have no

00:02:56,760 --> 00:03:00,960
idea how it's working but that's amazing

00:02:59,340 --> 00:03:05,160
so now I have a better understanding on

00:03:00,960 --> 00:03:06,780
that and but the other purpose of this

00:03:05,160 --> 00:03:08,700
talk is to say a little bit about the

00:03:06,780 --> 00:03:12,690
current state of item packaging because

00:03:08,700 --> 00:03:15,240
it's still moving right now there are a

00:03:12,690 --> 00:03:17,490
lot of changes going on what I'm really

00:03:15,240 --> 00:03:19,890
glad these are changes of existing

00:03:17,490 --> 00:03:23,209
systems these are propositions how we

00:03:19,890 --> 00:03:25,830
should evolve and this is not like in

00:03:23,209 --> 00:03:28,290
JavaScript where someone just adds a new

00:03:25,830 --> 00:03:30,030
library and says this is the new one

00:03:28,290 --> 00:03:31,260
that everybody should be working but

00:03:30,030 --> 00:03:33,270
there are five people to do that

00:03:31,260 --> 00:03:37,350
thanks mo Tennessee so no one knows what

00:03:33,270 --> 00:03:39,989
to use in Python we are evolving so

00:03:37,350 --> 00:03:43,500
there is packaging Python or cloud by

00:03:39,989 --> 00:03:45,870
Python packaging authorities which shows

00:03:43,500 --> 00:03:48,510
us the current state and this is the

00:03:45,870 --> 00:03:50,820
list of tools that we should use as a

00:03:48,510 --> 00:03:53,340
Python developers and is divided into

00:03:50,820 --> 00:03:55,170
two parts the first one our installation

00:03:53,340 --> 00:03:58,440
two recommendations which is of course

00:03:55,170 --> 00:04:01,590
pip and which ones there are more

00:03:58,440 --> 00:04:04,590
propositions in this area for example

00:04:01,590 --> 00:04:07,140
Conda for for holding virtual ends on

00:04:04,590 --> 00:04:09,390
your local environment and some more

00:04:07,140 --> 00:04:11,430
stuff and there are packaging tools

00:04:09,390 --> 00:04:14,400
recommendations which are set up tools

00:04:11,430 --> 00:04:16,950
that will be the main topic of this

00:04:14,400 --> 00:04:20,120
conversation biggest wheels which I'll

00:04:16,950 --> 00:04:23,340
also cover and twine which I thought

00:04:20,120 --> 00:04:27,180
some time ago that it will be surely

00:04:23,340 --> 00:04:29,969
dead soon but it is not twine is a tool

00:04:27,180 --> 00:04:33,509
to upload packages to pi PI

00:04:29,969 --> 00:04:35,909
and the biggest advantage of twine for

00:04:33,509 --> 00:04:38,849
some time at least when I started doing

00:04:35,909 --> 00:04:42,119
that presentation about a year ago was

00:04:38,849 --> 00:04:44,879
that it uses HTTP what also set up those

00:04:42,119 --> 00:04:46,949
does from some Python version but twine

00:04:44,879 --> 00:04:50,179
has some more advantages and will be

00:04:46,949 --> 00:04:54,029
surely used more in the in the future

00:04:50,179 --> 00:04:59,309
and so this is what I'm going to talk

00:04:54,029 --> 00:05:01,739
about today and first of all if you have

00:04:59,309 --> 00:05:05,339
your setup by file you can of course run

00:05:01,739 --> 00:05:07,349
- - help which will briefly say you what

00:05:05,339 --> 00:05:10,739
you can do but much more helpful

00:05:07,349 --> 00:05:12,689
function is - - hub comments which

00:05:10,739 --> 00:05:17,789
really shows you what comments you can

00:05:12,689 --> 00:05:21,749
run on your setup the PI file so just to

00:05:17,789 --> 00:05:25,589
know what the level is who used setup

00:05:21,749 --> 00:05:29,759
the PI comment here okay and who wrote

00:05:25,589 --> 00:05:33,089
setup the PI file okay a lot of you so I

00:05:29,759 --> 00:05:36,360
will be be short on the on the next

00:05:33,089 --> 00:05:39,239
section and how does this set up the pie

00:05:36,360 --> 00:05:40,800
file look like it is just a setup

00:05:39,239 --> 00:05:44,699
function with a lot of keywords

00:05:40,800 --> 00:05:47,550
arguments this one is downloaded for an

00:05:44,699 --> 00:05:50,610
example pi pi project I know that the

00:05:47,550 --> 00:05:52,469
keyword arguments here have spices near

00:05:50,610 --> 00:05:54,959
the equals and that's not that H but

00:05:52,469 --> 00:05:57,539
I've noticed that yesterday so I managed

00:05:54,959 --> 00:06:00,659
to fix that and what do we have in the

00:05:57,539 --> 00:06:02,909
set of the PI file of course a name of

00:06:00,659 --> 00:06:06,869
the project which must be a unique name

00:06:02,909 --> 00:06:08,969
for the pi PI and it should be a name

00:06:06,869 --> 00:06:14,969
which says something about the project

00:06:08,969 --> 00:06:17,309
that some artifacts and the URL so

00:06:14,969 --> 00:06:19,589
probably the URL of the package will be

00:06:17,309 --> 00:06:22,169
just a github page where you host it or

00:06:19,589 --> 00:06:25,529
if you have some documentation then that

00:06:22,169 --> 00:06:27,089
might be this the version of the project

00:06:25,529 --> 00:06:30,360
and this is something that I'm going to

00:06:27,089 --> 00:06:32,519
stop for a while you can write a version

00:06:30,360 --> 00:06:35,009
like that and you can claim that you

00:06:32,519 --> 00:06:37,189
will always remember to bump the version

00:06:35,009 --> 00:06:39,899
when you upload the package but you want

00:06:37,189 --> 00:06:42,959
and I also believe that I will do that

00:06:39,899 --> 00:06:43,560
the same and I did forget once or twice

00:06:42,959 --> 00:06:45,600
so

00:06:43,560 --> 00:06:51,720
that is where the handful package comes

00:06:45,600 --> 00:06:54,300
in gating course and this is the setup

00:06:51,720 --> 00:06:56,790
tools SCM and this is a cool feature

00:06:54,300 --> 00:06:59,639
that automatically bumps your version

00:06:56,790 --> 00:07:02,490
and that's only one of the features of

00:06:59,639 --> 00:07:05,630
the tool so of course your project is

00:07:02,490 --> 00:07:08,310
held in git because everyone uses gate

00:07:05,630 --> 00:07:12,720
editor is that tag from the from the

00:07:08,310 --> 00:07:15,210
GUID you just need to add they use a CM

00:07:12,720 --> 00:07:17,729
version true in your package and said

00:07:15,210 --> 00:07:19,860
that said the setup requires setup

00:07:17,729 --> 00:07:22,620
requires is a list of packages that will

00:07:19,860 --> 00:07:25,220
be automatically installed whenever you

00:07:22,620 --> 00:07:28,290
run any set up the PI command as I've

00:07:25,220 --> 00:07:30,360
heard sentence that it's not the best to

00:07:28,290 --> 00:07:32,639
put set up those SCM in the setup

00:07:30,360 --> 00:07:34,169
requires because you might not have

00:07:32,639 --> 00:07:36,990
internet connection one you want to run

00:07:34,169 --> 00:07:39,210
side by functions and that's true but in

00:07:36,990 --> 00:07:41,639
that case you just need to have set up

00:07:39,210 --> 00:07:44,820
those SCM somewhere locally hosted and

00:07:41,639 --> 00:07:48,510
install that and for the versions of the

00:07:44,820 --> 00:07:53,940
of the packages it is not fully assemble

00:07:48,510 --> 00:07:58,590
it is a path for 140 so if usual you

00:07:53,940 --> 00:08:00,900
just use number dot number dot number

00:07:58,590 --> 00:08:04,260
but there is also a possibility to use

00:08:00,900 --> 00:08:07,200
those better demo and all the all the

00:08:04,260 --> 00:08:10,650
other naming conventions and it's all

00:08:07,200 --> 00:08:12,810
written well in the peps so this only

00:08:10,650 --> 00:08:15,810
one feature of setup to the CM but there

00:08:12,810 --> 00:08:17,550
will be more and outer end out your

00:08:15,810 --> 00:08:21,360
email I think that's pretty obvious it's

00:08:17,550 --> 00:08:23,910
good to set up through data so someone

00:08:21,360 --> 00:08:27,479
might reach you not to give any fake

00:08:23,910 --> 00:08:30,240
fake email at the description and that's

00:08:27,479 --> 00:08:32,700
also a good practice try to keep a long

00:08:30,240 --> 00:08:35,039
description the same as a readme file

00:08:32,700 --> 00:08:37,979
don't try to paste it in here because

00:08:35,039 --> 00:08:41,190
again you will one day forget to update

00:08:37,979 --> 00:08:43,560
that rate is of course some I overeat

00:08:41,190 --> 00:08:45,240
function that will just read the readme

00:08:43,560 --> 00:08:49,550
file that is also attached to the

00:08:45,240 --> 00:08:53,880
project that's a good convention to do

00:08:49,550 --> 00:08:56,180
also always try to add a license if you

00:08:53,880 --> 00:08:59,470
don't add any license

00:08:56,180 --> 00:09:03,860
no one is really available to use your

00:08:59,470 --> 00:09:08,000
to use your package so if you don't care

00:09:03,860 --> 00:09:10,610
about license just at BSD or comma

00:09:08,000 --> 00:09:12,350
creative and that means that people will

00:09:10,610 --> 00:09:14,390
be available to you that I'm not a

00:09:12,350 --> 00:09:17,570
lawyer so I didn't even know what those

00:09:14,390 --> 00:09:20,089
slices are but if you want to read a

00:09:17,570 --> 00:09:23,540
little bit about it and edit the project

00:09:20,089 --> 00:09:26,600
and enter keywords keywords and

00:09:23,540 --> 00:09:28,970
classifiers these are things that says

00:09:26,600 --> 00:09:31,820
more about the product we use keywords

00:09:28,970 --> 00:09:35,830
are used for better better search of the

00:09:31,820 --> 00:09:39,500
project and classifiers are is a list of

00:09:35,830 --> 00:09:41,690
lists of things that group our product

00:09:39,500 --> 00:09:45,080
that will classify our product and this

00:09:41,690 --> 00:09:47,270
is an example of the set up tools it has

00:09:45,080 --> 00:09:49,370
some keywords set and a list of

00:09:47,270 --> 00:09:52,990
categories and these categories are just

00:09:49,370 --> 00:09:55,820
the classifiers and my personal best

00:09:52,990 --> 00:09:58,610
classifier that I love is private do not

00:09:55,820 --> 00:10:00,650
upload and know not everybody knows you

00:09:58,610 --> 00:10:02,540
won't upload your package if you have

00:10:00,650 --> 00:10:06,500
this as a classifier so you won't

00:10:02,540 --> 00:10:12,160
accidentally upload some bad version of

00:10:06,500 --> 00:10:15,380
your package strange things happening

00:10:12,160 --> 00:10:18,620
and the packages also you can list your

00:10:15,380 --> 00:10:20,810
packages in the set of the five file but

00:10:18,620 --> 00:10:24,140
what for if you can just write find

00:10:20,810 --> 00:10:26,720
packages and even just internal packages

00:10:24,140 --> 00:10:29,360
equals find packages prices will work

00:10:26,720 --> 00:10:33,440
but you can set up the source or or

00:10:29,360 --> 00:10:39,860
modify it on the go just good to know

00:10:33,440 --> 00:10:41,600
that is there and there's more so you

00:10:39,860 --> 00:10:43,820
probably know that there is a

00:10:41,600 --> 00:10:47,300
requirement that takes the file that

00:10:43,820 --> 00:10:50,510
it's not a convention but most people

00:10:47,300 --> 00:10:53,240
use requirements that takes ten but for

00:10:50,510 --> 00:10:54,740
the Python packaging you keep what you

00:10:53,240 --> 00:10:57,020
usually keep in the requirements that

00:10:54,740 --> 00:10:59,540
takes that and that is all we require so

00:10:57,020 --> 00:11:02,540
that is just the list of packages that

00:10:59,540 --> 00:11:06,230
are dependencies of our package they can

00:11:02,540 --> 00:11:09,170
be pinned to some specific version or to

00:11:06,230 --> 00:11:09,710
the range of versions so exactly like in

00:11:09,170 --> 00:11:12,980
the require

00:11:09,710 --> 00:11:14,480
the texture and what is interesting you

00:11:12,980 --> 00:11:18,890
can still have requirements would take

00:11:14,480 --> 00:11:22,010
that and it is you're encouraged to do

00:11:18,890 --> 00:11:24,740
that and you can write dot internal line

00:11:22,010 --> 00:11:27,620
of your ear requirements that takes that

00:11:24,740 --> 00:11:29,690
and that dot will install packages from

00:11:27,620 --> 00:11:32,270
the install requires of your setup that

00:11:29,690 --> 00:11:34,720
by file I don't have slide for that but

00:11:32,270 --> 00:11:37,510
that's something that you can do so

00:11:34,720 --> 00:11:39,950
often there is a way to keep

00:11:37,510 --> 00:11:42,530
requirements of text there with some

00:11:39,950 --> 00:11:45,110
additional files additional dependencies

00:11:42,530 --> 00:11:47,210
that you want to use locally for local

00:11:45,110 --> 00:11:49,280
development but the ether requires that

00:11:47,210 --> 00:11:51,200
is something that when someone else

00:11:49,280 --> 00:11:53,240
writes pip install name of your package

00:11:51,200 --> 00:11:55,630
everything from the in style requires

00:11:53,240 --> 00:11:58,970
will get installed on this computer so

00:11:55,630 --> 00:12:02,060
don't add things that he wants to need

00:11:58,970 --> 00:12:03,790
because let's not be rude don't make

00:12:02,060 --> 00:12:08,240
people download more data than they need

00:12:03,790 --> 00:12:11,030
and they're also extras so this is an

00:12:08,240 --> 00:12:13,310
example from ipython and you can have

00:12:11,030 --> 00:12:16,190
some extras which says that if you have

00:12:13,310 --> 00:12:18,080
some extra item like a notebook of item

00:12:16,190 --> 00:12:20,480
that will sell some additional

00:12:18,080 --> 00:12:23,360
dependencies for you and you run it with

00:12:20,480 --> 00:12:27,470
the install ipython and notebook in the

00:12:23,360 --> 00:12:29,810
braces and you can also add tests

00:12:27,470 --> 00:12:33,470
require which will be run during the

00:12:29,810 --> 00:12:36,680
Python set up by tests but this requires

00:12:33,470 --> 00:12:39,110
a bit of configuration and actually I

00:12:36,680 --> 00:12:41,600
talked to a guy from Python packaging

00:12:39,110 --> 00:12:43,970
authorities he he said that is not

00:12:41,600 --> 00:12:46,490
encouraged to use test requires anymore

00:12:43,970 --> 00:12:50,030
and that is much better to use extra

00:12:46,490 --> 00:12:52,460
testing or test and use talks for

00:12:50,030 --> 00:12:55,100
installation of these those packages and

00:12:52,460 --> 00:12:59,330
that is the way that probably they will

00:12:55,100 --> 00:13:03,140
be going to not use test requires that

00:12:59,330 --> 00:13:05,480
much anymore and talks have some ways to

00:13:03,140 --> 00:13:10,400
configure to read those those testing

00:13:05,480 --> 00:13:14,570
files so I won't go dipped into that and

00:13:10,400 --> 00:13:16,520
the last things are of the setup I file

00:13:14,570 --> 00:13:19,490
the entry point and that is something

00:13:16,520 --> 00:13:22,550
that I absolutely love and I didn't know

00:13:19,490 --> 00:13:24,860
that when I run will try and name of the

00:13:22,550 --> 00:13:28,160
of the environment I actually use entry

00:13:24,860 --> 00:13:30,380
points so I guess that everybody here at

00:13:28,160 --> 00:13:33,320
least once in his life used a true bond

00:13:30,380 --> 00:13:36,529
you can add console script and that will

00:13:33,320 --> 00:13:38,750
just save someone from writing those six

00:13:36,529 --> 00:13:41,870
additional characters seven including

00:13:38,750 --> 00:13:45,920
space every time they want to run the

00:13:41,870 --> 00:13:47,990
draw and by and for your package you can

00:13:45,920 --> 00:13:49,820
write any entry point that you want this

00:13:47,990 --> 00:13:52,670
is just the safe people time you can

00:13:49,820 --> 00:13:55,279
write that in readme to summarize the

00:13:52,670 --> 00:13:59,180
most commonly usages of your application

00:13:55,279 --> 00:14:01,519
and that's a really great way to to set

00:13:59,180 --> 00:14:02,540
up your environment like it more user

00:14:01,519 --> 00:14:06,829
friendly

00:14:02,540 --> 00:14:09,140
your package more user friendly and now

00:14:06,829 --> 00:14:11,420
that was the setup goodbye and there

00:14:09,140 --> 00:14:16,370
might be a setup dot config and that is

00:14:11,420 --> 00:14:18,560
separate file it looks like it for me

00:14:16,370 --> 00:14:20,740
when I looked for that at that for the

00:14:18,560 --> 00:14:24,350
first time I didn't have an idea what is

00:14:20,740 --> 00:14:27,700
what are the all those lines but that's

00:14:24,350 --> 00:14:31,880
pretty simple in the braces like the

00:14:27,700 --> 00:14:34,730
global it says when this conflict should

00:14:31,880 --> 00:14:36,980
be added so global means that every time

00:14:34,730 --> 00:14:40,610
so every run time you run setup the five

00:14:36,980 --> 00:14:43,910
functions where both equals one means

00:14:40,610 --> 00:14:47,209
that it will add - - burbles to your to

00:14:43,910 --> 00:14:50,270
your action so the second one B this

00:14:47,209 --> 00:14:52,700
will every time you build a wheel it

00:14:50,270 --> 00:14:55,790
will add dash dash Universal you won't

00:14:52,700 --> 00:14:57,829
see that but this will be happening and

00:14:55,790 --> 00:15:00,770
if you equals to something different

00:14:57,829 --> 00:15:02,450
than one like the is install every time

00:15:00,770 --> 00:15:06,230
you run a high density of goodbye

00:15:02,450 --> 00:15:10,040
install it would add dash dash index URL

00:15:06,230 --> 00:15:12,290
equals death by of the company and so

00:15:10,040 --> 00:15:15,500
pretty handful for the people who don't

00:15:12,290 --> 00:15:17,690
remember to write those functions or if

00:15:15,500 --> 00:15:19,910
you want to encourage to do that you can

00:15:17,690 --> 00:15:22,459
also attach some metadata like license

00:15:19,910 --> 00:15:27,079
file or even attach it to some tools

00:15:22,459 --> 00:15:28,850
like by test and the last file or that

00:15:27,079 --> 00:15:33,140
is required for this tableau pile is a

00:15:28,850 --> 00:15:35,570
manifest dot in so this is the when you

00:15:33,140 --> 00:15:36,080
do a project you don't always do that

00:15:35,570 --> 00:15:40,220
for

00:15:36,080 --> 00:15:43,279
right on you might have some HTT is HTML

00:15:40,220 --> 00:15:46,339
or some some images that you want to

00:15:43,279 --> 00:15:49,940
provide or anything any static any

00:15:46,339 --> 00:15:52,130
assets you keep this noted in manifested

00:15:49,940 --> 00:15:53,660
in and that means that when everybody

00:15:52,130 --> 00:15:55,640
will download this part when you will

00:15:53,660 --> 00:15:56,930
build this package this data will be in

00:15:55,640 --> 00:15:59,329
the package when someone will download

00:15:56,930 --> 00:16:02,029
this will also download the manifest in

00:15:59,329 --> 00:16:03,019
and that is the second grade think of

00:16:02,029 --> 00:16:06,050
the setup process

00:16:03,019 --> 00:16:10,519
SCM everything not in git ignore will be

00:16:06,050 --> 00:16:13,040
added invisibly to the manifest 13 so

00:16:10,519 --> 00:16:16,070
just keep your get ignore file written

00:16:13,040 --> 00:16:20,510
well and suppose as GM will care for the

00:16:16,070 --> 00:16:24,380
rest and getting to the point where I

00:16:20,510 --> 00:16:26,170
really love using setup tools and I love

00:16:24,380 --> 00:16:29,200
the functionality that it provides

00:16:26,170 --> 00:16:32,050
currently I'm working on four or five

00:16:29,200 --> 00:16:35,089
services which talk to each other and

00:16:32,050 --> 00:16:38,630
usually I develop one of them sometimes

00:16:35,089 --> 00:16:41,510
two so I have an environment that has

00:16:38,630 --> 00:16:43,790
all of these packages installed and they

00:16:41,510 --> 00:16:46,970
are running some locally some against

00:16:43,790 --> 00:16:49,579
some staging etc when I want to write a

00:16:46,970 --> 00:16:52,700
write changes to some package when I

00:16:49,579 --> 00:16:55,040
want to edit that I just run enters the

00:16:52,700 --> 00:16:58,220
setup to enter the directory of that

00:16:55,040 --> 00:17:01,130
project run pet Python setup I develop

00:16:58,220 --> 00:17:03,709
and automatically I will start using my

00:17:01,130 --> 00:17:05,929
local files of that project when I'm

00:17:03,709 --> 00:17:08,660
done with development I run Python set

00:17:05,929 --> 00:17:11,209
up the PI install and I'm using the most

00:17:08,660 --> 00:17:15,290
recent packaged version that is

00:17:11,209 --> 00:17:17,900
available and with it for me it's like a

00:17:15,290 --> 00:17:20,000
switch between developing this package

00:17:17,900 --> 00:17:22,790
using this package as a dependency and

00:17:20,000 --> 00:17:25,030
that's working pretty well for for more

00:17:22,790 --> 00:17:30,020
than a year and I haven't found any

00:17:25,030 --> 00:17:33,500
disadvantages of that and so for me that

00:17:30,020 --> 00:17:38,330
is like the core gain of this but there

00:17:33,500 --> 00:17:42,520
are also other advantages I want to test

00:17:38,330 --> 00:17:46,610
to say a few words about X versus wheels

00:17:42,520 --> 00:17:48,190
if are considered deprecated so you

00:17:46,610 --> 00:17:51,790
shouldn't use X and

00:17:48,190 --> 00:17:54,970
or you should use Google's and we'll

00:17:51,790 --> 00:17:59,560
have some advantages over X that I want

00:17:54,970 --> 00:18:03,100
to cover briefly so wills is just a way

00:17:59,560 --> 00:18:06,240
of keeping your binary distribution of

00:18:03,100 --> 00:18:12,070
that package it has an official pet that

00:18:06,240 --> 00:18:15,520
egg doesn't have existed in test and its

00:18:12,070 --> 00:18:17,980
naming conversion says more says a lot

00:18:15,520 --> 00:18:21,370
about the package so this is the name of

00:18:17,980 --> 00:18:24,460
the package - version of the package -

00:18:21,370 --> 00:18:28,420
version of the wheel so will can be

00:18:24,460 --> 00:18:32,500
versioned inside them - which by the new

00:18:28,420 --> 00:18:35,920
you want to use if that's Python 2 7 3 3

00:18:32,500 --> 00:18:38,320
5 or it can be both of them then

00:18:35,920 --> 00:18:42,280
operating system usually known but you

00:18:38,320 --> 00:18:48,190
can make some macro mac only packages or

00:18:42,280 --> 00:18:50,200
linux only ABI and the wheel name so

00:18:48,190 --> 00:18:52,210
what are the advantages there are no PI

00:18:50,200 --> 00:18:54,970
CI files inside they are being generated

00:18:52,210 --> 00:18:58,660
upon installation that's why one package

00:18:54,970 --> 00:19:02,650
my one wheel might be working both on

00:18:58,660 --> 00:19:05,590
Python 2 7 and 3 for the naming

00:19:02,650 --> 00:19:08,770
conversion of courses that's what I

00:19:05,590 --> 00:19:12,700
covered and installation of C component

00:19:08,770 --> 00:19:16,570
doesn't require a compiler so that's why

00:19:12,700 --> 00:19:20,590
you can use wheels probably on on any

00:19:16,570 --> 00:19:22,990
system better than you'd have use X and

00:19:20,590 --> 00:19:26,040
that is strongly encouraged to now

00:19:22,990 --> 00:19:29,680
upload binary distributions in wheels

00:19:26,040 --> 00:19:33,610
there is a Python wheels website this

00:19:29,680 --> 00:19:36,970
not that actual right now they have 254

00:19:33,610 --> 00:19:40,570
packages out of 360 mostly installed

00:19:36,970 --> 00:19:43,990
once covered they still didn't cover PI

00:19:40,570 --> 00:19:46,120
crypto SQL alchemy like this is these

00:19:43,990 --> 00:19:48,730
are the most known packages I pick up

00:19:46,120 --> 00:19:50,980
from the list I guess that this gives

00:19:48,730 --> 00:19:55,090
some problems with this site C

00:19:50,980 --> 00:19:58,290
components and that's why mostly this is

00:19:55,090 --> 00:20:00,700
scripting packages and database packages

00:19:58,290 --> 00:20:01,400
but it's moving forward when I started

00:20:00,700 --> 00:20:05,740
doing this

00:20:01,400 --> 00:20:10,700
it was like 200 of these now it's 254

00:20:05,740 --> 00:20:12,680
going forward and now a little break

00:20:10,700 --> 00:20:17,540
do you know what will happen when you

00:20:12,680 --> 00:20:22,790
run this grammar that comment anyone

00:20:17,540 --> 00:20:28,190
knows this is a mistake

00:20:22,790 --> 00:20:29,780
yeah II yeah but that will work there is

00:20:28,190 --> 00:20:34,130
a package called requirement

00:20:29,780 --> 00:20:36,290
- def text in the PI P I and someone

00:20:34,130 --> 00:20:38,990
mentioned that on one conference and I

00:20:36,290 --> 00:20:48,500
think it's a lovely idea and this is one

00:20:38,990 --> 00:20:50,900
of the issues on that package that was a

00:20:48,500 --> 00:20:54,920
short break and now getting to the deaf

00:20:50,900 --> 00:20:57,680
bye and so as I mentioned we use a lot

00:20:54,920 --> 00:21:01,430
of packages that are connected to each

00:20:57,680 --> 00:21:03,800
other and now there comes the problem of

00:21:01,430 --> 00:21:06,470
the storage of that data of course we

00:21:03,800 --> 00:21:09,050
can have some storage or some server

00:21:06,470 --> 00:21:10,910
storage that where we put the data where

00:21:09,050 --> 00:21:13,370
we put the packages widows and we

00:21:10,910 --> 00:21:15,560
download them from there and just pip

00:21:13,370 --> 00:21:18,140
install the wheel but that would be

00:21:15,560 --> 00:21:21,200
problematic and there comes a dead pipe

00:21:18,140 --> 00:21:24,020
with a help deaf byte is just a proxy to

00:21:21,200 --> 00:21:26,750
that pipeline so you can put your

00:21:24,020 --> 00:21:30,650
packages on your deaf PI and they will

00:21:26,750 --> 00:21:33,680
be only visible for you for for users of

00:21:30,650 --> 00:21:35,270
the Deaf PI but if there is no package

00:21:33,680 --> 00:21:39,380
on your instance of the Deaf fight that

00:21:35,270 --> 00:21:42,140
will point you to the PI P I so you can

00:21:39,380 --> 00:21:44,870
use that merely the same as you would

00:21:42,140 --> 00:21:47,570
have put your package on the PI PI's but

00:21:44,870 --> 00:21:50,060
you want in the company you want to have

00:21:47,570 --> 00:21:51,500
your packages private you don't want to

00:21:50,060 --> 00:21:53,630
upload them to the public because

00:21:51,500 --> 00:21:57,400
studies and company stuff of course

00:21:53,630 --> 00:21:59,960
and with the defy how do you use that

00:21:57,400 --> 00:22:03,620
first of all the most important file is

00:21:59,960 --> 00:22:06,230
the PI PRC which is required for the all

00:22:03,620 --> 00:22:10,220
set of the PI work and that's where you

00:22:06,230 --> 00:22:12,800
set up the upload point for the for your

00:22:10,220 --> 00:22:14,510
packages and you just set index server

00:22:12,800 --> 00:22:18,470
to your despise

00:22:14,510 --> 00:22:21,590
and you specify it more with the with

00:22:18,470 --> 00:22:23,300
the repository URL of that def pie and

00:22:21,590 --> 00:22:25,600
your username and password if you don't

00:22:23,300 --> 00:22:28,820
provide a password here it will prompt

00:22:25,600 --> 00:22:30,590
prompt user to you when whenever you try

00:22:28,820 --> 00:22:34,460
to upload or register part of a package

00:22:30,590 --> 00:22:37,700
and you can register and upload packages

00:22:34,460 --> 00:22:39,350
using Python set up by register for

00:22:37,700 --> 00:22:41,750
first of all you need to register your

00:22:39,350 --> 00:22:44,000
package before you upload that using

00:22:41,750 --> 00:22:46,250
setup goodbye I will get to twine in a

00:22:44,000 --> 00:22:51,950
second and then whenever your package is

00:22:46,250 --> 00:22:54,410
ready you just as this upload and that

00:22:51,950 --> 00:22:57,440
is one the important thing and you

00:22:54,410 --> 00:22:59,090
should make sure that you have no local

00:22:57,440 --> 00:23:00,680
changes when you do that if you have

00:22:59,090 --> 00:23:03,500
lockout changes they will also get

00:23:00,680 --> 00:23:06,020
uploaded and your version of the project

00:23:03,500 --> 00:23:08,120
will have some hash hash meaning that

00:23:06,020 --> 00:23:10,700
you have changed you have altered the

00:23:08,120 --> 00:23:13,250
current version I have done that once or

00:23:10,700 --> 00:23:15,770
twice and then you need to download

00:23:13,250 --> 00:23:17,900
despite tool to remove that package from

00:23:15,770 --> 00:23:19,100
death by that's problematic so that's

00:23:17,900 --> 00:23:22,460
the point where you need to just

00:23:19,100 --> 00:23:24,080
remember to usually get stash all your

00:23:22,460 --> 00:23:27,020
changes before you upload to your

00:23:24,080 --> 00:23:30,650
package but you can also do that with

00:23:27,020 --> 00:23:32,630
twine first of all you still you set up

00:23:30,650 --> 00:23:35,390
the fight to create your distribution

00:23:32,630 --> 00:23:38,630
like as this or biddest will as this

00:23:35,390 --> 00:23:40,700
stands for source distribution we define

00:23:38,630 --> 00:23:43,280
our distribution and then you just

00:23:40,700 --> 00:23:45,890
upload with twine upload this and

00:23:43,280 --> 00:23:49,760
whatever package you want and that

00:23:45,890 --> 00:23:54,320
resist that's just that and you can have

00:23:49,760 --> 00:23:56,240
even better ways to set it up that is

00:23:54,320 --> 00:23:58,250
the way the thing that I hate that you

00:23:56,240 --> 00:24:01,820
need to have your password either in

00:23:58,250 --> 00:24:04,160
that file or or write it every time you

00:24:01,820 --> 00:24:07,040
use that but with twine you can set the

00:24:04,160 --> 00:24:11,360
environment variable so if you have some

00:24:07,040 --> 00:24:14,450
kopalski train or any circuit any tool

00:24:11,360 --> 00:24:16,790
that stores your passwords on your PC

00:24:14,450 --> 00:24:19,010
and then you can just set it up to set

00:24:16,790 --> 00:24:21,320
this as an environment variable and

00:24:19,010 --> 00:24:24,500
don't care about your password anyone

00:24:21,320 --> 00:24:26,540
that's not still probably prompting and

00:24:24,500 --> 00:24:26,990
writing your password manual you will be

00:24:26,540 --> 00:24:32,030
more

00:24:26,990 --> 00:24:34,070
secure but that's for sure more secured

00:24:32,030 --> 00:24:38,840
and keeping your password plaintext in a

00:24:34,070 --> 00:24:42,710
pipe the IDRC now for the testing of the

00:24:38,840 --> 00:24:46,100
packages so there are few things that we

00:24:42,710 --> 00:24:47,480
might want to remember about after so

00:24:46,100 --> 00:24:51,070
whenever we want to upload the package

00:24:47,480 --> 00:24:53,780
we test it and everybody does that and

00:24:51,070 --> 00:24:56,679
so there are a few steps that we can

00:24:53,780 --> 00:24:59,450
take first one is just generate your

00:24:56,679 --> 00:25:02,960
distribution file and install that and

00:24:59,450 --> 00:25:04,250
that I didn't even realize before making

00:25:02,960 --> 00:25:05,300
this presentation that you can pip

00:25:04,250 --> 00:25:08,059
install tar.gz

00:25:05,300 --> 00:25:09,830
with the package but you can do that and

00:25:08,059 --> 00:25:12,740
you can also be installed as the wheel

00:25:09,830 --> 00:25:15,350
so we can prepare you can build your

00:25:12,740 --> 00:25:18,080
wheel move it to somewhere else prepare

00:25:15,350 --> 00:25:18,710
pure virtual ends and try installing

00:25:18,080 --> 00:25:21,860
your wheel

00:25:18,710 --> 00:25:24,200
that should work that's the first step

00:25:21,860 --> 00:25:27,290
so before you go public make sure that

00:25:24,200 --> 00:25:29,950
your package is packed well the second

00:25:27,290 --> 00:25:33,800
step that you can do and that's also not

00:25:29,950 --> 00:25:37,580
very commonly known is that you can put

00:25:33,800 --> 00:25:40,070
a test pie pie in your pie PIRC so you

00:25:37,580 --> 00:25:44,360
can upload your packages to test by pie

00:25:40,070 --> 00:25:47,420
instance which is not sharing its

00:25:44,360 --> 00:25:50,059
resources with a production pi pi so we

00:25:47,420 --> 00:25:53,390
set up just like you earlier on with a

00:25:50,059 --> 00:25:56,690
def by the test index for your PI PIRC

00:25:53,390 --> 00:26:00,200
and that is something that there would

00:25:56,690 --> 00:26:04,309
be a demo later on I finish preparing

00:26:00,200 --> 00:26:07,190
that yesterday at 2 a.m. so that might

00:26:04,309 --> 00:26:09,860
not be perfect but I've learned a bit

00:26:07,190 --> 00:26:12,260
when doing that so test pi PI is

00:26:09,860 --> 00:26:14,840
considered deprecated and now we're

00:26:12,260 --> 00:26:17,780
moving to pi PI dot org and there is

00:26:14,840 --> 00:26:20,420
test dot Phi Phi dot org and when you

00:26:17,780 --> 00:26:23,240
want to upload to test the pi PI dot org

00:26:20,420 --> 00:26:25,910
use upload to the slash legacy and

00:26:23,240 --> 00:26:29,720
that's still in bit

00:26:25,910 --> 00:26:32,050
well it's evolving right now because I

00:26:29,720 --> 00:26:35,990
will be covering pi PI dot orc later on

00:26:32,050 --> 00:26:39,290
and I found some drawbacks a fear of

00:26:35,990 --> 00:26:40,410
moving to that but that will be held

00:26:39,290 --> 00:26:44,130
during the demo

00:26:40,410 --> 00:26:48,150
but we should slowly use more pipe i.org

00:26:44,130 --> 00:26:49,740
than pipe I write underdog and whenever

00:26:48,150 --> 00:26:52,230
you're done with the installation of

00:26:49,740 --> 00:26:56,490
your package you just installed

00:26:52,230 --> 00:26:59,220
- I which goes for the index URL of your

00:26:56,490 --> 00:27:01,200
index all of your test pipe I instance

00:26:59,220 --> 00:27:02,670
and your package name and that should

00:27:01,200 --> 00:27:05,430
install the package for you

00:27:02,670 --> 00:27:09,210
so that is like the if that works then

00:27:05,430 --> 00:27:11,220
production pipe I will work for you - so

00:27:09,210 --> 00:27:14,580
we have the package tested and that's

00:27:11,220 --> 00:27:18,150
the last thing that I have next incoming

00:27:14,580 --> 00:27:21,300
but when tab 20 last line namespaces are

00:27:18,150 --> 00:27:23,970
a great idea you can have namespaces in

00:27:21,300 --> 00:27:26,700
your packages so let's consider that we

00:27:23,970 --> 00:27:32,550
have a library for formatting sound

00:27:26,700 --> 00:27:34,440
formatting and and editing sound this

00:27:32,550 --> 00:27:36,840
library might be huge because sound is a

00:27:34,440 --> 00:27:39,330
huge idea so we might want to divide it

00:27:36,840 --> 00:27:43,620
into areas like format effects and

00:27:39,330 --> 00:27:45,270
filters every directory like format

00:27:43,620 --> 00:27:47,670
effects and filters might be a separate

00:27:45,270 --> 00:27:51,000
package that you upload to sounds dot

00:27:47,670 --> 00:27:54,900
formats and they can be separate they

00:27:51,000 --> 00:27:57,450
can be maintained separately and you can

00:27:54,900 --> 00:28:02,370
install them normally I just import the

00:27:57,450 --> 00:28:04,650
sound effects and it works one thing

00:28:02,370 --> 00:28:07,170
that you should not mix if you should

00:28:04,650 --> 00:28:09,920
never install namespace packages with is

00:28:07,170 --> 00:28:11,760
install because that's horrible and

00:28:09,920 --> 00:28:13,740
actually you should never use as

00:28:11,760 --> 00:28:17,550
installer is installed at all and these

00:28:13,740 --> 00:28:19,680
are just some advantages of PEEP and the

00:28:17,550 --> 00:28:23,610
biggest advantages which I guess is just

00:28:19,680 --> 00:28:26,430
that easy install this is not an easy

00:28:23,610 --> 00:28:29,160
one easy way to install stuff PP so a

00:28:26,430 --> 00:28:31,020
way more easy either one and it has the

00:28:29,160 --> 00:28:35,120
PP some user requirements and deep

00:28:31,020 --> 00:28:36,990
freeze with our great great advantages

00:28:35,120 --> 00:28:39,240
so what's next

00:28:36,990 --> 00:28:41,340
there is a road map on Python packaging

00:28:39,240 --> 00:28:44,310
authority authorities and it's pretty

00:28:41,340 --> 00:28:46,440
long you can read that if you want so

00:28:44,310 --> 00:28:50,640
they have a lot of actions on the road

00:28:46,440 --> 00:28:53,850
on the horizon there is

00:28:50,640 --> 00:28:56,190
an idea to keep the requirement in the

00:28:53,850 --> 00:29:01,140
PIP file which will be written in the

00:28:56,190 --> 00:29:05,910
tongue but that that is probably future

00:29:01,140 --> 00:29:10,530
and of course the PI P I so we are used

00:29:05,910 --> 00:29:12,660
to going to pi PI python.org but the PI

00:29:10,530 --> 00:29:15,780
P I which will no longer be at risk shop

00:29:12,660 --> 00:29:18,090
but that will be a warehouse it's on you

00:29:15,780 --> 00:29:20,220
can use that right now

00:29:18,090 --> 00:29:23,400
you can upload packages with twine and

00:29:20,220 --> 00:29:28,500
twine is recommended way to upload

00:29:23,400 --> 00:29:29,760
packages to that and survive so I think

00:29:28,500 --> 00:29:32,850
that's the biggest change that is

00:29:29,760 --> 00:29:38,630
happening right now a little deal right

00:29:32,850 --> 00:29:40,799
now and so it should work let's see so I

00:29:38,630 --> 00:29:43,230
don't have much time but I have a

00:29:40,799 --> 00:29:47,400
package which has an up pi it's a does a

00:29:43,230 --> 00:29:50,970
flask package and it set up the pile

00:29:47,400 --> 00:29:57,480
with some version name entry points and

00:29:50,970 --> 00:29:59,880
ether requires so I can try to not much

00:29:57,480 --> 00:30:02,100
time so let's just build source

00:29:59,880 --> 00:30:05,520
distribution and bind our distribution

00:30:02,100 --> 00:30:08,970
what happens now I have the build

00:30:05,520 --> 00:30:10,470
directory which has some stuff that is

00:30:08,970 --> 00:30:15,510
that comes from the source distribution

00:30:10,470 --> 00:30:17,370
and this library which which is a just a

00:30:15,510 --> 00:30:21,059
binary distribution of the file and I

00:30:17,370 --> 00:30:24,590
have an info which has some more or less

00:30:21,059 --> 00:30:26,760
interesting stuff that requires and

00:30:24,590 --> 00:30:29,130
everything that you can set up on your

00:30:26,760 --> 00:30:31,520
own in five minutes and test when you

00:30:29,130 --> 00:30:37,679
have more time than I have right now and

00:30:31,520 --> 00:30:41,840
what can we do next then I can set that

00:30:37,679 --> 00:30:45,150
to develop and that's fine I can run

00:30:41,840 --> 00:30:47,549
demo and that's working the most an

00:30:45,150 --> 00:30:49,440
entry point so right now I have this

00:30:47,549 --> 00:30:53,940
package result in my virtual ends and

00:30:49,440 --> 00:30:57,770
the demo is an entry point which we just

00:30:53,940 --> 00:31:00,020
start the up run but moving further I

00:30:57,770 --> 00:31:04,020
want to

00:31:00,020 --> 00:31:08,340
twine upload to that test word test if

00:31:04,020 --> 00:31:13,650
the sorry not this one that's an old one

00:31:08,340 --> 00:31:20,700
a rope item show this one but I want to

00:31:13,650 --> 00:31:24,030
upload wheel will I want to upload wheel

00:31:20,700 --> 00:31:27,510
it asks me for a password which I

00:31:24,030 --> 00:31:30,200
provide and says that is uploaded so

00:31:27,510 --> 00:31:33,390
let's check if it if it is uploaded I

00:31:30,200 --> 00:31:36,990
I'm on the test by PI org project our

00:31:33,390 --> 00:31:40,430
Python shell and it's here it says that

00:31:36,990 --> 00:31:43,560
it's me so I guess it all worked fine so

00:31:40,430 --> 00:31:49,560
let's see if it really works fine I have

00:31:43,560 --> 00:31:57,630
a clear visual and nothing in here and I

00:31:49,560 --> 00:32:00,950
want to pip install our Python show from

00:31:57,630 --> 00:32:00,950
the test by pi org

00:32:03,930 --> 00:32:16,650
and something's wrong with the

00:32:05,520 --> 00:32:20,970
connection so okay but the packet is

00:32:16,650 --> 00:32:24,960
here so you can see that is you probably

00:32:20,970 --> 00:32:29,420
I've modified my PRC file a bit but I

00:32:24,960 --> 00:32:32,280
might show that to you because I have no

00:32:29,420 --> 00:32:37,380
no plain text by the password in that

00:32:32,280 --> 00:32:40,260
file so that's just the PI PRC I'm not

00:32:37,380 --> 00:32:43,020
sure if you download probably you need

00:32:40,260 --> 00:32:44,520
your password setup as the environment

00:32:43,020 --> 00:32:46,200
variable but that's something that I

00:32:44,520 --> 00:32:51,720
want to do right now on the big screen

00:32:46,200 --> 00:32:55,440
while recording but considering my demo

00:32:51,720 --> 00:32:58,920
is working on and that used to work with

00:32:55,440 --> 00:33:02,520
earlier on I have another entry point

00:32:58,920 --> 00:33:07,740
with just points to the local host 5000

00:33:02,520 --> 00:33:10,620
and shows I thought the Internet's room

00:33:07,740 --> 00:33:12,780
that would chose an about me page which

00:33:10,620 --> 00:33:16,290
means that we're coming to end so

00:33:12,780 --> 00:33:20,850
anytime you want to know something about

00:33:16,290 --> 00:33:23,250
me then you can read that I will cover

00:33:20,850 --> 00:33:25,830
that one too so if you want to read a

00:33:23,250 --> 00:33:27,510
little bit about my presentations that

00:33:25,830 --> 00:33:29,750
I've run on different conference there

00:33:27,510 --> 00:33:32,310
are the results on the about me page

00:33:29,750 --> 00:33:34,680
every week I get an information from

00:33:32,310 --> 00:33:37,530
that damn that zero people have visited

00:33:34,680 --> 00:33:41,610
this page so hopefully that will change

00:33:37,530 --> 00:33:44,580
and there's a recommended reading so you

00:33:41,610 --> 00:33:47,190
can take a photo of that that is the the

00:33:44,580 --> 00:33:50,130
most important things to that I base

00:33:47,190 --> 00:33:52,500
this talk on so I could invite an orc

00:33:50,130 --> 00:33:55,200
which has a lot of interesting stuff

00:33:52,500 --> 00:33:59,340
mostly current is some information but

00:33:55,200 --> 00:34:01,530
wheels versus x2 tutorials on how to

00:33:59,340 --> 00:34:03,870
start they might not be that actual

00:34:01,530 --> 00:34:06,120
right now while we're moving to the test

00:34:03,870 --> 00:34:10,710
by PI and of course python packaging

00:34:06,120 --> 00:34:12,870
authorities dot IO so what's going on to

00:34:10,710 --> 00:34:15,860
to be changed in the newest feature

00:34:12,870 --> 00:34:15,860
future and

00:34:17,870 --> 00:34:21,230
[Applause]

00:34:24,600 --> 00:34:36,389
so are there any questions I will see

00:34:32,889 --> 00:34:36,389
but there was someone first

00:34:41,730 --> 00:34:48,609
thank you and right now if we need some

00:34:45,299 --> 00:34:51,190
private package we just added on our

00:34:48,609 --> 00:34:54,210
private github and then in requirements

00:34:51,190 --> 00:34:58,240
types I will just link to the repo and

00:34:54,210 --> 00:35:00,220
what the advantages of using deff pie or

00:34:58,240 --> 00:35:03,099
this second tool I don't remember the

00:35:00,220 --> 00:35:06,609
name over this approach just using

00:35:03,099 --> 00:35:10,599
separate the URL with given version I

00:35:06,609 --> 00:35:13,089
would say that the death by is a here

00:35:10,599 --> 00:35:16,480
was the next question and DEF bio is a

00:35:13,089 --> 00:35:20,799
good way to keep your packages they are

00:35:16,480 --> 00:35:23,799
version der so you can in the situation

00:35:20,799 --> 00:35:26,259
where we have a lot packages as consider

00:35:23,799 --> 00:35:27,849
one package is one service and the

00:35:26,259 --> 00:35:29,829
service is talk to each other and they

00:35:27,849 --> 00:35:32,890
might have pin dependencies to some

00:35:29,829 --> 00:35:37,029
versions of the package it's a great way

00:35:32,890 --> 00:35:38,890
to that we can just bump the version of

00:35:37,029 --> 00:35:40,900
one of our services in the stead of the

00:35:38,890 --> 00:35:43,750
PI and that will gather this from the

00:35:40,900 --> 00:35:48,490
DEF by and pump the version so we have

00:35:43,750 --> 00:35:52,180
more flexibility on what we use if we

00:35:48,490 --> 00:35:55,960
would hold that held a time in some on

00:35:52,180 --> 00:35:59,140
some server on some directory then I

00:35:55,960 --> 00:36:01,750
guess that we would need to make more

00:35:59,140 --> 00:36:06,339
actions to to for example bumper a

00:36:01,750 --> 00:36:09,910
packet version ok other any thoughts

00:36:06,339 --> 00:36:12,190
moving up to the next level are zooming

00:36:09,910 --> 00:36:14,289
out from from a single package and

00:36:12,190 --> 00:36:17,769
managing lots of packages which are

00:36:14,289 --> 00:36:21,430
usually used to define your project so

00:36:17,769 --> 00:36:23,349
going back from just handling a single

00:36:21,430 --> 00:36:27,460
package stepping up to project

00:36:23,349 --> 00:36:31,509
management another any not really

00:36:27,460 --> 00:36:35,109
because I can't find any reason why you

00:36:31,509 --> 00:36:36,940
want to bulk update your packages

00:36:35,109 --> 00:36:40,359
because that's because you are modifying

00:36:36,940 --> 00:36:44,349
on an application consisting of maybe 20

00:36:40,359 --> 00:36:48,670
or 50 packages and so you want to upload

00:36:44,349 --> 00:36:50,960
a whole bunch of packages push them into

00:36:48,670 --> 00:36:54,050
production environment whatever

00:36:50,960 --> 00:36:56,240
okay I guess that I might find some

00:36:54,050 --> 00:37:02,420
reasons why you want to do that but I

00:36:56,240 --> 00:37:06,260
would go for a single package approach

00:37:02,420 --> 00:37:08,510
more because you have more information

00:37:06,260 --> 00:37:13,280
and more control on your package when

00:37:08,510 --> 00:37:17,540
you're just just editing one of them for

00:37:13,280 --> 00:37:20,300
example if you again if there are some

00:37:17,540 --> 00:37:23,450
services and different services you use

00:37:20,300 --> 00:37:25,190
one of your packages then you might want

00:37:23,450 --> 00:37:28,960
a separate approach for that package

00:37:25,190 --> 00:37:28,960
wrong way and thank you

00:37:29,890 --> 00:37:36,520
you mentioned dev PI which kind of

00:37:33,020 --> 00:37:39,859
mirrors the pi PI packaging up and our

00:37:36,520 --> 00:37:42,680
archive I use the product years ago

00:37:39,859 --> 00:37:46,520
called Python egg basket which is just a

00:37:42,680 --> 00:37:48,319
purely local repository for you know

00:37:46,520 --> 00:37:50,270
your packages when you're in developing

00:37:48,319 --> 00:37:52,220
whatever you just had a copy of locally

00:37:50,270 --> 00:37:54,470
are you aware of anything like that that

00:37:52,220 --> 00:37:57,200
is purely local that runs on your

00:37:54,470 --> 00:38:01,040
machine I know there's been some

00:37:57,200 --> 00:38:05,710
attempts before I joined the company on

00:38:01,040 --> 00:38:08,869
using different package hosting services

00:38:05,710 --> 00:38:10,400
but the reason we use that PI might be

00:38:08,869 --> 00:38:12,200
that one of the Python packaging

00:38:10,400 --> 00:38:14,450
authorities guys works in the company

00:38:12,200 --> 00:38:17,089
and he was helping in development the

00:38:14,450 --> 00:38:20,540
setup tools and the death by so I guess

00:38:17,089 --> 00:38:23,000
that was the why we chose the Delphi and

00:38:20,540 --> 00:38:25,790
it's working well so this is the area

00:38:23,000 --> 00:38:28,569
that no one really wants to touch and as

00:38:25,790 --> 00:38:31,010
long as it's working fine I guess that

00:38:28,569 --> 00:38:32,960
that there won't be an approach to move

00:38:31,010 --> 00:38:34,400
to to a difference an end I can

00:38:32,960 --> 00:38:37,819
recommend that fight because it's pretty

00:38:34,400 --> 00:38:39,380
stable and and reliable but if you know

00:38:37,819 --> 00:38:43,130
that there are other tools well I

00:38:39,380 --> 00:38:45,710
recommend that everybody read a little

00:38:43,130 --> 00:38:50,470
bit about those tools and choose which

00:38:45,710 --> 00:38:50,470
which fits the best for for the purpose

00:38:51,670 --> 00:39:00,539
okay I guess that's hope so thanks a lot

00:38:55,440 --> 00:39:00,539

YouTube URL: https://www.youtube.com/watch?v=xSbezLCJ87E


