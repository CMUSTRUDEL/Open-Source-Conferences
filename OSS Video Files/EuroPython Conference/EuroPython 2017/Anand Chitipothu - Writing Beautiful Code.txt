Title: Anand Chitipothu - Writing Beautiful Code
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Writing Beautiful Code
[EuroPython 2017 - Talk - 2017-07-11 - PyCharm Room]
[Rimini, Italy]

Writing code is hard. Writing beautiful code is even more so.

How to write code that is pleasant to read, easy to understand and joy to maintain?

Simple things like using right variable names, avoiding to much nesting, using white space and comments etc. makes a lot difference to readability of the code. Even though these things look very simple, even experienced programmers find it hard to put them in practice.

In this talk, Iâ€™ll try summarise the age old wisdom of writing beautiful code and explain those ideas using practical examples written in Python.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,650 --> 00:00:09,030
good afternoon so I'm going to talk

00:00:07,740 --> 00:00:14,190
about something that's dear to my heart

00:00:09,030 --> 00:00:17,369
I think beautiful cold so before I start

00:00:14,190 --> 00:00:21,510
let me introduce myself so my name is

00:00:17,369 --> 00:00:23,130
Anand I pitch Python to Australia

00:00:21,510 --> 00:00:27,780
conduct advanced programming courses at

00:00:23,130 --> 00:00:29,369
people Academy I'm also a co-founder of

00:00:27,780 --> 00:00:30,720
a star followed it called rotor data

00:00:29,369 --> 00:00:33,030
we're building their designs back on

00:00:30,720 --> 00:00:37,250
that so I use Python heavily at my work

00:00:33,030 --> 00:00:40,620
and also teach whatever land to students

00:00:37,250 --> 00:00:43,050
so let me start with the code from

00:00:40,620 --> 00:00:45,570
Christopher Alexander who called it on

00:00:43,050 --> 00:00:48,390
the pattern language so it's really hard

00:00:45,570 --> 00:00:50,190
to say what was beautiful a V or regret

00:00:48,390 --> 00:00:51,000
the code and actually felt wow this

00:00:50,190 --> 00:00:56,870
really looks awesome

00:00:51,000 --> 00:01:01,050
Carroll felt raise your hands yeah so

00:00:56,870 --> 00:01:02,579
and so it's really hard to say when a

00:01:01,050 --> 00:01:04,379
code is what a code is vidual what makes

00:01:02,579 --> 00:01:05,549
a code beautiful okay so it's kind of

00:01:04,379 --> 00:01:07,320
some people say it

00:01:05,549 --> 00:01:10,409
Alexander Christopher Alexander says

00:01:07,320 --> 00:01:12,390
that the quality without the name so you

00:01:10,409 --> 00:01:13,680
look at it I kind of feel it but it's

00:01:12,390 --> 00:01:17,070
very hard to say so he talks in the

00:01:13,680 --> 00:01:19,080
context of architecture but applies many

00:01:17,070 --> 00:01:24,080
other art forms as well as we considered

00:01:19,080 --> 00:01:28,049
programming is also not so let me quote

00:01:24,080 --> 00:01:29,000
this from is called wizard book section

00:01:28,049 --> 00:01:30,960
interpretation of computer programs

00:01:29,000 --> 00:01:33,000
since programs must be written for

00:01:30,960 --> 00:01:34,799
people to read and only incidentally for

00:01:33,000 --> 00:01:37,470
question strikes occurred it's a

00:01:34,799 --> 00:01:39,600
profound statement because usually

00:01:37,470 --> 00:01:42,299
people think programs are written to

00:01:39,600 --> 00:01:44,340
just get some job done okay to write for

00:01:42,299 --> 00:01:47,700
computer to execute something but if you

00:01:44,340 --> 00:01:50,850
look at deeply so this must be for

00:01:47,700 --> 00:01:52,920
written for people reason is to look at

00:01:50,850 --> 00:01:55,770
the lifecycle of any typical computer

00:01:52,920 --> 00:01:58,320
program right once for time for the

00:01:55,770 --> 00:02:00,110
computer for the for the remainder a

00:01:58,320 --> 00:02:02,460
ssin of the lifetime of the program

00:02:00,110 --> 00:02:03,960
sometimes I mean someone else look at

00:02:02,460 --> 00:02:06,390
the programmer for some time he has to

00:02:03,960 --> 00:02:07,710
understand this code or a lot of times

00:02:06,390 --> 00:02:10,709
what happens is we write a code and

00:02:07,710 --> 00:02:12,359
after a week or two with this convex

00:02:10,709 --> 00:02:14,159
sense of the program I'm sure like

00:02:12,359 --> 00:02:16,500
colobus went to that place okay

00:02:14,159 --> 00:02:19,020
so it's very important to write programs

00:02:16,500 --> 00:02:20,250
to keep in mind of the people are going

00:02:19,020 --> 00:02:21,960
to read the code later later point

00:02:20,250 --> 00:02:26,580
so should always try to improve the

00:02:21,960 --> 00:02:28,560
readability of the programs so let me

00:02:26,580 --> 00:02:30,990
start with the very simple low-hanging

00:02:28,560 --> 00:02:33,420
fruit that everyone knows that do it but

00:02:30,990 --> 00:02:35,040
not many people do this okay

00:02:33,420 --> 00:02:38,400
choosing meaningful variable lengths

00:02:35,040 --> 00:02:40,680
it's so important that even people with

00:02:38,400 --> 00:02:42,030
a lot of experience failed to pay

00:02:40,680 --> 00:02:44,700
attention to this

00:02:42,030 --> 00:02:47,400
I teach Python professionally I do

00:02:44,700 --> 00:02:49,530
Python advanced Python courses - walking

00:02:47,400 --> 00:02:51,900
coefficients so I really find it

00:02:49,530 --> 00:02:53,940
frustrating when people with like three

00:02:51,900 --> 00:02:56,130
four years of programming experience and

00:02:53,940 --> 00:02:57,989
I can't even pick right variable name

00:02:56,130 --> 00:02:59,790
it's not that they can't pick with just

00:02:57,989 --> 00:03:02,370
that we don't just pay the attention to

00:02:59,790 --> 00:03:04,080
those details I'm going to show you with

00:03:02,370 --> 00:03:08,430
color examples how important it is to

00:03:04,080 --> 00:03:12,720
pick a variable right variable name so

00:03:08,430 --> 00:03:14,160
let me quote silk Alton and but two hard

00:03:12,720 --> 00:03:16,170
things couple signs are cache

00:03:14,160 --> 00:03:18,709
invalidation and naming things believe

00:03:16,170 --> 00:03:20,549
me naming things is not easy it's hard

00:03:18,709 --> 00:03:22,620
what's the longest time you've spent

00:03:20,549 --> 00:03:24,360
bagging you had to figure out what name

00:03:22,620 --> 00:03:27,799
to give to a class or a file name or

00:03:24,360 --> 00:03:29,730
available I remember having spending

00:03:27,799 --> 00:03:32,160
literally two full days to figure out

00:03:29,730 --> 00:03:35,250
what should I name this thing what I'm

00:03:32,160 --> 00:03:37,530
trying to implement okay so maybe things

00:03:35,250 --> 00:03:40,110
takes time and you should give the time

00:03:37,530 --> 00:03:45,120
okay it's very very important to give

00:03:40,110 --> 00:03:46,950
that so first tip is about generic names

00:03:45,120 --> 00:03:50,610
they really don't make sense if you want

00:03:46,950 --> 00:03:53,160
to so what we do is you won't have

00:03:50,610 --> 00:03:55,140
temporary variable temp temp to manage

00:03:53,160 --> 00:03:57,150
your data it's kind of to generate names

00:03:55,140 --> 00:04:00,329
really can't understand what they mean

00:03:57,150 --> 00:04:04,200
and to use a a little more specific

00:04:00,329 --> 00:04:05,670
names for example yeah so issues a

00:04:04,200 --> 00:04:08,040
little more specific names to the

00:04:05,670 --> 00:04:13,079
context what that means the other thing

00:04:08,040 --> 00:04:15,320
is so the red is to indicate that's a

00:04:13,079 --> 00:04:19,049
nice code and the green is one which is

00:04:15,320 --> 00:04:20,519
what's what I'm saying about using

00:04:19,049 --> 00:04:23,760
abbreviations

00:04:20,519 --> 00:04:25,740
people say UCF uppercase from vector but

00:04:23,760 --> 00:04:27,720
doesn't we'll kind of understand what

00:04:25,740 --> 00:04:30,100
you see a face so keep it saying HTTP

00:04:27,720 --> 00:04:32,950
SMTP because that's a

00:04:30,100 --> 00:04:34,390
and electrons that's fine but using

00:04:32,950 --> 00:04:36,490
something like VA for a bank account

00:04:34,390 --> 00:04:38,380
doesn't make sense okay it's really hard

00:04:36,490 --> 00:04:41,770
to understand can probably say for micro

00:04:38,380 --> 00:04:43,720
order an account or something so that's

00:04:41,770 --> 00:04:45,880
a I think you're good the thumb rule

00:04:43,720 --> 00:04:50,580
don't use abbreviations unless that's

00:04:45,880 --> 00:04:53,350
very common I think that everyone knows

00:04:50,580 --> 00:04:56,650
these are the common mistakes that I

00:04:53,350 --> 00:04:57,910
keep finding in people as these a data

00:04:56,650 --> 00:05:00,700
type as a name of variable

00:04:57,910 --> 00:05:03,700
they say it's a list say to sing okay

00:05:00,700 --> 00:05:06,610
but list of what stink holding what

00:05:03,700 --> 00:05:09,340
right so it's better to say actually

00:05:06,610 --> 00:05:11,770
what it says it is sum of numbers code

00:05:09,340 --> 00:05:13,390
words takes a string but actually a

00:05:11,770 --> 00:05:16,510
sentence start a paragraph it's not the

00:05:13,390 --> 00:05:19,600
file name so it's better to say

00:05:16,510 --> 00:05:21,580
specifically what it actually means not

00:05:19,600 --> 00:05:26,200
just saying the type of it that makes it

00:05:21,580 --> 00:05:29,950
a lot more readable another tumbrel

00:05:26,200 --> 00:05:33,130
about nouns and verbs is to use nouns

00:05:29,950 --> 00:05:36,190
for variables and classes saying

00:05:33,130 --> 00:05:37,840
concepts and use verbs for functions so

00:05:36,190 --> 00:05:40,300
saying actions so these are the tasks

00:05:37,840 --> 00:05:43,750
that you want to do so size price task

00:05:40,300 --> 00:05:46,570
scheduler etc they go well for variables

00:05:43,750 --> 00:05:47,950
and classes and use actions get filin

00:05:46,570 --> 00:05:50,620
instead of just saying a functional

00:05:47,950 --> 00:05:52,570
silane so get file in so that it kind of

00:05:50,620 --> 00:05:54,610
indicates you're doing an action mike

00:05:52,570 --> 00:05:57,820
account or deposit so these are the kind

00:05:54,610 --> 00:06:05,650
of examples were using webs make sense

00:05:57,820 --> 00:06:06,850
for functions and okay they're not very

00:06:05,650 --> 00:06:08,620
simple tools not something that I

00:06:06,850 --> 00:06:10,330
invented is that the age-old wisdom

00:06:08,620 --> 00:06:12,640
that's been talked about from so many

00:06:10,330 --> 00:06:14,050
people if you find out practice of

00:06:12,640 --> 00:06:15,340
programming or there's so many other

00:06:14,050 --> 00:06:17,920
books people have written but I'm just

00:06:15,340 --> 00:06:20,790
trying to take that wisdom and put it in

00:06:17,920 --> 00:06:25,000
the context of Python so look at the

00:06:20,790 --> 00:06:27,960
parallel list of values it's good to use

00:06:25,000 --> 00:06:31,360
a plural for that so say largest line of

00:06:27,960 --> 00:06:34,570
lines are also listed directly and you

00:06:31,360 --> 00:06:36,910
get five seven but look at other

00:06:34,570 --> 00:06:39,160
examples of file equal to a short list

00:06:36,910 --> 00:06:41,919
sure that it satisfies the list of files

00:06:39,160 --> 00:06:43,340
so but reading is a poodle to say that

00:06:41,919 --> 00:06:46,660
it's actually a

00:06:43,340 --> 00:06:50,120
store values and this example actually a

00:06:46,660 --> 00:06:53,060
funeral examples have found some people

00:06:50,120 --> 00:06:54,770
when doing teaching okay so people say

00:06:53,060 --> 00:06:58,820
four lines in Open File import read

00:06:54,770 --> 00:07:00,889
lines meaningfully read lines gives you

00:06:58,820 --> 00:07:04,280
a list of lines so each element is a

00:07:00,889 --> 00:07:06,169
single line not lines so I'm saying int

00:07:04,280 --> 00:07:09,470
of lines doesn't make sense at all right

00:07:06,169 --> 00:07:14,740
so as it's better to use polar for a

00:07:09,470 --> 00:07:18,380
list and when you use loop indices

00:07:14,740 --> 00:07:22,250
digital ing for loop in exes only not

00:07:18,380 --> 00:07:24,530
for the values okay for example for I in

00:07:22,250 --> 00:07:27,440
range 10 is fine I use an index you're

00:07:24,530 --> 00:07:29,419
going over values 0 to 10 but you're

00:07:27,440 --> 00:07:32,210
going about a list of values using I in

00:07:29,419 --> 00:07:36,260
doesn't make sense because I is really

00:07:32,210 --> 00:07:38,960
useful an index and using either numbers

00:07:36,260 --> 00:07:41,120
that feels like it's a single integer

00:07:38,960 --> 00:07:42,800
but include the number or it could be a

00:07:41,120 --> 00:07:45,710
string or anything right so use

00:07:42,800 --> 00:07:47,120
something which is more conveys water

00:07:45,710 --> 00:07:48,470
actually good so for any numbers poly

00:07:47,120 --> 00:07:51,350
mode makes a lot more sense

00:07:48,470 --> 00:07:52,430
you might be thinking like what am I

00:07:51,350 --> 00:07:53,870
talking about silly things like these

00:07:52,430 --> 00:07:55,910
are things are what everyone knows but

00:07:53,870 --> 00:07:57,820
it's really really hard to get this in

00:07:55,910 --> 00:07:59,990
practice okay let me show you an example

00:07:57,820 --> 00:08:00,229
there's a small file and function ever

00:07:59,990 --> 00:08:02,930
written

00:08:00,229 --> 00:08:06,800
okay can you try and understand what

00:08:02,930 --> 00:08:08,720
this is doing can someone take let it

00:08:06,800 --> 00:08:11,800
and then see what is this can someone

00:08:08,720 --> 00:08:11,800
explain you what is function that

00:08:18,180 --> 00:08:25,780
yeah Wow awesome yeah it's actually

00:08:23,560 --> 00:08:29,890
that's what it does okay but let's look

00:08:25,780 --> 00:08:31,600
at this okay so if you look at the same

00:08:29,890 --> 00:08:34,120
function of written like that but all

00:08:31,600 --> 00:08:35,349
I've done is I've changed the names and

00:08:34,120 --> 00:08:40,090
not changed any structure of the program

00:08:35,349 --> 00:08:42,070
so it's a pilot program and it's really

00:08:40,090 --> 00:08:44,080
hard to understand what is doing x and y

00:08:42,070 --> 00:08:46,630
and they're adding things to that okay

00:08:44,080 --> 00:08:47,760
so by changing the names it made so much

00:08:46,630 --> 00:08:49,840
of a difference okay

00:08:47,760 --> 00:08:51,520
now by looking at humidity you know

00:08:49,840 --> 00:08:53,680
that's the data set it's an index and

00:08:51,520 --> 00:08:59,020
you're taking a row and then from the

00:08:53,680 --> 00:09:00,250
row you're taking yes I know I know but

00:08:59,020 --> 00:09:04,680
the thing is I'm talking about

00:09:00,250 --> 00:09:04,680
I agree so I think this example because

00:09:04,770 --> 00:09:08,500
to show how much the difference names

00:09:07,270 --> 00:09:11,470
makes I agree you can use a list

00:09:08,500 --> 00:09:16,030
comprehension but just trying to show

00:09:11,470 --> 00:09:17,950
how much news makes sense okay so if a

00:09:16,030 --> 00:09:20,380
file encode can make so much of a

00:09:17,950 --> 00:09:24,250
difference in picking right variable

00:09:20,380 --> 00:09:25,750
names imagine what would happen if if

00:09:24,250 --> 00:09:29,310
you're working with a finer line program

00:09:25,750 --> 00:09:31,570
or ten thousand line program right so

00:09:29,310 --> 00:09:38,890
it's really really important to pick

00:09:31,570 --> 00:09:41,110
right names so the other thing is when

00:09:38,890 --> 00:09:42,610
you using similar names for complete

00:09:41,110 --> 00:09:44,550
different data types it's kind of very

00:09:42,610 --> 00:09:48,270
confusing so when you're writing code

00:09:44,550 --> 00:09:51,670
also keep in mind what people think

00:09:48,270 --> 00:09:53,530
unconsciously okay so when you see names

00:09:51,670 --> 00:09:55,210
which is sounding similar we

00:09:53,530 --> 00:09:57,370
unconsciously expect that the actually

00:09:55,210 --> 00:09:59,830
hold similar types of values so a 1 and

00:09:57,370 --> 00:10:01,690
a would two things must be the same kind

00:09:59,830 --> 00:10:03,760
of values but you put a list in one

00:10:01,690 --> 00:10:07,510
other integer that's very very confusing

00:10:03,760 --> 00:10:09,220
it's very hard to make sense of that

00:10:07,510 --> 00:10:10,540
so probably say values surrounding

00:10:09,220 --> 00:10:12,310
something here and a two and that's

00:10:10,540 --> 00:10:15,190
that's one of the issues that we had in

00:10:12,310 --> 00:10:16,480
creates example as well as x and y can

00:10:15,190 --> 00:10:18,670
officially extend well must be the same

00:10:16,480 --> 00:10:20,170
types when they both are listed both are

00:10:18,670 --> 00:10:27,250
integers or something but they're not

00:10:20,170 --> 00:10:28,270
okay now let's look at comments we also

00:10:27,250 --> 00:10:30,820
people

00:10:28,270 --> 00:10:32,470
say writing comments is good but is it

00:10:30,820 --> 00:10:34,000
really and there's really no need to say

00:10:32,470 --> 00:10:37,390
the obvious okay

00:10:34,000 --> 00:10:38,860
increment X by two but that's okay and

00:10:37,390 --> 00:10:40,210
Python programmer so you look at the

00:10:38,860 --> 00:10:42,370
Python code and figure out very

00:10:40,210 --> 00:10:43,420
committing spy too but that's just

00:10:42,370 --> 00:10:44,740
that's the obvious thing there's no

00:10:43,420 --> 00:10:47,050
right knee to write a comment but it can

00:10:44,740 --> 00:10:48,970
actually explain why you're doing it

00:10:47,050 --> 00:10:50,380
compensate for border on both sides so

00:10:48,970 --> 00:10:52,090
you're adding one pixel on both sides so

00:10:50,380 --> 00:10:53,740
you're adding two so that makes more

00:10:52,090 --> 00:10:53,920
sense you're conveying why you're doing

00:10:53,740 --> 00:10:56,350
that

00:10:53,920 --> 00:10:59,890
so don't is obvious say while you're

00:10:56,350 --> 00:11:02,920
doing that and a lot of times it makes a

00:10:59,890 --> 00:11:05,590
lot of sense when you're commenting add

00:11:02,920 --> 00:11:07,840
a comment explain why you made a choice

00:11:05,590 --> 00:11:10,060
so the following is an optimization

00:11:07,840 --> 00:11:11,860
saves a lot of cash Cal's so in saying

00:11:10,060 --> 00:11:14,200
that this is the reason why the

00:11:11,860 --> 00:11:18,160
following code has been done this way

00:11:14,200 --> 00:11:21,010
and also it's good to document special

00:11:18,160 --> 00:11:22,390
cases for example you figured out the

00:11:21,010 --> 00:11:23,530
Unicode error happening and you don't

00:11:22,390 --> 00:11:25,870
know why what's happening at this

00:11:23,530 --> 00:11:29,710
magically fix is that issue

00:11:25,870 --> 00:11:31,750
okay so put a timestamp and said this is

00:11:29,710 --> 00:11:34,240
a special case and this is how fixing it

00:11:31,750 --> 00:11:37,080
so in future people will be careful

00:11:34,240 --> 00:11:40,990
during the touching that part of code

00:11:37,080 --> 00:11:43,150
and it's actually good you can actually

00:11:40,990 --> 00:11:44,890
make comments you didn't okay can write

00:11:43,150 --> 00:11:47,140
code such a way that you don't really

00:11:44,890 --> 00:11:49,060
interact comments for example let's look

00:11:47,140 --> 00:11:51,070
at the first case the fine length of the

00:11:49,060 --> 00:11:53,830
longest line so there is comprehension

00:11:51,070 --> 00:11:56,370
and finding max of that okay in subject

00:11:53,830 --> 00:11:58,330
if you say n equal n of longest lines

00:11:56,370 --> 00:12:02,170
you don't really have to comment that

00:11:58,330 --> 00:12:03,850
kind of very clear the program itself so

00:12:02,170 --> 00:12:06,070
you can write cell block metric code so

00:12:03,850 --> 00:12:09,190
the code is simple enough for people to

00:12:06,070 --> 00:12:10,480
understand by the code itself we don't

00:12:09,190 --> 00:12:13,120
have to write the documentation so

00:12:10,480 --> 00:12:18,910
that's something really awesome is you

00:12:13,120 --> 00:12:20,950
could do that yeah the other thing is a

00:12:18,910 --> 00:12:23,260
longer functions what we typically do is

00:12:20,950 --> 00:12:25,870
you have stage 1 stage to add a block

00:12:23,260 --> 00:12:27,040
comment say that this is what so process

00:12:25,870 --> 00:12:30,370
documents and upload to the search

00:12:27,040 --> 00:12:32,860
engine and there's part of code but it

00:12:30,370 --> 00:12:34,630
makes more sense to split that into

00:12:32,860 --> 00:12:36,520
smaller functions and then say Doc's

00:12:34,630 --> 00:12:38,680
equal to false documents and then search

00:12:36,520 --> 00:12:40,180
in submitted search engine so don't

00:12:38,680 --> 00:12:42,630
really need comments to explain that

00:12:40,180 --> 00:12:42,630
part of code

00:12:43,230 --> 00:12:50,440
now that we have looked at the simple

00:12:48,310 --> 00:12:52,810
things are more AXA buildings like

00:12:50,440 --> 00:12:55,089
variable names and comments let's look

00:12:52,810 --> 00:12:58,990
at program organization how do you

00:12:55,089 --> 00:13:00,520
structure your program so divide and

00:12:58,990 --> 00:13:02,680
conquer so split your program into

00:13:00,520 --> 00:13:04,930
smaller independent modules and

00:13:02,680 --> 00:13:08,339
functions that way it's a lot easier for

00:13:04,930 --> 00:13:12,970
people to make sense of that that we

00:13:08,339 --> 00:13:14,529
code Miller's law what it says is member

00:13:12,970 --> 00:13:17,260
of Publix the average human can hold in

00:13:14,529 --> 00:13:21,149
working memory 7 performance - it's a

00:13:17,260 --> 00:13:23,820
pro it has profound implications on how

00:13:21,149 --> 00:13:26,440
we should write their code reason is

00:13:23,820 --> 00:13:27,760
seven plus or minus two is the number of

00:13:26,440 --> 00:13:30,250
things that you can hold in head that

00:13:27,760 --> 00:13:31,690
means that probably means when you're

00:13:30,250 --> 00:13:33,910
writing function you should not have

00:13:31,690 --> 00:13:35,500
more lines than that or you have a class

00:13:33,910 --> 00:13:37,149
then the number of whether second in

00:13:35,500 --> 00:13:39,339
public API should not be more than that

00:13:37,149 --> 00:13:41,589
so when someone looks at your class and

00:13:39,339 --> 00:13:44,709
then starts working on it

00:13:41,589 --> 00:13:47,079
start using it if it has sound pressure

00:13:44,709 --> 00:13:49,029
- - functions then label to kind of keep

00:13:47,079 --> 00:13:50,140
all of it in is working normally and

00:13:49,029 --> 00:13:51,550
then able to work with it but if it has

00:13:50,140 --> 00:13:53,860
a lot of them it's very difficult so

00:13:51,550 --> 00:13:56,980
that's a kind of ballpark figure to keep

00:13:53,860 --> 00:13:58,540
in mind when you're writing classes or

00:13:56,980 --> 00:14:02,610
functions so I think that's a good

00:13:58,540 --> 00:14:07,920
number to keep sizeable function as well

00:14:02,610 --> 00:14:11,529
and the other common thing people always

00:14:07,920 --> 00:14:15,040
don't pay attention as is duplication so

00:14:11,529 --> 00:14:16,600
duplication is bad for example it's a

00:14:15,040 --> 00:14:20,170
function it takes an input data and

00:14:16,600 --> 00:14:21,640
tries to convert that to an integer and

00:14:20,170 --> 00:14:28,570
then some sum up and give the value back

00:14:21,640 --> 00:14:31,089
okay so since say data is coming from

00:14:28,570 --> 00:14:32,800
users they want to do some validation

00:14:31,089 --> 00:14:34,450
and converting integer before we

00:14:32,800 --> 00:14:36,730
actually do the summing up so there's an

00:14:34,450 --> 00:14:38,860
try and accept but we're doing it twice

00:14:36,730 --> 00:14:42,070
as you see actually a bell break legal

00:14:38,860 --> 00:14:45,450
and so just people we write one thing

00:14:42,070 --> 00:14:49,120
and then copy-paste modify things and

00:14:45,450 --> 00:14:52,120
you see I kind of deliberately left X

00:14:49,120 --> 00:14:54,640
here because that's that's kind of added

00:14:52,120 --> 00:14:56,500
that we will get into okay so

00:14:54,640 --> 00:14:57,610
instead of duplicating we should its lot

00:14:56,500 --> 00:15:01,330
better if you can actually generalize

00:14:57,610 --> 00:15:04,450
that say you get int take input data and

00:15:01,330 --> 00:15:05,770
then x and y and there is an x and y so

00:15:04,450 --> 00:15:07,510
if you look at the add function here

00:15:05,770 --> 00:15:13,990
it's very easy to understand now than

00:15:07,510 --> 00:15:15,790
what we had before now which also avoid

00:15:13,990 --> 00:15:20,320
the too many nested levels when you have

00:15:15,790 --> 00:15:22,990
a function it may have so we may end up

00:15:20,320 --> 00:15:25,090
like writing code like this it's

00:15:22,990 --> 00:15:26,380
updating a blog post so there are many

00:15:25,090 --> 00:15:28,690
cases where you want update blog post

00:15:26,380 --> 00:15:29,800
you want update title other tag so

00:15:28,690 --> 00:15:31,840
there's a big function that kind of

00:15:29,800 --> 00:15:34,810
going all the steps but if you see that

00:15:31,840 --> 00:15:37,150
too many levels of too many nested

00:15:34,810 --> 00:15:40,210
levels here so that's kind of hard to

00:15:37,150 --> 00:15:42,100
understand so what can be done is you

00:15:40,210 --> 00:15:43,450
can take each part of that and then make

00:15:42,100 --> 00:15:46,240
that the submit function that really

00:15:43,450 --> 00:15:47,110
makes it a lot more readable okay so if

00:15:46,240 --> 00:15:49,480
you look at this function this function

00:15:47,110 --> 00:15:50,770
is just delegating it to other sub

00:15:49,480 --> 00:15:52,120
functions so if you look at this

00:15:50,770 --> 00:15:54,040
function it's easy to understand and if

00:15:52,120 --> 00:15:57,930
lauren the further details you can look

00:15:54,040 --> 00:16:01,060
at each of this their functions the

00:15:57,930 --> 00:16:03,520
other useful thing is to make sure you

00:16:01,060 --> 00:16:10,240
handle errors separately for example

00:16:03,520 --> 00:16:12,760
this function is trying to get user from

00:16:10,240 --> 00:16:15,430
given the email address so if I check

00:16:12,760 --> 00:16:16,960
it's valid user or not if it's valid

00:16:15,430 --> 00:16:19,390
user just make sure the account is not

00:16:16,960 --> 00:16:21,340
blocked and then you could iterate a

00:16:19,390 --> 00:16:24,970
base and give the user back what if you

00:16:21,340 --> 00:16:29,080
see the code up to function the main

00:16:24,970 --> 00:16:33,430
function of this this function is hidden

00:16:29,080 --> 00:16:36,430
in two levels deep okay so the kawaii'

00:16:33,430 --> 00:16:39,220
so that their else feeling is a core of

00:16:36,430 --> 00:16:43,240
the function but that's hidden deep

00:16:39,220 --> 00:16:46,060
inside so many conditions okay so

00:16:43,240 --> 00:16:47,620
wouldn't it be better that to be the

00:16:46,060 --> 00:16:49,600
most prominent part of the function so

00:16:47,620 --> 00:16:53,230
what you can do is you can keep that its

00:16:49,600 --> 00:16:55,390
handling separate for example like this

00:16:53,230 --> 00:16:59,710
so we have do the other evaluation first

00:16:55,390 --> 00:17:01,450
and then at the top level you have the

00:16:59,710 --> 00:17:03,880
code of the functionality so you get a

00:17:01,450 --> 00:17:05,560
query and then create a base get results

00:17:03,880 --> 00:17:06,940
and if you really thank you understand

00:17:05,560 --> 00:17:09,220
this function we just skip their

00:17:06,940 --> 00:17:11,490
evaluation then that is a jump to

00:17:09,220 --> 00:17:14,740
the main part of the function which is

00:17:11,490 --> 00:17:16,890
not so straightforward if you're doing

00:17:14,740 --> 00:17:21,520
it like this

00:17:16,890 --> 00:17:22,870
now the other very important thing is we

00:17:21,520 --> 00:17:24,730
should try to suppress implementation

00:17:22,870 --> 00:17:26,260
detail as much as possible the reason is

00:17:24,730 --> 00:17:30,940
when someone is trying to understand

00:17:26,260 --> 00:17:32,290
program the intent the what of what the

00:17:30,940 --> 00:17:34,570
program is doing and how the program is

00:17:32,290 --> 00:17:37,000
doing at two different things so when

00:17:34,570 --> 00:17:39,010
someone comes to your programming is

00:17:37,000 --> 00:17:41,620
more instant understand what the program

00:17:39,010 --> 00:17:42,760
is doing right so we should implement we

00:17:41,620 --> 00:17:44,470
should suppress implementation details

00:17:42,760 --> 00:17:47,740
as much as possible so that you can

00:17:44,470 --> 00:17:49,720
understand the intent of the program

00:17:47,740 --> 00:17:51,100
pretty quickly quickly and then if

00:17:49,720 --> 00:17:53,110
required you can go and then see what

00:17:51,100 --> 00:17:55,420
each of these functions are doing for

00:17:53,110 --> 00:17:57,670
example this program takes one terminal

00:17:55,420 --> 00:17:59,350
argument which is a file name and then

00:17:57,670 --> 00:18:00,550
reads all the words in the file compares

00:17:59,350 --> 00:18:01,630
the frequency of the words and prints in

00:18:00,550 --> 00:18:01,900
sequence e this is what the program

00:18:01,630 --> 00:18:04,240
history

00:18:01,900 --> 00:18:05,920
so as four lines and this all the

00:18:04,240 --> 00:18:07,840
program is doing so the intent what the

00:18:05,920 --> 00:18:11,230
program is doing is very clear by

00:18:07,840 --> 00:18:13,390
looking at this program okay but right

00:18:11,230 --> 00:18:15,670
along the function and then put in how

00:18:13,390 --> 00:18:17,440
the words are read and how word fig is

00:18:15,670 --> 00:18:18,850
computed right here the same function it

00:18:17,440 --> 00:18:20,620
becomes too difficult to understand why

00:18:18,850 --> 00:18:22,330
someone is doing it now know is that

00:18:20,620 --> 00:18:24,190
reading word frequency company word

00:18:22,330 --> 00:18:25,750
frequency I can go to what frequency

00:18:24,190 --> 00:18:27,390
function and figure out how it's

00:18:25,750 --> 00:18:29,740
actually being done the implementation

00:18:27,390 --> 00:18:32,650
the implementation and the intent can

00:18:29,740 --> 00:18:35,280
actually be separated now on what it's

00:18:32,650 --> 00:18:41,830
good to separate those two things

00:18:35,280 --> 00:18:43,930
together so now that's I think the

00:18:41,830 --> 00:18:45,550
things that I want to mention about the

00:18:43,930 --> 00:18:47,890
writing which recall and this is a quick

00:18:45,550 --> 00:18:50,440
summary of what I've covered so far

00:18:47,890 --> 00:18:53,940
so it shows many more readable names I

00:18:50,440 --> 00:18:57,580
can't stress enough how important it is

00:18:53,940 --> 00:19:00,580
it sometimes takes long a lot of time

00:18:57,580 --> 00:19:02,800
but it's it's worth spending the time

00:19:00,580 --> 00:19:04,300
because the amount of time we spend

00:19:02,800 --> 00:19:05,920
later trying to figure out why the

00:19:04,300 --> 00:19:08,370
program is written like that or trying

00:19:05,920 --> 00:19:10,930
to figure out how it is actually working

00:19:08,370 --> 00:19:12,700
is lot more if you don't spend enough

00:19:10,930 --> 00:19:15,700
time early to pick right variable names

00:19:12,700 --> 00:19:17,830
and use comments going to quite but

00:19:15,700 --> 00:19:20,080
don't put comments just because you have

00:19:17,830 --> 00:19:22,010
to split the program into small

00:19:20,080 --> 00:19:25,300
independent modules and functions

00:19:22,010 --> 00:19:27,890
avoid duplication at all costs

00:19:25,300 --> 00:19:30,980
supplements and details and always

00:19:27,890 --> 00:19:34,250
promise readability let me start with a

00:19:30,980 --> 00:19:35,750
code from our programming program should

00:19:34,250 --> 00:19:37,040
we light to the gel it's uploaded its

00:19:35,750 --> 00:19:39,890
character like a single pulse

00:19:37,040 --> 00:19:43,280
so talking about the elegance of the

00:19:39,890 --> 00:19:45,130
program the spirit and interrupt the

00:19:43,280 --> 00:19:47,810
program should be retained throughout

00:19:45,130 --> 00:19:50,840
should have vary the clarity of that

00:19:47,810 --> 00:19:53,120
rich attire in the program there should

00:19:50,840 --> 00:19:55,340
neither be too little or too much they

00:19:53,120 --> 00:19:57,190
need loops or will not reuse those

00:19:55,340 --> 00:19:59,870
variables there's a lack of structural

00:19:57,190 --> 00:20:04,250
rigidity also you have the right balance

00:19:59,870 --> 00:20:04,550
in program to make it beautiful happy

00:20:04,250 --> 00:20:07,380
coding

00:20:04,550 --> 00:20:11,089
and I'm open for questions

00:20:07,380 --> 00:20:11,089
[Applause]

00:20:11,880 --> 00:20:16,340
[Music]

00:20:13,700 --> 00:20:17,810
the slides of soccer on my Twitter feed

00:20:16,340 --> 00:20:18,640
if you can find out if you want to

00:20:17,810 --> 00:20:23,420
follow that

00:20:18,640 --> 00:20:28,460
I'll open positions seven please okay

00:20:23,420 --> 00:20:31,280
Mike yep I am so when you talked about

00:20:28,460 --> 00:20:32,380
the number of objects that the human

00:20:31,280 --> 00:20:34,970
brain contract

00:20:32,380 --> 00:20:36,920
what's your opinion on the sort of

00:20:34,970 --> 00:20:40,460
recommended maximum minimum length of a

00:20:36,920 --> 00:20:42,500
code block sorry they sort of

00:20:40,460 --> 00:20:43,970
recommended length of a code block so

00:20:42,500 --> 00:20:46,100
there's there's a school of thought that

00:20:43,970 --> 00:20:48,950
says if a code block is larger than n

00:20:46,100 --> 00:20:51,110
lines it becomes hard to read where n is

00:20:48,950 --> 00:20:53,120
said to be any number between 48 so I

00:20:51,110 --> 00:20:55,700
think some rule is it shouldn't be more

00:20:53,120 --> 00:20:58,930
than a half a page of heat so I think is

00:20:55,700 --> 00:21:02,330
what people say but I would say when my

00:20:58,930 --> 00:21:03,980
recommendation is not more than ten

00:21:02,330 --> 00:21:08,000
lines is what maximum would say for a

00:21:03,980 --> 00:21:09,500
function so I would say like the 10 plus

00:21:08,000 --> 00:21:16,070
or minus to rule it works for your

00:21:09,500 --> 00:21:17,930
number of lines in function what are

00:21:16,070 --> 00:21:20,630
your thoughts on code for matters like

00:21:17,930 --> 00:21:22,700
why a PS sorry could please repeat I

00:21:20,630 --> 00:21:27,830
couldn't what are your thoughts on code

00:21:22,700 --> 00:21:31,610
formatting tools like why a PS so I

00:21:27,830 --> 00:21:34,220
think it's a a I think let me to pin to

00:21:31,610 --> 00:21:37,790
talk about to go for my tool right yeah

00:21:34,220 --> 00:21:39,560
I think it's a really good tool I think

00:21:37,790 --> 00:21:42,680
it's called the bike share discussion

00:21:39,560 --> 00:21:44,570
site should be use once per to space or

00:21:42,680 --> 00:21:47,270
put that space before or after I think

00:21:44,570 --> 00:21:48,800
we just get used to whatever it is and I

00:21:47,270 --> 00:21:52,040
think go for might go is really done

00:21:48,800 --> 00:21:53,480
very good thing about how you don't have

00:21:52,040 --> 00:21:55,130
options you have just follow this one

00:21:53,480 --> 00:21:57,770
formatting thing but I don't think we

00:21:55,130 --> 00:21:58,250
have that subtly invited though there's

00:21:57,770 --> 00:22:00,440
perfect

00:21:58,250 --> 00:22:03,230
Supt of people who decided follow or not

00:22:00,440 --> 00:22:06,580
I think it really allowed to have

00:22:03,230 --> 00:22:06,580
something like that for Python

00:22:13,670 --> 00:22:19,140
so just a quick question on your heart

00:22:16,140 --> 00:22:23,640
from certainly not specific valent

00:22:19,140 --> 00:22:25,140
eligibles burial names i how i agree

00:22:23,640 --> 00:22:26,970
with not so you said i think it's right

00:22:25,140 --> 00:22:30,180
I just want to develop this habit of

00:22:26,970 --> 00:22:32,730
deleting all the vowels in variable

00:22:30,180 --> 00:22:34,800
names like trying to like taking a name

00:22:32,730 --> 00:22:37,080
and then breathing apply deleting all

00:22:34,800 --> 00:22:41,340
the valves like I hate this what do you

00:22:37,080 --> 00:22:42,960
think about this practice already could

00:22:41,340 --> 00:22:44,520
please repeat the question sorry so this

00:22:42,960 --> 00:22:46,020
kind of habit of deleting all the vowels

00:22:44,520 --> 00:22:48,270
and variable names once you've chosen

00:22:46,020 --> 00:22:51,840
the name but to try and make it shorter

00:22:48,270 --> 00:22:53,190
like some I guess there's a trade-off

00:22:51,840 --> 00:22:56,670
between variable length and

00:22:53,190 --> 00:23:00,210
intelligibility yes so I think it's an

00:22:56,670 --> 00:23:01,950
important point so I would say the

00:23:00,210 --> 00:23:03,720
variable at the length of the variable

00:23:01,950 --> 00:23:05,520
should be proportion can be proportional

00:23:03,720 --> 00:23:06,990
to the scope of it in circuits for

00:23:05,520 --> 00:23:08,640
example if it's a local variable if you

00:23:06,990 --> 00:23:10,050
have a function which is five six lines

00:23:08,640 --> 00:23:12,270
doesn't make it it's probably okay to

00:23:10,050 --> 00:23:14,190
have a single letter variable but

00:23:12,270 --> 00:23:17,160
whether you have a global variable which

00:23:14,190 --> 00:23:19,970
is scope is much larger it's better to

00:23:17,160 --> 00:23:22,410
be that boss and have the full name so

00:23:19,970 --> 00:23:24,560
if it is this a small function or inside

00:23:22,410 --> 00:23:26,850
the for loop I would say for W in words

00:23:24,560 --> 00:23:29,130
W kind of indicates it's a part of a

00:23:26,850 --> 00:23:31,170
it's an element of words so that's a

00:23:29,130 --> 00:23:33,050
single word so that toggle okay to have

00:23:31,170 --> 00:23:37,670
a single letter but I don't really like

00:23:33,050 --> 00:23:42,150
to take out ovals or kind of make it

00:23:37,670 --> 00:23:43,500
short just to I think radio which is

00:23:42,150 --> 00:23:47,000
more important than the length of

00:23:43,500 --> 00:23:47,000
available that's what I would say

00:23:51,030 --> 00:23:57,100
Thank You Alan in your opinion what is

00:23:54,429 --> 00:24:04,240
the good time to clean up your code when

00:23:57,100 --> 00:24:08,860
programming I would say it's a habit

00:24:04,240 --> 00:24:10,150
that you to build over time okay so once

00:24:08,860 --> 00:24:11,440
we start keeping these things in mind

00:24:10,150 --> 00:24:13,210
when you're writing code or looking at

00:24:11,440 --> 00:24:15,100
someone's code you can feel that it's

00:24:13,210 --> 00:24:17,470
kind of violating that principle okay so

00:24:15,100 --> 00:24:19,660
we should start getting the sense of I

00:24:17,470 --> 00:24:20,559
didn't think that bad smells so that

00:24:19,660 --> 00:24:23,679
when you're writing your code you don't

00:24:20,559 --> 00:24:27,179
actually write that kind of things so I

00:24:23,679 --> 00:24:29,440
mean probably even your beginning you

00:24:27,179 --> 00:24:31,300
for a big match it probably takes a

00:24:29,440 --> 00:24:33,640
while to get that habit so you'll write

00:24:31,300 --> 00:24:35,610
it and then clean up but once you get to

00:24:33,640 --> 00:24:38,920
that go to that habit you'll probably

00:24:35,610 --> 00:24:43,120
start getting that sense it kind of

00:24:38,920 --> 00:24:46,809
becomes your habit I believe any more

00:24:43,120 --> 00:24:48,570
questions okay

00:24:46,809 --> 00:24:48,780
so thanks a lot Erin Thanks

00:24:48,570 --> 00:24:53,319
[Music]

00:24:48,780 --> 00:24:53,319

YouTube URL: https://www.youtube.com/watch?v=QIRyr6qvGrY


