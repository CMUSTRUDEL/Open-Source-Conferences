Title: Mario Corchero - Effortless Logging - Let the loggers work for you
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Effortless Logging - Let the loggers work for you
[EuroPython 2017 - Talk - 2017-07-10 - PythonAnywhere Room]
[Rimini, Italy]

Logs are your best friends on those late nights when you try to troubleshoot that problem in production that was written by a friend of you who is on holidays at the moment. Logs are the main way to know what is happening at runtime with an running application but as we donâ€™t realize how important they are until we actually need them it is usually an under appreciated part of our development process.

This talks overviews the logging module of the standard library and demonstrates some basic best practices and techniques make the most out of our logging when we need it.
After this talk you will be fully familiar not only on how to use the logging library but also how it is actually designed, how it works, how to extended further than the basic usage and some sample recipes and configurations for complex applications.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,190 --> 00:00:09,080
well everyone well first of all thank

00:00:08,149 --> 00:00:11,080
you very much for your Python for

00:00:09,080 --> 00:00:14,059
hosting me I think this is one of the

00:00:11,080 --> 00:00:15,290
hardest conferences because you don't

00:00:14,059 --> 00:00:16,580
only have to compete with the rest of

00:00:15,290 --> 00:00:18,800
the speakers but as well with the beach

00:00:16,580 --> 00:00:21,439
I'm surprised to see I have that many

00:00:18,800 --> 00:00:23,689
people here so my name is Mario Coursera

00:00:21,439 --> 00:00:25,610
I work at Bloomberg I'm a Python

00:00:23,689 --> 00:00:27,649
developer and I work in news automation

00:00:25,610 --> 00:00:29,360
if you want to speak about my company or

00:00:27,649 --> 00:00:31,700
Spain because I'm a Spanish or the

00:00:29,360 --> 00:00:34,700
tycoon's pain or anything else I'll hang

00:00:31,700 --> 00:00:37,010
around afterwards so today we are going

00:00:34,700 --> 00:00:39,470
to speak about login we'll have a

00:00:37,010 --> 00:00:42,260
briefing direction on why why should you

00:00:39,470 --> 00:00:44,810
log how logging works how can you use it

00:00:42,260 --> 00:00:49,490
how do you configure it we'll do we'll

00:00:44,810 --> 00:00:51,350
try to do a little code demo so I'm

00:00:49,490 --> 00:00:53,810
going to be jumping going for it and

00:00:51,350 --> 00:00:55,160
then some sample use cases that you can

00:00:53,810 --> 00:00:56,600
implement on top of logging and then

00:00:55,160 --> 00:00:59,510
we'll have some time well we'll try to

00:00:56,600 --> 00:01:01,400
have some time for Q&A so first of all

00:00:59,510 --> 00:01:05,990
well we can do a full talk on why log

00:01:01,400 --> 00:01:07,909
matters but in brief I see you don't see

00:01:05,990 --> 00:01:09,649
documentation as the information you

00:01:07,909 --> 00:01:11,600
give to the rest of the developers when

00:01:09,649 --> 00:01:12,770
they are coding and I see login as the

00:01:11,600 --> 00:01:14,119
information that you give to the

00:01:12,770 --> 00:01:16,700
developers and they see that mean when

00:01:14,119 --> 00:01:18,319
your application is running this this is

00:01:16,700 --> 00:01:21,619
one of the things that we usually don't

00:01:18,319 --> 00:01:24,409
don't care that much about right we put

00:01:21,619 --> 00:01:26,240
all kind of a log in trash and then when

00:01:24,409 --> 00:01:28,030
we have an issue we really wish that we

00:01:26,240 --> 00:01:31,999
had the proper locks

00:01:28,030 --> 00:01:34,579
so about the why should you use login

00:01:31,999 --> 00:01:38,329
instead of sample just printing blah

00:01:34,579 --> 00:01:40,850
blah blah around audio code first of all

00:01:38,329 --> 00:01:42,770
well some people actually say that if

00:01:40,850 --> 00:01:44,329
you have to use a debugger that's a

00:01:42,770 --> 00:01:46,819
smell that you are not using login

00:01:44,329 --> 00:01:50,119
properly and I don't know if you want to

00:01:46,819 --> 00:01:51,649
go that stream but using login instead

00:01:50,119 --> 00:01:53,979
of printing it gives you a lot of

00:01:51,649 --> 00:01:56,029
benefits it's much versatile and

00:01:53,979 --> 00:02:00,139
configurable it's really beautiful how

00:01:56,029 --> 00:02:03,170
it splits they how you log from the

00:02:00,139 --> 00:02:05,719
watch a lot and if you have a

00:02:03,170 --> 00:02:07,549
multi-threaded environment it will work

00:02:05,719 --> 00:02:09,740
compared to print which have some issues

00:02:07,549 --> 00:02:11,640
to it trying to come with all the notes

00:02:09,740 --> 00:02:14,370
I had in my slides so

00:02:11,640 --> 00:02:16,530
bear with me and there are more things I

00:02:14,370 --> 00:02:20,430
promise but you can check the slides

00:02:16,530 --> 00:02:22,740
afterwards so have a log and look how

00:02:20,430 --> 00:02:25,290
our looking works in Python - well is

00:02:22,740 --> 00:02:27,030
there any Java developer in the room you

00:02:25,290 --> 00:02:28,320
can put your hands where it is not the

00:02:27,030 --> 00:02:29,820
simple art conferences we are going to

00:02:28,320 --> 00:02:31,380
we are not going to hit you in I mean or

00:02:29,820 --> 00:02:33,450
any center we will respect people this

00:02:31,380 --> 00:02:36,650
is Python around again if you're

00:02:33,450 --> 00:02:39,510
familiar with log apache log4j python

00:02:36,650 --> 00:02:40,980
was built the python noggin model was

00:02:39,510 --> 00:02:43,890
built with that in mind following that

00:02:40,980 --> 00:02:46,080
standard so we're going to see all

00:02:43,890 --> 00:02:48,150
different elements on on the login model

00:02:46,080 --> 00:02:51,209
so the first of all is on the login

00:02:48,150 --> 00:02:53,780
library we have lawyers loggers are your

00:02:51,209 --> 00:02:56,790
main we phone to be able to log anything

00:02:53,780 --> 00:02:58,410
they just allow you to pass the string

00:02:56,790 --> 00:03:00,300
and whatever argument you have with a

00:02:58,410 --> 00:03:02,850
category you know that this is going to

00:03:00,300 --> 00:03:05,820
call the weather object and some log

00:03:02,850 --> 00:03:08,360
line is going to go to a string I like

00:03:05,820 --> 00:03:10,350
to take the console or or a file right

00:03:08,360 --> 00:03:12,780
going really quickly the settlement

00:03:10,350 --> 00:03:14,670
what's next okay so yeah that is not

00:03:12,780 --> 00:03:16,650
just like that so the logging model is

00:03:14,670 --> 00:03:17,850
actually creating a login record which

00:03:16,650 --> 00:03:20,190
is an object that is going to shuffle

00:03:17,850 --> 00:03:21,450
everything in it and that object is

00:03:20,190 --> 00:03:24,090
actually what's going to be locked and

00:03:21,450 --> 00:03:25,590
you might be wondering but okay that's

00:03:24,090 --> 00:03:27,870
an object how is the object actually

00:03:25,590 --> 00:03:29,970
going to the console to the file that's

00:03:27,870 --> 00:03:33,900
where we use handlers okay we have seen

00:03:29,970 --> 00:03:35,850
longer subject like logger log records

00:03:33,900 --> 00:03:38,070
logger objects and now we're going to

00:03:35,850 --> 00:03:41,040
you're seeing handle under are the

00:03:38,070 --> 00:03:45,420
instances that are objects that allow

00:03:41,040 --> 00:03:46,110
you to print things to a file or to to a

00:03:45,420 --> 00:03:48,450
console

00:03:46,110 --> 00:03:50,880
there are there are many lovers that

00:03:48,450 --> 00:03:53,970
there are many handlers already in the

00:03:50,880 --> 00:03:56,400
built-in login model for example you can

00:03:53,970 --> 00:03:59,370
log to a file you can log to console you

00:03:56,400 --> 00:04:01,730
can look by by HTTP you can send things

00:03:59,370 --> 00:04:04,380
to a socket you can send them via email

00:04:01,730 --> 00:04:07,739
and I know I'm missing one it's in the

00:04:04,380 --> 00:04:09,959
notes check these lights and then how we

00:04:07,739 --> 00:04:12,060
say we are going to create a logger

00:04:09,959 --> 00:04:14,250
object we're gonna call info on it or

00:04:12,060 --> 00:04:15,959
whatever category we went to log on we

00:04:14,250 --> 00:04:18,030
pass all the information that's gonna

00:04:15,959 --> 00:04:19,830
call the code that lives in the logger

00:04:18,030 --> 00:04:20,940
class which is gonna create the log

00:04:19,830 --> 00:04:22,349
record and is going to pass it to the

00:04:20,940 --> 00:04:25,350
handler which is going to do its magic

00:04:22,349 --> 00:04:28,470
so name it it with its code

00:04:25,350 --> 00:04:30,030
and it's going to transform it into you

00:04:28,470 --> 00:04:31,800
know it's going to shatter it's going to

00:04:30,030 --> 00:04:34,380
put it into a file or into the screen

00:04:31,800 --> 00:04:37,020
and you might wonder but how does the

00:04:34,380 --> 00:04:40,170
handler knows how to put all this

00:04:37,020 --> 00:04:42,240
beautiful log record information into a

00:04:40,170 --> 00:04:43,740
file so that's where we have formatters

00:04:42,240 --> 00:04:45,000
formatters are going to mix all the

00:04:43,740 --> 00:04:47,310
information in that we have in the

00:04:45,000 --> 00:04:50,310
logger in the local record and they're

00:04:47,310 --> 00:04:52,980
going to give you back a string okay so

00:04:50,310 --> 00:04:55,470
we said we have a logger object we call

00:04:52,980 --> 00:04:56,550
info or whatever category in it with all

00:04:55,470 --> 00:04:58,410
the information that's going to go to

00:04:56,550 --> 00:04:59,790
the lower code the log record is going

00:04:58,410 --> 00:05:00,810
to create the logger record the logo

00:04:59,790 --> 00:05:02,550
record is going to pass it to the

00:05:00,810 --> 00:05:04,170
handler the handle will call it for

00:05:02,550 --> 00:05:05,880
matter which will give you back string

00:05:04,170 --> 00:05:07,950
and then you can pass it to a file or a

00:05:05,880 --> 00:05:10,350
function whatever right so we know how

00:05:07,950 --> 00:05:13,020
longer work how look at works on top of

00:05:10,350 --> 00:05:14,810
all this we have filters we do sit just

00:05:13,020 --> 00:05:19,490
spend 30 minutes 30 seconds of them

00:05:14,810 --> 00:05:22,470
filters are a way to be able to is a

00:05:19,490 --> 00:05:24,570
really flexible tool to be able to

00:05:22,470 --> 00:05:27,390
filter logs in some predefined

00:05:24,570 --> 00:05:29,310
conditions by default I mean the default

00:05:27,390 --> 00:05:30,810
over is not that much useful but you can

00:05:29,310 --> 00:05:34,440
create your own ones and it allows you

00:05:30,810 --> 00:05:37,290
to attach those ones to the to deliver

00:05:34,440 --> 00:05:38,790
something handlers to filter out some

00:05:37,290 --> 00:05:43,770
some loggers that you may not want to

00:05:38,790 --> 00:05:45,330
look so we said we create the logger we

00:05:43,770 --> 00:05:47,250
pass the information it goes to the code

00:05:45,330 --> 00:05:50,280
of the logger it takes the filter so if

00:05:47,250 --> 00:05:51,900
all the filters return true cool we omit

00:05:50,280 --> 00:05:53,370
the log record that we just created it

00:05:51,900 --> 00:05:55,800
goes to the hundred handle shows have

00:05:53,370 --> 00:05:57,690
some filters if that passes then we

00:05:55,800 --> 00:05:59,190
format the log record we get back the

00:05:57,690 --> 00:06:03,090
string and we send it out to whatever we

00:05:59,190 --> 00:06:05,130
decide great we also have the law

00:06:03,090 --> 00:06:05,760
hierarchy okay so what is the law here

00:06:05,130 --> 00:06:07,380
kitten

00:06:05,760 --> 00:06:09,450
so we haven't seen so far how do we

00:06:07,380 --> 00:06:12,450
actually create the logger all the

00:06:09,450 --> 00:06:14,070
loggers are defined with that factory

00:06:12,450 --> 00:06:16,410
function which is called a guide logger

00:06:14,070 --> 00:06:19,920
and it allows you to pass a string which

00:06:16,410 --> 00:06:21,180
is dot separated naming conventions so

00:06:19,920 --> 00:06:23,460
for example here we can see we're

00:06:21,180 --> 00:06:26,130
creating parent or child and what that

00:06:23,460 --> 00:06:28,110
means is that here we are defining the

00:06:26,130 --> 00:06:30,840
child logger which is a child of the

00:06:28,110 --> 00:06:33,120
parent logger and and so on if you were

00:06:30,840 --> 00:06:35,430
to create the longer one okay so now we

00:06:33,120 --> 00:06:37,530
have the final one right so we create

00:06:35,430 --> 00:06:38,720
the logger we know how to and now we

00:06:37,530 --> 00:06:41,240
will of something is go

00:06:38,720 --> 00:06:43,130
to the logger code it goes through the

00:06:41,240 --> 00:06:44,570
filters if it's all if it's all good

00:06:43,130 --> 00:06:47,270
then we go to the handler section which

00:06:44,570 --> 00:06:49,700
is we omit the log record go to the hand

00:06:47,270 --> 00:06:52,100
resulallah but then also if the logger

00:06:49,700 --> 00:06:54,350
has an attribute called propagate it

00:06:52,100 --> 00:06:56,450
will go to its parent and emit the

00:06:54,350 --> 00:06:59,900
amygdala record following again this

00:06:56,450 --> 00:07:03,470
same flow will it executes the filter

00:06:59,900 --> 00:07:06,170
code no this is a great people that I

00:07:03,470 --> 00:07:08,540
have fallen many times so it will just

00:07:06,170 --> 00:07:10,450
execute this part of the parents so when

00:07:08,540 --> 00:07:13,820
and what they hear our key means is that

00:07:10,450 --> 00:07:15,050
once you have went when you log when you

00:07:13,820 --> 00:07:16,850
call all your handlers you're going to

00:07:15,050 --> 00:07:17,930
call the handles of your parents it's

00:07:16,850 --> 00:07:19,310
not that you're going to call your

00:07:17,930 --> 00:07:21,470
parent is it you're going to call the

00:07:19,310 --> 00:07:23,120
panders of your parent also another way

00:07:21,470 --> 00:07:25,190
that the hierarchy impacts is that if

00:07:23,120 --> 00:07:27,470
you don't set the level on the logger it

00:07:25,190 --> 00:07:29,930
will use the part in this one okay

00:07:27,470 --> 00:07:32,360
so we know how logger works right more

00:07:29,930 --> 00:07:34,220
or less there is just two more two more

00:07:32,360 --> 00:07:36,530
conditions I promise this is the final

00:07:34,220 --> 00:07:38,750
one okay so double of that loggers can

00:07:36,530 --> 00:07:40,610
be enabled or disabled and you have the

00:07:38,750 --> 00:07:42,440
category which is so2 and handler that

00:07:40,610 --> 00:07:44,120
this is more or less the whole workflow

00:07:42,440 --> 00:07:45,560
if you don't trust me you can go to the

00:07:44,120 --> 00:07:49,370
commutation which you have this this

00:07:45,560 --> 00:07:51,740
other one which is kind of the same okay

00:07:49,370 --> 00:07:54,169
so we know we know how the logger works

00:07:51,740 --> 00:07:58,100
right but let's see how how we use this

00:07:54,169 --> 00:08:01,280
this huge implementation this huge base

00:07:58,100 --> 00:08:02,720
code so here we can see how can we lock

00:08:01,280 --> 00:08:05,570
some stuff this is how you as a

00:08:02,720 --> 00:08:07,310
developer we just log things this is the

00:08:05,570 --> 00:08:10,970
what you log not by how you look at

00:08:07,310 --> 00:08:12,770
that's I think this is I love this way

00:08:10,970 --> 00:08:14,870
of separating the concern of how you

00:08:12,770 --> 00:08:17,750
look things from what y'all think you're

00:08:14,870 --> 00:08:20,570
usually fine separating them but so we

00:08:17,750 --> 00:08:22,669
just import login we get a logger we use

00:08:20,570 --> 00:08:27,260
names so you can use the name of the

00:08:22,669 --> 00:08:29,150
model which it it gets so name is it

00:08:27,260 --> 00:08:30,860
will give you the full path model model

00:08:29,150 --> 00:08:33,650
the Jerusalem so for example let's say

00:08:30,860 --> 00:08:37,370
you have project one and then a folder

00:08:33,650 --> 00:08:39,830
called folder one and then a file file1

00:08:37,370 --> 00:08:42,589
this will be project one if there are

00:08:39,830 --> 00:08:45,320
python models folder one sorry project

00:08:42,589 --> 00:08:46,460
one folder one taiwan so it gives you by

00:08:45,320 --> 00:08:48,950
default a really nice and beautiful

00:08:46,460 --> 00:08:50,620
hierarchy that follows your file

00:08:48,950 --> 00:08:53,960
hierarchy

00:08:50,620 --> 00:08:55,970
we do we log at a bug so do we have

00:08:53,960 --> 00:08:57,560
different categories debug info error

00:08:55,970 --> 00:08:59,930
and critical

00:08:57,560 --> 00:09:01,580
will we have a debug log that we just

00:08:59,930 --> 00:09:03,950
usually want to see maybe in our tests

00:09:01,580 --> 00:09:06,320
or maybe now development server we do

00:09:03,950 --> 00:09:08,240
actually some execution we catch an

00:09:06,320 --> 00:09:09,830
exception we do log exceptions this is

00:09:08,240 --> 00:09:12,860
not a new category this is just error

00:09:09,830 --> 00:09:14,890
but passing X into our next info is

00:09:12,860 --> 00:09:17,660
going to log all the information it has

00:09:14,890 --> 00:09:21,500
like the track and the all information

00:09:17,660 --> 00:09:22,580
it has about the exception so we do this

00:09:21,500 --> 00:09:24,740
we can do the same with all the

00:09:22,580 --> 00:09:27,200
categories by just enforced forcing X

00:09:24,740 --> 00:09:29,300
info to be true and if you're wondering

00:09:27,200 --> 00:09:30,380
oh my god I love this trace back saying

00:09:29,300 --> 00:09:33,620
I want to see it as well

00:09:30,380 --> 00:09:35,900
in old logs from Python 3.2 I believe

00:09:33,620 --> 00:09:38,030
don't quote me on that you have this

00:09:35,900 --> 00:09:39,350
tacking for actually that you can pass

00:09:38,030 --> 00:09:43,730
when you log which will also bring down

00:09:39,350 --> 00:09:45,500
the stack ok cool now some some things I

00:09:43,730 --> 00:09:48,020
wished I knew when I started things I

00:09:45,500 --> 00:09:50,990
should do with login is if you do this

00:09:48,020 --> 00:09:53,270
even if it's debug is gonna format and

00:09:50,990 --> 00:09:54,680
it's going to use you know this has a

00:09:53,270 --> 00:09:56,660
computational computational cost

00:09:54,680 --> 00:10:00,430
formatting the string if you don't use

00:09:56,660 --> 00:10:02,600
it so just pass the template and then

00:10:00,430 --> 00:10:04,220
pass the argument that you want to put

00:10:02,600 --> 00:10:07,610
into place holders if you don't like

00:10:04,220 --> 00:10:10,100
this kind of string rotation the

00:10:07,610 --> 00:10:12,770
formatters have different types I have

00:10:10,100 --> 00:10:17,120
10 minutes I have done 10 minutes ten

00:10:12,770 --> 00:10:19,540
more Wow so really quickly if you are

00:10:17,120 --> 00:10:22,400
doing this this is I don't know how many

00:10:19,540 --> 00:10:24,080
sorry okay thank you thank you

00:10:22,400 --> 00:10:26,360
so if you're doing this you probably

00:10:24,080 --> 00:10:29,540
will see errors like a trivial a

00:10:26,360 --> 00:10:30,680
terrible hair has happened data I don't

00:10:29,540 --> 00:10:33,530
know how many times have this I've seen

00:10:30,680 --> 00:10:36,080
this in in programs so quite file use

00:10:33,530 --> 00:10:37,610
quite often your caption exception and

00:10:36,080 --> 00:10:39,470
login that exception but what is

00:10:37,610 --> 00:10:41,480
happening is is logging the string

00:10:39,470 --> 00:10:43,760
representation of the exception which

00:10:41,480 --> 00:10:46,460
four key errors is just the key that is

00:10:43,760 --> 00:10:48,440
missing this extremely first rotation so

00:10:46,460 --> 00:10:49,820
what you probably want to do is pass X

00:10:48,440 --> 00:10:51,380
info which we saw before and you're

00:10:49,820 --> 00:10:53,810
going to see the full screen I'm going

00:10:51,380 --> 00:10:57,020
to jump really quickly we spoke a little

00:10:53,810 --> 00:10:59,810
bit about this now we know how to use it

00:10:57,020 --> 00:11:01,270
how do we configure it isn't it

00:10:59,810 --> 00:11:03,790
beautiful

00:11:01,270 --> 00:11:05,410
I'll leave you five seconds

00:11:03,790 --> 00:11:08,680
this is how you can configure the whole

00:11:05,410 --> 00:11:10,360
login engine isn't it great so this is

00:11:08,680 --> 00:11:12,160
the basic this is one of the ways you

00:11:10,360 --> 00:11:15,010
can configure it you have all those

00:11:12,160 --> 00:11:16,990
parameters my default is going to pin to

00:11:15,010 --> 00:11:19,180
the console but if you pass a file link

00:11:16,990 --> 00:11:21,460
is going to think it's gonna point to a

00:11:19,180 --> 00:11:23,290
file you can go over all the parameters

00:11:21,460 --> 00:11:24,970
with basically this if you same defaults

00:11:23,290 --> 00:11:26,740
if you don't like the same defaults

00:11:24,970 --> 00:11:29,290
there are two other ways to configure

00:11:26,740 --> 00:11:30,790
the login model well that's three you

00:11:29,290 --> 00:11:32,490
can configure it by a code like just

00:11:30,790 --> 00:11:36,190
creating all the objects manually and

00:11:32,490 --> 00:11:38,680
wiring them you can also configure it

00:11:36,190 --> 00:11:40,630
via a configuration file which I don't

00:11:38,680 --> 00:11:42,370
like so I won't show you and the third

00:11:40,630 --> 00:11:44,890
one is you can configure it using the

00:11:42,370 --> 00:11:46,090
big config so they can't see allows you

00:11:44,890 --> 00:11:49,480
to pass the dictionary with all the

00:11:46,090 --> 00:11:51,310
options it can get even higher than this

00:11:49,480 --> 00:11:52,450
I don't know if you have seen the login

00:11:51,310 --> 00:11:53,560
configuration on jungle

00:11:52,450 --> 00:11:55,270
that's actually what you are doing

00:11:53,560 --> 00:11:58,780
behind the heads we are using the big

00:11:55,270 --> 00:12:01,330
conflict I usually use I personally

00:11:58,780 --> 00:12:03,220
prefer big country and I will put this

00:12:01,330 --> 00:12:06,480
config in a Yammer file a load the ml

00:12:03,220 --> 00:12:06,480
file and then I pass it to the country

00:12:07,230 --> 00:12:12,790
till so here we can see we are we you

00:12:11,260 --> 00:12:19,270
can define on the D configured for

00:12:12,790 --> 00:12:24,010
matters handlers and loggers yeah more

00:12:19,270 --> 00:12:28,090
in the documentation so I want to show

00:12:24,010 --> 00:12:32,950
you that all I've said is true and I

00:12:28,090 --> 00:12:37,260
have a demo yes because there are not

00:12:32,950 --> 00:12:40,750
enough technical difficulties right so

00:12:37,260 --> 00:12:43,060
and I have to type with one hand so we

00:12:40,750 --> 00:12:44,950
are going to just going to see how how a

00:12:43,060 --> 00:12:47,740
lot line is going to go through all the

00:12:44,950 --> 00:12:48,820
code we we explained already so we are

00:12:47,740 --> 00:12:51,820
just going to import logging with the

00:12:48,820 --> 00:12:54,540
basic the basic configure and we just

00:12:51,820 --> 00:13:01,350
print it and this is my cheat sheet so

00:12:54,540 --> 00:13:06,840
we use Python Python 2.4 angelica and

00:13:01,350 --> 00:13:06,840
thousand 3 minus n PDV

00:13:07,670 --> 00:13:18,260
oh you didn't see that you probably want

00:13:09,860 --> 00:13:20,960
to see it hey you are so okay upper

00:13:18,260 --> 00:13:23,000
bound okay so what's the first thing we

00:13:20,960 --> 00:13:25,700
see we are going to check if the logger

00:13:23,000 --> 00:13:27,560
is enabled for that level right it is

00:13:25,700 --> 00:13:29,330
because we we have it configure an info

00:13:27,560 --> 00:13:31,070
and then we go to the inner function

00:13:29,330 --> 00:13:32,960
underscore log which has all the

00:13:31,070 --> 00:13:36,980
interesting stuff it's getting the track

00:13:32,960 --> 00:13:39,620
info source file up a bomb get the color

00:13:36,980 --> 00:13:42,230
info and now we are creating this log

00:13:39,620 --> 00:13:45,590
record that we spoke about right so next

00:13:42,230 --> 00:13:49,430
next you can print with parentheses

00:13:45,590 --> 00:13:51,200
because it's three record so here you

00:13:49,430 --> 00:13:52,760
can see how does the log record looks

00:13:51,200 --> 00:13:55,670
like okay so it has all the information

00:13:52,760 --> 00:13:57,320
that can capture around it and also the

00:13:55,670 --> 00:14:01,810
the string and the parameters will be

00:13:57,320 --> 00:14:01,810
passed we go next

00:14:04,000 --> 00:14:11,360
have I gone inside sorry start again

00:14:07,330 --> 00:14:21,680
amazing don't do them all with a single

00:14:11,360 --> 00:14:26,780
hand bump a bump above next next no no I

00:14:21,680 --> 00:14:29,660
told you Marga so we go inside next next

00:14:26,780 --> 00:14:32,120
next next next we create the logger they

00:14:29,660 --> 00:14:34,190
log record here cool and now we're going

00:14:32,120 --> 00:14:35,450
to handle which is not the handle class

00:14:34,190 --> 00:14:37,640
but the handle method within the

00:14:35,450 --> 00:14:39,830
function and what do we check if the

00:14:37,640 --> 00:14:41,690
logger is enabled or not and we check

00:14:39,830 --> 00:14:42,770
all the filters because they return true

00:14:41,690 --> 00:14:44,930
then we are going to call all the

00:14:42,770 --> 00:14:46,430
handlers and I'm gonna I'm running out

00:14:44,930 --> 00:14:47,930
of time this is really interesting I

00:14:46,430 --> 00:14:49,310
recommend you do it afterwards I'm gonna

00:14:47,930 --> 00:14:51,260
put it in the slides but there is still

00:14:49,310 --> 00:14:54,440
more content to go over and we have five

00:14:51,260 --> 00:14:57,230
minutes I probably will go through all

00:14:54,440 --> 00:15:04,640
we spoke but there is not and I forgot

00:14:57,230 --> 00:15:06,400
the clicker okay so I see some use cases

00:15:04,640 --> 00:15:09,910
because this might be more interesting

00:15:06,400 --> 00:15:12,350
so I'm gonna jump over this one

00:15:09,910 --> 00:15:14,900
basically you're going to find multiple

00:15:12,350 --> 00:15:16,550
handlers something I have on my web is I

00:15:14,900 --> 00:15:18,560
send to my to my cell phone they call

00:15:16,550 --> 00:15:20,760
the critical errors via email I have a

00:15:18,560 --> 00:15:22,290
single file with all the error locks

00:15:20,760 --> 00:15:23,639
because I may want to see in three

00:15:22,290 --> 00:15:25,889
months what actually happening with the

00:15:23,639 --> 00:15:28,889
arrows but for the info and the bikes

00:15:25,889 --> 00:15:30,810
only available in in-depth I will just

00:15:28,889 --> 00:15:33,959
rotate them every four days for example

00:15:30,810 --> 00:15:35,910
so I keep only for the vlogs the

00:15:33,959 --> 00:15:37,889
complaint Jason where the where would we

00:15:35,910 --> 00:15:40,050
do the Jason formatting in the handler

00:15:37,889 --> 00:15:43,050
no in the formatter right

00:15:40,050 --> 00:15:44,730
so this is how you could you can

00:15:43,050 --> 00:15:47,190
configure replication to the opposition

00:15:44,730 --> 00:15:49,019
because you know you're on hype and you

00:15:47,190 --> 00:15:50,880
know that log should not be human

00:15:49,019 --> 00:15:52,500
readable and you prefer to send it to

00:15:50,880 --> 00:15:56,000
some kind of post processing logs that

00:15:52,500 --> 00:15:58,889
will do much better job it data Jason

00:15:56,000 --> 00:16:02,970
there is code I'll try to upload it and

00:15:58,889 --> 00:16:04,560
I don't have time to do the data it's in

00:16:02,970 --> 00:16:07,170
filters web context if you are over

00:16:04,560 --> 00:16:10,050
Python 3.2 there is now a factory method

00:16:07,170 --> 00:16:11,820
you can configure to capture all the

00:16:10,050 --> 00:16:13,800
codes whenever log record is created and

00:16:11,820 --> 00:16:16,740
you can add some extra contextual

00:16:13,800 --> 00:16:18,209
information if you are before 3.3 some

00:16:16,740 --> 00:16:20,220
kind of convention is you can use the

00:16:18,209 --> 00:16:23,220
field you can overuse the filters to add

00:16:20,220 --> 00:16:25,079
information so what is this doing this

00:16:23,220 --> 00:16:27,990
is using a nice and global scary stuff

00:16:25,079 --> 00:16:29,190
that is going to be passed to like all

00:16:27,990 --> 00:16:31,050
the lots are going to pass through here

00:16:29,190 --> 00:16:33,500
because we saw how the filters can be

00:16:31,050 --> 00:16:35,880
added to both lovers and handlers and

00:16:33,500 --> 00:16:38,399
you can enrich it with something and

00:16:35,880 --> 00:16:40,350
then put it in here for matter where

00:16:38,399 --> 00:16:42,660
would you put it in the logger or in the

00:16:40,350 --> 00:16:43,760
handler if you want to do it for all the

00:16:42,660 --> 00:16:46,019
logs

00:16:43,760 --> 00:16:48,959
not everyone answer in the same time we

00:16:46,019 --> 00:16:51,240
just I don't understand what you say in

00:16:48,959 --> 00:16:53,250
the handler we are right because if you

00:16:51,240 --> 00:16:55,319
do it in the logger it will only happen

00:16:53,250 --> 00:16:58,649
folder for the parent one right because

00:16:55,319 --> 00:17:00,329
we saw that with the hierarchy you're

00:16:58,649 --> 00:17:02,010
going to call all your handlers and the

00:17:00,329 --> 00:17:04,280
handlers of your parents but you are not

00:17:02,010 --> 00:17:08,220
going to execute the code of your parent

00:17:04,280 --> 00:17:10,919
okay more cool stuff

00:17:08,220 --> 00:17:13,350
buffering how many times you have an

00:17:10,919 --> 00:17:16,350
error you have log an error and you wish

00:17:13,350 --> 00:17:20,220
you had only changed that debug log to

00:17:16,350 --> 00:17:21,990
info right so this is what this a smart

00:17:20,220 --> 00:17:24,809
buffer handler is going to do is is

00:17:21,990 --> 00:17:28,319
going to have AB is going to buffering

00:17:24,809 --> 00:17:30,030
that the previews log in this case one

00:17:28,319 --> 00:17:32,250
and when every detection error is going

00:17:30,030 --> 00:17:33,600
to not only look better but also the

00:17:32,250 --> 00:17:35,789
preview simple

00:17:33,600 --> 00:17:40,049
so you can do for example whenever there

00:17:35,789 --> 00:17:45,240
is an error print the last 20 divided

00:17:40,049 --> 00:17:46,559
logs don't have time for that okay so

00:17:45,240 --> 00:17:49,919
like this jump in case you have

00:17:46,559 --> 00:17:52,950
questions if you want to do if you want

00:17:49,919 --> 00:17:55,590
to slice say that you want to get only

00:17:52,950 --> 00:17:57,480
in depth some if some you want sorry

00:17:55,590 --> 00:17:58,860
they want to log the result of a

00:17:57,480 --> 00:18:00,419
function only in death I don't know what

00:17:58,860 --> 00:18:02,700
you would do that because you might have

00:18:00,419 --> 00:18:04,380
for example the scroller hasten back

00:18:02,700 --> 00:18:06,929
which is a bug that only happens where

00:18:04,380 --> 00:18:09,240
you have your blocks in the bug you can

00:18:06,929 --> 00:18:12,029
use this kind of pattern which is that

00:18:09,240 --> 00:18:13,320
you create an object that will call your

00:18:12,029 --> 00:18:17,789
function only when you call this three

00:18:13,320 --> 00:18:20,100
and that's it take away stop illegal

00:18:17,789 --> 00:18:23,580
logging in Amazonas that was the talk

00:18:20,100 --> 00:18:26,340
about but not really like logging model

00:18:23,580 --> 00:18:27,809
is i think it's amazing you can you can

00:18:26,340 --> 00:18:31,710
build on top of it as much as you want

00:18:27,809 --> 00:18:34,110
and it's really i love the way the word

00:18:31,710 --> 00:18:36,840
on the hand and the how is it separate

00:18:34,110 --> 00:18:39,149
to this it allows all the parts of the

00:18:36,840 --> 00:18:42,299
system to collaborate on logging so for

00:18:39,149 --> 00:18:46,259
example you saw how we did before this

00:18:42,299 --> 00:18:47,759
thing of and reaching the the context of

00:18:46,259 --> 00:18:49,320
the logger so something you can do if

00:18:47,759 --> 00:18:51,779
you do that it's not only that your log

00:18:49,320 --> 00:18:53,610
the logs are going to log that global

00:18:51,779 --> 00:18:55,620
scary stuff is that also the library

00:18:53,610 --> 00:18:58,620
that you call are going to log it so

00:18:55,620 --> 00:19:02,159
you're really you're really separating

00:18:58,620 --> 00:19:03,929
their worth on the house and that's all

00:19:02,159 --> 00:19:06,220
we have two minutes for questions that's

00:19:03,929 --> 00:19:11,109
my in effect

00:19:06,220 --> 00:19:11,109
[Applause]

00:19:12,730 --> 00:19:19,550
we have some question really I use a

00:19:16,460 --> 00:19:21,200
plug for Mario game because we're in the

00:19:19,550 --> 00:19:24,620
middle of everything so we have a

00:19:21,200 --> 00:19:28,040
question here and it seems that the

00:19:24,620 --> 00:19:30,860
login module does a lot as you can what

00:19:28,040 --> 00:19:33,680
what is the performance impact so yeah

00:19:30,860 --> 00:19:36,500
so actually something really scary is

00:19:33,680 --> 00:19:38,030
that if for example this is why I say

00:19:36,500 --> 00:19:40,100
that more or less you can split there

00:19:38,030 --> 00:19:41,240
the water on the house if you have

00:19:40,100 --> 00:19:43,640
sending an email

00:19:41,240 --> 00:19:44,990
this is it depends on the handler but

00:19:43,640 --> 00:19:46,640
caffeine is everything is happened

00:19:44,990 --> 00:19:49,280
happen synchronously so it's really

00:19:46,640 --> 00:19:53,510
going to impact your your performance if

00:19:49,280 --> 00:19:55,340
you if you for example enable the bug

00:19:53,510 --> 00:19:57,530
logs and your debugging something in the

00:19:55,340 --> 00:19:59,360
for loop it's really going to go to the

00:19:57,530 --> 00:20:02,900
buffer and then to the file or every

00:19:59,360 --> 00:20:04,250
single iteration so like don't don't

00:20:02,900 --> 00:20:06,020
just ignore it big be careful with

00:20:04,250 --> 00:20:08,690
logging so it does have like that I

00:20:06,020 --> 00:20:11,540
haven't measured it in normal in normal

00:20:08,690 --> 00:20:13,790
the performance forget that but the body

00:20:11,540 --> 00:20:16,100
knows yeah so it depends on what you lot

00:20:13,790 --> 00:20:18,680
right so you can see it depends on how

00:20:16,100 --> 00:20:20,780
much you look but it does have an impact

00:20:18,680 --> 00:20:22,700
how many milliseconds it's going to take

00:20:20,780 --> 00:20:24,470
it depends so for example if you are

00:20:22,700 --> 00:20:26,030
doing via sending an email it's going to

00:20:24,470 --> 00:20:27,950
take longer if you look to if you look

00:20:26,030 --> 00:20:32,540
to a file how long it takes to log to a

00:20:27,950 --> 00:20:39,170
file it depends on your disk so there is

00:20:32,540 --> 00:20:42,970
another question what's your opinion

00:20:39,170 --> 00:20:45,890
about to use decorators for for logging

00:20:42,970 --> 00:20:48,470
use like this thing where you put

00:20:45,890 --> 00:20:50,270
decorators or on a function nothing will

00:20:48,470 --> 00:20:52,070
log when it gets in and we need to gets

00:20:50,270 --> 00:20:54,310
out with all that yeah because I heard

00:20:52,070 --> 00:20:58,490
that it's a great use case for

00:20:54,310 --> 00:21:00,740
decorators sir logging yeah yeah I've

00:20:58,490 --> 00:21:05,690
seen that it might be I mean depends on

00:21:00,740 --> 00:21:08,420
your use case I'm worried you know I

00:21:05,690 --> 00:21:10,280
really I I personally prefer to write my

00:21:08,420 --> 00:21:12,920
own logs because to the greatest it

00:21:10,280 --> 00:21:14,120
feels more like I'm dumping this here so

00:21:12,920 --> 00:21:16,850
thing I'm going to get information when

00:21:14,120 --> 00:21:19,370
I did it well I really like to think

00:21:16,850 --> 00:21:21,470
about my about my logs I really want to

00:21:19,370 --> 00:21:23,150
think you know I want deluxe to tell me

00:21:21,470 --> 00:21:25,640
a story right I want to go to my log

00:21:23,150 --> 00:21:26,090
files and see I am doing this I want to

00:21:25,640 --> 00:21:28,760
see

00:21:26,090 --> 00:21:31,310
because when you do the decorator it

00:21:28,760 --> 00:21:32,660
worked great for today but in six months

00:21:31,310 --> 00:21:34,520
when you have a problem in production

00:21:32,660 --> 00:21:38,840
and you see this function name which is

00:21:34,520 --> 00:21:40,970
do stuff what was this thing doing but

00:21:38,840 --> 00:21:43,190
you can still go to the code but if you

00:21:40,970 --> 00:21:45,080
can save that the person the system this

00:21:43,190 --> 00:21:46,490
is happening which might not have any

00:21:45,080 --> 00:21:48,370
idea what's going on if you can save

00:21:46,490 --> 00:21:56,270
that step to him that's really valuable

00:21:48,370 --> 00:21:58,400
thank you and did you solve the problem

00:21:56,270 --> 00:22:00,320
with multi processing logging because

00:21:58,400 --> 00:22:04,700
it's always an issue yeah you can you

00:22:00,320 --> 00:22:06,260
cannot do it that's it I mean you can

00:22:04,700 --> 00:22:09,100
you would you would have to do you like

00:22:06,260 --> 00:22:11,690
you cannot use the normal you cannot use

00:22:09,100 --> 00:22:14,300
something that is log into a file like

00:22:11,690 --> 00:22:15,920
you cannot use a normal handler that

00:22:14,300 --> 00:22:18,590
will log to a file from two different

00:22:15,920 --> 00:22:21,020
process because they will share the file

00:22:18,590 --> 00:22:25,130
descriptor right just put for a CDL for

00:22:21,020 --> 00:22:28,910
example the problem is they will hmm

00:22:25,130 --> 00:22:30,590
that might actually yeah yeah I mean

00:22:28,910 --> 00:22:33,110
what I have had the digit before and

00:22:30,590 --> 00:22:34,730
what I've done is I would log via TCP to

00:22:33,110 --> 00:22:41,890
another process which is actually gonna

00:22:34,730 --> 00:22:41,890
collect all the login to sorry

00:22:42,870 --> 00:22:48,990
excuse me yeah so a lot of developers

00:22:46,380 --> 00:22:52,230
put just everything into a login for

00:22:48,990 --> 00:22:54,450
right so just dumb different variables

00:22:52,230 --> 00:22:58,160
and parameters so one of the approaches

00:22:54,450 --> 00:23:00,180
solve this problem is to extract locks I

00:22:58,160 --> 00:23:03,450
don't know if you know the striking

00:23:00,180 --> 00:23:06,540
easily extract locks so structure agent

00:23:03,450 --> 00:23:08,490
yeah so how is your view on solving

00:23:06,540 --> 00:23:11,330
these problems so that developer just

00:23:08,490 --> 00:23:15,150
put everything ended did you use

00:23:11,330 --> 00:23:17,430
structure logging or an observer so this

00:23:15,150 --> 00:23:20,070
fragment where I'm logging Jason it

00:23:17,430 --> 00:23:21,780
actually comes from that I was shuffling

00:23:20,070 --> 00:23:23,250
it and then you can purchase it

00:23:21,780 --> 00:23:24,470
afterwards and choose what you want to

00:23:23,250 --> 00:23:28,470
see how do you want it

00:23:24,470 --> 00:23:31,080
thing is I usually and still maybe

00:23:28,470 --> 00:23:33,210
old-school using log files not that I

00:23:31,080 --> 00:23:37,200
like it but my environment is what we

00:23:33,210 --> 00:23:39,450
have and at home at work for example use

00:23:37,200 --> 00:23:42,900
things like splines it's blank and more

00:23:39,450 --> 00:23:46,200
convenient thing so if you have the

00:23:42,900 --> 00:23:47,880
infrastructure to do like strike the

00:23:46,200 --> 00:23:49,740
logging where you can log JSON and then

00:23:47,880 --> 00:23:52,980
parse it and accumulate it and whatever

00:23:49,740 --> 00:23:54,270
you want go for it if you are gonna do

00:23:52,980 --> 00:23:56,430
an app at home that they are going to

00:23:54,270 --> 00:23:58,890
log files or even your company doesn't

00:23:56,430 --> 00:24:01,440
have that and you're still correcting

00:23:58,890 --> 00:24:04,980
through log files you really don't want

00:24:01,440 --> 00:24:07,650
to read Jason right but I think I think

00:24:04,980 --> 00:24:10,080
it's it's cool I think if we you know

00:24:07,650 --> 00:24:13,410
what we do today as well is we log into

00:24:10,080 --> 00:24:16,050
a file and then we we parse it if you

00:24:13,410 --> 00:24:22,740
can you can say that it makes tools in

00:24:16,050 --> 00:24:26,520
here and your comments on if your

00:24:22,740 --> 00:24:28,380
accountant we don't don't have a code

00:24:26,520 --> 00:24:30,180
that just says do stuff so one best

00:24:28,380 --> 00:24:32,100
practice I heard was always have at

00:24:30,180 --> 00:24:35,190
least enough hierarchical naming that

00:24:32,100 --> 00:24:36,930
you can see what objects all right to

00:24:35,190 --> 00:24:38,730
your comment that don't just have a

00:24:36,930 --> 00:24:41,100
logging message that says do stuff a

00:24:38,730 --> 00:24:42,480
best practice I heard is preserve at

00:24:41,100 --> 00:24:43,890
least enough levels of hierarchical

00:24:42,480 --> 00:24:45,600
naming on the object that you can

00:24:43,890 --> 00:24:48,900
unambiguously see walk calls and when

00:24:45,600 --> 00:24:51,120
and I had a question for you and what is

00:24:48,900 --> 00:24:52,920
the guarantee you can format you can

00:24:51,120 --> 00:24:54,600
format millisecond resolution on timing

00:24:52,920 --> 00:24:55,950
but what is your actual guarantee about

00:24:54,600 --> 00:24:59,130
the order and the

00:24:55,950 --> 00:25:01,139
see platform level accuracy of the

00:24:59,130 --> 00:25:02,490
timing and logging messages especially

00:25:01,139 --> 00:25:04,279
if it has to ripple up through multiple

00:25:02,490 --> 00:25:07,470
parents

00:25:04,279 --> 00:25:10,620
so did you Adam believes I can behave

00:25:07,470 --> 00:25:12,090
did you ask if it guarantees that things

00:25:10,620 --> 00:25:14,159
will go to the file in the same order

00:25:12,090 --> 00:25:16,200
that you log but that the question in

00:25:14,159 --> 00:25:18,179
supposedly it's guaranteed that in a

00:25:16,200 --> 00:25:18,600
single-threaded process you stuff is in

00:25:18,179 --> 00:25:20,700
order

00:25:18,600 --> 00:25:22,110
but the millisecond timings may still be

00:25:20,700 --> 00:25:24,210
inaccurate so what's your level of

00:25:22,110 --> 00:25:26,610
expectation about the actual accuracy of

00:25:24,210 --> 00:25:28,590
the militant climbing's should you you

00:25:26,610 --> 00:25:30,179
know what can you trust is it good to

00:25:28,590 --> 00:25:32,130
the nearest 10 millisecond or 100 or

00:25:30,179 --> 00:25:35,429
it's around I'm not sure I understand

00:25:32,130 --> 00:25:38,190
the question did you ask maybe the mic I

00:25:35,429 --> 00:25:42,720
catch oh yeah if you don't mind that you

00:25:38,190 --> 00:25:43,919
can go with him later okay and thank you

00:25:42,720 --> 00:25:46,230
so much for everyone

00:25:43,919 --> 00:25:52,140
and another applause for Mario

00:25:46,230 --> 00:25:52,140

YouTube URL: https://www.youtube.com/watch?v=o8bVslBUik8


