Title: Alessandro Molina - Kajiki, the fast and validated template engine you were looking for
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Kajiki, the fast and validated template engine you were looking for
[EuroPython 2017 - Talk - 2017-07-10 - PyCharm Room]
[Rimini, Italy]

Being dissatisfied with some of the constraints and complex usage of Genshi, the TurboGears2 team started working on an alternative that could solve Genshi speed issues, complex inheritance system and be backward compatible with genshi templates. This is a talk about what lead to the creation of the Kajiki template engine and what's particular about it. 

The talk will cover: 
- Comparison on the major template engines available in python to showcase what's special in Kajiki (validated, xml based) what was special in Genshi (also lazy evaluated)
- What's a validated template engine and why it's good to have one.
- How Kajiki works, showcase kajiki syntax, it's performances and how to use it in any python project.
- Why Kajiki is fast, code generation applied and how to write a code generation template engine like Kajiki and Jinja2 (showcase a simple 50 lines of code template engine that uses code generation).

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,550 --> 00:00:10,480
so the name of the template engine is

00:00:05,950 --> 00:00:13,419
actually kojiki so I for any of you

00:00:10,480 --> 00:00:14,889
wasn't that my talk this morning guys

00:00:13,419 --> 00:00:17,680
poking out the totally different

00:00:14,889 --> 00:00:19,570
argument actually this morning I'm one

00:00:17,680 --> 00:00:21,430
of the core developers of trouble years

00:00:19,570 --> 00:00:24,220
which is a web framework that has been

00:00:21,430 --> 00:00:27,429
around for as long as Django and it was

00:00:24,220 --> 00:00:30,160
pretty big like four or five years ago

00:00:27,429 --> 00:00:32,470
and then genres now that the ruler of

00:00:30,160 --> 00:00:36,130
the web world but there are still a lot

00:00:32,470 --> 00:00:38,290
of people especially in Europe and India

00:00:36,130 --> 00:00:40,900
and other countries that are using to

00:00:38,290 --> 00:00:43,390
abusively and in the context of

00:00:40,900 --> 00:00:45,550
operating upgrading turbo years Python

00:00:43,390 --> 00:00:48,730
free one of the problem we faced was

00:00:45,550 --> 00:00:50,770
that we were using games XI which is a

00:00:48,730 --> 00:00:53,110
very powerful and flexible template

00:00:50,770 --> 00:00:55,360
engine but there's two major side

00:00:53,110 --> 00:01:00,250
effects is really complex to use for

00:00:55,360 --> 00:01:02,220
some cases and it's really slow so we

00:01:00,250 --> 00:01:08,079
started to look around for other

00:01:02,220 --> 00:01:10,329
projects and there are actually tens of

00:01:08,079 --> 00:01:12,579
template engines and if you tried

00:01:10,329 --> 00:01:14,950
anywhere framework I jungle flask

00:01:12,579 --> 00:01:18,009
pyramid and so on each one of them else

00:01:14,950 --> 00:01:20,710
is wholly favorite complaint engine and

00:01:18,009 --> 00:01:23,530
what we were looking for was something

00:01:20,710 --> 00:01:25,719
that was really similar to gang she sort

00:01:23,530 --> 00:01:29,469
provided some core features that we are

00:01:25,719 --> 00:01:31,920
going to see and we ended up in a

00:01:29,469 --> 00:01:34,630
situation where there was not much

00:01:31,920 --> 00:01:38,049
interesting around that cool satisfy our

00:01:34,630 --> 00:01:40,869
needs so first of all let's have a

00:01:38,049 --> 00:01:44,049
global look over the template engines

00:01:40,869 --> 00:01:46,749
that we know and F exist in Python which

00:01:44,049 --> 00:01:49,780
are the most common one are probably

00:01:46,749 --> 00:01:51,819
macro in ginger and jungle template

00:01:49,780 --> 00:01:53,799
event which not only serve as a template

00:01:51,819 --> 00:01:57,479
engine elf is actually more part of

00:01:53,799 --> 00:02:00,579
jungle itself I will say that there are

00:01:57,479 --> 00:02:03,429
the properties of those template engines

00:02:00,579 --> 00:02:07,030
are usually divided in two kinds one

00:02:03,429 --> 00:02:10,360
which II which is if the syntax is

00:02:07,030 --> 00:02:13,000
markup base or if it is free text for

00:02:10,360 --> 00:02:14,890
example if you ever used ginger you can

00:02:13,000 --> 00:02:16,460
actually write practically everything

00:02:14,890 --> 00:02:18,590
inside the ginger template

00:02:16,460 --> 00:02:21,020
doesn't really have to be valid markup

00:02:18,590 --> 00:02:23,270
in any way as far as the template is

00:02:21,020 --> 00:02:26,510
able to understand the structure of your

00:02:23,270 --> 00:02:28,520
code it's fine you can even use that for

00:02:26,510 --> 00:02:32,690
JSON for example or whatever you want

00:02:28,520 --> 00:02:35,030
and then there are the text markup

00:02:32,690 --> 00:02:38,360
templates and then the way they actually

00:02:35,030 --> 00:02:41,630
run they convey itself which might be

00:02:38,360 --> 00:02:44,600
compiled or streamed they compile simply

00:02:41,630 --> 00:02:47,060
changing are the most common triangle

00:02:44,600 --> 00:02:51,020
stamping engine nowadays because they

00:02:47,060 --> 00:02:53,240
are fast really fast usually if you keep

00:02:51,020 --> 00:02:55,610
things in the right way they can be

00:02:53,240 --> 00:02:58,070
ready fast in fact the fact that they

00:02:55,610 --> 00:03:00,890
compile the template engine is compile

00:02:58,070 --> 00:03:04,040
means that it gets converted to pure

00:03:00,890 --> 00:03:06,200
Python code so your temporary doesn't

00:03:04,040 --> 00:03:08,330
exist anymore it gets translated to

00:03:06,200 --> 00:03:11,270
Python code and that Python code get

00:03:08,330 --> 00:03:13,820
executed while in the other case Genji

00:03:11,270 --> 00:03:19,090
which was one of the few example of a

00:03:13,820 --> 00:03:19,090
string the template language is actually

00:03:19,300 --> 00:03:25,760
performed a runtime so the template can

00:03:23,060 --> 00:03:28,700
change itself for example because the

00:03:25,760 --> 00:03:31,790
template has his own structure and just

00:03:28,700 --> 00:03:34,130
a stream of tags of parts of the

00:03:31,790 --> 00:03:36,440
template and each part can actually

00:03:34,130 --> 00:03:40,070
change the one that are going to come

00:03:36,440 --> 00:03:42,320
after anymore but they can do powerful

00:03:40,070 --> 00:03:44,420
manipulation at runtime of the template

00:03:42,320 --> 00:03:47,480
itself which is something that looked

00:03:44,420 --> 00:03:50,210
really cool but was actually pointless

00:03:47,480 --> 00:03:53,590
it made a lot more complex to use the

00:03:50,210 --> 00:03:57,320
template engine and in practice people

00:03:53,590 --> 00:03:59,330
never ever used it in real world apart

00:03:57,320 --> 00:04:06,200
from the guy that actually created a

00:03:59,330 --> 00:04:08,420
engine and I was trying to remember in

00:04:06,200 --> 00:04:10,640
which project tension was created I can

00:04:08,420 --> 00:04:13,040
remember right now it was a issue

00:04:10,640 --> 00:04:16,280
tracking tool so they created for their

00:04:13,040 --> 00:04:20,570
own meat we really loved the fact that

00:04:16,280 --> 00:04:22,760
Gann she was very perfectly valid HTML

00:04:20,570 --> 00:04:25,580
which means that you can open it with

00:04:22,760 --> 00:04:28,610
any editor that understands HTML doesn't

00:04:25,580 --> 00:04:30,740
need to have any specific support for

00:04:28,610 --> 00:04:33,889
again she templates themselves they're

00:04:30,740 --> 00:04:40,130
perfectly valid HTML while in fact like

00:04:33,889 --> 00:04:42,949
Marco and Jean Giants on then one more

00:04:40,130 --> 00:04:47,150
layer on top of the HTML so you need

00:04:42,949 --> 00:04:51,530
specific support for them and the fact

00:04:47,150 --> 00:04:54,979
that the geumgang she sent us was pure

00:04:51,530 --> 00:04:57,710
HTML means that it was really similar to

00:04:54,979 --> 00:05:01,639
the output to God so the template itself

00:04:57,710 --> 00:05:04,220
was in fact the result of the execution

00:05:01,639 --> 00:05:05,840
maybe some pieces were removed or things

00:05:04,220 --> 00:05:10,940
like that but it was still really

00:05:05,840 --> 00:05:13,820
similar to the today template itself and

00:05:10,940 --> 00:05:16,190
we love densha so much that in version

00:05:13,820 --> 00:05:18,620
2.2 of turbo gears it became the

00:05:16,190 --> 00:05:20,810
standard template engine and all the

00:05:18,620 --> 00:05:22,699
pluggable application which are plugins

00:05:20,810 --> 00:05:25,940
you can bring into your to a bogus

00:05:22,699 --> 00:05:27,949
application where based on gain she as

00:05:25,940 --> 00:05:32,570
it was the standard default template

00:05:27,949 --> 00:05:34,909
engine but one day the guys that were

00:05:32,570 --> 00:05:37,340
maintaining and she decided that he was

00:05:34,909 --> 00:05:41,500
no they were no longer interested in

00:05:37,340 --> 00:05:44,270
maintaining anymore so it's actually

00:05:41,500 --> 00:05:46,849
some people stepped in but the project

00:05:44,270 --> 00:05:49,669
is nearly dead nowadays and not being

00:05:46,849 --> 00:05:53,180
seeing it's not seen a release for like

00:05:49,669 --> 00:05:55,940
years and has been ported to Python 3

00:05:53,180 --> 00:05:58,460
but works only on some version of Python

00:05:55,940 --> 00:06:02,240
free if I'm correct it only works up to

00:05:58,460 --> 00:06:06,710
Python 3.4 on 3.5 and Sony doesn't work

00:06:02,240 --> 00:06:09,349
anymore and then that this was actually

00:06:06,710 --> 00:06:11,930
how are feeling at the time this news

00:06:09,349 --> 00:06:14,870
came because we just making sure our

00:06:11,930 --> 00:06:18,349
default engine for everything and then

00:06:14,870 --> 00:06:23,870
the next day they just removed me they

00:06:18,349 --> 00:06:25,580
say hey it's going to die so we didn't

00:06:23,870 --> 00:06:28,610
want to step in the mounting tension

00:06:25,580 --> 00:06:30,560
because due to the design due to the

00:06:28,610 --> 00:06:35,570
fact that it was a streamed engine it

00:06:30,560 --> 00:06:37,279
was incredibly complex it was one of the

00:06:35,570 --> 00:06:40,010
most complex code that I ever seen

00:06:37,279 --> 00:06:41,650
imagine you are trying to create an

00:06:40,010 --> 00:06:44,139
interpreter for a dynamic

00:06:41,650 --> 00:06:46,210
language which also has built into the

00:06:44,139 --> 00:06:49,360
language itself the ability to modify

00:06:46,210 --> 00:06:52,509
the language itself but not in the way

00:06:49,360 --> 00:06:54,370
that Python does it which is you can

00:06:52,509 --> 00:06:56,410
modify the bytecode but in a way that

00:06:54,370 --> 00:06:59,889
you can actually modify the source code

00:06:56,410 --> 00:07:02,410
itself so you cannot transpile that sort

00:06:59,889 --> 00:07:05,500
- something's easier you always need to

00:07:02,410 --> 00:07:08,979
work on the high level complex language

00:07:05,500 --> 00:07:12,009
and convert it to a stream of tags and

00:07:08,979 --> 00:07:14,650
things like that well it was really

00:07:12,009 --> 00:07:16,539
powerful but very few people understood

00:07:14,650 --> 00:07:19,630
the inheritance system of caching

00:07:16,539 --> 00:07:21,610
because it was a really complex I'm not

00:07:19,630 --> 00:07:23,860
going to show you much about games

00:07:21,610 --> 00:07:26,169
because we are going to see all cagey

00:07:23,860 --> 00:07:29,560
keywords which is nearly the same the

00:07:26,169 --> 00:07:31,780
syntax remember thing and we were like

00:07:29,560 --> 00:07:35,169
enough that one of the two bogeys core

00:07:31,780 --> 00:07:37,900
contributors was working at sooraj at

00:07:35,169 --> 00:07:40,419
the time and since Forge was looking to

00:07:37,900 --> 00:07:43,690
a new template engine the closer place

00:07:40,419 --> 00:07:46,750
ginger and the faster or even faster

00:07:43,690 --> 00:07:48,729
than ginger but with better validation

00:07:46,750 --> 00:07:50,979
for what they were doing and things like

00:07:48,729 --> 00:07:53,979
that so they started experimenting with

00:07:50,979 --> 00:07:57,340
the idea that then became cagy and this

00:07:53,979 --> 00:07:59,680
is the syntax of kojiki from this short

00:07:57,340 --> 00:08:02,979
example you can actually see what I was

00:07:59,680 --> 00:08:06,669
trying to tell you which is the the code

00:08:02,979 --> 00:08:08,889
itself is pure HTML with some added

00:08:06,669 --> 00:08:11,139
attributes for example you can see the

00:08:08,889 --> 00:08:14,229
pie content or you can see the pie for

00:08:11,139 --> 00:08:17,530
and things like that the pie content

00:08:14,229 --> 00:08:20,260
means of a place the content of this tag

00:08:17,530 --> 00:08:22,960
with the value of the expression that is

00:08:20,260 --> 00:08:25,419
contained in the pie content while the

00:08:22,960 --> 00:08:28,870
pie form of course will repeat these

00:08:25,419 --> 00:08:31,720
stuff this tag as many times as the

00:08:28,870 --> 00:08:33,969
iteration of the loop and you can of

00:08:31,720 --> 00:08:36,550
course as usual put variables with the

00:08:33,969 --> 00:08:39,700
one of the most widespread notation for

00:08:36,550 --> 00:08:42,099
variables representing the place so it

00:08:39,700 --> 00:08:44,320
was easy to see that the good part of

00:08:42,099 --> 00:08:46,060
these kind of template engines is that

00:08:44,320 --> 00:08:48,400
you can actually throw the template at

00:08:46,060 --> 00:08:51,970
anything that works with HTML for

00:08:48,400 --> 00:08:54,490
example so people having their designers

00:08:51,970 --> 00:08:55,060
work on the template file themselves

00:08:54,490 --> 00:08:57,370
with

00:08:55,060 --> 00:09:00,370
kind of what it is what to get editors

00:08:57,370 --> 00:09:02,470
and they could just change it in any way

00:09:00,370 --> 00:09:04,510
they liked and then the designer when it

00:09:02,470 --> 00:09:06,460
was happy with the result would provide

00:09:04,510 --> 00:09:10,330
back there and verify to the developer

00:09:06,460 --> 00:09:13,240
it won't feel a taffeta valid can shell

00:09:10,330 --> 00:09:16,089
kojiki template as far as the editor

00:09:13,240 --> 00:09:17,500
didn't remove the tax we didn't know or

00:09:16,089 --> 00:09:20,529
things like that which they usually

00:09:17,500 --> 00:09:22,240
don't do if they see a pie content that

00:09:20,529 --> 00:09:26,500
just leave it there because they don't

00:09:22,240 --> 00:09:28,510
know what to do with the directives that

00:09:26,500 --> 00:09:31,000
are provided by kojiki are the most

00:09:28,510 --> 00:09:34,029
common ones you can have of course if

00:09:31,000 --> 00:09:35,650
I'll switch for death trip I'm not going

00:09:34,029 --> 00:09:37,870
to spend too much time on this because I

00:09:35,650 --> 00:09:39,730
suppose that most of you already work

00:09:37,870 --> 00:09:44,020
with some kind of template engine and

00:09:39,730 --> 00:09:46,080
they nearly all behave the same way but

00:09:44,020 --> 00:09:49,510
the interesting part is that kojiki is

00:09:46,080 --> 00:09:51,400
preferred and converted to pure Python

00:09:49,510 --> 00:09:53,560
code this is a really interesting

00:09:51,400 --> 00:09:56,080
feature than one many template engines

00:09:53,560 --> 00:09:58,660
provide and which allows us to do very

00:09:56,080 --> 00:10:01,380
cool debugging and very simple

00:09:58,660 --> 00:10:04,120
inspection of what is going to happen

00:10:01,380 --> 00:10:06,910
while while we are writing our own

00:10:04,120 --> 00:10:10,870
template the code itself is actually

00:10:06,910 --> 00:10:13,510
generated by a well I usually from well

00:10:10,870 --> 00:10:15,850
because it's generated by a generator in

00:10:13,510 --> 00:10:18,610
the sense that there is a generator that

00:10:15,850 --> 00:10:22,540
goes through your wall syntax tree you

00:10:18,610 --> 00:10:25,060
will complete structure and for each tag

00:10:22,540 --> 00:10:28,540
that you wrote it actually gets back a

00:10:25,060 --> 00:10:30,820
Python expression so you just can see

00:10:28,540 --> 00:10:34,839
that your template is conducted one by

00:10:30,820 --> 00:10:37,480
one to Python code so you if you know

00:10:34,839 --> 00:10:40,360
when you start working with kgg you will

00:10:37,480 --> 00:10:42,790
know which code will end up for what you

00:10:40,360 --> 00:10:44,800
wrote and you will know how fast it will

00:10:42,790 --> 00:10:47,830
be which I definitely will have and

00:10:44,800 --> 00:10:50,170
things like that and then after the

00:10:47,830 --> 00:10:52,560
compile path it could represent

00:10:50,170 --> 00:10:55,089
everything to a intermediate

00:10:52,560 --> 00:10:57,880
representation which is simpler than the

00:10:55,089 --> 00:10:59,830
template itself in this context if

00:10:57,880 --> 00:11:02,140
actually resembles how most of the

00:10:59,830 --> 00:11:05,050
compilers work most of the compilers

00:11:02,140 --> 00:11:07,000
kircheis's got get an intermediate

00:11:05,050 --> 00:11:07,690
representation that is easier for them

00:11:07,000 --> 00:11:10,170
to manage

00:11:07,690 --> 00:11:14,050
and then they throw out something else

00:11:10,170 --> 00:11:16,810
and this is actually what konjiki throw

00:11:14,050 --> 00:11:19,030
out so the same exact template that we

00:11:16,810 --> 00:11:22,030
saw before gets converted to this code

00:11:19,030 --> 00:11:24,340
so you can see that it's a class that we

00:11:22,030 --> 00:11:26,620
provides the single method usually which

00:11:24,340 --> 00:11:29,830
is the main which is actually the body

00:11:26,620 --> 00:11:31,540
of your template and for each entry if

00:11:29,830 --> 00:11:34,030
it is something that doesn't need to be

00:11:31,540 --> 00:11:36,400
processed in any way it's the plain text

00:11:34,030 --> 00:11:39,580
that you've wrote so for example I have

00:11:36,400 --> 00:11:42,310
the HTML tag they had and decide on and

00:11:39,580 --> 00:11:45,400
so on and they are just sent back as

00:11:42,310 --> 00:11:47,320
they are while then it comes the real

00:11:45,400 --> 00:11:49,900
interesting part inside the title I

00:11:47,320 --> 00:11:53,530
provided the custom content which as was

00:11:49,900 --> 00:11:55,860
the title variable and what caljic does

00:11:53,530 --> 00:11:59,200
is just replace the text with the

00:11:55,860 --> 00:12:02,410
instruction that would set the title

00:11:59,200 --> 00:12:04,350
into the result into the output so we

00:12:02,410 --> 00:12:07,390
see that we have the title then the

00:12:04,350 --> 00:12:09,280
content of the title variable which is

00:12:07,390 --> 00:12:11,290
gathered back you can see one more

00:12:09,280 --> 00:12:13,690
function being called around because

00:12:11,290 --> 00:12:16,060
kojiki provides automatic escaping of

00:12:13,690 --> 00:12:19,030
the entities so you don't have to bother

00:12:16,060 --> 00:12:22,960
yourself to like replace the text but to

00:12:19,030 --> 00:12:26,820
escape the angular brackets or things

00:12:22,960 --> 00:12:29,800
like that the user cannot provide any

00:12:26,820 --> 00:12:32,230
content that will break the HTML because

00:12:29,800 --> 00:12:35,230
kojiki will escape all the variables

00:12:32,230 --> 00:12:38,200
that you're going to show and then you

00:12:35,230 --> 00:12:40,990
have the title like the closed title

00:12:38,200 --> 00:12:43,030
after the variable and then there is one

00:12:40,990 --> 00:12:45,520
more interesting part if you have a work

00:12:43,030 --> 00:12:48,790
with ginger or other template engines

00:12:45,520 --> 00:12:50,530
the internationalization the translation

00:12:48,790 --> 00:12:53,170
of the text is something that you

00:12:50,530 --> 00:12:55,990
usually need to take care you by

00:12:53,170 --> 00:12:58,510
yourself you have to like put underscore

00:12:55,990 --> 00:13:00,460
or something in front of these things

00:12:58,510 --> 00:13:02,470
that you want to translate or you have

00:13:00,460 --> 00:13:02,920
to collect them in some way or things

00:13:02,470 --> 00:13:05,830
like that

00:13:02,920 --> 00:13:08,500
when kojiki the internationalization in

00:13:05,830 --> 00:13:12,130
building into the system as it works on

00:13:08,500 --> 00:13:15,010
a structured language like HTML it can

00:13:12,130 --> 00:13:19,600
recognize which part of the template is

00:13:15,010 --> 00:13:21,480
the structure so the tag which part is

00:13:19,600 --> 00:13:24,330
content so they bought it

00:13:21,480 --> 00:13:26,550
texts of the time and we can say okay I

00:13:24,330 --> 00:13:28,560
don't care about the structure the title

00:13:26,550 --> 00:13:32,160
yet and the body that those are not

00:13:28,560 --> 00:13:34,020
something that the user cares about they

00:13:32,160 --> 00:13:36,930
are just something that represents the

00:13:34,020 --> 00:13:39,810
structure of my page but then the user

00:13:36,930 --> 00:13:43,950
cares about the text that is contained

00:13:39,810 --> 00:13:45,660
inside these are some fluids and the

00:13:43,950 --> 00:13:48,300
text that is contained inside is

00:13:45,660 --> 00:13:50,790
automatically translated by you for you

00:13:48,300 --> 00:13:53,640
by kojiki so if you have a translation

00:13:50,790 --> 00:13:55,620
available for that phrase kojiki will

00:13:53,640 --> 00:13:57,990
automatically translate that for you so

00:13:55,620 --> 00:14:00,510
you don't have to remember to drop all

00:13:57,990 --> 00:14:05,190
your texting get text also things like

00:14:00,510 --> 00:14:10,440
that and then it provides the for loop

00:14:05,190 --> 00:14:12,450
because we added a PI for tag to to the

00:14:10,440 --> 00:14:14,610
ramallah which was the test where at

00:14:12,450 --> 00:14:17,610
least item so we have a lease type and

00:14:14,610 --> 00:14:20,250
the loop so kojiki compiles it to a for

00:14:17,610 --> 00:14:22,680
loop that prints the list item and it

00:14:20,250 --> 00:14:26,340
content and here you can see that it is

00:14:22,680 --> 00:14:29,040
game that I like the variable through it

00:14:26,340 --> 00:14:31,260
and then the reason why this is actually

00:14:29,040 --> 00:14:33,660
not function of kojiki because in recent

00:14:31,260 --> 00:14:37,020
versions this one won't be translated

00:14:33,660 --> 00:14:41,490
because just empty text so it will just

00:14:37,020 --> 00:14:44,370
be skipped and then you have the ending

00:14:41,490 --> 00:14:47,250
part of your template okay

00:14:44,370 --> 00:14:49,860
so this is the result what the template

00:14:47,250 --> 00:14:53,130
that we had vendors to this this result

00:14:49,860 --> 00:14:55,850
which is at the same page with the text

00:14:53,130 --> 00:14:58,380
we provide them invaluable and the

00:14:55,850 --> 00:15:02,640
repeated entries we had in the fluid

00:14:58,380 --> 00:15:04,980
sentry the fact is that this approach is

00:15:02,640 --> 00:15:07,620
able to make tragically really really

00:15:04,980 --> 00:15:10,560
fast for example by doing a comparison

00:15:07,620 --> 00:15:15,360
to macro Ike we render this simple

00:15:10,560 --> 00:15:17,700
example like in 1 million times

00:15:15,360 --> 00:15:20,940
rendering this example 1 million times

00:15:17,700 --> 00:15:23,340
to 22 seconds in marker while doing the

00:15:20,940 --> 00:15:25,860
same exact example in KGB tool to

00:15:23,340 --> 00:15:27,840
Collier's of the time so it's twice as

00:15:25,860 --> 00:15:29,790
fast as matter which is actually one of

00:15:27,840 --> 00:15:31,830
the fastest template engines that we

00:15:29,790 --> 00:15:34,460
have around so it's actually a really

00:15:31,830 --> 00:15:36,500
interesting feature any

00:15:34,460 --> 00:15:39,350
naturally pure Python what you get is

00:15:36,500 --> 00:15:41,420
pure Python the result of caljic is pure

00:15:39,350 --> 00:15:44,270
Python so you can apply anything that

00:15:41,420 --> 00:15:46,970
works with Python like libraries like

00:15:44,270 --> 00:15:49,550
inspection like debugging whatever you

00:15:46,970 --> 00:15:52,430
want for example in this case it does

00:15:49,550 --> 00:15:55,220
something really maps which may suggest

00:15:52,430 --> 00:15:58,880
you shouldn't draw yourself which is

00:15:55,220 --> 00:16:02,120
compiling the template engine with cycle

00:15:58,880 --> 00:16:05,870
so in this case it converts their code

00:16:02,120 --> 00:16:08,060
the kojiki generated to pure c code then

00:16:05,870 --> 00:16:10,820
run that gets compiled to assembly

00:16:08,060 --> 00:16:13,160
around those binary code so it's even

00:16:10,820 --> 00:16:16,130
faster I don't remember if I did any

00:16:13,160 --> 00:16:17,960
benchmark of this experiment it was just

00:16:16,130 --> 00:16:20,240
to show you that anything you can do you

00:16:17,960 --> 00:16:22,760
the Python you can do it with the kadjic

00:16:20,240 --> 00:16:25,820
template because it just they same exact

00:16:22,760 --> 00:16:28,580
thing of once there are a few thing they

00:16:25,820 --> 00:16:32,150
need to be converted because for example

00:16:28,580 --> 00:16:34,820
there is no no kazakh exposed context

00:16:32,150 --> 00:16:38,150
while compiling to cycle but while in

00:16:34,820 --> 00:16:41,860
the end it works it was yeah there is a

00:16:38,150 --> 00:16:45,110
benchmark you can see that without much

00:16:41,860 --> 00:16:47,180
changes if you have a one-piece icon you

00:16:45,110 --> 00:16:49,940
can actually improve performances a lot

00:16:47,180 --> 00:16:53,030
if you pay attention to a few things but

00:16:49,940 --> 00:16:57,320
without any single change just by

00:16:53,030 --> 00:17:00,860
dropping my code into sight on it I got

00:16:57,320 --> 00:17:04,430
the speed up from 12 seconds to 9

00:17:00,860 --> 00:17:05,410
seconds so just by applying sight on and

00:17:04,430 --> 00:17:08,660
nothing else

00:17:05,410 --> 00:17:11,450
ensure that if anyone would invest time

00:17:08,660 --> 00:17:14,630
in optimizing it will at least be half

00:17:11,450 --> 00:17:17,209
of this time which would be like 4 or 5

00:17:14,630 --> 00:17:20,860
times faster than metal which was still

00:17:17,209 --> 00:17:23,480
the fastest one of the fastest ones and

00:17:20,860 --> 00:17:25,700
the fact that this pure in Python means

00:17:23,480 --> 00:17:28,580
that it's easy to debug and it will you

00:17:25,700 --> 00:17:31,640
know that it works with Python also if

00:17:28,580 --> 00:17:34,730
kg and for example one of the example is

00:17:31,640 --> 00:17:37,400
the deltoid debugger or the backlash the

00:17:34,730 --> 00:17:39,800
bargaining table years which whenever

00:17:37,400 --> 00:17:42,200
you have a failure in the kojiki code

00:17:39,800 --> 00:17:44,720
can in point you at the exact place

00:17:42,200 --> 00:17:46,640
where the template fail and you can see

00:17:44,720 --> 00:17:48,900
the exact instruction they failed and

00:17:46,640 --> 00:17:50,880
you can inspect the variables because

00:17:48,900 --> 00:17:53,700
they are just playing Python variables

00:17:50,880 --> 00:17:57,390
nothing magic happening so the only

00:17:53,700 --> 00:17:59,430
magic is actually the kojiki inspect the

00:17:57,390 --> 00:18:01,650
code and replace this all the

00:17:59,430 --> 00:18:04,440
information all the data that Python

00:18:01,650 --> 00:18:06,420
uses for debugging with other values for

00:18:04,440 --> 00:18:09,000
example instead of pointing to the line

00:18:06,420 --> 00:18:11,070
of the Python code it points to the line

00:18:09,000 --> 00:18:12,960
of the template so whenever you see the

00:18:11,070 --> 00:18:15,150
failure you know that is failed at line

00:18:12,960 --> 00:18:18,060
25 or your template you really don't

00:18:15,150 --> 00:18:20,700
care if they fail their line 400 of the

00:18:18,060 --> 00:18:23,940
Python code that was generated as a

00:18:20,700 --> 00:18:26,490
result of your template and it provides

00:18:23,940 --> 00:18:28,410
perfect Python syntax checking this is

00:18:26,490 --> 00:18:30,750
something that many template engine

00:18:28,410 --> 00:18:33,450
there are streamed or things like that

00:18:30,750 --> 00:18:36,270
or processed at one time do not provide

00:18:33,450 --> 00:18:38,790
whenever you start a caljic template

00:18:36,270 --> 00:18:40,620
when you compile it not when you run it

00:18:38,790 --> 00:18:42,900
so not when you are showing your page

00:18:40,620 --> 00:18:45,720
but just when you are compiling your

00:18:42,900 --> 00:18:49,350
source code your symplectic a check both

00:18:45,720 --> 00:18:52,590
the HTML and at the Python level so in

00:18:49,350 --> 00:18:56,160
this case for example I got an issue

00:18:52,590 --> 00:18:58,800
with my Python code being invalid and it

00:18:56,160 --> 00:19:02,910
tells me the exact line because instead

00:18:58,800 --> 00:19:05,910
of writing PI for in I wrote pi/4 on any

00:19:02,910 --> 00:19:10,890
complaint that there is a deadline there

00:19:05,910 --> 00:19:14,340
is on instead of in okay so I get fight

00:19:10,890 --> 00:19:17,040
on code that gets validated and some of

00:19:14,340 --> 00:19:19,950
the feature that I already explained to

00:19:17,040 --> 00:19:22,140
you which are the other recording we

00:19:19,950 --> 00:19:25,140
whenever the kadjic template phase you

00:19:22,140 --> 00:19:27,150
can inspect it and see what fail you get

00:19:25,140 --> 00:19:29,370
automatic escaping so you don't have to

00:19:27,150 --> 00:19:32,460
remember to remove any character from

00:19:29,370 --> 00:19:33,840
the input than my break your HTML or my

00:19:32,460 --> 00:19:36,810
tools Java skating's

00:19:33,840 --> 00:19:39,720
injection in your template it does

00:19:36,810 --> 00:19:42,900
automatic translation for you and it

00:19:39,720 --> 00:19:45,960
automatically minifides the result the

00:19:42,900 --> 00:19:48,960
result web page if you want usually is

00:19:45,960 --> 00:19:52,200
an option I don't keep enabled but there

00:19:48,960 --> 00:19:55,110
are people who care and it will unify

00:19:52,200 --> 00:19:58,140
the HTML for you and the thing that I

00:19:55,110 --> 00:20:00,549
love most from kojiki is actually the

00:19:58,140 --> 00:20:03,549
fact that we validate my HTML to

00:20:00,549 --> 00:20:06,159
for example I still remember that more

00:20:03,549 --> 00:20:09,099
than ten years ago I was working with a

00:20:06,159 --> 00:20:12,009
ruby and a really big project we were

00:20:09,099 --> 00:20:15,369
working on always had a page that was

00:20:12,009 --> 00:20:18,820
broken and it took us like two hours to

00:20:15,369 --> 00:20:22,499
find which partial template that it was

00:20:18,820 --> 00:20:25,330
used from a component as delighted

00:20:22,499 --> 00:20:27,879
twenty depth of distance from the page

00:20:25,330 --> 00:20:31,690
itself had the fact that was improperly

00:20:27,879 --> 00:20:36,820
closed and we didn't realize that we

00:20:31,690 --> 00:20:38,859
only got to finding the issue because

00:20:36,820 --> 00:20:42,729
once some user complained that the page

00:20:38,859 --> 00:20:44,829
was broken and while in kojiki it checks

00:20:42,729 --> 00:20:47,320
your HTML and it checks that it's

00:20:44,829 --> 00:20:51,279
perfectly valid like in this example I

00:20:47,320 --> 00:20:54,849
open the four we've a list item but then

00:20:51,279 --> 00:20:57,099
I close it as a span item and span tag

00:20:54,849 --> 00:20:58,179
and kojiki says you did something that

00:20:57,099 --> 00:20:59,919
doesn't make sense

00:20:58,179 --> 00:21:03,549
you open the list item and now you're

00:20:59,919 --> 00:21:05,049
closing a spot which is clearly wrong so

00:21:03,549 --> 00:21:06,879
you can see that it's going to prevent

00:21:05,049 --> 00:21:09,159
you from many others it's going to do a

00:21:06,879 --> 00:21:13,089
lot of things for you and it's actually

00:21:09,159 --> 00:21:15,279
faster than most of the template engine

00:21:13,089 --> 00:21:17,409
you can find around and here is an

00:21:15,279 --> 00:21:20,200
example of the automatic escaping that I

00:21:17,409 --> 00:21:23,679
was telling you like if I render a

00:21:20,200 --> 00:21:26,039
kadjic template with hateful as a fluid

00:21:23,679 --> 00:21:29,950
but in this case a poll as the angular

00:21:26,039 --> 00:21:32,289
bracket so it should break our HTML

00:21:29,950 --> 00:21:33,429
because I get an April tag which makes

00:21:32,289 --> 00:21:37,629
no sense at all

00:21:33,429 --> 00:21:40,629
while a GT detected and it will print as

00:21:37,629 --> 00:21:43,899
a result the escape version of the angle

00:21:40,629 --> 00:21:46,209
bracket so it will bring a less than NPD

00:21:43,899 --> 00:21:48,459
and the greater than entities instead of

00:21:46,209 --> 00:21:50,200
the angular brackets so it means that

00:21:48,459 --> 00:21:53,369
you don't have to care too much about

00:21:50,200 --> 00:21:56,049
you users writing in their comment

00:21:53,369 --> 00:21:58,899
malicious JavaScript or things like that

00:21:56,049 --> 00:22:01,419
because when you will render the comment

00:21:58,899 --> 00:22:04,059
that they provided even if you stored

00:22:01,419 --> 00:22:07,119
the malicious according to your database

00:22:04,059 --> 00:22:11,559
kojiki will xscape it for you and you

00:22:07,119 --> 00:22:13,719
won't be able to break your page and the

00:22:11,559 --> 00:22:14,800
translation if I write something like

00:22:13,719 --> 00:22:18,100
this

00:22:14,800 --> 00:22:20,350
I like through it then Kazuki also

00:22:18,100 --> 00:22:24,010
matically detect that the I like part

00:22:20,350 --> 00:22:25,930
can be translated its simple text that

00:22:24,010 --> 00:22:28,510
is interesting for humans are not

00:22:25,930 --> 00:22:30,670
interesting for the HTML parser so it's

00:22:28,510 --> 00:22:32,980
something that we can translate it

00:22:30,670 --> 00:22:35,260
ultimately perhaps the text for you into

00:22:32,980 --> 00:22:37,780
a get text code if you didn't provide

00:22:35,260 --> 00:22:39,820
any translation it will just output the

00:22:37,780 --> 00:22:42,670
default text world if you provide the

00:22:39,820 --> 00:22:45,130
right translation it will correctly

00:22:42,670 --> 00:22:47,560
translated it does unification for

00:22:45,130 --> 00:22:51,190
example in this case you can see that I

00:22:47,560 --> 00:22:54,640
brought a template which is render to

00:22:51,190 --> 00:22:57,580
this set of list items and if I Street

00:22:54,640 --> 00:22:58,270
the text which is enabled this option in

00:22:57,580 --> 00:23:01,000
Kazuki

00:22:58,270 --> 00:23:04,900
Kazuki will output a version of the HTML

00:23:01,000 --> 00:23:08,080
which is ripped all of all the empty

00:23:04,900 --> 00:23:12,040
spaces which is still valid HTML so it

00:23:08,080 --> 00:23:14,080
will maintain like content of prayer or

00:23:12,040 --> 00:23:15,850
scripts or things like that but if we

00:23:14,080 --> 00:23:19,390
strip anything there is no study

00:23:15,850 --> 00:23:21,130
chemistry and of course like many other

00:23:19,390 --> 00:23:23,260
template engines if you are not working

00:23:21,130 --> 00:23:25,030
with HTML but you are working with

00:23:23,260 --> 00:23:27,460
something else you can use it on plain

00:23:25,030 --> 00:23:30,340
text so in this case is the tragic a

00:23:27,460 --> 00:23:32,620
syntax for plain text like we did the

00:23:30,340 --> 00:23:36,130
example of using a template engine with

00:23:32,620 --> 00:23:39,310
JSON or things like that okay that I was

00:23:36,130 --> 00:23:41,530
short a night like I did this part last

00:23:39,310 --> 00:23:44,350
time like three years ago so I have

00:23:41,530 --> 00:23:46,840
remember izing hope you enjoyed it it

00:23:44,350 --> 00:23:49,000
was a good fallback and if you have

00:23:46,840 --> 00:23:50,800
questions feel free to ask and try

00:23:49,000 --> 00:23:53,460
kojiki and let me know what you think

00:23:50,800 --> 00:23:53,460
okay

00:23:55,570 --> 00:24:11,919
oh yeah not directly related Kazuki but

00:24:09,970 --> 00:24:13,389
what is happening with turbo gears I

00:24:11,919 --> 00:24:16,119
mean is it still under active

00:24:13,389 --> 00:24:21,549
development or because it can't got

00:24:16,119 --> 00:24:23,919
folded into flow into whatever the you

00:24:21,549 --> 00:24:27,549
know pyramid and then there was another

00:24:23,919 --> 00:24:29,649
one that began with E and they were

00:24:27,549 --> 00:24:31,659
going to you know which was mostly the

00:24:29,649 --> 00:24:33,639
whiskey thing is it's still under active

00:24:31,659 --> 00:24:36,099
development know what's going on with it

00:24:33,639 --> 00:24:37,659
yeah it's the on during active

00:24:36,099 --> 00:24:39,460
development it became the default

00:24:37,659 --> 00:24:43,570
template engine into a bull years

00:24:39,460 --> 00:24:46,179
convention turbo gears itself yeah yeah

00:24:43,570 --> 00:24:49,330
yeah okay we just released like three

00:24:46,179 --> 00:24:52,749
days ago version 2.3 eleven define

00:24:49,330 --> 00:24:55,149
correct and there is a it's been there

00:24:52,749 --> 00:24:58,359
is was a major rewrite during version

00:24:55,149 --> 00:25:00,580
2.3 that made it like four times faster

00:24:58,359 --> 00:25:02,049
and it's not depending on pylons anymore

00:25:00,580 --> 00:25:05,649
but it's still fully backward-compatible

00:25:02,049 --> 00:25:09,039
and then the upcoming version which will

00:25:05,649 --> 00:25:11,499
be version 2.4 has a major of writing

00:25:09,039 --> 00:25:14,019
the plug-in system for configuration and

00:25:11,499 --> 00:25:16,090
things like that so it still under

00:25:14,019 --> 00:25:18,580
active development and it's trying to

00:25:16,090 --> 00:25:20,859
maintain full backward-compatible while

00:25:18,580 --> 00:25:22,629
moving on and things like that and how

00:25:20,859 --> 00:25:25,389
many developers are actively working on

00:25:22,629 --> 00:25:27,729
currently I'm currently the release

00:25:25,389 --> 00:25:29,950
manager for two buggies and around like

00:25:27,729 --> 00:25:32,799
other three people that continuously

00:25:29,950 --> 00:25:36,129
work on it on a daily basis and there

00:25:32,799 --> 00:25:46,499
are like in seven eight people that

00:25:36,129 --> 00:25:46,499
contribute from time to time okay

00:25:47,000 --> 00:25:56,029
you

00:25:48,380 --> 00:25:56,029

YouTube URL: https://www.youtube.com/watch?v=aHt5-WCaJyA


