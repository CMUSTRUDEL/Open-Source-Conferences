Title: Nikola Đipanov - How Facebook uses Python to build (and operate) datacenters at scale
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"How Facebook uses Python to build (and operate) datacenters at scale
[EuroPython 2017 - Talk - 2017-07-11 - Anfiteatro 1]
[Rimini, Italy]

With 4 datacenters on-line and more coming fast, building and operating datacenter buildings becomes a problem we need to solve at scale. At Facebook, Several teams of Production Engineers write the software that helps us do this efficiently, and we use Python... a lot.

In this talk, I will go into some detail about only some of problems we try to solve to make sure our datacenters come online on time so that we can make sure you can connect with all your friends on Facebook, and
keep them humming, as efficiently as possible.

We'll go into some detail about the awesome Python infrastructure (some of it open source), that we use to build this software, and some of the engineering practices.

This is a talk for you if you were wondering how to track each and every strand of fiber cabling within a datacenter, or make sure we find out that the cooling system isn't really doing it's thing before actual servers catch fire from serving you live videos.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,140 --> 00:00:10,600
Thanks thanks everybody hello my name is

00:00:07,600 --> 00:00:12,670
Nicola Japan ov and I'm going to be

00:00:10,600 --> 00:00:15,910
telling you about how we at Facebook use

00:00:12,670 --> 00:00:18,279
Python to help us build data centers at

00:00:15,910 --> 00:00:22,450
scale some of you may remember me from

00:00:18,279 --> 00:00:25,720
previous years from such venues as the

00:00:22,450 --> 00:00:30,099
river bar I'm a production engineer at

00:00:25,720 --> 00:00:33,670
Facebook production engineering as role

00:00:30,099 --> 00:00:35,440
is kind of like a mix between software

00:00:33,670 --> 00:00:38,980
and systems engineering I'm not going to

00:00:35,440 --> 00:00:41,199
talk about this in a lot of details now

00:00:38,980 --> 00:00:44,519
but if you're interested you can swing

00:00:41,199 --> 00:00:48,660
by our booth down at the marketplace and

00:00:44,519 --> 00:00:48,660
we can tell you more about this

00:00:49,679 --> 00:00:55,120
so this talk also has an alternative

00:00:52,749 --> 00:00:57,249
title which I'm sure is a theme that

00:00:55,120 --> 00:01:01,809
you've heard a lot about in this

00:00:57,249 --> 00:01:03,460
conference still and it's automating the

00:01:01,809 --> 00:01:07,330
things that you didn't think you could

00:01:03,460 --> 00:01:10,570
automate so Facebook is growing really

00:01:07,330 --> 00:01:13,780
fast we have more and more users doing

00:01:10,570 --> 00:01:15,820
more and more things on the site this

00:01:13,780 --> 00:01:19,150
means that some things that we could get

00:01:15,820 --> 00:01:21,070
away as a company by doing by hands we

00:01:19,150 --> 00:01:24,670
can't do anymore because we're not going

00:01:21,070 --> 00:01:27,220
to catch up with the requirements of our

00:01:24,670 --> 00:01:30,220
scale now I'm not saying that this

00:01:27,220 --> 00:01:33,030
applies to any company out there but an

00:01:30,220 --> 00:01:36,400
interesting thought experiment would be

00:01:33,030 --> 00:01:39,940
if you consider that computers are

00:01:36,400 --> 00:01:42,310
getting cheaper it's actually getting

00:01:39,940 --> 00:01:44,670
more and more expensive every year for

00:01:42,310 --> 00:01:47,610
you to not use computers to do things

00:01:44,670 --> 00:01:53,410
because humans are not getting cheaper

00:01:47,610 --> 00:01:57,330
in theory and so yeah this may not apply

00:01:53,410 --> 00:02:00,880
to everybody here but at Facebook we

00:01:57,330 --> 00:02:03,190
really needed to stop and think about

00:02:00,880 --> 00:02:05,530
how we can stop doing things that really

00:02:03,190 --> 00:02:11,890
are not going to scale and this is one

00:02:05,530 --> 00:02:15,370
story of such a thing so fabric this is

00:02:11,890 --> 00:02:18,099
this is how Facebook designs data center

00:02:15,370 --> 00:02:21,700
networking this is the

00:02:18,099 --> 00:02:24,250
so-called spine leaf topology I think

00:02:21,700 --> 00:02:27,909
it's a design that somebody came up with

00:02:24,250 --> 00:02:32,349
in the 1950s so at the bleeding edge of

00:02:27,909 --> 00:02:34,959
technology as always and what this

00:02:32,349 --> 00:02:38,579
allows us to do is add compute capacity

00:02:34,959 --> 00:02:41,200
without having to mess with the network

00:02:38,579 --> 00:02:44,109
among other things I'm not a networking

00:02:41,200 --> 00:02:46,329
expert but we do have some networking

00:02:44,109 --> 00:02:48,430
people here at the conference so if

00:02:46,329 --> 00:02:52,060
somebody's interested in this particular

00:02:48,430 --> 00:02:54,129
thing you can again swing down by our

00:02:52,060 --> 00:02:56,530
booth and I'm sure some of the

00:02:54,129 --> 00:02:58,930
networking folks will try to help you

00:02:56,530 --> 00:03:01,299
and interesting data point is that they

00:02:58,930 --> 00:03:03,340
are networking people at the Python

00:03:01,299 --> 00:03:09,959
conference so yeah that's kind of like

00:03:03,340 --> 00:03:17,650
part of the whole team theme yeah so but

00:03:09,959 --> 00:03:20,379
Facebook we actually have in yeah we

00:03:17,650 --> 00:03:23,290
have many of these fabrics because we

00:03:20,379 --> 00:03:25,449
have a number of regions that have a

00:03:23,290 --> 00:03:32,370
number of buildings in them so this adds

00:03:25,449 --> 00:03:35,159
up quickly at Facebook and so a question

00:03:32,370 --> 00:03:38,829
for the audience and a little bit of a

00:03:35,159 --> 00:03:41,859
nausea inducing animation thanks to

00:03:38,829 --> 00:03:46,090
PowerPoint as how much fiber cabling

00:03:41,859 --> 00:03:52,900
connects all of these fabrics like maybe

00:03:46,090 --> 00:03:55,419
venture guests and so let me just say

00:03:52,900 --> 00:03:58,120
that for astronomy nerds in the audience

00:03:55,419 --> 00:04:03,310
this is not an actual representation of

00:03:58,120 --> 00:04:07,150
planetary motion just to you know get it

00:04:03,310 --> 00:04:09,250
out there so it turns out there's quite

00:04:07,150 --> 00:04:13,629
a lot of fiber cabling in our data

00:04:09,250 --> 00:04:16,389
centers and some of my colleagues from

00:04:13,629 --> 00:04:18,609
the data center teams calculated that

00:04:16,389 --> 00:04:21,430
it's about the million kilometers of

00:04:18,609 --> 00:04:26,889
fiber cabling and that we have to deal

00:04:21,430 --> 00:04:30,190
with so it's interior enough to in this

00:04:26,889 --> 00:04:31,130
make-believe universe go to the moon and

00:04:30,190 --> 00:04:39,080
back

00:04:31,130 --> 00:04:41,780
and around and yeah so we can think

00:04:39,080 --> 00:04:43,640
about this in terms of five reports that

00:04:41,780 --> 00:04:49,850
we have to deal with in our data centers

00:04:43,640 --> 00:04:51,980
and as we are adding more capacity we

00:04:49,850 --> 00:04:55,250
have less time to do the things we used

00:04:51,980 --> 00:04:59,810
to be able to do without the automation

00:04:55,250 --> 00:05:02,810
and we can't do it that anymore because

00:04:59,810 --> 00:05:06,980
there's just more stuff happening today

00:05:02,810 --> 00:05:09,080
we are at approximately between 10 and

00:05:06,980 --> 00:05:11,060
20 million ports but that number is

00:05:09,080 --> 00:05:18,800
going to grow in the next couple of

00:05:11,060 --> 00:05:22,030
years rapidly and yeah so this is this

00:05:18,800 --> 00:05:27,680
is really not where we want to be and

00:05:22,030 --> 00:05:30,010
and when it comes to operating this

00:05:27,680 --> 00:05:34,690
stuff we also don't want to have people

00:05:30,010 --> 00:05:42,170
deal with this kind of stuff we need to

00:05:34,690 --> 00:05:48,010
we need to do better and then cheesy

00:05:42,170 --> 00:05:53,870
animation later we build robots with

00:05:48,010 --> 00:05:59,240
funny tattoos to help us do this and one

00:05:53,870 --> 00:06:06,520
of the tattoos is a Python logo so it's

00:05:59,240 --> 00:06:10,250
on the slide yeah so this is a nice

00:06:06,520 --> 00:06:13,640
sunset California sunset photo off I

00:06:10,250 --> 00:06:17,590
think it's building 16 and the main

00:06:13,640 --> 00:06:21,380
Facebook campus in Menlo Park California

00:06:17,590 --> 00:06:25,250
the address is one hacker way and this

00:06:21,380 --> 00:06:28,640
is kind of like what we're Facebook

00:06:25,250 --> 00:06:31,040
believe is is a good way to to solve

00:06:28,640 --> 00:06:33,350
problems is to hack so we hold these

00:06:31,040 --> 00:06:36,650
hacks which are also kind of like

00:06:33,350 --> 00:06:41,030
hackathons there can be a couple of days

00:06:36,650 --> 00:06:43,550
long nowadays mostly people go home and

00:06:41,030 --> 00:06:44,380
sleep I don't think this is the case all

00:06:43,550 --> 00:06:50,110
the time but

00:06:44,380 --> 00:06:52,120
days it is and we take this very

00:06:50,110 --> 00:06:54,760
seriously lots of Engineers take a

00:06:52,120 --> 00:06:57,190
couple of days to think about exactly

00:06:54,760 --> 00:06:59,380
the kind of things that that I try to

00:06:57,190 --> 00:07:02,650
talk about here like what things can we

00:06:59,380 --> 00:07:04,570
do better and then maybe sit in a room

00:07:02,650 --> 00:07:09,070
for a day or two and try to come up with

00:07:04,570 --> 00:07:12,640
a quick prototype and many many internal

00:07:09,070 --> 00:07:14,680
projects and even external facing

00:07:12,640 --> 00:07:18,970
products at Facebook started out as like

00:07:14,680 --> 00:07:22,500
crazy ideas that people people just sat

00:07:18,970 --> 00:07:27,280
together in the room and hacked on for

00:07:22,500 --> 00:07:29,650
for a day or two and yeah this is an

00:07:27,280 --> 00:07:32,200
aerial shot of the of the campus

00:07:29,650 --> 00:07:35,440
building 16 is at the top right corner I

00:07:32,200 --> 00:07:39,940
think and you can see the San Francisco

00:07:35,440 --> 00:07:43,110
Bay at the back and like realistically

00:07:39,940 --> 00:07:46,300
you cannot just hack your way through

00:07:43,110 --> 00:07:49,660
some problems you can start out like

00:07:46,300 --> 00:07:54,340
that and that's a good way to to build a

00:07:49,660 --> 00:07:56,260
prototype test your ideas but as you

00:07:54,340 --> 00:07:58,780
want to use this and make make better

00:07:56,260 --> 00:08:04,360
use of it you have to put it in proper

00:07:58,780 --> 00:08:06,880
production and there's a there's one

00:08:04,360 --> 00:08:08,650
language that's actually quite good and

00:08:06,880 --> 00:08:11,890
helpful when you need to come up with a

00:08:08,650 --> 00:08:14,680
fast prototype but actually it works

00:08:11,890 --> 00:08:17,200
well in production as well you probably

00:08:14,680 --> 00:08:19,000
heard about this language really at

00:08:17,200 --> 00:08:22,360
Facebook we are kind of like thumbs up

00:08:19,000 --> 00:08:27,400
thumbs up in Python and hear some

00:08:22,360 --> 00:08:30,670
numbers from our one single repo that we

00:08:27,400 --> 00:08:32,800
have that I pulled out to June these are

00:08:30,670 --> 00:08:34,599
rough numbers but we actually have

00:08:32,800 --> 00:08:37,330
thousands of binaries running in

00:08:34,599 --> 00:08:40,900
production decent number of them is

00:08:37,330 --> 00:08:42,210
Python 3 we have millions of lines of

00:08:40,900 --> 00:08:45,790
code

00:08:42,210 --> 00:08:49,090
40% if you look at the line of code

00:08:45,790 --> 00:08:52,060
count is actually Python 3 so we are

00:08:49,090 --> 00:08:54,850
very invested in Python 3 and it's the

00:08:52,060 --> 00:08:56,190
second most used language for back-end

00:08:54,850 --> 00:09:00,930
services

00:08:56,190 --> 00:09:03,509
after c++ and our like most people

00:09:00,930 --> 00:09:07,069
probably know that like the front end of

00:09:03,509 --> 00:09:10,379
facebook the product is written in

00:09:07,069 --> 00:09:12,930
slightly improved or significantly

00:09:10,379 --> 00:09:15,990
improved version of PHP so we don't

00:09:12,930 --> 00:09:20,970
count this here but everything in the

00:09:15,990 --> 00:09:23,790
backend is mostly C++ and Python with

00:09:20,970 --> 00:09:27,300
some other interesting bits here and

00:09:23,790 --> 00:09:29,970
there so how does it all work together

00:09:27,300 --> 00:09:33,810
you have all of these servers running

00:09:29,970 --> 00:09:37,970
Python C++ some people like Haskell it's

00:09:33,810 --> 00:09:37,970
apparently cool or used to be and

00:09:38,569 --> 00:09:47,160
Facebook we use thrift Apache thrift

00:09:42,870 --> 00:09:50,490
it's basically an RPC framework and what

00:09:47,160 --> 00:09:52,709
it does is like you can define types and

00:09:50,490 --> 00:09:56,459
you can find the interface of your

00:09:52,709 --> 00:09:58,110
service and then you have a compiler

00:09:56,459 --> 00:10:00,240
that compiles this and generates

00:09:58,110 --> 00:10:02,810
language-specific code so you can have

00:10:00,240 --> 00:10:05,459
services written in different languages

00:10:02,810 --> 00:10:08,339
that that can talk to each other

00:10:05,459 --> 00:10:12,329
seamlessly and all of your definition

00:10:08,339 --> 00:10:14,100
lives in a in like file like this so

00:10:12,329 --> 00:10:18,600
this is obviously a very contrived

00:10:14,100 --> 00:10:25,019
example this is not actual code but like

00:10:18,600 --> 00:10:26,759
our system to help us deal with a lot of

00:10:25,019 --> 00:10:29,009
fibers would maybe have an interface

00:10:26,759 --> 00:10:30,810
like this you would define a fiber type

00:10:29,009 --> 00:10:35,240
and maybe define a location type and

00:10:30,810 --> 00:10:39,059
then you would have a fiber server and

00:10:35,240 --> 00:10:41,399
then you would be able to ask what kind

00:10:39,059 --> 00:10:46,110
of fiber cabling is happening at a

00:10:41,399 --> 00:10:48,029
certain location and then like once you

00:10:46,110 --> 00:10:51,990
run the thrift compiler and generate

00:10:48,029 --> 00:10:53,699
some code then you get generated code

00:10:51,990 --> 00:10:55,649
which you can then import and it's

00:10:53,699 --> 00:10:59,220
fairly easy as you can see there's only

00:10:55,649 --> 00:11:01,319
like about 6 imports and then you have

00:10:59,220 --> 00:11:03,870
to actually write the business logic of

00:11:01,319 --> 00:11:05,459
your service that's we still haven't

00:11:03,870 --> 00:11:10,499
cracked that problem

00:11:05,459 --> 00:11:12,679
I mean how not to do it and then you

00:11:10,499 --> 00:11:15,029
instantiate your handler there's a

00:11:12,679 --> 00:11:17,269
processor there's Sanka there's two

00:11:15,029 --> 00:11:21,740
factories because one is enough

00:11:17,269 --> 00:11:24,329
generally this is this is not very

00:11:21,740 --> 00:11:25,980
engineer friendly and it's also there's

00:11:24,329 --> 00:11:28,559
a number of problems with this like

00:11:25,980 --> 00:11:31,369
there's no signal handling there's no

00:11:28,559 --> 00:11:37,139
monitoring there's basically nothing so

00:11:31,369 --> 00:11:39,809
yeah we came up with a solution to this

00:11:37,139 --> 00:11:42,779
and open sourced it it's called sparks

00:11:39,809 --> 00:11:46,470
and it's basically a services framework

00:11:42,779 --> 00:11:49,319
for Python and at Facebook we used riff

00:11:46,470 --> 00:11:52,019
for everything so it supports drift but

00:11:49,319 --> 00:11:54,360
it also supports HTTP and it does a lot

00:11:52,019 --> 00:11:58,730
of cool things you have periodic tasks

00:11:54,360 --> 00:12:01,290
background tasks you have logging

00:11:58,730 --> 00:12:04,470
command-line arguments all sorts of nice

00:12:01,290 --> 00:12:07,499
things like that so even if you're not

00:12:04,470 --> 00:12:09,629
interested in using it as such it's very

00:12:07,499 --> 00:12:11,339
nice readable code so you can take a

00:12:09,629 --> 00:12:12,990
look at it if you're interested like

00:12:11,339 --> 00:12:15,569
this is a good example of how you would

00:12:12,990 --> 00:12:18,179
write a service framework in Python

00:12:15,569 --> 00:12:24,929
which I'm sure like is becoming more and

00:12:18,179 --> 00:12:27,839
more common nowadays and then if you if

00:12:24,929 --> 00:12:31,860
we use parts this whole boilerplate

00:12:27,839 --> 00:12:34,259
becomes much better there's just you

00:12:31,860 --> 00:12:37,350
still have to write your code we can't

00:12:34,259 --> 00:12:40,230
help you with that yet and but then it's

00:12:37,350 --> 00:12:42,449
just like a couple of things and this

00:12:40,230 --> 00:12:44,339
thing will do way more than the previous

00:12:42,449 --> 00:12:46,470
example did because it will expose

00:12:44,339 --> 00:12:49,110
metrics so you can monitor your service

00:12:46,470 --> 00:12:54,749
and go and like five weeks vacation like

00:12:49,110 --> 00:13:00,119
connected and all sorts of other things

00:12:54,749 --> 00:13:01,980
to get for free and so for those of you

00:13:00,119 --> 00:13:05,759
who were paying attention I didn't

00:13:01,980 --> 00:13:08,369
mention binaries before and most people

00:13:05,759 --> 00:13:10,350
think of Python is a interpreted

00:13:08,369 --> 00:13:12,029
language which does not have binaries

00:13:10,350 --> 00:13:16,459
that has source files that are then

00:13:12,029 --> 00:13:16,459
interpreted by the C Python interpreter

00:13:16,580 --> 00:13:21,680
and Facebook we actually don't use

00:13:19,220 --> 00:13:24,790
virtual and BIP or any kind of thing

00:13:21,680 --> 00:13:28,130
like that we actually do build binaries

00:13:24,790 --> 00:13:31,190
and we distribute them to all of our

00:13:28,130 --> 00:13:35,570
machines also using Python which I will

00:13:31,190 --> 00:13:39,320
tell you more about this in a moment so

00:13:35,570 --> 00:13:44,090
we have one build system threw them all

00:13:39,320 --> 00:13:46,040
in and Facebook scope buck and it's also

00:13:44,090 --> 00:13:49,910
open source so if somebody is interested

00:13:46,040 --> 00:13:54,400
in this you can go to buck built comm

00:13:49,910 --> 00:13:54,400
and you will see you can read more about

00:13:54,670 --> 00:14:01,340
agreed more about buck and basically we

00:13:59,480 --> 00:14:03,110
use buck to build Python binaries this

00:14:01,340 --> 00:14:04,760
is not the new technology like this has

00:14:03,110 --> 00:14:07,280
done they're open source solutions to

00:14:04,760 --> 00:14:09,890
this but what we do is like we put it in

00:14:07,280 --> 00:14:13,400
a zip archive and then pretend it with a

00:14:09,890 --> 00:14:16,550
shell script that knows how to extract

00:14:13,400 --> 00:14:18,620
and execute execute peer code so all of

00:14:16,550 --> 00:14:22,250
our code all of the binary dependencies

00:14:18,620 --> 00:14:25,900
all of Python pure Python dependencies

00:14:22,250 --> 00:14:28,610
would be in a one big blob that you then

00:14:25,900 --> 00:14:29,990
send to all of your servers but can help

00:14:28,610 --> 00:14:32,180
you with a lot of other things that

00:14:29,990 --> 00:14:33,770
caches your build artifacts you don't

00:14:32,180 --> 00:14:37,390
have to rebuild things all the time that

00:14:33,770 --> 00:14:40,490
don't change and it has a very nice

00:14:37,390 --> 00:14:44,660
reproducible way to define your builds

00:14:40,490 --> 00:14:47,390
and take a look at this this is actually

00:14:44,660 --> 00:14:49,370
also Python code so this is actually

00:14:47,390 --> 00:14:51,980
very useful for me to come up with all

00:14:49,370 --> 00:14:54,200
the stats from a couple of slides back

00:14:51,980 --> 00:14:56,750
because you can use things like the ast

00:14:54,200 --> 00:14:59,360
module to parse this and figure

00:14:56,750 --> 00:15:01,880
interesting things out about your build

00:14:59,360 --> 00:15:05,420
so in this case we define our thread

00:15:01,880 --> 00:15:08,950
library which tells the the which tells

00:15:05,420 --> 00:15:11,450
bucket to build the and generate the

00:15:08,950 --> 00:15:14,740
generated code and then we have a Python

00:15:11,450 --> 00:15:17,720
binary that depends on this library and

00:15:14,740 --> 00:15:20,570
runs server pi which then

00:15:17,720 --> 00:15:24,150
solves all of our problems in theory of

00:15:20,570 --> 00:15:27,680
course and

00:15:24,150 --> 00:15:33,600
so yeah like I said now we have binaries

00:15:27,680 --> 00:15:36,270
Facebook we use BitTorrent which is also

00:15:33,600 --> 00:15:38,600
powered by Python and async IO to take

00:15:36,270 --> 00:15:41,670
those miners and distribute them to a

00:15:38,600 --> 00:15:44,730
huge fleet of servers where they need to

00:15:41,670 --> 00:15:54,420
be so yeah

00:15:44,730 --> 00:16:01,170
Python is heavily abused and this leads

00:15:54,420 --> 00:16:03,420
us to the kind of like via TL DR of the

00:16:01,170 --> 00:16:06,600
talk and if you take anything away from

00:16:03,420 --> 00:16:10,830
this it's well actually it's two things

00:16:06,600 --> 00:16:13,830
that some things about how we use Python

00:16:10,830 --> 00:16:16,830
at Facebook but also that the robots are

00:16:13,830 --> 00:16:19,740
coming and I was really practicing this

00:16:16,830 --> 00:16:22,500
but I couldn't come up with with a good

00:16:19,740 --> 00:16:24,900
good enough impression of an Austrian

00:16:22,500 --> 00:16:27,660
accent sink and they need your clothes

00:16:24,900 --> 00:16:33,270
so imagine I've said it in an Austrian

00:16:27,660 --> 00:16:35,790
accent and but yeah like I said s think

00:16:33,270 --> 00:16:37,980
scale you need to automate more and more

00:16:35,790 --> 00:16:40,470
things I think this has become a very

00:16:37,980 --> 00:16:43,080
big theme in a lot of in a lot of talks

00:16:40,470 --> 00:16:50,640
that I heard today and and the previous

00:16:43,080 --> 00:16:52,740
days at this conference so it's

00:16:50,640 --> 00:16:54,300
something to think about it's very for

00:16:52,740 --> 00:16:56,880
me it's very interesting to think about

00:16:54,300 --> 00:16:58,500
how really a lot of things that you

00:16:56,880 --> 00:17:02,610
didn't even think you could be

00:16:58,500 --> 00:17:04,800
automating are starting to pieces of it

00:17:02,610 --> 00:17:06,990
are starting to get eaten by computers

00:17:04,800 --> 00:17:10,470
and done by computers more and more and

00:17:06,990 --> 00:17:14,250
at Facebook we use hacks at it's a very

00:17:10,470 --> 00:17:16,800
fun interesting way to to come up with

00:17:14,250 --> 00:17:24,600
ideas of what things can go away and be

00:17:16,800 --> 00:17:30,240
done by robots and yeah and with that I

00:17:24,600 --> 00:17:31,550
ran a little bit short on time but we're

00:17:30,240 --> 00:17:34,820
hiring

00:17:31,550 --> 00:17:37,130
and what's interesting for these folks I

00:17:34,820 --> 00:17:38,780
think is London and Dublin offices for

00:17:37,130 --> 00:17:43,220
production engineering so if you're

00:17:38,780 --> 00:17:49,160
interested to come and build robots with

00:17:43,220 --> 00:17:51,680
us and maybe do cheesy slide decks yeah

00:17:49,160 --> 00:17:52,940
come to the booth and and talk to us

00:17:51,680 --> 00:18:01,790
that's it

00:17:52,940 --> 00:18:04,130
thank you as for questions I would

00:18:01,790 --> 00:18:07,220
prefer if like people grab me at the

00:18:04,130 --> 00:18:10,640
booth I'm going to be at the booth whole

00:18:07,220 --> 00:18:13,580
day tomorrow so I think it's a little

00:18:10,640 --> 00:18:16,310
bit awkward to talk like this so come

00:18:13,580 --> 00:18:18,200
grab me after the boot and and we can

00:18:16,310 --> 00:18:24,619
just thanks a lot

00:18:18,200 --> 00:18:24,619

YouTube URL: https://www.youtube.com/watch?v=AJZPSvD19mU


